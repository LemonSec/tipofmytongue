1
00:00:00,000 --> 00:00:09,120
hello everyone welcome to our talk today

2
00:00:07,830 --> 00:00:12,629
we'll be talking about privileged

3
00:00:09,120 --> 00:00:14,160
containers and what those are yeah thank

4
00:00:12,630 --> 00:00:19,130
you - I'd say for finally getting in

5
00:00:14,160 --> 00:00:21,390
monitor a big enough cool I'm Frenchy

6
00:00:19,130 --> 00:00:22,560
Sam Stewart is my real name but a lot of

7
00:00:21,390 --> 00:00:22,949
people know me as Frankie on the

8
00:00:22,560 --> 00:00:24,509
Internet

9
00:00:22,949 --> 00:00:26,970
I'm the infrastructure security

10
00:00:24,510 --> 00:00:28,050
engineering manager at cruise cruises

11
00:00:26,970 --> 00:00:30,210
company make self-driving cars

12
00:00:28,050 --> 00:00:32,700
infrastruc DOS many things one of them

13
00:00:30,210 --> 00:00:34,469
is container security cool and I'm I am

14
00:00:32,700 --> 00:00:36,239
a product manager at github working on

15
00:00:34,469 --> 00:00:38,100
software supply chain security you may

16
00:00:36,239 --> 00:00:40,260
know me more recently I was working on

17
00:00:38,100 --> 00:00:42,930
container security at Google and we're

18
00:00:40,260 --> 00:00:44,309
talking about how to how to help protect

19
00:00:42,930 --> 00:00:46,680
privileged containers in your

20
00:00:44,309 --> 00:00:49,980
environment so on today's agenda will be

21
00:00:46,680 --> 00:00:51,329
covering privileged containers so why

22
00:00:49,980 --> 00:00:53,940
this talk while using the privilege to

23
00:00:51,329 --> 00:00:55,739
flag is exceedingly common and it's also

24
00:00:53,940 --> 00:00:56,940
kind of dangerous so we want to make

25
00:00:55,739 --> 00:00:58,980
sure that you're following a best

26
00:00:56,940 --> 00:01:01,680
security practices here a good security

27
00:00:58,980 --> 00:01:03,269
hygiene the idea here is that you can

28
00:01:01,680 --> 00:01:04,680
you know take what you need to know and

29
00:01:03,270 --> 00:01:06,150
go back to your company as your clients

30
00:01:04,680 --> 00:01:08,130
to tell them to stop using the privilege

31
00:01:06,150 --> 00:01:10,409
like so we'll cover what a container is

32
00:01:08,130 --> 00:01:11,850
and what things like container D and SEC

33
00:01:10,409 --> 00:01:13,770
comp and all these acronyms and terms

34
00:01:11,850 --> 00:01:15,720
you've heard before are what the

35
00:01:13,770 --> 00:01:17,899
privileged flag actually does in terms

36
00:01:15,720 --> 00:01:19,950
of all the features that you can control

37
00:01:17,900 --> 00:01:22,170
individually and capabilities that you

38
00:01:19,950 --> 00:01:23,700
can control using that flag and like

39
00:01:22,170 --> 00:01:25,200
what they do what happens if you don't

40
00:01:23,700 --> 00:01:26,640
block those and then we'll talk about

41
00:01:25,200 --> 00:01:28,530
isolation and kubernetes and some

42
00:01:26,640 --> 00:01:34,380
options you have for further restricting

43
00:01:28,530 --> 00:01:35,640
what containers can do so a very

44
00:01:34,380 --> 00:01:39,600
scientific audience participation

45
00:01:35,640 --> 00:01:41,250
analysis I only speak pirate so please

46
00:01:39,600 --> 00:01:42,689
give me a big loud yarr

47
00:01:41,250 --> 00:01:44,850
when I call out your particular

48
00:01:42,689 --> 00:01:47,279
distinction who here has never heard of

49
00:01:44,850 --> 00:01:49,860
the term containers before today one

50
00:01:47,280 --> 00:01:52,140
person I don't believe you in anyone

51
00:01:49,860 --> 00:01:54,060
else no wonderful goods at least

52
00:01:52,140 --> 00:01:55,229
somewhat familiar who's heard of them

53
00:01:54,060 --> 00:01:57,810
maybe once or twice but not super

54
00:01:55,229 --> 00:02:01,170
familiar maybe you know use it once or

55
00:01:57,810 --> 00:02:03,930
twice big yar please excellent wonderful

56
00:02:01,170 --> 00:02:05,890
who's familiar using an improv or even

57
00:02:03,930 --> 00:02:08,009
you know maybe like work at docker or

58
00:02:05,890 --> 00:02:11,140
some other container companies big yar

59
00:02:08,008 --> 00:02:13,109
okay cool about even split there and who

60
00:02:11,140 --> 00:02:15,549
here is just the post means on Twitter

61
00:02:13,110 --> 00:02:16,530
most of the audience exactly what I see

62
00:02:15,550 --> 00:02:18,880
thank you

63
00:02:16,530 --> 00:02:20,650
brilliant so diving into what a

64
00:02:18,880 --> 00:02:21,850
container is containers are just a

65
00:02:20,650 --> 00:02:23,200
logical extension of kind of where the

66
00:02:21,850 --> 00:02:24,250
industry has been headed in general for

67
00:02:23,200 --> 00:02:25,869
many years in terms of making

68
00:02:24,250 --> 00:02:27,940
applications easier to package into

69
00:02:25,870 --> 00:02:30,070
deploy so first you were running like a

70
00:02:27,940 --> 00:02:31,870
rack like somewhere on Prem this meant

71
00:02:30,070 --> 00:02:33,700
managing your own data center with your

72
00:02:31,870 --> 00:02:35,170
own servers the the OS is that you have

73
00:02:33,700 --> 00:02:37,630
for those servers patching all that

74
00:02:35,170 --> 00:02:38,799
stuff you basically have like two at

75
00:02:37,630 --> 00:02:40,030
least two full things to manage you're

76
00:02:38,800 --> 00:02:41,500
managing a data center like actual

77
00:02:40,030 --> 00:02:43,630
hardware and then you're also managing

78
00:02:41,500 --> 00:02:44,860
the apps that run on top of those this

79
00:02:43,630 --> 00:02:46,690
is particularly annoying for your ops

80
00:02:44,860 --> 00:02:48,400
team though good morning my name is

81
00:02:46,690 --> 00:02:54,820
Gustavo I'm here to introduce her nice I

82
00:02:48,400 --> 00:02:56,290
guess I am current speaker thank you so

83
00:02:54,820 --> 00:02:57,760
this was particularly annoying for your

84
00:02:56,290 --> 00:02:58,900
ops team so if a piece of hardware went

85
00:02:57,760 --> 00:03:00,280
down something like that your

86
00:02:58,900 --> 00:03:02,470
application was down and you had to then

87
00:03:00,280 --> 00:03:04,120
I have maintenance windows like between

88
00:03:02,470 --> 00:03:05,320
you know 2:00 and 6:00 a.m. on Sunday

89
00:03:04,120 --> 00:03:06,670
everything went down and that was

90
00:03:05,320 --> 00:03:08,160
totally normal and somebody was in the

91
00:03:06,670 --> 00:03:10,929
data center and they hated their jobs

92
00:03:08,160 --> 00:03:12,130
then a few tickets back virtual machines

93
00:03:10,930 --> 00:03:13,870
came along with scene they became

94
00:03:12,130 --> 00:03:16,000
increasingly popular as a way to manage

95
00:03:13,870 --> 00:03:16,930
your applications so with a VM you can

96
00:03:16,000 --> 00:03:18,340
move your workload

97
00:03:16,930 --> 00:03:20,709
virtually between several different

98
00:03:18,340 --> 00:03:22,959
servers including between servers on

99
00:03:20,709 --> 00:03:25,180
Prem but also from on Prem to the cloud

100
00:03:22,959 --> 00:03:28,000
and not just major app slightly easier

101
00:03:25,180 --> 00:03:30,130
to manage and now we have containers so

102
00:03:28,000 --> 00:03:31,600
a container it's just a way of packaging

103
00:03:30,130 --> 00:03:33,670
together your application with its

104
00:03:31,600 --> 00:03:35,530
libraries and dependencies this lets you

105
00:03:33,670 --> 00:03:37,690
abstract away the underlying hardware as

106
00:03:35,530 --> 00:03:38,920
well as the underlying OS so you don't

107
00:03:37,690 --> 00:03:40,450
even have to worry about what SROs

108
00:03:38,920 --> 00:03:42,160
you're running on on those machines and

109
00:03:40,450 --> 00:03:43,780
they can be different the goal with

110
00:03:42,160 --> 00:03:45,700
containers is to be able to write and

111
00:03:43,780 --> 00:03:48,220
build once and run anywhere where

112
00:03:45,700 --> 00:03:50,738
anywhere is your on-prem datacenter or

113
00:03:48,220 --> 00:03:55,239
private public cloud anything your IOT

114
00:03:50,739 --> 00:03:56,709
device wherever you want to and so let's

115
00:03:55,239 --> 00:03:58,120
quickly distinguish between a couple of

116
00:03:56,709 --> 00:04:00,010
different projects if you're not as

117
00:03:58,120 --> 00:04:01,209
familiar with the container space so on

118
00:04:00,010 --> 00:04:03,340
the left hand side here our container

119
00:04:01,209 --> 00:04:04,930
runtimes a container runtime is a

120
00:04:03,340 --> 00:04:07,000
standard for what you use to run your

121
00:04:04,930 --> 00:04:08,620
containers many of these are now based

122
00:04:07,000 --> 00:04:11,109
on the container runtime interface or

123
00:04:08,620 --> 00:04:12,190
CRI some common container runtimes you

124
00:04:11,109 --> 00:04:15,819
might have heard of include docker

125
00:04:12,190 --> 00:04:16,630
container D run C etc and a container

126
00:04:15,819 --> 00:04:18,430
runtime is where

127
00:04:16,630 --> 00:04:19,510
you can actually implement a lot of the

128
00:04:18,430 --> 00:04:21,430
controls that we'll be talking about

129
00:04:19,510 --> 00:04:24,010
today when it comes to restricting what

130
00:04:21,430 --> 00:04:26,140
a container can do so because those are

131
00:04:24,010 --> 00:04:28,599
implemented at run time which makes

132
00:04:26,140 --> 00:04:31,690
sense now if you only have a handful of

133
00:04:28,600 --> 00:04:33,280
containers then you need a runtime like

134
00:04:31,690 --> 00:04:34,750
container D but you don't really need a

135
00:04:33,280 --> 00:04:36,700
whole lot else like you're okay managing

136
00:04:34,750 --> 00:04:38,560
those you know semi manually if you're

137
00:04:36,700 --> 00:04:40,539
running a lot of containers and running

138
00:04:38,560 --> 00:04:41,890
applications at scale on them running

139
00:04:40,540 --> 00:04:43,720
anything in Prague then you're gonna

140
00:04:41,890 --> 00:04:45,190
want something also called a container

141
00:04:43,720 --> 00:04:47,170
orchestration system on the right hand

142
00:04:45,190 --> 00:04:48,640
side here like kubernetes OpenShift

143
00:04:47,170 --> 00:04:50,590
docker swarm something like that

144
00:04:48,640 --> 00:04:51,969
this lets you ensure that you have the

145
00:04:50,590 --> 00:04:53,590
right number of workloads running and

146
00:04:51,970 --> 00:04:55,720
that your load balancing between these

147
00:04:53,590 --> 00:04:56,799
properly can give you monitoring for

148
00:04:55,720 --> 00:04:58,030
your workloads you have put our idea of

149
00:04:56,800 --> 00:05:00,130
what's actually going on in your

150
00:04:58,030 --> 00:05:02,169
environment and then container

151
00:05:00,130 --> 00:05:03,520
orchestration systems use container

152
00:05:02,170 --> 00:05:05,290
runtimes to actually run those

153
00:05:03,520 --> 00:05:06,820
containers for example in a pod and

154
00:05:05,290 --> 00:05:08,410
cribben at ease

155
00:05:06,820 --> 00:05:10,270
sometimes container orchestration

156
00:05:08,410 --> 00:05:12,400
systems also give you controls to allow

157
00:05:10,270 --> 00:05:13,469
you to define additional controls or

158
00:05:12,400 --> 00:05:15,400
like to implement but those are still

159
00:05:13,470 --> 00:05:17,410
implemented at runtime for what we're

160
00:05:15,400 --> 00:05:18,700
talking about today will primarily be

161
00:05:17,410 --> 00:05:21,190
talking about how the povich flag is

162
00:05:18,700 --> 00:05:23,680
implemented in container D and controls

163
00:05:21,190 --> 00:05:24,790
in kubernetes so one important thing

164
00:05:23,680 --> 00:05:25,840
that into that as well you can kind of

165
00:05:24,790 --> 00:05:27,190
think it like goes down further the

166
00:05:25,840 --> 00:05:28,419
stack right run C then talks to lid

167
00:05:27,190 --> 00:05:29,980
container which is in the kernel itself

168
00:05:28,420 --> 00:05:32,200
and then the kernel kind of does the

169
00:05:29,980 --> 00:05:33,790
container stuff below but privileged by

170
00:05:32,200 --> 00:05:35,890
itself the flag does not exist in the

171
00:05:33,790 --> 00:05:37,270
OCI spec it is not a necessary part on

172
00:05:35,890 --> 00:05:38,800
containers it was a convenience flag

173
00:05:37,270 --> 00:05:40,810
that is originally from docker there's

174
00:05:38,800 --> 00:05:43,390
been an inherited down into container D

175
00:05:40,810 --> 00:05:45,250
for historical reasons but to run a

176
00:05:43,390 --> 00:05:46,860
container in compliance with a spec you

177
00:05:45,250 --> 00:05:50,470
don't need to have the privilege fight

178
00:05:46,860 --> 00:05:52,690
now back to the good security stuff so

179
00:05:50,470 --> 00:05:54,550
containers are really just based on C

180
00:05:52,690 --> 00:05:55,690
groups and namespaces these are -

181
00:05:54,550 --> 00:05:57,940
Linnaeus constructs that are used to

182
00:05:55,690 --> 00:05:59,380
isolate resources on the same host C

183
00:05:57,940 --> 00:06:00,820
groups are resource limits that prevent

184
00:05:59,380 --> 00:06:02,320
any single process on your hosts from

185
00:06:00,820 --> 00:06:04,150
consuming too many resources like memory

186
00:06:02,320 --> 00:06:06,460
and CPU this is about preventing

187
00:06:04,150 --> 00:06:07,929
unnecessary or unlimited use of a

188
00:06:06,460 --> 00:06:09,580
valuable resource on a particular host

189
00:06:07,930 --> 00:06:11,550
so you can restrict one project from

190
00:06:09,580 --> 00:06:13,630
using another projects resources

191
00:06:11,550 --> 00:06:15,310
namespaces are a way to segment

192
00:06:13,630 --> 00:06:17,590
processes so that they're isolated from

193
00:06:15,310 --> 00:06:20,380
each other for example for network

194
00:06:17,590 --> 00:06:22,869
resources or mounted file systems this

195
00:06:20,380 --> 00:06:24,610
isn't like security isolation isolation

196
00:06:22,870 --> 00:06:26,110
it's more I don't think of this as a

197
00:06:24,610 --> 00:06:27,550
strong security boundary it's more about

198
00:06:26,110 --> 00:06:27,910
restricting one project from accessing

199
00:06:27,550 --> 00:06:32,110
and

200
00:06:27,910 --> 00:06:33,910
projects information and so when we talk

201
00:06:32,110 --> 00:06:35,410
about containers and up and protecting

202
00:06:33,910 --> 00:06:37,990
applications of container we also need

203
00:06:35,410 --> 00:06:39,940
to talk about capabilities Linux

204
00:06:37,990 --> 00:06:42,400
capabilities are individual privileges

205
00:06:39,940 --> 00:06:43,600
that a process can use so these include

206
00:06:42,400 --> 00:06:45,609
anything and everything you might want

207
00:06:43,600 --> 00:06:47,380
your application to do such as writing

208
00:06:45,610 --> 00:06:49,560
or writing reading or writing audit logs

209
00:06:47,380 --> 00:06:51,909
bypassing for missing person checks or

210
00:06:49,560 --> 00:06:53,890
specifying configs for mandatory access

211
00:06:51,910 --> 00:06:56,020
controls or Mac an unprivileged

212
00:06:53,890 --> 00:06:57,460
container runs as well what's now

213
00:06:56,020 --> 00:06:58,840
considered kind of normal first you're

214
00:06:57,460 --> 00:07:01,030
gonna verify that it has the appropriate

215
00:06:58,840 --> 00:07:03,130
restrictions then those are met before

216
00:07:01,030 --> 00:07:04,150
allowing the process to run and then you

217
00:07:03,130 --> 00:07:05,050
can ensure that it only runs with a

218
00:07:04,150 --> 00:07:08,380
given capabilities

219
00:07:05,050 --> 00:07:10,600
however a privileged process bypasses

220
00:07:08,380 --> 00:07:12,790
all permission checks so it runs with a

221
00:07:10,600 --> 00:07:15,670
user ID or UID of 0 which is effectively

222
00:07:12,790 --> 00:07:16,960
a root or a super user and those

223
00:07:15,670 --> 00:07:19,540
privileged containers can perform

224
00:07:16,960 --> 00:07:20,650
actions with any capability and so if

225
00:07:19,540 --> 00:07:23,320
you think about this like why does that

226
00:07:20,650 --> 00:07:25,299
really make sense well this came out

227
00:07:23,320 --> 00:07:27,010
historically that capabilities came

228
00:07:25,300 --> 00:07:28,390
after the concept of a super user so

229
00:07:27,010 --> 00:07:29,890
before you ran everything as a super

230
00:07:28,390 --> 00:07:31,120
user I was route and it was like well

231
00:07:29,890 --> 00:07:32,530
that doesn't really make sense I want to

232
00:07:31,120 --> 00:07:33,970
restrict some of the capabilities this

233
00:07:32,530 --> 00:07:36,280
have this doesn't actually need that

234
00:07:33,970 --> 00:07:38,980
many capabilities so we started chunking

235
00:07:36,280 --> 00:07:40,450
up individual powerful actions and allow

236
00:07:38,980 --> 00:07:42,400
you to implement the principle of least

237
00:07:40,450 --> 00:07:44,020
privilege in your environment I know

238
00:07:42,400 --> 00:07:47,560
that you can also still restrict some

239
00:07:44,020 --> 00:07:48,669
root user permissions though and so now

240
00:07:47,560 --> 00:07:50,500
that you have a rough understanding of

241
00:07:48,669 --> 00:07:52,900
capabilities how do you actually grant

242
00:07:50,500 --> 00:07:54,700
and limit these there are a couple Linux

243
00:07:52,900 --> 00:07:56,650
security contracts here the first is a

244
00:07:54,700 --> 00:07:58,510
Parmer which is a linux security module

245
00:07:56,650 --> 00:08:00,159
or LSM that lets you restrict your

246
00:07:58,510 --> 00:08:02,380
programs actions things like file rates

247
00:08:00,160 --> 00:08:03,640
rights and executions it basically means

248
00:08:02,380 --> 00:08:05,290
that somebody can't run arbitrary

249
00:08:03,640 --> 00:08:07,990
commands in your environments that you

250
00:08:05,290 --> 00:08:10,090
might not want to run and SELinux or

251
00:08:07,990 --> 00:08:11,410
security enhance linux is also a linux

252
00:08:10,090 --> 00:08:12,849
security module that lets you restrict

253
00:08:11,410 --> 00:08:15,280
your programs actions specifically

254
00:08:12,850 --> 00:08:17,590
around mandatory access controls it's

255
00:08:15,280 --> 00:08:19,780
very similar to a Parmer but instead of

256
00:08:17,590 --> 00:08:22,030
identifying what file files by their

257
00:08:19,780 --> 00:08:25,359
path which is what a primer does SELinux

258
00:08:22,030 --> 00:08:26,739
uses I know numbers you don't need to

259
00:08:25,360 --> 00:08:28,060
use both in fact you can't use both

260
00:08:26,740 --> 00:08:29,290
because they they have the same kernel

261
00:08:28,060 --> 00:08:31,630
interfaces you can only use one of the

262
00:08:29,290 --> 00:08:33,250
two LSMs but just pick whichever one is

263
00:08:31,630 --> 00:08:34,750
best for your environment given like

264
00:08:33,250 --> 00:08:35,779
your understanding of inodes and file

265
00:08:34,750 --> 00:08:37,879
positives cetera

266
00:08:35,779 --> 00:08:39,769
and then the third item listed here set

267
00:08:37,879 --> 00:08:41,629
comp or secure computing mode basically

268
00:08:39,769 --> 00:08:43,279
filters the set of sis calls that your

269
00:08:41,629 --> 00:08:44,870
application can run it puts your

270
00:08:43,279 --> 00:08:47,420
application in a sort of like one-way

271
00:08:44,870 --> 00:08:48,709
secure state so that if your application

272
00:08:47,420 --> 00:08:51,199
tries to do a particular assist call

273
00:08:48,709 --> 00:08:52,819
that it's not allowed like exit then

274
00:08:51,199 --> 00:08:53,839
that process is automatically killed in

275
00:08:52,819 --> 00:08:55,878
your environment and can't execute

276
00:08:53,839 --> 00:08:57,589
there's a pretty good default out there

277
00:08:55,879 --> 00:08:59,629
the darker side comp default profile

278
00:08:57,589 --> 00:09:00,980
that limits about 50 uncommon or

279
00:08:59,629 --> 00:09:03,050
potentially unsafe sis calls in your

280
00:09:00,980 --> 00:09:04,339
environment and take a look at that if

281
00:09:03,050 --> 00:09:05,809
you're not familiar what to do here and

282
00:09:04,339 --> 00:09:10,129
use that to get started and iterate on

283
00:09:05,809 --> 00:09:12,620
that wonderful so again audience

284
00:09:10,129 --> 00:09:17,269
participation who recognizes these y'all

285
00:09:12,620 --> 00:09:18,470
now what Konami code alright that's the

286
00:09:17,269 --> 00:09:20,839
easy one what about the other ones

287
00:09:18,470 --> 00:09:25,579
doom yes excellent what about the third

288
00:09:20,839 --> 00:09:27,110
one you can you can okay no one else

289
00:09:25,579 --> 00:09:28,040
plays that I'm still finding yeah trying

290
00:09:27,110 --> 00:09:29,779
to find someone else who played Duke

291
00:09:28,040 --> 00:09:31,399
Nukem as a kid but yes those are the

292
00:09:29,779 --> 00:09:32,990
cheat codes each of those effectively I

293
00:09:31,399 --> 00:09:34,910
mean Konami Cohen did lots of things but

294
00:09:32,990 --> 00:09:36,439
they all turn on God mode right so you

295
00:09:34,910 --> 00:09:41,209
can think of privilege as effectively

296
00:09:36,439 --> 00:09:43,969
god mode for containers alternatively

297
00:09:41,209 --> 00:09:46,250
who knows Dan Walsh he did a lot of

298
00:09:43,970 --> 00:09:47,959
talking around Linux I was one of the

299
00:09:46,250 --> 00:09:49,819
tech lead on the project now also does a

300
00:09:47,959 --> 00:09:52,459
lot of talks on on container security

301
00:09:49,819 --> 00:09:54,410
but he's partially known for you know

302
00:09:52,459 --> 00:09:56,689
stop disabling selinux comm which is

303
00:09:54,410 --> 00:09:58,910
wonderful website that talks about using

304
00:09:56,689 --> 00:10:00,889
seven four zero versus seven force one

305
00:09:58,910 --> 00:10:02,689
right and privilege is effectively they

306
00:10:00,889 --> 00:10:04,850
set in four zero of the container world

307
00:10:02,689 --> 00:10:06,379
right security teams may go to great

308
00:10:04,850 --> 00:10:07,759
lengths to invest in security controls

309
00:10:06,379 --> 00:10:09,139
but as soon as you use dash dash

310
00:10:07,759 --> 00:10:13,339
privilege you've just thrown the baby

311
00:10:09,139 --> 00:10:14,509
out with the bathwater so you know

312
00:10:13,339 --> 00:10:15,800
taking those analogies to know back to

313
00:10:14,509 --> 00:10:17,449
what we're talking about before it

314
00:10:15,800 --> 00:10:21,170
privileged using that privilege flag

315
00:10:17,449 --> 00:10:22,490
basically undoes all the good security

316
00:10:21,170 --> 00:10:23,449
work that you've just done using all the

317
00:10:22,490 --> 00:10:25,309
features that we just talked about like

318
00:10:23,449 --> 00:10:27,620
a burner and see Linux and set copy

319
00:10:25,309 --> 00:10:29,839
cetera so it lets your processes run

320
00:10:27,620 --> 00:10:31,189
free with all of the capabilities so

321
00:10:29,839 --> 00:10:33,230
privileged containers don't run with

322
00:10:31,189 --> 00:10:34,849
rooms like a primer and as if it were a

323
00:10:33,230 --> 00:10:36,740
root user privileged containers give you

324
00:10:34,850 --> 00:10:38,300
access to everything for example all the

325
00:10:36,740 --> 00:10:40,569
file mounts in your system it's very

326
00:10:38,300 --> 00:10:40,569
dangerous

327
00:10:40,660 --> 00:10:45,829
is that allowing those privileged

328
00:10:43,339 --> 00:10:47,300
containers is just a single flag so it's

329
00:10:45,829 --> 00:10:48,920
so easy to forget this when

330
00:10:47,300 --> 00:10:50,959
copy-pasting a command or when you're

331
00:10:48,920 --> 00:10:52,219
typing it into your Prada environment

332
00:10:50,959 --> 00:10:54,949
instead of your test environment and

333
00:10:52,220 --> 00:10:57,860
that is extremely Theory so to scare you

334
00:10:54,950 --> 00:11:01,279
a little bit more look demos even more

335
00:10:57,860 --> 00:11:03,320
scary is if the demo gods decide to that

336
00:11:01,279 --> 00:11:06,620
I've made sufficient sacrifices and they

337
00:11:03,320 --> 00:11:10,070
want to work so let's try that and then

338
00:11:06,620 --> 00:11:12,079
I know someone in the front row just

339
00:11:10,070 --> 00:11:13,250
said what's he doing is changing HDMI

340
00:11:12,079 --> 00:11:19,160
cables in the middle of a presentation

341
00:11:13,250 --> 00:11:21,920
oh no did that just flash up for us we

342
00:11:19,160 --> 00:11:23,180
got one we got I can see it magic hey

343
00:11:21,920 --> 00:11:25,610
there we are

344
00:11:23,180 --> 00:11:26,719
wonderful okay that's the end of the

345
00:11:25,610 --> 00:11:29,570
presentation thank you for coming

346
00:11:26,720 --> 00:11:30,980
know a little bit of a code walk here so

347
00:11:29,570 --> 00:11:32,959
this is the source code from container D

348
00:11:30,980 --> 00:11:33,980
recently and this is how the with

349
00:11:32,959 --> 00:11:36,890
privilege flag is particularly

350
00:11:33,980 --> 00:11:38,990
implemented so with each of these will

351
00:11:36,890 --> 00:11:39,949
basically prettify it and then talk

352
00:11:38,990 --> 00:11:41,959
through each of those

353
00:11:39,950 --> 00:11:43,490
so with all capabilities adds all the

354
00:11:41,959 --> 00:11:45,380
next capabilities as my I was talking

355
00:11:43,490 --> 00:11:47,240
about before so this is commonly used

356
00:11:45,380 --> 00:11:49,430
when you try it someone tries to do a

357
00:11:47,240 --> 00:11:52,520
thing and then it doesn't work right

358
00:11:49,430 --> 00:11:55,310
like I tried to you know expose a port

359
00:11:52,520 --> 00:11:57,350
below 1024 contained it failed oh I I

360
00:11:55,310 --> 00:11:59,479
tried to you know send some real packets

361
00:11:57,350 --> 00:12:01,040
container fail right the intent of this

362
00:11:59,480 --> 00:12:02,740
section here is as the audience here you

363
00:12:01,040 --> 00:12:04,760
already probably care about security

364
00:12:02,740 --> 00:12:06,170
here are some alternatives that you can

365
00:12:04,760 --> 00:12:08,480
propose instead when you go back to your

366
00:12:06,170 --> 00:12:09,979
business right so cap net bind service

367
00:12:08,480 --> 00:12:11,990
is a capability that you can add instead

368
00:12:09,980 --> 00:12:14,810
of cap sysadmin the super privilege god

369
00:12:11,990 --> 00:12:16,430
mode privilege captain ed Roark yeah it

370
00:12:14,810 --> 00:12:18,140
does like a bunch of things but hey if

371
00:12:16,430 --> 00:12:19,910
that's not working for you try kapner

372
00:12:18,140 --> 00:12:22,069
admin that's still less than caps

373
00:12:19,910 --> 00:12:24,140
sysadmin which allows for full container

374
00:12:22,070 --> 00:12:25,600
breakouts there's a few other there as

375
00:12:24,140 --> 00:12:27,589
well capture and cap sis cap nice

376
00:12:25,600 --> 00:12:29,240
typically if your container needs to do

377
00:12:27,589 --> 00:12:31,610
something a little bit weird on the host

378
00:12:29,240 --> 00:12:33,560
don't jump straight to cap pretty caps

379
00:12:31,610 --> 00:12:35,570
this admin with - privilege try one of

380
00:12:33,560 --> 00:12:38,359
these instead yeah take a screenshot of

381
00:12:35,570 --> 00:12:40,160
this super stretched out yeah thing to

382
00:12:38,360 --> 00:12:43,760
tell you tell your developers what - -

383
00:12:40,160 --> 00:12:47,449
instead that is intimidatingly lodge

384
00:12:43,760 --> 00:12:51,110
cool so now for the demo time so let's

385
00:12:47,449 --> 00:12:54,880
try sweet so can you all see that is

386
00:12:51,110 --> 00:12:58,029
that big enough no it actually isn't so

387
00:12:54,880 --> 00:13:01,250
there we go

388
00:12:58,029 --> 00:13:02,930
this is so satisfying I highly revered

389
00:13:01,250 --> 00:13:03,740
one submits a feed next year this is

390
00:13:02,930 --> 00:13:05,270
good

391
00:13:03,740 --> 00:13:06,830
cool so here we have that's a be

392
00:13:05,270 --> 00:13:09,620
ridiculous so we're running a normal

393
00:13:06,830 --> 00:13:13,730
container and here we're gonna do some

394
00:13:09,620 --> 00:13:15,470
crazy container breakout magic and then

395
00:13:13,730 --> 00:13:17,270
so we're trying to mount Oh can't find

396
00:13:15,470 --> 00:13:18,589
mount can't see that far so we try and

397
00:13:17,270 --> 00:13:20,750
mount it permission tonight a new route

398
00:13:18,589 --> 00:13:23,390
well I am worried right so I do was

399
00:13:20,750 --> 00:13:24,710
denied the capability of mounting

400
00:13:23,390 --> 00:13:26,660
fosters and this is just one that we're

401
00:13:24,710 --> 00:13:28,460
really highlighting here so let's try

402
00:13:26,660 --> 00:13:30,860
that again and then we'll do that with

403
00:13:28,460 --> 00:13:32,240
privilege and see what happens so now we

404
00:13:30,860 --> 00:13:34,850
can actually see the you know the files

405
00:13:32,240 --> 00:13:35,210
so that's a device on the house what's

406
00:13:34,850 --> 00:13:38,839
that

407
00:13:35,210 --> 00:13:42,020
oh you can't take no sorry uh let me see

408
00:13:38,839 --> 00:13:47,029
if I can do that is that better

409
00:13:42,020 --> 00:13:48,500
probably not that was fine yeah but then

410
00:13:47,029 --> 00:13:50,540
you can see my personal financial

411
00:13:48,500 --> 00:13:51,950
documents below I don't know if anyone

412
00:13:50,540 --> 00:13:54,680
else caught that so maybe that's not so

413
00:13:51,950 --> 00:13:58,600
good let me open a new window and do

414
00:13:54,680 --> 00:13:58,599
that and then hey

415
00:13:59,000 --> 00:14:03,290
so yeah trying to mount a particular

416
00:14:01,070 --> 00:14:05,240
device here now I can actually see that

417
00:14:03,290 --> 00:14:07,430
particular thing and that what I've

418
00:14:05,240 --> 00:14:10,550
mounted there is the host file system

419
00:14:07,430 --> 00:14:12,469
and so if I list out root you can see

420
00:14:10,550 --> 00:14:13,729
the super sensitive passwords and the

421
00:14:12,470 --> 00:14:14,870
dad jokes that exists on the host file

422
00:14:13,730 --> 00:14:15,380
system that I don't want anyone to

423
00:14:14,870 --> 00:14:16,850
access

424
00:14:15,380 --> 00:14:19,130
so there's your massive container

425
00:14:16,850 --> 00:14:20,330
breakout but it's not really fair to

426
00:14:19,130 --> 00:14:21,800
call it a container breakout because

427
00:14:20,330 --> 00:14:24,230
everything preventing you from breaking

428
00:14:21,800 --> 00:14:25,939
out a container has been disabled this

429
00:14:24,230 --> 00:14:27,770
is just to highlight how easy it is

430
00:14:25,940 --> 00:14:29,390
right we mounted a file system now

431
00:14:27,770 --> 00:14:31,189
you're one of the things that still

432
00:14:29,390 --> 00:14:32,689
exists with with containers even in

433
00:14:31,190 --> 00:14:34,820
privileged mode is root filesystem

434
00:14:32,690 --> 00:14:36,020
isolation trivial to bypass and isolate

435
00:14:34,820 --> 00:14:37,940
you can do the same thing with

436
00:14:36,020 --> 00:14:39,230
namespaces associated with processes and

437
00:14:37,940 --> 00:14:41,330
all the other stuff as well but this is

438
00:14:39,230 --> 00:14:43,580
the lead hax that we want to demonstrate

439
00:14:41,330 --> 00:14:47,839
of just how easy it was now the file

440
00:14:43,580 --> 00:14:50,000
system cool so next up we have with

441
00:14:47,839 --> 00:14:51,940
masked paths so there are certain paths

442
00:14:50,000 --> 00:14:55,630
in Linux that are particularly sensitive

443
00:14:51,940 --> 00:14:57,860
mainly under the proc file system so

444
00:14:55,630 --> 00:14:58,850
basically under linux everything is a

445
00:14:57,860 --> 00:15:02,600
file

446
00:14:58,850 --> 00:15:04,400
and that's part of the philosophy that

447
00:15:02,600 --> 00:15:05,420
goes behind it but they tend to put some

448
00:15:04,400 --> 00:15:06,949
sensitive information about system

449
00:15:05,420 --> 00:15:08,209
processes are including hardware

450
00:15:06,950 --> 00:15:10,820
configuration information under a

451
00:15:08,209 --> 00:15:12,050
virtual file system called proc so just

452
00:15:10,820 --> 00:15:14,750
to pick on one of these for example

453
00:15:12,050 --> 00:15:17,420
proc que corre allows for dumping of

454
00:15:14,750 --> 00:15:19,280
memory on the host and so that dump

455
00:15:17,420 --> 00:15:22,160
could then be passed into gdb or

456
00:15:19,280 --> 00:15:23,930
volatility or other memory analysis

457
00:15:22,160 --> 00:15:25,370
frameworks that you can then use to

458
00:15:23,930 --> 00:15:27,620
possibly extract some values out of

459
00:15:25,370 --> 00:15:29,630
memory so we won't do the gdb side of

460
00:15:27,620 --> 00:15:33,800
stuff so we'll just demonstrate how we

461
00:15:29,630 --> 00:15:36,650
can do this next one and cool so normal

462
00:15:33,800 --> 00:15:38,449
container try and hit proc and we can

463
00:15:36,650 --> 00:15:40,610
see here the fire other the size of it

464
00:15:38,450 --> 00:15:42,560
is is one right nothing special not

465
00:15:40,610 --> 00:15:45,170
particularly huge same thing again with

466
00:15:42,560 --> 00:15:48,319
the privileged container now how big is

467
00:15:45,170 --> 00:15:50,000
it 128 terabytes so from within the

468
00:15:48,320 --> 00:15:52,190
container you can actually access the

469
00:15:50,000 --> 00:15:53,780
memory of the host so then yeah you

470
00:15:52,190 --> 00:15:55,760
could dump that out and start doing

471
00:15:53,780 --> 00:15:59,630
shenanigans cool

472
00:15:55,760 --> 00:16:01,550
so not great read-only paths so there

473
00:15:59,630 --> 00:16:06,200
are some particularly sensitive parts

474
00:16:01,550 --> 00:16:08,120
under the proc file path that a similar

475
00:16:06,200 --> 00:16:09,829
to mask paths but some of these allow

476
00:16:08,120 --> 00:16:11,959
for greater system configuration if

477
00:16:09,829 --> 00:16:14,660
they're written too so hence by default

478
00:16:11,959 --> 00:16:16,729
they're read-only if you add privilege

479
00:16:14,660 --> 00:16:18,860
however this disables this so probably

480
00:16:16,730 --> 00:16:20,150
the most interesting here is proxies the

481
00:16:18,860 --> 00:16:22,040
proc system directory is slightly

482
00:16:20,150 --> 00:16:23,240
different from others under proc where

483
00:16:22,040 --> 00:16:25,130
it not only provides information about

484
00:16:23,240 --> 00:16:26,600
system but allows the administrator to

485
00:16:25,130 --> 00:16:28,700
immediately enable and disable kernel

486
00:16:26,600 --> 00:16:30,620
features so in this demo will

487
00:16:28,700 --> 00:16:32,540
specifically demo proxies kernel

488
00:16:30,620 --> 00:16:35,030
randomized VA space which is the

489
00:16:32,540 --> 00:16:36,439
configuration field for SLR everyone's

490
00:16:35,030 --> 00:16:38,030
favorite address space layout

491
00:16:36,440 --> 00:16:40,579
randomization is an important memory

492
00:16:38,030 --> 00:16:42,560
protection feature which makes straight

493
00:16:40,579 --> 00:16:44,510
memory corruption bug 90s style smashing

494
00:16:42,560 --> 00:16:46,489
the stack impossible because it

495
00:16:44,510 --> 00:16:48,980
randomizes the memory layout

496
00:16:46,490 --> 00:16:50,839
still possible to to have memory

497
00:16:48,980 --> 00:16:54,230
corruption issues but significantly

498
00:16:50,839 --> 00:16:55,790
harder and effectively the threat model

499
00:16:54,230 --> 00:16:56,870
in this case is you're running an

500
00:16:55,790 --> 00:16:59,329
application that has a known

501
00:16:56,870 --> 00:17:00,070
vulnerability in a container but it's a

502
00:16:59,329 --> 00:17:02,199
yeah

503
00:17:00,070 --> 00:17:06,190
it has a buffer overflow this makes it

504
00:17:02,200 --> 00:17:10,920
harder to to get a show out of that

505
00:17:06,190 --> 00:17:12,220
particular bowl so I stand with that

506
00:17:10,920 --> 00:17:15,250
cool

507
00:17:12,220 --> 00:17:16,930
so here running normal container cutting

508
00:17:15,250 --> 00:17:18,760
zero in there and it says read-only file

509
00:17:16,930 --> 00:17:21,579
system denied okay let's try that again

510
00:17:18,760 --> 00:17:23,470
and we can see here actually here cat

511
00:17:21,579 --> 00:17:26,770
proxies can randomize says to which is

512
00:17:23,470 --> 00:17:29,760
enabled so let's try that in privilege

513
00:17:26,770 --> 00:17:32,710
mode so here cutting success no issues

514
00:17:29,760 --> 00:17:34,180
we zero but then also let's exit out and

515
00:17:32,710 --> 00:17:36,370
then we'll hit on the host as well and

516
00:17:34,180 --> 00:17:37,840
so here we can see cat proxies kernel

517
00:17:36,370 --> 00:17:39,429
around of mais VI space on the host is

518
00:17:37,840 --> 00:17:41,409
now disabled for the entire system so

519
00:17:39,430 --> 00:17:47,200
all a SLR is disabled because of one

520
00:17:41,410 --> 00:17:49,090
privilege containment next up writable

521
00:17:47,200 --> 00:17:50,830
sisyphus what happens if you thought of

522
00:17:49,090 --> 00:17:52,449
it what happens if you knew hey I know

523
00:17:50,830 --> 00:17:54,220
that there are some sensitive mount I'm

524
00:17:52,450 --> 00:17:56,920
gonna write only mount them as

525
00:17:54,220 --> 00:17:58,450
read/write well conveniently privileged

526
00:17:56,920 --> 00:18:00,490
flag has thought of that and will

527
00:17:58,450 --> 00:18:01,960
iterate through every single mount and

528
00:18:00,490 --> 00:18:04,110
then take all the read-only ones and

529
00:18:01,960 --> 00:18:07,300
make them read right great thanks

530
00:18:04,110 --> 00:18:09,520
alright next up we've got controlling C

531
00:18:07,300 --> 00:18:11,139
groups so we mentioned C groups with C

532
00:18:09,520 --> 00:18:13,570
groups the particular thing here is is

533
00:18:11,140 --> 00:18:16,120
our resource utilization and so the risk

534
00:18:13,570 --> 00:18:18,760
use effectively dose as we mentioned but

535
00:18:16,120 --> 00:18:19,169
let's let's make a single and see how

536
00:18:18,760 --> 00:18:22,480
that works

537
00:18:19,170 --> 00:18:25,300
cool so no we've already done that one

538
00:18:22,480 --> 00:18:27,400
maybe four cool so here we've got a

539
00:18:25,300 --> 00:18:29,470
little test script so this is just says

540
00:18:27,400 --> 00:18:33,180
hello besides SF and so we'll run that

541
00:18:29,470 --> 00:18:36,580
and says hello besides hello besides

542
00:18:33,180 --> 00:18:38,260
thank you and then here we'll we'll make

543
00:18:36,580 --> 00:18:39,909
a particular C group so if you make a

544
00:18:38,260 --> 00:18:41,020
directory that's from the kernels

545
00:18:39,910 --> 00:18:42,730
perspective there are binaries that you

546
00:18:41,020 --> 00:18:43,720
can use to interface with this but with

547
00:18:42,730 --> 00:18:46,120
the kernel if you just make your

548
00:18:43,720 --> 00:18:47,290
directory under this FS save your memory

549
00:18:46,120 --> 00:18:49,540
and then the name that you want to call

550
00:18:47,290 --> 00:18:51,639
it so we'll call this one big hello

551
00:18:49,540 --> 00:18:53,470
besides SF still running and then if we

552
00:18:51,640 --> 00:18:55,390
go in just LS what was in that directory

553
00:18:53,470 --> 00:18:57,580
there we can see out oh there's a whole

554
00:18:55,390 --> 00:18:58,720
bunch of stuff yeah it's created this we

555
00:18:57,580 --> 00:18:59,710
didn't make any of these files but

556
00:18:58,720 --> 00:19:00,760
there's some interesting things here

557
00:18:59,710 --> 00:19:02,800
that we can play around with

558
00:19:00,760 --> 00:19:06,730
so you group rocks and usage and bytes

559
00:19:02,800 --> 00:19:08,800
and so on and so will you know see what

560
00:19:06,730 --> 00:19:11,020
the memory limit currently is and that

561
00:19:08,800 --> 00:19:12,950
memory limit is over 9,000 terabytes per

562
00:19:11,020 --> 00:19:16,060
thousand yes over 9,000

563
00:19:12,950 --> 00:19:16,060
not scripted at all

564
00:19:17,900 --> 00:19:23,390
and hello besides and so at the moment

565
00:19:21,620 --> 00:19:25,909
there's nothing in that secrecy group we

566
00:19:23,390 --> 00:19:27,320
just made it so if we look at the the C

567
00:19:25,910 --> 00:19:30,230
group of the particular process it's

568
00:19:27,320 --> 00:19:32,120
under this user slice the default but

569
00:19:30,230 --> 00:19:33,880
let's go and chuck it in that secret so

570
00:19:32,120 --> 00:19:39,290
there's a crow that process ID into

571
00:19:33,880 --> 00:19:41,660
secret memory secret props and then if

572
00:19:39,290 --> 00:19:44,899
we cut out for example we want to have a

573
00:19:41,660 --> 00:19:47,180
look at say yeah yeah it's in there

574
00:19:44,900 --> 00:19:48,470
great and then also if we have a look at

575
00:19:47,180 --> 00:19:52,250
the same again we can see now it's under

576
00:19:48,470 --> 00:19:55,310
this big matrix wonderful big new secret

577
00:19:52,250 --> 00:19:56,930
rather sweet so memory usage in bytes we

578
00:19:55,310 --> 00:19:58,399
can see it's now using you know four

579
00:19:56,930 --> 00:20:01,070
hundred and nine thousand bytes for that

580
00:19:58,400 --> 00:20:02,210
one particular process cool so let's go

581
00:20:01,070 --> 00:20:05,060
and make it neither one will make it

582
00:20:02,210 --> 00:20:07,280
small and then we'll echo a limit of

583
00:20:05,060 --> 00:20:09,169
five thousand now for very astute

584
00:20:07,280 --> 00:20:12,139
observers in the audience you'll notice

585
00:20:09,170 --> 00:20:14,360
that five thousand is indeed less than

586
00:20:12,140 --> 00:20:18,590
four hundred and nine thousand very

587
00:20:14,360 --> 00:20:20,750
important cool so living in bytes we'll

588
00:20:18,590 --> 00:20:24,500
set that up so we've got a small C group

589
00:20:20,750 --> 00:20:26,210
we'll modify our look that's funky there

590
00:20:24,500 --> 00:20:28,430
we go we're basically just edit it for

591
00:20:26,210 --> 00:20:29,720
that those who missed that basically we

592
00:20:28,430 --> 00:20:32,750
just edit it from hello B sites and

593
00:20:29,720 --> 00:20:35,380
besides sucks which obviously we don't

594
00:20:32,750 --> 00:20:38,540
like that will trigger that one again

595
00:20:35,380 --> 00:20:45,110
and then will echo that process ID into

596
00:20:38,540 --> 00:20:48,020
the small C group and it doesn't run and

597
00:20:45,110 --> 00:20:49,699
we can see here it's killed right so the

598
00:20:48,020 --> 00:20:51,200
small C group was memory constrained

599
00:20:49,700 --> 00:20:53,900
basically so that's how C groups work we

600
00:20:51,200 --> 00:20:55,220
just made one manually and so yeah the

601
00:20:53,900 --> 00:20:59,660
small one that used way too much memory

602
00:20:55,220 --> 00:21:01,280
with skill excellent so some of the

603
00:20:59,660 --> 00:21:02,510
other ones here so actually Linux and a

604
00:21:01,280 --> 00:21:03,590
pieman profile will kind of deal with

605
00:21:02,510 --> 00:21:05,390
these both together because they're

606
00:21:03,590 --> 00:21:07,250
they're both mandatory access control

607
00:21:05,390 --> 00:21:09,530
systems effectively this is a great

608
00:21:07,250 --> 00:21:11,480
security system selinux seven-four-zero

609
00:21:09,530 --> 00:21:12,920
we're talking about before if enabled on

610
00:21:11,480 --> 00:21:15,110
the host you have the capability to

611
00:21:12,920 --> 00:21:20,420
disable it or effectively from within a

612
00:21:15,110 --> 00:21:23,409
container so the demo for that is their

613
00:21:20,420 --> 00:21:23,410
nature from this

614
00:21:24,900 --> 00:21:29,740
that last one we get cool so we're in a

615
00:21:28,330 --> 00:21:30,939
container here we'll make a new file and

616
00:21:29,740 --> 00:21:32,530
the thing we want to highlight here

617
00:21:30,940 --> 00:21:33,580
don't necessarily need to know how to

618
00:21:32,530 --> 00:21:35,200
seal any two works but there's this

619
00:21:33,580 --> 00:21:37,780
container valid label that's already

620
00:21:35,200 --> 00:21:39,250
applied to the file so it's created in

621
00:21:37,780 --> 00:21:40,629
this particular container if I try and

622
00:21:39,250 --> 00:21:43,240
change that label to something like

623
00:21:40,630 --> 00:21:46,630
super secret or super secret if I could

624
00:21:43,240 --> 00:21:48,010
type check yeah I failed to change the

625
00:21:46,630 --> 00:21:50,710
context of new file to a particular

626
00:21:48,010 --> 00:21:52,000
thing right can't do it okay so let's go

627
00:21:50,710 --> 00:21:55,720
and now around the privileged contain

628
00:21:52,000 --> 00:21:57,400
them and do the same thing and cool so

629
00:21:55,720 --> 00:21:58,780
basically from our first step will

630
00:21:57,400 --> 00:21:59,290
delete hacks to break out of the

631
00:21:58,780 --> 00:22:00,129
container

632
00:21:59,290 --> 00:22:01,299
we're going to mount the host file

633
00:22:00,130 --> 00:22:03,880
system again because we want to access

634
00:22:01,299 --> 00:22:06,129
files on the host so we'll go and do

635
00:22:03,880 --> 00:22:08,020
that root and then we can see here the

636
00:22:06,130 --> 00:22:10,120
labels oh this dad jokes text

637
00:22:08,020 --> 00:22:11,889
super-secret label and this effectively

638
00:22:10,120 --> 00:22:13,449
in this hypothetical circumstance say

639
00:22:11,890 --> 00:22:15,460
that denies read access to that file

640
00:22:13,450 --> 00:22:18,100
right i me is my process I don't have

641
00:22:15,460 --> 00:22:20,169
the ability to look at it so let's go

642
00:22:18,100 --> 00:22:22,270
and change that to unconfined which lets

643
00:22:20,169 --> 00:22:23,500
anyone read anything wonderful great and

644
00:22:22,270 --> 00:22:25,030
then I can see the label on that has

645
00:22:23,500 --> 00:22:27,340
successfully changed so I can modify

646
00:22:25,030 --> 00:22:29,049
selinux on the label on the host for my

647
00:22:27,340 --> 00:22:30,399
container and now I can read out the dad

648
00:22:29,049 --> 00:22:35,260
joke which is ultimately what you're all

649
00:22:30,400 --> 00:22:37,450
here for I'm sure no reactions

650
00:22:35,260 --> 00:22:39,520
whatsoever not even a groan okay okay

651
00:22:37,450 --> 00:22:40,900
wonderful and then finally a second one

652
00:22:39,520 --> 00:22:43,629
can find I know particularly demo for

653
00:22:40,900 --> 00:22:45,520
this but this is a in Dhaka by default

654
00:22:43,630 --> 00:22:47,320
about I think roughly fifty say Scrolls

655
00:22:45,520 --> 00:22:49,000
a block there's actually a white listing

656
00:22:47,320 --> 00:22:50,470
approach with hey and so this this

657
00:22:49,000 --> 00:22:51,070
removes them to see for the full list go

658
00:22:50,470 --> 00:22:55,090
on sat-comm

659
00:22:51,070 --> 00:22:58,270
so this is a security feature that is

660
00:22:55,090 --> 00:23:00,520
also disabled great so we know it's

661
00:22:58,270 --> 00:23:02,049
getting our problems containers and how

662
00:23:00,520 --> 00:23:03,790
do we actually prevent that from running

663
00:23:02,049 --> 00:23:05,320
so keep in mind again that we're not

664
00:23:03,790 --> 00:23:06,940
talking about like strict security

665
00:23:05,320 --> 00:23:08,080
isolation like something you'd use to do

666
00:23:06,940 --> 00:23:10,870
malware analysis but you still need

667
00:23:08,080 --> 00:23:12,580
multiple layers of isolation for for

668
00:23:10,870 --> 00:23:13,809
your containers you're gonna wanna have

669
00:23:12,580 --> 00:23:15,490
two sets of controls so that if one

670
00:23:13,809 --> 00:23:18,160
layer fails you're still protected right

671
00:23:15,490 --> 00:23:19,570
defense-in-depth and so one of the

672
00:23:18,160 --> 00:23:22,450
things you can use in kinetic renée's

673
00:23:19,570 --> 00:23:24,340
has several nested layers of isolation

674
00:23:22,450 --> 00:23:26,470
there's a blog post on that and i'm just

675
00:23:24,340 --> 00:23:28,299
gonna skip through you can also use in

676
00:23:26,470 --> 00:23:30,429
community security context and pod

677
00:23:28,299 --> 00:23:32,500
security policy or alternatively a pod

678
00:23:30,429 --> 00:23:33,730
security policy open policy agent and

679
00:23:32,500 --> 00:23:35,230
gatekeeper those are admission

680
00:23:33,730 --> 00:23:36,029
controllers that you can use to enforce

681
00:23:35,230 --> 00:23:38,789
what gets deployed

682
00:23:36,029 --> 00:23:40,289
it does it Finkel KRL we're talking on a

683
00:23:38,789 --> 00:23:42,840
tomorrow to live in a and come check it

684
00:23:40,289 --> 00:23:44,879
out and then lastly isolation in

685
00:23:42,840 --> 00:23:46,228
kubernetes using things like cotton

686
00:23:44,879 --> 00:23:47,849
containers chivas are another container

687
00:23:46,229 --> 00:23:49,559
x' to actually prevent what's running in

688
00:23:47,849 --> 00:23:54,509
your environment and I'm skipping this

689
00:23:49,559 --> 00:23:55,619
and summary so here's a summary slide a

690
00:23:54,509 --> 00:23:58,320
bit of a lightning round off in the

691
00:23:55,619 --> 00:23:59,820
technical details but yeah the idea is

692
00:23:58,320 --> 00:24:00,869
that privilege flag lets your processes

693
00:23:59,820 --> 00:24:02,009
run free you're gonna want to restrict

694
00:24:00,869 --> 00:24:02,968
that there are lots of different

695
00:24:02,009 --> 00:24:05,159
punctures in your environment that

696
00:24:02,969 --> 00:24:06,989
Frenchy went over and then you can use

697
00:24:05,159 --> 00:24:08,249
various things in urban I use to

698
00:24:06,989 --> 00:24:12,210
actually provide those two layers of

699
00:24:08,249 --> 00:24:14,460
isolation check out some links yep and

700
00:24:12,210 --> 00:24:14,909
then besides we'll talk the slides up

701
00:24:14,460 --> 00:24:17,219
later

702
00:24:14,909 --> 00:24:18,779
let's leave the links yeah so you can

703
00:24:17,219 --> 00:24:20,399
take photos but we've got some questions

704
00:24:18,779 --> 00:24:20,789
on slide I please hit us up or come say

705
00:24:20,399 --> 00:24:23,129
hi

706
00:24:20,789 --> 00:24:26,400
and if Frenchie or my here somewhere

707
00:24:23,129 --> 00:24:30,259
down here sweet thank you

708
00:24:26,400 --> 00:24:30,259
[Applause]

