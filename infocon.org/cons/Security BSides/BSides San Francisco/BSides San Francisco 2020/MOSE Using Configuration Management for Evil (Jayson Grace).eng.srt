1
00:00:00,030 --> 00:00:03,929
thank you all so much for coming out I

2
00:00:01,740 --> 00:00:05,520
can't really see any of you there's just

3
00:00:03,929 --> 00:00:07,740
a big light but I assume you're there

4
00:00:05,520 --> 00:00:09,059
and you're awesome so thanks for coming

5
00:00:07,740 --> 00:00:11,340
out and hanging out with me for the next

6
00:00:09,059 --> 00:00:13,559
25 minutes we are going to be talking

7
00:00:11,340 --> 00:00:15,780
about Mo's which is a tool to help you

8
00:00:13,559 --> 00:00:19,529
use configuration management servers for

9
00:00:15,780 --> 00:00:21,419
post exploitation this is the mandatory

10
00:00:19,529 --> 00:00:23,310
legal slide that my employers have me

11
00:00:21,420 --> 00:00:25,199
put on here essentially any opinions

12
00:00:23,310 --> 00:00:29,279
that I express up here are mine and not

13
00:00:25,199 --> 00:00:30,599
those of my employer so I've been

14
00:00:29,279 --> 00:00:34,710
playing death-metal for several years

15
00:00:30,599 --> 00:00:37,350
now I used to tour but now I just play

16
00:00:34,710 --> 00:00:39,899
local shows every so often previously

17
00:00:37,350 --> 00:00:42,629
I've worked as a sysadmin pen tester and

18
00:00:39,899 --> 00:00:44,579
an SRE and before I started my current

19
00:00:42,629 --> 00:00:47,099
role I built and ran the corporate red

20
00:00:44,579 --> 00:00:49,140
team at Sandia National Labs and

21
00:00:47,100 --> 00:00:50,730
currently I'm a penetration tester on

22
00:00:49,140 --> 00:00:52,770
the product security team at Splunk

23
00:00:50,730 --> 00:00:54,930
which has me finding issues in the

24
00:00:52,770 --> 00:00:56,969
various products that we make teaching

25
00:00:54,930 --> 00:00:59,309
secure coding practices to developers

26
00:00:56,969 --> 00:01:02,280
and automating vulnerability regression

27
00:00:59,309 --> 00:01:04,140
testing and I really enjoy automating

28
00:01:02,280 --> 00:01:06,299
things it's one of the pure joys that I

29
00:01:04,140 --> 00:01:08,189
have in this world but I have a special

30
00:01:06,299 --> 00:01:12,780
place in my heart for automating post

31
00:01:08,189 --> 00:01:14,548
exploitation tasks all right so on the

32
00:01:12,780 --> 00:01:16,229
agenda for today we're going to start by

33
00:01:14,549 --> 00:01:18,060
briefly discussing what configuration

34
00:01:16,229 --> 00:01:19,650
management tools are following that

35
00:01:18,060 --> 00:01:20,490
we'll get into how attackers can take

36
00:01:19,650 --> 00:01:23,820
advantage of them

37
00:01:20,490 --> 00:01:25,439
we will then discuss what Mo's is and

38
00:01:23,820 --> 00:01:29,539
what we were hoping to accomplish with

39
00:01:25,439 --> 00:01:32,279
its creation and there will be a demo

40
00:01:29,540 --> 00:01:35,189
also some awesome dude game this like

41
00:01:32,280 --> 00:01:36,270
Def Con New Mexico sticker I don't know

42
00:01:35,189 --> 00:01:39,779
who you are but this is awesome thank

43
00:01:36,270 --> 00:01:41,579
you alright so configuration management

44
00:01:39,780 --> 00:01:43,380
tools they're used for provisioning

45
00:01:41,579 --> 00:01:45,839
systems so if you have a system that

46
00:01:43,380 --> 00:01:47,280
needs to be part of a cluster or it

47
00:01:45,840 --> 00:01:50,250
needs to run certain software or

48
00:01:47,280 --> 00:01:52,560
services you would provision it to do so

49
00:01:50,250 --> 00:01:54,450
with configuration management tools they

50
00:01:52,560 --> 00:01:56,850
can also be used to manage the state of

51
00:01:54,450 --> 00:01:58,229
systems in your environment so for

52
00:01:56,850 --> 00:02:00,119
example if you want to make sure that

53
00:01:58,229 --> 00:02:01,380
the service is always running or you

54
00:02:00,119 --> 00:02:03,210
want to make sure that machines are

55
00:02:01,380 --> 00:02:05,399
automatically updated on a regular basis

56
00:02:03,210 --> 00:02:09,199
these are some good use cases for

57
00:02:05,399 --> 00:02:11,610
configuration management tools these are

58
00:02:09,199 --> 00:02:13,649
some of the more popular options on the

59
00:02:11,610 --> 00:02:22,470
market today we've got pop

60
00:02:13,650 --> 00:02:24,450
it chef salt and ansible and a ton of

61
00:02:22,470 --> 00:02:25,709
companies use a variety of the different

62
00:02:24,450 --> 00:02:27,899
CM tools that i showed on the previous

63
00:02:25,709 --> 00:02:32,340
slide so if you haven't run into them

64
00:02:27,900 --> 00:02:33,720
yet trust me you will alright let's talk

65
00:02:32,340 --> 00:02:35,790
about what these tools have in common

66
00:02:33,720 --> 00:02:38,099
so they all have this concept of idem

67
00:02:35,790 --> 00:02:40,019
potency meaning that you can run the

68
00:02:38,099 --> 00:02:42,480
code as many times as you want and

69
00:02:40,019 --> 00:02:44,430
expect to produce the same result you

70
00:02:42,480 --> 00:02:46,319
can also scale infrastructure while

71
00:02:44,430 --> 00:02:48,209
guaranteeing consistency across it and

72
00:02:46,319 --> 00:02:50,250
you have the ability to provision

73
00:02:48,209 --> 00:02:52,769
machines that are running on a variety

74
00:02:50,250 --> 00:02:55,319
of operating systems so you could have a

75
00:02:52,769 --> 00:02:57,870
puppet module for example or a chef

76
00:02:55,319 --> 00:03:00,659
cookbook or ansible playbook that works

77
00:02:57,870 --> 00:03:03,629
on RedHat to say Debian Ubuntu Windows

78
00:03:00,659 --> 00:03:05,250
etc you get the idea and they all have a

79
00:03:03,629 --> 00:03:08,970
form of Secrets management which we'll

80
00:03:05,250 --> 00:03:10,290
get into a little bit later all right so

81
00:03:08,970 --> 00:03:12,420
a common question that comes up around

82
00:03:10,290 --> 00:03:14,599
this technology is who needs it we've

83
00:03:12,420 --> 00:03:16,470
got containers and kubernetes right and

84
00:03:14,599 --> 00:03:19,230
so there's a couple of things to

85
00:03:16,470 --> 00:03:20,730
consider here first and foremost not

86
00:03:19,230 --> 00:03:22,379
everything can be a cloud native

87
00:03:20,730 --> 00:03:24,569
ephemeral workload that runs in a

88
00:03:22,379 --> 00:03:26,280
container and it's typically not a

89
00:03:24,569 --> 00:03:28,230
trivial effort to migrate older

90
00:03:26,280 --> 00:03:29,579
monoliths to container based deployments

91
00:03:28,230 --> 00:03:32,099
I mean he'll sometimes it's not even

92
00:03:29,579 --> 00:03:33,930
possible and you still have to install

93
00:03:32,099 --> 00:03:36,238
configure and manage your kubernetes

94
00:03:33,930 --> 00:03:38,549
deployment with something ideally

95
00:03:36,239 --> 00:03:40,470
something that's repeatable and can be

96
00:03:38,549 --> 00:03:45,540
tested regularly in an automated fashion

97
00:03:40,470 --> 00:03:47,159
like configuration management tools all

98
00:03:45,540 --> 00:03:48,929
right now that we discuss what these

99
00:03:47,159 --> 00:03:53,010
tools can do let's get back to talking

100
00:03:48,930 --> 00:03:54,780
about how we can abuse them the great

101
00:03:53,010 --> 00:03:56,790
thing about successfully compromising a

102
00:03:54,780 --> 00:03:58,799
configuration management server is that

103
00:03:56,790 --> 00:04:02,340
it gives an attacker the ability to run

104
00:03:58,799 --> 00:04:03,389
any command on every managed system this

105
00:04:02,340 --> 00:04:06,180
means that you can do things like

106
00:04:03,389 --> 00:04:08,220
introduce backdoors add delete or modify

107
00:04:06,180 --> 00:04:10,260
files you could just collect a bunch of

108
00:04:08,220 --> 00:04:12,989
shells I mean really the only limitation

109
00:04:10,260 --> 00:04:14,970
is your imagination and so long as

110
00:04:12,989 --> 00:04:17,070
you're implanted code isn't changed or

111
00:04:14,970 --> 00:04:19,709
removed most of these tools have a built

112
00:04:17,070 --> 00:04:21,839
in guarantee that your code will run on

113
00:04:19,709 --> 00:04:23,400
a regular interval so persistence is

114
00:04:21,839 --> 00:04:27,179
effectively built in for you

115
00:04:23,400 --> 00:04:27,599
and another great feature these tools

116
00:04:27,180 --> 00:04:30,750
all have

117
00:04:27,600 --> 00:04:33,330
secrets management solutions most of the

118
00:04:30,750 --> 00:04:35,370
time do the nature of cm tools these

119
00:04:33,330 --> 00:04:38,219
secrets are usable across a number of

120
00:04:35,370 --> 00:04:40,440
managed systems subsequently stealing

121
00:04:38,220 --> 00:04:43,200
them can provide us with ample lateral

122
00:04:40,440 --> 00:04:46,410
and vertical escalation paths and so

123
00:04:43,200 --> 00:04:48,719
quick story time a while ago I was on an

124
00:04:46,410 --> 00:04:51,660
engagement and I compromised a Jenkins

125
00:04:48,720 --> 00:04:53,940
box through an open groovy console once

126
00:04:51,660 --> 00:04:55,740
I had my hands on the Jenkins SSH key I

127
00:04:53,940 --> 00:04:57,990
was able to get into around 15 or so

128
00:04:55,740 --> 00:05:00,870
systems one of them was a puppet master

129
00:04:57,990 --> 00:05:03,300
and so from this system I was able to

130
00:05:00,870 --> 00:05:05,370
compromise hundreds of servers countless

131
00:05:03,300 --> 00:05:07,950
databases I got into the devs chat

132
00:05:05,370 --> 00:05:10,380
server which is always entertaining I

133
00:05:07,950 --> 00:05:12,090
got in his admin for their code repo it

134
00:05:10,380 --> 00:05:16,050
was it was a real good day for me and

135
00:05:12,090 --> 00:05:17,940
not as good of a day for the target but

136
00:05:16,050 --> 00:05:19,710
with this context in mind let's move on

137
00:05:17,940 --> 00:05:26,400
to talking about Mo's and where it fits

138
00:05:19,710 --> 00:05:28,289
into all this so Moses is an open-source

139
00:05:26,400 --> 00:05:31,200
tool that I came up with in December of

140
00:05:28,290 --> 00:05:35,430
2018 and I released it and presented on

141
00:05:31,200 --> 00:05:36,900
it at Def Con 27 in August of 2019 so

142
00:05:35,430 --> 00:05:38,730
far we have a small team of core

143
00:05:36,900 --> 00:05:41,130
developers and we're always looking for

144
00:05:38,730 --> 00:05:42,750
contributors and testers so if that's

145
00:05:41,130 --> 00:05:46,860
within the realm of possibility for you

146
00:05:42,750 --> 00:05:48,510
to assist with please help us moses is

147
00:05:46,860 --> 00:05:51,000
effectively a translator between a user

148
00:05:48,510 --> 00:05:52,590
and a variety of SIEM tools the idea

149
00:05:51,000 --> 00:05:54,300
being that we know what commands we want

150
00:05:52,590 --> 00:05:56,099
to run on our targets but we don't

151
00:05:54,300 --> 00:05:58,470
necessarily know how to implement them

152
00:05:56,100 --> 00:06:00,420
for a given cm tool most takes the

153
00:05:58,470 --> 00:06:02,820
commands or scripts that you want to run

154
00:06:00,420 --> 00:06:04,770
on cm managed systems and translates

155
00:06:02,820 --> 00:06:07,860
them into a format that a given cm tool

156
00:06:04,770 --> 00:06:11,159
can understand it's written and go aka

157
00:06:07,860 --> 00:06:13,080
going I chose going because it has a few

158
00:06:11,160 --> 00:06:15,060
really useful features first and

159
00:06:13,080 --> 00:06:17,490
foremost it enables us to easily target

160
00:06:15,060 --> 00:06:19,530
a wide variety of operating systems and

161
00:06:17,490 --> 00:06:22,050
architectures it also has native

162
00:06:19,530 --> 00:06:23,969
concurrency and allows us to generate a

163
00:06:22,050 --> 00:06:25,470
binary that can run on a target system

164
00:06:23,970 --> 00:06:29,640
without having to worry too much about

165
00:06:25,470 --> 00:06:32,460
dependencies I was motivated to create

166
00:06:29,640 --> 00:06:34,260
Mo's for one main reason cm tools can be

167
00:06:32,460 --> 00:06:36,510
is difficult to exploit as they are

168
00:06:34,260 --> 00:06:38,700
powerful one reason for this is that

169
00:06:36,510 --> 00:06:41,039
each cm tool has its own learning curve

170
00:06:38,700 --> 00:06:42,750
if you check out the docs for any

171
00:06:41,040 --> 00:06:45,600
one of these tools you'll quickly see

172
00:06:42,750 --> 00:06:47,730
that there is a lot to digest and there

173
00:06:45,600 --> 00:06:49,380
are many tools specific idiosyncrasies

174
00:06:47,730 --> 00:06:51,690
and gotchas that you need to be aware of

175
00:06:49,380 --> 00:06:52,980
before using them they also have

176
00:06:51,690 --> 00:06:55,550
significant differences in their

177
00:06:52,980 --> 00:06:57,870
workflows syntax and architectures and

178
00:06:55,550 --> 00:06:59,850
since you will likely encounter several

179
00:06:57,870 --> 00:07:02,490
different CM tools while on engagements

180
00:06:59,850 --> 00:07:03,750
or at different jobs you'll have to deal

181
00:07:02,490 --> 00:07:06,510
with this learning curve multiple times

182
00:07:03,750 --> 00:07:09,390
over you at the end of the day you can't

183
00:07:06,510 --> 00:07:10,860
choose what tools your target uses and

184
00:07:09,390 --> 00:07:12,360
so you want to be able to weaponize them

185
00:07:10,860 --> 00:07:15,480
all without having to worry about tool

186
00:07:12,360 --> 00:07:16,620
specific differences it's also important

187
00:07:15,480 --> 00:07:19,590
to keep in mind with great power comes

188
00:07:16,620 --> 00:07:21,330
great responsibility you can break a ton

189
00:07:19,590 --> 00:07:23,539
of systems while attempting to backdoor

190
00:07:21,330 --> 00:07:25,560
a cm server if you're not careful

191
00:07:23,540 --> 00:07:27,630
imagine accidentally taking down

192
00:07:25,560 --> 00:07:31,800
hundreds of production servers all at

193
00:07:27,630 --> 00:07:34,830
the same time if that's not a problem

194
00:07:31,800 --> 00:07:39,840
for any pen tester ever you'll be in a

195
00:07:34,830 --> 00:07:42,210
world of hurt and if you had to manually

196
00:07:39,840 --> 00:07:44,070
do what mozo tomates for you you'd have

197
00:07:42,210 --> 00:07:45,690
to do the following to start you'd have

198
00:07:44,070 --> 00:07:47,520
to figure out how the CM server is

199
00:07:45,690 --> 00:07:49,050
configured and fair warning

200
00:07:47,520 --> 00:07:51,390
a lot of the implementations of these

201
00:07:49,050 --> 00:07:52,220
tools that I've seen like uniformity and

202
00:07:51,390 --> 00:07:54,450
how they do things

203
00:07:52,220 --> 00:07:57,090
apparently best practices are merely a

204
00:07:54,450 --> 00:07:58,080
suggestion for a lot of organizations so

205
00:07:57,090 --> 00:07:59,760
you'll need to figure out how they've

206
00:07:58,080 --> 00:08:01,800
done their deployment before you can get

207
00:07:59,760 --> 00:08:03,450
to the good stuff this typically

208
00:08:01,800 --> 00:08:05,220
involves a lot of finding and grepping

209
00:08:03,450 --> 00:08:07,770
and it can get to be time-consuming and

210
00:08:05,220 --> 00:08:09,300
torturous once you've got the lay of the

211
00:08:07,770 --> 00:08:10,770
land you need to figure out where your

212
00:08:09,300 --> 00:08:12,660
backdoored code needs to go and

213
00:08:10,770 --> 00:08:14,640
depending on how the environment is

214
00:08:12,660 --> 00:08:16,740
configured this could be in a number of

215
00:08:14,640 --> 00:08:19,409
different places you could have a

216
00:08:16,740 --> 00:08:22,170
configuration management server that is

217
00:08:19,410 --> 00:08:25,320
supporting a number of different clients

218
00:08:22,170 --> 00:08:27,090
for example so if you put your

219
00:08:25,320 --> 00:08:28,800
backdoored code in one particular place

220
00:08:27,090 --> 00:08:30,810
it could only hit one client if you want

221
00:08:28,800 --> 00:08:33,720
to hit everyone you got to account for

222
00:08:30,810 --> 00:08:34,919
that and once you've got your backdoored

223
00:08:33,720 --> 00:08:37,110
code into place you need to figure out

224
00:08:34,919 --> 00:08:39,299
the file that or files that you need to

225
00:08:37,110 --> 00:08:40,740
reference a code in and this is the

226
00:08:39,299 --> 00:08:42,359
tricky part you make changes to those

227
00:08:40,740 --> 00:08:45,750
files in order to hit whatever host

228
00:08:42,360 --> 00:08:47,670
you're targeting so salt and ansible for

229
00:08:45,750 --> 00:08:50,190
example are Yemma based yeah mo is

230
00:08:47,670 --> 00:08:52,620
whitespace sensitive so in a less than

231
00:08:50,190 --> 00:08:54,480
ideal scenario you could put in

232
00:08:52,620 --> 00:08:56,940
something that just breaks the amel

233
00:08:54,480 --> 00:08:59,459
so you know the the CM server breaks not

234
00:08:56,940 --> 00:09:01,529
ideal even worse you have a side effect

235
00:08:59,459 --> 00:09:03,660
where you you put invalid yeah Mille but

236
00:09:01,529 --> 00:09:04,199
it's not indented where you hoped it

237
00:09:03,660 --> 00:09:05,339
would be

238
00:09:04,199 --> 00:09:09,389
so essentially you end up doing

239
00:09:05,339 --> 00:09:10,529
god-knows-what to which ever systems so

240
00:09:09,389 --> 00:09:13,920
that's really dangerous you got to be

241
00:09:10,529 --> 00:09:14,880
real care for there so once you go

242
00:09:13,920 --> 00:09:16,740
through that you need to figure out

243
00:09:14,880 --> 00:09:18,600
where the secrets are stored and how to

244
00:09:16,740 --> 00:09:22,380
decrypt them and this method of course

245
00:09:18,600 --> 00:09:23,839
varies for each cm tool alright so that

246
00:09:22,380 --> 00:09:26,490
sounds pretty painful right

247
00:09:23,839 --> 00:09:28,170
fortunately Moses here to help to start

248
00:09:26,490 --> 00:09:30,510
Mose automates all the aforementioned

249
00:09:28,170 --> 00:09:32,729
steps for you which is already a massive

250
00:09:30,510 --> 00:09:34,410
time saver in addition you know all

251
00:09:32,730 --> 00:09:36,420
those awesome post exploitation tools

252
00:09:34,410 --> 00:09:39,810
that we know and love Mose makes are

253
00:09:36,420 --> 00:09:41,370
real easy to deploy them on mass and for

254
00:09:39,810 --> 00:09:43,138
some of the CM servers you can

255
00:09:41,370 --> 00:09:45,180
strategically pick the nodes that you

256
00:09:43,139 --> 00:09:47,310
want to target for specific tasks so

257
00:09:45,180 --> 00:09:49,769
this could be uploading a web shell for

258
00:09:47,310 --> 00:09:51,359
all the managed web servers or popping a

259
00:09:49,769 --> 00:09:52,769
reverse shell and all the manage laptops

260
00:09:51,360 --> 00:09:54,089
and they come online or you could just

261
00:09:52,769 --> 00:09:57,360
introduce a payload specifically

262
00:09:54,089 --> 00:09:59,940
targeting manage Windows servers and so

263
00:09:57,360 --> 00:10:01,740
because Mo's allows the user to clearly

264
00:09:59,940 --> 00:10:03,300
go from thought to command without

265
00:10:01,740 --> 00:10:05,610
having to go deep in the weeds of tool

266
00:10:03,300 --> 00:10:07,019
specific details it helps to prevent

267
00:10:05,610 --> 00:10:08,760
someone less experienced with these

268
00:10:07,019 --> 00:10:10,560
technologies from accidentally

269
00:10:08,760 --> 00:10:13,350
decimating a whole bunch of systems all

270
00:10:10,560 --> 00:10:15,989
once furthermore it empowers you to

271
00:10:13,350 --> 00:10:17,490
focus on what you know and not have to

272
00:10:15,990 --> 00:10:19,980
get wrapped up in the minutia of

273
00:10:17,490 --> 00:10:21,630
learning new technologies in a limited

274
00:10:19,980 --> 00:10:26,399
amount of time in order to achieve your

275
00:10:21,630 --> 00:10:28,139
goals and you don't need to know tools

276
00:10:26,399 --> 00:10:30,569
specific implementation details to run

277
00:10:28,139 --> 00:10:33,690
Mo's commands our input the same way for

278
00:10:30,569 --> 00:10:35,670
all supported CM tools the code that

279
00:10:33,690 --> 00:10:37,740
Mo's uses for payload generation has the

280
00:10:35,670 --> 00:10:39,360
same core pieces and directory structure

281
00:10:37,740 --> 00:10:42,600
which makes it clear and straightforward

282
00:10:39,360 --> 00:10:44,790
to develop and modify as needed so if

283
00:10:42,600 --> 00:10:46,589
there are users that do have CM

284
00:10:44,790 --> 00:10:48,750
experience you can use modes to

285
00:10:46,589 --> 00:10:50,819
customize your attacks further Moe's

286
00:10:48,750 --> 00:10:52,949
relies heavily on templating for CM code

287
00:10:50,819 --> 00:10:54,870
generation so advanced users who have

288
00:10:52,949 --> 00:10:56,880
experience attacking CM systems can

289
00:10:54,870 --> 00:10:58,589
modify these templates to extend on the

290
00:10:56,880 --> 00:11:04,360
functionality that most provides

291
00:10:58,589 --> 00:11:06,540
out-of-the-box alright

292
00:11:04,360 --> 00:11:09,519
so this is the workflow for Moe's

293
00:11:06,540 --> 00:11:11,319
essentially again it's written and go so

294
00:11:09,519 --> 00:11:14,290
you have to compile it once you compile

295
00:11:11,320 --> 00:11:16,029
it you have this Moe's XE and in this

296
00:11:14,290 --> 00:11:19,839
particular instance here we are planning

297
00:11:16,029 --> 00:11:21,790
to run LS on manage chef agents

298
00:11:19,839 --> 00:11:24,820
associated with a chef workstation or

299
00:11:21,790 --> 00:11:26,079
server that we've compromised and for

300
00:11:24,820 --> 00:11:27,370
people that really like to get in there

301
00:11:26,079 --> 00:11:29,140
and tweak knobs we've got a Settings

302
00:11:27,370 --> 00:11:34,120
JSON config file so you don't end up

303
00:11:29,140 --> 00:11:35,860
with CLI soup so essentially once you

304
00:11:34,120 --> 00:11:37,540
specify this command you would run it

305
00:11:35,860 --> 00:11:39,100
and what will happen is it'll generate a

306
00:11:37,540 --> 00:11:42,099
payload for you it'll generate a binary

307
00:11:39,100 --> 00:11:43,899
and by default it will stand up a web

308
00:11:42,100 --> 00:11:46,120
server that you can use to transfer that

309
00:11:43,899 --> 00:11:47,260
binary to your target alternatively you

310
00:11:46,120 --> 00:11:48,220
can just say that you want to spit it

311
00:11:47,260 --> 00:11:49,510
out to the filesystem

312
00:11:48,220 --> 00:11:53,380
and you can transfer it however you

313
00:11:49,510 --> 00:11:55,750
choose SCP whatever once you get it in

314
00:11:53,380 --> 00:11:57,399
place on your target you run it you'll

315
00:11:55,750 --> 00:11:59,380
answer a couple questions like do you

316
00:11:57,399 --> 00:12:01,230
want to backup all the important files

317
00:11:59,380 --> 00:12:03,640
on the system you're about to modify

318
00:12:01,230 --> 00:12:04,959
unless you're trying to be super

319
00:12:03,640 --> 00:12:08,740
stealthy like this is probably a good

320
00:12:04,959 --> 00:12:10,268
idea right so you do that and you're off

321
00:12:08,740 --> 00:12:12,070
to the races Moe's will introduce your

322
00:12:10,269 --> 00:12:17,949
backdoored logic and try to pillage all

323
00:12:12,070 --> 00:12:20,529
the secrets all right so we're gonna do

324
00:12:17,949 --> 00:12:22,630
a demo and in this scenario we're going

325
00:12:20,529 --> 00:12:24,850
to leverage Moe's against a compromised

326
00:12:22,630 --> 00:12:27,910
chef workstation for both lateral

327
00:12:24,850 --> 00:12:29,500
movement and persistence compromising a

328
00:12:27,910 --> 00:12:31,480
chef workstation enables us to do things

329
00:12:29,500 --> 00:12:33,670
like introduce new cookbooks to the chef

330
00:12:31,480 --> 00:12:35,980
server which is the mechanism for

331
00:12:33,670 --> 00:12:38,740
managing chef agents we can also modify

332
00:12:35,980 --> 00:12:41,440
the existing cookbooks used by agents

333
00:12:38,740 --> 00:12:43,570
connected to the chef server and lastly

334
00:12:41,440 --> 00:12:45,910
this is where we can find and decrypt

335
00:12:43,570 --> 00:12:47,560
secret so needless to say this is the

336
00:12:45,910 --> 00:12:50,290
optimal system to compromise in a chef

337
00:12:47,560 --> 00:12:53,050
environment it's important to note that

338
00:12:50,290 --> 00:12:55,839
we are in a post exploitation phase of

339
00:12:53,050 --> 00:12:57,579
this engagement in the scenario here so

340
00:12:55,839 --> 00:12:59,470
it's assumed we've already done some of

341
00:12:57,579 --> 00:13:01,510
our due diligence in terms of recon and

342
00:12:59,470 --> 00:13:04,050
have some understanding about the assets

343
00:13:01,510 --> 00:13:04,050
around the network

344
00:13:16,350 --> 00:13:19,560
there we go

345
00:13:23,730 --> 00:13:30,940
all right so to start we're gonna take a

346
00:13:28,210 --> 00:13:32,890
look at a payload that we are going to

347
00:13:30,940 --> 00:13:35,080
run against one of the targets this is

348
00:13:32,890 --> 00:13:38,170
just a reverse shell through Python

349
00:13:35,080 --> 00:13:40,450
pretty textbook so essentially we're

350
00:13:38,170 --> 00:13:42,280
going to take this the script and we are

351
00:13:40,450 --> 00:13:43,810
going to upload it to the chef server

352
00:13:42,280 --> 00:13:46,000
and then we are going to use it against

353
00:13:43,810 --> 00:13:49,329
a chef agent or several chef agents

354
00:13:46,000 --> 00:13:51,370
depending so this is us generating the

355
00:13:49,330 --> 00:13:52,960
payload and then we are on the

356
00:13:51,370 --> 00:13:55,270
workstation that we compromised we

357
00:13:52,960 --> 00:13:56,650
download the payload and run it and when

358
00:13:55,270 --> 00:13:58,449
we run it we see that there's a couple

359
00:13:56,650 --> 00:14:00,939
of chef agents that are associated with

360
00:13:58,450 --> 00:14:02,680
the chef server chef workstation dev

361
00:14:00,940 --> 00:14:04,690
assistant and web server we're going to

362
00:14:02,680 --> 00:14:06,280
opt to just hit the dev system so we're

363
00:14:04,690 --> 00:14:10,900
going to pop a reverse shell on the DEP

364
00:14:06,280 --> 00:14:12,640
system and so essentially again the

365
00:14:10,900 --> 00:14:14,290
rebbe shell dot Sh that showed you

366
00:14:12,640 --> 00:14:16,390
earlier that's now on the run list for

367
00:14:14,290 --> 00:14:18,040
the dev system and it looks like we

368
00:14:16,390 --> 00:14:19,390
found a secret so we'll go ahead and

369
00:14:18,040 --> 00:14:27,310
hold on to that for later that could be

370
00:14:19,390 --> 00:14:28,660
good and so now typically a chef agents

371
00:14:27,310 --> 00:14:30,069
check in with the chef server every 20

372
00:14:28,660 --> 00:14:31,900
minutes I've sped it up here but

373
00:14:30,070 --> 00:14:33,190
basically I set up a listener waiting

374
00:14:31,900 --> 00:14:35,670
for the agent to connect back and

375
00:14:33,190 --> 00:14:37,780
automatically it's connected back to me

376
00:14:35,670 --> 00:14:39,849
again if you're doing this in real life

377
00:14:37,780 --> 00:14:41,079
that probably take about 20 minutes and

378
00:14:39,850 --> 00:14:45,090
we're just kind of looking around seeing

379
00:14:41,080 --> 00:14:46,840
some interesting things like this and

380
00:14:45,090 --> 00:14:48,340
we're also going to take a look at the

381
00:14:46,840 --> 00:14:51,730
hosts and it looks like there's a Maria

382
00:14:48,340 --> 00:14:53,260
DB system conveniently hooked up with

383
00:14:51,730 --> 00:14:56,350
this system so we can test out that

384
00:14:53,260 --> 00:14:57,460
secret that we found earlier and in case

385
00:14:56,350 --> 00:14:59,500
anyone's confused

386
00:14:57,460 --> 00:15:03,160
Maria DB is a fork of MySQL so that's

387
00:14:59,500 --> 00:15:04,720
why I'm using the MySQL a executable to

388
00:15:03,160 --> 00:15:06,850
connect to it that works great we can

389
00:15:04,720 --> 00:15:07,960
come back and pillage that later we also

390
00:15:06,850 --> 00:15:10,210
noticed there was a webserver

391
00:15:07,960 --> 00:15:11,620
so we're going to go ahead and target

392
00:15:10,210 --> 00:15:13,210
the web server next and in this case

393
00:15:11,620 --> 00:15:14,260
we're going to upload a web shell and

394
00:15:13,210 --> 00:15:16,810
then we're going to backdoor the

395
00:15:14,260 --> 00:15:24,819
dub-dub-dub data user with my beautiful

396
00:15:16,810 --> 00:15:27,878
said so

397
00:15:24,819 --> 00:15:30,309
run the payload and what it's going to

398
00:15:27,879 --> 00:15:31,720
do it's going to generate the we're

399
00:15:30,309 --> 00:15:33,039
gonna run most it'll generate a payload

400
00:15:31,720 --> 00:15:35,859
that we can drop on the compromised chef

401
00:15:33,039 --> 00:15:36,999
workstation when we run it we can this

402
00:15:35,859 --> 00:15:41,589
time say that we want to target

403
00:15:36,999 --> 00:15:42,579
specifically the web server and one

404
00:15:41,589 --> 00:15:45,129
thing that's important to keep in mind

405
00:15:42,579 --> 00:15:46,809
here is anything that's kind of funky in

406
00:15:45,129 --> 00:15:48,939
terms of configurations on the different

407
00:15:46,809 --> 00:15:49,988
systems that you compromise chances are

408
00:15:48,939 --> 00:15:51,669
that's gonna be the same everywhere

409
00:15:49,989 --> 00:15:53,649
because again this is a cm managed

410
00:15:51,669 --> 00:15:55,329
environment so for example that permit

411
00:15:53,649 --> 00:15:58,209
route login we can assume that's on most

412
00:15:55,329 --> 00:16:00,039
of the systems here's the web server

413
00:15:58,209 --> 00:16:01,988
that we're hitting and as you can see

414
00:16:00,039 --> 00:16:04,419
there is nothing to see here at the

415
00:16:01,989 --> 00:16:06,129
moment but when the agent checks in with

416
00:16:04,419 --> 00:16:08,589
the server typically in 20 minutes or

417
00:16:06,129 --> 00:16:12,579
just you know immediately because video

418
00:16:08,589 --> 00:16:13,749
we get our web shell into place and for

419
00:16:12,579 --> 00:16:15,549
the sake of this demo we'll say that

420
00:16:13,749 --> 00:16:17,169
this web server is externally facing so

421
00:16:15,549 --> 00:16:19,720
this could be a means for us to get back

422
00:16:17,169 --> 00:16:23,289
in if I our pops us and kicks us off of

423
00:16:19,720 --> 00:16:25,839
the chef workstation or the Deb system

424
00:16:23,289 --> 00:16:27,279
that we have a reverse shell - so indeed

425
00:16:25,839 --> 00:16:29,350
it looks like we're running nginx and

426
00:16:27,279 --> 00:16:32,889
the dub dub dub data users there so that

427
00:16:29,350 --> 00:16:35,379
was a pretty decent user to come from -

428
00:16:32,889 --> 00:16:36,939
back door and we'll just check out our

429
00:16:35,379 --> 00:16:40,389
said work make sure that we did well

430
00:16:36,939 --> 00:16:44,069
with that it looks like that's in place

431
00:16:40,389 --> 00:16:44,069
now we've got the dub-dub-dub data user

432
00:16:44,549 --> 00:16:50,619
and if we check out the hosts it looks

433
00:16:48,819 --> 00:16:52,299
like this systems connected up with the

434
00:16:50,619 --> 00:16:54,369
dev assistant the chef's workstation so

435
00:16:52,299 --> 00:16:56,709
this could be a good means for us to go

436
00:16:54,369 --> 00:16:59,669
again from the outside in so now we can

437
00:16:56,709 --> 00:17:04,240
lay the framework for that essentially

438
00:16:59,669 --> 00:17:06,429
maybe using something like SSH so we'll

439
00:17:04,240 --> 00:17:12,329
go ahead and generate a rogue SSH key

440
00:17:06,429 --> 00:17:15,250
and a after this command so and again

441
00:17:12,329 --> 00:17:18,069
just to kind of reiterate this because

442
00:17:15,250 --> 00:17:19,929
we saw the permit route login again it's

443
00:17:18,069 --> 00:17:21,188
a cm managed environment so that's the

444
00:17:19,929 --> 00:17:22,750
setting that's probably in place for all

445
00:17:21,189 --> 00:17:26,379
the system so again we can exploit

446
00:17:22,750 --> 00:17:30,129
things like that so here is the SSH key

447
00:17:26,378 --> 00:17:32,289
gen and we'll go ahead and grab the pub

448
00:17:30,129 --> 00:17:34,480
key and then get into place and of

449
00:17:32,289 --> 00:17:36,760
course because we have shells to the dev

450
00:17:34,480 --> 00:17:38,230
system and to the chef workstation we

451
00:17:36,760 --> 00:17:38,920
could just knock those and manually but

452
00:17:38,230 --> 00:17:41,500
you

453
00:17:38,920 --> 00:17:45,610
and if ir comes in and they remove our

454
00:17:41,500 --> 00:17:49,510
key from the authorized keys file we are

455
00:17:45,610 --> 00:17:49,990
kind of Sol but if we leverage cm thank

456
00:17:49,510 --> 00:17:52,420
you

457
00:17:49,990 --> 00:17:53,770
if we lever to cm server then even if

458
00:17:52,420 --> 00:17:54,970
they remove it it'll come back in 20

459
00:17:53,770 --> 00:17:57,940
minutes and the same thing applies to

460
00:17:54,970 --> 00:17:59,020
our web shell and our reverse shell now

461
00:17:57,940 --> 00:18:00,460
of course with the reverse shell they

462
00:17:59,020 --> 00:18:02,620
could just do something like you know

463
00:18:00,460 --> 00:18:05,080
blacklist our IP but with the web shell

464
00:18:02,620 --> 00:18:07,149
you know they remove it they don't check

465
00:18:05,080 --> 00:18:10,050
the CM server which chances are they

466
00:18:07,150 --> 00:18:13,510
they won't not my experience anyway

467
00:18:10,050 --> 00:18:15,970
they'll all come back so here we are

468
00:18:13,510 --> 00:18:19,090
just getting our payload to throw the

469
00:18:15,970 --> 00:18:23,320
SSH SSH keys into place for the chef

470
00:18:19,090 --> 00:18:25,179
workstation in the dev system and when

471
00:18:23,320 --> 00:18:27,220
those systems check in with the chef

472
00:18:25,180 --> 00:18:29,530
server then those will both be loaded up

473
00:18:27,220 --> 00:18:30,790
in the authorized keys files so let's

474
00:18:29,530 --> 00:18:32,560
look at this from the outside and let's

475
00:18:30,790 --> 00:18:35,110
pretend that we just we lost our shells

476
00:18:32,560 --> 00:18:36,879
and and just got totally kicked off the

477
00:18:35,110 --> 00:18:39,760
network so essentially we wait for the

478
00:18:36,880 --> 00:18:42,010
web shell to come back we use it to get

479
00:18:39,760 --> 00:18:45,610
a reverse shell so now we've got root on

480
00:18:42,010 --> 00:18:47,680
the web server and because we also have

481
00:18:45,610 --> 00:18:50,050
those pub keys that are being kicked

482
00:18:47,680 --> 00:18:51,970
into the authorized keys files for us we

483
00:18:50,050 --> 00:18:57,040
can go ahead and just SSH into them

484
00:18:51,970 --> 00:18:58,900
without a password which is great and if

485
00:18:57,040 --> 00:19:00,310
it doesn't work the first time that

486
00:18:58,900 --> 00:19:02,230
probably means that the agent hasn't

487
00:19:00,310 --> 00:19:04,480
checked in with the server yet like here

488
00:19:02,230 --> 00:19:07,660
so you wait a couple minutes you try

489
00:19:04,480 --> 00:19:21,360
again and everything's probably gonna be

490
00:19:07,660 --> 00:19:25,830
dandy for you like that thank you

491
00:19:21,360 --> 00:19:25,830
all right now let's get back to

492
00:19:30,180 --> 00:19:33,329
[Music]

493
00:19:35,970 --> 00:19:41,049
all right so I imagine after that

494
00:19:39,519 --> 00:19:41,970
riveting demo you all want to give this

495
00:19:41,049 --> 00:19:44,620
a shot

496
00:19:41,970 --> 00:19:46,509
fortunately I've created test labs for

497
00:19:44,620 --> 00:19:47,860
all of the CM systems so you don't have

498
00:19:46,509 --> 00:19:50,559
to go through the pain of setting them

499
00:19:47,860 --> 00:19:52,269
up and they're all docker based there's

500
00:19:50,559 --> 00:19:54,279
one vagrant based one that's one of the

501
00:19:52,269 --> 00:19:57,250
chef ones chef does not like to be in

502
00:19:54,279 --> 00:20:00,029
containers but we threw some black magic

503
00:19:57,250 --> 00:20:04,240
made it work anyway so there are some

504
00:20:00,029 --> 00:20:06,309
dr. environments for chef and yes so

505
00:20:04,240 --> 00:20:08,049
please check these out and mess around

506
00:20:06,309 --> 00:20:10,840
with the tool also like if you use this

507
00:20:08,049 --> 00:20:13,929
an engagement before launching this

508
00:20:10,840 --> 00:20:15,279
against a whole bunch of systems run in

509
00:20:13,929 --> 00:20:19,330
the test environment make sure it works

510
00:20:15,279 --> 00:20:20,950
properly how you expect it to and you

511
00:20:19,330 --> 00:20:25,418
can actually do the demo that I just

512
00:20:20,950 --> 00:20:27,279
showed previously by using the chef test

513
00:20:25,419 --> 00:20:29,169
lab repo and if you watch the DEF CON

514
00:20:27,279 --> 00:20:33,120
version of this talk you can do those

515
00:20:29,169 --> 00:20:33,120
demos through the puppet tests lab repo

516
00:20:33,330 --> 00:20:36,610
so we're currently working on supporting

517
00:20:35,350 --> 00:20:37,149
all the tools but we're not quite there

518
00:20:36,610 --> 00:20:39,309
yet

519
00:20:37,149 --> 00:20:41,529
Moses open source please help us get

520
00:20:39,309 --> 00:20:44,200
there with your contributions we'd also

521
00:20:41,529 --> 00:20:45,190
love some feedback from testers let us

522
00:20:44,200 --> 00:20:47,049
know that the tool is working out for

523
00:20:45,190 --> 00:20:49,960
you what we can do better what we've

524
00:20:47,049 --> 00:20:53,100
done great salts almost there we're not

525
00:20:49,960 --> 00:20:53,100
quite there yet but we're very close

526
00:20:53,340 --> 00:20:58,809
like to thank a couple rockstars in my

527
00:20:55,690 --> 00:21:00,580
life al is the other contributor on the

528
00:20:58,809 --> 00:21:02,980
project and he's done some amazing work

529
00:21:00,580 --> 00:21:04,720
I don't know where you are but you're

530
00:21:02,980 --> 00:21:07,000
wonderful thank you

531
00:21:04,720 --> 00:21:09,039
and like to thank my wife for supporting

532
00:21:07,000 --> 00:21:11,200
me working a lot of extra hours outside

533
00:21:09,039 --> 00:21:13,389
of work and making this happen so thank

534
00:21:11,200 --> 00:21:15,159
you and I really like to thank the

535
00:21:13,389 --> 00:21:18,779
b-side staff for making this an awesome

536
00:21:15,159 --> 00:21:21,190
event year after year so thank you guys

537
00:21:18,779 --> 00:21:22,809
this is a real treat I love this

538
00:21:21,190 --> 00:21:26,799
conference so much so it's cool to be

539
00:21:22,809 --> 00:21:28,480
talking here all right so the QR code

540
00:21:26,799 --> 00:21:30,279
will take you to the master of servers

541
00:21:28,480 --> 00:21:31,509
project if you don't trust it that's

542
00:21:30,279 --> 00:21:36,070
fine there's all the links that you need

543
00:21:31,509 --> 00:21:38,860
they're also real quick Splunk is hiring

544
00:21:36,070 --> 00:21:40,809
if you want to be my boss the project

545
00:21:38,860 --> 00:21:42,519
team is hiring a manager so if you want

546
00:21:40,809 --> 00:21:45,399
to be my boss there's my contact info

547
00:21:42,519 --> 00:21:47,289
get with me we're also looking for

548
00:21:45,399 --> 00:21:48,360
senior in principle level product

549
00:21:47,289 --> 00:21:49,980
security engineers

550
00:21:48,360 --> 00:21:53,340
well so that's of interest to you

551
00:21:49,980 --> 00:21:56,130
there's my contact info and I don't have

552
00:21:53,340 --> 00:22:24,899
time for quests Jen's maybe I have a

553
00:21:56,130 --> 00:22:26,309
time for one question thank you I that

554
00:22:24,900 --> 00:22:27,990
could be interesting

555
00:22:26,309 --> 00:22:30,070
we'll have to see how my employer feels

556
00:22:27,990 --> 00:22:32,240
about that good question

557
00:22:30,070 --> 00:22:34,350
[Music]

558
00:22:32,240 --> 00:22:36,480
all right cool thank you guys so much

559
00:22:34,350 --> 00:22:39,439
for checking this out

560
00:22:36,480 --> 00:22:39,440
[Applause]

