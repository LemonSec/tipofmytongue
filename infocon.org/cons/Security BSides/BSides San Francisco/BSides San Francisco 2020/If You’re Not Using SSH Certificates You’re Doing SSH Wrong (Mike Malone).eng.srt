1
00:00:00,000 --> 00:00:04,560
all right welcome to the lightning talks

2
00:00:02,399 --> 00:00:09,450
my name is Andy I'm the rim Proctor for

3
00:00:04,560 --> 00:00:12,230
this this is Mike Malone he's giving a

4
00:00:09,450 --> 00:00:14,730
talk on if you're not using SSH SSH

5
00:00:12,230 --> 00:00:19,920
certificates you're doing SSH wrong

6
00:00:14,730 --> 00:00:25,890
so Mike really antagonistic hi I'm Mike

7
00:00:19,920 --> 00:00:28,740
founder of small step and no this isn't

8
00:00:25,890 --> 00:00:31,949
working but my keyboard does nope it's

9
00:00:28,740 --> 00:00:33,149
not working either I'm here today to

10
00:00:31,949 --> 00:00:35,010
talk about SSH

11
00:00:33,149 --> 00:00:37,469
more specifically this presentation is

12
00:00:35,010 --> 00:00:39,960
about SSH certificates certificates have

13
00:00:37,469 --> 00:00:41,850
been a part of OpenSSH for 10 years but

14
00:00:39,960 --> 00:00:43,649
most people haven't heard of them so I'm

15
00:00:41,850 --> 00:00:46,620
here to tell you what they are and why

16
00:00:43,649 --> 00:00:48,750
you should care so we'll be following a

17
00:00:46,620 --> 00:00:50,788
typical three-act narrative form in the

18
00:00:48,750 --> 00:00:53,100
first act I'll introduce the monster SSH

19
00:00:50,789 --> 00:00:55,320
operations and security will learn that

20
00:00:53,100 --> 00:00:58,020
the real problem isn't SSH in general

21
00:00:55,320 --> 00:00:59,910
but the way most SSH deployments handle

22
00:00:58,020 --> 00:01:02,760
authentication using simple public key

23
00:00:59,910 --> 00:01:04,798
authentication and act 2 will introduce

24
00:01:02,760 --> 00:01:07,080
our hero SSH certificate authentication

25
00:01:04,799 --> 00:01:08,729
then we'll wrap things up with a summary

26
00:01:07,080 --> 00:01:10,560
of our findings some code and resources

27
00:01:08,729 --> 00:01:12,179
to learn more I got to do all of that in

28
00:01:10,560 --> 00:01:14,790
10 minutes so I'm gonna be moving really

29
00:01:12,180 --> 00:01:18,689
fast heads up the URL for these slides

30
00:01:14,790 --> 00:01:20,100
is in the footer of every slide first

31
00:01:18,689 --> 00:01:21,929
let me introduce myself your narrator

32
00:01:20,100 --> 00:01:23,640
again my name is Mike Malone I'm a

33
00:01:21,930 --> 00:01:25,590
software engineer my happy place is

34
00:01:23,640 --> 00:01:27,150
distributed systems architecture

35
00:01:25,590 --> 00:01:28,740
I've made some open source and open

36
00:01:27,150 --> 00:01:30,390
standards contributions over the years

37
00:01:28,740 --> 00:01:32,789
these days I spend most of my time

38
00:01:30,390 --> 00:01:34,979
wrangling kids and running my company's

39
00:01:32,790 --> 00:01:38,310
small step which provides solutions for

40
00:01:34,979 --> 00:01:39,929
securing distributed systems anyways

41
00:01:38,310 --> 00:01:42,390
back to our monster to put it bluntly

42
00:01:39,930 --> 00:01:44,579
typical SSH deployments suck for pretty

43
00:01:42,390 --> 00:01:47,100
much everyone involved ssh user

44
00:01:44,579 --> 00:01:50,100
experience is terrible operating ssh at

45
00:01:47,100 --> 00:01:53,039
scale is a disaster and ssh encourages

46
00:01:50,100 --> 00:01:55,079
bad security practices most people

47
00:01:53,040 --> 00:01:56,369
probably haven't given ssh enough of

48
00:01:55,079 --> 00:01:58,529
thought to really even form an opinion

49
00:01:56,369 --> 00:02:00,450
about this stuff so allow me to

50
00:01:58,530 --> 00:02:03,820
elaborate by walking through a typical

51
00:02:00,450 --> 00:02:05,500
new user experience for ssh

52
00:02:03,820 --> 00:02:06,940
so imagine you've just joined a new

53
00:02:05,500 --> 00:02:08,820
company you've got a brand new laptop

54
00:02:06,940 --> 00:02:10,690
and you're trying to get SSH access

55
00:02:08,820 --> 00:02:13,870
onboarding starts with some baroque

56
00:02:10,690 --> 00:02:15,850
implantation of ssh-keygen hopefully

57
00:02:13,870 --> 00:02:18,640
pulled from a run book but more likely

58
00:02:15,850 --> 00:02:19,959
cribbed from Stack Overflow most users

59
00:02:18,640 --> 00:02:22,000
won't actually understand what's going

60
00:02:19,959 --> 00:02:22,480
on and are already confused at this

61
00:02:22,000 --> 00:02:24,610
point

62
00:02:22,480 --> 00:02:26,920
either that or they'll know enough to be

63
00:02:24,610 --> 00:02:30,130
dangerous and do something like copy

64
00:02:26,920 --> 00:02:31,869
they're really secure 4096 bit RSA key

65
00:02:30,130 --> 00:02:33,400
that they've been using since college

66
00:02:31,870 --> 00:02:37,930
from their old laptop to their new one

67
00:02:33,400 --> 00:02:39,310
so we're already off to a bad start next

68
00:02:37,930 --> 00:02:40,959
you have to give your public key to an

69
00:02:39,310 --> 00:02:42,670
administrator to approve and distribute

70
00:02:40,959 --> 00:02:44,590
so this process is often pretty ad-hoc

71
00:02:42,670 --> 00:02:45,940
usually it involves manually opening a

72
00:02:44,590 --> 00:02:48,190
ticket or sending a message to some

73
00:02:45,940 --> 00:02:49,810
administrator let's ignore the fact that

74
00:02:48,190 --> 00:02:52,120
whatever messaging app you're using here

75
00:02:49,810 --> 00:02:54,100
is now critical for SSH security and

76
00:02:52,120 --> 00:02:55,810
we'll go ahead and move on so in step

77
00:02:54,100 --> 00:02:57,459
three you wait you've initiated some

78
00:02:55,810 --> 00:02:59,680
opaque process that's eventually going

79
00:02:57,459 --> 00:03:02,650
to result in SSH access but you won't

80
00:02:59,680 --> 00:03:04,420
get access immediately and while you ate

81
00:03:02,650 --> 00:03:06,519
some poor operator is interrupted to

82
00:03:04,420 --> 00:03:09,220
perform some mundane and security

83
00:03:06,519 --> 00:03:11,080
critical tasks so for simple public key

84
00:03:09,220 --> 00:03:13,030
authentication to work your public key

85
00:03:11,080 --> 00:03:15,850
you needs to be in an authorized keys

86
00:03:13,030 --> 00:03:17,230
file on every server most likely that

87
00:03:15,850 --> 00:03:19,120
means someone has to add your key to a

88
00:03:17,230 --> 00:03:21,760
manifest in some repo and trigger a

89
00:03:19,120 --> 00:03:23,049
deploy there may be some automation

90
00:03:21,760 --> 00:03:25,359
around this process but it's usually

91
00:03:23,049 --> 00:03:26,380
shoestring and bubblegum and remember

92
00:03:25,360 --> 00:03:28,209
that the security of this entire

93
00:03:26,380 --> 00:03:30,760
pipeline is absolutely essential to the

94
00:03:28,209 --> 00:03:32,530
security of your system so once that's

95
00:03:30,760 --> 00:03:34,179
done the admin will close your ticket or

96
00:03:32,530 --> 00:03:35,860
message you back note if you notify you

97
00:03:34,180 --> 00:03:39,940
somehow that you now have this SH access

98
00:03:35,860 --> 00:03:41,650
and finally you can SSH and you can keep

99
00:03:39,940 --> 00:03:44,380
SSH in using the same credentials

100
00:03:41,650 --> 00:03:46,209
forever because user on-boarding and

101
00:03:44,380 --> 00:03:48,609
off-boarding is typically the only time

102
00:03:46,209 --> 00:03:50,079
geez are updated rekeying requires

103
00:03:48,610 --> 00:03:52,750
running back through this whole process

104
00:03:50,079 --> 00:03:54,370
again so people don't do it removing

105
00:03:52,750 --> 00:03:56,650
fuse to be provision at D provision

106
00:03:54,370 --> 00:03:58,120
access is also manual so you have all

107
00:03:56,650 --> 00:04:00,130
these keys sitting around on hard drives

108
00:03:58,120 --> 00:04:02,500
for people like your CTO and your VP who

109
00:04:00,130 --> 00:04:03,790
SSH to a machine once a year and if you

110
00:04:02,500 --> 00:04:05,380
forget to be provisioned access when

111
00:04:03,790 --> 00:04:07,239
you're off board someone you might have

112
00:04:05,380 --> 00:04:09,940
end up giving some disgruntled former

113
00:04:07,239 --> 00:04:11,829
employee access to prod so all of this

114
00:04:09,940 --> 00:04:13,540
is pretty terrible but our new user

115
00:04:11,829 --> 00:04:15,910
experience is not done because when you

116
00:04:13,540 --> 00:04:16,539
SSH to a host for the first time you get

117
00:04:15,910 --> 00:04:18,969
this

118
00:04:16,540 --> 00:04:20,320
warning on the left you've probably seen

119
00:04:18,970 --> 00:04:22,450
this before if you're like most people

120
00:04:20,320 --> 00:04:25,030
you've been trained to ignore it by just

121
00:04:22,450 --> 00:04:26,979
typing yes that is a problem because

122
00:04:25,030 --> 00:04:28,299
this is a legitimate security threat the

123
00:04:26,980 --> 00:04:30,790
onboarding process we just went through

124
00:04:28,300 --> 00:04:32,980
configured hosts with our public key but

125
00:04:30,790 --> 00:04:35,500
we didn't configure our client to know

126
00:04:32,980 --> 00:04:37,120
hosts public keys so this warning is

127
00:04:35,500 --> 00:04:38,650
your open SSH client telling you that it

128
00:04:37,120 --> 00:04:40,330
couldn't identify the server that you're

129
00:04:38,650 --> 00:04:42,400
trying to connect to what you're

130
00:04:40,330 --> 00:04:44,260
supposed to do is verify the key

131
00:04:42,400 --> 00:04:45,969
fingerprint out-of-band by asking an

132
00:04:44,260 --> 00:04:46,870
administrator or consulting a database

133
00:04:45,970 --> 00:04:49,510
or something like that

134
00:04:46,870 --> 00:04:50,710
but no one does that when you type yes

135
00:04:49,510 --> 00:04:52,240
the connection proceeds without

136
00:04:50,710 --> 00:04:54,340
authentication and the public key is

137
00:04:52,240 --> 00:04:56,470
permanently added to the known host file

138
00:04:54,340 --> 00:04:58,960
on your client so this is called trust

139
00:04:56,470 --> 00:05:00,370
on first use or tofu it's a bad security

140
00:04:58,960 --> 00:05:01,599
practice it's basically the same as

141
00:05:00,370 --> 00:05:06,160
ignoring a certificate warning in your

142
00:05:01,600 --> 00:05:08,200
browser but everyone does it and God

143
00:05:06,160 --> 00:05:09,820
forbid you ever want to rekey a host or

144
00:05:08,200 --> 00:05:12,099
reuse a host name later on a different

145
00:05:09,820 --> 00:05:13,870
server if you do your clients will freak

146
00:05:12,100 --> 00:05:16,060
out because the new public key doesn't

147
00:05:13,870 --> 00:05:18,040
match what they expect this is called

148
00:05:16,060 --> 00:05:19,990
host P verification failure it triggers

149
00:05:18,040 --> 00:05:22,150
a much scarier looking error it's also

150
00:05:19,990 --> 00:05:23,680
harder to bypass so it usually results

151
00:05:22,150 --> 00:05:27,669
in a bunch of engineers reaching out to

152
00:05:23,680 --> 00:05:30,160
CEQA worried that they've been hacked so

153
00:05:27,670 --> 00:05:31,450
that's our spooky monster managing SSH

154
00:05:30,160 --> 00:05:33,250
credentials this way is bad for users

155
00:05:31,450 --> 00:05:36,010
it's bad for security and it's a huge

156
00:05:33,250 --> 00:05:38,140
operational time suck but the real

157
00:05:36,010 --> 00:05:40,270
monster here isn't actually SSH it's

158
00:05:38,140 --> 00:05:42,280
simple public key authentication and the

159
00:05:40,270 --> 00:05:44,710
fix is to stop using this authentication

160
00:05:42,280 --> 00:05:47,140
mechanism and certificates are the

161
00:05:44,710 --> 00:05:48,969
answer so a certificate is just a data

162
00:05:47,140 --> 00:05:51,250
structure that binds a public key to a

163
00:05:48,970 --> 00:05:52,960
name certificates are signed by a

164
00:05:51,250 --> 00:05:54,730
certificate authority so you can trust

165
00:05:52,960 --> 00:05:56,680
them and certificate authentication

166
00:05:54,730 --> 00:05:58,270
eliminates key approval and distribution

167
00:05:56,680 --> 00:05:59,530
so all of the annoying and

168
00:05:58,270 --> 00:06:00,099
time-consuming stuff that we just

169
00:05:59,530 --> 00:06:02,650
discussed

170
00:06:00,100 --> 00:06:04,060
with certificates hosts and clients

171
00:06:02,650 --> 00:06:05,530
don't need prior knowledge of one

172
00:06:04,060 --> 00:06:07,930
another's public keys to authenticate

173
00:06:05,530 --> 00:06:08,380
they only need to know the ca'se public

174
00:06:07,930 --> 00:06:10,510
key

175
00:06:08,380 --> 00:06:12,120
when a client connects to a host the two

176
00:06:10,510 --> 00:06:14,440
peers just exchange certificates

177
00:06:12,120 --> 00:06:17,350
certificates can easily be reissued on

178
00:06:14,440 --> 00:06:18,850
demand as needed and since hosts and

179
00:06:17,350 --> 00:06:20,830
clients both have certificates they can

180
00:06:18,850 --> 00:06:23,249
mutually authenticate and tofu and host

181
00:06:20,830 --> 00:06:25,139
key verification failure goes away

182
00:06:23,249 --> 00:06:28,169
so again certificate authentication was

183
00:06:25,139 --> 00:06:29,699
added in OpenSSH 5.4 10 years ago

184
00:06:28,169 --> 00:06:31,258
it's battle-tested it's used in

185
00:06:29,699 --> 00:06:33,629
production by massive operations like

186
00:06:31,259 --> 00:06:35,429
Facebook uber and Netflix and all of the

187
00:06:33,629 --> 00:06:39,089
tooling required to use SSH certificates

188
00:06:35,429 --> 00:06:40,919
is available today configuring OpenSSH

189
00:06:39,089 --> 00:06:43,559
to use certificates is stupid easy on

190
00:06:40,919 --> 00:06:46,378
each at and each host you edit sshd

191
00:06:43,559 --> 00:06:47,729
config specifying the CA public key the

192
00:06:46,379 --> 00:06:50,309
hosts private key and the host

193
00:06:47,729 --> 00:06:52,378
certificate on each client you add one

194
00:06:50,309 --> 00:06:54,299
line to known hosts specifying the CA

195
00:06:52,379 --> 00:06:55,860
public key and that's it that's

196
00:06:54,299 --> 00:06:57,899
literally all you need to do to start

197
00:06:55,860 --> 00:06:59,669
using certificate authentication you can

198
00:06:57,899 --> 00:07:01,139
even use it alongside public key

199
00:06:59,669 --> 00:07:05,459
authentication to make transition and

200
00:07:01,139 --> 00:07:06,659
easier you will also need an ssh

201
00:07:05,459 --> 00:07:08,989
certificate authority to get

202
00:07:06,659 --> 00:07:11,099
certificates issued to clients and hosts

203
00:07:08,989 --> 00:07:13,318
there are a bunch of existing open

204
00:07:11,099 --> 00:07:15,149
source tools you can use for this SSH

205
00:07:13,319 --> 00:07:16,739
key Jen can do it you can generate a

206
00:07:15,149 --> 00:07:19,769
root certificate and sign user and host

207
00:07:16,739 --> 00:07:22,429
certificates bless is Netflix's SSH CA

208
00:07:19,769 --> 00:07:26,069
that runs an AWS lambda and uses I am

209
00:07:22,429 --> 00:07:28,078
cashier's intercoms SSH CA uber has Pam

210
00:07:26,069 --> 00:07:30,629
you SSH that lets you use certificates

211
00:07:28,079 --> 00:07:34,049
to authorize sudo use and vault has an

212
00:07:30,629 --> 00:07:35,369
SSH secrets engine of course as CEO of

213
00:07:34,049 --> 00:07:37,378
small staff I'm kind of partial to our

214
00:07:35,369 --> 00:07:39,659
are our own tools which are also open up

215
00:07:37,379 --> 00:07:41,309
doors the step command-line tool makes

216
00:07:39,659 --> 00:07:43,919
it easy for users and hosts to get

217
00:07:41,309 --> 00:07:47,399
certificates from step CA which is an

218
00:07:43,919 --> 00:07:49,378
x.509 and SSH certificate authority we

219
00:07:47,399 --> 00:07:52,199
have a new release coming soon that will

220
00:07:49,379 --> 00:07:54,659
also configure OpenSSH and hosts and

221
00:07:52,199 --> 00:07:56,549
clients for you and automatically get a

222
00:07:54,659 --> 00:07:59,069
certificate from step CA when you tried

223
00:07:56,549 --> 00:08:01,769
to SSH to a host so this enables what I

224
00:07:59,069 --> 00:08:03,349
think is an ideal SSH flow so let me

225
00:08:01,769 --> 00:08:06,959
show you what that looks like real quick

226
00:08:03,349 --> 00:08:10,019
so users just use as such an SSH like

227
00:08:06,959 --> 00:08:11,610
normal typing SSH and a host name and we

228
00:08:10,019 --> 00:08:13,199
hook into the connection process with a

229
00:08:11,610 --> 00:08:16,139
proxy command to check if the user

230
00:08:13,199 --> 00:08:18,629
already has a certificate in SSH agent

231
00:08:16,139 --> 00:08:20,399
if the user has already logged in and

232
00:08:18,629 --> 00:08:23,219
has a certificate there connected like

233
00:08:20,399 --> 00:08:25,079
normal if not a browser tab is opened

234
00:08:23,219 --> 00:08:28,498
and a single sign-on flow is initiated

235
00:08:25,079 --> 00:08:29,849
with your identity provider so users log

236
00:08:28,499 --> 00:08:31,679
in with a familiar web-based single

237
00:08:29,849 --> 00:08:33,568
sign-on flow which makes it easy to

238
00:08:31,679 --> 00:08:34,919
leverage strong MFA and other advanced

239
00:08:33,568 --> 00:08:36,569
authentication capabilities your

240
00:08:34,919 --> 00:08:38,429
identity provider offers

241
00:08:36,570 --> 00:08:40,320
and adding and removing a user from your

242
00:08:38,429 --> 00:08:44,370
canonical identity provider also adds

243
00:08:40,320 --> 00:08:46,350
and removes SSH access once a user is

244
00:08:44,370 --> 00:08:47,820
logged in a new key pair is generated

245
00:08:46,350 --> 00:08:50,730
and they get a certificate from the CA

246
00:08:47,820 --> 00:08:53,610
using the assertion issued by single

247
00:08:50,730 --> 00:08:55,140
sign-on the certificates added to SSH

248
00:08:53,610 --> 00:08:57,330
agent and the connection perceives like

249
00:08:55,140 --> 00:08:58,890
normal so in this setup your private key

250
00:08:57,330 --> 00:08:59,490
and SSH certificate is like a browser

251
00:08:58,890 --> 00:09:00,990
cookie

252
00:08:59,490 --> 00:09:03,180
it's an ephemeral credential that never

253
00:09:00,990 --> 00:09:06,060
touches disk that authenticates you for

254
00:09:03,180 --> 00:09:08,699
one SSH session there's no magic here

255
00:09:06,060 --> 00:09:10,949
this is all using vanilla OpenSSH with a

256
00:09:08,700 --> 00:09:12,450
few lines of configuration the step tool

257
00:09:10,950 --> 00:09:14,160
chain makes it really easy to implement

258
00:09:12,450 --> 00:09:15,870
this flow but you can do it yourself

259
00:09:14,160 --> 00:09:17,579
without this without our tool chain

260
00:09:15,870 --> 00:09:20,310
we're just filling the last couple gaps

261
00:09:17,580 --> 00:09:21,660
to make it super easy so this all sounds

262
00:09:20,310 --> 00:09:23,459
kind of complicated but it's really not

263
00:09:21,660 --> 00:09:24,839
that bad and the important thing is

264
00:09:23,460 --> 00:09:26,340
users don't need to know any of this

265
00:09:24,840 --> 00:09:31,290
detail from their perspective they're

266
00:09:26,340 --> 00:09:32,910
just using single sign-on to SSH so step

267
00:09:31,290 --> 00:09:34,980
also includes a simple utility that

268
00:09:32,910 --> 00:09:36,990
configures an open SSH client to use

269
00:09:34,980 --> 00:09:38,910
this flow so when you're on step SSH

270
00:09:36,990 --> 00:09:40,650
config step will automatically grab your

271
00:09:38,910 --> 00:09:42,420
CA root certificate and configure your

272
00:09:40,650 --> 00:09:46,170
open SSH client to use certificate

273
00:09:42,420 --> 00:09:47,610
authentication so there are a few

274
00:09:46,170 --> 00:09:49,020
obstacles to using SSH certificate

275
00:09:47,610 --> 00:09:51,360
authentication unfortunately I don't

276
00:09:49,020 --> 00:09:52,199
have time to cut to go over these and

277
00:09:51,360 --> 00:09:55,350
running out of time so definitely

278
00:09:52,200 --> 00:09:59,370
download the slides for this or grab me

279
00:09:55,350 --> 00:10:00,210
later and I can answer any questions you

280
00:09:59,370 --> 00:10:02,040
do need to manage view things

281
00:10:00,210 --> 00:10:03,480
differently overall though certificate

282
00:10:02,040 --> 00:10:06,180
authentication is a better way to manage

283
00:10:03,480 --> 00:10:07,920
SSA SSH access it eliminates trust on

284
00:10:06,180 --> 00:10:08,939
first use it lets you connect us SH to

285
00:10:07,920 --> 00:10:10,170
your existing single sign-on the

286
00:10:08,940 --> 00:10:12,540
multi-factor all solution

287
00:10:10,170 --> 00:10:16,349
it makes SSH keys ephemeral makes retain

288
00:10:12,540 --> 00:10:17,610
easy and access expires automatically so

289
00:10:16,350 --> 00:10:19,500
that's it that's the sage certificate

290
00:10:17,610 --> 00:10:21,570
authentication makes us is easier to use

291
00:10:19,500 --> 00:10:23,010
easier to operate and more secure if

292
00:10:21,570 --> 00:10:24,600
you'd like to learn more we have a blog

293
00:10:23,010 --> 00:10:26,240
post with a lot of the same info in it

294
00:10:24,600 --> 00:10:28,950
check out step in steps yeah and github

295
00:10:26,240 --> 00:10:30,060
bit of shameless self-promotion if

296
00:10:28,950 --> 00:10:32,220
you want an easy button for all of this

297
00:10:30,060 --> 00:10:34,439
we also have a that also solves access

298
00:10:32,220 --> 00:10:36,330
control user management audit logging we

299
00:10:34,440 --> 00:10:38,550
have a SAS product coming out with this

300
00:10:36,330 --> 00:10:39,900
with a 30-day free trial so if anyone

301
00:10:38,550 --> 00:10:40,770
wants early access to that find me later

302
00:10:39,900 --> 00:10:42,750
I can make that happen

303
00:10:40,770 --> 00:10:44,819
other than that thanks so much for

304
00:10:42,750 --> 00:10:46,050
having me I'll be wandering around after

305
00:10:44,820 --> 00:10:47,890
this if you have any questions but I

306
00:10:46,050 --> 00:10:54,250
think I'm out of time

307
00:10:47,890 --> 00:10:54,250
[Applause]

