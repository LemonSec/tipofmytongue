1
00:00:00,000 --> 00:00:07,500
all right so welcome everybody see how

2
00:00:02,639 --> 00:00:09,780
to kill an AWS access key so my name is

3
00:00:07,500 --> 00:00:11,280
Benjamin Haring I lead the security

4
00:00:09,780 --> 00:00:13,739
engineering team at a company called

5
00:00:11,280 --> 00:00:16,799
ASAP and a couple of quick ground rules

6
00:00:13,740 --> 00:00:18,720
before we start going off copies of the

7
00:00:16,800 --> 00:00:22,380
slide for this deck are already uploaded

8
00:00:18,720 --> 00:00:25,080
as a PDF attachment to this sketch event

9
00:00:22,380 --> 00:00:26,669
for this particular talk so if there is

10
00:00:25,080 --> 00:00:29,009
anything that you missed didn't get the

11
00:00:26,670 --> 00:00:31,260
picture just go download the PDF slides

12
00:00:29,010 --> 00:00:34,559
also as you guys have been hearing we're

13
00:00:31,260 --> 00:00:37,110
using slide o with a hashtag b-sides SF

14
00:00:34,559 --> 00:00:39,180
2020 if there are questions that you

15
00:00:37,110 --> 00:00:40,440
have for me if I do my timing right

16
00:00:39,180 --> 00:00:43,260
there'll be like five minutes at the end

17
00:00:40,440 --> 00:00:45,030
for any questions and if we run out of

18
00:00:43,260 --> 00:00:46,680
time or you want to give me snarky

19
00:00:45,030 --> 00:00:49,110
remarks or all the rest of that I will

20
00:00:46,680 --> 00:00:51,000
be glad to read absolutely anything you

21
00:00:49,110 --> 00:00:53,039
want to throw at me at Twitter you can

22
00:00:51,000 --> 00:00:55,590
throw it at my handle which is off the

23
00:00:53,039 --> 00:01:00,469
side of the screen Thank You IMAX all

24
00:00:55,590 --> 00:01:02,940
right so let's talk AWS access keys so

25
00:01:00,469 --> 00:01:05,610
database access keys are probably the

26
00:01:02,940 --> 00:01:08,939
simplest and easiest way to understand

27
00:01:05,610 --> 00:01:10,830
authentication with the AWS api's gets

28
00:01:08,939 --> 00:01:12,689
your developer from nothing to being

29
00:01:10,830 --> 00:01:15,600
able to access everything in like 10

30
00:01:12,689 --> 00:01:17,189
seconds when you use AWS configure the

31
00:01:15,600 --> 00:01:20,820
first thing that it asks you for is hey

32
00:01:17,189 --> 00:01:24,240
what is your aid of us access key but

33
00:01:20,820 --> 00:01:27,179
they have some problems so they're

34
00:01:24,240 --> 00:01:29,009
static they hardly ever get rotated if

35
00:01:27,180 --> 00:01:30,720
they ever get rotated maybe they get

36
00:01:29,009 --> 00:01:32,670
rotated whenever you lose an employee

37
00:01:30,720 --> 00:01:35,759
and gain a new one they're always on

38
00:01:32,670 --> 00:01:38,729
disk in plain text and unless you've

39
00:01:35,759 --> 00:01:41,310
made you are I am policies very very

40
00:01:38,729 --> 00:01:43,200
particular if it ever gets compromised

41
00:01:41,310 --> 00:01:45,659
the attacker is able to use it from

42
00:01:43,200 --> 00:01:48,840
absolutely anywhere the AWS api's are

43
00:01:45,659 --> 00:01:51,180
really intentionally public so we also

44
00:01:48,840 --> 00:01:52,470
know that attackers are looking for them

45
00:01:51,180 --> 00:01:54,930
all the time this is a quick little

46
00:01:52,470 --> 00:01:56,820
experience that I did I encourage you to

47
00:01:54,930 --> 00:01:58,290
do this to yourself go to canary tokens

48
00:01:56,820 --> 00:02:00,779
out or again you can spin up a honey

49
00:01:58,290 --> 00:02:03,090
token which is a legit set of eight of

50
00:02:00,780 --> 00:02:05,250
us access keys and that as soon as

51
00:02:03,090 --> 00:02:06,899
somebody access them you get an alert so

52
00:02:05,250 --> 00:02:09,780
I make myself a fake set of credentials

53
00:02:06,899 --> 00:02:12,510
I commit it to a randomly brand-new

54
00:02:09,780 --> 00:02:14,160
github repo and twelve minutes later

55
00:02:12,510 --> 00:02:17,880
somebody's already trying

56
00:02:14,160 --> 00:02:19,829
go after them so how do we get rid of

57
00:02:17,880 --> 00:02:21,000
these static access keys where we know

58
00:02:19,830 --> 00:02:23,100
they're everywhere we know that they

59
00:02:21,000 --> 00:02:25,290
have some problem there's kind of three

60
00:02:23,100 --> 00:02:28,140
big ingredients that we need to be able

61
00:02:25,290 --> 00:02:30,179
to mix together in order to to finally

62
00:02:28,140 --> 00:02:33,299
kill these things off so the first

63
00:02:30,180 --> 00:02:36,480
ingredient that we need is the AWS

64
00:02:33,300 --> 00:02:38,670
security token service and the AWS

65
00:02:36,480 --> 00:02:41,070
security so conserv service is a native

66
00:02:38,670 --> 00:02:43,589
API that returns back to you these

67
00:02:41,070 --> 00:02:45,090
ephemeral access keys they can live

68
00:02:43,590 --> 00:02:47,580
anywhere for a couple of minutes up to

69
00:02:45,090 --> 00:02:49,350
about twelve hours and once their time

70
00:02:47,580 --> 00:02:50,790
to live is done they turn into a pumpkin

71
00:02:49,350 --> 00:02:53,040
poof go away

72
00:02:50,790 --> 00:02:55,049
which really dramatically reduces the

73
00:02:53,040 --> 00:02:57,299
blast radius for some compromised

74
00:02:55,050 --> 00:02:59,670
credentials but there's a bit of a

75
00:02:57,300 --> 00:03:02,130
bootstrapping issue because I need AWS

76
00:02:59,670 --> 00:03:04,309
credentials to be able to get AWS

77
00:03:02,130 --> 00:03:08,910
credentials so how do we solve that one

78
00:03:04,310 --> 00:03:11,460
well the second part of this that we

79
00:03:08,910 --> 00:03:13,950
need is the security assertion markup

80
00:03:11,460 --> 00:03:15,570
language or sam'l which is written in

81
00:03:13,950 --> 00:03:17,100
XML and you might be looking there and

82
00:03:15,570 --> 00:03:19,470
say couldn't you get a much more high

83
00:03:17,100 --> 00:03:21,299
res version of a sam'l assertion I said

84
00:03:19,470 --> 00:03:23,790
I could but if I have to look at that

85
00:03:21,300 --> 00:03:25,950
much XML at the same time my eyes start

86
00:03:23,790 --> 00:03:29,040
to bleed so I fuzzed it over for

87
00:03:25,950 --> 00:03:31,709
everyone's safety so for as much as I

88
00:03:29,040 --> 00:03:33,420
dislike actually looking at XML it's

89
00:03:31,709 --> 00:03:36,120
really functional it's been around for

90
00:03:33,420 --> 00:03:38,250
basically forever and the part that I

91
00:03:36,120 --> 00:03:40,290
find most helpful about sam'l is it

92
00:03:38,250 --> 00:03:43,080
doesn't actually require a direct

93
00:03:40,290 --> 00:03:44,880
network connection between the service

94
00:03:43,080 --> 00:03:47,430
that you're logging into and the

95
00:03:44,880 --> 00:03:50,790
identity provider that is validating the

96
00:03:47,430 --> 00:03:54,000
identity so let's walk through a sample

97
00:03:50,790 --> 00:03:55,620
sam'l login flows so one of the ways

98
00:03:54,000 --> 00:03:56,880
this most commonly works is the clients

99
00:03:55,620 --> 00:03:58,980
gonna go to the service that they're

100
00:03:56,880 --> 00:04:00,660
gonna try to log into the service is ah

101
00:03:58,980 --> 00:04:03,359
you're not logged in

102
00:04:00,660 --> 00:04:05,430
let me redirect you back to your

103
00:04:03,360 --> 00:04:07,920
identity provider so the client then

104
00:04:05,430 --> 00:04:11,100
goes back to the identity provider signs

105
00:04:07,920 --> 00:04:14,100
in and the identity provider provides a

106
00:04:11,100 --> 00:04:17,790
cryptographically signed sam'l assertion

107
00:04:14,100 --> 00:04:19,980
back to the client the client sends that

108
00:04:17,790 --> 00:04:22,620
on to the service who validates that

109
00:04:19,980 --> 00:04:24,840
that is in fact a valid sam'l assertion

110
00:04:22,620 --> 00:04:27,810
from the trusted identity provider and

111
00:04:24,840 --> 00:04:28,169
they login now what you don't see here

112
00:04:27,810 --> 00:04:30,660
any

113
00:04:28,170 --> 00:04:33,210
arrows that actually tie together the

114
00:04:30,660 --> 00:04:36,120
identity provider or the service there

115
00:04:33,210 --> 00:04:39,210
is a trust relationship that's implied

116
00:04:36,120 --> 00:04:40,890
because of the cryptographic signing of

117
00:04:39,210 --> 00:04:43,320
the assertion but you don't actually

118
00:04:40,890 --> 00:04:45,060
have to poke holes in your firewalls for

119
00:04:43,320 --> 00:04:47,940
these things to be talking directly to

120
00:04:45,060 --> 00:04:50,310
one another and the reason for that is

121
00:04:47,940 --> 00:04:52,560
when you're setting up the ability to

122
00:04:50,310 --> 00:04:55,650
sign and by sam'l one of the steps is

123
00:04:52,560 --> 00:04:57,690
going to be adding this metadata and

124
00:04:55,650 --> 00:04:59,130
giving it to the service and there's a

125
00:04:57,690 --> 00:05:00,780
lots of different things about this that

126
00:04:59,130 --> 00:05:02,580
says hey what are the types of things

127
00:05:00,780 --> 00:05:04,619
you should expect in a valid sam'l

128
00:05:02,580 --> 00:05:06,270
assertion how should you parse it where

129
00:05:04,620 --> 00:05:08,580
should you redirect people to that

130
00:05:06,270 --> 00:05:10,409
aren't actually signed in but the big

131
00:05:08,580 --> 00:05:13,229
chunk of this you can see is a big old

132
00:05:10,410 --> 00:05:14,760
certificate which is how the service is

133
00:05:13,230 --> 00:05:17,820
able to figure out that the sanno

134
00:05:14,760 --> 00:05:19,469
certian sent to it is in fact from a

135
00:05:17,820 --> 00:05:23,750
legitimate identity provider and not

136
00:05:19,470 --> 00:05:26,670
someone typing randomly into notepad so

137
00:05:23,750 --> 00:05:29,250
great we have the security token service

138
00:05:26,670 --> 00:05:33,090
we have sam'l and our third ingredient

139
00:05:29,250 --> 00:05:35,430
is the AWS native API assume roll with

140
00:05:33,090 --> 00:05:37,710
sam'l which mixes this together like

141
00:05:35,430 --> 00:05:40,980
peanut butter and jelly and all you got

142
00:05:37,710 --> 00:05:43,260
to do is send AWS a validly signed sam'l

143
00:05:40,980 --> 00:05:45,300
assertion and you get back security

144
00:05:43,260 --> 00:05:47,400
tokens service so we're done it's great

145
00:05:45,300 --> 00:05:50,040
in fact all you need to do is tell your

146
00:05:47,400 --> 00:05:52,080
engineers that they have to open up

147
00:05:50,040 --> 00:05:53,400
something like sam'l tracer to be able

148
00:05:52,080 --> 00:05:55,500
to figure out all of the network

149
00:05:53,400 --> 00:05:58,020
connections going back and forth click

150
00:05:55,500 --> 00:06:00,000
on the little icon for this ml figure

151
00:05:58,020 --> 00:06:02,219
out which one of these particular

152
00:06:00,000 --> 00:06:05,430
network requests have the sam'l

153
00:06:02,220 --> 00:06:08,180
assertion go over and pull out that drop

154
00:06:05,430 --> 00:06:12,060
it into your terminal pipe it into base

155
00:06:08,180 --> 00:06:14,190
64 so you got the base 64 coded sam'l

156
00:06:12,060 --> 00:06:16,140
version and then drop it at the end of

157
00:06:14,190 --> 00:06:18,480
this big old massive command and oh my

158
00:06:16,140 --> 00:06:20,640
gosh that's a lot of base 64 at which

159
00:06:18,480 --> 00:06:22,740
point they get the error that they

160
00:06:20,640 --> 00:06:24,930
didn't do that fast enough and the sam'l

161
00:06:22,740 --> 00:06:26,790
assertion has expired by which point all

162
00:06:24,930 --> 00:06:29,790
your engineers are saying isn't there a

163
00:06:26,790 --> 00:06:31,380
free trial version of GCP that doesn't

164
00:06:29,790 --> 00:06:35,130
make me need to do all this madness

165
00:06:31,380 --> 00:06:37,920
so obviously you need more than just

166
00:06:35,130 --> 00:06:40,590
those three random ingredients so what

167
00:06:37,920 --> 00:06:43,410
I'd like to do now is talk about how

168
00:06:40,590 --> 00:06:44,849
did this specifically at my company so I

169
00:06:43,410 --> 00:06:46,260
am gonna mention vendor names because

170
00:06:44,850 --> 00:06:47,790
those are the vendor names we news but

171
00:06:46,260 --> 00:06:50,849
it really doesn't matter what vendor

172
00:06:47,790 --> 00:06:54,480
names you happen to insert here so for

173
00:06:50,850 --> 00:06:56,790
example our identity provider at ASAP is

174
00:06:54,480 --> 00:06:58,680
octa you can use octa you can use

175
00:06:56,790 --> 00:07:01,170
whatever you want as long as it speaks

176
00:06:58,680 --> 00:07:02,910
sam'l you're fine and there's a thousand

177
00:07:01,170 --> 00:07:03,360
and one other identity providers out

178
00:07:02,910 --> 00:07:06,510
there

179
00:07:03,360 --> 00:07:09,000
geez sweeping federate duo has their own

180
00:07:06,510 --> 00:07:10,980
South gateway as long as it speaks sam'l

181
00:07:09,000 --> 00:07:13,140
which basically everything for the past

182
00:07:10,980 --> 00:07:16,230
15 years with enterprise single sign-on

183
00:07:13,140 --> 00:07:18,030
does you're good and then you also need

184
00:07:16,230 --> 00:07:20,400
something that's gonna take that and

185
00:07:18,030 --> 00:07:22,260
make that entire 10 set process a little

186
00:07:20,400 --> 00:07:25,229
bit more brainless and simple for your

187
00:07:22,260 --> 00:07:27,539
engineers so the command line tool that

188
00:07:25,230 --> 00:07:31,830
we ended up using and choosing ASAP is

189
00:07:27,540 --> 00:07:35,340
the u.s. octa however I cannot recommend

190
00:07:31,830 --> 00:07:37,560
that you also choose AWS octa in fact if

191
00:07:35,340 --> 00:07:39,989
the second line of a github projects

192
00:07:37,560 --> 00:07:42,060
readme is if you're not using this you

193
00:07:39,990 --> 00:07:45,090
probably don't want to start you

194
00:07:42,060 --> 00:07:47,760
probably don't want to start using it so

195
00:07:45,090 --> 00:07:50,219
don't use that one but I have to say I'm

196
00:07:47,760 --> 00:07:52,020
not actually all that worried that this

197
00:07:50,220 --> 00:07:54,150
particular command line tool is going on

198
00:07:52,020 --> 00:07:56,099
indefinite hiatus because now that we've

199
00:07:54,150 --> 00:07:59,159
already got all the plumbing that we

200
00:07:56,100 --> 00:08:01,620
need for the identity provider and I am

201
00:07:59,160 --> 00:08:03,960
roles that people are signing in to we

202
00:08:01,620 --> 00:08:05,640
can actually slip out with particular

203
00:08:03,960 --> 00:08:07,890
combined tool that what you're going to

204
00:08:05,640 --> 00:08:09,810
be using without too much difficulty so

205
00:08:07,890 --> 00:08:11,580
I'm gonna talk about this kind of as an

206
00:08:09,810 --> 00:08:13,440
example of what you can expect out of

207
00:08:11,580 --> 00:08:16,020
similar command-line tools besides

208
00:08:13,440 --> 00:08:20,730
you've listed down there there's many

209
00:08:16,020 --> 00:08:23,430
other other options and we use terraform

210
00:08:20,730 --> 00:08:25,710
as infrastructure has code I'm gonna use

211
00:08:23,430 --> 00:08:27,090
some of that up on the screen mostly to

212
00:08:25,710 --> 00:08:29,400
show you that is really not that hard

213
00:08:27,090 --> 00:08:31,289
you can do this in a handful of lines of

214
00:08:29,400 --> 00:08:33,329
terraform but you don't have to use

215
00:08:31,290 --> 00:08:35,550
terraform if all you like is clicking

216
00:08:33,330 --> 00:08:37,830
around manually the GUI you can still

217
00:08:35,549 --> 00:08:42,059
get a big security win without too much

218
00:08:37,830 --> 00:08:44,640
work so again I go through these a

219
00:08:42,059 --> 00:08:46,619
little bit faster and the you know oh

220
00:08:44,640 --> 00:08:48,420
shoot I miss a slide they wanted to take

221
00:08:46,620 --> 00:08:50,280
a picture every single one of these

222
00:08:48,420 --> 00:08:53,219
slides is already up and attached on

223
00:08:50,280 --> 00:08:54,420
sched all of the terraform code that you

224
00:08:53,220 --> 00:08:56,490
see here is already

225
00:08:54,420 --> 00:08:57,930
up in a public repo it's also modular

226
00:08:56,490 --> 00:08:59,970
eyes so you can just steal it whole

227
00:08:57,930 --> 00:09:01,589
scale and plug it right in you need to

228
00:08:59,970 --> 00:09:05,639
actually be writing things down as we go

229
00:09:01,589 --> 00:09:07,440
on down so the first step is setting up

230
00:09:05,639 --> 00:09:09,420
the actual identity provider and again

231
00:09:07,440 --> 00:09:10,949
I'm saying that we use octa and I'm

232
00:09:09,420 --> 00:09:12,899
gonna be a little bit handling because

233
00:09:10,949 --> 00:09:15,689
octa actually has pretty amazing

234
00:09:12,899 --> 00:09:17,699
step-by-step documentation but on a high

235
00:09:15,690 --> 00:09:18,149
level once you've set up the app you

236
00:09:17,699 --> 00:09:20,519
again

237
00:09:18,149 --> 00:09:21,839
you got to download that metadata XML

238
00:09:20,519 --> 00:09:23,610
that I showed you before shows the

239
00:09:21,839 --> 00:09:26,220
public certificate and some of those

240
00:09:23,610 --> 00:09:28,709
odds and ends and then literally more

241
00:09:26,220 --> 00:09:33,570
lines of terraform sets up that identity

242
00:09:28,709 --> 00:09:35,489
provider in AWS so once you've actually

243
00:09:33,570 --> 00:09:38,130
created that identity provider inside

244
00:09:35,490 --> 00:09:40,620
AWS you got to find the Arn copy it back

245
00:09:38,130 --> 00:09:41,250
into octa and that's all the setup you

246
00:09:40,620 --> 00:09:45,209
need to do

247
00:09:41,250 --> 00:09:47,820
seriously three slides now for octa they

248
00:09:45,209 --> 00:09:48,959
also want an api integration that's

249
00:09:47,820 --> 00:09:51,690
going to make your life a little bit

250
00:09:48,959 --> 00:09:53,638
easier this is a user that octa uses to

251
00:09:51,690 --> 00:09:56,699
go in and query and figure out okay what

252
00:09:53,639 --> 00:09:58,440
roles are assumable from this particular

253
00:09:56,699 --> 00:10:01,829
identity provider from this particular

254
00:09:58,440 --> 00:10:03,870
app to app and it makes the role

255
00:10:01,829 --> 00:10:06,300
assignment and and doing things in the

256
00:10:03,870 --> 00:10:08,579
octagoon a lot simpler and smoother and

257
00:10:06,300 --> 00:10:10,859
again a handful of lines of terraform

258
00:10:08,579 --> 00:10:12,719
here you got one resource to create the

259
00:10:10,860 --> 00:10:15,240
user another one to create and attach

260
00:10:12,720 --> 00:10:17,070
the policy and you can see there the

261
00:10:15,240 --> 00:10:19,110
rights that it needs is really nothing

262
00:10:17,070 --> 00:10:22,920
to radioactive at all a bunch of an IM

263
00:10:19,110 --> 00:10:24,870
reap the missions mostly and in irony of

264
00:10:22,920 --> 00:10:27,329
ironies in order to get rid of static

265
00:10:24,870 --> 00:10:29,550
access keys i have to give octave static

266
00:10:27,329 --> 00:10:31,500
access keys but let's not make the

267
00:10:29,550 --> 00:10:34,920
perfect be the enemy the good this can

268
00:10:31,500 --> 00:10:37,230
still be in that win here now once

269
00:10:34,920 --> 00:10:40,410
you've done that now you need to make

270
00:10:37,230 --> 00:10:42,990
the new IM rules that you want assumable

271
00:10:40,410 --> 00:10:45,269
from this sam'l provider and it might

272
00:10:42,990 --> 00:10:47,100
look a little bit more complicated than

273
00:10:45,269 --> 00:10:49,589
actually is here it still fits on a

274
00:10:47,100 --> 00:10:52,649
PowerPoint slide but the main chunk here

275
00:10:49,589 --> 00:10:56,220
that's important is the iam policy that

276
00:10:52,649 --> 00:10:59,699
states this this role assumable from

277
00:10:56,220 --> 00:11:01,649
that sam'l provider and if you attach

278
00:10:59,699 --> 00:11:03,899
that as the assumed role policy for

279
00:11:01,649 --> 00:11:07,680
whatever role you're using then you're

280
00:11:03,899 --> 00:11:08,590
good now again we're gonna go quick over

281
00:11:07,680 --> 00:11:10,420
Atos Act

282
00:11:08,590 --> 00:11:12,490
again I do not recommend to start with

283
00:11:10,420 --> 00:11:14,680
AWS octave but as an idea of how simple

284
00:11:12,490 --> 00:11:18,310
these types of command-line tools are

285
00:11:14,680 --> 00:11:21,550
installing it is like a line adding in

286
00:11:18,310 --> 00:11:23,739
the octave creds is one command it's

287
00:11:21,550 --> 00:11:25,930
gonna take the username and password and

288
00:11:23,740 --> 00:11:29,100
the configure information of what octa

289
00:11:25,930 --> 00:11:31,270
org stored in the Mac OS key chain and

290
00:11:29,100 --> 00:11:35,230
then you have to do a little bit of a

291
00:11:31,270 --> 00:11:37,120
tweaks to your AWS config 99% of the AWS

292
00:11:35,230 --> 00:11:39,850
config file is the same stuff that

293
00:11:37,120 --> 00:11:41,860
you've done all the time before you have

294
00:11:39,850 --> 00:11:43,870
roles you can have secondary roles that

295
00:11:41,860 --> 00:11:45,130
are assumed for other roles the main

296
00:11:43,870 --> 00:11:46,510
deal is there's needs to be like a

297
00:11:45,130 --> 00:11:49,570
little bit in there somewhere that

298
00:11:46,510 --> 00:11:51,430
specifically outlines the sam'l URL you

299
00:11:49,570 --> 00:11:53,410
can pull that out of the xml metadata

300
00:11:51,430 --> 00:11:54,520
that just points the command line tool

301
00:11:53,410 --> 00:11:56,980
to the right place

302
00:11:54,520 --> 00:12:00,579
that it should go to try to pull a valid

303
00:11:56,980 --> 00:12:02,740
sam'l assertion from now we haven't even

304
00:12:00,580 --> 00:12:04,120
talked about mfa yet another benefit of

305
00:12:02,740 --> 00:12:06,520
killing off static keys

306
00:12:04,120 --> 00:12:08,290
most of the command-line tools that you

307
00:12:06,520 --> 00:12:10,300
will see out and github all natively

308
00:12:08,290 --> 00:12:12,819
support duo push time-based one-time

309
00:12:10,300 --> 00:12:16,630
password some of the octave native apps

310
00:12:12,820 --> 00:12:18,520
not seen too much u2f but the way that a

311
00:12:16,630 --> 00:12:20,950
Turia's art that does that is during the

312
00:12:18,520 --> 00:12:24,579
first initial attempt to use the command

313
00:12:20,950 --> 00:12:27,130
it'll log into octa and keep session

314
00:12:24,580 --> 00:12:28,870
cookie so only the first time that your

315
00:12:27,130 --> 00:12:31,090
engineers are using this will they be

316
00:12:28,870 --> 00:12:32,710
prompted for an MFA push and then

317
00:12:31,090 --> 00:12:36,270
they're fine for however long you want

318
00:12:32,710 --> 00:12:39,430
to set the length of that session cookie

319
00:12:36,270 --> 00:12:42,100
and the way that it delivers these

320
00:12:39,430 --> 00:12:44,469
security token service credentials is by

321
00:12:42,100 --> 00:12:46,570
dropping them is in an earn it variable

322
00:12:44,470 --> 00:12:49,690
so for aw sake you can see the execution

323
00:12:46,570 --> 00:12:51,580
style there where you say AWS octa exact

324
00:12:49,690 --> 00:12:53,470
and one of our profile name you want to

325
00:12:51,580 --> 00:12:55,360
assume and if i pop that into

326
00:12:53,470 --> 00:12:57,790
environment you can see there's a whole

327
00:12:55,360 --> 00:12:59,560
bunch of AWS specific environment

328
00:12:57,790 --> 00:13:01,719
variables which are local to that

329
00:12:59,560 --> 00:13:04,719
command and disappear as soon as that

330
00:13:01,720 --> 00:13:08,530
command is done now if you're using the

331
00:13:04,720 --> 00:13:11,710
native AWS CLI moto3 Python library or

332
00:13:08,530 --> 00:13:13,780
any of the other AWS natively supported

333
00:13:11,710 --> 00:13:15,970
methods of working with the ABI they'll

334
00:13:13,780 --> 00:13:18,310
automatically check these very specific

335
00:13:15,970 --> 00:13:20,950
environment variables for the

336
00:13:18,310 --> 00:13:22,390
credentials that it needs to execute you

337
00:13:20,950 --> 00:13:24,940
also see that it has the

338
00:13:22,390 --> 00:13:26,920
in token and security token has the same

339
00:13:24,940 --> 00:13:28,780
thing one of those got legacy and

340
00:13:26,920 --> 00:13:30,490
deprecated and they just give it both to

341
00:13:28,780 --> 00:13:32,220
you just in case the tooling that your

342
00:13:30,490 --> 00:13:36,130
users is looking for the old one and

343
00:13:32,220 --> 00:13:38,950
this is this is how this worked out here

344
00:13:36,130 --> 00:13:41,860
at ASAP for our particular architecture

345
00:13:38,950 --> 00:13:44,230
so we're gonna start down in that lower

346
00:13:41,860 --> 00:13:47,560
left hand side there where if you start

347
00:13:44,230 --> 00:13:49,330
up with AWS octa it's gonna invoke the

348
00:13:47,560 --> 00:13:51,219
command it's gonna pull out the

349
00:13:49,330 --> 00:13:53,710
credentials from the Mac OS keychain

350
00:13:51,220 --> 00:13:57,040
send that into octa to get back that

351
00:13:53,710 --> 00:13:59,740
valid sam'l assertion and an eye SEP we

352
00:13:57,040 --> 00:14:01,420
had too many AWS accounts quite frankly

353
00:13:59,740 --> 00:14:03,880
so that we solved this problem by

354
00:14:01,420 --> 00:14:06,400
creating one more and this one that we

355
00:14:03,880 --> 00:14:08,620
created is a centralized identity

356
00:14:06,400 --> 00:14:11,590
account and this identity account has

357
00:14:08,620 --> 00:14:14,770
absolutely nothing in it besides I am

358
00:14:11,590 --> 00:14:16,690
role so the octa sam'l assertion is

359
00:14:14,770 --> 00:14:19,300
traded to the identity account for a

360
00:14:16,690 --> 00:14:21,430
valid security token service credentials

361
00:14:19,300 --> 00:14:23,439
for one of those central identity roles

362
00:14:21,430 --> 00:14:25,989
and then so you have one of those

363
00:14:23,440 --> 00:14:28,930
central identity roles you can cross

364
00:14:25,990 --> 00:14:31,420
account a role assume a role in any

365
00:14:28,930 --> 00:14:33,969
other AWS account that corresponds to

366
00:14:31,420 --> 00:14:35,740
that which then those security token

367
00:14:33,970 --> 00:14:38,290
service credentials are ejected is

368
00:14:35,740 --> 00:14:42,490
environment variables back into your

369
00:14:38,290 --> 00:14:45,130
original command now a little bit of a

370
00:14:42,490 --> 00:14:47,320
note here we found that at ASAP having

371
00:14:45,130 --> 00:14:49,480
this idea of a central identity account

372
00:14:47,320 --> 00:14:52,270
was really helpful for us it

373
00:14:49,480 --> 00:14:54,430
dramatically simplifies the number of

374
00:14:52,270 --> 00:14:57,160
octa role assignments made my helpdesk

375
00:14:54,430 --> 00:14:59,380
people much less confused it means that

376
00:14:57,160 --> 00:15:01,660
they can just take one octa group and

377
00:14:59,380 --> 00:15:03,070
assign it to one identity role and

378
00:15:01,660 --> 00:15:04,689
they're done it's really easy to

379
00:15:03,070 --> 00:15:07,180
understand rather than clicking through

380
00:15:04,690 --> 00:15:09,010
with every single one it's also been

381
00:15:07,180 --> 00:15:10,630
particularly helpful when it comes to

382
00:15:09,010 --> 00:15:13,540
tracking things down an incident

383
00:15:10,630 --> 00:15:16,450
response that I know that if any human

384
00:15:13,540 --> 00:15:18,640
being has taken any action anywhere in

385
00:15:16,450 --> 00:15:21,610
one of my AWS accounts there's always

386
00:15:18,640 --> 00:15:24,670
going to be some initial cloud trial

387
00:15:21,610 --> 00:15:26,740
authentication log that is inside the

388
00:15:24,670 --> 00:15:29,860
identity account that's been really

389
00:15:26,740 --> 00:15:32,740
helpful as a resource that said there's

390
00:15:29,860 --> 00:15:35,530
a big drawback as well normally security

391
00:15:32,740 --> 00:15:38,980
token service credentials can last

392
00:15:35,530 --> 00:15:41,500
to 12 hours but if you use I am roll

393
00:15:38,980 --> 00:15:43,840
chaining which is this I assume a roll

394
00:15:41,500 --> 00:15:46,870
and then I use that I am roll to assume

395
00:15:43,840 --> 00:15:48,130
yet another roll the max time to live

396
00:15:46,870 --> 00:15:52,480
for those security token service

397
00:15:48,130 --> 00:15:54,220
credentials is only an hour because AWS

398
00:15:52,480 --> 00:15:55,960
reasons I don't really know I just know

399
00:15:54,220 --> 00:15:57,640
that this has been a pain point

400
00:15:55,960 --> 00:16:00,070
occasionally when we've been working

401
00:15:57,640 --> 00:16:02,770
drinks through we've had processes that

402
00:16:00,070 --> 00:16:04,480
normally last longer than an hour or a

403
00:16:02,770 --> 00:16:06,280
number different times would be really

404
00:16:04,480 --> 00:16:08,710
nice to be able to just tell an engineer

405
00:16:06,280 --> 00:16:10,569
generate your creds once for the day and

406
00:16:08,710 --> 00:16:12,130
then don't need to worry about it we had

407
00:16:10,570 --> 00:16:13,960
to put a little bit more wrench time in

408
00:16:12,130 --> 00:16:16,150
for some of the scripting that we had

409
00:16:13,960 --> 00:16:18,550
for these types of longer running jobs

410
00:16:16,150 --> 00:16:20,110
to automatically update and renew those

411
00:16:18,550 --> 00:16:22,329
credentials just something to think

412
00:16:20,110 --> 00:16:23,920
about and consider as you might be

413
00:16:22,330 --> 00:16:26,650
building this out at your own orgs if

414
00:16:23,920 --> 00:16:28,750
you have a small handful of AWS accounts

415
00:16:26,650 --> 00:16:32,319
say five or less I might recommend that

416
00:16:28,750 --> 00:16:35,770
you go with just direct roll assumption

417
00:16:32,320 --> 00:16:37,780
rather than running and then some other

418
00:16:35,770 --> 00:16:40,810
odds and ends that were helpful from our

419
00:16:37,780 --> 00:16:42,880
roll out like an idiot's the first time

420
00:16:40,810 --> 00:16:45,969
I started doing this I tried to maintain

421
00:16:42,880 --> 00:16:48,130
this AWS config file manually don't do

422
00:16:45,970 --> 00:16:50,110
that that's dumb

423
00:16:48,130 --> 00:16:52,390
the number of different ways that you

424
00:16:50,110 --> 00:16:54,670
can screw up a config file by hand is

425
00:16:52,390 --> 00:16:56,589
pretty long and the more that we were

426
00:16:54,670 --> 00:16:58,150
able to automate this I mean it was a

427
00:16:56,589 --> 00:17:00,880
Python script we kind of clutched

428
00:16:58,150 --> 00:17:03,880
together in a couple of hours being able

429
00:17:00,880 --> 00:17:09,010
to standardize the same AWS config file

430
00:17:03,880 --> 00:17:10,599
across the entire organ you can have a

431
00:17:09,010 --> 00:17:12,790
whole bunch of different roles that

432
00:17:10,599 --> 00:17:15,188
aren't actually authorized for the

433
00:17:12,790 --> 00:17:18,699
person to use without hurting or harming

434
00:17:15,189 --> 00:17:20,620
anything and it just the standardization

435
00:17:18,699 --> 00:17:23,110
really helps ultimately we ended up with

436
00:17:20,619 --> 00:17:24,849
a couple of thousand lines of a standard

437
00:17:23,109 --> 00:17:27,639
AWS config file we push it out through

438
00:17:24,849 --> 00:17:30,040
Central Management works really smoothly

439
00:17:27,640 --> 00:17:33,040
I think the second lesson that we

440
00:17:30,040 --> 00:17:35,560
learned from this was as I'm was making

441
00:17:33,040 --> 00:17:38,530
these very specific I am roles for

442
00:17:35,560 --> 00:17:41,020
humans to assume I also needed to cover

443
00:17:38,530 --> 00:17:43,470
the use case of how to get AWS

444
00:17:41,020 --> 00:17:46,450
authorization on the ec2 and says and

445
00:17:43,470 --> 00:17:48,130
previously engineers were copying up

446
00:17:46,450 --> 00:17:48,790
sets of their static credentials that

447
00:17:48,130 --> 00:17:51,640
they had on there

448
00:17:48,790 --> 00:17:54,280
hop up to ec2 instances which ya again

449
00:17:51,640 --> 00:17:56,590
not great I'd really recommend that as

450
00:17:54,280 --> 00:17:59,379
you're building out these new I am roles

451
00:17:56,590 --> 00:18:00,490
assumable from sam'l make an equally

452
00:17:59,380 --> 00:18:04,060
privileged

453
00:18:00,490 --> 00:18:06,160
equally named instance I am role that

454
00:18:04,060 --> 00:18:09,490
are your engineers would be allowed to

455
00:18:06,160 --> 00:18:11,290
assign to the ec2 instances and is then

456
00:18:09,490 --> 00:18:14,410
accessible through the metadata URL

457
00:18:11,290 --> 00:18:17,440
again if you're using moto3 or the AWS

458
00:18:14,410 --> 00:18:19,060
CLI checking the metadata URL for ec2

459
00:18:17,440 --> 00:18:21,400
instances and getting security token

460
00:18:19,060 --> 00:18:23,649
services is all natively supportive they

461
00:18:21,400 --> 00:18:24,820
don't have to change thing and then I

462
00:18:23,650 --> 00:18:27,130
think the last lesson that I learned

463
00:18:24,820 --> 00:18:29,139
that was a little surprising is while I

464
00:18:27,130 --> 00:18:31,870
certainly went out and started pushing

465
00:18:29,140 --> 00:18:34,300
this as a security when about halfway

466
00:18:31,870 --> 00:18:35,919
through the rollout I started getting

467
00:18:34,300 --> 00:18:38,680
back pressure from the business to go

468
00:18:35,920 --> 00:18:41,140
even faster and the reason for that is

469
00:18:38,680 --> 00:18:42,940
they realized the benefits here of how

470
00:18:41,140 --> 00:18:45,010
much quicker this ended up being for

471
00:18:42,940 --> 00:18:47,290
onboarding I mean the old process was

472
00:18:45,010 --> 00:18:49,660
you got a new hire you open up a JIRA

473
00:18:47,290 --> 00:18:51,760
ticket yes I know sorry you poke them

474
00:18:49,660 --> 00:18:54,070
with a stick over slack until somebody

475
00:18:51,760 --> 00:18:55,810
maybe get stuff together oh but it's

476
00:18:54,070 --> 00:18:57,639
done manually and so maybe they didn't

477
00:18:55,810 --> 00:18:59,200
get the right group permissions that's

478
00:18:57,640 --> 00:19:01,390
all a thing of the past where an

479
00:18:59,200 --> 00:19:03,730
employee who's new hired automatically

480
00:19:01,390 --> 00:19:05,560
gets an octa account that opt account is

481
00:19:03,730 --> 00:19:07,750
automatically assigned to the right

482
00:19:05,560 --> 00:19:09,669
group that they're working in and then

483
00:19:07,750 --> 00:19:12,370
that group already automatically is

484
00:19:09,670 --> 00:19:15,130
authorized to the correct set of AWS

485
00:19:12,370 --> 00:19:17,010
rules so an employee within ten minutes

486
00:19:15,130 --> 00:19:20,800
of showing up and open up the laptops

487
00:19:17,010 --> 00:19:23,530
cuting commands in AWS and as a security

488
00:19:20,800 --> 00:19:25,180
person I like to flip that better which

489
00:19:23,530 --> 00:19:26,889
is the deep provisioning is also

490
00:19:25,180 --> 00:19:28,990
instance it's really nice to know that

491
00:19:26,890 --> 00:19:30,730
as soon as my helpdesk team shuts off

492
00:19:28,990 --> 00:19:33,040
the account and the central octa

493
00:19:30,730 --> 00:19:38,710
identity provider everything else with

494
00:19:33,040 --> 00:19:40,990
AWS is shut down too so what I have if

495
00:19:38,710 --> 00:19:42,610
you guys have questions for me for the

496
00:19:40,990 --> 00:19:45,010
little bit of time that we have left go

497
00:19:42,610 --> 00:19:46,149
ahead and open up slide oh that hashtag

498
00:19:45,010 --> 00:19:49,480
b-sides

499
00:19:46,150 --> 00:19:51,550
SF 2020 I'll answer as many questions as

500
00:19:49,480 --> 00:19:54,340
people have right now and if we run out

501
00:19:51,550 --> 00:19:56,320
of time or there's other things you want

502
00:19:54,340 --> 00:20:00,270
to ask me my contact information is on

503
00:19:56,320 --> 00:20:00,270
the screen thank you very much

504
00:20:03,560 --> 00:20:13,649
hey yeah I'll ask a question so someone

505
00:20:11,670 --> 00:20:15,690
just asked a question and maybe you want

506
00:20:13,650 --> 00:20:17,310
to speak to this in the context of your

507
00:20:15,690 --> 00:20:18,960
talk but someone just asked what are

508
00:20:17,310 --> 00:20:20,730
some best practices for AWS cloud

509
00:20:18,960 --> 00:20:23,940
security so maybe if there's something

510
00:20:20,730 --> 00:20:30,180
else about securing access keys you can

511
00:20:23,940 --> 00:20:32,760
think of sure a best practice for AWS

512
00:20:30,180 --> 00:20:36,360
cloud security I feel like that is an

513
00:20:32,760 --> 00:20:38,190
entire talk in and of itself log all the

514
00:20:36,360 --> 00:20:41,580
things patch all the things get

515
00:20:38,190 --> 00:20:42,960
visibility to all the things come back

516
00:20:41,580 --> 00:20:45,870
next year or maybe I'll do a talk on

517
00:20:42,960 --> 00:20:47,130
that one another question here how do

518
00:20:45,870 --> 00:20:50,129
you address a single point of failure

519
00:20:47,130 --> 00:20:52,380
scenario if the external sam'l IDP or

520
00:20:50,130 --> 00:20:55,110
identity provider api's go down for some

521
00:20:52,380 --> 00:20:57,300
reason as an example yeah I think this

522
00:20:55,110 --> 00:20:59,760
is absolutely valid so for our company

523
00:20:57,300 --> 00:21:01,980
our emergency break glass is the root

524
00:20:59,760 --> 00:21:04,260
account and in our particular situation

525
00:21:01,980 --> 00:21:06,480
the way that we've handled that is we've

526
00:21:04,260 --> 00:21:09,030
done kind of a two keys to launch new

527
00:21:06,480 --> 00:21:11,190
kind of deal where the SRE team has the

528
00:21:09,030 --> 00:21:12,870
passwords needed to log in as root and

529
00:21:11,190 --> 00:21:15,480
the security team has all of the

530
00:21:12,870 --> 00:21:17,790
multi-factor seeds so you can't just

531
00:21:15,480 --> 00:21:19,080
break glass because yeah I was a little

532
00:21:17,790 --> 00:21:21,690
bit annoyed with octave but like in

533
00:21:19,080 --> 00:21:24,060
cases of legitimate emergency we can

534
00:21:21,690 --> 00:21:26,040
still sign in and get into our counts I

535
00:21:24,060 --> 00:21:28,530
do think it's always good to think about

536
00:21:26,040 --> 00:21:30,780
the break glass scenario and quite

537
00:21:28,530 --> 00:21:33,960
frankly my company goes down a lot more

538
00:21:30,780 --> 00:21:35,280
than Arctic goes down so I it hasn't

539
00:21:33,960 --> 00:21:39,600
actually been a practical consideration

540
00:21:35,280 --> 00:21:41,700
that we've needed to worry about another

541
00:21:39,600 --> 00:21:44,070
question just came in any tips on

542
00:21:41,700 --> 00:21:50,220
rolling out these changes when each team

543
00:21:44,070 --> 00:21:52,080
has their own AWS accounts yeah that's a

544
00:21:50,220 --> 00:21:53,910
great question I think one of the things

545
00:21:52,080 --> 00:21:56,610
that I've also struggled with is this

546
00:21:53,910 --> 00:21:59,130
idea of kind of fragmentation of

547
00:21:56,610 --> 00:22:01,229
ownership where it's really nice if you

548
00:21:59,130 --> 00:22:03,660
have like one central SRE team that owns

549
00:22:01,230 --> 00:22:06,540
all the different things but I think the

550
00:22:03,660 --> 00:22:10,170
the thing that I would say is that even

551
00:22:06,540 --> 00:22:12,210
if you the ownership of the AWS accounts

552
00:22:10,170 --> 00:22:13,299
isn't is owned by lots of different

553
00:22:12,210 --> 00:22:14,499
teams

554
00:22:13,299 --> 00:22:16,720
even if you don't have that you're still

555
00:22:14,499 --> 00:22:19,059
gonna have specific team processes that

556
00:22:16,720 --> 00:22:21,190
need to adapt the new way anyway being

557
00:22:19,059 --> 00:22:23,440
proactive about your conversations with

558
00:22:21,190 --> 00:22:24,820
each team and understanding their AWS

559
00:22:23,440 --> 00:22:26,259
use cases and make sure they feel

560
00:22:24,820 --> 00:22:28,658
comfortable in everything they can do

561
00:22:26,259 --> 00:22:30,220
with the new one is definitely going to

562
00:22:28,659 --> 00:22:32,409
be a step in your right direction

563
00:22:30,220 --> 00:22:35,139
the easier that you can make this the

564
00:22:32,409 --> 00:22:36,759
better and if you need to help with from

565
00:22:35,139 --> 00:22:38,408
an authorization from multiple different

566
00:22:36,759 --> 00:22:40,119
teams to actually implement these

567
00:22:38,409 --> 00:22:42,100
changes then using something like

568
00:22:40,119 --> 00:22:44,199
terraform to make it modularized and

569
00:22:42,100 --> 00:22:45,219
simple to say look if you don't even

570
00:22:44,200 --> 00:22:48,609
want to think about it just run

571
00:22:45,220 --> 00:22:51,249
terraform apply and go the simpler that

572
00:22:48,609 --> 00:22:53,830
you can make this yeah I really would

573
00:22:51,249 --> 00:22:55,450
argue with everyone that I was trying to

574
00:22:53,830 --> 00:22:57,220
do with this look this is gonna make

575
00:22:55,450 --> 00:22:59,200
your lives easier it's not just the

576
00:22:57,220 --> 00:23:02,830
security one but it's gonna make your

577
00:22:59,200 --> 00:23:05,830
life's easier you'll get a lot of

578
00:23:02,830 --> 00:23:08,019
questions here man so someone just asked

579
00:23:05,830 --> 00:23:10,119
you mentioned about I am creds being

580
00:23:08,019 --> 00:23:12,909
used anywhere on the AWS API

581
00:23:10,119 --> 00:23:15,730
can you speak to limiting this and they

582
00:23:12,909 --> 00:23:17,379
provide an example of allowing you know

583
00:23:15,730 --> 00:23:22,419
Mia's API calls from within an office

584
00:23:17,379 --> 00:23:25,570
network or VPN yeah so if you want to go

585
00:23:22,419 --> 00:23:28,779
down this path there is ways in which to

586
00:23:25,570 --> 00:23:31,450
do this with iam conditionals where you

587
00:23:28,779 --> 00:23:33,759
can do things like here are the rights

588
00:23:31,450 --> 00:23:37,149
granted for these resources with these

589
00:23:33,759 --> 00:23:39,879
actions if the source IP is one of these

590
00:23:37,149 --> 00:23:41,979
source IP ranges or if the VP see that

591
00:23:39,879 --> 00:23:44,049
you're doing this from is one of these V

592
00:23:41,980 --> 00:23:45,220
PC ranges you got to be really

593
00:23:44,049 --> 00:23:46,779
intentional about these things though

594
00:23:45,220 --> 00:23:49,629
because it's obviously really easy to

595
00:23:46,779 --> 00:23:52,090
break stuff the defaults are always wide

596
00:23:49,629 --> 00:23:54,699
open allow it anywhere in the world but

597
00:23:52,090 --> 00:23:56,139
there are some fiddly bits that you can

598
00:23:54,700 --> 00:24:00,309
fiddle with if you want to make that in

599
00:23:56,139 --> 00:24:02,699
fact not be the case I think we have one

600
00:24:00,309 --> 00:24:05,649
more minute so maybe one more question

601
00:24:02,700 --> 00:24:07,570
where and how do you retain the master

602
00:24:05,649 --> 00:24:11,039
creds and is that done differently

603
00:24:07,570 --> 00:24:13,749
between security teams and devops teams

604
00:24:11,039 --> 00:24:16,239
so yeah I mentioned the master

605
00:24:13,749 --> 00:24:18,759
credential for an AWS account is the

606
00:24:16,239 --> 00:24:20,710
root user and the root user I don't even

607
00:24:18,759 --> 00:24:22,840
know if it's possible to make assumable

608
00:24:20,710 --> 00:24:25,600
from sam'l but I wouldn't recommend it

609
00:24:22,840 --> 00:24:26,500
even if you could that particular user

610
00:24:25,600 --> 00:24:28,959
again in my

611
00:24:26,500 --> 00:24:31,120
instance we split up the credit two sets

612
00:24:28,960 --> 00:24:33,520
of credentials needed to sign in so one

613
00:24:31,120 --> 00:24:36,969
team has the password in a dedicated

614
00:24:33,520 --> 00:24:40,090
encrypted offline password vault a

615
00:24:36,970 --> 00:24:42,220
second team has the MFA tokens needed in

616
00:24:40,090 --> 00:24:43,658
again those QA seeds are stored in a

617
00:24:42,220 --> 00:24:46,000
separate encrypted offline password

618
00:24:43,659 --> 00:24:47,500
vault and then only wouldn't those two

619
00:24:46,000 --> 00:24:51,190
things are able to go together can

620
00:24:47,500 --> 00:24:53,500
somebody sign in this route uh if you

621
00:24:51,190 --> 00:24:56,020
guys have more questions again Twitter

622
00:24:53,500 --> 00:24:57,700
handle email up on the screen please

623
00:24:56,020 --> 00:24:59,740
reach out I'm happy to answer whatever

624
00:24:57,700 --> 00:25:01,179
other questions you have thank you for

625
00:24:59,740 --> 00:25:03,299
your time everybody and let's go get

626
00:25:01,179 --> 00:25:03,299
lunch

