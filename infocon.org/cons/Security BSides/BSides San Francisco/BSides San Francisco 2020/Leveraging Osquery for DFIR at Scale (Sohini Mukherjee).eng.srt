1
00:00:00,000 --> 00:00:11,280
please join me in welcoming Sohini from

2
00:00:02,520 --> 00:00:12,929
Adobe ok so good afternoon everyone

3
00:00:11,280 --> 00:00:15,780
today we will be talking about

4
00:00:12,929 --> 00:00:18,270
leveraging OS query for da fire at scale

5
00:00:15,780 --> 00:00:24,420
and I am Sony and I'm a security

6
00:00:18,270 --> 00:00:25,050
researcher at Adobe so here's our agenda

7
00:00:24,420 --> 00:00:27,660
for today

8
00:00:25,050 --> 00:00:30,510
rapid Incident Response fast forensics

9
00:00:27,660 --> 00:00:33,600
and proactive threat hunting so why is a

10
00:00:30,510 --> 00:00:35,660
rapid or agile incident response plan

11
00:00:33,600 --> 00:00:38,640
saw relevant in today's threat landscape

12
00:00:35,660 --> 00:00:40,949
because understanding the anatomy of an

13
00:00:38,640 --> 00:00:43,260
attack or how a compromised took place

14
00:00:40,950 --> 00:00:45,809
is one of the most daunting tasks that

15
00:00:43,260 --> 00:00:47,670
incident responders face right I mean

16
00:00:45,809 --> 00:00:50,250
they have to put together pieces of the

17
00:00:47,670 --> 00:00:52,800
puzzle but the pieces might not even

18
00:00:50,250 --> 00:00:55,289
exist to begin with but there's good

19
00:00:52,800 --> 00:00:58,078
news because an attacker including a

20
00:00:55,289 --> 00:01:00,719
network or an infrastructure is bound to

21
00:00:58,079 --> 00:01:03,270
leave some changes somewhere maybe in

22
00:01:00,719 --> 00:01:07,380
the form of new user accounts some

23
00:01:03,270 --> 00:01:09,240
suspicious process execution etc etc now

24
00:01:07,380 --> 00:01:11,699
while pulling memory image from an

25
00:01:09,240 --> 00:01:13,770
infected endpoint and doing a full-blown

26
00:01:11,700 --> 00:01:16,020
forensic analysis with the tool like

27
00:01:13,770 --> 00:01:18,360
volatility is probably the most

28
00:01:16,020 --> 00:01:20,689
comprehensive fear but it's also very

29
00:01:18,360 --> 00:01:23,970
much time and resource intensive right

30
00:01:20,689 --> 00:01:26,250
so in today's talk will try to explore

31
00:01:23,970 --> 00:01:29,610
that if we can adopt an alternate

32
00:01:26,250 --> 00:01:31,650
mythology by leveraging an agent that

33
00:01:29,610 --> 00:01:33,600
might be already running in the systems

34
00:01:31,650 --> 00:01:37,860
and see if it can fast-track our

35
00:01:33,600 --> 00:01:40,530
investigation now there's certain

36
00:01:37,860 --> 00:01:42,689
category of artifacts that are of

37
00:01:40,530 --> 00:01:46,020
primary interest to incident responders

38
00:01:42,689 --> 00:01:49,500
while doing a light dis analysis like

39
00:01:46,020 --> 00:01:52,380
process execution any associated network

40
00:01:49,500 --> 00:01:54,090
sockets any new user accounts that the

41
00:01:52,380 --> 00:01:55,759
attacker might have created but forgot

42
00:01:54,090 --> 00:01:59,040
to delete on the way out

43
00:01:55,759 --> 00:02:01,439
any suspicious file system changes any

44
00:01:59,040 --> 00:02:03,509
weird kernel modules that were loaded in

45
00:02:01,439 --> 00:02:06,298
evidence of persistence in the form of

46
00:02:03,509 --> 00:02:08,459
cron jobs or scheduled tasks in evidence

47
00:02:06,299 --> 00:02:11,180
of code injection any non-standard

48
00:02:08,459 --> 00:02:13,740
running services and I can go on and on

49
00:02:11,180 --> 00:02:16,770
so today we'll be talking about

50
00:02:13,740 --> 00:02:19,530
love attack scenarios and will primarily

51
00:02:16,770 --> 00:02:22,320
pivot on couple of this artifacts as in

52
00:02:19,530 --> 00:02:24,570
process execution and associated network

53
00:02:22,320 --> 00:02:25,910
sockets and see if it can give us an

54
00:02:24,570 --> 00:02:28,380
head start into the investigation

55
00:02:25,910 --> 00:02:30,420
because when you're responding to a

56
00:02:28,380 --> 00:02:34,109
security incident time is really the

57
00:02:30,420 --> 00:02:35,700
essence right first a little bit of

58
00:02:34,110 --> 00:02:38,340
background on OS query

59
00:02:35,700 --> 00:02:41,070
why because query is going to be our

60
00:02:38,340 --> 00:02:43,170
primary tool based on which we'll

61
00:02:41,070 --> 00:02:47,010
discuss if we can detect those attack

62
00:02:43,170 --> 00:02:49,440
scenarios so the risk ready framework

63
00:02:47,010 --> 00:02:51,899
exposes the operating system in the form

64
00:02:49,440 --> 00:02:54,480
of sequel tables wherein you can run

65
00:02:51,900 --> 00:02:57,180
sequel statements like select star from

66
00:02:54,480 --> 00:02:59,910
processes and grab interesting artifacts

67
00:02:57,180 --> 00:03:02,280
from your system as you might be already

68
00:02:59,910 --> 00:03:04,680
aware it's a popular open source project

69
00:03:02,280 --> 00:03:07,140
initially spearheaded by Facebook and

70
00:03:04,680 --> 00:03:09,510
backed by a robust open source community

71
00:03:07,140 --> 00:03:12,269
there are many commercial vendors we

72
00:03:09,510 --> 00:03:14,130
were actively working on custom plugins

73
00:03:12,270 --> 00:03:17,160
and extensions to address many

74
00:03:14,130 --> 00:03:19,590
interesting use cases the query language

75
00:03:17,160 --> 00:03:22,620
is generic across all platforms whether

76
00:03:19,590 --> 00:03:24,960
you're running Windows servers are Linux

77
00:03:22,620 --> 00:03:27,240
distros or Mac OS laptops in your

78
00:03:24,960 --> 00:03:29,700
environment you can use the same generic

79
00:03:27,240 --> 00:03:32,640
query language to grab those interesting

80
00:03:29,700 --> 00:03:36,359
artifacts it's a lightweight agent it's

81
00:03:32,640 --> 00:03:39,959
a non intrusive run says read only and

82
00:03:36,360 --> 00:03:42,270
on user mode so let's look at a couple

83
00:03:39,960 --> 00:03:42,900
of voice query statement how does it

84
00:03:42,270 --> 00:03:45,480
look like

85
00:03:42,900 --> 00:03:48,630
so select star from logged in users

86
00:03:45,480 --> 00:03:51,030
select star from logout sessions and as

87
00:03:48,630 --> 00:03:53,310
is intuitive enough from the output it

88
00:03:51,030 --> 00:03:55,110
gives us information about the logged in

89
00:03:53,310 --> 00:03:58,920
user and the associated session

90
00:03:55,110 --> 00:04:00,900
information ok one more this time

91
00:03:58,920 --> 00:04:03,839
looking at the processes table and

92
00:04:00,900 --> 00:04:06,570
instead of specifying a white card we

93
00:04:03,840 --> 00:04:09,540
are mentioning our points of interest in

94
00:04:06,570 --> 00:04:12,180
the form of command line process ID and

95
00:04:09,540 --> 00:04:14,549
we are also grouping it by the top 10

96
00:04:12,180 --> 00:04:17,430
most active processes that's running in

97
00:04:14,550 --> 00:04:20,609
this system so I see there's 24

98
00:04:17,430 --> 00:04:23,880
instances of SVC house-training which is

99
00:04:20,608 --> 00:04:26,370
probably ok and I also do see that

100
00:04:23,880 --> 00:04:26,659
PowerShell is running in the system so

101
00:04:26,370 --> 00:04:28,880
when

102
00:04:26,660 --> 00:04:31,880
I'm investigating a potentially

103
00:04:28,880 --> 00:04:34,130
compromised Windows system and if I see

104
00:04:31,880 --> 00:04:39,170
PowerShell running in there I'd be very

105
00:04:34,130 --> 00:04:41,900
curious so let's keep looking further so

106
00:04:39,170 --> 00:04:44,150
the real power of voice query lies as we

107
00:04:41,900 --> 00:04:46,580
try writing more complex statements

108
00:04:44,150 --> 00:04:49,190
using join between the various tables

109
00:04:46,580 --> 00:04:50,990
like for example here we are joining the

110
00:04:49,190 --> 00:04:52,940
process and the process open socket

111
00:04:50,990 --> 00:04:55,370
stable and we are also mentioning a

112
00:04:52,940 --> 00:04:57,920
search criteria that give us the network

113
00:04:55,370 --> 00:05:00,620
connections that are not running on port

114
00:04:57,920 --> 00:05:02,930
80 or port 443 so I'll take a quick

115
00:05:00,620 --> 00:05:05,330
pause here and take a quick look at the

116
00:05:02,930 --> 00:05:06,470
output is there anything that stands

117
00:05:05,330 --> 00:05:14,240
right over to you

118
00:05:06,470 --> 00:05:16,670
any guesses PowerShell yep yeah so I see

119
00:05:14,240 --> 00:05:19,700
that PowerShell is running here and that

120
00:05:16,670 --> 00:05:22,400
is making ant viewed outbound connection

121
00:05:19,700 --> 00:05:24,289
to a random IP address over port 444 I

122
00:05:22,400 --> 00:05:26,659
mean it's not a random IP address

123
00:05:24,290 --> 00:05:28,460
because it's RFC 1918 and because I'm

124
00:05:26,660 --> 00:05:30,890
just trying to emulate the scenario in

125
00:05:28,460 --> 00:05:33,049
the local app environment we'll get the

126
00:05:30,890 --> 00:05:35,360
drift right so if at any point of time

127
00:05:33,050 --> 00:05:38,870
you see PowerShell is making such a

128
00:05:35,360 --> 00:05:41,690
random outbound connection it might be

129
00:05:38,870 --> 00:05:43,430
just might be a meter pretoria shell or

130
00:05:41,690 --> 00:05:44,270
a cobol strike beacon that's running in

131
00:05:43,430 --> 00:05:46,400
your environment

132
00:05:44,270 --> 00:05:48,770
now you might arguably say why would a

133
00:05:46,400 --> 00:05:51,710
smart attacker you something like a port

134
00:05:48,770 --> 00:05:54,380
4 4 4 I mean it's a red flag right away

135
00:05:51,710 --> 00:05:56,200
right I mean he would rather use port 80

136
00:05:54,380 --> 00:05:58,640
to gel into the regular traffic

137
00:05:56,200 --> 00:06:00,950
absolutely true but here's our

138
00:05:58,640 --> 00:06:03,080
discussion on defense in depth comes

139
00:06:00,950 --> 00:06:05,510
across where you would want to define

140
00:06:03,080 --> 00:06:10,180
various search criterias and detection

141
00:06:05,510 --> 00:06:14,419
logics to be able to track any scenarios

142
00:06:10,180 --> 00:06:17,210
ok so before going into our attack

143
00:06:14,419 --> 00:06:20,570
scenarios a quick high-level overview of

144
00:06:17,210 --> 00:06:22,669
our query deployment architecture so

145
00:06:20,570 --> 00:06:25,760
it's a classic client-server model with

146
00:06:22,669 --> 00:06:28,130
OS query agent enrolls or pulls the TLS

147
00:06:25,760 --> 00:06:31,430
endpoint response with a query and those

148
00:06:28,130 --> 00:06:34,010
query agent replies with the results so

149
00:06:31,430 --> 00:06:37,280
what is the TLS endpoint so collide

150
00:06:34,010 --> 00:06:38,780
fleet is one such example of an open

151
00:06:37,280 --> 00:06:42,440
source OS query man

152
00:06:38,780 --> 00:06:45,229
or fleet manager per se which serves

153
00:06:42,440 --> 00:06:47,810
both as a TLS end point as well as a UI

154
00:06:45,230 --> 00:06:50,389
and this is how the portal looks like

155
00:06:47,810 --> 00:06:52,880
but you can see a few of my systems have

156
00:06:50,389 --> 00:06:55,880
checked in and you can also deploy your

157
00:06:52,880 --> 00:07:00,650
query packs where this portal and run it

158
00:06:55,880 --> 00:07:03,500
across your environment so in a nutshell

159
00:07:00,650 --> 00:07:07,700
those query agent interacts with the

160
00:07:03,500 --> 00:07:10,610
fleet manager and in addition we are

161
00:07:07,700 --> 00:07:13,130
also sending over the logs to sim for

162
00:07:10,610 --> 00:07:15,710
further analysis if our proactive threat

163
00:07:13,130 --> 00:07:19,460
hunting our ad-hoc artifact collection

164
00:07:15,710 --> 00:07:21,680
during an incident investigation so

165
00:07:19,460 --> 00:07:25,930
without further ado let's talk about our

166
00:07:21,680 --> 00:07:30,830
first attack scenario and on River shell

167
00:07:25,930 --> 00:07:32,660
so here's how our attack unfolds see a

168
00:07:30,830 --> 00:07:35,030
phishing email has been delivered to

169
00:07:32,660 --> 00:07:37,090
your employees which has a malicious

170
00:07:35,030 --> 00:07:39,440
link embedded into it

171
00:07:37,090 --> 00:07:41,179
unfortunately unfair unsuspecting

172
00:07:39,440 --> 00:07:43,070
employee hasn't been able to detect the

173
00:07:41,180 --> 00:07:45,919
phishing email and has clicked on the

174
00:07:43,070 --> 00:07:48,380
malicious link hopefully soft team has

175
00:07:45,919 --> 00:07:52,099
been alerted and incident response kicks

176
00:07:48,380 --> 00:07:54,650
in so here's what happens under the hood

177
00:07:52,100 --> 00:07:56,960
on the right hand side is the attacker

178
00:07:54,650 --> 00:08:00,890
box and on the left hand side is the

179
00:07:56,960 --> 00:08:03,169
victim machine so that link over here is

180
00:08:00,890 --> 00:08:05,599
the malicious link that was delivered by

181
00:08:03,169 --> 00:08:09,080
the phishing email which when clicked

182
00:08:05,600 --> 00:08:10,669
some MSHDA magic happens which maps to

183
00:08:09,080 --> 00:08:13,669
the mitre attack technique t1

184
00:08:10,669 --> 00:08:16,580
one-seven-zero a meterpreter session is

185
00:08:13,669 --> 00:08:19,190
now open under Decker box now if this

186
00:08:16,580 --> 00:08:22,669
attack looked simple enough to you I

187
00:08:19,190 --> 00:08:25,430
mean let me reassure you it's very

188
00:08:22,669 --> 00:08:28,909
popular among many apt groups I mean a

189
00:08:25,430 --> 00:08:31,010
tough favorite among apt thirty-two so

190
00:08:28,910 --> 00:08:33,860
let's see I mean can we detect such a

191
00:08:31,010 --> 00:08:35,960
scenario so by using such a noise query

192
00:08:33,860 --> 00:08:38,659
statement which looks into the process

193
00:08:35,960 --> 00:08:40,580
and process open sockets tables I mean a

194
00:08:38,659 --> 00:08:42,919
similar query where that we discussed

195
00:08:40,580 --> 00:08:44,720
few slides back it's possible to track

196
00:08:42,919 --> 00:08:47,290
the network connection that is just

197
00:08:44,720 --> 00:08:52,430
being made for the meterpreter shell

198
00:08:47,290 --> 00:08:55,040
session to open one more this time

199
00:08:52,430 --> 00:08:58,069
religious fear and this maps to the

200
00:08:55,040 --> 00:09:00,439
mitotic technique T 1 1 1 7 and this is

201
00:08:58,070 --> 00:09:03,320
also known as a squib lead to kind of

202
00:09:00,440 --> 00:09:05,300
attack so this are like proxy execution

203
00:09:03,320 --> 00:09:08,570
of malicious code that we are talking

204
00:09:05,300 --> 00:09:11,599
about again at of favorite among apt 32

205
00:09:08,570 --> 00:09:14,540
apt 19 deep panda because it lets

206
00:09:11,600 --> 00:09:16,820
attackers evade detection vipers

207
00:09:14,540 --> 00:09:20,000
application whitelisting sun and so

208
00:09:16,820 --> 00:09:22,790
forth so a meterpreter session is open

209
00:09:20,000 --> 00:09:25,520
on the attacker box and in addition to

210
00:09:22,790 --> 00:09:27,800
detecting the network connection we also

211
00:09:25,520 --> 00:09:30,620
got a hang of the process that might be

212
00:09:27,800 --> 00:09:33,439
responsible for this compromise take a

213
00:09:30,620 --> 00:09:36,830
note of the process its PID to annotate

214
00:09:33,440 --> 00:09:39,140
so let's look into a woman what did this

215
00:09:36,830 --> 00:09:41,480
process do what it is execute

216
00:09:39,140 --> 00:09:44,180
and what better please stand to look at

217
00:09:41,480 --> 00:09:46,130
the command line execution now by

218
00:09:44,180 --> 00:09:48,529
looking at by running this particular

219
00:09:46,130 --> 00:09:50,600
risks query statement sure enough we see

220
00:09:48,529 --> 00:09:53,029
a huge blob of malicious PowerShell

221
00:09:50,600 --> 00:09:57,020
script that just executed on the victim

222
00:09:53,029 --> 00:10:00,170
system one more and last of a reversal

223
00:09:57,020 --> 00:10:03,040
scenario on DLL injection so this maps

224
00:10:00,170 --> 00:10:05,329
to the mitre attack technique t105 v

225
00:10:03,040 --> 00:10:07,400
submitter british session is open on the

226
00:10:05,330 --> 00:10:11,000
attacker box and what the attacker did

227
00:10:07,400 --> 00:10:13,520
here is been able to drop a malicious

228
00:10:11,000 --> 00:10:18,380
DLL MSF tor DLL into the downloads

229
00:10:13,520 --> 00:10:20,569
folder of the victim box so we are able

230
00:10:18,380 --> 00:10:23,140
to track the network connection that was

231
00:10:20,570 --> 00:10:25,790
open because of the meterpreter session

232
00:10:23,140 --> 00:10:28,209
so far so good but there is another

233
00:10:25,790 --> 00:10:31,640
interesting artifact that we notice here

234
00:10:28,209 --> 00:10:34,279
run dll which is a system windows system

235
00:10:31,640 --> 00:10:38,089
binary is making an outbound connection

236
00:10:34,279 --> 00:10:39,709
to a random IP address over port 444 why

237
00:10:38,089 --> 00:10:42,579
would that happen why would a system

238
00:10:39,709 --> 00:10:46,729
binary make a viewed outbound connection

239
00:10:42,579 --> 00:10:48,170
let's keep looking further so what place

240
00:10:46,730 --> 00:10:49,880
should we look at let's look at the

241
00:10:48,170 --> 00:10:51,860
process tree right I mean which is the

242
00:10:49,880 --> 00:10:54,350
parent process which might have spawned

243
00:10:51,860 --> 00:10:57,470
run DLL and we need to make this

244
00:10:54,350 --> 00:11:00,680
outbound connection tracking the process

245
00:10:57,470 --> 00:11:02,900
tree and taken note of the process ID we

246
00:11:00,680 --> 00:11:05,180
notice that it's notepad dot exe and

247
00:11:02,900 --> 00:11:05,920
calc taught exe which has spawned run

248
00:11:05,180 --> 00:11:07,839
DLL

249
00:11:05,920 --> 00:11:10,709
which in turn made that outdoor network

250
00:11:07,839 --> 00:11:13,929
connection red-flag right away right now

251
00:11:10,709 --> 00:11:16,748
notepad and calc are just like old copy

252
00:11:13,929 --> 00:11:19,238
book examples for demo purpose but you

253
00:11:16,749 --> 00:11:21,579
get the drift one second so what the

254
00:11:19,239 --> 00:11:23,980
attacker did over here that the attacker

255
00:11:21,579 --> 00:11:26,199
was able to inject himself as an

256
00:11:23,980 --> 00:11:28,540
injector malicious DLL into two

257
00:11:26,199 --> 00:11:31,929
apparently innocuous processes notepad

258
00:11:28,540 --> 00:11:36,129
dot exe and Cal dot exe to evade

259
00:11:31,929 --> 00:11:38,350
detection so another threat hunting 101

260
00:11:36,129 --> 00:11:42,040
for you if at any point of time you'll

261
00:11:38,350 --> 00:11:44,230
see a system binary like run DLL is

262
00:11:42,040 --> 00:11:47,199
making an outbound network connection

263
00:11:44,230 --> 00:11:49,720
it's probably something that qualifies

264
00:11:47,199 --> 00:11:53,919
as an anomaly and needs further

265
00:11:49,720 --> 00:11:57,249
investigation on so now that we got a

266
00:11:53,919 --> 00:12:00,129
hang of the process which I mean how the

267
00:11:57,249 --> 00:12:01,809
compromise might have taken place let's

268
00:12:00,129 --> 00:12:04,179
see if we can drill down further on that

269
00:12:01,809 --> 00:12:06,279
particular process so drilling down on

270
00:12:04,179 --> 00:12:09,160
process ID three eight four four which

271
00:12:06,279 --> 00:12:11,559
was of Cal tour TX see we can list the

272
00:12:09,160 --> 00:12:13,719
militia I mean the DLL that that is

273
00:12:11,559 --> 00:12:17,019
being loaded by this particular process

274
00:12:13,720 --> 00:12:20,319
and sure enough we see the malicious DLL

275
00:12:17,019 --> 00:12:23,019
MSF tor DLL being loaded from the

276
00:12:20,319 --> 00:12:26,410
Downloads folder another red flag right

277
00:12:23,019 --> 00:12:29,019
away so now that we got a hang of the

278
00:12:26,410 --> 00:12:32,169
compromise how it might have taken place

279
00:12:29,019 --> 00:12:34,569
it's time to gather some more evidence

280
00:12:32,169 --> 00:12:37,029
on time on execution and by leveraging

281
00:12:34,569 --> 00:12:39,939
the file table it's possible to grab

282
00:12:37,029 --> 00:12:42,189
some file system metadata in the form of

283
00:12:39,939 --> 00:12:46,929
M time modification time SATA in

284
00:12:42,189 --> 00:12:49,569
creation time and birth time the next of

285
00:12:46,929 --> 00:12:52,539
four attack scenarios on crypto mining

286
00:12:49,569 --> 00:12:55,029
so there was a time when ransomware was

287
00:12:52,539 --> 00:12:57,789
rage among the bad guys and these days

288
00:12:55,029 --> 00:13:01,239
it's crypto mining so here's how our

289
00:12:57,789 --> 00:13:03,850
attack unfolds over here so our attacker

290
00:13:01,239 --> 00:13:07,889
has been able to grab some credentials

291
00:13:03,850 --> 00:13:10,980
which were hard-coded in source code and

292
00:13:07,889 --> 00:13:13,629
inadvertently committed to a github repo

293
00:13:10,980 --> 00:13:15,449
so the attacker authenticates with the

294
00:13:13,629 --> 00:13:18,129
stolen credentials the tacker

295
00:13:15,449 --> 00:13:18,490
establishes alternate access by creating

296
00:13:18,129 --> 00:13:21,190
a new

297
00:13:18,490 --> 00:13:23,950
user account the new user now installs

298
00:13:21,190 --> 00:13:26,640
and starts some minor and the minor

299
00:13:23,950 --> 00:13:28,899
establishes connection to its pool a

300
00:13:26,640 --> 00:13:32,560
fully-stocked team has been alerted and

301
00:13:28,899 --> 00:13:36,640
incident response kicks in so here's how

302
00:13:32,560 --> 00:13:38,649
if we deploy the OS query statement

303
00:13:36,640 --> 00:13:42,790
again leveraging the process and process

304
00:13:38,649 --> 00:13:45,339
open sockets query from the collide

305
00:13:42,790 --> 00:13:48,339
fleet portal it's possible to track the

306
00:13:45,339 --> 00:13:52,209
malicious process minor D that is making

307
00:13:48,339 --> 00:13:54,339
the suspicious network connection but we

308
00:13:52,209 --> 00:13:56,949
are also sending over the logs to sim

309
00:13:54,339 --> 00:14:01,930
for further analysis and this is how the

310
00:13:56,950 --> 00:14:04,480
attack unfolded on illogically so here's

311
00:14:01,930 --> 00:14:07,810
exactly where the attacker had created a

312
00:14:04,480 --> 00:14:10,839
new user account and this is a new user

313
00:14:07,810 --> 00:14:14,619
account which is Centaurus user and now

314
00:14:10,839 --> 00:14:19,260
the new user installs and starts running

315
00:14:14,620 --> 00:14:22,510
the miner now from a detection

316
00:14:19,260 --> 00:14:24,700
perspective this is indeed the process

317
00:14:22,510 --> 00:14:27,520
that's running with no system package

318
00:14:24,700 --> 00:14:29,770
and last but not the least one of the

319
00:14:27,520 --> 00:14:32,680
tell-tale signs of a crypto mining kind

320
00:14:29,770 --> 00:14:34,899
of attack is a huge glob of DNS events

321
00:14:32,680 --> 00:14:42,040
where the miner is trying to reach out

322
00:14:34,899 --> 00:14:44,649
to its mining pool so the next of our

323
00:14:42,040 --> 00:14:48,540
attack scenarios on container exploit

324
00:14:44,649 --> 00:14:51,459
attempts so running containers

325
00:14:48,540 --> 00:14:54,040
misconfigured containers like privileged

326
00:14:51,459 --> 00:14:57,089
containers continuous running without

327
00:14:54,040 --> 00:15:00,099
security profiles like a farmer

328
00:14:57,089 --> 00:15:02,920
containers running as root can lead to

329
00:15:00,100 --> 00:15:06,100
really vulnerable environments right so

330
00:15:02,920 --> 00:15:09,160
an attacker might be able to exploit an

331
00:15:06,100 --> 00:15:11,800
application vulnerability and compromise

332
00:15:09,160 --> 00:15:14,560
a certain container and with enough

333
00:15:11,800 --> 00:15:16,479
elevated privileges the attacker might

334
00:15:14,560 --> 00:15:19,060
be able to break out of the container

335
00:15:16,480 --> 00:15:21,480
and in fact the underlying host kernel

336
00:15:19,060 --> 00:15:24,670
space so from there on it's

337
00:15:21,480 --> 00:15:27,760
comparatively simple for the attacker to

338
00:15:24,670 --> 00:15:30,410
be collateral movement and grab a

339
00:15:27,760 --> 00:15:33,290
foothold into all the containers that

340
00:15:30,410 --> 00:15:36,740
during the same host kernel-space so

341
00:15:33,290 --> 00:15:39,860
scary situation right scary undesirable

342
00:15:36,740 --> 00:15:42,319
situation now container forensics is

343
00:15:39,860 --> 00:15:44,779
challenging one of the many reasons

344
00:15:42,319 --> 00:15:47,000
being how container is supposed to be

345
00:15:44,779 --> 00:15:49,970
it's supposed to be short-lived right

346
00:15:47,000 --> 00:15:52,699
and container forensics is a whole new

347
00:15:49,970 --> 00:15:55,370
topic of discussion for a different T

348
00:15:52,699 --> 00:15:58,250
but considering the time that we have

349
00:15:55,370 --> 00:16:00,079
left today I mean we have today for this

350
00:15:58,250 --> 00:16:02,300
discussion let's see if we can

351
00:16:00,079 --> 00:16:05,420
proactively audit against the security

352
00:16:02,300 --> 00:16:09,019
flaws our security misconfigurations and

353
00:16:05,420 --> 00:16:13,339
be able to stop before any compromise

354
00:16:09,019 --> 00:16:16,279
takes place so using OS query it's

355
00:16:13,339 --> 00:16:19,629
possible to query the docker domain like

356
00:16:16,279 --> 00:16:23,149
a relational database and we can run

357
00:16:19,629 --> 00:16:25,670
queries like this one which audits for

358
00:16:23,149 --> 00:16:27,040
any privileged containers that might be

359
00:16:25,670 --> 00:16:30,889
running in your environment

360
00:16:27,040 --> 00:16:34,730
one more on environment variables so see

361
00:16:30,889 --> 00:16:37,009
if credentials are being put into your

362
00:16:34,730 --> 00:16:40,069
environment variables inadvertently like

363
00:16:37,009 --> 00:16:42,529
keys or or passwords it's possible to

364
00:16:40,069 --> 00:16:45,680
audit against all scenarios and prevent

365
00:16:42,529 --> 00:16:47,899
sensitive information disclosure fun

366
00:16:45,680 --> 00:16:49,969
more detecting containers that's running

367
00:16:47,899 --> 00:16:54,319
without any security profiles and

368
00:16:49,970 --> 00:16:56,779
containers running has route and we can

369
00:16:54,319 --> 00:16:59,209
always write more complex statements

370
00:16:56,779 --> 00:17:01,550
like this one which is proactively

371
00:16:59,209 --> 00:17:04,188
auditing for docker open sockets and

372
00:17:01,550 --> 00:17:05,709
here's where a quick note of outlier

373
00:17:04,189 --> 00:17:08,600
analysis knowing your environment

374
00:17:05,709 --> 00:17:11,659
knowing our baseline of known good

375
00:17:08,599 --> 00:17:13,789
behavior right so if we see a newly seen

376
00:17:11,659 --> 00:17:17,059
process that that's running out of a

377
00:17:13,789 --> 00:17:19,429
certain socket which is say also running

378
00:17:17,059 --> 00:17:22,849
out of fir non-standard file path and

379
00:17:19,429 --> 00:17:24,650
making an unexpected outbound network

380
00:17:22,849 --> 00:17:27,649
connection reaching out to the Internet

381
00:17:24,650 --> 00:17:29,299
that is not necessarily malicious but

382
00:17:27,650 --> 00:17:32,150
that just gives you an interesting

383
00:17:29,299 --> 00:17:34,220
subset of information to interest to get

384
00:17:32,150 --> 00:17:36,620
further on and you never know you might

385
00:17:34,220 --> 00:17:40,030
get that all-important clue that might

386
00:17:36,620 --> 00:17:44,709
lead you to a compromise to environment

387
00:17:40,030 --> 00:17:47,980
but say what of none of this secure

388
00:17:44,710 --> 00:17:51,070
flaws were detected and an attacker been

389
00:17:47,980 --> 00:17:53,289
able to compromise a container let's try

390
00:17:51,070 --> 00:17:55,870
it and think in the attacker footsteps

391
00:17:53,289 --> 00:17:58,450
what would the attacker do next maybe

392
00:17:55,870 --> 00:18:00,939
who tried to pull malicious further

393
00:17:58,450 --> 00:18:03,490
malicious code into the container to

394
00:18:00,940 --> 00:18:06,309
escalate privileges he might want to

395
00:18:03,490 --> 00:18:10,029
install and start running a miner and he

396
00:18:06,309 --> 00:18:12,309
might just use some some tools like

397
00:18:10,029 --> 00:18:15,490
dublicate or coal to pull those

398
00:18:12,309 --> 00:18:17,889
malicious code now knowing our runtime

399
00:18:15,490 --> 00:18:20,260
environment what is the known good

400
00:18:17,890 --> 00:18:22,659
baseline would help you because if

401
00:18:20,260 --> 00:18:24,610
dublicate or curl is something that is

402
00:18:22,659 --> 00:18:26,860
not expected to run you're in your

403
00:18:24,610 --> 00:18:29,080
container runtime environment again

404
00:18:26,860 --> 00:18:31,990
qualifies for an anomaly right away

405
00:18:29,080 --> 00:18:34,029
red flag right away so by deploying such

406
00:18:31,990 --> 00:18:36,730
a waste query statement we might be able

407
00:18:34,029 --> 00:18:39,730
to track the command line execution and

408
00:18:36,730 --> 00:18:43,779
see if and obligate was used to pull

409
00:18:39,730 --> 00:18:46,090
further malicious code now as we

410
00:18:43,779 --> 00:18:48,039
approach to as a concluding part of this

411
00:18:46,090 --> 00:18:51,220
talk I would want to reiterate this is

412
00:18:48,039 --> 00:18:53,320
not just limited to s query I mean all

413
00:18:51,220 --> 00:18:55,899
of whatever we had discussed we can

414
00:18:53,320 --> 00:18:58,629
totally extrapolate and applied the

415
00:18:55,899 --> 00:19:00,129
scenarios into any commercial idea tools

416
00:18:58,630 --> 00:19:02,919
that you might be running in your

417
00:19:00,130 --> 00:19:05,350
environment or any open source framework

418
00:19:02,919 --> 00:19:08,260
so this is some of the references that I

419
00:19:05,350 --> 00:19:10,539
have found very useful and just as an

420
00:19:08,260 --> 00:19:13,480
example for example the third one the

421
00:19:10,539 --> 00:19:15,640
github repo from tear seller is a very

422
00:19:13,480 --> 00:19:17,529
good resource which Maps the micro

423
00:19:15,640 --> 00:19:20,140
attack techniques to oils query

424
00:19:17,529 --> 00:19:23,080
statements for example is we see hole

425
00:19:20,140 --> 00:19:25,419
start exe is a system binary Windows

426
00:19:23,080 --> 00:19:28,210
system binary which should have services

427
00:19:25,419 --> 00:19:30,760
dot exe as a parent process now if you

428
00:19:28,210 --> 00:19:33,010
suddenly see that Explorer dot exe is

429
00:19:30,760 --> 00:19:35,289
spawning as we see host RT X in your

430
00:19:33,010 --> 00:19:37,809
environment in a certain system it is

431
00:19:35,289 --> 00:19:40,539
possibly a malicious payload that is

432
00:19:37,809 --> 00:19:42,879
just trying to evade detection or bypass

433
00:19:40,539 --> 00:19:45,549
application whitelisting so just as an

434
00:19:42,880 --> 00:19:49,000
example I mean it is agnostic of tool

435
00:19:45,549 --> 00:19:51,070
goes beyond OS query and key and can be

436
00:19:49,000 --> 00:19:53,950
applied to any detection logic that you

437
00:19:51,070 --> 00:19:56,500
might be using your environment so it's

438
00:19:53,950 --> 00:19:57,090
basically unleashing the power of open

439
00:19:56,500 --> 00:20:00,060
source

440
00:19:57,090 --> 00:20:03,510
and hopefully together as a community we

441
00:20:00,060 --> 00:20:06,570
can work together and we a step ahead of

442
00:20:03,510 --> 00:20:10,710
two attackers so I guess that's as much

443
00:20:06,570 --> 00:20:13,439
time that we had for today I can take a

444
00:20:10,710 --> 00:20:16,260
couple of questions if we have time if

445
00:20:13,440 --> 00:20:21,260
not I'll be hanging in here and we can

446
00:20:16,260 --> 00:20:21,260
have a quick chat if you want thank you

