1
00:00:00,000 --> 00:00:04,770
so thank you for joining me here so late

2
00:00:02,760 --> 00:00:07,588
in the day and so close to happy hour

3
00:00:04,770 --> 00:00:12,018
for my talk sharks in the water open

4
00:00:07,589 --> 00:00:12,019
source component risk and mitigation

5
00:00:13,549 --> 00:00:27,420
okay to a good start okay so who is this

6
00:00:24,689 --> 00:00:29,160
Erin guy so prior to moving into

7
00:00:27,420 --> 00:00:32,040
security I was a full-stack engineer

8
00:00:29,160 --> 00:00:33,989
building products and in that journey I

9
00:00:32,040 --> 00:00:36,239
was introduced to the security champion

10
00:00:33,989 --> 00:00:39,750
program from there I grew a deep

11
00:00:36,239 --> 00:00:41,610
fascination and passion for security so

12
00:00:39,750 --> 00:00:44,070
much so that I decided to jump in

13
00:00:41,610 --> 00:00:46,710
full-time and start working as a

14
00:00:44,070 --> 00:00:49,320
security engineer at SCI scence where I

15
00:00:46,710 --> 00:00:51,030
focus on hardening our cloud assets I

16
00:00:49,320 --> 00:00:52,770
manage our bug bounty program

17
00:00:51,030 --> 00:00:54,660
collaborate closely with our platform

18
00:00:52,770 --> 00:00:56,340
team to get in to dig into the

19
00:00:54,660 --> 00:00:59,190
nitty-gritty of our ever-increasing

20
00:00:56,340 --> 00:01:02,039
codebase and build and integrate tooling

21
00:00:59,190 --> 00:01:06,119
that makes sense for us but enough about

22
00:01:02,039 --> 00:01:07,979
me this compass is our meta navigation

23
00:01:06,119 --> 00:01:10,680
table which helps set a course for where

24
00:01:07,979 --> 00:01:12,900
we're going today we'll start with the

25
00:01:10,680 --> 00:01:14,729
component risk landscape diving into the

26
00:01:12,900 --> 00:01:17,220
numbers of the open source software

27
00:01:14,729 --> 00:01:19,380
supply chain which I'm calling OS 3c

28
00:01:17,220 --> 00:01:22,920
mostly because I got tired of typing os

29
00:01:19,380 --> 00:01:25,649
SSC attack surface and why this is

30
00:01:22,920 --> 00:01:29,040
important then we'll make our way to

31
00:01:25,650 --> 00:01:31,229
manually navigating murky waters and how

32
00:01:29,040 --> 00:01:34,049
placing trust and our teams is paramount

33
00:01:31,229 --> 00:01:35,939
to success on this journey finally we'll

34
00:01:34,049 --> 00:01:38,390
wrap it up with Cretan and autopilot

35
00:01:35,939 --> 00:01:42,570
system that will complement the process

36
00:01:38,390 --> 00:01:44,250
that we've already put in place so by

37
00:01:42,570 --> 00:01:46,559
the end of this talk you should have a

38
00:01:44,250 --> 00:01:48,270
solid understanding of the risk how to

39
00:01:46,560 --> 00:01:50,040
navigate the murky waters of the open

40
00:01:48,270 --> 00:01:51,899
source supply chain and how to provide

41
00:01:50,040 --> 00:01:53,820
the necessary context and knowledge to

42
00:01:51,899 --> 00:01:58,110
stakeholders of all kinds across your

43
00:01:53,820 --> 00:01:59,789
organization let me begin this section

44
00:01:58,110 --> 00:02:01,200
by saying that while these numbers may

45
00:01:59,790 --> 00:02:02,579
seem like I am bashing the open source

46
00:02:01,200 --> 00:02:04,560
community I'm certainly not

47
00:02:02,579 --> 00:02:05,939
I love open source I use it constantly

48
00:02:04,560 --> 00:02:07,680
especially in all other products that

49
00:02:05,939 --> 00:02:09,989
I'm building and all the tooling that

50
00:02:07,680 --> 00:02:11,550
I'm building as well so there's a lot of

51
00:02:09,989 --> 00:02:12,990
good in open source software

52
00:02:11,550 --> 00:02:14,550
it increases engineering

53
00:02:12,990 --> 00:02:17,040
city allows for near limitless

54
00:02:14,550 --> 00:02:19,230
extensibility and is generally well

55
00:02:17,040 --> 00:02:21,450
tested however not all components are

56
00:02:19,230 --> 00:02:23,549
created equal and as we progress through

57
00:02:21,450 --> 00:02:25,589
today's talk we'll see why education and

58
00:02:23,550 --> 00:02:27,000
awareness among engineering teams is in

59
00:02:25,590 --> 00:02:28,800
many cases more important than the

60
00:02:27,000 --> 00:02:32,910
automated tooling we love to build into

61
00:02:28,800 --> 00:02:35,400
our pipelines so to fully understand the

62
00:02:32,910 --> 00:02:37,260
OS 3c landscape I think it's important

63
00:02:35,400 --> 00:02:41,430
to first get an idea of the growth that

64
00:02:37,260 --> 00:02:43,620
has occurred from 2017 to 2019 there's

65
00:02:41,430 --> 00:02:46,110
been a 75% growth of newly released

66
00:02:43,620 --> 00:02:48,840
packages across all repositories in just

67
00:02:46,110 --> 00:02:52,350
two years time two of the leading

68
00:02:48,840 --> 00:02:55,260
leaders in terms of percent increase our

69
00:02:52,350 --> 00:02:59,070
NPM and crates do which is rusts

70
00:02:55,260 --> 00:03:01,260
repository so JavaScript's NPM repo with

71
00:02:59,070 --> 00:03:03,359
over 8,000 new people contributing

72
00:03:01,260 --> 00:03:05,489
annually has grown at a rate of one

73
00:03:03,360 --> 00:03:09,330
hundred and nine percent over two years

74
00:03:05,490 --> 00:03:13,170
so from roughly 400,000 packages to now

75
00:03:09,330 --> 00:03:15,930
well over eight hundred 36,000 and as of

76
00:03:13,170 --> 00:03:17,640
today it's well over a million the

77
00:03:15,930 --> 00:03:19,800
fastest of them all though is rust

78
00:03:17,640 --> 00:03:22,649
crates IO package manager growing from

79
00:03:19,800 --> 00:03:25,650
7,000 packages to now over 25,000 in

80
00:03:22,650 --> 00:03:28,230
just two years time this is pretty rapid

81
00:03:25,650 --> 00:03:30,660
growth so much so that the engineering

82
00:03:28,230 --> 00:03:33,060
community has access to almost 22,000

83
00:03:30,660 --> 00:03:36,750
new component releases every single day

84
00:03:33,060 --> 00:03:38,820
since 2018 there's an impressive amount

85
00:03:36,750 --> 00:03:40,710
of work being done across all industries

86
00:03:38,820 --> 00:03:44,280
and most of it is fueled by the open

87
00:03:40,710 --> 00:03:46,890
source community it affords us much more

88
00:03:44,280 --> 00:03:49,200
rapid prototyping and development it

89
00:03:46,890 --> 00:03:51,089
increases our velocity in other words

90
00:03:49,200 --> 00:03:53,640
our time to deliver software has now

91
00:03:51,090 --> 00:03:56,550
accelerated at a phenomenal rate we can

92
00:03:53,640 --> 00:03:59,160
pull down and spin up a database just by

93
00:03:56,550 --> 00:04:00,840
running one docker command we can extend

94
00:03:59,160 --> 00:04:02,720
upon that functionality which is the

95
00:04:00,840 --> 00:04:04,950
core of open source software

96
00:04:02,720 --> 00:04:06,990
we're engineering teams are constantly

97
00:04:04,950 --> 00:04:09,329
coming up with new and unique ways to

98
00:04:06,990 --> 00:04:11,870
use average component building at a top

99
00:04:09,330 --> 00:04:15,420
their software to fit their needs in

100
00:04:11,870 --> 00:04:17,579
general solve open source software has

101
00:04:15,420 --> 00:04:20,430
integrity it's well tested and it's

102
00:04:17,579 --> 00:04:21,719
widely contributed to as with anything

103
00:04:20,430 --> 00:04:23,490
though there comes an inflection point

104
00:04:21,720 --> 00:04:25,410
which forces balance back into the

105
00:04:23,490 --> 00:04:28,180
universe

106
00:04:25,410 --> 00:04:29,710
annually enterprise organizations

107
00:04:28,180 --> 00:04:32,919
download roughly three hundred and

108
00:04:29,710 --> 00:04:35,469
thirteen thousand new OSC releases every

109
00:04:32,919 --> 00:04:36,909
year of those downloads twenty-eight

110
00:04:35,470 --> 00:04:39,100
thousand of them have at least one

111
00:04:36,910 --> 00:04:41,169
vulnerability and with those

112
00:04:39,100 --> 00:04:43,180
vulnerabilities eighteen thousand five

113
00:04:41,169 --> 00:04:45,340
hundred of them have CVE scores at seven

114
00:04:43,180 --> 00:04:49,030
or above and eight thousand of those

115
00:04:45,340 --> 00:04:51,099
have scores at or greater than nine so

116
00:04:49,030 --> 00:04:53,109
the chances of one vulnerable one

117
00:04:51,100 --> 00:04:54,220
vulnerability and one popular component

118
00:04:53,110 --> 00:04:57,010
infecting some of the largest companies

119
00:04:54,220 --> 00:04:58,570
in the world is very real in fact as I'm

120
00:04:57,010 --> 00:05:00,669
sure everyone in this room is already

121
00:04:58,570 --> 00:05:03,159
aware it's already happened and it's

122
00:05:00,669 --> 00:05:05,440
happened more than once in fact open

123
00:05:03,160 --> 00:05:08,650
source components contributed to 31% of

124
00:05:05,440 --> 00:05:10,560
breaches in 2018 these made up a lot of

125
00:05:08,650 --> 00:05:12,460
what could be called a targeted breach

126
00:05:10,560 --> 00:05:14,919
you can make the argument that all

127
00:05:12,460 --> 00:05:16,780
breaches are targeted but we all know

128
00:05:14,919 --> 00:05:19,510
the amount of crap adversaries through

129
00:05:16,780 --> 00:05:21,580
our firewall just to see if it sticks so

130
00:05:19,510 --> 00:05:24,250
when I say targeted breach I mean those

131
00:05:21,580 --> 00:05:27,969
that specify specifically target open

132
00:05:24,250 --> 00:05:29,800
source components so with those numbers

133
00:05:27,970 --> 00:05:31,810
in mind it becomes very clear why

134
00:05:29,800 --> 00:05:34,050
attackers target open source components

135
00:05:31,810 --> 00:05:37,539
but let's dive in a little bit deeper

136
00:05:34,050 --> 00:05:40,870
there is broad adoption among open

137
00:05:37,539 --> 00:05:43,599
source components 97% of code and modern

138
00:05:40,870 --> 00:05:47,289
web applications come from NPM which has

139
00:05:43,599 --> 00:05:51,280
a vulnerability rate of 51 percent so

140
00:05:47,289 --> 00:05:54,729
let me repeat that 97% of code in modern

141
00:05:51,280 --> 00:05:56,198
web apps comes from NPM of which the

142
00:05:54,729 --> 00:05:57,849
majority of the package is downloaded

143
00:05:56,199 --> 00:06:00,520
from there have known vulnerabilities

144
00:05:57,849 --> 00:06:03,039
and this ties directly into what I mean

145
00:06:00,520 --> 00:06:05,139
by pervasive there are of course

146
00:06:03,039 --> 00:06:07,750
different ways we could unpack the word

147
00:06:05,139 --> 00:06:10,120
pervasive in this context instead I'll

148
00:06:07,750 --> 00:06:13,830
just ask by show of hands how many of

149
00:06:10,120 --> 00:06:16,930
you have dependencies you can't update

150
00:06:13,830 --> 00:06:18,969
yeah all right this is exactly the

151
00:06:16,930 --> 00:06:21,460
reason why we see vulnerable versions of

152
00:06:18,970 --> 00:06:25,150
Apache struts still being used in the

153
00:06:21,460 --> 00:06:26,948
wild it's crazy so if you're not

154
00:06:25,150 --> 00:06:30,789
updating regularly it's going to become

155
00:06:26,949 --> 00:06:32,320
more and more painful the ability to

156
00:06:30,789 --> 00:06:33,849
update quickly becomes critical when

157
00:06:32,320 --> 00:06:36,370
adversaries have compressed the times

158
00:06:33,849 --> 00:06:38,830
between vulnerability announcement to

159
00:06:36,370 --> 00:06:41,170
exploit from 45 days to 3 days

160
00:06:38,830 --> 00:06:42,880
and in the case where they are directly

161
00:06:41,170 --> 00:06:44,260
injecting malicious code into open

162
00:06:42,880 --> 00:06:46,270
source projects which is not just

163
00:06:44,260 --> 00:06:50,289
theoretical it drops to zero day

164
00:06:46,270 --> 00:06:53,650
vulnerability so how do we do all this

165
00:06:50,290 --> 00:06:55,420
as a security team well we don't it's

166
00:06:53,650 --> 00:06:58,169
all about placing trust in our teams and

167
00:06:55,420 --> 00:07:00,910
our counterparts across the organization

168
00:06:58,170 --> 00:07:03,970
so the first step in this journey is

169
00:07:00,910 --> 00:07:06,250
don't be in a hab we're not going to be

170
00:07:03,970 --> 00:07:08,050
able to control everything as Frederick

171
00:07:06,250 --> 00:07:09,610
Lee mentioned this morning our engineers

172
00:07:08,050 --> 00:07:11,440
are the experts of our codebase

173
00:07:09,610 --> 00:07:13,660
they're the ones who have all of the

174
00:07:11,440 --> 00:07:15,660
context our engineers and our product

175
00:07:13,660 --> 00:07:17,740
leads our champions and our advocates

176
00:07:15,660 --> 00:07:21,580
remember your development team is not

177
00:07:17,740 --> 00:07:23,530
your white whale so to keep your

178
00:07:21,580 --> 00:07:25,719
application and the people who power to

179
00:07:23,530 --> 00:07:27,400
float above the depths it's our role to

180
00:07:25,720 --> 00:07:30,280
guide the wheel and lean in when

181
00:07:27,400 --> 00:07:32,590
requested and when it's necessary this

182
00:07:30,280 --> 00:07:34,539
comes in three parts building education

183
00:07:32,590 --> 00:07:37,719
raising awareness and creating

184
00:07:34,540 --> 00:07:40,780
partnership for education is all about

185
00:07:37,720 --> 00:07:43,000
finding space if your organization has

186
00:07:40,780 --> 00:07:45,849
lightning talks or lunch and learns or

187
00:07:43,000 --> 00:07:47,560
some other forum in which you can share

188
00:07:45,850 --> 00:07:49,450
that's a great space for sharing the

189
00:07:47,560 --> 00:07:52,840
knowledge otherwise create a slack

190
00:07:49,450 --> 00:07:54,310
channel to share hacks but you know put

191
00:07:52,840 --> 00:07:57,400
together a write-up and outline the

192
00:07:54,310 --> 00:07:58,990
cause and remediation as well lead

193
00:07:57,400 --> 00:08:00,580
in-depth comprehensive sessions about

194
00:07:58,990 --> 00:08:03,220
all the cool you're building in the

195
00:08:00,580 --> 00:08:05,349
dev psych-out space create a time in a

196
00:08:03,220 --> 00:08:08,350
forum to engage no matter what you want

197
00:08:05,350 --> 00:08:10,660
to teach on share your risk evaluation

198
00:08:08,350 --> 00:08:12,250
techniques so help your devs and your

199
00:08:10,660 --> 00:08:14,830
product partners better understand the

200
00:08:12,250 --> 00:08:19,270
risk of a feature or component let them

201
00:08:14,830 --> 00:08:21,460
drive it awareness expose a dashboard

202
00:08:19,270 --> 00:08:23,469
with all the aggregated scan results in

203
00:08:21,460 --> 00:08:25,390
one place open it up for your

204
00:08:23,470 --> 00:08:27,790
stakeholders like your execs your

205
00:08:25,390 --> 00:08:29,860
product leads and your engineers to view

206
00:08:27,790 --> 00:08:32,530
you'll be surprised at some of the

207
00:08:29,860 --> 00:08:34,479
outcomes you can get from that add your

208
00:08:32,530 --> 00:08:36,610
engineering team to your github security

209
00:08:34,479 --> 00:08:38,850
alerts if you're not aware this is as

210
00:08:36,610 --> 00:08:41,729
easy as flipping a switch in your

211
00:08:38,850 --> 00:08:44,290
organization from there you can actually

212
00:08:41,729 --> 00:08:46,180
set up an automated bot that will update

213
00:08:44,290 --> 00:08:48,040
a lot of the components for you

214
00:08:46,180 --> 00:08:49,270
typically if they're transitive you

215
00:08:48,040 --> 00:08:50,560
won't get much help there but at least

216
00:08:49,270 --> 00:08:52,260
you can get the direct dependencies

217
00:08:50,560 --> 00:08:55,869
updated with a bot

218
00:08:52,260 --> 00:08:57,400
slack channels for volatile Ertz share

219
00:08:55,870 --> 00:08:59,140
the knowledge you'll probably find that

220
00:08:57,400 --> 00:09:04,090
most of your engineers will proactively

221
00:08:59,140 --> 00:09:06,490
update the last but not least part of

222
00:09:04,090 --> 00:09:08,050
this is partnership partner with your

223
00:09:06,490 --> 00:09:10,180
architects in your platform team and

224
00:09:08,050 --> 00:09:12,310
your engineers this can help you find

225
00:09:10,180 --> 00:09:13,239
gaps in your own understanding and put

226
00:09:12,310 --> 00:09:15,239
you in a position where they're

227
00:09:13,240 --> 00:09:17,170
comfortable to come to you with issues

228
00:09:15,240 --> 00:09:19,720
communicate vulnerabilities to your

229
00:09:17,170 --> 00:09:22,810
team's the best defense against attack

230
00:09:19,720 --> 00:09:24,940
is sharing what has come before hoarding

231
00:09:22,810 --> 00:09:27,040
or restricting knowledge is not where we

232
00:09:24,940 --> 00:09:30,310
should focus we should focus on getting

233
00:09:27,040 --> 00:09:32,800
better together build a shared model of

234
00:09:30,310 --> 00:09:34,989
responsibility any of you who are

235
00:09:32,800 --> 00:09:37,300
familiar with AWS will be familiar with

236
00:09:34,990 --> 00:09:41,020
this phrase security is about ownership

237
00:09:37,300 --> 00:09:43,030
across many levels not just one has been

238
00:09:41,020 --> 00:09:45,010
mentioned multiple times today we cannot

239
00:09:43,030 --> 00:09:49,180
be everywhere and I don't know about you

240
00:09:45,010 --> 00:09:51,460
but I don't want to be everywhere with

241
00:09:49,180 --> 00:09:54,219
partnership in mind this is a simple but

242
00:09:51,460 --> 00:09:55,900
helpful component evaluation tool it's a

243
00:09:54,220 --> 00:09:58,000
great way to engender the idea of shared

244
00:09:55,900 --> 00:10:00,910
responsibility encourage your team to

245
00:09:58,000 --> 00:10:05,020
use this to evaluate their import prior

246
00:10:00,910 --> 00:10:07,270
to consumption so when was the last time

247
00:10:05,020 --> 00:10:09,610
the component was updated this can

248
00:10:07,270 --> 00:10:12,939
easily see be seen by navigating to the

249
00:10:09,610 --> 00:10:15,040
change log within the repo or typically

250
00:10:12,940 --> 00:10:16,780
you can just look at the file contents

251
00:10:15,040 --> 00:10:19,120
themselves and see when the last time

252
00:10:16,780 --> 00:10:20,890
was updated if you see a component has

253
00:10:19,120 --> 00:10:22,750
not been updated for four years it's

254
00:10:20,890 --> 00:10:25,960
likely not something you want inside

255
00:10:22,750 --> 00:10:27,340
your codebase popularity what kind of

256
00:10:25,960 --> 00:10:29,560
attention does it get from the open

257
00:10:27,340 --> 00:10:31,780
source community if it's on github are

258
00:10:29,560 --> 00:10:34,089
there stars and Watchers how is the

259
00:10:31,780 --> 00:10:37,329
documentation does it seem like you can

260
00:10:34,090 --> 00:10:39,940
work with this and for vulnerabilities I

261
00:10:37,330 --> 00:10:42,640
recommend they go to resources like CVE

262
00:10:39,940 --> 00:10:44,710
details or NIST's national vulnerability

263
00:10:42,640 --> 00:10:47,100
database to search for known

264
00:10:44,710 --> 00:10:49,720
vulnerability within those components

265
00:10:47,100 --> 00:10:52,810
check out the issue tracker as well it's

266
00:10:49,720 --> 00:10:54,700
a primary metric that I like to use are

267
00:10:52,810 --> 00:10:56,530
their maintain errs responsive to the

268
00:10:54,700 --> 00:10:58,330
community do they respond thoughtfully

269
00:10:56,530 --> 00:11:01,870
and help consumers with their product

270
00:10:58,330 --> 00:11:03,580
and their API if it's a unpopular

271
00:11:01,870 --> 00:11:05,529
project there may not be many issues

272
00:11:03,580 --> 00:11:07,240
however it's a popular one and you see

273
00:11:05,529 --> 00:11:09,040
a lot of issues that are not getting

274
00:11:07,240 --> 00:11:10,709
resolved that may tell you that it's not

275
00:11:09,040 --> 00:11:13,089
something you want to work with and

276
00:11:10,709 --> 00:11:15,369
thoughtful imports are the intersection

277
00:11:13,089 --> 00:11:16,689
of them all this is where you can talk

278
00:11:15,370 --> 00:11:19,149
to your Inge team about being mindful

279
00:11:16,689 --> 00:11:20,439
about what they are importing one of the

280
00:11:19,149 --> 00:11:22,629
first things I bring up is the

281
00:11:20,439 --> 00:11:24,550
unfortunate scenario of left pad I'm

282
00:11:22,629 --> 00:11:27,519
sure a lot of people in this room have

283
00:11:24,550 --> 00:11:30,490
heard of that but if you haven't it's an

284
00:11:27,519 --> 00:11:33,189
NPM called package the developer

285
00:11:30,490 --> 00:11:35,769
unpublished it it was an 11 line piece

286
00:11:33,189 --> 00:11:39,160
of code that once it was unpublished

287
00:11:35,769 --> 00:11:41,610
baroque node babel Travis CI and a lot

288
00:11:39,160 --> 00:11:43,779
of the other applications and tools

289
00:11:41,610 --> 00:11:45,639
open-source tooling is all about not

290
00:11:43,779 --> 00:11:47,170
reinventing the wheel but in my humble

291
00:11:45,639 --> 00:11:49,569
opinion there are wheels and there are

292
00:11:47,170 --> 00:11:51,160
blunt tools left pad was a blunt tool

293
00:11:49,569 --> 00:11:55,509
that could have been written instead of

294
00:11:51,160 --> 00:11:57,040
imported applying autopilot is where we

295
00:11:55,509 --> 00:11:58,120
get to chat about that sweet sweet

296
00:11:57,040 --> 00:12:01,059
automation

297
00:11:58,120 --> 00:12:02,709
I remember automation is only a

298
00:12:01,059 --> 00:12:04,240
complement to all the other processes

299
00:12:02,709 --> 00:12:08,050
we've already established like

300
00:12:04,240 --> 00:12:10,569
partnership and education the first

301
00:12:08,050 --> 00:12:13,899
piece scanning is the most

302
00:12:10,569 --> 00:12:17,439
straightforward and why do I say choose

303
00:12:13,899 --> 00:12:20,019
a tool even myself as someone who loves

304
00:12:17,439 --> 00:12:22,569
to build and write code unless you have

305
00:12:20,019 --> 00:12:24,189
unlimited time or resources building

306
00:12:22,569 --> 00:12:26,589
your own scanner is just not a viable

307
00:12:24,189 --> 00:12:28,959
option instead you're going to choose a

308
00:12:26,589 --> 00:12:30,819
tool maybe and even though maybe even an

309
00:12:28,959 --> 00:12:34,029
open-source one you can see if it can

310
00:12:30,819 --> 00:12:36,550
scan itself and this in my opinion is a

311
00:12:34,029 --> 00:12:38,649
wheel no need to spend the man-hours on

312
00:12:36,550 --> 00:12:41,949
something on building something that can

313
00:12:38,649 --> 00:12:44,199
be acquired relatively cheaply you also

314
00:12:41,949 --> 00:12:47,319
need to decide on your trigger will it

315
00:12:44,199 --> 00:12:49,959
be a cron job running in a cube cluster

316
00:12:47,319 --> 00:12:50,709
or will it be triggered by every PR into

317
00:12:49,959 --> 00:12:53,258
your master branch

318
00:12:50,709 --> 00:12:56,050
either way the output needs to be

319
00:12:53,259 --> 00:12:59,610
consumable so configure in such a way

320
00:12:56,050 --> 00:12:59,609
that allows for easy consumption

321
00:13:01,170 --> 00:13:08,259
ingestion this will allow us to model

322
00:13:04,209 --> 00:13:10,119
and reduce unnecessary noise it allows

323
00:13:08,259 --> 00:13:12,009
it gives us more agility so we can

324
00:13:10,120 --> 00:13:13,990
change and react to our software

325
00:13:12,009 --> 00:13:16,629
development lifecycle and a more

326
00:13:13,990 --> 00:13:18,040
predictable and controlled way so it

327
00:13:16,629 --> 00:13:19,240
allows us to act on our own best

328
00:13:18,040 --> 00:13:21,699
assumptions

329
00:13:19,240 --> 00:13:24,700
and even adjust some of our worst ones

330
00:13:21,700 --> 00:13:27,580
down the line we can use it to reduce

331
00:13:24,700 --> 00:13:30,130
noise it's possible to tweak your

332
00:13:27,580 --> 00:13:32,190
scanning tools to reduce the noise as

333
00:13:30,130 --> 00:13:34,300
much as possible during configuration

334
00:13:32,190 --> 00:13:36,390
however there are instances where we

335
00:13:34,300 --> 00:13:39,069
want to have more fine-grained control

336
00:13:36,390 --> 00:13:40,930
building an ingestion API gives us the

337
00:13:39,070 --> 00:13:44,350
ability to shape and transform the data

338
00:13:40,930 --> 00:13:46,870
any way we like and this is what makes

339
00:13:44,350 --> 00:13:49,080
data modeling so important upon

340
00:13:46,870 --> 00:13:51,760
ingestion we need to then be able to

341
00:13:49,080 --> 00:13:54,790
pull out that data and make sense of it

342
00:13:51,760 --> 00:13:57,040
so unless you're using a really cool

343
00:13:54,790 --> 00:13:58,510
tool that can materialize those views

344
00:13:57,040 --> 00:14:01,270
for you on the fly where you don't have

345
00:13:58,510 --> 00:14:03,189
to worry about remodeling your data it's

346
00:14:01,270 --> 00:14:10,510
an incredibly important thing to start

347
00:14:03,190 --> 00:14:12,730
getting right at first so report this is

348
00:14:10,510 --> 00:14:15,430
where we aggregate and visualize in

349
00:14:12,730 --> 00:14:18,100
intelligible ways and distribute to

350
00:14:15,430 --> 00:14:20,760
stakeholders this is a good place to

351
00:14:18,100 --> 00:14:23,410
build a high-level executive dashboard

352
00:14:20,760 --> 00:14:27,450
so there are no more ad hoc reports and

353
00:14:23,410 --> 00:14:27,449
everything will be at their fingertips

354
00:14:27,630 --> 00:14:33,910
and share since we've already

355
00:14:32,200 --> 00:14:35,709
established a partnership with our

356
00:14:33,910 --> 00:14:38,050
engineering counterparts we can work

357
00:14:35,709 --> 00:14:40,540
with them to get deeper insights into

358
00:14:38,050 --> 00:14:42,939
the findings to gain more learning and

359
00:14:40,540 --> 00:14:51,189
then we repeat the process all over

360
00:14:42,940 --> 00:14:52,540
again so thank you besides us F for

361
00:14:51,190 --> 00:14:56,560
inviting me to speak here today and

362
00:14:52,540 --> 00:14:59,140
happy ten years thank you to my team who

363
00:14:56,560 --> 00:14:59,949
is out here and thanks to all of you for

364
00:14:59,140 --> 00:15:04,140
being here today

365
00:14:59,950 --> 00:15:04,140
and I'll see you at happy hour

366
00:15:06,010 --> 00:15:10,960
[Applause]

367
00:15:28,300 --> 00:15:58,309
do you mind repeating that yes so white

368
00:15:54,559 --> 00:16:00,829
source I would say that I've had to

369
00:15:58,309 --> 00:16:04,009
build a whole lot of automation around

370
00:16:00,829 --> 00:16:06,319
it in order to get it to function the

371
00:16:04,009 --> 00:16:08,420
way that I want it to however I would

372
00:16:06,319 --> 00:16:11,389
say that's one of a reasonably

373
00:16:08,420 --> 00:16:14,329
affordable one that for us was on the

374
00:16:11,389 --> 00:16:15,800
market and there's some decent

375
00:16:14,329 --> 00:16:18,819
open-source ones out there as well

376
00:16:15,800 --> 00:16:18,819
a wasp as one

377
00:16:27,320 --> 00:16:33,950
curious how your analysis might change

378
00:16:29,730 --> 00:16:33,950
if you include those security issues

379
00:16:35,160 --> 00:16:40,250
so I want to make sure I understand the

380
00:16:36,899 --> 00:16:42,480
question how would I how would I assign

381
00:16:40,250 --> 00:16:44,750
how would I work with the security

382
00:16:42,480 --> 00:16:44,750
issues

383
00:16:52,830 --> 00:16:59,310
yeah it the numbers that I was using

384
00:16:56,370 --> 00:17:02,670
came from a open source software supply

385
00:16:59,310 --> 00:17:06,000
chain report put out by Sona type if I

386
00:17:02,670 --> 00:17:08,579
were to apply my own automation to it I

387
00:17:06,000 --> 00:17:10,380
would I would definitely pull down these

388
00:17:08,579 --> 00:17:13,198
security issues that I get from packages

389
00:17:10,380 --> 00:17:14,910
I don't know how that would change the

390
00:17:13,199 --> 00:17:17,520
numbers but I imagine it would go up

391
00:17:14,910 --> 00:17:46,070
substantially does that answer your

392
00:17:17,520 --> 00:17:48,660
question yes right it's a hard question

393
00:17:46,070 --> 00:17:50,189
and I say it's hard mostly because it's

394
00:17:48,660 --> 00:17:52,140
something that you need to decide upon

395
00:17:50,190 --> 00:17:53,880
within your own organization the way

396
00:17:52,140 --> 00:17:58,169
that we address it is we look at medium

397
00:17:53,880 --> 00:18:00,419
and up and that's just because there's a

398
00:17:58,169 --> 00:18:03,600
lot of other work that we're trying to

399
00:18:00,419 --> 00:18:06,390
get done and we work on addressing the

400
00:18:03,600 --> 00:18:09,178
medium to high to critical risks first

401
00:18:06,390 --> 00:18:11,669
and that is what we bring up in the

402
00:18:09,179 --> 00:18:14,309
dashboards as well we pay attention to

403
00:18:11,669 --> 00:18:16,169
those lows and we try to address address

404
00:18:14,309 --> 00:18:22,160
them over time but they are prioritized

405
00:18:16,169 --> 00:18:22,160
much much lower yes

406
00:18:28,930 --> 00:18:51,300
yes yeah I would use dependency scanner

407
00:18:48,700 --> 00:18:54,220
which is the one that a wasp puts out

408
00:18:51,300 --> 00:18:57,899
Jeremy long is the maintainer on that

409
00:18:54,220 --> 00:18:57,900
and that's one that I would recommend

410
00:19:21,820 --> 00:19:27,090
it's hard like his continuous monitoring

411
00:19:24,129 --> 00:19:29,408
all those dependencies any ideas or tips

412
00:19:27,090 --> 00:19:31,570
that can help with kind of a monitoring

413
00:19:29,409 --> 00:19:33,410
like that you've decided to use it how

414
00:19:31,570 --> 00:19:37,399
this thing is about

415
00:19:33,410 --> 00:19:41,130
yeah so transitive dependencies are a

416
00:19:37,400 --> 00:19:43,800
incredibly hard thing to manage you have

417
00:19:41,130 --> 00:19:46,140
to go through different layers to update

418
00:19:43,800 --> 00:19:49,530
to find that resolution path to update

419
00:19:46,140 --> 00:19:51,570
and oftentimes working down that path

420
00:19:49,530 --> 00:19:56,070
you're gonna find you'll end up breaking

421
00:19:51,570 --> 00:19:57,870
your product along the way I don't have

422
00:19:56,070 --> 00:19:59,550
a really good answer around how to

423
00:19:57,870 --> 00:20:02,159
manage the transitive dependencies

424
00:19:59,550 --> 00:20:05,669
outside of setting up in something like

425
00:20:02,160 --> 00:20:07,290
a yarn lock you can or a package.json

426
00:20:05,670 --> 00:20:09,780
you can actually set up the resolve

427
00:20:07,290 --> 00:20:11,430
dependencies routes and then I would

428
00:20:09,780 --> 00:20:14,250
just make sure you're not breaking your

429
00:20:11,430 --> 00:20:16,620
sweets there there is a tool out there

430
00:20:14,250 --> 00:20:19,530
though that will actually climb that

431
00:20:16,620 --> 00:20:23,030
resolution dependency for you and update

432
00:20:19,530 --> 00:20:23,030
it in an automated way

433
00:20:37,080 --> 00:20:46,830
I see overtime so that goes back to

434
00:20:44,240 --> 00:20:49,170
reporting and having a visualization or

435
00:20:46,830 --> 00:20:53,070
at least some kind of tracker that way

436
00:20:49,170 --> 00:20:55,680
you can have a an age of a vulnerable

437
00:20:53,070 --> 00:20:58,679
component and that way you can point to

438
00:20:55,680 --> 00:21:00,000
either different teams that are using

439
00:20:58,680 --> 00:21:02,430
this to ask if there's something that

440
00:21:00,000 --> 00:21:05,220
they can use in lieu of this component

441
00:21:02,430 --> 00:21:07,050
especially there's a few out there that

442
00:21:05,220 --> 00:21:09,630
keep popping up for us

443
00:21:07,050 --> 00:21:12,960
that have a boner ability after

444
00:21:09,630 --> 00:21:59,070
vulnerability I don't know if that helps

445
00:21:12,960 --> 00:22:00,780
answer your question yes so what I

446
00:21:59,070 --> 00:22:02,250
typically end up doing there is I meet

447
00:22:00,780 --> 00:22:04,379
with a couple of our engineering

448
00:22:02,250 --> 00:22:07,410
engineering managers and a couple of our

449
00:22:04,380 --> 00:22:09,210
product leads once a month to resolve

450
00:22:07,410 --> 00:22:10,710
things that are coming from our bug

451
00:22:09,210 --> 00:22:13,440
bounty program unless it's critical of

452
00:22:10,710 --> 00:22:15,660
course and also things that our scanners

453
00:22:13,440 --> 00:22:17,670
are finding as well and that way we can

454
00:22:15,660 --> 00:22:19,230
meet on a regular cadence and help

455
00:22:17,670 --> 00:22:22,920
resolve these on a regular cadence and

456
00:22:19,230 --> 00:22:25,830
it feels like a less of an ambush and an

457
00:22:22,920 --> 00:22:27,780
ad-hoc request and it becomes more of a

458
00:22:25,830 --> 00:22:29,960
process that we continue to refine over

459
00:22:27,780 --> 00:22:29,960
time

460
00:22:33,250 --> 00:23:04,430
yeah I'm tired yeah so I think the best

461
00:23:00,320 --> 00:23:07,820
way to do that is to actually reproduce

462
00:23:04,430 --> 00:23:09,590
or find some reproduction of it there's

463
00:23:07,820 --> 00:23:11,139
a whole lot of YouTube resources out

464
00:23:09,590 --> 00:23:13,189
there where you can find people actually

465
00:23:11,140 --> 00:23:15,350
taking well exploiting these

466
00:23:13,190 --> 00:23:17,720
vulnerabilities and that's a nice way to

467
00:23:15,350 --> 00:23:19,820
humanize it and move it further away

468
00:23:17,720 --> 00:23:21,740
from the scanner and move it closer to

469
00:23:19,820 --> 00:23:23,300
the individual level and where you can

470
00:23:21,740 --> 00:23:24,860
actually show this is something that you

471
00:23:23,300 --> 00:23:26,980
can actually do in the wild and

472
00:23:24,860 --> 00:23:29,000
something that we should consider

473
00:23:26,980 --> 00:23:31,670
escalating and moving up the priority

474
00:23:29,000 --> 00:23:32,990
chain and I mean try try doing it

475
00:23:31,670 --> 00:23:36,370
yourself because that's always a lot of

476
00:23:32,990 --> 00:23:36,370
fun to hack on right

477
00:23:42,110 --> 00:23:48,619
[Applause]

