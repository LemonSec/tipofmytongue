1
00:00:00,030 --> 00:00:05,270
oh so we're gonna be talking about the

2
00:00:03,270 --> 00:00:07,170
GCP metadata API as mentioned before

3
00:00:05,270 --> 00:00:09,899
we're gonna talk about some

4
00:00:07,170 --> 00:00:12,000
vulnerabilities and then we'll get into

5
00:00:09,900 --> 00:00:15,440
some remediation and some detecting

6
00:00:12,000 --> 00:00:17,520
techniques to catch malicious activity

7
00:00:15,440 --> 00:00:19,470
so who are we

8
00:00:17,520 --> 00:00:21,419
my name is Dylan I'm a security engineer

9
00:00:19,470 --> 00:00:23,130
out here in the Bay Area do a bunch of

10
00:00:21,420 --> 00:00:25,529
open source stuff you can check some of

11
00:00:23,130 --> 00:00:27,119
that home I get hub my name is Allison

12
00:00:25,529 --> 00:00:29,130
I'm also a security engineer here in San

13
00:00:27,119 --> 00:00:30,300
Francisco and you can add me on Twitter

14
00:00:29,130 --> 00:00:35,370
if you have any questions during the

15
00:00:30,300 --> 00:00:38,910
talk so what is the GCP or what is a

16
00:00:35,370 --> 00:00:41,459
metadata API in general it is something

17
00:00:38,910 --> 00:00:43,919
you can query it is accessible via

18
00:00:41,460 --> 00:00:46,230
instance a lot of times it's used for

19
00:00:43,920 --> 00:00:47,930
things like automation where you want to

20
00:00:46,230 --> 00:00:50,190
know things about an instance

21
00:00:47,930 --> 00:00:50,820
potentially get credentials to be

22
00:00:50,190 --> 00:00:53,489
bootstrapped

23
00:00:50,820 --> 00:00:55,739
for any libraries running on your

24
00:00:53,489 --> 00:00:57,180
instances it's also unauthenticated so

25
00:00:55,739 --> 00:00:59,250
your notice what's being authenticated

26
00:00:57,180 --> 00:01:02,039
to the metadata API and it's exposed on

27
00:00:59,250 --> 00:01:04,949
your VDC but you can't actually hit it

28
00:01:02,039 --> 00:01:07,920
yeah so if you have some compute work

29
00:01:04,949 --> 00:01:09,679
running in a VM or in a lambda or

30
00:01:07,920 --> 00:01:12,960
something like that or a cloud function

31
00:01:09,680 --> 00:01:16,680
metadata API is basically the means for

32
00:01:12,960 --> 00:01:20,250
which that VM gets its credentials for

33
00:01:16,680 --> 00:01:23,040
its underlying privilege so here's an

34
00:01:20,250 --> 00:01:26,009
example of the metadata API and Google

35
00:01:23,040 --> 00:01:28,979
you have a compute instance and you will

36
00:01:26,009 --> 00:01:32,520
send a request to the metadata server by

37
00:01:28,979 --> 00:01:35,189
the metadata google internal URL and you

38
00:01:32,520 --> 00:01:36,810
can access things like a token or any

39
00:01:35,189 --> 00:01:39,990
other information from the instance

40
00:01:36,810 --> 00:01:41,460
that's exposed on the metadata API there

41
00:01:39,990 --> 00:01:43,170
are a lot of different platforms so this

42
00:01:41,460 --> 00:01:45,419
isn't just something it's specific to

43
00:01:43,170 --> 00:01:48,329
one platform the concept of a metadata

44
00:01:45,420 --> 00:01:50,970
server or metadata API is in a lot of

45
00:01:48,329 --> 00:01:56,270
the large platforms like AWS Asher

46
00:01:50,970 --> 00:01:58,679
Google Cloud I love all the cloud so

47
00:01:56,270 --> 00:02:00,270
before we get into the GCP metadata API

48
00:01:58,680 --> 00:02:03,810
I think a lot of folks might be more

49
00:02:00,270 --> 00:02:07,649
familiar with the AWS one it was

50
00:02:03,810 --> 00:02:09,060
really a common form of a particular

51
00:02:07,650 --> 00:02:10,920
type of attack called server side

52
00:02:09,060 --> 00:02:12,660
request forgery the reason why is

53
00:02:10,919 --> 00:02:16,709
because it used to be you could just

54
00:02:12,660 --> 00:02:18,299
send a simple single get request to this

55
00:02:16,710 --> 00:02:20,100
internal endpoint and then it would

56
00:02:18,300 --> 00:02:22,350
return back their credential for the

57
00:02:20,100 --> 00:02:24,750
instance so this became a problem if you

58
00:02:22,350 --> 00:02:27,209
were building a feature on a VM that by

59
00:02:24,750 --> 00:02:27,680
design made requests on behalf of the

60
00:02:27,209 --> 00:02:30,480
user

61
00:02:27,680 --> 00:02:32,730
not an unreasonable feature to think of

62
00:02:30,480 --> 00:02:34,980
and in this particular example you can

63
00:02:32,730 --> 00:02:37,920
imagine a web service that maybe wants

64
00:02:34,980 --> 00:02:40,049
to upload an image by a URL that the

65
00:02:37,920 --> 00:02:41,609
user specified so it'll go fetch the

66
00:02:40,050 --> 00:02:43,860
image from that URL and in this

67
00:02:41,610 --> 00:02:47,190
particular example the hacker specified

68
00:02:43,860 --> 00:02:49,470
their image to be the internal metadata

69
00:02:47,190 --> 00:02:50,700
service and so instead of an image being

70
00:02:49,470 --> 00:02:52,470
returned to them credentials that

71
00:02:50,700 --> 00:02:55,589
returned to them and what are the

72
00:02:52,470 --> 00:02:58,709
consequences of this well an extreme

73
00:02:55,590 --> 00:03:01,290
case Capital One had there the breach

74
00:02:58,709 --> 00:03:04,620
through an attack vector that leveraged

75
00:03:01,290 --> 00:03:06,989
the metadata API basically you can

76
00:03:04,620 --> 00:03:09,150
imagine a VM that had access to a bunch

77
00:03:06,989 --> 00:03:11,430
of s3 buckets which had a bunch of

78
00:03:09,150 --> 00:03:14,400
customer data in it and the attacker was

79
00:03:11,430 --> 00:03:16,980
able to abuse a necessary pattern to

80
00:03:14,400 --> 00:03:21,420
fetch a credential and get access to

81
00:03:16,980 --> 00:03:24,540
those as three buckets so what a date of

82
00:03:21,420 --> 00:03:26,070
us do about it well they released a

83
00:03:24,540 --> 00:03:27,540
second version of their API and the

84
00:03:26,070 --> 00:03:28,920
second version is a little bit more

85
00:03:27,540 --> 00:03:30,359
complicated than just a simple get

86
00:03:28,920 --> 00:03:32,700
request you've gotta send some headers

87
00:03:30,360 --> 00:03:35,760
you've got to send a second request and

88
00:03:32,700 --> 00:03:39,540
so this protects against the most

89
00:03:35,760 --> 00:03:42,328
primitive form of passes RF and makes it

90
00:03:39,540 --> 00:03:45,769
a little bit more tricky to abuse the

91
00:03:42,329 --> 00:03:45,769
metadata API as a user

92
00:03:46,079 --> 00:03:51,900
so now pivoting over to the GCP world we

93
00:03:49,110 --> 00:03:55,079
talked about VMs and AWS and the GCP

94
00:03:51,900 --> 00:03:57,150
world a lot of different services expose

95
00:03:55,079 --> 00:03:59,400
the metadata API and a few of those

96
00:03:57,150 --> 00:04:02,100
services are powered by the MS do those

97
00:03:59,400 --> 00:04:04,260
services may be non transparently

98
00:04:02,100 --> 00:04:06,329
powered by the MS we've listed a couple

99
00:04:04,260 --> 00:04:08,450
here but there's way more and all these

100
00:04:06,329 --> 00:04:11,450
services in some capacity run

101
00:04:08,450 --> 00:04:15,768
that code can interact with a metadata

102
00:04:11,450 --> 00:04:17,659
API which can retrieve credentials so I

103
00:04:15,769 --> 00:04:19,280
wanted to just briefly talk about a

104
00:04:17,660 --> 00:04:24,500
vulnerability that I submitted to their

105
00:04:19,279 --> 00:04:27,020
program they had nice instructions on

106
00:04:24,500 --> 00:04:29,210
how you can run a headless browser in a

107
00:04:27,020 --> 00:04:32,389
cloud function cloud function is similar

108
00:04:29,210 --> 00:04:33,770
to an AWS lambda and so it's just meant

109
00:04:32,389 --> 00:04:35,120
to be an ephemeral container that runs

110
00:04:33,770 --> 00:04:39,080
something and dies so this was just

111
00:04:35,120 --> 00:04:40,880
meant to run some website take a

112
00:04:39,080 --> 00:04:44,270
screenshot of it and return it was how

113
00:04:40,880 --> 00:04:47,930
the service was set up but the thing was

114
00:04:44,270 --> 00:04:50,690
that you could have the website make

115
00:04:47,930 --> 00:04:52,580
Ajax requests on your behalf and then

116
00:04:50,690 --> 00:04:54,440
make a request to the metadata API and

117
00:04:52,580 --> 00:04:56,120
return credentials you had to do a

118
00:04:54,440 --> 00:04:58,639
little bit of trickery with DNS

119
00:04:56,120 --> 00:05:01,400
rebinding to bypass same origin policy

120
00:04:58,639 --> 00:05:03,080
restrictions but the byproduct of this

121
00:05:01,400 --> 00:05:06,400
was basically if you follow their

122
00:05:03,080 --> 00:05:08,900
instructions out of the box you could

123
00:05:06,400 --> 00:05:10,099
have your survey and you spun up a

124
00:05:08,900 --> 00:05:12,530
service your service would be vulnerable

125
00:05:10,100 --> 00:05:15,229
because it would render untrusted HTML

126
00:05:12,530 --> 00:05:18,770
which could steal credentials for your

127
00:05:15,229 --> 00:05:21,620
plot function so like taking this a step

128
00:05:18,770 --> 00:05:24,349
further what I was able to do because

129
00:05:21,620 --> 00:05:26,060
most of the naming information and a

130
00:05:24,350 --> 00:05:28,580
cloud function is actually in its

131
00:05:26,060 --> 00:05:30,970
subdomain and a little bit is in the

132
00:05:28,580 --> 00:05:33,550
path but the path is fairly predictable

133
00:05:30,970 --> 00:05:37,460
because most of it is in the subdomain

134
00:05:33,550 --> 00:05:39,770
we can use passive dns vendors to get

135
00:05:37,460 --> 00:05:41,750
most of our customers cloud functions

136
00:05:39,770 --> 00:05:43,940
and then we can guess the names because

137
00:05:41,750 --> 00:05:47,090
by default they take the name function

138
00:05:43,940 --> 00:05:49,070
one function to function 3 but also the

139
00:05:47,090 --> 00:05:50,960
tutorial recommended you call this one

140
00:05:49,070 --> 00:05:52,669
screenshot so we've got some pretty good

141
00:05:50,960 --> 00:05:53,840
guesses of how we can find customers

142
00:05:52,669 --> 00:05:56,719
that might be running this headless

143
00:05:53,840 --> 00:05:59,450
browser so like I mentioned go over to

144
00:05:56,720 --> 00:06:00,889
our friendly passive DNS provider and we

145
00:05:59,450 --> 00:06:03,200
just see a list of every customers Bob

146
00:06:00,889 --> 00:06:04,520
functions and then we start making get

147
00:06:03,200 --> 00:06:06,740
requests to all of them at function one

148
00:06:04,520 --> 00:06:08,299
function to or screenshot and just see

149
00:06:06,740 --> 00:06:09,979
if any of them return looking like

150
00:06:08,300 --> 00:06:11,630
they're a screenshotting huh

151
00:06:09,979 --> 00:06:12,620
and sure enough we find a bunch of

152
00:06:11,630 --> 00:06:14,389
customers that had followed that

153
00:06:12,620 --> 00:06:16,099
tutorial out of the box and find a much

154
00:06:14,389 --> 00:06:18,139
faster start affordable submit all this

155
00:06:16,099 --> 00:06:23,539
to their bug bounty

156
00:06:18,139 --> 00:06:26,449
and they they accept that it's about

157
00:06:23,539 --> 00:06:28,818
submission so so one thing here that is

158
00:06:26,449 --> 00:06:32,210
a little bit nuanced ng CP that will get

159
00:06:28,819 --> 00:06:34,039
way more to later is that the defaults

160
00:06:32,210 --> 00:06:35,239
of cloud functions actually have

161
00:06:34,039 --> 00:06:37,998
privilege

162
00:06:35,240 --> 00:06:40,249
unlike AWS where if you just spend

163
00:06:37,999 --> 00:06:42,499
something up by default most things

164
00:06:40,249 --> 00:06:44,240
don't have any privilege and GCP cloud

165
00:06:42,499 --> 00:06:45,830
functions have a lot of privilege by

166
00:06:44,240 --> 00:06:48,110
default they can write two buckets they

167
00:06:45,830 --> 00:06:49,818
can talk to databases they can talk to

168
00:06:48,110 --> 00:06:53,029
bigquery they can do a lot of things on

169
00:06:49,819 --> 00:06:55,370
the box and so these customers that spun

170
00:06:53,029 --> 00:06:59,120
up these headless browsers probably

171
00:06:55,370 --> 00:07:01,370
we're also exposing access to databases

172
00:06:59,120 --> 00:07:02,569
and buckets and things like that and if

173
00:07:01,370 --> 00:07:04,759
we kind of look at the end result of

174
00:07:02,569 --> 00:07:06,229
this the default for a cloud function is

175
00:07:04,759 --> 00:07:08,379
to be on the public internet and be

176
00:07:06,229 --> 00:07:11,060
published triggered by an HTTP request

177
00:07:08,379 --> 00:07:13,159
it defaults to not having authentication

178
00:07:11,060 --> 00:07:15,919
and it defaults to having access to all

179
00:07:13,159 --> 00:07:18,938
buckets and all sequel and a lot of

180
00:07:15,919 --> 00:07:21,438
other things so the result of this I

181
00:07:18,939 --> 00:07:23,029
submitted their bug bounty was like hey

182
00:07:21,439 --> 00:07:25,279
I'm pretty sure I can access a lot of

183
00:07:23,029 --> 00:07:28,490
data across a lot of your customers and

184
00:07:25,279 --> 00:07:30,979
they paid out their one three three

185
00:07:28,490 --> 00:07:33,800
seven bounty for it since then they've

186
00:07:30,979 --> 00:07:35,419
added a host header validation to make

187
00:07:33,800 --> 00:07:37,789
it a little bit trickier to do DNS

188
00:07:35,419 --> 00:07:40,599
rebinding attacks and they've also taken

189
00:07:37,789 --> 00:07:43,219
down their blog post on how to spin up a

190
00:07:40,599 --> 00:07:45,139
headless browser which a little sad

191
00:07:43,219 --> 00:07:48,169
about because I actually think it's a

192
00:07:45,139 --> 00:07:50,839
cool feature so we talked a little bit

193
00:07:48,169 --> 00:07:52,669
about a protection that was been in

194
00:07:50,839 --> 00:07:53,899
place because of the bug that Dylan

195
00:07:52,669 --> 00:07:56,149
files but there are a few other

196
00:07:53,899 --> 00:07:58,669
protections that GCP has in general on

197
00:07:56,149 --> 00:08:01,479
their metadata API they require a custom

198
00:07:58,669 --> 00:08:04,818
header so a header must be set in the

199
00:08:01,479 --> 00:08:06,949
for the current metadata API they also

200
00:08:04,819 --> 00:08:08,870
have the host header validation and

201
00:08:06,949 --> 00:08:11,569
their deprecating the legacy endpoint

202
00:08:08,870 --> 00:08:14,449
that does not require a header something

203
00:08:11,569 --> 00:08:17,169
to know is you actually have to enable

204
00:08:14,449 --> 00:08:21,080
the DEF work like to deprecate the

205
00:08:17,169 --> 00:08:22,878
legacy v01 and point it is not disabled

206
00:08:21,080 --> 00:08:26,448
for you by default you have to disable

207
00:08:22,879 --> 00:08:28,790
it on your project so before we continue

208
00:08:26,449 --> 00:08:31,680
to dig into

209
00:08:28,790 --> 00:08:34,200
exploiting or kind of going about these

210
00:08:31,680 --> 00:08:36,810
services we need to talk about how your

211
00:08:34,200 --> 00:08:38,940
resources actually exist within your

212
00:08:36,809 --> 00:08:41,130
project we have this is a general

213
00:08:38,940 --> 00:08:42,870
resource hierarchy for GCP we're gonna

214
00:08:41,130 --> 00:08:45,150
be focusing at the project level this is

215
00:08:42,870 --> 00:08:47,100
where most services or engineers are

216
00:08:45,150 --> 00:08:49,740
actually interacting with resources you

217
00:08:47,100 --> 00:08:51,270
can think of it like a AWS account where

218
00:08:49,740 --> 00:08:53,400
within the project that is where all

219
00:08:51,270 --> 00:08:54,750
your resources are stored people are

220
00:08:53,400 --> 00:08:56,430
granted access at the project level

221
00:08:54,750 --> 00:08:58,320
generally and are going to interact with

222
00:08:56,430 --> 00:09:00,329
their resources there yeah and similar

223
00:08:58,320 --> 00:09:01,710
to AWS accounts it's not uncommon for a

224
00:09:00,330 --> 00:09:06,240
customer to just throw all their stuff

225
00:09:01,710 --> 00:09:07,770
into one project and within this

226
00:09:06,240 --> 00:09:09,570
resource hierarchy there are a few

227
00:09:07,770 --> 00:09:11,100
different types of members of you that

228
00:09:09,570 --> 00:09:13,050
can be granted access to things like

229
00:09:11,100 --> 00:09:14,310
your project or your organization there

230
00:09:13,050 --> 00:09:16,530
are service accounts there are groups

231
00:09:14,310 --> 00:09:18,089
users discrete identity and identity

232
00:09:16,530 --> 00:09:22,650
domains that can be granted access to

233
00:09:18,090 --> 00:09:24,600
your resources cool so of all of those

234
00:09:22,650 --> 00:09:26,430
things we're gonna be focusing a lot on

235
00:09:24,600 --> 00:09:27,540
service accounts so what our service

236
00:09:26,430 --> 00:09:29,939
accounts

237
00:09:27,540 --> 00:09:31,980
they're this complicated thing that can

238
00:09:29,940 --> 00:09:34,110
kind of be summarized as just a thing

239
00:09:31,980 --> 00:09:37,830
that provides credentials that gives you

240
00:09:34,110 --> 00:09:39,630
access to resources you can export

241
00:09:37,830 --> 00:09:41,400
long-lived credentials and throw them

242
00:09:39,630 --> 00:09:43,860
wherever you want or you can stick those

243
00:09:41,400 --> 00:09:46,829
credentials in the metadata API which is

244
00:09:43,860 --> 00:09:48,870
how you could've give a VM access to

245
00:09:46,830 --> 00:09:52,260
stuff so you attach a service account to

246
00:09:48,870 --> 00:09:54,690
a VM and then that VM can get access to

247
00:09:52,260 --> 00:09:56,430
things like cloud sequel and buckets be

248
00:09:54,690 --> 00:09:58,320
acquiring the metadata API so service

249
00:09:56,430 --> 00:10:00,930
accounts are basically the means for

250
00:09:58,320 --> 00:10:02,760
which things access resources like

251
00:10:00,930 --> 00:10:05,370
buckets and things like that or

252
00:10:02,760 --> 00:10:08,310
authenticate to the GCP ID maybe ice yep

253
00:10:05,370 --> 00:10:10,290
so there are two different types of

254
00:10:08,310 --> 00:10:12,780
service accounts we're going to be going

255
00:10:10,290 --> 00:10:15,230
into detail into what both of those are

256
00:10:12,780 --> 00:10:17,520
and what they mean but at a high level

257
00:10:15,230 --> 00:10:20,640
there's Google managed service accounts

258
00:10:17,520 --> 00:10:21,810
that are sort of Google sets them up and

259
00:10:20,640 --> 00:10:23,840
you're not meant to mess with them too

260
00:10:21,810 --> 00:10:26,339
much and then there's user managed

261
00:10:23,840 --> 00:10:28,170
service accounts which google also

262
00:10:26,340 --> 00:10:29,400
presets a few of them up for you but

263
00:10:28,170 --> 00:10:33,479
you're meant to have control of them and

264
00:10:29,400 --> 00:10:35,100
modify them after the fact so for the

265
00:10:33,480 --> 00:10:36,540
user managed service accounts what does

266
00:10:35,100 --> 00:10:37,920
that really mean they're actually

267
00:10:36,540 --> 00:10:39,030
created as a resource object in your

268
00:10:37,920 --> 00:10:40,680
project you can

269
00:10:39,030 --> 00:10:43,290
create service account keys for them

270
00:10:40,680 --> 00:10:45,180
they're actually created in your project

271
00:10:43,290 --> 00:10:46,530
you can see them he said in here it's a

272
00:10:45,180 --> 00:10:49,560
service account that's created it's

273
00:10:46,530 --> 00:10:51,089
given a role by default it's give both

274
00:10:49,560 --> 00:10:53,250
of these roles are given editor so when

275
00:10:51,090 --> 00:10:54,930
you enable your API is it will go and

276
00:10:53,250 --> 00:10:57,390
generate these service accounts in your

277
00:10:54,930 --> 00:11:03,209
project and grant them access to your

278
00:10:57,390 --> 00:11:05,220
project with the editor role so we said

279
00:11:03,210 --> 00:11:06,090
that these things are created on your

280
00:11:05,220 --> 00:11:08,010
behalf

281
00:11:06,090 --> 00:11:09,750
they're also attached to things on your

282
00:11:08,010 --> 00:11:12,300
behalf by default so if you're just spin

283
00:11:09,750 --> 00:11:13,950
up a VM you would actually get this

284
00:11:12,300 --> 00:11:15,569
previous service account attached to

285
00:11:13,950 --> 00:11:18,120
your VM and your VM would be able to

286
00:11:15,570 --> 00:11:20,430
interact with buckets on your behalf by

287
00:11:18,120 --> 00:11:22,980
default and that's a little subtle it's

288
00:11:20,430 --> 00:11:25,380
not immediately obvious that role can

289
00:11:22,980 --> 00:11:27,570
also do a lot of things for example it

290
00:11:25,380 --> 00:11:29,580
can access big database access buckets

291
00:11:27,570 --> 00:11:30,990
it's basically admin on your project so

292
00:11:29,580 --> 00:11:32,580
another way of putting this is by

293
00:11:30,990 --> 00:11:35,640
default pretty much everything that runs

294
00:11:32,580 --> 00:11:38,640
is code by default has a service account

295
00:11:35,640 --> 00:11:43,560
attached to it via its metadata API that

296
00:11:38,640 --> 00:11:46,260
can administrate your project so and

297
00:11:43,560 --> 00:11:48,239
we're gonna kind of bring this back AWS

298
00:11:46,260 --> 00:11:51,030
how is this different than AWS well in

299
00:11:48,240 --> 00:11:53,190
AWS I am policies are not automatically

300
00:11:51,030 --> 00:11:54,780
associated with your resources there are

301
00:11:53,190 --> 00:11:56,040
predefined iam policies that you can

302
00:11:54,780 --> 00:12:00,569
attach the things but they're not

303
00:11:56,040 --> 00:12:02,370
attached to things for you by default so

304
00:12:00,570 --> 00:12:04,020
now that we just kind of covered what

305
00:12:02,370 --> 00:12:05,400
are you some user managed service

306
00:12:04,020 --> 00:12:07,980
accounts we're going to dive into a

307
00:12:05,400 --> 00:12:10,290
service that leverages these

308
00:12:07,980 --> 00:12:12,680
automatically generated service accounts

309
00:12:10,290 --> 00:12:15,030
specifically the compute service account

310
00:12:12,680 --> 00:12:17,400
for this service specifically this is

311
00:12:15,030 --> 00:12:20,069
Google's kubernetes engine so it's a

312
00:12:17,400 --> 00:12:21,720
managed kubernetes platform we're

313
00:12:20,070 --> 00:12:24,900
talking about the node so these are the

314
00:12:21,720 --> 00:12:27,120
instances that run the containers and

315
00:12:24,900 --> 00:12:28,380
the service accounts that are attached

316
00:12:27,120 --> 00:12:31,290
to those instances that they

317
00:12:28,380 --> 00:12:33,510
authenticate to the GCP api's with so

318
00:12:31,290 --> 00:12:36,839
these nodes the instances get the

319
00:12:33,510 --> 00:12:39,360
compute service account they by default

320
00:12:36,840 --> 00:12:42,210
get the editor role so an admin role on

321
00:12:39,360 --> 00:12:43,680
your project and one thing to note here

322
00:12:42,210 --> 00:12:45,480
is there's a few different ways you can

323
00:12:43,680 --> 00:12:47,550
this isn't a security mechanism but you

324
00:12:45,480 --> 00:12:48,750
can set scopes on the OAuth tokens that

325
00:12:47,550 --> 00:12:51,719
can be returned from the Met

326
00:12:48,750 --> 00:12:53,430
API so the service accounts that are

327
00:12:51,720 --> 00:12:54,780
attached to this are subject to these

328
00:12:53,430 --> 00:12:57,359
scopes that are defined on the clusters

329
00:12:54,780 --> 00:12:59,640
so in this example by default they are

330
00:12:57,360 --> 00:13:02,640
given things like full read our stored

331
00:12:59,640 --> 00:13:05,520
read access and can write different

332
00:13:02,640 --> 00:13:07,830
things so we're going to talk a little

333
00:13:05,520 --> 00:13:09,660
bit about now so there's these default

334
00:13:07,830 --> 00:13:12,600
service accounts they have project level

335
00:13:09,660 --> 00:13:15,060
access and any workload within your

336
00:13:12,600 --> 00:13:18,360
cluster can query the metadata API and

337
00:13:15,060 --> 00:13:21,719
request a credential for the GCP a node

338
00:13:18,360 --> 00:13:23,700
service account they're accessible by

339
00:13:21,720 --> 00:13:25,800
all the workloads and can actually write

340
00:13:23,700 --> 00:13:28,740
and update things as well so there was

341
00:13:25,800 --> 00:13:32,430
this one kind of attack that happened

342
00:13:28,740 --> 00:13:34,680
where the first foothold that a user had

343
00:13:32,430 --> 00:13:37,949
was actually querying the metadata API

344
00:13:34,680 --> 00:13:40,560
from a general pod and was just able to

345
00:13:37,950 --> 00:13:42,450
get a service account token don't really

346
00:13:40,560 --> 00:13:43,800
know what the Scopes or the roles were

347
00:13:42,450 --> 00:13:46,350
but it could have been the default ones

348
00:13:43,800 --> 00:13:48,630
and we're able to actually compromise

349
00:13:46,350 --> 00:13:50,880
the entire cluster shout out to Andre

350
00:13:48,630 --> 00:13:53,700
Baptista yeah that's $25,000 routing

351
00:13:50,880 --> 00:13:55,890
mm-hmm and so we kind of talked about

352
00:13:53,700 --> 00:13:57,450
there are these identities they're

353
00:13:55,890 --> 00:14:01,439
attached to your resources by default

354
00:13:57,450 --> 00:14:02,730
you can query the metadata API and GK or

355
00:14:01,440 --> 00:14:04,200
Google kind of knows about this so

356
00:14:02,730 --> 00:14:05,400
they've built out some protections some

357
00:14:04,200 --> 00:14:06,980
of the protections that they have our

358
00:14:05,400 --> 00:14:09,870
metadata concealment which is a

359
00:14:06,980 --> 00:14:11,700
blacklist approach to restricting access

360
00:14:09,870 --> 00:14:14,250
to certain paths when you query the

361
00:14:11,700 --> 00:14:16,500
metadata API there's workload identity

362
00:14:14,250 --> 00:14:17,970
which actually associates a kubernetes

363
00:14:16,500 --> 00:14:19,830
service account with the GCP service

364
00:14:17,970 --> 00:14:21,450
account so you get granular tokens

365
00:14:19,830 --> 00:14:24,690
provided to you and shielded knows which

366
00:14:21,450 --> 00:14:26,100
restricts who can do what with a qiblah

367
00:14:24,690 --> 00:14:27,990
credential and it actually has

368
00:14:26,100 --> 00:14:29,820
cryptographic it's cryptographically

369
00:14:27,990 --> 00:14:31,890
tied to the notes that it's issued to so

370
00:14:29,820 --> 00:14:32,940
in this we're gonna go into a demo and

371
00:14:31,890 --> 00:14:35,699
in our demo we're going to just

372
00:14:32,940 --> 00:14:38,400
specifically focus on attempting to

373
00:14:35,700 --> 00:14:41,430
retrieve the nodes GCP service account

374
00:14:38,400 --> 00:14:43,470
and on our in our demo we have metadata

375
00:14:41,430 --> 00:14:45,510
concealment and shielded nodes enabled

376
00:14:43,470 --> 00:14:47,190
but Alison why wouldn't we just enable

377
00:14:45,510 --> 00:14:48,600
all of them so it's kind of difficult

378
00:14:47,190 --> 00:14:50,790
there are a lot of these different

379
00:14:48,600 --> 00:14:51,990
protections and they all are very

380
00:14:50,790 --> 00:14:54,540
nuanced and they're kind of

381
00:14:51,990 --> 00:14:56,550
to kind of know what do they do for you

382
00:14:54,540 --> 00:14:58,199
what do they not do for you so they're

383
00:14:56,550 --> 00:15:00,359
not all of them are compatible and you

384
00:14:58,200 --> 00:15:02,250
can't always update one of your nodes in

385
00:15:00,360 --> 00:15:04,290
a cluster and have them be introduced

386
00:15:02,250 --> 00:15:06,180
and kind of work together so we're

387
00:15:04,290 --> 00:15:09,270
focusing on two that are compatible to

388
00:15:06,180 --> 00:15:13,319
work with each other so now we're going

389
00:15:09,270 --> 00:15:15,569
to go into a demo and Dylan has set up

390
00:15:13,320 --> 00:15:17,850
this wonderful GK cluster running

391
00:15:15,570 --> 00:15:20,100
amazing services and I'm kind of poking

392
00:15:17,850 --> 00:15:23,670
around on the internet and I somehow to

393
00:15:20,100 --> 00:15:28,440
stumble upon and RCE in a work look and

394
00:15:23,670 --> 00:15:29,849
so we're going this is kind of the path

395
00:15:28,440 --> 00:15:32,100
that we're going through so we're gonna

396
00:15:29,850 --> 00:15:34,200
simulate that by just giving lsat a

397
00:15:32,100 --> 00:15:36,240
shell on my web service so we can see

398
00:15:34,200 --> 00:15:37,680
here that we set metadata concealment to

399
00:15:36,240 --> 00:15:39,210
be enabled I shouldn't be able to access

400
00:15:37,680 --> 00:15:40,949
things like service account credentials

401
00:15:39,210 --> 00:15:43,470
that's what it says

402
00:15:40,950 --> 00:15:45,690
we know that metadata concealment

403
00:15:43,470 --> 00:15:49,860
restricts access to the service accounts

404
00:15:45,690 --> 00:15:52,170
slash identity path we're gonna go ahead

405
00:15:49,860 --> 00:15:54,630
and maybe on someone I just got our C

406
00:15:52,170 --> 00:15:57,990
darn I don't have curl so I have to

407
00:15:54,630 --> 00:16:02,330
actually install curl so that I can

408
00:15:57,990 --> 00:16:04,710
actually query this metadata API and I

409
00:16:02,330 --> 00:16:06,600
watched the earlier talk on how to

410
00:16:04,710 --> 00:16:13,770
harden containers so I removed curl and

411
00:16:06,600 --> 00:16:16,650
all that stuff yeah and so next we're

412
00:16:13,770 --> 00:16:17,970
going to try to query the actual

413
00:16:16,650 --> 00:16:20,040
metadata API we know we have to set a

414
00:16:17,970 --> 00:16:21,930
header I made sure that the header has

415
00:16:20,040 --> 00:16:24,599
to be so Dylan made sure that the header

416
00:16:21,930 --> 00:16:26,329
has to be set can only access the

417
00:16:24,600 --> 00:16:29,010
metadata endpoint if you have the header

418
00:16:26,330 --> 00:16:30,720
so I'm gonna curl the service count see

419
00:16:29,010 --> 00:16:32,490
what's there there should be a default

420
00:16:30,720 --> 00:16:34,080
and actually in a service account that

421
00:16:32,490 --> 00:16:37,320
it's attached to the notes and that's

422
00:16:34,080 --> 00:16:39,530
all nodes within your cluster and I curl

423
00:16:37,320 --> 00:16:41,670
the metadata endpoint for the default

424
00:16:39,530 --> 00:16:44,490
service account the compute one which

425
00:16:41,670 --> 00:16:46,469
has editor I got a token and I'm like

426
00:16:44,490 --> 00:16:47,720
cool I'm just this random workload I'm

427
00:16:46,470 --> 00:16:49,790
running code

428
00:16:47,720 --> 00:16:51,740
doing something but I actually want to

429
00:16:49,790 --> 00:16:53,509
see what other resources within the

430
00:16:51,740 --> 00:16:55,220
project I have access to

431
00:16:53,509 --> 00:16:57,860
why are you granted access to anything

432
00:16:55,220 --> 00:16:59,120
so it should be fun right it's just my

433
00:16:57,860 --> 00:17:02,149
workload really shouldn't have access to

434
00:16:59,120 --> 00:17:04,429
any of my GK project resources but we

435
00:17:02,149 --> 00:17:07,880
can see I have full storage access and I

436
00:17:04,429 --> 00:17:09,949
like it no that's a really sensitive

437
00:17:07,880 --> 00:17:11,870
bucket so I can actually potentially

438
00:17:09,949 --> 00:17:15,289
query more things that you meant to give

439
00:17:11,869 --> 00:17:17,149
access to just by default so even with

440
00:17:15,289 --> 00:17:19,339
metadata concealment and children nodes

441
00:17:17,150 --> 00:17:21,220
enabled which do different things and

442
00:17:19,339 --> 00:17:23,750
the focus that we had today was on the

443
00:17:21,220 --> 00:17:26,329
metadata metadata concealment

444
00:17:23,750 --> 00:17:28,760
control you can actually still get the

445
00:17:26,329 --> 00:17:31,340
nodes credentials just the OAuth token

446
00:17:28,760 --> 00:17:34,400
and potentially access any of the

447
00:17:31,340 --> 00:17:37,939
project resources cool so that was a

448
00:17:34,400 --> 00:17:39,650
good example of a user managed service

449
00:17:37,940 --> 00:17:42,260
account and user managed service

450
00:17:39,650 --> 00:17:43,970
accounts are in our control a bit so if

451
00:17:42,260 --> 00:17:46,070
we wanted to we could probably lockdown

452
00:17:43,970 --> 00:17:47,960
which buckets that service account had

453
00:17:46,070 --> 00:17:50,000
access to Google managed service

454
00:17:47,960 --> 00:17:51,799
accounts work a little differently they

455
00:17:50,000 --> 00:17:54,590
don't exist in your project they're not

456
00:17:51,799 --> 00:17:56,299
very easy to see the roles for them also

457
00:17:54,590 --> 00:17:57,289
don't exist in your project so you can't

458
00:17:56,299 --> 00:17:59,418
really see what their underlying

459
00:17:57,289 --> 00:17:59,960
permissions are without some clever

460
00:17:59,419 --> 00:18:03,559
hackery

461
00:17:59,960 --> 00:18:06,860
they usually take the form of the bottom

462
00:18:03,559 --> 00:18:08,030
three things there so if you see a bunch

463
00:18:06,860 --> 00:18:10,189
of role bindings to your projects for

464
00:18:08,030 --> 00:18:11,418
roles that you can't look up for service

465
00:18:10,190 --> 00:18:14,120
accounts that don't live in your service

466
00:18:11,419 --> 00:18:15,590
account that's what they look like and

467
00:18:14,120 --> 00:18:17,209
they're basically used to power the

468
00:18:15,590 --> 00:18:19,100
cloud so under the hood these service

469
00:18:17,210 --> 00:18:21,409
accounts might be used to auto scale

470
00:18:19,100 --> 00:18:24,469
your VMs they might be is to publish

471
00:18:21,409 --> 00:18:26,270
things to GCR behind the scenes but

472
00:18:24,470 --> 00:18:28,610
they're basically just the plumbing that

473
00:18:26,270 --> 00:18:30,260
makes the the cloud platform work and

474
00:18:28,610 --> 00:18:31,580
you're not really meant to modify them

475
00:18:30,260 --> 00:18:34,460
otherwise things could break in

476
00:18:31,580 --> 00:18:36,230
unexpected ways so how many are there we

477
00:18:34,460 --> 00:18:38,659
wanted to know so there are all these

478
00:18:36,230 --> 00:18:41,330
identities that are granted access to my

479
00:18:38,659 --> 00:18:43,340
project and they're automatically

480
00:18:41,330 --> 00:18:44,990
generated when api's are enabled in my

481
00:18:43,340 --> 00:18:46,939
project so I went through or we went

482
00:18:44,990 --> 00:18:47,990
through and we enabled every API that

483
00:18:46,940 --> 00:18:50,510
was generally available in the

484
00:18:47,990 --> 00:18:51,760
marketplace out of those 278 unique

485
00:18:50,510 --> 00:18:55,390
api's that are just

486
00:18:51,760 --> 00:18:56,980
available to you about 47 Google managed

487
00:18:55,390 --> 00:18:59,290
service accounts are given project level

488
00:18:56,980 --> 00:19:03,340
I am access to your resources and then

489
00:18:59,290 --> 00:19:04,990
there are two distinct user managed so

490
00:19:03,340 --> 00:19:06,459
created in your project service accounts

491
00:19:04,990 --> 00:19:08,410
that are created when you enable all of

492
00:19:06,460 --> 00:19:09,850
these api's yes we talked about those

493
00:19:08,410 --> 00:19:11,170
two a little bit already but what about

494
00:19:09,850 --> 00:19:12,669
the other forty-seven that are meant to

495
00:19:11,170 --> 00:19:15,520
be behind the scenes kind of plumbing

496
00:19:12,670 --> 00:19:16,690
that operates the cloud so this is what

497
00:19:15,520 --> 00:19:18,220
they look like so you go through and you

498
00:19:16,690 --> 00:19:20,320
enable the API it's like wow that's a

499
00:19:18,220 --> 00:19:21,790
lot of I am my name's on my project that

500
00:19:20,320 --> 00:19:23,820
I didn't set I don't really know what's

501
00:19:21,790 --> 00:19:26,860
happening here a lot of if I do who's

502
00:19:23,820 --> 00:19:28,689
making all this stuff work it's it's a

503
00:19:26,860 --> 00:19:30,370
little overwhelming and there used to

504
00:19:28,690 --> 00:19:31,990
make this services operate so it kind of

505
00:19:30,370 --> 00:19:33,370
would assume that your services are

506
00:19:31,990 --> 00:19:34,780
being able to access your resources in

507
00:19:33,370 --> 00:19:37,600
some way and this is how Google does it

508
00:19:34,780 --> 00:19:39,460
so we wanted to know okay all these

509
00:19:37,600 --> 00:19:41,409
identities have access to my project

510
00:19:39,460 --> 00:19:43,120
they have roles that are not created as

511
00:19:41,410 --> 00:19:44,680
resource objects in my project so I can

512
00:19:43,120 --> 00:19:46,659
actually view the permissions for them

513
00:19:44,680 --> 00:19:48,160
because they're not managed by me so I

514
00:19:46,660 --> 00:19:50,320
want to view the permissions for these

515
00:19:48,160 --> 00:19:53,860
service accounts so with g-cloud you can

516
00:19:50,320 --> 00:19:55,870
actually copy a role from a role and so

517
00:19:53,860 --> 00:19:57,330
this google manage role that's not

518
00:19:55,870 --> 00:20:00,219
actually created in my project i can

519
00:19:57,330 --> 00:20:02,260
request to copy it and create a custom

520
00:20:00,220 --> 00:20:04,090
role in my project so i can actually

521
00:20:02,260 --> 00:20:05,890
view the permissions that these google

522
00:20:04,090 --> 00:20:07,149
manage identities have on my project so

523
00:20:05,890 --> 00:20:14,470
that's what we did that's a really

524
00:20:07,150 --> 00:20:16,450
clever trick so we're going to be

525
00:20:14,470 --> 00:20:18,430
talking about cloud fold and these are

526
00:20:16,450 --> 00:20:22,420
this is a google managed service and

527
00:20:18,430 --> 00:20:23,320
this is a cloud build service the cloud

528
00:20:22,420 --> 00:20:24,970
build service account that's

529
00:20:23,320 --> 00:20:26,770
automatically generated for you we can

530
00:20:24,970 --> 00:20:28,390
see when we copy the role from the

531
00:20:26,770 --> 00:20:29,740
google manage role these are all of the

532
00:20:28,390 --> 00:20:31,570
different permissions that it has and

533
00:20:29,740 --> 00:20:34,000
all the different types of services that

534
00:20:31,570 --> 00:20:36,220
it has access to within my project yeah

535
00:20:34,000 --> 00:20:38,380
more than just kind of like compute

536
00:20:36,220 --> 00:20:40,030
maybe GCR who knows what it has access

537
00:20:38,380 --> 00:20:42,520
to we could kind of imagine that maybe

538
00:20:40,030 --> 00:20:45,670
cloud build what is probable so cloud

539
00:20:42,520 --> 00:20:48,010
build is basically a service that will

540
00:20:45,670 --> 00:20:49,630
publish to the container registry on

541
00:20:48,010 --> 00:20:50,470
your behalf from a github repo that you

542
00:20:49,630 --> 00:20:51,670
wire it up to you

543
00:20:50,470 --> 00:20:54,640
so you imagine this thing can probably

544
00:20:51,670 --> 00:20:56,380
write to a container registry maybe it

545
00:20:54,640 --> 00:20:58,120
has access to a couple of other building

546
00:20:56,380 --> 00:20:59,560
type things that kind of makes sense

547
00:20:58,120 --> 00:21:02,260
it's behind the scenes it needs to do

548
00:20:59,560 --> 00:21:03,580
that to do its job

549
00:21:02,260 --> 00:21:07,179
but what's what's kind of interesting

550
00:21:03,580 --> 00:21:09,070
here is let's see we wire this up to a

551
00:21:07,179 --> 00:21:12,640
github repo and it takes a github repo

552
00:21:09,070 --> 00:21:14,620
and it builds the github repo based on

553
00:21:12,640 --> 00:21:16,720
the build steps you've given it what

554
00:21:14,620 --> 00:21:18,909
what what's what's going on behind the

555
00:21:16,720 --> 00:21:20,890
scenes there I can only guess but I'm

556
00:21:18,910 --> 00:21:22,870
imagining probably there's some behind

557
00:21:20,890 --> 00:21:24,460
the scenes VM that has this behind the

558
00:21:22,870 --> 00:21:26,860
scenes Google managed service account

559
00:21:24,460 --> 00:21:29,169
that's building your container and then

560
00:21:26,860 --> 00:21:30,760
it once it builds it publishes it to GCR

561
00:21:29,169 --> 00:21:33,520
using that service account and that

562
00:21:30,760 --> 00:21:35,230
service accounts privileged well what

563
00:21:33,520 --> 00:21:37,179
happens if your build steps try to reach

564
00:21:35,230 --> 00:21:39,429
out to the metadata API in this

565
00:21:37,179 --> 00:21:40,720
behind-the-scenes VM to the school

566
00:21:39,429 --> 00:21:42,340
manner service account that we're not

567
00:21:40,720 --> 00:21:45,070
meant to have access to is that

568
00:21:42,340 --> 00:21:48,220
something we can do as it turns out yes

569
00:21:45,070 --> 00:21:49,629
so this google managed service account

570
00:21:48,220 --> 00:21:51,040
that is the plumbing for the cloud that

571
00:21:49,630 --> 00:21:52,960
you're not allowed to modify and can't

572
00:21:51,040 --> 00:21:55,120
know the permissions for you can

573
00:21:52,960 --> 00:21:58,390
actually fetch a credential for it and

574
00:21:55,120 --> 00:22:00,459
you can use that credential if you just

575
00:21:58,390 --> 00:22:03,610
add a build step in your github repo to

576
00:22:00,460 --> 00:22:06,750
make a request to the metadata API if we

577
00:22:03,610 --> 00:22:10,270
have a demo of this so in this demo

578
00:22:06,750 --> 00:22:13,450
allison has a github repo that she's

579
00:22:10,270 --> 00:22:16,150
granted me access to she's just given me

580
00:22:13,450 --> 00:22:18,910
access to one branch and she's set up

581
00:22:16,150 --> 00:22:23,160
out build on it it's really nice and

582
00:22:18,910 --> 00:22:25,299
easy to use so I granted still an access

583
00:22:23,160 --> 00:22:28,360
yeah and if we just look at what her

584
00:22:25,299 --> 00:22:30,970
about code build steps are on the master

585
00:22:28,360 --> 00:22:32,889
branch we see that it's just using the

586
00:22:30,970 --> 00:22:35,020
standard configuration and it's the the

587
00:22:32,890 --> 00:22:36,610
hello world out of the box bog world

588
00:22:35,020 --> 00:22:39,100
configuration it's using the Builder

589
00:22:36,610 --> 00:22:40,870
script she didn't get me access to the

590
00:22:39,100 --> 00:22:43,750
master branch but by default I'll build

591
00:22:40,870 --> 00:22:45,939
works on all branches so now I'm just

592
00:22:43,750 --> 00:22:49,080
copying in my malicious cloud build

593
00:22:45,940 --> 00:22:51,540
steps which

594
00:22:49,080 --> 00:22:54,899
as you can see what this does is it uses

595
00:22:51,540 --> 00:22:56,760
an abundant container to run a malicious

596
00:22:54,900 --> 00:22:58,830
shell script before it uses the build

597
00:22:56,760 --> 00:23:00,420
container to publish the image and if we

598
00:22:58,830 --> 00:23:02,490
look at the shell script all it's doing

599
00:23:00,420 --> 00:23:04,410
is fetching a credential from the

600
00:23:02,490 --> 00:23:07,590
metadata and posting it to an attacker

601
00:23:04,410 --> 00:23:10,410
controlled site allison has not granted

602
00:23:07,590 --> 00:23:12,480
me any IAM capabilities to GCP at all

603
00:23:10,410 --> 00:23:15,870
all she's given me access to its one

604
00:23:12,480 --> 00:23:18,420
branch on a github repository so I'm

605
00:23:15,870 --> 00:23:20,159
creating this new branch or maybe she

606
00:23:18,420 --> 00:23:22,440
didn't give me access to master but I

607
00:23:20,160 --> 00:23:24,930
can create branches so creating an evil

608
00:23:22,440 --> 00:23:27,900
branch and I'm pushing up this malicious

609
00:23:24,930 --> 00:23:30,240
script and cloud build steps and now

610
00:23:27,900 --> 00:23:32,420
what we should see is behind the scenes

611
00:23:30,240 --> 00:23:35,670
system this infrastructure is running

612
00:23:32,420 --> 00:23:37,920
the build which should run the step that

613
00:23:35,670 --> 00:23:40,230
reaches out to the metadata API and

614
00:23:37,920 --> 00:23:45,270
posts the credential to this attacker

615
00:23:40,230 --> 00:23:46,380
controlled site the web hook here just

616
00:23:45,270 --> 00:23:48,030
takes a couple seconds for the fill to

617
00:23:46,380 --> 00:23:50,460
run but we should see it come through in

618
00:23:48,030 --> 00:23:51,840
a second at this point I may not even

619
00:23:50,460 --> 00:23:53,250
know that the PR has pushed I haven't

620
00:23:51,840 --> 00:23:54,899
had a chance to review the code I have

621
00:23:53,250 --> 00:23:56,340
no idea that the malicious script is

622
00:23:54,900 --> 00:23:58,950
actually being executed in my

623
00:23:56,340 --> 00:24:00,720
environment and so none of this has

624
00:23:58,950 --> 00:24:02,040
actually had I haven't had a chance to

625
00:24:00,720 --> 00:24:03,570
review it or know what's happening in my

626
00:24:02,040 --> 00:24:05,040
environment and assuming she didn't know

627
00:24:03,570 --> 00:24:06,389
that clever trick to see the roles of

628
00:24:05,040 --> 00:24:07,680
the service account she probably doesn't

629
00:24:06,390 --> 00:24:11,640
even know what the service account can

630
00:24:07,680 --> 00:24:15,810
do so the credential came through go

631
00:24:11,640 --> 00:24:17,460
ahead and copy that and then I will run

632
00:24:15,810 --> 00:24:19,169
the same command that I ran before of

633
00:24:17,460 --> 00:24:22,440
note if you remember from the previous

634
00:24:19,170 --> 00:24:24,930
slide what this service account can do

635
00:24:22,440 --> 00:24:26,610
it has both read and write two buckets

636
00:24:24,930 --> 00:24:29,220
and pub soap and a bunch of other stuff

637
00:24:26,610 --> 00:24:30,750
so here I'm listing all the buckets and

638
00:24:29,220 --> 00:24:33,180
we see the container registry bucket

639
00:24:30,750 --> 00:24:35,730
there so I have redone right to the

640
00:24:33,180 --> 00:24:37,440
artifact bucket but we also see that

641
00:24:35,730 --> 00:24:39,150
other one the passwords in social

642
00:24:37,440 --> 00:24:40,890
security bucket and I may have a lot of

643
00:24:39,150 --> 00:24:42,390
different resources in my project where

644
00:24:40,890 --> 00:24:43,270
I'm running this cloud build service but

645
00:24:42,390 --> 00:24:45,430
I really only meant

646
00:24:43,270 --> 00:24:47,530
to give Dylan access to actually just

647
00:24:45,430 --> 00:24:57,490
try and like build container images not

648
00:24:47,530 --> 00:24:58,660
access any of my project resources so

649
00:24:57,490 --> 00:25:00,670
just a recap

650
00:24:58,660 --> 00:25:04,420
she gave me access to a single repo gave

651
00:25:00,670 --> 00:25:06,130
me no GCP capabilities whatsoever the

652
00:25:04,420 --> 00:25:07,540
repo had cloud build enabled which means

653
00:25:06,130 --> 00:25:08,770
all it's doing is it's taking what's

654
00:25:07,540 --> 00:25:11,649
there and it's publishing it to their

655
00:25:08,770 --> 00:25:14,020
GCR their container registry and then

656
00:25:11,650 --> 00:25:15,430
behind the scenes we can sort of grab

657
00:25:14,020 --> 00:25:17,200
one of these ghosts google managed

658
00:25:15,430 --> 00:25:19,030
service accounts in the midst of that

659
00:25:17,200 --> 00:25:22,420
and then give myself privileged to her

660
00:25:19,030 --> 00:25:25,149
GCP infrastructure so again recapping

661
00:25:22,420 --> 00:25:27,310
how is this different from AWS its these

662
00:25:25,150 --> 00:25:28,900
default identities these identities to

663
00:25:27,310 --> 00:25:30,669
have privilege without you granting them

664
00:25:28,900 --> 00:25:32,830
privilege and in the case of the Google

665
00:25:30,670 --> 00:25:34,270
managed ones they have privilege that

666
00:25:32,830 --> 00:25:35,649
you can't actually view you can't see

667
00:25:34,270 --> 00:25:38,980
what their roles are without the the

668
00:25:35,650 --> 00:25:40,000
trick that Alison showed before and so

669
00:25:38,980 --> 00:25:42,910
we want to be able to actually identify

670
00:25:40,000 --> 00:25:44,470
this information or any of these

671
00:25:42,910 --> 00:25:47,290
potentially malicious queries that are

672
00:25:44,470 --> 00:25:48,850
happening so with Google internal

673
00:25:47,290 --> 00:25:51,639
like built-in services you can use stack

674
00:25:48,850 --> 00:25:53,409
driver and monitor the way that the API

675
00:25:51,640 --> 00:25:55,240
behaves and the service behaves and

676
00:25:53,410 --> 00:25:58,000
attempt to identify any potentially like

677
00:25:55,240 --> 00:26:02,410
anomalous behavior in this example where

678
00:25:58,000 --> 00:26:06,070
I was looking for a request from the

679
00:26:02,410 --> 00:26:07,960
cloud build API service account so the

680
00:26:06,070 --> 00:26:10,750
Google managed service account that came

681
00:26:07,960 --> 00:26:14,170
from an IP that is not actually usually

682
00:26:10,750 --> 00:26:16,120
logged in any of the requests yeah so an

683
00:26:14,170 --> 00:26:18,490
IP that that doesn't come from Google

684
00:26:16,120 --> 00:26:20,199
infrastructure it's probably suspicious

685
00:26:18,490 --> 00:26:22,900
because it's plumbing it's supposed to

686
00:26:20,200 --> 00:26:24,250
always be behind the scenes in Google so

687
00:26:22,900 --> 00:26:26,800
somebody grabbed this credential and ran

688
00:26:24,250 --> 00:26:28,810
it outside of Google probably malicious

689
00:26:26,800 --> 00:26:31,419
and this we could see here she caught me

690
00:26:28,810 --> 00:26:32,770
she was able to find I used this IP

691
00:26:31,420 --> 00:26:35,890
address outside of Google infrastructure

692
00:26:32,770 --> 00:26:39,970
I ran this malicious list command she

693
00:26:35,890 --> 00:26:42,250
was able to detect about us so the event

694
00:26:39,970 --> 00:26:44,890
threat detection API is this API that

695
00:26:42,250 --> 00:26:47,380
Google is rolling out and it's meant to

696
00:26:44,890 --> 00:26:48,190
detect badness via looking at your stock

697
00:26:47,380 --> 00:26:49,460
driver logs

698
00:26:48,190 --> 00:26:51,350
they've got

699
00:26:49,460 --> 00:26:52,970
some queries they use behind the scenes

700
00:26:51,350 --> 00:26:54,830
to do that here are all the things that

701
00:26:52,970 --> 00:26:56,630
can do today you might see that I am

702
00:26:54,830 --> 00:26:58,760
anomalous grant and think hey maybe this

703
00:26:56,630 --> 00:27:00,260
can help well that's actually used to

704
00:26:58,760 --> 00:27:02,390
detect whether or not things outside

705
00:27:00,260 --> 00:27:04,070
your org have role bindings inside your

706
00:27:02,390 --> 00:27:06,440
org like if I were to add a random gmail

707
00:27:04,070 --> 00:27:08,029
account to my org so it would not

708
00:27:06,440 --> 00:27:10,760
actually be able to detect me grabbing a

709
00:27:08,029 --> 00:27:11,899
credential for this service account but

710
00:27:10,760 --> 00:27:15,320
they're actively working on this product

711
00:27:11,899 --> 00:27:16,668
and we can expect to see more of these

712
00:27:15,320 --> 00:27:20,270
Google of these things kind of built

713
00:27:16,669 --> 00:27:22,039
into the product in the future so we

714
00:27:20,270 --> 00:27:23,210
also were wondering is there a holistic

715
00:27:22,039 --> 00:27:24,770
way that we could attempt to view this

716
00:27:23,210 --> 00:27:27,620
information across all of our resources

717
00:27:24,770 --> 00:27:29,629
so we went towards doing kind of like

718
00:27:27,620 --> 00:27:32,090
Network level monitoring so we looked

719
00:27:29,630 --> 00:27:33,710
into what it's google recommend to

720
00:27:32,090 --> 00:27:36,139
actually identify queries against the

721
00:27:33,710 --> 00:27:38,179
metadata API when they are rolling up

722
00:27:36,140 --> 00:27:40,669
the transition from the v01 2v1

723
00:27:38,179 --> 00:27:42,470
endpoints they recommended using end

724
00:27:40,669 --> 00:27:44,720
prep in audit D so you do instance level

725
00:27:42,470 --> 00:27:46,700
monitoring and it will actually capture

726
00:27:44,720 --> 00:27:49,279
the metadata queries and you can see

727
00:27:46,700 --> 00:27:50,990
based on these these tools you can kind

728
00:27:49,279 --> 00:27:52,429
of like log from the instance if

729
00:27:50,990 --> 00:27:54,740
someone's accessing maybe a service

730
00:27:52,429 --> 00:27:56,750
count path or a token path but this is

731
00:27:54,740 --> 00:28:00,529
only you'd only leverage this on an

732
00:27:56,750 --> 00:28:01,669
instance that you can run code on so we

733
00:28:00,529 --> 00:28:03,770
know that network monitoring is

734
00:28:01,669 --> 00:28:05,090
difficult you can run code on the

735
00:28:03,770 --> 00:28:07,279
instances that can report on this

736
00:28:05,090 --> 00:28:10,370
information and attempt to identify any

737
00:28:07,279 --> 00:28:13,460
malicious like activity or any malicious

738
00:28:10,370 --> 00:28:14,479
traffic but something to know there you

739
00:28:13,460 --> 00:28:15,919
can't view this information with flow

740
00:28:14,480 --> 00:28:17,720
logs and it's actually not captured in

741
00:28:15,919 --> 00:28:21,429
packet mirroring so if you pack it a few

742
00:28:17,720 --> 00:28:23,690
mirror instances traffic the metadata

743
00:28:21,429 --> 00:28:27,289
requests are actually emitted from any

744
00:28:23,690 --> 00:28:29,480
of the mirror traffic so what do we

745
00:28:27,289 --> 00:28:31,340
recommend well those user controlled

746
00:28:29,480 --> 00:28:33,860
service accounts you can desculpe them

747
00:28:31,340 --> 00:28:35,689
and not have to worry as much about it

748
00:28:33,860 --> 00:28:37,668
breaking things some things actually do

749
00:28:35,690 --> 00:28:39,799
rely on them but they're meant to be a

750
00:28:37,669 --> 00:28:41,840
little more in your control you can also

751
00:28:39,799 --> 00:28:43,279
have things not rely on those default

752
00:28:41,840 --> 00:28:45,350
identities when you spend the ends up

753
00:28:43,279 --> 00:28:47,179
the default identity gets attached but

754
00:28:45,350 --> 00:28:50,510
you could attach another one we

755
00:28:47,179 --> 00:28:52,789
recommend and also we mentioned before

756
00:28:50,510 --> 00:28:55,549
some words just throw everything in one

757
00:28:52,789 --> 00:28:57,500
GSP project use them as isolation if

758
00:28:55,549 --> 00:28:59,559
you've got a logically separated service

759
00:28:57,500 --> 00:29:01,269
put it in its own project

760
00:28:59,559 --> 00:29:02,590
in case of cloud build allison grammy

761
00:29:01,269 --> 00:29:03,820
access to cloud build and had the

762
00:29:02,590 --> 00:29:06,158
passwords and Social Security numbers

763
00:29:03,820 --> 00:29:07,720
bucket maybe that should be in a

764
00:29:06,159 --> 00:29:09,789
different project that bucket from the

765
00:29:07,720 --> 00:29:11,409
build project so another thing you can

766
00:29:09,789 --> 00:29:12,999
do is just attempt to identify any of

767
00:29:11,409 --> 00:29:15,940
the behavior that these services or

768
00:29:12,999 --> 00:29:17,590
service accounts like perform so you can

769
00:29:15,940 --> 00:29:20,169
use something like I am recommender or

770
00:29:17,590 --> 00:29:21,908
you can just kind of view the stack

771
00:29:20,169 --> 00:29:23,379
driver logs to identify what are they

772
00:29:21,909 --> 00:29:25,899
accessing what are they doing so you can

773
00:29:23,379 --> 00:29:28,600
identify the access patterns and also

774
00:29:25,899 --> 00:29:31,090
per the GK demo you can leverage the

775
00:29:28,600 --> 00:29:32,168
mitigations that they have in place the

776
00:29:31,090 --> 00:29:34,990
different mitigations do different

777
00:29:32,169 --> 00:29:37,440
things so I would defer to the official

778
00:29:34,990 --> 00:29:40,419
documentation on how to configure them

779
00:29:37,440 --> 00:29:43,029
and then here's the link to the repost

780
00:29:40,419 --> 00:29:44,860
that we posted before we'll be

781
00:29:43,029 --> 00:29:47,200
committing word event later today but

782
00:29:44,860 --> 00:29:54,570
you can access them a little bit later

783
00:29:47,200 --> 00:30:02,220
but feel free to take for now so much

784
00:29:54,570 --> 00:30:02,220
[Applause]

