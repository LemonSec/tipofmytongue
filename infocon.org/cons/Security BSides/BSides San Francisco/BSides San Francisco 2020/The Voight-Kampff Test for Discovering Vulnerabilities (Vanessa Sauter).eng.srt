1
00:00:00,000 --> 00:00:06,720
hi okay so my name is Vanessa Sauter I'm

2
00:00:04,859 --> 00:00:09,570
super excited to be here today

3
00:00:06,720 --> 00:00:11,820
I come from cobalt IO we are pen testing

4
00:00:09,570 --> 00:00:14,370
as a service startup based a few blocks

5
00:00:11,820 --> 00:00:16,289
away today we are going to build the

6
00:00:14,370 --> 00:00:18,210
voight-komp tests for web application

7
00:00:16,289 --> 00:00:20,580
vulnerabilities does anyone know what

8
00:00:18,210 --> 00:00:22,410
that is or am I just like super nerdy do

9
00:00:20,580 --> 00:00:24,810
we know okay okay cool it's Blade Runner

10
00:00:22,410 --> 00:00:27,210
theme so I apologies this my apologies

11
00:00:24,810 --> 00:00:30,840
this is a very nerdy talk and I'm a very

12
00:00:27,210 --> 00:00:32,940
nerdy person alright so a little bit

13
00:00:30,840 --> 00:00:34,140
about me and got started let's see this

14
00:00:32,940 --> 00:00:39,540
is gonna work

15
00:00:34,140 --> 00:00:47,670
one second yeah

16
00:00:39,540 --> 00:00:50,370
sorry guys yeah yeah alright cool so as

17
00:00:47,670 --> 00:00:51,960
I said my name is Vanessa I don't

18
00:00:50,370 --> 00:00:53,910
actually know if I'm replicant or

19
00:00:51,960 --> 00:00:56,520
organic the Tyrell corporation has not

20
00:00:53,910 --> 00:00:59,640
tested me yet but I'm gonna take a safe

21
00:00:56,520 --> 00:01:01,320
bet that I'm probably organic I used to

22
00:00:59,640 --> 00:01:03,329
work at Brookings and the Aspen

23
00:01:01,320 --> 00:01:06,150
Institute my focus was cybersecurity

24
00:01:03,329 --> 00:01:08,010
policy within the parameters of national

25
00:01:06,150 --> 00:01:10,140
security a lot of the work that I did

26
00:01:08,010 --> 00:01:14,729
was focused on the tribe motivations

27
00:01:10,140 --> 00:01:16,439
behind apts and from that I I looked at

28
00:01:14,729 --> 00:01:17,880
the value of vulnerabilities and

29
00:01:16,439 --> 00:01:20,639
thinking about how vulnerabilities

30
00:01:17,880 --> 00:01:23,250
intersect with the way that apts operate

31
00:01:20,640 --> 00:01:25,110
and now I'm a cobalt I moved to San

32
00:01:23,250 --> 00:01:26,460
Francisco about six months ago and I am

33
00:01:25,110 --> 00:01:27,650
super excited about the work I'm doing

34
00:01:26,460 --> 00:01:30,210
right now

35
00:01:27,650 --> 00:01:32,009
my co researcher on this talk he's not

36
00:01:30,210 --> 00:01:34,530
here today he's faced in Virginia is

37
00:01:32,009 --> 00:01:37,350
Travis McCormack he is a technical

38
00:01:34,530 --> 00:01:39,329
program manager a cobalt what I would

39
00:01:37,350 --> 00:01:41,970
call a Shepherd of our pen test and our

40
00:01:39,329 --> 00:01:44,250
pen testers he's a badass data Wrangler

41
00:01:41,970 --> 00:01:47,610
and a former lead specialist of security

42
00:01:44,250 --> 00:01:51,149
testing at Walmart and helped me a lot

43
00:01:47,610 --> 00:01:51,509
mostly with the data for this talk all

44
00:01:51,149 --> 00:01:54,299
right

45
00:01:51,509 --> 00:01:57,899
let's kick it off why does method matter

46
00:01:54,299 --> 00:01:59,850
in other words who the hell cares if a

47
00:01:57,899 --> 00:02:03,119
machine or human finds the

48
00:01:59,850 --> 00:02:05,729
vulnerabilities of all is a vomb right

49
00:02:03,119 --> 00:02:07,710
does it really matter in the end the

50
00:02:05,729 --> 00:02:12,060
method through which a vulnerability is

51
00:02:07,710 --> 00:02:13,440
reported so I think what we actually

52
00:02:12,060 --> 00:02:16,830
need to ask

53
00:02:13,440 --> 00:02:19,710
a two-part question the question of

54
00:02:16,830 --> 00:02:22,650
human or machine goes further than this

55
00:02:19,710 --> 00:02:23,490
I recently finished a book called of the

56
00:02:22,650 --> 00:02:26,100
dead cow

57
00:02:23,490 --> 00:02:29,100
and what author Jomon encapsulate so

58
00:02:26,100 --> 00:02:31,530
well is the curiosity and joy of

59
00:02:29,100 --> 00:02:34,950
breaking things it is part of the human

60
00:02:31,530 --> 00:02:37,470
condition some of you in this room may

61
00:02:34,950 --> 00:02:40,109
viscerally understand the high from

62
00:02:37,470 --> 00:02:43,620
finding an exploit and find the light in

63
00:02:40,110 --> 00:02:46,500
the unexpected path it takes you others

64
00:02:43,620 --> 00:02:49,980
like myself may aspire to one day

65
00:02:46,500 --> 00:02:53,430
achieve that kind of rush this talk in

66
00:02:49,980 --> 00:02:56,040
part is a recognition of that joy it is

67
00:02:53,430 --> 00:02:59,370
a celebration of human curiosity and

68
00:02:56,040 --> 00:03:01,950
perseverance okay but on a much more

69
00:02:59,370 --> 00:03:04,440
pragmatic level there is also a very

70
00:03:01,950 --> 00:03:07,410
legitimate business case for discerning

71
00:03:04,440 --> 00:03:09,060
between human and machine analysts

72
00:03:07,410 --> 00:03:11,850
predict the global application security

73
00:03:09,060 --> 00:03:15,650
market will reach up to nine point six

74
00:03:11,850 --> 00:03:18,690
four billion dollars by the end of 2023

75
00:03:15,650 --> 00:03:21,030
that's a compound annual growth rate of

76
00:03:18,690 --> 00:03:23,160
twenty five point nine five percent in

77
00:03:21,030 --> 00:03:25,800
industry that's nearly ten billion

78
00:03:23,160 --> 00:03:27,480
dollars that's huge and the

79
00:03:25,800 --> 00:03:29,630
market is kept rising to the demand

80
00:03:27,480 --> 00:03:32,090
today there are hundreds of companies

81
00:03:29,630 --> 00:03:35,010
geared toward application security

82
00:03:32,090 --> 00:03:37,170
scanners that cost tens or even hundreds

83
00:03:35,010 --> 00:03:39,660
of thousands of dollars are competing

84
00:03:37,170 --> 00:03:41,940
against open source tools the efficacy

85
00:03:39,660 --> 00:03:43,140
of some of these tools it remains a

86
00:03:41,940 --> 00:03:45,690
little bit unclear we'll get a little

87
00:03:43,140 --> 00:03:47,850
bit more into that later freelancers are

88
00:03:45,690 --> 00:03:49,859
looking for the same bugs that a

89
00:03:47,850 --> 00:03:51,680
specialized pentester working for a

90
00:03:49,860 --> 00:03:54,390
consultancy is searching for

91
00:03:51,680 --> 00:03:57,450
results-oriented work is now pitted

92
00:03:54,390 --> 00:03:59,640
against time box work the question of

93
00:03:57,450 --> 00:04:02,070
human and machine is now a question of

94
00:03:59,640 --> 00:04:05,250
ascertaining value in a results-driven

95
00:04:02,070 --> 00:04:07,260
market it's now part of the strategy for

96
00:04:05,250 --> 00:04:10,230
choosing vendors allocating resources

97
00:04:07,260 --> 00:04:13,380
and determining the best use for info

98
00:04:10,230 --> 00:04:17,909
sex greatest scarcity which is time so

99
00:04:13,380 --> 00:04:20,040
let's dive in I chose web application

100
00:04:17,910 --> 00:04:22,380
vulnerabilities for a reason from the

101
00:04:20,040 --> 00:04:25,229
data I can find web apps continue to be

102
00:04:22,380 --> 00:04:26,600
the most tested across the board as you

103
00:04:25,229 --> 00:04:29,120
can see here for coal

104
00:04:26,600 --> 00:04:31,520
more than 65% of our pen test conducted

105
00:04:29,120 --> 00:04:34,280
last year were web apps for web apps and

106
00:04:31,520 --> 00:04:36,740
api's okay so that's Cobalt but what

107
00:04:34,280 --> 00:04:38,299
about bug bounty it's the same hacker

108
00:04:36,740 --> 00:04:40,970
one says bug bounty hunters

109
00:04:38,300 --> 00:04:43,790
predominantly hack web apps for bug

110
00:04:40,970 --> 00:04:46,910
crowd 90% of the targets were also web

111
00:04:43,790 --> 00:04:48,650
apps I would love to see some research

112
00:04:46,910 --> 00:04:51,350
on other targets like internal or

113
00:04:48,650 --> 00:04:52,849
external networks or cloud but for the

114
00:04:51,350 --> 00:04:54,740
purpose of this talk we're sticking to

115
00:04:52,850 --> 00:04:57,050
web apps I think it could be a great

116
00:04:54,740 --> 00:04:59,390
potential future research project for me

117
00:04:57,050 --> 00:05:02,360
or anyone else to think about other

118
00:04:59,390 --> 00:05:03,800
types of applications cloud or external

119
00:05:02,360 --> 00:05:08,750
internal networks but for right now it's

120
00:05:03,800 --> 00:05:11,420
just web apps okay a little bit about

121
00:05:08,750 --> 00:05:13,720
this research the scope of this research

122
00:05:11,420 --> 00:05:15,860
is dynamic scanning and blackbox testing

123
00:05:13,720 --> 00:05:17,750
this includes and this is really

124
00:05:15,860 --> 00:05:19,730
important this includes out-of-band

125
00:05:17,750 --> 00:05:21,890
scanning which finds Vons like

126
00:05:19,730 --> 00:05:24,260
second-order or blonde ii or sequel or

127
00:05:21,890 --> 00:05:26,659
blind cross-site scripting I'm gonna get

128
00:05:24,260 --> 00:05:28,430
into that a little bit more later so we

129
00:05:26,660 --> 00:05:31,250
wanted to answer three questions for

130
00:05:28,430 --> 00:05:33,650
this research one won't foe know but

131
00:05:31,250 --> 00:05:36,590
what vulnerabilities can dynamic

132
00:05:33,650 --> 00:05:38,810
scanners find - what are the

133
00:05:36,590 --> 00:05:40,940
vulnerabilities that only humans can

134
00:05:38,810 --> 00:05:44,630
find meaning dynamic scanners cannot

135
00:05:40,940 --> 00:05:46,250
reliably find them three what are the

136
00:05:44,630 --> 00:05:49,219
vulnerabilities for which scanners will

137
00:05:46,250 --> 00:05:51,110
not automatically populate results but

138
00:05:49,220 --> 00:05:53,270
where automated tools can enhance

139
00:05:51,110 --> 00:05:56,750
efficiency to conduct further

140
00:05:53,270 --> 00:05:59,030
exploitation so we generated input from

141
00:05:56,750 --> 00:06:03,010
cobalt score which is our pool of

142
00:05:59,030 --> 00:06:05,840
roughly 300 freelance vetted pen testers

143
00:06:03,010 --> 00:06:07,370
full caveat they had a lot of opinions

144
00:06:05,840 --> 00:06:09,560
about this and there was a ton of

145
00:06:07,370 --> 00:06:11,270
disagreement which is great it

146
00:06:09,560 --> 00:06:14,300
definitely generated some conversation

147
00:06:11,270 --> 00:06:17,150
and then the examples I pulled I relied

148
00:06:14,300 --> 00:06:18,080
on public bug bounty reports Oh wasp and

149
00:06:17,150 --> 00:06:20,599
ports Witter

150
00:06:18,080 --> 00:06:22,729
the researcher in me would have loved to

151
00:06:20,600 --> 00:06:24,740
pull from cobots results but we actually

152
00:06:22,730 --> 00:06:26,930
don't disclose customer vulnerabilities

153
00:06:24,740 --> 00:06:28,970
even if they're anonymous so we relied

154
00:06:26,930 --> 00:06:32,300
on public reports which are actually

155
00:06:28,970 --> 00:06:34,970
really great for this purpose and of

156
00:06:32,300 --> 00:06:37,630
course humans can have a little proxy as

157
00:06:34,970 --> 00:06:37,630
a treat

158
00:06:39,830 --> 00:06:42,840
okay

159
00:06:41,040 --> 00:06:45,150
so what kind of web app vulnerabilities

160
00:06:42,840 --> 00:06:48,030
is Cobell Friday first off we're finding

161
00:06:45,150 --> 00:06:50,940
a lot msconfig continues to dominate

162
00:06:48,030 --> 00:06:52,890
it's a pretty broad category the ranges

163
00:06:50,940 --> 00:06:57,240
from cookie attributes to business logic

164
00:06:52,890 --> 00:06:59,640
bypass wasp with lists msconfig as

165
00:06:57,240 --> 00:07:01,710
number six in its top ten web app

166
00:06:59,640 --> 00:07:02,310
security risks but for the second year

167
00:07:01,710 --> 00:07:04,830
in a row

168
00:07:02,310 --> 00:07:06,890
miss configuration leads in our findings

169
00:07:04,830 --> 00:07:09,030
followed by cross-site scripting attacks

170
00:07:06,890 --> 00:07:10,349
my apologies for the labeling it's a

171
00:07:09,030 --> 00:07:13,049
little bit hard to see so I'm just gonna

172
00:07:10,350 --> 00:07:14,970
clarify for all of you top is Miss

173
00:07:13,050 --> 00:07:17,100
configuration followed by a cross-site

174
00:07:14,970 --> 00:07:20,610
scripting authentication in sessions

175
00:07:17,100 --> 00:07:22,620
other sensitive data exposure missing

176
00:07:20,610 --> 00:07:24,750
access controls and secure object

177
00:07:22,620 --> 00:07:26,990
reference components with known

178
00:07:24,750 --> 00:07:29,850
vulnerabilities redirects and Ford's

179
00:07:26,990 --> 00:07:32,030
server-side request forgery and finally

180
00:07:29,850 --> 00:07:36,120
our favorite RCE

181
00:07:32,030 --> 00:07:38,489
okay that's it let's dive in so here's

182
00:07:36,120 --> 00:07:39,960
where the machine went you can take a

183
00:07:38,490 --> 00:07:41,850
look at this list I'm not gonna read it

184
00:07:39,960 --> 00:07:45,450
out for you I'm gonna dive a little bit

185
00:07:41,850 --> 00:07:47,490
into why the machine wins here dynamic

186
00:07:45,450 --> 00:07:50,610
scanners work by injecting malicious

187
00:07:47,490 --> 00:07:52,280
payloads they test access points when

188
00:07:50,610 --> 00:07:55,080
they are communicating with a front-end

189
00:07:52,280 --> 00:07:57,330
scanners are programmed to understand

190
00:07:55,080 --> 00:07:59,700
arguments and function calls so they can

191
00:07:57,330 --> 00:08:01,800
detect Vaughan's and headers verbs and

192
00:07:59,700 --> 00:08:04,409
fragments they can also identify some

193
00:08:01,800 --> 00:08:06,470
miss configurations and they can find

194
00:08:04,410 --> 00:08:09,240
components with known vulnerabilities

195
00:08:06,470 --> 00:08:10,800
one of the disagreements we've had with

196
00:08:09,240 --> 00:08:13,230
our pen testers and with people i've

197
00:08:10,800 --> 00:08:15,630
talked to as a whole is whether scanners

198
00:08:13,230 --> 00:08:17,490
could reliably find trickier

199
00:08:15,630 --> 00:08:20,520
vulnerabilities like second-order sequel

200
00:08:17,490 --> 00:08:22,050
or blind cross-site scripting a standard

201
00:08:20,520 --> 00:08:24,630
cross-site scripting or sequel attack

202
00:08:22,050 --> 00:08:26,490
for instance produces an immediate

203
00:08:24,630 --> 00:08:29,820
result like an alert prompt that says

204
00:08:26,490 --> 00:08:32,549
hello world or data spilled into an

205
00:08:29,820 --> 00:08:34,830
input field when you see that you can

206
00:08:32,549 --> 00:08:37,530
immediately recognize the success of a

207
00:08:34,830 --> 00:08:39,810
payload but what happens when a payload

208
00:08:37,530 --> 00:08:41,819
is successfully injected but the

209
00:08:39,809 --> 00:08:44,430
vulnerabilities output isn't produced

210
00:08:41,820 --> 00:08:46,890
immediately blind vulnerabilities mean

211
00:08:44,430 --> 00:08:49,109
the request response is obfuscated in

212
00:08:46,890 --> 00:08:49,750
some way making it difficult or

213
00:08:49,110 --> 00:08:52,210
impossible

214
00:08:49,750 --> 00:08:54,580
to interpret out-of-band vulnerabilities

215
00:08:52,210 --> 00:08:56,320
means a response does not return within

216
00:08:54,580 --> 00:08:59,680
the same interface through which the

217
00:08:56,320 --> 00:09:01,780
attack was sent with blind or out honor

218
00:08:59,680 --> 00:09:03,880
abilities you won't see the

219
00:09:01,780 --> 00:09:06,130
vulnerabilities output immediately I

220
00:09:03,880 --> 00:09:09,070
think many people here assume at that

221
00:09:06,130 --> 00:09:10,720
point that the machine would not win but

222
00:09:09,070 --> 00:09:12,730
this is often because the application

223
00:09:10,720 --> 00:09:15,160
activates the payload at a later point

224
00:09:12,730 --> 00:09:17,260
thus requiring the pen tester to have

225
00:09:15,160 --> 00:09:19,449
back-end knowledge of the system to know

226
00:09:17,260 --> 00:09:21,910
if the payload was successful if there's

227
00:09:19,450 --> 00:09:25,780
no echo in the cave are you yelling loud

228
00:09:21,910 --> 00:09:27,310
enough or is it actually a tunnel I've

229
00:09:25,780 --> 00:09:30,430
concluded that for the purpose of this

230
00:09:27,310 --> 00:09:33,219
research the answer is yes machines are

231
00:09:30,430 --> 00:09:35,530
awarded blind second-order or otherwise

232
00:09:33,220 --> 00:09:37,570
out-of-band vulnerabilities that can be

233
00:09:35,530 --> 00:09:40,780
used with a certain type of dynamic

234
00:09:37,570 --> 00:09:42,550
scanner or out-of-band scanner okay so

235
00:09:40,780 --> 00:09:46,030
I'm sure you're wondering why the

236
00:09:42,550 --> 00:09:48,280
asterisk scanners still require manual

237
00:09:46,030 --> 00:09:50,709
setup and they produce a significant

238
00:09:48,280 --> 00:09:52,959
number of vulnerabilities so a human

239
00:09:50,710 --> 00:09:55,480
will still have to configure any scanner

240
00:09:52,960 --> 00:09:58,089
and sit the results but for the purpose

241
00:09:55,480 --> 00:10:00,310
of finding vulnerabilities the list that

242
00:09:58,089 --> 00:10:03,250
I provided is an exhausted display of

243
00:10:00,310 --> 00:10:06,130
what scanners can find relatively easily

244
00:10:03,250 --> 00:10:08,350
but of course don't be fooled we all

245
00:10:06,130 --> 00:10:11,550
know who's pulling the strings I really

246
00:10:08,350 --> 00:10:11,550
hope it's not the Tyrell corporation

247
00:10:11,790 --> 00:10:16,150
okay there can be an entire talk on the

248
00:10:14,500 --> 00:10:17,560
efficacy of certain scanners over others

249
00:10:16,150 --> 00:10:19,870
and there's actually a lot of great

250
00:10:17,560 --> 00:10:22,150
research out there I just included a

251
00:10:19,870 --> 00:10:23,890
couple lists of just like open source

252
00:10:22,150 --> 00:10:27,069
scanners that you can use that are

253
00:10:23,890 --> 00:10:28,960
actually really reliable some companies

254
00:10:27,070 --> 00:10:30,940
claim their tools can find certain

255
00:10:28,960 --> 00:10:31,990
vulnerabilities and then others might

256
00:10:30,940 --> 00:10:34,060
dispute those claims

257
00:10:31,990 --> 00:10:36,280
I'm not saying some of these companies

258
00:10:34,060 --> 00:10:39,969
are lying but I will say that the

259
00:10:36,280 --> 00:10:42,189
results can prove inconsistent yes maybe

260
00:10:39,970 --> 00:10:45,700
a scanner could find a certain type of

261
00:10:42,190 --> 00:10:48,010
vulnerability but with a high false

262
00:10:45,700 --> 00:10:51,070
positive rate or a slim success rate or

263
00:10:48,010 --> 00:10:53,439
with a ton of configuration like hours

264
00:10:51,070 --> 00:10:54,880
upon hours of configuration maybe a

265
00:10:53,440 --> 00:10:57,310
scanner could find a certain type of

266
00:10:54,880 --> 00:10:59,080
vaughan this is where it gets a little

267
00:10:57,310 --> 00:11:00,640
bit tricky here and I'm gonna get into a

268
00:10:59,080 --> 00:11:02,470
little bit more detail why later in

269
00:11:00,640 --> 00:11:04,180
another slide

270
00:11:02,470 --> 00:11:06,490
I highly run I highly recommend checking

271
00:11:04,180 --> 00:11:08,349
out Shea Chan's research comparing the

272
00:11:06,490 --> 00:11:10,000
price and features of webapp scanners on

273
00:11:08,350 --> 00:11:11,230
the market both commercial and open

274
00:11:10,000 --> 00:11:14,740
source there's actually some really

275
00:11:11,230 --> 00:11:18,520
great research being done on this um I

276
00:11:14,740 --> 00:11:20,290
want to pause right now and ask what

277
00:11:18,520 --> 00:11:21,210
vulnerabilities do you think humans went

278
00:11:20,290 --> 00:11:26,069
up

279
00:11:21,210 --> 00:11:32,550
you can shout it out business logic okay

280
00:11:26,070 --> 00:11:39,690
any other phone in the back what was it

281
00:11:32,550 --> 00:11:41,199
access control okay anyone else what

282
00:11:39,690 --> 00:11:47,050
sequel injection

283
00:11:41,200 --> 00:11:48,670
okay one more social triggering doesn't

284
00:11:47,050 --> 00:11:56,500
count because its Web Apps but I like

285
00:11:48,670 --> 00:12:00,630
that thought yes so chained exploits

286
00:11:56,500 --> 00:12:05,440
basically complex well okay anyone else

287
00:12:00,630 --> 00:12:08,560
idea war all right okay we've got we've

288
00:12:05,440 --> 00:12:11,860
got a pretty we've got a quorum of ideas

289
00:12:08,560 --> 00:12:13,750
here okay here's the list of

290
00:12:11,860 --> 00:12:17,910
vulnerabilities among our pen testers

291
00:12:13,750 --> 00:12:21,370
that we could agree only humans can find

292
00:12:17,910 --> 00:12:25,390
business logic bypass race conditions

293
00:12:21,370 --> 00:12:27,550
and chained exploits like I said there

294
00:12:25,390 --> 00:12:30,100
was not consensus so we what we had to

295
00:12:27,550 --> 00:12:32,770
do was boil it down to basically the

296
00:12:30,100 --> 00:12:35,230
three that everyone could agree on that

297
00:12:32,770 --> 00:12:36,939
was this list so now I'm gonna pull some

298
00:12:35,230 --> 00:12:42,400
cool examples just to show how these

299
00:12:36,940 --> 00:12:44,980
exploits work so a couple excuse me a

300
00:12:42,400 --> 00:12:48,010
few years ago a handful of core pastors

301
00:12:44,980 --> 00:12:49,540
worked on a bug bounty for uber what

302
00:12:48,010 --> 00:12:52,569
they found was a pretty interesting

303
00:12:49,540 --> 00:12:55,060
business logic bypass that then someone

304
00:12:52,570 --> 00:12:58,870
mentioned idor then then led to an idea

305
00:12:55,060 --> 00:13:00,760
waar okay so how did they do it first

306
00:12:58,870 --> 00:13:03,370
they figured out that any user could

307
00:13:00,760 --> 00:13:05,380
create a driver account but that account

308
00:13:03,370 --> 00:13:07,360
could it be activated until uber

309
00:13:05,380 --> 00:13:08,680
verified their driver documents that

310
00:13:07,360 --> 00:13:09,970
seems reasonable right like you want

311
00:13:08,680 --> 00:13:12,880
your uber driver to actually have a

312
00:13:09,970 --> 00:13:16,029
driver's license you couldn't access

313
00:13:12,880 --> 00:13:18,759
app until you were verified or at least

314
00:13:16,029 --> 00:13:20,620
that's what you were intended when

315
00:13:18,759 --> 00:13:23,709
looking at the request screenshot on the

316
00:13:20,620 --> 00:13:27,100
left there was a parameter called allow

317
00:13:23,709 --> 00:13:29,439
not activated that was set to false so

318
00:13:27,100 --> 00:13:32,019
what happens if you set it to true they

319
00:13:29,440 --> 00:13:34,630
obtained a valid session token no wanna

320
00:13:32,019 --> 00:13:37,420
and the response there was a field

321
00:13:34,630 --> 00:13:39,579
called is activated it was set to false

322
00:13:37,420 --> 00:13:42,130
but when they changed it to true they

323
00:13:39,579 --> 00:13:43,779
were able to access the driver app this

324
00:13:42,130 --> 00:13:46,660
later allowed them to access another

325
00:13:43,779 --> 00:13:49,810
driver's name license plate last trip

326
00:13:46,660 --> 00:13:52,719
UUID last passenger name number of

327
00:13:49,810 --> 00:13:59,258
passengers origins and trip destination

328
00:13:52,720 --> 00:14:01,930
through an ID of our okay as my

329
00:13:59,259 --> 00:14:04,690
colleague Travis likes to say building

330
00:14:01,930 --> 00:14:07,300
stuff is hard it's really friggin hard

331
00:14:04,690 --> 00:14:09,730
it's way easier to break things and to

332
00:14:07,300 --> 00:14:12,609
build things so business logic attacks

333
00:14:09,730 --> 00:14:14,709
exploit design flaws or unintended abuse

334
00:14:12,610 --> 00:14:16,930
of business logic like having a user

335
00:14:14,709 --> 00:14:18,910
control of a parameter that is trusted I

336
00:14:16,930 --> 00:14:21,430
pulled this research here from Marco

337
00:14:18,910 --> 00:14:23,319
Mirana how to prevent business flaws

338
00:14:21,430 --> 00:14:25,569
vulnerabilities in web applications and

339
00:14:23,319 --> 00:14:27,759
it gives you a list of why write weak

340
00:14:25,569 --> 00:14:30,130
enforcement of workflows poor parameter

341
00:14:27,759 --> 00:14:31,569
validation like we saw msconfig with

342
00:14:30,130 --> 00:14:34,449
access control some of you mentioned

343
00:14:31,569 --> 00:14:36,219
that as well authentication flaws so

344
00:14:34,449 --> 00:14:37,839
really you have to have a very strong

345
00:14:36,220 --> 00:14:39,910
understanding of the systems and how

346
00:14:37,839 --> 00:14:42,490
they operate to be able to exploit this

347
00:14:39,910 --> 00:14:44,170
machine does not have the context that's

348
00:14:42,490 --> 00:14:47,949
required to be able to identify these

349
00:14:44,170 --> 00:14:48,569
kinds of vulnerabilities okay what's up

350
00:14:47,949 --> 00:14:52,599
next

351
00:14:48,569 --> 00:14:54,819
first of all I love to handle cash money

352
00:14:52,600 --> 00:14:56,740
that's like brilliant in my mind second

353
00:14:54,819 --> 00:14:59,170
of all I could paraphrase this phone for

354
00:14:56,740 --> 00:15:00,730
you but Shopify explained it really well

355
00:14:59,170 --> 00:15:04,509
so I'm just gonna pull straight from the

356
00:15:00,730 --> 00:15:07,089
bug bounty report cash money reported it

357
00:15:04,509 --> 00:15:09,189
was possible to bypass the e-mail

358
00:15:07,089 --> 00:15:11,680
verification process in our partners

359
00:15:09,189 --> 00:15:13,810
dashboard doing so would have allowed a

360
00:15:11,680 --> 00:15:16,599
partner to request access to a store

361
00:15:13,810 --> 00:15:19,180
under an email address a partner did not

362
00:15:16,600 --> 00:15:21,279
own if the store had a staff account

363
00:15:19,180 --> 00:15:22,660
associated with that email address the

364
00:15:21,279 --> 00:15:23,889
staff account would have been

365
00:15:22,660 --> 00:15:25,430
automatically converted to a

366
00:15:23,889 --> 00:15:27,200
collaborator account

367
00:15:25,430 --> 00:15:30,109
and added to the partners dashboard

368
00:15:27,200 --> 00:15:31,760
without any merchant interaction we

369
00:15:30,110 --> 00:15:34,339
tracked down the buck to a race

370
00:15:31,760 --> 00:15:37,100
condition and the logic for changing and

371
00:15:34,339 --> 00:15:39,410
verifying email addresses we fix it by

372
00:15:37,100 --> 00:15:41,000
locking the database record during those

373
00:15:39,410 --> 00:15:42,620
actions and requiring store

374
00:15:41,000 --> 00:15:46,250
administrators to approve all

375
00:15:42,620 --> 00:15:47,959
collaborator requests in my opinion this

376
00:15:46,250 --> 00:15:50,540
is actually another clear example of

377
00:15:47,959 --> 00:15:52,729
understanding business logic as well to

378
00:15:50,540 --> 00:15:54,829
really excel at finding bones like this

379
00:15:52,730 --> 00:15:57,020
you have to understand the intended

380
00:15:54,830 --> 00:15:59,300
processes driving the business and ask

381
00:15:57,020 --> 00:16:02,420
yourself but what if I tried this

382
00:15:59,300 --> 00:16:04,729
instead for cash money the answer to

383
00:16:02,420 --> 00:16:06,620
this question was fifteen thousand two

384
00:16:04,730 --> 00:16:08,470
hundred fifty dollars for a time of

385
00:16:06,620 --> 00:16:10,580
check time of use race condition

386
00:16:08,470 --> 00:16:11,950
honestly in my opinion that was pretty

387
00:16:10,580 --> 00:16:14,620
well deserved

388
00:16:11,950 --> 00:16:17,540
okay so what's up with race conditions

389
00:16:14,620 --> 00:16:19,640
the Shopify bug was exploited through a

390
00:16:17,540 --> 00:16:22,339
time of check time of use race condition

391
00:16:19,640 --> 00:16:24,470
as you see here there's a multi-step

392
00:16:22,339 --> 00:16:26,959
process to successfully exploit this

393
00:16:24,470 --> 00:16:30,080
kind of vulnerability race conditions

394
00:16:26,959 --> 00:16:32,239
are caused by not locking a file meaning

395
00:16:30,080 --> 00:16:35,000
there's a race between winnow files open

396
00:16:32,240 --> 00:16:36,830
and not locked by the process it was bad

397
00:16:35,000 --> 00:16:39,709
with Shopify and you can probably

398
00:16:36,830 --> 00:16:41,810
imagine how even more serious of race

399
00:16:39,709 --> 00:16:45,439
condition would be for Bank like when

400
00:16:41,810 --> 00:16:47,329
approving a bank transfer I am sure that

401
00:16:45,440 --> 00:16:49,459
some of you in this room right now are

402
00:16:47,330 --> 00:16:51,589
sitting on your hands believing that

403
00:16:49,459 --> 00:16:54,949
scanners can find race conditions and

404
00:16:51,589 --> 00:16:58,430
that's because I've tricked you can a

405
00:16:54,950 --> 00:17:01,339
scanner find this maybe but if it's a

406
00:16:58,430 --> 00:17:04,040
source code review static analysis could

407
00:17:01,339 --> 00:17:07,490
probably ensure that you are locking

408
00:17:04,040 --> 00:17:09,349
your files but a dynamic scanner is not

409
00:17:07,490 --> 00:17:12,230
gonna find this and remember as I said

410
00:17:09,349 --> 00:17:15,169
it's dynamic scanning versus versus

411
00:17:12,230 --> 00:17:17,059
blackbox testing yes

412
00:17:15,170 --> 00:17:19,819
race conditions are probably found

413
00:17:17,059 --> 00:17:22,399
through fuzzing tools but that's not the

414
00:17:19,819 --> 00:17:23,540
same thing as a scanner fuzzing isn't

415
00:17:22,400 --> 00:17:25,309
necessarily a function of a

416
00:17:23,540 --> 00:17:27,859
vulnerability scanner and it does not

417
00:17:25,309 --> 00:17:29,899
tell you what the vulnerability is you

418
00:17:27,859 --> 00:17:32,510
have to find what breaks first through

419
00:17:29,900 --> 00:17:34,730
fuzzing another classic example of this

420
00:17:32,510 --> 00:17:36,480
is buffer overflows you can set up

421
00:17:34,730 --> 00:17:38,340
fuzzers to run all night

422
00:17:36,480 --> 00:17:39,990
cause crashes but you're still gonna

423
00:17:38,340 --> 00:17:42,570
have to figure out what caused the crash

424
00:17:39,990 --> 00:17:44,429
you need to know what to look for

425
00:17:42,570 --> 00:17:46,320
you have to triage identify the

426
00:17:44,429 --> 00:17:50,010
vulnerability and the same thing goes

427
00:17:46,320 --> 00:17:52,710
for race conditions okay last up as you

428
00:17:50,010 --> 00:17:54,600
mentioned chain exploits I think this is

429
00:17:52,710 --> 00:17:57,419
pretty self-explanatory so I'm not gonna

430
00:17:54,600 --> 00:17:58,918
get too in-depth here the example I

431
00:17:57,419 --> 00:18:00,900
included is actually from one of our

432
00:17:58,919 --> 00:18:03,660
core pad testers and I'm just gonna read

433
00:18:00,900 --> 00:18:05,580
off the hacker one summary Shopify

434
00:18:03,660 --> 00:18:09,270
infrastructure is isolated in two

435
00:18:05,580 --> 00:18:10,710
subsets of infrastructure 0 acts ACB I

436
00:18:09,270 --> 00:18:12,600
have no idea how he actually wants to

437
00:18:10,710 --> 00:18:15,510
pronounce that reported it was possible

438
00:18:12,600 --> 00:18:18,240
to gain root access to any container in

439
00:18:15,510 --> 00:18:20,280
one particular subset by exploiting a

440
00:18:18,240 --> 00:18:22,260
server site request forgery bug in the

441
00:18:20,280 --> 00:18:24,928
screenshotting function of a Shopify

442
00:18:22,260 --> 00:18:26,760
exchange within an hour of receiving the

443
00:18:24,929 --> 00:18:29,040
report we disabled the vulnerable

444
00:18:26,760 --> 00:18:31,350
service began auditing applications in

445
00:18:29,040 --> 00:18:33,389
all subsets and remediating across all

446
00:18:31,350 --> 00:18:35,928
our infrastructure the vulnerable subset

447
00:18:33,390 --> 00:18:39,330
did not include Shopify core after

448
00:18:35,929 --> 00:18:41,880
auditing all services we fix the bug by

449
00:18:39,330 --> 00:18:43,710
deploying a metadata concealment proxy

450
00:18:41,880 --> 00:18:46,320
to disable access and metadata

451
00:18:43,710 --> 00:18:48,299
information we also disabled access to

452
00:18:46,320 --> 00:18:52,500
internal IPS on all infrastructure

453
00:18:48,299 --> 00:18:54,179
subsets we awarded this $25,000 as a

454
00:18:52,500 --> 00:18:56,610
Shopify core RCE

455
00:18:54,179 --> 00:18:59,340
since some applications in this subset

456
00:18:56,610 --> 00:19:01,559
do have access to some Shopify core data

457
00:18:59,340 --> 00:19:03,629
and systems if you can find a scanner

458
00:19:01,559 --> 00:19:05,820
they can successfully find an RC e

459
00:19:03,630 --> 00:19:07,470
through a server side request forgery

460
00:19:05,820 --> 00:19:09,480
I'm all ears like I want to invest money

461
00:19:07,470 --> 00:19:11,610
in that but in the meantime I think we

462
00:19:09,480 --> 00:19:16,080
can safely say only a human can find

463
00:19:11,610 --> 00:19:18,689
this ok how many of you actually

464
00:19:16,080 --> 00:19:20,850
disagree with this I'm very curious or

465
00:19:18,690 --> 00:19:22,049
have opinions I see a hand in the back

466
00:19:20,850 --> 00:19:25,049
that's good I like that

467
00:19:22,049 --> 00:19:26,610
ok the truth is if you do if you

468
00:19:25,049 --> 00:19:29,280
disagree with these results I really

469
00:19:26,610 --> 00:19:31,320
don't blame you it's not actually black

470
00:19:29,280 --> 00:19:33,120
or white it's not actually avoid

471
00:19:31,320 --> 00:19:35,370
contests you can't actually pick

472
00:19:33,120 --> 00:19:37,379
machines against humans as we discussed

473
00:19:35,370 --> 00:19:38,879
with race conditions tools are

474
00:19:37,380 --> 00:19:41,340
instrumental now in finding

475
00:19:38,880 --> 00:19:43,290
vulnerabilities just as scanners rely on

476
00:19:41,340 --> 00:19:45,750
humans for configuration and sifting

477
00:19:43,290 --> 00:19:48,059
through false positives humans rely on

478
00:19:45,750 --> 00:19:50,119
machines to automate more menial tasks

479
00:19:48,059 --> 00:19:52,639
no one

480
00:19:50,119 --> 00:19:54,769
I think most people do not want to type

481
00:19:52,639 --> 00:19:56,359
out every variation of a JavaScript

482
00:19:54,769 --> 00:19:58,429
payload known to man

483
00:19:56,359 --> 00:20:00,168
to prompt a little one in an alert box

484
00:19:58,429 --> 00:20:01,999
that just sounds absolutely awful I'm

485
00:20:00,169 --> 00:20:06,739
very glad that scanners can help us with

486
00:20:01,999 --> 00:20:09,470
that so here's a new section humans and

487
00:20:06,739 --> 00:20:11,419
machine a new frontier a list of

488
00:20:09,470 --> 00:20:13,669
vulnerability said scanners cannot

489
00:20:11,419 --> 00:20:15,139
reliably find but humans can't really

490
00:20:13,669 --> 00:20:18,559
find without some sort of tool that they

491
00:20:15,139 --> 00:20:20,539
use authorization flaws xxe sam'l

492
00:20:18,559 --> 00:20:23,570
certain types of cross-site scripting

493
00:20:20,539 --> 00:20:25,970
insecure deserialization RCE session

494
00:20:23,570 --> 00:20:27,529
management and file upload bugs that was

495
00:20:25,970 --> 00:20:30,019
actually one that a lot of our pant

496
00:20:27,529 --> 00:20:32,989
Astor's thought humans should be awarded

497
00:20:30,019 --> 00:20:34,729
but I still think the machines kind of

498
00:20:32,989 --> 00:20:38,239
got that one as well so we placed it in

499
00:20:34,729 --> 00:20:40,340
the middle so I'm just gonna give you a

500
00:20:38,239 --> 00:20:42,710
case study on why it is that some of

501
00:20:40,340 --> 00:20:46,999
these rely on both humans and machines

502
00:20:42,710 --> 00:20:48,409
and that is I do our I've just pulled

503
00:20:46,999 --> 00:20:49,729
this straight from ports worker so ports

504
00:20:48,409 --> 00:20:53,419
burgers instructions for fighting an

505
00:20:49,729 --> 00:20:55,970
idea are clearly demonstrate exactly how

506
00:20:53,419 --> 00:20:57,919
humans rely on tools to be able to find

507
00:20:55,970 --> 00:20:59,840
certain types of vulnerabilities first

508
00:20:57,919 --> 00:21:02,090
you have to set up burp proxy then you

509
00:20:59,840 --> 00:21:04,009
have to send a request to intruder find

510
00:21:02,090 --> 00:21:07,189
the section of the URL to refers to an

511
00:21:04,009 --> 00:21:08,359
object head over to the payload tailor

512
00:21:07,190 --> 00:21:10,759
the number and then start the attack

513
00:21:08,359 --> 00:21:13,220
from there you can take other actions

514
00:21:10,759 --> 00:21:15,919
like a numerating accounts the machine

515
00:21:13,220 --> 00:21:18,679
it does most of the work but the human

516
00:21:15,919 --> 00:21:20,720
must first identify input it's a direct

517
00:21:18,679 --> 00:21:23,690
object reference and then sent a

518
00:21:20,720 --> 00:21:26,210
thousand iterations boom proxy does the

519
00:21:23,690 --> 00:21:28,129
rest of the work one of the things I

520
00:21:26,210 --> 00:21:30,739
realized in conducting this research is

521
00:21:28,129 --> 00:21:32,779
how valuable it is to know the

522
00:21:30,739 --> 00:21:35,539
fundamentals and when I say fundamentals

523
00:21:32,779 --> 00:21:37,450
I truly mean it I'm talking about simple

524
00:21:35,539 --> 00:21:41,149
networking protocols and web development

525
00:21:37,450 --> 00:21:43,639
understanding tcp/ip understanding HTTP

526
00:21:41,149 --> 00:21:46,039
knowing the basics of web development

527
00:21:43,639 --> 00:21:47,779
you know who I think would excel at

528
00:21:46,039 --> 00:21:49,879
finding a business logic bypass or a

529
00:21:47,779 --> 00:21:53,479
race condition someone who has like

530
00:21:49,879 --> 00:21:55,359
multiple years as a sysadmin for my own

531
00:21:53,479 --> 00:21:57,950
perspective as a pentesting white belt

532
00:21:55,359 --> 00:21:59,720
it's helped me reprioritize how I

533
00:21:57,950 --> 00:22:02,350
approach application security and even

534
00:21:59,720 --> 00:22:06,549
how I study and test on my own time

535
00:22:02,350 --> 00:22:08,379
so enough of me talking I don't want to

536
00:22:06,549 --> 00:22:10,620
do questions I want to know what open it

537
00:22:08,380 --> 00:22:13,539
up for debate we have a microphone here

538
00:22:10,620 --> 00:22:14,949
basically tell me what you're thinking

539
00:22:13,539 --> 00:22:16,960
tell me what you disagree with tell me

540
00:22:14,950 --> 00:22:18,970
what you agree with this is not intended

541
00:22:16,960 --> 00:22:20,559
to be an authoritative list I want this

542
00:22:18,970 --> 00:22:23,440
to generate conversation it's an

543
00:22:20,559 --> 00:22:40,000
iterative process so with that let's

544
00:22:23,440 --> 00:22:41,710
open it up yes so it's only dynamic

545
00:22:40,000 --> 00:22:44,019
scanning it does not look at source code

546
00:22:41,710 --> 00:22:53,320
yeah and that's specifically for web

547
00:22:44,019 --> 00:22:54,940
apps and web apps and api's huh um it

548
00:22:53,320 --> 00:22:57,129
was a question about the type of scanner

549
00:22:54,940 --> 00:22:59,940
that's being used and whether source and

550
00:22:57,129 --> 00:23:05,379
whether it was evaluating source code

551
00:22:59,940 --> 00:23:07,629
yeah does anyone think the machine does

552
00:23:05,379 --> 00:23:11,168
not win in this case and any of these

553
00:23:07,629 --> 00:23:12,549
cases what does anyone have like a

554
00:23:11,169 --> 00:23:14,350
Python script that they wrote that's on

555
00:23:12,549 --> 00:23:15,490
github or they like feel pretty

556
00:23:14,350 --> 00:23:18,610
confident that they can find a race

557
00:23:15,490 --> 00:23:30,639
condition because some people have said

558
00:23:18,610 --> 00:23:33,309
that yes it's using a lot of bug

559
00:23:30,639 --> 00:23:35,289
brownies okay so Tonya said that her old

560
00:23:33,309 --> 00:23:37,178
partner built a tool a race condition

561
00:23:35,289 --> 00:23:45,460
tool that's actually used for bug bounty

562
00:23:37,179 --> 00:23:50,549
programs cool anyone else have

563
00:23:45,460 --> 00:23:50,549
disagreements or ideas or agreements oh

564
00:23:55,019 --> 00:23:58,019
yeah

565
00:24:23,690 --> 00:24:38,429
yeah yeah agreed

566
00:24:36,480 --> 00:24:40,200
my question for you though is it is it

567
00:24:38,429 --> 00:24:44,029
looking at is it looking at the source

568
00:24:40,200 --> 00:24:44,029
code or is it doing dynamic a black box

569
00:24:44,360 --> 00:24:47,360
okay

570
00:24:48,830 --> 00:24:52,949
okay I would love to take a look at that

571
00:24:50,909 --> 00:24:58,350
so I will definitely check it out and

572
00:24:52,950 --> 00:24:59,639
see thank you for flying okay and I

573
00:24:58,350 --> 00:25:02,790
think that's it we're done

574
00:24:59,639 --> 00:25:07,559
so thank you so much everyone for coming

575
00:25:02,790 --> 00:25:07,559
[Applause]

