1
00:00:00,350 --> 00:00:04,529
hey everyone thank you so much for

2
00:00:02,879 --> 00:00:06,660
coming and thank you to the organizers

3
00:00:04,529 --> 00:00:09,059
for having me so over the past few years

4
00:00:06,660 --> 00:00:10,889
I've spent thousands of hours studying

5
00:00:09,059 --> 00:00:13,829
how various companies had scaled their

6
00:00:10,889 --> 00:00:15,770
security and not just the one-off ad hoc

7
00:00:13,830 --> 00:00:17,970
wins but the things that have truly

8
00:00:15,770 --> 00:00:20,550
systematically scale ibly raised their

9
00:00:17,970 --> 00:00:22,799
security bar so my goal in this talk is

10
00:00:20,550 --> 00:00:25,289
to collect a bunch of tactics and

11
00:00:22,800 --> 00:00:26,580
strategies and create a playbook from

12
00:00:25,289 --> 00:00:28,920
which you can take different parts and

13
00:00:26,580 --> 00:00:30,778
then apply them for yourself in your

14
00:00:28,920 --> 00:00:34,280
company you know whichever parts make

15
00:00:30,779 --> 00:00:37,019
the most sense so I'm going to be

16
00:00:34,280 --> 00:00:39,180
distilling and aggregating a vast amount

17
00:00:37,020 --> 00:00:42,870
of information so over 50 different

18
00:00:39,180 --> 00:00:44,640
conference talks dozens of tools blog

19
00:00:42,870 --> 00:00:47,160
posts and in-person conversations I've

20
00:00:44,640 --> 00:00:49,050
had with security engineers at many many

21
00:00:47,160 --> 00:00:50,968
different companies so these are just

22
00:00:49,050 --> 00:00:52,620
the logos of some of the companies that

23
00:00:50,969 --> 00:00:55,020
I'm going to reference their work in

24
00:00:52,620 --> 00:00:57,899
this talk but there's more I also just

25
00:00:55,020 --> 00:00:59,280
wanted to say you don't have to like

26
00:00:57,899 --> 00:01:01,050
write down every slide or take pictures

27
00:00:59,280 --> 00:01:02,190
of it on the last slide there's going to

28
00:01:01,050 --> 00:01:04,530
be a link so that you can see these

29
00:01:02,190 --> 00:01:07,470
Google slides like right then

30
00:01:04,530 --> 00:01:10,590
and also this talk is recorded so you

31
00:01:07,470 --> 00:01:12,479
know don't stress out about it you won't

32
00:01:10,590 --> 00:01:14,070
be able to read everything so a little

33
00:01:12,479 --> 00:01:15,900
bit about me before we get started so

34
00:01:14,070 --> 00:01:18,029
I'm a technical director and research

35
00:01:15,900 --> 00:01:20,340
director at NCC group we do security

36
00:01:18,030 --> 00:01:22,979
consulting so pen testing for web apps

37
00:01:20,340 --> 00:01:25,170
networks and so forth we've also been

38
00:01:22,979 --> 00:01:27,150
helping companies with their dedsec ops

39
00:01:25,170 --> 00:01:28,409
transformation security automation and

40
00:01:27,150 --> 00:01:30,420
things like that so some of this

41
00:01:28,409 --> 00:01:32,369
material is pulling from that as well

42
00:01:30,420 --> 00:01:34,979
here are some of the things I really

43
00:01:32,369 --> 00:01:36,990
enjoy so if you also like those come up

44
00:01:34,979 --> 00:01:40,770
and say hi after I'd love to learn from

45
00:01:36,990 --> 00:01:42,210
you and chat about it ok so there's some

46
00:01:40,770 --> 00:01:43,770
things that I'm just going to sort of

47
00:01:42,210 --> 00:01:46,889
assume and not get into a lot of detail

48
00:01:43,770 --> 00:01:49,289
I think many people have found the

49
00:01:46,890 --> 00:01:52,229
traditional SAST and DAST are overall

50
00:01:49,290 --> 00:01:53,640
not as useful given the operational time

51
00:01:52,229 --> 00:01:54,270
required from the security team as well

52
00:01:53,640 --> 00:01:56,369
as the cost

53
00:01:54,270 --> 00:01:58,740
I assume you're willing to invest a lot

54
00:01:56,369 --> 00:02:00,750
of time now or sometime at least in

55
00:01:58,740 --> 00:02:03,149
order to reap big security wins later

56
00:02:00,750 --> 00:02:05,369
and I assume your security team has a

57
00:02:03,149 --> 00:02:06,780
few people but not necessarily dozens or

58
00:02:05,369 --> 00:02:08,160
hundreds right so you're somewhere in

59
00:02:06,780 --> 00:02:10,169
the middle you're not just starting but

60
00:02:08,160 --> 00:02:12,810
you're not maybe say Google or Facebook

61
00:02:10,169 --> 00:02:13,839
so again this is not a starting a

62
00:02:12,810 --> 00:02:15,819
security program talk

63
00:02:13,840 --> 00:02:19,450
but if that's your gym here's some

64
00:02:15,819 --> 00:02:22,179
places to start okay so this talk has

65
00:02:19,450 --> 00:02:23,260
three main parts so first we're going to

66
00:02:22,180 --> 00:02:25,330
talk about some sort of big picture

67
00:02:23,260 --> 00:02:27,069
security mindset type things how to

68
00:02:25,330 --> 00:02:28,780
think about security effectively and

69
00:02:27,069 --> 00:02:30,670
then the book of this talk is the middle

70
00:02:28,780 --> 00:02:33,129
section where we're going to talk about

71
00:02:30,670 --> 00:02:34,899
some specific strategies and tactics you

72
00:02:33,129 --> 00:02:36,459
can use to scale your security so first

73
00:02:34,900 --> 00:02:38,230
some fundamentals that are nice to have

74
00:02:36,459 --> 00:02:40,599
then how do you scale that and then

75
00:02:38,230 --> 00:02:42,220
finally what might this look like say a

76
00:02:40,599 --> 00:02:43,329
couple of years in the future and then

77
00:02:42,220 --> 00:02:45,030
finally we're going to tie it all

78
00:02:43,330 --> 00:02:46,989
together

79
00:02:45,030 --> 00:02:49,120
cool so first some mindsets and

80
00:02:46,989 --> 00:02:51,099
principles so first I think everyone

81
00:02:49,120 --> 00:02:52,810
would agree with this first one security

82
00:02:51,099 --> 00:02:54,429
teams are always time and purse limited

83
00:02:52,810 --> 00:02:56,500
so fundamentally you need to automate to

84
00:02:54,430 --> 00:02:58,510
scale and one trend I see at many

85
00:02:56,500 --> 00:03:01,420
companies is that you have to minimize

86
00:02:58,510 --> 00:03:03,160
your nose right you have to build these

87
00:03:01,420 --> 00:03:05,530
nice secure guardrails that allow

88
00:03:03,160 --> 00:03:08,410
developers to do their job securely as

89
00:03:05,530 --> 00:03:10,180
well as just faster and better I think

90
00:03:08,410 --> 00:03:11,739
Austin and the Netflix team talks about

91
00:03:10,180 --> 00:03:14,769
this very nicely in their concept of a

92
00:03:11,739 --> 00:03:19,090
paved road many companies are choosing

93
00:03:14,769 --> 00:03:20,950
to prefer like high signal low noise

94
00:03:19,090 --> 00:03:23,350
tools and alerting so it's okay if we

95
00:03:20,950 --> 00:03:24,790
don't find everything but when the tools

96
00:03:23,350 --> 00:03:27,700
do say something we want it to be

97
00:03:24,790 --> 00:03:28,870
actionable and a true positive and I

98
00:03:27,700 --> 00:03:30,339
think that's an interesting change in

99
00:03:28,870 --> 00:03:33,340
perspective I've seen that a number of

100
00:03:30,340 --> 00:03:35,650
companies so when we're building

101
00:03:33,340 --> 00:03:36,910
products oftentimes we spend a lot of

102
00:03:35,650 --> 00:03:39,310
time thinking about how do we make a

103
00:03:36,910 --> 00:03:41,349
nice UI and user experience for users

104
00:03:39,310 --> 00:03:42,849
but as security team members I think

105
00:03:41,349 --> 00:03:45,668
that we should think of developers as

106
00:03:42,849 --> 00:03:47,918
our customers so how can we fit into

107
00:03:45,669 --> 00:03:50,410
their existing tools and workflow can we

108
00:03:47,919 --> 00:03:52,299
make the secure way easier faster or

109
00:03:50,410 --> 00:03:54,280
just otherwise better than how they're

110
00:03:52,299 --> 00:03:55,599
doing it already right we're introducing

111
00:03:54,280 --> 00:03:56,680
friction into their world when we're

112
00:03:55,599 --> 00:03:59,138
asking them to change how they're

113
00:03:56,680 --> 00:04:01,599
already doing things and lastly this

114
00:03:59,139 --> 00:04:03,370
concept of self-service security so can

115
00:04:01,599 --> 00:04:05,560
we provide tools and services that

116
00:04:03,370 --> 00:04:07,269
developers can use without even talking

117
00:04:05,560 --> 00:04:09,250
to the security team so I wrote about

118
00:04:07,269 --> 00:04:11,859
some of these in a bit more detail in a

119
00:04:09,250 --> 00:04:13,180
blog post you can check out and I wanted

120
00:04:11,859 --> 00:04:15,760
to make sure that I could connect with

121
00:04:13,180 --> 00:04:18,160
the youth in the audience so I included

122
00:04:15,760 --> 00:04:21,728
this so to sort of thematically

123
00:04:18,160 --> 00:04:23,850
summarize this talk broke is finding

124
00:04:21,728 --> 00:04:27,090
individual bugs and woke

125
00:04:23,850 --> 00:04:28,400
is scale ibly reducing risk you heard it

126
00:04:27,090 --> 00:04:31,469
here folks

127
00:04:28,400 --> 00:04:33,330
okay so in life as well as in security

128
00:04:31,470 --> 00:04:35,550
you're always choosing whether to focus

129
00:04:33,330 --> 00:04:37,710
on the now the medium term or the long

130
00:04:35,550 --> 00:04:39,630
term and in this talk I'm gonna push you

131
00:04:37,710 --> 00:04:42,140
very strongly to always be forward

132
00:04:39,630 --> 00:04:45,420
thinking about this long term

133
00:04:42,140 --> 00:04:47,550
specifically ask yourself of my near and

134
00:04:45,420 --> 00:04:48,840
medium-term tasks which of these is

135
00:04:47,550 --> 00:04:51,840
going to provide the most long-term

136
00:04:48,840 --> 00:04:54,270
strategic value can I do a near-term

137
00:04:51,840 --> 00:04:55,289
task a little bit differently to make it

138
00:04:54,270 --> 00:04:58,080
more useful later

139
00:04:55,290 --> 00:05:00,810
and then also what subproblems can I

140
00:04:58,080 --> 00:05:03,419
solve precisely that is a high signal as

141
00:05:00,810 --> 00:05:04,950
well as its scale so maybe there's 50

142
00:05:03,420 --> 00:05:06,660
things you want to find but some of them

143
00:05:04,950 --> 00:05:08,789
you can do very precisely such that you

144
00:05:06,660 --> 00:05:10,110
just handle them and then you don't have

145
00:05:08,790 --> 00:05:13,530
to deal with it anymore and we're going

146
00:05:10,110 --> 00:05:15,900
to talk about that a lot soon another

147
00:05:13,530 --> 00:05:17,609
thing I like to think about is when

148
00:05:15,900 --> 00:05:19,349
you're approaching security there's many

149
00:05:17,610 --> 00:05:21,510
different tools you have in your tool

150
00:05:19,350 --> 00:05:24,690
belt right so you have static and

151
00:05:21,510 --> 00:05:29,820
dynamic analysis you have bug bounty and

152
00:05:24,690 --> 00:05:32,370
pen testing you have secure wrapper

153
00:05:29,820 --> 00:05:34,740
libraries as well as threat modeling you

154
00:05:32,370 --> 00:05:38,100
have runtime detection you have fuzzing

155
00:05:34,740 --> 00:05:39,770
of course that's the song and I think

156
00:05:38,100 --> 00:05:41,820
the point I want to make here is that

157
00:05:39,770 --> 00:05:43,169
depending on what you're trying to do

158
00:05:41,820 --> 00:05:45,450
there are certain approaches that are

159
00:05:43,170 --> 00:05:48,180
just fundamentally better or worse so

160
00:05:45,450 --> 00:05:50,880
rather than saying oh how do I make tool

161
00:05:48,180 --> 00:05:52,860
X better instead ask yourself is to

162
00:05:50,880 --> 00:05:56,310
elect the right even approach for this

163
00:05:52,860 --> 00:05:57,690
problem I'm trying to solve and another

164
00:05:56,310 --> 00:06:00,150
thing that I think is very important is

165
00:05:57,690 --> 00:06:02,040
choosing what to ignore right so there

166
00:06:00,150 --> 00:06:05,690
are some fires that you just have to let

167
00:06:02,040 --> 00:06:08,610
burn at least for a time

168
00:06:05,690 --> 00:06:10,590
so Adams said this on LinkedIn recently

169
00:06:08,610 --> 00:06:13,170
that I liked so the question isn't is

170
00:06:10,590 --> 00:06:14,849
this thing useful but given finite time

171
00:06:13,170 --> 00:06:16,470
and resources should we be doing this

172
00:06:14,850 --> 00:06:20,940
versus something else because ultimately

173
00:06:16,470 --> 00:06:22,800
security and life is trade-offs okay so

174
00:06:20,940 --> 00:06:25,320
another way I like to look at things is

175
00:06:22,800 --> 00:06:27,120
targeting vulnerabilities by either the

176
00:06:25,320 --> 00:06:28,920
complexity of the analysis required to

177
00:06:27,120 --> 00:06:31,050
find them as well as what vulnerability

178
00:06:28,920 --> 00:06:32,860
class they are so let's look at some

179
00:06:31,050 --> 00:06:35,110
examples

180
00:06:32,860 --> 00:06:36,699
so something that doesn't take a lot of

181
00:06:35,110 --> 00:06:39,610
contexts like a lot of algorithmic

182
00:06:36,699 --> 00:06:42,099
complexity to find is does this say web

183
00:06:39,610 --> 00:06:44,500
app have TLS on it you know is it using

184
00:06:42,099 --> 00:06:46,240
the right security headers calling team

185
00:06:44,500 --> 00:06:48,009
dangerous functions is essentially just

186
00:06:46,240 --> 00:06:49,719
greps but you can have some nice

187
00:06:48,009 --> 00:06:51,039
security wins there and then things that

188
00:06:49,719 --> 00:06:52,719
take a little more complexity of

189
00:06:51,039 --> 00:06:54,219
analysis like standard l wast bugs

190
00:06:52,719 --> 00:06:55,900
cross-site scripting and sequel

191
00:06:54,219 --> 00:06:57,550
injection and so forth and then on the

192
00:06:55,900 --> 00:06:59,770
hard side we have these complex

193
00:06:57,550 --> 00:07:02,530
multi-step bugs business logic flaws

194
00:06:59,770 --> 00:07:06,639
abusing built-in functionality and so

195
00:07:02,530 --> 00:07:08,469
forth so when you're first starting a

196
00:07:06,639 --> 00:07:10,330
security program you might say okay let

197
00:07:08,469 --> 00:07:11,949
me just buy a bunch of tools and this is

198
00:07:10,330 --> 00:07:15,250
going to handle all of our problems and

199
00:07:11,949 --> 00:07:16,719
we'll be blissfully happy or you might

200
00:07:15,250 --> 00:07:19,240
say oh let's just pen test all of our

201
00:07:16,719 --> 00:07:20,860
problems away but I think as your

202
00:07:19,240 --> 00:07:22,840
program develops and becomes a bit more

203
00:07:20,860 --> 00:07:25,300
true more mature you're going to want to

204
00:07:22,840 --> 00:07:27,789
make it look a little bit more like this

205
00:07:25,300 --> 00:07:29,469
where you've built some nice secure

206
00:07:27,789 --> 00:07:32,139
defaults which are handling many of the

207
00:07:29,469 --> 00:07:34,659
easy cases and a lot of the medium cases

208
00:07:32,139 --> 00:07:37,000
and even some of the hard cases you have

209
00:07:34,659 --> 00:07:40,330
automated tools that are again catching

210
00:07:37,000 --> 00:07:42,129
some autumn low-hanging fruit but sort

211
00:07:40,330 --> 00:07:44,378
of less you know medium and high

212
00:07:42,129 --> 00:07:46,000
complexity issues bug bounty definitely

213
00:07:44,379 --> 00:07:48,159
plays a very useful role in getting some

214
00:07:46,000 --> 00:07:50,020
continuous coverage and then I think the

215
00:07:48,159 --> 00:07:51,580
the true value of pen test here is

216
00:07:50,020 --> 00:07:53,770
finding these sort of medium and hard

217
00:07:51,580 --> 00:07:56,020
complexity bugs the things that require

218
00:07:53,770 --> 00:07:59,620
a lot of context and tools may not find

219
00:07:56,020 --> 00:08:00,580
and runtime monitoring is useful for

220
00:07:59,620 --> 00:08:04,599
finding some things you just can't

221
00:08:00,580 --> 00:08:06,878
really find easily other ways so just

222
00:08:04,599 --> 00:08:08,979
quickly solve as many of your problems

223
00:08:06,879 --> 00:08:11,139
with secure defaults tools are not going

224
00:08:08,979 --> 00:08:12,699
to solve all your problems but bounty

225
00:08:11,139 --> 00:08:14,949
does give you some nice decent coverage

226
00:08:12,699 --> 00:08:16,659
if all of your pen tests are just

227
00:08:14,949 --> 00:08:18,009
finding these sort of easy type

228
00:08:16,659 --> 00:08:19,960
vulnerabilities you're not getting the

229
00:08:18,009 --> 00:08:21,789
most value from it and run time

230
00:08:19,960 --> 00:08:23,198
monitoring for bugs is useful for

231
00:08:21,789 --> 00:08:27,099
certain classes that you just can't

232
00:08:23,199 --> 00:08:28,509
easily find other ways okay so that was

233
00:08:27,099 --> 00:08:30,069
my opinion let's look at how some other

234
00:08:28,509 --> 00:08:32,169
people think about it so this is from

235
00:08:30,069 --> 00:08:34,690
Patrick and hasta zaps at Cal you talk

236
00:08:32,169 --> 00:08:37,958
two years ago so notice how on the left

237
00:08:34,690 --> 00:08:39,669
hand side we see manual testing per app

238
00:08:37,958 --> 00:08:41,109
threat modeling traditional bowl

239
00:08:39,669 --> 00:08:43,390
scanning is de-emphasized

240
00:08:41,110 --> 00:08:45,920
and then on the right hand side building

241
00:08:43,390 --> 00:08:47,480
a paved road so secure defaults so

242
00:08:45,920 --> 00:08:50,120
service and killing bug classes is

243
00:08:47,480 --> 00:08:52,850
emphasized they gave an updated version

244
00:08:50,120 --> 00:08:55,610
on a different topic but also Netflix

245
00:08:52,850 --> 00:08:57,709
Scott and Isha and notice how the heavy

246
00:08:55,610 --> 00:09:00,980
emphasis on secure defaults and then

247
00:08:57,709 --> 00:09:03,260
notice how that is growing over time so

248
00:09:00,980 --> 00:09:04,639
I think that's very interesting okay so

249
00:09:03,260 --> 00:09:08,180
now let's get into the meat of it so

250
00:09:04,639 --> 00:09:09,740
these are sort of core tactics and

251
00:09:08,180 --> 00:09:12,260
strategies so I'm going to start with

252
00:09:09,740 --> 00:09:14,449
fundamentals and these are fundamentals

253
00:09:12,260 --> 00:09:16,279
not because they're easy but because

254
00:09:14,449 --> 00:09:17,779
they're a if you have a strong

255
00:09:16,279 --> 00:09:22,060
foundation in these you can build very

256
00:09:17,779 --> 00:09:24,680
high leverage scalable things on top

257
00:09:22,060 --> 00:09:26,149
okay so vulnerability management you

258
00:09:24,680 --> 00:09:27,949
need to know where you are now and you

259
00:09:26,149 --> 00:09:29,810
need to know if what you're doing

260
00:09:27,949 --> 00:09:32,149
actually works right something might

261
00:09:29,810 --> 00:09:33,768
sound great and you may invest a quarter

262
00:09:32,149 --> 00:09:36,079
or two quarters working on it and it may

263
00:09:33,769 --> 00:09:38,360
not actually move the security needle so

264
00:09:36,079 --> 00:09:40,040
this is very important so some success

265
00:09:38,360 --> 00:09:41,750
criteria for this you want to minimize

266
00:09:40,040 --> 00:09:43,279
friction for developers as well as

267
00:09:41,750 --> 00:09:44,750
security you want to track

268
00:09:43,279 --> 00:09:46,730
vulnerabilities ideally in the same

269
00:09:44,750 --> 00:09:48,680
system such as JIRA that bugs are

270
00:09:46,730 --> 00:09:51,170
tracked in so developers don't have to

271
00:09:48,680 --> 00:09:53,000
go multiple places regardless of how you

272
00:09:51,170 --> 00:09:54,529
find the bug whether it's bug bounty and

273
00:09:53,000 --> 00:09:56,750
so forth just triage it through the same

274
00:09:54,529 --> 00:09:59,029
process and it's nice to attract

275
00:09:56,750 --> 00:10:01,579
relevant metadata so what are some

276
00:09:59,029 --> 00:10:04,310
examples what code base was affected the

277
00:10:01,579 --> 00:10:06,949
team in organ volved what vulnerability

278
00:10:04,310 --> 00:10:08,268
class in wasp I think is a little bit

279
00:10:06,949 --> 00:10:09,620
too coarse for this I would encourage

280
00:10:08,269 --> 00:10:11,660
you to use a slightly more detailed

281
00:10:09,620 --> 00:10:13,670
taxonomy maybe of like twenty to forty

282
00:10:11,660 --> 00:10:15,550
type things this will let you do some

283
00:10:13,670 --> 00:10:18,050
cool stats that we'll show in a second

284
00:10:15,550 --> 00:10:22,160
also how severe was it how much do we

285
00:10:18,050 --> 00:10:23,990
care and also how is it found as you're

286
00:10:22,160 --> 00:10:25,819
scaling you might care a little bit

287
00:10:23,990 --> 00:10:28,490
about you know what was the root cause

288
00:10:25,820 --> 00:10:33,079
what code introduced it and where there

289
00:10:28,490 --> 00:10:34,190
mitigating factors and so forth okay so

290
00:10:33,079 --> 00:10:35,660
as you're sort of leveling up and

291
00:10:34,190 --> 00:10:38,690
scaling this if there's parts you can

292
00:10:35,660 --> 00:10:41,060
automate that's great many organizations

293
00:10:38,690 --> 00:10:42,949
have found some success building a

294
00:10:41,060 --> 00:10:44,209
vulnerability or risk dashboard that you

295
00:10:42,949 --> 00:10:46,430
can sort of slice and dice by team

296
00:10:44,209 --> 00:10:48,739
codebase etc so this gives you a nice

297
00:10:46,430 --> 00:10:50,388
high level intuition as to where should

298
00:10:48,740 --> 00:10:52,699
I invest my security engineering efforts

299
00:10:50,389 --> 00:10:54,470
and a couple of companies have found

300
00:10:52,699 --> 00:10:56,000
that it puts friendly pressure on teams

301
00:10:54,470 --> 00:10:58,560
to improve no one wants to be the team

302
00:10:56,000 --> 00:11:01,390
where all their stuff is in red

303
00:10:58,560 --> 00:11:03,609
so here's some good talks about this and

304
00:11:01,390 --> 00:11:04,930
the second one Arkady's talk I like a

305
00:11:03,610 --> 00:11:07,330
lot and we're gonna see a couple of

306
00:11:04,930 --> 00:11:09,729
figures from it so the first is this one

307
00:11:07,330 --> 00:11:13,000
so this is open security vulnerabilities

308
00:11:09,730 --> 00:11:15,180
by priority last 90 days so if you are

309
00:11:13,000 --> 00:11:17,440
overall getting better if you're

310
00:11:15,180 --> 00:11:20,729
mitigations and protections are working

311
00:11:17,440 --> 00:11:22,930
they should ideally trend down over time

312
00:11:20,730 --> 00:11:24,880
similarly here when you have open

313
00:11:22,930 --> 00:11:27,010
vulnerabilities by sub team and priority

314
00:11:24,880 --> 00:11:28,390
it very quickly becomes clear oh we

315
00:11:27,010 --> 00:11:29,620
should reach out to this team and give

316
00:11:28,390 --> 00:11:30,910
them some help maybe there's some

317
00:11:29,620 --> 00:11:35,230
systemic issue they're having problems

318
00:11:30,910 --> 00:11:38,290
addressing this idea was given to me by

319
00:11:35,230 --> 00:11:40,780
a M ray of Salesforce so again if you're

320
00:11:38,290 --> 00:11:42,969
tracking you know these bugs were from

321
00:11:40,780 --> 00:11:44,829
bug bounty also what vulnerability class

322
00:11:42,970 --> 00:11:46,330
they were and how much we paid so you

323
00:11:44,830 --> 00:11:48,580
could actually say things like this

324
00:11:46,330 --> 00:11:50,230
vulnerability class objectively costed

325
00:11:48,580 --> 00:11:53,110
us this much money and this can help

326
00:11:50,230 --> 00:11:55,240
perhaps get additional buy-in from upper

327
00:11:53,110 --> 00:11:58,120
management in terms of investing time

328
00:11:55,240 --> 00:12:00,280
and resources okay here are some example

329
00:11:58,120 --> 00:12:01,540
dashboards so this is from a Domino's

330
00:12:00,280 --> 00:12:03,610
app sack USA Talk

331
00:12:01,540 --> 00:12:05,709
so you can see like Oh which of these

332
00:12:03,610 --> 00:12:07,480
sort of micro services might we want to

333
00:12:05,710 --> 00:12:08,860
invest more resources in and you don't

334
00:12:07,480 --> 00:12:10,480
necessarily need to know the technical

335
00:12:08,860 --> 00:12:12,370
details of oh this is what cross-site

336
00:12:10,480 --> 00:12:13,600
scripting is like execs can look at this

337
00:12:12,370 --> 00:12:17,320
and have an intuition about what they

338
00:12:13,600 --> 00:12:19,480
might care about this is from a Netflix

339
00:12:17,320 --> 00:12:21,490
talk again so there's a couple of

340
00:12:19,480 --> 00:12:23,920
columns where basically has this micro

341
00:12:21,490 --> 00:12:26,290
service used one of the security

342
00:12:23,920 --> 00:12:28,390
controls we built for it yes or no is it

343
00:12:26,290 --> 00:12:29,949
a high risk service and then you can

344
00:12:28,390 --> 00:12:33,280
sort of slice and dice on the right hand

345
00:12:29,950 --> 00:12:36,910
side with various filters okay let's

346
00:12:33,280 --> 00:12:38,560
talk about continuous scanning so the

347
00:12:36,910 --> 00:12:40,660
idea is we want to be able to scan new

348
00:12:38,560 --> 00:12:43,060
code with static in dynamic analysis

349
00:12:40,660 --> 00:12:44,469
tools usually static is on developers

350
00:12:43,060 --> 00:12:46,569
machines and code hosting and then

351
00:12:44,470 --> 00:12:49,750
there's a bunch of things you can do in

352
00:12:46,570 --> 00:12:51,820
testing QA so due to time I'm not going

353
00:12:49,750 --> 00:12:53,530
to talk about any of those however in

354
00:12:51,820 --> 00:12:56,260
the backup slides of which there are

355
00:12:53,530 --> 00:12:59,860
about as many as main slides I will talk

356
00:12:56,260 --> 00:13:02,250
about all of these in more detail so one

357
00:12:59,860 --> 00:13:05,020
of the interesting things I found is

358
00:13:02,250 --> 00:13:06,340
this idea of like a continuous code

359
00:13:05,020 --> 00:13:09,040
scanning pipeline is one of the most

360
00:13:06,340 --> 00:13:10,300
popular ideas in dedsec ops many

361
00:13:09,040 --> 00:13:11,120
companies have talked about how they do

362
00:13:10,300 --> 00:13:13,939
it

363
00:13:11,120 --> 00:13:16,940
here is a number just only a knapsack

364
00:13:13,940 --> 00:13:18,620
USA here's a bunch more at other

365
00:13:16,940 --> 00:13:20,540
conferences right so this is all

366
00:13:18,620 --> 00:13:23,240
companies talking about how they sort of

367
00:13:20,540 --> 00:13:25,250
continuously scan code so the details

368
00:13:23,240 --> 00:13:27,910
vary by company but let's talk about

369
00:13:25,250 --> 00:13:31,640
some things they all generally agree on

370
00:13:27,910 --> 00:13:34,010
so first it's very nice to be able for

371
00:13:31,640 --> 00:13:35,540
the security team to iterate quickly so

372
00:13:34,010 --> 00:13:38,200
adding and removing tools into the

373
00:13:35,540 --> 00:13:40,640
pipeline testing new rules generally

374
00:13:38,200 --> 00:13:42,290
people choose to scan pull requests if

375
00:13:40,640 --> 00:13:43,460
you scan every commit maybe there's a

376
00:13:42,290 --> 00:13:45,219
work in progress commit you don't care

377
00:13:43,460 --> 00:13:47,540
about and it's too noisy

378
00:13:45,220 --> 00:13:49,040
ideally scan should be very fast you're

379
00:13:47,540 --> 00:13:51,650
giving developers feedback while the

380
00:13:49,040 --> 00:13:53,180
context is fresh if you're doing more

381
00:13:51,650 --> 00:13:55,819
you know in-depth things maybe that can

382
00:13:53,180 --> 00:13:58,069
be done daily or weekly generally if you

383
00:13:55,820 --> 00:14:00,290
can show tool results within developer

384
00:13:58,070 --> 00:14:02,560
systems for example a comment on the PR

385
00:14:00,290 --> 00:14:05,569
so they don't have to go somewhere else

386
00:14:02,560 --> 00:14:07,369
ideally checks are very high signal if

387
00:14:05,570 --> 00:14:08,839
you're going to auto send it to a

388
00:14:07,370 --> 00:14:10,940
developer without triaging it you don't

389
00:14:08,839 --> 00:14:12,500
want to annoy them because if it's very

390
00:14:10,940 --> 00:14:14,900
low signal and they spend a lot of their

391
00:14:12,500 --> 00:14:17,180
time triaging this generally makes them

392
00:14:14,900 --> 00:14:19,819
dislike you and it's a lot of overhead

393
00:14:17,180 --> 00:14:21,890
time for your team obviously you're

394
00:14:19,820 --> 00:14:23,750
going to want to capture metrics so what

395
00:14:21,890 --> 00:14:25,730
are we finding what's our false positive

396
00:14:23,750 --> 00:14:27,440
rate things like that you'll probably

397
00:14:25,730 --> 00:14:31,459
need to build some deduplication and

398
00:14:27,440 --> 00:14:33,320
whitelisting logic and then finally

399
00:14:31,459 --> 00:14:35,239
being able to MapReduce over all of your

400
00:14:33,320 --> 00:14:38,870
code and life systems it's pretty neat

401
00:14:35,240 --> 00:14:41,209
and we'll show why in a second ok so

402
00:14:38,870 --> 00:14:44,990
also just how to think about this here's

403
00:14:41,209 --> 00:14:46,160
a couple of other good talks and one

404
00:14:44,990 --> 00:14:47,870
thing I just wanted to dive into a

405
00:14:46,160 --> 00:14:49,490
little bit more detail when people think

406
00:14:47,870 --> 00:14:51,170
of static analysis a lot of times they

407
00:14:49,490 --> 00:14:53,000
think about one of these two things

408
00:14:51,170 --> 00:14:54,529
which are sort of on opposite ends of

409
00:14:53,000 --> 00:14:56,930
the spectrum so one is you're doing

410
00:14:54,529 --> 00:14:58,910
something very like sort of easy from a

411
00:14:56,930 --> 00:15:00,859
analysis complexity point of view right

412
00:14:58,910 --> 00:15:02,630
reg X is operating on strings very easy

413
00:15:00,860 --> 00:15:05,060
to run and right or you have very

414
00:15:02,630 --> 00:15:06,439
complex heavyweight analysis was sort of

415
00:15:05,060 --> 00:15:08,599
SAS where you're doing control and data

416
00:15:06,440 --> 00:15:10,910
flow so the trade-offs here you can be

417
00:15:08,600 --> 00:15:13,010
very fast and not very expressive or you

418
00:15:10,910 --> 00:15:15,529
can be very expressive but maybe a bit

419
00:15:13,010 --> 00:15:17,390
slow and noisy but there's actually a

420
00:15:15,529 --> 00:15:19,459
middle ground doing sort of security

421
00:15:17,390 --> 00:15:21,829
linting or abstract syntax tree matching

422
00:15:19,459 --> 00:15:23,900
which i think is very interesting so

423
00:15:21,829 --> 00:15:25,010
here you are source code aware so you

424
00:15:23,900 --> 00:15:28,100
can say like match the

425
00:15:25,010 --> 00:15:30,529
conditional or match this function call

426
00:15:28,100 --> 00:15:34,070
so you can do some of the complexity

427
00:15:30,529 --> 00:15:36,709
obsessed but you're so fast but you

428
00:15:34,070 --> 00:15:38,120
can't do quite everything SAS can do so

429
00:15:36,709 --> 00:15:41,149
I think this is a very interesting space

430
00:15:38,120 --> 00:15:42,560
that I'm optimistic about a couple of

431
00:15:41,149 --> 00:15:44,540
people have given talks about this so

432
00:15:42,560 --> 00:15:46,790
Justin Collins the creator of brakeman

433
00:15:44,540 --> 00:15:48,639
gave the first talk myself and a

434
00:15:46,790 --> 00:15:50,750
colleague gave the second one and

435
00:15:48,639 --> 00:15:53,389
Instagram had a pretty nice detailed

436
00:15:50,750 --> 00:15:57,410
blog post about how they do ast matching

437
00:15:53,389 --> 00:15:58,970
on their Jango mount monolith ok so if

438
00:15:57,410 --> 00:16:00,829
you were going to do this yourself

439
00:15:58,970 --> 00:16:02,389
generally what you're going to do is go

440
00:16:00,829 --> 00:16:04,579
from source code you're going to parse

441
00:16:02,389 --> 00:16:06,199
it into an abstract syntax tree and

442
00:16:04,579 --> 00:16:08,660
there's a couple of ways you can parse

443
00:16:06,199 --> 00:16:11,540
either with a language specific parser a

444
00:16:08,660 --> 00:16:12,980
parser generator like antler or in my

445
00:16:11,540 --> 00:16:14,719
opinion the best approach which is a

446
00:16:12,980 --> 00:16:16,760
parser that handles multiple languages

447
00:16:14,720 --> 00:16:18,260
so if in your environment you have a

448
00:16:16,760 --> 00:16:19,279
bunch of different languages you

449
00:16:18,260 --> 00:16:22,010
probably don't want to find a separate

450
00:16:19,279 --> 00:16:23,389
parser for all of them so let's look at

451
00:16:22,010 --> 00:16:25,490
a specific example of this to make this

452
00:16:23,389 --> 00:16:27,800
more concrete let's say you have a bunch

453
00:16:25,490 --> 00:16:30,589
of node.js code and you want to find

454
00:16:27,800 --> 00:16:33,800
calls to exec where the first argument

455
00:16:30,589 --> 00:16:35,360
is not a string right so like any trusty

456
00:16:33,800 --> 00:16:37,399
security professional you decided to

457
00:16:35,360 --> 00:16:40,760
write a regex for it and it might look

458
00:16:37,399 --> 00:16:43,339
like this but then you might find code

459
00:16:40,760 --> 00:16:46,100
like this where it's on multiple lines

460
00:16:43,339 --> 00:16:47,569
or the end of the function is exact but

461
00:16:46,100 --> 00:16:49,399
it's not the one you meant or maybe it's

462
00:16:47,569 --> 00:16:52,610
in a comment maybe it's in a hard-coded

463
00:16:49,399 --> 00:16:54,470
string and you know quickly you become a

464
00:16:52,610 --> 00:16:57,079
little bit sad like what you want to be

465
00:16:54,470 --> 00:16:58,910
able to do is say find me all function

466
00:16:57,079 --> 00:17:00,949
calls such that the function call is

467
00:16:58,910 --> 00:17:03,589
this name right conceptually this is

468
00:17:00,949 --> 00:17:05,688
very simple so there's actually a tool

469
00:17:03,589 --> 00:17:08,660
that's free it's on github right now

470
00:17:05,689 --> 00:17:10,130
called s CREP or Symantec grep and you

471
00:17:08,660 --> 00:17:12,709
can think of it like a code aware grep

472
00:17:10,130 --> 00:17:15,860
so in this example you could say s CREP

473
00:17:12,709 --> 00:17:17,900
- e exec dot and you're just saying find

474
00:17:15,859 --> 00:17:21,139
me a function call whose name is exec I

475
00:17:17,900 --> 00:17:23,449
don't care about the arguments and it

476
00:17:21,140 --> 00:17:25,010
can also use this idea of meta variables

477
00:17:23,449 --> 00:17:26,839
where you might say find me all

478
00:17:25,010 --> 00:17:29,059
conditionals where the if and the else

479
00:17:26,839 --> 00:17:30,320
body are the same right generally that

480
00:17:29,059 --> 00:17:33,500
shouldn't happen it's a little bit weird

481
00:17:30,320 --> 00:17:36,049
or you could say find me calls to boto 3

482
00:17:33,500 --> 00:17:38,049
dot clients where there's this dict

483
00:17:36,049 --> 00:17:40,389
argument where the values

484
00:17:38,049 --> 00:17:42,279
- the secret access key and key ID are

485
00:17:40,389 --> 00:17:44,350
hard-coded strings right so you have

486
00:17:42,279 --> 00:17:46,629
hard-coded secrets so again the idea is

487
00:17:44,350 --> 00:17:50,498
I have an idea in my head how do we

488
00:17:46,629 --> 00:17:52,480
express this as cleanly as possible okay

489
00:17:50,499 --> 00:17:55,210
so we talked a lot about how so what to

490
00:17:52,480 --> 00:17:56,830
look for one thing is high signal

491
00:17:55,210 --> 00:17:59,649
vulnerability checks and security anti

492
00:17:56,830 --> 00:18:02,619
patterns for example disabling TLS so if

493
00:17:59,649 --> 00:18:03,939
you see this probably it's bad you might

494
00:18:02,619 --> 00:18:05,769
want to block banned or dangerous

495
00:18:03,940 --> 00:18:08,259
functions for example calls to exec or

496
00:18:05,769 --> 00:18:10,600
eval Mozilla has some ESL and plugins to

497
00:18:08,259 --> 00:18:12,940
do that maybe it's not a bug but it's

498
00:18:10,600 --> 00:18:14,408
just some security additions to the code

499
00:18:12,940 --> 00:18:16,179
that's interesting like hey I see you're

500
00:18:14,409 --> 00:18:18,820
doing crypto stuff like maybe we want to

501
00:18:16,179 --> 00:18:20,559
reach out to this development team you

502
00:18:18,820 --> 00:18:22,989
can also alert on sensitive file changes

503
00:18:20,559 --> 00:18:26,019
like the authentication or authorization

504
00:18:22,989 --> 00:18:28,629
flow the login flow things that probably

505
00:18:26,019 --> 00:18:30,090
shouldn't change that much and the

506
00:18:28,629 --> 00:18:32,439
security team wants to know about it

507
00:18:30,090 --> 00:18:37,029
here's a couple of tools that generally

508
00:18:32,440 --> 00:18:38,440
are not too shabby okay so there's a

509
00:18:37,029 --> 00:18:40,359
nice talk by Aladdin of the Netflix

510
00:18:38,440 --> 00:18:42,129
security team about how they deal with

511
00:18:40,359 --> 00:18:43,779
open source vulnerabilities at scale

512
00:18:42,129 --> 00:18:46,809
every language has their own tool

513
00:18:43,779 --> 00:18:49,090
there's a bunch of commercial tools you

514
00:18:46,809 --> 00:18:51,668
can look it up another thing that's

515
00:18:49,090 --> 00:18:53,499
interesting with this move to DevOps and

516
00:18:51,669 --> 00:18:55,679
terraform and so forth there's a number

517
00:18:53,499 --> 00:18:58,179
of security linting tools for those

518
00:18:55,679 --> 00:19:01,960
infrastructure as code things so here's

519
00:18:58,179 --> 00:19:03,639
a couple of examples so key takeaways

520
00:19:01,960 --> 00:19:05,409
from this you want to have the

521
00:19:03,639 --> 00:19:08,109
capability to scan every pull request

522
00:19:05,409 --> 00:19:10,629
code base and deployed service ideally

523
00:19:08,109 --> 00:19:12,549
you're using high signal checks only and

524
00:19:10,629 --> 00:19:14,678
we're not necessarily finding every bug

525
00:19:12,549 --> 00:19:16,480
we're just ensuring a security baseline

526
00:19:14,679 --> 00:19:18,340
I think that's like a key perspective

527
00:19:16,480 --> 00:19:19,720
shift that's useful right so you might

528
00:19:18,340 --> 00:19:21,519
be scanning for missing security

529
00:19:19,720 --> 00:19:26,320
controls in security area relevant

530
00:19:21,519 --> 00:19:28,690
changes okay that's fundamental so what

531
00:19:26,320 --> 00:19:30,428
is it it depends on who you ask but for

532
00:19:28,690 --> 00:19:32,919
me it's a list of the things you own so

533
00:19:30,429 --> 00:19:35,169
code servers databases and so forth so

534
00:19:32,919 --> 00:19:37,419
maybe this is a black box external a

535
00:19:35,169 --> 00:19:39,730
point of view where you're using OS int

536
00:19:37,419 --> 00:19:41,830
and certificate transparency maybe you

537
00:19:39,730 --> 00:19:42,700
give the tool access to your AWS

538
00:19:41,830 --> 00:19:44,739
environment and then it's a

539
00:19:42,700 --> 00:19:47,799
programmatically it figures out what you

540
00:19:44,739 --> 00:19:50,409
own or this last one white box holistic

541
00:19:47,799 --> 00:19:51,879
so maybe you give it a key to github as

542
00:19:50,409 --> 00:19:52,050
well as other tools you use and it sort

543
00:19:51,879 --> 00:19:53,490
of

544
00:19:52,050 --> 00:19:57,120
their API is to figure out what is your

545
00:19:53,490 --> 00:19:58,950
environment look like so the core idea

546
00:19:57,120 --> 00:20:01,050
is we want to know what we own and how

547
00:19:58,950 --> 00:20:03,780
they connect so first thing that's

548
00:20:01,050 --> 00:20:05,700
useful is code and cloud and there's

549
00:20:03,780 --> 00:20:07,740
many things but I would start here so

550
00:20:05,700 --> 00:20:09,450
knowing in each repo what's the owning

551
00:20:07,740 --> 00:20:11,940
team who's the security point of contact

552
00:20:09,450 --> 00:20:14,070
and so forth and then in the cloud

553
00:20:11,940 --> 00:20:16,800
environment what services are we using

554
00:20:14,070 --> 00:20:20,970
what do credentials and roles in network

555
00:20:16,800 --> 00:20:22,590
kacl's look like and so forth and as you

556
00:20:20,970 --> 00:20:24,150
go along it's nice to build capabilities

557
00:20:22,590 --> 00:20:27,330
to get visibility into other assets

558
00:20:24,150 --> 00:20:29,760
being able to for example track code

559
00:20:27,330 --> 00:20:31,110
from when it's in the repo to QA and

560
00:20:29,760 --> 00:20:32,940
staging all the way to production is

561
00:20:31,110 --> 00:20:34,169
nice and so we're getting visibility

562
00:20:32,940 --> 00:20:36,320
into all these different parts of our

563
00:20:34,170 --> 00:20:39,780
ecosystem and being able to query across

564
00:20:36,320 --> 00:20:41,340
things is very nice as well so Sasha

565
00:20:39,780 --> 00:20:43,050
from lyft talked about this at besides

566
00:20:41,340 --> 00:20:45,240
last year and released a tool called

567
00:20:43,050 --> 00:20:47,610
cartography and it's pretty neat

568
00:20:45,240 --> 00:20:48,780
and then our King they're working on

569
00:20:47,610 --> 00:20:50,520
like a commercial version of it

570
00:20:48,780 --> 00:20:52,889
basically and then there was a talk by

571
00:20:50,520 --> 00:20:54,450
Robin Oscar where they also give some

572
00:20:52,890 --> 00:20:58,530
nice overview of the asset inventory

573
00:20:54,450 --> 00:21:00,660
space okay so the idea of cartography is

574
00:20:58,530 --> 00:21:02,550
basically let's enumerate all of our

575
00:21:00,660 --> 00:21:04,410
assets what we own and then represent

576
00:21:02,550 --> 00:21:06,629
them in a new approach a database where

577
00:21:04,410 --> 00:21:10,230
each node is like an entity and edges

578
00:21:06,630 --> 00:21:11,850
are relationships between those so here

579
00:21:10,230 --> 00:21:14,400
are some things you can do you could say

580
00:21:11,850 --> 00:21:17,129
which RDS instances have encryption

581
00:21:14,400 --> 00:21:19,290
turned off which ec2 instances are

582
00:21:17,130 --> 00:21:20,850
directly exposed to the internet and

583
00:21:19,290 --> 00:21:22,170
let's look at a little bit more advanced

584
00:21:20,850 --> 00:21:25,260
but I think more realistic and

585
00:21:22,170 --> 00:21:27,480
interesting example so let's say your

586
00:21:25,260 --> 00:21:30,180
company happens to run something like

587
00:21:27,480 --> 00:21:32,880
struts and you might know where I'm

588
00:21:30,180 --> 00:21:33,750
going with this let's say there's a new

589
00:21:32,880 --> 00:21:37,830
critical RCE

590
00:21:33,750 --> 00:21:40,770
it has a cool page a cool logo and maybe

591
00:21:37,830 --> 00:21:42,629
you're a bit unhappy about it and let's

592
00:21:40,770 --> 00:21:44,430
say there's also a curl POC that's been

593
00:21:42,630 --> 00:21:46,830
released in terms of like how to

594
00:21:44,430 --> 00:21:48,570
diagnose if you're affected so if you

595
00:21:46,830 --> 00:21:51,210
have a nice acid inventory and some of

596
00:21:48,570 --> 00:21:52,800
these fundamentals what can you do so

597
00:21:51,210 --> 00:21:54,330
first you could say okay figure out what

598
00:21:52,800 --> 00:21:56,430
are all the servers I own and where are

599
00:21:54,330 --> 00:21:58,649
they you could then again using this

600
00:21:56,430 --> 00:22:00,360
sort of MapReduce type functionality run

601
00:21:58,650 --> 00:22:03,240
curl on all of those to figure out which

602
00:22:00,360 --> 00:22:05,070
of these are actually affected and again

603
00:22:03,240 --> 00:22:05,680
you can say oh I know which services are

604
00:22:05,070 --> 00:22:08,409
running

605
00:22:05,680 --> 00:22:09,700
so I can actually say oh these

606
00:22:08,410 --> 00:22:11,290
vulnerable ones I actually know which

607
00:22:09,700 --> 00:22:14,860
repo is responsible for those running

608
00:22:11,290 --> 00:22:17,620
services from there you can say oh I

609
00:22:14,860 --> 00:22:19,689
know the owner for those repos and then

610
00:22:17,620 --> 00:22:21,909
you could say oh let's send an automated

611
00:22:19,690 --> 00:22:23,500
email or slack message or created your a

612
00:22:21,910 --> 00:22:25,450
ticket assigned to those people who are

613
00:22:23,500 --> 00:22:28,060
responsible for the repo that is

614
00:22:25,450 --> 00:22:30,190
responsible for the struts vulnerability

615
00:22:28,060 --> 00:22:32,620
all right so we're taking a incident

616
00:22:30,190 --> 00:22:34,240
response scenario that might take hours

617
00:22:32,620 --> 00:22:36,600
or days to respond to and cutting that

618
00:22:34,240 --> 00:22:39,580
down to ideally only a couple of minutes

619
00:22:36,600 --> 00:22:43,389
so this is for incident response but it

620
00:22:39,580 --> 00:22:45,929
could be applied in many ways okay so

621
00:22:43,390 --> 00:22:50,050
let's talk about scaling our efforts

622
00:22:45,930 --> 00:22:51,880
we'll talk about a couple of areas so

623
00:22:50,050 --> 00:22:53,500
many companies find they can't threat

624
00:22:51,880 --> 00:22:55,780
model every story so what do you focus

625
00:22:53,500 --> 00:22:57,280
on there's been a bunch of work in this

626
00:22:55,780 --> 00:23:00,580
space but I think it boils down to three

627
00:22:57,280 --> 00:23:02,530
main areas so one is having developers

628
00:23:00,580 --> 00:23:04,330
fill out self-service security

629
00:23:02,530 --> 00:23:05,860
questionnaires basically here's what I'm

630
00:23:04,330 --> 00:23:07,629
thinking about doing here's the

631
00:23:05,860 --> 00:23:09,100
sensitive data it touches here's sort of

632
00:23:07,630 --> 00:23:11,350
the risk of the types of things I'm

633
00:23:09,100 --> 00:23:14,050
doing in terms of like parsing XML maybe

634
00:23:11,350 --> 00:23:15,399
parsing URLs and so forth and then

635
00:23:14,050 --> 00:23:16,990
basically it spits out here are some

636
00:23:15,400 --> 00:23:19,000
things you should make sure to do and a

637
00:23:16,990 --> 00:23:21,610
risk score so the security team can

638
00:23:19,000 --> 00:23:23,470
prioritize or you could have some

639
00:23:21,610 --> 00:23:26,320
lightweight lightweight threat modeling

640
00:23:23,470 --> 00:23:28,390
in the sdlc itself maybe after they talk

641
00:23:26,320 --> 00:23:30,370
about what features are required for

642
00:23:28,390 --> 00:23:32,320
acceptance criteria you could say oh

643
00:23:30,370 --> 00:23:34,449
also how could this functionality be

644
00:23:32,320 --> 00:23:36,189
abused and then how can we prevent that

645
00:23:34,450 --> 00:23:38,230
and then there's this idea of threat

646
00:23:36,190 --> 00:23:40,510
model as code so the idea for all of

647
00:23:38,230 --> 00:23:44,260
these is basically what should we spend

648
00:23:40,510 --> 00:23:46,720
limited apps like engineer time on okay

649
00:23:44,260 --> 00:23:48,340
so security engineering the core idea

650
00:23:46,720 --> 00:23:49,660
here is building libraries and tools

651
00:23:48,340 --> 00:23:51,580
that are secure by default for

652
00:23:49,660 --> 00:23:53,500
developers and I want to emphasize that

653
00:23:51,580 --> 00:23:54,909
framework and tech choices really matter

654
00:23:53,500 --> 00:23:57,100
right so if you make the right choices

655
00:23:54,910 --> 00:23:59,650
here this can mitigate whole classes of

656
00:23:57,100 --> 00:24:01,120
vulnerabilities later so I included this

657
00:23:59,650 --> 00:24:03,010
picture of the wild wild west because

658
00:24:01,120 --> 00:24:05,560
that's basically where we were in web

659
00:24:03,010 --> 00:24:07,330
security in the early 2000s and I

660
00:24:05,560 --> 00:24:10,300
believe the core reason for that is that

661
00:24:07,330 --> 00:24:12,220
developers had to manually parameterize

662
00:24:10,300 --> 00:24:14,139
queries they had to manually output in

663
00:24:12,220 --> 00:24:16,000
code basically they had to remember to

664
00:24:14,140 --> 00:24:17,920
do something in order to not screw it up

665
00:24:16,000 --> 00:24:18,919
but with object relational mapper --zz

666
00:24:17,920 --> 00:24:20,149
default

667
00:24:18,919 --> 00:24:21,980
output encoding all these things have

668
00:24:20,149 --> 00:24:24,709
sort of systematically reduced these

669
00:24:21,980 --> 00:24:26,450
types of issues over time so when you're

670
00:24:24,710 --> 00:24:28,700
thinking about where do we focus these

671
00:24:26,450 --> 00:24:30,200
efforts generally managing secrets

672
00:24:28,700 --> 00:24:33,019
anything related to crypto

673
00:24:30,200 --> 00:24:34,369
authentication authorization sequel file

674
00:24:33,019 --> 00:24:35,720
system access all of these things are

675
00:24:34,369 --> 00:24:37,070
good areas to start but really it's

676
00:24:35,720 --> 00:24:39,679
broader than this these are just some

677
00:24:37,070 --> 00:24:41,299
examples so just some case studies I

678
00:24:39,679 --> 00:24:42,559
know one company who ported their

679
00:24:41,299 --> 00:24:44,509
front-end code to react and that

680
00:24:42,559 --> 00:24:46,970
essentially killed cross-site scripting

681
00:24:44,509 --> 00:24:49,580
another wrote this data model wrapper

682
00:24:46,970 --> 00:24:51,080
library where all data access had to go

683
00:24:49,580 --> 00:24:52,489
through in order to access any customer

684
00:24:51,080 --> 00:24:55,369
data and that basically killed sequel

685
00:24:52,489 --> 00:24:57,259
injection and the core idea here is if

686
00:24:55,369 --> 00:24:58,789
something is hard to do securely if you

687
00:24:57,259 --> 00:25:00,350
have to just be aware of various threats

688
00:24:58,789 --> 00:25:02,210
just like build is secure by default

689
00:25:00,350 --> 00:25:05,539
implementation and then how everyone use

690
00:25:02,210 --> 00:25:07,669
those one quote from asti like a lot is

691
00:25:05,539 --> 00:25:09,980
hit your security wagon - developer

692
00:25:07,669 --> 00:25:12,019
productivity right so this secure

693
00:25:09,980 --> 00:25:13,940
version ideally have has an even better

694
00:25:12,019 --> 00:25:16,580
developer user experience than the old

695
00:25:13,940 --> 00:25:18,139
way another key insight is if you

696
00:25:16,580 --> 00:25:20,480
integrate security at the right points

697
00:25:18,139 --> 00:25:22,279
you can get adoption much easier so say

698
00:25:20,480 --> 00:25:24,769
for example there is a new project

699
00:25:22,279 --> 00:25:27,019
starter template where every new say

700
00:25:24,769 --> 00:25:28,730
going microservice just clones that and

701
00:25:27,019 --> 00:25:30,830
then starts building if you can put your

702
00:25:28,730 --> 00:25:32,419
security controls into that then

703
00:25:30,830 --> 00:25:33,710
everyone who builds from that is going

704
00:25:32,419 --> 00:25:36,830
to get it for free and you don't have to

705
00:25:33,710 --> 00:25:38,590
sort of convince them to adopt it ok

706
00:25:36,830 --> 00:25:41,629
let's talk about detection in response

707
00:25:38,590 --> 00:25:44,178
so this idea I think is pretty mean VI

708
00:25:41,629 --> 00:25:45,980
essentially it's when a fishy event

709
00:25:44,179 --> 00:25:48,739
occurs maybe a developer is running some

710
00:25:45,980 --> 00:25:50,539
command on a production server you send

711
00:25:48,739 --> 00:25:52,009
them a slack message and say hey was

712
00:25:50,539 --> 00:25:54,169
this really you and then they have to

713
00:25:52,009 --> 00:25:57,919
say you know yes or no and you only send

714
00:25:54,169 --> 00:26:00,470
it to the sock or IR team to investigate

715
00:25:57,919 --> 00:26:02,210
if they said no all right so essentially

716
00:26:00,470 --> 00:26:04,759
again we're trying to free up security

717
00:26:02,210 --> 00:26:07,789
engineer time as much as possible so

718
00:26:04,759 --> 00:26:09,859
what I like about this is we see slack

719
00:26:07,789 --> 00:26:12,139
writing a blog post about it in 2016

720
00:26:09,859 --> 00:26:14,840
then Dropbox writing a blog post about

721
00:26:12,139 --> 00:26:16,758
it and releasing some POC code in 2017

722
00:26:14,840 --> 00:26:19,249
and then Pinterest talking about it at a

723
00:26:16,759 --> 00:26:20,960
different conference in 2018 so we can

724
00:26:19,249 --> 00:26:23,679
see this idea sort of moving across

725
00:26:20,960 --> 00:26:27,049
companies which i think is pretty neat

726
00:26:23,679 --> 00:26:28,639
ok so here's a blog post I like from

727
00:26:27,049 --> 00:26:29,850
Dropbox about how they handle threat

728
00:26:28,639 --> 00:26:31,649
detection

729
00:26:29,850 --> 00:26:33,320
and so basically if something the

730
00:26:31,650 --> 00:26:36,000
sketchy happens there is a cop-caller

731
00:26:33,320 --> 00:26:38,668
which messages this other system call it

732
00:26:36,000 --> 00:26:40,289
alert box which then grabs information

733
00:26:38,669 --> 00:26:43,289
from disparate systems basically all the

734
00:26:40,289 --> 00:26:45,570
context you might want to know then it

735
00:26:43,289 --> 00:26:47,309
sends that to this micro service called

736
00:26:45,570 --> 00:26:49,379
for Rumer forerunner which is running

737
00:26:47,309 --> 00:26:50,910
some sort of heavier analysis and

738
00:26:49,380 --> 00:26:52,950
running a steps in a jupiter notebook

739
00:26:50,910 --> 00:26:56,730
that say for this type of event this is

740
00:26:52,950 --> 00:26:57,990
how we respond and then the analyst is

741
00:26:56,730 --> 00:27:00,120
then given the stupider notebook

742
00:26:57,990 --> 00:27:01,919
environment where all of the data has

743
00:27:00,120 --> 00:27:03,989
been gathered there's all these clear

744
00:27:01,919 --> 00:27:05,730
steps that have already been taken so

745
00:27:03,990 --> 00:27:07,049
it's easy to repeat across every analyst

746
00:27:05,730 --> 00:27:09,059
because the steps of what to do are

747
00:27:07,049 --> 00:27:11,190
documented and also any additional

748
00:27:09,059 --> 00:27:12,389
investigation they do is then saved in

749
00:27:11,190 --> 00:27:15,210
the notebook so you can go back later

750
00:27:12,390 --> 00:27:16,350
and say oh did we do we do the right

751
00:27:15,210 --> 00:27:19,980
thing should we maybe change this

752
00:27:16,350 --> 00:27:22,049
process in the future another idea is

753
00:27:19,980 --> 00:27:23,789
automating sauk run books so basically

754
00:27:22,049 --> 00:27:26,100
rather than manually responding to

755
00:27:23,789 --> 00:27:28,679
everything define your response process

756
00:27:26,100 --> 00:27:30,270
and then have some lambdas automatically

757
00:27:28,679 --> 00:27:32,429
spin up to either call the relevant

758
00:27:30,270 --> 00:27:35,370
security products right run custom

759
00:27:32,429 --> 00:27:37,770
scripts and so forth so Twilio released

760
00:27:35,370 --> 00:27:39,989
a tool called sockless auth0 talked

761
00:27:37,770 --> 00:27:41,549
about this as well and then the AWS

762
00:27:39,990 --> 00:27:46,320
security hub has a nice blog post about

763
00:27:41,549 --> 00:27:48,780
this idea also ok so core takeaways here

764
00:27:46,320 --> 00:27:50,220
if you can push first line triage to

765
00:27:48,780 --> 00:27:52,649
developers or people who are just not

766
00:27:50,220 --> 00:27:54,870
the security team that's nice any

767
00:27:52,650 --> 00:27:56,760
context that the human analyst needs to

768
00:27:54,870 --> 00:27:59,189
proceed just gather this automatically

769
00:27:56,760 --> 00:28:00,690
and ideally you want to document run

770
00:27:59,190 --> 00:28:01,799
books for how you respond to different

771
00:28:00,690 --> 00:28:04,789
events so that you have some

772
00:28:01,799 --> 00:28:06,480
standardization and then automate them

773
00:28:04,789 --> 00:28:08,490
ok cool

774
00:28:06,480 --> 00:28:11,130
we're doing so well we're almost there I

775
00:28:08,490 --> 00:28:12,419
paid a graphic artist a lot of money to

776
00:28:11,130 --> 00:28:13,890
make this because I was like security

777
00:28:12,419 --> 00:28:17,760
endgame we should have should have a

778
00:28:13,890 --> 00:28:20,130
cool thing boom so yeah so that so these

779
00:28:17,760 --> 00:28:26,429
are the you know aggressive long long

780
00:28:20,130 --> 00:28:28,320
term stuff ok so the first thing as one

781
00:28:26,429 --> 00:28:30,120
of my favorite tools and ideas by Travis

782
00:28:28,320 --> 00:28:32,220
of Netflix so when you create a new

783
00:28:30,120 --> 00:28:34,469
service at Netflix it's given a base set

784
00:28:32,220 --> 00:28:36,360
of permissions and then essentially what

785
00:28:34,470 --> 00:28:38,490
repo kit does is it watches how it

786
00:28:36,360 --> 00:28:40,260
behaves over time and then if it doesn't

787
00:28:38,490 --> 00:28:41,669
need permissions it's given it just

788
00:28:40,260 --> 00:28:42,650
takes them away and then watches if the

789
00:28:41,669 --> 00:28:44,930
app starts failing

790
00:28:42,650 --> 00:28:47,000
so basically without talking to the

791
00:28:44,930 --> 00:28:48,950
security team every app is gradually

792
00:28:47,000 --> 00:28:50,840
converging to least privileged and apps

793
00:28:48,950 --> 00:28:53,990
that don't need any permissions converge

794
00:28:50,840 --> 00:28:56,840
to zero so this is pretty awesome more

795
00:28:53,990 --> 00:28:58,820
recently a canard from Salesforce wrote

796
00:28:56,840 --> 00:29:00,169
a tool called policy sentry that comes

797
00:28:58,820 --> 00:29:02,120
at it from a different angle like how do

798
00:29:00,170 --> 00:29:03,290
we make lease privileged policies from

799
00:29:02,120 --> 00:29:05,409
the beginning rather than removing

800
00:29:03,290 --> 00:29:08,000
permissions later

801
00:29:05,410 --> 00:29:10,490
so let's look into that a little bit

802
00:29:08,000 --> 00:29:12,530
more detail why is that so awesome so

803
00:29:10,490 --> 00:29:14,720
the ongoing time requirements from the

804
00:29:12,530 --> 00:29:16,610
security team are essentially none other

805
00:29:14,720 --> 00:29:18,380
than maintaining the tool but the

806
00:29:16,610 --> 00:29:21,050
security benefit and the risk reduction

807
00:29:18,380 --> 00:29:22,550
is huge right like how much work would

808
00:29:21,050 --> 00:29:24,889
it be to manually look at every single

809
00:29:22,550 --> 00:29:26,750
micro service in your company and say oh

810
00:29:24,890 --> 00:29:29,390
like what exact permissions does this

811
00:29:26,750 --> 00:29:30,950
need in AWS right that would both be

812
00:29:29,390 --> 00:29:34,160
point in time difficult and just

813
00:29:30,950 --> 00:29:36,110
impossible over time so anytime you can

814
00:29:34,160 --> 00:29:38,150
find opportunities like this you should

815
00:29:36,110 --> 00:29:42,050
take them specifically we're trying to

816
00:29:38,150 --> 00:29:44,480
maximize the ratio of security ROI to

817
00:29:42,050 --> 00:29:48,470
the ongoing time requirements for the

818
00:29:44,480 --> 00:29:51,560
security team ok targeting vulnerability

819
00:29:48,470 --> 00:29:52,970
classes again this is another slide from

820
00:29:51,560 --> 00:29:54,770
our Cadiz talk so this is

821
00:29:52,970 --> 00:29:56,480
vulnerabilities by category so again

822
00:29:54,770 --> 00:29:57,920
when you're doing vulnerability

823
00:29:56,480 --> 00:29:59,900
management you could say oh these are

824
00:29:57,920 --> 00:30:04,250
the issues we have the most maybe we

825
00:29:59,900 --> 00:30:05,900
want to start there ok so a number of

826
00:30:04,250 --> 00:30:07,850
projects at NCC started like this

827
00:30:05,900 --> 00:30:09,950
hey we're not getting a lot of value

828
00:30:07,850 --> 00:30:11,540
from this popular SAS tool can you look

829
00:30:09,950 --> 00:30:14,600
at how we're doing things and just you

830
00:30:11,540 --> 00:30:16,520
know help us get more value so the

831
00:30:14,600 --> 00:30:18,560
initial ask was like how do we get more

832
00:30:16,520 --> 00:30:20,600
value what does that actually mean

833
00:30:18,560 --> 00:30:23,000
probably it means something like how do

834
00:30:20,600 --> 00:30:27,020
we find more bugs of higher criticality

835
00:30:23,000 --> 00:30:28,490
with less manual time but if we take a

836
00:30:27,020 --> 00:30:30,500
step back I think what we care about

837
00:30:28,490 --> 00:30:32,450
really is just how do we find bugs more

838
00:30:30,500 --> 00:30:35,810
efficiently regardless of the approach

839
00:30:32,450 --> 00:30:38,000
and taking another step back given

840
00:30:35,810 --> 00:30:40,070
limited apps ik engineer time and budget

841
00:30:38,000 --> 00:30:43,250
what's the best way for us to overall

842
00:30:40,070 --> 00:30:46,760
reduce risk and again this is not tool

843
00:30:43,250 --> 00:30:48,920
or approach specific ok so how to do

844
00:30:46,760 --> 00:30:50,960
this at your company so aggregate your

845
00:30:48,920 --> 00:30:52,850
vulnerabilities over the past couple of

846
00:30:50,960 --> 00:30:54,770
quarters or a couple of years group them

847
00:30:52,850 --> 00:30:56,030
by the vulnerability class is well

848
00:30:54,770 --> 00:30:57,560
how you found them and you want to

849
00:30:56,030 --> 00:31:00,680
probably wait by you know how much you

850
00:30:57,560 --> 00:31:02,810
care how severe were they and then think

851
00:31:00,680 --> 00:31:05,030
what can either find or prevent them at

852
00:31:02,810 --> 00:31:06,950
scale so the goal here is minimizing

853
00:31:05,030 --> 00:31:09,230
costs either you know bug banning

854
00:31:06,950 --> 00:31:11,330
pentesting directly or to a licensing as

855
00:31:09,230 --> 00:31:13,190
well as app set time in terms of finding

856
00:31:11,330 --> 00:31:16,419
manually triaging results and so forth

857
00:31:13,190 --> 00:31:19,160
so is one method finding all of your

858
00:31:16,420 --> 00:31:20,210
issues have you had other success

859
00:31:19,160 --> 00:31:22,550
stories in your company that you can

860
00:31:20,210 --> 00:31:25,520
leverage and learn from these are useful

861
00:31:22,550 --> 00:31:28,129
things to think about so let's say again

862
00:31:25,520 --> 00:31:29,690
another example if you can see where are

863
00:31:28,130 --> 00:31:32,150
all the vulnerabilities come from you

864
00:31:29,690 --> 00:31:34,520
might be able to say oh we see this tool

865
00:31:32,150 --> 00:31:35,750
or this say pen testing or bug bounty is

866
00:31:34,520 --> 00:31:38,060
finding most of the issues that are

867
00:31:35,750 --> 00:31:39,380
high-impact that we actually fix or this

868
00:31:38,060 --> 00:31:41,870
approach is finding things that usually

869
00:31:39,380 --> 00:31:45,260
we just mark is don't care so maybe we

870
00:31:41,870 --> 00:31:47,120
want to deprioritize that so let's look

871
00:31:45,260 --> 00:31:49,550
at a specific example let's say you did

872
00:31:47,120 --> 00:31:50,870
a time audit of your app SEC team and

873
00:31:49,550 --> 00:31:53,629
you're like this is sort of how we spend

874
00:31:50,870 --> 00:31:56,689
our time we spend a fair amount of time

875
00:31:53,630 --> 00:32:00,250
dealing with xxe a little bit manually

876
00:31:56,690 --> 00:32:02,630
running security tools and so forth

877
00:32:00,250 --> 00:32:04,730
so let's say hey we were spending a lot

878
00:32:02,630 --> 00:32:06,080
of time on xxe let's like drill into

879
00:32:04,730 --> 00:32:08,210
that more like whoa what are the

880
00:32:06,080 --> 00:32:09,740
subcomponents of that so you might say

881
00:32:08,210 --> 00:32:11,930
okay well we're doing some developer

882
00:32:09,740 --> 00:32:13,370
training we're triaging bug bounties

883
00:32:11,930 --> 00:32:15,260
submissions we're working with

884
00:32:13,370 --> 00:32:17,179
developers to fix the issues as well as

885
00:32:15,260 --> 00:32:18,110
validating that the fixes actually

886
00:32:17,180 --> 00:32:19,700
worked

887
00:32:18,110 --> 00:32:22,100
we're configuring both SAST and DAST

888
00:32:19,700 --> 00:32:25,090
tools to do that and the point here is

889
00:32:22,100 --> 00:32:28,040
all of these are continuous ongoing

890
00:32:25,090 --> 00:32:29,540
recurring operational time costs right

891
00:32:28,040 --> 00:32:30,830
these are things that you're doing that

892
00:32:29,540 --> 00:32:34,220
are preventing you from doing other

893
00:32:30,830 --> 00:32:36,710
things so what if we were to instead say

894
00:32:34,220 --> 00:32:39,800
build a safe by default wrapper library

895
00:32:36,710 --> 00:32:41,630
for parsing XML that disables dtds and

896
00:32:39,800 --> 00:32:44,780
basically if you use this version you're

897
00:32:41,630 --> 00:32:46,070
safe and then you teach developers about

898
00:32:44,780 --> 00:32:47,810
this library and then roll it out

899
00:32:46,070 --> 00:32:49,669
everywhere and then you have lightweight

900
00:32:47,810 --> 00:32:51,860
scanning for every poor request which

901
00:32:49,670 --> 00:32:53,480
basically says hey if you're doing XML

902
00:32:51,860 --> 00:32:55,520
parsing like are you using the library

903
00:32:53,480 --> 00:32:57,500
we wrote for you and then if not maybe

904
00:32:55,520 --> 00:32:59,660
warned or block and then basically

905
00:32:57,500 --> 00:33:01,340
you're done right by construction you

906
00:32:59,660 --> 00:33:03,230
don't actually have to do all of this

907
00:33:01,340 --> 00:33:04,730
complicated bug finding analysis because

908
00:33:03,230 --> 00:33:06,970
you've just eliminated it by

909
00:33:04,730 --> 00:33:09,560
construction

910
00:33:06,970 --> 00:33:11,630
so Morgan Roman from DocuSign gave a

911
00:33:09,560 --> 00:33:14,000
nice talk about this approach where he

912
00:33:11,630 --> 00:33:16,610
describes how they eliminated regex das

913
00:33:14,000 --> 00:33:19,400
xx EE open redirect as well as SS RF

914
00:33:16,610 --> 00:33:22,250
basically by secure by default libraries

915
00:33:19,400 --> 00:33:23,750
as well as ensuring their use right it's

916
00:33:22,250 --> 00:33:27,110
a simple idea but I think very powerful

917
00:33:23,750 --> 00:33:29,240
so let's go back to your app set time so

918
00:33:27,110 --> 00:33:32,179
where we were previously spending time

919
00:33:29,240 --> 00:33:34,130
on xxe we've essentially eliminated that

920
00:33:32,180 --> 00:33:36,170
so now that time we were spending there

921
00:33:34,130 --> 00:33:38,570
we can now start devoting to other areas

922
00:33:36,170 --> 00:33:41,000
so we might say oh we're manually

923
00:33:38,570 --> 00:33:43,280
running security tools like maybe let's

924
00:33:41,000 --> 00:33:45,530
automate that a little bit and then boom

925
00:33:43,280 --> 00:33:47,389
now 50% of your time that you used to be

926
00:33:45,530 --> 00:33:49,790
spending on other things is now free to

927
00:33:47,390 --> 00:33:52,550
invest again in further high-leverage

928
00:33:49,790 --> 00:33:54,050
activities so the point here is we're

929
00:33:52,550 --> 00:33:55,909
basically trying to build a apps X

930
00:33:54,050 --> 00:33:58,639
snowball where we are systematically

931
00:33:55,910 --> 00:34:00,620
becoming more effective and our efforts

932
00:33:58,640 --> 00:34:01,820
more scalable over time right rather

933
00:34:00,620 --> 00:34:04,129
than playing whack-a-mole a bunch of

934
00:34:01,820 --> 00:34:08,029
places we're trying to have compounding

935
00:34:04,130 --> 00:34:09,800
returns on our efforts so again what I

936
00:34:08,030 --> 00:34:12,290
like to say is security engineering is

937
00:34:09,800 --> 00:34:14,659
the compound interest of security right

938
00:34:12,290 --> 00:34:17,149
so you might be putting in some time

939
00:34:14,659 --> 00:34:18,620
here this week and maybe in the next few

940
00:34:17,149 --> 00:34:21,350
months and you don't necessarily see a

941
00:34:18,620 --> 00:34:23,899
lot of value immediately but over time

942
00:34:21,350 --> 00:34:25,520
you are investing in things that you can

943
00:34:23,899 --> 00:34:28,270
build upon and you're just becoming more

944
00:34:25,520 --> 00:34:31,250
effective higher leveraged over time

945
00:34:28,270 --> 00:34:33,380
also when I wrote this slide I wanted to

946
00:34:31,250 --> 00:34:34,090
point out that quoting yourself is kind

947
00:34:33,380 --> 00:34:38,350
of awkward

948
00:34:34,090 --> 00:34:41,390
obviously Ghandi said that okay so

949
00:34:38,350 --> 00:34:43,100
targeting bolon classes use your

950
00:34:41,389 --> 00:34:45,168
vulnerability history to determine where

951
00:34:43,100 --> 00:34:46,429
to invest effort consider the

952
00:34:45,168 --> 00:34:48,799
vulnerability classes like what's

953
00:34:46,429 --> 00:34:50,780
finding them what's their impact what's

954
00:34:48,800 --> 00:34:53,390
the most effective way in terms of time

955
00:34:50,780 --> 00:34:57,040
and money to reduce risk and solving bug

956
00:34:53,389 --> 00:34:58,520
classes amplifies your effectiveness

957
00:34:57,040 --> 00:35:01,790
okay

958
00:34:58,520 --> 00:35:04,380
last topic enforcing invariance

959
00:35:01,790 --> 00:35:06,390
so I think this idea is super neat and

960
00:35:04,380 --> 00:35:08,880
the idea is essentially you want to

961
00:35:06,390 --> 00:35:12,000
enforce or alert on things that either

962
00:35:08,880 --> 00:35:14,180
should always or never be true in your

963
00:35:12,000 --> 00:35:17,130
environment for example you might say

964
00:35:14,180 --> 00:35:19,740
AWS instances should never be accessible

965
00:35:17,130 --> 00:35:22,500
on all ports to the whole internet we

966
00:35:19,740 --> 00:35:24,000
should just never do that so a David dog

967
00:35:22,500 --> 00:35:26,400
had a nice blog post where they

968
00:35:24,000 --> 00:35:28,710
essentially described a system where a

969
00:35:26,400 --> 00:35:32,790
lambda will spin up and auto shutdown

970
00:35:28,710 --> 00:35:35,210
any ec2 instance with this policy you

971
00:35:32,790 --> 00:35:38,400
might say oh we have all of our

972
00:35:35,210 --> 00:35:40,080
developers using terraform so manual

973
00:35:38,400 --> 00:35:41,790
changes should never be made through the

974
00:35:40,080 --> 00:35:44,910
AWS console this should just never

975
00:35:41,790 --> 00:35:48,200
happen so Arkady has a nice blog post

976
00:35:44,910 --> 00:35:50,848
about how to do this with cloud trail

977
00:35:48,200 --> 00:35:53,250
another idea is we should never use

978
00:35:50,849 --> 00:35:56,460
these regions or these cloud services

979
00:35:53,250 --> 00:35:58,980
like in our company we always use a u.s.

980
00:35:56,460 --> 00:36:01,890
East in these three AWS services and we

981
00:35:58,980 --> 00:36:03,750
never use anything else so if something

982
00:36:01,890 --> 00:36:05,368
spins up in another region or another

983
00:36:03,750 --> 00:36:07,080
service this is probably a red flag

984
00:36:05,369 --> 00:36:08,609
either a developers doing something new

985
00:36:07,080 --> 00:36:11,400
that they maybe shouldn't be doing or

986
00:36:08,609 --> 00:36:13,710
it's an attack you can also go further

987
00:36:11,400 --> 00:36:16,470
and do this perhaps per app or per

988
00:36:13,710 --> 00:36:19,109
service and this was described as well

989
00:36:16,470 --> 00:36:20,669
as a bunch of other excellent ideas not

990
00:36:19,109 --> 00:36:23,910
this most recent but the app set Callie

991
00:36:20,670 --> 00:36:28,380
before that by will and Travis of

992
00:36:23,910 --> 00:36:29,970
Netflix ok so the idea here is what are

993
00:36:28,380 --> 00:36:32,070
things in your environment should that

994
00:36:29,970 --> 00:36:34,890
should either always or never be true

995
00:36:32,070 --> 00:36:36,570
either with your cloud environment or

996
00:36:34,890 --> 00:36:38,700
your security controls or code and so

997
00:36:36,570 --> 00:36:40,980
forth and then which of these can you

998
00:36:38,700 --> 00:36:43,680
programmatically enforce or alert on and

999
00:36:40,980 --> 00:36:45,359
the key intuition behind this is that if

1000
00:36:43,680 --> 00:36:46,980
you don't need any context to make the

1001
00:36:45,359 --> 00:36:49,500
decision right there's no sort of like

1002
00:36:46,980 --> 00:36:50,700
oh well sometimes this is ok but you

1003
00:36:49,500 --> 00:36:52,980
know there's all these other mitigating

1004
00:36:50,700 --> 00:36:55,319
factors which like a human needs to make

1005
00:36:52,980 --> 00:36:57,030
so if there isn't that then you can just

1006
00:36:55,320 --> 00:36:58,440
programmatically enforce it and then

1007
00:36:57,030 --> 00:37:00,300
there is no operational time for the

1008
00:36:58,440 --> 00:37:02,700
security team so you just sort of you

1009
00:37:00,300 --> 00:37:04,260
know whack that mole once you just don't

1010
00:37:02,700 --> 00:37:05,970
have to deal with that anymore and then

1011
00:37:04,260 --> 00:37:07,740
you spend your time on other things so

1012
00:37:05,970 --> 00:37:10,080
again we are trying to knock off things

1013
00:37:07,740 --> 00:37:12,819
from our plate to become strategically

1014
00:37:10,080 --> 00:37:16,190
more effective over time

1015
00:37:12,820 --> 00:37:18,140
so I would encourage you to think how is

1016
00:37:16,190 --> 00:37:20,690
what we're doing now making us more

1017
00:37:18,140 --> 00:37:23,589
effective in the future right so if it's

1018
00:37:20,690 --> 00:37:27,760
not I would consider D prioritizing it

1019
00:37:23,589 --> 00:37:32,270
and then obviously Gandhi also said this

1020
00:37:27,760 --> 00:37:35,510
okay so we covered a lot so let's put it

1021
00:37:32,270 --> 00:37:36,589
all together so I'm going to talk about

1022
00:37:35,510 --> 00:37:38,720
some things you can start doing

1023
00:37:36,589 --> 00:37:40,190
immediately like say this or next week

1024
00:37:38,720 --> 00:37:42,290
some things you can do in the medium

1025
00:37:40,190 --> 00:37:46,910
term and some things you can do in the

1026
00:37:42,290 --> 00:37:49,820
long term okay first step one is assess

1027
00:37:46,910 --> 00:37:52,970
figure out where you are now so evaluate

1028
00:37:49,820 --> 00:37:54,589
the fundamentals are you tracking all of

1029
00:37:52,970 --> 00:37:57,439
your vulnerabilities in one system are

1030
00:37:54,589 --> 00:37:58,609
you tracking the right metadata etc for

1031
00:37:57,440 --> 00:38:00,170
continuous scanning what sort of

1032
00:37:58,609 --> 00:38:02,150
capabilities do you have can you roll

1033
00:38:00,170 --> 00:38:04,190
out a new tool or remove a tool very

1034
00:38:02,150 --> 00:38:05,720
quickly and easily then asset inventory

1035
00:38:04,190 --> 00:38:07,820
what visibility do you have into your

1036
00:38:05,720 --> 00:38:09,200
environment and I would encourage you to

1037
00:38:07,820 --> 00:38:11,000
set up a meeting with security

1038
00:38:09,200 --> 00:38:12,710
leadership as well as developers subject

1039
00:38:11,000 --> 00:38:14,450
matter experts and figure out you know

1040
00:38:12,710 --> 00:38:15,800
based on where we are is there

1041
00:38:14,450 --> 00:38:17,660
vulnerability or asset inventory

1042
00:38:15,800 --> 00:38:20,890
information that we would like you know

1043
00:38:17,660 --> 00:38:23,060
is there promising projects we should do

1044
00:38:20,890 --> 00:38:25,160
and then in the three to nine month

1045
00:38:23,060 --> 00:38:28,130
three to nine months start building

1046
00:38:25,160 --> 00:38:30,230
based on what you've assessed so nail

1047
00:38:28,130 --> 00:38:31,700
the fundamentals so here's where we are

1048
00:38:30,230 --> 00:38:33,619
here's where we should be to have all of

1049
00:38:31,700 --> 00:38:34,960
these covered to build a strong base

1050
00:38:33,619 --> 00:38:37,550
from which we can build in the future

1051
00:38:34,960 --> 00:38:39,740
and then take on one bite-sized project

1052
00:38:37,550 --> 00:38:41,599
based on your historical vulnerability

1053
00:38:39,740 --> 00:38:44,060
data and your company's business factors

1054
00:38:41,599 --> 00:38:46,220
and risk so the key thing here is

1055
00:38:44,060 --> 00:38:48,440
bite-sized project right you don't want

1056
00:38:46,220 --> 00:38:50,629
to necessarily say oh let's do this

1057
00:38:48,440 --> 00:38:52,160
crazy complex massive project that's

1058
00:38:50,630 --> 00:38:54,079
only going to be valuable like two years

1059
00:38:52,160 --> 00:38:56,060
from now ideally it's something you can

1060
00:38:54,079 --> 00:38:58,160
do in a few weeks or in a few months so

1061
00:38:56,060 --> 00:39:00,200
that you can prove to yourself as well

1062
00:38:58,160 --> 00:39:02,328
as management and executive leadership

1063
00:39:00,200 --> 00:39:03,890
you know it pays to invest in things you

1064
00:39:02,329 --> 00:39:05,480
know we spent time building this thing

1065
00:39:03,890 --> 00:39:07,339
and look at all the security benefit

1066
00:39:05,480 --> 00:39:09,170
we're getting in the future you know we

1067
00:39:07,339 --> 00:39:10,640
used to spend a lot of time you know

1068
00:39:09,170 --> 00:39:13,700
triaging and fixing all of these issues

1069
00:39:10,640 --> 00:39:17,450
now we can spend that time on all these

1070
00:39:13,700 --> 00:39:19,609
other things and then in the future so

1071
00:39:17,450 --> 00:39:22,279
you've assessed you've built and now you

1072
00:39:19,609 --> 00:39:24,230
start scaling so you want to be more

1073
00:39:22,280 --> 00:39:25,760
highly leveraged with your time ideally

1074
00:39:24,230 --> 00:39:26,150
you can target specific vulnerability

1075
00:39:25,760 --> 00:39:27,680
class

1076
00:39:26,150 --> 00:39:30,650
and just eliminate them categorically

1077
00:39:27,680 --> 00:39:33,259
you can invest in projects with security

1078
00:39:30,650 --> 00:39:35,240
high security ROI and minimal ongoing

1079
00:39:33,259 --> 00:39:38,390
time requirements for example automating

1080
00:39:35,240 --> 00:39:39,950
lease lease privilege or invariants and

1081
00:39:38,390 --> 00:39:41,808
again you want to focus on areas that

1082
00:39:39,950 --> 00:39:44,149
meaningfully raise your security bar

1083
00:39:41,809 --> 00:39:45,950
right so there's things that might be

1084
00:39:44,150 --> 00:39:47,990
technically very interesting there's

1085
00:39:45,950 --> 00:39:49,430
things that might be fun to work on that

1086
00:39:47,990 --> 00:39:51,979
seem like they're going to be good but

1087
00:39:49,430 --> 00:39:53,480
are they actually going to move your

1088
00:39:51,980 --> 00:39:57,980
security needle are they going to raise

1089
00:39:53,480 --> 00:40:01,430
your security posture ok so let's just

1090
00:39:57,980 --> 00:40:03,440
quickly wrap up for some reason I

1091
00:40:01,430 --> 00:40:06,769
decided it would be good idea to watch

1092
00:40:03,440 --> 00:40:10,130
every apps at Kali 2019 talk and write a

1093
00:40:06,769 --> 00:40:12,379
detailed summary of them the clancer the

1094
00:40:10,130 --> 00:40:14,839
question you're thinking is it took

1095
00:40:12,380 --> 00:40:17,420
hundreds of hours but if you would like

1096
00:40:14,839 --> 00:40:20,660
to benefit from that you can read it

1097
00:40:17,420 --> 00:40:22,999
right there for free also I have a

1098
00:40:20,660 --> 00:40:25,490
newsletter where I summarized talks

1099
00:40:22,999 --> 00:40:28,339
linked to tools and resources I find

1100
00:40:25,490 --> 00:40:31,279
useful as well as write about things I

1101
00:40:28,339 --> 00:40:36,970
work on so at least one person doesn't

1102
00:40:31,279 --> 00:40:39,289
hate it so you might like it too ok so

1103
00:40:36,970 --> 00:40:41,779
thank you so much for your time these

1104
00:40:39,289 --> 00:40:44,809
slides are live already you can go right

1105
00:40:41,779 --> 00:40:47,690
there I'm happy to chat on Twitter as

1106
00:40:44,809 --> 00:40:49,759
well as LinkedIn again there's a link to

1107
00:40:47,690 --> 00:40:50,720
the newsletter if you think that that

1108
00:40:49,759 --> 00:40:52,789
robot is cute

1109
00:40:50,720 --> 00:40:55,069
I have an egregious number of stickers

1110
00:40:52,789 --> 00:40:58,059
in my pocket and in my backpack that I'd

1111
00:40:55,069 --> 00:41:00,710
be happy to give you and there's some

1112
00:40:58,059 --> 00:41:02,509
key insights from sort of the whole talk

1113
00:41:00,710 --> 00:41:06,019
in case that helps you with your

1114
00:41:02,509 --> 00:41:07,970
question asking and actually since I

1115
00:41:06,019 --> 00:41:09,799
have time I just wanted to say a big

1116
00:41:07,970 --> 00:41:11,299
thank you to all the people who did the

1117
00:41:09,799 --> 00:41:13,038
work that was referenced in this talk

1118
00:41:11,299 --> 00:41:14,569
you're really pushing the industry

1119
00:41:13,039 --> 00:41:16,819
forward and I and others have learned a

1120
00:41:14,569 --> 00:41:18,440
lot and I appreciate it and there's a

1121
00:41:16,819 --> 00:41:19,609
number of people who reviewed early

1122
00:41:18,440 --> 00:41:21,470
versions of this talk and gave me

1123
00:41:19,609 --> 00:41:23,180
excellent feedback so if you like this

1124
00:41:21,470 --> 00:41:27,890
talk you know big thanks to all these

1125
00:41:23,180 --> 00:41:29,450
people for making it happen so yeah I

1126
00:41:27,890 --> 00:41:31,910
believe I have a few minutes left for

1127
00:41:29,450 --> 00:41:33,910
questions and also when time runs out I

1128
00:41:31,910 --> 00:41:36,499
would be happy to chat here in the hall

1129
00:41:33,910 --> 00:41:38,710
etc so thanks again so much for your

1130
00:41:36,499 --> 00:41:38,709
time

1131
00:41:41,960 --> 00:41:47,220
all right everyone um please give me

1132
00:41:45,300 --> 00:41:49,380
join me in giving Clinton big thanks for

1133
00:41:47,220 --> 00:41:51,509
joining us if anyone has any questions

1134
00:41:49,380 --> 00:41:53,820
just raise your hand real high and I can

1135
00:41:51,510 --> 00:41:56,090
bring you the microphone you went over

1136
00:41:53,820 --> 00:41:56,090
here

1137
00:41:57,020 --> 00:42:03,810
hey great dockland you talked about fret

1138
00:42:01,620 --> 00:42:05,819
modeling as code can you explain a

1139
00:42:03,810 --> 00:42:07,259
little bit more what that is and how

1140
00:42:05,820 --> 00:42:07,980
it's different from just traditional

1141
00:42:07,260 --> 00:42:09,720
trip model

1142
00:42:07,980 --> 00:42:11,190
yeah that's a good question so the

1143
00:42:09,720 --> 00:42:12,689
question is can you provide a little bit

1144
00:42:11,190 --> 00:42:14,580
more detail about threat model less code

1145
00:42:12,690 --> 00:42:16,740
so there are a number of backup slides

1146
00:42:14,580 --> 00:42:20,340
that you can see on this but the idea is

1147
00:42:16,740 --> 00:42:22,319
can you express security properties you

1148
00:42:20,340 --> 00:42:25,170
want or abuse cases of the system in

1149
00:42:22,320 --> 00:42:27,540
sort of a security integration type test

1150
00:42:25,170 --> 00:42:30,720
such that they are continuously run as

1151
00:42:27,540 --> 00:42:32,430
the application is built that's

1152
00:42:30,720 --> 00:42:37,430
basically the core idea there's more

1153
00:42:32,430 --> 00:42:42,149
details but yet they're questions

1154
00:42:37,430 --> 00:42:45,419
raise your hand real high leave a cos in

1155
00:42:42,150 --> 00:42:47,700
the front if someone is gonna start an

1156
00:42:45,420 --> 00:42:50,240
application security rave from the

1157
00:42:47,700 --> 00:42:53,069
beginning like it's just a free-for-all

1158
00:42:50,240 --> 00:42:54,479
what would be a good way for them to

1159
00:42:53,070 --> 00:42:56,610
start if you could give them one or two

1160
00:42:54,480 --> 00:42:59,610
things to do what would be a favorite

1161
00:42:56,610 --> 00:43:01,020
advice that you would give to a company

1162
00:42:59,610 --> 00:43:03,870
okay thank you

1163
00:43:01,020 --> 00:43:07,340
so if it's a free-for-all where should

1164
00:43:03,870 --> 00:43:09,630
you start I think one thing that I

1165
00:43:07,340 --> 00:43:11,850
didn't talk about as much in this talk

1166
00:43:09,630 --> 00:43:13,980
because it didn't quite fit in his theme

1167
00:43:11,850 --> 00:43:15,540
but I think building really good

1168
00:43:13,980 --> 00:43:17,670
relationships with developers is

1169
00:43:15,540 --> 00:43:20,370
absolutely essential if you can have

1170
00:43:17,670 --> 00:43:22,530
just the culture of the company be aware

1171
00:43:20,370 --> 00:43:23,819
of security and even have the intuition

1172
00:43:22,530 --> 00:43:25,170
of like oh this is a thing that might

1173
00:43:23,820 --> 00:43:27,720
have security implication let me go

1174
00:43:25,170 --> 00:43:30,600
proactively talk with the security team

1175
00:43:27,720 --> 00:43:31,560
then that can go a long way before you

1176
00:43:30,600 --> 00:43:33,210
necessarily have built the

1177
00:43:31,560 --> 00:43:35,670
infrastructure to have like continuous

1178
00:43:33,210 --> 00:43:37,040
say asset inventory type visibility into

1179
00:43:35,670 --> 00:43:39,720
who's pushing code and what it's doing

1180
00:43:37,040 --> 00:43:41,640
so I would say definitely a bad I think

1181
00:43:39,720 --> 00:43:45,209
you can get a lot of nice wins by

1182
00:43:41,640 --> 00:43:46,830
tracking vulnerabilities in terms of

1183
00:43:45,210 --> 00:43:48,940
like what type of vulnerability was this

1184
00:43:46,830 --> 00:43:50,259
how much did we care

1185
00:43:48,940 --> 00:43:51,520
about it and and things like that

1186
00:43:50,260 --> 00:43:53,410
there's various metrics and

1187
00:43:51,520 --> 00:43:54,880
high-leverage things you can do but only

1188
00:43:53,410 --> 00:43:56,920
once you have the data so the earlier

1189
00:43:54,880 --> 00:43:58,900
you can start collecting it the sooner

1190
00:43:56,920 --> 00:44:01,930
you can start doing that but yeah thanks

1191
00:43:58,900 --> 00:44:03,460
so much for the question I think we have

1192
00:44:01,930 --> 00:44:09,390
time for one or two more I'll see one

1193
00:44:03,460 --> 00:44:13,390
right here I don't necessarily disagree

1194
00:44:09,390 --> 00:44:14,859
regards to suggestion that if you found

1195
00:44:13,390 --> 00:44:15,790
these kind of vulnerabilities let's keep

1196
00:44:14,859 --> 00:44:16,990
looking for these kind of

1197
00:44:15,790 --> 00:44:18,430
vulnerabilities when you're trying to

1198
00:44:16,990 --> 00:44:20,319
optimize your time but isn't there a

1199
00:44:18,430 --> 00:44:22,750
risk that you're looking for the things

1200
00:44:20,319 --> 00:44:24,339
the low-hanging fruit maybe is starting

1201
00:44:22,750 --> 00:44:26,140
to be whittled down and there's you

1202
00:44:24,339 --> 00:44:27,640
won't find it there and you maybe have

1203
00:44:26,140 --> 00:44:29,618
blind spots other places how do you

1204
00:44:27,640 --> 00:44:31,210
balance sort of looking for the things

1205
00:44:29,619 --> 00:44:34,000
you haven't discovered versus spending

1206
00:44:31,210 --> 00:44:36,849
more time and I've a live with that

1207
00:44:34,000 --> 00:44:38,800
low-hanging fruit yeah that's a that's a

1208
00:44:36,849 --> 00:44:40,839
really good question and I I don't think

1209
00:44:38,800 --> 00:44:43,510
there's necessarily a simple answer but

1210
00:44:40,839 --> 00:44:44,890
yeah so the question is here's the

1211
00:44:43,510 --> 00:44:46,240
issues you've had in the past if you

1212
00:44:44,890 --> 00:44:49,540
just focus on those maybe there's

1213
00:44:46,240 --> 00:44:51,700
important things you're blind to yeah I

1214
00:44:49,540 --> 00:44:53,560
think it definitely is easy to get

1215
00:44:51,700 --> 00:44:55,328
caught up in like oh here's the

1216
00:44:53,560 --> 00:44:57,549
historical vulnerability data let's

1217
00:44:55,329 --> 00:44:59,829
focus on those and not necessarily have

1218
00:44:57,550 --> 00:45:01,810
this be sort of continuously changing

1219
00:44:59,829 --> 00:45:04,089
over time I ideally as you're getting

1220
00:45:01,810 --> 00:45:05,859
better there are things that were

1221
00:45:04,089 --> 00:45:09,190
comparatively less of a problem that you

1222
00:45:05,859 --> 00:45:13,029
can now focus on and I think one

1223
00:45:09,190 --> 00:45:14,859
interesting unintuitive point that some

1224
00:45:13,030 --> 00:45:16,180
people don't think about is like as you

1225
00:45:14,859 --> 00:45:17,890
get better at a lot of these things

1226
00:45:16,180 --> 00:45:19,690
you're going to start finding more

1227
00:45:17,890 --> 00:45:21,400
issues that have always been there you

1228
00:45:19,690 --> 00:45:23,260
just didn't know they were there so in

1229
00:45:21,400 --> 00:45:24,700
the short term as you're improving from

1230
00:45:23,260 --> 00:45:26,560
a metrics point of view in terms of

1231
00:45:24,700 --> 00:45:30,368
number of vulnerabilities found it can

1232
00:45:26,560 --> 00:45:33,549
actually look worse right so I think one

1233
00:45:30,369 --> 00:45:34,810
security metric that is it initially you

1234
00:45:33,550 --> 00:45:36,609
might think is great like number of

1235
00:45:34,810 --> 00:45:38,078
vulnerabilities found can be deceiving

1236
00:45:36,609 --> 00:45:40,690
in that as you get better at finding

1237
00:45:38,079 --> 00:45:43,270
them you're gonna find more but yeah so

1238
00:45:40,690 --> 00:45:44,890
I agree with your point in that you

1239
00:45:43,270 --> 00:45:47,410
don't wanna be overly focused on just

1240
00:45:44,890 --> 00:45:49,000
like these issues are things we've had

1241
00:45:47,410 --> 00:45:50,618
in the past I think one way to get

1242
00:45:49,000 --> 00:45:53,710
around that is sort of holistically

1243
00:45:50,619 --> 00:45:55,150
maybe by annually or quarterly like

1244
00:45:53,710 --> 00:45:57,220
taking a step back and thinking are

1245
00:45:55,150 --> 00:45:58,300
there important business risks that we

1246
00:45:57,220 --> 00:45:59,720
are ignoring based on our current

1247
00:45:58,300 --> 00:46:03,950
process

1248
00:45:59,720 --> 00:46:05,299
there's a like mitre and mist have this

1249
00:46:03,950 --> 00:46:07,759
for example the cybersecurity framework

1250
00:46:05,299 --> 00:46:09,410
has like different areas and levels of

1251
00:46:07,760 --> 00:46:11,240
investment and things that you can sort

1252
00:46:09,410 --> 00:46:14,390
of have a standard to compare yourself

1253
00:46:11,240 --> 00:46:15,828
against similarly with open Sam but yeah

1254
00:46:14,390 --> 00:46:17,509
I think the key is to sort of

1255
00:46:15,829 --> 00:46:19,490
continuously relive that re-evaluate

1256
00:46:17,510 --> 00:46:21,160
where you are and what makes sense yeah

1257
00:46:19,490 --> 00:46:24,379
that's a really great question thank you

1258
00:46:21,160 --> 00:46:26,629
all right I think we are just about out

1259
00:46:24,380 --> 00:46:29,119
of time unless anyone has one last quick

1260
00:46:26,630 --> 00:46:30,740
question No

1261
00:46:29,119 --> 00:46:32,839
okay well then please join me in

1262
00:46:30,740 --> 00:46:37,058
thanking Clint Clint thank you so much

1263
00:46:32,839 --> 00:46:37,058
for being a speaker IP side thank you

