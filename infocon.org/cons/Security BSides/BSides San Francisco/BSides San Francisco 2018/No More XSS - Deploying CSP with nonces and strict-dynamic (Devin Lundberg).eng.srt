1
00:00:03,620 --> 00:00:06,740
[Music]

2
00:00:19,610 --> 00:00:26,600
hello hi everyone<font color="#CCCCCC"> I'm Devin</font><font color="#E5E5E5"> Lundberg I'm</font>

3
00:00:24,080 --> 00:00:28,580
here<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be presenting no more</font>

4
00:00:26,600 --> 00:00:31,460
cross-site scripting<font color="#E5E5E5"> about deploying</font>

5
00:00:28,580 --> 00:00:33,349
content security policy<font color="#CCCCCC"> I'm currently</font>

6
00:00:31,460 --> 00:00:35,870
the product<font color="#CCCCCC"> security lead over</font><font color="#E5E5E5"> at</font>

7
00:00:33,350 --> 00:00:38,050
<font color="#CCCCCC">Pinterest</font><font color="#E5E5E5"> and I've deployed content</font>

8
00:00:35,870 --> 00:00:40,430
security policy on<font color="#E5E5E5"> Pinterest</font><font color="#CCCCCC"> comm</font>

9
00:00:38,050 --> 00:00:42,919
<font color="#CCCCCC">Instapaper and a bunch</font><font color="#E5E5E5"> of internal tools</font>

10
00:00:40,430 --> 00:00:44,840
there<font color="#E5E5E5"> and I hope that all of you can</font>

11
00:00:42,920 --> 00:00:49,460
take something from<font color="#E5E5E5"> my experience</font>

12
00:00:44,840 --> 00:00:51,710
<font color="#E5E5E5">deploying it so first off I'll go over</font>

13
00:00:49,460 --> 00:00:53,089
<font color="#E5E5E5">some background with what cross-site</font>

14
00:00:51,710 --> 00:00:55,129
scripting is hopefully a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> you know</font>

15
00:00:53,089 --> 00:00:58,489
what<font color="#CCCCCC"> that is and what</font><font color="#E5E5E5"> content security</font>

16
00:00:55,129 --> 00:01:01,040
policy is after that I'll<font color="#E5E5E5"> go over to</font>

17
00:00:58,489 --> 00:01:02,629
<font color="#CCCCCC">newer directives that weren't around</font>

18
00:01:01,040 --> 00:01:04,699
when<font color="#E5E5E5"> content security policy was first</font>

19
00:01:02,629 --> 00:01:08,270
<font color="#CCCCCC">created</font><font color="#E5E5E5"> the first one is nonces</font><font color="#CCCCCC"> the</font>

20
00:01:04,699 --> 00:01:10,880
second one is strict dynamic<font color="#CCCCCC"> and lastly</font>

21
00:01:08,270 --> 00:01:13,280
I'm<font color="#E5E5E5"> gonna go through the step-by-step</font>

22
00:01:10,880 --> 00:01:15,649
<font color="#E5E5E5">instructions</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> some code samples on</font>

23
00:01:13,280 --> 00:01:18,950
how to deploy content<font color="#CCCCCC"> security policy on</font>

24
00:01:15,650 --> 00:01:23,200
your site<font color="#E5E5E5"> for a site where you</font><font color="#CCCCCC"> don't</font>

25
00:01:18,950 --> 00:01:23,200
have any sort<font color="#CCCCCC"> of content security policy</font>

26
00:01:23,500 --> 00:01:30,500
so let's start off<font color="#E5E5E5"> with talking about</font>

27
00:01:27,560 --> 00:01:32,150
cross-site<font color="#E5E5E5"> scripting</font><font color="#CCCCCC"> I'm sure a</font><font color="#E5E5E5"> lot of</font>

28
00:01:30,500 --> 00:01:35,360
you have seen this cross-site scripting

29
00:01:32,150 --> 00:01:38,990
has been around since<font color="#E5E5E5"> I think it was</font>

30
00:01:35,360 --> 00:01:41,210
<font color="#E5E5E5">first found in like the 90s</font><font color="#CCCCCC"> basically it</font>

31
00:01:38,990 --> 00:01:44,839
<font color="#CCCCCC">is a bypass the same origin policy</font><font color="#E5E5E5"> on</font>

32
00:01:41,210 --> 00:01:46,789
the web<font color="#E5E5E5"> which allows one domain to talk</font>

33
00:01:44,840 --> 00:01:48,320
to another<font color="#E5E5E5"> domain specifically in the</font>

34
00:01:46,790 --> 00:01:51,560
case<font color="#E5E5E5"> of cross-site scripting it allows a</font>

35
00:01:48,320 --> 00:01:53,770
malicious party to run a script in the

36
00:01:51,560 --> 00:01:57,890
context of<font color="#CCCCCC"> an origin they don't control</font>

37
00:01:53,770 --> 00:01:59,420
<font color="#E5E5E5">so an</font><font color="#CCCCCC"> example of a classic cross-site</font>

38
00:01:57,890 --> 00:02:01,250
scripting vulnerability is you have an

39
00:01:59,420 --> 00:02:04,550
air page and you can catenate your error

40
00:02:01,250 --> 00:02:07,820
message with some<font color="#CCCCCC"> HTML and you don't do</font>

41
00:02:04,550 --> 00:02:10,369
any escaping<font color="#CCCCCC"> as you can see in the</font>

42
00:02:07,820 --> 00:02:14,329
vulnerable server code here<font color="#CCCCCC"> and someone</font>

43
00:02:10,369 --> 00:02:18,650
puts in script<font color="#E5E5E5"> alert and the browser</font>

44
00:02:14,330 --> 00:02:21,349
gets the script alert tag and then it's

45
00:02:18,650 --> 00:02:23,569
execute<font color="#E5E5E5"> set script obviously an alert</font>

46
00:02:21,349 --> 00:02:25,340
isn't very dangerous<font color="#E5E5E5"> but you can get</font>

47
00:02:23,569 --> 00:02:27,170
<font color="#E5E5E5">really dangerous situations because you</font>

48
00:02:25,340 --> 00:02:30,740
can do<font color="#CCCCCC"> anything that the webpage could</font>

49
00:02:27,170 --> 00:02:32,299
do one example of a cross-site<font color="#E5E5E5"> scripting</font>

50
00:02:30,740 --> 00:02:33,799
being used in the<font color="#E5E5E5"> wild</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of people</font>

51
00:02:32,300 --> 00:02:38,060
saw<font color="#E5E5E5"> was</font>

52
00:02:33,799 --> 00:02:40,969
the<font color="#E5E5E5"> Sammy worm on</font><font color="#CCCCCC"> myspace so if you</font>

53
00:02:38,060 --> 00:02:43,730
remember<font color="#CCCCCC"> myspace</font><font color="#E5E5E5"> it was a social</font>

54
00:02:40,969 --> 00:02:48,108
networking site<font color="#CCCCCC"> that's not very popular</font>

55
00:02:43,730 --> 00:02:51,379
<font color="#E5E5E5">anymore and a guy named Sammy</font><font color="#CCCCCC"> found a</font>

56
00:02:48,109 --> 00:02:53,689
bug in<font color="#CCCCCC"> there their profiles</font><font color="#E5E5E5"> that allowed</font>

57
00:02:51,379 --> 00:02:56,929
him to add a script<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so he added a</font>

58
00:02:53,689 --> 00:03:00,379
script<font color="#CCCCCC"> that basically added him as a</font>

59
00:02:56,930 --> 00:03:03,230
friend<font color="#CCCCCC"> and added the script to add him</font>

60
00:03:00,379 --> 00:03:06,170
as<font color="#E5E5E5"> a friend and add that script to</font>

61
00:03:03,230 --> 00:03:08,899
<font color="#E5E5E5">anyone who viewed his profile and so he</font>

62
00:03:06,170 --> 00:03:11,000
gained a couple<font color="#E5E5E5"> friends over the first</font>

63
00:03:08,900 --> 00:03:13,220
hour<font color="#E5E5E5"> and then by the end</font><font color="#CCCCCC"> of the day I</font>

64
00:03:11,000 --> 00:03:15,829
think<font color="#E5E5E5"> he had most of myspace as his</font>

65
00:03:13,220 --> 00:03:18,409
friend<font color="#E5E5E5"> just by people viewing his</font>

66
00:03:15,829 --> 00:03:20,299
profile and adding<font color="#E5E5E5"> their</font><font color="#CCCCCC"> script to the</font>

67
00:03:18,409 --> 00:03:24,019
page<font color="#E5E5E5"> so it can cause some pretty serious</font>

68
00:03:20,299 --> 00:03:25,159
<font color="#E5E5E5">problems</font><font color="#CCCCCC"> and it basically</font><font color="#E5E5E5"> has full</font>

69
00:03:24,019 --> 00:03:29,930
access<font color="#CCCCCC"> to everything that the web page</font>

70
00:03:25,159 --> 00:03:31,700
<font color="#CCCCCC">has</font><font color="#E5E5E5"> access</font><font color="#CCCCCC"> to good news is that there is</font>

71
00:03:29,930 --> 00:03:34,400
a pretty<font color="#E5E5E5"> good solution</font><font color="#CCCCCC"> for cross-site</font>

72
00:03:31,700 --> 00:03:38,149
scripting<font color="#E5E5E5"> in the generic case which is</font>

73
00:03:34,400 --> 00:03:41,030
templates and<font color="#E5E5E5"> auto escaping so in most</font>

74
00:03:38,150 --> 00:03:42,919
major browser frame or web frameworks

75
00:03:41,030 --> 00:03:45,260
<font color="#CCCCCC">they're out there</font><font color="#E5E5E5"> if you create a</font>

76
00:03:42,919 --> 00:03:47,720
template<font color="#E5E5E5"> so something like Django or</font>

77
00:03:45,260 --> 00:03:49,370
<font color="#CCCCCC">Rails it might look something</font><font color="#E5E5E5"> like the</font>

78
00:03:47,720 --> 00:03:53,449
top where you you have<font color="#CCCCCC"> your error</font>

79
00:03:49,370 --> 00:03:55,209
message in there<font color="#CCCCCC"> and if you pass in</font><font color="#E5E5E5"> an</font>

80
00:03:53,449 --> 00:03:57,829
error message with things that<font color="#CCCCCC"> look like</font>

81
00:03:55,209 --> 00:03:59,629
<font color="#E5E5E5">HTML what it'll do is</font><font color="#CCCCCC"> it will escape</font>

82
00:03:57,829 --> 00:04:02,329
them it<font color="#CCCCCC"> will assume that there are text</font>

83
00:03:59,629 --> 00:04:04,819
input and they are not<font color="#E5E5E5"> formatted as HTML</font>

84
00:04:02,329 --> 00:04:07,989
and what<font color="#E5E5E5"> this does</font><font color="#CCCCCC"> is allows</font><font color="#E5E5E5"> you to</font>

85
00:04:04,819 --> 00:04:11,060
prevent cross site scripting by default

86
00:04:07,989 --> 00:04:12,760
so great<font color="#E5E5E5"> problems solved</font>

87
00:04:11,060 --> 00:04:14,930
we don't need worry about<font color="#CCCCCC"> anymore no</font>

88
00:04:12,760 --> 00:04:17,889
<font color="#E5E5E5">cross-site scripting is still one of the</font>

89
00:04:14,930 --> 00:04:20,978
most vulnerable<font color="#E5E5E5"> or one of the most</font>

90
00:04:17,889 --> 00:04:23,570
common web vulnerabilities out there

91
00:04:20,978 --> 00:04:27,320
<font color="#CCCCCC">there's a lot</font><font color="#E5E5E5"> of cases where developers</font>

92
00:04:23,570 --> 00:04:28,370
want<font color="#E5E5E5"> to turn</font><font color="#CCCCCC"> Auto escaping off for</font>

93
00:04:27,320 --> 00:04:30,590
instance if they're building<font color="#CCCCCC"> out</font>

94
00:04:28,370 --> 00:04:33,889
features<font color="#CCCCCC"> likely fication</font><font color="#E5E5E5"> where they need</font>

95
00:04:30,590 --> 00:04:38,060
<font color="#E5E5E5">to take user content and turn it into</font>

96
00:04:33,889 --> 00:04:41,599
markup<font color="#E5E5E5"> so in this example I'm sending a</font>

97
00:04:38,060 --> 00:04:43,760
<font color="#CCCCCC">message to to my friend on Pinterest</font><font color="#E5E5E5"> and</font>

98
00:04:41,599 --> 00:04:46,099
<font color="#E5E5E5">it has a link in it and we want to make</font>

99
00:04:43,760 --> 00:04:47,140
it<font color="#E5E5E5"> clickable because that's a nice user</font>

100
00:04:46,099 --> 00:04:49,729
experience

101
00:04:47,140 --> 00:04:51,469
<font color="#CCCCCC">but we need to make sure</font><font color="#E5E5E5"> that the logic</font>

102
00:04:49,730 --> 00:04:53,360
that makes<font color="#CCCCCC"> that clickable</font><font color="#E5E5E5"> can actually</font>

103
00:04:51,470 --> 00:04:55,820
handle<font color="#E5E5E5"> all the complex cases around</font>

104
00:04:53,360 --> 00:04:57,470
escaping<font color="#E5E5E5"> and it's actually</font><font color="#CCCCCC"> very easy</font><font color="#E5E5E5"> to</font>

105
00:04:55,820 --> 00:04:59,210
<font color="#E5E5E5">get wrong other cases like</font>

106
00:04:57,470 --> 00:05:01,190
internationalization are pretty<font color="#E5E5E5"> common</font>

107
00:04:59,210 --> 00:05:02,780
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then there's just</font><font color="#CCCCCC"> cases where</font>

108
00:05:01,190 --> 00:05:06,920
developers<font color="#E5E5E5"> don't know any better</font>

109
00:05:02,780 --> 00:05:11,059
things like<font color="#CCCCCC"> Django and Rails the the</font>

110
00:05:06,920 --> 00:05:13,730
function for marking things as as<font color="#E5E5E5"> HTML</font>

111
00:05:11,060 --> 00:05:15,440
<font color="#E5E5E5">is called safe so developers think that</font>

112
00:05:13,730 --> 00:05:17,510
they're making<font color="#E5E5E5"> something safe by calling</font>

113
00:05:15,440 --> 00:05:19,520
it<font color="#E5E5E5"> newer frameworks like react will</font>

114
00:05:17,510 --> 00:05:21,620
actually use longer dangerously<font color="#CCCCCC"> set in</font>

115
00:05:19,520 --> 00:05:22,880
or HTML<font color="#E5E5E5"> so it's a little more obvious</font>

116
00:05:21,620 --> 00:05:26,240
they're introducing a security

117
00:05:22,880 --> 00:05:29,930
vulnerability<font color="#CCCCCC"> but you can still</font><font color="#E5E5E5"> get</font>

118
00:05:26,240 --> 00:05:31,970
problems<font color="#E5E5E5"> with</font><font color="#CCCCCC"> those so introducing</font>

119
00:05:29,930 --> 00:05:36,140
content security policy<font color="#CCCCCC"> content security</font>

120
00:05:31,970 --> 00:05:38,120
policy<font color="#E5E5E5"> is a HTTP header and what it does</font>

121
00:05:36,140 --> 00:05:40,310
is it defines<font color="#E5E5E5"> a list of who can access</font>

122
00:05:38,120 --> 00:05:42,770
<font color="#CCCCCC">resources on your</font><font color="#E5E5E5"> page and you</font><font color="#CCCCCC"> can</font>

123
00:05:40,310 --> 00:05:44,750
actually do this for<font color="#E5E5E5"> different different</font>

124
00:05:42,770 --> 00:05:46,400
<font color="#E5E5E5">types of resources</font><font color="#CCCCCC"> on the page you</font><font color="#E5E5E5"> can</font>

125
00:05:44,750 --> 00:05:48,950
do things like<font color="#E5E5E5"> these are the list of</font>

126
00:05:46,400 --> 00:05:50,900
<font color="#E5E5E5">domains it can host JavaScript these are</font>

127
00:05:48,950 --> 00:05:52,580
the list of domains<font color="#E5E5E5"> that can host style</font>

128
00:05:50,900 --> 00:05:55,940
sheets<font color="#E5E5E5"> these are</font><font color="#CCCCCC"> the ones that can be on</font>

129
00:05:52,580 --> 00:05:59,810
I<font color="#E5E5E5"> frame x' xhr requests all sorts of</font>

130
00:05:55,940 --> 00:06:02,060
things images<font color="#CCCCCC"> media forms</font><font color="#E5E5E5"> you name it</font>

131
00:05:59,810 --> 00:06:05,990
<font color="#E5E5E5">there's probably some sort of</font><font color="#CCCCCC"> directed</font>

132
00:06:02,060 --> 00:06:07,640
that covers it<font color="#CCCCCC"> and it's really useful in</font>

133
00:06:05,990 --> 00:06:09,919
the<font color="#CCCCCC"> script source sense and so we're</font>

134
00:06:07,640 --> 00:06:13,250
gonna<font color="#E5E5E5"> focus in on that for most of this</font>

135
00:06:09,919 --> 00:06:15,650
talk<font color="#E5E5E5"> so this is actually the current</font>

136
00:06:13,250 --> 00:06:17,720
content security policy for Pinterest

137
00:06:15,650 --> 00:06:18,979
<font color="#CCCCCC">it's nice</font><font color="#E5E5E5"> and big on this</font><font color="#CCCCCC"> IMAX screen so</font>

138
00:06:17,720 --> 00:06:20,300
you can<font color="#CCCCCC"> actually read it I wasn't</font>

139
00:06:18,979 --> 00:06:24,680
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> sure if you would be able</font><font color="#E5E5E5"> to</font>

140
00:06:20,300 --> 00:06:27,620
but this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> example of sort of what a</font>

141
00:06:24,680 --> 00:06:29,780
domain whitelist looks like<font color="#E5E5E5"> so you can</font>

142
00:06:27,620 --> 00:06:32,680
<font color="#CCCCCC">see that we're white listing some</font>

143
00:06:29,780 --> 00:06:35,450
<font color="#CCCCCC">wildcard or origins and</font><font color="#E5E5E5"> a bunch of other</font>

144
00:06:32,680 --> 00:06:37,490
<font color="#E5E5E5">origins in our script source</font><font color="#CCCCCC"> so we can</font>

145
00:06:35,450 --> 00:06:40,370
run those<font color="#E5E5E5"> pieces of JavaScript on our</font>

146
00:06:37,490 --> 00:06:42,440
site<font color="#E5E5E5"> we also include things like unsafe</font>

147
00:06:40,370 --> 00:06:44,630
<font color="#E5E5E5">eval which allows for eval statements to</font>

148
00:06:42,440 --> 00:06:46,160
work which can<font color="#E5E5E5"> also be dangerous</font><font color="#CCCCCC"> by</font>

149
00:06:44,630 --> 00:06:49,340
<font color="#CCCCCC">default content security protects</font><font color="#E5E5E5"> you</font>

150
00:06:46,160 --> 00:06:51,740
against those and unsafe<font color="#CCCCCC"> inline</font><font color="#E5E5E5"> allows</font>

151
00:06:49,340 --> 00:06:53,810
for inline JavaScript to work and this

152
00:06:51,740 --> 00:06:56,830
can<font color="#E5E5E5"> cause some security</font><font color="#CCCCCC"> problems that</font>

153
00:06:53,810 --> 00:06:59,240
I'm going to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about in a little</font><font color="#E5E5E5"> bit</font>

154
00:06:56,830 --> 00:07:00,469
<font color="#E5E5E5">anything that's not covered</font><font color="#CCCCCC"> in this</font>

155
00:06:59,240 --> 00:07:01,820
<font color="#E5E5E5">whitelist is block</font>

156
00:07:00,470 --> 00:07:04,550
if you're just<font color="#E5E5E5"> using the content</font>

157
00:07:01,820 --> 00:07:06,320
security policy header<font color="#E5E5E5"> as you see here</font>

158
00:07:04,550 --> 00:07:08,960
there's also a<font color="#CCCCCC"> content</font><font color="#E5E5E5"> security policy a</font>

159
00:07:06,320 --> 00:07:11,510
report only header<font color="#E5E5E5"> that will just report</font>

160
00:07:08,960 --> 00:07:15,500
on any JavaScript that's not on the

161
00:07:11,510 --> 00:07:17,080
whitelist some other directives<font color="#E5E5E5"> they're</font>

162
00:07:15,500 --> 00:07:19,760
really important<font color="#E5E5E5"> if you're worried about</font>

163
00:07:17,080 --> 00:07:21,890
<font color="#E5E5E5">cross-site scripting and preventing it</font>

164
00:07:19,760 --> 00:07:26,990
with<font color="#E5E5E5"> content security policy our object</font>

165
00:07:21,890 --> 00:07:29,599
source<font color="#E5E5E5"> and base URI</font><font color="#CCCCCC"> object source is the</font>

166
00:07:26,990 --> 00:07:34,130
source for including things like<font color="#E5E5E5"> Flash</font>

167
00:07:29,600 --> 00:07:36,170
and Java<font color="#CCCCCC"> and plugins</font><font color="#E5E5E5"> into your site</font><font color="#CCCCCC"> if</font>

168
00:07:34,130 --> 00:07:37,820
you<font color="#E5E5E5"> have a modern website</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably</font>

169
00:07:36,170 --> 00:07:40,490
aren't<font color="#E5E5E5"> using these things</font><font color="#CCCCCC"> it can safely</font>

170
00:07:37,820 --> 00:07:43,130
set it to none<font color="#CCCCCC"> if you're using something</font>

171
00:07:40,490 --> 00:07:45,770
older or something where you you<font color="#E5E5E5"> really</font>

172
00:07:43,130 --> 00:07:48,130
like<font color="#CCCCCC"> Flash for example</font><font color="#E5E5E5"> you can just make</font>

173
00:07:45,770 --> 00:07:53,210
a whitelist<font color="#E5E5E5"> just like the script source</font>

174
00:07:48,130 --> 00:07:56,570
<font color="#CCCCCC">base URI is for preventing</font><font color="#E5E5E5"> the base HTML</font>

175
00:07:53,210 --> 00:07:59,960
tag<font color="#CCCCCC"> from</font><font color="#E5E5E5"> being set to other origins this</font>

176
00:07:56,570 --> 00:08:02,270
is basically used<font color="#CCCCCC"> for studying what</font>

177
00:07:59,960 --> 00:08:05,349
relative URLs point to so if<font color="#E5E5E5"> I have a</font>

178
00:08:02,270 --> 00:08:07,789
link on the page<font color="#E5E5E5"> that points to slash</font>

179
00:08:05,350 --> 00:08:09,560
<font color="#E5E5E5">what</font><font color="#CCCCCC"> homepage will it</font><font color="#E5E5E5"> actually point</font><font color="#CCCCCC"> to</font>

180
00:08:07,790 --> 00:08:11,210
by<font color="#CCCCCC"> default is to page you're on</font><font color="#E5E5E5"> but if I</font>

181
00:08:09,560 --> 00:08:13,430
set that<font color="#E5E5E5"> base tag to something else</font>

182
00:08:11,210 --> 00:08:16,880
<font color="#E5E5E5">it'll point to another</font><font color="#CCCCCC"> domain</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

183
00:08:13,430 --> 00:08:19,220
<font color="#E5E5E5">also used in CSP to denote what self is</font>

184
00:08:16,880 --> 00:08:21,080
so if you don't set this to none an

185
00:08:19,220 --> 00:08:23,150
attacker could basically<font color="#E5E5E5"> include an</font>

186
00:08:21,080 --> 00:08:25,669
<font color="#E5E5E5">origin they control in your list so</font>

187
00:08:23,150 --> 00:08:27,919
really important<font color="#E5E5E5"> that you set it to none</font>

188
00:08:25,669 --> 00:08:30,680
or if you're actually<font color="#E5E5E5"> using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> base tag</font>

189
00:08:27,919 --> 00:08:32,929
<font color="#CCCCCC">I don't know of</font><font color="#E5E5E5"> anyone who does</font><font color="#CCCCCC"> but if</font>

190
00:08:30,680 --> 00:08:38,360
you do<font color="#E5E5E5"> that's fine you can also include</font>

191
00:08:32,929 --> 00:08:40,370
a whitelist so let's say<font color="#E5E5E5"> your content</font>

192
00:08:38,360 --> 00:08:43,060
security policy<font color="#CCCCCC"> actually has a very good</font>

193
00:08:40,370 --> 00:08:45,380
whitelist<font color="#E5E5E5"> set up</font><font color="#CCCCCC"> and it's blocking</font>

194
00:08:43,059 --> 00:08:48,829
scripts<font color="#E5E5E5"> from being including your page</font>

195
00:08:45,380 --> 00:08:50,870
what<font color="#E5E5E5"> can an attacker still do and I'm</font>

196
00:08:48,830 --> 00:08:53,089
gonna call<font color="#E5E5E5"> this HTML injection because</font>

197
00:08:50,870 --> 00:08:55,000
<font color="#E5E5E5">you're not doing scripting anymore</font>

198
00:08:53,089 --> 00:08:58,430
because<font color="#E5E5E5"> your scripts are being blocked</font>

199
00:08:55,000 --> 00:09:00,050
<font color="#E5E5E5">so with HTML injection</font><font color="#CCCCCC"> there's some</font>

200
00:08:58,430 --> 00:09:01,849
really interesting attacks<font color="#E5E5E5"> I highly</font>

201
00:09:00,050 --> 00:09:04,969
recommend you read<font color="#E5E5E5"> github as a really</font>

202
00:09:01,850 --> 00:09:08,150
good<font color="#E5E5E5"> blog post on</font><font color="#CCCCCC"> it and so does a</font>

203
00:09:04,970 --> 00:09:10,370
former Googler<font color="#E5E5E5"> letters from</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> post XSS</font>

204
00:09:08,150 --> 00:09:14,260
world so these are really<font color="#E5E5E5"> good articles</font>

205
00:09:10,370 --> 00:09:16,480
on this<font color="#E5E5E5"> but the the main attacks are</font>

206
00:09:14,260 --> 00:09:18,400
defacement which is you actually<font color="#E5E5E5"> include</font>

207
00:09:16,480 --> 00:09:22,300
content<font color="#E5E5E5"> in the page like you say hacked</font>

208
00:09:18,400 --> 00:09:24,010
by blah blah blah<font color="#E5E5E5"> and it will render in</font>

209
00:09:22,300 --> 00:09:26,770
the page<font color="#E5E5E5"> so it's sort of like a text</font>

210
00:09:24,010 --> 00:09:29,140
injection sort of thing redirects you

211
00:09:26,770 --> 00:09:31,240
can use markup<font color="#E5E5E5"> to redirect the page to</font>

212
00:09:29,140 --> 00:09:33,330
another page<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then do some sort of</font>

213
00:09:31,240 --> 00:09:35,830
<font color="#E5E5E5">phishing or something along</font><font color="#CCCCCC"> those lines</font>

214
00:09:33,330 --> 00:09:37,480
<font color="#CCCCCC">form parameter</font><font color="#E5E5E5"> injection so if there's</font>

215
00:09:35,830 --> 00:09:39,520
forms on the page you<font color="#E5E5E5"> might be able to</font>

216
00:09:37,480 --> 00:09:42,730
<font color="#E5E5E5">take over the forms and inject</font><font color="#CCCCCC"> hidden</font>

217
00:09:39,520 --> 00:09:45,819
parameters<font color="#CCCCCC"> the browser will by default</font>

218
00:09:42,730 --> 00:09:49,660
only use the<font color="#E5E5E5"> first parameter so if you</font>

219
00:09:45,820 --> 00:09:51,790
have the<font color="#E5E5E5"> the HTML injection before your</font>

220
00:09:49,660 --> 00:09:54,420
form you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> override what the</font>

221
00:09:51,790 --> 00:09:56,860
user inputs<font color="#E5E5E5"> and then data exfiltration</font>

222
00:09:54,420 --> 00:10:01,599
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> probably the most serious</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> of</font>

223
00:09:56,860 --> 00:10:06,550
all these where<font color="#CCCCCC"> you you include dangling</font>

224
00:10:01,600 --> 00:10:08,170
markup<font color="#CCCCCC"> or or things like</font><font color="#E5E5E5"> image tags</font>

225
00:10:06,550 --> 00:10:11,290
where you can actually<font color="#E5E5E5"> exfiltrate data</font>

226
00:10:08,170 --> 00:10:13,390
from the page<font color="#CCCCCC"> github x' blog post</font>

227
00:10:11,290 --> 00:10:15,819
actually<font color="#E5E5E5"> goes into depth on how images</font>

228
00:10:13,390 --> 00:10:19,300
<font color="#E5E5E5">were</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> to extract Caesar tokens from</font>

229
00:10:15,820 --> 00:10:21,460
<font color="#CCCCCC">their pages so those are</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> things you</font>

230
00:10:19,300 --> 00:10:24,060
still have to<font color="#CCCCCC"> watch out for</font><font color="#E5E5E5"> but overall</font>

231
00:10:21,460 --> 00:10:25,900
it's a much<font color="#CCCCCC"> less serious attack</font><font color="#E5E5E5"> than</font>

232
00:10:24,060 --> 00:10:27,040
<font color="#E5E5E5">than what you would get from a</font>

233
00:10:25,900 --> 00:10:29,319
cross-site scripting attack normally

234
00:10:27,040 --> 00:10:30,910
because the attacker can't do arbitrary

235
00:10:29,320 --> 00:10:32,710
things on your<font color="#E5E5E5"> site they can't make</font>

236
00:10:30,910 --> 00:10:37,060
requests on behalf<font color="#E5E5E5"> of the user and read</font>

237
00:10:32,710 --> 00:10:38,860
the responses<font color="#E5E5E5"> they can't they can do a</font>

238
00:10:37,060 --> 00:10:41,229
lot less<font color="#CCCCCC"> and in our experience we've</font>

239
00:10:38,860 --> 00:10:42,990
gotten many reports of<font color="#CCCCCC"> cross-site</font>

240
00:10:41,230 --> 00:10:45,040
scripting attacks over the<font color="#E5E5E5"> years and</font>

241
00:10:42,990 --> 00:10:46,990
everything<font color="#CCCCCC"> that we've gotten since</font>

242
00:10:45,040 --> 00:10:49,510
deploying the content security policy is

243
00:10:46,990 --> 00:10:51,970
less risky than<font color="#E5E5E5"> what we had before we</font>

244
00:10:49,510 --> 00:10:53,950
deployed the content security policy<font color="#E5E5E5"> so</font>

245
00:10:51,970 --> 00:10:55,660
it can<font color="#E5E5E5"> turn incidents into bugs and this</font>

246
00:10:53,950 --> 00:10:56,980
is a<font color="#E5E5E5"> really valuable</font><font color="#CCCCCC"> thing for</font><font color="#E5E5E5"> us</font>

247
00:10:55,660 --> 00:10:59,110
<font color="#CCCCCC">because it saves us time from an</font>

248
00:10:56,980 --> 00:11:01,330
organizational standpoint<font color="#E5E5E5"> and it allows</font>

249
00:10:59,110 --> 00:11:07,600
for<font color="#E5E5E5"> easier prioritization against other</font>

250
00:11:01,330 --> 00:11:10,440
company objectives<font color="#CCCCCC"> ok so I mentioned</font>

251
00:11:07,600 --> 00:11:12,760
<font color="#E5E5E5">that there were some</font><font color="#CCCCCC"> problems with</font>

252
00:11:10,440 --> 00:11:14,080
inline scripts before<font color="#E5E5E5"> so I'm going</font><font color="#CCCCCC"> to</font>

253
00:11:12,760 --> 00:11:17,080
<font color="#E5E5E5">talk about nonces and how they're a</font>

254
00:11:14,080 --> 00:11:17,770
solution so let's talk about inline

255
00:11:17,080 --> 00:11:19,480
scripts

256
00:11:17,770 --> 00:11:21,370
these are super<font color="#E5E5E5"> common in web</font>

257
00:11:19,480 --> 00:11:22,810
applications<font color="#E5E5E5"> this is where you just</font>

258
00:11:21,370 --> 00:11:25,000
include script and then you start

259
00:11:22,810 --> 00:11:26,800
calling<font color="#CCCCCC"> JavaScript functions they're</font>

260
00:11:25,000 --> 00:11:28,470
really easy<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> so web developers</font>

261
00:11:26,800 --> 00:11:31,199
tend<font color="#E5E5E5"> to use them a lot there</font>

262
00:11:28,470 --> 00:11:32,640
considered not great practice from a

263
00:11:31,200 --> 00:11:35,070
front-end engineer standpoint but

264
00:11:32,640 --> 00:11:37,680
they're still<font color="#E5E5E5"> all over</font><font color="#CCCCCC"> the place</font><font color="#E5E5E5"> so when</font>

265
00:11:35,070 --> 00:11:39,390
you're migrating<font color="#CCCCCC"> a legacy app</font><font color="#E5E5E5"> actually</font>

266
00:11:37,680 --> 00:11:44,699
going<font color="#CCCCCC"> through and finding</font><font color="#E5E5E5"> all these</font>

267
00:11:39,390 --> 00:11:47,430
locations<font color="#E5E5E5"> and moving them to a static</font>

268
00:11:44,700 --> 00:11:51,960
file or a single<font color="#CCCCCC"> javascript file is</font>

269
00:11:47,430 --> 00:11:54,420
actually<font color="#E5E5E5"> not trivial</font><font color="#CCCCCC"> there's also the</font>

270
00:11:51,960 --> 00:11:56,580
<font color="#E5E5E5">problem of performance inline scripts</font>

271
00:11:54,420 --> 00:11:59,880
actually<font color="#CCCCCC"> have much better performance</font><font color="#E5E5E5"> if</font>

272
00:11:56,580 --> 00:12:01,560
they're short on<font color="#CCCCCC"> a web application so</font>

273
00:11:59,880 --> 00:12:04,370
you might actually<font color="#E5E5E5"> hurt the performance</font>

274
00:12:01,560 --> 00:12:06,719
of your<font color="#E5E5E5"> your site by moving these to a</font>

275
00:12:04,370 --> 00:12:09,840
<font color="#CCCCCC">JavaScript</font><font color="#E5E5E5"> and this actually blocked us</font>

276
00:12:06,720 --> 00:12:12,330
for quite a while<font color="#CCCCCC"> we had a an early</font>

277
00:12:09,840 --> 00:12:14,130
version of CSP on our site and we could

278
00:12:12,330 --> 00:12:15,570
not migrate completely to get rid of

279
00:12:14,130 --> 00:12:17,730
unsafe in line<font color="#E5E5E5"> because of the</font>

280
00:12:15,570 --> 00:12:21,410
performance<font color="#E5E5E5"> impact it was it was a big</font>

281
00:12:17,730 --> 00:12:26,090
impact<font color="#E5E5E5"> and it would hurt our users</font><font color="#CCCCCC"> so</font>

282
00:12:21,410 --> 00:12:28,620
<font color="#CCCCCC">what</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> we do introduce CSP nonces</font>

283
00:12:26,090 --> 00:12:31,290
nonces are a<font color="#E5E5E5"> number used once</font>

284
00:12:28,620 --> 00:12:33,630
that's what<font color="#E5E5E5"> nan stands for and basically</font>

285
00:12:31,290 --> 00:12:35,579
every time<font color="#CCCCCC"> a page is rendered you</font>

286
00:12:33,630 --> 00:12:40,530
generate<font color="#E5E5E5"> this random number</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> looks</font>

287
00:12:35,580 --> 00:12:43,860
like this<font color="#E5E5E5"> is ill</font><font color="#CCCCCC"> Babinec thing</font><font color="#E5E5E5"> it's</font>

288
00:12:40,530 --> 00:12:47,520
generated on every page load and it's

289
00:12:43,860 --> 00:12:51,090
made to<font color="#E5E5E5"> be random and not guessable so I</font>

290
00:12:47,520 --> 00:12:54,600
typically go for<font color="#E5E5E5"> 128 bits piped into a</font>

291
00:12:51,090 --> 00:12:56,580
<font color="#E5E5E5">base64</font><font color="#CCCCCC"> when you include in the header</font>

292
00:12:54,600 --> 00:12:58,320
<font color="#E5E5E5">you need to also include it on all of</font>

293
00:12:56,580 --> 00:13:00,660
your inline scripts so it just looks

294
00:12:58,320 --> 00:13:02,670
like this in the<font color="#E5E5E5"> header where he has</font><font color="#CCCCCC"> nan</font>

295
00:13:00,660 --> 00:13:05,219
<font color="#CCCCCC">stashed the random value and then in</font>

296
00:13:02,670 --> 00:13:07,560
your<font color="#E5E5E5"> in the body</font><font color="#CCCCCC"> on every attribute of</font>

297
00:13:05,220 --> 00:13:09,960
<font color="#CCCCCC">the script it includes nonce</font><font color="#E5E5E5"> equals that</font>

298
00:13:07,560 --> 00:13:12,510
<font color="#E5E5E5">value</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> well and because</font><font color="#CCCCCC"> it's</font>

299
00:13:09,960 --> 00:13:16,290
unguessable<font color="#CCCCCC"> the attacker can't inject an</font>

300
00:13:12,510 --> 00:13:19,400
inline script so you you actually<font color="#CCCCCC"> are</font>

301
00:13:16,290 --> 00:13:22,800
safe against inline script<font color="#E5E5E5"> attacks and</font>

302
00:13:19,400 --> 00:13:26,220
for backwards compatibility<font color="#E5E5E5"> it allows</font>

303
00:13:22,800 --> 00:13:27,890
you to<font color="#E5E5E5"> also insert unsafe inline so</font>

304
00:13:26,220 --> 00:13:31,080
you'll still get<font color="#E5E5E5"> the protections of CSP</font>

305
00:13:27,890 --> 00:13:34,800
<font color="#CCCCCC">if your browser only</font><font color="#E5E5E5"> supports CSP v1</font>

306
00:13:31,080 --> 00:13:36,180
<font color="#E5E5E5">rather than CSP v2 so you can include</font>

307
00:13:34,800 --> 00:13:40,800
unsafe inline and still get those

308
00:13:36,180 --> 00:13:42,239
protections what can<font color="#E5E5E5"> go wrong</font><font color="#CCCCCC"> if the</font>

309
00:13:40,800 --> 00:13:44,939
nonces are exposed in<font color="#E5E5E5"> any way</font>

310
00:13:42,240 --> 00:13:46,410
the attacker can<font color="#CCCCCC"> use this to to run</font>

311
00:13:44,939 --> 00:13:48,748
scripts<font color="#E5E5E5"> on your site and you lose the</font>

312
00:13:46,410 --> 00:13:50,879
protections<font color="#E5E5E5"> so you really need to be</font>

313
00:13:48,749 --> 00:13:52,980
<font color="#CCCCCC">careful</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> non-serious you can't use</font>

314
00:13:50,879 --> 00:13:56,610
these<font color="#E5E5E5"> in more than one page</font><font color="#CCCCCC"> you can't</font>

315
00:13:52,980 --> 00:13:59,160
use them on cached pages<font color="#CCCCCC"> data</font>

316
00:13:56,610 --> 00:14:01,319
exfiltration is also a problem so you

317
00:13:59,160 --> 00:14:03,300
<font color="#CCCCCC">generally only want to include them</font><font color="#E5E5E5"> on</font>

318
00:14:01,319 --> 00:14:07,679
your script tags<font color="#CCCCCC"> themselves you don't</font>

319
00:14:03,300 --> 00:14:09,209
<font color="#E5E5E5">want to put them all</font><font color="#CCCCCC"> over your page so</font>

320
00:14:07,679 --> 00:14:11,189
they can be exfiltrated through other

321
00:14:09,209 --> 00:14:14,399
means or include them<font color="#CCCCCC"> in vendor scripts</font>

322
00:14:11,189 --> 00:14:16,889
or other<font color="#E5E5E5"> parameters</font><font color="#CCCCCC"> browser supports</font>

323
00:14:14,399 --> 00:14:19,379
<font color="#E5E5E5">pretty good on nonces</font><font color="#CCCCCC"> I think it's if</font>

324
00:14:16,889 --> 00:14:21,749
you use can I use I<font color="#CCCCCC"> think it's like 80%</font>

325
00:14:19,379 --> 00:14:24,839
<font color="#CCCCCC">right</font><font color="#E5E5E5"> now modern browsers like edge</font>

326
00:14:21,749 --> 00:14:28,290
Safari Chrome Firefox Opera<font color="#E5E5E5"> all support</font>

327
00:14:24,839 --> 00:14:32,610
<font color="#E5E5E5">announces so the support there is</font><font color="#CCCCCC"> pretty</font>

328
00:14:28,290 --> 00:14:34,319
<font color="#E5E5E5">good</font><font color="#CCCCCC"> right now I mentioned you can't use</font>

329
00:14:32,610 --> 00:14:37,379
<font color="#E5E5E5">them on</font><font color="#CCCCCC"> cash static pages</font><font color="#E5E5E5"> and that's</font>

330
00:14:34,319 --> 00:14:40,170
<font color="#CCCCCC">where hashes come in</font><font color="#E5E5E5"> cash static pages</font>

331
00:14:37,379 --> 00:14:42,839
<font color="#E5E5E5">tend to not have user data in them</font><font color="#CCCCCC"> so</font>

332
00:14:40,170 --> 00:14:45,179
you tend to<font color="#E5E5E5"> not be</font><font color="#CCCCCC"> as vulnerable to XSS</font>

333
00:14:42,839 --> 00:14:48,089
on those pages<font color="#CCCCCC"> but</font><font color="#E5E5E5"> there is a solution</font>

334
00:14:45,179 --> 00:14:50,939
<font color="#E5E5E5">for you</font><font color="#CCCCCC"> so you can protect these</font><font color="#E5E5E5"> if you</font>

335
00:14:48,089 --> 00:14:52,110
do have some sort<font color="#CCCCCC"> of data that's echoed</font>

336
00:14:50,939 --> 00:14:55,319
back

337
00:14:52,110 --> 00:14:57,929
so how hashes work is you<font color="#CCCCCC"> basically take</font>

338
00:14:55,319 --> 00:15:00,569
a hash of<font color="#E5E5E5"> the actual contents of the</font>

339
00:14:57,929 --> 00:15:04,230
inline script and you base64 encode it

340
00:15:00,569 --> 00:15:05,910
and<font color="#E5E5E5"> you include it in the the header</font><font color="#CCCCCC"> -</font>

341
00:15:04,230 --> 00:15:09,990
what type of hash you use so I think

342
00:15:05,910 --> 00:15:13,290
<font color="#E5E5E5">shot 256 512 and one of the other ones</font>

343
00:15:09,990 --> 00:15:14,670
of the shot<font color="#CCCCCC"> - variety and it also has</font>

344
00:15:13,290 --> 00:15:17,069
<font color="#E5E5E5">that great backwards compatibility</font>

345
00:15:14,670 --> 00:15:20,490
feature where you can<font color="#E5E5E5"> include unsafe</font>

346
00:15:17,069 --> 00:15:24,269
<font color="#CCCCCC">inline and</font><font color="#E5E5E5"> it'll just ignore</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> if the</font>

347
00:15:20,490 --> 00:15:25,829
browser supports<font color="#CCCCCC"> hashes whitespace and</font>

348
00:15:24,269 --> 00:15:27,869
<font color="#CCCCCC">capitalization do matter if you're</font>

349
00:15:25,829 --> 00:15:29,399
<font color="#E5E5E5">deploying hashes</font><font color="#CCCCCC"> so don't forget</font><font color="#E5E5E5"> those</font>

350
00:15:27,869 --> 00:15:32,069
in your script tags if I included<font color="#E5E5E5"> an</font>

351
00:15:29,399 --> 00:15:34,649
<font color="#CCCCCC">extra space my my hash will change on my</font>

352
00:15:32,069 --> 00:15:37,410
script value<font color="#E5E5E5"> so this is the hash of</font><font color="#CCCCCC"> var</font>

353
00:15:34,649 --> 00:15:41,189
space in line space equals space<font color="#E5E5E5"> one</font>

354
00:15:37,410 --> 00:15:45,660
semicolon<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> have to be careful of</font>

355
00:15:41,189 --> 00:15:49,049
<font color="#E5E5E5">that when you're deploying that great so</font>

356
00:15:45,660 --> 00:15:51,929
strict dynamic<font color="#CCCCCC"> there's one other problem</font>

357
00:15:49,049 --> 00:15:54,329
<font color="#CCCCCC">that is a really big</font><font color="#E5E5E5"> deal when you're</font>

358
00:15:51,929 --> 00:15:55,350
deploying<font color="#CCCCCC"> content</font><font color="#E5E5E5"> security policy which</font>

359
00:15:54,329 --> 00:15:55,949
is that you have to maintain that

360
00:15:55,350 --> 00:15:57,990
whitelist

361
00:15:55,950 --> 00:15:59,610
domains<font color="#E5E5E5"> and getting that</font><font color="#CCCCCC"> whitelist in</font>

362
00:15:57,990 --> 00:16:01,050
the in the<font color="#CCCCCC"> first place is actually</font><font color="#E5E5E5"> kind</font>

363
00:15:59,610 --> 00:16:02,910
<font color="#CCCCCC">of difficult</font>

364
00:16:01,050 --> 00:16:04,290
you have scripts on your page<font color="#CCCCCC"> that might</font>

365
00:16:02,910 --> 00:16:06,030
include<font color="#E5E5E5"> other scripts on your page that</font>

366
00:16:04,290 --> 00:16:08,579
<font color="#E5E5E5">might include other scripts on your page</font>

367
00:16:06,030 --> 00:16:10,290
and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> figuring out what those those</font>

368
00:16:08,580 --> 00:16:12,750
dependencies are is something<font color="#CCCCCC"> that you</font>

369
00:16:10,290 --> 00:16:15,870
actually<font color="#E5E5E5"> have to go through</font><font color="#CCCCCC"> and monitor</font>

370
00:16:12,750 --> 00:16:18,000
and figure out<font color="#CCCCCC"> so from an operational</font>

371
00:16:15,870 --> 00:16:20,130
standpoint it's difficult to do that<font color="#CCCCCC"> and</font>

372
00:16:18,000 --> 00:16:22,770
then<font color="#CCCCCC"> also from a maintenance standpoint</font>

373
00:16:20,130 --> 00:16:24,900
<font color="#E5E5E5">if</font><font color="#CCCCCC"> facebook decides to</font><font color="#E5E5E5"> change the URLs</font>

374
00:16:22,770 --> 00:16:27,780
<font color="#E5E5E5">of what they include with their script</font>

375
00:16:24,900 --> 00:16:29,520
<font color="#E5E5E5">then you know their</font><font color="#CCCCCC"> plugins</font><font color="#E5E5E5"> might break</font>

376
00:16:27,780 --> 00:16:30,030
<font color="#E5E5E5">for some amount of time until you figure</font>

377
00:16:29,520 --> 00:16:33,780
<font color="#E5E5E5">that</font><font color="#CCCCCC"> out</font>

378
00:16:30,030 --> 00:16:36,510
so from an operational standpoint<font color="#CCCCCC"> that's</font>

379
00:16:33,780 --> 00:16:38,430
not so<font color="#E5E5E5"> great from</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> security standpoint</font>

380
00:16:36,510 --> 00:16:42,480
it's even worse<font color="#E5E5E5"> because you tend the</font>

381
00:16:38,430 --> 00:16:44,489
<font color="#CCCCCC">whitelist things like CD ends or outside</font>

382
00:16:42,480 --> 00:16:46,710
vendors that you<font color="#CCCCCC"> might not know exactly</font>

383
00:16:44,490 --> 00:16:48,470
<font color="#E5E5E5">what's what's</font><font color="#CCCCCC"> happening and what kind of</font>

384
00:16:46,710 --> 00:16:51,000
sources<font color="#E5E5E5"> they're including on their page</font>

385
00:16:48,470 --> 00:16:52,590
so they might have<font color="#E5E5E5"> a user upload</font>

386
00:16:51,000 --> 00:16:55,890
function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> allows them</font><font color="#CCCCCC"> to upload</font>

387
00:16:52,590 --> 00:16:58,590
<font color="#E5E5E5">other users content one example of this</font>

388
00:16:55,890 --> 00:17:00,150
<font color="#E5E5E5">would be storage that</font><font color="#CCCCCC"> Google api's comm</font>

389
00:16:58,590 --> 00:17:03,810
<font color="#E5E5E5">which we had white listed it at one</font>

390
00:17:00,150 --> 00:17:06,780
<font color="#CCCCCC">point</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that basically is any any</font>

391
00:17:03,810 --> 00:17:08,669
<font color="#CCCCCC">Google</font><font color="#E5E5E5"> cloud user can upload</font><font color="#CCCCCC"> to that</font>

392
00:17:06,780 --> 00:17:11,819
domain<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you have to be really careful</font>

393
00:17:08,670 --> 00:17:14,790
<font color="#CCCCCC">about who you're whitelisting the other</font>

394
00:17:11,819 --> 00:17:17,730
side of<font color="#E5E5E5"> this is there's a somewhat</font>

395
00:17:14,790 --> 00:17:19,409
bypass using<font color="#E5E5E5"> JSON</font><font color="#CCCCCC"> P so if you're not</font>

396
00:17:17,730 --> 00:17:21,750
<font color="#E5E5E5">aware</font><font color="#CCCCCC"> of JSON</font><font color="#E5E5E5"> P that's where you can</font>

397
00:17:19,410 --> 00:17:23,250
include a<font color="#CCCCCC"> callback in your your script</font>

398
00:17:21,750 --> 00:17:26,849
<font color="#E5E5E5">and allows you to get around the same</font>

399
00:17:23,250 --> 00:17:28,530
origin<font color="#CCCCCC"> policy</font><font color="#E5E5E5"> unfortunately with these</font>

400
00:17:26,849 --> 00:17:31,889
white lists<font color="#CCCCCC"> if you include that</font><font color="#E5E5E5"> callback</font>

401
00:17:28,530 --> 00:17:33,420
<font color="#CCCCCC">they</font><font color="#E5E5E5"> could name other functions inside</font>

402
00:17:31,890 --> 00:17:36,450
your page and they could use<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to</font>

403
00:17:33,420 --> 00:17:37,620
execute sort of a<font color="#E5E5E5"> strange attack where</font>

404
00:17:36,450 --> 00:17:39,330
they're tying together different

405
00:17:37,620 --> 00:17:41,310
function calls<font color="#E5E5E5"> it's kind of difficult</font>

406
00:17:39,330 --> 00:17:43,980
<font color="#CCCCCC">I've never seen it actually</font><font color="#E5E5E5"> perform but</font>

407
00:17:41,310 --> 00:17:49,260
it's they can still execute<font color="#E5E5E5"> an alert for</font>

408
00:17:43,980 --> 00:17:51,660
instance so<font color="#CCCCCC"> the solution for that is</font>

409
00:17:49,260 --> 00:17:53,850
strict dynamic<font color="#E5E5E5"> and if you include strict</font>

410
00:17:51,660 --> 00:17:56,070
dynamic in your<font color="#E5E5E5"> script source what that</font>

411
00:17:53,850 --> 00:17:57,959
means is that it will trust anything

412
00:17:56,070 --> 00:18:01,530
<font color="#E5E5E5">that's white listed with a nonce or a</font>

413
00:17:57,960 --> 00:18:03,270
hash<font color="#CCCCCC"> so in our</font><font color="#E5E5E5"> case instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> just</font>

414
00:18:01,530 --> 00:18:05,539
adding<font color="#E5E5E5"> the nonce to our inline scripts</font>

415
00:18:03,270 --> 00:18:08,929
we're also going to<font color="#E5E5E5"> add it to</font><font color="#CCCCCC"> our</font>

416
00:18:05,539 --> 00:18:11,509
<font color="#CCCCCC">our</font><font color="#E5E5E5"> full-on dependencies</font><font color="#CCCCCC"> so in this case</font>

417
00:18:08,929 --> 00:18:13,519
it'll ignore the<font color="#E5E5E5"> white list</font><font color="#CCCCCC"> so we could</font>

418
00:18:11,509 --> 00:18:15,440
we<font color="#E5E5E5"> could even include a different domain</font>

419
00:18:13,519 --> 00:18:18,049
here if we wanted to<font color="#E5E5E5"> and it would be</font>

420
00:18:15,440 --> 00:18:22,580
fine in a browser that<font color="#E5E5E5"> supports ESP ESP</font>

421
00:18:18,049 --> 00:18:25,009
<font color="#CCCCCC">3 and what this does is it basically</font>

422
00:18:22,580 --> 00:18:27,019
says anything<font color="#E5E5E5"> with a nonce is</font><font color="#CCCCCC"> okay to</font>

423
00:18:25,009 --> 00:18:30,529
run and anything<font color="#CCCCCC"> that</font><font color="#E5E5E5"> these pages</font>

424
00:18:27,019 --> 00:18:34,220
include is also okay to run so that<font color="#CCCCCC"> pin</font>

425
00:18:30,529 --> 00:18:36,229
image<font color="#E5E5E5"> comm slash site</font><font color="#CCCCCC"> dot J</font><font color="#E5E5E5"> s might</font>

426
00:18:34,220 --> 00:18:39,259
include another<font color="#E5E5E5"> domain that includes</font>

427
00:18:36,229 --> 00:18:42,590
scripts<font color="#E5E5E5"> and that's okay as long</font><font color="#CCCCCC"> as the</font>

428
00:18:39,259 --> 00:18:46,580
JavaScript<font color="#E5E5E5"> that's already trusted is is</font>

429
00:18:42,590 --> 00:18:48,259
including that script<font color="#E5E5E5"> so things can go</font>

430
00:18:46,580 --> 00:18:50,509
wrong<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that so you</font><font color="#E5E5E5"> might have</font>

431
00:18:48,259 --> 00:18:54,019
<font color="#E5E5E5">JavaScript templates that render render</font>

432
00:18:50,509 --> 00:18:55,909
your content<font color="#E5E5E5"> and there's actually a good</font>

433
00:18:54,019 --> 00:19:01,580
number of bypasses there<font color="#E5E5E5"> so if you're</font>

434
00:18:55,909 --> 00:19:02,899
using angular<font color="#E5E5E5"> v1 there's I think what</font>

435
00:19:01,580 --> 00:19:04,428
the other<font color="#E5E5E5"> ones are I don't remember the</font>

436
00:19:02,899 --> 00:19:07,008
other<font color="#E5E5E5"> ones up top my head but angular v1</font>

437
00:19:04,429 --> 00:19:08,779
is a great example<font color="#CCCCCC"> of a</font><font color="#E5E5E5"> case where if</font>

438
00:19:07,009 --> 00:19:11,149
there's a script injected inside of an

439
00:19:08,779 --> 00:19:13,159
angular template that will bypass<font color="#E5E5E5"> strict</font>

440
00:19:11,149 --> 00:19:13,758
dynamic<font color="#E5E5E5"> if you're using something like</font>

441
00:19:13,159 --> 00:19:16,220
react

442
00:19:13,759 --> 00:19:17,629
<font color="#E5E5E5">there's no bypasses there</font><font color="#CCCCCC"> I would</font>

443
00:19:16,220 --> 00:19:18,859
recommend whatever<font color="#E5E5E5"> framework you're</font>

444
00:19:17,629 --> 00:19:21,199
using if<font color="#E5E5E5"> you're rendering</font><font color="#CCCCCC"> JavaScript</font>

445
00:19:18,859 --> 00:19:23,330
templates<font color="#E5E5E5"> you double check with the</font>

446
00:19:21,200 --> 00:19:26,989
research that<font color="#E5E5E5"> Google did about a year</font>

447
00:19:23,330 --> 00:19:31,519
<font color="#CCCCCC">ago in across CSP but if you're using</font>

448
00:19:26,989 --> 00:19:34,249
react<font color="#E5E5E5"> it's great it also isn't supported</font>

449
00:19:31,519 --> 00:19:36,619
in I<font color="#E5E5E5"> 11</font><font color="#CCCCCC"> edge or</font><font color="#E5E5E5"> Safari</font><font color="#CCCCCC"> so you don't get</font>

450
00:19:34,249 --> 00:19:38,989
as good<font color="#E5E5E5"> of browser support</font><font color="#CCCCCC"> as you do</font>

451
00:19:36,619 --> 00:19:40,939
<font color="#E5E5E5">with nonces and it means you'll fall</font>

452
00:19:38,989 --> 00:19:44,690
back to the<font color="#CCCCCC"> white</font><font color="#E5E5E5"> list for deployments</font>

453
00:19:40,940 --> 00:19:47,389
<font color="#E5E5E5">for those browsers</font><font color="#CCCCCC"> so if you whitelist</font>

454
00:19:44,690 --> 00:19:49,580
<font color="#E5E5E5">something broad like HTTP which is all</font>

455
00:19:47,389 --> 00:19:55,939
web pages<font color="#E5E5E5"> and you won't get any XSS</font>

456
00:19:49,580 --> 00:19:57,799
protection on those browsers<font color="#CCCCCC"> so now that</font>

457
00:19:55,940 --> 00:20:00,229
we've gone over the the new directives

458
00:19:57,799 --> 00:20:02,720
and sort of<font color="#E5E5E5"> what they offer I'm going to</font>

459
00:20:00,229 --> 00:20:05,840
talk about<font color="#E5E5E5"> deploying CSP using these</font>

460
00:20:02,720 --> 00:20:08,599
<font color="#E5E5E5">directives this actually tends to be a</font>

461
00:20:05,840 --> 00:20:11,418
lot easier<font color="#E5E5E5"> than it was to deploy the</font>

462
00:20:08,599 --> 00:20:12,950
first version of CSP<font color="#E5E5E5"> because the first</font>

463
00:20:11,419 --> 00:20:14,210
version of CSP you had to<font color="#CCCCCC"> construct that</font>

464
00:20:12,950 --> 00:20:18,200
<font color="#E5E5E5">white list and</font><font color="#CCCCCC"> that's actually a pretty</font>

465
00:20:14,210 --> 00:20:18,980
<font color="#CCCCCC">tedious step</font><font color="#E5E5E5"> the other part is removing</font>

466
00:20:18,200 --> 00:20:20,900
<font color="#CCCCCC">inline</font>

467
00:20:18,980 --> 00:20:24,260
<font color="#E5E5E5">javascript</font><font color="#CCCCCC"> which also</font><font color="#E5E5E5"> tends to be really</font>

468
00:20:20,900 --> 00:20:26,780
<font color="#CCCCCC">tedious</font><font color="#E5E5E5"> so this tends to</font><font color="#CCCCCC"> be much easier</font>

469
00:20:24,260 --> 00:20:29,299
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you can get</font><font color="#E5E5E5"> that protection</font><font color="#CCCCCC"> much</font>

470
00:20:26,780 --> 00:20:32,510
quicker<font color="#CCCCCC"> for example with instapaper</font>

471
00:20:29,299 --> 00:20:36,400
<font color="#CCCCCC">I was able to deploy</font><font color="#E5E5E5"> this in about</font><font color="#CCCCCC"> a</font>

472
00:20:32,510 --> 00:20:38,870
week the first step is the hardest<font color="#CCCCCC"> step</font>

473
00:20:36,400 --> 00:20:40,940
<font color="#E5E5E5">this actually involves code changes</font>

474
00:20:38,870 --> 00:20:43,610
things<font color="#E5E5E5"> that can go wrong</font>

475
00:20:40,940 --> 00:20:46,600
one thing that CSP doesn't allow and

476
00:20:43,610 --> 00:20:49,370
doesn't protect against is removing

477
00:20:46,600 --> 00:20:51,799
JavaScript events<font color="#E5E5E5"> so if you have like a</font>

478
00:20:49,370 --> 00:20:56,149
button<font color="#CCCCCC"> that has an on-click javascript</font>

479
00:20:51,799 --> 00:20:57,889
event on it<font color="#CCCCCC"> that does</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> you</font>

480
00:20:56,150 --> 00:21:01,309
actually<font color="#CCCCCC"> have to change that to be an</font>

481
00:20:57,890 --> 00:21:03,890
inline script tag<font color="#E5E5E5"> so any of your</font>

482
00:21:01,309 --> 00:21:05,720
template files that look like the<font color="#CCCCCC"> the</font>

483
00:21:03,890 --> 00:21:07,490
top<font color="#E5E5E5"> part where it</font><font color="#CCCCCC"> says on click do</font>

484
00:21:05,720 --> 00:21:09,919
something you have to<font color="#E5E5E5"> change to document</font>

485
00:21:07,490 --> 00:21:13,100
that get element by ID or by class and

486
00:21:09,919 --> 00:21:15,440
then add an event listener onto it<font color="#E5E5E5"> and</font>

487
00:21:13,100 --> 00:21:17,480
<font color="#E5E5E5">this is the</font><font color="#CCCCCC"> step that's in</font><font color="#E5E5E5"> my experience</font>

488
00:21:15,440 --> 00:21:19,130
most<font color="#E5E5E5"> prone to causing errors you should</font>

489
00:21:17,480 --> 00:21:21,650
test very carefully make<font color="#CCCCCC"> sure you don't</font>

490
00:21:19,130 --> 00:21:24,410
<font color="#E5E5E5">change anything</font><font color="#CCCCCC"> you typically have to</font><font color="#E5E5E5"> do</font>

491
00:21:21,650 --> 00:21:26,720
<font color="#E5E5E5">this manually because you'reyou're</font>

492
00:21:24,410 --> 00:21:29,720
adding IDs you're adding classes<font color="#E5E5E5"> to your</font>

493
00:21:26,720 --> 00:21:33,650
your existing templates and you might

494
00:21:29,720 --> 00:21:36,020
mess something up there so after you get

495
00:21:33,650 --> 00:21:38,960
<font color="#E5E5E5">those code changes out of the way you</font>

496
00:21:36,020 --> 00:21:40,730
get you<font color="#E5E5E5"> have the</font><font color="#CCCCCC"> hard part done the the</font>

497
00:21:38,960 --> 00:21:42,169
<font color="#E5E5E5">next step is to add a nonce generation</font>

498
00:21:40,730 --> 00:21:43,820
middleware to your web application

499
00:21:42,169 --> 00:21:45,890
<font color="#CCCCCC">there's some</font><font color="#E5E5E5"> great open source projects</font>

500
00:21:43,820 --> 00:21:47,629
out there<font color="#E5E5E5"> whatever language you're</font><font color="#CCCCCC"> using</font>

501
00:21:45,890 --> 00:21:50,510
<font color="#E5E5E5">or framework you're using I recommend</font>

502
00:21:47,630 --> 00:21:52,760
you just<font color="#CCCCCC"> search github for something and</font>

503
00:21:50,510 --> 00:21:56,030
if it<font color="#E5E5E5"> looks like it's you know solid</font>

504
00:21:52,760 --> 00:21:58,940
<font color="#E5E5E5">versus your open source guidelines</font>

505
00:21:56,030 --> 00:22:00,379
whatever those are<font color="#E5E5E5"> you should probably</font>

506
00:21:58,940 --> 00:22:01,820
use<font color="#CCCCCC"> that rather</font><font color="#E5E5E5"> than building your own</font>

507
00:22:00,380 --> 00:22:06,049
<font color="#E5E5E5">but it is simple if you</font><font color="#CCCCCC"> want to build</font>

508
00:22:01,820 --> 00:22:08,530
your<font color="#CCCCCC"> own so if you do want to</font><font color="#E5E5E5"> build your</font>

509
00:22:06,049 --> 00:22:11,629
own<font color="#E5E5E5"> I would recommend 128-bit nonces or</font>

510
00:22:08,530 --> 00:22:13,910
<font color="#E5E5E5">16 bytes</font><font color="#CCCCCC"> you generate a random</font><font color="#E5E5E5"> string</font>

511
00:22:11,630 --> 00:22:16,970
from<font color="#E5E5E5"> a good source of</font><font color="#CCCCCC"> randomness use</font>

512
00:22:13,910 --> 00:22:19,540
<font color="#CCCCCC">Debu random or or whatever</font><font color="#E5E5E5"> your</font>

513
00:22:16,970 --> 00:22:23,059
cryptographic<font color="#E5E5E5"> random number generator is</font>

514
00:22:19,540 --> 00:22:24,590
<font color="#E5E5E5">and then you base 64 encode them and you</font>

515
00:22:23,059 --> 00:22:26,178
keep track<font color="#CCCCCC"> of that</font><font color="#E5E5E5"> nonce is in a place</font>

516
00:22:24,590 --> 00:22:27,049
where your templates will actually be

517
00:22:26,179 --> 00:22:28,940
able<font color="#E5E5E5"> to access them</font>

518
00:22:27,049 --> 00:22:32,799
so in<font color="#CCCCCC"> Django</font><font color="#E5E5E5"> putting on the request</font>

519
00:22:28,940 --> 00:22:32,799
object<font color="#CCCCCC"> generally works pretty well</font>

520
00:22:33,460 --> 00:22:39,290
so after you<font color="#CCCCCC"> have that</font><font color="#E5E5E5"> nonce object</font>

521
00:22:37,010 --> 00:22:42,170
accessible<font color="#CCCCCC"> you need to actually change</font>

522
00:22:39,290 --> 00:22:44,840
your your templates to use<font color="#E5E5E5"> the nonce</font>

523
00:22:42,170 --> 00:22:46,820
<font color="#E5E5E5">this tends</font><font color="#CCCCCC"> to be a pretty</font><font color="#E5E5E5"> simple step</font>

524
00:22:44,840 --> 00:22:48,860
<font color="#CCCCCC">especially if all of your templates are</font>

525
00:22:46,820 --> 00:22:50,840
in one place<font color="#E5E5E5"> because you can just do a</font>

526
00:22:48,860 --> 00:22:53,149
find<font color="#E5E5E5"> and replace for less than script</font>

527
00:22:50,840 --> 00:22:56,030
<font color="#CCCCCC">and replace it with less than script</font>

528
00:22:53,150 --> 00:22:58,190
space nonce<font color="#E5E5E5"> equals whatever your format</font>

529
00:22:56,030 --> 00:23:01,270
of<font color="#CCCCCC"> their template</font><font color="#E5E5E5"> is in fact if you use</font>

530
00:22:58,190 --> 00:23:05,540
something like closure<font color="#CCCCCC"> which Google</font>

531
00:23:01,270 --> 00:23:08,000
<font color="#E5E5E5">modified to automatically add nonces to</font>

532
00:23:05,540 --> 00:23:10,010
all their script tags if you enable<font color="#CCCCCC"> the</font>

533
00:23:08,000 --> 00:23:13,130
flag<font color="#E5E5E5"> so maybe your template engine</font>

534
00:23:10,010 --> 00:23:18,020
supports that and if they do<font color="#E5E5E5"> even less</font>

535
00:23:13,130 --> 00:23:21,950
<font color="#E5E5E5">work</font><font color="#CCCCCC"> for you after you do that you</font><font color="#E5E5E5"> can</font>

536
00:23:18,020 --> 00:23:24,830
test<font color="#E5E5E5"> CSP</font><font color="#CCCCCC"> in report only mode report only</font>

537
00:23:21,950 --> 00:23:27,890
mode<font color="#E5E5E5"> basically says you specify a URL</font>

538
00:23:24,830 --> 00:23:30,800
<font color="#E5E5E5">and it will send reports on things that</font>

539
00:23:27,890 --> 00:23:32,840
are getting<font color="#E5E5E5"> blocked</font><font color="#CCCCCC"> it tends to</font><font color="#E5E5E5"> be kind</font>

540
00:23:30,800 --> 00:23:35,899
of<font color="#CCCCCC"> noisy if you're deploying</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to your</font>

541
00:23:32,840 --> 00:23:38,179
users<font color="#CCCCCC"> but if you get high-volume</font><font color="#E5E5E5"> reports</font>

542
00:23:35,900 --> 00:23:40,400
<font color="#E5E5E5">those tend to</font><font color="#CCCCCC"> be things that</font><font color="#E5E5E5"> are</font>

543
00:23:38,180 --> 00:23:42,770
actually<font color="#CCCCCC"> going wrong there's actually a</font>

544
00:23:40,400 --> 00:23:43,970
pretty good resource<font color="#E5E5E5"> on going through</font>

545
00:23:42,770 --> 00:23:46,520
and seeing what<font color="#E5E5E5"> kind of things are</font>

546
00:23:43,970 --> 00:23:47,930
getting<font color="#E5E5E5"> block of your CSP examples of</font>

547
00:23:46,520 --> 00:23:49,760
<font color="#E5E5E5">things that are pretty</font><font color="#CCCCCC"> common are like</font>

548
00:23:47,930 --> 00:23:51,800
browser extensions especially in Safari

549
00:23:49,760 --> 00:23:54,020
I think like every browser extension or

550
00:23:51,800 --> 00:23:58,730
a good<font color="#E5E5E5"> number of them will will generate</font>

551
00:23:54,020 --> 00:24:00,560
reports<font color="#CCCCCC"> but you can generally see</font><font color="#E5E5E5"> large</font>

552
00:23:58,730 --> 00:24:03,470
amount of failures for things that<font color="#E5E5E5"> are</font>

553
00:24:00,560 --> 00:24:05,990
actually<font color="#CCCCCC"> breaking your site the</font><font color="#E5E5E5"> other</font>

554
00:24:03,470 --> 00:24:07,730
option instead<font color="#CCCCCC"> of going</font><font color="#E5E5E5"> to report only</font>

555
00:24:05,990 --> 00:24:09,710
<font color="#E5E5E5">is to gradually roll out the full header</font>

556
00:24:07,730 --> 00:24:11,990
<font color="#E5E5E5">so if you have some sort of experiments</font>

557
00:24:09,710 --> 00:24:13,670
framework or something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that where</font>

558
00:24:11,990 --> 00:24:18,380
<font color="#E5E5E5">you can do that that's also a great</font>

559
00:24:13,670 --> 00:24:20,150
option<font color="#CCCCCC"> last step is</font><font color="#E5E5E5"> you remove the</font>

560
00:24:18,380 --> 00:24:23,090
report only<font color="#E5E5E5"> from your CSP header and you</font>

561
00:24:20,150 --> 00:24:25,520
continue monitoring<font color="#E5E5E5"> your reports</font><font color="#CCCCCC"> so this</font>

562
00:24:23,090 --> 00:24:28,250
is actually an example of a CSP policy

563
00:24:25,520 --> 00:24:31,460
that will<font color="#E5E5E5"> work for pretty much any site</font>

564
00:24:28,250 --> 00:24:33,110
out there<font color="#E5E5E5"> what it'll do</font><font color="#CCCCCC"> is it you</font>

565
00:24:31,460 --> 00:24:37,070
replace<font color="#CCCCCC"> that random with your random</font>

566
00:24:33,110 --> 00:24:38,899
value and it will<font color="#E5E5E5"> block anything that</font>

567
00:24:37,070 --> 00:24:42,800
you<font color="#E5E5E5"> don't have</font><font color="#CCCCCC"> white listed in finance</font>

568
00:24:38,900 --> 00:24:45,410
<font color="#E5E5E5">and it will block all flash</font><font color="#CCCCCC"> so with this</font>

569
00:24:42,800 --> 00:24:46,700
you won't be vulnerable<font color="#CCCCCC"> to</font><font color="#E5E5E5"> cross-site</font>

570
00:24:45,410 --> 00:24:49,040
scripting just HTM

571
00:24:46,700 --> 00:24:51,740
Injection<font color="#E5E5E5"> on browsers to support strict</font>

572
00:24:49,040 --> 00:24:53,780
dynamic you could even take<font color="#E5E5E5"> a</font><font color="#CCCCCC"> six step</font>

573
00:24:51,740 --> 00:24:55,580
here to add your own whitelist<font color="#E5E5E5"> and then</font>

574
00:24:53,780 --> 00:24:59,330
you'll get protection<font color="#E5E5E5"> in Safari and edge</font>

575
00:24:55,580 --> 00:25:01,250
as well so<font color="#CCCCCC"> again these</font><font color="#E5E5E5"> are the five</font>

576
00:24:59,330 --> 00:25:03,290
<font color="#E5E5E5">steps as I mentioned they tend not to</font>

577
00:25:01,250 --> 00:25:04,970
take very long<font color="#CCCCCC"> I've done them on</font><font color="#E5E5E5"> a bunch</font>

578
00:25:03,290 --> 00:25:08,300
<font color="#E5E5E5">of internal tools and I've also done</font>

579
00:25:04,970 --> 00:25:10,010
them on<font color="#CCCCCC"> insta paper</font><font color="#E5E5E5"> if you're going from</font>

580
00:25:08,300 --> 00:25:11,930
a site with an existing content security

581
00:25:10,010 --> 00:25:14,629
policy which is what I<font color="#E5E5E5"> did for Pinterest</font>

582
00:25:11,930 --> 00:25:16,700
<font color="#CCCCCC">they tend to be even</font><font color="#E5E5E5"> simpler because</font>

583
00:25:14,630 --> 00:25:19,760
step one is generally already done for

584
00:25:16,700 --> 00:25:21,920
you<font color="#E5E5E5"> so it's just the adding the</font><font color="#CCCCCC"> nonce</font>

585
00:25:19,760 --> 00:25:25,760
generation and then rolling out the

586
00:25:21,920 --> 00:25:27,590
header I'll try<font color="#E5E5E5"> to post these</font><font color="#CCCCCC"> slides</font>

587
00:25:25,760 --> 00:25:29,080
somewhere there's a bunch of links<font color="#CCCCCC"> that</font>

588
00:25:27,590 --> 00:25:31,970
are super useful

589
00:25:29,080 --> 00:25:34,879
<font color="#E5E5E5">google has great resources on deploying</font>

590
00:25:31,970 --> 00:25:37,730
CSP so I recommend leveraging<font color="#E5E5E5"> them CSP</font>

591
00:25:34,880 --> 00:25:40,010
that with<font color="#E5E5E5"> Google</font><font color="#CCCCCC"> com will actually go</font>

592
00:25:37,730 --> 00:25:42,620
<font color="#CCCCCC">through the steps that they recommend</font>

593
00:25:40,010 --> 00:25:44,930
going<font color="#CCCCCC"> through</font><font color="#E5E5E5"> they have a github page</font>

594
00:25:42,620 --> 00:25:47,270
with those<font color="#CCCCCC"> security research pocs which</font>

595
00:25:44,930 --> 00:25:49,630
are bypasses district dynamic in common

596
00:25:47,270 --> 00:25:54,470
security libraries<font color="#E5E5E5"> so if you're using</font>

597
00:25:49,630 --> 00:25:57,380
<font color="#E5E5E5">ember</font><font color="#CCCCCC"> j/s or some random</font><font color="#E5E5E5"> other one</font>

598
00:25:54,470 --> 00:26:01,970
that's<font color="#E5E5E5"> not angular or react you can look</font>

599
00:25:57,380 --> 00:26:03,830
them up on<font color="#CCCCCC"> their</font><font color="#E5E5E5"> CSP mitigator this</font>

600
00:26:01,970 --> 00:26:05,180
won't let you test<font color="#E5E5E5"> nonce</font><font color="#CCCCCC"> is very well</font>

601
00:26:03,830 --> 00:26:07,010
but<font color="#E5E5E5"> if you're</font><font color="#CCCCCC"> constructing a whitelist</font>

602
00:26:05,180 --> 00:26:09,500
it's really useful because it lets you

603
00:26:07,010 --> 00:26:11,210
put<font color="#E5E5E5"> a CSP in your your browser and</font>

604
00:26:09,500 --> 00:26:13,850
extension and go through and<font color="#E5E5E5"> test</font>

605
00:26:11,210 --> 00:26:19,880
fittings<font color="#E5E5E5"> and then the link to those two</font>

606
00:26:13,850 --> 00:26:22,699
blog posts<font color="#E5E5E5"> github.com slash</font><font color="#CCCCCC"> nico</font><font color="#E5E5E5"> 3</font><font color="#CCCCCC"> 333</font>

607
00:26:19,880 --> 00:26:25,700
<font color="#E5E5E5">FR whoever that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> has an awesome list</font>

608
00:26:22,700 --> 00:26:29,060
of CSP links<font color="#CCCCCC"> in</font><font color="#E5E5E5"> related content they</font>

609
00:26:25,700 --> 00:26:31,790
also have a<font color="#E5E5E5"> section in there that</font><font color="#CCCCCC"> c CSP</font>

610
00:26:29,060 --> 00:26:35,840
WTF<font color="#E5E5E5"> which basically lists things that</font>

611
00:26:31,790 --> 00:26:37,820
you you might<font color="#CCCCCC"> not expect</font><font color="#E5E5E5"> it'll show up</font>

612
00:26:35,840 --> 00:26:39,980
in<font color="#E5E5E5"> your reports so you can go through</font>

613
00:26:37,820 --> 00:26:41,360
<font color="#CCCCCC">there and you</font><font color="#E5E5E5"> can see some some examples</font>

614
00:26:39,980 --> 00:26:45,950
of<font color="#E5E5E5"> things and then lastly there's</font><font color="#CCCCCC"> the</font>

615
00:26:41,360 --> 00:26:48,560
spec for<font color="#CCCCCC"> CSP it looks like we have about</font>

616
00:26:45,950 --> 00:26:50,900
<font color="#CCCCCC">four minutes left</font><font color="#E5E5E5"> so some time for</font>

617
00:26:48,560 --> 00:26:53,510
questions<font color="#CCCCCC"> thank you</font><font color="#E5E5E5"> all for staying</font>

618
00:26:50,900 --> 00:26:56,440
listening I<font color="#E5E5E5"> hope you do deploy CSP on</font>

619
00:26:53,510 --> 00:27:04,190
your<font color="#E5E5E5"> sites make the web more secure</font>

620
00:26:56,440 --> 00:27:04,190
[Applause]

621
00:27:22,990 --> 00:27:34,970
yeah so for instance<font color="#CCCCCC"> changed</font><font color="#E5E5E5"> and it is</font>

622
00:27:31,940 --> 00:27:36,980
<font color="#CCCCCC">actually a good</font><font color="#E5E5E5"> amount of work</font><font color="#CCCCCC"> to go</font>

623
00:27:34,970 --> 00:27:39,470
through<font color="#E5E5E5"> it tends to be very repetitive</font><font color="#CCCCCC"> I</font>

624
00:27:36,980 --> 00:27:41,390
don't have a tool for<font color="#E5E5E5"> it because it's</font>

625
00:27:39,470 --> 00:27:43,490
kind of<font color="#E5E5E5"> hard to automate in a templating</font>

626
00:27:41,390 --> 00:27:46,040
system<font color="#E5E5E5"> where you might you</font><font color="#CCCCCC"> might be</font>

627
00:27:43,490 --> 00:27:48,890
generating things in a<font color="#E5E5E5"> for loop</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you</font>

628
00:27:46,040 --> 00:27:52,460
can't just apply an ID to to your<font color="#E5E5E5"> script</font>

629
00:27:48,890 --> 00:27:56,300
tags or to your to<font color="#CCCCCC"> your elements to be</font>

630
00:27:52,460 --> 00:27:58,400
able<font color="#E5E5E5"> to find them in the page if someone</font>

631
00:27:56,300 --> 00:27:59,780
does<font color="#CCCCCC"> have a tool or builds a tool that's</font>

632
00:27:58,400 --> 00:28:05,030
awesome but it's probably<font color="#CCCCCC"> gonna be</font>

633
00:27:59,780 --> 00:28:09,560
template engine specific I<font color="#E5E5E5"> guess is so</font>

634
00:28:05,030 --> 00:28:12,290
yeah it is<font color="#E5E5E5"> kind of tough</font><font color="#CCCCCC"> but it tends</font><font color="#E5E5E5"> to</font>

635
00:28:09,560 --> 00:28:13,879
<font color="#E5E5E5">be</font><font color="#CCCCCC"> less</font><font color="#E5E5E5"> common than the</font><font color="#CCCCCC"> actual</font><font color="#E5E5E5"> script</font>

636
00:28:12,290 --> 00:28:16,370
tags<font color="#CCCCCC"> themselves or at least it I found</font>

637
00:28:13,880 --> 00:28:27,470
<font color="#E5E5E5">in my web app</font><font color="#CCCCCC"> stepped on</font><font color="#E5E5E5"> through but it</font>

638
00:28:16,370 --> 00:28:29,179
is a good<font color="#CCCCCC"> amount of work yeah</font><font color="#E5E5E5"> so we</font>

639
00:28:27,470 --> 00:28:32,270
<font color="#E5E5E5">actually so it's not masked this is</font>

640
00:28:29,180 --> 00:28:34,540
actually our report URL it's slash

641
00:28:32,270 --> 00:28:38,060
underscore slash underscore<font color="#E5E5E5"> CSP report</font>

642
00:28:34,540 --> 00:28:40,670
<font color="#CCCCCC">so what happens there</font><font color="#E5E5E5"> is it sends a JSON</font>

643
00:28:38,060 --> 00:28:42,620
object<font color="#CCCCCC"> whip</font><font color="#E5E5E5"> from the the browser that</font>

644
00:28:40,670 --> 00:28:45,770
<font color="#CCCCCC">basically has a full report</font><font color="#E5E5E5"> with all</font><font color="#CCCCCC"> the</font>

645
00:28:42,620 --> 00:28:49,250
<font color="#E5E5E5">details and what we do is we we log it</font>

646
00:28:45,770 --> 00:28:51,020
to s3<font color="#E5E5E5"> and then we have we have an e okay</font>

647
00:28:49,250 --> 00:28:57,440
start up in<font color="#E5E5E5"> front of it and we we search</font>

648
00:28:51,020 --> 00:28:58,940
it through that yes so it's a post

649
00:28:57,440 --> 00:29:01,280
request<font color="#CCCCCC"> too</font>

650
00:28:58,940 --> 00:29:03,230
so this is a relative<font color="#CCCCCC"> URL but you could</font>

651
00:29:01,280 --> 00:29:05,810
do it<font color="#CCCCCC"> on another</font><font color="#E5E5E5"> domain if you wanted so</font>

652
00:29:03,230 --> 00:29:07,820
it doesn't post<font color="#CCCCCC"> requests to</font><font color="#E5E5E5"> do Pinterest</font>

653
00:29:05,810 --> 00:29:09,220
<font color="#CCCCCC">comm slash underscore slash underscore</font>

654
00:29:07,820 --> 00:29:12,340
CSP report

655
00:29:09,220 --> 00:29:13,690
yep and then<font color="#E5E5E5"> you can you can record that</font>

656
00:29:12,340 --> 00:29:16,320
in whatever way<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> think is</font>

657
00:29:13,690 --> 00:29:16,320
suitable<font color="#E5E5E5"> for you</font>

658
00:29:19,620 --> 00:29:25,780
let's give it<font color="#E5E5E5"> hands</font><font color="#CCCCCC"> para speaker</font>

659
00:29:23,030 --> 00:29:25,780
[Applause]

