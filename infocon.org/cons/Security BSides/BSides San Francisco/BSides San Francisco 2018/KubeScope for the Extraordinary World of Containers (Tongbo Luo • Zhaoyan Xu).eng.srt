1
00:00:03,620 --> 00:00:06,740
[Music]

2
00:00:19,700 --> 00:00:25,880
<font color="#E5E5E5">okay hi everyone our session my name</font><font color="#CCCCCC"> is</font>

3
00:00:24,560 --> 00:00:28,549
<font color="#CCCCCC">Tom ball and this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> my colleague</font>

4
00:00:25,880 --> 00:00:31,160
<font color="#E5E5E5">Acharya we are security researchers at</font>

5
00:00:28,550 --> 00:00:34,550
<font color="#CCCCCC">the stock rocks</font><font color="#E5E5E5"> and for our company</font><font color="#CCCCCC"> we</font>

6
00:00:31,160 --> 00:00:36,470
we build the security tools to<font color="#CCCCCC"> protect</font>

7
00:00:34,550 --> 00:00:39,290
the container world and we deliver

8
00:00:36,470 --> 00:00:41,150
container<font color="#E5E5E5"> native a security profile that</font>

9
00:00:39,290 --> 00:00:43,519
<font color="#CCCCCC">prevented</font><font color="#E5E5E5"> stressed by reducing the</font>

10
00:00:41,150 --> 00:00:46,790
<font color="#CCCCCC">attacker surface and today definitely I</font>

11
00:00:43,520 --> 00:00:49,040
will<font color="#E5E5E5"> talk about container security so</font>

12
00:00:46,790 --> 00:00:52,280
it's called cool scope for the

13
00:00:49,040 --> 00:00:54,290
<font color="#E5E5E5">extraordinary world of containers and in</font>

14
00:00:52,280 --> 00:00:56,030
this presentation I will<font color="#E5E5E5"> start with</font><font color="#CCCCCC"> some</font>

15
00:00:54,290 --> 00:00:59,150
introductions about the container

16
00:00:56,030 --> 00:01:01,729
security<font color="#CCCCCC"> octet readers</font><font color="#E5E5E5"> and also</font>

17
00:00:59,150 --> 00:01:03,500
especially<font color="#E5E5E5"> for the kubernetes and then</font>

18
00:01:01,729 --> 00:01:06,679
<font color="#E5E5E5">I'm trying to explain</font><font color="#CCCCCC"> the what is</font><font color="#E5E5E5"> the</font>

19
00:01:03,500 --> 00:01:09,229
current problem that is facing by the

20
00:01:06,680 --> 00:01:11,780
container world<font color="#E5E5E5"> and then is our solution</font>

21
00:01:09,229 --> 00:01:15,408
<font color="#E5E5E5">to solve this problem</font><font color="#CCCCCC"> and at the last</font>

22
00:01:11,780 --> 00:01:17,630
<font color="#CCCCCC">there will be a quick demo there so for</font>

23
00:01:15,409 --> 00:01:19,790
the<font color="#E5E5E5"> for the introduction I will</font><font color="#CCCCCC"> start</font>

24
00:01:17,630 --> 00:01:22,908
<font color="#E5E5E5">with two numbers here and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> which is</font>

25
00:01:19,790 --> 00:01:26,600
<font color="#E5E5E5">revealed in a reasonable way so it shows</font>

26
00:01:22,909 --> 00:01:29,960
that enterprises of all<font color="#CCCCCC"> sizes</font><font color="#E5E5E5"> are</font>

27
00:01:26,600 --> 00:01:31,479
<font color="#E5E5E5">increasingly using containers by 2020</font>

28
00:01:29,960 --> 00:01:34,579
<font color="#E5E5E5">more than half of the global</font>

29
00:01:31,479 --> 00:01:37,729
<font color="#CCCCCC">organizations will be</font><font color="#E5E5E5"> running continuous</font>

30
00:01:34,579 --> 00:01:40,729
application<font color="#CCCCCC"> in their production</font><font color="#E5E5E5"> and more</font>

31
00:01:37,729 --> 00:01:42,500
importantly the majority of them are you

32
00:01:40,729 --> 00:01:44,659
are deploying and managing their

33
00:01:42,500 --> 00:01:47,780
<font color="#CCCCCC">continual Iser production using</font>

34
00:01:44,659 --> 00:01:50,179
<font color="#E5E5E5">oxidation software and among all of the</font>

35
00:01:47,780 --> 00:01:52,609
oxidation<font color="#CCCCCC"> softwares communities</font>

36
00:01:50,179 --> 00:01:56,149
<font color="#E5E5E5">definitely the</font><font color="#CCCCCC"> dominated one which has</font>

37
00:01:52,609 --> 00:01:58,788
<font color="#E5E5E5">been adopted by</font><font color="#CCCCCC"> 71 percentage of all of</font>

38
00:01:56,149 --> 00:02:01,249
them and they<font color="#E5E5E5"> they can</font><font color="#CCCCCC"> be used</font><font color="#E5E5E5"> to</font>

39
00:01:58,789 --> 00:02:04,249
managing their container infrastructure

40
00:02:01,249 --> 00:02:06,079
so so the kubernetes<font color="#E5E5E5"> which as</font><font color="#CCCCCC"> a it's</font>

41
00:02:04,249 --> 00:02:09,728
just<font color="#CCCCCC"> the open source</font><font color="#E5E5E5"> the tools developed</font>

42
00:02:06,079 --> 00:02:14,120
<font color="#E5E5E5">by</font><font color="#CCCCCC"> google and</font><font color="#E5E5E5"> it provides us container</font>

43
00:02:09,729 --> 00:02:16,430
centric management<font color="#E5E5E5"> environment and it's</font>

44
00:02:14,120 --> 00:02:19,700
very portable<font color="#E5E5E5"> and a</font><font color="#CCCCCC"> flexible</font><font color="#E5E5E5"> to use I</font>

45
00:02:16,430 --> 00:02:21,620
think<font color="#E5E5E5"> most of people if you if you work</font>

46
00:02:19,700 --> 00:02:26,179
in the same area<font color="#CCCCCC"> you should be familiar</font>

47
00:02:21,620 --> 00:02:28,700
with with the kubernetes and however the

48
00:02:26,180 --> 00:02:31,430
problem<font color="#CCCCCC"> is</font><font color="#E5E5E5"> that when kubernetes and</font>

49
00:02:28,700 --> 00:02:34,260
those<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> traders</font><font color="#E5E5E5"> become the center</font>

50
00:02:31,430 --> 00:02:36,690
of of<font color="#E5E5E5"> the new universe</font>

51
00:02:34,260 --> 00:02:39,859
it's also<font color="#E5E5E5"> become the major target by</font>

52
00:02:36,690 --> 00:02:44,430
attackers<font color="#CCCCCC"> and here's</font><font color="#E5E5E5"> a figure here shows</font>

53
00:02:39,860 --> 00:02:47,970
why the security<font color="#E5E5E5"> of</font><font color="#CCCCCC"> octa traitors</font><font color="#E5E5E5"> become</font>

54
00:02:44,430 --> 00:02:51,860
so vital in this new environment in the

55
00:02:47,970 --> 00:02:54,690
<font color="#CCCCCC">most of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> time the attack</font><font color="#E5E5E5"> happened</font>

56
00:02:51,860 --> 00:02:57,330
<font color="#E5E5E5">from the from the pod where you are</font>

57
00:02:54,690 --> 00:03:01,140
<font color="#E5E5E5">running your micro services for example</font>

58
00:02:57,330 --> 00:03:03,780
if a tiger can take advantage of<font color="#E5E5E5"> command</font>

59
00:03:01,140 --> 00:03:06,299
injection vulnerabilities in your in

60
00:03:03,780 --> 00:03:09,090
<font color="#CCCCCC">your web application we can you</font><font color="#E5E5E5"> can</font>

61
00:03:06,300 --> 00:03:12,930
inject<font color="#E5E5E5"> up recoded in</font><font color="#CCCCCC"> your pod and I</font>

62
00:03:09,090 --> 00:03:15,960
secure those commander in your pod but

63
00:03:12,930 --> 00:03:18,870
at this<font color="#CCCCCC"> time the damage is limited</font>

64
00:03:15,960 --> 00:03:21,090
<font color="#E5E5E5">because the container sandbox which</font>

65
00:03:18,870 --> 00:03:25,380
isolated a compromised content in your

66
00:03:21,090 --> 00:03:27,690
pod<font color="#E5E5E5"> from the rest of your cloud and the</font>

67
00:03:25,380 --> 00:03:31,170
next move<font color="#CCCCCC"> of attackers should try to</font>

68
00:03:27,690 --> 00:03:33,690
break out<font color="#E5E5E5"> of this sandbox and basically</font>

69
00:03:31,170 --> 00:03:35,459
there are two<font color="#E5E5E5"> ways in front of them we</font>

70
00:03:33,690 --> 00:03:37,590
can either<font color="#CCCCCC"> compromised the underlying</font>

71
00:03:35,460 --> 00:03:40,890
operating<font color="#CCCCCC"> system or they can compromise</font>

72
00:03:37,590 --> 00:03:43,980
the<font color="#CCCCCC"> traitors here</font><font color="#E5E5E5"> that that is a two</font>

73
00:03:40,890 --> 00:03:46,470
major<font color="#E5E5E5"> target here</font><font color="#CCCCCC"> like let's</font><font color="#E5E5E5"> take</font><font color="#CCCCCC"> a look</font>

74
00:03:43,980 --> 00:03:50,040
at the first away so if they try to if

75
00:03:46,470 --> 00:03:52,890
we can<font color="#CCCCCC"> manage into is fraud a kernel one</font>

76
00:03:50,040 --> 00:03:55,829
<font color="#CCCCCC">ability we</font><font color="#E5E5E5"> can take over control the</font>

77
00:03:52,890 --> 00:03:57,510
whole the<font color="#CCCCCC"> host</font><font color="#E5E5E5"> so they can take away</font>

78
00:03:55,830 --> 00:04:00,390
<font color="#E5E5E5">what they can do whatever they</font><font color="#CCCCCC"> want like</font>

79
00:03:57,510 --> 00:04:03,630
<font color="#E5E5E5">compromise other containers</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> running</font>

80
00:04:00,390 --> 00:04:05,700
in the same host and we do need to -<font color="#E5E5E5"> we</font>

81
00:04:03,630 --> 00:04:08,519
do need<font color="#E5E5E5"> to worry about those those</font>

82
00:04:05,700 --> 00:04:10,350
<font color="#E5E5E5">things because the operating system</font>

83
00:04:08,519 --> 00:04:13,680
running in the cloud native environment

84
00:04:10,350 --> 00:04:16,980
has no big difference from the operating

85
00:04:13,680 --> 00:04:19,980
<font color="#CCCCCC">system</font><font color="#E5E5E5"> in our daily life and there's a</font>

86
00:04:16,980 --> 00:04:24,330
there there there are many tools<font color="#E5E5E5"> out</font>

87
00:04:19,980 --> 00:04:26,640
there can help<font color="#E5E5E5"> people to to protect and</font>

88
00:04:24,330 --> 00:04:29,099
a detector<font color="#E5E5E5"> those attack to the operating</font>

89
00:04:26,640 --> 00:04:31,860
system<font color="#CCCCCC"> people can easily deploy them and</font>

90
00:04:29,100 --> 00:04:33,930
<font color="#E5E5E5">the provided those attack so we are more</font>

91
00:04:31,860 --> 00:04:36,270
interesting on the second<font color="#E5E5E5"> of the second</font>

92
00:04:33,930 --> 00:04:39,930
<font color="#E5E5E5">way the attackers can compromise the</font>

93
00:04:36,270 --> 00:04:42,270
orchestrators here because<font color="#E5E5E5"> of the</font>

94
00:04:39,930 --> 00:04:44,940
<font color="#E5E5E5">readers like a kubernetes they provide a</font>

95
00:04:42,270 --> 00:04:46,248
<font color="#E5E5E5">reachable communication between the</font>

96
00:04:44,940 --> 00:04:47,919
border and<font color="#E5E5E5"> some</font>

97
00:04:46,249 --> 00:04:51,079
whole part<font color="#E5E5E5"> of the combination</font><font color="#CCCCCC"> a</font>

98
00:04:47,919 --> 00:04:53,779
kubernetes<font color="#E5E5E5"> call component and if</font>

99
00:04:51,079 --> 00:04:57,109
attacker can managing to compromise the

100
00:04:53,779 --> 00:05:00,109
orchestrator they can not only<font color="#E5E5E5"> control</font>

101
00:04:57,109 --> 00:05:03,919
the<font color="#CCCCCC"> powder continuous</font><font color="#E5E5E5"> running at the</font>

102
00:05:00,109 --> 00:05:06,229
same at the<font color="#CCCCCC"> same machine but also the</font>

103
00:05:03,919 --> 00:05:08,359
one said that<font color="#E5E5E5"> in the other machines run</font>

104
00:05:06,229 --> 00:05:11,209
deployed by<font color="#E5E5E5"> the same oxy traitor and</font>

105
00:05:08,359 --> 00:05:12,698
that is the<font color="#E5E5E5"> real reason</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> the security</font>

106
00:05:11,209 --> 00:05:15,739
of kubernetes

107
00:05:12,699 --> 00:05:17,839
<font color="#E5E5E5">security of those oximeters is so</font>

108
00:05:15,739 --> 00:05:20,448
important in this newly<font color="#E5E5E5"> emerged the</font>

109
00:05:17,839 --> 00:05:23,179
container<font color="#E5E5E5"> based environment and what</font>

110
00:05:20,449 --> 00:05:28,399
makes the things worse is that there's<font color="#E5E5E5"> a</font>

111
00:05:23,179 --> 00:05:31,159
no such a<font color="#E5E5E5"> - subsidiary protect</font><font color="#CCCCCC"> aquatic</font>

112
00:05:28,399 --> 00:05:34,149
<font color="#CCCCCC">critters</font><font color="#E5E5E5"> and another reason</font><font color="#CCCCCC"> why we</font>

113
00:05:31,159 --> 00:05:38,629
<font color="#E5E5E5">contacted our our research and try to</font>

114
00:05:34,149 --> 00:05:40,729
solve this<font color="#CCCCCC"> problem so we basically we</font>

115
00:05:38,629 --> 00:05:43,429
<font color="#CCCCCC">implement we design</font><font color="#E5E5E5"> an incremental</font><font color="#CCCCCC"> cook</font>

116
00:05:40,729 --> 00:05:45,199
scope and we leverage<font color="#CCCCCC"> a</font><font color="#E5E5E5"> combination</font><font color="#CCCCCC"> of</font>

117
00:05:43,429 --> 00:05:49,279
<font color="#CCCCCC">machine learning and the route based</font>

118
00:05:45,199 --> 00:05:52,549
detection techniques and basically we we

119
00:05:49,279 --> 00:05:54,739
do a we do a profile<font color="#CCCCCC"> that not be based</font>

120
00:05:52,549 --> 00:05:57,979
on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> normal access to the kubernetes</font>

121
00:05:54,739 --> 00:06:00,679
<font color="#E5E5E5">and then for each new access to the</font>

122
00:05:57,979 --> 00:06:02,599
community we<font color="#CCCCCC"> would try to use our</font>

123
00:06:00,679 --> 00:06:06,349
machine<font color="#CCCCCC"> learning model and a roo based</font>

124
00:06:02,599 --> 00:06:09,799
model to detect the abnormal access and

125
00:06:06,349 --> 00:06:13,039
for<font color="#E5E5E5"> our prototype we only protect the</font>

126
00:06:09,799 --> 00:06:17,138
<font color="#CCCCCC">api server which is a very centralized</font>

127
00:06:13,039 --> 00:06:20,239
place in the community<font color="#CCCCCC"> architecture</font><font color="#E5E5E5"> and</font>

128
00:06:17,139 --> 00:06:22,729
<font color="#CCCCCC">syncs</font><font color="#E5E5E5"> all of the interaction to the</font><font color="#CCCCCC"> AP</font>

129
00:06:20,239 --> 00:06:25,188
to the<font color="#CCCCCC"> api server is</font><font color="#E5E5E5"> using the restful</font>

130
00:06:22,729 --> 00:06:30,079
api it's basically the<font color="#CCCCCC"> HTTP wasted</font>

131
00:06:25,189 --> 00:06:34,189
traffic and we the access here we mean

132
00:06:30,079 --> 00:06:36,860
is<font color="#CCCCCC"> the network traffic</font><font color="#E5E5E5"> so here's the</font>

133
00:06:34,189 --> 00:06:39,079
figure to show<font color="#CCCCCC"> that aware</font><font color="#E5E5E5"> our cooks</font>

134
00:06:36,860 --> 00:06:42,729
cover component located in the whole

135
00:06:39,079 --> 00:06:46,129
<font color="#E5E5E5">communities community architecture and</font>

136
00:06:42,729 --> 00:06:48,789
<font color="#E5E5E5">basically it on located between the API</font>

137
00:06:46,129 --> 00:06:52,309
server and the rest of the<font color="#CCCCCC"> Kubik</font>

138
00:06:48,789 --> 00:06:52,878
system so<font color="#E5E5E5"> I read</font><font color="#CCCCCC"> traffic to the API</font>

139
00:06:52,309 --> 00:06:54,979
server

140
00:06:52,879 --> 00:06:59,119
mustard goes through<font color="#E5E5E5"> our cooks cover</font>

141
00:06:54,979 --> 00:07:00,250
component<font color="#E5E5E5"> other is the</font><font color="#CCCCCC"> ictv or as</font><font color="#E5E5E5"> vs so</font>

142
00:06:59,119 --> 00:07:03,590
paid<font color="#CCCCCC"> basically</font>

143
00:07:00,250 --> 00:07:07,909
our<font color="#E5E5E5"> cooks</font><font color="#CCCCCC"> Capcom hundred will</font><font color="#E5E5E5"> inspect</font>

144
00:07:03,590 --> 00:07:10,310
all of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> all of the traffic to the API</font>

145
00:07:07,909 --> 00:07:14,090
server and I try<font color="#E5E5E5"> to mark and the</font>

146
00:07:10,310 --> 00:07:15,340
<font color="#E5E5E5">abnormal ones so if we double</font><font color="#CCCCCC"> click it</font>

147
00:07:14,090 --> 00:07:18,979
you need to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> course cover</font>

148
00:07:15,340 --> 00:07:21,198
architecture<font color="#E5E5E5"> it highly containerized so</font>

149
00:07:18,979 --> 00:07:25,490
each<font color="#E5E5E5"> component here is a container</font>

150
00:07:21,199 --> 00:07:28,009
<font color="#CCCCCC">running in the</font><font color="#E5E5E5"> system so we</font><font color="#CCCCCC"> have a mole</font>

151
00:07:25,490 --> 00:07:30,789
<font color="#E5E5E5">entire container which will intercept</font>

152
00:07:28,009 --> 00:07:36,469
<font color="#E5E5E5">all other traffic to the API server and</font>

153
00:07:30,789 --> 00:07:39,830
and pass the<font color="#E5E5E5"> request and they put it</font>

154
00:07:36,469 --> 00:07:42,349
into a queue and later on the the

155
00:07:39,830 --> 00:07:45,198
machine learning module<font color="#E5E5E5"> here the coop</font>

156
00:07:42,349 --> 00:07:47,330
inspector<font color="#E5E5E5"> will will get</font><font color="#CCCCCC"> a feeder from</font>

157
00:07:45,199 --> 00:07:50,360
the queue and I try to<font color="#CCCCCC"> identify the</font>

158
00:07:47,330 --> 00:07:53,508
other<font color="#E5E5E5"> normal ones so they were all this</font>

159
00:07:50,360 --> 00:07:55,750
module will also<font color="#E5E5E5"> put the result</font><font color="#CCCCCC"> back to</font>

160
00:07:53,509 --> 00:07:59,479
<font color="#CCCCCC">the queue and</font><font color="#E5E5E5"> it also to a backpack</font><font color="#CCCCCC"> and</font>

161
00:07:55,750 --> 00:08:02,779
to the<font color="#CCCCCC"> backend storage</font><font color="#E5E5E5"> and we also</font>

162
00:07:59,479 --> 00:08:05,599
provide a user interface<font color="#E5E5E5"> for</font><font color="#CCCCCC"> users to</font>

163
00:08:02,779 --> 00:08:08,360
monitor what it actually<font color="#E5E5E5"> happened in</font>

164
00:08:05,599 --> 00:08:10,159
their<font color="#CCCCCC"> community</font><font color="#E5E5E5"> system who is intercept</font>

165
00:08:08,360 --> 00:08:12,590
who is<font color="#E5E5E5"> interacting with the API server</font>

166
00:08:10,159 --> 00:08:14,930
and what<font color="#E5E5E5"> that indicates traffic is and</font>

167
00:08:12,590 --> 00:08:19,429
<font color="#E5E5E5">also they can clearly see where is the</font>

168
00:08:14,930 --> 00:08:21,560
of a normal access here and an<font color="#CCCCCC"> axis is</font>

169
00:08:19,430 --> 00:08:23,960
the<font color="#CCCCCC"> cooling inspector</font><font color="#E5E5E5"> a cooling</font>

170
00:08:21,560 --> 00:08:26,419
inspector module my colleague<font color="#CCCCCC"> Acharya we</font>

171
00:08:23,960 --> 00:08:31,698
will take over and explain<font color="#E5E5E5"> in more</font>

172
00:08:26,419 --> 00:08:33,860
detail<font color="#E5E5E5"> about it coop inspector it's</font>

173
00:08:31,699 --> 00:08:36,769
actually a components which<font color="#CCCCCC"> exist</font><font color="#E5E5E5"> the</font>

174
00:08:33,860 --> 00:08:38,839
inside of the coop scope<font color="#E5E5E5"> and this this</font>

175
00:08:36,769 --> 00:08:42,049
component is merely take care of for

176
00:08:38,839 --> 00:08:44,570
detecting logic of the<font color="#CCCCCC"> Cooper scope so</font>

177
00:08:42,049 --> 00:08:47,479
the import of<font color="#CCCCCC"> the Cooper inspector is</font>

178
00:08:44,570 --> 00:08:48,529
<font color="#E5E5E5">the decrypted in</font><font color="#CCCCCC"> the normal HTTP request</font>

179
00:08:47,480 --> 00:08:50,839
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the clients</font>

180
00:08:48,529 --> 00:08:52,430
so the<font color="#CCCCCC"> normal here is a basically</font>

181
00:08:50,839 --> 00:08:54,440
<font color="#CCCCCC">simplify</font><font color="#E5E5E5"> that the</font>

182
00:08:52,430 --> 00:08:56,630
<font color="#CCCCCC">Kouba inspectors measure</font><font color="#E5E5E5"> is a profile</font>

183
00:08:54,440 --> 00:08:58,940
page semesters which<font color="#E5E5E5"> basically means is</font>

184
00:08:56,630 --> 00:09:02,240
to profile<font color="#E5E5E5"> all the normal behaviors of</font>

185
00:08:58,940 --> 00:09:04,850
API servers so the normal<font color="#CCCCCC"> behavior here</font>

186
00:09:02,240 --> 00:09:07,190
we refer is the normal assess from the

187
00:09:04,850 --> 00:09:09,949
each different parts to<font color="#CCCCCC"> the API servers</font>

188
00:09:07,190 --> 00:09:12,259
and the output of the coop inspector

189
00:09:09,949 --> 00:09:13,998
will be<font color="#CCCCCC"> the models that</font><font color="#E5E5E5"> the models</font>

190
00:09:12,259 --> 00:09:17,149
including post machine learning models

191
00:09:13,999 --> 00:09:21,739
and also<font color="#CCCCCC"> the rule based models</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> do</font>

192
00:09:17,149 --> 00:09:24,259
profile the normal kubernetes<font color="#CCCCCC"> @ss</font><font color="#E5E5E5"> so</font>

193
00:09:21,739 --> 00:09:26,119
here a<font color="#CCCCCC"> list example</font><font color="#E5E5E5"> here is how we</font>

194
00:09:24,259 --> 00:09:29,899
<font color="#CCCCCC">actually extract</font><font color="#E5E5E5"> the information from</font>

195
00:09:26,119 --> 00:09:32,569
<font color="#E5E5E5">the normal kubernetes request to the API</font>

196
00:09:29,899 --> 00:09:34,879
servers so here we extracted a<font color="#E5E5E5"> three</font>

197
00:09:32,569 --> 00:09:37,399
part of three parts actually<font color="#CCCCCC"> four parts</font>

198
00:09:34,879 --> 00:09:40,249
<font color="#E5E5E5">of the informations first it's the URL</font>

199
00:09:37,399 --> 00:09:43,279
and<font color="#CCCCCC"> its</font><font color="#E5E5E5"> parameters the second is the URL</font>

200
00:09:40,249 --> 00:09:45,829
<font color="#E5E5E5">it's self and the third part is HTTP</font>

201
00:09:43,279 --> 00:09:48,350
headers<font color="#E5E5E5"> the HTV headers including all</font>

202
00:09:45,829 --> 00:09:51,169
the keys of the HTTP headers and also

203
00:09:48,350 --> 00:09:53,329
it's a corresponding values and the last

204
00:09:51,169 --> 00:09:55,339
part<font color="#E5E5E5"> is a request to parties</font><font color="#CCCCCC"> for all</font>

205
00:09:53,329 --> 00:09:57,769
experience we<font color="#CCCCCC"> see a lot of requests</font>

206
00:09:55,339 --> 00:09:59,929
party including JSON objects which is

207
00:09:57,769 --> 00:10:02,839
<font color="#CCCCCC">issued from the</font><font color="#E5E5E5"> party to</font><font color="#CCCCCC"> the API server</font>

208
00:09:59,929 --> 00:10:05,149
<font color="#E5E5E5">to ask you the new functionalities so</font>

209
00:10:02,839 --> 00:10:08,869
this is an example<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to show how</font>

210
00:10:05,149 --> 00:10:10,369
<font color="#CCCCCC">extract informations so after we extract</font>

211
00:10:08,869 --> 00:10:13,189
all these kind of informations<font color="#E5E5E5"> we'll</font>

212
00:10:10,369 --> 00:10:16,160
analyze each request<font color="#E5E5E5"> in three levels</font>

213
00:10:13,189 --> 00:10:18,858
first<font color="#E5E5E5"> is the URL and its parameters</font><font color="#CCCCCC"> the</font>

214
00:10:16,160 --> 00:10:21,980
second is HTTP headers and the third is

215
00:10:18,859 --> 00:10:23,869
the<font color="#E5E5E5"> payload</font><font color="#CCCCCC"> measures</font><font color="#E5E5E5"> we want to propose</font>

216
00:10:21,980 --> 00:10:25,879
different<font color="#E5E5E5"> kind of models for each</font>

217
00:10:23,869 --> 00:10:28,850
different<font color="#CCCCCC"> API course</font><font color="#E5E5E5"> which basically</font>

218
00:10:25,879 --> 00:10:31,759
means for example<font color="#CCCCCC"> if kubernetes offers</font>

219
00:10:28,850 --> 00:10:33,919
different<font color="#E5E5E5"> kind of service</font><font color="#CCCCCC"> API it's a</font>

220
00:10:31,759 --> 00:10:36,289
different kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> service for</font><font color="#CCCCCC"> the API</font>

221
00:10:33,919 --> 00:10:39,589
course<font color="#E5E5E5"> we'll build a one model for one</font>

222
00:10:36,289 --> 00:10:42,289
<font color="#E5E5E5">API course so for models we actually</font>

223
00:10:39,589 --> 00:10:44,419
build the<font color="#E5E5E5"> three types of</font><font color="#CCCCCC"> the models the</font>

224
00:10:42,289 --> 00:10:46,850
<font color="#E5E5E5">first type</font><font color="#CCCCCC"> of the models we call it</font>

225
00:10:44,419 --> 00:10:50,029
unknown<font color="#E5E5E5"> access models that's including</font>

226
00:10:46,850 --> 00:10:53,359
something<font color="#E5E5E5"> like an unknown URL and no</font>

227
00:10:50,029 --> 00:10:55,879
<font color="#E5E5E5">parameters for URLs</font><font color="#CCCCCC"> and no user agents</font>

228
00:10:53,359 --> 00:10:58,069
for the HTTP headers and<font color="#E5E5E5"> also unknown</font>

229
00:10:55,879 --> 00:11:01,339
content type<font color="#E5E5E5"> so we list the some</font>

230
00:10:58,069 --> 00:11:04,549
explanation here the basic logic is if

231
00:11:01,339 --> 00:11:06,980
we find any kind<font color="#E5E5E5"> of a URL or parameters</font>

232
00:11:04,549 --> 00:11:11,119
which is<font color="#E5E5E5"> not been seen</font><font color="#CCCCCC"> before we</font><font color="#E5E5E5"> think</font>

233
00:11:06,980 --> 00:11:13,639
it's a possible of a normal assess the

234
00:11:11,119 --> 00:11:16,369
second type of<font color="#E5E5E5"> the model we call the</font>

235
00:11:13,639 --> 00:11:18,979
invalid SS models so in value basically

236
00:11:16,369 --> 00:11:22,069
means the<font color="#E5E5E5"> contents of the request may</font>

237
00:11:18,979 --> 00:11:23,419
contain some abnormal on possible

238
00:11:22,069 --> 00:11:25,579
malicious<font color="#CCCCCC"> payloads</font>

239
00:11:23,419 --> 00:11:27,740
so here we<font color="#E5E5E5"> list the</font>

240
00:11:25,580 --> 00:11:30,350
the<font color="#E5E5E5"> parameters in validating the cookie</font>

241
00:11:27,740 --> 00:11:32,120
values and<font color="#E5E5E5"> also evaluate the payloads we</font>

242
00:11:30,350 --> 00:11:34,940
were detect whether they have some like

243
00:11:32,120 --> 00:11:37,400
a share code on malicious file<font color="#CCCCCC"> or</font>

244
00:11:34,940 --> 00:11:41,090
malicious script<font color="#E5E5E5"> inside of these kind of</font>

245
00:11:37,400 --> 00:11:42,680
things<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> the last part the</font><font color="#CCCCCC"> last</font>

246
00:11:41,090 --> 00:11:45,200
part is based on the<font color="#E5E5E5"> machine learning</font>

247
00:11:42,680 --> 00:11:47,569
<font color="#CCCCCC">it's called we called</font><font color="#E5E5E5"> up anonymous</font><font color="#CCCCCC"> S</font>

248
00:11:45,200 --> 00:11:50,090
models so here we at least<font color="#E5E5E5"> the two</font>

249
00:11:47,570 --> 00:11:53,600
examples<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> the statistical models</font>

250
00:11:50,090 --> 00:11:56,510
which we were profile<font color="#E5E5E5"> order like a</font>

251
00:11:53,600 --> 00:12:00,080
normal packet<font color="#CCCCCC"> delenn's</font><font color="#E5E5E5"> parameter values</font>

252
00:11:56,510 --> 00:12:02,330
lens<font color="#E5E5E5"> and cookie values lens and also the</font>

253
00:12:00,080 --> 00:12:04,970
<font color="#E5E5E5">number of</font><font color="#CCCCCC"> parameters</font><font color="#E5E5E5"> so if we find any</font>

254
00:12:02,330 --> 00:12:08,680
<font color="#E5E5E5">kind of a</font><font color="#CCCCCC"> pecan the requests that have</font>

255
00:12:04,970 --> 00:12:11,870
abnormal<font color="#E5E5E5"> behaviors like that they have a</font>

256
00:12:08,680 --> 00:12:14,989
<font color="#E5E5E5">super long packet and also like the</font>

257
00:12:11,870 --> 00:12:16,700
<font color="#CCCCCC">value is a super not we were</font><font color="#E5E5E5"> abnormal</font>

258
00:12:14,990 --> 00:12:22,010
statistical model were actually trigger

259
00:12:16,700 --> 00:12:24,290
and fire up<font color="#CCCCCC"> anomaly signals</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that the</font>

260
00:12:22,010 --> 00:12:26,720
next part is<font color="#CCCCCC"> assess frequency models</font>

261
00:12:24,290 --> 00:12:29,480
that<font color="#E5E5E5"> actually we were recorded the</font>

262
00:12:26,720 --> 00:12:32,090
normal frequency of the incoming<font color="#E5E5E5"> packets</font>

263
00:12:29,480 --> 00:12:34,100
<font color="#E5E5E5">so if any kind of four packets coming up</font>

264
00:12:32,090 --> 00:12:38,750
<font color="#E5E5E5">normal</font><font color="#CCCCCC"> frequency we were also</font><font color="#E5E5E5"> trigger</font>

265
00:12:34,100 --> 00:12:41,570
alert so here we<font color="#E5E5E5"> list</font><font color="#CCCCCC"> some one</font><font color="#E5E5E5"> like the</font>

266
00:12:38,750 --> 00:12:43,520
rules here to illustrate<font color="#E5E5E5"> how we</font><font color="#CCCCCC"> actually</font>

267
00:12:41,570 --> 00:12:46,220
determine<font color="#E5E5E5"> whether this request that</font><font color="#CCCCCC"> we</font>

268
00:12:43,520 --> 00:12:48,530
the API<font color="#E5E5E5"> servers is up a normal</font><font color="#CCCCCC"> or not in</font>

269
00:12:46,220 --> 00:12:50,960
the following demo so we were we were

270
00:12:48,530 --> 00:12:56,390
demo some like reasons listed here<font color="#E5E5E5"> in</font>

271
00:12:50,960 --> 00:12:59,240
the product in the<font color="#CCCCCC"> body letters</font><font color="#E5E5E5"> and here</font>

272
00:12:56,390 --> 00:13:01,640
<font color="#E5E5E5">is</font><font color="#CCCCCC"> information detailed illustration of</font>

273
00:12:59,240 --> 00:13:03,530
how we attack or whether<font color="#E5E5E5"> is of a normal</font>

274
00:13:01,640 --> 00:13:07,130
<font color="#CCCCCC">things for a non</font><font color="#E5E5E5"> ho if it's a URL</font>

275
00:13:03,530 --> 00:13:10,010
<font color="#E5E5E5">parameters which at whether the URLs</font>

276
00:13:07,130 --> 00:13:12,200
<font color="#E5E5E5">keys is no</font><font color="#CCCCCC"> or not whether the value it's</font>

277
00:13:10,010 --> 00:13:15,530
a valid<font color="#CCCCCC"> title for lamp or it should be</font><font color="#E5E5E5"> a</font>

278
00:13:12,200 --> 00:13:17,080
string into<font color="#CCCCCC"> our IP addresses and also we</font>

279
00:13:15,530 --> 00:13:20,150
were seeing whether this<font color="#CCCCCC"> value is</font><font color="#E5E5E5"> so</font>

280
00:13:17,080 --> 00:13:23,480
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> true or not</font><font color="#E5E5E5"> whether they</font><font color="#CCCCCC"> have some</font>

281
00:13:20,150 --> 00:13:26,120
possible<font color="#E5E5E5"> CQ injection or not exist in</font>

282
00:13:23,480 --> 00:13:28,400
<font color="#E5E5E5">these parameters and</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> similar scene</font>

283
00:13:26,120 --> 00:13:30,440
<font color="#E5E5E5">so we were to</font><font color="#CCCCCC"> fold a request party</font><font color="#E5E5E5"> to</font>

284
00:13:28,400 --> 00:13:33,110
see whether<font color="#E5E5E5"> this request party is open</font>

285
00:13:30,440 --> 00:13:35,690
or not<font color="#E5E5E5"> whether they have some known keys</font>

286
00:13:33,110 --> 00:13:37,760
<font color="#CCCCCC">or values</font><font color="#E5E5E5"> and whether they contain some</font>

287
00:13:35,690 --> 00:13:38,990
shell code and also whether they have

288
00:13:37,760 --> 00:13:43,100
some malicious file

289
00:13:38,990 --> 00:13:46,580
including in the request or<font color="#CCCCCC"> not so</font><font color="#E5E5E5"> next</font>

290
00:13:43,100 --> 00:13:58,250
<font color="#CCCCCC">combo will show all you guys some</font><font color="#E5E5E5"> demos</font>

291
00:13:46,580 --> 00:14:01,790
<font color="#CCCCCC">we have present here okay so so Joey and</font>

292
00:13:58,250 --> 00:14:06,529
<font color="#E5E5E5">just discussed several reasons we</font><font color="#CCCCCC"> made</font>

293
00:14:01,790 --> 00:14:08,959
<font color="#CCCCCC">detector the</font><font color="#E5E5E5"> abnormal request and</font><font color="#CCCCCC"> so</font>

294
00:14:06,529 --> 00:14:11,600
<font color="#E5E5E5">there will be several demos the first</font>

295
00:14:08,959 --> 00:14:15,319
<font color="#E5E5E5">demo is</font><font color="#CCCCCC"> to detect the compromise the</font>

296
00:14:11,600 --> 00:14:18,529
secret<font color="#CCCCCC"> unipod and so the scenario</font><font color="#E5E5E5"> is</font>

297
00:14:15,320 --> 00:14:22,310
<font color="#CCCCCC">that say you have a</font><font color="#E5E5E5"> pod running your</font>

298
00:14:18,529 --> 00:14:24,770
kubernetes and by default the community

299
00:14:22,310 --> 00:14:27,109
communities will mount the<font color="#CCCCCC"> server</font>

300
00:14:24,770 --> 00:14:30,410
<font color="#E5E5E5">service account a secret to your to your</font>

301
00:14:27,110 --> 00:14:33,740
pod<font color="#E5E5E5"> if we get a compromised that the</font>

302
00:14:30,410 --> 00:14:36,860
attacker may trying to leverage you this

303
00:14:33,740 --> 00:14:39,500
<font color="#E5E5E5">will try to steal these tokens from your</font>

304
00:14:36,860 --> 00:14:42,740
pod and<font color="#E5E5E5"> use this token to access your</font>

305
00:14:39,500 --> 00:14:47,810
API server<font color="#E5E5E5"> and achieve a further damage</font>

306
00:14:42,740 --> 00:14:52,480
and and because our<font color="#CCCCCC"> cool scope we were</font>

307
00:14:47,810 --> 00:14:52,479
located<font color="#CCCCCC"> in front of</font><font color="#E5E5E5"> the API server and</font>

308
00:14:52,630 --> 00:15:01,910
so it will intercept<font color="#E5E5E5"> the such a request</font>

309
00:14:56,920 --> 00:15:04,490
from the generated by the attacker<font color="#E5E5E5"> and</font>

310
00:15:01,910 --> 00:15:09,980
<font color="#CCCCCC">the things this pod itself</font>

311
00:15:04,490 --> 00:15:12,709
it<font color="#E5E5E5"> rarely</font><font color="#CCCCCC"> make such a such a</font><font color="#E5E5E5"> request to</font>

312
00:15:09,980 --> 00:15:17,270
the<font color="#CCCCCC"> API server we will</font><font color="#E5E5E5"> identify this as</font>

313
00:15:12,709 --> 00:15:22,489
a malicious one so so here because yeah

314
00:15:17,270 --> 00:15:25,310
<font color="#CCCCCC">so here is</font><font color="#E5E5E5"> the video to</font><font color="#CCCCCC"> show</font><font color="#E5E5E5"> so our</font><font color="#CCCCCC"> tag</font>

315
00:15:22,490 --> 00:15:29,360
<font color="#CCCCCC">with</font><font color="#E5E5E5"> launcher communities you know in</font>

316
00:15:25,310 --> 00:15:32,599
the local and I see you you can<font color="#E5E5E5"> see</font>

317
00:15:29,360 --> 00:15:40,000
there there are some<font color="#E5E5E5"> traffic already</font>

318
00:15:32,600 --> 00:15:40,000
been intercepted and and I will try to

319
00:15:40,480 --> 00:15:48,829
try<font color="#E5E5E5"> to launch it to</font><font color="#CCCCCC"> launch</font><font color="#E5E5E5"> the</font>

320
00:15:44,950 --> 00:15:51,839
application which is<font color="#E5E5E5"> stéphanie of</font><font color="#CCCCCC"> 101 is</font>

321
00:15:48,829 --> 00:15:55,769
a while

322
00:15:51,839 --> 00:16:01,470
it's a web application<font color="#CCCCCC"> okay it's being</font>

323
00:15:55,769 --> 00:16:04,439
<font color="#E5E5E5">being launched and also the service</font>

324
00:16:01,470 --> 00:16:08,670
account token is automatically<font color="#CCCCCC"> mounted</font>

325
00:16:04,439 --> 00:16:12,719
<font color="#CCCCCC">it to</font><font color="#E5E5E5"> that pod and here is the dummy</font>

326
00:16:08,670 --> 00:16:16,949
I<font color="#E5E5E5"> mean the one</font><font color="#CCCCCC"> about page and</font><font color="#E5E5E5"> from these</font>

327
00:16:12,720 --> 00:16:19,649
figures<font color="#CCCCCC"> here's this</font><font color="#E5E5E5"> and whatever you</font>

328
00:16:16,949 --> 00:16:24,599
poster from this form will get executed

329
00:16:19,649 --> 00:16:28,499
so so I<font color="#CCCCCC"> put a several code here at the</font>

330
00:16:24,600 --> 00:16:30,839
idea<font color="#CCCCCC"> Serta</font><font color="#E5E5E5"> yet</font><font color="#CCCCCC"> so added this this</font><font color="#E5E5E5"> input</font>

331
00:16:28,499 --> 00:16:34,069
field is basically<font color="#CCCCCC"> it just still the</font>

332
00:16:30,839 --> 00:16:37,470
<font color="#CCCCCC">service</font><font color="#E5E5E5"> token in your pod and trying to</font>

333
00:16:34,069 --> 00:16:43,170
trying to<font color="#E5E5E5"> send</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> requester using using</font>

334
00:16:37,470 --> 00:16:46,139
this toe-to-toe key<font color="#E5E5E5"> so so see see the</font>

335
00:16:43,170 --> 00:16:50,300
the requester<font color="#E5E5E5"> had has been</font><font color="#CCCCCC"> successfully</font>

336
00:16:46,139 --> 00:16:55,730
<font color="#CCCCCC">successfully</font><font color="#E5E5E5"> be launched and we we get</font>

337
00:16:50,300 --> 00:17:04,970
detect one of the abnormal requests and

338
00:16:55,730 --> 00:17:08,970
it so and we list the requester here so

339
00:17:04,970 --> 00:17:11,850
so here so here is the<font color="#CCCCCC"> route so which</font><font color="#E5E5E5"> is</font>

340
00:17:08,970 --> 00:17:13,890
a if we<font color="#E5E5E5"> double click into this of a</font>

341
00:17:11,849 --> 00:17:17,599
normal request<font color="#CCCCCC"> it's generated by the</font>

342
00:17:13,890 --> 00:17:20,539
attacker<font color="#E5E5E5"> and trying to use the stolen</font>

343
00:17:17,599 --> 00:17:25,829
<font color="#CCCCCC">token to</font><font color="#E5E5E5"> access an API server and</font>

344
00:17:20,539 --> 00:17:30,030
because it used<font color="#E5E5E5"> valid the wily the body</font>

345
00:17:25,829 --> 00:17:34,710
the talk to<font color="#E5E5E5"> token and but but it</font>

346
00:17:30,030 --> 00:17:37,950
shouldn't be<font color="#E5E5E5"> used by by this</font><font color="#CCCCCC"> pod and</font>

347
00:17:34,710 --> 00:17:41,909
then we just mark this as a normal<font color="#CCCCCC"> one</font>

348
00:17:37,950 --> 00:17:44,940
and the the second demo is quite simple

349
00:17:41,909 --> 00:17:47,250
it's just<font color="#CCCCCC"> the device attack</font><font color="#E5E5E5"> so the</font>

350
00:17:44,940 --> 00:17:51,480
scenario is like<font color="#E5E5E5"> the attacker may</font>

351
00:17:47,250 --> 00:17:54,419
generate a burst of a request to<font color="#CCCCCC"> the API</font>

352
00:17:51,480 --> 00:17:56,789
server because because the<font color="#E5E5E5"> API server</font>

353
00:17:54,419 --> 00:18:00,450
use the right<font color="#E5E5E5"> restful api for for each</font>

354
00:17:56,789 --> 00:18:04,110
request<font color="#CCCCCC"> it might just process processes</font>

355
00:18:00,450 --> 00:18:05,560
processes<font color="#CCCCCC"> money terms and not the</font>

356
00:18:04,110 --> 00:18:09,639
<font color="#CCCCCC">requests them may be lost</font>

357
00:18:05,560 --> 00:18:15,730
from the<font color="#E5E5E5"> pod or formula</font><font color="#CCCCCC"> Tiger</font><font color="#E5E5E5"> attacker</font>

358
00:18:09,640 --> 00:18:19,360
<font color="#E5E5E5">itself and and then our cook cook cook</font>

359
00:18:15,730 --> 00:18:21,940
<font color="#E5E5E5">stove component will get this</font><font color="#CCCCCC"> rate will</font>

360
00:18:19,360 --> 00:18:24,580
intercept<font color="#CCCCCC"> all those requests</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> one of</font>

361
00:18:21,940 --> 00:18:27,610
the feature we<font color="#E5E5E5"> extracted from the</font>

362
00:18:24,580 --> 00:18:31,240
request is the time it's a temp<font color="#CCCCCC"> use a</font>

363
00:18:27,610 --> 00:18:34,300
time step so<font color="#CCCCCC"> usually the communication</font>

364
00:18:31,240 --> 00:18:35,890
between the<font color="#CCCCCC"> compete between the worker</font>

365
00:18:34,300 --> 00:18:38,860
the<font color="#E5E5E5"> worker</font><font color="#CCCCCC"> Noda</font>

366
00:18:35,890 --> 00:18:42,210
to the master node is quite<font color="#E5E5E5"> a</font><font color="#CCCCCC"> periodic</font>

367
00:18:38,860 --> 00:18:46,649
<font color="#CCCCCC">early</font><font color="#E5E5E5"> including the house</font><font color="#CCCCCC"> they check the</font>

368
00:18:42,210 --> 00:18:50,500
the left the the problem management

369
00:18:46,650 --> 00:18:52,810
<font color="#CCCCCC">request</font><font color="#E5E5E5"> is periodically</font><font color="#CCCCCC"> but such a such</font>

370
00:18:50,500 --> 00:18:56,140
a DDoS attack requester<font color="#E5E5E5"> they will be</font>

371
00:18:52,810 --> 00:19:00,070
just be generated in a<font color="#E5E5E5"> short period</font><font color="#CCCCCC"> time</font>

372
00:18:56,140 --> 00:19:02,800
<font color="#E5E5E5">it will trigger the oven</font><font color="#CCCCCC"> normal it will</font>

373
00:19:00,070 --> 00:19:05,620
be marked as a<font color="#CCCCCC"> normal</font><font color="#E5E5E5"> request to do to</font>

374
00:19:02,800 --> 00:19:10,720
the<font color="#CCCCCC"> temp due</font><font color="#E5E5E5"> to the time step feature</font>

375
00:19:05,620 --> 00:19:16,659
<font color="#E5E5E5">and the demo is also where is also very</font>

376
00:19:10,720 --> 00:19:20,440
simple look so I was just<font color="#E5E5E5"> using a Python</font>

377
00:19:16,660 --> 00:19:23,230
script<font color="#E5E5E5"> to generate a bunch of requests</font>

378
00:19:20,440 --> 00:19:27,720
in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> shorter period of time and the die</font>

379
00:19:23,230 --> 00:19:33,370
it will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> marked so like I just</font>

380
00:19:27,720 --> 00:19:37,630
<font color="#E5E5E5">mentioned earlier and it will be</font><font color="#CCCCCC"> detect</font>

381
00:19:33,370 --> 00:19:38,290
<font color="#E5E5E5">and uh providing in our cook our</font><font color="#CCCCCC"> coop</font>

382
00:19:37,630 --> 00:19:41,110
<font color="#CCCCCC">scope</font>

383
00:19:38,290 --> 00:19:43,060
architecture so as I<font color="#E5E5E5"> mentioned earlier</font>

384
00:19:41,110 --> 00:19:45,070
<font color="#E5E5E5">because one of our feature you know more</font>

385
00:19:43,060 --> 00:19:49,450
machine learning<font color="#E5E5E5"> module is those time</font>

386
00:19:45,070 --> 00:19:53,399
step and and and the<font color="#E5E5E5"> way we also show</font>

387
00:19:49,450 --> 00:19:56,230
show show the reason why we mark is

388
00:19:53,400 --> 00:19:59,080
<font color="#CCCCCC">abnormal</font><font color="#E5E5E5"> it's a frequency of package</font>

389
00:19:56,230 --> 00:20:03,850
coming<font color="#E5E5E5"> is abnormal so that is the</font>

390
00:19:59,080 --> 00:20:08,860
detection reason here and yeah I think

391
00:20:03,850 --> 00:20:11,919
<font color="#E5E5E5">probably that's the of all of my</font>

392
00:20:08,860 --> 00:20:15,340
presentation<font color="#CCCCCC"> if you have any questions</font>

393
00:20:11,920 --> 00:20:17,830
please feel free to ask and the<font color="#CCCCCC"> some</font>

394
00:20:15,340 --> 00:20:20,340
<font color="#CCCCCC">sense for you thanks for you coming to</font>

395
00:20:17,830 --> 00:20:20,340
our session

396
00:20:21,590 --> 00:20:25,649
[Applause]

