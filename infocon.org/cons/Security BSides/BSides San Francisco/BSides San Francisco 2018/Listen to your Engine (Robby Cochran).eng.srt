1
00:00:03,620 --> 00:00:06,740
[Music]

2
00:00:19,710 --> 00:00:24,990
hello<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> Robby Cochran thanks so much</font>

3
00:00:22,320 --> 00:00:27,570
<font color="#E5E5E5">for coming</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> my talk at the</font><font color="#CCCCCC"> end of the</font>

4
00:00:24,990 --> 00:00:29,040
day<font color="#E5E5E5"> this is my first</font><font color="#CCCCCC"> time coming to</font>

5
00:00:27,570 --> 00:00:30,210
b-sides<font color="#E5E5E5"> and it's been an amazing</font>

6
00:00:29,040 --> 00:00:33,510
<font color="#E5E5E5">conference so I hope you guys had a</font>

7
00:00:30,210 --> 00:00:35,220
great<font color="#E5E5E5"> time too</font><font color="#CCCCCC"> so yeah time of my talk</font>

8
00:00:33,510 --> 00:00:36,989
is<font color="#E5E5E5"> listen to your</font><font color="#CCCCCC"> engine unearthing</font>

9
00:00:35,220 --> 00:00:39,180
security signals from the modern Linux

10
00:00:36,989 --> 00:00:41,370
kernel<font color="#E5E5E5"> and just a quick</font><font color="#CCCCCC"> overview of my</font>

11
00:00:39,180 --> 00:00:44,040
<font color="#E5E5E5">background</font><font color="#CCCCCC"> previously I did a PhD</font><font color="#E5E5E5"> and I</font>

12
00:00:41,370 --> 00:00:45,870
looked at applications of symbolic

13
00:00:44,040 --> 00:00:48,120
execution<font color="#E5E5E5"> and currently I'm</font><font color="#CCCCCC"> working at</font>

14
00:00:45,870 --> 00:00:51,720
<font color="#E5E5E5">stack rocks doing container runtime</font>

15
00:00:48,120 --> 00:00:53,970
security detection so this talk is<font color="#E5E5E5"> going</font>

16
00:00:51,720 --> 00:00:56,820
<font color="#E5E5E5">to be kind of a survey talk an overview</font>

17
00:00:53,970 --> 00:00:59,239
of<font color="#E5E5E5"> what system calls are why are they</font>

18
00:00:56,820 --> 00:01:02,280
important for monitoring<font color="#E5E5E5"> infrastructure</font>

19
00:00:59,239 --> 00:01:05,339
<font color="#CCCCCC">and what we can</font><font color="#E5E5E5"> observe at the system</font>

20
00:01:02,280 --> 00:01:07,590
call level<font color="#E5E5E5"> during attacks</font><font color="#CCCCCC"> and what</font>

21
00:01:05,339 --> 00:01:09,539
<font color="#E5E5E5">features in the Linux kernel allow us to</font>

22
00:01:07,590 --> 00:01:10,470
observe<font color="#E5E5E5"> those system calls and then kind</font>

23
00:01:09,540 --> 00:01:13,590
of<font color="#E5E5E5"> what</font><font color="#CCCCCC"> are the challenges</font><font color="#E5E5E5"> and</font>

24
00:01:10,470 --> 00:01:15,060
<font color="#CCCCCC">trade-offs in this in</font><font color="#E5E5E5"> this world so if</font>

25
00:01:13,590 --> 00:01:16,920
you're a kernel developer some of this

26
00:01:15,060 --> 00:01:19,289
may be<font color="#E5E5E5"> a little high level but</font><font color="#CCCCCC"> if you're</font>

27
00:01:16,920 --> 00:01:21,530
new<font color="#CCCCCC"> to this then hopefully you'll you'll</font>

28
00:01:19,289 --> 00:01:25,590
come<font color="#CCCCCC"> away with kind of</font><font color="#E5E5E5"> a flavor of these</font>

29
00:01:21,530 --> 00:01:27,479
these features<font color="#E5E5E5"> so first of all it's kind</font>

30
00:01:25,590 --> 00:01:29,010
<font color="#E5E5E5">of have a quick little primer</font><font color="#CCCCCC"> on what</font><font color="#E5E5E5"> a</font>

31
00:01:27,479 --> 00:01:31,429
system call is and why is a system

32
00:01:29,010 --> 00:01:33,510
called<font color="#E5E5E5"> different from function call</font><font color="#CCCCCC"> so</font>

33
00:01:31,430 --> 00:01:35,010
<font color="#CCCCCC">traditionally as you know you have a</font><font color="#E5E5E5"> you</font>

34
00:01:33,510 --> 00:01:38,040
<font color="#CCCCCC">have user space and kernel space</font>

35
00:01:35,010 --> 00:01:40,920
processes and system calls are used to

36
00:01:38,040 --> 00:01:42,840
<font color="#CCCCCC">communicate between these two worlds</font><font color="#E5E5E5"> so</font>

37
00:01:40,920 --> 00:01:45,479
we actually have to kind of talk a

38
00:01:42,840 --> 00:01:47,130
little bit about<font color="#E5E5E5"> hardware so CPUs</font><font color="#CCCCCC"> have a</font>

39
00:01:45,479 --> 00:01:51,360
hardware feature called protection rings

40
00:01:47,130 --> 00:01:56,850
and using protection rings allow you to

41
00:01:51,360 --> 00:01:59,939
<font color="#CCCCCC">actually control the access to</font>

42
00:01:56,850 --> 00:02:01,890
<font color="#E5E5E5">particular resources so ring</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> is the</font>

43
00:01:59,939 --> 00:02:04,649
most privileged<font color="#E5E5E5"> and this is where the</font>

44
00:02:01,890 --> 00:02:06,090
<font color="#E5E5E5">Linux</font><font color="#CCCCCC"> kernel and the VM</font><font color="#E5E5E5"> live ring 1 and</font>

45
00:02:04,650 --> 00:02:08,820
<font color="#CCCCCC">2 aren't</font><font color="#E5E5E5"> really used and then ring 3 is</font>

46
00:02:06,090 --> 00:02:11,130
where user space lives and ring 3 is

47
00:02:08,820 --> 00:02:14,220
least trusted<font color="#E5E5E5"> so it has the instructions</font>

48
00:02:11,130 --> 00:02:16,950
running when the CPUs and<font color="#E5E5E5"> ring 3 had the</font>

49
00:02:14,220 --> 00:02:19,920
<font color="#E5E5E5">least privileges can't modify page</font>

50
00:02:16,950 --> 00:02:22,048
tables<font color="#E5E5E5"> and a user space process is</font>

51
00:02:19,920 --> 00:02:24,660
restricted<font color="#E5E5E5"> to only accessing</font><font color="#CCCCCC"> memory in</font>

52
00:02:22,049 --> 00:02:27,360
its own<font color="#CCCCCC"> address space</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> system call</font>

53
00:02:24,660 --> 00:02:30,540
<font color="#CCCCCC">was</font><font color="#E5E5E5"> really the</font><font color="#CCCCCC"> transition from ring 3 to</font>

54
00:02:27,360 --> 00:02:32,549
ring<font color="#E5E5E5"> 0 so a user space process</font><font color="#CCCCCC"> needs to</font>

55
00:02:30,540 --> 00:02:33,390
have a way<font color="#CCCCCC"> to tell the kernel that it</font>

56
00:02:32,549 --> 00:02:34,920
wants to<font color="#CCCCCC"> access</font>

57
00:02:33,390 --> 00:02:39,179
<font color="#E5E5E5">hardware</font><font color="#CCCCCC"> send some data on the network</font>

58
00:02:34,920 --> 00:02:41,160
<font color="#CCCCCC">and usually use some special</font><font color="#E5E5E5"> system call</font>

59
00:02:39,180 --> 00:02:42,060
<font color="#CCCCCC">or excuse me instruction so</font>

60
00:02:41,160 --> 00:02:43,770
traditionally this<font color="#E5E5E5"> was done with</font>

61
00:02:42,060 --> 00:02:46,740
interrupts now there's faster ways<font color="#E5E5E5"> to do</font>

62
00:02:43,770 --> 00:02:49,440
this using CPU<font color="#CCCCCC"> instructions like sis</font>

63
00:02:46,740 --> 00:02:51,240
<font color="#E5E5E5">call and sis return and once this</font>

64
00:02:49,440 --> 00:02:54,750
instruction occurs<font color="#CCCCCC"> the kernel handles</font>

65
00:02:51,240 --> 00:02:56,760
the particular system<font color="#E5E5E5"> call and then</font>

66
00:02:54,750 --> 00:02:58,530
sends the<font color="#E5E5E5"> data back to the</font><font color="#CCCCCC"> user space</font>

67
00:02:56,760 --> 00:03:00,090
process now the reason<font color="#CCCCCC"> I'm kind of</font>

68
00:02:58,530 --> 00:03:01,980
<font color="#E5E5E5">pointing this out in particular</font><font color="#CCCCCC"> is</font>

69
00:03:00,090 --> 00:03:04,709
<font color="#CCCCCC">because there's</font><font color="#E5E5E5"> overhead associated with</font>

70
00:03:01,980 --> 00:03:10,799
moving<font color="#E5E5E5"> data from one ring</font><font color="#CCCCCC"> to the other</font>

71
00:03:04,709 --> 00:03:12,239
<font color="#E5E5E5">and it also means that it's more</font>

72
00:03:10,800 --> 00:03:15,510
<font color="#CCCCCC">difficult</font><font color="#E5E5E5"> more challenging to actually</font>

73
00:03:12,239 --> 00:03:16,650
monitor<font color="#E5E5E5"> these system calls so another</font>

74
00:03:15,510 --> 00:03:18,420
<font color="#E5E5E5">kind of like overview I want to talk</font>

75
00:03:16,650 --> 00:03:20,790
about<font color="#E5E5E5"> before we get into the the</font><font color="#CCCCCC"> meat of</font>

76
00:03:18,420 --> 00:03:22,738
the talk<font color="#E5E5E5"> is profiling tracing and how we</font>

77
00:03:20,790 --> 00:03:26,190
can<font color="#E5E5E5"> use these as</font><font color="#CCCCCC"> security practitioners</font>

78
00:03:22,739 --> 00:03:28,350
<font color="#E5E5E5">so for profiling</font><font color="#CCCCCC"> you think</font><font color="#E5E5E5"> about what</font>

79
00:03:26,190 --> 00:03:30,359
profiling is this is like<font color="#E5E5E5"> when we're</font>

80
00:03:28,350 --> 00:03:33,180
doing<font color="#E5E5E5"> Diagnostics or statistical</font>

81
00:03:30,360 --> 00:03:34,800
analysis of what<font color="#CCCCCC"> our software</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> doing</font>

82
00:03:33,180 --> 00:03:36,570
the tool of choice to identify

83
00:03:34,800 --> 00:03:38,280
performance<font color="#E5E5E5"> bottlenecks so you're</font>

84
00:03:36,570 --> 00:03:39,870
looking at<font color="#E5E5E5"> what are the what's</font><font color="#CCCCCC"> the top</font>

85
00:03:38,280 --> 00:03:42,870
<font color="#CCCCCC">function what is the the hotspot</font><font color="#E5E5E5"> that</font>

86
00:03:39,870 --> 00:03:44,370
<font color="#CCCCCC">I'm that I'm accessing on a profiler is</font>

87
00:03:42,870 --> 00:03:45,930
going to tell you like maybe where the

88
00:03:44,370 --> 00:03:48,870
problem area of the code is but it's<font color="#E5E5E5"> not</font>

89
00:03:45,930 --> 00:03:51,150
<font color="#E5E5E5">gonna give you the exact details for how</font>

90
00:03:48,870 --> 00:03:53,790
you got there<font color="#E5E5E5"> in order</font><font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> you</font>

91
00:03:51,150 --> 00:03:55,260
<font color="#E5E5E5">often use tracing tools so for tracing</font>

92
00:03:53,790 --> 00:03:56,640
tools think about that a tracing tool

93
00:03:55,260 --> 00:03:58,350
like a court stenographer<font color="#E5E5E5"> we're actually</font>

94
00:03:56,640 --> 00:03:59,850
<font color="#CCCCCC">recording every function call that</font>

95
00:03:58,350 --> 00:04:01,799
occurred and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can do tracing in</font>

96
00:03:59,850 --> 00:04:03,030
<font color="#CCCCCC">userspace</font><font color="#E5E5E5"> as well as tracing in kernel</font>

97
00:04:01,799 --> 00:04:05,130
<font color="#E5E5E5">space</font><font color="#CCCCCC"> oftentimes you might</font><font color="#E5E5E5"> want to</font>

98
00:04:03,030 --> 00:04:08,489
diagnose a particular performance<font color="#E5E5E5"> issue</font>

99
00:04:05,130 --> 00:04:11,519
by looking at which kernel functions

100
00:04:08,489 --> 00:04:13,799
were executed and tracing is often<font color="#E5E5E5"> much</font>

101
00:04:11,519 --> 00:04:15,180
lower level<font color="#CCCCCC"> than</font><font color="#E5E5E5"> logging when you can</font>

102
00:04:13,799 --> 00:04:17,579
look at application log you can kind of

103
00:04:15,180 --> 00:04:19,049
diagnose some problems but<font color="#CCCCCC"> we're tracing</font>

104
00:04:17,579 --> 00:04:21,600
<font color="#CCCCCC">you're actually looking at the</font><font color="#E5E5E5"> the</font>

105
00:04:19,048 --> 00:04:23,789
<font color="#E5E5E5">function level execution and so</font><font color="#CCCCCC"> we can</font>

106
00:04:21,600 --> 00:04:26,030
combine<font color="#E5E5E5"> and leverage profiling and</font>

107
00:04:23,789 --> 00:04:28,200
tracing tools to do<font color="#E5E5E5"> security monitoring</font>

108
00:04:26,030 --> 00:04:29,940
<font color="#CCCCCC">we can't do this alone we have to</font><font color="#E5E5E5"> kind</font>

109
00:04:28,200 --> 00:04:31,830
of include<font color="#E5E5E5"> this in our pipeline but</font>

110
00:04:29,940 --> 00:04:35,820
these tools<font color="#E5E5E5"> can be leveraged for the</font>

111
00:04:31,830 --> 00:04:37,289
collection of data so of<font color="#E5E5E5"> course security</font>

112
00:04:35,820 --> 00:04:40,590
<font color="#E5E5E5">monitoring is really the last line of</font>

113
00:04:37,289 --> 00:04:41,820
<font color="#E5E5E5">defense in your infrastructure</font><font color="#CCCCCC"> you're</font>

114
00:04:40,590 --> 00:04:43,560
going to want to have your<font color="#E5E5E5"> systems</font>

115
00:04:41,820 --> 00:04:44,969
patched and updated and<font color="#E5E5E5"> configured</font>

116
00:04:43,560 --> 00:04:47,100
properly but ultimately even<font color="#CCCCCC"> if</font>

117
00:04:44,970 --> 00:04:50,160
everything<font color="#CCCCCC"> is done perfectly</font><font color="#E5E5E5"> right</font>

118
00:04:47,100 --> 00:04:51,330
<font color="#E5E5E5">you still can have</font><font color="#CCCCCC"> breaches and by</font>

119
00:04:50,160 --> 00:04:52,980
having<font color="#CCCCCC"> to monitoring infrastructure</font>

120
00:04:51,330 --> 00:04:55,109
you're able<font color="#E5E5E5"> to either detect those</font>

121
00:04:52,980 --> 00:04:57,780
breaches<font color="#E5E5E5"> or use some sort of auditing to</font>

122
00:04:55,110 --> 00:05:00,420
once you determine<font color="#CCCCCC"> there is a breach to</font>

123
00:04:57,780 --> 00:05:02,340
say like what<font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> happened</font><font color="#E5E5E5"> so like</font>

124
00:05:00,420 --> 00:05:06,150
this<font color="#E5E5E5"> is something that</font><font color="#CCCCCC"> you're if you</font>

125
00:05:02,340 --> 00:05:07,440
have<font color="#CCCCCC"> any type of infrastructure in that</font>

126
00:05:06,150 --> 00:05:08,940
does any kind<font color="#CCCCCC"> of monitor you're familiar</font>

127
00:05:07,440 --> 00:05:11,700
with<font color="#CCCCCC"> this pipeline where you connect</font>

128
00:05:08,940 --> 00:05:13,830
<font color="#E5E5E5">collect logs events behaviors you stream</font>

129
00:05:11,700 --> 00:05:16,560
this data<font color="#E5E5E5"> off host usually so it's</font>

130
00:05:13,830 --> 00:05:18,659
centralized<font color="#CCCCCC"> then you use the centralized</font>

131
00:05:16,560 --> 00:05:21,060
data store to<font color="#E5E5E5"> detect anomalies and an</font>

132
00:05:18,660 --> 00:05:23,400
audit and investigate<font color="#CCCCCC"> after a breach</font><font color="#E5E5E5"> so</font>

133
00:05:21,060 --> 00:05:25,520
really what's important in in what's I'm

134
00:05:23,400 --> 00:05:27,870
kind of the relevant to this talk is

135
00:05:25,520 --> 00:05:31,979
what you're gonna<font color="#E5E5E5"> collect and stream</font>

136
00:05:27,870 --> 00:05:33,390
into your monitoring pipeline<font color="#CCCCCC"> and let's</font>

137
00:05:31,980 --> 00:05:34,890
tie want to talk about<font color="#E5E5E5"> if you're gonna</font>

138
00:05:33,390 --> 00:05:36,840
<font color="#E5E5E5">collect system call data what that gives</font>

139
00:05:34,890 --> 00:05:40,650
you what what can you learn if you're at

140
00:05:36,840 --> 00:05:42,570
the system call level so one way to

141
00:05:40,650 --> 00:05:44,820
<font color="#CCCCCC">think</font><font color="#E5E5E5"> about why system calls are useful</font>

142
00:05:42,570 --> 00:05:45,990
is because<font color="#E5E5E5"> no matter what services</font>

143
00:05:44,820 --> 00:05:47,490
<font color="#E5E5E5">you're running what database you're</font>

144
00:05:45,990 --> 00:05:51,000
running<font color="#E5E5E5"> what language you're</font><font color="#CCCCCC"> using</font>

145
00:05:47,490 --> 00:05:52,680
ultimately these tools are gonna have to

146
00:05:51,000 --> 00:05:54,870
access<font color="#E5E5E5"> the kernel and use a system call</font>

147
00:05:52,680 --> 00:05:57,080
so system call<font color="#E5E5E5"> let the system call level</font>

148
00:05:54,870 --> 00:06:01,230
<font color="#E5E5E5">is a good place to introspect and</font>

149
00:05:57,080 --> 00:06:06,359
actually identify<font color="#E5E5E5"> behavior for what your</font>

150
00:06:01,230 --> 00:06:07,680
services and and apps are doing at the

151
00:06:06,360 --> 00:06:09,870
system<font color="#CCCCCC"> call</font><font color="#E5E5E5"> level</font><font color="#CCCCCC"> you're gonna get a</font>

152
00:06:07,680 --> 00:06:12,210
really really<font color="#CCCCCC"> high fidelity view of all</font>

153
00:06:09,870 --> 00:06:14,520
system<font color="#E5E5E5"> activity right this is gonna let</font>

154
00:06:12,210 --> 00:06:16,560
you know like a lot<font color="#E5E5E5"> of important things</font>

155
00:06:14,520 --> 00:06:20,520
that are<font color="#E5E5E5"> happening process launches file</font>

156
00:06:16,560 --> 00:06:23,550
activity<font color="#CCCCCC"> network activity</font><font color="#E5E5E5"> hardware</font>

157
00:06:20,520 --> 00:06:24,750
device access information<font color="#E5E5E5"> like if</font><font color="#CCCCCC"> the</font>

158
00:06:23,550 --> 00:06:27,060
process<font color="#E5E5E5"> is trying just to get the time</font>

159
00:06:24,750 --> 00:06:29,430
<font color="#CCCCCC">of</font><font color="#E5E5E5"> day and also system calls are used</font>

160
00:06:27,060 --> 00:06:31,290
for<font color="#CCCCCC"> inter process communication now kind</font>

161
00:06:29,430 --> 00:06:32,820
<font color="#E5E5E5">of a caveat here is</font><font color="#CCCCCC"> that of</font><font color="#E5E5E5"> course you</font>

162
00:06:31,290 --> 00:06:35,070
want to monitor<font color="#E5E5E5"> all system calls but</font>

163
00:06:32,820 --> 00:06:36,990
there may be cases where some system

164
00:06:35,070 --> 00:06:38,159
calls have no legitimate use case<font color="#E5E5E5"> on</font>

165
00:06:36,990 --> 00:06:39,930
your infrastructure<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the best</font>

166
00:06:38,160 --> 00:06:46,490
practice there<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> just block it using</font>

167
00:06:39,930 --> 00:06:46,490
tools<font color="#E5E5E5"> like set comp or</font><font color="#CCCCCC"> second BPF</font>

168
00:06:47,060 --> 00:06:52,950
<font color="#CCCCCC">alright so I hope everyone brought their</font>

169
00:06:50,330 --> 00:06:54,810
steampunk goggles<font color="#CCCCCC"> so now is the time to</font>

170
00:06:52,950 --> 00:06:56,900
put on<font color="#E5E5E5"> your goggles we're going to go</font>

171
00:06:54,810 --> 00:07:00,740
into the lab

172
00:06:56,900 --> 00:07:02,489
<font color="#E5E5E5">all right get everything lined up here</font>

173
00:07:00,740 --> 00:07:07,380
<font color="#E5E5E5">actually I'm not gonna wear those I</font>

174
00:07:02,490 --> 00:07:08,640
can't see my slides<font color="#CCCCCC"> so this is a little</font>

175
00:07:07,380 --> 00:07:11,190
<font color="#E5E5E5">experiment you can run it you can do at</font>

176
00:07:08,640 --> 00:07:12,330
home<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> I did this</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I can just</font>

177
00:07:11,190 --> 00:07:15,840
<font color="#CCCCCC">kind of walk you through what I did</font>

178
00:07:12,330 --> 00:07:17,580
<font color="#E5E5E5">basically I took</font><font color="#CCCCCC"> a vulnerable version of</font>

179
00:07:15,840 --> 00:07:22,739
Apache struts<font color="#E5E5E5"> and ran it in a docker</font>

180
00:07:17,580 --> 00:07:24,150
container and then I and this version of

181
00:07:22,740 --> 00:07:27,450
<font color="#E5E5E5">Apache stretch has the remote code</font>

182
00:07:24,150 --> 00:07:30,599
execution vulnerability<font color="#E5E5E5"> that was used in</font>

183
00:07:27,450 --> 00:07:34,380
the<font color="#E5E5E5"> Equifax hack</font><font color="#CCCCCC"> so what we're gonna do</font>

184
00:07:30,600 --> 00:07:37,740
is load up<font color="#E5E5E5"> Apache struts attach s trace</font>

185
00:07:34,380 --> 00:07:39,210
<font color="#E5E5E5">which is a system call</font><font color="#CCCCCC"> it's a really</font>

186
00:07:37,740 --> 00:07:40,590
useful<font color="#E5E5E5"> tool</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> use to</font><font color="#E5E5E5"> view all</font>

187
00:07:39,210 --> 00:07:42,530
system calls<font color="#E5E5E5"> and then we're going</font><font color="#CCCCCC"> to</font>

188
00:07:40,590 --> 00:07:45,599
launch an attack against Apache struts

189
00:07:42,530 --> 00:07:47,820
<font color="#E5E5E5">using</font><font color="#CCCCCC"> Metasploit and if you want to</font>

190
00:07:45,600 --> 00:07:49,530
actually<font color="#E5E5E5"> have the instructions and more</font>

191
00:07:47,820 --> 00:07:51,930
details on how to do this<font color="#CCCCCC"> this</font><font color="#E5E5E5"> link here</font>

192
00:07:49,530 --> 00:07:55,169
at<font color="#CCCCCC"> the bottom we have a blog</font><font color="#E5E5E5"> post to</font>

193
00:07:51,930 --> 00:07:56,730
tell you how to do that<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so first</font>

194
00:07:55,170 --> 00:07:59,010
<font color="#CCCCCC">of all let's load up struts</font><font color="#E5E5E5"> this is a</font>

195
00:07:56,730 --> 00:08:00,780
you know<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of the default we're</font><font color="#E5E5E5"> not</font>

196
00:07:59,010 --> 00:08:03,120
actually<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to run any actual</font>

197
00:08:00,780 --> 00:08:05,520
<font color="#E5E5E5">applications this is just the built-in</font>

198
00:08:03,120 --> 00:08:07,860
<font color="#E5E5E5">app that struts comes with so we load up</font>

199
00:08:05,520 --> 00:08:09,510
struts<font color="#E5E5E5"> and this is the vulnerable</font>

200
00:08:07,860 --> 00:08:12,620
version so we have this is<font color="#E5E5E5"> the actual</font>

201
00:08:09,510 --> 00:08:15,719
bug in instructs and<font color="#CCCCCC"> aspersion</font><font color="#E5E5E5"> where</font>

202
00:08:12,620 --> 00:08:19,920
unfortunately<font color="#E5E5E5"> we're executing data that</font>

203
00:08:15,720 --> 00:08:23,100
was received in a<font color="#CCCCCC"> Content header and</font>

204
00:08:19,920 --> 00:08:25,110
they're going to attach<font color="#E5E5E5"> s</font><font color="#CCCCCC"> trace to this</font>

205
00:08:23,100 --> 00:08:26,670
running<font color="#CCCCCC"> version of struts so</font><font color="#E5E5E5"> s trace is</font>

206
00:08:25,110 --> 00:08:27,480
an awesome tool if you never use<font color="#E5E5E5"> it</font>

207
00:08:26,670 --> 00:08:30,180
before<font color="#E5E5E5"> you should definitely check it</font>

208
00:08:27,480 --> 00:08:31,980
<font color="#E5E5E5">out</font><font color="#CCCCCC"> it's a user mode program which uses</font>

209
00:08:30,180 --> 00:08:33,450
<font color="#CCCCCC">the P tray system calls so P trace is a</font>

210
00:08:31,980 --> 00:08:37,440
system call that<font color="#E5E5E5"> allows you to attach</font>

211
00:08:33,450 --> 00:08:39,690
one process<font color="#E5E5E5"> to another and receive</font>

212
00:08:37,440 --> 00:08:42,930
events<font color="#E5E5E5"> every time system calls occur and</font>

213
00:08:39,690 --> 00:08:45,690
on the<font color="#E5E5E5"> the one drawback to s trace is</font>

214
00:08:42,929 --> 00:08:48,390
that<font color="#CCCCCC"> it's it adds extra</font><font color="#E5E5E5"> context switches</font>

215
00:08:45,690 --> 00:08:50,190
<font color="#E5E5E5">so when you and there's different ways</font>

216
00:08:48,390 --> 00:08:52,890
to<font color="#CCCCCC"> run s trace you can</font><font color="#E5E5E5"> run it in a</font>

217
00:08:50,190 --> 00:08:54,690
blocking mode or<font color="#E5E5E5"> non blocking mode</font><font color="#CCCCCC"> but</font>

218
00:08:52,890 --> 00:08:56,280
the kind of<font color="#CCCCCC"> the key</font><font color="#E5E5E5"> takeaway is like s</font>

219
00:08:54,690 --> 00:08:57,990
<font color="#CCCCCC">Trace is great for diagnosing problems</font>

220
00:08:56,280 --> 00:09:00,930
but<font color="#E5E5E5"> not what you want to use for actual</font>

221
00:08:57,990 --> 00:09:02,880
monitoring<font color="#CCCCCC"> another thing I want to point</font>

222
00:09:00,930 --> 00:09:04,770
out if you<font color="#CCCCCC"> ever</font><font color="#E5E5E5"> want to read an amazing</font>

223
00:09:02,880 --> 00:09:06,870
<font color="#E5E5E5">man page check out the man page</font><font color="#CCCCCC"> for s</font>

224
00:09:04,770 --> 00:09:10,579
<font color="#CCCCCC">trace it's like whoever</font><font color="#E5E5E5"> wrote this is a</font>

225
00:09:06,870 --> 00:09:13,950
literary genius<font color="#CCCCCC"> it's amazing</font>

226
00:09:10,580 --> 00:09:16,080
<font color="#E5E5E5">okay so we've launched struts where</font>

227
00:09:13,950 --> 00:09:18,270
<font color="#E5E5E5">we've attached</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> race and now we're</font>

228
00:09:16,080 --> 00:09:21,150
going to run<font color="#CCCCCC"> Metasploit</font><font color="#E5E5E5"> the Metasploit</font>

229
00:09:18,270 --> 00:09:22,579
attack against use<font color="#CCCCCC"> Metasploit to run an</font>

230
00:09:21,150 --> 00:09:26,220
attack against<font color="#E5E5E5"> struts so we're using</font>

231
00:09:22,580 --> 00:09:27,870
<font color="#CCCCCC">just</font><font color="#E5E5E5"> a reverse</font><font color="#CCCCCC"> shell payload so here's</font>

232
00:09:26,220 --> 00:09:29,700
the<font color="#E5E5E5"> actual</font><font color="#CCCCCC"> payload that</font><font color="#E5E5E5"> gets sent to</font>

233
00:09:27,870 --> 00:09:33,560
struts you can see here the<font color="#E5E5E5"> the</font>

234
00:09:29,700 --> 00:09:36,660
<font color="#E5E5E5">shellcode</font><font color="#CCCCCC"> is is highlighted in red and</font>

235
00:09:33,560 --> 00:09:37,979
then from<font color="#E5E5E5"> s trace we can observe all</font><font color="#CCCCCC"> of</font>

236
00:09:36,660 --> 00:09:40,020
<font color="#E5E5E5">the system calls</font><font color="#CCCCCC"> so I'm</font><font color="#E5E5E5"> not going to</font>

237
00:09:37,980 --> 00:09:42,450
show you all of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> 60,000 the system</font>

238
00:09:40,020 --> 00:09:44,819
calls that<font color="#CCCCCC"> we saw in 30 seconds of</font>

239
00:09:42,450 --> 00:09:46,650
running<font color="#E5E5E5"> s trace</font><font color="#CCCCCC"> but I'm kind of</font>

240
00:09:44,820 --> 00:09:48,720
representing them here<font color="#E5E5E5"> in terms of their</font>

241
00:09:46,650 --> 00:09:52,110
frequency counts<font color="#E5E5E5"> so you can see that</font>

242
00:09:48,720 --> 00:09:55,680
some system calls<font color="#CCCCCC"> are much more frequent</font>

243
00:09:52,110 --> 00:09:57,240
<font color="#CCCCCC">than others</font><font color="#E5E5E5"> and actually</font><font color="#CCCCCC"> around 95 or 98</font>

244
00:09:55,680 --> 00:09:59,430
percent<font color="#E5E5E5"> of</font><font color="#CCCCCC"> these system calls you don't</font>

245
00:09:57,240 --> 00:10:02,010
need to observe they actually<font color="#E5E5E5"> aren't</font>

246
00:09:59,430 --> 00:10:03,750
really security relevant so let's<font color="#E5E5E5"> look</font>

247
00:10:02,010 --> 00:10:06,420
at the let's kind of trim down<font color="#E5E5E5"> this like</font>

248
00:10:03,750 --> 00:10:08,310
giant<font color="#E5E5E5"> log and look at the the actual set</font>

249
00:10:06,420 --> 00:10:10,650
<font color="#CCCCCC">of system</font><font color="#E5E5E5"> calls where we can observe the</font>

250
00:10:08,310 --> 00:10:12,089
attack occurring so here we can see a

251
00:10:10,650 --> 00:10:15,470
sequence of system<font color="#E5E5E5"> calls and I'm going</font>

252
00:10:12,090 --> 00:10:18,120
<font color="#E5E5E5">to highlight some</font><font color="#CCCCCC"> of these where we're</font>

253
00:10:15,470 --> 00:10:20,100
we're actually opening<font color="#E5E5E5"> the payload that</font>

254
00:10:18,120 --> 00:10:22,410
<font color="#E5E5E5">was dropped we're setting it as</font>

255
00:10:20,100 --> 00:10:24,780
executable<font color="#CCCCCC"> we execute the payload that</font>

256
00:10:22,410 --> 00:10:28,589
<font color="#E5E5E5">establishes a reverse</font><font color="#CCCCCC"> shell and then we</font>

257
00:10:24,780 --> 00:10:32,339
can try it but<font color="#CCCCCC"> we can the attacker</font><font color="#E5E5E5"> can</font>

258
00:10:28,590 --> 00:10:34,680
<font color="#CCCCCC">then read the secrets files so kind</font><font color="#E5E5E5"> of</font>

259
00:10:32,340 --> 00:10:36,030
distilling this entire set of<font color="#E5E5E5"> system</font>

260
00:10:34,680 --> 00:10:38,160
<font color="#E5E5E5">calls down to four that</font><font color="#CCCCCC"> are really</font>

261
00:10:36,030 --> 00:10:40,020
useful<font color="#CCCCCC"> from</font><font color="#E5E5E5"> a security monitoring</font>

262
00:10:38,160 --> 00:10:44,100
perspective<font color="#E5E5E5"> we have Asha mod on the</font>

263
00:10:40,020 --> 00:10:47,730
payload an exec on the payload itself

264
00:10:44,100 --> 00:10:49,140
<font color="#E5E5E5">and then a connect back to our verse</font>

265
00:10:47,730 --> 00:10:50,850
<font color="#CCCCCC">shell connect back to the attacker</font><font color="#E5E5E5"> and</font>

266
00:10:49,140 --> 00:10:54,750
then we're actually opening a secrets

267
00:10:50,850 --> 00:10:56,670
file so the important<font color="#CCCCCC"> thing to</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> out</font>

268
00:10:54,750 --> 00:10:58,830
<font color="#CCCCCC">here is that there's a lot of data</font><font color="#E5E5E5"> and</font>

269
00:10:56,670 --> 00:11:02,579
there's only a<font color="#CCCCCC"> few system calls</font><font color="#E5E5E5"> that are</font>

270
00:10:58,830 --> 00:11:04,980
really security relevant so what<font color="#CCCCCC"> other</font>

271
00:11:02,580 --> 00:11:06,900
<font color="#CCCCCC">types of attacks can we observe</font><font color="#E5E5E5"> thinking</font>

272
00:11:04,980 --> 00:11:07,980
<font color="#E5E5E5">about</font><font color="#CCCCCC"> it from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> system call level</font><font color="#E5E5E5"> so</font>

273
00:11:06,900 --> 00:11:10,410
there's been this<font color="#E5E5E5"> rise and</font>

274
00:11:07,980 --> 00:11:12,060
<font color="#E5E5E5">cryptocurrency mining attacks where the</font>

275
00:11:10,410 --> 00:11:14,310
attacker isn't actually getting<font color="#E5E5E5"> into</font>

276
00:11:12,060 --> 00:11:16,260
<font color="#E5E5E5">your infrastructure and doing</font>

277
00:11:14,310 --> 00:11:17,880
reconnaissance<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really just the</font>

278
00:11:16,260 --> 00:11:20,280
attacker is really trying<font color="#E5E5E5"> to stay under</font>

279
00:11:17,880 --> 00:11:22,889
the<font color="#CCCCCC"> radar and steal resources and so</font>

280
00:11:20,280 --> 00:11:25,170
<font color="#E5E5E5">oftentimes there's fewer signals</font><font color="#CCCCCC"> so any</font>

281
00:11:22,889 --> 00:11:28,259
we can do to detect this<font color="#CCCCCC"> type of</font>

282
00:11:25,170 --> 00:11:30,509
resource abuse<font color="#E5E5E5"> is useful so for the case</font>

283
00:11:28,259 --> 00:11:34,889
<font color="#E5E5E5">of crypto miners you can use process</font>

284
00:11:30,509 --> 00:11:40,589
<font color="#E5E5E5">execution to observe the execution</font><font color="#CCCCCC"> of</font>

285
00:11:34,889 --> 00:11:42,600
like crypto mining processes so kind of

286
00:11:40,589 --> 00:11:44,309
<font color="#E5E5E5">in summary indicators</font><font color="#CCCCCC"> have compromised</font>

287
00:11:42,600 --> 00:11:47,309
<font color="#E5E5E5">from a system call perspective</font><font color="#CCCCCC"> our</font>

288
00:11:44,309 --> 00:11:49,589
network file system<font color="#E5E5E5"> and process from the</font>

289
00:11:47,309 --> 00:11:50,879
network we<font color="#CCCCCC"> can see an attacker open a</font>

290
00:11:49,589 --> 00:11:52,889
reverse shell<font color="#E5E5E5"> using a connect system</font>

291
00:11:50,879 --> 00:11:55,319
call<font color="#E5E5E5"> the file system we can</font><font color="#CCCCCC"> see an</font>

292
00:11:52,889 --> 00:11:58,139
exploit payload<font color="#E5E5E5"> written to a file or</font>

293
00:11:55,319 --> 00:12:00,389
mining software<font color="#E5E5E5"> being uploaded</font><font color="#CCCCCC"> to the</font>

294
00:11:58,139 --> 00:12:02,699
server<font color="#E5E5E5"> and from the process perspective</font>

295
00:12:00,389 --> 00:12:06,419
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> see anomalous</font><font color="#CCCCCC"> processes being</font>

296
00:12:02,699 --> 00:12:08,819
launched so what kind of attacks can we

297
00:12:06,419 --> 00:12:10,709
not detect with system cause usually

298
00:12:08,819 --> 00:12:12,358
information stealing or side-channel

299
00:12:10,709 --> 00:12:15,540
attacks are much harder<font color="#E5E5E5"> to observe</font>

300
00:12:12,359 --> 00:12:17,160
because<font color="#E5E5E5"> they're not actually</font><font color="#CCCCCC"> doing any</font>

301
00:12:15,540 --> 00:12:19,139
kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> behavior</font><font color="#E5E5E5"> where you're trying to</font>

302
00:12:17,160 --> 00:12:20,699
steal files or launch processes and

303
00:12:19,139 --> 00:12:23,459
steal<font color="#CCCCCC"> resources really</font><font color="#E5E5E5"> you're stealing</font>

304
00:12:20,699 --> 00:12:25,589
<font color="#E5E5E5">memory data that's in memory so for</font>

305
00:12:23,459 --> 00:12:27,689
example heartbleed<font color="#E5E5E5"> the indicator is</font><font color="#CCCCCC"> not</font>

306
00:12:25,589 --> 00:12:30,209
at a system call level<font color="#E5E5E5"> it's where you</font>

307
00:12:27,689 --> 00:12:31,980
see<font color="#E5E5E5"> a different user behavior in this</font>

308
00:12:30,209 --> 00:12:34,049
case the response size anomalies for<font color="#E5E5E5"> the</font>

309
00:12:31,980 --> 00:12:37,559
TLS heartbeat messages<font color="#E5E5E5"> and for meltdown</font>

310
00:12:34,049 --> 00:12:39,239
inspector<font color="#CCCCCC"> the attack here is breaking</font>

311
00:12:37,559 --> 00:12:42,419
the least privileged<font color="#E5E5E5"> principle in the</font>

312
00:12:39,239 --> 00:12:43,860
kernel<font color="#E5E5E5"> and allowing and the attacker to</font>

313
00:12:42,419 --> 00:12:47,100
read kernel memory<font color="#E5E5E5"> that they shouldn't</font>

314
00:12:43,860 --> 00:12:48,209
<font color="#E5E5E5">have been allowed to read now</font><font color="#CCCCCC"> there have</font>

315
00:12:47,100 --> 00:12:50,999
been<font color="#CCCCCC"> there has been some</font><font color="#E5E5E5"> research that</font>

316
00:12:48,209 --> 00:12:53,609
<font color="#E5E5E5">has shown</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can use CPU</font>

317
00:12:50,999 --> 00:12:55,799
<font color="#CCCCCC">performance counters as indicators for</font>

318
00:12:53,610 --> 00:12:58,110
<font color="#E5E5E5">these attacks</font><font color="#CCCCCC"> and I have some links here</font>

319
00:12:55,799 --> 00:13:00,269
<font color="#CCCCCC">and again this is a case where security</font>

320
00:12:58,110 --> 00:13:07,319
<font color="#E5E5E5">practitioners can use performance tools</font>

321
00:13:00,269 --> 00:13:08,759
for actually<font color="#CCCCCC"> for security use so at the</font>

322
00:13:07,319 --> 00:13:10,679
system<font color="#E5E5E5"> call monitoring indicators of</font>

323
00:13:08,759 --> 00:13:12,029
<font color="#E5E5E5">compromised are buried within the system</font>

324
00:13:10,679 --> 00:13:13,289
call<font color="#CCCCCC"> events particularly the system</font>

325
00:13:12,029 --> 00:13:14,819
<font color="#E5E5E5">called parameters the parameters are</font>

326
00:13:13,289 --> 00:13:17,399
often more important<font color="#CCCCCC"> than the system</font>

327
00:13:14,819 --> 00:13:18,628
<font color="#E5E5E5">calls themselves and observing all the</font>

328
00:13:17,399 --> 00:13:20,489
events is impossible there's too much

329
00:13:18,629 --> 00:13:22,049
data<font color="#CCCCCC"> so strategies for kind</font><font color="#E5E5E5"> of</font>

330
00:13:20,489 --> 00:13:24,029
<font color="#E5E5E5">distilling everything down are to use</font>

331
00:13:22,049 --> 00:13:24,959
<font color="#CCCCCC">whitelisting for files and processes</font><font color="#E5E5E5"> or</font>

332
00:13:24,029 --> 00:13:27,959
even better use<font color="#CCCCCC"> some sort</font><font color="#E5E5E5"> of machine</font>

333
00:13:24,959 --> 00:13:29,910
<font color="#E5E5E5">learning framework and push all the data</font>

334
00:13:27,959 --> 00:13:32,638
into<font color="#CCCCCC"> a null stack and then analyze it</font>

335
00:13:29,910 --> 00:13:34,439
<font color="#CCCCCC">there all right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> now that</font><font color="#E5E5E5"> I've shown</font>

336
00:13:32,639 --> 00:13:36,089
<font color="#CCCCCC">you</font><font color="#E5E5E5"> that it's what we can observe at the</font>

337
00:13:34,439 --> 00:13:36,810
system<font color="#E5E5E5"> call</font><font color="#CCCCCC"> level</font><font color="#E5E5E5"> how do we actually get</font>

338
00:13:36,089 --> 00:13:41,190
<font color="#E5E5E5">this data</font>

339
00:13:36,810 --> 00:13:43,260
the colonel<font color="#CCCCCC"> like I said the system</font><font color="#E5E5E5"> call</font>

340
00:13:41,190 --> 00:13:45,150
is not a<font color="#E5E5E5"> normal function call it's a</font>

341
00:13:43,260 --> 00:13:47,069
little bit special and<font color="#E5E5E5"> so we want to be</font>

342
00:13:45,150 --> 00:13:50,220
able to<font color="#E5E5E5"> get data in a performant way</font><font color="#CCCCCC"> and</font>

343
00:13:47,070 --> 00:13:52,620
we also want to be able<font color="#E5E5E5"> to get only the</font>

344
00:13:50,220 --> 00:13:53,610
<font color="#E5E5E5">data that we really care about so</font>

345
00:13:52,620 --> 00:13:56,550
there's a<font color="#E5E5E5"> couple</font><font color="#CCCCCC"> different approaches</font>

346
00:13:53,610 --> 00:13:58,080
for<font color="#E5E5E5"> data sources so I kind of</font><font color="#CCCCCC"> mentioned</font>

347
00:13:56,550 --> 00:14:00,599
that<font color="#E5E5E5"> P trace is the system call that</font><font color="#CCCCCC"> you</font>

348
00:13:58,080 --> 00:14:02,220
can use to attach<font color="#CCCCCC"> to a process</font><font color="#E5E5E5"> but it</font>

349
00:14:00,600 --> 00:14:03,839
has a lot<font color="#CCCCCC"> of overhead</font><font color="#E5E5E5"> associated with it</font>

350
00:14:02,220 --> 00:14:07,350
so you probably<font color="#E5E5E5"> don't want to use P</font>

351
00:14:03,839 --> 00:14:09,960
trace another approach<font color="#CCCCCC"> is</font><font color="#E5E5E5"> to just write</font>

352
00:14:07,350 --> 00:14:11,580
<font color="#E5E5E5">a custom kernel module yourself so the</font>

353
00:14:09,960 --> 00:14:12,920
Linux kernel allows us to write modules

354
00:14:11,580 --> 00:14:15,120
<font color="#CCCCCC">you're probably familiar with this and</font>

355
00:14:12,920 --> 00:14:17,640
if you want<font color="#CCCCCC"> to really get</font><font color="#E5E5E5"> your hands</font>

356
00:14:15,120 --> 00:14:21,029
dirty<font color="#CCCCCC"> you can write a module that</font><font color="#E5E5E5"> is</font>

357
00:14:17,640 --> 00:14:23,880
insert into<font color="#E5E5E5"> the kernel changes kernel</font>

358
00:14:21,029 --> 00:14:26,189
pages to<font color="#E5E5E5"> be writable</font><font color="#CCCCCC"> and you just</font><font color="#E5E5E5"> find</font>

359
00:14:23,880 --> 00:14:27,450
the system call table and insert shim<font color="#CCCCCC"> or</font>

360
00:14:26,190 --> 00:14:29,820
wrapper function for<font color="#E5E5E5"> every system call</font>

361
00:14:27,450 --> 00:14:31,890
now this will<font color="#CCCCCC"> work but it's</font><font color="#E5E5E5"> going to</font>

362
00:14:29,820 --> 00:14:34,890
have a lot of<font color="#E5E5E5"> maintenance cost it's</font>

363
00:14:31,890 --> 00:14:36,540
<font color="#CCCCCC">going to be really</font><font color="#E5E5E5"> unstable</font><font color="#CCCCCC"> and you're</font>

364
00:14:34,890 --> 00:14:40,319
not actually<font color="#E5E5E5"> using</font><font color="#CCCCCC"> any of the features</font>

365
00:14:36,540 --> 00:14:42,120
<font color="#E5E5E5">that the kernel provides another</font><font color="#CCCCCC"> a</font>

366
00:14:40,320 --> 00:14:44,910
better approach<font color="#CCCCCC"> is to use</font><font color="#E5E5E5"> either K</font>

367
00:14:42,120 --> 00:14:46,530
probes or trace points so<font color="#E5E5E5"> K probes you</font>

368
00:14:44,910 --> 00:14:49,050
<font color="#E5E5E5">can think of it's like if you ever use</font>

369
00:14:46,530 --> 00:14:50,670
to watch point<font color="#E5E5E5"> in a debugger</font><font color="#CCCCCC"> a K probe</font>

370
00:14:49,050 --> 00:14:54,060
is a kernel feature that allows a user

371
00:14:50,670 --> 00:14:58,170
<font color="#E5E5E5">space process to attach to any function</font>

372
00:14:54,060 --> 00:14:59,339
<font color="#E5E5E5">in the kernel</font><font color="#CCCCCC"> you can pretty much yeah</font>

373
00:14:58,170 --> 00:15:00,870
you can pretty much attach to any

374
00:14:59,339 --> 00:15:02,520
location<font color="#E5E5E5"> that kernel other than some of</font>

375
00:15:00,870 --> 00:15:05,280
the<font color="#CCCCCC"> K probe</font><font color="#E5E5E5"> regions like you can't</font>

376
00:15:02,520 --> 00:15:06,960
<font color="#CCCCCC">kaypro back a probe and</font><font color="#E5E5E5"> this allows you</font>

377
00:15:05,280 --> 00:15:09,839
<font color="#E5E5E5">to dynamically modify the kernel at</font>

378
00:15:06,960 --> 00:15:12,240
runtime<font color="#CCCCCC"> K probes are really</font><font color="#E5E5E5"> useful</font>

379
00:15:09,839 --> 00:15:14,160
because if you want to dig<font color="#E5E5E5"> down even</font>

380
00:15:12,240 --> 00:15:16,950
<font color="#CCCCCC">deeper than a system call</font><font color="#E5E5E5"> level there's</font>

381
00:15:14,160 --> 00:15:18,270
some kernel<font color="#E5E5E5"> subsystem that has a</font>

382
00:15:16,950 --> 00:15:19,890
function call<font color="#CCCCCC"> that you really want to</font><font color="#E5E5E5"> be</font>

383
00:15:18,270 --> 00:15:22,380
<font color="#E5E5E5">aware if it's ever executed you can use</font>

384
00:15:19,890 --> 00:15:24,720
K probes<font color="#E5E5E5"> K probes to do that trace</font>

385
00:15:22,380 --> 00:15:26,850
points are like K probes<font color="#E5E5E5"> that have been</font>

386
00:15:24,720 --> 00:15:28,560
pre-assigned<font color="#CCCCCC"> so these are statically</font>

387
00:15:26,850 --> 00:15:30,990
pre-compiled<font color="#E5E5E5"> events</font><font color="#CCCCCC"> known to the</font><font color="#E5E5E5"> kernel</font>

388
00:15:28,560 --> 00:15:34,109
the<font color="#E5E5E5"> kernel developer marks a trace point</font>

389
00:15:30,990 --> 00:15:35,850
<font color="#E5E5E5">and declares it in the kernel source</font>

390
00:15:34,110 --> 00:15:38,220
code and you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> observe the</font>

391
00:15:35,850 --> 00:15:40,010
available trace points in a running

392
00:15:38,220 --> 00:15:42,690
version<font color="#E5E5E5"> of Linux bike adding this</font>

393
00:15:40,010 --> 00:15:47,010
<font color="#CCCCCC">sisyphus file here sis kernel debug</font>

394
00:15:42,690 --> 00:15:49,170
tracing available events so what are the

395
00:15:47,010 --> 00:15:50,670
trade-offs<font color="#E5E5E5"> between using K probes and</font>

396
00:15:49,170 --> 00:15:52,890
trace points so

397
00:15:50,670 --> 00:15:55,949
<font color="#CCCCCC">probes allow you to attach to exactly</font>

398
00:15:52,890 --> 00:15:57,960
the function<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want to</font><font color="#CCCCCC"> monitor</font><font color="#E5E5E5"> but the</font>

399
00:15:55,950 --> 00:16:00,090
stability<font color="#E5E5E5"> is not guaranteed so in the</font>

400
00:15:57,960 --> 00:16:03,810
internal carnal functions can change

401
00:16:00,090 --> 00:16:05,250
over time<font color="#CCCCCC"> for trace points that's</font><font color="#E5E5E5"> it's</font>

402
00:16:03,810 --> 00:16:06,839
kind of<font color="#E5E5E5"> the inverse</font><font color="#CCCCCC"> the pros are that it</font>

403
00:16:05,250 --> 00:16:09,060
statically defines the stability is more

404
00:16:06,840 --> 00:16:11,930
assured but the con is that<font color="#E5E5E5"> the exact</font>

405
00:16:09,060 --> 00:16:14,099
data you want<font color="#E5E5E5"> may not be available</font>

406
00:16:11,930 --> 00:16:16,650
<font color="#CCCCCC">another kind</font><font color="#E5E5E5"> of trade-off between these</font>

407
00:16:14,100 --> 00:16:20,250
two are that trace points actually<font color="#CCCCCC"> have</font>

408
00:16:16,650 --> 00:16:23,189
predefined offsets for the parameters<font color="#E5E5E5"> so</font>

409
00:16:20,250 --> 00:16:25,290
as I said<font color="#E5E5E5"> before the system calls</font>

410
00:16:23,190 --> 00:16:27,270
<font color="#E5E5E5">themselves are important but even more</font>

411
00:16:25,290 --> 00:16:28,650
important are the parameters to the

412
00:16:27,270 --> 00:16:30,300
system called<font color="#CCCCCC"> Aricent like what was</font><font color="#E5E5E5"> the</font>

413
00:16:28,650 --> 00:16:32,880
<font color="#E5E5E5">actual executable that was run what is</font>

414
00:16:30,300 --> 00:16:34,530
the file<font color="#CCCCCC"> that was read</font><font color="#E5E5E5"> and so trace</font>

415
00:16:32,880 --> 00:16:38,939
points<font color="#E5E5E5"> actually make it a little bit</font>

416
00:16:34,530 --> 00:16:40,199
easier to get<font color="#CCCCCC"> that parameter</font><font color="#E5E5E5"> data all</font>

417
00:16:38,940 --> 00:16:41,940
<font color="#E5E5E5">right so now that we've kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> figured</font>

418
00:16:40,200 --> 00:16:43,680
<font color="#E5E5E5">out how to set watch points</font><font color="#CCCCCC"> in our</font>

419
00:16:41,940 --> 00:16:46,050
kernel how do we get the data<font color="#E5E5E5"> from</font>

420
00:16:43,680 --> 00:16:48,630
kernel space<font color="#E5E5E5"> to user space how do we get</font>

421
00:16:46,050 --> 00:16:51,569
the<font color="#E5E5E5"> data from ring</font><font color="#CCCCCC"> zero to ring three so</font>

422
00:16:48,630 --> 00:16:55,110
<font color="#CCCCCC">two built in kernel features we can use</font>

423
00:16:51,570 --> 00:16:56,880
our<font color="#CCCCCC"> F trace and the perf subsystem</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> f</font>

424
00:16:55,110 --> 00:17:00,120
trace is a kernel feature that exposes

425
00:16:56,880 --> 00:17:03,030
events in the<font color="#E5E5E5"> system file system and you</font>

426
00:17:00,120 --> 00:17:04,560
<font color="#E5E5E5">can actually set trace points and use F</font>

427
00:17:03,030 --> 00:17:08,819
trace all through reading and<font color="#E5E5E5"> writing</font>

428
00:17:04,560 --> 00:17:12,510
files insists kernel debug tracing<font color="#CCCCCC"> so</font>

429
00:17:08,819 --> 00:17:15,210
you can create<font color="#E5E5E5"> a trace point</font><font color="#CCCCCC"> add add a</font>

430
00:17:12,510 --> 00:17:16,920
watch for it<font color="#E5E5E5"> and then just cat a the</font>

431
00:17:15,210 --> 00:17:17,900
trace file and view all of the events as

432
00:17:16,920 --> 00:17:20,700
<font color="#CCCCCC">they occur</font>

433
00:17:17,900 --> 00:17:22,500
perfects are a little more<font color="#E5E5E5"> full-featured</font>

434
00:17:20,700 --> 00:17:25,020
and it's actually a system<font color="#E5E5E5"> call where</font>

435
00:17:22,500 --> 00:17:28,140
<font color="#CCCCCC">you attach either</font><font color="#E5E5E5"> a trace point or a</font><font color="#CCCCCC"> K</font>

436
00:17:25,020 --> 00:17:31,680
probe<font color="#E5E5E5"> to a perfect and then you can get</font>

437
00:17:28,140 --> 00:17:36,420
the<font color="#E5E5E5"> data from an in map</font><font color="#CCCCCC"> meet an</font><font color="#E5E5E5"> M mapped</font>

438
00:17:31,680 --> 00:17:38,460
region of memory<font color="#E5E5E5"> and you can do</font><font color="#CCCCCC"> both you</font>

439
00:17:36,420 --> 00:17:40,530
<font color="#CCCCCC">can both</font><font color="#E5E5E5"> get a log of data through perf</font>

440
00:17:38,460 --> 00:17:41,760
<font color="#E5E5E5">you can also get counts so if you want</font>

441
00:17:40,530 --> 00:17:43,500
<font color="#E5E5E5">to know how often something has been</font>

442
00:17:41,760 --> 00:17:44,879
executed<font color="#CCCCCC"> but</font><font color="#E5E5E5"> usually for security</font>

443
00:17:43,500 --> 00:17:48,360
monitoring you're more interested in

444
00:17:44,880 --> 00:17:54,270
like<font color="#E5E5E5"> a log of all</font><font color="#CCCCCC"> the kernel events that</font>

445
00:17:48,360 --> 00:17:57,030
of that have happened<font color="#E5E5E5"> so building on top</font>

446
00:17:54,270 --> 00:17:59,430
of<font color="#E5E5E5"> F trace and</font><font color="#CCCCCC"> perfe vents we can use a</font>

447
00:17:57,030 --> 00:18:02,220
feature in more<font color="#E5E5E5"> recent versions of the</font>

448
00:17:59,430 --> 00:18:03,960
kernel called<font color="#E5E5E5"> EVP</font><font color="#CCCCCC"> F or extended Berkley</font>

449
00:18:02,220 --> 00:18:04,480
packet filters so if you've<font color="#E5E5E5"> ever used</font>

450
00:18:03,960 --> 00:18:08,260
<font color="#CCCCCC">tea</font>

451
00:18:04,480 --> 00:18:10,210
<font color="#CCCCCC">to be dumped or iptables you're using</font>

452
00:18:08,260 --> 00:18:11,980
<font color="#CCCCCC">Berkeley packet filters and this is</font>

453
00:18:10,210 --> 00:18:13,840
actually a virtual<font color="#CCCCCC"> machine that's</font><font color="#E5E5E5"> inside</font>

454
00:18:11,980 --> 00:18:16,720
the kernel<font color="#E5E5E5"> and it has just a few</font>

455
00:18:13,840 --> 00:18:18,790
registers<font color="#E5E5E5"> and it's it's very it's very</font>

456
00:18:16,720 --> 00:18:20,620
basic<font color="#E5E5E5"> but allows you to inject byte code</font>

457
00:18:18,790 --> 00:18:22,690
into the kernel<font color="#CCCCCC"> without actually writing</font>

458
00:18:20,620 --> 00:18:25,770
<font color="#E5E5E5">a custom kernel module and why this is</font>

459
00:18:22,690 --> 00:18:28,660
really<font color="#CCCCCC"> cool</font><font color="#E5E5E5"> is because it allows you to</font>

460
00:18:25,770 --> 00:18:30,610
do the exact<font color="#CCCCCC"> computation you want inside</font>

461
00:18:28,660 --> 00:18:33,130
<font color="#CCCCCC">the kernel</font><font color="#E5E5E5"> because the</font><font color="#CCCCCC"> built-in features</font>

462
00:18:30,610 --> 00:18:34,689
<font color="#E5E5E5">of the perf sauce subsystem and F trace</font>

463
00:18:33,130 --> 00:18:36,250
may not give you exactly what<font color="#E5E5E5"> you want</font>

464
00:18:34,690 --> 00:18:40,150
<font color="#CCCCCC">especially</font><font color="#E5E5E5"> since they were designed more</font>

465
00:18:36,250 --> 00:18:42,340
for performance monitoring so with

466
00:18:40,150 --> 00:18:45,340
extended<font color="#CCCCCC"> Berkley packet filters the</font>

467
00:18:42,340 --> 00:18:46,928
instruction set for BPF is extended<font color="#E5E5E5"> so</font>

468
00:18:45,340 --> 00:18:49,020
<font color="#CCCCCC">that you have additional registers</font><font color="#E5E5E5"> you</font>

469
00:18:46,929 --> 00:18:51,970
can have functions<font color="#E5E5E5"> within your byte code</font>

470
00:18:49,020 --> 00:18:54,340
and you<font color="#CCCCCC"> can do a little</font><font color="#E5E5E5"> bit more</font>

471
00:18:51,970 --> 00:18:57,750
sophisticated<font color="#E5E5E5"> work however you</font><font color="#CCCCCC"> still</font>

472
00:18:54,340 --> 00:18:59,860
<font color="#CCCCCC">can't you still can't do loops</font><font color="#E5E5E5"> and you</font>

473
00:18:57,750 --> 00:19:02,440
you still can't<font color="#CCCCCC"> your your code can't be</font>

474
00:18:59,860 --> 00:19:04,809
super complicated<font color="#E5E5E5"> so the the</font><font color="#CCCCCC"> basic</font>

475
00:19:02,440 --> 00:19:07,000
workflow here<font color="#E5E5E5"> is that you write an e BPF</font>

476
00:19:04,809 --> 00:19:10,629
program<font color="#CCCCCC"> you compile</font><font color="#E5E5E5"> it into the</font><font color="#CCCCCC"> byte</font>

477
00:19:07,000 --> 00:19:13,179
<font color="#E5E5E5">code using a tool chain that's based on</font>

478
00:19:10,630 --> 00:19:16,630
<font color="#E5E5E5">LLVM and then you can attach this byte</font>

479
00:19:13,179 --> 00:19:19,059
<font color="#E5E5E5">code to either a cape robe or a trace</font>

480
00:19:16,630 --> 00:19:21,220
<font color="#E5E5E5">point using a</font><font color="#CCCCCC"> BPF system column</font><font color="#E5E5E5"> and so</font>

481
00:19:19,059 --> 00:19:24,129
anytime that<font color="#CCCCCC"> trace</font><font color="#E5E5E5"> points or</font><font color="#CCCCCC"> k</font><font color="#E5E5E5"> probe is</font>

482
00:19:21,220 --> 00:19:26,860
hit the<font color="#E5E5E5"> BPF program that you attached</font>

483
00:19:24,130 --> 00:19:29,080
will be run and so this is<font color="#E5E5E5"> really great</font>

484
00:19:26,860 --> 00:19:30,610
<font color="#CCCCCC">because</font><font color="#E5E5E5"> no kernel module is required and</font>

485
00:19:29,080 --> 00:19:32,559
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can construct much more</font>

486
00:19:30,610 --> 00:19:36,040
sophisticated<font color="#E5E5E5"> analysis within</font><font color="#CCCCCC"> the kernel</font>

487
00:19:32,559 --> 00:19:38,080
<font color="#CCCCCC">the cons</font><font color="#E5E5E5"> are that there's this is a more</font>

488
00:19:36,040 --> 00:19:39,520
recent feature<font color="#E5E5E5"> and so it's not supported</font>

489
00:19:38,080 --> 00:19:42,490
in<font color="#E5E5E5"> order kernels there's kind</font><font color="#CCCCCC"> of a</font>

490
00:19:39,520 --> 00:19:44,530
spectrum<font color="#E5E5E5"> of BPF features from starting</font>

491
00:19:42,490 --> 00:19:46,840
<font color="#E5E5E5">back from kernel version</font><font color="#CCCCCC"> 318 up to like</font>

492
00:19:44,530 --> 00:19:50,559
<font color="#CCCCCC">the latest versions of</font><font color="#E5E5E5"> the kernel that</font>

493
00:19:46,840 --> 00:19:53,379
<font color="#E5E5E5">have added additional support for trace</font>

494
00:19:50,559 --> 00:19:58,240
points<font color="#E5E5E5"> and</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> before that</font><font color="#E5E5E5"> they</font>

495
00:19:53,380 --> 00:20:00,070
added<font color="#E5E5E5"> support for</font><font color="#CCCCCC"> K probes so usually</font>

496
00:19:58,240 --> 00:20:01,270
just like<font color="#E5E5E5"> with assembly code you're not</font>

497
00:20:00,070 --> 00:20:02,889
going to write assembly<font color="#CCCCCC"> code directly</font>

498
00:20:01,270 --> 00:20:05,500
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> use some sort of</font><font color="#CCCCCC"> tool kit</font>

499
00:20:02,890 --> 00:20:08,200
<font color="#E5E5E5">on top of that so there's an awesome</font>

500
00:20:05,500 --> 00:20:11,740
suite of tools called the BPF compiler

501
00:20:08,200 --> 00:20:13,000
<font color="#CCCCCC">collection and there's a whole</font>

502
00:20:11,740 --> 00:20:15,730
playground of tools that<font color="#E5E5E5"> you can try out</font>

503
00:20:13,000 --> 00:20:18,680
<font color="#CCCCCC">that are</font><font color="#E5E5E5"> really useful that allow you to</font>

504
00:20:15,730 --> 00:20:21,440
<font color="#E5E5E5">use BPF code to get data from</font>

505
00:20:18,680 --> 00:20:23,300
<font color="#E5E5E5">colonel in a really performant way so in</font>

506
00:20:21,440 --> 00:20:24,710
the attack<font color="#CCCCCC"> that we looked at</font><font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> we</font>

507
00:20:23,300 --> 00:20:28,669
saw that we were<font color="#CCCCCC"> interested in open</font>

508
00:20:24,710 --> 00:20:31,670
calls execs<font color="#E5E5E5"> and TCP data or connects so</font>

509
00:20:28,670 --> 00:20:34,730
for example in the BCC<font color="#E5E5E5"> toolkit the open</font>

510
00:20:31,670 --> 00:20:36,710
snoop<font color="#E5E5E5"> exec snoop</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> TCP connect are BPF</font>

511
00:20:34,730 --> 00:20:43,190
tools based tools that will give you

512
00:20:36,710 --> 00:20:49,280
<font color="#E5E5E5">that information so looking at an</font>

513
00:20:43,190 --> 00:20:51,380
<font color="#E5E5E5">example of a eb PF tool that can give us</font>

514
00:20:49,280 --> 00:20:53,149
<font color="#CCCCCC">information during</font><font color="#E5E5E5"> an attack</font><font color="#CCCCCC"> i ran a</font>

515
00:20:51,380 --> 00:20:55,490
program called file life during<font color="#E5E5E5"> the</font>

516
00:20:53,150 --> 00:20:58,490
<font color="#E5E5E5">Apache struts example that we ran</font>

517
00:20:55,490 --> 00:20:59,810
through earlier<font color="#E5E5E5"> and we can see that</font><font color="#CCCCCC"> so</font>

518
00:20:58,490 --> 00:21:03,230
what this file life program does is

519
00:20:59,810 --> 00:21:06,889
<font color="#E5E5E5">shows us really short-lived files</font><font color="#CCCCCC"> by</font>

520
00:21:03,230 --> 00:21:09,110
<font color="#E5E5E5">washing</font><font color="#CCCCCC"> for creates and then unlinks in</font>

521
00:21:06,890 --> 00:21:10,820
the kernel<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so we can see</font><font color="#E5E5E5"> that in</font>

522
00:21:09,110 --> 00:21:13,040
this<font color="#E5E5E5"> case the</font><font color="#CCCCCC"> the payload that</font><font color="#E5E5E5"> was</font>

523
00:21:10,820 --> 00:21:15,290
<font color="#E5E5E5">dropped with only lasted point oh one</font>

524
00:21:13,040 --> 00:21:18,490
seconds<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is something that</font><font color="#E5E5E5"> could</font>

525
00:21:15,290 --> 00:21:20,659
<font color="#CCCCCC">be a useful security signal for</font>

526
00:21:18,490 --> 00:21:28,520
observing payloads that<font color="#CCCCCC"> are written</font>

527
00:21:20,660 --> 00:21:30,320
executed and deleted immediately so in

528
00:21:28,520 --> 00:21:32,570
summary in terms of<font color="#E5E5E5"> data sources</font><font color="#CCCCCC"> k</font>

529
00:21:30,320 --> 00:21:35,360
probes and trace points are the<font color="#E5E5E5"> the best</font>

530
00:21:32,570 --> 00:21:37,700
<font color="#E5E5E5">approach</font><font color="#CCCCCC"> p trace is - has too much</font>

531
00:21:35,360 --> 00:21:40,070
overhead and writing<font color="#E5E5E5"> your own custom</font>

532
00:21:37,700 --> 00:21:43,160
kernel module while very flexible<font color="#CCCCCC"> isn't</font>

533
00:21:40,070 --> 00:21:46,010
necessary with<font color="#CCCCCC"> eb PF the</font><font color="#E5E5E5"> only issue</font><font color="#CCCCCC"> here</font>

534
00:21:43,160 --> 00:21:47,900
with<font color="#E5E5E5"> eb PF is that if you need to run on</font>

535
00:21:46,010 --> 00:21:51,020
<font color="#E5E5E5">an older kernel version it's it's you're</font>

536
00:21:47,900 --> 00:21:52,370
not<font color="#E5E5E5"> gonna be able to do that</font><font color="#CCCCCC"> and once</font>

537
00:21:51,020 --> 00:21:54,770
you've<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of figured</font><font color="#E5E5E5"> out how what data</font>

538
00:21:52,370 --> 00:22:00,110
you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to get out you can use</font><font color="#CCCCCC"> F trace</font>

539
00:21:54,770 --> 00:22:02,240
<font color="#CCCCCC">perf or EBP F so what</font><font color="#E5E5E5"> are some</font>

540
00:22:00,110 --> 00:22:03,830
<font color="#E5E5E5">challenges</font><font color="#CCCCCC"> that occur</font><font color="#E5E5E5"> in using these</font>

541
00:22:02,240 --> 00:22:07,000
tools<font color="#CCCCCC"> so one one</font><font color="#E5E5E5"> challenge is</font>

542
00:22:03,830 --> 00:22:09,740
<font color="#E5E5E5">containerization so a big benefit of</font>

543
00:22:07,000 --> 00:22:11,840
grabbing data from the<font color="#E5E5E5"> system call level</font>

544
00:22:09,740 --> 00:22:13,490
<font color="#CCCCCC">versus at the application log</font><font color="#E5E5E5"> level or</font>

545
00:22:11,840 --> 00:22:14,899
<font color="#CCCCCC">even the network level</font><font color="#E5E5E5"> is that the</font>

546
00:22:13,490 --> 00:22:17,900
system call level<font color="#E5E5E5"> you have a lot of</font>

547
00:22:14,900 --> 00:22:20,360
context<font color="#E5E5E5"> about which process process ran</font>

548
00:22:17,900 --> 00:22:21,440
which system call for<font color="#CCCCCC"> example right at</font>

549
00:22:20,360 --> 00:22:25,580
the network level you<font color="#E5E5E5"> don't necessarily</font>

550
00:22:21,440 --> 00:22:27,530
know which process is running the is

551
00:22:25,580 --> 00:22:29,600
<font color="#CCCCCC">sent the particular packet but at the</font>

552
00:22:27,530 --> 00:22:31,520
system call<font color="#E5E5E5"> level you can</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> that a</font>

553
00:22:29,600 --> 00:22:32,738
given<font color="#CCCCCC"> process</font><font color="#E5E5E5"> is doing this network</font>

554
00:22:31,520 --> 00:22:36,590
activity

555
00:22:32,739 --> 00:22:38,899
so one<font color="#E5E5E5"> thing we might want</font><font color="#CCCCCC"> to attach to</font>

556
00:22:36,590 --> 00:22:41,059
<font color="#CCCCCC">our monitoring is which container</font><font color="#E5E5E5"> is</font>

557
00:22:38,899 --> 00:22:43,518
running<font color="#CCCCCC"> that did this particular</font><font color="#E5E5E5"> system</font>

558
00:22:41,059 --> 00:22:46,009
call and this<font color="#E5E5E5"> is actually not easy to do</font>

559
00:22:43,519 --> 00:22:48,169
out of<font color="#E5E5E5"> the box</font><font color="#CCCCCC"> so a container is really</font>

560
00:22:46,009 --> 00:22:50,509
a user<font color="#E5E5E5"> space concept</font><font color="#CCCCCC"> which utilizes</font>

561
00:22:48,169 --> 00:22:52,820
<font color="#E5E5E5">several kernel and user space features</font>

562
00:22:50,509 --> 00:22:54,529
it's like so we're using<font color="#E5E5E5"> it uses</font>

563
00:22:52,820 --> 00:22:55,759
namespaces which provide isolation

564
00:22:54,529 --> 00:22:58,429
<font color="#CCCCCC">cgroups</font>

565
00:22:55,759 --> 00:23:02,210
which give us resource control and user

566
00:22:58,429 --> 00:23:03,379
space tools and file systems so the

567
00:23:02,210 --> 00:23:05,359
<font color="#E5E5E5">Linux kernel does not actually have</font><font color="#CCCCCC"> a</font>

568
00:23:03,379 --> 00:23:07,189
notion<font color="#E5E5E5"> of container ID and there have</font>

569
00:23:05,359 --> 00:23:09,710
been<font color="#E5E5E5"> a lot of proposed solutions one</font><font color="#CCCCCC"> is</font>

570
00:23:07,190 --> 00:23:12,440
to just<font color="#CCCCCC"> use the pid' namespace of the</font>

571
00:23:09,710 --> 00:23:14,629
<font color="#E5E5E5">unit process as the identifier for an</font>

572
00:23:12,440 --> 00:23:17,210
event and so every<font color="#CCCCCC"> system call is going</font>

573
00:23:14,629 --> 00:23:19,248
<font color="#E5E5E5">to be associated with some process ID</font>

574
00:23:17,210 --> 00:23:22,129
<font color="#E5E5E5">and every process ID will be in a</font>

575
00:23:19,249 --> 00:23:23,719
<font color="#E5E5E5">namespace</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> approach that's been</font>

576
00:23:22,129 --> 00:23:26,809
proposed and<font color="#E5E5E5"> there's some patches for</font>

577
00:23:23,719 --> 00:23:31,419
this are to use<font color="#E5E5E5"> allow the user space to</font>

578
00:23:26,809 --> 00:23:35,269
<font color="#E5E5E5">actually set the container ID and</font>

579
00:23:31,419 --> 00:23:38,179
because the concept of container is

580
00:23:35,269 --> 00:23:39,200
still kind of being defined<font color="#E5E5E5"> the the</font>

581
00:23:38,179 --> 00:23:42,649
kernel it doesn't really feel like

582
00:23:39,200 --> 00:23:43,820
responsible<font color="#E5E5E5"> for managing</font><font color="#CCCCCC"> that so this</font><font color="#E5E5E5"> is</font>

583
00:23:42,649 --> 00:23:45,408
<font color="#CCCCCC">something to kind of</font><font color="#E5E5E5"> keep in mind if</font>

584
00:23:43,820 --> 00:23:51,439
you're interested in this type<font color="#E5E5E5"> of</font>

585
00:23:45,409 --> 00:23:53,269
monitoring so in summary<font color="#E5E5E5"> a Linux system</font>

586
00:23:51,440 --> 00:23:55,489
<font color="#CCCCCC">calls</font><font color="#E5E5E5"> are the universal API for</font>

587
00:23:53,269 --> 00:23:58,309
<font color="#E5E5E5">infrastructure the security signal value</font>

588
00:23:55,489 --> 00:24:00,799
is really high<font color="#E5E5E5"> but you have to filter</font>

589
00:23:58,309 --> 00:24:04,039
<font color="#E5E5E5">through a large amount of noise</font><font color="#CCCCCC"> and</font>

590
00:24:00,799 --> 00:24:05,779
finally<font color="#CCCCCC"> EB bf tools allow for focus</font>

591
00:24:04,039 --> 00:24:07,940
detection in the<font color="#E5E5E5"> kernel but you have to</font>

592
00:24:05,779 --> 00:24:11,359
use a more recent<font color="#CCCCCC"> version of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> kernel</font>

593
00:24:07,940 --> 00:24:14,119
in order to take<font color="#CCCCCC"> advantage</font><font color="#E5E5E5"> of it and if</font>

594
00:24:11,359 --> 00:24:15,769
you're<font color="#E5E5E5"> interested in more</font><font color="#CCCCCC"> information</font>

595
00:24:14,119 --> 00:24:18,738
<font color="#E5E5E5">about this</font><font color="#CCCCCC"> i've attached some resources</font>

596
00:24:15,769 --> 00:24:21,139
<font color="#CCCCCC">to some these slides this</font><font color="#E5E5E5"> is you know</font>

597
00:24:18,739 --> 00:24:22,429
<font color="#CCCCCC">i'm a user</font><font color="#E5E5E5"> of these tools i haven't been</font>

598
00:24:21,139 --> 00:24:25,668
developing them<font color="#E5E5E5"> and there's some</font><font color="#CCCCCC"> awesome</font>

599
00:24:22,429 --> 00:24:27,820
resources<font color="#E5E5E5"> online</font><font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> it thanks a</font>

600
00:24:25,669 --> 00:24:27,820
lot

601
00:24:29,170 --> 00:24:32,689
[Applause]

602
00:24:34,300 --> 00:24:42,919
we have a ton of time for questions if

603
00:24:37,550 --> 00:24:45,139
anyone has<font color="#E5E5E5"> any</font><font color="#CCCCCC"> questions hi</font>

604
00:24:42,920 --> 00:24:46,880
so how would<font color="#CCCCCC"> you recommend mitigating</font>

605
00:24:45,140 --> 00:24:50,000
<font color="#E5E5E5">some of the attack surface introduced by</font>

606
00:24:46,880 --> 00:24:52,700
<font color="#CCCCCC">EB PF so that's a good question</font>

607
00:24:50,000 --> 00:24:55,400
so your<font color="#E5E5E5"> your the question</font><font color="#CCCCCC"> is if you're</font>

608
00:24:52,700 --> 00:24:57,860
using<font color="#CCCCCC"> EBP F you're introducing an</font>

609
00:24:55,400 --> 00:25:00,020
additional attack surface into<font color="#CCCCCC"> the</font>

610
00:24:57,860 --> 00:25:03,620
kernel<font color="#CCCCCC"> and that's that's certainly</font>

611
00:25:00,020 --> 00:25:07,340
<font color="#CCCCCC">something to consider one one approach</font>

612
00:25:03,620 --> 00:25:11,899
is<font color="#CCCCCC"> to use containers so you you you</font>

613
00:25:07,340 --> 00:25:14,419
<font color="#E5E5E5">don't allow your certain containers to</font>

614
00:25:11,900 --> 00:25:16,280
use the BPF system call<font color="#E5E5E5"> so you block</font>

615
00:25:14,420 --> 00:25:18,860
<font color="#E5E5E5">them from doing</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> now that's going</font><font color="#CCCCCC"> to</font>

616
00:25:16,280 --> 00:25:21,110
not<font color="#E5E5E5"> that's going to limit attacks</font>

617
00:25:18,860 --> 00:25:23,750
<font color="#CCCCCC">they're actually using the BPF system</font>

618
00:25:21,110 --> 00:25:25,520
call<font color="#E5E5E5"> but if the attack</font><font color="#CCCCCC"> is information</font>

619
00:25:23,750 --> 00:25:27,590
stealing then it's not<font color="#E5E5E5"> going to mitigate</font>

620
00:25:25,520 --> 00:25:30,920
<font color="#CCCCCC">that and this is something i think that</font>

621
00:25:27,590 --> 00:25:34,699
like the the<font color="#E5E5E5"> BPF developers are very</font>

622
00:25:30,920 --> 00:25:36,500
aware<font color="#E5E5E5"> of that you're you're opening the</font>

623
00:25:34,700 --> 00:25:41,230
attack surface<font color="#E5E5E5"> but it is something that</font>

624
00:25:36,500 --> 00:25:41,230
<font color="#E5E5E5">should be considered that's</font><font color="#CCCCCC"> a good point</font>

625
00:25:54,640 --> 00:26:01,809
<font color="#E5E5E5">hey I wanted to</font><font color="#CCCCCC"> ask about detecting</font>

626
00:25:58,290 --> 00:26:04,360
<font color="#E5E5E5">speculative attacks like meltdown using</font>

627
00:26:01,809 --> 00:26:07,360
<font color="#E5E5E5">I think</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> use trace points and</font>

628
00:26:04,360 --> 00:26:11,020
branch prediction to catch any

629
00:26:07,360 --> 00:26:14,350
speculation<font color="#E5E5E5"> misses and anybody else</font>

630
00:26:11,020 --> 00:26:17,080
<font color="#E5E5E5">using a missed branch with trace points</font>

631
00:26:14,350 --> 00:26:20,889
do you<font color="#E5E5E5"> think that's gonna work</font>

632
00:26:17,080 --> 00:26:23,110
so I don't<font color="#CCCCCC"> I don't know so this is one</font>

633
00:26:20,890 --> 00:26:25,210
one thing that like the kind of<font color="#E5E5E5"> the the</font>

634
00:26:23,110 --> 00:26:27,790
<font color="#E5E5E5">indicators that like I was discussing</font>

635
00:26:25,210 --> 00:26:30,309
<font color="#E5E5E5">are very clear you know you see a</font>

636
00:26:27,790 --> 00:26:33,340
payload that's that's dropped and it's

637
00:26:30,309 --> 00:26:34,480
kind of<font color="#E5E5E5"> like it's it's not it's</font><font color="#CCCCCC"> it's</font>

638
00:26:33,340 --> 00:26:36,639
black<font color="#E5E5E5"> or white whether it's it's</font>

639
00:26:34,480 --> 00:26:39,130
malicious<font color="#E5E5E5"> or anomalous the the</font>

640
00:26:36,640 --> 00:26:42,520
techniques for detecting<font color="#E5E5E5"> meltdown</font>

641
00:26:39,130 --> 00:26:44,650
inspector<font color="#E5E5E5"> are often statistical so you</font>

642
00:26:42,520 --> 00:26:46,059
you're<font color="#E5E5E5"> looking</font><font color="#CCCCCC"> for anomalous page faults</font>

643
00:26:44,650 --> 00:26:47,830
or that<font color="#E5E5E5"> sort of thing so</font><font color="#CCCCCC"> it's it's</font>

644
00:26:46,059 --> 00:26:49,809
<font color="#E5E5E5">certainly it's certainly</font><font color="#CCCCCC"> doable but I</font>

645
00:26:47,830 --> 00:26:54,480
don't know how<font color="#E5E5E5"> general-purpose they are</font>

646
00:26:49,809 --> 00:26:54,480
<font color="#E5E5E5">in all cases thank you</font>

647
00:27:02,660 --> 00:27:06,470
thank you for<font color="#E5E5E5"> this talk this was</font>

648
00:27:04,100 --> 00:27:09,320
actually the<font color="#CCCCCC"> talk I wanted</font><font color="#E5E5E5"> to go to so I</font>

649
00:27:06,470 --> 00:27:12,500
really enjoyed it<font color="#E5E5E5"> I'm in a AWS</font>

650
00:27:09,320 --> 00:27:15,530
environment<font color="#CCCCCC"> we're running a bunt to you</font>

651
00:27:12,500 --> 00:27:18,560
know<font color="#CCCCCC"> 14-point Oh</font><font color="#E5E5E5"> for moving to</font><font color="#CCCCCC"> sixteen</font>

652
00:27:15,530 --> 00:27:19,730
point<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> for what you've mentioned here</font>

653
00:27:18,560 --> 00:27:22,820
are there any restrictions<font color="#CCCCCC"> or</font>

654
00:27:19,730 --> 00:27:25,790
<font color="#E5E5E5">limitations in the AWS environment well</font>

655
00:27:22,820 --> 00:27:28,250
we don't control<font color="#E5E5E5"> the hypervisor</font><font color="#CCCCCC"> so this</font>

656
00:27:25,790 --> 00:27:30,649
is all above the level of<font color="#E5E5E5"> the hypervisor</font>

657
00:27:28,250 --> 00:27:32,990
<font color="#CCCCCC">so the real restriction there</font><font color="#E5E5E5"> and the</font>

658
00:27:30,650 --> 00:27:34,820
environments you<font color="#CCCCCC"> describe are</font><font color="#E5E5E5"> the kernel</font>

659
00:27:32,990 --> 00:27:36,200
version you're<font color="#CCCCCC"> running</font><font color="#E5E5E5"> so if you're</font>

660
00:27:34,820 --> 00:27:38,780
running a more recent<font color="#E5E5E5"> version</font><font color="#CCCCCC"> of the</font>

661
00:27:36,200 --> 00:27:41,720
kernel<font color="#CCCCCC"> then the features some of</font><font color="#E5E5E5"> these</font>

662
00:27:38,780 --> 00:27:45,740
features<font color="#E5E5E5"> are available if you're using</font>

663
00:27:41,720 --> 00:27:47,150
the a you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> a server</font><font color="#CCCCCC"> lists if</font><font color="#E5E5E5"> you're</font>

664
00:27:45,740 --> 00:27:48,320
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> going really far into the future</font>

665
00:27:47,150 --> 00:27:51,320
of using server lists then yeah you

666
00:27:48,320 --> 00:27:52,399
can't use these features<font color="#CCCCCC"> so it sounds</font>

667
00:27:51,320 --> 00:27:53,750
<font color="#CCCCCC">like you're</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of in the sweet spot</font>

668
00:27:52,400 --> 00:28:00,890
<font color="#E5E5E5">where that is these are going to be</font>

669
00:27:53,750 --> 00:28:03,140
available hi<font color="#E5E5E5"> I had a question</font><font color="#CCCCCC"> so in your</font>

670
00:28:00,890 --> 00:28:06,050
example<font color="#E5E5E5"> you're profiling</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Apache</font>

671
00:28:03,140 --> 00:28:07,340
<font color="#E5E5E5">struts web server and it seems to be</font>

672
00:28:06,050 --> 00:28:11,840
<font color="#E5E5E5">like you know it's gonna be a ton of</font>

673
00:28:07,340 --> 00:28:14,060
calls<font color="#E5E5E5"> and do you have any let's say</font>

674
00:28:11,840 --> 00:28:16,730
advice as far as<font color="#E5E5E5"> automating</font><font color="#CCCCCC"> some of this</font>

675
00:28:14,060 --> 00:28:19,429
so that<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> not attempt to store</font>

676
00:28:16,730 --> 00:28:22,940
every system call but to develop<font color="#CCCCCC"> your</font>

677
00:28:19,430 --> 00:28:25,550
<font color="#E5E5E5">own signatures and upon detecting that</font>

678
00:28:22,940 --> 00:28:28,280
then<font color="#E5E5E5"> sending a notification or an</font><font color="#CCCCCC"> email</font>

679
00:28:25,550 --> 00:28:31,520
<font color="#E5E5E5">or</font><font color="#CCCCCC"> something you know limit that the</font>

680
00:28:28,280 --> 00:28:37,370
amount<font color="#E5E5E5"> of noise</font><font color="#CCCCCC"> really yeah sure so I</font>

681
00:28:31,520 --> 00:28:39,850
<font color="#E5E5E5">mean the the for for reducing the amount</font>

682
00:28:37,370 --> 00:28:42,139
of data<font color="#E5E5E5"> first</font><font color="#CCCCCC"> of all you don't want</font><font color="#E5E5E5"> to</font>

683
00:28:39,850 --> 00:28:43,730
record or listen to<font color="#E5E5E5"> every system call</font>

684
00:28:42,140 --> 00:28:45,230
that's that's the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing you want</font>

685
00:28:43,730 --> 00:28:47,000
to focus<font color="#E5E5E5"> on the ones</font><font color="#CCCCCC"> that are</font><font color="#E5E5E5"> really the</font>

686
00:28:45,230 --> 00:28:49,670
best security indicators another thing

687
00:28:47,000 --> 00:28:51,530
you don't need<font color="#E5E5E5"> to do is if you have a</font>

688
00:28:49,670 --> 00:28:54,100
file that's being read multiple times

689
00:28:51,530 --> 00:28:56,510
<font color="#E5E5E5">you only need to report that once</font>

690
00:28:54,100 --> 00:28:58,370
<font color="#E5E5E5">another approach is to use</font><font color="#CCCCCC"> whitelisting</font>

691
00:28:56,510 --> 00:29:00,620
so you have you<font color="#E5E5E5"> have a set</font><font color="#CCCCCC"> of processes</font>

692
00:28:58,370 --> 00:29:03,379
files or directories that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't care</font>

693
00:29:00,620 --> 00:29:05,959
<font color="#E5E5E5">about and a lot of the techniques that</font>

694
00:29:03,380 --> 00:29:07,850
<font color="#E5E5E5">have</font><font color="#CCCCCC"> been used in the the audit sub-sub</font>

695
00:29:05,960 --> 00:29:12,220
system can be<font color="#E5E5E5"> used here where you're</font>

696
00:29:07,850 --> 00:29:14,679
you're<font color="#CCCCCC"> looking for</font><font color="#E5E5E5"> indicators that are</font>

697
00:29:12,220 --> 00:29:17,530
more likely<font color="#E5E5E5"> to be anomalous</font>

698
00:29:14,680 --> 00:29:18,160
but it<font color="#E5E5E5"> there's no really one easy</font>

699
00:29:17,530 --> 00:29:19,149
<font color="#E5E5E5">solution</font>

700
00:29:18,160 --> 00:29:21,910
it's like often you're gonna have to

701
00:29:19,150 --> 00:29:27,640
tune based on the service or application

702
00:29:21,910 --> 00:29:28,960
you're running so recently<font color="#E5E5E5"> we were</font>

703
00:29:27,640 --> 00:29:34,150
<font color="#E5E5E5">struggling with Phipps</font>

704
00:29:28,960 --> 00:29:38,440
enabling<font color="#E5E5E5"> Phipps on EWS</font><font color="#CCCCCC"> so I</font><font color="#E5E5E5"> came across</font>

705
00:29:34,150 --> 00:29:40,600
using<font color="#E5E5E5"> three modules so would that be a</font>

706
00:29:38,440 --> 00:29:44,680
way of<font color="#E5E5E5"> mitigating such kind of risks</font>

707
00:29:40,600 --> 00:29:45,330
<font color="#E5E5E5">like using</font><font color="#CCCCCC"> signed</font><font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> modules pardon</font>

708
00:29:44,680 --> 00:29:51,490
<font color="#CCCCCC">KS</font>

709
00:29:45,330 --> 00:29:53,320
<font color="#E5E5E5">uses signed kernel modules so in in the</font>

710
00:29:51,490 --> 00:29:55,660
case of like the<font color="#CCCCCC"> the attack that I used</font>

711
00:29:53,320 --> 00:29:57,909
here<font color="#CCCCCC"> we</font><font color="#E5E5E5"> weren't actually exploiting</font>

712
00:29:55,660 --> 00:30:03,160
anything in the kernel<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we weren't</font>

713
00:29:57,910 --> 00:30:04,690
inserting a module<font color="#E5E5E5"> that was unsigned or</font>

714
00:30:03,160 --> 00:30:07,660
sign so we we didn't actually<font color="#E5E5E5"> have to</font>

715
00:30:04,690 --> 00:30:09,730
<font color="#E5E5E5">verify anything so really if you're</font>

716
00:30:07,660 --> 00:30:13,810
using<font color="#E5E5E5"> signed kernel modules that's</font>

717
00:30:09,730 --> 00:30:20,320
that's good but I'm not really<font color="#E5E5E5"> sure if</font>

718
00:30:13,810 --> 00:30:22,060
that's related<font color="#CCCCCC"> to this</font><font color="#E5E5E5"> exactly is there</font>

719
00:30:20,320 --> 00:30:27,129
a question in the<font color="#CCCCCC"> front</font><font color="#E5E5E5"> was one more</font>

720
00:30:22,060 --> 00:30:29,860
last<font color="#E5E5E5"> question so some work is</font><font color="#CCCCCC"> being done</font>

721
00:30:27,130 --> 00:30:32,980
<font color="#E5E5E5">to port</font><font color="#CCCCCC"> DTrace to the</font><font color="#E5E5E5"> Linux kernel</font><font color="#CCCCCC"> do</font>

722
00:30:29,860 --> 00:30:35,879
you have any idea whether that's going

723
00:30:32,980 --> 00:30:40,510
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> in sort of the</font><font color="#E5E5E5"> same space as</font><font color="#CCCCCC"> EPF</font>

724
00:30:35,880 --> 00:30:42,970
yes<font color="#CCCCCC"> and do you</font><font color="#E5E5E5"> have a prediction for</font>

725
00:30:40,510 --> 00:30:44,500
<font color="#E5E5E5">which one's gonna be</font><font color="#CCCCCC"> better so yeah II</font>

726
00:30:42,970 --> 00:30:47,280
<font color="#E5E5E5">BPF in some ways it's kind of like a</font>

727
00:30:44,500 --> 00:30:49,770
back to the future<font color="#CCCCCC"> version of dtrace</font><font color="#E5E5E5"> so</font>

728
00:30:47,280 --> 00:30:51,879
<font color="#CCCCCC">dtrace had a lot of features</font><font color="#E5E5E5"> that</font>

729
00:30:49,770 --> 00:30:53,710
included a higher-level language that

730
00:30:51,880 --> 00:30:55,200
you could more easily kind<font color="#E5E5E5"> of describe</font>

731
00:30:53,710 --> 00:30:59,880
exactly<font color="#E5E5E5"> the data you wanted to get out</font>

732
00:30:55,200 --> 00:31:02,260
and I think that they will probably

733
00:30:59,880 --> 00:31:05,230
converge in some way<font color="#E5E5E5"> I know that there's</font>

734
00:31:02,260 --> 00:31:06,879
<font color="#E5E5E5">work on higher level tools so kind of a</font>

735
00:31:05,230 --> 00:31:12,910
<font color="#CCCCCC">higher-level language to describe what</font>

736
00:31:06,880 --> 00:31:15,220
you want to get using<font color="#CCCCCC"> EB PF but I think</font>

737
00:31:12,910 --> 00:31:16,690
most<font color="#CCCCCC"> likely the</font><font color="#E5E5E5"> EB PF base tools are</font>

738
00:31:15,220 --> 00:31:18,060
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> more</font><font color="#E5E5E5"> useful just</font><font color="#CCCCCC"> because they</font>

739
00:31:16,690 --> 00:31:20,770
they<font color="#CCCCCC"> just have more momentum right now</font>

740
00:31:18,060 --> 00:31:22,300
<font color="#E5E5E5">but I think there definitely should</font><font color="#CCCCCC"> be</font>

741
00:31:20,770 --> 00:31:25,870
cross-pollination of ideas between the

742
00:31:22,300 --> 00:31:28,629
two<font color="#E5E5E5"> two projects yeah</font>

743
00:31:25,870 --> 00:31:32,668
<font color="#E5E5E5">okay that's all we have time for</font>

744
00:31:28,630 --> 00:31:32,669
questions<font color="#E5E5E5"> let's</font><font color="#CCCCCC"> thank the speaker again</font>

