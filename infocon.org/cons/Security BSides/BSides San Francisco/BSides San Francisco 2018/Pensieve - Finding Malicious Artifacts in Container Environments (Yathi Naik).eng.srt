1
00:00:03,620 --> 00:00:06,740
[Music]

2
00:00:19,650 --> 00:00:25,590
thank you hello<font color="#E5E5E5"> everybody</font>

3
00:00:23,280 --> 00:00:27,990
thanks<font color="#E5E5E5"> for coming out</font><font color="#CCCCCC"> to my</font><font color="#E5E5E5"> talk I'm</font>

4
00:00:25,590 --> 00:00:30,480
Yeti<font color="#CCCCCC"> I work at stack</font><font color="#E5E5E5"> rocks</font><font color="#CCCCCC"> it's a small</font>

5
00:00:27,990 --> 00:00:32,430
<font color="#E5E5E5">start-up and we do</font><font color="#CCCCCC"> containers security</font>

6
00:00:30,480 --> 00:00:34,140
and container<font color="#CCCCCC"> you're always on the</font>

7
00:00:32,430 --> 00:00:36,989
<font color="#E5E5E5">bleeding edge of container security</font>

8
00:00:34,140 --> 00:00:39,210
research so this<font color="#E5E5E5"> is my talk and see if</font>

9
00:00:36,989 --> 00:00:43,949
finding malicious<font color="#E5E5E5"> artifacts and</font>

10
00:00:39,210 --> 00:00:45,809
container environments so for<font color="#E5E5E5"> all you</font>

11
00:00:43,949 --> 00:00:48,960
Harry Potter fans out there<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a</font>

12
00:00:45,809 --> 00:00:52,019
<font color="#CCCCCC">code from Dumbledore I use the</font><font color="#E5E5E5"> pen</font><font color="#CCCCCC"> sieve</font>

13
00:00:48,960 --> 00:00:54,420
one simply siphons the<font color="#CCCCCC"> excess thoughts</font>

14
00:00:52,020 --> 00:00:56,970
from one's mind<font color="#E5E5E5"> it becomes easier to</font>

15
00:00:54,420 --> 00:00:59,610
<font color="#E5E5E5">spot</font><font color="#CCCCCC"> patterns and links</font><font color="#E5E5E5"> when they are in</font>

16
00:00:56,970 --> 00:01:01,610
<font color="#E5E5E5">this form wouldn't it</font><font color="#CCCCCC"> be great if we had</font>

17
00:00:59,610 --> 00:01:04,080
<font color="#E5E5E5">a pin sieve for container environments</font>

18
00:01:01,610 --> 00:01:06,149
as we should<font color="#E5E5E5"> we</font><font color="#CCCCCC"> shall see in the stock</font>

19
00:01:04,080 --> 00:01:07,619
we really do need a tool that<font color="#E5E5E5"> transforms</font>

20
00:01:06,149 --> 00:01:10,410
containers into a form that<font color="#E5E5E5"> makes it</font>

21
00:01:07,619 --> 00:01:14,970
easier<font color="#CCCCCC"> for</font><font color="#E5E5E5"> us</font><font color="#CCCCCC"> to spot patterns</font><font color="#E5E5E5"> and links</font>

22
00:01:10,410 --> 00:01:17,340
<font color="#E5E5E5">so</font><font color="#CCCCCC"> imagine you're running</font><font color="#E5E5E5"> your workloads</font>

23
00:01:14,970 --> 00:01:19,110
on AWS<font color="#E5E5E5"> you have a bunch of virtual</font>

24
00:01:17,340 --> 00:01:20,670
machines<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> recently deployed</font>

25
00:01:19,110 --> 00:01:23,670
containers to better<font color="#E5E5E5"> utilize your</font>

26
00:01:20,670 --> 00:01:25,350
resources<font color="#E5E5E5"> you get a call at</font><font color="#CCCCCC"> 2:00 a.m. in</font>

27
00:01:23,670 --> 00:01:27,030
the morning<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> found out that</font>

28
00:01:25,350 --> 00:01:28,770
<font color="#E5E5E5">you one of</font><font color="#CCCCCC"> the containers is breached</font>

29
00:01:27,030 --> 00:01:31,200
<font color="#E5E5E5">like what do you do for incident</font>

30
00:01:28,770 --> 00:01:32,910
<font color="#E5E5E5">response so containers have become</font>

31
00:01:31,200 --> 00:01:35,520
really<font color="#E5E5E5"> popular</font><font color="#CCCCCC"> among developers and</font>

32
00:01:32,910 --> 00:01:37,890
<font color="#CCCCCC">devops it's much faster</font><font color="#E5E5E5"> to run a</font>

33
00:01:35,520 --> 00:01:39,569
container<font color="#E5E5E5"> compared to your virtual</font>

34
00:01:37,890 --> 00:01:42,270
machine<font color="#E5E5E5"> and it comes at a lower disk</font>

35
00:01:39,569 --> 00:01:44,429
footprint as more and<font color="#CCCCCC"> more and</font>

36
00:01:42,270 --> 00:01:47,598
infrastructures adopt containers<font color="#E5E5E5"> the</font>

37
00:01:44,429 --> 00:01:49,770
incentives to<font color="#E5E5E5"> attack them also increases</font>

38
00:01:47,599 --> 00:01:52,170
security<font color="#CCCCCC"> is one of the major</font><font color="#E5E5E5"> concerns</font>

39
00:01:49,770 --> 00:01:53,970
when it<font color="#E5E5E5"> comes to deploying containers in</font>

40
00:01:52,170 --> 00:01:56,880
production<font color="#E5E5E5"> and industry is still</font>

41
00:01:53,970 --> 00:01:59,119
gathering<font color="#E5E5E5"> slow momentum there and this</font>

42
00:01:56,880 --> 00:02:02,729
<font color="#E5E5E5">is even so true for Incident Response</font>

43
00:01:59,119 --> 00:02:04,649
<font color="#E5E5E5">forensic analysis and you know tools and</font>

44
00:02:02,729 --> 00:02:08,369
techniques in container environments are

45
00:02:04,649 --> 00:02:10,889
<font color="#CCCCCC">barely known or even explored so this</font>

46
00:02:08,369 --> 00:02:14,819
talk is more<font color="#E5E5E5"> about like how do we do</font>

47
00:02:10,889 --> 00:02:16,920
forensics and containers existing tools

48
00:02:14,819 --> 00:02:19,230
and techniques work well<font color="#E5E5E5"> with virtual</font>

49
00:02:16,920 --> 00:02:20,309
machines<font color="#CCCCCC"> but it's not so efficient when</font>

50
00:02:19,230 --> 00:02:22,530
it<font color="#CCCCCC"> comes to containers</font>

51
00:02:20,310 --> 00:02:23,940
imagine having<font color="#E5E5E5"> to snapshot the entire</font>

52
00:02:22,530 --> 00:02:25,680
<font color="#E5E5E5">hosts memory in order</font><font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at a</font>

53
00:02:23,940 --> 00:02:27,090
single<font color="#E5E5E5"> process or even</font><font color="#CCCCCC"> when your</font>

54
00:02:25,680 --> 00:02:30,030
workloads are entirely on container

55
00:02:27,090 --> 00:02:31,680
<font color="#E5E5E5">managed services like AWS</font><font color="#CCCCCC"> Fargate</font><font color="#E5E5E5"> where</font>

56
00:02:30,030 --> 00:02:34,049
you don't even<font color="#E5E5E5"> have the luxury</font>

57
00:02:31,680 --> 00:02:37,319
<font color="#E5E5E5">to run</font><font color="#CCCCCC"> host memory capture tools like</font>

58
00:02:34,049 --> 00:02:39,329
<font color="#CCCCCC">Linux memory extractor</font><font color="#E5E5E5"> for example so</font>

59
00:02:37,319 --> 00:02:41,969
<font color="#E5E5E5">existing techniques don't fundamentally</font>

60
00:02:39,329 --> 00:02:45,840
<font color="#E5E5E5">change but they need adjustments to make</font>

61
00:02:41,969 --> 00:02:47,700
sense of container artifacts<font color="#E5E5E5"> so imagine</font>

62
00:02:45,840 --> 00:02:49,469
having<font color="#E5E5E5"> to like if you have to extract</font>

63
00:02:47,700 --> 00:02:51,810
<font color="#E5E5E5">evidence from a single container there's</font>

64
00:02:49,469 --> 00:02:52,950
no tailor-made solutions when there are

65
00:02:51,810 --> 00:02:55,799
hundreds of containers<font color="#CCCCCC"> running on the</font>

66
00:02:52,950 --> 00:02:58,709
host<font color="#E5E5E5"> so in this talk I'll describe what</font>

67
00:02:55,799 --> 00:03:00,840
<font color="#CCCCCC">considerations</font><font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to make when it</font>

68
00:02:58,709 --> 00:03:02,519
<font color="#CCCCCC">comes to containers I'll</font><font color="#E5E5E5"> first give you</font>

69
00:03:00,840 --> 00:03:06,629
an overview of docker containers and

70
00:03:02,519 --> 00:03:08,370
then outline some of<font color="#E5E5E5"> the methods you can</font>

71
00:03:06,629 --> 00:03:12,780
use to<font color="#E5E5E5"> gather</font><font color="#CCCCCC"> evidence and correlate</font>

72
00:03:08,370 --> 00:03:15,599
them to specific containers so docker is

73
00:03:12,780 --> 00:03:17,639
an<font color="#CCCCCC"> open source platform</font><font color="#E5E5E5"> to easily manage</font>

74
00:03:15,599 --> 00:03:19,048
<font color="#CCCCCC">your darker containers and what are</font>

75
00:03:17,639 --> 00:03:22,379
containers containers are basically a

76
00:03:19,049 --> 00:03:24,299
bunch of sandbox<font color="#E5E5E5"> processes they</font><font color="#CCCCCC"> are</font>

77
00:03:22,379 --> 00:03:26,790
given an illusion of isolation using

78
00:03:24,299 --> 00:03:30,299
<font color="#E5E5E5">Linux abstractions called as C groups</font>

79
00:03:26,790 --> 00:03:31,858
and namespaces in<font color="#E5E5E5"> darkus terminology</font>

80
00:03:30,299 --> 00:03:34,530
though<font color="#CCCCCC"> a container is just an</font>

81
00:03:31,859 --> 00:03:36,389
instantiation of<font color="#E5E5E5"> an image an image is</font>

82
00:03:34,530 --> 00:03:38,190
<font color="#E5E5E5">basically a file that encapsulate all</font>

83
00:03:36,389 --> 00:03:41,729
the metadata you<font color="#E5E5E5"> read and you need to</font>

84
00:03:38,190 --> 00:03:43,829
create<font color="#CCCCCC"> a bunch of processes</font><font color="#E5E5E5"> and darker</font>

85
00:03:41,729 --> 00:03:46,099
identifies containers<font color="#E5E5E5"> using this unique</font>

86
00:03:43,829 --> 00:03:49,280
<font color="#CCCCCC">identifier</font><font color="#E5E5E5"> called as container ID and</font>

87
00:03:46,099 --> 00:03:52,470
images are identified by image ID

88
00:03:49,280 --> 00:03:56,359
<font color="#E5E5E5">having these IDs makes it easier to</font>

89
00:03:52,470 --> 00:03:56,359
correlate artifacts found in containers

90
00:03:56,629 --> 00:04:03,899
<font color="#E5E5E5">so what are namespaces namespaces</font>

91
00:04:00,900 --> 00:04:06,540
basically implement<font color="#E5E5E5"> resource I process</font>

92
00:04:03,900 --> 00:04:09,090
<font color="#CCCCCC">isolation it limits water risk what a</font>

93
00:04:06,540 --> 00:04:12,750
<font color="#E5E5E5">process can see in terms of resources</font>

94
00:04:09,090 --> 00:04:16,019
<font color="#E5E5E5">such as files users or even file</font>

95
00:04:12,750 --> 00:04:18,449
directories<font color="#E5E5E5"> and so on for</font><font color="#CCCCCC"> example like</font>

96
00:04:16,019 --> 00:04:21,509
the<font color="#CCCCCC"> bid namespace control speed mapping</font>

97
00:04:18,449 --> 00:04:24,270
and the net-net<font color="#E5E5E5"> namespace allows</font><font color="#CCCCCC"> Network</font>

98
00:04:21,509 --> 00:04:26,039
isolation and so on<font color="#E5E5E5"> you could list all</font>

99
00:04:24,270 --> 00:04:28,799
the<font color="#E5E5E5"> namespaces available on Linux under</font>

100
00:04:26,039 --> 00:04:31,979
the proc file system here's an<font color="#E5E5E5"> example</font>

101
00:04:28,800 --> 00:04:34,199
<font color="#E5E5E5">where I create a new namespace and run</font>

102
00:04:31,979 --> 00:04:36,479
bash under it if you run a PS command

103
00:04:34,199 --> 00:04:38,430
<font color="#CCCCCC">you</font><font color="#E5E5E5"> will see that bash is mapped to</font><font color="#CCCCCC"> PP</font>

104
00:04:36,479 --> 00:04:40,950
<font color="#CCCCCC">ID one but it's obviously mapped to a</font>

105
00:04:38,430 --> 00:04:42,479
different<font color="#E5E5E5"> PID on the host imagine</font><font color="#CCCCCC"> you're</font>

106
00:04:40,950 --> 00:04:44,349
looking<font color="#CCCCCC"> at some logs produced by a</font>

107
00:04:42,479 --> 00:04:46,900
process running<font color="#E5E5E5"> in a container</font>

108
00:04:44,350 --> 00:04:48,160
the<font color="#E5E5E5"> pits log in in those</font><font color="#CCCCCC"> logs might</font>

109
00:04:46,900 --> 00:04:50,109
appear differently

110
00:04:48,160 --> 00:04:52,890
different than<font color="#CCCCCC"> the hosts so having the</font>

111
00:04:50,110 --> 00:04:58,090
the context of<font color="#E5E5E5"> hostname space makes</font>

112
00:04:52,890 --> 00:04:59,890
correlating them easy and control groups

113
00:04:58,090 --> 00:05:01,390
or<font color="#CCCCCC"> C</font><font color="#E5E5E5"> groups are another</font><font color="#CCCCCC"> real enix</font>

114
00:04:59,890 --> 00:05:03,580
abstraction<font color="#CCCCCC"> that have been there for a</font>

115
00:05:01,390 --> 00:05:06,969
long<font color="#CCCCCC"> time and they implement quotas</font><font color="#E5E5E5"> for</font>

116
00:05:03,580 --> 00:05:10,800
processes so one can limit how<font color="#CCCCCC"> much</font>

117
00:05:06,970 --> 00:05:13,960
memory<font color="#E5E5E5"> a process consumes or how much</font>

118
00:05:10,800 --> 00:05:16,930
child<font color="#E5E5E5"> processes that they can fork you</font>

119
00:05:13,960 --> 00:05:19,030
know they get they they limit what<font color="#E5E5E5"> abuse</font>

120
00:05:16,930 --> 00:05:22,510
one can do and they also track resource

121
00:05:19,030 --> 00:05:24,760
usage<font color="#E5E5E5"> there are almost like</font><font color="#CCCCCC"> 12c groups</font>

122
00:05:22,510 --> 00:05:27,390
in<font color="#CCCCCC"> Linux today and they represent</font>

123
00:05:24,760 --> 00:05:30,250
various subsystems like devices memory

124
00:05:27,390 --> 00:05:33,969
<font color="#CCCCCC">how many processes you can</font><font color="#E5E5E5"> you can fork</font>

125
00:05:30,250 --> 00:05:35,470
and so on here's an<font color="#E5E5E5"> example of creating</font>

126
00:05:33,970 --> 00:05:37,990
a memory<font color="#CCCCCC"> C group and limiting it to</font>

127
00:05:35,470 --> 00:05:41,710
<font color="#E5E5E5">hundred bytes</font><font color="#CCCCCC"> it's an unrealistic</font>

128
00:05:37,990 --> 00:05:44,200
example but it's just an example<font color="#CCCCCC"> C</font>

129
00:05:41,710 --> 00:05:45,549
<font color="#E5E5E5">groups don't impact forensic analysis so</font>

130
00:05:44,200 --> 00:05:47,229
much but they definitely give you more

131
00:05:45,550 --> 00:05:52,150
context on<font color="#CCCCCC"> how much resource</font><font color="#E5E5E5"> your</font>

132
00:05:47,230 --> 00:05:54,820
containers are using so it's important

133
00:05:52,150 --> 00:05:58,539
it's important to understand how<font color="#E5E5E5"> files</font>

134
00:05:54,820 --> 00:06:00,219
are modified in<font color="#E5E5E5"> darker containers so</font>

135
00:05:58,540 --> 00:06:02,230
that<font color="#CCCCCC"> you can perform forensic analysis</font>

136
00:06:00,220 --> 00:06:03,580
and you can reconstruct files and

137
00:06:02,230 --> 00:06:07,030
correlate them better<font color="#E5E5E5"> to a specific</font>

138
00:06:03,580 --> 00:06:09,039
container docker containers use

139
00:06:07,030 --> 00:06:12,190
specialized file system drivers<font color="#CCCCCC"> to</font>

140
00:06:09,040 --> 00:06:14,410
access files and<font color="#E5E5E5"> they're based on what</font>

141
00:06:12,190 --> 00:06:16,090
is<font color="#E5E5E5"> known as the layered file system so</font>

142
00:06:14,410 --> 00:06:17,710
what is<font color="#CCCCCC"> a layered file system</font><font color="#E5E5E5"> layered</font>

143
00:06:16,090 --> 00:06:20,200
file system is<font color="#E5E5E5"> basically a file system</font>

144
00:06:17,710 --> 00:06:22,570
driver that gives you the ability<font color="#E5E5E5"> to</font>

145
00:06:20,200 --> 00:06:25,060
<font color="#E5E5E5">create like a single unified file system</font>

146
00:06:22,570 --> 00:06:27,280
out<font color="#E5E5E5"> of different layers and on the</font>

147
00:06:25,060 --> 00:06:29,860
<font color="#CCCCCC">right-hand side</font><font color="#E5E5E5"> here you see an example</font>

148
00:06:27,280 --> 00:06:32,500
<font color="#CCCCCC">of</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> docker</font><font color="#E5E5E5"> image basically it's</font>

149
00:06:29,860 --> 00:06:34,870
composed<font color="#E5E5E5"> of various layers and when a</font>

150
00:06:32,500 --> 00:06:36,760
<font color="#E5E5E5">container is</font><font color="#CCCCCC"> instantiated a thin reader</font>

151
00:06:34,870 --> 00:06:39,670
layer is<font color="#E5E5E5"> created and it's set as a</font>

152
00:06:36,760 --> 00:06:41,590
topmost layer<font color="#E5E5E5"> and all the rights that go</font>

153
00:06:39,670 --> 00:06:44,200
through the<font color="#E5E5E5"> container are actually</font>

154
00:06:41,590 --> 00:06:45,880
<font color="#E5E5E5">executed in this topmost layer but all</font>

155
00:06:44,200 --> 00:06:49,060
the underlying<font color="#E5E5E5"> layers remain read-only</font>

156
00:06:45,880 --> 00:06:49,780
<font color="#CCCCCC">and they they use the strategy callers</font>

157
00:06:49,060 --> 00:06:51,850
copy-on-write

158
00:06:49,780 --> 00:06:57,070
to modify<font color="#E5E5E5"> files that are present in one</font>

159
00:06:51,850 --> 00:06:58,660
of<font color="#E5E5E5"> these layers basically and on the</font>

160
00:06:57,070 --> 00:07:01,750
hand side you<font color="#CCCCCC"> see an example of</font>

161
00:06:58,660 --> 00:07:03,100
<font color="#E5E5E5">dockerfile dr. fire basically</font><font color="#CCCCCC"> is a file</font>

162
00:07:01,750 --> 00:07:08,080
<font color="#CCCCCC">that captures all the instructions that</font>

163
00:07:03,100 --> 00:07:10,510
<font color="#E5E5E5">you</font><font color="#CCCCCC"> need to create a darker image</font><font color="#E5E5E5"> here's</font>

164
00:07:08,080 --> 00:07:13,510
<font color="#CCCCCC">another example</font><font color="#E5E5E5"> of a layered file system</font>

165
00:07:10,510 --> 00:07:15,400
known<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Ola FS and it comes as a</font>

166
00:07:13,510 --> 00:07:19,539
default in the latest versions of darker

167
00:07:15,400 --> 00:07:22,000
an overlay FS is basically similar<font color="#E5E5E5"> to a</font>

168
00:07:19,540 --> 00:07:25,030
<font color="#E5E5E5">u FS but it's much faster and it comes</font>

169
00:07:22,000 --> 00:07:28,120
<font color="#CCCCCC">with a simpler implementation</font><font color="#E5E5E5"> here you</font>

170
00:07:25,030 --> 00:07:30,369
see<font color="#E5E5E5"> that it has basically two layers one</font>

171
00:07:28,120 --> 00:07:33,300
<font color="#E5E5E5">is called the lower directory or the</font>

172
00:07:30,370 --> 00:07:37,450
image layer which remains read-only<font color="#E5E5E5"> and</font>

173
00:07:33,300 --> 00:07:39,130
the upper Dietary is<font color="#E5E5E5"> readwrite and the</font>

174
00:07:37,450 --> 00:07:43,500
<font color="#E5E5E5">merged directory gives you like a</font>

175
00:07:39,130 --> 00:07:43,500
uniform<font color="#E5E5E5"> view of the file system</font><font color="#CCCCCC"> the</font>

176
00:07:44,670 --> 00:07:48,490
<font color="#CCCCCC">memory layout of a process running</font>

177
00:07:46,780 --> 00:07:51,640
<font color="#E5E5E5">inside a container remains pretty much</font>

178
00:07:48,490 --> 00:07:53,740
<font color="#E5E5E5">the same it</font><font color="#CCCCCC"> has the usual stack heap</font>

179
00:07:51,640 --> 00:07:57,550
data and text<font color="#CCCCCC"> segment like any other</font>

180
00:07:53,740 --> 00:07:59,770
Linux process but we need we really<font color="#E5E5E5"> need</font>

181
00:07:57,550 --> 00:08:01,900
tools<font color="#E5E5E5"> that can actually gather evidence</font>

182
00:07:59,770 --> 00:08:08,020
<font color="#E5E5E5">from a single process rather than having</font>

183
00:08:01,900 --> 00:08:10,630
<font color="#CCCCCC">to snapshot the entire host memory so</font>

184
00:08:08,020 --> 00:08:13,719
when it comes to disk forensics on a

185
00:08:10,630 --> 00:08:16,630
docker host<font color="#CCCCCC"> it's pretty much the same</font><font color="#E5E5E5"> as</font>

186
00:08:13,720 --> 00:08:19,060
you<font color="#CCCCCC"> do it on a regular system</font><font color="#E5E5E5"> you'd</font>

187
00:08:16,630 --> 00:08:22,450
<font color="#E5E5E5">ideally create like a disk dump using DD</font>

188
00:08:19,060 --> 00:08:24,220
command<font color="#E5E5E5"> and ideally the main memory but</font>

189
00:08:22,450 --> 00:08:26,080
using traditional tools<font color="#E5E5E5"> will not give</font>

190
00:08:24,220 --> 00:08:30,040
you<font color="#E5E5E5"> a complete picture unless the</font>

191
00:08:26,080 --> 00:08:30,580
specifics or darker are considered so

192
00:08:30,040 --> 00:08:32,050
<font color="#E5E5E5">docker</font>

193
00:08:30,580 --> 00:08:34,270
there are several issues one must

194
00:08:32,049 --> 00:08:36,760
consider when you perform forensic

195
00:08:34,270 --> 00:08:38,799
analysis on a docker host like I

196
00:08:36,760 --> 00:08:40,750
mentioned docker accesses files through

197
00:08:38,799 --> 00:08:42,760
specialized file system drivers<font color="#E5E5E5"> which</font>

198
00:08:40,750 --> 00:08:44,650
don't<font color="#E5E5E5"> map</font><font color="#CCCCCC"> to a block device</font><font color="#E5E5E5"> and this</font>

199
00:08:42,760 --> 00:08:47,710
makes mapping recovered files to a

200
00:08:44,650 --> 00:08:49,180
specific container tricky and files

201
00:08:47,710 --> 00:08:51,580
could be deleted from the<font color="#CCCCCC"> readwrite</font>

202
00:08:49,180 --> 00:08:54,069
layer or<font color="#CCCCCC"> the read-only layer which must</font>

203
00:08:51,580 --> 00:08:55,840
be<font color="#CCCCCC"> considered and the dog the container</font>

204
00:08:54,070 --> 00:08:58,480
<font color="#E5E5E5">itself could be dead which wipes out</font>

205
00:08:55,840 --> 00:09:03,340
most<font color="#CCCCCC"> of the metadata</font><font color="#E5E5E5"> and this makes for</font>

206
00:08:58,480 --> 00:09:05,050
<font color="#CCCCCC">insects</font><font color="#E5E5E5"> really really</font><font color="#CCCCCC"> challenging live</font>

207
00:09:03,340 --> 00:09:07,900
analysis implies that containers are

208
00:09:05,050 --> 00:09:09,819
still running<font color="#CCCCCC"> and you have several</font>

209
00:09:07,900 --> 00:09:10,449
options<font color="#CCCCCC"> here</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> security</font>

210
00:09:09,820 --> 00:09:12,490
analysis could

211
00:09:10,450 --> 00:09:14,649
like back<font color="#CCCCCC"> up the continued file system</font>

212
00:09:12,490 --> 00:09:17,829
and all the<font color="#E5E5E5"> metadata on a regular basis</font>

213
00:09:14,649 --> 00:09:21,190
and<font color="#CCCCCC"> daca provides several</font><font color="#E5E5E5"> options</font><font color="#CCCCCC"> here</font>

214
00:09:17,829 --> 00:09:23,319
one<font color="#E5E5E5"> could do a darker export to capture</font>

215
00:09:21,190 --> 00:09:26,440
or capture the<font color="#E5E5E5"> containers file system</font>

216
00:09:23,320 --> 00:09:29,740
into a tar file<font color="#CCCCCC"> or one could save the in</font>

217
00:09:26,440 --> 00:09:31,209
darker<font color="#E5E5E5"> image into a tar file or one</font>

218
00:09:29,740 --> 00:09:33,880
could commit all the changes<font color="#CCCCCC"> that are</font>

219
00:09:31,209 --> 00:09:36,479
happening in<font color="#E5E5E5"> the container into</font><font color="#CCCCCC"> a new</font>

220
00:09:33,880 --> 00:09:39,160
image using<font color="#E5E5E5"> docker commit command and</font>

221
00:09:36,480 --> 00:09:42,010
all these<font color="#E5E5E5"> files could</font><font color="#CCCCCC"> be later used to</font>

222
00:09:39,160 --> 00:09:45,160
perform analysis using docker import or

223
00:09:42,010 --> 00:09:47,620
docker load one thing to note here<font color="#CCCCCC"> is</font>

224
00:09:45,160 --> 00:09:50,889
<font color="#CCCCCC">that docker export and import command</font>

225
00:09:47,620 --> 00:09:53,079
<font color="#CCCCCC">don't preserve the image history but the</font>

226
00:09:50,889 --> 00:09:57,250
<font color="#CCCCCC">docker save and load preserves the image</font>

227
00:09:53,079 --> 00:09:59,920
history and knowing the image history

228
00:09:57,250 --> 00:10:01,779
becomes important if you want<font color="#CCCCCC"> to find</font>

229
00:09:59,920 --> 00:10:06,729
out if the image layer has been<font color="#E5E5E5"> tampered</font>

230
00:10:01,779 --> 00:10:08,680
with<font color="#CCCCCC"> so like I mentioned</font><font color="#E5E5E5"> having</font>

231
00:10:06,730 --> 00:10:11,019
container metadata is really important

232
00:10:08,680 --> 00:10:13,839
<font color="#E5E5E5">when it comes to</font><font color="#CCCCCC"> analysis when to</font>

233
00:10:11,019 --> 00:10:16,540
perform correlation and docker

234
00:10:13,839 --> 00:10:19,810
usually by default<font color="#CCCCCC"> stores all this</font>

235
00:10:16,540 --> 00:10:20,980
metadata under wallop docker and if you

236
00:10:19,810 --> 00:10:22,449
can if you<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at a specific</font>

237
00:10:20,980 --> 00:10:24,279
<font color="#E5E5E5">container you could go into the</font>

238
00:10:22,449 --> 00:10:27,010
container subdirectory<font color="#E5E5E5"> and look at it</font>

239
00:10:24,279 --> 00:10:28,779
<font color="#E5E5E5">and here you will see like various</font>

240
00:10:27,010 --> 00:10:31,449
information<font color="#E5E5E5"> related to contain layer</font>

241
00:10:28,779 --> 00:10:35,610
<font color="#E5E5E5">image layers the container ID the image</font>

242
00:10:31,449 --> 00:10:35,609
ID<font color="#CCCCCC"> all the mounted directories and so on</font>

243
00:10:35,790 --> 00:10:40,630
so if a file<font color="#CCCCCC"> is deleted</font><font color="#E5E5E5"> from a container</font>

244
00:10:38,339 --> 00:10:42,850
<font color="#CCCCCC">there could be two</font><font color="#E5E5E5"> possibilities</font><font color="#CCCCCC"> the</font>

245
00:10:40,630 --> 00:10:44,529
<font color="#CCCCCC">file originates from the</font><font color="#E5E5E5"> readwrite layer</font>

246
00:10:42,850 --> 00:10:47,920
or<font color="#E5E5E5"> the file originates from the image</font>

247
00:10:44,529 --> 00:10:49,870
layer so when files are<font color="#E5E5E5"> deleted from the</font>

248
00:10:47,920 --> 00:10:52,449
readwrite layer<font color="#E5E5E5"> it's actually deleted on</font>

249
00:10:49,870 --> 00:10:53,829
the<font color="#E5E5E5"> host file system and then to recover</font>

250
00:10:52,449 --> 00:10:56,050
those<font color="#CCCCCC"> files you</font><font color="#E5E5E5"> need to</font><font color="#CCCCCC"> employ</font><font color="#E5E5E5"> a</font>

251
00:10:53,829 --> 00:10:58,149
techniques that you would employ to

252
00:10:56,050 --> 00:11:00,849
recover<font color="#E5E5E5"> files from a host file system</font>

253
00:10:58,149 --> 00:11:02,949
there are<font color="#E5E5E5"> two</font><font color="#CCCCCC"> popular techniques</font><font color="#E5E5E5"> one is</font>

254
00:11:00,850 --> 00:11:03,850
called the file carving method and the

255
00:11:02,949 --> 00:11:07,089
other<font color="#E5E5E5"> one is called the</font><font color="#CCCCCC"> filesystem</font>

256
00:11:03,850 --> 00:11:10,630
<font color="#E5E5E5">analysis method file carving method is</font>

257
00:11:07,089 --> 00:11:12,160
basically<font color="#E5E5E5"> a recovery technique that is</font>

258
00:11:10,630 --> 00:11:17,170
employed when there is no file system

259
00:11:12,160 --> 00:11:19,269
metadata and what this technique does is

260
00:11:17,170 --> 00:11:22,349
basically<font color="#E5E5E5"> it scans the</font><font color="#CCCCCC"> entire</font><font color="#E5E5E5"> disk and</font>

261
00:11:19,269 --> 00:11:25,050
it looks for<font color="#E5E5E5"> patterns</font><font color="#CCCCCC"> and the patterns</font>

262
00:11:22,350 --> 00:11:27,330
typically used our<font color="#E5E5E5"> head of values from</font>

263
00:11:25,050 --> 00:11:31,829
the from popular file formats<font color="#CCCCCC"> like PDF</font>

264
00:11:27,330 --> 00:11:33,930
e.l.f JPEGs<font color="#E5E5E5"> and so on but files are</font>

265
00:11:31,830 --> 00:11:37,200
often fragmented<font color="#E5E5E5"> on the file system</font><font color="#CCCCCC"> and</font>

266
00:11:33,930 --> 00:11:39,420
this<font color="#E5E5E5"> technique does not guarantee full</font>

267
00:11:37,200 --> 00:11:42,060
<font color="#CCCCCC">reconstruction of files with all its</font>

268
00:11:39,420 --> 00:11:43,650
metadata intact<font color="#E5E5E5"> and when you want</font><font color="#CCCCCC"> to</font>

269
00:11:42,060 --> 00:11:45,449
relay it files to its originating

270
00:11:43,650 --> 00:11:47,010
containers it becomes crucial<font color="#E5E5E5"> that you</font>

271
00:11:45,450 --> 00:11:48,350
have all the metadata like<font color="#E5E5E5"> the file part</font>

272
00:11:47,010 --> 00:11:50,460
and the file name

273
00:11:48,350 --> 00:11:52,080
that's where the other technique comes

274
00:11:50,460 --> 00:11:57,750
into play which is the file system

275
00:11:52,080 --> 00:11:59,640
analysis this technique is driven by<font color="#E5E5E5"> its</font>

276
00:11:57,750 --> 00:12:01,680
it makes much<font color="#CCCCCC"> more informed decisions</font>

277
00:11:59,640 --> 00:12:05,460
based on the file system<font color="#E5E5E5"> metadata</font><font color="#CCCCCC"> it</font>

278
00:12:01,680 --> 00:12:08,160
<font color="#E5E5E5">uses the metadata such</font><font color="#CCCCCC"> as the master</font>

279
00:12:05,460 --> 00:12:11,130
file table the<font color="#CCCCCC"> inode table the directory</font>

280
00:12:08,160 --> 00:12:13,050
entries and<font color="#E5E5E5"> so on and this technique</font>

281
00:12:11,130 --> 00:12:14,700
<font color="#E5E5E5">actually provides you some guarantees of</font>

282
00:12:13,050 --> 00:12:18,000
recovering the<font color="#E5E5E5"> file with</font><font color="#CCCCCC"> all the</font>

283
00:12:14,700 --> 00:12:20,810
metadata intact<font color="#CCCCCC"> so this is much more</font>

284
00:12:18,000 --> 00:12:22,950
<font color="#E5E5E5">useful when</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> comes to analyzing</font>

285
00:12:20,810 --> 00:12:26,310
containers and correlating files to

286
00:12:22,950 --> 00:12:28,740
specific container if a file<font color="#CCCCCC"> is deleted</font>

287
00:12:26,310 --> 00:12:30,510
from<font color="#E5E5E5"> the readwrite layer though what the</font>

288
00:12:28,740 --> 00:12:33,840
<font color="#E5E5E5">file system driver does is attack such</font>

289
00:12:30,510 --> 00:12:36,780
files<font color="#CCCCCC"> and it'll Achatz a new inode and</font>

290
00:12:33,840 --> 00:12:39,360
<font color="#E5E5E5">tax it as a character type character</font>

291
00:12:36,780 --> 00:12:42,750
device and one could find such files

292
00:12:39,360 --> 00:12:48,450
<font color="#E5E5E5">using a fine command under</font><font color="#CCCCCC"> the images</font>

293
00:12:42,750 --> 00:12:50,670
directory<font color="#E5E5E5"> so assuming that you</font><font color="#CCCCCC"> record</font><font color="#E5E5E5"> a</font>

294
00:12:48,450 --> 00:12:52,440
file<font color="#E5E5E5"> using previous techniques I'll</font>

295
00:12:50,670 --> 00:12:54,599
describe how you can associate that<font color="#E5E5E5"> file</font>

296
00:12:52,440 --> 00:12:56,760
to a specific container so the first

297
00:12:54,600 --> 00:12:59,280
thing you<font color="#E5E5E5"> will need is</font><font color="#CCCCCC"> a docker ID and</font>

298
00:12:56,760 --> 00:13:01,740
docker ID can<font color="#E5E5E5"> be found by running docker</font>

299
00:12:59,280 --> 00:13:04,110
PS command<font color="#E5E5E5"> assuming the container is</font>

300
00:13:01,740 --> 00:13:07,620
still running<font color="#E5E5E5"> and this example is based</font>

301
00:13:04,110 --> 00:13:10,020
on the<font color="#CCCCCC"> au FS driver</font><font color="#E5E5E5"> and all the files in</font>

302
00:13:07,620 --> 00:13:13,110
<font color="#CCCCCC">a EFS are stored in under</font><font color="#E5E5E5"> wallop docker</font>

303
00:13:10,020 --> 00:13:15,569
au FS<font color="#E5E5E5"> and here you will</font><font color="#CCCCCC"> find a layered</font>

304
00:13:13,110 --> 00:13:18,660
<font color="#CCCCCC">subdirectory</font><font color="#E5E5E5"> which has all the various</font>

305
00:13:15,570 --> 00:13:20,220
layers<font color="#CCCCCC"> of the image but the file could</font>

306
00:13:18,660 --> 00:13:22,770
originate from any one of these<font color="#E5E5E5"> layers</font>

307
00:13:20,220 --> 00:13:24,690
<font color="#E5E5E5">and if you look at the layers</font>

308
00:13:22,770 --> 00:13:28,770
subdirectory it has a bunch<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> u FS</font>

309
00:13:24,690 --> 00:13:31,920
IDs<font color="#CCCCCC"> so you really need the AFS ID from</font>

310
00:13:28,770 --> 00:13:34,890
<font color="#E5E5E5">the from the file path that you that you</font>

311
00:13:31,920 --> 00:13:35,979
recovered<font color="#CCCCCC"> and once you have the au FS ID</font>

312
00:13:34,890 --> 00:13:38,319
what what you

313
00:13:35,980 --> 00:13:41,860
do is go through<font color="#E5E5E5"> all the containers and</font>

314
00:13:38,320 --> 00:13:43,840
look at the amount IDs<font color="#CCCCCC"> and they the</font>

315
00:13:41,860 --> 00:13:47,020
mount IDs are nothing but the<font color="#CCCCCC"> au FS IDs</font>

316
00:13:43,840 --> 00:13:49,450
<font color="#CCCCCC">and in order to associate</font><font color="#E5E5E5"> a file to a</font>

317
00:13:47,020 --> 00:13:52,120
container<font color="#CCCCCC"> you</font><font color="#E5E5E5"> could match the AFS IDs</font>

318
00:13:49,450 --> 00:13:53,980
found here<font color="#E5E5E5"> to</font><font color="#CCCCCC"> D a</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> sids in the layers</font>

319
00:13:52,120 --> 00:13:55,690
<font color="#E5E5E5">and if you find a match</font>

320
00:13:53,980 --> 00:14:02,020
you basically<font color="#E5E5E5"> found the file where it</font>

321
00:13:55,690 --> 00:14:04,540
<font color="#E5E5E5">originated from so traditional tools</font>

322
00:14:02,020 --> 00:14:07,890
that are typically used<font color="#CCCCCC"> for memory</font>

323
00:14:04,540 --> 00:14:10,599
forensics such as memory linux extractor

324
00:14:07,890 --> 00:14:13,990
<font color="#E5E5E5">requires you to snapshot the entire host</font>

325
00:14:10,600 --> 00:14:17,890
memory<font color="#E5E5E5"> and this this is a time</font><font color="#CCCCCC"> consuming</font>

326
00:14:13,990 --> 00:14:19,990
<font color="#E5E5E5">operation and several cloud providers</font>

327
00:14:17,890 --> 00:14:22,390
<font color="#E5E5E5">don't even allow</font><font color="#CCCCCC"> you to</font><font color="#E5E5E5"> run these tools</font>

328
00:14:19,990 --> 00:14:24,760
<font color="#E5E5E5">you'd have to file a service ticket or</font>

329
00:14:22,390 --> 00:14:27,550
<font color="#CCCCCC">something in AWS to have them retrieve</font>

330
00:14:24,760 --> 00:14:31,150
the<font color="#CCCCCC"> host memory so this</font><font color="#E5E5E5"> makes it</font>

331
00:14:27,550 --> 00:14:33,040
challenging for<font color="#E5E5E5"> containers and even if</font>

332
00:14:31,150 --> 00:14:34,900
you have the<font color="#CCCCCC"> host memory dump</font><font color="#E5E5E5"> you it</font>

333
00:14:33,040 --> 00:14:37,449
it's<font color="#E5E5E5"> really tricky</font><font color="#CCCCCC"> to associate like</font>

334
00:14:34,900 --> 00:14:39,610
specific evidence you<font color="#E5E5E5"> find there to a</font>

335
00:14:37,450 --> 00:14:42,520
specific container<font color="#E5E5E5"> and this is where</font>

336
00:14:39,610 --> 00:14:44,470
newer tools like cry you offer much<font color="#CCCCCC"> more</font>

337
00:14:42,520 --> 00:14:46,319
potential<font color="#E5E5E5"> you should see that in the</font>

338
00:14:44,470 --> 00:14:49,270
<font color="#E5E5E5">next few slides</font>

339
00:14:46,320 --> 00:14:51,180
so what's cry you cry stands for

340
00:14:49,270 --> 00:14:54,100
<font color="#E5E5E5">checkpoint and in restore</font><font color="#CCCCCC"> and user</font><font color="#E5E5E5"> space</font>

341
00:14:51,180 --> 00:14:55,719
<font color="#CCCCCC">it's been around for</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> while and it's</font>

342
00:14:54,100 --> 00:14:58,480
basically a tool that will<font color="#CCCCCC"> allow</font><font color="#E5E5E5"> you to</font>

343
00:14:55,720 --> 00:15:01,410
freeze a running process<font color="#CCCCCC"> and checkpoint</font>

344
00:14:58,480 --> 00:15:04,540
it as a bunch of image files on disk<font color="#CCCCCC"> it</font>

345
00:15:01,410 --> 00:15:06,339
<font color="#E5E5E5">basically walks through every task of a</font>

346
00:15:04,540 --> 00:15:08,680
process and<font color="#E5E5E5"> it'll find</font><font color="#CCCCCC"> out all the</font>

347
00:15:06,340 --> 00:15:10,210
<font color="#CCCCCC">resources that it uses</font><font color="#E5E5E5"> and then it</font>

348
00:15:08,680 --> 00:15:13,060
<font color="#E5E5E5">basically converts them</font><font color="#CCCCCC"> to an image</font>

349
00:15:10,210 --> 00:15:15,850
format<font color="#E5E5E5"> and these image files can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> used</font>

350
00:15:13,060 --> 00:15:19,810
to<font color="#E5E5E5"> restore them back to a running</font>

351
00:15:15,850 --> 00:15:21,700
process<font color="#E5E5E5"> and this opens up a lot of</font>

352
00:15:19,810 --> 00:15:25,180
<font color="#E5E5E5">interesting use cases like live</font>

353
00:15:21,700 --> 00:15:27,160
migration<font color="#E5E5E5"> debugging load balancing and</font>

354
00:15:25,180 --> 00:15:29,650
so on<font color="#CCCCCC"> if you watch like the coop</font><font color="#E5E5E5"> con</font>

355
00:15:27,160 --> 00:15:32,319
like several<font color="#CCCCCC"> years back</font><font color="#E5E5E5"> they had a quick</font>

356
00:15:29,650 --> 00:15:34,630
game and they could like literally

357
00:15:32,320 --> 00:15:36,670
<font color="#E5E5E5">freeze the quake game and they they</font>

358
00:15:34,630 --> 00:15:38,830
would do a live migration<font color="#E5E5E5"> from Singapore</font>

359
00:15:36,670 --> 00:15:41,860
to<font color="#CCCCCC"> London and they would resume</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> game</font>

360
00:15:38,830 --> 00:15:44,320
back<font color="#E5E5E5"> that was that was done through pry</font>

361
00:15:41,860 --> 00:15:46,330
<font color="#E5E5E5">you actually but it also has</font>

362
00:15:44,320 --> 00:15:48,050
applications in forensics<font color="#E5E5E5"> as we shall</font>

363
00:15:46,330 --> 00:15:50,610
see

364
00:15:48,050 --> 00:15:54,209
cry you also<font color="#E5E5E5"> comes</font><font color="#CCCCCC"> with the stool caller</font>

365
00:15:50,610 --> 00:15:56,310
script or the<font color="#E5E5E5"> cryo image tool and this</font>

366
00:15:54,210 --> 00:15:58,950
tool<font color="#E5E5E5"> basically helps you to analyze and</font>

367
00:15:56,310 --> 00:16:01,410
<font color="#E5E5E5">decode the image files that you produce</font>

368
00:15:58,950 --> 00:16:03,270
during<font color="#E5E5E5"> the checkpointing process it is</font>

369
00:16:01,410 --> 00:16:05,400
<font color="#E5E5E5">similar</font><font color="#CCCCCC"> to volatility in that it</font>

370
00:16:03,270 --> 00:16:07,800
provides you<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> plugins that makes it</font>

371
00:16:05,400 --> 00:16:10,770
easier to<font color="#E5E5E5"> retrieve the running processes</font>

372
00:16:07,800 --> 00:16:11,939
the files that<font color="#E5E5E5"> the processes used the</font>

373
00:16:10,770 --> 00:16:14,970
network connections<font color="#E5E5E5"> and the memory</font>

374
00:16:11,940 --> 00:16:17,760
mappings and so on let's see this in a

375
00:16:14,970 --> 00:16:21,420
demo and how we can use cry you to

376
00:16:17,760 --> 00:16:23,550
perform on memory<font color="#CCCCCC"> foreign six</font><font color="#E5E5E5"> so in this</font>

377
00:16:21,420 --> 00:16:25,319
<font color="#E5E5E5">demo what I'm going to do is I'll spin</font>

378
00:16:23,550 --> 00:16:26,849
up a container and the container is

379
00:16:25,320 --> 00:16:28,760
running a web application it's a very

380
00:16:26,850 --> 00:16:31,980
<font color="#E5E5E5">simple app web application that's using</font>

381
00:16:28,760 --> 00:16:34,980
<font color="#E5E5E5">a vulnerable version of Apache struts</font>

382
00:16:31,980 --> 00:16:37,110
<font color="#CCCCCC">and this was basically</font><font color="#E5E5E5"> behind the</font>

383
00:16:34,980 --> 00:16:39,570
<font color="#E5E5E5">equifax attack a few months back and</font>

384
00:16:37,110 --> 00:16:42,990
<font color="#CCCCCC">I'll use Metasploit to attack this</font>

385
00:16:39,570 --> 00:16:44,640
container<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> shall checkpoint the</font>

386
00:16:42,990 --> 00:16:52,860
container and<font color="#E5E5E5"> see what kind of evidence</font>

387
00:16:44,640 --> 00:16:55,530
<font color="#CCCCCC">we find in the container</font><font color="#E5E5E5"> so here I</font>

388
00:16:52,860 --> 00:16:59,160
<font color="#CCCCCC">launch</font><font color="#E5E5E5"> the container I'll take a</font>

389
00:16:55,530 --> 00:17:08,579
snapshot using cry<font color="#CCCCCC"> U and</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> is here or</font>

390
00:16:59,160 --> 00:17:12,449
all the image files it produces and here

391
00:17:08,579 --> 00:17:13,770
is an<font color="#E5E5E5"> example of using crit and PS is</font>

392
00:17:12,449 --> 00:17:16,410
basically one of the<font color="#E5E5E5"> plugins that you</font>

393
00:17:13,770 --> 00:17:18,150
<font color="#CCCCCC">can use to see list all the running</font>

394
00:17:16,410 --> 00:17:20,880
<font color="#E5E5E5">processes that at the time of</font>

395
00:17:18,150 --> 00:17:24,270
<font color="#CCCCCC">checkpointing here you see that there's</font>

396
00:17:20,880 --> 00:17:26,189
only<font color="#CCCCCC"> one process running</font><font color="#E5E5E5"> and we can also</font>

397
00:17:24,270 --> 00:17:28,439
<font color="#E5E5E5">find out all the network connections</font>

398
00:17:26,189 --> 00:17:33,180
that were active during<font color="#CCCCCC"> check</font><font color="#E5E5E5"> boiling</font>

399
00:17:28,439 --> 00:17:39,170
<font color="#CCCCCC">process there's two network connections</font>

400
00:17:33,180 --> 00:17:43,320
active<font color="#E5E5E5"> that's listening on 8080 and 809</font>

401
00:17:39,170 --> 00:17:47,850
and you can also see all<font color="#CCCCCC"> the files</font><font color="#E5E5E5"> that</font>

402
00:17:43,320 --> 00:17:52,919
<font color="#CCCCCC">were</font><font color="#E5E5E5"> open by the process sorry about</font>

403
00:17:47,850 --> 00:17:55,050
that<font color="#E5E5E5"> it's flickering and</font>

404
00:17:52,920 --> 00:18:00,630
we can restore<font color="#CCCCCC"> the continuum back so</font>

405
00:17:55,050 --> 00:18:07,290
that we can<font color="#E5E5E5"> launch another attack so</font>

406
00:18:00,630 --> 00:18:08,940
<font color="#E5E5E5">I'll launch Metis flight and so</font>

407
00:18:07,290 --> 00:18:12,899
basically what<font color="#CCCCCC"> Midas Floyd is doing is</font>

408
00:18:08,940 --> 00:18:14,790
it's using<font color="#CCCCCC"> one of the exploit</font><font color="#E5E5E5"> I'm using</font>

409
00:18:12,900 --> 00:18:23,460
<font color="#E5E5E5">the reverse shell here you could use any</font>

410
00:18:14,790 --> 00:18:31,500
exploit and so I'm establishing<font color="#E5E5E5"> a</font>

411
00:18:23,460 --> 00:18:33,450
reverse<font color="#CCCCCC"> shell on the container and just</font>

412
00:18:31,500 --> 00:18:37,110
<font color="#CCCCCC">make sure we are in the container I'm</font>

413
00:18:33,450 --> 00:18:38,430
running an IP other and the IP address

414
00:18:37,110 --> 00:18:45,870
is actually<font color="#CCCCCC"> the IP address of</font><font color="#E5E5E5"> the</font>

415
00:18:38,430 --> 00:18:48,390
container<font color="#E5E5E5"> and here I'm basically</font><font color="#CCCCCC"> making</font>

416
00:18:45,870 --> 00:18:50,790
another<font color="#CCCCCC"> snapshot</font><font color="#E5E5E5"> and here you see that</font>

417
00:18:48,390 --> 00:18:52,830
there's another<font color="#E5E5E5"> process running which is</font>

418
00:18:50,790 --> 00:18:57,780
<font color="#E5E5E5">basically the shell process for the</font>

419
00:18:52,830 --> 00:18:59,520
<font color="#CCCCCC">river</font><font color="#E5E5E5"> shell and we can see all</font><font color="#CCCCCC"> the</font>

420
00:18:57,780 --> 00:19:03,000
network connections<font color="#E5E5E5"> and there's another</font>

421
00:18:59,520 --> 00:19:04,560
network connection<font color="#E5E5E5"> and the four four</font>

422
00:19:03,000 --> 00:19:09,360
<font color="#E5E5E5">four four is actually the port on the</font>

423
00:19:04,560 --> 00:19:12,570
local machine<font color="#E5E5E5"> and that's the IP address</font>

424
00:19:09,360 --> 00:19:14,070
of<font color="#E5E5E5"> the local machine</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> can also see</font>

425
00:19:12,570 --> 00:19:19,290
all<font color="#CCCCCC"> the files</font><font color="#E5E5E5"> that were opened by</font><font color="#CCCCCC"> the</font>

426
00:19:14,070 --> 00:19:25,350
shell it's not doing much<font color="#E5E5E5"> but get a</font>

427
00:19:19,290 --> 00:19:27,090
point so that's essentially what cry you

428
00:19:25,350 --> 00:19:29,699
can do it has a few<font color="#E5E5E5"> plugins but in</font>

429
00:19:27,090 --> 00:19:33,240
future<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can see this expanding</font><font color="#CCCCCC"> slight</font>

430
00:19:29,700 --> 00:19:35,220
volatility so to summarize my<font color="#E5E5E5"> talk</font>

431
00:19:33,240 --> 00:19:37,770
<font color="#CCCCCC">basically we saw that we need more</font>

432
00:19:35,220 --> 00:19:42,870
<font color="#E5E5E5">container aware forensic tools to make</font>

433
00:19:37,770 --> 00:19:44,700
them much<font color="#E5E5E5"> useful and you saw</font><font color="#CCCCCC"> that docker</font>

434
00:19:42,870 --> 00:19:47,429
uses file system drivers<font color="#E5E5E5"> which makes</font>

435
00:19:44,700 --> 00:19:50,760
associating files to containers tricky

436
00:19:47,430 --> 00:19:53,700
we also saw that<font color="#E5E5E5"> popular tools like</font>

437
00:19:50,760 --> 00:19:56,010
volatility<font color="#E5E5E5"> need more darker context in</font>

438
00:19:53,700 --> 00:19:59,220
order<font color="#E5E5E5"> to make them more useful we saw</font>

439
00:19:56,010 --> 00:20:02,010
how cry you can be used for forensics<font color="#E5E5E5"> we</font>

440
00:19:59,220 --> 00:20:04,260
also saw<font color="#CCCCCC"> that container orchestrators</font>

441
00:20:02,010 --> 00:20:06,480
and container manager services makes and

442
00:20:04,260 --> 00:20:09,990
even deleted containers<font color="#CCCCCC"> to make make</font>

443
00:20:06,480 --> 00:20:11,790
forensics really challenging<font color="#E5E5E5"> and that's</font>

444
00:20:09,990 --> 00:20:15,240
<font color="#E5E5E5">pretty</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> yeah these</font><font color="#E5E5E5"> are all the</font>

445
00:20:11,790 --> 00:20:17,100
references I<font color="#CCCCCC"> used and thank you</font>

446
00:20:15,240 --> 00:20:21,840
thanks for<font color="#E5E5E5"> coming</font><font color="#CCCCCC"> out I know it's the</font>

447
00:20:17,100 --> 00:20:46,439
last<font color="#E5E5E5"> talk thank you if you have any</font>

448
00:20:21,840 --> 00:20:50,070
questions take it<font color="#E5E5E5"> yes yeah</font><font color="#CCCCCC"> like Oh</font><font color="#E5E5E5"> for</font>

449
00:20:46,440 --> 00:20:52,230
the<font color="#CCCCCC"> holster</font><font color="#E5E5E5"> for the container itself the</font>

450
00:20:50,070 --> 00:20:55,799
<font color="#CCCCCC">talking container</font><font color="#E5E5E5"> so for the docker</font>

451
00:20:52,230 --> 00:20:58,140
container<font color="#CCCCCC"> there's not a lot of</font><font color="#E5E5E5"> bigger</font>

452
00:20:55,799 --> 00:21:00,299
tools out there<font color="#E5E5E5"> but cry</font><font color="#CCCCCC"> U is one</font><font color="#E5E5E5"> of them</font>

453
00:20:58,140 --> 00:21:02,850
that<font color="#CCCCCC"> you can use to specific capture at</font>

454
00:21:00,299 --> 00:21:04,740
containers memory it actually can<font color="#E5E5E5"> it</font>

455
00:21:02,850 --> 00:21:07,049
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> could captures a specific</font>

456
00:21:04,740 --> 00:21:15,990
containers memory<font color="#E5E5E5"> only the main memory</font>

457
00:21:07,049 --> 00:21:34,049
not the disk memory yes any<font color="#E5E5E5"> other</font>

458
00:21:15,990 --> 00:21:37,140
<font color="#CCCCCC">question</font><font color="#E5E5E5"> yes yes you can use a tool</font>

459
00:21:34,049 --> 00:21:39,540
called<font color="#E5E5E5"> contrac oh sorry</font>

460
00:21:37,140 --> 00:21:41,400
so the question was<font color="#E5E5E5"> basically if you</font>

461
00:21:39,540 --> 00:21:44,490
could use the proc file system to track

462
00:21:41,400 --> 00:21:46,890
network connections so yes you can use

463
00:21:44,490 --> 00:21:49,350
<font color="#CCCCCC">the proc file system</font><font color="#E5E5E5"> used like because</font>

464
00:21:46,890 --> 00:21:51,929
you have all the FDS<font color="#E5E5E5"> in the proc file</font>

465
00:21:49,350 --> 00:21:54,719
system and you can identify<font color="#CCCCCC"> fan</font><font color="#E5E5E5"> ft is a</font>

466
00:21:51,929 --> 00:21:57,890
socket type and you<font color="#E5E5E5"> can decipher I think</font>

467
00:21:54,720 --> 00:22:00,809
there's a tool called<font color="#CCCCCC"> contrac that</font>

468
00:21:57,890 --> 00:22:03,660
basically like<font color="#CCCCCC"> polls</font><font color="#E5E5E5"> the proc file</font>

469
00:22:00,809 --> 00:22:05,100
system for a specific PID and it keeps

470
00:22:03,660 --> 00:22:07,340
track of all the network connections

471
00:22:05,100 --> 00:22:07,340
there

472
00:22:09,200 --> 00:22:15,620
yes<font color="#E5E5E5"> yes yeah</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> basically use the PID</font>

473
00:22:12,440 --> 00:22:18,220
to associate a container spread to a

474
00:22:15,620 --> 00:22:18,219
hospital

475
00:22:18,549 --> 00:22:22,240
any other questions

476
00:22:23,470 --> 00:22:27,440
<font color="#E5E5E5">can't see</font><font color="#CCCCCC"> Angie</font>

477
00:22:25,070 --> 00:22:30,289
<font color="#E5E5E5">okay well that that's the final talk of</font>

478
00:22:27,440 --> 00:22:32,840
the day<font color="#CCCCCC"> thank</font><font color="#E5E5E5"> you yeah here's a nice</font>

479
00:22:30,289 --> 00:22:35,800
gift for<font color="#E5E5E5"> you</font><font color="#CCCCCC"> from b-sides</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Autodesk</font>

480
00:22:32,840 --> 00:22:39,359
<font color="#CCCCCC">thank you and let's give</font><font color="#E5E5E5"> him a</font><font color="#CCCCCC"> hand</font>

481
00:22:35,800 --> 00:22:39,359
[Applause]

