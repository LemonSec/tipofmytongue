1
00:00:03,620 --> 00:00:06,740
[Music]

2
00:00:19,730 --> 00:00:26,060
so quick introduction about<font color="#E5E5E5"> me</font>

3
00:00:22,860 --> 00:00:29,450
<font color="#CCCCCC">why I</font><font color="#E5E5E5"> think is not changing slides</font>

4
00:00:26,060 --> 00:00:32,098
<font color="#CCCCCC">alright so my name is cloudy</font><font color="#E5E5E5"> contain I'm</font>

5
00:00:29,450 --> 00:00:37,470
<font color="#E5E5E5">security consultant penetration tester</font>

6
00:00:32,098 --> 00:00:40,699
<font color="#E5E5E5">based in Wellington New</font><font color="#CCCCCC"> Zealand</font><font color="#E5E5E5"> I come</font>

7
00:00:37,470 --> 00:00:43,410
from<font color="#CCCCCC"> a web development background</font><font color="#E5E5E5"> mainly</font>

8
00:00:40,699 --> 00:00:44,040
<font color="#E5E5E5">became development and quite a lot of</font>

9
00:00:43,410 --> 00:00:48,059
<font color="#CCCCCC">JavaScript</font>

10
00:00:44,040 --> 00:00:50,460
<font color="#E5E5E5">pretty much everything</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> CSS</font><font color="#CCCCCC"> in my</font>

11
00:00:48,059 --> 00:00:52,110
<font color="#E5E5E5">previous</font><font color="#CCCCCC"> role I used to be web</font>

12
00:00:50,460 --> 00:00:54,239
developers trainer as<font color="#CCCCCC"> well in term of</font>

13
00:00:52,110 --> 00:00:57,660
security teaching almost<font color="#CCCCCC"> petain and</font>

14
00:00:54,239 --> 00:01:00,989
secure coding guidelines<font color="#E5E5E5"> and I also done</font>

15
00:00:57,660 --> 00:01:05,820
small contribution to<font color="#E5E5E5"> big project and go</font>

16
00:01:00,989 --> 00:01:09,060
fish some fun facts<font color="#CCCCCC"> to start with so</font>

17
00:01:05,820 --> 00:01:14,270
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> my personal laptop at home</font><font color="#E5E5E5"> as</font>

18
00:01:09,060 --> 00:01:17,369
you<font color="#E5E5E5"> can see my</font><font color="#CCCCCC"> C key is a bit broken</font>

19
00:01:14,270 --> 00:01:21,179
<font color="#E5E5E5">that's why I make a lot of mistake</font>

20
00:01:17,369 --> 00:01:27,720
<font color="#E5E5E5">during my work and I do control C a lot</font>

21
00:01:21,180 --> 00:01:28,920
as<font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> you probably</font><font color="#CCCCCC"> guess from</font>

22
00:01:27,720 --> 00:01:30,539
my accent that I'm not<font color="#E5E5E5"> actually</font>

23
00:01:28,920 --> 00:01:32,340
originally from New<font color="#CCCCCC"> Zealand</font><font color="#E5E5E5"> so I'm</font>

24
00:01:30,539 --> 00:01:34,920
actually Italian<font color="#CCCCCC"> I was born and raised</font>

25
00:01:32,340 --> 00:01:39,899
<font color="#CCCCCC">in</font><font color="#E5E5E5"> Italy</font><font color="#CCCCCC"> and I moved to New Zealand</font>

26
00:01:34,920 --> 00:01:42,000
<font color="#CCCCCC">around</font><font color="#E5E5E5"> end of 2007 and always be</font>

27
00:01:39,899 --> 00:01:44,280
surprised about the similarity<font color="#CCCCCC"> between</font>

28
00:01:42,000 --> 00:01:48,619
the<font color="#CCCCCC"> two countries especially looking</font><font color="#E5E5E5"> at</font>

29
00:01:44,280 --> 00:01:48,619
the shape really

30
00:01:50,509 --> 00:01:55,619
<font color="#CCCCCC">this is actually my hometown back in</font>

31
00:01:53,039 --> 00:02:04,500
Italy<font color="#CCCCCC"> it's kind</font><font color="#E5E5E5"> of based north of Milan</font>

32
00:01:55,619 --> 00:02:05,729
is kind<font color="#E5E5E5"> of famous for ice cream</font><font color="#CCCCCC"> whereas</font>

33
00:02:04,500 --> 00:02:07,050
this<font color="#E5E5E5"> is where</font><font color="#CCCCCC"> alley</font>

34
00:02:05,729 --> 00:02:09,959
I moved to so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually</font>

35
00:02:07,050 --> 00:02:14,579
Wellington in New Zealand<font color="#CCCCCC"> it is well</font>

36
00:02:09,959 --> 00:02:16,020
<font color="#E5E5E5">known for his bad weather and it's one</font>

37
00:02:14,580 --> 00:02:18,660
<font color="#CCCCCC">of the windiest city in the world</font><font color="#E5E5E5"> as</font>

38
00:02:16,020 --> 00:02:20,060
well<font color="#E5E5E5"> and talking about wind with it</font>

39
00:02:18,660 --> 00:02:22,680
actually

40
00:02:20,060 --> 00:02:26,040
<font color="#CCCCCC">this actually was</font><font color="#E5E5E5"> the window in my</font>

41
00:02:22,680 --> 00:02:28,890
bedroom<font color="#E5E5E5"> which exploded from inside out</font>

42
00:02:26,040 --> 00:02:30,929
<font color="#E5E5E5">after a big wind gust</font><font color="#CCCCCC"> I had early one</font>

43
00:02:28,890 --> 00:02:33,839
morning<font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can see the debris is</font>

44
00:02:30,930 --> 00:02:37,220
down<font color="#E5E5E5"> the red</font><font color="#CCCCCC"> card on</font><font color="#E5E5E5"> there</font>

45
00:02:33,840 --> 00:02:41,940
so that's all<font color="#E5E5E5"> part of the whole window</font>

46
00:02:37,220 --> 00:02:43,500
kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> diet the day during</font><font color="#E5E5E5"> this few</font>

47
00:02:41,940 --> 00:02:46,140
years I lived in Australia<font color="#CCCCCC"> as well and</font>

48
00:02:43,500 --> 00:02:48,090
<font color="#CCCCCC">yeah I soar above it just I made</font><font color="#E5E5E5"> it out</font>

49
00:02:46,140 --> 00:02:51,510
alive

50
00:02:48,090 --> 00:02:54,120
so this talk<font color="#CCCCCC"> is about Ruby so Ruby is a</font>

51
00:02:51,510 --> 00:02:57,120
25 years<font color="#E5E5E5"> old language is really well</font>

52
00:02:54,120 --> 00:02:59,489
known<font color="#CCCCCC"> for the frame or</font><font color="#E5E5E5"> moving rails</font><font color="#CCCCCC"> if</font>

53
00:02:57,120 --> 00:03:02,190
you are in penetration testing you will

54
00:02:59,489 --> 00:03:05,310
know Ruby for<font color="#E5E5E5"> Metasploit</font>

55
00:03:02,190 --> 00:03:07,019
everyone loves Ruby<font color="#E5E5E5"> all this meta</font>

56
00:03:05,310 --> 00:03:10,980
<font color="#E5E5E5">programming magic that you</font><font color="#CCCCCC"> know makes</font>

57
00:03:07,019 --> 00:03:13,650
all was framework possible<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> agenda</font>

58
00:03:10,980 --> 00:03:15,899
for today I would talk about<font color="#E5E5E5"> start</font>

59
00:03:13,650 --> 00:03:17,010
talking about<font color="#CCCCCC"> Ruby</font><font color="#E5E5E5"> gems and rubies and</font>

60
00:03:15,900 --> 00:03:19,680
twist extensions

61
00:03:17,010 --> 00:03:21,329
<font color="#CCCCCC">I would give a</font><font color="#E5E5E5"> high-level overview of</font>

62
00:03:19,680 --> 00:03:24,750
what fuzzing is how we<font color="#E5E5E5"> talk a bit</font><font color="#CCCCCC"> about</font>

63
00:03:21,330 --> 00:03:26,310
<font color="#CCCCCC">IFL</font><font color="#E5E5E5"> I'll talk about my</font><font color="#CCCCCC"> setup to target</font>

64
00:03:24,750 --> 00:03:28,319
ruby gem with<font color="#E5E5E5"> the extension and</font>

65
00:03:26,310 --> 00:03:30,690
potentially Ruby itself<font color="#CCCCCC"> talk about some</font>

66
00:03:28,319 --> 00:03:32,130
of<font color="#E5E5E5"> the findings and I will give a brief</font>

67
00:03:30,690 --> 00:03:35,040
introduction<font color="#E5E5E5"> of</font><font color="#CCCCCC"> your grammar</font><font color="#E5E5E5"> based</font>

68
00:03:32,130 --> 00:03:39,390
<font color="#E5E5E5">fuzzing targeting languages and Rubin in</font>

69
00:03:35,040 --> 00:03:42,510
specific so what<font color="#CCCCCC"> Ruby gems are are a way</font>

70
00:03:39,390 --> 00:03:45,480
<font color="#E5E5E5">to create</font><font color="#CCCCCC"> Luke Ruby libraries saying</font>

71
00:03:42,510 --> 00:03:48,840
<font color="#E5E5E5">simplistic ways so rails itself is a</font>

72
00:03:45,480 --> 00:03:51,268
ruby gem<font color="#CCCCCC"> so what happened</font><font color="#E5E5E5"> when you want</font>

73
00:03:48,840 --> 00:03:54,420
<font color="#E5E5E5">to install a gem you</font><font color="#CCCCCC"> type gem install</font>

74
00:03:51,269 --> 00:03:56,790
name of the gym<font color="#E5E5E5"> and what happen on the</font>

75
00:03:54,420 --> 00:04:00,630
network<font color="#E5E5E5"> level</font><font color="#CCCCCC"> your your machine we</font>

76
00:03:56,790 --> 00:04:01,950
contact James<font color="#E5E5E5"> Ruby gems API check what</font>

77
00:04:00,630 --> 00:04:04,440
dependencies that the<font color="#CCCCCC"> Jamie</font><font color="#E5E5E5"> want to</font>

78
00:04:01,950 --> 00:04:06,988
<font color="#E5E5E5">install as an download everything he</font>

79
00:04:04,440 --> 00:04:09,180
<font color="#E5E5E5">needs to and install locally the other</font>

80
00:04:06,989 --> 00:04:12,150
way to install<font color="#E5E5E5"> James City use gem foul</font>

81
00:04:09,180 --> 00:04:15,780
and<font color="#CCCCCC"> Bandler rather than tapping gem</font>

82
00:04:12,150 --> 00:04:17,700
install or live<font color="#E5E5E5"> James and a way to use</font>

83
00:04:15,780 --> 00:04:19,488
<font color="#CCCCCC">gems it just requiring them in your code</font>

84
00:04:17,700 --> 00:04:24,510
<font color="#E5E5E5">base</font><font color="#CCCCCC"> simple as that</font>

85
00:04:19,488 --> 00:04:26,460
<font color="#E5E5E5">so when you when</font><font color="#CCCCCC"> installer jane with</font>

86
00:04:24,510 --> 00:04:29,639
extension you often see this<font color="#CCCCCC"> message</font>

87
00:04:26,460 --> 00:04:31,859
<font color="#E5E5E5">what it means is some your machine is</font>

88
00:04:29,639 --> 00:04:33,300
missing some libraries by the C

89
00:04:31,860 --> 00:04:35,160
extension needs for<font color="#CCCCCC"> example if you</font>

90
00:04:33,300 --> 00:04:37,800
installing<font color="#CCCCCC"> mice equal to</font><font color="#E5E5E5"> JM you will</font>

91
00:04:35,160 --> 00:04:41,700
need<font color="#CCCCCC"> leave my sequel</font><font color="#E5E5E5"> development</font>

92
00:04:37,800 --> 00:04:45,120
libraries install in<font color="#CCCCCC"> your box so why</font>

93
00:04:41,700 --> 00:04:47,580
people why developer wants<font color="#CCCCCC"> to</font><font color="#E5E5E5"> write C</font>

94
00:04:45,120 --> 00:04:50,729
extension<font color="#CCCCCC"> James with the</font><font color="#E5E5E5"> extension</font><font color="#CCCCCC"> model</font>

95
00:04:47,580 --> 00:04:53,370
speed<font color="#E5E5E5"> so</font><font color="#CCCCCC"> Ruby itself the language</font><font color="#E5E5E5"> itself</font>

96
00:04:50,729 --> 00:04:55,110
is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> the faster languages out there</font><font color="#E5E5E5"> so</font>

97
00:04:53,370 --> 00:04:56,460
if you<font color="#E5E5E5"> want to if you have some specific</font>

98
00:04:55,110 --> 00:04:58,610
specific area<font color="#E5E5E5"> where you are concerned</font>

99
00:04:56,460 --> 00:05:02,460
<font color="#CCCCCC">about</font><font color="#E5E5E5"> performances you might consider</font>

100
00:04:58,610 --> 00:05:04,919
writing<font color="#CCCCCC"> it and</font><font color="#E5E5E5"> see other other reason is</font>

101
00:05:02,460 --> 00:05:07,349
reuse existing<font color="#E5E5E5"> celebrities import them</font>

102
00:05:04,919 --> 00:05:09,530
into Ruby<font color="#CCCCCC"> we'll see one</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> findings</font>

103
00:05:07,349 --> 00:05:13,680
<font color="#E5E5E5">about is specific amount of base cases</font>

104
00:05:09,530 --> 00:05:15,210
<font color="#E5E5E5">and of course whenever I'd see you you</font>

105
00:05:13,680 --> 00:05:17,310
<font color="#CCCCCC">have</font><font color="#E5E5E5"> issues with you</font><font color="#CCCCCC"> know you need to be</font>

106
00:05:15,210 --> 00:05:21,930
<font color="#CCCCCC">careful with memory corruption memory</font>

107
00:05:17,310 --> 00:05:24,810
leaks and all<font color="#CCCCCC"> this kind of stuff so this</font>

108
00:05:21,930 --> 00:05:26,610
<font color="#E5E5E5">is a really simple</font><font color="#CCCCCC"> six</font><font color="#E5E5E5"> tension of course</font>

109
00:05:24,810 --> 00:05:30,210
<font color="#CCCCCC">you need to include</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Ruby dot</font><font color="#E5E5E5"> header</font>

110
00:05:26,610 --> 00:05:34,199
file and for example<font color="#CCCCCC"> this would</font><font color="#E5E5E5"> be hi</font>

111
00:05:30,210 --> 00:05:36,690
hello<font color="#CCCCCC"> C extension class</font><font color="#E5E5E5"> and by</font><font color="#CCCCCC"> by</font>

112
00:05:34,199 --> 00:05:38,340
default<font color="#CCCCCC"> you need to declare you need</font>

113
00:05:36,690 --> 00:05:40,710
underscore name of your only<font color="#CCCCCC"> obvious</font>

114
00:05:38,340 --> 00:05:42,000
class and as you can<font color="#CCCCCC"> see it'll be the</font>

115
00:05:40,710 --> 00:05:44,779
<font color="#E5E5E5">fine class will define a</font><font color="#CCCCCC"> Ruby class</font>

116
00:05:42,000 --> 00:05:47,400
<font color="#E5E5E5">hello and Ruby the</font><font color="#CCCCCC"> familiar</font><font color="#E5E5E5"> will define</font>

117
00:05:44,779 --> 00:05:52,349
method<font color="#CCCCCC"> word on the class hello there</font>

118
00:05:47,400 --> 00:05:54,179
simple as that<font color="#E5E5E5"> so this so many great</font>

119
00:05:52,349 --> 00:05:56,878
<font color="#CCCCCC">printed ruby</font><font color="#E5E5E5"> gem with the extension you</font>

120
00:05:54,180 --> 00:05:59,129
<font color="#E5E5E5">need to create a ext conf dot RB file</font>

121
00:05:56,879 --> 00:06:01,740
where you specify<font color="#E5E5E5"> compilation option for</font>

122
00:05:59,129 --> 00:06:04,770
<font color="#CCCCCC">you C</font><font color="#E5E5E5"> extension and the two main lines</font>

123
00:06:01,740 --> 00:06:06,210
<font color="#E5E5E5">the one required MMFF and</font><font color="#CCCCCC"> Creed my</font>

124
00:06:04,770 --> 00:06:08,729
father actually<font color="#CCCCCC"> did to only</font><font color="#E5E5E5"> require</font>

125
00:06:06,210 --> 00:06:10,560
lines everything<font color="#E5E5E5"> else are</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> compilation</font>

126
00:06:08,729 --> 00:06:16,830
<font color="#E5E5E5">option you can specify at the top of the</font>

127
00:06:10,560 --> 00:06:20,729
defaults so after you create your six

128
00:06:16,830 --> 00:06:23,550
tension in your<font color="#E5E5E5"> ax</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> Kampf you invoke</font>

129
00:06:20,729 --> 00:06:25,889
your ext conf<font color="#E5E5E5"> Ruby</font><font color="#CCCCCC"> Val</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> Ruby itself</font>

130
00:06:23,550 --> 00:06:27,599
which is generally the make<font color="#E5E5E5"> foul and by</font>

131
00:06:25,889 --> 00:06:29,879
having<font color="#CCCCCC"> to make value just compile your</font>

132
00:06:27,599 --> 00:06:35,039
extension which generate a shared<font color="#CCCCCC"> object</font>

133
00:06:29,879 --> 00:06:37,349
at the end<font color="#E5E5E5"> and to just users you can do</font>

134
00:06:35,039 --> 00:06:38,580
require or you can do require relative

135
00:06:37,349 --> 00:06:40,469
<font color="#CCCCCC">sorry cool the</font><font color="#E5E5E5"> difference between the</font>

136
00:06:38,580 --> 00:06:44,190
two is required relative<font color="#E5E5E5"> will look for</font>

137
00:06:40,469 --> 00:06:46,050
the Ruby or<font color="#CCCCCC"> the share object in the</font>

138
00:06:44,190 --> 00:06:50,270
current path whereas the require we look

139
00:06:46,050 --> 00:06:53,370
in the your Ruby<font color="#E5E5E5"> setup on your</font><font color="#CCCCCC"> machine</font>

140
00:06:50,270 --> 00:06:58,680
<font color="#E5E5E5">and by to</font><font color="#CCCCCC"> use that you just use a normal</font>

141
00:06:53,370 --> 00:07:00,930
Ruby class so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a structure</font><font color="#CCCCCC"> of a</font>

142
00:06:58,680 --> 00:07:02,789
<font color="#CCCCCC">typical gem so the</font>

143
00:07:00,930 --> 00:07:06,509
<font color="#CCCCCC">lib part with the</font><font color="#E5E5E5"> pill contain Ruby code</font>

144
00:07:02,789 --> 00:07:09,300
and the<font color="#CCCCCC"> EXT part will contain native C</font>

145
00:07:06,509 --> 00:07:13,740
code<font color="#E5E5E5"> and everything else is test and</font>

146
00:07:09,300 --> 00:07:15,780
break<font color="#E5E5E5"> fall so API fundamental Dementors</font>

147
00:07:13,740 --> 00:07:18,169
about writing C extension is so

148
00:07:15,780 --> 00:07:21,869
discouraging<font color="#CCCCCC"> of the use of Malakand free</font>

149
00:07:18,169 --> 00:07:24,000
so<font color="#E5E5E5"> just keep in</font><font color="#CCCCCC"> mind the API only</font>

150
00:07:21,870 --> 00:07:28,350
discards you it does<font color="#E5E5E5"> not prevent you</font><font color="#CCCCCC"> to</font>

151
00:07:24,000 --> 00:07:32,310
use malloc and free<font color="#E5E5E5"> leap</font><font color="#CCCCCC"> fray to Ruby</font>

152
00:07:28,350 --> 00:07:35,190
garbage collector and<font color="#CCCCCC"> one of the main</font>

153
00:07:32,310 --> 00:07:37,080
key thing<font color="#E5E5E5"> within C extension is this</font>

154
00:07:35,190 --> 00:07:39,270
value type<font color="#E5E5E5"> so everything in Ruby is an</font>

155
00:07:37,080 --> 00:07:42,359
object<font color="#E5E5E5"> and in C extension as well</font><font color="#CCCCCC"> so</font>

156
00:07:39,270 --> 00:07:44,849
this<font color="#E5E5E5"> value type is</font><font color="#CCCCCC"> actually a pointer to</font>

157
00:07:42,360 --> 00:07:46,440
a ruby<font color="#CCCCCC"> object within</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> extension</font><font color="#E5E5E5"> so</font>

158
00:07:44,849 --> 00:07:49,139
the API does never allows you to access

159
00:07:46,440 --> 00:07:51,449
Ruby<font color="#E5E5E5"> object rightly instead give</font><font color="#CCCCCC"> your</font>

160
00:07:49,139 --> 00:07:53,030
pointer<font color="#CCCCCC"> to these objects and</font><font color="#E5E5E5"> to</font>

161
00:07:51,449 --> 00:07:56,460
understand<font color="#E5E5E5"> what type of object within</font>

162
00:07:53,030 --> 00:07:59,400
what title object this value type is you

163
00:07:56,460 --> 00:08:07,888
can use<font color="#E5E5E5"> Ruby type and say raise a string</font>

164
00:07:59,400 --> 00:08:11,698
<font color="#E5E5E5">and so on so why did I look into this so</font>

165
00:08:07,889 --> 00:08:13,260
when<font color="#CCCCCC"> I join when I start</font><font color="#E5E5E5"> doing up and</font>

166
00:08:11,699 --> 00:08:15,479
testing is a full-time job<font color="#CCCCCC"> always for</font>

167
00:08:13,260 --> 00:08:17,580
that<font color="#CCCCCC"> binary was one of the main area to</font>

168
00:08:15,479 --> 00:08:19,349
to concentrate on so I<font color="#E5E5E5"> wanted to learn</font>

169
00:08:17,580 --> 00:08:22,409
more<font color="#E5E5E5"> about</font><font color="#CCCCCC"> explore development itself</font>

170
00:08:19,349 --> 00:08:24,750
<font color="#E5E5E5">and active</font><font color="#CCCCCC"> learning is one of the main</font>

171
00:08:22,409 --> 00:08:27,300
reason I wanted<font color="#E5E5E5"> to do this and just</font>

172
00:08:24,750 --> 00:08:30,150
<font color="#CCCCCC">looking</font><font color="#E5E5E5"> at I don't</font><font color="#CCCCCC"> know looking at</font>

173
00:08:27,300 --> 00:08:31,680
bounties out there<font color="#E5E5E5"> I realized that you</font>

174
00:08:30,150 --> 00:08:34,140
can still<font color="#CCCCCC"> find bugs you don't have to</font>

175
00:08:31,680 --> 00:08:36,029
write exploit ancestry<font color="#CCCCCC"> you can still you</font>

176
00:08:34,140 --> 00:08:39,150
know<font color="#E5E5E5"> contribute funding box to report</font>

177
00:08:36,029 --> 00:08:40,650
the box<font color="#E5E5E5"> and contribute</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> community</font>

178
00:08:39,150 --> 00:08:42,150
so explore development is not

179
00:08:40,650 --> 00:08:43,708
<font color="#E5E5E5">necessarily if you want to do this kind</font>

180
00:08:42,150 --> 00:08:48,089
of stuff

181
00:08:43,708 --> 00:08:50,069
I chose Ruby<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I've work</font><font color="#E5E5E5"> will be</font>

182
00:08:48,089 --> 00:08:55,320
<font color="#E5E5E5">more than seven years so it was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> heated</font>

183
00:08:50,070 --> 00:08:57,510
choice and again<font color="#E5E5E5"> Ruby itself and Emma</font>

184
00:08:55,320 --> 00:09:00,600
will be<font color="#E5E5E5"> within Shopify script is already</font>

185
00:08:57,510 --> 00:09:02,880
part of bounties but<font color="#CCCCCC"> I notice that</font><font color="#E5E5E5"> C</font>

186
00:09:00,600 --> 00:09:04,920
<font color="#E5E5E5">extension I couldn't find anyone doing</font>

187
00:09:02,880 --> 00:09:10,320
much research on C extension that's why

188
00:09:04,920 --> 00:09:14,910
I<font color="#E5E5E5"> kind of dig into it area a bit more so</font>

189
00:09:10,320 --> 00:09:16,770
let's talk a<font color="#CCCCCC"> bit about</font><font color="#E5E5E5"> fuzzing now so</font>

190
00:09:14,910 --> 00:09:18,150
the main reason people<font color="#E5E5E5"> do fasting is</font>

191
00:09:16,770 --> 00:09:22,890
because code reviews can<font color="#CCCCCC"> be quite hard</font>

192
00:09:18,150 --> 00:09:26,640
to detect box often<font color="#E5E5E5"> what complexity of</font>

193
00:09:22,890 --> 00:09:30,449
the code<font color="#CCCCCC"> they mainly the main purpose of</font>

194
00:09:26,640 --> 00:09:34,199
<font color="#CCCCCC">passing in fire a lot of inputs to</font><font color="#E5E5E5"> the</font>

195
00:09:30,450 --> 00:09:36,420
binary<font color="#E5E5E5"> and make the binary crash</font><font color="#CCCCCC"> that's</font>

196
00:09:34,200 --> 00:09:40,830
<font color="#E5E5E5">really what</font><font color="#CCCCCC"> forging into the high level</font>

197
00:09:36,420 --> 00:09:43,229
<font color="#E5E5E5">is the</font><font color="#CCCCCC"> core analysis is the post crash</font>

198
00:09:40,830 --> 00:09:45,030
<font color="#CCCCCC">analysis</font><font color="#E5E5E5"> of why the crash happened with</font>

199
00:09:43,230 --> 00:09:50,070
this kind of input<font color="#E5E5E5"> in the first place</font>

200
00:09:45,030 --> 00:09:53,930
and parsing itself<font color="#CCCCCC"> lead typically</font>

201
00:09:50,070 --> 00:09:55,650
<font color="#E5E5E5">require little effort in most cases</font>

202
00:09:53,930 --> 00:09:57,839
fuzzing mainly divided in two main

203
00:09:55,650 --> 00:10:00,480
<font color="#E5E5E5">categories so Dom is</font><font color="#CCCCCC"> much</font><font color="#E5E5E5"> fasting so</font>

204
00:09:57,840 --> 00:10:02,220
damn far thing is where the input<font color="#CCCCCC"> is</font>

205
00:10:00,480 --> 00:10:04,410
randomly<font color="#CCCCCC"> generated by the father the</font>

206
00:10:02,220 --> 00:10:07,500
father<font color="#E5E5E5"> has no knowledge at all about the</font>

207
00:10:04,410 --> 00:10:09,360
<font color="#E5E5E5">binary</font><font color="#CCCCCC"> you're targeting whereas in in</font>

208
00:10:07,500 --> 00:10:11,310
opposite smart<font color="#E5E5E5"> fuzzing they really</font>

209
00:10:09,360 --> 00:10:12,720
target specifically pure binary<font color="#E5E5E5"> and</font>

210
00:10:11,310 --> 00:10:16,589
<font color="#E5E5E5">they're typically require more take more</font>

211
00:10:12,720 --> 00:10:19,560
<font color="#E5E5E5">and more effort to be</font><font color="#CCCCCC"> saturd</font><font color="#E5E5E5"> so in term</font>

212
00:10:16,590 --> 00:10:22,440
of type<font color="#E5E5E5"> of father</font><font color="#CCCCCC"> as I said</font><font color="#E5E5E5"> they're</font>

213
00:10:19,560 --> 00:10:24,839
<font color="#E5E5E5">really mainly divided into how the input</font>

214
00:10:22,440 --> 00:10:28,110
is generated<font color="#E5E5E5"> so</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> mutation</font><font color="#CCCCCC"> based father</font>

215
00:10:24,840 --> 00:10:29,670
<font color="#E5E5E5">is where you provide simple inputs for</font>

216
00:10:28,110 --> 00:10:33,780
<font color="#E5E5E5">the father and</font><font color="#CCCCCC"> the father will</font><font color="#E5E5E5"> mutate</font>

217
00:10:29,670 --> 00:10:35,459
<font color="#E5E5E5">Bo's and target the binary whereas</font>

218
00:10:33,780 --> 00:10:37,410
generation based fasting is where

219
00:10:35,460 --> 00:10:39,480
<font color="#E5E5E5">actually the father knows more about the</font>

220
00:10:37,410 --> 00:10:42,839
binary<font color="#E5E5E5"> you're targeting and it generates</font>

221
00:10:39,480 --> 00:10:44,940
<font color="#E5E5E5">inputs itself evolutionary feedback</font>

222
00:10:42,840 --> 00:10:48,240
<font color="#CCCCCC">driven we are more similar to mutational</font>

223
00:10:44,940 --> 00:10:50,430
father and<font color="#CCCCCC"> the work is very</font><font color="#E5E5E5"> used</font>

224
00:10:48,240 --> 00:10:55,110
instrumentation to understand that<font color="#E5E5E5"> a new</font>

225
00:10:50,430 --> 00:10:56,849
input<font color="#E5E5E5"> reach some new</font><font color="#CCCCCC"> code path there are</font>

226
00:10:55,110 --> 00:10:58,380
<font color="#CCCCCC">some new experimental</font><font color="#E5E5E5"> type of father</font>

227
00:10:56,850 --> 00:11:00,750
<font color="#E5E5E5">they are called transformational</font><font color="#CCCCCC"> based</font>

228
00:10:58,380 --> 00:11:02,189
fuzzing<font color="#E5E5E5"> so the ideal board is when you</font>

229
00:11:00,750 --> 00:11:04,260
have some input checks in your<font color="#E5E5E5"> binary</font>

230
00:11:02,190 --> 00:11:07,230
let's say you have a<font color="#E5E5E5"> CRC check on the</font>

231
00:11:04,260 --> 00:11:09,030
<font color="#CCCCCC">upon</font><font color="#E5E5E5"> your probe on e to the binary and a</font>

232
00:11:07,230 --> 00:11:11,160
mutational<font color="#CCCCCC"> atom father will never</font><font color="#E5E5E5"> be</font>

233
00:11:09,030 --> 00:11:13,530
able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> reach to</font><font color="#E5E5E5"> pass this input check</font>

234
00:11:11,160 --> 00:11:15,510
so this<font color="#CCCCCC"> theory</font><font color="#E5E5E5"> of transformational</font><font color="#CCCCCC"> base</font>

235
00:11:13,530 --> 00:11:17,760
passing is where the father will mutate

236
00:11:15,510 --> 00:11:20,880
the banner itself<font color="#E5E5E5"> temporarily disable</font>

237
00:11:17,760 --> 00:11:24,390
the<font color="#E5E5E5"> these particular checks and carry on</font>

238
00:11:20,880 --> 00:11:26,420
<font color="#E5E5E5">fussing with random inputs of</font><font color="#CCCCCC"> course we</font>

239
00:11:24,390 --> 00:11:28,819
miscalculate more false false positives

240
00:11:26,420 --> 00:11:30,649
as you can imagine if you

241
00:11:28,819 --> 00:11:32,719
move the input check and you get a crash

242
00:11:30,649 --> 00:11:34,759
you still need to<font color="#CCCCCC"> validate</font><font color="#E5E5E5"> the crash can</font>

243
00:11:32,720 --> 00:11:40,609
be<font color="#CCCCCC"> replicated by</font><font color="#E5E5E5"> putting the</font><font color="#CCCCCC"> the input</font>

244
00:11:34,759 --> 00:11:41,959
<font color="#E5E5E5">check back</font><font color="#CCCCCC"> so for visitors I use AFL</font>

245
00:11:40,609 --> 00:11:44,179
which is American<font color="#CCCCCC"> fossil up was</font>

246
00:11:41,959 --> 00:11:47,829
developed by Michael<font color="#CCCCCC"> Zaleski</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> X</font>

247
00:11:44,179 --> 00:11:52,160
Google employee and our<font color="#CCCCCC"> FL words</font><font color="#E5E5E5"> is a</font>

248
00:11:47,829 --> 00:11:54,649
compiled time instrumentation<font color="#E5E5E5"> so the</font>

249
00:11:52,160 --> 00:11:56,449
main feature is it can detect that a new

250
00:11:54,649 --> 00:11:59,779
<font color="#E5E5E5">code path has</font><font color="#CCCCCC"> been raised by the</font><font color="#E5E5E5"> input</font>

251
00:11:56,449 --> 00:12:02,238
you provide<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the binary and it really</font>

252
00:11:59,779 --> 00:12:03,949
works best<font color="#E5E5E5"> we've reduced this case so as</font>

253
00:12:02,239 --> 00:12:05,929
you<font color="#E5E5E5"> can imagine if the the banner has to</font>

254
00:12:03,949 --> 00:12:07,758
pass in the input you provide smaller

255
00:12:05,929 --> 00:12:10,339
the input is faster the fuzzing process

256
00:12:07,759 --> 00:12:11,929
would be one<font color="#E5E5E5"> of the feature</font><font color="#CCCCCC"> of FL is</font>

257
00:12:10,339 --> 00:12:13,489
dictionaries so let's say you're

258
00:12:11,929 --> 00:12:15,709
targeting let's say you're fuzzing

259
00:12:13,489 --> 00:12:17,959
sequel<font color="#E5E5E5"> light or any kind of language</font>

260
00:12:15,709 --> 00:12:20,149
specific you can<font color="#E5E5E5"> specify a set of</font>

261
00:12:17,959 --> 00:12:22,248
<font color="#CCCCCC">keywords that the father will use to</font>

262
00:12:20,149 --> 00:12:25,399
generate<font color="#E5E5E5"> inputs</font><font color="#CCCCCC"> rather</font><font color="#E5E5E5"> than generator</font>

263
00:12:22,249 --> 00:12:28,160
and completely random inputs so other

264
00:12:25,399 --> 00:12:29,720
feature of<font color="#E5E5E5"> the father AFL is</font><font color="#CCCCCC"> it can</font>

265
00:12:28,160 --> 00:12:31,069
distinguish between unique crashes which

266
00:12:29,720 --> 00:12:33,470
is really helpful<font color="#CCCCCC"> when you get thousand</font>

267
00:12:31,069 --> 00:12:35,358
of crashes<font color="#CCCCCC"> and they are really at</font><font color="#E5E5E5"> the</font>

268
00:12:33,470 --> 00:12:37,429
end<font color="#E5E5E5"> of the is really</font><font color="#CCCCCC"> one unique crash it</font>

269
00:12:35,359 --> 00:12:42,019
really makes it easy<font color="#E5E5E5"> to</font><font color="#CCCCCC"> to kind of</font>

270
00:12:37,429 --> 00:12:43,579
<font color="#CCCCCC">remove all the noise</font><font color="#E5E5E5"> you can when you</font>

271
00:12:42,019 --> 00:12:45,619
when you use<font color="#E5E5E5"> a fail you can use the firm</font>

272
00:12:43,579 --> 00:12:49,429
old<font color="#E5E5E5"> at</font><font color="#CCCCCC"> purchase</font><font color="#E5E5E5"> mode which is a way to</font>

273
00:12:45,619 --> 00:12:53,329
kind of speed<font color="#CCCCCC"> up</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> passing itself</font><font color="#E5E5E5"> so</font>

274
00:12:49,429 --> 00:12:54,829
how differ<font color="#CCCCCC"> works is</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> let's</font>

275
00:12:53,329 --> 00:12:57,378
say you<font color="#E5E5E5"> have a piece of code</font><font color="#CCCCCC"> that does a</font>

276
00:12:54,829 --> 00:12:59,959
lot of business initially zation process

277
00:12:57,379 --> 00:13:01,909
you can put some<font color="#E5E5E5"> some you can</font><font color="#CCCCCC"> actually</font>

278
00:12:59,959 --> 00:13:04,039
<font color="#E5E5E5">catch the binary and compile and saying</font>

279
00:13:01,909 --> 00:13:06,979
hey FL when you start fuzzing a new

280
00:13:04,039 --> 00:13:08,869
process please do not reinitialize they

281
00:13:06,979 --> 00:13:11,119
will<font color="#CCCCCC"> process flow from this</font><font color="#E5E5E5"> point until</font>

282
00:13:08,869 --> 00:13:13,159
<font color="#E5E5E5">this point and for</font><font color="#CCCCCC"> the process from</font><font color="#E5E5E5"> this</font>

283
00:13:11,119 --> 00:13:15,379
<font color="#E5E5E5">kind of</font><font color="#CCCCCC"> State and you will have</font><font color="#E5E5E5"> faster</font>

284
00:13:13,159 --> 00:13:17,569
fuzzing<font color="#CCCCCC"> and</font><font color="#E5E5E5"> persistent mode is a similar</font>

285
00:13:15,379 --> 00:13:20,029
idea<font color="#E5E5E5"> where you will use a single process</font>

286
00:13:17,569 --> 00:13:24,949
to iterate<font color="#CCCCCC"> through multiple inputs</font>

287
00:13:20,029 --> 00:13:26,809
instead of one process and<font color="#E5E5E5"> one input</font><font color="#CCCCCC"> you</font>

288
00:13:24,949 --> 00:13:28,939
<font color="#E5E5E5">can use paralyzation so when you run</font><font color="#CCCCCC"> FL</font>

289
00:13:26,809 --> 00:13:31,819
on<font color="#CCCCCC"> multi course by default one AFL</font>

290
00:13:28,939 --> 00:13:33,679
process<font color="#E5E5E5"> use one CPU so you can spin</font>

291
00:13:31,819 --> 00:13:37,429
across multiple CPUs and multiple

292
00:13:33,679 --> 00:13:38,689
<font color="#CCCCCC">austell well over the network</font><font color="#E5E5E5"> you can if</font>

293
00:13:37,429 --> 00:13:42,108
you don't have the source<font color="#CCCCCC"> code you can</font>

294
00:13:38,689 --> 00:13:42,709
use<font color="#CCCCCC"> QA MO and</font><font color="#E5E5E5"> some other project</font><font color="#CCCCCC"> that</font>

295
00:13:42,109 --> 00:13:45,589
you know

296
00:13:42,709 --> 00:13:49,309
allow you to instrument<font color="#E5E5E5"> binaries without</font>

297
00:13:45,589 --> 00:13:54,410
source code and the<font color="#CCCCCC"> IFL provided by</font>

298
00:13:49,309 --> 00:13:56,118
disability check the<font color="#CCCCCC"> various</font><font color="#E5E5E5"> so how does</font>

299
00:13:54,410 --> 00:13:59,118
<font color="#E5E5E5">a FL does instrumentation which is a</font>

300
00:13:56,119 --> 00:14:03,040
really high level<font color="#CCCCCC"> of instrumentation</font><font color="#E5E5E5"> so</font>

301
00:13:59,119 --> 00:14:06,470
it does insert some code within<font color="#E5E5E5"> your</font>

302
00:14:03,040 --> 00:14:08,629
your binary to kind of<font color="#E5E5E5"> notify better if</font>

303
00:14:06,470 --> 00:14:11,089
a new input<font color="#E5E5E5"> or it's reached a new code</font>

304
00:14:08,629 --> 00:14:12,889
path within the binary and how does<font color="#CCCCCC"> it</font>

305
00:14:11,089 --> 00:14:15,709
<font color="#CCCCCC">do it they generate an intermediate</font>

306
00:14:12,889 --> 00:14:20,240
assembly<font color="#CCCCCC"> when you compile using a</font><font color="#E5E5E5"> GCC or</font>

307
00:14:15,709 --> 00:14:22,459
si<font color="#E5E5E5"> Lang and if you're curious to know</font>

308
00:14:20,240 --> 00:14:24,319
<font color="#E5E5E5">how</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> does</font><font color="#CCCCCC"> and you can</font><font color="#E5E5E5"> use this</font><font color="#CCCCCC"> AFL</font>

309
00:14:22,459 --> 00:14:26,300
keeps assembly<font color="#CCCCCC"> one at compilation time</font>

310
00:14:24,319 --> 00:14:34,099
and it will keep<font color="#CCCCCC"> you</font><font color="#E5E5E5"> with intermediate</font>

311
00:14:26,300 --> 00:14:36,439
<font color="#CCCCCC">assembly so so now what</font><font color="#E5E5E5"> I wanted to</font>

312
00:14:34,100 --> 00:14:39,470
<font color="#CCCCCC">target the</font><font color="#E5E5E5"> extensions so I could compile</font>

313
00:14:36,439 --> 00:14:42,649
the see essentially<font color="#CCCCCC"> cell with AFL but</font>

314
00:14:39,470 --> 00:14:45,350
there wasn't<font color="#E5E5E5"> really a deal</font><font color="#CCCCCC"> which meant I</font>

315
00:14:42,649 --> 00:14:47,600
have to write each fuzzing test case

316
00:14:45,350 --> 00:14:50,629
manually to target<font color="#E5E5E5"> each particular logic</font>

317
00:14:47,600 --> 00:14:53,360
<font color="#E5E5E5">in the C extension and one of the thing</font>

318
00:14:50,629 --> 00:14:55,339
<font color="#E5E5E5">is technolon is often James of C</font>

319
00:14:53,360 --> 00:14:56,899
extension<font color="#E5E5E5"> only</font><font color="#CCCCCC"> have small</font><font color="#E5E5E5"> component</font>

320
00:14:55,339 --> 00:15:01,959
written in C whereas the<font color="#CCCCCC"> rest is written</font>

321
00:14:56,899 --> 00:15:04,910
in Ruby<font color="#E5E5E5"> so</font><font color="#CCCCCC"> why I couldn't</font><font color="#E5E5E5"> just use Ruby</font>

322
00:15:01,959 --> 00:15:07,040
<font color="#E5E5E5">so and because</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> felt once the binary</font>

323
00:15:04,910 --> 00:15:10,009
<font color="#E5E5E5">you you calling which in this case would</font>

324
00:15:07,040 --> 00:15:13,459
be rube itself<font color="#CCCCCC"> I would just comparable</font>

325
00:15:10,009 --> 00:15:16,089
<font color="#CCCCCC">themself to</font><font color="#E5E5E5"> start with and this would be</font>

326
00:15:13,459 --> 00:15:19,040
my fuzzing input<font color="#E5E5E5"> so I would require my</font>

327
00:15:16,089 --> 00:15:22,819
extension<font color="#CCCCCC"> I would open the input file</font>

328
00:15:19,040 --> 00:15:27,349
provide by FL and fast<font color="#E5E5E5"> extension as</font>

329
00:15:22,819 --> 00:15:29,209
simple as<font color="#CCCCCC"> that so in order to understand</font>

330
00:15:27,350 --> 00:15:30,399
even<font color="#E5E5E5"> my</font><font color="#CCCCCC"> setup was working a creative is</font>

331
00:15:29,209 --> 00:15:33,559
really simple

332
00:15:30,399 --> 00:15:36,069
vulnerable<font color="#CCCCCC"> C extension</font><font color="#E5E5E5"> where I wanted to</font>

333
00:15:33,559 --> 00:15:38,240
<font color="#E5E5E5">prove it all this setup was working and</font>

334
00:15:36,069 --> 00:15:40,309
within a minute<font color="#E5E5E5"> ago the crash</font>

335
00:15:38,240 --> 00:15:43,879
so I was pretty confident<font color="#E5E5E5"> everything was</font>

336
00:15:40,309 --> 00:15:45,889
good to go<font color="#E5E5E5"> solo</font><font color="#CCCCCC"> from mistakes</font>

337
00:15:43,879 --> 00:15:48,259
<font color="#E5E5E5">one thing to keep in mind</font><font color="#CCCCCC"> is AFL</font><font color="#E5E5E5"> does</font>

338
00:15:45,889 --> 00:15:49,879
not give you<font color="#CCCCCC"> the result of any of the</font>

339
00:15:48,259 --> 00:15:51,319
binary<font color="#E5E5E5"> so when you</font><font color="#CCCCCC"> file some binary with</font>

340
00:15:49,879 --> 00:15:53,689
an input<font color="#CCCCCC"> with a fail you don't</font><font color="#E5E5E5"> know what</font>

341
00:15:51,319 --> 00:15:56,120
the result is you only know if it<font color="#E5E5E5"> didn't</font>

342
00:15:53,689 --> 00:15:56,599
<font color="#CCCCCC">binary crashes or not</font><font color="#E5E5E5"> so when I was</font>

343
00:15:56,120 --> 00:15:58,180
running

344
00:15:56,600 --> 00:16:01,699
is against<font color="#E5E5E5"> no competing with</font><font color="#CCCCCC"> his famous</font>

345
00:15:58,180 --> 00:16:04,339
<font color="#E5E5E5">XML</font><font color="#CCCCCC"> parson in</font><font color="#E5E5E5"> Ruby</font><font color="#CCCCCC"> and he's a big yes I</font>

346
00:16:01,699 --> 00:16:06,589
said<font color="#E5E5E5"> also big codebase</font><font color="#CCCCCC"> I wasn't</font><font color="#E5E5E5"> getting</font>

347
00:16:04,339 --> 00:16:08,600
anything out of it it was a if<font color="#E5E5E5"> L was</font>

348
00:16:06,589 --> 00:16:11,600
<font color="#E5E5E5">keep telling me</font><font color="#CCCCCC"> that he couldn't</font><font color="#E5E5E5"> find</font>

349
00:16:08,600 --> 00:16:13,220
any new code tough and stupid enough<font color="#CCCCCC"> I</font>

350
00:16:11,600 --> 00:16:16,880
realized<font color="#CCCCCC"> I wasn't given enough memory to</font>

351
00:16:13,220 --> 00:16:21,290
<font color="#CCCCCC">ASL so yeah so learn from</font><font color="#E5E5E5"> mistake from</font>

352
00:16:16,880 --> 00:16:23,089
here<font color="#E5E5E5"> so final tweaks</font><font color="#CCCCCC"> I could run all of</font>

353
00:16:21,290 --> 00:16:26,360
<font color="#E5E5E5">these on my base OS which is probably</font>

354
00:16:23,089 --> 00:16:28,100
<font color="#CCCCCC">bad idea also want to</font><font color="#E5E5E5"> maybe try to</font>

355
00:16:26,360 --> 00:16:30,259
<font color="#E5E5E5">target if in ruby version different</font>

356
00:16:28,100 --> 00:16:33,589
generation<font color="#E5E5E5"> and use</font><font color="#CCCCCC"> maybe different</font>

357
00:16:30,259 --> 00:16:40,459
compilation options for<font color="#CCCCCC"> AFL and for</font>

358
00:16:33,589 --> 00:16:43,040
example<font color="#CCCCCC"> user sanitizer could use VMs</font>

359
00:16:40,459 --> 00:16:45,529
<font color="#CCCCCC">Bahia VMs or</font><font color="#E5E5E5"> a bit of a pain</font><font color="#CCCCCC"> to you know</font>

360
00:16:43,040 --> 00:16:47,599
copy and clone and stuff like that so<font color="#E5E5E5"> I</font>

361
00:16:45,529 --> 00:16:49,430
ended up<font color="#CCCCCC"> getting a bunch of docker</font>

362
00:16:47,600 --> 00:16:54,009
containers which was all available of

363
00:16:49,430 --> 00:16:57,019
Israel<font color="#E5E5E5"> if you're interested and was</font>

364
00:16:54,009 --> 00:17:00,470
<font color="#E5E5E5">really my kind of</font><font color="#CCCCCC"> setup</font><font color="#E5E5E5"> for in term of</font>

365
00:16:57,019 --> 00:17:02,959
machines<font color="#CCCCCC"> so that is what I use for</font><font color="#E5E5E5"> the</font>

366
00:17:00,470 --> 00:17:06,199
<font color="#CCCCCC">firm or wherever</font><font color="#E5E5E5"> else obviously the main</font>

367
00:17:02,959 --> 00:17:08,658
daughter<font color="#CCCCCC"> C Ruby</font><font color="#E5E5E5"> code so visit the source</font>

368
00:17:06,199 --> 00:17:10,490
code of<font color="#E5E5E5"> Ruby and what the ddr escape all</font>

369
00:17:08,659 --> 00:17:12,770
the<font color="#CCCCCC"> initialization code of Ruby and I</font>

370
00:17:10,490 --> 00:17:14,780
say when<font color="#E5E5E5"> he when a FL wants to start</font>

371
00:17:12,770 --> 00:17:18,650
<font color="#CCCCCC">fuzzing a new process it just start from</font>

372
00:17:14,780 --> 00:17:20,990
this point<font color="#E5E5E5"> it will make</font><font color="#CCCCCC"> fuzzing faster</font>

373
00:17:18,650 --> 00:17:22,400
my doctor<font color="#CCCCCC"> setup is</font><font color="#E5E5E5"> really simple I</font><font color="#CCCCCC"> just</font>

374
00:17:20,990 --> 00:17:24,919
install all the dependencies you<font color="#E5E5E5"> need</font>

375
00:17:22,400 --> 00:17:26,419
the<font color="#E5E5E5"> loading</font><font color="#CCCCCC"> company FL</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> environment</font>

376
00:17:24,919 --> 00:17:29,210
<font color="#CCCCCC">vailable to tell to compile everything</font>

377
00:17:26,419 --> 00:17:31,820
with a FL dollar Ruby<font color="#E5E5E5"> fetch the Ruby</font>

378
00:17:29,210 --> 00:17:35,539
<font color="#CCCCCC">minus CS just show before</font><font color="#E5E5E5"> and compile</font>

379
00:17:31,820 --> 00:17:37,370
<font color="#CCCCCC">the file so this world looks like</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I'm</font>

380
00:17:35,539 --> 00:17:39,260
inside my docker container<font color="#E5E5E5"> I install a</font>

381
00:17:37,370 --> 00:17:45,709
<font color="#CCCCCC">gem</font><font color="#E5E5E5"> we've seen extension</font><font color="#CCCCCC"> I create my</font>

382
00:17:39,260 --> 00:17:48,580
<font color="#CCCCCC">fuzzing</font><font color="#E5E5E5"> enter point and I create a</font>

383
00:17:45,710 --> 00:17:48,580
<font color="#E5E5E5">simple test case</font>

384
00:17:53,610 --> 00:17:59,939
<font color="#E5E5E5">and</font><font color="#CCCCCC"> alight</font><font color="#E5E5E5"> fasting running as simple as</font>

385
00:17:56,010 --> 00:18:02,280
<font color="#CCCCCC">that I guess so</font>

386
00:17:59,940 --> 00:18:05,550
all<font color="#E5E5E5"> was the top now to start actually</font>

387
00:18:02,280 --> 00:18:07,200
looking<font color="#CCCCCC"> into</font><font color="#E5E5E5"> something I didn't really</font>

388
00:18:05,550 --> 00:18:08,970
know what<font color="#E5E5E5"> to fast to start with I wasn't</font>

389
00:18:07,200 --> 00:18:11,100
too aware of too many<font color="#CCCCCC"> see extensions so</font>

390
00:18:08,970 --> 00:18:13,920
I found out<font color="#E5E5E5"> about this</font><font color="#CCCCCC"> Ruby toolbox</font>

391
00:18:11,100 --> 00:18:16,860
website that collects a lot<font color="#CCCCCC"> of nice</font><font color="#E5E5E5"> gems</font>

392
00:18:13,920 --> 00:18:20,280
so I kind of picked<font color="#E5E5E5"> fusee extension from</font>

393
00:18:16,860 --> 00:18:23,909
this and I start targeting mainly

394
00:18:20,280 --> 00:18:27,170
<font color="#CCCCCC">pushers this is the</font><font color="#E5E5E5"> hardware I use which</font>

395
00:18:23,910 --> 00:18:30,260
is my own personal laptop which is yes

396
00:18:27,170 --> 00:18:32,480
<font color="#E5E5E5">best idea to use a laptop you know</font>

397
00:18:30,260 --> 00:18:36,090
nothing else

398
00:18:32,480 --> 00:18:39,720
so my first<font color="#E5E5E5"> target was BC CSV which is a</font>

399
00:18:36,090 --> 00:18:41,820
pure seed shisui<font color="#E5E5E5"> parser</font><font color="#CCCCCC"> I was still</font>

400
00:18:39,720 --> 00:18:45,450
<font color="#E5E5E5">trying very CFL option was while running</font>

401
00:18:41,820 --> 00:18:50,550
<font color="#CCCCCC">this and would be</font><font color="#E5E5E5"> 22nd running</font><font color="#CCCCCC"> AFL</font><font color="#E5E5E5"> on</font>

402
00:18:45,450 --> 00:18:52,290
<font color="#CCCCCC">these I got a crash so I thought that</font>

403
00:18:50,550 --> 00:18:54,360
something<font color="#CCCCCC"> was wrong with my</font><font color="#E5E5E5"> setup</font>

404
00:18:52,290 --> 00:18:57,750
because<font color="#E5E5E5"> having a crash in</font><font color="#CCCCCC"> 20 second is</font>

405
00:18:54,360 --> 00:19:00,000
really<font color="#E5E5E5"> probably uncommon but instead it</font>

406
00:18:57,750 --> 00:19:02,790
<font color="#CCCCCC">was actually a real case so by adding up</font>

407
00:19:00,000 --> 00:19:06,630
doing some root cause<font color="#E5E5E5"> analysis in the</font>

408
00:19:02,790 --> 00:19:08,460
<font color="#CCCCCC">codebase I realized</font><font color="#E5E5E5"> that there was a</font>

409
00:19:06,630 --> 00:19:10,500
double free<font color="#CCCCCC"> condition in</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> case so</font>

410
00:19:08,460 --> 00:19:12,600
when I<font color="#E5E5E5"> was conditionally</font><font color="#CCCCCC"> the one line</font>

411
00:19:10,500 --> 00:19:14,130
was<font color="#CCCCCC"> backslash it was</font><font color="#E5E5E5"> fraying the line</font>

412
00:19:12,600 --> 00:19:18,360
and it was<font color="#CCCCCC"> freeing the same line</font>

413
00:19:14,130 --> 00:19:20,880
afterwards<font color="#E5E5E5"> so in this case I submitted a</font>

414
00:19:18,360 --> 00:19:23,250
fix to<font color="#E5E5E5"> the maintainer it was made</font>

415
00:19:20,880 --> 00:19:29,360
without any<font color="#E5E5E5"> changes which surprising</font>

416
00:19:23,250 --> 00:19:29,360
considering I'm not su programa<font color="#E5E5E5"> so and</font>

417
00:19:29,450 --> 00:19:34,320
so I want<font color="#CCCCCC"> to give a</font><font color="#E5E5E5"> really quick</font>

418
00:19:31,590 --> 00:19:37,139
<font color="#CCCCCC">overview of a double</font><font color="#E5E5E5"> fray on</font><font color="#CCCCCC"> Hanah</font>

419
00:19:34,320 --> 00:19:40,200
<font color="#CCCCCC">hippies</font><font color="#E5E5E5"> so when you free a chunk</font><font color="#CCCCCC"> in your</font>

420
00:19:37,140 --> 00:19:43,800
energy<font color="#CCCCCC"> pin gypsy will end up in a in a</font>

421
00:19:40,200 --> 00:19:45,840
beam<font color="#E5E5E5"> usually is a doubling list</font><font color="#CCCCCC"> and when</font>

422
00:19:43,800 --> 00:19:49,139
you double free the same chunk again the

423
00:19:45,840 --> 00:19:51,870
same chunk will end up in the<font color="#CCCCCC"> double</font>

424
00:19:49,140 --> 00:19:54,720
<font color="#CCCCCC">linked list whatever means is the first</font>

425
00:19:51,870 --> 00:19:58,199
time the tongue had<font color="#E5E5E5"> reallocated the user</font>

426
00:19:54,720 --> 00:20:00,720
get<font color="#E5E5E5"> X get access to the</font><font color="#CCCCCC"> get the</font><font color="#E5E5E5"> two</font>

427
00:19:58,200 --> 00:20:03,390
pointer to<font color="#E5E5E5"> the memory address and the</font>

428
00:20:00,720 --> 00:20:07,330
same chunk is still in in the in actual

429
00:20:03,390 --> 00:20:09,400
beam so what it means is<font color="#CCCCCC"> you</font>

430
00:20:07,330 --> 00:20:13,720
<font color="#CCCCCC">you actually able</font><font color="#E5E5E5"> to control the pointer</font>

431
00:20:09,400 --> 00:20:16,750
of the chunk<font color="#E5E5E5"> within the beam which which</font>

432
00:20:13,720 --> 00:20:18,940
means you can control<font color="#E5E5E5"> it traditionally</font>

433
00:20:16,750 --> 00:20:20,590
you could exploit<font color="#E5E5E5"> this by changing the</font>

434
00:20:18,940 --> 00:20:23,020
forward point and backward pointed of

435
00:20:20,590 --> 00:20:27,100
the list by writing arbitrary<font color="#CCCCCC"> Kong</font>

436
00:20:23,020 --> 00:20:29,950
<font color="#E5E5E5">arbitrary memory addresses</font><font color="#CCCCCC"> and achieve</font>

437
00:20:27,100 --> 00:20:31,840
code execution model in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> not</font>

438
00:20:29,950 --> 00:20:34,680
<font color="#E5E5E5">really easy</font><font color="#CCCCCC"> anymore</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> there are</font>

439
00:20:31,840 --> 00:20:36,879
<font color="#E5E5E5">corruption memory detection built in of</font>

440
00:20:34,680 --> 00:20:40,660
course<font color="#E5E5E5"> this might not be the case if use</font>

441
00:20:36,880 --> 00:20:43,750
embedded<font color="#E5E5E5"> systems and or if you disable</font>

442
00:20:40,660 --> 00:20:46,540
<font color="#E5E5E5">those checks you wonder why you should</font>

443
00:20:43,750 --> 00:20:49,570
disable<font color="#E5E5E5"> those security checks doing some</font>

444
00:20:46,540 --> 00:20:51,550
research online<font color="#E5E5E5"> I found some some</font>

445
00:20:49,570 --> 00:20:55,149
<font color="#E5E5E5">interesting things of companies</font>

446
00:20:51,550 --> 00:21:01,050
suggesting that you<font color="#CCCCCC"> should remove those</font>

447
00:20:55,150 --> 00:21:03,220
checks which is a bit shocking so yeah

448
00:21:01,050 --> 00:21:04,840
so instead of<font color="#CCCCCC"> things</font><font color="#E5E5E5"> the code base we</font>

449
00:21:03,220 --> 00:21:07,990
were just<font color="#CCCCCC"> suggesting hey just remove the</font>

450
00:21:04,840 --> 00:21:12,209
check and<font color="#E5E5E5"> carry on and please don't do</font>

451
00:21:07,990 --> 00:21:17,110
<font color="#CCCCCC">this don't</font><font color="#E5E5E5"> follow suggestion where bed</font>

452
00:21:12,210 --> 00:21:20,530
<font color="#E5E5E5">so I moved on</font><font color="#CCCCCC"> this is my next</font><font color="#E5E5E5"> post my</font>

453
00:21:17,110 --> 00:21:23,409
<font color="#CCCCCC">next target so</font><font color="#E5E5E5"> o X is a fast XML parser</font>

454
00:21:20,530 --> 00:21:26,500
as a lot<font color="#E5E5E5"> of features</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> know describe</font>

455
00:21:23,410 --> 00:21:28,840
them<font color="#E5E5E5"> all and this last on the last line</font>

456
00:21:26,500 --> 00:21:35,290
is one of the input<font color="#E5E5E5"> where AFL generated</font>

457
00:21:28,840 --> 00:21:38,949
<font color="#CCCCCC">after five minutes and so in this case</font>

458
00:21:35,290 --> 00:21:40,629
<font color="#CCCCCC">it was just a null</font><font color="#E5E5E5"> point so the function</font>

459
00:21:38,950 --> 00:21:44,020
was a<font color="#CCCCCC"> stunning null and it could be</font><font color="#E5E5E5"> as</font>

460
00:21:40,630 --> 00:21:46,410
expected<font color="#E5E5E5"> of strut</font><font color="#CCCCCC"> and talking to</font>

461
00:21:44,020 --> 00:21:48,970
interesting the process just<font color="#E5E5E5"> crashed and</font>

462
00:21:46,410 --> 00:21:53,200
<font color="#CCCCCC">if the fix of the maintainer was just</font>

463
00:21:48,970 --> 00:21:55,390
check that you know this variable<font color="#CCCCCC"> isn't</font>

464
00:21:53,200 --> 00:21:56,710
if it's<font color="#E5E5E5"> not just you know exit</font>

465
00:21:55,390 --> 00:22:00,100
gracefully rather than<font color="#E5E5E5"> crashed into the</font>

466
00:21:56,710 --> 00:22:02,920
process and<font color="#E5E5E5"> I target another</font>

467
00:22:00,100 --> 00:22:04,870
functionality<font color="#E5E5E5"> of</font><font color="#CCCCCC"> visual</font><font color="#E5E5E5"> X which is a sax</font>

468
00:22:02,920 --> 00:22:07,030
parser<font color="#E5E5E5"> and within few</font><font color="#CCCCCC"> hours I got</font>

469
00:22:04,870 --> 00:22:09,219
another crash and this looked at a bit

470
00:22:07,030 --> 00:22:11,470
more<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I got a stack-based</font>

471
00:22:09,220 --> 00:22:16,860
<font color="#E5E5E5">bottle</font><font color="#CCCCCC"> overflow as you can see the</font>

472
00:22:11,470 --> 00:22:20,890
memory address as raised up there<font color="#E5E5E5"> and</font>

473
00:22:16,860 --> 00:22:23,590
even running<font color="#CCCCCC"> bay FL with that</font>

474
00:22:20,890 --> 00:22:25,990
the sanitizer<font color="#E5E5E5"> I got the confirmation</font>

475
00:22:23,590 --> 00:22:27,790
that was definitely a buffer overflow<font color="#E5E5E5"> so</font>

476
00:22:25,990 --> 00:22:30,010
quick note about a<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sanitizer is a</font>

477
00:22:27,790 --> 00:22:35,139
fast memory<font color="#E5E5E5"> error detector and it can</font>

478
00:22:30,010 --> 00:22:36,850
<font color="#E5E5E5">detect this kind</font><font color="#CCCCCC"> of memory</font><font color="#E5E5E5"> corruption so</font>

479
00:22:35,140 --> 00:22:38,590
the input<font color="#CCCCCC"> that generated bees was a</font>

480
00:22:36,850 --> 00:22:43,209
bunch of carriage return<font color="#E5E5E5"> character</font>

481
00:22:38,590 --> 00:22:48,250
followed<font color="#CCCCCC"> by a bunch of</font><font color="#E5E5E5"> ace and doing a</font>

482
00:22:43,210 --> 00:22:52,330
<font color="#CCCCCC">quick</font><font color="#E5E5E5"> debugging with gdb</font><font color="#CCCCCC"> I noticed by</font>

483
00:22:48,250 --> 00:22:54,160
<font color="#E5E5E5">the string and copy was using n which</font>

484
00:22:52,330 --> 00:22:56,169
was set to this huge number<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it was</font>

485
00:22:54,160 --> 00:22:59,650
kind of all flowing<font color="#E5E5E5"> the destination</font>

486
00:22:56,170 --> 00:23:01,390
buffer in this case so I will probably

487
00:22:59,650 --> 00:23:05,980
skip<font color="#CCCCCC"> this because</font><font color="#E5E5E5"> I don't have enough</font>

488
00:23:01,390 --> 00:23:07,270
<font color="#E5E5E5">times all right</font><font color="#CCCCCC"> so after the first</font>

489
00:23:05,980 --> 00:23:11,920
buffer<font color="#E5E5E5"> overflow was fixed by the</font>

490
00:23:07,270 --> 00:23:13,540
maintainer<font color="#E5E5E5"> the another off by one error</font>

491
00:23:11,920 --> 00:23:17,260
was<font color="#E5E5E5"> still present</font><font color="#CCCCCC"> in the code base in a</font>

492
00:23:13,540 --> 00:23:19,240
different place<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> the same</font>

493
00:23:17,260 --> 00:23:23,290
<font color="#E5E5E5">iteration was the same input generated</font>

494
00:23:19,240 --> 00:23:24,790
the condition<font color="#E5E5E5"> what I did in this case</font>

495
00:23:23,290 --> 00:23:26,320
<font color="#CCCCCC">are work with no maintainer to</font><font color="#E5E5E5"> I</font>

496
00:23:24,790 --> 00:23:28,800
provided<font color="#E5E5E5"> in the doctor the doctor</font>

497
00:23:26,320 --> 00:23:31,360
<font color="#E5E5E5">container I was using</font><font color="#CCCCCC"> to test these</font><font color="#E5E5E5"> and</font>

498
00:23:28,800 --> 00:23:37,480
it<font color="#E5E5E5"> kind of promptly fixed the issue</font>

499
00:23:31,360 --> 00:23:39,729
<font color="#E5E5E5">after a couple of days so after this I</font>

500
00:23:37,480 --> 00:23:40,840
decided<font color="#E5E5E5"> to move into more JSON stuff</font>

501
00:23:39,730 --> 00:23:44,860
after<font color="#E5E5E5"> evalin</font>

502
00:23:40,840 --> 00:23:48,070
<font color="#CCCCCC">csv and xml</font><font color="#E5E5E5"> but for a while why not try</font>

503
00:23:44,860 --> 00:23:49,719
some<font color="#E5E5E5"> JSON so</font><font color="#CCCCCC"> i target</font><font color="#E5E5E5"> bees</font>

504
00:23:48,070 --> 00:23:52,570
<font color="#E5E5E5">it's called yet another decision library</font>

505
00:23:49,720 --> 00:23:54,910
which is actually an existing pure<font color="#E5E5E5"> c</font>

506
00:23:52,570 --> 00:23:59,020
<font color="#E5E5E5">json parser has been ported into</font><font color="#CCCCCC"> ruby</font>

507
00:23:54,910 --> 00:24:04,120
and also this gem has a bunch of

508
00:23:59,020 --> 00:24:06,520
features one<font color="#CCCCCC"> of those is it's</font><font color="#E5E5E5"> supposed</font>

509
00:24:04,120 --> 00:24:09,639
to<font color="#E5E5E5"> be as close</font><font color="#CCCCCC"> as two precious</font><font color="#E5E5E5"> close to</font>

510
00:24:06,520 --> 00:24:11,110
crash proof as possible so<font color="#CCCCCC"> i'd never</font>

511
00:24:09,640 --> 00:24:14,800
<font color="#E5E5E5">thought</font><font color="#CCCCCC"> i could</font><font color="#E5E5E5"> find anything on this</font>

512
00:24:11,110 --> 00:24:19,209
one and I got a<font color="#E5E5E5"> couple of crashes within</font>

513
00:24:14,800 --> 00:24:21,159
<font color="#E5E5E5">a few few hours as well so this</font><font color="#CCCCCC"> was my</font>

514
00:24:19,210 --> 00:24:22,780
typical fuzzing entry point and<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

515
00:24:21,160 --> 00:24:27,400
<font color="#E5E5E5">what the input format</font><font color="#CCCCCC"> AF had generated</font>

516
00:24:22,780 --> 00:24:30,190
for for crash the binary<font color="#CCCCCC"> and the output</font>

517
00:24:27,400 --> 00:24:33,070
I got is this one<font color="#E5E5E5"> so I got bad bitch</font>

518
00:24:30,190 --> 00:24:35,580
should<font color="#E5E5E5"> never happen</font><font color="#CCCCCC"> so yeah I'm not sure</font>

519
00:24:33,070 --> 00:24:39,520
<font color="#E5E5E5">why they happen</font>

520
00:24:35,580 --> 00:24:47,080
and another second<font color="#CCCCCC"> accession failed as</font>

521
00:24:39,520 --> 00:24:49,270
well<font color="#CCCCCC"> from</font><font color="#E5E5E5"> similar input file</font><font color="#CCCCCC"> I'll keep</font>

522
00:24:47,080 --> 00:24:53,169
some<font color="#CCCCCC"> of these but just a quick note of</font>

523
00:24:49,270 --> 00:24:55,060
what<font color="#CCCCCC"> assert is is it's not a mechanism</font>

524
00:24:53,170 --> 00:24:57,820
for<font color="#E5E5E5"> entering you know</font><font color="#CCCCCC"> heralds at</font><font color="#E5E5E5"> runtime</font>

525
00:24:55,060 --> 00:25:00,389
<font color="#CCCCCC">and is often</font><font color="#E5E5E5"> disabled when the code is</font>

526
00:24:57,820 --> 00:25:03,879
it actually shipped for production<font color="#E5E5E5"> news</font>

527
00:25:00,390 --> 00:25:06,940
and what I did in this case<font color="#E5E5E5"> I reported</font>

528
00:25:03,880 --> 00:25:09,490
as usual the issue on github and I

529
00:25:06,940 --> 00:25:11,740
provided the reproduction step and the

530
00:25:09,490 --> 00:25:13,540
fix<font color="#E5E5E5"> was released and the maintainer</font>

531
00:25:11,740 --> 00:25:15,910
actually contact me directly and say can

532
00:25:13,540 --> 00:25:18,940
<font color="#CCCCCC">you please</font><font color="#E5E5E5"> make sure</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the next time</font>

533
00:25:15,910 --> 00:25:21,730
<font color="#CCCCCC">you disclose</font><font color="#E5E5E5"> this product Lee so I was a</font>

534
00:25:18,940 --> 00:25:23,350
bit surprised considering that it was<font color="#E5E5E5"> a</font>

535
00:25:21,730 --> 00:25:26,980
public project<font color="#CCCCCC"> I just</font><font color="#E5E5E5"> open an issue</font><font color="#CCCCCC"> on</font>

536
00:25:23,350 --> 00:25:29,439
<font color="#E5E5E5">github I realized where this guy was the</font>

537
00:25:26,980 --> 00:25:32,230
actual<font color="#E5E5E5"> development manager of github</font><font color="#CCCCCC"> and</font>

538
00:25:29,440 --> 00:25:38,470
this gem<font color="#CCCCCC"> is used by it was downloaded 21</font>

539
00:25:32,230 --> 00:25:41,350
million time from<font color="#CCCCCC"> rubygems so</font><font color="#E5E5E5"> he's also</font>

540
00:25:38,470 --> 00:25:43,350
<font color="#E5E5E5">using some</font><font color="#CCCCCC"> Damian ins in two packages</font><font color="#E5E5E5"> so</font>

541
00:25:41,350 --> 00:25:50,560
you can actually equity install this

542
00:25:43,350 --> 00:25:51,040
<font color="#CCCCCC">Ruby</font><font color="#E5E5E5"> with I never</font><font color="#CCCCCC"> knew about and after a</font>

543
00:25:50,560 --> 00:25:56,050
few<font color="#E5E5E5"> weeks</font>

544
00:25:51,040 --> 00:25:57,190
github release of this which<font color="#CCCCCC"> is a good</font>

545
00:25:56,050 --> 00:25:59,830
timing

546
00:25:57,190 --> 00:26:01,390
oh it<font color="#E5E5E5"> worked is so if you enable</font>

547
00:25:59,830 --> 00:26:04,480
dependency graph on your<font color="#E5E5E5"> Ruby or</font>

548
00:26:01,390 --> 00:26:06,280
JavaScript project<font color="#CCCCCC"> Gaeta will tell you</font>

549
00:26:04,480 --> 00:26:09,700
that if some<font color="#CCCCCC"> of your dependencies of</font>

550
00:26:06,280 --> 00:26:12,820
some<font color="#CCCCCC"> novel vulnerabilities</font><font color="#E5E5E5"> so it's</font>

551
00:26:09,700 --> 00:26:14,830
pretty<font color="#E5E5E5"> cool and you</font><font color="#CCCCCC"> can also set up</font>

552
00:26:12,820 --> 00:26:17,610
various options get notified by mail

553
00:26:14,830 --> 00:26:20,260
every time a<font color="#CCCCCC"> new burner</font><font color="#E5E5E5"> if this comes up</font>

554
00:26:17,610 --> 00:26:26,469
something like<font color="#CCCCCC"> that and this</font><font color="#E5E5E5"> is what it</font>

555
00:26:20,260 --> 00:26:28,720
looks like<font color="#E5E5E5"> in the interface so visa blog</font>

556
00:26:26,470 --> 00:26:30,970
post came out from github<font color="#CCCCCC"> a few days</font><font color="#E5E5E5"> ago</font>

557
00:26:28,720 --> 00:26:33,880
<font color="#E5E5E5">actually and they</font><font color="#CCCCCC"> reported some</font>

558
00:26:30,970 --> 00:26:37,090
statistics about this feature<font color="#E5E5E5"> and they</font>

559
00:26:33,880 --> 00:26:38,830
say that within<font color="#CCCCCC"> 500,000 oh</font><font color="#E5E5E5"> very positive</font>

560
00:26:37,090 --> 00:26:42,870
if they found four million

561
00:26:38,830 --> 00:26:45,100
vulnerabilities in dependencies and

562
00:26:42,870 --> 00:26:49,409
<font color="#CCCCCC">450,000</font><font color="#E5E5E5"> of them were actually already</font>

563
00:26:45,100 --> 00:26:49,409
<font color="#E5E5E5">resolved by project maintainer</font>

564
00:26:49,970 --> 00:26:54,600
<font color="#CCCCCC">to kind of put all of this in context I</font>

565
00:26:52,559 --> 00:26:59,690
set up<font color="#E5E5E5"> a simple rails application let</font>

566
00:26:54,600 --> 00:26:59,689
include all these vulnerable gems<font color="#E5E5E5"> and</font>

567
00:27:00,440 --> 00:27:05,039
the thing I wanted<font color="#E5E5E5"> to in</font><font color="#CCCCCC"> fact file and</font>

568
00:27:02,669 --> 00:27:08,070
emphasize is that even though some of

569
00:27:05,039 --> 00:27:10,379
<font color="#CCCCCC">those might not be exploitable in order</font>

570
00:27:08,070 --> 00:27:12,418
to achieve<font color="#CCCCCC"> remote code execution but</font>

571
00:27:10,379 --> 00:27:13,559
<font color="#E5E5E5">they all process crashes and the</font><font color="#CCCCCC"> old</font>

572
00:27:12,419 --> 00:27:18,080
process<font color="#E5E5E5"> in this case will be</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> your</font>

573
00:27:13,559 --> 00:27:20,730
application server of your<font color="#CCCCCC"> app right and</font>

574
00:27:18,080 --> 00:27:22,408
it's<font color="#E5E5E5"> really hard to often to track down</font>

575
00:27:20,730 --> 00:27:24,119
<font color="#E5E5E5">those issues because there are no</font>

576
00:27:22,409 --> 00:27:26,340
information<font color="#E5E5E5"> in nginx law or your</font>

577
00:27:24,119 --> 00:27:27,418
whatever<font color="#E5E5E5"> web server logs you use that is</font>

578
00:27:26,340 --> 00:27:32,428
nothing<font color="#CCCCCC"> can be</font><font color="#E5E5E5"> logged in your</font>

579
00:27:27,419 --> 00:27:34,980
application logs and in my<font color="#E5E5E5"> setup has</font>

580
00:27:32,429 --> 00:27:37,619
used<font color="#CCCCCC"> Puma and passenger to kind of try</font>

581
00:27:34,980 --> 00:27:40,100
<font color="#CCCCCC">out a few different options</font><font color="#E5E5E5"> by crashing</font>

582
00:27:37,619 --> 00:27:43,499
was you know application servers and

583
00:27:40,100 --> 00:27:45,629
Puma<font color="#CCCCCC"> does</font><font color="#E5E5E5"> not log by default so also by</font>

584
00:27:43,499 --> 00:27:47,940
<font color="#CCCCCC">checking some</font><font color="#E5E5E5"> open source</font><font color="#CCCCCC"> relapse I</font>

585
00:27:45,629 --> 00:27:51,678
noticed<font color="#E5E5E5"> that the Puma configuration</font><font color="#CCCCCC"> just</font>

586
00:27:47,940 --> 00:27:54,269
<font color="#E5E5E5">doesn't include logging by default and</font>

587
00:27:51,679 --> 00:27:56,129
yeah so what I<font color="#E5E5E5"> did I run the app</font><font color="#CCCCCC"> and</font>

588
00:27:54,269 --> 00:27:58,110
replicate the crashes win the app so in

589
00:27:56,129 --> 00:27:59,459
the case<font color="#E5E5E5"> of the CSV nothing was present</font>

590
00:27:58,110 --> 00:28:01,049
at all in the Puma logs<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> the</font>

591
00:27:59,460 --> 00:28:02,909
<font color="#E5E5E5">application server was crashing and</font>

592
00:28:01,049 --> 00:28:08,279
there was no trace whatsoever anywhere

593
00:28:02,909 --> 00:28:11,490
<font color="#E5E5E5">in the logs in same in the case of</font><font color="#CCCCCC"> wax</font>

594
00:28:08,279 --> 00:28:14,429
<font color="#E5E5E5">there was some logging in there which is</font>

595
00:28:11,490 --> 00:28:16,259
good<font color="#CCCCCC"> in</font><font color="#E5E5E5"> case of the buffer</font><font color="#CCCCCC"> overflow over</font>

596
00:28:14,429 --> 00:28:18,480
was some<font color="#E5E5E5"> login but there was nothing</font>

597
00:28:16,259 --> 00:28:21,499
<font color="#CCCCCC">really useful</font><font color="#E5E5E5"> useful to understand why</font>

598
00:28:18,480 --> 00:28:25,200
and what was going<font color="#CCCCCC"> on and in case of the</font>

599
00:28:21,499 --> 00:28:27,240
JSON<font color="#E5E5E5"> one it was kind of clear enough as</font>

600
00:28:25,200 --> 00:28:28,980
well

601
00:28:27,240 --> 00:28:31,710
good thing about<font color="#E5E5E5"> space injuries</font><font color="#CCCCCC"> well</font>

602
00:28:28,980 --> 00:28:33,210
<font color="#E5E5E5">it's passenger logs by default and all</font>

603
00:28:31,710 --> 00:28:36,269
the back traces of<font color="#E5E5E5"> this crashes were</font>

604
00:28:33,210 --> 00:28:38,429
present so again<font color="#E5E5E5"> probably</font><font color="#CCCCCC"> would help</font><font color="#E5E5E5"> you</font>

605
00:28:36,269 --> 00:28:40,470
in case you you know you<font color="#E5E5E5"> have to to dig</font>

606
00:28:38,429 --> 00:28:43,320
into this kind<font color="#E5E5E5"> of issues</font><font color="#CCCCCC"> you might</font>

607
00:28:40,470 --> 00:28:45,149
experience yourself<font color="#CCCCCC"> quick note about</font>

608
00:28:43,320 --> 00:28:46,830
memory leaks<font color="#CCCCCC"> so memory leaks is when a</font>

609
00:28:45,149 --> 00:28:50,070
memory<font color="#CCCCCC"> gets allocated and he's never</font>

610
00:28:46,830 --> 00:28:53,610
<font color="#E5E5E5">been afraid I will skip some of his</font>

611
00:28:50,070 --> 00:28:55,259
stuff because<font color="#CCCCCC"> I'm but</font><font color="#E5E5E5"> I want to to</font>

612
00:28:53,610 --> 00:28:56,490
mention<font color="#E5E5E5"> this because I experienced this</font>

613
00:28:55,259 --> 00:28:58,980
myself

614
00:28:56,490 --> 00:29:01,380
<font color="#E5E5E5">when I was working as a Dave we used to</font>

615
00:28:58,980 --> 00:29:03,510
<font color="#E5E5E5">get about once</font>

616
00:29:01,380 --> 00:29:05,370
twice a day some really weird exception

617
00:29:03,510 --> 00:29:07,650
<font color="#CCCCCC">in</font><font color="#E5E5E5"> our code base</font><font color="#CCCCCC"> that didn't make</font><font color="#E5E5E5"> any</font>

618
00:29:05,370 --> 00:29:09,239
<font color="#CCCCCC">sense so every time the session</font><font color="#E5E5E5"> was</font>

619
00:29:07,650 --> 00:29:11,520
showing<font color="#E5E5E5"> something totally different</font><font color="#CCCCCC"> I</font>

620
00:29:09,240 --> 00:29:13,730
didn't point<font color="#CCCCCC"> 20 of our code base</font><font color="#E5E5E5"> to</font>

621
00:29:11,520 --> 00:29:16,680
<font color="#E5E5E5">actually give an idea what was going on</font>

622
00:29:13,730 --> 00:29:19,730
and better turn out<font color="#E5E5E5"> to be actual memory</font>

623
00:29:16,680 --> 00:29:22,080
leak in no cookie really<font color="#E5E5E5"> lib XML</font>

624
00:29:19,730 --> 00:29:23,850
<font color="#E5E5E5">specifically so this is a kid the same</font>

625
00:29:22,080 --> 00:29:26,520
case by the about experience<font color="#CCCCCC"> so in that</font>

626
00:29:23,850 --> 00:29:30,419
is a<font color="#E5E5E5"> Australian company paid a very big</font>

627
00:29:26,520 --> 00:29:32,220
rails code base<font color="#E5E5E5"> and they wrote a blog</font>

628
00:29:30,420 --> 00:29:36,120
<font color="#CCCCCC">post about this</font><font color="#E5E5E5"> and they made really</font>

629
00:29:32,220 --> 00:29:38,880
good points<font color="#E5E5E5"> they spent months and hours</font>

630
00:29:36,120 --> 00:29:40,439
<font color="#CCCCCC">into looking into this or</font><font color="#E5E5E5"> you can</font>

631
00:29:38,880 --> 00:29:42,990
imagine<font color="#CCCCCC"> it would</font><font color="#E5E5E5"> be a huge cost for a</font>

632
00:29:40,440 --> 00:29:45,390
company to to<font color="#CCCCCC"> track down or all this</font>

633
00:29:42,990 --> 00:29:48,390
exception and one<font color="#E5E5E5"> last</font><font color="#CCCCCC"> point good point</font>

634
00:29:45,390 --> 00:29:50,250
<font color="#E5E5E5">to make</font><font color="#CCCCCC"> is that the the application</font>

635
00:29:48,390 --> 00:29:51,600
<font color="#CCCCCC">server should never SEC fault it is</font><font color="#E5E5E5"> sec</font>

636
00:29:50,250 --> 00:29:57,320
fault that should be the first priority

637
00:29:51,600 --> 00:29:59,760
<font color="#E5E5E5">for everyone to look at so what's next</font><font color="#CCCCCC"> I</font>

638
00:29:57,320 --> 00:30:01,950
realized<font color="#E5E5E5"> there was no so many</font><font color="#CCCCCC"> C</font>

639
00:29:59,760 --> 00:30:04,140
extension of<font color="#CCCCCC"> there or anyway nothing new</font>

640
00:30:01,950 --> 00:30:08,280
that was<font color="#E5E5E5"> being pushed out or maintained</font>

641
00:30:04,140 --> 00:30:11,640
<font color="#E5E5E5">anymore so I put into looking into</font>

642
00:30:08,280 --> 00:30:14,760
<font color="#E5E5E5">fastened</font><font color="#CCCCCC"> rube itself and of course when</font>

643
00:30:11,640 --> 00:30:17,520
you use I fell against<font color="#E5E5E5"> Ruby</font><font color="#CCCCCC"> it's good</font>

644
00:30:14,760 --> 00:30:20,070
but if<font color="#E5E5E5"> you</font><font color="#CCCCCC"> want to actually fast the</font>

645
00:30:17,520 --> 00:30:23,550
<font color="#E5E5E5">actual language itself rather</font><font color="#CCCCCC"> than the</font>

646
00:30:20,070 --> 00:30:25,679
<font color="#CCCCCC">partial parts of the language you all</font>

647
00:30:23,550 --> 00:30:27,210
the FL<font color="#E5E5E5"> input will generate something</font>

648
00:30:25,680 --> 00:30:29,760
<font color="#CCCCCC">that is synthetically incorrect so the</font>

649
00:30:27,210 --> 00:30:34,380
Ruby will never even run the input<font color="#E5E5E5"> input</font>

650
00:30:29,760 --> 00:30:37,050
test generated right so<font color="#E5E5E5"> that's why I</font>

651
00:30:34,380 --> 00:30:40,950
start looking into this concept of

652
00:30:37,050 --> 00:30:44,460
grammar based<font color="#E5E5E5"> fuzzing and allocate</font>

653
00:30:40,950 --> 00:30:46,170
specific<font color="#CCCCCC"> to this antlr tool which has</font>

654
00:30:44,460 --> 00:30:50,100
been developed<font color="#E5E5E5"> by a professor University</font>

655
00:30:46,170 --> 00:30:52,680
in<font color="#E5E5E5"> San Francisco</font><font color="#CCCCCC"> yeah it really the main</font>

656
00:30:50,100 --> 00:30:55,199
of the<font color="#CCCCCC"> Oriental are is creating grammars</font>

657
00:30:52,680 --> 00:30:57,630
<font color="#CCCCCC">you can create personal</font><font color="#E5E5E5"> lecture rules of</font>

658
00:30:55,200 --> 00:30:59,940
its own<font color="#E5E5E5"> escape</font><font color="#CCCCCC"> these a</font><font color="#E5E5E5"> bit and this what</font>

659
00:30:57,630 --> 00:31:02,580
a ruby lecture rule will look like as a

660
00:30:59,940 --> 00:31:04,500
<font color="#CCCCCC">high-level and this</font><font color="#E5E5E5"> is a ruby parcel so</font>

661
00:31:02,580 --> 00:31:10,889
let's say the<font color="#CCCCCC"> function definition will</font>

662
00:31:04,500 --> 00:31:14,430
look like something like<font color="#CCCCCC"> this and</font><font color="#E5E5E5"> sort</font>

663
00:31:10,890 --> 00:31:15,300
<font color="#E5E5E5">of scabies</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the reason</font><font color="#CCCCCC"> really nice</font><font color="#E5E5E5"> to</font>

664
00:31:14,430 --> 00:31:17,010
<font color="#E5E5E5">lavare</font>

665
00:31:15,300 --> 00:31:18,960
grandmary<font color="#E5E5E5"> NATO which was developed by</font>

666
00:31:17,010 --> 00:31:23,270
<font color="#CCCCCC">Renata Hamid one from</font><font color="#E5E5E5"> University in</font>

667
00:31:18,960 --> 00:31:26,550
Hungary which use<font color="#CCCCCC"> Aunt Eller</font><font color="#E5E5E5"> to generate</font>

668
00:31:23,270 --> 00:31:29,520
synthetically correct<font color="#E5E5E5"> random</font><font color="#CCCCCC"> test to</font>

669
00:31:26,550 --> 00:31:31,470
actually fast languages<font color="#CCCCCC"> it is based on</font>

670
00:31:29,520 --> 00:31:35,190
<font color="#CCCCCC">pain teller</font><font color="#E5E5E5"> and it has create test</font>

671
00:31:31,470 --> 00:31:38,250
<font color="#E5E5E5">generator in Python 3 language and to</font>

672
00:31:35,190 --> 00:31:39,870
really give a quick<font color="#CCCCCC"> overview</font><font color="#E5E5E5"> is really</font>

673
00:31:38,250 --> 00:31:44,100
<font color="#E5E5E5">really simple to</font><font color="#CCCCCC"> use once you setup</font><font color="#E5E5E5"> your</font>

674
00:31:39,870 --> 00:31:46,110
grandma you can<font color="#CCCCCC"> just invoke this tool</font>

675
00:31:44,100 --> 00:31:48,780
which<font color="#E5E5E5"> generate</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> you Python and parser</font>

676
00:31:46,110 --> 00:31:51,570
and<font color="#CCCCCC"> a lexer which when will be used</font><font color="#E5E5E5"> to</font>

677
00:31:48,780 --> 00:31:56,760
<font color="#E5E5E5">generate your random inputs so this is</font>

678
00:31:51,570 --> 00:31:59,060
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a really quick output of this</font>

679
00:31:56,760 --> 00:32:02,070
tool used against<font color="#CCCCCC"> Ruby so a bunch of</font>

680
00:31:59,060 --> 00:32:03,510
definition<font color="#E5E5E5"> and one interesting things to</font>

681
00:32:02,070 --> 00:32:08,909
note is this code base is<font color="#CCCCCC"> actually</font>

682
00:32:03,510 --> 00:32:10,920
synthetically correct so some final

683
00:32:08,910 --> 00:32:12,420
<font color="#E5E5E5">thoughts so you don't need to be an</font>

684
00:32:10,920 --> 00:32:13,800
expert<font color="#CCCCCC"> I wasn't an expert when I was</font>

685
00:32:12,420 --> 00:32:17,280
looking<font color="#E5E5E5"> into</font><font color="#CCCCCC"> which is actually my first</font>

686
00:32:13,800 --> 00:32:19,020
time doing<font color="#E5E5E5"> fuzzing you don't have to add</font>

687
00:32:17,280 --> 00:32:21,930
the best<font color="#E5E5E5"> hardware as you can see I use</font>

688
00:32:19,020 --> 00:32:23,940
my own<font color="#E5E5E5"> personal laptop it can be once</font>

689
00:32:21,930 --> 00:32:28,410
the initial stop it<font color="#E5E5E5"> down it can be kind</font>

690
00:32:23,940 --> 00:32:30,600
<font color="#E5E5E5">of semi automated</font><font color="#CCCCCC"> I believe that if you</font>

691
00:32:28,410 --> 00:32:31,920
have<font color="#E5E5E5"> some kind of C code base within</font>

692
00:32:30,600 --> 00:32:34,439
your organization you<font color="#CCCCCC"> should look into</font>

693
00:32:31,920 --> 00:32:38,550
<font color="#E5E5E5">fuzzing and doing continuous parsing</font>

694
00:32:34,440 --> 00:32:40,140
against it and I believe it<font color="#E5E5E5"> fuzzing just</font>

695
00:32:38,550 --> 00:32:43,409
cannot replace code reviews of course

696
00:32:40,140 --> 00:32:47,310
and one thing I will maybe would like to

697
00:32:43,410 --> 00:32:50,430
note is<font color="#CCCCCC"> maybe public project on Austin</font>

698
00:32:47,310 --> 00:32:52,530
on guitar pit<font color="#CCCCCC"> label</font><font color="#E5E5E5"> whatever could maybe</font>

699
00:32:50,430 --> 00:32:54,570
you know<font color="#E5E5E5"> maybe it was provider could</font>

700
00:32:52,530 --> 00:32:56,460
allow to open<font color="#CCCCCC"> issue travel to</font><font color="#E5E5E5"> it rather</font>

701
00:32:54,570 --> 00:32:59,090
than<font color="#E5E5E5"> you know report vulnerabilities to</font>

702
00:32:56,460 --> 00:33:02,790
the public

703
00:32:59,090 --> 00:33:06,290
yeah<font color="#CCCCCC"> that's probably</font><font color="#E5E5E5"> bother I'm not the</font>

704
00:33:02,790 --> 00:33:11,379
time so thanks

705
00:33:06,290 --> 00:33:11,379
[Applause]

