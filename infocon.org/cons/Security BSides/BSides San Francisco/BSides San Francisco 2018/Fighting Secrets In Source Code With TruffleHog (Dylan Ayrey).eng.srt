1
00:00:03,620 --> 00:00:06,740
[Music]

2
00:00:20,699 --> 00:00:25,050
so my name<font color="#E5E5E5"> is Dylan and I'm gonna be</font>

3
00:00:22,770 --> 00:00:27,270
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> a tool that I published</font>

4
00:00:25,050 --> 00:00:29,369
about a year and<font color="#E5E5E5"> a half ago that I've</font>

5
00:00:27,270 --> 00:00:30,599
been slowly iterating<font color="#E5E5E5"> on for the past</font>

6
00:00:29,369 --> 00:00:35,940
<font color="#E5E5E5">year and a half</font>

7
00:00:30,599 --> 00:00:38,550
called truffle hog<font color="#CCCCCC"> so the objective of</font>

8
00:00:35,940 --> 00:00:41,190
<font color="#E5E5E5">truffle hog is to identify secrets in</font>

9
00:00:38,550 --> 00:00:43,260
source code so Before we jump into<font color="#E5E5E5"> how</font>

10
00:00:41,190 --> 00:00:45,930
<font color="#CCCCCC">that works I just want to cover</font><font color="#E5E5E5"> the</font>

11
00:00:43,260 --> 00:00:46,949
basics of why secrets<font color="#E5E5E5"> and source code</font><font color="#CCCCCC"> of</font>

12
00:00:45,930 --> 00:00:48,989
<font color="#E5E5E5">Brad</font>

13
00:00:46,949 --> 00:00:50,790
<font color="#CCCCCC">I mean first</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> foremost they can lead</font>

14
00:00:48,989 --> 00:00:52,409
to<font color="#E5E5E5"> breaches</font><font color="#CCCCCC"> and I think we're all</font>

15
00:00:50,790 --> 00:00:54,390
familiar with<font color="#E5E5E5"> a couple notable examples</font>

16
00:00:52,409 --> 00:00:57,239
but<font color="#E5E5E5"> I'll go over</font><font color="#CCCCCC"> a few they can also</font>

17
00:00:54,390 --> 00:01:00,659
<font color="#E5E5E5">greatly aid in lateral movement so you</font>

18
00:00:57,239 --> 00:01:02,280
can imagine<font color="#CCCCCC"> one particular computer in</font>

19
00:01:00,659 --> 00:01:05,850
the environment being compromised<font color="#E5E5E5"> that</font>

20
00:01:02,280 --> 00:01:08,159
has<font color="#E5E5E5"> access to source code and if you're</font>

21
00:01:05,850 --> 00:01:10,408
a bad guy access<font color="#E5E5E5"> to that source</font><font color="#CCCCCC"> code</font>

22
00:01:08,159 --> 00:01:13,020
<font color="#E5E5E5">then they can gain</font><font color="#CCCCCC"> credentials</font><font color="#E5E5E5"> and then</font>

23
00:01:10,409 --> 00:01:15,750
move to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hosts that your source code</font>

24
00:01:13,020 --> 00:01:17,189
<font color="#E5E5E5">has access to and along that same line</font>

25
00:01:15,750 --> 00:01:18,960
it can help elevate privilege as well

26
00:01:17,189 --> 00:01:22,169
they can<font color="#CCCCCC"> jump from one environment to</font>

27
00:01:18,960 --> 00:01:25,408
another<font color="#E5E5E5"> one of the things that's tricky</font>

28
00:01:22,170 --> 00:01:27,659
with this is exploitation<font color="#E5E5E5"> of this is</font>

29
00:01:25,409 --> 00:01:30,179
sometimes<font color="#CCCCCC"> hard to detect</font><font color="#E5E5E5"> and the reason</font>

30
00:01:27,659 --> 00:01:31,590
is<font color="#CCCCCC"> because you're often using the</font>

31
00:01:30,179 --> 00:01:33,929
<font color="#CCCCCC">secrets in</font><font color="#E5E5E5"> the way that they were</font>

32
00:01:31,590 --> 00:01:35,460
intended<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> that's not to say</font>

33
00:01:33,929 --> 00:01:38,999
you<font color="#CCCCCC"> can't write detection but</font><font color="#E5E5E5"> it's a lot</font>

34
00:01:35,460 --> 00:01:43,219
<font color="#E5E5E5">more difficult</font><font color="#CCCCCC"> than say and exploit that</font>

35
00:01:38,999 --> 00:01:45,210
<font color="#E5E5E5">you can fingerprint</font><font color="#CCCCCC"> another example is</font>

36
00:01:43,219 --> 00:01:48,390
<font color="#E5E5E5">workstations they get lost</font><font color="#CCCCCC"> they may have</font>

37
00:01:45,210 --> 00:01:51,149
secrets<font color="#E5E5E5"> in them and in general source</font>

38
00:01:48,390 --> 00:01:53,549
code is<font color="#E5E5E5"> just very leaky you can imagine</font>

39
00:01:51,149 --> 00:01:55,979
scenarios<font color="#CCCCCC"> where the</font><font color="#E5E5E5"> doc get directly is</font>

40
00:01:53,549 --> 00:01:57,840
accidentally exposed<font color="#CCCCCC"> or scenarios where</font>

41
00:01:55,979 --> 00:02:01,319
developers<font color="#CCCCCC"> may be copy/paste</font><font color="#E5E5E5"> things over</font>

42
00:01:57,840 --> 00:02:03,469
to paste bin so source code can often

43
00:02:01,319 --> 00:02:06,569
end<font color="#CCCCCC"> up leaking out and unexpected</font><font color="#E5E5E5"> ways</font>

44
00:02:03,469 --> 00:02:10,829
<font color="#E5E5E5">so I have a couple of tragic examples</font>

45
00:02:06,569 --> 00:02:14,430
here<font color="#E5E5E5"> one of which is one where read one</font>

46
00:02:10,830 --> 00:02:18,000
of<font color="#E5E5E5"> the b-sides</font><font color="#CCCCCC"> organisers had an AWS</font>

47
00:02:14,430 --> 00:02:20,250
<font color="#E5E5E5">token in his personal github account</font>

48
00:02:18,000 --> 00:02:23,580
that a researcher found and reported<font color="#CCCCCC"> to</font>

49
00:02:20,250 --> 00:02:25,620
hacker<font color="#CCCCCC"> one and read was kind enough to</font>

50
00:02:23,580 --> 00:02:28,620
<font color="#E5E5E5">make this opens that everybody can see</font>

51
00:02:25,620 --> 00:02:31,770
the vulnerability<font color="#E5E5E5"> any paid to</font><font color="#CCCCCC"> K for it</font>

52
00:02:28,620 --> 00:02:33,920
so<font color="#E5E5E5"> this is one of the lesser impactful</font>

53
00:02:31,770 --> 00:02:36,330
vulnerabilities

54
00:02:33,920 --> 00:02:38,549
<font color="#CCCCCC">but here ramping up the impact</font><font color="#E5E5E5"> a little</font>

55
00:02:36,330 --> 00:02:41,370
<font color="#CCCCCC">bit there was a researcher who crawled</font>

56
00:02:38,550 --> 00:02:44,340
yet<font color="#CCCCCC"> hub looking for slack access tokens</font>

57
00:02:41,370 --> 00:02:46,800
and<font color="#E5E5E5"> he found thousands of them some of</font>

58
00:02:44,340 --> 00:02:48,930
which went to<font color="#E5E5E5"> high-profile companies so</font>

59
00:02:46,800 --> 00:02:50,700
you<font color="#E5E5E5"> can imagine</font><font color="#CCCCCC"> a bad guy taking</font>

60
00:02:48,930 --> 00:02:54,450
advantage<font color="#E5E5E5"> of this and squatting</font><font color="#CCCCCC"> inside</font>

61
00:02:50,700 --> 00:02:58,679
of your slack<font color="#CCCCCC"> and then this is another</font>

62
00:02:54,450 --> 00:03:01,109
<font color="#CCCCCC">example</font><font color="#E5E5E5"> where a different bad guy went</font>

63
00:02:58,680 --> 00:03:04,830
to github<font color="#E5E5E5"> and crawled a bunch of AWS</font>

64
00:03:01,110 --> 00:03:07,530
keys in 2015 and found them and an

65
00:03:04,830 --> 00:03:09,540
individual occurred<font color="#CCCCCC"> a bill</font><font color="#E5E5E5"> of over two</font>

66
00:03:07,530 --> 00:03:13,170
thousand dollars<font color="#CCCCCC"> because the bad guy</font>

67
00:03:09,540 --> 00:03:15,120
used it for Bitcoin mining<font color="#E5E5E5"> and then last</font>

68
00:03:13,170 --> 00:03:16,890
the example that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> probably fresh in</font>

69
00:03:15,120 --> 00:03:21,360
mind for everybody here

70
00:03:16,890 --> 00:03:23,760
the recent uber breach<font color="#CCCCCC"> where 57</font><font color="#E5E5E5"> million</font>

71
00:03:21,360 --> 00:03:27,239
user accounts were exposed<font color="#E5E5E5"> to a</font>

72
00:03:23,760 --> 00:03:29,549
researcher<font color="#CCCCCC"> because again a credential</font>

73
00:03:27,239 --> 00:03:32,310
was put in<font color="#CCCCCC"> github and the researcher was</font>

74
00:03:29,550 --> 00:03:34,520
able to off with the credential and gain

75
00:03:32,310 --> 00:03:38,760
<font color="#E5E5E5">access to the 57 million user accounts</font>

76
00:03:34,520 --> 00:03:40,320
<font color="#E5E5E5">so secrets</font><font color="#CCCCCC"> and source</font><font color="#E5E5E5"> code are that now</font>

77
00:03:38,760 --> 00:03:42,390
that we're all<font color="#E5E5E5"> on the same page with</font>

78
00:03:40,320 --> 00:03:44,579
regards<font color="#E5E5E5"> to that this is not a talk</font>

79
00:03:42,390 --> 00:03:46,738
<font color="#E5E5E5">telling you how to manage</font><font color="#CCCCCC"> your secrets</font>

80
00:03:44,580 --> 00:03:48,330
or<font color="#E5E5E5"> which secrets management solution to</font>

81
00:03:46,739 --> 00:03:51,000
use<font color="#E5E5E5"> there's tons of them out there</font><font color="#CCCCCC"> a</font>

82
00:03:48,330 --> 00:03:52,440
<font color="#CCCCCC">couple examples</font><font color="#E5E5E5"> up on the board</font><font color="#CCCCCC"> you</font>

83
00:03:51,000 --> 00:03:53,640
should<font color="#CCCCCC"> do a lot of</font><font color="#E5E5E5"> research and figure</font>

84
00:03:52,440 --> 00:03:58,350
out<font color="#E5E5E5"> the one that makes the most sense</font>

85
00:03:53,640 --> 00:04:02,910
<font color="#E5E5E5">for</font><font color="#CCCCCC"> your environment truffle hog is a</font>

86
00:03:58,350 --> 00:04:04,980
tool that<font color="#E5E5E5"> is intended</font><font color="#CCCCCC"> to get the secrets</font>

87
00:04:02,910 --> 00:04:07,019
from your source code into<font color="#CCCCCC"> your secret</font>

88
00:04:04,980 --> 00:04:07,500
<font color="#CCCCCC">solution</font><font color="#E5E5E5"> so there's a border collie up</font>

89
00:04:07,019 --> 00:04:10,140
there

90
00:04:07,500 --> 00:04:11,610
that's truffle hog and then the secrets

91
00:04:10,140 --> 00:04:15,329
are<font color="#CCCCCC"> being herded into the secret</font>

92
00:04:11,610 --> 00:04:18,060
solution<font color="#CCCCCC"> so where does source code live</font>

93
00:04:15,330 --> 00:04:20,459
it sounds like an intuitive question<font color="#E5E5E5"> you</font>

94
00:04:18,060 --> 00:04:21,810
may immediately say it lives and<font color="#E5E5E5"> yet</font><font color="#CCCCCC"> but</font>

95
00:04:20,459 --> 00:04:23,190
the reality is source code actually

96
00:04:21,810 --> 00:04:24,630
<font color="#E5E5E5">lives in a bunch of places and the more</font>

97
00:04:23,190 --> 00:04:26,729
you think<font color="#CCCCCC"> about it the more places you</font>

98
00:04:24,630 --> 00:04:28,409
end up finding so version<font color="#E5E5E5"> control is on</font>

99
00:04:26,729 --> 00:04:30,870
the top<font color="#CCCCCC"> of the list but also source code</font>

100
00:04:28,410 --> 00:04:32,490
<font color="#CCCCCC">some package managers and source code</font>

101
00:04:30,870 --> 00:04:35,430
lives<font color="#E5E5E5"> in mobile applications</font><font color="#CCCCCC"> when you</font>

102
00:04:32,490 --> 00:04:37,050
download a mobile<font color="#E5E5E5"> app you download the</font>

103
00:04:35,430 --> 00:04:39,150
source code<font color="#CCCCCC"> that</font><font color="#E5E5E5"> runs on your mobile app</font>

104
00:04:37,050 --> 00:04:40,320
and that source<font color="#CCCCCC"> code can</font><font color="#E5E5E5"> have secrets in</font>

105
00:04:39,150 --> 00:04:43,590
it<font color="#E5E5E5"> there's actually</font><font color="#CCCCCC"> a talk on</font><font color="#E5E5E5"> that</font>

106
00:04:40,320 --> 00:04:45,570
earlier today<font color="#E5E5E5"> slack another common place</font>

107
00:04:43,590 --> 00:04:47,400
<font color="#CCCCCC">that source code gets pasted into</font>

108
00:04:45,570 --> 00:04:48,900
<font color="#E5E5E5">websites</font><font color="#CCCCCC"> you</font>

109
00:04:47,400 --> 00:04:50,789
render a website<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> rendering a</font>

110
00:04:48,900 --> 00:04:54,090
bunch of source code and secrets can

111
00:04:50,790 --> 00:04:56,160
show up in<font color="#CCCCCC"> that HTML but I'm</font><font color="#E5E5E5"> gonna spend</font>

112
00:04:54,090 --> 00:04:57,989
a lot<font color="#CCCCCC"> of time actually</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about</font>

113
00:04:56,160 --> 00:05:02,009
this last<font color="#CCCCCC"> bullet here</font><font color="#E5E5E5"> and that's</font>

114
00:04:57,990 --> 00:05:04,500
revision history<font color="#CCCCCC"> so not</font><font color="#E5E5E5"> necessarily the</font>

115
00:05:02,009 --> 00:05:06,560
current version<font color="#E5E5E5"> of your source code but</font>

116
00:05:04,500 --> 00:05:10,949
<font color="#CCCCCC">a version</font><font color="#E5E5E5"> that is still accessible</font>

117
00:05:06,560 --> 00:05:14,100
<font color="#E5E5E5">through your</font><font color="#CCCCCC"> version control</font><font color="#E5E5E5"> so I have</font>

118
00:05:10,949 --> 00:05:15,449
an example<font color="#CCCCCC"> here of a sample repository</font>

119
00:05:14,100 --> 00:05:18,630
that<font color="#E5E5E5"> I'm sure most people have</font><font color="#CCCCCC"> heard of</font>

120
00:05:15,449 --> 00:05:22,080
<font color="#E5E5E5">react from Facebook</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> can see the</font>

121
00:05:18,630 --> 00:05:24,870
green on the top there<font color="#CCCCCC"> is a code that</font>

122
00:05:22,080 --> 00:05:26,430
<font color="#E5E5E5">was added over</font><font color="#CCCCCC"> time and the red</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> the</font>

123
00:05:24,870 --> 00:05:29,070
bottom<font color="#E5E5E5"> there was code that was taken</font>

124
00:05:26,430 --> 00:05:31,949
away so this repository isn't<font color="#E5E5E5"> special</font>

125
00:05:29,070 --> 00:05:33,270
<font color="#CCCCCC">it's pretty normal in this regard</font><font color="#E5E5E5"> but</font>

126
00:05:31,949 --> 00:05:36,479
<font color="#CCCCCC">the point I'm trying to make here is</font>

127
00:05:33,270 --> 00:05:38,669
that<font color="#E5E5E5"> as much if not more</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the source</font>

128
00:05:36,479 --> 00:05:41,370
code was<font color="#CCCCCC"> actually removed from the</font>

129
00:05:38,669 --> 00:05:45,090
<font color="#E5E5E5">project but still lives in the old</font>

130
00:05:41,370 --> 00:05:47,370
version control<font color="#E5E5E5"> so there's more source</font>

131
00:05:45,090 --> 00:05:50,060
code<font color="#E5E5E5"> or as much source code that lives</font>

132
00:05:47,370 --> 00:05:52,470
in the past<font color="#CCCCCC"> as there does in the current</font>

133
00:05:50,060 --> 00:05:55,080
provision of the code and<font color="#E5E5E5"> this is a</font>

134
00:05:52,470 --> 00:05:57,090
problem<font color="#E5E5E5"> when you imagine all of that</font>

135
00:05:55,080 --> 00:06:02,789
pass code potentially still having keys

136
00:05:57,090 --> 00:06:05,190
and secrets<font color="#CCCCCC"> they're life so why is it</font>

137
00:06:02,789 --> 00:06:08,190
<font color="#CCCCCC">that sometimes</font><font color="#E5E5E5"> these things end up in</font>

138
00:06:05,190 --> 00:06:09,690
the old version<font color="#CCCCCC"> of the code</font><font color="#E5E5E5"> well simply</font>

139
00:06:08,190 --> 00:06:12,300
put I<font color="#E5E5E5"> don't know if anybody in this room</font>

140
00:06:09,690 --> 00:06:13,860
<font color="#E5E5E5">falls into this</font><font color="#CCCCCC"> category but at least at</font>

141
00:06:12,300 --> 00:06:17,190
<font color="#CCCCCC">one point in time my career when I was a</font>

142
00:06:13,860 --> 00:06:18,930
<font color="#CCCCCC">developer I may have pushed</font><font color="#E5E5E5"> a secret and</font>

143
00:06:17,190 --> 00:06:21,120
then thought the best<font color="#E5E5E5"> way to handle that</font>

144
00:06:18,930 --> 00:06:24,630
mistake was to commit over<font color="#E5E5E5"> the top of</font><font color="#CCCCCC"> it</font>

145
00:06:21,120 --> 00:06:27,240
<font color="#CCCCCC">so here</font><font color="#E5E5E5"> there's a list of commits</font><font color="#CCCCCC"> that</font>

146
00:06:24,630 --> 00:06:29,330
you can search on github for<font color="#CCCCCC"> the string</font>

147
00:06:27,240 --> 00:06:32,669
removed password and you<font color="#CCCCCC"> can find</font>

148
00:06:29,330 --> 00:06:35,099
thousands<font color="#CCCCCC"> of examples of developers that</font>

149
00:06:32,669 --> 00:06:36,510
committed passwords<font color="#E5E5E5"> and then committed</font>

150
00:06:35,099 --> 00:06:40,289
over<font color="#E5E5E5"> the top</font><font color="#CCCCCC"> of them rather than we're</font>

151
00:06:36,510 --> 00:06:42,449
moving to commit<font color="#E5E5E5"> another example here is</font>

152
00:06:40,289 --> 00:06:44,789
maybe an entire<font color="#E5E5E5"> feature is removed</font><font color="#CCCCCC"> so</font>

153
00:06:42,449 --> 00:06:47,970
you can<font color="#CCCCCC"> imagine if you're working in AWS</font>

154
00:06:44,789 --> 00:06:49,860
<font color="#E5E5E5">maybe first you think that s3 is a good</font>

155
00:06:47,970 --> 00:06:52,800
solution<font color="#CCCCCC"> for temporarily storing some</font>

156
00:06:49,860 --> 00:06:55,199
data and then<font color="#CCCCCC"> later you change to SQS</font>

157
00:06:52,800 --> 00:06:57,479
and so you end up<font color="#CCCCCC"> removing a big section</font>

158
00:06:55,199 --> 00:06:59,849
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the code you put</font><font color="#CCCCCC"> a new credential in</font>

159
00:06:57,479 --> 00:07:01,200
for the new use case<font color="#E5E5E5"> and the old</font>

160
00:06:59,849 --> 00:07:04,170
credential<font color="#E5E5E5"> may</font>

161
00:07:01,200 --> 00:07:05,909
<font color="#E5E5E5">shall I stay in the old buried version</font>

162
00:07:04,170 --> 00:07:09,110
of the code that's still<font color="#E5E5E5"> in your</font><font color="#CCCCCC"> version</font>

163
00:07:05,910 --> 00:07:11,940
control<font color="#CCCCCC"> and then the</font><font color="#E5E5E5"> last example</font><font color="#CCCCCC"> here</font>

164
00:07:09,110 --> 00:07:14,550
typically in a large<font color="#CCCCCC"> company</font><font color="#E5E5E5"> when you</font>

165
00:07:11,940 --> 00:07:17,010
submit a<font color="#CCCCCC"> project to get</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> source</font>

166
00:07:14,550 --> 00:07:19,260
<font color="#E5E5E5">there's a security review process</font><font color="#CCCCCC"> that</font>

167
00:07:17,010 --> 00:07:21,750
it undergoes<font color="#CCCCCC"> and prior to</font><font color="#E5E5E5"> that security</font>

168
00:07:19,260 --> 00:07:23,310
review process<font color="#E5E5E5"> there's a good chance</font>

169
00:07:21,750 --> 00:07:24,810
that<font color="#E5E5E5"> your developers are going to want</font>

170
00:07:23,310 --> 00:07:25,830
to try<font color="#E5E5E5"> to clean the code up a little bit</font>

171
00:07:24,810 --> 00:07:26,940
because<font color="#E5E5E5"> they know it's</font><font color="#CCCCCC"> not in perfect</font>

172
00:07:25,830 --> 00:07:28,200
<font color="#E5E5E5">state and they don't want a lot</font><font color="#CCCCCC"> of</font>

173
00:07:26,940 --> 00:07:30,900
back-and-forth<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the security team</font>

174
00:07:28,200 --> 00:07:32,849
<font color="#E5E5E5">and so if they have secrets in their</font>

175
00:07:30,900 --> 00:07:34,169
source code<font color="#E5E5E5"> there's a good chance that</font>

176
00:07:32,850 --> 00:07:35,970
they're going to<font color="#E5E5E5"> try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> clean</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> up</font>

177
00:07:34,170 --> 00:07:38,520
<font color="#E5E5E5">and one</font><font color="#CCCCCC"> of the ways to do</font><font color="#E5E5E5"> that is to</font>

178
00:07:35,970 --> 00:07:41,040
commit<font color="#E5E5E5"> overtop of it and I'll be willing</font>

179
00:07:38,520 --> 00:07:42,990
to bet in a lot<font color="#E5E5E5"> of cases when the pen</font>

180
00:07:41,040 --> 00:07:44,220
tester or the security engineer gets<font color="#CCCCCC"> a</font>

181
00:07:42,990 --> 00:07:45,900
<font color="#E5E5E5">chance to look</font><font color="#CCCCCC"> through that source code</font>

182
00:07:44,220 --> 00:07:48,060
<font color="#CCCCCC">they're only looking</font><font color="#E5E5E5"> at the latest</font>

183
00:07:45,900 --> 00:07:49,770
<font color="#CCCCCC">revision</font><font color="#E5E5E5"> I personally would never go</font>

184
00:07:48,060 --> 00:07:53,190
<font color="#CCCCCC">through all the old revision history</font>

185
00:07:49,770 --> 00:07:55,440
<font color="#E5E5E5">manually if I were doing a code review</font>

186
00:07:53,190 --> 00:07:59,550
<font color="#E5E5E5">for security</font><font color="#CCCCCC"> audit for an open source</font>

187
00:07:55,440 --> 00:08:01,620
review<font color="#CCCCCC"> so I have an example</font><font color="#E5E5E5"> repository</font>

188
00:07:59,550 --> 00:08:03,540
here I cleared this with<font color="#E5E5E5"> someone at</font>

189
00:08:01,620 --> 00:08:05,730
Netflix so it's<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> for me to put this</font>

190
00:08:03,540 --> 00:08:07,860
up<font color="#CCCCCC"> here but it's an example</font><font color="#E5E5E5"> of an old</font>

191
00:08:05,730 --> 00:08:10,020
AWS key that was<font color="#E5E5E5"> committed to a public</font>

192
00:08:07,860 --> 00:08:12,030
github<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> committed over the top</font>

193
00:08:10,020 --> 00:08:14,070
<font color="#E5E5E5">so</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see here we from the -</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

194
00:08:12,030 --> 00:08:16,200
red<font color="#CCCCCC"> that this was removed</font><font color="#E5E5E5"> from the</font>

195
00:08:14,070 --> 00:08:18,719
<font color="#E5E5E5">project</font><font color="#CCCCCC"> in an early incarnation</font><font color="#E5E5E5"> of it</font>

196
00:08:16,200 --> 00:08:20,640
but the secret still remains<font color="#E5E5E5"> no the</font>

197
00:08:18,720 --> 00:08:23,850
secret<font color="#CCCCCC"> is no longer</font><font color="#E5E5E5"> live if you're</font>

198
00:08:20,640 --> 00:08:25,469
wondering<font color="#CCCCCC"> but this could just as</font><font color="#E5E5E5"> easily</font>

199
00:08:23,850 --> 00:08:27,840
<font color="#E5E5E5">be a live secret there were other cases</font>

200
00:08:25,470 --> 00:08:29,490
where identified secrets<font color="#E5E5E5"> committed over</font>

201
00:08:27,840 --> 00:08:33,929
<font color="#E5E5E5">in a similar fashion</font><font color="#CCCCCC"> that were still</font>

202
00:08:29,490 --> 00:08:37,590
<font color="#E5E5E5">life</font><font color="#CCCCCC"> so we needed</font><font color="#E5E5E5"> we need a way to scan</font>

203
00:08:33,929 --> 00:08:38,819
<font color="#E5E5E5">these old commits no</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> like I</font>

204
00:08:37,590 --> 00:08:41,520
mentioned before<font color="#E5E5E5"> is going through the</font>

205
00:08:38,820 --> 00:08:44,130
negative code contributions<font color="#CCCCCC"> and grep</font>

206
00:08:41,520 --> 00:08:48,510
doesn't<font color="#E5E5E5"> find these the way git stores</font>

207
00:08:44,130 --> 00:08:49,710
<font color="#E5E5E5">its blobs</font><font color="#CCCCCC"> a grep doesn't identify them</font>

208
00:08:48,510 --> 00:08:52,530
they're stored<font color="#E5E5E5"> in some binary content</font>

209
00:08:49,710 --> 00:08:54,030
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> really explored fully but</font>

210
00:08:52,530 --> 00:08:56,400
I know if you just grep for some<font color="#E5E5E5"> anti</font>

211
00:08:54,030 --> 00:08:58,110
<font color="#E5E5E5">patterns</font><font color="#CCCCCC"> you won't be</font><font color="#E5E5E5"> able to find them</font>

212
00:08:56,400 --> 00:09:00,720
in the document

213
00:08:58,110 --> 00:09:02,790
so this was really<font color="#CCCCCC"> the the thinking and</font>

214
00:09:00,720 --> 00:09:05,870
<font color="#E5E5E5">the reasoning behind why I made</font><font color="#CCCCCC"> trouble</font>

215
00:09:02,790 --> 00:09:08,040
<font color="#CCCCCC">hog and the intent of</font><font color="#E5E5E5"> truffle hog is</font>

216
00:09:05,870 --> 00:09:11,280
specifically to go through the old

217
00:09:08,040 --> 00:09:14,209
<font color="#CCCCCC">revisions of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> source code</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font>

218
00:09:11,280 --> 00:09:16,819
branches<font color="#E5E5E5"> all the old commits</font>

219
00:09:14,209 --> 00:09:19,219
<font color="#E5E5E5">help identify secrets that were</font>

220
00:09:16,819 --> 00:09:21,790
<font color="#E5E5E5">potentially buried but it also looks</font>

221
00:09:19,220 --> 00:09:25,189
<font color="#E5E5E5">through</font><font color="#CCCCCC"> the latest</font><font color="#E5E5E5"> incarnation as well</font>

222
00:09:21,790 --> 00:09:28,099
<font color="#CCCCCC">so it's</font><font color="#E5E5E5"> open source</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can find it on</font>

223
00:09:25,189 --> 00:09:30,439
my<font color="#E5E5E5"> github</font><font color="#CCCCCC"> it specifically pinned to get</font>

224
00:09:28,100 --> 00:09:32,509
version control<font color="#E5E5E5"> so if you're thinking</font><font color="#CCCCCC"> of</font>

225
00:09:30,439 --> 00:09:35,868
<font color="#CCCCCC">using this for SVN</font><font color="#E5E5E5"> you're gonna have to</font>

226
00:09:32,509 --> 00:09:38,959
convert it to get first<font color="#E5E5E5"> it digs</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

227
00:09:35,869 --> 00:09:41,749
way back in<font color="#E5E5E5"> time and it finds secrets so</font>

228
00:09:38,959 --> 00:09:44,089
when I<font color="#CCCCCC"> originally wrote this tool I was</font>

229
00:09:41,749 --> 00:09:46,129
set<font color="#E5E5E5"> with a problem of how to identify</font>

230
00:09:44,089 --> 00:09:48,980
<font color="#CCCCCC">these secrets</font><font color="#E5E5E5"> and the path of least</font>

231
00:09:46,129 --> 00:09:51,649
resistance<font color="#E5E5E5"> for me at the time was</font><font color="#CCCCCC"> to</font>

232
00:09:48,980 --> 00:09:53,420
just look for<font color="#E5E5E5"> high sources of entropy so</font>

233
00:09:51,649 --> 00:09:55,970
what that means is if I saw a<font color="#E5E5E5"> bunch of</font>

234
00:09:53,420 --> 00:09:57,469
characters<font color="#E5E5E5"> all together that were random</font>

235
00:09:55,970 --> 00:10:00,230
and there wasn't<font color="#E5E5E5"> any consecutive order</font>

236
00:09:57,470 --> 00:10:02,480
<font color="#E5E5E5">to it</font><font color="#CCCCCC"> I would flag that</font><font color="#E5E5E5"> and identify</font><font color="#CCCCCC"> it</font>

237
00:10:00,230 --> 00:10:04,119
as a likely secret<font color="#E5E5E5"> so here you can see</font>

238
00:10:02,480 --> 00:10:10,220
the same<font color="#E5E5E5"> commit that we saw before and</font>

239
00:10:04,119 --> 00:10:13,369
the AWS secret key is flagged as as a

240
00:10:10,220 --> 00:10:15,259
problem<font color="#E5E5E5"> and if you'll</font><font color="#CCCCCC"> notice the AWS</font>

241
00:10:13,369 --> 00:10:16,970
access key also<font color="#E5E5E5"> looks pretty</font><font color="#CCCCCC"> random but</font>

242
00:10:15,259 --> 00:10:18,589
<font color="#E5E5E5">that wasn't flagged and the reason is</font>

243
00:10:16,970 --> 00:10:20,929
<font color="#E5E5E5">because this method isn't perfect it has</font>

244
00:10:18,589 --> 00:10:22,670
<font color="#CCCCCC">a lot of</font><font color="#E5E5E5"> limitations and one of them is</font>

245
00:10:20,929 --> 00:10:25,220
the character set<font color="#CCCCCC"> is</font><font color="#E5E5E5"> something that I</font>

246
00:10:22,670 --> 00:10:27,618
had<font color="#CCCCCC"> to</font><font color="#E5E5E5"> predefined and so I said look for</font>

247
00:10:25,220 --> 00:10:31,040
a random sources of entropy<font color="#E5E5E5"> in base64</font>

248
00:10:27,619 --> 00:10:33,799
character set and AWS access IDs<font color="#E5E5E5"> don't</font>

249
00:10:31,040 --> 00:10:37,730
fit that<font color="#E5E5E5"> so this method has some</font>

250
00:10:33,799 --> 00:10:39,410
limitations<font color="#E5E5E5"> on plus side it's</font><font color="#CCCCCC"> pretty</font>

251
00:10:37,730 --> 00:10:41,179
good<font color="#E5E5E5"> for pen testers if your pen testing</font>

252
00:10:39,410 --> 00:10:43,249
application you can reasonably go

253
00:10:41,179 --> 00:10:44,569
through all the false positives<font color="#E5E5E5"> good for</font>

254
00:10:43,249 --> 00:10:47,480
an open source review<font color="#E5E5E5"> for the same</font>

255
00:10:44,569 --> 00:10:49,639
reason<font color="#CCCCCC"> you've</font><font color="#E5E5E5"> got time</font><font color="#CCCCCC"> to go through</font><font color="#E5E5E5"> all</font>

256
00:10:47,480 --> 00:10:51,860
the results and find some interesting

257
00:10:49,639 --> 00:10:53,779
<font color="#CCCCCC">things and it's pretty</font><font color="#E5E5E5"> good for bug</font>

258
00:10:51,860 --> 00:10:54,889
bounty as well<font color="#E5E5E5"> because he's got</font><font color="#CCCCCC"> all the</font>

259
00:10:53,779 --> 00:10:58,399
<font color="#E5E5E5">time</font><font color="#CCCCCC"> in the world</font><font color="#E5E5E5"> and a whole bunch of</font>

260
00:10:54,889 --> 00:10:59,749
researchers there's with enough time

261
00:10:58,399 --> 00:11:01,850
they'll be<font color="#CCCCCC"> able to triage all the false</font>

262
00:10:59,749 --> 00:11:04,249
positives<font color="#E5E5E5"> but the big downside</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

263
00:11:01,850 --> 00:11:06,139
method is it doesn't<font color="#CCCCCC"> do well with</font><font color="#E5E5E5"> the</font>

264
00:11:04,249 --> 00:11:08,600
dev<font color="#CCCCCC"> sec</font><font color="#E5E5E5"> ops model and it doesn't scale</font>

265
00:11:06,139 --> 00:11:15,980
well<font color="#E5E5E5"> so in the same repository</font><font color="#CCCCCC"> that I</font>

266
00:11:08,600 --> 00:11:18,350
showed before<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> slide</font><font color="#CCCCCC"> there were</font>

267
00:11:15,980 --> 00:11:20,959
a bunch of false positives<font color="#CCCCCC"> and this is</font>

268
00:11:18,350 --> 00:11:24,769
an<font color="#E5E5E5"> example of one the developer had</font>

269
00:11:20,959 --> 00:11:26,899
basically<font color="#E5E5E5"> committed a URL</font><font color="#CCCCCC"> that contained</font>

270
00:11:24,769 --> 00:11:28,370
<font color="#E5E5E5">a bunch of entropy in it and trouble</font><font color="#CCCCCC"> hog</font>

271
00:11:26,899 --> 00:11:32,250
flagged on<font color="#E5E5E5"> it</font>

272
00:11:28,370 --> 00:11:34,830
so to combat this problem<font color="#E5E5E5"> to fit the dev</font>

273
00:11:32,250 --> 00:11:37,080
<font color="#CCCCCC">suck-ups model more to put this into the</font>

274
00:11:34,830 --> 00:11:39,890
<font color="#E5E5E5">DevOps pipeline and deliver</font><font color="#CCCCCC"> results more</font>

275
00:11:37,080 --> 00:11:42,960
directly<font color="#E5E5E5"> to the developers</font><font color="#CCCCCC"> I decided to</font>

276
00:11:39,890 --> 00:11:45,689
<font color="#E5E5E5">spike on developing a bunch of high</font>

277
00:11:42,960 --> 00:11:48,450
signal regular<font color="#E5E5E5"> expressions and you can</font>

278
00:11:45,690 --> 00:11:49,950
see there's a<font color="#E5E5E5"> list here</font><font color="#CCCCCC"> but this is a</font>

279
00:11:48,450 --> 00:11:51,570
list that's grown over time<font color="#E5E5E5"> and it's</font>

280
00:11:49,950 --> 00:11:53,910
<font color="#CCCCCC">still</font><font color="#E5E5E5"> a lot smaller than</font><font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to</font>

281
00:11:51,570 --> 00:11:55,830
<font color="#E5E5E5">ultimately be but I've been</font><font color="#CCCCCC"> very strict</font>

282
00:11:53,910 --> 00:11:58,199
<font color="#CCCCCC">in</font><font color="#E5E5E5"> to only allowing regular expressions</font>

283
00:11:55,830 --> 00:12:02,610
<font color="#E5E5E5">that only will flag for pretty high</font>

284
00:11:58,200 --> 00:12:04,320
<font color="#E5E5E5">confidence reasons</font><font color="#CCCCCC"> the pros are pretty</font>

285
00:12:02,610 --> 00:12:06,180
much<font color="#E5E5E5"> what I described before it reduces</font>

286
00:12:04,320 --> 00:12:08,190
the noise<font color="#E5E5E5"> a lot it's also customizable</font>

287
00:12:06,180 --> 00:12:09,900
<font color="#E5E5E5">so I've got a flag that allows you to</font>

288
00:12:08,190 --> 00:12:12,630
<font color="#E5E5E5">give it an additional set of regular</font>

289
00:12:09,900 --> 00:12:14,939
expressions for new rules<font color="#E5E5E5"> and you can</font>

290
00:12:12,630 --> 00:12:16,350
remove the old<font color="#E5E5E5"> rules and replace them</font>

291
00:12:14,940 --> 00:12:18,570
with ones that<font color="#CCCCCC"> make</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> sense for your</font>

292
00:12:16,350 --> 00:12:21,240
environment<font color="#CCCCCC"> so if you're</font><font color="#E5E5E5"> running an</font>

293
00:12:18,570 --> 00:12:23,370
azure remove the AWS rule<font color="#E5E5E5"> and replace it</font>

294
00:12:21,240 --> 00:12:26,310
with an azure rule<font color="#E5E5E5"> they can also be used</font>

295
00:12:23,370 --> 00:12:28,590
<font color="#CCCCCC">to</font><font color="#E5E5E5"> identify low entropy secrets so if</font>

296
00:12:26,310 --> 00:12:29,849
you're pretty<font color="#E5E5E5"> confident about a certain</font>

297
00:12:28,590 --> 00:12:31,830
string<font color="#CCCCCC"> that'll always match with a</font>

298
00:12:29,850 --> 00:12:33,930
password<font color="#E5E5E5"> then you can</font><font color="#CCCCCC"> include that</font>

299
00:12:31,830 --> 00:12:36,150
regular expression and<font color="#E5E5E5"> well Trevor</font><font color="#CCCCCC"> uggs</font>

300
00:12:33,930 --> 00:12:37,469
<font color="#E5E5E5">entropy detection won't fall short this</font>

301
00:12:36,150 --> 00:12:41,010
<font color="#E5E5E5">will be able to</font><font color="#CCCCCC"> identify it so</font><font color="#E5E5E5"> it scales</font>

302
00:12:37,470 --> 00:12:42,780
<font color="#E5E5E5">a lot better</font><font color="#CCCCCC"> the cons</font><font color="#E5E5E5"> are that this will</font>

303
00:12:41,010 --> 00:12:44,520
miss out<font color="#E5E5E5"> on the types of</font><font color="#CCCCCC"> Secrets that</font>

304
00:12:42,780 --> 00:12:46,199
<font color="#CCCCCC">you don't know</font><font color="#E5E5E5"> about so when I run</font>

305
00:12:44,520 --> 00:12:47,939
truffle hog with the entropy mode on<font color="#E5E5E5"> it</font>

306
00:12:46,200 --> 00:12:50,820
<font color="#E5E5E5">always identified secrets</font><font color="#CCCCCC"> - weird</font>

307
00:12:47,940 --> 00:12:53,220
services that I've never<font color="#E5E5E5"> heard of and</font><font color="#CCCCCC"> I</font>

308
00:12:50,820 --> 00:12:54,990
haven't<font color="#E5E5E5"> been</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> again or enumerate</font>

309
00:12:53,220 --> 00:12:57,300
<font color="#CCCCCC">every single regular expression for</font>

310
00:12:54,990 --> 00:12:59,880
every<font color="#E5E5E5"> single secret out there so you</font>

311
00:12:57,300 --> 00:13:02,189
miss out<font color="#E5E5E5"> on some</font><font color="#CCCCCC"> of that and another</font>

312
00:12:59,880 --> 00:13:03,750
downside<font color="#CCCCCC"> is it still requires a</font><font color="#E5E5E5"> little</font>

313
00:13:02,190 --> 00:13:05,790
<font color="#E5E5E5">bit of manual triage because even though</font>

314
00:13:03,750 --> 00:13:07,470
it's accurately flagged a secret<font color="#E5E5E5"> you</font>

315
00:13:05,790 --> 00:13:09,300
don't<font color="#CCCCCC"> know whether</font><font color="#E5E5E5"> or not it's live</font><font color="#CCCCCC"> you</font>

316
00:13:07,470 --> 00:13:11,850
don't<font color="#E5E5E5"> know whether or</font><font color="#CCCCCC"> not it's a</font><font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> a</font>

317
00:13:09,300 --> 00:13:14,339
test private key<font color="#CCCCCC"> which is more often</font>

318
00:13:11,850 --> 00:13:16,710
<font color="#E5E5E5">than that's it's a pretty common thing</font>

319
00:13:14,340 --> 00:13:21,230
is what<font color="#E5E5E5"> I've found so there's still some</font>

320
00:13:16,710 --> 00:13:23,910
<font color="#E5E5E5">manual triage that's less</font><font color="#CCCCCC"> than ideal</font><font color="#E5E5E5"> so</font>

321
00:13:21,230 --> 00:13:25,950
this is kind of the<font color="#E5E5E5"> model</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> how I've</font>

322
00:13:23,910 --> 00:13:28,199
integrated us into a<font color="#CCCCCC"> devops pipeline in</font>

323
00:13:25,950 --> 00:13:30,720
<font color="#E5E5E5">the past you have some</font><font color="#CCCCCC"> commit hook</font><font color="#E5E5E5"> that</font>

324
00:13:28,200 --> 00:13:32,400
fires a truffle hog scan<font color="#CCCCCC"> Java hog will</font>

325
00:13:30,720 --> 00:13:33,930
run on<font color="#E5E5E5"> that committee with your</font>

326
00:13:32,400 --> 00:13:36,449
customized regular expressions

327
00:13:33,930 --> 00:13:37,949
that'll get then<font color="#CCCCCC"> gets sent to a triage</font>

328
00:13:36,450 --> 00:13:39,480
system<font color="#E5E5E5"> we all have to go through</font><font color="#CCCCCC"> and</font>

329
00:13:37,950 --> 00:13:40,910
identify<font color="#CCCCCC"> whether or</font><font color="#E5E5E5"> not the key is live</font>

330
00:13:39,480 --> 00:13:43,190
or<font color="#CCCCCC"> not</font>

331
00:13:40,910 --> 00:13:45,020
and that triage step will ultimately go

332
00:13:43,190 --> 00:13:46,970
to our mediation step and the

333
00:13:45,020 --> 00:13:49,189
remediation step isn't<font color="#CCCCCC"> always</font>

334
00:13:46,970 --> 00:13:50,660
straightforward<font color="#E5E5E5"> because you not only</font>

335
00:13:49,190 --> 00:13:51,890
<font color="#E5E5E5">have</font><font color="#CCCCCC"> to remove the secret but you</font><font color="#E5E5E5"> have</font>

336
00:13:50,660 --> 00:13:54,310
to<font color="#CCCCCC"> rotate it you have to do it without</font>

337
00:13:51,890 --> 00:13:56,630
taking<font color="#E5E5E5"> down a service</font><font color="#CCCCCC"> in production</font>

338
00:13:54,310 --> 00:13:57,829
<font color="#CCCCCC">which can</font><font color="#E5E5E5"> be a pain because sometimes</font>

339
00:13:56,630 --> 00:14:00,290
you don't know where these keys belong

340
00:13:57,830 --> 00:14:02,600
to so these are kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the different</font>

341
00:14:00,290 --> 00:14:04,550
steps<font color="#E5E5E5"> and that second step</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> truffle</font>

342
00:14:02,600 --> 00:14:09,650
hog<font color="#E5E5E5"> is the one that I've open-source so</font>

343
00:14:04,550 --> 00:14:11,990
far<font color="#CCCCCC"> but if you</font><font color="#E5E5E5"> remember back in the</font>

344
00:14:09,650 --> 00:14:13,970
beginning<font color="#CCCCCC"> I talked about a bunch of</font>

345
00:14:11,990 --> 00:14:17,840
<font color="#E5E5E5">different places that source code lives</font>

346
00:14:13,970 --> 00:14:19,790
<font color="#E5E5E5">it doesn't just live and get and so what</font>

347
00:14:17,840 --> 00:14:22,190
<font color="#E5E5E5">about all those other places there was a</font>

348
00:14:19,790 --> 00:14:26,689
talk earlier<font color="#CCCCCC"> today</font><font color="#E5E5E5"> about finding</font><font color="#CCCCCC"> secrets</font>

349
00:14:22,190 --> 00:14:28,640
and Android apps<font color="#E5E5E5"> and they exist in every</font>

350
00:14:26,690 --> 00:14:29,810
single place<font color="#CCCCCC"> you can imagine</font><font color="#E5E5E5"> source code</font>

351
00:14:28,640 --> 00:14:34,040
existing<font color="#CCCCCC"> I promise</font>

352
00:14:29,810 --> 00:14:36,859
and so recently<font color="#E5E5E5"> I despite on package</font>

353
00:14:34,040 --> 00:14:39,430
managers<font color="#E5E5E5"> so the two that</font><font color="#CCCCCC"> I've been</font>

354
00:14:36,860 --> 00:14:43,160
looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> n TM and pi PI and</font>

355
00:14:39,430 --> 00:14:47,329
similar to get they also have a<font color="#E5E5E5"> revision</font>

356
00:14:43,160 --> 00:14:49,339
history<font color="#E5E5E5"> so you can push a package to</font>

357
00:14:47,330 --> 00:14:50,990
note<font color="#CCCCCC"> and</font><font color="#E5E5E5"> NPM and give it a</font><font color="#CCCCCC"> version and</font>

358
00:14:49,340 --> 00:14:53,750
then you<font color="#E5E5E5"> can push a</font><font color="#CCCCCC"> new version</font><font color="#E5E5E5"> and then</font>

359
00:14:50,990 --> 00:14:55,460
you<font color="#E5E5E5"> can push a</font><font color="#CCCCCC"> new version</font><font color="#E5E5E5"> and so if you</font>

360
00:14:53,750 --> 00:14:57,410
accidentally push a secret and one of

361
00:14:55,460 --> 00:14:58,610
the old versions you can<font color="#E5E5E5"> bury over the</font>

362
00:14:57,410 --> 00:15:01,040
top<font color="#CCCCCC"> of it and if you looked</font><font color="#E5E5E5"> at the</font>

363
00:14:58,610 --> 00:15:03,290
latest<font color="#E5E5E5"> version</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> never know in</font>

364
00:15:01,040 --> 00:15:06,319
addition<font color="#E5E5E5"> to that when you push these</font>

365
00:15:03,290 --> 00:15:09,650
packages to NPM<font color="#CCCCCC"> at pi</font><font color="#E5E5E5"> PI they don't pull</font>

366
00:15:06,320 --> 00:15:12,200
from<font color="#CCCCCC"> git</font><font color="#E5E5E5"> they pull</font><font color="#CCCCCC"> from the file system</font>

367
00:15:09,650 --> 00:15:14,720
<font color="#CCCCCC">so if you're tracking you're working</font><font color="#E5E5E5"> get</font>

368
00:15:12,200 --> 00:15:16,040
and you've got some sort<font color="#E5E5E5"> of test script</font>

369
00:15:14,720 --> 00:15:19,690
<font color="#E5E5E5">that you haven't staged</font><font color="#CCCCCC"> you're committed</font>

370
00:15:16,040 --> 00:15:23,209
there's a good chance that<font color="#E5E5E5"> it'll end up</font>

371
00:15:19,690 --> 00:15:26,090
accidentally packaged into NPM or<font color="#E5E5E5"> pi PI</font>

372
00:15:23,210 --> 00:15:27,920
<font color="#E5E5E5">even though it never made</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> to get so</font>

373
00:15:26,090 --> 00:15:30,400
if you remember<font color="#CCCCCC"> back to</font><font color="#E5E5E5"> what I</font><font color="#CCCCCC"> said</font>

374
00:15:27,920 --> 00:15:32,569
<font color="#E5E5E5">about open source software reviews again</font>

375
00:15:30,400 --> 00:15:35,360
there's a good chance<font color="#E5E5E5"> that your security</font>

376
00:15:32,570 --> 00:15:37,220
engineer<font color="#E5E5E5"> is only going to look at the</font>

377
00:15:35,360 --> 00:15:39,230
<font color="#CCCCCC">version control and get they're not</font>

378
00:15:37,220 --> 00:15:40,910
<font color="#E5E5E5">going to hold down the</font><font color="#CCCCCC"> package</font><font color="#E5E5E5"> and read</font>

379
00:15:39,230 --> 00:15:43,150
the source code<font color="#CCCCCC"> that was published to</font>

380
00:15:40,910 --> 00:15:46,040
the<font color="#E5E5E5"> package</font><font color="#CCCCCC"> manager</font>

381
00:15:43,150 --> 00:15:47,420
so that source<font color="#CCCCCC"> code by and large goes</font>

382
00:15:46,040 --> 00:15:52,310
unreviewed even though there can<font color="#E5E5E5"> be</font>

383
00:15:47,420 --> 00:15:54,439
differences so<font color="#E5E5E5"> I went ahead</font><font color="#CCCCCC"> and scanned</font>

384
00:15:52,310 --> 00:15:56,810
<font color="#E5E5E5">a whole bunch of packages and</font>

385
00:15:54,440 --> 00:16:00,860
to see if these<font color="#E5E5E5"> problems were systemic</font>

386
00:15:56,810 --> 00:16:04,280
<font color="#E5E5E5">and what I found was if your package</font><font color="#CCCCCC"> on</font>

387
00:16:00,860 --> 00:16:06,590
NPM<font color="#CCCCCC"> work yet had the</font><font color="#E5E5E5"> string AWS anywhere</font>

388
00:16:04,280 --> 00:16:09,890
in the description<font color="#E5E5E5"> there was about a two</font>

389
00:16:06,590 --> 00:16:13,040
percent<font color="#CCCCCC"> chance of that package having a</font>

390
00:16:09,890 --> 00:16:16,699
live AWS token in it and what's worse is

391
00:16:13,040 --> 00:16:19,550
in most cases<font color="#E5E5E5"> that AWS token didn't show</font>

392
00:16:16,700 --> 00:16:23,420
up and get so it was in the package and

393
00:16:19,550 --> 00:16:25,160
either a testing script<font color="#E5E5E5"> or in an</font>

394
00:16:23,420 --> 00:16:29,180
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> variable script that</font><font color="#E5E5E5"> was</font>

395
00:16:25,160 --> 00:16:31,069
designed to be<font color="#E5E5E5"> sourced from</font><font color="#CCCCCC"> and that</font>

396
00:16:29,180 --> 00:16:33,579
just got packaged up and sent to<font color="#E5E5E5"> NPM or</font>

397
00:16:31,070 --> 00:16:36,320
<font color="#CCCCCC">pi</font><font color="#E5E5E5"> PI and it never made</font><font color="#CCCCCC"> it to get and</font>

398
00:16:33,580 --> 00:16:38,980
then the last<font color="#E5E5E5"> bullet point</font><font color="#CCCCCC"> here is maybe</font>

399
00:16:36,320 --> 00:16:42,050
experimental code with a developer knew

400
00:16:38,980 --> 00:16:44,480
that they were just temporarily<font color="#CCCCCC"> in</font>

401
00:16:42,050 --> 00:16:46,490
<font color="#E5E5E5">lining</font><font color="#CCCCCC"> a secret or a</font><font color="#E5E5E5"> password but they</font>

402
00:16:44,480 --> 00:16:49,430
would never<font color="#CCCCCC"> actually commit that to get</font>

403
00:16:46,490 --> 00:16:50,840
and their intention was to at some point

404
00:16:49,430 --> 00:16:53,510
pull that out and make<font color="#E5E5E5"> an environment</font>

405
00:16:50,840 --> 00:16:56,720
<font color="#E5E5E5">variable but when they packaged NPM and</font>

406
00:16:53,510 --> 00:16:58,160
<font color="#E5E5E5">pi PI</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> weren't paying attention to</font>

407
00:16:56,720 --> 00:16:59,810
the<font color="#E5E5E5"> fact it was</font><font color="#CCCCCC"> just pulling</font><font color="#E5E5E5"> all the</font>

408
00:16:58,160 --> 00:17:02,949
files in the<font color="#CCCCCC"> file</font><font color="#E5E5E5"> system</font><font color="#CCCCCC"> and that</font>

409
00:16:59,810 --> 00:17:06,230
experimental code accidentally got

410
00:17:02,950 --> 00:17:10,000
<font color="#E5E5E5">so I made a</font><font color="#CCCCCC"> new tool</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> i'm calling it</font>

411
00:17:06,230 --> 00:17:13,310
<font color="#CCCCCC">santa hog which is a really</font><font color="#E5E5E5"> dumb name</font>

412
00:17:10,000 --> 00:17:14,660
<font color="#E5E5E5">but i'm excited about it because i</font>

413
00:17:13,310 --> 00:17:23,829
<font color="#CCCCCC">really want to see the sketch artist</font>

414
00:17:14,660 --> 00:17:26,660
<font color="#E5E5E5">draw a Santa hog my original thinking</font>

415
00:17:23,829 --> 00:17:28,879
original thinking is it's a it's<font color="#CCCCCC"> like a</font>

416
00:17:26,660 --> 00:17:29,690
package<font color="#E5E5E5"> that you open and you get</font>

417
00:17:28,880 --> 00:17:31,760
secrets

418
00:17:29,690 --> 00:17:34,100
<font color="#CCCCCC">so it's Santa and then</font><font color="#E5E5E5"> hog is just for</font>

419
00:17:31,760 --> 00:17:35,890
consistency<font color="#E5E5E5"> but other than that is it's</font>

420
00:17:34,100 --> 00:17:40,610
<font color="#E5E5E5">the</font><font color="#CCCCCC"> best I could come up with</font>

421
00:17:35,890 --> 00:17:43,400
so basically currently<font color="#E5E5E5"> Santa hog scans</font>

422
00:17:40,610 --> 00:17:44,929
<font color="#E5E5E5">NPM and</font><font color="#CCCCCC"> pi</font><font color="#E5E5E5"> PI packages it goes all the</font>

423
00:17:43,400 --> 00:17:46,790
way back<font color="#CCCCCC"> through</font><font color="#E5E5E5"> all the old revisions</font>

424
00:17:44,930 --> 00:17:50,360
<font color="#CCCCCC">of the package and it runs the same</font>

425
00:17:46,790 --> 00:17:52,220
<font color="#E5E5E5">exact engine</font><font color="#CCCCCC"> the truffle hog does so it</font>

426
00:17:50,360 --> 00:17:53,570
runs<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same reg X's and it does the</font>

427
00:17:52,220 --> 00:17:55,730
<font color="#E5E5E5">same entropy detection that you could</font>

428
00:17:53,570 --> 00:17:56,929
turn<font color="#E5E5E5"> on</font><font color="#CCCCCC"> and off it's also open</font><font color="#E5E5E5"> source</font>

429
00:17:55,730 --> 00:17:59,690
that's available<font color="#E5E5E5"> in my github</font>

430
00:17:56,930 --> 00:18:03,800
I made a public<font color="#E5E5E5"> last night so you can</font>

431
00:17:59,690 --> 00:18:05,390
<font color="#E5E5E5">visit my github and use it but this is</font>

432
00:18:03,800 --> 00:18:07,810
<font color="#E5E5E5">the tool</font><font color="#CCCCCC"> that I</font><font color="#E5E5E5"> use to enumerate all</font>

433
00:18:05,390 --> 00:18:09,940
those AWS tokens which I reported

434
00:18:07,810 --> 00:18:12,220
but my suspicion<font color="#CCCCCC"> is if you look for</font>

435
00:18:09,940 --> 00:18:16,150
different keywords<font color="#CCCCCC"> you will find lots of</font>

436
00:18:12,220 --> 00:18:18,190
more tokens<font color="#E5E5E5"> live in</font><font color="#CCCCCC"> NPM and pipehype and</font>

437
00:18:16,150 --> 00:18:20,620
in<font color="#E5E5E5"> addition to that if you run internal</font>

438
00:18:18,190 --> 00:18:22,270
mirrors of NPM and<font color="#CCCCCC"> pi PI there's a good</font>

439
00:18:20,620 --> 00:18:24,870
chance<font color="#E5E5E5"> maybe a higher likelihood chance</font>

440
00:18:22,270 --> 00:18:27,879
that those<font color="#E5E5E5"> will also have live</font><font color="#CCCCCC"> secrets</font>

441
00:18:24,870 --> 00:18:29,889
<font color="#CCCCCC">so this is an example of the output</font><font color="#E5E5E5"> it's</font>

442
00:18:27,880 --> 00:18:32,560
not quite as trouble<font color="#E5E5E5"> it's not quite as</font>

443
00:18:29,890 --> 00:18:36,120
pretty<font color="#E5E5E5"> as trouble</font><font color="#CCCCCC"> hog currently but here</font>

444
00:18:32,560 --> 00:18:39,010
I'm scanning<font color="#E5E5E5"> a package called T channel</font>

445
00:18:36,120 --> 00:18:41,530
<font color="#CCCCCC">which</font><font color="#E5E5E5"> is one of Hoover's open source</font>

446
00:18:39,010 --> 00:18:43,360
packages and you'll see it flagged<font color="#E5E5E5"> on a</font>

447
00:18:41,530 --> 00:18:45,550
bunch of<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> flagged on an AWS key it</font>

448
00:18:43,360 --> 00:18:47,709
flagged on some<font color="#E5E5E5"> private keys and if we</font>

449
00:18:45,550 --> 00:18:52,240
look at it a little<font color="#CCCCCC"> bit closer</font><font color="#E5E5E5"> we see</font>

450
00:18:47,710 --> 00:18:55,270
something interesting<font color="#CCCCCC"> these keys</font><font color="#E5E5E5"> didn't</font>

451
00:18:52,240 --> 00:18:56,590
show up in the code that<font color="#CCCCCC"> uber wrote it</font>

452
00:18:55,270 --> 00:18:58,960
actually showed up in a directory that

453
00:18:56,590 --> 00:19:00,370
<font color="#E5E5E5">uber didn't mean to publish the node</font>

454
00:18:58,960 --> 00:19:03,040
<font color="#CCCCCC">modules directory and if you're</font><font color="#E5E5E5"> familiar</font>

455
00:19:00,370 --> 00:19:05,050
with node<font color="#E5E5E5"> basically the node modules</font>

456
00:19:03,040 --> 00:19:07,480
directory is<font color="#CCCCCC"> where all the dependencies</font>

457
00:19:05,050 --> 00:19:10,360
<font color="#E5E5E5">for the package</font><font color="#CCCCCC"> that you're using live</font>

458
00:19:07,480 --> 00:19:12,910
and so what they accidentally<font color="#E5E5E5"> did here</font>

459
00:19:10,360 --> 00:19:15,429
was they accidentally published<font color="#E5E5E5"> their</font>

460
00:19:12,910 --> 00:19:17,500
package<font color="#E5E5E5"> with all the dependencies and</font>

461
00:19:15,430 --> 00:19:21,790
the<font color="#E5E5E5"> dependencies dependencies and all</font>

462
00:19:17,500 --> 00:19:23,110
the tree sub dependencies of<font color="#CCCCCC"> the project</font>

463
00:19:21,790 --> 00:19:25,780
that they were working<font color="#E5E5E5"> on</font><font color="#CCCCCC"> so you see</font>

464
00:19:23,110 --> 00:19:28,689
several layers of<font color="#E5E5E5"> node modules there and</font>

465
00:19:25,780 --> 00:19:31,240
we end up<font color="#E5E5E5"> with AWS keys from packages</font>

466
00:19:28,690 --> 00:19:33,480
that were<font color="#E5E5E5"> never written by over</font><font color="#CCCCCC"> that</font>

467
00:19:31,240 --> 00:19:35,590
uber didn't know about<font color="#E5E5E5"> in any capacity</font>

468
00:19:33,480 --> 00:19:37,570
<font color="#CCCCCC">but you were accidentally published</font>

469
00:19:35,590 --> 00:19:40,750
<font color="#E5E5E5">because they published all these other</font>

470
00:19:37,570 --> 00:19:42,340
<font color="#CCCCCC">packages</font><font color="#E5E5E5"> with their code</font><font color="#CCCCCC"> and this is</font>

471
00:19:40,750 --> 00:19:43,810
interesting and<font color="#CCCCCC"> we'll come back to why</font>

472
00:19:42,340 --> 00:19:46,780
<font color="#CCCCCC">it's interesting later than why I can</font>

473
00:19:43,810 --> 00:19:49,990
cause some problems<font color="#E5E5E5"> so this is the</font>

474
00:19:46,780 --> 00:19:51,940
revised<font color="#CCCCCC"> DevOps pipeline basically you</font>

475
00:19:49,990 --> 00:19:54,130
have hooks for when a new package is

476
00:19:51,940 --> 00:19:56,170
deployed and<font color="#E5E5E5"> for when you have git</font>

477
00:19:54,130 --> 00:19:58,420
commit hooks<font color="#E5E5E5"> and they feed into the same</font>

478
00:19:56,170 --> 00:20:03,130
triage ER and the remediation stage is

479
00:19:58,420 --> 00:20:05,320
the same<font color="#E5E5E5"> so I could use some community</font>

480
00:20:03,130 --> 00:20:08,200
help on this<font color="#CCCCCC"> project</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> just me</font>

481
00:20:05,320 --> 00:20:10,540
and random contributors<font color="#CCCCCC"> that I don't</font>

482
00:20:08,200 --> 00:20:12,160
know<font color="#E5E5E5"> committing to it for the last year</font>

483
00:20:10,540 --> 00:20:15,730
<font color="#E5E5E5">and a half</font><font color="#CCCCCC"> but there's a lot of features</font>

484
00:20:12,160 --> 00:20:17,140
<font color="#CCCCCC">that I could use for starters I need a</font>

485
00:20:15,730 --> 00:20:18,460
lot more regular expressions there's a

486
00:20:17,140 --> 00:20:21,059
lot of<font color="#E5E5E5"> Secrets</font><font color="#CCCCCC"> that I'm not</font><font color="#E5E5E5"> looking for</font>

487
00:20:18,460 --> 00:20:23,309
and they need to be

488
00:20:21,059 --> 00:20:26,639
hi signal so that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't make it really</font>

489
00:20:23,309 --> 00:20:28,399
noisy<font color="#CCCCCC"> it would be really</font><font color="#E5E5E5"> nice if you</font>

490
00:20:26,639 --> 00:20:31,408
could<font color="#E5E5E5"> specify a range of commits</font>

491
00:20:28,399 --> 00:20:33,389
currently you can specify a commit<font color="#E5E5E5"> where</font>

492
00:20:31,409 --> 00:20:36,090
you say<font color="#E5E5E5"> to</font><font color="#CCCCCC"> chop</font><font color="#E5E5E5"> a hog scan from this</font>

493
00:20:33,389 --> 00:20:38,998
commit onward<font color="#E5E5E5"> but their limitations are</font>

494
00:20:36,090 --> 00:20:40,350
<font color="#E5E5E5">it will number one clone the entire</font>

495
00:20:38,999 --> 00:20:42,809
package<font color="#CCCCCC"> it would be nice</font><font color="#E5E5E5"> if it only</font>

496
00:20:40,350 --> 00:20:45,809
cloned the relevant sections and number

497
00:20:42,809 --> 00:20:48,210
two you can't specify<font color="#CCCCCC"> a range so</font><font color="#E5E5E5"> you can</font>

498
00:20:45,809 --> 00:20:49,950
only<font color="#CCCCCC"> specify from</font><font color="#E5E5E5"> this commit onward</font>

499
00:20:48,210 --> 00:20:51,899
<font color="#E5E5E5">another thing that would be really nice</font>

500
00:20:49,950 --> 00:20:53,970
is multi-threading currently it's single

501
00:20:51,899 --> 00:20:55,408
threaded<font color="#CCCCCC"> so when I run it I usually</font><font color="#E5E5E5"> just</font>

502
00:20:53,970 --> 00:20:57,389
spin up<font color="#E5E5E5"> a bunch of instances of</font><font color="#CCCCCC"> triple</font>

503
00:20:55,409 --> 00:20:59,820
hog<font color="#CCCCCC"> but it would be nice if I could just</font>

504
00:20:57,389 --> 00:21:02,399
specify the<font color="#E5E5E5"> command-line argument how</font>

505
00:20:59,820 --> 00:21:03,779
many threads that<font color="#E5E5E5"> I want and there's a</font>

506
00:21:02,399 --> 00:21:05,729
lot<font color="#E5E5E5"> more features as well</font>

507
00:21:03,779 --> 00:21:08,399
that I'm sure you<font color="#E5E5E5"> all can come</font><font color="#CCCCCC"> up with</font>

508
00:21:05,730 --> 00:21:11,340
<font color="#E5E5E5">and offer to me and I'm glad</font><font color="#CCCCCC"> to accept</font>

509
00:21:08,399 --> 00:21:13,080
pull requests<font color="#CCCCCC"> I am</font><font color="#E5E5E5"> a little bit slow</font>

510
00:21:11,340 --> 00:21:14,428
because I'm managing a bunch of

511
00:21:13,080 --> 00:21:16,740
different pull requests but if the

512
00:21:14,429 --> 00:21:18,360
feature<font color="#E5E5E5"> is small and well contained and</font>

513
00:21:16,740 --> 00:21:21,360
really easy<font color="#E5E5E5"> to understand</font><font color="#CCCCCC"> I'm happy to</font>

514
00:21:18,360 --> 00:21:25,110
merge it in<font color="#E5E5E5"> and then the last thing that</font>

515
00:21:21,360 --> 00:21:27,479
I did in<font color="#E5E5E5"> this past week</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> Santa</font>

516
00:21:25,110 --> 00:21:28,110
hog<font color="#E5E5E5"> was relying on truffle hogs regular</font>

517
00:21:27,480 --> 00:21:30,389
<font color="#E5E5E5">expressions</font>

518
00:21:28,110 --> 00:21:32,519
<font color="#CCCCCC">I pulled the regular expressions</font><font color="#E5E5E5"> out of</font>

519
00:21:30,389 --> 00:21:34,168
the main truffle hog project<font color="#E5E5E5"> and I put</font>

520
00:21:32,519 --> 00:21:36,179
<font color="#E5E5E5">them in their own repository and I</font>

521
00:21:34,169 --> 00:21:38,340
pulled them<font color="#CCCCCC"> out of a</font><font color="#E5E5E5"> Python file and I</font>

522
00:21:36,179 --> 00:21:40,769
made them<font color="#E5E5E5"> a JSON file so they can be</font>

523
00:21:38,340 --> 00:21:42,749
<font color="#E5E5E5">used for other projects as well so there</font>

524
00:21:40,769 --> 00:21:44,490
<font color="#E5E5E5">is another project called get leaks</font><font color="#CCCCCC"> that</font>

525
00:21:42,749 --> 00:21:46,409
was basically a feature parity of

526
00:21:44,490 --> 00:21:48,779
truffle hogs someone made written and go

527
00:21:46,409 --> 00:21:50,129
and when I looked at his source code<font color="#E5E5E5"> he</font>

528
00:21:48,779 --> 00:21:52,289
had copy pasted all my<font color="#E5E5E5"> regular</font>

529
00:21:50,129 --> 00:21:53,759
expressions over<font color="#E5E5E5"> my hope is</font><font color="#CCCCCC"> that by</font>

530
00:21:52,289 --> 00:21:55,830
<font color="#E5E5E5">pulling these out and making them their</font>

531
00:21:53,759 --> 00:21:57,629
own<font color="#E5E5E5"> JSON files you all can pull these</font>

532
00:21:55,830 --> 00:21:59,549
JSON files down and point to this

533
00:21:57,629 --> 00:22:02,100
<font color="#CCCCCC">reference</font><font color="#E5E5E5"> so that way we can</font><font color="#CCCCCC"> have one</font>

534
00:21:59,549 --> 00:22:06,330
community repository where we all update

535
00:22:02,100 --> 00:22:07,559
and keep these rules<font color="#CCCCCC"> in one place</font><font color="#E5E5E5"> so</font>

536
00:22:06,330 --> 00:22:10,350
that<font color="#CCCCCC"> was kind of my thinking for pulling</font>

537
00:22:07,559 --> 00:22:12,658
<font color="#CCCCCC">that out there's one more thing</font><font color="#E5E5E5"> that I</font>

538
00:22:10,350 --> 00:22:15,360
want<font color="#E5E5E5"> to touch on</font><font color="#CCCCCC"> here that triage step</font>

539
00:22:12,659 --> 00:22:17,700
on a graph<font color="#CCCCCC"> I mentioned</font><font color="#E5E5E5"> that in a lot of</font>

540
00:22:15,360 --> 00:22:20,699
cases it has to be manual but in some

541
00:22:17,700 --> 00:22:23,730
<font color="#E5E5E5">cases it can</font><font color="#CCCCCC"> be automated</font><font color="#E5E5E5"> specifically</font>

542
00:22:20,700 --> 00:22:26,970
when you're offering to<font color="#E5E5E5"> public api's if</font>

543
00:22:23,730 --> 00:22:28,740
you've got<font color="#E5E5E5"> a live key you can use that</font>

544
00:22:26,970 --> 00:22:30,169
key<font color="#CCCCCC"> on the public</font><font color="#E5E5E5"> API and very easily</font>

545
00:22:28,740 --> 00:22:32,519
tell whether or not it's live

546
00:22:30,169 --> 00:22:34,080
automatically<font color="#E5E5E5"> without a human having to</font>

547
00:22:32,519 --> 00:22:35,909
do the<font color="#CCCCCC"> verification</font>

548
00:22:34,080 --> 00:22:38,580
and I have one simple<font color="#CCCCCC"> example of</font><font color="#E5E5E5"> that</font>

549
00:22:35,909 --> 00:22:41,070
<font color="#E5E5E5">here this is a simple</font><font color="#CCCCCC"> Python function I</font>

550
00:22:38,580 --> 00:22:43,350
wrote<font color="#E5E5E5"> that takes an AWS key and returns</font>

551
00:22:41,070 --> 00:22:45,330
true<font color="#CCCCCC"> if the key is</font><font color="#E5E5E5"> live and false if the</font>

552
00:22:43,350 --> 00:22:47,399
key<font color="#CCCCCC"> is false</font><font color="#E5E5E5"> so you can imagine taking</font>

553
00:22:45,330 --> 00:22:48,750
<font color="#E5E5E5">the</font><font color="#CCCCCC"> output of truffle hog</font><font color="#E5E5E5"> sending it</font>

554
00:22:47,399 --> 00:22:51,479
directly<font color="#E5E5E5"> to these verifiers</font>

555
00:22:48,750 --> 00:22:53,100
and then based on the<font color="#E5E5E5"> result of the</font>

556
00:22:51,480 --> 00:22:54,570
<font color="#CCCCCC">verifier automatically knowing whether</font>

557
00:22:53,100 --> 00:22:58,199
or<font color="#E5E5E5"> not you need</font><font color="#CCCCCC"> to take remediation</font>

558
00:22:54,570 --> 00:23:00,840
steps there are<font color="#E5E5E5"> some drawbacks to doing</font>

559
00:22:58,200 --> 00:23:03,120
this and<font color="#E5E5E5"> this kind of brings me</font><font color="#CCCCCC"> back to</font>

560
00:23:00,840 --> 00:23:05,158
the<font color="#E5E5E5"> Chi</font><font color="#CCCCCC"> Channel example let</font><font color="#E5E5E5"> me start by</font>

561
00:23:03,120 --> 00:23:08,100
saying<font color="#CCCCCC"> I'm not a lawyer and this is not</font>

562
00:23:05,159 --> 00:23:09,419
<font color="#E5E5E5">legal or financial advice</font><font color="#CCCCCC"> but you should</font>

563
00:23:08,100 --> 00:23:11,908
be careful<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the Computer Fraud and</font>

564
00:23:09,419 --> 00:23:14,309
<font color="#E5E5E5">Abuse Act</font><font color="#CCCCCC"> if you are scanning everything</font>

565
00:23:11,909 --> 00:23:16,559
<font color="#CCCCCC">more</font><font color="#E5E5E5"> likely than not</font><font color="#CCCCCC"> you will end up</font>

566
00:23:14,309 --> 00:23:18,059
<font color="#CCCCCC">testing keys that accidentally got</font>

567
00:23:16,559 --> 00:23:19,918
packaged in your source<font color="#E5E5E5"> code that don't</font>

568
00:23:18,059 --> 00:23:21,480
belong<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you because you're pulling in</font>

569
00:23:19,919 --> 00:23:24,059
dependencies you're pulling in code<font color="#CCCCCC"> that</font>

570
00:23:21,480 --> 00:23:26,580
was copy pasted and if you<font color="#CCCCCC"> authorised to</font>

571
00:23:24,059 --> 00:23:28,970
<font color="#CCCCCC">assist</font><font color="#E5E5E5"> them with those keys</font><font color="#CCCCCC"> you're</font>

572
00:23:26,580 --> 00:23:30,960
probably violating the CFAA you're

573
00:23:28,970 --> 00:23:32,700
authenticating to a system that<font color="#CCCCCC"> you</font>

574
00:23:30,960 --> 00:23:36,000
didn't get<font color="#CCCCCC"> permission to</font><font color="#E5E5E5"> or in a way</font>

575
00:23:32,700 --> 00:23:37,380
that you didn't have<font color="#E5E5E5"> permission and you</font>

576
00:23:36,000 --> 00:23:39,659
<font color="#CCCCCC">probably should not</font><font color="#E5E5E5"> use these</font><font color="#CCCCCC"> Auto</font>

577
00:23:37,380 --> 00:23:41,700
verifiers for bug bounties either for

578
00:23:39,659 --> 00:23:44,130
the same<font color="#E5E5E5"> reason</font><font color="#CCCCCC"> for actually more so at</font>

579
00:23:41,700 --> 00:23:45,720
the same reason because<font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of times</font>

580
00:23:44,130 --> 00:23:48,149
bug bounties will not allow you to

581
00:23:45,720 --> 00:23:50,760
<font color="#E5E5E5">authorize with credentials that you've</font>

582
00:23:48,149 --> 00:23:52,830
extracted<font color="#E5E5E5"> so if you find a credential</font>

583
00:23:50,760 --> 00:23:54,840
<font color="#E5E5E5">usually a bug</font><font color="#CCCCCC"> bounties say stop testing</font>

584
00:23:52,830 --> 00:23:57,360
<font color="#E5E5E5">and don't authorize don't actually off</font>

585
00:23:54,840 --> 00:23:59,340
with them<font color="#E5E5E5"> so if you do write these Auto</font>

586
00:23:57,360 --> 00:24:00,629
verifiers<font color="#E5E5E5"> be very careful with them and</font>

587
00:23:59,340 --> 00:24:03,539
the way you use<font color="#E5E5E5"> them because you may end</font>

588
00:24:00,630 --> 00:24:08,580
<font color="#CCCCCC">up accidentally winding up</font><font color="#E5E5E5"> in some legal</font>

589
00:24:03,539 --> 00:24:11,010
trouble these are all the resources<font color="#CCCCCC"> so</font>

590
00:24:08,580 --> 00:24:14,610
<font color="#CCCCCC">truffle</font><font color="#E5E5E5"> hog Santa hog and the Reg X's</font>

591
00:24:11,010 --> 00:24:16,679
are all available<font color="#E5E5E5"> on my github and feel</font>

592
00:24:14,610 --> 00:24:19,379
free to check<font color="#CCCCCC"> them out and to use them</font>

593
00:24:16,679 --> 00:24:21,149
<font color="#CCCCCC">for your</font><font color="#E5E5E5"> own personal projects that's</font>

594
00:24:19,380 --> 00:24:23,000
<font color="#E5E5E5">sort of the end</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> my slide deck but I</font>

595
00:24:21,149 --> 00:24:25,678
do want to open<font color="#CCCCCC"> it</font><font color="#E5E5E5"> up</font><font color="#CCCCCC"> for questions</font><font color="#E5E5E5"> and</font>

596
00:24:23,000 --> 00:24:30,049
community<font color="#CCCCCC"> engagement in case anyone has</font>

597
00:24:25,679 --> 00:24:30,049
any<font color="#CCCCCC"> ideas for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> future of the project</font>

598
00:24:31,960 --> 00:24:40,339
[Applause]

599
00:24:40,960 --> 00:25:01,280
yep so the question was what does the

600
00:24:58,370 --> 00:25:05,780
triage process<font color="#E5E5E5"> usually look</font><font color="#CCCCCC"> like in your</font>

601
00:25:01,280 --> 00:25:07,370
<font color="#E5E5E5">DevOps pipeline and for me ideally in a</font>

602
00:25:05,780 --> 00:25:09,950
perfect world you'd be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to give</font>

603
00:25:07,370 --> 00:25:12,049
these directly to the developers<font color="#CCCCCC"> give</font>

604
00:25:09,950 --> 00:25:13,640
the results<font color="#E5E5E5"> directly to developers now</font>

605
00:25:12,049 --> 00:25:14,960
realistically even<font color="#CCCCCC"> with my high signal</font>

606
00:25:13,640 --> 00:25:16,820
regular<font color="#E5E5E5"> expressions sometimes they're</font>

607
00:25:14,960 --> 00:25:18,260
also going to have false<font color="#CCCCCC"> positives and</font>

608
00:25:16,820 --> 00:25:21,620
sometimes you're going to have<font color="#E5E5E5"> keys that</font>

609
00:25:18,260 --> 00:25:24,490
aren't live anymore<font color="#CCCCCC"> so for those cases</font>

610
00:25:21,620 --> 00:25:28,010
<font color="#CCCCCC">if you build out automatic triage errs</font>

611
00:25:24,490 --> 00:25:30,230
<font color="#CCCCCC">you can use that to identify</font><font color="#E5E5E5"> which keys</font>

612
00:25:28,010 --> 00:25:31,580
are live<font color="#E5E5E5"> and a hundred percent of the</font>

613
00:25:30,230 --> 00:25:32,840
time<font color="#CCCCCC"> you can deliver that result</font>

614
00:25:31,580 --> 00:25:34,970
directly<font color="#CCCCCC"> to developer because you know</font>

615
00:25:32,840 --> 00:25:36,500
there's a<font color="#CCCCCC"> problem for</font><font color="#E5E5E5"> the cases where</font>

616
00:25:34,970 --> 00:25:38,780
<font color="#E5E5E5">you can't build out automatic triage</font>

617
00:25:36,500 --> 00:25:41,390
<font color="#CCCCCC">rooms</font><font color="#E5E5E5"> it's a little different</font><font color="#CCCCCC"> if you try</font>

618
00:25:38,780 --> 00:25:44,690
to give<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to developers you may end</font>

619
00:25:41,390 --> 00:25:46,309
up<font color="#E5E5E5"> with too many too much noise and if</font>

620
00:25:44,690 --> 00:25:47,780
<font color="#E5E5E5">that's</font><font color="#CCCCCC"> the case</font><font color="#E5E5E5"> you'll have to manually</font>

621
00:25:46,309 --> 00:25:50,450
<font color="#E5E5E5">go through and refine the truffle</font><font color="#CCCCCC"> hog</font>

622
00:25:47,780 --> 00:25:52,460
<font color="#E5E5E5">rules a little</font><font color="#CCCCCC"> bit but</font><font color="#E5E5E5"> obviously the</font>

623
00:25:50,450 --> 00:25:54,080
<font color="#CCCCCC">other side of that is if you're a small</font>

624
00:25:52,460 --> 00:25:56,750
enough company or a large enough

625
00:25:54,080 --> 00:25:59,149
<font color="#CCCCCC">security team you may be able</font><font color="#E5E5E5"> to have</font>

626
00:25:56,750 --> 00:26:09,679
some<font color="#E5E5E5"> of your</font><font color="#CCCCCC"> dev ops or your security</font>

627
00:25:59,150 --> 00:26:12,169
<font color="#E5E5E5">resources</font><font color="#CCCCCC"> to help with</font><font color="#E5E5E5"> triage yep yeah</font>

628
00:26:09,679 --> 00:26:13,640
so you do<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to be really careful with</font>

629
00:26:12,169 --> 00:26:14,780
the secrets for obvious reasons you

630
00:26:13,640 --> 00:26:16,400
<font color="#E5E5E5">don't want to propagate</font><font color="#CCCCCC"> them in more</font>

631
00:26:14,780 --> 00:26:19,520
places<font color="#E5E5E5"> the way I've</font><font color="#CCCCCC"> handled that</font><font color="#E5E5E5"> in the</font>

632
00:26:16,400 --> 00:26:21,830
past<font color="#CCCCCC"> is if you're using github</font><font color="#E5E5E5"> just</font>

633
00:26:19,520 --> 00:26:24,049
construct a<font color="#E5E5E5"> URL that</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> the line number</font>

634
00:26:21,830 --> 00:26:26,270
<font color="#E5E5E5">and the commit hash that just directly</font>

635
00:26:24,049 --> 00:26:28,850
links to the problem but<font color="#E5E5E5"> don't actually</font>

636
00:26:26,270 --> 00:26:31,150
take the secret and replicate the secret

637
00:26:28,850 --> 00:26:33,379
<font color="#CCCCCC">and don't store the secret in a database</font>

638
00:26:31,150 --> 00:26:35,240
<font color="#CCCCCC">because then you're</font><font color="#E5E5E5"> just creating a</font>

639
00:26:33,380 --> 00:26:37,220
centralized repository<font color="#E5E5E5"> where all the</font>

640
00:26:35,240 --> 00:26:39,530
secrets live<font color="#E5E5E5"> and in a sense you still</font>

641
00:26:37,220 --> 00:26:41,360
<font color="#E5E5E5">have that with the URLs but at least</font>

642
00:26:39,530 --> 00:26:44,139
you're not actually<font color="#E5E5E5"> copying</font><font color="#CCCCCC"> the password</font>

643
00:26:41,360 --> 00:26:44,139
and<font color="#E5E5E5"> putting it in more places</font>

644
00:26:51,200 --> 00:26:57,270
yeah so there is a really good<font color="#E5E5E5"> tool for</font>

645
00:26:54,150 --> 00:26:59,070
<font color="#E5E5E5">cleaning up</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> history</font><font color="#CCCCCC"> the problem is</font>

646
00:26:57,270 --> 00:27:01,650
you don't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to accidentally take down</font>

647
00:26:59,070 --> 00:27:03,360
<font color="#CCCCCC">production services so that one</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font>

648
00:27:01,650 --> 00:27:05,040
really<font color="#E5E5E5"> tricky and usually it's going to</font>

649
00:27:03,360 --> 00:27:06,419
require<font color="#E5E5E5"> a lot of human intervention</font><font color="#CCCCCC"> to</font>

650
00:27:05,040 --> 00:27:08,730
figure out what<font color="#E5E5E5"> that key is where it's</font>

651
00:27:06,420 --> 00:27:11,220
being<font color="#E5E5E5"> used and if you try to just</font>

652
00:27:08,730 --> 00:27:15,990
<font color="#E5E5E5">automatically pull it out of source code</font>

653
00:27:11,220 --> 00:27:17,550
or<font color="#E5E5E5"> auto-rotate the key</font><font color="#CCCCCC"> you may end up in</font>

654
00:27:15,990 --> 00:27:20,370
<font color="#CCCCCC">trouble but I think your question was</font>

655
00:27:17,550 --> 00:27:21,840
more towards<font color="#E5E5E5"> after you've already</font>

656
00:27:20,370 --> 00:27:23,809
identified<font color="#CCCCCC"> the</font><font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and rotated the</font>

657
00:27:21,840 --> 00:27:25,830
key how you remove<font color="#E5E5E5"> it</font><font color="#CCCCCC"> from source</font><font color="#E5E5E5"> code</font>

658
00:27:23,809 --> 00:27:28,800
<font color="#CCCCCC">there</font><font color="#E5E5E5"> is a good tool for that I don't</font>

659
00:27:25,830 --> 00:27:32,760
remember<font color="#E5E5E5"> the name but it's a</font><font color="#CCCCCC"> it's a good</font>

660
00:27:28,800 --> 00:27:37,710
point<font color="#E5E5E5"> I'll try to provide a link</font><font color="#CCCCCC"> after</font>

661
00:27:32,760 --> 00:27:46,250
or something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I think Ben had a</font>

662
00:27:37,710 --> 00:27:49,700
question then<font color="#CCCCCC"> oh that's pretty good I</font>

663
00:27:46,250 --> 00:28:01,770
like<font color="#CCCCCC"> I</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> sin dog</font>

664
00:27:49,700 --> 00:28:03,480
yep yeah so the<font color="#CCCCCC"> question</font><font color="#E5E5E5"> was are there</font>

665
00:28:01,770 --> 00:28:05,910
ever any situations where getting<font color="#E5E5E5"> the</font>

666
00:28:03,480 --> 00:28:08,340
regex just right is really<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> and</font>

667
00:28:05,910 --> 00:28:12,059
you maybe need<font color="#CCCCCC"> to design some kind of</font>

668
00:28:08,340 --> 00:28:14,928
custom code<font color="#E5E5E5"> to maybe increase confidence</font>

669
00:28:12,059 --> 00:28:17,879
<font color="#CCCCCC">I have thought about that a lot I know</font>

670
00:28:14,929 --> 00:28:20,460
<font color="#CCCCCC">the tool</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> lifts open</font><font color="#E5E5E5"> sourced has a</font>

671
00:28:17,880 --> 00:28:22,200
<font color="#E5E5E5">confidence rating of if it meets this</font>

672
00:28:20,460 --> 00:28:23,850
then<font color="#CCCCCC"> at one</font><font color="#E5E5E5"> point if it meets this an</font>

673
00:28:22,200 --> 00:28:26,250
add one<font color="#E5E5E5"> point and if it exceeds that</font>

674
00:28:23,850 --> 00:28:28,050
<font color="#E5E5E5">threshold and report on</font><font color="#CCCCCC"> it but I really</font>

675
00:28:26,250 --> 00:28:30,240
wanted to design travelhob in such a way

676
00:28:28,050 --> 00:28:32,280
that you can confidently take on

677
00:28:30,240 --> 00:28:34,860
arbitrary rules<font color="#E5E5E5"> from arbitrary sources</font>

678
00:28:32,280 --> 00:28:37,110
and not<font color="#CCCCCC"> too much worry about</font><font color="#E5E5E5"> the threat</font>

679
00:28:34,860 --> 00:28:40,770
of<font color="#E5E5E5"> arbitrary code being executed in such</font>

680
00:28:37,110 --> 00:28:42,178
a<font color="#E5E5E5"> sensitive secret capacity</font><font color="#CCCCCC"> and so for</font>

681
00:28:40,770 --> 00:28:44,910
that reason<font color="#E5E5E5"> I've kind of strayed away</font>

682
00:28:42,179 --> 00:28:48,929
from<font color="#E5E5E5"> allowing arbitrary code to help</font>

683
00:28:44,910 --> 00:28:51,559
identify<font color="#CCCCCC"> these secrets there's a</font>

684
00:28:48,929 --> 00:28:51,559
question<font color="#CCCCCC"> back there</font>

685
00:28:56,410 --> 00:29:02,540
yes<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> that's that's</font><font color="#E5E5E5"> the one I was</font>

686
00:28:59,630 --> 00:29:04,640
thinking<font color="#E5E5E5"> of</font><font color="#CCCCCC"> so BFG repo cleaner is the</font>

687
00:29:02,540 --> 00:29:06,340
one that makes<font color="#CCCCCC"> it really easy to scrub</font>

688
00:29:04,640 --> 00:29:08,930
the secret<font color="#E5E5E5"> out of your version control</font>

689
00:29:06,340 --> 00:29:10,370
so it would be<font color="#E5E5E5"> interesting to chain the</font>

690
00:29:08,930 --> 00:29:11,690
two projects together<font color="#E5E5E5"> and</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> them sort</font>

691
00:29:10,370 --> 00:29:16,449
of automatically work together in some

692
00:29:11,690 --> 00:29:16,450
<font color="#CCCCCC">way</font><font color="#E5E5E5"> what does it give a point yes</font>

693
00:29:21,520 --> 00:29:28,639
totally

694
00:29:22,760 --> 00:29:30,590
or like<font color="#E5E5E5"> apt-get or like</font><font color="#CCCCCC"> rpm yeah it's a</font>

695
00:29:28,640 --> 00:29:33,740
problem<font color="#E5E5E5"> I can guarantee it</font><font color="#CCCCCC"> I haven't</font>

696
00:29:30,590 --> 00:29:35,090
<font color="#CCCCCC">written the code for it but I promise</font>

697
00:29:33,740 --> 00:29:37,820
you if<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> think of a package</font>

698
00:29:35,090 --> 00:29:43,899
manager it's got secrets in it<font color="#CCCCCC"> I</font><font color="#E5E5E5"> accept</font>

699
00:29:37,820 --> 00:29:43,899
all requests yep

700
00:30:03,090 --> 00:30:07,139
yeah so this<font color="#E5E5E5"> is gonna be the last</font>

701
00:30:05,049 --> 00:30:10,330
question<font color="#CCCCCC"> because I was given the timeout</font>

702
00:30:07,140 --> 00:30:12,220
basically<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> a problem</font>

703
00:30:10,330 --> 00:30:14,590
<font color="#E5E5E5">URLs often have hashes</font><font color="#CCCCCC"> in them and that</font>

704
00:30:12,220 --> 00:30:16,299
<font color="#E5E5E5">can be a problem</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> tried to</font><font color="#CCCCCC"> make the</font>

705
00:30:14,590 --> 00:30:18,580
regular expressions in such a way that

706
00:30:16,299 --> 00:30:20,740
<font color="#E5E5E5">either the secret has to be wrapped in</font>

707
00:30:18,580 --> 00:30:25,149
quotes<font color="#CCCCCC"> which is pretty uncommon for URLs</font>

708
00:30:20,740 --> 00:30:28,570
or<font color="#CCCCCC"> you expect</font><font color="#E5E5E5"> the name of the service</font>

709
00:30:25,150 --> 00:30:31,210
<font color="#E5E5E5">and then the secret lengths to try to</font>

710
00:30:28,570 --> 00:30:33,100
cut down<font color="#E5E5E5"> on noise but sometimes even</font>

711
00:30:31,210 --> 00:30:36,250
<font color="#CCCCCC">with all that</font><font color="#E5E5E5"> you sometimes still get</font>

712
00:30:33,100 --> 00:30:38,199
that<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> think it can be</font>

713
00:30:36,250 --> 00:30:40,120
solved<font color="#E5E5E5"> with a little bit smarter regular</font>

714
00:30:38,200 --> 00:30:41,799
expressions but<font color="#E5E5E5"> I've done my best to</font><font color="#CCCCCC"> try</font>

715
00:30:40,120 --> 00:30:44,168
<font color="#CCCCCC">to cut down</font><font color="#E5E5E5"> on that so much again</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a</font>

716
00:30:41,799 --> 00:30:45,760
good point though all right<font color="#CCCCCC"> I think I'm</font>

717
00:30:44,169 --> 00:30:49,250
at a time thanks everyone

718
00:30:45,760 --> 00:30:49,250
[Applause]

