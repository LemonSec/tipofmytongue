1
00:00:01,680 --> 00:00:04,530
foreign

2
00:00:04,530 --> 00:00:08,749
[Music]

3
00:00:14,880 --> 00:00:18,180
hello uh so my name is Luis fonse I work

4
00:00:18,180 --> 00:00:21,619
as a product security engineer at a bank

5
00:00:21,619 --> 00:00:24,480
and I've been working with GitHub action

6
00:00:24,480 --> 00:00:26,220
for a while and trying to secure some

7
00:00:26,220 --> 00:00:28,439
some GitHub actions for some companies

8
00:00:28,439 --> 00:00:30,480
and I've seen some

9
00:00:30,480 --> 00:00:33,480
common patterns let's say and bad

10
00:00:33,480 --> 00:00:35,460
designs that I want to bring some

11
00:00:35,460 --> 00:00:37,559
awareness of and that's basically what

12
00:00:37,559 --> 00:00:39,780
I'm going to do in this meeting in this

13
00:00:39,780 --> 00:00:41,760
presentation so first of all

14
00:00:41,760 --> 00:00:43,320
um I'm not going to be talking about

15
00:00:43,320 --> 00:00:45,780
things like cicd top 10 or something

16
00:00:45,780 --> 00:00:48,180
like that just common designs that I've

17
00:00:48,180 --> 00:00:50,820
seen everybody implementing that had

18
00:00:50,820 --> 00:00:52,980
some security implementations so I hope

19
00:00:52,980 --> 00:00:55,739
it can be helpful for you guys

20
00:00:55,739 --> 00:00:58,379
so first of all what is GitHub actions

21
00:00:58,379 --> 00:01:02,640
so it's basically a CI CD tool from

22
00:01:02,640 --> 00:01:05,459
GitHub where you can basically build

23
00:01:05,459 --> 00:01:08,400
deploy test your your code

24
00:01:08,400 --> 00:01:11,600
and it works basically like Jenkins or

25
00:01:11,600 --> 00:01:16,260
or a bit uh bit bucket and so on and

26
00:01:16,260 --> 00:01:18,119
um it has some nice features you

27
00:01:18,119 --> 00:01:20,280
basically create uh definitions on on

28
00:01:20,280 --> 00:01:22,799
the codes and it will run the CI for you

29
00:01:22,799 --> 00:01:25,080
but this brings also some some

30
00:01:25,080 --> 00:01:27,600
challenges mainly uh securing these

31
00:01:27,600 --> 00:01:29,580
these pipelines

32
00:01:29,580 --> 00:01:32,400
um so most of the things that I see are

33
00:01:32,400 --> 00:01:34,560
basically on the on the cd part so on

34
00:01:34,560 --> 00:01:37,020
the deployment and this is because you

35
00:01:37,020 --> 00:01:38,939
either need to to deploy for example to

36
00:01:38,939 --> 00:01:41,460
AWS or to Google cloud or something like

37
00:01:41,460 --> 00:01:43,439
that and you need to have some kind of

38
00:01:43,439 --> 00:01:46,280
permissions uh to to push your code

39
00:01:46,280 --> 00:01:51,420
either credentials um Runners with with

40
00:01:51,420 --> 00:01:53,939
whitelists and so on and there are a lot

41
00:01:53,939 --> 00:01:56,100
of things that can go wrong here so

42
00:01:56,100 --> 00:01:58,560
first of all you can basically uh

43
00:01:58,560 --> 00:02:00,180
somehow leverage the secrets on on

44
00:02:00,180 --> 00:02:01,799
GitHub

45
00:02:01,799 --> 00:02:03,600
um you can compromise the machines that

46
00:02:03,600 --> 00:02:05,159
do the deployment for you and from there

47
00:02:05,159 --> 00:02:07,680
you can do a lot of privilege escalation

48
00:02:07,680 --> 00:02:10,500
or lateral movements and I've seen for

49
00:02:10,500 --> 00:02:13,560
example a case where a user have a

50
00:02:13,560 --> 00:02:16,140
regular right access to a GitHub repo

51
00:02:16,140 --> 00:02:19,440
and it got from there to an AWS admin uh

52
00:02:19,440 --> 00:02:22,020
so that's that's how bad that can go and

53
00:02:22,020 --> 00:02:24,599
let's hope that we don't see a lot of

54
00:02:24,599 --> 00:02:28,080
those but it can go that way so um

55
00:02:28,080 --> 00:02:31,440
first of all the most important part is

56
00:02:31,440 --> 00:02:33,420
to understand how GitHub actions work

57
00:02:33,420 --> 00:02:35,220
right so

58
00:02:35,220 --> 00:02:38,580
as long as you have right permissions to

59
00:02:38,580 --> 00:02:41,220
a repository you can basically run the

60
00:02:41,220 --> 00:02:43,319
the pipelines the the actions itself or

61
00:02:43,319 --> 00:02:45,599
the workflows and you can basically

62
00:02:45,599 --> 00:02:47,160
change them as you want and do whatever

63
00:02:47,160 --> 00:02:49,560
you want with them so

64
00:02:49,560 --> 00:02:50,220
um

65
00:02:50,220 --> 00:02:52,680
let me let me show you how you can break

66
00:02:52,680 --> 00:02:54,780
with with all of those things

67
00:02:54,780 --> 00:02:57,599
so first of all um

68
00:02:57,599 --> 00:03:00,480
GitHub has a thing called secrets and

69
00:03:00,480 --> 00:03:02,700
it's basically supposed for you to to

70
00:03:02,700 --> 00:03:04,500
store your your passwords your

71
00:03:04,500 --> 00:03:06,180
credentials there so that you don't hard

72
00:03:06,180 --> 00:03:08,160
code them in the code but the name can

73
00:03:08,160 --> 00:03:11,340
be misleading right so when you actually

74
00:03:11,340 --> 00:03:13,680
have a secret you can extract that

75
00:03:13,680 --> 00:03:15,840
secret you can dump it and although you

76
00:03:15,840 --> 00:03:17,940
cannot do it from the UI it gives you a

77
00:03:17,940 --> 00:03:19,739
false sense of security because if you

78
00:03:19,739 --> 00:03:22,500
can actually control the action or the

79
00:03:22,500 --> 00:03:24,000
workflow and for that you only need

80
00:03:24,000 --> 00:03:25,800
right permissions you can basically

81
00:03:25,800 --> 00:03:28,620
extract any secret configured in a repo

82
00:03:28,620 --> 00:03:31,200
or in an organization so that's that's

83
00:03:31,200 --> 00:03:33,780
mainly the the first thing that that you

84
00:03:33,780 --> 00:03:37,140
see failing so a lot of companies create

85
00:03:37,140 --> 00:03:39,780
secrets and store them most of them even

86
00:03:39,780 --> 00:03:42,360
in organization level and you can just

87
00:03:42,360 --> 00:03:44,400
create a random repository with no

88
00:03:44,400 --> 00:03:46,739
permissions you create an action and you

89
00:03:46,739 --> 00:03:48,720
have access to all the organization

90
00:03:48,720 --> 00:03:50,459
sequence and it's just dumping all of

91
00:03:50,459 --> 00:03:52,920
them quite easily so in this image you

92
00:03:52,920 --> 00:03:54,840
have a definition of a workflow at the

93
00:03:54,840 --> 00:03:56,940
left and at the right you have the Run

94
00:03:56,940 --> 00:03:59,280
of that workflow and basically as you

95
00:03:59,280 --> 00:04:01,799
can see if you try to do an echo of a

96
00:04:01,799 --> 00:04:03,959
secret on GitHub uh GitHub will

97
00:04:03,959 --> 00:04:06,900
automatically hide the secret from you

98
00:04:06,900 --> 00:04:08,459
in the output

99
00:04:08,459 --> 00:04:10,739
the issue with this is that GitHub is

100
00:04:10,739 --> 00:04:13,439
basically doing a fine search and

101
00:04:13,439 --> 00:04:16,260
replace so if you have a secret with a

102
00:04:16,260 --> 00:04:18,540
value test and if you have a test in the

103
00:04:18,540 --> 00:04:21,238
output GitHub will filter that word test

104
00:04:21,238 --> 00:04:23,340
so if you start doing things like

105
00:04:23,340 --> 00:04:26,520
basically for encoding it or print a

106
00:04:26,520 --> 00:04:28,560
character in the space a character a

107
00:04:28,560 --> 00:04:30,720
space or just a character per line you

108
00:04:30,720 --> 00:04:32,699
can easily dump a secret obviously you

109
00:04:32,699 --> 00:04:34,199
can do things much more complex like

110
00:04:34,199 --> 00:04:36,600
doing requests to external web servers

111
00:04:36,600 --> 00:04:39,479
to send the secrets but basically as as

112
00:04:39,479 --> 00:04:41,280
long as you don't print the secret as is

113
00:04:41,280 --> 00:04:43,620
you can basically uh print it in the

114
00:04:43,620 --> 00:04:45,000
output

115
00:04:45,000 --> 00:04:46,800
um and this is where it all starts right

116
00:04:46,800 --> 00:04:48,960
so most of things are secured with

117
00:04:48,960 --> 00:04:52,139
Secrets still and you can start dumping

118
00:04:52,139 --> 00:04:54,540
them quite easily again

119
00:04:54,540 --> 00:04:56,160
you just need the right access to the

120
00:04:56,160 --> 00:05:00,120
repo uh Branch protections don't work uh

121
00:05:00,120 --> 00:05:02,340
because as soon as you create a new repo

122
00:05:02,340 --> 00:05:04,800
you can control the workflow and you can

123
00:05:04,800 --> 00:05:07,020
change the entire workflow and put that

124
00:05:07,020 --> 00:05:08,580
whatever you want and your version of

125
00:05:08,580 --> 00:05:10,919
the workflow will run even before it's

126
00:05:10,919 --> 00:05:12,780
merged to the default Branch to master

127
00:05:12,780 --> 00:05:15,300
your Dev or wherever is the default

128
00:05:15,300 --> 00:05:17,699
Branch so this is one of the most common

129
00:05:17,699 --> 00:05:20,280
things usually one of the most dangerous

130
00:05:20,280 --> 00:05:22,259
as well

131
00:05:22,259 --> 00:05:24,660
so still on secret uh when you run the

132
00:05:24,660 --> 00:05:26,699
workflow GitHub generates automatically

133
00:05:26,699 --> 00:05:29,400
for you uh a secret called GitHub token

134
00:05:29,400 --> 00:05:32,160
and this is a femoral so it only lasts

135
00:05:32,160 --> 00:05:34,500
as long as your your action is running

136
00:05:34,500 --> 00:05:38,100
so um the thing about this token is that

137
00:05:38,100 --> 00:05:40,440
it has basically by default uh write

138
00:05:40,440 --> 00:05:42,720
permissions to the repository that

139
00:05:42,720 --> 00:05:44,340
you're working on so you can basically

140
00:05:44,340 --> 00:05:48,000
call the API and do operations on on the

141
00:05:48,000 --> 00:05:50,580
repo level so for example here

142
00:05:50,580 --> 00:05:52,020
uh

143
00:05:52,020 --> 00:05:54,000
you have Oh I thought I thought then I

144
00:05:54,000 --> 00:05:56,759
have an example but here you can see uh

145
00:05:56,759 --> 00:05:58,320
the default permissions on the workflow

146
00:05:58,320 --> 00:06:00,479
which has read and write permissions and

147
00:06:00,479 --> 00:06:04,139
you can also uh uh have the token to you

148
00:06:04,139 --> 00:06:06,419
the token can also be used to to approve

149
00:06:06,419 --> 00:06:09,360
PR so uh there was a security issue

150
00:06:09,360 --> 00:06:12,660
reported uh while ago where

151
00:06:12,660 --> 00:06:15,479
um Branch protections that had like a

152
00:06:15,479 --> 00:06:18,720
minimal one approval for merging PRS

153
00:06:18,720 --> 00:06:20,699
could basically bypass that by using the

154
00:06:20,699 --> 00:06:22,740
GitHub token to to approve the pr and

155
00:06:22,740 --> 00:06:24,300
merge it

156
00:06:24,300 --> 00:06:26,520
so obviously you can also leverage this

157
00:06:26,520 --> 00:06:29,400
token to do malicious things

158
00:06:29,400 --> 00:06:31,199
it's it shouldn't be that necessary

159
00:06:31,199 --> 00:06:32,819
because if you have right permissions to

160
00:06:32,819 --> 00:06:35,160
the repo by default you don't need to

161
00:06:35,160 --> 00:06:37,740
use this token but this gets more

162
00:06:37,740 --> 00:06:40,020
interesting when when you start using

163
00:06:40,020 --> 00:06:42,600
third-party actions right so basically

164
00:06:42,600 --> 00:06:45,240
an action it's it's can be compared like

165
00:06:45,240 --> 00:06:47,340
a library in a piece of code so it's

166
00:06:47,340 --> 00:06:49,139
something that you import to do a

167
00:06:49,139 --> 00:06:53,220
generic task or a common task and you

168
00:06:53,220 --> 00:06:55,380
can send that GitHub token to to the

169
00:06:55,380 --> 00:06:57,180
action to to do something for you for

170
00:06:57,180 --> 00:07:00,000
example in this case we have a a

171
00:07:00,000 --> 00:07:02,759
creation of a release in GitHub and you

172
00:07:02,759 --> 00:07:04,860
need to to send the GitHub token for it

173
00:07:04,860 --> 00:07:07,080
to be able to to call the API and do the

174
00:07:07,080 --> 00:07:08,280
release process

175
00:07:08,280 --> 00:07:10,199
so by default when you're actually

176
00:07:10,199 --> 00:07:12,479
sending this GitHub token to the to the

177
00:07:12,479 --> 00:07:14,880
action it will inherit all the the right

178
00:07:14,880 --> 00:07:17,699
permissions that the token has right

179
00:07:17,699 --> 00:07:19,500
um what can go wrong with with this is

180
00:07:19,500 --> 00:07:20,819
that you don't know what the action is

181
00:07:20,819 --> 00:07:22,979
doing and for example in this case you

182
00:07:22,979 --> 00:07:25,800
you just have the the action tag to

183
00:07:25,800 --> 00:07:28,139
version three but you can have multiple

184
00:07:28,139 --> 00:07:32,340
version threes and the one lay the

185
00:07:32,340 --> 00:07:33,900
latest one can do something that you're

186
00:07:33,900 --> 00:07:35,759
not expecting for example and leveraging

187
00:07:35,759 --> 00:07:37,560
that token for for something that it's

188
00:07:37,560 --> 00:07:39,720
not supposed to so it's really hard to

189
00:07:39,720 --> 00:07:41,160
control

190
00:07:41,160 --> 00:07:41,880
um

191
00:07:41,880 --> 00:07:43,800
what what the what the action is

192
00:07:43,800 --> 00:07:45,120
actually doing

193
00:07:45,120 --> 00:07:48,240
um unless you you for example pin it to

194
00:07:48,240 --> 00:07:50,280
the commit to the committee and you

195
00:07:50,280 --> 00:07:51,960
review that that got me to make sure

196
00:07:51,960 --> 00:07:53,400
it's safe

197
00:07:53,400 --> 00:07:55,319
um so one thing that you should do with

198
00:07:55,319 --> 00:07:57,900
with with this so whenever you're you're

199
00:07:57,900 --> 00:08:00,240
sending GitHub tokens to to third-party

200
00:08:00,240 --> 00:08:01,680
actions

201
00:08:01,680 --> 00:08:03,660
um you should always make sure that you

202
00:08:03,660 --> 00:08:05,819
specify which permissions the token can

203
00:08:05,819 --> 00:08:08,819
can have so there's a there's an option

204
00:08:08,819 --> 00:08:10,800
on the workflows where you can say this

205
00:08:10,800 --> 00:08:13,319
token will only have read permissions to

206
00:08:13,319 --> 00:08:16,199
to the repo for example and uh you

207
00:08:16,199 --> 00:08:18,900
should trim it down to to the basically

208
00:08:18,900 --> 00:08:21,419
Essentials of what the the action needs

209
00:08:21,419 --> 00:08:23,460
to to use the token for

210
00:08:23,460 --> 00:08:25,680
uh I've seen I've also seen some some

211
00:08:25,680 --> 00:08:27,720
common issues with the guitar tokens on

212
00:08:27,720 --> 00:08:30,840
on malicious third-party actions that um

213
00:08:30,840 --> 00:08:32,880
Leverage The the token permissions for

214
00:08:32,880 --> 00:08:36,899
things that shouldn't be uh using it

215
00:08:36,899 --> 00:08:38,520
okay

216
00:08:38,520 --> 00:08:40,979
um in in this case uh we have an example

217
00:08:40,979 --> 00:08:42,958
of running the

218
00:08:42,958 --> 00:08:44,760
our workflow in your own Branch as I

219
00:08:44,760 --> 00:08:47,420
said before so let's say that you have

220
00:08:47,420 --> 00:08:51,120
branching policies uh branching rules in

221
00:08:51,120 --> 00:08:54,360
place so that you need let's say two two

222
00:08:54,360 --> 00:08:56,160
reviews to merge to master for example

223
00:08:56,160 --> 00:08:58,920
and you have an entire workflow to push

224
00:08:58,920 --> 00:09:02,519
to to production let's say and you're

225
00:09:02,519 --> 00:09:04,019
quite confident that you have a secret

226
00:09:04,019 --> 00:09:06,899
there and can't be dumped because uh you

227
00:09:06,899 --> 00:09:09,540
need you need to two approvals to

228
00:09:09,540 --> 00:09:11,880
actually merge the code so that's that's

229
00:09:11,880 --> 00:09:14,399
not what happens and this is a a big

230
00:09:14,399 --> 00:09:17,820
misconception and there there are a lot

231
00:09:17,820 --> 00:09:19,740
of security issues also around this

232
00:09:19,740 --> 00:09:22,440
because people don't understand that you

233
00:09:22,440 --> 00:09:24,360
can create your own branch and just

234
00:09:24,360 --> 00:09:26,399
change the workflow and run your version

235
00:09:26,399 --> 00:09:28,800
of the workflow even before being

236
00:09:28,800 --> 00:09:31,380
approved so approvals mean nothing code

237
00:09:31,380 --> 00:09:34,200
owners don't do anything either so the

238
00:09:34,200 --> 00:09:36,180
the workflows can always be controlled

239
00:09:36,180 --> 00:09:38,640
by anybody with with right access to the

240
00:09:38,640 --> 00:09:40,980
to the repo so here the same thing so

241
00:09:40,980 --> 00:09:42,660
you have on the on the left side an

242
00:09:42,660 --> 00:09:45,779
example of a change on on my own branch

243
00:09:45,779 --> 00:09:47,760
and on the right you can see that the

244
00:09:47,760 --> 00:09:51,800
changes that I did run and took effect

245
00:09:53,580 --> 00:09:56,279
so another cool thing is the workflow

246
00:09:56,279 --> 00:09:58,140
dispatch tag so this is something that

247
00:09:58,140 --> 00:10:00,000
you specify on on the workflows and

248
00:10:00,000 --> 00:10:01,680
basically mean that as soon as you add

249
00:10:01,680 --> 00:10:04,200
this you can run the workflow from the

250
00:10:04,200 --> 00:10:06,540
UI so by default you run workflows on

251
00:10:06,540 --> 00:10:08,459
trigger events like when I do a push

252
00:10:08,459 --> 00:10:11,760
when I do a PR on this case you can

253
00:10:11,760 --> 00:10:14,940
basically manually invoke a workflow and

254
00:10:14,940 --> 00:10:17,220
you can even specify user input if you

255
00:10:17,220 --> 00:10:19,880
want to earn it and usually there's also

256
00:10:19,880 --> 00:10:22,860
a common injection here when you when

257
00:10:22,860 --> 00:10:25,260
you ask for inputs because they almost

258
00:10:25,260 --> 00:10:28,740
always end up in in a shell script

259
00:10:28,740 --> 00:10:31,260
but yeah so a thing about the workflow

260
00:10:31,260 --> 00:10:32,880
dispatch is that you can run the

261
00:10:32,880 --> 00:10:34,920
workflow dispatch also from any branch

262
00:10:34,920 --> 00:10:37,980
that you want and uh a lot of times when

263
00:10:37,980 --> 00:10:40,980
developers add this this workflow uh

264
00:10:40,980 --> 00:10:42,720
Dispatch they don't have that in into

265
00:10:42,720 --> 00:10:45,000
account so you can basically go to the

266
00:10:45,000 --> 00:10:47,700
UI run a workflow on your own branch and

267
00:10:47,700 --> 00:10:49,860
for example deploy a malicious version

268
00:10:49,860 --> 00:10:51,720
of your code

269
00:10:51,720 --> 00:10:55,800
another another issue with that is that

270
00:10:55,800 --> 00:10:59,300
um I don't know if you can see it here

271
00:10:59,300 --> 00:11:04,620
uh nope but basically

272
00:11:04,620 --> 00:11:05,880
uh

273
00:11:05,880 --> 00:11:07,740
let me

274
00:11:07,740 --> 00:11:09,180
uh

275
00:11:09,180 --> 00:11:11,700
yeah so I think I have a line there so

276
00:11:11,700 --> 00:11:13,440
when when you create this you need to

277
00:11:13,440 --> 00:11:16,320
actually push this master to be

278
00:11:16,320 --> 00:11:19,500
um you need to push a version a code or

279
00:11:19,500 --> 00:11:22,019
a version of the code with a workflow

280
00:11:22,019 --> 00:11:23,640
dispatch to master to actually show up

281
00:11:23,640 --> 00:11:26,279
in the UI so if you don't have this in

282
00:11:26,279 --> 00:11:28,260
the master Branch the first time you

283
00:11:28,260 --> 00:11:30,000
don't have this option but as soon as

284
00:11:30,000 --> 00:11:32,220
you put this option on on the main

285
00:11:32,220 --> 00:11:34,140
branch it will show up in UI and you can

286
00:11:34,140 --> 00:11:38,040
basically call the the workflow from

287
00:11:38,040 --> 00:11:41,700
from any from any branch so all all of

288
00:11:41,700 --> 00:11:44,339
these issues are can can happen because

289
00:11:44,339 --> 00:11:46,320
when you work on an organization You're

290
00:11:46,320 --> 00:11:49,320
Expecting to have some segregation all

291
00:11:49,320 --> 00:11:51,720
right and some some restrictions about

292
00:11:51,720 --> 00:11:53,940
permission so if if I have a team

293
00:11:53,940 --> 00:11:56,940
working with repo a b and c I I don't

294
00:11:56,940 --> 00:12:00,300
want them to have access to 2D and E for

295
00:12:00,300 --> 00:12:02,040
example right because they shouldn't

296
00:12:02,040 --> 00:12:03,660
have access to things they don't need to

297
00:12:03,660 --> 00:12:07,140
do their work and when when you start

298
00:12:07,140 --> 00:12:08,940
um thinking about all of these things

299
00:12:08,940 --> 00:12:10,920
and and The Insider thread risk that you

300
00:12:10,920 --> 00:12:14,220
have here most of the times companies a

301
00:12:14,220 --> 00:12:15,600
member inside the company can leverage

302
00:12:15,600 --> 00:12:17,820
all of these permissions and basically

303
00:12:17,820 --> 00:12:19,680
take down a lot of things that they they

304
00:12:19,680 --> 00:12:22,500
should not have access

305
00:12:22,500 --> 00:12:25,940
okay another cool thing and that GitHub

306
00:12:25,940 --> 00:12:28,680
implemented and it's somehow trying to

307
00:12:28,680 --> 00:12:31,320
to help with the secrets it's the the

308
00:12:31,320 --> 00:12:33,660
concept of environment so environments

309
00:12:33,660 --> 00:12:35,940
allow you to Define like a set of rules

310
00:12:35,940 --> 00:12:38,760
like you can say that a workflow will

311
00:12:38,760 --> 00:12:40,019
only run

312
00:12:40,019 --> 00:12:42,660
um on this specific Branch or for this

313
00:12:42,660 --> 00:12:44,639
workflow to run I need two approvals

314
00:12:44,639 --> 00:12:46,440
from x y and z

315
00:12:46,440 --> 00:12:49,079
so that's interesting but the thing is

316
00:12:49,079 --> 00:12:52,320
that you define which environments are

317
00:12:52,320 --> 00:12:53,940
associated to the workflows in the

318
00:12:53,940 --> 00:12:57,480
workflow file so if you own the workflow

319
00:12:57,480 --> 00:12:59,700
file right you can just remove the the

320
00:12:59,700 --> 00:13:03,000
environment tag and it's game over so

321
00:13:03,000 --> 00:13:06,120
although environments work and you have

322
00:13:06,120 --> 00:13:07,560
you have to be careful with that because

323
00:13:07,560 --> 00:13:10,260
a cool thing also about environments is

324
00:13:10,260 --> 00:13:12,420
that you can store secrets in

325
00:13:12,420 --> 00:13:14,220
environment so instead of having Secrets

326
00:13:14,220 --> 00:13:16,320
associated with the repo you can

327
00:13:16,320 --> 00:13:18,420
associate them with the environment and

328
00:13:18,420 --> 00:13:20,220
they are only injected in your workflow

329
00:13:20,220 --> 00:13:21,959
if all the conditions in the environment

330
00:13:21,959 --> 00:13:25,200
pass so let's say that I have a password

331
00:13:25,200 --> 00:13:27,839
to deploy to AWS obviously you shouldn't

332
00:13:27,839 --> 00:13:30,540
do this way but let's say you have

333
00:13:30,540 --> 00:13:33,600
um on on an environment unless the

334
00:13:33,600 --> 00:13:34,980
environment passes like with two

335
00:13:34,980 --> 00:13:36,720
approvals and it's running from the main

336
00:13:36,720 --> 00:13:39,120
branch the that secret will never be

337
00:13:39,120 --> 00:13:41,880
injected into the into the workflow so

338
00:13:41,880 --> 00:13:43,680
for environments to actually work you

339
00:13:43,680 --> 00:13:45,180
need to have secrets and those Secrets

340
00:13:45,180 --> 00:13:47,639
need to do something uh interesting

341
00:13:47,639 --> 00:13:49,320
otherwise you can just remove the tag

342
00:13:49,320 --> 00:13:51,779
and you bypass all the all the features

343
00:13:51,779 --> 00:13:53,760
of environments and it's also a common

344
00:13:53,760 --> 00:13:55,139
misconception that people add

345
00:13:55,139 --> 00:13:56,880
environments with approvals and you just

346
00:13:56,880 --> 00:14:00,540
go to the workflow and just remove it

347
00:14:00,540 --> 00:14:04,079
so another nice thing and because I

348
00:14:04,079 --> 00:14:05,399
think I think I made my point that

349
00:14:05,399 --> 00:14:08,399
secrets are are hard to to manage on on

350
00:14:08,399 --> 00:14:11,100
GitHub another thing is to use cell full

351
00:14:11,100 --> 00:14:13,440
set Runner so by default when you run a

352
00:14:13,440 --> 00:14:16,560
workflow it runs on on a container on

353
00:14:16,560 --> 00:14:19,740
controlled by by GitHub right so they

354
00:14:19,740 --> 00:14:22,320
have a this container is called Runner

355
00:14:22,320 --> 00:14:24,120
by the way so you have a concept there

356
00:14:24,120 --> 00:14:26,579
that is cell phones Runners and

357
00:14:26,579 --> 00:14:28,980
basically you can configure your own

358
00:14:28,980 --> 00:14:32,100
machine anywhere to run the the workflow

359
00:14:32,100 --> 00:14:34,040
for you so for example if you configure

360
00:14:34,040 --> 00:14:38,279
an an ec2 or some container on AWS it's

361
00:14:38,279 --> 00:14:41,760
much cheaper than being running a a

362
00:14:41,760 --> 00:14:44,040
runner on on GitHub so that's mainly the

363
00:14:44,040 --> 00:14:46,079
main motivation to use cell phones

364
00:14:46,079 --> 00:14:48,300
Runners most of the times but they have

365
00:14:48,300 --> 00:14:50,459
some some cool advantages as well so

366
00:14:50,459 --> 00:14:52,199
when you're using a self-hosted runner

367
00:14:52,199 --> 00:14:55,019
you don't need to to have secrets on

368
00:14:55,019 --> 00:14:56,940
GitHub because if you have a cell phone

369
00:14:56,940 --> 00:14:58,980
server for example in AWS you can

370
00:14:58,980 --> 00:15:00,899
leverage that and just

371
00:15:00,899 --> 00:15:02,940
use the permissions that your Runner has

372
00:15:02,940 --> 00:15:05,100
inside the AWS to do wherever you need

373
00:15:05,100 --> 00:15:07,380
to but this also comes with some

374
00:15:07,380 --> 00:15:09,240
challenges so if you do this you

375
00:15:09,240 --> 00:15:10,620
basically have a back door to your

376
00:15:10,620 --> 00:15:13,260
systems right so uh if I control the

377
00:15:13,260 --> 00:15:14,880
workflow and I can run whatever I want

378
00:15:14,880 --> 00:15:16,980
in my workflow I can basically control

379
00:15:16,980 --> 00:15:18,720
the the cell phone server Runner which

380
00:15:18,720 --> 00:15:21,899
can be a huge risk as well so there are

381
00:15:21,899 --> 00:15:23,519
some pros and cons on on using cell

382
00:15:23,519 --> 00:15:25,019
phone surrounders you need to make sure

383
00:15:25,019 --> 00:15:26,760
if you use one you need to make sure

384
00:15:26,760 --> 00:15:28,980
that you lock them down pretty pretty

385
00:15:28,980 --> 00:15:31,019
well otherwise you'll have some issues

386
00:15:31,019 --> 00:15:34,199
the cool thing is that when you when you

387
00:15:34,199 --> 00:15:35,579
configure yourself with a runner it's

388
00:15:35,579 --> 00:15:37,760
the cell phone surrender that

389
00:15:37,760 --> 00:15:40,139
connects to GitHub and not the other way

390
00:15:40,139 --> 00:15:41,880
around so that's why you don't need any

391
00:15:41,880 --> 00:15:44,240
kind of permissions on GitHub so even

392
00:15:44,240 --> 00:15:47,940
admin users don't control the runner by

393
00:15:47,940 --> 00:15:51,300
itself just from the workflows

394
00:15:51,300 --> 00:15:54,480
so having seen all of this uh let's see

395
00:15:54,480 --> 00:15:57,240
some ways of of actually exploiting

396
00:15:57,240 --> 00:16:00,660
GitHub actions and try to be silent

397
00:16:00,660 --> 00:16:02,639
um so that you you don't get caught and

398
00:16:02,639 --> 00:16:04,920
nobody sees what you're doing so

399
00:16:04,920 --> 00:16:07,500
obviously there are tons of ways and the

400
00:16:07,500 --> 00:16:10,500
imagination is the limit right but there

401
00:16:10,500 --> 00:16:13,019
are some some interesting things of what

402
00:16:13,019 --> 00:16:15,839
you can do to hide your tracks so in

403
00:16:15,839 --> 00:16:17,160
this case

404
00:16:17,160 --> 00:16:18,720
um you can see that I just run a

405
00:16:18,720 --> 00:16:21,300
workflow and for each step in a workflow

406
00:16:21,300 --> 00:16:23,459
GitHub prints what it's going to do so

407
00:16:23,459 --> 00:16:26,820
in this case I'm pushing a version of an

408
00:16:26,820 --> 00:16:29,279
extension that I have and you can see

409
00:16:29,279 --> 00:16:31,380
basically all the code that it's being

410
00:16:31,380 --> 00:16:33,120
run on the on the workflow so if you

411
00:16:33,120 --> 00:16:34,860
change a workflow and add some malicious

412
00:16:34,860 --> 00:16:37,459
code there it will be printed

413
00:16:37,459 --> 00:16:40,800
as as the output of the step so what

414
00:16:40,800 --> 00:16:43,560
what you can do is that you can find for

415
00:16:43,560 --> 00:16:45,839
example a workflow that is calling an

416
00:16:45,839 --> 00:16:47,100
external script

417
00:16:47,100 --> 00:16:48,839
and you can change the external script

418
00:16:48,839 --> 00:16:51,600
so you create your own branch you change

419
00:16:51,600 --> 00:16:53,699
that script and you don't see anything

420
00:16:53,699 --> 00:16:55,320
in the logs because if you if you're

421
00:16:55,320 --> 00:16:57,240
just calling a script from the workflow

422
00:16:57,240 --> 00:16:59,040
what you see in the output is that you

423
00:16:59,040 --> 00:17:00,300
call the script you don't see the

424
00:17:00,300 --> 00:17:03,120
content of the script right so and you

425
00:17:03,120 --> 00:17:04,559
can start from there and you can create

426
00:17:04,559 --> 00:17:06,720
even more complex things so for example

427
00:17:06,720 --> 00:17:10,439
in this case uh this is yeah a little

428
00:17:10,439 --> 00:17:13,439
bit complex uh for for trying to to be

429
00:17:13,439 --> 00:17:15,240
quiet but the idea is that you have an

430
00:17:15,240 --> 00:17:18,179
external server and you find a workflow

431
00:17:18,179 --> 00:17:20,760
that is calling a batch script or

432
00:17:20,760 --> 00:17:22,619
something and you create your own Branch

433
00:17:22,619 --> 00:17:25,740
you change the the best script you add

434
00:17:25,740 --> 00:17:28,260
your logic for example to to retrieve

435
00:17:28,260 --> 00:17:30,000
some malicious code from a server and

436
00:17:30,000 --> 00:17:31,740
after retrieving it you shut down the

437
00:17:31,740 --> 00:17:33,179
server so nobody else can do the same

438
00:17:33,179 --> 00:17:35,039
request and get the same code

439
00:17:35,039 --> 00:17:37,620
and uh you basically run your your

440
00:17:37,620 --> 00:17:39,960
script and you shut down the server and

441
00:17:39,960 --> 00:17:42,539
you delete the branch so from there it

442
00:17:42,539 --> 00:17:44,220
will be really hard to try to understand

443
00:17:44,220 --> 00:17:46,440
what you did uh because you basically

444
00:17:46,440 --> 00:17:48,960
deleted the branch with with the changes

445
00:17:48,960 --> 00:17:51,539
on your script so it's it's not easy to

446
00:17:51,539 --> 00:17:53,760
find these kinds of this kind of actions

447
00:17:53,760 --> 00:17:56,640
and uh that's why you should always try

448
00:17:56,640 --> 00:17:59,220
to limit the GitHub actions as best as

449
00:17:59,220 --> 00:18:00,240
possible

450
00:18:00,240 --> 00:18:05,400
and I have some tips for that as well so

451
00:18:05,400 --> 00:18:07,080
first of all as I said before it's

452
00:18:07,080 --> 00:18:08,580
securing the GitHub token so you can

453
00:18:08,580 --> 00:18:11,220
basically specify the permissions that

454
00:18:11,220 --> 00:18:13,440
GitHub token will have so when you're

455
00:18:13,440 --> 00:18:16,980
sending it to a third-party action uh

456
00:18:16,980 --> 00:18:20,880
they they cannot abuse that much of your

457
00:18:20,880 --> 00:18:21,960
token

458
00:18:21,960 --> 00:18:24,120
so another cool one

459
00:18:24,120 --> 00:18:27,720
um is to is to specify which actions you

460
00:18:27,720 --> 00:18:30,059
you allow to be run on your organization

461
00:18:30,059 --> 00:18:33,720
on or you're on your own ripples uh if

462
00:18:33,720 --> 00:18:35,039
you're doing this on your own ripples

463
00:18:35,039 --> 00:18:38,340
it's not that that important because uh

464
00:18:38,340 --> 00:18:39,840
probably nobody else will control them

465
00:18:39,840 --> 00:18:42,419
right uh but when you're when we're

466
00:18:42,419 --> 00:18:44,700
talking about organizations anybody can

467
00:18:44,700 --> 00:18:48,240
just use any any third-party action and

468
00:18:48,240 --> 00:18:50,039
there can be a lot of issues with that

469
00:18:50,039 --> 00:18:52,679
so you should try to restrict which

470
00:18:52,679 --> 00:18:54,660
actions can be run and you can even pin

471
00:18:54,660 --> 00:18:57,240
them to specific commit ashes which is

472
00:18:57,240 --> 00:18:59,039
the The best scenario here because you

473
00:18:59,039 --> 00:19:01,799
can review those specific comments and

474
00:19:01,799 --> 00:19:04,140
make sure there are no issues if you pin

475
00:19:04,140 --> 00:19:06,179
them for a version uh I don't know if

476
00:19:06,179 --> 00:19:07,559
you guys try this but you can just

477
00:19:07,559 --> 00:19:09,240
delete the version that you created on

478
00:19:09,240 --> 00:19:11,160
GitHub and create the exactly same

479
00:19:11,160 --> 00:19:13,679
version with different codes so it's not

480
00:19:13,679 --> 00:19:15,660
that worth it

481
00:19:15,660 --> 00:19:17,539
okay

482
00:19:17,539 --> 00:19:20,640
another one and I I cover that one as

483
00:19:20,640 --> 00:19:23,100
well it's disabling the the pr approvals

484
00:19:23,100 --> 00:19:25,559
permissions from the GitHub a lot of

485
00:19:25,559 --> 00:19:28,380
companies have like one approval two uh

486
00:19:28,380 --> 00:19:30,120
if it's just one it's critical because

487
00:19:30,120 --> 00:19:31,919
you can basically bypass and merge to

488
00:19:31,919 --> 00:19:34,020
master wherever you want

489
00:19:34,020 --> 00:19:36,179
and that's basically it because I don't

490
00:19:36,179 --> 00:19:40,820
have more time as well so questions

491
00:19:45,200 --> 00:19:49,200
thank you Luis any any question for Luis

492
00:19:49,200 --> 00:19:52,880
we have before our break

493
00:19:53,460 --> 00:19:56,299
anyone

494
00:19:57,000 --> 00:20:00,000
okay thank you that was easy thank you

495
00:20:00,000 --> 00:20:02,600
thank you all

496
00:20:09,770 --> 00:20:14,109
[Music]

