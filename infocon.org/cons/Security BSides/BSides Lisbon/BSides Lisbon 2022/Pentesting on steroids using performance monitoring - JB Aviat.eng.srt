1
00:00:01,680 --> 00:00:04,600
foreign

2
00:00:04,600 --> 00:00:10,910
[Applause]

3
00:00:13,490 --> 00:00:16,400
[Music]

4
00:00:16,400 --> 00:00:20,400
testing and how we can Bridge it with an

5
00:00:20,400 --> 00:00:22,859
observability and performance monitoring

6
00:00:22,859 --> 00:00:26,100
which is not like an object but we'll

7
00:00:26,100 --> 00:00:27,660
see how we can do fun things with that

8
00:00:27,660 --> 00:00:31,080
just to worry about me so I'm working as

9
00:00:31,080 --> 00:00:33,860
a abstract engineer at data dog

10
00:00:33,860 --> 00:00:37,020
I will CTO and co-founder at screen so

11
00:00:37,020 --> 00:00:40,079
we built application security from

12
00:00:40,079 --> 00:00:42,120
within applications we go to Korean by

13
00:00:42,120 --> 00:00:45,840
data log in 2021st previously I worked

14
00:00:45,840 --> 00:00:48,120
at the at Apple in the in the red team

15
00:00:48,120 --> 00:00:50,660
and even before I was I was a pen tester

16
00:00:50,660 --> 00:00:54,780
you can find me on Twitter via email and

17
00:00:54,780 --> 00:00:56,760
really open to questions but we'll have

18
00:00:56,760 --> 00:00:58,980
some time for that in the end and we

19
00:00:58,980 --> 00:01:01,260
have a good data Booth right there so

20
00:01:01,260 --> 00:01:03,600
feel free to step by and and say hi to

21
00:01:03,600 --> 00:01:05,400
me on the or to the watching

22
00:01:05,400 --> 00:01:09,299
so first question what is performance

23
00:01:09,299 --> 00:01:11,040
monitoring

24
00:01:11,040 --> 00:01:12,540
sounds like a silly question right

25
00:01:12,540 --> 00:01:14,520
pretty pretty obvious

26
00:01:14,520 --> 00:01:18,659
but actually is the right question no no

27
00:01:18,659 --> 00:01:20,659
the real question is what is

28
00:01:20,659 --> 00:01:23,280
observability right so performance

29
00:01:23,280 --> 00:01:26,000
monitoring is one part of observability

30
00:01:26,000 --> 00:01:31,020
that's the art or science to understand

31
00:01:31,020 --> 00:01:33,840
when you are running a production when

32
00:01:33,840 --> 00:01:35,939
you have servers

33
00:01:35,939 --> 00:01:37,560
um when you have Services talking

34
00:01:37,560 --> 00:01:41,220
together is the art to understand how

35
00:01:41,220 --> 00:01:43,560
the system is behaving is it doing well

36
00:01:43,560 --> 00:01:47,880
is it feeling unwell do you have bugs do

37
00:01:47,880 --> 00:01:49,979
we have good performance are the

38
00:01:49,979 --> 00:01:53,100
customers happy if we have a bug how can

39
00:01:53,100 --> 00:01:56,280
we troubleshoot it that's what

40
00:01:56,280 --> 00:01:58,140
performance monitoring and observability

41
00:01:58,140 --> 00:02:00,720
is about so it has little to do with

42
00:02:00,720 --> 00:02:03,119
security right you might say

43
00:02:03,119 --> 00:02:05,219
availability is a part of security you

44
00:02:05,219 --> 00:02:06,840
would be right

45
00:02:06,840 --> 00:02:09,739
so yes a little bit but beside that

46
00:02:09,739 --> 00:02:13,140
traditionally not so much but things are

47
00:02:13,140 --> 00:02:14,400
changing

48
00:02:14,400 --> 00:02:15,660
we

49
00:02:15,660 --> 00:02:20,040
as a as an industry as researchers as

50
00:02:20,040 --> 00:02:21,959
practitioners are starting to understand

51
00:02:21,959 --> 00:02:24,360
that there is a bridge to be done

52
00:02:24,360 --> 00:02:26,760
between observability and security and

53
00:02:26,760 --> 00:02:28,140
so

54
00:02:28,140 --> 00:02:30,540
um this bridge is starting to become a

55
00:02:30,540 --> 00:02:32,940
reality in a lot of defensive

56
00:02:32,940 --> 00:02:35,400
applications

57
00:02:35,400 --> 00:02:37,800
and now I'm gonna talk about

58
00:02:37,800 --> 00:02:39,780
how we can apply it to offensive

59
00:02:39,780 --> 00:02:41,280
applications

60
00:02:41,280 --> 00:02:43,560
so why do engineering teams care about

61
00:02:43,560 --> 00:02:44,879
observability

62
00:02:44,879 --> 00:02:46,800
as I said it's very important to

63
00:02:46,800 --> 00:02:49,080
understand the health of your system and

64
00:02:49,080 --> 00:02:52,760
the behavior of your systems

65
00:02:52,760 --> 00:02:54,420
so

66
00:02:54,420 --> 00:02:57,540
let's assume you are develops in a

67
00:02:57,540 --> 00:03:00,000
company you are running maybe operating

68
00:03:00,000 --> 00:03:03,180
maybe 30 50 applications or

69
00:03:03,180 --> 00:03:05,459
microservices or maybe serverless

70
00:03:05,459 --> 00:03:08,700
functions you'll rise maybe a year ago

71
00:03:08,700 --> 00:03:10,260
so you know a big part of it but you

72
00:03:10,260 --> 00:03:11,459
don't know all of it obviously you

73
00:03:11,459 --> 00:03:13,440
didn't write all the code you don't know

74
00:03:13,440 --> 00:03:16,680
all the databases or third-party tools

75
00:03:16,680 --> 00:03:18,180
that that those things are using right

76
00:03:18,180 --> 00:03:21,780
so when you are a system engineer the

77
00:03:21,780 --> 00:03:24,239
complexity of the thing you're dealing

78
00:03:24,239 --> 00:03:27,000
with is insane and it's very hard to

79
00:03:27,000 --> 00:03:29,099
grasp because you didn't build it and

80
00:03:29,099 --> 00:03:31,860
you have a team of Engineers who are

81
00:03:31,860 --> 00:03:34,019
changing it every so often right like

82
00:03:34,019 --> 00:03:36,959
they deploy every hour they are using to

83
00:03:36,959 --> 00:03:38,819
reform to change stuff on the cloud you

84
00:03:38,819 --> 00:03:42,140
don't even know my God it's a mess but

85
00:03:42,140 --> 00:03:45,540
uh how do you you are still responsible

86
00:03:45,540 --> 00:03:47,280
for the things to behave well right so

87
00:03:47,280 --> 00:03:49,980
you need tools to help you visualize

88
00:03:49,980 --> 00:03:52,260
understand how things are talking to

89
00:03:52,260 --> 00:03:53,159
each other

90
00:03:53,159 --> 00:03:55,620
how to debug it to monitor the

91
00:03:55,620 --> 00:03:59,519
deviations of the of the system and so

92
00:03:59,519 --> 00:04:01,500
on the right you have a small picture I

93
00:04:01,500 --> 00:04:03,299
didn't find the attribution of that one

94
00:04:03,299 --> 00:04:05,940
so I'm sorry for the author uh but yes

95
00:04:05,940 --> 00:04:08,220
load balancers Ingress to proxy service

96
00:04:08,220 --> 00:04:10,700
mesh sidecar and in the end application

97
00:04:10,700 --> 00:04:13,680
those are a lot of layers right that's a

98
00:04:13,680 --> 00:04:15,599
lot of opportunities for something to go

99
00:04:15,599 --> 00:04:19,219
wrong as well

100
00:04:19,260 --> 00:04:22,139
and so when you attack a complex systems

101
00:04:22,139 --> 00:04:25,320
because that's why I'm here today to

102
00:04:25,320 --> 00:04:28,139
talk about offensive stuff when you

103
00:04:28,139 --> 00:04:30,720
attack complex systems well a lot of the

104
00:04:30,720 --> 00:04:33,060
needs that you have are similar to the

105
00:04:33,060 --> 00:04:35,520
one that Engineers develops as a rehab

106
00:04:35,520 --> 00:04:38,160
right you want to understand the system

107
00:04:38,160 --> 00:04:40,500
to accelerate your we can

108
00:04:40,500 --> 00:04:42,960
you would like to have facts instead of

109
00:04:42,960 --> 00:04:46,139
hypothesis why am I getting a 500 when

110
00:04:46,139 --> 00:04:48,960
I'm putting a code here or an internal

111
00:04:48,960 --> 00:04:50,699
IP well those are a lot of questions

112
00:04:50,699 --> 00:04:53,280
that it's hard to understand

113
00:04:53,280 --> 00:04:55,620
it's hard to get a clear answer to

114
00:04:55,620 --> 00:04:58,259
obviously and that's the job of of pen

115
00:04:58,259 --> 00:05:01,320
testers so you would love to be able to

116
00:05:01,320 --> 00:05:04,560
observe the response of internal systems

117
00:05:04,560 --> 00:05:06,720
when you run stimuli on them right maybe

118
00:05:06,720 --> 00:05:10,100
discover hidden components

119
00:05:10,199 --> 00:05:13,620
um who in the room

120
00:05:13,620 --> 00:05:16,880
he's doing pen testing

121
00:05:19,080 --> 00:05:22,380
okay a fraction of this good who already

122
00:05:22,380 --> 00:05:25,560
dealt with pen testers who already

123
00:05:25,560 --> 00:05:29,000
received the pen test report

124
00:05:29,759 --> 00:05:32,400
all right all right all right so you

125
00:05:32,400 --> 00:05:33,720
will know what I'm what I'm talking

126
00:05:33,720 --> 00:05:37,620
about so how could we do this right and

127
00:05:37,620 --> 00:05:40,979
get answers to all the questions that

128
00:05:40,979 --> 00:05:44,280
are burning uh when we are trying to

129
00:05:44,280 --> 00:05:46,500
attack the system so the question is not

130
00:05:46,500 --> 00:05:47,699
how do we do this as security

131
00:05:47,699 --> 00:05:49,259
practitioners the question I want to

132
00:05:49,259 --> 00:05:50,100
answer

133
00:05:50,100 --> 00:05:53,880
first is how do product Engineers do

134
00:05:53,880 --> 00:05:56,220
this product engineer meaning the team

135
00:05:56,220 --> 00:05:59,160
that is making the system alive making

136
00:05:59,160 --> 00:06:01,440
your production alive make ensuring that

137
00:06:01,440 --> 00:06:04,979
your services and applications and apis

138
00:06:04,979 --> 00:06:06,840
are behaving well

139
00:06:06,840 --> 00:06:09,000
so

140
00:06:09,000 --> 00:06:11,220
the the focus of the talk is around

141
00:06:11,220 --> 00:06:14,639
modern observability products right so

142
00:06:14,639 --> 00:06:18,300
um usually we distinguish two things but

143
00:06:18,300 --> 00:06:20,520
another way to put it is that they give

144
00:06:20,520 --> 00:06:23,100
you full stack visibility so full stack

145
00:06:23,100 --> 00:06:26,220
is is a big one right it's a bit almost

146
00:06:26,220 --> 00:06:29,120
gross to say it you have that olive oil

147
00:06:29,120 --> 00:06:32,400
LinkedIn Twitter any recruiter is

148
00:06:32,400 --> 00:06:35,039
looking for a full stack developer so

149
00:06:35,039 --> 00:06:37,319
it's it's not what I mean here what I

150
00:06:37,319 --> 00:06:40,220
mean full stack is from the kernel level

151
00:06:40,220 --> 00:06:43,919
up to the to the API Behavior right

152
00:06:43,919 --> 00:06:46,500
everything that is happening within

153
00:06:46,500 --> 00:06:48,300
um your infrastructure from the cloud

154
00:06:48,300 --> 00:06:51,680
provider to the application itself and

155
00:06:51,680 --> 00:06:54,419
those observability tools they can give

156
00:06:54,419 --> 00:06:57,780
you a vision around all of that and

157
00:06:57,780 --> 00:06:59,400
that's very important because when you

158
00:06:59,400 --> 00:07:01,740
want to make sure that the system uh is

159
00:07:01,740 --> 00:07:03,660
alive you want to know about the

160
00:07:03,660 --> 00:07:05,280
container orchestrator how it's

161
00:07:05,280 --> 00:07:07,740
configured and how is it performant the

162
00:07:07,740 --> 00:07:09,840
host and container applications the data

163
00:07:09,840 --> 00:07:11,819
stores and what we call the cloud

164
00:07:11,819 --> 00:07:13,860
control plane how is your Cloud

165
00:07:13,860 --> 00:07:16,380
configured with users with security

166
00:07:16,380 --> 00:07:20,400
settings with system configuration

167
00:07:20,400 --> 00:07:23,160
so you have many path to get there all

168
00:07:23,160 --> 00:07:25,560
right so you have many products whether

169
00:07:25,560 --> 00:07:28,020
they are open source or commercial and

170
00:07:28,020 --> 00:07:30,479
here I want to do a small disclaimer I

171
00:07:30,479 --> 00:07:33,319
work at datadog but

172
00:07:33,319 --> 00:07:36,539
I will use data log as an example a lot

173
00:07:36,539 --> 00:07:38,639
because that's the one I know best but

174
00:07:38,639 --> 00:07:40,919
you have all of those products and

175
00:07:40,919 --> 00:07:42,780
platforms that allow you to do something

176
00:07:42,780 --> 00:07:46,440
very similar so whenever you hear data

177
00:07:46,440 --> 00:07:48,479
dog you can replace it in your mind with

178
00:07:48,479 --> 00:07:51,060
any of those other things and that works

179
00:07:51,060 --> 00:07:52,860
in the same way all right

180
00:07:52,860 --> 00:07:55,620
who already used one of the products

181
00:07:55,620 --> 00:07:58,400
listed here

182
00:07:59,400 --> 00:08:00,599
okay

183
00:08:00,599 --> 00:08:03,419
quite a bit of you who already used one

184
00:08:03,419 --> 00:08:07,740
of those products in a security context

185
00:08:07,740 --> 00:08:10,259
okay good quite a bit who already used

186
00:08:10,259 --> 00:08:12,240
any of this product in an offensive

187
00:08:12,240 --> 00:08:15,199
security context

188
00:08:15,680 --> 00:08:19,699
two here three here is that it four

189
00:08:19,699 --> 00:08:22,319
higher higher if I didn't count you yet

190
00:08:22,319 --> 00:08:24,479
okay please come and we'll have a chat

191
00:08:24,479 --> 00:08:27,620
after okay not right now

192
00:08:28,020 --> 00:08:30,240
um okay amazing so among that you have

193
00:08:30,240 --> 00:08:32,039
some that are open source that you can

194
00:08:32,039 --> 00:08:34,339
set up yourself I think

195
00:08:34,339 --> 00:08:38,640
we might be missing elastic I think

196
00:08:38,640 --> 00:08:42,740
which is uh uh open source as well

197
00:08:42,740 --> 00:08:45,120
but well that's that's the idea I'm not

198
00:08:45,120 --> 00:08:47,279
saying this is exhaustive

199
00:08:47,279 --> 00:08:49,740
so let's take a quick look at what

200
00:08:49,740 --> 00:08:53,720
actually is an observability product

201
00:08:54,060 --> 00:08:56,339
right so this is

202
00:08:56,339 --> 00:08:58,080
um

203
00:08:58,080 --> 00:09:00,360
this is data disclaimer you can do

204
00:09:00,360 --> 00:09:01,860
similar things with a lot of other

205
00:09:01,860 --> 00:09:03,660
products right

206
00:09:03,660 --> 00:09:06,660
um so here we have all of our hosts

207
00:09:06,660 --> 00:09:10,019
sorted by availability Zone we can see

208
00:09:10,019 --> 00:09:13,080
that some are misbehaving right we can

209
00:09:13,080 --> 00:09:15,800
see OST we can see a

210
00:09:15,800 --> 00:09:19,980
information about the networks and the

211
00:09:19,980 --> 00:09:22,560
on each of these hosts

212
00:09:22,560 --> 00:09:24,839
uh when we have matching results which

213
00:09:24,839 --> 00:09:28,019
is the demo effect of course

214
00:09:28,019 --> 00:09:30,600
um you can get information about the

215
00:09:30,600 --> 00:09:33,480
processes that are running within that

216
00:09:33,480 --> 00:09:36,660
host and

217
00:09:36,720 --> 00:09:39,540
and so that's kind of things you need

218
00:09:39,540 --> 00:09:41,640
when you want to investigate why

219
00:09:41,640 --> 00:09:43,800
something is good is going wrong with

220
00:09:43,800 --> 00:09:45,779
your with your production so that's

221
00:09:45,779 --> 00:09:48,600
really interesting if you are an UPS or

222
00:09:48,600 --> 00:09:50,519
a necessary or devops

223
00:09:50,519 --> 00:09:53,399
and to get this level of information

224
00:09:53,399 --> 00:09:57,120
you are a developer but also if you are

225
00:09:57,120 --> 00:09:59,760
an apps you might want to go at a higher

226
00:09:59,760 --> 00:10:01,920
level and understand what services are

227
00:10:01,920 --> 00:10:03,959
running on those hosts what apis are

228
00:10:03,959 --> 00:10:06,300
running on those hosts so thanks to

229
00:10:06,300 --> 00:10:08,700
observability products you can get this

230
00:10:08,700 --> 00:10:10,380
information because you the

231
00:10:10,380 --> 00:10:11,700
observability product will understand

232
00:10:11,700 --> 00:10:13,980
how services are talking together what

233
00:10:13,980 --> 00:10:14,959
kind of

234
00:10:14,959 --> 00:10:18,360
databases they are relying onto what

235
00:10:18,360 --> 00:10:21,420
kind of requests they are receiving and

236
00:10:21,420 --> 00:10:26,580
you can deep dive on many of the of the

237
00:10:26,580 --> 00:10:29,580
full stack layers of your of your

238
00:10:29,580 --> 00:10:32,399
organization and of your production

239
00:10:32,399 --> 00:10:34,620
system so

240
00:10:34,620 --> 00:10:36,060
um thanks

241
00:10:36,060 --> 00:10:39,300
to that developers can really deep dive

242
00:10:39,300 --> 00:10:42,420
and see okay I have a trace so I can see

243
00:10:42,420 --> 00:10:45,540
how the request flew from end to end on

244
00:10:45,540 --> 00:10:47,940
a given service I can relate that to the

245
00:10:47,940 --> 00:10:51,240
infrastructure and really thanks to

246
00:10:51,240 --> 00:10:54,120
observability products you get all of

247
00:10:54,120 --> 00:10:57,360
the context of your production systems

248
00:10:57,360 --> 00:10:59,160
so that sounds

249
00:10:59,160 --> 00:11:01,740
amazing very interesting you can even go

250
00:11:01,740 --> 00:11:03,079
beyond because for instance you have

251
00:11:03,079 --> 00:11:06,240
logs right so so you can look at what

252
00:11:06,240 --> 00:11:08,940
your systems are doing from uh from from

253
00:11:08,940 --> 00:11:11,480
a login standpoint but

254
00:11:11,480 --> 00:11:13,440
uh

255
00:11:13,440 --> 00:11:16,459
if we have all of this information

256
00:11:16,459 --> 00:11:19,079
why aren't we using it from a security

257
00:11:19,079 --> 00:11:20,399
standpoint

258
00:11:20,399 --> 00:11:22,980
if you if you are familiar with I don't

259
00:11:22,980 --> 00:11:25,920
know such analysts who are reading

260
00:11:25,920 --> 00:11:28,100
alerts from SIM

261
00:11:28,100 --> 00:11:30,420
hours per day

262
00:11:30,420 --> 00:11:32,760
they had everything at their fingertip

263
00:11:32,760 --> 00:11:35,220
like that wouldn't that accelerate them

264
00:11:35,220 --> 00:11:38,100
if we were able with uh instead of

265
00:11:38,100 --> 00:11:40,100
choosing like uh

266
00:11:40,100 --> 00:11:43,620
Rue HTTP traffic to correlate attacks

267
00:11:43,620 --> 00:11:46,019
with runtime information couldn't we

268
00:11:46,019 --> 00:11:47,279
accelerate things

269
00:11:47,279 --> 00:11:50,760
that's the idea and that's what I want

270
00:11:50,760 --> 00:11:53,240
to show you it's how we will do that

271
00:11:53,240 --> 00:11:58,140
from a an offensive standpoint so

272
00:11:58,140 --> 00:11:59,940
let's focus on distributed tracing

273
00:11:59,940 --> 00:12:02,459
you've seen the huge service map where I

274
00:12:02,459 --> 00:12:04,440
can tell you which service is talking to

275
00:12:04,440 --> 00:12:06,240
what database what cache what other

276
00:12:06,240 --> 00:12:07,560
services

277
00:12:07,560 --> 00:12:09,060
and so the question is okay how does

278
00:12:09,060 --> 00:12:10,740
distributed tracing works so let's

279
00:12:10,740 --> 00:12:14,519
assume that abcdr Services one of them B

280
00:12:14,519 --> 00:12:16,560
is using redis the goal is to

281
00:12:16,560 --> 00:12:18,660
reconstruct the map that you have on the

282
00:12:18,660 --> 00:12:19,560
right

283
00:12:19,560 --> 00:12:22,740
so you know how performant they are how

284
00:12:22,740 --> 00:12:24,779
much time was spent in each service so

285
00:12:24,779 --> 00:12:26,760
with that visibility you know that if

286
00:12:26,760 --> 00:12:30,000
for instance C is starting to have

287
00:12:30,000 --> 00:12:32,279
performance issues you can easily

288
00:12:32,279 --> 00:12:34,680
pinpoint the issue because you have the

289
00:12:34,680 --> 00:12:38,540
performance of each of the service

290
00:12:38,760 --> 00:12:40,740
um so how does that work in practice

291
00:12:40,740 --> 00:12:42,540
let's assume that you have a customer

292
00:12:42,540 --> 00:12:44,760
request that is entering your system

293
00:12:44,760 --> 00:12:49,260
okay in each of the applications so a b

294
00:12:49,260 --> 00:12:50,639
c d

295
00:12:50,639 --> 00:12:53,760
each navigation you have what we call a

296
00:12:53,760 --> 00:12:56,940
library okay and the library will look

297
00:12:56,940 --> 00:12:59,880
into the incoming incoming requests if

298
00:12:59,880 --> 00:13:01,139
they see

299
00:13:01,139 --> 00:13:04,920
a trace ID they will propagate it to the

300
00:13:04,920 --> 00:13:08,100
subsequent libraries right

301
00:13:08,100 --> 00:13:09,899
um so let's assume that we have a trace

302
00:13:09,899 --> 00:13:11,399
ID that is X

303
00:13:11,399 --> 00:13:14,339
initially the library on the service a

304
00:13:14,339 --> 00:13:16,440
didn't see and it Tracy this will

305
00:13:16,440 --> 00:13:19,139
generate a random one and propagate it

306
00:13:19,139 --> 00:13:20,339
everywhere

307
00:13:20,339 --> 00:13:23,040
the next thing that happens is that this

308
00:13:23,040 --> 00:13:25,079
is centralized to an observability

309
00:13:25,079 --> 00:13:27,360
product

310
00:13:27,360 --> 00:13:30,240
and the observability product is able to

311
00:13:30,240 --> 00:13:33,660
reconstruct a trace okay so read the

312
00:13:33,660 --> 00:13:36,480
graph of how or the tree of how the

313
00:13:36,480 --> 00:13:40,320
services are communicating together

314
00:13:40,320 --> 00:13:44,519
so APM is Magic no it feels magic the

315
00:13:44,519 --> 00:13:46,920
the first time I installed an APM and an

316
00:13:46,920 --> 00:13:48,800
application I was developing an ISO

317
00:13:48,800 --> 00:13:52,680
details about the request the database

318
00:13:52,680 --> 00:13:55,440
queries performance

319
00:13:55,440 --> 00:13:58,800
information about the the other us that

320
00:13:58,800 --> 00:14:03,240
my code was fetching it felt incredible

321
00:14:03,240 --> 00:14:06,720
um but obviously it's not magic and you

322
00:14:06,720 --> 00:14:08,459
have some limitations

323
00:14:08,459 --> 00:14:11,700
for instance if the communication

324
00:14:11,700 --> 00:14:13,560
between B and C

325
00:14:13,560 --> 00:14:15,720
is not done with HTTP but with something

326
00:14:15,720 --> 00:14:18,779
else well the APM need to understand

327
00:14:18,779 --> 00:14:21,779
that something else so it can propagate

328
00:14:21,779 --> 00:14:23,820
the trace ID into that

329
00:14:23,820 --> 00:14:28,079
if it's not able to do it well you will

330
00:14:28,079 --> 00:14:31,019
lose the information and so you will get

331
00:14:31,019 --> 00:14:34,500
like a broken Trace within you within

332
00:14:34,500 --> 00:14:37,200
your dashboards and obviously

333
00:14:37,200 --> 00:14:40,440
um regarding all of the traces as a cost

334
00:14:40,440 --> 00:14:42,660
so you need some sampling so you will

335
00:14:42,660 --> 00:14:45,720
not be able to gather 100 of the traffic

336
00:14:45,720 --> 00:14:49,560
okay those are kind of the limitation of

337
00:14:49,560 --> 00:14:51,000
those tools and I'm not even talking

338
00:14:51,000 --> 00:14:53,100
about deployment because

339
00:14:53,100 --> 00:14:54,540
um if you want to get started with an

340
00:14:54,540 --> 00:14:57,199
APM in a large company well you need to

341
00:14:57,199 --> 00:15:00,660
convince developers to install a live a

342
00:15:00,660 --> 00:15:02,579
new library on all of their applications

343
00:15:02,579 --> 00:15:05,420
so

344
00:15:06,320 --> 00:15:08,940
developers are requesting this kind of

345
00:15:08,940 --> 00:15:10,740
things because since the systems are

346
00:15:10,740 --> 00:15:13,860
more and more distributed they make it

347
00:15:13,860 --> 00:15:15,779
um those tools makes it much more easier

348
00:15:15,779 --> 00:15:18,839
to visualize and debug and understand

349
00:15:18,839 --> 00:15:21,660
so now

350
00:15:21,660 --> 00:15:24,300
we want to pen test

351
00:15:24,300 --> 00:15:25,980
with observability

352
00:15:25,980 --> 00:15:28,380
are you are you steadily starting to see

353
00:15:28,380 --> 00:15:31,680
where I'm going here

354
00:15:31,680 --> 00:15:33,739
um

355
00:15:35,360 --> 00:15:39,420
into an APM Library so who

356
00:15:39,420 --> 00:15:43,160
already used Bob suit here

357
00:15:43,980 --> 00:15:49,339
okay who has no idea what burp suit is

358
00:15:50,220 --> 00:15:52,320
no shame no shame

359
00:15:52,320 --> 00:15:54,660
but I don't see a much people raising

360
00:15:54,660 --> 00:15:57,139
their hands

361
00:15:57,240 --> 00:15:59,279
Last Chance who has no idea what this

362
00:15:59,279 --> 00:16:01,040
Bob should

363
00:16:01,040 --> 00:16:03,779
okay okay good

364
00:16:03,779 --> 00:16:05,880
um so just you know what if you are pin

365
00:16:05,880 --> 00:16:07,560
testing an application

366
00:16:07,560 --> 00:16:09,420
well you want to be able to use your

367
00:16:09,420 --> 00:16:11,699
browser to use the app because I don't

368
00:16:11,699 --> 00:16:16,100
know react angular it's you cannot like

369
00:16:16,100 --> 00:16:18,420
simulate a browser it's very hard so you

370
00:16:18,420 --> 00:16:19,980
use a browser to interact with the app

371
00:16:19,980 --> 00:16:23,519
and burp will act as a relay between

372
00:16:23,519 --> 00:16:26,100
your brother and the application that

373
00:16:26,100 --> 00:16:28,320
you are pen testing so it will intercept

374
00:16:28,320 --> 00:16:32,459
all the API calls it will show them to

375
00:16:32,459 --> 00:16:35,220
you and I think actually I have a yes

376
00:16:35,220 --> 00:16:38,459
and it will intercept all the apis call

377
00:16:38,459 --> 00:16:41,040
show the API calls to you you will be

378
00:16:41,040 --> 00:16:44,279
able to inspect them modify them replay

379
00:16:44,279 --> 00:16:47,220
them and so that's how you can inspect

380
00:16:47,220 --> 00:16:49,380
the requests and the response of the

381
00:16:49,380 --> 00:16:51,180
application so that's a very useful tool

382
00:16:51,180 --> 00:16:54,120
in order to to understand actually what

383
00:16:54,120 --> 00:16:55,620
you are doing during uh during a pen

384
00:16:55,620 --> 00:16:57,660
test

385
00:16:57,660 --> 00:17:00,360
so what I built is a is a very simple

386
00:17:00,360 --> 00:17:03,600
burp extension that is actually using

387
00:17:03,600 --> 00:17:07,260
APM mechanisms in order to inject

388
00:17:07,260 --> 00:17:10,559
a trace ID within any of the requests

389
00:17:10,559 --> 00:17:14,520
that burp is uh is receiving

390
00:17:14,520 --> 00:17:17,099
and so that Trace ID if you are pen

391
00:17:17,099 --> 00:17:18,959
testing an application that is using one

392
00:17:18,959 --> 00:17:21,240
of those observability products will be

393
00:17:21,240 --> 00:17:23,579
propagated everywhere and so later you

394
00:17:23,579 --> 00:17:26,280
can find it back in that product that

395
00:17:26,280 --> 00:17:28,439
means that when you are doing a test you

396
00:17:28,439 --> 00:17:32,299
can leverage all the information from

397
00:17:32,299 --> 00:17:36,299
the from the observability vendor so it

398
00:17:36,299 --> 00:17:38,820
means that as an offensive engineer you

399
00:17:38,820 --> 00:17:42,660
will get all of this information

400
00:17:42,660 --> 00:17:45,240
uh so who can use this obviously you

401
00:17:45,240 --> 00:17:46,440
need to have

402
00:17:46,440 --> 00:17:47,220
um

403
00:17:47,220 --> 00:17:50,340
a system so you know what maybe we can

404
00:17:50,340 --> 00:17:53,160
talk about who can use this after so let

405
00:17:53,160 --> 00:17:56,220
me live redo my slides

406
00:17:56,220 --> 00:17:58,919
eh you don't see that often right mini

407
00:17:58,919 --> 00:18:00,240
there

408
00:18:00,240 --> 00:18:03,080
oh no

409
00:18:05,100 --> 00:18:08,840
it was full screen I'm sorry

410
00:18:12,539 --> 00:18:14,700
can someone sing a song while I'm doing

411
00:18:14,700 --> 00:18:16,940
that

412
00:18:19,080 --> 00:18:22,159
thank you so much

413
00:18:22,520 --> 00:18:26,940
uh all right so let's take a real use

414
00:18:26,940 --> 00:18:29,760
case and let's investigate

415
00:18:29,760 --> 00:18:33,240
how this could uh help us with for

416
00:18:33,240 --> 00:18:36,000
instance a second injection

417
00:18:36,000 --> 00:18:37,860
um so

418
00:18:37,860 --> 00:18:39,780
what I have

419
00:18:39,780 --> 00:18:43,260
is a vulnerable web application here

420
00:18:43,260 --> 00:18:45,900
okay it's web Goods it's it's the U.S

421
00:18:45,900 --> 00:18:49,320
per Java one super super standard what I

422
00:18:49,320 --> 00:18:52,320
did is that my Firefox is configured to

423
00:18:52,320 --> 00:18:55,559
use burp okay so the reverse proxy we

424
00:18:55,559 --> 00:18:57,539
discussed previously

425
00:18:57,539 --> 00:19:01,080
here I have burp who is using the APM to

426
00:19:01,080 --> 00:19:04,320
burp extension which is open source then

427
00:19:04,320 --> 00:19:06,620
I share the link after in the slides

428
00:19:06,620 --> 00:19:10,559
and so while

429
00:19:10,559 --> 00:19:13,620
we are using verp in a

430
00:19:13,620 --> 00:19:17,340
in a service sorry in approximate all

431
00:19:17,340 --> 00:19:19,200
the requests are intercepted

432
00:19:19,200 --> 00:19:22,320
and if we move to the edited request we

433
00:19:22,320 --> 00:19:26,100
can see that we injected a trace ID okay

434
00:19:26,100 --> 00:19:29,100
so the idea is that you can very easily

435
00:19:29,100 --> 00:19:32,100
use the extension to open the trace ID

436
00:19:32,100 --> 00:19:35,418
in the APN

437
00:19:36,240 --> 00:19:38,039
takes a bit of time to load because I'm

438
00:19:38,039 --> 00:19:39,840
in 4G and I'm not on the right

439
00:19:39,840 --> 00:19:42,480
organization so I will just need to

440
00:19:42,480 --> 00:19:46,460
change it right here

441
00:19:46,620 --> 00:19:51,620
demo effect second time I'm sorry attack

442
00:19:52,260 --> 00:19:53,760
ta-da

443
00:19:53,760 --> 00:19:56,039
here we have the details about the

444
00:19:56,039 --> 00:19:58,559
request that was found into verb okay so

445
00:19:58,559 --> 00:20:00,179
this one is a random one it's not super

446
00:20:00,179 --> 00:20:03,660
interesting now let's focus on on trying

447
00:20:03,660 --> 00:20:07,559
to to do like a secret injection okay so

448
00:20:07,559 --> 00:20:09,419
um since we are all advanced Security

449
00:20:09,419 --> 00:20:11,220
Experts in the room who is not who's

450
00:20:11,220 --> 00:20:14,039
kidding no tensor I don't want to know

451
00:20:14,039 --> 00:20:18,120
uh we can just try this so this one okay

452
00:20:18,120 --> 00:20:20,760
goal can you log in as term

453
00:20:20,760 --> 00:20:22,799
straightforward it's a typical secret

454
00:20:22,799 --> 00:20:25,500
injection right so uh not super funny

455
00:20:25,500 --> 00:20:27,419
I'm gonna do something

456
00:20:27,419 --> 00:20:29,820
like that

457
00:20:29,820 --> 00:20:30,900
um

458
00:20:30,900 --> 00:20:34,380
okay space login

459
00:20:34,380 --> 00:20:36,480
oh didn't work

460
00:20:36,480 --> 00:20:38,059
all right

461
00:20:38,059 --> 00:20:40,980
uh so maybe I'm gonna try quote and

462
00:20:40,980 --> 00:20:43,020
quote to see if

463
00:20:43,020 --> 00:20:46,440
any bug is triggered nothing okay

464
00:20:46,440 --> 00:20:49,080
so here I don't understand uh it's not

465
00:20:49,080 --> 00:20:50,640
straightforward to do

466
00:20:50,640 --> 00:20:53,880
to to fill that challenge so I'm looking

467
00:20:53,880 --> 00:20:56,220
at my Trace those are the codes that I

468
00:20:56,220 --> 00:20:59,280
injected and I'm gonna open it

469
00:20:59,280 --> 00:21:03,179
guess where in an observability product

470
00:21:03,179 --> 00:21:06,960
here I am I can go to the Spanish which

471
00:21:06,960 --> 00:21:08,460
has all the information about that

472
00:21:08,460 --> 00:21:10,679
request is the is it big enough and I'm

473
00:21:10,679 --> 00:21:12,120
gonna zoom in a bit

474
00:21:12,120 --> 00:21:13,679
is better

475
00:21:13,679 --> 00:21:16,640
oh yes thank you

476
00:21:16,640 --> 00:21:18,960
and so we can see okay a lot of physical

477
00:21:18,960 --> 00:21:20,580
queries that we don't care about but

478
00:21:20,580 --> 00:21:22,919
this one this one seems to be the one we

479
00:21:22,919 --> 00:21:26,220
we try to inject and we can see that

480
00:21:26,220 --> 00:21:28,200
like uh it doesn't seem that the

481
00:21:28,200 --> 00:21:29,460
injection worked

482
00:21:29,460 --> 00:21:31,799
so let's get back to it

483
00:21:31,799 --> 00:21:34,380
and actually we have a register tab so

484
00:21:34,380 --> 00:21:36,900
maybe here I will have more look let's

485
00:21:36,900 --> 00:21:40,020
try register now oh I need a valid email

486
00:21:40,020 --> 00:21:42,260
address

487
00:21:43,260 --> 00:21:45,120
that's my red one

488
00:21:45,120 --> 00:21:48,480
register oh okay something went wrong so

489
00:21:48,480 --> 00:21:51,179
this time we can investigate again so

490
00:21:51,179 --> 00:21:53,159
I'm gonna use that one

491
00:21:53,159 --> 00:21:54,419
and

492
00:21:54,419 --> 00:21:58,640
again open it in the APM

493
00:22:01,740 --> 00:22:04,320
all right so I'm gonna get back to the

494
00:22:04,320 --> 00:22:06,659
Spanish list

495
00:22:06,659 --> 00:22:10,020
and what do I see oh here

496
00:22:10,020 --> 00:22:12,539
what do we have user ID equal question

497
00:22:12,539 --> 00:22:16,200
mark so it's plain select but I have an

498
00:22:16,200 --> 00:22:18,539
error

499
00:22:18,539 --> 00:22:19,980
so

500
00:22:19,980 --> 00:22:22,620
in one click I'm able to see the

501
00:22:22,620 --> 00:22:24,419
exception generated within the

502
00:22:24,419 --> 00:22:28,080
application by my request how amazing is

503
00:22:28,080 --> 00:22:28,919
that

504
00:22:28,919 --> 00:22:31,020
how would that make pen testing easier

505
00:22:31,020 --> 00:22:35,400
if we had access to exceptions a lot so

506
00:22:35,400 --> 00:22:38,820
um very very simply I can get all of

507
00:22:38,820 --> 00:22:41,159
that information since I've got the

508
00:22:41,159 --> 00:22:44,900
shape of the SQL query that is used

509
00:22:44,900 --> 00:22:47,340
by the application

510
00:22:47,340 --> 00:22:50,820
I can really deep dive and as I'm

511
00:22:50,820 --> 00:22:53,400
approaching my actual attack I can

512
00:22:53,400 --> 00:22:56,760
understand how the application is is

513
00:22:56,760 --> 00:22:59,280
changing things and already that being

514
00:22:59,280 --> 00:23:01,320
having the shape of the secret query

515
00:23:01,320 --> 00:23:06,320
will help me uh will help me a lot

516
00:23:06,480 --> 00:23:08,120
um so

517
00:23:08,120 --> 00:23:11,340
that's uh we

518
00:23:11,340 --> 00:23:14,159
trying to find the slides

519
00:23:14,159 --> 00:23:18,299
that's how we can we can go further with

520
00:23:18,299 --> 00:23:19,919
secret injection so to help like the

521
00:23:19,919 --> 00:23:21,900
errors and the shape of the secretary

522
00:23:21,900 --> 00:23:23,760
that we have and you can think that it's

523
00:23:23,760 --> 00:23:25,559
the same for any database that is

524
00:23:25,559 --> 00:23:29,100
supported by the observability platform

525
00:23:29,100 --> 00:23:30,780
that you are using for a

526
00:23:30,780 --> 00:23:33,000
mongodbenization for Cassandra or

527
00:23:33,000 --> 00:23:36,179
dynamodb or whatever any kind of uh

528
00:23:36,179 --> 00:23:39,679
injectable query language will

529
00:23:39,679 --> 00:23:43,200
will be displayed in those in those

530
00:23:43,200 --> 00:23:47,220
observations provided the theme

531
00:23:47,220 --> 00:23:49,740
um social injection is cool but

532
00:23:49,740 --> 00:23:51,840
can we do something else

533
00:23:51,840 --> 00:23:55,080
ssrf server side request forgery

534
00:23:55,080 --> 00:23:57,139
um

535
00:23:57,360 --> 00:24:00,780
who who has a new crew what ssrf is

536
00:24:00,780 --> 00:24:03,480
don't be shy

537
00:24:03,480 --> 00:24:06,620
okay come on what are you doing here

538
00:24:06,620 --> 00:24:10,380
I'm kidding okay so ssrf is when you

539
00:24:10,380 --> 00:24:11,640
have a

540
00:24:11,640 --> 00:24:13,559
an application

541
00:24:13,559 --> 00:24:17,340
that takes as input a URL maybe because

542
00:24:17,340 --> 00:24:19,200
the application of how to configure a

543
00:24:19,200 --> 00:24:21,000
Web book or maybe because the

544
00:24:21,000 --> 00:24:24,419
application allows to fetch a URL an

545
00:24:24,419 --> 00:24:27,179
archive or I don't know what if the URL

546
00:24:27,179 --> 00:24:29,880
is not validated properly or

547
00:24:29,880 --> 00:24:32,039
if the application isn't secured against

548
00:24:32,039 --> 00:24:34,080
ssrf because that can open a lot of

549
00:24:34,080 --> 00:24:36,439
debates

550
00:24:37,580 --> 00:24:41,460
the attacker can put a private IP

551
00:24:41,460 --> 00:24:44,700
address within the application right and

552
00:24:44,700 --> 00:24:46,980
so instead of fetching something uh

553
00:24:46,980 --> 00:24:49,020
innocent uh remotely the application

554
00:24:49,020 --> 00:24:51,000
might fetch something on localhost

555
00:24:51,000 --> 00:24:53,400
something on the cloud providers infra

556
00:24:53,400 --> 00:24:54,900
something on I don't know the

557
00:24:54,900 --> 00:24:56,880
administrative interface of your web

558
00:24:56,880 --> 00:24:59,640
application firewall so it's it's it's

559
00:24:59,640 --> 00:25:01,260
an attack where

560
00:25:01,260 --> 00:25:04,280
and that occur will

561
00:25:04,280 --> 00:25:08,400
perform marriages United actions within

562
00:25:08,400 --> 00:25:11,580
your network thanks to uh thanks to uh

563
00:25:11,580 --> 00:25:15,600
Miss sanitized URL field

564
00:25:15,600 --> 00:25:19,799
so a good thing we have sorry

565
00:25:19,799 --> 00:25:21,900
we have

566
00:25:21,900 --> 00:25:24,720
um a server-side request for jury attack

567
00:25:24,720 --> 00:25:28,320
in the in this challenge so let's

568
00:25:28,320 --> 00:25:30,779
try that

569
00:25:30,779 --> 00:25:33,360
um I think this one yeah okay so we need

570
00:25:33,360 --> 00:25:35,340
to steal the cheese

571
00:25:35,340 --> 00:25:38,340
extremely fun fact I'm a french guy but

572
00:25:38,340 --> 00:25:40,799
I don't eat cheese still I'm gonna demo

573
00:25:40,799 --> 00:25:41,820
that to you

574
00:25:41,820 --> 00:25:43,500
I know

575
00:25:43,500 --> 00:25:45,480
how you write

576
00:25:45,480 --> 00:25:46,620
um so

577
00:25:46,620 --> 00:25:51,120
here we can see that we have a URL okay

578
00:25:51,120 --> 00:25:55,320
um images term that PNG let's try with a

579
00:25:55,320 --> 00:25:58,380
random URL and see if something

580
00:25:58,380 --> 00:26:00,539
works on it also I need to go in

581
00:26:00,539 --> 00:26:03,179
intercept mode that's a burp demo as

582
00:26:03,179 --> 00:26:06,960
well I will replay the thing

583
00:26:06,960 --> 00:26:10,640
uh this one I drop

584
00:26:10,940 --> 00:26:14,840
websocket I don't care

585
00:26:14,880 --> 00:26:16,020
okay

586
00:26:16,020 --> 00:26:18,480
there I have it okay so let's try to

587
00:26:18,480 --> 00:26:22,260
replace that with a urine

588
00:26:22,260 --> 00:26:24,659
and what could we do like that invalid

589
00:26:24,659 --> 00:26:26,460
IP address

590
00:26:26,460 --> 00:26:28,520
um

591
00:26:30,179 --> 00:26:32,700
that should trigger an error at least

592
00:26:32,700 --> 00:26:35,460
right we can for one

593
00:26:35,460 --> 00:26:36,659
whoop

594
00:26:36,659 --> 00:26:39,659
and I will remove the interception and

595
00:26:39,659 --> 00:26:41,520
so what happened

596
00:26:41,520 --> 00:26:43,860
okay so you need to stick to the game

597
00:26:43,860 --> 00:26:46,679
plan so apparently it didn't work

598
00:26:46,679 --> 00:26:50,159
I can go into the HTTP history I will

599
00:26:50,159 --> 00:26:53,460
find my ssrf query we can see that it's

600
00:26:53,460 --> 00:26:55,559
the injected one

601
00:26:55,559 --> 00:26:59,220
and uh okay so I have no sign of a

602
00:26:59,220 --> 00:27:00,600
neuron or anything

603
00:27:00,600 --> 00:27:03,000
what am I gonna do open that in an

604
00:27:03,000 --> 00:27:05,279
observability platform of course

605
00:27:05,279 --> 00:27:07,440
I open in APM

606
00:27:07,440 --> 00:27:10,200
and so what we can see

607
00:27:10,200 --> 00:27:14,159
is nothing no error okay we can look at

608
00:27:14,159 --> 00:27:16,620
the span list

609
00:27:16,620 --> 00:27:18,419
there is nothing

610
00:27:18,419 --> 00:27:21,840
that looks like an HTTP request

611
00:27:21,840 --> 00:27:24,960
Okay so

612
00:27:24,960 --> 00:27:28,140
it's just an ssrf that is only doing

613
00:27:28,140 --> 00:27:31,860
internal local file queries

614
00:27:31,860 --> 00:27:34,679
we got hinted by the the shape of the

615
00:27:34,679 --> 00:27:36,900
initial argument but here very easily we

616
00:27:36,900 --> 00:27:39,240
can tell okay there is no need into

617
00:27:39,240 --> 00:27:41,520
trying to extract that in in this way

618
00:27:41,520 --> 00:27:46,679
you cannot reach external servers with

619
00:27:46,679 --> 00:27:48,659
that feature since the application is

620
00:27:48,659 --> 00:27:50,940
not even doing an HTTP query

621
00:27:50,940 --> 00:27:53,400
interesting right so we we like we win

622
00:27:53,400 --> 00:27:56,340
hours of work uh by looking at the thing

623
00:27:56,340 --> 00:27:59,039
rather than looking at the uh trying to

624
00:27:59,039 --> 00:28:01,919
guess and by trial and error what you

625
00:28:01,919 --> 00:28:04,679
could even do and go beyond uh is look

626
00:28:04,679 --> 00:28:06,659
at the network so I have no network data

627
00:28:06,659 --> 00:28:10,440
because uh I'm on Mac OS but if you are

628
00:28:10,440 --> 00:28:12,360
using that on your Linux systems you

629
00:28:12,360 --> 00:28:14,220
would be able to see the shape of the

630
00:28:14,220 --> 00:28:15,600
network so you would be able to tell

631
00:28:15,600 --> 00:28:19,679
whether you are within a wsvpc whether

632
00:28:19,679 --> 00:28:22,559
imds V2 is configured or not and how you

633
00:28:22,559 --> 00:28:27,320
can exploit actually this this ssrf

634
00:28:31,020 --> 00:28:33,360
so this is uh what we what we can tell

635
00:28:33,360 --> 00:28:35,719
from that

636
00:28:36,000 --> 00:28:37,860
and we can even have

637
00:28:37,860 --> 00:28:40,860
code insights going Beyond

638
00:28:40,860 --> 00:28:45,559
um what the APM Library instruments

639
00:28:45,559 --> 00:28:47,760
explicitly here you can get information

640
00:28:47,760 --> 00:28:49,500
about anything

641
00:28:49,500 --> 00:28:51,059
so

642
00:28:51,059 --> 00:28:53,600
the way it works is that

643
00:28:53,600 --> 00:28:56,640
most of the time since observability

644
00:28:56,640 --> 00:29:00,179
products are used by teams that need to

645
00:29:00,179 --> 00:29:04,140
have performance inside you will have

646
00:29:04,140 --> 00:29:07,320
features that allow

647
00:29:07,320 --> 00:29:09,360
um to get very very precise performance

648
00:29:09,360 --> 00:29:11,580
insight about your systems and here we

649
00:29:11,580 --> 00:29:13,140
have the profiling

650
00:29:13,140 --> 00:29:14,520
so

651
00:29:14,520 --> 00:29:17,279
um a profiler

652
00:29:17,279 --> 00:29:21,419
is a a simple that just took every uh so

653
00:29:21,419 --> 00:29:24,600
fun like every 50 or 10 milliseconds

654
00:29:24,600 --> 00:29:26,580
it takes all the stack traces of the

655
00:29:26,580 --> 00:29:28,980
processes that are running and it will

656
00:29:28,980 --> 00:29:31,559
form a tip to you so here the stack

657
00:29:31,559 --> 00:29:34,380
traces taken are the one of your web app

658
00:29:34,380 --> 00:29:38,880
or API so we can open it

659
00:29:38,880 --> 00:29:42,480
and we can see the profile for that

660
00:29:42,480 --> 00:29:45,120
specific service

661
00:29:45,120 --> 00:29:47,880
and we have no profiles found which is

662
00:29:47,880 --> 00:29:49,760
again the demo effect

663
00:29:49,760 --> 00:29:53,460
so I'm gonna get back to my other

664
00:29:53,460 --> 00:29:56,779
um no sorry

665
00:29:57,360 --> 00:30:00,240
to My Demo organization

666
00:30:00,240 --> 00:30:02,779
yes

667
00:30:07,380 --> 00:30:09,120
there

668
00:30:09,120 --> 00:30:11,880
so since it's statistical it might be

669
00:30:11,880 --> 00:30:13,380
that we didn't choose the app enough

670
00:30:13,380 --> 00:30:14,880
obviously it's the app that I'm running

671
00:30:14,880 --> 00:30:17,220
locally I didn't do a lot of requests on

672
00:30:17,220 --> 00:30:19,440
it so it's very possible that the the

673
00:30:19,440 --> 00:30:22,500
profiler was blind to it I can open a

674
00:30:22,500 --> 00:30:24,480
given service let's assume that's the

675
00:30:24,480 --> 00:30:27,360
one we want to uh we we are currently

676
00:30:27,360 --> 00:30:29,220
attacking and so I get a lot of

677
00:30:29,220 --> 00:30:31,740
information about the the performance

678
00:30:31,740 --> 00:30:33,120
but that's not really what I'm

679
00:30:33,120 --> 00:30:34,679
interested about what I'm interested

680
00:30:34,679 --> 00:30:38,520
about is all those uh low-level

681
00:30:38,520 --> 00:30:41,760
information about what code is actually

682
00:30:41,760 --> 00:30:44,520
running and what the app is actually

683
00:30:44,520 --> 00:30:48,659
doing if I scroll up I can even saw this

684
00:30:48,659 --> 00:30:51,840
information by Library okay so I get

685
00:30:51,840 --> 00:30:53,940
information about all of the libraries

686
00:30:53,940 --> 00:30:57,000
that are running on that platform

687
00:30:57,000 --> 00:30:59,159
I useful is that let's assume that you

688
00:30:59,159 --> 00:31:01,440
you have a hint and you want to exploit

689
00:31:01,440 --> 00:31:05,279
a given cve on one application well if

690
00:31:05,279 --> 00:31:07,020
you want to know if the library

691
00:31:07,020 --> 00:31:08,760
the vulnerable library is actually

692
00:31:08,760 --> 00:31:12,059
running on it you can use such a tool to

693
00:31:12,059 --> 00:31:15,240
get this information and very easily you

694
00:31:15,240 --> 00:31:17,940
can even pick your Target and choose

695
00:31:17,940 --> 00:31:20,700
amongst all the apis you have at your

696
00:31:20,700 --> 00:31:23,340
disposal which one is actually running

697
00:31:23,340 --> 00:31:24,960
the vulnerable version of the service

698
00:31:24,960 --> 00:31:26,940
I'm sure it happened to you all the time

699
00:31:26,940 --> 00:31:29,460
trying to exploit I don't know look for

700
00:31:29,460 --> 00:31:33,120
Shell or any kind of Tomcat CV or or

701
00:31:33,120 --> 00:31:36,480
whatever and not finding uh the right

702
00:31:36,480 --> 00:31:42,140
the right target for that so again with

703
00:31:42,140 --> 00:31:45,059
leveraging all the tools that developers

704
00:31:45,059 --> 00:31:48,179
apps SRE are using we can get very very

705
00:31:48,179 --> 00:31:51,419
important insights that are useful from

706
00:31:51,419 --> 00:31:55,700
from an offensive security standpoint

707
00:32:01,679 --> 00:32:04,460
there

708
00:32:04,740 --> 00:32:06,720
so

709
00:32:06,720 --> 00:32:08,880
that's that's interesting but who can

710
00:32:08,880 --> 00:32:10,860
use this obviously you cannot use that

711
00:32:10,860 --> 00:32:14,940
in a in a random pen test because you

712
00:32:14,940 --> 00:32:17,640
need to have access to the observability

713
00:32:17,640 --> 00:32:19,740
platform in order to to get those

714
00:32:19,740 --> 00:32:22,679
Insight right uh but that's extremely

715
00:32:22,679 --> 00:32:25,140
useful for red teams that are testing

716
00:32:25,140 --> 00:32:27,360
internal systems if your company is

717
00:32:27,360 --> 00:32:30,059
using an observability product then very

718
00:32:30,059 --> 00:32:33,360
easily you can get an access legally as

719
00:32:33,360 --> 00:32:36,240
your as your team and and and use it as

720
00:32:36,240 --> 00:32:38,460
a source of information for you for all

721
00:32:38,460 --> 00:32:40,320
of your tests

722
00:32:40,320 --> 00:32:43,440
um so leverage those internal tools you

723
00:32:43,440 --> 00:32:45,120
can also discover blind spots right

724
00:32:45,120 --> 00:32:46,380
because

725
00:32:46,380 --> 00:32:49,200
um you can know what is not monitored

726
00:32:49,200 --> 00:32:52,740
within a company if it's not on that

727
00:32:52,740 --> 00:32:55,380
tool most likely people don't really

728
00:32:55,380 --> 00:32:57,299
know about it or don't have alerting on

729
00:32:57,299 --> 00:32:59,520
it so those are systems that you can use

730
00:32:59,520 --> 00:33:01,620
to build persistence

731
00:33:01,620 --> 00:33:05,220
that's uh not so nice but red teamers

732
00:33:05,220 --> 00:33:08,159
are not nice I know I was one

733
00:33:08,159 --> 00:33:10,140
um it's also useful if you are doing

734
00:33:10,140 --> 00:33:12,600
like open box testing with customers

735
00:33:12,600 --> 00:33:14,820
right with you know access to the source

736
00:33:14,820 --> 00:33:16,799
code with meetings where people explain

737
00:33:16,799 --> 00:33:20,340
you their systems Etc so if that's the

738
00:33:20,340 --> 00:33:23,159
case you should ask to your customers

739
00:33:23,159 --> 00:33:26,220
access to those tools if you are

740
00:33:26,220 --> 00:33:28,279
um performing pen test for your company

741
00:33:28,279 --> 00:33:31,260
offer European testers to use those

742
00:33:31,260 --> 00:33:33,059
tools because that will accelerate them

743
00:33:33,059 --> 00:33:36,480
a lot and you know there is always a

744
00:33:36,480 --> 00:33:38,760
time when you you sit with them in a

745
00:33:38,760 --> 00:33:40,620
room and you explain them what you have

746
00:33:40,620 --> 00:33:43,500
and and that's that's painful I remember

747
00:33:43,500 --> 00:33:46,019
as a pen tester this time it's often

748
00:33:46,019 --> 00:33:48,539
very hard to understand complex systems

749
00:33:48,539 --> 00:33:50,760
if you are looking at something visual

750
00:33:50,760 --> 00:33:52,919
where you have actually names and

751
00:33:52,919 --> 00:33:54,899
something you can relate to that will

752
00:33:54,899 --> 00:33:57,480
accelerate the the communication with

753
00:33:57,480 --> 00:34:00,480
the pen testers a lot and

754
00:34:00,480 --> 00:34:03,960
obviously if you are doing closed box

755
00:34:03,960 --> 00:34:07,860
testing well you can still access to

756
00:34:07,860 --> 00:34:10,080
such an observability product Maybe by

757
00:34:10,080 --> 00:34:12,659
doing recognition on stack Overflow you

758
00:34:12,659 --> 00:34:15,060
can find the UPS or the dev of a company

759
00:34:15,060 --> 00:34:17,820
may be looking on GitHub and you can

760
00:34:17,820 --> 00:34:20,879
still access this to their observability

761
00:34:20,879 --> 00:34:22,399
platform so

762
00:34:22,399 --> 00:34:25,560
if if you manage to do that that means

763
00:34:25,560 --> 00:34:27,239
that you have a lot of information about

764
00:34:27,239 --> 00:34:30,839
the system is almost as if you were an

765
00:34:30,839 --> 00:34:34,980
Insider to the to the company

766
00:34:34,980 --> 00:34:37,679
so I think that's that's a

767
00:34:37,679 --> 00:34:42,239
of an under uh rated way to access uh

768
00:34:42,239 --> 00:34:44,339
systems but I'm guessing we will see

769
00:34:44,339 --> 00:34:45,839
more and more things about that in the

770
00:34:45,839 --> 00:34:47,699
in the future

771
00:34:47,699 --> 00:34:51,418
so I've talked of the of the present

772
00:34:51,418 --> 00:34:53,699
right and I give you uh three examples

773
00:34:53,699 --> 00:34:56,040
of of what we can do with the systems

774
00:34:56,040 --> 00:34:57,480
but

775
00:34:57,480 --> 00:34:58,380
um

776
00:34:58,380 --> 00:35:01,380
this space is moving super fast because

777
00:35:01,380 --> 00:35:04,440
you know we have more and more of code

778
00:35:04,440 --> 00:35:06,540
everywhere software is eating the work

779
00:35:06,540 --> 00:35:09,060
performance and reliability and quality

780
00:35:09,060 --> 00:35:10,800
is more and more important for all of us

781
00:35:10,800 --> 00:35:14,220
so those systems are evolving

782
00:35:14,220 --> 00:35:19,320
in terms of quality a lot and so what I

783
00:35:19,320 --> 00:35:20,760
think we're going to be able to do in

784
00:35:20,760 --> 00:35:24,599
the future that will even accelerate uh

785
00:35:24,599 --> 00:35:27,180
security teams is for instance we've

786
00:35:27,180 --> 00:35:29,460
seen profiles you've seen like raw

787
00:35:29,460 --> 00:35:32,820
functions in that we will be able to

788
00:35:32,820 --> 00:35:36,540
link them to URL to path to routes to

789
00:35:36,540 --> 00:35:39,300
SQL queries so you will have a matching

790
00:35:39,300 --> 00:35:40,520
between

791
00:35:40,520 --> 00:35:43,079
what external system and application in

792
00:35:43,079 --> 00:35:45,900
doing down to the line of code that is

793
00:35:45,900 --> 00:35:48,839
actually performing those queries

794
00:35:48,839 --> 00:35:50,460
you will also get information about

795
00:35:50,460 --> 00:35:53,460
vulnerable libraries right you you so we

796
00:35:53,460 --> 00:35:55,680
can already access the libraries uh well

797
00:35:55,680 --> 00:35:57,660
knowing which vulnerability is running

798
00:35:57,660 --> 00:36:01,079
where when and on what traces it's

799
00:36:01,079 --> 00:36:02,760
already I think a few vendors are

800
00:36:02,760 --> 00:36:04,680
already doing it it's it's like super

801
00:36:04,680 --> 00:36:06,119
close

802
00:36:06,119 --> 00:36:08,720
vulnerability detection we have tools

803
00:36:08,720 --> 00:36:14,520
that are using uh for instance uh

804
00:36:14,520 --> 00:36:17,280
um source code not source code but Trend

805
00:36:17,280 --> 00:36:20,220
time insights in order to build a

806
00:36:20,220 --> 00:36:22,859
vulnerability detection those things

807
00:36:22,859 --> 00:36:26,400
could come within those products because

808
00:36:26,400 --> 00:36:28,500
that's again something that is useful

809
00:36:28,500 --> 00:36:30,180
for developers and that will also be

810
00:36:30,180 --> 00:36:33,839
extremely useful for security teams

811
00:36:33,839 --> 00:36:35,640
um and last but not least the source

812
00:36:35,640 --> 00:36:38,220
code integration because yes

813
00:36:38,220 --> 00:36:39,119
um

814
00:36:39,119 --> 00:36:40,859
if you can access the source code of

815
00:36:40,859 --> 00:36:42,240
those things that means you can very

816
00:36:42,240 --> 00:36:46,440
easily pinpoint a commit to a given

817
00:36:46,440 --> 00:36:48,540
um vulnerability for instance but also

818
00:36:48,540 --> 00:36:50,640
if you have a behavior that you cannot

819
00:36:50,640 --> 00:36:53,820
explain as a tester then using the

820
00:36:53,820 --> 00:36:56,119
source code will help you deep

821
00:36:56,119 --> 00:36:59,160
dive deeper and get the the full

822
00:36:59,160 --> 00:37:01,260
understanding of what the application is

823
00:37:01,260 --> 00:37:03,380
doing

824
00:37:04,400 --> 00:37:08,880
alternative so you have all of that I

825
00:37:08,880 --> 00:37:13,440
uh didn't use most of them I'm familiar

826
00:37:13,440 --> 00:37:15,780
with with them a bit but those are

827
00:37:15,780 --> 00:37:17,520
things you can you can look you can look

828
00:37:17,520 --> 00:37:19,079
at if you want to get started with the

829
00:37:19,079 --> 00:37:21,900
with the open source

830
00:37:21,900 --> 00:37:23,700
this is it if you have any questions

831
00:37:23,700 --> 00:37:26,400
I'll take it otherwise you have this QR

832
00:37:26,400 --> 00:37:30,119
code with all the resources and Links of

833
00:37:30,119 --> 00:37:32,460
that presentation the source code for

834
00:37:32,460 --> 00:37:36,060
the burp extension link to datadog which

835
00:37:36,060 --> 00:37:37,740
has a free trial if you want to test it

836
00:37:37,740 --> 00:37:39,300
and

837
00:37:39,300 --> 00:37:42,240
now to detect we are hiring we have an

838
00:37:42,240 --> 00:37:45,300
office in Lisbon Paris New York Madrid

839
00:37:45,300 --> 00:37:49,260
and and we we take remote job Affairs if

840
00:37:49,260 --> 00:37:52,200
if you we have a boot just right there

841
00:37:52,200 --> 00:37:55,320
feel free to to jump in and say hi

842
00:37:55,320 --> 00:37:59,160
any questions timah

843
00:37:59,160 --> 00:38:01,700
any questions

844
00:38:08,220 --> 00:38:10,380
so much for your presentation thank you

845
00:38:10,380 --> 00:38:12,270
if anyone who

846
00:38:12,270 --> 00:38:19,859
[Applause]

847
00:38:19,859 --> 00:38:22,040
foreign

848
00:38:29,060 --> 00:38:31,200
observability product and I'm very

849
00:38:31,200 --> 00:38:34,819
interested to to talk to you right now

850
00:38:38,180 --> 00:38:46,150
[Applause]

851
00:38:46,150 --> 00:38:50,590
[Music]

