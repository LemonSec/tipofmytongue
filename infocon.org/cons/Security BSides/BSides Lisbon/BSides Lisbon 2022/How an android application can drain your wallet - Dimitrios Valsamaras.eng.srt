1
00:00:01,620 --> 00:00:02,730
foreign

2
00:00:02,730 --> 00:00:05,540
[Music]

3
00:00:05,540 --> 00:00:09,420
computer security since 2002 and I

4
00:00:09,420 --> 00:00:11,700
started actually I was a member of one

5
00:00:11,700 --> 00:00:13,320
of the first reverse engineering groups

6
00:00:13,320 --> 00:00:15,360
groups back in Greece

7
00:00:15,360 --> 00:00:18,539
and my first years in my career I spent

8
00:00:18,539 --> 00:00:21,359
them uh by working as a network security

9
00:00:21,359 --> 00:00:23,640
engineer then I jumped to developing

10
00:00:23,640 --> 00:00:26,880
and the last about five years I focused

11
00:00:26,880 --> 00:00:28,080
on Direct Security and especially

12
00:00:28,080 --> 00:00:30,900
malware now about a year ago I joined

13
00:00:30,900 --> 00:00:32,880
Microsoft's Defender research team as a

14
00:00:32,880 --> 00:00:34,739
senior security researcher

15
00:00:34,739 --> 00:00:38,040
and the reason that I'm uh here is to

16
00:00:38,040 --> 00:00:39,660
show you how an Android application can

17
00:00:39,660 --> 00:00:42,420
drain your wallet from the sense that

18
00:00:42,420 --> 00:00:44,640
one android application how an Android

19
00:00:44,640 --> 00:00:46,200
application can actually have a

20
00:00:46,200 --> 00:00:48,899
financially impact on the end user

21
00:00:48,899 --> 00:00:52,200
and uh before we start this presentation

22
00:00:52,200 --> 00:00:55,440
let me go through the outline so first

23
00:00:55,440 --> 00:00:56,460
of all

24
00:00:56,460 --> 00:00:58,920
we're going to see what is a premium

25
00:00:58,920 --> 00:01:01,260
subscription how this is performing how

26
00:01:01,260 --> 00:01:02,879
it can be used in order to enable the

27
00:01:02,879 --> 00:01:05,640
users to purchase Services products

28
00:01:05,640 --> 00:01:07,260
online and get charged in their phone

29
00:01:07,260 --> 00:01:08,340
bill

30
00:01:08,340 --> 00:01:10,920
uh next we're going to see how

31
00:01:10,920 --> 00:01:13,320
a malware how an Android app can perform

32
00:01:13,320 --> 00:01:15,900
such a subscription in let's say a

33
00:01:15,900 --> 00:01:17,880
deceptive way without the user being

34
00:01:17,880 --> 00:01:19,799
aware of it

35
00:01:19,799 --> 00:01:21,540
then we are going to to see how this

36
00:01:21,540 --> 00:01:23,220
malware how this type of malware managed

37
00:01:23,220 --> 00:01:25,080
to evade detection being one of the most

38
00:01:25,080 --> 00:01:28,979
let's say prevalent malware categories

39
00:01:28,979 --> 00:01:31,040
in the Google Play Store

40
00:01:31,040 --> 00:01:34,439
then the other thing is how it gets

41
00:01:34,439 --> 00:01:35,640
published in the first place on the

42
00:01:35,640 --> 00:01:37,680
Google Play Store how the developers how

43
00:01:37,680 --> 00:01:39,540
the malware developers managed to

44
00:01:39,540 --> 00:01:41,100
publish the software in the Google Play

45
00:01:41,100 --> 00:01:42,720
Store in the first place

46
00:01:42,720 --> 00:01:45,840
then we're going to talk

47
00:01:45,840 --> 00:01:48,060
about some rough ideas on how we can

48
00:01:48,060 --> 00:01:50,100
detect this type of malware

49
00:01:50,100 --> 00:01:52,979
and finally again some rough ideas on

50
00:01:52,979 --> 00:01:55,320
how actually we can prevent this type of

51
00:01:55,320 --> 00:01:57,240
malware from even being published in

52
00:01:57,240 --> 00:01:58,740
Google Play Store

53
00:01:58,740 --> 00:02:02,880
now uh before I start explaining how

54
00:02:02,880 --> 00:02:04,979
this malware works let me go through

55
00:02:04,979 --> 00:02:06,719
some definitions that we're going to use

56
00:02:06,719 --> 00:02:08,520
in the next few slides and the first

57
00:02:08,520 --> 00:02:10,440
thing that I want to talk to you about

58
00:02:10,440 --> 00:02:12,720
and what to Define is what is building

59
00:02:12,720 --> 00:02:13,739
from

60
00:02:13,739 --> 00:02:16,560
so by billing fraud we refer to the

61
00:02:16,560 --> 00:02:20,099
malware category which contains code

62
00:02:20,099 --> 00:02:22,980
that charges the user in an

63
00:02:22,980 --> 00:02:25,680
intentionally deceptive way and we have

64
00:02:25,680 --> 00:02:27,239
a couple of subcategories of building

65
00:02:27,239 --> 00:02:30,060
fraud we have Golf Road we have SMS Road

66
00:02:30,060 --> 00:02:32,760
and we have toll road with the last one

67
00:02:32,760 --> 00:02:34,920
being the most interesting one and the

68
00:02:34,920 --> 00:02:36,660
one that we are going to focus in this

69
00:02:36,660 --> 00:02:38,340
presentation

70
00:02:38,340 --> 00:02:40,260
now when it comes to toll road when it

71
00:02:40,260 --> 00:02:42,360
comes to this type of malware we're

72
00:02:42,360 --> 00:02:44,760
talking about the malware family with a

73
00:02:44,760 --> 00:02:47,760
multi-billion dollar yearly revenue and

74
00:02:47,760 --> 00:02:49,319
one of the most prevalent Marvel

75
00:02:49,319 --> 00:02:50,940
categories according to the Googles

76
00:02:50,940 --> 00:02:52,140
according to the Google Play Store

77
00:02:52,140 --> 00:02:53,819
transparency report

78
00:02:53,819 --> 00:02:56,879
uh it is also very popular I'm sure that

79
00:02:56,879 --> 00:02:58,620
many of you have heard about the Joker

80
00:02:58,620 --> 00:03:00,360
family some of you have heard also about

81
00:03:00,360 --> 00:03:04,440
the bread family and uh this is um

82
00:03:04,440 --> 00:03:07,500
although actually there's no not a lot

83
00:03:07,500 --> 00:03:09,180
of posts out there how this malware

84
00:03:09,180 --> 00:03:13,260
works and uh it is such such a popular

85
00:03:13,260 --> 00:03:15,599
let's say Marvel due to the fact that it

86
00:03:15,599 --> 00:03:17,459
used the Google Play Store as its main

87
00:03:17,459 --> 00:03:19,500
distribution mean

88
00:03:19,500 --> 00:03:21,480
now the next thing that I want to talk

89
00:03:21,480 --> 00:03:24,599
about is uh what is the WAP billing

90
00:03:24,599 --> 00:03:25,620
mechanism it's something that we're

91
00:03:25,620 --> 00:03:28,319
going to use in the next slides so let

92
00:03:28,319 --> 00:03:29,519
me Define what is a web building

93
00:03:29,519 --> 00:03:32,760
mechanism so by this we refer to the

94
00:03:32,760 --> 00:03:35,040
billing mechanism which uses the

95
00:03:35,040 --> 00:03:37,379
wireless application protocol in order

96
00:03:37,379 --> 00:03:40,200
to allow the user to purchase products

97
00:03:40,200 --> 00:03:42,360
services online in good charts in their

98
00:03:42,360 --> 00:03:43,500
phone bill

99
00:03:43,500 --> 00:03:46,680
uh here again on the right side I have

100
00:03:46,680 --> 00:03:49,260
an example of such a subscription flow

101
00:03:49,260 --> 00:03:51,780
so how someone can subscribe to such a

102
00:03:51,780 --> 00:03:54,720
service so first of all only customers

103
00:03:54,720 --> 00:03:57,540
can subscribe to be eligible for

104
00:03:57,540 --> 00:04:00,720
subscriber benefits and we who who are

105
00:04:00,720 --> 00:04:02,040
the customers here we're talking about

106
00:04:02,040 --> 00:04:04,500
people who are let's say registered to

107
00:04:04,500 --> 00:04:07,080
specific Sim operator

108
00:04:07,080 --> 00:04:10,739
so these uh users who are resistant to

109
00:04:10,739 --> 00:04:13,159
specific Sim operators May subscribe

110
00:04:13,159 --> 00:04:16,978
by using the respective WAP enabled

111
00:04:16,978 --> 00:04:19,978
website or the Android app as it points

112
00:04:19,978 --> 00:04:22,199
out in the 4.243

113
00:04:22,199 --> 00:04:26,460
and the customer will receive an SMS

114
00:04:26,460 --> 00:04:28,919
which informed about will inform about

115
00:04:28,919 --> 00:04:33,180
the billing price uh the rates the

116
00:04:33,180 --> 00:04:34,979
billing interval and the next billing

117
00:04:34,979 --> 00:04:38,160
date and please note on the the last one

118
00:04:38,160 --> 00:04:40,380
which says that the customer cannot

119
00:04:40,380 --> 00:04:43,020
subscribe to one's Subscription Service

120
00:04:43,020 --> 00:04:45,000
more than one time

121
00:04:45,000 --> 00:04:46,380
we're going to see how actually the

122
00:04:46,380 --> 00:04:48,840
malware tries to track that and how it's

123
00:04:48,840 --> 00:04:50,280
going to bypass that in the next slide

124
00:04:50,280 --> 00:04:51,360
again

125
00:04:51,360 --> 00:04:55,380
so let me summarize what actions a user

126
00:04:55,380 --> 00:04:57,060
should take in order to subscribe to a

127
00:04:57,060 --> 00:04:58,740
service so as I said before first of all

128
00:04:58,740 --> 00:05:02,220
it has to navigate to a specific website

129
00:05:02,220 --> 00:05:04,199
by the time that the server is going to

130
00:05:04,199 --> 00:05:05,460
receive this request it's going to send

131
00:05:05,460 --> 00:05:08,280
back what we call a landing page

132
00:05:08,280 --> 00:05:10,560
this landing page contains a

133
00:05:10,560 --> 00:05:12,600
subscription button on which the user

134
00:05:12,600 --> 00:05:15,240
has to click on it and when the server

135
00:05:15,240 --> 00:05:17,160
receives the new request it's going to

136
00:05:17,160 --> 00:05:20,460
send back what we call a pin an OTP a

137
00:05:20,460 --> 00:05:24,539
pin this is sent usually using the nsms

138
00:05:24,539 --> 00:05:26,400
so by the time that the girl is going to

139
00:05:26,400 --> 00:05:28,560
receive this SMS it has to send it back

140
00:05:28,560 --> 00:05:30,060
to the server the server is going to

141
00:05:30,060 --> 00:05:33,600
verify it and finally send uh back the

142
00:05:33,600 --> 00:05:35,460
SMS that they took before

143
00:05:35,460 --> 00:05:38,039
which informed the user about uh the

144
00:05:38,039 --> 00:05:39,960
billing rate and all this kind of uh

145
00:05:39,960 --> 00:05:40,979
things

146
00:05:40,979 --> 00:05:43,199
and the other thing that

147
00:05:43,199 --> 00:05:46,320
please know you I mean notice that the

148
00:05:46,320 --> 00:05:48,360
steps four up to six

149
00:05:48,360 --> 00:05:50,880
are not always there this flow actually

150
00:05:50,880 --> 00:05:54,000
depends on each Sim operator someone may

151
00:05:54,000 --> 00:05:56,699
use this one or someone maybe a little

152
00:05:56,699 --> 00:05:58,620
bit different but it's all about the

153
00:05:58,620 --> 00:06:01,620
same it's all about this this one here

154
00:06:01,620 --> 00:06:04,259
now what is a fraudulent subscription

155
00:06:04,259 --> 00:06:06,660
so a program subscription this is a

156
00:06:06,660 --> 00:06:09,120
subscription which takes place without

157
00:06:09,120 --> 00:06:11,639
user interaction the user won't interact

158
00:06:11,639 --> 00:06:13,320
with the software

159
00:06:13,320 --> 00:06:16,500
without uh user consent and actually

160
00:06:16,500 --> 00:06:18,660
without even being noticeable to the

161
00:06:18,660 --> 00:06:21,539
user so the user won't understand

162
00:06:21,539 --> 00:06:24,060
anything about it so the malware has to

163
00:06:24,060 --> 00:06:25,979
take these steps that the user did

164
00:06:25,979 --> 00:06:28,740
before in order to achieve this type of

165
00:06:28,740 --> 00:06:31,500
subscription so first of all

166
00:06:31,500 --> 00:06:33,780
it has to disable the Wi-Fi connection

167
00:06:33,780 --> 00:06:35,340
or weight

168
00:06:35,340 --> 00:06:37,680
for the device to switch the mobile

169
00:06:37,680 --> 00:06:39,780
network that's the first step

170
00:06:39,780 --> 00:06:43,199
then navigate to the subscription page

171
00:06:43,199 --> 00:06:45,479
how then

172
00:06:45,479 --> 00:06:47,639
simulate the user click on the

173
00:06:47,639 --> 00:06:48,960
subscription button

174
00:06:48,960 --> 00:06:52,139
intercept the pin which is sent from the

175
00:06:52,139 --> 00:06:55,740
server to the user send this OTB back to

176
00:06:55,740 --> 00:06:57,780
the server and finally keep the process

177
00:06:57,780 --> 00:07:00,000
silent in order for the user not to

178
00:07:00,000 --> 00:07:01,500
understand and not actually the process

179
00:07:01,500 --> 00:07:04,139
to be noticeable to the user

180
00:07:04,139 --> 00:07:05,840
so

181
00:07:05,840 --> 00:07:08,639
one very important step before

182
00:07:08,639 --> 00:07:11,100
performing these actions is to identify

183
00:07:11,100 --> 00:07:13,259
the same operator of the device the same

184
00:07:13,259 --> 00:07:15,419
operator actually on which the device

185
00:07:15,419 --> 00:07:17,819
operates and this is due to the fact

186
00:07:17,819 --> 00:07:21,000
that each payload each app

187
00:07:21,000 --> 00:07:23,699
targets specific Sim operators

188
00:07:23,699 --> 00:07:25,560
and as I said before each Sim operator

189
00:07:25,560 --> 00:07:27,840
has a specific flow so the malware has

190
00:07:27,840 --> 00:07:28,919
to take

191
00:07:28,919 --> 00:07:31,319
specific steps and this is due to the

192
00:07:31,319 --> 00:07:33,599
fact that they target specific Sim

193
00:07:33,599 --> 00:07:35,280
operators this is why actually their

194
00:07:35,280 --> 00:07:38,819
target this specific Sim operators so

195
00:07:38,819 --> 00:07:40,080
this type of information can be

196
00:07:40,080 --> 00:07:42,599
retrieved from your device by using them

197
00:07:42,599 --> 00:07:46,680
and see and MCC codes and uh for example

198
00:07:46,680 --> 00:07:49,380
an app an Android app can simply call

199
00:07:49,380 --> 00:07:52,919
the getsim operator method or uh the get

200
00:07:52,919 --> 00:07:54,360
method of the system properties class

201
00:07:54,360 --> 00:07:56,340
and get these codes the only difference

202
00:07:56,340 --> 00:07:58,860
between these two goals is actually the

203
00:07:58,860 --> 00:08:00,860
first one can simply be invoked by

204
00:08:00,860 --> 00:08:03,060
importing the telephone manager class

205
00:08:03,060 --> 00:08:04,560
why the second one for those who are

206
00:08:04,560 --> 00:08:07,199
similar familiar with Java it has to be

207
00:08:07,199 --> 00:08:10,979
uh called using reflection now on the

208
00:08:10,979 --> 00:08:14,699
lower side I have a one example of

209
00:08:14,699 --> 00:08:17,580
one of the latest Joker payloads which

210
00:08:17,580 --> 00:08:19,379
does exactly that what I said right now

211
00:08:19,379 --> 00:08:21,360
so it will check if the Sim operator

212
00:08:21,360 --> 00:08:24,000
starts with 655 and then it will start

213
00:08:24,000 --> 00:08:25,919
the steps that we're going to see in the

214
00:08:25,919 --> 00:08:29,520
next slides and uh at this point the 655

215
00:08:29,520 --> 00:08:31,259
actually is the same operator which

216
00:08:31,259 --> 00:08:33,479
corresponds to South Africa Sim operator

217
00:08:33,479 --> 00:08:37,159
all right now

218
00:08:38,099 --> 00:08:39,958
make sure that the device operates on a

219
00:08:39,958 --> 00:08:42,360
mobile network so how we do that

220
00:08:42,360 --> 00:08:44,580
so either wait for the device to switch

221
00:08:44,580 --> 00:08:47,339
or either for the device switch wait for

222
00:08:47,339 --> 00:08:52,200
the device so get a network info objects

223
00:08:52,200 --> 00:08:54,839
observe this object and try to get the

224
00:08:54,839 --> 00:08:57,240
type of thing of the network either type

225
00:08:57,240 --> 00:09:00,420
of network is mobile then it's start to

226
00:09:00,420 --> 00:09:02,640
do the next steps now the other way is

227
00:09:02,640 --> 00:09:04,740
to disable the Wi-Fi of

228
00:09:04,740 --> 00:09:08,700
um of uh the device and this before SDK

229
00:09:08,700 --> 00:09:10,260
29

230
00:09:10,260 --> 00:09:12,360
was done by using the said Wi-Fi enable

231
00:09:12,360 --> 00:09:16,380
of the Wi-Fi manager class and uh

232
00:09:16,380 --> 00:09:19,200
after SDK 28 we saw something different

233
00:09:19,200 --> 00:09:21,720
actually this one was deprecated in 29

234
00:09:21,720 --> 00:09:24,120
so we saw something different which

235
00:09:24,120 --> 00:09:27,540
actually was I could say better for the

236
00:09:27,540 --> 00:09:30,600
malware developers so what we saw is

237
00:09:30,600 --> 00:09:33,000
that they were creating a request uh

238
00:09:33,000 --> 00:09:34,980
Builder a network request Builder object

239
00:09:34,980 --> 00:09:38,940
so Define some specific capabilities in

240
00:09:38,940 --> 00:09:40,920
this Builder

241
00:09:40,920 --> 00:09:42,779
then request this network from the

242
00:09:42,779 --> 00:09:44,700
connectivity manager and finally finally

243
00:09:44,700 --> 00:09:48,180
when this network was let's say uh ready

244
00:09:48,180 --> 00:09:50,640
by the process to the network and again

245
00:09:50,640 --> 00:09:52,800
here on the right side I have an example

246
00:09:52,800 --> 00:09:56,100
of how this flow goes on the upper side

247
00:09:56,100 --> 00:09:58,019
I have the actual code wire on the lower

248
00:09:58,019 --> 00:10:00,360
one I have a demo code which is easier

249
00:10:00,360 --> 00:10:02,519
to read YouTube then have obfuscation

250
00:10:02,519 --> 00:10:05,339
it's not duplicated so create a network

251
00:10:05,339 --> 00:10:08,940
request Builder object Define some

252
00:10:08,940 --> 00:10:10,680
capabilities there we want

253
00:10:10,680 --> 00:10:12,899
the device will be able to connect to

254
00:10:12,899 --> 00:10:15,060
the internet and we want to use a mobile

255
00:10:15,060 --> 00:10:16,140
network

256
00:10:16,140 --> 00:10:19,260
then uh request this network user

257
00:10:19,260 --> 00:10:21,420
connectivity manager and then

258
00:10:21,420 --> 00:10:23,100
finally when the network is available

259
00:10:23,100 --> 00:10:24,959
just bind the process to the network and

260
00:10:24,959 --> 00:10:27,779
use the network now just note here that

261
00:10:27,779 --> 00:10:29,880
the device can also have the Wi-Fi

262
00:10:29,880 --> 00:10:33,779
enabled and this app can just bind to

263
00:10:33,779 --> 00:10:36,060
the mobile network so it's even even

264
00:10:36,060 --> 00:10:38,100
better for the after this update was

265
00:10:38,100 --> 00:10:39,779
even better for the malware developers

266
00:10:39,779 --> 00:10:41,820
due to the fact that they now they don't

267
00:10:41,820 --> 00:10:45,180
have even to disable the Wi-Fi anyway

268
00:10:45,180 --> 00:10:47,519
the next step is

269
00:10:47,519 --> 00:10:50,940
to get offers to get the websites

270
00:10:50,940 --> 00:10:52,920
where the malware is supposed to

271
00:10:52,920 --> 00:10:55,200
navigate in order to to do this type of

272
00:10:55,200 --> 00:10:57,360
actions so it will communicate with the

273
00:10:57,360 --> 00:10:59,279
command control server the communication

274
00:10:59,279 --> 00:11:00,959
is usually

275
00:11:00,959 --> 00:11:04,800
uh customized what I mean I mean you say

276
00:11:04,800 --> 00:11:07,620
the encoded or they use some kind of

277
00:11:07,620 --> 00:11:10,519
customized encoding or encryption or a

278
00:11:10,519 --> 00:11:12,540
zipped or something

279
00:11:12,540 --> 00:11:15,420
so they will retrieve usually they

280
00:11:15,420 --> 00:11:16,860
retrieve some kind of a Json object

281
00:11:16,860 --> 00:11:20,519
which contains something similar to what

282
00:11:20,519 --> 00:11:23,160
you see here so something important here

283
00:11:23,160 --> 00:11:27,000
is the the offer URLs so it will get one

284
00:11:27,000 --> 00:11:29,339
of these software urls which will lead

285
00:11:29,339 --> 00:11:31,260
to a redirection chain as you see here

286
00:11:31,260 --> 00:11:32,940
and this is the direction chain will

287
00:11:32,940 --> 00:11:35,760
finally lead to the landing page now

288
00:11:35,760 --> 00:11:37,860
this landing page will be loaded to a

289
00:11:37,860 --> 00:11:39,540
webview which is not visible to the user

290
00:11:39,540 --> 00:11:41,220
so the user again

291
00:11:41,220 --> 00:11:42,720
so far

292
00:11:42,720 --> 00:11:45,540
won't understand something

293
00:11:45,540 --> 00:11:49,019
now another let's say an important

294
00:11:49,019 --> 00:11:51,660
Android operating system component which

295
00:11:51,660 --> 00:11:53,760
is used from this type of malware is

296
00:11:53,760 --> 00:11:56,339
Android OS Handler and what is Handler

297
00:11:56,339 --> 00:11:58,980
is doing is actually observing the

298
00:11:58,980 --> 00:12:01,500
subscription process the cycle and

299
00:12:01,500 --> 00:12:04,680
acting according to the phase that the

300
00:12:04,680 --> 00:12:06,959
subscription process is currently in so

301
00:12:06,959 --> 00:12:10,860
when let's say the page was loaded on

302
00:12:10,860 --> 00:12:12,600
the webview the malware will send a

303
00:12:12,600 --> 00:12:14,220
message to this Handler

304
00:12:14,220 --> 00:12:16,680
or when SMS has been received the

305
00:12:16,680 --> 00:12:17,880
malware will send a message to this

306
00:12:17,880 --> 00:12:21,120
Handler and according to the ID

307
00:12:21,120 --> 00:12:23,100
according to like what parameter of this

308
00:12:23,100 --> 00:12:25,079
message is going to perform some type of

309
00:12:25,079 --> 00:12:26,220
an action

310
00:12:26,220 --> 00:12:29,100
so here I have again uh an actual code

311
00:12:29,100 --> 00:12:31,920
which as you see gets a message checks

312
00:12:31,920 --> 00:12:34,380
the word parameter and Knocks

313
00:12:34,380 --> 00:12:36,660
accordingly according to the phase

314
00:12:36,660 --> 00:12:39,540
so one very important phrase is when the

315
00:12:39,540 --> 00:12:41,399
page is loading we are here now I mean

316
00:12:41,399 --> 00:12:43,860
we have loaded the landing page on the

317
00:12:43,860 --> 00:12:46,019
webview so how now

318
00:12:46,019 --> 00:12:47,940
uh the model we're supposed to simulate

319
00:12:47,940 --> 00:12:51,000
the click on the subscription button

320
00:12:51,000 --> 00:12:53,760
so we saw a couple of ways of doing that

321
00:12:53,760 --> 00:12:55,260
of using for example JavaScript

322
00:12:55,260 --> 00:12:57,300
interface or something but a very common

323
00:12:57,300 --> 00:12:59,279
way of doing that is by injecting

324
00:12:59,279 --> 00:13:00,779
JavaScript code then JavaScript code

325
00:13:00,779 --> 00:13:02,639
similar to the one that you see right

326
00:13:02,639 --> 00:13:04,500
here so what this code is doing is

327
00:13:04,500 --> 00:13:06,300
actually scrapping the page

328
00:13:06,300 --> 00:13:08,639
and searching for elements which can be

329
00:13:08,639 --> 00:13:11,459
clicked or submitted then it will filter

330
00:13:11,459 --> 00:13:14,040
those elements let me go through the

331
00:13:14,040 --> 00:13:15,959
yeah so it will filter those elements

332
00:13:15,959 --> 00:13:18,480
searching for uh ones that they are

333
00:13:18,480 --> 00:13:20,100
let's say relevant to the subscription

334
00:13:20,100 --> 00:13:22,740
process so search for tags like confirm

335
00:13:22,740 --> 00:13:25,560
yes click

336
00:13:25,560 --> 00:13:27,720
things which like I said are relevant to

337
00:13:27,720 --> 00:13:29,639
the subscription process then it will

338
00:13:29,639 --> 00:13:30,480
send

339
00:13:30,480 --> 00:13:33,000
all these elements to the function C

340
00:13:33,000 --> 00:13:34,980
which you see here and what this

341
00:13:34,980 --> 00:13:36,120
function does

342
00:13:36,120 --> 00:13:39,120
is actually acting in two steps so the

343
00:13:39,120 --> 00:13:41,760
first step is to call the jdh function

344
00:13:41,760 --> 00:13:44,220
now this jdh function will check for a

345
00:13:44,220 --> 00:13:47,220
specific cookie so if this cookie has

346
00:13:47,220 --> 00:13:50,700
been set already it will return files

347
00:13:50,700 --> 00:13:53,100
if this cookie has not been set it will

348
00:13:53,100 --> 00:13:54,899
return true and we'll set the cookie now

349
00:13:54,899 --> 00:13:56,519
what this cookie does is actually

350
00:13:56,519 --> 00:13:59,339
marking the page in order to for the

351
00:13:59,339 --> 00:14:02,519
malware to to understand that this page

352
00:14:02,519 --> 00:14:04,860
has been visited in the past so we

353
00:14:04,860 --> 00:14:06,420
subscribe the user already to the

354
00:14:06,420 --> 00:14:07,620
service we don't have to subscribe the

355
00:14:07,620 --> 00:14:09,660
user again we can't subscribe the user

356
00:14:09,660 --> 00:14:11,820
again so this cookie does exactly that

357
00:14:11,820 --> 00:14:13,740
just marking the page which the malware

358
00:14:13,740 --> 00:14:16,200
already subscribes the user

359
00:14:16,200 --> 00:14:18,839
so it will send back to the function C

360
00:14:18,839 --> 00:14:21,660
that I explained to you before

361
00:14:21,660 --> 00:14:24,720
true or false and depending on this uh

362
00:14:24,720 --> 00:14:27,000
parameter the function will just click

363
00:14:27,000 --> 00:14:29,760
or submit the specific element

364
00:14:29,760 --> 00:14:30,899
now

365
00:14:30,899 --> 00:14:32,760
okay now we are the point that the

366
00:14:32,760 --> 00:14:33,779
malware

367
00:14:33,779 --> 00:14:35,399
let's say simulate the click on the

368
00:14:35,399 --> 00:14:38,100
subscription button now the next step is

369
00:14:38,100 --> 00:14:41,220
uh to intercept the pin which is sent

370
00:14:41,220 --> 00:14:44,040
from the server to the user and we saw a

371
00:14:44,040 --> 00:14:46,079
couple of ways of doing that so one way

372
00:14:46,079 --> 00:14:47,699
is using an SMS broadcast receiver

373
00:14:47,699 --> 00:14:50,100
another way is binding the notification

374
00:14:50,100 --> 00:14:51,779
listener service

375
00:14:51,779 --> 00:14:54,240
another way is using the SMS content

376
00:14:54,240 --> 00:14:56,399
Observer and let's see how this thing

377
00:14:56,399 --> 00:14:59,459
works so uh

378
00:14:59,459 --> 00:15:02,040
in short the the app has to declare some

379
00:15:02,040 --> 00:15:05,459
specific permissions and it needs these

380
00:15:05,459 --> 00:15:07,079
permissions in order some of these

381
00:15:07,079 --> 00:15:08,399
permissions actually in order to define

382
00:15:08,399 --> 00:15:10,500
a broadcast receiver which broadcast

383
00:15:10,500 --> 00:15:11,820
receiver

384
00:15:11,820 --> 00:15:15,240
in the receive pullback it will just get

385
00:15:15,240 --> 00:15:18,060
the message then coming SMS

386
00:15:18,060 --> 00:15:20,459
examine the body of a message and search

387
00:15:20,459 --> 00:15:22,620
for specific keywords which let's say

388
00:15:22,620 --> 00:15:24,199
are

389
00:15:24,199 --> 00:15:25,860
corresponding to the specific Sim

390
00:15:25,860 --> 00:15:27,480
operators to the specific service

391
00:15:27,480 --> 00:15:28,680
provider

392
00:15:28,680 --> 00:15:31,560
so it will extract the PIN

393
00:15:31,560 --> 00:15:34,199
and use an API called the send text

394
00:15:34,199 --> 00:15:35,760
message for example in order to send

395
00:15:35,760 --> 00:15:39,420
this message back to the server another

396
00:15:39,420 --> 00:15:40,800
way which

397
00:15:40,800 --> 00:15:43,680
actually is the most common one and it

398
00:15:43,680 --> 00:15:45,600
has the same logic although it's a

399
00:15:45,600 --> 00:15:46,980
little bit different when it comes to

400
00:15:46,980 --> 00:15:48,899
implementation is by the notification

401
00:15:48,899 --> 00:15:50,279
listener service so extend the

402
00:15:50,279 --> 00:15:52,079
notification relation service create a

403
00:15:52,079 --> 00:15:52,800
class

404
00:15:52,800 --> 00:15:55,199
and when notification you know these

405
00:15:55,199 --> 00:15:56,639
notifications that they are posted in

406
00:15:56,639 --> 00:15:58,260
your device when this notification is

407
00:15:58,260 --> 00:16:02,519
posted check the body of notification

408
00:16:02,519 --> 00:16:04,860
and if again it has something let's say

409
00:16:04,860 --> 00:16:07,079
relevant to the subscription process

410
00:16:07,079 --> 00:16:09,300
extract the pin and send it back to the

411
00:16:09,300 --> 00:16:12,480
uh yeah I missed the the steps so send

412
00:16:12,480 --> 00:16:14,220
it back to the server

413
00:16:14,220 --> 00:16:17,579
uh the last one is using on the Observer

414
00:16:17,579 --> 00:16:19,860
so what the content Observer does is

415
00:16:19,860 --> 00:16:23,100
receiving callbacks one changes to a

416
00:16:23,100 --> 00:16:24,959
specific content happen and what we care

417
00:16:24,959 --> 00:16:28,019
more here is about the SMS content so

418
00:16:28,019 --> 00:16:31,019
when the device receives an SMS this

419
00:16:31,019 --> 00:16:33,360
content is going to change so the

420
00:16:33,360 --> 00:16:35,100
specific callback there the on change is

421
00:16:35,100 --> 00:16:37,380
going to be triggered and

422
00:16:37,380 --> 00:16:39,120
again the same process is going to

423
00:16:39,120 --> 00:16:41,220
filter out the body of the message and

424
00:16:41,220 --> 00:16:44,040
send the text to the server

425
00:16:44,040 --> 00:16:47,339
final step of this long process is to

426
00:16:47,339 --> 00:16:50,279
keep everything silent right and in

427
00:16:50,279 --> 00:16:54,660
order to do that and since SDK 18 every

428
00:16:54,660 --> 00:16:57,360
app which extends notification listener

429
00:16:57,360 --> 00:16:58,680
service is authorized to suppress

430
00:16:58,680 --> 00:17:00,660
notifications from other apps either way

431
00:17:00,660 --> 00:17:02,839
anyway and

432
00:17:02,839 --> 00:17:06,240
they are there are a couple of uh API

433
00:17:06,240 --> 00:17:07,980
calls in order to do that using the

434
00:17:07,980 --> 00:17:09,720
cancel or notifications or cancel

435
00:17:09,720 --> 00:17:13,220
specific one or cancel an area of them

436
00:17:13,220 --> 00:17:16,500
another way of doing that although it's

437
00:17:16,500 --> 00:17:18,480
a little bit more tricky due to the fact

438
00:17:18,480 --> 00:17:21,419
that the app has to be the default SMS

439
00:17:21,419 --> 00:17:26,220
up is to abort the broadcast when an SMS

440
00:17:26,220 --> 00:17:27,780
has been received so they extend the

441
00:17:27,780 --> 00:17:29,760
broadcast receiver the SMS has been

442
00:17:29,760 --> 00:17:31,440
received and they just abort the

443
00:17:31,440 --> 00:17:33,120
broadcast in order

444
00:17:33,120 --> 00:17:35,700
to dismiss this notification

445
00:17:35,700 --> 00:17:38,940
okay so just summarize the process

446
00:17:38,940 --> 00:17:40,860
because we said we talk about a lot of

447
00:17:40,860 --> 00:17:44,400
steps so what we talked so far the Web

448
00:17:44,400 --> 00:17:46,020
building mechanism so what is a web

449
00:17:46,020 --> 00:17:47,760
building mechanism it is a mechanism

450
00:17:47,760 --> 00:17:49,919
which can be used in order to let you

451
00:17:49,919 --> 00:17:51,539
purchase

452
00:17:51,539 --> 00:17:53,179
Services

453
00:17:53,179 --> 00:17:56,820
products online and don't have to pay

454
00:17:56,820 --> 00:17:58,679
directly you can't just get charging

455
00:17:58,679 --> 00:18:00,200
your phone bill

456
00:18:00,200 --> 00:18:02,760
this process requires from the user to

457
00:18:02,760 --> 00:18:05,940
take some specific steps right then this

458
00:18:05,940 --> 00:18:08,880
type of malware simulates the steps and

459
00:18:08,880 --> 00:18:11,820
these steps include to navigate to the

460
00:18:11,820 --> 00:18:13,260
website

461
00:18:13,260 --> 00:18:16,020
simulate the user clicks intercept the

462
00:18:16,020 --> 00:18:18,539
pin and submit it back to the to the

463
00:18:18,539 --> 00:18:21,000
service provider and suppress all the

464
00:18:21,000 --> 00:18:22,440
notifications in order to keep the

465
00:18:22,440 --> 00:18:24,780
process silent from the user all right

466
00:18:24,780 --> 00:18:26,700
cool so

467
00:18:26,700 --> 00:18:28,580
we're talking about the very long

468
00:18:28,580 --> 00:18:30,840
process we're talking about a lot of API

469
00:18:30,840 --> 00:18:32,280
calls we're talking about a lot of

470
00:18:32,280 --> 00:18:34,500
permissions so it can't be that hard

471
00:18:34,500 --> 00:18:36,240
many of you might wonder right now that

472
00:18:36,240 --> 00:18:38,280
it can be that hard to detect this type

473
00:18:38,280 --> 00:18:41,880
of malware how it can be so uh prevalent

474
00:18:41,880 --> 00:18:44,179
in the Google Play store since actually

475
00:18:44,179 --> 00:18:47,460
2017. so the answer here is actually

476
00:18:47,460 --> 00:18:49,320
that this model is very difficult to

477
00:18:49,320 --> 00:18:51,720
detect and it's very difficult to detect

478
00:18:51,720 --> 00:18:54,720
because it uses steganography it will

479
00:18:54,720 --> 00:18:57,780
use iconography the payloads are hidden

480
00:18:57,780 --> 00:19:00,000
in seemingly Banning files for example

481
00:19:00,000 --> 00:19:02,039
PNG files JPEG files in the assets

482
00:19:02,039 --> 00:19:04,620
folder or I mean the APK is huge so you

483
00:19:04,620 --> 00:19:07,200
can just hide it anywhere uh

484
00:19:07,200 --> 00:19:10,200
cryptography with keys different keys

485
00:19:10,200 --> 00:19:12,660
from one sample to the other so even

486
00:19:12,660 --> 00:19:15,419
let's say you create a signature which

487
00:19:15,419 --> 00:19:18,600
let's say detects some some of these

488
00:19:18,600 --> 00:19:20,400
samples or let's say one specific

489
00:19:20,400 --> 00:19:22,740
version of the samples then even each

490
00:19:22,740 --> 00:19:25,679
sample can have a different uh key and

491
00:19:25,679 --> 00:19:28,080
you can't just miss one sample to to

492
00:19:28,080 --> 00:19:29,400
another

493
00:19:29,400 --> 00:19:31,080
the other thing of course sophistication

494
00:19:31,080 --> 00:19:33,960
in order to evade static type signatures

495
00:19:33,960 --> 00:19:37,200
and the dynamical loading what I mean by

496
00:19:37,200 --> 00:19:40,380
Dynamic code loading the code which does

497
00:19:40,380 --> 00:19:43,140
the steps is doing the steps that you

498
00:19:43,140 --> 00:19:45,600
saw before is not actually there it's

499
00:19:45,600 --> 00:19:47,460
going to be downloaded from the web it's

500
00:19:47,460 --> 00:19:49,260
going to be loaded it's going to be

501
00:19:49,260 --> 00:19:50,580
executed

502
00:19:50,580 --> 00:19:52,500
and finally clocking and what is

503
00:19:52,500 --> 00:19:53,880
clocking clocking

504
00:19:53,880 --> 00:19:57,780
uh we refer actually to the set of

505
00:19:57,780 --> 00:20:01,440
um actions which the malware performs in

506
00:20:01,440 --> 00:20:02,940
order to detect if it's running in some

507
00:20:02,940 --> 00:20:05,460
kind of a VM or some specific condition

508
00:20:05,460 --> 00:20:07,500
doesn't apply for example it's not

509
00:20:07,500 --> 00:20:09,780
published in a Google Play or

510
00:20:09,780 --> 00:20:11,640
um there are actually funny things that

511
00:20:11,640 --> 00:20:14,220
we saw on how this malware tries to to

512
00:20:14,220 --> 00:20:16,679
evade actual to detect if it's running

513
00:20:16,679 --> 00:20:20,700
in a VM or something so let's see a

514
00:20:20,700 --> 00:20:23,220
specific case of one of the which which

515
00:20:23,220 --> 00:20:24,500
actually

516
00:20:24,500 --> 00:20:27,900
uh up let's say it concentrates all

517
00:20:27,900 --> 00:20:30,840
these things that we we talked so far

518
00:20:30,840 --> 00:20:32,340
so actually we're talking about the

519
00:20:32,340 --> 00:20:34,080
messenger app many of you have already

520
00:20:34,080 --> 00:20:35,880
installed this app in your device it's

521
00:20:35,880 --> 00:20:37,799
got quite a lot of installs it was

522
00:20:37,799 --> 00:20:39,780
actually published in Google Play Store

523
00:20:39,780 --> 00:20:42,660
before a few months so

524
00:20:42,660 --> 00:20:44,460
the first thing that this app is doing

525
00:20:44,460 --> 00:20:48,059
is simply check if it was published if

526
00:20:48,059 --> 00:20:49,440
it's still published in the Google Play

527
00:20:49,440 --> 00:20:51,480
Store so it will just send the request

528
00:20:51,480 --> 00:20:54,059
to the Play store and see if the

529
00:20:54,059 --> 00:20:56,280
specific package is still published so

530
00:20:56,280 --> 00:20:57,960
if it's still published then it will go

531
00:20:57,960 --> 00:21:00,419
to this process here

532
00:21:00,419 --> 00:21:02,460
so this project is doing the following

533
00:21:02,460 --> 00:21:05,340
so we are we are entering the stage one

534
00:21:05,340 --> 00:21:07,500
so what is going on here the malware

535
00:21:07,500 --> 00:21:09,539
will check the assets folder and try to

536
00:21:09,539 --> 00:21:13,020
find announce it which ends with 355

537
00:21:13,020 --> 00:21:15,000
right

538
00:21:15,000 --> 00:21:17,340
now please note that the first versions

539
00:21:17,340 --> 00:21:20,700
of this uh APK didn't have this asset

540
00:21:20,700 --> 00:21:23,340
there so it was weaponized it was

541
00:21:23,340 --> 00:21:25,260
actually this specific asset was added

542
00:21:25,260 --> 00:21:27,539
in the later versions so it will check

543
00:21:27,539 --> 00:21:30,360
for specific assets it will get this

544
00:21:30,360 --> 00:21:33,480
asset and then on the next step it will

545
00:21:33,480 --> 00:21:35,760
try to it will decrypt this asset

546
00:21:35,760 --> 00:21:38,700
actually using a key which is which was

547
00:21:38,700 --> 00:21:40,140
found to be hard-coded in the specific

548
00:21:40,140 --> 00:21:42,539
Dex file so it will decrypt this file

549
00:21:42,539 --> 00:21:44,640
using is

550
00:21:44,640 --> 00:21:46,620
and it will drop another file which is

551
00:21:46,620 --> 00:21:49,140
actually a net file in the data folder

552
00:21:49,140 --> 00:21:50,760
of the app

553
00:21:50,760 --> 00:21:53,460
uh this is the NL file it will be loaded

554
00:21:53,460 --> 00:21:56,220
using the system.load function and then

555
00:21:56,220 --> 00:21:59,640
it will call a native function which is

556
00:21:59,640 --> 00:22:02,039
implemented in the native layer so we

557
00:22:02,039 --> 00:22:05,100
are now on the native side and

558
00:22:05,100 --> 00:22:07,039
um

559
00:22:07,039 --> 00:22:11,340
when these uh elf gets let's say

560
00:22:11,340 --> 00:22:13,799
decrypted and dropped in the in the data

561
00:22:13,799 --> 00:22:15,419
directory you won't see much there if

562
00:22:15,419 --> 00:22:17,580
you try to decompile it all the strings

563
00:22:17,580 --> 00:22:18,840
work short

564
00:22:18,840 --> 00:22:21,539
uh so we have to go through the each one

565
00:22:21,539 --> 00:22:22,860
of them in order to decrypt it because

566
00:22:22,860 --> 00:22:25,140
they have different keys for each one

567
00:22:25,140 --> 00:22:29,159
and um for example this one has a key

568
00:22:29,159 --> 00:22:31,440
which was a gif another one has

569
00:22:31,440 --> 00:22:33,780
different something so by decrypting

570
00:22:33,780 --> 00:22:36,299
these strings show them back we found

571
00:22:36,299 --> 00:22:38,700
calls to the Dex class loader

572
00:22:38,700 --> 00:22:41,760
and actually we found calls to another

573
00:22:41,760 --> 00:22:45,480
class which wasn't anywhere I mean in

574
00:22:45,480 --> 00:22:47,400
the initial APK

575
00:22:47,400 --> 00:22:49,320
so it was proved that that when

576
00:22:49,320 --> 00:22:50,940
everything was there where all these

577
00:22:50,940 --> 00:22:52,559
let's say strings are decrypted

578
00:22:52,559 --> 00:22:54,780
everything is on set

579
00:22:54,780 --> 00:22:57,659
the malware will check for another asset

580
00:22:57,659 --> 00:22:59,940
file so this asset file actually is this

581
00:22:59,940 --> 00:23:01,140
one here

582
00:23:01,140 --> 00:23:03,000
which ends this time with three zero

583
00:23:03,000 --> 00:23:06,659
zero this asset file turns to be

584
00:23:06,659 --> 00:23:09,480
decrypted and turned to Dex file so it

585
00:23:09,480 --> 00:23:11,039
will decrypt this file it will solve

586
00:23:11,039 --> 00:23:13,200
this file with a key which is sent from

587
00:23:13,200 --> 00:23:14,580
the Java side

588
00:23:14,580 --> 00:23:17,400
so this file will decrypt it will be

589
00:23:17,400 --> 00:23:20,159
dropped to the data folder and then

590
00:23:20,159 --> 00:23:22,260
again it will be loaded using the

591
00:23:22,260 --> 00:23:25,140
dexclass loader and the load class which

592
00:23:25,140 --> 00:23:27,659
this time will load the class that I

593
00:23:27,659 --> 00:23:29,760
said before now this cloud.com.ads view

594
00:23:29,760 --> 00:23:32,940
is actually the Dex file which was just

595
00:23:32,940 --> 00:23:35,700
right now let's say decrypted

596
00:23:35,700 --> 00:23:38,280
finally we'll perform a jni called goal

597
00:23:38,280 --> 00:23:39,659
static void method

598
00:23:39,659 --> 00:23:42,240
uh using this specific call in order to

599
00:23:42,240 --> 00:23:45,600
uh call a function from this class this

600
00:23:45,600 --> 00:23:47,940
specific class and here we are in the

601
00:23:47,940 --> 00:23:50,340
dex5 now so

602
00:23:50,340 --> 00:23:53,100
here we found uh the command control

603
00:23:53,100 --> 00:23:55,620
server which was hardcoded there and

604
00:23:55,620 --> 00:23:57,840
what these actual decks will do it's not

605
00:23:57,840 --> 00:24:00,240
much besides communicating with the

606
00:24:00,240 --> 00:24:01,799
command control server and download

607
00:24:01,799 --> 00:24:04,620
another file so this file now is a jar

608
00:24:04,620 --> 00:24:05,580
file

609
00:24:05,580 --> 00:24:07,559
and this jar file is going to be again

610
00:24:07,559 --> 00:24:10,740
loaded using the next class loader

611
00:24:10,740 --> 00:24:12,900
and when executed is going to perform

612
00:24:12,900 --> 00:24:16,380
the last step which is to check the Sim

613
00:24:16,380 --> 00:24:19,260
operator if the Sim operator is starting

614
00:24:19,260 --> 00:24:21,960
with 655 then it's going to start the

615
00:24:21,960 --> 00:24:24,179
process the cycle that I talked to you

616
00:24:24,179 --> 00:24:26,820
about in the first few slides

617
00:24:26,820 --> 00:24:29,220
so let's summarize this also because

618
00:24:29,220 --> 00:24:32,460
it's quite long as I said we have an APK

619
00:24:32,460 --> 00:24:35,280
we have an SMS app the first thing that

620
00:24:35,280 --> 00:24:36,780
it's going to do is just check if it's

621
00:24:36,780 --> 00:24:40,020
published get a file from the assets

622
00:24:40,020 --> 00:24:42,240
decrypt this file and drop it as a null

623
00:24:42,240 --> 00:24:45,900
file Dell file will get another file

624
00:24:45,900 --> 00:24:48,960
which is a DEX file decrypted

625
00:24:48,960 --> 00:24:50,820
and then this Dex file is going to

626
00:24:50,820 --> 00:24:52,260
communicate with a command to control

627
00:24:52,260 --> 00:24:54,600
server download the jar file

628
00:24:54,600 --> 00:24:56,880
and finally the jar file will check if

629
00:24:56,880 --> 00:24:59,159
the Sim operator is targeted this starts

630
00:24:59,159 --> 00:25:01,740
with 655 and start to do the cycle that

631
00:25:01,740 --> 00:25:04,260
I talked to you about before

632
00:25:04,260 --> 00:25:07,500
uh so now you have an idea why we can't

633
00:25:07,500 --> 00:25:09,720
detect disabled one but it's still hard

634
00:25:09,720 --> 00:25:11,100
to detect it

635
00:25:11,100 --> 00:25:13,620
so another thing now that we have a nice

636
00:25:13,620 --> 00:25:15,720
overview of how the how a debate

637
00:25:15,720 --> 00:25:18,419
detection how does the this uh let's say

638
00:25:18,419 --> 00:25:21,059
tall for process how it does its um

639
00:25:21,059 --> 00:25:22,980
problem subscription

640
00:25:22,980 --> 00:25:25,140
is how

641
00:25:25,140 --> 00:25:27,120
it's managed to get this malware

642
00:25:27,120 --> 00:25:28,559
published in the Google Play Store in

643
00:25:28,559 --> 00:25:30,900
the first place how they do that and how

644
00:25:30,900 --> 00:25:32,760
I mean

645
00:25:32,760 --> 00:25:34,799
Google let's say allows that in the

646
00:25:34,799 --> 00:25:38,520
first place so there is a strategy

647
00:25:38,520 --> 00:25:40,919
used from malware developers this

648
00:25:40,919 --> 00:25:43,380
strategy includes specific steps for

649
00:25:43,380 --> 00:25:46,200
example use open source of apps which

650
00:25:46,200 --> 00:25:48,480
are very easy I mean they're very

651
00:25:48,480 --> 00:25:50,220
popular they're very easy to install

652
00:25:50,220 --> 00:25:53,159
they're very easy to get a lot of

653
00:25:53,159 --> 00:25:55,140
installs very quick get popular very

654
00:25:55,140 --> 00:25:56,700
quick that's that's the ultimate Target

655
00:25:56,700 --> 00:25:59,039
so these apps are wallpapers lock

656
00:25:59,039 --> 00:26:01,559
screens Beauty editors cameras

657
00:26:01,559 --> 00:26:04,140
communication apps messaging apps

658
00:26:04,140 --> 00:26:07,799
so they will upload clean versions of

659
00:26:07,799 --> 00:26:09,840
these apps the first few versions are

660
00:26:09,840 --> 00:26:11,880
going to be clean not weaponized

661
00:26:11,880 --> 00:26:14,159
I think of let's say specific thresholds

662
00:26:14,159 --> 00:26:17,039
let's say if they are bridge a specific

663
00:26:17,039 --> 00:26:19,140
number of installs then they're going to

664
00:26:19,140 --> 00:26:22,500
update the app and uh add let's say

665
00:26:22,500 --> 00:26:24,179
weaponize the app and not actually the

666
00:26:24,179 --> 00:26:25,260
payloads that I talked to you about

667
00:26:25,260 --> 00:26:26,840
before

668
00:26:26,840 --> 00:26:31,320
another thing is try to stay as much as

669
00:26:31,320 --> 00:26:33,179
they're going to be detected at some

670
00:26:33,179 --> 00:26:36,779
point but just try to make this time as

671
00:26:36,779 --> 00:26:38,520
long as you can so they're going to

672
00:26:38,520 --> 00:26:40,559
separate the malicious flow from the

673
00:26:40,559 --> 00:26:42,360
initial APK

674
00:26:42,360 --> 00:26:44,700
as much as they can so as I said before

675
00:26:44,700 --> 00:26:46,320
they're going to download the Dex file

676
00:26:46,320 --> 00:26:48,600
and load it and execute it instead of

677
00:26:48,600 --> 00:26:50,159
have the text file this deck file the

678
00:26:50,159 --> 00:26:52,740
malicious text file in the APK from the

679
00:26:52,740 --> 00:26:54,179
start

680
00:26:54,179 --> 00:26:58,500
now thankfully uh this let's say

681
00:26:58,500 --> 00:27:01,080
penetration strategy which the malware

682
00:27:01,080 --> 00:27:03,120
developers are using creates what we

683
00:27:03,120 --> 00:27:05,880
call secondary signals and this signal

684
00:27:05,880 --> 00:27:08,100
secondary signals include the following

685
00:27:08,100 --> 00:27:10,559
for example we have an excessive set of

686
00:27:10,559 --> 00:27:11,820
permissions

687
00:27:11,820 --> 00:27:13,980
which actually I wouldn't say excessive

688
00:27:13,980 --> 00:27:16,860
but I would say more not up to the

689
00:27:16,860 --> 00:27:18,360
applications functionality for example

690
00:27:18,360 --> 00:27:20,340
you have an app which is a wallpaper app

691
00:27:20,340 --> 00:27:22,799
and this wallpaper app requests you to

692
00:27:22,799 --> 00:27:25,260
buy notification listener what the

693
00:27:25,260 --> 00:27:26,880
wallpaper app will do with the

694
00:27:26,880 --> 00:27:28,260
notification listen it does make sense

695
00:27:28,260 --> 00:27:30,720
so another thing is uh they might

696
00:27:30,720 --> 00:27:32,340
request SMS permission

697
00:27:32,340 --> 00:27:35,039
so while they're requesting it doesn't

698
00:27:35,039 --> 00:27:38,279
let's say uh it's not on page with the

699
00:27:38,279 --> 00:27:39,900
functionality of the app

700
00:27:39,900 --> 00:27:41,760
another thing is that they have a lot of

701
00:27:41,760 --> 00:27:44,159
common user characteristics uh interface

702
00:27:44,159 --> 00:27:46,220
characteristics where you can icons

703
00:27:46,220 --> 00:27:49,320
policy Pages buttons

704
00:27:49,320 --> 00:27:51,539
all these things seem to be quite common

705
00:27:51,539 --> 00:27:53,880
between these apps another thing is

706
00:27:53,880 --> 00:27:55,400
similar package names

707
00:27:55,400 --> 00:27:58,320
uh suspicion developer profiles you're

708
00:27:58,320 --> 00:28:00,779
going to see developer profiles that

709
00:28:00,779 --> 00:28:03,179
they are very common between them

710
00:28:03,179 --> 00:28:06,600
they're just a page with a name which

711
00:28:06,600 --> 00:28:08,760
name seems to come from some kind of an

712
00:28:08,760 --> 00:28:11,520
automated process so it's let's say easy

713
00:28:11,520 --> 00:28:13,500
to understand from this type of

714
00:28:13,500 --> 00:28:15,539
I at least to get suspicious from these

715
00:28:15,539 --> 00:28:17,700
type of signals right not 100 to say

716
00:28:17,700 --> 00:28:20,100
that this is actually malware and

717
00:28:20,100 --> 00:28:21,419
finally we have the user complaints

718
00:28:21,419 --> 00:28:23,940
although here sometimes

719
00:28:23,940 --> 00:28:25,740
you shouldn't rely on the user called

720
00:28:25,740 --> 00:28:27,120
complaints especially if these

721
00:28:27,120 --> 00:28:28,559
complaints are

722
00:28:28,559 --> 00:28:30,600
um not complaints actually I would say

723
00:28:30,600 --> 00:28:32,520
comments if these comments are let's say

724
00:28:32,520 --> 00:28:34,080
all right you've got a great app or

725
00:28:34,080 --> 00:28:35,400
something like that

726
00:28:35,400 --> 00:28:38,039
you shouldn't rely on this type of uh

727
00:28:38,039 --> 00:28:40,320
method of comments due to the fact that

728
00:28:40,320 --> 00:28:42,179
we saw cases that the malware itself

729
00:28:42,179 --> 00:28:44,700
tries to post

730
00:28:44,700 --> 00:28:46,440
um

731
00:28:46,440 --> 00:28:49,020
comments on the specific on the pages

732
00:28:49,020 --> 00:28:50,640
which is posted

733
00:28:50,640 --> 00:28:53,520
all right okay now now we have a I guess

734
00:28:53,520 --> 00:28:56,039
a nice a good overview of how this

735
00:28:56,039 --> 00:28:58,620
malware Works how it gets published how

736
00:28:58,620 --> 00:29:00,179
the base detection

737
00:29:00,179 --> 00:29:03,360
and how actually uh performs the steps

738
00:29:03,360 --> 00:29:05,700
that I told you about in order to

739
00:29:05,700 --> 00:29:07,760
to do this uh

740
00:29:07,760 --> 00:29:10,380
let's say subscription

741
00:29:10,380 --> 00:29:11,640
now

742
00:29:11,640 --> 00:29:13,559
let's see some rough ideas on how we can

743
00:29:13,559 --> 00:29:16,020
detect what what options do we have in

744
00:29:16,020 --> 00:29:17,580
order to detect this type of malware and

745
00:29:17,580 --> 00:29:19,260
let's start from the client side right

746
00:29:19,260 --> 00:29:23,520
you have your AV your device what this

747
00:29:23,520 --> 00:29:25,020
AV can do in order to detect this type

748
00:29:25,020 --> 00:29:27,659
of malware and the truth is that we

749
00:29:27,659 --> 00:29:30,600
can't do much at the client side so the

750
00:29:30,600 --> 00:29:32,179
Android operating system

751
00:29:32,179 --> 00:29:35,220
imposes huge serious restrictions on

752
00:29:35,220 --> 00:29:37,140
what one application can get for another

753
00:29:37,140 --> 00:29:39,059
app it's very difficult

754
00:29:39,059 --> 00:29:41,760
let's say to get some info for another

755
00:29:41,760 --> 00:29:43,559
app

756
00:29:43,559 --> 00:29:46,440
each application is trapped in its own

757
00:29:46,440 --> 00:29:49,860
sandbox and the info that one app can

758
00:29:49,860 --> 00:29:51,960
retrieve for another app is let's say

759
00:29:51,960 --> 00:29:53,580
control from the system so you don't

760
00:29:53,580 --> 00:29:55,980
have many chance at that point I think

761
00:29:55,980 --> 00:29:57,779
that you can do of course is let's say

762
00:29:57,779 --> 00:30:00,360
do some kind of static scan which again

763
00:30:00,360 --> 00:30:03,200
some help from the cloud or maybe

764
00:30:03,200 --> 00:30:06,240
observe the HTTP Communication in order

765
00:30:06,240 --> 00:30:09,240
to see some kind of let's say suspicious

766
00:30:09,240 --> 00:30:10,679
communication with the command control

767
00:30:10,679 --> 00:30:12,779
server and of course maintain some type

768
00:30:12,779 --> 00:30:15,659
of a blacklist of command and control

769
00:30:15,659 --> 00:30:17,460
servers it gives you such a

770
00:30:17,460 --> 00:30:19,260
communication then just alert the user

771
00:30:19,260 --> 00:30:20,580
or

772
00:30:20,580 --> 00:30:22,799
in order to allow some kind of

773
00:30:22,799 --> 00:30:26,159
suspicious suspicion now on the cloud

774
00:30:26,159 --> 00:30:28,140
side though we have

775
00:30:28,140 --> 00:30:30,360
a lot of options

776
00:30:30,360 --> 00:30:33,659
although they don't see seem to be so

777
00:30:33,659 --> 00:30:36,120
far like I said very

778
00:30:36,120 --> 00:30:37,380
um

779
00:30:37,380 --> 00:30:40,559
they can have a nice result but the the

780
00:30:40,559 --> 00:30:42,480
the pipeline that you are going to see

781
00:30:42,480 --> 00:30:45,480
here is actually a pipeline which we try

782
00:30:45,480 --> 00:30:48,360
in order to achieve the best results

783
00:30:48,360 --> 00:30:51,419
using the less amount of resources

784
00:30:51,419 --> 00:30:53,760
so we start with a steady field we have

785
00:30:53,760 --> 00:30:54,720
a feed

786
00:30:54,720 --> 00:30:57,299
of apks this feed might be something

787
00:30:57,299 --> 00:31:01,860
like uh researchers which let's say feed

788
00:31:01,860 --> 00:31:04,559
our system with apks or even a Play

789
00:31:04,559 --> 00:31:07,860
Store itself or a device I mean we can

790
00:31:07,860 --> 00:31:10,799
just the user can submit an APK from the

791
00:31:10,799 --> 00:31:12,659
device so you have a feed

792
00:31:12,659 --> 00:31:17,039
and the first step of this pipeline the

793
00:31:17,039 --> 00:31:21,120
first step is to uh filter the apps for

794
00:31:21,120 --> 00:31:22,260
secondary signals secondary

795
00:31:22,260 --> 00:31:24,240
characteristics the ones that I talked

796
00:31:24,240 --> 00:31:25,860
to you about before for example if the

797
00:31:25,860 --> 00:31:29,880
app has uh similarities with other uh

798
00:31:29,880 --> 00:31:31,320
let's say

799
00:31:31,320 --> 00:31:34,020
uh TOEFL the second secondary signal

800
00:31:34,020 --> 00:31:36,659
again developers profile number of

801
00:31:36,659 --> 00:31:37,860
installs

802
00:31:37,860 --> 00:31:39,840
and the result at this point is going to

803
00:31:39,840 --> 00:31:41,640
be either

804
00:31:41,640 --> 00:31:43,740
the app is going to go on the next stage

805
00:31:43,740 --> 00:31:45,659
all the app is going to be suspicious

806
00:31:45,659 --> 00:31:47,820
simple suspicion is going to be respond

807
00:31:47,820 --> 00:31:50,880
or finally it's going to just skip due

808
00:31:50,880 --> 00:31:52,980
to the fact that we can't let's say we

809
00:31:52,980 --> 00:31:54,600
didn't reach a specific threshold of

810
00:31:54,600 --> 00:31:56,940
this type of characteristics so the next

811
00:31:56,940 --> 00:31:57,899
step

812
00:31:57,899 --> 00:32:01,260
is to start to scan the app for specific

813
00:32:01,260 --> 00:32:04,620
let's say to perform a static scan so

814
00:32:04,620 --> 00:32:07,200
scan for specific API calls or specific

815
00:32:07,200 --> 00:32:10,980
strings or specific permissions

816
00:32:10,980 --> 00:32:12,899
and again the result is going to be the

817
00:32:12,899 --> 00:32:14,279
same but we're not going to be sure due

818
00:32:14,279 --> 00:32:17,220
to the facts that I as I told you before

819
00:32:17,220 --> 00:32:19,380
we have this evasion detection mechanism

820
00:32:19,380 --> 00:32:22,200
so either is going to be suspicious or

821
00:32:22,200 --> 00:32:25,020
either it's going to be uh skipped due

822
00:32:25,020 --> 00:32:26,460
to the fact that it's missing some let's

823
00:32:26,460 --> 00:32:28,620
say important permissions or it will go

824
00:32:28,620 --> 00:32:31,200
to the next stage with the next stage

825
00:32:31,200 --> 00:32:34,140
is the most let's say demanding when it

826
00:32:34,140 --> 00:32:36,659
comes has to do with resources because

827
00:32:36,659 --> 00:32:39,659
we have to first of all

828
00:32:39,659 --> 00:32:42,179
interact with the app with let's say a

829
00:32:42,179 --> 00:32:44,760
clever way we have to clever interact

830
00:32:44,760 --> 00:32:46,500
with app and how how you do that right I

831
00:32:46,500 --> 00:32:47,700
mean it's

832
00:32:47,700 --> 00:32:52,100
uh we try to uh let's say

833
00:32:52,100 --> 00:32:55,380
cause as much functionality as we can

834
00:32:55,380 --> 00:32:57,480
by interacting with app and this is

835
00:32:57,480 --> 00:32:58,740
actually a very difficult problem

836
00:32:58,740 --> 00:33:00,419
because you might have some kind of a

837
00:33:00,419 --> 00:33:02,580
logging wall or something that

838
00:33:02,580 --> 00:33:05,039
the humor has to interact in order for

839
00:33:05,039 --> 00:33:07,020
them to proceed to the next steps

840
00:33:07,020 --> 00:33:09,299
so actually this is a big problem how to

841
00:33:09,299 --> 00:33:10,320
do that

842
00:33:10,320 --> 00:33:11,820
let's say that you solve this problem

843
00:33:11,820 --> 00:33:15,299
now then the other thing is to

844
00:33:15,299 --> 00:33:17,399
perform a dynamic the dynamic analysis

845
00:33:17,399 --> 00:33:19,140
part which is intercept https

846
00:33:19,140 --> 00:33:20,760
communication

847
00:33:20,760 --> 00:33:22,500
uh perform some binary instrumentation

848
00:33:22,500 --> 00:33:24,539
log the API calls

849
00:33:24,539 --> 00:33:27,000
uh intercept the API calls and what I

850
00:33:27,000 --> 00:33:29,580
mean intercept so change the return

851
00:33:29,580 --> 00:33:31,860
values in order to trigger additional

852
00:33:31,860 --> 00:33:34,620
Behavior additional functionality

853
00:33:34,620 --> 00:33:38,279
uh then we have um to dump the memory

854
00:33:38,279 --> 00:33:41,700
for Dex files uh because many of these

855
00:33:41,700 --> 00:33:44,580
apps are using Packers or uh

856
00:33:44,580 --> 00:33:46,260
as I said before they can just drop

857
00:33:46,260 --> 00:33:47,700
something and then load it in the memory

858
00:33:47,700 --> 00:33:50,220
so you can just dump the memory in order

859
00:33:50,220 --> 00:33:52,559
to get these text files observe of

860
00:33:52,559 --> 00:33:54,539
course the data directory of the app in

861
00:33:54,539 --> 00:33:59,580
order to uh find in order to monitor for

862
00:33:59,580 --> 00:34:01,679
dropped files and see if the application

863
00:34:01,679 --> 00:34:03,539
is dropping something and just loads

864
00:34:03,539 --> 00:34:06,140
loads it

865
00:34:07,700 --> 00:34:10,500
and finally dump the memory on the

866
00:34:10,500 --> 00:34:11,760
native space

867
00:34:11,760 --> 00:34:14,159
because we especially recently

868
00:34:14,159 --> 00:34:16,859
especially the last maybe year we saw a

869
00:34:16,859 --> 00:34:19,379
lot of uh malware developers moving on

870
00:34:19,379 --> 00:34:21,239
the native side

871
00:34:21,239 --> 00:34:24,060
all right so what is the final result of

872
00:34:24,060 --> 00:34:27,418
this let's say process of this pipeline

873
00:34:27,418 --> 00:34:29,460
not much again we have to create

874
00:34:29,460 --> 00:34:31,020
signatures right we have to create

875
00:34:31,020 --> 00:34:33,060
signatures we have to enrich our

876
00:34:33,060 --> 00:34:34,080
database

877
00:34:34,080 --> 00:34:38,040
and actually what we want is to be able

878
00:34:38,040 --> 00:34:40,560
to catch this to detect these samples

879
00:34:40,560 --> 00:34:42,839
before let's say reach to the final

880
00:34:42,839 --> 00:34:45,719
point to detect them in much earlier

881
00:34:45,719 --> 00:34:47,159
stages

882
00:34:47,159 --> 00:34:49,918
all right and um

883
00:34:49,918 --> 00:34:53,219
uh reaching now to let's say the end of

884
00:34:53,219 --> 00:34:56,040
this uh presentation of

885
00:34:56,040 --> 00:34:57,900
I want to talk about

886
00:34:57,900 --> 00:35:00,560
how we can prevent this uh this type of

887
00:35:00,560 --> 00:35:02,760
apps of being published in the Google

888
00:35:02,760 --> 00:35:05,580
Play Store in the first place so

889
00:35:05,580 --> 00:35:09,200
starting from November 3rd 2021 Google

890
00:35:09,200 --> 00:35:12,540
took an initiative in regards to the

891
00:35:12,540 --> 00:35:14,160
permissions that

892
00:35:14,160 --> 00:35:16,800
can be allowed it I mean to specific app

893
00:35:16,800 --> 00:35:20,720
for example the knob which let's say

894
00:35:20,720 --> 00:35:22,980
requests some permissions that they are

895
00:35:22,980 --> 00:35:25,200
going to retrieve some

896
00:35:25,200 --> 00:35:27,359
personal information or SMS permissions

897
00:35:27,359 --> 00:35:29,960
or the kinds of stuff have to be

898
00:35:29,960 --> 00:35:34,140
let's say Justified so the developer has

899
00:35:34,140 --> 00:35:35,880
to complete a permission declaration

900
00:35:35,880 --> 00:35:40,380
form in order to justify why how I'm

901
00:35:40,380 --> 00:35:41,880
using this type of permission what I'm

902
00:35:41,880 --> 00:35:43,500
doing with this type of permissions

903
00:35:43,500 --> 00:35:46,260
what we didn't see so far and this is

904
00:35:46,260 --> 00:35:49,800
the let's say the unfortunate of this uh

905
00:35:49,800 --> 00:35:53,640
action that Google took is uh the

906
00:35:53,640 --> 00:35:56,099
notification listener right so as I said

907
00:35:56,099 --> 00:35:57,599
before

908
00:35:57,599 --> 00:35:59,400
all the majority of these malware

909
00:35:59,400 --> 00:36:00,660
actually use the notification list

910
00:36:00,660 --> 00:36:03,060
abuses notification listener in order to

911
00:36:03,060 --> 00:36:06,320
do this type of actions so

912
00:36:06,320 --> 00:36:10,020
we still see apps for example wallpapers

913
00:36:10,020 --> 00:36:11,460
so this type of apps that I talked to

914
00:36:11,460 --> 00:36:14,099
you about before the mob the most um

915
00:36:14,099 --> 00:36:17,940
uh abused ones to still be able to use

916
00:36:17,940 --> 00:36:21,660
this type of service in order to

917
00:36:21,660 --> 00:36:23,820
to do the steps that I told you I talked

918
00:36:23,820 --> 00:36:25,079
to you about before

919
00:36:25,079 --> 00:36:29,940
and uh with this I mean that was uh uh

920
00:36:29,940 --> 00:36:31,440
let's say

921
00:36:31,440 --> 00:36:34,859
a wrap up of all these things

922
00:36:34,859 --> 00:36:36,900
if you have any questions

923
00:36:36,900 --> 00:36:39,770
please feel free to to ask

924
00:36:39,770 --> 00:36:50,309
[Applause]

925
00:37:09,599 --> 00:37:12,420
okay so thank you Dimitris

926
00:37:12,420 --> 00:37:15,180
um thank you very much any questions

927
00:37:15,180 --> 00:37:18,259
okay you want to hear

928
00:37:20,060 --> 00:37:23,400
hello there hello um when you're doing

929
00:37:23,400 --> 00:37:26,099
the analysis for the Android malware do

930
00:37:26,099 --> 00:37:29,280
you use an emulator or real devices and

931
00:37:29,280 --> 00:37:33,240
what's the advantages yeah uh

932
00:37:33,240 --> 00:37:36,240
we can't let's say afford not I mean we

933
00:37:36,240 --> 00:37:37,740
can't afford it's something that you

934
00:37:37,740 --> 00:37:40,440
can't have uh many real devices so you

935
00:37:40,440 --> 00:37:42,359
have to end up with some kind of an

936
00:37:42,359 --> 00:37:44,220
emulator at the end so you have to use

937
00:37:44,220 --> 00:37:46,140
an emulator yeah usually that's that's a

938
00:37:46,140 --> 00:37:47,820
common case except

939
00:37:47,820 --> 00:37:49,560
if you have some kind of special case

940
00:37:49,560 --> 00:37:52,079
which can be let's say a

941
00:37:52,079 --> 00:37:54,839
H forced to a different pipeline in

942
00:37:54,839 --> 00:37:56,760
order to pass through a real device but

943
00:37:56,760 --> 00:38:00,540
the the common case is uh is an emulator

944
00:38:00,540 --> 00:38:03,300
okay thank you

945
00:38:03,300 --> 00:38:05,460
another one here

946
00:38:05,460 --> 00:38:07,020
first

947
00:38:07,020 --> 00:38:10,200
thank you so for me to play is pretty

948
00:38:10,200 --> 00:38:13,260
clear why you can't detect using static

949
00:38:13,260 --> 00:38:15,359
analysis these types of applications but

950
00:38:15,359 --> 00:38:18,300
it seems like an easy job to detect them

951
00:38:18,300 --> 00:38:22,320
using Telemetry so in runtime of course

952
00:38:22,320 --> 00:38:24,480
why do we think Google doesn't make an

953
00:38:24,480 --> 00:38:26,160
effort to detect these types of

954
00:38:26,160 --> 00:38:28,920
exploitations in runtime using their own

955
00:38:28,920 --> 00:38:31,980
Telemetry because these API calls seem

956
00:38:31,980 --> 00:38:35,579
to be really specific and only for for

957
00:38:35,579 --> 00:38:38,400
these types of purposes when used in uh

958
00:38:38,400 --> 00:38:39,780
in a group

959
00:38:39,780 --> 00:38:42,540
all right so imagine you you are Google

960
00:38:42,540 --> 00:38:44,880
right I mean you have uh you're a Play

961
00:38:44,880 --> 00:38:46,320
Store you have the app installed on the

962
00:38:46,320 --> 00:38:48,359
device what type of information you can

963
00:38:48,359 --> 00:38:50,880
retrieve for one app I mean you don't

964
00:38:50,880 --> 00:38:52,800
have like I said before

965
00:38:52,800 --> 00:38:54,300
you still have you still have

966
00:38:54,300 --> 00:38:56,640
restrictions when it comes to I mean

967
00:38:56,640 --> 00:38:59,520
even Google despite the fact that uh it

968
00:38:59,520 --> 00:39:00,660
is Googling this is the one that

969
00:39:00,660 --> 00:39:03,599
actually uh uh let's say develops a

970
00:39:03,599 --> 00:39:05,400
specific Frameworks all the Frameworks

971
00:39:05,400 --> 00:39:07,680
and let's say it can interfere in this

972
00:39:07,680 --> 00:39:11,160
process they simply it it is very hard

973
00:39:11,160 --> 00:39:13,680
for them to be able let's say to detect

974
00:39:13,680 --> 00:39:16,200
this due to the fact that we have they

975
00:39:16,200 --> 00:39:17,579
have also restrictions that they have to

976
00:39:17,579 --> 00:39:18,960
follow the restrictions that they apply

977
00:39:18,960 --> 00:39:21,000
by themselves right so they can't let's

978
00:39:21,000 --> 00:39:23,760
say break uh the sandbox they can't

979
00:39:23,760 --> 00:39:25,500
break uh these kind of things they can't

980
00:39:25,500 --> 00:39:30,540
they can't be that intrusive if if uh I

981
00:39:30,540 --> 00:39:33,119
mean that satisfies your your question

982
00:39:33,119 --> 00:39:36,500
yeah makes sense thank you

983
00:39:37,320 --> 00:39:40,140
uh hi uh I was very surprised to see

984
00:39:40,140 --> 00:39:42,180
that the notification permission is not

985
00:39:42,180 --> 00:39:45,480
included and that Google agreement so

986
00:39:45,480 --> 00:39:48,180
couldn't this be used to steal one-time

987
00:39:48,180 --> 00:39:52,980
passwords like Steam and yeah just just

988
00:39:52,980 --> 00:39:55,859
make sure when enough requests for

989
00:39:55,859 --> 00:39:57,780
notification listener I mean to access

990
00:39:57,780 --> 00:39:59,880
your notifications just make sure that

991
00:39:59,880 --> 00:40:02,040
you trust this up yeah yeah it's one of

992
00:40:02,040 --> 00:40:03,960
the most yeah it can it can use it can

993
00:40:03,960 --> 00:40:06,300
be used actually to get a lot of info

994
00:40:06,300 --> 00:40:07,800
out of the device it depends actually on

995
00:40:07,800 --> 00:40:10,260
on what is boosting the specific

996
00:40:10,260 --> 00:40:12,359
notification while the app actually is

997
00:40:12,359 --> 00:40:14,099
getting from this notification so if

998
00:40:14,099 --> 00:40:15,780
there is a pin there whatever there is

999
00:40:15,780 --> 00:40:17,820
there it can be retrieved from the app

1000
00:40:17,820 --> 00:40:19,320
which extends notification listener

1001
00:40:19,320 --> 00:40:20,820
service so yeah yeah it's really

1002
00:40:20,820 --> 00:40:23,339
anything like emails yeah I mean

1003
00:40:23,339 --> 00:40:25,800
whatever whatever that's that's a good

1004
00:40:25,800 --> 00:40:27,960
point actually and this is what uh this

1005
00:40:27,960 --> 00:40:28,980
is on the developer side whether

1006
00:40:28,980 --> 00:40:33,119
developer I mean uh let's say exposes on

1007
00:40:33,119 --> 00:40:35,460
the specific service right so if you as

1008
00:40:35,460 --> 00:40:38,400
a developer expose uh they mail there or

1009
00:40:38,400 --> 00:40:40,079
you expose the pin there or you expose

1010
00:40:40,079 --> 00:40:43,079
some kind of a financial transaction

1011
00:40:43,079 --> 00:40:44,400
then yeah

1012
00:40:44,400 --> 00:40:45,960
it's not it's something which is going

1013
00:40:45,960 --> 00:40:48,599
to be retrieved from uh from uh this

1014
00:40:48,599 --> 00:40:50,900
type of uh software yeah

1015
00:40:50,900 --> 00:40:53,700
actually this this notification listener

1016
00:40:53,700 --> 00:40:56,160
service is used from uh spyware also it

1017
00:40:56,160 --> 00:40:58,680
is it is very yeah it's very important

1018
00:40:58,680 --> 00:41:00,599
to trust the apps

1019
00:41:00,599 --> 00:41:02,820
that you have approve this type of

1020
00:41:02,820 --> 00:41:07,500
service yeah thank you very much yeah

1021
00:41:07,500 --> 00:41:10,460
more questions

1022
00:41:13,560 --> 00:41:16,440
I guess not so again thank you Dimitrius

1023
00:41:16,440 --> 00:41:20,960
and thank you very much now we have

1024
00:41:22,200 --> 00:41:24,740
no

1025
00:41:25,370 --> 00:41:29,120
[Music]

