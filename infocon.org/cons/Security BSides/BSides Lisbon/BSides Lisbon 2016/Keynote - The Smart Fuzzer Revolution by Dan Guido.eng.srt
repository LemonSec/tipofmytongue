1
00:00:05,089 --> 00:00:11,429
okay well I guess I'll<font color="#E5E5E5"> get started now</font>

2
00:00:09,290 --> 00:00:14,250
welcome to the beginning<font color="#CCCCCC"> of b-sides</font>

3
00:00:11,429 --> 00:00:16,800
Lisbon I am Dan Guido<font color="#E5E5E5"> and i'm here to</font>

4
00:00:14,250 --> 00:00:18,869
give first keynote in the red track so

5
00:00:16,800 --> 00:00:24,420
that's what<font color="#E5E5E5"> you're for you made it the</font>

6
00:00:18,869 --> 00:00:26,609
right place<font color="#E5E5E5"> so</font><font color="#CCCCCC"> i am a flew in all the</font>

7
00:00:24,420 --> 00:00:29,880
way from New York today<font color="#CCCCCC"> to talk about</font>

8
00:00:26,609 --> 00:00:31,410
the<font color="#CCCCCC"> smart fuzzer revolution I wanted</font><font color="#E5E5E5"> to</font>

9
00:00:29,880 --> 00:00:32,910
try<font color="#E5E5E5"> and put into context some of the</font>

10
00:00:31,410 --> 00:00:35,340
research advances as well some of the

11
00:00:32,910 --> 00:00:37,110
practical advances made in the state of

12
00:00:35,340 --> 00:00:39,629
the art of automated bug finding of the

13
00:00:37,110 --> 00:00:41,430
last two<font color="#CCCCCC"> years</font><font color="#E5E5E5"> I work in this field and</font>

14
00:00:39,629 --> 00:00:43,110
I've<font color="#E5E5E5"> been incredibly excited by this and</font>

15
00:00:41,430 --> 00:00:45,149
I<font color="#E5E5E5"> want to share</font><font color="#CCCCCC"> my excitement with all</font>

16
00:00:43,110 --> 00:00:46,649
of you and show you not only how you can

17
00:00:45,149 --> 00:00:48,000
take advantage of this kind<font color="#E5E5E5"> of new</font>

18
00:00:46,649 --> 00:00:51,000
technology but also how<font color="#E5E5E5"> you can</font>

19
00:00:48,000 --> 00:00:54,019
contribute<font color="#E5E5E5"> to it so I work at a company</font>

20
00:00:51,000 --> 00:00:58,500
called<font color="#E5E5E5"> trail of bits rather i founded</font><font color="#CCCCCC"> it</font>

21
00:00:54,020 --> 00:01:00,829
for years<font color="#E5E5E5"> back we specialize in research</font>

22
00:00:58,500 --> 00:01:05,269
and development of technology like this

23
00:01:00,829 --> 00:01:08,460
it<font color="#CCCCCC"> really excites us to work in the most</font>

24
00:01:05,269 --> 00:01:10,259
advanced parts of computer science<font color="#E5E5E5"> and</font>

25
00:01:08,460 --> 00:01:12,780
to merge that with computer security and

26
00:01:10,260 --> 00:01:14,960
to make it practical for people not only

27
00:01:12,780 --> 00:01:17,310
in you know government<font color="#E5E5E5"> and research</font>

28
00:01:14,960 --> 00:01:19,979
fields but make it practical for people

29
00:01:17,310 --> 00:01:21,840
in commercial industry as well so

30
00:01:19,979 --> 00:01:23,100
there's there's been a few blog posts

31
00:01:21,840 --> 00:01:25,140
that we've published where we've

32
00:01:23,100 --> 00:01:27,780
disclosed clients of ours like Facebook

33
00:01:25,140 --> 00:01:30,390
and<font color="#E5E5E5"> Amazon or we've worked on analysis</font>

34
00:01:27,780 --> 00:01:34,350
tools that help them find bugs or help

35
00:01:30,390 --> 00:01:35,850
<font color="#CCCCCC">them secure their networks but you can</font>

36
00:01:34,350 --> 00:01:41,009
read more about us on our website if

37
00:01:35,850 --> 00:01:42,780
you're not familiar so the agenda<font color="#CCCCCC"> for</font>

38
00:01:41,009 --> 00:01:44,850
today I want to talk a little bit about

39
00:01:42,780 --> 00:01:46,320
the history kind of where fuzz and came

40
00:01:44,850 --> 00:01:48,630
from<font color="#E5E5E5"> where automated bug finding</font>

41
00:01:46,320 --> 00:01:50,070
techniques came from what<font color="#CCCCCC"> people have</font>

42
00:01:48,630 --> 00:01:53,100
done in the past and why what we're

43
00:01:50,070 --> 00:01:55,079
doing today is so much different I'm

44
00:01:53,100 --> 00:01:58,199
going<font color="#E5E5E5"> to discuss the current state of</font>

45
00:01:55,079 --> 00:01:59,820
<font color="#E5E5E5">the art the last two</font><font color="#CCCCCC"> years what has</font>

46
00:01:58,200 --> 00:02:04,310
happened<font color="#CCCCCC"> to really move the</font><font color="#E5E5E5"> ball forward</font>

47
00:01:59,820 --> 00:02:06,479
and make these techniques and make these

48
00:02:04,310 --> 00:02:09,569
well yeah make these techniques more

49
00:02:06,479 --> 00:02:10,889
accessible to regular developers as well

50
00:02:09,568 --> 00:02:12,470
as make them significantly more

51
00:02:10,889 --> 00:02:14,010
effective than what came before it and

52
00:02:12,470 --> 00:02:16,409
then<font color="#E5E5E5"> finally I'm</font>

53
00:02:14,010 --> 00:02:18,569
to talk about<font color="#E5E5E5"> what problems lie ahead of</font>

54
00:02:16,409 --> 00:02:21,298
<font color="#E5E5E5">us because we are not there yet we don't</font>

55
00:02:18,569 --> 00:02:23,909
<font color="#E5E5E5">have the one true bug finding system</font>

56
00:02:21,299 --> 00:02:26,819
that can just replace all of us with a

57
00:02:23,909 --> 00:02:28,319
machine but we<font color="#E5E5E5"> can get there and there's</font>

58
00:02:26,819 --> 00:02:29,970
a few<font color="#E5E5E5"> different research roadblocks</font>

59
00:02:28,319 --> 00:02:31,738
there are funding roadblocks there are

60
00:02:29,970 --> 00:02:34,530
organizational and developer roadblocks

61
00:02:31,739 --> 00:02:38,180
that we need to overcome that all of you

62
00:02:34,530 --> 00:02:40,980
can help me with in<font color="#E5E5E5"> order to get there</font>

63
00:02:38,180 --> 00:02:42,540
so yeah the summary here is we<font color="#E5E5E5"> are in an</font>

64
00:02:40,980 --> 00:02:44,548
automated software testing Renaissance

65
00:02:42,540 --> 00:02:49,290
it has never been<font color="#E5E5E5"> better to work in this</font>

66
00:02:44,549 --> 00:02:51,540
field than today<font color="#CCCCCC"> okay so smart fuzzing I</font>

67
00:02:49,290 --> 00:02:53,670
just need to<font color="#E5E5E5"> define a term before we go</font>

68
00:02:51,540 --> 00:02:58,379
on fuzzing is filled with all kinds of

69
00:02:53,670 --> 00:03:00,599
really opaque terms smart fuzzing well

70
00:02:58,379 --> 00:03:04,590
<font color="#E5E5E5">sorry fuzzing is generally just trying</font>

71
00:03:00,599 --> 00:03:06,388
random inputs right so smart fuzzing is

72
00:03:04,590 --> 00:03:08,280
what if we analyze the<font color="#E5E5E5"> program under</font>

73
00:03:06,389 --> 00:03:11,099
tests and instead<font color="#CCCCCC"> of trying random</font>

74
00:03:08,280 --> 00:03:13,319
inputs we look at inputs that are likely

75
00:03:11,099 --> 00:03:15,358
<font color="#CCCCCC">to get new code coverage and otherwise</font>

76
00:03:13,319 --> 00:03:18,780
touch more internal state in the program

77
00:03:15,359 --> 00:03:20,940
based on what we know about it so<font color="#CCCCCC"> smart</font>

78
00:03:18,780 --> 00:03:23,220
fuzzing enables us to use an entirely

79
00:03:20,940 --> 00:03:26,220
new domain of knowledge to hyper-focus

80
00:03:23,220 --> 00:03:29,190
the activities that<font color="#CCCCCC"> we undertake to test</font>

81
00:03:26,220 --> 00:03:32,239
that program fuzzing deals with huge

82
00:03:29,190 --> 00:03:38,250
numbers<font color="#CCCCCC"> of combinatorial combinatorial</font>

83
00:03:32,239 --> 00:03:39,780
<font color="#E5E5E5">state explosion puts us on silent and in</font>

84
00:03:38,250 --> 00:03:42,810
<font color="#E5E5E5">order to deal with that we need better</font>

85
00:03:39,780 --> 00:03:45,239
techniques to narrow down<font color="#E5E5E5"> that path</font>

86
00:03:42,810 --> 00:03:47,160
narrow down the number of inputs that we

87
00:03:45,239 --> 00:03:48,690
<font color="#E5E5E5">test to only the ones that actually goes</font>

88
00:03:47,160 --> 00:03:50,730
code coverage only<font color="#CCCCCC"> the</font><font color="#E5E5E5"> ones that let us</font>

89
00:03:48,690 --> 00:03:55,560
explore new state smart fuzzing is how

90
00:03:50,730 --> 00:04:00,319
we<font color="#E5E5E5"> get there</font><font color="#CCCCCC"> okay so history in the</font>

91
00:03:55,560 --> 00:04:03,750
beginning right 1998 fuzzing was sort of

92
00:04:00,319 --> 00:04:05,159
accidentally termed in a class

93
00:04:03,750 --> 00:04:06,449
assignment for an advanced operating

94
00:04:05,159 --> 00:04:09,978
systems course the University of

95
00:04:06,449 --> 00:04:12,209
Washington a professor asked students to

96
00:04:09,979 --> 00:04:13,889
write a program that through random

97
00:04:12,209 --> 00:04:16,048
input at other<font color="#CCCCCC"> UNIX command</font><font color="#E5E5E5"> line</font>

98
00:04:13,889 --> 00:04:18,120
utilities essentially what<font color="#E5E5E5"> we're talking</font>

99
00:04:16,048 --> 00:04:20,070
about here is<font color="#E5E5E5"> just catting Devi random</font>

100
00:04:18,120 --> 00:04:22,280
into the program we're not concerned

101
00:04:20,070 --> 00:04:24,270
with state we're not concerned with

102
00:04:22,280 --> 00:04:26,369
structure we're not concerned with

103
00:04:24,270 --> 00:04:28,000
whether the program even expects to get

104
00:04:26,370 --> 00:04:29,710
anything

105
00:04:28,000 --> 00:04:32,110
like what we're giving it we're just

106
00:04:29,710 --> 00:04:34,930
flinging crap at it and hopefully it

107
00:04:32,110 --> 00:04:37,840
breaks surprisingly it's a really

108
00:04:34,930 --> 00:04:39,550
effective strategy that works for about

109
00:04:37,840 --> 00:04:40,840
like<font color="#CCCCCC"> ten years and then</font><font color="#E5E5E5"> people decided</font>

110
00:04:39,550 --> 00:04:43,090
maybe we should improve upon this a

111
00:04:40,840 --> 00:04:44,409
little bit and in the<font color="#CCCCCC"> early 2000s we</font>

112
00:04:43,090 --> 00:04:46,060
started to see people come<font color="#CCCCCC"> up with</font>

113
00:04:44,410 --> 00:04:48,430
generational based<font color="#CCCCCC"> fuzz's where we</font>

114
00:04:46,060 --> 00:04:51,010
generate some kind of data structure

115
00:04:48,430 --> 00:04:52,660
<font color="#CCCCCC">that is what the program expects and you</font>

116
00:04:51,010 --> 00:04:54,010
see this occurring in parallel among

117
00:04:52,660 --> 00:04:56,440
number a number of<font color="#CCCCCC"> different research</font>

118
00:04:54,010 --> 00:05:00,159
groups people like the university<font color="#CCCCCC"> of</font>

119
00:04:56,440 --> 00:05:03,400
oulu and<font color="#E5E5E5"> hawaii created protoss and</font><font color="#CCCCCC"> dave</font>

120
00:05:00,160 --> 00:05:05,710
<font color="#CCCCCC">i tell self published his seminal paper</font>

121
00:05:03,400 --> 00:05:07,060
on block based fuzzing which later made

122
00:05:05,710 --> 00:05:10,719
it into<font color="#E5E5E5"> that great chapter in the shell</font>

123
00:05:07,060 --> 00:05:12,790
coders handbook and he built spike so

124
00:05:10,720 --> 00:05:14,830
these basically<font color="#E5E5E5"> allow you to construct</font>

125
00:05:12,790 --> 00:05:17,560
some kind<font color="#E5E5E5"> of protocol or a file format</font>

126
00:05:14,830 --> 00:05:19,750
using a B<font color="#E5E5E5"> and F and then annotate what</font>

127
00:05:17,560 --> 00:05:21,610
types of data are expected in all those

128
00:05:19,750 --> 00:05:23,620
<font color="#CCCCCC">different fields and then the fuzzer</font>

129
00:05:21,610 --> 00:05:25,630
would make smart choices about what what

130
00:05:23,620 --> 00:05:29,230
type of random data to put into those

131
00:05:25,630 --> 00:05:30,909
fields and<font color="#E5E5E5"> that was pretty good at the</font>

132
00:05:29,230 --> 00:05:33,760
<font color="#E5E5E5">same time we also looked at mutation</font>

133
00:05:30,910 --> 00:05:36,150
based fuzzing so this<font color="#E5E5E5"> is really resource</font>

134
00:05:33,760 --> 00:05:38,380
intensive unlike<font color="#E5E5E5"> I mean I</font><font color="#CCCCCC"> guess we</font>

135
00:05:36,150 --> 00:05:39,909
generation is resource intensive as well

136
00:05:38,380 --> 00:05:42,219
you have to sit there<font color="#CCCCCC"> and create</font><font color="#E5E5E5"> a spec</font>

137
00:05:39,910 --> 00:05:44,830
in a BNF and like test it to make sure

138
00:05:42,220 --> 00:05:46,600
it's what the spec actually says but

139
00:05:44,830 --> 00:05:49,180
with mutation we're assembling a giant

140
00:05:46,600 --> 00:05:51,460
corpus of legitimate data we're

141
00:05:49,180 --> 00:05:53,530
downloading all the PDFs on the<font color="#E5E5E5"> internet</font>

142
00:05:51,460 --> 00:05:55,539
putting<font color="#E5E5E5"> them into a giant directory and</font>

143
00:05:53,530 --> 00:05:57,520
then mutating and flipping all the bytes

144
00:05:55,540 --> 00:05:59,590
in them and running them through all the

145
00:05:57,520 --> 00:06:02,979
different<font color="#E5E5E5"> PDF readers that we've got</font>

146
00:05:59,590 --> 00:06:04,869
right that's mutation that's going to

147
00:06:02,979 --> 00:06:05,950
find some<font color="#CCCCCC"> bugs but the only bugs that</font>

148
00:06:04,870 --> 00:06:07,419
<font color="#E5E5E5">will find are the ones that are</font>

149
00:06:05,950 --> 00:06:09,599
exercised by the corpus that<font color="#E5E5E5"> you</font>

150
00:06:07,419 --> 00:06:12,159
generate the corpus<font color="#E5E5E5"> that you collected</font>

151
00:06:09,600 --> 00:06:14,140
and it's it's difficult to really<font color="#E5E5E5"> guide</font>

152
00:06:12,160 --> 00:06:15,520
a mutation based fuzzer down certain

153
00:06:14,140 --> 00:06:17,950
paths in the program you have<font color="#E5E5E5"> to work</font>

154
00:06:15,520 --> 00:06:20,500
<font color="#CCCCCC">with what</font><font color="#E5E5E5"> you've got so what's common to</font>

155
00:06:17,950 --> 00:06:23,229
these all of<font color="#CCCCCC"> these</font><font color="#E5E5E5"> is that</font><font color="#CCCCCC"> we're simply</font>

156
00:06:20,500 --> 00:06:25,210
applying random mutations to well-formed

157
00:06:23,229 --> 00:06:28,030
inputs except in the random case<font color="#E5E5E5"> I guess</font>

158
00:06:25,210 --> 00:06:31,020
to well-formed inputs and observing the

159
00:06:28,030 --> 00:06:32,739
results we're<font color="#E5E5E5"> just spending more time</font>

160
00:06:31,020 --> 00:06:35,380
constructing what we're going to send<font color="#E5E5E5"> to</font>

161
00:06:32,740 --> 00:06:38,020
those programs and then<font color="#E5E5E5"> hopefully the</font>

162
00:06:35,380 --> 00:06:40,289
program that is under test crashes more

163
00:06:38,020 --> 00:06:40,289
often

164
00:06:40,720 --> 00:06:44,350
along the way there's been plenty of

165
00:06:42,220 --> 00:06:46,270
iterative advances we've tried<font color="#CCCCCC"> to</font>

166
00:06:44,350 --> 00:06:49,270
improve upon this basic strategy in

167
00:06:46,270 --> 00:06:50,770
every way we can we've created you<font color="#E5E5E5"> know</font>

168
00:06:49,270 --> 00:06:52,240
we've measured code coverage and created

169
00:06:50,770 --> 00:06:54,580
minimum input sets so instead of

170
00:06:52,240 --> 00:06:56,290
randomly running every PDF on the

171
00:06:54,580 --> 00:06:59,020
<font color="#E5E5E5">internet we can</font><font color="#CCCCCC"> use a tool that</font>

172
00:06:56,290 --> 00:07:00,460
identifies which of them get<font color="#E5E5E5"> you</font>

173
00:06:59,020 --> 00:07:02,169
different kinds<font color="#E5E5E5"> of code coverage and</font>

174
00:07:00,460 --> 00:07:04,810
then eliminates the ones that are

175
00:07:02,170 --> 00:07:07,810
redundant from that test set we can

176
00:07:04,810 --> 00:07:10,030
refocus is what a friend of mine calls a

177
00:07:07,810 --> 00:07:13,720
rocket-propelled chainsaw so once you

178
00:07:10,030 --> 00:07:17,169
find I like<font color="#E5E5E5"> that term</font><font color="#CCCCCC"> too once you find</font>

179
00:07:13,720 --> 00:07:20,230
a crash once you find a valid crashing

180
00:07:17,170 --> 00:07:22,300
input or<font color="#CCCCCC"> an invalid crashing input you</font>

181
00:07:20,230 --> 00:07:25,060
<font color="#E5E5E5">can</font><font color="#CCCCCC"> explore the state around</font><font color="#E5E5E5"> it explore</font>

182
00:07:22,300 --> 00:07:28,570
the code around it by continuing<font color="#CCCCCC"> to fuzz</font>

183
00:07:25,060 --> 00:07:31,270
that crashing input generally bugs

184
00:07:28,570 --> 00:07:33,969
clustered together right we can try to

185
00:07:31,270 --> 00:07:35,890
categorize crashes with Hugh sticks such

186
00:07:33,970 --> 00:07:38,440
as Microsoft's bang exploitable that was

187
00:07:35,890 --> 00:07:40,289
released many<font color="#E5E5E5"> years ago which some</font>

188
00:07:38,440 --> 00:07:42,400
people love some people<font color="#CCCCCC"> hate but</font>

189
00:07:40,290 --> 00:07:46,419
regardless<font color="#CCCCCC"> it did advance the field a</font>

190
00:07:42,400 --> 00:07:49,539
bit and then back in 2005-2006 the

191
00:07:46,419 --> 00:07:51,580
precursors<font color="#CCCCCC"> to cle came out XE and dart</font>

192
00:07:49,540 --> 00:07:53,169
they were some<font color="#CCCCCC"> of the first attempts at</font>

193
00:07:51,580 --> 00:07:55,359
combining concrete execution with

194
00:07:53,169 --> 00:07:57,099
symbolic execution and managing the

195
00:07:55,360 --> 00:08:00,669
state explosion through<font color="#E5E5E5"> path pruning</font>

196
00:07:57,100 --> 00:08:02,860
with STP and then<font color="#CCCCCC"> finally we've got</font>

197
00:08:00,669 --> 00:08:05,140
better SMT solvers than we had many

198
00:08:02,860 --> 00:08:07,330
<font color="#E5E5E5">years ago like z3 right so these are all</font>

199
00:08:05,140 --> 00:08:09,580
<font color="#CCCCCC">just iterative advances where we made</font>

200
00:08:07,330 --> 00:08:11,469
some more progress on the general

201
00:08:09,580 --> 00:08:13,630
<font color="#CCCCCC">strategy of just taking well form inputs</font>

202
00:08:11,470 --> 00:08:18,130
mutating them and then blindly observing

203
00:08:13,630 --> 00:08:22,000
results so in 2008 there is a clear

204
00:08:18,130 --> 00:08:23,860
delineation we're dumb fuzzing ends and

205
00:08:22,000 --> 00:08:26,530
smart fuzzing begins and that is

206
00:08:23,860 --> 00:08:28,479
delineated by something called sage that

207
00:08:26,530 --> 00:08:30,039
<font color="#CCCCCC">Microsoft made</font><font color="#E5E5E5"> I actually did</font><font color="#CCCCCC"> not</font>

208
00:08:28,479 --> 00:08:33,370
realize we'd be in a<font color="#E5E5E5"> Microsoft building</font>

209
00:08:30,040 --> 00:08:35,409
when I gave this talk stands for

210
00:08:33,370 --> 00:08:37,510
<font color="#E5E5E5">scalable automated guided execution and</font>

211
00:08:35,409 --> 00:08:39,520
it was published<font color="#E5E5E5"> in a paper named</font>

212
00:08:37,510 --> 00:08:41,200
automated white box fuzz testing it's

213
00:08:39,520 --> 00:08:43,539
<font color="#E5E5E5">really one of the seminal works in this</font>

214
00:08:41,200 --> 00:08:44,650
field it's a fairly accessible paper if

215
00:08:43,539 --> 00:08:47,260
<font color="#E5E5E5">you want to go read it I really</font>

216
00:08:44,650 --> 00:08:49,329
appreciate them stating what they did so

217
00:08:47,260 --> 00:08:52,780
clearly the key<font color="#E5E5E5"> advance here is what</font>

218
00:08:49,330 --> 00:08:54,460
they did is they combined buzzing with

219
00:08:52,780 --> 00:08:57,490
symbolic execution to dynamic

220
00:08:54,460 --> 00:08:58,840
generate new tests while managing the

221
00:08:57,490 --> 00:09:01,150
state explosion problem so there's three

222
00:08:58,840 --> 00:09:04,060
steps here right they run the program

223
00:09:01,150 --> 00:09:06,250
and trace<font color="#CCCCCC"> it and symbolically execute</font>

224
00:09:04,060 --> 00:09:09,010
that trace turn it into symbolic values

225
00:09:06,250 --> 00:09:11,320
to figure out what all the new

226
00:09:09,010 --> 00:09:13,870
constraints would be what<font color="#E5E5E5"> you know this</font>

227
00:09:11,320 --> 00:09:15,430
this<font color="#CCCCCC"> integer value needs</font><font color="#E5E5E5"> to be above</font>

228
00:09:13,870 --> 00:09:17,770
this in order to<font color="#E5E5E5"> pass through this gate</font>

229
00:09:15,430 --> 00:09:19,630
and reach this next basic<font color="#E5E5E5"> block then</font>

230
00:09:17,770 --> 00:09:21,280
they use a constraint solver to figure

231
00:09:19,630 --> 00:09:22,810
out what new inputs would satisfy those

232
00:09:21,280 --> 00:09:26,439
constraints so they can generate those

233
00:09:22,810 --> 00:09:28,119
new tests and then they<font color="#E5E5E5"> rank all the</font>

234
00:09:26,440 --> 00:09:29,620
different new<font color="#CCCCCC"> Tet the new inputs that</font>

235
00:09:28,120 --> 00:09:31,660
they've generated with the constraint

236
00:09:29,620 --> 00:09:33,490
solver to figure out which of them are

237
00:09:31,660 --> 00:09:36,610
actually<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be most effective at</font>

238
00:09:33,490 --> 00:09:38,380
gaining the most code code coverage so

239
00:09:36,610 --> 00:09:40,770
the<font color="#CCCCCC"> combination of these two techniques</font>

240
00:09:38,380 --> 00:09:43,270
is that they<font color="#E5E5E5"> can drill into a program</font>

241
00:09:40,770 --> 00:09:46,079
significantly deeper with more precision

242
00:09:43,270 --> 00:09:52,180
than a random puzzler would be able<font color="#CCCCCC"> to</font>

243
00:09:46,080 --> 00:09:53,680
and sage was wildly used at<font color="#E5E5E5"> Microsoft</font>

244
00:09:52,180 --> 00:09:56,290
during the development<font color="#E5E5E5"> cycle starting</font>

245
00:09:53,680 --> 00:09:57,969
and I think windows<font color="#CCCCCC"> 7 hugely successful</font>

246
00:09:56,290 --> 00:10:00,969
tool and some of the reasons<font color="#E5E5E5"> it's</font>

247
00:09:57,970 --> 00:10:02,440
successful are not what<font color="#E5E5E5"> you would</font><font color="#CCCCCC"> expect</font>

248
00:10:00,970 --> 00:10:04,420
as a security<font color="#CCCCCC"> researcher right so</font>

249
00:10:02,440 --> 00:10:08,200
there's clear<font color="#CCCCCC"> research advances here we</font>

250
00:10:04,420 --> 00:10:11,140
can do very advanced things compared to

251
00:10:08,200 --> 00:10:13,300
the buzzers that came before it we can

252
00:10:11,140 --> 00:10:15,939
<font color="#E5E5E5">overcome simple</font><font color="#CCCCCC"> check sums for instance</font>

253
00:10:13,300 --> 00:10:18,880
that would have stopped any fuzzer

254
00:10:15,940 --> 00:10:20,980
before it cold but really the<font color="#CCCCCC"> key</font>

255
00:10:18,880 --> 00:10:24,280
benefits<font color="#CCCCCC"> with sage was that it was easy</font>

256
00:10:20,980 --> 00:10:26,650
<font color="#E5E5E5">to use and it was available you know</font>

257
00:10:24,280 --> 00:10:28,150
<font color="#E5E5E5">Microsoft made it work on binaries so</font>

258
00:10:26,650 --> 00:10:30,640
there wasn't source code you didn't have

259
00:10:28,150 --> 00:10:32,439
to have a compilable set of source code

260
00:10:30,640 --> 00:10:34,300
in<font color="#CCCCCC"> order to</font><font color="#E5E5E5"> run it he just gave it the</font>

261
00:10:32,440 --> 00:10:37,090
output of whatever your dev psychol was

262
00:10:34,300 --> 00:10:39,430
it worked on very large programs you

263
00:10:37,090 --> 00:10:41,680
could run it on Microsoft Office and it

264
00:10:39,430 --> 00:10:44,550
would actually complete in a reasonable

265
00:10:41,680 --> 00:10:47,349
amount of time it would find real bugs

266
00:10:44,550 --> 00:10:49,329
it doesn't<font color="#E5E5E5"> require the developer to sit</font>

267
00:10:47,350 --> 00:10:51,580
there and come up with<font color="#E5E5E5"> a whole</font><font color="#CCCCCC"> bunch of</font>

268
00:10:49,330 --> 00:10:53,800
sample inputs to give them a whole bunch

269
00:10:51,580 --> 00:10:55,500
of sample document files it could<font color="#E5E5E5"> just</font>

270
00:10:53,800 --> 00:10:58,060
start from nothing and find<font color="#E5E5E5"> something</font>

271
00:10:55,500 --> 00:11:00,760
and then<font color="#E5E5E5"> finally when it actually did</font>

272
00:10:58,060 --> 00:11:03,520
work it found<font color="#E5E5E5"> real bugs and it gave you</font>

273
00:11:00,760 --> 00:11:05,620
the inputs that<font color="#E5E5E5"> caused those bugs and</font>

274
00:11:03,520 --> 00:11:07,000
bad some analysis around<font color="#E5E5E5"> it so that the</font>

275
00:11:05,620 --> 00:11:08,050
developer was sure that what they<font color="#E5E5E5"> were</font>

276
00:11:07,000 --> 00:11:11,800
fixing wasn't just

277
00:11:08,050 --> 00:11:13,870
a ghost and like a<font color="#CCCCCC"> null de-reference or</font>

278
00:11:11,800 --> 00:11:16,630
some kind of low value code quality

279
00:11:13,870 --> 00:11:18,420
issue it was a real security bugger<font color="#CCCCCC"> and</font>

280
00:11:16,630 --> 00:11:21,820
that's why sage was really revolutionary

281
00:11:18,420 --> 00:11:24,219
the combination<font color="#CCCCCC"> of</font><font color="#E5E5E5"> all these things now</font>

282
00:11:21,820 --> 00:11:26,410
at the same time there's<font color="#E5E5E5"> more</font>

283
00:11:24,220 --> 00:11:29,860
development going on in the open so sage

284
00:11:26,410 --> 00:11:33,430
not available outside Microsoft AFL open

285
00:11:29,860 --> 00:11:35,230
source in comparison you know<font color="#CCCCCC"> AFL's not</font>

286
00:11:33,430 --> 00:11:38,050
quite as smart it doesn't use symbolic

287
00:11:35,230 --> 00:11:40,060
execution the way that sage does but it

288
00:11:38,050 --> 00:11:42,189
has the benefit of being incredibly

289
00:11:40,060 --> 00:11:45,310
simple to<font color="#E5E5E5"> install and use for a bug</font>

290
00:11:42,190 --> 00:11:47,140
finding tool the key contribution for

291
00:11:45,310 --> 00:11:49,959
AFL is that they use compiler

292
00:11:47,140 --> 00:11:53,529
instrumentation to make programs easier

293
00:11:49,959 --> 00:11:55,899
to fuss that that is<font color="#CCCCCC"> really the key</font>

294
00:11:53,529 --> 00:11:57,430
<font color="#E5E5E5">thing that AFL got right it's also just</font>

295
00:11:55,899 --> 00:12:00,130
a well-engineered piece of software

296
00:11:57,430 --> 00:12:01,630
there's a<font color="#E5E5E5"> lot of really common knowledge</font>

297
00:12:00,130 --> 00:12:04,269
out there about<font color="#E5E5E5"> how to construct a</font>

298
00:12:01,630 --> 00:12:05,380
<font color="#CCCCCC">fuzzer and nihal zalewski packaged all</font>

299
00:12:04,269 --> 00:12:08,410
of that up into<font color="#E5E5E5"> a really nice</font>

300
00:12:05,380 --> 00:12:10,750
easy-to-use tool yeah it uses code

301
00:12:08,410 --> 00:12:14,740
coverage to God fuzzing it's somewhat

302
00:12:10,750 --> 00:12:16,089
fast but easily parallelizable and the

303
00:12:14,740 --> 00:12:19,029
most important<font color="#E5E5E5"> thing is that developers</font>

304
00:12:16,089 --> 00:12:23,800
use it right unused tools don't find

305
00:12:19,029 --> 00:12:25,420
bugs it's kind of kind of obvious the

306
00:12:23,800 --> 00:12:28,859
proof here they have a really nice

307
00:12:25,420 --> 00:12:31,479
little trophy case<font color="#CCCCCC"> I think they call it</font>

308
00:12:28,860 --> 00:12:33,130
this is as much<font color="#CCCCCC"> as</font><font color="#E5E5E5"> I can reasonably</font>

309
00:12:31,480 --> 00:12:35,920
screenshot but it goes on from many

310
00:12:33,130 --> 00:12:38,589
pages below this I<font color="#E5E5E5"> think there's one in</font>

311
00:12:35,920 --> 00:12:40,479
here my intern found my sick my 16 year

312
00:12:38,589 --> 00:12:43,360
old high school intern like AFL is

313
00:12:40,480 --> 00:12:45,430
really easy to use<font color="#E5E5E5"> I can't stress that</font>

314
00:12:43,360 --> 00:12:47,110
enough but it's really<font color="#E5E5E5"> attacked hard</font>

315
00:12:45,430 --> 00:12:49,599
targets this is kind of a testament to

316
00:12:47,110 --> 00:12:53,170
how we're really only at the beginning

317
00:12:49,600 --> 00:12:55,420
<font color="#E5E5E5">of the fuzzer kind of evolution here</font>

318
00:12:53,170 --> 00:12:57,099
we're even even a dumb fuzzer can find

319
00:12:55,420 --> 00:13:01,990
bugs and things like sequel light and

320
00:12:57,100 --> 00:13:07,329
<font color="#CCCCCC">Java score and open SSL and openssh you</font>

321
00:13:01,990 --> 00:13:10,839
know it's really really<font color="#E5E5E5"> impressive so to</font>

322
00:13:07,329 --> 00:13:12,550
recap sage is smart it intelligently

323
00:13:10,839 --> 00:13:16,480
explores program paths but<font color="#E5E5E5"> you can't use</font>

324
00:13:12,550 --> 00:13:19,329
it AFL is dumb you can use<font color="#CCCCCC"> it and it's</font>

325
00:13:16,480 --> 00:13:21,220
still incredibly effective it'll get

326
00:13:19,329 --> 00:13:21,910
stuck on<font color="#E5E5E5"> the same kinds of things that</font>

327
00:13:21,220 --> 00:13:24,790
all fuzzy

328
00:13:21,910 --> 00:13:27,040
<font color="#E5E5E5">I like simple checksums just bang its</font>

329
00:13:24,790 --> 00:13:30,010
head against the wall so you've<font color="#CCCCCC"> got a</font>

330
00:13:27,040 --> 00:13:31,480
couple of different from a research

331
00:13:30,010 --> 00:13:33,010
perspective here which one is better

332
00:13:31,480 --> 00:13:35,800
like can we create something<font color="#CCCCCC"> that</font>

333
00:13:33,010 --> 00:13:38,110
combines the best of both why do we have

334
00:13:35,800 --> 00:13:41,349
to be<font color="#CCCCCC"> satisfied with simply you</font><font color="#E5E5E5"> know a</font>

335
00:13:38,110 --> 00:13:43,180
dumb fuzzer and how do we extract all<font color="#CCCCCC"> of</font>

336
00:13:41,350 --> 00:13:45,070
this<font color="#CCCCCC"> incredible knowledge outside of</font>

337
00:13:43,180 --> 00:13:46,750
<font color="#E5E5E5">Microsoft Research and outside of</font>

338
00:13:45,070 --> 00:13:49,750
Microsoft's development cycle into the

339
00:13:46,750 --> 00:13:55,030
into the real world now that's a real

340
00:13:49,750 --> 00:13:56,800
<font color="#E5E5E5">world but the rest of the world so note</font>

341
00:13:55,030 --> 00:13:58,329
here on on some terminology at this

342
00:13:56,800 --> 00:14:00,969
point in the presentation i start to

343
00:13:58,330 --> 00:14:04,030
flip a little<font color="#E5E5E5"> bit from smart fussing to</font>

344
00:14:00,970 --> 00:14:05,770
automated bug finding systems<font color="#E5E5E5"> i just</font>

345
00:14:04,030 --> 00:14:08,220
consider automated bug finding to be a

346
00:14:05,770 --> 00:14:10,780
superset a little bit of smart fussing

347
00:14:08,220 --> 00:14:18,310
so that trips you up<font color="#E5E5E5"> that's what it</font>

348
00:14:10,780 --> 00:14:21,100
<font color="#CCCCCC">means so now we're in about</font><font color="#E5E5E5"> 2012 2013</font>

349
00:14:18,310 --> 00:14:23,170
and DARPA has decided this is<font color="#E5E5E5"> a problem</font>

350
00:14:21,100 --> 00:14:25,600
they'd like to attack<font color="#E5E5E5"> this is a problem</font>

351
00:14:23,170 --> 00:14:27,130
that they would like<font color="#E5E5E5"> to fix they're not</font>

352
00:14:25,600 --> 00:14:29,380
satisfied<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the status</font><font color="#CCCCCC"> quo they</font>

353
00:14:27,130 --> 00:14:31,930
<font color="#E5E5E5">believe that the publicly available</font>

354
00:14:29,380 --> 00:14:33,970
tools to automatically find bugs can be

355
00:14:31,930 --> 00:14:35,500
better can integrate more of the

356
00:14:33,970 --> 00:14:37,510
currently<font color="#E5E5E5"> available research that's out</font>

357
00:14:35,500 --> 00:14:40,600
there and they created a program called

358
00:14:37,510 --> 00:14:42,730
the cyber<font color="#CCCCCC"> grand challenge cyber grand</font>

359
00:14:40,600 --> 00:14:44,830
<font color="#CCCCCC">challenge is modeled based after the</font>

360
00:14:42,730 --> 00:14:47,410
capture the<font color="#E5E5E5"> flag contest that we're all</font>

361
00:14:44,830 --> 00:14:49,870
familiar with except<font color="#E5E5E5"> instead of humans</font>

362
00:14:47,410 --> 00:14:51,579
playing they're only machines the

363
00:14:49,870 --> 00:14:53,380
machines have to do everything<font color="#E5E5E5"> a human</font>

364
00:14:51,580 --> 00:14:55,930
would do and it capture the flag

365
00:14:53,380 --> 00:14:59,170
challenge they have to they have to

366
00:14:55,930 --> 00:15:02,229
receive pona Buhl's basically and find

367
00:14:59,170 --> 00:15:03,819
vulnerabilities in them those

368
00:15:02,230 --> 00:15:05,350
vulnerabilities are called proof of

369
00:15:03,820 --> 00:15:07,990
vulnerability it's a crashing input of

370
00:15:05,350 --> 00:15:10,000
some kinds or it might<font color="#CCCCCC"> be a an input</font>

371
00:15:07,990 --> 00:15:12,250
that gains some register control to

372
00:15:10,000 --> 00:15:15,040
demonstrate that there's some path

373
00:15:12,250 --> 00:15:16,780
towards exploitation for it and it needs

374
00:15:15,040 --> 00:15:19,839
<font color="#E5E5E5">to fix that vulnerability it needs to</font>

375
00:15:16,780 --> 00:15:21,579
fix it in a performance way it needs to

376
00:15:19,840 --> 00:15:24,330
you<font color="#E5E5E5"> know not slow down the program a</font>

377
00:15:21,580 --> 00:15:27,490
hundred<font color="#E5E5E5"> times it needs to keep its</font>

378
00:15:24,330 --> 00:15:29,440
services up so that other competitors

379
00:15:27,490 --> 00:15:30,730
can still interrogate that service and

380
00:15:29,440 --> 00:15:33,820
collect flags from it if they have a

381
00:15:30,730 --> 00:15:35,440
valid exploit the competition was

382
00:15:33,820 --> 00:15:37,120
measured<font color="#CCCCCC"> by a</font><font color="#E5E5E5"> fairly</font>

383
00:15:35,440 --> 00:15:40,750
complex scoring algorithm that I'll get

384
00:15:37,120 --> 00:15:43,180
into a little bit<font color="#E5E5E5"> later but all of</font><font color="#CCCCCC"> crss</font>

385
00:15:40,750 --> 00:15:45,790
were given points the same way that a

386
00:15:43,180 --> 00:15:48,370
CTF competitor would and the<font color="#E5E5E5"> CRS with</font>

387
00:15:45,790 --> 00:15:49,540
the most points win the contests<font color="#CCCCCC"> alright</font>

388
00:15:48,370 --> 00:15:52,570
so that's that's the cyber<font color="#CCCCCC"> Grand</font>

389
00:15:49,540 --> 00:15:54,670
<font color="#CCCCCC">Challenge in a nutshell the</font><font color="#E5E5E5"> really</font>

390
00:15:52,570 --> 00:15:57,040
strange thing for<font color="#E5E5E5"> me and Trey lab it's</font>

391
00:15:54,670 --> 00:16:02,319
one of the competitors in this was

392
00:15:57,040 --> 00:16:05,230
observing the the converging strategies

393
00:16:02,320 --> 00:16:07,330
of all the<font color="#E5E5E5"> teams that played in the</font>

394
00:16:05,230 --> 00:16:08,890
<font color="#E5E5E5">public presentations that every team is</font>

395
00:16:07,330 --> 00:16:10,450
given since the cyber<font color="#E5E5E5"> Grand Challenge</font>

396
00:16:08,890 --> 00:16:13,630
ended which was a different Def Con this

397
00:16:10,450 --> 00:16:15,220
summer you saw them all<font color="#CCCCCC"> combined the</font>

398
00:16:13,630 --> 00:16:16,870
same basic elements you saw them

399
00:16:15,220 --> 00:16:18,600
combined fuzzing and symbolic execution

400
00:16:16,870 --> 00:16:20,980
in some way that<font color="#E5E5E5"> they could communicate</font>

401
00:16:18,600 --> 00:16:23,800
some of them sprinkled in other program

402
00:16:20,980 --> 00:16:27,190
analyses that were you know well known

403
00:16:23,800 --> 00:16:29,079
nothing<font color="#CCCCCC"> really revolutionary here a lot</font>

404
00:16:27,190 --> 00:16:33,010
<font color="#CCCCCC">of them tried to prioritize which inputs</font>

405
00:16:29,080 --> 00:16:34,300
to test you know all these different but

406
00:16:33,010 --> 00:16:35,980
everybody was concerned with resource

407
00:16:34,300 --> 00:16:37,510
control and allocation because the cyber

408
00:16:35,980 --> 00:16:39,970
Grand Challenge scored you based on it

409
00:16:37,510 --> 00:16:43,150
but the same general strategies for

410
00:16:39,970 --> 00:16:45,490
every<font color="#E5E5E5"> single one and you could prove</font>

411
00:16:43,150 --> 00:16:47,230
this based<font color="#E5E5E5"> on the the outcome based on</font>

412
00:16:45,490 --> 00:16:49,570
the scores when you looked at the<font color="#E5E5E5"> score</font>

413
00:16:47,230 --> 00:16:52,780
in<font color="#E5E5E5"> the final event in that live YouTube</font>

414
00:16:49,570 --> 00:16:54,760
stream that<font color="#E5E5E5"> they had everybody basically</font>

415
00:16:52,780 --> 00:16:57,100
tracked very very close to<font color="#CCCCCC"> each other</font>

416
00:16:54,760 --> 00:17:01,230
the difference in points between first

417
00:16:57,100 --> 00:17:03,790
and seventh was really not substantial

418
00:17:01,230 --> 00:17:05,560
now that's not to say it was kind of a

419
00:17:03,790 --> 00:17:07,959
failure what we did find though is we

420
00:17:05,560 --> 00:17:10,060
found<font color="#E5E5E5"> that we came up on several really</font>

421
00:17:07,959 --> 00:17:12,160
difficult research problems that we

422
00:17:10,060 --> 00:17:14,280
<font color="#E5E5E5">don't have good solutions to and these</font>

423
00:17:12,160 --> 00:17:17,410
<font color="#E5E5E5">are all topics that you could spend ages</font>

424
00:17:14,280 --> 00:17:20,079
working on things like how do<font color="#E5E5E5"> you</font>

425
00:17:17,410 --> 00:17:22,209
efficiently mutate inputs<font color="#E5E5E5"> not just in</font>

426
00:17:20,079 --> 00:17:25,300
terms of selecting them but what

427
00:17:22,209 --> 00:17:29,080
mutations to apply all<font color="#CCCCCC"> of these</font><font color="#E5E5E5"> every</font>

428
00:17:25,300 --> 00:17:30,340
single<font color="#E5E5E5"> one could fill a PhD thesis and I</font>

429
00:17:29,080 --> 00:17:33,669
hope<font color="#CCCCCC"> that some of these topics are</font>

430
00:17:30,340 --> 00:17:35,980
explored after the contest has ended now

431
00:17:33,670 --> 00:17:38,020
now we kind of know what the limits are

432
00:17:35,980 --> 00:17:39,880
of applicable technology and like how

433
00:17:38,020 --> 00:17:41,740
far they get us and we<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to figure</font>

434
00:17:39,880 --> 00:17:45,250
<font color="#CCCCCC">out the</font><font color="#E5E5E5"> solutions to these problems to</font>

435
00:17:41,740 --> 00:17:46,720
advance the state<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> art again so I</font>

436
00:17:45,250 --> 00:17:48,820
mentioned<font color="#CCCCCC"> that we competed in this</font>

437
00:17:46,720 --> 00:17:49,210
challenge here is one of those solutions

438
00:17:48,820 --> 00:17:52,809
that

439
00:17:49,210 --> 00:17:54,010
came up with so we had a really

440
00:17:52,809 --> 00:17:55,899
difficult problem we're a very small

441
00:17:54,010 --> 00:17:57,669
<font color="#E5E5E5">team or a commercial</font><font color="#CCCCCC"> company i have to</font>

442
00:17:55,899 --> 00:17:59,678
pay salaries and<font color="#E5E5E5"> i can't recruit a team</font>

443
00:17:57,669 --> 00:18:02,830
of like<font color="#E5E5E5"> 50 grad students that work for</font>

444
00:17:59,679 --> 00:18:04,690
<font color="#E5E5E5">five hundred dollars a month so we ended</font>

445
00:18:02,830 --> 00:18:07,299
up having about three maybe sometimes

446
00:18:04,690 --> 00:18:09,460
for people working together on<font color="#CCCCCC"> our team</font>

447
00:18:07,299 --> 00:18:12,100
with no<font color="#E5E5E5"> prior development that we could</font>

448
00:18:09,460 --> 00:18:14,440
take<font color="#CCCCCC"> advantage of so we really leaned on</font>

449
00:18:12,100 --> 00:18:17,350
<font color="#CCCCCC">open source technology and we leaned on</font>

450
00:18:14,440 --> 00:18:19,270
code bases like CLE like a Python

451
00:18:17,350 --> 00:18:21,010
symbolic execution framework that we

452
00:18:19,270 --> 00:18:26,559
found on github and<font color="#E5E5E5"> then later hire the</font>

453
00:18:21,010 --> 00:18:28,299
author of we used tools lycra danza for

454
00:18:26,559 --> 00:18:29,980
input generation and wrapped it<font color="#E5E5E5"> in our</font>

455
00:18:28,299 --> 00:18:33,309
own dynamic binary tracing engine that

456
00:18:29,980 --> 00:18:35,080
we wrote but these tools were not built

457
00:18:33,309 --> 00:18:36,639
to talk to<font color="#E5E5E5"> each other most tools that</font>

458
00:18:35,080 --> 00:18:38,799
security researchers build work in

459
00:18:36,640 --> 00:18:39,970
isolation they silo their data they

460
00:18:38,799 --> 00:18:42,250
produce some kind of<font color="#E5E5E5"> output on the</font>

461
00:18:39,970 --> 00:18:44,950
terminal they don't accept all the same

462
00:18:42,250 --> 00:18:46,720
kinds of input it's really difficult<font color="#E5E5E5"> to</font>

463
00:18:44,950 --> 00:18:49,270
strap all these tools together into an

464
00:18:46,720 --> 00:18:51,669
integrated<font color="#CCCCCC"> system so we we found very</font>

465
00:18:49,270 --> 00:18:54,129
<font color="#E5E5E5">quickly that the universal input that</font>

466
00:18:51,669 --> 00:18:56,440
all of these programs take is input

467
00:18:54,130 --> 00:18:59,830
itself the inputs to the program that it

468
00:18:56,440 --> 00:19:02,980
constructs so we<font color="#E5E5E5"> modified each of those</font>

469
00:18:59,830 --> 00:19:06,490
programs<font color="#CCCCCC"> klee</font><font color="#E5E5E5"> pie</font><font color="#CCCCCC"> python symbolic</font>

470
00:19:02,980 --> 00:19:09,899
execution framework various other tools

471
00:19:06,490 --> 00:19:11,590
that<font color="#E5E5E5"> we use to test for bugs and we</font>

472
00:19:09,899 --> 00:19:14,739
collected all those inputs that

473
00:19:11,590 --> 00:19:16,270
generated said them back<font color="#CCCCCC"> into a</font>

474
00:19:14,740 --> 00:19:18,210
knowledge base<font color="#E5E5E5"> and then in that</font>

475
00:19:16,270 --> 00:19:22,389
knowledge base which we called min set

476
00:19:18,210 --> 00:19:25,299
rank them for the minimum<font color="#E5E5E5"> set of maximal</font>

477
00:19:22,390 --> 00:19:26,799
code coverage for those inputs and used

478
00:19:25,299 --> 00:19:28,840
those<font color="#E5E5E5"> to select which ones we would</font>

479
00:19:26,799 --> 00:19:31,210
further tests for and then once that min

480
00:19:28,840 --> 00:19:32,529
set evaluated what the best ones were it

481
00:19:31,210 --> 00:19:34,630
would actually share them with all the

482
00:19:32,529 --> 00:19:36,640
<font color="#E5E5E5">rest of the tools that way if a fuzzer</font>

483
00:19:34,630 --> 00:19:38,770
got stuck going<font color="#E5E5E5"> to check some it would</font>

484
00:19:36,640 --> 00:19:40,779
give the best<font color="#E5E5E5"> available input that it</font>

485
00:19:38,770 --> 00:19:42,010
had back to<font color="#CCCCCC"> min set and min set might</font>

486
00:19:40,779 --> 00:19:44,049
hand it off to a symbolic execution

487
00:19:42,010 --> 00:19:45,970
framework and the symbolic execution

488
00:19:44,049 --> 00:19:48,039
framework<font color="#E5E5E5"> would overcome the checksum</font>

489
00:19:45,970 --> 00:19:50,350
create a new<font color="#E5E5E5"> valid input that gained</font>

490
00:19:48,039 --> 00:19:52,059
more code coverage send it back to min

491
00:19:50,350 --> 00:19:54,610
set and then min set would send it to a

492
00:19:52,059 --> 00:19:57,340
to a fuzzer again and now magically the

493
00:19:54,610 --> 00:20:00,610
fuzzer was able to<font color="#E5E5E5"> overcome that code</font>

494
00:19:57,340 --> 00:20:03,110
path that it was stuck on before so this

495
00:20:00,610 --> 00:20:05,928
<font color="#E5E5E5">is kind</font><font color="#CCCCCC"> of key to our strategy</font>

496
00:20:03,110 --> 00:20:07,340
it worked very<font color="#CCCCCC"> well but it's</font><font color="#E5E5E5"> also very</font>

497
00:20:05,929 --> 00:20:11,510
similar to the techniques<font color="#E5E5E5"> that other</font>

498
00:20:07,340 --> 00:20:15,970
teams came<font color="#CCCCCC"> up with so the benefits here</font>

499
00:20:11,510 --> 00:20:18,440
this challenge<font color="#E5E5E5"> really you know beyond</font>

500
00:20:15,970 --> 00:20:21,530
constructing several practical tools

501
00:20:18,440 --> 00:20:23,450
that are now open source and identifying

502
00:20:21,530 --> 00:20:25,540
these research problems that we now must

503
00:20:23,450 --> 00:20:27,770
overcome to advance this field further

504
00:20:25,540 --> 00:20:29,059
cyber<font color="#CCCCCC"> Grand Challenge was so effective</font>

505
00:20:27,770 --> 00:20:32,000
<font color="#CCCCCC">because it</font><font color="#E5E5E5"> got the right</font><font color="#CCCCCC"> people in</font><font color="#E5E5E5"> the</font>

506
00:20:29,059 --> 00:20:33,830
room talking<font color="#E5E5E5"> to each other it got</font>

507
00:20:32,000 --> 00:20:35,750
academics thinking about fuzzing again

508
00:20:33,830 --> 00:20:38,809
where they thought this<font color="#E5E5E5"> was a dead field</font>

509
00:20:35,750 --> 00:20:42,440
you don't see a huge amount of academic

510
00:20:38,809 --> 00:20:44,389
<font color="#CCCCCC">interest in fuzzing you know in</font><font color="#E5E5E5"> many</font>

511
00:20:42,440 --> 00:20:46,010
many<font color="#E5E5E5"> years they've all moved on to</font>

512
00:20:44,390 --> 00:20:47,890
symbolic execution and other kind<font color="#E5E5E5"> of</font>

513
00:20:46,010 --> 00:20:50,960
programming languages related topics

514
00:20:47,890 --> 00:20:53,720
whereas fuzzing kind of just halted

515
00:20:50,960 --> 00:20:56,480
after the the first<font color="#E5E5E5"> initial attempts</font>

516
00:20:53,720 --> 00:20:58,370
<font color="#E5E5E5">that publishing stuff security</font>

517
00:20:56,480 --> 00:20:59,540
<font color="#CCCCCC">researchers never thought that academics</font>

518
00:20:58,370 --> 00:21:02,540
could be practical they didn't

519
00:20:59,540 --> 00:21:05,510
understand the value<font color="#E5E5E5"> that certain new</font>

520
00:21:02,540 --> 00:21:07,399
papers had presented only<font color="#E5E5E5"> until they</font>

521
00:21:05,510 --> 00:21:10,100
were pressured inside of a contest to

522
00:21:07,400 --> 00:21:12,020
apply them and make them work to compete

523
00:21:10,100 --> 00:21:13,219
against other team members and then none

524
00:21:12,020 --> 00:21:14,809
<font color="#CCCCCC">of these people actually knew how to</font>

525
00:21:13,220 --> 00:21:18,440
create distributed systems that would

526
00:21:14,809 --> 00:21:20,149
<font color="#E5E5E5">work at scale to find real bugs I think</font>

527
00:21:18,440 --> 00:21:22,100
probably the biggest challenge for us

528
00:21:20,150 --> 00:21:23,750
going into this competition<font color="#CCCCCC"> because we</font>

529
00:21:22,100 --> 00:21:25,730
have a mix of academics and security

530
00:21:23,750 --> 00:21:28,040
researchers<font color="#CCCCCC"> trilobites we did not have</font>

531
00:21:25,730 --> 00:21:29,809
distributed systems expertise and we

532
00:21:28,040 --> 00:21:31,790
definitely<font color="#E5E5E5"> felt fell on our face pretty</font>

533
00:21:29,809 --> 00:21:33,470
hard just trying to figure<font color="#CCCCCC"> out ec2 and</font>

534
00:21:31,790 --> 00:21:35,210
docker and react and all the rest of

535
00:21:33,470 --> 00:21:39,770
these things<font color="#E5E5E5"> that like regular</font>

536
00:21:35,210 --> 00:21:41,540
developers understand very well so most

537
00:21:39,770 --> 00:21:42,650
importantly cyber Grand Challenge

538
00:21:41,540 --> 00:21:44,899
<font color="#CCCCCC">advanced the</font><font color="#E5E5E5"> state of the</font><font color="#CCCCCC"> art bug</font>

539
00:21:42,650 --> 00:21:46,970
finding problems we thought were out of

540
00:21:44,900 --> 00:21:52,730
reach are now solved and i'll give<font color="#CCCCCC"> you</font>

541
00:21:46,970 --> 00:21:55,040
one great example so crack at her crack

542
00:21:52,730 --> 00:21:57,140
adder is<font color="#E5E5E5"> a name for a very subtle</font>

543
00:21:55,040 --> 00:22:00,889
vulnerability discovered in 2003 by

544
00:21:57,140 --> 00:22:02,179
marked out the total<font color="#E5E5E5"> sum of vulnerable</font>

545
00:22:00,890 --> 00:22:04,610
code that we're<font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> here is</font>

546
00:22:02,179 --> 00:22:06,320
about 50 lines of code but there<font color="#E5E5E5"> is a</font>

547
00:22:04,610 --> 00:22:08,120
state machine in it with so much hidden

548
00:22:06,320 --> 00:22:09,889
complexity that it is essentially

549
00:22:08,120 --> 00:22:12,800
impossible to find with purely static

550
00:22:09,890 --> 00:22:15,590
analysis the path explosion problem is

551
00:22:12,800 --> 00:22:16,700
particularly acute with this piece of

552
00:22:15,590 --> 00:22:19,260
<font color="#CCCCCC">code</font>

553
00:22:16,700 --> 00:22:21,510
yeah there are more atoms in the

554
00:22:19,260 --> 00:22:23,520
universe sorry<font color="#E5E5E5"> there are more there's</font>

555
00:22:21,510 --> 00:22:24,810
more state in this 50 lines of code than

556
00:22:23,520 --> 00:22:29,550
there are atoms in<font color="#E5E5E5"> the universe which is</font>

557
00:22:24,810 --> 00:22:31,020
insane the effect though the impacts and

558
00:22:29,550 --> 00:22:32,879
the reason why it's so important to find

559
00:22:31,020 --> 00:22:35,850
bugs like this is<font color="#E5E5E5"> because the impact of</font>

560
00:22:32,880 --> 00:22:37,710
this flaw is back in 2003 you could take

561
00:22:35,850 --> 00:22:40,919
over essentially every mail server in

562
00:22:37,710 --> 00:22:43,350
the<font color="#E5E5E5"> world so this</font><font color="#CCCCCC"> is a this</font><font color="#E5E5E5"> is a cliff</font>

563
00:22:40,920 --> 00:22:45,510
we need to scale in order<font color="#E5E5E5"> to find bugs</font>

564
00:22:43,350 --> 00:22:48,780
that are really important<font color="#CCCCCC"> you know we</font>

565
00:22:45,510 --> 00:22:50,340
can't just let<font color="#E5E5E5"> this be so it's kind of</font>

566
00:22:48,780 --> 00:22:52,710
been Everest for a lot<font color="#E5E5E5"> of these</font>

567
00:22:50,340 --> 00:22:58,199
automated tools here is a shamelessly

568
00:22:52,710 --> 00:23:00,900
stolen and fairly a simple illustration

569
00:22:58,200 --> 00:23:02,430
of what this flaw looks like it's a

570
00:23:00,900 --> 00:23:05,790
state machine it has a<font color="#E5E5E5"> very simple job</font>

571
00:23:02,430 --> 00:23:07,800
it validates email addresses so it looks

572
00:23:05,790 --> 00:23:11,490
at these brackets and<font color="#E5E5E5"> looks at these</font>

573
00:23:07,800 --> 00:23:13,139
<font color="#E5E5E5">parentheses and you know increments or</font>

574
00:23:11,490 --> 00:23:16,740
decrement a buffer based on what it

575
00:23:13,140 --> 00:23:18,870
finds now the essential<font color="#E5E5E5"> vulnerability is</font>

576
00:23:16,740 --> 00:23:21,750
that there is a pointer into a copy

577
00:23:18,870 --> 00:23:24,270
buffer that is not decremented when you

578
00:23:21,750 --> 00:23:26,160
receive an opening parenthesis you can

579
00:23:24,270 --> 00:23:27,930
go back<font color="#E5E5E5"> and read papers upon papers upon</font>

580
00:23:26,160 --> 00:23:29,370
papers about crack adder it's not really

581
00:23:27,930 --> 00:23:31,650
important for<font color="#E5E5E5"> me to discuss everything</font>

582
00:23:29,370 --> 00:23:34,110
about it right now but<font color="#E5E5E5"> the point is that</font>

583
00:23:31,650 --> 00:23:36,540
out<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> massive amount</font><font color="#CCCCCC"> of state</font>

584
00:23:34,110 --> 00:23:39,300
encoded into this program there is<font color="#E5E5E5"> one</font>

585
00:23:36,540 --> 00:23:41,460
input that causes a vulnerability

586
00:23:39,300 --> 00:23:44,370
there's one input that that can exploit

587
00:23:41,460 --> 00:23:49,740
this program and it is a crackly

588
00:23:44,370 --> 00:23:52,709
difficult to find um however a point

589
00:23:49,740 --> 00:23:54,180
here<font color="#E5E5E5"> is that we were able to find this</font>

590
00:23:52,710 --> 00:23:55,650
vulnerability there<font color="#CCCCCC"> are several systems</font>

591
00:23:54,180 --> 00:23:57,540
that can now find this vulnerability

592
00:23:55,650 --> 00:24:02,580
post sub or grin challenge because it

593
00:23:57,540 --> 00:24:05,610
was put up there as a has a tests during

594
00:24:02,580 --> 00:24:07,860
the final event so our CRS can find this

595
00:24:05,610 --> 00:24:09,209
and it finds it through a variant of the

596
00:24:07,860 --> 00:24:11,580
analysis boosting I talked about<font color="#CCCCCC"> on the</font>

597
00:24:09,210 --> 00:24:12,780
last slide when we actually do get all

598
00:24:11,580 --> 00:24:16,050
those inputs one thing that I neglected

599
00:24:12,780 --> 00:24:18,060
<font color="#E5E5E5">to mention is that instead of simply</font>

600
00:24:16,050 --> 00:24:20,520
minimizing the inputs we also mix them

601
00:24:18,060 --> 00:24:22,800
so we have one valid input and other

602
00:24:20,520 --> 00:24:24,870
valid input we might just cut them<font color="#E5E5E5"> both</font>

603
00:24:22,800 --> 00:24:27,120
a half and merge them<font color="#E5E5E5"> back together</font>

604
00:24:24,870 --> 00:24:30,300
again and that mixing can eventually

605
00:24:27,120 --> 00:24:32,550
result in a crashing input

606
00:24:30,300 --> 00:24:35,010
for crack at<font color="#CCCCCC"> ur</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> we can reliably</font>

607
00:24:32,550 --> 00:24:36,450
reproduce this behavior not just<font color="#E5E5E5"> in a</font>

608
00:24:35,010 --> 00:24:38,970
lab but we<font color="#CCCCCC"> actually brought a live demo</font>

609
00:24:36,450 --> 00:24:41,580
a live demo of it to<font color="#E5E5E5"> the last conference</font>

610
00:24:38,970 --> 00:24:43,680
that<font color="#E5E5E5"> I was that so this</font><font color="#CCCCCC"> is something</font>

611
00:24:41,580 --> 00:24:49,710
<font color="#E5E5E5">that no one really</font><font color="#CCCCCC"> thought would be</font>

612
00:24:43,680 --> 00:24:52,830
solved by this challenge but was so the

613
00:24:49,710 --> 00:24:54,870
upsides here are all the automated

614
00:24:52,830 --> 00:24:57,000
systems found real bugs total success

615
00:24:54,870 --> 00:24:59,939
right some of<font color="#CCCCCC"> the bugs were thought to</font>

616
00:24:57,000 --> 00:25:02,280
be impossible like crack at<font color="#CCCCCC"> ER the</font>

617
00:24:59,940 --> 00:25:05,370
challenges so the cyber<font color="#CCCCCC"> Grand Challenge</font>

618
00:25:02,280 --> 00:25:06,780
released all of the the scoring system

619
00:25:05,370 --> 00:25:09,090
that<font color="#CCCCCC"> they used</font><font color="#E5E5E5"> for all the different</font>

620
00:25:06,780 --> 00:25:10,040
automated systems and they put<font color="#E5E5E5"> it on the</font>

621
00:25:09,090 --> 00:25:12,270
internet so that<font color="#E5E5E5"> other people</font>

622
00:25:10,040 --> 00:25:15,600
constructing analysis tools can measure

623
00:25:12,270 --> 00:25:17,580
their own tools against as well and then

624
00:25:15,600 --> 00:25:19,889
some of<font color="#E5E5E5"> the bugs that were found in</font>

625
00:25:17,580 --> 00:25:21,750
those challenge sets we're<font color="#E5E5E5"> actually</font>

626
00:25:19,890 --> 00:25:23,190
unknown to the author's themselves so

627
00:25:21,750 --> 00:25:25,260
even when you're trying<font color="#E5E5E5"> to construct a</font>

628
00:25:23,190 --> 00:25:27,780
program that's maybe only 200 lines long

629
00:25:25,260 --> 00:25:29,190
or a thousand lines long or 20,000 lines

630
00:25:27,780 --> 00:25:31,260
long for the purpose of inserting

631
00:25:29,190 --> 00:25:34,340
vulnerabilities I'm sure many CTF

632
00:25:31,260 --> 00:25:37,530
developers understand that sometimes<font color="#E5E5E5"> you</font>

633
00:25:34,340 --> 00:25:40,199
unintentionally produce alternate ways

634
00:25:37,530 --> 00:25:41,550
to solve the challenge and<font color="#E5E5E5"> that that</font>

635
00:25:40,200 --> 00:25:43,050
definitely occurred and the automated

636
00:25:41,550 --> 00:25:47,700
systems were smart enough to<font color="#E5E5E5"> find even</font>

637
00:25:43,050 --> 00:25:49,830
those bugs so brief aside here these

638
00:25:47,700 --> 00:25:52,230
challenge sets are one of the<font color="#E5E5E5"> most</font>

639
00:25:49,830 --> 00:25:53,550
important outcomes one of the most

640
00:25:52,230 --> 00:25:56,700
important developments from the<font color="#CCCCCC"> cyber</font>

641
00:25:53,550 --> 00:25:59,070
<font color="#CCCCCC">grand challenge they are 247 c and c++</font>

642
00:25:56,700 --> 00:26:03,740
network services that implement all a

643
00:25:59,070 --> 00:26:05,820
variety of software they<font color="#CCCCCC"> are not simple</font>

644
00:26:03,740 --> 00:26:07,740
tests of vulnerabilities they are not

645
00:26:05,820 --> 00:26:10,710
like you know<font color="#E5E5E5"> 10 lines of code that</font>

646
00:26:07,740 --> 00:26:12,840
implement a buffer overflow they are

647
00:26:10,710 --> 00:26:15,590
complex programs that implement custom

648
00:26:12,840 --> 00:26:19,590
<font color="#E5E5E5">network protocols and image formats and</font>

649
00:26:15,590 --> 00:26:21,270
all kinds of other systems they don't

650
00:26:19,590 --> 00:26:24,419
implement rfcs there's no way you can

651
00:26:21,270 --> 00:26:26,340
<font color="#E5E5E5">prepare ahead of time for</font><font color="#CCCCCC"> them and they</font>

652
00:26:24,420 --> 00:26:28,410
all<font color="#CCCCCC"> have one</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> more exploitable</font>

653
00:26:26,340 --> 00:26:30,840
crashing vulnerabilities they're all

654
00:26:28,410 --> 00:26:32,190
documented that come with CW ease so you

655
00:26:30,840 --> 00:26:34,800
know exactly what owner builder you

656
00:26:32,190 --> 00:26:37,220
found they come<font color="#E5E5E5"> with tests with not just</font>

657
00:26:34,800 --> 00:26:39,690
valid inputs but also crashing<font color="#E5E5E5"> in cooks</font>

658
00:26:37,220 --> 00:26:41,310
they come<font color="#E5E5E5"> with patches so if you're</font>

659
00:26:39,690 --> 00:26:43,200
testing patch strategies you can measure

660
00:26:41,310 --> 00:26:45,029
against the reference set they

661
00:26:43,200 --> 00:26:46,710
come with performance measurements so

662
00:26:45,029 --> 00:26:48,929
you know if you<font color="#E5E5E5"> patched it how much of</font>

663
00:26:46,710 --> 00:26:51,330
an<font color="#CCCCCC"> impact you had on the performance of</font>

664
00:26:48,929 --> 00:26:52,919
that program and they're all available

665
00:26:51,330 --> 00:26:55,080
on the internet and we took them

666
00:26:52,919 --> 00:27:00,840
imported them to linux and windows and

667
00:26:55,080 --> 00:27:03,330
mac yeah no I mean cwe so common

668
00:27:00,840 --> 00:27:06,178
weakness enumeration yeah so the common

669
00:27:03,330 --> 00:27:08,699
weakness enumerations are kind of a

670
00:27:06,179 --> 00:27:11,039
taxonomy<font color="#CCCCCC"> of potential flaws so you can</font>

671
00:27:08,700 --> 00:27:13,350
have you know heat buffer overflow verse

672
00:27:11,039 --> 00:27:16,139
an integer overflow versus a stack

673
00:27:13,350 --> 00:27:18,360
buffer overflow versus a you know type

674
00:27:16,139 --> 00:27:20,760
confusion and all these different kinds

675
00:27:18,360 --> 00:27:22,830
of things so every single program in

676
00:27:20,760 --> 00:27:25,110
this data set is annotated with the CW

677
00:27:22,830 --> 00:27:26,730
<font color="#E5E5E5">ease that are embedded inside of it that</font>

678
00:27:25,110 --> 00:27:28,168
way you might find a program that's

679
00:27:26,730 --> 00:27:30,510
incredibly good at finding type

680
00:27:28,169 --> 00:27:32,330
confusion bugs and you can test it

681
00:27:30,510 --> 00:27:35,190
against this entire data set and find

682
00:27:32,330 --> 00:27:38,340
measure if you found all the type

683
00:27:35,190 --> 00:27:40,799
confusion bugs but then as a analysis

684
00:27:38,340 --> 00:27:42,990
tool user I can demonstrate or rather I

685
00:27:40,799 --> 00:27:45,360
can determine that oh this tool only

686
00:27:42,990 --> 00:27:46,980
<font color="#E5E5E5">finds type confusion I need to augment</font>

687
00:27:45,360 --> 00:27:49,949
my testing with this other tool that

688
00:27:46,980 --> 00:27:51,929
also finds you know buffer overflows and

689
00:27:49,950 --> 00:27:55,200
then with the two<font color="#CCCCCC"> of them combined</font><font color="#E5E5E5"> I get</font>

690
00:27:51,929 --> 00:27:56,899
higher coverage you know that way I know

691
00:27:55,200 --> 00:27:59,279
<font color="#E5E5E5">what I'm finding and I know what I'm not</font>

692
00:27:56,899 --> 00:28:01,559
this is really the first data set of its

693
00:27:59,279 --> 00:28:03,899
kind it's incredibly useful we have a

694
00:28:01,559 --> 00:28:06,690
blog post talking<font color="#E5E5E5"> about it and it's</font>

695
00:28:03,899 --> 00:28:08,729
aptly named your tool works better than

696
00:28:06,690 --> 00:28:10,830
mine there's a question mark there prove

697
00:28:08,730 --> 00:28:12,659
it that's what the challenge sets are

698
00:28:10,830 --> 00:28:15,539
really useful for so<font color="#E5E5E5"> I highly encourage</font>

699
00:28:12,659 --> 00:28:17,820
people to take<font color="#CCCCCC"> a look at these and try</font>

700
00:28:15,539 --> 00:28:20,220
them out on their own they're actively

701
00:28:17,820 --> 00:28:21,629
developed by us at this point<font color="#E5E5E5"> we're</font>

702
00:28:20,220 --> 00:28:25,320
still making them work on<font color="#CCCCCC"> Windows not</font>

703
00:28:21,630 --> 00:28:29,100
quite there yet so the downsides here so

704
00:28:25,320 --> 00:28:31,320
CGC wasn't all you know roses most teams

705
00:28:29,100 --> 00:28:34,830
that<font color="#CCCCCC"> built systems still require expert</font>

706
00:28:31,320 --> 00:28:38,250
operation like<font color="#E5E5E5"> i cannot i have my crs in</font>

707
00:28:34,830 --> 00:28:40,139
a github repo my team can run it if<font color="#CCCCCC"> i</font>

708
00:28:38,250 --> 00:28:42,779
open<font color="#E5E5E5"> sourced it not many other people</font>

709
00:28:40,139 --> 00:28:45,299
could still requires a lot of expert

710
00:28:42,779 --> 00:28:48,059
knowledge to hook up these things<font color="#CCCCCC"> to</font>

711
00:28:45,299 --> 00:28:50,429
real software the usability problem was

712
00:28:48,059 --> 00:28:51,629
not scored<font color="#CCCCCC"> in the cyber grand challenge</font>

713
00:28:50,429 --> 00:28:53,370
and therefore there was no real

714
00:28:51,629 --> 00:28:55,439
advancement made on that<font color="#E5E5E5"> front that's</font>

715
00:28:53,370 --> 00:28:57,899
fine it's not really<font color="#CCCCCC"> DARPA's</font>

716
00:28:55,440 --> 00:29:00,000
concern that they care about<font color="#E5E5E5"> advance in</font>

717
00:28:57,899 --> 00:29:01,620
the state of research it's on us and

718
00:29:00,000 --> 00:29:06,029
it's on everyone in this room to<font color="#E5E5E5"> figure</font>

719
00:29:01,620 --> 00:29:07,379
it<font color="#E5E5E5"> out post challenge the cyber Grand</font>

720
00:29:06,029 --> 00:29:09,539
<font color="#E5E5E5">Challenge was conducted inside of a</font>

721
00:29:07,379 --> 00:29:11,789
custom operating system<font color="#E5E5E5"> called decree it</font>

722
00:29:09,539 --> 00:29:13,740
was made<font color="#CCCCCC"> to be easier to analyze easier</font>

723
00:29:11,789 --> 00:29:16,408
to reason about so that these competitor

724
00:29:13,740 --> 00:29:17,700
systems could actually find bugs they

725
00:29:16,409 --> 00:29:19,950
were worried that<font color="#CCCCCC"> it would be too</font>

726
00:29:17,700 --> 00:29:22,080
difficult to simply throw like<font color="#E5E5E5"> Firefox</font>

727
00:29:19,950 --> 00:29:24,509
or something at these programs so they

728
00:29:22,080 --> 00:29:27,059
lowered the bar a bit to ensure that<font color="#CCCCCC"> the</font>

729
00:29:24,509 --> 00:29:28,649
<font color="#E5E5E5">teams could score points they did that</font>

730
00:29:27,059 --> 00:29:30,330
with decree and as you can see it's only

731
00:29:28,649 --> 00:29:33,360
got six system calls no files threads or

732
00:29:30,330 --> 00:29:34,980
signals so now you know<font color="#E5E5E5"> it's difficult</font>

733
00:29:33,360 --> 00:29:37,080
to take tools that were developed for

734
00:29:34,980 --> 00:29:38,730
decree port them over to Linux where you

735
00:29:37,080 --> 00:29:41,059
have hundreds of system calls where you

736
00:29:38,730 --> 00:29:43,470
do<font color="#CCCCCC"> have files threads and signals and</font>

737
00:29:41,059 --> 00:29:45,330
that's an ongoing effort for<font color="#CCCCCC"> me as well</font>

738
00:29:43,470 --> 00:29:47,779
I have tools<font color="#E5E5E5"> that are still custom built</font>

739
00:29:45,330 --> 00:29:49,799
for decree that I'm trying<font color="#E5E5E5"> to rip out</font>

740
00:29:47,779 --> 00:29:52,440
and then there<font color="#E5E5E5"> was a lot of distractions</font>

741
00:29:49,799 --> 00:29:54,600
you know if we had two straight years to

742
00:29:52,440 --> 00:29:56,039
focus only on bug hunting<font color="#E5E5E5"> I may have</font>

743
00:29:54,600 --> 00:29:57,480
gotten farther on that one specific

744
00:29:56,039 --> 00:29:59,639
problem but<font color="#E5E5E5"> DARPA cared about more than</font>

745
00:29:57,480 --> 00:30:01,590
that<font color="#E5E5E5"> they cared about automated patching</font>

746
00:29:59,639 --> 00:30:03,299
they cared about exploit generation they

747
00:30:01,590 --> 00:30:04,740
cared about how these things fit into

748
00:30:03,299 --> 00:30:06,450
network appliances they care about

749
00:30:04,740 --> 00:30:12,570
deployment strategies that cared about

750
00:30:06,450 --> 00:30:16,860
IDs I don't that's that's<font color="#CCCCCC"> okay you know</font>

751
00:30:12,570 --> 00:30:19,289
for them it's<font color="#CCCCCC"> okay for</font><font color="#E5E5E5"> me but that was</font>

752
00:30:16,860 --> 00:30:23,610
that was somewhat frustrating for for me

753
00:30:19,289 --> 00:30:27,120
as a competitor in this challenge so to

754
00:30:23,610 --> 00:30:29,189
<font color="#E5E5E5">recap here cgc gave a much needed boost</font>

755
00:30:27,120 --> 00:30:31,799
to the field at exactly the right time

756
00:30:29,190 --> 00:30:33,840
as this was really heating up as people

757
00:30:31,799 --> 00:30:36,330
were starting to think<font color="#E5E5E5"> about sage and</font>

758
00:30:33,840 --> 00:30:37,620
what kind<font color="#E5E5E5"> of input impacts technologies</font>

759
00:30:36,330 --> 00:30:42,029
like that could have outside of

760
00:30:37,620 --> 00:30:44,489
Microsoft it is now damn it now obvious

761
00:30:42,029 --> 00:30:46,889
that automated bug finding is possible

762
00:30:44,490 --> 00:30:48,960
and very<font color="#CCCCCC"> effective we have prototypes</font>

763
00:30:46,889 --> 00:30:50,699
available you know you can<font color="#E5E5E5"> go on the</font>

764
00:30:48,960 --> 00:30:53,039
<font color="#E5E5E5">internet now and you can download entire</font>

765
00:30:50,700 --> 00:30:55,830
code bases that were funded by this

766
00:30:53,039 --> 00:30:57,419
challenge<font color="#E5E5E5"> and the challenge sets that</font>

767
00:30:55,830 --> 00:30:59,639
were<font color="#E5E5E5"> created for the</font><font color="#CCCCCC"> cybercrime</font>

768
00:30:57,419 --> 00:31:01,820
<font color="#CCCCCC">challenge enable me to measure my tools</font>

769
00:30:59,639 --> 00:31:04,559
against yours and we can have an honest

770
00:31:01,820 --> 00:31:09,220
objective conversation about the

771
00:31:04,559 --> 00:31:10,600
benefits of each so<font color="#E5E5E5"> okay now we get</font>

772
00:31:09,220 --> 00:31:12,070
to the predictive part of the<font color="#E5E5E5"> keynote</font>

773
00:31:10,600 --> 00:31:20,559
where do we go from here what's the next

774
00:31:12,070 --> 00:31:22,720
step so these kinds of tools are going

775
00:31:20,559 --> 00:31:24,220
mainstream I think about automated bug

776
00:31:22,720 --> 00:31:26,130
finding and smart fuzzing as<font color="#E5E5E5"> we're</font>

777
00:31:24,220 --> 00:31:28,809
machine learning was<font color="#E5E5E5"> ten years ago I</font>

778
00:31:26,130 --> 00:31:31,090
hope that 10 years from now<font color="#E5E5E5"> we are in</font>

779
00:31:28,809 --> 00:31:33,549
<font color="#E5E5E5">the same exciting space as they are</font>

780
00:31:31,090 --> 00:31:36,030
today machine learning 10 years ago

781
00:31:33,549 --> 00:31:39,730
didn't have a solid metric for comparing

782
00:31:36,030 --> 00:31:42,908
techniques against each other systems

783
00:31:39,730 --> 00:31:45,460
<font color="#E5E5E5">like se comp came out and enabled</font>

784
00:31:42,909 --> 00:31:47,950
ongoing competitions between different

785
00:31:45,460 --> 00:31:50,350
strategies for machine learning to help

786
00:31:47,950 --> 00:31:51,760
researchers make progress and once they

787
00:31:50,350 --> 00:31:53,860
kind<font color="#E5E5E5"> of settled on what worked and what</font>

788
00:31:51,760 --> 00:31:56,350
didn't it was then possible<font color="#E5E5E5"> to start</font>

789
00:31:53,860 --> 00:31:58,120
engineering solutions around a static

790
00:31:56,350 --> 00:32:01,658
target instead of a constantly moving

791
00:31:58,120 --> 00:32:03,158
one you've seen now that Microsoft and

792
00:32:01,659 --> 00:32:07,780
Google Microsoft finally actually<font color="#CCCCCC"> took</font>

793
00:32:03,159 --> 00:32:09,220
<font color="#E5E5E5">sage allocated a team around it in order</font>

794
00:32:07,780 --> 00:32:10,690
to bring<font color="#E5E5E5"> it to the public and I called a</font>

795
00:32:09,220 --> 00:32:11,950
project Springfield you can<font color="#E5E5E5"> actually</font>

796
00:32:10,690 --> 00:32:14,169
sign up for<font color="#E5E5E5"> their waiting list to gain</font>

797
00:32:11,950 --> 00:32:15,549
access to it only<font color="#E5E5E5"> works on Windows</font>

798
00:32:14,169 --> 00:32:18,700
software at the moment only<font color="#CCCCCC"> works on</font>

799
00:32:15,549 --> 00:32:20,679
binaries still fantastic<font color="#E5E5E5"> google has</font>

800
00:32:18,700 --> 00:32:22,510
another program OSS fuzz where they'll

801
00:32:20,679 --> 00:32:24,909
run lib buzzer in the cloud against your

802
00:32:22,510 --> 00:32:26,620
open source software so these are really

803
00:32:24,909 --> 00:32:29,590
<font color="#E5E5E5">going mainstream it's possible to take</font>

804
00:32:26,620 --> 00:32:33,360
<font color="#CCCCCC">advantage of highly automated hugely</font>

805
00:32:29,590 --> 00:32:35,799
scalable automated systems and find bugs

806
00:32:33,360 --> 00:32:40,090
my prediction is that<font color="#E5E5E5"> Apple may start</font>

807
00:32:35,799 --> 00:32:43,629
soon in the<font color="#E5E5E5"> CGC competition as our</font>

808
00:32:40,090 --> 00:32:44,830
internal state we used lov Mir we did

809
00:32:43,630 --> 00:32:47,140
that because the intermediate

810
00:32:44,830 --> 00:32:49,059
representation<font color="#CCCCCC"> the LLVM compiler is</font><font color="#E5E5E5"> made</font>

811
00:32:47,140 --> 00:32:51,789
to<font color="#E5E5E5"> be easy to</font><font color="#CCCCCC"> reason about it's</font><font color="#E5E5E5"> supposed</font>

812
00:32:49,059 --> 00:32:53,889
to be used<font color="#E5E5E5"> by a compiler to implement</font>

813
00:32:51,789 --> 00:32:56,559
various analyses for you know optimizing

814
00:32:53,890 --> 00:32:58,650
code so<font color="#E5E5E5"> it is a really</font><font color="#CCCCCC"> great target as</font>

815
00:32:56,559 --> 00:33:02,110
well for analyzing that code for bugs

816
00:32:58,650 --> 00:33:06,309
<font color="#E5E5E5">Apple has most of the LOV Mir or the</font>

817
00:33:02,110 --> 00:33:07,750
byte code or the bit code for all the

818
00:33:06,309 --> 00:33:10,539
iOS apps that it has in<font color="#E5E5E5"> the App Store</font>

819
00:33:07,750 --> 00:33:12,880
and it would be<font color="#E5E5E5"> trivially possible for</font>

820
00:33:10,539 --> 00:33:15,190
them to analyze that code to find<font color="#E5E5E5"> really</font>

821
00:33:12,880 --> 00:33:17,380
basic security flaws like<font color="#E5E5E5"> API misuse and</font>

822
00:33:15,190 --> 00:33:18,480
privacy issues<font color="#E5E5E5"> and there's no reason</font>

823
00:33:17,380 --> 00:33:20,559
they couldn't start doing this tomorrow

824
00:33:18,480 --> 00:33:21,820
they don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to roll out software</font>

825
00:33:20,559 --> 00:33:22,990
they keep it all on<font color="#E5E5E5"> the cloud because</font>

826
00:33:21,820 --> 00:33:25,809
you've given that bit code

827
00:33:22,990 --> 00:33:27,429
them so they<font color="#E5E5E5"> have a really good business</font>

828
00:33:25,809 --> 00:33:29,290
case for this and they have<font color="#CCCCCC"> all the all</font>

829
00:33:27,429 --> 00:33:31,510
the<font color="#CCCCCC"> llvm developers on staff you know</font>

830
00:33:29,290 --> 00:33:35,610
<font color="#E5E5E5">they employ chris lattner the original</font>

831
00:33:31,510 --> 00:33:38,559
author of lvm so I really think that

832
00:33:35,610 --> 00:33:40,209
will finally<font color="#E5E5E5"> see basically you know most</font>

833
00:33:38,559 --> 00:33:43,480
<font color="#E5E5E5">of the major technology companies using</font>

834
00:33:40,210 --> 00:33:44,890
this in<font color="#CCCCCC"> practice internally and then</font>

835
00:33:43,480 --> 00:33:50,410
potentially exporting some of that

836
00:33:44,890 --> 00:33:52,300
<font color="#E5E5E5">technology to the public</font><font color="#CCCCCC"> ah yeah so I</font>

837
00:33:50,410 --> 00:33:53,950
explained a little bit about this so we

838
00:33:52,300 --> 00:33:55,990
could automatically analyze apps for

839
00:33:53,950 --> 00:33:57,610
bugs backdoors an API misused there's no

840
00:33:55,990 --> 00:34:00,429
reason that you need to use humans or

841
00:33:57,610 --> 00:34:02,860
some kind of janky<font color="#E5E5E5"> Perl scripts to you</font>

842
00:34:00,429 --> 00:34:04,210
know assess all the applications that

843
00:34:02,860 --> 00:34:07,030
<font color="#CCCCCC">are coming in that</font><font color="#E5E5E5"> need to get approved</font>

844
00:34:04,210 --> 00:34:08,350
you could reduce the<font color="#E5E5E5"> time for apps to</font>

845
00:34:07,030 --> 00:34:11,949
get approved<font color="#E5E5E5"> and go into the App Store</font>

846
00:34:08,350 --> 00:34:13,929
from like one week to a couple<font color="#CCCCCC"> hours and</font>

847
00:34:11,949 --> 00:34:16,299
once Apple does it everyone<font color="#E5E5E5"> else</font>

848
00:34:13,929 --> 00:34:17,710
probably has to do it<font color="#CCCCCC"> too you know</font>

849
00:34:16,300 --> 00:34:19,419
<font color="#CCCCCC">google won't be able to rely on just</font>

850
00:34:17,710 --> 00:34:20,889
bouncer with a dynamically execute the

851
00:34:19,418 --> 00:34:22,750
program and observe the environment

852
00:34:20,889 --> 00:34:24,730
they'll likely integrate some kind of

853
00:34:22,750 --> 00:34:28,030
static analysis as<font color="#CCCCCC"> well and bug hunting</font>

854
00:34:24,730 --> 00:34:30,369
technologies that were funded by<font color="#CCCCCC"> cdc and</font>

855
00:34:28,030 --> 00:34:35,590
created and this giant explosion of

856
00:34:30,369 --> 00:34:39,159
interest in this field there are some

857
00:34:35,590 --> 00:34:42,030
roadblocks here so<font color="#CCCCCC"> I mentioned</font><font color="#E5E5E5"> that it's</font>

858
00:34:39,159 --> 00:34:46,960
really difficult to use<font color="#CCCCCC"> it's really</font>

859
00:34:42,030 --> 00:34:49,359
unused tools don't find bugs so analysis

860
00:34:46,960 --> 00:34:51,909
developers analysis tool developers must

861
00:34:49,359 --> 00:34:54,129
show software devs that tools can make

862
00:34:51,909 --> 00:34:55,300
their lives easier we really<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font>

863
00:34:54,129 --> 00:34:57,910
give more<font color="#E5E5E5"> thought about the user</font>

864
00:34:55,300 --> 00:34:59,859
<font color="#CCCCCC">experience behind these tools they are</font>

865
00:34:57,910 --> 00:35:03,368
not easier to use than get and get is

866
00:34:59,859 --> 00:35:05,680
hard enough we<font color="#E5E5E5"> actually at trailer bits</font>

867
00:35:03,369 --> 00:35:07,480
have tried to<font color="#E5E5E5"> offer services around</font>

868
00:35:05,680 --> 00:35:11,290
automated bug finding to our clients and

869
00:35:07,480 --> 00:35:12,880
there's a lack of trust among the most

870
00:35:11,290 --> 00:35:15,220
savvy clients out there in this

871
00:35:12,880 --> 00:35:17,859
technology we know<font color="#CCCCCC"> that it works</font><font color="#E5E5E5"> we know</font>

872
00:35:15,220 --> 00:35:19,868
the benefits that<font color="#CCCCCC"> it offers but the</font>

873
00:35:17,859 --> 00:35:22,330
field that came before us is so rife

874
00:35:19,869 --> 00:35:25,270
with examples of programs examples of

875
00:35:22,330 --> 00:35:27,009
tools that just produce millions of

876
00:35:25,270 --> 00:35:29,830
false positives and wasted so much time

877
00:35:27,010 --> 00:35:31,480
among our developers<font color="#CCCCCC"> that many even</font>

878
00:35:29,830 --> 00:35:34,060
<font color="#E5E5E5">security savvy companies are unwilling</font>

879
00:35:31,480 --> 00:35:36,010
to think about the<font color="#E5E5E5"> current generation of</font>

880
00:35:34,060 --> 00:35:39,400
tools

881
00:35:36,010 --> 00:35:41,720
so AFL shows us the path forward here

882
00:35:39,400 --> 00:35:44,420
really starting with a simple dumb tool

883
00:35:41,720 --> 00:35:47,899
and then slowly improving it over time

884
00:35:44,420 --> 00:35:49,760
is the strategy<font color="#E5E5E5"> that works and something</font>

885
00:35:47,900 --> 00:35:54,410
that<font color="#E5E5E5"> requires expert operation is</font><font color="#CCCCCC"> going</font>

886
00:35:49,760 --> 00:35:56,540
to die in its tracks this funding

887
00:35:54,410 --> 00:35:57,560
roadblocks as well if you're working<font color="#E5E5E5"> in</font>

888
00:35:56,540 --> 00:35:59,420
this field there's really only two

889
00:35:57,560 --> 00:36:01,730
places that you<font color="#CCCCCC"> can get</font><font color="#E5E5E5"> money from you</font>

890
00:35:59,420 --> 00:36:03,740
can get money from DARPA<font color="#E5E5E5"> and potentially</font>

891
00:36:01,730 --> 00:36:05,740
other military agencies that have an

892
00:36:03,740 --> 00:36:08,180
<font color="#CCCCCC">interest in</font><font color="#E5E5E5"> this most people consider</font>

893
00:36:05,740 --> 00:36:10,669
<font color="#CCCCCC">cybersecurity and vulnerable software to</font>

894
00:36:08,180 --> 00:36:13,160
be an issue of national<font color="#E5E5E5"> security you</font>

895
00:36:10,670 --> 00:36:15,589
know the US military purchases a huge

896
00:36:13,160 --> 00:36:18,200
vast amount<font color="#E5E5E5"> of code that's embedded into</font>

897
00:36:15,589 --> 00:36:20,450
all kinds of hardware<font color="#E5E5E5"> that they use</font>

898
00:36:18,200 --> 00:36:26,439
<font color="#E5E5E5">every</font><font color="#CCCCCC"> day there have</font><font color="#E5E5E5"> been programs at</font>

899
00:36:20,450 --> 00:36:28,759
DARPA that have studied<font color="#CCCCCC"> ECU's the</font>

900
00:36:26,440 --> 00:36:32,150
computers that<font color="#E5E5E5"> are inside of cars and</font>

901
00:36:28,760 --> 00:36:34,490
helicopters and the potential<font color="#CCCCCC"> for those</font>

902
00:36:32,150 --> 00:36:35,930
computers to be disrupted by somebody

903
00:36:34,490 --> 00:36:37,129
that they're at war with so that's

904
00:36:35,930 --> 00:36:39,669
really<font color="#E5E5E5"> kind of a national security</font>

905
00:36:37,130 --> 00:36:42,200
<font color="#E5E5E5">concern and they care immensely about</font>

906
00:36:39,670 --> 00:36:45,230
finding and routing routing out all of

907
00:36:42,200 --> 00:36:47,180
those bugs with automated means so

908
00:36:45,230 --> 00:36:49,040
they'll give you money for it large<font color="#E5E5E5"> R&D</font>

909
00:36:47,180 --> 00:36:50,359
shops might give you money for it you

910
00:36:49,040 --> 00:36:51,710
know<font color="#E5E5E5"> Google might give you money for it</font>

911
00:36:50,359 --> 00:36:52,730
Microsoft might give you money for it

912
00:36:51,710 --> 00:36:55,010
but they'll<font color="#CCCCCC"> probably keep it all</font>

913
00:36:52,730 --> 00:36:57,260
internal so what<font color="#E5E5E5"> are you to do if you're</font>

914
00:36:55,010 --> 00:36:59,869
<font color="#CCCCCC">a</font><font color="#E5E5E5"> company like mine or you're a company</font>

915
00:36:57,260 --> 00:37:01,670
<font color="#E5E5E5">that has similar ambitions to advance</font>

916
00:36:59,869 --> 00:37:04,400
the state of<font color="#E5E5E5"> the art</font><font color="#CCCCCC"> in smart fussing</font>

917
00:37:01,670 --> 00:37:06,859
and automated bug finding how do you get

918
00:37:04,400 --> 00:37:08,930
paid for<font color="#E5E5E5"> that if if customers are</font>

919
00:37:06,859 --> 00:37:10,160
untrustworthy of the technology and<font color="#CCCCCC"> the</font>

920
00:37:08,930 --> 00:37:12,680
only<font color="#E5E5E5"> two people you can get money from</font>

921
00:37:10,160 --> 00:37:14,589
of these two so we need to we need to

922
00:37:12,680 --> 00:37:17,060
shift<font color="#CCCCCC"> this there needs to be more</font>

923
00:37:14,589 --> 00:37:20,720
investment from private firms and from

924
00:37:17,060 --> 00:37:23,328
nonprofits especially to understand that

925
00:37:20,720 --> 00:37:26,480
security affects everyone somebody has

926
00:37:23,329 --> 00:37:30,200
<font color="#CCCCCC">to pay somebody needs to help us move</font>

927
00:37:26,480 --> 00:37:31,760
the ball forward so making<font color="#E5E5E5"> that business</font>

928
00:37:30,200 --> 00:37:35,419
case and finding a way to communicate it

929
00:37:31,760 --> 00:37:37,490
is really key to advancing the field and

930
00:37:35,420 --> 00:37:39,079
then there are research roadblocks and

931
00:37:37,490 --> 00:37:40,549
these are these<font color="#E5E5E5"> are quite simple these</font>

932
00:37:39,079 --> 00:37:42,980
are probably the simplest of the three

933
00:37:40,550 --> 00:37:44,750
<font color="#E5E5E5">that I</font><font color="#CCCCCC"> mentioned so we need a realistic</font>

934
00:37:42,980 --> 00:37:47,000
benchmark to show that the tools work

935
00:37:44,750 --> 00:37:49,280
and how they compare the DARPA challenge

936
00:37:47,000 --> 00:37:52,310
sets are already almost there

937
00:37:49,280 --> 00:37:54,860
and my<font color="#CCCCCC"> company has taken that on as kind</font>

938
00:37:52,310 --> 00:37:57,670
of a flag<font color="#CCCCCC"> that we'd like to plant</font>

939
00:37:54,860 --> 00:38:00,170
something that we'd like to assist<font color="#CCCCCC"> with</font>

940
00:37:57,670 --> 00:38:01,730
bugs are getting harder so we need to

941
00:38:00,170 --> 00:38:03,710
<font color="#E5E5E5">continue to improve our analysis</font>

942
00:38:01,730 --> 00:38:05,360
techniques you know none<font color="#CCCCCC"> of the tools</font>

943
00:38:03,710 --> 00:38:07,160
that we've described today can really

944
00:38:05,360 --> 00:38:09,470
find bugs and JavaScript engines or

945
00:38:07,160 --> 00:38:12,080
<font color="#E5E5E5">jetting shooting JavaScript engines</font>

946
00:38:09,470 --> 00:38:13,730
which is where we can consider one<font color="#CCCCCC"> of</font>

947
00:38:12,080 --> 00:38:16,069
<font color="#E5E5E5">the most risky pieces of software for</font>

948
00:38:13,730 --> 00:38:19,340
consumers today so we need to continue

949
00:38:16,070 --> 00:38:20,780
<font color="#E5E5E5">to advance those techniques to find bugs</font>

950
00:38:19,340 --> 00:38:23,060
but we can't lose sight of what those

951
00:38:20,780 --> 00:38:24,620
techniques are capable of today<font color="#E5E5E5"> even if</font>

952
00:38:23,060 --> 00:38:26,810
we can't find bugs in a jigging

953
00:38:24,620 --> 00:38:29,810
<font color="#CCCCCC">JavaScript engine we can</font><font color="#E5E5E5"> probably find</font>

954
00:38:26,810 --> 00:38:32,509
all of them in an image parser<font color="#CCCCCC"> and is it</font>

955
00:38:29,810 --> 00:38:34,670
<font color="#CCCCCC">worth it to root out every single bug</font>

956
00:38:32,510 --> 00:38:37,400
that's<font color="#E5E5E5"> available inside of lead PNG</font>

957
00:38:34,670 --> 00:38:42,320
probably yes and I<font color="#CCCCCC"> think</font><font color="#E5E5E5"> that's a great</font>

958
00:38:37,400 --> 00:38:44,930
result and<font color="#E5E5E5"> then a call to arms when we</font>

959
00:38:42,320 --> 00:38:46,730
build tools it is no<font color="#E5E5E5"> longer acceptable</font>

960
00:38:44,930 --> 00:38:50,210
to build tools that simply silo

961
00:38:46,730 --> 00:38:52,280
themselves that work in isolation it is

962
00:38:50,210 --> 00:38:54,140
hugely important that when we construct

963
00:38:52,280 --> 00:38:57,590
new analysis tools that are capable<font color="#E5E5E5"> of</font>

964
00:38:54,140 --> 00:38:59,450
communicating to each other it was a

965
00:38:57,590 --> 00:39:00,770
huge<font color="#E5E5E5"> problem for us to try and strap all</font>

966
00:38:59,450 --> 00:39:02,930
these things together into an integrated

967
00:39:00,770 --> 00:39:04,310
<font color="#CCCCCC">system and that was the</font><font color="#E5E5E5"> only way that we</font>

968
00:39:02,930 --> 00:39:07,069
could make progress on any of these

969
00:39:04,310 --> 00:39:09,830
solutions so if you're writing tools

970
00:39:07,070 --> 00:39:12,020
today ensure<font color="#CCCCCC"> that it has some kind of</font>

971
00:39:09,830 --> 00:39:14,569
documented output format and some kind

972
00:39:12,020 --> 00:39:17,090
of documented input format that enable

973
00:39:14,570 --> 00:39:25,430
other people to use that<font color="#E5E5E5"> tool inside of</font>

974
00:39:17,090 --> 00:39:28,970
a larger<font color="#CCCCCC"> system so some predictions I</font>

975
00:39:25,430 --> 00:39:32,200
think in two years we're likely going to

976
00:39:28,970 --> 00:39:36,669
have what what DARPA calls the center

977
00:39:32,200 --> 00:39:39,589
which is combines a human human horse

978
00:39:36,670 --> 00:39:42,050
yeah so computer-assisted program

979
00:39:39,590 --> 00:39:43,490
analysis so when<font color="#E5E5E5"> you're bug hunting bug</font>

980
00:39:42,050 --> 00:39:45,410
hunting is going<font color="#E5E5E5"> to start to change over</font>

981
00:39:43,490 --> 00:39:46,520
the next two<font color="#CCCCCC"> years right now</font><font color="#E5E5E5"> you know</font>

982
00:39:45,410 --> 00:39:49,670
you might open up your copy of

983
00:39:46,520 --> 00:39:51,770
understand or your Eclipse IDE or Visual

984
00:39:49,670 --> 00:39:55,760
Studio whatever it might be and you're

985
00:39:51,770 --> 00:39:58,880
using or<font color="#CCCCCC"> VNC tags or for the insane</font>

986
00:39:55,760 --> 00:40:00,950
among you Emacs and you might<font color="#CCCCCC"> be finding</font>

987
00:39:58,880 --> 00:40:03,210
bugs that way he might<font color="#E5E5E5"> be reading code</font>

988
00:40:00,950 --> 00:40:06,270
from top to bottom tracing

989
00:40:03,210 --> 00:40:07,560
<font color="#E5E5E5">but you know using</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> IDE to pivot</font>

990
00:40:06,270 --> 00:40:10,020
through the source code but it's still

991
00:40:07,560 --> 00:40:12,270
<font color="#CCCCCC">really a manual process based on your</font>

992
00:40:10,020 --> 00:40:13,710
<font color="#E5E5E5">own intuition I think the</font><font color="#CCCCCC"> next two years</font>

993
00:40:12,270 --> 00:40:15,630
we're going to start to see tools that

994
00:40:13,710 --> 00:40:18,480
augment that manual process with

995
00:40:15,630 --> 00:40:20,099
automated techniques and a lot<font color="#CCCCCC"> of those</font>

996
00:40:18,480 --> 00:40:21,720
automated techniques will be adapted

997
00:40:20,099 --> 00:40:24,150
from<font color="#CCCCCC"> the ones that I discussed in the</font>

998
00:40:21,720 --> 00:40:25,379
rest of this presentation I definitely

999
00:40:24,150 --> 00:40:27,420
think we're<font color="#E5E5E5"> going to start to see app</font>

1000
00:40:25,380 --> 00:40:29,700
stores take advantage of automated bug

1001
00:40:27,420 --> 00:40:32,760
finding techniques to help developers

1002
00:40:29,700 --> 00:40:35,819
submit secure applications to them it's

1003
00:40:32,760 --> 00:40:37,980
<font color="#E5E5E5">just it's it's too easy not to do the</font>

1004
00:40:35,820 --> 00:40:40,260
business<font color="#E5E5E5"> case is really there the talent</font>

1005
00:40:37,980 --> 00:40:43,500
is in the right place for<font color="#E5E5E5"> it already it</font>

1006
00:40:40,260 --> 00:40:45,720
<font color="#E5E5E5">has to happen and then these tools like</font>

1007
00:40:43,500 --> 00:40:48,690
<font color="#CCCCCC">Project Springfield and OSS fuzz will</font>

1008
00:40:45,720 --> 00:40:50,430
remain<font color="#E5E5E5"> around people will use them in</font>

1009
00:40:48,690 --> 00:40:52,530
larger and larger numbers it'll be slow

1010
00:40:50,430 --> 00:40:55,250
but over the next two years<font color="#E5E5E5"> you'll start</font>

1011
00:40:52,530 --> 00:40:58,170
to see the vast<font color="#CCCCCC"> majority of really</font>

1012
00:40:55,250 --> 00:41:00,349
popular open source programs start to

1013
00:40:58,170 --> 00:41:04,560
take advantage<font color="#E5E5E5"> of continuous ongoing</font>

1014
00:41:00,349 --> 00:41:07,140
automated bug finding in<font color="#CCCCCC"> the cloud five</font>

1015
00:41:04,560 --> 00:41:09,330
years down the road I<font color="#E5E5E5"> think we'll start</font>

1016
00:41:07,140 --> 00:41:11,009
to see cloud<font color="#E5E5E5"> IDs where people are</font>

1017
00:41:09,330 --> 00:41:15,240
writing code that automatically help you

1018
00:41:11,010 --> 00:41:17,580
create tests and automatically insert

1019
00:41:15,240 --> 00:41:19,799
your program into a giant automated bug

1020
00:41:17,580 --> 00:41:21,480
finding system that uses smart fuzzing

1021
00:41:19,800 --> 00:41:25,650
on a continuous basis it won't even be

1022
00:41:21,480 --> 00:41:27,330
something you think<font color="#CCCCCC"> about and hopefully</font>

1023
00:41:25,650 --> 00:41:28,950
developers at that point we'll have some

1024
00:41:27,330 --> 00:41:31,859
understanding that fuzzing is as useful

1025
00:41:28,950 --> 00:41:33,868
to them as unit testing is and then

1026
00:41:31,859 --> 00:41:35,400
finally<font color="#E5E5E5"> research tools need to</font>

1027
00:41:33,869 --> 00:41:37,820
standardize on conventions and

1028
00:41:35,400 --> 00:41:41,820
benchmarks and that will<font color="#E5E5E5"> start to see</font>

1029
00:41:37,820 --> 00:41:44,400
winning strategies emerge and consistent

1030
00:41:41,820 --> 00:41:48,290
focused competition around the

1031
00:41:44,400 --> 00:41:50,490
development of new techniques<font color="#CCCCCC"> so</font>

1032
00:41:48,290 --> 00:41:52,950
concluding this is you<font color="#E5E5E5"> can take</font>

1033
00:41:50,490 --> 00:41:54,419
advantage<font color="#E5E5E5"> of all</font><font color="#CCCCCC"> of this today if you're</font>

1034
00:41:52,950 --> 00:41:55,830
someone in the audience that's<font color="#E5E5E5"> writing</font>

1035
00:41:54,420 --> 00:41:57,210
code or someone in the audience that's

1036
00:41:55,830 --> 00:42:01,130
trying<font color="#E5E5E5"> to find bugs which I hope is</font>

1037
00:41:57,210 --> 00:42:03,480
everybody you can take advantage<font color="#E5E5E5"> of this</font>

1038
00:42:01,130 --> 00:42:06,330
you know<font color="#E5E5E5"> live buzzer I think is</font><font color="#CCCCCC"> really</font>

1039
00:42:03,480 --> 00:42:07,920
one of<font color="#E5E5E5"> the unsung heroes here AFL works</font>

1040
00:42:06,330 --> 00:42:11,490
great it's very easy<font color="#E5E5E5"> to use and it's got</font>

1041
00:42:07,920 --> 00:42:14,160
that really<font color="#CCCCCC"> nice like ascii ascii art</font>

1042
00:42:11,490 --> 00:42:16,348
status window but<font color="#CCCCCC"> lube buzzer is really</font>

1043
00:42:14,160 --> 00:42:16,828
a workhorse that<font color="#E5E5E5"> doesn't get enough</font>

1044
00:42:16,349 --> 00:42:18,959
credit

1045
00:42:16,829 --> 00:42:20,759
for most developers<font color="#E5E5E5"> lube buzzer is</font>

1046
00:42:18,959 --> 00:42:21,989
actually the right decision there's a

1047
00:42:20,759 --> 00:42:23,940
couple<font color="#E5E5E5"> of guides for how to implement</font>

1048
00:42:21,989 --> 00:42:26,459
that your own code base and I'd strongly

1049
00:42:23,940 --> 00:42:28,529
recommend checking it out<font color="#E5E5E5"> trailer bits</font>

1050
00:42:26,459 --> 00:42:30,118
my company<font color="#CCCCCC"> has released many tools that</font>

1051
00:42:28,529 --> 00:42:32,640
we use during<font color="#CCCCCC"> the cyber grand challenge</font>

1052
00:42:30,119 --> 00:42:34,289
including the CB multi-os that's

1053
00:42:32,640 --> 00:42:38,308
challenge binaries multiple operating

1054
00:42:34,289 --> 00:42:40,319
systems<font color="#CCCCCC"> ger is our buzzer that</font><font color="#E5E5E5"> wraps</font>

1055
00:42:38,309 --> 00:42:43,049
redeems ax and a dynamic binary tracing

1056
00:42:40,319 --> 00:42:44,640
engine mix emma is what allowed us to

1057
00:42:43,049 --> 00:42:46,799
operate on binaries we could take

1058
00:42:44,640 --> 00:42:49,589
binaries lift them back to lv<font color="#CCCCCC"> Mir and</font>

1059
00:42:46,799 --> 00:42:52,799
then use all the<font color="#CCCCCC"> llvm based tools on</font>

1060
00:42:49,589 --> 00:42:54,779
<font color="#CCCCCC">that code and then darpa themselves have</font>

1061
00:42:52,799 --> 00:42:56,339
released a vast<font color="#E5E5E5"> amount of code</font><font color="#CCCCCC"> that they</font>

1062
00:42:54,779 --> 00:42:58,650
use to run the challenge including the

1063
00:42:56,339 --> 00:43:01,859
decree operating system which might be

1064
00:42:58,650 --> 00:43:03,509
<font color="#E5E5E5">fun to use so really in some here smart</font>

1065
00:43:01,859 --> 00:43:05,339
fuzzing is one of the most exciting<font color="#CCCCCC"> and</font>

1066
00:43:03,509 --> 00:43:07,440
rapidly advancing fields and security<font color="#E5E5E5"> I</font>

1067
00:43:05,339 --> 00:43:09,180
hope that some<font color="#CCCCCC"> of the things that I</font>

1068
00:43:07,440 --> 00:43:14,039
talked about convince all of you to take

1069
00:43:09,180 --> 00:43:15,450
<font color="#E5E5E5">a second look at it and I just like to</font>

1070
00:43:14,039 --> 00:43:18,029
thank a couple people from my team to

1071
00:43:15,450 --> 00:43:19,759
before I stop and take questions<font color="#CCCCCC"> Artem</font>

1072
00:43:18,029 --> 00:43:23,099
<font color="#CCCCCC">Dina Berg for really helping me a lot</font>

1073
00:43:19,759 --> 00:43:27,299
put<font color="#E5E5E5"> together all these slides Peter</font>

1074
00:43:23,099 --> 00:43:28,819
Goodman for writing ger<font color="#CCCCCC"> and for working</font>

1075
00:43:27,299 --> 00:43:31,170
on our cyber grand challenge team and

1076
00:43:28,819 --> 00:43:34,170
Ryan<font color="#CCCCCC"> Stewart's for really leading the</font>

1077
00:43:31,170 --> 00:43:37,769
<font color="#E5E5E5">way at continuing to develop and</font>

1078
00:43:34,170 --> 00:43:41,290
maintain the challenge binaries so

1079
00:43:37,769 --> 00:43:49,209
that's it thank you<font color="#CCCCCC"> guys for having me</font>

1080
00:43:41,290 --> 00:43:57,100
<font color="#E5E5E5">I see</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> have a few minutes for questions</font>

1081
00:43:49,210 --> 00:43:59,380
if anybody would like to ask any there

1082
00:43:57,100 --> 00:44:00,759
are<font color="#E5E5E5"> 25 engineers on my team we're</font>

1083
00:43:59,380 --> 00:44:03,190
globally distributed were based in<font color="#E5E5E5"> New</font>

1084
00:44:00,760 --> 00:44:06,580
York 12<font color="#E5E5E5"> of us are in New York and the</font>

1085
00:44:03,190 --> 00:44:08,340
other half are all over<font color="#E5E5E5"> the world most</font>

1086
00:44:06,580 --> 00:44:13,029
are in<font color="#E5E5E5"> the US but I do have people in</font>

1087
00:44:08,340 --> 00:44:15,790
Canada France and Argentina I do

1088
00:44:13,030 --> 00:44:18,160
internships I absolutely<font color="#CCCCCC"> do them I do</font>

1089
00:44:15,790 --> 00:44:19,570
them year round so the<font color="#E5E5E5"> way</font><font color="#CCCCCC"> that we</font>

1090
00:44:18,160 --> 00:44:21,520
recruit for internships is we actually

1091
00:44:19,570 --> 00:44:24,880
come<font color="#CCCCCC"> up with the problems first and then</font>

1092
00:44:21,520 --> 00:44:27,070
we can help us solve them so we have

1093
00:44:24,880 --> 00:44:31,600
several things that<font color="#E5E5E5"> we'd like to make</font>

1094
00:44:27,070 --> 00:44:33,310
advances on for instance we want to some

1095
00:44:31,600 --> 00:44:35,470
of those subtle problems that I wanted

1096
00:44:33,310 --> 00:44:39,580
<font color="#E5E5E5">to attack our problems that we're</font>

1097
00:44:35,470 --> 00:44:41,410
considering instead<font color="#E5E5E5"> of we're looking at</font>

1098
00:44:39,580 --> 00:44:43,480
advancements<font color="#E5E5E5"> AFL for instance</font>

1099
00:44:41,410 --> 00:44:46,779
<font color="#CCCCCC">proof-of-concept</font><font color="#E5E5E5"> thing kind of various</font>

1100
00:44:43,480 --> 00:44:47,920
analysis advancements inside of AFL we

1101
00:44:46,780 --> 00:44:50,320
want to continue<font color="#E5E5E5"> to develop</font><font color="#CCCCCC"> the</font>

1102
00:44:47,920 --> 00:44:53,380
challenge binaries maybe I don't<font color="#CCCCCC"> know</font>

1103
00:44:50,320 --> 00:44:54,610
what's calling that but continue

1104
00:44:53,380 --> 00:44:56,770
developing the challenge binaries and

1105
00:44:54,610 --> 00:44:58,930
make them more useful for measuring more

1106
00:44:56,770 --> 00:45:02,050
tools against each other we actually

1107
00:44:58,930 --> 00:45:03,879
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to run tools on them so for</font>

1108
00:45:02,050 --> 00:45:06,040
instance actually at this very moment

1109
00:45:03,880 --> 00:45:08,500
not at this very moment about three

1110
00:45:06,040 --> 00:45:10,210
hours<font color="#E5E5E5"> from now a colleague of mine is in</font>

1111
00:45:08,500 --> 00:45:11,830
New York presenting on using the

1112
00:45:10,210 --> 00:45:13,630
challenge binaries to measure various

1113
00:45:11,830 --> 00:45:15,730
configurations of AFL against each other

1114
00:45:13,630 --> 00:45:17,710
AFL does have some different

1115
00:45:15,730 --> 00:45:19,000
<font color="#E5E5E5">configuration switches and there are</font>

1116
00:45:17,710 --> 00:45:23,050
different<font color="#CCCCCC"> forks of it that have</font>

1117
00:45:19,000 --> 00:45:25,450
<font color="#CCCCCC">different versions like AFL fast there's</font>

1118
00:45:23,050 --> 00:45:27,730
an AFL for windows there's no mainstream

1119
00:45:25,450 --> 00:45:29,230
AFL and<font color="#CCCCCC"> those configurations among them</font>

1120
00:45:27,730 --> 00:45:31,390
well if you're trying to<font color="#E5E5E5"> find bugs</font>

1121
00:45:29,230 --> 00:45:33,820
what's the right option so we took the

1122
00:45:31,390 --> 00:45:35,589
challenge binaries and ran AFL across

1123
00:45:33,820 --> 00:45:37,600
them all of various configurations<font color="#CCCCCC"> to</font>

1124
00:45:35,590 --> 00:45:39,900
see when they found bugs how much

1125
00:45:37,600 --> 00:45:42,549
processing power we needed to find<font color="#CCCCCC"> bugs</font>

1126
00:45:39,900 --> 00:45:43,870
to see you know if there were

1127
00:45:42,550 --> 00:45:45,910
differences in the bugs that were found

1128
00:45:43,870 --> 00:45:47,770
like if one configuration again like

1129
00:45:45,910 --> 00:45:50,129
found all the type confusion and one

1130
00:45:47,770 --> 00:45:52,570
bugs found CW ease of a different type

1131
00:45:50,130 --> 00:45:54,490
so I'd like interns to work on<font color="#E5E5E5"> that as</font>

1132
00:45:52,570 --> 00:45:56,830
well

1133
00:45:54,490 --> 00:45:58,629
it's a pretty wide set we do them in the

1134
00:45:56,830 --> 00:45:59,799
winter we do them in the spring of the

1135
00:45:58,630 --> 00:46:03,280
fall in the summer we do them year-round

1136
00:45:59,800 --> 00:46:06,100
and people work remote and we have a

1137
00:46:03,280 --> 00:46:08,470
slack and like everybody just mobs<font color="#CCCCCC"> on</font>

1138
00:46:06,100 --> 00:46:11,319
problems it's fun yeah sorry for the

1139
00:46:08,470 --> 00:46:15,368
pitch didn't mean to do that but you put

1140
00:46:11,320 --> 00:46:16,810
me<font color="#E5E5E5"> on the spot there's a blog post about</font>

1141
00:46:15,369 --> 00:46:19,830
that<font color="#E5E5E5"> actually if you scroll back about</font>

1142
00:46:16,810 --> 00:46:25,270
three blog<font color="#CCCCCC"> posts in our on our blog</font>

1143
00:46:19,830 --> 00:46:27,340
anybody else<font color="#E5E5E5"> okay well I'll be around</font>

1144
00:46:25,270 --> 00:46:28,900
all day you guys can follow me on

1145
00:46:27,340 --> 00:46:31,750
<font color="#CCCCCC">Twitter and harass me there if you feel</font>

1146
00:46:28,900 --> 00:46:35,080
like it I'm told<font color="#E5E5E5"> it must be</font><font color="#CCCCCC"> if I step</font>

1147
00:46:31,750 --> 00:46:36,850
like this way but if you want<font color="#E5E5E5"> to keep up</font>

1148
00:46:35,080 --> 00:46:39,369
to<font color="#CCCCCC"> date on this stuff you know my</font>

1149
00:46:36,850 --> 00:46:41,640
company cares about it deeply and we try

1150
00:46:39,369 --> 00:46:45,640
to spread the knowledge that we have

1151
00:46:41,640 --> 00:46:47,560
through blog posts<font color="#E5E5E5"> and tweets so if you</font>

1152
00:46:45,640 --> 00:46:48,970
really<font color="#E5E5E5"> want to keep up on it just keep</font>

1153
00:46:47,560 --> 00:46:52,650
up with what we're<font color="#CCCCCC"> doing and I'm sure</font>

1154
00:46:48,970 --> 00:46:52,649
you'll follow along thanks everyone

