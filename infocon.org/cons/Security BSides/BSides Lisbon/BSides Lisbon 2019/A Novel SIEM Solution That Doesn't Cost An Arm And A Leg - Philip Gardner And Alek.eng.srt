1
00:00:05,520 --> 00:00:08,320
yeah hi my name's Phil right now I'm

2
00:00:08,320 --> 00:00:10,179
here from a cloud player from the

3
00:00:10,179 --> 00:00:12,579
awesome Texas office thanks for having

4
00:00:12,579 --> 00:00:14,280
us we're here to kind of talk about a

5
00:00:14,280 --> 00:00:16,119
project that we've been working on here

6
00:00:16,119 --> 00:00:19,840
for the last six to eight months

7
00:00:19,840 --> 00:00:22,029
they said presentation wasn't this gonna

8
00:00:22,029 --> 00:00:24,189
be by two of our colleagues Chan and

9
00:00:24,189 --> 00:00:27,039
autumn they couldn't make it but yeah

10
00:00:27,039 --> 00:00:29,080
I've been at cloud for about 12 months

11
00:00:29,080 --> 00:00:32,729
and what turned over to out right now

12
00:00:33,000 --> 00:00:35,440
hello my name is Alec from security

13
00:00:35,440 --> 00:00:37,690
engineering manager at cloud flare until

14
00:00:37,690 --> 00:00:39,219
recently I was based out of the Austin

15
00:00:39,219 --> 00:00:41,680
Texas office and in August I actually

16
00:00:41,680 --> 00:00:44,890
just moved out here to Lisbon which is

17
00:00:44,890 --> 00:00:47,170
pretty exciting who were really excited

18
00:00:47,170 --> 00:00:49,149
about the office here as a whole and and

19
00:00:49,149 --> 00:00:50,440
getting to be some of the first people

20
00:00:50,440 --> 00:00:53,649
around is pretty neat and the fact that

21
00:00:53,649 --> 00:00:56,379
'besides aligned with it also is super

22
00:00:56,379 --> 00:00:58,269
rad I'm a big fan of b-sides I've been

23
00:00:58,269 --> 00:01:00,160
lucky enough to be at six of them so far

24
00:01:00,160 --> 00:01:03,879
in different cities and we'll just go

25
00:01:03,879 --> 00:01:05,530
ahead and kind of dive right in before

26
00:01:05,530 --> 00:01:07,000
we get started though there's one kind

27
00:01:07,000 --> 00:01:09,070
of like a quick slide about what

28
00:01:09,070 --> 00:01:10,689
CloudFlare is and it's kind of important

29
00:01:10,689 --> 00:01:13,330
to realize what what we're doing in

30
00:01:13,330 --> 00:01:16,090
order to kind of understand a lot of the

31
00:01:16,090 --> 00:01:18,549
decisions that we made to build a lot of

32
00:01:18,549 --> 00:01:19,840
these things internally instead of

33
00:01:19,840 --> 00:01:24,130
buying them and so cloud ler at its core

34
00:01:24,130 --> 00:01:27,820
is pretty large we have a hundred and

35
00:01:27,820 --> 00:01:29,259
ninety four points of presence around

36
00:01:29,259 --> 00:01:33,310
the world serving a hundred billion or

37
00:01:33,310 --> 00:01:36,880
more unique IP addresses daily and and

38
00:01:36,880 --> 00:01:38,799
at its core we've got 20 million

39
00:01:38,799 --> 00:01:41,680
internet properties behind our our core

40
00:01:41,680 --> 00:01:44,180
offering and so

41
00:01:44,180 --> 00:01:46,190
from a security standpoint that's like

42
00:01:46,190 --> 00:01:47,690
it's a really interesting place to be

43
00:01:47,690 --> 00:01:49,580
because we've got a lot of crazy things

44
00:01:49,580 --> 00:01:50,540
going on

45
00:01:50,540 --> 00:01:53,810
we offer security products as a company

46
00:01:53,810 --> 00:01:57,890
and and so that means that its core

47
00:01:57,890 --> 00:02:00,590
we've got a lot of logs a ton of logs

48
00:02:00,590 --> 00:02:02,750
and this is including like production

49
00:02:02,750 --> 00:02:04,250
logs we've got some examples over there

50
00:02:04,250 --> 00:02:07,460
as well as you know some some internal

51
00:02:07,460 --> 00:02:08,720
logs things that you just kind of need

52
00:02:08,720 --> 00:02:10,729
to run a business and a security team as

53
00:02:10,729 --> 00:02:12,890
a whole is going to be interested in

54
00:02:12,890 --> 00:02:14,960
both of these you have to be able to put

55
00:02:14,960 --> 00:02:16,420
all of these things together and

56
00:02:16,420 --> 00:02:18,980
correlate all the stuff that's going on

57
00:02:18,980 --> 00:02:20,540
in order to pick out what's actually

58
00:02:20,540 --> 00:02:22,959
going on that's not normal things that

59
00:02:22,959 --> 00:02:25,700
stick out and should be investigated by

60
00:02:25,700 --> 00:02:31,340
a security practitioner and so when you

61
00:02:31,340 --> 00:02:33,020
have all this data this was a big

62
00:02:33,020 --> 00:02:34,940
question right like where do you put all

63
00:02:34,940 --> 00:02:38,209
of these logs there's a pretty

64
00:02:38,209 --> 00:02:41,209
traditional answer here I think anybody

65
00:02:41,209 --> 00:02:42,890
who's been on an incident response team

66
00:02:42,890 --> 00:02:45,160
would say well you put them in the scene

67
00:02:45,160 --> 00:02:47,840
it's just what you do it that's how

68
00:02:47,840 --> 00:02:50,150
we've always done it and it works right

69
00:02:50,150 --> 00:02:51,650
you get data you can look at the data

70
00:02:51,650 --> 00:02:54,620
you can alert on that data and you can

71
00:02:54,620 --> 00:02:56,300
catch bad things and when bad things

72
00:02:56,300 --> 00:02:59,870
happen it's easy to kind of trace what

73
00:02:59,870 --> 00:03:01,160
happened because all of your logs are

74
00:03:01,160 --> 00:03:05,830
there but we've got a lot a lot of logs

75
00:03:05,830 --> 00:03:10,670
and and we're like okay why why are we

76
00:03:10,670 --> 00:03:12,790
putting the data there it's like hold up

77
00:03:12,790 --> 00:03:15,739
is this the right answer just because

78
00:03:15,739 --> 00:03:17,000
we've always done it that way doesn't

79
00:03:17,000 --> 00:03:20,420
mean it is and in particular we were

80
00:03:20,420 --> 00:03:23,390
thinking while rolling out OS query OS

81
00:03:23,390 --> 00:03:25,400
query gives you some pretty interesting

82
00:03:25,400 --> 00:03:27,500
locks there are a lot of differential

83
00:03:27,500 --> 00:03:29,030
logs and so you're not just getting

84
00:03:29,030 --> 00:03:31,489
snapshots of what's happening all the

85
00:03:31,489 --> 00:03:33,110
time like you have to be able to compare

86
00:03:33,110 --> 00:03:35,299
previous logs from a from a known good

87
00:03:35,299 --> 00:03:37,940
state at one point in time in the past -

88
00:03:37,940 --> 00:03:39,470
what's going on currently in order to

89
00:03:39,470 --> 00:03:40,820
get a whole picture of what's happening

90
00:03:40,820 --> 00:03:43,010
and that's just not easy with a lot of

91
00:03:43,010 --> 00:03:46,340
traditional log infrastructure beyond

92
00:03:46,340 --> 00:03:48,950
that there's a lot of like hidden costs

93
00:03:48,950 --> 00:03:50,510
associated with these things you have to

94
00:03:50,510 --> 00:03:52,340
maintain the the things that are hosting

95
00:03:52,340 --> 00:03:54,410
your logging infrastructure and I don't

96
00:03:54,410 --> 00:03:56,370
know a single security professional

97
00:03:56,370 --> 00:03:57,930
who actually wants to get to work

98
00:03:57,930 --> 00:04:00,540
everyday and and like update the

99
00:04:00,540 --> 00:04:02,730
operating system on a machine and make

100
00:04:02,730 --> 00:04:03,989
sure that it's safe like nobody-nobody

101
00:04:03,989 --> 00:04:05,700
super interested in that if they're

102
00:04:05,700 --> 00:04:07,650
trying to dig into to incident or

103
00:04:07,650 --> 00:04:10,170
sponsor or a lot of other niche areas of

104
00:04:10,170 --> 00:04:13,319
security and so we took a step back and

105
00:04:13,319 --> 00:04:15,599
really just thought about what what were

106
00:04:15,599 --> 00:04:17,940
we trying to do with all this and so on

107
00:04:17,940 --> 00:04:20,310
the left here you can see we've got like

108
00:04:20,310 --> 00:04:21,779
all of our log sources and there's a ton

109
00:04:21,779 --> 00:04:23,699
of them and we kind of narrow that down

110
00:04:23,699 --> 00:04:25,020
we're not you know we picked out the

111
00:04:25,020 --> 00:04:26,580
important logs and we put those into a

112
00:04:26,580 --> 00:04:29,040
place we ingest them we're going to

113
00:04:29,040 --> 00:04:31,440
enrich those logs and and kind of

114
00:04:31,440 --> 00:04:33,150
correlate things and make it a little

115
00:04:33,150 --> 00:04:35,210
bit more human readable and useful and

116
00:04:35,210 --> 00:04:37,680
then once it's been a written rich we

117
00:04:37,680 --> 00:04:39,120
can do all sorts of different different

118
00:04:39,120 --> 00:04:42,000
types of alerting right and then from

119
00:04:42,000 --> 00:04:43,590
there some of those alerts are

120
00:04:43,590 --> 00:04:44,880
determined to be false positives and

121
00:04:44,880 --> 00:04:46,530
some are not and we figure out what we

122
00:04:46,530 --> 00:04:47,639
want to do it if some of these things

123
00:04:47,639 --> 00:04:49,410
can be automated away to where a person

124
00:04:49,410 --> 00:04:51,030
never has to look at the response we

125
00:04:51,030 --> 00:04:53,460
just have tooling that does it sometimes

126
00:04:53,460 --> 00:04:55,139
we need to send a notification to an

127
00:04:55,139 --> 00:04:57,300
analyst to look to see if it's actually

128
00:04:57,300 --> 00:04:59,180
something that needs to be worked on and

129
00:04:59,180 --> 00:05:03,090
sometimes it just needs to go into -

130
00:05:03,090 --> 00:05:04,880
some things that we can look at it later

131
00:05:04,880 --> 00:05:09,060
and and so we took that diagram and

132
00:05:09,060 --> 00:05:10,169
wrote down like a list of real

133
00:05:10,169 --> 00:05:11,789
requirements what what is that we need

134
00:05:11,789 --> 00:05:13,500
to be able to have in order to

135
00:05:13,500 --> 00:05:16,169
accomplish those goals and we came up

136
00:05:16,169 --> 00:05:18,240
with a list of things that are that are

137
00:05:18,240 --> 00:05:20,010
pretty hard requirements without these

138
00:05:20,010 --> 00:05:23,910
we wouldn't be able to do our job but

139
00:05:23,910 --> 00:05:25,139
then we ask this one other question like

140
00:05:25,139 --> 00:05:28,050
do we really need servers right do we

141
00:05:28,050 --> 00:05:29,460
need to have something like a

142
00:05:29,460 --> 00:05:32,460
traditional computer in place in order

143
00:05:32,460 --> 00:05:34,979
to do all this work because if you look

144
00:05:34,979 --> 00:05:36,330
at a lot of the traditional answers to

145
00:05:36,330 --> 00:05:37,620
this like the answer is yes you have to

146
00:05:37,620 --> 00:05:41,389
run a computer in order to do this but

147
00:05:41,389 --> 00:05:44,160
it's it's really it's just such a pain

148
00:05:44,160 --> 00:05:45,599
and if we get rid of it it make things

149
00:05:45,599 --> 00:05:47,849
like really cool and it seems like a

150
00:05:47,849 --> 00:05:50,280
neat idea and I'm a fan of neat ideas

151
00:05:50,280 --> 00:05:51,900
personally so we added that one to the

152
00:05:51,900 --> 00:05:52,830
list there and it's the only one in a

153
00:05:52,830 --> 00:05:54,479
different color because the rest of

154
00:05:54,479 --> 00:05:56,820
these we can we can kind of solve with a

155
00:05:56,820 --> 00:05:58,470
traditional answer to this log

156
00:05:58,470 --> 00:06:00,389
aggregation and incident response

157
00:06:00,389 --> 00:06:03,020
problem but

158
00:06:03,020 --> 00:06:05,180
if we can add that in there then like

159
00:06:05,180 --> 00:06:06,650
we're removing a lot of overhead we're

160
00:06:06,650 --> 00:06:08,780
doing something a little bit neater and

161
00:06:08,780 --> 00:06:11,410
and so like this is this kind of madness

162
00:06:11,410 --> 00:06:14,180
in some senses but but it's also a lot

163
00:06:14,180 --> 00:06:18,020
of fun and so we we hopped on a GCP

164
00:06:18,020 --> 00:06:19,250
you're kind of like kids in a candy

165
00:06:19,250 --> 00:06:20,870
store to start off with we're just

166
00:06:20,870 --> 00:06:22,250
looking around at all these neat things

167
00:06:22,250 --> 00:06:24,740
that exist that don't require the the

168
00:06:24,740 --> 00:06:27,310
maintenance of an underlying machine and

169
00:06:27,310 --> 00:06:32,360
and drew out this this crazy chart there

170
00:06:32,360 --> 00:06:33,590
is not a lot of rhyme or reason that

171
00:06:33,590 --> 00:06:35,690
went in this it grew over time but you

172
00:06:35,690 --> 00:06:36,979
can see there's there's a few things

173
00:06:36,979 --> 00:06:39,500
that are really important concepts at

174
00:06:39,500 --> 00:06:42,020
the core of all this you'll see some of

175
00:06:42,020 --> 00:06:43,490
these boxes are a little bit bigger than

176
00:06:43,490 --> 00:06:45,380
others like the detection response team

177
00:06:45,380 --> 00:06:48,620
down at the bottom stack driver which is

178
00:06:48,620 --> 00:06:50,960
basically a log visualization and

179
00:06:50,960 --> 00:06:54,139
searching platform and and then the real

180
00:06:54,139 --> 00:06:56,660
the real like core to changing the

181
00:06:56,660 --> 00:06:58,699
actual methodology of approaching

182
00:06:58,699 --> 00:07:00,650
incident response and detection response

183
00:07:00,650 --> 00:07:04,310
is a message message bus pub/sub inside

184
00:07:04,310 --> 00:07:06,770
of GCP a few other things are pretty

185
00:07:06,770 --> 00:07:09,110
important as well like a sequel database

186
00:07:09,110 --> 00:07:11,960
to do correlation batching over time and

187
00:07:11,960 --> 00:07:14,210
and reticent key store management and

188
00:07:14,210 --> 00:07:15,409
source control and a lot of other

189
00:07:15,409 --> 00:07:19,729
tidbits but with that diagram it's kind

190
00:07:19,729 --> 00:07:20,780
of its kind of like this right how to

191
00:07:20,780 --> 00:07:23,240
draw an out we the diagram is basically

192
00:07:23,240 --> 00:07:24,949
those two circles and there's a lot of

193
00:07:24,949 --> 00:07:26,449
work that goes into actually building

194
00:07:26,449 --> 00:07:30,710
all that it's so so really looking at

195
00:07:30,710 --> 00:07:32,750
this it might seem a little crazy but

196
00:07:32,750 --> 00:07:35,630
it's not it doesn't look unwieldy until

197
00:07:35,630 --> 00:07:39,800
you pick like one of these pipelines and

198
00:07:39,800 --> 00:07:41,360
so this is that one pipeline right there

199
00:07:41,360 --> 00:07:44,509
is it gets a lot more complicated when

200
00:07:44,509 --> 00:07:46,220
you actually start to integrate it and

201
00:07:46,220 --> 00:07:48,139
build it out and turn it from a line on

202
00:07:48,139 --> 00:07:51,610
a diagram into actual like working toad

203
00:07:51,610 --> 00:07:56,389
and so we took another step back after

204
00:07:56,389 --> 00:07:58,820
we explored these these kind of service

205
00:07:58,820 --> 00:08:01,610
options a little bit and and really

206
00:08:01,610 --> 00:08:02,750
looking at this you can kind of tell

207
00:08:02,750 --> 00:08:04,070
it's like it's a big data fluoride

208
00:08:04,070 --> 00:08:05,930
funnel taking a lot of things and

209
00:08:05,930 --> 00:08:07,280
turning it into only the things you care

210
00:08:07,280 --> 00:08:10,240
about and and so

211
00:08:10,240 --> 00:08:12,710
after revisiting a little bit we ended

212
00:08:12,710 --> 00:08:14,510
up with this and and what this really

213
00:08:14,510 --> 00:08:16,400
kind of represents you can see on the

214
00:08:16,400 --> 00:08:18,410
left it's a lot more similar to that

215
00:08:18,410 --> 00:08:21,110
previous diagram where we've got a bunch

216
00:08:21,110 --> 00:08:23,300
of log sources on the left that are all

217
00:08:23,300 --> 00:08:25,460
being ingested in with various functions

218
00:08:25,460 --> 00:08:28,970
and then pushed into pub subtopics in

219
00:08:28,970 --> 00:08:32,450
the middle they're getting enriched and

220
00:08:32,450 --> 00:08:34,549
then we've got a nice little bit of

221
00:08:34,549 --> 00:08:35,840
alerting down at the bottom and then

222
00:08:35,840 --> 00:08:38,360
we've got a bunch of notifications on

223
00:08:38,360 --> 00:08:41,210
the end and so there's a lot to kind of

224
00:08:41,210 --> 00:08:43,370
digest with this diagram and I quickly

225
00:08:43,370 --> 00:08:45,370
went over things kind of intentionally

226
00:08:45,370 --> 00:08:47,450
because I'm gonna turn it over to Phil

227
00:08:47,450 --> 00:08:50,390
to really pick one of these these flows

228
00:08:50,390 --> 00:08:52,250
starting with one log source and going

229
00:08:52,250 --> 00:08:55,070
from the actual source of a log all the

230
00:08:55,070 --> 00:08:57,320
way until we get to a notification to

231
00:08:57,320 --> 00:09:03,470
the detection response team thanks yeah

232
00:09:03,470 --> 00:09:04,880
so basically we're gonna pick like one

233
00:09:04,880 --> 00:09:06,860
of these log types that we have and kind

234
00:09:06,860 --> 00:09:08,270
of work through how it might go for the

235
00:09:08,270 --> 00:09:11,270
pipeline here but just because there's

236
00:09:11,270 --> 00:09:12,140
like a lot of like various

237
00:09:12,140 --> 00:09:13,670
implementation details that are really

238
00:09:13,670 --> 00:09:17,480
that important so for instance this is

239
00:09:17,480 --> 00:09:20,870
basically what a event flow from one of

240
00:09:20,870 --> 00:09:22,700
our core light sensors looks like if

241
00:09:22,700 --> 00:09:24,710
you're not familiar with it correlate is

242
00:09:24,710 --> 00:09:28,160
the commercial version of Zeke which was

243
00:09:28,160 --> 00:09:31,580
formerly known as bro from Calicut is

244
00:09:31,580 --> 00:09:33,590
the first sort of third of this diagram

245
00:09:33,590 --> 00:09:35,900
is like how do we get events that are

246
00:09:35,900 --> 00:09:40,000
streaming from correlate sensors into

247
00:09:40,000 --> 00:09:43,640
TCP in general and kind of a better

248
00:09:43,640 --> 00:09:46,070
question is how do we do this through

249
00:09:46,070 --> 00:09:48,830
for a very large variety of log sources

250
00:09:48,830 --> 00:09:50,570
we kinda have to support lots of

251
00:09:50,570 --> 00:09:52,490
different ways to ingest data we could

252
00:09:52,490 --> 00:09:56,090
pull directly from like a SAS API or

253
00:09:56,090 --> 00:09:59,090
maybe the producer could just write

254
00:09:59,090 --> 00:10:01,910
directly to a cheesy bucket you know

255
00:10:01,910 --> 00:10:03,770
there's lots of different ways in the

256
00:10:03,770 --> 00:10:05,690
case of core lag we actually deployed a

257
00:10:05,690 --> 00:10:08,510
cloud function that fakes an elastic

258
00:10:08,510 --> 00:10:11,270
search API and will write all the

259
00:10:11,270 --> 00:10:13,850
incoming events in this batching manner

260
00:10:13,850 --> 00:10:18,680
to a cloud pub/sub topic there's kind of

261
00:10:18,680 --> 00:10:20,390
like a different way to sort of look at

262
00:10:20,390 --> 00:10:22,790
how we get data into the pipeline

263
00:10:22,790 --> 00:10:24,110
kind of like what I mentioned we don't

264
00:10:24,110 --> 00:10:27,019
want to be too draconian as far as what

265
00:10:27,019 --> 00:10:28,910
the implementation details are but we do

266
00:10:28,910 --> 00:10:30,410
have to sort of standardize on a couple

267
00:10:30,410 --> 00:10:32,839
of pieces here are we first and foremost

268
00:10:32,839 --> 00:10:35,899
is every event we want to be have

269
00:10:35,899 --> 00:10:38,779
written into a cloud pub/sub which is

270
00:10:38,779 --> 00:10:40,160
not familiar with it it's basically a

271
00:10:40,160 --> 00:10:43,459
message broker that's like Kafka and a

272
00:10:43,459 --> 00:10:46,459
cool thing about these pub subs is that

273
00:10:46,459 --> 00:10:47,680
you can have multiple subscribers

274
00:10:47,680 --> 00:10:49,550
including these what they call

275
00:10:49,550 --> 00:10:51,649
background cloud functions that will

276
00:10:51,649 --> 00:10:53,959
basically fire off every single time a

277
00:10:53,959 --> 00:10:56,990
message enters the queue as well we

278
00:10:56,990 --> 00:10:59,509
wanted to be able to actively search

279
00:10:59,509 --> 00:11:01,759
these logs and I think Alec mentioned

280
00:11:01,759 --> 00:11:04,100
this as every every event gets written

281
00:11:04,100 --> 00:11:05,149
right to stackdriver which is

282
00:11:05,149 --> 00:11:07,209
essentially like a Cabana like front end

283
00:11:07,209 --> 00:11:09,649
it's got an automatic parsing of JSON

284
00:11:09,649 --> 00:11:11,720
and protobuf messages and probably the

285
00:11:11,720 --> 00:11:13,189
big key for us is that it's free to

286
00:11:13,189 --> 00:11:15,350
search you get free 30-day retention and

287
00:11:15,350 --> 00:11:16,610
you're basically only paying for the API

288
00:11:16,610 --> 00:11:20,750
rights so once we have all the events is

289
00:11:20,750 --> 00:11:23,209
sort of coming in we need to start

290
00:11:23,209 --> 00:11:24,709
interrogating our data right there's

291
00:11:24,709 --> 00:11:25,819
lots of different types of questions we

292
00:11:25,819 --> 00:11:27,290
want to ask you know does this a bench

293
00:11:27,290 --> 00:11:29,959
map some known signature is there some

294
00:11:29,959 --> 00:11:34,009
like known threshold that just metric

295
00:11:34,009 --> 00:11:35,089
you know for symmetric that it's

296
00:11:35,089 --> 00:11:37,579
increased or maybe this is is this an

297
00:11:37,579 --> 00:11:39,380
event that's indicative of some kind of

298
00:11:39,380 --> 00:11:41,120
you know newer or anomalous behavior

299
00:11:41,120 --> 00:11:43,790
it made a sudden increase DNS queries is

300
00:11:43,790 --> 00:11:45,259
some Russian ASN or something you know

301
00:11:45,259 --> 00:11:47,779
who knows lots of different things we

302
00:11:47,779 --> 00:11:50,120
kind of thought about this sort of three

303
00:11:50,120 --> 00:11:51,740
different type of techniques right which

304
00:11:51,740 --> 00:11:53,029
will basically break down at the three

305
00:11:53,029 --> 00:11:55,610
different types of sort of wool engines

306
00:11:55,610 --> 00:11:56,630
if you will

307
00:11:56,630 --> 00:11:59,029
we've got like a real-time we're trip

308
00:11:59,029 --> 00:12:01,699
wire or signature base things like you

309
00:12:01,699 --> 00:12:04,339
know is this a malicious ja3 hash this

310
00:12:04,339 --> 00:12:07,730
is a gnome type of squatting domain this

311
00:12:07,730 --> 00:12:09,949
is all powered by google cloud functions

312
00:12:09,949 --> 00:12:13,430
and then I say three is because this

313
00:12:13,430 --> 00:12:18,019
next one is more these next two methods

314
00:12:18,019 --> 00:12:19,370
are very similar right it's very

315
00:12:19,370 --> 00:12:21,160
batching a time-based right these are

316
00:12:21,160 --> 00:12:23,750
you know how do we query a bunch of

317
00:12:23,750 --> 00:12:25,459
event across either like multiple

318
00:12:25,459 --> 00:12:28,370
log sources across the various time

319
00:12:28,370 --> 00:12:31,430
time period or you know using some and

320
00:12:31,430 --> 00:12:33,050
VML stuff this is all powered by

321
00:12:33,050 --> 00:12:36,310
bigquery which is essentially very

322
00:12:36,310 --> 00:12:40,009
Google sequel like products we've really

323
00:12:40,009 --> 00:12:41,120
done too much on the anomaly stuff

324
00:12:41,120 --> 00:12:42,560
that's gonna be coming more in like 20

325
00:12:42,560 --> 00:12:45,980
20 but I won't go over that too much but

326
00:12:45,980 --> 00:12:47,740
we're just getting started with that

327
00:12:47,740 --> 00:12:50,269
anyway so first up the real-time rules

328
00:12:50,269 --> 00:12:51,319
of the trip where our rules as I

329
00:12:51,319 --> 00:12:52,819
mentioned these are all clap functions

330
00:12:52,819 --> 00:12:55,879
that we wrote with golang every single

331
00:12:55,879 --> 00:12:57,529
message that comes into pub/sub triggers

332
00:12:57,529 --> 00:13:00,439
an invocation these are wicked fast you

333
00:13:00,439 --> 00:13:02,329
know we're doing about 60 milliseconds

334
00:13:02,329 --> 00:13:04,759
on the average of execution time and

335
00:13:04,759 --> 00:13:06,050
then go laying it's just really nice

336
00:13:06,050 --> 00:13:08,839
gives us go routines which lets us do a

337
00:13:08,839 --> 00:13:10,009
lot of different things with each

338
00:13:10,009 --> 00:13:11,990
message because it was easy concurrency

339
00:13:11,990 --> 00:13:13,779
[Music]

340
00:13:13,779 --> 00:13:16,220
we have about like 30 or 40 different

341
00:13:16,220 --> 00:13:17,779
cloud things right now that handle a

342
00:13:17,779 --> 00:13:20,870
bunch of different events coming in and

343
00:13:20,870 --> 00:13:22,189
these are all most the vast majority

344
00:13:22,189 --> 00:13:24,199
right now are written in going but we

345
00:13:24,199 --> 00:13:25,879
started kind of playing around with this

346
00:13:25,879 --> 00:13:29,060
new rule engine called the common

347
00:13:29,060 --> 00:13:30,439
expression language is that Google

348
00:13:30,439 --> 00:13:32,720
recently released this is the same sort

349
00:13:32,720 --> 00:13:35,569
of engine that powers a GCP I am

350
00:13:35,569 --> 00:13:37,850
policies you know firebase I am policies

351
00:13:37,850 --> 00:13:41,839
office okay or kubernetes things but you

352
00:13:41,839 --> 00:13:43,069
can see this is a lot easier to write

353
00:13:43,069 --> 00:13:44,779
then you know a bunch of boilerplate for

354
00:13:44,779 --> 00:13:47,389
going which makes it really easy for

355
00:13:47,389 --> 00:13:49,160
analysts to write sort of understandable

356
00:13:49,160 --> 00:13:50,930
rules very very quickly without needing

357
00:13:50,930 --> 00:13:52,519
like a huge deep developer background

358
00:13:52,519 --> 00:13:54,110
which is pretty important part of a

359
00:13:54,110 --> 00:13:57,620
traditional the same next step are what

360
00:13:57,620 --> 00:13:59,360
we kind of have term batch rules these

361
00:13:59,360 --> 00:14:02,000
are sort of more complex queries that we

362
00:14:02,000 --> 00:14:04,130
can't air great interrogate events

363
00:14:04,130 --> 00:14:05,959
across multiple time periods multiple

364
00:14:05,959 --> 00:14:09,560
data sources but probably primarily the

365
00:14:09,560 --> 00:14:12,199
most important thing is with Isis or

366
00:14:12,199 --> 00:14:14,630
standard sequel syntax right so may see

367
00:14:14,630 --> 00:14:16,970
every single event is written to

368
00:14:16,970 --> 00:14:19,430
bigquery automatically from once it's

369
00:14:19,430 --> 00:14:20,779
written to stack driver through

370
00:14:20,779 --> 00:14:24,559
something called a export sink

371
00:14:24,559 --> 00:14:26,000
this is save a ton of time because we

372
00:14:26,000 --> 00:14:27,290
don't have to do any work at all this is

373
00:14:27,290 --> 00:14:29,269
just writing a filter that says drop

374
00:14:29,269 --> 00:14:31,879
everything it's a big query then we

375
00:14:31,879 --> 00:14:35,029
write rules in a predetermined sort of

376
00:14:35,029 --> 00:14:37,100
ya know config loaded up through a

377
00:14:37,100 --> 00:14:38,360
couple of cloud functions that basically

378
00:14:38,360 --> 00:14:40,040
write these scheduled queries and then

379
00:14:40,040 --> 00:14:41,110
we'll run them on the schedule

380
00:14:41,110 --> 00:14:43,030
and then if any of those rules match

381
00:14:43,030 --> 00:14:45,130
will basically put them down at the

382
00:14:45,130 --> 00:14:46,720
pipeline the same way as the real-time

383
00:14:46,720 --> 00:14:49,240
alerts so I can see here's like a pretty

384
00:14:49,240 --> 00:14:51,190
simple batch rule that uh

385
00:14:51,190 --> 00:14:53,830
one of our team members wrote you know

386
00:14:53,830 --> 00:14:55,060
we're setting like the frequency how

387
00:14:55,060 --> 00:14:56,710
often you should run you know what the

388
00:14:56,710 --> 00:15:00,370
natives it goes right to a playbook I'll

389
00:15:00,370 --> 00:15:02,950
go more to the play books later but yeah

390
00:15:02,950 --> 00:15:04,150
you can see probably the most important

391
00:15:04,150 --> 00:15:05,200
part the query there it's just pretty

392
00:15:05,200 --> 00:15:10,450
much standard sequel yeah so anyway once

393
00:15:10,450 --> 00:15:13,180
we have let's just let's say we

394
00:15:13,180 --> 00:15:14,860
triggered a rule we may see a need to

395
00:15:14,860 --> 00:15:17,830
respond to it somehow first and foremost

396
00:15:17,830 --> 00:15:20,050
we publish this again to a cloud pub/sub

397
00:15:20,050 --> 00:15:23,800
this is a pretty common thing that we're

398
00:15:23,800 --> 00:15:25,480
doing without the pipeline it basically

399
00:15:25,480 --> 00:15:27,370
gives us a lot of lag time in the

400
00:15:27,370 --> 00:15:30,520
ability to handle these events in

401
00:15:30,520 --> 00:15:32,110
multiple different fashions from sort of

402
00:15:32,110 --> 00:15:36,370
one ingress point this also includes

403
00:15:36,370 --> 00:15:37,840
false positives coming in there so we

404
00:15:37,840 --> 00:15:39,850
can like either discard those or verify

405
00:15:39,850 --> 00:15:41,230
them further by another cloud function

406
00:15:41,230 --> 00:15:42,370
down there same thing with like

407
00:15:42,370 --> 00:15:44,590
duplicate events you know the last thing

408
00:15:44,590 --> 00:15:46,090
you want to do is something we've seen a

409
00:15:46,090 --> 00:15:48,610
lot is somebody doesn't isn't able to

410
00:15:48,610 --> 00:15:50,520
log into oktai they have like tons of

411
00:15:50,520 --> 00:15:52,900
multi-factor authentication failures and

412
00:15:52,900 --> 00:15:54,280
it's really just the same sort of

413
00:15:54,280 --> 00:15:57,100
incident if you will so we can sort of

414
00:15:57,100 --> 00:15:59,350
handle that in the queue right now we

415
00:15:59,350 --> 00:16:01,690
just have a one function that we call

416
00:16:01,690 --> 00:16:03,430
sirens it's basically a lightweight

417
00:16:03,430 --> 00:16:05,560
alert router pulls every single message

418
00:16:05,560 --> 00:16:08,500
from this raw detentions pub/sub and

419
00:16:08,500 --> 00:16:11,620
then based on the with the stamp alert

420
00:16:11,620 --> 00:16:13,600
one idea is it'll bratatat pages you to

421
00:16:13,600 --> 00:16:16,960
your JIRA or Google Chat we can't have a

422
00:16:16,960 --> 00:16:18,430
lot more subscribers you know things

423
00:16:18,430 --> 00:16:21,460
like Chronicle or whatnot but like I

424
00:16:21,460 --> 00:16:23,230
said we're just still don't sort of like

425
00:16:23,230 --> 00:16:26,950
pretty alpha phase here yeah anyway

426
00:16:26,950 --> 00:16:29,980
so here's a quick match of like a google

427
00:16:29,980 --> 00:16:32,110
chat notification hearing see it took

428
00:16:32,110 --> 00:16:34,060
like 15 seconds one of our team members

429
00:16:34,060 --> 00:16:37,300
was playing around with the merlin CT

430
00:16:37,300 --> 00:16:42,130
framework but that was pretty quick so

431
00:16:42,130 --> 00:16:45,460
yeah that's kind of a nice brief

432
00:16:45,460 --> 00:16:48,610
overview we kind of learned quite a bit

433
00:16:48,610 --> 00:16:51,279
has this project been worth it probably

434
00:16:51,279 --> 00:16:52,869
Sasa this is definitely our primary

435
00:16:52,869 --> 00:16:55,779
detection response pipeline right now we

436
00:16:55,779 --> 00:16:57,249
are currently pushing around 23

437
00:16:57,249 --> 00:16:58,720
terabytes a month we'll probably

438
00:16:58,720 --> 00:17:00,399
estimating they grow to 50 to 60

439
00:17:00,399 --> 00:17:04,709
terabytes through the next year and

440
00:17:04,709 --> 00:17:07,959
probably the coolest part is most half

441
00:17:07,959 --> 00:17:10,419
the cost is just writing to your stack

442
00:17:10,419 --> 00:17:12,459
driver you know the invocation of cloud

443
00:17:12,459 --> 00:17:13,299
functions you know we're talking

444
00:17:13,299 --> 00:17:15,880
hundreds of millions of invitations per

445
00:17:15,880 --> 00:17:19,148
week or per month is dirty a couple of

446
00:17:19,148 --> 00:17:22,119
other bucks this is about 50 times

447
00:17:22,119 --> 00:17:24,549
cheaper from some of our back to the

448
00:17:24,549 --> 00:17:27,549
hand math than a traditional seem and we

449
00:17:27,549 --> 00:17:28,899
definitely have a ton more to build as

450
00:17:28,899 --> 00:17:31,240
you can see but it's not 50 times more

451
00:17:31,240 --> 00:17:33,630
expensive to build over about davila

452
00:17:33,630 --> 00:17:37,240
some future plans way more log sources

453
00:17:37,240 --> 00:17:40,090
coming in we want to add a couple more

454
00:17:40,090 --> 00:17:41,860
correlation rule types you know things

455
00:17:41,860 --> 00:17:44,019
like these as a spike is has the

456
00:17:44,019 --> 00:17:45,840
frequency change of these sort of

457
00:17:45,840 --> 00:17:48,639
queries I don't want to look at a lot

458
00:17:48,639 --> 00:17:51,429
more I kind of sometimes when I kind of

459
00:17:51,429 --> 00:17:54,940
think about you know what is our sort of

460
00:17:54,940 --> 00:17:56,679
detection posture look like it's like we

461
00:17:56,679 --> 00:17:57,909
want to do a lot more correlation which

462
00:17:57,909 --> 00:17:59,260
is signature base or do we want to sort

463
00:17:59,260 --> 00:18:01,149
of model what is what does this asset

464
00:18:01,149 --> 00:18:03,429
look like what does this human sort of

465
00:18:03,429 --> 00:18:04,779
behavior look like so we're gonna

466
00:18:04,779 --> 00:18:07,630
investigate a lot more a lot more data

467
00:18:07,630 --> 00:18:09,639
analysis tools Google has a ton of

468
00:18:09,639 --> 00:18:12,399
really really cool integrated ml tooling

469
00:18:12,399 --> 00:18:14,409
we're definitely hiring for that right

470
00:18:14,409 --> 00:18:16,389
now so if we just did feel free to talk

471
00:18:16,389 --> 00:18:18,700
to us and then integrating a lot more

472
00:18:18,700 --> 00:18:21,429
enrichment of advanced with bunch of

473
00:18:21,429 --> 00:18:22,779
threat and filled databases and because

474
00:18:22,779 --> 00:18:25,059
of our scale we have just all sorts of

475
00:18:25,059 --> 00:18:28,799
crazy data available available to us

476
00:18:28,799 --> 00:18:30,730
another cool thing that we're looking at

477
00:18:30,730 --> 00:18:33,929
is automating playbooks through

478
00:18:33,929 --> 00:18:36,610
basically Jupiter notebooks which are my

479
00:18:36,610 --> 00:18:37,899
Google has a hosting thing like that as

480
00:18:37,899 --> 00:18:40,149
well but essentially Jupiter notebooks

481
00:18:40,149 --> 00:18:43,299
if you're not familiar are a way to sort

482
00:18:43,299 --> 00:18:44,940
of contain live code and documentation

483
00:18:44,940 --> 00:18:48,870
visualizations all in the same document

484
00:18:48,870 --> 00:18:51,909
this would let us you know save tons of

485
00:18:51,909 --> 00:18:54,730
time on the response side because you

486
00:18:54,730 --> 00:18:57,730
know maybe 70 80 all the the response

487
00:18:57,730 --> 00:18:59,049
play but could be done by the time a

488
00:18:59,049 --> 00:19:02,100
human actually looks at it

489
00:19:02,679 --> 00:19:04,970
yeah pretty cool but I'm pretty excited

490
00:19:04,970 --> 00:19:05,840
about that myself

491
00:19:05,840 --> 00:19:13,010
oh yeah so this is just kind of a quick

492
00:19:13,010 --> 00:19:14,929
aside to kind of wrap things up a little

493
00:19:14,929 --> 00:19:18,799
bit this graph represents about a week

494
00:19:18,799 --> 00:19:21,679
where we were initially testing and and

495
00:19:21,679 --> 00:19:24,380
sending data in the bottom line where

496
00:19:24,380 --> 00:19:26,150
you can see there's almost nothing we

497
00:19:26,150 --> 00:19:28,010
were pushing about 20 gigs a day it was

498
00:19:28,010 --> 00:19:30,730
a singular log source from a portion of

499
00:19:30,730 --> 00:19:34,549
set of production systems and the idea

500
00:19:34,549 --> 00:19:35,539
was really just to see if this even

501
00:19:35,539 --> 00:19:38,630
worked and we we felt pretty confident

502
00:19:38,630 --> 00:19:39,830
that it's going to work really ok let's

503
00:19:39,830 --> 00:19:42,830
add another log source and see just what

504
00:19:42,830 --> 00:19:45,799
happens and without really thinking

505
00:19:45,799 --> 00:19:47,659
about it too much we turn this log

506
00:19:47,659 --> 00:19:52,159
source on on a Friday afternoon and that

507
00:19:52,159 --> 00:19:56,720
peat there is 9.1 terabytes and so we

508
00:19:56,720 --> 00:19:58,429
went from a system that was designed to

509
00:19:58,429 --> 00:20:01,700
accept around 20 to 50 gigs a day to

510
00:20:01,700 --> 00:20:04,370
accepting 9.1 terabytes a day and and

511
00:20:04,370 --> 00:20:06,350
the really like super cool part about

512
00:20:06,350 --> 00:20:09,080
this is we didn't lose a single piece of

513
00:20:09,080 --> 00:20:12,320
data and and like we didn't end up with

514
00:20:12,320 --> 00:20:14,720
a bill that we couldn't pay and so we

515
00:20:14,720 --> 00:20:17,000
had all the data from this source that

516
00:20:17,000 --> 00:20:20,690
was pushing 9.1 terabytes pushing to a

517
00:20:20,690 --> 00:20:22,640
system that we we you know hadn't even

518
00:20:22,640 --> 00:20:24,919
tested a fraction of that on and and it

519
00:20:24,919 --> 00:20:28,490
just all worked and so that was kind of

520
00:20:28,490 --> 00:20:31,280
one of the like biggest accidental wins

521
00:20:31,280 --> 00:20:34,220
I think that we accomplished here and it

522
00:20:34,220 --> 00:20:35,750
was just really exciting to come back on

523
00:20:35,750 --> 00:20:38,480
Monday and see this graph and then

524
00:20:38,480 --> 00:20:40,070
promptly turn it off because that was

525
00:20:40,070 --> 00:20:43,730
not what we were looking to do so we

526
00:20:43,730 --> 00:20:46,190
have just about five minutes left which

527
00:20:46,190 --> 00:20:48,230
is pretty good timing wise it's what we

528
00:20:48,230 --> 00:20:49,370
were aiming for so if there are any

529
00:20:49,370 --> 00:21:03,559
questions that anyone has okay hi great

530
00:21:03,559 --> 00:21:06,520
presentation just put a simple question

531
00:21:06,520 --> 00:21:08,240
related to bigquery

532
00:21:08,240 --> 00:21:11,899
it's a structured database the how do

533
00:21:11,899 --> 00:21:13,950
you cope with adding more sources in

534
00:21:13,950 --> 00:21:17,580
and events that have multiple fuels and

535
00:21:17,580 --> 00:21:20,279
the second question is have you looked

536
00:21:20,279 --> 00:21:22,799
into Chronicle the cloud seemed from

537
00:21:22,799 --> 00:21:24,330
Google thank you

538
00:21:24,330 --> 00:21:26,130
so second question first yeah we

539
00:21:26,130 --> 00:21:29,760
actively use Chronicle we're working

540
00:21:29,760 --> 00:21:33,149
with Google as well to sort of provide

541
00:21:33,149 --> 00:21:34,590
them with a lot more log sources to

542
00:21:34,590 --> 00:21:37,799
ingest into Chronicle it's definitely

543
00:21:37,799 --> 00:21:39,539
interesting to see what happens with all

544
00:21:39,539 --> 00:21:42,840
those news recently but as far as the

545
00:21:42,840 --> 00:21:45,480
biggest or the big query so when you

546
00:21:45,480 --> 00:21:47,429
create this export through stackdriver

547
00:21:47,429 --> 00:21:49,559
it will actually automatically update

548
00:21:49,559 --> 00:21:51,570
those fields as long as they're just new

549
00:21:51,570 --> 00:21:54,470
we have had some issues where you know

550
00:21:54,470 --> 00:21:58,559
somebody had added a for one of our

551
00:21:58,559 --> 00:22:00,389
initial models of a data source was

552
00:22:00,389 --> 00:22:01,649
essentially int right and it was

553
00:22:01,649 --> 00:22:03,149
actually a flow and so that would cause

554
00:22:03,149 --> 00:22:04,200
some issues we have to like drop the

555
00:22:04,200 --> 00:22:05,850
table or whatnot but in general it's

556
00:22:05,850 --> 00:22:07,919
been pretty easy to it's not something

557
00:22:07,919 --> 00:22:13,470
we have to worry about too often really

558
00:22:13,470 --> 00:22:14,580
cool design

559
00:22:14,580 --> 00:22:16,980
have you tried work aiming against the

560
00:22:16,980 --> 00:22:19,350
red team like at what stage it would

561
00:22:19,350 --> 00:22:25,070
detect an attack attack it wouldn't be

562
00:22:26,389 --> 00:22:30,029
so what's the question if we beautified

563
00:22:30,029 --> 00:22:33,720
playing against the red team to attack

564
00:22:33,720 --> 00:22:35,909
and pursue at which stage it will pick

565
00:22:35,909 --> 00:22:40,139
it up yes I don't want to go too much

566
00:22:40,139 --> 00:22:42,450
into the details of their the results of

567
00:22:42,450 --> 00:22:44,250
red teaming obviously but yes we have

568
00:22:44,250 --> 00:22:50,610
and the the results were pretty neat but

569
00:22:50,610 --> 00:22:52,799
that's about as much as I planned I

570
00:22:52,799 --> 00:23:02,850
didn't practice that question sorry so

571
00:23:02,850 --> 00:23:05,159
now we know that Google updates your

572
00:23:05,159 --> 00:23:08,840
machines who updates the containers I'm

573
00:23:08,840 --> 00:23:11,880
sorry could you repeat that please the

574
00:23:11,880 --> 00:23:13,799
beginning of the presentation you said

575
00:23:13,799 --> 00:23:16,049
you don't want updates operating systems

576
00:23:16,049 --> 00:23:18,929
on the machines who operates the

577
00:23:18,929 --> 00:23:21,899
containers yeah so I think to expand on

578
00:23:21,899 --> 00:23:23,250
that a little bit more like inherently

579
00:23:23,250 --> 00:23:25,780
the people like to throw

580
00:23:25,780 --> 00:23:28,630
the word serverless around but what that

581
00:23:28,630 --> 00:23:30,250
really means is someone else is running

582
00:23:30,250 --> 00:23:34,330
the machines and the the approach that

583
00:23:34,330 --> 00:23:36,160
we were really trying to take here is

584
00:23:36,160 --> 00:23:38,320
can we offload some of the operational

585
00:23:38,320 --> 00:23:41,230
workload from our security team because

586
00:23:41,230 --> 00:23:44,080
the if we couldn't then we would have to

587
00:23:44,080 --> 00:23:47,200
start hiring sres and ops and if you

588
00:23:47,200 --> 00:23:49,780
look at a lot of the cloud providers

589
00:23:49,780 --> 00:23:55,450
via Google Amazon Microsoft or even

590
00:23:55,450 --> 00:23:57,040
CloudFlare itself like we have what we

591
00:23:57,040 --> 00:23:58,780
call a service offering is one of our

592
00:23:58,780 --> 00:24:01,660
products the idea is not to claim that

593
00:24:01,660 --> 00:24:03,520
there's no operating system or machine

594
00:24:03,520 --> 00:24:05,350
underneath the idea is to remove that

595
00:24:05,350 --> 00:24:06,940
overhead from the people using the

596
00:24:06,940 --> 00:24:09,940
platform and so that's that's kind of

597
00:24:09,940 --> 00:24:13,180
what we were aiming for there that said

598
00:24:13,180 --> 00:24:14,800
no terraformers gonna let it work for us

599
00:24:14,800 --> 00:24:17,430
and we have a very robust or a CI CD

600
00:24:17,430 --> 00:24:19,750
system that'll deploy and rollback

601
00:24:19,750 --> 00:24:22,270
functions and tests and all that so but

602
00:24:22,270 --> 00:24:24,090
that was something we wanted to

603
00:24:24,090 --> 00:24:26,590
incorporate very very naturally to make

604
00:24:26,590 --> 00:24:28,540
sure that's seen a part of our DNA when

605
00:24:28,540 --> 00:24:32,710
building out this problem any more

606
00:24:32,710 --> 00:24:39,610
questions I don't think so so Phil Alex

607
00:24:39,610 --> 00:24:41,470
thank you very much thank you

608
00:24:41,470 --> 00:24:44,640
[Applause]

