1
00:00:04,180 --> 00:00:11,500
okay cool so yeah extremely worthy title

2
00:00:09,219 --> 00:00:13,750
for what is or at least should be a

3
00:00:11,500 --> 00:00:16,930
pretty straightforward process for those

4
00:00:13,750 --> 00:00:19,570
who don't know us I'm Michael I'm a

5
00:00:16,930 --> 00:00:20,948
senior ops person at catalyst I mostly

6
00:00:19,570 --> 00:00:22,179
deal with the network but sometimes I

7
00:00:20,949 --> 00:00:25,080
get roped into these infrastructure

8
00:00:22,179 --> 00:00:27,519
projects and I'm Philip I'm a junior

9
00:00:25,080 --> 00:00:32,980
operations developer also working at

10
00:00:27,519 --> 00:00:35,290
Hillis cool so we set out to answer this

11
00:00:32,980 --> 00:00:38,169
question and it turned out to be sort of

12
00:00:35,290 --> 00:00:40,089
harder than it ought to be before we get

13
00:00:38,170 --> 00:00:43,090
started here's sort of your chance for

14
00:00:40,090 --> 00:00:45,400
honesty who in the room truly and

15
00:00:43,090 --> 00:00:52,720
absolutely feels like they could

16
00:00:45,400 --> 00:00:54,790
definitively answer this so I gave this

17
00:00:52,720 --> 00:00:57,730
talk a few months ago at Wellington icig

18
00:00:54,790 --> 00:00:58,990
and you know out of a room of similar

19
00:00:57,730 --> 00:01:00,459
size to this only a couple of people

20
00:00:58,990 --> 00:01:02,590
really felt like it was something that

21
00:01:00,460 --> 00:01:07,210
they could do and not all of us can be

22
00:01:02,590 --> 00:01:09,250
you and McNeill there's a sort of weird

23
00:01:07,210 --> 00:01:11,440
state of affairs where no two people and

24
00:01:09,250 --> 00:01:14,290
InfoSec ever really seem like they can

25
00:01:11,440 --> 00:01:16,149
agree on anything but I think it's

26
00:01:14,290 --> 00:01:18,610
pretty fair to say that keeping your

27
00:01:16,150 --> 00:01:21,670
host pitched it's got to be in the sort

28
00:01:18,610 --> 00:01:23,260
of top five and yet for a lot of people

29
00:01:21,670 --> 00:01:29,110
the answer really looks something like

30
00:01:23,260 --> 00:01:31,990
this and so we want to work out how we

31
00:01:29,110 --> 00:01:34,240
answer the question we've sort of

32
00:01:31,990 --> 00:01:36,130
divided this up into kind of the three

33
00:01:34,240 --> 00:01:39,009
pillars that hold up your house of

34
00:01:36,130 --> 00:01:41,320
patching and allow you to

35
00:01:39,010 --> 00:01:42,190
comprehensively automatically and

36
00:01:41,320 --> 00:01:44,139
actionable

37
00:01:42,190 --> 00:01:46,000
answer the question assuming you're

38
00:01:44,140 --> 00:01:48,270
using Debian or Ubuntu but we'll talk

39
00:01:46,000 --> 00:01:51,370
about I will talk more about that later

40
00:01:48,270 --> 00:01:53,649
so let's get started by taking a look at

41
00:01:51,370 --> 00:01:55,180
the the kind of journey that we've gone

42
00:01:53,650 --> 00:01:58,299
on to get to the point where we are

43
00:01:55,180 --> 00:02:00,250
today Philip and I work for a company

44
00:01:58,299 --> 00:02:02,049
which when looked at in the right light

45
00:02:00,250 --> 00:02:05,740
you could sort of describe as maybe a

46
00:02:02,049 --> 00:02:08,619
managed service provider primarily we do

47
00:02:05,740 --> 00:02:10,508
software development but the weird thing

48
00:02:08,619 --> 00:02:12,310
about developing software is that

49
00:02:10,508 --> 00:02:15,608
eventually somebody wants to run that

50
00:02:12,310 --> 00:02:17,900
software on a computer and as a result

51
00:02:15,609 --> 00:02:19,519
we've got thousands of servers

52
00:02:17,900 --> 00:02:22,219
they're split across hundreds of

53
00:02:19,519 --> 00:02:25,549
different customers which means hundreds

54
00:02:22,219 --> 00:02:27,290
of different environments as well as our

55
00:02:25,549 --> 00:02:30,700
kind of corporate and infrastructure

56
00:02:27,290 --> 00:02:33,469
resources that run the company itself

57
00:02:30,700 --> 00:02:38,358
and because these machines that we look

58
00:02:33,469 --> 00:02:40,159
after tend to spend they spend a really

59
00:02:38,359 --> 00:02:41,720
large number of different environments

60
00:02:40,159 --> 00:02:43,689
that belong to different customers and

61
00:02:41,720 --> 00:02:45,799
these are pretty widely different things

62
00:02:43,689 --> 00:02:49,638
and that means that they tend to get

63
00:02:45,799 --> 00:02:51,139
patched in pretty different ways they've

64
00:02:49,639 --> 00:02:53,299
got different schedules that are set by

65
00:02:51,139 --> 00:02:55,400
the particular customer as to when

66
00:02:53,299 --> 00:02:57,230
they're being patched there's different

67
00:02:55,400 --> 00:02:59,180
access methods that you need to get into

68
00:02:57,230 --> 00:03:00,679
the environment different deployment

69
00:02:59,180 --> 00:03:02,629
mechanisms for putting the patches on

70
00:03:00,680 --> 00:03:04,730
different appetites for how long a

71
00:03:02,629 --> 00:03:06,950
system can sit unpatched and what

72
00:03:04,730 --> 00:03:10,730
constitutes a serious bug that has to be

73
00:03:06,950 --> 00:03:14,268
fixed now and it therefore makes it

74
00:03:10,730 --> 00:03:16,340
pretty difficult when you have a branded

75
00:03:14,269 --> 00:03:19,549
scary vulnerability like heartbleed or

76
00:03:16,340 --> 00:03:21,650
shell shock or whatever to get a really

77
00:03:19,549 --> 00:03:23,479
good view across the entire fleet of

78
00:03:21,650 --> 00:03:25,430
machines you know this thing that has to

79
00:03:23,479 --> 00:03:28,129
be patched everywhere how many machines

80
00:03:25,430 --> 00:03:30,500
have actually been patched for it let

81
00:03:28,129 --> 00:03:34,069
alone you know everyday common lib tough

82
00:03:30,500 --> 00:03:37,370
bugs that crop up every second week and

83
00:03:34,069 --> 00:03:39,228
yet we consider the kind of ability to

84
00:03:37,370 --> 00:03:41,569
say is this hosts patched or not a

85
00:03:39,229 --> 00:03:43,069
pretty important metric in an

86
00:03:41,569 --> 00:03:47,358
environment and we think that you should

87
00:03:43,069 --> 00:03:51,108
too so we didn't come into this entirely

88
00:03:47,359 --> 00:03:53,780
unprepared historically we used to see

89
00:03:51,109 --> 00:03:56,090
it of great Perl scripts which pars the

90
00:03:53,780 --> 00:03:58,040
email messages that the operating system

91
00:03:56,090 --> 00:04:00,470
vendors send out with security

92
00:03:58,040 --> 00:04:01,760
advisories which if you've tried to

93
00:04:00,470 --> 00:04:04,599
solve this problem before I'm sure

94
00:04:01,760 --> 00:04:04,599
sounds very familiar

95
00:04:04,629 --> 00:04:10,220
essentially email advisories and webpage

96
00:04:08,329 --> 00:04:13,699
lists of things are still the dominant

97
00:04:10,220 --> 00:04:15,709
currency of advising people about

98
00:04:13,699 --> 00:04:20,120
security bugs and free software projects

99
00:04:15,709 --> 00:04:21,620
and distros are no exception to that we

100
00:04:20,120 --> 00:04:23,889
did however have one of the most

101
00:04:21,620 --> 00:04:27,440
important pieces of the puzzle already

102
00:04:23,889 --> 00:04:29,210
which is we had a full list of every

103
00:04:27,440 --> 00:04:30,770
package that was installed on every

104
00:04:29,210 --> 00:04:33,650
machine

105
00:04:30,770 --> 00:04:35,060
in our responsibilities and we do that

106
00:04:33,650 --> 00:04:38,448
currently with a tool that's been around

107
00:04:35,060 --> 00:04:41,600
for a long time Mike Forbes first talked

108
00:04:38,449 --> 00:04:44,479
about it at insid nog in 2008 and that's

109
00:04:41,600 --> 00:04:47,150
a tool called host info and it

110
00:04:44,479 --> 00:04:50,389
definitely could be worse if you're in a

111
00:04:47,150 --> 00:04:52,070
small environment this is probably the

112
00:04:50,389 --> 00:04:54,350
process that you're going through to do

113
00:04:52,070 --> 00:04:56,210
your patching and it works okay if you

114
00:04:54,350 --> 00:04:58,630
have like three or four computers but

115
00:04:56,210 --> 00:05:04,310
even when you've got maybe ten machines

116
00:04:58,630 --> 00:05:06,710
this process really sucks and so either

117
00:05:04,310 --> 00:05:09,080
way you look at it mmm trying to get a

118
00:05:06,710 --> 00:05:11,659
comprehensive idea across a really large

119
00:05:09,080 --> 00:05:14,090
diverse fleet of machines as to the

120
00:05:11,660 --> 00:05:17,000
state of their patching is definitely

121
00:05:14,090 --> 00:05:19,310
not as easy as it could have been we

122
00:05:17,000 --> 00:05:21,849
really wanted to be able to generate

123
00:05:19,310 --> 00:05:24,260
reports to answer the question

124
00:05:21,849 --> 00:05:26,300
automatically and easily so that we

125
00:05:24,260 --> 00:05:29,840
could do them frequently and without

126
00:05:26,300 --> 00:05:31,460
sort of exorbitant cost involved this is

127
00:05:29,840 --> 00:05:33,440
really good because when we're patching

128
00:05:31,460 --> 00:05:35,359
something like shell shock it lets us

129
00:05:33,440 --> 00:05:37,370
check multiple times throughout the day

130
00:05:35,360 --> 00:05:39,380
to see kind of what our progress is

131
00:05:37,370 --> 00:05:41,389
through a particular environment and

132
00:05:39,380 --> 00:05:43,310
it's also just really good because

133
00:05:41,389 --> 00:05:45,110
sometimes you want to make sure that a

134
00:05:43,310 --> 00:05:47,300
machine hasn't fallen out of its

135
00:05:45,110 --> 00:05:49,039
patching schedule even if you're not the

136
00:05:47,300 --> 00:05:51,380
person doing the patching it can be good

137
00:05:49,039 --> 00:05:56,090
to keep an eye on it and go kind of prod

138
00:05:51,380 --> 00:05:58,699
the person who is doing it and we have

139
00:05:56,090 --> 00:06:00,650
the technology it seemed like from my

140
00:05:58,699 --> 00:06:02,750
point of view we basically had all the

141
00:06:00,650 --> 00:06:05,330
pieces that we needed to make reports

142
00:06:02,750 --> 00:06:07,250
like this automatically we had a list of

143
00:06:05,330 --> 00:06:11,780
all the packages that were installed on

144
00:06:07,250 --> 00:06:15,710
our hosts we have a rough idea of what

145
00:06:11,780 --> 00:06:17,239
packages are problematic and it really

146
00:06:15,710 --> 00:06:19,698
should be as simple as just doing a kind

147
00:06:17,240 --> 00:06:21,949
of Set intersection and you know making

148
00:06:19,699 --> 00:06:23,479
a report so we had a bit of a look

149
00:06:21,949 --> 00:06:26,919
around for existing solutions to the

150
00:06:23,479 --> 00:06:29,780
problem and it's it's not that amazing

151
00:06:26,919 --> 00:06:32,530
so when I initially started this project

152
00:06:29,780 --> 00:06:35,150
there were some options available

153
00:06:32,530 --> 00:06:37,940
landscape is pretty nice

154
00:06:35,150 --> 00:06:39,929
at the time that we started this project

155
00:06:37,940 --> 00:06:41,820
back in 2015

156
00:06:39,930 --> 00:06:44,130
you had to have a bun to advantage to

157
00:06:41,820 --> 00:06:46,349
use it and it cost over $1,000 per sever

158
00:06:44,130 --> 00:06:49,980
per year and it only works with a bun -

159
00:06:46,350 --> 00:06:52,140
so that's not super useful they do have

160
00:06:49,980 --> 00:06:53,610
a cheaper offering now if you just want

161
00:06:52,140 --> 00:06:54,990
their software as a service offering you

162
00:06:53,610 --> 00:06:58,020
can get it for like seven bucks a month

163
00:06:54,990 --> 00:07:01,040
per machine but if you need on-prem your

164
00:06:58,020 --> 00:07:03,990
back and everyone to advantage territory

165
00:07:01,040 --> 00:07:05,610
readhead makes space walk which is a big

166
00:07:03,990 --> 00:07:07,530
java thing it only works really hits

167
00:07:05,610 --> 00:07:10,080
that's no good for us and there's this

168
00:07:07,530 --> 00:07:11,760
kind of cool project called V fence but

169
00:07:10,080 --> 00:07:13,320
if you dig into its github project

170
00:07:11,760 --> 00:07:16,230
you'll find a really sad message from

171
00:07:13,320 --> 00:07:18,060
the developer basically saying nobody

172
00:07:16,230 --> 00:07:23,010
wanted to help and I got disheartened

173
00:07:18,060 --> 00:07:24,540
and gave up so V fence is out so I

174
00:07:23,010 --> 00:07:26,730
figured we have most of the info we need

175
00:07:24,540 --> 00:07:28,890
I'll just make a little web application

176
00:07:26,730 --> 00:07:30,390
we'll present it in a nice way we'll

177
00:07:28,890 --> 00:07:33,390
release it under an open-source license

178
00:07:30,390 --> 00:07:37,500
and everything will be great so I made a

179
00:07:33,390 --> 00:07:38,909
github repo in 2015 and I told everyone

180
00:07:37,500 --> 00:07:43,530
at work they would be done in a couple

181
00:07:38,910 --> 00:07:44,820
of weeks so it took about two months of

182
00:07:43,530 --> 00:07:47,309
on and off work

183
00:07:44,820 --> 00:07:49,500
just to kind of get an idea of how

184
00:07:47,310 --> 00:07:52,800
you're supposed to work out whether a

185
00:07:49,500 --> 00:07:54,810
Debian packages is secure or not and

186
00:07:52,800 --> 00:07:56,370
we're still trying to work that out and

187
00:07:54,810 --> 00:07:59,160
Philip will tell you more about that

188
00:07:56,370 --> 00:08:01,590
later let alone build a user interface

189
00:07:59,160 --> 00:08:03,630
shake out the enormous number of edge

190
00:08:01,590 --> 00:08:06,090
cases that comes with like 20 years

191
00:08:03,630 --> 00:08:07,950
worth of Debian packaging and then even

192
00:08:06,090 --> 00:08:10,609
start to think about how you show that

193
00:08:07,950 --> 00:08:14,070
to someone in a way that's useful

194
00:08:10,610 --> 00:08:15,960
it wasn't until earlier this year that

195
00:08:14,070 --> 00:08:17,640
we kind of felt like the project was

196
00:08:15,960 --> 00:08:20,760
starting to take some sort of usable

197
00:08:17,640 --> 00:08:24,150
shape and so we checked out well I

198
00:08:20,760 --> 00:08:25,560
checked out most of the code and May and

199
00:08:24,150 --> 00:08:28,500
presented the bits that actually worked

200
00:08:25,560 --> 00:08:30,750
at ASIC and unfortunately in June we

201
00:08:28,500 --> 00:08:32,880
hired Philip who has gone through and

202
00:08:30,750 --> 00:08:38,309
fixed a huge number of bugs and the code

203
00:08:32,880 --> 00:08:41,189
that I wrote so let's take a through the

204
00:08:38,309 --> 00:08:44,729
process that's required to achieve patch

205
00:08:41,190 --> 00:08:48,030
reporting Nirvana pillar one and our

206
00:08:44,730 --> 00:08:49,890
house of patching so let's take another

207
00:08:48,030 --> 00:08:52,500
step back and ask another question

208
00:08:49,890 --> 00:08:52,870
who in the room can truly with 100

209
00:08:52,500 --> 00:08:54,580
percent

210
00:08:52,870 --> 00:08:57,430
conviction say that they know exactly

211
00:08:54,580 --> 00:09:04,360
what packages are installed on all of

212
00:08:57,430 --> 00:09:05,859
their machines yeah so there are there

213
00:09:04,360 --> 00:09:08,500
are a bunch of tools for this and they

214
00:09:05,860 --> 00:09:10,390
have been you know lots of tools in the

215
00:09:08,500 --> 00:09:12,910
past catalyst has its own thing called

216
00:09:10,390 --> 00:09:16,870
host info but at the moment the hippest

217
00:09:12,910 --> 00:09:18,279
one by far is always query not everyone

218
00:09:16,870 --> 00:09:20,110
wants to run a pill based thing that

219
00:09:18,279 --> 00:09:21,610
communicates with email and all that

220
00:09:20,110 --> 00:09:25,000
sort of stuff

221
00:09:21,610 --> 00:09:26,710
boys query is a really hip tool which at

222
00:09:25,000 --> 00:09:29,020
least by Facebook under an open-source

223
00:09:26,710 --> 00:09:32,980
license and it's basically this kind of

224
00:09:29,020 --> 00:09:37,000
amazing real-time host instrumentation

225
00:09:32,980 --> 00:09:38,560
system always query is really cool and I

226
00:09:37,000 --> 00:09:40,600
could easily give you an entire talk

227
00:09:38,560 --> 00:09:42,279
just about always query and the

228
00:09:40,600 --> 00:09:44,650
interesting stuff that I've found that

229
00:09:42,279 --> 00:09:46,029
it can do but we'll just talk a little

230
00:09:44,650 --> 00:09:49,900
bit about the things that are actually

231
00:09:46,029 --> 00:09:52,620
relevant to this patching stuff so auras

232
00:09:49,900 --> 00:09:57,400
query essentially comes in two parts

233
00:09:52,620 --> 00:09:59,589
you've got OS query I which lets you do

234
00:09:57,400 --> 00:10:01,900
ad hoc lookups of stuff that always

235
00:09:59,589 --> 00:10:04,270
query knows about it's really good for

236
00:10:01,900 --> 00:10:05,770
playing with OS query finding out what

237
00:10:04,270 --> 00:10:07,540
types of data you might be able to

238
00:10:05,770 --> 00:10:09,970
extract out of it troubleshooting your

239
00:10:07,540 --> 00:10:12,370
queries that kind of thing it's more of

240
00:10:09,970 --> 00:10:14,440
a kind of development tool and then

241
00:10:12,370 --> 00:10:17,020
you've got the really good bit which is

242
00:10:14,440 --> 00:10:21,390
always query D and that's the daemon

243
00:10:17,020 --> 00:10:25,120
that you install run on your hosts and

244
00:10:21,390 --> 00:10:28,300
have periodically execute queries that

245
00:10:25,120 --> 00:10:30,370
find out information about them so

246
00:10:28,300 --> 00:10:33,969
conveniently OS query D has a pluggable

247
00:10:30,370 --> 00:10:36,370
architecture you can select plugins

248
00:10:33,970 --> 00:10:38,680
which label the daemon to work out its

249
00:10:36,370 --> 00:10:40,750
configuration and also that tell the

250
00:10:38,680 --> 00:10:43,420
daemon where it should send the stuff

251
00:10:40,750 --> 00:10:47,320
that it finds out so we've decided to

252
00:10:43,420 --> 00:10:49,660
use the HTTP API that it has it's got

253
00:10:47,320 --> 00:10:52,270
these three API endpoints it's got the

254
00:10:49,660 --> 00:10:54,189
enrollment endpoint which is called the

255
00:10:52,270 --> 00:10:55,750
first time that the OS query daemon

256
00:10:54,190 --> 00:10:58,120
starts up where it gets its

257
00:10:55,750 --> 00:11:00,400
configuration initially it's got the

258
00:10:58,120 --> 00:11:01,990
configuration endpoint which it hits to

259
00:11:00,400 --> 00:11:04,540
get a list of queries that you want it

260
00:11:01,990 --> 00:11:06,230
to run and it's got the logger endpoint

261
00:11:04,540 --> 00:11:12,250
which it hits anytime something

262
00:11:06,230 --> 00:11:12,250
interesting happens on the host oh shoot

263
00:11:12,910 --> 00:11:19,520
excellent so we'll just quickly show you

264
00:11:17,000 --> 00:11:22,490
a little bit of how our scary eye works

265
00:11:19,520 --> 00:11:25,180
because a demo is worth a thousand words

266
00:11:22,490 --> 00:11:25,180
I think

267
00:11:36,980 --> 00:11:44,640
typing so this is what the OS query I

268
00:11:41,880 --> 00:11:46,260
user interface looks like if it seems

269
00:11:44,640 --> 00:11:48,120
familiar it's because they literally

270
00:11:46,260 --> 00:11:51,210
copied and pasted the SQLite codebase

271
00:11:48,120 --> 00:11:53,550
into our query so this is also a secure

272
00:11:51,210 --> 00:11:58,410
Lites query interface and what we've got

273
00:11:53,550 --> 00:12:01,319
is we've got a series of virtualized SQL

274
00:11:58,410 --> 00:12:02,819
tables so instead of being database

275
00:12:01,320 --> 00:12:04,560
tables on disk these are actually

276
00:12:02,820 --> 00:12:06,900
properties about the system that always

277
00:12:04,560 --> 00:12:10,170
query is running on and so we can start

278
00:12:06,900 --> 00:12:12,890
to do some really nice stuff for

279
00:12:10,170 --> 00:12:16,589
instance we can look at Firefox add-ons

280
00:12:12,890 --> 00:12:18,840
a useful thing to look at that's pretty

281
00:12:16,590 --> 00:12:20,520
easy it's just to say tell me about the

282
00:12:18,840 --> 00:12:23,010
USB devices that are plugged into this

283
00:12:20,520 --> 00:12:24,180
machine right now and then we can start

284
00:12:23,010 --> 00:12:25,710
to do more interesting things where we

285
00:12:24,180 --> 00:12:28,410
can start to add conditions and we can

286
00:12:25,710 --> 00:12:30,570
say tell me all the demons that are not

287
00:12:28,410 --> 00:12:31,469
bound to localhost for instance which

288
00:12:30,570 --> 00:12:34,230
might be something that you're

289
00:12:31,470 --> 00:12:35,430
interested in finding out about but for

290
00:12:34,230 --> 00:12:38,490
our purposes the thing we're most

291
00:12:35,430 --> 00:12:39,930
interested in is this ginormous list of

292
00:12:38,490 --> 00:12:42,260
every package that's installed on the

293
00:12:39,930 --> 00:12:42,260
machine

294
00:12:46,010 --> 00:12:55,830
and so the great thing about always

295
00:12:50,910 --> 00:12:58,949
query is that even for a query like

296
00:12:55,830 --> 00:13:01,170
select star from packages where there's

297
00:12:58,950 --> 00:13:03,150
a crapload of data in there you can

298
00:13:01,170 --> 00:13:04,829
still say that always query I want to

299
00:13:03,150 --> 00:13:07,410
know what the state of this is every 10

300
00:13:04,830 --> 00:13:09,480
seconds and it's smart enough to say

301
00:13:07,410 --> 00:13:11,040
okay nothing's changed since last time

302
00:13:09,480 --> 00:13:13,230
so don't see into the updates back to

303
00:13:11,040 --> 00:13:15,540
the server it only tells you when

304
00:13:13,230 --> 00:13:16,920
something actually changes now if those

305
00:13:15,540 --> 00:13:19,740
people's have other good stuff but we

306
00:13:16,920 --> 00:13:21,930
don't care about it for this and so what

307
00:13:19,740 --> 00:13:23,850
do you plug or scurry into the main

308
00:13:21,930 --> 00:13:26,010
downside to it at the moment is that

309
00:13:23,850 --> 00:13:27,839
while it's a great piece of maintained

310
00:13:26,010 --> 00:13:29,910
free software that's come from Facebook

311
00:13:27,839 --> 00:13:31,350
they just gave us always query they

312
00:13:29,910 --> 00:13:33,329
didn't give us the server infrastructure

313
00:13:31,350 --> 00:13:34,980
that our security talks to at Facebook

314
00:13:33,330 --> 00:13:36,360
which is fair enough because it's

315
00:13:34,980 --> 00:13:39,240
probably really weird and Facebook

316
00:13:36,360 --> 00:13:41,070
specific so if you look around you'll

317
00:13:39,240 --> 00:13:43,050
see that there's a whole load of these

318
00:13:41,070 --> 00:13:45,360
existing commercial and free software

319
00:13:43,050 --> 00:13:48,359
offerings for software that I was clear

320
00:13:45,360 --> 00:13:50,070
you can talk to and they're pretty good

321
00:13:48,360 --> 00:13:52,560
doorman in particular I like it's

322
00:13:50,070 --> 00:13:54,630
written in Python lets you really easily

323
00:13:52,560 --> 00:13:56,689
put things together but the problem with

324
00:13:54,630 --> 00:13:59,880
these is that they're big complete

325
00:13:56,690 --> 00:14:01,320
full-on software products you need to

326
00:13:59,880 --> 00:14:03,839
have post grades you need to have darker

327
00:14:01,320 --> 00:14:05,070
they're not really suitable if you just

328
00:14:03,839 --> 00:14:07,970
want to build something with always

329
00:14:05,070 --> 00:14:10,410
query or you want to experiment with it

330
00:14:07,970 --> 00:14:14,040
and sometimes you just want to you know

331
00:14:10,410 --> 00:14:15,959
try a thing out and so here's the first

332
00:14:14,040 --> 00:14:19,469
of three pieces of code that we're

333
00:14:15,960 --> 00:14:21,900
releasing today it's a 200 line super

334
00:14:19,470 --> 00:14:24,720
minimalist Django application that

335
00:14:21,900 --> 00:14:26,760
implements the OS query API and

336
00:14:24,720 --> 00:14:28,920
implements the three basic endpoints and

337
00:14:26,760 --> 00:14:30,839
we bundled it with a really simple demo

338
00:14:28,920 --> 00:14:32,729
application that you can use to kind of

339
00:14:30,839 --> 00:14:37,160
start playing with RS query in your

340
00:14:32,730 --> 00:14:37,160
environment and we'll do a demo step

341
00:14:44,810 --> 00:14:50,040
so here's a live view this is the the

342
00:14:48,240 --> 00:14:52,020
Django built-in admin system which is

343
00:14:50,040 --> 00:14:53,760
the sort of free UI that you get with

344
00:14:52,020 --> 00:14:55,770
your Django projects so you don't have

345
00:14:53,760 --> 00:14:57,569
to write any code now you can see I've

346
00:14:55,770 --> 00:15:01,740
got a few of my hosts currently

347
00:14:57,570 --> 00:15:03,029
reporting in here and 2os query and

348
00:15:01,740 --> 00:15:05,670
they're all alive at the moment which

349
00:15:03,029 --> 00:15:09,000
means that the daemon talks to the

350
00:15:05,670 --> 00:15:10,229
server in the last couple of minutes and

351
00:15:09,000 --> 00:15:11,940
what we can do with this demo

352
00:15:10,230 --> 00:15:14,880
application is that we can start adding

353
00:15:11,940 --> 00:15:17,580
queries that we want to run on those

354
00:15:14,880 --> 00:15:20,370
hosts so I put the select star from USB

355
00:15:17,580 --> 00:15:23,220
devices query and that we looked at

356
00:15:20,370 --> 00:15:25,110
before and if we come back here and now

357
00:15:23,220 --> 00:15:27,900
hilariously I was going to bring a fake

358
00:15:25,110 --> 00:15:32,160
malicious USB stick and but I've lost it

359
00:15:27,900 --> 00:15:36,060
somewhere in the conference so far I've

360
00:15:32,160 --> 00:15:40,860
borrowed this USB stick from the AV

361
00:15:36,060 --> 00:15:42,300
people yeah I'm sure it's totally fine

362
00:15:40,860 --> 00:15:43,800
I'm just going to clear the log of all

363
00:15:42,300 --> 00:15:46,380
of the crap from me putting my yubikey

364
00:15:43,800 --> 00:15:48,510
and and things like that which was not

365
00:15:46,380 --> 00:15:49,890
supposed to be in there and so if I take

366
00:15:48,510 --> 00:15:52,800
this USB stick that I found in the

367
00:15:49,890 --> 00:15:54,779
parking lot and I stick it into my

368
00:15:52,800 --> 00:15:56,699
laptop that I'm using here and then I

369
00:15:54,779 --> 00:15:58,439
stole for time to get past the 10-second

370
00:15:56,700 --> 00:16:00,709
window we're always curry chicks things

371
00:15:58,440 --> 00:16:00,709
again

372
00:16:06,980 --> 00:16:11,449
you'll see that we now have a log entry

373
00:16:09,350 --> 00:16:13,639
saying a USB device was added to this

374
00:16:11,449 --> 00:16:15,979
host and that didn't take very long at

375
00:16:13,639 --> 00:16:17,269
all so in the next thirty minutes you

376
00:16:15,980 --> 00:16:18,350
could clone this code stick a thing in

377
00:16:17,269 --> 00:16:20,000
there that sends an email when this

378
00:16:18,350 --> 00:16:27,470
happens and then make your security team

379
00:16:20,000 --> 00:16:28,850
very happy so that's how you can get

380
00:16:27,470 --> 00:16:32,380
started with ours query really easy

381
00:16:28,850 --> 00:16:32,380
doing some basic stuff

382
00:16:39,410 --> 00:16:48,089
and if you want a copy of it you can

383
00:16:42,750 --> 00:16:49,920
grab it from one of these URLs so we

384
00:16:48,090 --> 00:16:53,220
have the first pillar in our house of

385
00:16:49,920 --> 00:16:56,540
patching Nirvana and we have to ask the

386
00:16:53,220 --> 00:17:00,720
next part of the question which packages

387
00:16:56,540 --> 00:17:01,860
actually have bugs in them and which

388
00:17:00,720 --> 00:17:04,350
packages that we're going to have to do

389
00:17:01,860 --> 00:17:09,120
something about and this is sort of

390
00:17:04,349 --> 00:17:10,530
where it gets less easy so we started

391
00:17:09,119 --> 00:17:13,829
looking at the official information

392
00:17:10,530 --> 00:17:15,060
sources that provide our OS vendors if

393
00:17:13,829 --> 00:17:16,770
you've been in the info SEC world for a

394
00:17:15,060 --> 00:17:19,159
while you've probably seen a variety of

395
00:17:16,770 --> 00:17:21,990
different formats for communicating

396
00:17:19,160 --> 00:17:24,380
vulnerability information such as CVE or

397
00:17:21,990 --> 00:17:24,380
oval

398
00:17:26,420 --> 00:17:30,690
ultimately the main univ currency and

399
00:17:28,680 --> 00:17:32,430
communicating security risks with a

400
00:17:30,690 --> 00:17:34,290
particular distro is usually the

401
00:17:32,430 --> 00:17:37,020
security advisory that the distro

402
00:17:34,290 --> 00:17:38,820
maintain is published the problem we'll

403
00:17:37,020 --> 00:17:40,350
studies is that if we start looking at

404
00:17:38,820 --> 00:17:44,659
what information we actually get from

405
00:17:40,350 --> 00:17:48,149
ghost people was what they give us

406
00:17:44,660 --> 00:17:50,130
things start to look bad so Fincham

407
00:17:48,150 --> 00:17:54,480
first looked at deviant his favorite

408
00:17:50,130 --> 00:17:57,270
Linux operating system and here's what

409
00:17:54,480 --> 00:17:59,040
they do provide the primary source of

410
00:17:57,270 --> 00:18:03,210
the advisory information is still in a

411
00:17:59,040 --> 00:18:05,399
human readable email and while there are

412
00:18:03,210 --> 00:18:07,080
a bunch of API is still ket none of them

413
00:18:05,400 --> 00:18:10,350
quite give all the information we need

414
00:18:07,080 --> 00:18:12,710
in a single place and the worst of all

415
00:18:10,350 --> 00:18:16,830
is the advisory team from the devian

416
00:18:12,710 --> 00:18:18,840
advisors from devian in what sorry the

417
00:18:16,830 --> 00:18:20,310
worst well advisors from devian they're

418
00:18:18,840 --> 00:18:22,290
always in terms of the source packages

419
00:18:20,310 --> 00:18:26,610
which doesn't make much sense as you

420
00:18:22,290 --> 00:18:33,800
don't install a source package so you

421
00:18:26,610 --> 00:18:33,800
can't use so you can use that too sorry

422
00:18:34,310 --> 00:18:38,010
so you can use that to reconcile which

423
00:18:36,420 --> 00:18:40,890
backers you need updating you have to

424
00:18:38,010 --> 00:18:43,260
work out which binary packages come from

425
00:18:40,890 --> 00:18:45,390
each source package and there wasn't an

426
00:18:43,260 --> 00:18:47,900
easy API for that either more on that in

427
00:18:45,390 --> 00:18:47,900
a little bit

428
00:18:49,360 --> 00:18:53,570
at least things a little bit better on

429
00:18:51,770 --> 00:18:56,180
the winter side where we just get a

430
00:18:53,570 --> 00:18:58,520
giant JSON file containing all of the

431
00:18:56,180 --> 00:19:04,910
affected visor ease in all the effective

432
00:18:58,520 --> 00:19:07,010
pictures on each advisory let's take a

433
00:19:04,910 --> 00:19:09,500
closer look at the situation with debian

434
00:19:07,010 --> 00:19:12,110
and see what the best process we've come

435
00:19:09,500 --> 00:19:15,560
up with for working out machine readable

436
00:19:12,110 --> 00:19:19,729
advisory data this is what it more or

437
00:19:15,560 --> 00:19:21,409
less looks like basically graven rdf

438
00:19:19,730 --> 00:19:23,750
file from the deviant website which we

439
00:19:21,410 --> 00:19:26,540
don't know how rdf works it's kind of

440
00:19:23,750 --> 00:19:29,510
worse XML that contains only the last 25

441
00:19:26,540 --> 00:19:32,810
advisories and only partial data things

442
00:19:29,510 --> 00:19:34,580
like truncated sentences then we take a

443
00:19:32,810 --> 00:19:37,129
full copy of the repository metadata

444
00:19:34,580 --> 00:19:39,649
from the Security repository since it

445
00:19:37,130 --> 00:19:43,610
specifies for every binary package which

446
00:19:39,650 --> 00:19:46,430
source package created it so we invert

447
00:19:43,610 --> 00:19:48,740
that mapping to produce which source

448
00:19:46,430 --> 00:19:58,370
packages create which binary packages

449
00:19:48,740 --> 00:20:00,460
and then we then we whoops the McClendon

450
00:19:58,370 --> 00:20:02,449
subversion repository that theevans

451
00:20:00,460 --> 00:20:04,820
security team uses to coordinate the

452
00:20:02,450 --> 00:20:07,460
work we pass the file with the custom

453
00:20:04,820 --> 00:20:11,810
file parser that lists the advisory

454
00:20:07,460 --> 00:20:15,160
metadata but if the advisor is not in

455
00:20:11,810 --> 00:20:17,240
the current version of the package

456
00:20:15,160 --> 00:20:19,550
instead of using the information we

457
00:20:17,240 --> 00:20:22,370
gathered back in step 4 we now have to

458
00:20:19,550 --> 00:20:27,139
go to a different API that's in a

459
00:20:22,370 --> 00:20:28,760
different format entirely and then we

460
00:20:27,140 --> 00:20:32,060
mesh all the metadata back into our

461
00:20:28,760 --> 00:20:34,220
database by comparison

462
00:20:32,060 --> 00:20:37,190
Ubuntu is a bit simpler we download a

463
00:20:34,220 --> 00:20:40,130
roughly 50 megabyte JSON file that

464
00:20:37,190 --> 00:20:42,860
contains a list of all the advisories

465
00:20:40,130 --> 00:20:45,500
and we just load in any of them that we

466
00:20:42,860 --> 00:20:47,209
haven't seen before would be great if

467
00:20:45,500 --> 00:20:48,770
devian had something similar to this but

468
00:20:47,210 --> 00:20:51,680
as far as we know it doesn't exist yet

469
00:20:48,770 --> 00:20:53,510
so think two or three that we're

470
00:20:51,680 --> 00:20:55,340
releasing today there's another django

471
00:20:53,510 --> 00:20:59,500
app that handles the job of clicking and

472
00:20:55,340 --> 00:20:59,500
pausing devian and Ubuntu advisory data

473
00:20:59,700 --> 00:21:03,690
michael has also built a basic UI to let

474
00:21:02,550 --> 00:21:07,770
you explore the data and we'll do a

475
00:21:03,690 --> 00:21:08,700
quick demo of that now yep so if anybody

476
00:21:07,770 --> 00:21:10,410
wants to play along at home

477
00:21:08,700 --> 00:21:16,530
this one's public you can jump in there

478
00:21:10,410 --> 00:21:21,150
and have a look at stuff just put this

479
00:21:16,530 --> 00:21:23,340
back into mirror mode so the URL is just

480
00:21:21,150 --> 00:21:26,220
tool stop light cotton z slash

481
00:21:23,340 --> 00:21:28,770
Advisory's slash and this is just giving

482
00:21:26,220 --> 00:21:31,170
a read-only view into the information

483
00:21:28,770 --> 00:21:35,580
that we're able to pull out of Debian

484
00:21:31,170 --> 00:21:37,050
and Ubuntu advisories you can probably

485
00:21:35,580 --> 00:21:41,179
explore this yourself it's all

486
00:21:37,050 --> 00:21:41,180
relatively straightforward how it works

487
00:21:41,780 --> 00:21:45,180
you can look at a particular advisory

488
00:21:43,980 --> 00:21:46,710
you can get all the metadata that we

489
00:21:45,180 --> 00:21:49,380
were provided with all that we were able

490
00:21:46,710 --> 00:21:51,420
to scrape up you can get a list of the

491
00:21:49,380 --> 00:21:53,040
source packages more usefully you can

492
00:21:51,420 --> 00:21:55,170
get a list of the binary packages and

493
00:21:53,040 --> 00:21:56,550
the versions and then it gives you a

494
00:21:55,170 --> 00:22:03,180
kind of optimistic command that you

495
00:21:56,550 --> 00:22:05,340
might run on the machine to fix it we

496
00:22:03,180 --> 00:22:07,410
also let you look at it in terms of CVS

497
00:22:05,340 --> 00:22:11,370
which is quite interesting you can look

498
00:22:07,410 --> 00:22:13,560
at which vendors have patched which CVS

499
00:22:11,370 --> 00:22:14,790
and in what advisories it's a little bit

500
00:22:13,560 --> 00:22:17,370
misleading it makes it look like

501
00:22:14,790 --> 00:22:19,500
debuting are overachievers but in fact

502
00:22:17,370 --> 00:22:22,820
upon to don't issue advisors for nearly

503
00:22:19,500 --> 00:22:22,820
as many things as Debian does

504
00:22:33,820 --> 00:22:38,540
so that's available at this URL if

505
00:22:37,190 --> 00:22:41,600
anybody wants to have a look at it they

506
00:22:38,540 --> 00:22:45,070
can or even better go get the source

507
00:22:41,600 --> 00:22:45,070
code download it install it yourself

508
00:22:45,520 --> 00:22:52,160
which brings us to pillar number three

509
00:22:49,100 --> 00:22:54,649
on our house of patching nirvana how do

510
00:22:52,160 --> 00:22:56,630
we actually compute the intersection of

511
00:22:54,650 --> 00:22:58,850
the two pieces of information that we've

512
00:22:56,630 --> 00:23:01,400
just showed you and how do we present

513
00:22:58,850 --> 00:23:05,840
that to someone in a way that's actually

514
00:23:01,400 --> 00:23:09,260
useful to them so I had a bit of a go at

515
00:23:05,840 --> 00:23:12,260
this unsurprisingly once you run the

516
00:23:09,260 --> 00:23:14,330
numbers the performance is not that

517
00:23:12,260 --> 00:23:16,730
great if you've got say three thousand

518
00:23:14,330 --> 00:23:19,610
hosts and maybe 600 to 800 packages on

519
00:23:16,730 --> 00:23:24,590
each one trying to calculate the

520
00:23:19,610 --> 00:23:26,149
intersection of that data and the

521
00:23:24,590 --> 00:23:28,070
packages that are listed in a particular

522
00:23:26,150 --> 00:23:30,020
advisory which might be say 20 packages

523
00:23:28,070 --> 00:23:32,570
it's actually kind of time consuming

524
00:23:30,020 --> 00:23:35,420
it's way too slow to do during page

525
00:23:32,570 --> 00:23:36,970
rendering in a web application and it

526
00:23:35,420 --> 00:23:39,380
gets worse as you scale it up

527
00:23:36,970 --> 00:23:41,270
interestingly if you look at Canonical's

528
00:23:39,380 --> 00:23:44,270
blog they ran into the exact same

529
00:23:41,270 --> 00:23:45,860
problem in 2015 with landscape canonical

530
00:23:44,270 --> 00:23:48,170
has a really complicated solution to

531
00:23:45,860 --> 00:23:51,169
this involving go and compilers and

532
00:23:48,170 --> 00:23:54,230
optimizations we did a much much simpler

533
00:23:51,170 --> 00:23:55,550
thing we spent a lot of time messing

534
00:23:54,230 --> 00:23:57,260
around trying to implement caching

535
00:23:55,550 --> 00:23:59,060
layers and all kinds of complicated

536
00:23:57,260 --> 00:24:00,680
things but ultimately you can't get past

537
00:23:59,060 --> 00:24:05,060
the fact that it's just sort of a slow

538
00:24:00,680 --> 00:24:07,310
process the solution we came up was with

539
00:24:05,060 --> 00:24:09,950
pretty simple really when new

540
00:24:07,310 --> 00:24:11,659
information comes in at import time and

541
00:24:09,950 --> 00:24:15,230
we new advisory or when a package gets

542
00:24:11,660 --> 00:24:17,270
updated on a host we just check in store

543
00:24:15,230 --> 00:24:17,660
if it has any problems associated with

544
00:24:17,270 --> 00:24:19,910
it

545
00:24:17,660 --> 00:24:24,200
this happens in the background during

546
00:24:19,910 --> 00:24:31,840
the import so when a page loads it just

547
00:24:24,200 --> 00:24:33,770
has to do a simple lookup next we have

548
00:24:31,840 --> 00:24:35,740
next step once we have the database

549
00:24:33,770 --> 00:24:41,500
table

550
00:24:35,740 --> 00:24:41,500
what I do oh sure I did a bad thing

551
00:25:00,780 --> 00:25:05,160
it's how we actually present the data

552
00:25:02,580 --> 00:25:06,899
and a useful format this is something

553
00:25:05,160 --> 00:25:08,850
we're still actively working on we've

554
00:25:06,900 --> 00:25:10,230
tried a few different experiments and

555
00:25:08,850 --> 00:25:13,649
spent some time working with the people

556
00:25:10,230 --> 00:25:17,400
that use it and gotten feedback from

557
00:25:13,650 --> 00:25:19,200
them one of the main things that it's

558
00:25:17,400 --> 00:25:21,330
come that has come out of that is

559
00:25:19,200 --> 00:25:22,950
actually the UI is quite specific to our

560
00:25:21,330 --> 00:25:27,720
environment and catalyst where the tool

561
00:25:22,950 --> 00:25:29,340
is used one of the other big things that

562
00:25:27,720 --> 00:25:31,500
we've also learned from this process is

563
00:25:29,340 --> 00:25:33,659
that you really have to try and collapse

564
00:25:31,500 --> 00:25:35,190
down the number of different patching

565
00:25:33,660 --> 00:25:38,400
policies that you have across your

566
00:25:35,190 --> 00:25:39,960
environment if you've got like 200

567
00:25:38,400 --> 00:25:42,150
different ways that a thing gets patched

568
00:25:39,960 --> 00:25:44,220
it's a lot more complicated to try and

569
00:25:42,150 --> 00:25:45,810
rectify in a machine-readable way

570
00:25:44,220 --> 00:25:48,030
whether that policy is actually being

571
00:25:45,810 --> 00:25:50,220
adhered to so one of the things that

572
00:25:48,030 --> 00:25:52,290
we're trying to do is say ok we'll have

573
00:25:50,220 --> 00:25:55,050
a machine-readable expression for the

574
00:25:52,290 --> 00:25:57,570
patching policies themselves and we'll

575
00:25:55,050 --> 00:25:59,730
have fewer of them that way you can kind

576
00:25:57,570 --> 00:26:03,470
of automatically evaluate a pass or fail

577
00:25:59,730 --> 00:26:05,970
on a particular host or group of hosts

578
00:26:03,470 --> 00:26:08,400
the internal name at catalyst for this

579
00:26:05,970 --> 00:26:09,780
project has been patch friend and it's

580
00:26:08,400 --> 00:26:11,910
the kind of place that we're doing the

581
00:26:09,780 --> 00:26:13,830
UI development and stuff that's really

582
00:26:11,910 --> 00:26:15,210
specific to headless

583
00:26:13,830 --> 00:26:16,770
we're not going to be releasing the code

584
00:26:15,210 --> 00:26:18,480
for that today because as Phillips said

585
00:26:16,770 --> 00:26:20,580
it's kind of weirdly specific to the way

586
00:26:18,480 --> 00:26:22,320
we do things now but we did make some

587
00:26:20,580 --> 00:26:24,480
screenshots so we'll kind of take you

588
00:26:22,320 --> 00:26:26,429
through some of the ways that we're

589
00:26:24,480 --> 00:26:29,940
trying to present the information to

590
00:26:26,430 --> 00:26:33,960
make it useful so there's the Advisory

591
00:26:29,940 --> 00:26:37,050
ListView it's got as you can see its

592
00:26:33,960 --> 00:26:41,360
upstream ID a short one-line description

593
00:26:37,050 --> 00:26:46,649
which even isn't particularly avoid with

594
00:26:41,360 --> 00:26:49,110
the OS list of source packages and when

595
00:26:46,650 --> 00:26:52,980
it was issued and a progress spa which

596
00:26:49,110 --> 00:26:54,540
shows a list of posts how many hosts

597
00:26:52,980 --> 00:26:56,780
haven't been patched yet versus how many

598
00:26:54,540 --> 00:26:59,909
have been patched which is useful for

599
00:26:56,780 --> 00:27:02,129
working out how long will it take to fix

600
00:26:59,910 --> 00:27:03,510
in a visor e the pet the progress bar

601
00:27:02,130 --> 00:27:04,710
things great it's like game of flying

602
00:27:03,510 --> 00:27:06,270
patching you just try and get the

603
00:27:04,710 --> 00:27:09,330
progress bar to go across as quickly as

604
00:27:06,270 --> 00:27:12,580
possible and you know you're secure this

605
00:27:09,330 --> 00:27:15,099
is an advisor do v4 devian which

606
00:27:12,580 --> 00:27:19,629
it's pretty similar to advisory feeds I

607
00:27:15,099 --> 00:27:22,269
think it's got description progress the

608
00:27:19,629 --> 00:27:26,708
source packages very pictures update

609
00:27:22,269 --> 00:27:28,299
commander same thing yep and we would

610
00:27:26,709 --> 00:27:31,559
normally list the affected hostess down

611
00:27:28,299 --> 00:27:31,559
the bottom but you don't get to see that

612
00:27:31,979 --> 00:27:35,679
by comparison

613
00:27:33,519 --> 00:27:38,830
Ubuntu is very similar it's got more

614
00:27:35,679 --> 00:27:42,039
detailed description and required action

615
00:27:38,830 --> 00:27:47,158
after you upgrade all the packages such

616
00:27:42,039 --> 00:27:51,700
as rebooting the system here's the

617
00:27:47,159 --> 00:27:53,139
detail view for close list so this lets

618
00:27:51,700 --> 00:27:55,899
us filter all the hosts that are in our

619
00:27:53,139 --> 00:27:57,399
environment by a particular customer or

620
00:27:55,899 --> 00:27:59,738
a particular other attribute of the

621
00:27:57,399 --> 00:28:01,449
machine this is pretty handy because you

622
00:27:59,739 --> 00:28:03,039
can get a real quick look at whether

623
00:28:01,450 --> 00:28:04,359
they're any machines that have you know

624
00:28:03,039 --> 00:28:07,509
outstanding patches that needs to be

625
00:28:04,359 --> 00:28:11,109
applied and also how many packages have

626
00:28:07,509 --> 00:28:13,119
actually been fixed on that machine and

627
00:28:11,109 --> 00:28:14,769
so this is the kind of host detail view

628
00:28:13,119 --> 00:28:15,218
which has turned out to be really useful

629
00:28:14,769 --> 00:28:18,129
as well

630
00:28:15,219 --> 00:28:20,799
it gives us an overview of patches that

631
00:28:18,129 --> 00:28:22,559
are pending on the host but perhaps more

632
00:28:20,799 --> 00:28:25,570
interestingly it actually gives us

633
00:28:22,559 --> 00:28:27,729
real-time log of wind things worth fixed

634
00:28:25,570 --> 00:28:30,579
and this is really great when you have

635
00:28:27,729 --> 00:28:32,709
situations like Drupal vulnerability

636
00:28:30,579 --> 00:28:34,418
where we know that the vulnerability was

637
00:28:32,709 --> 00:28:35,679
issued at this time and then 12 hours

638
00:28:34,419 --> 00:28:37,269
later someone scanned the entire

639
00:28:35,679 --> 00:28:40,059
internet and point every single Drupal

640
00:28:37,269 --> 00:28:42,489
instance it lets us go and say well did

641
00:28:40,059 --> 00:28:45,519
we fix it before that happened and

642
00:28:42,489 --> 00:28:48,309
that's been really valuable so we're not

643
00:28:45,519 --> 00:28:50,979
releasing the code for it but we are

644
00:28:48,309 --> 00:28:54,339
releasing a thing that resembles patch

645
00:28:50,979 --> 00:28:57,639
friend so this is a kind of evolution of

646
00:28:54,339 --> 00:28:59,229
the stuff that I presented at icig it's

647
00:28:57,639 --> 00:29:00,998
got the last six months with the good

648
00:28:59,229 --> 00:29:03,309
work that Philips done rolled back into

649
00:29:00,999 --> 00:29:05,200
it and it gives you the base where you

650
00:29:03,309 --> 00:29:07,749
could start to build a thing like patch

651
00:29:05,200 --> 00:29:09,729
friend for your own environment

652
00:29:07,749 --> 00:29:12,159
and that's the final piece of code that

653
00:29:09,729 --> 00:29:14,349
we're going to be releasing today so I'm

654
00:29:12,159 --> 00:29:15,669
now going to try and do a full demo of

655
00:29:14,349 --> 00:29:19,139
all of the stuff that we've talked about

656
00:29:15,669 --> 00:29:22,960
the real-time host instrumentation the

657
00:29:19,139 --> 00:29:25,209
Advisory pausing advisory metadata

658
00:29:22,960 --> 00:29:37,330
pausing and then the reporting

659
00:29:25,210 --> 00:29:39,280
in real-time so let's have a go so here

660
00:29:37,330 --> 00:29:40,629
I'm logged into one of my actual

661
00:29:39,280 --> 00:29:41,980
production machines that are on the

662
00:29:40,630 --> 00:29:43,840
Internet

663
00:29:41,980 --> 00:29:46,360
this machine is currently fully patched

664
00:29:43,840 --> 00:29:48,820
up but you'll see that sitting in my

665
00:29:46,360 --> 00:29:51,639
home directory here I've got a get

666
00:29:48,820 --> 00:29:53,230
package from three months ago there

667
00:29:51,640 --> 00:29:55,600
subsequently been an advisory issued

668
00:29:53,230 --> 00:29:57,640
about git so this is an unsafe get

669
00:29:55,600 --> 00:30:04,810
package and it would be very dangerous

670
00:29:57,640 --> 00:30:06,160
for me to do this now you'll see the D

671
00:30:04,810 --> 00:30:08,889
package there warns me that I'm actually

672
00:30:06,160 --> 00:30:10,960
downgrading the get package don't worry

673
00:30:08,890 --> 00:30:14,170
this is actually a super harmless bug

674
00:30:10,960 --> 00:30:23,730
and yet it's like a code execution or

675
00:30:14,170 --> 00:30:25,840
something cool so we can see now that

676
00:30:23,730 --> 00:30:27,820
the version of the get package that's

677
00:30:25,840 --> 00:30:30,280
installed on the system is now out of

678
00:30:27,820 --> 00:30:32,679
step with all the other get stuff that's

679
00:30:30,280 --> 00:30:36,670
on here which means we have successfully

680
00:30:32,680 --> 00:30:39,450
downgraded it if we jump over into the

681
00:30:36,670 --> 00:30:43,210
application that we're releasing today

682
00:30:39,450 --> 00:30:45,820
and we come into the hosts view we can

683
00:30:43,210 --> 00:30:47,860
see that a KL B is the host that we were

684
00:30:45,820 --> 00:30:49,149
on we can see it's a live thank goodness

685
00:30:47,860 --> 00:30:51,850
which means always query is still

686
00:30:49,150 --> 00:30:55,390
running and uploading stuff into the

687
00:30:51,850 --> 00:30:57,310
environment and now hopefully if we go

688
00:30:55,390 --> 00:30:58,300
into this problems table we'll see that

689
00:30:57,310 --> 00:31:00,970
we have a new problem

690
00:30:58,300 --> 00:31:04,600
now in our environment which is that on

691
00:31:00,970 --> 00:31:07,750
host a KL B according to advisor EDSA 3

692
00:31:04,600 --> 00:31:11,290
9 8 4-1 the get package at this version

693
00:31:07,750 --> 00:31:13,300
is not safe to have installed anymore so

694
00:31:11,290 --> 00:31:14,980
along comes our people who do the

695
00:31:13,300 --> 00:31:18,129
patching in our environment which is me

696
00:31:14,980 --> 00:31:18,790
and we say oh there's something wrong

697
00:31:18,130 --> 00:31:22,420
with this machine

698
00:31:18,790 --> 00:31:26,129
we'd better quickly do inept just

699
00:31:22,420 --> 00:31:26,130
upgrade to bring it up to the latest

700
00:31:26,840 --> 00:31:31,360
so it's noticed that the get package is

701
00:31:29,000 --> 00:31:31,360
out of date

702
00:31:37,220 --> 00:31:45,000
we pull in vision df9 you to ignore the

703
00:31:41,850 --> 00:31:46,590
service restock that's not relevant come

704
00:31:45,000 --> 00:31:48,030
back in here you can see that now Deb

705
00:31:46,590 --> 00:31:49,770
nine you to is install which matches

706
00:31:48,030 --> 00:31:51,600
along with the other wrist of the get

707
00:31:49,770 --> 00:31:52,980
stuff we stole four time a little bit

708
00:31:51,600 --> 00:31:54,510
more to give always carry a bit of a

709
00:31:52,980 --> 00:31:58,140
chance to actually notice there and

710
00:31:54,510 --> 00:32:01,280
upload it to the server and then when we

711
00:31:58,140 --> 00:32:04,940
come back into our demo environment

712
00:32:01,280 --> 00:32:07,260
you'll see that the problem is now fixed

713
00:32:04,940 --> 00:32:08,190
so that's combining all of the pieces of

714
00:32:07,260 --> 00:32:11,640
the information that we've showed you

715
00:32:08,190 --> 00:32:13,320
today and this code is now available on

716
00:32:11,640 --> 00:32:14,730
our website for you to download and

717
00:32:13,320 --> 00:32:16,970
start to build other interesting things

718
00:32:14,730 --> 00:32:16,970
with

719
00:32:24,309 --> 00:32:35,749
wait I didn't put the stick in presenter

720
00:32:26,659 --> 00:32:39,950
mode and here's where you can get a copy

721
00:32:35,749 --> 00:32:41,690
from so where to next we want to try and

722
00:32:39,950 --> 00:32:43,219
compute some useful metrics about stuff

723
00:32:41,690 --> 00:32:44,719
there's all kinds of exciting numbers

724
00:32:43,219 --> 00:32:47,509
that you can start to pull out of this

725
00:32:44,719 --> 00:32:49,789
once you have the information kind of in

726
00:32:47,509 --> 00:32:51,979
a machine-readable form we want to know

727
00:32:49,789 --> 00:32:54,259
about things like the burn rate for bugs

728
00:32:51,979 --> 00:32:55,820
we want to be able to say what's the

729
00:32:54,259 --> 00:32:57,379
vulnerability that currently has the

730
00:32:55,820 --> 00:32:59,629
biggest impact across these several

731
00:32:57,379 --> 00:33:01,488
thousand machines we want to know what's

732
00:32:59,629 --> 00:33:04,158
our average time to fix a problem are we

733
00:33:01,489 --> 00:33:05,899
doing it quickly enough what package has

734
00:33:04,159 --> 00:33:08,989
had the most advisories issued for it

735
00:33:05,899 --> 00:33:10,789
it's the Linux kernel that kind of stuff

736
00:33:08,989 --> 00:33:13,009
if you actually go and look at that code

737
00:33:10,789 --> 00:33:14,719
you'll see that we haven't packaged it

738
00:33:13,009 --> 00:33:17,629
very well well I haven't packaged it

739
00:33:14,719 --> 00:33:19,759
very well so we kind of need to improve

740
00:33:17,629 --> 00:33:22,968
the code packaging we're trying to split

741
00:33:19,759 --> 00:33:24,649
out the various parts of this so make

742
00:33:22,969 --> 00:33:25,669
them a bit more reusable that's

743
00:33:24,649 --> 00:33:28,099
something that we're going to be working

744
00:33:25,669 --> 00:33:30,830
on and we want to try adding more

745
00:33:28,099 --> 00:33:32,960
distros but unsurprisingly basically all

746
00:33:30,830 --> 00:33:36,049
the other distros are not on the machine

747
00:33:32,960 --> 00:33:37,940
readable advisory bandwagon yet either I

748
00:33:36,049 --> 00:33:39,649
think we're going to have a go arch next

749
00:33:37,940 --> 00:33:42,259
and of course there are always more bugs

750
00:33:39,649 --> 00:33:45,649
in each cases to be fixed so that's how

751
00:33:42,259 --> 00:33:47,690
talk thanks for sitting through it do we

752
00:33:45,649 --> 00:33:50,889
have time to take questions scootch all

753
00:33:47,690 --> 00:33:50,889
right so any questions

754
00:33:53,030 --> 00:33:58,100
Thank You Bryan

755
00:34:02,850 --> 00:34:07,230
it sounds like a good idea yes Oh Oh a

756
00:34:05,640 --> 00:34:09,330
screw he's written in C and it runs his

757
00:34:07,230 --> 00:34:12,810
route so run it under a farmer or

758
00:34:09,330 --> 00:34:14,730
SELinux or anything it you don't

759
00:34:12,810 --> 00:34:16,469
actually have to run it this route but

760
00:34:14,730 --> 00:34:19,370
more of the cool stuff that it does

761
00:34:16,469 --> 00:34:19,370
needs route so

762
00:34:28,239 --> 00:34:35,189
yeah let me just show get back to the

763
00:34:30,310 --> 00:34:38,918
one slide we have on this so basically

764
00:34:35,190 --> 00:34:41,230
the daemon that we've written is just a

765
00:34:38,918 --> 00:34:44,290
django apps it has three URLs that it

766
00:34:41,230 --> 00:34:45,909
implements OS curry hits two of them at

767
00:34:44,290 --> 00:34:47,980
startup time to get its configuration

768
00:34:45,909 --> 00:34:48,429
and to enroll itself and then it just

769
00:34:47,980 --> 00:34:50,230
pings

770
00:34:48,429 --> 00:34:52,570
a single URL every time it notices

771
00:34:50,230 --> 00:34:54,250
something interesting to report we've

772
00:34:52,570 --> 00:34:56,260
also got it set up here to just ping us

773
00:34:54,250 --> 00:34:58,510
once every 60 seconds as well so we know

774
00:34:56,260 --> 00:35:00,580
they're known survive but yeah it's just

775
00:34:58,510 --> 00:35:02,440
an it's just a single HTTP outbound

776
00:35:00,580 --> 00:35:04,770
connection from always query into the

777
00:35:02,440 --> 00:35:04,770
controller

778
00:35:11,980 --> 00:35:14,980
hmm

779
00:35:17,070 --> 00:35:21,060
yes so it would be nice if patch friends

780
00:35:19,560 --> 00:35:23,609
not only knew about all the problems but

781
00:35:21,060 --> 00:35:26,880
also solved them for us as well

782
00:35:23,609 --> 00:35:29,490
so no that's a thing you could do in our

783
00:35:26,880 --> 00:35:31,050
environment it's it tends to be a whole

784
00:35:29,490 --> 00:35:32,160
there's a whole like approval process

785
00:35:31,050 --> 00:35:34,410
that you have to go through for every

786
00:35:32,160 --> 00:35:37,710
new package and so we couldn't really do

787
00:35:34,410 --> 00:35:40,290
that I I would love if there was just

788
00:35:37,710 --> 00:35:41,930
like a press button soft problem to be

789
00:35:40,290 --> 00:35:45,029
honest if you've got any kind of

790
00:35:41,930 --> 00:35:47,460
orchestration framework you can do that

791
00:35:45,030 --> 00:35:50,070
os query is nice and that it is very

792
00:35:47,460 --> 00:35:51,930
avowedly read-only you can't easily make

793
00:35:50,070 --> 00:35:54,000
the OS query daemon do stuff to the

794
00:35:51,930 --> 00:35:55,410
machine which is good for a security

795
00:35:54,000 --> 00:35:58,400
tool but it does mean you have to do

796
00:35:55,410 --> 00:35:58,399
that out-of-band

797
00:36:28,190 --> 00:36:32,660
I think it's definitely useful in an

798
00:36:31,069 --> 00:36:35,029
environment where you do have

799
00:36:32,660 --> 00:36:37,279
restrictions on your patching process so

800
00:36:35,030 --> 00:36:39,170
most of those policies are driven by our

801
00:36:37,280 --> 00:36:40,550
customers because they've got a you know

802
00:36:39,170 --> 00:36:42,140
staging environment and a UAT

803
00:36:40,550 --> 00:36:44,210
environment and a patch has to kind of

804
00:36:42,140 --> 00:36:46,490
make its way through those to make sure

805
00:36:44,210 --> 00:36:47,900
it's compatible with the application I

806
00:36:46,490 --> 00:36:50,270
definitely think this tool is still

807
00:36:47,900 --> 00:36:53,000
useful in other environments just as a

808
00:36:50,270 --> 00:36:54,770
kind of backstop because I don't know if

809
00:36:53,000 --> 00:36:56,589
you've run unattended upgrades on a

810
00:36:54,770 --> 00:36:59,660
large number of boxes but it's

811
00:36:56,589 --> 00:37:01,400
surprisingly unreliable it like it just

812
00:36:59,660 --> 00:37:03,170
decides that oh the packages got into a

813
00:37:01,400 --> 00:37:05,450
state that we can't deal with give up

814
00:37:03,170 --> 00:37:07,250
this host and never update it again

815
00:37:05,450 --> 00:37:08,720
and so it's still pretty useful to have

816
00:37:07,250 --> 00:37:10,400
as a kind of backstop even if you don't

817
00:37:08,720 --> 00:37:16,819
use it as part of your kind of patching

818
00:37:10,400 --> 00:37:18,710
driving process all right if anyone has

819
00:37:16,819 --> 00:37:20,870
any more questions just come harass us

820
00:37:18,710 --> 00:37:27,050
later I guess but thank you

821
00:37:20,870 --> 00:37:27,049
[Applause]

