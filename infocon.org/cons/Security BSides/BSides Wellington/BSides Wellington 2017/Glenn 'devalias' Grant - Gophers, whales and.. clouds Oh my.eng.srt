1
00:00:05,000 --> 00:00:11,020
cool so I'm here today to talk to you

2
00:00:08,000 --> 00:00:13,430
about Gophers whales and clouds and

3
00:00:11,020 --> 00:00:15,260
hopefully some things that I played

4
00:00:13,430 --> 00:00:18,380
around with and maybe improve my

5
00:00:15,260 --> 00:00:21,380
efficiency a little bit so first of all

6
00:00:18,380 --> 00:00:23,090
my name is Glen or dibelius you might

7
00:00:21,380 --> 00:00:25,910
have seen me on Twitter spamming out

8
00:00:23,090 --> 00:00:28,730
everybody else's talks today I'm a

9
00:00:25,910 --> 00:00:31,460
penetration tester at TSS and also

10
00:00:28,730 --> 00:00:33,170
polyglot developer and I get up to a

11
00:00:31,460 --> 00:00:35,570
couple of other things when I'm not

12
00:00:33,170 --> 00:00:39,140
using computers including drinking

13
00:00:35,570 --> 00:00:41,240
butter in my coffee so I wanted to start

14
00:00:39,140 --> 00:00:43,370
off by talking about a few trends and

15
00:00:41,240 --> 00:00:45,290
buzzwords that I've noticed across the

16
00:00:43,370 --> 00:00:48,230
industry and random blog posts that I

17
00:00:45,290 --> 00:00:49,970
read now I was gonna go into lots of

18
00:00:48,230 --> 00:00:52,489
stats and why you should care about

19
00:00:49,970 --> 00:00:54,620
these things and that kind of stuff but

20
00:00:52,490 --> 00:00:55,340
if you really want that it's already on

21
00:00:54,620 --> 00:00:57,589
the Internet

22
00:00:55,340 --> 00:00:59,330
so instead I'm gonna talk to you about

23
00:00:57,590 --> 00:01:01,040
just a couple of things that caught my

24
00:00:59,330 --> 00:01:01,790
interest and I wanted to play around

25
00:01:01,040 --> 00:01:05,780
with more

26
00:01:01,790 --> 00:01:06,890
so first up docker now if you haven't

27
00:01:05,780 --> 00:01:09,620
heard of this before you've probably

28
00:01:06,890 --> 00:01:11,570
been living under a rock but it's a

29
00:01:09,620 --> 00:01:14,450
lightweight container virtualization

30
00:01:11,570 --> 00:01:16,910
system so it doesn't have the same kind

31
00:01:14,450 --> 00:01:19,490
of isolation that you'd get from vm's

32
00:01:16,910 --> 00:01:22,158
but it also uses far less resources on

33
00:01:19,490 --> 00:01:24,229
your system to run it it does share the

34
00:01:22,159 --> 00:01:26,000
kernel with your computer so if you get

35
00:01:24,230 --> 00:01:28,190
owned in the container then you're

36
00:01:26,000 --> 00:01:32,090
probably going to get owned anyway but

37
00:01:28,190 --> 00:01:34,520
for my users that's not so important it

38
00:01:32,090 --> 00:01:36,110
takes a base operating system image and

39
00:01:34,520 --> 00:01:38,119
if you use something like Alpine that

40
00:01:36,110 --> 00:01:40,430
could be as small as five megabytes and

41
00:01:38,120 --> 00:01:42,620
then each program you install adds a new

42
00:01:40,430 --> 00:01:44,450
layer on top which can be shared among

43
00:01:42,620 --> 00:01:46,190
all your containers so it really does

44
00:01:44,450 --> 00:01:49,850
that kind of efficiency thing that I

45
00:01:46,190 --> 00:01:52,340
like so the default type people use it

46
00:01:49,850 --> 00:01:55,880
for having kind of their build systems

47
00:01:52,340 --> 00:01:57,979
all wrapped up nicely sharing like

48
00:01:55,880 --> 00:01:59,929
clustering their data and production and

49
00:01:57,979 --> 00:02:01,850
keeping environments the same throughout

50
00:01:59,930 --> 00:02:05,030
their build so that the soft way they

51
00:02:01,850 --> 00:02:07,610
build actually runs to me it's more

52
00:02:05,030 --> 00:02:10,038
about having my tool kit available in a

53
00:02:07,610 --> 00:02:11,930
way that any books I run it on I just

54
00:02:10,038 --> 00:02:14,268
know it's there and it can clean up

55
00:02:11,930 --> 00:02:16,040
after itself when I'm done so not

56
00:02:14,269 --> 00:02:17,440
cluttering it up with any dependencies

57
00:02:16,040 --> 00:02:20,420
or things like

58
00:02:17,440 --> 00:02:22,340
the next thing that I kind of like the

59
00:02:20,420 --> 00:02:25,579
idea of and seems to be pretty popular

60
00:02:22,340 --> 00:02:28,340
these days is service and functions as a

61
00:02:25,580 --> 00:02:30,319
service so if you haven't heard about it

62
00:02:28,340 --> 00:02:32,330
before service is kind of like this

63
00:02:30,319 --> 00:02:34,790
concept of throw it up in the cloud and

64
00:02:32,330 --> 00:02:38,090
make it somebody else's problem taken to

65
00:02:34,790 --> 00:02:40,790
the extreme so the first thing is it's

66
00:02:38,090 --> 00:02:44,660
really cheap a couple of fractions of a

67
00:02:40,790 --> 00:02:46,640
cent to run a function on this and if

68
00:02:44,660 --> 00:02:48,530
you're not actually running code on it

69
00:02:46,640 --> 00:02:51,018
at the time you're not paying well it

70
00:02:48,530 --> 00:02:53,090
sits there idle if you want it to scale

71
00:02:51,019 --> 00:02:55,760
out you just hit it with more workloads

72
00:02:53,090 --> 00:02:59,180
and magic happens and your service stays

73
00:02:55,760 --> 00:03:01,819
online at least so goes the theory so

74
00:02:59,180 --> 00:03:04,160
functions as a service is one of these

75
00:03:01,819 --> 00:03:06,079
service design patterns we sort of take

76
00:03:04,160 --> 00:03:08,359
a traditional monolithic application

77
00:03:06,080 --> 00:03:10,190
break it down into a series of micro

78
00:03:08,360 --> 00:03:12,200
services and then pull out all the

79
00:03:10,190 --> 00:03:14,870
functions that you use to build them and

80
00:03:12,200 --> 00:03:16,579
make them their own thing and what this

81
00:03:14,870 --> 00:03:18,200
allows you to do is you get these tiny

82
00:03:16,580 --> 00:03:20,599
bits of code that are really easy to

83
00:03:18,200 --> 00:03:22,280
understand and modular and you can kind

84
00:03:20,599 --> 00:03:23,810
of update them without hopefully

85
00:03:22,280 --> 00:03:26,930
breaking the other areas of your

86
00:03:23,810 --> 00:03:28,600
application so you may have heard of

87
00:03:26,930 --> 00:03:31,519
some of these service things before

88
00:03:28,600 --> 00:03:34,220
Amazon's got lambda Google's got their

89
00:03:31,519 --> 00:03:37,310
cloud functions a Zilla also has cloud

90
00:03:34,220 --> 00:03:38,930
functions because they're not Amazon and

91
00:03:37,310 --> 00:03:43,790
they actually know how to name things

92
00:03:38,930 --> 00:03:45,440
and this is a chart that came from a

93
00:03:43,790 --> 00:03:47,959
blog I was reading earlier in the year

94
00:03:45,440 --> 00:03:49,069
and it just shows a pile of different

95
00:03:47,959 --> 00:03:51,319
things that are happening in this

96
00:03:49,069 --> 00:03:52,880
function there's a server space so

97
00:03:51,319 --> 00:03:56,060
there's quite a lot going on at the

98
00:03:52,880 --> 00:03:58,549
moment the next thing that I really like

99
00:03:56,060 --> 00:03:59,930
the idea of is going and it's not just

100
00:03:58,549 --> 00:04:03,260
because they have probably the cutest

101
00:03:59,930 --> 00:04:05,030
logo though that is part of it so this

102
00:04:03,260 --> 00:04:07,700
is a programming language that came out

103
00:04:05,030 --> 00:04:10,100
of Google in around 2009 and it's kind

104
00:04:07,700 --> 00:04:11,388
of got a bit of a cska feel to it but

105
00:04:10,100 --> 00:04:14,690
without all of those annoying things

106
00:04:11,389 --> 00:04:16,519
like pointer arithmetic or managing my

107
00:04:14,690 --> 00:04:19,910
own memory or any of that stuff that

108
00:04:16,519 --> 00:04:22,130
just has no place in 2017 so it's

109
00:04:19,910 --> 00:04:22,940
compiled it runs cross-platform which is

110
00:04:22,130 --> 00:04:25,550
really nice

111
00:04:22,940 --> 00:04:28,789
static typing because there's dynamic

112
00:04:25,550 --> 00:04:31,069
runtimes it just give me some typing on

113
00:04:28,789 --> 00:04:33,500
my variables please

114
00:04:31,069 --> 00:04:35,960
memory safe and it's really good at

115
00:04:33,500 --> 00:04:37,789
concurrency so none of this playing

116
00:04:35,960 --> 00:04:39,940
around with managing all your threads

117
00:04:37,789 --> 00:04:42,229
and locking it just kind of works

118
00:04:39,940 --> 00:04:44,690
unfortunately it's not a functional

119
00:04:42,229 --> 00:04:47,930
programming language so I do have a bit

120
00:04:44,690 --> 00:04:49,610
of love in my heart for Scala but unlike

121
00:04:47,930 --> 00:04:52,069
Scala it doesn't have a heavyweight

122
00:04:49,610 --> 00:04:55,099
interpreter on that it needs to run on

123
00:04:52,069 --> 00:04:56,750
so that's pretty good it's growing fast

124
00:04:55,099 --> 00:04:59,889
there's a lot of library support out

125
00:04:56,750 --> 00:05:03,590
there and most of all it's kind of fun

126
00:04:59,889 --> 00:05:05,990
so where this all started I was hanging

127
00:05:03,590 --> 00:05:08,388
out back at Canberra in Australia and

128
00:05:05,990 --> 00:05:10,280
talking to a friend and he sort of

129
00:05:08,389 --> 00:05:13,159
convinced me that I should come indoor

130
00:05:10,280 --> 00:05:15,590
talk at a local meetup so I was sitting

131
00:05:13,159 --> 00:05:19,270
there playing around with ideas and I

132
00:05:15,590 --> 00:05:22,400
just said yeah alright let's do it so I

133
00:05:19,270 --> 00:05:23,960
wanted to know like what could I spend

134
00:05:22,400 --> 00:05:27,080
my time on that people might be

135
00:05:23,960 --> 00:05:30,020
interested in hearing about and I

136
00:05:27,080 --> 00:05:32,300
started off with a tool that I was

137
00:05:30,020 --> 00:05:35,479
already kind of familiar with but takes

138
00:05:32,300 --> 00:05:37,969
a bit too long to run in my opinion so

139
00:05:35,479 --> 00:05:40,639
if you haven't heard of it go Buster is

140
00:05:37,969 --> 00:05:43,219
a directory in DNS brute-forcing tool

141
00:05:40,639 --> 00:05:45,169
and basically just allows you to take

142
00:05:43,219 --> 00:05:47,930
giant word lists and just smash them up

143
00:05:45,169 --> 00:05:50,120
against things really quickly but if

144
00:05:47,930 --> 00:05:52,639
you've got a huge word list then it's

145
00:05:50,120 --> 00:05:54,949
probably going to take a while so I

146
00:05:52,639 --> 00:05:58,340
thought why don't we take this and run

147
00:05:54,949 --> 00:06:00,800
it in lambda we get that fun service

148
00:05:58,340 --> 00:06:02,840
aspect and maybe we could divide up that

149
00:06:00,800 --> 00:06:06,050
word list and kind of run it in parallel

150
00:06:02,840 --> 00:06:08,359
or something like that so lambda

151
00:06:06,050 --> 00:06:11,690
natively doesn't support go which is

152
00:06:08,360 --> 00:06:13,880
kind of annoying but on you can use one

153
00:06:11,690 --> 00:06:15,469
of their supported languages to wrap

154
00:06:13,880 --> 00:06:18,039
around it and just run the binary

155
00:06:15,469 --> 00:06:20,150
directly so you can make it work

156
00:06:18,039 --> 00:06:22,250
hopefully they'll support it at some

157
00:06:20,150 --> 00:06:24,250
point but in the meantime there's a lot

158
00:06:22,250 --> 00:06:27,800
of projects out there that can help us

159
00:06:24,250 --> 00:06:29,659
one of those projects is apex and it's

160
00:06:27,800 --> 00:06:32,779
kind of just a little command-line tool

161
00:06:29,659 --> 00:06:34,819
that allows you to easily compile deploy

162
00:06:32,779 --> 00:06:38,539
and then invoke these lambda functions

163
00:06:34,819 --> 00:06:41,479
and it's supported go so the plan was

164
00:06:38,539 --> 00:06:43,260
basically do-- busting is too slow so

165
00:06:41,479 --> 00:06:44,820
we'll cut up the word list

166
00:06:43,260 --> 00:06:46,740
send it up to the cloud run it in

167
00:06:44,820 --> 00:06:48,930
parallel some kind of black magic

168
00:06:46,740 --> 00:06:51,090
happens here I'm not too sure

169
00:06:48,930 --> 00:06:55,140
and then hopefully I profit and get to

170
00:06:51,090 --> 00:06:57,719
hackle those things I found now I played

171
00:06:55,140 --> 00:06:59,610
around quite a while and I realized all

172
00:06:57,720 --> 00:07:03,210
of these things don't translate very

173
00:06:59,610 --> 00:07:05,370
well into slide decks so there was a lot

174
00:07:03,210 --> 00:07:07,739
of times then hacking on code and

175
00:07:05,370 --> 00:07:09,510
reading about too many things I got

176
00:07:07,740 --> 00:07:11,340
trapped in some rabbit holes and went

177
00:07:09,510 --> 00:07:13,320
off on tangents that were completely

178
00:07:11,340 --> 00:07:16,289
unrelated all died pretty interesting

179
00:07:13,320 --> 00:07:18,510
and thankfully it seems like I didn't

180
00:07:16,290 --> 00:07:20,040
violate any time to service because last

181
00:07:18,510 --> 00:07:23,099
time I checked my account was still

182
00:07:20,040 --> 00:07:24,600
active so at the end of all this I had

183
00:07:23,100 --> 00:07:28,200
some code that was running on lambda

184
00:07:24,600 --> 00:07:29,850
seem to do the dirt busting thing and it

185
00:07:28,200 --> 00:07:33,630
was kind of all tied together with some

186
00:07:29,850 --> 00:07:36,000
hacky bash scripts so at this point I

187
00:07:33,630 --> 00:07:37,860
should probably pray to the demigods but

188
00:07:36,000 --> 00:07:40,590
I forgot to do that this morning

189
00:07:37,860 --> 00:07:42,570
so here's a little video showing just

190
00:07:40,590 --> 00:07:44,960
how boring it can be to watch some lines

191
00:07:42,570 --> 00:07:48,240
of text scroll on a screen

192
00:07:44,960 --> 00:07:50,669
now you'll see there it cut up a word

193
00:07:48,240 --> 00:07:52,890
list into about 50 different chunks and

194
00:07:50,670 --> 00:07:55,740
this is getting all of the brute-forcing

195
00:07:52,890 --> 00:08:00,260
back from the Landrum vacations so that

196
00:07:55,740 --> 00:08:03,660
ran through in about seven eight seconds

197
00:08:00,260 --> 00:08:05,849
now that wasn't very interesting to look

198
00:08:03,660 --> 00:08:07,950
at I thought I'd build a chart instead

199
00:08:05,850 --> 00:08:11,790
because what's a presentation without a

200
00:08:07,950 --> 00:08:13,320
chart and while you probably can't read

201
00:08:11,790 --> 00:08:15,150
all of the numbers on the screen there

202
00:08:13,320 --> 00:08:18,000
the main thing to see in the middle

203
00:08:15,150 --> 00:08:20,400
there is that running on about a hundred

204
00:08:18,000 --> 00:08:23,010
threads and go Buster's seemed to be the

205
00:08:20,400 --> 00:08:25,260
best performance and there's three

206
00:08:23,010 --> 00:08:27,659
middle bars there were kind of splitting

207
00:08:25,260 --> 00:08:31,140
a word list into between 20 and 100

208
00:08:27,660 --> 00:08:34,880
lambda slices and it ran at best in

209
00:08:31,140 --> 00:08:38,789
about 4.8 seconds for those 20,000 words

210
00:08:34,880 --> 00:08:40,409
so what I learned from that splitting

211
00:08:38,789 --> 00:08:41,760
things up and running him in parallel

212
00:08:40,409 --> 00:08:45,900
makes them go fast

213
00:08:41,760 --> 00:08:48,360
who knew about 50 lambda slices with a

214
00:08:45,900 --> 00:08:50,040
hundred threads was the optimal out of

215
00:08:48,360 --> 00:08:53,790
the tests that I ran and that was in

216
00:08:50,040 --> 00:08:55,290
about 4.8 seconds the there wasn't a lot

217
00:08:53,790 --> 00:08:56,699
of difference between twenty and a

218
00:08:55,290 --> 00:08:59,849
hundred slices

219
00:08:56,700 --> 00:09:02,160
running on lambda the next thing I found

220
00:08:59,850 --> 00:09:05,310
was lamb burgers actually really cheap

221
00:09:02,160 --> 00:09:06,900
so I calculated it out and maybe about a

222
00:09:05,310 --> 00:09:10,709
dollar we'll give you five and a half

223
00:09:06,900 --> 00:09:12,569
days of compute time the total cost for

224
00:09:10,710 --> 00:09:15,480
all of the testing I did was about five

225
00:09:12,570 --> 00:09:17,850
cents and that was for $17,000 in

226
00:09:15,480 --> 00:09:21,900
vacations running for about six hours of

227
00:09:17,850 --> 00:09:23,970
compute time so it works out pretty well

228
00:09:21,900 --> 00:09:30,959
particularly when you're on the kind of

229
00:09:23,970 --> 00:09:32,730
money that pen testers make so one thing

230
00:09:30,960 --> 00:09:34,890
I found really annoying that I would do

231
00:09:32,730 --> 00:09:36,960
better next time is don't manually

232
00:09:34,890 --> 00:09:39,390
collect all your timing data and play

233
00:09:36,960 --> 00:09:42,270
with it in Excel it's just a real pain

234
00:09:39,390 --> 00:09:45,390
and it takes a long time and that's not

235
00:09:42,270 --> 00:09:47,760
a good use of your time there is a

236
00:09:45,390 --> 00:09:49,350
github link there with some code on it

237
00:09:47,760 --> 00:09:51,420
and I'll tweet out this slide deck

238
00:09:49,350 --> 00:09:52,320
afterwards so if you want to play around

239
00:09:51,420 --> 00:09:57,599
with it yourself

240
00:09:52,320 --> 00:10:00,240
it's online so after I ran go buster on

241
00:09:57,600 --> 00:10:03,030
it I was wondering what else could I

242
00:10:00,240 --> 00:10:05,130
kind of apply this concept to and I was

243
00:10:03,030 --> 00:10:08,069
thinking like things that take a long

244
00:10:05,130 --> 00:10:11,400
time and just aren't really that fun so

245
00:10:08,070 --> 00:10:13,770
maybe like nmap UDP scans or scanning

246
00:10:11,400 --> 00:10:15,750
subnets running those basic checks or

247
00:10:13,770 --> 00:10:18,480
taking screenshots of all those websites

248
00:10:15,750 --> 00:10:20,490
that you find out there and I have no

249
00:10:18,480 --> 00:10:22,380
idea if this is what would work because

250
00:10:20,490 --> 00:10:24,570
I've never done fuzzing but if you can

251
00:10:22,380 --> 00:10:26,400
fit it in that 300 second window that

252
00:10:24,570 --> 00:10:30,780
lambda gives you maybe you could run

253
00:10:26,400 --> 00:10:33,000
fuzzing payloads across it there's heaps

254
00:10:30,780 --> 00:10:36,030
of cool stuff you could probably do but

255
00:10:33,000 --> 00:10:38,820
the lambda environment invocations might

256
00:10:36,030 --> 00:10:41,880
kind of get in your way so there's a 300

257
00:10:38,820 --> 00:10:43,560
second limit and it's kind of just hard

258
00:10:41,880 --> 00:10:46,439
to get access to all of the things to

259
00:10:43,560 --> 00:10:48,689
debug while you're running it so I

260
00:10:46,440 --> 00:10:50,670
started looking into other things that

261
00:10:48,690 --> 00:10:52,740
Amazon provides and of course they came

262
00:10:50,670 --> 00:10:56,040
across their basic cloud server offering

263
00:10:52,740 --> 00:10:58,260
ec2 and auto scaling groups so this

264
00:10:56,040 --> 00:11:00,740
gives you a server in the cloud and you

265
00:10:58,260 --> 00:11:03,270
can spin up multiple copies of it and

266
00:11:00,740 --> 00:11:07,890
yeah it just seems to work

267
00:11:03,270 --> 00:11:09,710
um now to get that lambda feel to it the

268
00:11:07,890 --> 00:11:11,600
auto scaling didn't

269
00:11:09,710 --> 00:11:13,640
operate as quick as I would have liked

270
00:11:11,600 --> 00:11:15,320
so there was a few minutes lag time and

271
00:11:13,640 --> 00:11:18,890
spinning things off and tearing them

272
00:11:15,320 --> 00:11:20,360
down and well I wanted to install docker

273
00:11:18,890 --> 00:11:22,270
on it and run things in containers

274
00:11:20,360 --> 00:11:25,700
anyway and that was more setup as well

275
00:11:22,270 --> 00:11:27,710
so I looked a bit deeper and it seems

276
00:11:25,700 --> 00:11:31,310
I've got something that already builds

277
00:11:27,710 --> 00:11:33,830
that so ECS is that container service

278
00:11:31,310 --> 00:11:35,989
and it basically adds that kind of dock

279
00:11:33,830 --> 00:11:39,980
layout on top of the auto scaling

280
00:11:35,990 --> 00:11:42,110
servers now this was nice but what

281
00:11:39,980 --> 00:11:44,150
lambda lets you do is just feed in

282
00:11:42,110 --> 00:11:46,040
events and get the data back out the

283
00:11:44,150 --> 00:11:48,290
other side and while I could build

284
00:11:46,040 --> 00:11:48,819
something myself like who has time for

285
00:11:48,290 --> 00:11:51,650
that

286
00:11:48,820 --> 00:11:53,720
so looking a bit deeper I came across

287
00:11:51,650 --> 00:11:56,240
their batch service which lets you

288
00:11:53,720 --> 00:11:58,760
define a job type in this case go

289
00:11:56,240 --> 00:12:00,860
busking and then connect a queue to it

290
00:11:58,760 --> 00:12:03,920
and just kind of feed the data in and

291
00:12:00,860 --> 00:12:07,100
feed it out now that runs on ICS which

292
00:12:03,920 --> 00:12:09,050
runs on ec2 an auto scaling so it seems

293
00:12:07,100 --> 00:12:10,880
like they've got that abstraction of all

294
00:12:09,050 --> 00:12:12,650
that services figured Hart and I

295
00:12:10,880 --> 00:12:13,760
probably wouldn't have to do that much

296
00:12:12,650 --> 00:12:16,280
to make it work

297
00:12:13,760 --> 00:12:18,319
now I played around with it a bit but I

298
00:12:16,280 --> 00:12:21,860
didn't go too deeply down that path for

299
00:12:18,320 --> 00:12:23,870
this time but I did learn that basically

300
00:12:21,860 --> 00:12:25,460
if you need something i'm Aslan's

301
00:12:23,870 --> 00:12:27,710
probably already built it before he got

302
00:12:25,460 --> 00:12:30,020
there so I kind of read through the

303
00:12:27,710 --> 00:12:36,170
billion services they release every two

304
00:12:30,020 --> 00:12:38,270
days another area I found while kind of

305
00:12:36,170 --> 00:12:40,219
thinking how can I get away from those

306
00:12:38,270 --> 00:12:42,650
lambda restrictions is this project

307
00:12:40,220 --> 00:12:45,950
called open files or open functions as a

308
00:12:42,650 --> 00:12:48,949
service so it came out around the end of

309
00:12:45,950 --> 00:12:51,170
2016 and it's just been like growing

310
00:12:48,950 --> 00:12:53,000
super fast like they're pushing releases

311
00:12:51,170 --> 00:12:55,550
every day and new features are coming

312
00:12:53,000 --> 00:12:58,280
out and it's kind of just really

313
00:12:55,550 --> 00:13:00,109
exciting so it allows you to run those

314
00:12:58,280 --> 00:13:02,689
functions as a service kind of like

315
00:13:00,110 --> 00:13:05,510
lambda but on whatever hard way you want

316
00:13:02,690 --> 00:13:08,150
and it leverages docker containers to do

317
00:13:05,510 --> 00:13:10,610
so so it kind of already had some of the

318
00:13:08,150 --> 00:13:13,250
things I wanted to play with it comes

319
00:13:10,610 --> 00:13:15,410
with a command-line tool and essentially

320
00:13:13,250 --> 00:13:17,780
you can define a little bit of

321
00:13:15,410 --> 00:13:19,550
configuration about how your function

322
00:13:17,780 --> 00:13:22,829
should look and what container it should

323
00:13:19,550 --> 00:13:26,880
run run build deploy and then you

324
00:13:22,830 --> 00:13:28,830
in vogue it just like Lando another nice

325
00:13:26,880 --> 00:13:30,720
thing with the command line tool is you

326
00:13:28,830 --> 00:13:32,250
can actually pipe the data in and out of

327
00:13:30,720 --> 00:13:34,380
it and so you can run this function

328
00:13:32,250 --> 00:13:42,630
almost like it was a binary on your

329
00:13:34,380 --> 00:13:45,450
system so to go from a docker container

330
00:13:42,630 --> 00:13:47,550
to an open-face function there's only

331
00:13:45,450 --> 00:13:51,860
like four extra lines of code you have

332
00:13:47,550 --> 00:13:54,660
to add to a docker file that's basically

333
00:13:51,860 --> 00:13:56,550
referencing your image adding the little

334
00:13:54,660 --> 00:13:59,250
watchdog binary which is what will

335
00:13:56,550 --> 00:14:01,380
accept the events that you're sending in

336
00:13:59,250 --> 00:14:03,330
tell it what it should run when it gets

337
00:14:01,380 --> 00:14:06,810
an event and then tell the container

338
00:14:03,330 --> 00:14:10,920
start the watch when I start so it's

339
00:14:06,810 --> 00:14:13,410
pretty quick to get going so I was

340
00:14:10,920 --> 00:14:15,510
looking at other kind of offensive ways

341
00:14:13,410 --> 00:14:17,069
that I could use docker and what kind of

342
00:14:15,510 --> 00:14:19,620
tooling is already out there that I

343
00:14:17,070 --> 00:14:22,260
don't have to build and I guess the

344
00:14:19,620 --> 00:14:25,680
first level is just taking existing

345
00:14:22,260 --> 00:14:28,040
tools or operating systems that you use

346
00:14:25,680 --> 00:14:30,510
and wrapping them up in a container so

347
00:14:28,040 --> 00:14:33,089
that would be things like Kali Linux

348
00:14:30,510 --> 00:14:35,640
who's put out docker containers for

349
00:14:33,090 --> 00:14:37,950
their things or just common tools that

350
00:14:35,640 --> 00:14:41,640
you'd use day to day so there's go

351
00:14:37,950 --> 00:14:43,890
Buster and map maybe be for Empire and

352
00:14:41,640 --> 00:14:46,640
basically any tool you've got if you

353
00:14:43,890 --> 00:14:49,620
google for it it's probably out there

354
00:14:46,640 --> 00:14:52,830
the next level of kind of using docker

355
00:14:49,620 --> 00:14:54,510
in an offensive way that I saw was some

356
00:14:52,830 --> 00:14:57,210
projects that are taking these

357
00:14:54,510 --> 00:15:00,180
individual tools and kind of running

358
00:14:57,210 --> 00:15:02,820
them together so brute subs is a project

359
00:15:00,180 --> 00:15:05,189
that does subdomain brute-forcing with a

360
00:15:02,820 --> 00:15:09,270
number of the common tools like go busto

361
00:15:05,190 --> 00:15:11,310
recon ng old dns etc and kind of

362
00:15:09,270 --> 00:15:13,260
combines the output from all of those

363
00:15:11,310 --> 00:15:16,229
together to give you a richer data set

364
00:15:13,260 --> 00:15:18,240
of information so that's kind of cool

365
00:15:16,230 --> 00:15:22,830
way to go about it from just this old

366
00:15:18,240 --> 00:15:25,140
run one tool look at results now the

367
00:15:22,830 --> 00:15:27,270
next way I saw and this is kind of going

368
00:15:25,140 --> 00:15:29,880
even more into that software engineering

369
00:15:27,270 --> 00:15:31,890
space is actually turning these tools

370
00:15:29,880 --> 00:15:36,449
into more of the tool as a service

371
00:15:31,890 --> 00:15:38,419
system so cubot is a slack bot that is

372
00:15:36,449 --> 00:15:40,849
running on top of some kubernetes

373
00:15:38,419 --> 00:15:43,139
orchestration which is basically

374
00:15:40,850 --> 00:15:45,959
clustering for docker containers and

375
00:15:43,139 --> 00:15:48,269
similar things and what it lets you do

376
00:15:45,959 --> 00:15:50,040
is run a command like go in map this

377
00:15:48,269 --> 00:15:52,589
thing it'll queue it in the background

378
00:15:50,040 --> 00:15:54,899
run the tool in the cloud gather those

379
00:15:52,589 --> 00:15:57,089
results store them and get and then

380
00:15:54,899 --> 00:15:59,160
return the differential results to you

381
00:15:57,089 --> 00:16:01,829
and you just hang out and slack and

382
00:15:59,160 --> 00:16:04,879
drink coffee while this goes on so

383
00:16:01,829 --> 00:16:04,878
that's pretty cool

384
00:16:04,980 --> 00:16:09,269
because there's so many things out there

385
00:16:07,079 --> 00:16:11,339
like docker containers for everything

386
00:16:09,269 --> 00:16:12,839
and any tool you look at there's

387
00:16:11,339 --> 00:16:15,569
probably like a hundred different

388
00:16:12,839 --> 00:16:18,119
containers there's sort of a couple of

389
00:16:15,569 --> 00:16:19,709
rules that I use for myself to figure

390
00:16:18,119 --> 00:16:21,540
out which ones are worth looking at or

391
00:16:19,709 --> 00:16:25,290
using more if I should go build it

392
00:16:21,540 --> 00:16:27,629
myself so firstly if it's the official

393
00:16:25,290 --> 00:16:29,399
container for the project it's probably

394
00:16:27,629 --> 00:16:31,189
a good place to start because hopefully

395
00:16:29,399 --> 00:16:36,149
they'll maintain their own stuff

396
00:16:31,189 --> 00:16:37,709
hopefully next up how many times has it

397
00:16:36,149 --> 00:16:39,839
been starred and how many people

398
00:16:37,709 --> 00:16:43,618
download it because if it's popular then

399
00:16:39,839 --> 00:16:45,239
maybe it's probably okay um a big one

400
00:16:43,619 --> 00:16:47,939
for me is whether the docker files

401
00:16:45,239 --> 00:16:49,919
available so this is basically like do I

402
00:16:47,939 --> 00:16:52,439
have source code can I build it myself

403
00:16:49,919 --> 00:16:55,439
can I say what that's built into it and

404
00:16:52,439 --> 00:16:57,569
what should or shouldn't be there and if

405
00:16:55,439 --> 00:16:59,309
you need to kind of take it and build

406
00:16:57,569 --> 00:17:01,049
your own version this is really nice

407
00:16:59,309 --> 00:17:03,118
because you can just modify what someone

408
00:17:01,049 --> 00:17:06,869
else has done tweak it to update or

409
00:17:03,119 --> 00:17:10,019
whatever now automated builds let you

410
00:17:06,869 --> 00:17:12,688
link the docker build to a github repo

411
00:17:10,019 --> 00:17:17,459
and so whenever you push new source the

412
00:17:12,689 --> 00:17:19,139
images get updated so if if I find

413
00:17:17,459 --> 00:17:20,519
something like that it means it's

414
00:17:19,138 --> 00:17:23,809
probably more likely to be up-to-date

415
00:17:20,519 --> 00:17:27,510
which is good when it was last updated

416
00:17:23,809 --> 00:17:30,178
kind of self-explanatory and finally how

417
00:17:27,510 --> 00:17:32,549
big the image is so at least in the

418
00:17:30,179 --> 00:17:34,350
early days but even now there's quite a

419
00:17:32,549 --> 00:17:36,539
lot of docker images out there that are

420
00:17:34,350 --> 00:17:39,269
just like hundreds and hundreds of Meg's

421
00:17:36,539 --> 00:17:41,490
or gigs for a tool that should only be

422
00:17:39,269 --> 00:17:43,380
maybe like 10 or 20 Meg

423
00:17:41,490 --> 00:17:46,230
and there's just all this extra blow

424
00:17:43,380 --> 00:17:47,909
that doesn't need to be there so I try

425
00:17:46,230 --> 00:17:49,980
and look for things built on Alpine if I

426
00:17:47,909 --> 00:17:52,110
can help it or just this

427
00:17:49,980 --> 00:17:55,830
most size available that fits my other

428
00:17:52,110 --> 00:17:58,290
criteria and while I was looking into

429
00:17:55,830 --> 00:18:00,510
how I could get really small containers

430
00:17:58,290 --> 00:18:03,060
I came across a couple of tricks how you

431
00:18:00,510 --> 00:18:04,680
can use golang and some features of

432
00:18:03,060 --> 00:18:08,370
docker to get some really tiny

433
00:18:04,680 --> 00:18:10,380
containers so first I'll go line allows

434
00:18:08,370 --> 00:18:12,540
static compilations so we can get a

435
00:18:10,380 --> 00:18:15,180
single binary without any dependencies

436
00:18:12,540 --> 00:18:17,520
and bypassing a few extra flags we can

437
00:18:15,180 --> 00:18:19,560
remove some redundant debug tables that

438
00:18:17,520 --> 00:18:23,220
don't really need to be there when we're

439
00:18:19,560 --> 00:18:26,460
running it next up take upx

440
00:18:23,220 --> 00:18:29,100
which is a executable packer and allows

441
00:18:26,460 --> 00:18:31,350
you to make them smaller but still run

442
00:18:29,100 --> 00:18:35,040
basically the same when you run the tool

443
00:18:31,350 --> 00:18:37,889
and then we leverage Dockers multi build

444
00:18:35,040 --> 00:18:40,050
stage and what this allows us to do is

445
00:18:37,890 --> 00:18:41,670
define essentially a different

446
00:18:40,050 --> 00:18:44,280
environment for all of the compilation

447
00:18:41,670 --> 00:18:46,170
of the tool and the packing and then we

448
00:18:44,280 --> 00:18:49,920
just copy that compiled binary out at

449
00:18:46,170 --> 00:18:52,500
the end into an empty container and so I

450
00:18:49,920 --> 00:18:54,120
did this with go Buster um and I ended

451
00:18:52,500 --> 00:18:57,720
up with about a one megabyte container

452
00:18:54,120 --> 00:19:00,719
all up that you can just run so it

453
00:18:57,720 --> 00:19:04,040
seemed to work out pretty cool another

454
00:19:00,720 --> 00:19:07,020
cool thing that I found with golang is

455
00:19:04,040 --> 00:19:08,639
there's this project called Cobra which

456
00:19:07,020 --> 00:19:11,400
allows you to build sort of really nice

457
00:19:08,640 --> 00:19:13,890
command-line interfaces and this is used

458
00:19:11,400 --> 00:19:17,360
by a lot of projects out there like some

459
00:19:13,890 --> 00:19:20,580
of the docker Cole libraries use it and

460
00:19:17,360 --> 00:19:24,540
really just heaps because it's nice to

461
00:19:20,580 --> 00:19:26,730
use one of the things I find delays me a

462
00:19:24,540 --> 00:19:28,889
lot when I'm starting a project is I

463
00:19:26,730 --> 00:19:30,750
want it to be pretty and I want to have

464
00:19:28,890 --> 00:19:32,880
just the right tools in place before I

465
00:19:30,750 --> 00:19:35,070
start and then weeks have gone past

466
00:19:32,880 --> 00:19:36,840
while I research all the tools and then

467
00:19:35,070 --> 00:19:40,409
it's time for b-sides and I haven't

468
00:19:36,840 --> 00:19:44,370
written any code and yeah so Cobra is

469
00:19:40,410 --> 00:19:47,160
nice you can basically just clone down

470
00:19:44,370 --> 00:19:50,729
the program and build it with go and

471
00:19:47,160 --> 00:19:53,010
then you just in it a new project go

472
00:19:50,730 --> 00:19:55,920
into that folder add some sub commands

473
00:19:53,010 --> 00:19:59,700
and run it and you've got a command line

474
00:19:55,920 --> 00:20:01,530
that looks almost as nice as Dockers I

475
00:19:59,700 --> 00:20:03,630
don't know if you can read that very

476
00:20:01,530 --> 00:20:06,178
well up there but

477
00:20:03,630 --> 00:20:10,320
yeah that took about three seconds of

478
00:20:06,179 --> 00:20:13,320
commands to generate now gopher blazer

479
00:20:10,320 --> 00:20:15,689
was this cool idea I had to kind of get

480
00:20:13,320 --> 00:20:18,659
rid of all my shell scripts and hockey

481
00:20:15,690 --> 00:20:22,620
tools here and there kind of wrap up a

482
00:20:18,660 --> 00:20:25,049
lot of the docker run commands and just

483
00:20:22,620 --> 00:20:27,209
make my life easier if I don't have to

484
00:20:25,049 --> 00:20:29,429
think about it and it just works then

485
00:20:27,210 --> 00:20:31,590
that's good for me and I can get on to

486
00:20:29,429 --> 00:20:34,049
doing the fun thing like working out how

487
00:20:31,590 --> 00:20:37,830
to break that really crazy cross-site

488
00:20:34,049 --> 00:20:39,539
scripting payload and make it run so I

489
00:20:37,830 --> 00:20:42,360
wanted to add in connectors that would

490
00:20:39,539 --> 00:20:44,220
run docker or Landers maybe open fast

491
00:20:42,360 --> 00:20:47,789
functions and just have it all from this

492
00:20:44,220 --> 00:20:49,980
single tool now currently don't really

493
00:20:47,789 --> 00:20:52,590
have very much there because starting

494
00:20:49,980 --> 00:20:54,150
projects is hard I did get the name done

495
00:20:52,590 --> 00:20:57,260
this I've solved one of the software

496
00:20:54,150 --> 00:20:57,260
engineering problems

497
00:20:57,350 --> 00:21:02,010
followed a lot of rabbit holes got a

498
00:20:59,880 --> 00:21:03,419
couple of proof of concepts working and

499
00:21:02,010 --> 00:21:07,408
that's kind of where it's at at the

500
00:21:03,419 --> 00:21:09,630
moment so there is a repo it's only got

501
00:21:07,409 --> 00:21:12,270
the proof of concept but I'm hoping that

502
00:21:09,630 --> 00:21:15,200
sort of over Christmas maybe I'll have

503
00:21:12,270 --> 00:21:21,418
some time to hop on this a bit more and

504
00:21:15,200 --> 00:21:24,570
yeah so future directions actually work

505
00:21:21,419 --> 00:21:28,140
on that tool I want to explore more

506
00:21:24,570 --> 00:21:30,689
tools that I use day to day and kind of

507
00:21:28,140 --> 00:21:33,900
getting them running in containers in a

508
00:21:30,690 --> 00:21:36,120
nice and simple way and then going one

509
00:21:33,900 --> 00:21:37,770
step further and figuring out what are

510
00:21:36,120 --> 00:21:40,020
the manual steps I do with the output

511
00:21:37,770 --> 00:21:41,789
from these tools and how can I automate

512
00:21:40,020 --> 00:21:44,190
them and kind of build it into a

513
00:21:41,789 --> 00:21:48,809
workflow where I have to do less of the

514
00:21:44,190 --> 00:21:51,120
boring mundane stuff just reading more

515
00:21:48,809 --> 00:21:55,049
about docker as well and ways I could

516
00:21:51,120 --> 00:21:58,110
use or abuse it so this one project they

517
00:21:55,049 --> 00:22:00,299
came across called sonim it's one of

518
00:21:58,110 --> 00:22:02,158
these cryptocurrency Aiko's that have

519
00:22:00,299 --> 00:22:05,340
raised way too much money was way too

520
00:22:02,159 --> 00:22:07,200
terrible looking a white paper but it

521
00:22:05,340 --> 00:22:10,860
basically sounds like take docker

522
00:22:07,200 --> 00:22:13,350
container run on miners computer profit

523
00:22:10,860 --> 00:22:15,659
and I think there's probably going to be

524
00:22:13,350 --> 00:22:19,040
some security concerns

525
00:22:15,660 --> 00:22:22,820
that space so it could be fun to look at

526
00:22:19,040 --> 00:22:25,050
um takeaways from this talk so

527
00:22:22,820 --> 00:22:27,659
originally I thought I was going to go

528
00:22:25,050 --> 00:22:29,970
down this really deep kind of technical

529
00:22:27,660 --> 00:22:31,800
way and talk about all these things you

530
00:22:29,970 --> 00:22:33,800
should do and why you should care but

531
00:22:31,800 --> 00:22:36,899
when I started reading this slide

532
00:22:33,800 --> 00:22:38,490
writing the slide I found that the

533
00:22:36,900 --> 00:22:42,060
things that I wanted to put here were

534
00:22:38,490 --> 00:22:45,630
more kind of cultural or attitudinal so

535
00:22:42,060 --> 00:22:47,639
the first one is just be curious like if

536
00:22:45,630 --> 00:22:50,610
you see a project out there or some new

537
00:22:47,640 --> 00:22:53,040
tool like play around with it and see

538
00:22:50,610 --> 00:22:56,959
what it can do and how you can use it to

539
00:22:53,040 --> 00:23:00,330
disrupt the work you do day to day so

540
00:22:56,960 --> 00:23:02,850
yeah I guess don't get stuck in that

541
00:23:00,330 --> 00:23:04,710
this is how we do it because this is how

542
00:23:02,850 --> 00:23:07,639
we've always done it if there's a better

543
00:23:04,710 --> 00:23:10,950
way like let's do that instead and

544
00:23:07,640 --> 00:23:13,320
finally if you do play around and learn

545
00:23:10,950 --> 00:23:16,410
something like share it get out there

546
00:23:13,320 --> 00:23:19,080
speak about it send pull requests do the

547
00:23:16,410 --> 00:23:21,810
open source thing write a tool and put

548
00:23:19,080 --> 00:23:23,490
it on the internet like let's just get

549
00:23:21,810 --> 00:23:25,500
all of that stuff that's trapped in our

550
00:23:23,490 --> 00:23:27,650
heads and kind of behind closed doors

551
00:23:25,500 --> 00:23:30,690
and bring the whole industry up together

552
00:23:27,650 --> 00:23:33,150
and finally I just wanted to leave you

553
00:23:30,690 --> 00:23:36,030
with this quote that I quite like about

554
00:23:33,150 --> 00:23:38,700
thinking different so I believe that

555
00:23:36,030 --> 00:23:40,950
it's the crazy ones and The Misfits the

556
00:23:38,700 --> 00:23:44,640
rebels the ones who just kind of don't

557
00:23:40,950 --> 00:23:46,740
believe in that status quo that kind of

558
00:23:44,640 --> 00:23:48,780
get out there and shake things up rock

559
00:23:46,740 --> 00:23:53,660
the boat and really cause things to be

560
00:23:48,780 --> 00:23:56,550
changed so be one of those people and

561
00:23:53,660 --> 00:24:05,450
we've got some time left so if anyone's

562
00:23:56,550 --> 00:24:05,450
got any questions thanks

563
00:24:05,920 --> 00:24:07,980
you

