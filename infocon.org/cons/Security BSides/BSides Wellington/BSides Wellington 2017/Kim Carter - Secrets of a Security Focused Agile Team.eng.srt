1
00:00:04,260 --> 00:00:11,610
so so my name's Kim cutter I work as a

2
00:00:07,529 --> 00:00:13,699
consultant I do a bit of software

3
00:00:11,610 --> 00:00:16,590
network engineering penetration testing

4
00:00:13,699 --> 00:00:18,230
well I do quite a bit of sitting up and

5
00:00:16,590 --> 00:00:20,509
optimising a cross-functional

6
00:00:18,230 --> 00:00:23,640
self-motivating development teams

7
00:00:20,509 --> 00:00:24,779
certified scrum master i co organise a

8
00:00:23,640 --> 00:00:27,089
couple of the information security

9
00:00:24,779 --> 00:00:29,210
conferences in New Zealand a shaker

10
00:00:27,089 --> 00:00:32,879
conference in the OAuth New Zealand day

11
00:00:29,210 --> 00:00:37,800
so you've got a good contingent in here

12
00:00:32,880 --> 00:00:40,890
of the questio con organoids I'm a

13
00:00:37,800 --> 00:00:45,000
software engineering radio podcast host

14
00:00:40,890 --> 00:00:48,570
in war throwing a book series three-part

15
00:00:45,000 --> 00:00:51,840
book series the first two books are done

16
00:00:48,570 --> 00:00:53,760
by weighing in at 800 pages so there's

17
00:00:51,840 --> 00:00:56,609
quite a bit of content in there and so

18
00:00:53,760 --> 00:00:59,849
they focus on improving the security

19
00:00:56,609 --> 00:01:02,579
statue of development teams in in

20
00:00:59,850 --> 00:01:05,570
lifting team performance in having us to

21
00:01:02,579 --> 00:01:08,970
create predict are predictable releases

22
00:01:05,570 --> 00:01:10,949
and helping us to yeah create

23
00:01:08,970 --> 00:01:16,620
maintainable and it was it an extensible

24
00:01:10,950 --> 00:01:18,210
code in ideally minimising surprises so

25
00:01:16,620 --> 00:01:20,400
the context of this talk is in the

26
00:01:18,210 --> 00:01:25,619
processes and practices chapter of the

27
00:01:20,400 --> 00:01:28,740
first book of my series so some context

28
00:01:25,620 --> 00:01:31,530
to set the stage so in the first book

29
00:01:28,740 --> 00:01:33,660
there's 30,000 foot view chapter in this

30
00:01:31,530 --> 00:01:36,240
chapter we discuss a sensible security

31
00:01:33,660 --> 00:01:38,729
model which is which was created by

32
00:01:36,240 --> 00:01:41,550
Bruce Schneier we discussed the flow of

33
00:01:38,730 --> 00:01:43,440
it we discussed setting up a development

34
00:01:41,550 --> 00:01:44,880
team or purple team so basically a

35
00:01:43,440 --> 00:01:48,330
development team that knows how to

36
00:01:44,880 --> 00:01:50,130
defend itself and attack itself so

37
00:01:48,330 --> 00:01:53,970
that's all part of the development

38
00:01:50,130 --> 00:01:56,550
lifecycle in yes so the sensible

39
00:01:53,970 --> 00:01:58,590
security model basically is a there's

40
00:01:56,550 --> 00:02:00,509
five steps of really simple threat

41
00:01:58,590 --> 00:02:02,690
modeling so it basically discusses our

42
00:02:00,510 --> 00:02:06,330
assets a risks to those assets

43
00:02:02,690 --> 00:02:08,910
countermeasures to the risks the risks

44
00:02:06,330 --> 00:02:11,670
of the chosen solution and then costs

45
00:02:08,910 --> 00:02:12,900
and trade-offs and then we've take what

46
00:02:11,670 --> 00:02:14,429
we've learnt from the thirties are you

47
00:02:12,900 --> 00:02:15,750
also in the 30,000 foot view check but

48
00:02:14,430 --> 00:02:18,150
the whole idea is to get the developers

49
00:02:15,750 --> 00:02:21,060
to and get the heads out of the code

50
00:02:18,150 --> 00:02:23,480
step right back and to base yes so they

51
00:02:21,060 --> 00:02:25,349
can see the entire security landscape

52
00:02:23,480 --> 00:02:28,109
then we take what we've learned from

53
00:02:25,349 --> 00:02:30,390
that and then start to hone down on

54
00:02:28,110 --> 00:02:33,569
specific areas in the next chapter which

55
00:02:30,390 --> 00:02:36,390
is a 10,000 foot view and then after

56
00:02:33,569 --> 00:02:39,798
they've got a torn chapter which we set

57
00:02:36,390 --> 00:02:43,018
up by a penetration testing distro I

58
00:02:39,799 --> 00:02:46,109
focused on carat Linux we had a bunch of

59
00:02:43,019 --> 00:02:50,609
extra tools and we configure some of the

60
00:02:46,109 --> 00:02:52,400
existing tools in there and then we move

61
00:02:50,609 --> 00:02:55,829
into the processes and practices section

62
00:02:52,400 --> 00:02:57,599
that chapter so in this our processes

63
00:02:55,829 --> 00:03:02,220
and practices chapter there's two

64
00:02:57,599 --> 00:03:03,869
subsections this the first ones are

65
00:03:02,220 --> 00:03:05,909
focused on the tackers and the second

66
00:03:03,870 --> 00:03:07,739
one's focused on basically your

67
00:03:05,909 --> 00:03:09,179
development team are taking the lessons

68
00:03:07,739 --> 00:03:10,909
we've learned from the attackers and

69
00:03:09,180 --> 00:03:13,560
applying them to the development team

70
00:03:10,909 --> 00:03:15,269
and then we move on to all the topic

71
00:03:13,560 --> 00:03:17,819
chapters there's two type of chapters in

72
00:03:15,269 --> 00:03:21,239
the first book first ones physical and

73
00:03:17,819 --> 00:03:23,879
then people so in all the topic chapters

74
00:03:21,239 --> 00:03:27,359
we apply the sensible security model and

75
00:03:23,879 --> 00:03:30,899
in the second box covers VPS network

76
00:03:27,359 --> 00:03:32,220
cloud and web applications and the third

77
00:03:30,900 --> 00:03:35,209
book which I haven't yet started is

78
00:03:32,220 --> 00:03:37,980
going to be covering mobile and i-80

79
00:03:35,209 --> 00:03:39,780
also that's the URL for it you can read

80
00:03:37,980 --> 00:03:44,340
it online for free or you can download

81
00:03:39,780 --> 00:03:46,799
it and pay for it so I've seen a lot of

82
00:03:44,340 --> 00:03:48,870
organizations now hire code monkeys

83
00:03:46,799 --> 00:03:50,669
rather than professionals so

84
00:03:48,870 --> 00:03:53,430
organizations reward those that complete

85
00:03:50,669 --> 00:03:54,930
features the fastest thus rewarding

86
00:03:53,430 --> 00:03:57,359
technical debt which in turn slows a

87
00:03:54,930 --> 00:03:58,709
professional developer down because they

88
00:03:57,359 --> 00:04:02,310
can't help themselves fixing and

89
00:03:58,709 --> 00:04:04,199
simplifying it managers see that code

90
00:04:02,310 --> 00:04:06,299
monkeys are pumping out features and see

91
00:04:04,199 --> 00:04:08,639
decreasing levels of productivity from

92
00:04:06,299 --> 00:04:11,400
professional developer due to the

93
00:04:08,639 --> 00:04:13,970
increased workload refactoring and

94
00:04:11,400 --> 00:04:15,959
simplifying code monkeys code

95
00:04:13,970 --> 00:04:17,579
professional developer research is their

96
00:04:15,959 --> 00:04:21,139
approach rather than copy pasting from

97
00:04:17,579 --> 00:04:22,800
Stack Overflow which again takes longer

98
00:04:21,139 --> 00:04:25,050
professional developers creating

99
00:04:22,800 --> 00:04:27,389
maintainable extensible code the far

100
00:04:25,050 --> 00:04:29,070
greater quality than code monkey but

101
00:04:27,389 --> 00:04:31,639
it's unseen from those outside of the

102
00:04:29,070 --> 00:04:31,639
development team

103
00:04:31,850 --> 00:04:37,440
so sprint review rolls around new

104
00:04:35,850 --> 00:04:39,870
features added on top of professional

105
00:04:37,440 --> 00:04:42,630
developers code and a new features added

106
00:04:39,870 --> 00:04:45,420
on top of code monkeys code sprint

107
00:04:42,630 --> 00:04:46,740
review rolls around again stakeholders

108
00:04:45,420 --> 00:04:49,620
are happy with the features added on top

109
00:04:46,740 --> 00:04:51,390
of professional developers code but

110
00:04:49,620 --> 00:04:53,070
they're starting to no get a notice

111
00:04:51,390 --> 00:04:55,409
buggy behavior in the features that are

112
00:04:53,070 --> 00:04:57,330
added on top of code monkeys code and

113
00:04:55,410 --> 00:05:01,350
it's becoming harder and more

114
00:04:57,330 --> 00:05:04,380
time-consuming to fix them so this trend

115
00:05:01,350 --> 00:05:05,460
continues to worsen so why would code

116
00:05:04,380 --> 00:05:08,340
monkey change when they're being

117
00:05:05,460 --> 00:05:09,810
rewarded for the way they work so scram

118
00:05:08,340 --> 00:05:11,250
without the additional processes and

119
00:05:09,810 --> 00:05:14,430
practices that I'm going to show you

120
00:05:11,250 --> 00:05:16,170
exacerbating the wall professional

121
00:05:14,430 --> 00:05:18,630
developer seems to be slowing the team

122
00:05:16,170 --> 00:05:21,570
down in clearly code monkey appears as a

123
00:05:18,630 --> 00:05:24,980
rock star and delivers as features much

124
00:05:21,570 --> 00:05:27,960
faster the actual truth is the opposite

125
00:05:24,980 --> 00:05:31,920
sustainability is a key principle of the

126
00:05:27,960 --> 00:05:33,930
edge our manifesto if we will reward the

127
00:05:31,920 --> 00:05:39,630
behavior that creates that we create a

128
00:05:33,930 --> 00:05:41,610
vacuum for professional developers so

129
00:05:39,630 --> 00:05:43,260
we're going to work through a selection

130
00:05:41,610 --> 00:05:45,120
of processes and practices that were

131
00:05:43,260 --> 00:05:46,950
birthday out of my own trial and error

132
00:05:45,120 --> 00:05:48,690
as a consultant often call him to help

133
00:05:46,950 --> 00:05:51,590
struggling teams with their own

134
00:05:48,690 --> 00:05:55,560
performance and security issues

135
00:05:51,590 --> 00:05:58,260
so the caveat here some of these secrets

136
00:05:55,560 --> 00:05:59,940
are you may be doing already but in

137
00:05:58,260 --> 00:06:03,300
order to get the maximum benefits you

138
00:05:59,940 --> 00:06:04,530
really need to be doing all and and as

139
00:06:03,300 --> 00:06:08,370
you start to do them all you'll probably

140
00:06:04,530 --> 00:06:14,369
discover others as well so let's break

141
00:06:08,370 --> 00:06:15,810
some mindsets so how do we do this so

142
00:06:14,370 --> 00:06:18,330
remember at the start when I gave some

143
00:06:15,810 --> 00:06:19,620
context my first book covers I'm a

144
00:06:18,330 --> 00:06:22,680
chapter called processes and practices

145
00:06:19,620 --> 00:06:24,060
which has two subsections first goes

146
00:06:22,680 --> 00:06:27,000
through here the attackers think and

147
00:06:24,060 --> 00:06:29,490
work there other basically their

148
00:06:27,000 --> 00:06:31,110
lifecycle and the second is a collection

149
00:06:29,490 --> 00:06:36,390
of learnings taken from the attackers

150
00:06:31,110 --> 00:06:37,800
but for the software engineers so in the

151
00:06:36,390 --> 00:06:40,680
book I discussed the attackers also

152
00:06:37,800 --> 00:06:43,800
known as the red team and both black hat

153
00:06:40,680 --> 00:06:44,550
and white hat how they think how they

154
00:06:43,800 --> 00:06:46,770
attack their

155
00:06:44,550 --> 00:06:49,920
processes and a sequence of events and

156
00:06:46,770 --> 00:06:52,409
their tolling and techniques so I took

157
00:06:49,920 --> 00:06:53,880
what I could from the red team and

158
00:06:52,410 --> 00:06:59,280
created a set of development related

159
00:06:53,880 --> 00:07:00,960
processes and practices so we then apply

160
00:06:59,280 --> 00:07:03,330
these development related processes and

161
00:07:00,960 --> 00:07:06,469
practices to your scrum team also known

162
00:07:03,330 --> 00:07:09,419
as the blue team or dad defending team

163
00:07:06,470 --> 00:07:12,720
and this is essentially what empowers

164
00:07:09,420 --> 00:07:14,610
and so so this produces a development

165
00:07:12,720 --> 00:07:18,230
team that's capable of delivering the

166
00:07:14,610 --> 00:07:20,640
sprint increment with security baked-in

167
00:07:18,230 --> 00:07:24,030
see it at the very beginning of the book

168
00:07:20,640 --> 00:07:29,340
we discuss the specialities and required

169
00:07:24,030 --> 00:07:31,229
in the dev team to basically establish a

170
00:07:29,340 --> 00:07:33,479
purple team so you've got a selection of

171
00:07:31,230 --> 00:07:35,310
people in your scrum team and they hit

172
00:07:33,480 --> 00:07:36,810
and they need to have different

173
00:07:35,310 --> 00:07:40,470
specialities in order to create a

174
00:07:36,810 --> 00:07:41,550
successful purple team at least one of

175
00:07:40,470 --> 00:07:43,500
the team members needs to have an

176
00:07:41,550 --> 00:07:47,130
attackers mindset and be capable enough

177
00:07:43,500 --> 00:07:48,840
of producing a tech sequences this is

178
00:07:47,130 --> 00:07:52,140
often the security champion which we'll

179
00:07:48,840 --> 00:07:54,719
discuss soon so you bring the security

180
00:07:52,140 --> 00:07:57,780
focus from the most expensive place in

181
00:07:54,720 --> 00:08:00,210
the software development lifecycle often

182
00:07:57,780 --> 00:08:02,070
retrofitted at the end of the project to

183
00:08:00,210 --> 00:08:04,710
the least expensive place which is

184
00:08:02,070 --> 00:08:09,630
within the sprint and we make it as part

185
00:08:04,710 --> 00:08:11,609
of our dish definition of done so we

186
00:08:09,630 --> 00:08:14,370
augment your scrum process with security

187
00:08:11,610 --> 00:08:15,840
focused processes and practices so on

188
00:08:14,370 --> 00:08:19,260
the right we've got our scrum events

189
00:08:15,840 --> 00:08:22,229
artifacts and transparency most of the

190
00:08:19,260 --> 00:08:24,780
developers in here doing scrum will have

191
00:08:22,230 --> 00:08:26,510
seen these on the left as the additional

192
00:08:24,780 --> 00:08:30,989
security focused processes and practices

193
00:08:26,510 --> 00:08:32,669
are they at weird so by doing this we

194
00:08:30,990 --> 00:08:35,789
dress we reduce the cost of finding not

195
00:08:32,669 --> 00:08:36,870
just security defects but all defects so

196
00:08:35,789 --> 00:08:38,669
this is the average cost of fixing

197
00:08:36,870 --> 00:08:41,909
defects based on when they're introduced

198
00:08:38,669 --> 00:08:43,709
versus when they're detected putting the

199
00:08:41,909 --> 00:08:46,589
practices that's finding the defects and

200
00:08:43,710 --> 00:08:48,600
the right order can reduce costs I can

201
00:08:46,590 --> 00:08:51,780
reduce the cost of defects by up to 100

202
00:08:48,600 --> 00:08:55,590
times so what you see there is if you

203
00:08:51,780 --> 00:08:57,329
find a requirements defect in the

204
00:08:55,590 --> 00:08:58,529
requirement stage so you're essentially

205
00:08:57,330 --> 00:09:01,079
finding in fake

206
00:08:58,529 --> 00:09:04,920
as its introduced it's got a certain

207
00:09:01,079 --> 00:09:06,930
cost so if that same defect is not found

208
00:09:04,920 --> 00:09:09,029
in fact until the architecture stage

209
00:09:06,930 --> 00:09:12,120
it's going to cost you three times as

210
00:09:09,029 --> 00:09:14,249
much to do so and Ageing see all the way

211
00:09:12,120 --> 00:09:15,990
through to post released where it's

212
00:09:14,249 --> 00:09:18,180
going to cost you 10 to 100 times as

213
00:09:15,990 --> 00:09:19,889
much just to fix the defect that could

214
00:09:18,180 --> 00:09:21,899
have been fixed when it was introduced

215
00:09:19,889 --> 00:09:23,269
in the same sort of thing applies for

216
00:09:21,899 --> 00:09:26,040
architecture and construction

217
00:09:23,269 --> 00:09:30,029
constructions a little bit less but

218
00:09:26,040 --> 00:09:31,170
still fairly big numbers to take faults

219
00:09:30,029 --> 00:09:32,999
at the stage with the least time

220
00:09:31,170 --> 00:09:36,959
consuming and costly to correct this is

221
00:09:32,999 --> 00:09:38,819
just a graph of the same thing okay so

222
00:09:36,959 --> 00:09:42,029
you might be thinking this ends like

223
00:09:38,819 --> 00:09:45,300
madness so what can we use now to find

224
00:09:42,029 --> 00:09:48,240
the process for fixing defects and make

225
00:09:45,300 --> 00:09:50,819
it cheaper so just before we dive into

226
00:09:48,240 --> 00:09:52,439
the processes and practices remember we

227
00:09:50,819 --> 00:09:55,819
need to use a sensible security model as

228
00:09:52,439 --> 00:10:00,719
defined in the books first chapter so

229
00:09:55,819 --> 00:10:04,170
the idea here is the development can

230
00:10:00,720 --> 00:10:08,809
take the book and apply it to their to

231
00:10:04,170 --> 00:10:08,809
the way they work in to their teams

232
00:10:14,660 --> 00:10:18,870
so here we create a Tom box team

233
00:10:16,800 --> 00:10:21,949
exercise which we identify and write

234
00:10:18,870 --> 00:10:24,360
down the air sets for your organization

235
00:10:21,950 --> 00:10:26,220
let me create a time box team exercise

236
00:10:24,360 --> 00:10:29,130
again because that's what scrum teams do

237
00:10:26,220 --> 00:10:31,589
and we identifying write-down risks to

238
00:10:29,130 --> 00:10:32,760
the assets are you just identified at

239
00:10:31,589 --> 00:10:34,589
this point you'll be starting to know

240
00:10:32,760 --> 00:10:38,010
your assets and understand the risks to

241
00:10:34,589 --> 00:10:40,260
them then we create countermeasure

242
00:10:38,010 --> 00:10:43,050
product backlog items so countermeasure

243
00:10:40,260 --> 00:10:45,990
PB eyes are like any other BB ID are the

244
00:10:43,050 --> 00:10:48,029
East may table independent testable they

245
00:10:45,990 --> 00:10:49,380
should promote collaboration and they

246
00:10:48,029 --> 00:10:52,320
must fit within a sprint by the time

247
00:10:49,380 --> 00:10:53,430
they're properly groomed your

248
00:10:52,320 --> 00:10:55,139
countermeasure product backlog items

249
00:10:53,430 --> 00:10:59,040
also need to reference the risk that I

250
00:10:55,139 --> 00:11:02,639
created Duty that's providing a context

251
00:10:59,040 --> 00:11:03,930
and urgency information counter me to

252
00:11:02,639 --> 00:11:05,880
put it back log items are then

253
00:11:03,930 --> 00:11:07,709
integrated into your usual product

254
00:11:05,880 --> 00:11:11,579
backlog and ordered based on the risk

255
00:11:07,709 --> 00:11:13,829
ratings and it's discussed in the first

256
00:11:11,579 --> 00:11:17,760
chapter basically how you go about doing

257
00:11:13,829 --> 00:11:21,810
that so the fit modelling now becomes

258
00:11:17,760 --> 00:11:22,890
part of your sprint process now the

259
00:11:21,810 --> 00:11:24,119
following is some of the prices and

260
00:11:22,890 --> 00:11:26,130
practice I've found that when used

261
00:11:24,120 --> 00:11:29,339
together our then the scrum teams can

262
00:11:26,130 --> 00:11:32,579
become a game changer so first steps

263
00:11:29,339 --> 00:11:33,870
established a security champion social

264
00:11:32,579 --> 00:11:35,459
security chairman is a bit like a scrum

265
00:11:33,870 --> 00:11:37,800
master and that they're a servant leader

266
00:11:35,459 --> 00:11:40,739
in a mentor but with the relevant

267
00:11:37,800 --> 00:11:42,660
security skills they must be a team

268
00:11:40,740 --> 00:11:45,089
member so part of the development team

269
00:11:42,660 --> 00:11:47,490
and not be external like part of a

270
00:11:45,089 --> 00:11:51,480
security team in coming into the

271
00:11:47,490 --> 00:11:52,680
development team to help so the idea is

272
00:11:51,480 --> 00:11:54,870
to find someone that really enjoys

273
00:11:52,680 --> 00:11:56,760
technical challenges and let them pull

274
00:11:54,870 --> 00:11:58,350
the roll on them rather than pushing the

275
00:11:56,760 --> 00:12:01,470
roll on because mandating roles doesn't

276
00:11:58,350 --> 00:12:02,730
work so well so the security champion

277
00:12:01,470 --> 00:12:04,350
will be able to bring change to within

278
00:12:02,730 --> 00:12:08,279
the development team and the

279
00:12:04,350 --> 00:12:10,680
organization handcrafted penetration

280
00:12:08,279 --> 00:12:12,720
testing so this is costly when performed

281
00:12:10,680 --> 00:12:15,989
late in the cycle but many times cheaper

282
00:12:12,720 --> 00:12:18,709
when performed within each sprint this

283
00:12:15,990 --> 00:12:22,769
the security champion can also help

284
00:12:18,709 --> 00:12:24,810
other team members up skill on that sort

285
00:12:22,769 --> 00:12:26,519
of thing and myself and other security

286
00:12:24,810 --> 00:12:27,599
professionals can help are trained the

287
00:12:26,519 --> 00:12:29,460
champions

288
00:12:27,600 --> 00:12:31,200
there's lots of guidance on how to do

289
00:12:29,460 --> 00:12:33,720
this in my book there's also a besom

290
00:12:31,200 --> 00:12:38,550
OWASP Microsoft and Intel have a lot of

291
00:12:33,720 --> 00:12:40,110
guidance on this peer programming so

292
00:12:38,550 --> 00:12:42,180
two-brains on your codes not just twice

293
00:12:40,110 --> 00:12:46,710
as good as one especially when one has a

294
00:12:42,180 --> 00:12:48,060
security focus code reviews you can

295
00:12:46,710 --> 00:12:50,760
augment your usual code review process

296
00:12:48,060 --> 00:12:53,040
the likes of jeaious lending tools as

297
00:12:50,760 --> 00:12:54,330
part of your build and source control

298
00:12:53,040 --> 00:12:56,670
pre-commit if you're not already doing

299
00:12:54,330 --> 00:12:59,790
this and as a collection of static and

300
00:12:56,670 --> 00:13:02,510
dynamic analysis tools it i've elicited

301
00:12:59,790 --> 00:13:05,030
in my book that you can automate as well

302
00:13:02,510 --> 00:13:06,990
we cover techniques for asserting a

303
00:13:05,030 --> 00:13:11,520
discipline and inherently undisciplined

304
00:13:06,990 --> 00:13:15,210
languages such as JavaScript we cover

305
00:13:11,520 --> 00:13:16,680
flow and typescript and this gives us

306
00:13:15,210 --> 00:13:18,150
static type checking which is the

307
00:13:16,680 --> 00:13:22,800
implementation of design by contract

308
00:13:18,150 --> 00:13:26,730
also known as DBC now the D is the D and

309
00:13:22,800 --> 00:13:28,709
the solid acronym now we can measure

310
00:13:26,730 --> 00:13:34,830
cyclomatic complexity and reward those

311
00:13:28,710 --> 00:13:36,450
who are juice it and then we move on to

312
00:13:34,830 --> 00:13:38,700
the consuming free and open source so

313
00:13:36,450 --> 00:13:39,660
this is in the and the web applications

314
00:13:38,700 --> 00:13:42,390
chapter my book

315
00:13:39,660 --> 00:13:44,310
now this is addressed by OWASP a nine of

316
00:13:42,390 --> 00:13:47,160
the top ten are using components with

317
00:13:44,310 --> 00:13:49,020
known vulnerabilities so this is often

318
00:13:47,160 --> 00:13:50,760
not thoroughly tested or reviewed it's

319
00:13:49,020 --> 00:13:54,329
often created by amateurs that can and

320
00:13:50,760 --> 00:13:56,370
do introduce vulnerabilities and it's

321
00:13:54,330 --> 00:13:58,020
also an attack an effective attack

322
00:13:56,370 --> 00:14:01,620
vector forgetting an attack as malware

323
00:13:58,020 --> 00:14:03,180
and others working systems it doesn't

324
00:14:01,620 --> 00:14:06,150
undergo the same requirements analysis

325
00:14:03,180 --> 00:14:08,609
defining of scope acceptance criteria

326
00:14:06,150 --> 00:14:13,110
test conditions and sign-off that our

327
00:14:08,610 --> 00:14:15,510
commercial software does and some

328
00:14:13,110 --> 00:14:17,700
countermeasures on that also I'm Debbie

329
00:14:15,510 --> 00:14:24,150
Edwards from IBM I'm had an excellent

330
00:14:17,700 --> 00:14:26,940
podcast around us sitting up a a team

331
00:14:24,150 --> 00:14:29,699
that a committee that would basically

332
00:14:26,940 --> 00:14:32,010
look after the white list of external

333
00:14:29,700 --> 00:14:35,280
dependencies within a company or

334
00:14:32,010 --> 00:14:36,870
organization and I'm the idea of the

335
00:14:35,280 --> 00:14:40,470
area's each development team I really

336
00:14:36,870 --> 00:14:41,110
needs to have a person from that

337
00:14:40,470 --> 00:14:42,850
committee within

338
00:14:41,110 --> 00:14:45,100
team so that when they're working away

339
00:14:42,850 --> 00:14:47,500
within their sprints and they get road

340
00:14:45,100 --> 00:14:50,130
blocked well the idea is that they don't

341
00:14:47,500 --> 00:14:54,220
get roadblock so I when they need to

342
00:14:50,130 --> 00:14:55,360
call in a dependency and and they

343
00:14:54,220 --> 00:14:58,209
realize it's not on the whitelist

344
00:14:55,360 --> 00:15:00,550
already they can get that specific

345
00:14:58,209 --> 00:15:02,319
person to talk to the committee or

346
00:15:00,550 --> 00:15:03,750
whatever and get it fast-tracked

347
00:15:02,320 --> 00:15:06,820
I get it put in the whitelist or

348
00:15:03,750 --> 00:15:07,839
something else find someone else find

349
00:15:06,820 --> 00:15:10,230
something else that's going to do the

350
00:15:07,839 --> 00:15:15,000
same sort of job rather than getting

351
00:15:10,230 --> 00:15:15,000
rather than them than blocking the team

352
00:15:15,930 --> 00:15:23,349
so this automated processes that you

353
00:15:21,399 --> 00:15:25,089
could run over your code base as well to

354
00:15:23,350 --> 00:15:29,320
check that no libraries I used that

355
00:15:25,089 --> 00:15:30,940
there are in the whitelist in other

356
00:15:29,320 --> 00:15:33,600
simple initiatives like downloading and

357
00:15:30,940 --> 00:15:36,850
reviewing packages before running them

358
00:15:33,600 --> 00:15:40,709
this MVM show to check for mbm hooks and

359
00:15:36,850 --> 00:15:43,209
being careful of doppelganger packages

360
00:15:40,709 --> 00:15:44,979
don't install nodejs the official way

361
00:15:43,209 --> 00:15:46,209
piping arbitrary script strictly from

362
00:15:44,980 --> 00:15:50,350
the Internet to your root shell was

363
00:15:46,209 --> 00:15:52,119
asking for trouble now the tall and

364
00:15:50,350 --> 00:15:55,390
landscapes starting to fill out we've

365
00:15:52,120 --> 00:15:57,850
got NPM outdated NPM chick David which

366
00:15:55,390 --> 00:15:59,620
uses your package Jason and provides a

367
00:15:57,850 --> 00:16:02,589
get our badge informing you of

368
00:15:59,620 --> 00:16:04,449
out-of-date packages we've got to retire

369
00:16:02,589 --> 00:16:04,839
jeaious just been around for quite a

370
00:16:04,449 --> 00:16:06,849
while

371
00:16:04,839 --> 00:16:08,800
you can run that as part of your

372
00:16:06,850 --> 00:16:11,380
continuous integration it's got a chrome

373
00:16:08,800 --> 00:16:14,219
and a Firefox extension grunt and a gulp

374
00:16:11,380 --> 00:16:17,260
you know task of burping as that plugin

375
00:16:14,220 --> 00:16:19,360
in an online scanner we've got the node

376
00:16:17,260 --> 00:16:21,939
security platform also known as in SP

377
00:16:19,360 --> 00:16:23,949
which has a CLI a gulp task a code

378
00:16:21,940 --> 00:16:27,040
climate engine and get a pork wrist

379
00:16:23,949 --> 00:16:29,079
integration and we've got snake which is

380
00:16:27,040 --> 00:16:31,329
a similar feature set to NSP with a few

381
00:16:29,079 --> 00:16:35,050
extras and a slightly larger price tag

382
00:16:31,329 --> 00:16:36,489
and there's some others so when you

383
00:16:35,050 --> 00:16:38,410
usually run your test condition workshop

384
00:16:36,490 --> 00:16:39,430
when the developer pulls a pulls the

385
00:16:38,410 --> 00:16:42,010
product backlog item into

386
00:16:39,430 --> 00:16:43,300
work-in-progress you start thinking

387
00:16:42,010 --> 00:16:46,209
about what types of testing are going to

388
00:16:43,300 --> 00:16:48,969
be most suitable and developers create

389
00:16:46,209 --> 00:16:51,219
test conditions so we've got given wins

390
00:16:48,970 --> 00:16:53,230
and ends for any of you that and

391
00:16:51,220 --> 00:16:54,819
familiar with these these are basically

392
00:16:53,230 --> 00:16:56,639
yes a

393
00:16:54,819 --> 00:16:59,289
you'll have one or two developers

394
00:16:56,639 --> 00:17:00,970
developers that will pull a sprint

395
00:16:59,289 --> 00:17:03,069
backlog item into work in progress and

396
00:17:00,970 --> 00:17:04,539
I'll sit around and crates missed

397
00:17:03,069 --> 00:17:07,299
conditions you Givens are your initial

398
00:17:04,539 --> 00:17:09,609
state your wins are changes to that

399
00:17:07,299 --> 00:17:13,769
initial state usually made by users

400
00:17:09,609 --> 00:17:18,519
and you expected outcomes of the aliens

401
00:17:13,769 --> 00:17:20,519
they are pretty much helped as we're

402
00:17:18,519 --> 00:17:22,269
developing our software as

403
00:17:20,519 --> 00:17:26,049
specifications - they work quite well

404
00:17:22,269 --> 00:17:28,179
for that and you can automate them and

405
00:17:26,049 --> 00:17:30,009
we also create evil test conditions so

406
00:17:28,179 --> 00:17:32,740
basically just the same just for the

407
00:17:30,009 --> 00:17:35,139
security focus and the idea there is

408
00:17:32,740 --> 00:17:38,919
that if the developers are struggling to

409
00:17:35,139 --> 00:17:42,008
come up with tech scenarios because

410
00:17:38,919 --> 00:17:44,350
often developers do that's where the

411
00:17:42,009 --> 00:17:46,360
security champion comes in and can lead

412
00:17:44,350 --> 00:17:49,928
the rest of the developers by hand and

413
00:17:46,360 --> 00:17:54,158
teach them how to think offensively and

414
00:17:49,929 --> 00:17:56,350
after a while that does rub off test

415
00:17:54,159 --> 00:17:58,570
conditions lead into TDD BDD perfectly

416
00:17:56,350 --> 00:18:03,730
evil test conditions lead into security

417
00:17:58,570 --> 00:18:06,370
focused TDD BDD just the same so TDD

418
00:18:03,730 --> 00:18:09,789
test-driven development and here at leaf

419
00:18:06,370 --> 00:18:11,979
oh I creates testable code testable code

420
00:18:09,789 --> 00:18:17,769
is not about testing it's about loosely

421
00:18:11,980 --> 00:18:23,620
coupled designs it should be easy to

422
00:18:17,769 --> 00:18:25,649
maintain but it helps us to to create a

423
00:18:23,620 --> 00:18:28,268
code that is easy to maintain

424
00:18:25,649 --> 00:18:29,709
streamlines continuous delivery allows

425
00:18:28,269 --> 00:18:32,769
us to make changes faster with

426
00:18:29,710 --> 00:18:34,960
confidence if it's hard it forces us to

427
00:18:32,769 --> 00:18:38,049
evaluate why it's hard and thus I reduce

428
00:18:34,960 --> 00:18:39,340
the code complexity and in here only

429
00:18:38,049 --> 00:18:41,679
forces us to embrace many good

430
00:18:39,340 --> 00:18:43,418
architectural principles and all with

431
00:18:41,679 --> 00:18:45,610
the added benefit of driving out

432
00:18:43,419 --> 00:18:49,840
security defects a totally as the codes

433
00:18:45,610 --> 00:18:51,549
being written and then we can throw that

434
00:18:49,840 --> 00:18:54,629
into our continuous integration which

435
00:18:51,549 --> 00:18:57,549
provides another continuous security

436
00:18:54,629 --> 00:19:01,600
g-major test speed and reward those who

437
00:18:57,549 --> 00:19:03,220
create fast running tests you know

438
00:19:01,600 --> 00:19:06,340
traditionally penetration testing and

439
00:19:03,220 --> 00:19:08,980
security in general is often thought

440
00:19:06,340 --> 00:19:11,030
about at the end of a project

441
00:19:08,980 --> 00:19:13,429
unbelievably often once the solutions

442
00:19:11,030 --> 00:19:15,440
delivered and imagine if this was done

443
00:19:13,429 --> 00:19:18,549
with any other form of QA so what you've

444
00:19:15,440 --> 00:19:22,429
got here is you've got security defects

445
00:19:18,549 --> 00:19:26,570
being created by developers and it could

446
00:19:22,429 --> 00:19:28,610
be weeks days weeks months even years in

447
00:19:26,570 --> 00:19:32,299
some cases before those defects are

448
00:19:28,610 --> 00:19:36,860
found and for a developer to get back to

449
00:19:32,299 --> 00:19:38,660
that point to be able to actually fix

450
00:19:36,860 --> 00:19:43,040
the defect that can take several days

451
00:19:38,660 --> 00:19:45,830
often to unwind the architecture and all

452
00:19:43,040 --> 00:19:47,600
the code and work out what other areas

453
00:19:45,830 --> 00:19:49,280
are going to be affected by the changes

454
00:19:47,600 --> 00:19:52,549
that they make and also to build up the

455
00:19:49,280 --> 00:19:54,678
context and their heads so that's why

456
00:19:52,549 --> 00:19:56,299
it's so expensive then so by converting

457
00:19:54,679 --> 00:19:58,720
that Eirik effort into something that

458
00:19:56,299 --> 00:20:01,639
can be used in parallel with development

459
00:19:58,720 --> 00:20:04,940
we significantly reduce the costs and

460
00:20:01,640 --> 00:20:06,620
lift the quality so having a solid

461
00:20:04,940 --> 00:20:10,280
purple team that's a development team

462
00:20:06,620 --> 00:20:12,799
with the security focus this far more

463
00:20:10,280 --> 00:20:18,350
effective then are then penetration

464
00:20:12,799 --> 00:20:21,918
testing at the end of a project so this

465
00:20:18,350 --> 00:20:25,370
all sounds great right but how do we do

466
00:20:21,919 --> 00:20:27,410
this so this brings us to secure

467
00:20:25,370 --> 00:20:29,840
aggression testing with SEP a P I and

468
00:20:27,410 --> 00:20:35,030
note go this is a proof of concept that

469
00:20:29,840 --> 00:20:37,159
I did about about 18 months ago and have

470
00:20:35,030 --> 00:20:40,280
since gone on to do something more

471
00:20:37,160 --> 00:20:42,710
elaborate for a large international

472
00:20:40,280 --> 00:20:44,660
client and it's worked out really well

473
00:20:42,710 --> 00:20:46,730
for them so what we've got here

474
00:20:44,660 --> 00:20:47,809
remembering that just this is just a

475
00:20:46,730 --> 00:20:51,140
proof of concept I'm going to show you

476
00:20:47,809 --> 00:20:52,850
some proof of concept code in a demo so

477
00:20:51,140 --> 00:20:55,220
we've got two projects they're both

478
00:20:52,850 --> 00:20:57,860
Aiwass projects so most of us aware is

479
00:20:55,220 --> 00:20:59,450
that it's just nice to be intercepting

480
00:20:57,860 --> 00:21:02,629
proxy with a large collection of known

481
00:20:59,450 --> 00:21:05,540
defects and exploits for those defects

482
00:21:02,630 --> 00:21:09,500
also here's a restful api that we can

483
00:21:05,540 --> 00:21:12,440
use to program against and we've got no

484
00:21:09,500 --> 00:21:15,710
gate which is a purple node web

485
00:21:12,440 --> 00:21:19,159
application that comes with a set of

486
00:21:15,710 --> 00:21:21,850
tutorials covers the OWASP top 10 and

487
00:21:19,159 --> 00:21:24,370
it's got its got fixes in the

488
00:21:21,850 --> 00:21:27,760
code that are commented out in quite a

489
00:21:24,370 --> 00:21:30,219
few places and it also comes with videos

490
00:21:27,760 --> 00:21:34,240
on how some of the attacks can be played

491
00:21:30,220 --> 00:21:37,390
out so I just took a note goat as the

492
00:21:34,240 --> 00:21:39,730
system under test and put a coat I say

493
00:21:37,390 --> 00:21:41,200
put a test on the Edit test the profile

494
00:21:39,730 --> 00:21:48,340
route and this was part of the

495
00:21:41,200 --> 00:21:50,890
proof-of-concept also yeah so I'm a

496
00:21:48,340 --> 00:21:52,418
second block our book is now complete

497
00:21:50,890 --> 00:21:53,980
so what I'm going to do is I'm going to

498
00:21:52,419 --> 00:21:55,720
try and take this proof of concept and

499
00:21:53,980 --> 00:21:57,789
turn it into something a little bit more

500
00:21:55,720 --> 00:22:00,220
consumable so that we can actually just

501
00:21:57,789 --> 00:22:03,340
the idea is that we can just consume it

502
00:22:00,220 --> 00:22:05,820
and do some configurations and get some

503
00:22:03,340 --> 00:22:09,100
security regression testing running over

504
00:22:05,820 --> 00:22:11,500
code bases without doing all the work

505
00:22:09,100 --> 00:22:14,620
that I have it have had to have done

506
00:22:11,500 --> 00:22:17,590
Zep can be run heedless as well there's

507
00:22:14,620 --> 00:22:19,870
also a docker image for it and I set up

508
00:22:17,590 --> 00:22:22,480
a double a docker image for node goat as

509
00:22:19,870 --> 00:22:26,439
well so you can have those running quite

510
00:22:22,480 --> 00:22:27,789
easily together in the idea here is is

511
00:22:26,440 --> 00:22:30,159
that you put them into a nightly build

512
00:22:27,789 --> 00:22:32,110
so developers introduce a defect today

513
00:22:30,159 --> 00:22:33,640
they come in tomorrow and they're told

514
00:22:32,110 --> 00:22:36,070
that they've introduced a defect rather

515
00:22:33,640 --> 00:22:38,020
than waiting weeks months years until

516
00:22:36,070 --> 00:22:39,668
they find out that they've got a defect

517
00:22:38,020 --> 00:22:41,650
because the penetration testers found

518
00:22:39,669 --> 00:22:44,230
stupid mistakes that we as developers

519
00:22:41,650 --> 00:22:47,289
should have shouldn't have put there in

520
00:22:44,230 --> 00:22:52,720
the first place so I'm just going to

521
00:22:47,289 --> 00:23:05,139
show you some code can everyone see

522
00:22:52,720 --> 00:23:08,559
their doc so we've got the so the zip

523
00:23:05,140 --> 00:23:11,919
target up here this is just yeah

524
00:23:08,559 --> 00:23:16,418
our system under test just made up of

525
00:23:11,919 --> 00:23:18,190
the HTTP protocol the config dot host

526
00:23:16,419 --> 00:23:22,179
name which is wherever it's running from

527
00:23:18,190 --> 00:23:26,110
in the port then we've got the zip zip

528
00:23:22,179 --> 00:23:32,140
zip target app which is made up of yeah

529
00:23:26,110 --> 00:23:35,860
similarly the system under test protocol

530
00:23:32,140 --> 00:23:37,420
plus the config dot CA post name so

531
00:23:35,860 --> 00:23:40,360
basically about what I'm saying here as

532
00:23:37,420 --> 00:23:44,970
as either of them can be running pretty

533
00:23:40,360 --> 00:23:47,949
much well anywhere now we've got some

534
00:23:44,970 --> 00:23:49,450
selenium code here this is proof of

535
00:23:47,950 --> 00:23:52,900
concept code it doesn't need to be here

536
00:23:49,450 --> 00:23:56,130
it's just to get up and running for this

537
00:23:52,900 --> 00:23:58,299
POC you can do all the proxying suzette

538
00:23:56,130 --> 00:24:03,880
programmatically without selenium but

539
00:23:58,299 --> 00:24:05,230
but yeah this is pop code so this is the

540
00:24:03,880 --> 00:24:06,400
profile we are so what we're doing is

541
00:24:05,230 --> 00:24:09,370
we're going to be practicing this first

542
00:24:06,400 --> 00:24:10,809
request through zip in it you'll see

543
00:24:09,370 --> 00:24:13,209
something that it'll build up the site's

544
00:24:10,809 --> 00:24:15,610
tree over here we don't actually run

545
00:24:13,210 --> 00:24:20,340
this and we're just filling out these

546
00:24:15,610 --> 00:24:23,229
fields with these values and we've got

547
00:24:20,340 --> 00:24:24,459
fish hold yep so this'll it's threshold

548
00:24:23,230 --> 00:24:27,160
here so we've got a hypothetical

549
00:24:24,460 --> 00:24:30,100
scenario I'm a development teams taken

550
00:24:27,160 --> 00:24:32,140
on a brown fields project it's got three

551
00:24:30,100 --> 00:24:34,178
defects baked into it currently we want

552
00:24:32,140 --> 00:24:36,370
a passing test when we start and then

553
00:24:34,179 --> 00:24:40,000
they can start to whittle away on those

554
00:24:36,370 --> 00:24:42,459
defects now once they get moving

555
00:24:40,000 --> 00:24:44,190
we've got a cleanup we've got some

556
00:24:42,460 --> 00:24:47,429
cleanup oh dear yes so this is just I

557
00:24:44,190 --> 00:24:51,100
wasn't using the mocker test framework

558
00:24:47,429 --> 00:24:52,419
I'm obviously JavaScript we create a new

559
00:24:51,100 --> 00:24:55,209
session once we're finished

560
00:24:52,419 --> 00:24:57,610
this is nice mostly so that you can

561
00:24:55,210 --> 00:24:59,710
actually see what's happening because I

562
00:24:57,610 --> 00:25:01,600
because I use this for dinner now for

563
00:24:59,710 --> 00:25:06,280
workshops and that sort of thing we also

564
00:25:01,600 --> 00:25:09,070
use as a proxy client so there's there's

565
00:25:06,280 --> 00:25:10,480
a handful of clients for don't languages

566
00:25:09,070 --> 00:25:15,159
that are supported so you can just use

567
00:25:10,480 --> 00:25:17,140
the client to talk to the zip API then

568
00:25:15,160 --> 00:25:19,299
we've got yes the most important parts

569
00:25:17,140 --> 00:25:22,600
in the succinct series if you can focus

570
00:25:19,299 --> 00:25:25,418
on the green function names they pretty

571
00:25:22,600 --> 00:25:26,889
much tell you what's happening so we do

572
00:25:25,419 --> 00:25:31,600
a bit of spider in there we sit an

573
00:25:26,890 --> 00:25:33,340
authentication method and yeah this sit

574
00:25:31,600 --> 00:25:36,100
logged and indicator I think as a visual

575
00:25:33,340 --> 00:25:39,449
thing see it forced user mode basically

576
00:25:36,100 --> 00:25:42,790
means how when Zach comes across an area

577
00:25:39,450 --> 00:25:44,830
a route that needs to it needs all the

578
00:25:42,790 --> 00:25:48,070
indication to access it forces

579
00:25:44,830 --> 00:25:49,179
Zach to logon and then we supply their

580
00:25:48,070 --> 00:25:53,950
credentials down

581
00:25:49,180 --> 00:25:55,600
yeah and then we check under the active

582
00:25:53,950 --> 00:26:02,110
skin so the active scan is quite a high

583
00:25:55,600 --> 00:26:07,740
level skin yep so what we do is we run

584
00:26:02,110 --> 00:26:10,179
this active skin Oh couple minutes and

585
00:26:07,740 --> 00:26:11,770
yeah so this stuff here is just polling

586
00:26:10,180 --> 00:26:17,530
this tells us how far through the skin

587
00:26:11,770 --> 00:26:20,950
we are and then we just rights I'm now

588
00:26:17,530 --> 00:26:22,510
results out using zet proxy caught HTML

589
00:26:20,950 --> 00:26:27,850
reports which you know it's support for

590
00:26:22,510 --> 00:26:32,230
us so let's run this now and I'll just

591
00:26:27,850 --> 00:26:34,959
talk it through so I've got the zip your

592
00:26:32,230 --> 00:26:38,050
idea and no go it's going to be you'll

593
00:26:34,960 --> 00:26:39,670
see it there so I just receipt reseeding

594
00:26:38,050 --> 00:26:47,520
node goats database here to a known

595
00:26:39,670 --> 00:26:52,540
state and starting node either no goat

596
00:26:47,520 --> 00:26:55,889
and just ran grunt air security did we

597
00:26:52,540 --> 00:26:55,889
know we're about to

598
00:26:59,570 --> 00:27:03,259
yeah so that's just selenium they're

599
00:27:01,369 --> 00:27:06,369
logging in and it's going to go to the

600
00:27:03,259 --> 00:27:08,720
profile we're out and send some

601
00:27:06,369 --> 00:27:10,789
parameters through there and then we're

602
00:27:08,720 --> 00:27:14,509
under the active skin and now zaps

603
00:27:10,789 --> 00:27:16,369
active scanning the node application it

604
00:27:14,509 --> 00:27:18,309
gave us some feedback across there you

605
00:27:16,369 --> 00:27:21,168
you won't have a UI and a nightly build

606
00:27:18,309 --> 00:27:26,928
so we get feedback in the terminal as

607
00:27:21,169 --> 00:27:32,179
well and so the developers introduced

608
00:27:26,929 --> 00:27:37,669
some defects this tells us what's

609
00:27:32,179 --> 00:27:40,519
actually happening about to wait with a

610
00:27:37,669 --> 00:27:42,229
port and then it says writing report to

611
00:27:40,519 --> 00:27:44,359
tells us where the reporters and it says

612
00:27:42,229 --> 00:27:47,629
search the generated report for the

613
00:27:44,359 --> 00:27:49,249
probe a foot profile to see the seven

614
00:27:47,629 --> 00:27:52,668
vulnerabilities that exceeded the

615
00:27:49,249 --> 00:27:59,210
user-defined threshold of three so if we

616
00:27:52,669 --> 00:28:03,590
open that report this shows us what

617
00:27:59,210 --> 00:28:05,419
those it shows us what the attacks were

618
00:28:03,590 --> 00:28:07,099
shows us the parameters that shows us

619
00:28:05,419 --> 00:28:09,349
the URL gives us all the evidence we

620
00:28:07,099 --> 00:28:16,729
need in order to I find with it

621
00:28:09,349 --> 00:28:20,330
defectors and to reproduce it and

622
00:28:16,729 --> 00:28:22,159
there's their existing 3d fix so I'm

623
00:28:20,330 --> 00:28:24,678
just going to yeah there's some

624
00:28:22,159 --> 00:28:29,570
information on the air if you want to

625
00:28:24,679 --> 00:28:30,859
use the POC on how to fix your core site

626
00:28:29,570 --> 00:28:33,439
scripting defects so I'm just going to

627
00:28:30,859 --> 00:28:40,879
fast forward dear okay so we've receded

628
00:28:33,440 --> 00:28:43,239
the database run the app again run the

629
00:28:40,879 --> 00:28:43,238
test

630
00:28:49,590 --> 00:28:54,580
yeah the idea here is that the developer

631
00:28:52,570 --> 00:28:57,429
comes in the next morning sees the

632
00:28:54,580 --> 00:29:00,310
defects and here's the passing hours Oh

633
00:28:57,430 --> 00:29:02,410
ceases defects I reached the report

634
00:29:00,310 --> 00:29:05,440
knows exactly where to go to defects the

635
00:29:02,410 --> 00:29:11,670
defects and then I runs it again and we

636
00:29:05,440 --> 00:29:11,670
have a pass and resolve so that's that

637
00:29:12,300 --> 00:29:17,470
yeah and in the we see just their

638
00:29:14,940 --> 00:29:22,350
existing three defects that we had when

639
00:29:17,470 --> 00:29:22,350
we took over the brownfields our project

640
00:29:24,810 --> 00:29:34,330
no yep so here to set up in how to use

641
00:29:29,560 --> 00:29:36,250
is on my github in my book I don't think

642
00:29:34,330 --> 00:29:38,379
we've got time for questions but if

643
00:29:36,250 --> 00:29:40,150
anyone has any questions oh do we do we

644
00:29:38,380 --> 00:29:41,860
have time for not no time for questions

645
00:29:40,150 --> 00:29:44,500
if anyone's got any questions come and

646
00:29:41,860 --> 00:29:50,319
see me afterwards Cheers

647
00:29:44,500 --> 00:29:50,319
[Applause]

