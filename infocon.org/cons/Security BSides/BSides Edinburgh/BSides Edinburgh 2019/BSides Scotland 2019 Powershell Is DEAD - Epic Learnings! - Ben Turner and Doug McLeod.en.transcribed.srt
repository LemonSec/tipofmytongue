1
00:00:02,600 --> 00:00:08,599
so thanks for coming to our talk on

2
00:00:04,370 --> 00:00:09,800
PowerShell is dead epic learnings so

3
00:00:08,599 --> 00:00:11,480
we're going to talk about Gundy ribbon

4
00:00:09,800 --> 00:00:11,900
introduction my name is Brandon this is

5
00:00:11,480 --> 00:00:13,820
good

6
00:00:11,900 --> 00:00:15,980
talky - a little bit about what is

7
00:00:13,820 --> 00:00:17,330
PowerShell and when people say what is

8
00:00:15,980 --> 00:00:19,460
PowerShell all the different key

9
00:00:17,330 --> 00:00:21,709
components of PowerShell and whether it

10
00:00:19,460 --> 00:00:23,480
is or is not dead we're going to talk a

11
00:00:21,710 --> 00:00:25,189
little bit by the evolution of posture -

12
00:00:23,480 --> 00:00:27,800
which is a command control framework

13
00:00:25,189 --> 00:00:30,140
written purely in PowerShell by myself

14
00:00:27,800 --> 00:00:31,880
and other members and attitude we're

15
00:00:30,140 --> 00:00:33,560
then going to talk a bit about EDR some

16
00:00:31,880 --> 00:00:35,239
of the history and challenges we face on

17
00:00:33,560 --> 00:00:37,489
the offensive side as well as some of

18
00:00:35,239 --> 00:00:38,809
the stuff on the defensive side and then

19
00:00:37,489 --> 00:00:40,370
a couple of teacher predictions and

20
00:00:38,809 --> 00:00:45,169
hindsight and you know it's already

21
00:00:40,370 --> 00:00:47,660
industries going perspective so Who am I

22
00:00:45,170 --> 00:00:49,609
so my name's Ben Turner I had at the net

23
00:00:47,660 --> 00:00:50,898
read red team so I have direct oversight

24
00:00:49,609 --> 00:00:53,390
of all the red team engagements that

25
00:00:50,899 --> 00:00:55,070
happen I do get involved from time to

26
00:00:53,390 --> 00:00:56,600
time BAFTA tended to step away a little

27
00:00:55,070 --> 00:00:59,090
bit now you just to kind of have

28
00:00:56,600 --> 00:01:02,120
oversight of all the engagements I am a

29
00:00:59,090 --> 00:01:05,269
crest see shafts and TTL and happened

30
00:01:02,120 --> 00:01:07,039
for me is done some Red Team Training

31
00:01:05,269 --> 00:01:09,380
and that we've delivered a steel confer

32
00:01:07,040 --> 00:01:11,930
last couple of years also done some

33
00:01:09,380 --> 00:01:14,270
workshops on red teaming and supply as

34
00:01:11,930 --> 00:01:16,280
well I've done a few talks as well in

35
00:01:14,270 --> 00:01:18,770
the past if you want to check them out

36
00:01:16,280 --> 00:01:20,750
put a few links there and also the lead

37
00:01:18,770 --> 00:01:25,490
developer of Cauchy - which we'll talk a

38
00:01:20,750 --> 00:01:27,920
little later about other than your eyes

39
00:01:25,490 --> 00:01:29,360
the relays the end towards were gonna be

40
00:01:27,920 --> 00:01:31,009
so long so I decided to keep me in short

41
00:01:29,360 --> 00:01:33,320
and sharp and then I saw Ben's I found a

42
00:01:31,009 --> 00:01:35,119
bit of Padme note when I see a picture

43
00:01:33,320 --> 00:01:37,309
to me but basically I'm a pencil

44
00:01:35,119 --> 00:01:38,720
scooting Sultanate natured one of the

45
00:01:37,310 --> 00:01:40,759
red team leads to have multiple red team

46
00:01:38,720 --> 00:01:43,429
leads to cut out offensive engagements

47
00:01:40,759 --> 00:01:44,960
for intelligence red teaming against

48
00:01:43,430 --> 00:01:51,200
large banks and insurers and things in

49
00:01:44,960 --> 00:01:52,820
UK and also you may have noticed we were

50
00:01:51,200 --> 00:01:54,710
called team spy series also we attend

51
00:01:52,820 --> 00:01:55,880
the year become CTF every year so bit

52
00:01:54,710 --> 00:01:58,009
sad that it's the last year this year

53
00:01:55,880 --> 00:01:59,869
we've had first place last couple years

54
00:01:58,009 --> 00:02:01,250
and gotta hope for the trio this year

55
00:01:59,869 --> 00:02:03,170
but some good write-ups if any of you

56
00:02:01,250 --> 00:02:05,119
are interested in CTF some quite good

57
00:02:03,170 --> 00:02:07,130
challenges we quite like going out there

58
00:02:05,119 --> 00:02:08,810
as a team and challenging ourselves so

59
00:02:07,130 --> 00:02:10,280
if you want to take a notice from the

60
00:02:08,810 --> 00:02:11,810
links we will make the slides available

61
00:02:10,280 --> 00:02:13,240
for everyone a bit later on

62
00:02:11,810 --> 00:02:17,200
slideshare.net so you can

63
00:02:13,240 --> 00:02:18,580
grabbing repeating chances ooh we've

64
00:02:17,200 --> 00:02:20,709
gotta get going I just want to reference

65
00:02:18,580 --> 00:02:22,210
a few tools and books that we kind of

66
00:02:20,710 --> 00:02:24,220
use on a daily basis from our an

67
00:02:22,210 --> 00:02:25,900
offensive perspective I'm not going to

68
00:02:24,220 --> 00:02:27,760
point out the more because we'll make

69
00:02:25,900 --> 00:02:29,080
the slides available but first let's

70
00:02:27,760 --> 00:02:30,760
hacker which is a bit like process

71
00:02:29,080 --> 00:02:32,230
explorer is one that I use pretty much

72
00:02:30,760 --> 00:02:34,179
my daily basis is going to be a couple

73
00:02:32,230 --> 00:02:36,280
of screenshots with this in it's got a

74
00:02:34,180 --> 00:02:37,990
couple of good features above process

75
00:02:36,280 --> 00:02:39,820
Explorer things like you can receive

76
00:02:37,990 --> 00:02:41,530
tokens and the threads and you can

77
00:02:39,820 --> 00:02:43,510
manipulate those within protis hacker

78
00:02:41,530 --> 00:02:45,450
itself and it got some quite good new

79
00:02:43,510 --> 00:02:48,970
points from a dotnet perspective which

80
00:02:45,450 --> 00:02:51,160
later we do quite a lot on the process

81
00:02:48,970 --> 00:02:52,930
migration injection when we didn't read

82
00:02:51,160 --> 00:02:54,430
to you and being able to sort of see the

83
00:02:52,930 --> 00:02:55,540
pages in memory is a really great way

84
00:02:54,430 --> 00:02:57,550
for us to know whether things are

85
00:02:55,540 --> 00:02:59,440
happening or not happening so the M map

86
00:02:57,550 --> 00:03:02,190
is a great way for us to do that and

87
00:02:59,440 --> 00:03:04,960
that's all available from sysinternals

88
00:03:02,190 --> 00:03:06,850
also cff Explorer for NT core that's

89
00:03:04,960 --> 00:03:08,890
another really good application I have

90
00:03:06,850 --> 00:03:10,810
on my windows book so any DLL any

91
00:03:08,890 --> 00:03:13,089
executable you can right click open with

92
00:03:10,810 --> 00:03:15,160
if explorer you can see all of the

93
00:03:13,090 --> 00:03:17,320
binding output all the hex you can see

94
00:03:15,160 --> 00:03:19,060
the exports and then in a DLL you can

95
00:03:17,320 --> 00:03:20,380
patch them on the fly so it's a really

96
00:03:19,060 --> 00:03:21,910
good tool like we use quite regularly

97
00:03:20,380 --> 00:03:24,790
when we do this or reversing and I'm

98
00:03:21,910 --> 00:03:26,260
coming and another one if you're not

99
00:03:24,790 --> 00:03:28,450
familiar is property cap and property

100
00:03:26,260 --> 00:03:29,950
change so from a writing perspective if

101
00:03:28,450 --> 00:03:32,049
you've got a soft proxy this allows you

102
00:03:29,950 --> 00:03:34,329
to use any of your tools that sort of

103
00:03:32,050 --> 00:03:36,340
your sign against your target so even

104
00:03:34,330 --> 00:03:38,350
things like graphical so like our DP or

105
00:03:36,340 --> 00:03:39,880
telnet again sort of mainframes that

106
00:03:38,350 --> 00:03:44,519
kind of thing you can do all this by

107
00:03:39,880 --> 00:03:44,519
using property chains and pops you cap

108
00:03:44,820 --> 00:03:48,790
another couple of books that I just

109
00:03:46,720 --> 00:03:50,170
wanted to reference as well so I've been

110
00:03:48,790 --> 00:03:51,220
pen testing me quite a few years but I

111
00:03:50,170 --> 00:03:53,140
wanted to kind of get a bit of a lower

112
00:03:51,220 --> 00:03:54,790
level knowledge of the Windows API tools

113
00:03:53,140 --> 00:03:57,880
and tokens and handles and how this all

114
00:03:54,790 --> 00:03:59,650
works windows internal part one and so I

115
00:03:57,880 --> 00:04:00,579
recently got on them so halfway through

116
00:03:59,650 --> 00:04:03,400
it I think it's a really good reference

117
00:04:00,580 --> 00:04:05,290
book it kind of dives into some quite

118
00:04:03,400 --> 00:04:07,120
low level knowledge but kind of starts

119
00:04:05,290 --> 00:04:08,380
to click a few pieces into place for me

120
00:04:07,120 --> 00:04:09,730
when I'm actually sort of doing things

121
00:04:08,380 --> 00:04:10,690
like process migration and stuff like

122
00:04:09,730 --> 00:04:13,630
that so I think it's a great way to

123
00:04:10,690 --> 00:04:16,238
learn also the red team and blue team

124
00:04:13,630 --> 00:04:18,190
build menu so I think the more we can

125
00:04:16,238 --> 00:04:20,649
know about the defensive side the better

126
00:04:18,190 --> 00:04:22,060
we can do a pensive offensive work for

127
00:04:20,649 --> 00:04:22,950
our clients so we know how they think

128
00:04:22,060 --> 00:04:24,510
and how they were

129
00:04:22,950 --> 00:04:27,060
we can work around them and talk about

130
00:04:24,510 --> 00:04:28,310
avoidance techniques which we'll talk

131
00:04:27,060 --> 00:04:30,570
about a little bit later in this talk

132
00:04:28,310 --> 00:04:31,110
and also the hackers playbook I don't

133
00:04:30,570 --> 00:04:33,150
like that one

134
00:04:31,110 --> 00:04:37,410
mainly because pushy too is in there so

135
00:04:33,150 --> 00:04:39,179
I took with that this year so that sort

136
00:04:37,410 --> 00:04:41,580
of crooks of the tool is is what is

137
00:04:39,180 --> 00:04:44,190
PowerShell and is it dead I think when a

138
00:04:41,580 --> 00:04:46,169
lot of people say how shells dead a lot

139
00:04:44,190 --> 00:04:49,020
of its come down from like I guess the

140
00:04:46,170 --> 00:04:50,790
elites of the offensive world started to

141
00:04:49,020 --> 00:04:53,669
move our business or C sharp and dotnet

142
00:04:50,790 --> 00:04:54,870
and but when people say is powerful dead

143
00:04:53,670 --> 00:04:57,510
I think you've got to think about it in

144
00:04:54,870 --> 00:04:59,850
many different ways so do they mean just

145
00:04:57,510 --> 00:05:02,280
directly the PowerShell executable so if

146
00:04:59,850 --> 00:05:04,500
you see this running on a box you know

147
00:05:02,280 --> 00:05:05,700
is that malicious is that what they say

148
00:05:04,500 --> 00:05:07,710
is dead so you can no longer run

149
00:05:05,700 --> 00:05:08,729
standalone powerful executables on the

150
00:05:07,710 --> 00:05:11,549
windows host because they're blocking

151
00:05:08,730 --> 00:05:13,440
you know is that why it's dead is it

152
00:05:11,550 --> 00:05:15,540
actually the system got management

153
00:05:13,440 --> 00:05:17,280
dalmatian dll so that's the crooks

154
00:05:15,540 --> 00:05:20,010
behind PowerShell so parish register

155
00:05:17,280 --> 00:05:21,599
wrapper for this DLL so is it when they

156
00:05:20,010 --> 00:05:23,760
say PowerShell is dead that they mean

157
00:05:21,600 --> 00:05:25,380
that and now because you've got other

158
00:05:23,760 --> 00:05:26,909
techniques from EDR that can detect

159
00:05:25,380 --> 00:05:28,950
anything that's loaded into that process

160
00:05:26,910 --> 00:05:31,470
that they can now monitor for this so is

161
00:05:28,950 --> 00:05:33,060
it that that they think it's dead or is

162
00:05:31,470 --> 00:05:34,860
it the folder so that the folder that

163
00:05:33,060 --> 00:05:36,360
the executable is launched from so if

164
00:05:34,860 --> 00:05:37,920
you move the boulder from there to sort

165
00:05:36,360 --> 00:05:39,150
of C temp does that mean now you've got

166
00:05:37,920 --> 00:05:40,380
free rein again to run things like

167
00:05:39,150 --> 00:05:43,859
PowerShell as long as you call it

168
00:05:40,380 --> 00:05:45,480
something else and also since the

169
00:05:43,860 --> 00:05:46,920
introduction of even four and five a lot

170
00:05:45,480 --> 00:05:48,390
more advanced security features have

171
00:05:46,920 --> 00:05:50,460
been implemented in perishable things

172
00:05:48,390 --> 00:05:52,530
like transcript logging script block

173
00:05:50,460 --> 00:05:54,570
logging a mess on integration which

174
00:05:52,530 --> 00:05:56,609
allows AV vendors now to scan palatal

175
00:05:54,570 --> 00:05:57,990
and all of those one-liners that was a

176
00:05:56,610 --> 00:06:00,330
lot a lot of the ways that people

177
00:05:57,990 --> 00:06:01,650
getting around it and practice began

178
00:06:00,330 --> 00:06:03,210
around it was basically you've got

179
00:06:01,650 --> 00:06:04,830
direct access to memory she can get

180
00:06:03,210 --> 00:06:08,159
script load into memory without getting

181
00:06:04,830 --> 00:06:09,930
scammed by 81st so is it that PowerShell

182
00:06:08,160 --> 00:06:12,720
v2 that doesn't have any of these are

183
00:06:09,930 --> 00:06:14,700
fine and powerful and five is dead so I

184
00:06:12,720 --> 00:06:16,230
just want to talk put those key concepts

185
00:06:14,700 --> 00:06:20,670
into your mind and we'll talk a little

186
00:06:16,230 --> 00:06:23,340
about this brings us onto toward the

187
00:06:20,670 --> 00:06:24,780
evolution of pushy to so pushy to is a

188
00:06:23,340 --> 00:06:26,310
command control framework M it was

189
00:06:24,780 --> 00:06:28,200
clearly written in PowerShell to start

190
00:06:26,310 --> 00:06:29,970
with from a completely client-side and

191
00:06:28,200 --> 00:06:31,169
server-side perspective so you install

192
00:06:29,970 --> 00:06:33,930
it on the windows box

193
00:06:31,169 --> 00:06:35,789
you target windows in distribution its

194
00:06:33,930 --> 00:06:37,110
lately developed into sort of - from a

195
00:06:35,789 --> 00:06:39,900
server side we'll talk a little bit

196
00:06:37,110 --> 00:06:41,969
about that in a sec but it was mainly

197
00:06:39,900 --> 00:06:42,929
written I guess from my perspective just

198
00:06:41,969 --> 00:06:44,279
because I want to do an achromatic

199
00:06:42,930 --> 00:06:46,680
you'll pretty much work I wanted to

200
00:06:44,279 --> 00:06:48,360
understand how you get a command from

201
00:06:46,680 --> 00:06:50,879
over here to talk through a proxy

202
00:06:48,360 --> 00:06:53,159
through the internet 3 we directors back

203
00:06:50,879 --> 00:06:55,620
to your host and make it all work make

204
00:06:53,159 --> 00:06:57,479
it all secure I guess it's not about a

205
00:06:55,620 --> 00:07:00,090
dream of 60 lines of code they're just

206
00:06:57,479 --> 00:07:01,590
basically a netcat reverse shell into

207
00:07:00,090 --> 00:07:02,878
what it is now which is probably tens of

208
00:07:01,590 --> 00:07:04,529
thousands of lines of code with sort of

209
00:07:02,879 --> 00:07:06,180
multiple people helping develop it and

210
00:07:04,529 --> 00:07:08,490
it's actually quite a good framework and

211
00:07:06,180 --> 00:07:09,900
a lot of people think that because it's

212
00:07:08,490 --> 00:07:12,089
got bachi - it probably doesn't do any

213
00:07:09,900 --> 00:07:13,909
justice it's just a PowerShell door XE

214
00:07:12,089 --> 00:07:18,120
frame where actually it's a lot more

215
00:07:13,909 --> 00:07:19,800
about now in the evolution so we've been

216
00:07:18,120 --> 00:07:21,719
going at it for about four years in

217
00:07:19,800 --> 00:07:24,029
terms of writing and developing Posse -

218
00:07:21,719 --> 00:07:26,430
it was first developed in power sharp

219
00:07:24,029 --> 00:07:29,310
and server-side and client-side in

220
00:07:26,430 --> 00:07:31,050
December we release version - we had a C

221
00:07:29,310 --> 00:07:32,729
sharp fury it looked a little bit like

222
00:07:31,050 --> 00:07:35,009
Armitage in COBOL there's a lot of

223
00:07:32,729 --> 00:07:37,589
right-click get system right click get

224
00:07:35,009 --> 00:07:39,180
screenshot that kind of feature what I

225
00:07:37,589 --> 00:07:40,409
ended up was being more a pain in the

226
00:07:39,180 --> 00:07:42,449
ass to the eyes because you have to sort

227
00:07:40,409 --> 00:07:43,949
of maintain two faults of the project

228
00:07:42,449 --> 00:07:46,680
every time you make an update to the

229
00:07:43,949 --> 00:07:48,300
command line part yeah they do we part

230
00:07:46,680 --> 00:07:49,349
and it was just a bit of a mess and but

231
00:07:48,300 --> 00:07:51,719
it was a good learning experience I

232
00:07:49,349 --> 00:07:52,979
think we learned a lot from it and when

233
00:07:51,719 --> 00:07:54,719
you're really an operator you really

234
00:07:52,979 --> 00:07:56,310
hard asset you just want command line

235
00:07:54,719 --> 00:07:57,479
you just want to know what you type in

236
00:07:56,310 --> 00:07:59,189
and what you get back you don't have to

237
00:07:57,479 --> 00:08:00,930
be waiting the GUI sort of propagate

238
00:07:59,189 --> 00:08:01,949
waiting for sort of things to appear if

239
00:08:00,930 --> 00:08:03,839
you do something like online you

240
00:08:01,949 --> 00:08:05,520
instantly get the output back and that's

241
00:08:03,839 --> 00:08:07,110
what we found was most useful when you

242
00:08:05,520 --> 00:08:10,139
really hard at it from an operator

243
00:08:07,110 --> 00:08:13,889
perspective we are also introducing like

244
00:08:10,139 --> 00:08:16,409
a posse to slack channel and in October

245
00:08:13,889 --> 00:08:18,659
of 2017 we actually release the

246
00:08:16,409 --> 00:08:20,310
reflectively allow so this is those who

247
00:08:18,659 --> 00:08:21,930
don't know it's actually loading manage

248
00:08:20,310 --> 00:08:24,419
code which is basically what power shop

249
00:08:21,930 --> 00:08:26,339
is into an unmanaged code space Steven

250
00:08:24,419 --> 00:08:27,719
Huey did kind of all the crooks of the

251
00:08:26,339 --> 00:08:29,939
word behind it and we just kind of use

252
00:08:27,719 --> 00:08:31,529
that curry to build into pots so what

253
00:08:29,939 --> 00:08:33,329
that meant now is if you are running in

254
00:08:31,529 --> 00:08:35,010
a partial that exit process you can

255
00:08:33,328 --> 00:08:36,899
migrate out of that into any of the

256
00:08:35,010 --> 00:08:38,610
processes owned by that user and that

257
00:08:36,899 --> 00:08:40,589
means then from a detection and

258
00:08:38,610 --> 00:08:42,329
perspective they have to get a little

259
00:08:40,589 --> 00:08:43,709
bit cleverer on how they starts texting

260
00:08:42,328 --> 00:08:44,150
things and this is where the system got

261
00:08:43,708 --> 00:08:47,839
knowledge

262
00:08:44,150 --> 00:08:50,150
Meishan gmail starts to come in we also

263
00:08:47,840 --> 00:08:52,070
released sharp socks at the tail end of

264
00:08:50,150 --> 00:08:54,079
2017 just after deer become so a guy

265
00:08:52,070 --> 00:08:55,910
called Rob Mazen so that allowed us to

266
00:08:54,080 --> 00:08:58,400
basically have a complete stocked proxy

267
00:08:55,910 --> 00:09:00,079
through proxy - that allows you to do

268
00:08:58,400 --> 00:09:01,880
things like our dps before it is very

269
00:09:00,080 --> 00:09:04,340
much command line driven so you can load

270
00:09:01,880 --> 00:09:07,160
PowerShell scripts or anything that's on

271
00:09:04,340 --> 00:09:09,440
the host itself the shop so you can

272
00:09:07,160 --> 00:09:12,380
deploy that it will all be done by HTTP

273
00:09:09,440 --> 00:09:14,120
HTTP beatings all encrypted and basic

274
00:09:12,380 --> 00:09:15,980
can be running an RDP session to their

275
00:09:14,120 --> 00:09:19,400
domain controller through a compromised

276
00:09:15,980 --> 00:09:22,070
host so that was a really big open up

277
00:09:19,400 --> 00:09:24,560
for us from a party - perspective and

278
00:09:22,070 --> 00:09:26,570
also in 2017 we migrated over to Python

279
00:09:24,560 --> 00:09:29,599
so from a c2 server perspective it was a

280
00:09:26,570 --> 00:09:31,010
lot more I guess easy to implement

281
00:09:29,600 --> 00:09:32,540
because a lot of us as offensive guys

282
00:09:31,010 --> 00:09:33,380
want to be on Linux because you kind of

283
00:09:32,540 --> 00:09:35,449
know what you're doing on the command

284
00:09:33,380 --> 00:09:37,640
line so we're on the c2 server side to

285
00:09:35,450 --> 00:09:39,290
be able to be used on a Linux side and

286
00:09:37,640 --> 00:09:41,300
not just a window so we moved over to

287
00:09:39,290 --> 00:09:43,569
Python very much the client in the

288
00:09:41,300 --> 00:09:46,099
implant site is still PowerShell driven

289
00:09:43,570 --> 00:09:47,840
but from a see to serve Richmond it's

290
00:09:46,100 --> 00:09:50,740
more manageable and you can move it over

291
00:09:47,840 --> 00:09:52,700
different different platforms as well

292
00:09:50,740 --> 00:09:54,800
2018 actually decided you some

293
00:09:52,700 --> 00:09:56,480
documentation so to use them to make you

294
00:09:54,800 --> 00:09:59,839
never had any documentation really so if

295
00:09:56,480 --> 00:10:01,400
it was about time and we also released a

296
00:09:59,840 --> 00:10:03,440
Python in plan so now what was actually

297
00:10:01,400 --> 00:10:05,120
originally only power shut up has now

298
00:10:03,440 --> 00:10:06,410
gone to Python and now you can get a

299
00:10:05,120 --> 00:10:08,900
Python implants so actually you can get

300
00:10:06,410 --> 00:10:10,189
over a shell back by on a Mac and things

301
00:10:08,900 --> 00:10:12,530
laughs so we've been doing engagements

302
00:10:10,190 --> 00:10:16,040
where the cobalt doesn't seem to do Mac

303
00:10:12,530 --> 00:10:17,449
Empire the yre one does a little bit out

304
00:10:16,040 --> 00:10:18,829
there that we could get hands on and

305
00:10:17,450 --> 00:10:20,570
actually you know make our own so we

306
00:10:18,830 --> 00:10:24,500
kind of introduced this with an pushing

307
00:10:20,570 --> 00:10:25,910
to as well now and then in 2019 which

308
00:10:24,500 --> 00:10:27,590
we'll talk about at the end is basically

309
00:10:25,910 --> 00:10:29,480
a shopping plan so getting getting up

310
00:10:27,590 --> 00:10:31,640
with a cool kid who decided to show up

311
00:10:29,480 --> 00:10:32,930
in plant Christmas over my Christmas

312
00:10:31,640 --> 00:10:34,910
holiday store looking better today than

313
00:10:32,930 --> 00:10:36,920
right a sharp implant which we'll talk

314
00:10:34,910 --> 00:10:38,540
about and also not that you probably

315
00:10:36,920 --> 00:10:42,020
want to use it or you think you have any

316
00:10:38,540 --> 00:10:44,000
clients that have 2003 in XP the c-sharp

317
00:10:42,020 --> 00:10:45,350
version does actually work on that as

318
00:10:44,000 --> 00:10:47,570
well it's just quite amazing from our

319
00:10:45,350 --> 00:10:50,770
perspective there's also this crossing

320
00:10:47,570 --> 00:10:50,770
that would it wasn't

321
00:10:52,490 --> 00:10:58,019
so this is what the CTU servant looked

322
00:10:54,839 --> 00:10:59,220
like you have an implant Handler and a

323
00:10:58,019 --> 00:11:00,690
server and you basically get the

324
00:10:59,220 --> 00:11:02,339
implants on the right and on the left

325
00:11:00,690 --> 00:11:04,139
you see the output that's very simple

326
00:11:02,339 --> 00:11:06,449
you open a Windows box this is again the

327
00:11:04,139 --> 00:11:08,220
2016 release so you have like almost

328
00:11:06,449 --> 00:11:09,628
have split-screen one on the right

329
00:11:08,220 --> 00:11:10,980
showed you implies communal on the lap

330
00:11:09,629 --> 00:11:12,300
side you're out there and you get

331
00:11:10,980 --> 00:11:13,680
logging logging was the kind of key

332
00:11:12,300 --> 00:11:14,939
important part about all of this the

333
00:11:13,680 --> 00:11:17,040
reason why we made it was because

334
00:11:14,939 --> 00:11:18,959
everything you do need to be logged from

335
00:11:17,040 --> 00:11:20,250
an app from a defensive perspective so

336
00:11:18,959 --> 00:11:22,258
that when we go to the client and say we

337
00:11:20,250 --> 00:11:23,879
didn't list against your stain they can

338
00:11:22,259 --> 00:11:25,170
then learn to work with that and kind of

339
00:11:23,879 --> 00:11:27,230
make their detection and put them in

340
00:11:25,170 --> 00:11:29,219
place to what we actually did and

341
00:11:27,230 --> 00:11:31,110
timings are really quite important so if

342
00:11:29,220 --> 00:11:32,939
you don't track your logs accordingly

343
00:11:31,110 --> 00:11:34,439
then obviously you're giving it false

344
00:11:32,939 --> 00:11:35,699
data to the client which isn't helpful

345
00:11:34,439 --> 00:11:37,170
for them when they're trying to track

346
00:11:35,699 --> 00:11:38,819
back through all their logs of all their

347
00:11:37,170 --> 00:11:41,930
different systems and actually play back

348
00:11:38,819 --> 00:11:44,699
this is more of a purple team exercise

349
00:11:41,930 --> 00:11:46,050
so again back in 2016 what did

350
00:11:44,699 --> 00:11:48,569
PowerShell look like when you had

351
00:11:46,050 --> 00:11:50,430
compromised a host so I've been hoping

352
00:11:48,569 --> 00:11:52,319
to see what's wrong with this but quite

353
00:11:50,430 --> 00:11:54,209
simply there's a PowerShell one-liner

354
00:11:52,319 --> 00:11:58,229
running there so our process running

355
00:11:54,209 --> 00:11:59,489
this is the malicious situ running on

356
00:11:58,230 --> 00:12:02,670
any host so this is how you would have

357
00:11:59,490 --> 00:12:04,470
found quashy - back in 2016 so if from a

358
00:12:02,670 --> 00:12:05,610
defensive perspective they knew that was

359
00:12:04,470 --> 00:12:07,439
something they've been compromised they

360
00:12:05,610 --> 00:12:08,970
knew the power of running what do we do

361
00:12:07,439 --> 00:12:10,649
to try and find out a little bit more

362
00:12:08,970 --> 00:12:13,170
information is the command line

363
00:12:10,649 --> 00:12:16,620
arguments so anything with a - e flag is

364
00:12:13,170 --> 00:12:17,880
generally malicious mostly malicious and

365
00:12:16,620 --> 00:12:21,120
while that is just the basics for

366
00:12:17,880 --> 00:12:23,069
encoded blob of data so this is what it

367
00:12:21,120 --> 00:12:24,600
looks like a lot of data no legitimate

368
00:12:23,069 --> 00:12:27,479
process is really running things like

369
00:12:24,600 --> 00:12:28,740
this nowadays and what that means as

370
00:12:27,480 --> 00:12:30,389
well because it's basic C forms we know

371
00:12:28,740 --> 00:12:31,589
is only encoded you can reverse that and

372
00:12:30,389 --> 00:12:33,269
you can quite happily you get the

373
00:12:31,589 --> 00:12:35,579
basically the drop or the potty to

374
00:12:33,269 --> 00:12:36,930
implant back in its raw state so you can

375
00:12:35,579 --> 00:12:38,910
see the commanding control framework so

376
00:12:36,930 --> 00:12:41,160
it's sort of beaconing - you can see the

377
00:12:38,910 --> 00:12:44,930
crypto that it's using and see all of

378
00:12:41,160 --> 00:12:44,930
the data from The Dropper perspective

379
00:12:45,319 --> 00:12:50,819
and what that meant was when - the EDR

380
00:12:47,910 --> 00:12:52,469
soar timeline came along was if you do a

381
00:12:50,819 --> 00:12:54,779
quick search across your entire estate

382
00:12:52,470 --> 00:12:56,279
the process named PowerShell basically

383
00:12:54,779 --> 00:12:58,470
you can find all their own plans so from

384
00:12:56,279 --> 00:12:59,939
a defense perspective one's easy arcane

385
00:12:58,470 --> 00:13:01,380
thing we've kind of had it with that

386
00:12:59,939 --> 00:13:02,969
game because this is how easy it was

387
00:13:01,380 --> 00:13:04,770
kind of find where we

388
00:13:02,970 --> 00:13:06,540
that's entire estate once they've got

389
00:13:04,770 --> 00:13:08,400
the good visibility of all our em points

390
00:13:06,540 --> 00:13:09,839
and then they can dive into any one of

391
00:13:08,400 --> 00:13:11,160
these to see the command-line arguments

392
00:13:09,840 --> 00:13:13,230
reverse those command-line arguments

393
00:13:11,160 --> 00:13:15,600
know where we're beating to and block

394
00:13:13,230 --> 00:13:16,980
those beacons back we're out that's how

395
00:13:15,600 --> 00:13:19,170
quick it can be and the defensive

396
00:13:16,980 --> 00:13:20,550
perspective to stop an attack if they're

397
00:13:19,170 --> 00:13:21,630
anything like PowerShell as long as

398
00:13:20,550 --> 00:13:26,339
you've got the right things on the host

399
00:13:21,630 --> 00:13:28,650
like EDR so I guess at this point the

400
00:13:26,340 --> 00:13:30,180
approach was more block powershell on

401
00:13:28,650 --> 00:13:31,740
all endpoints don't let PowerShell one

402
00:13:30,180 --> 00:13:34,650
that's the fix that's easy happy days

403
00:13:31,740 --> 00:13:36,090
winner only I'll have signed PowerShell

404
00:13:34,650 --> 00:13:37,949
scripts so you know they're not gonna be

405
00:13:36,090 --> 00:13:39,450
signed so what if they can get them in

406
00:13:37,950 --> 00:13:40,980
in any way they can be ran because

407
00:13:39,450 --> 00:13:42,870
process what did they can get around

408
00:13:40,980 --> 00:13:44,700
that then they can only run sign

409
00:13:42,870 --> 00:13:46,050
powerful scripts so it's a winner I

410
00:13:44,700 --> 00:13:48,150
guess the modern approach now is

411
00:13:46,050 --> 00:13:49,880
actually not by it's more upgrade to

412
00:13:48,150 --> 00:13:52,980
partial pi which has greater visibility

413
00:13:49,880 --> 00:13:54,630
so that the attackers in let them run

414
00:13:52,980 --> 00:13:56,700
those one-liners and then detect them on

415
00:13:54,630 --> 00:13:58,230
so in sort of mid stages there at app so

416
00:13:56,700 --> 00:13:59,970
you can actually see what they go in

417
00:13:58,230 --> 00:14:02,340
after and what they're looking for on

418
00:13:59,970 --> 00:14:04,140
your estate so things like a MSI

419
00:14:02,340 --> 00:14:06,150
integration with a B so that's now

420
00:14:04,140 --> 00:14:08,310
powershell version 5 the transcript

421
00:14:06,150 --> 00:14:10,319
logging module login script pod login so

422
00:14:08,310 --> 00:14:11,910
if you run watch you - in PowerShell 5

423
00:14:10,320 --> 00:14:13,650
you will see every command that's ever

424
00:14:11,910 --> 00:14:15,930
ran so that's the kind of visibility

425
00:14:13,650 --> 00:14:19,439
have with all these extra features in

426
00:14:15,930 --> 00:14:21,810
PowerShell 5 having said all of this

427
00:14:19,440 --> 00:14:24,510
back in 2018 by RDS and really great

428
00:14:21,810 --> 00:14:26,579
research and according to fire IAB 233

429
00:14:24,510 --> 00:14:28,560
have been basically compromising lots of

430
00:14:26,580 --> 00:14:30,600
different aerospace industries across

431
00:14:28,560 --> 00:14:32,910
2018 is matching really good bloggers if

432
00:14:30,600 --> 00:14:34,650
you're interested so posse team has been

433
00:14:32,910 --> 00:14:36,360
noted to be used this is the literally

434
00:14:34,650 --> 00:14:37,980
the PowerShell version as well so this

435
00:14:36,360 --> 00:14:39,780
is the very original PowerShell Dropper

436
00:14:37,980 --> 00:14:41,580
not the Python server which has got a

437
00:14:39,780 --> 00:14:43,589
little better not the reflective DLL

438
00:14:41,580 --> 00:14:46,160
they are literally using the powers on

439
00:14:43,590 --> 00:14:49,140
one-liners compromised countries sorry

440
00:14:46,160 --> 00:14:51,230
organizations across the world and it's

441
00:14:49,140 --> 00:14:53,640
suspected attribution is around as well

442
00:14:51,230 --> 00:14:58,560
so if you want to take it's quite an

443
00:14:53,640 --> 00:15:00,270
interesting just through articles it

444
00:14:58,560 --> 00:15:01,770
brings me on sort of the.net assembly so

445
00:15:00,270 --> 00:15:03,960
what is the PowerShell executable

446
00:15:01,770 --> 00:15:05,460
exactly so basically what that is is

447
00:15:03,960 --> 00:15:07,650
that as I said before is a wrapper for

448
00:15:05,460 --> 00:15:09,780
the.net automation DLL and what you'll

449
00:15:07,650 --> 00:15:11,520
see if you look into a process hacker or

450
00:15:09,780 --> 00:15:13,650
process Explorer and you look at a

451
00:15:11,520 --> 00:15:15,470
powershell binaries running you'll see

452
00:15:13,650 --> 00:15:17,209
these two tabs don't necessarily

453
00:15:15,470 --> 00:15:19,880
performance well I'll show you is this

454
00:15:17,210 --> 00:15:21,020
loaded the CLR inside of that process

455
00:15:19,880 --> 00:15:23,120
and in this version its PowerShell

456
00:15:21,020 --> 00:15:24,770
booting tools are at this CL are version

457
00:15:23,120 --> 00:15:26,870
two which is in effect PowerShell

458
00:15:24,770 --> 00:15:28,340
version two if you look at the modules

459
00:15:26,870 --> 00:15:30,200
load its these are all the deals are

460
00:15:28,340 --> 00:15:32,000
loaded with in that process you'll see

461
00:15:30,200 --> 00:15:33,920
the management automation that has

462
00:15:32,000 --> 00:15:36,500
always loaded within a process that's

463
00:15:33,920 --> 00:15:38,630
running motion you can't get around that

464
00:15:36,500 --> 00:15:40,610
carbon is done some quite good work on

465
00:15:38,630 --> 00:15:42,710
how you could maybe manipulate that but

466
00:15:40,610 --> 00:15:44,090
it's not trivial at all so anything

467
00:15:42,710 --> 00:15:46,100
that's running power tool or anything in

468
00:15:44,090 --> 00:15:47,210
unmanaged world or partial will always

469
00:15:46,100 --> 00:15:48,590
have the system that might have an

470
00:15:47,210 --> 00:15:53,420
automation DLL and that's a great way

471
00:15:48,590 --> 00:15:56,270
for detecting it so this is when we

472
00:15:53,420 --> 00:15:57,860
introduced the reflectively allow about

473
00:15:56,270 --> 00:16:00,650
from the Steven hero stuff so that

474
00:15:57,860 --> 00:16:03,530
basically is loading the dotnet version

475
00:16:00,650 --> 00:16:05,720
to CL are inside of unmanaged code so a

476
00:16:03,530 --> 00:16:08,209
managed code is basically you know the C

477
00:16:05,720 --> 00:16:11,300
world instead of the c-sharp world and

478
00:16:08,210 --> 00:16:12,950
so and again this is this is code the

479
00:16:11,300 --> 00:16:14,569
Steven tiers didn't work on it's loading

480
00:16:12,950 --> 00:16:16,520
the version to the CLR so well that is

481
00:16:14,570 --> 00:16:17,870
what that does as well if you're running

482
00:16:16,520 --> 00:16:20,449
on a host that has version 2 and version

483
00:16:17,870 --> 00:16:21,950
4 which is quite common except for

484
00:16:20,450 --> 00:16:25,040
version 10 now which is actually a

485
00:16:21,950 --> 00:16:26,960
remove support for dotnet b2 it allows

486
00:16:25,040 --> 00:16:28,880
you to basically remove all the a MSI

487
00:16:26,960 --> 00:16:30,260
integration or the transcript logging

488
00:16:28,880 --> 00:16:32,630
script but log in because you're loading

489
00:16:30,260 --> 00:16:33,770
version 2 of the CLR not version full so

490
00:16:32,630 --> 00:16:35,300
these are kind of things you can do on a

491
00:16:33,770 --> 00:16:37,430
host if you know they've got both of the

492
00:16:35,300 --> 00:16:38,959
versions run the downgrade attack all

493
00:16:37,430 --> 00:16:41,089
the common scripts like power of you

494
00:16:38,960 --> 00:16:43,280
were always great tools out there that

495
00:16:41,090 --> 00:16:44,870
you want to use are all written version

496
00:16:43,280 --> 00:16:47,600
2 so there's no point in loading the

497
00:16:44,870 --> 00:16:49,160
vision for the CLR so this is quite you

498
00:16:47,600 --> 00:16:53,870
know how simple it can be to code this

499
00:16:49,160 --> 00:16:55,910
up into a reflective DLL and also an app

500
00:16:53,870 --> 00:16:57,020
domain so an app domain is in the dotnet

501
00:16:55,910 --> 00:16:59,180
world is where they store all the

502
00:16:57,020 --> 00:17:00,890
binaries in a simple app domain so it

503
00:16:59,180 --> 00:17:02,479
keeps it all consolidated into one up to

504
00:17:00,890 --> 00:17:03,800
Maine you can have multiple app domains

505
00:17:02,480 --> 00:17:05,300
into it inside of a process but

506
00:17:03,800 --> 00:17:07,040
initiative since we keep them all

507
00:17:05,300 --> 00:17:08,119
consolidated into one because that means

508
00:17:07,040 --> 00:17:10,700
you can garbage collect them at the end

509
00:17:08,119 --> 00:17:12,199
does it remove the whole abdomen and

510
00:17:10,700 --> 00:17:14,090
then we want to do is basically load the

511
00:17:12,200 --> 00:17:16,100
app the main so in the reflective the

512
00:17:14,089 --> 00:17:17,720
allow for boshy too and we have two

513
00:17:16,099 --> 00:17:19,699
options you can either load the vision

514
00:17:17,720 --> 00:17:21,589
for the version two obviously a large

515
00:17:19,700 --> 00:17:23,000
depending on what you want to do so the

516
00:17:21,589 --> 00:17:25,609
vision to all just be loaded directly or

517
00:17:23,000 --> 00:17:26,930
the vision for tribalism for if assume

518
00:17:25,609 --> 00:17:30,189
you're you looking for is an available

519
00:17:26,930 --> 00:17:30,190
little fallback division to

520
00:17:30,460 --> 00:17:35,030
so what that means now is if you take a

521
00:17:33,020 --> 00:17:37,340
look at this process listing can anyone

522
00:17:35,030 --> 00:17:38,110
tell me where what she too is hidden in

523
00:17:37,340 --> 00:17:40,310
here

524
00:17:38,110 --> 00:17:41,990
well actually it's really difficult at

525
00:17:40,310 --> 00:17:44,000
this point there's no way of knowing

526
00:17:41,990 --> 00:17:45,980
which process we are in there's no power

527
00:17:44,000 --> 00:17:47,240
shoulder XE process room so this makes

528
00:17:45,980 --> 00:17:49,250
it a little bit more difficult for the

529
00:17:47,240 --> 00:17:50,930
defenders so if you find us inside the

530
00:17:49,250 --> 00:17:53,870
network unless they've got some really

531
00:17:50,930 --> 00:17:54,980
cool things like system on or EDR on the

532
00:17:53,870 --> 00:17:58,969
endpoints they can actually see the

533
00:17:54,980 --> 00:18:01,040
process is loaded so take tune Sh

534
00:17:58,970 --> 00:18:02,840
executables one's a legitimate one are

535
00:18:01,040 --> 00:18:04,580
ones that we've migrated partially to it

536
00:18:02,840 --> 00:18:06,709
gives its full command of control over

537
00:18:04,580 --> 00:18:08,120
the end point the only subtle difference

538
00:18:06,710 --> 00:18:09,980
is ones about the system that management

539
00:18:08,120 --> 00:18:12,020
automation DLL loaded one hasn't that's

540
00:18:09,980 --> 00:18:14,270
the only way of telling whether this

541
00:18:12,020 --> 00:18:17,360
process is malicious or not from a

542
00:18:14,270 --> 00:18:20,120
positive perspective another way is also

543
00:18:17,360 --> 00:18:21,889
whether it's gone abdomen so known SH

544
00:18:20,120 --> 00:18:23,600
process should have an app domain load

545
00:18:21,890 --> 00:18:25,700
it's not a dotnet binary it's a sea

546
00:18:23,600 --> 00:18:27,080
binary written from Microsoft there's no

547
00:18:25,700 --> 00:18:28,940
good reason why I should have the dotnet

548
00:18:27,080 --> 00:18:30,860
app domain loaded and there's just a

549
00:18:28,940 --> 00:18:32,630
good way of telling basically it's been

550
00:18:30,860 --> 00:18:33,889
compromised but again you need to have

551
00:18:32,630 --> 00:18:36,020
all these tools on the endpoint to ever

552
00:18:33,890 --> 00:18:37,460
see this if you've got nothing rollback

553
00:18:36,020 --> 00:18:39,050
and just basic idea on an endpoint

554
00:18:37,460 --> 00:18:40,610
there's no way of knowing at this point

555
00:18:39,050 --> 00:18:46,220
whether you've been compromised in a

556
00:18:40,610 --> 00:18:48,350
network or not however again with the

557
00:18:46,220 --> 00:18:50,150
likes of EDR providing they've got

558
00:18:48,350 --> 00:18:52,850
things like tracing in taining enabled

559
00:18:50,150 --> 00:18:55,160
or carbon black you can make a go right

560
00:18:52,850 --> 00:18:56,870
tell me across my entire stay where the

561
00:18:55,160 --> 00:18:59,380
systems at management automation DLL is

562
00:18:56,870 --> 00:19:02,719
been loaded inside of a running process

563
00:18:59,380 --> 00:19:04,520
if you do that again you will find every

564
00:19:02,720 --> 00:19:05,390
process that we're running in again you

565
00:19:04,520 --> 00:19:06,590
probably gonna have a lot of other

566
00:19:05,390 --> 00:19:08,000
process like legitimately like

567
00:19:06,590 --> 00:19:09,439
PowerShell so you need to start

568
00:19:08,000 --> 00:19:10,550
excluding things like PowerShell because

569
00:19:09,440 --> 00:19:11,990
at this point you're not looking for

570
00:19:10,550 --> 00:19:13,730
that you're looking for anything is

571
00:19:11,990 --> 00:19:14,900
loading outside of PowerShell and this

572
00:19:13,730 --> 00:19:16,910
is the kind of response that you'll get

573
00:19:14,900 --> 00:19:18,320
so you've now noticed across your estate

574
00:19:16,910 --> 00:19:20,540
that there's four processes running

575
00:19:18,320 --> 00:19:24,520
that shouldn't have the systems on that

576
00:19:20,540 --> 00:19:24,520
don't man or making yeah are loaded

577
00:19:24,720 --> 00:19:28,630
another sort of upset consideration that

578
00:19:27,130 --> 00:19:30,490
we kind of moved along in the timeline

579
00:19:28,630 --> 00:19:33,280
of gosh t2 is ad site and assembly load

580
00:19:30,490 --> 00:19:34,300
so a lot of processes sorry a lot of

581
00:19:33,280 --> 00:19:35,889
good PowerShell scripts that people

582
00:19:34,300 --> 00:19:37,659
write you add type and there's a good

583
00:19:35,890 --> 00:19:38,980
reason for that they do it so they they

584
00:19:37,660 --> 00:19:40,570
show you the cow so they're not just

585
00:19:38,980 --> 00:19:42,790
putting a big blob of basics before and

586
00:19:40,570 --> 00:19:44,379
then doing assembly load but actually

587
00:19:42,790 --> 00:19:46,389
showing you the code and then you you

588
00:19:44,380 --> 00:19:49,000
know you compiling it on the fly however

589
00:19:46,390 --> 00:19:50,679
from an upset perspective if you're

590
00:19:49,000 --> 00:19:53,080
running this inside a posse to inside a

591
00:19:50,679 --> 00:19:54,520
save an SH process and you do add type

592
00:19:53,080 --> 00:19:56,050
on your PowerShell script all that's

593
00:19:54,520 --> 00:19:57,850
doing as you can see here it's quite

594
00:19:56,050 --> 00:19:59,169
small but it's actually running CFC

595
00:19:57,850 --> 00:20:01,510
which is a command line compiler for

596
00:19:59,170 --> 00:20:04,210
c-sharp it's compiling that bit of code

597
00:20:01,510 --> 00:20:06,190
on the fly and then it's dropping things

598
00:20:04,210 --> 00:20:07,929
to disk like temperature C files and

599
00:20:06,190 --> 00:20:09,130
dropping a dll to this so all this is

600
00:20:07,929 --> 00:20:10,480
happening and it's in a flash of a

601
00:20:09,130 --> 00:20:12,400
second you won't even notice it when

602
00:20:10,480 --> 00:20:13,660
operationally you'll just think hey it's

603
00:20:12,400 --> 00:20:15,220
worked great carry on

604
00:20:13,660 --> 00:20:16,420
however if they've got things what T

605
00:20:15,220 --> 00:20:20,230
Neum and they're looking out for things

606
00:20:16,420 --> 00:20:21,429
like dot c SC dot TMP got DLL this is

607
00:20:20,230 --> 00:20:22,840
again another way that you can get the

608
00:20:21,429 --> 00:20:24,910
call so making sure that you can put all

609
00:20:22,840 --> 00:20:27,189
of your scripts to bet so basically

610
00:20:24,910 --> 00:20:28,630
compiled code using assembly loads is

611
00:20:27,190 --> 00:20:29,830
the way to go so these are how the

612
00:20:28,630 --> 00:20:31,450
things that we've got to adapt to our

613
00:20:29,830 --> 00:20:35,290
surrounding depending on the type of

614
00:20:31,450 --> 00:20:36,490
client that we're going after another

615
00:20:35,290 --> 00:20:38,530
thing that's quite interesting is the

616
00:20:36,490 --> 00:20:40,059
assembly load so assembly loads what

617
00:20:38,530 --> 00:20:42,490
obviously the way you should be going

618
00:20:40,059 --> 00:20:44,350
however MSI is starting to have

619
00:20:42,490 --> 00:20:45,670
integration within now so XP ends uh

620
00:20:44,350 --> 00:20:47,919
some work around the early release of

621
00:20:45,670 --> 00:20:49,690
this for Microsoft so Microsoft are

622
00:20:47,920 --> 00:20:51,040
looking to put basically msi into

623
00:20:49,690 --> 00:20:53,410
anything that's loaded from an assembly

624
00:20:51,040 --> 00:20:55,510
load perspective and this is basically

625
00:20:53,410 --> 00:20:57,160
an early release as we're just checking

626
00:20:55,510 --> 00:20:59,230
out his growth and when they actually

627
00:20:57,160 --> 00:21:00,429
release the code and whether we can get

628
00:20:59,230 --> 00:21:02,559
out of it a lot of this is basically

629
00:21:00,429 --> 00:21:03,910
built into your process though so a lot

630
00:21:02,559 --> 00:21:05,740
of the msi and hooking and things like

631
00:21:03,910 --> 00:21:08,320
that the reason why it's an issue is

632
00:21:05,740 --> 00:21:09,970
because in your process and Dougal

633
00:21:08,320 --> 00:21:13,909
talked a little bit about that so of the

634
00:21:09,970 --> 00:21:16,590
ins next phase of the EDR and next in

635
00:21:13,910 --> 00:21:18,390
very much for those on the back does

636
00:21:16,590 --> 00:21:23,220
actually stain upon tension onto gravity

637
00:21:18,390 --> 00:21:25,770
time and so easy are basically sensor

638
00:21:23,220 --> 00:21:26,970
agent deployed two end points that then

639
00:21:25,770 --> 00:21:28,559
send a lot of information back about

640
00:21:26,970 --> 00:21:30,780
behavior what's happening on the system

641
00:21:28,559 --> 00:21:32,309
is who saw much more a know about what's

642
00:21:30,780 --> 00:21:34,559
going on in the system much more sense

643
00:21:32,309 --> 00:21:36,600
of what's going on oh nice process

644
00:21:34,559 --> 00:21:40,080
fifteen so when I word document or a

645
00:21:36,600 --> 00:21:41,820
macro runs that executes a been lunches

646
00:21:40,080 --> 00:21:43,740
W scripts on a shell command and then

647
00:21:41,820 --> 00:21:45,840
then load something an executor or vowel

648
00:21:43,740 --> 00:21:47,010
I'll be in an ace-high Dark Age free and

649
00:21:45,840 --> 00:21:49,500
we'll see if it's all about looks like

650
00:21:47,010 --> 00:21:51,450
but basically it does everything so much

651
00:21:49,500 --> 00:21:53,100
more visibility some of the example

652
00:21:51,450 --> 00:21:54,780
vendors you probably already seen carbon

653
00:21:53,100 --> 00:21:56,639
black where you can search for the

654
00:21:54,780 --> 00:22:00,178
system management automation do think

655
00:21:56,640 --> 00:22:07,049
that silence lumison Symantec endpoint

656
00:22:00,179 --> 00:22:09,390
protection so end point detection before

657
00:22:07,049 --> 00:22:11,220
before you dr came along the blue team

658
00:22:09,390 --> 00:22:12,809
ken ahead in the sound end of the noise

659
00:22:11,220 --> 00:22:14,690
gone looking for fun quite Ben's mansion

660
00:22:12,809 --> 00:22:17,490
in there with PowerShell one-liners and

661
00:22:14,690 --> 00:22:19,470
but bringing in dr end but i'm when i'm

662
00:22:17,490 --> 00:22:20,850
breaking into an organization that

663
00:22:19,470 --> 00:22:22,559
opposes lesson you can see what's there

664
00:22:20,850 --> 00:22:24,209
been a better group on when i get on the

665
00:22:22,559 --> 00:22:26,340
horse and a CER

666
00:22:24,210 --> 00:22:27,600
that's pretty much me do you not want I

667
00:22:26,340 --> 00:22:29,039
don't want to be an environment in dr

668
00:22:27,600 --> 00:22:30,510
for someone could have a balance among a

669
00:22:29,039 --> 00:22:32,580
lot more about what's actually going on

670
00:22:30,510 --> 00:22:34,350
a lot of the things were actually did

671
00:22:32,580 --> 00:22:35,970
more painting a so-called going back in

672
00:22:34,350 --> 00:22:39,510
time almost like game hacking for some

673
00:22:35,970 --> 00:22:41,610
upper so avoidance first and foremost I

674
00:22:39,510 --> 00:22:43,860
have got a number of TTP that I know is

675
00:22:41,610 --> 00:22:45,979
usable for also converter and thousand

676
00:22:43,860 --> 00:22:48,418
five red teams but actually and

677
00:22:45,980 --> 00:22:49,320
intelligence to indicate what level of

678
00:22:48,419 --> 00:22:51,390
three actor you're supposed to be

679
00:22:49,320 --> 00:22:53,700
simulating and then you go and pull the

680
00:22:51,390 --> 00:22:55,950
same tension TTP severe so one one

681
00:22:53,700 --> 00:22:59,610
engagement we're on and carbon black

682
00:22:55,950 --> 00:23:01,140
detected us or we're migrating the SPC

683
00:22:59,610 --> 00:23:02,729
goes to for sideburn connections through

684
00:23:01,140 --> 00:23:04,289
same renders very nice so we don't have

685
00:23:02,730 --> 00:23:06,539
an unsigned binary connects notes that's

686
00:23:04,289 --> 00:23:08,610
a signature of our carbon black and so

687
00:23:06,539 --> 00:23:10,020
we're trying to hide in there we use WMI

688
00:23:08,610 --> 00:23:12,000
to propel the horse so about more

689
00:23:10,020 --> 00:23:13,440
advanced not just one ancestor mental

690
00:23:12,000 --> 00:23:16,409
and cameras are on there you may be

691
00:23:13,440 --> 00:23:17,070
monitoring for and dropping files as

692
00:23:16,409 --> 00:23:18,539
estimate

693
00:23:17,070 --> 00:23:20,129
Heather obsessed them so that your your

694
00:23:18,539 --> 00:23:22,679
Haven on the news you can see them so if

695
00:23:20,130 --> 00:23:24,120
you talking assistance songs in 2007 you

696
00:23:22,679 --> 00:23:27,010
will see it without changing the

697
00:23:24,120 --> 00:23:29,469
settings for that lets our detection

698
00:23:27,010 --> 00:23:30,970
and probably the students exercise from

699
00:23:29,470 --> 00:23:32,860
them carbon black does what it says it's

700
00:23:30,970 --> 00:23:34,360
positive but really when we went back

701
00:23:32,860 --> 00:23:35,740
and looked and said you know gods go

702
00:23:34,360 --> 00:23:38,439
back against this organization how are

703
00:23:35,740 --> 00:23:40,929
we going to go against them and carbon

704
00:23:38,440 --> 00:23:42,640
black tar number signatures and a number

705
00:23:40,929 --> 00:23:44,380
of pieces of did another place pet names

706
00:23:42,640 --> 00:23:45,760
especially materials one might attack

707
00:23:44,380 --> 00:23:47,679
three months another one they all keep

708
00:23:45,760 --> 00:23:50,740
then and that's what students analysis

709
00:23:47,679 --> 00:23:52,270
with but actually just read the

710
00:23:50,740 --> 00:23:54,760
burning it's actually given away

711
00:23:52,270 --> 00:23:56,740
epiphany students as an attacker so we

712
00:23:54,760 --> 00:23:58,929
can test and see exactly what's going on

713
00:23:56,740 --> 00:24:00,429
and buy a lot defective copra good that

714
00:23:58,929 --> 00:24:04,660
we've got suspicious

715
00:24:00,429 --> 00:24:07,630
SVC Hostgator and processes and hadn't

716
00:24:04,660 --> 00:24:10,540
system files high profile with WMI

717
00:24:07,630 --> 00:24:12,280
instead some of the more obvious anxious

718
00:24:10,540 --> 00:24:14,770
publicly to go by so things like susta

719
00:24:12,280 --> 00:24:16,480
Mentos my object line in undetected but

720
00:24:14,770 --> 00:24:19,960
co-creating fulfillment of the America

721
00:24:16,480 --> 00:24:22,450
to take it so can we go back then how do

722
00:24:19,960 --> 00:24:23,799
we do it not getting detected so we're

723
00:24:22,450 --> 00:24:26,230
already loading up in the fashion email

724
00:24:23,799 --> 00:24:27,910
that wouldn't open so we can migrate and

725
00:24:26,230 --> 00:24:30,460
outlook it's not on a watchlist who know

726
00:24:27,910 --> 00:24:32,710
down the reflective about function so

727
00:24:30,460 --> 00:24:34,419
basically been insane work world had SDC

728
00:24:32,710 --> 00:24:36,280
posters of Palin and I was actually

729
00:24:34,419 --> 00:24:38,350
launching CSC to compile some of our

730
00:24:36,280 --> 00:24:40,000
parasol structure named execute we can

731
00:24:38,350 --> 00:24:42,100
bypass on by just reflects of the motor

732
00:24:40,000 --> 00:24:44,320
functions but you start marking causal

733
00:24:42,100 --> 00:24:46,360
system in hiding most all these things

734
00:24:44,320 --> 00:24:48,250
find alternate methods to query the

735
00:24:46,360 --> 00:24:51,040
system so testamento for example the

736
00:24:48,250 --> 00:24:53,049
period is one lap and lean persistence

737
00:24:51,040 --> 00:24:54,700
so within review the works best to see

738
00:24:53,049 --> 00:24:55,960
what is working for us written for

739
00:24:54,700 --> 00:24:57,610
start-up time and he said make an

740
00:24:55,960 --> 00:24:59,919
appointment with his thoughts defense by

741
00:24:57,610 --> 00:25:02,020
junction holders with phone hijacking

742
00:24:59,919 --> 00:25:05,160
and we can start to do what template so

743
00:25:02,020 --> 00:25:05,160
the word center the tempo

744
00:25:05,460 --> 00:25:09,910
actually ones is no trusted location to

745
00:25:08,559 --> 00:25:11,290
any man who pay into that will

746
00:25:09,910 --> 00:25:13,330
ultimately one of the things on

747
00:25:11,290 --> 00:25:14,950
England's work so it is not to bypass

748
00:25:13,330 --> 00:25:17,470
somebody's in India time some of them

749
00:25:14,950 --> 00:25:19,630
and then lastly need is some people in

750
00:25:17,470 --> 00:25:21,040
my part in black so it was the point on

751
00:25:19,630 --> 00:25:22,690
all the end point actually in several

752
00:25:21,040 --> 00:25:25,418
state doesn't so we can be very stealthy

753
00:25:22,690 --> 00:25:28,540
what or methods again and quickly find a

754
00:25:25,419 --> 00:25:30,340
way to s3 and then new data desire

755
00:25:28,540 --> 00:25:34,240
belong in be and a place that they have

756
00:25:30,340 --> 00:25:35,799
moved as a relative whatsoever and I'm

757
00:25:34,240 --> 00:25:37,809
never not taking a truck we will go

758
00:25:35,799 --> 00:25:38,990
attain iam cycle definition so and

759
00:25:37,809 --> 00:25:40,100
that's what God has

760
00:25:38,990 --> 00:25:41,809
working for system management automation

761
00:25:40,100 --> 00:25:44,719
dealer with friends talking a lot about

762
00:25:41,809 --> 00:25:46,639
but it's not working for these process

763
00:25:44,720 --> 00:25:48,530
last names and then if you looked at

764
00:25:46,640 --> 00:25:50,540
number one here it says not doing a hash

765
00:25:48,530 --> 00:25:52,790
checksum or digital check on any of the

766
00:25:50,540 --> 00:25:54,409
process in the location you can see in

767
00:25:52,790 --> 00:25:56,629
point to why that's actually bad

768
00:25:54,410 --> 00:25:58,700
you can play PowerShell or any of our

769
00:25:56,630 --> 00:26:01,880
implants or covet that name and it will

770
00:25:58,700 --> 00:26:03,410
bypass the spinner Allah just completely

771
00:26:01,880 --> 00:26:05,090
bypasses when you know what's going on

772
00:26:03,410 --> 00:26:07,670
is much better

773
00:26:05,090 --> 00:26:09,590
I am so again treachery patents Britain

774
00:26:07,670 --> 00:26:12,200
and and again none of this is new this

775
00:26:09,590 --> 00:26:13,689
is universe since 2009 pretty F students

776
00:26:12,200 --> 00:26:17,020
talking over here in another blog post

777
00:26:13,690 --> 00:26:19,760
it's a normal stuff they see to

778
00:26:17,020 --> 00:26:22,370
implementation and Porsches and Porsches

779
00:26:19,760 --> 00:26:24,740
we also got migrate path past when we

780
00:26:22,370 --> 00:26:26,629
run search pool called post on suspended

781
00:26:24,740 --> 00:26:29,660
state it's going to use and reflective

782
00:26:26,630 --> 00:26:31,400
DLL injection and to that and then it's

783
00:26:29,660 --> 00:26:33,830
going to get up hitting type of post

784
00:26:31,400 --> 00:26:35,690
Peter and ice exactly what we see here

785
00:26:33,830 --> 00:26:39,649
approach will explode and I'll launch in

786
00:26:35,690 --> 00:26:41,420
search for post and again if you look

787
00:26:39,650 --> 00:26:43,340
and say something like process hacker or

788
00:26:41,420 --> 00:26:45,200
who says it's cooler than this year the

789
00:26:43,340 --> 00:26:47,030
parent has explorer so kind of tracked

790
00:26:45,200 --> 00:26:48,679
where thanks it's been going from we

791
00:26:47,030 --> 00:26:50,870
look back at our example where you can

792
00:26:48,679 --> 00:26:52,370
see a word doc is you've got worked in a

793
00:26:50,870 --> 00:26:55,969
matter of abuse cracked and then lunch

794
00:26:52,370 --> 00:26:57,530
in your binary well I thinking Shrek

795
00:26:55,970 --> 00:26:58,610
check potential and thinking what I

796
00:26:57,530 --> 00:27:00,350
actually got learned from when we're

797
00:26:58,610 --> 00:27:02,000
jumping in fixed water we're removing

798
00:27:00,350 --> 00:27:05,480
our tradition to that path to actually

799
00:27:02,000 --> 00:27:06,800
pulled out and again just it sure while

800
00:27:05,480 --> 00:27:09,020
we're doing this we're still actually

801
00:27:06,800 --> 00:27:11,419
even the same IOC so we're on the CLR

802
00:27:09,020 --> 00:27:13,480
for the process amount of automation and

803
00:27:11,420 --> 00:27:15,830
sailed are important there's no running

804
00:27:13,480 --> 00:27:17,570
and that this is a some of the code

805
00:27:15,830 --> 00:27:18,919
that's actually and a DLL but if people

806
00:27:17,570 --> 00:27:20,540
with the Porsche it's open-source you

807
00:27:18,920 --> 00:27:23,120
can look at the code that the DLL are

808
00:27:20,540 --> 00:27:25,850
obviously compiles to you town or a

809
00:27:23,120 --> 00:27:27,709
start-up in full eggs and help you

810
00:27:25,850 --> 00:27:29,990
attribute list and inside that we've

811
00:27:27,710 --> 00:27:32,210
then got pods where the process which

812
00:27:29,990 --> 00:27:34,309
allows us to basically specify this

813
00:27:32,210 --> 00:27:36,140
fifth parent that we want to come from

814
00:27:34,309 --> 00:27:40,010
and actually it's taken from stack or

815
00:27:36,140 --> 00:27:42,020
book law if you look there and so again

816
00:27:40,010 --> 00:27:43,400
this is carbon black unless bypasses

817
00:27:42,020 --> 00:27:44,510
carbon black or like threats carbon

818
00:27:43,400 --> 00:27:46,820
black and to thanking where it came from

819
00:27:44,510 --> 00:27:49,309
so a now and side Explorer Thor exit as

820
00:27:46,820 --> 00:27:51,320
a SBC votes in this example it's not

821
00:27:49,309 --> 00:27:52,428
it's not working out when it's actually

822
00:27:51,320 --> 00:27:54,379
came from it is messing

823
00:27:52,429 --> 00:27:56,450
so as a defender when you found out that

824
00:27:54,379 --> 00:27:58,519
your your workstation to look at it see

825
00:27:56,450 --> 00:28:00,409
what's going on your forensics you make

826
00:27:58,519 --> 00:28:01,909
master spit you make mess of actions are

827
00:28:00,409 --> 00:28:03,830
then happened that's what we're looking

828
00:28:01,909 --> 00:28:06,080
to do we're looking for play and with

829
00:28:03,830 --> 00:28:09,289
what II D are on the host but we get

830
00:28:06,080 --> 00:28:11,449
ready so often by parcel so there are

831
00:28:09,289 --> 00:28:13,610
methods for detecting and paint sleeping

832
00:28:11,450 --> 00:28:16,070
tarnish a bra a blogger exact months ago

833
00:28:13,610 --> 00:28:18,258
and this is using event tracing for

834
00:28:16,070 --> 00:28:20,389
windows so at the very top you've got

835
00:28:18,259 --> 00:28:22,309
the header field and that contains

836
00:28:20,389 --> 00:28:23,748
process ID that's actually a payment

837
00:28:22,309 --> 00:28:25,428
process for anything that burst so

838
00:28:23,749 --> 00:28:28,100
Kinect has a task which is I'm giving

839
00:28:25,429 --> 00:28:29,570
here you can see that the hitting

840
00:28:28,100 --> 00:28:31,309
process ID and Sebu

841
00:28:29,570 --> 00:28:33,678
92 for actually matches the header

842
00:28:31,309 --> 00:28:35,450
length record in red but when you

843
00:28:33,679 --> 00:28:40,220
actually split one what actually happens

844
00:28:35,450 --> 00:28:42,080
as a process ID and then as force X 5/3

845
00:28:40,220 --> 00:28:44,360
and if you look at the header it's 9 to

846
00:28:42,080 --> 00:28:46,129
24 so they should always match and they

847
00:28:44,360 --> 00:28:47,939
don't so it's been split so now we can

848
00:28:46,129 --> 00:28:49,029
start to write lyrics for that as well

849
00:28:47,940 --> 00:28:51,889
[Music]

850
00:28:49,029 --> 00:28:53,809
and are better at rectory process

851
00:28:51,889 --> 00:28:58,008
arguments with them then one scene what

852
00:28:53,809 --> 00:29:00,379
about this no and so inside a process

853
00:28:58,009 --> 00:29:01,580
you've got the pair process environment

854
00:29:00,379 --> 00:29:04,009
block and that tells you a lot about

855
00:29:01,580 --> 00:29:05,869
what's actually inside our processes got

856
00:29:04,009 --> 00:29:07,730
a lot of information do not process one

857
00:29:05,869 --> 00:29:09,830
of the things it's got is RTL user

858
00:29:07,730 --> 00:29:11,179
process parameters or the process

859
00:29:09,830 --> 00:29:13,549
parameters which is got another

860
00:29:11,179 --> 00:29:17,570
structure what you can do parse and then

861
00:29:13,549 --> 00:29:19,100
say that's the command link and so the

862
00:29:17,570 --> 00:29:21,559
way we can abuse this is basically we

863
00:29:19,100 --> 00:29:23,658
can create a process that's suspended

864
00:29:21,559 --> 00:29:25,220
disco an argument so we can have like

865
00:29:23,659 --> 00:29:27,950
command prompt and launch in stages just

866
00:29:25,220 --> 00:29:29,480
a string and then we identified by the

867
00:29:27,950 --> 00:29:31,639
player base with antique really process

868
00:29:29,480 --> 00:29:33,320
information but in parse the pipe using

869
00:29:31,639 --> 00:29:35,479
that structure pasta the command-line

870
00:29:33,320 --> 00:29:36,710
arguments and then you can overwrite the

871
00:29:35,480 --> 00:29:38,389
command-line arguments with whatever we

872
00:29:36,710 --> 00:29:39,649
want using very precise memories we're

873
00:29:38,389 --> 00:29:41,689
going to patch it in there many policies

874
00:29:39,649 --> 00:29:43,248
on suspended state don't want to resume

875
00:29:41,690 --> 00:29:45,499
it what I actually get stacked off is

876
00:29:43,249 --> 00:29:47,090
what was there just as you are about to

877
00:29:45,499 --> 00:29:49,309
resume what the command-line arguments

878
00:29:47,090 --> 00:29:50,990
were well what's actually recorded by

879
00:29:49,309 --> 00:29:52,399
Wendell is is what happens when it was

880
00:29:50,990 --> 00:29:54,200
created when it was in a suspended state

881
00:29:52,399 --> 00:29:56,570
so you cannot fake argument to the start

882
00:29:54,200 --> 00:30:01,190
and then then you're Bill arguments or

883
00:29:56,570 --> 00:30:02,928
object pronoun suspended so we put this

884
00:30:01,190 --> 00:30:04,800
on a lot of parsing to fill in some of

885
00:30:02,929 --> 00:30:06,510
the things like porch that's open source

886
00:30:04,800 --> 00:30:09,000
kill them with God's not open-sourcing

887
00:30:06,510 --> 00:30:11,310
only customers get this year when you do

888
00:30:09,000 --> 00:30:12,960
find a couple good examples online and

889
00:30:11,310 --> 00:30:16,610
cobalt rates caught us with art here as

890
00:30:12,960 --> 00:30:20,940
well as a statement we're using this 15

891
00:30:16,610 --> 00:30:23,790
EXPN also brought a blog post Oh example

892
00:30:20,940 --> 00:30:25,380
per click on type C and C++ art to do

893
00:30:23,790 --> 00:30:28,020
the same thing and then the one I like

894
00:30:25,380 --> 00:30:31,350
the best is fuzzy 6 Swamp Thing which is

895
00:30:28,020 --> 00:30:32,520
a c-sharp implementation and we're just

896
00:30:31,350 --> 00:30:33,750
going to do a quick example what that

897
00:30:32,520 --> 00:30:35,639
looks like for or at least unpack first

898
00:30:33,750 --> 00:30:38,820
so I thought it what's one thing think

899
00:30:35,640 --> 00:30:40,620
is going to launch command prompt it's

900
00:30:38,820 --> 00:30:42,270
going to echo out Hello Sailor as fake

901
00:30:40,620 --> 00:30:45,000
arguments and then it's going to have

902
00:30:42,270 --> 00:30:46,440
real arguments off below B sides so what

903
00:30:45,000 --> 00:30:49,290
we see you can exit pops is hold on

904
00:30:46,440 --> 00:30:51,750
these sides is equal to-- so that's

905
00:30:49,290 --> 00:30:54,330
what's actually executed what a public

906
00:30:51,750 --> 00:30:55,410
nsaids process after we actually see the

907
00:30:54,330 --> 00:30:57,149
command line says although sailor

908
00:30:55,410 --> 00:30:59,220
because it's tracking what was done at

909
00:30:57,150 --> 00:31:01,200
their national stage know what was done

910
00:30:59,220 --> 00:31:02,550
when it would resume so again you can

911
00:31:01,200 --> 00:31:04,710
correct things then you're probably

912
00:31:02,550 --> 00:31:07,110
thanking her sorry I jumped ahead there

913
00:31:04,710 --> 00:31:09,270
and so for this bet there's a warning so

914
00:31:07,110 --> 00:31:11,040
certain certain process explorers and

915
00:31:09,270 --> 00:31:12,450
composers work from certain tiles are

916
00:31:11,040 --> 00:31:15,480
actually go and read the tab that you've

917
00:31:12,450 --> 00:31:17,190
updated so if you don't modify it or

918
00:31:15,480 --> 00:31:18,690
once you've modified it zoom there's

919
00:31:17,190 --> 00:31:21,540
going to be the the real arguments it

920
00:31:18,690 --> 00:31:23,430
can be reached and have a swampthing

921
00:31:21,540 --> 00:31:25,110
actor does something look cool so when

922
00:31:23,430 --> 00:31:27,600
it's a actress is suspended with a fake

923
00:31:25,110 --> 00:31:29,909
arguments then it changes the arguments

924
00:31:27,600 --> 00:31:31,320
and then resumes it then changes in fake

925
00:31:29,910 --> 00:31:34,550
ones against the only one people's along

926
00:31:31,320 --> 00:31:36,960
to look afterwards doesn't see anything

927
00:31:34,550 --> 00:31:38,940
and if you're thinking why and why are

928
00:31:36,960 --> 00:31:41,310
you doing this and the real answer is

929
00:31:38,940 --> 00:31:44,010
partial one - for example or all that -

930
00:31:41,310 --> 00:31:45,270
would just disappear you can make it

931
00:31:44,010 --> 00:31:46,800
look you can make it look like whatever

932
00:31:45,270 --> 00:31:48,600
you want so the still launch powershell

933
00:31:46,800 --> 00:31:50,220
you may get caught for that but all that

934
00:31:48,600 --> 00:31:51,929
all that extra stuff thorne same with

935
00:31:50,220 --> 00:31:53,730
these extra additional education methods

936
00:31:51,930 --> 00:31:54,930
and then lateral movement and lateral

937
00:31:53,730 --> 00:31:56,280
movement sometimes when you break into

938
00:31:54,930 --> 00:31:57,810
one post in you're moving to another

939
00:31:56,280 --> 00:31:59,610
you've actually trying to remove

940
00:31:57,810 --> 00:32:01,440
attribution - how do you go and you

941
00:31:59,610 --> 00:32:04,110
might have tails into them punting on to

942
00:32:01,440 --> 00:32:06,420
some URLs to just minimize that people

943
00:32:04,110 --> 00:32:08,010
this instance of is in one and hit that

944
00:32:06,420 --> 00:32:11,040
away you're still actually in order to

945
00:32:08,010 --> 00:32:12,870
settle and constructor so if we can say

946
00:32:11,040 --> 00:32:14,610
that SC will run but they don't see the

947
00:32:12,870 --> 00:32:18,719
computer name then great they don't move

948
00:32:14,610 --> 00:32:20,340
over when so inside user land

949
00:32:18,720 --> 00:32:22,020
you've got your processes so you've got

950
00:32:20,340 --> 00:32:23,549
a user process and this is all can

951
00:32:22,020 --> 00:32:24,510
happen one process but as one Pitkin

952
00:32:23,549 --> 00:32:26,490
illustrator

953
00:32:24,510 --> 00:32:28,260
maybe not perfect either you've got a

954
00:32:26,490 --> 00:32:30,450
user process it called virtual our cakes

955
00:32:28,260 --> 00:32:32,340
which then calls it W allocate virtual

956
00:32:30,450 --> 00:32:34,020
memory and then that talks or through

957
00:32:32,340 --> 00:32:35,189
such calls to the caramel and that's

958
00:32:34,020 --> 00:32:36,960
where your actions then actually carry

959
00:32:35,190 --> 00:32:40,080
though so all the windows api calls have

960
00:32:36,960 --> 00:32:42,539
people through that but this is where it

961
00:32:40,080 --> 00:32:44,699
gets like old-school gaming as and when

962
00:32:42,539 --> 00:32:47,070
you're talking about cookin so he can is

963
00:32:44,700 --> 00:32:49,230
really manipulate in the logic flaw off

964
00:32:47,070 --> 00:32:50,370
and something's going on and then being

965
00:32:49,230 --> 00:32:53,370
able to enter set that and make

966
00:32:50,370 --> 00:32:55,289
modifications to it so another quick

967
00:32:53,370 --> 00:32:56,879
example of that as just like you should

968
00:32:55,289 --> 00:32:57,929
deal with some c-sharp code on it but

969
00:32:56,880 --> 00:32:59,549
when you put the red thought there

970
00:32:57,929 --> 00:33:02,400
that's a great point that's actually

971
00:32:59,549 --> 00:33:04,889
injecting CCS in terminate at one thing

972
00:33:02,400 --> 00:33:07,049
and that's not one like hot patch in our

973
00:33:04,890 --> 00:33:08,640
token because you're actually and

974
00:33:07,049 --> 00:33:12,030
manipulating the way that that floss

975
00:33:08,640 --> 00:33:13,380
which is a really quite easy example but

976
00:33:12,030 --> 00:33:16,408
if we if we look at what you are is

977
00:33:13,380 --> 00:33:19,919
actually doing it and when you go from

978
00:33:16,409 --> 00:33:23,429
virtual archaic 2zw allocate memory and

979
00:33:19,919 --> 00:33:25,470
we're we've got I have it up there so I

980
00:33:23,429 --> 00:33:27,360
have the trampoline it's going to happen

981
00:33:25,470 --> 00:33:28,679
enter the space where that actually is

982
00:33:27,360 --> 00:33:31,289
it's a jompa dress so you've got a jump

983
00:33:28,679 --> 00:33:34,620
people so the job tables updated by VR

984
00:33:31,289 --> 00:33:35,730
and and then they control that so

985
00:33:34,620 --> 00:33:37,289
anything that's come throughout they can

986
00:33:35,730 --> 00:33:39,030
no check it is good or bad if it's

987
00:33:37,289 --> 00:33:40,799
malicious or not and then pass on to

988
00:33:39,030 --> 00:33:45,539
Carol that's good and terminate that is

989
00:33:40,799 --> 00:33:47,280
bad but there is a problem here and you

990
00:33:45,539 --> 00:33:48,960
can see what that is but really it's all

991
00:33:47,280 --> 00:33:51,299
happen in the New Zealand it's not

992
00:33:48,960 --> 00:33:52,980
happen in the kernel so actually all the

993
00:33:51,299 --> 00:33:54,600
stuff doing all the modifications are

994
00:33:52,980 --> 00:33:57,000
done they're done in your process so

995
00:33:54,600 --> 00:33:58,350
they inject in the DLN and then redirect

996
00:33:57,000 --> 00:34:00,750
them to the functions that they put

997
00:33:58,350 --> 00:34:04,260
there and your process so from our

998
00:34:00,750 --> 00:34:05,850
perspective we can pretty much say what

999
00:34:04,260 --> 00:34:07,980
the you did in my house as my

1000
00:34:05,850 --> 00:34:13,980
process I will not process you can

1001
00:34:07,980 --> 00:34:16,139
implement those therefore so what we can

1002
00:34:13,980 --> 00:34:18,179
actually do is repack memory to remove

1003
00:34:16,139 --> 00:34:20,010
jump to the original code so again it's

1004
00:34:18,179 --> 00:34:22,349
all SNR or one process so we can do

1005
00:34:20,010 --> 00:34:24,990
whatever we want with that we can update

1006
00:34:22,349 --> 00:34:26,260
the import address table to point to in

1007
00:34:24,989 --> 00:34:28,209
the correct function

1008
00:34:26,260 --> 00:34:29,500
so we can create a stop to carry out the

1009
00:34:28,210 --> 00:34:31,869
south skills and then jump to that stop

1010
00:34:29,500 --> 00:34:33,760
and that does it instead and you know I

1011
00:34:31,869 --> 00:34:37,869
agree to remove some of the libraries in

1012
00:34:33,760 --> 00:34:39,399
Indy LLC is injective in and so I've got

1013
00:34:37,869 --> 00:34:40,869
a quick demo of what that looks like

1014
00:34:39,399 --> 00:34:42,489
just because that probably sends about

1015
00:34:40,869 --> 00:34:44,200
wizardry and it certainly does to me

1016
00:34:42,489 --> 00:34:45,759
some things too but it's not actually

1017
00:34:44,199 --> 00:34:47,888
that much that much code and that that

1018
00:34:45,760 --> 00:34:50,500
much work so this a lot of them was

1019
00:34:47,889 --> 00:34:52,419
creating a DLL that pitched and two

1020
00:34:50,500 --> 00:34:54,969
variables but also to say thanks to rob

1021
00:34:52,418 --> 00:34:56,500
Madison for the help with this but it's

1022
00:34:54,969 --> 00:34:58,060
got a couple bumps in it takes two

1023
00:34:56,500 --> 00:35:02,320
variables and put some basic math on and

1024
00:34:58,060 --> 00:35:04,420
give you an output so the first run off

1025
00:35:02,320 --> 00:35:06,609
that there this is just in c-sharp we're

1026
00:35:04,420 --> 00:35:09,609
just gonna create a class that's gonna

1027
00:35:06,609 --> 00:35:11,529
load that the DLL so you can see okay

1028
00:35:09,609 --> 00:35:12,790
and it's going to curve the yellow

1029
00:35:11,530 --> 00:35:14,320
function hook of a function and then

1030
00:35:12,790 --> 00:35:16,570
we're going to call it in the main we're

1031
00:35:14,320 --> 00:35:17,859
gonna get ten and eleven as two numbers

1032
00:35:16,570 --> 00:35:19,900
it's going to do some basic math on that

1033
00:35:17,859 --> 00:35:26,670
and it's going to output a result when

1034
00:35:19,900 --> 00:35:29,680
we click play so yeah we got a result

1035
00:35:26,670 --> 00:35:31,720
122 it comes out and actually if we run

1036
00:35:29,680 --> 00:35:33,790
a mobile pain 222 or keep going out it's

1037
00:35:31,720 --> 00:35:35,500
just static math so you do that quick

1038
00:35:33,790 --> 00:35:36,910
test but now what we're going to do is

1039
00:35:35,500 --> 00:35:38,560
we're going to hook that function and

1040
00:35:36,910 --> 00:35:39,850
memories we're going to load that then

1041
00:35:38,560 --> 00:35:41,650
hook it and we're going to redirect it

1042
00:35:39,850 --> 00:35:43,750
to our one function this is basically

1043
00:35:41,650 --> 00:35:46,450
exactly what you PR are doing and we're

1044
00:35:43,750 --> 00:35:47,920
going to control the floor for the data

1045
00:35:46,450 --> 00:35:48,939
for the function so then we can do

1046
00:35:47,920 --> 00:35:50,680
whatever we want with those numbers

1047
00:35:48,940 --> 00:35:52,390
we're gonna do some different math and

1048
00:35:50,680 --> 00:35:55,299
just add them together and add sexta to

1049
00:35:52,390 --> 00:35:58,390
that result will end up in 83 but we

1050
00:35:55,300 --> 00:36:01,270
quickly look at what that looks like we

1051
00:35:58,390 --> 00:36:03,970
create a class and then you end up with

1052
00:36:01,270 --> 00:36:07,050
three or one function so just like a

1053
00:36:03,970 --> 00:36:09,339
similar function tips to two integers

1054
00:36:07,050 --> 00:36:11,109
it's going to write out the entities

1055
00:36:09,340 --> 00:36:13,720
that human so again it's just a sure

1056
00:36:11,109 --> 00:36:14,830
that we come forward and then at the

1057
00:36:13,720 --> 00:36:18,040
very bottom of that function we've got

1058
00:36:14,830 --> 00:36:22,779
the Tonchi plus value plus 62 which is

1059
00:36:18,040 --> 00:36:25,060
where we're doing our own math on it and

1060
00:36:22,780 --> 00:36:28,119
then we're going to go and what exactly

1061
00:36:25,060 --> 00:36:29,859
where that as in memory and just before

1062
00:36:28,119 --> 00:36:30,910
we've got some additional DLL unforce

1063
00:36:29,859 --> 00:36:33,430
here of which is going to be probably

1064
00:36:30,910 --> 00:36:36,250
called the windows api calls in so we've

1065
00:36:33,430 --> 00:36:38,440
got things like lord lively and hip hop

1066
00:36:36,250 --> 00:36:39,410
address he liked the and rape process

1067
00:36:38,440 --> 00:36:42,680
now if that's actually that

1068
00:36:39,410 --> 00:36:44,210
API calls we need to do this hey we're

1069
00:36:42,680 --> 00:36:45,230
then going to jump back up to the

1070
00:36:44,210 --> 00:36:46,730
meaning we're gonna look at how this

1071
00:36:45,230 --> 00:36:48,529
actually plays over an award too lightly

1072
00:36:46,730 --> 00:36:50,089
finishing end and this is and the

1073
00:36:48,529 --> 00:36:52,160
pickable function so this is the initial

1074
00:36:50,089 --> 00:36:54,890
one we did earlier on the earlier one

1075
00:36:52,160 --> 00:36:57,649
we're then going to identify where that

1076
00:36:54,890 --> 00:37:01,879
as in memory hey you think it a

1077
00:36:57,650 --> 00:37:03,680
address then go work at the offset of

1078
00:37:01,880 --> 00:37:05,180
where that as versus where our code is

1079
00:37:03,680 --> 00:37:08,629
in memory and then we're going to use

1080
00:37:05,180 --> 00:37:10,399
right process learning to then update

1081
00:37:08,630 --> 00:37:11,839
and memory where the place is jumping so

1082
00:37:10,400 --> 00:37:13,700
as I showed you that jump instruction

1083
00:37:11,839 --> 00:37:15,500
the sale before well we're just going to

1084
00:37:13,700 --> 00:37:17,210
overwrite the jump instruction so we get

1085
00:37:15,500 --> 00:37:19,849
the base value and if possible one put

1086
00:37:17,210 --> 00:37:23,269
is going for a jump and then that's

1087
00:37:19,849 --> 00:37:24,769
gonna Dan jump I will put and then we're

1088
00:37:23,269 --> 00:37:26,299
gonna click play and then we're going to

1089
00:37:24,769 --> 00:37:27,649
reset it back to initial one so what we

1090
00:37:26,299 --> 00:37:30,440
should see when we quite play this time

1091
00:37:27,650 --> 00:37:32,059
is the value is a it's been hooked we'll

1092
00:37:30,440 --> 00:37:33,890
see how a math function VAR e to convert

1093
00:37:32,059 --> 00:37:35,240
with 83 and then we'll see our math

1094
00:37:33,890 --> 00:37:36,769
function bar it comes out with one two

1095
00:37:35,240 --> 00:37:38,930
two after that's being unhooked again I

1096
00:37:36,769 --> 00:37:40,640
really the take home from this is just

1097
00:37:38,930 --> 00:37:42,649
how easy it was to manipulate this in

1098
00:37:40,640 --> 00:37:44,299
memory and that's exactly what you dr

1099
00:37:42,650 --> 00:37:46,279
did and it's exactly what we're doing to

1100
00:37:44,299 --> 00:37:48,829
unhook ER which means a really good one

1101
00:37:46,279 --> 00:37:51,230
like people expiain recently on hooking

1102
00:37:48,829 --> 00:37:53,329
things like silence from incisor process

1103
00:37:51,230 --> 00:37:54,680
we've done a lot of work if you look

1104
00:37:53,329 --> 00:37:55,970
through some of nature's watch and see

1105
00:37:54,680 --> 00:37:57,379
people at tom wilson are putting other

1106
00:37:55,970 --> 00:38:00,828
things that turn on Victor went on paper

1107
00:37:57,380 --> 00:38:02,720
we a lot of power when people are

1108
00:38:00,829 --> 00:38:04,910
actually using this and user process

1109
00:38:02,720 --> 00:38:07,730
space and till it gives us a lot of

1110
00:38:04,910 --> 00:38:09,348
control so and just some naughty are

1111
00:38:07,730 --> 00:38:11,029
it's not a silver bullet

1112
00:38:09,349 --> 00:38:13,700
people tend to think as any quickly

1113
00:38:11,029 --> 00:38:15,140
deploy it for all of your endpoints it

1114
00:38:13,700 --> 00:38:15,740
does give incredible visibility to the

1115
00:38:15,140 --> 00:38:17,750
routine

1116
00:38:15,740 --> 00:38:18,769
highly recommend as a complementary

1117
00:38:17,750 --> 00:38:20,299
piece and that's the key is a

1118
00:38:18,769 --> 00:38:22,038
complementary piece to the defensive

1119
00:38:20,299 --> 00:38:24,829
strategy it shouldn't be solely relied

1120
00:38:22,039 --> 00:38:26,869
on and then it does not replace good

1121
00:38:24,829 --> 00:38:28,430
people with experience that's still the

1122
00:38:26,869 --> 00:38:30,710
best thing you can have and sage a team

1123
00:38:28,430 --> 00:38:32,210
and Savior security teams and then it's

1124
00:38:30,710 --> 00:38:33,500
always going to be a catenary scheme

1125
00:38:32,210 --> 00:38:34,880
they're always going to do something

1126
00:38:33,500 --> 00:38:36,500
we're always going to do something

1127
00:38:34,880 --> 00:38:37,670
they're always going to put a person new

1128
00:38:36,500 --> 00:38:40,150
security mechanism we're going to look

1129
00:38:37,670 --> 00:38:40,150
to get by it

1130
00:38:42,020 --> 00:38:45,630
yeah it just brings it back to I guess

1131
00:38:44,400 --> 00:38:48,240
the reason why we're here today and it

1132
00:38:45,630 --> 00:38:50,510
is powershell dead and this is my

1133
00:38:48,240 --> 00:38:55,410
attempt as no is not name that's

1134
00:38:50,510 --> 00:38:56,880
scottish for no i think but if you do

1135
00:38:55,410 --> 00:38:58,259
think marital is doing i guess it does

1136
00:38:56,880 --> 00:38:59,130
depend on the environment you going

1137
00:38:58,260 --> 00:39:01,380
after so it depends on the

1138
00:38:59,130 --> 00:39:02,880
sophistication at the endpoint it

1139
00:39:01,380 --> 00:39:04,410
depends on if they've got EDR they've

1140
00:39:02,880 --> 00:39:05,760
got system on deploy a difficult a knee

1141
00:39:04,410 --> 00:39:07,290
and what kind of login a monitor and

1142
00:39:05,760 --> 00:39:08,760
they've got on there and going how

1143
00:39:07,290 --> 00:39:09,990
you're sending in the payload there's a

1144
00:39:08,760 --> 00:39:12,870
lot of sort of common scripts and

1145
00:39:09,990 --> 00:39:14,279
evasion sorry and security of client is

1146
00:39:12,870 --> 00:39:16,200
now looking for the word power shoulder

1147
00:39:14,280 --> 00:39:17,340
XE so it does depend on how your weapon

1148
00:39:16,200 --> 00:39:19,350
or something and delivery into an

1149
00:39:17,340 --> 00:39:22,350
organization so whether you use power

1150
00:39:19,350 --> 00:39:23,549
soul or not but if you do think power

1151
00:39:22,350 --> 00:39:25,680
drill is dead we're kind of get in with

1152
00:39:23,550 --> 00:39:27,330
the crowd and we made it a c-sharp from

1153
00:39:25,680 --> 00:39:29,430
time i'm not going to go too much into

1154
00:39:27,330 --> 00:39:31,620
town about it but just going to give you

1155
00:39:29,430 --> 00:39:34,440
a quick if you wanna have a go play at

1156
00:39:31,620 --> 00:39:36,870
home so once you set up pushy too it's

1157
00:39:34,440 --> 00:39:38,610
just quite a trivial install links

1158
00:39:36,870 --> 00:39:40,319
machine you'll see these two bits of

1159
00:39:38,610 --> 00:39:43,080
code which is basically the sharp and

1160
00:39:40,320 --> 00:39:45,060
plans in version for the CLR we haven't

1161
00:39:43,080 --> 00:39:46,290
backboard it to to because all the

1162
00:39:45,060 --> 00:39:49,080
common lighting so that we need is

1163
00:39:46,290 --> 00:39:50,310
generally in for and there's a quick way

1164
00:39:49,080 --> 00:39:53,130
of getting this going so if you're on

1165
00:39:50,310 --> 00:39:56,310
any any windows box once you know has

1166
00:39:53,130 --> 00:39:58,110
visibility of the positive server you

1167
00:39:56,310 --> 00:39:59,670
can run it with this void funk as the

1168
00:39:58,110 --> 00:40:02,100
entry point so that's the entry point to

1169
00:39:59,670 --> 00:40:04,110
start the DLL so that should just kick

1170
00:40:02,100 --> 00:40:05,339
you off the shell and if you wanna you

1171
00:40:04,110 --> 00:40:07,320
can migrate to something like search

1172
00:40:05,340 --> 00:40:10,650
protocol hosts just to prove that you're

1173
00:40:07,320 --> 00:40:13,770
not actually in c-sharp binary you in an

1174
00:40:10,650 --> 00:40:15,690
unmanaged process so what does that look

1175
00:40:13,770 --> 00:40:17,700
again from a defensive perspective so

1176
00:40:15,690 --> 00:40:21,180
we're in search protocol host as we just

1177
00:40:17,700 --> 00:40:23,189
migrated to how can we tell now that

1178
00:40:21,180 --> 00:40:25,470
it's actually a malicious binary and

1179
00:40:23,190 --> 00:40:27,450
again not PowerShell and it's actually

1180
00:40:25,470 --> 00:40:28,980
purely just c-sharp so again it will

1181
00:40:27,450 --> 00:40:30,470
have an app domain that we saw before so

1182
00:40:28,980 --> 00:40:33,210
very similar

1183
00:40:30,470 --> 00:40:36,600
it will also hello something called the

1184
00:40:33,210 --> 00:40:38,010
CLR DLL and the MS core he got the allow

1185
00:40:36,600 --> 00:40:40,020
these are the two I guess signature

1186
00:40:38,010 --> 00:40:41,490
libraries now that got loaded so it's

1187
00:40:40,020 --> 00:40:43,530
not the system top management though or

1188
00:40:41,490 --> 00:40:44,850
Mason dealer however there's a lot of

1189
00:40:43,530 --> 00:40:46,350
other legitimate bindings out there

1190
00:40:44,850 --> 00:40:48,270
across your estates that will be running

1191
00:40:46,350 --> 00:40:50,569
things like the CLR lots of applications

1192
00:40:48,270 --> 00:40:52,730
even things like silence of running so

1193
00:40:50,570 --> 00:40:54,620
based on net

1194
00:40:52,730 --> 00:40:57,440
the program on link also have tie-ins to

1195
00:40:54,620 --> 00:40:58,850
m/s Corey install the CLR so although

1196
00:40:57,440 --> 00:41:00,200
you can do the similar thing like

1197
00:40:58,850 --> 00:41:02,180
looking at the system de management

1198
00:41:00,200 --> 00:41:03,379
automation deal out from a c-sharp

1199
00:41:02,180 --> 00:41:04,850
perspective it's a lot harder because

1200
00:41:03,380 --> 00:41:10,820
this is a lot more prevalent across your

1201
00:41:04,850 --> 00:41:12,440
estate so it's not quite as simple and

1202
00:41:10,820 --> 00:41:13,940
one of the things I guess I wanted to

1203
00:41:12,440 --> 00:41:15,590
say as well about the C shop implant is

1204
00:41:13,940 --> 00:41:17,900
so everything would based on PowerShell

1205
00:41:15,590 --> 00:41:19,220
originally so just it with policy our

1206
00:41:17,900 --> 00:41:20,750
shell is a command prompt so it has

1207
00:41:19,220 --> 00:41:24,859
things like changed working directory

1208
00:41:20,750 --> 00:41:27,260
print working directory echo things like

1209
00:41:24,860 --> 00:41:29,300
copy all those things on a C top in one

1210
00:41:27,260 --> 00:41:30,800
isn't native so we had actually build or

1211
00:41:29,300 --> 00:41:32,150
line to the core implant so that's why a

1212
00:41:30,800 --> 00:41:34,130
lot of like common features and things

1213
00:41:32,150 --> 00:41:35,840
that weren't there by default we had to

1214
00:41:34,130 --> 00:41:37,190
build all these one of the things that

1215
00:41:35,840 --> 00:41:38,900
we've actually done which is using

1216
00:41:37,190 --> 00:41:40,430
dotnet reflection is allow you to load

1217
00:41:38,900 --> 00:41:41,540
though any binary so then if you're

1218
00:41:40,430 --> 00:41:43,520
familiar with cobalt strike and it's

1219
00:41:41,540 --> 00:41:46,100
assembly and actually assembly fit

1220
00:41:43,520 --> 00:41:47,930
function this is a similar concept on

1221
00:41:46,100 --> 00:41:49,880
that so any of the sort of ghost pack

1222
00:41:47,930 --> 00:41:51,560
executables or dll's that you can get

1223
00:41:49,880 --> 00:41:54,170
out there from on the community to use

1224
00:41:51,560 --> 00:41:55,759
offensively on your items and later you

1225
00:41:54,170 --> 00:41:57,590
can load into policy too so get one of

1226
00:41:55,760 --> 00:41:59,720
these processes running go and compile

1227
00:41:57,590 --> 00:42:02,690
your own dotnet library and you can load

1228
00:41:59,720 --> 00:42:04,790
it like this using load load module and

1229
00:42:02,690 --> 00:42:08,900
then the executable or DLL and then do

1230
00:42:04,790 --> 00:42:10,400
run X C or D alone so here's a quick

1231
00:42:08,900 --> 00:42:12,050
example so there's two options when

1232
00:42:10,400 --> 00:42:14,720
actually in windy allow you have to give

1233
00:42:12,050 --> 00:42:16,910
it the namespace name and the and the

1234
00:42:14,720 --> 00:42:18,980
map and the class name and then plus the

1235
00:42:16,910 --> 00:42:20,720
names of us again and I'm a couple about

1236
00:42:18,980 --> 00:42:21,770
why and then the method so if you're

1237
00:42:20,720 --> 00:42:22,700
running if they allow you have to give

1238
00:42:21,770 --> 00:42:24,380
it a method because it doesn't of an

1239
00:42:22,700 --> 00:42:25,790
entry point if you're running an XE you

1240
00:42:24,380 --> 00:42:27,320
don't have to give it an entry point so

1241
00:42:25,790 --> 00:42:29,990
you'd have to give it a method because

1242
00:42:27,320 --> 00:42:31,310
it has a default entry point of main so

1243
00:42:29,990 --> 00:42:33,799
what does that look like under the hood

1244
00:42:31,310 --> 00:42:35,420
so basically what we do is once you load

1245
00:42:33,800 --> 00:42:37,070
an assembly it uses assembly load like

1246
00:42:35,420 --> 00:42:38,870
we talked about earlier basics to a blob

1247
00:42:37,070 --> 00:42:40,970
and load it back into the run space and

1248
00:42:38,870 --> 00:42:42,770
you can see it which was shown in a sec

1249
00:42:40,970 --> 00:42:44,480
and then if you're running an axial go

1250
00:42:42,770 --> 00:42:46,970
away and run basically invoke which is

1251
00:42:44,480 --> 00:42:48,140
the entry point of main so any means if

1252
00:42:46,970 --> 00:42:49,939
you give it an argument and Scott an

1253
00:42:48,140 --> 00:42:51,259
argument parser it'll be in there so you

1254
00:42:49,940 --> 00:42:53,150
can just give it up in Haiti I'll show

1255
00:42:51,260 --> 00:42:54,290
you all the help and but with the DLL

1256
00:42:53,150 --> 00:42:55,790
function you need to get actually give

1257
00:42:54,290 --> 00:42:57,290
it some specific method that you call

1258
00:42:55,790 --> 00:42:58,700
them in any parameters or arguments that

1259
00:42:57,290 --> 00:43:00,080
you want to pass to that as well it

1260
00:42:58,700 --> 00:43:01,850
allows it to be fully extensible so you

1261
00:43:00,080 --> 00:43:03,740
can go and write any c-sharp application

1262
00:43:01,850 --> 00:43:06,279
and use it rather see chomping client

1263
00:43:03,740 --> 00:43:08,620
based on its dotnet for above basically

1264
00:43:06,280 --> 00:43:10,150
so it's really quite powerful with my

1265
00:43:08,620 --> 00:43:11,830
trip sort of like the default it only

1266
00:43:10,150 --> 00:43:13,510
gives you the crooks of an implant all

1267
00:43:11,830 --> 00:43:15,130
thumbs or blade download the basic

1268
00:43:13,510 --> 00:43:16,990
features but you can now go away and

1269
00:43:15,130 --> 00:43:18,970
create your own sort cordia levels and

1270
00:43:16,990 --> 00:43:21,299
own process migration methods anything

1271
00:43:18,970 --> 00:43:25,509
you want over an in.net and allows it's

1272
00:43:21,300 --> 00:43:26,560
probably usable within the implant I'm

1273
00:43:25,510 --> 00:43:28,090
just to show you a bit of an upset

1274
00:43:26,560 --> 00:43:29,410
consideration again when you load

1275
00:43:28,090 --> 00:43:31,600
something like seatbelt and the assembly

1276
00:43:29,410 --> 00:43:34,379
name is called CL you will actually see

1277
00:43:31,600 --> 00:43:37,029
it I'm at now so just speeding up now

1278
00:43:34,380 --> 00:43:39,760
yeah you'll see seatbelt in the assembly

1279
00:43:37,030 --> 00:43:43,780
at the main so just things to be to be

1280
00:43:39,760 --> 00:43:46,480
aware of last slide now it's just been a

1281
00:43:43,780 --> 00:43:48,220
future prediction so we've said already

1282
00:43:46,480 --> 00:43:49,210
is a bit of an over reliance on EDR on

1283
00:43:48,220 --> 00:43:50,890
the endpoints a lot of people are

1284
00:43:49,210 --> 00:43:52,000
focusing on all the tertiary assets and

1285
00:43:50,890 --> 00:43:53,890
probably not enough on their core

1286
00:43:52,000 --> 00:43:57,070
systems with a critical data you know

1287
00:43:53,890 --> 00:43:59,560
all the customer data so I can I move to

1288
00:43:57,070 --> 00:44:00,850
0 just networks MFA we believe machine

1289
00:43:59,560 --> 00:44:02,049
learning so I think a lot of people are

1290
00:44:00,850 --> 00:44:03,910
going to invest a lot more time into the

1291
00:44:02,050 --> 00:44:05,530
people in process you can really get a

1292
00:44:03,910 --> 00:44:07,270
handle all your processes and how they

1293
00:44:05,530 --> 00:44:08,980
sort of administer systems an attacker

1294
00:44:07,270 --> 00:44:10,509
isn't gonna knows that the know those so

1295
00:44:08,980 --> 00:44:12,190
from the behavioral analysis perspective

1296
00:44:10,510 --> 00:44:13,600
you are to know if something is being

1297
00:44:12,190 --> 00:44:16,240
administered in a different way and no

1298
00:44:13,600 --> 00:44:18,190
that's an anomaly and potentially start

1299
00:44:16,240 --> 00:44:20,560
an incident I think see two frameworks

1300
00:44:18,190 --> 00:44:23,230
going to move back to the sort of C++

1301
00:44:20,560 --> 00:44:24,370
base so dotnet premiers PowerShell we're

1302
00:44:23,230 --> 00:44:27,310
going to start probably going back to

1303
00:44:24,370 --> 00:44:28,870
sort the course C libraries things like

1304
00:44:27,310 --> 00:44:29,980
dropping executables onto disk rather

1305
00:44:28,870 --> 00:44:32,200
than actually running things lot more

1306
00:44:29,980 --> 00:44:33,820
low bus and Lowell bins and so they were

1307
00:44:32,200 --> 00:44:35,230
great at a time but they're a finite

1308
00:44:33,820 --> 00:44:37,150
list so if you're actually dropping

1309
00:44:35,230 --> 00:44:39,310
things like msbuild or CSC and running

1310
00:44:37,150 --> 00:44:40,510
them so in a malicious way they're going

1311
00:44:39,310 --> 00:44:41,529
to know about the maintaining things

1312
00:44:40,510 --> 00:44:42,970
that can pick up all those really

1313
00:44:41,530 --> 00:44:45,220
quickly so if you're running things

1314
00:44:42,970 --> 00:44:46,540
outside of that and they're not like if

1315
00:44:45,220 --> 00:44:47,890
you get signatures to check in something

1316
00:44:46,540 --> 00:44:49,660
like an arbitrary execute ones or host

1317
00:44:47,890 --> 00:44:50,680
sounds really naughty but actually

1318
00:44:49,660 --> 00:44:53,649
probably gets around a lot of these

1319
00:44:50,680 --> 00:44:55,149
superior powers but permit oh we've got

1320
00:44:53,650 --> 00:44:56,440
time for I think but I'm going to be

1321
00:44:55,150 --> 00:44:58,510
time I guess there's going to leave you

1322
00:44:56,440 --> 00:45:04,720
with find a job that you enjoy doing you

1323
00:44:58,510 --> 00:45:06,220
never work a day in your life the final

1324
00:45:04,720 --> 00:45:08,620
key note is in track one as well I

1325
00:45:06,220 --> 00:45:10,480
believe this when starting now sorry we

1326
00:45:08,620 --> 00:45:12,980
have run over the slides are there if

1327
00:45:10,480 --> 00:45:15,040
you want no and thanks very much

1328
00:45:12,980 --> 00:45:15,040
you

