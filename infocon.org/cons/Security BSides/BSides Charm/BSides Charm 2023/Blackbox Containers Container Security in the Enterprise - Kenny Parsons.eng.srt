1
00:00:00,120 --> 00:00:03,120
foreign

2
00:00:06,020 --> 00:00:20,760
[Music]

3
00:00:20,760 --> 00:00:22,500
awesome well thank you all for coming

4
00:00:22,500 --> 00:00:25,080
today uh my name is I'm gonna drop that

5
00:00:25,080 --> 00:00:26,880
chord so I'll keep making noise my name

6
00:00:26,880 --> 00:00:28,320
is Kenny Parsons

7
00:00:28,320 --> 00:00:30,960
um welcome to black box containers

8
00:00:30,960 --> 00:00:32,880
container security for the Enterprise so

9
00:00:32,880 --> 00:00:35,340
we'll try to keep this high level from a

10
00:00:35,340 --> 00:00:38,100
container fundamentals perspective and

11
00:00:38,100 --> 00:00:40,020
then get into how that affects the

12
00:00:40,020 --> 00:00:41,280
Enterprise so

13
00:00:41,280 --> 00:00:43,739
run through this real quick

14
00:00:43,739 --> 00:00:47,100
um first a little bit about me uh

15
00:00:47,100 --> 00:00:50,219
quick aside I'm not the uh who am I guy

16
00:00:50,219 --> 00:00:52,260
that has all the who am I slides so I

17
00:00:52,260 --> 00:00:53,820
went a little different break the mold I

18
00:00:53,820 --> 00:00:56,219
did a tree of my home directory I am a

19
00:00:56,219 --> 00:00:58,320
senior Regional engineer for set

20
00:00:58,320 --> 00:01:01,860
Solutions now a trace three company I am

21
00:01:01,860 --> 00:01:03,840
actually based out of Dallas

22
00:01:03,840 --> 00:01:06,900
um so a nice flight up here

23
00:01:06,900 --> 00:01:11,040
I am into devsecops obviously I enjoy

24
00:01:11,040 --> 00:01:14,460
the architecting and designing of proper

25
00:01:14,460 --> 00:01:16,680
microservice Solutions

26
00:01:16,680 --> 00:01:18,900
and I am also the chapter leader for

27
00:01:18,900 --> 00:01:21,540
devset con that's a global developer uh

28
00:01:21,540 --> 00:01:24,299
Community uh devsecops we just launched

29
00:01:24,299 --> 00:01:26,159
a chapter in Dallas and actually had our

30
00:01:26,159 --> 00:01:29,340
first meeting uh here this coming week

31
00:01:29,340 --> 00:01:31,920
and I'm a bit of a container nut so

32
00:01:31,920 --> 00:01:34,619
um I will get on the soapbox about that

33
00:01:34,619 --> 00:01:37,020
um I have my own ideas about philosophy

34
00:01:37,020 --> 00:01:39,180
and again how microservice architecture

35
00:01:39,180 --> 00:01:41,280
should be and how you should set things

36
00:01:41,280 --> 00:01:45,420
up but anything containers I'm in so in

37
00:01:45,420 --> 00:01:47,540
fact on my our company slack I have

38
00:01:47,540 --> 00:01:49,920
kubernetes Kate's container and all that

39
00:01:49,920 --> 00:01:51,659
flag so I get messages if anybody's

40
00:01:51,659 --> 00:01:54,000
saying all those in any channels so uh

41
00:01:54,000 --> 00:01:57,479
I'm a Nut I will admit that

42
00:01:57,479 --> 00:01:59,159
uh so like I said we'll try to keep a

43
00:01:59,159 --> 00:02:00,840
high level with the container Basics but

44
00:02:00,840 --> 00:02:03,119
just kind of cover our bases here uh

45
00:02:03,119 --> 00:02:04,619
we'll talk what our containers what are

46
00:02:04,619 --> 00:02:07,320
they not and the types of containers and

47
00:02:07,320 --> 00:02:09,179
or run times that you all might have

48
00:02:09,179 --> 00:02:10,860
heard of

49
00:02:10,860 --> 00:02:14,099
so first what are containers

50
00:02:14,099 --> 00:02:16,200
um well simply put it solves the problem

51
00:02:16,200 --> 00:02:18,420
of it works on my machine it works on my

52
00:02:18,420 --> 00:02:20,000
machine not yours

53
00:02:20,000 --> 00:02:22,500
but straight from docker's website and

54
00:02:22,500 --> 00:02:24,120
again docker's just one of the container

55
00:02:24,120 --> 00:02:26,280
engines you can work with but they have

56
00:02:26,280 --> 00:02:28,379
a really solid underlying philosophy

57
00:02:28,379 --> 00:02:29,879
it's a standard unit of software

58
00:02:29,879 --> 00:02:31,800
packages up all your code all the

59
00:02:31,800 --> 00:02:34,319
dependencies it all runs reliably inside

60
00:02:34,319 --> 00:02:36,300
a container everything you need to run

61
00:02:36,300 --> 00:02:37,860
your application is inside that

62
00:02:37,860 --> 00:02:39,900
container or multiple containers that

63
00:02:39,900 --> 00:02:41,220
work together

64
00:02:41,220 --> 00:02:42,840
and the thing about containers is that

65
00:02:42,840 --> 00:02:45,599
they're independently scalable okay so

66
00:02:45,599 --> 00:02:48,540
uh some applications break that mold

67
00:02:48,540 --> 00:02:50,160
again it's

68
00:02:50,160 --> 00:02:51,900
part of the docker philosophy or

69
00:02:51,900 --> 00:02:54,780
microservice architecture but in general

70
00:02:54,780 --> 00:02:57,060
they independently scale or work

71
00:02:57,060 --> 00:03:00,420
together to scale a monolithic or a

72
00:03:00,420 --> 00:03:02,220
traditional monolithic application into

73
00:03:02,220 --> 00:03:04,980
micro Services which we'll get into that

74
00:03:04,980 --> 00:03:06,599
here in a second

75
00:03:06,599 --> 00:03:09,180
what are they not it's not a VM please

76
00:03:09,180 --> 00:03:11,519
please stop saying it's a VM

77
00:03:11,519 --> 00:03:13,680
um we will use the term it's like a VM

78
00:03:13,680 --> 00:03:15,959
you can exec into it you can run

79
00:03:15,959 --> 00:03:17,940
commands you can do just about anything

80
00:03:17,940 --> 00:03:20,340
you can do on the surface level with a

81
00:03:20,340 --> 00:03:23,519
VM but it's not a VM so containers or

82
00:03:23,519 --> 00:03:25,560
VMS abstract Hardware right so you got

83
00:03:25,560 --> 00:03:27,599
your esxi proxbox and all your

84
00:03:27,599 --> 00:03:29,819
virtualization they virtualize the

85
00:03:29,819 --> 00:03:30,780
hardware

86
00:03:30,780 --> 00:03:33,840
containers containers virtualize or

87
00:03:33,840 --> 00:03:36,000
abstract the software through the use of

88
00:03:36,000 --> 00:03:38,580
an engine so they share a kernel kernel

89
00:03:38,580 --> 00:03:40,400
on the underlying host

90
00:03:40,400 --> 00:03:42,840
containers don't have their own so

91
00:03:42,840 --> 00:03:45,360
there's a big difference it's not a VM

92
00:03:45,360 --> 00:03:47,700
so just keep in mind with that but

93
00:03:47,700 --> 00:03:49,980
really that is important when you're

94
00:03:49,980 --> 00:03:53,159
talking about proper architectures how

95
00:03:53,159 --> 00:03:54,540
do you build applications inside

96
00:03:54,540 --> 00:03:57,840
containers you know if you're used to be

97
00:03:57,840 --> 00:03:59,280
your assistant D or things like that it

98
00:03:59,280 --> 00:04:01,560
just won't work so the way you use your

99
00:04:01,560 --> 00:04:03,720
applications the way you build them is

100
00:04:03,720 --> 00:04:04,799
just fundamentally a little bit

101
00:04:04,799 --> 00:04:06,980
different

102
00:04:07,319 --> 00:04:09,599
so some advantages these are just my top

103
00:04:09,599 --> 00:04:11,340
three that I like to talk about with

104
00:04:11,340 --> 00:04:12,900
people when I'm just introducing the

105
00:04:12,900 --> 00:04:15,060
topic and I'm not wanting to scare them

106
00:04:15,060 --> 00:04:17,940
off uh number one be resource efficiency

107
00:04:17,940 --> 00:04:19,500
again they don't have their own kernel

108
00:04:19,500 --> 00:04:21,660
uh they're sharing the host kernel so

109
00:04:21,660 --> 00:04:24,120
you're actually saving on resources

110
00:04:24,120 --> 00:04:26,100
um so if you have a host like a type one

111
00:04:26,100 --> 00:04:28,560
hypervisor and you've got several VMS

112
00:04:28,560 --> 00:04:31,020
one for each application you've got some

113
00:04:31,020 --> 00:04:33,240
overhead there even though all those

114
00:04:33,240 --> 00:04:34,979
applications or excuse me all those VMS

115
00:04:34,979 --> 00:04:37,860
may be the exact same operating system

116
00:04:37,860 --> 00:04:39,780
so there's extra overhead

117
00:04:39,780 --> 00:04:41,900
so you do gain some resource efficiency

118
00:04:41,900 --> 00:04:44,520
by using containers and sharing a kernel

119
00:04:44,520 --> 00:04:46,080
obviously there are some security

120
00:04:46,080 --> 00:04:48,419
concerns with that we'll get into that

121
00:04:48,419 --> 00:04:50,759
number two on my list would be

122
00:04:50,759 --> 00:04:52,040
portability

123
00:04:52,040 --> 00:04:55,320
so all the dependencies for the

124
00:04:55,320 --> 00:04:56,699
application are bundled in the container

125
00:04:56,699 --> 00:04:57,780
like we said

126
00:04:57,780 --> 00:04:59,699
this means they can be easily moved

127
00:04:59,699 --> 00:05:02,100
between different deployments you can

128
00:05:02,100 --> 00:05:04,500
have a you know a test stage or a server

129
00:05:04,500 --> 00:05:08,699
environment uh trial production so on so

130
00:05:08,699 --> 00:05:10,080
forth developer

131
00:05:10,080 --> 00:05:12,180
and you're able to move that image

132
00:05:12,180 --> 00:05:13,979
between all those environments and you

133
00:05:13,979 --> 00:05:15,900
don't have to change anything all you

134
00:05:15,900 --> 00:05:17,520
have to do is just make sure that it has

135
00:05:17,520 --> 00:05:20,040
a Docker engine or any kind of container

136
00:05:20,040 --> 00:05:23,340
runtime on the host and you're good to

137
00:05:23,340 --> 00:05:24,240
go

138
00:05:24,240 --> 00:05:26,400
on that note uh continuous deployment

139
00:05:26,400 --> 00:05:27,840
and testing so containers are really

140
00:05:27,840 --> 00:05:29,699
helpful here again because that solves

141
00:05:29,699 --> 00:05:31,199
that problem of I don't have to reset up

142
00:05:31,199 --> 00:05:32,639
the environment and make it the exact

143
00:05:32,639 --> 00:05:34,139
same

144
00:05:34,139 --> 00:05:36,000
um between like I said like a Dev

145
00:05:36,000 --> 00:05:37,699
environment and production environment

146
00:05:37,699 --> 00:05:40,440
so everything you have is right there

147
00:05:40,440 --> 00:05:42,360
you just move the image over or pull the

148
00:05:42,360 --> 00:05:45,060
image down your container and you're

149
00:05:45,060 --> 00:05:46,880
good to go there's obviously a lot more

150
00:05:46,880 --> 00:05:49,560
benefits but these are my top three uh

151
00:05:49,560 --> 00:05:51,240
for using them

152
00:05:51,240 --> 00:05:53,280
so some popular container run times

153
00:05:53,280 --> 00:05:55,259
these are probably the three most

154
00:05:55,259 --> 00:05:56,340
popular

155
00:05:56,340 --> 00:05:58,139
lxc is a little bit different than the

156
00:05:58,139 --> 00:06:00,479
other two it has a little bit different

157
00:06:00,479 --> 00:06:02,780
of a philosophy than Docker

158
00:06:02,780 --> 00:06:05,220
I will take it because I think we'll

159
00:06:05,220 --> 00:06:08,160
have time I'll point it out lxc

160
00:06:08,160 --> 00:06:11,460
um is most closely like a VM you can run

161
00:06:11,460 --> 00:06:13,500
systemd you can run in at D and all

162
00:06:13,500 --> 00:06:15,720
these things but it's still a container

163
00:06:15,720 --> 00:06:17,699
it has the entire operating system

164
00:06:17,699 --> 00:06:20,300
basically in a file

165
00:06:20,300 --> 00:06:21,960
so it's a little bit different than

166
00:06:21,960 --> 00:06:23,819
Docker wears Docker and in podman being

167
00:06:23,819 --> 00:06:25,860
an alternative to Docker

168
00:06:25,860 --> 00:06:27,120
um

169
00:06:27,120 --> 00:06:28,620
it's not like that you don't have system

170
00:06:28,620 --> 00:06:30,360
D without some really major

171
00:06:30,360 --> 00:06:33,000
modifications it's just a different

172
00:06:33,000 --> 00:06:34,500
philosophy of how you run things Docker

173
00:06:34,500 --> 00:06:37,400
is kind of your one service micro

174
00:06:37,400 --> 00:06:40,199
container that had it runs just one

175
00:06:40,199 --> 00:06:42,419
Service uh same thing with podman being

176
00:06:42,419 --> 00:06:44,100
the alternative so a little bit

177
00:06:44,100 --> 00:06:45,840
different philosophy but it's still a

178
00:06:45,840 --> 00:06:47,520
different it's a type of container it's

179
00:06:47,520 --> 00:06:50,460
a different type of runtime

180
00:06:50,460 --> 00:06:52,680
I wanted to now that we've kind of got a

181
00:06:52,680 --> 00:06:54,120
surface level understanding of

182
00:06:54,120 --> 00:06:56,100
containers and I'm actually I'll take

183
00:06:56,100 --> 00:06:58,500
quick pull who here uses containers on a

184
00:06:58,500 --> 00:07:01,199
semi-regular basis actually wow awesome

185
00:07:01,199 --> 00:07:03,360
I'm with Kindred people

186
00:07:03,360 --> 00:07:05,039
um I love it uh normally I'm the only

187
00:07:05,039 --> 00:07:06,300
person

188
00:07:06,300 --> 00:07:08,100
um at work everybody else hates me

189
00:07:08,100 --> 00:07:09,840
talking about containers

190
00:07:09,840 --> 00:07:10,380
um

191
00:07:10,380 --> 00:07:13,259
yeah every time we work with a vendor in

192
00:07:13,259 --> 00:07:15,539
it there's a container or kubernetes

193
00:07:15,539 --> 00:07:16,740
aspect

194
00:07:16,740 --> 00:07:18,960
they all start messaging me saying hold

195
00:07:18,960 --> 00:07:20,520
your horses

196
00:07:20,520 --> 00:07:22,860
um so anyway some common uses a lot of

197
00:07:22,860 --> 00:07:25,139
them you may use if you don't use these

198
00:07:25,139 --> 00:07:26,340
maybe these give you some good ideas

199
00:07:26,340 --> 00:07:27,720
we'll look at runtimes versus

200
00:07:27,720 --> 00:07:29,580
orchestrators just make sure we're level

201
00:07:29,580 --> 00:07:31,259
set there and then we'll take a look at

202
00:07:31,259 --> 00:07:33,240
how we develop them

203
00:07:33,240 --> 00:07:35,460
so some common uses OS virtualization

204
00:07:35,460 --> 00:07:37,199
again it's not a VM but you can use it

205
00:07:37,199 --> 00:07:38,520
to virtualize in the west to figure out

206
00:07:38,520 --> 00:07:40,380
how an application will behave in a

207
00:07:40,380 --> 00:07:42,180
particular type of environment you know

208
00:07:42,180 --> 00:07:44,759
different OS has behave differently they

209
00:07:44,759 --> 00:07:46,620
have different versions of packages by

210
00:07:46,620 --> 00:07:48,900
default within the package manager maybe

211
00:07:48,900 --> 00:07:51,180
it's a busy box versus gnu things like

212
00:07:51,180 --> 00:07:53,039
that so you could kind of understand in

213
00:07:53,039 --> 00:07:55,199
a test environment how an application is

214
00:07:55,199 --> 00:07:57,419
going to run I actually just went

215
00:07:57,419 --> 00:07:59,340
through this exercise exercise this last

216
00:07:59,340 --> 00:08:01,259
week upgrading a container to a

217
00:08:01,259 --> 00:08:03,599
different base image or upgrading the

218
00:08:03,599 --> 00:08:05,039
application and we just use the

219
00:08:05,039 --> 00:08:06,539
different base image and found out hey

220
00:08:06,539 --> 00:08:07,620
there's some things that won't work

221
00:08:07,620 --> 00:08:10,080
because it's just a different version so

222
00:08:10,080 --> 00:08:12,180
really good for that and then obviously

223
00:08:12,180 --> 00:08:13,620
microservices and distributed

224
00:08:13,620 --> 00:08:15,199
applications

225
00:08:15,199 --> 00:08:17,160
Docker is the most popular for

226
00:08:17,160 --> 00:08:19,199
microservices oh by the way lxc is my

227
00:08:19,199 --> 00:08:21,539
choice for OS virtualization it's really

228
00:08:21,539 --> 00:08:24,300
easy to spin up it's very fast and you

229
00:08:24,300 --> 00:08:26,520
get like a persistent shell you don't

230
00:08:26,520 --> 00:08:27,599
have to like

231
00:08:27,599 --> 00:08:29,639
do some finagling to get a shell in

232
00:08:29,639 --> 00:08:30,620
there

233
00:08:30,620 --> 00:08:33,120
but for microservices and distributed

234
00:08:33,120 --> 00:08:35,339
architectures that's Docker again podman

235
00:08:35,339 --> 00:08:36,679
being a

236
00:08:36,679 --> 00:08:40,380
more security conscious version of that

237
00:08:40,380 --> 00:08:41,039
um

238
00:08:41,039 --> 00:08:43,679
so microservice again level set on the

239
00:08:43,679 --> 00:08:44,940
terminology it's a monolith that's

240
00:08:44,940 --> 00:08:47,459
broken down into smaller independently

241
00:08:47,459 --> 00:08:50,040
scalable Services each container runs a

242
00:08:50,040 --> 00:08:52,440
portion of the monolith hence micro

243
00:08:52,440 --> 00:08:54,660
microservice this allows you to

244
00:08:54,660 --> 00:08:56,100
distribute the core components of an

245
00:08:56,100 --> 00:08:58,440
application across multiple environments

246
00:08:58,440 --> 00:09:02,220
maybe even multiple hosts

247
00:09:02,220 --> 00:09:03,720
um and they can still act as a single

248
00:09:03,720 --> 00:09:06,660
cohesive application okay

249
00:09:06,660 --> 00:09:10,080
uh microservice micro servicing allows

250
00:09:10,080 --> 00:09:12,000
developers to independently focus on

251
00:09:12,000 --> 00:09:13,980
each particular part of the application

252
00:09:13,980 --> 00:09:15,839
so in development when you're trying to

253
00:09:15,839 --> 00:09:17,339
update a monolith you usually have to

254
00:09:17,339 --> 00:09:19,980
update and redeploy the entire thing

255
00:09:19,980 --> 00:09:22,560
whereas a microservice you can focus on

256
00:09:22,560 --> 00:09:23,820
just the one part that you're working

257
00:09:23,820 --> 00:09:26,820
with and because it's independent of all

258
00:09:26,820 --> 00:09:28,140
the other parts and independently

259
00:09:28,140 --> 00:09:29,640
scalable you don't have to touch

260
00:09:29,640 --> 00:09:30,720
everything else all you have to make

261
00:09:30,720 --> 00:09:32,880
sure is that it connects there are a lot

262
00:09:32,880 --> 00:09:34,200
of products out there that do service

263
00:09:34,200 --> 00:09:35,760
discovery that as soon as you bring it

264
00:09:35,760 --> 00:09:37,140
up online it just comes right back into

265
00:09:37,140 --> 00:09:39,180
the application that's a little bit more

266
00:09:39,180 --> 00:09:40,740
complicated but you get the idea they're

267
00:09:40,740 --> 00:09:42,420
all independent so you can just work on

268
00:09:42,420 --> 00:09:44,540
and redeploy just the particular part

269
00:09:44,540 --> 00:09:47,040
you are concerned about that allows us

270
00:09:47,040 --> 00:09:50,100
to do things faster release faster and

271
00:09:50,100 --> 00:09:52,860
it's just a better model I can't say

272
00:09:52,860 --> 00:09:54,660
better A little maybe a little bit more

273
00:09:54,660 --> 00:09:56,580
flexible if your environment can handle

274
00:09:56,580 --> 00:09:58,700
it

275
00:09:59,580 --> 00:10:00,959
there we go

276
00:10:00,959 --> 00:10:02,760
um and I've mentioned kubernetes a

277
00:10:02,760 --> 00:10:04,200
couple times orchestrators just wanted

278
00:10:04,200 --> 00:10:06,600
to take a quick pause here it's not an

279
00:10:06,600 --> 00:10:08,580
alternative to Docker okay you know when

280
00:10:08,580 --> 00:10:10,440
I was first learning about this this has

281
00:10:10,440 --> 00:10:12,420
been like five six years ago I saw this

282
00:10:12,420 --> 00:10:13,620
you know kubernetes being thrown around

283
00:10:13,620 --> 00:10:14,459
a lot

284
00:10:14,459 --> 00:10:16,500
and I almost thought of it as like an

285
00:10:16,500 --> 00:10:18,300
alternative to Docker a different way to

286
00:10:18,300 --> 00:10:19,920
deploy containers and that's it's just

287
00:10:19,920 --> 00:10:22,920
not true uh kubernetes used this Docker

288
00:10:22,920 --> 00:10:24,540
under the hood in fact for its own

289
00:10:24,540 --> 00:10:26,580
components sometimes you can run the

290
00:10:26,580 --> 00:10:29,399
components as containers but kubernetes

291
00:10:29,399 --> 00:10:31,620
is not an alternative to Docker it runs

292
00:10:31,620 --> 00:10:34,019
Docker containers if you so choose but

293
00:10:34,019 --> 00:10:36,060
kubernetes is essentially just an API

294
00:10:36,060 --> 00:10:38,339
server okay it's a big fancy API server

295
00:10:38,339 --> 00:10:39,959
it's very complex

296
00:10:39,959 --> 00:10:42,540
um from the outside but not an

297
00:10:42,540 --> 00:10:44,579
alternative to a Docker it's what we

298
00:10:44,579 --> 00:10:46,740
call an orchestrator the API engine and

299
00:10:46,740 --> 00:10:48,600
the API server orchestrates all the

300
00:10:48,600 --> 00:10:50,220
various deployments and Creations of

301
00:10:50,220 --> 00:10:52,320
containers or what kubernetes calls pods

302
00:10:52,320 --> 00:10:54,300
which have multiple containers inside of

303
00:10:54,300 --> 00:10:57,660
them so not an alternative and so from

304
00:10:57,660 --> 00:10:59,519
here on when I mentioned containers I'm

305
00:10:59,519 --> 00:11:01,140
specific or Docker I'm specifically

306
00:11:01,140 --> 00:11:04,200
talking about an individual container if

307
00:11:04,200 --> 00:11:05,459
I want to talk about a pod I'll

308
00:11:05,459 --> 00:11:07,019
specifically mention a pod but those are

309
00:11:07,019 --> 00:11:10,100
obviously not one of the same

310
00:11:10,320 --> 00:11:12,540
where are they best used again these are

311
00:11:12,540 --> 00:11:15,779
my top three that work for me just some

312
00:11:15,779 --> 00:11:18,839
ideas that may work for you this is not

313
00:11:18,839 --> 00:11:21,060
an exhaustive list but

314
00:11:21,060 --> 00:11:23,040
um obviously services that can be easily

315
00:11:23,040 --> 00:11:25,800
segmented if you're running a web server

316
00:11:25,800 --> 00:11:26,519
um

317
00:11:26,519 --> 00:11:29,040
and you are running a database or a

318
00:11:29,040 --> 00:11:30,779
python application on your web server or

319
00:11:30,779 --> 00:11:32,579
something like that those are usually

320
00:11:32,579 --> 00:11:34,860
independent of each other they can work

321
00:11:34,860 --> 00:11:36,180
independently

322
00:11:36,180 --> 00:11:37,440
you know if you're running a web server

323
00:11:37,440 --> 00:11:39,720
everything runs over maybe a TCP stack

324
00:11:39,720 --> 00:11:41,940
and so it's very easy to segment that

325
00:11:41,940 --> 00:11:43,800
service

326
00:11:43,800 --> 00:11:44,399
um

327
00:11:44,399 --> 00:11:48,360
ephemeral short life workloads so who

328
00:11:48,360 --> 00:11:51,180
here uses like Lambda or Azure functions

329
00:11:51,180 --> 00:11:53,940
okay so Lambda Azure functions along

330
00:11:53,940 --> 00:11:57,000
that line serverless to be I guess exact

331
00:11:57,000 --> 00:11:59,880
along that lines but I'm just I need to

332
00:11:59,880 --> 00:12:01,980
run a workload I need to run an

333
00:12:01,980 --> 00:12:04,800
application or a script

334
00:12:04,800 --> 00:12:06,240
um one time actually I'll give you a

335
00:12:06,240 --> 00:12:08,339
good example of this working with a

336
00:12:08,339 --> 00:12:09,660
company and they used a very very

337
00:12:09,660 --> 00:12:11,940
outdated version of ansible and that was

338
00:12:11,940 --> 00:12:14,040
not the version they had on my machine I

339
00:12:14,040 --> 00:12:15,720
did not want to have two different

340
00:12:15,720 --> 00:12:18,480
versions of ansible one being very very

341
00:12:18,480 --> 00:12:21,000
old so instead I just put it in a

342
00:12:21,000 --> 00:12:22,380
container I installed the correct

343
00:12:22,380 --> 00:12:24,720
version the old version in the container

344
00:12:24,720 --> 00:12:25,920
and it was completely independent my

345
00:12:25,920 --> 00:12:28,140
host and I can just run all the

346
00:12:28,140 --> 00:12:30,440
workloads from in there okay

347
00:12:30,440 --> 00:12:32,880
a lot of jobs that I run a lot of

348
00:12:32,880 --> 00:12:34,920
scripts that have different

349
00:12:34,920 --> 00:12:37,740
um dependencies I'll just run them in a

350
00:12:37,740 --> 00:12:39,540
container it's completely isolated again

351
00:12:39,540 --> 00:12:41,459
it's kind of like a VM that's why people

352
00:12:41,459 --> 00:12:44,700
think oh it's a VM but it's not not but

353
00:12:44,700 --> 00:12:46,560
you can use it like that you can use it

354
00:12:46,560 --> 00:12:50,220
for that function like workload

355
00:12:50,220 --> 00:12:51,540
um ad hoc tooling another great way to

356
00:12:51,540 --> 00:12:52,620
do it you know I just want to run this

357
00:12:52,620 --> 00:12:54,300
script or I want to run this particular

358
00:12:54,300 --> 00:12:56,279
version of an application put it in a

359
00:12:56,279 --> 00:12:58,560
container you're good to go

360
00:12:58,560 --> 00:13:00,619
um

361
00:13:01,740 --> 00:13:04,560
a great example of this I was working on

362
00:13:04,560 --> 00:13:06,480
a project for certificate management for

363
00:13:06,480 --> 00:13:08,600
a company and

364
00:13:08,600 --> 00:13:11,100
I could put all of its dependencies in

365
00:13:11,100 --> 00:13:13,440
that application we could deploy it

366
00:13:13,440 --> 00:13:15,720
inside of a Docker container and then we

367
00:13:15,720 --> 00:13:17,519
could just deploy that anywhere in our

368
00:13:17,519 --> 00:13:19,680
Jenkins server and any of our other

369
00:13:19,680 --> 00:13:21,600
icicd pipelines Azure devops whatever

370
00:13:21,600 --> 00:13:23,459
and it would work the exact same because

371
00:13:23,459 --> 00:13:26,579
all it needs is the docker engine so I

372
00:13:26,579 --> 00:13:27,899
just threw some of the tools that I was

373
00:13:27,899 --> 00:13:29,760
using to create or manage these

374
00:13:29,760 --> 00:13:31,800
certificates inside a container so

375
00:13:31,800 --> 00:13:33,420
that's where you can also use it but

376
00:13:33,420 --> 00:13:34,980
your primary is going to be you know

377
00:13:34,980 --> 00:13:37,500
microservice segmentation that's

378
00:13:37,500 --> 00:13:41,820
probably the most important and world

379
00:13:41,820 --> 00:13:44,579
changing to be honest part of

380
00:13:44,579 --> 00:13:46,440
microservice architecture excuse me part

381
00:13:46,440 --> 00:13:48,360
of Docker is its ability to do

382
00:13:48,360 --> 00:13:51,440
microservice architectures

383
00:13:51,779 --> 00:13:53,760
so how do we make a container how do we

384
00:13:53,760 --> 00:13:55,680
get into the development first before

385
00:13:55,680 --> 00:13:58,800
you like take a picture and crucify me

386
00:13:58,800 --> 00:14:00,600
um this is not a well-optimized

387
00:14:00,600 --> 00:14:02,040
container totally understand that this

388
00:14:02,040 --> 00:14:03,600
was just a quick proof of concept that I

389
00:14:03,600 --> 00:14:05,940
was trying to do I was working with the

390
00:14:05,940 --> 00:14:08,220
Azure CLI and I needed a particular

391
00:14:08,220 --> 00:14:10,260
version of something and I didn't want

392
00:14:10,260 --> 00:14:11,339
to have to mess with that on my house so

393
00:14:11,339 --> 00:14:12,660
I threw it in here but it gives you a

394
00:14:12,660 --> 00:14:15,000
good idea what we could do so first

395
00:14:15,000 --> 00:14:17,399
sorry my hands are a little shaky here I

396
00:14:17,399 --> 00:14:19,079
guess just the distance but from that's

397
00:14:19,079 --> 00:14:20,760
our base image so I'm saying I want to

398
00:14:20,760 --> 00:14:23,579
use Debian their base image that they

399
00:14:23,579 --> 00:14:26,639
provide to me which is in and of itself

400
00:14:26,639 --> 00:14:29,220
just a bunch of layers of files so like

401
00:14:29,220 --> 00:14:30,839
just like this it's a bunch of layers of

402
00:14:30,839 --> 00:14:33,120
files I don't have access to I'm just

403
00:14:33,120 --> 00:14:35,339
importing them basically

404
00:14:35,339 --> 00:14:37,200
very much like uh like an import in

405
00:14:37,200 --> 00:14:39,000
Python okay

406
00:14:39,000 --> 00:14:40,320
I'm saying I want to use their layers

407
00:14:40,320 --> 00:14:41,699
and I start building on top of that

408
00:14:41,699 --> 00:14:44,639
these layers are now also

409
00:14:44,639 --> 00:14:47,519
um read only after the layer is finished

410
00:14:47,519 --> 00:14:49,139
so in this layer I run some updates I

411
00:14:49,139 --> 00:14:50,519
install some applications I do a bunch

412
00:14:50,519 --> 00:14:52,500
of stuff okay cool I'm done and I move

413
00:14:52,500 --> 00:14:54,720
on and I copy in my actual script that I

414
00:14:54,720 --> 00:14:56,279
want in the red that I'm just trying to

415
00:14:56,279 --> 00:14:58,380
get a proof of concept done here once I

416
00:14:58,380 --> 00:14:59,579
do that the layer before it becomes

417
00:14:59,579 --> 00:15:00,899
read-only

418
00:15:00,899 --> 00:15:03,899
becomes hashed it's Unique so anytime

419
00:15:03,899 --> 00:15:06,000
you change anything in this layer a

420
00:15:06,000 --> 00:15:08,760
version updates a file updates whatever

421
00:15:08,760 --> 00:15:11,160
that is now a new hash this layer get

422
00:15:11,160 --> 00:15:14,579
rebuilt okay so anytime you move on to

423
00:15:14,579 --> 00:15:16,680
another layer this becomes read-only and

424
00:15:16,680 --> 00:15:18,180
now you're just building on top of that

425
00:15:18,180 --> 00:15:22,320
okay it's a like a cache file system on

426
00:15:22,320 --> 00:15:23,820
the overlay file system is technically

427
00:15:23,820 --> 00:15:25,500
the term

428
00:15:25,500 --> 00:15:27,480
and then I go through and I just I

429
00:15:27,480 --> 00:15:29,040
change the user app and then I run my

430
00:15:29,040 --> 00:15:32,940
script cool okay pretty simple but this

431
00:15:32,940 --> 00:15:35,399
is uh to start from the beginning

432
00:15:35,399 --> 00:15:37,680
without this from statement it's just an

433
00:15:37,680 --> 00:15:40,139
empty canvas you got nothing uh so you

434
00:15:40,139 --> 00:15:41,699
can either choose to import and do all

435
00:15:41,699 --> 00:15:44,399
this stuff or you can import exactly

436
00:15:44,399 --> 00:15:45,839
what you want it's called a scratch

437
00:15:45,839 --> 00:15:47,519
image you can basically build your own

438
00:15:47,519 --> 00:15:49,139
Linux distribution inside of container

439
00:15:49,139 --> 00:15:52,560
okay or you can choose another Linux

440
00:15:52,560 --> 00:15:55,500
distribution to build off of

441
00:15:55,500 --> 00:15:57,420
um there's some really cool things that

442
00:15:57,420 --> 00:16:00,300
this allows us to do I mentioned hashing

443
00:16:00,300 --> 00:16:01,920
that's a security thing that you can use

444
00:16:01,920 --> 00:16:03,839
you can look at hashes to make sure

445
00:16:03,839 --> 00:16:05,339
nothing has been changed so it's

446
00:16:05,339 --> 00:16:08,040
immutable you can analyze those hashes

447
00:16:08,040 --> 00:16:09,540
and everything changes or it's not what

448
00:16:09,540 --> 00:16:11,579
you expect you can you know assume

449
00:16:11,579 --> 00:16:13,079
there's been a problem or a breach or

450
00:16:13,079 --> 00:16:16,680
whatever it also allows us to exactly

451
00:16:16,680 --> 00:16:18,959
what we did with this from this is

452
00:16:18,959 --> 00:16:20,880
basically just a list of hashes from

453
00:16:20,880 --> 00:16:23,699
Debian I can instead of rebuilding

454
00:16:23,699 --> 00:16:25,320
everything that they do I again I just

455
00:16:25,320 --> 00:16:28,260
copy it in and I copy that hash in or if

456
00:16:28,260 --> 00:16:29,699
I took this let's say I dropped out this

457
00:16:29,699 --> 00:16:32,519
entry point I could now use all of this

458
00:16:32,519 --> 00:16:35,339
stuff as a base image for another image

459
00:16:35,339 --> 00:16:36,899
that I want to create you can basically

460
00:16:36,899 --> 00:16:38,759
chain that and you do that with image

461
00:16:38,759 --> 00:16:41,279
caching image caching in this layering

462
00:16:41,279 --> 00:16:42,420
idea

463
00:16:42,420 --> 00:16:43,980
but there's some security implications

464
00:16:43,980 --> 00:16:47,000
there and we'll talk about that

465
00:16:47,040 --> 00:16:49,259
so security considerations I want to

466
00:16:49,259 --> 00:16:51,540
talk through four main areas again this

467
00:16:51,540 --> 00:16:52,860
is not necessarily an exhaustive list

468
00:16:52,860 --> 00:16:56,220
but four main areas uh that you

469
00:16:56,220 --> 00:16:57,959
typically want to look at at the you

470
00:16:57,959 --> 00:17:00,180
know the lifetime of a container

471
00:17:00,180 --> 00:17:02,040
um our images where you store your

472
00:17:02,040 --> 00:17:04,859
images the actual hosts themselves or

473
00:17:04,859 --> 00:17:06,299
the orchestrators that are running these

474
00:17:06,299 --> 00:17:08,819
images and then the underlying runtimes

475
00:17:08,819 --> 00:17:10,500
like the actual Daemon or the docker

476
00:17:10,500 --> 00:17:12,299
Damon

477
00:17:12,299 --> 00:17:14,099
in our images

478
00:17:14,099 --> 00:17:16,140
um so some security considerations here

479
00:17:16,140 --> 00:17:17,819
number one this I think this is the most

480
00:17:17,819 --> 00:17:19,619
important uh the Upstream

481
00:17:19,619 --> 00:17:22,140
vulnerabilities so as you remember in

482
00:17:22,140 --> 00:17:23,520
that previous image when I showed you

483
00:17:23,520 --> 00:17:26,400
the my ad hoc tool that I built I was

484
00:17:26,400 --> 00:17:29,880
trusting debian's base image I trusted

485
00:17:29,880 --> 00:17:31,799
that they had an updated version that if

486
00:17:31,799 --> 00:17:33,360
there's a package in there that there's

487
00:17:33,360 --> 00:17:35,880
you know CV cve and it's really high or

488
00:17:35,880 --> 00:17:37,320
CVSs that's really high by the way if

489
00:17:37,320 --> 00:17:38,520
you missed the talk over there that was

490
00:17:38,520 --> 00:17:40,620
really good where she talked about CDs

491
00:17:40,620 --> 00:17:43,919
and CVSs but let's say I'm trusting

492
00:17:43,919 --> 00:17:46,080
Debian to not have a ton of

493
00:17:46,080 --> 00:17:47,400
vulnerabilities in their image or I'm

494
00:17:47,400 --> 00:17:49,500
trusting them to consistently update and

495
00:17:49,500 --> 00:17:51,419
making sure that they're handling that I

496
00:17:51,419 --> 00:17:53,700
need to establish what I call this is me

497
00:17:53,700 --> 00:17:56,039
registered trademark whatever base image

498
00:17:56,039 --> 00:17:58,320
chain of trust so I want to tr I have to

499
00:17:58,320 --> 00:18:01,559
go back and follow the trail because if

500
00:18:01,559 --> 00:18:04,140
I import let's go back

501
00:18:04,140 --> 00:18:06,299
if I import instead of from Debbie and

502
00:18:06,299 --> 00:18:07,559
let's say I import from someone else

503
00:18:07,559 --> 00:18:09,360
that they built an image with some

504
00:18:09,360 --> 00:18:11,340
custom packages in it there's a bunch of

505
00:18:11,340 --> 00:18:12,660
them out there

506
00:18:12,660 --> 00:18:14,280
I have to go back and figure out what

507
00:18:14,280 --> 00:18:16,620
did he import what did he build off of

508
00:18:16,620 --> 00:18:18,539
did he build off of an insecure or maybe

509
00:18:18,539 --> 00:18:20,940
an old version of Debian or whatever I'm

510
00:18:20,940 --> 00:18:23,539
building on so I have to go back and

511
00:18:23,539 --> 00:18:26,160
establish that chain of trust figure out

512
00:18:26,160 --> 00:18:28,020
what do I have in my environment

513
00:18:28,020 --> 00:18:30,780
inventory my actual images and follow

514
00:18:30,780 --> 00:18:34,460
the bread the bread comes back

515
00:18:34,500 --> 00:18:37,620
um misconfiguration this is probably

516
00:18:37,620 --> 00:18:39,660
man it's super important but this is

517
00:18:39,660 --> 00:18:42,059
probably the majority of problems you'll

518
00:18:42,059 --> 00:18:43,679
find or security issues that you'll find

519
00:18:43,679 --> 00:18:46,440
in a containerized environment

520
00:18:46,440 --> 00:18:48,780
um the big one being is incorrect

521
00:18:48,780 --> 00:18:51,120
permissions principles of least

522
00:18:51,120 --> 00:18:52,620
privilege obviously we all know that

523
00:18:52,620 --> 00:18:54,960
term but we don't use it and it's it's

524
00:18:54,960 --> 00:18:56,940
easy to miss when I'm building this

525
00:18:56,940 --> 00:18:59,700
image I'll go back here actually

526
00:18:59,700 --> 00:19:01,679
when I'm building this image

527
00:19:01,679 --> 00:19:05,340
this line right here is a huge deal when

528
00:19:05,340 --> 00:19:07,740
I switch to user app that's a non-root

529
00:19:07,740 --> 00:19:09,360
user it's a standard user no permissions

530
00:19:09,360 --> 00:19:11,280
other event itself

531
00:19:11,280 --> 00:19:14,280
if I missed that which is really easy to

532
00:19:14,280 --> 00:19:15,960
miss because a lot of times oh something

533
00:19:15,960 --> 00:19:17,460
permissions didn't work I'll just remove

534
00:19:17,460 --> 00:19:19,140
user app I'll run as root just to get

535
00:19:19,140 --> 00:19:21,840
rid of the problem okay not so this is a

536
00:19:21,840 --> 00:19:23,880
proof of concept so it works and then

537
00:19:23,880 --> 00:19:25,140
how many times do we take a proof of

538
00:19:25,140 --> 00:19:27,480
concept right into Dev in production and

539
00:19:27,480 --> 00:19:29,880
so it's really easy to miss that making

540
00:19:29,880 --> 00:19:31,919
sure we have correct permissions within

541
00:19:31,919 --> 00:19:33,480
the container itself we're not running

542
00:19:33,480 --> 00:19:37,320
things as root we're not mounting uh or

543
00:19:37,320 --> 00:19:39,660
providing file systems to that container

544
00:19:39,660 --> 00:19:41,400
that it doesn't need to have access to

545
00:19:41,400 --> 00:19:42,960
we're only giving it exactly what it

546
00:19:42,960 --> 00:19:44,940
needs so user switching mentioned that

547
00:19:44,940 --> 00:19:47,940
don't run things as uh sudo Sudo

548
00:19:47,940 --> 00:19:49,320
whatever you want to call it do not run

549
00:19:49,320 --> 00:19:50,940
that unless you absolutely have to

550
00:19:50,940 --> 00:19:53,460
usually there's a way and podman is a

551
00:19:53,460 --> 00:19:54,720
good alternative where they have their

552
00:19:54,720 --> 00:19:57,240
rootless mode it's a really good

553
00:19:57,240 --> 00:19:59,220
alternative it a little bit more

554
00:19:59,220 --> 00:20:00,660
security conscious and a little bit

555
00:20:00,660 --> 00:20:02,700
extras that they provide but don't run

556
00:20:02,700 --> 00:20:05,460
things as a super user unless absolutely

557
00:20:05,460 --> 00:20:07,799
necessary most of the times it's not

558
00:20:07,799 --> 00:20:09,720
it's usually you just need to be a

559
00:20:09,720 --> 00:20:11,280
little bit more thorough when setting

560
00:20:11,280 --> 00:20:13,140
permissions within your container or

561
00:20:13,140 --> 00:20:14,640
with the files that that container is

562
00:20:14,640 --> 00:20:16,080
accessing so it just takes a little bit

563
00:20:16,080 --> 00:20:18,000
more work but you're going to save

564
00:20:18,000 --> 00:20:19,620
yourself a lot of grief

565
00:20:19,620 --> 00:20:21,780
uh then the docker socket so this is a

566
00:20:21,780 --> 00:20:24,020
file system socket and this is how

567
00:20:24,020 --> 00:20:26,120
containers

568
00:20:26,120 --> 00:20:28,380
interact with the kernel essentially how

569
00:20:28,380 --> 00:20:29,820
the docker Daemon interacts with the

570
00:20:29,820 --> 00:20:30,840
kernel

571
00:20:30,840 --> 00:20:33,720
some containers were request that you

572
00:20:33,720 --> 00:20:35,700
mount this socket within a container so

573
00:20:35,700 --> 00:20:37,740
that that one container that you mounted

574
00:20:37,740 --> 00:20:40,020
it to can then control other containers

575
00:20:40,020 --> 00:20:42,539
so for example if I have an application

576
00:20:42,539 --> 00:20:44,039
there's a popular one that y'all may

577
00:20:44,039 --> 00:20:45,780
have called called Watchdog I think it's

578
00:20:45,780 --> 00:20:46,500
called

579
00:20:46,500 --> 00:20:48,240
it basically watches all your containers

580
00:20:48,240 --> 00:20:50,400
and if there's an update or a new image

581
00:20:50,400 --> 00:20:52,020
available it'll automatically pull that

582
00:20:52,020 --> 00:20:53,340
and then rebuild the inventory and

583
00:20:53,340 --> 00:20:55,320
redeploy it well it needs to have access

584
00:20:55,320 --> 00:20:57,179
to the docker Daemon itself and it runs

585
00:20:57,179 --> 00:20:58,559
as a container so you mount the socket

586
00:20:58,559 --> 00:21:00,720
in there it's a bad bad idea I stopped

587
00:21:00,720 --> 00:21:02,400
using that a long time ago because if

588
00:21:02,400 --> 00:21:03,720
that watchdog

589
00:21:03,720 --> 00:21:06,120
container ever gets compromised it now

590
00:21:06,120 --> 00:21:07,620
has full access to everything else

591
00:21:07,620 --> 00:21:09,179
that's running because it has access to

592
00:21:09,179 --> 00:21:11,340
the socket so don't Mount the socket

593
00:21:11,340 --> 00:21:12,840
unless you absolutely absolutely need to

594
00:21:12,840 --> 00:21:14,700
and most of the time you don't there are

595
00:21:14,700 --> 00:21:15,780
other ways to do what you're trying to

596
00:21:15,780 --> 00:21:16,860
do

597
00:21:16,860 --> 00:21:18,600
obviously making sure we're not

598
00:21:18,600 --> 00:21:20,820
including vulnerable binaries making

599
00:21:20,820 --> 00:21:22,440
sure that you have an accurate inventory

600
00:21:22,440 --> 00:21:25,320
system or a product sneaks a great

601
00:21:25,320 --> 00:21:27,360
example uh there's a lot of them out

602
00:21:27,360 --> 00:21:28,260
there but they're probably the most

603
00:21:28,260 --> 00:21:30,600
popular where you're analyzing your

604
00:21:30,600 --> 00:21:32,520
repository you're analyzing your Docker

605
00:21:32,520 --> 00:21:34,980
file uh that thing that had all the

606
00:21:34,980 --> 00:21:36,419
layers I forgot to mention that by the

607
00:21:36,419 --> 00:21:38,640
way it's called a Docker file you need

608
00:21:38,640 --> 00:21:39,900
to make sure you're scanning that and

609
00:21:39,900 --> 00:21:41,400
making sure hey there's no vulnerable

610
00:21:41,400 --> 00:21:43,200
binars in there making sure I'm not

611
00:21:43,200 --> 00:21:45,179
installing a version that's old that has

612
00:21:45,179 --> 00:21:47,400
a new cve with a high CVSs or something

613
00:21:47,400 --> 00:21:49,919
like that so that's pretty basic and

614
00:21:49,919 --> 00:21:51,659
build Secrets sometimes whenever you're

615
00:21:51,659 --> 00:21:53,880
building an image and you're copying

616
00:21:53,880 --> 00:21:55,500
your company's you know code repository

617
00:21:55,500 --> 00:21:59,400
you got to have a access key and API key

618
00:21:59,400 --> 00:22:02,640
what have use client secret ID

619
00:22:02,640 --> 00:22:04,440
um something like that and a lot of

620
00:22:04,440 --> 00:22:05,940
people just hard code that right into

621
00:22:05,940 --> 00:22:07,860
the docker file and they think oh it's

622
00:22:07,860 --> 00:22:11,159
good because the repo is private where

623
00:22:11,159 --> 00:22:13,080
the docker file lives only people in our

624
00:22:13,080 --> 00:22:14,280
company have access to it and we have

625
00:22:14,280 --> 00:22:16,200
good you know arbot controls on the repo

626
00:22:16,200 --> 00:22:18,840
I'm that well you're not really because

627
00:22:18,840 --> 00:22:21,840
again if you remember that every line

628
00:22:21,840 --> 00:22:24,659
every layer in that image that I've

629
00:22:24,659 --> 00:22:27,360
built is cache and it's read only so

630
00:22:27,360 --> 00:22:28,980
theoretically you can peel back the

631
00:22:28,980 --> 00:22:30,600
onion not theoretically practically you

632
00:22:30,600 --> 00:22:32,340
can peel back the onion and if someone

633
00:22:32,340 --> 00:22:35,100
gets a shell access to that container

634
00:22:35,100 --> 00:22:36,960
they could find that build secret and

635
00:22:36,960 --> 00:22:38,460
then obviously use that for other things

636
00:22:38,460 --> 00:22:41,820
so don't hard code build Secrets have

637
00:22:41,820 --> 00:22:43,380
good Secrets management using something

638
00:22:43,380 --> 00:22:45,539
like hashicorp other products like that

639
00:22:45,539 --> 00:22:47,100
where you can inject build secrets into

640
00:22:47,100 --> 00:22:49,559
your pipeline even Jenkins you know

641
00:22:49,559 --> 00:22:51,059
Jenkins has their built-in users or

642
00:22:51,059 --> 00:22:52,200
credential store

643
00:22:52,200 --> 00:22:53,820
that's even a great that's an easy

644
00:22:53,820 --> 00:22:56,340
alternative to injecting these build

645
00:22:56,340 --> 00:22:59,220
Secrets directly into or hard coding

646
00:22:59,220 --> 00:23:01,320
them instead of injecting them so into

647
00:23:01,320 --> 00:23:03,659
the docker file

648
00:23:03,659 --> 00:23:05,640
then in our registry

649
00:23:05,640 --> 00:23:07,440
um making sure we have good arbot

650
00:23:07,440 --> 00:23:09,720
controls who has access to push and pull

651
00:23:09,720 --> 00:23:11,340
I'll explain why that's important

652
00:23:11,340 --> 00:23:13,440
obviously who has access to delete you

653
00:23:13,440 --> 00:23:14,760
don't want people just deleting your

654
00:23:14,760 --> 00:23:15,900
stuff

655
00:23:15,900 --> 00:23:17,640
um you know they don't need that

656
00:23:17,640 --> 00:23:19,080
permission don't give it to them

657
00:23:19,080 --> 00:23:20,580
principles of leaves privilege but the

658
00:23:20,580 --> 00:23:21,600
reason why I say push and pull is

659
00:23:21,600 --> 00:23:23,220
specifically we'll talk about this here

660
00:23:23,220 --> 00:23:24,659
in a second I'm just gonna move on and

661
00:23:24,659 --> 00:23:25,799
I'll come back to that encryption at

662
00:23:25,799 --> 00:23:27,059
wrestling and Transit that's an obvious

663
00:23:27,059 --> 00:23:29,039
one don't send things over clear texts

664
00:23:29,039 --> 00:23:31,260
don't store them in clear text encrypt

665
00:23:31,260 --> 00:23:33,240
everything at rest and in transit

666
00:23:33,240 --> 00:23:35,520
but the push and pull

667
00:23:35,520 --> 00:23:36,720
um I think I'll go to the next slide

668
00:23:36,720 --> 00:23:38,820
here's why it's so important

669
00:23:38,820 --> 00:23:41,460
um unit 42 this is back actually from

670
00:23:41,460 --> 00:23:44,220
2020 this report but there's an updated

671
00:23:44,220 --> 00:23:45,659
report and

672
00:23:45,659 --> 00:23:47,580
um Aqua security I don't know if you all

673
00:23:47,580 --> 00:23:49,200
are familiar with aqua they actually

674
00:23:49,200 --> 00:23:50,940
just released earlier this week I didn't

675
00:23:50,940 --> 00:23:52,080
even have time to put it in the slide

676
00:23:52,080 --> 00:23:55,980
their findings on registry security what

677
00:23:55,980 --> 00:23:57,780
they found out in the wild and the

678
00:23:57,780 --> 00:23:59,280
reason why I mentioned your push and

679
00:23:59,280 --> 00:24:01,260
pull operation as being important for

680
00:24:01,260 --> 00:24:03,780
your registry

681
00:24:03,780 --> 00:24:06,000
um if you don't get proper commissions

682
00:24:06,000 --> 00:24:08,880
to push and pull let's say you leave the

683
00:24:08,880 --> 00:24:10,740
pull operation you think oh it's no big

684
00:24:10,740 --> 00:24:12,780
deal it's a compiled image no one can

685
00:24:12,780 --> 00:24:14,700
inject a secret or inject malware into

686
00:24:14,700 --> 00:24:16,740
my thing they can just pull it well the

687
00:24:16,740 --> 00:24:18,299
problem is you give them a chance to

688
00:24:18,299 --> 00:24:20,580
analyze your environment better you've

689
00:24:20,580 --> 00:24:22,640
given them access to your system

690
00:24:22,640 --> 00:24:25,559
indirectly because they now can peel

691
00:24:25,559 --> 00:24:27,480
back the ending of the container and

692
00:24:27,480 --> 00:24:29,760
look where a vulnerability might be okay

693
00:24:29,760 --> 00:24:32,340
so having correct our bot controls on

694
00:24:32,340 --> 00:24:35,039
the Polly the push now we're talking

695
00:24:35,039 --> 00:24:37,320
about supply chain attacks someone if

696
00:24:37,320 --> 00:24:39,620
they if you have an unauthenticated push

697
00:24:39,620 --> 00:24:42,600
uh operation like you just allow push

698
00:24:42,600 --> 00:24:45,240
operations anybody could pull that image

699
00:24:45,240 --> 00:24:46,559
or even let's say they don't pull it

700
00:24:46,559 --> 00:24:47,940
they just build their own malicious

701
00:24:47,940 --> 00:24:50,039
container that does you know just nukes

702
00:24:50,039 --> 00:24:50,760
everything

703
00:24:50,760 --> 00:24:52,620
well you've now allowed them to

704
00:24:52,620 --> 00:24:54,240
implement supply chain attacks and

705
00:24:54,240 --> 00:24:55,620
obviously we've heard a lot about this

706
00:24:55,620 --> 00:24:57,840
in the last few weeks with 3cx supply

707
00:24:57,840 --> 00:25:00,240
chain uh hack and there was another one

708
00:25:00,240 --> 00:25:01,980
that was they were a victim of another

709
00:25:01,980 --> 00:25:03,299
supply chain attack it was like the

710
00:25:03,299 --> 00:25:04,860
first double supply chain attack in

711
00:25:04,860 --> 00:25:05,580
history

712
00:25:05,580 --> 00:25:06,960
but with containers it's really easy

713
00:25:06,960 --> 00:25:09,059
people just miss this

714
00:25:09,059 --> 00:25:10,799
um and it's not getting any better again

715
00:25:10,799 --> 00:25:12,780
this is from 2020 I hope maybe it'll get

716
00:25:12,780 --> 00:25:14,340
better it's not

717
00:25:14,340 --> 00:25:15,900
um Aqua security proved that with their

718
00:25:15,900 --> 00:25:17,340
findings actually it was just like

719
00:25:17,340 --> 00:25:19,620
Monday or something it came out but

720
00:25:19,620 --> 00:25:21,059
here's the stats but I'll read you the

721
00:25:21,059 --> 00:25:23,159
little excerpt from the uh from the

722
00:25:23,159 --> 00:25:24,960
article that they published so our

723
00:25:24,960 --> 00:25:27,600
research identifies 941 Registries

724
00:25:27,600 --> 00:25:30,360
exposed to the internet and 117

725
00:25:30,360 --> 00:25:31,860
Registries accessible without

726
00:25:31,860 --> 00:25:33,480
Authentication

727
00:25:33,480 --> 00:25:34,880
there are a total of

728
00:25:34,880 --> 00:25:39,659
2956 repositories and 15 887 tags so

729
00:25:39,659 --> 00:25:41,100
whenever you build an image it tags it

730
00:25:41,100 --> 00:25:44,039
so a bunch of Unique Images

731
00:25:44,039 --> 00:25:46,080
or versions of images

732
00:25:46,080 --> 00:25:48,900
out of the 117 unsecured Registries 80

733
00:25:48,900 --> 00:25:51,900
of them allowed the pull operation

734
00:25:51,900 --> 00:25:53,820
80 of them allowed you to just pull down

735
00:25:53,820 --> 00:25:56,159
their code without any Authentication

736
00:25:56,159 --> 00:25:58,559
the 92 Registries allowed the push

737
00:25:58,559 --> 00:26:00,960
operation 92 allowed people to inject

738
00:26:00,960 --> 00:26:02,520
their own containers into the supply

739
00:26:02,520 --> 00:26:05,159
chain with zero Authentication

740
00:26:05,159 --> 00:26:06,960
and seven registered allow the delete

741
00:26:06,960 --> 00:26:08,580
operation

742
00:26:08,580 --> 00:26:11,039
I mean you know denial of service I mean

743
00:26:11,039 --> 00:26:12,720
can that's huge

744
00:26:12,720 --> 00:26:14,580
without looking into image content so

745
00:26:14,580 --> 00:26:15,779
they didn't actually start looking at it

746
00:26:15,779 --> 00:26:18,059
we could attribute about 25 of the

747
00:26:18,059 --> 00:26:19,860
unsecured Registries by reverse DNS

748
00:26:19,860 --> 00:26:21,900
lookup or CN and TLS certificates

749
00:26:21,900 --> 00:26:23,220
meaning they just found this with public

750
00:26:23,220 --> 00:26:25,559
data that's it the owners of these

751
00:26:25,559 --> 00:26:26,820
Registries range from research

752
00:26:26,820 --> 00:26:28,080
Institutes

753
00:26:28,080 --> 00:26:30,500
retailers news media organizations

754
00:26:30,500 --> 00:26:33,120
technology companies some exposed

755
00:26:33,120 --> 00:26:34,080
Registries have more than 50

756
00:26:34,080 --> 00:26:36,779
repositories and 100 tax exposed with

757
00:26:36,779 --> 00:26:38,400
all the source code and historical tabs

758
00:26:38,400 --> 00:26:40,260
and malicious actors can design tailored

759
00:26:40,260 --> 00:26:41,400
exploits

760
00:26:41,400 --> 00:26:43,919
to compromise the systems if the push

761
00:26:43,919 --> 00:26:46,200
operation is allowed benign application

762
00:26:46,200 --> 00:26:48,000
images may be replaced with images with

763
00:26:48,000 --> 00:26:50,279
back doors these registers may also be

764
00:26:50,279 --> 00:26:52,440
used for hosting malware if the delete

765
00:26:52,440 --> 00:26:54,659
operational is allowed hackers could

766
00:26:54,659 --> 00:26:56,700
encrypt or delete images and ask for

767
00:26:56,700 --> 00:26:58,559
ransom to file a service

768
00:26:58,559 --> 00:27:00,539
as each registry is typically accessed

769
00:27:00,539 --> 00:27:02,580
by multiple clients here's a big thing

770
00:27:02,580 --> 00:27:05,400
all the clients who pull and run images

771
00:27:05,400 --> 00:27:07,520
from those compromised Registries

772
00:27:07,520 --> 00:27:10,020
immediately become vulnerable

773
00:27:10,020 --> 00:27:12,179
you can't trust that those the hosts

774
00:27:12,179 --> 00:27:13,559
that are pulling and using those images

775
00:27:13,559 --> 00:27:17,220
are now secure because they've pulled

776
00:27:17,220 --> 00:27:20,640
unvetted unauthorized code potentially

777
00:27:20,640 --> 00:27:23,039
it's a big deal

778
00:27:23,039 --> 00:27:24,960
and how can we secure our container

779
00:27:24,960 --> 00:27:27,179
runtime again this is Docker itself the

780
00:27:27,179 --> 00:27:30,419
actual binary that's running the daemin

781
00:27:30,419 --> 00:27:31,799
and all the underlying API and all that

782
00:27:31,799 --> 00:27:33,059
stuff

783
00:27:33,059 --> 00:27:34,980
um obviously there's cves for the

784
00:27:34,980 --> 00:27:36,779
runtime make sure you're updating Docker

785
00:27:36,779 --> 00:27:38,520
itself you can't just assume well I've

786
00:27:38,520 --> 00:27:39,600
updated everything in the image I'm

787
00:27:39,600 --> 00:27:40,980
secure now you still got to make sure

788
00:27:40,980 --> 00:27:43,980
your underlying engine is updated

789
00:27:43,980 --> 00:27:45,539
because there could be an exploit for

790
00:27:45,539 --> 00:27:47,340
Docker itself

791
00:27:47,340 --> 00:27:48,539
and then the configuration of the

792
00:27:48,539 --> 00:27:50,520
runtime again configuration is usually

793
00:27:50,520 --> 00:27:52,860
where you have the most mistakes and

794
00:27:52,860 --> 00:27:54,000
expose yourself to a lot of

795
00:27:54,000 --> 00:27:56,880
vulnerabilities running it as rootless I

796
00:27:56,880 --> 00:27:58,860
remember I remember I said podman has a

797
00:27:58,860 --> 00:28:00,299
lot of rootless features that you can

798
00:28:00,299 --> 00:28:03,179
Implement easier than Docker having a

799
00:28:03,179 --> 00:28:04,740
read-only file system

800
00:28:04,740 --> 00:28:07,679
so the underlying host that's running

801
00:28:07,679 --> 00:28:09,539
your container everything should be read

802
00:28:09,539 --> 00:28:11,279
only except exactly what's necessary to

803
00:28:11,279 --> 00:28:12,960
run docker

804
00:28:12,960 --> 00:28:14,580
um in fact I'll take a quick pause on

805
00:28:14,580 --> 00:28:15,360
this

806
00:28:15,360 --> 00:28:18,720
um what's time about 20 minutes okay

807
00:28:18,720 --> 00:28:20,100
um I'm working on a project called

808
00:28:20,100 --> 00:28:23,940
ponecube it's a kubernetes exploit path

809
00:28:23,940 --> 00:28:24,539
um

810
00:28:24,539 --> 00:28:26,520
and what I actually figured out was I

811
00:28:26,520 --> 00:28:28,620
was able to exploit an Azure kubernetes

812
00:28:28,620 --> 00:28:31,440
service so AKs cluster I was able to get

813
00:28:31,440 --> 00:28:33,600
an exploit in there and they don't have

814
00:28:33,600 --> 00:28:36,000
root only file systems I was able to get

815
00:28:36,000 --> 00:28:38,520
a shell on one of the hosts the worker

816
00:28:38,520 --> 00:28:40,380
nodes of the kubernetes deploy or the

817
00:28:40,380 --> 00:28:42,779
kubernetes cluster and install a Cron

818
00:28:42,779 --> 00:28:45,900
job that pinged out to my C2 server I

819
00:28:45,900 --> 00:28:47,640
just needed a proof of concept there but

820
00:28:47,640 --> 00:28:49,200
it was not read only

821
00:28:49,200 --> 00:28:52,320
I could just access it okay so even as

822
00:28:52,320 --> 00:28:53,700
the even if you're like oh everything's

823
00:28:53,700 --> 00:28:55,020
locked down the route not good enough

824
00:28:55,020 --> 00:28:56,700
you need to make sure it's completely

825
00:28:56,700 --> 00:28:59,460
locked down and read only

826
00:28:59,460 --> 00:29:01,559
um if you're running Docker itself like

827
00:29:01,559 --> 00:29:03,179
you're running it individually drop

828
00:29:03,179 --> 00:29:06,000
Linux capabilities that the actual

829
00:29:06,000 --> 00:29:08,820
engine shouldn't need you know uh you

830
00:29:08,820 --> 00:29:10,860
usually want to give Docker certain

831
00:29:10,860 --> 00:29:13,140
Linux capabilities like net admin things

832
00:29:13,140 --> 00:29:14,580
like that because it might need to give

833
00:29:14,580 --> 00:29:16,980
a container a certain privilege or

834
00:29:16,980 --> 00:29:18,120
whatever you don't need to give your

835
00:29:18,120 --> 00:29:19,799
containers make sure Docker doesn't have

836
00:29:19,799 --> 00:29:21,600
access to either because if Docker ever

837
00:29:21,600 --> 00:29:23,220
becomes compromised it now has more than

838
00:29:23,220 --> 00:29:25,380
it needs more permissions than it needs

839
00:29:25,380 --> 00:29:26,820
and then don't run containers as

840
00:29:26,820 --> 00:29:27,899
privileged make sure you're running them

841
00:29:27,899 --> 00:29:30,899
as unprivileged pretty simple there

842
00:29:30,899 --> 00:29:32,940
and then the orchesters and hosts again

843
00:29:32,940 --> 00:29:34,559
kind of similar to the other one this is

844
00:29:34,559 --> 00:29:36,779
really kind of hand in hand secure your

845
00:29:36,779 --> 00:29:38,460
host root only file systems things like

846
00:29:38,460 --> 00:29:41,700
that follow basic host hardening

847
00:29:41,700 --> 00:29:42,539
um

848
00:29:42,539 --> 00:29:45,000
I mean it's really simple protect

849
00:29:45,000 --> 00:29:47,360
yourself against container Breakout

850
00:29:47,360 --> 00:29:49,980
making sure you do security scanning

851
00:29:49,980 --> 00:29:51,419
within an orchestrator again now we're

852
00:29:51,419 --> 00:29:52,620
talking about kubernetes things like

853
00:29:52,620 --> 00:29:54,020
that openshift

854
00:29:54,020 --> 00:29:56,220
make sure you're scanning that

855
00:29:56,220 --> 00:29:58,200
environment itself the actual

856
00:29:58,200 --> 00:30:00,480
orchestrator the API environment check

857
00:30:00,480 --> 00:30:02,580
how your networking is configured how is

858
00:30:02,580 --> 00:30:04,260
your storage configured these are all

859
00:30:04,260 --> 00:30:06,720
done via like drivers and plugins how is

860
00:30:06,720 --> 00:30:07,860
your networking configured is it

861
00:30:07,860 --> 00:30:09,240
encrypted at rest

862
00:30:09,240 --> 00:30:10,740
is there something encrypting it in

863
00:30:10,740 --> 00:30:12,840
transit same thing with

864
00:30:12,840 --> 00:30:14,340
um or excuse me storage networking

865
00:30:14,340 --> 00:30:17,159
making sure you're you know having good

866
00:30:17,159 --> 00:30:18,659
uh like firewall rules things like that

867
00:30:18,659 --> 00:30:20,580
they still apply even though it's a

868
00:30:20,580 --> 00:30:22,919
container environment or an API

869
00:30:22,919 --> 00:30:25,320
environment basic rules still apply here

870
00:30:25,320 --> 00:30:27,720
and then your API access making sure you

871
00:30:27,720 --> 00:30:29,940
have good arbot controls on the actual

872
00:30:29,940 --> 00:30:33,480
kubernetes API okay

873
00:30:33,480 --> 00:30:35,580
and so now having seen all that let's

874
00:30:35,580 --> 00:30:37,080
look at the entire container security

875
00:30:37,080 --> 00:30:41,039
life cycle again this is kind of my own

876
00:30:41,039 --> 00:30:43,679
from building images deploying images

877
00:30:43,679 --> 00:30:46,620
and securing them this is kind of my own

878
00:30:46,620 --> 00:30:47,279
um

879
00:30:47,279 --> 00:30:49,440
idea of what a container lifecycle

880
00:30:49,440 --> 00:30:52,020
should look like in our build stage this

881
00:30:52,020 --> 00:30:53,520
is where we apply the concept of shift

882
00:30:53,520 --> 00:30:55,679
left okay you've all heard that term

883
00:30:55,679 --> 00:30:58,799
Buzz term but it's important pushing

884
00:30:58,799 --> 00:31:01,620
security operations further left for you

885
00:31:01,620 --> 00:31:04,919
guys left in the development cycle are

886
00:31:04,919 --> 00:31:07,200
we scanning these things at build time

887
00:31:07,200 --> 00:31:09,059
or are we waiting till they're at you

888
00:31:09,059 --> 00:31:10,320
know hey we're ready to run this can we

889
00:31:10,320 --> 00:31:11,820
scan it and figure out if there's any

890
00:31:11,820 --> 00:31:13,380
vulnerabilities no no you should do that

891
00:31:13,380 --> 00:31:14,820
way further around in the process

892
00:31:14,820 --> 00:31:17,460
earlier on process excuse me

893
00:31:17,460 --> 00:31:19,980
establish your image chain of trust like

894
00:31:19,980 --> 00:31:22,200
I said before what base images are you

895
00:31:22,200 --> 00:31:23,880
using you know for an Enterprise

896
00:31:23,880 --> 00:31:25,440
application you may have heard of using

897
00:31:25,440 --> 00:31:26,880
like the Alpine based image it's a

898
00:31:26,880 --> 00:31:29,460
really small really purpose-built you

899
00:31:29,460 --> 00:31:31,080
know like five megabytes but it's got a

900
00:31:31,080 --> 00:31:32,460
package manager so it's really easy to

901
00:31:32,460 --> 00:31:33,899
use

902
00:31:33,899 --> 00:31:35,460
um if you're using that great but if

903
00:31:35,460 --> 00:31:36,360
you're not and you're using somebody

904
00:31:36,360 --> 00:31:38,399
else's image or even Alpine actually you

905
00:31:38,399 --> 00:31:39,840
shouldn't exclude Alpine just because

906
00:31:39,840 --> 00:31:41,279
they're really you know known to be

907
00:31:41,279 --> 00:31:43,320
secure you still got to establish That

908
00:31:43,320 --> 00:31:45,539
Base image chain of trust know what you

909
00:31:45,539 --> 00:31:46,740
have in your environment and what you're

910
00:31:46,740 --> 00:31:48,419
introducing because let's say they have

911
00:31:48,419 --> 00:31:50,700
a supply chain attack are you monitoring

912
00:31:50,700 --> 00:31:52,980
their stuff before you use it you need

913
00:31:52,980 --> 00:31:54,480
to be doing that

914
00:31:54,480 --> 00:31:56,220
and then using proper build Secrets

915
00:31:56,220 --> 00:31:57,659
mention that make sure you're injecting

916
00:31:57,659 --> 00:32:00,059
those not hard coding those

917
00:32:00,059 --> 00:32:01,980
uh and then shipping and storage secure

918
00:32:01,980 --> 00:32:03,419
the registry and we talked about that

919
00:32:03,419 --> 00:32:05,279
Palo Alto Aqua they've published some

920
00:32:05,279 --> 00:32:07,080
stuff on that please please please I

921
00:32:07,080 --> 00:32:08,279
mean it's just getting worse and worse

922
00:32:08,279 --> 00:32:09,779
people spin up their own Registries or

923
00:32:09,779 --> 00:32:10,919
they use Docker and they just don't

924
00:32:10,919 --> 00:32:12,779
configure it properly I have good R bot

925
00:32:12,779 --> 00:32:15,720
controls secure your registry uh secure

926
00:32:15,720 --> 00:32:17,279
the image source so wherever you're

927
00:32:17,279 --> 00:32:19,740
building it from you can't assume that

928
00:32:19,740 --> 00:32:21,480
just because I scanned it and everything

929
00:32:21,480 --> 00:32:23,039
and I pushed it up to the cloud that's

930
00:32:23,039 --> 00:32:25,380
secure maybe your actual host has some

931
00:32:25,380 --> 00:32:26,820
malware on it that's injecting something

932
00:32:26,820 --> 00:32:28,559
before you actually push you don't know

933
00:32:28,559 --> 00:32:30,659
so secure your hosts make sure you have

934
00:32:30,659 --> 00:32:32,399
good endpoint detection things like that

935
00:32:32,399 --> 00:32:34,740
that's a talk for another day

936
00:32:34,740 --> 00:32:36,960
security registry host so if you're not

937
00:32:36,960 --> 00:32:39,779
using like a SAS very um registry like

938
00:32:39,779 --> 00:32:42,360
Google or Azure container registry

939
00:32:42,360 --> 00:32:44,220
GitHub container registry things like

940
00:32:44,220 --> 00:32:45,899
that if you're hosting it yourself

941
00:32:45,899 --> 00:32:48,539
follow host basic host hardening things

942
00:32:48,539 --> 00:32:51,059
like that making sure you're encrypting

943
00:32:51,059 --> 00:32:52,860
your storage and all that most people

944
00:32:52,860 --> 00:32:54,360
don't do that anymore they still use

945
00:32:54,360 --> 00:32:56,460
they use uh like SAS the ones I

946
00:32:56,460 --> 00:32:57,960
mentioned before but it's still very

947
00:32:57,960 --> 00:33:00,779
easy to misconfigure those so just make

948
00:33:00,779 --> 00:33:03,000
sure you're checking everything out

949
00:33:03,000 --> 00:33:04,919
Nancy runtime this is the real fun stuff

950
00:33:04,919 --> 00:33:06,919
so at runtime

951
00:33:06,919 --> 00:33:09,779
you can do a lot of image scanning and

952
00:33:09,779 --> 00:33:11,159
you can do a lot of security operations

953
00:33:11,159 --> 00:33:14,940
at runtime that you just wouldn't get in

954
00:33:14,940 --> 00:33:17,100
you know like a static application scan

955
00:33:17,100 --> 00:33:18,600
something like

956
00:33:18,600 --> 00:33:21,659
um sneak or other products that look at

957
00:33:21,659 --> 00:33:23,039
your source code or look at your

958
00:33:23,039 --> 00:33:24,899
Registries that's all static it's not

959
00:33:24,899 --> 00:33:26,700
running anything unless they have a

960
00:33:26,700 --> 00:33:28,380
dynamic component where they're

961
00:33:28,380 --> 00:33:29,880
executing it in like a private

962
00:33:29,880 --> 00:33:32,580
environment that's all static and so in

963
00:33:32,580 --> 00:33:34,799
your actual run time you can do more you

964
00:33:34,799 --> 00:33:36,480
can do more security and get more

965
00:33:36,480 --> 00:33:38,159
insights

966
00:33:38,159 --> 00:33:39,419
um I'll mention a few products I've

967
00:33:39,419 --> 00:33:41,700
mentioned a couple so far but for like

968
00:33:41,700 --> 00:33:43,559
run time you can use admission

969
00:33:43,559 --> 00:33:45,120
controllers or you can use a service

970
00:33:45,120 --> 00:33:47,100
that does all this for you

971
00:33:47,100 --> 00:33:49,559
um one good one or two good ones aqua

972
00:33:49,559 --> 00:33:53,340
and systig have a really awesome uh

973
00:33:53,340 --> 00:33:55,679
runtime security offering where they

974
00:33:55,679 --> 00:33:57,960
will monitor the actual system costs the

975
00:33:57,960 --> 00:34:00,600
actual like kernel ebpf system calls

976
00:34:00,600 --> 00:34:02,279
like as low as you can go to the kernel

977
00:34:02,279 --> 00:34:03,899
they're going to monitor that and figure

978
00:34:03,899 --> 00:34:05,220
out what's happening in that container

979
00:34:05,220 --> 00:34:08,099
what files are being touched what

980
00:34:08,099 --> 00:34:11,520
permissions were used what TCP calls did

981
00:34:11,520 --> 00:34:13,800
it did it make

982
00:34:13,800 --> 00:34:15,359
um pretty much everything I mean you're

983
00:34:15,359 --> 00:34:17,159
looking at you're watching the kernels

984
00:34:17,159 --> 00:34:19,619
you're seeing everything or you can use

985
00:34:19,619 --> 00:34:21,119
a little bit higher up in the stack you

986
00:34:21,119 --> 00:34:22,139
can use what are called admission

987
00:34:22,139 --> 00:34:24,480
controllers where you're monitoring the

988
00:34:24,480 --> 00:34:26,339
kubernetes API so theoretically

989
00:34:26,339 --> 00:34:27,540
everything that's happening within

990
00:34:27,540 --> 00:34:29,580
kubernetes is going through the API and

991
00:34:29,580 --> 00:34:30,839
so if you're monitoring the API you

992
00:34:30,839 --> 00:34:31,739
should be able to catch just about

993
00:34:31,739 --> 00:34:35,159
everything again specific to the uh to

994
00:34:35,159 --> 00:34:36,780
the orchestrator so the admission

995
00:34:36,780 --> 00:34:37,918
controller says hey I'm going to

996
00:34:37,918 --> 00:34:40,980
evaluate every API that API call it

997
00:34:40,980 --> 00:34:43,080
comes through and evaluate it against a

998
00:34:43,080 --> 00:34:45,780
policy if I have a policy disallowing

999
00:34:45,780 --> 00:34:48,000
maybe new files to be written or certain

1000
00:34:48,000 --> 00:34:50,099
permissions to be used I'm going to

1001
00:34:50,099 --> 00:34:51,960
catch that I'm stop it I'm going to

1002
00:34:51,960 --> 00:34:52,980
learn on it I'm going to kill it

1003
00:34:52,980 --> 00:34:55,080
whatever you can set that policy so

1004
00:34:55,080 --> 00:34:56,280
admission controllers that's a great

1005
00:34:56,280 --> 00:34:57,900
thing to use or you know use a SAS

1006
00:34:57,900 --> 00:35:00,540
program or application that will help

1007
00:35:00,540 --> 00:35:02,580
you automate all that and deploy that

1008
00:35:02,580 --> 00:35:05,220
scale like a big like an event press

1009
00:35:05,220 --> 00:35:07,020
image pinning

1010
00:35:07,020 --> 00:35:09,839
um so again if you remember when you

1011
00:35:09,839 --> 00:35:11,820
build an image or even a layer it's all

1012
00:35:11,820 --> 00:35:14,040
hashed and then when you build the final

1013
00:35:14,040 --> 00:35:16,740
image it's also basically a collective a

1014
00:35:16,740 --> 00:35:19,680
cumulative hash if anything changes in

1015
00:35:19,680 --> 00:35:22,200
that image there's a new hash

1016
00:35:22,200 --> 00:35:24,060
so when I'm building typically you see

1017
00:35:24,060 --> 00:35:26,579
like latest tag that's a default tag

1018
00:35:26,579 --> 00:35:27,780
that's used in Docker when you build an

1019
00:35:27,780 --> 00:35:28,980
image

1020
00:35:28,980 --> 00:35:29,640
um

1021
00:35:29,640 --> 00:35:32,760
that is what's called a mutable tag if

1022
00:35:32,760 --> 00:35:34,320
you change something and you re-tag it

1023
00:35:34,320 --> 00:35:36,359
as latest just overwrite the old one

1024
00:35:36,359 --> 00:35:39,599
an immutable tag is the hash if anything

1025
00:35:39,599 --> 00:35:41,700
changes in that image there's a new hash

1026
00:35:41,700 --> 00:35:45,300
the old hash cannot exist or it's not

1027
00:35:45,300 --> 00:35:47,040
valid if something changes in there it's

1028
00:35:47,040 --> 00:35:50,040
immutable and so by using uh image the

1029
00:35:50,040 --> 00:35:51,839
process of image pinning it's a very

1030
00:35:51,839 --> 00:35:54,599
hard very complex process and it's not

1031
00:35:54,599 --> 00:35:55,980
it's not easy it's not for a lot of

1032
00:35:55,980 --> 00:35:57,240
teams to be honest but this is like next

1033
00:35:57,240 --> 00:35:59,760
level you're saying instead of saying I

1034
00:35:59,760 --> 00:36:02,700
want to pull you know whatever app name

1035
00:36:02,700 --> 00:36:05,280
latest I'm going to say I want app name

1036
00:36:05,280 --> 00:36:06,900
and then you give it the long you know

1037
00:36:06,900 --> 00:36:09,300
whatever bit hash that's got

1038
00:36:09,300 --> 00:36:11,040
now you're saying it doesn't matter if

1039
00:36:11,040 --> 00:36:12,839
someone has a supply chain attack on me

1040
00:36:12,839 --> 00:36:16,020
and they push something and or they pull

1041
00:36:16,020 --> 00:36:17,520
it and they figure out how to reverse

1042
00:36:17,520 --> 00:36:19,140
engineer my application inject malware

1043
00:36:19,140 --> 00:36:21,000
it doesn't matter because I'm saying

1044
00:36:21,000 --> 00:36:23,220
I've scanned that hash and I know it

1045
00:36:23,220 --> 00:36:25,740
cannot be changed and before I run I can

1046
00:36:25,740 --> 00:36:27,720
use the mission controller to say hey is

1047
00:36:27,720 --> 00:36:28,980
there a new hash out there then I'm

1048
00:36:28,980 --> 00:36:30,660
going to try that's I'm being I'm

1049
00:36:30,660 --> 00:36:34,260
running if there is is there a scan is

1050
00:36:34,260 --> 00:36:36,660
there is it in compliance and if not

1051
00:36:36,660 --> 00:36:38,700
don't let it run so you can kind of

1052
00:36:38,700 --> 00:36:40,200
combine a lot of these things within

1053
00:36:40,200 --> 00:36:42,000
like in this one in particular

1054
00:36:42,000 --> 00:36:43,200
kubernetes using the admission

1055
00:36:43,200 --> 00:36:44,940
controller but with image pinning you

1056
00:36:44,940 --> 00:36:46,079
can use that with

1057
00:36:46,079 --> 00:36:48,300
Dr podman or anything like that

1058
00:36:48,300 --> 00:36:50,700
host security obvious make sure you've

1059
00:36:50,700 --> 00:36:52,200
secured the host uh and then network

1060
00:36:52,200 --> 00:36:54,180
security again basic rules still apply

1061
00:36:54,180 --> 00:36:56,460
making sure you have good firewalls uh

1062
00:36:56,460 --> 00:36:59,040
good rules on that

1063
00:36:59,040 --> 00:37:01,079
so some tooling considerations were kind

1064
00:37:01,079 --> 00:37:03,420
of nearing the end of the presentation

1065
00:37:03,420 --> 00:37:05,280
um this is not an exhaustive list but

1066
00:37:05,280 --> 00:37:06,720
these are some really really awesome

1067
00:37:06,720 --> 00:37:09,300
ones uh systig I mentioned them they

1068
00:37:09,300 --> 00:37:11,060
have an open source tool called Falco

1069
00:37:11,060 --> 00:37:14,880
Falco again is the tool that sits at the

1070
00:37:14,880 --> 00:37:18,240
ebpf layer of the kernel and is watching

1071
00:37:18,240 --> 00:37:20,040
everything that happens and you set up

1072
00:37:20,040 --> 00:37:23,099
your policies and your alerts but you

1073
00:37:23,099 --> 00:37:24,420
can just log everything and then you can

1074
00:37:24,420 --> 00:37:27,180
have some third-party uh tool like

1075
00:37:27,180 --> 00:37:30,240
Splunk elastic whatever monitoring for

1076
00:37:30,240 --> 00:37:33,180
particular events that's Falco is

1077
00:37:33,180 --> 00:37:36,720
catching systig also sponsors Cube shark

1078
00:37:36,720 --> 00:37:39,599
um I think the founder of systig is one

1079
00:37:39,599 --> 00:37:41,760
of the co-founders of Wireshark the code

1080
00:37:41,760 --> 00:37:44,520
for the original code developers and the

1081
00:37:44,520 --> 00:37:46,320
person now in charge of cube shark was

1082
00:37:46,320 --> 00:37:49,200
the other developer of Wireshark when

1083
00:37:49,200 --> 00:37:50,339
they first started so they've kind of

1084
00:37:50,339 --> 00:37:52,140
come back together and so this is

1085
00:37:52,140 --> 00:37:54,119
basically Wireshark for kubernetes it's

1086
00:37:54,119 --> 00:37:55,680
really awesome tool you get super

1087
00:37:55,680 --> 00:37:58,200
detailed information and you can combine

1088
00:37:58,200 --> 00:38:00,300
that with Falco alerts to get insights

1089
00:38:00,300 --> 00:38:02,820
like hey in avert an event fired off

1090
00:38:02,820 --> 00:38:04,320
what actually happened well now I can go

1091
00:38:04,320 --> 00:38:05,520
into cubeshark and look at the actual

1092
00:38:05,520 --> 00:38:08,339
Network calls look at the file calls

1093
00:38:08,339 --> 00:38:10,380
um the system calls anything like that

1094
00:38:10,380 --> 00:38:12,180
or you can just roll up and use systicks

1095
00:38:12,180 --> 00:38:13,680
you know SAS offering and they do all

1096
00:38:13,680 --> 00:38:15,660
that under the hood for you uh same

1097
00:38:15,660 --> 00:38:16,980
thing with aqua they have an open source

1098
00:38:16,980 --> 00:38:18,900
tool called trivi uh both of these

1099
00:38:18,900 --> 00:38:20,099
companies by the way have been Avid

1100
00:38:20,099 --> 00:38:22,020
supporters of Open Source as well as

1101
00:38:22,020 --> 00:38:24,240
sneak uh huge supportive open source

1102
00:38:24,240 --> 00:38:26,880
software and the community so definitely

1103
00:38:26,880 --> 00:38:29,460
check them out but trivia is kind of

1104
00:38:29,460 --> 00:38:31,800
your static scanner that you can run in

1105
00:38:31,800 --> 00:38:33,119
your build pipeline say hey do I have

1106
00:38:33,119 --> 00:38:34,980
any vulnerabilities in here it looks at

1107
00:38:34,980 --> 00:38:36,240
everything in the image looks at all the

1108
00:38:36,240 --> 00:38:38,820
versions and checks that out and they

1109
00:38:38,820 --> 00:38:41,339
also have supply chain much like systig

1110
00:38:41,339 --> 00:38:43,099
they have supply chain runtime Security

1111
00:38:43,099 --> 00:38:45,599
in their SAS offering so if you're in an

1112
00:38:45,599 --> 00:38:47,160
Enterprise definitely check out these

1113
00:38:47,160 --> 00:38:49,079
top three these are probably the biggest

1114
00:38:49,079 --> 00:38:51,660
when you're considering security from a

1115
00:38:51,660 --> 00:38:53,940
developer or devsecops point of view not

1116
00:38:53,940 --> 00:38:55,920
from like a cloud throughout in other

1117
00:38:55,920 --> 00:38:58,320
terms the cspn perspective that's from

1118
00:38:58,320 --> 00:39:00,000
That's from the other end the angle so

1119
00:39:00,000 --> 00:39:01,920
you got your developers coming into the

1120
00:39:01,920 --> 00:39:02,940
cloud this way and then you've got your

1121
00:39:02,940 --> 00:39:04,140
Cloud administrators your Cloud

1122
00:39:04,140 --> 00:39:05,880
Engineers they're concerned about the

1123
00:39:05,880 --> 00:39:08,820
actual Cloud components the actual setup

1124
00:39:08,820 --> 00:39:10,800
of you know the kubernetes cluster the

1125
00:39:10,800 --> 00:39:12,420
actual setup of your VMS and things like

1126
00:39:12,420 --> 00:39:13,220
that

1127
00:39:13,220 --> 00:39:16,740
prismacloud there pretty big in the cspm

1128
00:39:16,740 --> 00:39:19,380
as well honestly as well as uh the

1129
00:39:19,380 --> 00:39:22,560
developer aspect but if you're really

1130
00:39:22,560 --> 00:39:24,240
coming from the devsecops perspective

1131
00:39:24,240 --> 00:39:27,000
these are probably your top three

1132
00:39:27,000 --> 00:39:28,440
um and again I mentioned they're huge

1133
00:39:28,440 --> 00:39:30,240
and open source sharing of knowledge

1134
00:39:30,240 --> 00:39:33,599
sneak actually sponsors devsecops

1135
00:39:33,599 --> 00:39:35,520
um they have a division of their company

1136
00:39:35,520 --> 00:39:37,020
that all they do is they pay them to

1137
00:39:37,020 --> 00:39:38,640
manage these communities so they're

1138
00:39:38,640 --> 00:39:39,900
really giving back and making sure that

1139
00:39:39,900 --> 00:39:42,359
people are getting educated on these

1140
00:39:42,359 --> 00:39:43,140
um

1141
00:39:43,140 --> 00:39:45,300
let's see so this is one that you can

1142
00:39:45,300 --> 00:39:47,040
just use no tooling very much like

1143
00:39:47,040 --> 00:39:49,680
trivia this is open source uh Claire

1144
00:39:49,680 --> 00:39:52,680
will just look at your image and it'll

1145
00:39:52,680 --> 00:39:55,260
spit out a bunch of CVS hey you got all

1146
00:39:55,260 --> 00:39:57,180
this stuff here's the actual description

1147
00:39:57,180 --> 00:40:00,180
what's going on what can people do

1148
00:40:00,180 --> 00:40:01,560
um really great static application

1149
00:40:01,560 --> 00:40:03,780
scamming that's called Claire and you

1150
00:40:03,780 --> 00:40:06,619
can run that locally yeah

1151
00:40:09,300 --> 00:40:12,480
yeah this is so here um clear scanner

1152
00:40:12,480 --> 00:40:14,520
and then you are looking at the actual

1153
00:40:14,520 --> 00:40:17,579
image tag so I'm looking at PHP 7.2 so

1154
00:40:17,579 --> 00:40:18,900
if I don't have it Claire's going to

1155
00:40:18,900 --> 00:40:20,339
download it locally just like Docker

1156
00:40:20,339 --> 00:40:22,440
will and it'll scan it so that's

1157
00:40:22,440 --> 00:40:24,300
scanning from a registry you can scan

1158
00:40:24,300 --> 00:40:25,800
your own Docker file so it doesn't have

1159
00:40:25,800 --> 00:40:27,300
to be in registry but this one in

1160
00:40:27,300 --> 00:40:28,440
particular I'm scanning something from

1161
00:40:28,440 --> 00:40:29,820
Docker hub

1162
00:40:29,820 --> 00:40:31,200
great question and if anybody has any

1163
00:40:31,200 --> 00:40:32,820
questions feel free to interrupt me and

1164
00:40:32,820 --> 00:40:35,780
we'll have time at the end too

1165
00:40:35,839 --> 00:40:39,060
uh dockle this one was probably one of

1166
00:40:39,060 --> 00:40:41,160
the first tools that I started using for

1167
00:40:41,160 --> 00:40:44,099
gosh about four years ago dockle is what

1168
00:40:44,099 --> 00:40:47,220
we can use to help look at uh

1169
00:40:47,220 --> 00:40:49,800
best practices it can look at the image

1170
00:40:49,800 --> 00:40:50,940
and say let's see if we can get through

1171
00:40:50,940 --> 00:40:53,700
here uh app credentials.json yeah that's

1172
00:40:53,700 --> 00:40:56,280
probably not a good one uh let's see

1173
00:40:56,280 --> 00:41:00,240
remove the APT lists kind of shrink your

1174
00:41:00,240 --> 00:41:02,160
image size making sure you don't leave

1175
00:41:02,160 --> 00:41:04,200
things in your image

1176
00:41:04,200 --> 00:41:05,700
um or it may say another thing I forgot

1177
00:41:05,700 --> 00:41:07,680
to mention before about your caching is

1178
00:41:07,680 --> 00:41:09,720
it's going to scan each image even

1179
00:41:09,720 --> 00:41:11,520
though it's read only so let's say I uh

1180
00:41:11,520 --> 00:41:14,040
include that credential file and then in

1181
00:41:14,040 --> 00:41:15,480
a subsequent layer because I needed that

1182
00:41:15,480 --> 00:41:17,099
credential file and subsequently are

1183
00:41:17,099 --> 00:41:19,140
deleted I think no harm no file it's

1184
00:41:19,140 --> 00:41:20,760
gone by the time the image is built

1185
00:41:20,760 --> 00:41:22,980
problem is it still exists in the

1186
00:41:22,980 --> 00:41:25,560
previous layers it was just masked over

1187
00:41:25,560 --> 00:41:27,720
so daco is going to go hey I found that

1188
00:41:27,720 --> 00:41:30,000
file in one of the layers which if I can

1189
00:41:30,000 --> 00:41:31,680
anybody else can too

1190
00:41:31,680 --> 00:41:34,140
uh let's see what's another good one uh

1191
00:41:34,140 --> 00:41:36,839
don't use no password uh confirm your

1192
00:41:36,839 --> 00:41:39,839
permissions on these things uh I found

1193
00:41:39,839 --> 00:41:42,240
the MySQL password is hard coded in a

1194
00:41:42,240 --> 00:41:45,720
EnV environment variable

1195
00:41:45,720 --> 00:41:48,180
um things like that you last user should

1196
00:41:48,180 --> 00:41:49,619
not be root

1197
00:41:49,619 --> 00:41:51,660
you know so best practice assessment

1198
00:41:51,660 --> 00:41:53,899
yeah

1199
00:41:58,200 --> 00:42:01,098
say that one more time

1200
00:42:02,480 --> 00:42:05,220
yeah yeah so

1201
00:42:05,220 --> 00:42:07,260
yeah this will check the image that I

1202
00:42:07,260 --> 00:42:08,220
didn't scan didn't have anything right

1203
00:42:08,220 --> 00:42:09,900
now pseudo because I was running at his

1204
00:42:09,900 --> 00:42:12,660
root so this didn't exist and this again

1205
00:42:12,660 --> 00:42:16,800
is um let's see this was a test image

1206
00:42:16,800 --> 00:42:19,440
that someone that I pulled from a

1207
00:42:19,440 --> 00:42:21,420
tutorial where they intentionally left

1208
00:42:21,420 --> 00:42:23,040
in a bunch of this stuff

1209
00:42:23,040 --> 00:42:24,359
um but yeah if you're running a pseudo

1210
00:42:24,359 --> 00:42:25,920
Docker will catch that or other tools

1211
00:42:25,920 --> 00:42:27,359
like it will catch your best practices

1212
00:42:27,359 --> 00:42:29,220
and then kind of help you do a health

1213
00:42:29,220 --> 00:42:30,780
check on your image am I doing something

1214
00:42:30,780 --> 00:42:32,880
that's against best practices again a

1215
00:42:32,880 --> 00:42:34,079
lot of your Enterprise tools will have

1216
00:42:34,079 --> 00:42:35,520
this baked into their products right out

1217
00:42:35,520 --> 00:42:36,900
of the box

1218
00:42:36,900 --> 00:42:38,339
um all the I mentioned on the previous

1219
00:42:38,339 --> 00:42:40,980
slide will do that

1220
00:42:40,980 --> 00:42:42,780
um Docker content trust this is another

1221
00:42:42,780 --> 00:42:44,940
one saying hey you haven't enabled

1222
00:42:44,940 --> 00:42:47,460
content trust which is another layer of

1223
00:42:47,460 --> 00:42:49,859
immutability you're explicitly saying

1224
00:42:49,859 --> 00:42:51,599
who I trust things like that hey you

1225
00:42:51,599 --> 00:42:52,740
should do that

1226
00:42:52,740 --> 00:42:56,099
uh so that's dockle

1227
00:42:56,099 --> 00:42:57,720
um I have a few more tools I could talk

1228
00:42:57,720 --> 00:42:59,160
through but obviously I want I want to

1229
00:42:59,160 --> 00:43:00,599
leave a few minutes for questions and

1230
00:43:00,599 --> 00:43:02,760
all that but hopefully

1231
00:43:02,760 --> 00:43:04,800
um this will help

1232
00:43:04,800 --> 00:43:06,960
containers to you not be a black box

1233
00:43:06,960 --> 00:43:09,660
because without using the right tools

1234
00:43:09,660 --> 00:43:11,520
without using and knowing the

1235
00:43:11,520 --> 00:43:13,079
fundamentals of how containers are built

1236
00:43:13,079 --> 00:43:14,940
they're black boxes traditional Security

1237
00:43:14,940 --> 00:43:16,980
Professionals so with some of these new

1238
00:43:16,980 --> 00:43:18,480
tools and the idea of the container life

1239
00:43:18,480 --> 00:43:20,640
cycle containers won't be a black box

1240
00:43:20,640 --> 00:43:22,800
anymore so I do have some time for

1241
00:43:22,800 --> 00:43:24,960
questions if anybody would like to ask

1242
00:43:24,960 --> 00:43:27,859
yes

1243
00:43:35,300 --> 00:43:37,819
yeah so the question was any particular

1244
00:43:37,819 --> 00:43:40,980
opinion or uh I guess opinion would be a

1245
00:43:40,980 --> 00:43:42,780
good word on the difference between like

1246
00:43:42,780 --> 00:43:44,280
Azure container Registries or security

1247
00:43:44,280 --> 00:43:45,900
issues with Azure container registry

1248
00:43:45,900 --> 00:43:49,200
Docker things like that the answer is no

1249
00:43:49,200 --> 00:43:51,720
um as long again we're we're assuming

1250
00:43:51,720 --> 00:43:54,180
that they are patching their own systems

1251
00:43:54,180 --> 00:43:56,400
if we can assume that obviously if

1252
00:43:56,400 --> 00:43:59,040
they're not and something is disclosed

1253
00:43:59,040 --> 00:44:02,000
then yeah that's a big deal

1254
00:44:05,780 --> 00:44:08,940
yeah okay great question so any security

1255
00:44:08,940 --> 00:44:11,220
configurations that are common in like

1256
00:44:11,220 --> 00:44:14,280
Azure Google Docker the biggest one is

1257
00:44:14,280 --> 00:44:17,220
our bot controls so if I'm using Azure

1258
00:44:17,220 --> 00:44:19,020
devops for my code repositories my build

1259
00:44:19,020 --> 00:44:20,880
pipelines and I'm using Azure container

1260
00:44:20,880 --> 00:44:23,339
registry to store my actual images

1261
00:44:23,339 --> 00:44:27,599
am I giving the right people access to

1262
00:44:27,599 --> 00:44:28,980
that Repository

1263
00:44:28,980 --> 00:44:32,460
how am I auditing those users and groups

1264
00:44:32,460 --> 00:44:33,540
is probably what you would use like

1265
00:44:33,540 --> 00:44:34,920
Azure security groups and things like

1266
00:44:34,920 --> 00:44:36,800
that that's probably your biggest

1267
00:44:36,800 --> 00:44:39,140
misconfiguration that you'll see

1268
00:44:39,140 --> 00:44:42,839
is not limiting the permissions that

1269
00:44:42,839 --> 00:44:44,700
they have to the Azure API or things

1270
00:44:44,700 --> 00:44:46,800
like that to introduce a supply chain

1271
00:44:46,800 --> 00:44:49,319
attack for example but the underlying

1272
00:44:49,319 --> 00:44:51,420
SAS application itself no I mean they're

1273
00:44:51,420 --> 00:44:53,700
all pretty much the same as long as

1274
00:44:53,700 --> 00:44:55,380
again they're patching their systems and

1275
00:44:55,380 --> 00:44:56,880
obviously some will have issues of it

1276
00:44:56,880 --> 00:44:59,460
more than others but for the most part

1277
00:44:59,460 --> 00:45:00,599
they usually do a pretty good job of

1278
00:45:00,599 --> 00:45:01,920
staying up to date because a lot of

1279
00:45:01,920 --> 00:45:04,520
people rely on

1280
00:45:11,940 --> 00:45:13,819
yeah

1281
00:45:13,819 --> 00:45:17,339
so I would like to say

1282
00:45:17,339 --> 00:45:20,099
well I have two answers one

1283
00:45:20,099 --> 00:45:22,280
the host is probably easy to miss

1284
00:45:22,280 --> 00:45:24,960
because that's not what your developers

1285
00:45:24,960 --> 00:45:25,980
are like working out of they're working

1286
00:45:25,980 --> 00:45:27,300
out like let's say they're using

1287
00:45:27,300 --> 00:45:28,920
kubernetes they're more concerned about

1288
00:45:28,920 --> 00:45:30,960
kubernetes itself and making sure that

1289
00:45:30,960 --> 00:45:34,380
it stays updated but honestly

1290
00:45:34,380 --> 00:45:35,940
I would love to say that developers are

1291
00:45:35,940 --> 00:45:37,859
being secure and constantly scanning

1292
00:45:37,859 --> 00:45:39,359
their images and doing best practices

1293
00:45:39,359 --> 00:45:40,319
here everything that we've talked about

1294
00:45:40,319 --> 00:45:44,000
but they're not so probably evenly split

1295
00:45:44,000 --> 00:45:47,160
but containers are a little bit more

1296
00:45:47,160 --> 00:45:50,099
complex they introduce a lot more

1297
00:45:50,099 --> 00:45:52,160
um

1298
00:45:52,319 --> 00:45:54,839
potential issues misconfigurations than

1299
00:45:54,839 --> 00:45:56,460
a traditional host again that's more

1300
00:45:56,460 --> 00:45:59,400
traditional security host security and

1301
00:45:59,400 --> 00:46:01,260
so I would say containers is probably

1302
00:46:01,260 --> 00:46:04,020
the bigger threat because of the amount

1303
00:46:04,020 --> 00:46:06,300
of complexity however that doesn't mean

1304
00:46:06,300 --> 00:46:08,940
the host is any less important and it's

1305
00:46:08,940 --> 00:46:11,900
super important yeah

1306
00:46:24,839 --> 00:46:26,880
yeah so most of the time the question

1307
00:46:26,880 --> 00:46:28,859
was the different types of like socket

1308
00:46:28,859 --> 00:46:30,359
or the communications of the docker

1309
00:46:30,359 --> 00:46:32,460
engine the socket is just one type

1310
00:46:32,460 --> 00:46:34,920
that's usually the most popular since it

1311
00:46:34,920 --> 00:46:37,319
is a file socket like a Unix socket for

1312
00:46:37,319 --> 00:46:40,980
example it is by far the fastest your

1313
00:46:40,980 --> 00:46:42,859
latency is going to be almost none

1314
00:46:42,859 --> 00:46:45,599
versus you can run Docker for example

1315
00:46:45,599 --> 00:46:49,140
with a TCP Daemon socket you can access

1316
00:46:49,140 --> 00:46:51,180
it over a network which is highly highly

1317
00:46:51,180 --> 00:46:54,119
highly unrecommended Docker does provide

1318
00:46:54,119 --> 00:46:56,460
best practices for that arbot controls

1319
00:46:56,460 --> 00:46:57,660
network security controls things like

1320
00:46:57,660 --> 00:47:00,420
that but that's not recommended so the

1321
00:47:00,420 --> 00:47:02,280
Unix socket is the most popular you can

1322
00:47:02,280 --> 00:47:04,859
do TCP socket as well

1323
00:47:04,859 --> 00:47:07,578
yes I

1324
00:47:17,700 --> 00:47:19,680
can you say that one more time an

1325
00:47:19,680 --> 00:47:23,060
immutable run time

1326
00:47:33,839 --> 00:47:36,259
right right

1327
00:47:38,700 --> 00:47:40,500
yeah

1328
00:47:40,500 --> 00:47:42,780
yeah so the question was about

1329
00:47:42,780 --> 00:47:44,819
um like an immutable I would say like

1330
00:47:44,819 --> 00:47:47,339
the underlying host or the the runtime

1331
00:47:47,339 --> 00:47:51,500
what does it have access to like

1332
00:47:55,140 --> 00:47:57,740
so

1333
00:47:59,880 --> 00:48:02,940
so maybe I could talk to you after just

1334
00:48:02,940 --> 00:48:05,520
better understand your question but

1335
00:48:05,520 --> 00:48:08,400
um having root only file systems uh

1336
00:48:08,400 --> 00:48:10,980
running your Daemon

1337
00:48:10,980 --> 00:48:14,460
or your engine I should say uh

1338
00:48:14,460 --> 00:48:16,800
dropping Linux capabilities making sure

1339
00:48:16,800 --> 00:48:18,240
you're running it as rootless or um

1340
00:48:18,240 --> 00:48:20,040
without roots without elevated

1341
00:48:20,040 --> 00:48:22,140
permissions but maybe I could talk to

1342
00:48:22,140 --> 00:48:23,040
you after get a little bit better

1343
00:48:23,040 --> 00:48:24,720
understanding what you're talking about

1344
00:48:24,720 --> 00:48:28,160
yeah yeah

1345
00:48:30,000 --> 00:48:32,819
I'm sorry say that one time

1346
00:48:32,819 --> 00:48:34,319
I can make them available if you want to

1347
00:48:34,319 --> 00:48:35,579
come up to you afterwards I'll get them

1348
00:48:35,579 --> 00:48:37,560
available and then sorry I can make them

1349
00:48:37,560 --> 00:48:38,700
available and then if you want to come

1350
00:48:38,700 --> 00:48:40,680
up after uh I could talk to you but

1351
00:48:40,680 --> 00:48:42,359
they'll also be on the YouTube recording

1352
00:48:42,359 --> 00:48:44,220
I believe uh this everything's being

1353
00:48:44,220 --> 00:48:47,480
recorded so you can find it there too

1354
00:48:48,300 --> 00:48:49,740
I can't see any videos

1355
00:48:49,740 --> 00:48:51,979
yeah

1356
00:48:53,220 --> 00:48:55,440
lxc just for

1357
00:48:55,440 --> 00:48:56,280
um

1358
00:48:56,280 --> 00:48:58,319
where I'm trying to get as close as I

1359
00:48:58,319 --> 00:49:00,420
can to a virtual machine I don't prefer

1360
00:49:00,420 --> 00:49:02,760
it for all workloads but

1361
00:49:02,760 --> 00:49:05,460
like at home for example because I have

1362
00:49:05,460 --> 00:49:07,260
cheap hardware and I don't want to

1363
00:49:07,260 --> 00:49:10,859
virtualize everything in a VM I use lxc

1364
00:49:10,859 --> 00:49:14,400
because it's lightweight enough but it

1365
00:49:14,400 --> 00:49:18,060
still is most like a VM in that I don't

1366
00:49:18,060 --> 00:49:19,079
have to have constantly running

1367
00:49:19,079 --> 00:49:21,180
processes like with Docker when the

1368
00:49:21,180 --> 00:49:22,859
process quits the container quits unless

1369
00:49:22,859 --> 00:49:25,020
you automatically restart that and for a

1370
00:49:25,020 --> 00:49:25,859
lot of the stuff that I'm running I

1371
00:49:25,859 --> 00:49:27,480
don't want that so that's why I prefer

1372
00:49:27,480 --> 00:49:30,119
lxc for it when I want to get as close

1373
00:49:30,119 --> 00:49:32,160
as I can to a VM without actually

1374
00:49:32,160 --> 00:49:34,140
having all that overhead

1375
00:49:34,140 --> 00:49:36,618
yeah

1376
00:49:37,560 --> 00:49:40,040
anymore

1377
00:49:52,020 --> 00:49:55,400
say that last part one more time

1378
00:50:08,280 --> 00:50:10,680
yeah I may need to talk to you after

1379
00:50:10,680 --> 00:50:12,240
that might be a little bit longer of an

1380
00:50:12,240 --> 00:50:15,660
answer and also we are out of time

1381
00:50:15,660 --> 00:50:17,760
um but yes I I want to talk to you about

1382
00:50:17,760 --> 00:50:19,440
that

1383
00:50:19,440 --> 00:50:21,720
any quick questions no

1384
00:50:21,720 --> 00:50:22,980
all right well I'll be up here if you

1385
00:50:22,980 --> 00:50:24,060
have any questions I appreciate it guys

1386
00:50:24,060 --> 00:50:24,960
thank you

1387
00:50:24,960 --> 00:50:31,690
[Applause]

