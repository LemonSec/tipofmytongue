1
00:00:00,120 --> 00:00:03,120
foreign

2
00:00:06,020 --> 00:00:20,939
[Music]

3
00:00:20,939 --> 00:00:22,980
so thank you all for coming for those

4
00:00:22,980 --> 00:00:24,840
I've met before my name is Andrew Case

5
00:00:24,840 --> 00:00:27,300
and I spend a lot of time doing memory

6
00:00:27,300 --> 00:00:29,820
forensics and malware analysis

7
00:00:29,820 --> 00:00:31,740
today I'm going to be talking about one

8
00:00:31,740 --> 00:00:33,480
of the latest research efforts I was

9
00:00:33,480 --> 00:00:35,700
involved in which is we did an

10
00:00:35,700 --> 00:00:38,100
exhaustive study of all of the windows

11
00:00:38,100 --> 00:00:39,780
root kits that were found in the wild in

12
00:00:39,780 --> 00:00:41,840
the last couple years so ones that

13
00:00:41,840 --> 00:00:45,239
affect Windows 10 and all of the

14
00:00:45,239 --> 00:00:46,860
security protections are enabled they

15
00:00:46,860 --> 00:00:49,920
can load also because we deal with this

16
00:00:49,920 --> 00:00:51,480
type these types of threats a lot

17
00:00:51,480 --> 00:00:53,640
obviously root kits in general are a

18
00:00:53,640 --> 00:00:55,500
grave threat to privacy and security

19
00:00:55,500 --> 00:00:57,780
once a root gets on a system and active

20
00:00:57,780 --> 00:00:59,280
they can do whatever they want to the

21
00:00:59,280 --> 00:01:01,079
machine they have full control over all

22
00:01:01,079 --> 00:01:03,359
the operations they can blind any

23
00:01:03,359 --> 00:01:05,939
security products looking for any

24
00:01:05,939 --> 00:01:09,360
activity on the system and we noticed in

25
00:01:09,360 --> 00:01:11,040
our investigations I would say over the

26
00:01:11,040 --> 00:01:13,560
last two three years and this was shown

27
00:01:13,560 --> 00:01:15,119
by other security vendors as well

28
00:01:15,119 --> 00:01:16,560
because we read all the reports that

29
00:01:16,560 --> 00:01:18,420
come out that there really was a return

30
00:01:18,420 --> 00:01:20,880
to root kits appearing on Windows when

31
00:01:20,880 --> 00:01:23,280
Windows 10 first came out Microsoft had

32
00:01:23,280 --> 00:01:25,259
driver signing enforcement if you're not

33
00:01:25,259 --> 00:01:26,280
familiar with that we're gonna have a

34
00:01:26,280 --> 00:01:28,020
couple slides that explains it in great

35
00:01:28,020 --> 00:01:30,659
detail but the idea is my Microsoft came

36
00:01:30,659 --> 00:01:32,280
up with this driver signing enforcement

37
00:01:32,280 --> 00:01:34,740
idea and it made it where you really had

38
00:01:34,740 --> 00:01:36,540
to be a legitimate software company work

39
00:01:36,540 --> 00:01:38,520
with Microsoft to get your driver to

40
00:01:38,520 --> 00:01:40,320
load into the kernel

41
00:01:40,320 --> 00:01:42,119
obviously something fell apart with that

42
00:01:42,119 --> 00:01:43,560
protection it fell behind the times

43
00:01:43,560 --> 00:01:45,420
because we started seeing root kits on

44
00:01:45,420 --> 00:01:47,159
Windows 10 which is not something we

45
00:01:47,159 --> 00:01:49,380
were used to so again we wanted to Deep

46
00:01:49,380 --> 00:01:51,659
dive these Roux kits figure out how are

47
00:01:51,659 --> 00:01:52,799
they actually loading on the machine

48
00:01:52,799 --> 00:01:54,840
what were they able to do on Windows 10

49
00:01:54,840 --> 00:01:56,640
that they couldn't do on Windows 7 and

50
00:01:56,640 --> 00:01:58,799
before and obviously how could we detect

51
00:01:58,799 --> 00:02:00,600
them

52
00:02:00,600 --> 00:02:02,880
before we start any research project we

53
00:02:02,880 --> 00:02:04,560
always come up with the goals list so we

54
00:02:04,560 --> 00:02:06,420
don't get lost in Fall Down rabbit holes

55
00:02:06,420 --> 00:02:07,860
I'm sure no one here has done that

56
00:02:07,860 --> 00:02:10,679
before so what we wanted to do was come

57
00:02:10,679 --> 00:02:12,480
up with triage techniques to figure out

58
00:02:12,480 --> 00:02:14,580
does the machine have a root kit on it

59
00:02:14,580 --> 00:02:16,020
and then if we have a bunch of machines

60
00:02:16,020 --> 00:02:17,819
that we're supposed to protect or sweep

61
00:02:17,819 --> 00:02:19,739
across how do we figure out quickly if a

62
00:02:19,739 --> 00:02:21,239
bunch of machines have signs of a root

63
00:02:21,239 --> 00:02:23,459
kit so we wanted to make these effective

64
00:02:23,459 --> 00:02:25,680
we wanted our techniques to not miss

65
00:02:25,680 --> 00:02:27,540
root kits that were there but we also

66
00:02:27,540 --> 00:02:29,160
didn't want a billion false positives

67
00:02:29,160 --> 00:02:30,660
saying that every machine and

68
00:02:30,660 --> 00:02:32,160
environment has a root kit when maybe

69
00:02:32,160 --> 00:02:34,319
one or zero of them do is not very

70
00:02:34,319 --> 00:02:36,420
helpful and then we also wanted what

71
00:02:36,420 --> 00:02:38,040
what we researched to be scalable

72
00:02:38,040 --> 00:02:39,660
because it's very rare that we deal with

73
00:02:39,660 --> 00:02:41,040
like one or ten machines in

74
00:02:41,040 --> 00:02:42,540
investigations it's usually a lot of

75
00:02:42,540 --> 00:02:44,760
them that we have to get through quickly

76
00:02:44,760 --> 00:02:47,220
so if you've seen my talks before or

77
00:02:47,220 --> 00:02:48,959
research out of our group you know the

78
00:02:48,959 --> 00:02:51,180
two places we like to look are memory so

79
00:02:51,180 --> 00:02:52,980
we'll see some memory forensics this is

80
00:02:52,980 --> 00:02:55,319
where malware can live undetected where

81
00:02:55,319 --> 00:02:57,300
it also has full control of the machine

82
00:02:57,300 --> 00:02:59,940
and when it comes to historical records

83
00:02:59,940 --> 00:03:02,340
and being able to sweep across an

84
00:03:02,340 --> 00:03:04,500
Enterprise very quickly event logs

85
00:03:04,500 --> 00:03:06,060
really can't be beaten so we'll look at

86
00:03:06,060 --> 00:03:09,120
that we'll look at that as well

87
00:03:09,120 --> 00:03:10,500
if you're not familiar with memory

88
00:03:10,500 --> 00:03:12,239
forensics this is where you get a

89
00:03:12,239 --> 00:03:14,819
capture of ram from a system so if it's

90
00:03:14,819 --> 00:03:16,920
a laptop with 16 gigs of RAM you're

91
00:03:16,920 --> 00:03:18,599
going to walk up to that machine run

92
00:03:18,599 --> 00:03:20,400
your software maybe you push the

93
00:03:20,400 --> 00:03:21,900
software across the network and then you

94
00:03:21,900 --> 00:03:23,940
walk away with roughly a 16 gig file

95
00:03:23,940 --> 00:03:25,860
obviously in an Enterprise environment

96
00:03:25,860 --> 00:03:27,060
you want to do it a little better than

97
00:03:27,060 --> 00:03:29,159
that but the idea is you're getting back

98
00:03:29,159 --> 00:03:31,800
a static copy of what was in Ram at one

99
00:03:31,800 --> 00:03:33,780
point in time the reason memory

100
00:03:33,780 --> 00:03:35,519
forensics is so powerful and the reason

101
00:03:35,519 --> 00:03:38,340
why it's used so much is that all of the

102
00:03:38,340 --> 00:03:39,959
malware that was present on the machine

103
00:03:39,959 --> 00:03:42,360
is going to be stuck in memory along

104
00:03:42,360 --> 00:03:44,879
with this exact configuration so when we

105
00:03:44,879 --> 00:03:45,720
especially when we're talking about

106
00:03:45,720 --> 00:03:47,519
kernel root kits those things can be

107
00:03:47,519 --> 00:03:49,019
really nasty even if you're great at

108
00:03:49,019 --> 00:03:51,239
reversing even if you have years and

109
00:03:51,239 --> 00:03:53,040
years of experience with it it's really

110
00:03:53,040 --> 00:03:54,840
annoying to deal with kernel root kits

111
00:03:54,840 --> 00:03:56,040
if they're doing anti-forensics

112
00:03:56,040 --> 00:03:57,900
techniques and so on whereas when you

113
00:03:57,900 --> 00:04:00,120
have a memory sample the rootkit has

114
00:04:00,120 --> 00:04:01,920
already put itself into memory it's

115
00:04:01,920 --> 00:04:03,659
unpacked all its components decrypt

116
00:04:03,659 --> 00:04:05,159
everything it makes your life a lot

117
00:04:05,159 --> 00:04:07,260
easier and then the other reason why

118
00:04:07,260 --> 00:04:09,420
memory forensics is so important is that

119
00:04:09,420 --> 00:04:11,459
malware of this type is truly hidden

120
00:04:11,459 --> 00:04:13,379
from the live machine so whether it's

121
00:04:13,379 --> 00:04:14,939
your favorite tool something out of like

122
00:04:14,939 --> 00:04:17,100
CIS internals other software that you've

123
00:04:17,100 --> 00:04:18,959
written if you're reliant on the live

124
00:04:18,959 --> 00:04:21,298
apis or on the live system to tell you

125
00:04:21,298 --> 00:04:23,280
what's going on that's precisely what

126
00:04:23,280 --> 00:04:24,720
the malware is going to hide so you're

127
00:04:24,720 --> 00:04:27,240
never going to see it anyway and this

128
00:04:27,240 --> 00:04:28,560
was just an interesting report from

129
00:04:28,560 --> 00:04:30,540
Microsoft that I clipped into the slides

130
00:04:30,540 --> 00:04:32,460
where they talked about this core lump

131
00:04:32,460 --> 00:04:34,199
software this was actually an awesome

132
00:04:34,199 --> 00:04:36,240
report they basically burned a company

133
00:04:36,240 --> 00:04:38,520
in Australia that was like four higher

134
00:04:38,520 --> 00:04:40,080
kind of like cyber mercenary groups if

135
00:04:40,080 --> 00:04:41,639
you want to call them that and Microsoft

136
00:04:41,639 --> 00:04:43,620
just burned their entire toolkit down to

137
00:04:43,620 --> 00:04:45,840
the ground and this was from it so

138
00:04:45,840 --> 00:04:47,820
Microsoft called the malware or one of

139
00:04:47,820 --> 00:04:49,560
the kind of the main malware component

140
00:04:49,560 --> 00:04:51,660
core lump and it talks about how it

141
00:04:51,660 --> 00:04:53,460
lives only in memory and this is just

142
00:04:53,460 --> 00:04:55,259
one of many examples of if you're not

143
00:04:55,259 --> 00:04:56,759
doing memory forensics you know you're

144
00:04:56,759 --> 00:04:58,080
going to miss the malware on that

145
00:04:58,080 --> 00:05:01,080
machine so we'll see a lot of that

146
00:05:01,080 --> 00:05:02,580
the other thing that's incredibly

147
00:05:02,580 --> 00:05:04,979
powerful are the event logs if you're

148
00:05:04,979 --> 00:05:06,780
not familiar with event logs these will

149
00:05:06,780 --> 00:05:09,600
these will record a wide wide range of

150
00:05:09,600 --> 00:05:11,820
activity that happens on the system this

151
00:05:11,820 --> 00:05:13,680
occurs even by default but then if you

152
00:05:13,680 --> 00:05:15,419
configure them a little better you get

153
00:05:15,419 --> 00:05:17,699
even more information and the other

154
00:05:17,699 --> 00:05:19,320
great thing about event logs is their

155
00:05:19,320 --> 00:05:21,419
time stamp down to the second so if you

156
00:05:21,419 --> 00:05:22,979
see that something happened on the

157
00:05:22,979 --> 00:05:24,720
machine that you care about now you know

158
00:05:24,720 --> 00:05:27,000
the exact second where that happened and

159
00:05:27,000 --> 00:05:28,919
in many organizations almost every

160
00:05:28,919 --> 00:05:31,139
organization that we work with now the

161
00:05:31,139 --> 00:05:33,180
event logs are centralized in some sort

162
00:05:33,180 --> 00:05:35,639
of way so you can say from one system

163
00:05:35,639 --> 00:05:37,440
write your query you want to know do

164
00:05:37,440 --> 00:05:39,539
certain event IDs exist do certain event

165
00:05:39,539 --> 00:05:41,940
log sources have records that you want

166
00:05:41,940 --> 00:05:43,500
to look at you'll see a few examples of

167
00:05:43,500 --> 00:05:45,479
that in the slides and that immediately

168
00:05:45,479 --> 00:05:47,220
tells you if there's somewhere to dig

169
00:05:47,220 --> 00:05:49,020
into and so it could be an Enterprise

170
00:05:49,020 --> 00:05:50,940
with thousands and thousands of machines

171
00:05:50,940 --> 00:05:53,100
and like we'll discuss in the slides

172
00:05:53,100 --> 00:05:54,840
there's some event IDs that are never

173
00:05:54,840 --> 00:05:56,400
good and if they're on any of the

174
00:05:56,400 --> 00:05:57,720
machines you immediately need to get

175
00:05:57,720 --> 00:05:59,940
memory get your files off of there and

176
00:05:59,940 --> 00:06:01,740
start a real incident response process

177
00:06:01,740 --> 00:06:04,259
so between memory forensics and event

178
00:06:04,259 --> 00:06:06,320
logs if you're doing malware analysis IR

179
00:06:06,320 --> 00:06:10,940
these are by far the best places to look

180
00:06:12,180 --> 00:06:14,580
so now we'll discuss how the rookettes

181
00:06:14,580 --> 00:06:16,080
actually load on a system the

182
00:06:16,080 --> 00:06:18,120
recommended way if you've done malware

183
00:06:18,120 --> 00:06:20,460
analysis a long time back in the XP days

184
00:06:20,460 --> 00:06:22,199
I know there's some like hacky ways that

185
00:06:22,199 --> 00:06:24,360
drivers could load Microsoft has closed

186
00:06:24,360 --> 00:06:25,919
those out so I really just want to focus

187
00:06:25,919 --> 00:06:27,419
on the Windows 10 ones the ones that

188
00:06:27,419 --> 00:06:29,039
you're going to see most often in the

189
00:06:29,039 --> 00:06:31,199
wild so the way you load a driver the

190
00:06:31,199 --> 00:06:32,699
recommended way is you're going to

191
00:06:32,699 --> 00:06:35,340
create a service service services are

192
00:06:35,340 --> 00:06:37,860
very powerful components of the system

193
00:06:37,860 --> 00:06:41,039
you can have Services run as a dll or a

194
00:06:41,039 --> 00:06:42,900
process and it's also the way to load

195
00:06:42,900 --> 00:06:45,300
code into the kernel when you create

196
00:06:45,300 --> 00:06:47,280
that service you tell Windows where the

197
00:06:47,280 --> 00:06:49,199
path is to your driver file so that

198
00:06:49,199 --> 00:06:51,720
executable on disk for your driver and

199
00:06:51,720 --> 00:06:53,280
then whenever you tell Windows you

200
00:06:53,280 --> 00:06:55,380
wanted to load upon system boot after a

201
00:06:55,380 --> 00:06:56,940
certain time frame whatever that trigger

202
00:06:56,940 --> 00:06:59,160
is that's going to get that loaded into

203
00:06:59,160 --> 00:07:01,500
the kernel so for root kits that want to

204
00:07:01,500 --> 00:07:03,000
load they normally want to load at

205
00:07:03,000 --> 00:07:04,440
startup they want to maintain

206
00:07:04,440 --> 00:07:06,780
persistence on the machine they're going

207
00:07:06,780 --> 00:07:09,180
to create a service now there are event

208
00:07:09,180 --> 00:07:11,100
logs for this but it's really noisy

209
00:07:11,100 --> 00:07:12,780
because every third party application

210
00:07:12,780 --> 00:07:14,220
lots of random drivers are going to

211
00:07:14,220 --> 00:07:16,979
create services and so on so I'm aware

212
00:07:16,979 --> 00:07:19,080
that Services create event log records

213
00:07:19,080 --> 00:07:20,099
but we're not going to talk about those

214
00:07:20,099 --> 00:07:21,840
because in a real Enterprise you can't

215
00:07:21,840 --> 00:07:23,580
triage with them

216
00:07:23,580 --> 00:07:25,259
so you might be wondering though I kind

217
00:07:25,259 --> 00:07:27,599
of mentioned it before sure root kits

218
00:07:27,599 --> 00:07:29,160
can tell the operating system that they

219
00:07:29,160 --> 00:07:31,020
want to load their driver but as I

220
00:07:31,020 --> 00:07:32,639
mentioned Microsoft made a bunch of

221
00:07:32,639 --> 00:07:35,520
changes in Windows 10 so that unsigned

222
00:07:35,520 --> 00:07:37,919
drivers so unknown non-secure drivers

223
00:07:37,919 --> 00:07:40,020
aren't supposed to be able to load this

224
00:07:40,020 --> 00:07:41,819
talk I'm giving today should not exist

225
00:07:41,819 --> 00:07:44,460
if this worked obviously it didn't so

226
00:07:44,460 --> 00:07:45,840
I'm here talking about the root kits

227
00:07:45,840 --> 00:07:48,300
that are in the kernel so the idea here

228
00:07:48,300 --> 00:07:51,479
is if you want to get a properly signed

229
00:07:51,479 --> 00:07:53,340
driver on Windows 10 so we're talking

230
00:07:53,340 --> 00:07:54,960
about legitimate vendors here not

231
00:07:54,960 --> 00:07:57,360
rootkit authors say you're an Nvidia or

232
00:07:57,360 --> 00:07:59,160
anyone else that has a driver for

233
00:07:59,160 --> 00:08:00,479
something that you ship to your

234
00:08:00,479 --> 00:08:03,180
customers you have to cross sign that

235
00:08:03,180 --> 00:08:06,000
driver with Microsoft so that means you

236
00:08:06,000 --> 00:08:08,280
have to upload a copy of that driver to

237
00:08:08,280 --> 00:08:10,020
Microsoft you imagine rootkit authors

238
00:08:10,020 --> 00:08:11,280
don't want to do that it's like sending

239
00:08:11,280 --> 00:08:12,900
it to virustotal kind of defeats the

240
00:08:12,900 --> 00:08:14,220
purpose

241
00:08:14,220 --> 00:08:15,900
um and then at that point Microsoft

242
00:08:15,900 --> 00:08:18,180
cross signs your driver so this is

243
00:08:18,180 --> 00:08:19,259
really bad for you right because

244
00:08:19,259 --> 00:08:21,599
Microsoft has a copy of the file and

245
00:08:21,599 --> 00:08:23,220
then to get one of the certificates that

246
00:08:23,220 --> 00:08:25,500
you need to do this cross signing you

247
00:08:25,500 --> 00:08:26,879
don't just go to like GoDaddy or

248
00:08:26,879 --> 00:08:28,199
something like the old days and get one

249
00:08:28,199 --> 00:08:29,759
there's verification of the people

250
00:08:29,759 --> 00:08:31,620
involved the company involved and so on

251
00:08:31,620 --> 00:08:33,179
you can't just get like an anonymous

252
00:08:33,179 --> 00:08:35,159
email address and five minutes later you

253
00:08:35,159 --> 00:08:37,640
have your certificate

254
00:08:37,640 --> 00:08:40,740
the motivation for having this cross

255
00:08:40,740 --> 00:08:42,419
signing and this really difficult or

256
00:08:42,419 --> 00:08:44,279
kind of uh I'm going to call it

257
00:08:44,279 --> 00:08:46,140
difficult way of getting your driver

258
00:08:46,140 --> 00:08:48,420
cross-signed is because we all know of

259
00:08:48,420 --> 00:08:50,640
the famous stories of when this didn't

260
00:08:50,640 --> 00:08:52,019
happen where you could take any code

261
00:08:52,019 --> 00:08:53,700
signing certificate from any company

262
00:08:53,700 --> 00:08:55,980
sign your malware with it and load it

263
00:08:55,980 --> 00:08:58,019
the very famous example of it was

264
00:08:58,019 --> 00:08:59,399
stuxnet there's been a bunch of other

265
00:08:59,399 --> 00:09:01,560
ones where companies get hacked the

266
00:09:01,560 --> 00:09:03,420
attackers purposely Target their code

267
00:09:03,420 --> 00:09:05,399
signing certificates can you imagine if

268
00:09:05,399 --> 00:09:07,500
every laptop desktop in your environment

269
00:09:07,500 --> 00:09:09,899
had an Nvidia card and then you had to

270
00:09:09,899 --> 00:09:11,640
disable all of their certificates and

271
00:09:11,640 --> 00:09:13,080
now no one has a screen they can look at

272
00:09:13,080 --> 00:09:14,760
anymore like it's just not feasible so

273
00:09:14,760 --> 00:09:17,399
this is a very uh I mean honestly it's a

274
00:09:17,399 --> 00:09:18,839
really effective way by the attackers

275
00:09:18,839 --> 00:09:20,700
steal the certificates now they look

276
00:09:20,700 --> 00:09:23,040
like legitimate software a lot of AVS

277
00:09:23,040 --> 00:09:25,019
and other EDR type software are going to

278
00:09:25,019 --> 00:09:27,180
skip scanning your file or skip scanning

279
00:09:27,180 --> 00:09:29,399
it is hard and so this works really well

280
00:09:29,399 --> 00:09:31,080
which is why we now have the cross

281
00:09:31,080 --> 00:09:32,279
signing

282
00:09:32,279 --> 00:09:33,959
and as I mentioned before there's a lot

283
00:09:33,959 --> 00:09:35,580
of steps to do this if you want a lot of

284
00:09:35,580 --> 00:09:37,019
pain you can go back and read these

285
00:09:37,019 --> 00:09:39,000
slides but it's not a five minute thing

286
00:09:39,000 --> 00:09:41,040
to get it cross-signed so at this point

287
00:09:41,040 --> 00:09:42,240
you're thinking okay there really

288
00:09:42,240 --> 00:09:44,580
shouldn't be rootkits on Windows 10 they

289
00:09:44,580 --> 00:09:45,720
shouldn't be able to get in the kernel

290
00:09:45,720 --> 00:09:47,220
Unless somehow they make a fake company

291
00:09:47,220 --> 00:09:48,899
with fake identities and all this

292
00:09:48,899 --> 00:09:51,600
craziness well what malware authors did

293
00:09:51,600 --> 00:09:53,459
is they just said I'm just going to

294
00:09:53,459 --> 00:09:55,200
break the driver signing enforcement

295
00:09:55,200 --> 00:09:57,060
protection now it's like we're back on

296
00:09:57,060 --> 00:09:58,680
Windows XP days and I'm just going to

297
00:09:58,680 --> 00:10:00,779
load whatever I want which is obviously

298
00:10:00,779 --> 00:10:03,420
not good from a security perspective

299
00:10:03,420 --> 00:10:05,160
so this is known as bring your own

300
00:10:05,160 --> 00:10:07,019
vulnerable driver I'm going to spend a

301
00:10:07,019 --> 00:10:09,120
couple slides on it there is a talk at

302
00:10:09,120 --> 00:10:10,920
two in this room in this track right

303
00:10:10,920 --> 00:10:12,839
after lunch where the whole talk is on

304
00:10:12,839 --> 00:10:14,040
vulnerable drivers I didn't know that

305
00:10:14,040 --> 00:10:15,240
obviously a few months ago when I

306
00:10:15,240 --> 00:10:16,740
submitted my talk

307
00:10:16,740 --> 00:10:18,240
um but if you've never heard of this

308
00:10:18,240 --> 00:10:19,440
before if you want a lot of technical

309
00:10:19,440 --> 00:10:21,540
details I would recommend coming back to

310
00:10:21,540 --> 00:10:24,060
this room after lunch for that talk but

311
00:10:24,060 --> 00:10:25,380
the idea with bringing on vulnerable

312
00:10:25,380 --> 00:10:27,540
drivers is you're going to take a

313
00:10:27,540 --> 00:10:30,959
vulnerable driver that is signed so this

314
00:10:30,959 --> 00:10:33,360
is from a legitimate company you find a

315
00:10:33,360 --> 00:10:35,100
vulnerability in their driver that

316
00:10:35,100 --> 00:10:37,440
allows you to manipulate code in the

317
00:10:37,440 --> 00:10:40,740
kernel and this has been used by dozens

318
00:10:40,740 --> 00:10:42,959
of Apt groups in all sorts of attacks

319
00:10:42,959 --> 00:10:45,300
all the root kits that we see load have

320
00:10:45,300 --> 00:10:47,339
to do something with this if they want

321
00:10:47,339 --> 00:10:48,899
their driver to load because again their

322
00:10:48,899 --> 00:10:51,120
unsigned root Kit's not going to load if

323
00:10:51,120 --> 00:10:53,579
the DSC is still on so they're going to

324
00:10:53,579 --> 00:10:55,380
use a vulnerable driver use that to

325
00:10:55,380 --> 00:10:57,180
manipulate the kernel and then from

326
00:10:57,180 --> 00:11:00,000
there they'll be able to load their code

327
00:11:00,000 --> 00:11:03,240
this is one of the first really good uh

328
00:11:03,240 --> 00:11:04,920
public documentation of this like

329
00:11:04,920 --> 00:11:06,959
exhaustive documentation of this this

330
00:11:06,959 --> 00:11:09,360
was from rapid7 I believe a year ago

331
00:11:09,360 --> 00:11:11,579
there was actually a blog post by Splunk

332
00:11:11,579 --> 00:11:13,140
last week where they went back through

333
00:11:13,140 --> 00:11:14,700
it all and all the drivers again because

334
00:11:14,700 --> 00:11:16,440
this just keeps getting used over and

335
00:11:16,440 --> 00:11:18,660
over and the idea is you might recognize

336
00:11:18,660 --> 00:11:20,579
some of these driver names so like vbox

337
00:11:20,579 --> 00:11:22,620
is virtualbox

338
00:11:22,620 --> 00:11:25,500
um there are some for like proc mons one

339
00:11:25,500 --> 00:11:27,779
of them part of CIS internals so there's

340
00:11:27,779 --> 00:11:29,279
a number of drivers these are cross

341
00:11:29,279 --> 00:11:31,740
signed by Microsoft and again the ideas

342
00:11:31,740 --> 00:11:33,899
are vulnerable in some way maybe they

343
00:11:33,899 --> 00:11:36,240
have bad API designs so that any process

344
00:11:36,240 --> 00:11:38,399
can send them commands those commands

345
00:11:38,399 --> 00:11:39,959
will let you write to physical memory

346
00:11:39,959 --> 00:11:42,060
read physical memory overwrite the

347
00:11:42,060 --> 00:11:44,160
kernel and so on so you have literally

348
00:11:44,160 --> 00:11:46,560
dozens of drivers that you can use to

349
00:11:46,560 --> 00:11:48,360
still manipulate the kernel and then get

350
00:11:48,360 --> 00:11:50,100
it to where you can load in your

351
00:11:50,100 --> 00:11:52,620
malicious root kit

352
00:11:52,620 --> 00:11:54,480
and the problem with this you might just

353
00:11:54,480 --> 00:11:56,220
think okay there's vulnerabilities in

354
00:11:56,220 --> 00:11:57,959
software every day there was just a talk

355
00:11:57,959 --> 00:12:00,839
right before this on that and these are

356
00:12:00,839 --> 00:12:02,160
not all ones that can be fixed right

357
00:12:02,160 --> 00:12:03,720
away they're not all buffer overflows

358
00:12:03,720 --> 00:12:04,920
they're not all things like that where

359
00:12:04,920 --> 00:12:06,720
you just update the code recompile it

360
00:12:06,720 --> 00:12:08,880
and now they're not exploitable like I

361
00:12:08,880 --> 00:12:10,740
said a lot of these are by Design so you

362
00:12:10,740 --> 00:12:12,300
would have to go to the company and say

363
00:12:12,300 --> 00:12:14,220
hey your driver is being abused by root

364
00:12:14,220 --> 00:12:16,500
kits redesign your software stack from

365
00:12:16,500 --> 00:12:18,480
scratch in a week so we can stop this

366
00:12:18,480 --> 00:12:20,339
and then ship it back out that's just

367
00:12:20,339 --> 00:12:21,839
not going to happen all those companies

368
00:12:21,839 --> 00:12:23,459
aren't going to fix it and the other

369
00:12:23,459 --> 00:12:25,440
problem is is there's Legacy Hardware

370
00:12:25,440 --> 00:12:27,300
right like there's a certain I'm not

371
00:12:27,300 --> 00:12:28,860
going to call them out but there's a

372
00:12:28,860 --> 00:12:30,420
certain Hardware vendor that sells

373
00:12:30,420 --> 00:12:32,100
network cards to a lot of Enterprises

374
00:12:32,100 --> 00:12:34,320
and their drivers are notorious for

375
00:12:34,320 --> 00:12:36,240
being vulnerable to this attack but it's

376
00:12:36,240 --> 00:12:37,980
the same thing if Microsoft pushed out

377
00:12:37,980 --> 00:12:40,380
and tried to disable all those drivers

378
00:12:40,380 --> 00:12:42,420
at once now those machines can't get on

379
00:12:42,420 --> 00:12:43,980
the network they can't send packets it's

380
00:12:43,980 --> 00:12:45,720
just it's not going to work so there

381
00:12:45,720 --> 00:12:47,399
needs to be something done about this

382
00:12:47,399 --> 00:12:49,320
maybe some fall off period where those

383
00:12:49,320 --> 00:12:51,720
drivers could be disabled but until that

384
00:12:51,720 --> 00:12:53,880
happens um root kits are going to keep

385
00:12:53,880 --> 00:12:56,519
loading through this way

386
00:12:56,519 --> 00:12:58,260
so once you've found a vulnerable driver

387
00:12:58,260 --> 00:13:00,720
what can you do with it as I said you

388
00:13:00,720 --> 00:13:03,000
can manipulate the kernel at will you

389
00:13:03,000 --> 00:13:05,519
have you're going to eventually get read

390
00:13:05,519 --> 00:13:07,920
write access to the kernel but it's very

391
00:13:07,920 --> 00:13:10,680
hard to do really intense detailed

392
00:13:10,680 --> 00:13:12,420
operations through that primitive you're

393
00:13:12,420 --> 00:13:14,700
basically trying to write a root a root

394
00:13:14,700 --> 00:13:17,639
kit as Shell Code which that's very hard

395
00:13:17,639 --> 00:13:19,860
that sounds absolutely terrible so

396
00:13:19,860 --> 00:13:21,420
instead what root kits are going to do

397
00:13:21,420 --> 00:13:24,000
is they will simply the Second Step here

398
00:13:24,000 --> 00:13:25,860
they're going to disable driver signing

399
00:13:25,860 --> 00:13:27,600
enforcement now they can load whatever

400
00:13:27,600 --> 00:13:29,459
root kit they want and they can just

401
00:13:29,459 --> 00:13:30,899
create a service or they can load it

402
00:13:30,899 --> 00:13:32,820
from a pre-existing service the rootkit

403
00:13:32,820 --> 00:13:35,220
is active and all of these defenses fell

404
00:13:35,220 --> 00:13:38,100
apart so again if driver signing

405
00:13:38,100 --> 00:13:39,959
enforcement was a little more robust if

406
00:13:39,959 --> 00:13:42,060
these issues didn't happen this talk

407
00:13:42,060 --> 00:13:43,380
wouldn't exist we still wouldn't have

408
00:13:43,380 --> 00:13:46,200
root kits on Windows 10 but we do and so

409
00:13:46,200 --> 00:13:48,660
until everything is fixed that I

410
00:13:48,660 --> 00:13:50,459
mentioned on the last couple slides this

411
00:13:50,459 --> 00:13:52,200
is going to keep being a problem we see

412
00:13:52,200 --> 00:13:54,000
it all the time and like I said there's

413
00:13:54,000 --> 00:13:55,560
vendors at least every couple weeks

414
00:13:55,560 --> 00:13:57,240
there's another blog post from a big

415
00:13:57,240 --> 00:13:59,399
vendor talking about it

416
00:13:59,399 --> 00:14:01,200
so how do root kits actually disable

417
00:14:01,200 --> 00:14:03,959
driver signing enforcement there was an

418
00:14:03,959 --> 00:14:06,440
old way for it so starting in Windows

419
00:14:06,440 --> 00:14:09,480
8.1 plus so I know when you said anyway

420
00:14:09,480 --> 00:14:12,120
so we call it Windows 10. the idea was

421
00:14:12,120 --> 00:14:14,100
inside of the kernel there was a global

422
00:14:14,100 --> 00:14:16,680
variable called G underscore CI options

423
00:14:16,680 --> 00:14:18,540
and it was just a basic integer or

424
00:14:18,540 --> 00:14:21,120
number if it's zero it's disabled and if

425
00:14:21,120 --> 00:14:23,339
it's one it's enabled very simple right

426
00:14:23,339 --> 00:14:25,500
so with that basic primitive you got

427
00:14:25,500 --> 00:14:27,660
from having a vulnerable driver you just

428
00:14:27,660 --> 00:14:29,339
had to locate that variable in memory

429
00:14:29,339 --> 00:14:31,500
switch it from one to zero and then you

430
00:14:31,500 --> 00:14:33,060
could do whatever you want obviously

431
00:14:33,060 --> 00:14:34,620
that's kind of ridiculous for all of the

432
00:14:34,620 --> 00:14:36,120
infrastructure where you have to upload

433
00:14:36,120 --> 00:14:38,880
drivers and such so Microsoft wanted to

434
00:14:38,880 --> 00:14:40,320
fix that we'll get to that in a couple

435
00:14:40,320 --> 00:14:42,600
slides but my first thought was well we

436
00:14:42,600 --> 00:14:43,800
should be able to detect that with

437
00:14:43,800 --> 00:14:45,980
memory forensics right we can find that

438
00:14:45,980 --> 00:14:48,839
variable ourselves we can check it and

439
00:14:48,839 --> 00:14:50,940
if it's on a Windows 10 machine and that

440
00:14:50,940 --> 00:14:52,800
variable set to zero hey there's a

441
00:14:52,800 --> 00:14:54,480
rootkit that switched it off so we need

442
00:14:54,480 --> 00:14:56,519
to look into this unfortunately that

443
00:14:56,519 --> 00:14:57,779
didn't work I probably should have

444
00:14:57,779 --> 00:14:59,100
reversed those root kits a little more

445
00:14:59,100 --> 00:15:01,260
before are writing the plugin the plugin

446
00:15:01,260 --> 00:15:02,880
was kind of short anyway but I

447
00:15:02,880 --> 00:15:04,320
eventually realized that all the root

448
00:15:04,320 --> 00:15:06,899
kits reset that value after so you can

449
00:15:06,899 --> 00:15:08,940
imagine the machines clean the attackers

450
00:15:08,940 --> 00:15:11,760
get on the system they load their piece

451
00:15:11,760 --> 00:15:13,380
that's going to disable this so they set

452
00:15:13,380 --> 00:15:15,480
this value to zero they then load their

453
00:15:15,480 --> 00:15:16,920
malicious root kit and they set the

454
00:15:16,920 --> 00:15:19,860
value back to one so the enforcement was

455
00:15:19,860 --> 00:15:21,540
disabled for that's a small enough time

456
00:15:21,540 --> 00:15:23,459
period to let that root kit load but

457
00:15:23,459 --> 00:15:24,720
then it goes back to how it was

458
00:15:24,720 --> 00:15:27,420
previously so then I kind of re-examined

459
00:15:27,420 --> 00:15:28,800
it I'm like what can we do in memory to

460
00:15:28,800 --> 00:15:30,300
find this anyway

461
00:15:30,300 --> 00:15:32,459
I found these two really awesome blog

462
00:15:32,459 --> 00:15:34,620
posts so the GCI options in a

463
00:15:34,620 --> 00:15:36,720
virtualized world and the swan the swan

464
00:15:36,720 --> 00:15:39,300
song for DSE tampering two separate blog

465
00:15:39,300 --> 00:15:40,740
posts if you're interested in this I

466
00:15:40,740 --> 00:15:43,139
definitely recommend looking that up and

467
00:15:43,139 --> 00:15:44,880
the long story short is there's no

468
00:15:44,880 --> 00:15:46,560
memory forensics way that I could figure

469
00:15:46,560 --> 00:15:48,839
out to definitively know if the SC has

470
00:15:48,839 --> 00:15:50,519
been tampered with because these list

471
00:15:50,519 --> 00:15:52,139
out like 20 different things if you

472
00:15:52,139 --> 00:15:53,760
reverse the code pass there's a ton of

473
00:15:53,760 --> 00:15:55,620
functions called a ton of variables

474
00:15:55,620 --> 00:15:57,360
consulted so there's at least a couple

475
00:15:57,360 --> 00:16:00,240
dozen ways you could disable DSC and it

476
00:16:00,240 --> 00:16:02,160
would be very hard to have like a

477
00:16:02,160 --> 00:16:03,720
comprehensive volatility plug-in that

478
00:16:03,720 --> 00:16:05,820
did all of those so it was back to the

479
00:16:05,820 --> 00:16:07,620
drawing board memory forensics wasn't

480
00:16:07,620 --> 00:16:09,300
going to immediately tell us if this

481
00:16:09,300 --> 00:16:10,260
happened

482
00:16:10,260 --> 00:16:13,019
but luckily Microsoft now has what's

483
00:16:13,019 --> 00:16:15,899
called in their expanded event log set

484
00:16:15,899 --> 00:16:17,399
they have two things that are really

485
00:16:17,399 --> 00:16:19,800
helpful to us one are the code Integrity

486
00:16:19,800 --> 00:16:21,660
logs and as we'll see on the next Slide

487
00:16:21,660 --> 00:16:24,540
the security mitigation logs

488
00:16:24,540 --> 00:16:26,820
again this is event logs this is just in

489
00:16:26,820 --> 00:16:28,260
the tool I use for event log forensics

490
00:16:28,260 --> 00:16:30,240
it'll look exactly the same in anywhere

491
00:16:30,240 --> 00:16:32,760
else you ship your event logs and the

492
00:16:32,760 --> 00:16:35,160
idea is inside of the code Integrity

493
00:16:35,160 --> 00:16:38,699
provider there's an event ID 3004. it's

494
00:16:38,699 --> 00:16:40,320
kind of funny it says the first sentence

495
00:16:40,320 --> 00:16:42,480
is like this event is isn't common so

496
00:16:42,480 --> 00:16:44,279
I'm glad that like Rook hits loading on

497
00:16:44,279 --> 00:16:47,220
the machine isn't common but the idea is

498
00:16:47,220 --> 00:16:49,500
this is going to fire whenever an

499
00:16:49,500 --> 00:16:51,420
unsigned driver loads into the machine

500
00:16:51,420 --> 00:16:53,339
and if you read the whole page I have

501
00:16:53,339 --> 00:16:56,339
the references on my last slide if you

502
00:16:56,339 --> 00:16:57,720
read the whole page here there's some

503
00:16:57,720 --> 00:16:59,579
other closely related numbers so you

504
00:16:59,579 --> 00:17:02,519
want like 3005 and six and so on but the

505
00:17:02,519 --> 00:17:04,500
idea is Windows is like hey this

506
00:17:04,500 --> 00:17:06,059
unsigned rootkit was trying to load for

507
00:17:06,059 --> 00:17:07,919
some reason that shouldn't happen I'm

508
00:17:07,919 --> 00:17:09,299
going to throw that in the event log so

509
00:17:09,299 --> 00:17:10,380
you can find it three months after

510
00:17:10,380 --> 00:17:12,059
you've been attacked but the root Kit's

511
00:17:12,059 --> 00:17:14,220
gonna load anyway like come on

512
00:17:14,220 --> 00:17:16,140
um the good thing about this is remember

513
00:17:16,140 --> 00:17:18,359
event logs are time stamped so you at

514
00:17:18,359 --> 00:17:19,919
least know the second of when your

515
00:17:19,919 --> 00:17:22,679
machine had a rootkit active on it again

516
00:17:22,679 --> 00:17:24,119
this is probably going to be loading in

517
00:17:24,119 --> 00:17:25,980
a service so this would be every time

518
00:17:25,980 --> 00:17:27,480
the machine rebooted it would come back

519
00:17:27,480 --> 00:17:29,520
but you can get back to that first time

520
00:17:29,520 --> 00:17:31,620
pretty easily of when did this show up

521
00:17:31,620 --> 00:17:33,540
on my machine and this would be a really

522
00:17:33,540 --> 00:17:35,100
good example on Monday when you're at

523
00:17:35,100 --> 00:17:36,419
your office if you sweep your network

524
00:17:36,419 --> 00:17:39,240
for the code Integrity provider event ID

525
00:17:39,240 --> 00:17:42,539
3004 and you see a bunch of hits

526
00:17:42,539 --> 00:17:43,799
um it should be root kits I'm going to

527
00:17:43,799 --> 00:17:45,539
get to an exception in a second I took

528
00:17:45,539 --> 00:17:46,679
out the slides I didn't think it was

529
00:17:46,679 --> 00:17:49,440
very fun or nice but there's this one

530
00:17:49,440 --> 00:17:50,640
which you'll definitely want to check

531
00:17:50,640 --> 00:17:53,039
and then as I mentioned before normally

532
00:17:53,039 --> 00:17:54,419
root kits are going to have a service

533
00:17:54,419 --> 00:17:57,419
associated with them it's 100 possible

534
00:17:57,419 --> 00:17:59,700
and it happens where a root kit will

535
00:17:59,700 --> 00:18:02,580
load its Service as a just the driver

536
00:18:02,580 --> 00:18:04,140
and then you have this nice driver file

537
00:18:04,140 --> 00:18:05,940
sitting on disk that's what you're

538
00:18:05,940 --> 00:18:08,039
seeing on the previous slide another

539
00:18:08,039 --> 00:18:09,840
variation is they'll have a process

540
00:18:09,840 --> 00:18:12,720
based service as well that process might

541
00:18:12,720 --> 00:18:15,539
load the driver part or it might just be

542
00:18:15,539 --> 00:18:17,220
a separate component so now you have the

543
00:18:17,220 --> 00:18:18,840
malware active in user Lane and the

544
00:18:18,840 --> 00:18:21,539
kernel so on this machine where this is

545
00:18:21,539 --> 00:18:23,220
a real root kit we'll see some output

546
00:18:23,220 --> 00:18:24,660
from it when we're running volatility

547
00:18:24,660 --> 00:18:27,120
plugins the previous slide was the

548
00:18:27,120 --> 00:18:29,520
kernel driver component loading and this

549
00:18:29,520 --> 00:18:30,960
slide which you can see now we're in a

550
00:18:30,960 --> 00:18:32,340
different provider we're in the security

551
00:18:32,340 --> 00:18:35,340
mitigations part the event ID is 11 and

552
00:18:35,340 --> 00:18:37,380
it's telling us that a service host

553
00:18:37,380 --> 00:18:39,660
process which is like a privileged

554
00:18:39,660 --> 00:18:42,480
service loaded this unsigned DLo so

555
00:18:42,480 --> 00:18:43,860
again you're like why do you allow that

556
00:18:43,860 --> 00:18:45,419
to happen you're writing out an event

557
00:18:45,419 --> 00:18:47,280
log just block the dll from loading in

558
00:18:47,280 --> 00:18:49,500
the first place but by querying for

559
00:18:49,500 --> 00:18:51,539
these IDs you have a really good idea of

560
00:18:51,539 --> 00:18:53,220
which unsigned drivers loaded in the

561
00:18:53,220 --> 00:18:56,120
kernel and this one's not documented

562
00:18:56,120 --> 00:18:58,740
extremely well the other one really

563
00:18:58,740 --> 00:19:01,200
isn't either but the idea what I gather

564
00:19:01,200 --> 00:19:04,140
from it is when an unsigned dll loads

565
00:19:04,140 --> 00:19:05,880
into a privileged process like a service

566
00:19:05,880 --> 00:19:07,679
host or something else it's going to

567
00:19:07,679 --> 00:19:09,120
flag this if you have some random

568
00:19:09,120 --> 00:19:10,799
third-party application that's loading

569
00:19:10,799 --> 00:19:12,900
unsigned dlls it's not going to trigger

570
00:19:12,900 --> 00:19:15,179
here but your main is really important

571
00:19:15,179 --> 00:19:16,200
here because this tells you which

572
00:19:16,200 --> 00:19:18,059
services are loaded and created on the

573
00:19:18,059 --> 00:19:20,520
machine with unsigned execute which is a

574
00:19:20,520 --> 00:19:22,080
really common way that root kits Operate

575
00:19:22,080 --> 00:19:24,419
Now the exception to this and it gave me

576
00:19:24,419 --> 00:19:26,760
a heart attack for a second is when I

577
00:19:26,760 --> 00:19:28,320
originally found all this out and was

578
00:19:28,320 --> 00:19:30,299
documenting the IDS I like to go look

579
00:19:30,299 --> 00:19:32,580
across our

580
00:19:32,580 --> 00:19:34,740
the sources I can see from historical

581
00:19:34,740 --> 00:19:36,660
investigations we've done and then some

582
00:19:36,660 --> 00:19:38,520
live data on client networks because I

583
00:19:38,520 --> 00:19:39,900
want to know like is this just going to

584
00:19:39,900 --> 00:19:41,400
produce a billion false positives and

585
00:19:41,400 --> 00:19:43,620
it's a waste of time so the first thing

586
00:19:43,620 --> 00:19:47,039
I did was look for this one and I've got

587
00:19:47,039 --> 00:19:49,559
thousands of hits and I was like there's

588
00:19:49,559 --> 00:19:51,900
no way that so first I thought my query

589
00:19:51,900 --> 00:19:53,940
was wrong like I typoed something I'm

590
00:19:53,940 --> 00:19:56,280
like no right provider write ID again

591
00:19:56,280 --> 00:19:58,320
thousands and thousands of hits across

592
00:19:58,320 --> 00:20:01,380
like every customer that we have and I'm

593
00:20:01,380 --> 00:20:03,000
like there's no way that like all this

594
00:20:03,000 --> 00:20:04,260
was missed and like there's all these

595
00:20:04,260 --> 00:20:05,460
root kits and everything there's got to

596
00:20:05,460 --> 00:20:08,039
be something wrong so I'll talk a little

597
00:20:08,039 --> 00:20:10,080
slow so you can try to think on it but

598
00:20:10,080 --> 00:20:12,900
if you can imagine there's one class of

599
00:20:12,900 --> 00:20:15,179
software products that make a lot of

600
00:20:15,179 --> 00:20:17,039
claims that are usually wrong and they

601
00:20:17,039 --> 00:20:18,480
usually end up shooting themselves in

602
00:20:18,480 --> 00:20:20,700
the foot to supposedly provide security

603
00:20:20,700 --> 00:20:22,860
on your machine that's what those

604
00:20:22,860 --> 00:20:24,840
thousands of hits were now there was

605
00:20:24,840 --> 00:20:26,700
definitely signs of malware that we

606
00:20:26,700 --> 00:20:28,260
found that I found in those queries I

607
00:20:28,260 --> 00:20:30,059
checked with our services team they had

608
00:20:30,059 --> 00:20:31,440
known about them like there was previous

609
00:20:31,440 --> 00:20:33,440
you know IR situation questions for them

610
00:20:33,440 --> 00:20:36,900
but outside of those the tens of

611
00:20:36,900 --> 00:20:38,520
thousands of hits every single one was

612
00:20:38,520 --> 00:20:40,260
an EDR vendor

613
00:20:40,260 --> 00:20:42,840
unsigned dlls their services loading

614
00:20:42,840 --> 00:20:44,520
they're they weren't not the driver ones

615
00:20:44,520 --> 00:20:46,380
but these dlls from disk loading into

616
00:20:46,380 --> 00:20:48,600
Services everyone was a security product

617
00:20:48,600 --> 00:20:50,880
and if that doesn't scare you what that

618
00:20:50,880 --> 00:20:53,220
means is those vendors are shipping dlls

619
00:20:53,220 --> 00:20:55,140
that aren't signed and then loading them

620
00:20:55,140 --> 00:20:56,880
into service host processes that run

621
00:20:56,880 --> 00:20:59,100
with the most privileges possible now if

622
00:20:59,100 --> 00:21:01,140
I was a red teamer and I did offensive

623
00:21:01,140 --> 00:21:02,700
research instead of talking about stuff

624
00:21:02,700 --> 00:21:06,120
like this I would profile every EDR

625
00:21:06,120 --> 00:21:08,100
vendor there was I would find ways to

626
00:21:08,100 --> 00:21:09,660
infect those files or you could really

627
00:21:09,660 --> 00:21:11,220
just replace those files if you wanted

628
00:21:11,220 --> 00:21:13,559
and now you're going to load into those

629
00:21:13,559 --> 00:21:15,299
EDR products you can disable everything

630
00:21:15,299 --> 00:21:17,160
and you have a really nice persistence

631
00:21:17,160 --> 00:21:19,080
mechanism because what's the first thing

632
00:21:19,080 --> 00:21:21,120
everyone does is they go into their

633
00:21:21,120 --> 00:21:22,200
allow list and they put everything

634
00:21:22,200 --> 00:21:24,120
related to their EDR product well at

635
00:21:24,120 --> 00:21:26,580
that point you just put into your allow

636
00:21:26,580 --> 00:21:28,980
list everything that the malware does so

637
00:21:28,980 --> 00:21:30,780
I very easily think you could get at

638
00:21:30,780 --> 00:21:32,520
least one if not two blackhead talks out

639
00:21:32,520 --> 00:21:34,260
of that just throwing it out there for

640
00:21:34,260 --> 00:21:37,080
someone who wanted to do it but with my

641
00:21:37,080 --> 00:21:38,520
position I don't think that would be a

642
00:21:38,520 --> 00:21:40,260
very nice thing to do but it was

643
00:21:40,260 --> 00:21:41,760
definitely work like it just blew my

644
00:21:41,760 --> 00:21:43,860
mind that run-of-the-mill like like

645
00:21:43,860 --> 00:21:45,780
every single one like if you write RSA

646
00:21:45,780 --> 00:21:48,179
last week it would be just like looking

647
00:21:48,179 --> 00:21:50,580
at those logs all the vendors that load

648
00:21:50,580 --> 00:21:53,720
unsigned stuff on your machine

649
00:21:54,659 --> 00:21:56,840
foreign

650
00:21:57,179 --> 00:21:59,280
so at this point we know that root kits

651
00:21:59,280 --> 00:22:01,080
can load into the system we know they're

652
00:22:01,080 --> 00:22:03,179
not supposed to but DSC can be bypassed

653
00:22:03,179 --> 00:22:06,120
as we saw and as we talked about so the

654
00:22:06,120 --> 00:22:08,220
other thing that we wanted to research

655
00:22:08,220 --> 00:22:10,320
as part of this is the kernel patch

656
00:22:10,320 --> 00:22:12,600
protection normally known as patchgard

657
00:22:12,600 --> 00:22:14,940
kind of the same idea so the idea is

658
00:22:14,940 --> 00:22:17,340
there was root kits since the earliest

659
00:22:17,340 --> 00:22:19,799
days of Windows and they kept abusing

660
00:22:19,799 --> 00:22:21,659
the same features over and over again so

661
00:22:21,659 --> 00:22:23,400
Microsoft had a really good idea which

662
00:22:23,400 --> 00:22:25,320
is why don't we protect those features

663
00:22:25,320 --> 00:22:27,360
and so the root kits don't have that

664
00:22:27,360 --> 00:22:30,179
level of control over the system so for

665
00:22:30,179 --> 00:22:31,980
a lot of the old things that rootkits

666
00:22:31,980 --> 00:22:33,360
did if they try to do them now the

667
00:22:33,360 --> 00:22:35,159
machine's going to blue screen which is

668
00:22:35,159 --> 00:22:37,260
not very helpful also if you have full

669
00:22:37,260 --> 00:22:39,539
crash jumps enabled that's going to trap

670
00:22:39,539 --> 00:22:41,640
the malware into a memory sample now I

671
00:22:41,640 --> 00:22:43,020
put stars because there's always someone

672
00:22:43,020 --> 00:22:44,400
who likes to raise their hand and say

673
00:22:44,400 --> 00:22:45,900
well technically the malware can do this

674
00:22:45,900 --> 00:22:47,640
and get out of it I know I'm well aware

675
00:22:47,640 --> 00:22:50,220
of that but in 99 of the cases the

676
00:22:50,220 --> 00:22:52,140
malware will be in that crash jump that

677
00:22:52,140 --> 00:22:54,360
is produced and the thing that caused

678
00:22:54,360 --> 00:22:55,500
the blue screen will be the malware

679
00:22:55,500 --> 00:22:57,120
itself which is not once the malware

680
00:22:57,120 --> 00:23:01,200
others want to happen in the wild so

681
00:23:01,200 --> 00:23:04,200
uh rootkit authors want to avoid patch

682
00:23:04,200 --> 00:23:05,940
guard and then you also have to think to

683
00:23:05,940 --> 00:23:07,740
yourself uh like patchguard really

684
00:23:07,740 --> 00:23:09,419
doesn't have a lot of bypasses they're

685
00:23:09,419 --> 00:23:11,039
patched very quickly when they do happen

686
00:23:11,039 --> 00:23:13,799
so looking at the places that petchguard

687
00:23:13,799 --> 00:23:15,960
protects is not very good for triage

688
00:23:15,960 --> 00:23:17,760
because 99.9 percent of the time the

689
00:23:17,760 --> 00:23:18,840
malware's not going to be there because

690
00:23:18,840 --> 00:23:20,100
it would have crashed the system out

691
00:23:20,100 --> 00:23:22,440
anyway so I wanted to figure out what

692
00:23:22,440 --> 00:23:24,720
was the latest version of what was being

693
00:23:24,720 --> 00:23:26,820
protected by patchguard and sometimes

694
00:23:26,820 --> 00:23:28,500
Twitter is actually cool like I tweeted

695
00:23:28,500 --> 00:23:30,780
it out like 30 seconds later one of the

696
00:23:30,780 --> 00:23:32,580
like gods of Windows internals is like

697
00:23:32,580 --> 00:23:34,260
hey run this at windebug and I've solved

698
00:23:34,260 --> 00:23:36,000
it for you I'm like this is awesome so

699
00:23:36,000 --> 00:23:38,940
took that window bug command loaded a VM

700
00:23:38,940 --> 00:23:41,580
ran it through uh wind debug once it was

701
00:23:41,580 --> 00:23:43,860
loaded the idea here is we're looking

702
00:23:43,860 --> 00:23:46,679
for reasons that would cause this 109

703
00:23:46,679 --> 00:23:48,960
exception which is critical structure

704
00:23:48,960 --> 00:23:51,059
corruption and if you're familiar with

705
00:23:51,059 --> 00:23:52,679
memory forensics you use volatility

706
00:23:52,679 --> 00:23:54,539
before or anything like that everything

707
00:23:54,539 --> 00:23:56,820
in red literally Maps directly to a

708
00:23:56,820 --> 00:23:58,320
volatility plug-in because these are

709
00:23:58,320 --> 00:24:00,059
things we wanted to look for in the past

710
00:24:00,059 --> 00:24:02,520
to see if root kits were performing

711
00:24:02,520 --> 00:24:04,799
these actions to detect them and now we

712
00:24:04,799 --> 00:24:06,360
don't have to anymore some of these

713
00:24:06,360 --> 00:24:08,039
obviously they're one sentence and you

714
00:24:08,039 --> 00:24:09,240
can make kind of a guess at what they

715
00:24:09,240 --> 00:24:10,799
are and I'm pretty sure some of these

716
00:24:10,799 --> 00:24:12,659
are covered by volatility but I only

717
00:24:12,659 --> 00:24:13,919
highlighted the ones but there's

718
00:24:13,919 --> 00:24:15,840
literally like there's a plug-in called

719
00:24:15,840 --> 00:24:18,240
IDT where you check the IDT and the gdt

720
00:24:18,240 --> 00:24:20,220
and you can check if the process list is

721
00:24:20,220 --> 00:24:22,080
corrupted and so on so you can imagine

722
00:24:22,080 --> 00:24:24,600
Microsoft had similar motivations to we

723
00:24:24,600 --> 00:24:26,280
did with volatility like root kits are

724
00:24:26,280 --> 00:24:27,360
doing something we want to catch them

725
00:24:27,360 --> 00:24:29,100
root kits are doing something Microsoft

726
00:24:29,100 --> 00:24:31,679
wants to stop them from doing it so what

727
00:24:31,679 --> 00:24:33,419
are we so a big part of our research

728
00:24:33,419 --> 00:24:35,340
effort was to figure out as we're

729
00:24:35,340 --> 00:24:37,500
analyze analyzing these root kits what

730
00:24:37,500 --> 00:24:39,360
can they do on Windows 10 that is still

731
00:24:39,360 --> 00:24:41,039
deadly to a machine still going to let

732
00:24:41,039 --> 00:24:43,200
them hide from all of your security

733
00:24:43,200 --> 00:24:45,240
products still going to let them steal

734
00:24:45,240 --> 00:24:47,280
everything off the system and so that's

735
00:24:47,280 --> 00:24:48,960
what we're going to look at for a few

736
00:24:48,960 --> 00:24:51,500
slides

737
00:24:51,600 --> 00:24:53,820
just a quick recap when a kernel driver

738
00:24:53,820 --> 00:24:56,159
loads there's two data structures that

739
00:24:56,159 --> 00:24:57,900
are going to be created and that we can

740
00:24:57,900 --> 00:25:00,360
start our attempt to find the malware or

741
00:25:00,360 --> 00:25:01,679
the root kit

742
00:25:01,679 --> 00:25:04,260
the first thing that happens is okay the

743
00:25:04,260 --> 00:25:05,940
first thing that happens is a kernel

744
00:25:05,940 --> 00:25:07,679
module data structure in memory gets

745
00:25:07,679 --> 00:25:09,780
created you can see that here it's going

746
00:25:09,780 --> 00:25:11,940
to have the path out to disk but just

747
00:25:11,940 --> 00:25:13,440
running this plugin is definitely not

748
00:25:13,440 --> 00:25:15,179
good for triage because I cut something

749
00:25:15,179 --> 00:25:17,940
like 250 rows out of this slide there's

750
00:25:17,940 --> 00:25:19,440
a lot of Kernel modules on a clean

751
00:25:19,440 --> 00:25:22,200
system the important part here though is

752
00:25:22,200 --> 00:25:24,360
the base so this tells us where that

753
00:25:24,360 --> 00:25:26,520
executable is going to be in memory and

754
00:25:26,520 --> 00:25:27,840
then depending what you're doing the

755
00:25:27,840 --> 00:25:30,860
size can be important as well

756
00:25:30,860 --> 00:25:34,620
besides the module data structure there

757
00:25:34,620 --> 00:25:37,200
will usually also be driver objects so

758
00:25:37,200 --> 00:25:39,539
this is what's going to allow

759
00:25:39,539 --> 00:25:40,440
um

760
00:25:40,440 --> 00:25:42,900
a module or a module to be mapped back

761
00:25:42,900 --> 00:25:45,779
to its service and also this driver here

762
00:25:45,779 --> 00:25:48,000
is how processes can talk to it so a

763
00:25:48,000 --> 00:25:49,320
simple example would be if you have like

764
00:25:49,320 --> 00:25:51,600
an Nvidia card you have that GUI that

765
00:25:51,600 --> 00:25:53,340
lets you set the fan speed and the

766
00:25:53,340 --> 00:25:55,919
colors and whatever that is in many

767
00:25:55,919 --> 00:25:57,480
cases just going to talk to the device

768
00:25:57,480 --> 00:25:59,400
that that driver makes so you can set

769
00:25:59,400 --> 00:26:01,860
the values so when we're looking for

770
00:26:01,860 --> 00:26:03,539
these kernel mode components there's two

771
00:26:03,539 --> 00:26:05,100
things we want to look at to start the

772
00:26:05,100 --> 00:26:07,500
modules and the drivers again this would

773
00:26:07,500 --> 00:26:09,360
be the place in the registry where that

774
00:26:09,360 --> 00:26:12,000
service is you get the start and the

775
00:26:12,000 --> 00:26:13,799
size and then you get something close to

776
00:26:13,799 --> 00:26:15,900
a name but all again you can't look at

777
00:26:15,900 --> 00:26:17,159
this on your own because there's going

778
00:26:17,159 --> 00:26:19,380
to be a couple hundred rows there

779
00:26:19,380 --> 00:26:20,880
um there's going to be a couple hundred

780
00:26:20,880 --> 00:26:22,919
rows so even on one machine it's too

781
00:26:22,919 --> 00:26:24,960
much to look at on your own that was

782
00:26:24,960 --> 00:26:28,080
interesting and blinding okay so just

783
00:26:28,080 --> 00:26:30,960
like uh so what we want to be able to do

784
00:26:30,960 --> 00:26:33,840
is figure out when root kits tamper with

785
00:26:33,840 --> 00:26:36,299
these data structures there are apis on

786
00:26:36,299 --> 00:26:37,980
the live machine that are available to

787
00:26:37,980 --> 00:26:40,380
you if you're using certain like

788
00:26:40,380 --> 00:26:42,299
forensic tools on the live machine or

789
00:26:42,299 --> 00:26:44,159
certain malware analysis tools that even

790
00:26:44,159 --> 00:26:46,080
from userland can recover the modules

791
00:26:46,080 --> 00:26:47,940
and the drivers that are loaded and then

792
00:26:47,940 --> 00:26:49,919
certainly your EDR type products that

793
00:26:49,919 --> 00:26:51,659
are loaded in the kernel can figure

794
00:26:51,659 --> 00:26:53,580
those list out the same way volatility

795
00:26:53,580 --> 00:26:56,220
does so what malware will do is a couple

796
00:26:56,220 --> 00:26:58,380
things one is they're going to unlink

797
00:26:58,380 --> 00:27:00,960
themselves from the module list so they

798
00:27:00,960 --> 00:27:02,840
just won't show up on this slide anyway

799
00:27:02,840 --> 00:27:05,760
technically patchguard protects this but

800
00:27:05,760 --> 00:27:08,580
I've like with my own eyes seeing

801
00:27:08,580 --> 00:27:10,080
machines where the modules on LinkedIn

802
00:27:10,080 --> 00:27:11,520
it didn't blue screen so I don't know if

803
00:27:11,520 --> 00:27:13,260
that's some like bleeding edge feature

804
00:27:13,260 --> 00:27:14,760
that I just haven't triggered yet or

805
00:27:14,760 --> 00:27:16,080
something so that's why I have the star

806
00:27:16,080 --> 00:27:18,120
there but this definitely works the

807
00:27:18,120 --> 00:27:19,919
other thing that Rook hits will do is

808
00:27:19,919 --> 00:27:22,500
change the driver's metadata which the

809
00:27:22,500 --> 00:27:24,240
idea here is they don't want you to be

810
00:27:24,240 --> 00:27:26,400
able to know where it is in memory so if

811
00:27:26,400 --> 00:27:28,080
we go back to the driver scan I'll put

812
00:27:28,080 --> 00:27:30,799
this is the Base address of where that

813
00:27:30,799 --> 00:27:33,419
executable starts in memory we get

814
00:27:33,419 --> 00:27:35,340
another copy of that same data in the

815
00:27:35,340 --> 00:27:37,860
module structure so what rootkits will

816
00:27:37,860 --> 00:27:40,799
do is zero that data that's usually what

817
00:27:40,799 --> 00:27:41,880
they do right they could technically put

818
00:27:41,880 --> 00:27:43,320
something else but normally they make

819
00:27:43,320 --> 00:27:45,240
the Base address zero and the size zero

820
00:27:45,240 --> 00:27:47,159
so now to start you don't know where

821
00:27:47,159 --> 00:27:49,500
that is in memory so that makes it

822
00:27:49,500 --> 00:27:52,020
difficult if you to find it because it's

823
00:27:52,020 --> 00:27:53,220
not going to show up in your normal

824
00:27:53,220 --> 00:27:55,980
listing tools but this is very nice from

825
00:27:55,980 --> 00:27:57,720
a memory forensics perspective because

826
00:27:57,720 --> 00:27:59,220
now there's this weird disconnect where

827
00:27:59,220 --> 00:28:00,779
you have a driver in memory that like

828
00:28:00,779 --> 00:28:02,340
technically doesn't exist anywhere and

829
00:28:02,340 --> 00:28:04,679
you have a module that doesn't exist so

830
00:28:04,679 --> 00:28:07,320
we have a plugin called driver module

831
00:28:07,320 --> 00:28:09,179
and what driver module does is it

832
00:28:09,179 --> 00:28:11,400
compares the metadata from the modules

833
00:28:11,400 --> 00:28:13,260
plug-in that we saw before and the

834
00:28:13,260 --> 00:28:14,760
driver scan plugin that we saw before

835
00:28:14,760 --> 00:28:17,039
and it just kicks out ones that it

836
00:28:17,039 --> 00:28:19,500
thinks are weird and in every root kit

837
00:28:19,500 --> 00:28:20,940
that we studied as part of this project

838
00:28:20,940 --> 00:28:23,460
every single one fell to driver module

839
00:28:23,460 --> 00:28:25,500
when they tamper with the metadata and

840
00:28:25,500 --> 00:28:27,840
so on you're going to find it so just to

841
00:28:27,840 --> 00:28:29,640
kind of illustrate how this works this

842
00:28:29,640 --> 00:28:31,980
is a root kick called Dirty Mo this

843
00:28:31,980 --> 00:28:33,659
write-up was like really awesome oh you

844
00:28:33,659 --> 00:28:35,220
can see the browser or whatever

845
00:28:35,220 --> 00:28:36,779
generates this that it would be almost a

846
00:28:36,779 --> 00:28:38,520
40 minute read I mean this this company

847
00:28:38,520 --> 00:28:41,039
like tore this rootkit apart so so we

848
00:28:41,039 --> 00:28:43,559
got a sample a malware sample so the

849
00:28:43,559 --> 00:28:45,659
driver file we then created a memory

850
00:28:45,659 --> 00:28:47,940
sample out of it and so you can see us

851
00:28:47,940 --> 00:28:50,159
running volatility 3 against it

852
00:28:50,159 --> 00:28:51,900
um you had the offset this is the data

853
00:28:51,900 --> 00:28:54,059
structure address but the start that

854
00:28:54,059 --> 00:28:55,980
should tell us where that executable is

855
00:28:55,980 --> 00:28:58,020
in memory is zero and the size is zero

856
00:28:58,020 --> 00:28:59,100
like I said this is what you're going to

857
00:28:59,100 --> 00:29:01,679
see in most cases so you could I don't

858
00:29:01,679 --> 00:29:03,779
know run driver scan and Grub for zero

859
00:29:03,779 --> 00:29:05,279
and hope you get lucky but that's not

860
00:29:05,279 --> 00:29:07,559
very automated so instead you could use

861
00:29:07,559 --> 00:29:10,080
driver module so again what this does is

862
00:29:10,080 --> 00:29:12,179
just prints out drivers that it thinks

863
00:29:12,179 --> 00:29:14,880
are weird something to be aware of is

864
00:29:14,880 --> 00:29:16,740
this known column so there's like eight

865
00:29:16,740 --> 00:29:18,659
or nine drivers that will legitimate

866
00:29:18,659 --> 00:29:20,460
drivers on a clean system that will

867
00:29:20,460 --> 00:29:23,100
always trigger this plug-in and so what

868
00:29:23,100 --> 00:29:24,779
known says is like yeah we know this is

869
00:29:24,779 --> 00:29:26,039
going to do it you can ignore it

870
00:29:26,039 --> 00:29:27,480
obviously you could configure the

871
00:29:27,480 --> 00:29:29,039
plug-in just not to print those if

872
00:29:29,039 --> 00:29:31,440
that's easier for you but in this case

873
00:29:31,440 --> 00:29:35,220
it finds the weird dump EDC B5 a3c

874
00:29:35,220 --> 00:29:37,559
automatically and that's the only one it

875
00:29:37,559 --> 00:29:39,120
shows that isn't true it only produces

876
00:29:39,120 --> 00:29:40,919
two lines the slide's not cut so it

877
00:29:40,919 --> 00:29:42,360
tells you this one that you can ignore

878
00:29:42,360 --> 00:29:44,340
and this one it's like hey something's

879
00:29:44,340 --> 00:29:46,380
wrong and we know that the reason it

880
00:29:46,380 --> 00:29:48,059
couldn't map the driver to anywhere is

881
00:29:48,059 --> 00:29:50,580
because these are broken so with just

882
00:29:50,580 --> 00:29:52,740
running one plug-in every root kit that

883
00:29:52,740 --> 00:29:55,140
we found that we studied as part of this

884
00:29:55,140 --> 00:29:57,899
immediately fell to driver module so

885
00:29:57,899 --> 00:29:59,580
that's good and bad right like now you

886
00:29:59,580 --> 00:30:01,020
know you have a root kit on the machine

887
00:30:01,020 --> 00:30:03,179
you don't immediately know where it is

888
00:30:03,179 --> 00:30:04,679
in memory there's some I'm not going to

889
00:30:04,679 --> 00:30:06,120
talk about it here but there's some more

890
00:30:06,120 --> 00:30:08,100
advanced memory forensics techniques you

891
00:30:08,100 --> 00:30:10,440
can use to find that in memory but the

892
00:30:10,440 --> 00:30:12,120
idea is you know we definitely need to

893
00:30:12,120 --> 00:30:15,299
investigate this some further

894
00:30:15,299 --> 00:30:17,840
foreign

895
00:30:22,620 --> 00:30:24,899
so besides being able to still tamper

896
00:30:24,899 --> 00:30:26,520
with the metadata that they have

897
00:30:26,520 --> 00:30:28,980
available some of the common techniques

898
00:30:28,980 --> 00:30:30,600
that Ricketts have used forever still

899
00:30:30,600 --> 00:30:32,399
work and it's not just that these are

900
00:30:32,399 --> 00:30:33,779
available the root kits are still

901
00:30:33,779 --> 00:30:36,299
actually abusing them so the idea with

902
00:30:36,299 --> 00:30:38,880
irps is if you want to send a request to

903
00:30:38,880 --> 00:30:40,799
a kernel driver so again I like the

904
00:30:40,799 --> 00:30:43,980
video example say you tell your through

905
00:30:43,980 --> 00:30:46,380
that GUI you tell the Nvidia driver hey

906
00:30:46,380 --> 00:30:49,440
I want the fan speed to be 50 that GUI

907
00:30:49,440 --> 00:30:51,240
is going to take that value it's going

908
00:30:51,240 --> 00:30:53,520
to encode it and obviously it can't talk

909
00:30:53,520 --> 00:30:54,840
to the driver directly because the

910
00:30:54,840 --> 00:30:57,059
driver is in kernel space so it's going

911
00:30:57,059 --> 00:30:59,640
to use one of the IRP requests that the

912
00:30:59,640 --> 00:31:01,740
driver is expecting and say hey this is

913
00:31:01,740 --> 00:31:04,440
the fan value that the user wants and

914
00:31:04,440 --> 00:31:07,260
this happens for everything that is in a

915
00:31:07,260 --> 00:31:09,419
privileged space your random notepad

916
00:31:09,419 --> 00:31:10,919
that's running can't write directly to

917
00:31:10,919 --> 00:31:13,020
the hard drive your browser can't write

918
00:31:13,020 --> 00:31:15,179
packets directly to the network you can

919
00:31:15,179 --> 00:31:16,679
imagine so if you think of it as

920
00:31:16,679 --> 00:31:18,539
whenever you want to talk to a hardware

921
00:31:18,539 --> 00:31:20,820
device or you want to deal with a

922
00:31:20,820 --> 00:31:22,559
privileged part of the kernel those

923
00:31:22,559 --> 00:31:24,720
processes have to make a request because

924
00:31:24,720 --> 00:31:26,279
obviously the kernel can say no if you

925
00:31:26,279 --> 00:31:27,539
try to overwrite a file you don't have

926
00:31:27,539 --> 00:31:29,760
access to the that gets denied and

927
00:31:29,760 --> 00:31:31,679
there's nothing you can do about it so

928
00:31:31,679 --> 00:31:33,539
there's plenty of legitimate reasons why

929
00:31:33,539 --> 00:31:35,820
these exist operating systems would have

930
00:31:35,820 --> 00:31:37,919
no security and no real features if they

931
00:31:37,919 --> 00:31:40,559
didn't but this also gets abused heavily

932
00:31:40,559 --> 00:31:42,779
by root kids because a root kit can

933
00:31:42,779 --> 00:31:44,700
start you can imagine you get some type

934
00:31:44,700 --> 00:31:47,159
of like connect back to a machine you're

935
00:31:47,159 --> 00:31:49,200
running as an unprivileged user well

936
00:31:49,200 --> 00:31:51,299
using the software that the the rootkit

937
00:31:51,299 --> 00:31:53,159
authors write you run it and you say hey

938
00:31:53,159 --> 00:31:55,260
I want my process to run a system or hey

939
00:31:55,260 --> 00:31:57,000
I want my process to be hidden from the

940
00:31:57,000 --> 00:31:59,100
live machine and now assist internal is

941
00:31:59,100 --> 00:32:00,480
Task Manager all of those won't be able

942
00:32:00,480 --> 00:32:03,480
to see it so analyzing these IRP

943
00:32:03,480 --> 00:32:05,340
handlers is really important because

944
00:32:05,340 --> 00:32:07,679
basically every rootkit uses them to

945
00:32:07,679 --> 00:32:09,659
talk to back and forth with its

946
00:32:09,659 --> 00:32:11,640
processes

947
00:32:11,640 --> 00:32:13,980
this is these are the entries again this

948
00:32:13,980 --> 00:32:16,500
slide isn't cut so this is a full IRP

949
00:32:16,500 --> 00:32:18,840
listing uh read and write we talked

950
00:32:18,840 --> 00:32:20,520
about so if you're trying to write to a

951
00:32:20,520 --> 00:32:22,200
file system or read from a file system

952
00:32:22,200 --> 00:32:24,600
from a rootkit perspective the ones I

953
00:32:24,600 --> 00:32:27,059
have in red these device control calls

954
00:32:27,059 --> 00:32:29,039
are how you ask a device to do something

955
00:32:29,039 --> 00:32:31,500
and read the response back so again I

956
00:32:31,500 --> 00:32:33,899
want to hide process 42 or I'm making

957
00:32:33,899 --> 00:32:35,460
network connections on a certain IP

958
00:32:35,460 --> 00:32:37,200
address make sure those are hidden from

959
00:32:37,200 --> 00:32:40,260
netstat and TCP View and so on all of

960
00:32:40,260 --> 00:32:43,080
that will go through here

961
00:32:43,080 --> 00:32:46,320
we have a plug-in to enumerate these

962
00:32:46,320 --> 00:32:48,240
handlers in volatility it's called

963
00:32:48,240 --> 00:32:51,059
driver IRP what we're looking at here is

964
00:32:51,059 --> 00:32:52,919
a clean system just so you kind of get

965
00:32:52,919 --> 00:32:55,440
the idea and this is the normal flow so

966
00:32:55,440 --> 00:32:57,240
you have all of the handlers for the

967
00:32:57,240 --> 00:32:59,220
different driver and normally what

968
00:32:59,220 --> 00:33:01,740
happens is this last column here is the

969
00:33:01,740 --> 00:33:03,840
driver that's handling the request and

970
00:33:03,840 --> 00:33:05,220
this First Column is the name of the

971
00:33:05,220 --> 00:33:07,200
driver so you can see for the create

972
00:33:07,200 --> 00:33:09,659
call that's being handled by the NTFS

973
00:33:09,659 --> 00:33:11,940
driver for named pipe it's being created

974
00:33:11,940 --> 00:33:14,460
by ntos kernel which is the kernel

975
00:33:14,460 --> 00:33:16,260
and in most cases this is what you

976
00:33:16,260 --> 00:33:18,120
expect the driver either handles the

977
00:33:18,120 --> 00:33:20,279
request itself or it's a request it

978
00:33:20,279 --> 00:33:22,860
doesn't care about like maybe so NTFS in

979
00:33:22,860 --> 00:33:23,880
this case probably doesn't care about

980
00:33:23,880 --> 00:33:26,039
name pipes it just tells the kernel hey

981
00:33:26,039 --> 00:33:27,419
I don't care about this one there's a

982
00:33:27,419 --> 00:33:29,279
certain value that can be set and then

983
00:33:29,279 --> 00:33:30,960
the kernel will handle it on behalf of

984
00:33:30,960 --> 00:33:32,640
the driver so it's just a much cleaner

985
00:33:32,640 --> 00:33:35,460
way to write the code

986
00:33:35,460 --> 00:33:38,399
as I mentioned root kits like to do two

987
00:33:38,399 --> 00:33:41,159
things with IRP handlers one is they

988
00:33:41,159 --> 00:33:43,440
have their own so that their Associated

989
00:33:43,440 --> 00:33:45,419
processes could talk to them and then

990
00:33:45,419 --> 00:33:47,159
also when they want to take control of a

991
00:33:47,159 --> 00:33:49,260
system and hide things a really good way

992
00:33:49,260 --> 00:33:51,480
to do this is to hook the IRP of the

993
00:33:51,480 --> 00:33:53,640
driver that's responsible for it so if

994
00:33:53,640 --> 00:33:56,100
you hook say the NTFS driver then you

995
00:33:56,100 --> 00:33:57,539
and you want to hide the presence of

996
00:33:57,539 --> 00:34:00,059
your file or if AV is going to scan that

997
00:34:00,059 --> 00:34:02,279
file for signatures and you just make

998
00:34:02,279 --> 00:34:04,200
that file all zeros are all F's

999
00:34:04,200 --> 00:34:07,380
dynamically as it's being read the AV is

1000
00:34:07,380 --> 00:34:09,540
not going to find that you're there so

1001
00:34:09,540 --> 00:34:11,460
this happens a lot again there's some

1002
00:34:11,460 --> 00:34:13,679
documentation that patchguard like I put

1003
00:34:13,679 --> 00:34:15,119
supposedly because again I've never seen

1004
00:34:15,119 --> 00:34:17,040
it happen but for what's deemed critical

1005
00:34:17,040 --> 00:34:19,260
drivers which I would only could assume

1006
00:34:19,260 --> 00:34:20,639
is like the network stack in the file

1007
00:34:20,639 --> 00:34:22,679
system and so on patch guard's supposed

1008
00:34:22,679 --> 00:34:25,440
to crash the machine if these are hooked

1009
00:34:25,440 --> 00:34:26,820
but I've never seen it happen and we

1010
00:34:26,820 --> 00:34:28,440
tried on the latest versions of Windows

1011
00:34:28,440 --> 00:34:30,780
we could get in such and I don't know

1012
00:34:30,780 --> 00:34:32,520
patch guard didn't do anything

1013
00:34:32,520 --> 00:34:35,699
so this is looking at driver IRP against

1014
00:34:35,699 --> 00:34:38,040
uh ghost Emperor this is the same plugin

1015
00:34:38,040 --> 00:34:41,040
we saw before so in case you forgot when

1016
00:34:41,040 --> 00:34:43,260
we ran driver module

1017
00:34:43,260 --> 00:34:46,080
um we got got it that way so against

1018
00:34:46,080 --> 00:34:48,540
Ghost Emperor this was a root kit

1019
00:34:48,540 --> 00:34:49,859
published about

1020
00:34:49,859 --> 00:34:52,080
um from kapersky this was another really

1021
00:34:52,080 --> 00:34:54,300
really good write-up that uh kapersky

1022
00:34:54,300 --> 00:34:57,119
did so for this one they said that TCP

1023
00:34:57,119 --> 00:34:58,500
connections were hidden on the live

1024
00:34:58,500 --> 00:35:01,020
machine so again that's that or TCP

1025
00:35:01,020 --> 00:35:02,940
viewer or anything else like that those

1026
00:35:02,940 --> 00:35:05,760
were hidden because NSI proxy so that's

1027
00:35:05,760 --> 00:35:07,740
the network stack it's in and out

1028
00:35:07,740 --> 00:35:09,720
control handler was hooked which is the

1029
00:35:09,720 --> 00:35:11,400
one we saw before is what handles

1030
00:35:11,400 --> 00:35:13,740
requests out to the device so running

1031
00:35:13,740 --> 00:35:17,040
driver IRP and volatility if we focus on

1032
00:35:17,040 --> 00:35:19,560
NSI proxy I picked a couple ones that

1033
00:35:19,560 --> 00:35:20,760
aren't hooked so you can see the

1034
00:35:20,760 --> 00:35:24,240
driver's NS NSI proxy the Handler is NSI

1035
00:35:24,240 --> 00:35:26,820
proxy but then you have device control

1036
00:35:26,820 --> 00:35:29,579
so that ioctl Handler is dashed because

1037
00:35:29,579 --> 00:35:30,720
volatility is like I don't know what

1038
00:35:30,720 --> 00:35:32,640
this is it doesn't map to a driver

1039
00:35:32,640 --> 00:35:34,619
if you look at the address range here

1040
00:35:34,619 --> 00:35:37,440
it's like e388 compared to the

1041
00:35:37,440 --> 00:35:40,440
legitimate ones are f80 and if you look

1042
00:35:40,440 --> 00:35:42,960
further in the driver IRP output we have

1043
00:35:42,960 --> 00:35:45,660
this weird like dump audio codec 0 right

1044
00:35:45,660 --> 00:35:48,240
in that same range and that doesn't map

1045
00:35:48,240 --> 00:35:50,040
to a module either which is super

1046
00:35:50,040 --> 00:35:52,380
strange and this is an example if you

1047
00:35:52,380 --> 00:35:54,420
run driver module against the sample

1048
00:35:54,420 --> 00:35:56,220
with ghost Emperor this dump audio

1049
00:35:56,220 --> 00:35:58,619
codec0 gets reported right away because

1050
00:35:58,619 --> 00:36:01,320
it's hidden and it's malicious so again

1051
00:36:01,320 --> 00:36:03,540
inspecting the IRP handlers especially

1052
00:36:03,540 --> 00:36:05,579
for things like the file system the

1053
00:36:05,579 --> 00:36:08,220
network stack this not everyone but a

1054
00:36:08,220 --> 00:36:09,660
majority of the root kits we looked at

1055
00:36:09,660 --> 00:36:12,119
did something like this driver IRP found

1056
00:36:12,119 --> 00:36:14,599
them right away

1057
00:36:18,599 --> 00:36:21,060
the next thing is the device trees so

1058
00:36:21,060 --> 00:36:23,280
Windows has this layered architecture I

1059
00:36:23,280 --> 00:36:25,079
stole this out of our book so if it

1060
00:36:25,079 --> 00:36:26,280
looks familiar from art of memory

1061
00:36:26,280 --> 00:36:28,380
forensics that's where it came from the

1062
00:36:28,380 --> 00:36:30,960
idea is multiple drivers can register to

1063
00:36:30,960 --> 00:36:32,940
be involved when operations happen on a

1064
00:36:32,940 --> 00:36:34,619
device so the network stack the file

1065
00:36:34,619 --> 00:36:37,260
system and so on so what root kits will

1066
00:36:37,260 --> 00:36:39,780
do is they will attach as the first or

1067
00:36:39,780 --> 00:36:41,160
the last depending on what the

1068
00:36:41,160 --> 00:36:42,839
particular operation is so they have

1069
00:36:42,839 --> 00:36:44,760
full control so again they want to hide

1070
00:36:44,760 --> 00:36:47,220
from AV reading from the file system or

1071
00:36:47,220 --> 00:36:48,960
something Reading from the network stack

1072
00:36:48,960 --> 00:36:51,599
then they're free to do that this is

1073
00:36:51,599 --> 00:36:53,880
volatility's device tree plug-in this is

1074
00:36:53,880 --> 00:36:55,500
on a clean sample just trying to show

1075
00:36:55,500 --> 00:36:58,079
you that we have your hard disk volume 3

1076
00:36:58,079 --> 00:37:00,180
so your C or D drive whatever it might

1077
00:37:00,180 --> 00:37:01,800
be you have all these legitimate

1078
00:37:01,800 --> 00:37:03,540
components attached to it you can see

1079
00:37:03,540 --> 00:37:06,660
the filter manager attached to NTFS the

1080
00:37:06,660 --> 00:37:08,640
um the qos subsystem attached to the

1081
00:37:08,640 --> 00:37:11,339
network stack those are all normal

1082
00:37:11,339 --> 00:37:13,320
but what you don't expect and I've

1083
00:37:13,320 --> 00:37:16,500
highlighted two rootkit reports here is

1084
00:37:16,500 --> 00:37:18,780
on this case we're seeing NSI proxy

1085
00:37:18,780 --> 00:37:21,000
which is again the network stack weird

1086
00:37:21,000 --> 00:37:24,780
kernel module called CRT sys that you

1087
00:37:24,780 --> 00:37:25,980
don't expect to be there you don't

1088
00:37:25,980 --> 00:37:27,720
expect anything besides legitimate

1089
00:37:27,720 --> 00:37:30,660
components this matches 100 with the

1090
00:37:30,660 --> 00:37:32,400
report from this rootkit says the

1091
00:37:32,400 --> 00:37:34,980
rootkit attaches to NSI proxies device

1092
00:37:34,980 --> 00:37:38,339
stack the way that IRP was hooked on a

1093
00:37:38,339 --> 00:37:39,720
couple slides ago to hide network

1094
00:37:39,720 --> 00:37:41,940
connections this achieves the exact same

1095
00:37:41,940 --> 00:37:43,800
thing without having to hook the IRP

1096
00:37:43,800 --> 00:37:46,079
Handler and I've seen nothing to where

1097
00:37:46,079 --> 00:37:48,060
Windows is going to try to stop device

1098
00:37:48,060 --> 00:37:50,760
attaches for critical devices so even if

1099
00:37:50,760 --> 00:37:52,560
the IRP thing gets blocked off this will

1100
00:37:52,560 --> 00:37:55,020
still work this is uh back to the dump

1101
00:37:55,020 --> 00:37:57,780
audio codec root kit we saw before this

1102
00:37:57,780 --> 00:38:00,240
is from uh kapersky they said the NTFS

1103
00:38:00,240 --> 00:38:03,180
based driver gets hooked the root kit

1104
00:38:03,180 --> 00:38:04,800
attaches to its stack and you see that

1105
00:38:04,800 --> 00:38:07,260
perfectly here so NTFS the filter

1106
00:38:07,260 --> 00:38:08,820
manager that we saw on the previous

1107
00:38:08,820 --> 00:38:11,339
slide and then we also have dump audio

1108
00:38:11,339 --> 00:38:13,200
codec which driver module would have

1109
00:38:13,200 --> 00:38:16,700
told us right away was malicious

1110
00:38:16,800 --> 00:38:19,380
two more things uh there's callbacks so

1111
00:38:19,380 --> 00:38:21,540
in Windows kernel drivers can register

1112
00:38:21,540 --> 00:38:25,020
callbacks for a dozen plus system events

1113
00:38:25,020 --> 00:38:26,400
so if they want to know when processes

1114
00:38:26,400 --> 00:38:28,200
are created when file systems are

1115
00:38:28,200 --> 00:38:30,060
registered when the registry is accessed

1116
00:38:30,060 --> 00:38:31,200
when the system is going to shut down

1117
00:38:31,200 --> 00:38:33,300
really full control of the system and

1118
00:38:33,300 --> 00:38:35,700
able to tamper with a wide variety of

1119
00:38:35,700 --> 00:38:37,740
stuff so if like an AB process is going

1120
00:38:37,740 --> 00:38:39,119
to start they can kill it if the AV

1121
00:38:39,119 --> 00:38:40,859
process is going to spawn a thread they

1122
00:38:40,859 --> 00:38:42,660
can terminate it if they want to inject

1123
00:38:42,660 --> 00:38:44,460
code into a process before it can even

1124
00:38:44,460 --> 00:38:46,320
run they can do that and then the

1125
00:38:46,320 --> 00:38:47,339
registries

1126
00:38:47,339 --> 00:38:49,380
very powerful because they can

1127
00:38:49,380 --> 00:38:51,300
manipulate the entire registry as the

1128
00:38:51,300 --> 00:38:53,339
system sees it so if you use regedit or

1129
00:38:53,339 --> 00:38:55,079
like Powershell scripts to try to

1130
00:38:55,079 --> 00:38:57,300
enumerate things off the machine any

1131
00:38:57,300 --> 00:38:59,640
type of auto run tools if that kernel

1132
00:38:59,640 --> 00:39:01,380
driver is there it can hide all of it

1133
00:39:01,380 --> 00:39:04,440
Windows 10 plus so no version of Windows

1134
00:39:04,440 --> 00:39:06,660
tries to stop these that seems really

1135
00:39:06,660 --> 00:39:08,040
difficult I don't know exactly how that

1136
00:39:08,040 --> 00:39:10,020
would work anyway so we want to be able

1137
00:39:10,020 --> 00:39:12,119
to detect them

1138
00:39:12,119 --> 00:39:14,280
this is running the callbacks plug-in

1139
00:39:14,280 --> 00:39:16,619
Against the Machine infected with a root

1140
00:39:16,619 --> 00:39:19,560
kit you can see that one of the i o

1141
00:39:19,560 --> 00:39:21,180
registration ones so when the machine's

1142
00:39:21,180 --> 00:39:23,460
going to shut down root kits will do a

1143
00:39:23,460 --> 00:39:24,780
couple things as the machine's shutting

1144
00:39:24,780 --> 00:39:26,820
down the most common one is to check

1145
00:39:26,820 --> 00:39:28,619
their persistence so if they register to

1146
00:39:28,619 --> 00:39:30,480
service or they have an auto run key in

1147
00:39:30,480 --> 00:39:31,680
the registry they want to make sure it's

1148
00:39:31,680 --> 00:39:33,839
still there it's also why you can try to

1149
00:39:33,839 --> 00:39:36,180
clean machines live and then reboot it

1150
00:39:36,180 --> 00:39:37,380
and the malware's back because the

1151
00:39:37,380 --> 00:39:38,820
malware got that last chance to

1152
00:39:38,820 --> 00:39:41,339
reinstall itself before the machine went

1153
00:39:41,339 --> 00:39:43,859
away so we're seeing that here this

1154
00:39:43,859 --> 00:39:45,599
callback address is exactly where the

1155
00:39:45,599 --> 00:39:47,220
root Kit's active if you're going to try

1156
00:39:47,220 --> 00:39:50,460
to do some type of static analysis in

1157
00:39:50,460 --> 00:39:51,839
this case we were able to find the

1158
00:39:51,839 --> 00:39:53,820
driver but not the module so this is

1159
00:39:53,820 --> 00:39:55,140
something that driver module would pick

1160
00:39:55,140 --> 00:39:57,060
up and then we have a CM register

1161
00:39:57,060 --> 00:39:58,440
callback which is how you hook the

1162
00:39:58,440 --> 00:40:00,780
registry and that doesn't map to any

1163
00:40:00,780 --> 00:40:02,040
known driver

1164
00:40:02,040 --> 00:40:04,380
so with callbacks you can really just

1165
00:40:04,380 --> 00:40:06,660
grab unknown across the plugin and if

1166
00:40:06,660 --> 00:40:07,980
something hits it's going to be a root

1167
00:40:07,980 --> 00:40:08,880
kit

1168
00:40:08,880 --> 00:40:11,760
and most of the I think I don't know if

1169
00:40:11,760 --> 00:40:13,200
I can say every but the majority of the

1170
00:40:13,200 --> 00:40:15,060
root kits we looked at registered at

1171
00:40:15,060 --> 00:40:16,680
least one callback

1172
00:40:16,680 --> 00:40:18,359
now the other thing that's cool and this

1173
00:40:18,359 --> 00:40:20,460
is the last artifact I'm going to show

1174
00:40:20,460 --> 00:40:22,619
is this technique called get cell

1175
00:40:22,619 --> 00:40:24,420
routine hijacking

1176
00:40:24,420 --> 00:40:25,859
um so

1177
00:40:25,859 --> 00:40:28,680
since tweeting about this at one point I

1178
00:40:28,680 --> 00:40:30,540
found out like a kapersky research

1179
00:40:30,540 --> 00:40:33,119
researcher uh commented on it and said

1180
00:40:33,119 --> 00:40:34,619
that they saw root kids doing this like

1181
00:40:34,619 --> 00:40:36,060
apparently like a decade ago and they

1182
00:40:36,060 --> 00:40:37,800
never saw it again uh for whatever

1183
00:40:37,800 --> 00:40:39,240
reason so I'm still gonna call it new

1184
00:40:39,240 --> 00:40:40,680
because there's the root kits in the

1185
00:40:40,680 --> 00:40:42,660
last couple years or the first time it

1186
00:40:42,660 --> 00:40:44,760
was really documented online but it's

1187
00:40:44,760 --> 00:40:46,619
something to know about anyway so the

1188
00:40:46,619 --> 00:40:48,720
idea is these callbacks are extremely

1189
00:40:48,720 --> 00:40:50,940
powerful but if you're in the kernel so

1190
00:40:50,940 --> 00:40:52,619
like you're an EDR developer you have

1191
00:40:52,619 --> 00:40:54,060
your driver in memory it's actually

1192
00:40:54,060 --> 00:40:55,859
really easy to find those and enumerate

1193
00:40:55,859 --> 00:40:58,079
them the same way the plugin does so at

1194
00:40:58,079 --> 00:40:59,660
that point the EDR

1195
00:40:59,660 --> 00:41:02,220
software can say hey this weird driver I

1196
00:41:02,220 --> 00:41:04,260
don't know has a callback registered it

1197
00:41:04,260 --> 00:41:05,460
can try to scrape it out of memory

1198
00:41:05,460 --> 00:41:07,320
submit it to its you know cloud-based

1199
00:41:07,320 --> 00:41:10,500
whatever it can run analysis on it so

1200
00:41:10,500 --> 00:41:12,720
registering a callback is not stealthy

1201
00:41:12,720 --> 00:41:15,420
by any means so what these root kits

1202
00:41:15,420 --> 00:41:16,619
that we saw in the last couple years

1203
00:41:16,619 --> 00:41:18,839
we're doing is what we call get cell

1204
00:41:18,839 --> 00:41:21,000
routine hijacking and the idea is they

1205
00:41:21,000 --> 00:41:22,980
can hijack all the operations in the

1206
00:41:22,980 --> 00:41:25,320
registry without actually registering a

1207
00:41:25,320 --> 00:41:26,339
callback for it

1208
00:41:26,339 --> 00:41:28,800
so what we're looking at here is this is

1209
00:41:28,800 --> 00:41:31,380
a memory sample infected with this

1210
00:41:31,380 --> 00:41:33,300
technique but we're not seeing it on

1211
00:41:33,300 --> 00:41:34,560
this slide this is just to illustrate

1212
00:41:34,560 --> 00:41:36,720
something so it's called Hive list we're

1213
00:41:36,720 --> 00:41:38,760
enumerating all the registry hives as

1214
00:41:38,760 --> 00:41:40,920
Windows keeps them in memory obviously

1215
00:41:40,920 --> 00:41:42,960
the registry is consulted all the time

1216
00:41:42,960 --> 00:41:44,820
so Windows doesn't go to disk back and

1217
00:41:44,820 --> 00:41:47,220
forth multiple times a second for it so

1218
00:41:47,220 --> 00:41:49,260
it has a cache of all the registry hives

1219
00:41:49,260 --> 00:41:52,320
and all their stored data in memory and

1220
00:41:52,320 --> 00:41:54,240
with volatility you can inspect those

1221
00:41:54,240 --> 00:41:55,980
hives you can expect all the keys in

1222
00:41:55,980 --> 00:41:58,500
data but the interesting thing is every

1223
00:41:58,500 --> 00:42:01,020
Hive that's listed here is represented

1224
00:42:01,020 --> 00:42:02,640
by one of these data structures in

1225
00:42:02,640 --> 00:42:04,380
memory and even if you're not a

1226
00:42:04,380 --> 00:42:06,660
programmer just follow along the idea is

1227
00:42:06,660 --> 00:42:08,640
the data structure is called Hive so

1228
00:42:08,640 --> 00:42:10,800
there's one hi for each of these lines

1229
00:42:10,800 --> 00:42:12,420
so you can see like the software Hive

1230
00:42:12,420 --> 00:42:15,420
system Hive Sam Hive and so on and then

1231
00:42:15,420 --> 00:42:17,520
inside of that data structure so as part

1232
00:42:17,520 --> 00:42:20,160
of each of these things is a get sell

1233
00:42:20,160 --> 00:42:21,780
routine pointer which is what's called

1234
00:42:21,780 --> 00:42:23,339
when you try to do something with that

1235
00:42:23,339 --> 00:42:25,740
registry Hive we try to enumerate a key

1236
00:42:25,740 --> 00:42:27,900
write a key enumerator value and so on

1237
00:42:27,900 --> 00:42:29,940
so if you control this call you control

1238
00:42:29,940 --> 00:42:31,440
the registry and you can hide everything

1239
00:42:31,440 --> 00:42:33,480
you want just like you can with the

1240
00:42:33,480 --> 00:42:34,619
Callback

1241
00:42:34,619 --> 00:42:36,960
so we have a new plugin in volatility

1242
00:42:36,960 --> 00:42:38,880
called get cell routine

1243
00:42:38,880 --> 00:42:41,460
it it from a programmatic standpoint

1244
00:42:41,460 --> 00:42:44,040
walks this list it checks the get sell

1245
00:42:44,040 --> 00:42:47,099
routine number for every Hive and if the

1246
00:42:47,099 --> 00:42:49,079
Handler for that points to anywhere but

1247
00:42:49,079 --> 00:42:51,420
the kernel it reports it so you can see

1248
00:42:51,420 --> 00:42:53,520
in this case the system Hive is hooked

1249
00:42:53,520 --> 00:42:55,920
it's pointing to a module called CRT sys

1250
00:42:55,920 --> 00:42:58,079
and this module is not hidden this is

1251
00:42:58,079 --> 00:42:59,400
one of the few root kits that driver

1252
00:42:59,400 --> 00:43:01,500
module wouldn't see right away but it

1253
00:43:01,500 --> 00:43:02,640
doesn't matter because it should be in

1254
00:43:02,640 --> 00:43:04,380
the kernel anyway this is the Handler

1255
00:43:04,380 --> 00:43:06,180
you can start your reverse engineering

1256
00:43:06,180 --> 00:43:09,180
so the end result of this is we wanted

1257
00:43:09,180 --> 00:43:10,560
to make sure volatility and our

1258
00:43:10,560 --> 00:43:12,480
techniques could find every rootkit

1259
00:43:12,480 --> 00:43:14,640
technique out there like normal we had

1260
00:43:14,640 --> 00:43:15,960
to update some plugins we had to write

1261
00:43:15,960 --> 00:43:17,460
some new plugins we learned a lot along

1262
00:43:17,460 --> 00:43:20,339
the way and that was the results of it I

1263
00:43:20,339 --> 00:43:21,540
only have a couple minutes left but

1264
00:43:21,540 --> 00:43:22,980
before questions you might have noticed

1265
00:43:22,980 --> 00:43:25,079
some slides had these numbers in them

1266
00:43:25,079 --> 00:43:28,200
like 16 17 and so on the last slide

1267
00:43:28,200 --> 00:43:30,240
which will be online is all of those

1268
00:43:30,240 --> 00:43:31,680
references so if you want to read about

1269
00:43:31,680 --> 00:43:33,780
all the root kits and DSE stuff that

1270
00:43:33,780 --> 00:43:35,880
came out you can email me I can send it

1271
00:43:35,880 --> 00:43:37,380
to you or the conference will post it

1272
00:43:37,380 --> 00:43:38,940
online also

1273
00:43:38,940 --> 00:43:40,619
uh thank you for attending any questions

1274
00:43:40,619 --> 00:43:42,850
or anything

1275
00:43:42,850 --> 00:43:52,560
[Applause]

1276
00:43:52,560 --> 00:43:55,560
language

1277
00:43:59,760 --> 00:44:02,520
yeah send me an email because uh so at

1278
00:44:02,520 --> 00:44:04,079
velocity where I work we actually have a

1279
00:44:04,079 --> 00:44:06,780
person who spends a significant amount

1280
00:44:06,780 --> 00:44:08,220
of time making like proof of concept

1281
00:44:08,220 --> 00:44:10,200
stuff for us to test on also and like

1282
00:44:10,200 --> 00:44:12,480
modifying them and I'm not going to call

1283
00:44:12,480 --> 00:44:13,560
me out I probably don't remember I'll

1284
00:44:13,560 --> 00:44:15,300
stop ahead anyway but some claim support

1285
00:44:15,300 --> 00:44:16,980
for like unlinking processes and stuff

1286
00:44:16,980 --> 00:44:18,599
on Windows 10 which like isn't a thing

1287
00:44:18,599 --> 00:44:20,460
like that'll blue screen so if you shoot

1288
00:44:20,460 --> 00:44:21,599
me an email

1289
00:44:21,599 --> 00:44:23,099
um dfir you can send it to my company

1290
00:44:23,099 --> 00:44:24,960
one I can send you the projects that we

1291
00:44:24,960 --> 00:44:27,720
have like use as a base to make proof of

1292
00:44:27,720 --> 00:44:29,460
Concepts that I know work on Windows 10

1293
00:44:29,460 --> 00:44:31,500
and if you have even like Visual Studio

1294
00:44:31,500 --> 00:44:34,140
Community you could get them uh compiled

1295
00:44:34,140 --> 00:44:35,280
and then you would just have to turn on

1296
00:44:35,280 --> 00:44:36,599
test signing on your machine and then

1297
00:44:36,599 --> 00:44:39,240
the driver would load and stuff so thank

1298
00:44:39,240 --> 00:44:41,400
you no problem any other questions that

1299
00:44:41,400 --> 00:44:45,680
there's a light so I don't see much yes

1300
00:44:51,619 --> 00:44:55,020
most of them I get from fire so some of

1301
00:44:55,020 --> 00:44:57,480
them are customer samples like that we

1302
00:44:57,480 --> 00:44:58,859
just changed the addresses and things

1303
00:44:58,859 --> 00:45:00,540
like that but a lot of them are on

1304
00:45:00,540 --> 00:45:02,880
virustotal and so

1305
00:45:02,880 --> 00:45:04,140
um if there are specific ones you're

1306
00:45:04,140 --> 00:45:05,760
interested in I can double check and

1307
00:45:05,760 --> 00:45:08,040
probably get you a copy uh you'll want

1308
00:45:08,040 --> 00:45:09,960
to use osr loader it's normally how we

1309
00:45:09,960 --> 00:45:11,400
do it it's a software tool where you

1310
00:45:11,400 --> 00:45:13,319
give it a path to a driver it creates

1311
00:45:13,319 --> 00:45:15,000
the service loaded and all of that and

1312
00:45:15,000 --> 00:45:16,800
then you can do it I have one minute

1313
00:45:16,800 --> 00:45:18,359
left I'll be around a few minutes after

1314
00:45:18,359 --> 00:45:19,920
anyway say we have a super quick

1315
00:45:19,920 --> 00:45:22,760
question yes

1316
00:45:23,760 --> 00:45:26,839
I can't hear them

1317
00:45:30,000 --> 00:45:32,760
no I mean because we we have a bunch of

1318
00:45:32,760 --> 00:45:34,859
VMS that we use from like early Windows

1319
00:45:34,859 --> 00:45:36,599
10 and then some that update all the

1320
00:45:36,599 --> 00:45:38,460
time and we test them out on the same

1321
00:45:38,460 --> 00:45:41,040
ones the only time it falls apart which

1322
00:45:41,040 --> 00:45:42,540
is like Windows basically getting lucky

1323
00:45:42,540 --> 00:45:44,160
is sometimes some of these things

1324
00:45:44,160 --> 00:45:46,500
operations require like uh

1325
00:45:46,500 --> 00:45:48,359
non-documented data structures so the

1326
00:45:48,359 --> 00:45:49,859
rootkit's coded like if I'm running on

1327
00:45:49,859 --> 00:45:51,839
this version of like subversion release

1328
00:45:51,839 --> 00:45:53,520
of Windows 10 do this this release and

1329
00:45:53,520 --> 00:45:55,680
then Windows just gets like like newer

1330
00:45:55,680 --> 00:45:57,480
than the malware supports so it doesn't

1331
00:45:57,480 --> 00:45:59,520
work but theoretically if the if that

1332
00:45:59,520 --> 00:46:00,900
malware was updated with the newer

1333
00:46:00,900 --> 00:46:02,700
offsets it would work so it's not like a

1334
00:46:02,700 --> 00:46:04,140
protection fix it's just the malware

1335
00:46:04,140 --> 00:46:06,599
needs to get updated so which is why we

1336
00:46:06,599 --> 00:46:08,400
do the proof of concept stuff to like

1337
00:46:08,400 --> 00:46:11,819
our own code to test it so

1338
00:46:11,819 --> 00:46:14,060
foreign

1339
00:46:20,060 --> 00:46:22,260
because it's like boring when we're

1340
00:46:22,260 --> 00:46:24,060
doing trainings or like even internal

1341
00:46:24,060 --> 00:46:26,339
stuff to always see like see user Andrew

1342
00:46:26,339 --> 00:46:28,440
whatever so we just spin up like AWS

1343
00:46:28,440 --> 00:46:30,180
stuff all the time and infected take a

1344
00:46:30,180 --> 00:46:32,040
memory sample turn the instance down it

1345
00:46:32,040 --> 00:46:33,960
doesn't it doesn't I mean it's still

1346
00:46:33,960 --> 00:46:35,940
windows or Linux or whatever it is I've

1347
00:46:35,940 --> 00:46:37,500
never touched Mac in the cloud so I'll

1348
00:46:37,500 --> 00:46:39,720
clarify that but I've done everything

1349
00:46:39,720 --> 00:46:42,660
yeah I've used uh like Windows and Linux

1350
00:46:42,660 --> 00:46:44,099
I mean like it whatever the cloud

1351
00:46:44,099 --> 00:46:46,380
provider is isn't like inspecting your

1352
00:46:46,380 --> 00:46:49,020
VM to that level to stop the maybe if he

1353
00:46:49,020 --> 00:46:50,220
threw it on like an S3 bucket

1354
00:46:50,220 --> 00:46:51,599
unencrypted I don't know maybe something

1355
00:46:51,599 --> 00:46:53,640
would get scanned but like inside the

1356
00:46:53,640 --> 00:46:55,619
actual instance no one like no cloud

1357
00:46:55,619 --> 00:46:58,700
provider changes anything

1358
00:47:05,099 --> 00:47:06,540
okay yeah that would be cool let me know

1359
00:47:06,540 --> 00:47:08,760
I'm gonna be around I have a flight a

1360
00:47:08,760 --> 00:47:09,839
little later today but I'll be around

1361
00:47:09,839 --> 00:47:11,520
I'm not like running away right after

1362
00:47:11,520 --> 00:47:13,560
this so

1363
00:47:13,560 --> 00:47:16,400
thank you all again

1364
00:47:18,430 --> 00:47:22,520
[Applause]

