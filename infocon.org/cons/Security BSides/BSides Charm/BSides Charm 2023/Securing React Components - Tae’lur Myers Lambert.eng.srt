1
00:00:00,120 --> 00:00:03,120
foreign

2
00:00:06,020 --> 00:00:21,939
[Music]

3
00:00:22,400 --> 00:00:25,680
hi my name is Taylor Alexis I am a

4
00:00:25,680 --> 00:00:27,119
front-end developer and application

5
00:00:27,119 --> 00:00:30,359
security Enthusiast and today I will be

6
00:00:30,359 --> 00:00:32,340
talking about talking about securing

7
00:00:32,340 --> 00:00:35,300
react components

8
00:00:37,140 --> 00:00:38,820
all right so the topics that I'll be

9
00:00:38,820 --> 00:00:40,980
going over is the importance of secure

10
00:00:40,980 --> 00:00:42,899
coding and really talk about like my

11
00:00:42,899 --> 00:00:45,440
journey as a web developer getting into

12
00:00:45,440 --> 00:00:48,300
a secure coding and why I became so

13
00:00:48,300 --> 00:00:50,100
passionate about it and then also going

14
00:00:50,100 --> 00:00:51,899
into the shift left approach that I've

15
00:00:51,899 --> 00:00:54,180
learned about as well as threat modeling

16
00:00:54,180 --> 00:00:58,559
and how to identify and remediate any

17
00:00:58,559 --> 00:01:00,780
vulnerabilities that are found in

18
00:01:00,780 --> 00:01:04,218
react.js applications

19
00:01:04,379 --> 00:01:07,460
so who am I again I'm Taylor

20
00:01:07,460 --> 00:01:09,780
and I'm based out of Jacksonville

21
00:01:09,780 --> 00:01:13,200
Florida I also am a content creator I've

22
00:01:13,200 --> 00:01:15,479
written tutorials on JavaScript Python

23
00:01:15,479 --> 00:01:17,760
and so now I've just written My First

24
00:01:17,760 --> 00:01:22,320
Security posts on Olas top 10. and uh my

25
00:01:22,320 --> 00:01:24,680
passion is to help people from

26
00:01:24,680 --> 00:01:26,759
non-traditional backgrounds get into

27
00:01:26,759 --> 00:01:29,580
Tech learn how to code and now uh

28
00:01:29,580 --> 00:01:30,900
getting really passionate about the king

29
00:01:30,900 --> 00:01:33,619
web applications

30
00:01:34,920 --> 00:01:37,439
so firstly I wanted to talk about and

31
00:01:37,439 --> 00:01:40,500
discuss why is secure coding important

32
00:01:40,500 --> 00:01:44,100
uh for me personally throughout all of

33
00:01:44,100 --> 00:01:46,079
my interviews and jobs that I've had as

34
00:01:46,079 --> 00:01:47,460
a software developer I've never been

35
00:01:47,460 --> 00:01:50,340
asked about secure coding and I didn't

36
00:01:50,340 --> 00:01:52,799
even know what secure coding even was I

37
00:01:52,799 --> 00:01:54,180
just know about

38
00:01:54,180 --> 00:01:56,100
you know all they care about really is

39
00:01:56,100 --> 00:01:58,259
like can you like push the codes like

40
00:01:58,259 --> 00:02:00,420
production and then if there are errors

41
00:02:00,420 --> 00:02:02,520
then you know fix it when I guess it

42
00:02:02,520 --> 00:02:05,520
happens like when they discover it

43
00:02:05,520 --> 00:02:06,119
um

44
00:02:06,119 --> 00:02:09,560
but the thing is that is a critical

45
00:02:09,560 --> 00:02:12,840
misstep that has been uh spread of like

46
00:02:12,840 --> 00:02:14,220
amongst like the software development

47
00:02:14,220 --> 00:02:15,660
community

48
00:02:15,660 --> 00:02:18,239
and I believe there was an IBM report

49
00:02:18,239 --> 00:02:22,920
that stated that there is I think 94 of

50
00:02:22,920 --> 00:02:24,840
data breaches happen due to insecure

51
00:02:24,840 --> 00:02:26,700
coding and as you may know there's a lot

52
00:02:26,700 --> 00:02:29,340
of like attacks that are happening

53
00:02:29,340 --> 00:02:31,680
um due to uh

54
00:02:31,680 --> 00:02:34,739
due to like weak like apis

55
00:02:34,739 --> 00:02:36,420
um we're all like weekly implements like

56
00:02:36,420 --> 00:02:38,700
apis and whatnot so I wanted to like go

57
00:02:38,700 --> 00:02:41,519
over specifically how to prevent those

58
00:02:41,519 --> 00:02:42,900
vulnerabilities from occurring in

59
00:02:42,900 --> 00:02:45,060
reactions applications because react is

60
00:02:45,060 --> 00:02:47,160
the most like well-known and most like

61
00:02:47,160 --> 00:02:49,260
used front-end library that is used in

62
00:02:49,260 --> 00:02:53,000
millions of web applications

63
00:02:53,700 --> 00:02:55,620
and so first I wanted to go into threat

64
00:02:55,620 --> 00:02:58,379
modeling the first steps when you are

65
00:02:58,379 --> 00:03:01,980
trying to create a secure application is

66
00:03:01,980 --> 00:03:04,440
a really start from the beginning before

67
00:03:04,440 --> 00:03:07,860
you code and take the design of like

68
00:03:07,860 --> 00:03:09,959
whatever feature or web app that you are

69
00:03:09,959 --> 00:03:12,599
trying to build or create and try to

70
00:03:12,599 --> 00:03:14,459
identify like the different like attack

71
00:03:14,459 --> 00:03:16,920
points and weaknesses that are like

72
00:03:16,920 --> 00:03:20,040
founds like in that application and

73
00:03:20,040 --> 00:03:22,319
trying to identify those things first

74
00:03:22,319 --> 00:03:24,060
before

75
00:03:24,060 --> 00:03:26,000
you uh

76
00:03:26,000 --> 00:03:30,239
I'm so sorry I'm so nervous I'm sorry

77
00:03:30,239 --> 00:03:31,319
um

78
00:03:31,319 --> 00:03:33,060
okay

79
00:03:33,060 --> 00:03:35,519
right

80
00:03:35,519 --> 00:03:38,280
thank you

81
00:03:38,280 --> 00:03:40,620
thank you very much yeah yeah at least

82
00:03:40,620 --> 00:03:43,080
the slides are pretty but

83
00:03:43,080 --> 00:03:45,060
um yeah so the first thing you want to

84
00:03:45,060 --> 00:03:47,879
do is try to identify like any like uh

85
00:03:47,879 --> 00:03:49,379
parts of your application that may hold

86
00:03:49,379 --> 00:03:52,379
critical data and trying to see if you

87
00:03:52,379 --> 00:03:56,959
are using uh correct uh or secure

88
00:03:56,959 --> 00:03:59,760
encryption algorithms

89
00:03:59,760 --> 00:04:01,620
um and not using any that are like

90
00:04:01,620 --> 00:04:04,620
deprecated and not in use like md5 or

91
00:04:04,620 --> 00:04:08,519
something for like hashing and trying to

92
00:04:08,519 --> 00:04:10,799
get those like identified and then try

93
00:04:10,799 --> 00:04:13,439
to fix those vulnerabilities and with

94
00:04:13,439 --> 00:04:15,299
prioritizing risk that means that trying

95
00:04:15,299 --> 00:04:16,798
to identify like which ones are the most

96
00:04:16,798 --> 00:04:20,478
critical to fix because it's not really

97
00:04:20,478 --> 00:04:23,220
realistic to try to eliminate every

98
00:04:23,220 --> 00:04:24,720
single

99
00:04:24,720 --> 00:04:28,259
um point of concern or risk and so you

100
00:04:28,259 --> 00:04:30,000
try to like just reduce as much as you

101
00:04:30,000 --> 00:04:30,840
can

102
00:04:30,840 --> 00:04:33,419
and the whole thing with

103
00:04:33,419 --> 00:04:34,139
um

104
00:04:34,139 --> 00:04:37,919
with secure coding and with a shift left

105
00:04:37,919 --> 00:04:39,960
approach that I want to talk about is

106
00:04:39,960 --> 00:04:43,380
that the whole idea is to try to make

107
00:04:43,380 --> 00:04:45,360
security an integral part of the

108
00:04:45,360 --> 00:04:46,919
software development life cycle rather

109
00:04:46,919 --> 00:04:48,960
than as an afterthought so remember how

110
00:04:48,960 --> 00:04:51,120
I was talking about earlier that as a

111
00:04:51,120 --> 00:04:52,380
funding developer I was never asked

112
00:04:52,380 --> 00:04:54,120
about like insight about like secure

113
00:04:54,120 --> 00:04:56,340
coding practices well the thing with the

114
00:04:56,340 --> 00:04:58,080
shift left approach which I learned from

115
00:04:58,080 --> 00:05:00,180
Bob and Alice learn application security

116
00:05:00,180 --> 00:05:02,699
by Tanya

117
00:05:02,699 --> 00:05:05,400
um uh the thing with what I learned

118
00:05:05,400 --> 00:05:07,919
about that is what you want to do is you

119
00:05:07,919 --> 00:05:09,840
want to make sure that the whole

120
00:05:09,840 --> 00:05:11,340
responsibility of security is not just

121
00:05:11,340 --> 00:05:13,440
relying on the security teams the

122
00:05:13,440 --> 00:05:14,940
developers who are also that are working

123
00:05:14,940 --> 00:05:16,560
on the code every single day pushing it

124
00:05:16,560 --> 00:05:19,380
out testing it they should be aware of

125
00:05:19,380 --> 00:05:22,320
like the basics of secure coding so like

126
00:05:22,320 --> 00:05:24,900
it just lessens the the burden on

127
00:05:24,900 --> 00:05:26,940
everyone and also helps people helps

128
00:05:26,940 --> 00:05:28,680
gives like a lot more eyes to the

129
00:05:28,680 --> 00:05:30,900
application and so you can find as many

130
00:05:30,900 --> 00:05:34,380
votability as it can because uh I think

131
00:05:34,380 --> 00:05:36,840
some developers think like you'll see

132
00:05:36,840 --> 00:05:39,240
people talk about like how

133
00:05:39,240 --> 00:05:42,360
um that comments like are important or

134
00:05:42,360 --> 00:05:44,520
they'll talk about a

135
00:05:44,520 --> 00:05:46,560
you know just like when it comes to like

136
00:05:46,560 --> 00:05:48,180
testing how like that may not be as

137
00:05:48,180 --> 00:05:50,100
important but the thing is like you want

138
00:05:50,100 --> 00:05:52,680
to test your code like as you go because

139
00:05:52,680 --> 00:05:55,020
then at the very end you've already

140
00:05:55,020 --> 00:05:57,180
addressed like everything else because

141
00:05:57,180 --> 00:05:58,800
the thing with

142
00:05:58,800 --> 00:05:59,940
um

143
00:05:59,940 --> 00:06:02,940
with code is that once it's pushed

144
00:06:02,940 --> 00:06:04,800
and you do find vulnerabilities that you

145
00:06:04,800 --> 00:06:06,539
did not test for and find early on in

146
00:06:06,539 --> 00:06:08,699
the process the thing is sometimes

147
00:06:08,699 --> 00:06:09,720
because they're baked into the

148
00:06:09,720 --> 00:06:10,979
application that require that can

149
00:06:10,979 --> 00:06:12,539
require you to have to rebuild the whole

150
00:06:12,539 --> 00:06:13,740
application all over again and who

151
00:06:13,740 --> 00:06:17,039
really wants to do that so

152
00:06:17,039 --> 00:06:20,580
um another thing to do is performing uh

153
00:06:20,580 --> 00:06:23,639
besides the like secure code reviews

154
00:06:23,639 --> 00:06:24,840
um also doing like vulnerability

155
00:06:24,840 --> 00:06:28,520
assessments or penetration testing

156
00:06:29,460 --> 00:06:30,900
all right so now I'm going to go into

157
00:06:30,900 --> 00:06:33,360
react.js and what that means like what

158
00:06:33,360 --> 00:06:36,360
they um what that is uh

159
00:06:36,360 --> 00:06:38,460
for those who may not be exposed to

160
00:06:38,460 --> 00:06:40,440
front end development

161
00:06:40,440 --> 00:06:43,139
um you're lucky but uh

162
00:06:43,139 --> 00:06:45,780
um so react.js is a

163
00:06:45,780 --> 00:06:47,880
it is a front-end library that was built

164
00:06:47,880 --> 00:06:51,539
by the Facebook team and the whole idea

165
00:06:51,539 --> 00:06:54,180
and concept behinds react.js is that

166
00:06:54,180 --> 00:06:56,880
it's it's dealing or it's con it

167
00:06:56,880 --> 00:06:58,620
revolves around component driven

168
00:06:58,620 --> 00:07:01,380
architecture so what components are is

169
00:07:01,380 --> 00:07:03,360
that they are pieces of reusable code

170
00:07:03,360 --> 00:07:04,740
that you can use everywhere in an

171
00:07:04,740 --> 00:07:06,120
application or in multiple applications

172
00:07:06,120 --> 00:07:08,940
so that really boosts like efficiency

173
00:07:08,940 --> 00:07:11,639
um and that is why it's become like the

174
00:07:11,639 --> 00:07:13,979
most like well-known UI Library

175
00:07:13,979 --> 00:07:16,380
and because it is the most well-known UI

176
00:07:16,380 --> 00:07:18,780
Library like that means that security

177
00:07:18,780 --> 00:07:21,300
isn't the utmost concern

178
00:07:21,300 --> 00:07:24,360
and so the thing about reactions is that

179
00:07:24,360 --> 00:07:26,580
they use the virtual Dom and what that

180
00:07:26,580 --> 00:07:28,440
means that they dynamically update the

181
00:07:28,440 --> 00:07:30,180
contents of a web page

182
00:07:30,180 --> 00:07:32,280
and so that

183
00:07:32,280 --> 00:07:32,880
um

184
00:07:32,880 --> 00:07:34,680
it's used a lot for like single page

185
00:07:34,680 --> 00:07:36,419
like applications so instead of having

186
00:07:36,419 --> 00:07:38,759
to uh

187
00:07:38,759 --> 00:07:40,740
like a typical like traditional like web

188
00:07:40,740 --> 00:07:42,300
application

189
00:07:42,300 --> 00:07:44,460
you can use a single page application

190
00:07:44,460 --> 00:07:46,800
where like it will like update the

191
00:07:46,800 --> 00:07:48,780
contents like as you like go and as you

192
00:07:48,780 --> 00:07:49,620
scroll

193
00:07:49,620 --> 00:07:51,240
and it's used by companies like Netflix

194
00:07:51,240 --> 00:07:53,880
Facebook Airbnb

195
00:07:53,880 --> 00:07:55,259
and more

196
00:07:55,259 --> 00:07:57,240
and now let's discuss vulnerabilities

197
00:07:57,240 --> 00:08:01,039
attacks and ways to remediate

198
00:08:01,259 --> 00:08:03,180
so the first concern that I wanted to

199
00:08:03,180 --> 00:08:04,620
address was outdated and vulnerable

200
00:08:04,620 --> 00:08:06,900
components so as a front-end developer I

201
00:08:06,900 --> 00:08:11,639
know that uh about 79 of third-party

202
00:08:11,639 --> 00:08:13,080
code that are used in software

203
00:08:13,080 --> 00:08:15,060
applications are never updated and

204
00:08:15,060 --> 00:08:16,620
that's a critical critical concern

205
00:08:16,620 --> 00:08:18,660
because as you may know

206
00:08:18,660 --> 00:08:20,039
um

207
00:08:20,039 --> 00:08:22,340
patches are definitely essential

208
00:08:22,340 --> 00:08:24,900
otherwise like there can be because

209
00:08:24,900 --> 00:08:26,639
patches they come out with light

210
00:08:26,639 --> 00:08:28,620
applications and you have to update your

211
00:08:28,620 --> 00:08:31,440
code to protect from like any kind of

212
00:08:31,440 --> 00:08:33,539
like data leakage or any kind of attacks

213
00:08:33,539 --> 00:08:34,679
they may have like been going on and

214
00:08:34,679 --> 00:08:37,500
everything and the thing about react.js

215
00:08:37,500 --> 00:08:39,240
applications is that you often use a lot

216
00:08:39,240 --> 00:08:41,159
of third-party code

217
00:08:41,159 --> 00:08:41,820
um

218
00:08:41,820 --> 00:08:44,039
and so that will just like expand like

219
00:08:44,039 --> 00:08:46,920
that expands the attack surface

220
00:08:46,920 --> 00:08:48,420
um and it makes it susceptible to supply

221
00:08:48,420 --> 00:08:49,860
chain attacks so always keep your

222
00:08:49,860 --> 00:08:51,360
dependencies in third party libraries

223
00:08:51,360 --> 00:08:53,040
updated you can also use tools like

224
00:08:53,040 --> 00:08:55,080
dependabot or dependency check that will

225
00:08:55,080 --> 00:08:57,060
automate the process of finding those

226
00:08:57,060 --> 00:08:59,399
vulnerabilities like in your code

227
00:08:59,399 --> 00:09:00,600
um in the third party code and

228
00:09:00,600 --> 00:09:03,320
everything like that

229
00:09:03,600 --> 00:09:05,399
and another way to prevent software

230
00:09:05,399 --> 00:09:08,820
Integrity failure is with SRI hashes so

231
00:09:08,820 --> 00:09:10,680
sub resource Integrity is where you can

232
00:09:10,680 --> 00:09:11,640
like

233
00:09:11,640 --> 00:09:13,500
when you're importing like code into

234
00:09:13,500 --> 00:09:16,140
like your applications you can use the

235
00:09:16,140 --> 00:09:18,480
Integrity attribute to specify

236
00:09:18,480 --> 00:09:20,700
um to just ensure like the Integrity

237
00:09:20,700 --> 00:09:22,260
like of the files that you're importing

238
00:09:22,260 --> 00:09:24,959
so you can generate a SRI hash from a

239
00:09:24,959 --> 00:09:28,080
website like SRI hash.org and for

240
00:09:28,080 --> 00:09:30,480
instance like right here I have the

241
00:09:30,480 --> 00:09:32,040
script tags that you would need to

242
00:09:32,040 --> 00:09:34,680
import bootstrap which is a common uh UI

243
00:09:34,680 --> 00:09:37,680
Library that's used in react

244
00:09:37,680 --> 00:09:41,459
applications and so uh the reason why

245
00:09:41,459 --> 00:09:43,440
this is important is let's say for

246
00:09:43,440 --> 00:09:46,680
instance someone does do the Bold effort

247
00:09:46,680 --> 00:09:49,440
of hacking

248
00:09:49,440 --> 00:09:50,220
um

249
00:09:50,220 --> 00:09:53,100
and modifying the code of like jQuery

250
00:09:53,100 --> 00:09:55,920
for instance or bootstrap and you're

251
00:09:55,920 --> 00:09:58,500
using that code in your applications the

252
00:09:58,500 --> 00:10:00,839
thing about that is that

253
00:10:00,839 --> 00:10:03,300
because like when a website goes when a

254
00:10:03,300 --> 00:10:05,940
user goes to your website their browser

255
00:10:05,940 --> 00:10:07,320
is going to be like reading that code

256
00:10:07,320 --> 00:10:10,260
and if it's and if that code has been

257
00:10:10,260 --> 00:10:11,519
modified by the attacker that

258
00:10:11,519 --> 00:10:13,560
third-party code then it then you're as

259
00:10:13,560 --> 00:10:15,899
your user can be susceptible to any kind

260
00:10:15,899 --> 00:10:19,019
of attack so Integrity ensures that the

261
00:10:19,019 --> 00:10:20,519
exact file that's been imported is

262
00:10:20,519 --> 00:10:21,839
exactly what it was supposed to be

263
00:10:21,839 --> 00:10:25,519
otherwise it will not run

264
00:10:26,700 --> 00:10:28,740
another thing that I've also learned as

265
00:10:28,740 --> 00:10:30,180
a friend developer with when it comes to

266
00:10:30,180 --> 00:10:31,860
secure coding especially uh for

267
00:10:31,860 --> 00:10:33,560
front-end development is to never trust

268
00:10:33,560 --> 00:10:36,240
client-side input

269
00:10:36,240 --> 00:10:36,959
um

270
00:10:36,959 --> 00:10:39,839
so lack of input validation can lead to

271
00:10:39,839 --> 00:10:42,959
injection attacks like SQL injections

272
00:10:42,959 --> 00:10:44,399
um which has been my favorite thing that

273
00:10:44,399 --> 00:10:46,980
I've learned as well as cross-site

274
00:10:46,980 --> 00:10:49,740
scripting and so what you want to do is

275
00:10:49,740 --> 00:10:52,260
try to use input validation and

276
00:10:52,260 --> 00:10:54,240
reactions comes with that as well as

277
00:10:54,240 --> 00:10:57,079
like other tools like domperifier

278
00:10:57,079 --> 00:11:00,600
validator.js and you're trying to um

279
00:11:00,600 --> 00:11:03,959
prevent the usage of strings or

280
00:11:03,959 --> 00:11:05,700
characters that can be used to break

281
00:11:05,700 --> 00:11:08,339
your code like for instance as you may

282
00:11:08,339 --> 00:11:11,940
know if you type in

283
00:11:11,940 --> 00:11:13,920
we try to break like a SQL query like in

284
00:11:13,920 --> 00:11:17,100
an input form that can cause like a SQL

285
00:11:17,100 --> 00:11:19,920
injection air to like or SQL error to

286
00:11:19,920 --> 00:11:21,240
pop up like on the web page and that can

287
00:11:21,240 --> 00:11:24,240
give the attacker the goal the go-ahead

288
00:11:24,240 --> 00:11:26,760
to just uh to keep like enumerating and

289
00:11:26,760 --> 00:11:28,440
finding like more information and trying

290
00:11:28,440 --> 00:11:30,959
to attack your application and directly

291
00:11:30,959 --> 00:11:34,320
send SQL queries to the database and

292
00:11:34,320 --> 00:11:36,000
interact with it

293
00:11:36,000 --> 00:11:36,540
um

294
00:11:36,540 --> 00:11:40,160
also input validation can also uh strong

295
00:11:40,160 --> 00:11:43,200
a valid input validation can also

296
00:11:43,200 --> 00:11:45,839
protect against past traversal attacks

297
00:11:45,839 --> 00:11:48,300
where a user

298
00:11:48,300 --> 00:11:51,959
can use the can execute a dot dot slash

299
00:11:51,959 --> 00:11:55,440
attack and actually navigate through the

300
00:11:55,440 --> 00:11:58,440
server of that's hosting your web

301
00:11:58,440 --> 00:12:00,899
application and access documents that

302
00:12:00,899 --> 00:12:02,640
you don't want to be found like that you

303
00:12:02,640 --> 00:12:07,339
don't want to be taken or used for

304
00:12:08,339 --> 00:12:09,779
um and then also I will be going into

305
00:12:09,779 --> 00:12:11,940
cross-site scripting so cross-site

306
00:12:11,940 --> 00:12:13,920
scripting as you may already know that

307
00:12:13,920 --> 00:12:15,420
is when you're able to inject malicious

308
00:12:15,420 --> 00:12:17,279
scripts into a website and it gets

309
00:12:17,279 --> 00:12:19,740
executed by a victim's browser

310
00:12:19,740 --> 00:12:21,779
for instance like one thing I was able

311
00:12:21,779 --> 00:12:23,100
to do

312
00:12:23,100 --> 00:12:26,519
um was a stored cross-site scripting so

313
00:12:26,519 --> 00:12:28,380
giving a I mean obviously this was legal

314
00:12:28,380 --> 00:12:29,880
I wasn't really doing this on somebody's

315
00:12:29,880 --> 00:12:32,640
website like legally but

316
00:12:32,640 --> 00:12:36,779
um I learned that in a web application

317
00:12:36,779 --> 00:12:39,180
um that didn't have uh input validation

318
00:12:39,180 --> 00:12:42,180
there was so like in the web app you're

319
00:12:42,180 --> 00:12:44,339
given like a message box

320
00:12:44,339 --> 00:12:46,200
um to like type text in and you're able

321
00:12:46,200 --> 00:12:48,180
to submit a comment so what I was able

322
00:12:48,180 --> 00:12:49,740
to do was execute

323
00:12:49,740 --> 00:12:50,399
um

324
00:12:50,399 --> 00:12:54,000
some javascripts where I was able to uh

325
00:12:54,000 --> 00:12:56,399
every time like someone were to navigate

326
00:12:56,399 --> 00:12:58,019
to that page to view like those like

327
00:12:58,019 --> 00:13:00,660
list of comments my script was able to

328
00:13:00,660 --> 00:13:03,240
be automatically executed every single

329
00:13:03,240 --> 00:13:06,360
time that every single time and so um

330
00:13:06,360 --> 00:13:08,940
what you want to do uh to protect

331
00:13:08,940 --> 00:13:11,160
against that is of course like I said

332
00:13:11,160 --> 00:13:14,700
sanitize your input avoid dangerous HTML

333
00:13:14,700 --> 00:13:16,740
attributes like inner HTML and

334
00:13:16,740 --> 00:13:18,240
document.write which I'll be

335
00:13:18,240 --> 00:13:20,639
demonstrating shortly and also

336
00:13:20,639 --> 00:13:23,820
implementing content security policy

337
00:13:23,820 --> 00:13:27,600
so right here I have some code and what

338
00:13:27,600 --> 00:13:31,440
it's doing to really summarize is it's

339
00:13:31,440 --> 00:13:34,079
taking a text area

340
00:13:34,079 --> 00:13:36,360
like from like the form that I was just

341
00:13:36,360 --> 00:13:37,740
talking about with like the list of

342
00:13:37,740 --> 00:13:40,560
comments so like let's say your

343
00:13:40,560 --> 00:13:43,560
application lets a user input anything

344
00:13:43,560 --> 00:13:46,560
and it stores its and then it renders it

345
00:13:46,560 --> 00:13:47,399
back

346
00:13:47,399 --> 00:13:50,040
by using dangerously set 8 inner HTML

347
00:13:50,040 --> 00:13:51,899
what this does is it'll take whatever

348
00:13:51,899 --> 00:13:55,260
input and it'll execute it so

349
00:13:55,260 --> 00:13:56,880
if you were to get creative as an

350
00:13:56,880 --> 00:13:59,760
attacker you could have it um

351
00:13:59,760 --> 00:14:02,220
you could redirect it to another website

352
00:14:02,220 --> 00:14:04,440
or you could

353
00:14:04,440 --> 00:14:05,839
um

354
00:14:05,839 --> 00:14:07,860
deframe like the website if you wanted

355
00:14:07,860 --> 00:14:09,660
to so

356
00:14:09,660 --> 00:14:13,380
yeah another like simple like tip also

357
00:14:13,380 --> 00:14:15,980
is just to avoid error handling

358
00:14:15,980 --> 00:14:19,019
errors in your applications that makes

359
00:14:19,019 --> 00:14:20,579
both sense information so you may want

360
00:14:20,579 --> 00:14:22,920
to keep a generic error messages instead

361
00:14:22,920 --> 00:14:25,320
like for instance

362
00:14:25,320 --> 00:14:28,380
let's say you have an application and

363
00:14:28,380 --> 00:14:30,120
where you can register where a user can

364
00:14:30,120 --> 00:14:30,980
register

365
00:14:30,980 --> 00:14:33,300
and maybe they want to perform something

366
00:14:33,300 --> 00:14:35,339
like using an enumeration so they want

367
00:14:35,339 --> 00:14:39,000
to see if this user exists instead of if

368
00:14:39,000 --> 00:14:40,320
okay let's say they're trying to

369
00:14:40,320 --> 00:14:42,600
register a username Bob

370
00:14:42,600 --> 00:14:46,019
and there was like in let's say that

371
00:14:46,019 --> 00:14:48,360
there already is a username Bob that is

372
00:14:48,360 --> 00:14:49,500
already like registered like in the

373
00:14:49,500 --> 00:14:53,160
application some applications will a bad

374
00:14:53,160 --> 00:14:56,220
a way of presenting like an error

375
00:14:56,220 --> 00:14:58,980
message is to say that the username Bob

376
00:14:58,980 --> 00:15:00,660
like already exists what you could say

377
00:15:00,660 --> 00:15:01,740
is

378
00:15:01,740 --> 00:15:02,639
um

379
00:15:02,639 --> 00:15:04,800
a more like generic message of like try

380
00:15:04,800 --> 00:15:07,500
a different username

381
00:15:07,500 --> 00:15:09,300
um and then now I'm going to go and see

382
00:15:09,300 --> 00:15:11,160
the importance of Harding apis and react

383
00:15:11,160 --> 00:15:12,959
applications

384
00:15:12,959 --> 00:15:15,180
so uh just general best practice for

385
00:15:15,180 --> 00:15:17,459
using the apis because radioactive react

386
00:15:17,459 --> 00:15:20,160
applications interactive apis often what

387
00:15:20,160 --> 00:15:21,180
you want to do is try to implement

388
00:15:21,180 --> 00:15:24,899
access controls making sure that uh only

389
00:15:24,899 --> 00:15:27,180
authorized user able to access or

390
00:15:27,180 --> 00:15:28,380
interacts with

391
00:15:28,380 --> 00:15:29,100
um

392
00:15:29,100 --> 00:15:32,459
different API endpoints or parts of your

393
00:15:32,459 --> 00:15:34,500
application Implement login and

394
00:15:34,500 --> 00:15:36,240
monitoring for API Imports so you can

395
00:15:36,240 --> 00:15:39,600
track any activity that may be done

396
00:15:39,600 --> 00:15:40,440
um

397
00:15:40,440 --> 00:15:46,320
and also using Json web tokens and oauth

398
00:15:46,320 --> 00:15:50,600
for your authentication and using https

399
00:15:50,600 --> 00:15:53,519
to protect against

400
00:15:53,519 --> 00:15:54,959
um

401
00:15:54,959 --> 00:15:59,100
clear text being getting being retrieved

402
00:15:59,100 --> 00:16:02,399
from your application that may be uh

403
00:16:02,399 --> 00:16:05,120
sensitive information

404
00:16:05,339 --> 00:16:07,380
and so here are like listed resources

405
00:16:07,380 --> 00:16:10,019
that I use to learn about application

406
00:16:10,019 --> 00:16:12,600
security specifically for uh web

407
00:16:12,600 --> 00:16:16,139
development so I read Tanya's Bob and

408
00:16:16,139 --> 00:16:17,760
Alice learn application security book

409
00:16:17,760 --> 00:16:19,500
and then it's also support swiger web

410
00:16:19,500 --> 00:16:22,079
Security Academy and Pen tester lab and

411
00:16:22,079 --> 00:16:23,639
then I also have a blog post on oauth

412
00:16:23,639 --> 00:16:26,760
top 10. you can see on my website

413
00:16:26,760 --> 00:16:30,139
all right thank you

414
00:16:31,440 --> 00:16:35,069
[Applause]

