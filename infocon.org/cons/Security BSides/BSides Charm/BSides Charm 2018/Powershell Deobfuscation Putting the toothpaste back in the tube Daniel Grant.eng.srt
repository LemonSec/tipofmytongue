1
00:00:00,000 --> 00:00:04,799
and get<font color="#E5E5E5"> started</font><font color="#CCCCCC"> thank you all for coming</font>

2
00:00:02,360 --> 00:00:07,259
<font color="#E5E5E5">so a little bit about me I'm Daniel I'm</font>

3
00:00:04,799 --> 00:00:08,550
a<font color="#E5E5E5"> data scientist in game mainly focus on</font>

4
00:00:07,259 --> 00:00:10,469
malware classification and model

5
00:00:08,550 --> 00:00:12,300
evaluation<font color="#CCCCCC"> if you were here the</font><font color="#E5E5E5"> two</font>

6
00:00:10,469 --> 00:00:14,399
<font color="#E5E5E5">o'clock session on this track my</font>

7
00:00:12,300 --> 00:00:16,139
colleague Phil Roth presented<font color="#CCCCCC"> Ember</font>

8
00:00:14,400 --> 00:00:19,320
<font color="#CCCCCC">that's the sort of</font><font color="#E5E5E5"> stuff that I usually</font>

9
00:00:16,139 --> 00:00:20,970
<font color="#E5E5E5">deal</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> so in about this talk we're</font>

10
00:00:19,320 --> 00:00:23,130
<font color="#E5E5E5">gonna be talking about D obviating power</font>

11
00:00:20,970 --> 00:00:26,160
show<font color="#E5E5E5"> with the help of machine learning</font>

12
00:00:23,130 --> 00:00:27,810
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that's gonna be fun a little</font><font color="#CCCCCC"> bit of</font>

13
00:00:26,160 --> 00:00:31,830
motivation<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get us started</font>

14
00:00:27,810 --> 00:00:33,860
as<font color="#E5E5E5"> we heard in the</font><font color="#CCCCCC"> keynote today there's</font>

15
00:00:31,830 --> 00:00:36,059
this<font color="#E5E5E5"> trend about living off the land</font>

16
00:00:33,860 --> 00:00:38,790
<font color="#E5E5E5">PowerShell is</font><font color="#CCCCCC"> a pretty</font><font color="#E5E5E5"> powerful tool and</font>

17
00:00:36,059 --> 00:00:41,190
attackers<font color="#E5E5E5"> tend to use</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> because they</font>

18
00:00:38,790 --> 00:00:42,989
don't have<font color="#E5E5E5"> to drop a</font><font color="#CCCCCC"> binary on</font><font color="#E5E5E5"> disk</font><font color="#CCCCCC"> Avs</font>

19
00:00:41,190 --> 00:00:44,910
both traditional and machine learning

20
00:00:42,989 --> 00:00:46,529
<font color="#CCCCCC">abs are pretty good these</font><font color="#E5E5E5"> days and</font>

21
00:00:44,910 --> 00:00:48,328
they'll probably catch you if<font color="#E5E5E5"> you drop</font>

22
00:00:46,530 --> 00:00:50,370
something<font color="#E5E5E5"> but PowerShell you can get a</font>

23
00:00:48,329 --> 00:00:51,539
lot<font color="#E5E5E5"> of stuff done without actually</font>

24
00:00:50,370 --> 00:00:52,559
<font color="#E5E5E5">putting anything you can do it all in</font>

25
00:00:51,539 --> 00:00:54,420
<font color="#CCCCCC">memory</font>

26
00:00:52,559 --> 00:00:56,820
fortunately PowerShell commands can be

27
00:00:54,420 --> 00:00:59,160
<font color="#E5E5E5">logged and sometimes files are left</font>

28
00:00:56,820 --> 00:01:00,989
behind<font color="#CCCCCC"> PS scripts are left behind</font><font color="#E5E5E5"> so</font>

29
00:00:59,160 --> 00:01:02,459
security investors investigators like

30
00:01:00,989 --> 00:01:03,779
this because they can<font color="#E5E5E5"> inspect them to</font>

31
00:01:02,460 --> 00:01:05,850
see what the attacker<font color="#E5E5E5"> was up to</font>

32
00:01:03,780 --> 00:01:07,830
of course<font color="#E5E5E5"> attackers don't like making</font>

33
00:01:05,850 --> 00:01:09,360
<font color="#E5E5E5">things easy so a common technique is to</font>

34
00:01:07,830 --> 00:01:11,280
obfuscate and<font color="#CCCCCC"> then code these commands</font>

35
00:01:09,360 --> 00:01:14,310
just so it makes<font color="#CCCCCC"> it</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> much harder</font><font color="#E5E5E5"> for</font>

36
00:01:11,280 --> 00:01:17,100
<font color="#E5E5E5">an investigator</font><font color="#CCCCCC"> so a</font><font color="#E5E5E5"> little warning</font>

37
00:01:14,310 --> 00:01:19,170
before<font color="#E5E5E5"> we get</font><font color="#CCCCCC"> started I'm not a</font>

38
00:01:17,100 --> 00:01:21,119
<font color="#E5E5E5">PowerShell expert and I don't use</font><font color="#CCCCCC"> it in</font>

39
00:01:19,170 --> 00:01:22,340
my day-to-day research or<font color="#CCCCCC"> development so</font>

40
00:01:21,119 --> 00:01:26,369
I know what you're thinking

41
00:01:22,340 --> 00:01:28,500
great start<font color="#CCCCCC"> but</font><font color="#E5E5E5"> I'm gonna tell you why</font>

42
00:01:26,369 --> 00:01:32,490
that's<font color="#E5E5E5"> not a problem</font><font color="#CCCCCC"> I'm framing this as</font>

43
00:01:28,500 --> 00:01:35,520
<font color="#E5E5E5">just a text analysis problem</font><font color="#CCCCCC"> and and</font>

44
00:01:32,490 --> 00:01:37,079
we'll discuss why the valid question

45
00:01:35,520 --> 00:01:39,450
would be why<font color="#CCCCCC"> not just reimplementation</font>

46
00:01:37,079 --> 00:01:41,880
interpreter object that's that's

47
00:01:39,450 --> 00:01:43,259
perfectly cool<font color="#CCCCCC"> somebody can do that and</font>

48
00:01:41,880 --> 00:01:45,720
<font color="#E5E5E5">it probably end up with a very clean</font>

49
00:01:43,259 --> 00:01:47,579
solution<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> end of the talk I'll</font>

50
00:01:45,720 --> 00:01:50,610
talk<font color="#CCCCCC"> about something that cannot be</font><font color="#E5E5E5"> done</font>

51
00:01:47,579 --> 00:01:53,008
by any<font color="#E5E5E5"> interpreter</font><font color="#CCCCCC"> but that would be a</font>

52
00:01:50,610 --> 00:01:54,630
<font color="#E5E5E5">pretty clean solution however I'm a</font>

53
00:01:53,009 --> 00:01:55,619
sloppy data scientist and that<font color="#E5E5E5"> doesn't</font>

54
00:01:54,630 --> 00:01:59,490
sound any fun to me

55
00:01:55,619 --> 00:02:01,290
that's somebody<font color="#E5E5E5"> else's job also that</font>

56
00:01:59,490 --> 00:02:02,850
only<font color="#CCCCCC"> solves one obfuscation problem</font><font color="#E5E5E5"> and</font>

57
00:02:01,290 --> 00:02:03,810
I like to<font color="#E5E5E5"> work with ambiguity and</font>

58
00:02:02,850 --> 00:02:07,199
uncertainty for<font color="#E5E5E5"> the sake of</font>

59
00:02:03,810 --> 00:02:08,759
generalization<font color="#CCCCCC"> the logic specific to</font>

60
00:02:07,200 --> 00:02:11,730
PowerShell<font color="#E5E5E5"> D office station in this talk</font>

61
00:02:08,758 --> 00:02:13,980
or D encoding

62
00:02:11,730 --> 00:02:16,140
this can be swapped<font color="#E5E5E5"> out for other</font><font color="#CCCCCC"> option</font>

63
00:02:13,980 --> 00:02:18,599
use cases<font color="#E5E5E5"> and it might still work for</font>

64
00:02:16,140 --> 00:02:20,458
those<font color="#CCCCCC"> and the methods</font><font color="#E5E5E5"> and processes used</font>

65
00:02:18,599 --> 00:02:22,319
<font color="#E5E5E5">here all are the same</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you can have</font>

66
00:02:20,459 --> 00:02:23,700
one tool<font color="#CCCCCC"> to do obviously JavaScript</font>

67
00:02:22,319 --> 00:02:27,450
<font color="#CCCCCC">powershell command line statements</font>

68
00:02:23,700 --> 00:02:28,980
<font color="#E5E5E5">anything else you want so real quick</font>

69
00:02:27,450 --> 00:02:31,859
we're<font color="#CCCCCC"> gonna discuss the problem just a</font>

70
00:02:28,980 --> 00:02:33,690
little bit<font color="#CCCCCC"> we're gonna discuss what</font><font color="#E5E5E5"> is</font>

71
00:02:31,860 --> 00:02:35,519
obvi<font color="#E5E5E5"> say</font><font color="#CCCCCC"> ssin and</font><font color="#E5E5E5"> encoding most of you</font>

72
00:02:33,690 --> 00:02:37,650
probably<font color="#E5E5E5"> know but just a quick quick</font>

73
00:02:35,519 --> 00:02:38,970
refresher<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> we can discuss how we</font>

74
00:02:37,650 --> 00:02:40,860
want<font color="#E5E5E5"> to solve this and it's going to be</font>

75
00:02:38,970 --> 00:02:43,019
in a<font color="#E5E5E5"> couple steps first we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> look</font>

76
00:02:40,860 --> 00:02:44,610
at a file status classifier<font color="#CCCCCC"> addy encoder</font>

77
00:02:43,019 --> 00:02:46,319
addy obfuscator and then a clean up

78
00:02:44,610 --> 00:02:50,430
<font color="#CCCCCC">Network then we're gonna go over some</font>

79
00:02:46,319 --> 00:02:52,108
results so obviously a<font color="#CCCCCC"> ssin</font><font color="#E5E5E5"> generally</font>

80
00:02:50,430 --> 00:02:53,670
speaking it's using functions and<font color="#CCCCCC"> quirks</font>

81
00:02:52,109 --> 00:02:55,769
of<font color="#E5E5E5"> a language to create a command that's</font>

82
00:02:53,670 --> 00:03:00,089
easily machine readable<font color="#CCCCCC"> but</font><font color="#E5E5E5"> much harder</font>

83
00:02:55,769 --> 00:03:02,450
to recognize by human<font color="#E5E5E5"> eyes so if you</font>

84
00:03:00,090 --> 00:03:06,150
can't analyze<font color="#CCCCCC"> it if you can't read</font><font color="#E5E5E5"> it</font>

85
00:03:02,450 --> 00:03:09,209
<font color="#CCCCCC">some some examples of</font><font color="#E5E5E5"> this random case</font>

86
00:03:06,150 --> 00:03:11,819
changes just flipping the<font color="#E5E5E5"> case on every</font>

87
00:03:09,209 --> 00:03:13,769
character and<font color="#CCCCCC"> a string concatenated</font><font color="#E5E5E5"> or</font>

88
00:03:11,819 --> 00:03:15,149
in this<font color="#CCCCCC"> case on concatenation breaking</font>

89
00:03:13,769 --> 00:03:16,709
apart<font color="#CCCCCC"> a string</font><font color="#E5E5E5"> just adding some plus</font>

90
00:03:15,150 --> 00:03:18,299
signs and the interpreter squashes<font color="#E5E5E5"> them</font>

91
00:03:16,709 --> 00:03:21,450
all back together

92
00:03:18,299 --> 00:03:22,739
reordering stuff this is really gnarly

93
00:03:21,450 --> 00:03:24,690
when you have to read it this is usually

94
00:03:22,739 --> 00:03:26,040
<font color="#E5E5E5">used when you want you</font><font color="#CCCCCC"> have a bunch of</font>

95
00:03:24,690 --> 00:03:29,730
<font color="#CCCCCC">variables that</font><font color="#E5E5E5"> you just want</font><font color="#CCCCCC"> to insert</font>

96
00:03:26,040 --> 00:03:32,160
into a statement<font color="#E5E5E5"> for occupations sake</font>

97
00:03:29,730 --> 00:03:35,340
it's used to break up<font color="#E5E5E5"> strings and</font>

98
00:03:32,160 --> 00:03:37,620
reorder them around<font color="#E5E5E5"> backticks backtick</font>

99
00:03:35,340 --> 00:03:38,489
is a line continuation character<font color="#E5E5E5"> so what</font>

100
00:03:37,620 --> 00:03:39,870
happens<font color="#E5E5E5"> when you have a line</font>

101
00:03:38,489 --> 00:03:42,090
continuation in the middle of a line

102
00:03:39,870 --> 00:03:44,430
<font color="#E5E5E5">well the line just continues and it</font>

103
00:03:42,090 --> 00:03:46,200
ignores<font color="#E5E5E5"> the character</font><font color="#CCCCCC"> the only only</font>

104
00:03:44,430 --> 00:03:47,609
purpose<font color="#E5E5E5"> that I've seen so far</font><font color="#CCCCCC"> is that if</font>

105
00:03:46,200 --> 00:03:49,319
<font color="#E5E5E5">that's at the</font><font color="#CCCCCC"> end of the line it says</font>

106
00:03:47,609 --> 00:03:51,120
okay keep<font color="#E5E5E5"> on processing the next one</font>

107
00:03:49,319 --> 00:03:52,858
<font color="#E5E5E5">there a bunch of others splatting</font>

108
00:03:51,120 --> 00:03:54,750
whitespace<font color="#E5E5E5"> all that sort of stuff and</font>

109
00:03:52,859 --> 00:03:57,150
then<font color="#CCCCCC"> there's variable replacement if you</font>

110
00:03:54,750 --> 00:03:58,410
<font color="#E5E5E5">just define a variable</font><font color="#CCCCCC"> a random variable</font>

111
00:03:57,150 --> 00:04:00,209
as a string at the beginning<font color="#E5E5E5"> of your</font>

112
00:03:58,410 --> 00:04:01,440
file then<font color="#E5E5E5"> you can replace</font><font color="#CCCCCC"> it all</font>

113
00:04:00,209 --> 00:04:05,310
throughout<font color="#E5E5E5"> the function and it makes it</font>

114
00:04:01,440 --> 00:04:07,440
really hard<font color="#CCCCCC"> to read so I</font><font color="#E5E5E5"> apologize</font>

115
00:04:05,310 --> 00:04:09,510
throughout this for trying<font color="#E5E5E5"> to put full</font>

116
00:04:07,440 --> 00:04:11,549
files up<font color="#E5E5E5"> in a presentation it's a little</font>

117
00:04:09,510 --> 00:04:14,519
hard to<font color="#E5E5E5"> read but this is an example of</font>

118
00:04:11,549 --> 00:04:16,949
<font color="#E5E5E5">just a regular powershell script before</font>

119
00:04:14,519 --> 00:04:18,810
obfuscation<font color="#CCCCCC"> you can see it's</font><font color="#E5E5E5"> it's</font>

120
00:04:16,949 --> 00:04:20,669
defining<font color="#E5E5E5"> some variables it's doing a</font>

121
00:04:18,810 --> 00:04:23,099
chocolaty thing it has a<font color="#CCCCCC"> try-catch in</font>

122
00:04:20,668 --> 00:04:24,990
there<font color="#E5E5E5"> all normal stuff so after</font>

123
00:04:23,099 --> 00:04:28,199
obfuscation<font color="#CCCCCC"> it looks a</font><font color="#E5E5E5"> little bit</font>

124
00:04:24,990 --> 00:04:30,150
messed up<font color="#CCCCCC"> you could you</font><font color="#E5E5E5"> could do this by</font>

125
00:04:28,199 --> 00:04:32,250
hand<font color="#CCCCCC"> and reverse everything</font><font color="#E5E5E5"> and that'd</font>

126
00:04:30,150 --> 00:04:35,340
<font color="#CCCCCC">be fine</font><font color="#E5E5E5"> you could read it but yeah</font>

127
00:04:32,250 --> 00:04:37,199
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> what computers are for right</font><font color="#CCCCCC"> and</font>

128
00:04:35,340 --> 00:04:39,150
just for reference<font color="#CCCCCC"> all these tricks</font><font color="#E5E5E5"> are</font>

129
00:04:37,199 --> 00:04:41,069
really<font color="#E5E5E5"> well done by Daniel Bohannon</font><font color="#CCCCCC"> you</font>

130
00:04:39,150 --> 00:04:43,859
<font color="#CCCCCC">should check out invoke obfuscation it's</font>

131
00:04:41,069 --> 00:04:45,900
a<font color="#CCCCCC"> Power Cell</font><font color="#E5E5E5"> module</font><font color="#CCCCCC"> I'm using that for</font>

132
00:04:43,860 --> 00:04:48,449
both<font color="#E5E5E5"> the option and coding processes and</font>

133
00:04:45,900 --> 00:04:51,448
<font color="#E5E5E5">throughout this project</font>

134
00:04:48,449 --> 00:04:53,370
next we're up we're with encoding<font color="#E5E5E5"> and so</font>

135
00:04:51,449 --> 00:04:54,900
everybody probably knows this as well

136
00:04:53,370 --> 00:04:56,699
but it's a glyph for character level

137
00:04:54,900 --> 00:05:00,060
mapping<font color="#E5E5E5"> into another encoding scheme so</font>

138
00:04:56,699 --> 00:05:03,389
the glyph<font color="#E5E5E5"> a capital</font><font color="#CCCCCC"> A</font><font color="#E5E5E5"> translates</font><font color="#CCCCCC"> so 41</font>

139
00:05:00,060 --> 00:05:07,380
in hex or 65 and decimal left<font color="#E5E5E5"> bracket is</font>

140
00:05:03,389 --> 00:05:08,880
<font color="#CCCCCC">5b and hex 91 in decimal</font><font color="#E5E5E5"> so on for the</font>

141
00:05:07,380 --> 00:05:10,860
<font color="#E5E5E5">sake of this project I'm only</font>

142
00:05:08,880 --> 00:05:12,449
considering hex and decimal just<font color="#E5E5E5"> to show</font>

143
00:05:10,860 --> 00:05:15,030
<font color="#CCCCCC">that this works</font><font color="#E5E5E5"> with multiple</font><font color="#CCCCCC"> things</font>

144
00:05:12,449 --> 00:05:16,889
it's easily extendable to more schemes

145
00:05:15,030 --> 00:05:20,250
I just got lazy and<font color="#E5E5E5"> didn't want</font><font color="#CCCCCC"> to write</font>

146
00:05:16,889 --> 00:05:22,259
the<font color="#E5E5E5"> D encoding for everything so this is</font>

147
00:05:20,250 --> 00:05:25,620
an example of<font color="#E5E5E5"> a file that is like</font>

148
00:05:22,259 --> 00:05:28,199
encoded with<font color="#CCCCCC"> decimal so you can see all</font>

149
00:05:25,620 --> 00:05:31,800
all the characters there and the<font color="#E5E5E5"> 0 to</font>

150
00:05:28,199 --> 00:05:34,050
256 range<font color="#E5E5E5"> just a list of them and</font><font color="#CCCCCC"> you</font>

151
00:05:31,800 --> 00:05:36,719
can see some of<font color="#E5E5E5"> the logic and PowerShell</font>

152
00:05:34,050 --> 00:05:39,060
<font color="#CCCCCC">to put it back together</font><font color="#E5E5E5"> the for each int</font>

153
00:05:36,719 --> 00:05:42,150
as character cast and all<font color="#E5E5E5"> as characters</font>

154
00:05:39,060 --> 00:05:44,659
and then joins them at the end<font color="#CCCCCC"> similarly</font>

155
00:05:42,150 --> 00:05:47,489
you<font color="#E5E5E5"> can see this is something in hex</font>

156
00:05:44,659 --> 00:05:49,710
<font color="#CCCCCC">same sort of do you convert all two in</font>

157
00:05:47,490 --> 00:05:51,719
<font color="#CCCCCC">15</font><font color="#E5E5E5"> and join all that sort of</font><font color="#CCCCCC"> stuff so</font>

158
00:05:49,710 --> 00:05:52,710
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> just what I mean</font><font color="#CCCCCC"> if you're</font>

159
00:05:51,719 --> 00:05:54,780
<font color="#E5E5E5">looking at this you're obviously not</font>

160
00:05:52,710 --> 00:05:56,690
<font color="#CCCCCC">going to see</font><font color="#E5E5E5"> anything that's encoded but</font>

161
00:05:54,780 --> 00:06:00,330
you can de encode it pretty easily

162
00:05:56,690 --> 00:06:02,849
<font color="#CCCCCC">so now we want</font><font color="#E5E5E5"> to see how to</font><font color="#CCCCCC"> build</font>

163
00:06:00,330 --> 00:06:05,008
something<font color="#E5E5E5"> to take any file whether it's</font>

164
00:06:02,849 --> 00:06:08,610
encoded<font color="#E5E5E5"> obvious gated not obvious</font><font color="#CCCCCC"> cated</font>

165
00:06:05,009 --> 00:06:11,520
anything and then output the<font color="#E5E5E5"> result that</font>

166
00:06:08,610 --> 00:06:14,130
is non<font color="#E5E5E5"> obvious gated so to do</font><font color="#CCCCCC"> that it's</font>

167
00:06:11,520 --> 00:06:16,799
helpful<font color="#CCCCCC"> to know what you're actually</font>

168
00:06:14,130 --> 00:06:19,190
<font color="#E5E5E5">looking at so for that to that end we're</font>

169
00:06:16,800 --> 00:06:21,870
<font color="#E5E5E5">gonna build a file status classifier</font><font color="#CCCCCC"> so</font>

170
00:06:19,190 --> 00:06:25,620
<font color="#CCCCCC">I know a lot of people here might not</font><font color="#E5E5E5"> be</font>

171
00:06:21,870 --> 00:06:28,289
as read up on machine learning<font color="#CCCCCC"> so we're</font>

172
00:06:25,620 --> 00:06:30,569
gonna do a<font color="#E5E5E5"> couple real quick intros into</font>

173
00:06:28,289 --> 00:06:31,289
some topics as we go along<font color="#CCCCCC"> so what is</font><font color="#E5E5E5"> a</font>

174
00:06:30,569 --> 00:06:32,520
classifier

175
00:06:31,289 --> 00:06:34,080
it's a machine<font color="#CCCCCC"> learning approach for</font>

176
00:06:32,520 --> 00:06:35,880
predicting the<font color="#E5E5E5"> category of unlabeled</font>

177
00:06:34,080 --> 00:06:39,330
samples so<font color="#E5E5E5"> you have input in this</font>

178
00:06:35,880 --> 00:06:41,070
example you'd have a PowerShell<font color="#E5E5E5"> script</font>

179
00:06:39,330 --> 00:06:43,859
you throw it through a feature generator

180
00:06:41,070 --> 00:06:45,870
and it you know turns and then spits out

181
00:06:43,860 --> 00:06:47,850
all the sort<font color="#E5E5E5"> of characteristics that you</font>

182
00:06:45,870 --> 00:06:49,620
think are important<font color="#E5E5E5"> then throw it into</font>

183
00:06:47,850 --> 00:06:51,390
<font color="#E5E5E5">this black box classifier and it</font>

184
00:06:49,620 --> 00:06:53,580
predicts this<font color="#E5E5E5"> output either hex encoded</font>

185
00:06:51,390 --> 00:06:55,800
<font color="#E5E5E5">decimal encoded obfuscated</font><font color="#CCCCCC"> non</font>

186
00:06:53,580 --> 00:06:59,070
obfuscated whatever your output classes

187
00:06:55,800 --> 00:07:01,680
are and so let's say<font color="#E5E5E5"> we have this</font>

188
00:06:59,070 --> 00:07:04,260
classifier<font color="#E5E5E5"> and it works well</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> next</font>

189
00:07:01,680 --> 00:07:06,120
<font color="#E5E5E5">step would be if if we have a classifier</font>

190
00:07:04,260 --> 00:07:07,650
and it says<font color="#CCCCCC"> it's encoded we run it</font>

191
00:07:06,120 --> 00:07:09,330
through<font color="#E5E5E5"> a</font><font color="#CCCCCC"> d-- encoder and then run it</font>

192
00:07:07,650 --> 00:07:11,640
back to the file status classifier

193
00:07:09,330 --> 00:07:15,750
<font color="#E5E5E5">because</font><font color="#CCCCCC"> it could be obfuscated</font><font color="#E5E5E5"> and then</font>

194
00:07:11,640 --> 00:07:17,669
<font color="#E5E5E5">encoded or any combination</font><font color="#CCCCCC"> similarly if</font>

195
00:07:15,750 --> 00:07:19,740
<font color="#E5E5E5">we</font><font color="#CCCCCC"> determined that</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> obvious gated we</font>

196
00:07:17,670 --> 00:07:22,080
run through a div<font color="#CCCCCC"> skater</font><font color="#E5E5E5"> back to file</font>

197
00:07:19,740 --> 00:07:24,330
status classifier and finally if we ever

198
00:07:22,080 --> 00:07:26,460
determined that it's non obfuscated<font color="#E5E5E5"> we</font>

199
00:07:24,330 --> 00:07:28,530
output<font color="#E5E5E5"> the results so pretty simple</font>

200
00:07:26,460 --> 00:07:29,969
logic of returning<font color="#E5E5E5"> it</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> and then keep</font>

201
00:07:28,530 --> 00:07:30,859
on working until<font color="#CCCCCC"> you</font><font color="#E5E5E5"> get the result</font><font color="#CCCCCC"> that</font>

202
00:07:29,970 --> 00:07:34,050
<font color="#E5E5E5">you want</font>

203
00:07:30,860 --> 00:07:36,690
so for building a classifier<font color="#E5E5E5"> the typical</font>

204
00:07:34,050 --> 00:07:39,300
machine learning approach is to this

205
00:07:36,690 --> 00:07:41,610
three parts one<font color="#CCCCCC"> gather a lot</font><font color="#E5E5E5"> of samples</font>

206
00:07:39,300 --> 00:07:45,720
with labels and<font color="#E5E5E5"> by that I mean</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of</font>

207
00:07:41,610 --> 00:07:48,000
PowerShell files<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> tag is this</font>

208
00:07:45,720 --> 00:07:50,850
obfuscated<font color="#E5E5E5"> is this hexadecimal encode</font>

209
00:07:48,000 --> 00:07:52,020
encoded is this non obfuscated<font color="#E5E5E5"> and then</font>

210
00:07:50,850 --> 00:07:54,180
for each<font color="#E5E5E5"> of</font><font color="#CCCCCC"> those</font><font color="#E5E5E5"> you want to generate</font>

211
00:07:52,020 --> 00:07:55,710
features on those<font color="#E5E5E5"> samples and then train</font>

212
00:07:54,180 --> 00:07:58,770
<font color="#E5E5E5">using your selected algorithm so</font>

213
00:07:55,710 --> 00:08:01,140
stepping through that<font color="#CCCCCC"> let's talk about</font>

214
00:07:58,770 --> 00:08:03,479
samples<font color="#E5E5E5"> this is often</font><font color="#CCCCCC"> the hardest part</font>

215
00:08:01,140 --> 00:08:07,979
of any data science problem is<font color="#E5E5E5"> getting</font>

216
00:08:03,480 --> 00:08:09,450
the right samples if the couple options

217
00:08:07,980 --> 00:08:11,400
for<font color="#E5E5E5"> you is if you have access</font><font color="#CCCCCC"> to</font>

218
00:08:09,450 --> 00:08:13,349
<font color="#E5E5E5">virustotal downloads or similar service</font>

219
00:08:11,400 --> 00:08:15,599
you can grab<font color="#E5E5E5"> that you can scrape github</font>

220
00:08:13,350 --> 00:08:17,610
or you could ask your friends<font color="#CCCCCC"> for all</font>

221
00:08:15,600 --> 00:08:19,770
their scripts we're gonna be<font color="#E5E5E5"> having</font><font color="#CCCCCC"> to</font>

222
00:08:17,610 --> 00:08:21,120
<font color="#E5E5E5">train on tens of thousands of scripts so</font>

223
00:08:19,770 --> 00:08:25,349
you might need to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> some more friends</font>

224
00:08:21,120 --> 00:08:27,510
<font color="#E5E5E5">if</font><font color="#CCCCCC"> you do</font><font color="#E5E5E5"> that approach</font><font color="#CCCCCC"> luckily since</font>

225
00:08:25,350 --> 00:08:30,120
<font color="#E5E5E5">we're using invoke obfuscation</font><font color="#CCCCCC"> once we</font>

226
00:08:27,510 --> 00:08:32,640
have just regular<font color="#CCCCCC"> powershell scripts</font><font color="#E5E5E5"> we</font>

227
00:08:30,120 --> 00:08:34,770
can generate the encoded and the obvious

228
00:08:32,640 --> 00:08:40,260
<font color="#E5E5E5">gated versions of those so we get the</font>

229
00:08:34,770 --> 00:08:42,870
labels for free<font color="#CCCCCC"> so features classical</font>

230
00:08:40,260 --> 00:08:44,910
<font color="#E5E5E5">machine learning</font><font color="#CCCCCC"> a logistic regression</font>

231
00:08:42,870 --> 00:08:47,430
<font color="#E5E5E5">support vector machine some others that</font>

232
00:08:44,910 --> 00:08:49,410
you might have heard<font color="#E5E5E5"> of you you</font>

233
00:08:47,430 --> 00:08:50,969
<font color="#E5E5E5">basically hand define all the features</font>

234
00:08:49,410 --> 00:08:51,850
that you<font color="#CCCCCC"> want you're going</font><font color="#E5E5E5"> to write a</font>

235
00:08:50,970 --> 00:08:53,350
<font color="#E5E5E5">little script that</font>

236
00:08:51,850 --> 00:08:55,630
find the number<font color="#CCCCCC"> of characters than of</font>

237
00:08:53,350 --> 00:08:57,519
our values<font color="#E5E5E5"> the entropy of the file the</font>

238
00:08:55,630 --> 00:09:00,970
number of back<font color="#E5E5E5"> tick marks all that sort</font>

239
00:08:57,519 --> 00:09:02,230
of stuff<font color="#CCCCCC"> that's personally I find</font><font color="#E5E5E5"> that</font>

240
00:09:00,970 --> 00:09:03,910
<font color="#CCCCCC">pretty annoying to derive all these</font>

241
00:09:02,230 --> 00:09:05,259
yourself<font color="#E5E5E5"> you're gonna miss a bunch of</font>

242
00:09:03,910 --> 00:09:06,430
important ones you're gonna<font color="#E5E5E5"> spend a lot</font>

243
00:09:05,259 --> 00:09:10,480
<font color="#CCCCCC">of</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> time doing feature engineering</font>

244
00:09:06,430 --> 00:09:11,739
<font color="#CCCCCC">just</font><font color="#E5E5E5"> not very fun</font><font color="#CCCCCC"> and it often for text</font>

245
00:09:10,480 --> 00:09:13,480
<font color="#E5E5E5">it often doesn't represent the</font>

246
00:09:11,740 --> 00:09:16,540
relationship between<font color="#E5E5E5"> characters well if</font>

247
00:09:13,480 --> 00:09:18,519
you have<font color="#E5E5E5"> just a string user</font><font color="#CCCCCC"> us er</font><font color="#E5E5E5"> it's</font>

248
00:09:16,540 --> 00:09:20,740
going to have the same very similar

249
00:09:18,519 --> 00:09:27,120
<font color="#E5E5E5">results as if you reverse the string</font>

250
00:09:20,740 --> 00:09:29,290
<font color="#E5E5E5">resu</font><font color="#CCCCCC"> so that you know the the sort of</font>

251
00:09:27,120 --> 00:09:31,089
relationships between characters in this

252
00:09:29,290 --> 00:09:33,279
case it's<font color="#CCCCCC"> probably very important</font><font color="#E5E5E5"> so</font>

253
00:09:31,089 --> 00:09:35,110
classical machine<font color="#E5E5E5"> learning isn't really</font>

254
00:09:33,279 --> 00:09:37,509
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> work for</font><font color="#CCCCCC"> us so we're</font><font color="#E5E5E5"> gonna try</font>

255
00:09:35,110 --> 00:09:38,860
to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> a neural</font><font color="#E5E5E5"> network and super brief</font>

256
00:09:37,509 --> 00:09:42,130
because<font color="#E5E5E5"> we don't have time to go into a</font>

257
00:09:38,860 --> 00:09:45,399
lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this stuff this is just a classic</font>

258
00:09:42,130 --> 00:09:47,589
<font color="#CCCCCC">example of dense feed-forward network</font>

259
00:09:45,399 --> 00:09:50,259
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> your input values on the</font><font color="#E5E5E5"> left</font>

260
00:09:47,589 --> 00:09:52,389
<font color="#CCCCCC">each of these circles are nodes that</font>

261
00:09:50,259 --> 00:09:55,060
have activations<font color="#CCCCCC"> that propagate through</font>

262
00:09:52,389 --> 00:09:57,579
to the<font color="#E5E5E5"> next layer</font><font color="#CCCCCC"> and then you have an</font>

263
00:09:55,060 --> 00:10:00,060
<font color="#E5E5E5">output layer that defines your classes</font>

264
00:09:57,579 --> 00:10:04,000
<font color="#CCCCCC">the the output</font><font color="#E5E5E5"> classes like hex or</font>

265
00:10:00,060 --> 00:10:05,290
<font color="#E5E5E5">decimal or obfuscated</font><font color="#CCCCCC"> so if you're</font>

266
00:10:04,000 --> 00:10:07,689
running<font color="#E5E5E5"> a sample through this while</font>

267
00:10:05,290 --> 00:10:09,370
training<font color="#E5E5E5"> you you take your feature or</font>

268
00:10:07,689 --> 00:10:11,199
you<font color="#CCCCCC"> take</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> sample throw it through</font>

269
00:10:09,370 --> 00:10:13,029
<font color="#E5E5E5">the input layer it propagates through</font>

270
00:10:11,199 --> 00:10:14,620
and then makes a prediction at the end

271
00:10:13,029 --> 00:10:17,769
if your prediction is right that's

272
00:10:14,620 --> 00:10:20,019
awesome<font color="#CCCCCC"> if it's not then it back</font>

273
00:10:17,769 --> 00:10:24,189
propagates and changes the activation of

274
00:10:20,019 --> 00:10:26,519
all of the nodes<font color="#CCCCCC"> throughout the network</font>

275
00:10:24,189 --> 00:10:29,170
and then tries again with<font color="#E5E5E5"> other samples</font>

276
00:10:26,519 --> 00:10:31,029
<font color="#CCCCCC">eventually with you know thousands</font><font color="#E5E5E5"> tens</font>

277
00:10:29,170 --> 00:10:32,199
of thousands of<font color="#CCCCCC"> samples lots of training</font>

278
00:10:31,029 --> 00:10:34,470
<font color="#E5E5E5">you're going</font><font color="#CCCCCC"> to get a whole</font><font color="#E5E5E5"> bunch of</font>

279
00:10:32,199 --> 00:10:36,459
<font color="#E5E5E5">Awesome's and you have a good classifier</font>

280
00:10:34,470 --> 00:10:37,930
<font color="#CCCCCC">what we're actually going</font><font color="#E5E5E5"> to be using</font>

281
00:10:36,459 --> 00:10:42,399
though is a special type<font color="#CCCCCC"> of network</font>

282
00:10:37,930 --> 00:10:44,949
called a LS TM<font color="#E5E5E5"> so you're asking what is</font>

283
00:10:42,399 --> 00:10:49,509
<font color="#E5E5E5">it</font><font color="#CCCCCC"> LS TM and with all definitions we go</font>

284
00:10:44,949 --> 00:10:51,849
to Wikipedia<font color="#CCCCCC"> so long short-term memory</font>

285
00:10:49,509 --> 00:10:53,259
units are a building unit for layers of

286
00:10:51,850 --> 00:10:55,180
recurrent neural network composed<font color="#E5E5E5"> of a</font>

287
00:10:53,259 --> 00:10:57,130
cell and input gate and output gate and

288
00:10:55,180 --> 00:10:59,560
a forget gate<font color="#E5E5E5"> all right that's not</font><font color="#CCCCCC"> very</font>

289
00:10:57,130 --> 00:11:02,110
<font color="#E5E5E5">helpful</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> it's because we don't know</font>

290
00:10:59,560 --> 00:11:03,760
what<font color="#CCCCCC"> R and</font><font color="#E5E5E5"> n is a recurrent neural</font>

291
00:11:02,110 --> 00:11:05,019
network is the class of<font color="#E5E5E5"> artificial</font>

292
00:11:03,760 --> 00:11:05,390
<font color="#CCCCCC">neural networks where connections</font>

293
00:11:05,019 --> 00:11:06,680
between

294
00:11:05,390 --> 00:11:11,710
it's former directed graph along<font color="#E5E5E5"> a</font>

295
00:11:06,680 --> 00:11:15,589
sequence<font color="#CCCCCC"> ok Wikipedia has failed us so</font>

296
00:11:11,710 --> 00:11:18,080
<font color="#CCCCCC">the quick short summary in more natural</font>

297
00:11:15,590 --> 00:11:20,060
<font color="#E5E5E5">language</font><font color="#CCCCCC"> are and then is a type</font><font color="#E5E5E5"> of</font>

298
00:11:18,080 --> 00:11:21,710
<font color="#E5E5E5">neural network that</font><font color="#CCCCCC"> keeps some memory it</font>

299
00:11:20,060 --> 00:11:23,540
can<font color="#E5E5E5"> reference the previous</font><font color="#CCCCCC"> states the</font>

300
00:11:21,710 --> 00:11:25,820
previous predictions<font color="#E5E5E5"> that it made as</font>

301
00:11:23,540 --> 00:11:28,219
well<font color="#E5E5E5"> as current input to determine</font><font color="#CCCCCC"> the</font>

302
00:11:25,820 --> 00:11:30,050
value at the bottom<font color="#E5E5E5"> in the notes there's</font>

303
00:11:28,220 --> 00:11:33,650
there's a really good blog on this<font color="#E5E5E5"> I</font>

304
00:11:30,050 --> 00:11:36,050
think<font color="#CCCCCC"> if you like</font><font color="#E5E5E5"> query LS TM on Google</font>

305
00:11:33,650 --> 00:11:38,510
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the first pop up so that should</font>

306
00:11:36,050 --> 00:11:41,240
<font color="#CCCCCC">be</font><font color="#E5E5E5"> pretty easy to find</font><font color="#CCCCCC"> so this is this</font>

307
00:11:38,510 --> 00:11:43,610
<font color="#E5E5E5">is the architecture</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> an RNN you can</font>

308
00:11:41,240 --> 00:11:47,060
see the the input<font color="#CCCCCC"> like on the left side</font>

309
00:11:43,610 --> 00:11:49,130
you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> input at time T comes</font>

310
00:11:47,060 --> 00:11:51,949
down<font color="#E5E5E5"> and you have this memory node which</font>

311
00:11:49,130 --> 00:11:53,689
can reference<font color="#E5E5E5"> its previous self and then</font>

312
00:11:51,950 --> 00:11:55,970
yet output node which is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> prediction</font>

313
00:11:53,690 --> 00:11:58,490
<font color="#E5E5E5">so if you sort of unpack this from time</font>

314
00:11:55,970 --> 00:12:00,650
<font color="#CCCCCC">0 moving forward</font><font color="#E5E5E5"> you can see the first</font>

315
00:11:58,490 --> 00:12:03,530
<font color="#E5E5E5">one the memory node doesn't really do</font>

316
00:12:00,650 --> 00:12:06,199
much<font color="#CCCCCC"> you have the input</font><font color="#E5E5E5"> and output but</font>

317
00:12:03,530 --> 00:12:07,730
going<font color="#CCCCCC"> on you start to reference the</font>

318
00:12:06,200 --> 00:12:10,070
memory node so you reference<font color="#E5E5E5"> the</font>

319
00:12:07,730 --> 00:12:11,470
previous<font color="#E5E5E5"> state as you're predicting so</font>

320
00:12:10,070 --> 00:12:14,390
this sort<font color="#E5E5E5"> of does character by character</font>

321
00:12:11,470 --> 00:12:16,070
predictions referencing the previously

322
00:12:14,390 --> 00:12:19,850
predicted character<font color="#E5E5E5"> so that's pretty</font>

323
00:12:16,070 --> 00:12:23,360
cool<font color="#CCCCCC"> and an LSD em a long</font><font color="#E5E5E5"> short-term</font>

324
00:12:19,850 --> 00:12:25,820
memory<font color="#CCCCCC"> network is a version of an RNN</font>

325
00:12:23,360 --> 00:12:27,050
that has some bonus internal network

326
00:12:25,820 --> 00:12:28,820
structures<font color="#E5E5E5"> that let them handle</font>

327
00:12:27,050 --> 00:12:30,979
<font color="#CCCCCC">long-term memory better than a standard</font>

328
00:12:28,820 --> 00:12:33,650
aren't in again we<font color="#E5E5E5"> don't really have a</font>

329
00:12:30,980 --> 00:12:35,300
lot<font color="#CCCCCC"> of time to go</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so we're</font>

330
00:12:33,650 --> 00:12:37,310
just<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> leave a little star there</font>

331
00:12:35,300 --> 00:12:39,290
<font color="#CCCCCC">to say it's special</font>

332
00:12:37,310 --> 00:12:43,359
so all those memory<font color="#E5E5E5"> nodes have some</font>

333
00:12:39,290 --> 00:12:45,680
<font color="#E5E5E5">little extra logic that's where the</font>

334
00:12:43,360 --> 00:12:48,800
forget gate the input gate all that

335
00:12:45,680 --> 00:12:50,630
stuff in that<font color="#E5E5E5"> definition come in</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> that</font>

336
00:12:48,800 --> 00:12:51,709
sounds a little intimidating and<font color="#E5E5E5"> if you</font>

337
00:12:50,630 --> 00:12:53,960
don't work<font color="#E5E5E5"> when they're all networks</font>

338
00:12:51,710 --> 00:12:55,550
<font color="#CCCCCC">they</font><font color="#E5E5E5"> do look intimidating from the</font>

339
00:12:53,960 --> 00:12:57,590
outside but there are a<font color="#E5E5E5"> lot of</font>

340
00:12:55,550 --> 00:13:00,170
<font color="#E5E5E5">high-level neural network frameworks</font>

341
00:12:57,590 --> 00:13:02,090
like<font color="#CCCCCC"> Kerris that make this super easy</font><font color="#E5E5E5"> so</font>

342
00:13:00,170 --> 00:13:04,069
training this<font color="#E5E5E5"> network this is literally</font>

343
00:13:02,090 --> 00:13:05,390
the code to do it it's<font color="#E5E5E5"> nine lines</font><font color="#CCCCCC"> and</font>

344
00:13:04,070 --> 00:13:08,150
one of those<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> even need to</font><font color="#E5E5E5"> be</font>

345
00:13:05,390 --> 00:13:10,699
<font color="#CCCCCC">there</font><font color="#E5E5E5"> and it's a pretty simple</font>

346
00:13:08,150 --> 00:13:12,949
classifier on<font color="#E5E5E5"> ten ten thousand samples</font>

347
00:13:10,700 --> 00:13:14,900
<font color="#CCCCCC">for class so four thousand or 40,000</font>

348
00:13:12,950 --> 00:13:18,320
samples you can<font color="#CCCCCC"> run this in under thirty</font>

349
00:13:14,900 --> 00:13:19,340
<font color="#CCCCCC">minutes</font><font color="#E5E5E5"> on a CPU</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you know so if</font>

350
00:13:18,320 --> 00:13:20,990
<font color="#CCCCCC">you're</font>

351
00:13:19,340 --> 00:13:23,090
if you're worried about it<font color="#CCCCCC"> don't be just</font>

352
00:13:20,990 --> 00:13:25,160
try<font color="#E5E5E5"> something out</font><font color="#CCCCCC"> computer science has</font>

353
00:13:23,090 --> 00:13:27,440
always<font color="#CCCCCC"> thought its abstraction so you</font>

354
00:13:25,160 --> 00:13:30,110
don't have to know exactly<font color="#CCCCCC"> how lsdm work</font>

355
00:13:27,440 --> 00:13:34,160
if you know what sort<font color="#CCCCCC"> of problems it's</font>

356
00:13:30,110 --> 00:13:37,190
good at solving<font color="#CCCCCC"> now we're gonna</font><font color="#E5E5E5"> look at</font>

357
00:13:34,160 --> 00:13:38,900
how we're gonna build a decoder<font color="#E5E5E5"> so now</font>

358
00:13:37,190 --> 00:13:41,030
we've got a file status classifier

359
00:13:38,900 --> 00:13:44,209
that's pretty good<font color="#CCCCCC"> that one</font><font color="#E5E5E5"> that I</font>

360
00:13:41,030 --> 00:13:47,150
trained is like well over<font color="#E5E5E5"> 99% accurate</font>

361
00:13:44,210 --> 00:13:50,810
<font color="#CCCCCC">and it's it's</font><font color="#E5E5E5"> not really a big deal so</font>

362
00:13:47,150 --> 00:13:52,819
now we're<font color="#E5E5E5"> going to</font><font color="#CCCCCC"> look at D encoding</font><font color="#E5E5E5"> so</font>

363
00:13:50,810 --> 00:13:54,500
I could have<font color="#E5E5E5"> just figured</font><font color="#CCCCCC"> out how to</font><font color="#E5E5E5"> use</font>

364
00:13:52,820 --> 00:13:56,000
<font color="#E5E5E5">power shells interpreter or their</font>

365
00:13:54,500 --> 00:13:59,510
interpreter<font color="#E5E5E5"> or logic to decode a file</font>

366
00:13:56,000 --> 00:14:03,260
like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> you can you</font><font color="#E5E5E5"> can see how it</font>

367
00:13:59,510 --> 00:14:05,060
should be done<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> but like I said</font>

368
00:14:03,260 --> 00:14:07,490
<font color="#CCCCCC">I'm a sloppy data scientist and I see a</font>

369
00:14:05,060 --> 00:14:10,089
pattern<font color="#CCCCCC"> and you know what's really</font><font color="#E5E5E5"> good</font>

370
00:14:07,490 --> 00:14:13,370
<font color="#CCCCCC">for patterns regex</font>

371
00:14:10,090 --> 00:14:16,580
<font color="#E5E5E5">um so in four lines you can you can</font>

372
00:14:13,370 --> 00:14:18,100
decode that<font color="#E5E5E5"> whole thing</font><font color="#CCCCCC"> just by finding</font>

373
00:14:16,580 --> 00:14:20,360
all the things<font color="#E5E5E5"> that fit</font><font color="#CCCCCC"> that pattern</font>

374
00:14:18,100 --> 00:14:23,090
<font color="#E5E5E5">casting them as characters and then</font>

375
00:14:20,360 --> 00:14:25,310
<font color="#E5E5E5">joining them all back together</font><font color="#CCCCCC"> so that's</font>

376
00:14:23,090 --> 00:14:26,690
<font color="#E5E5E5">pretty easy to</font><font color="#CCCCCC"> be fair hex</font><font color="#E5E5E5"> is a little</font>

377
00:14:25,310 --> 00:14:29,479
different because it has<font color="#E5E5E5"> like a</font>

378
00:14:26,690 --> 00:14:32,210
<font color="#CCCCCC">different inline structure</font><font color="#E5E5E5"> or end of</font>

379
00:14:29,480 --> 00:14:34,130
line structure<font color="#CCCCCC"> and there are some other</font>

380
00:14:32,210 --> 00:14:36,260
<font color="#CCCCCC">things that invocation does</font><font color="#E5E5E5"> like</font>

381
00:14:34,130 --> 00:14:38,510
creating split variables that<font color="#E5E5E5"> can make</font>

382
00:14:36,260 --> 00:14:40,880
this harder but<font color="#CCCCCC"> that's adding five or</font>

383
00:14:38,510 --> 00:14:44,270
ten lines of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> so it's not really not</font>

384
00:14:40,880 --> 00:14:46,070
really<font color="#E5E5E5"> too bad</font><font color="#CCCCCC"> and in life my pro tip is</font>

385
00:14:44,270 --> 00:14:48,010
don't<font color="#E5E5E5"> do anything</font><font color="#CCCCCC"> too complicated when</font>

386
00:14:46,070 --> 00:14:51,110
there's a simple<font color="#CCCCCC"> answer</font>

387
00:14:48,010 --> 00:14:53,240
<font color="#CCCCCC">all</font><font color="#E5E5E5"> right so</font><font color="#CCCCCC"> deification this is the fun</font>

388
00:14:51,110 --> 00:14:55,760
one<font color="#CCCCCC"> the boat majority of</font><font color="#E5E5E5"> this stuff can</font>

389
00:14:53,240 --> 00:14:57,170
<font color="#CCCCCC">be handled by logic</font><font color="#E5E5E5"> you can catch</font>

390
00:14:55,760 --> 00:14:59,360
strings<font color="#CCCCCC"> together you can remove back</font>

391
00:14:57,170 --> 00:14:59,870
ticks you<font color="#E5E5E5"> can place variables some are</font>

392
00:14:59,360 --> 00:15:02,360
really<font color="#E5E5E5"> easy</font>

393
00:14:59,870 --> 00:15:04,100
removing ticks<font color="#E5E5E5"> just replace every back</font>

394
00:15:02,360 --> 00:15:05,660
tick except for the one<font color="#E5E5E5"> at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> end if</font>

395
00:15:04,100 --> 00:15:07,820
there is one

396
00:15:05,660 --> 00:15:11,000
splatting just look for something<font color="#CCCCCC"> that</font>

397
00:15:07,820 --> 00:15:13,160
<font color="#CCCCCC">looks</font><font color="#E5E5E5"> like a sliding and replace it</font><font color="#CCCCCC"> for</font>

398
00:15:11,000 --> 00:15:14,750
<font color="#E5E5E5">string assignments you can cast things</font>

399
00:15:13,160 --> 00:15:16,520
<font color="#CCCCCC">as strings or characters and all this</font>

400
00:15:14,750 --> 00:15:18,260
<font color="#E5E5E5">sort of stuff</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can find</font><font color="#CCCCCC"> a match and</font>

401
00:15:16,520 --> 00:15:20,510
<font color="#CCCCCC">just replace it pretty easily</font>

402
00:15:18,260 --> 00:15:22,840
none<font color="#CCCCCC"> of those are bad they're</font><font color="#E5E5E5"> all</font>

403
00:15:20,510 --> 00:15:24,800
<font color="#E5E5E5">completely reversible functions</font>

404
00:15:22,840 --> 00:15:26,690
<font color="#CCCCCC">sometimes it gets a little bit more</font>

405
00:15:24,800 --> 00:15:28,160
complicated<font color="#E5E5E5"> the reordering thing that I</font>

406
00:15:26,690 --> 00:15:31,070
talked about where<font color="#E5E5E5"> you have all the</font>

407
00:15:28,160 --> 00:15:33,139
braced<font color="#E5E5E5"> numbers and then</font><font color="#CCCCCC"> dash F and then</font>

408
00:15:31,070 --> 00:15:35,389
a bunch of strings<font color="#E5E5E5"> that get reordered</font>

409
00:15:33,139 --> 00:15:37,100
<font color="#E5E5E5">to do that</font><font color="#CCCCCC"> I found the best way was to</font>

410
00:15:35,389 --> 00:15:40,249
<font color="#E5E5E5">do character by character processing to</font>

411
00:15:37,100 --> 00:15:42,709
find that hook - f or - capital<font color="#E5E5E5"> F and</font>

412
00:15:40,249 --> 00:15:44,239
find all the<font color="#CCCCCC"> placeholders before it find</font>

413
00:15:42,709 --> 00:15:46,069
all the strings and valid non string

414
00:15:44,239 --> 00:15:47,660
values after<font color="#E5E5E5"> it replaced them then</font>

415
00:15:46,069 --> 00:15:49,699
iterate because you can do this on

416
00:15:47,660 --> 00:15:52,279
multiple<font color="#E5E5E5"> times on a line and it just</font>

417
00:15:49,699 --> 00:15:54,679
looks super gross<font color="#E5E5E5"> but</font><font color="#CCCCCC"> uh</font><font color="#E5E5E5"> there are</font>

418
00:15:52,279 --> 00:15:56,480
multiple<font color="#E5E5E5"> different ways to do this - you</font>

419
00:15:54,679 --> 00:15:58,309
can do replace invoke and a<font color="#E5E5E5"> couple other</font>

420
00:15:56,480 --> 00:16:00,109
things<font color="#E5E5E5"> like that but it's a finite list</font>

421
00:15:58,309 --> 00:16:03,679
these<font color="#CCCCCC"> are all like definitely</font><font color="#E5E5E5"> solvable</font>

422
00:16:00,109 --> 00:16:06,199
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I think I enumerated most of them in</font>

423
00:16:03,679 --> 00:16:08,209
the<font color="#E5E5E5"> the</font><font color="#CCCCCC"> code but maybe not hit all</font><font color="#E5E5E5"> of</font>

424
00:16:06,199 --> 00:16:11,059
<font color="#CCCCCC">them but it's it's just</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> definitely</font>

425
00:16:08,209 --> 00:16:13,819
a solvable problem so we have<font color="#CCCCCC"> a dozen or</font>

426
00:16:11,059 --> 00:16:16,160
so of<font color="#CCCCCC"> these little fixes to match all</font>

427
00:16:13,819 --> 00:16:18,738
the stuff<font color="#E5E5E5"> that's in info confiscation so</font>

428
00:16:16,160 --> 00:16:21,738
let's see how we do<font color="#CCCCCC"> first we look back</font>

429
00:16:18,739 --> 00:16:24,949
at<font color="#E5E5E5"> that file that</font><font color="#CCCCCC"> was obfuscated looks</font>

430
00:16:21,739 --> 00:16:27,470
gross<font color="#E5E5E5"> good times</font><font color="#CCCCCC"> and then after applying</font>

431
00:16:24,949 --> 00:16:30,019
it you know it looks a lot<font color="#E5E5E5"> better</font><font color="#CCCCCC"> it's</font>

432
00:16:27,470 --> 00:16:33,919
actually readable<font color="#CCCCCC"> there are some</font><font color="#E5E5E5"> things</font>

433
00:16:30,019 --> 00:16:35,779
that bug me a little<font color="#E5E5E5"> bit you</font><font color="#CCCCCC"> see the the</font>

434
00:16:33,919 --> 00:16:38,869
capitalization stuff you're not<font color="#E5E5E5"> going to</font>

435
00:16:35,779 --> 00:16:41,449
fix that<font color="#E5E5E5"> with logic</font><font color="#CCCCCC"> and that's mostly</font>

436
00:16:38,869 --> 00:16:43,819
what what happens there<font color="#E5E5E5"> so like you know</font>

437
00:16:41,449 --> 00:16:46,339
<font color="#E5E5E5">this thing this mandatory faults domain</font>

438
00:16:43,819 --> 00:16:48,829
for some reason that gets me and I<font color="#E5E5E5"> think</font>

439
00:16:46,339 --> 00:16:51,079
it's because of<font color="#CCCCCC"> this the the sort of</font>

440
00:16:48,829 --> 00:16:54,559
<font color="#E5E5E5">mocking</font><font color="#CCCCCC"> Spongebob always</font><font color="#E5E5E5"> there</font>

441
00:16:51,079 --> 00:16:57,019
<font color="#E5E5E5">how is mocking</font><font color="#CCCCCC"> so this is where things</font>

442
00:16:54,559 --> 00:16:59,238
get sort of interesting<font color="#CCCCCC"> all the previous</font>

443
00:16:57,019 --> 00:17:00,619
work<font color="#CCCCCC"> that we did</font><font color="#E5E5E5"> could be run backwards</font>

444
00:16:59,239 --> 00:17:03,319
they're all reversible<font color="#E5E5E5"> functions like I</font>

445
00:17:00,619 --> 00:17:07,189
said random casing strings and variables

446
00:17:03,319 --> 00:17:09,349
that's a different thing<font color="#CCCCCC"> so the thing is</font>

447
00:17:07,189 --> 00:17:10,789
<font color="#E5E5E5">if you're looking</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> this if I'm looking</font>

448
00:17:09,349 --> 00:17:12,019
<font color="#E5E5E5">at</font><font color="#CCCCCC"> this if you're looking at this if any</font>

449
00:17:10,789 --> 00:17:13,849
<font color="#CCCCCC">one</font><font color="#E5E5E5"> that someone was</font><font color="#CCCCCC"> looking at this I</font>

450
00:17:12,019 --> 00:17:15,500
bet<font color="#CCCCCC"> you could guess how</font><font color="#E5E5E5"> that's supposed</font>

451
00:17:13,849 --> 00:17:17,208
<font color="#E5E5E5">to</font><font color="#CCCCCC"> be formatted there are a couple</font>

452
00:17:15,500 --> 00:17:20,209
<font color="#E5E5E5">different options but</font><font color="#CCCCCC"> you probably</font>

453
00:17:17,209 --> 00:17:22,279
<font color="#E5E5E5">guessed one of these you know</font><font color="#CCCCCC"> the word</font>

454
00:17:20,209 --> 00:17:24,740
module<font color="#CCCCCC"> you know the word directory</font>

455
00:17:22,279 --> 00:17:27,049
<font color="#E5E5E5">through your experience and intuition</font>

456
00:17:24,740 --> 00:17:29,659
<font color="#E5E5E5">you can probably figure this out so</font>

457
00:17:27,049 --> 00:17:31,129
that's one<font color="#E5E5E5"> thing where logic fails but</font>

458
00:17:29,659 --> 00:17:33,230
neural<font color="#E5E5E5"> networks sometimes</font><font color="#CCCCCC"> have an edge</font>

459
00:17:31,130 --> 00:17:35,830
up so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> where we actually put the</font>

460
00:17:33,230 --> 00:17:37,880
toothpaste<font color="#E5E5E5"> back in as the subtitle goes</font>

461
00:17:35,830 --> 00:17:39,830
<font color="#CCCCCC">so we're gonna try to train a neural</font>

462
00:17:37,880 --> 00:17:42,070
network<font color="#E5E5E5"> to learn the various casing</font>

463
00:17:39,830 --> 00:17:43,789
formats using<font color="#E5E5E5"> PowerShell and as a bonus</font>

464
00:17:42,070 --> 00:17:45,710
<font color="#CCCCCC">it will</font><font color="#E5E5E5"> help out</font><font color="#CCCCCC"> with some</font><font color="#E5E5E5"> of the</font>

465
00:17:43,789 --> 00:17:46,760
<font color="#CCCCCC">extraneous stuff that since I'm</font><font color="#E5E5E5"> sloppy</font>

466
00:17:45,710 --> 00:17:49,570
data<font color="#E5E5E5"> scientists I'm</font>

467
00:17:46,760 --> 00:17:51,950
miss so like extra braces extra

468
00:17:49,570 --> 00:17:54,590
<font color="#E5E5E5">quotation marks in some locations all</font>

469
00:17:51,950 --> 00:17:55,700
that<font color="#CCCCCC"> sore</font><font color="#E5E5E5"> stuff so if you like</font><font color="#CCCCCC"> that</font>

470
00:17:54,590 --> 00:17:59,480
seems you're gonna love this<font color="#E5E5E5"> because</font>

471
00:17:55,700 --> 00:18:00,950
<font color="#E5E5E5">this has like</font><font color="#CCCCCC"> three Ellis genes in it so</font>

472
00:17:59,480 --> 00:18:04,130
the goal right<font color="#E5E5E5"> here is to translate</font>

473
00:18:00,950 --> 00:18:06,380
<font color="#E5E5E5">something like this variable module</font>

474
00:18:04,130 --> 00:18:08,300
directory all messed up<font color="#CCCCCC"> into variable</font>

475
00:18:06,380 --> 00:18:10,570
module directory<font color="#E5E5E5"> and we're gonna use a</font>

476
00:18:08,300 --> 00:18:13,430
sequence to sequence<font color="#CCCCCC"> network to do this</font>

477
00:18:10,570 --> 00:18:15,379
<font color="#CCCCCC">so what's the sequence sequence it's a</font>

478
00:18:13,430 --> 00:18:17,960
type of<font color="#E5E5E5"> neural network that's often used</font>

479
00:18:15,380 --> 00:18:19,940
<font color="#E5E5E5">in machine translation so think language</font>

480
00:18:17,960 --> 00:18:23,120
translation Cantonese to English<font color="#E5E5E5"> or</font><font color="#CCCCCC"> a</font>

481
00:18:19,940 --> 00:18:25,400
deal so it<font color="#E5E5E5"> uses LS teams to create an</font>

482
00:18:23,120 --> 00:18:27,800
encoder<font color="#CCCCCC"> network to transform the</font>

483
00:18:25,400 --> 00:18:29,480
starting text and a decoder<font color="#E5E5E5"> network to</font>

484
00:18:27,800 --> 00:18:31,070
<font color="#E5E5E5">use the output and the Dakota memory to</font>

485
00:18:29,480 --> 00:18:33,440
predict<font color="#E5E5E5"> the output so think of the</font>

486
00:18:31,070 --> 00:18:35,990
encoder network is a network that<font color="#CCCCCC"> sort</font>

487
00:18:33,440 --> 00:18:38,000
<font color="#E5E5E5">of understands Cantonese and the decoder</font>

488
00:18:35,990 --> 00:18:39,950
network is a network<font color="#E5E5E5"> that understands</font>

489
00:18:38,000 --> 00:18:41,750
English<font color="#CCCCCC"> and they're able to talk to each</font>

490
00:18:39,950 --> 00:18:44,210
<font color="#E5E5E5">other in their sort</font><font color="#CCCCCC"> of internal</font>

491
00:18:41,750 --> 00:18:46,670
intermediary language and then take

492
00:18:44,210 --> 00:18:48,890
characters as they come in and Cantonese

493
00:18:46,670 --> 00:18:53,900
and convert them into sort<font color="#E5E5E5"> of characters</font>

494
00:18:48,890 --> 00:18:55,370
as they come in and in English<font color="#CCCCCC"> also</font><font color="#E5E5E5"> this</font>

495
00:18:53,900 --> 00:18:58,940
is way outside the<font color="#E5E5E5"> scope but Karis has a</font>

496
00:18:55,370 --> 00:19:01,669
nice blog on this<font color="#E5E5E5"> and a lot of the code</font>

497
00:18:58,940 --> 00:19:05,810
use<font color="#E5E5E5"> and this is very similar</font><font color="#CCCCCC"> to the</font>

498
00:19:01,670 --> 00:19:07,730
example<font color="#CCCCCC"> code</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> kerasys github so</font><font color="#E5E5E5"> I</font>

499
00:19:05,810 --> 00:19:09,320
initially tried to translate<font color="#E5E5E5"> an entire</font>

500
00:19:07,730 --> 00:19:11,300
line I got<font color="#CCCCCC"> a little overzealous</font><font color="#E5E5E5"> and I</font>

501
00:19:09,320 --> 00:19:13,159
was like we're<font color="#E5E5E5"> gonna stand entire lines</font>

502
00:19:11,300 --> 00:19:16,280
at once<font color="#CCCCCC"> machines</font><font color="#E5E5E5"> are going to take over</font>

503
00:19:13,160 --> 00:19:18,140
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> gonna be great</font><font color="#CCCCCC"> so we start with</font>

504
00:19:16,280 --> 00:19:21,860
this this<font color="#CCCCCC"> messed up global store</font>

505
00:19:18,140 --> 00:19:24,500
database region sort of string<font color="#CCCCCC"> or lime</font>

506
00:19:21,860 --> 00:19:26,389
and<font color="#E5E5E5"> it started well it started out</font><font color="#CCCCCC"> it's</font>

507
00:19:24,500 --> 00:19:28,400
predicting line<font color="#CCCCCC"> or character by</font>

508
00:19:26,390 --> 00:19:31,550
character and<font color="#E5E5E5"> it got global</font><font color="#CCCCCC"> and the</font>

509
00:19:28,400 --> 00:19:33,260
colon and then<font color="#E5E5E5"> oh no it got user and</font>

510
00:19:31,550 --> 00:19:35,480
remember it's using the previous

511
00:19:33,260 --> 00:19:39,220
<font color="#CCCCCC">predictions to predict the next one so</font>

512
00:19:35,480 --> 00:19:42,110
it just<font color="#CCCCCC"> really</font><font color="#E5E5E5"> goes off the rails I</font>

513
00:19:39,220 --> 00:19:43,460
don't know if that valid or not<font color="#E5E5E5"> it'd be</font>

514
00:19:42,110 --> 00:19:46,159
interesting<font color="#E5E5E5"> to see what that what</font>

515
00:19:43,460 --> 00:19:48,410
<font color="#E5E5E5">actually happens</font><font color="#CCCCCC"> so I decided to</font>

516
00:19:46,160 --> 00:19:50,720
downgrade<font color="#E5E5E5"> the</font><font color="#CCCCCC"> scope a little bit so pick</font>

517
00:19:48,410 --> 00:19:52,220
words in each line<font color="#E5E5E5"> to consider so</font><font color="#CCCCCC"> we're</font>

518
00:19:50,720 --> 00:19:54,110
<font color="#CCCCCC">trying to find</font><font color="#E5E5E5"> the the</font><font color="#CCCCCC"> corresponding</font>

519
00:19:52,220 --> 00:19:59,450
word in an obfuscated and non-obvious

520
00:19:54,110 --> 00:20:00,320
<font color="#CCCCCC">cated file</font><font color="#E5E5E5"> so like if before we just</font>

521
00:19:59,450 --> 00:20:03,320
looked at

522
00:20:00,320 --> 00:20:06,350
store AWS region as a word or just AWS

523
00:20:03,320 --> 00:20:09,019
region<font color="#E5E5E5"> as a word and then try to match</font>

524
00:20:06,350 --> 00:20:11,840
<font color="#CCCCCC">that</font><font color="#E5E5E5"> messed up version to the original</font>

525
00:20:09,019 --> 00:20:13,190
version<font color="#CCCCCC"> that's not nest up</font><font color="#E5E5E5"> so the method</font>

526
00:20:11,840 --> 00:20:15,439
I'm using<font color="#E5E5E5"> grabs most of the variables</font>

527
00:20:13,190 --> 00:20:17,269
and<font color="#CCCCCC"> other EC obfuscated stuff and so</font><font color="#E5E5E5"> you</font>

528
00:20:15,440 --> 00:20:18,919
use the obvious<font color="#CCCCCC"> gated word as the input</font>

529
00:20:17,269 --> 00:20:21,500
and the non-obvious<font color="#CCCCCC"> gated word is a</font>

530
00:20:18,919 --> 00:20:23,000
<font color="#E5E5E5">desired output during training and so it</font>

531
00:20:21,500 --> 00:20:24,799
predicts character by character to get

532
00:20:23,000 --> 00:20:25,760
the new<font color="#E5E5E5"> input data</font><font color="#CCCCCC"> it still has some</font>

533
00:20:24,799 --> 00:20:27,879
quirks

534
00:20:25,760 --> 00:20:33,110
so this get local membership turned<font color="#E5E5E5"> into</font>

535
00:20:27,880 --> 00:20:35,179
get<font color="#CCCCCC"> lock me relation as an aside I</font>

536
00:20:33,110 --> 00:20:36,949
actually doubled the training data and

537
00:20:35,179 --> 00:20:39,049
doubled<font color="#E5E5E5"> the training time</font><font color="#CCCCCC"> and this works</font>

538
00:20:36,950 --> 00:20:42,169
perfectly<font color="#E5E5E5"> now but I thought I'd leave</font><font color="#CCCCCC"> it</font>

539
00:20:39,049 --> 00:20:44,720
in because it was funny<font color="#CCCCCC"> but in</font><font color="#E5E5E5"> general</font>

540
00:20:42,169 --> 00:20:46,070
it performs<font color="#CCCCCC"> very well so this sort</font><font color="#E5E5E5"> of</font>

541
00:20:44,720 --> 00:20:47,990
messed<font color="#E5E5E5"> up local group turns into</font>

542
00:20:46,070 --> 00:20:49,939
properly capitalized<font color="#E5E5E5"> vagrants all</font>

543
00:20:47,990 --> 00:20:54,350
<font color="#E5E5E5">lowercase PS bound parameters is</font><font color="#CCCCCC"> the</font>

544
00:20:49,940 --> 00:20:56,029
right casing<font color="#E5E5E5"> oh that's good</font><font color="#CCCCCC"> so now we've</font>

545
00:20:54,350 --> 00:20:58,519
<font color="#CCCCCC">done</font><font color="#E5E5E5"> four things we have a file status</font>

546
00:20:56,029 --> 00:21:00,320
classifier we have<font color="#CCCCCC"> addy encoder</font><font color="#E5E5E5"> we have</font>

547
00:20:58,519 --> 00:21:04,100
a div<font color="#E5E5E5"> skater and we have a clean up</font>

548
00:21:00,320 --> 00:21:06,678
<font color="#CCCCCC">Network so let's let's give it</font><font color="#E5E5E5"> a shot</font><font color="#CCCCCC"> we</font>

549
00:21:04,100 --> 00:21:11,809
have original<font color="#E5E5E5"> file this thing proper</font>

550
00:21:06,679 --> 00:21:13,519
<font color="#CCCCCC">powershell obfuscated encoded and then</font>

551
00:21:11,809 --> 00:21:15,710
what we're<font color="#E5E5E5"> gonna do is we're gonna run</font>

552
00:21:13,519 --> 00:21:17,210
it<font color="#CCCCCC"> through and check and we're gonna do</font>

553
00:21:15,710 --> 00:21:19,490
all these steps<font color="#E5E5E5"> so initially we check</font>

554
00:21:17,210 --> 00:21:21,740
the status if it determines<font color="#CCCCCC"> that</font><font color="#E5E5E5"> encoded</font>

555
00:21:19,490 --> 00:21:23,480
<font color="#E5E5E5">runs it</font><font color="#CCCCCC"> through the d encoder</font><font color="#E5E5E5"> returns it</font>

556
00:21:21,740 --> 00:21:26,299
back<font color="#E5E5E5"> to the status checker</font><font color="#CCCCCC"> if it</font>

557
00:21:23,480 --> 00:21:27,740
determines<font color="#CCCCCC"> is</font><font color="#E5E5E5"> obvious gated it</font><font color="#CCCCCC"> D avi</font>

558
00:21:26,299 --> 00:21:28,460
<font color="#CCCCCC">skates it runs it once it back through</font>

559
00:21:27,740 --> 00:21:30,260
<font color="#E5E5E5">the status checker</font>

560
00:21:28,460 --> 00:21:32,870
determines its non-obvious<font color="#CCCCCC"> catted then</font>

561
00:21:30,260 --> 00:21:33,950
it outputs<font color="#E5E5E5"> the file and so if it D</font>

562
00:21:32,870 --> 00:21:36,709
obviously<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> something that's going to</font>

563
00:21:33,950 --> 00:21:39,110
<font color="#CCCCCC">return a partially fixed</font><font color="#E5E5E5"> so that's just</font>

564
00:21:36,710 --> 00:21:40,909
<font color="#E5E5E5">with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> D off station logic and</font><font color="#CCCCCC"> the</font>

565
00:21:39,110 --> 00:21:42,949
<font color="#E5E5E5">fully fixed</font><font color="#CCCCCC"> version with the</font><font color="#E5E5E5"> clean</font><font color="#CCCCCC"> up</font>

566
00:21:40,909 --> 00:21:45,830
<font color="#CCCCCC">network applied as well so we're gonna</font>

567
00:21:42,950 --> 00:21:47,299
<font color="#E5E5E5">see the the partially fixed version you</font>

568
00:21:45,830 --> 00:21:51,799
know we saw that before<font color="#CCCCCC"> that was pretty</font>

569
00:21:47,299 --> 00:21:54,139
cool<font color="#E5E5E5"> and then the cleaned up version</font><font color="#CCCCCC"> so</font>

570
00:21:51,799 --> 00:21:56,000
all those<font color="#E5E5E5"> things almost all those things</font>

571
00:21:54,139 --> 00:21:58,850
have<font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> now there's still</font><font color="#E5E5E5"> some work</font>

572
00:21:56,000 --> 00:22:02,120
<font color="#CCCCCC">to do you can</font><font color="#E5E5E5"> see the SR number on line</font>

573
00:21:58,850 --> 00:22:04,908
<font color="#CCCCCC">for</font><font color="#E5E5E5"> that one didn't quite get picked up</font>

574
00:22:02,120 --> 00:22:06,860
and user handle near the<font color="#CCCCCC"> bottom that</font><font color="#E5E5E5"> one</font>

575
00:22:04,909 --> 00:22:11,240
didn't quite get picked up<font color="#E5E5E5"> but with this</font>

576
00:22:06,860 --> 00:22:13,039
is trained on 30,000 samples with their

577
00:22:11,240 --> 00:22:14,179
various and<font color="#E5E5E5"> coatings and occupations</font>

578
00:22:13,039 --> 00:22:16,940
<font color="#E5E5E5">which as</font>

579
00:22:14,179 --> 00:22:20,119
neural networks<font color="#CCCCCC"> goes</font><font color="#E5E5E5"> not a lot so this</font>

580
00:22:16,940 --> 00:22:23,720
this has a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> room to</font><font color="#CCCCCC"> improve but it</font>

581
00:22:20,119 --> 00:22:26,389
it<font color="#E5E5E5"> pretty</font><font color="#CCCCCC"> much works so some</font><font color="#E5E5E5"> some notes</font>

582
00:22:23,720 --> 00:22:27,950
about<font color="#E5E5E5"> this as we do a little recap the</font>

583
00:22:26,389 --> 00:22:29,840
output is not necessarily valid

584
00:22:27,950 --> 00:22:31,009
<font color="#E5E5E5">PowerShell there are certain things I</font>

585
00:22:29,840 --> 00:22:34,340
can see that<font color="#E5E5E5"> it's going to break this</font>

586
00:22:31,009 --> 00:22:36,499
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> they're unbalanced</font><font color="#CCCCCC"> parentheses</font>

587
00:22:34,340 --> 00:22:39,230
<font color="#CCCCCC">there's an extra</font><font color="#E5E5E5"> period in there</font>

588
00:22:36,499 --> 00:22:41,389
somewhere<font color="#CCCCCC"> some stuff</font><font color="#E5E5E5"> like that so but</font>

589
00:22:39,230 --> 00:22:43,940
this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> for investigators to</font><font color="#CCCCCC"> look at not</font>

590
00:22:41,389 --> 00:22:46,279
<font color="#E5E5E5">to run</font><font color="#CCCCCC"> I still</font><font color="#E5E5E5"> think I'm gonna be able</font>

591
00:22:43,940 --> 00:22:48,019
<font color="#E5E5E5">to get this to</font><font color="#CCCCCC"> work where it produces</font>

592
00:22:46,279 --> 00:22:51,080
valid PowerShell at the end there's just

593
00:22:48,019 --> 00:22:53,720
a little<font color="#CCCCCC"> bit more to do</font><font color="#E5E5E5"> and as a note</font>

594
00:22:51,080 --> 00:22:55,189
about machine<font color="#CCCCCC"> learning in general</font><font color="#E5E5E5"> and</font>

595
00:22:53,720 --> 00:22:57,919
<font color="#CCCCCC">the</font><font color="#E5E5E5"> clean up</font><font color="#CCCCCC"> network and specific</font>

596
00:22:55,190 --> 00:22:59,690
there's a chance that<font color="#CCCCCC"> it's overtraining</font>

597
00:22:57,919 --> 00:23:01,999
<font color="#E5E5E5">a little bit and doing some memorization</font>

598
00:22:59,690 --> 00:23:03,379
<font color="#CCCCCC">this is a problem with with like I said</font>

599
00:23:01,999 --> 00:23:06,529
machine learning<font color="#E5E5E5"> especially when they're</font>

600
00:23:03,379 --> 00:23:08,240
all networks<font color="#CCCCCC"> but for the purpose</font><font color="#E5E5E5"> of this</font>

601
00:23:06,529 --> 00:23:10,220
I'm gonna argue that<font color="#E5E5E5"> that sort of a</font>

602
00:23:08,240 --> 00:23:12,399
difference without<font color="#CCCCCC"> a</font><font color="#E5E5E5"> distinction if it's</font>

603
00:23:10,220 --> 00:23:15,379
learning<font color="#E5E5E5"> how to handle random cased</font>

604
00:23:12,399 --> 00:23:17,449
variables and then output<font color="#CCCCCC"> a correctly</font>

605
00:23:15,379 --> 00:23:19,610
cased variable that it memorized sort of

606
00:23:17,450 --> 00:23:21,049
fits with<font color="#CCCCCC"> that pattern</font><font color="#E5E5E5"> though</font><font color="#CCCCCC"> that's</font>

607
00:23:19,610 --> 00:23:23,899
solving the same problem that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> were</font>

608
00:23:21,049 --> 00:23:26,059
<font color="#CCCCCC">out set to do so</font>

609
00:23:23,899 --> 00:23:28,340
so it works that might end up<font color="#E5E5E5"> having an</font>

610
00:23:26,059 --> 00:23:30,259
upper bound as a<font color="#CCCCCC"> 90%</font><font color="#E5E5E5"> solution because it</font>

611
00:23:28,340 --> 00:23:32,539
won't be<font color="#E5E5E5"> able to do much with variables</font>

612
00:23:30,259 --> 00:23:35,779
that it's<font color="#E5E5E5"> never seen as some sample of</font>

613
00:23:32,539 --> 00:23:38,480
before versus the<font color="#E5E5E5"> 95 percent solution if</font>

614
00:23:35,779 --> 00:23:39,529
it<font color="#CCCCCC"> was learning proper case it we're</font>

615
00:23:38,480 --> 00:23:41,570
gonna have<font color="#E5E5E5"> to do a lot of introspection</font>

616
00:23:39,529 --> 00:23:43,460
and<font color="#E5E5E5"> a deep dive to determine if it's</font>

617
00:23:41,570 --> 00:23:48,230
memorizing or not because you know

618
00:23:43,460 --> 00:23:50,330
<font color="#E5E5E5">neural networks and stuff fun and back</font>

619
00:23:48,230 --> 00:23:52,429
to<font color="#E5E5E5"> back to one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> my original points</font>

620
00:23:50,330 --> 00:23:55,189
<font color="#E5E5E5">since I said I I like to work with</font>

621
00:23:52,429 --> 00:23:57,350
<font color="#E5E5E5">ambiguity and uncertainty</font><font color="#CCCCCC"> for the sake</font>

622
00:23:55,190 --> 00:23:59,990
of generalization<font color="#E5E5E5"> only three things here</font>

623
00:23:57,350 --> 00:24:02,360
are specific<font color="#CCCCCC"> to</font><font color="#E5E5E5"> PowerShell one the</font>

624
00:23:59,990 --> 00:24:03,980
samples<font color="#E5E5E5"> for the file status classifier</font>

625
00:24:02,360 --> 00:24:04,908
and for the clean up<font color="#CCCCCC"> Network if you're</font>

626
00:24:03,980 --> 00:24:07,399
going<font color="#E5E5E5"> to do this in another language</font>

627
00:24:04,909 --> 00:24:09,740
<font color="#CCCCCC">you're going</font><font color="#E5E5E5"> to need like samples in</font>

628
00:24:07,399 --> 00:24:10,939
that<font color="#E5E5E5"> language</font><font color="#CCCCCC"> fortunately there is</font>

629
00:24:09,740 --> 00:24:13,190
something in neural<font color="#CCCCCC"> networks</font><font color="#E5E5E5"> called</font>

630
00:24:10,940 --> 00:24:15,769
transfer learning<font color="#E5E5E5"> where if you sort of</font>

631
00:24:13,190 --> 00:24:18,110
<font color="#E5E5E5">baked in training on something you can</font>

632
00:24:15,769 --> 00:24:20,269
train the last little bit with the new

633
00:24:18,110 --> 00:24:22,100
samples far fewer samples<font color="#E5E5E5"> than you had</font>

634
00:24:20,269 --> 00:24:23,570
and<font color="#CCCCCC"> we'll learn that that's because a</font>

635
00:24:22,100 --> 00:24:25,219
<font color="#E5E5E5">lot of the internal structure</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

636
00:24:23,570 --> 00:24:27,919
<font color="#E5E5E5">network is learning just how to process</font>

637
00:24:25,220 --> 00:24:29,540
<font color="#CCCCCC">text how to</font><font color="#E5E5E5"> make relationships</font>

638
00:24:27,920 --> 00:24:34,430
and it's<font color="#E5E5E5"> just the</font><font color="#CCCCCC"> ins that you're going</font>

639
00:24:29,540 --> 00:24:36,710
<font color="#E5E5E5">to be fixing up</font><font color="#CCCCCC"> also the D encoding</font>

640
00:24:34,430 --> 00:24:39,050
logic<font color="#CCCCCC"> I wrote this with a PowerShell</font>

641
00:24:36,710 --> 00:24:40,730
<font color="#CCCCCC">example but it's all a regex thing so it</font>

642
00:24:39,050 --> 00:24:42,560
<font color="#CCCCCC">might work with</font><font color="#E5E5E5"> another</font><font color="#CCCCCC"> language without</font>

643
00:24:40,730 --> 00:24:44,960
<font color="#E5E5E5">change probably it's going to need a</font>

644
00:24:42,560 --> 00:24:47,810
tweak or<font color="#E5E5E5"> two</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> that's easy to do and</font>

645
00:24:44,960 --> 00:24:49,280
the deification logic<font color="#E5E5E5"> each language</font><font color="#CCCCCC"> is</font>

646
00:24:47,810 --> 00:24:51,649
going<font color="#CCCCCC"> to have their</font><font color="#E5E5E5"> quirks how they how</font>

647
00:24:49,280 --> 00:24:53,899
<font color="#CCCCCC">they handle obfuscation but the way this</font>

648
00:24:51,650 --> 00:24:56,150
is<font color="#E5E5E5"> built you can make a little quick</font>

649
00:24:53,900 --> 00:24:58,760
define add it to a config file and<font color="#E5E5E5"> run</font>

650
00:24:56,150 --> 00:25:02,840
that<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> really</font><font color="#CCCCCC"> easy to just add</font>

651
00:24:58,760 --> 00:25:04,940
stuff<font color="#CCCCCC"> to this unfortunately today</font><font color="#E5E5E5"> I'm</font>

652
00:25:02,840 --> 00:25:06,980
not<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> have a tool or code to release</font>

653
00:25:04,940 --> 00:25:09,650
<font color="#E5E5E5">mostly because I was fixing it on the</font>

654
00:25:06,980 --> 00:25:12,800
plane last night<font color="#E5E5E5"> and it's not quite</font>

655
00:25:09,650 --> 00:25:14,690
<font color="#E5E5E5">clean enough</font><font color="#CCCCCC"> to come out but we're gonna</font>

656
00:25:12,800 --> 00:25:17,389
have a blog in a couple<font color="#E5E5E5"> weeks with a lot</font>

657
00:25:14,690 --> 00:25:20,420
more details and a release there<font color="#E5E5E5"> and</font>

658
00:25:17,390 --> 00:25:22,760
that's all I got for a talk<font color="#CCCCCC"> happy to</font>

659
00:25:20,420 --> 00:25:25,400
take any questions<font color="#CCCCCC"> I know</font><font color="#E5E5E5"> we're right at</font>

660
00:25:22,760 --> 00:25:28,420
time so if anyone wants<font color="#CCCCCC"> to do after</font><font color="#E5E5E5"> or</font>

661
00:25:25,400 --> 00:25:28,420
<font color="#E5E5E5">here I'm good to go</font>

662
00:25:33,180 --> 00:25:36,660
[Applause]

