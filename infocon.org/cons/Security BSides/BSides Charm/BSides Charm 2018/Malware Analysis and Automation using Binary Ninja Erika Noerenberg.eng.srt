1
00:00:07,340 --> 00:00:15,719
<font color="#E5E5E5">all right I guess we'll get started</font><font color="#CCCCCC"> here</font>

2
00:00:09,420 --> 00:00:17,820
<font color="#CCCCCC">so I want</font><font color="#E5E5E5"> to talk about malware analysis</font>

3
00:00:15,719 --> 00:00:20,550
<font color="#E5E5E5">and automation with binary ninja which</font>

4
00:00:17,820 --> 00:00:23,970
is a new<font color="#E5E5E5"> soft wallet of</font><font color="#CCCCCC"> Li new software</font>

5
00:00:20,550 --> 00:00:25,529
program so we're gonna cover<font color="#E5E5E5"> you know</font>

6
00:00:23,970 --> 00:00:28,519
what is binary ninja<font color="#CCCCCC"> in case you guys</font>

7
00:00:25,529 --> 00:00:31,259
haven't heard<font color="#E5E5E5"> of it why binary ninja</font>

8
00:00:28,519 --> 00:00:34,170
<font color="#CCCCCC">brief introduction to a malware family</font>

9
00:00:31,260 --> 00:00:36,300
called plug X if you haven't<font color="#E5E5E5"> heard of it</font>

10
00:00:34,170 --> 00:00:38,550
disassembly<font color="#CCCCCC"> and intermediate languages</font>

11
00:00:36,300 --> 00:00:40,949
in binary<font color="#CCCCCC"> 'land ninja</font><font color="#E5E5E5"> and then the</font>

12
00:00:38,550 --> 00:00:44,879
automation<font color="#E5E5E5"> of plug</font><font color="#CCCCCC"> X string decryption</font>

13
00:00:40,950 --> 00:00:47,100
using<font color="#CCCCCC"> binary data say Who am I I'm not</font>

14
00:00:44,879 --> 00:00:51,019
in<font color="#E5E5E5"> any way affiliated with vector 35 the</font>

15
00:00:47,100 --> 00:00:53,550
company that is<font color="#E5E5E5"> developing binary ninja</font>

16
00:00:51,020 --> 00:00:58,829
<font color="#E5E5E5">but I actually worked for</font><font color="#CCCCCC"> carbon</font><font color="#E5E5E5"> block</font>

17
00:00:53,550 --> 00:01:00,989
<font color="#E5E5E5">as of last Monday so yeah a little bit</font>

18
00:00:58,829 --> 00:01:02,239
<font color="#E5E5E5">new here and I have my lovely corporate</font>

19
00:01:00,989 --> 00:01:04,739
laptop<font color="#E5E5E5"> because I haven't gotten my</font>

20
00:01:02,239 --> 00:01:06,689
<font color="#E5E5E5">analyst laptop so hopefully everything</font>

21
00:01:04,739 --> 00:01:09,600
<font color="#CCCCCC">goes smoothly because I haven't</font><font color="#E5E5E5"> had a</font>

22
00:01:06,689 --> 00:01:10,679
<font color="#E5E5E5">chance to set</font><font color="#CCCCCC"> everything up here but</font>

23
00:01:09,600 --> 00:01:12,720
I've<font color="#E5E5E5"> been in the security</font><font color="#CCCCCC"> interest</font>

24
00:01:10,680 --> 00:01:15,930
<font color="#CCCCCC">industry for a while doing</font><font color="#E5E5E5"> some malware</font>

25
00:01:12,720 --> 00:01:19,679
<font color="#E5E5E5">re some firmware stuff digital forensics</font>

26
00:01:15,930 --> 00:01:23,909
<font color="#E5E5E5">iOS programming</font><font color="#CCCCCC"> a few years ago I was at</font>

27
00:01:19,680 --> 00:01:25,920
<font color="#E5E5E5">dc-3 in the intrusions</font><font color="#CCCCCC"> Department</font><font color="#E5E5E5"> doing</font>

28
00:01:23,909 --> 00:01:28,470
<font color="#CCCCCC">Defense Network</font><font color="#E5E5E5"> intrusion investigations</font>

29
00:01:25,920 --> 00:01:34,460
which is mostly reversing malware and

30
00:01:28,470 --> 00:01:34,460
then also sometimes<font color="#E5E5E5"> system forensics so</font>

31
00:01:34,759 --> 00:01:40,110
I just wanted to<font color="#E5E5E5"> make some</font>

32
00:01:36,720 --> 00:01:42,509
acknowledgments here everyone in binary

33
00:01:40,110 --> 00:01:44,700
ninja<font color="#E5E5E5"> slack channel is just awesome it's</font>

34
00:01:42,509 --> 00:01:46,920
a great community<font color="#CCCCCC"> but especially Josh</font>

35
00:01:44,700 --> 00:01:49,409
Watson<font color="#E5E5E5"> you if you don't follow him he</font>

36
00:01:46,920 --> 00:01:52,290
works at trail of bits and he's been he

37
00:01:49,409 --> 00:01:55,219
<font color="#E5E5E5">was an early</font><font color="#CCCCCC"> adopter</font><font color="#E5E5E5"> of binary ninja</font>

38
00:01:52,290 --> 00:01:59,310
<font color="#E5E5E5">like a lot of the guys</font><font color="#CCCCCC"> that and girls</font><font color="#E5E5E5"> at</font>

39
00:01:55,219 --> 00:02:01,500
trail<font color="#E5E5E5"> of</font><font color="#CCCCCC"> bits</font><font color="#E5E5E5"> there's a really good but</font>

40
00:01:59,310 --> 00:02:04,200
<font color="#E5E5E5">you can't read it I guess but um I'll</font>

41
00:02:01,500 --> 00:02:09,239
have<font color="#E5E5E5"> these links up later but he he's</font>

42
00:02:04,200 --> 00:02:11,039
written some good blog posts<font color="#CCCCCC"> about using</font>

43
00:02:09,239 --> 00:02:13,830
binary ninja and that's<font color="#E5E5E5"> actually what</font>

44
00:02:11,038 --> 00:02:17,329
how I<font color="#E5E5E5"> found out about it</font><font color="#CCCCCC"> say last June</font>

45
00:02:13,830 --> 00:02:19,710
<font color="#E5E5E5">no</font><font color="#CCCCCC"> June of 2016</font><font color="#E5E5E5"> sorry</font>

46
00:02:17,330 --> 00:02:22,080
he wrote a blog<font color="#CCCCCC"> post where they had</font>

47
00:02:19,710 --> 00:02:24,120
actually automated<font color="#E5E5E5"> use binary ninja to</font>

48
00:02:22,080 --> 00:02:27,240
automate the processing of over<font color="#CCCCCC"> 2000</font>

49
00:02:24,120 --> 00:02:28,920
miners for<font color="#CCCCCC"> a CTF challenge and it was</font>

50
00:02:27,240 --> 00:02:30,830
<font color="#E5E5E5">pretty inspiring</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> was like wow</font><font color="#CCCCCC"> what is</font>

51
00:02:28,920 --> 00:02:33,570
<font color="#CCCCCC">this thing</font><font color="#E5E5E5"> and I ended up getting</font>

52
00:02:30,830 --> 00:02:36,270
<font color="#CCCCCC">licensed in October of that year to try</font>

53
00:02:33,570 --> 00:02:39,269
it out also<font color="#E5E5E5"> Ryan</font><font color="#CCCCCC"> Snyder who works with</font>

54
00:02:36,270 --> 00:02:42,000
vector 35<font color="#E5E5E5"> fairly recently as I was</font><font color="#CCCCCC"> doing</font>

55
00:02:39,270 --> 00:02:44,010
this exercise trying to write<font color="#E5E5E5"> my</font>

56
00:02:42,000 --> 00:02:45,840
decryption script<font color="#CCCCCC"> I ran into a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

57
00:02:44,010 --> 00:02:47,489
<font color="#E5E5E5">problems and he helped me track down</font>

58
00:02:45,840 --> 00:02:49,110
<font color="#E5E5E5">what was actually ended up being a core</font>

59
00:02:47,490 --> 00:02:51,540
bug<font color="#E5E5E5"> that was affecting</font><font color="#CCCCCC"> the disassembly</font>

60
00:02:49,110 --> 00:02:53,370
so and then you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> all the early</font>

61
00:02:51,540 --> 00:02:56,060
adopters that<font color="#E5E5E5"> have been really</font><font color="#CCCCCC"> helpful</font>

62
00:02:53,370 --> 00:02:59,490
<font color="#E5E5E5">in</font><font color="#CCCCCC"> the slack Channel</font><font color="#E5E5E5"> especially and</font><font color="#CCCCCC"> just</font>

63
00:02:56,060 --> 00:03:02,790
really sharing knowledge<font color="#E5E5E5"> on the platform</font>

64
00:02:59,490 --> 00:03:05,820
also Jordan who's one of the main guys

65
00:03:02,790 --> 00:03:07,859
that started vector 35<font color="#E5E5E5"> for help and</font>

66
00:03:05,820 --> 00:03:09,720
support he's always there<font color="#E5E5E5"> but also he</font>

67
00:03:07,860 --> 00:03:11,970
gave me a big<font color="#E5E5E5"> bag</font><font color="#CCCCCC"> of stickers</font><font color="#E5E5E5"> that I can</font>

68
00:03:09,720 --> 00:03:15,270
get out to<font color="#CCCCCC"> you guys so you can see me</font>

69
00:03:11,970 --> 00:03:16,709
after so what is binary ninja it's a

70
00:03:15,270 --> 00:03:18,810
reverse engineering<font color="#E5E5E5"> platform that was</font>

71
00:03:16,709 --> 00:03:22,620
developed<font color="#E5E5E5"> by this company vector 35</font>

72
00:03:18,810 --> 00:03:25,290
released back in July of<font color="#E5E5E5"> 2016 the first</font>

73
00:03:22,620 --> 00:03:27,540
public release<font color="#CCCCCC"> it's got a linear</font>

74
00:03:25,290 --> 00:03:30,420
disassembly mode graph mode the graph

75
00:03:27,540 --> 00:03:31,799
mode has<font color="#CCCCCC"> a disassembly mode</font><font color="#E5E5E5"> LOL and m/l</font>

76
00:03:30,420 --> 00:03:34,440
<font color="#CCCCCC">I'll which I'll talk about a</font><font color="#E5E5E5"> little bit</font>

77
00:03:31,800 --> 00:03:36,660
<font color="#E5E5E5">later</font><font color="#CCCCCC"> there's a fully featured</font><font color="#E5E5E5"> text</font>

78
00:03:34,440 --> 00:03:37,950
editor which I'll be honest was the main

79
00:03:36,660 --> 00:03:39,150
thing that I was using<font color="#CCCCCC"> for the</font><font color="#E5E5E5"> first</font>

80
00:03:37,950 --> 00:03:40,320
probably<font color="#E5E5E5"> a year that</font><font color="#CCCCCC"> I had it because</font>

81
00:03:39,150 --> 00:03:41,940
<font color="#E5E5E5">it's just</font><font color="#CCCCCC"> awesome</font>

82
00:03:40,320 --> 00:03:45,810
<font color="#CCCCCC">they've got built-in transformations</font>

83
00:03:41,940 --> 00:03:48,030
like you can encrypt<font color="#E5E5E5"> and decrypt XOR</font>

84
00:03:45,810 --> 00:03:50,780
with<font color="#E5E5E5"> even you know single</font><font color="#CCCCCC"> byte or multi</font>

85
00:03:48,030 --> 00:03:53,340
<font color="#CCCCCC">bite just pasting the key in</font><font color="#E5E5E5"> it's great</font>

86
00:03:50,780 --> 00:03:55,200
<font color="#E5E5E5">there's also an open plug-in</font>

87
00:03:53,340 --> 00:03:56,940
architecture and the open source

88
00:03:55,200 --> 00:03:59,250
community plug-in repository which is up

89
00:03:56,940 --> 00:04:01,859
on github<font color="#E5E5E5"> its github</font><font color="#CCCCCC"> it's under</font><font color="#E5E5E5"> vector</font>

90
00:03:59,250 --> 00:04:03,709
<font color="#CCCCCC">35s github there's community</font><font color="#E5E5E5"> plugins and</font>

91
00:04:01,860 --> 00:04:07,019
then some of those are<font color="#CCCCCC"> actually adopted</font>

92
00:04:03,709 --> 00:04:09,120
<font color="#E5E5E5">back into the product after there's also</font>

93
00:04:07,019 --> 00:04:10,560
a<font color="#E5E5E5"> very active community slack channel</font>

94
00:04:09,120 --> 00:04:12,150
which<font color="#CCCCCC"> is just great even if you just</font>

95
00:04:10,560 --> 00:04:14,850
want to hang<font color="#E5E5E5"> out</font><font color="#CCCCCC"> there just</font><font color="#E5E5E5"> a bunch of</font>

96
00:04:12,150 --> 00:04:18,709
great<font color="#CCCCCC"> people it's</font><font color="#E5E5E5"> hash tag binary ninja</font>

97
00:04:14,850 --> 00:04:20,940
but they also do announcements support

98
00:04:18,709 --> 00:04:22,410
<font color="#CCCCCC">anytime you have a</font><font color="#E5E5E5"> question you can get</font>

99
00:04:20,940 --> 00:04:24,000
an answer<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> much almost immediately</font>

100
00:04:22,410 --> 00:04:25,710
from somebody whether<font color="#E5E5E5"> it's one of the</font>

101
00:04:24,000 --> 00:04:26,280
vector 35 guys<font color="#E5E5E5"> or somebody that's in the</font>

102
00:04:25,710 --> 00:04:27,950
<font color="#E5E5E5">community</font>

103
00:04:26,280 --> 00:04:30,750
<font color="#E5E5E5">allow the trail of black people</font>

104
00:04:27,950 --> 00:04:35,820
<font color="#E5E5E5">drill bits people hang out in there as</font>

105
00:04:30,750 --> 00:04:37,830
well<font color="#E5E5E5"> so why</font><font color="#CCCCCC"> mine are a ninja</font><font color="#E5E5E5"> so what was</font>

106
00:04:35,820 --> 00:04:40,860
my<font color="#CCCCCC"> motivation is</font><font color="#E5E5E5"> I've been using this</font>

107
00:04:37,830 --> 00:04:43,080
off and on since October<font color="#CCCCCC"> of 2016 when I</font>

108
00:04:40,860 --> 00:04:46,470
first got<font color="#E5E5E5"> my license and I've been an</font>

109
00:04:43,080 --> 00:04:48,539
evangelist for for them<font color="#E5E5E5"> since then but I</font>

110
00:04:46,470 --> 00:04:50,160
realized you know<font color="#E5E5E5"> I'm not really using</font>

111
00:04:48,540 --> 00:04:53,070
<font color="#E5E5E5">it in my</font><font color="#CCCCCC"> day-to-day you</font><font color="#E5E5E5"> know I still</font>

112
00:04:50,160 --> 00:04:54,990
<font color="#E5E5E5">fall back on Ida and a lot of the</font>

113
00:04:53,070 --> 00:04:57,030
malware analysts I<font color="#E5E5E5"> talk to my friends</font>

114
00:04:54,990 --> 00:04:58,890
<font color="#CCCCCC">I'm like you know they're like</font><font color="#E5E5E5"> yeah I've</font>

115
00:04:57,030 --> 00:05:00,929
kind<font color="#E5E5E5"> of loaded up binary ninja and I</font>

116
00:04:58,890 --> 00:05:03,510
come playing around with<font color="#CCCCCC"> it but I</font><font color="#E5E5E5"> still</font>

117
00:05:00,930 --> 00:05:05,190
just<font color="#CCCCCC"> kind of fall back on Ida</font><font color="#E5E5E5"> so back in</font>

118
00:05:03,510 --> 00:05:06,570
January<font color="#E5E5E5"> you know doing quarterly</font>

119
00:05:05,190 --> 00:05:08,130
planning and stuff I'm like you know I

120
00:05:06,570 --> 00:05:09,330
<font color="#E5E5E5">need to come up</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> a project for this</font>

121
00:05:08,130 --> 00:05:12,390
quarter what do I want to do this

122
00:05:09,330 --> 00:05:14,609
quarter<font color="#CCCCCC"> and so I decided</font><font color="#E5E5E5"> I was like you</font>

123
00:05:12,390 --> 00:05:16,610
know I'd<font color="#E5E5E5"> really like to just take some</font>

124
00:05:14,610 --> 00:05:19,110
common malware analysis tasks that<font color="#E5E5E5"> I do</font>

125
00:05:16,610 --> 00:05:21,630
<font color="#E5E5E5">regularly</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> see if I can just do this</font>

126
00:05:19,110 --> 00:05:24,770
and and using binary ninja<font color="#E5E5E5"> just force</font>

127
00:05:21,630 --> 00:05:26,760
<font color="#CCCCCC">myself to</font><font color="#E5E5E5"> just do it not go back to</font><font color="#CCCCCC"> Ida</font>

128
00:05:24,770 --> 00:05:29,310
so I was thinking about it<font color="#E5E5E5"> and I thought</font>

129
00:05:26,760 --> 00:05:30,240
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know plug X is a malware family if</font>

130
00:05:29,310 --> 00:05:30,690
you're<font color="#E5E5E5"> not familiar it's been around</font>

131
00:05:30,240 --> 00:05:33,090
forever

132
00:05:30,690 --> 00:05:35,850
<font color="#E5E5E5">you know first samples were found back</font>

133
00:05:33,090 --> 00:05:38,219
in<font color="#E5E5E5"> 2008 so you know 10</font><font color="#CCCCCC"> years worth and</font>

134
00:05:35,850 --> 00:05:40,530
it's still kind of you know<font color="#E5E5E5"> even the</font>

135
00:05:38,220 --> 00:05:42,030
first samples of it or variations the

136
00:05:40,530 --> 00:05:45,000
first samples of it you're still seeing

137
00:05:42,030 --> 00:05:46,619
it wild so if you look in<font color="#E5E5E5"> any of the</font>

138
00:05:45,000 --> 00:05:48,960
kind of automation<font color="#E5E5E5"> platforms there's</font>

139
00:05:46,620 --> 00:05:50,880
almost always a<font color="#CCCCCC"> plugin mod a</font><font color="#E5E5E5"> plug-in or</font>

140
00:05:48,960 --> 00:05:53,250
like a module that<font color="#E5E5E5"> handles plug X</font>

141
00:05:50,880 --> 00:05:55,230
because it<font color="#E5E5E5"> usually it always follows</font>

142
00:05:53,250 --> 00:05:57,570
<font color="#E5E5E5">kind of the same or usually follows the</font>

143
00:05:55,230 --> 00:05:59,640
<font color="#E5E5E5">same methodology so these things</font>

144
00:05:57,570 --> 00:06:03,030
<font color="#E5E5E5">continue the signatures and decryption</font>

145
00:05:59,640 --> 00:06:03,930
routines<font color="#E5E5E5"> tend to keep working on</font><font color="#CCCCCC"> them so</font>

146
00:06:03,030 --> 00:06:07,739
I thought<font color="#E5E5E5"> that would be a perfect</font>

147
00:06:03,930 --> 00:06:10,290
<font color="#E5E5E5">example to</font><font color="#CCCCCC"> do for this</font><font color="#E5E5E5"> so I decided</font><font color="#CCCCCC"> you</font>

148
00:06:07,740 --> 00:06:12,120
<font color="#E5E5E5">know I'm gonna do kind</font><font color="#CCCCCC"> of a history</font><font color="#E5E5E5"> of</font>

149
00:06:10,290 --> 00:06:14,490
plug X which the blog is that<font color="#E5E5E5"> I have a</font>

150
00:06:12,120 --> 00:06:16,890
blog post<font color="#CCCCCC"> up on my former company's</font>

151
00:06:14,490 --> 00:06:19,760
<font color="#CCCCCC">website</font><font color="#E5E5E5"> going over</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of the history</font>

152
00:06:16,890 --> 00:06:22,440
of plug X and pulling together all the

153
00:06:19,760 --> 00:06:24,840
kind<font color="#CCCCCC"> of historical research over</font><font color="#E5E5E5"> the</font>

154
00:06:22,440 --> 00:06:26,790
<font color="#CCCCCC">last ten years</font><font color="#E5E5E5"> and I thought you</font><font color="#CCCCCC"> know</font>

155
00:06:24,840 --> 00:06:28,890
why<font color="#CCCCCC"> don't I</font><font color="#E5E5E5"> just take the simple string</font>

156
00:06:26,790 --> 00:06:32,370
decryption one of the first steps it

157
00:06:28,890 --> 00:06:34,110
decrypts<font color="#E5E5E5"> the API calls so I thought you</font>

158
00:06:32,370 --> 00:06:36,930
know<font color="#E5E5E5"> that's a simple thing</font><font color="#CCCCCC"> can automate</font>

159
00:06:34,110 --> 00:06:39,539
that using binary ninja<font color="#E5E5E5"> and you know why</font>

160
00:06:36,930 --> 00:06:40,660
<font color="#E5E5E5">but why do I like binary ninja first of</font>

161
00:06:39,539 --> 00:06:43,300
<font color="#E5E5E5">all you know</font>

162
00:06:40,660 --> 00:06:45,660
as a monster<font color="#E5E5E5"> not</font><font color="#CCCCCC"> a monster but you know</font>

163
00:06:43,300 --> 00:06:48,910
it's<font color="#E5E5E5"> it's been the</font><font color="#CCCCCC"> de-facto</font><font color="#E5E5E5"> tool for</font>

164
00:06:45,660 --> 00:06:50,260
decades basically<font color="#CCCCCC"> and so it's</font><font color="#E5E5E5"> kind of</font>

165
00:06:48,910 --> 00:06:52,300
nice to<font color="#CCCCCC"> see somebody</font><font color="#E5E5E5"> coming in</font><font color="#CCCCCC"> and</font>

166
00:06:50,260 --> 00:06:53,950
trying to shake up<font color="#CCCCCC"> the industry and just</font>

167
00:06:52,300 --> 00:06:55,480
the progress that<font color="#CCCCCC"> I've watched over the</font>

168
00:06:53,950 --> 00:06:57,159
last two<font color="#CCCCCC"> years it's been amazing</font><font color="#E5E5E5"> and</font>

169
00:06:55,480 --> 00:06:59,290
it's a<font color="#E5E5E5"> great team of</font><font color="#CCCCCC"> developers</font><font color="#E5E5E5"> they're</font>

170
00:06:57,160 --> 00:07:01,150
very<font color="#E5E5E5"> responsive</font><font color="#CCCCCC"> to the community anytime</font>

171
00:06:59,290 --> 00:07:03,310
there's a bug<font color="#E5E5E5"> or something that you know</font>

172
00:07:01,150 --> 00:07:04,870
feature that<font color="#E5E5E5"> people want to get in you</font>

173
00:07:03,310 --> 00:07:07,600
know<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> right there they're taking</font>

174
00:07:04,870 --> 00:07:09,460
<font color="#E5E5E5">that feedback and they implement things</font>

175
00:07:07,600 --> 00:07:12,250
very<font color="#E5E5E5"> quickly so it's it's</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> an</font>

176
00:07:09,460 --> 00:07:14,320
agile platform<font color="#CCCCCC"> also you know the</font>

177
00:07:12,250 --> 00:07:15,610
<font color="#E5E5E5">community support is just great</font><font color="#CCCCCC"> all the</font>

178
00:07:14,320 --> 00:07:18,520
people<font color="#E5E5E5"> that have</font><font color="#CCCCCC"> adopted it everybody</font>

179
00:07:15,610 --> 00:07:23,320
<font color="#E5E5E5">wants to help give</font><font color="#CCCCCC"> back and I've</font><font color="#E5E5E5"> always</font>

180
00:07:18,520 --> 00:07:25,299
had<font color="#E5E5E5"> a very responsive feedback to</font>

181
00:07:23,320 --> 00:07:28,270
questions<font color="#E5E5E5"> and things like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and also</font>

182
00:07:25,300 --> 00:07:30,070
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> very extensible the API is great</font>

183
00:07:28,270 --> 00:07:33,400
it's fully documented which is great

184
00:07:30,070 --> 00:07:39,280
it's actually readable<font color="#E5E5E5"> and very easy to</font>

185
00:07:33,400 --> 00:07:40,719
<font color="#E5E5E5">understand so one of the things that I</font>

186
00:07:39,280 --> 00:07:43,239
talked about at<font color="#CCCCCC"> the beginning was these</font>

187
00:07:40,720 --> 00:07:46,180
intermediate languages so binary ninja

188
00:07:43,240 --> 00:07:49,000
has its own intermediate language<font color="#E5E5E5"> that</font>

189
00:07:46,180 --> 00:07:51,190
<font color="#CCCCCC">are like a set of intermediate languages</font>

190
00:07:49,000 --> 00:07:53,470
that they developed called binary ninja

191
00:07:51,190 --> 00:07:55,210
intermediate language<font color="#E5E5E5"> the first one is</font>

192
00:07:53,470 --> 00:07:57,310
the ll<font color="#CCCCCC"> aisle</font><font color="#E5E5E5"> the lower level</font>

193
00:07:55,210 --> 00:08:00,690
<font color="#E5E5E5">intermediate language and then the</font><font color="#CCCCCC"> ML</font>

194
00:07:57,310 --> 00:08:02,950
aisle the medium<font color="#CCCCCC"> yeah medium level</font>

195
00:08:00,690 --> 00:08:06,190
intermediate<font color="#CCCCCC"> language</font><font color="#E5E5E5"> they're also</font>

196
00:08:02,950 --> 00:08:08,200
developing<font color="#E5E5E5"> an HL aisle for a future</font>

197
00:08:06,190 --> 00:08:10,210
<font color="#E5E5E5">release there's no timeline</font><font color="#CCCCCC"> for that</font>

198
00:08:08,200 --> 00:08:12,760
just<font color="#CCCCCC"> yet but if you're not familiar with</font>

199
00:08:10,210 --> 00:08:15,120
<font color="#CCCCCC">Isles which I wasn't</font><font color="#E5E5E5"> honestly I don't</font>

200
00:08:12,760 --> 00:08:18,669
have<font color="#E5E5E5"> a computer science</font><font color="#CCCCCC"> background to be</font>

201
00:08:15,120 --> 00:08:21,400
honest<font color="#CCCCCC"> I came from math so I</font><font color="#E5E5E5"> wasn't</font>

202
00:08:18,669 --> 00:08:22,599
<font color="#E5E5E5">familiar with this concept</font><font color="#CCCCCC"> but compilers</font>

203
00:08:21,400 --> 00:08:24,700
actually<font color="#CCCCCC"> used this intermediate</font>

204
00:08:22,600 --> 00:08:27,570
representation to analyze an optimal

205
00:08:24,700 --> 00:08:30,460
optimus<font color="#CCCCCC"> Cod thats being compiled and</font>

206
00:08:27,570 --> 00:08:34,569
again<font color="#CCCCCC"> josh from trail abets he were a</font>

207
00:08:30,460 --> 00:08:38,110
really good<font color="#E5E5E5"> blog post on breaking down</font>

208
00:08:34,570 --> 00:08:41,860
<font color="#E5E5E5">the low-level</font><font color="#CCCCCC"> I'll so he's it's a much</font>

209
00:08:38,110 --> 00:08:44,020
more elegant<font color="#CCCCCC"> overview</font><font color="#E5E5E5"> of the aisle for</font>

210
00:08:41,860 --> 00:08:46,330
binary ninja than I can<font color="#E5E5E5"> provide but I</font>

211
00:08:44,020 --> 00:08:47,800
wanted<font color="#E5E5E5"> to get an overview as well so</font>

212
00:08:46,330 --> 00:08:49,960
these intermediate languages basically

213
00:08:47,800 --> 00:08:51,310
provide a higher<font color="#CCCCCC"> level abstraction where</font>

214
00:08:49,960 --> 00:08:52,960
you have the<font color="#E5E5E5"> assembly that's you know</font>

215
00:08:51,310 --> 00:08:54,400
translating your machine code into

216
00:08:52,960 --> 00:08:57,430
something<font color="#E5E5E5"> that's more human</font>

217
00:08:54,400 --> 00:09:00,310
readable<font color="#E5E5E5"> but anybody that studies or</font>

218
00:08:57,430 --> 00:09:02,140
analyzes assembly it's not super human

219
00:09:00,310 --> 00:09:04,300
readable it's not real friendly it's not

220
00:09:02,140 --> 00:09:05,560
like reading<font color="#E5E5E5"> source code right so it</font>

221
00:09:04,300 --> 00:09:07,689
<font color="#E5E5E5">immediately would just provide this</font>

222
00:09:05,560 --> 00:09:08,979
abstraction<font color="#CCCCCC"> that lifts the assembly up</font>

223
00:09:07,690 --> 00:09:11,740
to something<font color="#CCCCCC"> that reads</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> little bit</font>

224
00:09:08,980 --> 00:09:14,050
more like so<font color="#E5E5E5"> source code and I just put</font>

225
00:09:11,740 --> 00:09:15,460
a quote up here<font color="#E5E5E5"> from the actual</font>

226
00:09:14,050 --> 00:09:18,490
documentation<font color="#E5E5E5"> they actually have a</font>

227
00:09:15,460 --> 00:09:20,710
developer's guide for this<font color="#E5E5E5"> lol</font><font color="#CCCCCC"> and it's</font>

228
00:09:18,490 --> 00:09:22,330
it's a<font color="#E5E5E5"> really good read that really</font>

229
00:09:20,710 --> 00:09:24,910
helped me it's that they<font color="#E5E5E5"> step through an</font>

230
00:09:22,330 --> 00:09:26,410
example<font color="#E5E5E5"> to</font><font color="#CCCCCC"> kind of demonstrate what the</font>

231
00:09:24,910 --> 00:09:28,209
aisle is and how it works

232
00:09:26,410 --> 00:09:29,800
so they said the<font color="#E5E5E5"> binary ninja</font>

233
00:09:28,210 --> 00:09:31,600
intermediate language<font color="#E5E5E5"> is a semantic</font>

234
00:09:29,800 --> 00:09:33,280
representation of the assembly<font color="#CCCCCC"> language</font>

235
00:09:31,600 --> 00:09:36,070
instructions<font color="#E5E5E5"> for a native</font><font color="#CCCCCC"> architecture</font>

236
00:09:33,280 --> 00:09:39,490
and they actually<font color="#CCCCCC"> support quite a few</font>

237
00:09:36,070 --> 00:09:42,610
architectures<font color="#CCCCCC"> and unlike well I'm not</font>

238
00:09:39,490 --> 00:09:44,680
<font color="#E5E5E5">gonna get into</font><font color="#CCCCCC"> that but everything is</font>

239
00:09:42,610 --> 00:09:46,930
packaged<font color="#E5E5E5"> unlike Ida you know it's not</font>

240
00:09:44,680 --> 00:09:50,410
<font color="#E5E5E5">like you pay</font><font color="#CCCCCC"> for different</font><font color="#E5E5E5"> architectures</font>

241
00:09:46,930 --> 00:09:53,079
<font color="#E5E5E5">in terms of like D compilation so anyway</font>

242
00:09:50,410 --> 00:09:54,280
bien bien<font color="#CCCCCC"> Eyal is actually a family</font><font color="#E5E5E5"> of</font>

243
00:09:53,080 --> 00:09:56,170
intermediate languages that work

244
00:09:54,280 --> 00:09:58,900
together to provide<font color="#E5E5E5"> functionality at</font>

245
00:09:56,170 --> 00:10:00,670
different abstraction layers so that's

246
00:09:58,900 --> 00:10:03,640
<font color="#E5E5E5">just kind</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> basic overview of these</font>

247
00:10:00,670 --> 00:10:07,240
<font color="#CCCCCC">files this</font><font color="#E5E5E5"> is kind of a tangent</font><font color="#CCCCCC"> but I</font>

248
00:10:03,640 --> 00:10:09,040
just saw this<font color="#CCCCCC"> yesterday Ben Zdenek who</font>

249
00:10:07,240 --> 00:10:10,630
was teaching<font color="#E5E5E5"> the introduction to reverse</font>

250
00:10:09,040 --> 00:10:12,339
engineering yesterday I<font color="#E5E5E5"> went</font><font color="#CCCCCC"> to actually</font>

251
00:10:10,630 --> 00:10:15,490
<font color="#E5E5E5">get these stickers from him because he</font>

252
00:10:12,340 --> 00:10:19,000
brought them<font color="#E5E5E5"> from infiltrate he showed</font>

253
00:10:15,490 --> 00:10:21,580
me this tool or website called compiler

254
00:10:19,000 --> 00:10:23,530
Explorer<font color="#CCCCCC"> and if you</font><font color="#E5E5E5"> haven't seen it</font><font color="#CCCCCC"> this</font>

255
00:10:21,580 --> 00:10:27,070
is really<font color="#E5E5E5"> great so you can basically put</font>

256
00:10:23,530 --> 00:10:29,380
in this is C code<font color="#E5E5E5"> but it's got support</font>

257
00:10:27,070 --> 00:10:30,970
for like<font color="#CCCCCC"> 10 or 12 different languages</font>

258
00:10:29,380 --> 00:10:33,070
<font color="#E5E5E5">but you can basically put in source code</font>

259
00:10:30,970 --> 00:10:37,210
here and it'll disassemble it for you

260
00:10:33,070 --> 00:10:39,160
<font color="#E5E5E5">but it also color codes so like in</font><font color="#CCCCCC"> sum</font>

261
00:10:37,210 --> 00:10:40,660
equals<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> it actually color codes what</font>

262
00:10:39,160 --> 00:10:42,730
the assembly<font color="#CCCCCC"> instruction that</font>

263
00:10:40,660 --> 00:10:43,990
corresponds to that<font color="#E5E5E5"> over here I just</font>

264
00:10:42,730 --> 00:10:46,150
<font color="#CCCCCC">thought this was really cool and</font><font color="#E5E5E5"> it's</font>

265
00:10:43,990 --> 00:10:51,420
you know<font color="#CCCCCC"> it's assembly so it's slightly</font>

266
00:10:46,150 --> 00:10:54,280
<font color="#CCCCCC">relevant</font><font color="#E5E5E5"> back to you this so these</font>

267
00:10:51,420 --> 00:10:55,900
intermediate languages<font color="#E5E5E5"> I wanted to just</font>

268
00:10:54,280 --> 00:10:57,579
<font color="#CCCCCC">kind of give like a pictorial</font>

269
00:10:55,900 --> 00:10:59,020
representation here I know you can't

270
00:10:57,580 --> 00:11:01,480
read this<font color="#CCCCCC"> but we'll go</font><font color="#E5E5E5"> into it a little</font>

271
00:10:59,020 --> 00:11:04,569
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> more in the next slides basically</font>

272
00:11:01,480 --> 00:11:07,330
<font color="#CCCCCC">here's your disassembly and the way that</font>

273
00:11:04,570 --> 00:11:08,170
the intermediate<font color="#CCCCCC"> languages work</font><font color="#E5E5E5"> just by</font>

274
00:11:07,330 --> 00:11:11,620
<font color="#E5E5E5">virtue</font>

275
00:11:08,170 --> 00:11:13,420
of of that their<font color="#E5E5E5"> purpose really you end</font>

276
00:11:11,620 --> 00:11:15,010
up getting kind of<font color="#E5E5E5"> a condensation of</font>

277
00:11:13,420 --> 00:11:17,529
code so it's almost like an optimization

278
00:11:15,010 --> 00:11:20,620
<font color="#E5E5E5">ish so you can see that like on the</font>

279
00:11:17,529 --> 00:11:21,910
lower level representation<font color="#E5E5E5"> this code</font>

280
00:11:20,620 --> 00:11:23,500
gets<font color="#E5E5E5"> collapsed a little bit it's a</font>

281
00:11:21,910 --> 00:11:25,000
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more compact</font><font color="#CCCCCC"> and in the</font>

282
00:11:23,500 --> 00:11:28,990
medium level it's<font color="#E5E5E5"> actually even more</font>

283
00:11:25,000 --> 00:11:31,839
<font color="#E5E5E5">compact so I just put a few like kind of</font>

284
00:11:28,990 --> 00:11:35,440
<font color="#E5E5E5">a quick example of here's like the</font>

285
00:11:31,839 --> 00:11:37,240
<font color="#E5E5E5">descent</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> disassembly</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then what</font>

286
00:11:35,440 --> 00:11:39,100
<font color="#CCCCCC">that would look like in</font><font color="#E5E5E5"> lol what that</font>

287
00:11:37,240 --> 00:11:43,779
looks like in analyst<font color="#E5E5E5"> you can see it's</font>

288
00:11:39,100 --> 00:11:45,699
kind of you know<font color="#E5E5E5"> compressed but let's</font>

289
00:11:43,779 --> 00:11:47,410
look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> it a little</font><font color="#E5E5E5"> bit further so</font>

290
00:11:45,699 --> 00:11:49,599
here's the original disassembly that we

291
00:11:47,410 --> 00:11:52,060
were<font color="#E5E5E5"> looking at there</font><font color="#CCCCCC"> you can see you've</font>

292
00:11:49,600 --> 00:11:56,370
got<font color="#E5E5E5"> a move instruction up here so we're</font>

293
00:11:52,060 --> 00:12:00,579
taking the address for<font color="#E5E5E5"> that function</font>

294
00:11:56,370 --> 00:12:02,230
release<font color="#E5E5E5"> DC moving it into EDI</font><font color="#CCCCCC"> so that we</font>

295
00:12:00,579 --> 00:12:06,099
can call it later<font color="#CCCCCC"> right so this is</font>

296
00:12:02,230 --> 00:12:09,070
<font color="#E5E5E5">typical call for for a disassembly in</font>

297
00:12:06,100 --> 00:12:10,209
disassembly the<font color="#CCCCCC"> loi representation we</font>

298
00:12:09,070 --> 00:12:12,790
<font color="#E5E5E5">can see it looks a little bit more like</font>

299
00:12:10,209 --> 00:12:14,800
source code<font color="#E5E5E5"> so you've got this func the</font>

300
00:12:12,790 --> 00:12:17,319
function address and this dot d<font color="#CCCCCC"> is just</font>

301
00:12:14,800 --> 00:12:20,829
<font color="#E5E5E5">indicating</font><font color="#CCCCCC"> that it's a D word so you'll</font>

302
00:12:17,320 --> 00:12:23,320
have dot d dot<font color="#E5E5E5"> B</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> a binary</font>

303
00:12:20,829 --> 00:12:25,239
ninja representation so it's<font color="#CCCCCC"> actually</font>

304
00:12:23,320 --> 00:12:27,040
<font color="#E5E5E5">just showing this is an assignment EDI</font>

305
00:12:25,240 --> 00:12:30,010
is getting you know<font color="#E5E5E5"> this</font><font color="#CCCCCC"> address and</font>

306
00:12:27,040 --> 00:12:31,630
then it's a call EDI rather than you

307
00:12:30,010 --> 00:12:34,120
know I mean it's not<font color="#CCCCCC"> a whole lot</font>

308
00:12:31,630 --> 00:12:36,010
<font color="#CCCCCC">different right but semantically</font><font color="#E5E5E5"> so then</font>

309
00:12:34,120 --> 00:12:39,940
but<font color="#E5E5E5"> the</font><font color="#CCCCCC"> difference is you've got</font><font color="#E5E5E5"> this</font>

310
00:12:36,010 --> 00:12:42,579
jump here<font color="#E5E5E5"> so instead</font><font color="#CCCCCC"> of doing you know</font>

311
00:12:39,940 --> 00:12:44,529
this move and then testing the register

312
00:12:42,579 --> 00:12:47,349
<font color="#E5E5E5">it's actually going to look more like a</font>

313
00:12:44,529 --> 00:12:49,029
in a false statement<font color="#CCCCCC"> so you know if this</font>

314
00:12:47,350 --> 00:12:52,149
condition then we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> jump here</font>

315
00:12:49,029 --> 00:12:54,970
otherwise that so it<font color="#E5E5E5"> just makes it a</font>

316
00:12:52,149 --> 00:12:58,839
little<font color="#E5E5E5"> bit more human readable</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so</font>

317
00:12:54,970 --> 00:13:01,540
<font color="#E5E5E5">lol versus the ml so here we've got</font>

318
00:12:58,839 --> 00:13:04,690
basically this whole set of instructions

319
00:13:01,540 --> 00:13:07,209
gets complex down here you've got the

320
00:13:04,690 --> 00:13:09,670
the call<font color="#E5E5E5"> basically they've collapsed the</font>

321
00:13:07,209 --> 00:13:11,979
instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> pushing these arguments</font><font color="#E5E5E5"> on to</font>

322
00:13:09,670 --> 00:13:14,139
the stop and then calling<font color="#E5E5E5"> you're just</font>

323
00:13:11,980 --> 00:13:17,140
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> see a function call with the</font>

324
00:13:14,139 --> 00:13:18,970
parameters<font color="#E5E5E5"> so it's just even</font><font color="#CCCCCC"> more human</font>

325
00:13:17,140 --> 00:13:20,290
<font color="#CCCCCC">readable and again similarly</font><font color="#E5E5E5"> you know</font>

326
00:13:18,970 --> 00:13:21,550
this is kind of the<font color="#E5E5E5"> sand but you've got</font>

327
00:13:20,290 --> 00:13:24,640
the if-else statement<font color="#E5E5E5"> rather</font>

328
00:13:21,550 --> 00:13:28,449
<font color="#CCCCCC">a conditional statement</font><font color="#E5E5E5"> so let's look at</font>

329
00:13:24,640 --> 00:13:31,540
the original<font color="#E5E5E5"> disassembly</font><font color="#CCCCCC"> versus this ml</font>

330
00:13:28,450 --> 00:13:33,399
<font color="#E5E5E5">again you know you've got this whole set</font>

331
00:13:31,540 --> 00:13:34,899
of assembly instructions that gets kind

332
00:13:33,399 --> 00:13:37,570
<font color="#CCCCCC">of collapsed just</font><font color="#E5E5E5"> down into three lines</font>

333
00:13:34,899 --> 00:13:40,060
so it's a<font color="#E5E5E5"> little bit less</font><font color="#CCCCCC"> to to pour</font>

334
00:13:37,570 --> 00:13:44,560
<font color="#E5E5E5">through you know makes it a little bit</font>

335
00:13:40,060 --> 00:13:46,449
easier<font color="#CCCCCC"> so one of</font><font color="#E5E5E5"> the things that is a</font>

336
00:13:44,560 --> 00:13:49,899
<font color="#E5E5E5">little bit different with binary view</font><font color="#CCCCCC"> I</font>

337
00:13:46,450 --> 00:13:52,329
mean<font color="#CCCCCC"> with binary ninja is this concept</font>

338
00:13:49,899 --> 00:13:56,230
of<font color="#E5E5E5"> buyer review so when you first load a</font>

339
00:13:52,329 --> 00:13:57,790
<font color="#E5E5E5">binary into binary ninja either whether</font>

340
00:13:56,230 --> 00:13:59,560
<font color="#E5E5E5">it be from the command line</font><font color="#CCCCCC"> says there</font>

341
00:13:57,790 --> 00:14:01,420
is a headless mode<font color="#CCCCCC"> I didn't mention that</font>

342
00:13:59,560 --> 00:14:03,430
it's not in the<font color="#E5E5E5"> demo version there's a</font>

343
00:14:01,420 --> 00:14:07,060
free<font color="#CCCCCC"> demo version but it is</font><font color="#E5E5E5"> in both</font>

344
00:14:03,430 --> 00:14:08,800
personal<font color="#CCCCCC"> and commercial</font><font color="#E5E5E5"> versions but</font>

345
00:14:07,060 --> 00:14:11,229
basically when you load<font color="#CCCCCC"> one of these</font>

346
00:14:08,800 --> 00:14:12,910
binaries into the program<font color="#E5E5E5"> it's going to</font>

347
00:14:11,230 --> 00:14:15,550
give you two different<font color="#E5E5E5"> well</font><font color="#CCCCCC"> okay so I'm</font>

348
00:14:12,910 --> 00:14:17,469
<font color="#E5E5E5">just going</font><font color="#CCCCCC"> to talk about x86 playing PE</font>

349
00:14:15,550 --> 00:14:20,589
binary<font color="#E5E5E5"> it handles all sorts of you know</font>

350
00:14:17,470 --> 00:14:22,450
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> you can load mock</font><font color="#CCCCCC"> oh and you</font><font color="#E5E5E5"> know</font>

351
00:14:20,589 --> 00:14:24,040
<font color="#E5E5E5">files whatever but we're</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> going to</font>

352
00:14:22,450 --> 00:14:26,740
talk about<font color="#CCCCCC"> a PE here</font><font color="#E5E5E5"> since we're talking</font>

353
00:14:24,040 --> 00:14:29,439
about an hour<font color="#CCCCCC"> so there's this binary</font>

354
00:14:26,740 --> 00:14:32,770
<font color="#E5E5E5">view module</font><font color="#CCCCCC"> and basically when you load</font>

355
00:14:29,440 --> 00:14:35,380
<font color="#E5E5E5">into the software you</font><font color="#CCCCCC"> get for a PE</font>

356
00:14:32,770 --> 00:14:38,890
you've got raw mode<font color="#E5E5E5"> so basically you're</font>

357
00:14:35,380 --> 00:14:40,300
just manipulating bytes in a raw fashion

358
00:14:38,890 --> 00:14:44,199
kind<font color="#CCCCCC"> of like you know</font><font color="#E5E5E5"> you're in a hex</font>

359
00:14:40,300 --> 00:14:46,149
editor<font color="#E5E5E5"> or you've got PE mode PE view so</font>

360
00:14:44,200 --> 00:14:48,130
the PE view is going to give you a

361
00:14:46,149 --> 00:14:50,829
different<font color="#E5E5E5"> set of</font><font color="#CCCCCC"> ap</font><font color="#E5E5E5"> is that you can work</font>

362
00:14:48,130 --> 00:14:52,529
<font color="#E5E5E5">with the Spiner so the very first thing</font>

363
00:14:50,829 --> 00:14:55,209
<font color="#CCCCCC">that you have to</font><font color="#E5E5E5"> do if you're going to</font>

364
00:14:52,529 --> 00:14:58,480
automate<font color="#E5E5E5"> something or use this headless</font>

365
00:14:55,209 --> 00:15:01,390
mode you have<font color="#E5E5E5"> to tell binary ninja like</font>

366
00:14:58,480 --> 00:15:03,070
what view am i working in here and so

367
00:15:01,390 --> 00:15:07,180
that the<font color="#E5E5E5"> spider review module has</font>

368
00:15:03,070 --> 00:15:09,640
several methods you can do<font color="#E5E5E5"> there's a</font>

369
00:15:07,180 --> 00:15:11,050
binary reader and a binary writer<font color="#E5E5E5"> this</font>

370
00:15:09,640 --> 00:15:13,630
<font color="#CCCCCC">is another one of</font><font color="#E5E5E5"> my favorite things</font>

371
00:15:11,050 --> 00:15:16,300
about binary ninja<font color="#E5E5E5"> instead of you know</font>

372
00:15:13,630 --> 00:15:17,439
<font color="#E5E5E5">like Ida</font><font color="#CCCCCC"> in the past when I would do</font>

373
00:15:16,300 --> 00:15:19,930
<font color="#E5E5E5">something like this let's</font><font color="#CCCCCC"> say a string</font>

374
00:15:17,440 --> 00:15:23,560
decryption you know I would load<font color="#CCCCCC"> I have</font>

375
00:15:19,930 --> 00:15:26,920
the<font color="#E5E5E5"> binary in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> in in the editor in</font>

376
00:15:23,560 --> 00:15:28,930
Ida<font color="#E5E5E5"> and you can perform this encryption</font>

377
00:15:26,920 --> 00:15:31,420
<font color="#CCCCCC">or</font><font color="#E5E5E5"> decryption routine and then you have</font>

378
00:15:28,930 --> 00:15:33,040
to patch back the database right you're

379
00:15:31,420 --> 00:15:35,319
patching the database and saying okay

380
00:15:33,040 --> 00:15:37,030
this string at this offset

381
00:15:35,320 --> 00:15:38,530
is now decrypted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> this and you</font><font color="#E5E5E5"> can put</font>

382
00:15:37,030 --> 00:15:40,660
<font color="#CCCCCC">like</font><font color="#E5E5E5"> maybe a comment in there or</font>

383
00:15:38,530 --> 00:15:42,310
something<font color="#E5E5E5"> but that's</font><font color="#CCCCCC"> just in your</font>

384
00:15:40,660 --> 00:15:44,709
database<font color="#CCCCCC"> all right it doesn't touch the</font>

385
00:15:42,310 --> 00:15:48,160
binary itself<font color="#E5E5E5"> with binary digi you can</font>

386
00:15:44,710 --> 00:15:50,560
actually<font color="#CCCCCC"> write back to the</font><font color="#E5E5E5"> binary so I</font>

387
00:15:48,160 --> 00:15:53,290
can say<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> all these strings at these</font>

388
00:15:50,560 --> 00:15:55,510
<font color="#E5E5E5">offsets these encrypted strings</font>

389
00:15:53,290 --> 00:15:58,180
now<font color="#CCCCCC"> I've decrypted them now write</font><font color="#E5E5E5"> this</font>

390
00:15:55,510 --> 00:16:00,580
back to the<font color="#E5E5E5"> binary so now when I load</font>

391
00:15:58,180 --> 00:16:02,439
that binary back<font color="#E5E5E5"> into Ida or any other</font>

392
00:16:00,580 --> 00:16:03,880
program<font color="#E5E5E5"> those strings are already</font>

393
00:16:02,440 --> 00:16:05,440
decrypted so I<font color="#E5E5E5"> don't have to go and</font>

394
00:16:03,880 --> 00:16:07,439
<font color="#E5E5E5">patch</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know put comments underneath</font>

395
00:16:05,440 --> 00:16:10,300
<font color="#E5E5E5">that it's just gonna fix the references</font>

396
00:16:07,440 --> 00:16:13,810
<font color="#E5E5E5">which is really handy</font><font color="#CCCCCC"> so you've got</font><font color="#E5E5E5"> this</font>

397
00:16:10,300 --> 00:16:17,349
binary reader binary writer<font color="#CCCCCC"> those are</font>

398
00:16:13,810 --> 00:16:20,469
probably the<font color="#E5E5E5"> most you know section</font>

399
00:16:17,350 --> 00:16:23,440
segments references and all that so this

400
00:16:20,470 --> 00:16:27,640
all this documentation<font color="#E5E5E5"> is up on API dot</font>

401
00:16:23,440 --> 00:16:30,850
binary ninja calm and kind of<font color="#E5E5E5"> that</font>

402
00:16:27,640 --> 00:16:32,770
standard doxygen<font color="#E5E5E5"> format you know if</font>

403
00:16:30,850 --> 00:16:35,050
you're familiar<font color="#E5E5E5"> with</font><font color="#CCCCCC"> that it's a</font><font color="#E5E5E5"> very</font>

404
00:16:32,770 --> 00:16:37,569
<font color="#E5E5E5">easy to navigate so let's just take a</font>

405
00:16:35,050 --> 00:16:43,620
look at the actual<font color="#E5E5E5"> interface let's see</font>

406
00:16:37,570 --> 00:16:43,620
if<font color="#E5E5E5"> I can actually get this</font><font color="#CCCCCC"> to behave</font>

407
00:16:57,150 --> 00:17:08,069
yeah I've had<font color="#E5E5E5"> this laptop for</font><font color="#CCCCCC"> about five</font>

408
00:16:59,620 --> 00:17:08,069
<font color="#E5E5E5">days</font><font color="#CCCCCC"> so yeah I don't</font><font color="#E5E5E5"> know</font>

409
00:17:08,430 --> 00:17:19,209
how to get<font color="#E5E5E5"> the this new like touch bar</font>

410
00:17:15,970 --> 00:17:24,970
thing<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> have the same options</font>

411
00:17:19,209 --> 00:17:27,900
on it<font color="#CCCCCC"> yeah quite gotten</font><font color="#E5E5E5"> used to this if</font>

412
00:17:24,970 --> 00:17:54,850
anybody knows how<font color="#CCCCCC"> to switch</font>

413
00:17:27,900 --> 00:18:11,530
yeah<font color="#CCCCCC"> I need</font><font color="#E5E5E5"> to show my I was closer all</font>

414
00:17:54,850 --> 00:18:13,149
<font color="#E5E5E5">right this is great all right this is</font>

415
00:18:11,530 --> 00:18:21,220
<font color="#CCCCCC">not</font><font color="#E5E5E5"> gonna be here extend that's a</font>

416
00:18:13,150 --> 00:18:23,409
miracle<font color="#CCCCCC"> nervously yay okay okay yeah I</font>

417
00:18:21,220 --> 00:18:27,130
don't<font color="#E5E5E5"> think I've used VGA in a while</font><font color="#CCCCCC"> all</font>

418
00:18:23,409 --> 00:18:28,840
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so basically this is the the main</font>

419
00:18:27,130 --> 00:18:31,659
<font color="#E5E5E5">binary ninja interface I've out already</font>

420
00:18:28,840 --> 00:18:36,010
loaded<font color="#E5E5E5"> up a</font><font color="#CCCCCC"> DLL in here so this is our</font>

421
00:18:31,659 --> 00:18:37,120
actual<font color="#E5E5E5"> malicious plug X binary but I</font>

422
00:18:36,010 --> 00:18:38,980
<font color="#E5E5E5">just wanted to show the interface a</font>

423
00:18:37,120 --> 00:18:41,889
<font color="#E5E5E5">little bit because honestly like</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> I</font>

424
00:18:38,980 --> 00:18:44,409
<font color="#E5E5E5">first started using this program the UI</font>

425
00:18:41,890 --> 00:18:48,250
<font color="#E5E5E5">I'll be honest it</font><font color="#CCCCCC"> was a</font><font color="#E5E5E5"> little bit hard</font>

426
00:18:44,409 --> 00:18:50,620
to<font color="#E5E5E5"> navigate</font><font color="#CCCCCC"> they are actually completely</font>

427
00:18:48,250 --> 00:18:52,150
<font color="#E5E5E5">redoing this so this is version one</font>

428
00:18:50,620 --> 00:18:54,639
point<font color="#CCCCCC"> one point</font><font color="#E5E5E5"> something I wanted one</font>

429
00:18:52,150 --> 00:18:57,789
<font color="#CCCCCC">of the developer builds but version 1.2</font>

430
00:18:54,640 --> 00:18:59,049
has a complete overhaul the UI so I've

431
00:18:57,789 --> 00:19:01,210
heard<font color="#E5E5E5"> about some</font><font color="#CCCCCC"> of the features that</font>

432
00:18:59,049 --> 00:19:02,918
<font color="#E5E5E5">are gonna be implemented but I haven't</font>

433
00:19:01,210 --> 00:19:04,720
<font color="#E5E5E5">actually seen</font><font color="#CCCCCC"> any of</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> yet</font><font color="#E5E5E5"> but it's</font>

434
00:19:02,919 --> 00:19:06,850
supposed<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> coming out</font><font color="#E5E5E5"> sometime soon</font>

435
00:19:04,720 --> 00:19:09,880
<font color="#E5E5E5">so I don't know the exact release</font>

436
00:19:06,850 --> 00:19:11,559
schedule<font color="#E5E5E5"> but this is all gonna be kind</font>

437
00:19:09,880 --> 00:19:13,510
of<font color="#E5E5E5"> changed but I did want</font><font color="#CCCCCC"> to show it</font>

438
00:19:11,559 --> 00:19:15,760
anyway<font color="#CCCCCC"> so like</font><font color="#E5E5E5"> I was</font><font color="#CCCCCC"> talking about</font>

439
00:19:13,510 --> 00:19:19,450
before<font color="#CCCCCC"> we've loaded this up</font><font color="#E5E5E5"> and for a PE</font>

440
00:19:15,760 --> 00:19:23,650
it'll actually<font color="#CCCCCC"> just default into binary</font>

441
00:19:19,450 --> 00:19:27,669
<font color="#CCCCCC">review</font><font color="#E5E5E5"> I thought we were going</font><font color="#CCCCCC"> till</font>

442
00:19:23,650 --> 00:19:28,870
11:30 yeah<font color="#E5E5E5"> okay it was</font><font color="#CCCCCC"> like oh</font><font color="#E5E5E5"> my god</font>

443
00:19:27,669 --> 00:19:31,659
<font color="#CCCCCC">are you</font><font color="#E5E5E5"> kidding me</font><font color="#CCCCCC"> okay</font>

444
00:19:28,870 --> 00:19:33,969
so um<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> getting the</font><font color="#E5E5E5"> 10-minute</font>

445
00:19:31,659 --> 00:19:37,210
warning<font color="#E5E5E5"> so anyway so when you first load</font>

446
00:19:33,970 --> 00:19:39,940
this binary into the<font color="#E5E5E5"> interface if it's a</font>

447
00:19:37,210 --> 00:19:41,320
PE<font color="#E5E5E5"> it's going to default to this binary</font>

448
00:19:39,940 --> 00:19:44,750
view

449
00:19:41,320 --> 00:19:47,389
I'm sorry peeve you and load you into

450
00:19:44,750 --> 00:19:49,130
<font color="#E5E5E5">the graph view of the disassembly but</font>

451
00:19:47,390 --> 00:19:50,540
down here<font color="#E5E5E5"> there's a hopefully you can</font>

452
00:19:49,130 --> 00:19:53,420
see<font color="#E5E5E5"> that</font><font color="#CCCCCC"> alright it's not</font><font color="#E5E5E5"> too low</font>

453
00:19:50,540 --> 00:19:55,580
there's this menu down<font color="#CCCCCC"> here where you</font>

454
00:19:53,420 --> 00:19:56,960
<font color="#E5E5E5">can change</font><font color="#CCCCCC"> to either raw view or PE so</font>

455
00:19:55,580 --> 00:20:01,820
we can actually<font color="#E5E5E5"> switch to</font><font color="#CCCCCC"> raw view which</font>

456
00:19:56,960 --> 00:20:06,170
is kind of<font color="#E5E5E5"> like a like hex editor view</font>

457
00:20:01,820 --> 00:20:07,970
basically so let's get<font color="#E5E5E5"> back to PE view</font>

458
00:20:06,170 --> 00:20:10,370
and then you've got this other<font color="#E5E5E5"> one where</font>

459
00:20:07,970 --> 00:20:11,870
<font color="#E5E5E5">you can go to hex editor or just</font>

460
00:20:10,370 --> 00:20:13,790
<font color="#E5E5E5">assembly graph so you can see when I</font>

461
00:20:11,870 --> 00:20:18,020
moved<font color="#CCCCCC"> back</font><font color="#E5E5E5"> to PE it's it's still in kind</font>

462
00:20:13,790 --> 00:20:19,370
<font color="#E5E5E5">of the the hex mode so you got the</font>

463
00:20:18,020 --> 00:20:21,730
disassembly graph which is<font color="#CCCCCC"> what we were</font>

464
00:20:19,370 --> 00:20:24,649
seeing initially you've got strings

465
00:20:21,730 --> 00:20:28,000
<font color="#CCCCCC">which is just you</font><font color="#E5E5E5"> know the strings in</font>

466
00:20:24,650 --> 00:20:30,170
<font color="#E5E5E5">the binary obviously linear disassembly</font>

467
00:20:28,000 --> 00:20:32,650
so if we look at<font color="#E5E5E5"> one of these</font><font color="#CCCCCC"> functions</font>

468
00:20:30,170 --> 00:20:35,900
here<font color="#E5E5E5"> this is gonna be more like you</font><font color="#CCCCCC"> know</font>

469
00:20:32,650 --> 00:20:37,910
just<font color="#E5E5E5"> like Ida which I'll mention also if</font>

470
00:20:35,900 --> 00:20:39,890
you're familiar with Ida<font color="#E5E5E5"> most of the key</font>

471
00:20:37,910 --> 00:20:43,090
bindings are the same so<font color="#E5E5E5"> you know your</font>

472
00:20:39,890 --> 00:20:47,540
spacebar<font color="#E5E5E5"> will go between graph view and</font>

473
00:20:43,090 --> 00:20:50,510
linear<font color="#E5E5E5"> G who's gonna be your go to</font>

474
00:20:47,540 --> 00:20:51,680
<font color="#E5E5E5">address you know so most of these key</font>

475
00:20:50,510 --> 00:20:54,740
bindings are the same there are there

476
00:20:51,680 --> 00:20:57,890
<font color="#E5E5E5">are extra ones like no I'm in one year</font>

477
00:20:54,740 --> 00:21:02,330
now if you're in graph you can hit<font color="#E5E5E5"> I to</font>

478
00:20:57,890 --> 00:21:07,340
switch between<font color="#E5E5E5"> I almost but you can also</font>

479
00:21:02,330 --> 00:21:09,500
do it down<font color="#E5E5E5"> here from this last option if</font>

480
00:21:07,340 --> 00:21:11,540
you're in graph view<font color="#E5E5E5"> so the low level</font>

481
00:21:09,500 --> 00:21:14,870
and medium level I'll are only available

482
00:21:11,540 --> 00:21:16,760
right now<font color="#CCCCCC"> in graph view</font><font color="#E5E5E5"> I've been well a</font>

483
00:21:14,870 --> 00:21:18,830
lot<font color="#E5E5E5"> of us have</font><font color="#CCCCCC"> been poking them and say</font>

484
00:21:16,760 --> 00:21:20,629
please put that<font color="#E5E5E5"> in linear disassembly</font>

485
00:21:18,830 --> 00:21:23,960
view because I don't like grothy

486
00:21:20,630 --> 00:21:26,480
personally<font color="#E5E5E5"> missed this on but say you've</font>

487
00:21:23,960 --> 00:21:28,580
got your<font color="#CCCCCC"> low-level aisle</font><font color="#E5E5E5"> view here and</font>

488
00:21:26,480 --> 00:21:30,410
your medium level<font color="#E5E5E5"> aisle that you can</font>

489
00:21:28,580 --> 00:21:33,889
kind of switch between but again<font color="#E5E5E5"> you</font>

490
00:21:30,410 --> 00:21:38,030
know you know so toggle between those

491
00:21:33,890 --> 00:21:40,550
that way down here you've got your<font color="#E5E5E5"> xrefs</font>

492
00:21:38,030 --> 00:21:43,460
<font color="#E5E5E5">so I've got all the the</font><font color="#CCCCCC"> cross references</font>

493
00:21:40,550 --> 00:21:45,680
<font color="#E5E5E5">to this function just listed here which</font>

494
00:21:43,460 --> 00:21:47,450
is<font color="#E5E5E5"> nice you</font><font color="#CCCCCC"> can actually hover over it</font>

495
00:21:45,680 --> 00:21:50,260
<font color="#E5E5E5">and it'll show you kind</font><font color="#CCCCCC"> of a preview</font><font color="#E5E5E5"> of</font>

496
00:21:47,450 --> 00:21:50,260
it which is nice

497
00:21:50,600 --> 00:21:55,310
one thing I'll mention though

498
00:21:52,640 --> 00:21:57,530
<font color="#CCCCCC">you</font><font color="#E5E5E5"> see there's four functions here so</font>

499
00:21:55,310 --> 00:22:00,520
one of<font color="#E5E5E5"> the things that initially was a</font>

500
00:21:57,530 --> 00:22:02,690
little bit difficult<font color="#CCCCCC"> these</font><font color="#E5E5E5"> guys</font>

501
00:22:00,520 --> 00:22:04,040
developed all the guys that<font color="#E5E5E5"> developed</font>

502
00:22:02,690 --> 00:22:06,890
this<font color="#E5E5E5"> are kind of vulnerability</font>

503
00:22:04,040 --> 00:22:08,480
researchers so<font color="#CCCCCC"> they come</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> at they use</font>

504
00:22:06,890 --> 00:22:09,770
you know<font color="#CCCCCC"> Ida in these tools</font><font color="#E5E5E5"> they do</font>

505
00:22:08,480 --> 00:22:12,020
differ<font color="#E5E5E5"> very different reverse</font>

506
00:22:09,770 --> 00:22:16,520
engineering<font color="#E5E5E5"> than I do with malware</font>

507
00:22:12,020 --> 00:22:19,100
analysis<font color="#E5E5E5"> so the kind of the the features</font>

508
00:22:16,520 --> 00:22:21,920
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the product initially</font><font color="#CCCCCC"> were very much</font>

509
00:22:19,100 --> 00:22:26,419
more<font color="#CCCCCC"> geared toward</font><font color="#E5E5E5"> using it for CTF sand</font>

510
00:22:21,920 --> 00:22:27,820
and<font color="#E5E5E5"> VR stuff</font><font color="#CCCCCC"> but finally I think it was</font>

511
00:22:26,420 --> 00:22:32,620
last year<font color="#CCCCCC"> sometime</font>

512
00:22:27,820 --> 00:22:36,080
they implemented in in<font color="#CCCCCC"> 1.1 they</font>

513
00:22:32,620 --> 00:22:39,709
<font color="#E5E5E5">implemented linear sweep</font><font color="#CCCCCC"> so that made</font>

514
00:22:36,080 --> 00:22:41,540
this a lot better<font color="#E5E5E5"> because before when</font>

515
00:22:39,710 --> 00:22:43,520
<font color="#E5E5E5">you would load malware into here a lot</font>

516
00:22:41,540 --> 00:22:44,990
<font color="#E5E5E5">of times if you familiar with malware</font>

517
00:22:43,520 --> 00:22:48,830
<font color="#E5E5E5">analysis it</font><font color="#CCCCCC"> doesn't always play very</font>

518
00:22:44,990 --> 00:22:50,780
nicely<font color="#E5E5E5"> with disassembly</font><font color="#CCCCCC"> and purposefully</font>

519
00:22:48,830 --> 00:22:54,470
tries to trick you or<font color="#E5E5E5"> trick the</font>

520
00:22:50,780 --> 00:22:57,340
disassembler and mess<font color="#E5E5E5"> things up so a lot</font>

521
00:22:54,470 --> 00:22:59,150
<font color="#E5E5E5">of times functions wouldn't be defined</font>

522
00:22:57,340 --> 00:23:01,010
automatically<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you'd have to go</font>

523
00:22:59,150 --> 00:23:02,570
<font color="#CCCCCC">through</font><font color="#E5E5E5"> and manually define functions</font>

524
00:23:01,010 --> 00:23:04,400
which again the key bindings are just

525
00:23:02,570 --> 00:23:06,710
like Ida you can<font color="#E5E5E5"> hit</font><font color="#CCCCCC"> Y to define a</font>

526
00:23:04,400 --> 00:23:08,390
function<font color="#E5E5E5"> at an address all that so</font>

527
00:23:06,710 --> 00:23:12,320
anyway so they implemented this linear

528
00:23:08,390 --> 00:23:13,940
sweep<font color="#CCCCCC"> and it's still a beta plugin right</font>

529
00:23:12,320 --> 00:23:17,570
now<font color="#E5E5E5"> but you can actually run this</font>

530
00:23:13,940 --> 00:23:19,730
analysis module linear sweep<font color="#E5E5E5"> so if we</font>

531
00:23:17,570 --> 00:23:22,040
run<font color="#CCCCCC"> that on there we see we get an extra</font>

532
00:23:19,730 --> 00:23:25,550
function<font color="#E5E5E5"> here</font><font color="#CCCCCC"> that wasn't</font><font color="#E5E5E5"> identified</font>

533
00:23:22,040 --> 00:23:27,590
previously<font color="#E5E5E5"> so it turns out that this</font>

534
00:23:25,550 --> 00:23:30,379
this<font color="#E5E5E5"> first function</font><font color="#CCCCCC"> is actually</font><font color="#E5E5E5"> our</font>

535
00:23:27,590 --> 00:23:34,959
string decryption function so once again

536
00:23:30,380 --> 00:23:38,000
<font color="#CCCCCC">just like</font><font color="#E5E5E5"> Ida you can hit n and and</font>

537
00:23:34,960 --> 00:23:41,360
actually rename that and then we see

538
00:23:38,000 --> 00:23:43,040
these xrefs down here<font color="#E5E5E5"> so all of these</font>

539
00:23:41,360 --> 00:23:44,120
<font color="#E5E5E5">are</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be calls to this decryption</font>

540
00:23:43,040 --> 00:23:50,960
function so<font color="#E5E5E5"> this is where we're going to</font>

541
00:23:44,120 --> 00:23:52,100
find all of our<font color="#E5E5E5"> encrypted strings so if</font>

542
00:23:50,960 --> 00:23:55,730
we look at<font color="#E5E5E5"> this</font>

543
00:23:52,100 --> 00:24:00,139
let's go here so<font color="#CCCCCC"> here's this call</font><font color="#E5E5E5"> let me</font>

544
00:23:55,730 --> 00:24:02,000
<font color="#E5E5E5">switch</font><font color="#CCCCCC"> back to regular assembly so</font>

545
00:24:00,140 --> 00:24:04,190
here's this call to<font color="#E5E5E5"> the destroying</font>

546
00:24:02,000 --> 00:24:06,020
decryption function you see<font color="#CCCCCC"> these the</font>

547
00:24:04,190 --> 00:24:09,620
parameters that are passed<font color="#E5E5E5"> on here</font>

548
00:24:06,020 --> 00:24:12,410
we've got the address<font color="#CCCCCC"> of our</font><font color="#E5E5E5"> encrypted</font>

549
00:24:09,620 --> 00:24:13,639
string so<font color="#E5E5E5"> let's just go there so if we</font>

550
00:24:12,410 --> 00:24:16,250
<font color="#CCCCCC">double click on that we can</font><font color="#E5E5E5"> see this</font>

551
00:24:13,640 --> 00:24:18,320
<font color="#CCCCCC">sorry the the</font><font color="#E5E5E5"> it's a little bit</font>

552
00:24:16,250 --> 00:24:20,120
compacted here<font color="#E5E5E5"> because of the screen</font>

553
00:24:18,320 --> 00:24:21,590
resolution but you can see you've got

554
00:24:20,120 --> 00:24:24,649
<font color="#CCCCCC">the you know</font><font color="#E5E5E5"> obviously</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> are not</font>

555
00:24:21,590 --> 00:24:29,030
most<font color="#E5E5E5"> of these are</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> ASCII so these are</font>

556
00:24:24,650 --> 00:24:32,480
our encrypted<font color="#E5E5E5"> strings here and hit</font>

557
00:24:29,030 --> 00:24:34,280
escape<font color="#CCCCCC"> you get back here so we'll take a</font>

558
00:24:32,480 --> 00:24:36,550
look<font color="#E5E5E5"> at this a little bit more but just</font>

559
00:24:34,280 --> 00:24:39,520
<font color="#CCCCCC">wanted to</font><font color="#E5E5E5"> show</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> that real quick</font><font color="#CCCCCC"> and</font>

560
00:24:36,550 --> 00:24:42,500
<font color="#CCCCCC">while we're here actually</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I can hit</font>

561
00:24:39,520 --> 00:24:44,240
<font color="#E5E5E5">Apple n so here's our hex this is</font>

562
00:24:42,500 --> 00:24:49,190
actually a hex the hex editor so if we

563
00:24:44,240 --> 00:24:50,990
put in we can<font color="#CCCCCC"> just</font><font color="#E5E5E5"> whoops wrong side we</font>

564
00:24:49,190 --> 00:24:57,020
go<font color="#E5E5E5"> over to this ASCII side here I can</font>

565
00:24:50,990 --> 00:25:00,080
<font color="#E5E5E5">just type something</font><font color="#CCCCCC"> and just to show you</font>

566
00:24:57,020 --> 00:25:01,580
the<font color="#E5E5E5"> the transformation here</font><font color="#CCCCCC"> you've got</font>

567
00:25:00,080 --> 00:25:03,830
if you<font color="#CCCCCC"> right-click</font><font color="#E5E5E5"> on this you</font><font color="#CCCCCC"> can</font>

568
00:25:01,580 --> 00:25:05,419
<font color="#E5E5E5">actually you can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> copy as you</font>

569
00:25:03,830 --> 00:25:07,340
know these different<font color="#E5E5E5"> types of strings</font>

570
00:25:05,420 --> 00:25:09,290
<font color="#E5E5E5">and things you can cut the raw hex</font>

571
00:25:07,340 --> 00:25:11,419
whatever but<font color="#E5E5E5"> this transformation thing</font>

572
00:25:09,290 --> 00:25:15,820
is one of my favorites<font color="#CCCCCC"> you can actually</font>

573
00:25:11,420 --> 00:25:19,220
you know<font color="#E5E5E5"> XOR this you can</font><font color="#CCCCCC"> rc4</font><font color="#E5E5E5"> encrypt it</font>

574
00:25:15,820 --> 00:25:20,540
<font color="#CCCCCC">if you've</font><font color="#E5E5E5"> got let's say you've got an</font>

575
00:25:19,220 --> 00:25:22,730
<font color="#CCCCCC">xor encrypted string you</font><font color="#E5E5E5"> can actually</font>

576
00:25:20,540 --> 00:25:24,260
just hit<font color="#E5E5E5"> this and give</font><font color="#CCCCCC"> it the key and</font>

577
00:25:22,730 --> 00:25:26,210
like<font color="#E5E5E5"> I said you can</font><font color="#CCCCCC"> just paste a whole</font>

578
00:25:24,260 --> 00:25:31,700
you<font color="#CCCCCC"> know it can be arbitrary length</font>

579
00:25:26,210 --> 00:25:33,950
which<font color="#E5E5E5"> is nice</font><font color="#CCCCCC"> you've also</font><font color="#E5E5E5"> got encoding</font>

580
00:25:31,700 --> 00:25:36,350
you can encode this or decode base64

581
00:25:33,950 --> 00:25:41,740
which is great<font color="#E5E5E5"> so just a nice little</font>

582
00:25:36,350 --> 00:25:44,480
<font color="#E5E5E5">kind of handy thing in there all</font><font color="#CCCCCC"> right</font>

583
00:25:41,740 --> 00:25:49,150
let's see if we can<font color="#E5E5E5"> I'm mirroring</font>

584
00:25:44,480 --> 00:25:49,150
<font color="#CCCCCC">displays so hopefully this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> okay</font>

585
00:25:49,929 --> 00:25:56,720
review here so just<font color="#CCCCCC"> a</font><font color="#E5E5E5"> little</font>

586
00:25:52,850 --> 00:25:58,879
introduction there to the UI so what's

587
00:25:56,720 --> 00:26:01,100
plug X if you're not familiar with plug

588
00:25:58,880 --> 00:26:03,200
X it's a<font color="#E5E5E5"> fully featured remote access</font>

589
00:26:01,100 --> 00:26:05,840
<font color="#CCCCCC">Trojan or remote administration tool</font>

590
00:26:03,200 --> 00:26:07,370
<font color="#E5E5E5">depending on who you talk</font><font color="#CCCCCC"> to the first</font>

591
00:26:05,840 --> 00:26:10,070
<font color="#CCCCCC">samples as I said</font><font color="#E5E5E5"> we're seen back</font><font color="#CCCCCC"> in</font>

592
00:26:07,370 --> 00:26:13,459
2008 but it's<font color="#E5E5E5"> still being</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

593
00:26:10,070 --> 00:26:15,470
a lot of the what's old is or what's old

594
00:26:13,460 --> 00:26:18,950
is new again<font color="#E5E5E5"> there's a lot of code reuse</font>

595
00:26:15,470 --> 00:26:21,040
<font color="#CCCCCC">in our by malware actors so this is</font>

596
00:26:18,950 --> 00:26:24,140
certainly<font color="#E5E5E5"> one</font>

597
00:26:21,040 --> 00:26:27,320
family that like I<font color="#E5E5E5"> said even the version</font>

598
00:26:24,140 --> 00:26:29,990
<font color="#E5E5E5">like the first variant</font><font color="#CCCCCC"> you're still</font>

599
00:26:27,320 --> 00:26:30,860
seeing<font color="#E5E5E5"> that in the wild today so even</font>

600
00:26:29,990 --> 00:26:32,570
though there's<font color="#CCCCCC"> been a lot of</font><font color="#E5E5E5"> code</font>

601
00:26:30,860 --> 00:26:38,389
evolution over the<font color="#E5E5E5"> last</font><font color="#CCCCCC"> ten years</font><font color="#E5E5E5"> and</font>

602
00:26:32,570 --> 00:26:40,879
actually<font color="#E5E5E5"> Paulo unit 42 recently</font><font color="#CCCCCC"> somewhat</font>

603
00:26:38,390 --> 00:26:42,440
<font color="#CCCCCC">rethink was in January they saw a new</font>

604
00:26:40,880 --> 00:26:44,090
one<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is completely different than</font>

605
00:26:42,440 --> 00:26:45,920
all of these they<font color="#E5E5E5"> called paranoid plug X</font>

606
00:26:44,090 --> 00:26:48,050
which is kind of<font color="#E5E5E5"> interesting but even</font>

607
00:26:45,920 --> 00:26:50,510
despite<font color="#CCCCCC"> that you still see these these</font>

608
00:26:48,050 --> 00:26:55,520
original versions out<font color="#CCCCCC"> there</font><font color="#E5E5E5"> so this</font>

609
00:26:50,510 --> 00:26:58,040
original<font color="#E5E5E5"> version typically follows this</font>

610
00:26:55,520 --> 00:27:00,260
<font color="#CCCCCC">same kind</font><font color="#E5E5E5"> of methodology you have like a</font>

611
00:26:58,040 --> 00:27:02,540
self-extracting<font color="#CCCCCC"> rar or you know a</font>

612
00:27:00,260 --> 00:27:05,570
dropper<font color="#CCCCCC"> that has three files embedded</font><font color="#E5E5E5"> in</font>

613
00:27:02,540 --> 00:27:09,980
it<font color="#CCCCCC"> you've got a legitimate signed</font>

614
00:27:05,570 --> 00:27:12,530
executable a<font color="#CCCCCC"> dll loader typically that</font>

615
00:27:09,980 --> 00:27:14,000
gets<font color="#E5E5E5"> side loaded by this he signed</font>

616
00:27:12,530 --> 00:27:17,060
executable and then you have an

617
00:27:14,000 --> 00:27:19,450
encrypted shellcode payload<font color="#E5E5E5"> so the</font>

618
00:27:17,060 --> 00:27:21,740
shellcode<font color="#CCCCCC"> is generally it's decrypted</font>

619
00:27:19,450 --> 00:27:25,790
decrypted and decompressed usually<font color="#E5E5E5"> LZ</font>

620
00:27:21,740 --> 00:27:27,560
<font color="#E5E5E5">nt1 by the this</font><font color="#CCCCCC"> dll and then</font><font color="#E5E5E5"> injected</font>

621
00:27:25,790 --> 00:27:31,399
into some legitimate<font color="#E5E5E5"> persistent process</font>

622
00:27:27,560 --> 00:27:33,620
usually<font color="#E5E5E5"> it'll do</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of me to talk</font>

623
00:27:31,400 --> 00:27:35,030
<font color="#CCCCCC">about that in them so the sample</font><font color="#E5E5E5"> that</font>

624
00:27:33,620 --> 00:27:41,629
I'm using today<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this demonstration</font>

625
00:27:35,030 --> 00:27:43,760
<font color="#E5E5E5">is follows this this pattern so what is</font>

626
00:27:41,630 --> 00:27:45,650
<font color="#CCCCCC">sideloading</font><font color="#E5E5E5"> for anybody who's not a</font>

627
00:27:43,760 --> 00:27:48,680
malware analyst in case you're not

628
00:27:45,650 --> 00:27:50,300
<font color="#CCCCCC">familiar with</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> legitimate Windows</font>

629
00:27:48,680 --> 00:27:52,010
executables or executables in general

630
00:27:50,300 --> 00:27:54,530
<font color="#CCCCCC">we'll typically</font><font color="#E5E5E5"> you know they rely on</font>

631
00:27:52,010 --> 00:27:55,460
<font color="#E5E5E5">external libraries to do functions you</font>

632
00:27:54,530 --> 00:27:57,290
know you don't want to<font color="#E5E5E5"> statically</font>

633
00:27:55,460 --> 00:27:58,670
compiled all these things or rewrite all

634
00:27:57,290 --> 00:28:01,310
this<font color="#E5E5E5"> functionality that's</font><font color="#CCCCCC"> available in</font>

635
00:27:58,670 --> 00:28:04,250
libraries right<font color="#E5E5E5"> so at runtime these</font>

636
00:28:01,310 --> 00:28:06,020
libraries are<font color="#E5E5E5"> loaded by</font><font color="#CCCCCC"> the executable</font>

637
00:28:04,250 --> 00:28:09,920
to perform you know network functions or

638
00:28:06,020 --> 00:28:12,470
whatever<font color="#E5E5E5"> the malware wants to do but</font>

639
00:28:09,920 --> 00:28:14,450
<font color="#E5E5E5">these executables typically don't do any</font>

640
00:28:12,470 --> 00:28:16,160
<font color="#E5E5E5">sort of validation</font><font color="#CCCCCC"> before they load</font>

641
00:28:14,450 --> 00:28:19,840
<font color="#E5E5E5">these libraries they just say I want</font>

642
00:28:16,160 --> 00:28:23,090
<font color="#CCCCCC">Network</font><font color="#E5E5E5"> DLL give me Network DLL and</font>

643
00:28:19,840 --> 00:28:24,730
<font color="#E5E5E5">Windows will follow a chain of locations</font>

644
00:28:23,090 --> 00:28:26,959
to<font color="#CCCCCC"> find those dll's</font>

645
00:28:24,730 --> 00:28:29,540
but malware can take advantage<font color="#E5E5E5"> of this</font>

646
00:28:26,960 --> 00:28:31,730
and say because<font color="#CCCCCC"> the first place that</font><font color="#E5E5E5"> the</font>

647
00:28:29,540 --> 00:28:33,510
<font color="#E5E5E5">binary is going to look for the DLL that</font>

648
00:28:31,730 --> 00:28:35,880
<font color="#CCCCCC">it wants is in its</font><font color="#E5E5E5"> current</font>

649
00:28:33,510 --> 00:28:38,010
so now we're can just say<font color="#E5E5E5"> okay you want</font>

650
00:28:35,880 --> 00:28:40,169
<font color="#E5E5E5">network to DLL I'm going to give you my</font>

651
00:28:38,010 --> 00:28:42,210
version of<font color="#E5E5E5"> network DLL and put it next</font>

652
00:28:40,169 --> 00:28:44,850
to you so that you<font color="#CCCCCC"> load mine instead</font><font color="#E5E5E5"> of</font>

653
00:28:42,210 --> 00:28:48,360
yours or the legitimate one<font color="#E5E5E5"> so basically</font>

654
00:28:44,850 --> 00:28:51,750
<font color="#CCCCCC">a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of times math malware authors will</font>

655
00:28:48,360 --> 00:28:54,090
use<font color="#E5E5E5"> a these legitimate executables are</font>

656
00:28:51,750 --> 00:28:56,190
usually firm something like antivirus<font color="#E5E5E5"> or</font>

657
00:28:54,090 --> 00:28:58,980
some security product<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that not only</font>

658
00:28:56,190 --> 00:29:00,899
is it legitimate<font color="#E5E5E5"> it's signed trusted by</font>

659
00:28:58,980 --> 00:29:02,640
the operating<font color="#E5E5E5"> system</font><font color="#CCCCCC"> but you might even</font>

660
00:29:00,899 --> 00:29:03,899
<font color="#E5E5E5">take advantage of some application</font>

661
00:29:02,640 --> 00:29:05,820
whitelisting that might not be<font color="#E5E5E5"> on your</font>

662
00:29:03,899 --> 00:29:08,330
<font color="#E5E5E5">system so you might actually your</font>

663
00:29:05,820 --> 00:29:10,710
administrators your network may have

664
00:29:08,330 --> 00:29:14,580
<font color="#E5E5E5">something like let's say they've got</font>

665
00:29:10,710 --> 00:29:15,750
McAfee<font color="#CCCCCC"> whitelisted in the network</font><font color="#E5E5E5"> so not</font>

666
00:29:14,580 --> 00:29:17,908
only<font color="#E5E5E5"> is</font><font color="#CCCCCC"> it going</font><font color="#E5E5E5"> to be trusted by</font>

667
00:29:15,750 --> 00:29:21,000
Microsoft<font color="#CCCCCC"> but it's also going to be</font>

668
00:29:17,909 --> 00:29:23,220
<font color="#CCCCCC">whitelisted on the</font><font color="#E5E5E5"> endpoint so here's</font>

669
00:29:21,000 --> 00:29:24,120
just<font color="#E5E5E5"> a couple examples of some the one</font>

670
00:29:23,220 --> 00:29:27,149
that we're<font color="#CCCCCC"> gonna look at today</font><font color="#E5E5E5"> is</font>

671
00:29:24,120 --> 00:29:31,949
<font color="#E5E5E5">actually this a shield</font><font color="#CCCCCC"> Exe a shield res</font>

672
00:29:27,149 --> 00:29:34,020
<font color="#E5E5E5">DLL so a shield exe</font><font color="#CCCCCC"> is an actual McAfee</font>

673
00:29:31,950 --> 00:29:36,390
<font color="#CCCCCC">v shield component the actual thing from</font>

674
00:29:34,020 --> 00:29:38,760
the product<font color="#CCCCCC"> so really you've got</font><font color="#E5E5E5"> an F</font>

675
00:29:36,390 --> 00:29:42,710
secure<font color="#E5E5E5"> GUI component here there was one</font>

676
00:29:38,760 --> 00:29:45,059
that was<font color="#CCCCCC"> a office</font><font color="#E5E5E5"> 2003 sp2 update file</font>

677
00:29:42,710 --> 00:29:47,970
so we've got<font color="#E5E5E5"> our legitimate executables</font>

678
00:29:45,059 --> 00:29:52,529
here and then the malicious executables

679
00:29:47,970 --> 00:29:54,299
that<font color="#E5E5E5"> are loaded so how does this work</font><font color="#CCCCCC"> I</font>

680
00:29:52,529 --> 00:29:55,770
mentioned<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> shellcode is loaded</font>

681
00:29:54,299 --> 00:29:57,899
<font color="#E5E5E5">and usually</font><font color="#CCCCCC"> injected</font><font color="#E5E5E5"> if you're not</font>

682
00:29:55,770 --> 00:30:00,539
<font color="#E5E5E5">familiar with process</font><font color="#CCCCCC"> hollowing this</font>

683
00:29:57,899 --> 00:30:02,370
third<font color="#E5E5E5"> component contains the encrypted</font>

684
00:30:00,539 --> 00:30:06,149
<font color="#E5E5E5">and compressed</font><font color="#CCCCCC"> shellcode and c2</font>

685
00:30:02,370 --> 00:30:08,129
configuration data the loader<font color="#E5E5E5"> DLL this</font>

686
00:30:06,149 --> 00:30:09,870
malicious DLL that<font color="#E5E5E5"> gets loaded will</font>

687
00:30:08,130 --> 00:30:12,630
decrypt<font color="#E5E5E5"> and decompress the shellcode</font>

688
00:30:09,870 --> 00:30:15,330
<font color="#CCCCCC">like I</font><font color="#E5E5E5"> said it's usually a lot of</font><font color="#CCCCCC"> times</font>

689
00:30:12,630 --> 00:30:18,710
it sells EMT<font color="#CCCCCC"> one and usually a simple</font>

690
00:30:15,330 --> 00:30:25,080
<font color="#CCCCCC">XOR</font><font color="#E5E5E5"> or XOR combined with some</font><font color="#CCCCCC"> arithmetic</font>

691
00:30:18,710 --> 00:30:27,120
in terms of the decryption so this this

692
00:30:25,080 --> 00:30:29,730
loader actually starts a<font color="#CCCCCC"> new instance of</font>

693
00:30:27,120 --> 00:30:31,439
process let's say like svchost.exe<font color="#CCCCCC"> but</font>

694
00:30:29,730 --> 00:30:33,870
it starts it in a suspended<font color="#E5E5E5"> state so</font>

695
00:30:31,440 --> 00:30:36,649
<font color="#E5E5E5">that</font><font color="#CCCCCC"> programs not</font><font color="#E5E5E5"> running and then it'll</font>

696
00:30:33,870 --> 00:30:39,779
<font color="#E5E5E5">actually go</font><font color="#CCCCCC"> into this</font><font color="#E5E5E5"> suspended process</font>

697
00:30:36,649 --> 00:30:42,600
free or unmapped<font color="#CCCCCC"> a section of memory</font><font color="#E5E5E5"> and</font>

698
00:30:39,779 --> 00:30:45,149
then load the shellcode<font color="#E5E5E5"> into this freed</font>

699
00:30:42,600 --> 00:30:46,620
memory set the execution<font color="#CCCCCC"> to the</font>

700
00:30:45,149 --> 00:30:57,209
beginning<font color="#E5E5E5"> of the shellcode and then</font>

701
00:30:46,620 --> 00:30:59,309
start the process<font color="#CCCCCC"> resume</font><font color="#E5E5E5"> the process so</font>

702
00:30:57,210 --> 00:31:03,049
the decryption method so how do<font color="#CCCCCC"> we</font>

703
00:30:59,309 --> 00:31:05,370
identify<font color="#CCCCCC"> this if you're not familiar</font>

704
00:31:03,049 --> 00:31:08,549
probably most of you if you do malware

705
00:31:05,370 --> 00:31:10,768
analysis<font color="#E5E5E5"> are familiar with yarra</font><font color="#CCCCCC"> they</font>

706
00:31:08,549 --> 00:31:11,879
call it the<font color="#E5E5E5"> pattern matching Swiss Army</font>

707
00:31:10,769 --> 00:31:13,230
knife

708
00:31:11,879 --> 00:31:15,600
but<font color="#CCCCCC"> basically you can</font><font color="#E5E5E5"> if you're</font><font color="#CCCCCC"> not</font>

709
00:31:13,230 --> 00:31:19,019
familiar<font color="#E5E5E5"> you can key off of ascii</font>

710
00:31:15,600 --> 00:31:24,719
strings or you can do regex<font color="#CCCCCC"> or you can</font>

711
00:31:19,019 --> 00:31:27,840
<font color="#CCCCCC">actually specify bytes with a wildcard</font>

712
00:31:24,720 --> 00:31:31,379
<font color="#E5E5E5">in so here for this</font><font color="#CCCCCC"> particular this is</font>

713
00:31:27,840 --> 00:31:33,209
<font color="#E5E5E5">actually the string decryption</font><font color="#CCCCCC"> signature</font>

714
00:31:31,379 --> 00:31:35,129
<font color="#E5E5E5">that I'm using there's actually two</font>

715
00:31:33,210 --> 00:31:38,249
<font color="#E5E5E5">versions of it so if you're familiar</font>

716
00:31:35,129 --> 00:31:40,039
with assembly you know you've got a like

717
00:31:38,249 --> 00:31:42,480
an<font color="#CCCCCC"> XOR instruction you know</font><font color="#E5E5E5"> it could be</font>

718
00:31:40,039 --> 00:31:44,730
one of<font color="#E5E5E5"> two</font><font color="#CCCCCC"> things your move instruction</font>

719
00:31:42,480 --> 00:31:45,990
whatever<font color="#CCCCCC"> so we're actually going to have</font>

720
00:31:44,730 --> 00:31:50,629
two different<font color="#CCCCCC"> versions of</font><font color="#E5E5E5"> these with</font>

721
00:31:45,990 --> 00:31:55,139
with different<font color="#E5E5E5"> instruction disassemblies</font>

722
00:31:50,629 --> 00:31:55,889
<font color="#E5E5E5">but when you've got in your desk sembly</font>

723
00:31:55,139 --> 00:31:57,449
<font color="#E5E5E5">you know a lot of</font><font color="#CCCCCC"> times you're</font><font color="#E5E5E5"> gonna</font>

724
00:31:55,889 --> 00:31:58,740
have a<font color="#CCCCCC"> hard-coded offset or something</font>

725
00:31:57,450 --> 00:32:00,330
like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> want you don't want</font><font color="#CCCCCC"> to</font>

726
00:31:58,740 --> 00:32:02,190
actually<font color="#E5E5E5"> hard code that off sex it's</font>

727
00:32:00,330 --> 00:32:04,830
going to you know<font color="#E5E5E5"> vary among</font><font color="#CCCCCC"> different</font>

728
00:32:02,190 --> 00:32:06,539
binaries<font color="#CCCCCC"> so you actually kind of can</font>

729
00:32:04,830 --> 00:32:09,480
<font color="#CCCCCC">wildcard</font><font color="#E5E5E5"> that out so I can say you know</font>

730
00:32:06,539 --> 00:32:11,820
a day followed<font color="#CCCCCC"> by two</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> four bytes</font>

731
00:32:09,480 --> 00:32:14,850
<font color="#CCCCCC">somewhere in there</font><font color="#E5E5E5"> followed by</font><font color="#CCCCCC"> another</font>

732
00:32:11,820 --> 00:32:18,570
<font color="#CCCCCC">8a</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> 8 B 2</font><font color="#E5E5E5"> to 4 bytes followed by an</font><font color="#CCCCCC"> 8</font>

733
00:32:14,850 --> 00:32:21,209
<font color="#CCCCCC">a</font><font color="#E5E5E5"> etcetera so so we're gonna</font><font color="#CCCCCC"> use this</font>

734
00:32:18,570 --> 00:32:22,740
<font color="#CCCCCC">Yaris signature</font><font color="#E5E5E5"> run it against the</font>

735
00:32:21,210 --> 00:32:24,389
binary to find the offset of this

736
00:32:22,740 --> 00:32:26,009
decryption routine basically<font color="#CCCCCC"> it'll give</font>

737
00:32:24,389 --> 00:32:28,619
us<font color="#E5E5E5"> back the offset of where this code</font>

738
00:32:26,009 --> 00:32:31,049
starts<font color="#CCCCCC"> ok so we</font><font color="#E5E5E5"> get the offset of this</font>

739
00:32:28,619 --> 00:32:32,939
decryption code then<font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to say okay</font>

740
00:32:31,049 --> 00:32:36,269
what<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> cross-reference</font><font color="#CCCCCC"> let's find</font>

741
00:32:32,940 --> 00:32:37,649
the function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this code is</font><font color="#CCCCCC"> in get</font>

742
00:32:36,269 --> 00:32:39,929
the cross<font color="#CCCCCC"> run</font><font color="#E5E5E5"> references to that</font>

743
00:32:37,649 --> 00:32:41,158
<font color="#CCCCCC">function get the parameters passed into</font>

744
00:32:39,929 --> 00:32:42,600
the decryption function because that's

745
00:32:41,159 --> 00:32:44,190
<font color="#E5E5E5">going to give us you know</font><font color="#CCCCCC"> our key and</font>

746
00:32:42,600 --> 00:32:46,019
<font color="#E5E5E5">our encrypted string and all that and</font>

747
00:32:44,190 --> 00:32:48,539
then we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to decrypt the</font><font color="#E5E5E5"> strings</font>

748
00:32:46,019 --> 00:32:51,559
and then patch back the binary so that's

749
00:32:48,539 --> 00:32:51,559
<font color="#E5E5E5">the basic</font><font color="#CCCCCC"> method apology</font>

750
00:32:52,920 --> 00:32:57,120
please excuse my Python I'm not a Python

751
00:32:55,530 --> 00:33:00,420
expert and this was written rather

752
00:32:57,120 --> 00:33:02,550
<font color="#E5E5E5">quickly so no judging please</font>

753
00:33:00,420 --> 00:33:04,620
but anyway so here we're gonna see I'm

754
00:33:02,550 --> 00:33:07,020
gonna get the<font color="#CCCCCC"> yarr offsets</font><font color="#E5E5E5"> for this of</font>

755
00:33:04,620 --> 00:33:09,600
the we're gonna run<font color="#CCCCCC"> yar against it get</font>

756
00:33:07,020 --> 00:33:12,120
the offsets<font color="#CCCCCC"> like I said</font><font color="#E5E5E5"> again this</font>

757
00:33:09,600 --> 00:33:13,820
binary<font color="#CCCCCC"> view</font><font color="#E5E5E5"> so the very first thing</font><font color="#CCCCCC"> you</font>

758
00:33:12,120 --> 00:33:17,010
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to do when you start processing a</font>

759
00:33:13,820 --> 00:33:18,840
file is to get this binary view object

760
00:33:17,010 --> 00:33:22,770
<font color="#E5E5E5">because that's basically going to open</font>

761
00:33:18,840 --> 00:33:30,120
the door to your<font color="#E5E5E5"> API give you an</font><font color="#CCCCCC"> object</font>

762
00:33:22,770 --> 00:33:32,580
to work on<font color="#E5E5E5"> basically yes actually</font><font color="#CCCCCC"> I</font>

763
00:33:30,120 --> 00:33:37,199
should have<font color="#E5E5E5"> a bit okay so I</font><font color="#CCCCCC"> should back</font>

764
00:33:32,580 --> 00:33:39,360
up basically in headless mode you<font color="#E5E5E5"> just</font>

765
00:33:37,200 --> 00:33:41,580
import binary ninja as a library so

766
00:33:39,360 --> 00:33:46,610
you've got your binary<font color="#E5E5E5"> you add it</font><font color="#CCCCCC"> to</font>

767
00:33:41,580 --> 00:33:46,610
<font color="#E5E5E5">your Python path the whole binary ninja</font>

768
00:33:47,090 --> 00:33:52,139
<font color="#E5E5E5">library and then you can just import it</font>

769
00:33:49,860 --> 00:33:54,990
like any other<font color="#E5E5E5"> Python library so you say</font>

770
00:33:52,140 --> 00:33:57,840
import binary ninja import you know<font color="#E5E5E5"> you</font>

771
00:33:54,990 --> 00:34:00,690
know from binary view yadda yadda<font color="#E5E5E5"> so</font>

772
00:33:57,840 --> 00:34:03,179
these these methods are actually

773
00:34:00,690 --> 00:34:06,180
<font color="#E5E5E5">available to you once you you import</font>

774
00:34:03,180 --> 00:34:07,200
this<font color="#E5E5E5"> library so the very first thing</font>

775
00:34:06,180 --> 00:34:08,520
<font color="#CCCCCC">that you're going to do is get</font><font color="#E5E5E5"> this</font>

776
00:34:07,200 --> 00:34:13,230
binary view so that<font color="#E5E5E5"> you have something</font>

777
00:34:08,520 --> 00:34:15,840
<font color="#E5E5E5">to</font><font color="#CCCCCC"> work on</font><font color="#E5E5E5"> and the very first thing I</font>

778
00:34:13,230 --> 00:34:16,949
<font color="#E5E5E5">did was run linear sweep against it so</font>

779
00:34:15,840 --> 00:34:20,550
that we<font color="#E5E5E5"> can make</font><font color="#CCCCCC"> sure that</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our</font>

780
00:34:16,949 --> 00:34:23,370
functions<font color="#E5E5E5"> are analyzed or identified and</font>

781
00:34:20,550 --> 00:34:24,929
then you up you can update<font color="#CCCCCC"> the analysis</font>

782
00:34:23,370 --> 00:34:26,819
and<font color="#E5E5E5"> wait so it's just going to wait for</font>

783
00:34:24,929 --> 00:34:29,730
<font color="#CCCCCC">it to finish</font><font color="#E5E5E5"> running through that linear</font>

784
00:34:26,820 --> 00:34:32,250
sweep<font color="#CCCCCC"> then we want</font><font color="#E5E5E5"> to get the</font><font color="#CCCCCC"> xrefs</font>

785
00:34:29,730 --> 00:34:33,659
again<font color="#E5E5E5"> your your</font><font color="#CCCCCC"> most</font><font color="#E5E5E5"> the time you're</font>

786
00:34:32,250 --> 00:34:37,909
<font color="#CCCCCC">gonna have to pass</font><font color="#E5E5E5"> this binary view</font>

787
00:34:33,659 --> 00:34:42,780
object in<font color="#E5E5E5"> we're gonna get the key and</font>

788
00:34:37,909 --> 00:34:45,540
the other parameters<font color="#E5E5E5"> and then we're</font>

789
00:34:42,780 --> 00:34:47,940
gonna decrypt<font color="#E5E5E5"> and then save this back</font>

790
00:34:45,540 --> 00:34:49,560
out so my decryption<font color="#CCCCCC"> functions gonna</font>

791
00:34:47,940 --> 00:34:52,168
patch back that<font color="#E5E5E5"> binary and then save it</font>

792
00:34:49,560 --> 00:34:57,540
<font color="#E5E5E5">out and you can save it out to you know</font>

793
00:34:52,168 --> 00:34:59,069
a an external file of some sort and<font color="#E5E5E5"> I've</font>

794
00:34:57,540 --> 00:35:00,960
got a useless<font color="#E5E5E5"> print function in the</font>

795
00:34:59,070 --> 00:35:03,930
bottom of that that was<font color="#E5E5E5"> probably from</font>

796
00:35:00,960 --> 00:35:05,190
debugging<font color="#CCCCCC"> all right so I'm</font><font color="#E5E5E5"> not gonna go</font>

797
00:35:03,930 --> 00:35:07,609
<font color="#E5E5E5">through all this code but I just wanted</font>

798
00:35:05,190 --> 00:35:10,140
to show a few<font color="#CCCCCC"> things in here</font>

799
00:35:07,610 --> 00:35:12,960
so the way that yarrow works<font color="#E5E5E5"> you're</font>

800
00:35:10,140 --> 00:35:16,680
<font color="#E5E5E5">going to get basically an array of hits</font>

801
00:35:12,960 --> 00:35:18,240
<font color="#E5E5E5">so if you've got multiple offsets for</font>

802
00:35:16,680 --> 00:35:19,410
let's say there were multiple decryption

803
00:35:18,240 --> 00:35:25,979
functions or something for<font color="#CCCCCC"> some reason</font>

804
00:35:19,410 --> 00:35:28,700
<font color="#CCCCCC">it'll give you back a array of these</font>

805
00:35:25,980 --> 00:35:32,700
hits so you can you<font color="#E5E5E5"> can basically</font><font color="#CCCCCC"> just</font>

806
00:35:28,700 --> 00:35:34,980
iterate through those for<font color="#E5E5E5"> each hit then</font>

807
00:35:32,700 --> 00:35:36,390
<font color="#E5E5E5">you know you can match the strings and I</font>

808
00:35:34,980 --> 00:35:40,310
want to get<font color="#E5E5E5"> the offset of that and then</font>

809
00:35:36,390 --> 00:35:40,310
the<font color="#E5E5E5"> function</font><font color="#CCCCCC"> that contains that offset</font>

810
00:35:41,240 --> 00:35:48,839
the xrefs<font color="#E5E5E5"> again pretty simple you've got</font>

811
00:35:47,040 --> 00:35:51,180
this<font color="#E5E5E5"> in the binary review you've got</font>

812
00:35:48,840 --> 00:35:52,830
this get address for data offset this is

813
00:35:51,180 --> 00:35:54,629
the other nice thing most even though

814
00:35:52,830 --> 00:35:57,240
they're kind<font color="#E5E5E5"> of long sometimes</font><font color="#CCCCCC"> to type</font>

815
00:35:54,630 --> 00:36:02,780
out it's<font color="#E5E5E5"> nice that the the actual</font>

816
00:35:57,240 --> 00:36:05,580
functions and<font color="#E5E5E5"> API</font><font color="#CCCCCC"> the calls</font><font color="#E5E5E5"> that you're</font>

817
00:36:02,780 --> 00:36:07,410
referencing are very descriptive so get

818
00:36:05,580 --> 00:36:09,029
a<font color="#E5E5E5"> dress for data offset pretty</font>

819
00:36:07,410 --> 00:36:12,000
self-explanatory we're going to take an

820
00:36:09,030 --> 00:36:15,270
offset<font color="#E5E5E5"> and get the the actual raw</font>

821
00:36:12,000 --> 00:36:17,640
address for<font color="#CCCCCC"> that and so then then again</font>

822
00:36:15,270 --> 00:36:18,930
<font color="#E5E5E5">get functions containing so I've got my</font>

823
00:36:17,640 --> 00:36:22,379
<font color="#E5E5E5">offset I want to know what function</font>

824
00:36:18,930 --> 00:36:26,609
contains<font color="#CCCCCC"> that offset and then I'm</font><font color="#E5E5E5"> gonna</font>

825
00:36:22,380 --> 00:36:28,860
append that to these xrefs again get

826
00:36:26,610 --> 00:36:30,450
<font color="#E5E5E5">code</font><font color="#CCCCCC"> roughs</font><font color="#E5E5E5"> so I've got the start of my</font>

827
00:36:28,860 --> 00:36:32,940
function<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to get the code rest of</font>

828
00:36:30,450 --> 00:36:36,930
that<font color="#E5E5E5"> it's a very simple trying to do</font>

829
00:36:32,940 --> 00:36:40,560
this in<font color="#E5E5E5"> Ida</font><font color="#CCCCCC"> Python is would be a lot</font>

830
00:36:36,930 --> 00:36:44,040
<font color="#E5E5E5">more code basically say that so we want</font>

831
00:36:40,560 --> 00:36:44,910
to<font color="#CCCCCC"> get the key so this</font><font color="#E5E5E5"> is where one of</font>

832
00:36:44,040 --> 00:36:46,740
<font color="#E5E5E5">the things I wanted to go</font><font color="#CCCCCC"> through</font>

833
00:36:44,910 --> 00:36:48,660
<font color="#CCCCCC">because this</font><font color="#E5E5E5"> was something that I really</font>

834
00:36:46,740 --> 00:36:49,979
<font color="#CCCCCC">struggled with</font><font color="#E5E5E5"> this is one of the things</font>

835
00:36:48,660 --> 00:36:52,790
that<font color="#E5E5E5"> Josh really helped me through</font>

836
00:36:49,980 --> 00:36:55,830
<font color="#E5E5E5">because working with Ida if you've done</font>

837
00:36:52,790 --> 00:36:57,350
<font color="#E5E5E5">something like this in Ida you get your</font>

838
00:36:55,830 --> 00:36:59,549
offset and then<font color="#E5E5E5"> you're kind of like</font>

839
00:36:57,350 --> 00:37:01,230
traversing back or traversing forward

840
00:36:59,550 --> 00:37:05,250
and looking at the operands and<font color="#E5E5E5"> blah</font>

841
00:37:01,230 --> 00:37:06,660
blah<font color="#E5E5E5"> in this because you've got you've</font>

842
00:37:05,250 --> 00:37:09,090
got<font color="#CCCCCC"> that assembly level and you</font><font color="#E5E5E5"> can do</font>

843
00:37:06,660 --> 00:37:11,190
that<font color="#E5E5E5"> but you can also lift to aisle and</font>

844
00:37:09,090 --> 00:37:13,440
actually work with<font color="#E5E5E5"> the aisle the</font>

845
00:37:11,190 --> 00:37:16,950
instruction<font color="#E5E5E5"> itself in aisle or you can</font>

846
00:37:13,440 --> 00:37:21,119
go<font color="#CCCCCC"> up to ml</font><font color="#E5E5E5"> and so it kind of took a</font>

847
00:37:16,950 --> 00:37:22,950
while to wrap my brain around the<font color="#CCCCCC"> weight</font>

848
00:37:21,119 --> 00:37:28,109
you you because it's a different<font color="#CCCCCC"> way of</font>

849
00:37:22,950 --> 00:37:30,990
<font color="#E5E5E5">looking at it I guess</font><font color="#CCCCCC"> I'll say</font><font color="#E5E5E5"> rather</font>

850
00:37:28,109 --> 00:37:33,808
than<font color="#CCCCCC"> just</font><font color="#E5E5E5"> saying okay go back</font><font color="#CCCCCC"> I've got</font>

851
00:37:30,990 --> 00:37:36,299
<font color="#CCCCCC">my hit</font><font color="#E5E5E5"> let's go back find the X or call</font>

852
00:37:33,809 --> 00:37:38,160
let's<font color="#CCCCCC"> get back find the call to this</font>

853
00:37:36,299 --> 00:37:39,660
function<font color="#CCCCCC"> get the parameters that are</font>

854
00:37:38,160 --> 00:37:42,328
pushed you know<font color="#E5E5E5"> just kind of iterate</font>

855
00:37:39,660 --> 00:37:45,210
back<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> doing</font><font color="#CCCCCC"> that manually you</font>

856
00:37:42,329 --> 00:37:47,130
can<font color="#CCCCCC"> actually do it kind of semantically</font>

857
00:37:45,210 --> 00:37:47,789
where you say I've<font color="#CCCCCC"> got this call this</font>

858
00:37:47,130 --> 00:37:50,160
<font color="#E5E5E5">function</font>

859
00:37:47,789 --> 00:37:54,150
it's got parameters<font color="#E5E5E5"> rather than you</font><font color="#CCCCCC"> know</font>

860
00:37:50,160 --> 00:37:58,769
working<font color="#E5E5E5"> kind of at the</font><font color="#CCCCCC"> byte level so for</font>

861
00:37:54,150 --> 00:38:00,920
these offsets<font color="#E5E5E5"> let me go down here</font><font color="#CCCCCC"> so</font>

862
00:37:58,769 --> 00:38:03,508
once you<font color="#E5E5E5"> get this is the other</font><font color="#CCCCCC"> thing</font>

863
00:38:00,920 --> 00:38:04,109
when you've got if you're looking at the

864
00:38:03,509 --> 00:38:06,150
code

865
00:38:04,109 --> 00:38:07,170
like I said in that<font color="#E5E5E5"> graph view so</font>

866
00:38:06,150 --> 00:38:08,940
instead of<font color="#E5E5E5"> just</font><font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> an</font>

867
00:38:07,170 --> 00:38:11,039
instruction view<font color="#E5E5E5"> you can actually go</font>

868
00:38:08,940 --> 00:38:13,140
through<font color="#CCCCCC"> with</font><font color="#E5E5E5"> binary ninja you can look</font>

869
00:38:11,039 --> 00:38:14,670
at the blocks<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I can say this</font><font color="#E5E5E5"> function</font>

870
00:38:13,140 --> 00:38:16,470
<font color="#E5E5E5">block or this function block and I can</font>

871
00:38:14,670 --> 00:38:18,359
work<font color="#E5E5E5"> on a function block rather than a</font>

872
00:38:16,470 --> 00:38:22,109
whole<font color="#E5E5E5"> function or like an individual</font>

873
00:38:18,359 --> 00:38:23,730
address so when I get<font color="#CCCCCC"> the</font><font color="#E5E5E5"> functions</font>

874
00:38:22,109 --> 00:38:26,160
containing this offset<font color="#E5E5E5"> I can actually</font>

875
00:38:23,730 --> 00:38:27,660
<font color="#E5E5E5">get the basic blocks so I can look at</font>

876
00:38:26,160 --> 00:38:32,069
the<font color="#E5E5E5"> block that</font><font color="#CCCCCC"> contains that virtual</font>

877
00:38:27,660 --> 00:38:33,779
offset and and get the low-level il for

878
00:38:32,069 --> 00:38:35,339
that block<font color="#E5E5E5"> so I'm going</font><font color="#CCCCCC"> to say give me</font>

879
00:38:33,779 --> 00:38:38,369
<font color="#E5E5E5">the intermediate language the low-level</font>

880
00:38:35,339 --> 00:38:40,920
<font color="#E5E5E5">intermediate language for</font><font color="#CCCCCC"> that block</font><font color="#E5E5E5"> and</font>

881
00:38:38,369 --> 00:38:45,509
then I can iterate over<font color="#E5E5E5"> that so for</font>

882
00:38:40,920 --> 00:38:46,859
every basic block in that<font color="#E5E5E5"> in that lol</font><font color="#CCCCCC"> I</font>

883
00:38:45,509 --> 00:38:49,859
want to<font color="#E5E5E5"> look at the instruction</font>

884
00:38:46,859 --> 00:38:54,269
instruction index and then for each of

885
00:38:49,859 --> 00:38:56,519
<font color="#E5E5E5">those instructions those aisles</font><font color="#CCCCCC"> I want</font>

886
00:38:54,269 --> 00:38:59,729
to look at the<font color="#E5E5E5"> actual operations</font><font color="#CCCCCC"> so if</font>

887
00:38:56,519 --> 00:39:02,999
there's an<font color="#E5E5E5"> L set reg and an L XOR</font>

888
00:38:59,730 --> 00:39:05,630
operation then I want to say this<font color="#E5E5E5"> aisle</font>

889
00:39:02,999 --> 00:39:09,149
source right<font color="#E5E5E5"> is giving me the second</font>

890
00:39:05,630 --> 00:39:12,269
parameter for that<font color="#E5E5E5"> call so that's going</font>

891
00:39:09,150 --> 00:39:15,210
to<font color="#E5E5E5"> be my X or key and I'm just appending</font>

892
00:39:12,269 --> 00:39:17,069
that to my keys the in this<font color="#E5E5E5"> case there's</font>

893
00:39:15,210 --> 00:39:22,619
only one<font color="#E5E5E5"> but you know in case</font><font color="#CCCCCC"> you had</font>

894
00:39:17,069 --> 00:39:24,569
multiple the decryption again<font color="#E5E5E5"> we're</font>

895
00:39:22,619 --> 00:39:26,789
working<font color="#CCCCCC"> at this</font><font color="#E5E5E5"> IL level so I can say</font>

896
00:39:24,569 --> 00:39:28,799
you<font color="#E5E5E5"> know get the ll aisle at this</font>

897
00:39:26,789 --> 00:39:31,859
address<font color="#CCCCCC"> but</font><font color="#E5E5E5"> then I'm going</font><font color="#CCCCCC"> to actually</font>

898
00:39:28,799 --> 00:39:34,230
lift back lift up so I can lift up<font color="#CCCCCC"> to</font>

899
00:39:31,859 --> 00:39:36,000
this<font color="#CCCCCC"> ML I'll now</font>

900
00:39:34,230 --> 00:39:37,710
right now this was another confusing

901
00:39:36,000 --> 00:39:41,070
<font color="#E5E5E5">thing to me they haven't fully</font>

902
00:39:37,710 --> 00:39:43,410
implemented<font color="#CCCCCC"> the API for the NLL so you</font>

903
00:39:41,070 --> 00:39:46,710
actually have to lift up<font color="#CCCCCC"> to Li</font><font color="#E5E5E5"> Li ll</font>

904
00:39:43,410 --> 00:39:48,600
<font color="#CCCCCC">I'll and</font><font color="#E5E5E5"> then up</font><font color="#CCCCCC"> to ml I'll and back but</font>

905
00:39:46,710 --> 00:39:50,910
in the<font color="#E5E5E5"> future we're gonna be able to</font>

906
00:39:48,600 --> 00:39:54,900
skip this and<font color="#E5E5E5"> just get the</font><font color="#CCCCCC"> gett ml</font><font color="#E5E5E5"> I'll</font>

907
00:39:50,910 --> 00:39:56,549
at the<font color="#CCCCCC"> xref</font><font color="#E5E5E5"> address but for now we're</font>

908
00:39:54,900 --> 00:40:01,109
<font color="#E5E5E5">gonna look at this ml</font><font color="#CCCCCC"> aisle</font><font color="#E5E5E5"> operations</font>

909
00:39:56,550 --> 00:40:04,830
so I want to<font color="#E5E5E5"> see</font><font color="#CCCCCC"> I look for is this</font>

910
00:40:01,109 --> 00:40:07,319
operation<font color="#CCCCCC"> a call</font><font color="#E5E5E5"> so if it's a call then</font>

911
00:40:04,830 --> 00:40:09,359
I can get my params<font color="#CCCCCC"> you've</font><font color="#E5E5E5"> just got the</font>

912
00:40:07,320 --> 00:40:11,940
for this call<font color="#E5E5E5"> object you've got</font><font color="#CCCCCC"> a</font>

913
00:40:09,359 --> 00:40:13,259
parameter array<font color="#E5E5E5"> so I can say</font><font color="#CCCCCC"> ok my</font>

914
00:40:11,940 --> 00:40:15,119
encoded string is the first parameter

915
00:40:13,260 --> 00:40:18,210
<font color="#E5E5E5">the string size is the second parameter</font>

916
00:40:15,119 --> 00:40:22,050
and the there's like an arithmetic

917
00:40:18,210 --> 00:40:23,580
operation<font color="#CCCCCC"> that's a third parameter so</font>

918
00:40:22,050 --> 00:40:26,369
instead of saying<font color="#E5E5E5"> okay what's pushed</font>

919
00:40:23,580 --> 00:40:28,319
<font color="#E5E5E5">onto the stack</font><font color="#CCCCCC"> before this and having to</font>

920
00:40:26,369 --> 00:40:29,940
know<font color="#E5E5E5"> okay I know that there's three</font>

921
00:40:28,320 --> 00:40:31,800
arguments so I need to get this push

922
00:40:29,940 --> 00:40:35,609
this push this push<font color="#CCCCCC"> get those values and</font>

923
00:40:31,800 --> 00:40:37,980
come<font color="#E5E5E5"> back</font><font color="#CCCCCC"> down this</font><font color="#E5E5E5"> knows okay I've</font><font color="#CCCCCC"> got</font>

924
00:40:35,609 --> 00:40:40,529
a call that<font color="#E5E5E5"> call has parameters so you</font>

925
00:40:37,980 --> 00:40:44,690
don't<font color="#E5E5E5"> have to think about it really you</font>

926
00:40:40,530 --> 00:40:47,070
<font color="#CCCCCC">need</font><font color="#E5E5E5"> to get those values</font><font color="#CCCCCC"> this be our</font>

927
00:40:44,690 --> 00:40:49,440
like I<font color="#E5E5E5"> said before when you've got a</font>

928
00:40:47,070 --> 00:40:51,060
binary<font color="#CCCCCC"> view you can make one of</font><font color="#E5E5E5"> these</font>

929
00:40:49,440 --> 00:40:54,420
binary reader objects and a binary

930
00:40:51,060 --> 00:40:57,270
writer object to read and manipulate the

931
00:40:54,420 --> 00:41:00,680
actual binary so we can seek for<font color="#E5E5E5"> that</font>

932
00:40:57,270 --> 00:41:03,630
encoded<font color="#E5E5E5"> string and actually patch back</font>

933
00:41:00,680 --> 00:41:06,089
you can write<font color="#CCCCCC"> eight bytes basically so</font>

934
00:41:03,630 --> 00:41:08,550
patch back to the<font color="#E5E5E5"> binary itself which is</font>

935
00:41:06,090 --> 00:41:11,160
great this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> just the encryption</font>

936
00:41:08,550 --> 00:41:13,770
<font color="#CCCCCC">function here basically just</font><font color="#E5E5E5"> an XOR and</font>

937
00:41:11,160 --> 00:41:16,920
then you're subtracting this this one

938
00:41:13,770 --> 00:41:23,550
value and then X or even adding<font color="#CCCCCC"> it back</font>

939
00:41:16,920 --> 00:41:27,060
<font color="#CCCCCC">very simple okay so I can't actually run</font>

940
00:41:23,550 --> 00:41:29,130
the code<font color="#CCCCCC"> because I can't get the</font>

941
00:41:27,060 --> 00:41:31,440
<font color="#E5E5E5">environment set up on this corporate</font>

942
00:41:29,130 --> 00:41:33,030
laptop unfortunately but I mean I you

943
00:41:31,440 --> 00:41:35,700
guys don't really need to see me<font color="#E5E5E5"> hitting</font>

944
00:41:33,030 --> 00:41:39,119
<font color="#CCCCCC">Enter</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> terminal window</font><font color="#CCCCCC"> and then you</font>

945
00:41:35,700 --> 00:41:44,149
<font color="#CCCCCC">know it's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> very interesting but I do</font>

946
00:41:39,119 --> 00:41:48,900
want to show the result of this

947
00:41:44,150 --> 00:41:50,820
so if we go back<font color="#CCCCCC"> alright so if we go</font>

948
00:41:48,900 --> 00:41:54,660
back<font color="#CCCCCC"> to the interface here</font><font color="#E5E5E5"> so I've</font>

949
00:41:50,820 --> 00:41:57,780
<font color="#E5E5E5">already run this my decryption script so</font>

950
00:41:54,660 --> 00:42:03,180
this is our initial<font color="#E5E5E5"> our original view</font>

951
00:41:57,780 --> 00:42:06,360
here<font color="#E5E5E5"> and if we</font><font color="#CCCCCC"> go to say you can see</font>

952
00:42:03,180 --> 00:42:10,020
here this is<font color="#E5E5E5"> our offset of our encrypted</font>

953
00:42:06,360 --> 00:42:12,480
<font color="#E5E5E5">string</font><font color="#CCCCCC"> know if you if you hover over</font><font color="#E5E5E5"> it</font>

954
00:42:10,020 --> 00:42:15,420
unfortunately it's<font color="#E5E5E5"> off screen but it</font>

955
00:42:12,480 --> 00:42:19,110
shows you the actual location and memory

956
00:42:15,420 --> 00:42:22,950
where this encrypted<font color="#E5E5E5"> string is so after</font>

957
00:42:19,110 --> 00:42:24,930
I've<font color="#E5E5E5"> run this script</font><font color="#CCCCCC"> I get this file</font>

958
00:42:22,950 --> 00:42:27,720
written<font color="#E5E5E5"> out the modified binary and</font>

959
00:42:24,930 --> 00:42:33,620
let's go back<font color="#CCCCCC"> to our string to kid let's</font>

960
00:42:27,720 --> 00:42:39,390
go<font color="#E5E5E5"> back to our xrefs here and down to</font>

961
00:42:33,620 --> 00:42:43,680
the call<font color="#CCCCCC"> oops that's not the call back</font>

962
00:42:39,390 --> 00:42:47,910
here so here's<font color="#E5E5E5"> our call and you can see</font>

963
00:42:43,680 --> 00:42:51,470
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of having just this offset there</font>

964
00:42:47,910 --> 00:42:54,330
we<font color="#E5E5E5"> actually it gives us the decrypted</font>

965
00:42:51,470 --> 00:42:55,980
string and I didn't have to you<font color="#CCCCCC"> know in</font>

966
00:42:54,330 --> 00:42:57,690
Ida this would be like<font color="#CCCCCC"> a</font><font color="#E5E5E5"> comment or</font>

967
00:42:55,980 --> 00:42:59,430
<font color="#CCCCCC">something that I manually wrote back</font><font color="#E5E5E5"> to</font>

968
00:42:57,690 --> 00:43:01,350
my<font color="#E5E5E5"> database but here I've actually</font>

969
00:42:59,430 --> 00:43:04,410
patched the binary so as soon as<font color="#CCCCCC"> it</font>

970
00:43:01,350 --> 00:43:06,240
loads this again it knows what's at that

971
00:43:04,410 --> 00:43:09,359
<font color="#E5E5E5">that offset and it just gives it to</font><font color="#CCCCCC"> me</font>

972
00:43:06,240 --> 00:43:12,839
<font color="#E5E5E5">so we can actually look here let's look</font>

973
00:43:09,360 --> 00:43:14,960
<font color="#E5E5E5">at this said before we had you know this</font>

974
00:43:12,840 --> 00:43:17,940
was all these were all encrypted<font color="#E5E5E5"> strings</font>

975
00:43:14,960 --> 00:43:19,770
but<font color="#CCCCCC"> now</font><font color="#E5E5E5"> we've actually got the decrypted</font>

976
00:43:17,940 --> 00:43:22,170
versions<font color="#E5E5E5"> written back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the binary</font>

977
00:43:19,770 --> 00:43:26,520
which is really<font color="#CCCCCC"> handle</font><font color="#E5E5E5"> handy so I can</font>

978
00:43:22,170 --> 00:43:27,930
<font color="#CCCCCC">actually take this this file that I've</font>

979
00:43:26,520 --> 00:43:29,790
loaded<font color="#E5E5E5"> in</font><font color="#CCCCCC"> here and load it into any</font>

980
00:43:27,930 --> 00:43:33,379
other<font color="#E5E5E5"> tool and this stuff is already</font>

981
00:43:29,790 --> 00:43:37,970
<font color="#E5E5E5">patched so I don't have to mess</font><font color="#CCCCCC"> with it</font>

982
00:43:33,380 --> 00:43:37,970
<font color="#CCCCCC">we can see back here whoops</font>

983
00:43:42,329 --> 00:44:03,640
so here's our same region of<font color="#CCCCCC"> memory with</font>

984
00:43:45,730 --> 00:44:08,200
the encrypted so very handy<font color="#CCCCCC"> right so</font>

985
00:44:03,640 --> 00:44:11,368
I've got<font color="#E5E5E5"> actually it oops</font><font color="#CCCCCC"> sorry I'm</font>

986
00:44:08,200 --> 00:44:13,149
<font color="#E5E5E5">really</font><font color="#CCCCCC"> bad at PowerPoint all</font><font color="#E5E5E5"> right</font>

987
00:44:11,369 --> 00:44:15,099
and you're not<font color="#CCCCCC"> gonna be able to</font><font color="#E5E5E5"> see</font>

988
00:44:13,150 --> 00:44:18,940
<font color="#E5E5E5">these but basically</font><font color="#CCCCCC"> there is a free</font>

989
00:44:15,099 --> 00:44:20,140
version<font color="#E5E5E5"> of binary ninja</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only real</font>

990
00:44:18,940 --> 00:44:21,460
restriction it's pretty much fully

991
00:44:20,140 --> 00:44:23,560
featured but<font color="#E5E5E5"> you don't get headless</font><font color="#CCCCCC"> node</font>

992
00:44:21,460 --> 00:44:24,910
so you can't do the scripting but the

993
00:44:23,560 --> 00:44:27,069
personal version<font color="#E5E5E5"> if you're not using it</font>

994
00:44:24,910 --> 00:44:29,618
<font color="#CCCCCC">for commercial</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> it's like</font><font color="#E5E5E5"> a hundred</font>

995
00:44:27,069 --> 00:44:31,690
and<font color="#E5E5E5"> twenty</font><font color="#CCCCCC"> nine dollars I think 99 $129</font>

996
00:44:29,619 --> 00:44:33,700
<font color="#E5E5E5">something so it's you know unlike Ida</font>

997
00:44:31,690 --> 00:44:36,040
where I think<font color="#CCCCCC"> my license</font><font color="#E5E5E5"> was like</font>

998
00:44:33,700 --> 00:44:39,310
<font color="#CCCCCC">fifteen thousand dollars with did you</font>

999
00:44:36,040 --> 00:44:43,109
compiler<font color="#E5E5E5"> a hundred and twenty it's a</font>

1000
00:44:39,310 --> 00:44:45,310
little bit<font color="#E5E5E5"> easier</font><font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of get</font><font color="#CCCCCC"> into</font>

1001
00:44:43,109 --> 00:44:47,380
yeah say you know<font color="#E5E5E5"> it's great because</font>

1002
00:44:45,310 --> 00:44:48,990
I've heard just<font color="#E5E5E5"> the last couple</font><font color="#CCCCCC"> days</font>

1003
00:44:47,380 --> 00:44:51,339
I've heard that there's some

1004
00:44:48,990 --> 00:44:53,709
universities that<font color="#CCCCCC"> are starting to</font><font color="#E5E5E5"> use</font>

1005
00:44:51,339 --> 00:44:56,078
binary ninja in their classes<font color="#CCCCCC"> so I think</font>

1006
00:44:53,710 --> 00:44:59,319
<font color="#E5E5E5">this</font><font color="#CCCCCC"> really does have the potential to</font>

1007
00:44:56,079 --> 00:45:01,720
<font color="#E5E5E5">take off you know I'll admit I'm not</font>

1008
00:44:59,319 --> 00:45:05,859
using it a hundred<font color="#E5E5E5"> percent for my</font>

1009
00:45:01,720 --> 00:45:07,720
complete workflow yet but going<font color="#CCCCCC"> through</font>

1010
00:45:05,859 --> 00:45:11,109
this exercise<font color="#E5E5E5"> was really opened my</font><font color="#CCCCCC"> eyes</font>

1011
00:45:07,720 --> 00:45:16,118
to how<font color="#E5E5E5"> easily you</font><font color="#CCCCCC"> can work with this</font><font color="#E5E5E5"> API</font>

1012
00:45:11,109 --> 00:45:19,450
<font color="#E5E5E5">and the not only ease of it but it's</font>

1013
00:45:16,119 --> 00:45:22,000
<font color="#CCCCCC">very robust</font><font color="#E5E5E5"> so you know I really think</font>

1014
00:45:19,450 --> 00:45:23,950
that<font color="#E5E5E5"> it's got a chance to take off but</font>

1015
00:45:22,000 --> 00:45:26,589
even<font color="#CCCCCC"> the commercial version was only is</font>

1016
00:45:23,950 --> 00:45:29,078
only<font color="#E5E5E5"> six</font><font color="#CCCCCC"> hundred dollars so and the</font>

1017
00:45:26,589 --> 00:45:30,490
support<font color="#E5E5E5"> you know you've got you just go</font>

1018
00:45:29,079 --> 00:45:32,920
into the slack<font color="#CCCCCC"> channel and</font><font color="#E5E5E5"> I mean</font>

1019
00:45:30,490 --> 00:45:35,560
there's tons of people<font color="#E5E5E5"> are just willing</font>

1020
00:45:32,920 --> 00:45:41,950
to help<font color="#E5E5E5"> and get answers</font><font color="#CCCCCC"> and even patches</font>

1021
00:45:35,560 --> 00:45:43,450
when RSS or the guy<font color="#CCCCCC"> that Ryan</font><font color="#E5E5E5"> when he</font>

1022
00:45:41,950 --> 00:45:47,230
found the bug that<font color="#E5E5E5"> when I was in the</font>

1023
00:45:43,450 --> 00:45:48,578
<font color="#CCCCCC">disassembly</font><font color="#E5E5E5"> and identified it</font><font color="#CCCCCC"> it was you</font>

1024
00:45:47,230 --> 00:45:50,800
know a few<font color="#CCCCCC"> hours later he was</font><font color="#E5E5E5"> like oh</font>

1025
00:45:48,579 --> 00:45:52,599
okay<font color="#E5E5E5"> that's fixed now so you're good to</font>

1026
00:45:50,800 --> 00:45:57,270
go<font color="#E5E5E5"> we're gonna</font><font color="#CCCCCC"> push that out in the next</font>

1027
00:45:52,599 --> 00:45:59,890
step cycle<font color="#E5E5E5"> or the next</font><font color="#CCCCCC"> def release great</font>

1028
00:45:57,270 --> 00:46:02,980
<font color="#CCCCCC">so I just have some the community</font>

1029
00:45:59,890 --> 00:46:05,589
plugins are on vector<font color="#E5E5E5"> 35 s said some</font>

1030
00:46:02,980 --> 00:46:08,140
github.com slash vector 35 that's where

1031
00:46:05,589 --> 00:46:09,880
you'll find<font color="#E5E5E5"> the github and the community</font>

1032
00:46:08,140 --> 00:46:11,618
<font color="#E5E5E5">plugins and all that a lot of this code</font>

1033
00:46:09,880 --> 00:46:15,730
<font color="#E5E5E5">is</font><font color="#CCCCCC"> actually open source so if you go to</font>

1034
00:46:11,619 --> 00:46:18,550
the let's<font color="#E5E5E5"> go</font><font color="#CCCCCC"> back here</font>

1035
00:46:15,730 --> 00:46:21,520
I don't<font color="#E5E5E5"> have internet</font><font color="#CCCCCC"> access but</font><font color="#E5E5E5"> I did</font>

1036
00:46:18,550 --> 00:46:24,160
load this beforehand now this was a very

1037
00:46:21,520 --> 00:46:25,720
<font color="#CCCCCC">good this</font><font color="#E5E5E5"> is another</font><font color="#CCCCCC"> Josh really has</font><font color="#E5E5E5"> if</font>

1038
00:46:24,160 --> 00:46:27,819
you're interested<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> I would</font>

1039
00:46:25,720 --> 00:46:29,980
<font color="#CCCCCC">definitely go to the trail of its blog</font>

1040
00:46:27,820 --> 00:46:31,720
<font color="#E5E5E5">he's written some really</font><font color="#CCCCCC"> good</font><font color="#E5E5E5"> blog post</font>

1041
00:46:29,980 --> 00:46:33,430
<font color="#E5E5E5">explaining this is the the one that I</font>

1042
00:46:31,720 --> 00:46:35,439
<font color="#CCCCCC">mentioned earlier explaining</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> low</font>

1043
00:46:33,430 --> 00:46:36,819
<font color="#CCCCCC">level</font><font color="#E5E5E5"> I'll so it's actually a tree</font>

1044
00:46:35,440 --> 00:46:38,470
structure this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a way that they did</font><font color="#E5E5E5"> it</font>

1045
00:46:36,820 --> 00:46:42,579
and it goes<font color="#E5E5E5"> into more detail</font><font color="#CCCCCC"> in the</font>

1046
00:46:38,470 --> 00:46:44,319
developer guide which is<font color="#E5E5E5"> here so this</font>

1047
00:46:42,579 --> 00:46:46,780
this developer guide<font color="#E5E5E5"> written by the</font>

1048
00:46:44,320 --> 00:46:48,160
binary ninja guys<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of explains</font>

1049
00:46:46,780 --> 00:46:51,270
<font color="#E5E5E5">here's you</font><font color="#CCCCCC"> know the lifted Isle</font>

1050
00:46:48,160 --> 00:46:54,098
<font color="#CCCCCC">low-level Isle mapped medium and then</font>

1051
00:46:51,270 --> 00:46:56,020
the future high level<font color="#E5E5E5"> and they just kind</font>

1052
00:46:54,099 --> 00:46:58,359
of go through an example<font color="#CCCCCC"> to to walk you</font>

1053
00:46:56,020 --> 00:46:59,680
through what<font color="#CCCCCC"> it means</font><font color="#E5E5E5"> this was very</font>

1054
00:46:58,359 --> 00:47:03,029
helpful<font color="#E5E5E5"> for me not knowing what</font>

1055
00:46:59,680 --> 00:47:05,319
intermediate languages were initially

1056
00:47:03,030 --> 00:47:09,070
<font color="#E5E5E5">and so</font><font color="#CCCCCC"> they talk about that's tree</font>

1057
00:47:05,320 --> 00:47:11,500
structure so in this case this<font color="#CCCCCC"> is a load</font>

1058
00:47:09,070 --> 00:47:14,170
effective address<font color="#E5E5E5"> so we're loading</font><font color="#CCCCCC"> edx +</font>

1059
00:47:11,500 --> 00:47:17,079
<font color="#CCCCCC">ec</font><font color="#E5E5E5"> x</font><font color="#CCCCCC"> times four into e ax</font><font color="#E5E5E5"> so the way</font>

1060
00:47:14,170 --> 00:47:22,839
that<font color="#E5E5E5"> works we've got an lol</font><font color="#CCCCCC"> ad</font><font color="#E5E5E5"> so we're</font>

1061
00:47:17,079 --> 00:47:26,319
adding<font color="#E5E5E5"> source and dust this</font><font color="#CCCCCC"> ec x times</font>

1062
00:47:22,839 --> 00:47:31,390
<font color="#CCCCCC">four is</font><font color="#E5E5E5"> actually going to be a shift by</font>

1063
00:47:26,319 --> 00:47:34,390
two so we've got this<font color="#CCCCCC"> l</font><font color="#E5E5E5"> LS l shifting</font>

1064
00:47:31,390 --> 00:47:36,520
<font color="#CCCCCC">ECX by</font><font color="#E5E5E5"> two and we're gonna load that</font>

1065
00:47:34,390 --> 00:47:39,609
<font color="#CCCCCC">into EAX so it's just kind of gives</font><font color="#E5E5E5"> you</font>

1066
00:47:36,520 --> 00:47:43,300
a pictorial<font color="#E5E5E5"> demonstration of how the</font><font color="#CCCCCC"> LOL</font>

1067
00:47:39,609 --> 00:47:47,160
works in this true structure but that

1068
00:47:43,300 --> 00:47:47,160
was not what I<font color="#E5E5E5"> was going over here for</font>

1069
00:47:47,190 --> 00:47:53,890
what was I talking about github<font color="#E5E5E5"> thank</font>

1070
00:47:52,119 --> 00:47:56,579
you

1071
00:47:53,890 --> 00:47:56,578
that's<font color="#CCCCCC"> Yara</font>

1072
00:47:59,150 --> 00:48:06,619
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> okay I don't remember what I was</font>

1073
00:48:02,150 --> 00:48:09,380
<font color="#CCCCCC">talking about Josh has thrown me off</font><font color="#E5E5E5"> but</font>

1074
00:48:06,619 --> 00:48:10,130
anyway yeah this documentation is<font color="#CCCCCC"> very</font>

1075
00:48:09,380 --> 00:48:12,109
<font color="#E5E5E5">good</font>

1076
00:48:10,130 --> 00:48:14,660
oh here's the yeah this<font color="#E5E5E5"> is what I was</font>

1077
00:48:12,109 --> 00:48:17,299
<font color="#E5E5E5">talking about the API</font><font color="#CCCCCC"> documentation</font><font color="#E5E5E5"> so I</font>

1078
00:48:14,660 --> 00:48:19,940
can't actually load<font color="#CCCCCC"> it but any of</font><font color="#E5E5E5"> these</font>

1079
00:48:17,299 --> 00:48:21,740
<font color="#E5E5E5">modules you</font><font color="#CCCCCC"> can actually you can</font>

1080
00:48:19,940 --> 00:48:23,450
<font color="#CCCCCC">actually see the source for that so</font>

1081
00:48:21,740 --> 00:48:24,709
there have been<font color="#E5E5E5"> a</font><font color="#CCCCCC"> few times where you</font>

1082
00:48:23,450 --> 00:48:26,538
know they didn't necessarily give like

1083
00:48:24,710 --> 00:48:27,859
much of<font color="#E5E5E5"> a description</font><font color="#CCCCCC"> you know some of</font>

1084
00:48:26,539 --> 00:48:29,720
these<font color="#E5E5E5"> things actually have a good</font>

1085
00:48:27,859 --> 00:48:32,210
description<font color="#E5E5E5"> like this analysis</font>

1086
00:48:29,720 --> 00:48:34,279
completion event you can see<font color="#E5E5E5"> gives me a</font>

1087
00:48:32,210 --> 00:48:37,069
good<font color="#CCCCCC"> description of what what this</font>

1088
00:48:34,279 --> 00:48:38,749
module<font color="#CCCCCC"> is doing but if</font><font color="#E5E5E5"> you need more</font><font color="#CCCCCC"> you</font>

1089
00:48:37,069 --> 00:48:41,029
know the source is<font color="#CCCCCC"> actually there which</font>

1090
00:48:38,749 --> 00:48:43,279
is nice<font color="#CCCCCC"> you can actually verify things</font>

1091
00:48:41,029 --> 00:48:46,910
<font color="#CCCCCC">and a lot of these actually have I can't</font>

1092
00:48:43,279 --> 00:48:51,589
scroll sideways but there<font color="#E5E5E5"> will actually</font>

1093
00:48:46,910 --> 00:48:56,960
be examples which is nice nice change

1094
00:48:51,589 --> 00:48:58,460
<font color="#CCCCCC">I'll say all right so we've got</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> 10</font>

1095
00:48:56,960 --> 00:49:03,049
minutes<font color="#E5E5E5"> left I wanted to leave some</font><font color="#CCCCCC"> time</font>

1096
00:48:58,460 --> 00:49:04,489
for<font color="#E5E5E5"> questions because I know</font><font color="#CCCCCC"> you know I</font>

1097
00:49:03,049 --> 00:49:06,200
had a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of questions when I was first</font>

1098
00:49:04,489 --> 00:49:09,279
doing this and like I said<font color="#E5E5E5"> the</font><font color="#CCCCCC"> slack</font>

1099
00:49:06,200 --> 00:49:12,980
community it was just<font color="#E5E5E5"> amazing</font>

1100
00:49:09,279 --> 00:49:15,739
<font color="#E5E5E5">this is my contact info but gutter troll</font>

1101
00:49:12,980 --> 00:49:19,150
on Twitter<font color="#E5E5E5"> and feel free to email me as</font>

1102
00:49:15,739 --> 00:49:22,150
well<font color="#CCCCCC"> but</font><font color="#E5E5E5"> does anybody have any questions</font>

1103
00:49:19,150 --> 00:49:22,150
yeah

1104
00:49:39,350 --> 00:49:43,440
yes he<font color="#CCCCCC"> was</font><font color="#E5E5E5"> asking you know how is this</font>

1105
00:49:41,880 --> 00:49:45,030
gonna<font color="#E5E5E5"> change</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> workflow basically are</font>

1106
00:49:43,440 --> 00:49:47,970
you using<font color="#E5E5E5"> it isn't gonna change the</font>

1107
00:49:45,030 --> 00:49:50,040
workflow I'd say yeah<font color="#E5E5E5"> you know a lot</font><font color="#CCCCCC"> of</font>

1108
00:49:47,970 --> 00:49:52,620
times with<font color="#CCCCCC"> Ida I'll just load load the</font>

1109
00:49:50,040 --> 00:49:57,120
binary up and do some<font color="#E5E5E5"> static analysis</font>

1110
00:49:52,620 --> 00:49:58,560
but with the<font color="#E5E5E5"> ability of the API one of</font>

1111
00:49:57,120 --> 00:50:01,650
the<font color="#CCCCCC"> the things I think I mentioned</font>

1112
00:49:58,560 --> 00:50:04,140
<font color="#CCCCCC">before</font><font color="#E5E5E5"> that Josh had written about back</font>

1113
00:50:01,650 --> 00:50:07,500
<font color="#E5E5E5">in 2016 was processing like</font><font color="#CCCCCC"> 2000</font>

1114
00:50:04,140 --> 00:50:09,029
binaries<font color="#E5E5E5"> with this so you know a lot of</font>

1115
00:50:07,500 --> 00:50:11,520
times the initial will probably be the

1116
00:50:09,030 --> 00:50:13,140
<font color="#E5E5E5">same</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know I'll load up this plug X</font>

1117
00:50:11,520 --> 00:50:15,210
sample and I need to find the decryption

1118
00:50:13,140 --> 00:50:18,660
routine<font color="#E5E5E5"> right but once I identify that</font>

1119
00:50:15,210 --> 00:50:20,250
<font color="#E5E5E5">instead</font><font color="#CCCCCC"> of in Ida you know</font><font color="#E5E5E5"> maybe writing</font>

1120
00:50:18,660 --> 00:50:22,890
<font color="#CCCCCC">your signature and</font><font color="#E5E5E5"> finding some</font><font color="#CCCCCC"> other</font>

1121
00:50:20,250 --> 00:50:24,540
samples<font color="#E5E5E5"> or something like</font><font color="#CCCCCC"> that you can</font>

1122
00:50:22,890 --> 00:50:29,339
very quickly<font color="#E5E5E5"> write up one of these</font>

1123
00:50:24,540 --> 00:50:31,050
decryption or<font color="#CCCCCC"> script</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> this to run</font>

1124
00:50:29,340 --> 00:50:33,840
<font color="#E5E5E5">against</font><font color="#CCCCCC"> if let's say I'd run a retro</font>

1125
00:50:31,050 --> 00:50:36,060
hunt or something on virustotal<font color="#E5E5E5"> to find</font>

1126
00:50:33,840 --> 00:50:38,840
a bunch<font color="#CCCCCC"> of samples</font><font color="#E5E5E5"> then I can very</font>

1127
00:50:36,060 --> 00:50:40,950
easily process<font color="#CCCCCC"> a large</font><font color="#E5E5E5"> number of</font><font color="#CCCCCC"> samples</font>

1128
00:50:38,840 --> 00:50:44,010
<font color="#E5E5E5">whereas before you know it might have</font>

1129
00:50:40,950 --> 00:50:46,169
you know<font color="#E5E5E5"> I'd run</font><font color="#CCCCCC"> yarra manually and</font><font color="#E5E5E5"> I</font>

1130
00:50:44,010 --> 00:50:47,580
might write<font color="#CCCCCC"> the decryption routine for</font>

1131
00:50:46,170 --> 00:50:50,190
Ida Python but<font color="#E5E5E5"> it would take</font><font color="#CCCCCC"> me a lot</font>

1132
00:50:47,580 --> 00:50:51,630
longer<font color="#CCCCCC"> yeah I</font><font color="#E5E5E5"> don't know if that really</font>

1133
00:50:50,190 --> 00:50:53,450
answers<font color="#E5E5E5"> the question but</font><font color="#CCCCCC"> you know I</font>

1134
00:50:51,630 --> 00:50:56,580
guess I'll say that it's<font color="#E5E5E5"> not exactly</font>

1135
00:50:53,450 --> 00:50:59,189
<font color="#E5E5E5">like I</font><font color="#CCCCCC"> said it's not really</font><font color="#E5E5E5"> in my</font>

1136
00:50:56,580 --> 00:51:01,680
<font color="#CCCCCC">day-to-day workflow just yet so</font><font color="#E5E5E5"> that's</font>

1137
00:50:59,190 --> 00:51:03,060
probably gonna<font color="#CCCCCC"> change once I get a</font>

1138
00:51:01,680 --> 00:51:05,310
<font color="#E5E5E5">little bit more comfortable with it but</font>

1139
00:51:03,060 --> 00:51:09,390
I really wanted<font color="#CCCCCC"> to because people were</font>

1140
00:51:05,310 --> 00:51:10,680
<font color="#E5E5E5">saying you</font><font color="#CCCCCC"> know i I've kind of played</font>

1141
00:51:09,390 --> 00:51:12,960
with<font color="#E5E5E5"> it but I don't</font><font color="#CCCCCC"> really know how to</font>

1142
00:51:10,680 --> 00:51:15,000
<font color="#E5E5E5">use</font><font color="#CCCCCC"> it I really wanted</font><font color="#E5E5E5"> to go through</font>

1143
00:51:12,960 --> 00:51:16,680
this<font color="#E5E5E5"> exercise</font><font color="#CCCCCC"> just to say you know</font><font color="#E5E5E5"> it's</font>

1144
00:51:15,000 --> 00:51:19,410
really not that<font color="#CCCCCC"> scary it's not that hard</font>

1145
00:51:16,680 --> 00:51:22,109
the there's a<font color="#E5E5E5"> lot of help out there I</font>

1146
00:51:19,410 --> 00:51:23,730
felt<font color="#E5E5E5"> very shy about asking for</font><font color="#CCCCCC"> help</font>

1147
00:51:22,110 --> 00:51:26,430
you know the whole<font color="#CCCCCC"> imposter</font><font color="#E5E5E5"> syndrome</font>

1148
00:51:23,730 --> 00:51:28,620
thing it's like<font color="#CCCCCC"> you know I don't know</font>

1149
00:51:26,430 --> 00:51:30,029
what I'm doing whatever<font color="#E5E5E5"> but everybody is</font>

1150
00:51:28,620 --> 00:51:32,400
very<font color="#CCCCCC"> supportive</font><font color="#E5E5E5"> and very helpful</font><font color="#CCCCCC"> and</font>

1151
00:51:30,030 --> 00:51:34,500
really<font color="#E5E5E5"> just wants to get they</font><font color="#CCCCCC"> just want</font>

1152
00:51:32,400 --> 00:51:35,790
to get<font color="#CCCCCC"> more</font><font color="#E5E5E5"> people using</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and build</font>

1153
00:51:34,500 --> 00:51:38,100
that community so that we can all work

1154
00:51:35,790 --> 00:51:41,910
<font color="#CCCCCC">off of</font><font color="#E5E5E5"> each other</font><font color="#CCCCCC"> so there's a</font><font color="#E5E5E5"> really</font>

1155
00:51:38,100 --> 00:51:43,950
<font color="#E5E5E5">good exercise</font><font color="#CCCCCC"> and I hope</font><font color="#E5E5E5"> that maybe</font>

1156
00:51:41,910 --> 00:51:45,569
you'll<font color="#E5E5E5"> take a look at it and play</font><font color="#CCCCCC"> around</font>

1157
00:51:43,950 --> 00:51:47,339
<font color="#E5E5E5">with it too because the more</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> that</font>

1158
00:51:45,570 --> 00:51:47,980
are using<font color="#E5E5E5"> it the more people we have to</font>

1159
00:51:47,340 --> 00:51:51,550
<font color="#CCCCCC">balance off</font>

1160
00:51:47,980 --> 00:51:55,180
and you know<font color="#E5E5E5"> helped solve problems</font><font color="#CCCCCC"> you</font>

1161
00:51:51,550 --> 00:52:07,780
know when they come<font color="#CCCCCC"> along so any</font><font color="#E5E5E5"> other</font>

1162
00:51:55,180 --> 00:52:19,960
questions<font color="#E5E5E5"> yeah yeah I know you hate</font><font color="#CCCCCC"> Yara</font>

1163
00:52:07,780 --> 00:52:21,880
<font color="#CCCCCC">but yeah I mean</font><font color="#E5E5E5"> you definitely could so</font>

1164
00:52:19,960 --> 00:52:25,600
he is<font color="#E5E5E5"> asking instead of using Yara to</font>

1165
00:52:21,880 --> 00:52:28,119
identify the decryption routine can you

1166
00:52:25,600 --> 00:52:30,009
use the<font color="#CCCCCC"> il to actually say you know</font>

1167
00:52:28,119 --> 00:52:31,300
<font color="#CCCCCC">search for like a set</font><font color="#E5E5E5"> of instructions</font>

1168
00:52:30,010 --> 00:52:32,380
and<font color="#E5E5E5"> I didn't really think about that</font>

1169
00:52:31,300 --> 00:52:34,930
that<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of gets back to my point</font>

1170
00:52:32,380 --> 00:52:37,240
<font color="#CCCCCC">initially where when I went into this</font>

1171
00:52:34,930 --> 00:52:39,009
I'm still in that old mindset<font color="#E5E5E5"> of you</font>

1172
00:52:37,240 --> 00:52:42,399
know<font color="#E5E5E5"> this is how I've always done</font><font color="#CCCCCC"> it and</font>

1173
00:52:39,010 --> 00:52:43,869
<font color="#CCCCCC">so having to go through the il really</font>

1174
00:52:42,400 --> 00:52:45,790
opened my mind<font color="#E5E5E5"> to hey I have to</font><font color="#CCCCCC"> think</font>

1175
00:52:43,869 --> 00:52:47,830
<font color="#E5E5E5">about</font><font color="#CCCCCC"> this differently and so I hadn't</font>

1176
00:52:45,790 --> 00:52:50,340
really thought about<font color="#E5E5E5"> using the aisle</font>

1177
00:52:47,830 --> 00:52:53,350
that<font color="#E5E5E5"> way but that would certainly be</font>

1178
00:52:50,340 --> 00:52:56,140
potentially more elegant than<font color="#CCCCCC"> Yara which</font>

1179
00:52:53,350 --> 00:53:00,220
can be they call it the Swiss<font color="#E5E5E5"> Army knife</font>

1180
00:52:56,140 --> 00:53:02,410
but<font color="#E5E5E5"> you know sometimes using a knife to</font>

1181
00:53:00,220 --> 00:53:06,250
<font color="#E5E5E5">kind of hack at something until you know</font>

1182
00:53:02,410 --> 00:53:07,629
he get it to<font color="#E5E5E5"> work so so yeah I hadn't</font>

1183
00:53:06,250 --> 00:53:09,880
thought<font color="#E5E5E5"> about it that way but you</font>

1184
00:53:07,630 --> 00:53:12,369
certainly could because you've got like

1185
00:53:09,880 --> 00:53:17,260
I said in that ello I'll call you just

1186
00:53:12,369 --> 00:53:20,530
get back<font color="#E5E5E5"> to you've got these</font><font color="#CCCCCC"> MLL</font>

1187
00:53:17,260 --> 00:53:22,359
operations dot you know<font color="#E5E5E5"> ml</font><font color="#CCCCCC"> i'll call</font><font color="#E5E5E5"> ad</font>

1188
00:53:20,530 --> 00:53:25,720
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> all of those</font><font color="#E5E5E5"> things so</font><font color="#CCCCCC"> you</font>

1189
00:53:22,359 --> 00:53:28,210
could certainly like you know set<font color="#CCCCCC"> up an</font>

1190
00:53:25,720 --> 00:53:30,310
array or<font color="#E5E5E5"> something or can't think off</font>

1191
00:53:28,210 --> 00:53:31,990
the<font color="#E5E5E5"> top</font><font color="#CCCCCC"> of my</font><font color="#E5E5E5"> head how you do it but if</font>

1192
00:53:30,310 --> 00:53:33,970
you're just<font color="#E5E5E5"> looking</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a pattern of</font>

1193
00:53:31,990 --> 00:53:35,890
<font color="#E5E5E5">push push call or something like that</font>

1194
00:53:33,970 --> 00:53:40,020
<font color="#E5E5E5">you could</font><font color="#CCCCCC"> certainly do that</font><font color="#E5E5E5"> and then get</font>

1195
00:53:35,890 --> 00:53:40,020
the xrefs<font color="#E5E5E5"> so yeah that's a good idea</font>

1196
00:53:41,700 --> 00:53:49,810
<font color="#CCCCCC">any other questions I think</font><font color="#E5E5E5"> we're almost</font>

1197
00:53:46,840 --> 00:53:52,090
out of time<font color="#CCCCCC"> here</font><font color="#E5E5E5"> yeah or if you can if</font>

1198
00:53:49,810 --> 00:53:54,630
you want to<font color="#E5E5E5"> you can see me after I've</font>

1199
00:53:52,090 --> 00:53:54,630
got<font color="#E5E5E5"> stickers</font>

1200
00:54:01,580 --> 00:54:04,659
[Applause]

