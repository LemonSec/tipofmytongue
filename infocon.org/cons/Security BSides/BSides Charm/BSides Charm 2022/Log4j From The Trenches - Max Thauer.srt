1
00:00:25,279 --> 00:00:26,400
all right everyone i think we're gonna

2
00:00:26,400 --> 00:00:28,960
get started here um so good afternoon

3
00:00:28,960 --> 00:00:30,960
everyone my name is max tower i'm a

4
00:00:30,960 --> 00:00:33,280
senior consultant at mandiant and today

5
00:00:33,280 --> 00:00:35,520
we're going to be talking about log4j uh

6
00:00:35,520 --> 00:00:37,600
specifically some incidents

7
00:00:37,600 --> 00:00:40,879
that you know we've responded to

8
00:00:40,879 --> 00:00:44,000
specifically on vmware horizon servers

9
00:00:44,000 --> 00:00:46,079
so kind of our agenda for today

10
00:00:46,079 --> 00:00:47,760
if you like you know the obligatory

11
00:00:47,760 --> 00:00:49,520
spiel of who i am

12
00:00:49,520 --> 00:00:51,920
uh why we're maybe here i will talk a

13
00:00:51,920 --> 00:00:53,520
little bit about how it works you know

14
00:00:53,520 --> 00:00:56,320
specifically like uh an overview of kind

15
00:00:56,320 --> 00:00:59,039
of the exploit chain and the cve then

16
00:00:59,039 --> 00:01:00,320
we'll kind of dive into three different

17
00:01:00,320 --> 00:01:02,960
scenarios number one looking at uh

18
00:01:02,960 --> 00:01:05,280
persistent access via web shell number

19
00:01:05,280 --> 00:01:07,119
two looking at a cobalt strike beacon

20
00:01:07,119 --> 00:01:08,159
and then number three looking at a

21
00:01:08,159 --> 00:01:10,240
crypto miner and kind of with each of

22
00:01:10,240 --> 00:01:12,560
those scenarios talk about some forensic

23
00:01:12,560 --> 00:01:14,560
artifacts that might be useful

24
00:01:14,560 --> 00:01:16,880
to basically you know identify

25
00:01:16,880 --> 00:01:18,880
this activity as it happens

26
00:01:18,880 --> 00:01:20,240
and then finally we'll jump into some

27
00:01:20,240 --> 00:01:22,400
detection and prevention uh basically

28
00:01:22,400 --> 00:01:24,080
talking through

29
00:01:24,080 --> 00:01:25,680
some you know pre you know commercially

30
00:01:25,680 --> 00:01:28,479
available uh you know edr tools things

31
00:01:28,479 --> 00:01:30,880
like that uh and you know ways you could

32
00:01:30,880 --> 00:01:32,640
basically identify this activity in

33
00:01:32,640 --> 00:01:35,200
those tools

34
00:01:35,200 --> 00:01:38,240
so kind of obligatory disclaimer um you

35
00:01:38,240 --> 00:01:39,840
know this the case studies that i'm

36
00:01:39,840 --> 00:01:42,000
going to present here uh you know are

37
00:01:42,000 --> 00:01:43,520
drawn from our experiences and

38
00:01:43,520 --> 00:01:45,200
activities working for a variety of

39
00:01:45,200 --> 00:01:47,360
customers they don't represent our work

40
00:01:47,360 --> 00:01:49,439
on you know any you know one specific

41
00:01:49,439 --> 00:01:53,439
customer um i will say in particular

42
00:01:53,439 --> 00:01:55,360
you know each of these instances that

43
00:01:55,360 --> 00:01:57,360
i'm going to cover uh kind of cross

44
00:01:57,360 --> 00:01:59,280
multiple verticals and things like that

45
00:01:59,280 --> 00:02:00,960
so it's not necessarily you know

46
00:02:00,960 --> 00:02:02,560
specific to

47
00:02:02,560 --> 00:02:04,560
you know one you know distinct group or

48
00:02:04,560 --> 00:02:05,600
vertical

49
00:02:05,600 --> 00:02:07,840
and with that as well all the samples

50
00:02:07,840 --> 00:02:09,679
ips everything are available on

51
00:02:09,679 --> 00:02:11,599
virustotal so there's nothing like you

52
00:02:11,599 --> 00:02:14,640
know really proprietary uh here per se

53
00:02:14,640 --> 00:02:15,920
if you wanted to go you know kind of

54
00:02:15,920 --> 00:02:17,920
study this yourself it's widely

55
00:02:17,920 --> 00:02:19,760
available

56
00:02:19,760 --> 00:02:20,959
all right so a little bit of a

57
00:02:20,959 --> 00:02:23,040
background about myself

58
00:02:23,040 --> 00:02:25,520
like i said i work at mandiant in their

59
00:02:25,520 --> 00:02:27,040
ir group

60
00:02:27,040 --> 00:02:30,160
i basically do ir incident management

61
00:02:30,160 --> 00:02:32,160
digital forensics

62
00:02:32,160 --> 00:02:34,560
my january of this year was consumed by

63
00:02:34,560 --> 00:02:37,040
log4j as you could probably imagine

64
00:02:37,040 --> 00:02:39,040
and there's my email and twitter handle

65
00:02:39,040 --> 00:02:40,239
if you're interested in getting in

66
00:02:40,239 --> 00:02:43,040
contact with me

67
00:02:43,120 --> 00:02:45,599
all right so as far as the criticality

68
00:02:45,599 --> 00:02:46,480
goes

69
00:02:46,480 --> 00:02:49,280
can anybody name you know maybe besides

70
00:02:49,280 --> 00:02:51,040
vmware horizon which was mentioned in

71
00:02:51,040 --> 00:02:53,200
the abstract at least you know one other

72
00:02:53,200 --> 00:02:56,720
product that uses log4j

73
00:02:58,400 --> 00:02:59,760
sorry

74
00:02:59,760 --> 00:03:02,319
yep it's an apache product but

75
00:03:02,319 --> 00:03:04,319
uh but basically you know i would say

76
00:03:04,319 --> 00:03:07,599
aside from uh you know you know specific

77
00:03:07,599 --> 00:03:09,840
apache products uh you know there are

78
00:03:09,840 --> 00:03:12,560
quite a few commercial products they use

79
00:03:12,560 --> 00:03:14,959
you know log4j under the hood primarily

80
00:03:14,959 --> 00:03:17,519
because you know they're written in java

81
00:03:17,519 --> 00:03:19,519
it just kind of goes to show

82
00:03:19,519 --> 00:03:22,159
log4j is actually pretty widely used in

83
00:03:22,159 --> 00:03:24,080
a lot of stuff so

84
00:03:24,080 --> 00:03:26,080
as you can probably imagine the fallout

85
00:03:26,080 --> 00:03:28,959
is pretty significant

86
00:03:28,959 --> 00:03:31,200
all right so to kind of talk through

87
00:03:31,200 --> 00:03:33,680
you know the overview of it um you know

88
00:03:33,680 --> 00:03:36,519
we it was assigned cve

89
00:03:36,519 --> 00:03:38,080
2021-44832

90
00:03:38,080 --> 00:03:41,599
kind of dubbed you know log4j log4shell

91
00:03:41,599 --> 00:03:44,480
but basically back in november of 2021

92
00:03:44,480 --> 00:03:46,480
an alibaba researcher

93
00:03:46,480 --> 00:03:49,280
you know identified the bug

94
00:03:49,280 --> 00:03:52,720
basically reported it to apache

95
00:03:52,720 --> 00:03:54,640
around december 6th you know there's

96
00:03:54,640 --> 00:03:57,680
basically i guess the first patch per se

97
00:03:57,680 --> 00:03:59,360
we start seeing the proof of concept

98
00:03:59,360 --> 00:04:01,680
exploit code published on places like

99
00:04:01,680 --> 00:04:04,159
github on december 9th and 10th

100
00:04:04,159 --> 00:04:07,200
then uh you know on december 13th

101
00:04:07,200 --> 00:04:09,840
apache puts out a second patch as some

102
00:04:09,840 --> 00:04:11,439
of you probably know there's a little

103
00:04:11,439 --> 00:04:14,159
bit of a rough uh you know i guess patch

104
00:04:14,159 --> 00:04:15,920
release for apache

105
00:04:15,920 --> 00:04:17,918
but it's kind of a hard thing you know

106
00:04:17,918 --> 00:04:19,918
to basically

107
00:04:19,918 --> 00:04:22,320
correct this kind of problem so

108
00:04:22,320 --> 00:04:23,759
you know i do give them you know some

109
00:04:23,759 --> 00:04:26,479
credit per se

110
00:04:27,680 --> 00:04:28,639
so

111
00:04:28,639 --> 00:04:30,960
kind of as a log4j you know at a high

112
00:04:30,960 --> 00:04:33,280
level um it's basically a logging

113
00:04:33,280 --> 00:04:35,199
library so

114
00:04:35,199 --> 00:04:36,720
you know people ask me you know why

115
00:04:36,720 --> 00:04:38,000
would somebody you know want to use

116
00:04:38,000 --> 00:04:41,199
log4j why do products have to use log4j

117
00:04:41,199 --> 00:04:43,440
uh you know and basically the

118
00:04:43,440 --> 00:04:45,840
uh the analogy i give is

119
00:04:45,840 --> 00:04:48,240
you know why reinvent the wheel right if

120
00:04:48,240 --> 00:04:49,840
you have you know something that

121
00:04:49,840 --> 00:04:51,840
basically allows you to you know write

122
00:04:51,840 --> 00:04:54,080
logs things like that uh you know when

123
00:04:54,080 --> 00:04:57,360
you're developing java programs

124
00:04:57,360 --> 00:04:59,199
why you know reinvent the wheel when you

125
00:04:59,199 --> 00:05:00,720
just have something that works great

126
00:05:00,720 --> 00:05:03,039
right i do you know some

127
00:05:03,039 --> 00:05:04,639
python scripting and things like that on

128
00:05:04,639 --> 00:05:06,000
the side

129
00:05:06,000 --> 00:05:07,759
and you know anytime i can find a great

130
00:05:07,759 --> 00:05:09,840
library that basically you know solves

131
00:05:09,840 --> 00:05:11,600
exactly what i'm trying to do so you can

132
00:05:11,600 --> 00:05:12,960
basically just you know script it up in

133
00:05:12,960 --> 00:05:16,240
four lines it's super right so

134
00:05:16,240 --> 00:05:17,759
again you know don't reinvent the wheel

135
00:05:17,759 --> 00:05:20,479
if you don't have to

136
00:05:20,479 --> 00:05:22,560
all right so to talk about the exploit

137
00:05:22,560 --> 00:05:25,039
chain a little bit um basically the way

138
00:05:25,039 --> 00:05:27,919
it works is you have an incoming request

139
00:05:27,919 --> 00:05:29,919
you know to a victim web server right so

140
00:05:29,919 --> 00:05:31,440
something that's running you know

141
00:05:31,440 --> 00:05:33,120
directly on the internet

142
00:05:33,120 --> 00:05:35,280
basically in that request you have this

143
00:05:35,280 --> 00:05:38,400
jndi exploit string

144
00:05:38,400 --> 00:05:40,400
and you know kind of cascading down from

145
00:05:40,400 --> 00:05:41,919
there there's going to be some

146
00:05:41,919 --> 00:05:43,840
instructions

147
00:05:43,840 --> 00:05:46,479
for basically a stage two of the payload

148
00:05:46,479 --> 00:05:49,919
right so jndi stands for java naming

149
00:05:49,919 --> 00:05:52,400
directory interface basically it's a way

150
00:05:52,400 --> 00:05:55,039
uh you know to provide apis

151
00:05:55,039 --> 00:05:57,600
uh you know to whatever's running uh you

152
00:05:57,600 --> 00:05:59,360
know within java here right so in

153
00:05:59,360 --> 00:06:00,479
particular

154
00:06:00,479 --> 00:06:03,520
4j uh there are some instances where it

155
00:06:03,520 --> 00:06:06,319
could pull a payload via dns but i think

156
00:06:06,319 --> 00:06:07,840
notoriously

157
00:06:07,840 --> 00:06:09,840
it has used ldap so

158
00:06:09,840 --> 00:06:13,280
tcp port 389 but effectively

159
00:06:13,280 --> 00:06:15,600
as the malicious request is sent you

160
00:06:15,600 --> 00:06:18,080
have this jndi string

161
00:06:18,080 --> 00:06:20,400
you know calling now basically making an

162
00:06:20,400 --> 00:06:21,759
ldap query

163
00:06:21,759 --> 00:06:24,160
uh you know calling for you know what's

164
00:06:24,160 --> 00:06:26,319
basically a malicious payload uh you

165
00:06:26,319 --> 00:06:29,440
know from a remote host

166
00:06:30,960 --> 00:06:34,720
so log4j it sees this jndi string

167
00:06:34,720 --> 00:06:37,759
pulls that out or makes that ldap query

168
00:06:37,759 --> 00:06:39,440
and basically pulls the payload in the

169
00:06:39,440 --> 00:06:41,360
request you know the server that's

170
00:06:41,360 --> 00:06:43,759
hosting that payload would respond with

171
00:06:43,759 --> 00:06:46,080
the information uh you know containing

172
00:06:46,080 --> 00:06:48,800
obliges java class so in particular this

173
00:06:48,800 --> 00:06:50,240
payload

174
00:06:50,240 --> 00:06:51,520
you know kind of file right here that

175
00:06:51,520 --> 00:06:53,919
would be hosted on the malicious host

176
00:06:53,919 --> 00:06:55,440
and then basically you know the victim

177
00:06:55,440 --> 00:06:56,800
web server

178
00:06:56,800 --> 00:06:58,240
would download that you know malicious

179
00:06:58,240 --> 00:07:01,680
java class and execute it

180
00:07:01,680 --> 00:07:03,599
right so to kind of rehash it

181
00:07:03,599 --> 00:07:05,759
multi-stage exploit you basically have

182
00:07:05,759 --> 00:07:07,759
you know the inbound request to you know

183
00:07:07,759 --> 00:07:09,840
the vulnerable web server with that jndi

184
00:07:09,840 --> 00:07:12,160
string in that request it's calling for

185
00:07:12,160 --> 00:07:14,160
a stage two payload sometimes that

186
00:07:14,160 --> 00:07:15,759
payload is hosted on the same server

187
00:07:15,759 --> 00:07:17,919
that's invoking the original request but

188
00:07:17,919 --> 00:07:19,440
not always

189
00:07:19,440 --> 00:07:21,599
but you know generally if you could see

190
00:07:21,599 --> 00:07:24,720
uh you know the jndi string calling back

191
00:07:24,720 --> 00:07:27,680
to the same originating ip

192
00:07:27,680 --> 00:07:30,319
just maybe at a different uri

193
00:07:30,319 --> 00:07:32,000
and then basically once that payload is

194
00:07:32,000 --> 00:07:33,840
pulled you know in that stage two it's

195
00:07:33,840 --> 00:07:35,759
basically executed on the victim hosts

196
00:07:35,759 --> 00:07:37,039
which would give

197
00:07:37,039 --> 00:07:38,240
the threat actor something like a

198
00:07:38,240 --> 00:07:40,560
reverse shell or you know that kind of

199
00:07:40,560 --> 00:07:43,199
you know post exploitation

200
00:07:43,199 --> 00:07:46,479
so uh i did not go uh the extra mile to

201
00:07:46,479 --> 00:07:48,560
basically make my own graphic here

202
00:07:48,560 --> 00:07:50,960
i will say though i came across this one

203
00:07:50,960 --> 00:07:54,240
that's made basically by the swiss cert

204
00:07:54,240 --> 00:07:56,240
i think it really illustrates you know

205
00:07:56,240 --> 00:07:58,720
the kind of attack life cycle of vlog 4j

206
00:07:58,720 --> 00:07:59,919
pretty well

207
00:07:59,919 --> 00:08:02,319
um you know and basically some ways you

208
00:08:02,319 --> 00:08:03,120
can

209
00:08:03,120 --> 00:08:05,680
uh you know i guess you know block it or

210
00:08:05,680 --> 00:08:07,680
you know prevent it per se

211
00:08:07,680 --> 00:08:10,319
so in particular um i'd like to you know

212
00:08:10,319 --> 00:08:12,400
basically start with number one you know

213
00:08:12,400 --> 00:08:14,000
you can always you know have something

214
00:08:14,000 --> 00:08:15,599
like a web application firewall in front

215
00:08:15,599 --> 00:08:17,520
of the application uh which will you

216
00:08:17,520 --> 00:08:19,520
know basically look for uh you know

217
00:08:19,520 --> 00:08:21,919
strings uh in those requests that are

218
00:08:21,919 --> 00:08:24,000
coming in uh and you know if it has for

219
00:08:24,000 --> 00:08:26,160
example like that jndi string with you

220
00:08:26,160 --> 00:08:27,360
know

221
00:08:27,360 --> 00:08:28,240
a

222
00:08:28,240 --> 00:08:31,039
server and then you know basically the

223
00:08:31,039 --> 00:08:33,200
path to the exploit you can basically

224
00:08:33,200 --> 00:08:34,320
block that

225
00:08:34,320 --> 00:08:35,599
there's some other things you could do

226
00:08:35,599 --> 00:08:36,719
as well

227
00:08:36,719 --> 00:08:38,719
obviously you know i think in a lot of

228
00:08:38,719 --> 00:08:40,479
commercial software products it's pretty

229
00:08:40,479 --> 00:08:42,399
much you know impossible to say well i

230
00:08:42,399 --> 00:08:45,440
just need to like turn off log 4j so for

231
00:08:45,440 --> 00:08:46,720
example like let's say if you're running

232
00:08:46,720 --> 00:08:49,040
a vmware horizon server

233
00:08:49,040 --> 00:08:51,360
i don't really think it's feasible to

234
00:08:51,360 --> 00:08:53,920
you know basically go ahead and you know

235
00:08:53,920 --> 00:08:55,440
do some of these other things that are

236
00:08:55,440 --> 00:08:56,800
suggested here

237
00:08:56,800 --> 00:08:58,800
but nonetheless you know these are some

238
00:08:58,800 --> 00:09:00,560
you know steps you could take uh you

239
00:09:00,560 --> 00:09:01,920
know if you were like a software

240
00:09:01,920 --> 00:09:03,760
developer for say you know kind of

241
00:09:03,760 --> 00:09:05,200
rolling your own code or something like

242
00:09:05,200 --> 00:09:06,959
that

243
00:09:06,959 --> 00:09:08,160
but you know just some other quick

244
00:09:08,160 --> 00:09:10,160
things you know you could disable log4j

245
00:09:10,160 --> 00:09:12,240
all together use a different library

246
00:09:12,240 --> 00:09:13,680
patch it which is you know probably i

247
00:09:13,680 --> 00:09:15,839
would say the most logical thing to do

248
00:09:15,839 --> 00:09:18,320
disable jndi lookups again you know if

249
00:09:18,320 --> 00:09:20,240
you're not the author of the program

250
00:09:20,240 --> 00:09:22,720
it's not exactly feasible disabled

251
00:09:22,720 --> 00:09:24,880
remote code bases again if you're not

252
00:09:24,880 --> 00:09:26,720
the author of the program not exactly

253
00:09:26,720 --> 00:09:29,200
feasible

254
00:09:29,680 --> 00:09:31,839
all right so to kind of step back a

255
00:09:31,839 --> 00:09:33,360
little bit

256
00:09:33,360 --> 00:09:34,240
who is

257
00:09:34,240 --> 00:09:36,240
familiar with vmware horizon has anybody

258
00:09:36,240 --> 00:09:37,760
used it before

259
00:09:37,760 --> 00:09:39,839
i'd like to see that

260
00:09:39,839 --> 00:09:42,320
yeah so basically it's uh you know vdi

261
00:09:42,320 --> 00:09:44,880
infrastructure or you know like remote

262
00:09:44,880 --> 00:09:46,720
application infrastructure for you know

263
00:09:46,720 --> 00:09:48,880
let's say like remote workers so in you

264
00:09:48,880 --> 00:09:50,880
know the you know current time of you

265
00:09:50,880 --> 00:09:53,519
know pandemic and things like that um

266
00:09:53,519 --> 00:09:55,120
you know obviously i t departments have

267
00:09:55,120 --> 00:09:57,200
to make applications available to remote

268
00:09:57,200 --> 00:09:58,720
users

269
00:09:58,720 --> 00:10:00,160
you can do a lot of things right you can

270
00:10:00,160 --> 00:10:02,640
have a vpn you can you know give users

271
00:10:02,640 --> 00:10:04,240
rdp

272
00:10:04,240 --> 00:10:06,480
desktops things like that

273
00:10:06,480 --> 00:10:07,839
or you could set up something like a

274
00:10:07,839 --> 00:10:10,160
vmware horizon server or citrix or

275
00:10:10,160 --> 00:10:12,160
something like that right so you know

276
00:10:12,160 --> 00:10:13,519
instead of

277
00:10:13,519 --> 00:10:15,200
you know giving somebody maybe a full

278
00:10:15,200 --> 00:10:17,360
desktop you can just push you know an

279
00:10:17,360 --> 00:10:19,760
application to them uh specifically

280
00:10:19,760 --> 00:10:22,000
right so let's say for example uh you

281
00:10:22,000 --> 00:10:24,160
know i just wanted to you know give a

282
00:10:24,160 --> 00:10:27,279
user access to like calc.exe you can

283
00:10:27,279 --> 00:10:28,720
basically do that with vmware horizon

284
00:10:28,720 --> 00:10:30,240
and basically just you know launch a

285
00:10:30,240 --> 00:10:32,640
little window once they connect and you

286
00:10:32,640 --> 00:10:34,880
know give them access to that small

287
00:10:34,880 --> 00:10:36,320
application i don't really know why that

288
00:10:36,320 --> 00:10:38,160
would be super useful

289
00:10:38,160 --> 00:10:40,000
but you can

290
00:10:40,000 --> 00:10:42,480
but effectively under the hood vmware

291
00:10:42,480 --> 00:10:45,839
horizon runs in apache tomcat web server

292
00:10:45,839 --> 00:10:47,839
and basically that process that is

293
00:10:47,839 --> 00:10:48,720
running

294
00:10:48,720 --> 00:10:51,240
the tomcat web server is this ws

295
00:10:51,240 --> 00:10:53,440
tomcatservice.exe right and i think this

296
00:10:53,440 --> 00:10:55,600
is kind of critical because as you see

297
00:10:55,600 --> 00:10:57,680
in kind of some of the next

298
00:10:57,680 --> 00:10:59,040
slides here

299
00:10:59,040 --> 00:11:01,200
this is basically the

300
00:11:01,200 --> 00:11:03,680
you know web server process that will

301
00:11:03,680 --> 00:11:06,240
you know when exploited spawn

302
00:11:06,240 --> 00:11:09,519
other malicious processes

303
00:11:11,680 --> 00:11:14,560
all right so for scenario number one

304
00:11:14,560 --> 00:11:18,720
so around december 23rd of last year

305
00:11:18,720 --> 00:11:20,720
we observed some string insertion on

306
00:11:20,720 --> 00:11:22,040
this

307
00:11:22,040 --> 00:11:24,320
absgworker.js file

308
00:11:24,320 --> 00:11:26,399
you can basically see the path there but

309
00:11:26,399 --> 00:11:29,360
basically uh what this file is is is it

310
00:11:29,360 --> 00:11:31,839
is the vmware blast secure gateway

311
00:11:31,839 --> 00:11:34,000
service right so effectively it's a

312
00:11:34,000 --> 00:11:37,279
pretty you know lightweight node.js app

313
00:11:37,279 --> 00:11:39,839
uh that you know relies on this file to

314
00:11:39,839 --> 00:11:41,279
function

315
00:11:41,279 --> 00:11:43,279
so you know it's you know effectively

316
00:11:43,279 --> 00:11:44,959
running you know i guess the web

317
00:11:44,959 --> 00:11:47,680
component of vmware horizon

318
00:11:47,680 --> 00:11:50,240
right so basically what we saw is uh you

319
00:11:50,240 --> 00:11:51,200
have that

320
00:11:51,200 --> 00:11:52,160
uh

321
00:11:52,160 --> 00:11:53,279
you know that

322
00:11:53,279 --> 00:11:54,279
ws

323
00:11:54,279 --> 00:11:56,880
tomcatservice.exe process spawning a

324
00:11:56,880 --> 00:11:58,959
bullish's powershell process and in the

325
00:11:58,959 --> 00:12:01,279
you know malicious powerful process what

326
00:12:01,279 --> 00:12:03,519
you can actually see is some sort of uh

327
00:12:03,519 --> 00:12:05,760
you know string insertion uh you know

328
00:12:05,760 --> 00:12:06,880
basically

329
00:12:06,880 --> 00:12:08,279
so this

330
00:12:08,279 --> 00:12:10,720
absgworker.js file gets uploaded or

331
00:12:10,720 --> 00:12:12,079
updated sorry

332
00:12:12,079 --> 00:12:13,839
so if you actually look at you know the

333
00:12:13,839 --> 00:12:16,160
upper uh right box here you can

334
00:12:16,160 --> 00:12:18,800
basically see uh it's kind of a baby web

335
00:12:18,800 --> 00:12:20,720
shell if you will basically saying you

336
00:12:20,720 --> 00:12:23,360
know if the request includes you know

337
00:12:23,360 --> 00:12:26,160
this long string right here uh enter a

338
00:12:26,160 --> 00:12:30,800
try uh you know reply with an http 200

339
00:12:30,800 --> 00:12:33,200
and then basically spawn a child process

340
00:12:33,200 --> 00:12:35,200
of you know some other data that is also

341
00:12:35,200 --> 00:12:36,480
in the request

342
00:12:36,480 --> 00:12:39,360
and otherwise uh return to 400 you know

343
00:12:39,360 --> 00:12:43,120
basically stating that it didn't work

344
00:12:43,600 --> 00:12:45,519
right so if you actually look at uh you

345
00:12:45,519 --> 00:12:47,040
know the difference between the two

346
00:12:47,040 --> 00:12:48,160
files

347
00:12:48,160 --> 00:12:49,600
on the left you have basically the

348
00:12:49,600 --> 00:12:50,959
updated file

349
00:12:50,959 --> 00:12:52,800
you know versus on the right is kind of

350
00:12:52,800 --> 00:12:55,040
the uh you know more vanilla version

351
00:12:55,040 --> 00:12:56,880
that vmware would ship

352
00:12:56,880 --> 00:12:58,240
so what's actually kind of interesting

353
00:12:58,240 --> 00:13:00,160
is in a lot of the cases that we

354
00:13:00,160 --> 00:13:03,360
investigated you would actually see

355
00:13:03,360 --> 00:13:05,120
you know multiple i guess string

356
00:13:05,120 --> 00:13:07,680
insertions of the same uh you know

357
00:13:07,680 --> 00:13:09,600
several lines of code so i think i

358
00:13:09,600 --> 00:13:11,360
actually had like one system in

359
00:13:11,360 --> 00:13:13,200
particular that we looked at where it

360
00:13:13,200 --> 00:13:14,800
was inserted like eight different times

361
00:13:14,800 --> 00:13:16,639
so you could kind of hypothesize that

362
00:13:16,639 --> 00:13:18,399
the exploit was actually run

363
00:13:18,399 --> 00:13:20,800
eight unique times against the host

364
00:13:20,800 --> 00:13:22,720
but basically uh you know you can kind

365
00:13:22,720 --> 00:13:24,880
of see side by side a comparison of the

366
00:13:24,880 --> 00:13:27,120
two

367
00:13:28,880 --> 00:13:31,200
so to just kind of talk through uh you

368
00:13:31,200 --> 00:13:33,040
know some forensic artifacts on this one

369
00:13:33,040 --> 00:13:34,560
in particular

370
00:13:34,560 --> 00:13:36,240
i you know generally like to start in

371
00:13:36,240 --> 00:13:38,880
windows event logs anytime i'm looking

372
00:13:38,880 --> 00:13:40,560
uh you know at a disk image or something

373
00:13:40,560 --> 00:13:42,639
like that um you know in particular for

374
00:13:42,639 --> 00:13:45,120
this one uh you know windows powershell

375
00:13:45,120 --> 00:13:48,800
logs event d 400 or 600 i mean generally

376
00:13:48,800 --> 00:13:50,480
always helpful

377
00:13:50,480 --> 00:13:52,720
another good one you know specifically i

378
00:13:52,720 --> 00:13:55,600
think for this incident in particular

379
00:13:55,600 --> 00:13:57,360
if you look at the system event logs

380
00:13:57,360 --> 00:14:00,240
specifically a 7036 event which is a

381
00:14:00,240 --> 00:14:02,480
service starting or stopping you can

382
00:14:02,480 --> 00:14:03,760
basically see

383
00:14:03,760 --> 00:14:05,519
kind of in the you know trailing end

384
00:14:05,519 --> 00:14:07,680
here uh you know you have the service

385
00:14:07,680 --> 00:14:09,600
that will be restarted right so you know

386
00:14:09,600 --> 00:14:12,320
if you think about as you update uh you

387
00:14:12,320 --> 00:14:15,440
know this apsg worker.js file you'll

388
00:14:15,440 --> 00:14:17,040
basically have to re-initialize it and

389
00:14:17,040 --> 00:14:19,279
load it in to the program for the web

390
00:14:19,279 --> 00:14:21,519
shell to work so you know basically by

391
00:14:21,519 --> 00:14:24,000
restarting that service um you know the

392
00:14:24,000 --> 00:14:26,000
threat actor is able to do that

393
00:14:26,000 --> 00:14:27,440
so you know basically you could look for

394
00:14:27,440 --> 00:14:29,040
a you know the service starting or

395
00:14:29,040 --> 00:14:31,279
stopping um obviously some other stuff

396
00:14:31,279 --> 00:14:33,360
you could look for a process creation if

397
00:14:33,360 --> 00:14:35,839
you have uh you know that level auditing

398
00:14:35,839 --> 00:14:37,120
turned on and then you could also look

399
00:14:37,120 --> 00:14:39,040
at something like powershell transcripts

400
00:14:39,040 --> 00:14:40,800
uh which would basically show

401
00:14:40,800 --> 00:14:42,959
uh you know the i guess underlying

402
00:14:42,959 --> 00:14:46,399
powershell command that's being run

403
00:14:46,560 --> 00:14:49,199
so kind of an interesting one as well um

404
00:14:49,199 --> 00:14:51,279
in our you know disk analysis you know

405
00:14:51,279 --> 00:14:53,680
we basically would take something like

406
00:14:53,680 --> 00:14:55,839
you know forensic image of the system uh

407
00:14:55,839 --> 00:14:57,839
and you could drop it into whatever you

408
00:14:57,839 --> 00:14:59,440
know kind of forensic suite you like to

409
00:14:59,440 --> 00:15:00,320
use

410
00:15:00,320 --> 00:15:02,480
um but you can obviously see the you

411
00:15:02,480 --> 00:15:03,279
know

412
00:15:03,279 --> 00:15:04,480
this uh

413
00:15:04,480 --> 00:15:07,120
js file being modified uh and

414
00:15:07,120 --> 00:15:10,000
interestingly enough uh you know i see

415
00:15:10,000 --> 00:15:11,680
that the files modified as i'm kind of

416
00:15:11,680 --> 00:15:14,079
timelining things and you say okay and

417
00:15:14,079 --> 00:15:15,600
you go you know look for the hash on

418
00:15:15,600 --> 00:15:17,839
virustotal and it comes back completely

419
00:15:17,839 --> 00:15:19,519
clean

420
00:15:19,519 --> 00:15:21,440
so you know i think it's interesting to

421
00:15:21,440 --> 00:15:23,199
note you know people kind of trust

422
00:15:23,199 --> 00:15:25,279
virustotal as being this you know

423
00:15:25,279 --> 00:15:26,720
you know perfect way to you know

424
00:15:26,720 --> 00:15:28,639
determine if something's malware but

425
00:15:28,639 --> 00:15:30,639
it's really only as good as uh you know

426
00:15:30,639 --> 00:15:32,639
the vendor signatures are

427
00:15:32,639 --> 00:15:34,720
but you can actually see uh later in

428
00:15:34,720 --> 00:15:38,639
february i did have 23 detections so

429
00:15:38,639 --> 00:15:40,399
you know just kind of naturally with

430
00:15:40,399 --> 00:15:41,279
time

431
00:15:41,279 --> 00:15:43,600
things will become updated and it does

432
00:15:43,600 --> 00:15:46,639
gain some detections

433
00:15:46,959 --> 00:15:50,320
all right so for scenario number two uh

434
00:15:50,320 --> 00:15:52,720
basically this one in particular was a

435
00:15:52,720 --> 00:15:55,120
cobalt strike beacon so

436
00:15:55,120 --> 00:15:57,040
uh as you can see here you basically

437
00:15:57,040 --> 00:15:59,040
have powershell.exe

438
00:15:59,040 --> 00:16:01,440
running some encoded power shell

439
00:16:01,440 --> 00:16:03,600
so basically you know we dive in and try

440
00:16:03,600 --> 00:16:06,320
to figure out how to decode it

441
00:16:06,320 --> 00:16:08,639
so enter cyber chef there's actually a

442
00:16:08,639 --> 00:16:11,360
pretty good talk about cyber chef

443
00:16:11,360 --> 00:16:13,199
yesterday i believe um

444
00:16:13,199 --> 00:16:14,079
so

445
00:16:14,079 --> 00:16:16,000
you know definitely an awesome tool uh

446
00:16:16,000 --> 00:16:17,759
but for those that aren't familiar with

447
00:16:17,759 --> 00:16:20,000
it uh it's basically a way you can

448
00:16:20,000 --> 00:16:22,639
encode or you know decode any sort of

449
00:16:22,639 --> 00:16:24,880
input you put into the tool uh so

450
00:16:24,880 --> 00:16:26,480
basically let's say if you had you know

451
00:16:26,480 --> 00:16:28,720
strings files things like that

452
00:16:28,720 --> 00:16:31,519
uh you know you can do a variety of

453
00:16:31,519 --> 00:16:33,440
operations on you know whatever that

454
00:16:33,440 --> 00:16:35,759
data stream is and then basically get

455
00:16:35,759 --> 00:16:37,600
something out on the other end so in

456
00:16:37,600 --> 00:16:39,199
particular you know we're just going to

457
00:16:39,199 --> 00:16:41,600
go and kind of take this base64 encoded

458
00:16:41,600 --> 00:16:42,720
blob

459
00:16:42,720 --> 00:16:44,720
and drop it into

460
00:16:44,720 --> 00:16:47,360
cyber chef right so we basically load

461
00:16:47,360 --> 00:16:49,600
the base64 recipe

462
00:16:49,600 --> 00:16:51,440
and then we decode it and we basically

463
00:16:51,440 --> 00:16:53,199
get you know what is some human readable

464
00:16:53,199 --> 00:16:55,440
text right so we can basically see what

465
00:16:55,440 --> 00:16:57,199
it's doing here it's running in vogue

466
00:16:57,199 --> 00:16:59,120
expression and it's pulling a payload

467
00:16:59,120 --> 00:17:02,000
from this you know 185 ip right here of

468
00:17:02,000 --> 00:17:05,039
course it's a 185 ip it just seems like

469
00:17:05,039 --> 00:17:06,880
any time i run into one in

470
00:17:06,880 --> 00:17:08,400
you know forensic analysis it's

471
00:17:08,400 --> 00:17:10,880
generally always bad but in particular

472
00:17:10,880 --> 00:17:12,720
uh you know it's you know basically

473
00:17:12,720 --> 00:17:15,039
pulling a payload from uh you know this

474
00:17:15,039 --> 00:17:18,559
ip on port 88d and looking for this drv

475
00:17:18,559 --> 00:17:20,400
file

476
00:17:20,400 --> 00:17:22,079
right so let's say for example if we

477
00:17:22,079 --> 00:17:24,880
actually go and fetch that drv file

478
00:17:24,880 --> 00:17:26,480
you can see you know kind of the hash

479
00:17:26,480 --> 00:17:27,599
here

480
00:17:27,599 --> 00:17:29,679
but in particular

481
00:17:29,679 --> 00:17:32,000
the file you know has seemingly a lot of

482
00:17:32,000 --> 00:17:33,840
comments in it which is kind of weird i

483
00:17:33,840 --> 00:17:35,679
guess for powershell doesn't really do

484
00:17:35,679 --> 00:17:37,840
anything it just adds bloat to it

485
00:17:37,840 --> 00:17:40,240
um but we're basically interested in you

486
00:17:40,240 --> 00:17:42,480
know decoding any uh you know other

487
00:17:42,480 --> 00:17:46,000
parts of the file as well so in

488
00:17:46,000 --> 00:17:48,799
particular here you can see there's

489
00:17:48,799 --> 00:17:51,520
another snippet which basically states

490
00:17:51,520 --> 00:17:54,320
that there's a base64 encoded string

491
00:17:54,320 --> 00:17:56,720
so we're going to basically take that

492
00:17:56,720 --> 00:17:58,880
you know part of the snippet and then

493
00:17:58,880 --> 00:18:00,400
we're going to kind of work on decoding

494
00:18:00,400 --> 00:18:03,039
that some more

495
00:18:04,080 --> 00:18:06,480
all right so we copy paste it

496
00:18:06,480 --> 00:18:08,960
pop it back into cyber chef

497
00:18:08,960 --> 00:18:10,400
you know decode it

498
00:18:10,400 --> 00:18:12,960
from base64 but it just kind of appears

499
00:18:12,960 --> 00:18:14,720
to be a bunch of you know mumbo jumbo

500
00:18:14,720 --> 00:18:16,320
text doesn't really mean anything to the

501
00:18:16,320 --> 00:18:17,760
human eye right

502
00:18:17,760 --> 00:18:20,960
um but i think uh you know specifically

503
00:18:20,960 --> 00:18:22,640
as it pertains to cobalt strike you kind

504
00:18:22,640 --> 00:18:24,480
of have to be a little bit familiar with

505
00:18:24,480 --> 00:18:25,440
how to

506
00:18:25,440 --> 00:18:27,280
uh you know decode payloads and things

507
00:18:27,280 --> 00:18:30,240
like that but a really common uh you

508
00:18:30,240 --> 00:18:32,960
know obfuscation technique that it uses

509
00:18:32,960 --> 00:18:34,320
is basically

510
00:18:34,320 --> 00:18:36,720
you know xoring the payload uh with

511
00:18:36,720 --> 00:18:40,559
decimal key 35. so if you actually take

512
00:18:40,559 --> 00:18:41,600
the xor

513
00:18:41,600 --> 00:18:43,280
operation within

514
00:18:43,280 --> 00:18:44,720
cyber chef you can actually you know

515
00:18:44,720 --> 00:18:48,080
just put in key 35 uh select decimal and

516
00:18:48,080 --> 00:18:49,440
you're actually starting to get some you

517
00:18:49,440 --> 00:18:52,400
know more human readable text

518
00:18:52,400 --> 00:18:53,600
so

519
00:18:53,600 --> 00:18:55,280
uh you know stepping back for a moment

520
00:18:55,280 --> 00:18:56,720
if you wanted to just search you know

521
00:18:56,720 --> 00:18:58,480
that resulting payload you could

522
00:18:58,480 --> 00:19:00,480
actually add another operation to cyber

523
00:19:00,480 --> 00:19:04,000
chef basically get your md5 go search

524
00:19:04,000 --> 00:19:06,559
the md5 and virus total and sure enough

525
00:19:06,559 --> 00:19:08,160
you have you know something that looks

526
00:19:08,160 --> 00:19:10,640
like shell code possibly cobalt strike

527
00:19:10,640 --> 00:19:12,720
with you know numerous detections all

528
00:19:12,720 --> 00:19:14,000
good

529
00:19:14,000 --> 00:19:16,400
um otherwise what you could do is kind

530
00:19:16,400 --> 00:19:18,880
of erase that md5 operation

531
00:19:18,880 --> 00:19:20,480
and then you could go ahead and just

532
00:19:20,480 --> 00:19:22,559
save the file you know by you know the

533
00:19:22,559 --> 00:19:24,799
save function in cyber chef

534
00:19:24,799 --> 00:19:26,000
and basically we could save it to

535
00:19:26,000 --> 00:19:28,559
something like beacon.dat

536
00:19:28,559 --> 00:19:30,880
right so then you know we have that uh i

537
00:19:30,880 --> 00:19:32,480
guess you know shell code payload

538
00:19:32,480 --> 00:19:35,039
downloaded um you could drop it into you

539
00:19:35,039 --> 00:19:36,559
know numerous kind of shellcode

540
00:19:36,559 --> 00:19:39,280
debugging tools but in particular this

541
00:19:39,280 --> 00:19:41,120
one you know we can see

542
00:19:41,120 --> 00:19:42,640
uh that it will basically you know kind

543
00:19:42,640 --> 00:19:45,200
of pull out that you know c2ip

544
00:19:45,200 --> 00:19:47,200
uh you know from the payload itself

545
00:19:47,200 --> 00:19:49,600
basically uh for those that remember

546
00:19:49,600 --> 00:19:51,919
it's the same ip that delivered the

547
00:19:51,919 --> 00:19:54,880
payload initially

548
00:19:54,960 --> 00:19:56,559
so you can do a number of things with it

549
00:19:56,559 --> 00:19:58,080
obviously you know you can use some sort

550
00:19:58,080 --> 00:19:59,039
of

551
00:19:59,039 --> 00:20:01,360
you know command line tool on your own

552
00:20:01,360 --> 00:20:02,960
system you can submit it probably to a

553
00:20:02,960 --> 00:20:04,480
sandbox and it will tell you exactly

554
00:20:04,480 --> 00:20:06,320
what it does advantage you know we have

555
00:20:06,320 --> 00:20:08,240
sandboxes for everything

556
00:20:08,240 --> 00:20:10,159
so you know basically tell you

557
00:20:10,159 --> 00:20:12,320
uh you know it's a cobalt strike http

558
00:20:12,320 --> 00:20:14,480
stager i'll give you the user agent the

559
00:20:14,480 --> 00:20:17,360
ip all that

560
00:20:17,520 --> 00:20:19,200
but if you actually look at you know

561
00:20:19,200 --> 00:20:22,000
just kind of the uh you know raw decoded

562
00:20:22,000 --> 00:20:23,360
part verbatim

563
00:20:23,360 --> 00:20:24,880
it's kind of interesting is obviously

564
00:20:24,880 --> 00:20:27,200
you have number one the user agent

565
00:20:27,200 --> 00:20:28,559
with number two you also have what's

566
00:20:28,559 --> 00:20:30,480
known as an icar string for those that

567
00:20:30,480 --> 00:20:32,640
aren't familiar icar is a way you can

568
00:20:32,640 --> 00:20:35,120
test if your antivirus is working right

569
00:20:35,120 --> 00:20:36,880
so if you just you know go

570
00:20:36,880 --> 00:20:39,120
on the internet and google i car string

571
00:20:39,120 --> 00:20:41,039
copy paste it and put it in like a text

572
00:20:41,039 --> 00:20:43,840
file on your desktop or whatever and

573
00:20:43,840 --> 00:20:46,320
save it it will set off your ap right so

574
00:20:46,320 --> 00:20:47,520
it's basically just a very you know

575
00:20:47,520 --> 00:20:50,960
common uh you know easy way to test it

576
00:20:50,960 --> 00:20:52,559
and make sure things are working and

577
00:20:52,559 --> 00:20:55,360
then finally you have also your uh c2

578
00:20:55,360 --> 00:20:56,159
here

579
00:20:56,159 --> 00:20:57,840
but basically what's kind of interesting

580
00:20:57,840 --> 00:21:00,559
about this sample in particular uh the

581
00:21:00,559 --> 00:21:02,960
icar string is packaged into trial

582
00:21:02,960 --> 00:21:05,039
versions of cobalt strike so the threat

583
00:21:05,039 --> 00:21:06,320
actor that actually went out and

584
00:21:06,320 --> 00:21:08,240
deployed this if they use a trial

585
00:21:08,240 --> 00:21:09,760
version of cobalt strike and they

586
00:21:09,760 --> 00:21:11,120
probably didn't know that this was the

587
00:21:11,120 --> 00:21:13,039
case so it's actually kind of silly in

588
00:21:13,039 --> 00:21:15,600
some regards um it just goes to show you

589
00:21:15,600 --> 00:21:17,600
kind of like your varying

590
00:21:17,600 --> 00:21:19,360
levels of sophistication with threat

591
00:21:19,360 --> 00:21:21,678
actors

592
00:21:22,000 --> 00:21:24,080
all right so to look at some uh you know

593
00:21:24,080 --> 00:21:25,840
additional artifacts kind of you know

594
00:21:25,840 --> 00:21:29,360
aside from decoding uh you know that

595
00:21:29,360 --> 00:21:31,520
payload that's pulled by a power shell

596
00:21:31,520 --> 00:21:34,159
you know obviously we found the original

597
00:21:34,159 --> 00:21:36,640
uh you know evidence of exploitation you

598
00:21:36,640 --> 00:21:38,320
know kind of in those uh you know

599
00:21:38,320 --> 00:21:41,600
powershell event ids 400 600

600
00:21:41,600 --> 00:21:44,240
but in particular we also had at least

601
00:21:44,240 --> 00:21:47,039
one customer that had uh sysmon enabled

602
00:21:47,039 --> 00:21:50,159
on you know the actual victim machine so

603
00:21:50,159 --> 00:21:52,880
specifically if we look at event id3 you

604
00:21:52,880 --> 00:21:54,240
can see

605
00:21:54,240 --> 00:21:57,039
you know as the first event you have

606
00:21:57,039 --> 00:21:59,679
network connection to the 185 ip on port

607
00:21:59,679 --> 00:22:02,000
8080 which makes sense because this is

608
00:22:02,000 --> 00:22:04,480
basically the you know first part uh you

609
00:22:04,480 --> 00:22:06,159
know where the payload is being pulled

610
00:22:06,159 --> 00:22:08,320
you know that drv file hosted on port

611
00:22:08,320 --> 00:22:10,320
8080 and then

612
00:22:10,320 --> 00:22:12,480
if as you know time goes on basically

613
00:22:12,480 --> 00:22:15,120
like a one or two seconds later uh you

614
00:22:15,120 --> 00:22:16,640
have you know another check into that

615
00:22:16,640 --> 00:22:21,039
185 ip uh but on port 80 so basically uh

616
00:22:21,039 --> 00:22:22,400
you know this is the payload being

617
00:22:22,400 --> 00:22:24,159
pulled and then the

618
00:22:24,159 --> 00:22:25,760
secondary check check-in would be the

619
00:22:25,760 --> 00:22:28,640
actual c2 communication

620
00:22:28,640 --> 00:22:31,120
oops sorry

621
00:22:32,640 --> 00:22:35,440
all right so for scenario number three

622
00:22:35,440 --> 00:22:36,799
um so this one in particular was a

623
00:22:36,799 --> 00:22:39,440
cryptocurrency minor um

624
00:22:39,440 --> 00:22:41,280
you know i would say pretty clear as day

625
00:22:41,280 --> 00:22:43,520
basically what you can do is uh you have

626
00:22:43,520 --> 00:22:46,240
you know uh powershell you know invoke

627
00:22:46,240 --> 00:22:48,480
expression basically pulling this you

628
00:22:48,480 --> 00:22:52,159
know ps1 file um from this you know adip

629
00:22:52,159 --> 00:22:53,280
here

630
00:22:53,280 --> 00:22:55,600
so you know powershell file

631
00:22:55,600 --> 00:22:57,200
it's you know pretty easy to you know

632
00:22:57,200 --> 00:22:58,640
read with your eyes

633
00:22:58,640 --> 00:22:59,919
you don't have to like decode it or

634
00:22:59,919 --> 00:23:02,640
anything per se

635
00:23:06,720 --> 00:23:09,520
so in particular this one um you can see

636
00:23:09,520 --> 00:23:11,520
a few variables are set at the beginning

637
00:23:11,520 --> 00:23:13,679
you know specifically we have

638
00:23:13,679 --> 00:23:16,240
uh you know that same adip

639
00:23:16,240 --> 00:23:19,039
as mentioned in the initial poll

640
00:23:19,039 --> 00:23:21,600
you know set as the variable cc like you

641
00:23:21,600 --> 00:23:23,039
know command and control or something

642
00:23:23,039 --> 00:23:24,080
like that

643
00:23:24,080 --> 00:23:26,480
um they have a couple other uh you know

644
00:23:26,480 --> 00:23:28,320
variables being set looks like you know

645
00:23:28,320 --> 00:23:30,480
some things uh you know for some other

646
00:23:30,480 --> 00:23:31,919
file paths

647
00:23:31,919 --> 00:23:33,919
um it looks like you know turning off

648
00:23:33,919 --> 00:23:36,799
the firewall things like that

649
00:23:36,799 --> 00:23:38,480
but effectively

650
00:23:38,480 --> 00:23:40,000
you know what it's going to do is

651
00:23:40,000 --> 00:23:40,960
basically

652
00:23:40,960 --> 00:23:42,880
enumerate running processes on the

653
00:23:42,880 --> 00:23:44,080
machine

654
00:23:44,080 --> 00:23:46,400
and if it identifies processes that kind

655
00:23:46,400 --> 00:23:49,120
of match a specific name

656
00:23:49,120 --> 00:23:51,039
it will basically stop those processes

657
00:23:51,039 --> 00:23:52,400
and a reason why you might want to do

658
00:23:52,400 --> 00:23:53,120
that

659
00:23:53,120 --> 00:23:54,880
for example if you wanted to run a

660
00:23:54,880 --> 00:23:56,880
cryptocurrency miner you want it to have

661
00:23:56,880 --> 00:24:00,000
ample cpu resources so it can actually

662
00:24:00,000 --> 00:24:01,600
mine the cryptocurrency and make you

663
00:24:01,600 --> 00:24:02,559
money

664
00:24:02,559 --> 00:24:04,400
so basically by stopping

665
00:24:04,400 --> 00:24:06,559
uh you know specific processes that

666
00:24:06,559 --> 00:24:08,799
might you know match already running

667
00:24:08,799 --> 00:24:10,400
miners or

668
00:24:10,400 --> 00:24:13,279
you know other high cpu utilization

669
00:24:13,279 --> 00:24:15,600
processes uh it can basically achieve

670
00:24:15,600 --> 00:24:17,200
its goal

671
00:24:17,200 --> 00:24:19,360
and then it will basically uh you know

672
00:24:19,360 --> 00:24:20,799
look through

673
00:24:20,799 --> 00:24:23,279
you know some specific uh i guess you

674
00:24:23,279 --> 00:24:24,960
know established connections so

675
00:24:24,960 --> 00:24:27,840
basically if it will run nedstad

676
00:24:27,840 --> 00:24:30,320
hyphen ano and basically find

677
00:24:30,320 --> 00:24:32,880
uh you know tcp connections and then

678
00:24:32,880 --> 00:24:35,039
basically iterate all over all of those

679
00:24:35,039 --> 00:24:37,760
uh and specifically look for uh what's

680
00:24:37,760 --> 00:24:40,080
typically a uh you know cryptocurrency

681
00:24:40,080 --> 00:24:42,960
mining uh pool uh you know destination

682
00:24:42,960 --> 00:24:45,200
port so something like three three three

683
00:24:45,200 --> 00:24:48,080
three four four four four etcetera

684
00:24:48,080 --> 00:24:50,480
but basically you can see uh you know if

685
00:24:50,480 --> 00:24:52,320
it's going to match on any of those

686
00:24:52,320 --> 00:24:54,320
destination ports it will basically stop

687
00:24:54,320 --> 00:24:57,200
the process um so again you know to you

688
00:24:57,200 --> 00:24:57,840
know

689
00:24:57,840 --> 00:24:59,840
give itself more

690
00:24:59,840 --> 00:25:01,600
you know resources and things like that

691
00:25:01,600 --> 00:25:04,158
for mining

692
00:25:06,480 --> 00:25:08,799
all right so from then on out

693
00:25:08,799 --> 00:25:10,799
it'll basically

694
00:25:10,799 --> 00:25:12,400
you know go ahead and pull some

695
00:25:12,400 --> 00:25:14,640
additional files

696
00:25:14,640 --> 00:25:16,400
and then basically you know as those

697
00:25:16,400 --> 00:25:18,240
files are pulled things like that

698
00:25:18,240 --> 00:25:19,919
it will start the new you know i guess

699
00:25:19,919 --> 00:25:22,240
mining process per se so

700
00:25:22,240 --> 00:25:23,600
some other kind of

701
00:25:23,600 --> 00:25:25,440
i would say pretty good indicators that

702
00:25:25,440 --> 00:25:27,520
it's a crypto miner you basically have

703
00:25:27,520 --> 00:25:30,000
the donate level you have

704
00:25:30,000 --> 00:25:31,440
the various you know mining pool

705
00:25:31,440 --> 00:25:32,640
addresses

706
00:25:32,640 --> 00:25:35,440
so you have a domain a couple ips

707
00:25:35,440 --> 00:25:37,840
and then you basically have kind of this

708
00:25:37,840 --> 00:25:40,559
u flag here and this is basically

709
00:25:40,559 --> 00:25:42,880
i guess you know like the miners id or

710
00:25:42,880 --> 00:25:44,480
uh you know like the miner's wallet

711
00:25:44,480 --> 00:25:45,600
address

712
00:25:45,600 --> 00:25:47,600
basically as you join a you know

713
00:25:47,600 --> 00:25:49,600
cryptocurrency mining pool

714
00:25:49,600 --> 00:25:51,440
uh the pool has to know how to you know

715
00:25:51,440 --> 00:25:53,679
pay you out as a miner right so this is

716
00:25:53,679 --> 00:25:55,600
basically your you know string or

717
00:25:55,600 --> 00:25:58,080
address that you're identifying as you

718
00:25:58,080 --> 00:26:00,000
know when you check into the pool so

719
00:26:00,000 --> 00:26:02,320
that you get paid out accordingly then

720
00:26:02,320 --> 00:26:04,400
obviously uh you know hide it from the

721
00:26:04,400 --> 00:26:06,960
user so the user doesn't see it

722
00:26:06,960 --> 00:26:08,640
and then finally i will add some

723
00:26:08,640 --> 00:26:11,039
persistence mechanisms so specifically

724
00:26:11,039 --> 00:26:13,760
creating a scheduled task

725
00:26:13,760 --> 00:26:16,000
add registry run keys

726
00:26:16,000 --> 00:26:18,000
to basically you know make sure the

727
00:26:18,000 --> 00:26:22,919
mining process would start upon reboot

728
00:26:24,240 --> 00:26:25,840
all right

729
00:26:25,840 --> 00:26:27,840
so getting into some uh you know

730
00:26:27,840 --> 00:26:30,080
additional details i've kind of talked

731
00:26:30,080 --> 00:26:32,080
you know at a high level about uh you

732
00:26:32,080 --> 00:26:34,080
know some you know generic ways we can

733
00:26:34,080 --> 00:26:35,279
identify

734
00:26:35,279 --> 00:26:37,279
uh you know each of these in windows

735
00:26:37,279 --> 00:26:39,760
event logs but say in general you know

736
00:26:39,760 --> 00:26:41,520
there's a lot of you know fun things you

737
00:26:41,520 --> 00:26:44,080
can find in event logs when you uh you

738
00:26:44,080 --> 00:26:47,120
know do forensic analysis um generally i

739
00:26:47,120 --> 00:26:49,279
kind of you know focus around using a

740
00:26:49,279 --> 00:26:50,880
couple different software suites in

741
00:26:50,880 --> 00:26:53,279
order to actually read the event logs uh

742
00:26:53,279 --> 00:26:55,440
but i guess just natively you can use

743
00:26:55,440 --> 00:26:57,840
obviously powershell or you know like

744
00:26:57,840 --> 00:26:59,679
you know windows event viewer

745
00:26:59,679 --> 00:27:01,520
to kind of you know click through blogs

746
00:27:01,520 --> 00:27:03,120
if you would like

747
00:27:03,120 --> 00:27:05,039
i'm personally a pretty big fan of event

748
00:27:05,039 --> 00:27:07,039
log explorer so it kind of requires you

749
00:27:07,039 --> 00:27:09,679
to know a little bit about you know what

750
00:27:09,679 --> 00:27:11,440
logs and what event ids you're looking

751
00:27:11,440 --> 00:27:12,720
for

752
00:27:12,720 --> 00:27:14,559
but it gives you actually a pretty good

753
00:27:14,559 --> 00:27:16,159
way to filter

754
00:27:16,159 --> 00:27:18,320
and kind of you know do i guess you know

755
00:27:18,320 --> 00:27:20,799
event log analysis at scale

756
00:27:20,799 --> 00:27:23,120
another kind of cool one as well uh

757
00:27:23,120 --> 00:27:24,960
there's a tool called deep blue cli i

758
00:27:24,960 --> 00:27:26,960
think it's brought by sans

759
00:27:26,960 --> 00:27:29,120
and one of my co-workers made me aware

760
00:27:29,120 --> 00:27:30,480
of it just maybe like two or three

761
00:27:30,480 --> 00:27:33,039
months ago but it'll basically you know

762
00:27:33,039 --> 00:27:35,200
you can kind of throw like the kitchen

763
00:27:35,200 --> 00:27:37,039
sink at it uh when you're doing event

764
00:27:37,039 --> 00:27:38,640
log analysis and it'll actually show you

765
00:27:38,640 --> 00:27:40,880
like anomalies and things like that

766
00:27:40,880 --> 00:27:42,320
in the windows event logs which is kind

767
00:27:42,320 --> 00:27:43,360
of cool

768
00:27:43,360 --> 00:27:44,799
but basically you know there's some

769
00:27:44,799 --> 00:27:47,039
common windows event ids you might want

770
00:27:47,039 --> 00:27:49,039
to focus on you know specifically

771
00:27:49,039 --> 00:27:51,840
something like a security 4624 would be

772
00:27:51,840 --> 00:27:55,760
for logon 4625 would be for failed logon

773
00:27:55,760 --> 00:27:58,480
46.88 for a process starting

774
00:27:58,480 --> 00:28:01,200
in 1102 for security event log being

775
00:28:01,200 --> 00:28:04,880
cleared as far as system goes uh 1736

776
00:28:04,880 --> 00:28:06,159
which we already talked about a little

777
00:28:06,159 --> 00:28:06,880
bit

778
00:28:06,880 --> 00:28:08,559
but this one would be for you know

779
00:28:08,559 --> 00:28:10,960
service starters starting or stopping

780
00:28:10,960 --> 00:28:12,960
and then also something like a 70 45

781
00:28:12,960 --> 00:28:14,000
which would be for a service

782
00:28:14,000 --> 00:28:15,919
installation right so if you had a piece

783
00:28:15,919 --> 00:28:17,200
of malware that

784
00:28:17,200 --> 00:28:18,720
you know you wanted to install as a

785
00:28:18,720 --> 00:28:20,320
service you know so that it has

786
00:28:20,320 --> 00:28:21,600
persistence

787
00:28:21,600 --> 00:28:22,960
um you know it would basically be

788
00:28:22,960 --> 00:28:25,120
recorded in the windows event locks

789
00:28:25,120 --> 00:28:27,600
obviously you know powershell is

790
00:28:27,600 --> 00:28:30,159
good as well you can basically you know

791
00:28:30,159 --> 00:28:32,480
look for something like a 400 or 600 but

792
00:28:32,480 --> 00:28:33,919
that's going to basically show you kind

793
00:28:33,919 --> 00:28:37,120
of the you know uh script block logging

794
00:28:37,120 --> 00:28:38,559
and you know the actual command line

795
00:28:38,559 --> 00:28:40,320
that's being run

796
00:28:40,320 --> 00:28:42,159
and then if you also have sysmon enabled

797
00:28:42,159 --> 00:28:43,440
on the machine

798
00:28:43,440 --> 00:28:44,960
i won't go into the details of each of

799
00:28:44,960 --> 00:28:46,240
these but

800
00:28:46,240 --> 00:28:48,640
can basically give you some additional

801
00:28:48,640 --> 00:28:50,559
uh you know

802
00:28:50,559 --> 00:28:52,320
useful info

803
00:28:52,320 --> 00:28:54,480
if you do have sysmon installed

804
00:28:54,480 --> 00:28:56,880
so you can see right here in particular

805
00:28:56,880 --> 00:28:59,039
there's just a couple examples of

806
00:28:59,039 --> 00:29:01,039
you know some commands you can run

807
00:29:01,039 --> 00:29:03,120
to basically find

808
00:29:03,120 --> 00:29:05,039
you know what you might be looking for

809
00:29:05,039 --> 00:29:07,919
uh you know just from the windows uh you

810
00:29:07,919 --> 00:29:09,600
know event log commandlets that are

811
00:29:09,600 --> 00:29:10,840
built into

812
00:29:10,840 --> 00:29:14,640
powershell all right so as far as uh you

813
00:29:14,640 --> 00:29:17,520
know detecting this in you know kind of

814
00:29:17,520 --> 00:29:20,480
commercially available tools

815
00:29:20,480 --> 00:29:23,279
in windows defender atp uh it's pretty

816
00:29:23,279 --> 00:29:24,960
cool actually you know can kind of just

817
00:29:24,960 --> 00:29:26,480
you know detect it out of the box for

818
00:29:26,480 --> 00:29:29,200
you so here you have an example of you

819
00:29:29,200 --> 00:29:32,320
know log4j uh you know exploitation

820
00:29:32,320 --> 00:29:34,000
being detected

821
00:29:34,000 --> 00:29:36,799
um but if you wanted to for example

822
00:29:36,799 --> 00:29:38,880
like go in and actually hunt for you

823
00:29:38,880 --> 00:29:40,399
know suspicious you know process

824
00:29:40,399 --> 00:29:42,240
telemetry and things like that

825
00:29:42,240 --> 00:29:43,760
basically what you can do is look for

826
00:29:43,760 --> 00:29:46,640
that ws tomcatservice.exe

827
00:29:46,640 --> 00:29:48,320
and basically look at all the child

828
00:29:48,320 --> 00:29:50,159
processes that it's spawning so in

829
00:29:50,159 --> 00:29:52,799
particular vmware horizon

830
00:29:52,799 --> 00:29:56,080
it will use repadmin.exe to basically

831
00:29:56,080 --> 00:29:58,399
uh replicate data between itself and

832
00:29:58,399 --> 00:30:00,399
other vmware horizon servers so if you

833
00:30:00,399 --> 00:30:01,520
like

834
00:30:01,520 --> 00:30:03,279
cluster them or whatever

835
00:30:03,279 --> 00:30:05,360
but in particular you know you can

836
00:30:05,360 --> 00:30:07,440
filter out that executable and then just

837
00:30:07,440 --> 00:30:10,080
kind of watch for uh other services that

838
00:30:10,080 --> 00:30:10,720
are

839
00:30:10,720 --> 00:30:12,720
other processes that are spawned so for

840
00:30:12,720 --> 00:30:14,080
example if you had something like a

841
00:30:14,080 --> 00:30:16,480
command.exe or a powershell.exe being

842
00:30:16,480 --> 00:30:19,200
spawned out of ws tomcat service you

843
00:30:19,200 --> 00:30:21,360
probably want to look into that

844
00:30:21,360 --> 00:30:22,960
and additionally you could look at

845
00:30:22,960 --> 00:30:25,440
something like you know powershell.exe

846
00:30:25,440 --> 00:30:26,240
uh

847
00:30:26,240 --> 00:30:28,240
basically uh you know having something

848
00:30:28,240 --> 00:30:30,399
like the vm blast sg

849
00:30:30,399 --> 00:30:32,159
uh in the process command line which

850
00:30:32,159 --> 00:30:34,159
would basically you know indicate that

851
00:30:34,159 --> 00:30:36,720
powershell is restarting that vm blast

852
00:30:36,720 --> 00:30:39,120
service

853
00:30:39,520 --> 00:30:42,320
all right so for crowdstrike falcon um

854
00:30:42,320 --> 00:30:45,039
again you know it's you know pretty i

855
00:30:45,039 --> 00:30:46,559
would say you know repetitive these next

856
00:30:46,559 --> 00:30:48,559
couple slides but this kind of goes to

857
00:30:48,559 --> 00:30:51,039
show you know you will have that ws

858
00:30:51,039 --> 00:30:53,039
tomcatservice.exe

859
00:30:53,039 --> 00:30:55,120
basically spawning you know something

860
00:30:55,120 --> 00:30:57,679
like a malicious powershell process

861
00:30:57,679 --> 00:31:00,000
and you can basically see here you know

862
00:31:00,000 --> 00:31:02,640
like most edr tools should you know it

863
00:31:02,640 --> 00:31:05,200
will kind of detect that that is being

864
00:31:05,200 --> 00:31:09,200
done basically terminate the process

865
00:31:09,600 --> 00:31:11,039
and carbon black

866
00:31:11,039 --> 00:31:12,720
kind of cool you can you know search for

867
00:31:12,720 --> 00:31:15,440
the cve uh and identify

868
00:31:15,440 --> 00:31:16,240
you know

869
00:31:16,240 --> 00:31:19,120
basically instances where it might be uh

870
00:31:19,120 --> 00:31:20,480
in use

871
00:31:20,480 --> 00:31:22,799
um but again you know just kind of

872
00:31:22,799 --> 00:31:25,200
re-harping on that same

873
00:31:25,200 --> 00:31:27,519
parent-to-child process relationship you

874
00:31:27,519 --> 00:31:30,000
have the ws tomcatservice.exe

875
00:31:30,000 --> 00:31:30,840
you know

876
00:31:30,840 --> 00:31:33,440
spawning a powershell process you can

877
00:31:33,440 --> 00:31:36,159
see kind of in the details pane here

878
00:31:36,159 --> 00:31:39,440
you do have an encoded command um but

879
00:31:39,440 --> 00:31:42,000
uh you know good enough for us uh you

880
00:31:42,000 --> 00:31:43,600
know the process

881
00:31:43,600 --> 00:31:45,840
uh you know is basically being denied uh

882
00:31:45,840 --> 00:31:47,120
so you know the actual malicious

883
00:31:47,120 --> 00:31:50,080
powershell process is terminated

884
00:31:50,080 --> 00:31:53,120
uh you know specifically in fire ihx um

885
00:31:53,120 --> 00:31:54,480
you know it will detect kind of out of

886
00:31:54,480 --> 00:31:56,799
the box you know suspicious powershell

887
00:31:56,799 --> 00:31:58,880
methodology so basically you know

888
00:31:58,880 --> 00:32:00,960
looking for encoded powershell and

889
00:32:00,960 --> 00:32:03,039
things like that but again to just kind

890
00:32:03,039 --> 00:32:05,120
of you know rehash it you have that ws

891
00:32:05,120 --> 00:32:08,000
tomcat service.exe basically launching

892
00:32:08,000 --> 00:32:11,200
powershell and then you can see as a

893
00:32:11,200 --> 00:32:13,120
command line argument you basically have

894
00:32:13,120 --> 00:32:14,880
that encoded command

895
00:32:14,880 --> 00:32:16,159
which will basically you know go and

896
00:32:16,159 --> 00:32:19,440
fetch that stage to payload

897
00:32:19,440 --> 00:32:21,200
so kind of another cool one that i don't

898
00:32:21,200 --> 00:32:23,600
didn't have a lot of experience with but

899
00:32:23,600 --> 00:32:25,200
one of my customers

900
00:32:25,200 --> 00:32:27,679
you know had it and made it available to

901
00:32:27,679 --> 00:32:30,720
us um so basically uh dell secure works

902
00:32:30,720 --> 00:32:33,760
uh they have kind of this new tagius xdr

903
00:32:33,760 --> 00:32:35,840
um i think you know basically you take

904
00:32:35,840 --> 00:32:37,200
all the red cloak agents and you

905
00:32:37,200 --> 00:32:39,440
basically feed the data in uh to this

906
00:32:39,440 --> 00:32:40,320
now

907
00:32:40,320 --> 00:32:42,799
but kind of cool it actually detailed uh

908
00:32:42,799 --> 00:32:45,440
you know a lot of the incidents uh and i

909
00:32:45,440 --> 00:32:47,760
guess you know exploitation campaigns uh

910
00:32:47,760 --> 00:32:50,000
you know that we covered uh you know in

911
00:32:50,000 --> 00:32:51,360
the talk here

912
00:32:51,360 --> 00:32:52,880
um but you can actually see here what

913
00:32:52,880 --> 00:32:55,039
was kind of cool about this one is it

914
00:32:55,039 --> 00:32:57,360
actually captured some i guess follow-up

915
00:32:57,360 --> 00:32:59,840
activity uh with regards to the web

916
00:32:59,840 --> 00:33:01,760
shell that was placed so in particular

917
00:33:01,760 --> 00:33:04,240
you can see uh very similar to the first

918
00:33:04,240 --> 00:33:06,640
scenario we talked about uh you know you

919
00:33:06,640 --> 00:33:07,519
have

920
00:33:07,519 --> 00:33:09,600
uh you know kind of that you know web

921
00:33:09,600 --> 00:33:11,440
shell string insertion

922
00:33:11,440 --> 00:33:13,679
and then you know basically the

923
00:33:13,679 --> 00:33:17,120
restarting of that vm blast sg service

924
00:33:17,120 --> 00:33:19,039
uh then basically you can see about one

925
00:33:19,039 --> 00:33:21,440
day later you actually have somebody

926
00:33:21,440 --> 00:33:24,000
coming back and then running a command

927
00:33:24,000 --> 00:33:24,960
uh

928
00:33:24,960 --> 00:33:26,640
exe basically you know running the who

929
00:33:26,640 --> 00:33:28,159
am i command so

930
00:33:28,159 --> 00:33:30,000
kind of cool actually that it will uh

931
00:33:30,000 --> 00:33:31,760
you know track all the subsequent

932
00:33:31,760 --> 00:33:33,600
process executions that come out of that

933
00:33:33,600 --> 00:33:34,799
web shell

934
00:33:34,799 --> 00:33:36,559
and then you can basically see

935
00:33:36,559 --> 00:33:38,240
you know it has some other detections

936
00:33:38,240 --> 00:33:40,799
for uh you know like the 185 ip which is

937
00:33:40,799 --> 00:33:42,480
the cobalt strike ip we also talked

938
00:33:42,480 --> 00:33:44,640
about

939
00:33:45,360 --> 00:33:48,480
all right so as far as prevention goes

940
00:33:48,480 --> 00:33:49,440
um

941
00:33:49,440 --> 00:33:51,279
there are a couple of ways you can you

942
00:33:51,279 --> 00:33:53,679
know try to block this or you know hope

943
00:33:53,679 --> 00:33:55,360
to block this

944
00:33:55,360 --> 00:33:56,960
say you know number one you just have to

945
00:33:56,960 --> 00:33:58,640
kind of stay up to date with patching

946
00:33:58,640 --> 00:34:01,120
and things like that um you know i would

947
00:34:01,120 --> 00:34:04,799
say in in an instance like log 4j

948
00:34:04,799 --> 00:34:06,720
you know you're not always going to have

949
00:34:06,720 --> 00:34:08,159
you know the patches that are you know

950
00:34:08,159 --> 00:34:10,719
maybe readily available uh you know as

951
00:34:10,719 --> 00:34:12,719
exploit code drops so you know there's

952
00:34:12,719 --> 00:34:15,199
not a ton you can do about that

953
00:34:15,199 --> 00:34:16,560
but you know i guess you know kind of

954
00:34:16,560 --> 00:34:19,679
stay vigilant and kind of be aware

955
00:34:19,679 --> 00:34:21,599
when you know

956
00:34:21,599 --> 00:34:24,000
exploits come out you know for you know

957
00:34:24,000 --> 00:34:25,599
software you know products that you

958
00:34:25,599 --> 00:34:27,839
might kind of depend on say also you

959
00:34:27,839 --> 00:34:29,599
know vulnerability scanning

960
00:34:29,599 --> 00:34:31,280
i really you know try to emphasize this

961
00:34:31,280 --> 00:34:33,359
to all my customers you know you kind of

962
00:34:33,359 --> 00:34:34,800
have to really really know your

963
00:34:34,800 --> 00:34:36,000
perimeter

964
00:34:36,000 --> 00:34:38,879
you know we all you know for example you

965
00:34:38,879 --> 00:34:40,639
know we'll run you know services to make

966
00:34:40,639 --> 00:34:42,239
them available to our users and things

967
00:34:42,239 --> 00:34:43,280
like that

968
00:34:43,280 --> 00:34:44,560
but if you don't actually you know

969
00:34:44,560 --> 00:34:45,839
understand that you know you have

970
00:34:45,839 --> 00:34:48,239
dependencies and vulnerabilities

971
00:34:48,239 --> 00:34:50,399
you know and you're basically running

972
00:34:50,399 --> 00:34:51,918
you know those items directly on the

973
00:34:51,918 --> 00:34:54,000
internet um you know

974
00:34:54,000 --> 00:34:55,918
it's going to get exploited you know if

975
00:34:55,918 --> 00:34:57,839
there is you know publicly available

976
00:34:57,839 --> 00:35:00,000
exploit code for it

977
00:35:00,000 --> 00:35:01,359
and it's just kind of a matter of time

978
00:35:01,359 --> 00:35:04,160
until you enter a scenario like this so

979
00:35:04,160 --> 00:35:05,760
again you know know your perimeter you

980
00:35:05,760 --> 00:35:07,040
know there's a lot of tools that will

981
00:35:07,040 --> 00:35:09,520
kind of help you map your uh you know

982
00:35:09,520 --> 00:35:11,920
attack surface you know specifically for

983
00:35:11,920 --> 00:35:15,040
what you have on the internet um so if

984
00:35:15,040 --> 00:35:16,640
anybody wants to talk about those you

985
00:35:16,640 --> 00:35:18,240
know after the uh talk you know i'm

986
00:35:18,240 --> 00:35:19,839
happy to chat a little bit more about

987
00:35:19,839 --> 00:35:20,720
those

988
00:35:20,720 --> 00:35:23,040
um but some other things you can do uh

989
00:35:23,040 --> 00:35:24,480
kind of like was that what was

990
00:35:24,480 --> 00:35:27,440
referenced in the swiss government's uh

991
00:35:27,440 --> 00:35:28,320
sir

992
00:35:28,320 --> 00:35:29,760
uh you know you can run it at web

993
00:35:29,760 --> 00:35:31,440
application firewall so it's something

994
00:35:31,440 --> 00:35:35,040
like an imperva cloudflare akamai

995
00:35:35,040 --> 00:35:36,880
i would say egress filtering is also a

996
00:35:36,880 --> 00:35:38,880
pretty good one so i dealt with one

997
00:35:38,880 --> 00:35:42,480
customer in particular uh basically

998
00:35:42,480 --> 00:35:45,040
they had an instance where stage one of

999
00:35:45,040 --> 00:35:46,560
the exploit was running so we could

1000
00:35:46,560 --> 00:35:47,839
obviously see

1001
00:35:47,839 --> 00:35:50,320
you know the you know inbound request uh

1002
00:35:50,320 --> 00:35:51,839
you know being sent to the vmware

1003
00:35:51,839 --> 00:35:54,800
horizon server however uh the stage two

1004
00:35:54,800 --> 00:35:57,280
would i guess you know never complete uh

1005
00:35:57,280 --> 00:35:59,200
or you know the server would never you

1006
00:35:59,200 --> 00:36:01,680
know effectively be exploited uh you

1007
00:36:01,680 --> 00:36:03,280
know specifically because they were

1008
00:36:03,280 --> 00:36:05,599
filtering kind of you know for outbound

1009
00:36:05,599 --> 00:36:07,119
connections on

1010
00:36:07,119 --> 00:36:09,119
tcp 389

1011
00:36:09,119 --> 00:36:10,560
so it's actually kind of cool you can

1012
00:36:10,560 --> 00:36:12,960
have the exploit be delivered but since

1013
00:36:12,960 --> 00:36:14,960
it has to go back and basically you know

1014
00:36:14,960 --> 00:36:16,160
pick up

1015
00:36:16,160 --> 00:36:17,359
you know that

1016
00:36:17,359 --> 00:36:19,920
you know i guess you know second stage

1017
00:36:19,920 --> 00:36:21,359
there's not actually a way for it to do

1018
00:36:21,359 --> 00:36:22,720
that since they're doing egress

1019
00:36:22,720 --> 00:36:23,839
filtering

1020
00:36:23,839 --> 00:36:25,680
which was actually kind of cool because

1021
00:36:25,680 --> 00:36:27,839
we basically didn't have an incident so

1022
00:36:27,839 --> 00:36:29,520
i always love to you know kind of see

1023
00:36:29,520 --> 00:36:31,119
that

1024
00:36:31,119 --> 00:36:32,960
so again you know what for some outbound

1025
00:36:32,960 --> 00:36:34,640
connections to you know seemingly

1026
00:36:34,640 --> 00:36:36,800
suspicious high ps and domains

1027
00:36:36,800 --> 00:36:39,599
um you know namely uh you know i find a

1028
00:36:39,599 --> 00:36:41,839
lot of uh you know threat actors will

1029
00:36:41,839 --> 00:36:43,920
use something like a canary token to

1030
00:36:43,920 --> 00:36:47,040
just test uh you know if there is uh you

1031
00:36:47,040 --> 00:36:48,640
know something vulnerable

1032
00:36:48,640 --> 00:36:50,400
so basically you know looking for you

1033
00:36:50,400 --> 00:36:53,040
know something like ens requests to a

1034
00:36:53,040 --> 00:36:55,520
canary token domain coming from a vmware

1035
00:36:55,520 --> 00:36:58,960
horizon server we're also looking for

1036
00:36:58,960 --> 00:37:00,960
you know basically outbound connections

1037
00:37:00,960 --> 00:37:03,119
on tcp 389

1038
00:37:03,119 --> 00:37:04,560
and for those that aren't familiar with

1039
00:37:04,560 --> 00:37:06,000
canary tokens

1040
00:37:06,000 --> 00:37:07,359
it's basically

1041
00:37:07,359 --> 00:37:10,079
uh kind of like a you know like a mini

1042
00:37:10,079 --> 00:37:12,160
honeypot if you will so let's say for

1043
00:37:12,160 --> 00:37:14,960
example kind of in the screenshot here

1044
00:37:14,960 --> 00:37:16,480
if you had you know like if you wanted

1045
00:37:16,480 --> 00:37:19,040
to set up like a canary aws key

1046
00:37:19,040 --> 00:37:20,880
what you can do is kind of generate one

1047
00:37:20,880 --> 00:37:22,880
and then just basically be notified

1048
00:37:22,880 --> 00:37:25,119
anytime that key is used so i mean you

1049
00:37:25,119 --> 00:37:26,480
know you can have it like email you you

1050
00:37:26,480 --> 00:37:28,400
can have it uh you know send a request

1051
00:37:28,400 --> 00:37:30,960
to a web hook a lot of different ways

1052
00:37:30,960 --> 00:37:33,119
but you know kind of a cool uh way to

1053
00:37:33,119 --> 00:37:34,400
you know detect

1054
00:37:34,400 --> 00:37:35,920
uh you know if something is being used

1055
00:37:35,920 --> 00:37:38,000
they shouldn't be

1056
00:37:38,000 --> 00:37:39,760
some other things uh you know you can

1057
00:37:39,760 --> 00:37:40,960
obviously

1058
00:37:40,960 --> 00:37:43,359
kind of depend on your edr

1059
00:37:43,359 --> 00:37:44,720
and i would say you know if you're going

1060
00:37:44,720 --> 00:37:46,880
to run services on the internet it's

1061
00:37:46,880 --> 00:37:48,640
important to have you know some way to

1062
00:37:48,640 --> 00:37:50,880
kind of monitor process telemetry so

1063
00:37:50,880 --> 00:37:52,400
that you can basically identify when

1064
00:37:52,400 --> 00:37:54,400
something like this happens so you know

1065
00:37:54,400 --> 00:37:56,880
most adr products uh you know can enable

1066
00:37:56,880 --> 00:37:58,160
you to do that

1067
00:37:58,160 --> 00:38:00,079
then alternatively you could disable

1068
00:38:00,079 --> 00:38:02,960
something like jndi that's

1069
00:38:02,960 --> 00:38:05,599
referenced here in uh you know the swiss

1070
00:38:05,599 --> 00:38:08,800
certs uh you know great graphic um that

1071
00:38:08,800 --> 00:38:10,079
being said though you know if it's a

1072
00:38:10,079 --> 00:38:11,680
commercial software product they

1073
00:38:11,680 --> 00:38:13,680
probably won't give you the uh you know

1074
00:38:13,680 --> 00:38:15,839
ability to kind of do that you know out

1075
00:38:15,839 --> 00:38:18,640
the box per se so you know i think in

1076
00:38:18,640 --> 00:38:20,800
that regard you're kind of dependent you

1077
00:38:20,800 --> 00:38:22,960
know specifically on the vendor and you

1078
00:38:22,960 --> 00:38:25,359
might want to you know kind of revert

1079
00:38:25,359 --> 00:38:26,960
back to

1080
00:38:26,960 --> 00:38:28,640
number one blocking

1081
00:38:28,640 --> 00:38:31,359
uh with the web application firewall or

1082
00:38:31,359 --> 00:38:34,799
obviously patching it as well

1083
00:38:37,359 --> 00:38:41,680
and then finally some thread intel items

1084
00:38:41,680 --> 00:38:43,760
i think you know a lot of edr products

1085
00:38:43,760 --> 00:38:45,440
and next generation firewall products

1086
00:38:45,440 --> 00:38:47,040
will kind of bundle

1087
00:38:47,040 --> 00:38:48,960
uh you know detections for this kind of

1088
00:38:48,960 --> 00:38:51,920
activity directly into the product so if

1089
00:38:51,920 --> 00:38:53,760
you think about you know a lot of the

1090
00:38:53,760 --> 00:38:55,359
organizations that make these products

1091
00:38:55,359 --> 00:38:57,520
they have you know pretty big research

1092
00:38:57,520 --> 00:38:59,440
teams and groups that will basically you

1093
00:38:59,440 --> 00:39:02,160
know track this activity so uh you know

1094
00:39:02,160 --> 00:39:04,160
i think you will get some good coverage

1095
00:39:04,160 --> 00:39:04,960
there

1096
00:39:04,960 --> 00:39:07,280
um i personally like to you know read

1097
00:39:07,280 --> 00:39:09,359
twitter a lot i'm not really a poster

1098
00:39:09,359 --> 00:39:11,599
i'm into that but um you know i

1099
00:39:11,599 --> 00:39:13,839
definitely uh you know try to absorb as

1100
00:39:13,839 --> 00:39:15,440
much as i can there

1101
00:39:15,440 --> 00:39:16,880
what's kind of cool about each one of

1102
00:39:16,880 --> 00:39:18,480
these incidents in particular if you

1103
00:39:18,480 --> 00:39:20,880
just go google you know the eyepiece

1104
00:39:20,880 --> 00:39:22,560
you'll find twitter threads that are

1105
00:39:22,560 --> 00:39:25,119
kind of talking about uh this activity

1106
00:39:25,119 --> 00:39:27,680
as it's happening right so you know it's

1107
00:39:27,680 --> 00:39:30,160
not really anything uh super special but

1108
00:39:30,160 --> 00:39:32,720
it kind of goes to show that you know uh

1109
00:39:32,720 --> 00:39:35,040
you know if security researchers can

1110
00:39:35,040 --> 00:39:36,640
kind of find this activity as it's

1111
00:39:36,640 --> 00:39:38,480
happening and kind of you know broadcast

1112
00:39:38,480 --> 00:39:40,400
it to the whole internet uh you know we

1113
00:39:40,400 --> 00:39:42,400
can kind of you know collectively you

1114
00:39:42,400 --> 00:39:44,000
know fight back against the attackers

1115
00:39:44,000 --> 00:39:46,160
which i think is great um you know

1116
00:39:46,160 --> 00:39:48,160
shameless plug for abandoning advantage

1117
00:39:48,160 --> 00:39:50,400
as security professionals uh it kind of

1118
00:39:50,400 --> 00:39:52,560
operates on a freemium model so if you

1119
00:39:52,560 --> 00:39:54,720
all any of you want accounts you can you

1120
00:39:54,720 --> 00:39:56,400
know go and register for that

1121
00:39:56,400 --> 00:39:58,400
get some information from there

1122
00:39:58,400 --> 00:40:00,720
and then finally you know just some ioc

1123
00:40:00,720 --> 00:40:03,280
links um you know for kind of

1124
00:40:03,280 --> 00:40:05,280
pretty common feeds as it pertains to

1125
00:40:05,280 --> 00:40:07,920
log 4j

1126
00:40:09,119 --> 00:40:10,720
so with that does anybody have any

1127
00:40:10,720 --> 00:40:13,200
questions um

1128
00:40:13,200 --> 00:40:16,680
anything at all

1129
00:40:20,370 --> 00:40:23,500
[Music]

1130
00:40:27,920 --> 00:40:29,760
yeah so i would say in uh these

1131
00:40:29,760 --> 00:40:31,680
instances in particular um the

1132
00:40:31,680 --> 00:40:33,599
attribution uh you know they were

1133
00:40:33,599 --> 00:40:35,040
basically all attributed to be new

1134
00:40:35,040 --> 00:40:37,680
groups um so i'm not sure if you're

1135
00:40:37,680 --> 00:40:39,599
familiar kind of with the way that manny

1136
00:40:39,599 --> 00:40:42,319
attracts threat actors but we basically

1137
00:40:42,319 --> 00:40:44,000
take new groups and we you know specify

1138
00:40:44,000 --> 00:40:45,839
them as an unc cluster and then as we

1139
00:40:45,839 --> 00:40:48,240
have evidence to basically link uh you

1140
00:40:48,240 --> 00:40:50,240
know varying groups you know we kind of

1141
00:40:50,240 --> 00:40:52,400
merge them together but for all these in

1142
00:40:52,400 --> 00:40:54,400
particular they were i guess you know

1143
00:40:54,400 --> 00:40:55,760
individual

1144
00:40:55,760 --> 00:40:59,200
you know new unc groups per se

1145
00:40:59,200 --> 00:41:01,439
sure

1146
00:41:04,839 --> 00:41:07,119
yep have worked previously with a

1147
00:41:07,119 --> 00:41:09,359
program where jay was present but not

1148
00:41:09,359 --> 00:41:13,279
being adequately used by the software

1149
00:41:14,079 --> 00:41:17,079
um

1150
00:41:20,079 --> 00:41:22,880
uh like the web show file in particular

1151
00:41:22,880 --> 00:41:25,599
or yes yeah so i mean if you think about

1152
00:41:25,599 --> 00:41:27,920
that that's basically using you know log

1153
00:41:27,920 --> 00:41:29,920
4j to you know put kind of like a

1154
00:41:29,920 --> 00:41:32,319
secondary backdoor on the system right

1155
00:41:32,319 --> 00:41:34,400
so let's say you know from then on out

1156
00:41:34,400 --> 00:41:35,839
it like you know

1157
00:41:35,839 --> 00:41:38,560
the matter of you know uh i guess

1158
00:41:38,560 --> 00:41:40,160
executing commands on the system as the

1159
00:41:40,160 --> 00:41:41,760
threat actor you're not really depending

1160
00:41:41,760 --> 00:41:43,839
on log4j anymore because you have that

1161
00:41:43,839 --> 00:41:45,200
you know kind of

1162
00:41:45,200 --> 00:41:46,800
you know light piece of malware i should

1163
00:41:46,800 --> 00:41:48,240
say so

1164
00:41:48,240 --> 00:41:50,319
like if you were to i guess have log4j

1165
00:41:50,319 --> 00:41:52,640
turned off from the get-go you know the

1166
00:41:52,640 --> 00:41:55,200
exploit chain obviously wouldn't work um

1167
00:41:55,200 --> 00:41:57,040
but you know once i guess the piece of

1168
00:41:57,040 --> 00:41:58,800
malware is there a cobalt strike beacon

1169
00:41:58,800 --> 00:41:59,839
is there

1170
00:41:59,839 --> 00:42:01,280
you know it's you know effectively game

1171
00:42:01,280 --> 00:42:02,960
over and you have the thread can have

1172
00:42:02,960 --> 00:42:05,920
access to the system

1173
00:42:15,200 --> 00:42:17,359
right so like if for example that's

1174
00:42:17,359 --> 00:42:18,960
correct if you didn't have it i guess

1175
00:42:18,960 --> 00:42:20,640
enabled in the first place you wouldn't

1176
00:42:20,640 --> 00:42:22,160
be able to exploit it you know to

1177
00:42:22,160 --> 00:42:23,839
basically have the downstream effect of

1178
00:42:23,839 --> 00:42:25,280
something like cobalt striker or web

1179
00:42:25,280 --> 00:42:27,599
shell so you know you wouldn't basically

1180
00:42:27,599 --> 00:42:29,440
be facing the problem

1181
00:42:29,440 --> 00:42:32,240
thank you sure

1182
00:42:35,440 --> 00:42:38,160
anyone else

1183
00:42:38,240 --> 00:42:40,319
super well thank you and yeah if you

1184
00:42:40,319 --> 00:42:41,680
anybody wants to chat after you know

1185
00:42:41,680 --> 00:42:43,280
happy to talk about

1186
00:42:43,280 --> 00:42:47,800
anything offline too but thanks everyone

