1
00:00:00,420 --> 00:00:02,598
foreign

2
00:00:24,500 --> 00:00:27,000
so uh thank you all for coming hopefully

3
00:00:27,000 --> 00:00:29,039
you had a great b-sides this is actually

4
00:00:29,039 --> 00:00:31,320
my first besides charm so excited to be

5
00:00:31,320 --> 00:00:33,300
here really love the venue Good Vibes

6
00:00:33,300 --> 00:00:34,739
all around today we're going to be

7
00:00:34,739 --> 00:00:36,860
talking about the uncensorable stack

8
00:00:36,860 --> 00:00:39,120
malicious applications of blockchain

9
00:00:39,120 --> 00:00:40,980
technology and as I talked about before

10
00:00:40,980 --> 00:00:42,780
not going to be shielding any coins here

11
00:00:42,780 --> 00:00:44,520
we're going to be really diving into the

12
00:00:44,520 --> 00:00:46,739
technicals of a bunch of different

13
00:00:46,739 --> 00:00:49,200
blockchain Technologies to see how

14
00:00:49,200 --> 00:00:51,719
adversaries might be able to use them to

15
00:00:51,719 --> 00:00:55,980
carry out some nefarious purposes

16
00:00:55,980 --> 00:00:58,859
so quick who am I uh currently a senior

17
00:00:58,859 --> 00:01:00,660
security engineer at blockfi leading

18
00:01:00,660 --> 00:01:01,859
their cyber threat intelligence program

19
00:01:01,859 --> 00:01:04,080
uh previously I worked at the miter

20
00:01:04,080 --> 00:01:05,700
corporation on the miter attack

21
00:01:05,700 --> 00:01:07,380
evaluations this was doing some

22
00:01:07,380 --> 00:01:08,880
adversary emulation work against

23
00:01:08,880 --> 00:01:11,100
different EDR vendors and mapping

24
00:01:11,100 --> 00:01:14,820
against uh you know apt-29 fin 7 Etc and

25
00:01:14,820 --> 00:01:16,799
then and uh that was half my work and

26
00:01:16,799 --> 00:01:18,180
then the other half of my work I

27
00:01:18,180 --> 00:01:19,380
developed a blockchain and

28
00:01:19,380 --> 00:01:21,119
cryptocurrency capabilities for law

29
00:01:21,119 --> 00:01:23,460
enforcement and for fun I've been

30
00:01:23,460 --> 00:01:25,860
training for an Ironman in June uh 70.3

31
00:01:25,860 --> 00:01:28,439
Iron Man and man that is a time

32
00:01:28,439 --> 00:01:30,180
commitment and one not one that I

33
00:01:30,180 --> 00:01:32,159
expected

34
00:01:32,159 --> 00:01:34,680
so high level agenda uh first we're

35
00:01:34,680 --> 00:01:36,659
going to cover some CTI derived examples

36
00:01:36,659 --> 00:01:38,520
of adversaries using blockchain

37
00:01:38,520 --> 00:01:40,860
technology in the wild look at what has

38
00:01:40,860 --> 00:01:42,180
happened in the past and what is

39
00:01:42,180 --> 00:01:44,159
currently happening next we're going to

40
00:01:44,159 --> 00:01:46,680
go into what exactly are some of the

41
00:01:46,680 --> 00:01:49,380
properties of blockchain technology and

42
00:01:49,380 --> 00:01:51,060
how are those properties likely to be

43
00:01:51,060 --> 00:01:52,920
leveraged by threat actors to carry out

44
00:01:52,920 --> 00:01:54,840
nefarious purposes and level up their

45
00:01:54,840 --> 00:01:55,920
tradecraft

46
00:01:55,920 --> 00:01:57,479
and last we're going to describe the

47
00:01:57,479 --> 00:01:58,920
components of what I would call a

48
00:01:58,920 --> 00:02:01,040
user-friendly unsensorable application

49
00:02:01,040 --> 00:02:03,780
an application that can be deployed and

50
00:02:03,780 --> 00:02:06,659
will be deployed using both a blockchain

51
00:02:06,659 --> 00:02:09,780
for DNS a blockchain for compute and

52
00:02:09,780 --> 00:02:11,220
another blockchain for storage

53
00:02:11,220 --> 00:02:13,739
integrating all of these together in a

54
00:02:13,739 --> 00:02:16,020
decentralized virtually uncensorable

55
00:02:16,020 --> 00:02:17,940
application and we'll talk about the

56
00:02:17,940 --> 00:02:19,140
different components of each of those

57
00:02:19,140 --> 00:02:21,300
and get into why you're going to get

58
00:02:21,300 --> 00:02:23,099
some really strong censorship resistant

59
00:02:23,099 --> 00:02:25,020
guarantees by using this blockchain

60
00:02:25,020 --> 00:02:26,580
technology over your traditional like

61
00:02:26,580 --> 00:02:29,040
centralized providers

62
00:02:29,040 --> 00:02:30,540
or even something like relying on

63
00:02:30,540 --> 00:02:32,400
bulletproof hosting

64
00:02:32,400 --> 00:02:35,160
so diving into some of the CTI derived

65
00:02:35,160 --> 00:02:36,480
examples uh we're going to start with

66
00:02:36,480 --> 00:02:38,099
you know what many of you may have seen

67
00:02:38,099 --> 00:02:40,140
already and likely have seen so very

68
00:02:40,140 --> 00:02:41,879
basic uh talking about crypto jacking

69
00:02:41,879 --> 00:02:43,500
this is when a threat actor compromises

70
00:02:43,500 --> 00:02:45,300
a machine and begins to use that

71
00:02:45,300 --> 00:02:48,180
machine's resources typically the CPU to

72
00:02:48,180 --> 00:02:50,459
mine cryptocurrency this is a typically

73
00:02:50,459 --> 00:02:52,019
what you'll see with like privacy coins

74
00:02:52,019 --> 00:02:54,599
such as Monero where they're more

75
00:02:54,599 --> 00:02:56,700
friendly to use those CPU resources in

76
00:02:56,700 --> 00:02:59,640
order to mine participate in the network

77
00:02:59,640 --> 00:03:03,060
and collect cryptocurrency for rewards

78
00:03:03,060 --> 00:03:05,099
of their mining next something called

79
00:03:05,099 --> 00:03:07,080
crypto clipping this is where your

80
00:03:07,080 --> 00:03:09,659
clipboard is not safe let's say that you

81
00:03:09,659 --> 00:03:11,940
want to send some cryptocurrency to a

82
00:03:11,940 --> 00:03:14,340
friend you go ahead you open up your

83
00:03:14,340 --> 00:03:16,500
wallet of choice where your private keys

84
00:03:16,500 --> 00:03:18,420
are stored you your friend gives them

85
00:03:18,420 --> 00:03:20,760
your their cryptocurrency address and

86
00:03:20,760 --> 00:03:22,680
you go you copy it and you attempt to

87
00:03:22,680 --> 00:03:24,239
paste it into whatever wallet that you'd

88
00:03:24,239 --> 00:03:26,220
like to start to send funds to them now

89
00:03:26,220 --> 00:03:28,080
what this malware does is it actively

90
00:03:28,080 --> 00:03:30,780
monitors your clipboard to see in regex

91
00:03:30,780 --> 00:03:33,720
fingerprint a cryptocurrency address so

92
00:03:33,720 --> 00:03:35,220
when it sees one in there it's actually

93
00:03:35,220 --> 00:03:36,900
going to replace it with that malware

94
00:03:36,900 --> 00:03:39,299
author's cryptocurrency address and

95
00:03:39,299 --> 00:03:41,159
hoping that the user doesn't catch that

96
00:03:41,159 --> 00:03:43,019
the address has been changed you'll find

97
00:03:43,019 --> 00:03:44,640
that these come in the form of like hex

98
00:03:44,640 --> 00:03:46,620
strings so they're really hard unless

99
00:03:46,620 --> 00:03:48,060
you're really paying attention to catch

100
00:03:48,060 --> 00:03:49,560
the difference between one and another

101
00:03:49,560 --> 00:03:51,480
if you're moving quickly you're likely

102
00:03:51,480 --> 00:03:53,580
to get taken advantage of this this was

103
00:03:53,580 --> 00:03:55,319
uh some research put out by checkpoint

104
00:03:55,319 --> 00:03:57,319
on the uh

105
00:03:57,319 --> 00:03:59,760
botnet that was actually monitoring 30

106
00:03:59,760 --> 00:04:01,580
different types or 30 different

107
00:04:01,580 --> 00:04:03,900
blockchains for those cryptocurrency

108
00:04:03,900 --> 00:04:05,340
addresses so that they could swap them

109
00:04:05,340 --> 00:04:06,060
out

110
00:04:06,060 --> 00:04:07,739
and then lastly

111
00:04:07,739 --> 00:04:09,360
um before we dive into some specific

112
00:04:09,360 --> 00:04:11,220
blockchain-based capability capabilities

113
00:04:11,220 --> 00:04:13,560
we've got trojanizing cryptocurrency

114
00:04:13,560 --> 00:04:16,918
applications so blue norov and apt group

115
00:04:16,918 --> 00:04:19,380
out of North Korea was dropping backdoor

116
00:04:19,380 --> 00:04:21,060
versions of metamask which is a popular

117
00:04:21,060 --> 00:04:23,100
ethereum wallet where instead of

118
00:04:23,100 --> 00:04:24,900
pointing to the Chrome web store for

119
00:04:24,900 --> 00:04:26,220
your Chrome extension where you would

120
00:04:26,220 --> 00:04:28,199
have this metamask wallet they actually

121
00:04:28,199 --> 00:04:30,960
would go into Dev tools and point your

122
00:04:30,960 --> 00:04:33,780
browser to a locally backdoored version

123
00:04:33,780 --> 00:04:36,000
of metamask that was dropped on disk and

124
00:04:36,000 --> 00:04:38,160
the purpose of this was that when you go

125
00:04:38,160 --> 00:04:39,900
and unlock your metamask wallet you're

126
00:04:39,900 --> 00:04:41,220
going to be putting in your seed phrase

127
00:04:41,220 --> 00:04:42,960
which can be used for essentially think

128
00:04:42,960 --> 00:04:44,820
of it like your private key

129
00:04:44,820 --> 00:04:47,100
and uh they will go take that private

130
00:04:47,100 --> 00:04:48,479
key send it upstream and immediately

131
00:04:48,479 --> 00:04:50,280
start training all funds related to that

132
00:04:50,280 --> 00:04:52,139
wallet so

133
00:04:52,139 --> 00:04:53,820
um the next version is kind of like

134
00:04:53,820 --> 00:04:55,620
backdooring versions of cryptocurrency

135
00:04:55,620 --> 00:04:58,139
trading applications so again uh this is

136
00:04:58,139 --> 00:04:59,820
actually a report put out from sisa very

137
00:04:59,820 --> 00:05:01,800
recently about a North Korean

138
00:05:01,800 --> 00:05:03,919
state-sponsored apt group that was

139
00:05:03,919 --> 00:05:06,780
compiling electron.js applications to

140
00:05:06,780 --> 00:05:09,440
look like popular cryptocurrency trading

141
00:05:09,440 --> 00:05:11,940
software and with the same goal in mind

142
00:05:11,940 --> 00:05:14,039
to essentially get the private keys and

143
00:05:14,039 --> 00:05:15,360
be able to sweep funds out of those

144
00:05:15,360 --> 00:05:17,720
wallets

145
00:05:17,759 --> 00:05:20,460
next we're going to be talking about the

146
00:05:20,460 --> 00:05:22,380
actual okay how do we use blockchain

147
00:05:22,380 --> 00:05:24,360
itself or how have adversaries been

148
00:05:24,360 --> 00:05:27,300
using blockchain itself uh to be

149
00:05:27,300 --> 00:05:28,500
resilient in their command and control

150
00:05:28,500 --> 00:05:30,960
so this is an example of an IP address

151
00:05:30,960 --> 00:05:33,300
for command control servers that were

152
00:05:33,300 --> 00:05:35,280
encoded within the amount of Bitcoin

153
00:05:35,280 --> 00:05:37,259
held at a specific Bitcoin receiving

154
00:05:37,259 --> 00:05:40,320
address so you can see here

155
00:05:40,320 --> 00:05:41,639
hopefully

156
00:05:41,639 --> 00:05:44,580
no oh all right so the balance section

157
00:05:44,580 --> 00:05:46,680
you'll see at the bottom what this

158
00:05:46,680 --> 00:05:49,500
malware would do is it would first go to

159
00:05:49,500 --> 00:05:51,240
a public blockchain Explorer at a

160
00:05:51,240 --> 00:05:53,220
specific cryptocurrency address it would

161
00:05:53,220 --> 00:05:55,800
get the balance at that address it would

162
00:05:55,800 --> 00:05:58,020
convert that balance to hex it would

163
00:05:58,020 --> 00:06:00,300
then substring a portion out of that hex

164
00:06:00,300 --> 00:06:02,880
convert that to an integer and then

165
00:06:02,880 --> 00:06:06,240
lastly concatenate a decimal and do this

166
00:06:06,240 --> 00:06:08,880
for each octet of an IP address so be

167
00:06:08,880 --> 00:06:10,380
able to take the balance that you see

168
00:06:10,380 --> 00:06:12,060
here and convert it into an IP address

169
00:06:12,060 --> 00:06:15,060
so this is just a reminder that Bitcoin

170
00:06:15,060 --> 00:06:16,680
address transactions are virtually

171
00:06:16,680 --> 00:06:18,960
uncensorable right we know that this is

172
00:06:18,960 --> 00:06:20,100
happening and you can see the

173
00:06:20,100 --> 00:06:21,360
transactions that are going to this

174
00:06:21,360 --> 00:06:23,100
wallet because all this blockchain

175
00:06:23,100 --> 00:06:24,780
technology is public but there's nothing

176
00:06:24,780 --> 00:06:26,699
we can actively do to stop them from

177
00:06:26,699 --> 00:06:29,780
making these transactions

178
00:06:30,120 --> 00:06:32,880
next on a research section so a number

179
00:06:32,880 --> 00:06:35,460
of years ago a few researchers put out a

180
00:06:35,460 --> 00:06:37,319
paper called Zombie coin and this is

181
00:06:37,319 --> 00:06:39,060
powering the next generation of botnets

182
00:06:39,060 --> 00:06:41,039
with something called Bitcoin script so

183
00:06:41,039 --> 00:06:42,360
for those of you who don't know uh

184
00:06:42,360 --> 00:06:43,860
Bitcoin actually has a scripting

185
00:06:43,860 --> 00:06:45,419
language built into it

186
00:06:45,419 --> 00:06:47,699
um not two um or a little similar to

187
00:06:47,699 --> 00:06:48,900
that of ethereum if you heard about

188
00:06:48,900 --> 00:06:50,400
smart contracts which we'll talk about a

189
00:06:50,400 --> 00:06:52,380
little later in the talk but it is very

190
00:06:52,380 --> 00:06:54,539
limited uh there's just some basic logic

191
00:06:54,539 --> 00:06:57,240
and math in their package in those

192
00:06:57,240 --> 00:06:59,099
Bitcoin transactions and it's not

193
00:06:59,099 --> 00:07:00,900
turning complete and this is by Design

194
00:07:00,900 --> 00:07:02,580
as compared to something like ethereum

195
00:07:02,580 --> 00:07:06,120
in order to limit the attack surface of

196
00:07:06,120 --> 00:07:07,800
what you can really do and exploit

197
00:07:07,800 --> 00:07:09,960
within this Bitcoin script you know in

198
00:07:09,960 --> 00:07:11,520
ethereum you're hearing about exploits

199
00:07:11,520 --> 00:07:13,259
of different D5 projects you know

200
00:07:13,259 --> 00:07:14,520
basically every week hundreds of

201
00:07:14,520 --> 00:07:17,220
millions of dollars and that's

202
00:07:17,220 --> 00:07:19,440
a bit in part because there's so much

203
00:07:19,440 --> 00:07:21,360
flexibility within the language that

204
00:07:21,360 --> 00:07:23,220
developers end up shooting themselves in

205
00:07:23,220 --> 00:07:24,539
the foot and coding in vulnerabilities

206
00:07:24,539 --> 00:07:26,940
and we don't quite have enough tools to

207
00:07:26,940 --> 00:07:28,199
check for those yet

208
00:07:28,199 --> 00:07:30,840
and so one of the Bitcoins in Bitcoin

209
00:07:30,840 --> 00:07:33,060
script we have op codes and a specific

210
00:07:33,060 --> 00:07:35,220
op code that the the paper mentions is

211
00:07:35,220 --> 00:07:37,139
the op return and this is where you're

212
00:07:37,139 --> 00:07:38,880
actually able to store bytes of data

213
00:07:38,880 --> 00:07:41,580
within a transaction so in the image

214
00:07:41,580 --> 00:07:42,840
below I know it might be a little bit

215
00:07:42,840 --> 00:07:44,520
hard to see for those in the back but

216
00:07:44,520 --> 00:07:47,520
essentially you've got a bot master who

217
00:07:47,520 --> 00:07:49,319
has a botnet that is operating out in

218
00:07:49,319 --> 00:07:50,099
the wild

219
00:07:50,099 --> 00:07:52,139
and the spotmaster can then create a

220
00:07:52,139 --> 00:07:54,180
transaction and inside that transaction

221
00:07:54,180 --> 00:07:56,879
leverage the op return code to store

222
00:07:56,879 --> 00:07:59,340
some data in there they can store a

223
00:07:59,340 --> 00:08:01,379
domain they can they can even store a

224
00:08:01,379 --> 00:08:02,400
command

225
00:08:02,400 --> 00:08:04,139
um such as you know I want you to begin

226
00:08:04,139 --> 00:08:05,819
xfilling this data

227
00:08:05,819 --> 00:08:07,379
so they can store that create a

228
00:08:07,379 --> 00:08:09,419
transaction propagate that out to the

229
00:08:09,419 --> 00:08:11,400
Bitcoin Network and then like we saw

230
00:08:11,400 --> 00:08:13,020
previously in the last slide those Bots

231
00:08:13,020 --> 00:08:14,819
can pick up that transaction right all

232
00:08:14,819 --> 00:08:16,379
of this is happening on a peer-to-peer

233
00:08:16,379 --> 00:08:18,419
system that's publicly available and

234
00:08:18,419 --> 00:08:20,220
those Bots will then read the data

235
00:08:20,220 --> 00:08:21,960
that's in that op return code and be

236
00:08:21,960 --> 00:08:24,060
able to start executing that command so

237
00:08:24,060 --> 00:08:25,620
proxying that command and control

238
00:08:25,620 --> 00:08:29,460
execution through the Bitcoin blockchain

239
00:08:29,460 --> 00:08:32,159
and more recently we actually saw an

240
00:08:32,159 --> 00:08:33,719
implementation of this so first we had a

241
00:08:33,719 --> 00:08:35,159
research paper where some researchers

242
00:08:35,159 --> 00:08:36,240
were theorizing how it might be

243
00:08:36,240 --> 00:08:37,679
leveraged and now we're seeing actual

244
00:08:37,679 --> 00:08:39,779
apt groups uh going out and leveraging

245
00:08:39,779 --> 00:08:41,700
it so this was uh I couldn't really

246
00:08:41,700 --> 00:08:43,799
pronounce it's like globetiba

247
00:08:43,799 --> 00:08:45,300
I don't know how to say it I actually

248
00:08:45,300 --> 00:08:46,740
put it into Google to see how to say it

249
00:08:46,740 --> 00:08:48,480
and it turns out whoever named this uh

250
00:08:48,480 --> 00:08:50,279
just called them stupid so that was kind

251
00:08:50,279 --> 00:08:52,019
of interesting uh and apparently it's

252
00:08:52,019 --> 00:08:54,600
Croatian in case you were curious

253
00:08:54,600 --> 00:08:57,240
so we have the blockchain transaction

254
00:08:57,240 --> 00:09:00,180
operator code data and in this instance

255
00:09:00,180 --> 00:09:04,500
was essentially decrypted using AES 256

256
00:09:04,500 --> 00:09:07,680
encryption and it was providing a backup

257
00:09:07,680 --> 00:09:10,380
command or domain name to execute so

258
00:09:10,380 --> 00:09:11,820
it's a little might be hard to see in

259
00:09:11,820 --> 00:09:15,180
the back but the red section is the IV

260
00:09:15,180 --> 00:09:16,860
and this is actually in a transaction

261
00:09:16,860 --> 00:09:18,660
that was put on the Bitcoin blockchain

262
00:09:18,660 --> 00:09:20,820
in that Hopper turn code so the red

263
00:09:20,820 --> 00:09:22,740
section is the initialization Vector for

264
00:09:22,740 --> 00:09:25,740
that AES encryption the last 16 bytes is

265
00:09:25,740 --> 00:09:27,240
specifying the mode which in this case

266
00:09:27,240 --> 00:09:30,180
was GCM and the middle section is

267
00:09:30,180 --> 00:09:32,760
actually that encrypted domain

268
00:09:32,760 --> 00:09:34,680
for this specific malware uh the

269
00:09:34,680 --> 00:09:36,899
decryption key was hard-coded within the

270
00:09:36,899 --> 00:09:39,240
implant itself so that malware go out

271
00:09:39,240 --> 00:09:41,519
would go out look to the Bitcoin

272
00:09:41,519 --> 00:09:42,540
blockchain

273
00:09:42,540 --> 00:09:44,519
source and pull that op return data

274
00:09:44,519 --> 00:09:46,680
decrypt it and was able to execute

275
00:09:46,680 --> 00:09:48,240
whatever command was embedded within

276
00:09:48,240 --> 00:09:51,200
that Bitcoin transaction

277
00:09:51,240 --> 00:09:53,459
now we talked about Bitcoin and we're

278
00:09:53,459 --> 00:09:55,140
not this is this is not only going to be

279
00:09:55,140 --> 00:09:57,060
a Bitcoin blockchain talk we're going to

280
00:09:57,060 --> 00:09:58,800
see how exactly do we use some of the

281
00:09:58,800 --> 00:10:00,600
other blockchain technology that's out

282
00:10:00,600 --> 00:10:01,440
there

283
00:10:01,440 --> 00:10:04,440
um to create a um a fully sensorable or

284
00:10:04,440 --> 00:10:07,140
uncensorable stack so an example of this

285
00:10:07,140 --> 00:10:09,120
is we start talking about okay what does

286
00:10:09,120 --> 00:10:11,579
it look like if you have DNS

287
00:10:11,579 --> 00:10:14,519
capabilities backed by a blockchain and

288
00:10:14,519 --> 00:10:15,660
so there's one out there it's called

289
00:10:15,660 --> 00:10:17,279
namecoin and in this instance we're

290
00:10:17,279 --> 00:10:18,959
going to dive into the Shifu banking

291
00:10:18,959 --> 00:10:20,880
Trojan so the Shifu banking Trojan

292
00:10:20,880 --> 00:10:22,740
leverages namecoin which is a

293
00:10:22,740 --> 00:10:25,380
decentralized domain blockchain and uh

294
00:10:25,380 --> 00:10:27,839
specifically for subdomains underneath

295
00:10:27,839 --> 00:10:31,380
the dot bit TLD in this instance that

296
00:10:31,380 --> 00:10:33,480
banking Trojan was able to retrieve IP

297
00:10:33,480 --> 00:10:35,040
addresses for the command and control

298
00:10:35,040 --> 00:10:38,640
server based on what the name coin node

299
00:10:38,640 --> 00:10:40,380
would respond with so if you take a look

300
00:10:40,380 --> 00:10:41,579
at the bottom here

301
00:10:41,579 --> 00:10:44,399
we start with any public name coin node

302
00:10:44,399 --> 00:10:46,260
so you can think of a name coin no just

303
00:10:46,260 --> 00:10:48,000
like a blockchain node or a Bitcoin node

304
00:10:48,000 --> 00:10:49,560
except it's running two different

305
00:10:49,560 --> 00:10:51,420
Services the first service is called

306
00:10:51,420 --> 00:10:53,940
named coin D this service essentially is

307
00:10:53,940 --> 00:10:55,079
going to be running your blockchain

308
00:10:55,079 --> 00:10:57,360
Daemon this is where you're going to

309
00:10:57,360 --> 00:10:59,279
have transactions and these transactions

310
00:10:59,279 --> 00:11:01,860
are actually going to be DNS records

311
00:11:01,860 --> 00:11:04,260
that are set so if I own a private key

312
00:11:04,260 --> 00:11:08,640
and I want to purchase a DOT bit TLD I

313
00:11:08,640 --> 00:11:10,560
can do so on the name coin blockchain

314
00:11:10,560 --> 00:11:13,680
and I can also set your typical DNS

315
00:11:13,680 --> 00:11:15,720
record so I can set a records AAA

316
00:11:15,720 --> 00:11:18,060
records text records and this is done

317
00:11:18,060 --> 00:11:20,100
through creating transactions on the

318
00:11:20,100 --> 00:11:22,740
name coin blockchain next we have the

319
00:11:22,740 --> 00:11:24,480
name coin resolver and the purpose of

320
00:11:24,480 --> 00:11:26,820
the resolver here is to actually check

321
00:11:26,820 --> 00:11:29,160
the blockchain as a source of Truth so

322
00:11:29,160 --> 00:11:31,560
it will say okay it receives a query in

323
00:11:31,560 --> 00:11:33,180
this case from the Shifu banking Trojan

324
00:11:33,180 --> 00:11:36,420
for a specific domain.bit address

325
00:11:36,420 --> 00:11:38,760
the resolver is then going to resolve

326
00:11:38,760 --> 00:11:40,800
whatever DNS request is coming in by

327
00:11:40,800 --> 00:11:42,060
looking to the blockchain and saying

328
00:11:42,060 --> 00:11:44,399
okay what record what a record is on the

329
00:11:44,399 --> 00:11:47,399
blockchain for that specific dot bit TLD

330
00:11:47,399 --> 00:11:50,160
now I want to stress here that um in

331
00:11:50,160 --> 00:11:51,720
this instance they were using any public

332
00:11:51,720 --> 00:11:53,220
name coin node remember these are

333
00:11:53,220 --> 00:11:55,680
peer-to-peer systems so there are you

334
00:11:55,680 --> 00:11:57,240
know hundreds of people who are

335
00:11:57,240 --> 00:11:59,279
operating these nodes uh surely because

336
00:11:59,279 --> 00:12:01,079
they want to participate in you know the

337
00:12:01,079 --> 00:12:02,940
name coin community so it's not relying

338
00:12:02,940 --> 00:12:05,040
on any single point or single server to

339
00:12:05,040 --> 00:12:08,519
resolve these queries and if you're a

340
00:12:08,519 --> 00:12:10,440
malicious operator you can stand up your

341
00:12:10,440 --> 00:12:11,880
own too there's nothing saying that you

342
00:12:11,880 --> 00:12:13,079
can't host some of your own local

343
00:12:13,079 --> 00:12:14,880
infrastructure for this it's all open

344
00:12:14,880 --> 00:12:17,160
source code

345
00:12:17,160 --> 00:12:21,360
next we have uh so what actually makes

346
00:12:21,360 --> 00:12:23,639
um a good you know blockchain in terms

347
00:12:23,639 --> 00:12:25,440
of this uncensorable application what

348
00:12:25,440 --> 00:12:27,300
might be next what might we see for some

349
00:12:27,300 --> 00:12:28,740
threat actors and to better understand

350
00:12:28,740 --> 00:12:30,720
what we might see in the future let's

351
00:12:30,720 --> 00:12:32,700
take a look at what are some blockchain

352
00:12:32,700 --> 00:12:35,100
Properties or properties of blockchains

353
00:12:35,100 --> 00:12:38,100
that uh can be leveraged by an attacker

354
00:12:38,100 --> 00:12:40,079
so what are blockchains good at well

355
00:12:40,079 --> 00:12:42,480
they're incredibly resilient this comes

356
00:12:42,480 --> 00:12:44,160
in two forms both their peer-to-peer

357
00:12:44,160 --> 00:12:46,800
Network where there's a number of

358
00:12:46,800 --> 00:12:48,000
different public nodes that are all

359
00:12:48,000 --> 00:12:49,740
talking to each other and then you have

360
00:12:49,740 --> 00:12:52,079
the consensus layer which is they're all

361
00:12:52,079 --> 00:12:53,760
agreeing on the transactions that are

362
00:12:53,760 --> 00:12:55,200
happening on the network this is either

363
00:12:55,200 --> 00:12:56,700
done through proof of work proof of

364
00:12:56,700 --> 00:12:58,019
stake there's a bunch of different ones

365
00:12:58,019 --> 00:12:59,160
out there we won't get into the

366
00:12:59,160 --> 00:13:00,660
specifics today

367
00:13:00,660 --> 00:13:02,959
and essentially the consensus layer

368
00:13:02,959 --> 00:13:04,860
structures it in such that it's

369
00:13:04,860 --> 00:13:07,079
irreversible right especially for some

370
00:13:07,079 --> 00:13:08,820
of the more well-known blockchains so

371
00:13:08,820 --> 00:13:10,320
when we're talking about Bitcoin

372
00:13:10,320 --> 00:13:11,760
ethereum

373
00:13:11,760 --> 00:13:14,639
um if you want to like 51 attack those

374
00:13:14,639 --> 00:13:16,200
um where essentially you're able to

375
00:13:16,200 --> 00:13:17,220
amass

376
00:13:17,220 --> 00:13:19,260
um a large stake in the network such

377
00:13:19,260 --> 00:13:20,760
that you can control what is happening

378
00:13:20,760 --> 00:13:23,220
on the blockchain Today the game theory

379
00:13:23,220 --> 00:13:25,760
behind that is such that it's you know

380
00:13:25,760 --> 00:13:27,899
incredibly unlikely that someone is

381
00:13:27,899 --> 00:13:29,459
going to be able to change the records

382
00:13:29,459 --> 00:13:30,959
on like the Bitcoin blockchain for

383
00:13:30,959 --> 00:13:32,459
instance to give you a sense of scale

384
00:13:32,459 --> 00:13:34,079
we're talking like trillions of dollars

385
00:13:34,079 --> 00:13:37,800
and um of buying different types of

386
00:13:37,800 --> 00:13:39,859
um

387
00:13:40,440 --> 00:13:42,420
mining Hardware which isn't exactly

388
00:13:42,420 --> 00:13:43,800
going to be something that happens you

389
00:13:43,800 --> 00:13:44,940
know quietly

390
00:13:44,940 --> 00:13:47,579
next it's also verifiable in that users

391
00:13:47,579 --> 00:13:49,560
can self-host all of this infrastructure

392
00:13:49,560 --> 00:13:51,600
themselves I don't have to trust on any

393
00:13:51,600 --> 00:13:53,639
third party I can download the software

394
00:13:53,639 --> 00:13:55,380
I can let the software verify the

395
00:13:55,380 --> 00:13:59,220
blockchain and do so on my local network

396
00:13:59,220 --> 00:14:01,260
and these properties together make it so

397
00:14:01,260 --> 00:14:03,420
that it's effectively uncensorable I

398
00:14:03,420 --> 00:14:04,800
talked about Bitcoin transactions before

399
00:14:04,800 --> 00:14:07,079
there's no one no one including

400
00:14:07,079 --> 00:14:08,220
governments are really going to be able

401
00:14:08,220 --> 00:14:10,320
to stop me from broadcasting a Bitcoin

402
00:14:10,320 --> 00:14:12,480
transaction Network or a transaction to

403
00:14:12,480 --> 00:14:13,980
the Bitcoin Network

404
00:14:13,980 --> 00:14:15,360
now let's take a look at what are

405
00:14:15,360 --> 00:14:17,639
blockchain's bad at well they're

406
00:14:17,639 --> 00:14:20,699
incredibly slow so block block times are

407
00:14:20,699 --> 00:14:22,199
how long it takes to actually append

408
00:14:22,199 --> 00:14:24,060
some of that data to the blockchain in

409
00:14:24,060 --> 00:14:25,740
this instance on bitcoin that's going to

410
00:14:25,740 --> 00:14:27,899
be about 10 minutes ethereum much less

411
00:14:27,899 --> 00:14:30,019
you know between 8 and 15 seconds

412
00:14:30,019 --> 00:14:32,760
also if you want to host the node

413
00:14:32,760 --> 00:14:34,500
infrastructure yourself it's going to

414
00:14:34,500 --> 00:14:36,540
take a while to sync all of the previous

415
00:14:36,540 --> 00:14:38,339
transactions meaning bitcoin's been

416
00:14:38,339 --> 00:14:40,560
around for a while if you want to verify

417
00:14:40,560 --> 00:14:42,420
that whole transaction set that came

418
00:14:42,420 --> 00:14:44,639
before you that's going to take

419
00:14:44,639 --> 00:14:46,800
um quite a bit of time SSD recommended

420
00:14:46,800 --> 00:14:48,480
you're probably going to be waiting at

421
00:14:48,480 --> 00:14:49,800
least in upwards of a week if you're

422
00:14:49,800 --> 00:14:51,240
doing it on a hard drive

423
00:14:51,240 --> 00:14:52,800
and because of this there's moderate

424
00:14:52,800 --> 00:14:55,260
self-hosting resource requirements like

425
00:14:55,260 --> 00:14:56,639
I said before you're going to need SSD

426
00:14:56,639 --> 00:14:58,620
the Bitcoin blockchain itself I believe

427
00:14:58,620 --> 00:15:01,260
is going to be around like 650 gigs if

428
00:15:01,260 --> 00:15:03,060
you want to host it all yourself

429
00:15:03,060 --> 00:15:04,860
um in ethereum if you want to host a

430
00:15:04,860 --> 00:15:06,120
whole entire state of the ethereum

431
00:15:06,120 --> 00:15:09,480
network and run a full node that's going

432
00:15:09,480 --> 00:15:11,399
to be on the order of like two terabytes

433
00:15:11,399 --> 00:15:12,779
granted not everyone is going to be

434
00:15:12,779 --> 00:15:14,040
doing that there's lighter version and

435
00:15:14,040 --> 00:15:15,360
lighter clients that you can do to get

436
00:15:15,360 --> 00:15:17,639
around that but point being it's going

437
00:15:17,639 --> 00:15:19,440
to take a lot of resources

438
00:15:19,440 --> 00:15:22,380
and uh you can also not really or are

439
00:15:22,380 --> 00:15:24,420
limited by the transaction size and

440
00:15:24,420 --> 00:15:26,220
storage so I talked about before about

441
00:15:26,220 --> 00:15:27,779
using this for command and control you

442
00:15:27,779 --> 00:15:29,339
can think of this as like a one-way

443
00:15:29,339 --> 00:15:30,839
Direction you're not going to be able to

444
00:15:30,839 --> 00:15:32,639
really exfiltrate data through a

445
00:15:32,639 --> 00:15:35,339
blockchain typically because it actually

446
00:15:35,339 --> 00:15:37,680
costs you money to write data to that

447
00:15:37,680 --> 00:15:39,360
blockchain right you have to pay miners

448
00:15:39,360 --> 00:15:41,639
fees in order for your data to be

449
00:15:41,639 --> 00:15:43,920
preserved on that blockchain Network now

450
00:15:43,920 --> 00:15:46,800
in ethereum's example you can actually

451
00:15:46,800 --> 00:15:48,779
read data from that blockchain for free

452
00:15:48,779 --> 00:15:50,579
so there's a number of public ethereum

453
00:15:50,579 --> 00:15:51,839
nodes which we'll talk about later in

454
00:15:51,839 --> 00:15:55,139
the talk where you can request data from

455
00:15:55,139 --> 00:15:56,459
them and they will just happily answer

456
00:15:56,459 --> 00:15:58,920
that question for you as long as you're

457
00:15:58,920 --> 00:16:00,420
not writing a new state you're not

458
00:16:00,420 --> 00:16:03,600
writing any data to the blockchain

459
00:16:03,600 --> 00:16:05,880
so now we're going to dive into

460
00:16:05,880 --> 00:16:07,500
um you know what does a tech stack look

461
00:16:07,500 --> 00:16:09,060
like for an uncensorable application

462
00:16:09,060 --> 00:16:10,920
when I talk about tech stack I'm

463
00:16:10,920 --> 00:16:13,259
referring to a blockchain at each one of

464
00:16:13,259 --> 00:16:14,759
these different layers and let's start

465
00:16:14,759 --> 00:16:16,500
to think about how an adversary might

466
00:16:16,500 --> 00:16:18,180
use some of these to carry out a

467
00:16:18,180 --> 00:16:19,800
nefarious purpose

468
00:16:19,800 --> 00:16:22,500
so we're going to start with DNS DNS

469
00:16:22,500 --> 00:16:25,019
really here is only here for a clean UI

470
00:16:25,019 --> 00:16:28,380
ux experience it's a human readable it's

471
00:16:28,380 --> 00:16:30,120
human readable for visitors and implants

472
00:16:30,120 --> 00:16:33,000
like so this is where I talked about

473
00:16:33,000 --> 00:16:34,500
previously where we've got namecoin

474
00:16:34,500 --> 00:16:38,160
which is using a decentralized DNS

475
00:16:38,160 --> 00:16:39,899
service and what we're going to be

476
00:16:39,899 --> 00:16:41,279
talking about later is handshake you can

477
00:16:41,279 --> 00:16:42,540
think of these as basically the same

478
00:16:42,540 --> 00:16:45,480
except handshake improves upon what was

479
00:16:45,480 --> 00:16:48,120
already done in namecoin next we're

480
00:16:48,120 --> 00:16:49,800
going to be talking about compute this

481
00:16:49,800 --> 00:16:51,420
is the real nuts and bolts where the

482
00:16:51,420 --> 00:16:52,920
financial logic and command and control

483
00:16:52,920 --> 00:16:55,500
is really going to exist and Thrive just

484
00:16:55,500 --> 00:16:56,820
for the purposes of this talk we're only

485
00:16:56,820 --> 00:16:58,440
going to be talking about ethereum and

486
00:16:58,440 --> 00:17:00,839
using that as a smart contract layer but

487
00:17:00,839 --> 00:17:02,399
you can use any type of smart contract

488
00:17:02,399 --> 00:17:03,779
platform that you know your heart

489
00:17:03,779 --> 00:17:05,760
desires they all have pros and cons to

490
00:17:05,760 --> 00:17:07,559
each of them and really this is the only

491
00:17:07,559 --> 00:17:09,720
required layer at the time at this time

492
00:17:09,720 --> 00:17:11,939
meaning the DNS layer and the storage

493
00:17:11,939 --> 00:17:14,459
layer are really only to make it more

494
00:17:14,459 --> 00:17:16,260
human readable and provide a better UI

495
00:17:16,260 --> 00:17:19,079
ux experience for some of our customers

496
00:17:19,079 --> 00:17:20,880
that we'll go into later

497
00:17:20,880 --> 00:17:24,900
lastly it's uh storage so storage is

498
00:17:24,900 --> 00:17:26,280
going to be again for our UI ux

499
00:17:26,280 --> 00:17:27,599
experience and this is where we can

500
00:17:27,599 --> 00:17:30,539
actually deliver a complete HTML CSS

501
00:17:30,539 --> 00:17:34,919
JavaScript to a client so such that

502
00:17:34,919 --> 00:17:36,660
if you browse to one of these sites

503
00:17:36,660 --> 00:17:38,640
you're going to be able to host and

504
00:17:38,640 --> 00:17:40,980
render all of the that website that was

505
00:17:40,980 --> 00:17:42,780
delivered from a decentralized storage

506
00:17:42,780 --> 00:17:46,799
Network to your browser locally and this

507
00:17:46,799 --> 00:17:48,660
is going to include some web free

508
00:17:48,660 --> 00:17:49,860
libraries that we're going to use in

509
00:17:49,860 --> 00:17:52,380
Integrations with ethereum such that you

510
00:17:52,380 --> 00:17:54,059
know if you want to create a ethereum

511
00:17:54,059 --> 00:17:55,799
transaction by hand to interact with

512
00:17:55,799 --> 00:17:57,120
some of the command and control that we

513
00:17:57,120 --> 00:17:58,980
talked about before it's incredibly

514
00:17:58,980 --> 00:18:01,080
technical to do so and so if you're

515
00:18:01,080 --> 00:18:02,760
trying to provide a service to people in

516
00:18:02,760 --> 00:18:04,440
a nefarious application you want to be

517
00:18:04,440 --> 00:18:06,480
able to attract people with a clean UI

518
00:18:06,480 --> 00:18:08,400
ux experience so that you can boost up

519
00:18:08,400 --> 00:18:10,080
those those numbers and get some higher

520
00:18:10,080 --> 00:18:11,880
margin

521
00:18:11,880 --> 00:18:13,980
so quick roadmap the first thing we're

522
00:18:13,980 --> 00:18:16,080
going to be talking about is a DNS name

523
00:18:16,080 --> 00:18:19,039
coin and handshake

524
00:18:21,539 --> 00:18:23,340
all right so

525
00:18:23,340 --> 00:18:25,679
blockchain based DNS I introduced

526
00:18:25,679 --> 00:18:27,960
namecoin before you can think of it as a

527
00:18:27,960 --> 00:18:30,000
fork of Bitcoin with a few added op

528
00:18:30,000 --> 00:18:33,720
codes in order to support uh the DNS

529
00:18:33,720 --> 00:18:35,940
service that it is providing it uses a

530
00:18:35,940 --> 00:18:37,380
blockchain for a record of ownership

531
00:18:37,380 --> 00:18:39,120
where if you control the private key

532
00:18:39,120 --> 00:18:41,160
you're able to update records for any

533
00:18:41,160 --> 00:18:44,700
domain for for a DOT bit TLD on the name

534
00:18:44,700 --> 00:18:47,280
coin blockchain and those resolvers are

535
00:18:47,280 --> 00:18:48,960
going to look at that blockchain for a

536
00:18:48,960 --> 00:18:50,160
source of Truth

537
00:18:50,160 --> 00:18:52,559
it honestly it fell out of favor uh due

538
00:18:52,559 --> 00:18:54,240
to domain sniping and squatting with no

539
00:18:54,240 --> 00:18:55,799
intention to use so we talk about you

540
00:18:55,799 --> 00:18:57,480
know you see very common in this

541
00:18:57,480 --> 00:18:59,460
industry or in crypto really is people

542
00:18:59,460 --> 00:19:00,840
are buying things with an expectation

543
00:19:00,840 --> 00:19:02,160
that they're going to appreciate in

544
00:19:02,160 --> 00:19:04,740
value they're speculating and name coin

545
00:19:04,740 --> 00:19:06,840
essentially became victim to that where

546
00:19:06,840 --> 00:19:08,520
uh people were coming in buying all of

547
00:19:08,520 --> 00:19:09,840
these domains and developers who

548
00:19:09,840 --> 00:19:11,039
actually wanted to build things on top

549
00:19:11,039 --> 00:19:13,260
of this platform found themselves unable

550
00:19:13,260 --> 00:19:14,580
to actually get domains that they would

551
00:19:14,580 --> 00:19:16,500
like and so it kind of fell out of favor

552
00:19:16,500 --> 00:19:18,840
and because it's open source and there's

553
00:19:18,840 --> 00:19:20,580
other projects out there they eventually

554
00:19:20,580 --> 00:19:22,799
went over to handshake

555
00:19:22,799 --> 00:19:25,799
so handshake essentially is the same

556
00:19:25,799 --> 00:19:27,480
premise as namecoin but with a few added

557
00:19:27,480 --> 00:19:29,700
benefits for instance it uses a victory

558
00:19:29,700 --> 00:19:31,799
auction to allow buyers to actually bid

559
00:19:31,799 --> 00:19:34,140
for tlds of their choice and when I say

560
00:19:34,140 --> 00:19:36,179
tlds of your choice I'm referring to any

561
00:19:36,179 --> 00:19:38,460
Unicode string that you can think of you

562
00:19:38,460 --> 00:19:41,820
can own as a DOT TLD so it's pretty

563
00:19:41,820 --> 00:19:43,440
crazy to think about we'll talk about

564
00:19:43,440 --> 00:19:45,240
later how

565
00:19:45,240 --> 00:19:47,340
essentially like I tried to buy uh I

566
00:19:47,340 --> 00:19:49,919
tried to buy besides charm or b-sides as

567
00:19:49,919 --> 00:19:51,780
a you know a top level domain and it was

568
00:19:51,780 --> 00:19:53,460
already taken so didn't get it for this

569
00:19:53,460 --> 00:19:55,020
talk but I'm sure you guys can think of

570
00:19:55,020 --> 00:19:56,640
many other Unicode strings that you

571
00:19:56,640 --> 00:19:58,500
might want to own at a top level domain

572
00:19:58,500 --> 00:19:59,760
level

573
00:19:59,760 --> 00:20:01,380
and so this is essentially a

574
00:20:01,380 --> 00:20:03,659
decentralized root zone of trust uh

575
00:20:03,659 --> 00:20:05,520
pretty equivalent to that of icann uh

576
00:20:05,520 --> 00:20:07,380
while being interoperable with existing

577
00:20:07,380 --> 00:20:09,419
tlds so for instance you can't buy.com

578
00:20:09,419 --> 00:20:12,720
right at least not on the handshake

579
00:20:12,720 --> 00:20:15,299
um service so now we have blockchain

580
00:20:15,299 --> 00:20:17,520
based uh censorship resistant domains

581
00:20:17,520 --> 00:20:20,159
and remember we can uh this can be

582
00:20:20,159 --> 00:20:22,260
locally run and verified with no Central

583
00:20:22,260 --> 00:20:24,120
Authority if I want to stand up my own

584
00:20:24,120 --> 00:20:26,760
handshake node I can do that right I can

585
00:20:26,760 --> 00:20:28,260
resolve my own queries on my own local

586
00:20:28,260 --> 00:20:30,120
network if I choose to trust third

587
00:20:30,120 --> 00:20:32,280
parties and all of the public ethereum

588
00:20:32,280 --> 00:20:35,039
or handshake nodes that are out there I

589
00:20:35,039 --> 00:20:36,720
can do that too there's a list of public

590
00:20:36,720 --> 00:20:38,700
resolvers that anyone can use and so

591
00:20:38,700 --> 00:20:40,140
this adds to the resiliency the

592
00:20:40,140 --> 00:20:42,179
uncensorableness because if anyone can

593
00:20:42,179 --> 00:20:43,980
stand up a server and you can leverage

594
00:20:43,980 --> 00:20:45,900
any of those public nodes then it's

595
00:20:45,900 --> 00:20:47,820
going to be much harder to take down as

596
00:20:47,820 --> 00:20:50,039
a whole and it's got an added benefit of

597
00:20:50,039 --> 00:20:53,220
DNS over https

598
00:20:53,220 --> 00:20:55,080
so let's take a look at handshake since

599
00:20:55,080 --> 00:20:57,360
it's the most popular and the most user

600
00:20:57,360 --> 00:21:00,000
friendly so if you actually want to buy

601
00:21:00,000 --> 00:21:01,559
one of these tlds you're going to use

602
00:21:01,559 --> 00:21:03,659
something that's basically akin to an

603
00:21:03,659 --> 00:21:06,299
exchange so the one that I was using is

604
00:21:06,299 --> 00:21:08,159
called name base and on name base you

605
00:21:08,159 --> 00:21:09,720
can think of them as an auction proxy

606
00:21:09,720 --> 00:21:11,640
remember I talked about that Victory

607
00:21:11,640 --> 00:21:13,679
auction before well they provide a

608
00:21:13,679 --> 00:21:15,360
website for you to participate in that

609
00:21:15,360 --> 00:21:18,120
auction process in a very easy way so

610
00:21:18,120 --> 00:21:19,860
you're not creating the transactions

611
00:21:19,860 --> 00:21:22,799
yourself to on the handshake blockchain

612
00:21:22,799 --> 00:21:24,720
you're using them to create those

613
00:21:24,720 --> 00:21:27,659
transactions to purchase a TLD for you

614
00:21:27,659 --> 00:21:29,520
and for this instance I bought clippy

615
00:21:29,520 --> 00:21:30,780
because look how cute he is I mean who

616
00:21:30,780 --> 00:21:34,140
doesn't love clippy and so uh on clippy

617
00:21:34,140 --> 00:21:36,900
um I am able to set uh send transactions

618
00:21:36,900 --> 00:21:39,360
to the handshake blockchain to um you

619
00:21:39,360 --> 00:21:41,100
know set an a record set a cname record

620
00:21:41,100 --> 00:21:44,039
text record and even Skylinks and when I

621
00:21:44,039 --> 00:21:45,720
say Skylinks we'll talk about that later

622
00:21:45,720 --> 00:21:48,419
when we talk about the storage layer but

623
00:21:48,419 --> 00:21:49,919
uh that's going to come in handy when

624
00:21:49,919 --> 00:21:51,780
we're trying to provide that clean UI ux

625
00:21:51,780 --> 00:21:53,880
experience for our decentralized and

626
00:21:53,880 --> 00:21:56,400
censorship resistant application and so

627
00:21:56,400 --> 00:21:58,140
if you look at the bottom here if you

628
00:21:58,140 --> 00:22:00,659
make a DNS request to a and that IP

629
00:22:00,659 --> 00:22:02,400
address that you see is actually a

630
00:22:02,400 --> 00:22:03,960
public

631
00:22:03,960 --> 00:22:07,260
handshake resolver one of many if you

632
00:22:07,260 --> 00:22:09,419
specifically look clippy and specified

633
00:22:09,419 --> 00:22:11,880
any records you'll be able to see that

634
00:22:11,880 --> 00:22:13,320
hey there's some records in here that I

635
00:22:13,320 --> 00:22:15,120
set before right so you've got your a

636
00:22:15,120 --> 00:22:16,740
records your txt records there's

637
00:22:16,740 --> 00:22:18,539
actually you can see a misconfigured

638
00:22:18,539 --> 00:22:19,740
record that's the sky link that I'm

639
00:22:19,740 --> 00:22:22,080
talking about uh before and we now have

640
00:22:22,080 --> 00:22:24,240
a blockchain based censorship resistant

641
00:22:24,240 --> 00:22:27,740
domain at the TLD level

642
00:22:28,740 --> 00:22:31,440
all right so that's a high level uh

643
00:22:31,440 --> 00:22:33,360
talking about DNS next we're going to be

644
00:22:33,360 --> 00:22:34,860
talking about ethereum and the compute

645
00:22:34,860 --> 00:22:37,158
layer

646
00:22:39,419 --> 00:22:42,000
so very high level

647
00:22:42,000 --> 00:22:44,220
um looking at ethereum so ethereum is a

648
00:22:44,220 --> 00:22:46,080
smart contract platform and what this

649
00:22:46,080 --> 00:22:47,640
essentially means is that we can use a

650
00:22:47,640 --> 00:22:50,159
programming language for ethereum it is

651
00:22:50,159 --> 00:22:51,780
solidity which you can see an example of

652
00:22:51,780 --> 00:22:53,280
some of that code on the left

653
00:22:53,280 --> 00:22:55,799
and it allows you to compile code and

654
00:22:55,799 --> 00:22:57,780
deploy it to the blockchain and you can

655
00:22:57,780 --> 00:22:59,280
then interact with that code and the

656
00:22:59,280 --> 00:23:01,200
functions that you've written through

657
00:23:01,200 --> 00:23:03,840
transactions so remember it's free to

658
00:23:03,840 --> 00:23:05,520
actually read data from the blockchain

659
00:23:05,520 --> 00:23:07,799
so if you create a function it might be

660
00:23:07,799 --> 00:23:09,120
a little hard to see the code but in the

661
00:23:09,120 --> 00:23:10,620
bottom you can see that there is a

662
00:23:10,620 --> 00:23:12,480
retrieve function which just returns a

663
00:23:12,480 --> 00:23:13,760
number this is a very simple program

664
00:23:13,760 --> 00:23:15,659
calling that function is going to be

665
00:23:15,659 --> 00:23:17,820
free it doesn't cost anything now if you

666
00:23:17,820 --> 00:23:20,940
actually want to write State such as the

667
00:23:20,940 --> 00:23:22,620
the store function here to store a

668
00:23:22,620 --> 00:23:23,880
number that is where you're actually

669
00:23:23,880 --> 00:23:25,919
going to be paying a mining fee or

670
00:23:25,919 --> 00:23:28,740
transaction fee alongside providing the

671
00:23:28,740 --> 00:23:30,840
parameter to that function of whatever

672
00:23:30,840 --> 00:23:32,820
number that you'd like to store

673
00:23:32,820 --> 00:23:34,980
we also um so you can't store small

674
00:23:34,980 --> 00:23:36,659
amounts of data the more data you store

675
00:23:36,659 --> 00:23:38,640
the more expensive it's going to get and

676
00:23:38,640 --> 00:23:40,620
we also have the ability to emit events

677
00:23:40,620 --> 00:23:42,240
when functions are called so you can

678
00:23:42,240 --> 00:23:44,820
think of this like Pub sub where if I

679
00:23:44,820 --> 00:23:46,620
have a program I can hook a specific

680
00:23:46,620 --> 00:23:49,440
function uh on a smart contract wait for

681
00:23:49,440 --> 00:23:51,360
an event to be emitted and then my

682
00:23:51,360 --> 00:23:53,100
program can take an action based on that

683
00:23:53,100 --> 00:23:54,440
fitted event

684
00:23:54,440 --> 00:23:56,460
emitted event

685
00:23:56,460 --> 00:23:58,980
and I can do this through any number of

686
00:23:58,980 --> 00:24:00,960
those public ethereum nodes again going

687
00:24:00,960 --> 00:24:02,700
back to you know the decentralized

688
00:24:02,700 --> 00:24:04,440
nature of this this is all peer-to-peer

689
00:24:04,440 --> 00:24:07,980
there's 2400 public get nodes which is a

690
00:24:07,980 --> 00:24:11,100
version of ethereum and

691
00:24:11,100 --> 00:24:14,760
um we'll be able to answer uh those uh

692
00:24:14,760 --> 00:24:15,840
questions depending on how they're

693
00:24:15,840 --> 00:24:17,220
configured so if I want to get a

694
00:24:17,220 --> 00:24:19,500
specific value in a smart contract I can

695
00:24:19,500 --> 00:24:22,080
essentially ask any public ethereum node

696
00:24:22,080 --> 00:24:24,539
hey what's the value in that specific

697
00:24:24,539 --> 00:24:26,820
function

698
00:24:26,820 --> 00:24:28,679
so now we're going to talk about

699
00:24:28,679 --> 00:24:30,179
um I know we've introduced introduced

700
00:24:30,179 --> 00:24:33,539
smart contracts how can we use these for

701
00:24:33,539 --> 00:24:36,419
command and control how can a botnet

702
00:24:36,419 --> 00:24:37,860
take advantage of something like smart

703
00:24:37,860 --> 00:24:39,480
contracts to add that layer of

704
00:24:39,480 --> 00:24:41,400
resiliency and really take advantage of

705
00:24:41,400 --> 00:24:43,620
those uh the positives on the blockchain

706
00:24:43,620 --> 00:24:44,640
properties that we talked about

707
00:24:44,640 --> 00:24:46,620
previously so in the bottom left we have

708
00:24:46,620 --> 00:24:48,419
our threat actor here and that threat

709
00:24:48,419 --> 00:24:50,279
actor is going to create a smart

710
00:24:50,279 --> 00:24:52,380
contract and inside this smart contract

711
00:24:52,380 --> 00:24:54,779
they're going to put some functions in

712
00:24:54,779 --> 00:24:58,260
there such as you know writing state for

713
00:24:58,260 --> 00:25:00,419
I want you to execute this command for a

714
00:25:00,419 --> 00:25:02,340
bot to later pick up and read the value

715
00:25:02,340 --> 00:25:04,320
of that variable right so they're going

716
00:25:04,320 --> 00:25:06,600
to deploy the smart contract to the

717
00:25:06,600 --> 00:25:08,340
ethereum blockchain

718
00:25:08,340 --> 00:25:10,559
next they're going to create their

719
00:25:10,559 --> 00:25:11,640
botnet right they're going to infect

720
00:25:11,640 --> 00:25:13,320
some posts they're going to put a

721
00:25:13,320 --> 00:25:15,000
specific implant on those hosts which

722
00:25:15,000 --> 00:25:17,880
will be able to read ethereum and that

723
00:25:17,880 --> 00:25:20,279
specific smart contract that implant is

724
00:25:20,279 --> 00:25:22,440
then going to look out to the open

725
00:25:22,440 --> 00:25:24,419
internet either scanning or through a

726
00:25:24,419 --> 00:25:26,640
hard-coded list and start finding all of

727
00:25:26,640 --> 00:25:28,740
these public ethereum nodes there's uh

728
00:25:28,740 --> 00:25:30,779
you know thousands of them out there and

729
00:25:30,779 --> 00:25:32,159
it's going to leverage them and connect

730
00:25:32,159 --> 00:25:33,480
to one

731
00:25:33,480 --> 00:25:36,480
um seemingly at random And subscribe to

732
00:25:36,480 --> 00:25:38,760
that specific omitted event right it's

733
00:25:38,760 --> 00:25:40,919
going to look in the smart contract say

734
00:25:40,919 --> 00:25:43,380
okay when this function is called I'm

735
00:25:43,380 --> 00:25:44,640
going to do something I'm going to

736
00:25:44,640 --> 00:25:46,500
execute a command

737
00:25:46,500 --> 00:25:48,059
and it's going to subscribe to those

738
00:25:48,059 --> 00:25:49,919
events in that contract

739
00:25:49,919 --> 00:25:52,620
next the threat actor is then going to

740
00:25:52,620 --> 00:25:54,240
you know issue a command right it's

741
00:25:54,240 --> 00:25:55,380
going they're going to create a

742
00:25:55,380 --> 00:25:57,179
transaction which is going to set a

743
00:25:57,179 --> 00:25:59,520
value in that smart contract

744
00:25:59,520 --> 00:26:01,799
once that has been set the event gets

745
00:26:01,799 --> 00:26:03,720
emitted and flows all the way back down

746
00:26:03,720 --> 00:26:05,880
to the that compromise botnet which is

747
00:26:05,880 --> 00:26:07,260
then going to pick up that event and

748
00:26:07,260 --> 00:26:09,600
execute whatever command or instruction

749
00:26:09,600 --> 00:26:12,600
was put forth by the bot master there

750
00:26:12,600 --> 00:26:15,900
so in this setup the botmaster doesn't

751
00:26:15,900 --> 00:26:16,980
need to host any of their own

752
00:26:16,980 --> 00:26:18,779
infrastructure right they're leveraging

753
00:26:18,779 --> 00:26:20,760
this this peer-to-peer network of public

754
00:26:20,760 --> 00:26:23,460
ethereum nodes in order for their

755
00:26:23,460 --> 00:26:25,919
implant to act and be censorship

756
00:26:25,919 --> 00:26:27,299
resistant right all of these

757
00:26:27,299 --> 00:26:29,840
transactions no individual or government

758
00:26:29,840 --> 00:26:31,919
agency is really going to be able to

759
00:26:31,919 --> 00:26:34,140
censor these transactions from hitting

760
00:26:34,140 --> 00:26:36,659
that ethereum Network

761
00:26:36,659 --> 00:26:39,539
so now that we kind of introduced

762
00:26:39,539 --> 00:26:41,340
um the compute layer we'll take a look

763
00:26:41,340 --> 00:26:43,879
at storage

764
00:26:44,340 --> 00:26:46,860
and this is done through ipfs and the

765
00:26:46,860 --> 00:26:48,659
Scion Network and I'll explain both of

766
00:26:48,659 --> 00:26:51,120
those coming up here so let's take a

767
00:26:51,120 --> 00:26:52,320
look at the early stages of

768
00:26:52,320 --> 00:26:54,779
decentralized storage it's actually you

769
00:26:54,779 --> 00:26:56,220
know when it comes to ipfs it's been

770
00:26:56,220 --> 00:26:57,720
around for a little bit longer but the

771
00:26:57,720 --> 00:26:59,340
as far as pure blockchain based

772
00:26:59,340 --> 00:27:00,539
decentralized storage it's still a

773
00:27:00,539 --> 00:27:02,100
pretty like New Field there's still a

774
00:27:02,100 --> 00:27:03,960
lot of development going on and there's

775
00:27:03,960 --> 00:27:05,640
a particular problem that happens with a

776
00:27:05,640 --> 00:27:07,279
lot of these decentralized applications

777
00:27:07,279 --> 00:27:10,440
where if those of you who are familiar

778
00:27:10,440 --> 00:27:12,299
with ethereum and you know are

779
00:27:12,299 --> 00:27:13,980
referencing a bunch of tokens and you

780
00:27:13,980 --> 00:27:15,779
want to trade tokens and swap one token

781
00:27:15,779 --> 00:27:17,880
for another you do that using a

782
00:27:17,880 --> 00:27:19,500
decentralized exchange and these

783
00:27:19,500 --> 00:27:21,779
decentralized exchanges the front end

784
00:27:21,779 --> 00:27:24,600
that HTML CSS JavaScript is actually

785
00:27:24,600 --> 00:27:26,760
hosted on typical Cloud providers your

786
00:27:26,760 --> 00:27:29,700
AWS your gcp your Azure and because of

787
00:27:29,700 --> 00:27:32,399
this that from a censorship perspective

788
00:27:32,399 --> 00:27:34,980
they can be taken offline right at least

789
00:27:34,980 --> 00:27:36,720
the front end can be taken offline not

790
00:27:36,720 --> 00:27:38,399
the back end compute layer of the

791
00:27:38,399 --> 00:27:40,740
application so that's kind of like the

792
00:27:40,740 --> 00:27:42,779
the base layer and problem here where

793
00:27:42,779 --> 00:27:44,880
there's still the ability to censor one

794
00:27:44,880 --> 00:27:48,120
layer of this decentralized stack

795
00:27:48,120 --> 00:27:50,100
so ipfs was kind of the first one to

796
00:27:50,100 --> 00:27:52,740
come on the scene and try to solve us

797
00:27:52,740 --> 00:27:54,299
um you can see by the link there where

798
00:27:54,299 --> 00:27:56,279
there's a uh you look towards the end of

799
00:27:56,279 --> 00:27:58,620
the link this is an ipfs Gateway that's

800
00:27:58,620 --> 00:28:00,960
hosted by cloudflare and it introduces

801
00:28:00,960 --> 00:28:03,600
the content or concept of content

802
00:28:03,600 --> 00:28:05,220
addressed storage

803
00:28:05,220 --> 00:28:07,440
so I have a website I can effectively

804
00:28:07,440 --> 00:28:10,080
hash that website and then ask any

805
00:28:10,080 --> 00:28:12,899
public ipfs Gateway

806
00:28:12,899 --> 00:28:15,120
can you give me the data that exists at

807
00:28:15,120 --> 00:28:16,980
this hash and if they are storing it

808
00:28:16,980 --> 00:28:18,299
then they'll be able to serve that

809
00:28:18,299 --> 00:28:20,159
content and that you can do this by

810
00:28:20,159 --> 00:28:22,140
accessing accessing a Gateway that's

811
00:28:22,140 --> 00:28:24,299
closest to you however there's a problem

812
00:28:24,299 --> 00:28:26,279
with this and the problem is that these

813
00:28:26,279 --> 00:28:27,840
gateways are essentially run by the

814
00:28:27,840 --> 00:28:30,240
community to run for free right is

815
00:28:30,240 --> 00:28:31,799
someone you're essentially need to

816
00:28:31,799 --> 00:28:33,360
convince someone that your data is

817
00:28:33,360 --> 00:28:35,820
important enough to store and if you

818
00:28:35,820 --> 00:28:36,960
can't convince anyone that means you

819
00:28:36,960 --> 00:28:38,520
have to host it yourself and this

820
00:28:38,520 --> 00:28:41,039
doesn't really fall in line with our

821
00:28:41,039 --> 00:28:42,960
ability to really have censorship

822
00:28:42,960 --> 00:28:45,720
resistant data because if there's a you

823
00:28:45,720 --> 00:28:46,500
know if you're the only one who's

824
00:28:46,500 --> 00:28:47,880
hosting it and you're the only one that

825
00:28:47,880 --> 00:28:49,440
cares about your application that's a

826
00:28:49,440 --> 00:28:50,760
single point of failure that can be

827
00:28:50,760 --> 00:28:51,840
censored

828
00:28:51,840 --> 00:28:54,059
so uh if you don't want to run a gateway

829
00:28:54,059 --> 00:28:55,620
then at least you have to convince

830
00:28:55,620 --> 00:28:57,918
someone else

831
00:28:58,020 --> 00:28:59,940
next we talk about how do we solve this

832
00:28:59,940 --> 00:29:01,919
we solve this using the Saya blockchain

833
00:29:01,919 --> 00:29:03,840
and this is where decentralized storage

834
00:29:03,840 --> 00:29:05,640
comes into play ipfs itself wasn't

835
00:29:05,640 --> 00:29:07,620
actually using a blockchain but now

836
00:29:07,620 --> 00:29:09,120
we're going to be moving this over to a

837
00:29:09,120 --> 00:29:11,399
blockchain based system and Saya has two

838
00:29:11,399 --> 00:29:14,100
components to it Saya has renters and

839
00:29:14,100 --> 00:29:15,539
these are people who want to buy storage

840
00:29:15,539 --> 00:29:18,179
and they have hosts these are people who

841
00:29:18,179 --> 00:29:19,740
have a bunch of hard drives and are

842
00:29:19,740 --> 00:29:21,120
looking to sell the storage that they

843
00:29:21,120 --> 00:29:22,559
have to renters

844
00:29:22,559 --> 00:29:24,419
the renter will essentially sign a

845
00:29:24,419 --> 00:29:26,340
contract with the host where the host is

846
00:29:26,340 --> 00:29:27,779
advertising the price that they would

847
00:29:27,779 --> 00:29:29,520
like to sell storage at and they put up

848
00:29:29,520 --> 00:29:31,380
an amount of collateral such that

849
00:29:31,380 --> 00:29:32,880
they're essentially financially

850
00:29:32,880 --> 00:29:34,260
promising that they're going to store

851
00:29:34,260 --> 00:29:36,840
this data or risk losing that collateral

852
00:29:36,840 --> 00:29:39,000
if they fail a storage proof

853
00:29:39,000 --> 00:29:41,159
so the renter after signing a contract

854
00:29:41,159 --> 00:29:43,260
with the host can then begin uploading

855
00:29:43,260 --> 00:29:45,840
their data to a number of hosts this is

856
00:29:45,840 --> 00:29:48,059
distributed depending on what redundancy

857
00:29:48,059 --> 00:29:49,919
level you're looking for I believe the

858
00:29:49,919 --> 00:29:51,840
default is 30 hosts but essentially you

859
00:29:51,840 --> 00:29:53,220
can choose every host in the network if

860
00:29:53,220 --> 00:29:54,539
you like because you're the one who's

861
00:29:54,539 --> 00:29:57,299
paying for it and the hosts are able to

862
00:29:57,299 --> 00:29:59,520
set storage and bandwidth pricing and

863
00:29:59,520 --> 00:30:01,919
the key difference here is the contracts

864
00:30:01,919 --> 00:30:03,720
which are very similar to ethereum Smart

865
00:30:03,720 --> 00:30:05,399
contracts which is how psya does this

866
00:30:05,399 --> 00:30:07,500
and storage proofs are what actually

867
00:30:07,500 --> 00:30:10,080
gets written to the blockchain so in a

868
00:30:10,080 --> 00:30:11,340
similar way like you're deploying an

869
00:30:11,340 --> 00:30:13,200
ethereum smart contract on the sci

870
00:30:13,200 --> 00:30:15,419
Network you're just you're deploying a

871
00:30:15,419 --> 00:30:17,100
storage contract

872
00:30:17,100 --> 00:30:19,080
and the data itself is actually stored

873
00:30:19,080 --> 00:30:21,000
on the host hard drives and not the

874
00:30:21,000 --> 00:30:23,520
blockchain so as long as someone is

875
00:30:23,520 --> 00:30:26,159
paying for that data it will get stored

876
00:30:26,159 --> 00:30:28,860
right so if I I don't need to host any

877
00:30:28,860 --> 00:30:30,720
infrastructure myself if I choose not to

878
00:30:30,720 --> 00:30:32,700
someone else is doing that for me but

879
00:30:32,700 --> 00:30:34,500
I'm paying them in the form of psiacoin

880
00:30:34,500 --> 00:30:38,100
in this instance currently there are 723

881
00:30:38,100 --> 00:30:40,080
hosts storing about you know 2.6

882
00:30:40,080 --> 00:30:41,700
petabytes of data with a total network

883
00:30:41,700 --> 00:30:45,419
capacity of a 7.8 petabytes

884
00:30:45,419 --> 00:30:47,100
and so when we talk about okay how is

885
00:30:47,100 --> 00:30:48,779
this data stored at a very high level

886
00:30:48,779 --> 00:30:50,640
it's uses something called Erasure

887
00:30:50,640 --> 00:30:52,919
coding and we have Bob here and Bob is

888
00:30:52,919 --> 00:30:55,140
going to take that file that uh he wants

889
00:30:55,140 --> 00:30:56,700
stored and split it up into a bunch of

890
00:30:56,700 --> 00:30:59,460
different chunks and and uh redundant

891
00:30:59,460 --> 00:31:01,559
chunks I might add and each one of these

892
00:31:01,559 --> 00:31:03,360
chunks is going to be encrypted and

893
00:31:03,360 --> 00:31:05,760
uploaded to three hosts 100 hosts

894
00:31:05,760 --> 00:31:07,080
however many hosts that really Bob

895
00:31:07,080 --> 00:31:09,779
chooses and Bob is going to set

896
00:31:09,779 --> 00:31:12,179
essentially a redundancy scheme such

897
00:31:12,179 --> 00:31:15,000
that there are only 10 of let's say 60

898
00:31:15,000 --> 00:31:17,279
hosts need to be online for Bob to

899
00:31:17,279 --> 00:31:20,340
recover their entire file so you know if

900
00:31:20,340 --> 00:31:22,019
a couple hosts go down that's fine you

901
00:31:22,019 --> 00:31:25,080
can essentially keep the file health

902
00:31:25,080 --> 00:31:27,600
healthy by propagating it to more hosts

903
00:31:27,600 --> 00:31:29,880
over time

904
00:31:29,880 --> 00:31:32,940
so how many of you have heard of Firefox

905
00:31:32,940 --> 00:31:35,240
scent

906
00:31:35,640 --> 00:31:39,179
I loved Firefox end very easy sharing a

907
00:31:39,179 --> 00:31:40,740
file sharing platform unfortunately

908
00:31:40,740 --> 00:31:42,600
Mozilla took it offline and they took it

909
00:31:42,600 --> 00:31:44,640
offline because as you might guess

910
00:31:44,640 --> 00:31:46,019
people were storing malware on it and

911
00:31:46,019 --> 00:31:48,000
serving malware from it it allowed you

912
00:31:48,000 --> 00:31:50,580
to locally encrypt a file uh upload it

913
00:31:50,580 --> 00:31:52,500
to their platform and have someone else

914
00:31:52,500 --> 00:31:54,539
by sharing a link uh download and

915
00:31:54,539 --> 00:31:55,860
decrypt that file

916
00:31:55,860 --> 00:31:58,320
so this is kind of like uh what Skynet

917
00:31:58,320 --> 00:32:00,840
now comes in and it fills this neat so

918
00:32:00,840 --> 00:32:02,940
it's file sharing built on top of Saya

919
00:32:02,940 --> 00:32:05,940
so it uses the that psya host uh

920
00:32:05,940 --> 00:32:06,960
Marketplace that I talked about

921
00:32:06,960 --> 00:32:09,480
previously and now we get essentially

922
00:32:09,480 --> 00:32:13,019
ipfs file sharing backed by a blockchain

923
00:32:13,019 --> 00:32:15,000
and it's done instead of you know trying

924
00:32:15,000 --> 00:32:16,500
to convince someone to store your data

925
00:32:16,500 --> 00:32:18,299
you can now pay someone to store that

926
00:32:18,299 --> 00:32:21,059
data for you unlike ipfs so as long as

927
00:32:21,059 --> 00:32:23,580
one person is paying to pin that content

928
00:32:23,580 --> 00:32:25,140
to the network it doesn't have to be you

929
00:32:25,140 --> 00:32:27,539
it could be someone else that content

930
00:32:27,539 --> 00:32:30,240
will continue to exist because those

931
00:32:30,240 --> 00:32:31,980
hosts are receiving payments to store it

932
00:32:31,980 --> 00:32:33,840
and they're financially incentivized to

933
00:32:33,840 --> 00:32:35,220
keep storing that data as long as

934
00:32:35,220 --> 00:32:36,779
they're receiving payments so this

935
00:32:36,779 --> 00:32:38,460
allows us to share anything right we can

936
00:32:38,460 --> 00:32:40,980
even share folders of content to include

937
00:32:40,980 --> 00:32:42,840
static websites and you might see where

938
00:32:42,840 --> 00:32:45,539
I'm starting to go with this so

939
00:32:45,539 --> 00:32:46,799
um giving a little bit of a preview

940
00:32:46,799 --> 00:32:48,480
you'll see the link and I've got some

941
00:32:48,480 --> 00:32:51,480
highlights underneath here where

942
00:32:51,480 --> 00:32:53,039
the beginning portion of that link is

943
00:32:53,039 --> 00:32:54,260
actually where it's integrating

944
00:32:54,260 --> 00:32:56,220
handshake so remember I talked about

945
00:32:56,220 --> 00:32:58,679
having your own top level domain on the

946
00:32:58,679 --> 00:33:00,779
handshake blockchain well in this case

947
00:33:00,779 --> 00:33:03,240
someone purchased a sky send on the

948
00:33:03,240 --> 00:33:05,519
handshake blockchain the link here

949
00:33:05,519 --> 00:33:08,220
provided the second the green section is

950
00:33:08,220 --> 00:33:09,419
saying we're going to specify the

951
00:33:09,419 --> 00:33:11,880
handshake protocol protocol and then in

952
00:33:11,880 --> 00:33:14,399
the blue section you see sciasky.net and

953
00:33:14,399 --> 00:33:16,860
this is very similar to and what exists

954
00:33:16,860 --> 00:33:19,559
at the site is very similar to ipfs

955
00:33:19,559 --> 00:33:21,600
gateways this is a portal which is

956
00:33:21,600 --> 00:33:24,720
essentially going to be proxying the

957
00:33:24,720 --> 00:33:26,820
request for you going out to that host

958
00:33:26,820 --> 00:33:29,399
Network and retrieving the file that you

959
00:33:29,399 --> 00:33:31,919
are providing that hash for right so

960
00:33:31,919 --> 00:33:34,019
again you don't have to trust this

961
00:33:34,019 --> 00:33:35,700
science guy.net to go and fetch those

962
00:33:35,700 --> 00:33:37,980
files for you on this is blockchain you

963
00:33:37,980 --> 00:33:39,960
can host this infrastructure yourself so

964
00:33:39,960 --> 00:33:42,299
again adding to the resiliency adding to

965
00:33:42,299 --> 00:33:45,899
the self verifiableness so if we go here

966
00:33:45,899 --> 00:33:48,979
let's open it up quickly

967
00:33:50,760 --> 00:33:52,559
you see this is uh very similar to

968
00:33:52,559 --> 00:33:55,140
Firefox scent right this is all served

969
00:33:55,140 --> 00:33:56,640
you know when I talk about those that

970
00:33:56,640 --> 00:33:58,679
host Network what uh what's Happening

971
00:33:58,679 --> 00:34:00,840
Here is science guy.net is reaching out

972
00:34:00,840 --> 00:34:03,059
to that host Network it is grabbing all

973
00:34:03,059 --> 00:34:05,240
of the HTML CSS

974
00:34:05,240 --> 00:34:07,440
JavaScript that is deployed out on that

975
00:34:07,440 --> 00:34:09,239
Network it is getting it together for us

976
00:34:09,239 --> 00:34:12,060
and then serving it to us in a way that

977
00:34:12,060 --> 00:34:13,560
the browser can render right so now I

978
00:34:13,560 --> 00:34:15,659
can upload a file to this decentralized

979
00:34:15,659 --> 00:34:19,079
website I can um essentially have it be

980
00:34:19,079 --> 00:34:21,060
self-encrypted and then share that file

981
00:34:21,060 --> 00:34:22,379
with someone else that I would like to

982
00:34:22,379 --> 00:34:24,719
right and again this is I don't trust

983
00:34:24,719 --> 00:34:26,579
anyone in this whole exchange if I want

984
00:34:26,579 --> 00:34:27,899
to host all of this infrastructure

985
00:34:27,899 --> 00:34:30,000
myself if I want to you know not trust

986
00:34:30,000 --> 00:34:34,280
science guy.net I can host this myself

987
00:34:37,379 --> 00:34:39,060
and you'll see down here right so

988
00:34:39,060 --> 00:34:41,460
there's a number of different uh portals

989
00:34:41,460 --> 00:34:43,199
that you can go to so when I talk about

990
00:34:43,199 --> 00:34:45,540
content address storage uh in this

991
00:34:45,540 --> 00:34:46,800
instance you know you can go to

992
00:34:46,800 --> 00:34:49,399
sciasky.net or I can go to

993
00:34:49,399 --> 00:34:51,780
fileportal.org I can provide that same

994
00:34:51,780 --> 00:34:55,560
you know Sky send TLD to this protocol

995
00:34:55,560 --> 00:34:57,960
and I get the same website

996
00:34:57,960 --> 00:34:59,700
so again it shows the interoperability

997
00:34:59,700 --> 00:35:01,140
where I can go to any number of these

998
00:35:01,140 --> 00:35:04,400
public nodes and get the same result

999
00:35:05,099 --> 00:35:06,240
so now we're going to put this all

1000
00:35:06,240 --> 00:35:07,619
together you know I talked about having

1001
00:35:07,619 --> 00:35:09,660
a DNS layer which is stored by a

1002
00:35:09,660 --> 00:35:11,160
blockchain a compute layer which is

1003
00:35:11,160 --> 00:35:12,960
backed by ethereum and then a storage

1004
00:35:12,960 --> 00:35:14,520
layer where we can actually deliver a

1005
00:35:14,520 --> 00:35:16,560
user experience a client experience in a

1006
00:35:16,560 --> 00:35:18,480
way that they don't need to trust anyone

1007
00:35:18,480 --> 00:35:21,180
so we're going to dive into one of the

1008
00:35:21,180 --> 00:35:22,619
nefarious applications that I came up

1009
00:35:22,619 --> 00:35:24,720
with which is distributed distributed

1010
00:35:24,720 --> 00:35:26,579
denial of service as a service you know

1011
00:35:26,579 --> 00:35:28,260
you're a bot master you've got some Bots

1012
00:35:28,260 --> 00:35:30,119
you want to sell denial of service

1013
00:35:30,119 --> 00:35:32,220
services to get a higher margin instead

1014
00:35:32,220 --> 00:35:34,680
of your crypto jacket right but the

1015
00:35:34,680 --> 00:35:36,720
problem is you don't trust anyone and so

1016
00:35:36,720 --> 00:35:38,640
what you might be able to do is leverage

1017
00:35:38,640 --> 00:35:41,460
an uncensorable stack to sell your

1018
00:35:41,460 --> 00:35:43,680
botnet services to someone without

1019
00:35:43,680 --> 00:35:46,260
having to trust you at all

1020
00:35:46,260 --> 00:35:48,660
so you know shut up and take my money

1021
00:35:48,660 --> 00:35:51,000
let's go let's get into it so we're

1022
00:35:51,000 --> 00:35:52,560
walking you through it um this is we're

1023
00:35:52,560 --> 00:35:54,180
going to go from the perspective of the

1024
00:35:54,180 --> 00:35:55,619
bot master right how are they going to

1025
00:35:55,619 --> 00:35:57,180
sell this service right they've got a

1026
00:35:57,180 --> 00:35:59,099
botnet they want to monetize it and they

1027
00:35:59,099 --> 00:36:01,920
want to monetize it in a trustless way

1028
00:36:01,920 --> 00:36:03,900
so first off they're going to deploy a

1029
00:36:03,900 --> 00:36:05,520
smart contract right they're going to

1030
00:36:05,520 --> 00:36:07,200
deploy to the ethereum network like I

1031
00:36:07,200 --> 00:36:08,940
talked about previously they're going to

1032
00:36:08,940 --> 00:36:10,440
have some functions in there and one

1033
00:36:10,440 --> 00:36:12,599
function is going to say

1034
00:36:12,599 --> 00:36:14,880
um anyone can call this function and if

1035
00:36:14,880 --> 00:36:16,380
they're called with you know a value

1036
00:36:16,380 --> 00:36:19,020
that's greater than 0.1 ether then and

1037
00:36:19,020 --> 00:36:21,599
is provided a domain then the bot will

1038
00:36:21,599 --> 00:36:23,760
go and pick up that domain and begin a

1039
00:36:23,760 --> 00:36:25,740
denial of service on it

1040
00:36:25,740 --> 00:36:27,720
so now that that botmaster is going to

1041
00:36:27,720 --> 00:36:29,280
compromise a bunch of hosts right you

1042
00:36:29,280 --> 00:36:31,560
need you need in some resources to

1043
00:36:31,560 --> 00:36:33,359
actually begin your denial of service

1044
00:36:33,359 --> 00:36:34,380
attack

1045
00:36:34,380 --> 00:36:35,820
all of those hosts like I talked about

1046
00:36:35,820 --> 00:36:37,619
previously are going to scan the

1047
00:36:37,619 --> 00:36:38,820
internet they're going to find some

1048
00:36:38,820 --> 00:36:40,859
public ethereum nodes to visit

1049
00:36:40,859 --> 00:36:42,420
and they're visiting them with the

1050
00:36:42,420 --> 00:36:44,400
intent to subscribe to that function in

1051
00:36:44,400 --> 00:36:46,920
that smart contract such that if someone

1052
00:36:46,920 --> 00:36:49,079
does you know place an order to denial

1053
00:36:49,079 --> 00:36:50,940
of service a website those Bots are

1054
00:36:50,940 --> 00:36:52,140
going to be able to pick up that order

1055
00:36:52,140 --> 00:36:55,020
because they subscribe to that function

1056
00:36:55,020 --> 00:36:56,460
next

1057
00:36:56,460 --> 00:36:58,200
um we're going to bring in the storage

1058
00:36:58,200 --> 00:37:01,560
and DNS layer where our threat actor is

1059
00:37:01,560 --> 00:37:03,480
going to deploy a website right so

1060
00:37:03,480 --> 00:37:05,339
they're going to deploy a website where

1061
00:37:05,339 --> 00:37:07,560
it's static where anyone can be able to

1062
00:37:07,560 --> 00:37:09,540
visit it using local infrastructure that

1063
00:37:09,540 --> 00:37:11,160
they're running themselves and they're

1064
00:37:11,160 --> 00:37:12,900
deploying this website to provide a

1065
00:37:12,900 --> 00:37:14,940
clean UI ux experience to make it easy

1066
00:37:14,940 --> 00:37:16,740
for their customers

1067
00:37:16,740 --> 00:37:18,660
and lastly they're going to buy that

1068
00:37:18,660 --> 00:37:20,520
handshake domain right so it gives them

1069
00:37:20,520 --> 00:37:22,020
a human readable domain that they're

1070
00:37:22,020 --> 00:37:25,260
able to advertise on you know their

1071
00:37:25,260 --> 00:37:27,260
um

1072
00:37:27,660 --> 00:37:29,460
malicious Forum or you know rest in

1073
00:37:29,460 --> 00:37:30,720
peace rate forums whatever Dark Net

1074
00:37:30,720 --> 00:37:32,400
Market Forum you want right so they're

1075
00:37:32,400 --> 00:37:33,420
going to be able to advertise their

1076
00:37:33,420 --> 00:37:35,520
website hey say no don't worry about it

1077
00:37:35,520 --> 00:37:37,380
go right here you're going to be able to

1078
00:37:37,380 --> 00:37:40,680
buy some denial of service services

1079
00:37:40,680 --> 00:37:42,119
now let's look at it from the buyer's

1080
00:37:42,119 --> 00:37:44,220
perspective right for them it's going to

1081
00:37:44,220 --> 00:37:46,440
be pretty easy right they're going to

1082
00:37:46,440 --> 00:37:48,660
connect to a Skynet site remember they

1083
00:37:48,660 --> 00:37:50,339
don't have to host any of they can

1084
00:37:50,339 --> 00:37:51,660
choose to host this infrastructure if

1085
00:37:51,660 --> 00:37:52,920
they want they don't have to trust the

1086
00:37:52,920 --> 00:37:54,900
site that they're visiting

1087
00:37:54,900 --> 00:37:57,000
um next the website is then going to

1088
00:37:57,000 --> 00:37:59,520
provide a clean UI ux experience for

1089
00:37:59,520 --> 00:38:01,500
them to create a transaction right they

1090
00:38:01,500 --> 00:38:03,240
don't need to be that technical all they

1091
00:38:03,240 --> 00:38:04,800
really need to do is know how to

1092
00:38:04,800 --> 00:38:07,560
download metamask and buy submit Theory

1093
00:38:07,560 --> 00:38:08,940
the website is going to help them create

1094
00:38:08,940 --> 00:38:10,619
a transaction and what's going to be in

1095
00:38:10,619 --> 00:38:13,680
that transaction is you know a fee to

1096
00:38:13,680 --> 00:38:15,240
pay for the service as well as the

1097
00:38:15,240 --> 00:38:17,820
domain that they would like to denial of

1098
00:38:17,820 --> 00:38:20,099
service once that transaction is

1099
00:38:20,099 --> 00:38:21,240
submitted

1100
00:38:21,240 --> 00:38:24,540
then that um the bot is going to get

1101
00:38:24,540 --> 00:38:26,400
that event right it's already subscribed

1102
00:38:26,400 --> 00:38:27,720
to that function it's like cool someone

1103
00:38:27,720 --> 00:38:29,099
just paid for a server so I'm ready to

1104
00:38:29,099 --> 00:38:30,540
go I'm ready to rock let me start

1105
00:38:30,540 --> 00:38:32,579
denialing of service that website and

1106
00:38:32,579 --> 00:38:34,020
you notice all of this was done without

1107
00:38:34,020 --> 00:38:36,000
any intermediaries right the contract

1108
00:38:36,000 --> 00:38:38,760
exists on that ethereum Network the um

1109
00:38:38,760 --> 00:38:40,140
the botmaster didn't have to approve

1110
00:38:40,140 --> 00:38:41,460
anything it doesn't take anything

1111
00:38:41,460 --> 00:38:43,859
there's no interactions or trusting

1112
00:38:43,859 --> 00:38:46,740
parties between these sellers right it

1113
00:38:46,740 --> 00:38:48,660
can be done in a way such that the buyer

1114
00:38:48,660 --> 00:38:50,579
of service may only pay for a very small

1115
00:38:50,579 --> 00:38:52,859
amount of

1116
00:38:52,859 --> 00:38:55,200
uh denial of service capacity to just

1117
00:38:55,200 --> 00:38:56,760
prove out that yeah in fact there is a

1118
00:38:56,760 --> 00:38:58,560
botnet behind this right they can scale

1119
00:38:58,560 --> 00:39:00,960
up or scale down depending on how much

1120
00:39:00,960 --> 00:39:03,300
they trust the service and slowly build

1121
00:39:03,300 --> 00:39:05,040
up trust with more payments and more

1122
00:39:05,040 --> 00:39:07,079
credibility within the smart contract

1123
00:39:07,079 --> 00:39:08,700
platform

1124
00:39:08,700 --> 00:39:09,839
so

1125
00:39:09,839 --> 00:39:11,099
um you've got a seller service which

1126
00:39:11,099 --> 00:39:12,300
essentially amounts to this smart

1127
00:39:12,300 --> 00:39:14,040
contract right smart contract is what's

1128
00:39:14,040 --> 00:39:15,480
doing the heavy lifting here and you

1129
00:39:15,480 --> 00:39:17,579
have the buyer of that service which is

1130
00:39:17,579 --> 00:39:19,500
essentially just going to have that uh

1131
00:39:19,500 --> 00:39:22,980
wallet now hopefully we'll see so as I

1132
00:39:22,980 --> 00:39:24,720
talked about before I bought clippy so

1133
00:39:24,720 --> 00:39:26,339
let's gonna see if we can demo this for

1134
00:39:26,339 --> 00:39:28,200
you there's a small chance this might

1135
00:39:28,200 --> 00:39:31,260
not work looks like uh it did not update

1136
00:39:31,260 --> 00:39:34,740
the h s portion because unfortunately

1137
00:39:34,740 --> 00:39:36,180
blockchains are slow and I was making

1138
00:39:36,180 --> 00:39:37,859
some edits before this talk but don't

1139
00:39:37,859 --> 00:39:40,079
worry we've got without the human

1140
00:39:40,079 --> 00:39:42,180
readable domain but still hosted on the

1141
00:39:42,180 --> 00:39:44,160
decentralized storage Network we have

1142
00:39:44,160 --> 00:39:47,400
our welcome to evil Corp this is a

1143
00:39:47,400 --> 00:39:49,460
functional trustless denial of service

1144
00:39:49,460 --> 00:39:52,260
e-commerce platform and what you're

1145
00:39:52,260 --> 00:39:53,640
going to do is you go down to here and

1146
00:39:53,640 --> 00:39:55,440
say okay well you know again I can host

1147
00:39:55,440 --> 00:39:56,880
this infrastructure myself and visit it

1148
00:39:56,880 --> 00:39:58,740
so how do we actually buy these Services

1149
00:39:58,740 --> 00:40:01,619
go ahead and install metamask you buy

1150
00:40:01,619 --> 00:40:03,720
some ethereum you know you pay the fee

1151
00:40:03,720 --> 00:40:05,940
and provide a domain to begin denial of

1152
00:40:05,940 --> 00:40:07,859
servicing and the Bots will take care of

1153
00:40:07,859 --> 00:40:10,440
the rest so go back up here we'll go

1154
00:40:10,440 --> 00:40:13,020
ahead and I'm going to act as the buyer

1155
00:40:13,020 --> 00:40:15,000
in this situation so I've got my

1156
00:40:15,000 --> 00:40:16,980
metamask wallet

1157
00:40:16,980 --> 00:40:19,380
and you'll see up here I have some test

1158
00:40:19,380 --> 00:40:20,640
net ether in here don't worry this is

1159
00:40:20,640 --> 00:40:22,740
unreal and I'm going ahead and just

1160
00:40:22,740 --> 00:40:25,079
click connect metamask and you're going

1161
00:40:25,079 --> 00:40:27,180
to have a pop-up saying yep I'd like to

1162
00:40:27,180 --> 00:40:28,619
connect to the site I'd like to begin to

1163
00:40:28,619 --> 00:40:31,260
send transactions to this site

1164
00:40:31,260 --> 00:40:32,819
so we hit next and we're going to

1165
00:40:32,819 --> 00:40:35,520
improve the connecting of our metamask

1166
00:40:35,520 --> 00:40:38,160
wallet to this specific website

1167
00:40:38,160 --> 00:40:40,440
I'm going to provide a domain to denial

1168
00:40:40,440 --> 00:40:42,480
of service so anyone from the crowd want

1169
00:40:42,480 --> 00:40:43,800
to shoot out some domains I'm not

1170
00:40:43,800 --> 00:40:46,200
actually analysis servicing anyone here

1171
00:40:46,200 --> 00:40:48,420
you got Google all right

1172
00:40:48,420 --> 00:40:51,240
so we have google.com

1173
00:40:51,240 --> 00:40:53,940
we're going to do is we're going to go

1174
00:40:53,940 --> 00:40:56,700
over to our implant right so this is

1175
00:40:56,700 --> 00:41:01,578
mocking our botnet here

1176
00:41:07,020 --> 00:41:08,640
so now our implant is running right this

1177
00:41:08,640 --> 00:41:10,680
this is a um you know this is our botnet

1178
00:41:10,680 --> 00:41:12,119
this is what's running out on the sphere

1179
00:41:12,119 --> 00:41:14,160
right independence of whatever the buyer

1180
00:41:14,160 --> 00:41:16,079
is going to be doing so let's pop back

1181
00:41:16,079 --> 00:41:18,599
over to our evil Corp site we have

1182
00:41:18,599 --> 00:41:19,740
Google so now we're going to click fire

1183
00:41:19,740 --> 00:41:22,020
away right I don't need to know anything

1184
00:41:22,020 --> 00:41:26,220
about what is essentially going to be

1185
00:41:26,220 --> 00:41:28,200
um happening as a transaction on the

1186
00:41:28,200 --> 00:41:30,379
back end

1187
00:41:31,200 --> 00:41:33,540
we have a little pop-up here that says

1188
00:41:33,540 --> 00:41:36,000
hey there's a transaction as you'll see

1189
00:41:36,000 --> 00:41:38,280
it's going to cost 0.1 ether this was

1190
00:41:38,280 --> 00:41:40,200
crafted for me by the JavaScript that

1191
00:41:40,200 --> 00:41:42,780
exists at this website and I can go down

1192
00:41:42,780 --> 00:41:45,599
and say yes I would like to confirm this

1193
00:41:45,599 --> 00:41:48,119
transaction and provide the that domain

1194
00:41:48,119 --> 00:41:51,119
to the service so you see down here I've

1195
00:41:51,119 --> 00:41:52,740
got it set so that we can see the

1196
00:41:52,740 --> 00:41:54,720
transaction hash and we can keep an eye

1197
00:41:54,720 --> 00:41:56,640
on this as it begins to make its way

1198
00:41:56,640 --> 00:41:58,740
through the ethereum network

1199
00:41:58,740 --> 00:42:01,020
so as I said one of the downsides of

1200
00:42:01,020 --> 00:42:03,480
blockchains is that they can be slow

1201
00:42:03,480 --> 00:42:04,859
um we expect that this will take maybe

1202
00:42:04,859 --> 00:42:08,280
15 to 30 seconds to actually propagate

1203
00:42:08,280 --> 00:42:10,560
through the ethereum test net to be

1204
00:42:10,560 --> 00:42:12,540
verified and put in and included into a

1205
00:42:12,540 --> 00:42:15,440
block by miners

1206
00:42:16,520 --> 00:42:20,339
and once this does go through

1207
00:42:20,339 --> 00:42:22,280
that function is going to emit an event

1208
00:42:22,280 --> 00:42:24,900
saying hey this is the domain that was

1209
00:42:24,900 --> 00:42:27,420
provided and then our bot our implant is

1210
00:42:27,420 --> 00:42:29,400
going to pick up that job

1211
00:42:29,400 --> 00:42:31,380
and start beginning to denial of service

1212
00:42:31,380 --> 00:42:34,380
in this case google.com

1213
00:42:34,380 --> 00:42:36,119
so I'm going to pause here while we're

1214
00:42:36,119 --> 00:42:37,619
waiting um is there any questions at

1215
00:42:37,619 --> 00:42:38,700
this point in time while we're waiting

1216
00:42:38,700 --> 00:42:41,899
for the blockchain to do its thing

1217
00:42:47,339 --> 00:42:48,960
unfortunately this is one of the things

1218
00:42:48,960 --> 00:42:51,720
you can't pay too much to speed up you

1219
00:42:51,720 --> 00:42:54,119
can increase the transaction fee uh

1220
00:42:54,119 --> 00:42:55,440
saying that essentially it's your Disney

1221
00:42:55,440 --> 00:42:56,760
fast pass you want to get to the front

1222
00:42:56,760 --> 00:42:58,200
of the line you spend a bit more money

1223
00:42:58,200 --> 00:43:00,480
in order to be included in the very next

1224
00:43:00,480 --> 00:43:01,380
block

1225
00:43:01,380 --> 00:43:05,099
but the um the Dynamics on the test net

1226
00:43:05,099 --> 00:43:06,780
aren't exactly the same as on the

1227
00:43:06,780 --> 00:43:08,460
mainnet um mainly because there's no

1228
00:43:08,460 --> 00:43:10,680
real Financial incentive to uh you know

1229
00:43:10,680 --> 00:43:12,660
be faster because essentially we're just

1230
00:43:12,660 --> 00:43:13,800
playing with fake money here you know

1231
00:43:13,800 --> 00:43:17,180
these are casino chips on the test net

1232
00:43:24,359 --> 00:43:26,720
worth

1233
00:43:34,800 --> 00:43:37,140
yeah so the question was uh so why

1234
00:43:37,140 --> 00:43:38,579
aren't uh you know threat actors just

1235
00:43:38,579 --> 00:43:40,260
using a test net instead of the mainnet

1236
00:43:40,260 --> 00:43:41,460
right it doesn't actually cost anything

1237
00:43:41,460 --> 00:43:44,220
and the problem is that if the threat

1238
00:43:44,220 --> 00:43:45,839
actor wants to get paid in some currency

1239
00:43:45,839 --> 00:43:48,000
that has real value they're going to

1240
00:43:48,000 --> 00:43:49,740
need to do it on a network that where

1241
00:43:49,740 --> 00:43:51,960
that value exists right so I can buy

1242
00:43:51,960 --> 00:43:53,520
some tetan SD but they can't actually

1243
00:43:53,520 --> 00:43:55,200
cast that in for anything at the end of

1244
00:43:55,200 --> 00:43:57,379
the day

1245
00:43:57,960 --> 00:43:59,819
and here we go so we've got a success so

1246
00:43:59,819 --> 00:44:02,099
if I pipe back over you'll see that my

1247
00:44:02,099 --> 00:44:04,619
my bot picked up that job that admitted

1248
00:44:04,619 --> 00:44:06,900
event that came for google.com and made

1249
00:44:06,900 --> 00:44:08,520
in this case it just made some DNS

1250
00:44:08,520 --> 00:44:10,260
queries to say okay

1251
00:44:10,260 --> 00:44:11,819
um you know what is your a record for

1252
00:44:11,819 --> 00:44:15,480
google.com if we pop back over to the

1253
00:44:15,480 --> 00:44:19,339
transaction itself uh and check the logs

1254
00:44:19,339 --> 00:44:21,420
this was the event that was actually

1255
00:44:21,420 --> 00:44:22,859
emitted right you can go to any public

1256
00:44:22,859 --> 00:44:24,480
blockchain Explorer and take a look at

1257
00:44:24,480 --> 00:44:26,760
this and we'll scroll down here sure

1258
00:44:26,760 --> 00:44:29,520
have my cookies love cookies we'll go to

1259
00:44:29,520 --> 00:44:32,099
this third hex value we'll convert it to

1260
00:44:32,099 --> 00:44:33,780
text and we'll see that okay this is

1261
00:44:33,780 --> 00:44:35,460
actually the google.com that that user

1262
00:44:35,460 --> 00:44:38,220
provided was is now existing on the

1263
00:44:38,220 --> 00:44:39,660
blockchain right that exists in the

1264
00:44:39,660 --> 00:44:41,819
state on the ethereum network that our

1265
00:44:41,819 --> 00:44:43,440
implant actually picked up and was able

1266
00:44:43,440 --> 00:44:46,040
to execute on

1267
00:44:49,920 --> 00:44:51,480
so

1268
00:44:51,480 --> 00:44:53,160
um that was kind of like you know one of

1269
00:44:53,160 --> 00:44:54,780
the things I thought of on how a threat

1270
00:44:54,780 --> 00:44:56,460
actor might begin to you know monetize

1271
00:44:56,460 --> 00:44:57,960
their botnet in a way that they don't

1272
00:44:57,960 --> 00:44:59,460
really need to trust anyone as a

1273
00:44:59,460 --> 00:45:01,020
reminder the whole that whole process

1274
00:45:01,020 --> 00:45:02,760
that we saw with having a human readable

1275
00:45:02,760 --> 00:45:05,880
domain being able to uh rely on a

1276
00:45:05,880 --> 00:45:08,160
decentralized storage Network me as a

1277
00:45:08,160 --> 00:45:09,660
buyer of that service I don't have to

1278
00:45:09,660 --> 00:45:11,880
trust any third party I can host all of

1279
00:45:11,880 --> 00:45:13,740
that infrastructure myself and access

1280
00:45:13,740 --> 00:45:16,560
that same content that we just saw here

1281
00:45:16,560 --> 00:45:18,359
um through blockchain infrastructure

1282
00:45:18,359 --> 00:45:20,220
right so virtually

1283
00:45:20,220 --> 00:45:21,720
um being able to be pseudo-anonymous and

1284
00:45:21,720 --> 00:45:22,740
doing so

1285
00:45:22,740 --> 00:45:24,300
and we start to look in the future it's

1286
00:45:24,300 --> 00:45:25,740
like okay uh this has been talked about

1287
00:45:25,740 --> 00:45:26,940
a little bit what happens about

1288
00:45:26,940 --> 00:45:29,160
automated ransomware payments right what

1289
00:45:29,160 --> 00:45:30,660
happens if

1290
00:45:30,660 --> 00:45:32,760
um a smart contract can be deployed in

1291
00:45:32,760 --> 00:45:35,760
such a way that you can provably

1292
00:45:35,760 --> 00:45:38,460
um receive a decryption key right so you

1293
00:45:38,460 --> 00:45:40,680
can use a Smart contract an operator can

1294
00:45:40,680 --> 00:45:42,599
trustlessly sell their victims a

1295
00:45:42,599 --> 00:45:44,819
decryption key for money a victim can

1296
00:45:44,819 --> 00:45:46,619
send some money to a Smart contract like

1297
00:45:46,619 --> 00:45:48,839
we just saw with a guarantee that they

1298
00:45:48,839 --> 00:45:51,240
will either receive the decryption key

1299
00:45:51,240 --> 00:45:53,280
to receive their data or get their money

1300
00:45:53,280 --> 00:45:55,079
back you know the victim does not have

1301
00:45:55,079 --> 00:45:56,520
to trust the person who hacked their

1302
00:45:56,520 --> 00:45:58,079
computer they're trusting the smart

1303
00:45:58,079 --> 00:46:01,020
contract the contract itself you can

1304
00:46:01,020 --> 00:46:03,420
verify it can be essentially what

1305
00:46:03,420 --> 00:46:05,339
amounts to open source but open source

1306
00:46:05,339 --> 00:46:08,160
in such a way to where you can guarantee

1307
00:46:08,160 --> 00:46:09,720
that what you're executing is what you

1308
00:46:09,720 --> 00:46:11,280
expect to execute

1309
00:46:11,280 --> 00:46:14,460
and um you can also trust that smart

1310
00:46:14,460 --> 00:46:17,040
contract will handle the exchange fairly

1311
00:46:17,040 --> 00:46:19,800
so an example of this you know when we

1312
00:46:19,800 --> 00:46:21,599
bring it back to like CTI the Conti

1313
00:46:21,599 --> 00:46:23,460
ransomware group was actually talking

1314
00:46:23,460 --> 00:46:25,079
about and looking into different

1315
00:46:25,079 --> 00:46:27,119
blockchain based platforms on how do

1316
00:46:27,119 --> 00:46:28,980
they start maximizing their their

1317
00:46:28,980 --> 00:46:31,140
returns they didn't talk about automated

1318
00:46:31,140 --> 00:46:33,119
ransomware specifically but it goes to

1319
00:46:33,119 --> 00:46:34,859
show that these adversary and ransomware

1320
00:46:34,859 --> 00:46:36,960
groups are beginning to explore what

1321
00:46:36,960 --> 00:46:38,700
blockchain technology has to offer for

1322
00:46:38,700 --> 00:46:40,560
them so that they can level up their

1323
00:46:40,560 --> 00:46:41,640
tradecraft

1324
00:46:41,640 --> 00:46:44,040
and this technology has been talked

1325
00:46:44,040 --> 00:46:46,560
about before it's not exactly new uh in

1326
00:46:46,560 --> 00:46:48,599
the kind of offensive blockchain space

1327
00:46:48,599 --> 00:46:50,520
to think about automated ransomware

1328
00:46:50,520 --> 00:46:52,740
payments uh there's a blog post by uh

1329
00:46:52,740 --> 00:46:54,660
Jeffrey Ladish that goes into you know

1330
00:46:54,660 --> 00:46:56,099
how a third actor might actually begin

1331
00:46:56,099 --> 00:46:57,839
to build this it doesn't reveal the

1332
00:46:57,839 --> 00:46:59,940
whole thing but uh rest assured that

1333
00:46:59,940 --> 00:47:02,099
technology exists today if someone was

1334
00:47:02,099 --> 00:47:03,960
officially motivated enough they could

1335
00:47:03,960 --> 00:47:06,359
create it and that kind of like begs the

1336
00:47:06,359 --> 00:47:08,400
question why haven't we seen ransomware

1337
00:47:08,400 --> 00:47:10,020
you know automated payments coming from

1338
00:47:10,020 --> 00:47:12,540
Smart contracts for ransomware and

1339
00:47:12,540 --> 00:47:13,980
really it's it's

1340
00:47:13,980 --> 00:47:16,920
um you know uh pretty simple if it's not

1341
00:47:16,920 --> 00:47:18,300
broke don't fix it you know these

1342
00:47:18,300 --> 00:47:20,520
ransomware gangs are taking in um

1343
00:47:20,520 --> 00:47:22,020
Millions tens of millions hundreds of

1344
00:47:22,020 --> 00:47:23,880
millions of dollars in some cases and

1345
00:47:23,880 --> 00:47:25,619
what they're doing is working they

1346
00:47:25,619 --> 00:47:26,940
already built out a whole bunch of

1347
00:47:26,940 --> 00:47:28,859
victim infrastructure uh to support

1348
00:47:28,859 --> 00:47:31,140
their ransomware activities they have

1349
00:47:31,140 --> 00:47:33,480
chat surfaces where you're going to uh

1350
00:47:33,480 --> 00:47:35,819
tour chat um or going to onion sites on

1351
00:47:35,819 --> 00:47:37,680
tour connecting to these chat rooms and

1352
00:47:37,680 --> 00:47:39,420
talking to their uh what amounts to

1353
00:47:39,420 --> 00:47:42,059
support reps directly they have uh

1354
00:47:42,059 --> 00:47:43,740
support phone lines that you can call

1355
00:47:43,740 --> 00:47:45,059
where you can actually talk to someone

1356
00:47:45,059 --> 00:47:46,680
and there's this very interesting

1357
00:47:46,680 --> 00:47:48,720
dynamic between relation the

1358
00:47:48,720 --> 00:47:50,160
relationship between ransomware

1359
00:47:50,160 --> 00:47:52,440
operators and ransomware negotiators

1360
00:47:52,440 --> 00:47:55,319
where The ransomware Negotiator it has

1361
00:47:55,319 --> 00:47:56,640
like effectively built a relationship

1362
00:47:56,640 --> 00:47:59,160
with the operator over time they know

1363
00:47:59,160 --> 00:48:02,520
like um and have essentially said okay

1364
00:48:02,520 --> 00:48:04,680
what we expect a certain payout to be

1365
00:48:04,680 --> 00:48:07,140
based on a company's level of Revenue so

1366
00:48:07,140 --> 00:48:09,059
there's an interesting Dynamic there

1367
00:48:09,059 --> 00:48:10,859
another reason why we haven't seen this

1368
00:48:10,859 --> 00:48:12,780
is likely because it's a very technical

1369
00:48:12,780 --> 00:48:15,420
Tech stack if you already um if anyone

1370
00:48:15,420 --> 00:48:16,619
has seen you know the way that some of

1371
00:48:16,619 --> 00:48:17,940
these ransomware

1372
00:48:17,940 --> 00:48:20,460
um uh gangs operate it's not exactly the

1373
00:48:20,460 --> 00:48:21,780
you know latest and greatest in terms of

1374
00:48:21,780 --> 00:48:24,240
ttps a lot of um you know copy pasting

1375
00:48:24,240 --> 00:48:25,859
Powershell commands

1376
00:48:25,859 --> 00:48:27,180
um not really understanding how to use

1377
00:48:27,180 --> 00:48:29,400
even like Cobalt trike effectively and

1378
00:48:29,400 --> 00:48:31,200
really just uh cobbling together what

1379
00:48:31,200 --> 00:48:33,000
they can to hopefully

1380
00:48:33,000 --> 00:48:34,920
um provest and laterally move their way

1381
00:48:34,920 --> 00:48:36,240
to the domain controller and push out

1382
00:48:36,240 --> 00:48:38,940
some random ransomware and attack stack

1383
00:48:38,940 --> 00:48:40,020
itself when we talk about smart

1384
00:48:40,020 --> 00:48:42,300
contracts is incredibly vulnerability

1385
00:48:42,300 --> 00:48:45,059
prone so it's seemingly every week every

1386
00:48:45,059 --> 00:48:47,040
two weeks there's another 100 million

1387
00:48:47,040 --> 00:48:49,260
dollar hack in some D5 platform why

1388
00:48:49,260 --> 00:48:50,579
would they want to expose themselves to

1389
00:48:50,579 --> 00:48:52,020
that risk if this isn't really their

1390
00:48:52,020 --> 00:48:54,599
subject matter area of expertise however

1391
00:48:54,599 --> 00:48:56,220
and this is the you know that verified

1392
00:48:56,220 --> 00:48:58,500
contract source code that I talked about

1393
00:48:58,500 --> 00:49:00,480
previously where you can essentially

1394
00:49:00,480 --> 00:49:02,579
verify that a contract is going to do

1395
00:49:02,579 --> 00:49:05,099
what you expect it to do such as reveal

1396
00:49:05,099 --> 00:49:07,079
a decryption key to you provided you

1397
00:49:07,079 --> 00:49:08,520
provide some payment

1398
00:49:08,520 --> 00:49:10,260
however I'll kind of like pose a

1399
00:49:10,260 --> 00:49:11,940
question to the room and for you guys to

1400
00:49:11,940 --> 00:49:12,960
think about

1401
00:49:12,960 --> 00:49:14,220
um you know when you go home after this

1402
00:49:14,220 --> 00:49:17,700
conference is How likely are you to pay

1403
00:49:17,700 --> 00:49:19,680
um to pay out to a verifiable contract

1404
00:49:19,680 --> 00:49:21,780
you know does it change the calculus in

1405
00:49:21,780 --> 00:49:22,980
terms of

1406
00:49:22,980 --> 00:49:24,480
um the likelihood of paying out to a

1407
00:49:24,480 --> 00:49:26,520
ransomware gang if you can provably

1408
00:49:26,520 --> 00:49:28,140
guarantee that you will get the

1409
00:49:28,140 --> 00:49:29,940
decryption key associated with your

1410
00:49:29,940 --> 00:49:31,800
encrypted files right you don't have to

1411
00:49:31,800 --> 00:49:33,480
trust them you're trusting a contract

1412
00:49:33,480 --> 00:49:36,359
what's the impact on ransomware and

1413
00:49:36,359 --> 00:49:38,460
cyber insurance companies if you can get

1414
00:49:38,460 --> 00:49:40,079
a guaranteed

1415
00:49:40,079 --> 00:49:42,420
um you know decryption key what do those

1416
00:49:42,420 --> 00:49:44,339
policies start to look like and where do

1417
00:49:44,339 --> 00:49:46,559
those relationships go

1418
00:49:46,559 --> 00:49:49,079
so lastly because we talked about you

1419
00:49:49,079 --> 00:49:52,079
know adversary tradecraft how threat

1420
00:49:52,079 --> 00:49:53,400
actors are likely to use this technology

1421
00:49:53,400 --> 00:49:54,839
in the future definitely want to include

1422
00:49:54,839 --> 00:49:56,700
some slides about defense and monitoring

1423
00:49:56,700 --> 00:49:59,339
so a network is only as strong as the

1424
00:49:59,339 --> 00:50:01,020
number of nodes and the consensus

1425
00:50:01,020 --> 00:50:03,420
mechanism I talked about previously So

1426
00:50:03,420 --> 00:50:05,940
currently as it exists the storage now

1427
00:50:05,940 --> 00:50:08,339
uh the decentralized storage layer and

1428
00:50:08,339 --> 00:50:10,319
Skynet are the weakest links there's

1429
00:50:10,319 --> 00:50:12,119
only a couple you know portals that I

1430
00:50:12,119 --> 00:50:13,559
talked about there which are the

1431
00:50:13,559 --> 00:50:16,140
equivalents of ipfs gateways and that

1432
00:50:16,140 --> 00:50:17,640
makes it such that you know if a

1433
00:50:17,640 --> 00:50:19,200
government entity wants to come in and

1434
00:50:19,200 --> 00:50:21,180
shut down one of these denial or service

1435
00:50:21,180 --> 00:50:23,400
platforms there's not that many targets

1436
00:50:23,400 --> 00:50:24,900
that they have to go visit right there's

1437
00:50:24,900 --> 00:50:26,280
a you know probably less than 20 of

1438
00:50:26,280 --> 00:50:27,960
these portals out there shouldn't be too

1439
00:50:27,960 --> 00:50:30,000
much work for uh one entity to take them

1440
00:50:30,000 --> 00:50:31,680
all down

1441
00:50:31,680 --> 00:50:34,099
and lastly or next we have

1442
00:50:34,099 --> 00:50:36,960
de-anonymization via existing blockchain

1443
00:50:36,960 --> 00:50:39,359
uh tracing Solutions such as ciphertrace

1444
00:50:39,359 --> 00:50:42,059
and chain analysis so the purpose of

1445
00:50:42,059 --> 00:50:45,359
these vendors and products is to attempt

1446
00:50:45,359 --> 00:50:46,500
to

1447
00:50:46,500 --> 00:50:48,599
cluster certain types of transactions

1448
00:50:48,599 --> 00:50:50,640
together right so they can bucket saying

1449
00:50:50,640 --> 00:50:52,200
okay this is a bunch of darknet Market

1450
00:50:52,200 --> 00:50:56,099
activity or a um this is a bucket of

1451
00:50:56,099 --> 00:50:57,839
exchange activity like this is like

1452
00:50:57,839 --> 00:51:00,119
coinbase addresses this is raid Forum

1453
00:51:00,119 --> 00:51:01,980
addresses you know this is a

1454
00:51:01,980 --> 00:51:04,020
decentralized exchange and the purpose

1455
00:51:04,020 --> 00:51:07,140
of this is to begin to map out all of

1456
00:51:07,140 --> 00:51:09,059
these pseudo-anonymous identities such

1457
00:51:09,059 --> 00:51:11,099
that if you're able to identify one of

1458
00:51:11,099 --> 00:51:12,720
those addresses belonging to an

1459
00:51:12,720 --> 00:51:14,460
individual you can then essentially work

1460
00:51:14,460 --> 00:51:16,380
your way backwards to say okay well this

1461
00:51:16,380 --> 00:51:19,680
individual also exchanged money at

1462
00:51:19,680 --> 00:51:21,540
binance in addition to coinbase that

1463
00:51:21,540 --> 00:51:22,800
gives you another Target that you can

1464
00:51:22,800 --> 00:51:24,119
subpoena to try and get more information

1465
00:51:24,119 --> 00:51:25,740
about what IP address they were coming

1466
00:51:25,740 --> 00:51:28,619
from hopefully trying to find a hole in

1467
00:51:28,619 --> 00:51:30,240
the opsec that they were carrying

1468
00:51:30,240 --> 00:51:32,460
themselves out the goal here for law

1469
00:51:32,460 --> 00:51:35,819
enforcement is to get to the operator in

1470
00:51:35,819 --> 00:51:37,260
most cases you're not going to be able

1471
00:51:37,260 --> 00:51:38,700
to fight with these uncensorable

1472
00:51:38,700 --> 00:51:41,700
Technologies themselves in the same way

1473
00:51:41,700 --> 00:51:43,500
that you know if you're dealing with an

1474
00:51:43,500 --> 00:51:45,839
encrypted file uh an easier way is to

1475
00:51:45,839 --> 00:51:47,280
try and get the private key and you get

1476
00:51:47,280 --> 00:51:48,839
the private Key by getting to the

1477
00:51:48,839 --> 00:51:51,180
operator

1478
00:51:51,180 --> 00:51:53,940
next we look at the implant component so

1479
00:51:53,940 --> 00:51:55,140
this is you're going to be your typical

1480
00:51:55,140 --> 00:51:57,420
endpoint monitoring so implants and

1481
00:51:57,420 --> 00:51:59,160
malware are going to have signatures for

1482
00:51:59,160 --> 00:52:00,599
scanning those public nodes I was

1483
00:52:00,599 --> 00:52:03,660
talking about previously when a host is

1484
00:52:03,660 --> 00:52:05,400
going out to trying to identify those

1485
00:52:05,400 --> 00:52:07,500
ethereum nodes or handshake nodes that's

1486
00:52:07,500 --> 00:52:09,119
something you can fingerprint on that's

1487
00:52:09,119 --> 00:52:10,380
something that you can prevent from

1488
00:52:10,380 --> 00:52:11,700
leaving your network

1489
00:52:11,700 --> 00:52:13,859
and those public nodes can also be

1490
00:52:13,859 --> 00:52:15,900
enumerated by you right so the malware

1491
00:52:15,900 --> 00:52:17,640
is doing it in this case but there are

1492
00:52:17,640 --> 00:52:19,319
Services out there

1493
00:52:19,319 --> 00:52:21,119
um such as you know showed an incensus

1494
00:52:21,119 --> 00:52:22,500
where you can keep tabs on how many

1495
00:52:22,500 --> 00:52:24,300
public ethereum nodes and what are the

1496
00:52:24,300 --> 00:52:26,099
IP addresses of those ethereum nodes

1497
00:52:26,099 --> 00:52:28,380
such that you can block them in Neo real

1498
00:52:28,380 --> 00:52:30,720
time on your own networks as soon as

1499
00:52:30,720 --> 00:52:33,180
they come up and this the last bullet

1500
00:52:33,180 --> 00:52:35,339
point here is mainly for decentralized

1501
00:52:35,339 --> 00:52:38,819
DNS any non-icand supported TLD should

1502
00:52:38,819 --> 00:52:40,559
just be blocked outright you know if you

1503
00:52:40,559 --> 00:52:43,319
see a host going to just clippy and not

1504
00:52:43,319 --> 00:52:45,240
like.com uh that should be a pretty

1505
00:52:45,240 --> 00:52:47,700
pretty big red flag

1506
00:52:47,700 --> 00:52:49,559
and lastly you know rounding out uh

1507
00:52:49,559 --> 00:52:51,000
blackfy's hiring

1508
00:52:51,000 --> 00:52:52,200
um these are some of your open positions

1509
00:52:52,200 --> 00:52:53,579
I'm going to be around you know in the

1510
00:52:53,579 --> 00:52:55,260
back here if you're interested in doing

1511
00:52:55,260 --> 00:52:57,540
some of this stuff uh

1512
00:52:57,540 --> 00:52:59,099
essentially a lot of this uh that you

1513
00:52:59,099 --> 00:53:00,599
saw today was me working on my free time

1514
00:53:00,599 --> 00:53:02,579
but the more um that there's going to be

1515
00:53:02,579 --> 00:53:04,800
adversary activity happening uh the more

1516
00:53:04,800 --> 00:53:05,819
you're going to see some of these

1517
00:53:05,819 --> 00:53:08,520
blockchain companies uh want to get on

1518
00:53:08,520 --> 00:53:10,440
chain monitor for this activity and

1519
00:53:10,440 --> 00:53:12,480
start fingerprinting you know what

1520
00:53:12,480 --> 00:53:14,780
exactly does an ethereum smart contract

1521
00:53:14,780 --> 00:53:17,160
command and control look like right can

1522
00:53:17,160 --> 00:53:18,480
we go back through the history of

1523
00:53:18,480 --> 00:53:20,220
ethereum and see have any of these

1524
00:53:20,220 --> 00:53:22,020
contracts already been deployed if we

1525
00:53:22,020 --> 00:53:23,579
have a general sense about how they look

1526
00:53:23,579 --> 00:53:25,260
on the blockchain

1527
00:53:25,260 --> 00:53:27,540
and with that we've got seven minutes

1528
00:53:27,540 --> 00:53:30,059
left here um Noah fire host a lot

1529
00:53:30,059 --> 00:53:33,140
um jump into some q a

1530
00:53:37,260 --> 00:53:40,220
so I end in the back

1531
00:53:57,059 --> 00:53:59,880
yeah so I would say in terms of um and

1532
00:53:59,880 --> 00:54:01,740
so the question was

1533
00:54:01,740 --> 00:54:05,160
um are are what other uh nation states

1534
00:54:05,160 --> 00:54:06,300
and what types of nation today's

1535
00:54:06,300 --> 00:54:07,680
activities are actually using this

1536
00:54:07,680 --> 00:54:09,420
blockchain technology

1537
00:54:09,420 --> 00:54:10,740
um I would say it's still very new for

1538
00:54:10,740 --> 00:54:12,599
them to use the core you know blockchain

1539
00:54:12,599 --> 00:54:14,400
infrastructure itself

1540
00:54:14,400 --> 00:54:16,200
um it's very common for you mentioned

1541
00:54:16,200 --> 00:54:17,400
North Korea

1542
00:54:17,400 --> 00:54:19,140
um as one you know grouping of activity

1543
00:54:19,140 --> 00:54:21,480
to Target these exchanges another one is

1544
00:54:21,480 --> 00:54:23,520
Russia right now because of the Russian

1545
00:54:23,520 --> 00:54:25,980
Ukraine conflict we saw their activity

1546
00:54:25,980 --> 00:54:28,020
uh die down drastically mainly because

1547
00:54:28,020 --> 00:54:29,640
they're diverting their resources to

1548
00:54:29,640 --> 00:54:31,140
that conflict

1549
00:54:31,140 --> 00:54:33,059
um but you know in the same way you know

1550
00:54:33,059 --> 00:54:34,440
why do they want this cryptocurrency

1551
00:54:34,440 --> 00:54:36,359
they their goal is to get as much

1552
00:54:36,359 --> 00:54:37,980
cryptocurrency as possible to help them

1553
00:54:37,980 --> 00:54:39,720
avoid sanctions right if they can

1554
00:54:39,720 --> 00:54:41,099
purchase

1555
00:54:41,099 --> 00:54:42,960
um you know goods and services that they

1556
00:54:42,960 --> 00:54:44,339
need in the cryptocurrency of their

1557
00:54:44,339 --> 00:54:46,799
choice that's um in some instances not

1558
00:54:46,799 --> 00:54:50,160
all instances harder to trace in terms

1559
00:54:50,160 --> 00:54:52,200
of sanctions

1560
00:54:52,200 --> 00:54:55,339
so you have a question sir

1561
00:55:01,780 --> 00:55:04,839
[Music]

1562
00:55:05,520 --> 00:55:07,740
yeah so uh question is

1563
00:55:07,740 --> 00:55:09,420
um Can smart track contracts effectively

1564
00:55:09,420 --> 00:55:11,940
like be removed and essentially if you

1565
00:55:11,940 --> 00:55:13,319
own the contract there is a

1566
00:55:13,319 --> 00:55:15,359
self-destruct function you can call such

1567
00:55:15,359 --> 00:55:16,380
that

1568
00:55:16,380 --> 00:55:18,960
um no or any transactions that go to

1569
00:55:18,960 --> 00:55:20,579
that smart contract are going to be null

1570
00:55:20,579 --> 00:55:22,559
and void but that contract still exists

1571
00:55:22,559 --> 00:55:24,119
you can't actually like remove the

1572
00:55:24,119 --> 00:55:26,099
contract itself from the blockchain it's

1573
00:55:26,099 --> 00:55:27,900
already has that written record there

1574
00:55:27,900 --> 00:55:30,599
what you'll see is some fancy

1575
00:55:30,599 --> 00:55:32,400
um you know D5 developers what they tend

1576
00:55:32,400 --> 00:55:34,500
to do is they'll build in a like

1577
00:55:34,500 --> 00:55:36,480
migration function so if they want to

1578
00:55:36,480 --> 00:55:38,040
upgrade whatever decentralized protocol

1579
00:55:38,040 --> 00:55:39,780
that they've built in a smart contract

1580
00:55:39,780 --> 00:55:41,280
they'll create a function that

1581
00:55:41,280 --> 00:55:43,079
essentially is a pointer record to a new

1582
00:55:43,079 --> 00:55:45,119
contract at a later point in time so

1583
00:55:45,119 --> 00:55:46,619
when I talk about you know blockchains

1584
00:55:46,619 --> 00:55:49,380
being append only if you want to you

1585
00:55:49,380 --> 00:55:50,940
know stop using an old smart contract

1586
00:55:50,940 --> 00:55:53,040
you essentially by doing so just need to

1587
00:55:53,040 --> 00:55:54,900
point to a new one but you can't you

1588
00:55:54,900 --> 00:55:56,660
can't just flat out like remove that

1589
00:55:56,660 --> 00:55:58,859
existing smart contract that was already

1590
00:55:58,859 --> 00:56:00,359
deploy it

1591
00:56:00,359 --> 00:56:03,558
in the back

1592
00:56:30,119 --> 00:56:32,940
another observation is amazing related

1593
00:56:32,940 --> 00:56:35,720
to the numbers

1594
00:56:37,640 --> 00:56:40,740
exfiltration so you decrypt your data

1595
00:56:40,740 --> 00:56:42,059
but then they hold your data and then

1596
00:56:42,059 --> 00:56:45,859
they come back and they'll pay us more

1597
00:56:48,059 --> 00:56:51,260
but then export you again

1598
00:56:51,900 --> 00:56:53,760
yeah it's definitely not going to stop

1599
00:56:53,760 --> 00:56:55,740
like that double extortion problem I

1600
00:56:55,740 --> 00:56:58,319
think in terms of like not um you know

1601
00:56:58,319 --> 00:57:00,900
giving all of your keys back to you I

1602
00:57:00,900 --> 00:57:03,599
think some ways and again the the

1603
00:57:03,599 --> 00:57:05,900
ransomware operator in this instance is

1604
00:57:05,900 --> 00:57:08,700
incentivized to make as much money as

1605
00:57:08,700 --> 00:57:10,799
possible and so a scheme that they might

1606
00:57:10,799 --> 00:57:13,799
end up using is for every individual

1607
00:57:13,799 --> 00:57:16,859
file they might have a unique decryption

1608
00:57:16,859 --> 00:57:19,799
key for that specific file and for every

1609
00:57:19,799 --> 00:57:22,500
file that has that key you can

1610
00:57:22,500 --> 00:57:24,299
essentially submit that individual key

1611
00:57:24,299 --> 00:57:26,819
to that smart contract so over time you

1612
00:57:26,819 --> 00:57:29,280
know you can verifiably decrypt all of

1613
00:57:29,280 --> 00:57:31,079
the files that have been exfiltrated so

1614
00:57:31,079 --> 00:57:32,579
again their goal is to get as much

1615
00:57:32,579 --> 00:57:34,200
margin on this as possible

1616
00:57:34,200 --> 00:57:36,439
foreign

1617
00:57:56,880 --> 00:58:00,200
contract would be able to

1618
00:58:00,299 --> 00:58:02,760
be able to store sort money or

1619
00:58:02,760 --> 00:58:05,960
the more kind of like in the front of

1620
00:58:06,119 --> 00:58:08,660
the cyber

1621
00:58:09,059 --> 00:58:10,859
he's gonna

1622
00:58:10,859 --> 00:58:12,960
so are you talking about when you say uh

1623
00:58:12,960 --> 00:58:14,940
pre-mint are you talking about

1624
00:58:14,940 --> 00:58:16,980
um folks who are deploying uh smart

1625
00:58:16,980 --> 00:58:18,720
contracts with known vulnerabilities in

1626
00:58:18,720 --> 00:58:20,520
them to like exploit at a later point in

1627
00:58:20,520 --> 00:58:24,720
time or yeah

1628
00:58:32,579 --> 00:58:35,040
interesting

1629
00:58:35,040 --> 00:58:36,480
no I haven't heard about that

1630
00:58:36,480 --> 00:58:37,680
specifically

1631
00:58:37,680 --> 00:58:39,480
um but one of the interesting in terms

1632
00:58:39,480 --> 00:58:43,260
of uh just very quickly on uh nfts and

1633
00:58:43,260 --> 00:58:45,599
hacks around them openc had a

1634
00:58:45,599 --> 00:58:47,640
vulnerability where essentially being

1635
00:58:47,640 --> 00:58:50,520
able to inject some JavaScript code to

1636
00:58:50,520 --> 00:58:51,839
create you know when I bring up my

1637
00:58:51,839 --> 00:58:54,839
metamask wallet create a transaction for

1638
00:58:54,839 --> 00:58:56,700
you that will automatically be approved

1639
00:58:56,700 --> 00:58:58,980
and send your nft from one user to

1640
00:58:58,980 --> 00:59:00,480
another so that's another way that

1641
00:59:00,480 --> 00:59:02,640
adversaries are trying to get some uh

1642
00:59:02,640 --> 00:59:05,339
you know in this case nfts siphoned out

1643
00:59:05,339 --> 00:59:07,940
of their accounts

1644
00:59:14,700 --> 00:59:16,559
all right I think we can uh wrap up a

1645
00:59:16,559 --> 00:59:17,640
little early thank you all for coming

1646
00:59:17,640 --> 00:59:21,078
and uh enjoy the rest of your weekend

