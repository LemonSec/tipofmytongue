1
00:00:04,400 --> 00:00:07,200
hi everyone and welcome to my talk about

2
00:00:07,200 --> 00:00:09,360
using osmo tucker for recon and

3
00:00:09,360 --> 00:00:11,360
vulnerability scanning

4
00:00:11,360 --> 00:00:13,280
my name is sam stepanyan you can find me

5
00:00:13,280 --> 00:00:16,079
on twitter at securestep9

6
00:00:16,079 --> 00:00:18,000
i'm an owasp london chapter leader and

7
00:00:18,000 --> 00:00:20,000
i'm also always the tarka project

8
00:00:20,000 --> 00:00:21,279
co-leader

9
00:00:21,279 --> 00:00:24,080
a little bit more about me um i come

10
00:00:24,080 --> 00:00:26,160
from a software development background

11
00:00:26,160 --> 00:00:28,560
i'm an ex-developer myself so currently

12
00:00:28,560 --> 00:00:30,480
i'm working as an application security

13
00:00:30,480 --> 00:00:32,719
consultant in financial services in the

14
00:00:32,719 --> 00:00:34,960
city of london so if you look at my

15
00:00:34,960 --> 00:00:37,920
profile all in all i am a defender so

16
00:00:37,920 --> 00:00:40,000
why am i presenting a talk which

17
00:00:40,000 --> 00:00:41,200
consists

18
00:00:41,200 --> 00:00:43,520
of words network and attacker there's a

19
00:00:43,520 --> 00:00:45,680
tool called that tucker network attacker

20
00:00:45,680 --> 00:00:47,520
so i have a bit of a story to tell about

21
00:00:47,520 --> 00:00:49,280
this first of all

22
00:00:49,280 --> 00:00:52,800
i tried the attacker myself in 2017. i

23
00:00:52,800 --> 00:00:54,399
saw a new project appearing in the list

24
00:00:54,399 --> 00:00:56,399
of oba's projects i'm like okay let me

25
00:00:56,399 --> 00:00:58,480
try and run this thing i didn't

26
00:00:58,480 --> 00:01:00,399
understand anything because it just

27
00:01:00,399 --> 00:01:01,920
spits out a whole bunch of options it's

28
00:01:01,920 --> 00:01:03,760
like what the hell is all this stuff i'm

29
00:01:03,760 --> 00:01:06,159
not gonna go through it so and i forgot

30
00:01:06,159 --> 00:01:09,680
about it but then i realized uh that i

31
00:01:09,680 --> 00:01:10,880
had to

32
00:01:10,880 --> 00:01:13,200
look at this project again because uh dr

33
00:01:13,200 --> 00:01:16,000
greg fraccos and i were asked to

34
00:01:16,000 --> 00:01:17,759
demonstrate this tool at black hat

35
00:01:17,759 --> 00:01:21,119
europe 2018 in london and the thing is

36
00:01:21,119 --> 00:01:22,640
that the original and attacker project

37
00:01:22,640 --> 00:01:24,799
leaders could not make it to london in

38
00:01:24,799 --> 00:01:26,799
time so as you know we have black hat

39
00:01:26,799 --> 00:01:28,720
europe conference in december each year

40
00:01:28,720 --> 00:01:31,360
in london so i'm like okay yeah guys i'm

41
00:01:31,360 --> 00:01:33,040
we're gonna help you out but greg and i

42
00:01:33,040 --> 00:01:35,119
had zero clue about what the hell is

43
00:01:35,119 --> 00:01:36,479
this tool right

44
00:01:36,479 --> 00:01:38,400
it's like we had to learn it overnight

45
00:01:38,400 --> 00:01:40,880
on a zoom call and then i said okay we

46
00:01:40,880 --> 00:01:42,640
love this still let's go and present it

47
00:01:42,640 --> 00:01:44,560
and talk about this and then this

48
00:01:44,560 --> 00:01:47,119
happened we had a huge crowd of

49
00:01:47,119 --> 00:01:49,360
fantastic security researchers coming to

50
00:01:49,360 --> 00:01:51,840
the stand to actually see what the hell

51
00:01:51,840 --> 00:01:53,520
is this still doing

52
00:01:53,520 --> 00:01:55,360
and we said okay people love this tool i

53
00:01:55,360 --> 00:01:57,920
became a project co-leader uh let's try

54
00:01:57,920 --> 00:02:01,280
the year after and then 2019 even bigger

55
00:02:01,280 --> 00:02:03,280
crowd of people gather and say oh my god

56
00:02:03,280 --> 00:02:05,680
there is a free scanner from owasp

57
00:02:05,680 --> 00:02:08,000
we want to see what that is so yes so

58
00:02:08,000 --> 00:02:10,639
what is ova's attacker and why is it

59
00:02:10,639 --> 00:02:11,920
attracting

60
00:02:11,920 --> 00:02:13,920
large crowds of people who do pen

61
00:02:13,920 --> 00:02:16,239
testing bug bounty hunting and just

62
00:02:16,239 --> 00:02:18,319
people from organizations who want to

63
00:02:18,319 --> 00:02:20,319
find out what kind of

64
00:02:20,319 --> 00:02:22,640
things uh what kind of vulnerabilities

65
00:02:22,640 --> 00:02:23,920
exist and what kind of things they can

66
00:02:23,920 --> 00:02:25,680
scan inside their network so first of

67
00:02:25,680 --> 00:02:28,000
all os netarker is an open source

68
00:02:28,000 --> 00:02:30,560
software tool and it is absolutely free

69
00:02:30,560 --> 00:02:33,200
comes from oasp and it is built to

70
00:02:33,200 --> 00:02:35,440
assist with uh pen testing and

71
00:02:35,440 --> 00:02:38,560
automating information gathering and

72
00:02:38,560 --> 00:02:40,400
recontacts so uh

73
00:02:40,400 --> 00:02:42,640
it can do vulnerability scanning it can

74
00:02:42,640 --> 00:02:44,560
do information gathering it can do port

75
00:02:44,560 --> 00:02:47,760
scan and i'm gonna live demo today i'm

76
00:02:47,760 --> 00:02:50,080
gonna pray to the live demo gods that

77
00:02:50,080 --> 00:02:52,959
it's all gonna work fine um another

78
00:02:52,959 --> 00:02:54,239
important thing about the attacker is

79
00:02:54,239 --> 00:02:55,920
that it's written in python and because

80
00:02:55,920 --> 00:02:57,920
it's in python you can really run it on

81
00:02:57,920 --> 00:02:59,840
anything which runs python

82
00:02:59,840 --> 00:03:01,920
so dr greg frankus actually managed to

83
00:03:01,920 --> 00:03:04,879
run it on raspberry pi and

84
00:03:04,879 --> 00:03:08,159
he said sam it's working us okay great

85
00:03:08,159 --> 00:03:09,519
i'm not really a raspberry pi and

86
00:03:09,519 --> 00:03:11,760
suggest myself another very interesting

87
00:03:11,760 --> 00:03:13,920
thing about the netake for those of you

88
00:03:13,920 --> 00:03:15,920
who are students in the audience or you

89
00:03:15,920 --> 00:03:16,800
have

90
00:03:16,800 --> 00:03:19,040
friends children

91
00:03:19,040 --> 00:03:21,200
nephews nieces who are students there is

92
00:03:21,200 --> 00:03:23,599
a program called google summer of code

93
00:03:23,599 --> 00:03:26,560
and that is an initiative by google it's

94
00:03:26,560 --> 00:03:28,480
a paid internship which happens every

95
00:03:28,480 --> 00:03:31,200
year and basically what students do they

96
00:03:31,200 --> 00:03:34,640
apply to um enhance or improve an open

97
00:03:34,640 --> 00:03:36,319
source project

98
00:03:36,319 --> 00:03:38,159
which participates in google summer of

99
00:03:38,159 --> 00:03:40,799
code and then students work on that open

100
00:03:40,799 --> 00:03:43,360
source project during the summer break

101
00:03:43,360 --> 00:03:45,840
and they are supported by mentors and

102
00:03:45,840 --> 00:03:48,080
owas participates in google summer of

103
00:03:48,080 --> 00:03:50,239
code every single year there are various

104
00:03:50,239 --> 00:03:51,360
projects sometimes so what's the

105
00:03:51,360 --> 00:03:53,280
attacker is that but they'll it's not

106
00:03:53,280 --> 00:03:54,879
just of us there are lots of other open

107
00:03:54,879 --> 00:03:56,879
source organizations but we're very

108
00:03:56,879 --> 00:03:58,239
happy because we see this is a tool

109
00:03:58,239 --> 00:04:00,560
which has been written and in house by

110
00:04:00,560 --> 00:04:02,319
students so which makes it even more

111
00:04:02,319 --> 00:04:04,799
interesting so you can think of oasd

112
00:04:04,799 --> 00:04:07,519
attacker as a swiss army knife kind of

113
00:04:07,519 --> 00:04:09,599
tool so just like a swiss army knife

114
00:04:09,599 --> 00:04:12,159
it's a tool consisting of many tools

115
00:04:12,159 --> 00:04:14,000
which are not necessarily compatible

116
00:04:14,000 --> 00:04:16,639
with each other but can they all be used

117
00:04:16,639 --> 00:04:18,079
together

118
00:04:18,079 --> 00:04:19,600
so um

119
00:04:19,600 --> 00:04:22,400
just like a swiss army knife netaka is a

120
00:04:22,400 --> 00:04:24,240
collection of tools it has a modular

121
00:04:24,240 --> 00:04:26,560
structure it's easy to create your own

122
00:04:26,560 --> 00:04:28,160
modules

123
00:04:28,160 --> 00:04:30,320
previously we used python for modules

124
00:04:30,320 --> 00:04:32,320
now we use yaml which makes it even

125
00:04:32,320 --> 00:04:34,240
easier it's a fast performing tool which

126
00:04:34,240 --> 00:04:36,960
is using multi-threading model in

127
00:04:36,960 --> 00:04:39,199
attacker to spin up multiple threads so

128
00:04:39,199 --> 00:04:41,440
you can actually control the speed of

129
00:04:41,440 --> 00:04:43,120
scanning for people doing for example

130
00:04:43,120 --> 00:04:45,440
bug bounty or just people scanning their

131
00:04:45,440 --> 00:04:47,600
network it might be quite important

132
00:04:47,600 --> 00:04:49,840
how

133
00:04:50,160 --> 00:04:52,560
how hard they hit the network with

134
00:04:52,560 --> 00:04:54,560
scanning traffic it has something called

135
00:04:54,560 --> 00:04:55,919
customizable profiles which are

136
00:04:55,919 --> 00:04:57,919
basically bundle of modules focused on a

137
00:04:57,919 --> 00:04:59,280
specific task

138
00:04:59,280 --> 00:05:01,680
and most importantly you can automate it

139
00:05:01,680 --> 00:05:03,360
and run it from command line that's the

140
00:05:03,360 --> 00:05:04,639
greatest thing you can just create a

141
00:05:04,639 --> 00:05:05,840
command line

142
00:05:05,840 --> 00:05:08,400
press enter it's running and it's

143
00:05:08,400 --> 00:05:11,120
scanning the network so a few other bits

144
00:05:11,120 --> 00:05:13,039
about the attacker it is not officially

145
00:05:13,039 --> 00:05:15,759
released yet it is not a

146
00:05:15,759 --> 00:05:17,759
production ready tool really it's not

147
00:05:17,759 --> 00:05:21,120
even beta current versions version 003

148
00:05:21,120 --> 00:05:23,039
but i'm going to talk about version 02

149
00:05:23,039 --> 00:05:24,400
today

150
00:05:24,400 --> 00:05:25,520
we are always looking for more

151
00:05:25,520 --> 00:05:27,199
contributors so if you know python

152
00:05:27,199 --> 00:05:29,039
please do join us i will have a slide

153
00:05:29,039 --> 00:05:30,320
about

154
00:05:30,320 --> 00:05:32,160
developers and how to contribute a bit

155
00:05:32,160 --> 00:05:33,039
later

156
00:05:33,039 --> 00:05:35,520
so an attacker however has command line

157
00:05:35,520 --> 00:05:38,880
interface it has a web ui it has an api

158
00:05:38,880 --> 00:05:41,039
so you can query it using an api it has

159
00:05:41,039 --> 00:05:43,280
a report generator and it also has

160
00:05:43,280 --> 00:05:45,759
multigo transforms those are using linux

161
00:05:45,759 --> 00:05:47,840
and use multigo tool uh there are

162
00:05:47,840 --> 00:05:50,160
transforms available it has over 70

163
00:05:50,160 --> 00:05:52,639
modules at the moment where do you find

164
00:05:52,639 --> 00:05:55,440
this tool you can find it at os.org

165
00:05:55,440 --> 00:05:58,880
project attacker and it is also on

166
00:05:58,880 --> 00:06:02,240
github and if you go on github

167
00:06:02,240 --> 00:06:04,560
please click on the wiki button

168
00:06:04,560 --> 00:06:06,240
because that's where all the

169
00:06:06,240 --> 00:06:07,520
installation instructions are that's

170
00:06:07,520 --> 00:06:09,120
where all the documentation is we use

171
00:06:09,120 --> 00:06:12,160
the uh wiki indeed tab for documentation

172
00:06:12,160 --> 00:06:13,280
purposes

173
00:06:13,280 --> 00:06:15,360
i'm not gonna demo how to install an

174
00:06:15,360 --> 00:06:17,440
attacker uh here

175
00:06:17,440 --> 00:06:18,720
but i will

176
00:06:18,720 --> 00:06:20,479
actually have a video recorded and i

177
00:06:20,479 --> 00:06:22,160
will point you towards that video a bit

178
00:06:22,160 --> 00:06:23,120
later

179
00:06:23,120 --> 00:06:25,120
so um for you to understand the

180
00:06:25,120 --> 00:06:27,039
difference between attacker and other

181
00:06:27,039 --> 00:06:29,919
scanners you probably heard of or

182
00:06:29,919 --> 00:06:31,759
you are actually using tools such as

183
00:06:31,759 --> 00:06:34,639
burp suite or wasps up so the difference

184
00:06:34,639 --> 00:06:36,880
is that the scanners such as burp suite

185
00:06:36,880 --> 00:06:40,000
or wasps up they scan one website for

186
00:06:40,000 --> 00:06:42,560
many web applications of vulnerabilities

187
00:06:42,560 --> 00:06:45,039
whatever the scanner is able to find

188
00:06:45,039 --> 00:06:47,360
right so for example purple crawl one

189
00:06:47,360 --> 00:06:49,599
website to discover all urls all

190
00:06:49,599 --> 00:06:52,240
parameters all forms so we'll click on

191
00:06:52,240 --> 00:06:54,800
all the buttons right um

192
00:06:54,800 --> 00:06:57,599
that's not what netaca does netaka scans

193
00:06:57,599 --> 00:07:00,720
one or many and that can be hundreds or

194
00:07:00,720 --> 00:07:02,880
thousands of ip addresses

195
00:07:02,880 --> 00:07:06,479
networks or sub domains for open ports

196
00:07:06,479 --> 00:07:10,160
and one or more specific vulnerabilities

197
00:07:10,160 --> 00:07:12,160
listed by the user and you can also

198
00:07:12,160 --> 00:07:14,000
bundle that in modules which means you

199
00:07:14,000 --> 00:07:16,319
can basically say okay i'm interested in

200
00:07:16,319 --> 00:07:18,000
this this and this and this bundle it in

201
00:07:18,000 --> 00:07:20,000
the module and basically

202
00:07:20,000 --> 00:07:22,400
pull out several modules at once in one

203
00:07:22,400 --> 00:07:24,560
profile from out of your swiss army

204
00:07:24,560 --> 00:07:27,039
knife and then say okay go and scan it

205
00:07:27,039 --> 00:07:29,199
so that is the major difference because

206
00:07:29,199 --> 00:07:31,919
it's a tool for those attacking networks

207
00:07:31,919 --> 00:07:33,840
that's why that's why it's called osmond

208
00:07:33,840 --> 00:07:36,960
attacker so you can download and install

209
00:07:36,960 --> 00:07:39,039
an attacker from github i'm going to use

210
00:07:39,039 --> 00:07:41,440
version 001 today in my demo because the

211
00:07:41,440 --> 00:07:43,199
latest version still has a couple of

212
00:07:43,199 --> 00:07:46,720
issues however it has great new features

213
00:07:46,720 --> 00:07:47,840
um

214
00:07:47,840 --> 00:07:49,360
if you're going to install it yourself

215
00:07:49,360 --> 00:07:51,039
always read the manual because in the

216
00:07:51,039 --> 00:07:52,879
wiki we actually list all the

217
00:07:52,879 --> 00:07:56,240
dependencies that you need and

218
00:07:56,240 --> 00:07:58,080
you would typically just do a git clone

219
00:07:58,080 --> 00:08:00,639
from github and then use pip install to

220
00:08:00,639 --> 00:08:03,280
install it because it is a python tool

221
00:08:03,280 --> 00:08:05,360
um those of you interested in installing

222
00:08:05,360 --> 00:08:07,199
it in kali linux because i will be using

223
00:08:07,199 --> 00:08:09,599
kali linux today for live demo there's a

224
00:08:09,599 --> 00:08:11,440
video that i recorded some time ago

225
00:08:11,440 --> 00:08:13,520
where you can actually watch step by

226
00:08:13,520 --> 00:08:15,599
step what is needed to install this tool

227
00:08:15,599 --> 00:08:17,520
in your kali linux

228
00:08:17,520 --> 00:08:18,560
however

229
00:08:18,560 --> 00:08:20,960
if you are using a distribution of

230
00:08:20,960 --> 00:08:23,680
called black arch linux i was very

231
00:08:23,680 --> 00:08:25,280
pleased to find out that these guys

232
00:08:25,280 --> 00:08:27,199
actually included obasan attacker in

233
00:08:27,199 --> 00:08:29,039
their release and

234
00:08:29,039 --> 00:08:31,120
it is actually there and you can see

235
00:08:31,120 --> 00:08:33,679
version zero zero two it's a part of the

236
00:08:33,679 --> 00:08:35,679
black arch automation

237
00:08:35,679 --> 00:08:38,320
uh toolkit so if you install that you

238
00:08:38,320 --> 00:08:41,360
will see the tucker inside black arch

239
00:08:41,360 --> 00:08:44,959
linux you can also run it in docker um

240
00:08:44,959 --> 00:08:47,040
there's no official osb image yet we

241
00:08:47,040 --> 00:08:50,240
have an owasp docker hub account

242
00:08:50,240 --> 00:08:52,080
there is no an attacker there however

243
00:08:52,080 --> 00:08:54,560
you can just use docker compose to spin

244
00:08:54,560 --> 00:08:55,600
up your own

245
00:08:55,600 --> 00:08:57,440
and i will be showing docker to you

246
00:08:57,440 --> 00:09:00,640
today as well so before i go any further

247
00:09:00,640 --> 00:09:02,880
i have to give you responsible use

248
00:09:02,880 --> 00:09:05,839
wording so do not misuse this tool nor

249
00:09:05,839 --> 00:09:07,279
any other security tool for an

250
00:09:07,279 --> 00:09:10,000
authorized access and remind all of you

251
00:09:10,000 --> 00:09:12,240
that performing security scans without

252
00:09:12,240 --> 00:09:14,080
the permission from the owner of the

253
00:09:14,080 --> 00:09:16,880
computer system is illegal and oh as an

254
00:09:16,880 --> 00:09:19,360
attacker by its nature is an offensive

255
00:09:19,360 --> 00:09:21,519
security tool even though i'm a defender

256
00:09:21,519 --> 00:09:23,760
but i'm presenting to you an offensive

257
00:09:23,760 --> 00:09:25,040
security tool

258
00:09:25,040 --> 00:09:27,440
why do i love it so much so and how to

259
00:09:27,440 --> 00:09:29,839
understand what it does so it's very

260
00:09:29,839 --> 00:09:31,920
simple nettacker has three types of

261
00:09:31,920 --> 00:09:34,160
modules it has a module of type scan for

262
00:09:34,160 --> 00:09:35,680
example portscan you're just going to

263
00:09:35,680 --> 00:09:37,519
use it as an map and

264
00:09:37,519 --> 00:09:39,760
perform port scanning it has a module of

265
00:09:39,760 --> 00:09:40,720
type

266
00:09:40,720 --> 00:09:42,160
vol so

267
00:09:42,160 --> 00:09:44,240
for example apache strats vulnerability

268
00:09:44,240 --> 00:09:45,839
is a type of vulnerability you can just

269
00:09:45,839 --> 00:09:47,920
scan your entire network for that

270
00:09:47,920 --> 00:09:50,800
vulnerability or for a

271
00:09:50,800 --> 00:09:52,480
for several vulnerabilities in one go if

272
00:09:52,480 --> 00:09:53,600
you wanted to

273
00:09:53,600 --> 00:09:55,920
and it has a category of modules called

274
00:09:55,920 --> 00:09:58,399
brood so you can perform brute forcing

275
00:09:58,399 --> 00:10:01,360
for example ssh brood will perform brute

276
00:10:01,360 --> 00:10:04,640
forcing over ssh so i'm not going to go

277
00:10:04,640 --> 00:10:07,600
through all the attacker scan modules

278
00:10:07,600 --> 00:10:08,959
i'm just going to bring your attention

279
00:10:08,959 --> 00:10:09,680
to

280
00:10:09,680 --> 00:10:12,000
some of the interesting ones uh which i

281
00:10:12,000 --> 00:10:14,160
highlighted with asterisk for example

282
00:10:14,160 --> 00:10:16,880
admin scan allows you to find any admin

283
00:10:16,880 --> 00:10:18,880
or control panel kind of things running

284
00:10:18,880 --> 00:10:20,240
on your network

285
00:10:20,240 --> 00:10:20,959
so

286
00:10:20,959 --> 00:10:23,760
which is quite a good one pma scan is

287
00:10:23,760 --> 00:10:26,560
very similar pma stands for phpmyadmin

288
00:10:26,560 --> 00:10:28,399
which is a very popular

289
00:10:28,399 --> 00:10:29,839
tool for

290
00:10:29,839 --> 00:10:33,040
mysql database administration and the

291
00:10:33,040 --> 00:10:34,160
problem with that tool is a lot of

292
00:10:34,160 --> 00:10:36,399
people use it in a insecure

293
00:10:36,399 --> 00:10:37,920
configuration which means that if

294
00:10:37,920 --> 00:10:39,360
someone finds it they can actually get

295
00:10:39,360 --> 00:10:40,959
to your database and extract all the

296
00:10:40,959 --> 00:10:42,959
passwords and secrets from it

297
00:10:42,959 --> 00:10:44,880
um port scan is of course the one of the

298
00:10:44,880 --> 00:10:46,640
popular ones sub the main scan is very

299
00:10:46,640 --> 00:10:48,160
important so i'm going to show you how

300
00:10:48,160 --> 00:10:49,120
to

301
00:10:49,120 --> 00:10:50,959
scan some debates and at least the sub

302
00:10:50,959 --> 00:10:51,920
domains

303
00:10:51,920 --> 00:10:53,120
um

304
00:10:53,120 --> 00:10:55,120
wordpress was mentioned by the previous

305
00:10:55,120 --> 00:10:57,600
uh speaker talking about log spoofing

306
00:10:57,600 --> 00:10:59,920
and using wordpress attacker actually

307
00:10:59,920 --> 00:11:02,000
has a lot of modules around scanning

308
00:11:02,000 --> 00:11:03,839
wordpress and say the simple thing that

309
00:11:03,839 --> 00:11:06,160
you can do here for example you can scan

310
00:11:06,160 --> 00:11:08,720
uh networks and find out if wordpress is

311
00:11:08,720 --> 00:11:10,640
running and if it is what version of

312
00:11:10,640 --> 00:11:12,800
wordpress is running you can also find

313
00:11:12,800 --> 00:11:15,680
out what plugins are running what themes

314
00:11:15,680 --> 00:11:17,839
uh enumerate users and lots of other

315
00:11:17,839 --> 00:11:19,920
stuff and another cool module for

316
00:11:19,920 --> 00:11:21,760
scanning is called vapolizer so that

317
00:11:21,760 --> 00:11:23,360
allows you to discover what kind of

318
00:11:23,360 --> 00:11:25,600
technology is running on the target

319
00:11:25,600 --> 00:11:27,200
webserver

320
00:11:27,200 --> 00:11:28,720
these are all the vulnerabilities i'm

321
00:11:28,720 --> 00:11:30,000
again i'm not going to bring your

322
00:11:30,000 --> 00:11:32,160
attention to all this uh

323
00:11:32,160 --> 00:11:34,000
various vulnerabilities it is possible

324
00:11:34,000 --> 00:11:35,120
to

325
00:11:35,120 --> 00:11:37,120
write your own module if you are

326
00:11:37,120 --> 00:11:38,560
intending to use the tool for a

327
00:11:38,560 --> 00:11:40,880
particular vulnerability i will mention

328
00:11:40,880 --> 00:11:43,360
the microsoft exchange ssrf

329
00:11:43,360 --> 00:11:45,440
vulnerability which was exploited by

330
00:11:45,440 --> 00:11:48,800
hafnium chinese group last year because

331
00:11:48,800 --> 00:11:50,959
uh we responded probably one of the

332
00:11:50,959 --> 00:11:53,120
first ones to provide a scanning module

333
00:11:53,120 --> 00:11:56,399
for this vulnerability a year ago

334
00:11:56,399 --> 00:11:58,399
and also there are a few other uh

335
00:11:58,399 --> 00:12:00,480
vulnerabilities for example ssl

336
00:12:00,480 --> 00:12:02,800
certificate expired valve module is

337
00:12:02,800 --> 00:12:04,480
proving to be very useful you're going

338
00:12:04,480 --> 00:12:07,600
to go and well i use it to scan networks

339
00:12:07,600 --> 00:12:10,160
to find out if we have any devices with

340
00:12:10,160 --> 00:12:12,160
expired ssl certificates and again why

341
00:12:12,160 --> 00:12:13,920
is this a problem if you have a device

342
00:12:13,920 --> 00:12:15,920
on your network with expired ssl

343
00:12:15,920 --> 00:12:18,160
certificate most likely that means that

344
00:12:18,160 --> 00:12:20,079
the server is abandoned no one is

345
00:12:20,079 --> 00:12:22,079
looking after it and if it is abandoned

346
00:12:22,079 --> 00:12:24,639
which means it's not patched so it could

347
00:12:24,639 --> 00:12:26,959
be an easy vector for attackers to get

348
00:12:26,959 --> 00:12:27,760
in

349
00:12:27,760 --> 00:12:29,600
right another one is called server

350
00:12:29,600 --> 00:12:30,720
version

351
00:12:30,720 --> 00:12:33,519
so that just shows you uh the server

352
00:12:33,519 --> 00:12:35,519
banner from the web web server it shows

353
00:12:35,519 --> 00:12:37,760
you what is what is running and x

354
00:12:37,760 --> 00:12:40,320
powered by is another very popular

355
00:12:40,320 --> 00:12:42,399
header in response which shows you what

356
00:12:42,399 --> 00:12:44,480
is actually running on the server but

357
00:12:44,480 --> 00:12:46,480
the attacker is not just scanning for

358
00:12:46,480 --> 00:12:48,720
vulnerabilities and sub domains and

359
00:12:48,720 --> 00:12:52,240
ports it is also a brute forcing tool

360
00:12:52,240 --> 00:12:54,720
embedded in the same package so it can

361
00:12:54,720 --> 00:12:57,839
perform brute forcing using ftp http

362
00:12:57,839 --> 00:12:59,200
basic oauth

363
00:12:59,200 --> 00:13:01,760
http forms you know your traditional

364
00:13:01,760 --> 00:13:04,160
login username password forms on the

365
00:13:04,160 --> 00:13:06,399
website ntlm

366
00:13:06,399 --> 00:13:08,720
smtp ssh

367
00:13:08,720 --> 00:13:10,639
so ssh in particular is quite useful you

368
00:13:10,639 --> 00:13:12,160
can scan your whole network find out do

369
00:13:12,160 --> 00:13:13,839
you have anything which we respond to

370
00:13:13,839 --> 00:13:16,399
admin admin username password telnet for

371
00:13:16,399 --> 00:13:18,480
those people still using telnet in their

372
00:13:18,480 --> 00:13:20,560
networks there's a reason why telnet is

373
00:13:20,560 --> 00:13:22,959
there and there's a very useful module

374
00:13:22,959 --> 00:13:25,839
for wordpress uh people that's wordpress

375
00:13:25,839 --> 00:13:28,880
xml rpc brute forcing again allows

376
00:13:28,880 --> 00:13:31,360
uh youtube brute force wordpress

377
00:13:31,360 --> 00:13:32,639
installations

378
00:13:32,639 --> 00:13:35,440
now netaca was originally called iot

379
00:13:35,440 --> 00:13:36,399
scan

380
00:13:36,399 --> 00:13:38,160
and it's still its twitter handle if you

381
00:13:38,160 --> 00:13:40,160
want to find that tool and find a tool

382
00:13:40,160 --> 00:13:42,720
on twitter so the original intention of

383
00:13:42,720 --> 00:13:44,880
authors was to scan your network for iot

384
00:13:44,880 --> 00:13:47,600
devices then scan these iot devices for

385
00:13:47,600 --> 00:13:49,360
open ports and then brute scan for

386
00:13:49,360 --> 00:13:52,000
default credentials so this is how

387
00:13:52,000 --> 00:13:53,920
the project was originally born but now

388
00:13:53,920 --> 00:13:56,480
it grew to be much more than that

389
00:13:56,480 --> 00:13:58,160
and we'll see one interesting thing here

390
00:13:58,160 --> 00:14:00,000
there's a logo so if wherever you see

391
00:14:00,000 --> 00:14:02,160
this little radar logo right to

392
00:14:02,160 --> 00:14:04,880
recognize net attacker

393
00:14:04,880 --> 00:14:06,959
one of the most popular in the attacker

394
00:14:06,959 --> 00:14:10,639
scanning modules is a port scanner

395
00:14:10,639 --> 00:14:12,639
but i think that it's much easier to use

396
00:14:12,639 --> 00:14:15,360
and faster compared with nmap a lot of

397
00:14:15,360 --> 00:14:16,959
security researchers they have their

398
00:14:16,959 --> 00:14:18,880
sort of love and hate relationship with

399
00:14:18,880 --> 00:14:20,320
nmap

400
00:14:20,320 --> 00:14:23,680
and uh since uh i started using attacker

401
00:14:23,680 --> 00:14:25,600
i just stopped using nmr for almost

402
00:14:25,600 --> 00:14:26,560
everything

403
00:14:26,560 --> 00:14:28,560
it's just easier for most of the stuff

404
00:14:28,560 --> 00:14:30,959
that i need to use attacker i think is

405
00:14:30,959 --> 00:14:32,720
much more easier

406
00:14:32,720 --> 00:14:35,760
you can add threads and add threads

407
00:14:35,760 --> 00:14:37,920
and host so you can control

408
00:14:37,920 --> 00:14:40,160
the velocity of scanning

409
00:14:40,160 --> 00:14:43,120
which is i think quite important

410
00:14:43,120 --> 00:14:44,639
as i mentioned it's using python

411
00:14:44,639 --> 00:14:47,120
multi-threading by default uh if you run

412
00:14:47,120 --> 00:14:49,440
attacker scan it's it's it's okay it's

413
00:14:49,440 --> 00:14:50,959
not gonna overload your network with

414
00:14:50,959 --> 00:14:52,000
lots of

415
00:14:52,000 --> 00:14:53,760
traffic compared with nmap which can

416
00:14:53,760 --> 00:14:55,760
actually i i know cases with those

417
00:14:55,760 --> 00:14:59,279
flooding network switches and firewalls

418
00:14:59,279 --> 00:15:01,839
and another uh important thing if you

419
00:15:01,839 --> 00:15:04,160
are performing a port scan by default an

420
00:15:04,160 --> 00:15:06,560
attacker will use 1000 most popular

421
00:15:06,560 --> 00:15:09,120
ports so it's similar to nmap but you

422
00:15:09,120 --> 00:15:11,760
can add g parameter and then just list

423
00:15:11,760 --> 00:15:14,399
the port numbers that you are interested

424
00:15:14,399 --> 00:15:16,240
um so this is how you would run the

425
00:15:16,240 --> 00:15:17,760
attacker and this is why when i first

426
00:15:17,760 --> 00:15:19,680
run it i didn't understand what to do

427
00:15:19,680 --> 00:15:21,120
right because it just spits out a whole

428
00:15:21,120 --> 00:15:23,279
bunch of usage instructions but to run

429
00:15:23,279 --> 00:15:24,720
the attacker you need two things right

430
00:15:24,720 --> 00:15:26,480
two parameters you need to give it a

431
00:15:26,480 --> 00:15:29,120
target what are you going to scan and

432
00:15:29,120 --> 00:15:31,839
you need to give it a module

433
00:15:31,839 --> 00:15:33,440
what module you're going to be

434
00:15:33,440 --> 00:15:36,000
performing your scan with right which

435
00:15:36,000 --> 00:15:37,440
uh blade that you're going to pull out

436
00:15:37,440 --> 00:15:40,079
that your swiss army knife and here are

437
00:15:40,079 --> 00:15:41,440
a couple of examples if you want to

438
00:15:41,440 --> 00:15:43,360
perform a port scan on just one ip

439
00:15:43,360 --> 00:15:45,199
address you just put that ip address in

440
00:15:45,199 --> 00:15:48,079
there however you can also specify the

441
00:15:48,079 --> 00:15:49,360
whole

442
00:15:49,360 --> 00:15:52,560
sub subnet using

443
00:15:52,560 --> 00:15:55,040
the 24 annotation is this particular

444
00:15:55,040 --> 00:15:55,920
case

445
00:15:55,920 --> 00:15:59,360
and in fact you can define targets in

446
00:15:59,360 --> 00:16:02,480
different formats so we've seen uh the

447
00:16:02,480 --> 00:16:04,560
single ip you can also define a whole

448
00:16:04,560 --> 00:16:06,480
range of ip addresses by providing a

449
00:16:06,480 --> 00:16:09,440
start ip and ending ip

450
00:16:09,440 --> 00:16:12,720
cidr slash bits notation you can also

451
00:16:12,720 --> 00:16:15,920
scan a whole domain right that's

452
00:16:15,920 --> 00:16:17,440
interesting i'm going to show you how to

453
00:16:17,440 --> 00:16:20,240
scan os.org in my live demo because i'm

454
00:16:20,240 --> 00:16:22,959
allowed to scan it and

455
00:16:22,959 --> 00:16:26,000
you can also define a url just one url

456
00:16:26,000 --> 00:16:29,440
which could be uh you know http or https

457
00:16:29,440 --> 00:16:31,360
so these are all the different types of

458
00:16:31,360 --> 00:16:32,320
os

459
00:16:32,320 --> 00:16:34,480
netacad targets

460
00:16:34,480 --> 00:16:37,519
however you can also scan

461
00:16:37,519 --> 00:16:39,360
um

462
00:16:39,360 --> 00:16:41,360
targets defined in a text file why is

463
00:16:41,360 --> 00:16:42,399
this convenient because your

464
00:16:42,399 --> 00:16:44,000
organization you probably will have

465
00:16:44,000 --> 00:16:46,320
several domain names you will have

466
00:16:46,320 --> 00:16:48,560
different networks right so how do you

467
00:16:48,560 --> 00:16:50,800
scan everything your entire organization

468
00:16:50,800 --> 00:16:52,800
right just put it all in one text file

469
00:16:52,800 --> 00:16:54,240
and then you can just load the list of

470
00:16:54,240 --> 00:16:56,720
target from a text file easy

471
00:16:56,720 --> 00:16:58,560
and again you define which module you

472
00:16:58,560 --> 00:17:02,639
want to use to scan all your networks

473
00:17:02,639 --> 00:17:04,480
another really cool feature of the

474
00:17:04,480 --> 00:17:06,720
tucker that you can chain modules so

475
00:17:06,720 --> 00:17:08,640
rather than just using one module you

476
00:17:08,640 --> 00:17:11,439
can just just comment say i want to use

477
00:17:11,439 --> 00:17:14,400
method one or module one module two and

478
00:17:14,400 --> 00:17:16,799
here's an example for example if i want

479
00:17:16,799 --> 00:17:20,000
to perform a port scan php my admin scan

480
00:17:20,000 --> 00:17:20,720
on

481
00:17:20,720 --> 00:17:22,480
this target i'll just list them with a

482
00:17:22,480 --> 00:17:24,880
comma if i want to scan the whole of

483
00:17:24,880 --> 00:17:28,240
august.org and perform a port scan and

484
00:17:28,240 --> 00:17:29,679
check if there's a server version

485
00:17:29,679 --> 00:17:32,000
leakage vulnerability and i want to

486
00:17:32,000 --> 00:17:35,120
limit that port scan to ports 80 and 443

487
00:17:35,120 --> 00:17:37,760
this is what i can do so this is very

488
00:17:37,760 --> 00:17:38,880
convenient

489
00:17:38,880 --> 00:17:42,640
so profiles as we uh mentioned before

490
00:17:42,640 --> 00:17:44,160
another great feature of an attacker is

491
00:17:44,160 --> 00:17:45,840
because there's lots of modules you can

492
00:17:45,840 --> 00:17:48,240
bundle modules into profiles there are

493
00:17:48,240 --> 00:17:51,039
some profiles which are already

494
00:17:51,039 --> 00:17:53,440
pre-built for you and they come with a

495
00:17:53,440 --> 00:17:55,919
netacr by default so there's one called

496
00:17:55,919 --> 00:17:58,160
info so that will include all the

497
00:17:58,160 --> 00:18:00,400
information gathering modules there's a

498
00:18:00,400 --> 00:18:02,400
profile called scan obviously that's all

499
00:18:02,400 --> 00:18:05,120
the scanning modules one root will

500
00:18:05,120 --> 00:18:06,960
perform all the brute forcing volume

501
00:18:06,960 --> 00:18:09,520
it's all vulnerabilities there's also a

502
00:18:09,520 --> 00:18:12,720
wp for wordpress so if you want to scan

503
00:18:12,720 --> 00:18:14,480
a wordpress website there are quite a

504
00:18:14,480 --> 00:18:16,640
lot of wordpress modules you just use

505
00:18:16,640 --> 00:18:18,880
them all there's a joomla one for joomla

506
00:18:18,880 --> 00:18:21,520
cms and there's a magical profile called

507
00:18:21,520 --> 00:18:23,919
all we say okay i want to use all the

508
00:18:23,919 --> 00:18:25,600
modules on my target of course it's

509
00:18:25,600 --> 00:18:28,320
going to be very very slow but that's

510
00:18:28,320 --> 00:18:29,760
what you would do you would just define

511
00:18:29,760 --> 00:18:32,880
your target with dash i and you specify

512
00:18:32,880 --> 00:18:34,960
whichever profile you want for example

513
00:18:34,960 --> 00:18:37,600
information gathering will be info okay

514
00:18:37,600 --> 00:18:39,280
enough talking you all want to see it in

515
00:18:39,280 --> 00:18:41,600
action i'm going to switch to kali linux

516
00:18:41,600 --> 00:18:43,919
i'm gonna show you uh how this tool

517
00:18:43,919 --> 00:18:44,960
works

518
00:18:44,960 --> 00:18:47,039
right let's pray to the gods of life

519
00:18:47,039 --> 00:18:49,039
demo it works okay so as i mentioned

520
00:18:49,039 --> 00:18:51,440
before if you just run the attacker

521
00:18:51,440 --> 00:18:53,679
using python right with no parameters

522
00:18:53,679 --> 00:18:56,240
you're just gonna spit out how to use it

523
00:18:56,240 --> 00:18:58,080
right so there's lots of lots of options

524
00:18:58,080 --> 00:19:00,960
here include methods and exclude methods

525
00:19:00,960 --> 00:19:03,200
okay so i'm going to show you i hope

526
00:19:03,200 --> 00:19:06,000
this is visible uh how to

527
00:19:06,000 --> 00:19:08,080
use an attacker

528
00:19:08,080 --> 00:19:10,400
so i'm going to do an entire py and i

529
00:19:10,400 --> 00:19:13,440
have to define a target okay so let me

530
00:19:13,440 --> 00:19:16,400
define owasp.org right organization that

531
00:19:16,400 --> 00:19:18,320
i'm allowed to scan but what i'm going

532
00:19:18,320 --> 00:19:20,640
to do first of all i want to run a

533
00:19:20,640 --> 00:19:23,200
subdomain scan okay this is a very

534
00:19:23,200 --> 00:19:24,480
simple thing

535
00:19:24,480 --> 00:19:27,280
some debate scan

536
00:19:27,280 --> 00:19:30,400
okay you can see it when a the uh module

537
00:19:30,400 --> 00:19:33,600
um uh when it loads it will show us the

538
00:19:33,600 --> 00:19:34,640
uh

539
00:19:34,640 --> 00:19:37,280
provided the live demo works now

540
00:19:37,280 --> 00:19:40,480
it should load the uh

541
00:19:41,200 --> 00:19:43,600
the file and also come on

542
00:19:43,600 --> 00:19:45,520
uh

543
00:19:45,520 --> 00:19:48,000
that is not good

544
00:19:48,000 --> 00:19:49,760
yeah it's loading now so it should tell

545
00:19:49,760 --> 00:19:52,000
us

546
00:19:52,000 --> 00:19:53,919
how many modules it has loaded 72

547
00:19:53,919 --> 00:19:55,840
modules and then

548
00:19:55,840 --> 00:19:58,240
it will start

549
00:19:58,240 --> 00:20:01,760
trying to connect to the target and

550
00:20:01,760 --> 00:20:02,880
will

551
00:20:02,880 --> 00:20:04,840
start scanning it for all the sub

552
00:20:04,840 --> 00:20:07,679
domains because it is saying check your

553
00:20:07,679 --> 00:20:09,600
internet connection

554
00:20:09,600 --> 00:20:12,240
just let me quickly check that my wi-fi

555
00:20:12,240 --> 00:20:14,159
is working it looks like my wi-fi is not

556
00:20:14,159 --> 00:20:17,840
working maybe that's why it was not

557
00:20:17,840 --> 00:20:19,919
doing what it was supposed to be doing

558
00:20:19,919 --> 00:20:21,120
let me check

559
00:20:21,120 --> 00:20:24,000
do we have wi-fi

560
00:20:24,000 --> 00:20:24,960
hmm

561
00:20:24,960 --> 00:20:26,640
this is the worst thing which can happen

562
00:20:26,640 --> 00:20:28,640
we will lose wi-fi connectivity in the

563
00:20:28,640 --> 00:20:30,240
middle of the demo

564
00:20:30,240 --> 00:20:32,480
yeah and it's back on okay let's try

565
00:20:32,480 --> 00:20:33,440
again

566
00:20:33,440 --> 00:20:35,440
hope it works this time right let's try

567
00:20:35,440 --> 00:20:37,120
again

568
00:20:37,120 --> 00:20:38,000
right

569
00:20:38,000 --> 00:20:40,159
okay now now it's much faster this is

570
00:20:40,159 --> 00:20:41,600
how it is supposed to work and you can

571
00:20:41,600 --> 00:20:44,960
see how quickly it discovered all the uh

572
00:20:44,960 --> 00:20:47,200
sub-domains of obas.org

573
00:20:47,200 --> 00:20:48,640
um

574
00:20:48,640 --> 00:20:52,080
and now what i want to do i want to

575
00:20:52,080 --> 00:20:53,840
do something else

576
00:20:53,840 --> 00:20:55,440
because you can see i found all the sub

577
00:20:55,440 --> 00:20:57,679
domains i want to

578
00:20:57,679 --> 00:21:00,720
do a server version scan

579
00:21:00,720 --> 00:21:03,760
okay and i but what that means if i

580
00:21:03,760 --> 00:21:05,360
don't provide anything

581
00:21:05,360 --> 00:21:07,360
um server version von sorry

582
00:21:07,360 --> 00:21:11,280
vulnerability so i want to see if os.org

583
00:21:11,280 --> 00:21:14,080
is leaking what server is running so

584
00:21:14,080 --> 00:21:16,960
it's running cloudflare but that's just

585
00:21:16,960 --> 00:21:20,640
the main os.org i want to do this on all

586
00:21:20,640 --> 00:21:22,080
the subdomains so i'm going to use a

587
00:21:22,080 --> 00:21:24,159
magic switch called s

588
00:21:24,159 --> 00:21:26,720
run this module on all the subdomains so

589
00:21:26,720 --> 00:21:28,720
what's going to happen now is

590
00:21:28,720 --> 00:21:30,080
an attacker discovered all the

591
00:21:30,080 --> 00:21:32,880
subdomains of obas.org and that's it's

592
00:21:32,880 --> 00:21:36,640
now going to go and uh check if

593
00:21:36,640 --> 00:21:39,919
any subdomains of os.org

594
00:21:39,919 --> 00:21:42,480
are leaking their server version you can

595
00:21:42,480 --> 00:21:44,960
see quite a few of them there so this is

596
00:21:44,960 --> 00:21:45,760
a

597
00:21:45,760 --> 00:21:49,919
very very useful feature okay let's uh

598
00:21:49,919 --> 00:21:52,240
let's do it let's add a bit more oomph

599
00:21:52,240 --> 00:21:53,520
to this so

600
00:21:53,520 --> 00:21:56,159
i only used one module server version

601
00:21:56,159 --> 00:21:57,120
one

602
00:21:57,120 --> 00:22:01,679
going to add x powered by x powered by

603
00:22:01,679 --> 00:22:04,240
1 and i'm going to throw in another one

604
00:22:04,240 --> 00:22:06,960
which is a very useful module vaporizer

605
00:22:06,960 --> 00:22:09,760
scan so vaporizer will tell me what is

606
00:22:09,760 --> 00:22:11,600
actually running

607
00:22:11,600 --> 00:22:13,919
and again i'm gonna do run this scan on

608
00:22:13,919 --> 00:22:16,400
the entire oasis.org the entire

609
00:22:16,400 --> 00:22:18,559
organization so all the subdomains of

610
00:22:18,559 --> 00:22:20,960
os.org and are going to be discovered

611
00:22:20,960 --> 00:22:23,200
and you can see straight away this is

612
00:22:23,200 --> 00:22:25,200
the results and

613
00:22:25,200 --> 00:22:27,600
you can see already that the

614
00:22:27,600 --> 00:22:29,039
vaporizer is discovering some

615
00:22:29,039 --> 00:22:31,679
programming languages some frameworks uh

616
00:22:31,679 --> 00:22:34,240
you can see ruby in there there's jquery

617
00:22:34,240 --> 00:22:36,559
uh modernize the framework

618
00:22:36,559 --> 00:22:39,919
um lots of lots of interesting stuff

619
00:22:39,919 --> 00:22:42,320
and what is good is obviously doing it

620
00:22:42,320 --> 00:22:43,840
on all the sub domain of the

621
00:22:43,840 --> 00:22:46,400
organization so when the scan finishes i

622
00:22:46,400 --> 00:22:48,320
will have a very interesting result

623
00:22:48,320 --> 00:22:49,120
because

624
00:22:49,120 --> 00:22:53,039
i will know what assets os.org has

625
00:22:53,039 --> 00:22:54,960
and uh

626
00:22:54,960 --> 00:22:56,640
how many of these assets are listening

627
00:22:56,640 --> 00:22:59,600
on ports 80 or 443 what kind of website

628
00:22:59,600 --> 00:23:00,960
where they're running and what kind of

629
00:23:00,960 --> 00:23:03,200
technologies are

630
00:23:03,200 --> 00:23:04,080
uh

631
00:23:04,080 --> 00:23:07,120
actually on the running on this service

632
00:23:07,120 --> 00:23:08,640
so what you will notice at the bottom

633
00:23:08,640 --> 00:23:11,120
you will say that oh there is a report

634
00:23:11,120 --> 00:23:14,400
and it is saved in this html file and

635
00:23:14,400 --> 00:23:16,559
the database and database is very

636
00:23:16,559 --> 00:23:18,480
important because nethacker has a

637
00:23:18,480 --> 00:23:21,200
built-in database so every single scan

638
00:23:21,200 --> 00:23:22,480
that you perform

639
00:23:22,480 --> 00:23:24,640
doesn't disappear it stays in the

640
00:23:24,640 --> 00:23:27,039
database and you can search it you can

641
00:23:27,039 --> 00:23:29,600
use it and you can export it which is

642
00:23:29,600 --> 00:23:31,280
absolutely great but let's have a look

643
00:23:31,280 --> 00:23:34,400
at this html file the html report that

644
00:23:34,400 --> 00:23:36,720
was produced of course you can see that

645
00:23:36,720 --> 00:23:37,840
uh

646
00:23:37,840 --> 00:23:40,480
by default an attacker output shows this

647
00:23:40,480 --> 00:23:42,799
kind of tabular format so

648
00:23:42,799 --> 00:23:43,760
um

649
00:23:43,760 --> 00:23:45,440
i'm going to show you

650
00:23:45,440 --> 00:23:48,080
uh in firefox like my calendar should

651
00:23:48,080 --> 00:23:52,799
have firefox right let's see if

652
00:23:52,799 --> 00:23:55,200
it shows the report there you go this is

653
00:23:55,200 --> 00:23:57,200
the report and this is the fantastic

654
00:23:57,200 --> 00:23:58,320
feature of the attacker called

655
00:23:58,320 --> 00:24:00,960
penetration testing graph

656
00:24:00,960 --> 00:24:02,640
so you can see this is where the attack

657
00:24:02,640 --> 00:24:05,840
started you can see it's contacting

658
00:24:05,840 --> 00:24:08,400
all the sub-domains and running each

659
00:24:08,400 --> 00:24:10,720
module on the subdomain you can see on

660
00:24:10,720 --> 00:24:12,799
some of the sub-domains

661
00:24:12,799 --> 00:24:13,840
some

662
00:24:13,840 --> 00:24:15,919
some modules work so they produce a

663
00:24:15,919 --> 00:24:17,840
result right for example here you have a

664
00:24:17,840 --> 00:24:20,159
server version vulnerability and the x

665
00:24:20,159 --> 00:24:22,720
powered by vulnerability uh on some

666
00:24:22,720 --> 00:24:24,880
others you you don't have it but

667
00:24:24,880 --> 00:24:27,120
you have localizer scan right so there

668
00:24:27,120 --> 00:24:29,200
you go you can see what is running here

669
00:24:29,200 --> 00:24:30,000
so

670
00:24:30,000 --> 00:24:32,320
google analytics right programming

671
00:24:32,320 --> 00:24:33,600
languages

672
00:24:33,600 --> 00:24:36,400
ruby jquery so this is very very useful

673
00:24:36,400 --> 00:24:38,400
so but just by looking at this picture

674
00:24:38,400 --> 00:24:41,039
you can understand a lot about what you

675
00:24:41,039 --> 00:24:43,200
have on the network

676
00:24:43,200 --> 00:24:45,279
and then if we scroll down at the bottom

677
00:24:45,279 --> 00:24:47,279
of this report we will find the same

678
00:24:47,279 --> 00:24:50,080
table that you saw in text ascii format

679
00:24:50,080 --> 00:24:52,880
but now it is an html so it is much more

680
00:24:52,880 --> 00:24:54,880
useful because i can see all the

681
00:24:54,880 --> 00:24:58,000
sub-domains of my organization all the

682
00:24:58,000 --> 00:25:00,559
open ports and

683
00:25:00,559 --> 00:25:02,960
all the technologies which are running

684
00:25:02,960 --> 00:25:05,039
on all the all the servers which are

685
00:25:05,039 --> 00:25:06,480
currently live

686
00:25:06,480 --> 00:25:08,960
okay this is this is very very useful uh

687
00:25:08,960 --> 00:25:10,480
there's a bit of a gimmick if i want to

688
00:25:10,480 --> 00:25:13,360
bring your attention to a particular uh

689
00:25:13,360 --> 00:25:15,400
result here for example

690
00:25:15,400 --> 00:25:17,520
secureflag.os.org which is our

691
00:25:17,520 --> 00:25:20,159
uh free trading system for os members

692
00:25:20,159 --> 00:25:22,320
there you go i can show you that these

693
00:25:22,320 --> 00:25:24,880
guys are actually running nginx right

694
00:25:24,880 --> 00:25:27,520
okay let's remember nginx because i'm

695
00:25:27,520 --> 00:25:29,919
going to talk about nginx a little bit

696
00:25:29,919 --> 00:25:31,679
later okay

697
00:25:31,679 --> 00:25:34,559
let's go back to the slides because i

698
00:25:34,559 --> 00:25:36,799
have to talk about few other interesting

699
00:25:36,799 --> 00:25:39,840
things of course you have seen

700
00:25:39,840 --> 00:25:41,200
the

701
00:25:41,200 --> 00:25:45,120
graph which is a very cool feature

702
00:25:46,000 --> 00:25:48,880
netaca can also output reports in html

703
00:25:48,880 --> 00:25:53,760
in json and in csv so csv is a very very

704
00:25:53,760 --> 00:25:55,600
important thing

705
00:25:55,600 --> 00:25:56,480
because

706
00:25:56,480 --> 00:25:59,600
it allows us to get the same result in a

707
00:25:59,600 --> 00:26:02,159
spreadsheet and i

708
00:26:02,159 --> 00:26:04,080
think everyone is going to love the fact

709
00:26:04,080 --> 00:26:06,240
that there is absolutely free and open

710
00:26:06,240 --> 00:26:07,440
source tool

711
00:26:07,440 --> 00:26:09,760
which allows you to scan your entire

712
00:26:09,760 --> 00:26:12,000
network find out all the assets you have

713
00:26:12,000 --> 00:26:13,919
all the vulnerabilities you have

714
00:26:13,919 --> 00:26:17,279
and get the output in excel right it's

715
00:26:17,279 --> 00:26:20,000
amazing isn't it so how do i get it in

716
00:26:20,000 --> 00:26:23,520
csv i just add dash o for output and

717
00:26:23,520 --> 00:26:25,840
okay i'll just name my

718
00:26:25,840 --> 00:26:28,320
csv file results.csv

719
00:26:28,320 --> 00:26:31,039
so now exactly the same scan will happen

720
00:26:31,039 --> 00:26:33,039
right uh again the attacker is going to

721
00:26:33,039 --> 00:26:35,039
go discover all the sub-domains of the

722
00:26:35,039 --> 00:26:37,440
organization and then it's going to

723
00:26:37,440 --> 00:26:40,880
perform exactly the same scan as before

724
00:26:40,880 --> 00:26:42,720
but instead of

725
00:26:42,720 --> 00:26:44,960
saving the result in

726
00:26:44,960 --> 00:26:48,480
html it's going to save it in a csv file

727
00:26:48,480 --> 00:26:49,600
and

728
00:26:49,600 --> 00:26:51,840
you can see how it goes and discovers

729
00:26:51,840 --> 00:26:53,600
everything and again we

730
00:26:53,600 --> 00:26:56,080
reminded only do it on organizations

731
00:26:56,080 --> 00:26:58,480
that you're allowed to scan

732
00:26:58,480 --> 00:27:00,080
and also of course at the moment i'm

733
00:27:00,080 --> 00:27:02,640
just scanning oas.org and sub domains

734
00:27:02,640 --> 00:27:05,279
but you can do the same thing internally

735
00:27:05,279 --> 00:27:08,080
in your networks when you uh run it in

736
00:27:08,080 --> 00:27:10,400
your organization and you can discover

737
00:27:10,400 --> 00:27:11,760
everything that you have and i think

738
00:27:11,760 --> 00:27:13,840
it's a very important feature of

739
00:27:13,840 --> 00:27:16,159
nethacker allows you to actually perform

740
00:27:16,159 --> 00:27:19,039
asset discovery okay so there you go

741
00:27:19,039 --> 00:27:21,360
this is this the scan uh you can see

742
00:27:21,360 --> 00:27:23,360
it's almost complete there you go we got

743
00:27:23,360 --> 00:27:25,520
the same tabular thing here but look it

744
00:27:25,520 --> 00:27:28,080
says report saved in results.csv this

745
00:27:28,080 --> 00:27:31,600
time so i have uh because this is kali

746
00:27:31,600 --> 00:27:34,159
linux i have libreoffice installed on

747
00:27:34,159 --> 00:27:35,360
this uh

748
00:27:35,360 --> 00:27:38,000
rather microsoft office and i'm going to

749
00:27:38,000 --> 00:27:41,039
go and have a look at this csv file

750
00:27:41,039 --> 00:27:45,440
and there you go we have a spreadsheet

751
00:27:45,440 --> 00:27:48,000
and it's a spreadsheet with all all the

752
00:27:48,000 --> 00:27:49,919
assets all the data and because this is

753
00:27:49,919 --> 00:27:52,000
a spreadsheet let's ignore the scan id

754
00:27:52,000 --> 00:27:54,480
column from here because the it's just

755
00:27:54,480 --> 00:27:56,640
the

756
00:27:57,120 --> 00:27:58,799
scan id which allows you to uniquely

757
00:27:58,799 --> 00:28:00,880
identify the scan in the database

758
00:28:00,880 --> 00:28:03,840
because it is a spreadsheet you can go

759
00:28:03,840 --> 00:28:05,520
and say okay

760
00:28:05,520 --> 00:28:08,080
i can just go and do uh data

761
00:28:08,080 --> 00:28:10,399
manipulation i can go and filter and

762
00:28:10,399 --> 00:28:12,480
remember i said okay something was

763
00:28:12,480 --> 00:28:14,559
running nginx i'm like okay what is

764
00:28:14,559 --> 00:28:16,960
running nginx on my network

765
00:28:16,960 --> 00:28:19,520
i can just filter my excel spreadsheet

766
00:28:19,520 --> 00:28:22,000
and find out straight away right

767
00:28:22,000 --> 00:28:25,039
i think it's a very very cool feature

768
00:28:25,039 --> 00:28:28,879
and a manager's dream

769
00:28:29,039 --> 00:28:32,720
report is in the spreadsheet

770
00:28:32,720 --> 00:28:35,360
so uh i don't really know any other free

771
00:28:35,360 --> 00:28:37,039
and open source tool which can do this

772
00:28:37,039 --> 00:28:39,120
kind of stuff and

773
00:28:39,120 --> 00:28:41,120
i i think the spreadsheet is very

774
00:28:41,120 --> 00:28:42,880
important but

775
00:28:42,880 --> 00:28:44,880
why is this also important because

776
00:28:44,880 --> 00:28:48,080
there's something called os a0 or asset

777
00:28:48,080 --> 00:28:50,159
inventory and that is actually a

778
00:28:50,159 --> 00:28:53,120
suggestion by jeremiah grossman who uh

779
00:28:53,120 --> 00:28:54,480
when we were

780
00:28:54,480 --> 00:28:57,039
producing oas top 10 for 2017 actually

781
00:28:57,039 --> 00:28:58,480
suggested and saying

782
00:28:58,480 --> 00:29:00,559
well number one problem that we're

783
00:29:00,559 --> 00:29:02,320
seeing is people don't really know what

784
00:29:02,320 --> 00:29:04,080
they're running an organization it's a

785
00:29:04,080 --> 00:29:05,760
problem which happens over and over

786
00:29:05,760 --> 00:29:09,200
again that's why august should do

787
00:29:09,440 --> 00:29:11,360
introduce another vulnerability asset

788
00:29:11,360 --> 00:29:13,600
inventory missing again why is this

789
00:29:13,600 --> 00:29:15,600
important because if you don't know what

790
00:29:15,600 --> 00:29:18,480
you own you cannot possibly secure it

791
00:29:18,480 --> 00:29:20,559
this is why asset inventory is important

792
00:29:20,559 --> 00:29:22,399
and you can produce it using it this

793
00:29:22,399 --> 00:29:25,120
free and open source tool

794
00:29:25,120 --> 00:29:28,399
next i'm going to talk about our docker

795
00:29:28,399 --> 00:29:31,679
api and web ui so nettacker has a

796
00:29:31,679 --> 00:29:34,159
built-in web server it's flask right for

797
00:29:34,159 --> 00:29:37,840
those of you who know python okay and so

798
00:29:37,840 --> 00:29:40,399
it's not really a production web server

799
00:29:40,399 --> 00:29:43,039
but for our purposes it's really cool

800
00:29:43,039 --> 00:29:44,960
right we're just using it to discover

801
00:29:44,960 --> 00:29:48,080
assets on our network and then

802
00:29:48,080 --> 00:29:50,159
search that data so

803
00:29:50,159 --> 00:29:52,080
the important thing here when you start

804
00:29:52,080 --> 00:29:55,440
the was networking api mode it will uh

805
00:29:55,440 --> 00:29:57,520
generate this random api key and will

806
00:29:57,520 --> 00:30:00,080
show it and you need to just remember to

807
00:30:00,080 --> 00:30:02,799
uh copy paste it by default an attacker

808
00:30:02,799 --> 00:30:05,360
will run on port 5000 but again you can

809
00:30:05,360 --> 00:30:07,760
just override it and make it work on

810
00:30:07,760 --> 00:30:10,320
whichever port you want

811
00:30:10,320 --> 00:30:12,159
this is what the api looks like i'm

812
00:30:12,159 --> 00:30:14,320
actually going to um

813
00:30:14,320 --> 00:30:17,200
again switch to my demo

814
00:30:17,200 --> 00:30:18,000
and

815
00:30:18,000 --> 00:30:21,120
show you how it can be done right what

816
00:30:21,120 --> 00:30:23,360
do we do let me close

817
00:30:23,360 --> 00:30:24,320
my

818
00:30:24,320 --> 00:30:26,960
wonderful spreadsheet now i'm going to

819
00:30:26,960 --> 00:30:29,200
run an attacker but instead of doing any

820
00:30:29,200 --> 00:30:30,159
scans

821
00:30:30,159 --> 00:30:31,760
i will

822
00:30:31,760 --> 00:30:36,159
put dash dash start the dash api that's

823
00:30:36,159 --> 00:30:36,960
it

824
00:30:36,960 --> 00:30:38,960
this magical switch is now working and

825
00:30:38,960 --> 00:30:40,080
you can see

826
00:30:40,080 --> 00:30:42,240
nothing's happening it's it showed us

827
00:30:42,240 --> 00:30:45,039
the api key which i'm going to copy all

828
00:30:45,039 --> 00:30:45,919
right

829
00:30:45,919 --> 00:30:48,640
and stop because now it's in the flask

830
00:30:48,640 --> 00:30:50,480
web server is running so it's waiting

831
00:30:50,480 --> 00:30:52,720
for us to use a web browser to connect

832
00:30:52,720 --> 00:30:54,240
let's connect so it's running on

833
00:30:54,240 --> 00:30:57,600
localhost and port 5000 by default

834
00:30:57,600 --> 00:31:00,240
let me go and uh watch my firefox yeah

835
00:31:00,240 --> 00:31:02,240
thank you very much kali linux

836
00:31:02,240 --> 00:31:05,760
so i'm going to do https one two seven

837
00:31:05,760 --> 00:31:09,360
zero zero one and i'm gonna go 5000 just

838
00:31:09,360 --> 00:31:11,360
delete the

839
00:31:11,360 --> 00:31:13,440
everything else there you go by default

840
00:31:13,440 --> 00:31:14,960
it will tell me that the certificate is

841
00:31:14,960 --> 00:31:16,799
not trusted yeah of course you if you

842
00:31:16,799 --> 00:31:18,960
want to run it with your own certificate

843
00:31:18,960 --> 00:31:20,640
and avoid the browser warning you can

844
00:31:20,640 --> 00:31:22,000
always do that

845
00:31:22,000 --> 00:31:24,640
right so that is the uh

846
00:31:24,640 --> 00:31:28,159
api and web ui of nethacker

847
00:31:28,159 --> 00:31:31,279
you cannot really click on anything here

848
00:31:31,279 --> 00:31:33,279
until you authenticate and you

849
00:31:33,279 --> 00:31:35,440
authenticate using an api key which we

850
00:31:35,440 --> 00:31:36,480
copied

851
00:31:36,480 --> 00:31:39,200
let's paste it here

852
00:31:39,200 --> 00:31:42,000
okay it says yay it's working so what

853
00:31:42,000 --> 00:31:43,360
you're going to see now if i click on

854
00:31:43,360 --> 00:31:45,440
results you can see all the scans that i

855
00:31:45,440 --> 00:31:46,960
performed before

856
00:31:46,960 --> 00:31:49,200
they are now visible in the web ui why

857
00:31:49,200 --> 00:31:51,760
because nethacker used the database so

858
00:31:51,760 --> 00:31:54,240
everything we did stayed in the database

859
00:31:54,240 --> 00:31:55,919
so i can go and click on any of the

860
00:31:55,919 --> 00:31:58,720
scans this was my previous one in csv i

861
00:31:58,720 --> 00:32:00,399
got a csv format

862
00:32:00,399 --> 00:32:02,720
if i were to click to the on the html

863
00:32:02,720 --> 00:32:03,519
one

864
00:32:03,519 --> 00:32:07,679
i got my nice html report with a graph

865
00:32:07,679 --> 00:32:09,519
so nothing is lost

866
00:32:09,519 --> 00:32:10,960
and that's of course another important

867
00:32:10,960 --> 00:32:13,600
thing because it is in the database

868
00:32:13,600 --> 00:32:16,080
it is also searchable so again there's a

869
00:32:16,080 --> 00:32:18,720
crawler here so you can use this as a

870
00:32:18,720 --> 00:32:20,720
kind of internal showdown for your

871
00:32:20,720 --> 00:32:22,399
networks so

872
00:32:22,399 --> 00:32:24,640
you can use the tool

873
00:32:24,640 --> 00:32:26,480
scan your networks find out what you

874
00:32:26,480 --> 00:32:28,880
have and then say okay do i have

875
00:32:28,880 --> 00:32:31,600
anything running nginx yep there you go

876
00:32:31,600 --> 00:32:34,480
straight away i found that was secured

877
00:32:34,480 --> 00:32:36,399
what do we have riding uh

878
00:32:36,399 --> 00:32:38,320
atlas here right so there was something

879
00:32:38,320 --> 00:32:41,120
there i remember if i could spill

880
00:32:41,120 --> 00:32:42,640
too many asses

881
00:32:42,640 --> 00:32:44,799
there you go it was contactos.org and

882
00:32:44,799 --> 00:32:47,279
ocms os.org before i just make the

883
00:32:47,279 --> 00:32:48,960
screen a little bit bigger hopefully it

884
00:32:48,960 --> 00:32:49,679
will

885
00:32:49,679 --> 00:32:53,679
be visible there you go so you can

886
00:32:55,360 --> 00:32:57,919
you can do your searches and also you

887
00:32:57,919 --> 00:33:01,600
can also uh start a scam from here okay

888
00:33:01,600 --> 00:33:04,880
so this is the new scan interface

889
00:33:04,880 --> 00:33:07,600
it's going to ask you for a target

890
00:33:07,600 --> 00:33:11,440
so again let me try doing owasp.org

891
00:33:11,440 --> 00:33:13,519
okay and you can see here the profiles

892
00:33:13,519 --> 00:33:15,840
that i talked about they color coded so

893
00:33:15,840 --> 00:33:17,600
everything which is scan and information

894
00:33:17,600 --> 00:33:20,240
gathering is green

895
00:33:20,240 --> 00:33:22,799
brute forcing is orange right and there

896
00:33:22,799 --> 00:33:24,960
are a few other profiles like wordpress

897
00:33:24,960 --> 00:33:27,039
and joomla and yeah you can just tick

898
00:33:27,039 --> 00:33:31,440
the boxes okay okay i want to scan

899
00:33:32,240 --> 00:33:36,000
my target what do i do i will pick

900
00:33:36,000 --> 00:33:39,039
port scanner i will prefer pick server

901
00:33:39,039 --> 00:33:41,120
version vulnerability

902
00:33:41,120 --> 00:33:43,440
x powered by what kind of graph do i

903
00:33:43,440 --> 00:33:45,679
want do i want a circle graph or do i

904
00:33:45,679 --> 00:33:47,440
want the

905
00:33:47,440 --> 00:33:48,480
tree

906
00:33:48,480 --> 00:33:51,440
graph you can also choose a language

907
00:33:51,440 --> 00:33:52,960
right because

908
00:33:52,960 --> 00:33:55,120
not everyone speaks english

909
00:33:55,120 --> 00:33:57,120
you can generate report in various

910
00:33:57,120 --> 00:34:00,240
languages which are available here

911
00:34:00,240 --> 00:34:03,440
and also we have an advanced here so in

912
00:34:03,440 --> 00:34:05,760
advance you can say okay do

913
00:34:05,760 --> 00:34:08,480
only want to scan ovals.org or your

914
00:34:08,480 --> 00:34:09,918
target or you want to check all the

915
00:34:09,918 --> 00:34:11,280
subdomains

916
00:34:11,280 --> 00:34:12,960
because i ask for a port scan we can

917
00:34:12,960 --> 00:34:15,199
define which ports we want to scan and i

918
00:34:15,199 --> 00:34:18,639
want to scan portforward 80 and 443

919
00:34:18,639 --> 00:34:21,440
right and define any extra options if we

920
00:34:21,440 --> 00:34:23,199
were performing brute forcing this is

921
00:34:23,199 --> 00:34:24,719
where you would load your users and

922
00:34:24,719 --> 00:34:25,839
passwords

923
00:34:25,839 --> 00:34:28,399
that is the place to put

924
00:34:28,399 --> 00:34:29,918
this information

925
00:34:29,918 --> 00:34:32,000
and there's also extra module options

926
00:34:32,000 --> 00:34:33,440
for example there's integration with

927
00:34:33,440 --> 00:34:36,239
showdown surprise surprise with census

928
00:34:36,239 --> 00:34:38,879
and lots of other uh tools and

929
00:34:38,879 --> 00:34:40,879
the tools which require api key you can

930
00:34:40,879 --> 00:34:43,440
just program that api key here and

931
00:34:43,440 --> 00:34:45,760
provide options there but of course not

932
00:34:45,760 --> 00:34:47,760
just web ui it's also an api you can see

933
00:34:47,760 --> 00:34:49,839
how it works so there's a

934
00:34:49,839 --> 00:34:52,480
json used for of course requests and

935
00:34:52,480 --> 00:34:53,599
responses

936
00:34:53,599 --> 00:34:56,399
once the scan is submitted it's going to

937
00:34:56,399 --> 00:34:58,560
run it in the background and again we

938
00:34:58,560 --> 00:35:00,880
can check the results using the results

939
00:35:00,880 --> 00:35:03,920
button again there's a convenient reload

940
00:35:03,920 --> 00:35:06,720
and last update button there as well so

941
00:35:06,720 --> 00:35:09,280
you can just wait for this gun to

942
00:35:09,280 --> 00:35:11,119
uh complete and once it's complete you

943
00:35:11,119 --> 00:35:13,920
can just go and check it out and while

944
00:35:13,920 --> 00:35:16,800
this is all happening you can go and do

945
00:35:16,800 --> 00:35:18,079
exploration

946
00:35:18,079 --> 00:35:20,079
using the crawler

947
00:35:20,079 --> 00:35:22,320
again i wanted to find out what was

948
00:35:22,320 --> 00:35:24,160
running ruby right there was a ruby

949
00:35:24,160 --> 00:35:25,760
there somewhere right

950
00:35:25,760 --> 00:35:30,160
so there you go you can see how

951
00:35:30,160 --> 00:35:33,440
easily you can just use this uh tool to

952
00:35:33,440 --> 00:35:35,040
search and

953
00:35:35,040 --> 00:35:38,160
there you can see all the all the uh

954
00:35:38,160 --> 00:35:41,280
all the sites uh all the web servers uh

955
00:35:41,280 --> 00:35:44,480
which we're actually using ruby

956
00:35:44,480 --> 00:35:46,800
so this is i think very very cool stuff

957
00:35:46,800 --> 00:35:48,960
same thing with the ports

958
00:35:48,960 --> 00:35:50,480
you can search by port basically you can

959
00:35:50,480 --> 00:35:52,079
search on anything

960
00:35:52,079 --> 00:35:55,520
uh that is um

961
00:35:55,520 --> 00:35:57,839
in the database so at the moment it's

962
00:35:57,839 --> 00:36:00,880
just a free text search oh cloud

963
00:36:00,880 --> 00:36:03,440
player note cloud cloudflare

964
00:36:03,440 --> 00:36:06,079
let's try this

965
00:36:08,320 --> 00:36:10,240
there you go and this is

966
00:36:10,240 --> 00:36:13,359
all all sub domains which uh

967
00:36:13,359 --> 00:36:15,119
have cloudflare

968
00:36:15,119 --> 00:36:19,680
there you go let's get back to our

969
00:36:19,680 --> 00:36:21,680
results one another interesting thing

970
00:36:21,680 --> 00:36:23,359
that you can do with the with the

971
00:36:23,359 --> 00:36:27,440
results right is uh that you can also

972
00:36:27,440 --> 00:36:30,880
for example this result is uh in html

973
00:36:30,880 --> 00:36:32,640
right so we're getting a table

974
00:36:32,640 --> 00:36:33,440
um

975
00:36:33,440 --> 00:36:36,160
rather than uh

976
00:36:36,160 --> 00:36:38,480
copy pasting it into your excel you have

977
00:36:38,480 --> 00:36:40,720
a very handy button here so you can just

978
00:36:40,720 --> 00:36:43,200
go and get your csv file and

979
00:36:43,200 --> 00:36:45,200
download it straight away

980
00:36:45,200 --> 00:36:46,079
and

981
00:36:46,079 --> 00:36:49,599
just open it with excel as normal

982
00:36:49,599 --> 00:36:54,599
so that is the web ui

983
00:36:56,079 --> 00:36:58,240
and now let's talk about vulnerabilities

984
00:36:58,240 --> 00:37:01,440
okay so last year there was this uh

985
00:37:01,440 --> 00:37:03,680
massive microsoft exchange

986
00:37:03,680 --> 00:37:05,280
vulnerabilities

987
00:37:05,280 --> 00:37:06,960
uh there's a an

988
00:37:06,960 --> 00:37:10,800
ssrf uh vulnerability and everyone was

989
00:37:10,800 --> 00:37:13,440
rushing to fix it and see people who had

990
00:37:13,440 --> 00:37:16,240
exchange exposed to the internet if you

991
00:37:16,240 --> 00:37:18,720
have web outlook uh there

992
00:37:18,720 --> 00:37:20,000
i think

993
00:37:20,000 --> 00:37:23,440
more than 50 000 exchange servers which

994
00:37:23,440 --> 00:37:25,920
were found to be vulnerable and

995
00:37:25,920 --> 00:37:27,280
how do you know if you are vulnerable

996
00:37:27,280 --> 00:37:29,520
not vulnerable so uh

997
00:37:29,520 --> 00:37:31,200
we produced this module you can see my

998
00:37:31,200 --> 00:37:33,760
tweet here about this vulnerability we

999
00:37:33,760 --> 00:37:35,680
responded quite quickly and what it

1000
00:37:35,680 --> 00:37:37,280
allowed us to do it allowed to scan

1001
00:37:37,280 --> 00:37:39,599
networks and i know that this tool was

1002
00:37:39,599 --> 00:37:43,119
actually used by the uh cert by the

1003
00:37:43,119 --> 00:37:45,680
computer emergency response teams of the

1004
00:37:45,680 --> 00:37:48,800
several countries who scan the country

1005
00:37:48,800 --> 00:37:50,560
entire ip range

1006
00:37:50,560 --> 00:37:52,640
they found the vulnerable microsoft

1007
00:37:52,640 --> 00:37:54,560
exchange service using

1008
00:37:54,560 --> 00:37:57,280
our tool and then they contacted the

1009
00:37:57,280 --> 00:37:58,800
these organizations who were still

1010
00:37:58,800 --> 00:38:01,520
running unpatched service

1011
00:38:01,520 --> 00:38:03,920
so that's a very great success story for

1012
00:38:03,920 --> 00:38:06,400
a little free open source tool written

1013
00:38:06,400 --> 00:38:08,800
by students and this is how you would do

1014
00:38:08,800 --> 00:38:10,400
it you just use the attacker on your

1015
00:38:10,400 --> 00:38:13,040
network and you provide ms exchange cve

1016
00:38:13,040 --> 00:38:15,520
2021-2685

1017
00:38:15,520 --> 00:38:16,720
as a

1018
00:38:16,720 --> 00:38:19,359
parameter as a module that you wish to

1019
00:38:19,359 --> 00:38:21,680
use to perform the scan

1020
00:38:21,680 --> 00:38:24,960
so nettacker to summarize the use cases

1021
00:38:24,960 --> 00:38:26,960
you can use it for asset discovery you

1022
00:38:26,960 --> 00:38:29,520
can scan your network for open ports you

1023
00:38:29,520 --> 00:38:31,440
can scan your network for new hosts new

1024
00:38:31,440 --> 00:38:34,320
web servers ssh service whatever right

1025
00:38:34,320 --> 00:38:36,160
you can scan your network for default

1026
00:38:36,160 --> 00:38:38,560
credentials right uh admin admin of

1027
00:38:38,560 --> 00:38:41,839
course is a great example and i found a

1028
00:38:41,839 --> 00:38:44,960
whole bunch of audio visual kit and one

1029
00:38:44,960 --> 00:38:46,640
of my customers network who has been to

1030
00:38:46,640 --> 00:38:49,040
perform this pen testing engagement

1031
00:38:49,040 --> 00:38:50,720
which is basically web cameras all

1032
00:38:50,720 --> 00:38:52,720
around their premises and they just had

1033
00:38:52,720 --> 00:38:54,640
admin admin so you can just

1034
00:38:54,640 --> 00:38:56,400
connect and watch

1035
00:38:56,400 --> 00:38:58,320
what is going on in the entire building

1036
00:38:58,320 --> 00:39:01,520
using this right you can also scan a

1037
00:39:01,520 --> 00:39:03,119
network for a specific vulnerability

1038
00:39:03,119 --> 00:39:04,640
like i showed you for example exchange

1039
00:39:04,640 --> 00:39:07,760
cve you can also scan some domains of

1040
00:39:07,760 --> 00:39:10,079
the organization or proports on them

1041
00:39:10,079 --> 00:39:13,599
discover exploit ssl certificates again

1042
00:39:13,599 --> 00:39:16,560
very great use case um

1043
00:39:16,560 --> 00:39:18,320
find subdomains hosting vulnerable

1044
00:39:18,320 --> 00:39:21,200
versions of wordpress drupal and joomla

1045
00:39:21,200 --> 00:39:23,040
again how you do it because we have a

1046
00:39:23,040 --> 00:39:24,720
module which actually shows the version

1047
00:39:24,720 --> 00:39:26,560
of wordpress and you can also okay i've

1048
00:39:26,560 --> 00:39:29,040
got like 500 wordpress is running in my

1049
00:39:29,040 --> 00:39:30,320
network and

1050
00:39:30,320 --> 00:39:31,839
i can see the versions and these ones

1051
00:39:31,839 --> 00:39:33,599
are out of date which are probably

1052
00:39:33,599 --> 00:39:36,400
vulnerable um of course all the scans go

1053
00:39:36,400 --> 00:39:38,480
into the database searchable you can

1054
00:39:38,480 --> 00:39:40,800
download them as excel spreadsheet

1055
00:39:40,800 --> 00:39:43,119
there's one little known fact about

1056
00:39:43,119 --> 00:39:45,040
oba's top 10 there's a different type of

1057
00:39:45,040 --> 00:39:48,720
os top 10 that is oas github

1058
00:39:48,720 --> 00:39:51,040
project top 10. so what we're seeing

1059
00:39:51,040 --> 00:39:52,800
here is the top

1060
00:39:52,800 --> 00:39:55,599
10 most start os repos if you don't know

1061
00:39:55,599 --> 00:39:58,160
on github there is a notion of a star so

1062
00:39:58,160 --> 00:39:59,359
you can

1063
00:39:59,359 --> 00:40:02,240
start or bookmark a particular

1064
00:40:02,240 --> 00:40:04,800
project and that basically usually

1065
00:40:04,800 --> 00:40:07,200
indicates how popular this project is

1066
00:40:07,200 --> 00:40:09,760
and you can see that uh ned tucker is

1067
00:40:09,760 --> 00:40:12,160
currently on the eighth place

1068
00:40:12,160 --> 00:40:13,839
and i was actually surprised to find out

1069
00:40:13,839 --> 00:40:16,319
that top ten is not actually

1070
00:40:16,319 --> 00:40:17,440
um

1071
00:40:17,440 --> 00:40:19,839
not number one the most popular oas

1072
00:40:19,839 --> 00:40:22,000
project is cheat sheet series

1073
00:40:22,000 --> 00:40:23,760
this is really good to find out because

1074
00:40:23,760 --> 00:40:25,200
obvious top 10 is probably the most

1075
00:40:25,200 --> 00:40:27,359
downloaded pdf file but not the most

1076
00:40:27,359 --> 00:40:29,200
popular open source project for

1077
00:40:29,200 --> 00:40:30,560
collaboration

1078
00:40:30,560 --> 00:40:33,040
so there you go that is another our top

1079
00:40:33,040 --> 00:40:36,160
10. so what is coming up in version 003

1080
00:40:36,160 --> 00:40:38,400
which is the current version the modules

1081
00:40:38,400 --> 00:40:41,040
are all written in yaml which means you

1082
00:40:41,040 --> 00:40:42,720
can go and create your own module and

1083
00:40:42,720 --> 00:40:44,720
that will be a module to scan for

1084
00:40:44,720 --> 00:40:46,880
anything you want

1085
00:40:46,880 --> 00:40:49,040
discover vulnerability which is fully

1086
00:40:49,040 --> 00:40:50,400
defined by you

1087
00:40:50,400 --> 00:40:53,520
or uh perform a brute forcing attack so

1088
00:40:53,520 --> 00:40:55,440
if you have a set of credentials and say

1089
00:40:55,440 --> 00:40:58,880
okay this is where my endpoint is and uh

1090
00:40:58,880 --> 00:41:01,200
that's that i want to perform a brute

1091
00:41:01,200 --> 00:41:03,280
force using ssh or whatever you can

1092
00:41:03,280 --> 00:41:07,119
define it in yaml and yeah and we are

1093
00:41:07,119 --> 00:41:09,520
welcoming all the contributors to

1094
00:41:09,520 --> 00:41:11,680
contribute please do check out the

1095
00:41:11,680 --> 00:41:15,359
developers page on the wiki uh again you

1096
00:41:15,359 --> 00:41:17,200
don't have to be a python developer to

1097
00:41:17,200 --> 00:41:19,359
help us you can help us with translation

1098
00:41:19,359 --> 00:41:22,800
and documentation um and uh yeah that's

1099
00:41:22,800 --> 00:41:25,359
it uh go and attack your network before

1100
00:41:25,359 --> 00:41:28,400
the real attackers do

1101
00:41:31,440 --> 00:41:33,200
i think i have time for a couple of

1102
00:41:33,200 --> 00:41:34,640
questions

1103
00:41:34,640 --> 00:41:36,879
yeah

1104
00:41:37,040 --> 00:41:39,520
how does this uh work with very large

1105
00:41:39,520 --> 00:41:41,520
network slash 16s

1106
00:41:41,520 --> 00:41:43,359
for instance taking a look at tools like

1107
00:41:43,359 --> 00:41:45,119
axiom to do distributed scanning at

1108
00:41:45,119 --> 00:41:46,000
scale

1109
00:41:46,000 --> 00:41:48,400
uh it works it's just going to be quite

1110
00:41:48,400 --> 00:41:49,280
slow

1111
00:41:49,280 --> 00:41:50,800
and again because you can control the

1112
00:41:50,800 --> 00:41:54,000
number of threads you can make it slower

1113
00:41:54,000 --> 00:41:55,440
or uh

1114
00:41:55,440 --> 00:41:58,079
faster but it works i did scan the slash

1115
00:41:58,079 --> 00:42:00,319
16 network of an organization a very

1116
00:42:00,319 --> 00:42:02,400
large bank in the city of london

1117
00:42:02,400 --> 00:42:04,720
worked perfectly and as a result we had

1118
00:42:04,720 --> 00:42:06,240
all the results in the database and we

1119
00:42:06,240 --> 00:42:10,240
got a really big excel spreadsheet

1120
00:42:15,599 --> 00:42:18,319
can you chain these searches together so

1121
00:42:18,319 --> 00:42:20,480
the first search might be one that finds

1122
00:42:20,480 --> 00:42:22,560
hosts that are open or have an open port

1123
00:42:22,560 --> 00:42:24,480
and then you run a scan on them based on

1124
00:42:24,480 --> 00:42:25,760
the database

1125
00:42:25,760 --> 00:42:27,599
uh yes that was the whole idea of the

1126
00:42:27,599 --> 00:42:30,319
attacker and it doesn't currently work

1127
00:42:30,319 --> 00:42:31,760
with all the modules but there are

1128
00:42:31,760 --> 00:42:33,440
modules that you can chain and they're

1129
00:42:33,440 --> 00:42:35,440
based on the previous module output so

1130
00:42:35,440 --> 00:42:38,720
for example if you uh have a

1131
00:42:38,720 --> 00:42:41,359
web server responding on port 80 only

1132
00:42:41,359 --> 00:42:43,040
then you will perform the scan same

1133
00:42:43,040 --> 00:42:45,599
thing with wordpress if there is no uh

1134
00:42:45,599 --> 00:42:46,800
if there's no

1135
00:42:46,800 --> 00:42:48,480
web server running it will not run the

1136
00:42:48,480 --> 00:42:50,800
wordpress scan so we are enhancing that

1137
00:42:50,800 --> 00:42:53,119
so we are planning to do something like

1138
00:42:53,119 --> 00:42:55,359
workflows so you can actually just like

1139
00:42:55,359 --> 00:42:57,839
you create profiles you create workflows

1140
00:42:57,839 --> 00:42:59,839
and you put the modules in a chain and

1141
00:42:59,839 --> 00:43:01,920
you define what you expect to find to

1142
00:43:01,920 --> 00:43:04,079
for the whole workflow to

1143
00:43:04,079 --> 00:43:06,720
do its job

1144
00:43:08,240 --> 00:43:11,720
any more questions

1145
00:43:17,359 --> 00:43:19,520
do you think it's worthwhile adding a

1146
00:43:19,520 --> 00:43:21,680
feature to be able to check for their

1147
00:43:21,680 --> 00:43:24,800
http headers as well because you were on

1148
00:43:24,800 --> 00:43:26,400
about checking like the server header

1149
00:43:26,400 --> 00:43:28,160
but there are other headers as well that

1150
00:43:28,160 --> 00:43:30,319
we should also there are and you can

1151
00:43:30,319 --> 00:43:32,319
create a module yourself you can do it

1152
00:43:32,319 --> 00:43:33,920
easy

1153
00:43:33,920 --> 00:43:36,079
any particular header you want you can

1154
00:43:36,079 --> 00:43:37,599
you want to check if data returns

1155
00:43:37,599 --> 00:43:40,240
cookies yeah every you can check for any

1156
00:43:40,240 --> 00:43:43,200
any header anything which is in the

1157
00:43:43,200 --> 00:43:47,279
response uh from the target

1158
00:43:48,240 --> 00:43:49,839
and because it also combined with brute

1159
00:43:49,839 --> 00:43:52,000
forcing i think that it makes it like a

1160
00:43:52,000 --> 00:43:55,839
really awesome little tool

1161
00:43:56,319 --> 00:43:58,240
any more questions okay

1162
00:43:58,240 --> 00:44:00,879
oh one more

1163
00:44:00,960 --> 00:44:03,200
sorry

1164
00:44:03,839 --> 00:44:06,240
so uh you mentioned about the the

1165
00:44:06,240 --> 00:44:08,400
plugins written in yaml file

1166
00:44:08,400 --> 00:44:11,359
yeah but will the plugins written in

1167
00:44:11,359 --> 00:44:13,920
python script will be deprecated in the

1168
00:44:13,920 --> 00:44:16,960
in the current version or no no so the

1169
00:44:16,960 --> 00:44:18,960
in version zero zero two the modules

1170
00:44:18,960 --> 00:44:21,440
themselves the core and the modules are

1171
00:44:21,440 --> 00:44:24,240
written in python in version 003 the

1172
00:44:24,240 --> 00:44:27,040
modules are described as yamo

1173
00:44:27,040 --> 00:44:31,359
but the core is still is still in python

1174
00:44:31,660 --> 00:44:35,200
[Music]

1175
00:44:35,200 --> 00:44:37,780
okay thank you very much

1176
00:44:37,780 --> 00:44:40,889
[Applause]

