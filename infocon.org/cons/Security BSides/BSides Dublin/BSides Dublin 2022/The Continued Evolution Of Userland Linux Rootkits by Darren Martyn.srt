1
00:00:03,040 --> 00:00:03,840
all right

2
00:00:03,840 --> 00:00:06,799
um hi everyone um

3
00:00:06,799 --> 00:00:07,680
so

4
00:00:07,680 --> 00:00:09,120
i'm here to talk to you about linux

5
00:00:09,120 --> 00:00:12,000
rootkits i'm darren um i do security

6
00:00:12,000 --> 00:00:13,360
research uh

7
00:00:13,360 --> 00:00:15,599
and linux stuff

8
00:00:15,599 --> 00:00:17,199
um all right so i'm just going to get

9
00:00:17,199 --> 00:00:18,640
straight into it because of a shitload

10
00:00:18,640 --> 00:00:21,680
of stuff to cover and half an hour um

11
00:00:21,680 --> 00:00:22,480
so

12
00:00:22,480 --> 00:00:24,080
i'll open up with so what i'm talking

13
00:00:24,080 --> 00:00:26,160
about here is a ld preload based linux

14
00:00:26,160 --> 00:00:28,400
userland rootkits um

15
00:00:28,400 --> 00:00:29,760
so i guess the first thing i'll cover is

16
00:00:29,760 --> 00:00:32,079
what what is ld preload and ld preload

17
00:00:32,079 --> 00:00:33,520
is an environmental variable interpreted

18
00:00:33,520 --> 00:00:35,920
by dynamic linker and it allows you to

19
00:00:35,920 --> 00:00:37,360
put libraries in ahead of other

20
00:00:37,360 --> 00:00:38,399
libraries

21
00:00:38,399 --> 00:00:39,200
so

22
00:00:39,200 --> 00:00:40,480
for the people who are more familiar

23
00:00:40,480 --> 00:00:42,079
with windows it allows you to change the

24
00:00:42,079 --> 00:00:44,640
search order of how libraries and code

25
00:00:44,640 --> 00:00:46,640
are loaded into software so you can put

26
00:00:46,640 --> 00:00:48,719
stuff in ahead of other stuff

27
00:00:48,719 --> 00:00:50,719
so it's really useful for debugging you

28
00:00:50,719 --> 00:00:52,320
can change execution paper at runtime

29
00:00:52,320 --> 00:00:53,520
you can replace functions you can

30
00:00:53,520 --> 00:00:55,039
substitute out functions you can hook

31
00:00:55,039 --> 00:00:56,079
and stuff

32
00:00:56,079 --> 00:00:57,199
and of course that makes it really

33
00:00:57,199 --> 00:00:59,440
useful for root kits

34
00:00:59,440 --> 00:01:01,280
um it can be set globally system-wide on

35
00:01:01,280 --> 00:01:04,159
linux with the cld.soda preload file

36
00:01:04,159 --> 00:01:08,080
which is it's just a file and it it

37
00:01:08,080 --> 00:01:09,920
parses it really loosely so like the

38
00:01:09,920 --> 00:01:11,439
dynamic linker will look at this file

39
00:01:11,439 --> 00:01:12,960
little anything that looks like a

40
00:01:12,960 --> 00:01:15,920
library will try load which is quite fun

41
00:01:15,920 --> 00:01:16,720
um

42
00:01:16,720 --> 00:01:18,880
on os x there's an equivalent called ld

43
00:01:18,880 --> 00:01:20,560
insert libraries on windows we've

44
00:01:20,560 --> 00:01:23,200
happened at dlls but um if you mess

45
00:01:23,200 --> 00:01:24,960
about that in dlls and windows just

46
00:01:24,960 --> 00:01:26,960
nothing works um it's pretty much

47
00:01:26,960 --> 00:01:29,200
documented as heroes here be dragons if

48
00:01:29,200 --> 00:01:31,600
you if you go here you're on your own um

49
00:01:31,600 --> 00:01:34,400
pretty much any platform has some way to

50
00:01:34,400 --> 00:01:35,840
override

51
00:01:35,840 --> 00:01:37,680
the library search path

52
00:01:37,680 --> 00:01:38,960
which is great because it means you can

53
00:01:38,960 --> 00:01:41,600
write super portable root kits

54
00:01:41,600 --> 00:01:43,360
so we can replace functions at runtime

55
00:01:43,360 --> 00:01:45,600
we can mess about with what programs

56
00:01:45,600 --> 00:01:48,479
with what programs are doing so we can

57
00:01:48,479 --> 00:01:50,399
make programs live

58
00:01:50,399 --> 00:01:51,360
so

59
00:01:51,360 --> 00:01:52,799
write rootkits

60
00:01:52,799 --> 00:01:54,720
and this allows to hide stuff do stuff

61
00:01:54,720 --> 00:01:57,040
in the background blah blah blah um

62
00:01:57,040 --> 00:01:58,560
so i kind of come up the list of like

63
00:01:58,560 --> 00:01:59,920
because everyone when people think root

64
00:01:59,920 --> 00:02:01,680
kids people like oh kernel root kits you

65
00:02:01,680 --> 00:02:03,680
know kernel modules and you know ring

66
00:02:03,680 --> 00:02:05,759
zero stuff it's like no no the problem

67
00:02:05,759 --> 00:02:07,520
with writing kernel root kits for linux

68
00:02:07,520 --> 00:02:09,280
is the pain in the ass because the linux

69
00:02:09,280 --> 00:02:12,000
kernel api is not considered stable they

70
00:02:12,000 --> 00:02:13,920
keep changing all the time

71
00:02:13,920 --> 00:02:15,760
so like you end up having this like big

72
00:02:15,760 --> 00:02:18,560
five big file of if deaths like to or

73
00:02:18,560 --> 00:02:20,080
like having to recompile your kernel

74
00:02:20,080 --> 00:02:22,000
room kit for like every single major

75
00:02:22,000 --> 00:02:23,920
release of linux which is a pain in the

76
00:02:23,920 --> 00:02:25,599
butt so instead you just write one

77
00:02:25,599 --> 00:02:27,760
userline thing which works everywhere

78
00:02:27,760 --> 00:02:28,959
um

79
00:02:28,959 --> 00:02:31,040
unlike the pros are like they're stable

80
00:02:31,040 --> 00:02:33,599
they're easy to write um it takes like

81
00:02:33,599 --> 00:02:35,519
20 minutes to implement you hook the

82
00:02:35,519 --> 00:02:37,840
cons are like that they suck

83
00:02:37,840 --> 00:02:38,720
um

84
00:02:38,720 --> 00:02:40,959
they absolutely suck because there is

85
00:02:40,959 --> 00:02:43,360
one place on disc where they live so if

86
00:02:43,360 --> 00:02:45,440
you're a forensicator you just cat

87
00:02:45,440 --> 00:02:48,400
ld etsy ld.soda preload and you probably

88
00:02:48,400 --> 00:02:50,239
found the kit

89
00:02:50,239 --> 00:02:51,920
and they also mess up performance which

90
00:02:51,920 --> 00:02:54,000
i'm going to point out later

91
00:02:54,000 --> 00:02:55,360
so i'm going to talk you through first

92
00:02:55,360 --> 00:02:57,599
how to write one of these um

93
00:02:57,599 --> 00:02:59,200
for those following along who want to

94
00:02:59,200 --> 00:03:01,200
have a bit of fun with this

95
00:03:01,200 --> 00:03:02,959
so what you do is you just identify

96
00:03:02,959 --> 00:03:04,239
something you need to hook so if you

97
00:03:04,239 --> 00:03:06,720
want to hide a file you just s trace ls

98
00:03:06,720 --> 00:03:08,720
and you see what's it what function

99
00:03:08,720 --> 00:03:10,239
calls ls

100
00:03:10,239 --> 00:03:12,560
looks at and does and then you go okay

101
00:03:12,560 --> 00:03:14,000
what what are these do i have to mess

102
00:03:14,000 --> 00:03:15,760
about with to hide stuff

103
00:03:15,760 --> 00:03:17,519
um you figure out how to hide the stuff

104
00:03:17,519 --> 00:03:19,200
which is usually just like do a string

105
00:03:19,200 --> 00:03:20,720
comparison if it's got like a magic

106
00:03:20,720 --> 00:03:23,040
string in it hide it and then you write

107
00:03:23,040 --> 00:03:24,799
the hook or you know draw the

108
00:03:24,799 --> 00:03:27,120
owl i believe it's termed enough

109
00:03:27,120 --> 00:03:29,040
and then you just repeat until you know

110
00:03:29,040 --> 00:03:30,560
the thing works

111
00:03:30,560 --> 00:03:31,680
so we're good i'm just going to go

112
00:03:31,680 --> 00:03:34,319
through a few examples so this is a very

113
00:03:34,319 --> 00:03:36,000
simple hook that cripples the randomness

114
00:03:36,000 --> 00:03:38,239
function on linux um

115
00:03:38,239 --> 00:03:40,560
it'll just return 42.

116
00:03:40,560 --> 00:03:42,640
so we've a simple program that just

117
00:03:42,640 --> 00:03:44,720
calls rand and like gets a number but

118
00:03:44,720 --> 00:03:46,720
when the hook is installed it'll only

119
00:03:46,720 --> 00:03:48,480
ever return 42

120
00:03:48,480 --> 00:03:50,319
and like this kind of you know it's kind

121
00:03:50,319 --> 00:03:53,040
of like the the hello world of like

122
00:03:53,040 --> 00:03:54,720
writing these hooks because like three

123
00:03:54,720 --> 00:03:55,599
lines

124
00:03:55,599 --> 00:03:57,519
but it shows you like you can like break

125
00:03:57,519 --> 00:03:59,360
the randomness in video games or like

126
00:03:59,360 --> 00:04:00,480
break the randomness for generating

127
00:04:00,480 --> 00:04:02,319
cryptographic keys

128
00:04:02,319 --> 00:04:03,040
by

129
00:04:03,040 --> 00:04:05,680
corrupting the random function

130
00:04:05,680 --> 00:04:07,920
um you can also do conditionals in your

131
00:04:07,920 --> 00:04:10,080
hooks so like if we go back like that

132
00:04:10,080 --> 00:04:12,400
looks like it's just return number you

133
00:04:12,400 --> 00:04:14,080
know it's not very sophisticated but we

134
00:04:14,080 --> 00:04:15,439
can add like

135
00:04:15,439 --> 00:04:17,120
we can have it load the actual random

136
00:04:17,120 --> 00:04:20,160
function and have like a getting so like

137
00:04:20,160 --> 00:04:21,759
if a certain environmental variable is

138
00:04:21,759 --> 00:04:23,600
set actually return real randomness

139
00:04:23,600 --> 00:04:26,400
otherwise return broken rand

140
00:04:26,400 --> 00:04:27,919
and like this just an example of that

141
00:04:27,919 --> 00:04:29,040
where like

142
00:04:29,040 --> 00:04:31,440
if we set the packs equals lol or

143
00:04:31,440 --> 00:04:34,000
hexagons whatever and load it it won't

144
00:04:34,000 --> 00:04:36,720
do the thing it's like this conditional

145
00:04:36,720 --> 00:04:38,560
will come in handy later this just like

146
00:04:38,560 --> 00:04:40,720
the very contrived very simple example

147
00:04:40,720 --> 00:04:42,080
that i can use like show you how these

148
00:04:42,080 --> 00:04:44,080
hooks are written um that actually fits

149
00:04:44,080 --> 00:04:46,160
on a slide

150
00:04:46,160 --> 00:04:47,680
um

151
00:04:47,680 --> 00:04:50,080
you can add multiple conditions um you

152
00:04:50,080 --> 00:04:52,160
can do stuff like basically your hooks

153
00:04:52,160 --> 00:04:54,560
act as i o filters um

154
00:04:54,560 --> 00:04:55,919
so here we have a reader example it's

155
00:04:55,919 --> 00:04:57,680
like an actual practical example that's

156
00:04:57,680 --> 00:04:59,759
partially borrowed from the jinx 2 root

157
00:04:59,759 --> 00:05:00,639
kit

158
00:05:00,639 --> 00:05:02,560
so

159
00:05:02,560 --> 00:05:04,479
all you're doing is you're

160
00:05:04,479 --> 00:05:06,800
creating reader and then you're creating

161
00:05:06,800 --> 00:05:11,039
the original reader and if string string

162
00:05:11,039 --> 00:05:13,840
your hidden file name if it might if the

163
00:05:13,840 --> 00:05:16,240
res response of reader contains your

164
00:05:16,240 --> 00:05:18,240
hidden file name return

165
00:05:18,240 --> 00:05:20,000
buggery nothing

166
00:05:20,000 --> 00:05:22,320
return like nothing however if it

167
00:05:22,320 --> 00:05:24,000
doesn't if the directory being ls

168
00:05:24,000 --> 00:05:25,440
doesn't have your hidden file then you

169
00:05:25,440 --> 00:05:26,960
can just return the file contents so the

170
00:05:26,960 --> 00:05:28,960
admin doesn't you know just have all

171
00:05:28,960 --> 00:05:30,639
empty folders everywhere

172
00:05:30,639 --> 00:05:32,320
and it's just an example of this working

173
00:05:32,320 --> 00:05:34,160
like you run ls and you've got like the

174
00:05:34,160 --> 00:05:35,520
hide me's

175
00:05:35,520 --> 00:05:36,479
you

176
00:05:36,479 --> 00:05:39,120
do the preload and run ls and the hidden

177
00:05:39,120 --> 00:05:41,360
files are hidden

178
00:05:41,360 --> 00:05:43,280
um and this is actually a great time to

179
00:05:43,280 --> 00:05:45,120
show the one the timing attacks i found

180
00:05:45,120 --> 00:05:46,479
that allows you to detect these root

181
00:05:46,479 --> 00:05:48,000
kits because one of the interesting

182
00:05:48,000 --> 00:05:49,280
things is

183
00:05:49,280 --> 00:05:50,400
because you're doing all that string

184
00:05:50,400 --> 00:05:51,759
comparison crap in the middle of your

185
00:05:51,759 --> 00:05:53,199
root kit you absolutely murder

186
00:05:53,199 --> 00:05:56,080
performance so like

187
00:05:56,080 --> 00:05:58,160
every time reader is called performance

188
00:05:58,160 --> 00:05:59,759
like takes a hit makes you do all this

189
00:05:59,759 --> 00:06:01,680
diversion and like go off like to check

190
00:06:01,680 --> 00:06:02,800
string comparisons which is

191
00:06:02,800 --> 00:06:05,360
computationally actually quite expensive

192
00:06:05,360 --> 00:06:07,039
so

193
00:06:07,039 --> 00:06:09,120
because all that extra stuff we can

194
00:06:09,120 --> 00:06:11,039
actually demonstrate like the actual

195
00:06:11,039 --> 00:06:13,039
performance impact so

196
00:06:13,039 --> 00:06:15,280
with the hook installed you've got like

197
00:06:15,280 --> 00:06:17,680
it the real time is like three

198
00:06:17,680 --> 00:06:20,080
milliseconds whatever whatever that

199
00:06:20,080 --> 00:06:23,160
value is like 0.003 without the hook at

200
00:06:23,160 --> 00:06:25,840
0.002 that's like a 50 percent in

201
00:06:25,840 --> 00:06:27,919
worsening of performance and that's just

202
00:06:27,919 --> 00:06:30,000
like one pretty contrived simple example

203
00:06:30,000 --> 00:06:31,759
if you imagine that system wide you know

204
00:06:31,759 --> 00:06:34,160
every time reader is called or any other

205
00:06:34,160 --> 00:06:35,919
hooked function is called you're getting

206
00:06:35,919 --> 00:06:38,400
whacked with like a 50 plus performance

207
00:06:38,400 --> 00:06:40,479
hit somebody's gonna notice you know

208
00:06:40,479 --> 00:06:41,919
it's like okay you might be able to find

209
00:06:41,919 --> 00:06:43,360
all the hidden files and stuff but your

210
00:06:43,360 --> 00:06:45,759
computer is slow as you know your

211
00:06:45,759 --> 00:06:47,440
computer doesn't work anymore it's like

212
00:06:47,440 --> 00:06:48,479
the whole thing you know virus is

213
00:06:48,479 --> 00:06:50,080
slowing down my computer but actually

214
00:06:50,080 --> 00:06:51,440
real

215
00:06:51,440 --> 00:06:52,479
um

216
00:06:52,479 --> 00:06:53,759
so another thing you can do with these

217
00:06:53,759 --> 00:06:55,680
is you can like it's really trivial to

218
00:06:55,680 --> 00:06:57,520
implement local backdoors with preload

219
00:06:57,520 --> 00:06:59,759
kits and they all like all the root kits

220
00:06:59,759 --> 00:07:02,319
i've examined in the wild that use this

221
00:07:02,319 --> 00:07:04,080
that use ld preload pretty much all

222
00:07:04,080 --> 00:07:06,240
implement the exact same local back door

223
00:07:06,240 --> 00:07:08,080
and it's just

224
00:07:08,080 --> 00:07:10,160
if an environmental variable is set and

225
00:07:10,160 --> 00:07:12,720
a set uid binary is being ran spawn a

226
00:07:12,720 --> 00:07:14,479
root shell um

227
00:07:14,479 --> 00:07:16,800
they all do it exactly the same way and

228
00:07:16,800 --> 00:07:18,080
it's kind of funny because like just

229
00:07:18,080 --> 00:07:19,840
this one functions just been copy and

230
00:07:19,840 --> 00:07:21,599
pasted across every single rootkit in

231
00:07:21,599 --> 00:07:22,720
the wild

232
00:07:22,720 --> 00:07:24,639
and it's this is this is exactly that

233
00:07:24,639 --> 00:07:26,080
function they're all just variations in

234
00:07:26,080 --> 00:07:28,080
this where it's like oh if an enviro is

235
00:07:28,080 --> 00:07:29,520
set

236
00:07:29,520 --> 00:07:30,479
and

237
00:07:30,479 --> 00:07:32,240
the current uid is zero like if you're

238
00:07:32,240 --> 00:07:34,000
running like pseudo or something drop a

239
00:07:34,000 --> 00:07:35,759
root shell instead

240
00:07:35,759 --> 00:07:37,280
and then what they do is they put a call

241
00:07:37,280 --> 00:07:38,400
to this hook

242
00:07:38,400 --> 00:07:40,880
in every other hook

243
00:07:40,880 --> 00:07:42,880
so it makes sure it gets called so like

244
00:07:42,880 --> 00:07:44,240
you just shove it like in the middle the

245
00:07:44,240 --> 00:07:45,520
access hook where it's not going to do

246
00:07:45,520 --> 00:07:47,280
any harm or you could stick in a

247
00:07:47,280 --> 00:07:48,800
constructor or destructor but this

248
00:07:48,800 --> 00:07:50,800
sounds like done in practice

249
00:07:50,800 --> 00:07:52,400
and this is how that back door works you

250
00:07:52,400 --> 00:07:54,400
know you on the system's got this rook

251
00:07:54,400 --> 00:07:56,319
installed you know you set the magic

252
00:07:56,319 --> 00:07:58,240
environmental variable to whatever value

253
00:07:58,240 --> 00:08:00,400
and run a set uid binary next thing pops

254
00:08:00,400 --> 00:08:01,840
a root shell instead of like doing

255
00:08:01,840 --> 00:08:04,000
whatever it's supposed to do

256
00:08:04,000 --> 00:08:06,160
it's like pretty straightforward but

257
00:08:06,160 --> 00:08:07,759
every like the thing is all these root

258
00:08:07,759 --> 00:08:09,280
kits also implement like a wide variety

259
00:08:09,280 --> 00:08:10,879
of remote back doors

260
00:08:10,879 --> 00:08:12,639
um

261
00:08:12,639 --> 00:08:14,160
this where it gets

262
00:08:14,160 --> 00:08:15,680
quite interesting so this is where it

263
00:08:15,680 --> 00:08:17,039
gets neat and i'm going to go back and

264
00:08:17,039 --> 00:08:18,400
forth a bit

265
00:08:18,400 --> 00:08:19,440
so

266
00:08:19,440 --> 00:08:22,400
most of them the jinx 2 family lineage

267
00:08:22,400 --> 00:08:24,479
of these root kits pretty much all use

268
00:08:24,479 --> 00:08:26,479
they all hook the accept function and

269
00:08:26,479 --> 00:08:28,160
the accept function is like what's

270
00:08:28,160 --> 00:08:30,000
called like when a socket connection is

271
00:08:30,000 --> 00:08:32,159
made to like when you when you connect

272
00:08:32,159 --> 00:08:34,240
to something like when you are listening

273
00:08:34,240 --> 00:08:36,320
on a socket and then you accept the

274
00:08:36,320 --> 00:08:38,240
socket blah blah

275
00:08:38,240 --> 00:08:39,760
they all basically just have like a

276
00:08:39,760 --> 00:08:42,000
magic port that like if a mat if a

277
00:08:42,000 --> 00:08:43,760
certain magic port is

278
00:08:43,760 --> 00:08:44,880
like set

279
00:08:44,880 --> 00:08:46,959
then it drops you a shell instead of

280
00:08:46,959 --> 00:08:48,959
giving you like access to the web server

281
00:08:48,959 --> 00:08:51,279
a bunch of others like umbreon father

282
00:08:51,279 --> 00:08:53,680
vlani and a few other of the

283
00:08:53,680 --> 00:08:54,959
fields of the slightly lighter

284
00:08:54,959 --> 00:08:56,800
generation rootkits um

285
00:08:56,800 --> 00:08:58,959
hijack pam they

286
00:08:58,959 --> 00:09:00,000
add like

287
00:09:00,000 --> 00:09:01,680
an extra check to pam to implement like

288
00:09:01,680 --> 00:09:04,320
a magic password and ssh um

289
00:09:04,320 --> 00:09:06,399
that's pretty popular in some of the

290
00:09:06,399 --> 00:09:08,320
stuff in some of the in the wild ones

291
00:09:08,320 --> 00:09:10,880
and then another what another example

292
00:09:10,880 --> 00:09:13,200
when i saw hooks right where if you try

293
00:09:13,200 --> 00:09:15,600
log in with a magic username

294
00:09:15,600 --> 00:09:17,200
to ssh

295
00:09:17,200 --> 00:09:18,000
it

296
00:09:18,000 --> 00:09:20,320
triggers like a hook that

297
00:09:20,320 --> 00:09:22,880
spawns like a bind shell on a high port

298
00:09:22,880 --> 00:09:25,279
and it's like just kind of weird and

299
00:09:25,279 --> 00:09:26,880
then some of the earlier ones used like

300
00:09:26,880 --> 00:09:29,120
port knocking magic packets for their

301
00:09:29,120 --> 00:09:30,959
more remote back doors like if you send

302
00:09:30,959 --> 00:09:33,360
a packet with a certain like magic value

303
00:09:33,360 --> 00:09:35,519
in it it would send back a reverse shell

304
00:09:35,519 --> 00:09:36,800
some of the more recent ones i've seen

305
00:09:36,800 --> 00:09:38,320
have done stuff like hot swapping etsy

306
00:09:38,320 --> 00:09:40,640
password and etsy shadow at runtime so

307
00:09:40,640 --> 00:09:41,920
like

308
00:09:41,920 --> 00:09:43,760
they will intercept like the call to

309
00:09:43,760 --> 00:09:47,040
like read e2c pass wd and give it like a

310
00:09:47,040 --> 00:09:49,120
replacement passwd file in memory which

311
00:09:49,120 --> 00:09:50,480
i thought was quite neat to like

312
00:09:50,480 --> 00:09:52,959
implement like an extra user and some of

313
00:09:52,959 --> 00:09:54,640
them do that with the authorized keys

314
00:09:54,640 --> 00:09:57,440
file um basically there is infinite

315
00:09:57,440 --> 00:09:59,040
potential to cope with like weird new

316
00:09:59,040 --> 00:10:01,120
ways to like implement remote backdoors

317
00:10:01,120 --> 00:10:03,040
entirely in user space by hooking

318
00:10:03,040 --> 00:10:05,760
various functions um you have to kind of

319
00:10:05,760 --> 00:10:07,120
think outside the box a bit these are

320
00:10:07,120 --> 00:10:08,959
just ones that we've actually seen

321
00:10:08,959 --> 00:10:11,839
implemented by people and actually used

322
00:10:11,839 --> 00:10:12,880
so like

323
00:10:12,880 --> 00:10:14,320
i'll go through the example like how the

324
00:10:14,320 --> 00:10:15,600
accept hook works is pretty

325
00:10:15,600 --> 00:10:19,440
straightforward so this is from jinx 2

326
00:10:19,440 --> 00:10:21,839
and all it is is you're replacing the

327
00:10:21,839 --> 00:10:23,279
accept function with your own accept

328
00:10:23,279 --> 00:10:26,000
function and

329
00:10:26,000 --> 00:10:27,120
you just

330
00:10:27,120 --> 00:10:29,360
get you know you do accept on the socket

331
00:10:29,360 --> 00:10:31,600
by getting your old accept function and

332
00:10:31,600 --> 00:10:32,560
then

333
00:10:32,560 --> 00:10:34,800
you call the drop tube shell with the

334
00:10:34,800 --> 00:10:37,440
socket file descriptor and the address

335
00:10:37,440 --> 00:10:38,880
and what happens in that function is

336
00:10:38,880 --> 00:10:40,959
actually really simple it just checks if

337
00:10:40,959 --> 00:10:43,279
the source port of the connection

338
00:10:43,279 --> 00:10:45,040
is between a high and a low number and

339
00:10:45,040 --> 00:10:46,880
if the source ports in that magic range

340
00:10:46,880 --> 00:10:48,880
instead of like serving up apache 2

341
00:10:48,880 --> 00:10:51,360
content or like an ssh login or whatever

342
00:10:51,360 --> 00:10:53,279
it serves you up a root shell

343
00:10:53,279 --> 00:10:54,160
um

344
00:10:54,160 --> 00:10:55,680
it's like really straightforward and

345
00:10:55,680 --> 00:10:57,440
it's like really kind of elegant and

346
00:10:57,440 --> 00:10:58,720
simple

347
00:10:58,720 --> 00:11:00,640
and also absolutely murders the

348
00:11:00,640 --> 00:11:02,480
performance of all your network demons

349
00:11:02,480 --> 00:11:03,920
like your web server's performance is

350
00:11:03,920 --> 00:11:05,600
now absolutely

351
00:11:05,600 --> 00:11:08,000
just no you know it's just slow it's

352
00:11:08,000 --> 00:11:08,880
it's

353
00:11:08,880 --> 00:11:11,680
messes things up pretty badly um

354
00:11:11,680 --> 00:11:12,560
like

355
00:11:12,560 --> 00:11:15,120
your web server powerful drop your

356
00:11:15,120 --> 00:11:16,880
database perf will just go through the

357
00:11:16,880 --> 00:11:18,000
floor

358
00:11:18,000 --> 00:11:20,800
um and this is like an example of like

359
00:11:20,800 --> 00:11:21,600
what

360
00:11:21,600 --> 00:11:23,360
to the user of the rootkit what it looks

361
00:11:23,360 --> 00:11:25,440
like so if you connect like

362
00:11:25,440 --> 00:11:28,800
if you connect to a victim like from

363
00:11:28,800 --> 00:11:31,120
any random port you get the ssh banner

364
00:11:31,120 --> 00:11:33,120
right but if you set the magic source

365
00:11:33,120 --> 00:11:34,800
port and you're connecting specifically

366
00:11:34,800 --> 00:11:36,959
with the source port of 3137 the

367
00:11:36,959 --> 00:11:38,800
destination port of whatever service is

368
00:11:38,800 --> 00:11:40,480
open it'll instead prompt you the

369
00:11:40,480 --> 00:11:42,240
password for the back door shell and

370
00:11:42,240 --> 00:11:45,440
then you know you get your shell

371
00:11:45,519 --> 00:11:47,920
so that's like that's the most popular

372
00:11:47,920 --> 00:11:50,480
because jinx implemented and

373
00:11:50,480 --> 00:11:53,440
jinx implemented the accept hook um

374
00:11:53,440 --> 00:11:54,800
and then everyone just copy and pasted

375
00:11:54,800 --> 00:11:56,560
that into their own rootkits because

376
00:11:56,560 --> 00:11:58,240
that's how malware is written it's just

377
00:11:58,240 --> 00:12:01,279
control c control v apparently

378
00:12:01,279 --> 00:12:03,519
everyone's lazy

379
00:12:03,519 --> 00:12:05,279
so the other

380
00:12:05,279 --> 00:12:07,360
the other kind of main one we see is the

381
00:12:07,360 --> 00:12:09,200
backdoor and pam which is really neat so

382
00:12:09,200 --> 00:12:10,720
pam is the plugable authentication

383
00:12:10,720 --> 00:12:13,279
module it's like how authentication is

384
00:12:13,279 --> 00:12:16,399
handled in most linux

385
00:12:16,399 --> 00:12:19,440
so what the rootkit name father does is

386
00:12:19,440 --> 00:12:22,160
quite neat it um

387
00:12:22,160 --> 00:12:24,800
so replace the pam authenticate function

388
00:12:24,800 --> 00:12:26,399
and

389
00:12:26,399 --> 00:12:28,560
it just checks like if there's a magic

390
00:12:28,560 --> 00:12:30,560
secret password has been entered it just

391
00:12:30,560 --> 00:12:33,600
does a quick comparison and like

392
00:12:33,600 --> 00:12:36,000
if secret password then oh you also get

393
00:12:36,000 --> 00:12:38,480
logged in as any user which is pretty

394
00:12:38,480 --> 00:12:41,360
neat um

395
00:12:41,360 --> 00:12:43,440
if the magic password is not is not

396
00:12:43,440 --> 00:12:45,279
provided it'll actually check for a real

397
00:12:45,279 --> 00:12:47,360
password so you don't disrupt

398
00:12:47,360 --> 00:12:50,959
normal users trying to log in

399
00:12:51,440 --> 00:12:52,399
now

400
00:12:52,399 --> 00:12:55,279
the one problem with the palm back doors

401
00:12:55,279 --> 00:12:57,279
is that they're really easy to scan for

402
00:12:57,279 --> 00:12:58,800
and i'll get to that later you can

403
00:12:58,800 --> 00:13:00,079
detect these you can detect them

404
00:13:00,079 --> 00:13:01,920
remotely um

405
00:13:01,920 --> 00:13:03,760
if you know you're looking for

406
00:13:03,760 --> 00:13:06,160
but we'll get to that later because with

407
00:13:06,160 --> 00:13:08,160
with remote back doors like the accept

408
00:13:08,160 --> 00:13:10,399
back door um when they break they really

409
00:13:10,399 --> 00:13:12,320
break like when that when you're when

410
00:13:12,320 --> 00:13:14,320
your back door stops working

411
00:13:14,320 --> 00:13:15,920
it really stops working in a really

412
00:13:15,920 --> 00:13:17,920
funny way so i thought to myself i'll

413
00:13:17,920 --> 00:13:20,399
try find like broken root kit installs

414
00:13:20,399 --> 00:13:22,480
on the internet like live infected boxes

415
00:13:22,480 --> 00:13:23,600
where like something's gone

416
00:13:23,600 --> 00:13:25,360
catastrophically wrong

417
00:13:25,360 --> 00:13:26,720
and i was able to find load of them like

418
00:13:26,720 --> 00:13:29,040
i found a i found a copy of a rookie

419
00:13:29,040 --> 00:13:31,040
called lib mdma and it's actually it

420
00:13:31,040 --> 00:13:32,880
turns out it was one of the first ones

421
00:13:32,880 --> 00:13:34,880
ever written using the ld preload

422
00:13:34,880 --> 00:13:37,040
technique and i found that just by like

423
00:13:37,040 --> 00:13:39,760
i found like an irc chat log of somebody

424
00:13:39,760 --> 00:13:41,920
complaining their system was banjaxed

425
00:13:41,920 --> 00:13:44,480
and like i started googling for like the

426
00:13:44,480 --> 00:13:46,399
file name they mentioned and then found

427
00:13:46,399 --> 00:13:48,639
it like on some random web server

428
00:13:48,639 --> 00:13:50,639
and like clearly the rootkit bit had

429
00:13:50,639 --> 00:13:52,000
broken because it had stopped hiding

430
00:13:52,000 --> 00:13:53,440
itself and it was now just serving

431
00:13:53,440 --> 00:13:55,040
itself up as a file so i was able to get

432
00:13:55,040 --> 00:13:57,600
a sample reverse it wrote a lengthy

433
00:13:57,600 --> 00:13:58,880
piece about it

434
00:13:58,880 --> 00:14:00,320
um

435
00:14:00,320 --> 00:14:01,680
but i decided to look for other root

436
00:14:01,680 --> 00:14:04,399
kits that have gone wrong so i found

437
00:14:04,399 --> 00:14:06,320
that the dynamic linker on linux spits

438
00:14:06,320 --> 00:14:08,560
out a very specific error message when

439
00:14:08,560 --> 00:14:10,160
it's trying to preload a library but the

440
00:14:10,160 --> 00:14:11,760
library is broken like it's the wrong

441
00:14:11,760 --> 00:14:13,360
architecture or whatever or it's just

442
00:14:13,360 --> 00:14:15,120
missing

443
00:14:15,120 --> 00:14:18,399
so i put that string into showdown just

444
00:14:18,399 --> 00:14:20,560
just kind of thinking like this is not

445
00:14:20,560 --> 00:14:22,160
going to find anything this is dumb you

446
00:14:22,160 --> 00:14:23,279
know this is

447
00:14:23,279 --> 00:14:25,519
but no it turns out it did find tons of

448
00:14:25,519 --> 00:14:27,199
stuff so

449
00:14:27,199 --> 00:14:29,040
you get this error message

450
00:14:29,040 --> 00:14:31,760
object blah from etsy cannot be

451
00:14:31,760 --> 00:14:33,440
pre-loaded

452
00:14:33,440 --> 00:14:35,839
but like you get that message everywhere

453
00:14:35,839 --> 00:14:38,720
like every single network service on

454
00:14:38,720 --> 00:14:39,600
these

455
00:14:39,600 --> 00:14:41,760
teramaster nasa's

456
00:14:41,760 --> 00:14:43,680
was spitting out this error message and

457
00:14:43,680 --> 00:14:45,279
i was like okay

458
00:14:45,279 --> 00:14:47,920
so all what the story with these is

459
00:14:47,920 --> 00:14:48,959
these are

460
00:14:48,959 --> 00:14:51,600
network nasus and somebody had gone

461
00:14:51,600 --> 00:14:53,199
around somebody had compiled some

462
00:14:53,199 --> 00:14:55,760
rootkit and tried to install it on like

463
00:14:55,760 --> 00:14:58,639
thousands of nasus but they compile it

464
00:14:58,639 --> 00:15:00,240
for the wrong architecture because they

465
00:15:00,240 --> 00:15:01,839
were an idiot

466
00:15:01,839 --> 00:15:04,480
um they compiled like for x 86 64 and

467
00:15:04,480 --> 00:15:05,760
try to install it in a bunch of arm

468
00:15:05,760 --> 00:15:07,120
systems and i'm like

469
00:15:07,120 --> 00:15:09,760
script kitties man you know

470
00:15:09,760 --> 00:15:11,120
couldn't even you know they don't even

471
00:15:11,120 --> 00:15:12,720
check so they just hosed all these

472
00:15:12,720 --> 00:15:14,639
things but like they left a copy of the

473
00:15:14,639 --> 00:15:16,160
rootkit just sitting around you know

474
00:15:16,160 --> 00:15:18,160
like on all of these

475
00:15:18,160 --> 00:15:20,880
and it was pretty funny because when

476
00:15:20,880 --> 00:15:22,959
i started googling i found like people

477
00:15:22,959 --> 00:15:24,320
have been complaining about like their

478
00:15:24,320 --> 00:15:26,480
nases were broken because the skids had

479
00:15:26,480 --> 00:15:28,560
like put this broken root kit on them so

480
00:15:28,560 --> 00:15:29,680
people were like posting on the

481
00:15:29,680 --> 00:15:31,920
terramaster forums going like hey i'm

482
00:15:31,920 --> 00:15:33,759
getting this weird error and like the

483
00:15:33,759 --> 00:15:35,519
terramaster people was like oh uh just

484
00:15:35,519 --> 00:15:37,680
delete the file nothing is wrong you

485
00:15:37,680 --> 00:15:39,839
know completely ignoring the fact like

486
00:15:39,839 --> 00:15:42,399
completely like denying and like

487
00:15:42,399 --> 00:15:44,320
trying to steer their customers away

488
00:15:44,320 --> 00:15:46,240
from like you have been wrecked because

489
00:15:46,240 --> 00:15:47,920
our software sucks

490
00:15:47,920 --> 00:15:48,880
but you know i thought it was an

491
00:15:48,880 --> 00:15:50,959
interesting aside like that because

492
00:15:50,959 --> 00:15:52,639
these guys had like compiled their root

493
00:15:52,639 --> 00:15:55,199
kit wrong like they had very publicly

494
00:15:55,199 --> 00:15:57,759
messed up in a way where like you could

495
00:15:57,759 --> 00:15:59,360
actually see

496
00:15:59,360 --> 00:16:01,120
um

497
00:16:01,120 --> 00:16:02,800
so i started digging into this one a bit

498
00:16:02,800 --> 00:16:04,639
more i thought it was interesting you

499
00:16:04,639 --> 00:16:06,480
know because like the vendor is like oh

500
00:16:06,480 --> 00:16:09,040
just delete the file um

501
00:16:09,040 --> 00:16:10,880
it's fine everything's fine you know

502
00:16:10,880 --> 00:16:13,199
it's just a software bug it's not like

503
00:16:13,199 --> 00:16:15,519
it's not like you've been owned

504
00:16:15,519 --> 00:16:17,839
you know

505
00:16:18,000 --> 00:16:20,320
so i also found like reference on like

506
00:16:20,320 --> 00:16:24,320
random chinese forums to like

507
00:16:24,320 --> 00:16:26,079
hey i'm getting this weird error here's

508
00:16:26,079 --> 00:16:27,600
how to fix it

509
00:16:27,600 --> 00:16:29,360
and like i was like okay so this is

510
00:16:29,360 --> 00:16:31,360
clearly like somebody has clearly tried

511
00:16:31,360 --> 00:16:33,519
to use this lib system that solar kit in

512
00:16:33,519 --> 00:16:36,079
the wild quite you know

513
00:16:36,079 --> 00:16:38,320
quite uh want to be the word generously

514
00:16:38,320 --> 00:16:40,000
i guess the you know they've spread the

515
00:16:40,000 --> 00:16:42,160
love around a bit

516
00:16:42,160 --> 00:16:44,480
so it turns out that it was the kinsing

517
00:16:44,480 --> 00:16:47,040
group and the specific root kit they

518
00:16:47,040 --> 00:16:49,120
were using was a modified version of one

519
00:16:49,120 --> 00:16:51,519
called bjork which is open source

520
00:16:51,519 --> 00:16:53,839
and it just didn't work on some hosts um

521
00:16:53,839 --> 00:16:55,279
because they compile it for the wrong

522
00:16:55,279 --> 00:16:57,360
architecture because they're complete

523
00:16:57,360 --> 00:16:58,480
idiots

524
00:16:58,480 --> 00:17:00,959
and they were using it to like hide

525
00:17:00,959 --> 00:17:02,000
badly

526
00:17:02,000 --> 00:17:04,000
a crypto mining campaign and they were

527
00:17:04,000 --> 00:17:05,599
spraying around like log for j to drop

528
00:17:05,599 --> 00:17:07,359
this root kitten

529
00:17:07,359 --> 00:17:09,839
you know script kitties like really low

530
00:17:09,839 --> 00:17:12,480
grade absolute bottom of the class tier

531
00:17:12,480 --> 00:17:14,799
cyber crooks um

532
00:17:14,799 --> 00:17:16,480
zero out of ten you know they get

533
00:17:16,480 --> 00:17:18,799
absolutely no points no style points

534
00:17:18,799 --> 00:17:20,319
either you know like copy and pasting

535
00:17:20,319 --> 00:17:24,480
stuff and then somehow still screwing up

536
00:17:24,559 --> 00:17:25,839
so

537
00:17:25,839 --> 00:17:28,400
after this i started trying to think

538
00:17:28,400 --> 00:17:29,520
like for

539
00:17:29,520 --> 00:17:30,400
like

540
00:17:30,400 --> 00:17:32,880
for like if you come across one of these

541
00:17:32,880 --> 00:17:35,120
samples it's it can be a bit of a pain

542
00:17:35,120 --> 00:17:37,200
like you okay you've got like a shared

543
00:17:37,200 --> 00:17:39,360
object file that's your root kit like

544
00:17:39,360 --> 00:17:41,600
how do you categorize it like as a for

545
00:17:41,600 --> 00:17:44,400
the for the blue team guys like

546
00:17:44,400 --> 00:17:46,320
what do you do like how do you how do

547
00:17:46,320 --> 00:17:47,760
you categorize it how do you bucket it

548
00:17:47,760 --> 00:17:49,840
and cluster these samples and i started

549
00:17:49,840 --> 00:17:51,120
trying to come up with like some kind of

550
00:17:51,120 --> 00:17:52,240
way and

551
00:17:52,240 --> 00:17:54,640
it didn't it's in excel the spoiler it

552
00:17:54,640 --> 00:17:56,240
ended up being an excel spreadsheet in

553
00:17:56,240 --> 00:17:57,679
the end because that's apparently how

554
00:17:57,679 --> 00:17:59,440
everything's done but i started coming

555
00:17:59,440 --> 00:18:01,919
up with like a worksheet for analysts

556
00:18:01,919 --> 00:18:04,320
and i'm still working on this and i'm

557
00:18:04,320 --> 00:18:05,679
probably going to upload the thing in

558
00:18:05,679 --> 00:18:07,039
the next couple weeks to github or

559
00:18:07,039 --> 00:18:09,679
something like a worksheet for like your

560
00:18:09,679 --> 00:18:11,039
incident responder to go through when

561
00:18:11,039 --> 00:18:13,440
they encounter one of these root kits

562
00:18:13,440 --> 00:18:15,280
here are the steps to like identify it

563
00:18:15,280 --> 00:18:17,280
mitigate it and then work out how to

564
00:18:17,280 --> 00:18:19,200
detect on the rest of your network and

565
00:18:19,200 --> 00:18:20,160
it's quite straightforward like the

566
00:18:20,160 --> 00:18:21,440
first one be like

567
00:18:21,440 --> 00:18:24,559
like just open it up in ida or ghidra or

568
00:18:24,559 --> 00:18:26,320
radare or whatever your favorite reverse

569
00:18:26,320 --> 00:18:27,919
engineering framework is and just

570
00:18:27,919 --> 00:18:29,919
identify what functions it hooks because

571
00:18:29,919 --> 00:18:31,360
you can often like

572
00:18:31,360 --> 00:18:33,120
figure out which one it is just based on

573
00:18:33,120 --> 00:18:35,600
the unique subset of what functions it

574
00:18:35,600 --> 00:18:37,840
actually implements a hook for

575
00:18:37,840 --> 00:18:39,520
the second thing you can like you need

576
00:18:39,520 --> 00:18:41,280
to do in like your worksheet of

577
00:18:41,280 --> 00:18:43,039
identifying these things is does it has

578
00:18:43,039 --> 00:18:44,559
it just copy and paste a code from other

579
00:18:44,559 --> 00:18:46,799
rootkits and the answer is probably yes

580
00:18:46,799 --> 00:18:49,760
because they all copy and paste code

581
00:18:49,760 --> 00:18:52,000
from jinx2 because it was like the first

582
00:18:52,000 --> 00:18:54,080
one that actually worked so like the

583
00:18:54,080 --> 00:18:56,000
diversity of code out there for these

584
00:18:56,000 --> 00:19:00,480
things is pretty small um

585
00:19:00,559 --> 00:19:02,960
then the next like you can then figure

586
00:19:02,960 --> 00:19:04,720
out like what remote access method does

587
00:19:04,720 --> 00:19:06,080
it implement like does it implement a

588
00:19:06,080 --> 00:19:07,520
pan back door does it implement an

589
00:19:07,520 --> 00:19:09,600
accept hook does it implement like port

590
00:19:09,600 --> 00:19:11,679
knocking and this is very useful for

591
00:19:11,679 --> 00:19:13,760
like remediation for scanning your

592
00:19:13,760 --> 00:19:15,600
network for it later on

593
00:19:15,600 --> 00:19:17,600
um does it implement self protection

594
00:19:17,600 --> 00:19:19,120
methods like when you think you've

595
00:19:19,120 --> 00:19:21,200
uninstalled it has it actually sneakily

596
00:19:21,200 --> 00:19:22,880
reinstalled itself while you weren't

597
00:19:22,880 --> 00:19:25,760
looking so a few of them i think it's

598
00:19:25,760 --> 00:19:28,240
the umbreon one when you try to delete

599
00:19:28,240 --> 00:19:29,200
it

600
00:19:29,200 --> 00:19:31,120
it hides itself in memory lets you

601
00:19:31,120 --> 00:19:32,720
delete it and then

602
00:19:32,720 --> 00:19:35,200
by hooking the destructor

603
00:19:35,200 --> 00:19:37,039
of rm

604
00:19:37,039 --> 00:19:39,760
like when rm is like when after rm has

605
00:19:39,760 --> 00:19:41,200
rammed a file

606
00:19:41,200 --> 00:19:43,520
before rm's process terminates it then

607
00:19:43,520 --> 00:19:45,120
like reinstalls itself like it

608
00:19:45,120 --> 00:19:46,960
specifically hooks like

609
00:19:46,960 --> 00:19:49,760
the delete like the rm binary in a way

610
00:19:49,760 --> 00:19:51,520
that like allows it to reinstall itself

611
00:19:51,520 --> 00:19:52,799
after it's been deleted which i think is

612
00:19:52,799 --> 00:19:55,039
hilarious to like ah yes i have fixed it

613
00:19:55,039 --> 00:19:56,559
the problem has been remediated and it's

614
00:19:56,559 --> 00:19:58,160
like actually no

615
00:19:58,160 --> 00:19:59,760
i am still here

616
00:19:59,760 --> 00:20:00,720
um

617
00:20:00,720 --> 00:20:02,320
another thing to look at you can

618
00:20:02,320 --> 00:20:04,400
fingerprint them pretty uniquely by like

619
00:20:04,400 --> 00:20:06,640
how do they obfuscate strings most of

620
00:20:06,640 --> 00:20:08,400
them don't but some of them use like

621
00:20:08,400 --> 00:20:10,960
really really terrible xoring of strings

622
00:20:10,960 --> 00:20:13,039
that just like

623
00:20:13,039 --> 00:20:15,039
you know you can figure out the key to

624
00:20:15,039 --> 00:20:17,600
pretty quickly um and then very very few

625
00:20:17,600 --> 00:20:19,039
of them a limited subset of them

626
00:20:19,039 --> 00:20:20,720
actually encrypts strings in a way

627
00:20:20,720 --> 00:20:22,559
that's meaningful and a pain in the ass

628
00:20:22,559 --> 00:20:24,320
to reverse engineer

629
00:20:24,320 --> 00:20:26,320
the other thing is like the thing that's

630
00:20:26,320 --> 00:20:28,000
important to figure out with what with a

631
00:20:28,000 --> 00:20:30,320
sample this is how does it decide what

632
00:20:30,320 --> 00:20:32,720
stuff to hide like is it magic string

633
00:20:32,720 --> 00:20:35,600
based is it magic group id based is it

634
00:20:35,600 --> 00:20:39,120
extended attributes based and like

635
00:20:39,120 --> 00:20:40,640
once you you know you figure out these

636
00:20:40,640 --> 00:20:42,320
things and once you've gone through all

637
00:20:42,320 --> 00:20:44,000
those steps you've probably identified

638
00:20:44,000 --> 00:20:46,080
which exact piece of nasty you're

639
00:20:46,080 --> 00:20:47,120
dealing with

640
00:20:47,120 --> 00:20:49,120
um and of course it'll all end up in a

641
00:20:49,120 --> 00:20:50,960
giant excel spreadsheet

642
00:20:50,960 --> 00:20:52,880
um like the what functions is it hook

643
00:20:52,880 --> 00:20:54,880
one is

644
00:20:54,880 --> 00:20:56,720
is something that i still i've got a

645
00:20:56,720 --> 00:20:58,240
giant excel spreadsheet that i need to

646
00:20:58,240 --> 00:21:00,240
publish um for this but like i basically

647
00:21:00,240 --> 00:21:01,600
picked a bunch of example root kits that

648
00:21:01,600 --> 00:21:03,360
i'd source code for

649
00:21:03,360 --> 00:21:05,360
and

650
00:21:05,360 --> 00:21:06,960
dumped out every single hook they

651
00:21:06,960 --> 00:21:09,600
implemented into like on one side

652
00:21:09,600 --> 00:21:11,120
spreadsheet you've like a list of every

653
00:21:11,120 --> 00:21:13,600
single possible hook and then the names

654
00:21:13,600 --> 00:21:15,360
across the top and little tick box when

655
00:21:15,360 --> 00:21:17,280
you get your sample you go and you cross

656
00:21:17,280 --> 00:21:18,960
reference it and you can

657
00:21:18,960 --> 00:21:20,960
pretty accurately identify with no

658
00:21:20,960 --> 00:21:23,520
further reverse engineering or hard work

659
00:21:23,520 --> 00:21:25,440
what root kit you're looking at just by

660
00:21:25,440 --> 00:21:28,159
cross referencing it against a

661
00:21:28,159 --> 00:21:30,880
spreadsheet the it was a pain in the ass

662
00:21:30,880 --> 00:21:32,240
to do this because like the laney root

663
00:21:32,240 --> 00:21:34,480
kit seems to implement like a couple of

664
00:21:34,480 --> 00:21:36,320
hundred different hooks because whoever

665
00:21:36,320 --> 00:21:38,400
was writing it was like clearly like oh

666
00:21:38,400 --> 00:21:39,840
well i'm gonna hook that function and

667
00:21:39,840 --> 00:21:41,760
that function that function oh more

668
00:21:41,760 --> 00:21:43,280
functions just gonna back door all of

669
00:21:43,280 --> 00:21:44,480
them

670
00:21:44,480 --> 00:21:46,320
so to like like documenting that took

671
00:21:46,320 --> 00:21:49,280
about a week um

672
00:21:49,280 --> 00:21:51,919
using like just by looking at code reuse

673
00:21:51,919 --> 00:21:53,840
um one thing that i think would be

674
00:21:53,840 --> 00:21:55,440
interesting to look into is writing like

675
00:21:55,440 --> 00:21:57,200
flirt signatures or yara rules to

676
00:21:57,200 --> 00:21:59,039
automatically detect like code reuse

677
00:21:59,039 --> 00:22:01,280
from like snippets that have been stolen

678
00:22:01,280 --> 00:22:04,080
and repurposed um i actually found out

679
00:22:04,080 --> 00:22:06,320
that's how a company called inet sir

680
00:22:06,320 --> 00:22:08,000
i've no relationship with them but they

681
00:22:08,000 --> 00:22:10,159
have a weird product for malware stuff

682
00:22:10,159 --> 00:22:12,559
called code dna which turns out already

683
00:22:12,559 --> 00:22:14,880
implements this um so

684
00:22:14,880 --> 00:22:17,679
and they say it's super effective and

685
00:22:17,679 --> 00:22:19,520
it seems pretty effective at like

686
00:22:19,520 --> 00:22:22,159
reducing my workload um

687
00:22:22,159 --> 00:22:24,159
like if you know just instead having a

688
00:22:24,159 --> 00:22:26,480
reverse engineer the function just check

689
00:22:26,480 --> 00:22:28,720
have i already you know is this is this

690
00:22:28,720 --> 00:22:30,480
present anywhere else

691
00:22:30,480 --> 00:22:32,080
um

692
00:22:32,080 --> 00:22:34,000
identifying what backdoor methods it ha

693
00:22:34,000 --> 00:22:37,280
it implements is important because

694
00:22:37,280 --> 00:22:39,840
if like if it's got an accept hook using

695
00:22:39,840 --> 00:22:42,159
ssl you're looking at a jinx variant

696
00:22:42,159 --> 00:22:44,159
every single time

697
00:22:44,159 --> 00:22:45,919
if it's doing a pan back door it's going

698
00:22:45,919 --> 00:22:48,080
to be magic password-based every single

699
00:22:48,080 --> 00:22:50,960
time um they're all they're all very

700
00:22:50,960 --> 00:22:52,480
similar they're all copy and pasted from

701
00:22:52,480 --> 00:22:54,799
the same code so

702
00:22:54,799 --> 00:22:56,640
this word gets neat because if you

703
00:22:56,640 --> 00:22:58,559
actually take apart the remote access

704
00:22:58,559 --> 00:23:00,320
bit you can do network scanning so like

705
00:23:00,320 --> 00:23:02,400
if it's the accept hook you just figure

706
00:23:02,400 --> 00:23:03,760
out the source port that the sample is

707
00:23:03,760 --> 00:23:06,400
looking for get mask and set dash g

708
00:23:06,400 --> 00:23:08,240
source port number and scan your network

709
00:23:08,240 --> 00:23:11,039
and then diff the output against a scan

710
00:23:11,039 --> 00:23:12,400
with randomized source ports

711
00:23:12,400 --> 00:23:13,840
[Music]

712
00:23:13,840 --> 00:23:15,520
and if you see something weird it's

713
00:23:15,520 --> 00:23:16,799
probably

714
00:23:16,799 --> 00:23:19,600
it's probably one of these um because

715
00:23:19,600 --> 00:23:21,679
you'll get a differential response for

716
00:23:21,679 --> 00:23:23,440
pam back doors if you can like figure

717
00:23:23,440 --> 00:23:24,720
out the magic log in just sweep your

718
00:23:24,720 --> 00:23:27,280
network for it um same for port knocking

719
00:23:27,280 --> 00:23:28,640
ones just

720
00:23:28,640 --> 00:23:30,880
replay the knock sequence across your

721
00:23:30,880 --> 00:23:32,240
network and if you start getting connect

722
00:23:32,240 --> 00:23:34,400
backs you've got something is very very

723
00:23:34,400 --> 00:23:35,280
wrong

724
00:23:35,280 --> 00:23:36,799
um

725
00:23:36,799 --> 00:23:38,799
the self protection methods usually

726
00:23:38,799 --> 00:23:41,600
constructor destructor hooks um very few

727
00:23:41,600 --> 00:23:43,039
of them implement working self

728
00:23:43,039 --> 00:23:44,799
protection most of them just rely on

729
00:23:44,799 --> 00:23:46,960
like stealth

730
00:23:46,960 --> 00:23:48,640
the ones that do reinstall themselves

731
00:23:48,640 --> 00:23:50,000
though are very funny because they're

732
00:23:50,000 --> 00:23:52,000
real pain to remove you to like reboot

733
00:23:52,000 --> 00:23:54,080
from a live disc and you know actually

734
00:23:54,080 --> 00:23:55,760
delete the thing

735
00:23:55,760 --> 00:23:57,760
um string obfuscation most script

736
00:23:57,760 --> 00:24:00,400
kitties are too lazy to bother but like

737
00:24:00,400 --> 00:24:02,320
some of the samples like zazzle actually

738
00:24:02,320 --> 00:24:05,520
implement xor stuff and some other stuff

739
00:24:05,520 --> 00:24:06,799
um

740
00:24:06,799 --> 00:24:08,960
automating the obfuscation these will

741
00:24:08,960 --> 00:24:10,640
reduce your workload there are ida

742
00:24:10,640 --> 00:24:13,120
python scripts and stuff for that

743
00:24:13,120 --> 00:24:15,760
um the american files to hide again blah

744
00:24:15,760 --> 00:24:16,270
blah

745
00:24:16,270 --> 00:24:17,440
[Music]

746
00:24:17,440 --> 00:24:19,360
already covered this

747
00:24:19,360 --> 00:24:20,960
um so yeah this is the bit that i want

748
00:24:20,960 --> 00:24:23,440
to this the bit that like where it's

749
00:24:23,440 --> 00:24:25,520
going so like we've seen where it is but

750
00:24:25,520 --> 00:24:27,120
where it's going

751
00:24:27,120 --> 00:24:28,720
is kind of neat so like most of them are

752
00:24:28,720 --> 00:24:30,720
general purpose like remote access and

753
00:24:30,720 --> 00:24:32,559
hiding but some of them we've started

754
00:24:32,559 --> 00:24:34,799
seeing like much cooler limited scope

755
00:24:34,799 --> 00:24:36,720
specialized ones lately

756
00:24:36,720 --> 00:24:38,240
um so i'm going to talk about a sample

757
00:24:38,240 --> 00:24:40,000
called lib curl

758
00:24:40,000 --> 00:24:42,159
so this it was trying to hide by calling

759
00:24:42,159 --> 00:24:44,799
itself lib curl um so this root kit was

760
00:24:44,799 --> 00:24:46,080
dropped as part of a cryptominer

761
00:24:46,080 --> 00:24:48,080
campaign um

762
00:24:48,080 --> 00:24:49,840
it was covered by a crowd called sandfly

763
00:24:49,840 --> 00:24:51,760
security and they claimed that it was

764
00:24:51,760 --> 00:24:54,480
capable of evading a bunch of linux edr

765
00:24:54,480 --> 00:24:57,039
products when i took it apart it didn't

766
00:24:57,039 --> 00:24:58,960
have any magic that would like it didn't

767
00:24:58,960 --> 00:25:01,279
have any special sauce or anything so i

768
00:25:01,279 --> 00:25:04,400
guess just linux edr products suck

769
00:25:04,400 --> 00:25:05,840
um

770
00:25:05,840 --> 00:25:08,240
i guess that's the case um but this one

771
00:25:08,240 --> 00:25:10,640
was neat because its one job was to hide

772
00:25:10,640 --> 00:25:12,240
a crypto miner

773
00:25:12,240 --> 00:25:14,480
and all lib curl did was it hit the

774
00:25:14,480 --> 00:25:17,120
miners process and files but also hooked

775
00:25:17,120 --> 00:25:19,039
the functions like

776
00:25:19,039 --> 00:25:21,760
to check cpu usage so it would lie and

777
00:25:21,760 --> 00:25:23,279
it'd be like oh the load average is

778
00:25:23,279 --> 00:25:24,880
really low and there's not much cpu

779
00:25:24,880 --> 00:25:27,200
usage going on while your cpu is turning

780
00:25:27,200 --> 00:25:29,360
into a space heater in the background

781
00:25:29,360 --> 00:25:31,440
system is logged in like oh no no load

782
00:25:31,440 --> 00:25:33,840
is really low you know everything's fine

783
00:25:33,840 --> 00:25:36,240
um but yeah this like somebody written

784
00:25:36,240 --> 00:25:38,320
this specifically to like hide their

785
00:25:38,320 --> 00:25:40,640
mining which i thought was really neat

786
00:25:40,640 --> 00:25:43,120
except for the fact that like

787
00:25:43,120 --> 00:25:44,960
if like it's a physical server you're

788
00:25:44,960 --> 00:25:46,559
near you're going to hear the fans going

789
00:25:46,559 --> 00:25:48,240
and you're going to be like something's

790
00:25:48,240 --> 00:25:49,360
up

791
00:25:49,360 --> 00:25:51,120
but they've been

792
00:25:51,120 --> 00:25:53,600
they'd like you know they they've put a

793
00:25:53,600 --> 00:25:55,600
lot of time and effort into like finding

794
00:25:55,600 --> 00:25:56,960
a way to

795
00:25:56,960 --> 00:26:00,400
coerce like h top and ps and stuff

796
00:26:00,400 --> 00:26:03,200
into reporting the wrong like load

797
00:26:03,200 --> 00:26:04,400
averages

798
00:26:04,400 --> 00:26:06,000
which i thought was kind of neat because

799
00:26:06,000 --> 00:26:07,360
somebody had like you know they'd

800
00:26:07,360 --> 00:26:09,120
actually put effort in they put a bit of

801
00:26:09,120 --> 00:26:11,200
work into doing their crime

802
00:26:11,200 --> 00:26:12,080
um

803
00:26:12,080 --> 00:26:15,039
and the last thing that

804
00:26:15,039 --> 00:26:16,880
the last one that i want to point out

805
00:26:16,880 --> 00:26:18,720
this just kind of where things are going

806
00:26:18,720 --> 00:26:20,159
that's kind of interesting but it's

807
00:26:20,159 --> 00:26:21,440
completely irrelevant because nobody can

808
00:26:21,440 --> 00:26:23,120
afford gpus

809
00:26:23,120 --> 00:26:24,480
but uh

810
00:26:24,480 --> 00:26:26,640
a few years ago some guys figured out

811
00:26:26,640 --> 00:26:28,720
that some team jellyfish they worked out

812
00:26:28,720 --> 00:26:31,360
like they could use the ld preload thing

813
00:26:31,360 --> 00:26:32,480
and then

814
00:26:32,480 --> 00:26:35,760
load their code into the gpu

815
00:26:35,760 --> 00:26:38,080
like hiding except their whole trick was

816
00:26:38,080 --> 00:26:39,919
hiding executable code

817
00:26:39,919 --> 00:26:42,240
in the graphics card's memory by like

818
00:26:42,240 --> 00:26:44,159
loading in some opencl stuff it's open

819
00:26:44,159 --> 00:26:46,240
source their work it's

820
00:26:46,240 --> 00:26:48,159
really really neat and like malware

821
00:26:48,159 --> 00:26:50,159
hiding in your graphics card is like

822
00:26:50,159 --> 00:26:51,440
kind of neat because nobody writes

823
00:26:51,440 --> 00:26:53,840
antivirus for graphics cards

824
00:26:53,840 --> 00:26:55,600
but also nobody can afford graphics

825
00:26:55,600 --> 00:26:57,360
cards because they cost like you have to

826
00:26:57,360 --> 00:26:59,200
remortgage your house for them that

827
00:26:59,200 --> 00:27:01,120
might become relevant in the future if

828
00:27:01,120 --> 00:27:02,720
you know we find

829
00:27:02,720 --> 00:27:03,840
a way to

830
00:27:03,840 --> 00:27:06,559
get graphics cards cheaper again but

831
00:27:06,559 --> 00:27:08,000
no point

832
00:27:08,000 --> 00:27:10,000
um but like i can see that like that

833
00:27:10,000 --> 00:27:11,679
kind of stuff like hiding in weird bits

834
00:27:11,679 --> 00:27:13,840
your system like

835
00:27:13,840 --> 00:27:16,240
being potentially where things go

836
00:27:16,240 --> 00:27:20,480
um and these are just references um and

837
00:27:20,480 --> 00:27:22,080
more references

838
00:27:22,080 --> 00:27:25,039
and there will be yet more references on

839
00:27:25,039 --> 00:27:27,600
github and stuff when i upload the

840
00:27:27,600 --> 00:27:29,840
slides and all the supporting material

841
00:27:29,840 --> 00:27:33,039
um the github is just my github.com my

842
00:27:33,039 --> 00:27:36,600
name uh yes i guess any questions

843
00:27:36,600 --> 00:27:38,080
[Music]

844
00:27:38,080 --> 00:27:40,320
yep

845
00:27:41,919 --> 00:27:43,480
have you done any research on like say

846
00:27:43,480 --> 00:27:45,440
containerization does that help in any

847
00:27:45,440 --> 00:27:46,399
way

848
00:27:46,399 --> 00:27:49,520
so i didn't get to cover that here but i

849
00:27:49,520 --> 00:27:50,559
have seen

850
00:27:50,559 --> 00:27:52,880
some kits that are specific to

851
00:27:52,880 --> 00:27:54,559
containerized environments or

852
00:27:54,559 --> 00:27:56,320
environments using containers

853
00:27:56,320 --> 00:27:58,720
like i came across one that has a

854
00:27:58,720 --> 00:28:00,799
function that allows it to create a

855
00:28:00,799 --> 00:28:02,880
hidden lxc container

856
00:28:02,880 --> 00:28:06,240
and like hides an entire container from

857
00:28:06,240 --> 00:28:07,840
the admin which i thought was really

858
00:28:07,840 --> 00:28:10,880
neat i've seen others that try to abuse

859
00:28:10,880 --> 00:28:12,470
docker a bit um

860
00:28:12,470 --> 00:28:14,080
[Music]

861
00:28:14,080 --> 00:28:15,600
but like they kind of don't really work

862
00:28:15,600 --> 00:28:17,039
yet

863
00:28:17,039 --> 00:28:18,720
um

864
00:28:18,720 --> 00:28:20,240
so i guess like some

865
00:28:20,240 --> 00:28:22,240
some stuff like i think we're gonna see

866
00:28:22,240 --> 00:28:24,399
more of this in container environments

867
00:28:24,399 --> 00:28:26,080
though um

868
00:28:26,080 --> 00:28:27,440
it'll be neat to see like how they

869
00:28:27,440 --> 00:28:29,120
impact the performance of your container

870
00:28:29,120 --> 00:28:31,120
environment because i imagine like

871
00:28:31,120 --> 00:28:32,960
because the performance impact they have

872
00:28:32,960 --> 00:28:34,159
they'll probably trash like your

873
00:28:34,159 --> 00:28:39,159
kubernetes set up by just making it slow

874
00:28:45,120 --> 00:28:49,120
um for your showdown search um what was

875
00:28:49,120 --> 00:28:51,039
the search string what's what's the

876
00:28:51,039 --> 00:28:53,279
google door to find the broken real kids

877
00:28:53,279 --> 00:28:55,760
uh let's go back it was just the error

878
00:28:55,760 --> 00:28:56,840
message

879
00:28:56,840 --> 00:29:00,320
um ld.soda preload cannot be pre-loaded

880
00:29:00,320 --> 00:29:02,159
kind of open shared object file you just

881
00:29:02,159 --> 00:29:03,600
stick that in the showdown you'll find

882
00:29:03,600 --> 00:29:05,679
so many

883
00:29:05,679 --> 00:29:07,520
systems that could have been backdoored

884
00:29:07,520 --> 00:29:08,880
but the rootkit didn't work because

885
00:29:08,880 --> 00:29:12,360
somebody was incompetent

886
00:29:23,440 --> 00:29:25,679
did you test for uh jesus did you test

887
00:29:25,679 --> 00:29:28,000
for a windows subsystem for linux

888
00:29:28,000 --> 00:29:30,399
uh not yet i haven't played with that

889
00:29:30,399 --> 00:29:32,720
very much yet to be honest um i only

890
00:29:32,720 --> 00:29:34,240
recently came into possession of a

891
00:29:34,240 --> 00:29:36,110
computer running windows

892
00:29:36,110 --> 00:29:39,360
[Music]

893
00:29:39,360 --> 00:29:42,159
i'm still not sure how it works

894
00:29:42,159 --> 00:29:43,279
it's kind of weird you know you go from

895
00:29:43,279 --> 00:29:45,200
like seven to ten and you're like oh

896
00:29:45,200 --> 00:29:46,960
they've they've moved everything

897
00:29:46,960 --> 00:29:49,840
guys i'm scared

898
00:29:50,000 --> 00:29:52,640
um but i actually do intend to test uh

899
00:29:52,640 --> 00:29:54,559
some of this some of these on because i

900
00:29:54,559 --> 00:29:56,480
do think they will work in wsl because

901
00:29:56,480 --> 00:29:59,840
wsl is just linux in a container now

902
00:29:59,840 --> 00:30:02,879
it's a vm now

903
00:30:06,880 --> 00:30:08,399
the networking will break ever so

904
00:30:08,399 --> 00:30:10,000
slightly depressed sharing will break

905
00:30:10,000 --> 00:30:12,559
everything slightly they'll get you 99

906
00:30:12,559 --> 00:30:15,279
of the way there and then drop it off

907
00:30:15,279 --> 00:30:16,880
so we're nearly in the year linux on the

908
00:30:16,880 --> 00:30:20,600
desktop yep

909
00:30:23,520 --> 00:30:25,440
so graphic stuff works

910
00:30:25,440 --> 00:30:27,279
okay i'll actually have to like power on

911
00:30:27,279 --> 00:30:29,120
the windows machine then and actually

912
00:30:29,120 --> 00:30:30,720
maybe use it because then i can actually

913
00:30:30,720 --> 00:30:33,120
add a power points properly

914
00:30:33,120 --> 00:30:36,320
all right uh that is that um if anybody

915
00:30:36,320 --> 00:30:37,919
has any other questions you can grab me

916
00:30:37,919 --> 00:30:38,880
later

917
00:30:38,880 --> 00:30:41,880
um

