1
00:00:02,879 --> 00:00:04,799
um good afternoon everybody hope you're

2
00:00:04,799 --> 00:00:08,000
all well and having a good day

3
00:00:08,000 --> 00:00:10,080
i'm shaitra i'm a security engineer at

4
00:00:10,080 --> 00:00:12,160
yahoo the security team at yahoo is

5
00:00:12,160 --> 00:00:15,440
called the paranoid so i'm a paranoid

6
00:00:15,440 --> 00:00:16,720
yeah

7
00:00:16,720 --> 00:00:18,560
i've been a developer for a long time

8
00:00:18,560 --> 00:00:20,880
now i've spent more than 15 years coding

9
00:00:20,880 --> 00:00:22,560
debugging testing

10
00:00:22,560 --> 00:00:24,160
software in various technologies and

11
00:00:24,160 --> 00:00:26,400
domains and now i'm focusing full time

12
00:00:26,400 --> 00:00:28,080
on security

13
00:00:28,080 --> 00:00:29,760
so today i want to share with you some

14
00:00:29,760 --> 00:00:31,840
things that i have learned about iac

15
00:00:31,840 --> 00:00:35,520
sast hope you find it useful

16
00:00:35,520 --> 00:00:37,280
so i just want to get some definitions

17
00:00:37,280 --> 00:00:39,760
out of the way so i can start using this

18
00:00:39,760 --> 00:00:42,640
uh short form in my presentation right

19
00:00:42,640 --> 00:00:46,079
so what is iac iec is nothing but a

20
00:00:46,079 --> 00:00:47,760
collection of machine readable

21
00:00:47,760 --> 00:00:49,920
definitions in the form of your code

22
00:00:49,920 --> 00:00:52,960
script policies or templates which are

23
00:00:52,960 --> 00:00:55,600
used to deploy and provision your

24
00:00:55,600 --> 00:00:57,039
infrastructure

25
00:00:57,039 --> 00:00:59,280
and sas as you may all be familiar with

26
00:00:59,280 --> 00:01:00,960
is nothing but static application

27
00:01:00,960 --> 00:01:03,440
security testing it's a methodology that

28
00:01:03,440 --> 00:01:05,840
analyzes your source code now your

29
00:01:05,840 --> 00:01:07,680
applications code in our case for the

30
00:01:07,680 --> 00:01:10,159
stock the infrastructure code to find

31
00:01:10,159 --> 00:01:13,760
and find any vulnerabilities in them

32
00:01:13,760 --> 00:01:15,520
the main objectives for this talk for me

33
00:01:15,520 --> 00:01:18,400
are today to introduce you to iscs give

34
00:01:18,400 --> 00:01:20,960
you some examples of ics as tools out

35
00:01:20,960 --> 00:01:21,759
there

36
00:01:21,759 --> 00:01:24,159
and to answer some obvious following on

37
00:01:24,159 --> 00:01:27,280
questions of why do we need iscs and

38
00:01:27,280 --> 00:01:29,439
where in our devops cycles would these

39
00:01:29,439 --> 00:01:33,360
ic sas tools fit in

40
00:01:33,840 --> 00:01:37,119
who are any star wars fans here

41
00:01:37,119 --> 00:01:39,600
oh not many

42
00:01:39,600 --> 00:01:40,479
okay

43
00:01:40,479 --> 00:01:41,840
well if you would you would have enjoyed

44
00:01:41,840 --> 00:01:44,240
these imageries anyway

45
00:01:44,240 --> 00:01:47,040
so uh the next three slides are the tldr

46
00:01:47,040 --> 00:01:48,720
for my presentation

47
00:01:48,720 --> 00:01:52,320
so we are all on our cloud journeys

48
00:01:52,320 --> 00:01:54,720
on-prem uh private cloud public cloud

49
00:01:54,720 --> 00:01:56,880
does not matter and we are all in a rush

50
00:01:56,880 --> 00:01:59,360
to containerize our applications

51
00:01:59,360 --> 00:02:01,280
and we have been smart about it and

52
00:02:01,280 --> 00:02:04,479
we've used infrastructure as code to uh

53
00:02:04,479 --> 00:02:06,320
deploy and provision our infrastructure

54
00:02:06,320 --> 00:02:08,720
which is great i mean because that

55
00:02:08,720 --> 00:02:10,560
allows us to kind of

56
00:02:10,560 --> 00:02:13,520
deliver a fast software quickly

57
00:02:13,520 --> 00:02:15,920
so that's good and we are delivering our

58
00:02:15,920 --> 00:02:18,000
software faster than light which is

59
00:02:18,000 --> 00:02:20,319
great so what can go wrong

60
00:02:20,319 --> 00:02:24,000
well as it turns out quite a lot can so

61
00:02:24,000 --> 00:02:25,520
if you have not made sure that your

62
00:02:25,520 --> 00:02:27,440
infrastructure code

63
00:02:27,440 --> 00:02:29,440
does not have any misconfigurations or

64
00:02:29,440 --> 00:02:31,840
it has if it has not been coded properly

65
00:02:31,840 --> 00:02:33,599
then all these mis configurations can

66
00:02:33,599 --> 00:02:35,599
lead to potential vulnerabilities in

67
00:02:35,599 --> 00:02:38,879
your infrastructure when it is deployed

68
00:02:38,879 --> 00:02:41,599
so then what do we do about this

69
00:02:41,599 --> 00:02:43,360
so we do want to use infrastructure as

70
00:02:43,360 --> 00:02:44,879
code because we do not want to deploy

71
00:02:44,879 --> 00:02:47,360
our infrastructure manually so we still

72
00:02:47,360 --> 00:02:49,280
want to use isc

73
00:02:49,280 --> 00:02:51,280
then how can we find these issues early

74
00:02:51,280 --> 00:02:55,360
on during the development cycle well

75
00:02:55,360 --> 00:02:57,680
as always yoda has an answer for this so

76
00:02:57,680 --> 00:03:00,879
yoda says ins install or implement icsas

77
00:03:00,879 --> 00:03:02,400
in your workflow and i think i agree

78
00:03:02,400 --> 00:03:05,040
with him

79
00:03:05,040 --> 00:03:07,360
that was basically the

80
00:03:07,360 --> 00:03:09,599
nutshell my presentation in a nutshell

81
00:03:09,599 --> 00:03:13,040
so feel free to walk out and get a break

82
00:03:13,040 --> 00:03:14,959
but for those of you want to know more

83
00:03:14,959 --> 00:03:17,920
let's carry on so i'll briefly introduce

84
00:03:17,920 --> 00:03:20,480
to you what iac is before jumping on to

85
00:03:20,480 --> 00:03:23,599
introduce what uh iec sas does and to

86
00:03:23,599 --> 00:03:26,720
fully appreciate why we need icsast we

87
00:03:26,720 --> 00:03:28,879
need to first understand uh and i need

88
00:03:28,879 --> 00:03:30,640
to scare you a bit here we need to see

89
00:03:30,640 --> 00:03:32,319
what are the possible vulnerabilities

90
00:03:32,319 --> 00:03:33,920
that can happen in the infrastructure

91
00:03:33,920 --> 00:03:35,599
because of misconfigurations in our

92
00:03:35,599 --> 00:03:37,120
infrastructure code

93
00:03:37,120 --> 00:03:38,720
and then i'll show you some examples of

94
00:03:38,720 --> 00:03:41,440
icsas tools then we'll see how we can

95
00:03:41,440 --> 00:03:44,640
deploy this into our devops cycle and

96
00:03:44,640 --> 00:03:46,799
i'll conclude

97
00:03:46,799 --> 00:03:50,720
so i see woohoo yes we all need to ic is

98
00:03:50,720 --> 00:03:53,120
the way to go about it we do not want to

99
00:03:53,120 --> 00:03:54,799
do stuff manually so

100
00:03:54,799 --> 00:03:57,280
we we need ise that's a smart thing to

101
00:03:57,280 --> 00:03:58,000
do

102
00:03:58,000 --> 00:04:00,879
so again briefly what is ise iic is a

103
00:04:00,879 --> 00:04:02,720
collection of your machine readable

104
00:04:02,720 --> 00:04:04,239
definitions for your infrastructure

105
00:04:04,239 --> 00:04:06,159
which you have coded which which is in

106
00:04:06,159 --> 00:04:07,920
the form of uh configuration files

107
00:04:07,920 --> 00:04:10,239
templates policy scripts now again these

108
00:04:10,239 --> 00:04:12,159
are all in the file format so which

109
00:04:12,159 --> 00:04:14,159
means this can be version control so all

110
00:04:14,159 --> 00:04:15,599
the goodness of the version controlling

111
00:04:15,599 --> 00:04:17,759
comes with it and there have to be some

112
00:04:17,759 --> 00:04:20,959
tools that understand uh how to

113
00:04:20,959 --> 00:04:23,440
and read these files and then go ahead

114
00:04:23,440 --> 00:04:25,520
and do what is necessary to deploy and

115
00:04:25,520 --> 00:04:27,280
provision your infrastructure

116
00:04:27,280 --> 00:04:29,520
that your likes of cloudformation

117
00:04:29,520 --> 00:04:31,280
terraform kubernetes are some of the

118
00:04:31,280 --> 00:04:33,840
examples so these tools understand your

119
00:04:33,840 --> 00:04:35,840
code that you have written

120
00:04:35,840 --> 00:04:38,000
and go and deploy the infrastructure for

121
00:04:38,000 --> 00:04:39,440
you your network your security your

122
00:04:39,440 --> 00:04:41,680
storage application infrastructure

123
00:04:41,680 --> 00:04:44,479
here are some more examples of some ic

124
00:04:44,479 --> 00:04:46,560
tools out there in the market today this

125
00:04:46,560 --> 00:04:48,800
list is not complete or comprehensive by

126
00:04:48,800 --> 00:04:50,720
any means it's just to give you an idea

127
00:04:50,720 --> 00:04:53,759
of what an iec sas tool is you might be

128
00:04:53,759 --> 00:04:56,000
familiar with this

129
00:04:56,000 --> 00:04:57,680
um

130
00:04:57,680 --> 00:05:00,320
yeah so ise has a lot of benefits and

131
00:05:00,320 --> 00:05:01,759
that's why i said it's a smart thing to

132
00:05:01,759 --> 00:05:03,039
do so

133
00:05:03,039 --> 00:05:05,840
it helps you automate your workflows and

134
00:05:05,840 --> 00:05:08,639
because it's in the form of a file which

135
00:05:08,639 --> 00:05:10,560
means it you can repeat it you can use

136
00:05:10,560 --> 00:05:12,560
the same file or the template

137
00:05:12,560 --> 00:05:14,080
to deploy your infrastructure and

138
00:05:14,080 --> 00:05:16,400
provision it in different regions or

139
00:05:16,400 --> 00:05:19,120
maybe you can hand it over to your

140
00:05:19,120 --> 00:05:22,000
other teams in your organization as a

141
00:05:22,000 --> 00:05:24,479
reference template and because there is

142
00:05:24,479 --> 00:05:25,600
no

143
00:05:25,600 --> 00:05:27,840
more hand cranking involved that means

144
00:05:27,840 --> 00:05:29,199
it's scalable

145
00:05:29,199 --> 00:05:31,520
and if you've ensured that your template

146
00:05:31,520 --> 00:05:33,440
is secure and there are no issues in

147
00:05:33,440 --> 00:05:35,280
them no security misconfigurations in

148
00:05:35,280 --> 00:05:37,520
them then you can be assured then when

149
00:05:37,520 --> 00:05:39,199
when that when these

150
00:05:39,199 --> 00:05:40,320
uh

151
00:05:40,320 --> 00:05:41,759
this code infrastructure code is

152
00:05:41,759 --> 00:05:44,720
deployed that your uh network that your

153
00:05:44,720 --> 00:05:46,160
network and your infrastructure is

154
00:05:46,160 --> 00:05:48,320
reasonably secure also

155
00:05:48,320 --> 00:05:50,880
right and as uh darth vader correctly

156
00:05:50,880 --> 00:05:52,800
points out here if you have not made

157
00:05:52,800 --> 00:05:55,680
sure that your security that your

158
00:05:55,680 --> 00:05:58,240
infrastructure code is secure then all

159
00:05:58,240 --> 00:06:00,319
these benefits that i listed here can so

160
00:06:00,319 --> 00:06:02,720
easily turn into pitfalls i hope you can

161
00:06:02,720 --> 00:06:05,440
understand that

162
00:06:05,520 --> 00:06:06,479
so

163
00:06:06,479 --> 00:06:09,199
yes as i said to fully appreciate why we

164
00:06:09,199 --> 00:06:11,919
need icsast in our workflows we need to

165
00:06:11,919 --> 00:06:13,840
first understand what are the possible

166
00:06:13,840 --> 00:06:16,080
vulnerabilities that can happen in the

167
00:06:16,080 --> 00:06:17,840
deployed infrastructure because of the

168
00:06:17,840 --> 00:06:20,560
misconfigurations in your code right so

169
00:06:20,560 --> 00:06:22,400
let's see some of the dark side of iic

170
00:06:22,400 --> 00:06:24,319
now

171
00:06:24,319 --> 00:06:27,440
i have listed some potential

172
00:06:27,440 --> 00:06:29,199
misconfigurations that could lead to

173
00:06:29,199 --> 00:06:30,800
potential vulnerabilities in your

174
00:06:30,800 --> 00:06:34,000
infrastructure so in the first one here

175
00:06:34,000 --> 00:06:34,880
um

176
00:06:34,880 --> 00:06:36,720
network exposure could happen if you

177
00:06:36,720 --> 00:06:38,880
have not been careful about configuring

178
00:06:38,880 --> 00:06:41,199
your firewall properly if you've not

179
00:06:41,199 --> 00:06:43,199
made sure that your uh cloud storage

180
00:06:43,199 --> 00:06:45,360
devices your databases are not available

181
00:06:45,360 --> 00:06:47,199
publicly which normally you don't need

182
00:06:47,199 --> 00:06:49,599
to make it publicly available and for

183
00:06:49,599 --> 00:06:51,199
whatever reason you've left your ssh

184
00:06:51,199 --> 00:06:53,120
ports open to the public

185
00:06:53,120 --> 00:06:53,919
right

186
00:06:53,919 --> 00:06:54,720
and

187
00:06:54,720 --> 00:06:56,880
yes unauthorized privilege escalations

188
00:06:56,880 --> 00:06:59,520
can happen if you have not stored your

189
00:06:59,520 --> 00:07:01,360
secrets your

190
00:07:01,360 --> 00:07:02,400
keys

191
00:07:02,400 --> 00:07:04,479
properly or maybe you're running your

192
00:07:04,479 --> 00:07:06,800
containers as root

193
00:07:06,800 --> 00:07:07,840
and

194
00:07:07,840 --> 00:07:09,919
yeah or maybe you've given

195
00:07:09,919 --> 00:07:11,680
too much permissions to your resources

196
00:07:11,680 --> 00:07:13,199
which could lead to improper access

197
00:07:13,199 --> 00:07:15,440
control or maybe you've not enabled

198
00:07:15,440 --> 00:07:17,599
logging at all on your um

199
00:07:17,599 --> 00:07:19,919
maybe on your s3 bucket or and maybe

200
00:07:19,919 --> 00:07:21,759
your locks are not encrypted

201
00:07:21,759 --> 00:07:22,960
so that's

202
00:07:22,960 --> 00:07:24,960
that's one of the over vulnerabilities

203
00:07:24,960 --> 00:07:26,720
of insufficient logging and insecure

204
00:07:26,720 --> 00:07:28,560
logging

205
00:07:28,560 --> 00:07:30,639
how do these misconfigurations in your

206
00:07:30,639 --> 00:07:32,639
infrastructure code happen they can

207
00:07:32,639 --> 00:07:34,639
happen for a lot of reasons so it could

208
00:07:34,639 --> 00:07:37,360
be a simple oversight by an engineer or

209
00:07:37,360 --> 00:07:39,120
maybe the engineer who is coding this

210
00:07:39,120 --> 00:07:41,280
infrastructure file configuration file

211
00:07:41,280 --> 00:07:45,039
is new to iac uh the the developer is a

212
00:07:45,039 --> 00:07:46,479
comes from an application development

213
00:07:46,479 --> 00:07:48,800
land is not familiar with how to code an

214
00:07:48,800 --> 00:07:50,319
infrastructure file

215
00:07:50,319 --> 00:07:52,319
uh or maybe it's a complex iac

216
00:07:52,319 --> 00:07:54,639
configuration file and and it's code

217
00:07:54,639 --> 00:07:57,840
after all so no code is bug free

218
00:07:57,840 --> 00:08:00,319
or may and we have fast moving devops

219
00:08:00,319 --> 00:08:02,000
cycles these days

220
00:08:02,000 --> 00:08:04,080
there could be gaps in our testing or

221
00:08:04,080 --> 00:08:06,080
maybe we are depending too much on our

222
00:08:06,080 --> 00:08:08,319
pen testers and our dynamic testing

223
00:08:08,319 --> 00:08:10,560
tools to find issues in our deployed

224
00:08:10,560 --> 00:08:12,479
infrastructure and so not paying enough

225
00:08:12,479 --> 00:08:14,400
attention on our testing testing our

226
00:08:14,400 --> 00:08:16,080
infrastructure code

227
00:08:16,080 --> 00:08:17,280
well

228
00:08:17,280 --> 00:08:18,560
i have

229
00:08:18,560 --> 00:08:21,280
some industry reports here to back up

230
00:08:21,280 --> 00:08:24,000
back me up on what i'm saying

231
00:08:24,000 --> 00:08:25,199
so

232
00:08:25,199 --> 00:08:28,080
in the first report here this is from um

233
00:08:28,080 --> 00:08:31,199
uh 2021 iec research report from sneak

234
00:08:31,199 --> 00:08:33,120
and what i want to highlight here is

235
00:08:33,120 --> 00:08:35,519
that about 45

236
00:08:35,519 --> 00:08:37,279
of the mis configurations or

237
00:08:37,279 --> 00:08:38,958
vulnerabilities in your in the

238
00:08:38,958 --> 00:08:41,760
infrastructure was found after if it was

239
00:08:41,760 --> 00:08:44,399
deployed and according to the survey

240
00:08:44,399 --> 00:08:46,640
it took them more than a week to

241
00:08:46,640 --> 00:08:48,800
discover a security issue if that was

242
00:08:48,800 --> 00:08:50,560
discoverable i would say

243
00:08:50,560 --> 00:08:53,440
and more than a week to fix those issues

244
00:08:53,440 --> 00:08:55,680
when found so as you can understand how

245
00:08:55,680 --> 00:08:58,080
stressful it would be for an engineer

246
00:08:58,080 --> 00:09:00,320
first of all it's very expensive

247
00:09:00,320 --> 00:09:01,040
to

248
00:09:01,040 --> 00:09:02,640
go about fixing these and then very

249
00:09:02,640 --> 00:09:03,920
stressful for the engineers who are

250
00:09:03,920 --> 00:09:06,240
fixing it

251
00:09:06,240 --> 00:09:08,240
here in the second report industry

252
00:09:08,240 --> 00:09:10,720
report this is from the security team of

253
00:09:10,720 --> 00:09:12,399
palo alto networks

254
00:09:12,399 --> 00:09:15,760
this is a cloud threat report where

255
00:09:15,760 --> 00:09:17,200
they do show you all the different types

256
00:09:17,200 --> 00:09:19,279
of vulnerabilities that were found in

257
00:09:19,279 --> 00:09:21,360
the publicly available

258
00:09:21,360 --> 00:09:23,200
infrastructure code templates

259
00:09:23,200 --> 00:09:25,440
but another thing that this is kind of

260
00:09:25,440 --> 00:09:27,040
very new this information what they're

261
00:09:27,040 --> 00:09:28,800
trying to say here is that it's very

262
00:09:28,800 --> 00:09:31,440
important to secure your infrastructure

263
00:09:31,440 --> 00:09:33,600
code in order to secure your

264
00:09:33,600 --> 00:09:35,279
supply chain

265
00:09:35,279 --> 00:09:38,000
so uh here they're taking example of

266
00:09:38,000 --> 00:09:40,399
terraform and they're saying that their

267
00:09:40,399 --> 00:09:42,720
num your chances of having uh

268
00:09:42,720 --> 00:09:45,040
misconfigurations in your iac file

269
00:09:45,040 --> 00:09:47,519
increases uh as the number of your

270
00:09:47,519 --> 00:09:49,360
terraform modules that you're including

271
00:09:49,360 --> 00:09:51,279
in your code also increases and they're

272
00:09:51,279 --> 00:09:53,200
clearly pointing out here that these

273
00:09:53,200 --> 00:09:55,360
misconfigurations are not happening

274
00:09:55,360 --> 00:09:57,440
because of the public cloud provider

275
00:09:57,440 --> 00:10:01,279
you're using nor because of the uh iac 2

276
00:10:01,279 --> 00:10:02,880
like in this case terraform that you're

277
00:10:02,880 --> 00:10:04,880
using but these are happening because of

278
00:10:04,880 --> 00:10:08,320
us the coders who are using these

279
00:10:08,320 --> 00:10:10,000
modules incorrectly coding them

280
00:10:10,000 --> 00:10:12,640
incorrectly

281
00:10:13,519 --> 00:10:15,200
so if i have not scared you enough let

282
00:10:15,200 --> 00:10:17,360
me make it more relatable to you and

283
00:10:17,360 --> 00:10:19,680
make it easier for you to understand how

284
00:10:19,680 --> 00:10:22,399
these can happen in your code right so

285
00:10:22,399 --> 00:10:24,160
let's see some examples of how these

286
00:10:24,160 --> 00:10:25,680
misconfigurations can happen in your

287
00:10:25,680 --> 00:10:27,920
code i've taken some these examples from

288
00:10:27,920 --> 00:10:30,320
the publicly available terra got project

289
00:10:30,320 --> 00:10:32,640
this is from bridge crew

290
00:10:32,640 --> 00:10:34,640
terracotta project is a very interesting

291
00:10:34,640 --> 00:10:36,640
collection of files they have a

292
00:10:36,640 --> 00:10:38,880
collection of uh vulnerable

293
00:10:38,880 --> 00:10:41,600
infrastructure as code files

294
00:10:41,600 --> 00:10:44,000
so it's a great tool to use when you are

295
00:10:44,000 --> 00:10:46,000
in the process of selecting an iec sas

296
00:10:46,000 --> 00:10:47,760
tool for your organization say you want

297
00:10:47,760 --> 00:10:49,680
to evaluate a tool you want to benchmark

298
00:10:49,680 --> 00:10:52,720
a tool then i would say go check this

299
00:10:52,720 --> 00:10:54,079
out

300
00:10:54,079 --> 00:10:55,839
so yeah let's go through these examples

301
00:10:55,839 --> 00:10:58,240
um in the first case

302
00:10:58,240 --> 00:11:02,079
so as you i've highlighted there um so

303
00:11:02,079 --> 00:11:06,000
the ssh port 22 um was left open to the

304
00:11:06,000 --> 00:11:07,519
whole world and we know it's not a great

305
00:11:07,519 --> 00:11:10,320
idea at all in the second example the s3

306
00:11:10,320 --> 00:11:14,560
bucket is not encrypted at rest

307
00:11:14,560 --> 00:11:16,079
here in the third one there was no

308
00:11:16,079 --> 00:11:18,720
logging enabled on the s3 bucket and

309
00:11:18,720 --> 00:11:20,800
here in the fourth example there was no

310
00:11:20,800 --> 00:11:22,640
fine grained access control on your for

311
00:11:22,640 --> 00:11:24,720
your elastic search

312
00:11:24,720 --> 00:11:26,320
i hope i've scared you enough now so

313
00:11:26,320 --> 00:11:28,320
this would be a nice segue to introduce

314
00:11:28,320 --> 00:11:31,360
iec sas to you

315
00:11:31,839 --> 00:11:32,959
so

316
00:11:32,959 --> 00:11:35,120
let's try and see now how ise sas can

317
00:11:35,120 --> 00:11:37,760
rescue us right help us find out these

318
00:11:37,760 --> 00:11:40,160
misconfigurations in infrastructure code

319
00:11:40,160 --> 00:11:43,839
very early in our development cycle

320
00:11:43,839 --> 00:11:44,640
so

321
00:11:44,640 --> 00:11:48,320
what is icsast ics has a static analysis

322
00:11:48,320 --> 00:11:50,639
of your infrastructure as code

323
00:11:50,639 --> 00:11:52,639
to find any security misconfigurations

324
00:11:52,639 --> 00:11:55,920
in your code so ideally the the it

325
00:11:55,920 --> 00:11:57,360
should look like this so you have your

326
00:11:57,360 --> 00:11:58,959
configuration files your templates

327
00:11:58,959 --> 00:12:01,440
scripts and policies and you have your

328
00:12:01,440 --> 00:12:04,720
ic sas tool the sas tool runs a scan

329
00:12:04,720 --> 00:12:06,800
on your configuration files and it

330
00:12:06,800 --> 00:12:09,120
reports a bunch of findings and these

331
00:12:09,120 --> 00:12:10,880
bunch of findings these findings should

332
00:12:10,880 --> 00:12:13,279
be fed back to your developers or

333
00:12:13,279 --> 00:12:15,040
production engineers who are whoever is

334
00:12:15,040 --> 00:12:17,920
working on it so they fix it and they

335
00:12:17,920 --> 00:12:20,000
fix this in your

336
00:12:20,000 --> 00:12:22,959
configuration file in your uh templates

337
00:12:22,959 --> 00:12:25,040
rather than fixing them in your

338
00:12:25,040 --> 00:12:27,120
infrastructure files so as you can see

339
00:12:27,120 --> 00:12:29,360
this is truly shift left this is so

340
00:12:29,360 --> 00:12:31,440
close to the developers you are fixing

341
00:12:31,440 --> 00:12:33,040
issues in your

342
00:12:33,040 --> 00:12:35,200
code even before the infrastructure is

343
00:12:35,200 --> 00:12:36,560
deployed

344
00:12:36,560 --> 00:12:38,800
right and another point i want to make

345
00:12:38,800 --> 00:12:41,519
here is that you might say you have um

346
00:12:41,519 --> 00:12:43,600
dynamic testing tools or you have your

347
00:12:43,600 --> 00:12:45,760
pen testers testing your infrastructure

348
00:12:45,760 --> 00:12:48,240
so why would i need an ic sas tool but

349
00:12:48,240 --> 00:12:51,040
you see there's more information in your

350
00:12:51,040 --> 00:12:53,360
infrastructure code than you would

351
00:12:53,360 --> 00:12:55,040
normally have once your infrastructure

352
00:12:55,040 --> 00:12:56,240
is deployed

353
00:12:56,240 --> 00:12:58,399
two examples that come to my mind are

354
00:12:58,399 --> 00:13:01,040
improper access control

355
00:13:01,040 --> 00:13:03,200
i doubt any dynamic testing tool would

356
00:13:03,200 --> 00:13:05,440
find that and

357
00:13:05,440 --> 00:13:07,279
yeah maybe good pen testing would find

358
00:13:07,279 --> 00:13:09,360
that but you would need to have very

359
00:13:09,360 --> 00:13:11,680
good test cases bad test cases to find

360
00:13:11,680 --> 00:13:14,079
those improper access control issues

361
00:13:14,079 --> 00:13:15,760
and another one is unauthorized

362
00:13:15,760 --> 00:13:19,120
privilege access so again here um you

363
00:13:19,120 --> 00:13:21,279
would need really good say for example

364
00:13:21,279 --> 00:13:23,279
your containers running as root i don't

365
00:13:23,279 --> 00:13:24,720
know any tool out there that could find

366
00:13:24,720 --> 00:13:26,639
this for you unless you have good pen

367
00:13:26,639 --> 00:13:28,480
testing now again how many of us do good

368
00:13:28,480 --> 00:13:30,399
pen testing that's that's

369
00:13:30,399 --> 00:13:32,720
yeah but these things can be found by

370
00:13:32,720 --> 00:13:34,800
your by just simply scanning your

371
00:13:34,800 --> 00:13:37,680
infrastructure code

372
00:13:37,680 --> 00:13:39,040
um i

373
00:13:39,040 --> 00:13:40,639
ran uh

374
00:13:40,639 --> 00:13:42,800
an ic sas scan on some of those

375
00:13:42,800 --> 00:13:44,560
vulnerable examples that i showed you

376
00:13:44,560 --> 00:13:45,760
previously

377
00:13:45,760 --> 00:13:48,480
i'm here taking a checo bridge cruise

378
00:13:48,480 --> 00:13:51,360
deco as an ic sas tool example again to

379
00:13:51,360 --> 00:13:53,519
point out these these are just examples

380
00:13:53,519 --> 00:13:55,519
i'm not promoting any tool this is just

381
00:13:55,519 --> 00:13:57,839
so you get an idea of how this can be

382
00:13:57,839 --> 00:13:58,800
done

383
00:13:58,800 --> 00:14:00,720
so when i ran the checkout scan on those

384
00:14:00,720 --> 00:14:03,519
vulnerable files

385
00:14:03,519 --> 00:14:05,680
in the first case where the ssh port was

386
00:14:05,680 --> 00:14:08,240
left open to the world uh it clearly

387
00:14:08,240 --> 00:14:11,680
shows that what the issue is in the code

388
00:14:11,680 --> 00:14:14,560
and where in the file is the issue

389
00:14:14,560 --> 00:14:16,480
and how and it also provides some kind

390
00:14:16,480 --> 00:14:18,720
of guideline as to how can i go about

391
00:14:18,720 --> 00:14:21,040
fixing this issue

392
00:14:21,040 --> 00:14:23,199
um yeah in the second one it says it

393
00:14:23,199 --> 00:14:25,440
clearly says ensure all data stored in

394
00:14:25,440 --> 00:14:27,600
the s3 bucket is securely encrypted at

395
00:14:27,600 --> 00:14:31,279
rest here in the third one it says um

396
00:14:31,279 --> 00:14:33,360
ensure that s3 bucket has access logging

397
00:14:33,360 --> 00:14:36,160
enabled uh for the fourth one make sure

398
00:14:36,160 --> 00:14:38,320
ensure i am policies does not allow

399
00:14:38,320 --> 00:14:40,240
right access control access without

400
00:14:40,240 --> 00:14:42,079
constraints

401
00:14:42,079 --> 00:14:44,639
so i hope at this point you understand

402
00:14:44,639 --> 00:14:47,760
uh briefly like get an idea of what iic

403
00:14:47,760 --> 00:14:50,240
is what are the misconfigurations in the

404
00:14:50,240 --> 00:14:51,839
isc that could lead to potential

405
00:14:51,839 --> 00:14:54,160
vulnerabilities in the infrastructure

406
00:14:54,160 --> 00:14:57,120
and how i see sassed by running scans on

407
00:14:57,120 --> 00:14:58,399
these

408
00:14:58,399 --> 00:15:00,639
infrastructure code you can find these

409
00:15:00,639 --> 00:15:02,560
vulnerabilities early on in your

410
00:15:02,560 --> 00:15:04,320
development cycle

411
00:15:04,320 --> 00:15:06,959
and now i'll show you some um examples

412
00:15:06,959 --> 00:15:10,320
of ics tools out there

413
00:15:10,320 --> 00:15:12,880
which you can use to run your scans uh

414
00:15:12,880 --> 00:15:15,279
on these configuration files

415
00:15:15,279 --> 00:15:18,160
um here are some popular iec sas tools

416
00:15:18,160 --> 00:15:19,600
in the market today

417
00:15:19,600 --> 00:15:21,920
um again this is not a complete or a

418
00:15:21,920 --> 00:15:24,000
comprehensive list at all just some

419
00:15:24,000 --> 00:15:27,360
examples and i'm not promoting any tool

420
00:15:27,360 --> 00:15:29,199
but i thought it was only fair to point

421
00:15:29,199 --> 00:15:32,800
out some of the tools that i have used

422
00:15:33,600 --> 00:15:35,839
and it is a very fast moving market this

423
00:15:35,839 --> 00:15:37,680
one any big security company tool

424
00:15:37,680 --> 00:15:39,759
provider that i know is in a rush to

425
00:15:39,759 --> 00:15:43,600
also offer an iec sas offering so

426
00:15:43,600 --> 00:15:46,079
very hot topic very fast moving market

427
00:15:46,079 --> 00:15:48,240
so you go do your own research

428
00:15:48,240 --> 00:15:51,120
benchmarking um and evaluation of the

429
00:15:51,120 --> 00:15:53,360
tool to decide what tool would suit best

430
00:15:53,360 --> 00:15:55,680
for your organization

431
00:15:55,680 --> 00:15:58,160
and in order to do that here are some

432
00:15:58,160 --> 00:16:00,320
criteria according to me which are

433
00:16:00,320 --> 00:16:02,240
important when you go about selecting an

434
00:16:02,240 --> 00:16:04,639
iec sas tool for your organization

435
00:16:04,639 --> 00:16:06,880
first and foremost it should support the

436
00:16:06,880 --> 00:16:09,680
file types that your organization is

437
00:16:09,680 --> 00:16:12,480
going to use kubernetes um cloud

438
00:16:12,480 --> 00:16:14,800
formation terraform um

439
00:16:14,800 --> 00:16:16,800
or these days if the new kid on the

440
00:16:16,800 --> 00:16:18,800
block is pollumi i think so you have to

441
00:16:18,800 --> 00:16:20,240
make sure that

442
00:16:20,240 --> 00:16:22,160
uh this tool supports all these file

443
00:16:22,160 --> 00:16:24,160
types and it would be nice if it could

444
00:16:24,160 --> 00:16:26,639
support some of the industry security

445
00:16:26,639 --> 00:16:29,440
standards like cis and nist

446
00:16:29,440 --> 00:16:31,839
and you do not want to run these tools

447
00:16:31,839 --> 00:16:34,240
manually that's not scalable at all so

448
00:16:34,240 --> 00:16:35,759
the tool should have the ability to

449
00:16:35,759 --> 00:16:37,519
integrate with your software control

450
00:16:37,519 --> 00:16:40,320
management systems like git git lab or

451
00:16:40,320 --> 00:16:41,519
github

452
00:16:41,519 --> 00:16:44,880
um and yeah output format may become

453
00:16:44,880 --> 00:16:46,639
important if you want to

454
00:16:46,639 --> 00:16:48,959
forward your findings uh from the tool

455
00:16:48,959 --> 00:16:52,560
to a dashboard for easy viewing metric

456
00:16:52,560 --> 00:16:53,680
and uh

457
00:16:53,680 --> 00:16:56,240
ability to understand the context and

458
00:16:56,240 --> 00:16:58,480
resolve references in your ise becomes

459
00:16:58,480 --> 00:16:59,920
important

460
00:16:59,920 --> 00:17:02,160
because you might be including other

461
00:17:02,160 --> 00:17:03,680
modules from

462
00:17:03,680 --> 00:17:05,760
other git repositories so if the tool

463
00:17:05,760 --> 00:17:08,160
can also scan that and

464
00:17:08,160 --> 00:17:11,280
get a better context of the code then

465
00:17:11,280 --> 00:17:13,359
that would mean low false positives

466
00:17:13,359 --> 00:17:14,240
right

467
00:17:14,240 --> 00:17:15,599
yeah i missed a point that so high

468
00:17:15,599 --> 00:17:17,919
signals to noise ratio is good i've seen

469
00:17:17,919 --> 00:17:19,919
that some tools out of the box have

470
00:17:19,919 --> 00:17:20,959
better

471
00:17:20,959 --> 00:17:22,959
signal to noise ratio that is low false

472
00:17:22,959 --> 00:17:25,039
positives compared to some others some

473
00:17:25,039 --> 00:17:27,039
tools perform better in some areas and

474
00:17:27,039 --> 00:17:28,960
some others and something else so again

475
00:17:28,960 --> 00:17:31,039
go to your research and benchmarking to

476
00:17:31,039 --> 00:17:33,280
figure out what suits you best

477
00:17:33,280 --> 00:17:35,760
and if the if you could add your own

478
00:17:35,760 --> 00:17:38,880
custom rules custom checks um and maybe

479
00:17:38,880 --> 00:17:40,880
modify the existing checks that would be

480
00:17:40,880 --> 00:17:44,080
handy um of course um like every other

481
00:17:44,080 --> 00:17:46,559
tools you have the open source version

482
00:17:46,559 --> 00:17:48,720
and the paid version and paid versions

483
00:17:48,720 --> 00:17:50,080
have some fancy

484
00:17:50,080 --> 00:17:52,000
dashboards available you they have

485
00:17:52,000 --> 00:17:54,799
integration with your github github app

486
00:17:54,799 --> 00:17:58,320
gitlab githubs app applications and they

487
00:17:58,320 --> 00:18:00,640
can report the issues to you so you can

488
00:18:00,640 --> 00:18:01,840
go and

489
00:18:01,840 --> 00:18:04,480
fix them or open a ticket so

490
00:18:04,480 --> 00:18:07,039
um and i've been saying static analysis

491
00:18:07,039 --> 00:18:09,600
but these static analysis tools can also

492
00:18:09,600 --> 00:18:12,480
also these days uh run a scan on your

493
00:18:12,480 --> 00:18:15,520
runtime environment and see what is the

494
00:18:15,520 --> 00:18:17,600
different difference what is the drift

495
00:18:17,600 --> 00:18:20,240
between your runtime environment and and

496
00:18:20,240 --> 00:18:22,960
your code so i think this is handy so

497
00:18:22,960 --> 00:18:24,720
that you once you find what the drift is

498
00:18:24,720 --> 00:18:28,559
you can go back and fix it in your

499
00:18:28,559 --> 00:18:30,640
infrastructure code well i would

500
00:18:30,640 --> 00:18:32,720
recommend never go and fix it in your

501
00:18:32,720 --> 00:18:34,320
deployed infrastructure rather come back

502
00:18:34,320 --> 00:18:35,840
and fix it in your course so you come up

503
00:18:35,840 --> 00:18:37,520
with a secure template to deploy it

504
00:18:37,520 --> 00:18:40,918
again and again

505
00:18:42,240 --> 00:18:44,480
now that we've seen some examples of iec

506
00:18:44,480 --> 00:18:47,039
sas tools let's see how we can deploy it

507
00:18:47,039 --> 00:18:51,039
in our devsecop cycle

508
00:18:51,039 --> 00:18:53,039
here is a simple user flow diagram from

509
00:18:53,039 --> 00:18:54,960
a from a user's perspective a

510
00:18:54,960 --> 00:18:57,200
developer's perspective right

511
00:18:57,200 --> 00:18:58,000
so

512
00:18:58,000 --> 00:19:00,320
it would be ideal if uh the tool is

513
00:19:00,320 --> 00:19:03,919
integrated locally in the uh ide or

514
00:19:03,919 --> 00:19:07,360
maybe um in in the local git git right

515
00:19:07,360 --> 00:19:09,280
so that the developer as and when the

516
00:19:09,280 --> 00:19:11,200
developer is coding you the developer

517
00:19:11,200 --> 00:19:13,200
gets an immediate feedback and they can

518
00:19:13,200 --> 00:19:16,400
go and fix this issue then and there

519
00:19:16,400 --> 00:19:19,120
and uh integrate it with your git again

520
00:19:19,120 --> 00:19:21,520
say on your code comment or add you get

521
00:19:21,520 --> 00:19:24,640
an instant uh

522
00:19:24,640 --> 00:19:25,919
report

523
00:19:25,919 --> 00:19:28,080
instant messages to say okay here is the

524
00:19:28,080 --> 00:19:30,080
issue and you can go and fix it this way

525
00:19:30,080 --> 00:19:32,080
or you can incorporate it into your ci

526
00:19:32,080 --> 00:19:35,360
cd pipeline wherein you say okay do an

527
00:19:35,360 --> 00:19:39,120
automatic scan on every pull request

528
00:19:39,120 --> 00:19:41,200
and then you can make the findings you

529
00:19:41,200 --> 00:19:43,520
can say you can make it gated or not

530
00:19:43,520 --> 00:19:47,280
before you deploy the code

531
00:19:47,440 --> 00:19:49,760
some tips for efficient integration of

532
00:19:49,760 --> 00:19:51,919
icsas tool

533
00:19:51,919 --> 00:19:54,720
this is not just for iec sas but true

534
00:19:54,720 --> 00:19:56,880
for any sas tool even your application

535
00:19:56,880 --> 00:19:58,160
sas tool

536
00:19:58,160 --> 00:20:00,799
so ability to integrate with your ide

537
00:20:00,799 --> 00:20:03,360
and sems like github github gitlab for

538
00:20:03,360 --> 00:20:04,799
immediate feedback

539
00:20:04,799 --> 00:20:07,120
and integration into your ci cd to

540
00:20:07,120 --> 00:20:08,960
automate your workflows you do not want

541
00:20:08,960 --> 00:20:11,120
to run these things manually believe me

542
00:20:11,120 --> 00:20:13,120
they're not scalable at all

543
00:20:13,120 --> 00:20:14,400
and

544
00:20:14,400 --> 00:20:16,240
high signal to noise ratio is very

545
00:20:16,240 --> 00:20:19,360
important to keep the developers engaged

546
00:20:19,360 --> 00:20:21,440
and motivated to go look at those

547
00:20:21,440 --> 00:20:23,280
findings and fix them otherwise i'm

548
00:20:23,280 --> 00:20:24,880
telling you don't even bother with with

549
00:20:24,880 --> 00:20:27,200
the sas tool because it's not effective

550
00:20:27,200 --> 00:20:28,080
at all

551
00:20:28,080 --> 00:20:29,360
so

552
00:20:29,360 --> 00:20:30,400
uh

553
00:20:30,400 --> 00:20:32,159
how how can you go about doing this so

554
00:20:32,159 --> 00:20:35,440
i've seen that most of the ic sas tools

555
00:20:35,440 --> 00:20:38,080
true also for the application sas tools

556
00:20:38,080 --> 00:20:40,000
what you can do is you can pass in your

557
00:20:40,000 --> 00:20:42,320
customized configuration files where you

558
00:20:42,320 --> 00:20:44,320
can just focus on

559
00:20:44,320 --> 00:20:46,640
as a for we're talking about a security

560
00:20:46,640 --> 00:20:48,400
here so you can just focus on maybe

561
00:20:48,400 --> 00:20:51,039
security issues first uh so i came up

562
00:20:51,039 --> 00:20:52,559
with such a configuration file for one

563
00:20:52,559 --> 00:20:55,039
of the tools uh i was using i'm using in

564
00:20:55,039 --> 00:20:57,679
my organization and then i just focused

565
00:20:57,679 --> 00:21:00,000
on the security issues and masked all

566
00:21:00,000 --> 00:21:00,880
the

567
00:21:00,880 --> 00:21:03,280
maybe high availability issues your best

568
00:21:03,280 --> 00:21:05,360
coding practices they are definitely not

569
00:21:05,360 --> 00:21:07,120
important in the first run we just want

570
00:21:07,120 --> 00:21:09,440
to find high value

571
00:21:09,440 --> 00:21:11,919
and meaningful findings

572
00:21:11,919 --> 00:21:13,360
to as i said

573
00:21:13,360 --> 00:21:15,760
so that the developer is motivated and

574
00:21:15,760 --> 00:21:17,840
engaged and they want to look at the

575
00:21:17,840 --> 00:21:20,400
findings and fix them not just throw an

576
00:21:20,400 --> 00:21:22,799
ic sas tool at them and which reports

577
00:21:22,799 --> 00:21:24,799
like hundreds of findings nobody's going

578
00:21:24,799 --> 00:21:26,320
to look at them try ask them and fix

579
00:21:26,320 --> 00:21:27,280
them

580
00:21:27,280 --> 00:21:29,600
so in one such example i found that by

581
00:21:29,600 --> 00:21:30,480
just

582
00:21:30,480 --> 00:21:32,960
masking out the non-security related

583
00:21:32,960 --> 00:21:35,200
issues i could bring down the fine

584
00:21:35,200 --> 00:21:38,799
number of findings from 143 to 16. and

585
00:21:38,799 --> 00:21:41,280
effective false management is important

586
00:21:41,280 --> 00:21:42,960
so that um

587
00:21:42,960 --> 00:21:44,880
as when you find the issue and you see

588
00:21:44,880 --> 00:21:46,159
it's a false positive you can

589
00:21:46,159 --> 00:21:47,760
immediately go and say okay mark this as

590
00:21:47,760 --> 00:21:49,200
false positive so that it does not come

591
00:21:49,200 --> 00:21:51,440
up again and again in your scanning

592
00:21:51,440 --> 00:21:53,600
and low friction security experience is

593
00:21:53,600 --> 00:21:56,080
also very important neither the tool nor

594
00:21:56,080 --> 00:21:58,320
the security engineer i believe should

595
00:21:58,320 --> 00:22:00,799
become a bottleneck in your workflow we

596
00:22:00,799 --> 00:22:02,799
should trust our engineers and as

597
00:22:02,799 --> 00:22:05,120
security engineers all we can do is

598
00:22:05,120 --> 00:22:06,880
provide them a good tool provide them a

599
00:22:06,880 --> 00:22:08,559
good set of high value configuration

600
00:22:08,559 --> 00:22:10,080
files and

601
00:22:10,080 --> 00:22:12,159
give them enough guidance and baseline

602
00:22:12,159 --> 00:22:14,000
so that when there's a reporting they

603
00:22:14,000 --> 00:22:15,760
can go check out the

604
00:22:15,760 --> 00:22:17,760
guideline of the

605
00:22:17,760 --> 00:22:19,360
baseline for that and go fix it

606
00:22:19,360 --> 00:22:21,200
themselves so we have to start trusting

607
00:22:21,200 --> 00:22:22,880
our engineers and take ourselves out of

608
00:22:22,880 --> 00:22:24,159
the workflow

609
00:22:24,159 --> 00:22:26,159
it's very important to find that balance

610
00:22:26,159 --> 00:22:28,799
between um the security risk and value

611
00:22:28,799 --> 00:22:30,480
flow

612
00:22:30,480 --> 00:22:32,960
um here is your typical devsec of cycles

613
00:22:32,960 --> 00:22:34,559
i'm not going to go into the details

614
00:22:34,559 --> 00:22:38,320
here um what i want to show you here is

615
00:22:38,320 --> 00:22:40,240
where in the difficult cycle would your

616
00:22:40,240 --> 00:22:42,159
ic sas tool fit in

617
00:22:42,159 --> 00:22:43,520
so

618
00:22:43,520 --> 00:22:46,960
um yeah it fits in with uh in the coding

619
00:22:46,960 --> 00:22:48,720
stage as i said

620
00:22:48,720 --> 00:22:49,520
like

621
00:22:49,520 --> 00:22:52,000
plug it into your ide or with your git

622
00:22:52,000 --> 00:22:54,880
for immediate feedback and

623
00:22:54,880 --> 00:22:58,080
in your build cycle wherein on every

624
00:22:58,080 --> 00:22:59,760
pull request maybe you want to automate

625
00:22:59,760 --> 00:23:00,720
your

626
00:23:00,720 --> 00:23:03,120
scans

627
00:23:04,960 --> 00:23:06,240
to conclude

628
00:23:06,240 --> 00:23:08,720
um i hope you now see

629
00:23:08,720 --> 00:23:12,559
why we need ise sast and

630
00:23:12,559 --> 00:23:14,400
what are the different ics as tools out

631
00:23:14,400 --> 00:23:16,240
there and where in your dev secours

632
00:23:16,240 --> 00:23:19,200
cycle can you fit these icsas tools into

633
00:23:19,200 --> 00:23:22,400
um just to reiterate so i see sassed

634
00:23:22,400 --> 00:23:24,960
unlike your dynamic testing tools and

635
00:23:24,960 --> 00:23:27,280
your pen testing it finds issues very

636
00:23:27,280 --> 00:23:30,559
early on in your development cycle very

637
00:23:30,559 --> 00:23:32,640
close to the developers so that helps

638
00:23:32,640 --> 00:23:34,720
develop a secure mindset to the

639
00:23:34,720 --> 00:23:36,480
developers so as and when if they get

640
00:23:36,480 --> 00:23:38,080
the feedback saying okay oh you have not

641
00:23:38,080 --> 00:23:40,559
configured a user for your container

642
00:23:40,559 --> 00:23:41,679
they're not going to repeat the same

643
00:23:41,679 --> 00:23:43,679
mistake again when they're coding so it

644
00:23:43,679 --> 00:23:46,480
helps develop a secure mindset and once

645
00:23:46,480 --> 00:23:48,080
you arrive at the

646
00:23:48,080 --> 00:23:50,480
uh to secure template it kind of becomes

647
00:23:50,480 --> 00:23:52,640
like a pave road approach you can hand

648
00:23:52,640 --> 00:23:54,799
these secure templates to other teams or

649
00:23:54,799 --> 00:23:57,120
you can use the same um template for

650
00:23:57,120 --> 00:23:58,880
deploying in other regions having peace

651
00:23:58,880 --> 00:24:01,039
of mind that this is a secure template

652
00:24:01,039 --> 00:24:02,960
and so i'm not going to find much many

653
00:24:02,960 --> 00:24:04,720
vulnerabilities in the infrastructure

654
00:24:04,720 --> 00:24:06,799
once it's deployed

655
00:24:06,799 --> 00:24:09,840
and the you the developers need not be

656
00:24:09,840 --> 00:24:11,919
security experts to run these scans find

657
00:24:11,919 --> 00:24:13,679
the issues and fix them as long as we've

658
00:24:13,679 --> 00:24:15,679
given them enough guidance and baselines

659
00:24:15,679 --> 00:24:18,720
to tell them how to go and fix it

660
00:24:18,720 --> 00:24:20,400
again i'm not saying

661
00:24:20,400 --> 00:24:23,679
your iac sas tools are replacement for

662
00:24:23,679 --> 00:24:25,440
your dynamic testing tools or your pen

663
00:24:25,440 --> 00:24:28,159
testing but what i'm saying is

664
00:24:28,159 --> 00:24:30,080
complement your dynamic testing tools

665
00:24:30,080 --> 00:24:32,320
and your pen testing with iac sas to

666
00:24:32,320 --> 00:24:35,120
find issues very early on you during the

667
00:24:35,120 --> 00:24:36,880
development cycle so you can fix the

668
00:24:36,880 --> 00:24:39,360
issue in the code and this is truly

669
00:24:39,360 --> 00:24:42,480
shift left and we know shift left means

670
00:24:42,480 --> 00:24:44,480
less effort less money and

671
00:24:44,480 --> 00:24:46,960
less stress so

672
00:24:46,960 --> 00:24:48,799
we can never ensure that our

673
00:24:48,799 --> 00:24:50,960
infrastructure is

674
00:24:50,960 --> 00:24:54,400
fully secure 100 safe but what we can do

675
00:24:54,400 --> 00:24:56,720
is make sure that we have taken care of

676
00:24:56,720 --> 00:24:58,400
all the known vulnerabilities in our

677
00:24:58,400 --> 00:25:01,120
infrastructure and make it make it as

678
00:25:01,120 --> 00:25:03,200
hard and difficult as possible for

679
00:25:03,200 --> 00:25:06,400
hackers to infiltrate our systems so why

680
00:25:06,400 --> 00:25:09,840
wait use the force and go deploy iscs in

681
00:25:09,840 --> 00:25:14,279
your workflow thank you

682
00:25:18,880 --> 00:25:22,159
um any questions

683
00:25:22,240 --> 00:25:23,440
yeah

684
00:25:23,440 --> 00:25:24,640
so which

685
00:25:24,640 --> 00:25:27,600
tools are open source

686
00:25:27,600 --> 00:25:31,120
yeah in fact um

687
00:25:33,200 --> 00:25:35,760
yeah everybody from here i think as far

688
00:25:35,760 --> 00:25:37,520
as i know they have an open source

689
00:25:37,520 --> 00:25:39,440
version and they have an enterprise paid

690
00:25:39,440 --> 00:25:42,159
version so the in the the you have

691
00:25:42,159 --> 00:25:44,080
there's a trade-off right so in the open

692
00:25:44,080 --> 00:25:46,240
source version you'll have to uh make

693
00:25:46,240 --> 00:25:47,760
sure that you are using the latest

694
00:25:47,760 --> 00:25:50,640
greatest and you have to plug it into

695
00:25:50,640 --> 00:25:52,559
some kind of your your github gitlab or

696
00:25:52,559 --> 00:25:54,720
whatever and once you find the have the

697
00:25:54,720 --> 00:25:57,039
findings how do you report it how do you

698
00:25:57,039 --> 00:25:59,120
send it to a dashboard maybe so there's

699
00:25:59,120 --> 00:26:00,960
extra load work for you if you're using

700
00:26:00,960 --> 00:26:03,120
open source and then if you're using

701
00:26:03,120 --> 00:26:05,520
paid version some somewhat you get all

702
00:26:05,520 --> 00:26:07,440
that uh you know because it's a great

703
00:26:07,440 --> 00:26:09,520
version so all of these tools have an

704
00:26:09,520 --> 00:26:13,679
open source version and a paid version

705
00:26:15,360 --> 00:26:17,919
any other question i uh

706
00:26:17,919 --> 00:26:21,960
how rude are those

707
00:26:24,640 --> 00:26:27,360
yeah that's what i said so it depends on

708
00:26:27,360 --> 00:26:28,240
uh

709
00:26:28,240 --> 00:26:29,919
how well do they understand the context

710
00:26:29,919 --> 00:26:32,320
and if you can say you can you have to

711
00:26:32,320 --> 00:26:34,480
you can also pass in not just scan this

712
00:26:34,480 --> 00:26:36,400
directory or these files but also look

713
00:26:36,400 --> 00:26:38,240
at these other directories which could

714
00:26:38,240 --> 00:26:40,159
have other definitions right to

715
00:26:40,159 --> 00:26:42,320
understand the context better

716
00:26:42,320 --> 00:26:43,200
so

717
00:26:43,200 --> 00:26:45,440
depending on if the tools allows for it

718
00:26:45,440 --> 00:26:46,960
and i've seen most tools to allow for

719
00:26:46,960 --> 00:26:47,760
that

720
00:26:47,760 --> 00:26:49,360
but at the end of the day they're still

721
00:26:49,360 --> 00:26:52,559
still sas tools right they do their best

722
00:26:52,559 --> 00:26:54,799
but as i said if you pass in high value

723
00:26:54,799 --> 00:26:56,799
checks to your tools then you can make

724
00:26:56,799 --> 00:26:58,480
sure the false positives are low and you

725
00:26:58,480 --> 00:27:01,200
only find meaningful results

726
00:27:01,200 --> 00:27:03,919
yeah thank you

727
00:27:03,919 --> 00:27:06,919
hi

728
00:27:12,159 --> 00:27:15,760
um yeah for seas well it's not really

729
00:27:15,760 --> 00:27:17,600
related to assassin what i'm talking

730
00:27:17,600 --> 00:27:18,799
about you're talking about software

731
00:27:18,799 --> 00:27:20,399
composition analysis

732
00:27:20,399 --> 00:27:22,799
and vulnerabilities in the libraries

733
00:27:22,799 --> 00:27:25,520
that you've included or third party code

734
00:27:25,520 --> 00:27:27,200
for that you have a lot of tools out

735
00:27:27,200 --> 00:27:28,640
there my colleague here can tell you

736
00:27:28,640 --> 00:27:30,799
more about it um

737
00:27:30,799 --> 00:27:32,799
but yeah there are a lot of again tools

738
00:27:32,799 --> 00:27:36,720
out there which kind of scan your

739
00:27:37,279 --> 00:27:40,080
scan your code software and then the

740
00:27:40,080 --> 00:27:41,760
binaries to see what kind of

741
00:27:41,760 --> 00:27:43,760
vulnerabilities are there i can talk to

742
00:27:43,760 --> 00:27:45,679
you later or my colleague here can talk

743
00:27:45,679 --> 00:27:49,840
to you more on sca if you're interested

744
00:27:51,600 --> 00:27:54,480
any other questions

745
00:27:58,080 --> 00:28:00,159
okay i think we're good thank you you

746
00:28:00,159 --> 00:28:02,480
can oh by the way um

747
00:28:02,480 --> 00:28:04,240
we're hiring if anybody's interested

748
00:28:04,240 --> 00:28:05,600
anybody wants to become a paranoid

749
00:28:05,600 --> 00:28:10,120
contact me later thank you

