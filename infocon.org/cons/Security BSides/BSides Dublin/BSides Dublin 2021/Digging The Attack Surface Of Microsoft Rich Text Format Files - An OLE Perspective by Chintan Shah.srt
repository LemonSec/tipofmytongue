1
00:00:06,240 --> 00:00:06,560
so

2
00:00:06,560 --> 00:00:08,480
good morning good afternoon good evening

3
00:00:08,480 --> 00:00:10,000
uh depending on the time zone wherever

4
00:00:10,000 --> 00:00:10,639
you are

5
00:00:10,639 --> 00:00:13,920
um uh it has been it's a great

6
00:00:13,920 --> 00:00:15,120
opportunity to come

7
00:00:15,120 --> 00:00:17,680
and speak over here in this event so the

8
00:00:17,680 --> 00:00:18,480
topic for

9
00:00:18,480 --> 00:00:21,039
uh discussion today is going to be

10
00:00:21,039 --> 00:00:23,119
digging the attack surface of microsoft

11
00:00:23,119 --> 00:00:24,560
rich text format so

12
00:00:24,560 --> 00:00:26,560
primarily we are going to discuss this

13
00:00:26,560 --> 00:00:27,599
um

14
00:00:27,599 --> 00:00:31,840
from the ole standpoint right

15
00:00:32,800 --> 00:00:35,200
so before we move ahead a bit of an

16
00:00:35,200 --> 00:00:36,000
introduction

17
00:00:36,000 --> 00:00:38,800
um so my name is chintan shah i've been

18
00:00:38,800 --> 00:00:40,320
working with mcafee

19
00:00:40,320 --> 00:00:42,879
for quite some time i've been into the

20
00:00:42,879 --> 00:00:44,160
network security industry

21
00:00:44,160 --> 00:00:47,200
for about 15 plus years now uh i've i've

22
00:00:47,200 --> 00:00:48,000
kind of spoken

23
00:00:48,000 --> 00:00:50,480
at many other security conferences uh

24
00:00:50,480 --> 00:00:51,600
recently i spoke at

25
00:00:51,600 --> 00:00:55,039
mr and uh before that i've been

26
00:00:55,039 --> 00:00:56,320
speaking at other international

27
00:00:56,320 --> 00:00:58,239
conferences as well

28
00:00:58,239 --> 00:01:01,440
my primary focus uh

29
00:01:01,440 --> 00:01:04,879
as a part of my my job in mcafee is

30
00:01:04,879 --> 00:01:06,960
basically

31
00:01:06,960 --> 00:01:10,320
analyzing malware's you know

32
00:01:10,320 --> 00:01:13,439
apd's exploits reversing uh

33
00:01:13,439 --> 00:01:15,280
primarily fuzzing and vulnerability

34
00:01:15,280 --> 00:01:16,799
research um

35
00:01:16,799 --> 00:01:19,280
i i hold multiple patents on exploit

36
00:01:19,280 --> 00:01:20,799
detection techniques

37
00:01:20,799 --> 00:01:24,320
and one of my core

38
00:01:24,320 --> 00:01:27,680
job responsibility is to translate the

39
00:01:27,680 --> 00:01:31,200
research into the product uh new new

40
00:01:31,200 --> 00:01:33,040
detection method product improvements

41
00:01:33,040 --> 00:01:34,320
and and

42
00:01:34,320 --> 00:01:36,799
providing improving the products with

43
00:01:36,799 --> 00:01:37,759
with new

44
00:01:37,759 --> 00:01:40,560
uh new detection techniques and methods

45
00:01:40,560 --> 00:01:43,200
that's what i i basically do

46
00:01:43,200 --> 00:01:46,960
uh so let's see what is in the agenda

47
00:01:46,960 --> 00:01:47,360
for

48
00:01:47,360 --> 00:01:49,119
uh today's session so we are basically

49
00:01:49,119 --> 00:01:51,119
going to touch upon the microsoft which

50
00:01:51,119 --> 00:01:52,799
text format

51
00:01:52,799 --> 00:01:54,720
uh we are going to touch upon the

52
00:01:54,720 --> 00:01:55,840
overview as well as

53
00:01:55,840 --> 00:01:58,320
um what has been in the past with with

54
00:01:58,320 --> 00:02:00,240
msrtf file format

55
00:02:00,240 --> 00:02:02,719
we'll discuss a little bit in detail

56
00:02:02,719 --> 00:02:04,799
about uh object linking and invading and

57
00:02:04,799 --> 00:02:06,479
how this has been exploited by

58
00:02:06,479 --> 00:02:09,598
by attackers we'll touch upon uh oily

59
00:02:09,598 --> 00:02:11,038
attack surface as well

60
00:02:11,038 --> 00:02:13,200
and how this has been abused abused by

61
00:02:13,200 --> 00:02:14,480
attackers to

62
00:02:14,480 --> 00:02:18,000
target an office platform we'll

63
00:02:18,000 --> 00:02:20,160
we will discuss in a little bit more

64
00:02:20,160 --> 00:02:21,120
detail about

65
00:02:21,120 --> 00:02:24,400
msrtf file structure parsing and

66
00:02:24,400 --> 00:02:27,440
how to go about inspecting the rtf file

67
00:02:27,440 --> 00:02:29,680
format or the network on the network

68
00:02:29,680 --> 00:02:32,480
and how how can we build a automated

69
00:02:32,480 --> 00:02:33,840
inspection mechanism

70
00:02:33,840 --> 00:02:37,040
to classify msrtf uh files but

71
00:02:37,040 --> 00:02:40,160
we will talk about the engine uh

72
00:02:40,160 --> 00:02:42,239
components architecture inspection flow

73
00:02:42,239 --> 00:02:43,360
and then we will

74
00:02:43,360 --> 00:02:45,519
will end this talk with example engine

75
00:02:45,519 --> 00:02:46,480
output and

76
00:02:46,480 --> 00:02:49,599
and what we've seen as initial results

77
00:02:49,599 --> 00:02:52,160
when we ran this tool over

78
00:02:52,160 --> 00:02:55,760
many of the exploits that we have tested

79
00:02:56,160 --> 00:03:00,560
right so over the past few years we have

80
00:03:00,560 --> 00:03:02,400
had many many exploits that target

81
00:03:02,400 --> 00:03:03,680
office platform

82
00:03:03,680 --> 00:03:07,440
and uh out of these these attacks

83
00:03:07,440 --> 00:03:09,360
lot of a lot of these attacks have been

84
00:03:09,360 --> 00:03:10,720
over uh all the

85
00:03:10,720 --> 00:03:12,800
exploited in the rtf file format by

86
00:03:12,800 --> 00:03:14,560
through the rtf file format so

87
00:03:14,560 --> 00:03:17,680
rtf has been one of the more adapted

88
00:03:17,680 --> 00:03:19,440
file format recently over the past few

89
00:03:19,440 --> 00:03:20,319
years

90
00:03:20,319 --> 00:03:23,680
and um many many many out of this many

91
00:03:23,680 --> 00:03:24,799
attacks out of this

92
00:03:24,799 --> 00:03:27,680
um high impact attacks have been

93
00:03:27,680 --> 00:03:29,760
exploited via rtf so

94
00:03:29,760 --> 00:03:33,120
it's very popular among the attackers

95
00:03:33,120 --> 00:03:36,660
and there are few reasons for it

96
00:03:36,660 --> 00:03:37,920
[Music]

97
00:03:37,920 --> 00:03:40,720
during the last year may 2020 uh us

98
00:03:40,720 --> 00:03:42,720
government basically shared a top

99
00:03:42,720 --> 00:03:44,959
list of vulnerabilities exported since

100
00:03:44,959 --> 00:03:46,319
2016

101
00:03:46,319 --> 00:03:49,360
uh so they have shared the the popular

102
00:03:49,360 --> 00:03:52,720
um popular uh uh smarts which have been

103
00:03:52,720 --> 00:03:54,560
used in targeted attacks and many of

104
00:03:54,560 --> 00:03:56,080
these exploits uh

105
00:03:56,080 --> 00:03:58,000
have been all of these in fact all of

106
00:03:58,000 --> 00:04:00,720
these exploits have been on the office

107
00:04:00,720 --> 00:04:02,720
on the office platform and one of the

108
00:04:02,720 --> 00:04:03,760
top uh

109
00:04:03,760 --> 00:04:06,159
top observation that came out of of all

110
00:04:06,159 --> 00:04:07,519
of these exploits is

111
00:04:07,519 --> 00:04:09,680
all of these exploits were primarily

112
00:04:09,680 --> 00:04:11,680
targeting microsoft's oily

113
00:04:11,680 --> 00:04:13,519
so early has been one of the another

114
00:04:13,519 --> 00:04:15,439
feature which has been targeted

115
00:04:15,439 --> 00:04:18,160
massively by by attacker because of the

116
00:04:18,160 --> 00:04:19,759
attack surface that it

117
00:04:19,759 --> 00:04:22,560
exposes right

118
00:04:23,520 --> 00:04:25,759
it exposes virtually a huge attack

119
00:04:25,759 --> 00:04:27,360
surface for the attacker and

120
00:04:27,360 --> 00:04:30,320
without writing any form of complex

121
00:04:30,320 --> 00:04:31,199
shell code

122
00:04:31,199 --> 00:04:34,400
attacker can easily deliver the exploits

123
00:04:34,400 --> 00:04:36,000
targeting this feature they can

124
00:04:36,000 --> 00:04:37,600
build the exploit they can craft the

125
00:04:37,600 --> 00:04:39,040
exploit and

126
00:04:39,040 --> 00:04:42,160
and deliver it to the victim and just

127
00:04:42,160 --> 00:04:43,919
super easy to exploit this kind of

128
00:04:43,919 --> 00:04:45,759
vulnerabilities which which

129
00:04:45,759 --> 00:04:49,280
uh uh office only feature exposes

130
00:04:49,280 --> 00:04:51,120
so that's that's one of the prime reason

131
00:04:51,120 --> 00:04:53,600
why why microsoft only has been

132
00:04:53,600 --> 00:04:56,240
a top attack vector over the past few

133
00:04:56,240 --> 00:04:57,520
years

134
00:04:57,520 --> 00:05:00,800
which also is a conclusion out of

135
00:05:00,800 --> 00:05:03,120
out of what has been shared by by us

136
00:05:03,120 --> 00:05:05,520
domain

137
00:05:07,600 --> 00:05:10,720
so the the question is why why

138
00:05:10,720 --> 00:05:13,280
rtf what what are the reasons behind the

139
00:05:13,280 --> 00:05:14,080
rtf

140
00:05:14,080 --> 00:05:16,160
rtf file format being so popular among

141
00:05:16,160 --> 00:05:17,280
the attackers

142
00:05:17,280 --> 00:05:19,600
so one of one of the one of the reason

143
00:05:19,600 --> 00:05:21,120
is that it is very very

144
00:05:21,120 --> 00:05:22,880
very very versatile format it is very

145
00:05:22,880 --> 00:05:25,840
attacker friendly

146
00:05:26,160 --> 00:05:29,840
another major reason is that rtf

147
00:05:29,840 --> 00:05:33,039
is able to embed many object types

148
00:05:33,039 --> 00:05:35,440
rtf can host many object types like

149
00:05:35,440 --> 00:05:37,919
images video docs activex controls can

150
00:05:37,919 --> 00:05:38,800
host like

151
00:05:38,800 --> 00:05:42,240
other other objects fonts

152
00:05:42,240 --> 00:05:45,600
so in fact this feature is

153
00:05:45,600 --> 00:05:48,479
is a part of entire office application

154
00:05:48,479 --> 00:05:51,360
suit now rtf

155
00:05:51,360 --> 00:05:52,800
having the feature of wealthy doesn't

156
00:05:52,800 --> 00:05:54,960
mean that the other file formats of the

157
00:05:54,960 --> 00:05:56,720
office application doesn't have

158
00:05:56,720 --> 00:05:59,520
uh uh cannot be exploited they have been

159
00:05:59,520 --> 00:06:00,720
exploited as well

160
00:06:00,720 --> 00:06:02,319
but there are there are a few reasons

161
00:06:02,319 --> 00:06:03,759
why rtf is

162
00:06:03,759 --> 00:06:06,400
uh rtf kind of stands apart from other

163
00:06:06,400 --> 00:06:07,360
other file

164
00:06:07,360 --> 00:06:10,880
file format in terms of uh attackers uh

165
00:06:10,880 --> 00:06:12,639
popularity among the attacker and why it

166
00:06:12,639 --> 00:06:15,120
has been used so massively

167
00:06:15,120 --> 00:06:18,080
uh one of the reason is that it serves

168
00:06:18,080 --> 00:06:19,280
as a career for

169
00:06:19,280 --> 00:06:21,039
other other file format experts you can

170
00:06:21,039 --> 00:06:22,400
easily embed

171
00:06:22,400 --> 00:06:25,840
many file formats in the rtf um

172
00:06:25,840 --> 00:06:27,600
in the rdf file format and deliver the

173
00:06:27,600 --> 00:06:31,280
exploits to the to the victim

174
00:06:32,000 --> 00:06:36,319
other reason is that uh rtf file format

175
00:06:36,319 --> 00:06:39,680
is because of its structural complexity

176
00:06:39,680 --> 00:06:40,720
and and

177
00:06:40,720 --> 00:06:44,000
and parsing um complexity it is

178
00:06:44,000 --> 00:06:47,199
kind of very uh limited

179
00:06:47,199 --> 00:06:49,759
the visibility of of rtf file format in

180
00:06:49,759 --> 00:06:51,120
terms of structure passing is very

181
00:06:51,120 --> 00:06:51,680
limited

182
00:06:51,680 --> 00:06:55,039
uh among the perimeter solution so

183
00:06:55,039 --> 00:06:58,080
for instance i ips doesn't have a full

184
00:06:58,080 --> 00:06:59,599
parsing or full visibility into the

185
00:06:59,599 --> 00:07:00,880
structure of the rtf

186
00:07:00,880 --> 00:07:03,199
and and that's the reason attacker uh

187
00:07:03,199 --> 00:07:04,960
primarily choose to use it more than any

188
00:07:04,960 --> 00:07:06,400
other file format

189
00:07:06,400 --> 00:07:09,680
and um attacker can craft the

190
00:07:09,680 --> 00:07:11,759
graph default file format rtr file

191
00:07:11,759 --> 00:07:13,680
format in such a way that it can

192
00:07:13,680 --> 00:07:17,039
it can evade a lot of a lot of static

193
00:07:17,039 --> 00:07:18,000
detections

194
00:07:18,000 --> 00:07:20,400
so if you if you see the the distinction

195
00:07:20,400 --> 00:07:21,039
between

196
00:07:21,039 --> 00:07:23,280
the rtf file format and other file

197
00:07:23,280 --> 00:07:24,240
formats which

198
00:07:24,240 --> 00:07:26,080
which of this application has for

199
00:07:26,080 --> 00:07:27,360
example a doc

200
00:07:27,360 --> 00:07:31,440
docx or other xml xml file format versus

201
00:07:31,440 --> 00:07:33,840
versus the compound binary file format

202
00:07:33,840 --> 00:07:35,120
as well as the rtf

203
00:07:35,120 --> 00:07:37,680
one of the prime difference here is that

204
00:07:37,680 --> 00:07:38,720
um

205
00:07:38,720 --> 00:07:41,120
rtf file format can be obfuscated

206
00:07:41,120 --> 00:07:42,319
heavily to

207
00:07:42,319 --> 00:07:45,759
evade the detection right and

208
00:07:45,759 --> 00:07:48,879
which which which uh it

209
00:07:48,879 --> 00:07:51,919
is kind of very unlikely as as uh

210
00:07:51,919 --> 00:07:54,000
with the other file format it can you

211
00:07:54,000 --> 00:07:56,000
can nest the control words rtf is

212
00:07:56,000 --> 00:07:57,440
primarily made up of control boards as

213
00:07:57,440 --> 00:07:59,039
we'll see in the next few slides

214
00:07:59,039 --> 00:08:02,160
how the structure looks like but

215
00:08:02,160 --> 00:08:04,080
because of the heavy heavy nesting of

216
00:08:04,080 --> 00:08:06,160
the control boards and

217
00:08:06,160 --> 00:08:08,400
introducing obfuscations it is it is

218
00:08:08,400 --> 00:08:10,960
very easy for the attackers to bypass

219
00:08:10,960 --> 00:08:13,440
any static detection mechanism and hide

220
00:08:13,440 --> 00:08:15,680
malaysia resources in there so

221
00:08:15,680 --> 00:08:18,879
um these are some of the primary reasons

222
00:08:18,879 --> 00:08:19,280
why

223
00:08:19,280 --> 00:08:21,919
rtf has been popular among the attackers

224
00:08:21,919 --> 00:08:24,080
and

225
00:08:24,479 --> 00:08:26,479
and and because of the as i said because

226
00:08:26,479 --> 00:08:27,520
of the uh

227
00:08:27,520 --> 00:08:29,440
limited structure awareness among the

228
00:08:29,440 --> 00:08:31,440
perimeter security devices

229
00:08:31,440 --> 00:08:33,599
uh and because of the uh nested

230
00:08:33,599 --> 00:08:34,880
structure uh

231
00:08:34,880 --> 00:08:36,479
ips and other perimeter security

232
00:08:36,479 --> 00:08:38,240
solutions don't choose to

233
00:08:38,240 --> 00:08:40,958
inspect rtf as as deeply as it should

234
00:08:40,958 --> 00:08:42,799
have been

235
00:08:42,799 --> 00:08:44,959
so these are some of the reasons why rtf

236
00:08:44,959 --> 00:08:46,080
has been so popular

237
00:08:46,080 --> 00:08:49,440
uh and and no do file format for the

238
00:08:49,440 --> 00:08:51,040
attackers

239
00:08:51,040 --> 00:08:53,120
now what are the primary attack vectors

240
00:08:53,120 --> 00:08:54,320
in in rtf

241
00:08:54,320 --> 00:08:56,560
so there are a couple of them uh

242
00:08:56,560 --> 00:08:57,519
predominantly

243
00:08:57,519 --> 00:08:59,760
uh in fact there are many attack vectors

244
00:08:59,760 --> 00:09:01,360
but uh

245
00:09:01,360 --> 00:09:02,959
primarily there are a couple of attack

246
00:09:02,959 --> 00:09:04,800
factors which i would like to

247
00:09:04,800 --> 00:09:06,640
kind of highlight here one is parsing

248
00:09:06,640 --> 00:09:08,399
engine floss so

249
00:09:08,399 --> 00:09:11,200
as i said rtf is complex structure with

250
00:09:11,200 --> 00:09:11,600
with

251
00:09:11,600 --> 00:09:13,519
nested control words as you can see on

252
00:09:13,519 --> 00:09:14,720
the on the right side

253
00:09:14,720 --> 00:09:16,240
there are there are many many control

254
00:09:16,240 --> 00:09:18,320
words uh in rtf about

255
00:09:18,320 --> 00:09:22,320
one 1800 plus control words in rtf and

256
00:09:22,320 --> 00:09:24,160
and many of them are are largely

257
00:09:24,160 --> 00:09:25,600
unexplored so

258
00:09:25,600 --> 00:09:28,720
uh you know any any of these control

259
00:09:28,720 --> 00:09:29,760
words would have

260
00:09:29,760 --> 00:09:33,040
could have a parsing vulnerability right

261
00:09:33,040 --> 00:09:36,800
and the other other thing is uh

262
00:09:36,800 --> 00:09:39,040
all these control words are able to

263
00:09:39,040 --> 00:09:41,120
consume streams of data now

264
00:09:41,120 --> 00:09:43,200
what these mean mean for the attacker is

265
00:09:43,200 --> 00:09:46,320
that attacker can craft the rtf exploit

266
00:09:46,320 --> 00:09:47,920
in such a way that they can

267
00:09:47,920 --> 00:09:51,360
they can get the rtf msrtf parser ignore

268
00:09:51,360 --> 00:09:52,959
the control what at the same time they

269
00:09:52,959 --> 00:09:55,040
can embed the

270
00:09:55,040 --> 00:09:57,279
malicious resources like shellcode or

271
00:09:57,279 --> 00:09:58,320
decoy document

272
00:09:58,320 --> 00:10:02,000
or or any other no executables

273
00:10:02,000 --> 00:10:04,399
within the controller stream data now

274
00:10:04,399 --> 00:10:05,600
while parsing this

275
00:10:05,600 --> 00:10:08,959
um attackers can choose to embed this

276
00:10:08,959 --> 00:10:10,399
malicious resources

277
00:10:10,399 --> 00:10:13,680
um to to hide them as well as attackers

278
00:10:13,680 --> 00:10:14,720
can basically

279
00:10:14,720 --> 00:10:17,760
uh you know craft the exploit to x to

280
00:10:17,760 --> 00:10:19,680
craft the rtf to exploit control about

281
00:10:19,680 --> 00:10:21,279
parsing vulnerabilities as well so we

282
00:10:21,279 --> 00:10:22,959
have we've had many such control word

283
00:10:22,959 --> 00:10:26,240
passing vulnerabilities in the past

284
00:10:26,240 --> 00:10:29,360
uh other primary vector uh attack vector

285
00:10:29,360 --> 00:10:31,040
is object linking and embedding

286
00:10:31,040 --> 00:10:33,920
so this this as i as we discussed a few

287
00:10:33,920 --> 00:10:34,720
slides back

288
00:10:34,720 --> 00:10:38,000
uh this has been a massive attack vector

289
00:10:38,000 --> 00:10:39,440
it has been exploited heavily in the

290
00:10:39,440 --> 00:10:41,839
past by attackers and most of them

291
00:10:41,839 --> 00:10:44,800
have been a logic flaws where uh where

292
00:10:44,800 --> 00:10:46,640
attackers were able to exploit one of

293
00:10:46,640 --> 00:10:47,519
the other

294
00:10:47,519 --> 00:10:50,480
parsing vulnerability or logic flaws in

295
00:10:50,480 --> 00:10:52,240
the the ole control

296
00:10:52,240 --> 00:10:55,360
so what ole

297
00:10:55,360 --> 00:10:58,480
allows attackers to do is it can

298
00:10:58,480 --> 00:11:00,800
allow attacker to link to the external

299
00:11:00,800 --> 00:11:02,959
object so that that's one of the

300
00:11:02,959 --> 00:11:06,320
one of the serious um serious uh

301
00:11:06,320 --> 00:11:09,519
you know uh drawback of of

302
00:11:09,519 --> 00:11:11,839
overly if if you're able to find an only

303
00:11:11,839 --> 00:11:13,519
control which allows you to

304
00:11:13,519 --> 00:11:15,519
link your rtf file to the external

305
00:11:15,519 --> 00:11:18,079
external world or external file

306
00:11:18,079 --> 00:11:20,399
anywhere outside and virtually you can

307
00:11:20,399 --> 00:11:21,279
download

308
00:11:21,279 --> 00:11:23,760
any any file invoke a respective

309
00:11:23,760 --> 00:11:25,440
resource handler and then you can

310
00:11:25,440 --> 00:11:27,120
basically execute an arbitrary code

311
00:11:27,120 --> 00:11:28,560
so that's what we have been we have been

312
00:11:28,560 --> 00:11:30,240
observing uh you know

313
00:11:30,240 --> 00:11:33,600
the recent trend has been so far um

314
00:11:33,600 --> 00:11:36,880
over the past few years uh so object

315
00:11:36,880 --> 00:11:38,880
embedding allows you to basically allows

316
00:11:38,880 --> 00:11:41,040
attackers to basically uh exploit memory

317
00:11:41,040 --> 00:11:43,120
corruption vulnerability or

318
00:11:43,120 --> 00:11:44,560
there have been many cases in the past

319
00:11:44,560 --> 00:11:47,680
where it it

320
00:11:47,680 --> 00:11:49,839
it aids the further exploitation in

321
00:11:49,839 --> 00:11:51,519
terms of crafting

322
00:11:51,519 --> 00:11:55,040
crafting the process heave memory or no

323
00:11:55,040 --> 00:11:58,240
um aiding the further exploitation

324
00:11:58,240 --> 00:11:58,720
process

325
00:11:58,720 --> 00:12:01,839
so attacker could basically embed

326
00:12:01,839 --> 00:12:04,720
a file of any other file within the rtf

327
00:12:04,720 --> 00:12:06,240
where it can help

328
00:12:06,240 --> 00:12:08,720
to craft the memory of the process and

329
00:12:08,720 --> 00:12:10,079
then aid further exploitation

330
00:12:10,079 --> 00:12:11,920
so we have had many such cases in the

331
00:12:11,920 --> 00:12:14,160
past

332
00:12:14,720 --> 00:12:17,519
so how does it look so this is the first

333
00:12:17,519 --> 00:12:19,440
look at the rtf basically if you if you

334
00:12:19,440 --> 00:12:20,160
see

335
00:12:20,160 --> 00:12:22,160
this is just less than one percent of

336
00:12:22,160 --> 00:12:23,519
the document if you

337
00:12:23,519 --> 00:12:25,680
even if you write a couple of words um a

338
00:12:25,680 --> 00:12:27,279
couple of words of text the document

339
00:12:27,279 --> 00:12:28,079
says document

340
00:12:28,079 --> 00:12:30,639
of document is kind of so big that you

341
00:12:30,639 --> 00:12:32,639
know it's

342
00:12:32,639 --> 00:12:34,079
what i've been what you've been seeing

343
00:12:34,079 --> 00:12:36,079
here is less than even just as

344
00:12:36,079 --> 00:12:38,320
just a single uh one percent of the

345
00:12:38,320 --> 00:12:39,279
document so

346
00:12:39,279 --> 00:12:41,839
imagine the the volume of data to

347
00:12:41,839 --> 00:12:42,399
process

348
00:12:42,399 --> 00:12:45,040
if if uh ips and other perimeter

349
00:12:45,040 --> 00:12:46,959
security devices has to inspect this

350
00:12:46,959 --> 00:12:48,240
file format

351
00:12:48,240 --> 00:12:50,079
so because the performance issues and

352
00:12:50,079 --> 00:12:52,079
everything uh other other issues

353
00:12:52,079 --> 00:12:54,079
uh the perimeter of security devices

354
00:12:54,079 --> 00:12:55,680
hasn't been too focusing on

355
00:12:55,680 --> 00:12:58,320
a deep inspection of rtf files and and

356
00:12:58,320 --> 00:12:59,040
and i think

357
00:12:59,040 --> 00:13:01,360
that's one of the uh that's one of the

358
00:13:01,360 --> 00:13:02,320
uh

359
00:13:02,320 --> 00:13:06,720
uh one of the uh fact that

360
00:13:06,720 --> 00:13:10,480
attackers have been taking advantage of

361
00:13:12,160 --> 00:13:16,320
so here are a couple of examples where

362
00:13:16,320 --> 00:13:20,000
uh where tigers have been abusing

363
00:13:20,000 --> 00:13:22,000
the control words so if you see on the

364
00:13:22,000 --> 00:13:23,040
right side both

365
00:13:23,040 --> 00:13:25,279
both both of these control words for for

366
00:13:25,279 --> 00:13:27,200
instance level text control word as well

367
00:13:27,200 --> 00:13:27,519
as

368
00:13:27,519 --> 00:13:29,680
uh data store control word both of these

369
00:13:29,680 --> 00:13:31,360
control words have been abused to

370
00:13:31,360 --> 00:13:33,680
either embed a shell code or embed an

371
00:13:33,680 --> 00:13:35,040
executable within that

372
00:13:35,040 --> 00:13:37,680
and if you see uh the bottom on the

373
00:13:37,680 --> 00:13:38,560
control board

374
00:13:38,560 --> 00:13:40,639
the rtf car prefragments have been used

375
00:13:40,639 --> 00:13:42,560
to embed a shell code as well

376
00:13:42,560 --> 00:13:46,079
so some of these

377
00:13:46,079 --> 00:13:47,519
many of these control words in fact have

378
00:13:47,519 --> 00:13:49,199
been used have just put a few examples

379
00:13:49,199 --> 00:13:50,000
here

380
00:13:50,000 --> 00:13:53,920
but this is what attackers can do with

381
00:13:53,920 --> 00:13:55,839
the rtf control words

382
00:13:55,839 --> 00:13:58,480
they can hide many hide malicious

383
00:13:58,480 --> 00:13:59,920
resources within the control world

384
00:13:59,920 --> 00:14:01,120
stream of data

385
00:14:01,120 --> 00:14:02,800
as well as they can obfuscate the

386
00:14:02,800 --> 00:14:04,959
control words uh stream to

387
00:14:04,959 --> 00:14:08,079
break image or parsers right and

388
00:14:08,079 --> 00:14:10,800
it can even bypass many of the static av

389
00:14:10,800 --> 00:14:12,240
detection which are kind of based on

390
00:14:12,240 --> 00:14:13,040
signatures

391
00:14:13,040 --> 00:14:16,240
so attacker can basically craft the rtf

392
00:14:16,240 --> 00:14:16,639
file

393
00:14:16,639 --> 00:14:19,600
in in in a way that can break the

394
00:14:19,600 --> 00:14:21,279
detections based on

395
00:14:21,279 --> 00:14:22,800
detections which are kind of based on

396
00:14:22,800 --> 00:14:25,040
static signatures

397
00:14:25,040 --> 00:14:28,110
so these are primarily uh no

398
00:14:28,110 --> 00:14:29,279
[Music]

399
00:14:29,279 --> 00:14:31,040
examples where the control words have

400
00:14:31,040 --> 00:14:33,680
been abused

401
00:14:33,839 --> 00:14:36,399
so let's take a look at how object

402
00:14:36,399 --> 00:14:37,600
linking and embedding

403
00:14:37,600 --> 00:14:39,600
have been abused in the past what is it

404
00:14:39,600 --> 00:14:41,839
how ollie is initialized and what are

405
00:14:41,839 --> 00:14:44,000
the attack surfaces

406
00:14:44,000 --> 00:14:46,480
so object linking embedding is basically

407
00:14:46,480 --> 00:14:47,040
uh

408
00:14:47,040 --> 00:14:48,720
the infrastructure which is built by

409
00:14:48,720 --> 00:14:50,880
microsoft in

410
00:14:50,880 --> 00:14:53,040
for uh having interoperability with the

411
00:14:53,040 --> 00:14:54,240
third party vendors

412
00:14:54,240 --> 00:14:57,360
it is entirely built on com microsoft's

413
00:14:57,360 --> 00:14:59,279
com infrastructure which allows you to

414
00:14:59,279 --> 00:15:00,639
create an object

415
00:15:00,639 --> 00:15:03,839
uh which is uh you know allows you to

416
00:15:03,839 --> 00:15:04,320
either

417
00:15:04,320 --> 00:15:06,079
embed an object which is created in

418
00:15:06,079 --> 00:15:07,760
other applications to be embedded into a

419
00:15:07,760 --> 00:15:09,760
container application so we call

420
00:15:09,760 --> 00:15:12,800
uh here in our case rtf is basically a

421
00:15:12,800 --> 00:15:14,480
container application where we create an

422
00:15:14,480 --> 00:15:14,959
object

423
00:15:14,959 --> 00:15:18,320
uh in other applications for instance we

424
00:15:18,320 --> 00:15:19,199
create an object

425
00:15:19,199 --> 00:15:21,760
it could be a it could be a pdf file or

426
00:15:21,760 --> 00:15:23,519
it could be an activex control or it

427
00:15:23,519 --> 00:15:24,320
could be

428
00:15:24,320 --> 00:15:27,600
uh oxml file right and it allows you to

429
00:15:27,600 --> 00:15:28,160
embed

430
00:15:28,160 --> 00:15:31,440
or link these objects within the rtf

431
00:15:31,440 --> 00:15:33,600
so what what it results into is they

432
00:15:33,600 --> 00:15:35,279
think basically it will provide a richer

433
00:15:35,279 --> 00:15:36,639
user experience as

434
00:15:36,639 --> 00:15:40,399
as you can see here on the right side um

435
00:15:40,399 --> 00:15:43,680
activex scroll bars are you you can you

436
00:15:43,680 --> 00:15:45,680
can embed activex controls you can embed

437
00:15:45,680 --> 00:15:48,079
other documents into the rtf

438
00:15:48,079 --> 00:15:51,199
right you can link your objects uh link

439
00:15:51,199 --> 00:15:54,079
your rtf to the external objects as well

440
00:15:54,079 --> 00:15:56,959
via linking capability so all these

441
00:15:56,959 --> 00:15:58,240
functionalities are

442
00:15:58,240 --> 00:16:00,240
are kind of provided by microsoft's

443
00:16:00,240 --> 00:16:02,320
valley instructor and what it results

444
00:16:02,320 --> 00:16:03,600
into is it

445
00:16:03,600 --> 00:16:06,560
consequently it results into attack

446
00:16:06,560 --> 00:16:07,920
increased attack surface because there

447
00:16:07,920 --> 00:16:08,560
are there are

448
00:16:08,560 --> 00:16:11,279
kind of many com objects in the windows

449
00:16:11,279 --> 00:16:12,880
even if you install software

450
00:16:12,880 --> 00:16:15,759
uh the vendor will register a com uh

451
00:16:15,759 --> 00:16:17,440
interface com objects into

452
00:16:17,440 --> 00:16:19,680
your system and if that comma come up

453
00:16:19,680 --> 00:16:21,199
there comes out to be a vulnerable

454
00:16:21,199 --> 00:16:23,279
object and essentially your entire

455
00:16:23,279 --> 00:16:24,240
office

456
00:16:24,240 --> 00:16:27,839
security is compromised

457
00:16:29,360 --> 00:16:31,920
so let's take a look at it how how we

458
00:16:31,920 --> 00:16:33,360
can do

459
00:16:33,360 --> 00:16:34,800
embedding and linking so if you look at

460
00:16:34,800 --> 00:16:36,399
the figure of figure one you can just

461
00:16:36,399 --> 00:16:38,800
insert an object and you have an option

462
00:16:38,800 --> 00:16:41,199
to insert basically a lot of variety of

463
00:16:41,199 --> 00:16:42,880
documents into into rtf you can

464
00:16:42,880 --> 00:16:43,920
basically embed

465
00:16:43,920 --> 00:16:47,279
uh many many form of documents and what

466
00:16:47,279 --> 00:16:47,839
it will

467
00:16:47,839 --> 00:16:50,800
result into is an object control word

468
00:16:50,800 --> 00:16:51,680
with

469
00:16:51,680 --> 00:16:54,160
a nested control what called obj emb so

470
00:16:54,160 --> 00:16:56,079
obj emv essentially means that

471
00:16:56,079 --> 00:16:59,199
there is a embedded object now

472
00:16:59,199 --> 00:17:01,440
if you if you come across an object

473
00:17:01,440 --> 00:17:02,240
control word

474
00:17:02,240 --> 00:17:05,679
in in rtf as as you can as you can see

475
00:17:05,679 --> 00:17:08,079
uh at the bottom uh when you embed a

476
00:17:08,079 --> 00:17:10,079
document pdf document right

477
00:17:10,079 --> 00:17:12,319
it basically turns out to be object

478
00:17:12,319 --> 00:17:13,760
control for followed by

479
00:17:13,760 --> 00:17:17,439
obj emp control and then when you link

480
00:17:17,439 --> 00:17:18,160
an object

481
00:17:18,160 --> 00:17:20,799
uh link your rtf to any external object

482
00:17:20,799 --> 00:17:22,720
right it could be any url then it will

483
00:17:22,720 --> 00:17:24,559
come out to be an object controller for

484
00:17:24,559 --> 00:17:26,880
followed by obj auto link or it could be

485
00:17:26,880 --> 00:17:28,240
an obj link as well

486
00:17:28,240 --> 00:17:31,039
link or auto link it could be both of

487
00:17:31,039 --> 00:17:32,559
them

488
00:17:32,559 --> 00:17:35,039
and if you uh choose to embed an activex

489
00:17:35,039 --> 00:17:36,240
control then

490
00:17:36,240 --> 00:17:38,160
this is exactly what you'll get as as

491
00:17:38,160 --> 00:17:39,520
you've been seeing here

492
00:17:39,520 --> 00:17:41,679
um you will get an object control word

493
00:17:41,679 --> 00:17:43,039
with obj ocx

494
00:17:43,039 --> 00:17:45,039
and an object class will determine what

495
00:17:45,039 --> 00:17:47,280
kind of object it is if it is a pdf

496
00:17:47,280 --> 00:17:48,559
object you'll

497
00:17:48,559 --> 00:17:51,120
you'll see object class as acrobat dot

498
00:17:51,120 --> 00:17:51,840
dc

499
00:17:51,840 --> 00:17:52,960
you know depending on your on your

500
00:17:52,960 --> 00:17:55,200
version if uh if it's a

501
00:17:55,200 --> 00:17:58,000
if it's a linked object then you'll say

502
00:17:58,000 --> 00:17:59,919
you'll basically see obj auto link so

503
00:17:59,919 --> 00:18:01,760
you'll

504
00:18:01,760 --> 00:18:04,000
kind of see something like this over

505
00:18:04,000 --> 00:18:04,799
here

506
00:18:04,799 --> 00:18:06,880
and these are the important control

507
00:18:06,880 --> 00:18:08,320
words when we are talking about

508
00:18:08,320 --> 00:18:11,360
inspection of rtf over the uh you know

509
00:18:11,360 --> 00:18:12,720
kind of building automated

510
00:18:12,720 --> 00:18:16,720
inspection tool to classify rtf files so

511
00:18:16,720 --> 00:18:18,480
here you can see some of the some of the

512
00:18:18,480 --> 00:18:20,960
important uh ole control words so obj

513
00:18:20,960 --> 00:18:21,440
emb

514
00:18:21,440 --> 00:18:24,640
indicates uh indicates the uh

515
00:18:24,640 --> 00:18:26,000
embedded object as you can see on the

516
00:18:26,000 --> 00:18:28,400
left side uh object control word

517
00:18:28,400 --> 00:18:31,200
followed by obj emd control word

518
00:18:31,200 --> 00:18:34,480
and obj class uh kind of determines what

519
00:18:34,480 --> 00:18:35,440
kind of object

520
00:18:35,440 --> 00:18:38,559
what kind of object is it

521
00:18:38,559 --> 00:18:42,000
right if it is a pdf it could be acrobat

522
00:18:42,000 --> 00:18:43,760
if it is a doc what document it would be

523
00:18:43,760 --> 00:18:45,760
a word.document if it is oxml then it

524
00:18:45,760 --> 00:18:46,559
could be

525
00:18:46,559 --> 00:18:49,360
something else if it's uh if it's

526
00:18:49,360 --> 00:18:51,600
packaged then it could be a oh classes

527
00:18:51,600 --> 00:18:53,200
packages it's exactly what you can see

528
00:18:53,200 --> 00:18:55,120
on the left side of this the screenshot

529
00:18:55,120 --> 00:18:57,919
so other important object is that obj

530
00:18:57,919 --> 00:18:59,520
ocx which represents the

531
00:18:59,520 --> 00:19:02,000
the uh which indicates that there's a

532
00:19:02,000 --> 00:19:04,880
activex control number inside rdf file

533
00:19:04,880 --> 00:19:08,320
uh if it's a link object as i as i said

534
00:19:08,320 --> 00:19:11,520
uh previously it should it will be

535
00:19:11,520 --> 00:19:14,160
object followed by obj auto link control

536
00:19:14,160 --> 00:19:14,799
world

537
00:19:14,799 --> 00:19:17,520
it could be a which obj link as well so

538
00:19:17,520 --> 00:19:19,039
these are some of the important

539
00:19:19,039 --> 00:19:22,240
uh control words related related to

540
00:19:22,240 --> 00:19:25,280
ovali which which should be uh taken

541
00:19:25,280 --> 00:19:26,400
care of when we are building an

542
00:19:26,400 --> 00:19:27,200
automated

543
00:19:27,200 --> 00:19:29,360
classification tool to classify rtf

544
00:19:29,360 --> 00:19:30,400
files because we

545
00:19:30,400 --> 00:19:32,640
will need to extract data data from all

546
00:19:32,640 --> 00:19:34,160
these files and then we will need to

547
00:19:34,160 --> 00:19:35,440
inspect it further

548
00:19:35,440 --> 00:19:38,000
so if you if you look at the screen

549
00:19:38,000 --> 00:19:39,600
charts closely there is a there is a

550
00:19:39,600 --> 00:19:41,520
control word called obj data

551
00:19:41,520 --> 00:19:43,600
which is a data that is to be rendered

552
00:19:43,600 --> 00:19:44,559
by the

553
00:19:44,559 --> 00:19:47,919
uh the only control and that rendering

554
00:19:47,919 --> 00:19:49,840
is primarily based on cls

555
00:19:49,840 --> 00:19:52,799
id which is determined by the ole32.dll

556
00:19:52,799 --> 00:19:54,080
which which is kind of

557
00:19:54,080 --> 00:19:57,600
kind of handles the uh infrastructure

558
00:19:57,600 --> 00:20:01,120
in the office so some of the

559
00:20:01,120 --> 00:20:03,280
important control words and let's

560
00:20:03,280 --> 00:20:04,720
quickly take a look at

561
00:20:04,720 --> 00:20:07,760
how this object initialization and

562
00:20:07,760 --> 00:20:09,039
loading happens

563
00:20:09,039 --> 00:20:11,280
when when we embed any object into rdf

564
00:20:11,280 --> 00:20:14,480
file so as i said uh vali32.dll is in

565
00:20:14,480 --> 00:20:15,919
proc server for instance

566
00:20:15,919 --> 00:20:18,799
instantiating early object right it

567
00:20:18,799 --> 00:20:20,400
basically handles the

568
00:20:20,400 --> 00:20:23,120
uh common instantiation and uh you know

569
00:20:23,120 --> 00:20:23,600
loading

570
00:20:23,600 --> 00:20:26,880
the com dll into the memory uh object

571
00:20:26,880 --> 00:20:28,000
class and object data

572
00:20:28,000 --> 00:20:30,480
is basically the program id mapping to

573
00:20:30,480 --> 00:20:31,440
early control

574
00:20:31,440 --> 00:20:33,440
as as you can see in the previous slide

575
00:20:33,440 --> 00:20:34,880
if you see object class

576
00:20:34,880 --> 00:20:38,320
is what indicates the program id right

577
00:20:38,320 --> 00:20:40,640
uh so that string is primarily known as

578
00:20:40,640 --> 00:20:42,320
program id based on which

579
00:20:42,320 --> 00:20:45,440
only 32.dll will will call a function

580
00:20:45,440 --> 00:20:45,840
called

581
00:20:45,840 --> 00:20:47,600
cls id from program id as i've

582
00:20:47,600 --> 00:20:49,520
highlighted in the on the right side

583
00:20:49,520 --> 00:20:51,919
and once it gets the class id unique

584
00:20:51,919 --> 00:20:53,039
class id it will

585
00:20:53,039 --> 00:20:55,120
map that class id into the registry and

586
00:20:55,120 --> 00:20:57,120
then it will pick up the dll from there

587
00:20:57,120 --> 00:20:58,559
basically it will load the dll into

588
00:20:58,559 --> 00:21:00,880
memory and and then it will follow the

589
00:21:00,880 --> 00:21:02,880
process which i have highlighted

590
00:21:02,880 --> 00:21:04,640
at the bottom so it will basically go

591
00:21:04,640 --> 00:21:06,320
and create instantiate a comma object

592
00:21:06,320 --> 00:21:07,919
using co-create instance and then

593
00:21:07,919 --> 00:21:11,679
it will basically hand over the obj data

594
00:21:11,679 --> 00:21:12,320
for

595
00:21:12,320 --> 00:21:15,039
rendering so this is how the early

596
00:21:15,039 --> 00:21:17,039
object initialization takes place into

597
00:21:17,039 --> 00:21:18,720
into the office suit

598
00:21:18,720 --> 00:21:21,919
right now this opens the wide attack

599
00:21:21,919 --> 00:21:22,880
surface as well

600
00:21:22,880 --> 00:21:24,799
as as far as attackers are concerned

601
00:21:24,799 --> 00:21:26,240
this is opens a huge

602
00:21:26,240 --> 00:21:28,080
attack surface for for the attackers

603
00:21:28,080 --> 00:21:30,400
because if you see uh

604
00:21:30,400 --> 00:21:34,159
if you think about it any any dll id any

605
00:21:34,159 --> 00:21:35,440
dll which which is

606
00:21:35,440 --> 00:21:37,600
uh mapped to the cls id could be loaded

607
00:21:37,600 --> 00:21:39,120
in into the office file so what

608
00:21:39,120 --> 00:21:41,440
attackers can basically supply here

609
00:21:41,440 --> 00:21:44,320
uh is this the class id as well as the

610
00:21:44,320 --> 00:21:46,400
data which which has to be rendered by

611
00:21:46,400 --> 00:21:50,799
by the com object so

612
00:21:50,799 --> 00:21:53,120
let's little by talk about uh object

613
00:21:53,120 --> 00:21:53,840
linking

614
00:21:53,840 --> 00:21:58,080
so as i indicated earlier uh if you just

615
00:21:58,080 --> 00:22:00,960
go to the object and if you click on

616
00:22:00,960 --> 00:22:02,720
create from file and then if you provide

617
00:22:02,720 --> 00:22:03,679
a file name

618
00:22:03,679 --> 00:22:05,200
in the file name you just need to

619
00:22:05,200 --> 00:22:06,880
provide a url basically and then you

620
00:22:06,880 --> 00:22:08,400
just have to

621
00:22:08,400 --> 00:22:11,440
uh check link to the file uh so you are

622
00:22:11,440 --> 00:22:14,240
you are primarily linking an object and

623
00:22:14,240 --> 00:22:15,440
what it results into

624
00:22:15,440 --> 00:22:19,360
is uh as i said previously it it it will

625
00:22:19,360 --> 00:22:22,000
look something like this so how the data

626
00:22:22,000 --> 00:22:22,960
is stored when

627
00:22:22,960 --> 00:22:26,480
when up when a link to embed object is

628
00:22:26,480 --> 00:22:28,799
is whenever an object is linked or

629
00:22:28,799 --> 00:22:30,400
embedded into rtf so this is how it

630
00:22:30,400 --> 00:22:31,120
looks like

631
00:22:31,120 --> 00:22:32,480
so you will have an object controlled

632
00:22:32,480 --> 00:22:34,080
which which primarily means that there

633
00:22:34,080 --> 00:22:35,120
is an object

634
00:22:35,120 --> 00:22:37,039
either linked or embedded which which is

635
00:22:37,039 --> 00:22:38,799
determined by the next control word

636
00:22:38,799 --> 00:22:40,240
which follows the object control board

637
00:22:40,240 --> 00:22:41,039
right

638
00:22:41,039 --> 00:22:42,960
so uh there's an object control board

639
00:22:42,960 --> 00:22:45,200
and since we linked it

640
00:22:45,200 --> 00:22:47,679
uh to the external file we will see obj

641
00:22:47,679 --> 00:22:49,120
auto link there

642
00:22:49,120 --> 00:22:51,039
if you see the specs it is basically a

643
00:22:51,039 --> 00:22:53,440
type of a auto link only auto link

644
00:22:53,440 --> 00:22:54,480
object which will

645
00:22:54,480 --> 00:22:57,600
uh which which links your your rtf file

646
00:22:57,600 --> 00:22:58,880
to the external world

647
00:22:58,880 --> 00:23:01,360
right external uh resource and then when

648
00:23:01,360 --> 00:23:02,880
you open open the document it will

649
00:23:02,880 --> 00:23:04,480
basically download

650
00:23:04,480 --> 00:23:07,280
the file and then it will invoke the uh

651
00:23:07,280 --> 00:23:09,120
respective handlers for example if if

652
00:23:09,120 --> 00:23:09,679
you

653
00:23:09,679 --> 00:23:12,240
if you have came across if you have uh

654
00:23:12,240 --> 00:23:14,640
seen the turn 170199 which was kind of

655
00:23:14,640 --> 00:23:16,559
famous uh in famous vulnerability which

656
00:23:16,559 --> 00:23:18,000
was exploited since

657
00:23:18,000 --> 00:23:22,159
uh uh until until kind of uh 2019

658
00:23:22,159 --> 00:23:25,520
um you know it

659
00:23:25,520 --> 00:23:28,799
uh linked that rtf file to the

660
00:23:28,799 --> 00:23:30,640
external hdf file and then it used to

661
00:23:30,640 --> 00:23:32,320
basically download the sdf file and then

662
00:23:32,320 --> 00:23:34,720
invoke a hta handler

663
00:23:34,720 --> 00:23:38,159
and then it basically ended up uh

664
00:23:38,159 --> 00:23:40,559
executing arbitrary code right so that

665
00:23:40,559 --> 00:23:41,600
that's that's how

666
00:23:41,600 --> 00:23:44,320
the object linking uh opens the attack

667
00:23:44,320 --> 00:23:45,120
surface

668
00:23:45,120 --> 00:23:47,400
now if you see object class is

669
00:23:47,400 --> 00:23:49,120
word.document.8 which basically

670
00:23:49,120 --> 00:23:50,559
indicates that there is a

671
00:23:50,559 --> 00:23:54,480
there is a only two compound document

672
00:23:54,480 --> 00:23:56,159
file format which is highlighted in in

673
00:23:56,159 --> 00:23:57,919
blue here so

674
00:23:57,919 --> 00:23:59,520
the one which you have one which you see

675
00:23:59,520 --> 00:24:01,200
in red highlight is the

676
00:24:01,200 --> 00:24:03,200
nested control word which is visible

677
00:24:03,200 --> 00:24:05,279
when you link your rtf file to the

678
00:24:05,279 --> 00:24:06,320
external resource

679
00:24:06,320 --> 00:24:08,000
the one which you highlight one which

680
00:24:08,000 --> 00:24:09,360
you see highlighted in green is

681
00:24:09,360 --> 00:24:10,720
basically the

682
00:24:10,720 --> 00:24:13,840
the early 1.0 native data size in native

683
00:24:13,840 --> 00:24:14,400
data

684
00:24:14,400 --> 00:24:17,200
it is basically uh only 1.0 native

685
00:24:17,200 --> 00:24:18,559
stream and

686
00:24:18,559 --> 00:24:21,120
the entire object data is is primarily

687
00:24:21,120 --> 00:24:23,279
stored in ole 1.0 native stream

688
00:24:23,279 --> 00:24:25,520
right and and the the the last four

689
00:24:25,520 --> 00:24:26,880
bytes of the native stream

690
00:24:26,880 --> 00:24:30,159
is the only 1.0 native

691
00:24:30,159 --> 00:24:32,559
data size so which indicates the size of

692
00:24:32,559 --> 00:24:34,320
the ole control that you have

693
00:24:34,320 --> 00:24:37,520
that the rtf carries and

694
00:24:37,520 --> 00:24:40,159
what follows there is what follows next

695
00:24:40,159 --> 00:24:41,360
is the ole compound

696
00:24:41,360 --> 00:24:42,880
compound binary file format so this

697
00:24:42,880 --> 00:24:44,720
compound binary file format is basically

698
00:24:44,720 --> 00:24:45,039
the

699
00:24:45,039 --> 00:24:48,960
the the data which has the oli

700
00:24:48,960 --> 00:24:50,480
is the data which has to be rendered by

701
00:24:50,480 --> 00:24:52,000
the application uh

702
00:24:52,000 --> 00:24:55,600
intended by the respective early control

703
00:24:55,600 --> 00:24:59,039
and and this is uh the the normal uh

704
00:24:59,039 --> 00:25:00,960
doc file format if you see the signature

705
00:25:00,960 --> 00:25:03,440
is the oc fili so which which

706
00:25:03,440 --> 00:25:05,600
actually means that it is a it is a

707
00:25:05,600 --> 00:25:07,120
compound binary file format which we

708
00:25:07,120 --> 00:25:07,840
used to see

709
00:25:07,840 --> 00:25:11,039
uh you know before office 2007 and

710
00:25:11,039 --> 00:25:12,960
office round seven and before so

711
00:25:12,960 --> 00:25:16,000
it's primarily the entire uh

712
00:25:16,000 --> 00:25:18,559
ole data is embedded into inside the ole

713
00:25:18,559 --> 00:25:21,520
2.0 format

714
00:25:21,840 --> 00:25:24,159
let's see how how object embedding takes

715
00:25:24,159 --> 00:25:25,760
place so it's

716
00:25:25,760 --> 00:25:27,679
basically very similar to the linked

717
00:25:27,679 --> 00:25:28,880
object

718
00:25:28,880 --> 00:25:30,640
the only difference difference here is

719
00:25:30,640 --> 00:25:33,200
the control board will change

720
00:25:33,200 --> 00:25:36,640
uh instead of object instead of obj link

721
00:25:36,640 --> 00:25:39,679
it will have obj emb right so

722
00:25:39,679 --> 00:25:42,080
here what i've shown shown here is the

723
00:25:42,080 --> 00:25:44,080
oxml file embedded within the

724
00:25:44,080 --> 00:25:47,360
in the rtf file now oxml file here was

725
00:25:47,360 --> 00:25:50,559
uh was uh basically an exploit which was

726
00:25:50,559 --> 00:25:52,320
delivered via

727
00:25:52,320 --> 00:25:56,320
by rtf right so if you see uh oxml file

728
00:25:56,320 --> 00:25:57,840
has been embedded inside the only two

729
00:25:57,840 --> 00:25:59,279
compound document now if you see the

730
00:25:59,279 --> 00:26:01,520
program id string here

731
00:26:01,520 --> 00:26:04,000
is word.document.file which basically

732
00:26:04,000 --> 00:26:05,200
indicates that there is a

733
00:26:05,200 --> 00:26:06,960
there is a oxml document which is

734
00:26:06,960 --> 00:26:08,240
embedded inside the rtf

735
00:26:08,240 --> 00:26:11,600
file format now uh uh

736
00:26:11,600 --> 00:26:14,480
now now along with the rtf along with

737
00:26:14,480 --> 00:26:15,279
the oxml

738
00:26:15,279 --> 00:26:18,159
uh there could be many other control but

739
00:26:18,159 --> 00:26:19,520
many other file formats which could be

740
00:26:19,520 --> 00:26:21,200
embedded inside rtf for example flash

741
00:26:21,200 --> 00:26:22,960
files

742
00:26:22,960 --> 00:26:25,600
pdf documents activex controls images

743
00:26:25,600 --> 00:26:26,320
and and

744
00:26:26,320 --> 00:26:29,840
stuff like that so what how this helps

745
00:26:29,840 --> 00:26:30,799
attacker is

746
00:26:30,799 --> 00:26:34,080
this allows attractors to uh to use rtf

747
00:26:34,080 --> 00:26:35,919
as a career for other file formats which

748
00:26:35,919 --> 00:26:36,159
is

749
00:26:36,159 --> 00:26:39,200
essentially a

750
00:26:39,200 --> 00:26:41,200
you know a huge attack surface but since

751
00:26:41,200 --> 00:26:42,880
rtf has a limited

752
00:26:42,880 --> 00:26:44,960
visibility over the network and with

753
00:26:44,960 --> 00:26:47,760
limited visibility

754
00:26:47,760 --> 00:26:49,279
within the ips or within the perimeter

755
00:26:49,279 --> 00:26:51,520
security devices this basically hides

756
00:26:51,520 --> 00:26:53,440
your actual exploit within the rtf and

757
00:26:53,440 --> 00:26:54,799
then it allows you to deliver it to the

758
00:26:54,799 --> 00:26:57,200
victims

759
00:26:57,200 --> 00:27:01,440
so if you extract the uh oxml file and

760
00:27:01,440 --> 00:27:03,520
and inspect this file you can see

761
00:27:03,520 --> 00:27:04,880
there's a shell code which is embedded

762
00:27:04,880 --> 00:27:05,279
inside

763
00:27:05,279 --> 00:27:06,480
there was a there was a malicious

764
00:27:06,480 --> 00:27:09,039
activities control and if you inspect

765
00:27:09,039 --> 00:27:10,400
this activex control there was a shell

766
00:27:10,400 --> 00:27:12,159
code which was embedded inside so

767
00:27:12,159 --> 00:27:14,559
essentially uh attackers were attackers

768
00:27:14,559 --> 00:27:15,840
were able to deliver

769
00:27:15,840 --> 00:27:18,480
the oxml exploit via the rtf uh file

770
00:27:18,480 --> 00:27:19,679
format

771
00:27:19,679 --> 00:27:22,480
so that's what uh embedding will will

772
00:27:22,480 --> 00:27:25,679
basically allow you to do

773
00:27:26,159 --> 00:27:28,640
so talking about the ole packages this

774
00:27:28,640 --> 00:27:31,440
is one another

775
00:27:31,440 --> 00:27:34,480
another attack surface which which has

776
00:27:34,480 --> 00:27:34,960
been

777
00:27:34,960 --> 00:27:38,000
exploited widely by by by the malicious

778
00:27:38,000 --> 00:27:38,880
actors

779
00:27:38,880 --> 00:27:40,720
so what it allows you to do is it will

780
00:27:40,720 --> 00:27:42,159
allow you to embed

781
00:27:42,159 --> 00:27:47,360
malicious payloads now now if you see

782
00:27:47,360 --> 00:27:50,559
packages are are uh basically

783
00:27:50,559 --> 00:27:53,360
uh if you just uh if you click on the

784
00:27:53,360 --> 00:27:54,960
object and if you go to the

785
00:27:54,960 --> 00:27:56,799
go to the packages you can embed

786
00:27:56,799 --> 00:27:58,880
basically any any file format right

787
00:27:58,880 --> 00:28:00,720
now there is no particular file format

788
00:28:00,720 --> 00:28:02,000
which is associated with

789
00:28:02,000 --> 00:28:05,039
only packages now it could be either

790
00:28:05,039 --> 00:28:06,880
vbscript it could be javascript or it

791
00:28:06,880 --> 00:28:08,640
could be executable

792
00:28:08,640 --> 00:28:10,880
it could be an xml file so there is no

793
00:28:10,880 --> 00:28:12,880
particular data format associated with

794
00:28:12,880 --> 00:28:15,360
with the with the packages so attacker

795
00:28:15,360 --> 00:28:16,000
can basically

796
00:28:16,000 --> 00:28:18,159
come here and embed any any file format

797
00:28:18,159 --> 00:28:19,440
which

798
00:28:19,440 --> 00:28:22,320
which it kind of wants to and the and

799
00:28:22,320 --> 00:28:24,080
the respective handler will be

800
00:28:24,080 --> 00:28:26,720
invoked by the ole infrastructure know

801
00:28:26,720 --> 00:28:30,320
based on the file type so

802
00:28:30,320 --> 00:28:32,399
what essentially it essentially happens

803
00:28:32,399 --> 00:28:34,480
here is a packager.dll

804
00:28:34,480 --> 00:28:37,120
uh is responsible for loading the

805
00:28:37,120 --> 00:28:37,840
package

806
00:28:37,840 --> 00:28:41,039
data into from from the document and

807
00:28:41,039 --> 00:28:42,880
then processing the package data

808
00:28:42,880 --> 00:28:47,120
now there was there was a serious

809
00:28:47,120 --> 00:28:50,399
issue which was reported uh uh in this

810
00:28:50,399 --> 00:28:52,799
early packages few years back

811
00:28:52,799 --> 00:28:56,000
in fact it was reported by one of our

812
00:28:56,000 --> 00:28:56,960
researchers

813
00:28:56,960 --> 00:29:00,080
that you know a package is basically

814
00:29:00,080 --> 00:29:02,480
uh dropping the files into the whatever

815
00:29:02,480 --> 00:29:04,320
files that you are you you embed in the

816
00:29:04,320 --> 00:29:06,640
embed via only packages it used to drop

817
00:29:06,640 --> 00:29:07,919
into the temp directory

818
00:29:07,919 --> 00:29:10,880
and and this behavior of early package

819
00:29:10,880 --> 00:29:12,000
has been abused

820
00:29:12,000 --> 00:29:13,520
heavily by the attackers over the past

821
00:29:13,520 --> 00:29:15,840
few years so uh

822
00:29:15,840 --> 00:29:18,559
if you see here uh malicious rtf drops

823
00:29:18,559 --> 00:29:20,080
embedded value package into the temp

824
00:29:20,080 --> 00:29:22,480
directory and this is exact behavior

825
00:29:22,480 --> 00:29:25,919
which uh which is out of the

826
00:29:25,919 --> 00:29:28,159
packager.dll so package.dll basically

827
00:29:28,159 --> 00:29:29,760
processes that package data

828
00:29:29,760 --> 00:29:33,360
and it will drop the uh the

829
00:29:33,360 --> 00:29:35,200
embedded file or embedded payload into

830
00:29:35,200 --> 00:29:36,559
the time directory now

831
00:29:36,559 --> 00:29:39,120
this behavior can also be abused by

832
00:29:39,120 --> 00:29:40,080
attacker in

833
00:29:40,080 --> 00:29:41,679
in many ways because there are many

834
00:29:41,679 --> 00:29:43,520
applications right we we don't

835
00:29:43,520 --> 00:29:46,720
we never know how an application uses uh

836
00:29:46,720 --> 00:29:48,640
the temp director it could it would it

837
00:29:48,640 --> 00:29:50,240
would basically pick up the

838
00:29:50,240 --> 00:29:52,159
drop file from the from the dam

839
00:29:52,159 --> 00:29:54,080
directory and then it would execute so

840
00:29:54,080 --> 00:29:57,039
this behavior was was and was used by

841
00:29:57,039 --> 00:29:58,399
attacker to target

842
00:29:58,399 --> 00:30:01,919
a lot of victims so this is something

843
00:30:01,919 --> 00:30:03,440
which we need to take care about when we

844
00:30:03,440 --> 00:30:04,720
are building an automated

845
00:30:04,720 --> 00:30:06,880
tool for rtf classification as well so

846
00:30:06,880 --> 00:30:09,600
we need to inspect the oil packages

847
00:30:09,600 --> 00:30:12,000
uh see if if there is any package data

848
00:30:12,000 --> 00:30:13,760
there and then we need to extract

849
00:30:13,760 --> 00:30:15,520
and and then extract the file and then

850
00:30:15,520 --> 00:30:17,279
probably we can inspect it

851
00:30:17,279 --> 00:30:20,640
through some other engines or sandbox

852
00:30:20,640 --> 00:30:22,559
so summarizing what what has been the

853
00:30:22,559 --> 00:30:24,960
early attack surface primarily attackers

854
00:30:24,960 --> 00:30:28,159
have been abusing so one is cls cls id

855
00:30:28,159 --> 00:30:29,600
based loading off dll

856
00:30:29,600 --> 00:30:31,120
so as i indicated there are there are

857
00:30:31,120 --> 00:30:32,720
many early object in windows

858
00:30:32,720 --> 00:30:36,080
and any any logic flaw in any of the old

859
00:30:36,080 --> 00:30:37,279
object could lead to

860
00:30:37,279 --> 00:30:40,240
the entire office compromise so what

861
00:30:40,240 --> 00:30:41,760
attackers can supply here

862
00:30:41,760 --> 00:30:44,159
is they can they can supply the series

863
00:30:44,159 --> 00:30:45,279
id

864
00:30:45,279 --> 00:30:48,399
right they can supply the relevant data

865
00:30:48,399 --> 00:30:51,520
to be processed by that by that dll

866
00:30:51,520 --> 00:30:54,480
and this dll could would be either used

867
00:30:54,480 --> 00:30:55,279
to build

868
00:30:55,279 --> 00:30:58,640
build an entire exploit uh it could help

869
00:30:58,640 --> 00:31:00,720
attackers to bypass windows mitigations

870
00:31:00,720 --> 00:31:02,880
or it can help attackers to

871
00:31:02,880 --> 00:31:06,960
do you know get a memory corruption

872
00:31:07,039 --> 00:31:10,240
exploit memory corruption flaws so

873
00:31:10,240 --> 00:31:11,919
this has been one of the one of the

874
00:31:11,919 --> 00:31:14,080
primary attack surface

875
00:31:14,080 --> 00:31:15,840
wellie packages has been used by

876
00:31:15,840 --> 00:31:17,440
attackers to drop the payload

877
00:31:17,440 --> 00:31:20,720
on the disk because of functionality

878
00:31:20,720 --> 00:31:22,399
that it provides and since no

879
00:31:22,399 --> 00:31:25,360
no file format is associated with

880
00:31:25,360 --> 00:31:26,080
packages

881
00:31:26,080 --> 00:31:28,320
it can basically embed any any form of

882
00:31:28,320 --> 00:31:29,519
comma files

883
00:31:29,519 --> 00:31:33,279
and other attack vector which has been

884
00:31:33,279 --> 00:31:36,080
um in the oly objects is is the logic

885
00:31:36,080 --> 00:31:37,279
flaws primarily so

886
00:31:37,279 --> 00:31:39,039
there could be a parsing logic flaws in

887
00:31:39,039 --> 00:31:41,120
in the attack in the oly objects

888
00:31:41,120 --> 00:31:44,240
for instance uh that could be a only

889
00:31:44,240 --> 00:31:46,480
object which can process your

890
00:31:46,480 --> 00:31:49,760
xml data right so if if there is any

891
00:31:49,760 --> 00:31:50,880
parsing flaw in the

892
00:31:50,880 --> 00:31:52,720
in the networly object basically it

893
00:31:52,720 --> 00:31:54,480
could lead to an office compromise so

894
00:31:54,480 --> 00:31:58,159
that's one of the one of the

895
00:31:59,519 --> 00:32:00,960
fact that attackers have been taking

896
00:32:00,960 --> 00:32:03,679
advantage of and many many early objects

897
00:32:03,679 --> 00:32:06,080
have been

898
00:32:06,159 --> 00:32:07,679
have been allowing attackers it can

899
00:32:07,679 --> 00:32:09,600
allow attackers to link your rtf to the

900
00:32:09,600 --> 00:32:10,320
external fight

901
00:32:10,320 --> 00:32:12,799
external resource and it can invoke the

902
00:32:12,799 --> 00:32:14,480
respective handlers to

903
00:32:14,480 --> 00:32:16,399
to execute that that external resource

904
00:32:16,399 --> 00:32:19,000
so if it is an htf file it can invoke

905
00:32:19,000 --> 00:32:21,679
mshta.exe to execute the file execute

906
00:32:21,679 --> 00:32:22,640
the hdfi so

907
00:32:22,640 --> 00:32:23,919
that can lead to arbitrary code

908
00:32:23,919 --> 00:32:26,399
execution

909
00:32:26,960 --> 00:32:30,080
so let's uh kind of touch upon how we

910
00:32:30,080 --> 00:32:31,200
can build

911
00:32:31,200 --> 00:32:34,159
rtf file file structure and and how we

912
00:32:34,159 --> 00:32:35,440
can build

913
00:32:35,440 --> 00:32:38,240
will be parsing and inspection so

914
00:32:38,240 --> 00:32:39,919
primarily what we need here

915
00:32:39,919 --> 00:32:43,120
is a robust rdf document parser

916
00:32:43,120 --> 00:32:45,760
uh which can parse the destination

917
00:32:45,760 --> 00:32:47,279
control words and extraction of

918
00:32:47,279 --> 00:32:49,279
and it can it can extract data streams

919
00:32:49,279 --> 00:32:51,360
out of them

920
00:32:51,360 --> 00:32:55,120
and this it is critical for the parser

921
00:32:55,120 --> 00:32:55,600
to

922
00:32:55,600 --> 00:32:58,240
handle the stream offer stations because

923
00:32:58,240 --> 00:32:59,279
attackers can take

924
00:32:59,279 --> 00:33:01,200
advantage of the of the control world

925
00:33:01,200 --> 00:33:02,799
offer stations to bypass

926
00:33:02,799 --> 00:33:05,279
bypass you know evade the static

927
00:33:05,279 --> 00:33:08,159
detections av detections or

928
00:33:08,159 --> 00:33:10,080
or perimeter detections if if it is

929
00:33:10,080 --> 00:33:11,360
available in any other any other

930
00:33:11,360 --> 00:33:12,960
parameter solutions

931
00:33:12,960 --> 00:33:15,760
so we need a robust rtf document parser

932
00:33:15,760 --> 00:33:16,080
and

933
00:33:16,080 --> 00:33:18,799
since all the ole objects are embedded

934
00:33:18,799 --> 00:33:19,760
into

935
00:33:19,760 --> 00:33:21,679
into the ole 2 compound binary file

936
00:33:21,679 --> 00:33:23,120
format compound document

937
00:33:23,120 --> 00:33:24,960
format we need a compound document

938
00:33:24,960 --> 00:33:26,720
format parser as well so we need a only

939
00:33:26,720 --> 00:33:28,000
two parser

940
00:33:28,000 --> 00:33:30,640
so primary two three parsers we need

941
00:33:30,640 --> 00:33:32,399
other is very packet structure parser

942
00:33:32,399 --> 00:33:35,279
for extracting the embedded payload and

943
00:33:35,279 --> 00:33:37,919
sending it somewhere else for analysis

944
00:33:37,919 --> 00:33:39,519
could be into the sandbox or could be

945
00:33:39,519 --> 00:33:41,760
any any other

946
00:33:41,760 --> 00:33:45,679
av detection solution so we need a three

947
00:33:45,679 --> 00:33:47,760
three parsers one is rtf document parser

948
00:33:47,760 --> 00:33:49,919
we need a only 2.0 compound document

949
00:33:49,919 --> 00:33:51,279
parser and we need our early packet

950
00:33:51,279 --> 00:33:53,039
structure parser so this three parser

951
00:33:53,039 --> 00:33:53,600
could

952
00:33:53,600 --> 00:33:56,240
basically allow us to extract the data

953
00:33:56,240 --> 00:33:57,840
from the rtf file

954
00:33:57,840 --> 00:34:00,240
and and inspect relevant sections of the

955
00:34:00,240 --> 00:34:00,880
data

956
00:34:00,880 --> 00:34:02,720
and other other modules other inspection

957
00:34:02,720 --> 00:34:04,720
models can be integrated if

958
00:34:04,720 --> 00:34:07,519
if needed so for for instance if there

959
00:34:07,519 --> 00:34:08,639
is an oxml

960
00:34:08,639 --> 00:34:11,760
oxml file embedded we could have uh oxml

961
00:34:11,760 --> 00:34:13,760
analysis analyzer which can inspect the

962
00:34:13,760 --> 00:34:16,320
oxml5 we could have pdf analyzer plugged

963
00:34:16,320 --> 00:34:16,560
in

964
00:34:16,560 --> 00:34:19,599
into the into this rtf uh

965
00:34:19,599 --> 00:34:23,199
inspect rtf uh inspection uh module

966
00:34:23,199 --> 00:34:25,520
which can you know primarily inspect pdf

967
00:34:25,520 --> 00:34:27,119
document or similar for the

968
00:34:27,119 --> 00:34:29,199
flash file document so any other file

969
00:34:29,199 --> 00:34:30,399
format uh

970
00:34:30,399 --> 00:34:32,079
any other file format analyzers can be

971
00:34:32,079 --> 00:34:34,320
cut then plugged in into this and and

972
00:34:34,320 --> 00:34:35,359
which can help us

973
00:34:35,359 --> 00:34:37,440
identify extract and send it to the

974
00:34:37,440 --> 00:34:38,800
relevant relevant uh

975
00:34:38,800 --> 00:34:42,159
file format analyzers so

976
00:34:42,159 --> 00:34:44,320
uh what is our detection focus here

977
00:34:44,320 --> 00:34:45,599
reduction focus is to

978
00:34:45,599 --> 00:34:47,918
is to detect weaponized exploits so we

979
00:34:47,918 --> 00:34:49,520
want to kind of identify

980
00:34:49,520 --> 00:34:52,239
exploitation methods um instead of uh

981
00:34:52,239 --> 00:34:54,320
just a vulnerabilities

982
00:34:54,320 --> 00:34:56,079
for instance if rtf links to external

983
00:34:56,079 --> 00:34:58,640
resource sdf file a htf file or a js

984
00:34:58,640 --> 00:35:00,839
file or any executable file

985
00:35:00,839 --> 00:35:03,760
then we should basically it should be an

986
00:35:03,760 --> 00:35:05,359
eye catcher basically it should be

987
00:35:05,359 --> 00:35:07,280
it should be looped with little bit of

988
00:35:07,280 --> 00:35:08,720
suspiciousness

989
00:35:08,720 --> 00:35:10,960
so we want to detect the exploitation

990
00:35:10,960 --> 00:35:11,760
methods

991
00:35:11,760 --> 00:35:14,320
we want to identify uh we want to

992
00:35:14,320 --> 00:35:15,119
extract

993
00:35:15,119 --> 00:35:18,160
all the data we want to even uh inspect

994
00:35:18,160 --> 00:35:19,599
non-very controlled words as well and

995
00:35:19,599 --> 00:35:21,280
there are there are few

996
00:35:21,280 --> 00:35:23,200
non-very controlled words for for

997
00:35:23,200 --> 00:35:25,520
instance data store or theme data

998
00:35:25,520 --> 00:35:27,280
or any other other controllers which has

999
00:35:27,280 --> 00:35:28,720
been abused by the attackers so you want

1000
00:35:28,720 --> 00:35:29,359
to inspect

1001
00:35:29,359 --> 00:35:31,440
them as well and there are many other

1002
00:35:31,440 --> 00:35:33,760
other rtf control words which can carry

1003
00:35:33,760 --> 00:35:34,960
streams of data

1004
00:35:34,960 --> 00:35:36,480
so any of these control words can be

1005
00:35:36,480 --> 00:35:38,480
abused so you want to extract the data

1006
00:35:38,480 --> 00:35:40,160
and inspect them as well

1007
00:35:40,160 --> 00:35:43,040
we want to extract data streams to only

1008
00:35:43,040 --> 00:35:44,320
control words and you want to inspect

1009
00:35:44,320 --> 00:35:45,200
them as well

1010
00:35:45,200 --> 00:35:46,720
so all the valley control words are

1011
00:35:46,720 --> 00:35:48,960
primarily obj emp obj ocx

1012
00:35:48,960 --> 00:35:52,400
obj link auto link and obj html

1013
00:35:52,400 --> 00:35:55,680
uh stuff like that so all these data all

1014
00:35:55,680 --> 00:35:56,400
these

1015
00:35:56,400 --> 00:35:58,640
control words will carry obj data we

1016
00:35:58,640 --> 00:36:00,480
have obj data and all the all the

1017
00:36:00,480 --> 00:36:02,000
all these data streams needs to be

1018
00:36:02,000 --> 00:36:03,680
extracted and inspected further

1019
00:36:03,680 --> 00:36:07,760
right and one of the other primary uh

1020
00:36:07,760 --> 00:36:09,200
thing is you want to also look at the

1021
00:36:09,200 --> 00:36:11,040
rtf overlay data so whatever is

1022
00:36:11,040 --> 00:36:12,480
basically data which is appended at the

1023
00:36:12,480 --> 00:36:13,920
end of the rtf file

1024
00:36:13,920 --> 00:36:17,359
and many times it has been used to hide

1025
00:36:17,359 --> 00:36:21,040
hide shell codes or hide any other

1026
00:36:21,040 --> 00:36:22,400
malicious resources which can help

1027
00:36:22,400 --> 00:36:25,040
attackers to basically

1028
00:36:25,040 --> 00:36:28,079
execute the attack so in terms of only

1029
00:36:28,079 --> 00:36:29,920
2.0 we want to inspect the content

1030
00:36:29,920 --> 00:36:32,079
stream because that's where the embedded

1031
00:36:32,079 --> 00:36:35,520
file will be if you if you if attacker

1032
00:36:35,520 --> 00:36:36,560
basically uh

1033
00:36:36,560 --> 00:36:39,200
embeds oxml file or pdf file you will

1034
00:36:39,200 --> 00:36:40,079
find the pdf file

1035
00:36:40,079 --> 00:36:42,240
in the in the content stream of 482.0

1036
00:36:42,240 --> 00:36:44,400
document so we want to inspect

1037
00:36:44,400 --> 00:36:47,760
we want to extract od 2.0 data stream

1038
00:36:47,760 --> 00:36:49,839
um and we want to extract all the object

1039
00:36:49,839 --> 00:36:51,200
storage and object streams and we want

1040
00:36:51,200 --> 00:36:52,720
to inspect that further to see if there

1041
00:36:52,720 --> 00:36:54,480
is any malicious

1042
00:36:54,480 --> 00:36:57,119
content there

1043
00:36:57,680 --> 00:36:59,440
so this is the high level block diagram

1044
00:36:59,440 --> 00:37:02,240
so we have an rtf structure parser we

1045
00:37:02,240 --> 00:37:03,760
have a only structure parser

1046
00:37:03,760 --> 00:37:05,599
we have compound binary file format

1047
00:37:05,599 --> 00:37:07,599
parser we have

1048
00:37:07,599 --> 00:37:10,079
office oxml parser we can have flash

1049
00:37:10,079 --> 00:37:11,760
file detection pdf file detection we

1050
00:37:11,760 --> 00:37:13,119
have can we can have a sandboxing

1051
00:37:13,119 --> 00:37:14,400
solution which could be plugged in into

1052
00:37:14,400 --> 00:37:15,839
this this module

1053
00:37:15,839 --> 00:37:19,520
so this will kind of and

1054
00:37:19,520 --> 00:37:21,119
this is kind of scalable you could plug

1055
00:37:21,119 --> 00:37:22,880
in other modules as well which

1056
00:37:22,880 --> 00:37:25,760
as per the inspection requirements and

1057
00:37:25,760 --> 00:37:27,839
this will help us to kind of

1058
00:37:27,839 --> 00:37:30,720
parse the rtf and then use any other

1059
00:37:30,720 --> 00:37:31,520
modules which

1060
00:37:31,520 --> 00:37:33,599
which which can inspect other file

1061
00:37:33,599 --> 00:37:34,560
formats to

1062
00:37:34,560 --> 00:37:37,119
see whether the rtf file is is comes out

1063
00:37:37,119 --> 00:37:40,079
to be malicious or not

1064
00:37:40,079 --> 00:37:42,480
so this is the uh flow diagram a little

1065
00:37:42,480 --> 00:37:44,079
bit more detail

1066
00:37:44,079 --> 00:37:46,800
so we want to inspect the ole objects so

1067
00:37:46,800 --> 00:37:48,400
we want to look at all the

1068
00:37:48,400 --> 00:37:51,520
early objects with early mb obj emb

1069
00:37:51,520 --> 00:37:54,560
auto link ocx uh first control you want

1070
00:37:54,560 --> 00:37:55,359
to look at

1071
00:37:55,359 --> 00:37:58,560
object class uh which is a package

1072
00:37:58,560 --> 00:38:02,560
and out of that we want to look at

1073
00:38:02,560 --> 00:38:04,720
the many the many other object class uh

1074
00:38:04,720 --> 00:38:06,320
arguments as well we want to look at

1075
00:38:06,320 --> 00:38:09,520
uh what are document.812 uh

1076
00:38:09,520 --> 00:38:12,960
rich acrox document.c which means

1077
00:38:12,960 --> 00:38:15,839
basically pdf document so based on the

1078
00:38:15,839 --> 00:38:16,720
obj class

1079
00:38:16,720 --> 00:38:19,119
we could forward we could extract the

1080
00:38:19,119 --> 00:38:20,720
relevant file and then we can forward it

1081
00:38:20,720 --> 00:38:22,480
to respective modules so

1082
00:38:22,480 --> 00:38:25,040
since the data is is embedded into early

1083
00:38:25,040 --> 00:38:25,599
but not

1084
00:38:25,599 --> 00:38:27,280
native stream we want we have to extract

1085
00:38:27,280 --> 00:38:29,520
the native string

1086
00:38:29,520 --> 00:38:31,200
and based on the size depending on the

1087
00:38:31,200 --> 00:38:33,680
size of the uh or into compound document

1088
00:38:33,680 --> 00:38:35,520
we have to extract that

1089
00:38:35,520 --> 00:38:38,240
and inspect all the all the streams for

1090
00:38:38,240 --> 00:38:39,920
for malicious data as well as inspect

1091
00:38:39,920 --> 00:38:40,880
the content stream

1092
00:38:40,880 --> 00:38:43,599
for uh embedded file and then we can

1093
00:38:43,599 --> 00:38:45,839
forward the file to respective analyzers

1094
00:38:45,839 --> 00:38:47,440
so only package

1095
00:38:47,440 --> 00:38:49,599
packages we we can extract early

1096
00:38:49,599 --> 00:38:52,160
packages based on the object class

1097
00:38:52,160 --> 00:38:53,599
if we find the program id as

1098
00:38:53,599 --> 00:38:56,000
programmatic string as object obj

1099
00:38:56,000 --> 00:38:57,839
class is equal to package we could

1100
00:38:57,839 --> 00:38:59,760
basically extract that package data and

1101
00:38:59,760 --> 00:39:00,640
forward it to

1102
00:39:00,640 --> 00:39:03,119
uh package parser for extracting any

1103
00:39:03,119 --> 00:39:03,760
embedded

1104
00:39:03,760 --> 00:39:04,960
effect scripts on any embedded

1105
00:39:04,960 --> 00:39:07,359
executable so at a high level this is

1106
00:39:07,359 --> 00:39:08,079
how the

1107
00:39:08,079 --> 00:39:14,320
the rtf inspection can take place

1108
00:39:14,320 --> 00:39:16,800
and of course uh overlay data as well

1109
00:39:16,800 --> 00:39:18,000
well data and

1110
00:39:18,000 --> 00:39:20,400
the uh non-overly controlled words as

1111
00:39:20,400 --> 00:39:22,240
well we we need to inspect them because

1112
00:39:22,240 --> 00:39:23,760
attackers can abuse this to hide

1113
00:39:23,760 --> 00:39:26,720
malicious resources i said earlier

1114
00:39:26,720 --> 00:39:29,359
so let's take a look at engine output

1115
00:39:29,359 --> 00:39:31,119
and some of the initial results

1116
00:39:31,119 --> 00:39:34,160
so as as you can see here

1117
00:39:34,160 --> 00:39:36,079
uh there is an oxml object which is

1118
00:39:36,079 --> 00:39:37,440
embedded inside the rtf

1119
00:39:37,440 --> 00:39:40,160
which is uh oximeter itself is a

1120
00:39:40,160 --> 00:39:40,880
malicious

1121
00:39:40,880 --> 00:39:44,480
file and the engine is able to

1122
00:39:44,480 --> 00:39:47,359
extract the oxml file out of the out of

1123
00:39:47,359 --> 00:39:49,359
the early to compound document

1124
00:39:49,359 --> 00:39:52,160
and then it can apply the binary stream

1125
00:39:52,160 --> 00:39:54,079
heuristics inspection heuristics and

1126
00:39:54,079 --> 00:39:57,200
it turned out that the file the the

1127
00:39:57,200 --> 00:40:00,240
oxml file was uh which was embedded into

1128
00:40:00,240 --> 00:40:01,920
the rtf document has

1129
00:40:01,920 --> 00:40:04,960
was kind of malicious right so you can

1130
00:40:04,960 --> 00:40:06,400
see all the malicious heuristics that

1131
00:40:06,400 --> 00:40:06,960
triggered

1132
00:40:06,960 --> 00:40:09,599
triggered here uh eventually leading to

1133
00:40:09,599 --> 00:40:11,440
classifying classification of rtf file

1134
00:40:11,440 --> 00:40:13,040
as malicious

1135
00:40:13,040 --> 00:40:15,760
and it was able to extract the oxml file

1136
00:40:15,760 --> 00:40:17,760
and and was able to reinspect the file

1137
00:40:17,760 --> 00:40:18,240
for

1138
00:40:18,240 --> 00:40:21,280
uh for further malicious content

1139
00:40:21,280 --> 00:40:22,880
so this was one of the one of the

1140
00:40:22,880 --> 00:40:25,200
examples uh

1141
00:40:25,200 --> 00:40:27,680
recently last year there was one uh one

1142
00:40:27,680 --> 00:40:28,480
operation one

1143
00:40:28,480 --> 00:40:31,119
one targeted attack which targeted

1144
00:40:31,119 --> 00:40:33,200
aerospace and defense industry

1145
00:40:33,200 --> 00:40:36,839
so what we saw here is uh

1146
00:40:36,839 --> 00:40:40,800
obj class was one dot document.12 which

1147
00:40:40,800 --> 00:40:42,400
essentially means it was an oxml

1148
00:40:42,400 --> 00:40:44,880
document so we went inside this wax

1149
00:40:44,880 --> 00:40:46,480
document and then we inspected it

1150
00:40:46,480 --> 00:40:47,359
further

1151
00:40:47,359 --> 00:40:48,880
and the attack came out to be a template

1152
00:40:48,880 --> 00:40:50,480
injection so

1153
00:40:50,480 --> 00:40:53,839
this basically linked uh this document

1154
00:40:53,839 --> 00:40:55,520
this embedded oximeter document was

1155
00:40:55,520 --> 00:40:55,920
linked

1156
00:40:55,920 --> 00:41:00,000
to other other oxml document to the uh

1157
00:41:00,000 --> 00:41:03,119
to the cnc server external external

1158
00:41:03,119 --> 00:41:06,160
source and then it was downloaded and

1159
00:41:06,160 --> 00:41:07,200
executed so that

1160
00:41:07,200 --> 00:41:09,200
that the external one was was a real

1161
00:41:09,200 --> 00:41:11,440
exploit but when we inspected this this

1162
00:41:11,440 --> 00:41:13,280
document it came out to be a template

1163
00:41:13,280 --> 00:41:14,720
injection technique which was used by

1164
00:41:14,720 --> 00:41:16,240
attackers

1165
00:41:16,240 --> 00:41:18,240
so this is this kind of techniques are

1166
00:41:18,240 --> 00:41:20,319
are very important to inspect when we

1167
00:41:20,319 --> 00:41:22,319
are classifying the rtf files

1168
00:41:22,319 --> 00:41:25,680
so and and since this allows as i said

1169
00:41:25,680 --> 00:41:27,599
to embed any kind of any kind of file

1170
00:41:27,599 --> 00:41:31,200
format we we have to be kind of

1171
00:41:31,760 --> 00:41:33,839
extract these files and inspect it

1172
00:41:33,839 --> 00:41:36,240
further

1173
00:41:36,400 --> 00:41:39,200
so coming to the initial testing results

1174
00:41:39,200 --> 00:41:40,400
uh

1175
00:41:40,400 --> 00:41:43,520
we've kind of tested this engine from

1176
00:41:43,520 --> 00:41:46,800
uh over variety of exploits

1177
00:41:46,800 --> 00:41:50,480
starting from 2012 to around 20

1178
00:41:50,480 --> 00:41:53,599
and we've kind of tested 15 000 exploits

1179
00:41:53,599 --> 00:41:54,319
uh

1180
00:41:54,319 --> 00:41:58,079
around 2000 exploits and we've uh

1181
00:41:58,079 --> 00:42:00,960
with with over uh close to 50 heuristics

1182
00:42:00,960 --> 00:42:02,640
50 rtf heuristics

1183
00:42:02,640 --> 00:42:04,319
inspection heuristics implemented we

1184
00:42:04,319 --> 00:42:06,880
came to across about 94.3

1185
00:42:06,880 --> 00:42:10,319
of detection rate so we had about

1186
00:42:10,319 --> 00:42:12,480
you know close to 50 heuristics of the

1187
00:42:12,480 --> 00:42:13,680
arduino sticks implemented

1188
00:42:13,680 --> 00:42:16,000
the rtf inspection engine which includes

1189
00:42:16,000 --> 00:42:16,720
rtf

1190
00:42:16,720 --> 00:42:19,839
rtf heuristics as well as early compound

1191
00:42:19,839 --> 00:42:21,839
binary file format heuristics as well as

1192
00:42:21,839 --> 00:42:24,800
oxml heuristics as well

1193
00:42:24,800 --> 00:42:28,160
and false positive we've kind of had

1194
00:42:28,160 --> 00:42:31,119
very less false positives in with this

1195
00:42:31,119 --> 00:42:33,359
engine 0.60 percent of false positives

1196
00:42:33,359 --> 00:42:35,280
which is very encouraging

1197
00:42:35,280 --> 00:42:37,839
so with that i close this discussion and

1198
00:42:37,839 --> 00:42:38,880
i'm open for

1199
00:42:38,880 --> 00:42:42,319
any questions if you have

1200
00:42:43,599 --> 00:42:46,160
thank you so much chintan for that great

1201
00:42:46,160 --> 00:42:47,440
deep dive into

1202
00:42:47,440 --> 00:42:49,359
into a file format that probably doesn't

1203
00:42:49,359 --> 00:42:52,800
get as much attention as the normal

1204
00:42:52,800 --> 00:42:55,680
um you know docx files and the likes you

1205
00:42:55,680 --> 00:42:56,400
know

1206
00:42:56,400 --> 00:42:59,440
and really interesting stuff and i guess

1207
00:42:59,440 --> 00:42:59,760
what

1208
00:42:59,760 --> 00:43:02,880
one question i have um you know for

1209
00:43:02,880 --> 00:43:04,400
someone maybe getting started in this

1210
00:43:04,400 --> 00:43:06,319
space and maybe not at the

1211
00:43:06,319 --> 00:43:07,760
level of implementing some of the

1212
00:43:07,760 --> 00:43:09,400
automated parsing and

1213
00:43:09,400 --> 00:43:12,079
categorization what's sort of tools

1214
00:43:12,079 --> 00:43:14,160
would you recommend to someone

1215
00:43:14,160 --> 00:43:17,760
analyzing rtf files and and

1216
00:43:17,760 --> 00:43:20,560
embedded ollies in them i know jda

1217
00:43:20,560 --> 00:43:21,920
stevens has a few

1218
00:43:21,920 --> 00:43:23,359
a few popular ones there is there

1219
00:43:23,359 --> 00:43:24,880
anything you'd recommend for people

1220
00:43:24,880 --> 00:43:27,200
starting out in this space

1221
00:43:27,200 --> 00:43:29,680
uh yes sure uh so there are there are

1222
00:43:29,680 --> 00:43:30,240
kind of

1223
00:43:30,240 --> 00:43:33,440
uh rtf uh parsers available

1224
00:43:33,440 --> 00:43:35,200
uh so instead of kind of reinventing the

1225
00:43:35,200 --> 00:43:37,280
entire entire wheel coding the rtf

1226
00:43:37,280 --> 00:43:38,640
parsers there are

1227
00:43:38,640 --> 00:43:42,000
open source rtf parsers available

1228
00:43:42,000 --> 00:43:44,400
kind of those who are interested to get

1229
00:43:44,400 --> 00:43:45,599
started in this space can

1230
00:43:45,599 --> 00:43:49,200
can uh visit um decal edge

1231
00:43:49,200 --> 00:43:53,119
rtf parser rtf it is basically entire

1232
00:43:53,119 --> 00:43:57,200
suit of overly parsing framework

1233
00:43:57,200 --> 00:43:59,040
but what we have kind of done here is we

1234
00:43:59,040 --> 00:44:01,280
have we had to modify the rtf parser to

1235
00:44:01,280 --> 00:44:03,200
be able to suit our requirements

1236
00:44:03,200 --> 00:44:06,960
so based on our needs and requirements

1237
00:44:06,960 --> 00:44:07,680
we have to

1238
00:44:07,680 --> 00:44:09,599
have a modifications to this parcel

1239
00:44:09,599 --> 00:44:11,520
because uh there could be many other

1240
00:44:11,520 --> 00:44:13,040
corner cases which could not be

1241
00:44:13,040 --> 00:44:14,400
which may not be covered by the open

1242
00:44:14,400 --> 00:44:16,160
source process so we we have to take

1243
00:44:16,160 --> 00:44:17,920
take care of that as well based on the

1244
00:44:17,920 --> 00:44:20,800
exploits available so one is decollage

1245
00:44:20,800 --> 00:44:23,040
rdf parser that there is rdf dump as

1246
00:44:23,040 --> 00:44:24,319
well which is which is another open

1247
00:44:24,319 --> 00:44:24,880
source tool

1248
00:44:24,880 --> 00:44:27,200
available to to get started in this

1249
00:44:27,200 --> 00:44:27,920
space

1250
00:44:27,920 --> 00:44:31,040
and there are many other uh

1251
00:44:31,040 --> 00:44:33,520
only two parsers as well so entire an

1252
00:44:33,520 --> 00:44:35,359
entire

1253
00:44:35,359 --> 00:44:37,839
decoration office parsing suit can be

1254
00:44:37,839 --> 00:44:39,520
used to implement this

1255
00:44:39,520 --> 00:44:42,800
this uh engine

1256
00:44:42,800 --> 00:44:46,000
yeah thanks for that and i noticed your

1257
00:44:46,000 --> 00:44:47,839
your research on this

1258
00:44:47,839 --> 00:44:50,319
subject is available on the mcafee

1259
00:44:50,319 --> 00:44:52,400
website i've provided a link to your

1260
00:44:52,400 --> 00:44:53,520
blog article

1261
00:44:53,520 --> 00:44:55,119
give people an opportunity through

1262
00:44:55,119 --> 00:44:56,560
afterwards as well

1263
00:44:56,560 --> 00:44:58,880
okay thank you so much tinton for that

1264
00:44:58,880 --> 00:45:00,160
thank you and

1265
00:45:00,160 --> 00:45:02,839
again virtual round of applause from

1266
00:45:02,839 --> 00:45:05,839
everyone

