1
00:00:06,480 --> 00:00:07,200
hey

2
00:00:07,200 --> 00:00:11,599
um i'm a little bit sick sorry for my

3
00:00:11,599 --> 00:00:14,960
my voice and advice

4
00:00:14,960 --> 00:00:17,840
so we are going to talk today about the

5
00:00:17,840 --> 00:00:21,119
research with code name sauerment

6
00:00:21,119 --> 00:00:23,760
um you could even heard about it if you

7
00:00:23,760 --> 00:00:24,240
are

8
00:00:24,240 --> 00:00:28,560
into mobile application development area

9
00:00:28,560 --> 00:00:31,119
i am a member of the research team which

10
00:00:31,119 --> 00:00:32,320
was working on it

11
00:00:32,320 --> 00:00:35,440
so let's talk about it

12
00:00:35,440 --> 00:00:39,280
uh first couple words about myself

13
00:00:39,280 --> 00:00:44,000
um uh i have my security

14
00:00:44,000 --> 00:00:47,520
security research team leader at sync

15
00:00:47,520 --> 00:00:50,480
um a family guy i have a wife and one

16
00:00:50,480 --> 00:00:52,079
year old son

17
00:00:52,079 --> 00:00:54,320
i was born in russia saint petersburg

18
00:00:54,320 --> 00:00:55,600
and moved to tel aviv

19
00:00:55,600 --> 00:00:59,440
about four years ago i play ctf

20
00:00:59,440 --> 00:01:00,160
challenges

21
00:01:00,160 --> 00:01:03,680
as a member of five bc team

22
00:01:03,680 --> 00:01:06,159
and you can find me as byday tonight in

23
00:01:06,159 --> 00:01:07,920
twitter

24
00:01:07,920 --> 00:01:10,080
uh also before we start i would like to

25
00:01:10,080 --> 00:01:12,640
appreciate the team which was working on

26
00:01:12,640 --> 00:01:13,760
the research

27
00:01:13,760 --> 00:01:18,159
raul and danny thank you

28
00:01:18,479 --> 00:01:20,400
so let's start we are going to talk

29
00:01:20,400 --> 00:01:22,479
about mobile advertisement para

30
00:01:22,479 --> 00:01:24,080
specifically about

31
00:01:24,080 --> 00:01:27,520
integral ads adsdk

32
00:01:27,520 --> 00:01:31,759
which is published in cocoapods

33
00:01:33,439 --> 00:01:37,119
the company created the sdk in integral

34
00:01:37,119 --> 00:01:39,600
is application monetization platform

35
00:01:39,600 --> 00:01:40,640
owned by

36
00:01:40,640 --> 00:01:43,759
public company mobista it's based on

37
00:01:43,759 --> 00:01:46,079
china with a lot of different offices

38
00:01:46,079 --> 00:01:49,199
and different countries

39
00:01:50,720 --> 00:01:54,079
mintograph dsdk is available for both

40
00:01:54,079 --> 00:01:57,920
android and ios but i'm not going to

41
00:01:57,920 --> 00:01:58,640
talk about

42
00:01:58,640 --> 00:02:01,759
android version today although all

43
00:02:01,759 --> 00:02:03,840
relevant links will be

44
00:02:03,840 --> 00:02:06,880
at the end of the presentation

45
00:02:06,880 --> 00:02:09,679
um this decay allows developers to

46
00:02:09,679 --> 00:02:10,800
monetize

47
00:02:10,800 --> 00:02:15,040
on advertisement obviously um

48
00:02:15,040 --> 00:02:17,360
when we started our research in august

49
00:02:17,360 --> 00:02:19,120
2020

50
00:02:19,120 --> 00:02:22,160
the sdk was closed source integrated in

51
00:02:22,160 --> 00:02:23,360
about 3 000

52
00:02:23,360 --> 00:02:26,640
applications with about 1.2 billion

53
00:02:26,640 --> 00:02:30,399
downloads per month overall

54
00:02:32,000 --> 00:02:35,280
i think it's important to say here

55
00:02:35,280 --> 00:02:38,080
that i'm i'm going to mention integral

56
00:02:38,080 --> 00:02:40,239
company many times today

57
00:02:40,239 --> 00:02:43,519
in really different contexts

58
00:02:43,519 --> 00:02:46,720
but i'm not blaming them and anything

59
00:02:46,720 --> 00:02:50,000
all what will be presented is pure

60
00:02:50,000 --> 00:02:52,879
observations based on facts and it's

61
00:02:52,879 --> 00:02:54,959
only up to you to decide if to blame

62
00:02:54,959 --> 00:02:57,280
someone or not

63
00:02:57,280 --> 00:03:00,720
now to the research

64
00:03:02,720 --> 00:03:05,680
when we started it uh we immediately

65
00:03:05,680 --> 00:03:06,640
observed some

66
00:03:06,640 --> 00:03:10,000
suspicious markers uh first of all the

67
00:03:10,000 --> 00:03:11,519
code is not open

68
00:03:11,519 --> 00:03:13,760
it's obviously it's not suspicious by

69
00:03:13,760 --> 00:03:14,800
itself

70
00:03:14,800 --> 00:03:17,120
uh but it is really unusual for a

71
00:03:17,120 --> 00:03:18,319
cocoapod to be

72
00:03:18,319 --> 00:03:22,239
closed source we found that some of the

73
00:03:22,239 --> 00:03:23,120
classes

74
00:03:23,120 --> 00:03:26,640
and pieces of code are obfuscated but

75
00:03:26,640 --> 00:03:28,879
most of the classes are not so we

76
00:03:28,879 --> 00:03:31,680
started to look at the obfuscated ones

77
00:03:31,680 --> 00:03:34,400
at the beginning

78
00:03:35,200 --> 00:03:38,480
some of the strings were encoded

79
00:03:38,480 --> 00:03:42,640
using non-standard base64 like encoding

80
00:03:42,640 --> 00:03:45,760
eventually we found that the sdk uses

81
00:03:45,760 --> 00:03:47,280
method switzerland

82
00:03:47,280 --> 00:03:50,239
uh it's a process when you replace uh

83
00:03:50,239 --> 00:03:51,599
native implementation

84
00:03:51,599 --> 00:03:54,400
with the author method with your own

85
00:03:54,400 --> 00:03:56,159
implementation when you replace

86
00:03:56,159 --> 00:04:00,959
native methods uh network activity

87
00:04:00,959 --> 00:04:01,840
showed that

88
00:04:01,840 --> 00:04:04,640
the sdk uses the same base64 like

89
00:04:04,640 --> 00:04:06,239
encoding in the request

90
00:04:06,239 --> 00:04:09,920
to obfuscate the requests

91
00:04:10,720 --> 00:04:13,439
after deeper look we found that integral

92
00:04:13,439 --> 00:04:14,080
can collect

93
00:04:14,080 --> 00:04:16,238
some data which we don't expect to be

94
00:04:16,238 --> 00:04:18,320
collected

95
00:04:18,320 --> 00:04:21,440
i'm talking about open url tracking

96
00:04:21,440 --> 00:04:24,000
all http request tracking including

97
00:04:24,000 --> 00:04:27,040
parameters of the requests like

98
00:04:27,040 --> 00:04:30,560
headers and store kit events tracking

99
00:04:30,560 --> 00:04:33,680
by by tracking i mean that the sdk send

100
00:04:33,680 --> 00:04:34,479
lock about

101
00:04:34,479 --> 00:04:37,720
each of those actions to their back end

102
00:04:37,720 --> 00:04:40,840
[Music]

103
00:04:40,840 --> 00:04:43,360
and the open url method

104
00:04:43,360 --> 00:04:45,759
is used whenever your application wants

105
00:04:45,759 --> 00:04:46,479
to open

106
00:04:46,479 --> 00:04:49,600
a url in a browser or

107
00:04:49,600 --> 00:04:52,960
as a deep link in another application

108
00:04:52,960 --> 00:04:55,360
so you can imagine what will happen if

109
00:04:55,360 --> 00:04:56,479
you replace

110
00:04:56,479 --> 00:04:59,040
implementation of the method with your

111
00:04:59,040 --> 00:05:00,320
own

112
00:05:00,320 --> 00:05:03,360
basically if user clicks

113
00:05:03,360 --> 00:05:06,400
on a link in a banner or just

114
00:05:06,400 --> 00:05:09,520
any external link in the app

115
00:05:09,520 --> 00:05:12,720
it opens the browser but in parallel

116
00:05:12,720 --> 00:05:16,320
integral sdk sends the data

117
00:05:16,320 --> 00:05:18,720
about the click to their backend to

118
00:05:18,720 --> 00:05:21,600
their servers

119
00:05:21,919 --> 00:05:24,560
this is the obfuscated data sample of

120
00:05:24,560 --> 00:05:27,039
such requests

121
00:05:27,039 --> 00:05:30,720
you can see here the url itself

122
00:05:30,720 --> 00:05:33,199
but as well many metadata you can see

123
00:05:33,199 --> 00:05:35,199
the stack traces

124
00:05:35,199 --> 00:05:38,320
you can see method name

125
00:05:38,320 --> 00:05:42,000
and class name and all the

126
00:05:42,000 --> 00:05:44,960
um arguments all the query parameters of

127
00:05:44,960 --> 00:05:45,360
the

128
00:05:45,360 --> 00:05:49,280
request so but what does this data is

129
00:05:49,280 --> 00:05:51,520
used for

130
00:05:51,520 --> 00:05:54,320
um let's have a look how normally mobile

131
00:05:54,320 --> 00:05:56,400
advertisement works

132
00:05:56,400 --> 00:05:58,800
user clicks on a banner and

133
00:05:58,800 --> 00:06:00,479
advertisement sdk

134
00:06:00,479 --> 00:06:04,720
send log about uh this click to

135
00:06:04,720 --> 00:06:07,840
attribution provider backend then user

136
00:06:07,840 --> 00:06:08,800
downloads

137
00:06:08,800 --> 00:06:12,400
application and after

138
00:06:12,400 --> 00:06:15,919
installation after first launch

139
00:06:15,919 --> 00:06:19,039
attribution provider receives this data

140
00:06:19,039 --> 00:06:22,080
and now you can see that attribution

141
00:06:22,080 --> 00:06:23,759
provider backend

142
00:06:23,759 --> 00:06:27,759
uh has both click information and

143
00:06:27,759 --> 00:06:29,840
install information so

144
00:06:29,840 --> 00:06:33,280
eventually it can figure out

145
00:06:33,280 --> 00:06:35,600
which banner was clicked and who should

146
00:06:35,600 --> 00:06:38,880
be paid for the click

147
00:06:38,960 --> 00:06:41,840
so if you have an information about all

148
00:06:41,840 --> 00:06:43,120
clicks made by

149
00:06:43,120 --> 00:06:46,400
the user you can pretend

150
00:06:46,400 --> 00:06:49,919
that the user clicked on your banner

151
00:06:49,919 --> 00:06:51,759
as well as on the banner of different

152
00:06:51,759 --> 00:06:53,520
advertiser

153
00:06:53,520 --> 00:06:56,560
uh when you can send a fake click

154
00:06:56,560 --> 00:06:59,759
to the attribution provider backend and

155
00:06:59,759 --> 00:07:02,160
as far as attribution provider counts

156
00:07:02,160 --> 00:07:03,520
the second click

157
00:07:03,520 --> 00:07:05,840
as the one should be paid you can earn

158
00:07:05,840 --> 00:07:09,359
some unfair money here

159
00:07:09,759 --> 00:07:12,880
that's it about open url tracking let's

160
00:07:12,880 --> 00:07:14,000
have a quick look

161
00:07:14,000 --> 00:07:18,479
at the http request tracking

162
00:07:20,400 --> 00:07:23,599
here everything is much simpler

163
00:07:23,599 --> 00:07:26,240
every time your app makes a request to

164
00:07:26,240 --> 00:07:27,680
your backend

165
00:07:27,680 --> 00:07:31,440
the integral sdk can collect this data

166
00:07:31,440 --> 00:07:34,240
including http request headers cookies

167
00:07:34,240 --> 00:07:36,560
and so on so

168
00:07:36,560 --> 00:07:39,280
your authorization tokens can be

169
00:07:39,280 --> 00:07:40,639
collected

170
00:07:40,639 --> 00:07:42,840
as well as some other sensitive

171
00:07:42,840 --> 00:07:45,840
information

172
00:07:46,639 --> 00:07:49,440
one interesting fact about monetization

173
00:07:49,440 --> 00:07:50,400
is that usually

174
00:07:50,400 --> 00:07:53,120
developer integrates more than one

175
00:07:53,120 --> 00:07:56,319
advertisement network to the app

176
00:07:56,319 --> 00:07:58,960
to do that developers uh use mediation

177
00:07:58,960 --> 00:08:00,080
platforms like

178
00:08:00,080 --> 00:08:03,120
mopab by twitter upload and iron source

179
00:08:03,120 --> 00:08:06,560
and so on the platforms aggregate a

180
00:08:06,560 --> 00:08:08,080
bunch of different

181
00:08:08,080 --> 00:08:11,759
advertisement sdks and decide which

182
00:08:11,759 --> 00:08:12,720
banner to show

183
00:08:12,720 --> 00:08:16,400
and when hence in many cases developers

184
00:08:16,400 --> 00:08:18,879
not even aware which exact advertisement

185
00:08:18,879 --> 00:08:20,319
sdk are integrated

186
00:08:20,319 --> 00:08:24,240
in the up they wrote and in case

187
00:08:24,240 --> 00:08:27,280
in case of the integral sdk the triken

188
00:08:27,280 --> 00:08:30,560
could be enabled uh even if if

189
00:08:30,560 --> 00:08:32,399
the developer never heard about

190
00:08:32,399 --> 00:08:34,640
metrograwl if he installed the or

191
00:08:34,640 --> 00:08:36,640
he or she installed it as part of

192
00:08:36,640 --> 00:08:40,559
mediation platform

193
00:08:40,559 --> 00:08:43,919
interesting that sdk checks

194
00:08:43,919 --> 00:08:47,040
as well if you run on emulator

195
00:08:47,040 --> 00:08:50,399
or debugger attached to your device

196
00:08:50,399 --> 00:08:53,680
or if you have jailbroken device

197
00:08:53,680 --> 00:08:56,880
and or if you are

198
00:08:56,880 --> 00:09:00,160
under the proxy and disable striking

199
00:09:00,160 --> 00:09:03,519
in this cases that means

200
00:09:03,519 --> 00:09:06,240
even if a developer has monitoring of

201
00:09:06,240 --> 00:09:07,279
outbound

202
00:09:07,279 --> 00:09:10,080
connections no chance to catch tracking

203
00:09:10,080 --> 00:09:12,240
requests

204
00:09:12,240 --> 00:09:14,800
i believe that's why the hdk remained on

205
00:09:14,800 --> 00:09:15,360
power

206
00:09:15,360 --> 00:09:18,720
for more than one year

207
00:09:18,800 --> 00:09:22,000
on august 24th we went public

208
00:09:22,000 --> 00:09:26,000
with their findings it made a lot of

209
00:09:26,000 --> 00:09:26,560
noise

210
00:09:26,560 --> 00:09:29,600
even non-technical press like forbes

211
00:09:29,600 --> 00:09:32,880
decided to publish it

212
00:09:34,640 --> 00:09:36,399
in a couple of days after the

213
00:09:36,399 --> 00:09:38,720
publication mobile marketing

214
00:09:38,720 --> 00:09:41,920
company singular wrote an article about

215
00:09:41,920 --> 00:09:43,120
significant drop

216
00:09:43,120 --> 00:09:46,399
in click hijack and fraud they

217
00:09:46,399 --> 00:09:49,120
didn't mention any names for obvious

218
00:09:49,120 --> 00:09:50,240
reasons

219
00:09:50,240 --> 00:09:52,640
but it's still fun to see the effect

220
00:09:52,640 --> 00:09:54,080
your publications

221
00:09:54,080 --> 00:09:56,560
created

222
00:09:57,360 --> 00:10:00,320
later in october twitter's mediation

223
00:10:00,320 --> 00:10:01,600
platform mop up

224
00:10:01,600 --> 00:10:04,399
removed integral as certified mediation

225
00:10:04,399 --> 00:10:06,240
network

226
00:10:06,240 --> 00:10:08,880
as far as they know at some point iron

227
00:10:08,880 --> 00:10:11,440
source did the same

228
00:10:11,440 --> 00:10:14,000
so overall we were happy that our

229
00:10:14,000 --> 00:10:15,839
research helped the world become

230
00:10:15,839 --> 00:10:19,839
a bit better and reduce fraud

231
00:10:20,000 --> 00:10:23,440
then mintegral decided to make

232
00:10:23,440 --> 00:10:26,399
source code of the sdk public open

233
00:10:26,399 --> 00:10:27,200
source

234
00:10:27,200 --> 00:10:30,160
personally i wouldn't call it open

235
00:10:30,160 --> 00:10:30,800
source

236
00:10:30,800 --> 00:10:34,160
because you can't get the code without

237
00:10:34,160 --> 00:10:37,040
explicitly asking me instagram about it

238
00:10:37,040 --> 00:10:38,880
i mean the code is not published on

239
00:10:38,880 --> 00:10:41,440
github or anywhere else and you can just

240
00:10:41,440 --> 00:10:45,360
download it but one of our partner

241
00:10:45,360 --> 00:10:47,600
scandal sent us the source code and we

242
00:10:47,600 --> 00:10:49,839
decided to perform gif analysis

243
00:10:49,839 --> 00:10:53,120
to check if track and functionality was

244
00:10:53,120 --> 00:10:55,440
indeed removed

245
00:10:55,440 --> 00:10:58,839
and proved that everything is okay now

246
00:10:58,839 --> 00:11:01,040
um

247
00:11:01,040 --> 00:11:04,560
yeah on this slide you can see classes

248
00:11:04,560 --> 00:11:07,680
which were presented in original closed

249
00:11:07,680 --> 00:11:09,440
source version

250
00:11:09,440 --> 00:11:14,880
but were deleted uh from the open source

251
00:11:14,880 --> 00:11:18,560
the first one cx6 stuff is already known

252
00:11:18,560 --> 00:11:20,959
track and functionality

253
00:11:20,959 --> 00:11:24,560
but what is remote command why haven't i

254
00:11:24,560 --> 00:11:25,839
looked at it before

255
00:11:25,839 --> 00:11:29,120
and why they decided to delete it from

256
00:11:29,120 --> 00:11:31,680
the open source

257
00:11:31,680 --> 00:11:36,399
um so all advertisement in your app

258
00:11:36,399 --> 00:11:40,560
is usually just html pages

259
00:11:40,560 --> 00:11:42,800
and think about it it's really

260
00:11:42,800 --> 00:11:45,279
convenient way to

261
00:11:45,279 --> 00:11:50,560
to represent a banner or a splash screen

262
00:11:50,560 --> 00:11:52,639
if you need animation you can use some

263
00:11:52,639 --> 00:11:53,839
css features

264
00:11:53,839 --> 00:11:56,560
if you need interactivity you can add

265
00:11:56,560 --> 00:11:57,839
javascript

266
00:11:57,839 --> 00:11:59,920
and it's really cross platform it would

267
00:11:59,920 --> 00:12:02,000
work on android ios

268
00:12:02,000 --> 00:12:06,079
and even in in the browser if you want

269
00:12:06,560 --> 00:12:09,600
so we found that empty gt remote common

270
00:12:09,600 --> 00:12:11,360
from the previous slide from beef

271
00:12:11,360 --> 00:12:12,639
analysis

272
00:12:12,639 --> 00:12:16,320
is used inside uh what called mtg base

273
00:12:16,320 --> 00:12:16,800
bridge

274
00:12:16,800 --> 00:12:20,639
webview which is it is the base

275
00:12:20,639 --> 00:12:23,839
webview used all over the sdk for almost

276
00:12:23,839 --> 00:12:26,800
all types of ad

277
00:12:26,800 --> 00:12:31,680
you can imagine if banner is html page

278
00:12:31,680 --> 00:12:34,639
both integral and advertiser can control

279
00:12:34,639 --> 00:12:36,079
the banner payload

280
00:12:36,079 --> 00:12:40,399
the javascript um

281
00:12:40,399 --> 00:12:43,440
this is the interface of uh

282
00:12:43,440 --> 00:12:46,240
mtjd mode common sample of uh how to

283
00:12:46,240 --> 00:12:48,000
call into jd mode command from

284
00:12:48,000 --> 00:12:49,760
javascript

285
00:12:49,760 --> 00:12:53,839
uh it is capable to run native function

286
00:12:53,839 --> 00:12:57,519
by name with arguments so which accepts

287
00:12:57,519 --> 00:13:01,440
um json with four different keys

288
00:13:01,440 --> 00:13:04,959
unique identifier is a target native

289
00:13:04,959 --> 00:13:07,440
class name

290
00:13:07,440 --> 00:13:10,959
name is method name to call

291
00:13:10,959 --> 00:13:13,440
parameters array of arguments for that

292
00:13:13,440 --> 00:13:14,480
method

293
00:13:14,480 --> 00:13:17,839
and result is just helper for

294
00:13:17,839 --> 00:13:20,959
empty general common to figure out how

295
00:13:20,959 --> 00:13:24,560
to serialize data back to result

296
00:13:24,560 --> 00:13:27,760
by the way this is the same

297
00:13:27,760 --> 00:13:30,720
base 64 litecoin coding as i mentioned

298
00:13:30,720 --> 00:13:32,000
at the beginning not

299
00:13:32,000 --> 00:13:35,839
not by normal by 64.

300
00:13:37,600 --> 00:13:41,920
so it means that both advertiser

301
00:13:41,920 --> 00:13:44,560
and integral itself theoretically can

302
00:13:44,560 --> 00:13:47,760
execute code remotely on your device

303
00:13:47,760 --> 00:13:50,800
and they can do it ignoring any app

304
00:13:50,800 --> 00:13:52,800
store security checks

305
00:13:52,800 --> 00:13:54,639
because the application is already on

306
00:13:54,639 --> 00:13:55,839
your device

307
00:13:55,839 --> 00:13:58,079
so and the banner is downloaded from

308
00:13:58,079 --> 00:14:02,880
through the internet

309
00:14:02,880 --> 00:14:06,240
i i decided not to have a live jammer

310
00:14:06,240 --> 00:14:06,880
for

311
00:14:06,880 --> 00:14:10,399
this job but instead i'll show you

312
00:14:10,399 --> 00:14:12,560
the demo video with very simple

313
00:14:12,560 --> 00:14:13,600
application

314
00:14:13,600 --> 00:14:17,120
and rc how how rc could be

315
00:14:17,120 --> 00:14:19,839
exploited

316
00:14:23,519 --> 00:14:27,199
so at the right side you can see a

317
00:14:27,199 --> 00:14:30,240
terminal with evil server

318
00:14:30,240 --> 00:14:33,040
is running on it and the server is going

319
00:14:33,040 --> 00:14:34,480
to host

320
00:14:34,480 --> 00:14:38,000
a banner with rc payload

321
00:14:38,000 --> 00:14:42,320
and receive data from the from the rcm

322
00:14:42,320 --> 00:14:45,199
on the left side you can see emulator

323
00:14:45,199 --> 00:14:46,320
and

324
00:14:46,320 --> 00:14:49,600
what calls uh secret node application

325
00:14:49,600 --> 00:14:50,000
it's

326
00:14:50,000 --> 00:14:52,320
simplest possible secret uh like

327
00:14:52,320 --> 00:14:54,399
simplest possible node application you

328
00:14:54,399 --> 00:14:56,079
can imagine

329
00:14:56,079 --> 00:14:59,839
let's have a look at it

330
00:15:00,000 --> 00:15:02,959
oh sorry

331
00:15:06,880 --> 00:15:10,880
it happened sometimes i don't know why

332
00:15:11,279 --> 00:15:14,399
so now you can see like the

333
00:15:14,399 --> 00:15:17,279
field with text it's the only field of

334
00:15:17,279 --> 00:15:19,440
the application you can edit it

335
00:15:19,440 --> 00:15:22,480
and save it uh and

336
00:15:22,480 --> 00:15:24,240
downstairs you can see the fake

337
00:15:24,240 --> 00:15:26,320
coca-cola banner and

338
00:15:26,320 --> 00:15:30,399
immediately on the right side some data

339
00:15:30,399 --> 00:15:34,079
was already stolen like it's a

340
00:15:34,079 --> 00:15:37,199
package name device identifier

341
00:15:37,199 --> 00:15:40,880
and default node text

342
00:15:40,880 --> 00:15:44,720
now let user change the node

343
00:15:44,720 --> 00:15:48,720
and while user is changing the node you

344
00:15:48,720 --> 00:15:51,519
can see that exploit is running in a

345
00:15:51,519 --> 00:15:52,320
loop

346
00:15:52,320 --> 00:15:54,480
in the background that continue receive

347
00:15:54,480 --> 00:15:58,160
some data from the application

348
00:16:03,120 --> 00:16:06,160
click on update button

349
00:16:06,160 --> 00:16:10,480
and now no new updated node text

350
00:16:10,480 --> 00:16:14,639
is is on the malicious backend

351
00:16:14,639 --> 00:16:17,920
so this is gem of rc

352
00:16:17,920 --> 00:16:22,000
now let's have a look at the code

353
00:16:22,000 --> 00:16:25,199
um the application uh

354
00:16:25,199 --> 00:16:28,399
has pretty simple ui i'm not going to

355
00:16:28,399 --> 00:16:28,880
show

356
00:16:28,880 --> 00:16:31,920
it and the only important thing for us

357
00:16:31,920 --> 00:16:33,120
right now

358
00:16:33,120 --> 00:16:36,320
is that the app uses two

359
00:16:36,320 --> 00:16:40,240
static methods to save and load

360
00:16:40,240 --> 00:16:43,759
node text so basically it has

361
00:16:43,759 --> 00:16:47,839
node repository class and

362
00:16:47,839 --> 00:16:51,600
it uses txt file somewhere

363
00:16:51,600 --> 00:16:54,880
in the device memory on the device

364
00:16:54,880 --> 00:16:57,920
so and the node repository class

365
00:16:57,920 --> 00:17:01,199
has two static methods load to get this

366
00:17:01,199 --> 00:17:03,279
text file and save to

367
00:17:03,279 --> 00:17:07,760
put it back to their memory

368
00:17:10,240 --> 00:17:12,880
this is the exploit which is a part of

369
00:17:12,880 --> 00:17:16,559
fake coca-cola banner on your screen

370
00:17:16,559 --> 00:17:19,439
the exploit is super simple as well

371
00:17:19,439 --> 00:17:21,359
basically you just navigate

372
00:17:21,359 --> 00:17:24,880
to mv blah blah handle native object

373
00:17:24,880 --> 00:17:28,480
question mark and then you attach a

374
00:17:28,480 --> 00:17:32,000
serialized json payload for a

375
00:17:32,000 --> 00:17:34,480
node repository for empty driver mode

376
00:17:34,480 --> 00:17:36,400
command class

377
00:17:36,400 --> 00:17:39,520
uh you had seen it already the unique

378
00:17:39,520 --> 00:17:40,559
identifier

379
00:17:40,559 --> 00:17:44,480
is the node repository it has the prefix

380
00:17:44,480 --> 00:17:45,520
static

381
00:17:45,520 --> 00:17:48,720
to let mtj remote command know

382
00:17:48,720 --> 00:17:51,840
that we are going to call static method

383
00:17:51,840 --> 00:17:53,760
of the class

384
00:17:53,760 --> 00:17:57,039
name is load basically to load the

385
00:17:57,039 --> 00:18:00,080
the secret node and result

386
00:18:00,080 --> 00:18:03,760
string to serialize it back

387
00:18:03,760 --> 00:18:06,080
as well you have to register a callback

388
00:18:06,080 --> 00:18:07,280
function

389
00:18:07,280 --> 00:18:10,240
to receive data from native function

390
00:18:10,240 --> 00:18:11,919
call

391
00:18:11,919 --> 00:18:15,520
the callback is doing serialization

392
00:18:15,520 --> 00:18:19,120
of the result and sending it back to

393
00:18:19,120 --> 00:18:21,600
malicious backend the backend is running

394
00:18:21,600 --> 00:18:25,120
on localhost in this case

395
00:18:26,840 --> 00:18:30,559
um on this slide you can see

396
00:18:30,559 --> 00:18:33,280
logical diagram of the application

397
00:18:33,280 --> 00:18:34,480
itself

398
00:18:34,480 --> 00:18:37,600
and how darcy got executed

399
00:18:37,600 --> 00:18:40,480
i maybe repeat myself here a bit but i'd

400
00:18:40,480 --> 00:18:42,080
like to make this part

401
00:18:42,080 --> 00:18:44,960
crystal player

402
00:18:46,880 --> 00:18:49,919
this green rectangle is uh

403
00:18:49,919 --> 00:18:53,600
is the code written by developer

404
00:18:53,600 --> 00:18:56,720
first party code it communicates

405
00:18:56,720 --> 00:18:59,200
uh with the third party code with the

406
00:18:59,200 --> 00:19:00,000
integral

407
00:19:00,000 --> 00:19:05,120
adsdk via the mtg remote command class

408
00:19:05,120 --> 00:19:08,880
uh which through a webview

409
00:19:08,880 --> 00:19:12,640
uh with the banner communicate with

410
00:19:12,640 --> 00:19:15,039
malicious advertiser backhand

411
00:19:15,039 --> 00:19:18,400
and integral backend

412
00:19:18,400 --> 00:19:20,720
and

413
00:19:22,320 --> 00:19:25,919
we we haven't observed any signs of

414
00:19:25,919 --> 00:19:27,520
malicious activity

415
00:19:27,520 --> 00:19:30,960
in binaries we checked and i don't know

416
00:19:30,960 --> 00:19:34,320
if this rc was ever used with malicious

417
00:19:34,320 --> 00:19:36,480
symptom

418
00:19:36,480 --> 00:19:39,919
but we can speculate about it a bit uh

419
00:19:39,919 --> 00:19:42,559
someone theoretically can target

420
00:19:42,559 --> 00:19:44,799
specific ios versions

421
00:19:44,799 --> 00:19:48,320
inject a rootkit and steal any of your

422
00:19:48,320 --> 00:19:49,840
private data

423
00:19:49,840 --> 00:19:54,959
passwords pictures contacts everything

424
00:19:57,200 --> 00:20:00,480
next day we reached out apple pointing

425
00:20:00,480 --> 00:20:01,039
that

426
00:20:01,039 --> 00:20:03,840
a lot of popular applications have this

427
00:20:03,840 --> 00:20:06,559
rc stuff

428
00:20:06,559 --> 00:20:09,360
apple reacted very fast sending emails

429
00:20:09,360 --> 00:20:09,840
to

430
00:20:09,840 --> 00:20:12,880
all affected application owners

431
00:20:12,880 --> 00:20:15,200
interestingly they haven't mentioned

432
00:20:15,200 --> 00:20:16,960
integral somehow

433
00:20:16,960 --> 00:20:20,400
instead they said you have to delete mtj

434
00:20:20,400 --> 00:20:22,960
invitation box in class

435
00:20:22,960 --> 00:20:25,679
or your application will be removed from

436
00:20:25,679 --> 00:20:28,080
the app store

437
00:20:28,080 --> 00:20:30,480
as i mentioned before the sdk could be

438
00:20:30,480 --> 00:20:33,600
installed as part of mediation platform

439
00:20:33,600 --> 00:20:36,480
and it's not really obvious if mtg in

440
00:20:36,480 --> 00:20:37,679
vacation boxing

441
00:20:37,679 --> 00:20:40,559
is uh relevant to me integral is the

442
00:20:40,559 --> 00:20:42,240
case somehow

443
00:20:42,240 --> 00:20:44,480
uh so this situation caused a lot of

444
00:20:44,480 --> 00:20:45,840
questions uh

445
00:20:45,840 --> 00:20:48,320
at the internet you can see some of them

446
00:20:48,320 --> 00:20:51,439
on different forums

447
00:20:53,600 --> 00:20:56,080
so the impact today we covered two

448
00:20:56,080 --> 00:20:59,520
issues came from the same sdk

449
00:20:59,520 --> 00:21:02,799
first one could be used in fraud schemas

450
00:21:02,799 --> 00:21:06,240
and violates user rights sending and

451
00:21:06,240 --> 00:21:09,760
possibly collecting pii

452
00:21:09,840 --> 00:21:12,000
second issue opens possibility for

453
00:21:12,000 --> 00:21:17,039
remote code execution on your device

454
00:21:17,039 --> 00:21:19,280
one sdk attacks thousands of

455
00:21:19,280 --> 00:21:20,799
applications and

456
00:21:20,799 --> 00:21:25,039
billions of users all over the world

457
00:21:27,120 --> 00:21:30,240
personally i proud that this research

458
00:21:30,240 --> 00:21:34,720
eventually helped to reduce fraud cases

459
00:21:34,720 --> 00:21:37,679
protect many users and increase

460
00:21:37,679 --> 00:21:39,200
awareness

461
00:21:39,200 --> 00:21:44,080
in the mobile developers community

462
00:21:44,080 --> 00:21:46,880
um if you want some juicy technical

463
00:21:46,880 --> 00:21:49,200
details i strongly recommend you to

464
00:21:49,200 --> 00:21:49,679
check

465
00:21:49,679 --> 00:21:53,840
our check our research write up

466
00:21:53,840 --> 00:21:56,960
uh it has all the details about both

467
00:21:56,960 --> 00:22:00,320
android and ios

468
00:22:00,320 --> 00:22:02,960
really nice demo of more complex

469
00:22:02,960 --> 00:22:04,640
exploits

470
00:22:04,640 --> 00:22:07,760
and yeah looks like

471
00:22:07,760 --> 00:22:11,840
i'm not good at estimating speaking time

472
00:22:11,840 --> 00:22:13,360
so we have time for

473
00:22:13,360 --> 00:22:16,080
the questions

474
00:22:17,120 --> 00:22:19,039
thank you so much chris really really

475
00:22:19,039 --> 00:22:20,799
interesting research

476
00:22:20,799 --> 00:22:23,840
and great to get some insight into this

477
00:22:23,840 --> 00:22:26,559
and we we have no questions in the chat

478
00:22:26,559 --> 00:22:26,960
as

479
00:22:26,960 --> 00:22:28,960
such but i i personally have a couple of

480
00:22:28,960 --> 00:22:31,520
questions so i'm going to hijack it

481
00:22:31,520 --> 00:22:34,320
and go ahead so who who do you think

482
00:22:34,320 --> 00:22:35,280
should be held

483
00:22:35,280 --> 00:22:38,559
most accountable for apps that

484
00:22:38,559 --> 00:22:41,760
end up inevitably using potentially

485
00:22:41,760 --> 00:22:43,600
malicious sdk

486
00:22:43,600 --> 00:22:47,120
app or add sdks do you think that the

487
00:22:47,120 --> 00:22:49,760
app developers bear responsibility

488
00:22:49,760 --> 00:22:51,280
for not performing their own due

489
00:22:51,280 --> 00:22:53,600
diligence or do you think that the app

490
00:22:53,600 --> 00:22:55,760
stores themselves like google and apple

491
00:22:55,760 --> 00:22:57,600
need to do a better job

492
00:22:57,600 --> 00:22:59,679
of detecting these quicker and weeding

493
00:22:59,679 --> 00:23:02,000
them out

494
00:23:02,159 --> 00:23:04,880
yeah it's it's a great question i i

495
00:23:04,880 --> 00:23:05,600
believe

496
00:23:05,600 --> 00:23:10,000
uh this is uh efforts of both sides

497
00:23:10,000 --> 00:23:13,840
uh it should be better done in uh

498
00:23:13,840 --> 00:23:16,480
both apple and google back ends to check

499
00:23:16,480 --> 00:23:18,720
the application security to

500
00:23:18,720 --> 00:23:22,000
detect these cases especially if

501
00:23:22,000 --> 00:23:25,360
if library is installed

502
00:23:25,360 --> 00:23:27,760
in many applications and affects so many

503
00:23:27,760 --> 00:23:30,320
users so

504
00:23:30,320 --> 00:23:33,440
that's definitely a good point to check

505
00:23:33,440 --> 00:23:35,760
this libraries

506
00:23:35,760 --> 00:23:38,080
and verify they are not doing any

507
00:23:38,080 --> 00:23:39,120
malicious

508
00:23:39,120 --> 00:23:42,960
stuff but as well developer

509
00:23:42,960 --> 00:23:47,120
is really responsible for

510
00:23:47,120 --> 00:23:49,919
such stuff so i would recommend all the

511
00:23:49,919 --> 00:23:50,960
developers to

512
00:23:50,960 --> 00:23:54,000
install some tools to scan their

513
00:23:54,000 --> 00:23:58,000
dependencies for vulnerabilities

514
00:23:58,080 --> 00:24:01,520
yeah i imagine you know that's

515
00:24:01,520 --> 00:24:04,080
a shared responsibility model as with

516
00:24:04,080 --> 00:24:06,320
all things cloud-based

517
00:24:06,320 --> 00:24:09,039
so another question i have is um you

518
00:24:09,039 --> 00:24:09,840
know

519
00:24:09,840 --> 00:24:12,159
given all the talk recently about supply

520
00:24:12,159 --> 00:24:13,760
chain attacks

521
00:24:13,760 --> 00:24:16,000
you know it's all over the news but it's

522
00:24:16,000 --> 00:24:17,200
more

523
00:24:17,200 --> 00:24:19,600
it hasn't really hit the mobile space

524
00:24:19,600 --> 00:24:20,720
yet do you think

525
00:24:20,720 --> 00:24:23,360
something like this might feature as the

526
00:24:23,360 --> 00:24:24,320
next

527
00:24:24,320 --> 00:24:26,799
supply chain attack albeit a

528
00:24:26,799 --> 00:24:30,158
mobile-based version

529
00:24:30,640 --> 00:24:33,279
yes i believe it's definitely a good

530
00:24:33,279 --> 00:24:34,240
vector for

531
00:24:34,240 --> 00:24:37,520
a potential malicious actor to

532
00:24:37,520 --> 00:24:40,880
uh to exploit mobile area and

533
00:24:40,880 --> 00:24:44,080
um we are actually working on really

534
00:24:44,080 --> 00:24:46,320
interesting research i hope i'll present

535
00:24:46,320 --> 00:24:48,320
it next time

536
00:24:48,320 --> 00:24:50,799
in the mobile development area as well

537
00:24:50,799 --> 00:24:51,919
like to show

538
00:24:51,919 --> 00:24:57,440
some potential vectors for attack

539
00:24:58,840 --> 00:25:02,559
brilliant we have no other questions i

540
00:25:02,559 --> 00:25:04,720
think we'll wrap it up at that career

541
00:25:04,720 --> 00:25:06,320
thank you so much for your

542
00:25:06,320 --> 00:25:07,840
sharing your research and knowledge with

543
00:25:07,840 --> 00:25:09,600
the with the audience it's

544
00:25:09,600 --> 00:25:12,000
been great and thank you for being part

545
00:25:12,000 --> 00:25:15,840
of our event today

