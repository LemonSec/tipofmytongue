1
00:00:06,080 --> 00:00:07,040
thank you everyone

2
00:00:07,040 --> 00:00:09,440
uh for joining this talk uh moving away

3
00:00:09,440 --> 00:00:11,280
from exploit kids the current state of

4
00:00:11,280 --> 00:00:12,719
drive-by download

5
00:00:12,719 --> 00:00:15,679
my name is krishnan subramanian and i am

6
00:00:15,679 --> 00:00:17,680
a security research engineer at a

7
00:00:17,680 --> 00:00:18,560
startup called

8
00:00:18,560 --> 00:00:21,520
menlo security

9
00:00:24,000 --> 00:00:26,400
so a little bit uh introduction about

10
00:00:26,400 --> 00:00:28,560
myself before we delve into the content

11
00:00:28,560 --> 00:00:30,160
um you have been for a rough year

12
00:00:30,160 --> 00:00:31,519
roughly eight years in the field of

13
00:00:31,519 --> 00:00:32,800
cyber security

14
00:00:32,800 --> 00:00:35,200
uh doing security research uh threat

15
00:00:35,200 --> 00:00:36,800
intelligence and a little bit of

16
00:00:36,800 --> 00:00:38,640
experience doing incident response as

17
00:00:38,640 --> 00:00:40,160
well in the past

18
00:00:40,160 --> 00:00:41,920
and i was able to embark into the

19
00:00:41,920 --> 00:00:44,399
journey of cyber security through a

20
00:00:44,399 --> 00:00:46,320
master's degree in computer forensics

21
00:00:46,320 --> 00:00:47,680
from george mason

22
00:00:47,680 --> 00:00:51,440
university and bulk of my cyber security

23
00:00:51,440 --> 00:00:53,120
career i have spent

24
00:00:53,120 --> 00:00:54,800
on building security products at

25
00:00:54,800 --> 00:00:56,399
startups

26
00:00:56,399 --> 00:00:59,680
and uh currently focused on researching

27
00:00:59,680 --> 00:01:01,280
threats and attacks that actually

28
00:01:01,280 --> 00:01:02,559
originate from the web

29
00:01:02,559 --> 00:01:05,680
and email vectors and uh

30
00:01:05,680 --> 00:01:08,799
my handle uh in twitter is chris203

31
00:01:08,799 --> 00:01:09,760
please feel free

32
00:01:09,760 --> 00:01:13,840
to you know hit me up on twitter

33
00:01:14,240 --> 00:01:16,320
so for today's talk we're going to be

34
00:01:16,320 --> 00:01:17,280
starting off

35
00:01:17,280 --> 00:01:19,040
by talking about what is the drive-by

36
00:01:19,040 --> 00:01:21,759
download what is an exploit kit and give

37
00:01:21,759 --> 00:01:22,880
a brief breakdown

38
00:01:22,880 --> 00:01:25,200
of how they function and typical you

39
00:01:25,200 --> 00:01:26,000
know infection

40
00:01:26,000 --> 00:01:29,360
chain involved with an exploit kit

41
00:01:29,360 --> 00:01:32,720
uh next we will talk about

42
00:01:32,720 --> 00:01:35,119
decline in exploited activity over the

43
00:01:35,119 --> 00:01:35,920
years

44
00:01:35,920 --> 00:01:38,560
and provide a perspective on why this is

45
00:01:38,560 --> 00:01:39,439
the case

46
00:01:39,439 --> 00:01:43,280
you know followed by

47
00:01:43,280 --> 00:01:45,360
you know the core content of the talk uh

48
00:01:45,360 --> 00:01:47,200
where we delve into the current

49
00:01:47,200 --> 00:01:49,040
techniques and mechanisms that are being

50
00:01:49,040 --> 00:01:51,439
used by attackers to carry out

51
00:01:51,439 --> 00:01:54,560
uh drive-by download attacks

52
00:01:54,560 --> 00:01:56,880
and uh conclude this talk with some

53
00:01:56,880 --> 00:01:58,560
insight into

54
00:01:58,560 --> 00:02:00,560
how to gain visibility and defend

55
00:02:00,560 --> 00:02:01,920
against

56
00:02:01,920 --> 00:02:05,040
these techniques from a a

57
00:02:05,040 --> 00:02:09,840
soft team standpoint

58
00:02:11,038 --> 00:02:13,360
so what are drive by download you know

59
00:02:13,360 --> 00:02:14,319
going by the

60
00:02:14,319 --> 00:02:17,040
definition um they are essentially

61
00:02:17,040 --> 00:02:18,879
downloads that are triggered by scripts

62
00:02:18,879 --> 00:02:20,879
or some sort of an automated mechanism

63
00:02:20,879 --> 00:02:22,400
like redirection

64
00:02:22,400 --> 00:02:25,599
and the user doesn't visibly

65
00:02:25,599 --> 00:02:29,280
notice the download and

66
00:02:29,280 --> 00:02:31,599
sometimes it is you know authorized by

67
00:02:31,599 --> 00:02:32,319
the user

68
00:02:32,319 --> 00:02:33,840
but actually doesn't understand the

69
00:02:33,840 --> 00:02:35,599
consequences and

70
00:02:35,599 --> 00:02:37,519
you know this point is key because we

71
00:02:37,519 --> 00:02:38,720
will see that

72
00:02:38,720 --> 00:02:41,680
user interaction is required to execute

73
00:02:41,680 --> 00:02:43,280
the download

74
00:02:43,280 --> 00:02:46,080
on the endpoint

75
00:02:46,720 --> 00:02:51,120
so revisiting exploit kids

76
00:02:51,120 --> 00:02:53,200
exploit kids have been around for quite

77
00:02:53,200 --> 00:02:54,400
some time now

78
00:02:54,400 --> 00:02:58,239
and they actually date back to 2006

79
00:02:58,239 --> 00:02:59,920
and you know they had a highly

80
00:02:59,920 --> 00:03:01,760
successful run

81
00:03:01,760 --> 00:03:04,159
um you know in the in the years from

82
00:03:04,159 --> 00:03:07,120
2006 to 2012 i believe

83
00:03:07,120 --> 00:03:09,120
and i think the reason for that was

84
00:03:09,120 --> 00:03:11,440
because of the sheer number of plug-ins

85
00:03:11,440 --> 00:03:13,840
um you know browsers used to natively

86
00:03:13,840 --> 00:03:14,560
support

87
00:03:14,560 --> 00:03:16,800
um those days and these plugins were

88
00:03:16,800 --> 00:03:18,480
often marred with

89
00:03:18,480 --> 00:03:21,200
you know severe vulnerabilities one

90
00:03:21,200 --> 00:03:22,000
point in time

91
00:03:22,000 --> 00:03:24,640
i think in 2012 when black hole exploit

92
00:03:24,640 --> 00:03:26,400
kit was quite prominent

93
00:03:26,400 --> 00:03:30,879
the infection rates were alarming and

94
00:03:30,879 --> 00:03:34,080
you know exploit kids usually

95
00:03:34,080 --> 00:03:36,799
use um you know achieve mass infection

96
00:03:36,799 --> 00:03:37,599
rates

97
00:03:37,599 --> 00:03:40,480
um by using um you know techniques like

98
00:03:40,480 --> 00:03:41,760
watering hole or web

99
00:03:41,760 --> 00:03:44,239
website compromise to actually infect

100
00:03:44,239 --> 00:03:45,680
endpoints

101
00:03:45,680 --> 00:03:48,239
and the key differentiator for exploit

102
00:03:48,239 --> 00:03:48,879
kits was

103
00:03:48,879 --> 00:03:52,400
once the exploit was you know successful

104
00:03:52,400 --> 00:03:54,879
there was no further user interaction

105
00:03:54,879 --> 00:03:56,959
required to execute the final payload on

106
00:03:56,959 --> 00:03:58,799
the end point

107
00:03:58,799 --> 00:04:01,360
and traditionally exploit kids are known

108
00:04:01,360 --> 00:04:02,640
to drop

109
00:04:02,640 --> 00:04:04,959
commodity malware like you know

110
00:04:04,959 --> 00:04:06,000
ransomwares

111
00:04:06,000 --> 00:04:08,080
um you know banking trojans and crypto

112
00:04:08,080 --> 00:04:09,200
miner families

113
00:04:09,200 --> 00:04:12,000
to name a few

114
00:04:12,799 --> 00:04:15,519
so next uh let's just quickly talk about

115
00:04:15,519 --> 00:04:16,079
the

116
00:04:16,079 --> 00:04:21,120
typical you know exploit kit kill chain

117
00:04:23,919 --> 00:04:27,520
so first victims visit an infected site

118
00:04:27,520 --> 00:04:30,560
through you know either like a watering

119
00:04:30,560 --> 00:04:31,280
hole

120
00:04:31,280 --> 00:04:33,440
attack or a compromised website or

121
00:04:33,440 --> 00:04:36,400
through a malvertising channel

122
00:04:36,400 --> 00:04:39,520
and the next step would be you know a

123
00:04:39,520 --> 00:04:42,639
gate url which acts as a filter

124
00:04:42,639 --> 00:04:45,120
uh where you know checks like ip checks

125
00:04:45,120 --> 00:04:46,880
or geo fences or

126
00:04:46,880 --> 00:04:50,160
you know time zone based uh checks are

127
00:04:50,160 --> 00:04:54,160
are carried out and next the users are

128
00:04:54,160 --> 00:04:55,759
taken to a landing page

129
00:04:55,759 --> 00:04:58,560
where um you know the browser is

130
00:04:58,560 --> 00:04:59,360
analyzed

131
00:04:59,360 --> 00:05:01,360
to determine active plugins and their

132
00:05:01,360 --> 00:05:02,400
versions and

133
00:05:02,400 --> 00:05:04,240
if there are any vulnerable plugins that

134
00:05:04,240 --> 00:05:05,520
can be

135
00:05:05,520 --> 00:05:10,000
exploited and the next step is to

136
00:05:10,000 --> 00:05:12,960
actually trigger the exploit and you

137
00:05:12,960 --> 00:05:14,160
know upon successful

138
00:05:14,160 --> 00:05:16,960
exploitation a malicious payload is

139
00:05:16,960 --> 00:05:19,280
delivered to the end point and executed

140
00:05:19,280 --> 00:05:21,680
within the context of the browser

141
00:05:21,680 --> 00:05:23,840
process itself

142
00:05:23,840 --> 00:05:26,800
lastly most exploit kits usually come

143
00:05:26,800 --> 00:05:27,120
with

144
00:05:27,120 --> 00:05:29,520
a an administration or a management

145
00:05:29,520 --> 00:05:30,400
interface

146
00:05:30,400 --> 00:05:32,720
which lets um you know exploit get

147
00:05:32,720 --> 00:05:35,039
authors track statistics like you know

148
00:05:35,039 --> 00:05:36,080
number of

149
00:05:36,080 --> 00:05:37,680
exploit kits that have been successfully

150
00:05:37,680 --> 00:05:39,199
infected

151
00:05:39,199 --> 00:05:42,400
ip blacklisting and you know also

152
00:05:42,400 --> 00:05:44,000
managing the different

153
00:05:44,000 --> 00:05:46,160
exploit payloads uh that will be

154
00:05:46,160 --> 00:05:47,280
delivered after

155
00:05:47,280 --> 00:05:52,479
a successful exploitation

156
00:05:52,479 --> 00:05:56,360
so why are we seeing a decline in

157
00:05:56,360 --> 00:05:58,319
exploitativity

158
00:05:58,319 --> 00:06:00,720
firstly back in the days internet

159
00:06:00,720 --> 00:06:01,440
explorer

160
00:06:01,440 --> 00:06:02,880
was shipped along with the windows

161
00:06:02,880 --> 00:06:04,960
operating system and you know did not

162
00:06:04,960 --> 00:06:05,600
have

163
00:06:05,600 --> 00:06:07,440
security features like process

164
00:06:07,440 --> 00:06:09,440
separation or sandboxing

165
00:06:09,440 --> 00:06:12,639
meaning any successful exploitation of

166
00:06:12,639 --> 00:06:15,680
vulnerabilities in plug-ins that the

167
00:06:15,680 --> 00:06:16,960
browser used to support

168
00:06:16,960 --> 00:06:20,319
back in those days could give access to

169
00:06:20,319 --> 00:06:22,319
you know execute malicious code within

170
00:06:22,319 --> 00:06:23,919
the context of the browser process

171
00:06:23,919 --> 00:06:26,000
itself

172
00:06:26,000 --> 00:06:28,479
fast forward today um you know google

173
00:06:28,479 --> 00:06:29,039
chrome

174
00:06:29,039 --> 00:06:32,160
and other modern browsers have security

175
00:06:32,160 --> 00:06:34,080
features like uh you know process

176
00:06:34,080 --> 00:06:37,680
separation and and sandboxing

177
00:06:37,680 --> 00:06:40,400
secondly i think signaling end of life

178
00:06:40,400 --> 00:06:40,800
for

179
00:06:40,800 --> 00:06:43,680
some of the old browser plug-ins um like

180
00:06:43,680 --> 00:06:45,360
you know

181
00:06:45,360 --> 00:06:47,600
silverlight and java applets are no

182
00:06:47,600 --> 00:06:48,800
longer supported

183
00:06:48,800 --> 00:06:51,759
and more recently adobe flash was end of

184
00:06:51,759 --> 00:06:52,880
life

185
00:06:52,880 --> 00:06:56,560
i believe either end of december 2020 or

186
00:06:56,560 --> 00:07:00,080
january 2021 and i think that's

187
00:07:00,080 --> 00:07:02,319
another contributing factor for uh

188
00:07:02,319 --> 00:07:04,880
decline and exploited activity

189
00:07:04,880 --> 00:07:08,400
the other angle is why not expert kit

190
00:07:08,400 --> 00:07:08,960
authors

191
00:07:08,960 --> 00:07:10,800
uh you know take advantage of zero-day

192
00:07:10,800 --> 00:07:12,240
browser exploits

193
00:07:12,240 --> 00:07:13,599
i think it's mainly because of the

194
00:07:13,599 --> 00:07:16,160
complexity and it's very expensive for

195
00:07:16,160 --> 00:07:18,639
um you know expert kids to drop

196
00:07:18,639 --> 00:07:20,240
commodity malware using

197
00:07:20,240 --> 00:07:22,800
you know browser zero days uh for

198
00:07:22,800 --> 00:07:23,759
example

199
00:07:23,759 --> 00:07:26,800
if there is a cloud chrome zero day uh

200
00:07:26,800 --> 00:07:29,360
that that that is exploited on a windows

201
00:07:29,360 --> 00:07:31,360
endpoint it allows them to break out of

202
00:07:31,360 --> 00:07:32,800
the process sandbox

203
00:07:32,800 --> 00:07:35,759
but uh the exploit needs to be you know

204
00:07:35,759 --> 00:07:36,479
chained with

205
00:07:36,479 --> 00:07:39,039
another os vulnerability uh to be able

206
00:07:39,039 --> 00:07:39,919
to carry out

207
00:07:39,919 --> 00:07:42,720
you know remote code execution and and

208
00:07:42,720 --> 00:07:44,080
two examples

209
00:07:44,080 --> 00:07:46,879
uh you know that said uh there is

210
00:07:46,879 --> 00:07:49,039
evidence of browser zero days being used

211
00:07:49,039 --> 00:07:50,960
by more sophisticated actors like

212
00:07:50,960 --> 00:07:55,039
apt and um the nation state groups

213
00:07:55,039 --> 00:07:57,759
a couple of um you know examples there

214
00:07:57,759 --> 00:07:58,319
was an

215
00:07:58,319 --> 00:08:01,039
of the record talk by the coinbase

216
00:08:01,039 --> 00:08:02,240
incident response team

217
00:08:02,240 --> 00:08:05,599
uh in b sites sf 2020 where they spoke

218
00:08:05,599 --> 00:08:08,000
about responding to you know firefox

219
00:08:08,000 --> 00:08:10,720
zero days in the wild and more recently

220
00:08:10,720 --> 00:08:12,319
there was another campaign

221
00:08:12,319 --> 00:08:14,080
that was targeting the security

222
00:08:14,080 --> 00:08:16,160
researcher community

223
00:08:16,160 --> 00:08:20,000
by leveraging um ie and you know chrome

224
00:08:20,000 --> 00:08:20,800
exploit

225
00:08:20,800 --> 00:08:22,879
uh chain with some other windows

226
00:08:22,879 --> 00:08:25,360
vulnerabilities

227
00:08:25,360 --> 00:08:27,520
so lastly you know drawing some

228
00:08:27,520 --> 00:08:30,080
references from the security community

229
00:08:30,080 --> 00:08:33,360
uh there there is a pretty prominent

230
00:08:33,360 --> 00:08:34,000
author

231
00:08:34,000 --> 00:08:36,719
called brad or malware traffic who

232
00:08:36,719 --> 00:08:37,599
maintains a

233
00:08:37,599 --> 00:08:40,880
website malware traffic analysis known

234
00:08:40,880 --> 00:08:42,880
for its you know exploit kit related

235
00:08:42,880 --> 00:08:45,519
posts over the years and here from the

236
00:08:45,519 --> 00:08:46,640
table you can

237
00:08:46,640 --> 00:08:48,480
you can clearly see there's there's been

238
00:08:48,480 --> 00:08:50,160
a steep decline in the number of

239
00:08:50,160 --> 00:08:52,880
posts on that website related to you

240
00:08:52,880 --> 00:08:54,560
know exploit kids

241
00:08:54,560 --> 00:08:57,760
so i think these are some of the uh

242
00:08:57,760 --> 00:09:00,800
reasons um we are seeing um

243
00:09:00,800 --> 00:09:02,720
you know the decline in expected

244
00:09:02,720 --> 00:09:06,240
activity uh over the years

245
00:09:06,720 --> 00:09:09,600
so then what are the current um drive by

246
00:09:09,600 --> 00:09:11,120
download mechanisms

247
00:09:11,120 --> 00:09:15,200
we are seeing then since exploit kits

248
00:09:15,200 --> 00:09:17,680
are becoming increasingly difficult to

249
00:09:17,680 --> 00:09:18,399
target

250
00:09:18,399 --> 00:09:20,000
uh you know modern browsers because the

251
00:09:20,000 --> 00:09:22,480
security mechanisms that are in place

252
00:09:22,480 --> 00:09:24,560
attackers are trying to keep it simple

253
00:09:24,560 --> 00:09:25,600
by making use of

254
00:09:25,600 --> 00:09:28,000
existing features that are offered

255
00:09:28,000 --> 00:09:32,000
within the realm of the hdb protocol

256
00:09:32,000 --> 00:09:35,200
you know to draw an analogy in the

257
00:09:35,200 --> 00:09:35,680
windows

258
00:09:35,680 --> 00:09:37,360
environment over the years i think

259
00:09:37,360 --> 00:09:38,800
fireless attacks with

260
00:09:38,800 --> 00:09:40,800
living off the land binaries has become

261
00:09:40,800 --> 00:09:42,000
quite prominent

262
00:09:42,000 --> 00:09:44,320
i think there was a great talk just a

263
00:09:44,320 --> 00:09:45,600
few hours back

264
00:09:45,600 --> 00:09:48,080
uh introduction to fileless malware by

265
00:09:48,080 --> 00:09:50,399
juwan araya aria

266
00:09:50,399 --> 00:09:53,920
in the track one series so drawing that

267
00:09:53,920 --> 00:09:56,640
analogy of using you know

268
00:09:56,640 --> 00:10:00,959
lol bins uh you can think of html5

269
00:10:00,959 --> 00:10:03,519
and javascript features as long bins on

270
00:10:03,519 --> 00:10:04,240
the browser

271
00:10:04,240 --> 00:10:06,320
where they are using something that is

272
00:10:06,320 --> 00:10:08,880
available within the http protocol and

273
00:10:08,880 --> 00:10:10,399
the browser environment

274
00:10:10,399 --> 00:10:14,079
uh to you know carry out attacks um

275
00:10:14,079 --> 00:10:16,560
these are things like you know our

276
00:10:16,560 --> 00:10:17,600
features like

277
00:10:17,600 --> 00:10:20,480
the data urls or blobs which is defined

278
00:10:20,480 --> 00:10:21,200
in the

279
00:10:21,200 --> 00:10:24,560
rfc 2397

280
00:10:24,560 --> 00:10:26,959
and you know using javascript to

281
00:10:26,959 --> 00:10:29,040
generate blobs that

282
00:10:29,040 --> 00:10:32,399
that you know trigger downloads on on

283
00:10:32,399 --> 00:10:33,760
endpoints

284
00:10:33,760 --> 00:10:37,040
and lastly um the other techniques is

285
00:10:37,040 --> 00:10:38,480
you know using simple technique of

286
00:10:38,480 --> 00:10:40,800
iframe plus redirection

287
00:10:40,800 --> 00:10:43,360
um which are all again within within the

288
00:10:43,360 --> 00:10:45,519
browser environment itself

289
00:10:45,519 --> 00:10:48,240
one thing to note is there is no

290
00:10:48,240 --> 00:10:51,760
client-side exploitation here

291
00:10:52,800 --> 00:10:55,680
so the first techniques that we want to

292
00:10:55,680 --> 00:10:58,800
talk about is called html smuggling

293
00:10:58,800 --> 00:11:00,640
this is a pretty straightforward

294
00:11:00,640 --> 00:11:03,040
technique which makes use of html5 and

295
00:11:03,040 --> 00:11:04,640
javascript features to

296
00:11:04,640 --> 00:11:08,640
actually um construct a payload entirely

297
00:11:08,640 --> 00:11:09,200
on the

298
00:11:09,200 --> 00:11:12,640
browser side or the client side

299
00:11:12,839 --> 00:11:16,800
um so as you can see from the screenshot

300
00:11:16,800 --> 00:11:18,399
here like

301
00:11:18,399 --> 00:11:20,320
uh there is a javascript variable that

302
00:11:20,320 --> 00:11:21,680
has a a

303
00:11:21,680 --> 00:11:24,160
there is a base64 encoded variable that

304
00:11:24,160 --> 00:11:26,240
is dynamically converted into a blob

305
00:11:26,240 --> 00:11:28,880
using javascript and you can see the

306
00:11:28,880 --> 00:11:30,880
appropriate mime type the octet stream

307
00:11:30,880 --> 00:11:32,399
mime type that is set

308
00:11:32,399 --> 00:11:35,360
which then you know instructs the

309
00:11:35,360 --> 00:11:36,560
browser to trigger

310
00:11:36,560 --> 00:11:39,760
download on the client side and

311
00:11:39,760 --> 00:11:41,920
in regards to the browser in regards to

312
00:11:41,920 --> 00:11:43,839
the end user experience

313
00:11:43,839 --> 00:11:46,160
the user will you know usually see a

314
00:11:46,160 --> 00:11:47,360
save or open

315
00:11:47,360 --> 00:11:50,320
dialog prompt for the download or you

316
00:11:50,320 --> 00:11:51,760
know see the download in the folder

317
00:11:51,760 --> 00:11:54,079
location that has been set to

318
00:11:54,079 --> 00:11:57,440
download files i think uh this depends

319
00:11:57,440 --> 00:11:58,079
on

320
00:11:58,079 --> 00:11:59,760
how the download settings are configured

321
00:11:59,760 --> 00:12:01,519
on the browser

322
00:12:01,519 --> 00:12:04,720
and we just gave this campaign the name

323
00:12:04,720 --> 00:12:07,760
durie because of the because it uses the

324
00:12:07,760 --> 00:12:11,360
data uri scheme

325
00:12:11,360 --> 00:12:14,959
the second technique is just a slight

326
00:12:14,959 --> 00:12:16,079
variation of the

327
00:12:16,079 --> 00:12:20,399
of html smuggling where instead of

328
00:12:20,639 --> 00:12:22,880
instead of constructing the payload on

329
00:12:22,880 --> 00:12:25,040
the client side and including the base64

330
00:12:25,040 --> 00:12:27,279
payload within the http response

331
00:12:27,279 --> 00:12:30,320
an additional um jquery

332
00:12:30,320 --> 00:12:34,079
xhr get method is being used to fetch

333
00:12:34,079 --> 00:12:34,800
the basics

334
00:12:34,800 --> 00:12:38,079
for encoded payload from a remote url i

335
00:12:38,079 --> 00:12:38,800
think this

336
00:12:38,800 --> 00:12:41,279
uh the reason behind using this

337
00:12:41,279 --> 00:12:42,320
technique is the

338
00:12:42,320 --> 00:12:45,120
remote url was acting like a gate which

339
00:12:45,120 --> 00:12:46,880
filters access to the

340
00:12:46,880 --> 00:12:50,480
the malicious base64 encoded payload

341
00:12:50,480 --> 00:12:52,959
so if if someone were to you know just

342
00:12:52,959 --> 00:12:55,040
visit the lincoln standalone

343
00:12:55,040 --> 00:12:56,800
um then you know it would it would

344
00:12:56,800 --> 00:12:58,399
return a 404

345
00:12:58,399 --> 00:13:01,600
um or you know redirect uh

346
00:13:01,600 --> 00:13:04,639
redirect the user to um you know some

347
00:13:04,639 --> 00:13:07,000
penang sites like

348
00:13:07,000 --> 00:13:08,040
downloads.microsoft.com

349
00:13:08,040 --> 00:13:10,720
[Music]

350
00:13:10,720 --> 00:13:14,079
so the last one is uh you know blending

351
00:13:14,079 --> 00:13:18,079
um the two previous techniques with

352
00:13:18,079 --> 00:13:21,519
the iframe redirection mechanism this

353
00:13:21,519 --> 00:13:24,959
uh this technique is pretty

354
00:13:24,959 --> 00:13:27,760
similar to what exploit kits uh use

355
00:13:27,760 --> 00:13:28,399
because

356
00:13:28,399 --> 00:13:30,959
exploit kits are known to use iframes

357
00:13:30,959 --> 00:13:32,839
for redirecting

358
00:13:32,839 --> 00:13:36,560
victims so uh this table sort of shows

359
00:13:36,560 --> 00:13:37,920
the comparison between

360
00:13:37,920 --> 00:13:40,160
uh a traditional exploit kit iframe

361
00:13:40,160 --> 00:13:41,920
redirection mechanism versus

362
00:13:41,920 --> 00:13:44,079
what we are seeing with the current

363
00:13:44,079 --> 00:13:46,880
drive by download mechanism

364
00:13:46,880 --> 00:13:49,279
so both of them start with a gate where

365
00:13:49,279 --> 00:13:50,240
they have some sort of

366
00:13:50,240 --> 00:13:53,440
filter um that let's um

367
00:13:53,440 --> 00:13:56,720
that determines if if the if the browser

368
00:13:56,720 --> 00:13:57,440
can be

369
00:13:57,440 --> 00:13:59,680
can be you know proceed to the next step

370
00:13:59,680 --> 00:14:01,680
of the attack chain or not

371
00:14:01,680 --> 00:14:05,040
and the next step in an expert kit

372
00:14:05,040 --> 00:14:07,199
infection chain would be to redirect the

373
00:14:07,199 --> 00:14:09,360
user to a landing page

374
00:14:09,360 --> 00:14:12,320
but in in the current mechanism we don't

375
00:14:12,320 --> 00:14:14,160
have a landing page because there was

376
00:14:14,160 --> 00:14:16,560
there is no exploitation involved so the

377
00:14:16,560 --> 00:14:18,160
landing page is replaced

378
00:14:18,160 --> 00:14:20,720
with a redirection chain which is which

379
00:14:20,720 --> 00:14:22,000
is often hosted on

380
00:14:22,000 --> 00:14:23,920
you know trusted cloud services like

381
00:14:23,920 --> 00:14:25,279
amazon s3 or

382
00:14:25,279 --> 00:14:27,600
bitbucket or you know microsoft azure

383
00:14:27,600 --> 00:14:28,480
cloudflare

384
00:14:28,480 --> 00:14:31,600
and you know services like that

385
00:14:31,600 --> 00:14:34,079
and the next step in the exploit kit

386
00:14:34,079 --> 00:14:36,240
chain would be to trigger the exploit

387
00:14:36,240 --> 00:14:40,240
um but but in the current redirection

388
00:14:40,240 --> 00:14:41,920
i mean in the current driveway download

389
00:14:41,920 --> 00:14:44,320
um attack chain would be to trigger

390
00:14:44,320 --> 00:14:46,399
the automatic download using like a blob

391
00:14:46,399 --> 00:14:49,040
or or html smuggling

392
00:14:49,040 --> 00:14:52,399
and uh the last step which is a key

393
00:14:52,399 --> 00:14:53,600
differentiator is

394
00:14:53,600 --> 00:14:56,639
there is no user interaction involved

395
00:14:56,639 --> 00:15:00,079
in case of an exploit kit but

396
00:15:00,079 --> 00:15:01,680
the current drive by downloading

397
00:15:01,680 --> 00:15:04,160
mechanism requires user interaction to

398
00:15:04,160 --> 00:15:07,360
execute the download and this is where

399
00:15:07,360 --> 00:15:07,920
the whole

400
00:15:07,920 --> 00:15:10,560
social engineering tactics come into

401
00:15:10,560 --> 00:15:11,760
play

402
00:15:11,760 --> 00:15:14,880
where the attackers are you know using

403
00:15:14,880 --> 00:15:18,000
um fake updates

404
00:15:18,000 --> 00:15:20,079
where legitimate software application

405
00:15:20,079 --> 00:15:22,079
updates are masqueraded

406
00:15:22,079 --> 00:15:24,720
or coming up with themes like a fake

407
00:15:24,720 --> 00:15:25,760
google drive share

408
00:15:25,760 --> 00:15:27,279
and you know these are some of the

409
00:15:27,279 --> 00:15:29,279
example themes that we are seeing

410
00:15:29,279 --> 00:15:32,560
seeing with these campaigns

411
00:15:32,720 --> 00:15:36,320
um one note around you know browser

412
00:15:36,320 --> 00:15:38,160
security improvements around iframes

413
00:15:38,160 --> 00:15:40,880
that happened i believe last year

414
00:15:40,880 --> 00:15:43,040
sometime in july the chromium and

415
00:15:43,040 --> 00:15:44,480
firefox team

416
00:15:44,480 --> 00:15:46,880
has come up with some security controls

417
00:15:46,880 --> 00:15:47,680
over

418
00:15:47,680 --> 00:15:50,800
uh sandboxed iframes so

419
00:15:50,800 --> 00:15:53,920
essentially the sandbox attribute

420
00:15:53,920 --> 00:15:57,199
allows web developers to control what

421
00:15:57,199 --> 00:15:57,839
actions

422
00:15:57,839 --> 00:15:59,680
an iframe can perform like you know

423
00:15:59,680 --> 00:16:01,440
allowing downloads or

424
00:16:01,440 --> 00:16:04,560
running scripts etc

425
00:16:04,560 --> 00:16:07,199
so the security enhancements that were

426
00:16:07,199 --> 00:16:09,120
implemented by the chrome and firefox

427
00:16:09,120 --> 00:16:12,000
development team mainly protects um you

428
00:16:12,000 --> 00:16:12,399
know

429
00:16:12,399 --> 00:16:15,279
users against malvertising campaigns

430
00:16:15,279 --> 00:16:15,839
that

431
00:16:15,839 --> 00:16:17,759
can trigger automatic downloads from

432
00:16:17,759 --> 00:16:19,839
sandboxed iframes

433
00:16:19,839 --> 00:16:22,399
so we are seeing that attackers are

434
00:16:22,399 --> 00:16:23,759
working around this

435
00:16:23,759 --> 00:16:27,440
by not by avoiding or not using them

436
00:16:27,440 --> 00:16:28,880
advertising channel

437
00:16:28,880 --> 00:16:31,680
instead you know picking a watering hole

438
00:16:31,680 --> 00:16:32,399
scenario

439
00:16:32,399 --> 00:16:36,320
or common cloud services to plan the

440
00:16:36,320 --> 00:16:37,920
iframes

441
00:16:37,920 --> 00:16:39,680
which gives them the flexibility of

442
00:16:39,680 --> 00:16:42,000
defining the iframe attributes that they

443
00:16:42,000 --> 00:16:43,839
want

444
00:16:43,839 --> 00:16:46,959
and for example you know in a specific

445
00:16:46,959 --> 00:16:48,959
the drive by download campaign we

446
00:16:48,959 --> 00:16:50,160
observed a

447
00:16:50,160 --> 00:16:52,440
sandbox iframe that was posted on

448
00:16:52,440 --> 00:16:53,920
sites.google.com

449
00:16:53,920 --> 00:16:56,639
but the allowed downloads directive was

450
00:16:56,639 --> 00:16:57,199
actually

451
00:16:57,199 --> 00:17:00,320
set which allowed the attackers to

452
00:17:00,320 --> 00:17:02,800
trigger the download from the context of

453
00:17:02,800 --> 00:17:05,839
the iframe

454
00:17:06,319 --> 00:17:09,119
so uh next we want to talk about the

455
00:17:09,119 --> 00:17:09,679
sock

456
00:17:09,679 --> 00:17:13,199
golish framework um the sock

457
00:17:13,199 --> 00:17:15,119
in the sock garlic stands for social

458
00:17:15,119 --> 00:17:16,880
engineering and this

459
00:17:16,880 --> 00:17:19,839
this framework primarily targets um you

460
00:17:19,839 --> 00:17:20,160
know

461
00:17:20,160 --> 00:17:23,599
windows users and

462
00:17:23,599 --> 00:17:26,079
um this framework leverages all the

463
00:17:26,079 --> 00:17:27,119
aforementioned

464
00:17:27,119 --> 00:17:29,919
techniques and and you know it is used

465
00:17:29,919 --> 00:17:31,520
to trigger and deliver drive-by

466
00:17:31,520 --> 00:17:32,240
downloads

467
00:17:32,240 --> 00:17:35,120
to the endpoint

468
00:17:35,440 --> 00:17:38,559
usually this framework is used to

469
00:17:38,559 --> 00:17:42,720
drop you know ransomware

470
00:17:42,720 --> 00:17:44,320
remote access trojans that end up

471
00:17:44,320 --> 00:17:46,000
triggering ransomware infection chain

472
00:17:46,000 --> 00:17:47,440
using like standard

473
00:17:47,440 --> 00:17:50,799
uh living off the land binaries and

474
00:17:50,799 --> 00:17:53,360
and the downloaded file is usually a zip

475
00:17:53,360 --> 00:17:54,880
file that contains like an

476
00:17:54,880 --> 00:17:58,960
embedded lnk file or or a windows script

477
00:17:58,960 --> 00:18:01,840
file

478
00:18:04,640 --> 00:18:07,520
so we saw on the previous slide it is

479
00:18:07,520 --> 00:18:08,799
known to drop

480
00:18:08,799 --> 00:18:10,880
you know remote access trojans that can

481
00:18:10,880 --> 00:18:12,840
download additional malware like

482
00:18:12,840 --> 00:18:16,720
ransomware um in in a specific campaign

483
00:18:16,720 --> 00:18:19,440
uh sawgullish uh framework campaign we

484
00:18:19,440 --> 00:18:20,080
observed

485
00:18:20,080 --> 00:18:22,240
it was being used to drop uh you know

486
00:18:22,240 --> 00:18:24,080
drydex which is a well-known remote

487
00:18:24,080 --> 00:18:25,280
access trojan

488
00:18:25,280 --> 00:18:29,440
and um the drydex then uses tools like

489
00:18:29,440 --> 00:18:31,360
powershell empire to actually load

490
00:18:31,360 --> 00:18:33,520
doppel payment which is a ransomware

491
00:18:33,520 --> 00:18:34,799
family i think

492
00:18:34,799 --> 00:18:37,520
it was also used in the recent kia

493
00:18:37,520 --> 00:18:38,559
attacks where

494
00:18:38,559 --> 00:18:40,320
they had to pay like around 20 million

495
00:18:40,320 --> 00:18:41,840
dollars

496
00:18:41,840 --> 00:18:45,360
to remediate the attack um

497
00:18:45,360 --> 00:18:47,120
just just to give you an example of what

498
00:18:47,120 --> 00:18:48,640
are the themes that that

499
00:18:48,640 --> 00:18:51,440
saw garlic framework uses like you can

500
00:18:51,440 --> 00:18:52,799
see a fake

501
00:18:52,799 --> 00:18:56,160
google drive share or masquerading of a

502
00:18:56,160 --> 00:18:56,960
legitimate

503
00:18:56,960 --> 00:19:00,080
uh firefox browser update

504
00:19:00,080 --> 00:19:02,960
or you know fake microsoft teams update

505
00:19:02,960 --> 00:19:05,200
these are some of the common themes that

506
00:19:05,200 --> 00:19:09,280
we are seeing used by this framework

507
00:19:09,679 --> 00:19:13,120
so what are some of the challenges in um

508
00:19:13,120 --> 00:19:15,280
detecting this particular class of

509
00:19:15,280 --> 00:19:17,120
attacks right

510
00:19:17,120 --> 00:19:19,679
the first bucket is uh you know the

511
00:19:19,679 --> 00:19:20,320
technique

512
00:19:20,320 --> 00:19:22,559
of html smuggling and blogs where the

513
00:19:22,559 --> 00:19:24,320
payload is

514
00:19:24,320 --> 00:19:26,720
constructed on the client side this

515
00:19:26,720 --> 00:19:27,520
makes it

516
00:19:27,520 --> 00:19:30,960
quite difficult for network-based

517
00:19:30,960 --> 00:19:31,760
solutions

518
00:19:31,760 --> 00:19:34,400
that actually rely on http instructional

519
00:19:34,400 --> 00:19:35,919
headers to determine

520
00:19:35,919 --> 00:19:39,600
file downloads second bucket

521
00:19:39,600 --> 00:19:42,799
is the usage of social engineering

522
00:19:42,799 --> 00:19:45,360
tactics

523
00:19:46,000 --> 00:19:49,120
i think attackers are using wise

524
00:19:49,120 --> 00:19:51,280
social engineering tactics in an attempt

525
00:19:51,280 --> 00:19:52,960
to defeat uh

526
00:19:52,960 --> 00:19:55,200
detection systems and you know hiding

527
00:19:55,200 --> 00:19:57,760
behind trusted or known crowd service

528
00:19:57,760 --> 00:19:59,280
providers

529
00:19:59,280 --> 00:20:02,320
or masquerading legitimate application

530
00:20:02,320 --> 00:20:06,320
updates like microsoft teams for example

531
00:20:06,320 --> 00:20:09,840
the third bucket is the logging um

532
00:20:09,840 --> 00:20:13,039
visibly visibility aspect of it right so

533
00:20:13,039 --> 00:20:15,360
currently the log events on an endpoint

534
00:20:15,360 --> 00:20:16,080
for

535
00:20:16,080 --> 00:20:18,159
uh on a windows endpoint for you know

536
00:20:18,159 --> 00:20:20,000
blob downloads or downloads that

537
00:20:20,000 --> 00:20:21,760
originate from the iframes is quite

538
00:20:21,760 --> 00:20:23,520
inconsistent and probably even

539
00:20:23,520 --> 00:20:24,640
inaccurate

540
00:20:24,640 --> 00:20:27,120
and we will uh see an example of that in

541
00:20:27,120 --> 00:20:29,360
the later slide

542
00:20:29,360 --> 00:20:32,159
and since network solutions have poor

543
00:20:32,159 --> 00:20:33,120
visibility into

544
00:20:33,120 --> 00:20:35,440
blob based downloads there is heavy

545
00:20:35,440 --> 00:20:36,559
reliance on

546
00:20:36,559 --> 00:20:39,120
you know endpoint logs which means the

547
00:20:39,120 --> 00:20:40,400
download was probably

548
00:20:40,400 --> 00:20:42,080
already executed by the user on the

549
00:20:42,080 --> 00:20:43,450
endpoint at that stage

550
00:20:43,450 --> 00:20:45,919
[Music]

551
00:20:45,919 --> 00:20:49,840
um so the mitre attack perspective

552
00:20:49,840 --> 00:20:53,280
um the specific techniques that we spoke

553
00:20:53,280 --> 00:20:55,520
about to deliver drive-by downloads

554
00:20:55,520 --> 00:20:57,840
uh have been focused on the initial

555
00:20:57,840 --> 00:20:58,799
access phase

556
00:20:58,799 --> 00:21:01,200
of the miter attack uh corporate attack

557
00:21:01,200 --> 00:21:02,720
matrix

558
00:21:02,720 --> 00:21:05,200
and um you know there could be a

559
00:21:05,200 --> 00:21:05,919
specific

560
00:21:05,919 --> 00:21:08,960
sub technique defined for this specific

561
00:21:08,960 --> 00:21:10,880
class of private attacks but

562
00:21:10,880 --> 00:21:13,919
this technique 1189 drive by compromise

563
00:21:13,919 --> 00:21:16,880
does not have any uh sub techniques

564
00:21:16,880 --> 00:21:19,600
defined on the attack portal

565
00:21:19,600 --> 00:21:22,400
and these are some of the suggested uh

566
00:21:22,400 --> 00:21:23,600
logging telemetry

567
00:21:23,600 --> 00:21:25,200
that we could collect with specific to

568
00:21:25,200 --> 00:21:27,600
this attack web proxy logs

569
00:21:27,600 --> 00:21:30,480
um you know endpoint logs like uh the

570
00:21:30,480 --> 00:21:31,919
ones that mentioned

571
00:21:31,919 --> 00:21:33,760
which mostly applies to the post

572
00:21:33,760 --> 00:21:37,760
download execution phase

573
00:21:40,159 --> 00:21:41,760
so we briefly spoke about the

574
00:21:41,760 --> 00:21:43,280
discrepancy in

575
00:21:43,280 --> 00:21:46,559
in logging uh so i

576
00:21:46,559 --> 00:21:48,799
i just took a simple example of a sysmon

577
00:21:48,799 --> 00:21:51,280
event log that gets generated when a

578
00:21:51,280 --> 00:21:53,360
blob based file download happens on a

579
00:21:53,360 --> 00:21:56,000
browser in a windows endpoint

580
00:21:56,000 --> 00:21:58,640
in the first case you can see that uh

581
00:21:58,640 --> 00:21:59,919
the legacy edge

582
00:21:59,919 --> 00:22:02,720
is actually um does a good job at

583
00:22:02,720 --> 00:22:04,159
populating the right

584
00:22:04,159 --> 00:22:07,200
uh you know referrer url uh value uh

585
00:22:07,200 --> 00:22:09,679
where the domain from which the blob was

586
00:22:09,679 --> 00:22:10,240
served

587
00:22:10,240 --> 00:22:13,919
is is known and also the host url

588
00:22:13,919 --> 00:22:16,400
indicates that it was a blob but

589
00:22:16,400 --> 00:22:17,760
surprisingly

590
00:22:17,760 --> 00:22:20,159
more modern browsers like the chromium

591
00:22:20,159 --> 00:22:21,280
based edge

592
00:22:21,280 --> 00:22:23,120
and any chromium-based browsers are not

593
00:22:23,120 --> 00:22:24,880
reporting the referral url and the post

594
00:22:24,880 --> 00:22:26,799
url values correctly you can see it's

595
00:22:26,799 --> 00:22:29,200
like about client and about internet

596
00:22:29,200 --> 00:22:32,720
which is kind of a little vague when uh

597
00:22:32,720 --> 00:22:35,600
uh you know we somebody is trying to

598
00:22:35,600 --> 00:22:36,320
kind of

599
00:22:36,320 --> 00:22:38,400
connect the dots uh in a drive by

600
00:22:38,400 --> 00:22:41,520
download attack

601
00:22:41,520 --> 00:22:46,640
so how can we enhance logging visibility

602
00:22:46,640 --> 00:22:49,600
one approach would be to use you know

603
00:22:49,600 --> 00:22:51,760
extensions to detect drive by downloads

604
00:22:51,760 --> 00:22:54,000
i think this is a debatable topic

605
00:22:54,000 --> 00:22:55,679
because there has been a lot of

606
00:22:55,679 --> 00:22:57,919
security and privacy concerns around

607
00:22:57,919 --> 00:22:59,360
browser extension

608
00:22:59,360 --> 00:23:01,840
again there was a great talk in reset sf

609
00:23:01,840 --> 00:23:02,960
2020 by

610
00:23:02,960 --> 00:23:05,120
um i think the security team at lyft

611
00:23:05,120 --> 00:23:06,080
where they talk about

612
00:23:06,080 --> 00:23:09,120
chrome extension risks

613
00:23:09,120 --> 00:23:12,159
and extensions are not browser agnostic

614
00:23:12,159 --> 00:23:13,919
there is no like you know single

615
00:23:13,919 --> 00:23:15,919
extensions that can that can work on

616
00:23:15,919 --> 00:23:19,120
across different browsers so i think

617
00:23:19,120 --> 00:23:21,520
the solution would be to have a

618
00:23:21,520 --> 00:23:22,480
consistent

619
00:23:22,480 --> 00:23:24,720
download event log reporting across

620
00:23:24,720 --> 00:23:26,640
different browsers

621
00:23:26,640 --> 00:23:28,960
which can then be leveraged by standard

622
00:23:28,960 --> 00:23:30,000
endpoint

623
00:23:30,000 --> 00:23:32,720
um you know logging tools like sysmon or

624
00:23:32,720 --> 00:23:34,080
osquery where

625
00:23:34,080 --> 00:23:36,240
the additional context or the metadata

626
00:23:36,240 --> 00:23:37,679
around the download is reported

627
00:23:37,679 --> 00:23:40,320
accurately

628
00:23:41,279 --> 00:23:44,320
uh with that i think we have reached to

629
00:23:44,320 --> 00:23:45,120
the

630
00:23:45,120 --> 00:23:48,000
conclusion some of the key takeaways are

631
00:23:48,000 --> 00:23:49,120
you know using a

632
00:23:49,120 --> 00:23:52,559
a very a layered security approach is

633
00:23:52,559 --> 00:23:55,760
uh probably helpful um um you know

634
00:23:55,760 --> 00:23:57,520
having logging telemetry across the

635
00:23:57,520 --> 00:23:58,960
different layers where

636
00:23:58,960 --> 00:24:01,520
each time user visits a website from the

637
00:24:01,520 --> 00:24:02,080
time

638
00:24:02,080 --> 00:24:03,919
the drive by download gets to the end

639
00:24:03,919 --> 00:24:07,039
point um that is before the execution

640
00:24:07,039 --> 00:24:09,760
secondly creating social engineering

641
00:24:09,760 --> 00:24:10,799
awareness

642
00:24:10,799 --> 00:24:12,799
of you know watering whole attacks and

643
00:24:12,799 --> 00:24:15,200
the common themes that are being used

644
00:24:15,200 --> 00:24:18,559
by these campaigns i think go

645
00:24:18,559 --> 00:24:21,039
fish is a is a great open source tool

646
00:24:21,039 --> 00:24:22,000
that could be

647
00:24:22,000 --> 00:24:24,400
uh that could potentially be customized

648
00:24:24,400 --> 00:24:25,520
to used for

649
00:24:25,520 --> 00:24:28,080
creating awareness about uh such class

650
00:24:28,080 --> 00:24:29,679
of attacks

651
00:24:29,679 --> 00:24:32,640
and lastly you know for red team and

652
00:24:32,640 --> 00:24:33,520
blue teams

653
00:24:33,520 --> 00:24:35,520
it might be useful for red teaming's uh

654
00:24:35,520 --> 00:24:37,200
red team to include this

655
00:24:37,200 --> 00:24:38,880
these specific techniques in their tool

656
00:24:38,880 --> 00:24:41,360
arsenal and you know blue teams can

657
00:24:41,360 --> 00:24:42,400
probably come up

658
00:24:42,400 --> 00:24:44,960
with a playbook on defending and getting

659
00:24:44,960 --> 00:24:47,200
more visibility into the specific attack

660
00:24:47,200 --> 00:24:49,440
chain

661
00:24:50,159 --> 00:24:52,320
with that you know that brings us to the

662
00:24:52,320 --> 00:24:53,840
end of the presentation and would be

663
00:24:53,840 --> 00:24:56,960
happy to take any questions

664
00:24:56,960 --> 00:24:58,799
so thank you very much for that

665
00:24:58,799 --> 00:25:00,799
christian and it was very insightful

666
00:25:00,799 --> 00:25:02,080
very informative

667
00:25:02,080 --> 00:25:04,960
and i don't think we have any questions

668
00:25:04,960 --> 00:25:07,679
and i just want to check now

669
00:25:07,679 --> 00:25:11,200
and no there's no questions there

670
00:25:11,200 --> 00:25:14,559
um okay so um yeah

671
00:25:14,559 --> 00:25:16,480
i think we will wrap it up then if

672
00:25:16,480 --> 00:25:18,559
that's okay and so thank you very much

673
00:25:18,559 --> 00:25:18,960
for

674
00:25:18,960 --> 00:25:21,039
taking the time and to talk today it's

675
00:25:21,039 --> 00:25:22,799
greatly appreciated it's very

676
00:25:22,799 --> 00:25:25,200
interesting talk as well and so thank

677
00:25:25,200 --> 00:25:26,960
you very much again for that

678
00:25:26,960 --> 00:25:28,320
thank you thank you everyone for the

679
00:25:28,320 --> 00:25:30,400
time um you know it's truly been an

680
00:25:30,400 --> 00:25:30,799
honor

681
00:25:30,799 --> 00:25:32,960
uh speaking at this besides dublin event

682
00:25:32,960 --> 00:25:34,080
and i would like to thank

683
00:25:34,080 --> 00:25:35,679
you know the besides dublin team for

684
00:25:35,679 --> 00:25:38,159
giving me this opportunity to present

685
00:25:38,159 --> 00:25:40,320
uh please do hit me up on twitter or

686
00:25:40,320 --> 00:25:41,279
linkedin if

687
00:25:41,279 --> 00:25:43,760
there are any questions please take care

688
00:25:43,760 --> 00:25:53,039
and stay safe thank you

