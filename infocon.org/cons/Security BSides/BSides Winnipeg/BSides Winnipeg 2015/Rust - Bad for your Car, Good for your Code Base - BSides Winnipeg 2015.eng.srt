1
00:00:00,199 --> 00:00:07,020
<font color="#E5E5E5">okay thanks Mac so as Mac said my name</font>

2
00:00:04,950 --> 00:00:10,320
is<font color="#E5E5E5"> Ben and today I'm here to talk to you</font>

3
00:00:07,020 --> 00:00:11,700
about rust so that's<font color="#E5E5E5"> not the rust you</font>

4
00:00:10,320 --> 00:00:15,660
see on your car this is actually the

5
00:00:11,700 --> 00:00:17,189
programming language rust so just<font color="#E5E5E5"> my</font>

6
00:00:15,660 --> 00:00:20,009
curiosity has anybody here heard of rest

7
00:00:17,190 --> 00:00:24,510
before how many<font color="#CCCCCC"> people here have used</font>

8
00:00:20,010 --> 00:00:28,349
rest ok a few<font color="#E5E5E5"> and how</font><font color="#CCCCCC"> about C or C++</font>

9
00:00:24,510 --> 00:00:29,369
those kind of languages and how many<font color="#E5E5E5"> of</font>

10
00:00:28,349 --> 00:00:33,329
<font color="#E5E5E5">you are willing to respond to my</font>

11
00:00:29,369 --> 00:00:36,239
<font color="#E5E5E5">questions cool got a baseline</font><font color="#CCCCCC"> set all</font>

12
00:00:33,329 --> 00:00:38,120
<font color="#CCCCCC">right so we've got a bit of</font><font color="#E5E5E5"> a short time</font>

13
00:00:36,239 --> 00:00:40,500
slot so I'm going to<font color="#E5E5E5"> try</font><font color="#CCCCCC"> and get as much</font>

14
00:00:38,120 --> 00:00:44,309
clarity through as possible perhaps the

15
00:00:40,500 --> 00:00:45,719
sacrifice at correctness so bear with me

16
00:00:44,309 --> 00:00:47,280
for that and at the end of<font color="#E5E5E5"> the talk</font>

17
00:00:45,719 --> 00:00:48,539
there's no time for<font color="#CCCCCC"> questions and</font><font color="#E5E5E5"> you</font>

18
00:00:47,280 --> 00:00:49,920
can cut<font color="#E5E5E5"> me down after during the</font>

19
00:00:48,539 --> 00:00:54,300
conference and<font color="#E5E5E5"> I'll be happy to talk to</font>

20
00:00:49,920 --> 00:00:55,980
you more about rust so I'm<font color="#CCCCCC"> going to for</font>

21
00:00:54,300 --> 00:00:57,718
<font color="#E5E5E5">the sake of clarity I'm going to try and</font>

22
00:00:55,980 --> 00:00:59,819
avoid any code snippets I'm going to

23
00:00:57,719 --> 00:01:01,440
talk<font color="#E5E5E5"> about the core concepts but just as</font>

24
00:00:59,820 --> 00:01:06,780
a warning<font color="#CCCCCC"> i'm</font><font color="#E5E5E5"> going to talk a little bit</font>

25
00:01:01,440 --> 00:01:14,429
about memory management stuff so what is

26
00:01:06,780 --> 00:01:18,450
<font color="#E5E5E5">your warning so first of all what is</font>

27
00:01:14,430 --> 00:01:20,400
rust rust is a compiled language out and

28
00:01:18,450 --> 00:01:23,070
it's fairly<font color="#CCCCCC"> new the one point</font><font color="#E5E5E5"> 0 version</font>

29
00:01:20,400 --> 00:01:24,689
of rush just came out this past May it

30
00:01:23,070 --> 00:01:26,449
<font color="#E5E5E5">was created by Mozilla with the</font>

31
00:01:24,689 --> 00:01:29,610
intention of using it for their new

32
00:01:26,450 --> 00:01:31,020
browser rendering engine servo although

33
00:01:29,610 --> 00:01:32,640
right now rust is largely being driven

34
00:01:31,020 --> 00:01:34,229
by the community it's a very strong

35
00:01:32,640 --> 00:01:38,070
community that is driving the growth of

36
00:01:34,229 --> 00:01:39,390
the language and rust is a systems

37
00:01:38,070 --> 00:01:40,889
programming language which means it

38
00:01:39,390 --> 00:01:43,770
gives you a high level<font color="#E5E5E5"> of control which</font>

39
00:01:40,890 --> 00:01:45,299
is kind<font color="#E5E5E5"> of like</font><font color="#CCCCCC"> the C C++ languages but</font>

40
00:01:43,770 --> 00:01:46,798
it also provides you a high level<font color="#E5E5E5"> of</font>

41
00:01:45,299 --> 00:01:48,390
safety which I'm told<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit more</font>

42
00:01:46,799 --> 00:01:51,060
like Haskell on that end of the spectrum

43
00:01:48,390 --> 00:01:52,799
for languages I not only does it provide

44
00:01:51,060 --> 00:01:54,720
you that safety it does so at compile

45
00:01:52,799 --> 00:01:56,159
time so if you do anything<font color="#E5E5E5"> weird it's</font>

46
00:01:54,720 --> 00:01:57,990
going<font color="#E5E5E5"> to tell you right at the compiler</font>

47
00:01:56,159 --> 00:02:00,960
that you know this<font color="#E5E5E5"> line of code is bad</font>

48
00:01:57,990 --> 00:02:02,789
please change this and I can do all<font color="#CCCCCC"> that</font>

49
00:02:00,960 --> 00:02:05,210
without necessarily using a runtime

50
00:02:02,790 --> 00:02:07,430
regard right here which is pretty sweet

51
00:02:05,210 --> 00:02:09,139
so as I mentioned languages typically

52
00:02:07,430 --> 00:02:10,880
fall on<font color="#E5E5E5"> one end of the spectrum of out</font>

53
00:02:09,139 --> 00:02:12,619
of control or safety maybe somewhere in

54
00:02:10,880 --> 00:02:14,890
<font color="#E5E5E5">between but typically there's some</font>

55
00:02:12,620 --> 00:02:19,280
pretty strong<font color="#CCCCCC"> trade-offs and with rust</font>

56
00:02:14,890 --> 00:02:21,559
we encompass all the control and all the

57
00:02:19,280 --> 00:02:25,489
safety all in one language at once which

58
00:02:21,560 --> 00:02:27,560
is pretty<font color="#E5E5E5"> awesome so there's a ton of</font>

59
00:02:25,489 --> 00:02:29,330
awesome features<font color="#E5E5E5"> in rust but again this</font>

60
00:02:27,560 --> 00:02:31,060
is<font color="#E5E5E5"> a short talk so I'm not</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to get</font>

61
00:02:29,330 --> 00:02:32,900
into everything there's things like

62
00:02:31,060 --> 00:02:35,030
variables must be initialized when you

63
00:02:32,900 --> 00:02:37,459
declare them variables<font color="#E5E5E5"> are immutable by</font>

64
00:02:35,030 --> 00:02:40,010
<font color="#E5E5E5">defaults there's no concept of</font><font color="#CCCCCC"> know and</font>

65
00:02:37,459 --> 00:02:42,769
there's a huge list of really awesome

66
00:02:40,010 --> 00:02:45,980
things and rust and I'm not going<font color="#E5E5E5"> to get</font>

67
00:02:42,769 --> 00:02:47,810
into all of these but I am going to talk

68
00:02:45,980 --> 00:02:50,329
about one thing in rust that<font color="#E5E5E5"> is</font>

69
00:02:47,810 --> 00:02:52,459
particularly awesome and that is<font color="#CCCCCC"> the</font>

70
00:02:50,330 --> 00:02:53,959
concept<font color="#CCCCCC"> of ownership and the ownership</font>

71
00:02:52,459 --> 00:02:55,670
system<font color="#E5E5E5"> in rust is really what gives you</font>

72
00:02:53,959 --> 00:02:57,500
all that safety at compile time and it's

73
00:02:55,670 --> 00:03:01,369
used or a lot of those<font color="#E5E5E5"> other features i</font>

74
00:02:57,500 --> 00:03:03,830
mentioned as well so this ownership

75
00:03:01,370 --> 00:03:06,769
model really helps you guarantee of a

76
00:03:03,830 --> 00:03:08,660
high level of memory safety in rust and

77
00:03:06,769 --> 00:03:10,010
so there's various bugs that can come up

78
00:03:08,660 --> 00:03:12,290
if you don't<font color="#E5E5E5"> manage your memory properly</font>

79
00:03:10,010 --> 00:03:14,810
in various languages things like

80
00:03:12,290 --> 00:03:17,590
dangling pointers buffer over reads data

81
00:03:14,810 --> 00:03:19,790
races seg faults that kind of stuff<font color="#E5E5E5"> and</font>

82
00:03:17,590 --> 00:03:21,500
rust can essentially eliminate a bunch

83
00:03:19,790 --> 00:03:24,609
<font color="#E5E5E5">of these things just by having its</font>

84
00:03:21,500 --> 00:03:26,510
ownership system active in the compiler

85
00:03:24,610 --> 00:03:28,850
so why don't we quickly go through an

86
00:03:26,510 --> 00:03:31,160
example<font color="#E5E5E5"> of how one of these bugs might</font>

87
00:03:28,850 --> 00:03:34,900
occur we'll use<font color="#E5E5E5"> the dangling pointer as</font>

88
00:03:31,160 --> 00:03:37,190
an example and so you can imagine this

89
00:03:34,900 --> 00:03:40,700
example is written in something like C++

90
00:03:37,190 --> 00:03:43,880
we're<font color="#E5E5E5"> going to create a vector which is</font>

91
00:03:40,700 --> 00:03:46,238
<font color="#CCCCCC">a global array of data and so on the</font>

92
00:03:43,880 --> 00:03:49,640
left in<font color="#CCCCCC"> the gray we have our stack</font>

93
00:03:46,239 --> 00:03:51,950
memory we've got a pointer pointing to

94
00:03:49,640 --> 00:03:53,298
our heap allocated array and<font color="#E5E5E5"> then we've</font>

95
00:03:51,950 --> 00:03:55,880
got our size and the<font color="#E5E5E5"> length of data</font>

96
00:03:53,299 --> 00:03:57,380
that's<font color="#E5E5E5"> used in that array so it's all</font>

97
00:03:55,880 --> 00:03:59,180
you<font color="#CCCCCC"> know pretty</font><font color="#E5E5E5"> straightforward so far</font>

98
00:03:57,380 --> 00:04:00,560
now let's say<font color="#E5E5E5"> we want to pass this</font>

99
00:03:59,180 --> 00:04:02,030
<font color="#E5E5E5">vector we've created into another</font>

100
00:04:00,560 --> 00:04:04,489
function so when we do this we're going

101
00:04:02,030 --> 00:04:07,459
to copy our stack memory into the<font color="#E5E5E5"> memory</font>

102
00:04:04,489 --> 00:04:08,900
context of the function and that pointer

103
00:04:07,459 --> 00:04:10,790
is pointing the same<font color="#E5E5E5"> place in the heap</font>

104
00:04:08,900 --> 00:04:12,530
so we're sharing that memory the heap

105
00:04:10,790 --> 00:04:13,850
memory which could be you know two

106
00:04:12,530 --> 00:04:15,650
pieces<font color="#E5E5E5"> of data</font><font color="#CCCCCC"> could be two million</font>

107
00:04:13,850 --> 00:04:17,899
pieces<font color="#E5E5E5"> of data doesn't really matter the</font>

108
00:04:15,650 --> 00:04:18,858
copying action is the same size which

109
00:04:17,899 --> 00:04:20,060
makes it really<font color="#E5E5E5"> fast</font>

110
00:04:18,858 --> 00:04:22,188
and this is the same<font color="#CCCCCC"> kind of thing that</font>

111
00:04:20,060 --> 00:04:24,110
rust does but<font color="#E5E5E5"> again we're just focusing</font>

112
00:04:22,189 --> 00:04:26,960
on how the bug would occur in<font color="#E5E5E5"> C++ for</font>

113
00:04:24,110 --> 00:04:29,030
now so what happens if we try<font color="#CCCCCC"> and push</font>

114
00:04:26,960 --> 00:04:30,318
some data onto our vector we've got<font color="#E5E5E5"> to</font>

115
00:04:29,030 --> 00:04:32,688
reallocate our space because you didn't

116
00:04:30,319 --> 00:04:34,669
<font color="#E5E5E5">have enough free room so we've</font>

117
00:04:32,689 --> 00:04:36,379
deallocated the original memory and now

118
00:04:34,669 --> 00:04:39,289
we've got a new chunk of memory that<font color="#E5E5E5"> our</font>

119
00:04:36,379 --> 00:04:41,449
current stack is pointing to now what

120
00:04:39,289 --> 00:04:44,270
<font color="#CCCCCC">happens when this function returns our</font>

121
00:04:41,449 --> 00:04:46,189
stack goes away but<font color="#E5E5E5"> our heap that we've</font>

122
00:04:44,270 --> 00:04:48,289
now really reallocated is just<font color="#E5E5E5"> floating</font>

123
00:04:46,189 --> 00:04:50,509
there we've got<font color="#CCCCCC"> a memory</font><font color="#E5E5E5"> leak and now</font>

124
00:04:48,289 --> 00:04:52,520
<font color="#E5E5E5">our original context has our pointer</font>

125
00:04:50,509 --> 00:04:55,099
pointing into freed memory and so we're

126
00:04:52,520 --> 00:04:58,008
going<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> a bug there so this is</font>

127
00:04:55,099 --> 00:05:04,099
<font color="#E5E5E5">exactly what the rust ownership system</font>

128
00:04:58,009 --> 00:05:06,590
is trying to avoid so ownership system I

129
00:05:04,099 --> 00:05:08,688
like<font color="#E5E5E5"> to describe the ownership system</font>

130
00:05:06,590 --> 00:05:10,369
and rust sort of<font color="#E5E5E5"> like how a person might</font>

131
00:05:08,689 --> 00:05:13,400
<font color="#E5E5E5">own something so let's go</font><font color="#CCCCCC"> through an</font>

132
00:05:10,370 --> 00:05:17,659
example like that let's talk about how

133
00:05:13,400 --> 00:05:19,039
someone might own say a painting so if

134
00:05:17,659 --> 00:05:20,270
you own a painting you're totally

135
00:05:19,039 --> 00:05:21,830
allowed<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at it whenever you</font><font color="#CCCCCC"> want</font>

136
00:05:20,270 --> 00:05:24,409
and you're totally allowed to<font color="#E5E5E5"> modify it</font>

137
00:05:21,830 --> 00:05:26,389
<font color="#E5E5E5">if you want I didn't like the scenery</font>

138
00:05:24,409 --> 00:05:29,870
being just regular scenery so let's

139
00:05:26,389 --> 00:05:31,550
throw a monster in<font color="#E5E5E5"> there so when you own</font>

140
00:05:29,870 --> 00:05:33,080
something you're totally free to give

141
00:05:31,550 --> 00:05:35,150
that to somebody<font color="#E5E5E5"> else and grant them</font>

142
00:05:33,080 --> 00:05:37,279
<font color="#E5E5E5">ownership over it and then it's no</font>

143
00:05:35,150 --> 00:05:39,770
longer yours so we introduce a third

144
00:05:37,279 --> 00:05:41,300
<font color="#E5E5E5">party here give them the painting and</font>

145
00:05:39,770 --> 00:05:42,740
now I'm not<font color="#CCCCCC"> allowed to do anything with</font>

146
00:05:41,300 --> 00:05:46,279
it unless I get strict permission from

147
00:05:42,740 --> 00:05:48,199
this new person<font color="#E5E5E5"> if I go</font><font color="#CCCCCC"> away the</font>

148
00:05:46,279 --> 00:05:51,680
painting<font color="#CCCCCC"> is still with you with the new</font>

149
00:05:48,199 --> 00:05:53,629
owner and<font color="#CCCCCC"> everything's fine and if</font><font color="#E5E5E5"> this</font>

150
00:05:51,680 --> 00:05:55,279
owner goes away then the painting is

151
00:05:53,629 --> 00:05:57,400
immediately destroyed just<font color="#CCCCCC"> like in real</font>

152
00:05:55,279 --> 00:05:57,400
<font color="#E5E5E5">life</font>

153
00:05:58,110 --> 00:06:03,120
so this<font color="#E5E5E5"> is essentially what happens in</font>

154
00:06:01,080 --> 00:06:04,590
rest as soon<font color="#E5E5E5"> as an owner goes away then</font>

155
00:06:03,120 --> 00:06:06,870
the<font color="#E5E5E5"> memory that is allocated with that</font>

156
00:06:04,590 --> 00:06:09,090
that owner as also goes away at<font color="#E5E5E5"> the</font>

157
00:06:06,870 --> 00:06:10,590
exact same time the compiler is able to

158
00:06:09,090 --> 00:06:13,340
detect<font color="#E5E5E5"> when something goes away and</font>

159
00:06:10,590 --> 00:06:17,159
immediately inserts that memory freeing

160
00:06:13,340 --> 00:06:19,320
call and so in languages like C++ you

161
00:06:17,160 --> 00:06:21,390
have to specifically free memory when

162
00:06:19,320 --> 00:06:23,130
you're done<font color="#CCCCCC"> with it which can lead to</font>

163
00:06:21,390 --> 00:06:25,409
you forgetting or are you<font color="#E5E5E5"> doing it twice</font>

164
00:06:23,130 --> 00:06:27,000
and causing bugs that way and rust just

165
00:06:25,410 --> 00:06:28,650
kind of does<font color="#CCCCCC"> that all for you but it</font>

166
00:06:27,000 --> 00:06:30,420
gives you the same<font color="#E5E5E5"> kind of speed</font><font color="#CCCCCC"> of a</font>

167
00:06:28,650 --> 00:06:34,979
program as<font color="#E5E5E5"> you would if you had written</font>

168
00:06:30,420 --> 00:06:36,180
it manually which is pretty great this

169
00:06:34,980 --> 00:06:41,850
also use the advantage<font color="#CCCCCC"> that you don't</font>

170
00:06:36,180 --> 00:06:43,710
need<font color="#E5E5E5"> to have a garbage collector so with</font>

171
00:06:41,850 --> 00:06:44,850
a garbage<font color="#E5E5E5"> collector it keeps you from</font>

172
00:06:43,710 --> 00:06:47,549
having to write all that manual code

173
00:06:44,850 --> 00:06:48,960
which<font color="#CCCCCC"> is one good thing but the memory</font>

174
00:06:47,550 --> 00:06:50,400
doesn't get freed immediately and so

175
00:06:48,960 --> 00:06:52,080
that can sit<font color="#CCCCCC"> there and have</font><font color="#E5E5E5"> a little bit</font>

176
00:06:50,400 --> 00:06:54,330
of a leak temporarily and then it might

177
00:06:52,080 --> 00:06:56,039
<font color="#E5E5E5">the runtime might go ahead and start</font>

178
00:06:54,330 --> 00:06:58,380
clearing away the code are the<font color="#E5E5E5"> the</font>

179
00:06:56,040 --> 00:06:59,220
memory i should say when you're<font color="#E5E5E5"> trying</font>

180
00:06:58,380 --> 00:07:01,380
<font color="#E5E5E5">to do something that's maybe a little</font>

181
00:06:59,220 --> 00:07:02,550
bit more tight with timing and so by

182
00:07:01,380 --> 00:07:03,750
having it cleared right away you know

183
00:07:02,550 --> 00:07:05,130
that this is always<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to happen</font>

184
00:07:03,750 --> 00:07:07,320
right<font color="#E5E5E5"> here nothing's going to get</font>

185
00:07:05,130 --> 00:07:11,250
interrupted at a bad point so that's

186
00:07:07,320 --> 00:07:13,080
pretty<font color="#E5E5E5"> great so now they're probably</font>

187
00:07:11,250 --> 00:07:14,490
times when you might own<font color="#E5E5E5"> something and</font>

188
00:07:13,080 --> 00:07:15,930
you might<font color="#E5E5E5"> want to lend it out to</font>

189
00:07:14,490 --> 00:07:17,310
somebody and then still have ownership

190
00:07:15,930 --> 00:07:19,740
so you can have it again later<font color="#E5E5E5"> on</font>

191
00:07:17,310 --> 00:07:21,300
because you still want<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> it so rust</font>

192
00:07:19,740 --> 00:07:23,730
has a system that takes care of this too

193
00:07:21,300 --> 00:07:26,340
it's called the borrowing system in

194
00:07:23,730 --> 00:07:27,840
languages like C++ it does very similar

195
00:07:26,340 --> 00:07:32,520
things with<font color="#E5E5E5"> just function pointers or</font>

196
00:07:27,840 --> 00:07:33,659
sorry memory pointers and rust has the

197
00:07:32,520 --> 00:07:35,460
same concept but it's a<font color="#E5E5E5"> little bit</font>

198
00:07:33,660 --> 00:07:37,740
stricter when the get when the compiler

199
00:07:35,460 --> 00:07:39,659
get stands on it there's two different

200
00:07:37,740 --> 00:07:41,670
types of<font color="#E5E5E5"> borrows in rust which is where</font>

201
00:07:39,660 --> 00:07:43,710
it can differs from C++ you can have a

202
00:07:41,670 --> 00:07:47,190
mutable pointer or<font color="#E5E5E5"> a mutable borrow and</font>

203
00:07:43,710 --> 00:07:49,620
it's also a shared borrow and so let's

204
00:07:47,190 --> 00:07:53,280
<font color="#E5E5E5">get into what those two things are let</font>

205
00:07:49,620 --> 00:07:55,410
start with the mutable borrow so when

206
00:07:53,280 --> 00:07:57,000
you have<font color="#E5E5E5"> your painting let's say you</font>

207
00:07:55,410 --> 00:07:58,620
want<font color="#E5E5E5"> to loan it out to somebody and you</font>

208
00:07:57,000 --> 00:07:59,640
want them<font color="#E5E5E5"> to be able to modify it so in</font>

209
00:07:58,620 --> 00:08:01,590
this case we're going<font color="#E5E5E5"> to maybe give it</font>

210
00:07:59,640 --> 00:08:03,090
to someone who specializes in restoring

211
00:08:01,590 --> 00:08:04,619
paintings someone's got unpainted

212
00:08:03,090 --> 00:08:06,119
monsters all over our<font color="#CCCCCC"> painting</font><font color="#E5E5E5"> so we're</font>

213
00:08:04,620 --> 00:08:09,060
going<font color="#E5E5E5"> to see if they can fix it up</font><font color="#CCCCCC"> for</font>

214
00:08:06,120 --> 00:08:11,399
us so we're going to lend out our

215
00:08:09,060 --> 00:08:13,930
painting to this restoration specialist

216
00:08:11,399 --> 00:08:15,789
once I've loaned it out I no<font color="#E5E5E5"> longer have</font>

217
00:08:13,930 --> 00:08:18,490
access to the<font color="#E5E5E5"> painting I can't look at</font>

218
00:08:15,789 --> 00:08:19,688
<font color="#CCCCCC">it I can't modify it the person who's</font>

219
00:08:18,490 --> 00:08:20,860
restoring it doesn't like people working

220
00:08:19,689 --> 00:08:22,990
it doesn't like people looking over

221
00:08:20,860 --> 00:08:25,990
shoulder while he's working so I'm sure

222
00:08:22,990 --> 00:08:28,330
we all get that so he's working on this

223
00:08:25,990 --> 00:08:30,069
<font color="#CCCCCC">thing we can't touch</font><font color="#E5E5E5"> it but if he wants</font>

224
00:08:28,330 --> 00:08:32,019
<font color="#CCCCCC">he can now pass it off to somebody else</font>

225
00:08:30,069 --> 00:08:34,029
and then they can modify it let's say he

226
00:08:32,019 --> 00:08:35,948
needs someone to reframe the painting he

227
00:08:34,029 --> 00:08:37,509
can't do<font color="#CCCCCC"> that so he's gonna pass it off</font>

228
00:08:35,948 --> 00:08:38,769
to someone who can<font color="#E5E5E5"> reframe it and then</font>

229
00:08:37,509 --> 00:08:41,949
he can<font color="#E5E5E5"> no longer work with the painting</font>

230
00:08:38,769 --> 00:08:43,899
either and<font color="#E5E5E5"> eventually the framer is done</font>

231
00:08:41,948 --> 00:08:46,300
with it it goes back<font color="#CCCCCC"> to the restoration</font>

232
00:08:43,899 --> 00:08:48,399
person they leave and we got our

233
00:08:46,300 --> 00:08:51,008
painting back and then we're free to do

234
00:08:48,399 --> 00:08:54,069
what we want with it<font color="#E5E5E5"> again so that's</font><font color="#CCCCCC"> all</font>

235
00:08:51,009 --> 00:08:56,019
pretty straightforward mm-hmm so now

236
00:08:54,069 --> 00:08:59,290
let's talk<font color="#E5E5E5"> about the shared borrow and</font>

237
00:08:56,019 --> 00:09:01,720
rust so let's<font color="#E5E5E5"> say we want to give our</font>

238
00:08:59,290 --> 00:09:03,579
memory out to multiple places at once

239
00:09:01,720 --> 00:09:06,399
and they all<font color="#CCCCCC"> want to read from it and do</font>

240
00:09:03,579 --> 00:09:09,219
different things that's what this will

241
00:09:06,399 --> 00:09:11,079
help us solve so in the painting example

242
00:09:09,220 --> 00:09:11,889
we have our painting and we want to

243
00:09:11,079 --> 00:09:14,199
share<font color="#CCCCCC"> it with a whole bunch of</font><font color="#E5E5E5"> our</font>

244
00:09:11,889 --> 00:09:16,269
friends and so we can put it<font color="#E5E5E5"> on display</font>

245
00:09:14,199 --> 00:09:17,769
on<font color="#CCCCCC"> the wall and we can fight people over</font>

246
00:09:16,269 --> 00:09:19,990
and if they<font color="#E5E5E5"> want they can invite more</font>

247
00:09:17,769 --> 00:09:21,100
people over and<font color="#E5E5E5"> eventually there's a</font>

248
00:09:19,990 --> 00:09:22,329
whole bunch<font color="#CCCCCC"> of people there that are</font>

249
00:09:21,100 --> 00:09:24,310
coming<font color="#E5E5E5"> and looking at our painting and</font>

250
00:09:22,329 --> 00:09:25,479
it's great they can all look<font color="#E5E5E5"> at it all</font>

251
00:09:24,310 --> 00:09:27,729
at once it's not gonna cause any issues

252
00:09:25,480 --> 00:09:29,380
the painting is hanging on<font color="#E5E5E5"> the wall it's</font>

253
00:09:27,730 --> 00:09:31,690
out of reach so no one's able to mess

254
00:09:29,380 --> 00:09:32,949
with it and so that's essentially what

255
00:09:31,690 --> 00:09:35,350
the rest compiler does here<font color="#E5E5E5"> too it</font>

256
00:09:32,949 --> 00:09:37,569
allows you to share<font color="#E5E5E5"> things out if you're</font>

257
00:09:35,350 --> 00:09:39,550
<font color="#CCCCCC">sharing it out in a broad sense then</font><font color="#E5E5E5"> it</font>

258
00:09:37,569 --> 00:09:41,050
will prevent anything from modifying it

259
00:09:39,550 --> 00:09:44,079
and causing issues with someone else

260
00:09:41,050 --> 00:09:47,229
<font color="#CCCCCC">that might be reading</font><font color="#E5E5E5"> it now the</font>

261
00:09:44,079 --> 00:09:51,638
<font color="#E5E5E5">difference where these two</font><font color="#CCCCCC"> borrows are</font>

262
00:09:47,230 --> 00:09:53,019
differing different from C++ is in C++

263
00:09:51,639 --> 00:09:55,930
both those borrowers kind of happen at

264
00:09:53,019 --> 00:09:57,250
once so it's kind of<font color="#E5E5E5"> like having your</font>

265
00:09:55,930 --> 00:09:58,388
painting but instead of hanging<font color="#E5E5E5"> on the</font>

266
00:09:57,250 --> 00:10:00,760
wall you're just<font color="#E5E5E5"> gonna throw it</font><font color="#CCCCCC"> on the</font>

267
00:09:58,389 --> 00:10:01,779
floor in front of<font color="#CCCCCC"> everybody</font><font color="#E5E5E5"> and as they</font>

268
00:10:00,760 --> 00:10:03,699
walk in you're<font color="#E5E5E5"> going to hand them all</font>

269
00:10:01,779 --> 00:10:05,709
spray paint and then you're going to

270
00:10:03,699 --> 00:10:08,290
<font color="#E5E5E5">walk out and hope that they</font><font color="#CCCCCC"> just do the</font>

271
00:10:05,709 --> 00:10:09,550
right thing and so in those languages

272
00:10:08,290 --> 00:10:12,969
there's no guarantee that anything

273
00:10:09,550 --> 00:10:15,069
correct is going to happen so it's all

274
00:10:12,970 --> 00:10:16,660
<font color="#CCCCCC">up to the developer having strict</font>

275
00:10:15,069 --> 00:10:19,060
guidelines and patterns that they can

276
00:10:16,660 --> 00:10:20,560
follow meanwhile in rust all of these

277
00:10:19,060 --> 00:10:22,239
patterns are codified and they're in the

278
00:10:20,560 --> 00:10:22,839
compiler and they're guaranteed to run

279
00:10:22,240 --> 00:10:24,850
every<font color="#E5E5E5"> time you</font>

280
00:10:22,840 --> 00:10:28,090
your compiler and if it doesn't work<font color="#CCCCCC"> you</font>

281
00:10:24,850 --> 00:10:29,710
don't<font color="#E5E5E5"> get a binary so it's very very</font>

282
00:10:28,090 --> 00:10:31,660
nice you get<font color="#E5E5E5"> that very quick feedback</font>

283
00:10:29,710 --> 00:10:37,090
<font color="#CCCCCC">and no bugs get introduced into the</font>

284
00:10:31,660 --> 00:10:38,140
<font color="#E5E5E5">actual published code so let's take what</font>

285
00:10:37,090 --> 00:10:41,080
we've learned about<font color="#E5E5E5"> borrowing and</font>

286
00:10:38,140 --> 00:10:43,240
ownership and see<font color="#CCCCCC"> how that same dangling</font>

287
00:10:41,080 --> 00:10:44,620
pointer bug how that would have played

288
00:10:43,240 --> 00:10:46,330
out if we had written that<font color="#E5E5E5"> code and rust</font>

289
00:10:44,620 --> 00:10:49,180
so we're<font color="#E5E5E5"> going to start</font><font color="#CCCCCC"> off the same way</font>

290
00:10:46,330 --> 00:10:50,500
we have our vector<font color="#E5E5E5"> that we've created</font>

291
00:10:49,180 --> 00:10:53,530
<font color="#E5E5E5">we've got some stack memory and some</font>

292
00:10:50,500 --> 00:10:56,080
heap memory and now we<font color="#E5E5E5"> want to pass</font><font color="#CCCCCC"> that</font>

293
00:10:53,530 --> 00:10:58,000
into a function again so how we're going

294
00:10:56,080 --> 00:10:59,440
to call a function<font color="#CCCCCC"> in rust when we're</font>

295
00:10:58,000 --> 00:11:01,480
transferring ownership is very similar

296
00:10:59,440 --> 00:11:02,950
to how we would transfer a variable in

297
00:11:01,480 --> 00:11:06,580
other languages which is call it in our

298
00:11:02,950 --> 00:11:08,560
function and so we copy our stack memory

299
00:11:06,580 --> 00:11:10,390
into our new context but you'll note

300
00:11:08,560 --> 00:11:12,250
that the original stack context is

301
00:11:10,390 --> 00:11:14,500
<font color="#CCCCCC">grayed out now and I'll get</font><font color="#E5E5E5"> back to that</font>

302
00:11:12,250 --> 00:11:15,550
<font color="#E5E5E5">in a second so in our function we're</font>

303
00:11:14,500 --> 00:11:16,900
going to push in<font color="#CCCCCC"> you element to our</font>

304
00:11:15,550 --> 00:11:20,079
array we're going to reallocate it again

305
00:11:16,900 --> 00:11:22,150
same as before but now our function is

306
00:11:20,080 --> 00:11:23,890
<font color="#E5E5E5">going to return and since the owner</font><font color="#CCCCCC"> of</font>

307
00:11:22,150 --> 00:11:26,140
<font color="#E5E5E5">that vector has gone away we've</font>

308
00:11:23,890 --> 00:11:29,020
immediately freed the memory which<font color="#CCCCCC"> is</font>

309
00:11:26,140 --> 00:11:30,490
different from before we've also since

310
00:11:29,020 --> 00:11:32,560
we've had transferred ownership<font color="#E5E5E5"> into</font>

311
00:11:30,490 --> 00:11:34,390
that function our original context did

312
00:11:32,560 --> 00:11:36,939
not have<font color="#E5E5E5"> access to that stack</font><font color="#CCCCCC"> number</font>

313
00:11:34,390 --> 00:11:38,620
anymore so if we<font color="#CCCCCC"> were to try and access</font>

314
00:11:36,940 --> 00:11:40,570
that stack memory again try<font color="#CCCCCC"> and use that</font>

315
00:11:38,620 --> 00:11:42,280
<font color="#E5E5E5">same variable the compiler would block</font>

316
00:11:40,570 --> 00:11:43,900
it right there and say no your codes not

317
00:11:42,280 --> 00:11:45,400
allowed to do this and it totally

318
00:11:43,900 --> 00:11:48,400
prevents the same bug from popping up

319
00:11:45,400 --> 00:11:50,470
again now<font color="#E5E5E5"> again I mentioned</font><font color="#CCCCCC"> that</font>

320
00:11:48,400 --> 00:11:52,209
sometimes we might<font color="#E5E5E5"> want to loan</font>

321
00:11:50,470 --> 00:11:54,400
something<font color="#E5E5E5"> out and have</font><font color="#CCCCCC"> it modified and</font>

322
00:11:52,210 --> 00:11:56,860
then have<font color="#CCCCCC"> access to it</font><font color="#E5E5E5"> again so in other</font>

323
00:11:54,400 --> 00:11:58,840
languages we would use a pointer and in

324
00:11:56,860 --> 00:12:00,280
rust it's the same way so this next

325
00:11:58,840 --> 00:12:03,400
example<font color="#E5E5E5"> we'll go through</font><font color="#CCCCCC"> with a mutable</font>

326
00:12:00,280 --> 00:12:04,720
borrow in rust so to do that to pass it

327
00:12:03,400 --> 00:12:06,340
into a function as a mutable borrow we

328
00:12:04,720 --> 00:12:08,020
use an ampersand to show<font color="#E5E5E5"> that to borrow</font>

329
00:12:06,340 --> 00:12:12,070
and we say<font color="#CCCCCC"> mutes just to say that it's a</font>

330
00:12:08,020 --> 00:12:13,390
mutable borrow and instead of<font color="#E5E5E5"> copying</font>

331
00:12:12,070 --> 00:12:14,920
the data from the stack we're going to

332
00:12:13,390 --> 00:12:17,080
create a reference back to<font color="#CCCCCC"> the original</font>

333
00:12:14,920 --> 00:12:18,280
stack memory if we need to<font color="#E5E5E5"> push</font>

334
00:12:17,080 --> 00:12:21,370
something onto the array we reallocate

335
00:12:18,280 --> 00:12:24,100
it and when we return then we just have

336
00:12:21,370 --> 00:12:25,930
access to our stack memory again and so

337
00:12:24,100 --> 00:12:28,150
we can see that<font color="#E5E5E5"> we've</font><font color="#CCCCCC"> got our new</font>

338
00:12:25,930 --> 00:12:30,849
allocated memory totally accessible from

339
00:12:28,150 --> 00:12:33,670
our original context and so far this is

340
00:12:30,850 --> 00:12:35,140
the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> in c++ and rust but breaks down</font>

341
00:12:33,670 --> 00:12:35,990
once you start doing a shared borrow so

342
00:12:35,140 --> 00:12:39,350
let's<font color="#E5E5E5"> look</font>

343
00:12:35,990 --> 00:12:41,480
a shared borrow example again we're

344
00:12:39,350 --> 00:12:42,470
gonna start with<font color="#E5E5E5"> our vector and we're</font>

345
00:12:41,480 --> 00:12:44,570
going to<font color="#E5E5E5"> start with a different function</font>

346
00:12:42,470 --> 00:12:46,070
and this time we're going<font color="#E5E5E5"> to pass two</font>

347
00:12:44,570 --> 00:12:47,930
vectors into our function and function

348
00:12:46,070 --> 00:12:49,130
is going<font color="#E5E5E5"> to go through and add up all</font>

349
00:12:47,930 --> 00:12:51,079
the elements from all the vectors that

350
00:12:49,130 --> 00:12:53,480
are passed in and give us a result at

351
00:12:51,080 --> 00:12:55,220
the end<font color="#E5E5E5"> and for some reason we've</font>

352
00:12:53,480 --> 00:12:57,830
decided we want to pass the same vector

353
00:12:55,220 --> 00:12:59,779
in as both arguments so we're sharing

354
00:12:57,830 --> 00:13:03,320
that one source<font color="#E5E5E5"> of memory in two</font>

355
00:12:59,779 --> 00:13:04,730
locations so we're going to create<font color="#E5E5E5"> two</font>

356
00:13:03,320 --> 00:13:07,190
references pointing back to the original

357
00:13:04,730 --> 00:13:08,450
stack and we can create<font color="#E5E5E5"> an iterator</font>

358
00:13:07,190 --> 00:13:10,220
that's going to go through it and read

359
00:13:08,450 --> 00:13:12,430
all<font color="#E5E5E5"> the different elements it'll cycle</font>

360
00:13:10,220 --> 00:13:16,010
through<font color="#CCCCCC"> a point to the next element</font><font color="#E5E5E5"> and</font>

361
00:13:12,430 --> 00:13:17,630
we can follow creator iterator through

362
00:13:16,010 --> 00:13:18,980
either of the<font color="#E5E5E5"> references and it's</font>

363
00:13:17,630 --> 00:13:21,680
<font color="#E5E5E5">totally fine everything is just read</font>

364
00:13:18,980 --> 00:13:23,000
only at this point and<font color="#E5E5E5"> nothing's</font>

365
00:13:21,680 --> 00:13:27,589
modifying it and so everything's totally

366
00:13:23,000 --> 00:13:29,149
kosher nothing's gonna break now it gets

367
00:13:27,589 --> 00:13:32,089
<font color="#CCCCCC">interesting if we try to add a mutable</font>

368
00:13:29,149 --> 00:13:33,680
aspect to this so let's take a<font color="#CCCCCC"> different</font>

369
00:13:32,089 --> 00:13:34,940
function what we want<font color="#E5E5E5"> to do is we</font><font color="#CCCCCC"> want</font>

370
00:13:33,680 --> 00:13:36,800
<font color="#CCCCCC">to</font><font color="#E5E5E5"> take all the elements from the first</font>

371
00:13:34,940 --> 00:13:40,250
vector and push<font color="#E5E5E5"> them onto the end of the</font>

372
00:13:36,800 --> 00:13:41,719
second<font color="#E5E5E5"> vector now in this</font><font color="#CCCCCC"> case that's</font>

373
00:13:40,250 --> 00:13:43,790
<font color="#E5E5E5">something we probably didn't mean to do</font>

374
00:13:41,720 --> 00:13:45,290
but maybe the developer who is writing

375
00:13:43,790 --> 00:13:46,760
this code accidentally copied and pasted

376
00:13:45,290 --> 00:13:48,649
a variable and didn't change a number<font color="#E5E5E5"> or</font>

377
00:13:46,760 --> 00:13:51,170
something<font color="#E5E5E5"> and so now we've accidentally</font>

378
00:13:48,649 --> 00:13:52,970
point pointed the same vector into both

379
00:13:51,170 --> 00:13:54,110
arguments so it's going<font color="#E5E5E5"> to try and copy</font>

380
00:13:52,970 --> 00:13:56,690
all the<font color="#E5E5E5"> elements from the one vector</font>

381
00:13:54,110 --> 00:13:59,720
back into itself which<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to cause</font>

382
00:13:56,690 --> 00:14:03,230
some issues as you'll see in a second so

383
00:13:59,720 --> 00:14:05,180
in C++ that would totally<font color="#E5E5E5"> be fine we try</font>

384
00:14:03,230 --> 00:14:06,829
<font color="#E5E5E5">to push our element into the array we</font>

385
00:14:05,180 --> 00:14:08,359
have to grow it and now we've got an

386
00:14:06,829 --> 00:14:11,479
iterator pointing into invalid memory

387
00:14:08,360 --> 00:14:15,440
and even though our<font color="#E5E5E5"> vector is pointing</font>

388
00:14:11,480 --> 00:14:17,720
to the correct memory so in rusts not

389
00:14:15,440 --> 00:14:19,100
allowed we've tried to<font color="#E5E5E5"> do a shared</font>

390
00:14:17,720 --> 00:14:20,990
borrow at the same time<font color="#CCCCCC"> as a mutable</font>

391
00:14:19,100 --> 00:14:23,149
<font color="#CCCCCC">borrow</font><font color="#E5E5E5"> for the same chunk of memory and</font>

392
00:14:20,990 --> 00:14:24,829
the compiler just sees that you're

393
00:14:23,149 --> 00:14:27,950
trying<font color="#E5E5E5"> to be both things at once and it</font>

394
00:14:24,829 --> 00:14:30,649
says nope not gonna happen and<font color="#E5E5E5"> Russ</font>

395
00:14:27,950 --> 00:14:32,029
compiler errors are really fantastic<font color="#E5E5E5"> and</font>

396
00:14:30,649 --> 00:14:33,079
they'll tell<font color="#E5E5E5"> you exactly what happened</font>

397
00:14:32,029 --> 00:14:34,910
<font color="#CCCCCC">and</font><font color="#E5E5E5"> they'll show you where to get</font>

398
00:14:33,079 --> 00:14:37,520
documentation on how to find out exactly

399
00:14:34,910 --> 00:14:40,149
<font color="#E5E5E5">what</font><font color="#CCCCCC"> happened that</font><font color="#E5E5E5"> caused that to go</font>

400
00:14:37,520 --> 00:14:40,149
wrong so

401
00:14:41,710 --> 00:14:47,780
yeah so that's ownership and borrowing

402
00:14:44,840 --> 00:14:49,010
and rust there's various other topics

403
00:14:47,780 --> 00:14:53,750
that I would<font color="#E5E5E5"> have liked to talk about</font>

404
00:14:49,010 --> 00:14:55,100
and I'm going<font color="#CCCCCC"> to wrap</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> up here real</font>

405
00:14:53,750 --> 00:14:56,560
quick so that<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> have some time for</font>

406
00:14:55,100 --> 00:14:58,160
questions there is anything<font color="#E5E5E5"> like that</font>

407
00:14:56,560 --> 00:15:00,500
hopefully you guys have learned

408
00:14:58,160 --> 00:15:01,640
<font color="#E5E5E5">something about rust and you become</font>

409
00:15:00,500 --> 00:15:04,220
interested in writing your next project

410
00:15:01,640 --> 00:15:05,930
in rust here's<font color="#E5E5E5"> some resources if you</font>

411
00:15:04,220 --> 00:15:07,880
want to learn a little bit more my talk

412
00:15:05,930 --> 00:15:10,130
is kind of based on<font color="#E5E5E5"> this memory safety</font>

413
00:15:07,880 --> 00:15:11,330
and<font color="#CCCCCC"> russ talk it goes into a</font><font color="#E5E5E5"> lot more</font>

414
00:15:10,130 --> 00:15:12,470
detail it shows some actual code

415
00:15:11,330 --> 00:15:14,480
examples and talks about<font color="#CCCCCC"> some other</font>

416
00:15:12,470 --> 00:15:15,740
concepts as well if you<font color="#E5E5E5"> want to learn</font>

417
00:15:14,480 --> 00:15:17,720
more about<font color="#E5E5E5"> the same things i've talked</font>

418
00:15:15,740 --> 00:15:18,800
<font color="#CCCCCC">about you</font><font color="#E5E5E5"> can check that out if you want</font>

419
00:15:17,720 --> 00:15:20,750
to learn how<font color="#E5E5E5"> to write code in rust</font>

420
00:15:18,800 --> 00:15:22,880
there's rust by example and the rest

421
00:15:20,750 --> 00:15:24,590
book which are really<font color="#E5E5E5"> fantastic and</font>

422
00:15:22,880 --> 00:15:27,520
<font color="#E5E5E5">these monster paintings are by Driscoll</font>

423
00:15:24,590 --> 00:15:29,840
read and that's his website there so

424
00:15:27,520 --> 00:15:32,079
yeah so thanks for listening to my talk

425
00:15:29,840 --> 00:15:32,080
and

426
00:15:35,960 --> 00:15:54,350
I think we<font color="#CCCCCC"> stole some time for questions</font>

427
00:15:41,840 --> 00:15:56,750
<font color="#E5E5E5">so I see one at the back in this case I</font>

428
00:15:54,350 --> 00:15:58,010
was<font color="#E5E5E5"> specifically talking about single</font>

429
00:15:56,750 --> 00:15:59,240
threaded applications one thing I

430
00:15:58,010 --> 00:16:00,890
probably should<font color="#E5E5E5"> have added to this was</font>

431
00:15:59,240 --> 00:16:02,330
<font color="#CCCCCC">that rust was developed for</font>

432
00:16:00,890 --> 00:16:04,540
multi-threaded applications as well and

433
00:16:02,330 --> 00:16:06,890
this borrowing system actually makes

434
00:16:04,540 --> 00:16:09,469
multi-threaded applications really safe

435
00:16:06,890 --> 00:16:11,240
as well so in a single threaded

436
00:16:09,470 --> 00:16:13,010
application is<font color="#CCCCCC"> what which</font><font color="#E5E5E5"> is my examples</font>

437
00:16:11,240 --> 00:16:17,630
as soon as<font color="#E5E5E5"> the function exits it</font>

438
00:16:13,010 --> 00:16:21,020
<font color="#E5E5E5">immediately has to return its its its</font>

439
00:16:17,630 --> 00:16:23,150
lock on that code or on that memory so

440
00:16:21,020 --> 00:16:24,350
it owns the pointer to memory and then

441
00:16:23,150 --> 00:16:26,209
as<font color="#CCCCCC"> soon as the function returns its</font>

442
00:16:24,350 --> 00:16:28,130
ownership of that pointer goes away so

443
00:16:26,210 --> 00:16:30,470
that pointer is freed and then the code

444
00:16:28,130 --> 00:16:34,930
goes back and has access to that memory

445
00:16:30,470 --> 00:16:34,930
again yeah

446
00:16:53,050 --> 00:17:00,020
yeah sure yeah so the question was what

447
00:16:57,410 --> 00:17:01,969
happens if things are borrowed and the

448
00:17:00,020 --> 00:17:03,890
<font color="#CCCCCC">original owner of the of the resource</font>

449
00:17:01,970 --> 00:17:06,770
goes away<font color="#E5E5E5"> and the borrow is still active</font>

450
00:17:03,890 --> 00:17:09,980
and so<font color="#E5E5E5"> that's more complicated topic and</font>

451
00:17:06,770 --> 00:17:12,260
rust that's referred to as lifetimes so

452
00:17:09,980 --> 00:17:13,940
I kind<font color="#E5E5E5"> of glossed over it like i said i</font>

453
00:17:12,260 --> 00:17:16,490
<font color="#E5E5E5">was going to go for clarity over over</font>

454
00:17:13,940 --> 00:17:18,830
correctness so when<font color="#CCCCCC"> i</font><font color="#E5E5E5"> said that when the</font>

455
00:17:16,490 --> 00:17:20,780
function<font color="#E5E5E5"> returns</font><font color="#CCCCCC"> its that it</font><font color="#E5E5E5"> then goes</font>

456
00:17:18,829 --> 00:17:23,689
away at that point really what happens

457
00:17:20,780 --> 00:17:25,160
is the lifetime for<font color="#CCCCCC"> that variable has</font>

458
00:17:23,690 --> 00:17:27,050
its reached the end of its life time and

459
00:17:25,160 --> 00:17:29,330
so rust knows that it's able<font color="#E5E5E5"> to free at</font>

460
00:17:27,050 --> 00:17:32,210
that point in rust you can actually

461
00:17:29,330 --> 00:17:35,330
manually declare how long resource is

462
00:17:32,210 --> 00:17:37,850
going to survive and if something<font color="#E5E5E5"> tries</font>

463
00:17:35,330 --> 00:17:41,230
<font color="#CCCCCC">to if you try to write code</font><font color="#E5E5E5"> that will</font>

464
00:17:37,850 --> 00:17:44,209
have something<font color="#E5E5E5"> outlive the the resource</font>

465
00:17:41,230 --> 00:17:45,440
borrow that you've handed out then the

466
00:17:44,210 --> 00:17:47,270
compiler is going to catch that<font color="#E5E5E5"> too and</font>

467
00:17:45,440 --> 00:17:48,950
say no this lifetime isn't as long as

468
00:17:47,270 --> 00:17:50,930
this lifetime you need to fix your code

469
00:17:48,950 --> 00:17:52,970
<font color="#E5E5E5">and make it so that everything so that</font>

470
00:17:50,930 --> 00:17:56,660
your resource has a shorter<font color="#E5E5E5"> lifetime</font>

471
00:17:52,970 --> 00:18:01,640
than the owner of<font color="#E5E5E5"> that resource that</font>

472
00:17:56,660 --> 00:18:03,920
make sense yeah yeah it's<font color="#CCCCCC"> it it's a more</font>

473
00:18:01,640 --> 00:18:05,480
complicated concept so I didn't<font color="#E5E5E5"> want to</font>

474
00:18:03,920 --> 00:18:07,340
try and cram it into this short short

475
00:18:05,480 --> 00:18:08,630
talk but it's it's pretty interesting

476
00:18:07,340 --> 00:18:11,750
how it<font color="#E5E5E5"> just kind of does it for you a</font>

477
00:18:08,630 --> 00:18:15,490
lot<font color="#E5E5E5"> of the time I see your hand back</font>

478
00:18:11,750 --> 00:18:15,490
there yeah

479
00:18:20,600 --> 00:18:26,580
yeah so that this the question was how

480
00:18:23,940 --> 00:18:29,010
<font color="#CCCCCC">does this affect compile time right now</font>

481
00:18:26,580 --> 00:18:30,570
rust is still fairly new and so they

482
00:18:29,010 --> 00:18:34,620
haven't spent tons of time working on

483
00:18:30,570 --> 00:18:36,840
<font color="#E5E5E5">Tyler optimizations however it is llvm</font>

484
00:18:34,620 --> 00:18:38,489
back so any any optimizations that are

485
00:18:36,840 --> 00:18:41,310
built into<font color="#CCCCCC"> llvm you get that</font>

486
00:18:38,490 --> 00:18:42,690
automatically by using rest so there's

487
00:18:41,310 --> 00:18:45,800
still<font color="#E5E5E5"> some optimizations that can be</font>

488
00:18:42,690 --> 00:18:48,360
done to get<font color="#E5E5E5"> these special parts of rust</font>

489
00:18:45,800 --> 00:18:49,230
compile faster and that's one of<font color="#CCCCCC"> the</font>

490
00:18:48,360 --> 00:18:50,370
<font color="#CCCCCC">things that they're working on now</font><font color="#E5E5E5"> that</font>

491
00:18:49,230 --> 00:18:52,350
<font color="#E5E5E5">they've got their official one point</font><font color="#CCCCCC"> 0</font>

492
00:18:50,370 --> 00:18:54,300
release and things are stable prior to

493
00:18:52,350 --> 00:18:55,949
that<font color="#E5E5E5"> there was a lot of churn and how</font>

494
00:18:54,300 --> 00:18:57,110
things<font color="#E5E5E5"> looked so that's that's something</font>

495
00:18:55,950 --> 00:19:04,590
that's an active development right<font color="#CCCCCC"> now</font>

496
00:18:57,110 --> 00:19:05,550
yeah<font color="#CCCCCC"> how peering that's an excellent</font>

497
00:19:04,590 --> 00:19:07,560
question how does this work for

498
00:19:05,550 --> 00:19:08,879
cross-platform that's actually<font color="#CCCCCC"> one of</font>

499
00:19:07,560 --> 00:19:10,919
<font color="#E5E5E5">the things that drew me into this to</font>

500
00:19:08,880 --> 00:19:15,030
begin with their target audience is C

501
00:19:10,920 --> 00:19:17,340
and C++ users their goal is for making

502
00:19:15,030 --> 00:19:20,610
platforms for<font color="#CCCCCC"> the web they're making a</font>

503
00:19:17,340 --> 00:19:22,530
wet new web browser in Mozilla for me I

504
00:19:20,610 --> 00:19:23,639
<font color="#E5E5E5">was really</font><font color="#CCCCCC"> interested in</font><font color="#E5E5E5"> it as someone</font>

505
00:19:22,530 --> 00:19:27,180
<font color="#E5E5E5">who did likes doing embedded electronics</font>

506
00:19:23,640 --> 00:19:29,100
and so I know that<font color="#E5E5E5"> that's some place</font>

507
00:19:27,180 --> 00:19:31,620
where rest doesn't have a great foothold

508
00:19:29,100 --> 00:19:34,110
yet but they're working<font color="#E5E5E5"> on it so I know</font>

509
00:19:31,620 --> 00:19:36,989
<font color="#CCCCCC">that they do have compilers that will</font>

510
00:19:34,110 --> 00:19:38,250
compile to arm cortex microcontrollers

511
00:19:36,990 --> 00:19:39,750
and I've done<font color="#E5E5E5"> that myself and made</font>

512
00:19:38,250 --> 00:19:44,790
blinking lights and rust which is pretty

513
00:19:39,750 --> 00:19:46,080
pretty awesome and it works on you know

514
00:19:44,790 --> 00:19:51,139
<font color="#E5E5E5">you can write programs for windows and</font>

515
00:19:46,080 --> 00:19:54,139
linux arm x86 64 all that stuff so<font color="#CCCCCC"> yeah</font>

516
00:19:51,140 --> 00:19:54,140
yep

517
00:20:01,650 --> 00:20:04,650
true

518
00:20:09,539 --> 00:20:14,309
yeah rust is actually compatible with

519
00:20:12,669 --> 00:20:16,570
all those tools because it can it

520
00:20:14,309 --> 00:20:18,760
basically is a very compatible file

521
00:20:16,570 --> 00:20:20,350
system since<font color="#CCCCCC"> its</font><font color="#E5E5E5"> llvm based so you get</font>

522
00:20:18,760 --> 00:20:21,789
the same objects out<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> end yeah the</font>

523
00:20:20,350 --> 00:20:25,570
question was how<font color="#E5E5E5"> can you get buy-in for</font>

524
00:20:21,789 --> 00:20:26,890
your company so<font color="#CCCCCC"> you can use a lot</font><font color="#E5E5E5"> of the</font>

525
00:20:25,570 --> 00:20:28,418
same tools and you can use a lot<font color="#CCCCCC"> of the</font>

526
00:20:26,890 --> 00:20:30,370
same existing code base and you can

527
00:20:28,419 --> 00:20:33,130
write new code that can call into your

528
00:20:30,370 --> 00:20:34,510
<font color="#E5E5E5">old C and C++ code and you can get seen</font>

529
00:20:33,130 --> 00:20:37,149
suppose<font color="#CCCCCC"> plus code to call into your</font><font color="#E5E5E5"> best</font>

530
00:20:34,510 --> 00:20:40,090
code so say you have a<font color="#E5E5E5"> critical piece of</font>

531
00:20:37,149 --> 00:20:41,739
<font color="#E5E5E5">code</font><font color="#CCCCCC"> that you know it's written and</font>

532
00:20:40,090 --> 00:20:42,820
tested and it's been<font color="#E5E5E5"> deployed and</font>

533
00:20:41,740 --> 00:20:44,740
there's no issues with it you don't want

534
00:20:42,820 --> 00:20:46,600
<font color="#E5E5E5">have to rewrite it you can keep using</font>

535
00:20:44,740 --> 00:20:48,760
that same code call into it create a

536
00:20:46,600 --> 00:20:51,639
safe wrapper around it and now<font color="#E5E5E5"> you can</font>

537
00:20:48,760 --> 00:20:53,230
use right easy to write safe code that

538
00:20:51,640 --> 00:20:57,899
uses your existing library that's<font color="#E5E5E5"> been</font>

539
00:20:53,230 --> 00:20:57,899
proven so yeah yeah at the back there

540
00:21:04,799 --> 00:21:09,129
yeah well you saw the big list i had

541
00:21:07,330 --> 00:21:10,689
that was kind of scrolled off there<font color="#CCCCCC"> so</font>

542
00:21:09,130 --> 00:21:13,809
question was what else do I like<font color="#E5E5E5"> about</font>

543
00:21:10,690 --> 00:21:18,510
rust personally I really like just

544
00:21:13,809 --> 00:21:21,158
writing code in it is really fun<font color="#E5E5E5"> to do</font>

545
00:21:18,510 --> 00:21:22,240
one thing<font color="#CCCCCC"> that it was kind of weird from</font>

546
00:21:21,159 --> 00:21:23,649
<font color="#E5E5E5">the first time I started writing and</font>

547
00:21:22,240 --> 00:21:26,289
rust was they don't have the traditional

548
00:21:23,649 --> 00:21:29,678
for loops like you do in C and C++ all

549
00:21:26,289 --> 00:21:31,870
four loops are iterator based which as

550
00:21:29,679 --> 00:21:35,049
someone who kind<font color="#E5E5E5"> of came from the C C++</font>

551
00:21:31,870 --> 00:21:37,209
world was kind of weird but really it is

552
00:21:35,049 --> 00:21:38,470
really nice to<font color="#E5E5E5"> know that every time</font><font color="#CCCCCC"> your</font>

553
00:21:37,210 --> 00:21:40,000
you're looping through something you're

554
00:21:38,470 --> 00:21:42,190
actually looping over like concrete

555
00:21:40,000 --> 00:21:43,539
things and you can manipulate<font color="#E5E5E5"> those</font>

556
00:21:42,190 --> 00:21:45,490
decorators and do all sorts<font color="#CCCCCC"> of fun</font>

557
00:21:43,539 --> 00:21:47,260
things and you get something<font color="#E5E5E5"> really</font>

558
00:21:45,490 --> 00:21:48,820
<font color="#E5E5E5">great at the end it's also got a lot of</font>

559
00:21:47,260 --> 00:21:50,140
functional tools so if you're<font color="#E5E5E5"> if you</font>

560
00:21:48,820 --> 00:21:54,939
like doing functional programming you

561
00:21:50,140 --> 00:21:56,710
are totally able<font color="#CCCCCC"> to do that</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> rust yeah</font>

562
00:21:54,940 --> 00:21:58,539
there's there's a whole host of things

563
00:21:56,710 --> 00:22:00,789
that are really great oh yeah Anna

564
00:21:58,539 --> 00:22:02,429
mentioned immutable variables by<font color="#E5E5E5"> default</font>

565
00:22:00,789 --> 00:22:06,760
all variables and rust are immutable and

566
00:22:02,429 --> 00:22:10,210
so it makes it really easy to make your

567
00:22:06,760 --> 00:22:12,100
code you<font color="#CCCCCC"> know exactly what a variables</font>

568
00:22:10,210 --> 00:22:13,630
for you initialize it and that is what

569
00:22:12,100 --> 00:22:15,340
it holds for the entire Divas lifetime

570
00:22:13,630 --> 00:22:17,220
if you want you can make it mutable to

571
00:22:15,340 --> 00:22:19,539
make changes<font color="#CCCCCC"> to it maybe</font><font color="#E5E5E5"> you've</font><font color="#CCCCCC"> got a</font>

572
00:22:17,220 --> 00:22:20,830
connection to a pipe of some sort you

573
00:22:19,539 --> 00:22:22,160
need to be able to change some aspects

574
00:22:20,830 --> 00:22:24,110
of<font color="#CCCCCC"> that as you're running</font>

575
00:22:22,160 --> 00:22:25,820
but generally<font color="#E5E5E5"> when you've got an object</font>

576
00:22:24,110 --> 00:22:27,260
you can by default make know that it's

577
00:22:25,820 --> 00:22:29,689
going<font color="#E5E5E5"> to stay exactly as you expect it</font>

578
00:22:27,260 --> 00:22:32,320
to<font color="#CCCCCC"> be thrown its lifetime so there's</font>

579
00:22:29,690 --> 00:22:41,510
<font color="#E5E5E5">lots of little things like that so yeah</font>

580
00:22:32,320 --> 00:22:44,210
anything else yeah there you go that'd

581
00:22:41,510 --> 00:22:47,920
be vim for anybody I can't<font color="#E5E5E5"> read yeah</font>

582
00:22:44,210 --> 00:22:47,920
<font color="#E5E5E5">okay thanks</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font>

583
00:22:53,230 --> 00:22:55,290
you

