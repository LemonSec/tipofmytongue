1
00:00:00,760 --> 00:00:04,500
[Applause]

2
00:00:02,060 --> 00:00:06,150
hello<font color="#CCCCCC"> whoa hey</font>

3
00:00:04,500 --> 00:00:08,519
thanks<font color="#E5E5E5"> for being here thanks</font><font color="#CCCCCC"> for</font>

4
00:00:06,150 --> 00:00:10,740
sticking around<font color="#CCCCCC"> I am Mike Sanders</font><font color="#E5E5E5"> and</font>

5
00:00:08,519 --> 00:00:15,030
today we are going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be talking about</font>

6
00:00:10,740 --> 00:00:16,500
buffer overflow 101 so without any

7
00:00:15,030 --> 00:00:18,720
further<font color="#E5E5E5"> ado just a little bit about me</font>

8
00:00:16,500 --> 00:00:22,439
<font color="#CCCCCC">I'm an IT full-time since 98 got in</font>

9
00:00:18,720 --> 00:00:24,769
security back in 2007<font color="#CCCCCC"> I've done a lot of</font>

10
00:00:22,439 --> 00:00:27,900
<font color="#E5E5E5">different jobs</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> IT and security and</font>

11
00:00:24,769 --> 00:00:28,680
what I'm not doing IT stuff<font color="#CCCCCC"> I love</font>

12
00:00:27,900 --> 00:00:30,630
fishing

13
00:00:28,680 --> 00:00:32,519
as you can see here not necessarily<font color="#CCCCCC"> good</font>

14
00:00:30,630 --> 00:00:35,700
at<font color="#E5E5E5"> it all the time but I always enjoy</font>

15
00:00:32,520 --> 00:00:39,690
the heck out<font color="#E5E5E5"> of it yes yes sometimes you</font>

16
00:00:35,700 --> 00:00:41,930
know it's not the size that matters<font color="#E5E5E5"> that</font>

17
00:00:39,690 --> 00:00:45,629
<font color="#E5E5E5">was too small</font><font color="#CCCCCC"> to cook</font><font color="#E5E5E5"> too small to cook</font>

18
00:00:41,930 --> 00:00:48,750
so<font color="#E5E5E5"> buffer overflow 101 what was my</font>

19
00:00:45,629 --> 00:00:50,789
<font color="#E5E5E5">motivation for</font><font color="#CCCCCC"> doing this talk</font><font color="#E5E5E5"> honestly</font>

20
00:00:48,750 --> 00:00:53,730
not too<font color="#E5E5E5"> long</font><font color="#CCCCCC"> ago this is</font><font color="#E5E5E5"> what I thought</font>

21
00:00:50,789 --> 00:00:56,430
<font color="#E5E5E5">about buffer overflows</font><font color="#CCCCCC"> you know I knew</font>

22
00:00:53,730 --> 00:00:58,468
that<font color="#CCCCCC"> a buffer overflow was you copied</font>

23
00:00:56,430 --> 00:01:00,149
too much data into a buffer<font color="#E5E5E5"> in memory</font>

24
00:00:58,469 --> 00:01:02,219
<font color="#E5E5E5">that overrode some stuff and some bad</font>

25
00:01:00,149 --> 00:01:04,830
stuff<font color="#E5E5E5"> happened and and that's about as</font>

26
00:01:02,219 --> 00:01:07,320
much<font color="#E5E5E5"> as I understood so how many here</font>

27
00:01:04,830 --> 00:01:09,030
<font color="#E5E5E5">have ever used a buffer</font><font color="#CCCCCC"> overflow exploit</font>

28
00:01:07,320 --> 00:01:09,570
like maybe<font color="#E5E5E5"> in</font><font color="#CCCCCC"> Metasploit or something</font>

29
00:01:09,030 --> 00:01:11,909
like<font color="#E5E5E5"> that</font>

30
00:01:09,570 --> 00:01:14,520
okay so we got a few<font color="#E5E5E5"> people</font><font color="#CCCCCC"> a lot</font><font color="#E5E5E5"> of you</font>

31
00:01:11,909 --> 00:01:16,500
how<font color="#CCCCCC"> many have ever modified an existing</font>

32
00:01:14,520 --> 00:01:18,119
buffer overflow exploit may put in your

33
00:01:16,500 --> 00:01:21,659
own<font color="#E5E5E5"> shell code or change</font><font color="#CCCCCC"> your return</font>

34
00:01:18,119 --> 00:01:26,040
address<font color="#E5E5E5"> fewer hands okay how</font><font color="#CCCCCC"> many have</font>

35
00:01:21,659 --> 00:01:28,700
ever<font color="#E5E5E5"> gone through and found a buffer</font>

36
00:01:26,040 --> 00:01:31,229
overflow<font color="#E5E5E5"> in some piece of software</font>

37
00:01:28,700 --> 00:01:34,100
<font color="#E5E5E5">figured out exactly</font><font color="#CCCCCC"> what you</font><font color="#E5E5E5"> need to do</font>

38
00:01:31,229 --> 00:01:36,179
and actually<font color="#E5E5E5"> wrote a</font><font color="#CCCCCC"> full exploit for it</font>

39
00:01:34,100 --> 00:01:37,740
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so there's just a</font><font color="#CCCCCC"> couple people</font>

40
00:01:36,180 --> 00:01:40,590
so this<font color="#CCCCCC"> is the crowd we need here</font>

41
00:01:37,740 --> 00:01:42,360
because like<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of you not that long</font>

42
00:01:40,590 --> 00:01:45,000
<font color="#CCCCCC">ago I</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> in this position where buffer</font>

43
00:01:42,360 --> 00:01:45,689
overflows were magic<font color="#CCCCCC"> I knew what they</font>

44
00:01:45,000 --> 00:01:48,090
were

45
00:01:45,689 --> 00:01:51,630
I could<font color="#E5E5E5"> modify them but I had no idea</font>

46
00:01:48,090 --> 00:01:53,700
<font color="#E5E5E5">how to find one</font><font color="#CCCCCC"> and if you've</font><font color="#E5E5E5"> ever heard</font>

47
00:01:51,630 --> 00:01:55,710
<font color="#E5E5E5">of this concept</font><font color="#CCCCCC"> of imposter</font><font color="#E5E5E5"> syndrome</font>

48
00:01:53,700 --> 00:01:57,540
Micah Hoffman<font color="#E5E5E5"> web reader talks about it</font>

49
00:01:55,710 --> 00:01:59,460
and it's this idea that<font color="#E5E5E5"> you think</font>

50
00:01:57,540 --> 00:02:02,430
<font color="#E5E5E5">everyone</font><font color="#CCCCCC"> else knows everything</font><font color="#E5E5E5"> you only</font>

51
00:01:59,460 --> 00:02:03,780
<font color="#E5E5E5">know this much and I follow</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> on</font>

52
00:02:02,430 --> 00:02:05,520
<font color="#E5E5E5">Twitter so obviously they know</font>

53
00:02:03,780 --> 00:02:07,409
<font color="#CCCCCC">everything and</font><font color="#E5E5E5"> I was seeing</font><font color="#CCCCCC"> people</font>

54
00:02:05,520 --> 00:02:09,419
tweeting about<font color="#E5E5E5"> like hey I'm getting</font>

55
00:02:07,409 --> 00:02:11,670
<font color="#CCCCCC">started with buffer overflows do you</font>

56
00:02:09,419 --> 00:02:12,920
have any any recommendations on<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to</font>

57
00:02:11,670 --> 00:02:14,510
<font color="#E5E5E5">get</font><font color="#CCCCCC"> started</font><font color="#E5E5E5"> I thought wow</font>

58
00:02:12,920 --> 00:02:15,950
that's odd<font color="#E5E5E5"> there's other people that</font>

59
00:02:14,510 --> 00:02:17,510
<font color="#CCCCCC">don't know about buffer overflows I</font>

60
00:02:15,950 --> 00:02:19,250
honestly felt<font color="#E5E5E5"> like I was probably the</font>

61
00:02:17,510 --> 00:02:21,859
only<font color="#CCCCCC"> person left in</font><font color="#E5E5E5"> InfoSec that didn't</font>

62
00:02:19,250 --> 00:02:24,170
know them<font color="#CCCCCC"> so as I started thinking</font><font color="#E5E5E5"> about</font>

63
00:02:21,860 --> 00:02:26,959
that<font color="#CCCCCC"> I was talking to some friends</font><font color="#E5E5E5"> like</font>

64
00:02:24,170 --> 00:02:29,089
do you think<font color="#CCCCCC"> this could be</font><font color="#E5E5E5"> a an idea for</font>

65
00:02:26,959 --> 00:02:30,650
<font color="#E5E5E5">a talk now yeah absolutely we we should</font>

66
00:02:29,090 --> 00:02:34,190
absolutely<font color="#E5E5E5"> do</font><font color="#CCCCCC"> this so they encouraged</font><font color="#E5E5E5"> me</font>

67
00:02:30,650 --> 00:02:35,959
and<font color="#E5E5E5"> I submitted originally did Derby con</font>

68
00:02:34,190 --> 00:02:37,520
I got accepted<font color="#E5E5E5"> and then I submitted here</font>

69
00:02:35,959 --> 00:02:39,050
<font color="#E5E5E5">to</font><font color="#CCCCCC"> b-sides Winnipeg</font><font color="#E5E5E5"> and I got accepted</font>

70
00:02:37,520 --> 00:02:41,620
and then I got rejected<font color="#E5E5E5"> and then I got</font>

71
00:02:39,050 --> 00:02:46,010
accepted<font color="#E5E5E5"> then I got</font><font color="#CCCCCC"> rejected and so</font>

72
00:02:41,620 --> 00:02:48,769
blame<font color="#E5E5E5"> Ron</font><font color="#CCCCCC"> but fortunately he accepted it</font>

73
00:02:46,010 --> 00:02:49,880
again<font color="#E5E5E5"> so we're here and before we can go</font>

74
00:02:48,769 --> 00:02:52,069
on we need<font color="#E5E5E5"> to talk about a few</font>

75
00:02:49,880 --> 00:02:53,480
assumptions<font color="#E5E5E5"> things like we're</font><font color="#CCCCCC"> gonna be</font>

76
00:02:52,069 --> 00:02:56,569
talking<font color="#CCCCCC"> about buffer overflows on a</font>

77
00:02:53,480 --> 00:02:58,250
32-bit x86 architecture other

78
00:02:56,569 --> 00:02:59,750
architectures<font color="#CCCCCC"> are fundamentally</font>

79
00:02:58,250 --> 00:03:02,060
dissimilar but<font color="#E5E5E5"> there are going to</font><font color="#CCCCCC"> be</font>

80
00:02:59,750 --> 00:03:05,319
things<font color="#CCCCCC"> that may be</font><font color="#E5E5E5"> different so</font><font color="#CCCCCC"> just be</font>

81
00:03:02,060 --> 00:03:07,850
aware<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> dealing with 32-bit x86</font>

82
00:03:05,319 --> 00:03:11,048
<font color="#E5E5E5">we're doing the kind of buffer overflow</font>

83
00:03:07,850 --> 00:03:12,709
where you're<font color="#CCCCCC"> overriding the stack</font><font color="#E5E5E5"> and</font>

84
00:03:11,049 --> 00:03:14,209
overriding the return address and

85
00:03:12,709 --> 00:03:16,310
<font color="#E5E5E5">gaining execution control there</font><font color="#CCCCCC"> are</font>

86
00:03:14,209 --> 00:03:19,310
other kinds of buffer overflows<font color="#E5E5E5"> we're</font>

87
00:03:16,310 --> 00:03:21,260
<font color="#CCCCCC">not talking about</font><font color="#E5E5E5"> those and there are no</font>

88
00:03:19,310 --> 00:03:22,730
<font color="#CCCCCC">protections in play here because this is</font>

89
00:03:21,260 --> 00:03:25,040
a<font color="#E5E5E5"> one on one level we don't want to have</font>

90
00:03:22,730 --> 00:03:28,850
to figure<font color="#E5E5E5"> out how to bypass</font><font color="#CCCCCC"> Depp or ASLR</font>

91
00:03:25,040 --> 00:03:30,769
<font color="#E5E5E5">or stack Canaries so those are our</font>

92
00:03:28,850 --> 00:03:32,150
assumptions<font color="#E5E5E5"> moving forward what is a</font>

93
00:03:30,769 --> 00:03:34,730
buffer<font color="#CCCCCC"> overflow we should probably</font><font color="#E5E5E5"> talk</font>

94
00:03:32,150 --> 00:03:36,980
about<font color="#E5E5E5"> what</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is this is not a buffer</font>

95
00:03:34,730 --> 00:03:39,380
overflow if any of you follow sub<font color="#E5E5E5"> T on</font>

96
00:03:36,980 --> 00:03:42,260
<font color="#CCCCCC">Twitter you saw this so I may say</font>

97
00:03:39,380 --> 00:03:46,549
<font color="#CCCCCC">buffalo overflow at some point here but</font>

98
00:03:42,260 --> 00:03:48,560
this is not a buffer overflow<font color="#CCCCCC"> this is in</font>

99
00:03:46,549 --> 00:03:50,870
a<font color="#E5E5E5"> nutshell buffer overflows occur when</font>

100
00:03:48,560 --> 00:03:52,910
you<font color="#CCCCCC"> have a program that allocates space</font>

101
00:03:50,870 --> 00:03:55,609
<font color="#E5E5E5">in this thing called</font><font color="#CCCCCC"> the stack which is</font>

102
00:03:52,910 --> 00:03:57,200
<font color="#CCCCCC">in memory</font><font color="#E5E5E5"> and it allocates that space to</font>

103
00:03:55,609 --> 00:03:58,720
store some data<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> it writes more</font>

104
00:03:57,200 --> 00:04:01,069
data into<font color="#CCCCCC"> that buffer than it was</font>

105
00:03:58,720 --> 00:04:02,780
intending to or that<font color="#E5E5E5"> it set aside</font><font color="#CCCCCC"> space</font>

106
00:04:01,069 --> 00:04:05,328
for it which overwrites<font color="#E5E5E5"> adjacent memory</font>

107
00:04:02,780 --> 00:04:07,730
<font color="#E5E5E5">so if you set up a hundred byte buffer</font>

108
00:04:05,329 --> 00:04:09,319
and you<font color="#CCCCCC"> write in</font><font color="#E5E5E5"> 200 bytes your first</font>

109
00:04:07,730 --> 00:04:10,819
<font color="#E5E5E5">hundred bytes go on your buffer the next</font>

110
00:04:09,319 --> 00:04:14,089
hundred<font color="#E5E5E5"> bytes overwrite something</font>

111
00:04:10,819 --> 00:04:16,760
adjacent on this stack<font color="#E5E5E5"> and depending on</font>

112
00:04:14,090 --> 00:04:19,488
what's in<font color="#E5E5E5"> that space the program might</font>

113
00:04:16,760 --> 00:04:21,048
crash<font color="#E5E5E5"> data might get corrupted</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if</font>

114
00:04:19,488 --> 00:04:22,969
there is this thing<font color="#E5E5E5"> called</font><font color="#CCCCCC"> a return</font>

115
00:04:21,048 --> 00:04:25,580
address<font color="#CCCCCC"> and you do things correctly you</font>

116
00:04:22,970 --> 00:04:26,419
<font color="#E5E5E5">can actually gain execution control it</font>

117
00:04:25,580 --> 00:04:30,258
we're<font color="#E5E5E5"> gonna walk through</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> whole</font>

118
00:04:26,419 --> 00:04:31,669
process<font color="#CCCCCC"> today I've</font><font color="#E5E5E5"> mentioned the stack a</font>

119
00:04:30,259 --> 00:04:33,319
few times so<font color="#E5E5E5"> if you're not familiar with</font>

120
00:04:31,669 --> 00:04:35,210
<font color="#CCCCCC">what the stack is it's a data</font><font color="#E5E5E5"> structure</font>

121
00:04:33,319 --> 00:04:38,030
in memory<font color="#CCCCCC"> stores data and contiguous</font>

122
00:04:35,210 --> 00:04:40,400
<font color="#E5E5E5">blocks and it's typically used</font><font color="#CCCCCC"> to store</font>

123
00:04:38,030 --> 00:04:42,818
local information<font color="#E5E5E5"> about a program let</font>

124
00:04:40,400 --> 00:04:45,169
things like function information

125
00:04:42,819 --> 00:04:47,419
<font color="#E5E5E5">parameter values and these buffers for</font>

126
00:04:45,169 --> 00:04:48,830
storing variables and this thing<font color="#E5E5E5"> called</font>

127
00:04:47,419 --> 00:04:54,740
a return address which we'll talk<font color="#CCCCCC"> about</font>

128
00:04:48,830 --> 00:04:56,628
a lot<font color="#CCCCCC"> more so the stack the stack this</font>

129
00:04:54,740 --> 00:04:59,090
is not exactly correct it's just a

130
00:04:56,629 --> 00:05:01,580
<font color="#E5E5E5">mock-up that'll work for today so if you</font>

131
00:04:59,090 --> 00:05:03,349
look at<font color="#CCCCCC"> our stack here I imagine you</font>

132
00:05:01,580 --> 00:05:05,659
have a program<font color="#CCCCCC"> this has a main function</font>

133
00:05:03,349 --> 00:05:07,460
<font color="#E5E5E5">and a second function called</font><font color="#CCCCCC"> in it the</font>

134
00:05:05,659 --> 00:05:10,009
parent routine stack at the bottom

135
00:05:07,460 --> 00:05:12,409
that's main that's main stack and then

136
00:05:10,009 --> 00:05:15,050
above<font color="#CCCCCC"> that at lower memory addresses is</font>

137
00:05:12,409 --> 00:05:17,240
where<font color="#CCCCCC"> in its stack gets</font><font color="#E5E5E5"> placed</font><font color="#CCCCCC"> its</font>

138
00:05:15,050 --> 00:05:20,300
portion<font color="#E5E5E5"> on the stack</font><font color="#CCCCCC"> so it's above it at</font>

139
00:05:17,240 --> 00:05:22,460
lower memory addresses that's because in

140
00:05:20,300 --> 00:05:24,680
this<font color="#E5E5E5"> model the lowest memory addresses</font>

141
00:05:22,460 --> 00:05:26,960
are up at the<font color="#CCCCCC"> top and</font><font color="#E5E5E5"> the highest memory</font>

142
00:05:24,680 --> 00:05:30,259
addresses are at the<font color="#E5E5E5"> bottom if you</font>

143
00:05:26,960 --> 00:05:32,120
studied<font color="#E5E5E5"> comp science school yeah you may</font>

144
00:05:30,259 --> 00:05:34,310
be familiar<font color="#E5E5E5"> with the stack being</font>

145
00:05:32,120 --> 00:05:36,289
inverted highest memory addresses at<font color="#E5E5E5"> the</font>

146
00:05:34,310 --> 00:05:37,879
top lowest memory addresses at the

147
00:05:36,289 --> 00:05:40,520
bottom so<font color="#E5E5E5"> it'd be completely flipped and</font>

148
00:05:37,879 --> 00:05:43,699
that makes a lot<font color="#CCCCCC"> of sense</font>

149
00:05:40,520 --> 00:05:45,710
the reason I use this model<font color="#E5E5E5"> is because I</font>

150
00:05:43,699 --> 00:05:48,979
learned not at school but by<font color="#E5E5E5"> following</font>

151
00:05:45,710 --> 00:05:51,378
some tutorials online<font color="#CCCCCC"> various reference</font>

152
00:05:48,979 --> 00:05:53,810
material<font color="#E5E5E5"> and this is how its laid</font><font color="#CCCCCC"> out in</font>

153
00:05:51,379 --> 00:05:55,250
the debugger<font color="#CCCCCC"> that I use if you use the</font>

154
00:05:53,810 --> 00:05:56,599
other model where you're looking at<font color="#E5E5E5"> it</font>

155
00:05:55,250 --> 00:05:58,550
<font color="#E5E5E5">for the highest memory addresses at the</font>

156
00:05:56,599 --> 00:06:00,500
top<font color="#E5E5E5"> that's fine too you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> need to be</font>

157
00:05:58,550 --> 00:06:04,039
cognizant<font color="#CCCCCC"> of which model you're using</font>

158
00:06:00,500 --> 00:06:05,930
<font color="#E5E5E5">and if you're used to using kind of more</font>

159
00:06:04,039 --> 00:06:07,550
like<font color="#E5E5E5"> hacking based tutorials and you're</font>

160
00:06:05,930 --> 00:06:09,919
googling and<font color="#E5E5E5"> you come up come across a</font>

161
00:06:07,550 --> 00:06:12,169
scholarly article<font color="#CCCCCC"> you'll probably</font><font color="#E5E5E5"> find</font>

162
00:06:09,919 --> 00:06:13,669
<font color="#E5E5E5">that it's inverted and it will be bit</font>

163
00:06:12,169 --> 00:06:15,169
wildering for you because<font color="#E5E5E5"> you're going</font>

164
00:06:13,669 --> 00:06:17,750
<font color="#CCCCCC">to question</font><font color="#E5E5E5"> everything you thought you</font>

165
00:06:15,169 --> 00:06:19,878
<font color="#CCCCCC">knew until you realize that it's just</font>

166
00:06:17,750 --> 00:06:22,879
<font color="#E5E5E5">inverted that's that's the main thing</font>

167
00:06:19,879 --> 00:06:25,639
<font color="#CCCCCC">you need to keep in</font><font color="#E5E5E5"> mind so we have our</font>

168
00:06:22,879 --> 00:06:28,190
<font color="#E5E5E5">parent routine stack and when the</font>

169
00:06:25,639 --> 00:06:30,529
program loads into memory it sets up

170
00:06:28,190 --> 00:06:34,550
space on<font color="#E5E5E5"> the stack for the parent</font>

171
00:06:30,529 --> 00:06:35,779
routine main and in it and it puts

172
00:06:34,550 --> 00:06:38,000
<font color="#E5E5E5">certain things like this return address</font>

173
00:06:35,779 --> 00:06:39,210
which we'll talk<font color="#E5E5E5"> about in</font><font color="#CCCCCC"> a bit</font><font color="#E5E5E5"> but it's</font>

174
00:06:38,000 --> 00:06:41,100
how you get back to main

175
00:06:39,210 --> 00:06:42,450
and then it pushes<font color="#CCCCCC"> some other things</font>

176
00:06:41,100 --> 00:06:43,740
like<font color="#E5E5E5"> frame pointers and</font><font color="#CCCCCC"> base pointers</font>

177
00:06:42,450 --> 00:06:45,870
and<font color="#E5E5E5"> they're all important we're</font><font color="#CCCCCC"> not</font>

178
00:06:43,740 --> 00:06:47,550
going<font color="#CCCCCC"> to talk</font><font color="#E5E5E5"> about them and then we</font>

179
00:06:45,870 --> 00:06:51,570
<font color="#E5E5E5">have a we have a variable we have</font><font color="#CCCCCC"> 50</font>

180
00:06:47,550 --> 00:06:54,990
byte variable<font color="#E5E5E5"> called foo here and that</font>

181
00:06:51,570 --> 00:06:56,250
<font color="#E5E5E5">that is our stack for this program the</font>

182
00:06:54,990 --> 00:06:59,580
other thing that we have<font color="#CCCCCC"> is</font><font color="#E5E5E5"> this thing</font>

183
00:06:56,250 --> 00:07:01,590
called<font color="#E5E5E5"> ESP or the top of</font><font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> ESP</font>

184
00:06:59,580 --> 00:07:03,840
is not on the stack it's a CPU register

185
00:07:01,590 --> 00:07:08,640
that stores information<font color="#E5E5E5"> about where the</font>

186
00:07:03,840 --> 00:07:11,159
top of<font color="#CCCCCC"> the stack is and</font><font color="#E5E5E5"> if you had just</font>

187
00:07:08,640 --> 00:07:13,190
<font color="#E5E5E5">this your stack is here if you push some</font>

188
00:07:11,160 --> 00:07:16,440
<font color="#CCCCCC">more data on the stack and push another</font>

189
00:07:13,190 --> 00:07:18,420
variable on let's say we push bar ESP

190
00:07:16,440 --> 00:07:20,760
gets updated to<font color="#E5E5E5"> point to this new top</font><font color="#CCCCCC"> of</font>

191
00:07:18,420 --> 00:07:24,270
<font color="#E5E5E5">the stack in the similar fashion</font><font color="#CCCCCC"> if we</font>

192
00:07:20,760 --> 00:07:26,520
pop bar off the stack because<font color="#E5E5E5"> the stack</font>

193
00:07:24,270 --> 00:07:28,289
is this last in first out kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> model</font>

194
00:07:26,520 --> 00:07:30,299
so if you push something<font color="#E5E5E5"> on the stack</font>

195
00:07:28,290 --> 00:07:31,590
<font color="#CCCCCC">you have to pop it</font><font color="#E5E5E5"> off before</font><font color="#CCCCCC"> you can</font>

196
00:07:30,300 --> 00:07:34,260
get to<font color="#E5E5E5"> other things that are below it on</font>

197
00:07:31,590 --> 00:07:37,229
the stack<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> pop bar off the stack</font>

198
00:07:34,260 --> 00:07:39,090
<font color="#CCCCCC">now ESP</font><font color="#E5E5E5"> is pointing to this location so</font>

199
00:07:37,230 --> 00:07:41,640
<font color="#E5E5E5">you have an idea</font><font color="#CCCCCC"> of what's hem happening</font>

200
00:07:39,090 --> 00:07:44,969
<font color="#E5E5E5">with ESP and you'll understand why this</font>

201
00:07:41,640 --> 00:07:47,099
is important in a bit<font color="#CCCCCC"> I did mention the</font>

202
00:07:44,970 --> 00:07:49,590
ESP is a register that<font color="#CCCCCC"> keeps</font><font color="#E5E5E5"> track of</font>

203
00:07:47,100 --> 00:07:51,960
where<font color="#E5E5E5"> the top of</font><font color="#CCCCCC"> the stack is it stores</font>

204
00:07:49,590 --> 00:07:53,760
the address<font color="#E5E5E5"> it doesn't store contents</font>

205
00:07:51,960 --> 00:07:57,599
like<font color="#E5E5E5"> it doesn't store data it stores a</font>

206
00:07:53,760 --> 00:07:58,849
memory address on the stack<font color="#CCCCCC"> and it's one</font>

207
00:07:57,600 --> 00:08:01,320
<font color="#E5E5E5">of eight general-purpose registers</font>

208
00:07:58,850 --> 00:08:03,870
historically these registers had more

209
00:08:01,320 --> 00:08:05,400
defined functions<font color="#CCCCCC"> in</font><font color="#E5E5E5"> uses in modern</font>

210
00:08:03,870 --> 00:08:07,080
architectures these can be used pretty

211
00:08:05,400 --> 00:08:08,849
flexibly depending on what the compiler

212
00:08:07,080 --> 00:08:11,580
wants to do or what the<font color="#E5E5E5"> developer wants</font>

213
00:08:08,850 --> 00:08:14,550
to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> I encourage</font><font color="#E5E5E5"> you to read about</font><font color="#CCCCCC"> what</font>

214
00:08:11,580 --> 00:08:16,020
<font color="#CCCCCC">each</font><font color="#E5E5E5"> of them does however the only one</font>

215
00:08:14,550 --> 00:08:20,580
you<font color="#E5E5E5"> need to know</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> what we're talking</font>

216
00:08:16,020 --> 00:08:23,520
about here is ESP there are also special

217
00:08:20,580 --> 00:08:26,250
purpose registers<font color="#E5E5E5"> things like excuse me</font>

218
00:08:23,520 --> 00:08:29,820
IP the instruction pointer in the

219
00:08:26,250 --> 00:08:33,000
instruction pointer it controls the flow

220
00:08:29,820 --> 00:08:35,480
of<font color="#E5E5E5"> execution</font><font color="#CCCCCC"> the address that's</font><font color="#E5E5E5"> in a IP</font>

221
00:08:33,000 --> 00:08:39,780
is the<font color="#E5E5E5"> next</font><font color="#CCCCCC"> instruction to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> executed</font>

222
00:08:35,480 --> 00:08:42,690
<font color="#E5E5E5">it doesn't store data it doesn't store</font>

223
00:08:39,780 --> 00:08:45,900
instructions it stores memory addresses

224
00:08:42,690 --> 00:08:48,830
where instructions live and if you can

225
00:08:45,900 --> 00:08:52,779
control what<font color="#E5E5E5"> goes into</font><font color="#CCCCCC"> EIP</font>

226
00:08:48,830 --> 00:08:55,899
<font color="#E5E5E5">then you control</font><font color="#CCCCCC"> the flow of execution</font>

227
00:08:52,779 --> 00:08:58,269
you cannot<font color="#E5E5E5"> modify</font><font color="#CCCCCC"> EIP directly</font><font color="#E5E5E5"> that's</font>

228
00:08:55,899 --> 00:09:00,399
not exactly<font color="#E5E5E5"> true there</font><font color="#CCCCCC"> are certain</font>

229
00:08:58,269 --> 00:09:02,670
circumstances<font color="#CCCCCC"> where you can modify EIP</font>

230
00:09:00,399 --> 00:09:05,170
but most of<font color="#E5E5E5"> the time it's modified by</font>

231
00:09:02,670 --> 00:09:07,139
the<font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> it's the only way</font><font color="#E5E5E5"> to modify</font>

232
00:09:05,170 --> 00:09:10,628
<font color="#CCCCCC">EIP</font>

233
00:09:07,139 --> 00:09:12,129
so the stack if you were to think<font color="#E5E5E5"> about</font>

234
00:09:10,629 --> 00:09:14,709
it again<font color="#CCCCCC"> I I like</font><font color="#E5E5E5"> to think</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> things</font>

235
00:09:12,129 --> 00:09:17,019
<font color="#CCCCCC">visually so I have a program a sample</font>

236
00:09:14,709 --> 00:09:19,119
program<font color="#E5E5E5"> here and it's a command line</font>

237
00:09:17,019 --> 00:09:20,529
program<font color="#CCCCCC"> you run the program you give it</font>

238
00:09:19,120 --> 00:09:23,379
an argument<font color="#CCCCCC"> so you've got a main</font>

239
00:09:20,529 --> 00:09:25,870
function<font color="#CCCCCC"> and main calls foo and it</font>

240
00:09:23,379 --> 00:09:28,569
passes foo whatever we give it on the

241
00:09:25,870 --> 00:09:32,290
<font color="#E5E5E5">command</font><font color="#CCCCCC"> line and if you look at foo</font><font color="#E5E5E5"> it's</font>

242
00:09:28,569 --> 00:09:36,519
sets up one variable<font color="#CCCCCC"> a</font><font color="#E5E5E5"> 12 byte character</font>

243
00:09:32,290 --> 00:09:38,199
<font color="#E5E5E5">C and then it copies whatever it got in</font>

244
00:09:36,519 --> 00:09:39,850
from the command line<font color="#CCCCCC"> using stir copy so</font>

245
00:09:38,199 --> 00:09:42,309
it's not<font color="#E5E5E5"> doing any bounds checking it's</font>

246
00:09:39,850 --> 00:09:44,079
not checking<font color="#E5E5E5"> to see</font><font color="#CCCCCC"> if whatever</font><font color="#E5E5E5"> we gave</font>

247
00:09:42,309 --> 00:09:46,420
it on the command line<font color="#E5E5E5"> will fit in the</font>

248
00:09:44,079 --> 00:09:48,910
buffer<font color="#E5E5E5"> it prints the data out to the</font>

249
00:09:46,420 --> 00:09:51,309
<font color="#E5E5E5">screen and</font><font color="#CCCCCC"> then execution control</font>

250
00:09:48,910 --> 00:09:53,319
returns<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to main and the program</font>

251
00:09:51,309 --> 00:09:54,939
exits<font color="#E5E5E5"> now you don't see anything in</font><font color="#CCCCCC"> here</font>

252
00:09:53,319 --> 00:09:57,339
about<font color="#CCCCCC"> like</font><font color="#E5E5E5"> go back</font><font color="#CCCCCC"> to main that's</font>

253
00:09:54,939 --> 00:10:00,129
because your compiler does some stuff<font color="#CCCCCC"> in</font>

254
00:09:57,339 --> 00:10:02,860
the background<font color="#E5E5E5"> to orchestrate what</font>

255
00:10:00,129 --> 00:10:03,610
happens so when<font color="#E5E5E5"> we look at our stack we</font>

256
00:10:02,860 --> 00:10:06,309
run the program

257
00:10:03,610 --> 00:10:07,809
<font color="#CCCCCC">yo main gets pushed on the stack</font><font color="#E5E5E5"> and it</font>

258
00:10:06,309 --> 00:10:11,199
gets pushed or whatever what do we call

259
00:10:07,809 --> 00:10:13,000
<font color="#E5E5E5">it</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> food gets pushed on the stack so</font>

260
00:10:11,199 --> 00:10:16,990
<font color="#E5E5E5">we have the parent routine</font><font color="#CCCCCC"> out to the</font>

261
00:10:13,000 --> 00:10:18,850
stack on<font color="#CCCCCC"> the bottom main calls foo so to</font>

262
00:10:16,990 --> 00:10:21,250
get<font color="#CCCCCC"> back to foo and Foos</font><font color="#E5E5E5"> done running</font>

263
00:10:18,850 --> 00:10:24,550
<font color="#E5E5E5">the compiler keeps track of the memory</font>

264
00:10:21,250 --> 00:10:26,410
address that called<font color="#E5E5E5"> foo there are the</font>

265
00:10:24,550 --> 00:10:29,649
<font color="#E5E5E5">next address</font><font color="#CCCCCC"> after that point</font>

266
00:10:26,410 --> 00:10:32,230
it calls<font color="#E5E5E5"> stores that address pushes it</font>

267
00:10:29,649 --> 00:10:34,059
<font color="#CCCCCC">onto the stack as the return address so</font>

268
00:10:32,230 --> 00:10:35,350
when foo gets done the<font color="#CCCCCC"> last thing is</font>

269
00:10:34,059 --> 00:10:38,290
<font color="#E5E5E5">going to do is pop that return address</font>

270
00:10:35,350 --> 00:10:40,089
<font color="#CCCCCC">off the stack that gets loaded</font><font color="#E5E5E5"> into</font><font color="#CCCCCC"> EIP</font>

271
00:10:38,290 --> 00:10:41,920
which tells the processor hey you need

272
00:10:40,089 --> 00:10:43,420
<font color="#E5E5E5">to go back to the code segment</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> main</font>

273
00:10:41,920 --> 00:10:48,250
and this is where you're<font color="#CCCCCC"> gonna resume</font>

274
00:10:43,420 --> 00:10:50,860
execution<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we have our variable C and</font>

275
00:10:48,250 --> 00:10:55,179
some other stuff on the stack<font color="#E5E5E5"> so if we</font>

276
00:10:50,860 --> 00:10:58,449
run our program<font color="#E5E5E5"> demo hello it prints out</font>

277
00:10:55,179 --> 00:11:01,660
<font color="#E5E5E5">hello to the screen and then it exits</font><font color="#CCCCCC"> it</font>

278
00:10:58,449 --> 00:11:03,790
didn't crash it didn't have any errors

279
00:11:01,660 --> 00:11:06,819
<font color="#CCCCCC">that we can tell</font><font color="#E5E5E5"> it's it seemed to exit</font>

280
00:11:03,790 --> 00:11:09,339
normally and if we looked<font color="#E5E5E5"> at the stack</font>

281
00:11:06,820 --> 00:11:11,350
we begin to understand why<font color="#E5E5E5"> so we've got</font>

282
00:11:09,340 --> 00:11:13,090
hello<font color="#E5E5E5"> we pushed in five</font><font color="#CCCCCC"> bytes there's</font>

283
00:11:11,350 --> 00:11:15,820
actually a six byte there it's a null

284
00:11:13,090 --> 00:11:19,360
<font color="#E5E5E5">terminator because strings in c and</font><font color="#CCCCCC"> c++</font>

285
00:11:15,820 --> 00:11:22,660
are null terminated<font color="#E5E5E5"> so we have hello</font>

286
00:11:19,360 --> 00:11:26,850
this null terminator everything stayed

287
00:11:22,660 --> 00:11:29,319
within<font color="#E5E5E5"> the bounds of our stack so</font><font color="#CCCCCC"> it</font>

288
00:11:26,850 --> 00:11:32,230
copied that data using<font color="#CCCCCC"> steer copy into</font>

289
00:11:29,320 --> 00:11:34,930
<font color="#CCCCCC">the buffer it printed out hello back to</font>

290
00:11:32,230 --> 00:11:37,030
the screen<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> the return address</font>

291
00:11:34,930 --> 00:11:37,680
is popped off the stack<font color="#E5E5E5"> and loaded into</font>

292
00:11:37,030 --> 00:11:40,270
<font color="#CCCCCC">EIP</font>

293
00:11:37,680 --> 00:11:42,099
which tells the<font color="#E5E5E5"> processor go back to</font>

294
00:11:40,270 --> 00:11:44,740
main at which point the<font color="#E5E5E5"> program exited</font>

295
00:11:42,100 --> 00:11:47,500
just like it was supposed<font color="#CCCCCC"> to what</font>

296
00:11:44,740 --> 00:11:49,080
happens if we<font color="#E5E5E5"> put too much data in what</font>

297
00:11:47,500 --> 00:11:51,550
happens if we<font color="#CCCCCC"> cause a buffer overflow</font>

298
00:11:49,080 --> 00:11:53,560
because<font color="#CCCCCC"> we're using ster copy it doesn't</font>

299
00:11:51,550 --> 00:11:55,780
check to make sure it'll<font color="#CCCCCC"> fit</font><font color="#E5E5E5"> first so in</font>

300
00:11:53,560 --> 00:11:59,079
this case I'm<font color="#E5E5E5"> gonna put 16 A's and we're</font>

301
00:11:55,780 --> 00:12:02,199
gonna put<font color="#CCCCCC"> four hex see</font><font color="#E5E5E5"> season and when I</font>

302
00:11:59,080 --> 00:12:04,480
put these<font color="#E5E5E5"> 16 A's in for hex</font><font color="#CCCCCC"> CCS</font><font color="#E5E5E5"> it</font>

303
00:12:02,200 --> 00:12:06,160
prints<font color="#E5E5E5"> that back out to the screen and</font>

304
00:12:04,480 --> 00:12:08,350
<font color="#E5E5E5">then there's a segmentation</font><font color="#CCCCCC"> fault</font><font color="#E5E5E5"> and</font>

305
00:12:06,160 --> 00:12:10,329
that's an important thing<font color="#E5E5E5"> to note the</font>

306
00:12:08,350 --> 00:12:13,570
buffer<font color="#CCCCCC"> overflow occurs</font><font color="#E5E5E5"> when we copied</font>

307
00:12:10,330 --> 00:12:15,930
too much data into a buffer<font color="#E5E5E5"> but the</font>

308
00:12:13,570 --> 00:12:18,400
crash or whatever is going<font color="#CCCCCC"> to happen</font>

309
00:12:15,930 --> 00:12:20,770
<font color="#CCCCCC">doesn't happen at that point it doesn't</font>

310
00:12:18,400 --> 00:12:25,420
<font color="#E5E5E5">happen until the program tries to use</font>

311
00:12:20,770 --> 00:12:29,140
<font color="#E5E5E5">memory that's in that space so</font><font color="#CCCCCC"> we have</font>

312
00:12:25,420 --> 00:12:32,530
the first<font color="#E5E5E5"> 12 bytes pushed into our</font>

313
00:12:29,140 --> 00:12:34,120
buffer<font color="#E5E5E5"> no problem the next</font><font color="#CCCCCC"> four bytes</font><font color="#E5E5E5"> of</font>

314
00:12:32,530 --> 00:12:36,910
a is<font color="#E5E5E5"> over wrote the base pointer and</font>

315
00:12:34,120 --> 00:12:38,470
then<font color="#E5E5E5"> the next four bit bytes the hex</font><font color="#CCCCCC"> key</font>

316
00:12:36,910 --> 00:12:41,800
<font color="#CCCCCC">sees that</font><font color="#E5E5E5"> we put in overwrite the</font>

317
00:12:38,470 --> 00:12:43,960
overrode the return address<font color="#E5E5E5"> so after if</font>

318
00:12:41,800 --> 00:12:47,859
you remember we look at her code<font color="#E5E5E5"> no</font>

319
00:12:43,960 --> 00:12:50,590
<font color="#CCCCCC">let's back a few more</font><font color="#E5E5E5"> we copied the data</font>

320
00:12:47,860 --> 00:12:53,110
into the<font color="#CCCCCC"> buffer we printed it</font><font color="#E5E5E5"> out to the</font>

321
00:12:50,590 --> 00:12:55,720
<font color="#E5E5E5">screen and</font><font color="#CCCCCC"> then behind</font><font color="#E5E5E5"> the scenes</font>

322
00:12:53,110 --> 00:12:57,700
<font color="#CCCCCC">there's that code to load</font><font color="#E5E5E5"> the return</font>

323
00:12:55,720 --> 00:13:00,580
address in the EIP and<font color="#E5E5E5"> that at that</font>

324
00:12:57,700 --> 00:13:03,700
point<font color="#E5E5E5"> got loaded into</font><font color="#CCCCCC"> EIP the</font><font color="#E5E5E5"> cpu tried</font>

325
00:13:00,580 --> 00:13:05,620
to go to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> address hex</font><font color="#E5E5E5"> si si si si si</font>

326
00:13:03,700 --> 00:13:07,420
si si si and there's no data there

327
00:13:05,620 --> 00:13:09,790
there's no<font color="#E5E5E5"> program in that memory</font>

328
00:13:07,420 --> 00:13:14,920
location<font color="#E5E5E5"> says I don't know what to do</font>

329
00:13:09,790 --> 00:13:16,780
and it crashes<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that in a nutshell is</font>

330
00:13:14,920 --> 00:13:18,880
<font color="#E5E5E5">a buffer overflow if you take nothing</font>

331
00:13:16,780 --> 00:13:20,010
<font color="#E5E5E5">else away</font><font color="#CCCCCC"> from this</font><font color="#E5E5E5"> and you now you know</font>

332
00:13:18,880 --> 00:13:21,840
<font color="#E5E5E5">exactly what happen</font>

333
00:13:20,010 --> 00:13:23,400
<font color="#E5E5E5">when a buffer overflow</font><font color="#CCCCCC"> occurs it's</font>

334
00:13:21,840 --> 00:13:26,820
because you overrode<font color="#E5E5E5"> this return address</font>

335
00:13:23,400 --> 00:13:29,459
<font color="#CCCCCC">and now the CPU doesn't</font><font color="#E5E5E5"> know where</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go</font>

336
00:13:26,820 --> 00:13:31,410
next<font color="#E5E5E5"> and it has to crash now if we do</font>

337
00:13:29,460 --> 00:13:33,570
this correctly<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can actually take</font>

338
00:13:31,410 --> 00:13:35,420
<font color="#CCCCCC">control of the processor and execute</font><font color="#E5E5E5"> our</font>

339
00:13:33,570 --> 00:13:38,010
own code<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> what we're gonna do</font>

340
00:13:35,420 --> 00:13:40,740
<font color="#CCCCCC">we're gonna use a program called vulner</font>

341
00:13:38,010 --> 00:13:43,620
<font color="#CCCCCC">burn bone server was written by a</font><font color="#E5E5E5"> guy</font><font color="#CCCCCC"> by</font>

342
00:13:40,740 --> 00:13:45,350
the name of<font color="#E5E5E5"> Steven Bradshaw</font><font color="#CCCCCC"> and it's an</font>

343
00:13:43,620 --> 00:13:47,640
intentionally vulnerable program

344
00:13:45,350 --> 00:13:51,150
designed<font color="#E5E5E5"> to</font><font color="#CCCCCC"> help you</font><font color="#E5E5E5"> learn</font><font color="#CCCCCC"> how to write</font>

345
00:13:47,640 --> 00:13:53,670
<font color="#E5E5E5">buffer overflows</font><font color="#CCCCCC"> bone server listens on</font>

346
00:13:51,150 --> 00:13:55,860
a socket much like a web server so<font color="#E5E5E5"> if</font>

347
00:13:53,670 --> 00:13:59,370
<font color="#E5E5E5">you netcat to port 80 on a web server</font>

348
00:13:55,860 --> 00:14:02,910
<font color="#CCCCCC">any type</font><font color="#E5E5E5"> get space slash foo space HTTP</font>

349
00:13:59,370 --> 00:14:05,250
slash 1.0 and hit<font color="#CCCCCC"> Enter you have your</font>

350
00:14:02,910 --> 00:14:07,439
command<font color="#E5E5E5"> get you have an argument</font>

351
00:14:05,250 --> 00:14:10,080
/ foo and another argument<font color="#E5E5E5"> HTTP slash</font>

352
00:14:07,440 --> 00:14:11,940
1.0<font color="#E5E5E5"> you hit</font><font color="#CCCCCC"> Enter which sends a</font><font color="#E5E5E5"> carriage</font>

353
00:14:10,080 --> 00:14:15,360
return<font color="#CCCCCC"> line feed so the server now knows</font>

354
00:14:11,940 --> 00:14:17,010
that<font color="#CCCCCC"> delimits the end of the input by</font>

355
00:14:15,360 --> 00:14:19,350
<font color="#E5E5E5">the person connecting to me and now</font><font color="#CCCCCC"> I</font>

356
00:14:17,010 --> 00:14:20,970
need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> process the data</font><font color="#E5E5E5"> in the same</font>

357
00:14:19,350 --> 00:14:22,550
fashion bone server<font color="#CCCCCC"> takes the command</font>

358
00:14:20,970 --> 00:14:24,930
it's<font color="#E5E5E5"> gonna be</font><font color="#CCCCCC"> tea</font><font color="#E5E5E5"> run</font><font color="#CCCCCC"> space period</font>

359
00:14:22,550 --> 00:14:26,640
<font color="#E5E5E5">that's our command everything after the</font>

360
00:14:24,930 --> 00:14:28,859
period<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the arguments of the command</font>

361
00:14:26,640 --> 00:14:30,750
we hit enter<font color="#E5E5E5"> set a</font><font color="#CCCCCC"> caret send a</font><font color="#E5E5E5"> carriage</font>

362
00:14:28,860 --> 00:14:33,630
return<font color="#E5E5E5"> line</font><font color="#CCCCCC"> feed to the server</font><font color="#E5E5E5"> and it</font>

363
00:14:30,750 --> 00:14:37,140
says okay I'm gonna process<font color="#E5E5E5"> that data</font>

364
00:14:33,630 --> 00:14:38,430
return something<font color="#E5E5E5"> back to the screen so</font>

365
00:14:37,140 --> 00:14:39,330
what we're gonna do is we're gonna fuzz

366
00:14:38,430 --> 00:14:41,280
<font color="#CCCCCC">vulner</font>

367
00:14:39,330 --> 00:14:43,710
<font color="#E5E5E5">and we're not</font><font color="#CCCCCC"> talking about fuzzing like</font>

368
00:14:41,280 --> 00:14:46,740
in the sense that<font color="#CCCCCC"> you're fuzzing</font>

369
00:14:43,710 --> 00:14:48,810
protocols<font color="#E5E5E5"> or you're fuzzing</font><font color="#CCCCCC"> a document</font>

370
00:14:46,740 --> 00:14:51,960
standard like a PDF<font color="#CCCCCC"> or a</font><font color="#E5E5E5"> zip trying to</font>

371
00:14:48,810 --> 00:14:53,849
find<font color="#E5E5E5"> opportunities that way what we're</font>

372
00:14:51,960 --> 00:14:56,040
doing is fuzzing<font color="#CCCCCC"> the input</font><font color="#E5E5E5"> length</font><font color="#CCCCCC"> so</font>

373
00:14:53,850 --> 00:14:57,900
sometimes you know<font color="#CCCCCC"> people that are like</font>

374
00:14:56,040 --> 00:14:59,640
exploit developers and reverse engineers

375
00:14:57,900 --> 00:15:01,199
they take exception to<font color="#E5E5E5"> the term fuzzing</font>

376
00:14:59,640 --> 00:15:02,819
so they<font color="#E5E5E5"> think this isn't fuzzing but</font>

377
00:15:01,200 --> 00:15:05,100
there's really no<font color="#E5E5E5"> other better way to</font>

378
00:15:02,820 --> 00:15:07,260
<font color="#CCCCCC">describe it</font><font color="#E5E5E5"> we're seeing</font><font color="#CCCCCC"> how the program</font>

379
00:15:05,100 --> 00:15:11,510
responds to progressively larger and

380
00:15:07,260 --> 00:15:15,660
larger amounts<font color="#CCCCCC"> of input so to that end</font>

381
00:15:11,510 --> 00:15:16,950
I'm gonna switch over<font color="#CCCCCC"> to my VM and if I</font>

382
00:15:15,660 --> 00:15:18,480
switch into<font color="#E5E5E5"> my VM and I'm doing</font>

383
00:15:16,950 --> 00:15:19,860
<font color="#E5E5E5">something and and you don't see on the</font>

384
00:15:18,480 --> 00:15:24,330
screen reminding me sometimes I forget

385
00:15:19,860 --> 00:15:26,280
to hit<font color="#E5E5E5"> the key combo so here we go so I</font>

386
00:15:24,330 --> 00:15:30,060
got a Python program<font color="#E5E5E5"> it's very simple</font>

387
00:15:26,280 --> 00:15:31,920
<font color="#CCCCCC">program and we set up a counter we still</font>

388
00:15:30,060 --> 00:15:33,279
have our command<font color="#E5E5E5"> T run space period and</font>

389
00:15:31,920 --> 00:15:35,469
we set up an empty<font color="#E5E5E5"> list</font>

390
00:15:33,279 --> 00:15:37,569
we're gonna<font color="#CCCCCC"> populate that</font><font color="#E5E5E5"> list with</font>

391
00:15:35,470 --> 00:15:39,759
strings that<font color="#CCCCCC"> RT</font><font color="#E5E5E5"> run space period and</font>

392
00:15:37,569 --> 00:15:41,709
some number of<font color="#E5E5E5"> A's and every time we</font>

393
00:15:39,759 --> 00:15:44,259
loop<font color="#CCCCCC"> through and</font><font color="#E5E5E5"> add another item</font><font color="#CCCCCC"> to the</font>

394
00:15:41,709 --> 00:15:46,029
list<font color="#CCCCCC"> it's going to be</font><font color="#E5E5E5"> more A's we're</font>

395
00:15:44,259 --> 00:15:48,790
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> use some simple socket code to</font>

396
00:15:46,029 --> 00:15:51,819
send<font color="#E5E5E5"> this</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the server and then we are</font>

397
00:15:48,790 --> 00:15:56,079
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> wow that's weird it's</font><font color="#CCCCCC"> like half</font>

398
00:15:51,819 --> 00:15:57,519
<font color="#CCCCCC">cutoff up there isn't</font><font color="#E5E5E5"> it different</font>

399
00:15:56,079 --> 00:16:03,008
<font color="#E5E5E5">resolution never ran into</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> issue</font>

400
00:15:57,519 --> 00:16:06,519
before so<font color="#E5E5E5"> so anyways we're gonna send</font>

401
00:16:03,009 --> 00:16:07,809
<font color="#E5E5E5">that to the server</font><font color="#CCCCCC"> and and we're gonna</font>

402
00:16:06,519 --> 00:16:10,180
receive<font color="#E5E5E5"> a response we're gonna print it</font>

403
00:16:07,809 --> 00:16:13,719
<font color="#E5E5E5">back out to</font><font color="#CCCCCC"> the screen</font><font color="#E5E5E5"> very simple and</font>

404
00:16:10,180 --> 00:16:16,180
I've used this exact Python script to<font color="#CCCCCC"> do</font>

405
00:16:13,720 --> 00:16:18,160
multiple<font color="#E5E5E5"> find buffer overflows and</font>

406
00:16:16,180 --> 00:16:19,748
multiple socket based programs<font color="#E5E5E5"> just got</font>

407
00:16:18,160 --> 00:16:23,769
a change of<font color="#E5E5E5"> the command and the data you</font>

408
00:16:19,749 --> 00:16:26,230
send<font color="#E5E5E5"> so we're going</font><font color="#CCCCCC"> to use the immunity</font>

409
00:16:23,769 --> 00:16:27,189
debugger today<font color="#CCCCCC"> you can use another</font>

410
00:16:26,230 --> 00:16:29,259
debugger if you want

411
00:16:27,189 --> 00:16:32,980
I like immunity<font color="#CCCCCC"> so that's what I'm gonna</font>

412
00:16:29,259 --> 00:16:35,499
use<font color="#E5E5E5"> so over here on the</font><font color="#CCCCCC"> left if you've</font>

413
00:16:32,980 --> 00:16:39,100
never used<font color="#E5E5E5"> a debugger before we have our</font>

414
00:16:35,499 --> 00:16:41,559
<font color="#CCCCCC">code</font><font color="#E5E5E5"> right so this is the disassembled</font>

415
00:16:39,100 --> 00:16:46,509
code<font color="#E5E5E5"> these</font><font color="#CCCCCC"> are instructions like push</font>

416
00:16:41,559 --> 00:16:48,459
EBP<font color="#E5E5E5"> move EBP ESP this is the code</font><font color="#CCCCCC"> of the</font>

417
00:16:46,509 --> 00:16:50,170
<font color="#CCCCCC">program these are</font><font color="#E5E5E5"> these memory addresses</font>

418
00:16:48,459 --> 00:16:53,050
<font color="#CCCCCC">associated with it so when there's a</font>

419
00:16:50,170 --> 00:16:54,490
when we have a return address<font color="#E5E5E5"> normally</font>

420
00:16:53,050 --> 00:16:56,349
<font color="#E5E5E5">for the program is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be pointing</font>

421
00:16:54,490 --> 00:16:58,089
into one of<font color="#E5E5E5"> these memory addresses where</font>

422
00:16:56,350 --> 00:17:00,819
the program lives<font color="#E5E5E5"> that's the next</font>

423
00:16:58,089 --> 00:17:05,140
instruction to<font color="#E5E5E5"> execute over</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> our</font>

424
00:17:00,819 --> 00:17:07,599
registers so we have things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> EAX</font><font color="#E5E5E5"> and</font>

425
00:17:05,140 --> 00:17:11,589
ESP we see right here<font color="#CCCCCC"> we've got ESP</font>

426
00:17:07,599 --> 00:17:13,990
<font color="#E5E5E5">we've got a IP so this is pointing to</font>

427
00:17:11,589 --> 00:17:15,970
the top of the stack down here

428
00:17:13,990 --> 00:17:18,730
VIP<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the next instruction</font><font color="#E5E5E5"> that's going</font>

429
00:17:15,970 --> 00:17:21,069
to execute<font color="#E5E5E5"> so now you're familiar with</font>

430
00:17:18,730 --> 00:17:24,569
<font color="#E5E5E5">what the debugger looks like I'm</font><font color="#CCCCCC"> gonna</font>

431
00:17:21,069 --> 00:17:24,569
<font color="#CCCCCC">go ahead</font><font color="#E5E5E5"> and run my</font><font color="#CCCCCC"> python script</font>

432
00:17:27,170 --> 00:17:33,230
and it's<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to send data you see that</font>

433
00:17:31,130 --> 00:17:35,390
sends a hundred<font color="#E5E5E5"> bytes and the server</font>

434
00:17:33,230 --> 00:17:37,490
says<font color="#CCCCCC"> t run complete</font><font color="#E5E5E5"> and it keeps doing</font>

435
00:17:35,390 --> 00:17:39,410
<font color="#E5E5E5">that all the</font><font color="#CCCCCC"> way up to 1900 bytes but</font>

436
00:17:37,490 --> 00:17:43,280
when we get<font color="#E5E5E5"> to 20 100 bytes I don't have</font>

437
00:17:39,410 --> 00:17:52,250
a response back<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> program from</font>

438
00:17:43,280 --> 00:17:54,260
<font color="#CCCCCC">phone server</font><font color="#E5E5E5"> and if we go to</font><font color="#CCCCCC"> our</font>

439
00:17:52,250 --> 00:17:55,460
debugger<font color="#E5E5E5"> you'll see that we have an</font>

440
00:17:54,260 --> 00:17:59,170
<font color="#E5E5E5">access violation it says access</font>

441
00:17:55,460 --> 00:18:01,460
<font color="#CCCCCC">violation when executing 41 41 41 41</font>

442
00:17:59,170 --> 00:18:04,070
<font color="#CCCCCC">there's no code over here there's</font><font color="#E5E5E5"> no</font>

443
00:18:01,460 --> 00:18:06,230
disassembled code if we look at what's

444
00:18:04,070 --> 00:18:08,510
in<font color="#CCCCCC"> the registers we see that ESP is</font>

445
00:18:06,230 --> 00:18:11,300
pointing to a location that's filled

446
00:18:08,510 --> 00:18:13,280
with<font color="#E5E5E5"> A's ESP is not filled with a is</font>

447
00:18:11,300 --> 00:18:14,600
itself that's a memory<font color="#E5E5E5"> address that it's</font>

448
00:18:13,280 --> 00:18:17,780
pointing to is pointing to the top of

449
00:18:14,600 --> 00:18:24,290
the stack<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we see that a IP is 41 41</font>

450
00:18:17,780 --> 00:18:26,330
41 41<font color="#CCCCCC"> so what are those</font><font color="#E5E5E5"> 40 ones right</font>

451
00:18:24,290 --> 00:18:29,210
<font color="#E5E5E5">and ASCII capital a it's so it's the hex</font>

452
00:18:26,330 --> 00:18:32,750
<font color="#CCCCCC">value for</font><font color="#E5E5E5"> ASCII capital</font><font color="#CCCCCC"> ace so we have</font>

453
00:18:29,210 --> 00:18:33,650
sent in<font color="#E5E5E5"> some capital</font><font color="#CCCCCC"> a's and then we see</font>

454
00:18:32,750 --> 00:18:37,160
the<font color="#E5E5E5"> EIP</font>

455
00:18:33,650 --> 00:18:39,470
is filled with capital a's so at this

456
00:18:37,160 --> 00:18:41,270
<font color="#E5E5E5">point we know we can't write directly to</font>

457
00:18:39,470 --> 00:18:43,130
<font color="#CCCCCC">EIP that happens by overriding the</font>

458
00:18:41,270 --> 00:18:45,889
return address<font color="#E5E5E5"> so I must have sent</font>

459
00:18:43,130 --> 00:18:47,840
enough input<font color="#CCCCCC"> in that I</font><font color="#E5E5E5"> overrode the</font>

460
00:18:45,890 --> 00:18:50,270
<font color="#E5E5E5">return address I know there's a buffer</font>

461
00:18:47,840 --> 00:18:53,149
overflow and I now know I can control

462
00:18:50,270 --> 00:18:55,610
what<font color="#CCCCCC"> goes into the return address if we</font>

463
00:18:53,150 --> 00:18:57,020
look down<font color="#CCCCCC"> here in the stack</font><font color="#E5E5E5"> you know we</font>

464
00:18:55,610 --> 00:18:58,879
can see that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> looks like we're</font>

465
00:18:57,020 --> 00:19:01,639
somewhere towards<font color="#E5E5E5"> the end of our input</font>

466
00:18:58,880 --> 00:19:03,020
we don't know how far we don't<font color="#E5E5E5"> have any</font>

467
00:19:01,640 --> 00:19:05,630
more<font color="#E5E5E5"> information at this point</font><font color="#CCCCCC"> all we</font>

468
00:19:03,020 --> 00:19:07,760
<font color="#CCCCCC">know is that we pushed a bunch of</font><font color="#E5E5E5"> data</font>

469
00:19:05,630 --> 00:19:10,040
in the stack and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> overrode the return</font>

470
00:19:07,760 --> 00:19:13,250
address and<font color="#CCCCCC"> the program crashed so to be</font>

471
00:19:10,040 --> 00:19:14,930
able<font color="#E5E5E5"> to figure out what to do next</font><font color="#CCCCCC"> we</font>

472
00:19:13,250 --> 00:19:17,680
need to figure out how many<font color="#E5E5E5"> bytes does</font>

473
00:19:14,930 --> 00:19:23,390
it take to overwrite<font color="#CCCCCC"> the return</font><font color="#E5E5E5"> address</font>

474
00:19:17,680 --> 00:19:25,430
so<font color="#CCCCCC"> key points the program broke</font>

475
00:19:23,390 --> 00:19:27,200
somewhere between<font color="#CCCCCC"> 1900 and 2100 bytes</font>

476
00:19:25,430 --> 00:19:30,200
and<font color="#E5E5E5"> we know we</font><font color="#CCCCCC"> overrode the</font><font color="#E5E5E5"> return</font>

477
00:19:27,200 --> 00:19:32,420
address with those<font color="#CCCCCC"> a's</font><font color="#E5E5E5"> so we're going to</font>

478
00:19:30,200 --> 00:19:34,490
use pattern create pattern create is a

479
00:19:32,420 --> 00:19:36,440
<font color="#CCCCCC">Metasploit utility that generates a</font>

480
00:19:34,490 --> 00:19:38,930
<font color="#E5E5E5">non-repeating string of characters all</font>

481
00:19:36,440 --> 00:19:40,880
the<font color="#CCCCCC"> way up to about</font><font color="#E5E5E5"> 20,000 bytes and</font>

482
00:19:38,930 --> 00:19:41,320
every time you run it it will create the

483
00:19:40,880 --> 00:19:43,630
<font color="#E5E5E5">same</font>

484
00:19:41,320 --> 00:19:45,759
pattern<font color="#E5E5E5"> and that'll become important in</font>

485
00:19:43,630 --> 00:19:49,720
<font color="#E5E5E5">a</font><font color="#CCCCCC"> minute I'm gonna</font><font color="#E5E5E5"> choose</font><font color="#CCCCCC"> 2500</font><font color="#E5E5E5"> bytes so</font>

486
00:19:45,759 --> 00:19:52,809
I run pattern create<font color="#CCCCCC"> Daschle 2500 and</font>

487
00:19:49,720 --> 00:19:56,380
I've already generated a another Python

488
00:19:52,809 --> 00:19:59,049
<font color="#E5E5E5">script that has no no that's the wrong</font>

489
00:19:56,380 --> 00:20:01,179
one<font color="#CCCCCC"> there we go there</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> go</font>

490
00:19:59,049 --> 00:20:02,379
so<font color="#E5E5E5"> I've already generated a Python</font>

491
00:20:01,179 --> 00:20:05,559
<font color="#CCCCCC">script that has</font><font color="#E5E5E5"> this it's got our</font>

492
00:20:02,380 --> 00:20:08,470
command and this<font color="#E5E5E5"> non repeating string of</font>

493
00:20:05,559 --> 00:20:13,120
characters<font color="#CCCCCC"> and I'm</font><font color="#E5E5E5"> gonna send it</font><font color="#CCCCCC"> to the</font>

494
00:20:08,470 --> 00:20:15,070
<font color="#E5E5E5">server and we see that we do not get a</font>

495
00:20:13,120 --> 00:20:18,899
<font color="#E5E5E5">response back from from Vaughn server</font>

496
00:20:15,070 --> 00:20:22,480
<font color="#E5E5E5">and if we come into if we come in here</font>

497
00:20:18,899 --> 00:20:25,600
to immunity<font color="#E5E5E5"> we see that we have access</font>

498
00:20:22,480 --> 00:20:30,100
<font color="#CCCCCC">violation when executing</font><font color="#E5E5E5"> 3 9 6 F 4 3 3 8</font>

499
00:20:25,600 --> 00:20:32,408
it means<font color="#E5E5E5"> E I P is 3</font><font color="#CCCCCC"> 9 6 F 4 3</font><font color="#E5E5E5"> 3 8</font>

500
00:20:30,100 --> 00:20:35,199
<font color="#E5E5E5">there's no code there so the program</font>

501
00:20:32,409 --> 00:20:37,509
crashed so what you<font color="#E5E5E5"> would do now is you</font>

502
00:20:35,200 --> 00:20:39,039
were<font color="#CCCCCC"> write down that value 3 9 6</font><font color="#E5E5E5"> F 4 3 3</font>

503
00:20:37,509 --> 00:20:40,299
<font color="#E5E5E5">8 because we're gonna use that in the</font>

504
00:20:39,039 --> 00:20:43,629
next<font color="#CCCCCC"> step but I want to</font><font color="#E5E5E5"> point out a</font>

505
00:20:40,299 --> 00:20:45,759
couple<font color="#CCCCCC"> of things to you first we have</font>

506
00:20:43,629 --> 00:20:50,289
ESP is pointing to this<font color="#E5E5E5"> location that</font>

507
00:20:45,759 --> 00:20:55,149
<font color="#E5E5E5">starts with CP 0</font><font color="#CCCCCC"> C if</font><font color="#E5E5E5"> we go down here in</font>

508
00:20:50,289 --> 00:20:57,309
the stack<font color="#E5E5E5"> we can see there's where the</font>

509
00:20:55,149 --> 00:21:01,508
stack pointer<font color="#CCCCCC"> is pointing to CP 0 C</font>

510
00:20:57,309 --> 00:21:04,899
immediately<font color="#CCCCCC"> before</font><font color="#E5E5E5"> that 3 9 6 F 4 3 3 8</font>

511
00:21:01,509 --> 00:21:07,389
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is the value that</font><font color="#E5E5E5"> went into</font><font color="#CCCCCC"> e IP so</font>

512
00:21:04,899 --> 00:21:09,758
that means at this point that's where

513
00:21:07,389 --> 00:21:11,139
<font color="#E5E5E5">our return address lives in our input we</font>

514
00:21:09,759 --> 00:21:13,990
still don't know<font color="#E5E5E5"> how</font><font color="#CCCCCC"> many bytes that</font>

515
00:21:11,139 --> 00:21:16,689
<font color="#E5E5E5">took to get there but we</font><font color="#CCCCCC"> know that this</font>

516
00:21:13,990 --> 00:21:20,429
point<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> spot where a return address</font>

517
00:21:16,690 --> 00:21:23,710
lives in our<font color="#CCCCCC"> input we also know that</font>

518
00:21:20,429 --> 00:21:25,690
because ESP is pointing<font color="#CCCCCC"> here and the</font>

519
00:21:23,710 --> 00:21:27,490
stack pointer gets updated as things get

520
00:21:25,690 --> 00:21:29,950
pushed on the stack and<font color="#E5E5E5"> popped off the</font>

521
00:21:27,490 --> 00:21:32,500
stack<font color="#CCCCCC"> we can make a</font><font color="#E5E5E5"> reasonable guess</font>

522
00:21:29,950 --> 00:21:34,330
that the program is designed<font color="#E5E5E5"> to take</font>

523
00:21:32,500 --> 00:21:38,200
some amount<font color="#E5E5E5"> of data somewhere between</font>

524
00:21:34,330 --> 00:21:40,899
1900 and 2100 bytes of data it pops that

525
00:21:38,200 --> 00:21:43,360
data off the<font color="#E5E5E5"> stack</font><font color="#CCCCCC"> it does something</font>

526
00:21:40,899 --> 00:21:45,070
<font color="#CCCCCC">with it and then the return address gets</font>

527
00:21:43,360 --> 00:21:47,500
popped off the stack loaded into<font color="#CCCCCC"> EIP</font>

528
00:21:45,070 --> 00:21:50,110
which means<font color="#E5E5E5"> the stack pointer gets</font>

529
00:21:47,500 --> 00:21:53,249
updated to<font color="#E5E5E5"> point to this location which</font>

530
00:21:50,110 --> 00:21:56,019
is immediately<font color="#E5E5E5"> after the return address</font>

531
00:21:53,249 --> 00:21:58,870
so someone asked<font color="#E5E5E5"> before why did I choose</font>

532
00:21:56,019 --> 00:22:01,480
<font color="#CCCCCC">2,500 bites</font><font color="#E5E5E5"> well I chose 2,500 bites</font>

533
00:21:58,870 --> 00:22:03,939
<font color="#E5E5E5">because I know that a typical</font><font color="#CCCCCC"> Metasploit</font>

534
00:22:01,480 --> 00:22:05,799
payload<font color="#CCCCCC"> you know if I'm</font><font color="#E5E5E5"> not trying to</font>

535
00:22:03,940 --> 00:22:10,419
<font color="#E5E5E5">create small shellcode is gonna be</font>

536
00:22:05,799 --> 00:22:12,970
<font color="#CCCCCC">between 250 to 350 bytes in length</font><font color="#E5E5E5"> to</font>

537
00:22:10,419 --> 00:22:15,159
pop calc or get<font color="#E5E5E5"> ash and get a shell do</font>

538
00:22:12,970 --> 00:22:17,559
meterpreter something like that so I

539
00:22:15,159 --> 00:22:20,889
need<font color="#CCCCCC"> to make sure there's space on the</font>

540
00:22:17,559 --> 00:22:22,539
stack to store<font color="#E5E5E5"> that</font><font color="#CCCCCC"> data sometimes</font>

541
00:22:20,889 --> 00:22:24,039
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> not and you have to do things</font>

542
00:22:22,539 --> 00:22:26,619
<font color="#CCCCCC">like egg Hunter exploits and there's</font>

543
00:22:24,039 --> 00:22:28,809
other ways of doing overflows and<font color="#E5E5E5"> those</font>

544
00:22:26,619 --> 00:22:32,019
are more advanced but because this<font color="#E5E5E5"> is a</font>

545
00:22:28,809 --> 00:22:34,450
traditional buffer overflow 101 we want

546
00:22:32,019 --> 00:22:35,830
to make this as simple<font color="#CCCCCC"> as possible so we</font>

547
00:22:34,450 --> 00:22:38,529
<font color="#E5E5E5">need to make</font><font color="#CCCCCC"> sure that there's space on</font>

548
00:22:35,830 --> 00:22:41,399
the stack and we can see here there's

549
00:22:38,529 --> 00:22:46,600
<font color="#CCCCCC">quite a bit of</font><font color="#E5E5E5"> space on the stack after</font>

550
00:22:41,399 --> 00:22:48,369
<font color="#E5E5E5">after the the stack pointer</font><font color="#CCCCCC"> so we can</font>

551
00:22:46,600 --> 00:22:50,918
feel reasonably confident<font color="#E5E5E5"> that we have</font>

552
00:22:48,369 --> 00:22:54,789
enough<font color="#E5E5E5"> room for shellcode so we make</font>

553
00:22:50,919 --> 00:22:56,529
note of<font color="#E5E5E5"> that 3 9 6</font><font color="#CCCCCC"> F 4 3 3</font><font color="#E5E5E5"> 8 we write</font>

554
00:22:54,789 --> 00:22:59,549
that down and<font color="#E5E5E5"> we're gonna go back and</font>

555
00:22:56,529 --> 00:23:05,889
we're going<font color="#CCCCCC"> to use a</font><font color="#E5E5E5"> utility called</font>

556
00:22:59,549 --> 00:23:07,809
<font color="#E5E5E5">pattern offset so pattern offset is the</font>

557
00:23:05,889 --> 00:23:10,769
<font color="#CCCCCC">compliment</font><font color="#E5E5E5"> to pattern create because</font>

558
00:23:07,809 --> 00:23:13,539
pattern create creates the same string

559
00:23:10,769 --> 00:23:15,029
every time and the only<font color="#CCCCCC"> thing that</font>

560
00:23:13,539 --> 00:23:17,980
changes<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> length that you tell it</font>

561
00:23:15,029 --> 00:23:20,200
<font color="#E5E5E5">pattern offset can tell you exactly</font><font color="#CCCCCC"> how</font>

562
00:23:17,980 --> 00:23:21,909
far into that<font color="#E5E5E5"> string how many carriers</font>

563
00:23:20,200 --> 00:23:23,889
<font color="#CCCCCC">characters that took to get</font><font color="#E5E5E5"> to that</font>

564
00:23:21,909 --> 00:23:27,639
point<font color="#E5E5E5"> so we give</font><font color="#CCCCCC"> it pattern create our</font>

565
00:23:23,889 --> 00:23:30,369
pattern offset - cue<font color="#E5E5E5"> 3 9 6 F 4 3 3 8 and</font>

566
00:23:27,639 --> 00:23:34,869
it tells us the exact match at offset

567
00:23:30,369 --> 00:23:37,360
2006 that means it took<font color="#CCCCCC"> 2006 bytes of</font>

568
00:23:34,869 --> 00:23:39,369
data in our argument the<font color="#E5E5E5"> tear on command</font>

569
00:23:37,360 --> 00:23:44,110
before<font color="#CCCCCC"> we got to the first byte of the</font>

570
00:23:39,369 --> 00:23:46,090
<font color="#E5E5E5">return address so we're</font><font color="#CCCCCC"> going to need to</font>

571
00:23:44,110 --> 00:23:51,369
validate<font color="#E5E5E5"> that we want to make sure that</font>

572
00:23:46,090 --> 00:23:54,129
it is<font color="#CCCCCC"> 2006 bytes so we're going to send</font>

573
00:23:51,369 --> 00:23:56,678
in 2006 bytes<font color="#CCCCCC"> a is</font><font color="#E5E5E5"> I'm gonna send in 4</font>

574
00:23:54,129 --> 00:23:59,769
bytes of<font color="#E5E5E5"> B's and then some number</font><font color="#CCCCCC"> of C's</font>

575
00:23:56,679 --> 00:24:02,440
<font color="#E5E5E5">and if we are correct at</font><font color="#CCCCCC"> 2006 bytes</font><font color="#E5E5E5"> is</font>

576
00:23:59,769 --> 00:24:04,480
how many bytes it takes<font color="#E5E5E5"> in our</font><font color="#CCCCCC"> input to</font>

577
00:24:02,440 --> 00:24:06,399
the<font color="#CCCCCC"> T run command</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> we overwrite</font>

578
00:24:04,480 --> 00:24:06,669
the return address the return<font color="#E5E5E5"> address</font>

579
00:24:06,399 --> 00:24:10,508
will

580
00:24:06,669 --> 00:24:12,460
be 42 42 42 42<font color="#CCCCCC"> because that is the hex</font>

581
00:24:10,509 --> 00:24:15,669
representation of an<font color="#E5E5E5"> ASCII</font><font color="#CCCCCC"> Capitol beat</font>

582
00:24:12,460 --> 00:24:17,409
<font color="#E5E5E5">I should point out at this point these</font>

583
00:24:15,669 --> 00:24:19,869
<font color="#E5E5E5">slides are available on</font><font color="#CCCCCC"> my github as</font>

584
00:24:17,409 --> 00:24:22,090
<font color="#CCCCCC">well as these Python scripts</font><font color="#E5E5E5"> so when you</font>

585
00:24:19,869 --> 00:24:23,769
leave if you want<font color="#E5E5E5"> to follow</font><font color="#CCCCCC"> along</font><font color="#E5E5E5"> you</font>

586
00:24:22,090 --> 00:24:26,049
can<font color="#E5E5E5"> download violence over there's links</font>

587
00:24:23,769 --> 00:24:27,879
in here<font color="#CCCCCC"> and you can</font><font color="#E5E5E5"> use these Python</font>

588
00:24:26,049 --> 00:24:29,379
scripts<font color="#CCCCCC"> just to see how it works</font><font color="#E5E5E5"> and</font>

589
00:24:27,879 --> 00:24:31,719
then<font color="#E5E5E5"> once you're comfortable you can</font>

590
00:24:29,379 --> 00:24:33,340
walk<font color="#CCCCCC"> through</font><font color="#E5E5E5"> the process yourself</font><font color="#CCCCCC"> I also</font>

591
00:24:31,720 --> 00:24:35,980
have<font color="#E5E5E5"> links to some learning resources</font>

592
00:24:33,340 --> 00:24:37,238
and<font color="#E5E5E5"> things like that</font><font color="#CCCCCC"> as well</font><font color="#E5E5E5"> so I'll put</font>

593
00:24:35,980 --> 00:24:41,529
<font color="#CCCCCC">that information</font><font color="#E5E5E5"> on the screen at the</font>

594
00:24:37,239 --> 00:24:45,369
<font color="#CCCCCC">end here so at this point I have the</font>

595
00:24:41,529 --> 00:24:47,799
<font color="#E5E5E5">script that</font><font color="#CCCCCC"> I want to use to see indeed</font>

596
00:24:45,369 --> 00:24:50,168
can<font color="#E5E5E5"> I overwrite the return address with</font>

597
00:24:47,799 --> 00:24:57,460
these<font color="#E5E5E5"> B's so I'm gonna go ahead and run</font>

598
00:24:50,169 --> 00:25:02,470
<font color="#E5E5E5">that</font><font color="#CCCCCC"> oh hey</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> alright</font>

599
00:24:57,460 --> 00:25:04,749
so I ran that<font color="#CCCCCC"> in this script</font><font color="#E5E5E5"> there we go</font>

600
00:25:02,470 --> 00:25:08,679
so<font color="#E5E5E5"> there's a script I sent 2006 a is</font>

601
00:25:04,749 --> 00:25:10,269
<font color="#CCCCCC">four B's and some C's and our script</font><font color="#E5E5E5"> ran</font>

602
00:25:08,679 --> 00:25:13,059
we did<font color="#E5E5E5"> not get a</font><font color="#CCCCCC"> response</font><font color="#E5E5E5"> from the</font>

603
00:25:10,269 --> 00:25:17,019
server<font color="#CCCCCC"> and if we come down here into</font>

604
00:25:13,059 --> 00:25:19,239
immunity access<font color="#CCCCCC"> violation when executing</font>

605
00:25:17,019 --> 00:25:22,869
42 42 42 which<font color="#CCCCCC"> is exactly what we</font>

606
00:25:19,239 --> 00:25:26,710
expected<font color="#E5E5E5"> and if we look in the stack we</font>

607
00:25:22,869 --> 00:25:30,209
see that there is<font color="#E5E5E5"> the return address</font>

608
00:25:26,710 --> 00:25:35,169
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> the end of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> 2006 bytes and</font>

609
00:25:30,210 --> 00:25:37,269
there is<font color="#E5E5E5"> our data that came after the</font>

610
00:25:35,169 --> 00:25:40,179
return address<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> gonna be where</font>

611
00:25:37,269 --> 00:25:41,799
we're gonna put<font color="#E5E5E5"> our shellcode</font><font color="#CCCCCC"> I want to</font>

612
00:25:40,179 --> 00:25:46,600
back<font color="#CCCCCC"> up I</font><font color="#E5E5E5"> forgot to point something out</font>

613
00:25:41,799 --> 00:25:49,269
<font color="#CCCCCC">to you</font><font color="#E5E5E5"> so this is this is what it looked</font>

614
00:25:46,600 --> 00:25:54,998
like when we<font color="#E5E5E5"> looked at</font><font color="#CCCCCC"> 3 9 6 F 4 3 3</font><font color="#E5E5E5"> 8</font>

615
00:25:49,269 --> 00:25:56,830
and since we know<font color="#CCCCCC"> that what's in a IP is</font>

616
00:25:54,999 --> 00:26:01,919
the<font color="#E5E5E5"> hex representation of ASCII</font>

617
00:25:56,830 --> 00:26:06,009
characters 3 9 is a 9 and 3/8 is an 8

618
00:26:01,919 --> 00:26:11,259
but<font color="#CCCCCC"> we</font><font color="#E5E5E5"> look here</font><font color="#CCCCCC"> oh hey what's where</font>

619
00:26:06,009 --> 00:26:18,099
yeah<font color="#CCCCCC"> wow I just like jumped</font><font color="#E5E5E5"> I don't know</font>

620
00:26:11,259 --> 00:26:20,580
how many slides<font color="#CCCCCC"> there we go</font>

621
00:26:18,099 --> 00:26:25,210
so

622
00:26:20,580 --> 00:26:26,710
it's the<font color="#CCCCCC"> value that in there if you look</font>

623
00:26:25,210 --> 00:26:29,710
on the left<font color="#E5E5E5"> its</font><font color="#CCCCCC"> are on the right it says</font>

624
00:26:26,710 --> 00:26:32,200
<font color="#CCCCCC">eight zero nine</font><font color="#E5E5E5"> but the value that's in</font>

625
00:26:29,710 --> 00:26:34,390
<font color="#CCCCCC">E I P is three nine six</font><font color="#E5E5E5"> F four three</font>

626
00:26:32,200 --> 00:26:40,000
three<font color="#CCCCCC"> eight</font><font color="#E5E5E5"> so it's flipped</font><font color="#CCCCCC"> why is it</font>

627
00:26:34,390 --> 00:26:42,550
flipped<font color="#E5E5E5"> end in we're on a little endian</font>

628
00:26:40,000 --> 00:26:44,380
system so<font color="#E5E5E5"> things get pushed onto the</font>

629
00:26:42,550 --> 00:26:45,790
stack<font color="#E5E5E5"> and reverse byte order so that's</font>

630
00:26:44,380 --> 00:26:47,920
<font color="#E5E5E5">something you'll need to remember when</font>

631
00:26:45,790 --> 00:26:49,570
you're putting in<font color="#CCCCCC"> your return address</font><font color="#E5E5E5"> if</font>

632
00:26:47,920 --> 00:26:52,120
we're on a<font color="#CCCCCC"> mainframe or</font><font color="#E5E5E5"> another big</font>

633
00:26:49,570 --> 00:26:53,740
<font color="#E5E5E5">endian system we put</font><font color="#CCCCCC"> things</font><font color="#E5E5E5"> in in the</font>

634
00:26:52,120 --> 00:26:56,320
order that we expected to see them

635
00:26:53,740 --> 00:26:57,730
immunity helpfully reverses them for us

636
00:26:56,320 --> 00:26:59,470
so we can<font color="#CCCCCC"> see it but it's a little</font>

637
00:26:57,730 --> 00:27:04,270
endian system so the data got pushed

638
00:26:59,470 --> 00:27:06,130
<font color="#E5E5E5">onto the stack and</font><font color="#CCCCCC"> reverse</font><font color="#E5E5E5"> okay so we</font>

639
00:27:04,270 --> 00:27:13,420
did pattern offset we verified<font color="#CCCCCC"> our</font>

640
00:27:06,130 --> 00:27:16,059
offset<font color="#CCCCCC"> so at this point we know that our</font>

641
00:27:13,420 --> 00:27:18,250
stack pointer is pointing to the start

642
00:27:16,059 --> 00:27:20,980
of those<font color="#E5E5E5"> C's we know we can reliably</font>

643
00:27:18,250 --> 00:27:23,380
overwrite the<font color="#CCCCCC"> return address</font><font color="#E5E5E5"> so if we</font>

644
00:27:20,980 --> 00:27:26,230
<font color="#E5E5E5">could put shellcode in in the place</font>

645
00:27:23,380 --> 00:27:28,420
where<font color="#E5E5E5"> those C's start we could execute</font>

646
00:27:26,230 --> 00:27:30,760
it if we had a way<font color="#CCCCCC"> to tell the computer</font>

647
00:27:28,420 --> 00:27:34,030
<font color="#E5E5E5">hey you need to go to this</font><font color="#CCCCCC"> location and</font>

648
00:27:30,760 --> 00:27:35,980
<font color="#CCCCCC">we control</font><font color="#E5E5E5"> the return address so all we</font>

649
00:27:34,030 --> 00:27:38,830
need<font color="#CCCCCC"> is a way to tell</font><font color="#E5E5E5"> the computer hey</font>

650
00:27:35,980 --> 00:27:41,290
<font color="#E5E5E5">go to the location where ESP is pointing</font>

651
00:27:38,830 --> 00:27:43,659
<font color="#E5E5E5">and start executing your code there and</font>

652
00:27:41,290 --> 00:27:46,600
in<font color="#E5E5E5"> fact we can do that there is</font><font color="#CCCCCC"> a</font>

653
00:27:43,660 --> 00:27:48,490
<font color="#E5E5E5">command it's called jump ESP jump is</font>

654
00:27:46,600 --> 00:27:51,250
like jump from wherever you're<font color="#CCCCCC"> at</font><font color="#E5E5E5"> to</font>

655
00:27:48,490 --> 00:27:54,910
this next location<font color="#CCCCCC"> and ESP is the</font>

656
00:27:51,250 --> 00:27:57,250
location<font color="#CCCCCC"> we</font><font color="#E5E5E5"> want it to go to so if we</font>

657
00:27:54,910 --> 00:27:59,710
can find<font color="#E5E5E5"> a jump ESP somewhere in the</font>

658
00:27:57,250 --> 00:28:01,450
computer<font color="#CCCCCC"> and we know</font><font color="#E5E5E5"> the address</font><font color="#CCCCCC"> of it</font>

659
00:27:59,710 --> 00:28:03,820
and it's in a<font color="#E5E5E5"> reliable location so it's</font>

660
00:28:01,450 --> 00:28:07,240
in the<font color="#E5E5E5"> same location every time we can</font>

661
00:28:03,820 --> 00:28:10,809
put that address<font color="#E5E5E5"> of the jump ESP for our</font>

662
00:28:07,240 --> 00:28:12,550
return address so when we<font color="#E5E5E5"> get to the</font>

663
00:28:10,809 --> 00:28:15,520
point<font color="#E5E5E5"> where the return address gets</font>

664
00:28:12,550 --> 00:28:17,559
loaded<font color="#E5E5E5"> into</font><font color="#CCCCCC"> EIP we are telling it go to</font>

665
00:28:15,520 --> 00:28:19,900
where ESP is which happens to<font color="#E5E5E5"> be exactly</font>

666
00:28:17,559 --> 00:28:23,350
<font color="#E5E5E5">where our shellcode starts and that's</font>

667
00:28:19,900 --> 00:28:26,860
<font color="#E5E5E5">where we take control of execution</font><font color="#CCCCCC"> we</font>

668
00:28:23,350 --> 00:28:29,290
can't write directly<font color="#E5E5E5"> at a IP and we've</font>

669
00:28:26,860 --> 00:28:30,939
talked for<font color="#E5E5E5"> that a IP takes addresses it</font>

670
00:28:29,290 --> 00:28:33,430
doesn't take commands<font color="#E5E5E5"> so even if we know</font>

671
00:28:30,940 --> 00:28:36,490
the<font color="#CCCCCC"> opcode for jump ESP we can't put</font>

672
00:28:33,430 --> 00:28:38,260
into the return address<font color="#E5E5E5"> because it'll it</font>

673
00:28:36,490 --> 00:28:41,080
will<font color="#E5E5E5"> look</font><font color="#CCCCCC"> like a memory address at</font><font color="#E5E5E5"> that</font>

674
00:28:38,260 --> 00:28:43,330
point which is not<font color="#CCCCCC"> what we need and we</font>

675
00:28:41,080 --> 00:28:45,280
<font color="#CCCCCC">need it to be in the</font><font color="#E5E5E5"> same place every</font>

676
00:28:43,330 --> 00:28:49,389
<font color="#CCCCCC">time because we're</font><font color="#E5E5E5"> not at</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> point</font>

677
00:28:45,280 --> 00:28:50,800
<font color="#E5E5E5">where we can bypass controls and figure</font>

678
00:28:49,390 --> 00:28:52,960
out where something<font color="#E5E5E5"> is living at the</font>

679
00:28:50,800 --> 00:28:55,000
time<font color="#CCCCCC"> of running</font><font color="#E5E5E5"> it we're doing 101</font>

680
00:28:52,960 --> 00:28:56,890
levels so<font color="#E5E5E5"> we needed a reliable location</font>

681
00:28:55,000 --> 00:28:59,590
<font color="#E5E5E5">so first we need</font><font color="#CCCCCC"> to know</font><font color="#E5E5E5"> what is the</font>

682
00:28:56,890 --> 00:29:01,990
jump<font color="#E5E5E5"> ESP and a jump ESP we use</font><font color="#CCCCCC"> NASM</font>

683
00:28:59,590 --> 00:29:05,770
<font color="#CCCCCC">she'll jump ESP is an assembly language</font>

684
00:29:01,990 --> 00:29:09,400
instruction says jump<font color="#E5E5E5"> to ESP it's</font><font color="#CCCCCC"> FF e4</font>

685
00:29:05,770 --> 00:29:11,440
is<font color="#CCCCCC"> its</font><font color="#E5E5E5"> opcode so we need to find where</font>

686
00:29:09,400 --> 00:29:13,900
is<font color="#E5E5E5"> an FF</font><font color="#CCCCCC"> II forum we're gonna use Mona</font>

687
00:29:11,440 --> 00:29:16,240
Mona is a<font color="#E5E5E5"> plug-in to the immunity</font>

688
00:29:13,900 --> 00:29:18,580
debugger<font color="#CCCCCC"> you don't have to use Mona but</font>

689
00:29:16,240 --> 00:29:29,170
<font color="#E5E5E5">it makes your life easier I find so I'm</font>

690
00:29:18,580 --> 00:29:29,649
<font color="#CCCCCC">gonna take a look at that okay so the</font>

691
00:29:29,170 --> 00:29:35,260
command

692
00:29:29,650 --> 00:29:37,480
<font color="#E5E5E5">oh yeah dang it man I blame it on having</font>

693
00:29:35,260 --> 00:29:42,570
a<font color="#E5E5E5"> Connie bola from wild with hacking</font>

694
00:29:37,480 --> 00:29:45,610
<font color="#CCCCCC">fast</font><font color="#E5E5E5"> so the command I'm going to run is</font>

695
00:29:42,570 --> 00:29:46,720
Mona and<font color="#E5E5E5"> he always preface it with an</font>

696
00:29:45,610 --> 00:29:51,310
exclamation point

697
00:29:46,720 --> 00:29:52,630
Mona<font color="#E5E5E5"> modules now modules are deal else</font>

698
00:29:51,310 --> 00:29:55,240
<font color="#E5E5E5">that's what we're talking</font><font color="#CCCCCC"> about when a</font>

699
00:29:52,630 --> 00:29:57,310
program runs it loads<font color="#CCCCCC"> DLL</font><font color="#E5E5E5"> is to provide</font>

700
00:29:55,240 --> 00:29:59,020
support<font color="#CCCCCC"> for things that</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> needs to</font><font color="#E5E5E5"> do</font>

701
00:29:57,310 --> 00:30:00,879
like if you need networking support

702
00:29:59,020 --> 00:30:02,260
<font color="#E5E5E5">you're gonna load some</font><font color="#CCCCCC"> network DLLs if</font>

703
00:30:00,880 --> 00:30:05,800
you need graphics<font color="#CCCCCC"> support</font><font color="#E5E5E5"> you're gonna</font>

704
00:30:02,260 --> 00:30:08,920
load some graphic<font color="#CCCCCC"> dll's</font><font color="#E5E5E5"> so we run</font><font color="#CCCCCC"> Mona</font>

705
00:30:05,800 --> 00:30:10,990
modules and we<font color="#E5E5E5"> see here that</font><font color="#CCCCCC"> we have a</font>

706
00:30:08,920 --> 00:30:12,610
<font color="#E5E5E5">number of modules</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> are their memory</font>

707
00:30:10,990 --> 00:30:15,550
addresses where they start and where

708
00:30:12,610 --> 00:30:17,530
they end some other information<font color="#CCCCCC"> about</font>

709
00:30:15,550 --> 00:30:19,090
them and then over here<font color="#CCCCCC"> are the</font><font color="#E5E5E5"> names</font>

710
00:30:17,530 --> 00:30:21,550
<font color="#E5E5E5">and the names are things</font><font color="#CCCCCC"> that are</font>

711
00:30:19,090 --> 00:30:26,770
familiar<font color="#E5E5E5"> to</font><font color="#CCCCCC"> us things like WS to</font>

712
00:30:21,550 --> 00:30:30,129
underscore 32 and kernel32.dll<font color="#E5E5E5"> user 32</font>

713
00:30:26,770 --> 00:30:34,600
<font color="#CCCCCC">DLL</font><font color="#E5E5E5"> and there are two other ones we have</font>

714
00:30:30,130 --> 00:30:38,340
<font color="#E5E5E5">volunteer itself the exe excuse me and</font>

715
00:30:34,600 --> 00:30:42,520
we see that we also<font color="#E5E5E5"> have ESS</font><font color="#CCCCCC"> funky DLL</font>

716
00:30:38,340 --> 00:30:44,560
it's in the same path as<font color="#E5E5E5"> one server</font><font color="#CCCCCC"> and</font>

717
00:30:42,520 --> 00:30:46,790
it happens to<font color="#CCCCCC"> be the same</font><font color="#E5E5E5"> version as</font>

718
00:30:44,560 --> 00:30:48,710
volunteer so this

719
00:30:46,790 --> 00:30:50,320
<font color="#CCCCCC">Hallel is packaged with bone server and</font>

720
00:30:48,710 --> 00:30:52,540
it gets loaded<font color="#E5E5E5"> when bolon server runs</font>

721
00:30:50,320 --> 00:30:56,330
and<font color="#E5E5E5"> that's going to be important to us</font>

722
00:30:52,540 --> 00:30:57,770
<font color="#CCCCCC">we don't</font><font color="#E5E5E5"> know how to bypass a SLR we</font>

723
00:30:56,330 --> 00:31:00,620
have to make<font color="#E5E5E5"> sure that</font><font color="#CCCCCC"> any module or</font>

724
00:30:57,770 --> 00:31:03,590
we're<font color="#E5E5E5"> going to use doesn't use a SLR SLR</font>

725
00:31:00,620 --> 00:31:05,719
<font color="#CCCCCC">as address space layout randomization so</font>

726
00:31:03,590 --> 00:31:08,480
what happens when you have<font color="#CCCCCC"> a SLR and</font>

727
00:31:05,720 --> 00:31:11,450
play is let's say<font color="#E5E5E5"> we find a</font><font color="#CCCCCC"> jump ESP we</font>

728
00:31:08,480 --> 00:31:14,660
find that<font color="#CCCCCC"> address in a dll</font><font color="#E5E5E5"> if we reboot</font>

729
00:31:11,450 --> 00:31:16,520
<font color="#E5E5E5">or we reload the program the</font><font color="#CCCCCC"> at the</font>

730
00:31:14,660 --> 00:31:18,350
address where that<font color="#E5E5E5"> jump</font><font color="#CCCCCC"> ESP lives has</font>

731
00:31:16,520 --> 00:31:20,990
now been scrambled<font color="#E5E5E5"> it randomizes it</font>

732
00:31:18,350 --> 00:31:22,520
every<font color="#E5E5E5"> time and we're not prepared to</font>

733
00:31:20,990 --> 00:31:24,320
deal with<font color="#CCCCCC"> that yet</font><font color="#E5E5E5"> that's an advanced</font>

734
00:31:22,520 --> 00:31:26,570
form of exploitation<font color="#CCCCCC"> and we're not there</font>

735
00:31:24,320 --> 00:31:28,689
yet<font color="#CCCCCC"> so we need to be able</font><font color="#E5E5E5"> to find a</font>

736
00:31:26,570 --> 00:31:30,800
<font color="#E5E5E5">place</font><font color="#CCCCCC"> that we can</font><font color="#E5E5E5"> use every time</font>

737
00:31:28,690 --> 00:31:32,990
fortunately none of<font color="#E5E5E5"> these are built with</font>

738
00:31:30,800 --> 00:31:35,389
a SLR so we could use any of them and

739
00:31:32,990 --> 00:31:36,800
most<font color="#E5E5E5"> of them are</font><font color="#CCCCCC"> system D allows and we</font>

740
00:31:35,390 --> 00:31:43,880
could actually use them if they<font color="#E5E5E5"> contain</font>

741
00:31:36,800 --> 00:31:45,350
a jump ESP<font color="#CCCCCC"> but we might not</font><font color="#E5E5E5"> want to now</font>

742
00:31:43,880 --> 00:31:49,190
one of the<font color="#E5E5E5"> reasons we might not want to</font>

743
00:31:45,350 --> 00:31:53,449
<font color="#E5E5E5">use a jump ESP is that's in say a system</font>

744
00:31:49,190 --> 00:31:55,610
<font color="#E5E5E5">DLL is because it changes with patch</font>

745
00:31:53,450 --> 00:31:57,560
levels<font color="#CCCCCC"> in service pack levels so if you</font>

746
00:31:55,610 --> 00:31:59,810
have a service<font color="#E5E5E5"> pack</font><font color="#CCCCCC"> to system and I have</font>

747
00:31:57,560 --> 00:32:01,340
a service<font color="#E5E5E5"> pack 3 system it's very</font><font color="#CCCCCC"> likely</font>

748
00:31:59,810 --> 00:32:04,220
that<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> have different</font><font color="#CCCCCC"> addresses for</font>

749
00:32:01,340 --> 00:32:05,899
<font color="#E5E5E5">a jump</font><font color="#CCCCCC"> PSPs</font><font color="#E5E5E5"> that can even change between</font>

750
00:32:04,220 --> 00:32:08,330
patch levels<font color="#CCCCCC"> depending</font><font color="#E5E5E5"> on what's getting</font>

751
00:32:05,900 --> 00:32:10,400
<font color="#E5E5E5">patched and it also changes</font><font color="#CCCCCC"> between</font>

752
00:32:08,330 --> 00:32:11,990
<font color="#E5E5E5">language pack versions so if I'm running</font>

753
00:32:10,400 --> 00:32:14,570
<font color="#CCCCCC">English and you're running the French</font>

754
00:32:11,990 --> 00:32:15,920
<font color="#E5E5E5">version of whatever operating system</font><font color="#CCCCCC"> we</font>

755
00:32:14,570 --> 00:32:18,770
have the exact<font color="#CCCCCC"> same patch</font><font color="#E5E5E5"> levels</font>

756
00:32:15,920 --> 00:32:21,320
otherwise very<font color="#E5E5E5"> likely</font><font color="#CCCCCC"> that your jump ESP</font>

757
00:32:18,770 --> 00:32:23,389
will change that's not<font color="#CCCCCC"> a</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> not</font>

758
00:32:21,320 --> 00:32:24,980
something<font color="#CCCCCC"> that makes</font><font color="#E5E5E5"> it so we can't do</font>

759
00:32:23,390 --> 00:32:26,630
it it<font color="#E5E5E5"> just means we have to be able a</font>

760
00:32:24,980 --> 00:32:28,670
<font color="#E5E5E5">fingerprint our target now and know</font>

761
00:32:26,630 --> 00:32:30,470
<font color="#CCCCCC">exactly</font><font color="#E5E5E5"> what it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> launch</font>

762
00:32:28,670 --> 00:32:32,030
<font color="#E5E5E5">our exploit that's why if you've ever</font>

763
00:32:30,470 --> 00:32:34,430
used<font color="#CCCCCC"> Metasploit and it says like what's</font>

764
00:32:32,030 --> 00:32:35,629
the target<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to know the</font><font color="#E5E5E5"> target</font>

765
00:32:34,430 --> 00:32:39,710
because it needs<font color="#E5E5E5"> to do things like</font>

766
00:32:35,630 --> 00:32:43,400
<font color="#E5E5E5">change</font><font color="#CCCCCC"> the return</font><font color="#E5E5E5"> address so we could</font>

767
00:32:39,710 --> 00:32:47,210
use<font color="#CCCCCC"> anyone</font><font color="#E5E5E5"> but we know that</font><font color="#CCCCCC"> ESS</font><font color="#E5E5E5"> func is</font>

768
00:32:43,400 --> 00:32:49,370
bundled with our program it's the same

769
00:32:47,210 --> 00:32:52,520
<font color="#E5E5E5">version so anywhere we run into version</font>

770
00:32:49,370 --> 00:32:55,370
<font color="#CCCCCC">one of</font><font color="#E5E5E5"> Vaughn server we should be able</font>

771
00:32:52,520 --> 00:32:57,980
<font color="#E5E5E5">to</font><font color="#CCCCCC"> use a jump ESP if there's one of</font>

772
00:32:55,370 --> 00:32:59,959
<font color="#CCCCCC">those in ESS</font><font color="#E5E5E5"> func DLL and it will work</font>

773
00:32:57,980 --> 00:33:00,350
on<font color="#E5E5E5"> any computer regardless the operating</font>

774
00:32:59,960 --> 00:33:03,020
system

775
00:33:00,350 --> 00:33:07,689
where it's at<font color="#CCCCCC"> so we're gonna search for</font>

776
00:33:03,020 --> 00:33:07,690
that<font color="#E5E5E5"> and there</font><font color="#CCCCCC"> is a command Mona fine</font>

777
00:33:17,580 --> 00:33:25,360
and then we're<font color="#E5E5E5"> gonna use -</font><font color="#CCCCCC"> em</font><font color="#E5E5E5"> for the</font>

778
00:33:21,700 --> 00:33:27,460
module which is ESS funk<font color="#E5E5E5"> DOL so I did</font>

779
00:33:25,360 --> 00:33:29,949
Mona<font color="#E5E5E5"> find I want to search and I want to</font>

780
00:33:27,460 --> 00:33:32,289
search<font color="#CCCCCC"> for</font><font color="#E5E5E5"> this string FF</font><font color="#CCCCCC"> e 4 which is</font>

781
00:33:29,950 --> 00:33:36,520
the<font color="#CCCCCC"> OP code</font><font color="#E5E5E5"> for jump</font><font color="#CCCCCC"> ESP I'm gonna</font>

782
00:33:32,289 --> 00:33:39,669
search in ESS funk that<font color="#CCCCCC"> dll so we see</font>

783
00:33:36,520 --> 00:33:41,918
<font color="#E5E5E5">that we had 9 results here so there's</font><font color="#CCCCCC"> 9</font>

784
00:33:39,669 --> 00:33:44,380
memory addresses that all contain a jump

785
00:33:41,919 --> 00:33:46,779
<font color="#E5E5E5">ESP all of them are in this area called</font>

786
00:33:44,380 --> 00:33:50,110
page execute reads so it's executable

787
00:33:46,779 --> 00:33:53,529
<font color="#CCCCCC">memory space so we should</font><font color="#E5E5E5"> be golden now</font>

788
00:33:50,110 --> 00:33:56,500
we need to talk<font color="#E5E5E5"> about bad characters so</font>

789
00:33:53,529 --> 00:33:59,649
if you<font color="#E5E5E5"> remember when I said we send data</font>

790
00:33:56,500 --> 00:34:02,590
to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> server and we could send a whole</font>

791
00:33:59,649 --> 00:34:04,209
bunch of data<font color="#CCCCCC"> and we have our data our</font>

792
00:34:02,590 --> 00:34:06,000
two thousand six bytes<font color="#E5E5E5"> of whatever and</font>

793
00:34:04,210 --> 00:34:09,040
then our return address in shellcode

794
00:34:06,000 --> 00:34:11,139
<font color="#E5E5E5">it's just data at that point and then we</font>

795
00:34:09,040 --> 00:34:15,668
hit<font color="#CCCCCC"> enter which sends</font><font color="#E5E5E5"> a carriage return</font>

796
00:34:11,139 --> 00:34:18,879
<font color="#CCCCCC">line feed</font><font color="#E5E5E5"> and it doesn't become anything</font>

797
00:34:15,668 --> 00:34:20,980
other than data<font color="#CCCCCC"> until if we're able to</font>

798
00:34:18,879 --> 00:34:23,348
<font color="#E5E5E5">take control of the return address and</font>

799
00:34:20,980 --> 00:34:24,879
then jump<font color="#CCCCCC"> to that location</font><font color="#E5E5E5"> where our</font>

800
00:34:23,349 --> 00:34:26,169
data is and all of<font color="#CCCCCC"> a sudden that</font>

801
00:34:24,879 --> 00:34:28,719
shellcode is<font color="#E5E5E5"> now something that's</font>

802
00:34:26,168 --> 00:34:30,219
executable but it's<font color="#CCCCCC"> just data and one of</font>

803
00:34:28,719 --> 00:34:32,230
the things we sent in the data was a

804
00:34:30,219 --> 00:34:35,138
carriage<font color="#CCCCCC"> return line</font><font color="#E5E5E5"> team line feed so a</font>

805
00:34:32,230 --> 00:34:37,929
hex<font color="#E5E5E5"> 0a and hex 0d that said this</font><font color="#CCCCCC"> is the</font>

806
00:34:35,139 --> 00:34:40,270
<font color="#E5E5E5">end of our input we also know that</font>

807
00:34:37,929 --> 00:34:42,190
strings in c and<font color="#CCCCCC"> c++</font><font color="#E5E5E5"> we talked about</font>

808
00:34:40,270 --> 00:34:45,369
<font color="#E5E5E5">this earlier are null terminated so the</font>

809
00:34:42,190 --> 00:34:47,589
null character hex<font color="#E5E5E5"> 0 0 that may also</font>

810
00:34:45,369 --> 00:34:49,210
tell the server hey I'm done sending

811
00:34:47,589 --> 00:34:51,279
input so we<font color="#E5E5E5"> need to make</font><font color="#CCCCCC"> sure that</font>

812
00:34:49,210 --> 00:34:53,168
<font color="#E5E5E5">nowhere in our data that we're sending</font>

813
00:34:51,280 --> 00:34:54,730
<font color="#E5E5E5">contains these bad characters because</font>

814
00:34:53,168 --> 00:34:56,830
that would just<font color="#E5E5E5"> truncate our data at</font>

815
00:34:54,730 --> 00:34:59,020
that<font color="#E5E5E5"> point so we have to make sure our</font>

816
00:34:56,830 --> 00:35:01,779
memory addresses<font color="#E5E5E5"> don't contain these bad</font>

817
00:34:59,020 --> 00:35:04,180
characters<font color="#E5E5E5"> we know that looking here</font>

818
00:35:01,780 --> 00:35:06,190
none<font color="#E5E5E5"> of these</font><font color="#CCCCCC"> contains 0 a is 0 D</font><font color="#E5E5E5"> are 0</font>

819
00:35:04,180 --> 00:35:08,290
0<font color="#E5E5E5"> so we can</font><font color="#CCCCCC"> use any</font><font color="#E5E5E5"> of these memory</font>

820
00:35:06,190 --> 00:35:09,460
addresses<font color="#E5E5E5"> well that's the next</font><font color="#CCCCCC"> thing you</font>

821
00:35:08,290 --> 00:35:11,349
<font color="#E5E5E5">need to keep in</font><font color="#CCCCCC"> mind when you're</font><font color="#E5E5E5"> going</font>

822
00:35:09,460 --> 00:35:14,020
<font color="#E5E5E5">through</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> process is this concept of</font>

823
00:35:11,349 --> 00:35:16,540
bad characters<font color="#E5E5E5"> and there's ways to fuzz</font>

824
00:35:14,020 --> 00:35:17,980
for bad characters<font color="#CCCCCC"> we don't have enough</font>

825
00:35:16,540 --> 00:35:20,230
time<font color="#E5E5E5"> to</font><font color="#CCCCCC"> take</font><font color="#E5E5E5"> a look at that but in the</font>

826
00:35:17,980 --> 00:35:22,210
blog articles that I've provided you<font color="#E5E5E5"> at</font>

827
00:35:20,230 --> 00:35:24,640
the end of this they'll walk you<font color="#E5E5E5"> through</font>

828
00:35:22,210 --> 00:35:27,070
finding bad characters some programs

829
00:35:24,640 --> 00:35:29,650
will have more bad characters that you

830
00:35:27,070 --> 00:35:33,220
can't use than others

831
00:35:29,650 --> 00:35:35,470
and so I'm gonna choose 6250<font color="#CCCCCC"> 11 AF</font><font color="#E5E5E5"> just</font>

832
00:35:33,220 --> 00:35:38,828
because I know that one works<font color="#CCCCCC"> the other</font>

833
00:35:35,470 --> 00:35:42,368
ones<font color="#E5E5E5"> probably work too so I have written</font>

834
00:35:38,829 --> 00:35:45,339
<font color="#CCCCCC">another Python</font><font color="#E5E5E5"> script here and I've got</font>

835
00:35:42,369 --> 00:35:46,779
<font color="#CCCCCC">my command</font><font color="#E5E5E5"> and then I've got a bunch of</font>

836
00:35:45,339 --> 00:35:48,160
shell script and I send<font color="#E5E5E5"> that stuff to</font>

837
00:35:46,779 --> 00:35:51,999
the<font color="#E5E5E5"> server I'm gonna walk you</font><font color="#CCCCCC"> through</font>

838
00:35:48,160 --> 00:35:54,249
what's happening<font color="#CCCCCC"> here so my command I'm</font>

839
00:35:51,999 --> 00:35:57,279
using to generate<font color="#E5E5E5"> shell code as msf</font>

840
00:35:54,249 --> 00:35:58,689
venom<font color="#CCCCCC"> because it's</font><font color="#E5E5E5"> one on one level</font>

841
00:35:57,279 --> 00:36:00,670
we're not<font color="#E5E5E5"> expecting people to write</font>

842
00:35:58,690 --> 00:36:03,430
shell code from scratch<font color="#E5E5E5"> it's an</font>

843
00:36:00,670 --> 00:36:05,619
unreasonable<font color="#E5E5E5"> expectation so I've got MSF</font>

844
00:36:03,430 --> 00:36:09,009
venom<font color="#CCCCCC"> I'm using a</font><font color="#E5E5E5"> Windows platform in</font>

845
00:36:05,619 --> 00:36:10,749
x86<font color="#E5E5E5"> architecture</font><font color="#CCCCCC"> if you were gonna pop</font>

846
00:36:09,009 --> 00:36:12,910
calc this is exactly what you would do

847
00:36:10,749 --> 00:36:15,129
<font color="#E5E5E5">this is the the payload</font><font color="#CCCCCC"> that would use</font>

848
00:36:12,910 --> 00:36:17,339
to pop calc taxi<font color="#E5E5E5"> I'm not going to do</font>

849
00:36:15,130 --> 00:36:19,839
that but this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> you would do it</font>

850
00:36:17,339 --> 00:36:22,950
<font color="#CCCCCC">something called exit</font><font color="#E5E5E5"> func equals thread</font>

851
00:36:19,839 --> 00:36:27,009
which we'll<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about and then this</font><font color="#E5E5E5"> - e</font>

852
00:36:22,950 --> 00:36:30,069
x86 slash<font color="#E5E5E5"> Shikata</font><font color="#CCCCCC"> GaN i</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> chicago</font>

853
00:36:27,009 --> 00:36:32,859
<font color="#CCCCCC">gondii is an encoder</font><font color="#E5E5E5"> it allows you to</font>

854
00:36:30,069 --> 00:36:35,200
<font color="#E5E5E5">take</font><font color="#CCCCCC"> your input</font><font color="#E5E5E5"> and then encode it in</font>

855
00:36:32,859 --> 00:36:37,598
some fashion<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have a</font>

856
00:36:35,200 --> 00:36:39,730
different<font color="#E5E5E5"> kind of output</font><font color="#CCCCCC"> the reason I'm</font>

857
00:36:37,599 --> 00:36:42,220
using<font color="#E5E5E5"> Chicago Ghana I'm using an encoder</font>

858
00:36:39,730 --> 00:36:43,749
is because I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> want bad characters I</font>

859
00:36:42,220 --> 00:36:45,430
need to make sure my<font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> doesn't</font>

860
00:36:43,749 --> 00:36:47,709
contain bad characters so I don't

861
00:36:45,430 --> 00:36:50,049
truncate my input and<font color="#CCCCCC"> then I don't</font><font color="#E5E5E5"> have</font>

862
00:36:47,710 --> 00:36:52,660
full shellcode getting sent so I use

863
00:36:50,049 --> 00:36:54,430
<font color="#E5E5E5">Chicago and I with the -</font><font color="#CCCCCC"> B</font><font color="#E5E5E5"> flag for bad</font>

864
00:36:52,660 --> 00:36:56,589
characters and I give it<font color="#E5E5E5"> the three bad</font>

865
00:36:54,430 --> 00:36:59,649
characters I do not<font color="#E5E5E5"> want my shellcode to</font>

866
00:36:56,589 --> 00:37:02,349
contain and it generates<font color="#E5E5E5"> this amount of</font>

867
00:36:59,650 --> 00:37:04,170
shellcode here and if we<font color="#CCCCCC"> were</font><font color="#E5E5E5"> to look at</font>

868
00:37:02,349 --> 00:37:06,569
<font color="#E5E5E5">it closely we'd see that there are no</font>

869
00:37:04,170 --> 00:37:09,130
bad characters in there

870
00:37:06,569 --> 00:37:10,930
we have<font color="#CCCCCC"> our return address which is</font>

871
00:37:09,130 --> 00:37:15,489
<font color="#CCCCCC">backwards because we're on a little</font>

872
00:37:10,930 --> 00:37:18,279
endian system system so<font color="#CCCCCC"> 6250</font><font color="#E5E5E5"> 11</font><font color="#CCCCCC"> AF so</font>

873
00:37:15,489 --> 00:37:20,619
what we're<font color="#E5E5E5"> gonna send to the server 2006</font>

874
00:37:18,279 --> 00:37:22,930
<font color="#CCCCCC">AS</font><font color="#E5E5E5"> doesn't matter what character we send</font>

875
00:37:20,619 --> 00:37:25,119
as long as it's<font color="#E5E5E5"> not a character that is</font>

876
00:37:22,930 --> 00:37:27,669
<font color="#CCCCCC">relevant</font><font color="#E5E5E5"> to the system like</font><font color="#CCCCCC"> if we sent</font>

877
00:37:25,119 --> 00:37:30,220
int or if we sent hex<font color="#E5E5E5"> CC it's the</font>

878
00:37:27,670 --> 00:37:32,829
interrupt code<font color="#E5E5E5"> I believe which tells the</font>

879
00:37:30,220 --> 00:37:35,410
<font color="#CCCCCC">the</font><font color="#E5E5E5"> computer to pause execution we don't</font>

880
00:37:32,829 --> 00:37:39,210
want to use<font color="#E5E5E5"> that</font><font color="#CCCCCC"> as long we can send</font>

881
00:37:35,410 --> 00:37:43,060
whatever<font color="#E5E5E5"> we want and it won't matter and</font>

882
00:37:39,210 --> 00:37:44,890
then we put in our return address

883
00:37:43,060 --> 00:37:46,540
<font color="#E5E5E5">I'm gonna put in these</font><font color="#CCCCCC"> eight knops and</font>

884
00:37:44,890 --> 00:37:49,540
I'll tell you why in a little<font color="#E5E5E5"> bit and</font>

885
00:37:46,540 --> 00:37:51,880
then I'm gonna<font color="#E5E5E5"> send</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> shellcode</font><font color="#CCCCCC"> and if</font>

886
00:37:49,540 --> 00:37:54,210
I'm<font color="#CCCCCC"> lucky if I've done everything</font>

887
00:37:51,880 --> 00:37:56,230
<font color="#CCCCCC">correctly my payload should execute</font>

888
00:37:54,210 --> 00:37:57,370
<font color="#E5E5E5">hopefully it executes</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the foreground</font>

889
00:37:56,230 --> 00:37:59,640
but it's been going<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> background</font>

890
00:37:57,370 --> 00:38:03,130
lately there we go

891
00:37:59,640 --> 00:38:04,810
so the reason I chose this<font color="#E5E5E5"> rather than</font>

892
00:38:03,130 --> 00:38:07,030
<font color="#CCCCCC">pop in calc is because honestly the</font>

893
00:38:04,810 --> 00:38:10,930
first<font color="#E5E5E5"> time that I ever walked through</font>

894
00:38:07,030 --> 00:38:12,880
<font color="#E5E5E5">this process</font><font color="#CCCCCC"> and did exactly what we did</font>

895
00:38:10,930 --> 00:38:15,240
here<font color="#CCCCCC"> without</font><font color="#E5E5E5"> using a tutorial I went</font>

896
00:38:12,880 --> 00:38:18,250
<font color="#E5E5E5">through and practiced a bunch and I</font>

897
00:38:15,240 --> 00:38:20,080
understood the<font color="#CCCCCC"> process</font><font color="#E5E5E5"> the first time</font>

898
00:38:18,250 --> 00:38:22,750
that it<font color="#CCCCCC"> actually worked without having</font>

899
00:38:20,080 --> 00:38:24,580
to use someone else's code to do it was

900
00:38:22,750 --> 00:38:26,530
like<font color="#CCCCCC"> magic for</font><font color="#E5E5E5"> me like it was such a</font>

901
00:38:24,580 --> 00:38:29,710
powerful<font color="#CCCCCC"> feeling that the computer did</font>

902
00:38:26,530 --> 00:38:31,480
exactly<font color="#E5E5E5"> what I wanted it to this is a 22</font>

903
00:38:29,710 --> 00:38:34,680
year old<font color="#E5E5E5"> topic smashing the stack for</font>

904
00:38:31,480 --> 00:38:36,700
fun and profit was published in 1995 and

905
00:38:34,680 --> 00:38:38,919
essentially what I<font color="#CCCCCC"> have walked you</font>

906
00:38:36,700 --> 00:38:42,879
through here has not changed<font color="#CCCCCC"> since</font><font color="#E5E5E5"> that</font>

907
00:38:38,920 --> 00:38:44,230
point<font color="#CCCCCC"> but</font><font color="#E5E5E5"> there's still people that</font>

908
00:38:42,880 --> 00:38:46,510
<font color="#E5E5E5">don't know this stuff and</font><font color="#CCCCCC"> this is a</font>

909
00:38:44,230 --> 00:38:47,770
foundation<font color="#CCCCCC"> for learning the next steps</font>

910
00:38:46,510 --> 00:38:49,960
if you want to write<font color="#E5E5E5"> more advanced</font>

911
00:38:47,770 --> 00:38:51,790
exploits<font color="#E5E5E5"> and if nothing else it's</font>

912
00:38:49,960 --> 00:38:56,320
helping you understand<font color="#CCCCCC"> exactly what</font>

913
00:38:51,790 --> 00:38:57,520
happens when an exploit occurs<font color="#CCCCCC"> I want</font>

914
00:38:56,320 --> 00:38:59,950
you to I<font color="#E5E5E5"> want to point something out</font>

915
00:38:57,520 --> 00:39:01,420
<font color="#CCCCCC">Vonn server is</font><font color="#E5E5E5"> still running</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> here</font>

916
00:38:59,950 --> 00:39:05,200
it's not<font color="#E5E5E5"> paused like it has been before</font>

917
00:39:01,420 --> 00:39:07,570
<font color="#E5E5E5">I can</font><font color="#CCCCCC"> even go close</font><font color="#E5E5E5"> my payload I can go</font>

918
00:39:05,200 --> 00:39:09,490
back<font color="#E5E5E5"> and I can run it again let's go</font>

919
00:39:07,570 --> 00:39:13,990
<font color="#E5E5E5">ahead and run</font><font color="#CCCCCC"> my module and it works</font>

920
00:39:09,490 --> 00:39:16,270
again<font color="#E5E5E5"> and there's a hint to why here we</font>

921
00:39:13,990 --> 00:39:18,189
see that a thread was created and then a

922
00:39:16,270 --> 00:39:25,410
thread terminated<font color="#E5E5E5"> exit code</font><font color="#CCCCCC"> zero so it</font>

923
00:39:18,190 --> 00:39:29,020
<font color="#E5E5E5">exited normally if you remember in our</font>

924
00:39:25,410 --> 00:39:32,319
code<font color="#CCCCCC"> I have that exit</font><font color="#E5E5E5"> func equals thread</font>

925
00:39:29,020 --> 00:39:34,150
<font color="#E5E5E5">the default is process you don't always</font>

926
00:39:32,320 --> 00:39:36,370
need to<font color="#E5E5E5"> change this but it happens to be</font>

927
00:39:34,150 --> 00:39:38,890
<font color="#E5E5E5">with</font><font color="#CCCCCC"> Vaughn server if you have exit func</font>

928
00:39:36,370 --> 00:39:40,960
equals process it means<font color="#E5E5E5"> the exit</font>

929
00:39:38,890 --> 00:39:44,020
function<font color="#E5E5E5"> for our pay code our payload</font>

930
00:39:40,960 --> 00:39:47,200
what should<font color="#E5E5E5"> happen there shell code when</font>

931
00:39:44,020 --> 00:39:48,520
it exits<font color="#CCCCCC"> it causes bone</font><font color="#E5E5E5"> server to crash</font>

932
00:39:47,200 --> 00:39:51,250
<font color="#E5E5E5">because it doesn't know how to recover</font>

933
00:39:48,520 --> 00:39:52,720
<font color="#E5E5E5">from this air condition so if we want to</font>

934
00:39:51,250 --> 00:39:53,800
<font color="#E5E5E5">be a stealthy attacker we don't want to</font>

935
00:39:52,720 --> 00:39:55,509
crash bone server

936
00:39:53,800 --> 00:39:56,800
I used exit<font color="#CCCCCC"> bunk equals</font><font color="#E5E5E5"> threads so</font>

937
00:39:55,510 --> 00:39:59,500
<font color="#CCCCCC">Vaughn sever keeps on run</font>

938
00:39:56,800 --> 00:40:01,690
just something and<font color="#E5E5E5"> keep in mind</font><font color="#CCCCCC"> the</font>

939
00:39:59,500 --> 00:40:04,120
other big thing was why did I put<font color="#E5E5E5"> these</font>

940
00:40:01,690 --> 00:40:07,660
<font color="#E5E5E5">eight knots in here because this isn't</font>

941
00:40:04,120 --> 00:40:09,759
an<font color="#E5E5E5"> op sled</font><font color="#CCCCCC"> there's sometimes in buffer</font>

942
00:40:07,660 --> 00:40:12,279
overflows you don't know<font color="#CCCCCC"> exactly where</font>

943
00:40:09,760 --> 00:40:14,080
<font color="#E5E5E5">the return address is where something</font>

944
00:40:12,280 --> 00:40:16,000
<font color="#CCCCCC">needs to be</font><font color="#E5E5E5"> in the structure</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can</font>

945
00:40:14,080 --> 00:40:18,580
<font color="#CCCCCC">use this thing called an</font><font color="#E5E5E5"> op said which</font>

946
00:40:16,000 --> 00:40:20,500
you send a<font color="#E5E5E5"> bunch of hex 90s which is a</font>

947
00:40:18,580 --> 00:40:22,630
no op it just tells<font color="#E5E5E5"> the computer pass</font>

948
00:40:20,500 --> 00:40:25,480
pass pass<font color="#CCCCCC"> don't do</font><font color="#E5E5E5"> anything in this</font>

949
00:40:22,630 --> 00:40:27,400
cycle the reason<font color="#E5E5E5"> that I'm using this</font>

950
00:40:25,480 --> 00:40:29,890
here<font color="#E5E5E5"> is because I'm</font><font color="#CCCCCC"> using an encoder I'm</font>

951
00:40:27,400 --> 00:40:34,480
using<font color="#E5E5E5"> Chicago</font><font color="#CCCCCC"> Ghana which is an encoder</font>

952
00:40:29,890 --> 00:40:37,509
so when it gets to excuse me when it

953
00:40:34,480 --> 00:40:40,540
<font color="#E5E5E5">gets to the server it's not in a format</font>

954
00:40:37,510 --> 00:40:42,070
that the computer understands the

955
00:40:40,540 --> 00:40:43,660
processor<font color="#E5E5E5"> doesn't know what that is yet</font>

956
00:40:42,070 --> 00:40:46,150
it's like in another<font color="#E5E5E5"> language that</font><font color="#CCCCCC"> it</font>

957
00:40:43,660 --> 00:40:48,910
doesn't have<font color="#CCCCCC"> that support</font><font color="#E5E5E5"> for so at the</font>

958
00:40:46,150 --> 00:40:51,220
beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our pay code our payload in</font>

959
00:40:48,910 --> 00:40:55,149
our<font color="#E5E5E5"> shell code is a stub that encodes</font>

960
00:40:51,220 --> 00:40:58,089
<font color="#E5E5E5">our decodes the encoded input so if we</font>

961
00:40:55,150 --> 00:41:00,370
were to<font color="#CCCCCC"> just put in</font><font color="#E5E5E5"> our return address</font>

962
00:40:58,090 --> 00:41:01,840
<font color="#CCCCCC">and shove our</font><font color="#E5E5E5"> shell code in there the</font>

963
00:41:00,370 --> 00:41:04,330
shell code starts activating like it

964
00:41:01,840 --> 00:41:07,840
should<font color="#CCCCCC"> but</font><font color="#E5E5E5"> what it</font><font color="#CCCCCC"> does that</font><font color="#E5E5E5"> decodes</font>

965
00:41:04,330 --> 00:41:09,490
itself over<font color="#E5E5E5"> the top of itself and so it</font>

966
00:41:07,840 --> 00:41:12,600
would clobber itself as this trying to

967
00:41:09,490 --> 00:41:16,540
decode and it wouldn't work<font color="#CCCCCC"> properly</font>

968
00:41:12,600 --> 00:41:18,220
<font color="#CCCCCC">these</font><font color="#E5E5E5"> eight</font><font color="#CCCCCC"> knops</font><font color="#E5E5E5"> allow the some space</font>

969
00:41:16,540 --> 00:41:20,890
on the stack like just a scratch space

970
00:41:18,220 --> 00:41:22,689
<font color="#E5E5E5">so exactly so it can shift down a little</font>

971
00:41:20,890 --> 00:41:25,359
bit and then<font color="#CCCCCC"> start writing above into</font>

972
00:41:22,690 --> 00:41:27,520
that<font color="#E5E5E5"> space if</font><font color="#CCCCCC"> you didn't do that</font><font color="#E5E5E5"> it's</font>

973
00:41:25,360 --> 00:41:29,410
not going to work<font color="#E5E5E5"> properly</font><font color="#CCCCCC"> do you need</font>

974
00:41:27,520 --> 00:41:32,170
<font color="#CCCCCC">exactly eight knops I actually don't</font>

975
00:41:29,410 --> 00:41:33,520
know<font color="#CCCCCC"> the first tutorial ever use said</font>

976
00:41:32,170 --> 00:41:35,260
use<font color="#E5E5E5"> eight</font><font color="#CCCCCC"> knops and I've</font><font color="#E5E5E5"> used eight</font>

977
00:41:33,520 --> 00:41:39,340
<font color="#E5E5E5">knobs ever since so I don't know if I</font>

978
00:41:35,260 --> 00:41:41,140
<font color="#CCCCCC">need more just to tell you</font><font color="#E5E5E5"> like I am NOT</font>

979
00:41:39,340 --> 00:41:43,900
someone that can<font color="#CCCCCC"> reverse-engineer</font>

980
00:41:41,140 --> 00:41:46,180
programs and write these rap chains and

981
00:41:43,900 --> 00:41:49,000
smash<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> modern-day protections</font>

982
00:41:46,180 --> 00:41:50,830
I'm not there on my journey I just

983
00:41:49,000 --> 00:41:52,420
learned this along the<font color="#E5E5E5"> way and I thought</font>

984
00:41:50,830 --> 00:41:55,900
it would<font color="#E5E5E5"> be terribly useful for other</font>

985
00:41:52,420 --> 00:41:59,680
people to<font color="#E5E5E5"> learn as well so I know that</font>

986
00:41:55,900 --> 00:42:03,760
this works<font color="#E5E5E5"> and it was</font><font color="#CCCCCC"> mind-blowing</font><font color="#E5E5E5"> for</font>

987
00:41:59,680 --> 00:42:06,310
<font color="#E5E5E5">me that it was</font><font color="#CCCCCC"> actually this easy it was</font>

988
00:42:03,760 --> 00:42:07,840
something that I could do with<font color="#E5E5E5"> a little</font>

989
00:42:06,310 --> 00:42:09,900
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> of practice</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> always thought it</font>

990
00:42:07,840 --> 00:42:12,900
literally was magic<font color="#CCCCCC"> gif and</font>

991
00:42:09,900 --> 00:42:14,250
that people<font color="#E5E5E5"> that did it</font><font color="#CCCCCC"> were wizards</font><font color="#E5E5E5"> now</font>

992
00:42:12,900 --> 00:42:15,900
the people<font color="#CCCCCC"> that are doing modern-day</font>

993
00:42:14,250 --> 00:42:18,000
bypasses I still feel like<font color="#E5E5E5"> they're at</font>

994
00:42:15,900 --> 00:42:19,890
their<font color="#E5E5E5"> wizards but this is these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> the</font>

995
00:42:18,000 --> 00:42:22,740
steps they followed right<font color="#E5E5E5"> other than</font>

996
00:42:19,890 --> 00:42:25,440
<font color="#CCCCCC">maybe Taba so who I</font><font color="#E5E5E5"> think you</font><font color="#CCCCCC"> know came</font>

997
00:42:22,740 --> 00:42:28,049
out<font color="#E5E5E5"> writing exploits at the age of one</font>

998
00:42:25,440 --> 00:42:30,060
day<font color="#CCCCCC"> I don't think there are</font><font color="#E5E5E5"> many</font><font color="#CCCCCC"> of us</font>

999
00:42:28,050 --> 00:42:34,550
<font color="#E5E5E5">that that haven't gone through this</font>

1000
00:42:30,060 --> 00:42:34,549
learning<font color="#CCCCCC"> process</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> get</font><font color="#E5E5E5"> to this point</font><font color="#CCCCCC"> so</font>

1001
00:42:35,120 --> 00:42:42,569
<font color="#E5E5E5">where are</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> at we have talked about our</font>

1002
00:42:39,390 --> 00:42:45,930
shellcode<font color="#CCCCCC"> we talked about how all this</font>

1003
00:42:42,570 --> 00:42:48,480
works<font color="#CCCCCC"> what do you do after you've</font>

1004
00:42:45,930 --> 00:42:50,100
mastered vulner<font color="#E5E5E5"> there is this vulnerable</font>

1005
00:42:48,480 --> 00:42:51,270
command and there are another<font color="#CCCCCC"> couple of</font>

1006
00:42:50,100 --> 00:42:53,100
commands<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are vulnerable to</font>

1007
00:42:51,270 --> 00:42:54,330
<font color="#CCCCCC">something called an egg Hunter exploit</font>

1008
00:42:53,100 --> 00:42:57,080
which is kind of the next<font color="#CCCCCC"> step</font><font color="#E5E5E5"> on the</font>

1009
00:42:54,330 --> 00:42:59,160
<font color="#CCCCCC">journey but where do</font><font color="#E5E5E5"> you practice more</font>

1010
00:42:57,080 --> 00:43:02,069
<font color="#CCCCCC">where do you practice</font><font color="#E5E5E5"> how do you find</font>

1011
00:42:59,160 --> 00:43:05,910
things<font color="#E5E5E5"> to practice with exploit DB is a</font>

1012
00:43:02,070 --> 00:43:07,440
great resource<font color="#CCCCCC"> so mini share has to</font>

1013
00:43:05,910 --> 00:43:10,140
remote buffer overflows in this version

1014
00:43:07,440 --> 00:43:13,050
it's an old program<font color="#CCCCCC"> actually use this</font>

1015
00:43:10,140 --> 00:43:15,120
exact process<font color="#E5E5E5"> that we went through right</font>

1016
00:43:13,050 --> 00:43:18,510
now to find a buffer overflow and write

1017
00:43:15,120 --> 00:43:20,250
an exploit for<font color="#E5E5E5"> mini share I used the</font>

1018
00:43:18,510 --> 00:43:21,720
exact script that we're using and<font color="#E5E5E5"> the</font>

1019
00:43:20,250 --> 00:43:23,580
only thing I<font color="#CCCCCC"> really had to</font><font color="#E5E5E5"> change was</font>

1020
00:43:21,720 --> 00:43:25,500
the command<font color="#E5E5E5"> because it's an HTTP based</font>

1021
00:43:23,580 --> 00:43:27,900
program so I<font color="#CCCCCC"> think I used get and</font>

1022
00:43:25,500 --> 00:43:30,960
whatever I needed<font color="#E5E5E5"> to speak specifically</font>

1023
00:43:27,900 --> 00:43:32,940
to mini share but I didn't change

1024
00:43:30,960 --> 00:43:35,070
<font color="#E5E5E5">anything else about the process that</font><font color="#CCCCCC"> we</font>

1025
00:43:32,940 --> 00:43:38,100
used and the reason I bring this<font color="#E5E5E5"> up is</font>

1026
00:43:35,070 --> 00:43:40,320
if you noticed in red here excuse me it

1027
00:43:38,100 --> 00:43:43,110
says vulnerable app download vulnerable

1028
00:43:40,320 --> 00:43:45,570
application you can<font color="#E5E5E5"> go</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> exploit VB and</font>

1029
00:43:43,110 --> 00:43:47,460
search for buffer overflow and<font color="#E5E5E5"> see if</font>

1030
00:43:45,570 --> 00:43:51,180
you can<font color="#E5E5E5"> find some of these older simple</font>

1031
00:43:47,460 --> 00:43:53,580
<font color="#E5E5E5">stack based buffer overflows find those</font>

1032
00:43:51,180 --> 00:43:55,859
<font color="#E5E5E5">exploits download the vulnerable program</font>

1033
00:43:53,580 --> 00:43:58,020
to your<font color="#E5E5E5"> VM and run it and you can</font>

1034
00:43:55,860 --> 00:44:02,820
practice<font color="#E5E5E5"> you can use the exploit that's</font>

1035
00:43:58,020 --> 00:44:04,890
there<font color="#CCCCCC"> too you can</font><font color="#E5E5E5"> use that exploit just</font>

1036
00:44:02,820 --> 00:44:06,810
to see does it<font color="#E5E5E5"> indeed work and then you</font>

1037
00:44:04,890 --> 00:44:09,629
<font color="#E5E5E5">can go through the process of writing</font>

1038
00:44:06,810 --> 00:44:11,220
<font color="#E5E5E5">your own exploit and going through the</font>

1039
00:44:09,630 --> 00:44:14,760
same<font color="#E5E5E5"> steps to just get comfortable with</font>

1040
00:44:11,220 --> 00:44:16,439
this process<font color="#CCCCCC"> around this</font><font color="#E5E5E5"> same</font><font color="#CCCCCC"> time there</font>

1041
00:44:14,760 --> 00:44:19,110
<font color="#E5E5E5">was a bunch of mp3 players that were</font>

1042
00:44:16,440 --> 00:44:21,510
<font color="#E5E5E5">vulnerable to buffer overflows if you</font>

1043
00:44:19,110 --> 00:44:23,310
have these badly formatted<font color="#E5E5E5"> m3u playlists</font>

1044
00:44:21,510 --> 00:44:24,540
you can<font color="#CCCCCC"> use this same process</font>

1045
00:44:23,310 --> 00:44:26,490
but instead<font color="#CCCCCC"> of now connecting to a</font>

1046
00:44:24,540 --> 00:44:29,640
socket based server you<font color="#E5E5E5"> use a script to</font>

1047
00:44:26,490 --> 00:44:31,680
generate progressively larger<font color="#E5E5E5"> playlist</font>

1048
00:44:29,640 --> 00:44:33,359
files and then<font color="#E5E5E5"> ideally you find some way</font>

1049
00:44:31,680 --> 00:44:34,649
<font color="#CCCCCC">to orchestrate it so you can restart the</font>

1050
00:44:33,360 --> 00:44:36,450
program manually and run through<font color="#E5E5E5"> all</font>

1051
00:44:34,650 --> 00:44:38,250
your payloads because it's a little<font color="#E5E5E5"> bit</font>

1052
00:44:36,450 --> 00:44:40,470
<font color="#E5E5E5">more of a hassle</font><font color="#CCCCCC"> but it's definitely</font>

1053
00:44:38,250 --> 00:44:42,120
<font color="#E5E5E5">doable to use that exact same process</font>

1054
00:44:40,470 --> 00:44:46,049
the only<font color="#CCCCCC"> thing that changes is how</font>

1055
00:44:42,120 --> 00:44:47,520
<font color="#CCCCCC">you're speaking to the program I do want</font>

1056
00:44:46,050 --> 00:44:50,130
to<font color="#E5E5E5"> thank some people</font><font color="#CCCCCC"> stephen</font><font color="#E5E5E5"> bradshaw</font>

1057
00:44:47,520 --> 00:44:52,830
<font color="#E5E5E5">for writing</font><font color="#CCCCCC"> von server and two blog</font>

1058
00:44:50,130 --> 00:44:56,450
articles that he wrote<font color="#E5E5E5"> that helped me</font>

1059
00:44:52,830 --> 00:44:59,610
<font color="#CCCCCC">learn</font><font color="#E5E5E5"> peter coil encoder</font><font color="#CCCCCC"> has some great</font>

1060
00:44:56,450 --> 00:45:01,980
<font color="#E5E5E5">buffer overflow exploits on his some</font>

1061
00:44:59,610 --> 00:45:04,860
blog articles about buffer overflows<font color="#CCCCCC"> and</font>

1062
00:45:01,980 --> 00:45:07,380
he also wrote<font color="#E5E5E5"> the</font><font color="#CCCCCC"> mona modules so that</font>

1063
00:45:04,860 --> 00:45:10,650
is great<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well our very own Ron Bo's</font>

1064
00:45:07,380 --> 00:45:13,320
has his skull security wiki that has

1065
00:45:10,650 --> 00:45:16,140
some useful information<font color="#E5E5E5"> in there the his</font>

1066
00:45:13,320 --> 00:45:18,390
reference material on x86<font color="#E5E5E5"> assembly and</font>

1067
00:45:16,140 --> 00:45:24,420
the registers<font color="#E5E5E5"> was very</font><font color="#CCCCCC"> useful</font><font color="#E5E5E5"> to me</font>

1068
00:45:18,390 --> 00:45:29,250
<font color="#E5E5E5">there's Ron Bo's</font><font color="#CCCCCC"> I also</font><font color="#E5E5E5"> want to thank my</font>

1069
00:45:24,420 --> 00:45:31,080
friends<font color="#E5E5E5"> commie</font><font color="#CCCCCC"> bastard was he was</font>

1070
00:45:29,250 --> 00:45:33,750
essential in<font color="#E5E5E5"> helping me put this</font>

1071
00:45:31,080 --> 00:45:36,090
together<font color="#CCCCCC"> I was sitting there</font><font color="#E5E5E5"> a few</font><font color="#CCCCCC"> weeks</font>

1072
00:45:33,750 --> 00:45:37,710
before<font color="#E5E5E5"> Derby con and I was ready to</font><font color="#CCCCCC"> quit</font>

1073
00:45:36,090 --> 00:45:40,460
<font color="#CCCCCC">I was ready to back out cuz I</font><font color="#E5E5E5"> felt like</font>

1074
00:45:37,710 --> 00:45:42,180
I<font color="#E5E5E5"> just couldn't do this that this was I</font>

1075
00:45:40,460 --> 00:45:43,860
didn't<font color="#E5E5E5"> feel like I knew what I was</font>

1076
00:45:42,180 --> 00:45:45,870
talking about and<font color="#E5E5E5"> he talked me off the</font>

1077
00:45:43,860 --> 00:45:47,460
ledge we sat down and<font color="#E5E5E5"> made sure that</font>

1078
00:45:45,870 --> 00:45:49,109
<font color="#CCCCCC">everything that</font><font color="#E5E5E5"> was in here</font><font color="#CCCCCC"> were were</font>

1079
00:45:47,460 --> 00:45:51,960
the right things<font color="#E5E5E5"> people needed to know</font>

1080
00:45:49,110 --> 00:45:57,060
<font color="#E5E5E5">and</font><font color="#CCCCCC"> big-endian smalls</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Jared bird</font>

1081
00:45:51,960 --> 00:45:59,420
<font color="#CCCCCC">also</font><font color="#E5E5E5"> big supporters they helped me learn</font>

1082
00:45:57,060 --> 00:46:02,700
<font color="#E5E5E5">a lot in the buffer overflow process</font>

1083
00:45:59,420 --> 00:46:06,060
thanks to them<font color="#E5E5E5"> besides organizers and</font>

1084
00:46:02,700 --> 00:46:09,770
volunteers for having me out<font color="#E5E5E5"> here</font><font color="#CCCCCC"> yeah</font>

1085
00:46:06,060 --> 00:46:09,770
big round of applause to<font color="#E5E5E5"> them for sure</font>

1086
00:46:10,849 --> 00:46:15,690
so I<font color="#CCCCCC"> mentioned I had some resources for</font>

1087
00:46:13,890 --> 00:46:21,270
you<font color="#E5E5E5"> so there's links to</font><font color="#CCCCCC"> Vaughn server</font>

1088
00:46:15,690 --> 00:46:22,680
and<font color="#E5E5E5"> Mona dot</font><font color="#CCCCCC"> PI on here</font><font color="#E5E5E5"> and I will if</font>

1089
00:46:21,270 --> 00:46:24,599
you<font color="#CCCCCC"> want to pause</font><font color="#E5E5E5"> take a picture but</font><font color="#CCCCCC"> I</font>

1090
00:46:22,680 --> 00:46:30,359
will show at the end<font color="#E5E5E5"> of the link where</font>

1091
00:46:24,599 --> 00:46:31,950
you can<font color="#E5E5E5"> download the slides</font><font color="#CCCCCC"> so I got</font>

1092
00:46:30,359 --> 00:46:34,410
some blog articles that you can<font color="#CCCCCC"> learn</font>

1093
00:46:31,950 --> 00:46:37,169
from<font color="#E5E5E5"> here we've got this first link is</font>

1094
00:46:34,410 --> 00:46:39,328
<font color="#CCCCCC">steven Bradshaw's</font><font color="#E5E5E5"> beginning stack</font><font color="#CCCCCC"> base</font>

1095
00:46:37,170 --> 00:46:41,010
buffer overflow and he has a series of

1096
00:46:39,329 --> 00:46:43,800
blog articles<font color="#E5E5E5"> that link from there about</font>

1097
00:46:41,010 --> 00:46:45,290
how how to get progressively more<font color="#CCCCCC"> and</font>

1098
00:46:43,800 --> 00:46:48,900
<font color="#CCCCCC">more advanced doing buffer overflows</font>

1099
00:46:45,290 --> 00:46:51,569
<font color="#CCCCCC">same with korlam code or peter</font><font color="#E5E5E5"> his blogs</font>

1100
00:46:48,900 --> 00:46:54,930
are there<font color="#E5E5E5"> another one from security sift</font>

1101
00:46:51,569 --> 00:46:56,819
on writing exploits as well as some

1102
00:46:54,930 --> 00:47:00,618
links<font color="#CCCCCC"> to learning about buffer overflows</font>

1103
00:46:56,819 --> 00:47:02,910
and the I'll link to<font color="#CCCCCC"> Skull security</font>

1104
00:47:00,619 --> 00:47:05,250
<font color="#CCCCCC">here's some practice resources because</font>

1105
00:47:02,910 --> 00:47:06,899
yeah<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> great I learned</font><font color="#CCCCCC"> bone server</font>

1106
00:47:05,250 --> 00:47:09,990
what do I do next

1107
00:47:06,900 --> 00:47:12,270
we use there's number of different sites

1108
00:47:09,990 --> 00:47:15,149
exploit exercises<font color="#CCCCCC"> calm I'm told as good</font>

1109
00:47:12,270 --> 00:47:20,400
I have not been<font color="#E5E5E5"> to that site</font><font color="#CCCCCC"> so I it</font>

1110
00:47:15,150 --> 00:47:22,230
should<font color="#E5E5E5"> be safe over the wire</font><font color="#CCCCCC"> the over</font>

1111
00:47:20,400 --> 00:47:24,810
the wire<font color="#CCCCCC"> war gaming network has some</font>

1112
00:47:22,230 --> 00:47:26,579
great<font color="#E5E5E5"> resources</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is that the same</font>

1113
00:47:24,810 --> 00:47:28,828
place as smash the stack is<font color="#E5E5E5"> or is yeah</font>

1114
00:47:26,579 --> 00:47:30,780
so smashing the stack<font color="#CCCCCC"> smash stack war</font>

1115
00:47:28,829 --> 00:47:32,910
game there's a lot of these games<font color="#E5E5E5"> that</font>

1116
00:47:30,780 --> 00:47:36,869
you can<font color="#CCCCCC"> login and and they're kind of</font>

1117
00:47:32,910 --> 00:47:38,368
like<font color="#CCCCCC"> terminal based</font><font color="#E5E5E5"> or web app based for</font>

1118
00:47:36,869 --> 00:47:40,130
learning different types of things

1119
00:47:38,369 --> 00:47:42,270
including doing buffer overflows

1120
00:47:40,130 --> 00:47:44,369
<font color="#E5E5E5">vulnerable you can download vulnerable</font>

1121
00:47:42,270 --> 00:47:46,170
intentionally vulnerable<font color="#E5E5E5"> VMs</font><font color="#CCCCCC"> some of</font>

1122
00:47:44,369 --> 00:47:48,810
them are designed<font color="#E5E5E5"> more for like network</font>

1123
00:47:46,170 --> 00:47:50,099
<font color="#CCCCCC">pentesting and web apps and there are</font>

1124
00:47:48,810 --> 00:47:53,940
<font color="#CCCCCC">definitely</font><font color="#E5E5E5"> some for learning buffer</font>

1125
00:47:50,099 --> 00:47:56,910
overflows be careful what you<font color="#E5E5E5"> download</font>

1126
00:47:53,940 --> 00:47:58,500
there because we<font color="#E5E5E5"> don't know always</font><font color="#CCCCCC"> what</font>

1127
00:47:56,910 --> 00:48:01,980
people are including in those<font color="#CCCCCC"> VMS</font><font color="#E5E5E5"> and</font>

1128
00:47:58,500 --> 00:48:03,359
hack the<font color="#E5E5E5"> box see you</font><font color="#CCCCCC"> I have not</font><font color="#E5E5E5"> played</font>

1129
00:48:01,980 --> 00:48:04,740
the games on there I've logged in I

1130
00:48:03,359 --> 00:48:06,900
haven't<font color="#E5E5E5"> had a chance to play them but</font>

1131
00:48:04,740 --> 00:48:08,848
<font color="#E5E5E5">I'm told that there are some buffer</font>

1132
00:48:06,900 --> 00:48:12,569
overflow based challenges there as well

1133
00:48:08,849 --> 00:48:14,579
as other kinds<font color="#E5E5E5"> of pen testing so with</font>

1134
00:48:12,569 --> 00:48:16,529
that<font color="#E5E5E5"> I'm Mike and hard water</font><font color="#CCCCCC"> Mike</font><font color="#E5E5E5"> at</font>

1135
00:48:14,579 --> 00:48:18,180
hard water security<font color="#CCCCCC"> comm if you have</font>

1136
00:48:16,530 --> 00:48:20,310
questions I'm hard water hacker on

1137
00:48:18,180 --> 00:48:22,680
<font color="#E5E5E5">Twitter you can follow me on there if</font>

1138
00:48:20,310 --> 00:48:24,180
you<font color="#CCCCCC"> want and my slides are available</font><font color="#E5E5E5"> on</font>

1139
00:48:22,680 --> 00:48:26,220
github<font color="#E5E5E5"> its github calm</font>

1140
00:48:24,180 --> 00:48:29,790
<font color="#CCCCCC">slash hard water hacker</font><font color="#E5E5E5"> and then it's I</font>

1141
00:48:26,220 --> 00:48:31,319
want<font color="#E5E5E5"> my</font><font color="#CCCCCC"> EIP with underscores so with</font>

1142
00:48:29,790 --> 00:48:34,800
that I want to<font color="#E5E5E5"> thank all of you for</font>

1143
00:48:31,319 --> 00:48:36,450
sticking<font color="#E5E5E5"> around</font><font color="#CCCCCC"> hopefully I was</font>

1144
00:48:34,800 --> 00:48:37,890
<font color="#E5E5E5">understandable because like I</font><font color="#CCCCCC"> said I'm</font>

1145
00:48:36,450 --> 00:48:40,020
dealing with<font color="#E5E5E5"> Connie bola</font><font color="#CCCCCC"> from last</font>

1146
00:48:37,890 --> 00:48:41,759
weekend and I actually went<font color="#CCCCCC"> back to my</font>

1147
00:48:40,020 --> 00:48:43,470
room this<font color="#E5E5E5"> afternoon</font><font color="#CCCCCC"> and slept because</font><font color="#E5E5E5"> I</font>

1148
00:48:41,760 --> 00:48:46,800
felt so horrible<font color="#E5E5E5"> so I'm glad that</font><font color="#CCCCCC"> I</font>

1149
00:48:43,470 --> 00:48:48,839
could survive with that<font color="#CCCCCC"> that's all I</font>

1150
00:48:46,800 --> 00:48:51,420
have for<font color="#CCCCCC"> you today</font><font color="#E5E5E5"> I hope this was</font>

1151
00:48:48,839 --> 00:48:54,500
useful for you<font color="#E5E5E5"> do you</font><font color="#CCCCCC"> have any not</font><font color="#E5E5E5"> too</font>

1152
00:48:51,420 --> 00:48:54,500
painful<font color="#E5E5E5"> questions yes</font>

1153
00:49:09,010 --> 00:49:13,520
so there were two questions<font color="#E5E5E5"> first</font>

1154
00:49:11,060 --> 00:49:16,670
question<font color="#E5E5E5"> was I was using XP could you</font>

1155
00:49:13,520 --> 00:49:18,259
use Windows 7 Windows 10<font color="#E5E5E5"> actually you</font>

1156
00:49:16,670 --> 00:49:20,750
should be<font color="#CCCCCC"> able to as long</font><font color="#E5E5E5"> as there's</font>

1157
00:49:18,260 --> 00:49:24,020
nothing<font color="#CCCCCC"> else that</font><font color="#E5E5E5"> is running that's</font>

1158
00:49:20,750 --> 00:49:25,849
looking for<font color="#E5E5E5"> these buffer overflows to be</font>

1159
00:49:24,020 --> 00:49:27,800
happening like some kind of<font color="#E5E5E5"> protection</font>

1160
00:49:25,849 --> 00:49:31,310
system so<font color="#E5E5E5"> Windows Defender might block</font>

1161
00:49:27,800 --> 00:49:34,460
<font color="#E5E5E5">that but because</font><font color="#CCCCCC"> bone server</font><font color="#E5E5E5"> bundles its</font>

1162
00:49:31,310 --> 00:49:36,470
own<font color="#CCCCCC"> DLL as long as you're on a 32-bit</font>

1163
00:49:34,460 --> 00:49:38,630
architecture<font color="#E5E5E5"> things will be the same if</font>

1164
00:49:36,470 --> 00:49:40,790
you switch to<font color="#E5E5E5"> 64-bit architecture things</font>

1165
00:49:38,630 --> 00:49:43,970
will be a little<font color="#E5E5E5"> bit different</font><font color="#CCCCCC"> and I</font>

1166
00:49:40,790 --> 00:49:45,740
haven't<font color="#E5E5E5"> tried it in 64-bit but it should</font>

1167
00:49:43,970 --> 00:49:48,500
<font color="#E5E5E5">work</font><font color="#CCCCCC"> the second part of the</font><font color="#E5E5E5"> question was</font>

1168
00:49:45,740 --> 00:49:50,240
I used Python<font color="#CCCCCC"> did you could you use</font>

1169
00:49:48,500 --> 00:49:52,550
another<font color="#CCCCCC"> language could use dotnet</font>

1170
00:49:50,240 --> 00:49:55,549
c-sharp for instance absolutely you can

1171
00:49:52,550 --> 00:49:57,680
use whatever you<font color="#CCCCCC"> want to develop your</font>

1172
00:49:55,550 --> 00:49:59,750
<font color="#E5E5E5">exploits and I am I am comfortable with</font>

1173
00:49:57,680 --> 00:50:02,660
Python that's<font color="#E5E5E5"> what's the easiest one for</font>

1174
00:49:59,750 --> 00:50:05,810
me to use<font color="#CCCCCC"> but you could use</font><font color="#E5E5E5"> whatever you</font>

1175
00:50:02,660 --> 00:50:11,420
want<font color="#CCCCCC"> and you're comfortable with any</font>

1176
00:50:05,810 --> 00:50:14,359
other questions nope<font color="#CCCCCC"> discretions head</font>

1177
00:50:11,420 --> 00:50:16,200
<font color="#E5E5E5">okay alright well with</font><font color="#CCCCCC"> that thank you</font>

1178
00:50:14,359 --> 00:50:22,630
<font color="#E5E5E5">that's all I have</font>

1179
00:50:16,200 --> 00:50:22,629
[Applause]

