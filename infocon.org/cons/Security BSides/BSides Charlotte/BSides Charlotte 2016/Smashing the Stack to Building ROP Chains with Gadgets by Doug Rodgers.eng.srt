1
00:00:16,030 --> 00:00:19,400
hey everyone how are you you guys still

2
00:00:19,400 --> 00:00:23,840
wake yeah okay well I'm gonna put you to

3
00:00:23,840 --> 00:00:26,600
sleep how many people like looking at

4
00:00:26,600 --> 00:00:30,800
hex yeah that's right that was more

5
00:00:30,800 --> 00:00:33,620
hands-on inspecting that's good okay so

6
00:00:33,620 --> 00:00:36,680
my talk is really long and I can't say

7
00:00:36,680 --> 00:00:38,870
at all because I buffer overflow or

8
00:00:38,870 --> 00:00:40,640
something I don't know I I don't know

9
00:00:40,640 --> 00:00:42,559
what I was thinking when I submitted

10
00:00:42,559 --> 00:00:44,629
this talk because I thought I could go

11
00:00:44,629 --> 00:00:48,170
from like beginning to end you know

12
00:00:48,170 --> 00:00:52,100
in 60 minutes and we'll see what it

13
00:00:52,100 --> 00:00:57,790
happens I'm paying two tracks let's see

14
00:00:57,790 --> 00:01:00,440
there we go Who am I I'm paying tracks

15
00:01:00,440 --> 00:01:03,050
I'm a lead security engineer at a big

16
00:01:03,050 --> 00:01:06,590
company somewhere around here and I like

17
00:01:06,590 --> 00:01:10,250
I like trying to figure out how things

18
00:01:10,250 --> 00:01:16,009
work and I like breaking things you know

19
00:01:16,009 --> 00:01:17,869
I didn't put that in the slide but I do

20
00:01:17,869 --> 00:01:19,070
you like breaking things and we're gonna

21
00:01:19,070 --> 00:01:20,630
learn how to break some stuff today I

22
00:01:20,630 --> 00:01:24,650
mean this is not my profession at all I

23
00:01:24,650 --> 00:01:26,869
do this for fun even though people have

24
00:01:26,869 --> 00:01:28,729
told me that I probably should look for

25
00:01:28,729 --> 00:01:32,060
work in this field what I do actually do

26
00:01:32,060 --> 00:01:34,070
is I I do

27
00:01:34,070 --> 00:01:37,490
malware reversing for a career this is

28
00:01:37,490 --> 00:01:40,100
kind of similar so I wanted to talk

29
00:01:40,100 --> 00:01:42,590
about like how to get started in this

30
00:01:42,590 --> 00:01:46,189
field I think that a lot of people don't

31
00:01:46,189 --> 00:01:47,570
get started because they think man

32
00:01:47,570 --> 00:01:50,150
there's hacks involved it's hard or

33
00:01:50,150 --> 00:01:52,280
there's assembly language right it's

34
00:01:52,280 --> 00:01:54,830
really hard it's not really that hard I

35
00:01:54,830 --> 00:01:57,259
think it's kind of like you know you

36
00:01:57,259 --> 00:01:58,729
just have to get your feet wet and then

37
00:01:58,729 --> 00:02:02,030
you realize you know what the water is

38
00:02:02,030 --> 00:02:04,520
actually pretty warm you know I'll get

39
00:02:04,520 --> 00:02:06,110
into it a little bit more there's a

40
00:02:06,110 --> 00:02:07,549
lotta there's a lot of literature out

41
00:02:07,549 --> 00:02:11,060
there and I I think that one of the

42
00:02:11,060 --> 00:02:12,920
problems that I've seen with the

43
00:02:12,920 --> 00:02:15,860
literature is it dives in real deep

44
00:02:15,860 --> 00:02:18,709
right really fast and then it just

45
00:02:18,709 --> 00:02:20,630
scares you off like my brain would hurt

46
00:02:20,630 --> 00:02:22,190
after reading a couple of pages and I'd

47
00:02:22,190 --> 00:02:24,019
have to walk away and then like a year

48
00:02:24,019 --> 00:02:26,140
later I'd be like wait I remember

49
00:02:26,140 --> 00:02:29,980
I wanted to learn about that so today I

50
00:02:29,980 --> 00:02:31,900
hope that I can like give you that push

51
00:02:31,900 --> 00:02:34,510
into the water and hopefully it's not

52
00:02:34,510 --> 00:02:38,400
too deep and you know you guys can start

53
00:02:38,400 --> 00:02:42,940
you know breaking some stuff too and be

54
00:02:42,940 --> 00:02:44,950
like if you guys have questions

55
00:02:44,950 --> 00:02:46,840
afterwards and you're interested in

56
00:02:46,840 --> 00:02:48,790
you're reaching out to me with questions

57
00:02:48,790 --> 00:02:49,660
and stuff

58
00:02:49,660 --> 00:02:52,890
I'm always open open to like you know

59
00:02:52,890 --> 00:02:55,630
sharing what I know and hey if you know

60
00:02:55,630 --> 00:02:57,910
something more than me please let me

61
00:02:57,910 --> 00:03:00,160
know because I am all about learning I

62
00:03:00,160 --> 00:03:02,350
would love to you know share information

63
00:03:02,350 --> 00:03:06,030
so when you get started what you need

64
00:03:06,030 --> 00:03:09,250
it's really makes it a lot easier if you

65
00:03:09,250 --> 00:03:10,239
have some type of virtualization

66
00:03:10,239 --> 00:03:13,209
software VMware is great you really

67
00:03:13,209 --> 00:03:14,860
probably want to have something that can

68
00:03:14,860 --> 00:03:17,650
take snapshots right because it's a real

69
00:03:17,650 --> 00:03:19,930
bummer when you have to go and like

70
00:03:19,930 --> 00:03:21,850
start everything over again over and

71
00:03:21,850 --> 00:03:24,070
over and over again if you can take a

72
00:03:24,070 --> 00:03:25,630
snapshot and go back to the snapshot

73
00:03:25,630 --> 00:03:27,940
quick it makes life a lot easier

74
00:03:27,940 --> 00:03:31,019
you need a victim right today a

75
00:03:31,019 --> 00:03:33,070
Microsoft apt is gonna be a victim

76
00:03:33,070 --> 00:03:35,920
because just it's just so easy right now

77
00:03:35,920 --> 00:03:38,829
because on Microsoft right Microsoft is

78
00:03:38,829 --> 00:03:43,630
great but it's because this particular

79
00:03:43,630 --> 00:03:45,579
piece of software is just like I think

80
00:03:45,579 --> 00:03:50,700
it was raining just to be like you know

81
00:03:50,700 --> 00:03:51,880
pwned

82
00:03:51,880 --> 00:03:54,640
I don't know so and you needed to bugger

83
00:03:54,640 --> 00:03:56,590
right and some other tools I'm going to

84
00:03:56,590 --> 00:03:57,880
show you that there's some of the tools

85
00:03:57,880 --> 00:03:59,500
that we're gonna use some really really

86
00:03:59,500 --> 00:04:03,489
cool tools so I am NOT very good with

87
00:04:03,489 --> 00:04:05,680
slides and we're not gonna be doing a

88
00:04:05,680 --> 00:04:08,620
slideshow here I did pray to the demo

89
00:04:08,620 --> 00:04:11,650
gods this morning and I'm hoping that

90
00:04:11,650 --> 00:04:13,989
they heard my calls because this is an

91
00:04:13,989 --> 00:04:17,108
entire demo for 60 minutes with some

92
00:04:17,108 --> 00:04:21,608
slides thrown in so what do we have here

93
00:04:21,608 --> 00:04:24,490
we have a Python script I hope everybody

94
00:04:24,490 --> 00:04:26,110
can see it wait in the back if not

95
00:04:26,110 --> 00:04:28,360
please move forward there's lots of

96
00:04:28,360 --> 00:04:34,120
space down here and it I'm using Python

97
00:04:34,120 --> 00:04:37,000
if you were a ruby person use a ruby you

98
00:04:37,000 --> 00:04:39,610
know if you are a sea

99
00:04:39,610 --> 00:04:42,069
sharp person some more power to you man

100
00:04:42,069 --> 00:04:48,400
I use Python just because I don't know I

101
00:04:48,400 --> 00:04:51,189
used to be a Perl guy and then one day I

102
00:04:51,189 --> 00:04:53,949
woke up and realized that everybody's

103
00:04:53,949 --> 00:04:55,780
saying that Python was easier it was

104
00:04:55,780 --> 00:04:58,389
really right and I decided to change my

105
00:04:58,389 --> 00:05:04,210
ways so I have a script this is how you

106
00:05:04,210 --> 00:05:06,810
want to start out with a buffer overflow

107
00:05:06,810 --> 00:05:09,219
what do we have we're gonna we're gonna

108
00:05:09,219 --> 00:05:11,949
like create a hundred eight thousand

109
00:05:11,949 --> 00:05:15,219
days sorry I was missing a zero just uh

110
00:05:15,219 --> 00:05:17,409
a thousand days right

111
00:05:17,409 --> 00:05:20,740
why is capitalized why I have no idea

112
00:05:20,740 --> 00:05:23,580
that it seems to be the convention right

113
00:05:23,580 --> 00:05:25,900
like I was telling the client the class

114
00:05:25,900 --> 00:05:28,210
I was teaching yesterday I would have

115
00:05:28,210 --> 00:05:31,150
chosen capital B's for those that were

116
00:05:31,150 --> 00:05:33,009
not in my class why would I choose

117
00:05:33,009 --> 00:05:36,490
capital B's for the thing I want to put

118
00:05:36,490 --> 00:05:41,039
in there any one capital B's okay

119
00:05:41,039 --> 00:05:45,699
capital B in hacks is 42 it's the

120
00:05:45,699 --> 00:05:47,199
answers the life of it use it the

121
00:05:47,199 --> 00:05:51,339
universe and everything right but I know

122
00:05:51,339 --> 00:05:55,449
right yeah yeah that's true so I'm using

123
00:05:55,449 --> 00:05:57,039
a it's just because it's convention you

124
00:05:57,039 --> 00:06:01,180
can use whatever you want if capital B

125
00:06:01,180 --> 00:06:05,979
is 42 what's capital a anybody 41 right

126
00:06:05,979 --> 00:06:07,900
exactly so we're gonna we're going to

127
00:06:07,900 --> 00:06:10,930
just create a file this particular piece

128
00:06:10,930 --> 00:06:17,819
of software is a movie player right and

129
00:06:17,819 --> 00:06:21,250
the movie player needs a playlist we're

130
00:06:21,250 --> 00:06:23,589
creating a playlist obviously with a

131
00:06:23,589 --> 00:06:26,439
bunch of A's in it right and that's

132
00:06:26,439 --> 00:06:30,279
right okay so I'm gonna just go and run

133
00:06:30,279 --> 00:06:32,949
that script I called it exploit

134
00:06:32,949 --> 00:06:35,469
underscore AIP and it created a file

135
00:06:35,469 --> 00:06:39,330
it's it's my playlist let's check it out

136
00:06:39,330 --> 00:06:41,740
look at that all those moves are those

137
00:06:41,740 --> 00:06:45,099
songs in that playlist right looks looks

138
00:06:45,099 --> 00:06:46,839
good to me or movies I'm sorry it's a

139
00:06:46,839 --> 00:06:50,020
movie player and I'm gonna go over so I

140
00:06:50,020 --> 00:06:52,089
have two boxes right you need two boxes

141
00:06:52,089 --> 00:06:52,840
or

142
00:06:52,840 --> 00:06:55,990
two boxes if you can do run Python or

143
00:06:55,990 --> 00:06:57,730
whatever script scripting language that

144
00:06:57,730 --> 00:07:00,250
you use on a Windows box you can

145
00:07:00,250 --> 00:07:01,600
probably get away with just using one

146
00:07:01,600 --> 00:07:05,010
box if your victim is you know the same

147
00:07:05,010 --> 00:07:07,389
platform is what you're developing your

148
00:07:07,389 --> 00:07:11,440
code in right but I'm using Kali as one

149
00:07:11,440 --> 00:07:15,490
box I'm using my Windows box obviously

150
00:07:15,490 --> 00:07:18,639
from our victim I'm using a shared

151
00:07:18,639 --> 00:07:20,590
folder between the two so that I can

152
00:07:20,590 --> 00:07:22,300
just create the file on one side and

153
00:07:22,300 --> 00:07:28,360
then you know execute the exploit on the

154
00:07:28,360 --> 00:07:31,360
other so this is my exploit this is very

155
00:07:31,360 --> 00:07:33,040
complicated right this is what I'm

156
00:07:33,040 --> 00:07:34,470
talking about let's get our feet wet

157
00:07:34,470 --> 00:07:37,780
let's dip our toe in right it's just a

158
00:07:37,780 --> 00:07:40,120
bunch of Bay's well come to find out

159
00:07:40,120 --> 00:07:42,790
with this piece of software let's fire

160
00:07:42,790 --> 00:07:48,720
this piece of software up I'll pay later

161
00:07:48,720 --> 00:07:52,510
okay I'm gonna open it up okay here's

162
00:07:52,510 --> 00:07:54,850
the file okay and I'm gonna open it up

163
00:07:54,850 --> 00:07:58,630
in a debugger immunity debugger okay

164
00:07:58,630 --> 00:08:01,330
immunity debugger is a debugger based on

165
00:08:01,330 --> 00:08:02,950
ollie debug lots of people know about

166
00:08:02,950 --> 00:08:04,870
Holley do bug right because we use it

167
00:08:04,870 --> 00:08:08,050
for malware reversing immunity to

168
00:08:08,050 --> 00:08:10,300
debugger is an awesome debugger as well

169
00:08:10,300 --> 00:08:12,639
it's based a lot like I said on all you

170
00:08:12,639 --> 00:08:14,380
do bug the nice thing the reason why I'm

171
00:08:14,380 --> 00:08:17,770
using it is because it supports Python

172
00:08:17,770 --> 00:08:20,800
right and there is this great gentleman

173
00:08:20,800 --> 00:08:24,700
Nate whose name is Peter and I cannot

174
00:08:24,700 --> 00:08:28,990
say his last name but he goes by the

175
00:08:28,990 --> 00:08:34,208
name cor LAN and Hiro Mona and Mona is a

176
00:08:34,208 --> 00:08:37,059
great tool to help you figure out you

177
00:08:37,059 --> 00:08:39,190
know how to write these exploits so I'm

178
00:08:39,190 --> 00:08:45,279
going to go in attach my debugger to the

179
00:08:45,279 --> 00:08:48,640
app the application and see what happens

180
00:08:48,640 --> 00:08:53,790
right so I'm gonna start it up go and

181
00:08:53,790 --> 00:08:58,150
the application crashed first what I

182
00:08:58,150 --> 00:09:00,070
need to do is I need to go and accept

183
00:09:00,070 --> 00:09:04,600
some exceptions that I have nothing to

184
00:09:04,600 --> 00:09:05,910
do with the

185
00:09:05,910 --> 00:09:10,080
overflow that I just did to this but you

186
00:09:10,080 --> 00:09:12,210
will see right now that there's a couple

187
00:09:12,210 --> 00:09:14,910
things that have happened right

188
00:09:14,910 --> 00:09:17,190
do we see something that might be

189
00:09:17,190 --> 00:09:20,630
noticeable on the screen at the moment

190
00:09:20,690 --> 00:09:23,640
yes we see some forty-ones there's lots

191
00:09:23,640 --> 00:09:24,720
of forty-ones

192
00:09:24,720 --> 00:09:26,190
there's about a thousand of them

193
00:09:26,190 --> 00:09:27,380
actually there's probably multiple

194
00:09:27,380 --> 00:09:30,300
thousands of them right in memory right

195
00:09:30,300 --> 00:09:32,790
now the other thing that I've done is

196
00:09:32,790 --> 00:09:35,340
I've overwritten ie IP e IP is the

197
00:09:35,340 --> 00:09:37,890
instruction pointer that tells the

198
00:09:37,890 --> 00:09:39,840
application what it's supposed to do

199
00:09:39,840 --> 00:09:42,300
next guess what there is no instruction

200
00:09:42,300 --> 00:09:45,570
at memory address for one for one for

201
00:09:45,570 --> 00:09:49,710
one for one yeah so what what just

202
00:09:49,710 --> 00:09:51,630
happened I just crashed the crash that

203
00:09:51,630 --> 00:09:54,210
just by sending your days all right

204
00:09:54,210 --> 00:09:58,170
that's it I'm done hey how'd you guys

205
00:09:58,170 --> 00:10:01,770
like my talk okay okay thanks thanks

206
00:10:01,770 --> 00:10:04,170
okay let's let's let's develop this into

207
00:10:04,170 --> 00:10:05,310
something more meaningful meaningful

208
00:10:05,310 --> 00:10:08,910
right okay so we're gonna go and you

209
00:10:08,910 --> 00:10:11,490
know what I'm just gonna fix my screen

210
00:10:11,490 --> 00:10:19,560
here yeah I made it smaller yeah for

211
00:10:19,560 --> 00:10:21,270
some reason it's not it's not really

212
00:10:21,270 --> 00:10:23,760
you're doing what I wanted okay so I'm

213
00:10:23,760 --> 00:10:26,370
so what I need to do now is I need to

214
00:10:26,370 --> 00:10:31,070
figure out how far into my payload I

215
00:10:31,070 --> 00:10:34,470
have to go before I over righty IP right

216
00:10:34,470 --> 00:10:36,900
because I really want to control a IP

217
00:10:36,900 --> 00:10:40,170
because if I can control a IP I can tell

218
00:10:40,170 --> 00:10:42,870
it the application what to do right it

219
00:10:42,870 --> 00:10:43,650
becomes mine

220
00:10:43,650 --> 00:10:46,080
so what I'm gonna do is I'm gonna use a

221
00:10:46,080 --> 00:10:48,510
tool that lots of you know how many to

222
00:10:48,510 --> 00:10:49,700
red teamers are in here

223
00:10:49,700 --> 00:10:52,770
raise your hand high be proud that's

224
00:10:52,770 --> 00:10:55,350
right okay I'm now red teamer bye I

225
00:10:55,350 --> 00:11:04,710
aspired to be one Metasploit is a great

226
00:11:04,710 --> 00:11:06,600
tool and what we're going to do is we're

227
00:11:06,600 --> 00:11:09,450
going to utilize a function of

228
00:11:09,450 --> 00:11:12,650
Metasploit called

229
00:11:13,790 --> 00:11:19,350
pattern create man my sorry about this

230
00:11:19,350 --> 00:11:22,100
having it plugged into this this

231
00:11:22,100 --> 00:11:25,709
projector is messing with my okay here

232
00:11:25,709 --> 00:11:31,589
we go and if you go and use it what it

233
00:11:31,589 --> 00:11:34,070
does is it creates a cyclical pattern

234
00:11:34,070 --> 00:11:36,750
actually you know what before I do that

235
00:11:36,750 --> 00:11:39,269
let's but say how big I want it because

236
00:11:39,269 --> 00:11:46,920
that's going to be really bad okay yeah

237
00:11:46,920 --> 00:11:49,459
sorry guys

238
00:11:56,380 --> 00:12:00,010
there so you can see it oh you gotta be

239
00:12:00,010 --> 00:12:03,490
kidding me Oh Kenya oh good okay I'm

240
00:12:03,490 --> 00:12:05,890
glad you can see it I can't I can't see

241
00:12:05,890 --> 00:12:07,230
anything

242
00:12:07,230 --> 00:12:10,180
okay there we go I can see it now okay

243
00:12:10,180 --> 00:12:13,180
I'm gonna do this again with 1,000

244
00:12:13,180 --> 00:12:16,660
characters there we go okay so what it's

245
00:12:16,660 --> 00:12:19,270
done is its created a cyclical pattern

246
00:12:19,270 --> 00:12:22,330
right there's no repeating pattern in

247
00:12:22,330 --> 00:12:25,600
this right I think there is probably

248
00:12:25,600 --> 00:12:29,010
limit as to how big the sort of pattern

249
00:12:29,010 --> 00:12:32,560
you can create but for our purposes here

250
00:12:32,560 --> 00:12:34,360
we only need a pattern that's thousands

251
00:12:34,360 --> 00:12:36,640
bytes long so what I'm gonna do is I'm

252
00:12:36,640 --> 00:12:37,990
gonna throw that into my script real

253
00:12:37,990 --> 00:12:44,050
quick okay

254
00:12:44,050 --> 00:12:47,890
and I'm going to replace my thousand

255
00:12:47,890 --> 00:12:51,060
days with my pattern

256
00:12:59,030 --> 00:13:01,720
so

257
00:13:05,400 --> 00:13:09,360
okay so here we are we've got our

258
00:13:09,360 --> 00:13:21,390
pattern I'm gonna run it again this this

259
00:13:21,390 --> 00:13:30,030
went better in my head okay okay so now

260
00:13:30,030 --> 00:13:32,850
if you look at the the file right we've

261
00:13:32,850 --> 00:13:34,800
just got this pattern okay so I'm gonna

262
00:13:34,800 --> 00:13:36,960
go back over to my Windows machine and

263
00:13:36,960 --> 00:13:39,840
now I'm gonna try to figure out how far

264
00:13:39,840 --> 00:13:42,570
off or how big the office offset is

265
00:13:42,570 --> 00:13:47,060
before I'm hitting yucky

266
00:13:55,960 --> 00:14:00,370
opening it up okay I've attached I'm

267
00:14:00,370 --> 00:14:03,930
gonna crash it again

268
00:14:04,350 --> 00:14:12,700
and crashed it again right this has cost

269
00:14:12,700 --> 00:14:14,800
the crash now look at it and see what's

270
00:14:14,800 --> 00:14:17,230
an EIP we have a different we don't have

271
00:14:17,230 --> 00:14:19,149
four ones anymore right because I didn't

272
00:14:19,149 --> 00:14:22,270
send all A's to it capitalized but I do

273
00:14:22,270 --> 00:14:25,720
want to know what the this represents

274
00:14:25,720 --> 00:14:29,440
how big of an offset it is I can go back

275
00:14:29,440 --> 00:14:32,110
and take this hacks that is in the IP

276
00:14:32,110 --> 00:14:36,550
right now and ask Metasploit what the

277
00:14:36,550 --> 00:14:39,490
offset is by using pattern off offset so

278
00:14:39,490 --> 00:14:42,370
pattern offset is the partner to pattern

279
00:14:42,370 --> 00:14:45,190
pattern create but I'm going to say even

280
00:14:45,190 --> 00:14:47,080
save some time and I'm going to use Mona

281
00:14:47,080 --> 00:14:50,320
right - to figure it out so within the

282
00:14:50,320 --> 00:14:52,060
immunity to bugger I can just go down to

283
00:14:52,060 --> 00:14:56,709
the bottom and say hey Mona

284
00:14:56,709 --> 00:15:00,520
I want the pattern offset of three seven

285
00:15:00,520 --> 00:15:07,810
six nine four one three six okay an

286
00:15:07,810 --> 00:15:11,620
offset of 260 bytes that's all and then

287
00:15:11,620 --> 00:15:14,680
I have control of yucky so I'm gonna go

288
00:15:14,680 --> 00:15:16,930
back I'm gonna change my script again

289
00:15:16,930 --> 00:15:21,190
I'm gonna get rid of this pattern and

290
00:15:21,190 --> 00:15:23,470
what did I say two hundred sixty five

291
00:15:23,470 --> 00:15:24,670
sixty bytes

292
00:15:24,670 --> 00:15:30,209
all right so pre e IP equals 260 bytes

293
00:15:30,209 --> 00:15:33,750
so this time I'm going to change this to

294
00:15:33,750 --> 00:15:38,140
Priya a IP right but hey you know what I

295
00:15:38,140 --> 00:15:41,620
also want to make sure that I am

296
00:15:41,620 --> 00:15:44,279
overwriting the IP so I'm gonna put B's

297
00:15:44,279 --> 00:15:48,610
for B's in because that will fill out B

298
00:15:48,610 --> 00:15:52,420
IP right because I need four bytes for

299
00:15:52,420 --> 00:15:56,890
this register and then I'm going to fill

300
00:15:56,890 --> 00:16:01,690
the rest of it with what sees ya see

301
00:16:01,690 --> 00:16:05,040
sounds good so I'm gonna say tail size

302
00:16:05,040 --> 00:16:09,730
equals total -

303
00:16:09,730 --> 00:16:14,680
the payload size right let's see the

304
00:16:14,680 --> 00:16:21,820
length of the payload and then I'm gonna

305
00:16:21,820 --> 00:16:25,510
say pretty much just this up here same

306
00:16:25,510 --> 00:16:33,870
thing and I'm gonna put season here and

307
00:16:33,870 --> 00:16:38,290
change this tail size so what we're

308
00:16:38,290 --> 00:16:48,580
gonna have this file oh yeah what did I

309
00:16:48,580 --> 00:16:49,050
do

310
00:16:49,050 --> 00:16:58,180
yep that's right thank you did I miss

311
00:16:58,180 --> 00:17:01,890
another one oh yeah nice thanks guys

312
00:17:01,890 --> 00:17:06,250
okay this is the reason why and you

313
00:17:06,250 --> 00:17:09,579
always have to pray to the demo gods

314
00:17:09,579 --> 00:17:10,780
okay perfect

315
00:17:10,780 --> 00:17:13,270
right so hopefully the bees will show up

316
00:17:13,270 --> 00:17:21,310
in an EIP okay go back over and start it

317
00:17:21,310 --> 00:17:22,750
up again so there's a lot of repetition

318
00:17:22,750 --> 00:17:24,760
to this right you're going to be going

319
00:17:24,760 --> 00:17:26,290
back and forth back and forth until you

320
00:17:26,290 --> 00:17:29,670
get what you want

321
00:17:41,680 --> 00:17:46,260
oh yeah set they're happy about

322
00:17:53,810 --> 00:17:59,630
yeah there you go awesome it's very hard

323
00:17:59,630 --> 00:18:05,090
with this screen the way it is okay okay

324
00:18:05,090 --> 00:18:07,490
so now what have we done we verified

325
00:18:07,490 --> 00:18:19,280
that indeed we have 42 s in VIP okay the

326
00:18:19,280 --> 00:18:21,770
other thing that to know is I want to

327
00:18:21,770 --> 00:18:23,810
look at the SAC down here where this

328
00:18:23,810 --> 00:18:26,660
blue line is is the stack right and you

329
00:18:26,660 --> 00:18:30,290
can see how I have A's above the bees

330
00:18:30,290 --> 00:18:35,360
the bees at memory address 0 0 1 8 F 2 0

331
00:18:35,360 --> 00:18:39,050
4 is apparently where a IP is being

332
00:18:39,050 --> 00:18:41,300
pulled off with stack right more than

333
00:18:41,300 --> 00:18:43,610
likely there's a red that occurred that

334
00:18:43,610 --> 00:18:46,310
caused this to happen right there's a

335
00:18:46,310 --> 00:18:48,080
saved EIP that's supposed to be at that

336
00:18:48,080 --> 00:18:50,960
particular memory address the function

337
00:18:50,960 --> 00:18:52,460
is finishing going back to the calling

338
00:18:52,460 --> 00:18:55,310
function and instead of going back to

339
00:18:55,310 --> 00:18:57,320
where it's supposed to I told it to go

340
00:18:57,320 --> 00:19:02,360
to BBB B right hex address 42 answer to

341
00:19:02,360 --> 00:19:04,610
life the universe and everything right

342
00:19:04,610 --> 00:19:07,640
but then also on the stack you also see

343
00:19:07,640 --> 00:19:10,730
C's going down further right I have

344
00:19:10,730 --> 00:19:12,890
control of a lot of the stack right now

345
00:19:12,890 --> 00:19:17,960
right so I can do a lot of stuff here so

346
00:19:17,960 --> 00:19:19,850
the next thing I want to do is I want to

347
00:19:19,850 --> 00:19:22,000
do something with this man what can I do

348
00:19:22,000 --> 00:19:25,190
what can I do from here I can I can go

349
00:19:25,190 --> 00:19:28,550
if if that that was a ret that told the

350
00:19:28,550 --> 00:19:30,080
application to go someplace else

351
00:19:30,080 --> 00:19:31,730
well don't I go and try to figure out

352
00:19:31,730 --> 00:19:34,370
where I wanted to go hey let's see where

353
00:19:34,370 --> 00:19:36,980
where we can tell it to go right ok so

354
00:19:36,980 --> 00:19:41,920
Mona has this great tool called jump and

355
00:19:41,920 --> 00:19:46,490
you can say Mona I want to know where

356
00:19:46,490 --> 00:19:49,570
all the addresses in this memory spaces

357
00:19:49,570 --> 00:19:52,910
that includes a jump in I'm very

358
00:19:52,910 --> 00:19:57,070
interested in a jump ESP why a jump ESP

359
00:19:57,070 --> 00:20:02,210
because ESP is highlighted in blue right

360
00:20:02,210 --> 00:20:05,870
now right I have control of that memory

361
00:20:05,870 --> 00:20:07,520
address right

362
00:20:07,520 --> 00:20:11,150
I can I can tell it to go someplace as

363
00:20:11,150 --> 00:20:13,180
long as I put that memory address in

364
00:20:13,180 --> 00:20:16,160
that spot where that blue line is

365
00:20:16,160 --> 00:20:18,590
because that's where ESP is pointing so

366
00:20:18,590 --> 00:20:21,590
I'm gonna go and ask Mona for that I'd

367
00:20:21,590 --> 00:20:28,340
say Mona jump - are because it's

368
00:20:28,340 --> 00:20:29,450
register yes

369
00:20:29,450 --> 00:20:33,050
ESP right well I've done this by the

370
00:20:33,050 --> 00:20:35,600
miracles of television I've gone and

371
00:20:35,600 --> 00:20:36,620
done that already

372
00:20:36,620 --> 00:20:39,010
sometimes whenever you run application

373
00:20:39,010 --> 00:20:41,420
commands and Mona they come back really

374
00:20:41,420 --> 00:20:43,580
quick sometimes they come back really

375
00:20:43,580 --> 00:20:45,290
slow so if you're doing a presentation

376
00:20:45,290 --> 00:20:48,560
like this and you'd say Mona jump it'll

377
00:20:48,560 --> 00:20:49,910
come back pretty quick and you know

378
00:20:49,910 --> 00:20:51,920
people won't be staring at you for a

379
00:20:51,920 --> 00:20:54,680
long time if you go and say Mona rap

380
00:20:54,680 --> 00:20:56,720
right and that's where we're trying to

381
00:20:56,720 --> 00:20:59,480
get to you might as well tell everybody

382
00:20:59,480 --> 00:21:01,790
to go get some coffee come back in an

383
00:21:01,790 --> 00:21:05,960
hour you know so yeah you you definitely

384
00:21:05,960 --> 00:21:08,690
want to think about that whenever you're

385
00:21:08,690 --> 00:21:11,060
doing this type of work so I did some of

386
00:21:11,060 --> 00:21:13,960
this beforehand and what I want is I

387
00:21:13,960 --> 00:21:18,140
want to know about the jumps so in my

388
00:21:18,140 --> 00:21:21,230
files I have a jump text file that had

389
00:21:21,230 --> 00:21:26,540
motor create and if you go down you'll

390
00:21:26,540 --> 00:21:32,210
find that there's all of these jumps

391
00:21:32,210 --> 00:21:38,630
here right

392
00:21:38,630 --> 00:21:41,810
all of these jumps now the interesting

393
00:21:41,810 --> 00:21:43,730
thing about the way Mona goes and looks

394
00:21:43,730 --> 00:21:47,240
for things is it goes and says hey if

395
00:21:47,240 --> 00:21:51,110
this library had or this delouse has any

396
00:21:51,110 --> 00:21:57,170
type of exploit mitigation properties I

397
00:21:57,170 --> 00:21:58,880
don't really want to look in them right

398
00:21:58,880 --> 00:22:03,320
if a deal has a SLR turned on and the

399
00:22:03,320 --> 00:22:05,240
the memory addresses are always changing

400
00:22:05,240 --> 00:22:08,080
that's no good to me I need to have

401
00:22:08,080 --> 00:22:10,100
addresses that are reliable

402
00:22:10,100 --> 00:22:14,240
right now all the OSD loz in Windows 7

403
00:22:14,240 --> 00:22:17,390
are all a SLR they're changing all the

404
00:22:17,390 --> 00:22:19,920
time so I can't use those

405
00:22:19,920 --> 00:22:22,350
very interesting this application has

406
00:22:22,350 --> 00:22:25,890
multiple libraries that got shipped with

407
00:22:25,890 --> 00:22:29,640
the application and they are all for the

408
00:22:29,640 --> 00:22:33,270
most part safe for me to use because

409
00:22:33,270 --> 00:22:35,460
there's no memory or exploit mitigation

410
00:22:35,460 --> 00:22:38,490
properties compiled into them makes it

411
00:22:38,490 --> 00:22:40,470
very easy to do this type of work with

412
00:22:40,470 --> 00:22:41,400
this application

413
00:22:41,400 --> 00:22:44,250
so there's actually this one file that

414
00:22:44,250 --> 00:22:47,910
your library you see come up over and

415
00:22:47,910 --> 00:22:50,100
over and over again its configuration

416
00:22:50,100 --> 00:22:55,500
DOL there is no mitigation and on at all

417
00:22:55,500 --> 00:22:59,310
no rebase no safe seh if you keep

418
00:22:59,310 --> 00:23:03,120
looking across the screen no aslr so

419
00:23:03,120 --> 00:23:05,670
we're gonna just take this jump ESB this

420
00:23:05,670 --> 00:23:07,380
memory address and we're gonna throw it

421
00:23:07,380 --> 00:23:13,980
into our script right here now what I

422
00:23:13,980 --> 00:23:19,280
need to do is I need to pack it because

423
00:23:19,580 --> 00:23:22,800
the x86 architecture is little onion

424
00:23:22,800 --> 00:23:24,420
which means it flips all the bits

425
00:23:24,420 --> 00:23:26,910
backwards so I can either go through the

426
00:23:26,910 --> 00:23:30,990
painstaking task of flipping my back

427
00:23:30,990 --> 00:23:33,630
bits and making a mistake while you guys

428
00:23:33,630 --> 00:23:37,500
are watching or I can just use pack and

429
00:23:37,500 --> 00:23:43,200
have it do it the work for me right okay

430
00:23:43,200 --> 00:23:50,610
so now I should get my my application to

431
00:23:50,610 --> 00:23:53,580
go and execute that jump now did I put

432
00:23:53,580 --> 00:23:55,830
the jump in there I didn't inject any

433
00:23:55,830 --> 00:24:01,260
type of code so far alright this is

434
00:24:01,260 --> 00:24:02,940
really important as far as rap is

435
00:24:02,940 --> 00:24:07,440
concerned what rhop is is the art of not

436
00:24:07,440 --> 00:24:10,620
injecting code into the application but

437
00:24:10,620 --> 00:24:12,930
it's still having and troll of the

438
00:24:12,930 --> 00:24:15,540
application itself so what I've done is

439
00:24:15,540 --> 00:24:17,910
I've found an instruction that already

440
00:24:17,910 --> 00:24:20,430
exists something I can use all the time

441
00:24:20,430 --> 00:24:23,570
and I'm going to tell it to go and

442
00:24:23,570 --> 00:24:27,150
execute this code what I'm also going to

443
00:24:27,150 --> 00:24:29,610
do let's just look go back and look at

444
00:24:29,610 --> 00:24:33,000
the application again we have a series

445
00:24:33,000 --> 00:24:33,760
of C's

446
00:24:33,760 --> 00:24:40,930
right and I need to oh yeah I have a

447
00:24:40,930 --> 00:24:43,660
series of C's and I need to figure out

448
00:24:43,660 --> 00:24:45,820
how many see how much of a distance

449
00:24:45,820 --> 00:24:48,220
there is between where that command is

450
00:24:48,220 --> 00:24:50,650
where the memory addresses where I'm

451
00:24:50,650 --> 00:24:54,310
controlling EIP and where ESP is

452
00:24:54,310 --> 00:24:56,800
pointing at the moment right because

453
00:24:56,800 --> 00:24:58,450
what I'm gonna do is I'm gonna want to

454
00:24:58,450 --> 00:25:02,860
put some code in there to to execute now

455
00:25:02,860 --> 00:25:05,350
I'm kind of stepping away from Rob for a

456
00:25:05,350 --> 00:25:07,840
minute with this extra this this

457
00:25:07,840 --> 00:25:09,610
demonstration just so that you can see

458
00:25:09,610 --> 00:25:12,040
how that you know this one rap

459
00:25:12,040 --> 00:25:15,220
instruction in a way this one gadget is

460
00:25:15,220 --> 00:25:18,180
going to help me out okay so I'm gonna

461
00:25:18,180 --> 00:25:21,490
what do I have I have one two three four

462
00:25:21,490 --> 00:25:24,010
I have sixteen C's in between so I'm

463
00:25:24,010 --> 00:25:30,490
gonna put that in my script so that we

464
00:25:30,490 --> 00:25:36,910
know we can also put some instruction

465
00:25:36,910 --> 00:25:39,790
that instructions in there so I just say

466
00:25:39,790 --> 00:25:43,840
say D for the sake of argument because

467
00:25:43,840 --> 00:25:46,920
I'm on a roll now and I'm gonna also

468
00:25:46,920 --> 00:25:54,040
throw in to the payload I'm gonna throw

469
00:25:54,040 --> 00:25:57,400
in hex see see anybody know what hex CC

470
00:25:57,400 --> 00:26:02,710
does to a debugger it pauses it right

471
00:26:02,710 --> 00:26:06,910
yep okay and I'm gonna just throw

472
00:26:06,910 --> 00:26:09,910
forward those in write the one is good

473
00:26:09,910 --> 00:26:12,460
enough right but I'm gonna throw it for

474
00:26:12,460 --> 00:26:16,830
in because it will look pretty okay oh

475
00:26:17,820 --> 00:26:19,300
yeah thank you

476
00:26:19,300 --> 00:26:25,860
good job okay

477
00:26:26,900 --> 00:26:29,850
okay let's check it out and see what

478
00:26:29,850 --> 00:26:31,939
happens

479
00:26:36,950 --> 00:26:45,550
start it up attach the debugger again

480
00:26:47,980 --> 00:26:55,760
right and now we're gonna actually you

481
00:26:55,760 --> 00:26:57,770
know what before I load it what I'm

482
00:26:57,770 --> 00:27:00,920
gonna do is I'm going to halt the ex-ceo

483
00:27:00,920 --> 00:27:04,070
actually you know I would hope the CCS I

484
00:27:04,070 --> 00:27:05,840
was thinking ahead and didn't even think

485
00:27:05,840 --> 00:27:08,140
about it okay so I'm gonna accept these

486
00:27:08,140 --> 00:27:10,010
exceptions that have nothing to do with

487
00:27:10,010 --> 00:27:13,880
my okay so what just happened do you

488
00:27:13,880 --> 00:27:16,070
guys see what is on the in the

489
00:27:16,070 --> 00:27:19,790
instruction panel we have CCS how did

490
00:27:19,790 --> 00:27:20,450
that happen

491
00:27:20,450 --> 00:27:25,190
I told us to go there right what

492
00:27:25,190 --> 00:27:26,840
happened is something that should never

493
00:27:26,840 --> 00:27:29,510
really happen in an application I just

494
00:27:29,510 --> 00:27:34,070
told the application to jump in execute

495
00:27:34,070 --> 00:27:37,670
code on my stack right what you're

496
00:27:37,670 --> 00:27:40,400
seeing up here there was those CCS and

497
00:27:40,400 --> 00:27:41,450
then the 43's

498
00:27:41,450 --> 00:27:45,980
the int ie B X that's the stuff I'd put

499
00:27:45,980 --> 00:27:49,040
on the stack right that's those aren't

500
00:27:49,040 --> 00:27:53,260
instructions that's my my my playlist

501
00:27:53,260 --> 00:27:56,480
right so now I have control I can do

502
00:27:56,480 --> 00:27:58,640
whatever I want I can execute because I

503
00:27:58,640 --> 00:28:01,430
can I got that in three they interrupt

504
00:28:01,430 --> 00:28:03,920
three to execute so what am I gonna do

505
00:28:03,920 --> 00:28:06,200
I'm gonna go back and I'm gonna add

506
00:28:06,200 --> 00:28:11,270
shellcode to this particular sport

507
00:28:11,270 --> 00:28:14,770
exploit because it's pretty easy right

508
00:28:14,770 --> 00:28:17,600
where did I get this show code anybody

509
00:28:17,600 --> 00:28:23,270
now yeah I have no I have no idea where

510
00:28:23,270 --> 00:28:28,250
I got it yeah I have no idea so I don't

511
00:28:28,250 --> 00:28:34,610
know what it's gonna do right okay

512
00:28:34,610 --> 00:28:36,440
so I need to get rid of these C's first

513
00:28:36,440 --> 00:28:40,090
right yeah

514
00:28:45,130 --> 00:28:49,539
the reason is because I am trying to see

515
00:28:49,539 --> 00:28:56,139
what's happening on in the I'm trying to

516
00:28:56,139 --> 00:29:00,789
see what is happening in the memory

517
00:29:00,789 --> 00:29:02,710
space while I'm doing this research

518
00:29:02,710 --> 00:29:06,519
right because whenever whenever you are

519
00:29:06,519 --> 00:29:09,580
affecting things in the application you

520
00:29:09,580 --> 00:29:12,429
need to know how you're affecting it and

521
00:29:12,429 --> 00:29:16,360
you don't know before it happens how the

522
00:29:16,360 --> 00:29:18,880
memory set up you when you start out you

523
00:29:18,880 --> 00:29:21,490
just know there's a there's a

524
00:29:21,490 --> 00:29:23,289
vulnerability you know you see it on an

525
00:29:23,289 --> 00:29:28,389
exploit DP you see an SES CBE right it

526
00:29:28,389 --> 00:29:30,159
says there's a vulnerability and then

527
00:29:30,159 --> 00:29:31,929
you do some more research and it says oh

528
00:29:31,929 --> 00:29:34,630
yeah if you throw so-and-so into this

529
00:29:34,630 --> 00:29:36,789
it's gonna crash it and then you're like

530
00:29:36,789 --> 00:29:40,149
oh it crashes it yeah you know how can I

531
00:29:40,149 --> 00:29:42,460
kick take control of it right I'm about

532
00:29:42,460 --> 00:29:44,260
to take control of it right really

533
00:29:44,260 --> 00:29:52,029
really well okay oh I'll get to that

534
00:29:52,029 --> 00:29:55,779
yeah yeah yep yep yep yeah the

535
00:29:55,779 --> 00:29:58,330
interrupts 3 is is telling the the

536
00:29:58,330 --> 00:30:04,240
debugger to that is this a way of yeah

537
00:30:04,240 --> 00:30:08,289
that is a breakpoint but I think it's

538
00:30:08,289 --> 00:30:09,700
not the breakpoint that you were

539
00:30:09,700 --> 00:30:12,159
thinking of but I will show you that in

540
00:30:12,159 --> 00:30:16,269
a minute so a minute ago when I like

541
00:30:16,269 --> 00:30:18,220
hesitated I said oh you know what I

542
00:30:18,220 --> 00:30:21,039
don't even need this when I hesitated I

543
00:30:21,039 --> 00:30:22,539
said oh wait I need to do something else

544
00:30:22,539 --> 00:30:26,830
I was thinking oh I need to go and you

545
00:30:26,830 --> 00:30:28,690
know sent my breakpoint all right

546
00:30:28,690 --> 00:30:32,850
did anybody just see what happened I

547
00:30:33,539 --> 00:30:37,630
popped my shell right that's easy that's

548
00:30:37,630 --> 00:30:39,909
it all right

549
00:30:39,909 --> 00:30:45,580
did I use rock so okay yeah you guys are

550
00:30:45,580 --> 00:30:49,419
kind okay so I popped it right that was

551
00:30:49,419 --> 00:30:49,809
easy

552
00:30:49,809 --> 00:30:53,409
now my foots wet right you guys can do

553
00:30:53,409 --> 00:30:55,190
that anybody can do it

554
00:30:55,190 --> 00:30:57,260
if you got the right application to do

555
00:30:57,260 --> 00:30:59,810
it five times make sure that you can get

556
00:30:59,810 --> 00:31:02,450
comfortable doing it right it's really

557
00:31:02,450 --> 00:31:05,540
easy okay so now let's let's like dive

558
00:31:05,540 --> 00:31:10,370
in a little bit deeper right so if I go

559
00:31:10,370 --> 00:31:13,160
back to my slides real quick so we found

560
00:31:13,160 --> 00:31:13,850
an EIP

561
00:31:13,850 --> 00:31:17,150
right I talked about pattern create so

562
00:31:17,150 --> 00:31:19,510
there there's this interesting thing

563
00:31:19,510 --> 00:31:23,750
called structured exception handling and

564
00:31:23,750 --> 00:31:27,800
what it is is whenever you know a good

565
00:31:27,800 --> 00:31:32,180
developer writes code they will write it

566
00:31:32,180 --> 00:31:35,030
so that they know that there's going to

567
00:31:35,030 --> 00:31:37,640
be this particular thing that happens

568
00:31:37,640 --> 00:31:40,010
right in the code and they know that

569
00:31:40,010 --> 00:31:44,270
sometimes it might not successfully do

570
00:31:44,270 --> 00:31:45,860
whatever it's supposed to do right

571
00:31:45,860 --> 00:31:48,260
so they create an exception for it cool

572
00:31:48,260 --> 00:31:52,070
right so I'm gonna try something and if

573
00:31:52,070 --> 00:31:54,470
that do something doesn't work out we're

574
00:31:54,470 --> 00:31:56,270
gonna try to catch that exception and

575
00:31:56,270 --> 00:31:58,640
then we're gonna do something else if

576
00:31:58,640 --> 00:32:00,260
everything's fine with the first do

577
00:32:00,260 --> 00:32:02,680
something then it just keeps on going it

578
00:32:02,680 --> 00:32:06,110
totally ignores the you know the catch

579
00:32:06,110 --> 00:32:08,330
but if something bad happens like you

580
00:32:08,330 --> 00:32:12,470
know VIP gets shoved with for one for

581
00:32:12,470 --> 00:32:15,470
one for one then we probably should do

582
00:32:15,470 --> 00:32:17,560
something about that right well

583
00:32:17,560 --> 00:32:20,060
interestingly enough with this

584
00:32:20,060 --> 00:32:21,920
particular application when I did that

585
00:32:21,920 --> 00:32:25,250
when I threw the four ones into EIP an

586
00:32:25,250 --> 00:32:30,680
exception occurred let's check it out so

587
00:32:30,680 --> 00:32:35,540
I'm gonna go back and you know I love

588
00:32:35,540 --> 00:32:37,460
the color of the command shell I just

589
00:32:37,460 --> 00:32:39,050
have to say that's it that's a beautiful

590
00:32:39,050 --> 00:32:41,150
thing all right that's not supposed to

591
00:32:41,150 --> 00:32:44,960
happen but hey whatever that's cool okay

592
00:32:44,960 --> 00:32:47,900
so I'm gonna start it up again and I'll

593
00:32:47,900 --> 00:32:53,870
pay later and I really have to try to

594
00:32:53,870 --> 00:32:58,550
figure out how to get rid of that so I'm

595
00:32:58,550 --> 00:33:01,880
gonna attach to it and I'm just gonna go

596
00:33:01,880 --> 00:33:04,880
through this again right and actually

597
00:33:04,880 --> 00:33:06,710
you know what let's create a different

598
00:33:06,710 --> 00:33:09,400
totally different file

599
00:33:09,400 --> 00:33:16,039
pop back over and this time I'm going to

600
00:33:16,039 --> 00:33:21,500
have a different script and it's called

601
00:33:21,500 --> 00:33:26,690
exploit underscore Sh right yeah does it

602
00:33:26,690 --> 00:33:27,559
look familiar

603
00:33:27,559 --> 00:33:30,740
yeah it looks a lot a lot familiar right

604
00:33:30,740 --> 00:33:32,570
it's the same script that we started out

605
00:33:32,570 --> 00:33:34,549
with this time they difference is

606
00:33:34,549 --> 00:33:37,250
there's 700 bytes instead of a thousand

607
00:33:37,250 --> 00:33:40,730
bytes why well in this case it really

608
00:33:40,730 --> 00:33:44,210
doesn't matter right in some cases it

609
00:33:44,210 --> 00:33:46,010
might really matter because what will

610
00:33:46,010 --> 00:33:48,500
happen is sometimes you can do certain

611
00:33:48,500 --> 00:33:50,450
things with you know certain size

612
00:33:50,450 --> 00:33:53,720
payload but let's say you know you want

613
00:33:53,720 --> 00:33:56,299
to throw an exception right and take

614
00:33:56,299 --> 00:34:00,679
over the exception handler and for some

615
00:34:00,679 --> 00:34:02,899
reason if the payload is too big the

616
00:34:02,899 --> 00:34:05,480
exception never occurs because maybe

617
00:34:05,480 --> 00:34:07,250
something else handled the fact that

618
00:34:07,250 --> 00:34:09,349
your payload is too big so I'm just

619
00:34:09,349 --> 00:34:11,989
going to pretend you know that I have to

620
00:34:11,989 --> 00:34:14,199
have a payload of 700 instead of a

621
00:34:14,199 --> 00:34:17,510
thousand to you know initiate the

622
00:34:17,510 --> 00:34:19,760
vulnerability in this application and

623
00:34:19,760 --> 00:34:22,429
what I'm gonna do is I'm going to create

624
00:34:22,429 --> 00:34:32,810
this file right so we've got a file of a

625
00:34:32,810 --> 00:34:37,520
is 700 of them go back this time what

626
00:34:37,520 --> 00:34:39,530
we're gonna do is we're gonna pass the

627
00:34:39,530 --> 00:34:44,109
exception pass the point of E is

628
00:34:55,929 --> 00:34:59,150
open it up we crashed okay we're gonna

629
00:34:59,150 --> 00:35:01,609
get to the point where the IP is over in

630
00:35:01,609 --> 00:35:04,190
with four ones again right we just saw

631
00:35:04,190 --> 00:35:07,220
this this has just happened but the

632
00:35:07,220 --> 00:35:09,109
thing I didn't do before is I didn't

633
00:35:09,109 --> 00:35:11,510
look at the exception handlers right I

634
00:35:11,510 --> 00:35:13,460
over wrote the exception handlers for

635
00:35:13,460 --> 00:35:16,400
this so this application is good right

636
00:35:16,400 --> 00:35:20,359
in a way kind of it knows something bad

637
00:35:20,359 --> 00:35:22,400
happened right

638
00:35:22,400 --> 00:35:25,309
so in this case something bad happens so

639
00:35:25,309 --> 00:35:27,349
the exception should be go do something

640
00:35:27,349 --> 00:35:30,619
to fix it right but here's the bad thing

641
00:35:30,619 --> 00:35:33,890
i over wrote that too with less letters

642
00:35:33,890 --> 00:35:37,789
like really come on so now what do we do

643
00:35:37,789 --> 00:35:39,859
we're gonna do this exact same thing as

644
00:35:39,859 --> 00:35:42,589
we did before we're gonna do the pattern

645
00:35:42,589 --> 00:35:47,930
create everybody and keeping up with me

646
00:35:47,930 --> 00:35:51,520
that's excellent awesome I love it so

647
00:35:51,520 --> 00:35:55,180
this time I'm just gonna say user share

648
00:35:55,180 --> 00:36:02,029
Metasploit tools exploit pattern crate

649
00:36:02,029 --> 00:36:03,619
right our friend pattern crate from

650
00:36:03,619 --> 00:36:07,309
Metasploit i'm 700 and we're gonna throw

651
00:36:07,309 --> 00:36:17,450
it into the script wow that's pretty

652
00:36:17,450 --> 00:36:20,599
trippy here let's just do that again

653
00:36:20,599 --> 00:36:22,279
because i have no idea what just

654
00:36:22,279 --> 00:36:24,789
happened

655
00:36:34,560 --> 00:36:36,180
okay

656
00:36:36,180 --> 00:36:39,370
so now my file should have

657
00:36:39,370 --> 00:36:45,520
oh this isn't just not going along I

658
00:36:45,520 --> 00:36:56,800
apologize guys this is the reason why

659
00:36:56,800 --> 00:36:59,770
you don't do live demos ok parent right

660
00:36:59,770 --> 00:37:10,620
he apparently okay and that is okay I

661
00:37:10,980 --> 00:37:15,040
did prepare for this I had an original

662
00:37:15,040 --> 00:37:22,240
yeah right okay so this is the other

663
00:37:22,240 --> 00:37:24,730
thing that's bad about this is the fact

664
00:37:24,730 --> 00:37:27,190
that you know you try to do something

665
00:37:27,190 --> 00:37:31,150
cool like this in under an hour and that

666
00:37:31,150 --> 00:37:36,190
never does there we go okay so now we

667
00:37:36,190 --> 00:37:41,980
should have our pattern I'm going to

668
00:37:41,980 --> 00:37:45,570
throw that in in my payload

669
00:37:52,059 --> 00:37:53,859
while I'm doing this do you guys have

670
00:37:53,859 --> 00:37:57,759
any questions while I'm trying to

671
00:37:57,759 --> 00:38:02,069
recover okay

672
00:38:09,600 --> 00:38:12,990
okay here we go so here we we have a new

673
00:38:12,990 --> 00:38:16,740
file right and it should have our

674
00:38:16,740 --> 00:38:19,470
pattern in it now we can go and open

675
00:38:19,470 --> 00:38:24,270
this up again and we're going to find

676
00:38:24,270 --> 00:38:30,170
out what the offset is for for this

677
00:38:30,170 --> 00:38:43,140
exception handler okay okay so here's

678
00:38:43,140 --> 00:38:45,570
the point where we we were at before we

679
00:38:45,570 --> 00:38:48,180
over Oei P with that a memory address

680
00:38:48,180 --> 00:38:51,240
should be the same right because it's

681
00:38:51,240 --> 00:38:54,480
the same point 260 characters into the

682
00:38:54,480 --> 00:38:57,450
payload as we had before right now we're

683
00:38:57,450 --> 00:38:59,700
gonna actually look at the exception

684
00:38:59,700 --> 00:39:01,560
handlers and now the 40 ones are

685
00:39:01,560 --> 00:39:02,940
different right

686
00:39:02,940 --> 00:39:04,740
we've changed what's in the for the

687
00:39:04,740 --> 00:39:07,410
exception handlers the nice thing about

688
00:39:07,410 --> 00:39:10,580
the way the exception handler works on

689
00:39:10,580 --> 00:39:15,210
Windows is that you can use a gadget

690
00:39:15,210 --> 00:39:18,060
called pop pop ret to be able to take

691
00:39:18,060 --> 00:39:24,030
control of that particular data

692
00:39:24,030 --> 00:39:26,070
structure which is the exception handler

693
00:39:26,070 --> 00:39:27,690
so what we're gonna do is we're gonna go

694
00:39:27,690 --> 00:39:31,440
back to Mona and we're gonna say Mona I

695
00:39:31,440 --> 00:39:34,590
want to know what the offset is of this

696
00:39:34,590 --> 00:39:37,290
lower address so the way that the

697
00:39:37,290 --> 00:39:39,090
exception handler is actually work is

698
00:39:39,090 --> 00:39:42,990
there's two parts of each record the

699
00:39:42,990 --> 00:39:45,600
first part is a pointer to the next

700
00:39:45,600 --> 00:39:47,940
record so if you think about it think

701
00:39:47,940 --> 00:39:50,880
about this whenever you have an

702
00:39:50,880 --> 00:39:54,840
exception there's the the part where you

703
00:39:54,840 --> 00:39:56,760
know if the exception occurs there's the

704
00:39:56,760 --> 00:39:59,160
catch part and it goes off and you know

705
00:39:59,160 --> 00:40:00,900
there's it's supposed to go do something

706
00:40:00,900 --> 00:40:06,240
that is the exception handler itself and

707
00:40:06,240 --> 00:40:07,710
there's a pointer on the stack that

708
00:40:07,710 --> 00:40:10,080
points to that code to go and do that

709
00:40:10,080 --> 00:40:13,530
right and then below that arab right

710
00:40:13,530 --> 00:40:15,210
above that there's a pointer to the next

711
00:40:15,210 --> 00:40:18,360
exception handler so if the way it

712
00:40:18,360 --> 00:40:20,220
should work is it for some reason if

713
00:40:20,220 --> 00:40:23,310
that handler fails what do we want to

714
00:40:23,310 --> 00:40:27,000
do we want to go to the next panel geez

715
00:40:27,000 --> 00:40:30,570
maybe the next Handler and have that you

716
00:40:30,570 --> 00:40:32,610
know take care of what's going on and if

717
00:40:32,610 --> 00:40:34,320
that fails let's go to the next thing

718
00:40:34,320 --> 00:40:35,670
and the nice thing about Windows is the

719
00:40:35,670 --> 00:40:37,860
fact that there's an exception handler

720
00:40:37,860 --> 00:40:40,260
for the OS right and if you hit that

721
00:40:40,260 --> 00:40:42,840
your application just crashed it just

722
00:40:42,840 --> 00:40:46,050
disappears right so that is the reason

723
00:40:46,050 --> 00:40:48,750
why you know applications crash a lot of

724
00:40:48,750 --> 00:40:51,690
the time is because the exception

725
00:40:51,690 --> 00:40:54,180
handler process you know try to deal

726
00:40:54,180 --> 00:40:56,340
with whatever's going on and then it got

727
00:40:56,340 --> 00:40:57,720
down to the bottom and you know

728
00:40:57,720 --> 00:41:00,210
naturally occurring not what we're doing

729
00:41:00,210 --> 00:41:03,120
here of course and you know the

730
00:41:03,120 --> 00:41:05,970
operating system says oh you just hit my

731
00:41:05,970 --> 00:41:08,160
exception handler I'm shutting you down

732
00:41:08,160 --> 00:41:11,880
right you're going down now so we are

733
00:41:11,880 --> 00:41:17,340
going to take advantage of this this you

734
00:41:17,340 --> 00:41:19,770
know functionality and redirect

735
00:41:19,770 --> 00:41:21,990
execution flow because of it so I'm

736
00:41:21,990 --> 00:41:25,830
gonna go and take on the offset of this

737
00:41:25,830 --> 00:41:27,570
lower address which is actually the

738
00:41:27,570 --> 00:41:31,170
pointer to the next record in the chain

739
00:41:31,170 --> 00:41:34,380
this this one up here the four one three

740
00:41:34,380 --> 00:41:37,440
four seven five four one that is

741
00:41:37,440 --> 00:41:38,940
actually the pointer to the exception

742
00:41:38,940 --> 00:41:42,990
handler itself so what I need to do is I

743
00:41:42,990 --> 00:41:46,140
need to remember the point the pointer

744
00:41:46,140 --> 00:41:47,670
to the next record which is the lower

745
00:41:47,670 --> 00:41:51,120
one right for something I'm going to do

746
00:41:51,120 --> 00:41:54,440
in a minute but also this upper one is

747
00:41:54,440 --> 00:41:58,830
interesting to me because that I can use

748
00:41:58,830 --> 00:42:01,350
that to do kind of what I did before I

749
00:42:01,350 --> 00:42:04,710
can go find a memory address that has a

750
00:42:04,710 --> 00:42:09,090
pop-up right in it and redirect the flow

751
00:42:09,090 --> 00:42:11,850
of the execution of this application so

752
00:42:11,850 --> 00:42:14,220
I'm gonna go and ask Mona for the

753
00:42:14,220 --> 00:42:19,080
pattern offset and I'm going say 3 3 7 5

754
00:42:19,080 --> 00:42:26,340
4 1 3 2 and the offset is 608 bytes so

755
00:42:26,340 --> 00:42:29,730
I'm gonna go back and this time I'm

756
00:42:29,730 --> 00:42:35,760
gonna go and say 608 bytes into it right

757
00:42:35,760 --> 00:42:37,260
free

758
00:42:37,260 --> 00:42:44,530
seh equals 698 bytes right and what I

759
00:42:44,530 --> 00:42:51,040
want is this to be pretty Sh and then

760
00:42:51,040 --> 00:42:55,330
I'm going to write my age or my B's to

761
00:42:55,330 --> 00:42:57,100
overwrite the the pointer to the next

762
00:42:57,100 --> 00:43:00,340
record right and then I'm going to put

763
00:43:00,340 --> 00:43:03,610
season 2 right overwrite the pointer to

764
00:43:03,610 --> 00:43:06,370
the exception handler itself and then

765
00:43:06,370 --> 00:43:10,590
I'm gonna just finish it out tail size

766
00:43:10,590 --> 00:43:18,850
equals total minus the length of the

767
00:43:18,850 --> 00:43:25,630
payload yes thank you so do you guys

768
00:43:25,630 --> 00:43:29,830
under no why I'm saying doing this last

769
00:43:29,830 --> 00:43:33,570
bit why why do I keep doing this here

770
00:43:33,570 --> 00:43:41,380
the tail size that's right yes I want to

771
00:43:41,380 --> 00:43:43,330
make sure that my payload stays the same

772
00:43:43,330 --> 00:43:52,480
size so I'm going to exactly because if

773
00:43:52,480 --> 00:43:55,510
I make the payload too small I not might

774
00:43:55,510 --> 00:43:58,240
not overwrite something that should

775
00:43:58,240 --> 00:44:02,590
trigger the vulnerability yeah sometimes

776
00:44:02,590 --> 00:44:03,730
you can't yep

777
00:44:03,730 --> 00:44:06,040
it depends on the application this is

778
00:44:06,040 --> 00:44:07,900
all dependent on applications right

779
00:44:07,900 --> 00:44:10,090
every application that you look at is

780
00:44:10,090 --> 00:44:12,940
going to be completely different this

781
00:44:12,940 --> 00:44:14,920
one you know I think that you could

782
00:44:14,920 --> 00:44:17,310
probably write a couple thousand

783
00:44:17,310 --> 00:44:19,420
thousands of bites into it and it

784
00:44:19,420 --> 00:44:22,950
doesn't care okay

785
00:44:29,760 --> 00:44:32,049
yeah it's called fuzzing trial-and-error

786
00:44:32,049 --> 00:44:34,599
yeah good question

787
00:44:34,599 --> 00:44:37,750
you know there's another application

788
00:44:37,750 --> 00:44:40,240
that I gave to the class for an exercise

789
00:44:40,240 --> 00:44:44,230
yesterday and you know I didn't tell

790
00:44:44,230 --> 00:44:46,000
them how big of a buffer they needed

791
00:44:46,000 --> 00:44:47,920
right how big of a payload they needed

792
00:44:47,920 --> 00:44:50,650
and I said hey start with ten thousand

793
00:44:50,650 --> 00:44:52,660
bytes and just keep on going until you

794
00:44:52,660 --> 00:44:54,700
crash it right because the application

795
00:44:54,700 --> 00:44:56,170
is just gonna say oh yeah that's cool

796
00:44:56,170 --> 00:44:58,150
I'm gonna ignore you and then you're

797
00:44:58,150 --> 00:44:59,859
gonna send it yeah more bytes and it's

798
00:44:59,859 --> 00:45:01,839
gonna say yeah yeah I ignore you I'm

799
00:45:01,839 --> 00:45:04,539
ignoring you again right and then you're

800
00:45:04,539 --> 00:45:05,890
gonna get to this one point it's going

801
00:45:05,890 --> 00:45:10,089
to like just right just crash out now

802
00:45:10,089 --> 00:45:20,109
all the place okay so now let's see if

803
00:45:20,109 --> 00:45:23,880
we overrode the exception handler here

804
00:45:28,850 --> 00:45:33,950
okay here we are we over Oh the EIP you

805
00:45:33,950 --> 00:45:36,710
with 41's and here we see that we indeed

806
00:45:36,710 --> 00:45:39,020
have 42s in the pointer to the next

807
00:45:39,020 --> 00:45:44,450
record and 43's in the the exception

808
00:45:44,450 --> 00:45:46,250
pointer to the exception handler so we

809
00:45:46,250 --> 00:45:48,800
now we we've won control again right

810
00:45:48,800 --> 00:45:50,990
we're back in the same situation what

811
00:45:50,990 --> 00:45:53,570
can I do here well the thing with the

812
00:45:53,570 --> 00:45:56,720
exception handler on Windows is to take

813
00:45:56,720 --> 00:46:00,170
it advantage of this we want to be able

814
00:46:00,170 --> 00:46:02,330
to sort of pivot like we did before we

815
00:46:02,330 --> 00:46:05,390
before we kind of pivoted from you know

816
00:46:05,390 --> 00:46:09,890
running instructions normally from to

817
00:46:09,890 --> 00:46:12,260
running instructions off the stack so

818
00:46:12,260 --> 00:46:14,600
this what I'm gonna do now is I'm gonna

819
00:46:14,600 --> 00:46:17,240
use a pop up Brett and that's going to

820
00:46:17,240 --> 00:46:21,170
allow me to kind of pivot execution back

821
00:46:21,170 --> 00:46:27,530
to the stack right and a gadget when

822
00:46:27,530 --> 00:46:28,940
you're doing it dealing with rap is

823
00:46:28,940 --> 00:46:32,030
normally some type of series of

824
00:46:32,030 --> 00:46:35,780
instructions followed by a ret so a pop

825
00:46:35,780 --> 00:46:38,000
pop ret is a gadget you know as far as

826
00:46:38,000 --> 00:46:41,390
Roth is concerned so we're you know with

827
00:46:41,390 --> 00:46:43,100
this we're definitely getting into rock

828
00:46:43,100 --> 00:46:45,260
territory and it's a simple one but

829
00:46:45,260 --> 00:46:46,760
we're still doing it

830
00:46:46,760 --> 00:46:51,620
so let me just go and back and look for

831
00:46:51,620 --> 00:46:56,690
a Rob all right pop hot rap so in moaña

832
00:46:56,690 --> 00:46:58,940
I mean in the immunity debugger I could

833
00:46:58,940 --> 00:47:01,700
go in and ask Mona Mona I want to know

834
00:47:01,700 --> 00:47:05,000
where pop-up practices are and there is

835
00:47:05,000 --> 00:47:08,530
a command called seh right because we're

836
00:47:08,530 --> 00:47:11,000
dealing with seh at the moment makes it

837
00:47:11,000 --> 00:47:13,430
pretty easy when you run it you will get

838
00:47:13,430 --> 00:47:17,750
a file called SCH text and in there if

839
00:47:17,750 --> 00:47:21,560
we go down we will find all of these

840
00:47:21,560 --> 00:47:24,080
pop-up rights look at them all I mean

841
00:47:24,080 --> 00:47:26,330
there's tons of them let's see how long

842
00:47:26,330 --> 00:47:32,270
this thing is right seh you know

843
00:47:32,270 --> 00:47:34,370
thousands of pop-up rights that we can

844
00:47:34,370 --> 00:47:38,000
use so we can pretty much you know grab

845
00:47:38,000 --> 00:47:41,539
want any one of them that we want

846
00:47:41,539 --> 00:47:47,839
oh man I am way out of time Jared sorry

847
00:47:47,839 --> 00:47:48,459
man

848
00:47:48,459 --> 00:47:53,619
okay so this first one should I use it

849
00:47:53,619 --> 00:47:56,719
no I can't use this first one why

850
00:47:56,719 --> 00:48:01,459
because this application doesn't allow

851
00:48:01,459 --> 00:48:04,369
me to use hex zero zero right in mic

852
00:48:04,369 --> 00:48:06,709
payload if I try to use it it would it

853
00:48:06,709 --> 00:48:08,779
would just mess me up so I'm gonna use

854
00:48:08,779 --> 00:48:12,979
the next one I'm gonna use this one go

855
00:48:12,979 --> 00:48:19,059
back was that somebody asked why yeah

856
00:48:19,059 --> 00:48:23,149
okay why okay that's a great question

857
00:48:23,149 --> 00:48:28,429
there are bad characters for some

858
00:48:28,429 --> 00:48:30,859
applications some applications don't

859
00:48:30,859 --> 00:48:34,130
like is your hex zero zero does anybody

860
00:48:34,130 --> 00:48:37,429
know why an application wouldn't like

861
00:48:37,429 --> 00:48:41,209
hex zero zero it's a no bite it's a

862
00:48:41,209 --> 00:48:44,899
string terminator right right so with

863
00:48:44,899 --> 00:48:47,119
this application guess what it does it

864
00:48:47,119 --> 00:48:50,749
reads in the playlist is a string right

865
00:48:50,749 --> 00:48:53,029
and it terminates so if my payload has a

866
00:48:53,029 --> 00:48:56,869
null byte in it then it stops reading at

867
00:48:56,869 --> 00:48:59,299
that point my playlist is that much

868
00:48:59,299 --> 00:49:01,819
shorter right so I have to pick this

869
00:49:01,819 --> 00:49:04,069
next instruction because there's no no

870
00:49:04,069 --> 00:49:08,239
voice in it okay so what I'm gonna do is

871
00:49:08,239 --> 00:49:10,489
I'm just gonna go in and do the same

872
00:49:10,489 --> 00:49:17,469
thing as I did before and why am I using

873
00:49:17,469 --> 00:49:22,669
struck pack does anybody remember that's

874
00:49:22,669 --> 00:49:24,409
right this is a little endian so we need

875
00:49:24,409 --> 00:49:28,939
to deal with it accordingly okay so the

876
00:49:28,939 --> 00:49:30,919
other thing I'm going to do for times

877
00:49:30,919 --> 00:49:34,159
sake is I'm also going so i over wrote

878
00:49:34,159 --> 00:49:37,189
that i put the pack in the spot where

879
00:49:37,189 --> 00:49:39,289
the pointer to the handler exception

880
00:49:39,289 --> 00:49:42,499
exception handler is so that i can

881
00:49:42,499 --> 00:49:45,589
execute my popup read the other thing

882
00:49:45,589 --> 00:49:47,630
that i'm going to do if that is going to

883
00:49:47,630 --> 00:49:52,399
that caused the behavior of a seh to

884
00:49:52,399 --> 00:49:55,930
actually move ESP

885
00:49:55,930 --> 00:49:59,619
I mean allow me to jump to the point

886
00:49:59,619 --> 00:50:02,260
where the pointer to the next record is

887
00:50:02,260 --> 00:50:03,910
which is the four bytes before that

888
00:50:03,910 --> 00:50:07,480
where my bees were and what I'm gonna

889
00:50:07,480 --> 00:50:10,390
put in here is I'm gonna put a jump six

890
00:50:10,390 --> 00:50:12,730
bytes because what I'm gonna do is I'm

891
00:50:12,730 --> 00:50:16,000
going to pop up Brett kind of pivot it

892
00:50:16,000 --> 00:50:19,059
onto execution onto the stack execute my

893
00:50:19,059 --> 00:50:21,549
jump six which will allow me to jump

894
00:50:21,549 --> 00:50:24,849
over the gadget that I have here my pop

895
00:50:24,849 --> 00:50:27,099
out Brett and then I'll execute my show

896
00:50:27,099 --> 00:50:30,579
code so what I'm going to do here is I'm

897
00:50:30,579 --> 00:50:37,559
going to put EB 0 6 which is in heck

898
00:50:37,559 --> 00:50:41,680
machine code a jump 6 so remember that

899
00:50:41,680 --> 00:50:43,480
there's going to be a test later and

900
00:50:43,480 --> 00:50:45,819
then I'm going to also put two nulls and

901
00:50:45,819 --> 00:50:47,799
the reason why I now know is I'm just

902
00:50:47,799 --> 00:50:49,720
going to put two knobs in there and I'm

903
00:50:49,720 --> 00:50:51,039
putting those knobs in there because I

904
00:50:51,039 --> 00:50:52,599
just need to fill some space right

905
00:50:52,599 --> 00:50:54,039
because there's 4 bytes that I have to

906
00:50:54,039 --> 00:50:57,520
fill for that particular record and then

907
00:50:57,520 --> 00:50:59,980
what I'm also going to do is that since

908
00:50:59,980 --> 00:51:03,309
I know this is going to work I'm just

909
00:51:03,309 --> 00:51:07,510
gonna go and grab my shellcode again all

910
00:51:07,510 --> 00:51:10,240
right and I'm going to put it into my

911
00:51:10,240 --> 00:51:12,569
script

912
00:51:15,609 --> 00:51:19,900
okay and if I put it right here I'm

913
00:51:19,900 --> 00:51:26,319
actually going to put some knots in here

914
00:51:26,319 --> 00:51:28,869
as well just so it gives it a little bit

915
00:51:28,869 --> 00:51:35,049
of nice landing not the reason you put

916
00:51:35,049 --> 00:51:38,650
knops in is to make it so that you can

917
00:51:38,650 --> 00:51:41,859
allow the cpu to kind of slide down the

918
00:51:41,859 --> 00:51:43,749
stack right sometimes you don't know

919
00:51:43,749 --> 00:51:46,749
exactly where the CPU is going to land

920
00:51:46,749 --> 00:51:49,269
right now we know because I'm jumping

921
00:51:49,269 --> 00:51:52,420
six bytes but if we don't know exactly

922
00:51:52,420 --> 00:51:54,279
where we're in the land

923
00:51:54,279 --> 00:51:55,959
putting an OP slide in there actually

924
00:51:55,959 --> 00:51:59,619
gives us a bigger land landing to to

925
00:51:59,619 --> 00:52:01,209
land in so I'm gonna put that in there

926
00:52:01,209 --> 00:52:02,950
and then after that I'm just gonna put a

927
00:52:02,950 --> 00:52:09,328
payload plus equals my shellcode right

928
00:52:15,749 --> 00:52:23,140
okay and I'm gonna execute that and if

929
00:52:23,140 --> 00:52:28,599
oh I must have done something wrong um

930
00:52:28,599 --> 00:52:32,709
oh yeah yeah no maybe my shell code is

931
00:52:32,709 --> 00:52:43,140
longer than let's say hex it looks fine

932
00:52:43,140 --> 00:52:45,819
let's see what just happens and go from

933
00:52:45,819 --> 00:52:50,579
there okay so we're gonna go back and

934
00:52:50,579 --> 00:52:55,089
start it up again and see if it crashes

935
00:52:55,089 --> 00:52:59,049
yep okay so do what just happened is we

936
00:52:59,049 --> 00:53:01,949
got two shows for the price of one right

937
00:53:01,949 --> 00:53:04,180
very cool and what's really nice about

938
00:53:04,180 --> 00:53:06,699
this particular exploit is it cleans up

939
00:53:06,699 --> 00:53:08,769
the application right I don't even have

940
00:53:08,769 --> 00:53:10,779
to close it out I mean that's really

941
00:53:10,779 --> 00:53:14,559
nice okay and I got to yeah and they're

942
00:53:14,559 --> 00:53:17,109
persistent too this is actually

943
00:53:17,109 --> 00:53:20,079
something that's particular to this one

944
00:53:20,079 --> 00:53:28,989
application so what is Rob Rob is it is

945
00:53:28,989 --> 00:53:29,680
where

946
00:53:29,680 --> 00:53:33,280
you go and find a series of instructions

947
00:53:33,280 --> 00:53:36,369
they have a return at the end and the

948
00:53:36,369 --> 00:53:39,190
reason for doing that is so that you can

949
00:53:39,190 --> 00:53:42,309
put like I did with the pop-up bread I

950
00:53:42,309 --> 00:53:45,069
go find up the pop-up right get that

951
00:53:45,069 --> 00:53:47,319
memory address and put it onto the stack

952
00:53:47,319 --> 00:53:51,510
right and then what I do from there is I

953
00:53:51,510 --> 00:53:54,640
continually add you know different

954
00:53:54,640 --> 00:53:57,520
gadgets to create a program that I want

955
00:53:57,520 --> 00:54:01,530
to do right the interesting thing about

956
00:54:01,530 --> 00:54:04,990
wrapping is it has been proving proven

957
00:54:04,990 --> 00:54:08,920
that is nearly Turing complete meaning

958
00:54:08,920 --> 00:54:10,000
that you can pretty much do anything

959
00:54:10,000 --> 00:54:13,260
that you want as long as your gadgets

960
00:54:13,260 --> 00:54:16,480
you know are plentiful enough to do it

961
00:54:16,480 --> 00:54:18,790
now the interesting thing about this

962
00:54:18,790 --> 00:54:23,050
application is when you ask Mona to Rob

963
00:54:23,050 --> 00:54:25,089
it goes and finds all the ROPS in the

964
00:54:25,089 --> 00:54:27,190
space and when you're looking for

965
00:54:27,190 --> 00:54:27,790
gadgets

966
00:54:27,790 --> 00:54:30,579
I mean gadgets in the memory space of

967
00:54:30,579 --> 00:54:34,480
the app application and when you are

968
00:54:34,480 --> 00:54:37,839
looking for gadgets you're not looking

969
00:54:37,839 --> 00:54:42,190
for gadgets in the normal way that you

970
00:54:42,190 --> 00:54:44,589
think about it your what it does is it

971
00:54:44,589 --> 00:54:46,990
goes and looks for the machine code for

972
00:54:46,990 --> 00:54:50,440
Rhett and then works backwards to see if

973
00:54:50,440 --> 00:54:54,549
there's the possibility of creating a

974
00:54:54,549 --> 00:54:57,430
series of instructions that would help

975
00:54:57,430 --> 00:55:00,339
out in wrapping the reason for doing

976
00:55:00,339 --> 00:55:04,059
that is because the x86 architecture has

977
00:55:04,059 --> 00:55:08,589
a multi variable length instructions

978
00:55:08,589 --> 00:55:11,440
right it's kind of like taking a long

979
00:55:11,440 --> 00:55:14,230
paragraph right and taking out all the

980
00:55:14,230 --> 00:55:17,680
way whitespace mashing those words

981
00:55:17,680 --> 00:55:21,490
together right you can still tell kind

982
00:55:21,490 --> 00:55:23,920
of what the the paragraph said or the

983
00:55:23,920 --> 00:55:26,290
sentence said originally right but if

984
00:55:26,290 --> 00:55:29,410
you go and look at specific spots of the

985
00:55:29,410 --> 00:55:31,089
paragraph without reading through it

986
00:55:31,089 --> 00:55:33,190
you'll find other words in there right

987
00:55:33,190 --> 00:55:37,780
in between the real words that were

988
00:55:37,780 --> 00:55:39,460
there before can you visualize that

989
00:55:39,460 --> 00:55:43,210
right the rock when you look for gadget

990
00:55:43,210 --> 00:55:45,700
you're doing the exact same thing so

991
00:55:45,700 --> 00:55:47,559
sometimes it's funny when you're in the

992
00:55:47,559 --> 00:55:50,740
debugger you know you're picking a

993
00:55:50,740 --> 00:55:53,260
memory address that's not really a you

994
00:55:53,260 --> 00:55:55,680
know the right memory address for the

995
00:55:55,680 --> 00:55:58,329
application code but it starts a gadget

996
00:55:58,329 --> 00:56:00,880
with a return at the end right and the

997
00:56:00,880 --> 00:56:03,339
double bugger goes crazy because then

998
00:56:03,339 --> 00:56:05,079
you see a bunch of other like

999
00:56:05,079 --> 00:56:08,859
instruction past that gadget that make

1000
00:56:08,859 --> 00:56:10,960
no sense like there would be no way

1001
00:56:10,960 --> 00:56:13,329
there'd be instructions like that but

1002
00:56:13,329 --> 00:56:15,760
it's just because that gadget actually

1003
00:56:15,760 --> 00:56:18,910
falls in between the real instructions

1004
00:56:18,910 --> 00:56:25,300
right so that's what wrapping is like I

1005
00:56:25,300 --> 00:56:29,490
said wrapping the gadgets are normally

1006
00:56:29,490 --> 00:56:32,140
find in returns but that's not always

1007
00:56:32,140 --> 00:56:37,300
true you can have gadgets that have any

1008
00:56:37,300 --> 00:56:39,970
instruction at the end that will get you

1009
00:56:39,970 --> 00:56:44,290
back to you know it executing the next

1010
00:56:44,290 --> 00:56:48,099
address I'm just like a rat so if you

1011
00:56:48,099 --> 00:56:50,410
had to jump ESP that would be at work as

1012
00:56:50,410 --> 00:57:10,329
well yes sir when you're wrapping you're

1013
00:57:10,329 --> 00:57:12,309
going to find a bunch of memory

1014
00:57:12,309 --> 00:57:14,440
addresses that do different things and

1015
00:57:14,440 --> 00:57:17,470
those memory addresses are in you know

1016
00:57:17,470 --> 00:57:20,710
either dll's more than likely right I

1017
00:57:20,710 --> 00:57:24,210
like configuration DLL right that's a

1018
00:57:24,210 --> 00:57:27,730
goldmine for this application and what

1019
00:57:27,730 --> 00:57:30,130
you do is you say you know what I need

1020
00:57:30,130 --> 00:57:32,920
to do a certain thing I'm gonna find the

1021
00:57:32,920 --> 00:57:34,780
memory address for a series of

1022
00:57:34,780 --> 00:57:36,700
instructions that do that for me and

1023
00:57:36,700 --> 00:57:38,710
I'll have an example in a minute

1024
00:57:38,710 --> 00:57:40,690
and then you just put those on the stack

1025
00:57:40,690 --> 00:57:42,760
so you're not putting instructions on

1026
00:57:42,760 --> 00:57:44,619
the stack it like the difference between

1027
00:57:44,619 --> 00:57:48,220
the pop up Brett in the jump 6 they had

1028
00:57:48,220 --> 00:57:50,589
the first one is a gadget that would be

1029
00:57:50,589 --> 00:57:53,799
a Rob alright part of a Rob the the jump

1030
00:57:53,799 --> 00:57:56,310
6 that was an instruction I put in

1031
00:57:56,310 --> 00:57:59,490
my payload I want with when I rob I want

1032
00:57:59,490 --> 00:58:03,600
to not put any instructions in and I

1033
00:58:03,600 --> 00:58:09,140
only put memory addresses on there okay

1034
00:58:10,280 --> 00:58:13,230
so the here's my here's my first exam or

1035
00:58:13,230 --> 00:58:15,060
my my only example I took my other

1036
00:58:15,060 --> 00:58:18,120
example out actually so what did we say

1037
00:58:18,120 --> 00:58:21,210
we said that no bites break this

1038
00:58:21,210 --> 00:58:24,660
application right so I can't use a

1039
00:58:24,660 --> 00:58:25,320
nobody

1040
00:58:25,320 --> 00:58:28,830
what if I have to push a something that

1041
00:58:28,830 --> 00:58:30,600
has a no bite on to the stack

1042
00:58:30,600 --> 00:58:34,350
for instance this 201 and I need to move

1043
00:58:34,350 --> 00:58:36,300
it into EB acts what do I do

1044
00:58:36,300 --> 00:58:41,460
all right that's Rob right so I found

1045
00:58:41,460 --> 00:58:48,750
that memory a memory address 6 404 C 2 6

1046
00:58:48,750 --> 00:58:50,250
8 more than likely being in

1047
00:58:50,250 --> 00:58:54,600
configuration that DLL a pop EAX and a

1048
00:58:54,600 --> 00:58:57,840
return is that a gadget yeah it is

1049
00:58:57,840 --> 00:58:59,700
because it's an instruction with a

1050
00:58:59,700 --> 00:59:03,630
return at the end right so what should I

1051
00:59:03,630 --> 00:59:09,120
do with that I'm going to take F F F F F

1052
00:59:09,120 --> 00:59:13,170
D F F and put put it right under it so

1053
00:59:13,170 --> 00:59:15,900
right in my payload right I have my age

1054
00:59:15,900 --> 00:59:18,390
my age my age my age and then I have

1055
00:59:18,390 --> 00:59:23,520
this value first value 6 404 C 2 6 8 and

1056
00:59:23,520 --> 00:59:28,170
then after that I have FF FF FF FF d FF

1057
00:59:28,170 --> 00:59:32,760
right and then I need to negate it why

1058
00:59:32,760 --> 00:59:36,240
because if I need to negate that value

1059
00:59:36,240 --> 00:59:39,210
it becomes my 201 did I have to put any

1060
00:59:39,210 --> 00:59:44,790
no bytes into my payload no I didn't did

1061
00:59:44,790 --> 00:59:47,730
I put any instructions on in my payload

1062
00:59:47,730 --> 00:59:48,240
yet

1063
00:59:48,240 --> 00:59:53,149
no I didn't right

1064
00:59:53,489 --> 00:59:57,519
yeah as long as there's if you find a

1065
00:59:57,519 --> 01:00:02,289
gadget that's an ad in your then you can

1066
01:00:02,289 --> 01:00:05,049
use it definitely yeah man definitely go

1067
01:00:05,049 --> 01:00:07,529
ahead Oh

1068
01:00:13,900 --> 01:00:17,229
actually whenever you ask Mona to rob

1069
01:00:17,229 --> 01:00:22,410
you can say Mona robbed and I want to

1070
01:00:22,410 --> 01:00:25,269
only use characters that are good for me

1071
01:00:25,269 --> 01:00:27,160
so I can tell it what bad characters are

1072
01:00:27,160 --> 01:00:29,710
and then it will only find gadgets or

1073
01:00:29,710 --> 01:00:32,559
make suggestions of gadgets that do not

1074
01:00:32,559 --> 01:00:34,329
have those characters great question

1075
01:00:34,329 --> 01:00:36,999
thank you I appreciate that and then the

1076
01:00:36,999 --> 01:00:39,489
last instruction right yeah memory

1077
01:00:39,489 --> 01:00:43,210
address six one six four one c70 there's

1078
01:00:43,210 --> 01:00:46,749
an exchange EAX EBX what does that do

1079
01:00:46,749 --> 01:00:53,578
for me that puts my 2:01 into the EBX

1080
01:00:53,849 --> 01:00:55,979
into the EBX

1081
01:00:55,979 --> 01:00:59,259
register right I've accomplished my goal

1082
01:00:59,259 --> 01:01:03,869
I have not put any code into my payload

1083
01:01:03,869 --> 01:01:06,569
I've only put memory addresses in there

1084
01:01:06,569 --> 01:01:11,650
right the neat thing about this is if I

1085
01:01:11,650 --> 01:01:14,529
know that there's multiple memory

1086
01:01:14,529 --> 01:01:17,819
addresses with each of these types of

1087
01:01:17,819 --> 01:01:20,950
instructions right I could make it so

1088
01:01:20,950 --> 01:01:22,960
that it changes my payload every single

1089
01:01:22,960 --> 01:01:30,849
time so why would I want to do something

1090
01:01:30,849 --> 01:01:33,160
like this well there's something called

1091
01:01:33,160 --> 01:01:33,759
Det

1092
01:01:33,759 --> 01:01:36,609
right DEP is kind of a pain right

1093
01:01:36,609 --> 01:01:38,979
because what does that do that makes it

1094
01:01:38,979 --> 01:01:43,119
so that you can't execute code off the

1095
01:01:43,119 --> 01:01:46,390
stack yeah that sucks

1096
01:01:46,390 --> 01:01:49,269
all right well Microsoft gave you a

1097
01:01:49,269 --> 01:01:51,249
solution for that it's called virtual

1098
01:01:51,249 --> 01:01:54,910
protect and a bunch of other OS

1099
01:01:54,910 --> 01:01:58,289
functions virtual protect allows you to

1100
01:01:58,289 --> 01:02:02,170
turn know execute off on certain pages

1101
01:02:02,170 --> 01:02:04,989
of memory well do we want to do with

1102
01:02:04,989 --> 01:02:05,750
that

1103
01:02:05,750 --> 01:02:09,740
I don't know maybe turn off the you know

1104
01:02:09,740 --> 01:02:13,700
make the stack no execute I mean make it

1105
01:02:13,700 --> 01:02:17,060
execute right executable we can use

1106
01:02:17,060 --> 01:02:20,030
virtual protect to do that why did I

1107
01:02:20,030 --> 01:02:23,450
have this example here that 201 well for

1108
01:02:23,450 --> 01:02:27,650
virtual will protect maybe Mike my shell

1109
01:02:27,650 --> 01:02:33,910
code is 201 bytes long so what I do is

1110
01:02:33,910 --> 01:02:36,410
it with virtual protect you needed a

1111
01:02:36,410 --> 01:02:38,540
couple of things whenever you call it

1112
01:02:38,540 --> 01:02:40,790
you have the return address is the

1113
01:02:40,790 --> 01:02:43,880
location as to where virtual protect is

1114
01:02:43,880 --> 01:02:46,280
going to return to that's going to be

1115
01:02:46,280 --> 01:02:49,400
where my shell code lives right and then

1116
01:02:49,400 --> 01:02:53,180
there's the LP address that is where I

1117
01:02:53,180 --> 01:02:57,260
want to change my address permissions to

1118
01:02:57,260 --> 01:03:00,080
execute right that's gonna be the same

1119
01:03:00,080 --> 01:03:03,050
spot the show code and then there's a

1120
01:03:03,050 --> 01:03:04,340
couple other things that we need to do

1121
01:03:04,340 --> 01:03:09,050
right we need to define execute read

1122
01:03:09,050 --> 01:03:11,630
write which is the 40 it's the same

1123
01:03:11,630 --> 01:03:14,540
thing as before and then there's this

1124
01:03:14,540 --> 01:03:16,460
weird thing at the end I don't really

1125
01:03:16,460 --> 01:03:18,650
know why that function needs it and then

1126
01:03:18,650 --> 01:03:21,320
to do it my originally if I have had

1127
01:03:21,320 --> 01:03:23,570
time I was going to show you how to use

1128
01:03:23,570 --> 01:03:26,720
push ID to put all of the information

1129
01:03:26,720 --> 01:03:31,160
for to execute virtual protect onto the

1130
01:03:31,160 --> 01:03:34,520
stack by using push ad that would be an

1131
01:03:34,520 --> 01:03:37,609
exercise for you guys at home is there

1132
01:03:37,609 --> 01:03:39,470
any questions as far as rap is concerned

1133
01:03:39,470 --> 01:03:43,510
and getting your feet like wet and

1134
01:03:43,510 --> 01:03:46,220
hopefully a little bit of what I've

1135
01:03:46,220 --> 01:03:49,880
shown you gets you to want to you know

1136
01:03:49,880 --> 01:03:59,869
try this out for for the pop hop Bret

1137
01:03:59,869 --> 01:04:08,530
allows you to pivot the execution from

1138
01:04:08,530 --> 01:04:13,280
the normal area of memory to the area on

1139
01:04:13,280 --> 01:04:14,109
the stack

1140
01:04:14,109 --> 01:04:19,160
only when you were trying to exploit

1141
01:04:19,160 --> 01:04:23,120
seh because what it does is it changes

1142
01:04:23,120 --> 01:04:27,770
it moves execution points execution to

1143
01:04:27,770 --> 01:04:31,070
that pointer to the next s eh record

1144
01:04:31,070 --> 01:04:38,180
which you have control over yep yeah no

1145
01:04:38,180 --> 01:04:41,240
that's cool yeah if you have questions

1146
01:04:41,240 --> 01:04:43,340
please come and ask me yep yep thank you

1147
01:04:43,340 --> 01:04:47,440
very much yes thanks a lot

