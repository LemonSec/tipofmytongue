1
00:00:03,199 --> 00:00:05,359
hi my name is michael i'm an army green

2
00:00:05,359 --> 00:00:07,120
braid turned application security

3
00:00:07,120 --> 00:00:09,440
engineer i still serve in north carolina

4
00:00:09,440 --> 00:00:12,000
national guard as the senior enlisted

5
00:00:12,000 --> 00:00:14,799
cyber network defender i also work for a

6
00:00:14,799 --> 00:00:17,039
content creator for a company called

7
00:00:17,039 --> 00:00:19,600
security journal creating their

8
00:00:19,600 --> 00:00:22,480
application security focused content you

9
00:00:22,480 --> 00:00:25,199
can reach me on app apps guy mike or

10
00:00:25,199 --> 00:00:28,840
look up my company at securityjourney on

11
00:00:28,840 --> 00:00:31,439
twitter today we're going to talk about

12
00:00:31,439 --> 00:00:33,280
something called the software security

13
00:00:33,280 --> 00:00:35,280
testing life cycle

14
00:00:35,280 --> 00:00:38,239
a while back i was given a task to start

15
00:00:38,239 --> 00:00:41,040
doing research into application security

16
00:00:41,040 --> 00:00:43,520
testing to teach developers

17
00:00:43,520 --> 00:00:44,399
how to

18
00:00:44,399 --> 00:00:46,879
approach this big task that we call

19
00:00:46,879 --> 00:00:49,360
testing for security

20
00:00:49,360 --> 00:00:51,039
one of the big problems we ran into is i

21
00:00:51,039 --> 00:00:52,320
did the same thing that everybody else

22
00:00:52,320 --> 00:00:55,280
does i went out to owasp i went out

23
00:00:55,280 --> 00:00:57,280
to all the open source

24
00:00:57,280 --> 00:00:59,120
resources that told you this is how you

25
00:00:59,120 --> 00:01:00,800
should be doing security testing these

26
00:01:00,800 --> 00:01:02,800
are the tools you should be using

27
00:01:02,800 --> 00:01:04,400
these this is the phase that you should

28
00:01:04,400 --> 00:01:06,000
be doing your testing and something that

29
00:01:06,000 --> 00:01:08,000
i came to realize

30
00:01:08,000 --> 00:01:08,799
is

31
00:01:08,799 --> 00:01:11,200
application security testing is very

32
00:01:11,200 --> 00:01:14,000
reactive and it's a single phase of a

33
00:01:14,000 --> 00:01:16,080
single step that we put inside our

34
00:01:16,080 --> 00:01:18,479
software development life cycle we wait

35
00:01:18,479 --> 00:01:20,960
until we get to the testing phase we do

36
00:01:20,960 --> 00:01:22,640
our security testing if we get any

37
00:01:22,640 --> 00:01:24,799
alerts then we go back and we try to

38
00:01:24,799 --> 00:01:28,320
remediate what we aren't is proactive

39
00:01:28,320 --> 00:01:30,159
and we don't plan for how we're going to

40
00:01:30,159 --> 00:01:32,320
actually approach security testing

41
00:01:32,320 --> 00:01:33,600
that's what the software security

42
00:01:33,600 --> 00:01:37,600
testing life cycle is meant to fix

43
00:01:37,600 --> 00:01:39,200
so key thing what is the software

44
00:01:39,200 --> 00:01:41,280
security tesla lifecycle and i

45
00:01:41,280 --> 00:01:43,119
affectionately call this the swisstool

46
00:01:43,119 --> 00:01:44,479
because you have to have a good acronym

47
00:01:44,479 --> 00:01:46,240
for any good name you have

48
00:01:46,240 --> 00:01:48,880
swisstal integrates security testing

49
00:01:48,880 --> 00:01:50,399
throughout the entire software

50
00:01:50,399 --> 00:01:51,920
development lifecycle that's meant to be

51
00:01:51,920 --> 00:01:54,159
a much more proactive and focus your

52
00:01:54,159 --> 00:01:56,399
testing into the areas that need the

53
00:01:56,399 --> 00:01:58,880
actual security testing

54
00:01:58,880 --> 00:02:00,479
one thing that sets it apart from all

55
00:02:00,479 --> 00:02:02,399
the other different frameworks is it's

56
00:02:02,399 --> 00:02:04,960
not just about how does a qa team do

57
00:02:04,960 --> 00:02:07,520
testing or how do i do all my

58
00:02:07,520 --> 00:02:09,679
integration testing and my functional

59
00:02:09,679 --> 00:02:11,840
testing or my smoke testing it's very

60
00:02:11,840 --> 00:02:14,640
specific of how do i approach appsec

61
00:02:14,640 --> 00:02:17,040
from the very beginning of my planning

62
00:02:17,040 --> 00:02:18,800
of my software development lifecycle all

63
00:02:18,800 --> 00:02:22,680
the way through to production

64
00:02:24,239 --> 00:02:26,160
why do we need a framework now i think

65
00:02:26,160 --> 00:02:27,840
everyone out here that's been in part of

66
00:02:27,840 --> 00:02:29,599
the oas community has gone out and seen

67
00:02:29,599 --> 00:02:31,440
that there is security there's a testing

68
00:02:31,440 --> 00:02:33,360
guides out there that talk about how do

69
00:02:33,360 --> 00:02:35,360
we approach testing a lot of these

70
00:02:35,360 --> 00:02:37,280
guides are really focused on how does a

71
00:02:37,280 --> 00:02:38,720
qa team

72
00:02:38,720 --> 00:02:40,720
approach testing and it goes and it

73
00:02:40,720 --> 00:02:43,200
talks about how do i do my integration

74
00:02:43,200 --> 00:02:44,640
testing and my functional testing to

75
00:02:44,640 --> 00:02:46,560
make sure all my parts of my application

76
00:02:46,560 --> 00:02:48,959
are working appropriately

77
00:02:48,959 --> 00:02:51,200
it leaves the security testing as this

78
00:02:51,200 --> 00:02:53,440
very single step that isn't really

79
00:02:53,440 --> 00:02:55,040
thought about much and a lot of times

80
00:02:55,040 --> 00:02:57,440
people take a single tool put it in my

81
00:02:57,440 --> 00:02:59,040
pipeline and wait to get a bunch of

82
00:02:59,040 --> 00:03:00,640
alerts and then throw those alerts at

83
00:03:00,640 --> 00:03:02,959
the dev and tell them to go fix them

84
00:03:02,959 --> 00:03:05,040
it's a very reactive and very

85
00:03:05,040 --> 00:03:07,599
restrictive way to approach testing and

86
00:03:07,599 --> 00:03:09,840
it doesn't plan for

87
00:03:09,840 --> 00:03:12,959
testing in a proactive manner what it

88
00:03:12,959 --> 00:03:15,599
leaves ends up happening is we build up

89
00:03:15,599 --> 00:03:18,000
a bunch of technical debt near the end

90
00:03:18,000 --> 00:03:19,680
of our build process right before we're

91
00:03:19,680 --> 00:03:21,840
trying to get our product out into

92
00:03:21,840 --> 00:03:23,840
production and we're having to go back

93
00:03:23,840 --> 00:03:25,200
and remediate all these things we're

94
00:03:25,200 --> 00:03:27,280
finding at the end and we've basically

95
00:03:27,280 --> 00:03:29,120
built this technical debt that's at

96
00:03:29,120 --> 00:03:30,080
massing

97
00:03:30,080 --> 00:03:32,319
major costs on to building your

98
00:03:32,319 --> 00:03:34,879
application

99
00:03:35,280 --> 00:03:38,159
now swisstal isn't just for the testing

100
00:03:38,159 --> 00:03:41,040
team it's not just for developers it's

101
00:03:41,040 --> 00:03:43,280
for everyone and the three categories

102
00:03:43,280 --> 00:03:44,879
here is it's for your developer it's for

103
00:03:44,879 --> 00:03:46,319
your tester it's also something we call

104
00:03:46,319 --> 00:03:48,720
product adjacent product adjacent is

105
00:03:48,720 --> 00:03:51,280
basically anyone that touches your

106
00:03:51,280 --> 00:03:54,319
application to get it from the design

107
00:03:54,319 --> 00:03:56,560
all the way to release whether that's a

108
00:03:56,560 --> 00:03:59,840
ux your production manager whether it's

109
00:03:59,840 --> 00:04:02,400
any of your qa teams everyone that's

110
00:04:02,400 --> 00:04:04,720
involved in the actual building

111
00:04:04,720 --> 00:04:06,640
applications needed to understand how

112
00:04:06,640 --> 00:04:08,239
the software security testing lifestyle

113
00:04:08,239 --> 00:04:09,680
works because then you understand that

114
00:04:09,680 --> 00:04:11,360
when we get to certain phases we're

115
00:04:11,360 --> 00:04:12,799
going to do certain things that might

116
00:04:12,799 --> 00:04:14,400
change processes

117
00:04:14,400 --> 00:04:16,720
for everyone involved now this is also

118
00:04:16,720 --> 00:04:19,600
meant for any scale operation it doesn't

119
00:04:19,600 --> 00:04:22,320
matter if i'm just a developer but i

120
00:04:22,320 --> 00:04:24,000
don't have a qa team i don't have

121
00:04:24,000 --> 00:04:26,160
testers i'm one a team of three

122
00:04:26,160 --> 00:04:27,840
developers and we do all the tasks

123
00:04:27,840 --> 00:04:30,080
together from production all the way or

124
00:04:30,080 --> 00:04:32,479
from um ideation all the way to

125
00:04:32,479 --> 00:04:34,560
production well when i wear the tester

126
00:04:34,560 --> 00:04:36,960
hat and it's time to hit that phase and

127
00:04:36,960 --> 00:04:39,280
do that task that's when i need to step

128
00:04:39,280 --> 00:04:41,680
out of my developer mindset and start

129
00:04:41,680 --> 00:04:44,000
thinking about how am i a security

130
00:04:44,000 --> 00:04:45,840
tester and how do i apply the things

131
00:04:45,840 --> 00:04:46,639
we're going to learn here in the

132
00:04:46,639 --> 00:04:48,639
software security test and life cycle to

133
00:04:48,639 --> 00:04:52,320
build a better more secure product

134
00:04:52,800 --> 00:04:54,560
the phases of swisstal include you need

135
00:04:54,560 --> 00:04:56,000
to know your security requirements you

136
00:04:56,000 --> 00:04:57,680
need to participate in threat modeling

137
00:04:57,680 --> 00:04:59,120
you need to build a security testing

138
00:04:59,120 --> 00:05:01,280
strategy you need to build tests and

139
00:05:01,280 --> 00:05:03,520
review automate tests and validate

140
00:05:03,520 --> 00:05:05,840
security findings and controls

141
00:05:05,840 --> 00:05:08,880
the way swissle is set up is each phase

142
00:05:08,880 --> 00:05:11,600
is meant to build and feed into the next

143
00:05:11,600 --> 00:05:13,680
phase so when we start in the planning

144
00:05:13,680 --> 00:05:15,199
phase and we start knowing our security

145
00:05:15,199 --> 00:05:16,880
requirements we're going to take those

146
00:05:16,880 --> 00:05:18,639
security requirements we're going to use

147
00:05:18,639 --> 00:05:20,880
them when we do our threat modeling we

148
00:05:20,880 --> 00:05:22,800
use the products from our threat model

149
00:05:22,800 --> 00:05:24,240
and we're gonna use them to design a

150
00:05:24,240 --> 00:05:26,320
security testing strategy we're gonna

151
00:05:26,320 --> 00:05:28,479
take that strategy and we're gonna write

152
00:05:28,479 --> 00:05:30,560
our specific security unit tests and

153
00:05:30,560 --> 00:05:32,320
we're gonna do our peer reviews which

154
00:05:32,320 --> 00:05:34,639
are gonna enable us to do more efficient

155
00:05:34,639 --> 00:05:36,400
automatic testing or auto test

156
00:05:36,400 --> 00:05:38,960
automation in our pipelines and finally

157
00:05:38,960 --> 00:05:40,400
rather than just taking all the

158
00:05:40,400 --> 00:05:41,840
information we gathered from these

159
00:05:41,840 --> 00:05:44,639
previous phases and assuming we're good

160
00:05:44,639 --> 00:05:46,560
we're going to validate the findings we

161
00:05:46,560 --> 00:05:49,360
get and then remediate in a structured

162
00:05:49,360 --> 00:05:52,400
approach that allows us to focus in on

163
00:05:52,400 --> 00:05:54,160
the things that are true security alerts

164
00:05:54,160 --> 00:05:56,479
and reducing our false positives we're

165
00:05:56,479 --> 00:05:57,440
going to go through and we're going to

166
00:05:57,440 --> 00:05:59,120
break down each one of these phases and

167
00:05:59,120 --> 00:06:01,840
explain in detail what goes into each

168
00:06:01,840 --> 00:06:04,840
phase and how it feeds into the next

169
00:06:04,840 --> 00:06:07,360
phase the first phase is you need to

170
00:06:07,360 --> 00:06:09,440
know your security requirements

171
00:06:09,440 --> 00:06:11,440
now when we start designing new software

172
00:06:11,440 --> 00:06:12,800
especially in the software development

173
00:06:12,800 --> 00:06:15,199
cycle everything always starts with

174
00:06:15,199 --> 00:06:18,479
define your requirements now as a tester

175
00:06:18,479 --> 00:06:20,720
i'm looking at this of what do i need to

176
00:06:20,720 --> 00:06:23,919
know about my company and my product

177
00:06:23,919 --> 00:06:25,759
that i'm going to have to test for

178
00:06:25,759 --> 00:06:27,840
throughout the rest of the phases of

179
00:06:27,840 --> 00:06:30,000
development if i don't understand the

180
00:06:30,000 --> 00:06:31,199
constraints and the security

181
00:06:31,199 --> 00:06:33,520
requirements that are applied to my

182
00:06:33,520 --> 00:06:35,280
application then i'm not going to be

183
00:06:35,280 --> 00:06:38,160
able to effectively identify what my

184
00:06:38,160 --> 00:06:39,520
company considers the security

185
00:06:39,520 --> 00:06:41,759
vulnerability to be and how i should

186
00:06:41,759 --> 00:06:44,000
test for those to validate that we don't

187
00:06:44,000 --> 00:06:45,039
have

188
00:06:45,039 --> 00:06:46,720
those vulnerabilities and that we meet

189
00:06:46,720 --> 00:06:48,560
these security requirements

190
00:06:48,560 --> 00:06:50,000
there's three different types of

191
00:06:50,000 --> 00:06:51,280
security requirements you have your

192
00:06:51,280 --> 00:06:53,199
internal security requirements your

193
00:06:53,199 --> 00:06:54,720
external security requirements and your

194
00:06:54,720 --> 00:06:56,720
business security requirements external

195
00:06:56,720 --> 00:06:59,120
security requirements are things that

196
00:06:59,120 --> 00:07:00,080
are like

197
00:07:00,080 --> 00:07:01,919
regulations and laws that are being

198
00:07:01,919 --> 00:07:03,280
placed on your application you might

199
00:07:03,280 --> 00:07:05,759
fall under hipaa or you might fall under

200
00:07:05,759 --> 00:07:08,160
some other policy or directive that if i

201
00:07:08,160 --> 00:07:10,080
don't meet those requirements i could be

202
00:07:10,080 --> 00:07:12,639
held legally liable for not doing that

203
00:07:12,639 --> 00:07:15,520
or i could be lose basically face big

204
00:07:15,520 --> 00:07:17,599
fines lose customers

205
00:07:17,599 --> 00:07:19,280
massive things that can affect my

206
00:07:19,280 --> 00:07:20,800
application

207
00:07:20,800 --> 00:07:22,800
internals require security requirements

208
00:07:22,800 --> 00:07:25,919
are things that are dictated by my

209
00:07:25,919 --> 00:07:27,680
company so it might be things that

210
00:07:27,680 --> 00:07:31,360
follow our ethos we as our company we

211
00:07:31,360 --> 00:07:33,199
embrace the fact that we want to ensure

212
00:07:33,199 --> 00:07:35,440
you have privacy it may not be a

213
00:07:35,440 --> 00:07:37,199
requirement that's legally applied to us

214
00:07:37,199 --> 00:07:39,280
but we believe privacy while you're

215
00:07:39,280 --> 00:07:40,880
surfing the web or why you're doing

216
00:07:40,880 --> 00:07:42,639
something is extremely important so

217
00:07:42,639 --> 00:07:43,919
we're going to build in security

218
00:07:43,919 --> 00:07:45,680
requirements for application that

219
00:07:45,680 --> 00:07:47,759
ensures you meet those

220
00:07:47,759 --> 00:07:49,759
requirements and then business security

221
00:07:49,759 --> 00:07:50,720
requirements that's really when we're

222
00:07:50,720 --> 00:07:52,960
talking about our cia triad right

223
00:07:52,960 --> 00:07:55,039
and when we talk about those is what are

224
00:07:55,039 --> 00:07:56,960
we what are the security requirements

225
00:07:56,960 --> 00:07:58,879
that if we don't implement we're going

226
00:07:58,879 --> 00:08:01,280
to lose customers we may not follow our

227
00:08:01,280 --> 00:08:03,680
policies it may not be directly against

228
00:08:03,680 --> 00:08:05,919
government regulation but if we don't

229
00:08:05,919 --> 00:08:08,240
meet these criterias we're going to lose

230
00:08:08,240 --> 00:08:10,639
business it's extremely important as a

231
00:08:10,639 --> 00:08:13,280
tester then i define and understand what

232
00:08:13,280 --> 00:08:14,879
the security requirements for my

233
00:08:14,879 --> 00:08:17,759
application is so that as i go in and i

234
00:08:17,759 --> 00:08:19,919
start to threat model i can identify

235
00:08:19,919 --> 00:08:22,160
areas that i need to test to ensure i'm

236
00:08:22,160 --> 00:08:26,520
meeting those security requirements

237
00:08:26,960 --> 00:08:29,039
the second step we want to talk about is

238
00:08:29,039 --> 00:08:31,520
participating in threat modeling

239
00:08:31,520 --> 00:08:33,440
threat modeling is extremely important

240
00:08:33,440 --> 00:08:34,958
when we're building our applications

241
00:08:34,958 --> 00:08:36,159
especially when you talk about your

242
00:08:36,159 --> 00:08:38,080
secure development life cycle when we're

243
00:08:38,080 --> 00:08:39,599
looking at the entire what is the

244
00:08:39,599 --> 00:08:41,599
security of my applications here's my

245
00:08:41,599 --> 00:08:43,760
application here's everywhere that i

246
00:08:43,760 --> 00:08:46,880
need to put a security control to enable

247
00:08:46,880 --> 00:08:49,279
to prevent different vulnerabilities as

248
00:08:49,279 --> 00:08:51,839
a tester i should be involved in that

249
00:08:51,839 --> 00:08:53,200
process

250
00:08:53,200 --> 00:08:54,560
first of all as a tester i'm gonna have

251
00:08:54,560 --> 00:08:57,200
a unique perspective from my experience

252
00:08:57,200 --> 00:08:59,360
from previous testing experience as well

253
00:08:59,360 --> 00:09:01,120
as i'm gonna be proactively thinking

254
00:09:01,120 --> 00:09:03,120
well how do i test for that how am i

255
00:09:03,120 --> 00:09:04,560
gonna ensure that i'm preventing that

256
00:09:04,560 --> 00:09:06,560
vulnerability how am i gonna ensure that

257
00:09:06,560 --> 00:09:08,320
security control is actually doing what

258
00:09:08,320 --> 00:09:10,399
it's supposed to do the more intimate

259
00:09:10,399 --> 00:09:12,320
knowledge i have of how the entire

260
00:09:12,320 --> 00:09:14,480
application works and how we built this

261
00:09:14,480 --> 00:09:15,760
threat model it's going to make me a

262
00:09:15,760 --> 00:09:18,560
better attester to the other phases of

263
00:09:18,560 --> 00:09:20,959
the software development life cycle

264
00:09:20,959 --> 00:09:22,640
it's also going to allow me

265
00:09:22,640 --> 00:09:23,440
to

266
00:09:23,440 --> 00:09:26,000
identify all of the different things i'm

267
00:09:26,000 --> 00:09:28,399
going to have to check in my security

268
00:09:28,399 --> 00:09:29,760
testing strategy whether it's the

269
00:09:29,760 --> 00:09:32,000
threats the vulnerabilities as well as

270
00:09:32,000 --> 00:09:33,920
the security controls i have to validate

271
00:09:33,920 --> 00:09:35,279
i'm going to be able to list those out

272
00:09:35,279 --> 00:09:37,600
my security testing strategy to test

273
00:09:37,600 --> 00:09:39,360
later on when we're in the development

274
00:09:39,360 --> 00:09:41,120
phases

275
00:09:41,120 --> 00:09:43,760
now there's five phases to the threat

276
00:09:43,760 --> 00:09:45,760
modeling first you need to scope so what

277
00:09:45,760 --> 00:09:48,160
am i responsible for testing

278
00:09:48,160 --> 00:09:49,600
draw that's when we're going to create

279
00:09:49,600 --> 00:09:51,519
our data flow diagrams and i'm going to

280
00:09:51,519 --> 00:09:53,040
look at the data flow diagram from a

281
00:09:53,040 --> 00:09:55,040
tester's perspective we're going to

282
00:09:55,040 --> 00:09:57,600
analyze our data model using threat

283
00:09:57,600 --> 00:09:59,839
modeling techniques like stride

284
00:09:59,839 --> 00:10:01,600
we're going to mitigate

285
00:10:01,600 --> 00:10:03,279
i'm going to specifically might not be

286
00:10:03,279 --> 00:10:05,279
the one deciding which security control

287
00:10:05,279 --> 00:10:06,560
is going place that might be the

288
00:10:06,560 --> 00:10:08,880
security team as a whole but as a tester

289
00:10:08,880 --> 00:10:10,720
i need to see what security controls

290
00:10:10,720 --> 00:10:12,399
have been chosen so i know i can test

291
00:10:12,399 --> 00:10:14,240
and validate their work inappropriately

292
00:10:14,240 --> 00:10:15,920
and the most important step in all of

293
00:10:15,920 --> 00:10:17,279
this is we need to do thorough

294
00:10:17,279 --> 00:10:18,480
documentation

295
00:10:18,480 --> 00:10:20,079
of our threat model because i'm going to

296
00:10:20,079 --> 00:10:21,920
take that information from my threat

297
00:10:21,920 --> 00:10:24,240
model i'm going to use it to build my

298
00:10:24,240 --> 00:10:27,680
security testing strategy

299
00:10:28,000 --> 00:10:31,040
now this is a typical diagram of how we

300
00:10:31,040 --> 00:10:33,200
build a threat model the first thing we

301
00:10:33,200 --> 00:10:34,480
do is we

302
00:10:34,480 --> 00:10:36,640
look at all the different components of

303
00:10:36,640 --> 00:10:38,160
our application now this is a very

304
00:10:38,160 --> 00:10:39,760
simple example but we're gonna look at

305
00:10:39,760 --> 00:10:41,279
all the different components and where

306
00:10:41,279 --> 00:10:43,600
data flows and all our inputs

307
00:10:43,600 --> 00:10:45,200
and we're gonna evaluate how the

308
00:10:45,200 --> 00:10:46,959
application works

309
00:10:46,959 --> 00:10:48,560
once we see how the application works

310
00:10:48,560 --> 00:10:49,600
we're going to apply something like

311
00:10:49,600 --> 00:10:51,519
stride stride stands for things like

312
00:10:51,519 --> 00:10:53,839
spoofing tampering repudiation these are

313
00:10:53,839 --> 00:10:55,920
all different this is an acronym for all

314
00:10:55,920 --> 00:10:57,519
the different type of things that can

315
00:10:57,519 --> 00:11:00,240
identify looking at how my data flows in

316
00:11:00,240 --> 00:11:02,240
my application and identifying areas

317
00:11:02,240 --> 00:11:04,240
that i might have problems so once i

318
00:11:04,240 --> 00:11:07,440
take stride and i apply it to my model i

319
00:11:07,440 --> 00:11:08,480
really want to look at it from an

320
00:11:08,480 --> 00:11:10,240
attacker's perspective and the

321
00:11:10,240 --> 00:11:12,720
attacker's perspective is okay in this

322
00:11:12,720 --> 00:11:15,279
example i have a database in the

323
00:11:15,279 --> 00:11:17,760
background and there might be a possible

324
00:11:17,760 --> 00:11:19,600
way that there's an api that doesn't

325
00:11:19,600 --> 00:11:21,760
authenticate the user or require login

326
00:11:21,760 --> 00:11:23,680
so as an attacker i might have access to

327
00:11:23,680 --> 00:11:25,360
that api and if we don't do proper

328
00:11:25,360 --> 00:11:27,040
authentication i'm able to get

329
00:11:27,040 --> 00:11:28,640
information disclosure because i'm able

330
00:11:28,640 --> 00:11:29,600
to get

331
00:11:29,600 --> 00:11:31,360
data out of the database without being

332
00:11:31,360 --> 00:11:33,680
authenticated

333
00:11:33,680 --> 00:11:35,200
you want to look at all these different

334
00:11:35,200 --> 00:11:37,760
areas and you're going to decide

335
00:11:37,760 --> 00:11:40,000
how what security controls were using to

336
00:11:40,000 --> 00:11:42,320
mitigate these risks as a tester i'm

337
00:11:42,320 --> 00:11:44,800
going to decide

338
00:11:44,800 --> 00:11:46,480
what threats are there that i need to

339
00:11:46,480 --> 00:11:48,399
now validate are no longer threats and

340
00:11:48,399 --> 00:11:50,560
what security controls have

341
00:11:50,560 --> 00:11:52,320
we chosen and are they working

342
00:11:52,320 --> 00:11:54,959
effectively

343
00:11:55,600 --> 00:11:56,800
that brings us to what a security

344
00:11:56,800 --> 00:11:58,399
testing strategy is i brought that in a

345
00:11:58,399 --> 00:12:00,320
couple times but let's clearly define

346
00:12:00,320 --> 00:12:02,480
what a security testing strategy is when

347
00:12:02,480 --> 00:12:04,320
we talk about it within the terms of

348
00:12:04,320 --> 00:12:06,639
swisstal it's basically it's going to be

349
00:12:06,639 --> 00:12:08,959
a step-by-step

350
00:12:08,959 --> 00:12:11,040
list of all the different threats and

351
00:12:11,040 --> 00:12:13,120
security controls that have been put in

352
00:12:13,120 --> 00:12:14,079
place

353
00:12:14,079 --> 00:12:16,000
based on your threat model that you're

354
00:12:16,000 --> 00:12:18,000
going to test and exactly laid out how

355
00:12:18,000 --> 00:12:20,399
you're going to test those individual

356
00:12:20,399 --> 00:12:23,440
threats and security controls

357
00:12:23,440 --> 00:12:25,600
to build appropriate security testing

358
00:12:25,600 --> 00:12:26,800
strategy you're going to need to review

359
00:12:26,800 --> 00:12:28,560
your scope you're going to look at your

360
00:12:28,560 --> 00:12:30,160
data flow diagram for the different

361
00:12:30,160 --> 00:12:32,079
interfaces you need to test against

362
00:12:32,079 --> 00:12:33,600
you're going to define security tests

363
00:12:33,600 --> 00:12:35,519
based on the different threats and

364
00:12:35,519 --> 00:12:37,200
interfaces that you identified in your

365
00:12:37,200 --> 00:12:39,200
data flow diagram and then you're also

366
00:12:39,200 --> 00:12:41,040
going to define the security test to

367
00:12:41,040 --> 00:12:42,639
validate that your security controls are

368
00:12:42,639 --> 00:12:45,040
working appropriately the last step is

369
00:12:45,040 --> 00:12:46,399
once you've gone through and used all

370
00:12:46,399 --> 00:12:48,240
that information from your threat model

371
00:12:48,240 --> 00:12:49,839
to create this list of things you need

372
00:12:49,839 --> 00:12:51,360
to test against you're going to select

373
00:12:51,360 --> 00:12:53,760
the proper people processes and

374
00:12:53,760 --> 00:12:56,480
technology to conduct the test

375
00:12:56,480 --> 00:12:58,000
what that's going to allow you to do is

376
00:12:58,000 --> 00:12:58,800
say

377
00:12:58,800 --> 00:13:00,240
these are three different ways i'm going

378
00:13:00,240 --> 00:13:02,399
to test this interface to ensure that my

379
00:13:02,399 --> 00:13:04,000
security controls are working

380
00:13:04,000 --> 00:13:06,240
appropriately and i have remediated and

381
00:13:06,240 --> 00:13:10,320
reduced that threat from being exploited

382
00:13:10,399 --> 00:13:12,480
going back to our original threat model

383
00:13:12,480 --> 00:13:14,000
where we identified three different

384
00:13:14,000 --> 00:13:15,120
threats

385
00:13:15,120 --> 00:13:17,040
we take this information

386
00:13:17,040 --> 00:13:19,040
and we're going to create the security

387
00:13:19,040 --> 00:13:21,040
testing strategy if you look in our left

388
00:13:21,040 --> 00:13:22,959
side here you identified the threat so

389
00:13:22,959 --> 00:13:24,880
threat one might be the system can

390
00:13:24,880 --> 00:13:27,440
disclose sensitive information due to an

391
00:13:27,440 --> 00:13:29,920
sqli so there's some sort of sqli

392
00:13:29,920 --> 00:13:32,000
injection possible vulnerability because

393
00:13:32,000 --> 00:13:33,680
i have an interface that i'm allowing

394
00:13:33,680 --> 00:13:35,839
users to do input into that's going out

395
00:13:35,839 --> 00:13:37,040
to my database and retrieving

396
00:13:37,040 --> 00:13:38,240
information

397
00:13:38,240 --> 00:13:40,639
how am i going to protect against that

398
00:13:40,639 --> 00:13:42,639
well during our threat modeling we

399
00:13:42,639 --> 00:13:45,040
decided to use server-side input

400
00:13:45,040 --> 00:13:46,720
validation to ensure

401
00:13:46,720 --> 00:13:49,040
that the attacker is not able to do sqli

402
00:13:49,040 --> 00:13:51,760
against our database as a tester i'm

403
00:13:51,760 --> 00:13:53,120
going to take that information from the

404
00:13:53,120 --> 00:13:55,199
threat model i'm going to decide how am

405
00:13:55,199 --> 00:13:57,920
i going to test to ensure that sqli is

406
00:13:57,920 --> 00:13:59,680
not possible and that my input

407
00:13:59,680 --> 00:14:02,240
validation is working appropriately and

408
00:14:02,240 --> 00:14:03,519
we're going to create different steps

409
00:14:03,519 --> 00:14:05,440
that will be applied at different phases

410
00:14:05,440 --> 00:14:07,040
of the development process

411
00:14:07,040 --> 00:14:10,720
to identify and confirm their control

412
00:14:10,720 --> 00:14:11,920
security control is working

413
00:14:11,920 --> 00:14:14,079
appropriately first we can write a unit

414
00:14:14,079 --> 00:14:16,160
test to confirm that the input

415
00:14:16,160 --> 00:14:17,920
validation on the actual security

416
00:14:17,920 --> 00:14:20,240
control is working appropriately we can

417
00:14:20,240 --> 00:14:23,199
use tools like wikipedia and or a fuzzer

418
00:14:23,199 --> 00:14:25,040
tool to auto in our automated test

419
00:14:25,040 --> 00:14:28,399
process to identify if we have sqli and

420
00:14:28,399 --> 00:14:30,560
we can also do at the very end phase a

421
00:14:30,560 --> 00:14:31,519
pen

422
00:14:31,519 --> 00:14:33,680
of the interface that the user is able

423
00:14:33,680 --> 00:14:35,440
to access there to ensure that we're not

424
00:14:35,440 --> 00:14:39,279
able to manually conduct an sqli now at

425
00:14:39,279 --> 00:14:40,720
no point here am i recommending any of

426
00:14:40,720 --> 00:14:42,480
these specific tools these tools that

427
00:14:42,480 --> 00:14:44,079
were chosen are specifically because

428
00:14:44,079 --> 00:14:45,519
they're open source too and a lot of

429
00:14:45,519 --> 00:14:48,079
these are on the oaus recommended list

430
00:14:48,079 --> 00:14:49,920
that anyone can grab and adopt easily

431
00:14:49,920 --> 00:14:52,320
there's commercial tools that will work

432
00:14:52,320 --> 00:14:54,320
amazingly well also the important part

433
00:14:54,320 --> 00:14:56,000
is it doesn't matter if you're using a

434
00:14:56,000 --> 00:14:58,079
commercial tool or an open source tool

435
00:14:58,079 --> 00:14:59,440
just find something that's appropriate

436
00:14:59,440 --> 00:15:03,120
to your environment and start using it

437
00:15:04,720 --> 00:15:06,399
now the fourth step

438
00:15:06,399 --> 00:15:09,040
is we want to build tests and review

439
00:15:09,040 --> 00:15:10,639
when we build tests what we're talking

440
00:15:10,639 --> 00:15:12,720
about is we're building what we call

441
00:15:12,720 --> 00:15:14,240
security tests

442
00:15:14,240 --> 00:15:16,639
and the review is a security tester's

443
00:15:16,639 --> 00:15:17,839
peer review

444
00:15:17,839 --> 00:15:19,440
bill test includes two different things

445
00:15:19,440 --> 00:15:20,639
the first thing is what we call a

446
00:15:20,639 --> 00:15:24,399
security unit test and a fuzzing target

447
00:15:24,399 --> 00:15:26,639
and the peer review is taking that same

448
00:15:26,639 --> 00:15:29,279
concept that we use as a developer and

449
00:15:29,279 --> 00:15:31,600
we're going to apply it to our security

450
00:15:31,600 --> 00:15:33,600
testing whenever i'm a developer and i

451
00:15:33,600 --> 00:15:35,920
write code and i push it to commit it's

452
00:15:35,920 --> 00:15:37,519
almost never where i'm like oh i'm going

453
00:15:37,519 --> 00:15:39,199
to make a big change in our product and

454
00:15:39,199 --> 00:15:40,480
i'm just gonna commit it to our main

455
00:15:40,480 --> 00:15:41,920
branch and no one else is ever gonna

456
00:15:41,920 --> 00:15:43,519
look at it because i'm gonna break

457
00:15:43,519 --> 00:15:46,160
something and i'm without a peer review

458
00:15:46,160 --> 00:15:47,920
there's a really good chance that i'm

459
00:15:47,920 --> 00:15:49,519
not gonna follow all the same constructs

460
00:15:49,519 --> 00:15:50,880
you need that check on learning

461
00:15:50,880 --> 00:15:52,839
basically with each other to keep each

462
00:15:52,839 --> 00:15:56,399
other doing good clean code

463
00:15:56,399 --> 00:15:59,040
we should do the same thing as testers

464
00:15:59,040 --> 00:16:00,880
as a tester i want someone that's going

465
00:16:00,880 --> 00:16:03,680
to peer review my testing strategy to

466
00:16:03,680 --> 00:16:06,240
ensure that it makes sense that i've

467
00:16:06,240 --> 00:16:08,320
done the right steps and as we go

468
00:16:08,320 --> 00:16:09,759
through to start building the security

469
00:16:09,759 --> 00:16:11,199
unit test to start setting up our

470
00:16:11,199 --> 00:16:12,959
automated testing and doing our manual

471
00:16:12,959 --> 00:16:15,839
tests then i've created a plan that

472
00:16:15,839 --> 00:16:18,560
makes sense

473
00:16:19,120 --> 00:16:20,880
now let's talk about the different type

474
00:16:20,880 --> 00:16:22,720
of security tests we can build i already

475
00:16:22,720 --> 00:16:24,079
mentioned that there's security unit

476
00:16:24,079 --> 00:16:25,600
tests and plus targets we're going to

477
00:16:25,600 --> 00:16:27,360
kind of deep dive what those means

478
00:16:27,360 --> 00:16:28,480
because i'm pretty sure everyone's heard

479
00:16:28,480 --> 00:16:30,720
a unit test but there's a very distinct

480
00:16:30,720 --> 00:16:32,959
difference between a security unit test

481
00:16:32,959 --> 00:16:36,320
and a traditional unit test when we talk

482
00:16:36,320 --> 00:16:38,399
about security unit tests what i'm doing

483
00:16:38,399 --> 00:16:40,880
is i'm using a unit test to validate the

484
00:16:40,880 --> 00:16:42,320
security control is working

485
00:16:42,320 --> 00:16:45,040
appropriately so if i as i'd identified

486
00:16:45,040 --> 00:16:47,759
originally in our threat model i have

487
00:16:47,759 --> 00:16:50,240
the chance for an sqli against our

488
00:16:50,240 --> 00:16:52,639
application when i build the security

489
00:16:52,639 --> 00:16:54,720
control which is an input validation to

490
00:16:54,720 --> 00:16:56,399
ensure only the appropriate characters

491
00:16:56,399 --> 00:16:58,800
are allowed into my interface then i

492
00:16:58,800 --> 00:17:00,320
also need to go back and i need to

493
00:17:00,320 --> 00:17:03,360
create a unit test that actually ensures

494
00:17:03,360 --> 00:17:04,959
that

495
00:17:04,959 --> 00:17:06,799
security control is working

496
00:17:06,799 --> 00:17:09,199
appropriately if you look at our example

497
00:17:09,199 --> 00:17:12,400
i'm using ruby just uh as a for you guys

498
00:17:12,400 --> 00:17:14,000
to know what type of code i'm using here

499
00:17:14,000 --> 00:17:15,760
because it's pretty easy to read and

500
00:17:15,760 --> 00:17:17,119
pretty straightforward about what's

501
00:17:17,119 --> 00:17:19,760
happening in the code example itself i

502
00:17:19,760 --> 00:17:22,079
have a class account and right here i'm

503
00:17:22,079 --> 00:17:24,160
creating an account with my function

504
00:17:24,160 --> 00:17:25,599
create account and we're passing in a

505
00:17:25,599 --> 00:17:27,599
username and password and i have two

506
00:17:27,599 --> 00:17:29,200
security controls in here i'm doing

507
00:17:29,200 --> 00:17:30,960
input validation on the username i'm

508
00:17:30,960 --> 00:17:33,200
doing input validation on the password

509
00:17:33,200 --> 00:17:34,880
and in my input validation for the

510
00:17:34,880 --> 00:17:36,240
username i'm ensuring that i'm only

511
00:17:36,240 --> 00:17:37,840
using

512
00:17:37,840 --> 00:17:39,520
lowercase or uppercase letters it needs

513
00:17:39,520 --> 00:17:41,679
to be between five and ten characters if

514
00:17:41,679 --> 00:17:43,919
it doesn't meet that criteria it's going

515
00:17:43,919 --> 00:17:46,160
to return the fact that the username

516
00:17:46,160 --> 00:17:48,559
must be characters only for my password

517
00:17:48,559 --> 00:17:50,480
it's a little more restrictive is that i

518
00:17:50,480 --> 00:17:52,640
can use alphanumeric characters and it

519
00:17:52,640 --> 00:17:55,280
has between 8 and 50 characters long if

520
00:17:55,280 --> 00:17:56,559
it doesn't meet that criteria it's going

521
00:17:56,559 --> 00:17:58,559
to tell the user the password must be

522
00:17:58,559 --> 00:18:00,240
numbers or characters only and then we

523
00:18:00,240 --> 00:18:02,160
create my password so this is a good

524
00:18:02,160 --> 00:18:04,480
example of a security control i've built

525
00:18:04,480 --> 00:18:06,640
but as a tester what do i do with this

526
00:18:06,640 --> 00:18:08,880
to ensure it's working properly now if

527
00:18:08,880 --> 00:18:11,760
you look at a traditional unit test you

528
00:18:11,760 --> 00:18:13,600
ensure that it's doing it functionally

529
00:18:13,600 --> 00:18:16,000
what it's supposed to do so in this

530
00:18:16,000 --> 00:18:18,240
example right here i'm setting up a new

531
00:18:18,240 --> 00:18:20,559
user account object and then i'm going

532
00:18:20,559 --> 00:18:22,880
to check that object given a username

533
00:18:22,880 --> 00:18:26,400
user and a password testpassword123 by

534
00:18:26,400 --> 00:18:28,720
the way horrible password just using it

535
00:18:28,720 --> 00:18:30,640
as an example

536
00:18:30,640 --> 00:18:32,640
at line five you're gonna check hey i

537
00:18:32,640 --> 00:18:35,120
want this to return true when i create

538
00:18:35,120 --> 00:18:37,600
my user with these two objects with

539
00:18:37,600 --> 00:18:39,280
these two strings

540
00:18:39,280 --> 00:18:41,600
and the expected value once i create

541
00:18:41,600 --> 00:18:44,080
this user should equal to true

542
00:18:44,080 --> 00:18:46,240
now in this example this functional unit

543
00:18:46,240 --> 00:18:48,080
test is going to work easily because

544
00:18:48,080 --> 00:18:50,080
we're taking what i call the happy path

545
00:18:50,080 --> 00:18:51,440
now a lot of times when we do unit

546
00:18:51,440 --> 00:18:53,280
testing we're going for metrics and

547
00:18:53,280 --> 00:18:54,720
numbers we're just trying to get a bunch

548
00:18:54,720 --> 00:18:56,240
of green lights on the left side that

549
00:18:56,240 --> 00:18:58,240
said yep i did wrote one unit test for

550
00:18:58,240 --> 00:18:59,520
each one of my functions and they're all

551
00:18:59,520 --> 00:19:00,799
doing exactly what they're supposed to

552
00:19:00,799 --> 00:19:02,960
do and if you're being like doing that

553
00:19:02,960 --> 00:19:05,440
extra mile you may take one or two

554
00:19:05,440 --> 00:19:06,960
unhappy paths where i'm like oh if i

555
00:19:06,960 --> 00:19:08,559
just put a garbled number of characters

556
00:19:08,559 --> 00:19:10,000
in here it doesn't work because it

557
00:19:10,000 --> 00:19:12,320
doesn't meet the criteria

558
00:19:12,320 --> 00:19:13,760
when we're creating something called a

559
00:19:13,760 --> 00:19:15,600
security unit test it should be a much

560
00:19:15,600 --> 00:19:16,480
more

561
00:19:16,480 --> 00:19:19,280
focused on how is the security control

562
00:19:19,280 --> 00:19:20,960
actually supposed to work and how would

563
00:19:20,960 --> 00:19:22,960
an attacker try to bypass that or

564
00:19:22,960 --> 00:19:24,559
exploit my code

565
00:19:24,559 --> 00:19:26,880
so in our next example we use the sqli

566
00:19:26,880 --> 00:19:29,200
security unit test i'm doing the same

567
00:19:29,200 --> 00:19:30,880
thing i did with my previous functional

568
00:19:30,880 --> 00:19:33,039
unit test it's like this time when i'm

569
00:19:33,039 --> 00:19:34,799
passing in my password i'm actually

570
00:19:34,799 --> 00:19:37,520
passing in an sql exploit and i'm seeing

571
00:19:37,520 --> 00:19:41,200
if my account will return false

572
00:19:41,200 --> 00:19:43,039
when it tries to validate whether that's

573
00:19:43,039 --> 00:19:46,080
a valid username and password pair

574
00:19:46,080 --> 00:19:47,200
now in this

575
00:19:47,200 --> 00:19:50,480
scenario based on the security unit

576
00:19:50,480 --> 00:19:52,080
control i've already put in place it

577
00:19:52,080 --> 00:19:54,559
should return false

578
00:19:54,559 --> 00:19:55,919
the important thing here is i'm giving

579
00:19:55,919 --> 00:19:58,480
you a single example of one thing to

580
00:19:58,480 --> 00:20:00,880
test these should be as

581
00:20:00,880 --> 00:20:03,280
advanced as your imagination allows them

582
00:20:03,280 --> 00:20:05,600
to be you should try every edge case you

583
00:20:05,600 --> 00:20:09,360
should be able to use a file of the sql

584
00:20:09,360 --> 00:20:12,400
attacks against your security control

585
00:20:12,400 --> 00:20:14,640
be creative the same way attack would be

586
00:20:14,640 --> 00:20:16,960
one of the nice parts of this is this is

587
00:20:16,960 --> 00:20:19,039
really a developer task

588
00:20:19,039 --> 00:20:21,120
and when we approach security testing

589
00:20:21,120 --> 00:20:22,640
one of the most important things to do

590
00:20:22,640 --> 00:20:24,080
is either whether you're the developer

591
00:20:24,080 --> 00:20:26,080
or you're a security tester working with

592
00:20:26,080 --> 00:20:27,520
the developer

593
00:20:27,520 --> 00:20:30,080
the developer needs to be part of the

594
00:20:30,080 --> 00:20:32,159
actual security team

595
00:20:32,159 --> 00:20:33,679
a lot of times we end up in these type

596
00:20:33,679 --> 00:20:35,120
of relationships where we have the

597
00:20:35,120 --> 00:20:36,799
security team and the developers and

598
00:20:36,799 --> 00:20:37,600
we're

599
00:20:37,600 --> 00:20:39,840
we're ahead right the security team is

600
00:20:39,840 --> 00:20:41,440
worried about security developers like i

601
00:20:41,440 --> 00:20:42,720
just have a deadline i had to get my

602
00:20:42,720 --> 00:20:45,200
functionality out um if my one tool

603
00:20:45,200 --> 00:20:46,880
that's scanning my product doesn't catch

604
00:20:46,880 --> 00:20:48,960
the security alert i don't care

605
00:20:48,960 --> 00:20:51,039
let me just get it out the door

606
00:20:51,039 --> 00:20:52,799
the better way to approach this is you

607
00:20:52,799 --> 00:20:54,400
need to embrace the developers as part

608
00:20:54,400 --> 00:20:56,720
of the security team and give them tasks

609
00:20:56,720 --> 00:20:58,320
like this to validate the security

610
00:20:58,320 --> 00:21:00,400
controls and start getting to think like

611
00:21:00,400 --> 00:21:02,159
attackers because to be honest creating

612
00:21:02,159 --> 00:21:03,520
these type of security unit tests would

613
00:21:03,520 --> 00:21:05,520
be funds because basically i'm trying to

614
00:21:05,520 --> 00:21:08,159
exploit my own security control so i'm

615
00:21:08,159 --> 00:21:10,400
trying to attack my own security tool

616
00:21:10,400 --> 00:21:12,799
that i in place and the more involved

617
00:21:12,799 --> 00:21:14,320
you keep the developers in this and get

618
00:21:14,320 --> 00:21:17,280
them to embrace that defensive code

619
00:21:17,280 --> 00:21:18,799
mentality the higher quality your

620
00:21:18,799 --> 00:21:21,520
products gonna be

621
00:21:21,760 --> 00:21:22,960
now the other thing i talked about when

622
00:21:22,960 --> 00:21:24,720
i said about building security and test

623
00:21:24,720 --> 00:21:27,840
is fuzz target now fuzzy is basically

624
00:21:27,840 --> 00:21:29,280
the traditional idea of fuzzing is i

625
00:21:29,280 --> 00:21:31,039
take a bunch of random data i jam it in

626
00:21:31,039 --> 00:21:33,039
an interface and i try to get my

627
00:21:33,039 --> 00:21:35,039
application to do something weird it's

628
00:21:35,039 --> 00:21:36,480
either going to hang it's going to stall

629
00:21:36,480 --> 00:21:38,720
or it's going to crash

630
00:21:38,720 --> 00:21:41,600
in the more modern way we do fuzzing

631
00:21:41,600 --> 00:21:44,480
it's not the best approach to jam

632
00:21:44,480 --> 00:21:46,320
basic data into every interface

633
00:21:46,320 --> 00:21:48,320
especially if you just pick random data

634
00:21:48,320 --> 00:21:49,840
that's kind of a brute forcing attack

635
00:21:49,840 --> 00:21:52,159
and it takes an extremely long amount of

636
00:21:52,159 --> 00:21:54,720
time if i try to test every interface

637
00:21:54,720 --> 00:21:57,520
starting with like zero to one to two to

638
00:21:57,520 --> 00:21:59,600
three all the way up just random long

639
00:21:59,600 --> 00:22:02,559
amounts of data to images to whatever

640
00:22:02,559 --> 00:22:04,880
it's going to take days

641
00:22:04,880 --> 00:22:07,039
to go through this type of testing and

642
00:22:07,039 --> 00:22:09,039
that's not realistic in a modern

643
00:22:09,039 --> 00:22:10,559
environment where we're trying to push

644
00:22:10,559 --> 00:22:13,039
code out every single day and in bigger

645
00:22:13,039 --> 00:22:14,880
industries you're trying to push code

646
00:22:14,880 --> 00:22:17,520
out multiple times a day in this agile

647
00:22:17,520 --> 00:22:18,720
environment

648
00:22:18,720 --> 00:22:20,960
fuzzing is still important but it needs

649
00:22:20,960 --> 00:22:22,080
to be done

650
00:22:22,080 --> 00:22:24,240
purposefully and what i mean by this is

651
00:22:24,240 --> 00:22:25,440
we build these things they're called

652
00:22:25,440 --> 00:22:27,520
fuzz targets and fuzz target sits around

653
00:22:27,520 --> 00:22:29,440
my interface that takes an input and i'm

654
00:22:29,440 --> 00:22:31,120
basically able to say hey these are the

655
00:22:31,120 --> 00:22:33,440
different areas that i want my fuzzing

656
00:22:33,440 --> 00:22:36,320
engine to actually fuzz and this is the

657
00:22:36,320 --> 00:22:38,000
type of data constraints i want to put

658
00:22:38,000 --> 00:22:39,760
on how you're going to fuzz that target

659
00:22:39,760 --> 00:22:41,840
so we're not wasting our time doing a

660
00:22:41,840 --> 00:22:43,280
bunch of stuff we already know that it's

661
00:22:43,280 --> 00:22:45,679
not even compatible to that interface it

662
00:22:45,679 --> 00:22:48,000
helps us be much more proactive on

663
00:22:48,000 --> 00:22:49,679
deciding what actually needs to be

664
00:22:49,679 --> 00:22:52,080
fuzzed and it helps us

665
00:22:52,080 --> 00:22:54,080
think more critically about how to fuzz

666
00:22:54,080 --> 00:22:55,919
that target to get the best results to

667
00:22:55,919 --> 00:22:57,760
reduce the amount of time we're spending

668
00:22:57,760 --> 00:23:00,879
fuzzing our application

669
00:23:02,159 --> 00:23:03,919
now the other side of this during this

670
00:23:03,919 --> 00:23:05,840
phase that we call build test and review

671
00:23:05,840 --> 00:23:08,080
is the tester peer review like i said

672
00:23:08,080 --> 00:23:09,760
before the tester peer review is that

673
00:23:09,760 --> 00:23:11,440
one chance i'm able to go to somebody

674
00:23:11,440 --> 00:23:13,520
else that's doing testing application it

675
00:23:13,520 --> 00:23:14,960
might not even be a tester if i'm a

676
00:23:14,960 --> 00:23:16,720
developer and i'm tasked to be the

677
00:23:16,720 --> 00:23:19,360
tester for this build i can go over and

678
00:23:19,360 --> 00:23:22,000
talk to a senior developer and be like

679
00:23:22,000 --> 00:23:23,840
hey can you look over my testing

680
00:23:23,840 --> 00:23:25,440
strategy that i built for this and make

681
00:23:25,440 --> 00:23:26,960
sure i'm not missing anything or do you

682
00:23:26,960 --> 00:23:28,799
see things that i should be doing

683
00:23:28,799 --> 00:23:30,240
differently do you think the tools i'm

684
00:23:30,240 --> 00:23:32,640
using are appropriate for our

685
00:23:32,640 --> 00:23:35,200
application

686
00:23:35,200 --> 00:23:37,280
it's a really good time also to exchange

687
00:23:37,280 --> 00:23:38,880
information with this person and gain

688
00:23:38,880 --> 00:23:39,840
some knowledge in a different

689
00:23:39,840 --> 00:23:41,440
perspective because a lot of times when

690
00:23:41,440 --> 00:23:43,360
we're testing our own product we get

691
00:23:43,360 --> 00:23:46,000
kind of tunnel vision into like well

692
00:23:46,000 --> 00:23:47,279
these are the things i have these are

693
00:23:47,279 --> 00:23:49,760
the ways i always test this and it never

694
00:23:49,760 --> 00:23:52,320
diversifies you gain the knowledge of

695
00:23:52,320 --> 00:23:53,919
your peers to allow you to be a more

696
00:23:53,919 --> 00:23:56,000
effective tester so the things that you

697
00:23:56,000 --> 00:23:57,200
should be reviewing during your test

698
00:23:57,200 --> 00:23:59,200
review is your threat model to make sure

699
00:23:59,200 --> 00:24:01,039
you guys didn't miss anything your

700
00:24:01,039 --> 00:24:03,360
testing strategy to ensure that it was

701
00:24:03,360 --> 00:24:05,039
constructed well off your threat model

702
00:24:05,039 --> 00:24:07,120
and you chose appropriate actions based

703
00:24:07,120 --> 00:24:09,120
on what was in the threat model the

704
00:24:09,120 --> 00:24:11,440
tools you chose for automation

705
00:24:11,440 --> 00:24:13,039
how are you going to conduct your pen

706
00:24:13,039 --> 00:24:15,360
testing and your pen testing tools and

707
00:24:15,360 --> 00:24:16,559
like i said at the very end here this is

708
00:24:16,559 --> 00:24:18,640
a great time to exchange information

709
00:24:18,640 --> 00:24:20,720
especially if you're two people working

710
00:24:20,720 --> 00:24:22,799
on a same company but maybe you're

711
00:24:22,799 --> 00:24:25,440
working on separate projects and

712
00:24:25,440 --> 00:24:27,520
this other developer's been seeing this

713
00:24:27,520 --> 00:24:28,720
other testers we've seen a lot of

714
00:24:28,720 --> 00:24:30,720
developers are doing this same problem

715
00:24:30,720 --> 00:24:32,320
every time and they might tell you hey

716
00:24:32,320 --> 00:24:35,039
we're noticing that we're not doing good

717
00:24:35,039 --> 00:24:36,480
whether it's input validation we're not

718
00:24:36,480 --> 00:24:38,640
preventing cross-site scripting well or

719
00:24:38,640 --> 00:24:40,559
we've been allowing i've been finding a

720
00:24:40,559 --> 00:24:42,720
lot of um

721
00:24:42,720 --> 00:24:44,480
things where we're exposing data that we

722
00:24:44,480 --> 00:24:46,000
shouldn't be just exposing because we're

723
00:24:46,000 --> 00:24:48,080
not implementing our encryption prop

724
00:24:48,080 --> 00:24:49,279
appropriately

725
00:24:49,279 --> 00:24:50,880
this is the moment to gain that

726
00:24:50,880 --> 00:24:53,039
knowledge from either a more senior or a

727
00:24:53,039 --> 00:24:55,679
peer tester to now know that hey this

728
00:24:55,679 --> 00:24:56,880
might be something we're seeing

729
00:24:56,880 --> 00:24:59,360
systemically in our organization i need

730
00:24:59,360 --> 00:25:00,720
to be on the watch for when i'm

731
00:25:00,720 --> 00:25:04,240
evaluating my application

732
00:25:06,000 --> 00:25:08,400
the next step we talk about is automate

733
00:25:08,400 --> 00:25:10,960
security tests now as a tester everyone

734
00:25:10,960 --> 00:25:12,799
thinks of like oh your application

735
00:25:12,799 --> 00:25:14,559
security tester the first thing everyone

736
00:25:14,559 --> 00:25:16,720
thinks of is a pen tester you're going

737
00:25:16,720 --> 00:25:17,919
in there and you're attacking

738
00:25:17,919 --> 00:25:20,480
applications and giving feedback to

739
00:25:20,480 --> 00:25:22,640
the development team that's actually a

740
00:25:22,640 --> 00:25:25,520
very small fraction of anything you

741
00:25:25,520 --> 00:25:26,880
should be doing as an application

742
00:25:26,880 --> 00:25:29,120
security tester specifically because

743
00:25:29,120 --> 00:25:30,400
that's the most

744
00:25:30,400 --> 00:25:33,360
time consuming part of the process as

745
00:25:33,360 --> 00:25:35,440
well as it's the human part of the

746
00:25:35,440 --> 00:25:37,039
process and anything we leave into the

747
00:25:37,039 --> 00:25:39,039
human part of the process

748
00:25:39,039 --> 00:25:41,200
is going to be prone to error you're

749
00:25:41,200 --> 00:25:43,440
much less likely to

750
00:25:43,440 --> 00:25:46,480
you're much more likely to miss things

751
00:25:46,480 --> 00:25:48,880
when you're leaving it up to a person to

752
00:25:48,880 --> 00:25:51,520
do this type of testing

753
00:25:51,520 --> 00:25:53,120
so that's where our test automation

754
00:25:53,120 --> 00:25:54,559
comes in now

755
00:25:54,559 --> 00:25:56,159
there's a problem with test automation

756
00:25:56,159 --> 00:25:58,320
too test automation is very restrictive

757
00:25:58,320 --> 00:26:00,720
in what it's able to do and find so

758
00:26:00,720 --> 00:26:02,799
that's why we use our

759
00:26:02,799 --> 00:26:05,200
testing strategy to identify what can we

760
00:26:05,200 --> 00:26:07,120
catch or should be caught during our

761
00:26:07,120 --> 00:26:10,240
unit tests through fuzzing as well as

762
00:26:10,240 --> 00:26:11,919
through our scanning tools and what

763
00:26:11,919 --> 00:26:14,080
vulnerabilities might there be that we

764
00:26:14,080 --> 00:26:15,440
can't find

765
00:26:15,440 --> 00:26:17,279
using this different type of tools a

766
00:26:17,279 --> 00:26:19,440
very good example of this is dom

767
00:26:19,440 --> 00:26:22,400
cross-site scripting there is almost no

768
00:26:22,400 --> 00:26:25,440
security unit test or automation test

769
00:26:25,440 --> 00:26:27,679
this could be do a good job to confirm

770
00:26:27,679 --> 00:26:29,120
that you've prevented cross-site

771
00:26:29,120 --> 00:26:31,120
scripting dom cross-site scripting

772
00:26:31,120 --> 00:26:32,320
that's something that if you have an

773
00:26:32,320 --> 00:26:34,400
interface where you're taking user input

774
00:26:34,400 --> 00:26:36,159
and you're reflecting it some back to

775
00:26:36,159 --> 00:26:37,919
some way back to that user you should

776
00:26:37,919 --> 00:26:39,760
just manually go in and test and you

777
00:26:39,760 --> 00:26:41,200
should identify that during your

778
00:26:41,200 --> 00:26:43,600
security testing strategy that at the

779
00:26:43,600 --> 00:26:45,120
end you need to manually confirm that

780
00:26:45,120 --> 00:26:47,360
you've mitigated that threat

781
00:26:47,360 --> 00:26:49,440
let's go do a more deep dive into

782
00:26:49,440 --> 00:26:51,039
automating testing

783
00:26:51,039 --> 00:26:52,720
why we want to automate testing it saves

784
00:26:52,720 --> 00:26:54,159
time it's going to be much more

785
00:26:54,159 --> 00:26:56,240
consistent than having a manually tester

786
00:26:56,240 --> 00:26:58,159
go through and do the process you need

787
00:26:58,159 --> 00:27:00,000
to ensure that it's being customized for

788
00:27:00,000 --> 00:27:02,320
your product and that's something you do

789
00:27:02,320 --> 00:27:03,919
during your security testing strategy

790
00:27:03,919 --> 00:27:05,440
you look at your product you look at

791
00:27:05,440 --> 00:27:07,039
your threat model identify what your

792
00:27:07,039 --> 00:27:08,720
application does and then you're going

793
00:27:08,720 --> 00:27:11,279
to modify how you run your automated

794
00:27:11,279 --> 00:27:12,320
tests

795
00:27:12,320 --> 00:27:14,880
for your application now if your

796
00:27:14,880 --> 00:27:17,600
application does not use an sql database

797
00:27:17,600 --> 00:27:19,679
you probably don't want to run every

798
00:27:19,679 --> 00:27:22,240
type of sql injection attack in your

799
00:27:22,240 --> 00:27:24,080
automated testing for your application

800
00:27:24,080 --> 00:27:26,399
because you're just wasting time if you

801
00:27:26,399 --> 00:27:29,279
do not customize your automated testing

802
00:27:29,279 --> 00:27:31,760
scanning tools or your fuzzers for your

803
00:27:31,760 --> 00:27:34,320
application all you're gonna do is waste

804
00:27:34,320 --> 00:27:36,480
everyone's time and effort trying to get

805
00:27:36,480 --> 00:27:38,399
a more secure product out there but

806
00:27:38,399 --> 00:27:40,559
because you're wasting all this time

807
00:27:40,559 --> 00:27:42,880
people get tired of waiting for you to

808
00:27:42,880 --> 00:27:44,000
test their application they're gonna

809
00:27:44,000 --> 00:27:46,080
start pushing things to production while

810
00:27:46,080 --> 00:27:48,399
skipping some of the testing steps so

811
00:27:48,399 --> 00:27:50,399
make sure you customize these for your

812
00:27:50,399 --> 00:27:51,520
environment

813
00:27:51,520 --> 00:27:53,279
next thing is you there's a lot of multi

814
00:27:53,279 --> 00:27:54,880
there's multiple open source tools you

815
00:27:54,880 --> 00:27:57,279
can use for automated testing there's

816
00:27:57,279 --> 00:28:00,320
things like zap and burp well burp is

817
00:28:00,320 --> 00:28:02,240
also paid for product but the zap

818
00:28:02,240 --> 00:28:05,279
there's burp there's wipiti also known

819
00:28:05,279 --> 00:28:07,840
as elk3 all open source products you can

820
00:28:07,840 --> 00:28:10,399
adopt today and put in your pipeline to

821
00:28:10,399 --> 00:28:12,880
start doing some of these scannings once

822
00:28:12,880 --> 00:28:14,480
again i am very critical that you

823
00:28:14,480 --> 00:28:16,240
customize these so the first time i use

824
00:28:16,240 --> 00:28:18,240
a product like with pd i just set it to

825
00:28:18,240 --> 00:28:20,480
scan everything and run it ran for like

826
00:28:20,480 --> 00:28:23,039
five hours and then gave me very poor

827
00:28:23,039 --> 00:28:24,559
results back that i wasn't able to

828
00:28:24,559 --> 00:28:27,200
action because i didn't customize how i

829
00:28:27,200 --> 00:28:29,279
wanted to scan for how my product was

830
00:28:29,279 --> 00:28:30,640
set up

831
00:28:30,640 --> 00:28:32,080
one of the nice things about automation

832
00:28:32,080 --> 00:28:33,919
is it's going to identify any threats

833
00:28:33,919 --> 00:28:35,600
that you missed during your threat

834
00:28:35,600 --> 00:28:37,120
modeling process it's not going to

835
00:28:37,120 --> 00:28:38,720
identify all of them but some of the

836
00:28:38,720 --> 00:28:40,399
lower hanging fruit that you might not

837
00:28:40,399 --> 00:28:42,480
have caught during your initial threat

838
00:28:42,480 --> 00:28:44,799
model automated testing does a good job

839
00:28:44,799 --> 00:28:47,039
of finding

840
00:28:47,039 --> 00:28:48,399
now there's three different types of

841
00:28:48,399 --> 00:28:49,600
automated testing the first one i want

842
00:28:49,600 --> 00:28:52,159
to talk about is dast das is great

843
00:28:52,159 --> 00:28:53,919
because it's dynamic application

844
00:28:53,919 --> 00:28:55,919
security testing you're actually

845
00:28:55,919 --> 00:28:58,320
attacking the application and it starts

846
00:28:58,320 --> 00:28:59,840
out with you as a tester taking a

847
00:28:59,840 --> 00:29:02,240
security testing strategy you configure

848
00:29:02,240 --> 00:29:03,840
your das tool to work appropriately

849
00:29:03,840 --> 00:29:05,440
against your application

850
00:29:05,440 --> 00:29:07,279
your build server is going to build that

851
00:29:07,279 --> 00:29:09,279
application run that scanning tool and

852
00:29:09,279 --> 00:29:10,960
you're going to get a report

853
00:29:10,960 --> 00:29:13,279
and now as i'm gonna take this report

854
00:29:13,279 --> 00:29:15,200
and i'm gonna take those security alerts

855
00:29:15,200 --> 00:29:16,720
and i'm gonna move on to my next phase

856
00:29:16,720 --> 00:29:18,080
which would be i need to validate those

857
00:29:18,080 --> 00:29:20,399
security alerts are valid positive

858
00:29:20,399 --> 00:29:22,000
security alerts because what the worst

859
00:29:22,000 --> 00:29:24,240
thing a security tester can do is take a

860
00:29:24,240 --> 00:29:26,399
huge list of alerts and throw it over to

861
00:29:26,399 --> 00:29:27,679
the dev team and be like all right

862
00:29:27,679 --> 00:29:29,679
here's a hundred things that popped red

863
00:29:29,679 --> 00:29:31,039
go fix them all

864
00:29:31,039 --> 00:29:32,640
and then if the dev team starts working

865
00:29:32,640 --> 00:29:34,399
and half of them are false positives

866
00:29:34,399 --> 00:29:35,679
you're just gonna end up with a bunch of

867
00:29:35,679 --> 00:29:37,440
angry devs that you wasted their time

868
00:29:37,440 --> 00:29:38,799
and they're not gonna trust you as a

869
00:29:38,799 --> 00:29:40,960
security tester going forward so not

870
00:29:40,960 --> 00:29:42,159
only you're wasting time but you're

871
00:29:42,159 --> 00:29:44,159
losing trust in the people that you're

872
00:29:44,159 --> 00:29:47,600
asking to help secure your product

873
00:29:47,600 --> 00:29:49,279
now the some of the limitations when

874
00:29:49,279 --> 00:29:51,360
we're looking at a das tool is the dash

875
00:29:51,360 --> 00:29:52,159
cool

876
00:29:52,159 --> 00:29:54,559
it has an exterior view of what's going

877
00:29:54,559 --> 00:29:56,880
on inside the application so your

878
00:29:56,880 --> 00:29:58,880
application's running i'm attacking the

879
00:29:58,880 --> 00:30:00,240
tool and i'm waiting for some sort of

880
00:30:00,240 --> 00:30:01,760
response from the tool that's going to

881
00:30:01,760 --> 00:30:05,200
tell me i would accomplish something now

882
00:30:05,200 --> 00:30:06,799
that works to catch some low hanging

883
00:30:06,799 --> 00:30:08,880
fruit however it's very limited because

884
00:30:08,880 --> 00:30:11,039
there's a lot of attacks that attackers

885
00:30:11,039 --> 00:30:13,039
can take advantage of or

886
00:30:13,039 --> 00:30:15,120
exploits that attackers can use that

887
00:30:15,120 --> 00:30:16,559
will have an effect inside your

888
00:30:16,559 --> 00:30:18,640
application that doesn't always give

889
00:30:18,640 --> 00:30:19,760
feedback

890
00:30:19,760 --> 00:30:21,440
to the application you might have good

891
00:30:21,440 --> 00:30:22,960
filtering you might not give good

892
00:30:22,960 --> 00:30:24,320
response to the attacker but it doesn't

893
00:30:24,320 --> 00:30:26,000
mean they didn't find some way to get

894
00:30:26,000 --> 00:30:27,919
inside the back of your database and

895
00:30:27,919 --> 00:30:29,600
delete something whether they were able

896
00:30:29,600 --> 00:30:31,039
to get an immediate response from the

897
00:30:31,039 --> 00:30:33,120
application or not

898
00:30:33,120 --> 00:30:35,120
the solution to that is what we call is

899
00:30:35,120 --> 00:30:36,080
that's

900
00:30:36,080 --> 00:30:39,279
so ios tools are the next step or next

901
00:30:39,279 --> 00:30:42,480
generation past what a das tool is so

902
00:30:42,480 --> 00:30:44,320
it's an interactive application security

903
00:30:44,320 --> 00:30:46,080
testing and what it does is during

904
00:30:46,080 --> 00:30:48,640
compile time it actually integrates what

905
00:30:48,640 --> 00:30:51,360
it calls agents inside the application

906
00:30:51,360 --> 00:30:52,480
they're going to sit inside the

907
00:30:52,480 --> 00:30:56,159
application on under the hood and watch

908
00:30:56,159 --> 00:30:58,399
for what happens when you run a das tool

909
00:30:58,399 --> 00:31:00,080
against it or you run a scan tool

910
00:31:00,080 --> 00:31:02,559
against it so that from the outside

911
00:31:02,559 --> 00:31:04,320
looking in it runs the same you're still

912
00:31:04,320 --> 00:31:05,919
going to attack the application the same

913
00:31:05,919 --> 00:31:08,399
way you did before however this time you

914
00:31:08,399 --> 00:31:09,840
actually have agents inside the

915
00:31:09,840 --> 00:31:12,640
application listening for what if any of

916
00:31:12,640 --> 00:31:14,000
the data you're shoving into the

917
00:31:14,000 --> 00:31:15,760
application reaches it or any changes

918
00:31:15,760 --> 00:31:18,399
that take effect and the really

919
00:31:18,399 --> 00:31:20,720
powerful part of that is is that now

920
00:31:20,720 --> 00:31:22,399
instead of like the traditional fast

921
00:31:22,399 --> 00:31:23,760
tool where i'm just attacking from the

922
00:31:23,760 --> 00:31:25,760
outside and waiting in response i also

923
00:31:25,760 --> 00:31:27,600
have something inside the application

924
00:31:27,600 --> 00:31:29,519
that can really drill down what happens

925
00:31:29,519 --> 00:31:31,279
and i can get much more meaningful

926
00:31:31,279 --> 00:31:33,840
results from my scanning tool now one of

927
00:31:33,840 --> 00:31:35,600
the problems with ias is there's not a

928
00:31:35,600 --> 00:31:37,760
lot of open source tools out there and

929
00:31:37,760 --> 00:31:39,440
there's a lot of great commercial ones

930
00:31:39,440 --> 00:31:41,600
but they're not cheap they're pretty

931
00:31:41,600 --> 00:31:43,360
expensive so

932
00:31:43,360 --> 00:31:45,519
dash tools work really well then don't

933
00:31:45,519 --> 00:31:47,360
give as much feedback under the hood i

934
00:31:47,360 --> 00:31:49,519
ask tools are better but there's not a

935
00:31:49,519 --> 00:31:51,679
really good open source solution out

936
00:31:51,679 --> 00:31:53,120
there and they're a little more

937
00:31:53,120 --> 00:31:56,000
expensive to implement

938
00:31:56,000 --> 00:31:57,200
now the last thing we talked about which

939
00:31:57,200 --> 00:31:59,120
is fuzzing now there's the traditional

940
00:31:59,120 --> 00:32:01,679
fuzzing where i just jam a bunch of data

941
00:32:01,679 --> 00:32:03,679
into all the interfaces or we have

942
00:32:03,679 --> 00:32:05,039
targeted fuzzing where we're going to go

943
00:32:05,039 --> 00:32:06,399
in as a tester i'm going to use my

944
00:32:06,399 --> 00:32:08,399
security testing strategy identify the

945
00:32:08,399 --> 00:32:10,559
areas that i want to fuzz i'm going to

946
00:32:10,559 --> 00:32:12,159
build my fuzzing targets i'm going to

947
00:32:12,159 --> 00:32:14,000
run my fuzzing engine against my

948
00:32:14,000 --> 00:32:15,919
application and i'll watch to see if it

949
00:32:15,919 --> 00:32:18,159
crashes hangs or delays i'm going to

950
00:32:18,159 --> 00:32:19,840
take that information from the report

951
00:32:19,840 --> 00:32:21,760
i'm going to use that information

952
00:32:21,760 --> 00:32:24,159
to identify areas that might have

953
00:32:24,159 --> 00:32:25,600
built-in vulnerabilities that i need to

954
00:32:25,600 --> 00:32:28,320
go validate during my final phase when i

955
00:32:28,320 --> 00:32:32,000
manually test my application

956
00:32:32,000 --> 00:32:34,720
now that goes into our sixth step of the

957
00:32:34,720 --> 00:32:37,200
software security testing lifecycle and

958
00:32:37,200 --> 00:32:38,799
what this is we're going to validate our

959
00:32:38,799 --> 00:32:40,960
security findings and controls now this

960
00:32:40,960 --> 00:32:42,480
is the part that everybody loves and

961
00:32:42,480 --> 00:32:44,480
thinks of when they're thinking of

962
00:32:44,480 --> 00:32:46,399
application security testing this is

963
00:32:46,399 --> 00:32:49,120
where i get to go in and play the

964
00:32:49,120 --> 00:32:51,600
attacker i get to pen test or hack my

965
00:32:51,600 --> 00:32:54,240
application the important part is is i'm

966
00:32:54,240 --> 00:32:55,919
not just going in there and playing

967
00:32:55,919 --> 00:32:58,960
around like i would if i was a

968
00:32:58,960 --> 00:33:00,720
functionality tester or an integrate

969
00:33:00,720 --> 00:33:02,080
like a tester that's going in just doing

970
00:33:02,080 --> 00:33:03,840
some smoke tests basically just playing

971
00:33:03,840 --> 00:33:05,120
around to make sure everything does what

972
00:33:05,120 --> 00:33:06,399
it's supposed to or if i can just

973
00:33:06,399 --> 00:33:08,000
randomly hack stuff

974
00:33:08,000 --> 00:33:09,840
what i'm doing is is i'm taking the

975
00:33:09,840 --> 00:33:12,480
information that i identified in my

976
00:33:12,480 --> 00:33:14,399
security testing strategy as things that

977
00:33:14,399 --> 00:33:16,240
need to be manually tested because

978
00:33:16,240 --> 00:33:18,320
security unit tests and automated

979
00:33:18,320 --> 00:33:19,679
testing will have would have a hard time

980
00:33:19,679 --> 00:33:21,360
testing for them and i'm taking the

981
00:33:21,360 --> 00:33:23,600
alerts that i got back from my secure

982
00:33:23,600 --> 00:33:25,600
from my actual automated testing i'm

983
00:33:25,600 --> 00:33:28,000
going i'm going to validate that either

984
00:33:28,000 --> 00:33:29,360
the security controls are working

985
00:33:29,360 --> 00:33:31,360
appropriately or any of the alerts that

986
00:33:31,360 --> 00:33:33,200
i receive from my automated testing or

987
00:33:33,200 --> 00:33:35,120
actual vulnerabilities the developers

988
00:33:35,120 --> 00:33:37,120
need to spend time fixing

989
00:33:37,120 --> 00:33:38,640
so if you see we've kind of created a

990
00:33:38,640 --> 00:33:40,640
cascade of events to get here rather

991
00:33:40,640 --> 00:33:42,559
than just jumping at the end during my

992
00:33:42,559 --> 00:33:44,640
testing phase run my automation tool and

993
00:33:44,640 --> 00:33:46,320
have a pen tester come in and check some

994
00:33:46,320 --> 00:33:49,760
stuff out i used that security

995
00:33:49,760 --> 00:33:52,320
requirements to build a good thorough

996
00:33:52,320 --> 00:33:54,559
threat model i used that threat model to

997
00:33:54,559 --> 00:33:57,120
design a proactive and well-designed

998
00:33:57,120 --> 00:33:59,279
security testing strategy i took my

999
00:33:59,279 --> 00:34:02,000
security testing strategy and i decided

1000
00:34:02,000 --> 00:34:03,679
what security unit tests and buzz

1001
00:34:03,679 --> 00:34:05,760
targets i had to implement it during the

1002
00:34:05,760 --> 00:34:08,079
build phase of my application as well as

1003
00:34:08,079 --> 00:34:10,239
how to configure my automated security

1004
00:34:10,239 --> 00:34:12,239
scanning tools to be able to give me the

1005
00:34:12,239 --> 00:34:14,480
best results and then i took the

1006
00:34:14,480 --> 00:34:16,079
information from my security testing

1007
00:34:16,079 --> 00:34:18,159
strategy for the ones that i can't test

1008
00:34:18,159 --> 00:34:20,000
through automation as well as all the

1009
00:34:20,000 --> 00:34:22,159
alerts for my automation tool and now

1010
00:34:22,159 --> 00:34:23,599
i'm going to validate those different

1011
00:34:23,599 --> 00:34:25,040
security findings and ensure the

1012
00:34:25,040 --> 00:34:26,399
security controls are working

1013
00:34:26,399 --> 00:34:28,800
appropriately manually based on that

1014
00:34:28,800 --> 00:34:31,679
strategy so that's why swiss was so

1015
00:34:31,679 --> 00:34:34,639
powerful that each phase is designed to

1016
00:34:34,639 --> 00:34:36,639
feed into the next phase and ensure that

1017
00:34:36,639 --> 00:34:39,199
we're testing in a proactive manner

1018
00:34:39,199 --> 00:34:41,520
that's focused on what's actually

1019
00:34:41,520 --> 00:34:43,520
against my application instead of

1020
00:34:43,520 --> 00:34:45,599
shotgunning my testing techniques and

1021
00:34:45,599 --> 00:34:48,960
hoping i catch low hanging free we go in

1022
00:34:48,960 --> 00:34:50,879
and we do validating security controls

1023
00:34:50,879 --> 00:34:52,719
and finding it's actually a very

1024
00:34:52,719 --> 00:34:54,639
methodical process i don't just jump on

1025
00:34:54,639 --> 00:34:55,918
there and just start all right well it

1026
00:34:55,918 --> 00:34:57,839
said i have sqli let me just try to

1027
00:34:57,839 --> 00:35:00,160
start injecting input into these

1028
00:35:00,160 --> 00:35:02,400
different interfaces and see what

1029
00:35:02,400 --> 00:35:03,520
happens

1030
00:35:03,520 --> 00:35:05,040
you actually have to set it up in the

1031
00:35:05,040 --> 00:35:07,359
steps the steps is first you identify

1032
00:35:07,359 --> 00:35:08,480
the threat and vulnerability that you

1033
00:35:08,480 --> 00:35:09,760
want to test for

1034
00:35:09,760 --> 00:35:11,280
so say we're talking about the dom

1035
00:35:11,280 --> 00:35:13,040
cross-site scripting identify that i

1036
00:35:13,040 --> 00:35:14,640
have an interface that has a possible

1037
00:35:14,640 --> 00:35:17,040
domcr dom cross-side scripting

1038
00:35:17,040 --> 00:35:19,040
vulnerability because i take input from

1039
00:35:19,040 --> 00:35:20,880
the user and i'm reflecting it back into

1040
00:35:20,880 --> 00:35:23,760
my html some some way now as a security

1041
00:35:23,760 --> 00:35:26,640
control i put in a sanitizer to ensure

1042
00:35:26,640 --> 00:35:29,040
that when that data got reflected back

1043
00:35:29,040 --> 00:35:30,640
into my html that it should have been

1044
00:35:30,640 --> 00:35:32,800
sanitized by input however

1045
00:35:32,800 --> 00:35:34,400
my

1046
00:35:34,400 --> 00:35:37,280
security unit test as well as

1047
00:35:37,280 --> 00:35:39,359
my automated testing tools are going to

1048
00:35:39,359 --> 00:35:41,440
have a hard time validating that

1049
00:35:41,440 --> 00:35:43,760
security control works effectively so

1050
00:35:43,760 --> 00:35:46,000
i'm going to go in and manually test for

1051
00:35:46,000 --> 00:35:47,200
that the first thing is i need to

1052
00:35:47,200 --> 00:35:49,359
identify that that

1053
00:35:49,359 --> 00:35:51,599
vulnerability exists or could exist

1054
00:35:51,599 --> 00:35:52,880
second i need to have a deep

1055
00:35:52,880 --> 00:35:54,880
understanding of how that vulnerability

1056
00:35:54,880 --> 00:35:57,599
works if i go in and i just google oh

1057
00:35:57,599 --> 00:35:59,359
how's dom crosstalk scripting oh if you

1058
00:35:59,359 --> 00:36:00,720
paste this in that's the one way it

1059
00:36:00,720 --> 00:36:02,320
works and i copy and paste it in it

1060
00:36:02,320 --> 00:36:04,079
doesn't work and call it good i tested

1061
00:36:04,079 --> 00:36:04,880
it

1062
00:36:04,880 --> 00:36:06,560
i haven't actually tested it because you

1063
00:36:06,560 --> 00:36:08,000
don't understand what's going on under

1064
00:36:08,000 --> 00:36:09,920
the hood and how that vulnerability

1065
00:36:09,920 --> 00:36:10,960
actually

1066
00:36:10,960 --> 00:36:12,079
works

1067
00:36:12,079 --> 00:36:13,920
in your application

1068
00:36:13,920 --> 00:36:15,760
you have to have a deep understanding as

1069
00:36:15,760 --> 00:36:17,599
a tester of how these vulnerabilities

1070
00:36:17,599 --> 00:36:19,520
work so you can start thinking proactive

1071
00:36:19,520 --> 00:36:21,359
like the attacker would be like okay if

1072
00:36:21,359 --> 00:36:23,200
this doesn't work well maybe if i put it

1073
00:36:23,200 --> 00:36:25,359
in the iframe with an alert maybe i can

1074
00:36:25,359 --> 00:36:27,040
get it to trigger then

1075
00:36:27,040 --> 00:36:28,480
and now i start getting more creative

1076
00:36:28,480 --> 00:36:30,240
because i have a deeper understanding of

1077
00:36:30,240 --> 00:36:32,240
how the vulnerability works

1078
00:36:32,240 --> 00:36:33,520
the third part of this and now i'm going

1079
00:36:33,520 --> 00:36:35,119
to choose appropriate tools and

1080
00:36:35,119 --> 00:36:37,839
techniques to exploit this vulnerability

1081
00:36:37,839 --> 00:36:39,920
now if it was something like an sqli i

1082
00:36:39,920 --> 00:36:42,640
might use a tool that generates a lot of

1083
00:36:42,640 --> 00:36:44,240
sql injections for me and attacks

1084
00:36:44,240 --> 00:36:45,599
against the interface so i'm not sitting

1085
00:36:45,599 --> 00:36:47,440
there manually doing it myself it's

1086
00:36:47,440 --> 00:36:48,960
still manual a test because i'm running

1087
00:36:48,960 --> 00:36:50,400
a tool against interface against my

1088
00:36:50,400 --> 00:36:53,680
running application however i am

1089
00:36:53,680 --> 00:36:55,760
using a tool to support me to do that to

1090
00:36:55,760 --> 00:36:58,160
save time and do it effectively or it

1091
00:36:58,160 --> 00:37:00,160
might just be me having to put manual

1092
00:37:00,160 --> 00:37:02,160
input into some sort of interface or

1093
00:37:02,160 --> 00:37:05,200
messing with the url itself without

1094
00:37:05,200 --> 00:37:07,040
using a tool but this is the phase which

1095
00:37:07,040 --> 00:37:08,640
identify if there are tools and

1096
00:37:08,640 --> 00:37:11,520
techniques i need to use what are they

1097
00:37:11,520 --> 00:37:13,119
the next step is we need to define our

1098
00:37:13,119 --> 00:37:15,200
test objectives and this is where we

1099
00:37:15,200 --> 00:37:16,400
define

1100
00:37:16,400 --> 00:37:19,119
what i consider a positive test and what

1101
00:37:19,119 --> 00:37:21,520
do i consider a false test so what is my

1102
00:37:21,520 --> 00:37:23,280
validation criteria to say hey my

1103
00:37:23,280 --> 00:37:25,680
security control works or hey my

1104
00:37:25,680 --> 00:37:27,520
security control didn't work because

1105
00:37:27,520 --> 00:37:29,599
this is the response i got and it tells

1106
00:37:29,599 --> 00:37:32,240
me that i have this vulnerability so now

1107
00:37:32,240 --> 00:37:33,839
that we've gone through we've identified

1108
00:37:33,839 --> 00:37:36,079
the threat we understand it we've chosen

1109
00:37:36,079 --> 00:37:37,920
the tools you want to use and we've now

1110
00:37:37,920 --> 00:37:39,680
defined how we're going to test it and

1111
00:37:39,680 --> 00:37:41,760
what the criteria for pass fail is then

1112
00:37:41,760 --> 00:37:43,280
we finally get to go do the part that

1113
00:37:43,280 --> 00:37:45,359
everybody loves them the most we get to

1114
00:37:45,359 --> 00:37:47,680
exploit that vulnerability in our code

1115
00:37:47,680 --> 00:37:49,440
now we go in and we attempt to exploit

1116
00:37:49,440 --> 00:37:50,640
it and either it's going to be

1117
00:37:50,640 --> 00:37:52,800
successful or it's not and i must have

1118
00:37:52,800 --> 00:37:54,960
to evaluate what the application does to

1119
00:37:54,960 --> 00:37:56,720
confirm my result whether i had a

1120
00:37:56,720 --> 00:37:58,800
successful exploit or whether my

1121
00:37:58,800 --> 00:38:01,200
security control worked appropriately

1122
00:38:01,200 --> 00:38:03,680
if my security control did not work

1123
00:38:03,680 --> 00:38:05,920
appropriately the next step is a really

1124
00:38:05,920 --> 00:38:07,040
important one

1125
00:38:07,040 --> 00:38:10,079
i need to identify why

1126
00:38:10,079 --> 00:38:12,480
it's not so it's not

1127
00:38:12,480 --> 00:38:13,839
it's not

1128
00:38:13,839 --> 00:38:15,280
just enough to know that the

1129
00:38:15,280 --> 00:38:17,040
vulnerability is there you have to

1130
00:38:17,040 --> 00:38:18,880
understand that why was i able to

1131
00:38:18,880 --> 00:38:21,040
exploit this why did my security control

1132
00:38:21,040 --> 00:38:22,720
not work because if we're going to take

1133
00:38:22,720 --> 00:38:23,839
that vulnerability and we're going to

1134
00:38:23,839 --> 00:38:25,200
look at that security control and say

1135
00:38:25,200 --> 00:38:26,880
hey you need to fix something we should

1136
00:38:26,880 --> 00:38:29,119
have an understanding why it didn't work

1137
00:38:29,119 --> 00:38:31,520
in the first place because if you don't

1138
00:38:31,520 --> 00:38:33,599
do that root cause analysis during this

1139
00:38:33,599 --> 00:38:36,640
phase you're setting yourself up to fix

1140
00:38:36,640 --> 00:38:38,160
the surface level problem that might

1141
00:38:38,160 --> 00:38:39,920
have a deeper issue

1142
00:38:39,920 --> 00:38:41,680
where if i was able to exploit it

1143
00:38:41,680 --> 00:38:44,480
through this interface so i put on this

1144
00:38:44,480 --> 00:38:46,800
controller a security

1145
00:38:46,800 --> 00:38:47,920
setting to

1146
00:38:47,920 --> 00:38:49,839
prevent it however the problem was

1147
00:38:49,839 --> 00:38:52,079
actually the fact that on

1148
00:38:52,079 --> 00:38:53,920
the back end of my server and the very

1149
00:38:53,920 --> 00:38:55,359
like back end code i'm not doing my

1150
00:38:55,359 --> 00:38:57,280
validation they might still the attacker

1151
00:38:57,280 --> 00:38:59,040
might be able to get to that exploit

1152
00:38:59,040 --> 00:39:01,200
from a different interface because we

1153
00:39:01,200 --> 00:39:03,359
didn't do that root cause analysis and

1154
00:39:03,359 --> 00:39:05,839
find out where the real problem was

1155
00:39:05,839 --> 00:39:08,640
we could set ourselves up for failure so

1156
00:39:08,640 --> 00:39:10,400
that's a huge step is once i've actually

1157
00:39:10,400 --> 00:39:12,400
been able to exploit is taking the time

1158
00:39:12,400 --> 00:39:15,280
to understand why and how that happened

1159
00:39:15,280 --> 00:39:17,119
and then here's how we should remediate

1160
00:39:17,119 --> 00:39:19,280
it and the final step

1161
00:39:19,280 --> 00:39:21,119
once it's remediated

1162
00:39:21,119 --> 00:39:22,960
is confirming that the remediation

1163
00:39:22,960 --> 00:39:24,640
worked appropriately and it's also

1164
00:39:24,640 --> 00:39:26,160
confirming that you didn't break

1165
00:39:26,160 --> 00:39:28,560
something else in the process of fixing

1166
00:39:28,560 --> 00:39:30,240
that vulnerability

1167
00:39:30,240 --> 00:39:32,480
so a lot of times we might be we might

1168
00:39:32,480 --> 00:39:33,920
fix one vulnerability but we want to

1169
00:39:33,920 --> 00:39:35,599
make sure when fixing one thing we

1170
00:39:35,599 --> 00:39:37,359
didn't open up a different door by

1171
00:39:37,359 --> 00:39:38,960
changing the way our security control

1172
00:39:38,960 --> 00:39:40,079
worked

1173
00:39:40,079 --> 00:39:42,640
we're editing or changing or adding a

1174
00:39:42,640 --> 00:39:44,480
security control to something that we

1175
00:39:44,480 --> 00:39:46,400
identified we need to make sure that

1176
00:39:46,400 --> 00:39:48,000
when we fix or change something as

1177
00:39:48,000 --> 00:39:50,079
important as a security control that's

1178
00:39:50,079 --> 00:39:52,640
still effective so confirm that your

1179
00:39:52,640 --> 00:39:56,279
remediation worked

1180
00:39:56,480 --> 00:39:58,960
now swisstal those are the big six steps

1181
00:39:58,960 --> 00:40:01,040
to swissle some things you want to keep

1182
00:40:01,040 --> 00:40:03,200
in mind is swissle is not meant for

1183
00:40:03,200 --> 00:40:04,720
everyone just all right cool we have

1184
00:40:04,720 --> 00:40:06,000
this new idea of how we're going to

1185
00:40:06,000 --> 00:40:07,680
approach testing and for every

1186
00:40:07,680 --> 00:40:09,599
application for everyone out there just

1187
00:40:09,599 --> 00:40:11,040
adopt all the steps and just start

1188
00:40:11,040 --> 00:40:13,040
implementing how does it make sense and

1189
00:40:13,040 --> 00:40:15,040
you shouldn't do that for any framework

1190
00:40:15,040 --> 00:40:16,960
that anyone pitches out there

1191
00:40:16,960 --> 00:40:18,960
the idea is that swiss should be

1192
00:40:18,960 --> 00:40:22,000
customizable for your environment

1193
00:40:22,000 --> 00:40:24,560
and to be honest if you do nothing else

1194
00:40:24,560 --> 00:40:26,640
do the first three steps

1195
00:40:26,640 --> 00:40:28,079
you need to know what your security

1196
00:40:28,079 --> 00:40:29,760
requirements are you need a threat model

1197
00:40:29,760 --> 00:40:31,200
and come up with a strategy on how

1198
00:40:31,200 --> 00:40:33,680
you're gonna test if you cannot do those

1199
00:40:33,680 --> 00:40:35,839
three things then none of the rest of it

1200
00:40:35,839 --> 00:40:38,319
matters we all like to throw that dream

1201
00:40:38,319 --> 00:40:40,480
tool in there that scans our application

1202
00:40:40,480 --> 00:40:42,640
and gives us alerts but if we don't

1203
00:40:42,640 --> 00:40:44,960
understand how our application works and

1204
00:40:44,960 --> 00:40:46,720
the threats that face our application

1205
00:40:46,720 --> 00:40:48,560
and the security controls we've chosen

1206
00:40:48,560 --> 00:40:50,960
to use in our application then we cannot

1207
00:40:50,960 --> 00:40:53,760
effectively test our application

1208
00:40:53,760 --> 00:40:55,839
it's also incremental like i said if you

1209
00:40:55,839 --> 00:40:58,560
do nothing else do the first few steps

1210
00:40:58,560 --> 00:41:01,599
build small first step is identify what

1211
00:41:01,599 --> 00:41:03,520
your security requirements are once

1212
00:41:03,520 --> 00:41:04,960
you've identified your security

1213
00:41:04,960 --> 00:41:07,280
requirements then maybe you add in okay

1214
00:41:07,280 --> 00:41:08,640
now let's start doing threat modeling

1215
00:41:08,640 --> 00:41:09,599
because you weren't doing threat

1216
00:41:09,599 --> 00:41:10,960
modeling before

1217
00:41:10,960 --> 00:41:13,359
increment it in steps take off those

1218
00:41:13,359 --> 00:41:15,359
bite-sized chunks this is that classic

1219
00:41:15,359 --> 00:41:16,319
idiom

1220
00:41:16,319 --> 00:41:17,760
how to eat an elephant one bite at a

1221
00:41:17,760 --> 00:41:19,760
time right you have to get started

1222
00:41:19,760 --> 00:41:22,560
eventually start with by identifying

1223
00:41:22,560 --> 00:41:24,640
what the requirements are during the

1224
00:41:24,640 --> 00:41:28,160
beginning of development

1225
00:41:28,319 --> 00:41:30,960
now swissle is not meant to replace the

1226
00:41:30,960 --> 00:41:32,560
software development life cycle or the

1227
00:41:32,560 --> 00:41:34,800
secure development life cycle it's meant

1228
00:41:34,800 --> 00:41:36,800
to complement it it's meant to answer

1229
00:41:36,800 --> 00:41:40,640
the question of what do i do as a tester

1230
00:41:40,640 --> 00:41:42,480
during each phase of the software

1231
00:41:42,480 --> 00:41:44,400
development life cycle or what do i do

1232
00:41:44,400 --> 00:41:46,160
as a tester during the secure

1233
00:41:46,160 --> 00:41:47,839
development life cycle and you'll see

1234
00:41:47,839 --> 00:41:49,760
that a lot of these things marry up

1235
00:41:49,760 --> 00:41:51,280
obviously security development life

1236
00:41:51,280 --> 00:41:52,560
cycle the thing we always start with

1237
00:41:52,560 --> 00:41:55,359
education education is by far the most

1238
00:41:55,359 --> 00:41:56,880
important thing you can do educate your

1239
00:41:56,880 --> 00:41:59,359
developers and educate your testers so

1240
00:41:59,359 --> 00:42:01,520
they know how to secure your application

1241
00:42:01,520 --> 00:42:02,880
because if you do it right the first

1242
00:42:02,880 --> 00:42:03,760
time

1243
00:42:03,760 --> 00:42:06,240
it's the easiest way and the most

1244
00:42:06,240 --> 00:42:09,839
cost-saving way to approach development

1245
00:42:09,839 --> 00:42:11,760
now we get into swissler we're talking

1246
00:42:11,760 --> 00:42:13,760
about security requirements these are

1247
00:42:13,760 --> 00:42:16,000
the same as the security requirements

1248
00:42:16,000 --> 00:42:17,599
and the secure development life cycle as

1249
00:42:17,599 --> 00:42:19,839
well as the just building requirements

1250
00:42:19,839 --> 00:42:21,760
for software development when we get to

1251
00:42:21,760 --> 00:42:23,520
plan and design that's we're talking

1252
00:42:23,520 --> 00:42:25,200
about that threat modeling right and as

1253
00:42:25,200 --> 00:42:26,400
a tester i know i should be

1254
00:42:26,400 --> 00:42:28,240
participating threat modeling and

1255
00:42:28,240 --> 00:42:30,480
building my security testing strategy so

1256
00:42:30,480 --> 00:42:32,079
that when we start developing our

1257
00:42:32,079 --> 00:42:34,240
application i'm able to build those

1258
00:42:34,240 --> 00:42:36,560
security unit tests into my application

1259
00:42:36,560 --> 00:42:38,960
as well as start doing my peer reviews

1260
00:42:38,960 --> 00:42:41,359
finally when we get to test phase what

1261
00:42:41,359 --> 00:42:42,960
they call the test phase and software

1262
00:42:42,960 --> 00:42:44,720
development life cycle that's when i'm

1263
00:42:44,720 --> 00:42:46,720
running my automated tests it's not that

1264
00:42:46,720 --> 00:42:48,319
i have been proactively thinking about

1265
00:42:48,319 --> 00:42:51,119
tests all throughout this but now i

1266
00:42:51,119 --> 00:42:52,640
finally hit the part where we're in

1267
00:42:52,640 --> 00:42:54,319
automation and i have tools there to

1268
00:42:54,319 --> 00:42:56,079
automatically run the tests they're

1269
00:42:56,079 --> 00:42:57,680
gonna give me feedback they're gonna

1270
00:42:57,680 --> 00:42:59,520
allow me during the deploy phase to do

1271
00:42:59,520 --> 00:43:01,200
what the security development life cycle

1272
00:43:01,200 --> 00:43:03,599
calls pen testing or what we call in

1273
00:43:03,599 --> 00:43:05,359
swisstal validating our security

1274
00:43:05,359 --> 00:43:08,799
findings and controls

1275
00:43:11,040 --> 00:43:13,280
now swisstoll also works in devops

1276
00:43:13,280 --> 00:43:15,760
because and i want to caveat this it's

1277
00:43:15,760 --> 00:43:18,240
devops because devsecops is kind of a

1278
00:43:18,240 --> 00:43:20,160
misnomer i feel like the security is

1279
00:43:20,160 --> 00:43:22,000
implied i shouldn't be developing and

1280
00:43:22,000 --> 00:43:24,000
doing operations without security built

1281
00:43:24,000 --> 00:43:25,119
into it

1282
00:43:25,119 --> 00:43:26,800
however with swisstal when we look at

1283
00:43:26,800 --> 00:43:28,319
devops when you're doing your plan

1284
00:43:28,319 --> 00:43:30,960
design develop integrate deliver deploy

1285
00:43:30,960 --> 00:43:32,160
production

1286
00:43:32,160 --> 00:43:33,920
it's all the same process we're all just

1287
00:43:33,920 --> 00:43:36,160
using different words to describe how

1288
00:43:36,160 --> 00:43:38,079
we're doing these different steps so

1289
00:43:38,079 --> 00:43:39,680
with swisstal during your plannings

1290
00:43:39,680 --> 00:43:41,520
during your security requirements during

1291
00:43:41,520 --> 00:43:42,960
your design is your threat model and

1292
00:43:42,960 --> 00:43:44,720
your testing strategy develop and

1293
00:43:44,720 --> 00:43:46,240
integrate that's when i'm building those

1294
00:43:46,240 --> 00:43:48,240
security unit tests and i'm doing my

1295
00:43:48,240 --> 00:43:50,240
reviews deliveries when we're running

1296
00:43:50,240 --> 00:43:52,319
our automated testing and deployment is

1297
00:43:52,319 --> 00:43:53,920
that during that phase when we validate

1298
00:43:53,920 --> 00:43:56,640
my security fine is in control the idea

1299
00:43:56,640 --> 00:43:59,280
is swisstoll should complement what

1300
00:43:59,280 --> 00:44:01,040
you're doing in your environment it

1301
00:44:01,040 --> 00:44:02,800
shouldn't be an outside step that

1302
00:44:02,800 --> 00:44:04,240
impedes what you're doing in your

1303
00:44:04,240 --> 00:44:06,079
environment and it's adoptable whether

1304
00:44:06,079 --> 00:44:08,720
you're using agile waterfall devops

1305
00:44:08,720 --> 00:44:10,319
whatever your approach for software

1306
00:44:10,319 --> 00:44:12,400
development the principles behind

1307
00:44:12,400 --> 00:44:15,599
swisstoil can be applied

1308
00:44:18,000 --> 00:44:19,520
some of the big key takeaways i want to

1309
00:44:19,520 --> 00:44:21,760
talk about and things you need to ensure

1310
00:44:21,760 --> 00:44:23,920
are when we talk about swissle it's

1311
00:44:23,920 --> 00:44:25,480
meant to be a proactive and

1312
00:44:25,480 --> 00:44:27,040
developer-centric approach to

1313
00:44:27,040 --> 00:44:29,280
application security testing and the big

1314
00:44:29,280 --> 00:44:30,560
thing i want to emphasize there is

1315
00:44:30,560 --> 00:44:32,640
developer centric

1316
00:44:32,640 --> 00:44:34,480
developers and testers are not sitting

1317
00:44:34,480 --> 00:44:36,480
siloed in this process

1318
00:44:36,480 --> 00:44:38,720
either the developer is the tester or

1319
00:44:38,720 --> 00:44:40,720
the developers integrated with the

1320
00:44:40,720 --> 00:44:43,920
security testing team to apply

1321
00:44:43,920 --> 00:44:45,359
how we're going to approach testing

1322
00:44:45,359 --> 00:44:46,800
throughout our development cycle that's

1323
00:44:46,800 --> 00:44:48,160
why the developers should be the one

1324
00:44:48,160 --> 00:44:49,920
writing the security unit test they

1325
00:44:49,920 --> 00:44:51,440
should be writing the fuss target

1326
00:44:51,440 --> 00:44:53,280
because they've coordinated with the

1327
00:44:53,280 --> 00:44:55,520
security testing team or the testing

1328
00:44:55,520 --> 00:44:58,400
secur the security team to know what

1329
00:44:58,400 --> 00:45:00,000
needs to be done during the development

1330
00:45:00,000 --> 00:45:03,200
phase to enable a proactive already

1331
00:45:03,200 --> 00:45:06,480
focused approach to security testing

1332
00:45:06,480 --> 00:45:09,680
now swissle also enforces

1333
00:45:09,680 --> 00:45:11,520
enforces a focused security testing

1334
00:45:11,520 --> 00:45:12,960
that's driven by actual threats and

1335
00:45:12,960 --> 00:45:15,119
security controls in your product

1336
00:45:15,119 --> 00:45:17,119
so what it's not is a big shotgun

1337
00:45:17,119 --> 00:45:18,480
approach where i'm just hoping to catch

1338
00:45:18,480 --> 00:45:20,079
a random vulnerability that nobody

1339
00:45:20,079 --> 00:45:22,079
thought of swissle isn't the i'm going

1340
00:45:22,079 --> 00:45:24,720
to catch the zero day

1341
00:45:24,720 --> 00:45:26,720
vulnerability in my application what

1342
00:45:26,720 --> 00:45:28,640
swissle is is i'm going to catch all the

1343
00:45:28,640 --> 00:45:30,560
vulnerabilities i was able to identify

1344
00:45:30,560 --> 00:45:32,640
early on and validate the security

1345
00:45:32,640 --> 00:45:33,760
controls

1346
00:45:33,760 --> 00:45:35,440
are working that i chose to put in my

1347
00:45:35,440 --> 00:45:37,200
application because those are the real

1348
00:45:37,200 --> 00:45:39,119
problems the zero day that nobody knows

1349
00:45:39,119 --> 00:45:41,359
is coming yeah swissle is not designed

1350
00:45:41,359 --> 00:45:44,240
to find that swiss is meant to

1351
00:45:44,240 --> 00:45:46,560
set you up for success with what you

1352
00:45:46,560 --> 00:45:48,560
already know you have and so you're

1353
00:45:48,560 --> 00:45:50,160
proactively testing make sure you're

1354
00:45:50,160 --> 00:45:52,640
doing it the correct way

1355
00:45:52,640 --> 00:45:54,319
swiss still complements the secure

1356
00:45:54,319 --> 00:45:56,000
development life cycle and the software

1357
00:45:56,000 --> 00:45:58,079
development life cycle it's part of

1358
00:45:58,079 --> 00:46:00,400
those processes it's not

1359
00:46:00,400 --> 00:46:02,480
a it's not meant to replace anything

1360
00:46:02,480 --> 00:46:03,599
that you're already doing in your

1361
00:46:03,599 --> 00:46:05,440
environment it's supposed to be telling

1362
00:46:05,440 --> 00:46:08,079
you what should you as a tester be doing

1363
00:46:08,079 --> 00:46:09,760
during those phases of development you

1364
00:46:09,760 --> 00:46:11,680
already have in place

1365
00:46:11,680 --> 00:46:13,440
and like all good frameworks swiss is

1366
00:46:13,440 --> 00:46:15,839
made to be customizable for your

1367
00:46:15,839 --> 00:46:17,040
environment

1368
00:46:17,040 --> 00:46:18,960
it's not meant to

1369
00:46:18,960 --> 00:46:20,720
be a you have to take the whole package

1370
00:46:20,720 --> 00:46:22,800
as is process

1371
00:46:22,800 --> 00:46:24,079
customize

1372
00:46:24,079 --> 00:46:26,000
the principles that are laid out in each

1373
00:46:26,000 --> 00:46:28,720
phase and apply them into your

1374
00:46:28,720 --> 00:46:30,960
application development process in a way

1375
00:46:30,960 --> 00:46:33,040
that makes sense

1376
00:46:33,040 --> 00:46:34,720
now i appreciate you guys taking time to

1377
00:46:34,720 --> 00:46:36,240
listen to me today for this talk about

1378
00:46:36,240 --> 00:46:38,560
swissel you guys can reach me out at

1379
00:46:38,560 --> 00:46:40,960
appsec guy underscore mike on twitter if

1380
00:46:40,960 --> 00:46:42,960
you have any questions or follow-ups if

1381
00:46:42,960 --> 00:46:44,960
you just want to connect

1382
00:46:44,960 --> 00:46:48,839
i appreciate it thank you

