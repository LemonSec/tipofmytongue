1
00:00:00,160 --> 00:00:02,240
hi thanks for for coming to my ted talk

2
00:00:02,240 --> 00:00:04,640
about powershell um my name is david

3
00:00:04,640 --> 00:00:06,879
schloss i'm the offensive security lead

4
00:00:06,879 --> 00:00:09,040
on cyber and risk what that basically

5
00:00:09,040 --> 00:00:10,800
means is i'm uh

6
00:00:10,800 --> 00:00:12,400
i lead all of our red teaming pen

7
00:00:12,400 --> 00:00:15,040
testing anything that kind of emulates a

8
00:00:15,040 --> 00:00:17,039
criminal activity or

9
00:00:17,039 --> 00:00:20,400
things like that i'm running that um

10
00:00:20,400 --> 00:00:22,000
real quick just because the obligatory

11
00:00:22,000 --> 00:00:23,519
we're a small company i like to throw us

12
00:00:23,519 --> 00:00:24,960
out real quick

13
00:00:24,960 --> 00:00:28,800
and we do offensive security testing

14
00:00:28,800 --> 00:00:30,080
defensive security testing and

15
00:00:30,080 --> 00:00:32,800
compliance it's a it's really fun i like

16
00:00:32,800 --> 00:00:34,079
it i like to shout out the company

17
00:00:34,079 --> 00:00:35,520
whenever i can

18
00:00:35,520 --> 00:00:37,440
so let's actually just jump right into

19
00:00:37,440 --> 00:00:40,960
it and talk about today's goal

20
00:00:40,960 --> 00:00:42,800
today i want to talk to you guys about

21
00:00:42,800 --> 00:00:44,399
powershell and i want you guys to leave

22
00:00:44,399 --> 00:00:47,280
with a healthy paranoia around it

23
00:00:47,280 --> 00:00:49,600
uh the way we're going to do that is

24
00:00:49,600 --> 00:00:50,640
we're going to first talk about the

25
00:00:50,640 --> 00:00:52,320
allure of powershell you know why it

26
00:00:52,320 --> 00:00:54,239
admins love it why attackers love it

27
00:00:54,239 --> 00:00:55,520
we're going to talk a bit about

28
00:00:55,520 --> 00:00:58,000
bypassing organic controls like amsi

29
00:00:58,000 --> 00:01:00,960
whitelist the science script execution

30
00:01:00,960 --> 00:01:02,079
and then we're going to wrap it all up

31
00:01:02,079 --> 00:01:04,080
with some malware deployment and how you

32
00:01:04,080 --> 00:01:06,320
can protect yourself

33
00:01:06,320 --> 00:01:07,840
so

34
00:01:07,840 --> 00:01:10,080
why do it admins love it

35
00:01:10,080 --> 00:01:12,560
well it's everywhere windows linux mac i

36
00:01:12,560 --> 00:01:14,240
have it on my linux machine you don't

37
00:01:14,240 --> 00:01:17,840
need to learn um bash you can just use

38
00:01:17,840 --> 00:01:19,520
powershell on linux to communicate with

39
00:01:19,520 --> 00:01:22,000
windows it's it's great

40
00:01:22,000 --> 00:01:24,240
it's easy to use and learn uh it's one

41
00:01:24,240 --> 00:01:26,799
of the first applications that i learned

42
00:01:26,799 --> 00:01:28,080
even before

43
00:01:28,080 --> 00:01:29,680
python

44
00:01:29,680 --> 00:01:31,439
and it enables more functions around

45
00:01:31,439 --> 00:01:34,320
remote administration so you can take

46
00:01:34,320 --> 00:01:35,759
your hour-long

47
00:01:35,759 --> 00:01:38,000
really resource intensive task and turn

48
00:01:38,000 --> 00:01:39,520
it into five minutes

49
00:01:39,520 --> 00:01:41,600
it's great

50
00:01:41,600 --> 00:01:42,399
so

51
00:01:42,399 --> 00:01:44,399
why do attackers love it

52
00:01:44,399 --> 00:01:46,159
well it's everywhere it's on windows

53
00:01:46,159 --> 00:01:48,799
linux mac i have it on my cali machine i

54
00:01:48,799 --> 00:01:50,479
don't need to use impact it to

55
00:01:50,479 --> 00:01:53,200
communicate to windows from linux

56
00:01:53,200 --> 00:01:54,479
it's awesome

57
00:01:54,479 --> 00:01:57,360
it's uh easy to use and learn there is a

58
00:01:57,360 --> 00:01:59,680
lot of resources out there for learning

59
00:01:59,680 --> 00:02:02,000
offensive powershell techniques

60
00:02:02,000 --> 00:02:04,560
and they're written pretty well

61
00:02:04,560 --> 00:02:06,320
and it enables more functions around

62
00:02:06,320 --> 00:02:08,959
remote administration so it makes

63
00:02:08,959 --> 00:02:11,520
lateral uh lateral movement techniques

64
00:02:11,520 --> 00:02:14,319
relatively easy to use

65
00:02:14,319 --> 00:02:16,000
so you can see that the attackers really

66
00:02:16,000 --> 00:02:17,360
have the advantage here i think what a

67
00:02:17,360 --> 00:02:20,160
lot of people forget is when you have

68
00:02:20,160 --> 00:02:22,800
access to a terminal scripts can be run

69
00:02:22,800 --> 00:02:24,959
entirely from memory you can just copy

70
00:02:24,959 --> 00:02:26,480
and paste there's actually no reason to

71
00:02:26,480 --> 00:02:27,920
have

72
00:02:27,920 --> 00:02:30,560
a script on disk which makes this really

73
00:02:30,560 --> 00:02:32,800
difficult for like signature based avs

74
00:02:32,800 --> 00:02:35,440
uh to detect this activity

75
00:02:35,440 --> 00:02:37,760
it's scriptable.net

76
00:02:37,760 --> 00:02:39,040
uh

77
00:02:39,040 --> 00:02:40,319
we'll get more into that a little bit

78
00:02:40,319 --> 00:02:42,800
later but it's the main reason why we

79
00:02:42,800 --> 00:02:45,040
started seeing a shift from powershell

80
00:02:45,040 --> 00:02:46,720
to c sharp

81
00:02:46,720 --> 00:02:47,680
and

82
00:02:47,680 --> 00:02:49,040
the last reason why attackers really

83
00:02:49,040 --> 00:02:50,720
have the advantage here is organic

84
00:02:50,720 --> 00:02:52,400
security functions are constantly

85
00:02:52,400 --> 00:02:53,920
getting defeated

86
00:02:53,920 --> 00:02:57,040
people love to just find

87
00:02:57,040 --> 00:02:59,280
ways to defeat microsoft and then they

88
00:02:59,280 --> 00:03:00,640
brag about on the internet and because

89
00:03:00,640 --> 00:03:02,239
they brag about it on the internet then

90
00:03:02,239 --> 00:03:02,840
it

91
00:03:02,840 --> 00:03:04,879
becomes uh de facto knowledge for

92
00:03:04,879 --> 00:03:07,440
attackers

93
00:03:07,599 --> 00:03:09,440
so

94
00:03:09,440 --> 00:03:10,800
let's get into the meat and potatoes of

95
00:03:10,800 --> 00:03:12,640
why we're here the first part we're

96
00:03:12,640 --> 00:03:14,080
going to talk about is this organic

97
00:03:14,080 --> 00:03:16,480
control or bypassing organic control and

98
00:03:16,480 --> 00:03:17,760
the first organic control we're going to

99
00:03:17,760 --> 00:03:20,640
talk about is script signed execution

100
00:03:20,640 --> 00:03:22,400
for those who don't know this is a

101
00:03:22,400 --> 00:03:24,080
control in

102
00:03:24,080 --> 00:03:27,120
powershell that will stop a unsigned or

103
00:03:27,120 --> 00:03:29,920
untrusted script from running

104
00:03:29,920 --> 00:03:32,799
what most admins would realize or

105
00:03:32,799 --> 00:03:34,640
recognize is

106
00:03:34,640 --> 00:03:35,840
this uh

107
00:03:35,840 --> 00:03:37,760
when we try to do execution set

108
00:03:37,760 --> 00:03:39,920
execution policy here to bypass we

109
00:03:39,920 --> 00:03:42,879
actually have no permissions to do that

110
00:03:42,879 --> 00:03:44,000
uh

111
00:03:44,000 --> 00:03:45,360
but this is relatively easy to get

112
00:03:45,360 --> 00:03:46,400
around

113
00:03:46,400 --> 00:03:48,959
and it's the reason why this is not a

114
00:03:48,959 --> 00:03:50,560
a security control

115
00:03:50,560 --> 00:03:53,519
so really when you want to go and set an

116
00:03:53,519 --> 00:03:55,920
execution policy to say bypass which

117
00:03:55,920 --> 00:03:57,680
will make it so you don't need to have

118
00:03:57,680 --> 00:03:59,439
any sort of science script you can

119
00:03:59,439 --> 00:04:00,959
actually just execute powershell with

120
00:04:00,959 --> 00:04:04,400
tech ep or tech execution policy bypass

121
00:04:04,400 --> 00:04:06,959
and it only sets it for that instance

122
00:04:06,959 --> 00:04:09,040
um this is the reason why this is not a

123
00:04:09,040 --> 00:04:11,120
security control microsoft has said it's

124
00:04:11,120 --> 00:04:12,799
not a security control but only in their

125
00:04:12,799 --> 00:04:14,319
forms the way they write this out in

126
00:04:14,319 --> 00:04:16,000
their documentation

127
00:04:16,000 --> 00:04:18,399
uh they make it seem like it is but it

128
00:04:18,399 --> 00:04:20,478
is relatively easy to bypass the reason

129
00:04:20,478 --> 00:04:22,880
why this works in this way is when you

130
00:04:22,880 --> 00:04:25,600
run the command set execution policy

131
00:04:25,600 --> 00:04:27,600
you're actually trying to change a

132
00:04:27,600 --> 00:04:30,960
registry key in the hkey local machine

133
00:04:30,960 --> 00:04:32,560
registry hive which requires admin

134
00:04:32,560 --> 00:04:34,000
privileges

135
00:04:34,000 --> 00:04:35,520
but the

136
00:04:35,520 --> 00:04:37,759
tac ep or attack execution policy flag

137
00:04:37,759 --> 00:04:39,759
is allowed to be run on

138
00:04:39,759 --> 00:04:41,919
execution of powershell and it'll only

139
00:04:41,919 --> 00:04:43,680
set it for that instance instance so

140
00:04:43,680 --> 00:04:44,960
you're not changing it for the entire

141
00:04:44,960 --> 00:04:46,960
machine

142
00:04:46,960 --> 00:04:48,800
um i wanted to throw this out first

143
00:04:48,800 --> 00:04:50,000
because

144
00:04:50,000 --> 00:04:52,240
i have had clients in the past who told

145
00:04:52,240 --> 00:04:53,840
me that there's no way i could run a

146
00:04:53,840 --> 00:04:57,280
script on their on their workstations

147
00:04:57,280 --> 00:04:59,199
because they had this set execution

148
00:04:59,199 --> 00:05:01,440
policy set to restricted so now that you

149
00:05:01,440 --> 00:05:04,080
know that uh don't treat it as such

150
00:05:04,080 --> 00:05:05,919
so let's get into the real mean potatoes

151
00:05:05,919 --> 00:05:07,919
of bypassing we're going to talk about

152
00:05:07,919 --> 00:05:10,800
bypassing amz for those who don't know

153
00:05:10,800 --> 00:05:13,280
what amsi is amzi is the anti-malware

154
00:05:13,280 --> 00:05:15,120
scan interface that microsoft has pushed

155
00:05:15,120 --> 00:05:16,880
out it's an interface that allows

156
00:05:16,880 --> 00:05:19,440
security products to hook into

157
00:05:19,440 --> 00:05:21,840
different applications like the windows

158
00:05:21,840 --> 00:05:25,120
script host or vbscripts office macros

159
00:05:25,120 --> 00:05:27,120
powershell you name it

160
00:05:27,120 --> 00:05:30,240
in the context of powershell

161
00:05:30,240 --> 00:05:32,560
it blocks known malicious scripts and

162
00:05:32,560 --> 00:05:36,080
functions so the most common one that

163
00:05:36,080 --> 00:05:37,680
defenders and attackers would see is

164
00:05:37,680 --> 00:05:40,880
this uh iex or extended command

165
00:05:40,880 --> 00:05:42,320
download string

166
00:05:42,320 --> 00:05:44,960
um this is this is quite

167
00:05:44,960 --> 00:05:46,960
used a lot uh

168
00:05:46,960 --> 00:05:48,880
and mz will go out and actually just

169
00:05:48,880 --> 00:05:51,360
block it it sees it as only being a

170
00:05:51,360 --> 00:05:53,039
malicious script so you can't run that

171
00:05:53,039 --> 00:05:54,960
while empty is running additional to

172
00:05:54,960 --> 00:05:57,280
that it'll look for known bad strings

173
00:05:57,280 --> 00:05:59,520
like mimikats bloodhound power view you

174
00:05:59,520 --> 00:06:01,600
name it it'll go out and stop the

175
00:06:01,600 --> 00:06:04,560
execution of those scripts

176
00:06:04,560 --> 00:06:06,160
some antivirus applications that run

177
00:06:06,160 --> 00:06:08,000
this right now are like mcafee sofas

178
00:06:08,000 --> 00:06:10,400
kaspersky windows defender duh

179
00:06:10,400 --> 00:06:12,160
uh and there's probably more i just

180
00:06:12,160 --> 00:06:14,240
really didn't dig too deep into it is

181
00:06:14,240 --> 00:06:16,080
microsoft doesn't have something that's

182
00:06:16,080 --> 00:06:18,160
readily available from what i saw that

183
00:06:18,160 --> 00:06:20,639
lists out all the uh

184
00:06:20,639 --> 00:06:23,840
the security products that use it

185
00:06:23,840 --> 00:06:25,680
so now that we know about know about

186
00:06:25,680 --> 00:06:27,919
amsi how do we go about defeating it

187
00:06:27,919 --> 00:06:30,319
well it's pretty simple uh powershell

188
00:06:30,319 --> 00:06:31,680
2.0

189
00:06:31,680 --> 00:06:35,840
is usually installed by default and uh

190
00:06:35,840 --> 00:06:37,680
it doesn't have amzi

191
00:06:37,680 --> 00:06:39,039
so because it doesn't have amsi it

192
00:06:39,039 --> 00:06:40,639
doesn't have automatic script lock

193
00:06:40,639 --> 00:06:42,960
logging on suspicious scripts

194
00:06:42,960 --> 00:06:45,280
which uh then thus

195
00:06:45,280 --> 00:06:46,720
it defeats two

196
00:06:46,720 --> 00:06:48,400
two different uh

197
00:06:48,400 --> 00:06:50,880
security functions right there right

198
00:06:50,880 --> 00:06:54,000
so to caveat all that uh powershell 2.0

199
00:06:54,000 --> 00:06:57,280
does require.net version 2.0

200
00:06:57,280 --> 00:06:59,919
so that is not installed by default

201
00:06:59,919 --> 00:07:00,800
but

202
00:07:00,800 --> 00:07:02,479
if you're

203
00:07:02,479 --> 00:07:04,080
if you're running old applications that

204
00:07:04,080 --> 00:07:06,400
require net 3.5

205
00:07:06,400 --> 00:07:09,280
then 2.0 is going to be there and you

206
00:07:09,280 --> 00:07:11,840
are vulnerable to this downgrade attack

207
00:07:11,840 --> 00:07:13,680
the reason why when you look at like

208
00:07:13,680 --> 00:07:16,240
powerview.ps1 it tries to execute

209
00:07:16,240 --> 00:07:18,800
powershell.2.0

210
00:07:18,800 --> 00:07:23,599
so to run this attack really really easy

211
00:07:23,599 --> 00:07:25,759
in the screenshot uh

212
00:07:25,759 --> 00:07:27,039
we can see the first thing i'm printing

213
00:07:27,039 --> 00:07:28,800
out here is the the ps version table the

214
00:07:28,800 --> 00:07:30,160
reason i'm doing that is so you can see

215
00:07:30,160 --> 00:07:32,479
it is running 5.1 which is the newer

216
00:07:32,479 --> 00:07:34,000
version of powershell

217
00:07:34,000 --> 00:07:36,720
and i'm trying to echo amsi utils the

218
00:07:36,720 --> 00:07:38,479
reason why i'm not going to amaze the

219
00:07:38,479 --> 00:07:41,360
utils here is amze sees

220
00:07:41,360 --> 00:07:44,240
that string as being malicious as you

221
00:07:44,240 --> 00:07:45,919
wouldn't normally call it

222
00:07:45,919 --> 00:07:47,360
so it just blocks you from being able to

223
00:07:47,360 --> 00:07:49,840
call it it's a it's a test function

224
00:07:49,840 --> 00:07:52,080
but by executing powershell.exe with tac

225
00:07:52,080 --> 00:07:54,639
version 2 which is it's that simple you

226
00:07:54,639 --> 00:07:56,840
can now echo am the

227
00:07:56,840 --> 00:07:59,520
utils so these these

228
00:07:59,520 --> 00:08:02,080
uh really easy way to to get around

229
00:08:02,080 --> 00:08:03,360
right

230
00:08:03,360 --> 00:08:04,400
um

231
00:08:04,400 --> 00:08:06,400
but what happens if you don't have

232
00:08:06,400 --> 00:08:09,120
2.0 net 2.0 how else can you set amzi

233
00:08:09,120 --> 00:08:11,360
into a failed state

234
00:08:11,360 --> 00:08:14,160
uh well quite simply when you do try to

235
00:08:14,160 --> 00:08:16,639
defeat amzee uh all you're trying to do

236
00:08:16,639 --> 00:08:19,360
is set the amsie and it failed to true

237
00:08:19,360 --> 00:08:21,039
the reason why we're trying to do this

238
00:08:21,039 --> 00:08:23,120
is amzie doesn't have a recovery

239
00:08:23,120 --> 00:08:24,479
function

240
00:08:24,479 --> 00:08:25,280
so

241
00:08:25,280 --> 00:08:27,520
if you crash it or set that amazing

242
00:08:27,520 --> 00:08:29,919
failed

243
00:08:30,319 --> 00:08:32,640
value to true it won't restart and it

244
00:08:32,640 --> 00:08:33,440
won't

245
00:08:33,440 --> 00:08:35,679
won't read anymore which is great for

246
00:08:35,679 --> 00:08:38,719
that for that instance

247
00:08:38,719 --> 00:08:41,120
so the most common method that

248
00:08:41,120 --> 00:08:43,519
has been used to defeat amsi was uh the

249
00:08:43,519 --> 00:08:45,760
genius matt graber came up with this

250
00:08:45,760 --> 00:08:48,640
reflective method to call the amsi utils

251
00:08:48,640 --> 00:08:50,080
function and then get the field empty

252
00:08:50,080 --> 00:08:51,760
and it failed and sent it to true this

253
00:08:51,760 --> 00:08:52,839
was done back in

254
00:08:52,839 --> 00:08:55,440
2016. um and since it's been quite a

255
00:08:55,440 --> 00:08:56,880
long time you

256
00:08:56,880 --> 00:08:58,080
you know it's it's not going to work

257
00:08:58,080 --> 00:08:59,360
anymore

258
00:08:59,360 --> 00:09:02,320
but up until about last year this bottom

259
00:09:02,320 --> 00:09:04,160
command which is just concatenation of

260
00:09:04,160 --> 00:09:06,839
amz utils and amsi and it failed did

261
00:09:06,839 --> 00:09:08,560
work

262
00:09:08,560 --> 00:09:10,640
and and as you can see though now it

263
00:09:10,640 --> 00:09:11,680
doesn't

264
00:09:11,680 --> 00:09:12,480
so

265
00:09:12,480 --> 00:09:14,240
uh we did a little bit of digging to see

266
00:09:14,240 --> 00:09:16,240
what was going on and i'm gonna show you

267
00:09:16,240 --> 00:09:18,560
exactly like how simple it was to to get

268
00:09:18,560 --> 00:09:19,760
around this

269
00:09:19,760 --> 00:09:21,279
uh the first thing that we needed to do

270
00:09:21,279 --> 00:09:23,839
was figure out does concatenation no

271
00:09:23,839 --> 00:09:25,600
longer work

272
00:09:25,600 --> 00:09:27,440
um well

273
00:09:27,440 --> 00:09:29,360
simply put it no concatenation still

274
00:09:29,360 --> 00:09:31,360
works you can still defeat amsy that way

275
00:09:31,360 --> 00:09:32,640
in the first screenshot i'm just showing

276
00:09:32,640 --> 00:09:35,040
you that mz is is running it's still

277
00:09:35,040 --> 00:09:38,000
alerting on ams utils as being malicious

278
00:09:38,000 --> 00:09:40,720
and when we do our simple concatenation

279
00:09:40,720 --> 00:09:43,200
of amc utils it does print so where is

280
00:09:43,200 --> 00:09:44,720
it starting to get caught

281
00:09:44,720 --> 00:09:46,480
do we need to go one step further let's

282
00:09:46,480 --> 00:09:48,480
see if we can get the field

283
00:09:48,480 --> 00:09:51,920
so this bottom uh screenshot

284
00:09:51,920 --> 00:09:55,120
we're doing concatenation on the

285
00:09:55,120 --> 00:09:56,880
function and then we are finding the

286
00:09:56,880 --> 00:09:57,920
field

287
00:09:57,920 --> 00:09:59,760
for amsi and it failed and we're

288
00:09:59,760 --> 00:10:00,959
actually able to print all the

289
00:10:00,959 --> 00:10:02,240
information

290
00:10:02,240 --> 00:10:03,600
so

291
00:10:03,600 --> 00:10:05,360
still works

292
00:10:05,360 --> 00:10:07,279
and you know

293
00:10:07,279 --> 00:10:10,240
in 2021 which is great

294
00:10:10,240 --> 00:10:11,519
uh

295
00:10:11,519 --> 00:10:13,519
what really ended up happening and shout

296
00:10:13,519 --> 00:10:16,320
out to the uh the secure this page

297
00:10:16,320 --> 00:10:19,120
um you can find their link at the github

298
00:10:19,120 --> 00:10:20,320
link below

299
00:10:20,320 --> 00:10:21,680
has a great write-up on this but it

300
00:10:21,680 --> 00:10:23,600
turns out that amsi's doing a little bit

301
00:10:23,600 --> 00:10:26,720
of of some regex so when you go git type

302
00:10:26,720 --> 00:10:28,959
and get field and then try to set value

303
00:10:28,959 --> 00:10:30,480
the regex code then goes all right let's

304
00:10:30,480 --> 00:10:32,000
concatenate the information and see if

305
00:10:32,000 --> 00:10:33,120
you're

306
00:10:33,120 --> 00:10:34,320
if you are

307
00:10:34,320 --> 00:10:37,200
typing in hamsa utils

308
00:10:37,200 --> 00:10:39,040
so it captures all that which is which

309
00:10:39,040 --> 00:10:42,079
is good um but rule number one when

310
00:10:42,079 --> 00:10:44,399
defeating anything in powershell is when

311
00:10:44,399 --> 00:10:46,560
in doubt and code it out at least that's

312
00:10:46,560 --> 00:10:51,360
my rule um so just avoid base64 but

313
00:10:51,360 --> 00:10:53,519
because that's organic to powershell but

314
00:10:53,519 --> 00:10:54,959
you can use hex

315
00:10:54,959 --> 00:10:56,959
so taking the concatenated string like

316
00:10:56,959 --> 00:10:59,440
amzee utils and formatting to hex we can

317
00:10:59,440 --> 00:11:00,959
see that

318
00:11:00,959 --> 00:11:02,320
our little hex code does print out

319
00:11:02,320 --> 00:11:05,040
amazing utils without being blocked

320
00:11:05,040 --> 00:11:07,519
so now that we have our hex into text we

321
00:11:07,519 --> 00:11:09,920
got to turn our text back into hex which

322
00:11:09,920 --> 00:11:12,720
gives you a nice little dr seuss rhyme

323
00:11:12,720 --> 00:11:16,560
but uh a relatively simple one-line

324
00:11:16,560 --> 00:11:18,720
code which is just splitting up each hex

325
00:11:18,720 --> 00:11:21,120
and then converting each value back into

326
00:11:21,120 --> 00:11:21,920
uh

327
00:11:21,920 --> 00:11:25,600
a character we can print out anti-utils

328
00:11:25,600 --> 00:11:28,399
very very simple kind of bypass

329
00:11:28,399 --> 00:11:30,320
so using the still this matte graper

330
00:11:30,320 --> 00:11:31,839
method we can

331
00:11:31,839 --> 00:11:34,880
uh execute just using hex

332
00:11:34,880 --> 00:11:36,320
so what i'm showing here is i'm typing

333
00:11:36,320 --> 00:11:39,040
in amsi utils show you amz is

334
00:11:39,040 --> 00:11:43,040
functioning we copy in the now hex

335
00:11:43,040 --> 00:11:44,560
encode

336
00:11:44,560 --> 00:11:47,200
hit enter and type mzutils again showing

337
00:11:47,200 --> 00:11:50,079
that we have bypassed it so a

338
00:11:50,079 --> 00:11:52,320
a bypass method developed in 2016 with

339
00:11:52,320 --> 00:11:54,639
very minimal change

340
00:11:54,639 --> 00:11:57,600
is still viable today

341
00:11:57,600 --> 00:12:00,320
which is pretty concerning right

342
00:12:00,320 --> 00:12:01,920
there's other ways about

343
00:12:01,920 --> 00:12:04,800
defeating amzi though um

344
00:12:04,800 --> 00:12:06,560
there we go

345
00:12:06,560 --> 00:12:08,720
the there's a lot of text on the screen

346
00:12:08,720 --> 00:12:10,240
and you don't need to copy it or

347
00:12:10,240 --> 00:12:12,399
anything because it is just rosta mouse

348
00:12:12,399 --> 00:12:15,440
direct method which is patching the dll

349
00:12:15,440 --> 00:12:16,720
i think this is really cool and i wanted

350
00:12:16,720 --> 00:12:18,639
to point it out because you're able to

351
00:12:18,639 --> 00:12:22,480
patch loaded dlls in in powershell using

352
00:12:22,480 --> 00:12:25,360
like c sharp code this is just c sharp

353
00:12:25,360 --> 00:12:27,839
being ran in powershell and it's loading

354
00:12:27,839 --> 00:12:30,639
up the mz dll finding the first couple

355
00:12:30,639 --> 00:12:32,639
bytes of amz scan buffer and then

356
00:12:32,639 --> 00:12:35,040
patching out those um

357
00:12:35,040 --> 00:12:36,000
first

358
00:12:36,000 --> 00:12:39,519
couple bytes so that it fails

359
00:12:39,519 --> 00:12:40,320
uh

360
00:12:40,320 --> 00:12:41,680
what i think is really cool here and why

361
00:12:41,680 --> 00:12:43,440
i wanted to point it out it's proven a

362
00:12:43,440 --> 00:12:45,839
point that you can do a lot more than

363
00:12:45,839 --> 00:12:49,040
just editing amsi from this regard

364
00:12:49,040 --> 00:12:50,399
um

365
00:12:50,399 --> 00:12:52,000
if you were really sneaky you could

366
00:12:52,000 --> 00:12:54,720
probably reload hooked dlls

367
00:12:54,720 --> 00:12:57,279
and to get around some some common

368
00:12:57,279 --> 00:13:00,800
hooked methods from edrs

369
00:13:00,800 --> 00:13:03,279
but what that looks like is very similar

370
00:13:03,279 --> 00:13:04,320
the first thing i'm going to do here is

371
00:13:04,320 --> 00:13:06,000
type amsy just show you again that it is

372
00:13:06,000 --> 00:13:07,760
running

373
00:13:07,760 --> 00:13:10,320
and now copying

374
00:13:10,320 --> 00:13:12,399
roster mouse no editing took place in

375
00:13:12,399 --> 00:13:13,200
this

376
00:13:13,200 --> 00:13:15,360
uh just copy and paste

377
00:13:15,360 --> 00:13:18,399
hit enter and when we rerun amzee utils

378
00:13:18,399 --> 00:13:19,839
it's going to come back and show that it

379
00:13:19,839 --> 00:13:21,440
is defeated

380
00:13:21,440 --> 00:13:23,279
but this isn't getting caught by amsi at

381
00:13:23,279 --> 00:13:25,360
all and this has been out in public for

382
00:13:25,360 --> 00:13:27,600
quite a long time the only thing i would

383
00:13:27,600 --> 00:13:31,360
uh caveat on this is it is using a

384
00:13:31,360 --> 00:13:33,440
function called add type

385
00:13:33,440 --> 00:13:36,480
this creates a temporary dll on disk and

386
00:13:36,480 --> 00:13:38,880
can be read by a

387
00:13:38,880 --> 00:13:40,880
antivirus system

388
00:13:40,880 --> 00:13:42,480
so it is one way of getting caught but

389
00:13:42,480 --> 00:13:44,240
you can use matt graver's reflective dll

390
00:13:44,240 --> 00:13:48,720
loading to get around that

391
00:13:48,720 --> 00:13:49,680
so

392
00:13:49,680 --> 00:13:51,760
what happens when you can't run code to

393
00:13:51,760 --> 00:13:53,279
bypass amze right like there's

394
00:13:53,279 --> 00:13:55,360
restricted mode or constrained language

395
00:13:55,360 --> 00:13:57,519
mode something in that sense well the

396
00:13:57,519 --> 00:13:59,199
really cool thing about powershell is

397
00:13:59,199 --> 00:14:01,680
it's just a bunch of dlls loaded on top

398
00:14:01,680 --> 00:14:03,600
of the command prompt and somebody was

399
00:14:03,600 --> 00:14:05,839
like oh yeah this is like a power shell

400
00:14:05,839 --> 00:14:07,040
bro

401
00:14:07,040 --> 00:14:09,040
um so you can just use living off the

402
00:14:09,040 --> 00:14:11,040
lan binaries to

403
00:14:11,040 --> 00:14:13,279
create your own powershell

404
00:14:13,279 --> 00:14:14,800
we won't get too deep into the code here

405
00:14:14,800 --> 00:14:16,880
is now we start to venture away from it

406
00:14:16,880 --> 00:14:18,720
but it is something to be aware of as it

407
00:14:18,720 --> 00:14:20,160
does concern

408
00:14:20,160 --> 00:14:21,600
our application

409
00:14:21,600 --> 00:14:23,360
um the most common one that i've seen

410
00:14:23,360 --> 00:14:25,040
and the one i've used for years is this

411
00:14:25,040 --> 00:14:27,360
ms build shell

412
00:14:27,360 --> 00:14:30,240
which is a c sharp project file that you

413
00:14:30,240 --> 00:14:33,279
can just build using the msbuild.exe

414
00:14:33,279 --> 00:14:34,240
so

415
00:14:34,240 --> 00:14:35,360
what i'm showing here is you have a

416
00:14:35,360 --> 00:14:36,800
command prompt i'm going to type in ps

417
00:14:36,800 --> 00:14:38,399
version table

418
00:14:38,399 --> 00:14:39,519
that's to show you that there is no

419
00:14:39,519 --> 00:14:42,880
powershell loaded in here and

420
00:14:42,880 --> 00:14:43,680
i

421
00:14:43,680 --> 00:14:46,560
call the ms build.exe binary which is

422
00:14:46,560 --> 00:14:48,480
included by default with the.net

423
00:14:48,480 --> 00:14:50,320
framework version 4.0

424
00:14:50,320 --> 00:14:52,800
and all we're doing is building a our cs

425
00:14:52,800 --> 00:14:54,880
project file which is named ms build

426
00:14:54,880 --> 00:14:55,760
shell

427
00:14:55,760 --> 00:14:57,199
and as you'll see it'll come back with

428
00:14:57,199 --> 00:14:58,639
an error that error is just the matte

429
00:14:58,639 --> 00:15:00,959
graper amsi dll

430
00:15:00,959 --> 00:15:02,240
there's no editing there but you can

431
00:15:02,240 --> 00:15:04,399
edit it

432
00:15:04,399 --> 00:15:06,320
and now we have powershell

433
00:15:06,320 --> 00:15:07,199
right

434
00:15:07,199 --> 00:15:08,320
and

435
00:15:08,320 --> 00:15:10,800
powershell 5.1

436
00:15:10,800 --> 00:15:12,399
i exited out show you that we are

437
00:15:12,399 --> 00:15:14,480
returning back to a command prompt the

438
00:15:14,480 --> 00:15:16,000
only difference between this and a

439
00:15:16,000 --> 00:15:17,440
normal powershell prompt is that you

440
00:15:17,440 --> 00:15:20,160
don't have tab completion but if you

441
00:15:20,160 --> 00:15:22,160
don't have access to be able to execute

442
00:15:22,160 --> 00:15:23,600
powershell because constraint language

443
00:15:23,600 --> 00:15:25,120
mode is is there you can just load the

444
00:15:25,120 --> 00:15:27,920
dlls and it'll work the same way

445
00:15:27,920 --> 00:15:29,680
some other ways of doing this is like

446
00:15:29,680 --> 00:15:32,000
the powershell dll project which uh you

447
00:15:32,000 --> 00:15:33,759
can use multiple different

448
00:15:33,759 --> 00:15:36,079
living off the land binaries to to call

449
00:15:36,079 --> 00:15:37,440
powershell

450
00:15:37,440 --> 00:15:38,880
and

451
00:15:38,880 --> 00:15:40,720
personally my favorite which is the sync

452
00:15:40,720 --> 00:15:41,519
app

453
00:15:41,519 --> 00:15:43,360
publishing server

454
00:15:43,360 --> 00:15:45,199
you can use netcat to actually capture a

455
00:15:45,199 --> 00:15:47,839
callback from that and that would be a

456
00:15:47,839 --> 00:15:49,920
a powershell prompt

457
00:15:49,920 --> 00:15:51,199
shout out to i read team for some of

458
00:15:51,199 --> 00:15:52,639
these great red apps i would definitely

459
00:15:52,639 --> 00:15:54,079
check them out if you guys want to learn

460
00:15:54,079 --> 00:15:55,839
more about uh

461
00:15:55,839 --> 00:15:59,199
app locker restricted language bypassing

462
00:15:59,199 --> 00:16:00,639
so why do we talk about all that why do

463
00:16:00,639 --> 00:16:02,720
we talk about amz for like 10 minutes

464
00:16:02,720 --> 00:16:03,600
here

465
00:16:03,600 --> 00:16:05,120
well it's all getting down to malware

466
00:16:05,120 --> 00:16:07,120
deployment uh you know the bread and

467
00:16:07,120 --> 00:16:09,759
butter of of any attacker

468
00:16:09,759 --> 00:16:11,360
um

469
00:16:11,360 --> 00:16:12,959
for for malware deployment within

470
00:16:12,959 --> 00:16:14,560
powershell all you need to do is really

471
00:16:14,560 --> 00:16:16,880
take your c sharp code and turn it into

472
00:16:16,880 --> 00:16:19,360
powershell and vice versa uh that's

473
00:16:19,360 --> 00:16:20,880
exactly what we saw when people started

474
00:16:20,880 --> 00:16:22,639
moving away from powershell into c sharp

475
00:16:22,639 --> 00:16:23,759
they didn't really have to reprogram

476
00:16:23,759 --> 00:16:25,680
anything

477
00:16:25,680 --> 00:16:27,759
so execute malware we only only need a

478
00:16:27,759 --> 00:16:30,240
few things uh we need virtual alec and

479
00:16:30,240 --> 00:16:32,639
create thread from kernel 32

480
00:16:32,639 --> 00:16:34,399
and we need the marshall service to be

481
00:16:34,399 --> 00:16:36,480
able to copy the shell code into the

482
00:16:36,480 --> 00:16:38,160
allocated memory

483
00:16:38,160 --> 00:16:39,360
and then the next thing we need to be

484
00:16:39,360 --> 00:16:41,920
able to consider here is is avoiding avs

485
00:16:41,920 --> 00:16:43,600
despite not

486
00:16:43,600 --> 00:16:47,600
needing to defeat amsi again

487
00:16:47,600 --> 00:16:50,480
when you do create a new thread the

488
00:16:50,480 --> 00:16:52,079
antivirus does have the capability to

489
00:16:52,079 --> 00:16:54,240
read that so you need to still do some

490
00:16:54,240 --> 00:16:56,160
shell code obfuscation reflective method

491
00:16:56,160 --> 00:16:59,439
of calling dlls things like that

492
00:17:00,000 --> 00:17:01,519
so

493
00:17:01,519 --> 00:17:04,079
this uh this becomes quite easy to do uh

494
00:17:04,079 --> 00:17:07,039
as you can see this first line here is

495
00:17:07,039 --> 00:17:08,240
importing

496
00:17:08,240 --> 00:17:09,039
the

497
00:17:09,039 --> 00:17:11,839
virtual alec from kernel 32

498
00:17:11,839 --> 00:17:12,640
and

499
00:17:12,640 --> 00:17:14,720
that's just going into c sharp

500
00:17:14,720 --> 00:17:17,119
the one right below it that is using the

501
00:17:17,119 --> 00:17:19,280
matte graber reflective method to load

502
00:17:19,280 --> 00:17:20,720
virtual outlook

503
00:17:20,720 --> 00:17:22,079
very similar

504
00:17:22,079 --> 00:17:23,359
uh

505
00:17:23,359 --> 00:17:24,880
you know you're still setting it as an

506
00:17:24,880 --> 00:17:26,319
integer pointer and then you're calling

507
00:17:26,319 --> 00:17:29,120
a few unsigned integers

508
00:17:29,120 --> 00:17:31,679
it looks almost the same

509
00:17:31,679 --> 00:17:33,600
and the same goes for when you want to

510
00:17:33,600 --> 00:17:36,080
actually execute virtual alec the first

511
00:17:36,080 --> 00:17:37,760
one is c sharp code

512
00:17:37,760 --> 00:17:40,720
and then the next one is our

513
00:17:40,720 --> 00:17:42,000
powershell

514
00:17:42,000 --> 00:17:42,799
so

515
00:17:42,799 --> 00:17:44,720
translation becomes relatively simple

516
00:17:44,720 --> 00:17:46,240
especially if you already have something

517
00:17:46,240 --> 00:17:49,440
available in one of the languages

518
00:17:49,440 --> 00:17:51,120
so then the next piece would be how do

519
00:17:51,120 --> 00:17:53,280
we obfuscate our shell code

520
00:17:53,280 --> 00:17:55,200
well this becomes even easier in my

521
00:17:55,200 --> 00:17:57,280
opinion than c sharp as powershell reads

522
00:17:57,280 --> 00:17:59,679
bytecode as decimal instead of hex

523
00:17:59,679 --> 00:18:01,919
so zero x zero zero is still zero zero

524
00:18:01,919 --> 00:18:04,880
zero and zero x f is two five five

525
00:18:04,880 --> 00:18:06,320
so you can do something like a caesar

526
00:18:06,320 --> 00:18:08,400
cipher which is pushing the bytes the

527
00:18:08,400 --> 00:18:09,840
right or the left depending on which way

528
00:18:09,840 --> 00:18:11,039
you wanna go

529
00:18:11,039 --> 00:18:12,960
so if we do like plus five on a caesar

530
00:18:12,960 --> 00:18:15,039
cipher zero zero zero becomes zero zero

531
00:18:15,039 --> 00:18:16,160
five

532
00:18:16,160 --> 00:18:18,799
and uh two five five becomes 260 which

533
00:18:18,799 --> 00:18:20,080
is in a

534
00:18:20,080 --> 00:18:21,600
illegal operation as it's an integer

535
00:18:21,600 --> 00:18:23,679
overflow so how can we fix that pretty

536
00:18:23,679 --> 00:18:26,960
simply we use modulus and powershell has

537
00:18:26,960 --> 00:18:28,880
this nice little modulus operator which

538
00:18:28,880 --> 00:18:31,679
is the percent sign so now we can do 256

539
00:18:31,679 --> 00:18:35,840
minus or plus our offset modulus of 256.

540
00:18:35,840 --> 00:18:38,320
and if our offset is five zero zero zero

541
00:18:38,320 --> 00:18:40,400
still becomes five

542
00:18:40,400 --> 00:18:42,799
and two 255 becomes

543
00:18:42,799 --> 00:18:44,400
zero zero four

544
00:18:44,400 --> 00:18:46,160
so we've solved that

545
00:18:46,160 --> 00:18:47,840
uh what that

546
00:18:47,840 --> 00:18:49,200
all looks like

547
00:18:49,200 --> 00:18:51,840
is is this um

548
00:18:51,840 --> 00:18:54,640
we're going to run some interpreter code

549
00:18:54,640 --> 00:18:56,640
from our powershell script so our

550
00:18:56,640 --> 00:18:58,799
interpreter callback is an https reverse

551
00:18:58,799 --> 00:19:01,280
callback um some things to note before

552
00:19:01,280 --> 00:19:02,160
we

553
00:19:02,160 --> 00:19:03,919
execute code the first thing is the

554
00:19:03,919 --> 00:19:07,919
powershell pid which is 11496.

555
00:19:07,919 --> 00:19:09,679
i'm going to show you that amzi is

556
00:19:09,679 --> 00:19:11,200
enabled here

557
00:19:11,200 --> 00:19:12,080
just to

558
00:19:12,080 --> 00:19:13,840
show i'm not cheating

559
00:19:13,840 --> 00:19:16,480
um and then another piece that i wanted

560
00:19:16,480 --> 00:19:18,480
to show off here is

561
00:19:18,480 --> 00:19:20,799
a different way of importing code i've

562
00:19:20,799 --> 00:19:22,400
talked a lot about just copy and paste

563
00:19:22,400 --> 00:19:24,320
into a terminal but you don't always

564
00:19:24,320 --> 00:19:25,679
need to do that

565
00:19:25,679 --> 00:19:27,600
even with amz enabled you can still use

566
00:19:27,600 --> 00:19:30,240
the net web request function

567
00:19:30,240 --> 00:19:32,559
to create a new web request and then

568
00:19:32,559 --> 00:19:34,480
download that information into a

569
00:19:34,480 --> 00:19:36,320
variable

570
00:19:36,320 --> 00:19:37,360
so that's what we're going to do here

571
00:19:37,360 --> 00:19:40,720
we're going to download b-sides.ps1 from

572
00:19:40,720 --> 00:19:42,000
our server

573
00:19:42,000 --> 00:19:43,520
it's going to load into a variable and

574
00:19:43,520 --> 00:19:44,559
then we're going to use the extended

575
00:19:44,559 --> 00:19:48,000
command to execute that variable into

576
00:19:48,000 --> 00:19:49,200
memory

577
00:19:49,200 --> 00:19:51,919
now we can call invoke b-sides give it

578
00:19:51,919 --> 00:19:55,919
our offset value of 66 and hit enter

579
00:19:55,919 --> 00:19:58,880
uh one thing to note is there is no

580
00:19:58,880 --> 00:20:01,679
alert like av alert right so

581
00:20:01,679 --> 00:20:03,600
when we go back to cali we can see that

582
00:20:03,600 --> 00:20:05,679
we do have a session that is running

583
00:20:05,679 --> 00:20:07,520
we do our get uid we can see our low

584
00:20:07,520 --> 00:20:10,159
privileged user and our pid is 11496

585
00:20:10,159 --> 00:20:12,960
which is that powershell interface

586
00:20:12,960 --> 00:20:15,039
so we are now running meterpreter within

587
00:20:15,039 --> 00:20:18,080
there without being caught

588
00:20:19,360 --> 00:20:20,960
so

589
00:20:20,960 --> 00:20:22,640
now that you may be a little paranoid

590
00:20:22,640 --> 00:20:23,679
and you've seen all this stuff what are

591
00:20:23,679 --> 00:20:25,360
some of these things that we can do how

592
00:20:25,360 --> 00:20:27,039
can we fix this

593
00:20:27,039 --> 00:20:28,799
well quite simply uh one of the easiest

594
00:20:28,799 --> 00:20:31,120
ways to do is just disable powershell um

595
00:20:31,120 --> 00:20:32,960
i don't know of anybody who would ever

596
00:20:32,960 --> 00:20:35,520
give their users python so i don't know

597
00:20:35,520 --> 00:20:36,480
why you would want to give them

598
00:20:36,480 --> 00:20:38,159
powershell

599
00:20:38,159 --> 00:20:39,760
uh definitely look at expanding your

600
00:20:39,760 --> 00:20:41,760
application blacklisting not everything

601
00:20:41,760 --> 00:20:44,320
microsoft provides to you is safe i'm

602
00:20:44,320 --> 00:20:46,240
pretty sure most people remember dd auto

603
00:20:46,240 --> 00:20:49,600
that was fun i use ai-based security

604
00:20:49,600 --> 00:20:51,679
products things that hook into kernel 32

605
00:20:51,679 --> 00:20:53,679
or nt-dll to help determine

606
00:20:53,679 --> 00:20:55,520
maliciousness is always great as well as

607
00:20:55,520 --> 00:20:57,520
being able to detect if a sensor has

608
00:20:57,520 --> 00:20:59,679
been disconnected

609
00:20:59,679 --> 00:21:01,760
those are quite important

610
00:21:01,760 --> 00:21:03,760
and then the last piece is is

611
00:21:03,760 --> 00:21:05,440
a little outside of all of our control

612
00:21:05,440 --> 00:21:06,799
but microsoft definitely needs to start

613
00:21:06,799 --> 00:21:09,919
fixing some of these these holes

614
00:21:09,919 --> 00:21:12,559
in 2021 concatenation still works and i

615
00:21:12,559 --> 00:21:14,240
think it's partly because we stopped

616
00:21:14,240 --> 00:21:15,679
paying attention to powershell when

617
00:21:15,679 --> 00:21:17,600
everybody moved to c sharp

618
00:21:17,600 --> 00:21:19,440
so these security controls didn't get as

619
00:21:19,440 --> 00:21:22,400
much love as one would expect

620
00:21:22,400 --> 00:21:24,320
so it's definitely star it's definitely

621
00:21:24,320 --> 00:21:26,400
time for for microsoft to go back and

622
00:21:26,400 --> 00:21:28,000
and look at this

623
00:21:28,000 --> 00:21:29,520
and start fixing some of these very

624
00:21:29,520 --> 00:21:30,640
simple

625
00:21:30,640 --> 00:21:34,080
um bypasses

626
00:21:34,320 --> 00:21:36,559
so past that here's my information again

627
00:21:36,559 --> 00:21:38,400
if you guys want to download these

628
00:21:38,400 --> 00:21:40,720
slides you can go to our webpage and

629
00:21:40,720 --> 00:21:42,400
slash b-sides

630
00:21:42,400 --> 00:21:46,559
and and get these slides yourself um

631
00:21:46,559 --> 00:21:48,240
if there are any questions i am willing

632
00:21:48,240 --> 00:21:52,600
to answer them now thank you

