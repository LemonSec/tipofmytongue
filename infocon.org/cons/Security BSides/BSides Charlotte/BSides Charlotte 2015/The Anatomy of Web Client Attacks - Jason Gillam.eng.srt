1
00:00:14,650 --> 00:00:17,900
is everyone doing I'm I suppose it is

2
00:00:17,900 --> 00:00:23,950
this this on all right can you hear me

3
00:00:25,509 --> 00:00:28,790
that's fine i'll just talk i'll just

4
00:00:28,790 --> 00:00:30,800
talk about come on this thing right

5
00:00:30,800 --> 00:00:32,479
you're on that it's going into the video

6
00:00:32,479 --> 00:00:34,040
that's well that's all that really

7
00:00:34,040 --> 00:00:35,540
matters right as long as everyone can

8
00:00:35,540 --> 00:00:42,470
hear me in the room what okay I I can

9
00:00:42,470 --> 00:00:48,260
talk up alright so today we're going to

10
00:00:48,260 --> 00:00:50,510
talk about the the anatomy of web client

11
00:00:50,510 --> 00:00:54,770
attacks first a little bit about me my

12
00:00:54,770 --> 00:00:56,990
name is Jason Gilliam security

13
00:00:56,990 --> 00:00:59,090
consultant at secure ideas I like to

14
00:00:59,090 --> 00:01:04,938
hack things and by that I I really a

15
00:01:04,938 --> 00:01:06,080
mean sort of the innovative

16
00:01:06,080 --> 00:01:08,720
problem-solving type of hacking also

17
00:01:08,720 --> 00:01:10,939
breaking things is fun too as long as

18
00:01:10,939 --> 00:01:13,700
you have permission i'm also an open

19
00:01:13,700 --> 00:01:17,090
source contributor I've before i got

20
00:01:17,090 --> 00:01:21,170
into into the penetration testing side

21
00:01:21,170 --> 00:01:23,120
of things i did a lot of software

22
00:01:23,120 --> 00:01:26,270
development so now i use those skills to

23
00:01:26,270 --> 00:01:28,400
build tools to help me break into things

24
00:01:28,400 --> 00:01:31,940
so it's kind of kind of fun i also of

25
00:01:31,940 --> 00:01:33,950
note at the very bottom probably the

26
00:01:33,950 --> 00:01:35,720
last word on there's probably the most

27
00:01:35,720 --> 00:01:37,280
important thing to know about me is i am

28
00:01:37,280 --> 00:01:41,000
a home brewer as well so not really

29
00:01:41,000 --> 00:01:46,430
relevant to this talk but okay so why

30
00:01:46,430 --> 00:01:50,900
are we here I was you know I spent a lot

31
00:01:50,900 --> 00:01:54,890
of time going a typical for me is go

32
00:01:54,890 --> 00:01:57,799
from one location to another at a client

33
00:01:57,799 --> 00:01:59,780
site or working remotely with a client

34
00:01:59,780 --> 00:02:04,790
and and do penetration testing so I get

35
00:02:04,790 --> 00:02:06,049
exposed to a lot of different people in

36
00:02:06,049 --> 00:02:07,159
there are different opinions of things

37
00:02:07,159 --> 00:02:09,110
and there are different levels of

38
00:02:09,110 --> 00:02:12,530
understanding and it came to my

39
00:02:12,530 --> 00:02:14,569
attention through this that there are

40
00:02:14,569 --> 00:02:18,410
some misconceptions out there about what

41
00:02:18,410 --> 00:02:20,240
some of the alphabet soup around web

42
00:02:20,240 --> 00:02:22,040
client attacks really means and this is

43
00:02:22,040 --> 00:02:24,230
an area I do various different types of

44
00:02:24,230 --> 00:02:26,330
penetration testing but web pen testing

45
00:02:26,330 --> 00:02:29,390
is an area that I'm very interested in

46
00:02:29,390 --> 00:02:31,760
more so than some of the others so I

47
00:02:31,760 --> 00:02:33,590
spent a lot of time in this area and so

48
00:02:33,590 --> 00:02:34,640
I thought I would put something together

49
00:02:34,640 --> 00:02:36,620
to help clear up some of this it is a

50
00:02:36,620 --> 00:02:39,140
semi technical talk so i'll get into

51
00:02:39,140 --> 00:02:40,490
some of the details on how some of these

52
00:02:40,490 --> 00:02:42,920
things actually work and some of the

53
00:02:42,920 --> 00:02:46,550
issues with them and there's more than

54
00:02:46,550 --> 00:02:50,270
what's just on that slide 2 so so i'm

55
00:02:50,270 --> 00:02:51,640
going to talk about three different

56
00:02:51,640 --> 00:02:53,750
vulnerability classifications and then

57
00:02:53,750 --> 00:02:56,320
also some of the controls around those

58
00:02:56,320 --> 00:03:00,590
the three the three are in the top 10 if

59
00:03:00,590 --> 00:03:04,940
you is anybody not heard of a wasp no

60
00:03:04,940 --> 00:03:08,660
hands went up that's amazing so a wasp

61
00:03:08,660 --> 00:03:12,940
is is basically the go-to source for web

62
00:03:12,940 --> 00:03:15,620
based security we're talking about you

63
00:03:15,620 --> 00:03:19,180
know web applications the three

64
00:03:19,180 --> 00:03:20,810
vulnerabilities that I'm going to talk

65
00:03:20,810 --> 00:03:23,110
about today are cross-site scripting

66
00:03:23,110 --> 00:03:25,820
cross-site request forgery and the

67
00:03:25,820 --> 00:03:29,450
unvalidated redirects so and I'll also

68
00:03:29,450 --> 00:03:32,980
talk about how these can be used in

69
00:03:32,980 --> 00:03:36,650
together in order to actually take

70
00:03:36,650 --> 00:03:38,420
something that you know maybe the risk

71
00:03:38,420 --> 00:03:40,340
was only at one level and then when you

72
00:03:40,340 --> 00:03:43,190
combine two of these vulnerabilities

73
00:03:43,190 --> 00:03:45,769
together in the same environment how the

74
00:03:45,769 --> 00:03:49,489
the risk to the to that environment goes

75
00:03:49,489 --> 00:03:52,700
up significantly so first let's talk

76
00:03:52,700 --> 00:03:54,980
about cross-site scripting it's number

77
00:03:54,980 --> 00:03:59,329
three on the lost top 10 list another

78
00:03:59,329 --> 00:04:03,739
quick faq about it is it's the is the

79
00:04:03,739 --> 00:04:06,110
cornerstone of a lot of phishing attacks

80
00:04:06,110 --> 00:04:07,910
so when you get that email that you're

81
00:04:07,910 --> 00:04:09,170
not supposed to click on that a lot of

82
00:04:09,170 --> 00:04:12,799
people click on anyway that's often will

83
00:04:12,799 --> 00:04:14,870
contain a cross-site scripting vector on

84
00:04:14,870 --> 00:04:17,149
there or it will lead to a site that has

85
00:04:17,149 --> 00:04:19,988
a cross-site scripting vector on there

86
00:04:19,988 --> 00:04:24,830
so good things about cross-site

87
00:04:24,830 --> 00:04:26,630
scripting is it's been around long

88
00:04:26,630 --> 00:04:29,060
enough now that that we actually have

89
00:04:29,060 --> 00:04:31,160
preventive controls built into the

90
00:04:31,160 --> 00:04:35,180
browser's so only to an extent though

91
00:04:35,180 --> 00:04:38,720
and then there's also there's three

92
00:04:38,720 --> 00:04:40,220
flavors across the scripting we need to

93
00:04:40,220 --> 00:04:43,260
worry about so we have reflected

94
00:04:43,260 --> 00:04:44,250
I'm going to go into a little bit more

95
00:04:44,250 --> 00:04:47,400
detail on all this stuff in a moment so

96
00:04:47,400 --> 00:04:49,980
there's reflected which is basically you

97
00:04:49,980 --> 00:04:51,540
get a link you click on it and then

98
00:04:51,540 --> 00:04:53,370
whatever something that was included in

99
00:04:53,370 --> 00:04:56,250
that link ends up coming back on the

100
00:04:56,250 --> 00:04:59,100
response on that page you have stored

101
00:04:59,100 --> 00:05:02,190
wear your wear a cross site scripting

102
00:05:02,190 --> 00:05:04,680
payload is actually stored on a server

103
00:05:04,680 --> 00:05:06,480
somewhere and it comes back to everybody

104
00:05:06,480 --> 00:05:08,400
who visits a particular page and then

105
00:05:08,400 --> 00:05:10,230
you have Donbass the document object

106
00:05:10,230 --> 00:05:13,020
model where some JavaScript actually

107
00:05:13,020 --> 00:05:16,130
inserts the payload onto into the DOM

108
00:05:16,130 --> 00:05:20,280
and that one's actually the Donbass is

109
00:05:20,280 --> 00:05:23,490
becoming it's not that is becoming more

110
00:05:23,490 --> 00:05:26,430
common it's it's already out there it's

111
00:05:26,430 --> 00:05:30,240
becoming more discovered i guess of late

112
00:05:30,240 --> 00:05:33,480
because that's one that's very hard to

113
00:05:33,480 --> 00:05:35,310
detect with the automated tools that

114
00:05:35,310 --> 00:05:40,020
we've been using for many years so we

115
00:05:40,020 --> 00:05:41,340
are getting better at that you pretty

116
00:05:41,340 --> 00:05:44,790
much your best bet at detecting dom

117
00:05:44,790 --> 00:05:46,860
based cross-site scripting is actually

118
00:05:46,860 --> 00:05:53,760
through static analysis tools okay some

119
00:05:53,760 --> 00:05:57,360
examples in the media so one thing i did

120
00:05:57,360 --> 00:05:59,790
i've been interested in doing some more

121
00:05:59,790 --> 00:06:02,940
I guess research on cross-site scripting

122
00:06:02,940 --> 00:06:05,910
and near the beginning of this year I

123
00:06:05,910 --> 00:06:08,280
set up one of those google alerts where

124
00:06:08,280 --> 00:06:10,110
are you basically put in your search

125
00:06:10,110 --> 00:06:11,610
terms and every day in your Inbox you

126
00:06:11,610 --> 00:06:15,060
get the results and i put in the

127
00:06:15,060 --> 00:06:17,220
keywords cross-site scripting and xss

128
00:06:17,220 --> 00:06:21,090
and oddly near the beginning of the year

129
00:06:21,090 --> 00:06:23,340
the first time I presented this was at

130
00:06:23,340 --> 00:06:27,000
Carolina con and I had been getting on

131
00:06:27,000 --> 00:06:29,850
average maybe five or six results a day

132
00:06:29,850 --> 00:06:32,970
which doesn't seem that bad but I've

133
00:06:32,970 --> 00:06:34,860
kept the alert up there and in the last

134
00:06:34,860 --> 00:06:36,750
couple of months i'm averaging much

135
00:06:36,750 --> 00:06:38,310
higher numbers i don't know if there's

136
00:06:38,310 --> 00:06:40,560
an increase in awareness or across a

137
00:06:40,560 --> 00:06:42,720
scripting itself or what but it's it

138
00:06:42,720 --> 00:06:46,410
seems to be more rampant than ever some

139
00:06:46,410 --> 00:06:50,480
of the big ones out there we have

140
00:06:50,480 --> 00:06:54,300
and this is just cross site scripting is

141
00:06:54,300 --> 00:06:56,310
most effective on sites where they get a

142
00:06:56,310 --> 00:07:00,210
lot of traffic right so IMDb it gets

143
00:07:00,210 --> 00:07:02,700
quite a bit of traffic another area that

144
00:07:02,700 --> 00:07:04,050
we find a lot of cross-site scripting

145
00:07:04,050 --> 00:07:07,910
flaws recently is in WordPress plugins

146
00:07:07,910 --> 00:07:11,070
okay we're press itself usually it's

147
00:07:11,070 --> 00:07:13,710
okay for the most part we you know we

148
00:07:13,710 --> 00:07:15,330
don't see lots and lots of issues with

149
00:07:15,330 --> 00:07:19,650
with WordPress like the core but the

150
00:07:19,650 --> 00:07:21,840
plugins oh they just keep coming up this

151
00:07:21,840 --> 00:07:25,860
one here yost google analytics I can't

152
00:07:25,860 --> 00:07:28,140
remember how many installations there

153
00:07:28,140 --> 00:07:29,400
are of this one but it's a very large

154
00:07:29,400 --> 00:07:32,280
number it's a widely used plugin so when

155
00:07:32,280 --> 00:07:33,870
something like that happens and it gets

156
00:07:33,870 --> 00:07:35,730
out there and becomes public knowledge

157
00:07:35,730 --> 00:07:37,680
of course all those websites running it

158
00:07:37,680 --> 00:07:40,500
have cross-site scripting flaws in their

159
00:07:40,500 --> 00:07:45,419
websites bugzilla is another one I got a

160
00:07:45,419 --> 00:07:47,310
couple more here I'll just read them a

161
00:07:47,310 --> 00:07:48,240
little bit i know they're probably a

162
00:07:48,240 --> 00:07:51,570
little bit small we have a couple of CVS

163
00:07:51,570 --> 00:07:55,080
there ones for IBM rational Quality

164
00:07:55,080 --> 00:07:57,000
Manager and the one right below it is is

165
00:07:57,000 --> 00:07:59,970
a SharePoint SharePoint's actually been

166
00:07:59,970 --> 00:08:02,250
riddled with cross-site scripting flaws

167
00:08:02,250 --> 00:08:05,270
over the years it's always had some so

168
00:08:05,270 --> 00:08:08,610
but this one here all of these are 2015

169
00:08:08,610 --> 00:08:10,530
they're all you know pretty pretty

170
00:08:10,530 --> 00:08:12,990
recently discovered the one at the

171
00:08:12,990 --> 00:08:17,280
bottom is I thought was ironic national

172
00:08:17,280 --> 00:08:18,660
vulnerability database vulnerable to

173
00:08:18,660 --> 00:08:21,090
cross-site scripting so and that was

174
00:08:21,090 --> 00:08:23,450
this week

175
00:08:27,819 --> 00:08:31,490
so let's talk a little bit more about

176
00:08:31,490 --> 00:08:33,669
what cross-site scripting is and

177
00:08:33,669 --> 00:08:36,740
hopefully if you're a little unsure of

178
00:08:36,740 --> 00:08:38,269
exactly what it is or how it works I'll

179
00:08:38,269 --> 00:08:39,469
be able to help clear that up in the

180
00:08:39,469 --> 00:08:42,049
next couple of slides so wikipedia says

181
00:08:42,049 --> 00:08:44,690
I'll just read this part cross-site

182
00:08:44,690 --> 00:08:45,920
scripting is the type of computer

183
00:08:45,920 --> 00:08:47,390
security vulnerability typically found

184
00:08:47,390 --> 00:08:50,209
in web applications XSS enables

185
00:08:50,209 --> 00:08:52,040
attackers to inject client-side script

186
00:08:52,040 --> 00:08:54,260
into web pages viewed by other users and

187
00:08:54,260 --> 00:08:57,560
that is is pretty accurate I'm pretty

188
00:08:57,560 --> 00:09:00,019
happy with that description one thing

189
00:09:00,019 --> 00:09:01,820
that I will point out though is is we

190
00:09:01,820 --> 00:09:03,709
say cross-site scripting all the time

191
00:09:03,709 --> 00:09:05,870
that's that's what it's called that's

192
00:09:05,870 --> 00:09:07,910
what it was called way back when but in

193
00:09:07,910 --> 00:09:10,579
reality it's a bit of a misnomer because

194
00:09:10,579 --> 00:09:12,980
cross the term cross-site scripting kind

195
00:09:12,980 --> 00:09:14,300
of implies that something is going

196
00:09:14,300 --> 00:09:16,940
across from one site to another but

197
00:09:16,940 --> 00:09:19,100
that's not always the case in fact it's

198
00:09:19,100 --> 00:09:22,910
often not the case so I actually when

199
00:09:22,910 --> 00:09:24,230
I'm hear the term cross-site scripting

200
00:09:24,230 --> 00:09:26,390
I'm thinking browser script injection

201
00:09:26,390 --> 00:09:28,160
that's the way I perceive this

202
00:09:28,160 --> 00:09:32,209
particular type of vulnerability because

203
00:09:32,209 --> 00:09:33,529
what we're trying to do is we're

204
00:09:33,529 --> 00:09:36,320
injecting some kind of a script into the

205
00:09:36,320 --> 00:09:38,779
browser page and it's going to run for

206
00:09:38,779 --> 00:09:44,240
whatever whoever the the victim is so

207
00:09:44,240 --> 00:09:45,649
what kind of script are we going to put

208
00:09:45,649 --> 00:09:49,579
in there probably JavaScript that's

209
00:09:49,579 --> 00:09:52,160
that's the most common type of script

210
00:09:52,160 --> 00:09:55,100
that we can inject vbscript will also

211
00:09:55,100 --> 00:09:56,720
work on internet explorer though so

212
00:09:56,720 --> 00:09:59,209
there are cases where a particular

213
00:09:59,209 --> 00:10:02,690
defensive filter mechanism may be

214
00:10:02,690 --> 00:10:05,240
filtering out JavaScript payload but an

215
00:10:05,240 --> 00:10:07,130
equivalent vbscript payload might work

216
00:10:07,130 --> 00:10:09,199
so it's just something to keep in mind

217
00:10:09,199 --> 00:10:11,390
especially if you're on the defense well

218
00:10:11,390 --> 00:10:12,589
I guess if you're on the defensive side

219
00:10:12,589 --> 00:10:13,970
you want to be aware of this but if

220
00:10:13,970 --> 00:10:16,190
you're also if you're if you're doing a

221
00:10:16,190 --> 00:10:19,100
penetration test at some point don't

222
00:10:19,100 --> 00:10:20,720
forget about that one there are a lot of

223
00:10:20,720 --> 00:10:22,250
companies that standardized still an

224
00:10:22,250 --> 00:10:24,800
Internet Explorer so if that's your

225
00:10:24,800 --> 00:10:30,219
target you can make use of vbscript

226
00:10:30,970 --> 00:10:33,490
so for browser script injection or

227
00:10:33,490 --> 00:10:35,259
cross-site scripting to work we really

228
00:10:35,259 --> 00:10:38,139
need two components to it first of all

229
00:10:38,139 --> 00:10:41,230
we need the right context it has to you

230
00:10:41,230 --> 00:10:42,639
have to be able to inject the script

231
00:10:42,639 --> 00:10:45,930
into some location on the page where

232
00:10:45,930 --> 00:10:48,850
where it's actually interpreted as a

233
00:10:48,850 --> 00:10:51,790
script as something executable and the

234
00:10:51,790 --> 00:10:53,170
second component of course is we need

235
00:10:53,170 --> 00:10:55,000
actual execution it's possible to get

236
00:10:55,000 --> 00:10:56,910
script onto a page that's in a

237
00:10:56,910 --> 00:11:01,329
supposedly executable context yet if it

238
00:11:01,329 --> 00:11:03,129
happens you know after the page is

239
00:11:03,129 --> 00:11:06,370
processed or you know through if you end

240
00:11:06,370 --> 00:11:11,110
up with certain other like just the

241
00:11:11,110 --> 00:11:13,420
order of things that happen you might

242
00:11:13,420 --> 00:11:15,040
not actually have execution of that

243
00:11:15,040 --> 00:11:17,139
script and I've actually found that in a

244
00:11:17,139 --> 00:11:20,790
lot of cases like sometimes you'll have

245
00:11:20,790 --> 00:11:23,050
JavaScript libraries that are loading

246
00:11:23,050 --> 00:11:24,279
other libraries that are loading other

247
00:11:24,279 --> 00:11:26,980
libraries and you have this ripple

248
00:11:26,980 --> 00:11:28,839
effect and it just depends on the order

249
00:11:28,839 --> 00:11:30,040
of how things are loaded and where they

250
00:11:30,040 --> 00:11:31,540
come in as to whether or not you might

251
00:11:31,540 --> 00:11:33,430
actually have execution of your

252
00:11:33,430 --> 00:11:37,209
injection for awesome point is if you're

253
00:11:37,209 --> 00:11:38,769
doing this as a penetration test you

254
00:11:38,769 --> 00:11:40,089
need to be able to come up with a proof

255
00:11:40,089 --> 00:11:41,819
of concept something that actually shows

256
00:11:41,819 --> 00:11:48,569
that the injection is in a an executable

257
00:11:48,569 --> 00:11:52,300
location and that it's executed so how

258
00:11:52,300 --> 00:11:55,600
does it work I'll go over the absolute

259
00:11:55,600 --> 00:11:58,000
basics here this will just take a couple

260
00:11:58,000 --> 00:12:03,670
of moments so and I noticed the website

261
00:12:03,670 --> 00:12:05,079
here chaha if you're if you're in

262
00:12:05,079 --> 00:12:06,370
Charlotte and you're interested in

263
00:12:06,370 --> 00:12:09,129
hacking stuff go to the chaha or

264
00:12:09,129 --> 00:12:11,139
Charlotte hackers website because we on

265
00:12:11,139 --> 00:12:13,600
a monthly basis we get together and Dave

266
00:12:13,600 --> 00:12:16,149
mentioned this earlier we talked about

267
00:12:16,149 --> 00:12:19,750
hacking things and and have a bit of a

268
00:12:19,750 --> 00:12:22,230
social hour as well so it's pretty cool

269
00:12:22,230 --> 00:12:26,319
but we have okay so you have a page

270
00:12:26,319 --> 00:12:28,689
there's a parameter on there this one's

271
00:12:28,689 --> 00:12:30,939
name equals Bob okay it gets passed in

272
00:12:30,939 --> 00:12:33,639
and in the response of course Bob comes

273
00:12:33,639 --> 00:12:38,559
back and shows up on the page so when

274
00:12:38,559 --> 00:12:40,089
you have cross-site scripting this again

275
00:12:40,089 --> 00:12:43,059
is the most simplest of examples we are

276
00:12:43,059 --> 00:12:44,259
able to

277
00:12:44,259 --> 00:12:46,839
add javascript onto that parameter and

278
00:12:46,839 --> 00:12:49,269
then that javascript gets inserted on

279
00:12:49,269 --> 00:12:50,949
the page and so it comes back and what

280
00:12:50,949 --> 00:12:53,529
happens of course is in this case here

281
00:12:53,529 --> 00:12:56,529
we have an alert pop-up box comes up

282
00:12:56,529 --> 00:12:59,079
with the number one in it I use often

283
00:12:59,079 --> 00:13:00,759
will use it so this is basically a

284
00:13:00,759 --> 00:13:04,059
litmus test this says can can we get

285
00:13:04,059 --> 00:13:05,999
injection that's actually executing and

286
00:13:05,999 --> 00:13:09,279
although a pop-up box is really not that

287
00:13:09,279 --> 00:13:12,579
big a deal by itself the reality is of

288
00:13:12,579 --> 00:13:14,259
course if you can get a pop-up box you

289
00:13:14,259 --> 00:13:15,399
can do anything else you can do with

290
00:13:15,399 --> 00:13:18,970
JavaScript so if you are in a position

291
00:13:18,970 --> 00:13:22,119
where you have to convince an executive

292
00:13:22,119 --> 00:13:25,269
or a mentor senior manager that this

293
00:13:25,269 --> 00:13:26,829
pop-up box is dangerous enough that we

294
00:13:26,829 --> 00:13:30,399
gotta go fix that flaw you know you

295
00:13:30,399 --> 00:13:31,569
might want to look at doing something

296
00:13:31,569 --> 00:13:33,699
other than pop-up boxes and I'll get to

297
00:13:33,699 --> 00:13:38,979
some examples later on but it's really

298
00:13:38,979 --> 00:13:41,139
hopefully comes down to a conditioning

299
00:13:41,139 --> 00:13:42,879
that when they see this alert pop-up box

300
00:13:42,879 --> 00:13:46,119
they recognize okay this is bad even

301
00:13:46,119 --> 00:13:48,160
though when Papa box itself isn't you'll

302
00:13:48,160 --> 00:13:51,069
also notice that I used just one by

303
00:13:51,069 --> 00:13:52,809
itself I didn't put a string quote in

304
00:13:52,809 --> 00:13:55,209
there sometimes you'll see quotes XSS

305
00:13:55,209 --> 00:13:58,629
I'll often when I'm doing a test just do

306
00:13:58,629 --> 00:14:00,249
the number one by itself because it's

307
00:14:00,249 --> 00:14:01,779
not a string I don't have to worry about

308
00:14:01,779 --> 00:14:03,489
whether or not the quotes are filtered

309
00:14:03,489 --> 00:14:07,839
so that's why I did it that way so

310
00:14:07,839 --> 00:14:10,480
JavaScript brief history I won't spend

311
00:14:10,480 --> 00:14:12,959
all day on this but basically

312
00:14:12,959 --> 00:14:14,799
JavaScript's been around for about 20

313
00:14:14,799 --> 00:14:18,160
years just about as long as the web

314
00:14:18,160 --> 00:14:21,160
almost so it's been around for a long

315
00:14:21,160 --> 00:14:24,189
time the other date on this particular

316
00:14:24,189 --> 00:14:27,759
slide that's important is to know it is

317
00:14:27,759 --> 00:14:31,329
is the one at the bottom 2005 so that's

318
00:14:31,329 --> 00:14:34,449
when that term Ajax was coined so

319
00:14:34,449 --> 00:14:36,399
everyone's heard about Ajax this is your

320
00:14:36,399 --> 00:14:41,439
dynamic xml over a dynamic JavaScript

321
00:14:41,439 --> 00:14:45,519
and XML so basically this is we have a

322
00:14:45,519 --> 00:14:48,069
page we have some piece of JavaScript on

323
00:14:48,069 --> 00:14:50,679
that page is going to make a call out to

324
00:14:50,679 --> 00:14:52,640
somewhere else and

325
00:14:52,640 --> 00:14:54,530
and pull information in and then

326
00:14:54,530 --> 00:14:56,510
dynamically update part of the page

327
00:14:56,510 --> 00:14:57,740
instead of the whole thing right

328
00:14:57,740 --> 00:14:59,360
supposed to make everything faster and

329
00:14:59,360 --> 00:15:02,510
flashy r and more dynamic the reality

330
00:15:02,510 --> 00:15:04,940
there though I'll point out and I don't

331
00:15:04,940 --> 00:15:08,150
have the exact date where it was first

332
00:15:08,150 --> 00:15:10,880
used but web remoting was around before

333
00:15:10,880 --> 00:15:13,780
the term Ajax was actually coined so

334
00:15:13,780 --> 00:15:17,180
this thing that we call html5 where the

335
00:15:17,180 --> 00:15:18,650
web's all dynamic has actually been

336
00:15:18,650 --> 00:15:21,140
around or parts of it have been around

337
00:15:21,140 --> 00:15:23,780
for much much longer pretty much as long

338
00:15:23,780 --> 00:15:27,440
as we've been using using javascript

339
00:15:27,440 --> 00:15:30,440
which is you know a very long time so

340
00:15:30,440 --> 00:15:31,370
there's a lot of vulnerabilities

341
00:15:31,370 --> 00:15:32,630
floating out there that we still haven't

342
00:15:32,630 --> 00:15:39,200
found so what's a good for what can we

343
00:15:39,200 --> 00:15:41,690
do with javascript and I need JavaScript

344
00:15:41,690 --> 00:15:43,520
developers in the room probably know

345
00:15:43,520 --> 00:15:46,850
better than idea got a couple so you can

346
00:15:46,850 --> 00:15:48,950
do a lot of stuff with with JavaScript

347
00:15:48,950 --> 00:15:50,930
here's just a few examples you basically

348
00:15:50,930 --> 00:15:55,310
you can manipulate the page itself you

349
00:15:55,310 --> 00:15:59,660
can read headers and cookies which is

350
00:15:59,660 --> 00:16:01,760
kind of cool especially if the session

351
00:16:01,760 --> 00:16:04,720
cookie or something else that has some

352
00:16:04,720 --> 00:16:08,420
sensitive information in there you can

353
00:16:08,420 --> 00:16:11,980
do some level of key logging as well

354
00:16:11,980 --> 00:16:15,200
some you have some level of control over

355
00:16:15,200 --> 00:16:19,160
the the media devices that are attached

356
00:16:19,160 --> 00:16:21,050
to your laptop leave the camera you can

357
00:16:21,050 --> 00:16:23,690
do some some streaming you can take some

358
00:16:23,690 --> 00:16:27,320
screenshots you can have a certain

359
00:16:27,320 --> 00:16:29,380
degree of access over the the microphone

360
00:16:29,380 --> 00:16:34,460
speakers so you know there's there's a

361
00:16:34,460 --> 00:16:37,540
bunch of things that we can do with it

362
00:16:37,990 --> 00:16:42,710
so now if you've been listening so far

363
00:16:42,710 --> 00:16:44,660
and this is not really familiar to you

364
00:16:44,660 --> 00:16:46,130
then you might the paranoia might be

365
00:16:46,130 --> 00:16:48,950
setting in a little bit you know this is

366
00:16:48,950 --> 00:16:50,690
you can do a lot of things with

367
00:16:50,690 --> 00:16:52,280
cross-site scripting and it seems to be

368
00:16:52,280 --> 00:16:55,100
all over the place it's been around for

369
00:16:55,100 --> 00:16:56,630
a long time why isn't the entire

370
00:16:56,630 --> 00:16:58,340
internet compromised by cross-site

371
00:16:58,340 --> 00:17:01,340
scripting flaws and the reason why it

372
00:17:01,340 --> 00:17:04,160
isn't primarily is this thing called

373
00:17:04,160 --> 00:17:06,140
same-origin policy

374
00:17:06,140 --> 00:17:10,880
ok so the same origin policy before i

375
00:17:10,880 --> 00:17:13,280
get into the policy itself let's define

376
00:17:13,280 --> 00:17:16,310
what we mean by an origin same origin

377
00:17:16,310 --> 00:17:21,440
policy is considers an origin to be the

378
00:17:21,440 --> 00:17:24,319
combination of your protocol your host

379
00:17:24,319 --> 00:17:29,540
in your pork so if any of those are

380
00:17:29,540 --> 00:17:31,580
different any component of the origin is

381
00:17:31,580 --> 00:17:33,230
different then you're talking about a

382
00:17:33,230 --> 00:17:35,900
different origin which means for example

383
00:17:35,900 --> 00:17:38,450
in this case here we have chaha on port

384
00:17:38,450 --> 00:17:43,220
8080 if you also have Alice HTTPS

385
00:17:43,220 --> 00:17:45,260
version running on I don't know

386
00:17:45,260 --> 00:17:48,200
important we just say port 443 then

387
00:17:48,200 --> 00:17:49,820
that's a completely different origin

388
00:17:49,820 --> 00:17:54,380
even though it's the same host so what

389
00:17:54,380 --> 00:17:58,280
the policy does it's a browser enforce

390
00:17:58,280 --> 00:17:59,960
security feature so the browser's all

391
00:17:59,960 --> 00:18:01,580
have this built-in on how they do things

392
00:18:01,580 --> 00:18:05,990
and it basically makes sure that it's

393
00:18:05,990 --> 00:18:10,340
that's running in the document on one

394
00:18:10,340 --> 00:18:17,270
page if meant from origin any document

395
00:18:17,270 --> 00:18:21,770
from a different so that's where you

396
00:18:21,770 --> 00:18:23,390
still get your dynamic HTML and

397
00:18:23,390 --> 00:18:26,960
everything working there but it can't in

398
00:18:26,960 --> 00:18:29,390
general go out and fetch content from

399
00:18:29,390 --> 00:18:31,610
somewhere else and see it and interact

400
00:18:31,610 --> 00:18:33,170
with it and get cookies from and all of

401
00:18:33,170 --> 00:18:35,510
that if it could then the whole internet

402
00:18:35,510 --> 00:18:36,890
would probably be compromised by

403
00:18:36,890 --> 00:18:41,510
cross-site scripting so in general this

404
00:18:41,510 --> 00:18:45,800
is a pretty good control except once in

405
00:18:45,800 --> 00:18:47,150
a while we have other problems that crop

406
00:18:47,150 --> 00:18:51,500
up here's a this happened this year that

407
00:18:51,500 --> 00:18:54,080
Internet Explorer had something that was

408
00:18:54,080 --> 00:18:56,930
was pitched as a universal cross-site

409
00:18:56,930 --> 00:18:59,210
scripting flaw which wasn't actually a

410
00:18:59,210 --> 00:19:00,680
universal cross-site scripting flaw at

411
00:19:00,680 --> 00:19:02,990
all what it was was the same origin

412
00:19:02,990 --> 00:19:06,650
policy bypass so this policies in place

413
00:19:06,650 --> 00:19:08,690
is supposed to protect us from scripts

414
00:19:08,690 --> 00:19:11,180
being able to just run anywhere and in

415
00:19:11,180 --> 00:19:13,550
access documents anywhere and Internet

416
00:19:13,550 --> 00:19:15,560
Explorer the latest version at the time

417
00:19:15,560 --> 00:19:17,990
when it was announced was vulnerable to

418
00:19:17,990 --> 00:19:21,010
the same origin policy bypass

419
00:19:21,010 --> 00:19:26,630
and I played around with this the the

420
00:19:26,630 --> 00:19:28,580
they had a proof of concept out there

421
00:19:28,580 --> 00:19:30,650
for this thing and in the proof of

422
00:19:30,650 --> 00:19:34,100
concept you had to I think you had to

423
00:19:34,100 --> 00:19:36,050
click on a couple of different things so

424
00:19:36,050 --> 00:19:37,640
it made it look like it really wasn't

425
00:19:37,640 --> 00:19:39,170
that big a deal because you'd probably

426
00:19:39,170 --> 00:19:41,000
noticed pop ups and he have to click

427
00:19:41,000 --> 00:19:43,610
here but I actually tinkered with it a

428
00:19:43,610 --> 00:19:46,490
bit more and was able to get a working

429
00:19:46,490 --> 00:19:49,460
proof of concept that required no user

430
00:19:49,460 --> 00:19:52,610
interaction at all for the same origin

431
00:19:52,610 --> 00:19:55,730
bypass which means anybody who would be

432
00:19:55,730 --> 00:19:57,560
attacked by this running a vulnerable

433
00:19:57,560 --> 00:20:00,230
version of internet explorer be able to

434
00:20:00,230 --> 00:20:02,900
essentially pull their session cookies

435
00:20:02,900 --> 00:20:05,450
so I'll use that as a probably one of

436
00:20:05,450 --> 00:20:07,760
the more critical examples from any

437
00:20:07,760 --> 00:20:09,470
other website they visited in the same

438
00:20:09,470 --> 00:20:18,140
browser so some cool stuff there and no

439
00:20:18,140 --> 00:20:21,980
I didn't publish that it's not something

440
00:20:21,980 --> 00:20:23,390
I really want running around rampant on

441
00:20:23,390 --> 00:20:24,830
the internet for script kiddies to get

442
00:20:24,830 --> 00:20:30,470
ahold of so there are some exceptions to

443
00:20:30,470 --> 00:20:34,270
the same origin policy the first one is

444
00:20:34,270 --> 00:20:37,460
built into HTML itself there are certain

445
00:20:37,460 --> 00:20:39,770
things that don't use the same origin

446
00:20:39,770 --> 00:20:43,340
policy for example the script tag when

447
00:20:43,340 --> 00:20:45,020
it loads a source you can load scripts

448
00:20:45,020 --> 00:20:48,410
from other other resources it doesn't

449
00:20:48,410 --> 00:20:50,150
have to be the same origin and those

450
00:20:50,150 --> 00:20:51,530
scripts will still run I mean that's how

451
00:20:51,530 --> 00:20:54,170
we get if you look at for example jquery

452
00:20:54,170 --> 00:20:55,790
libraries and other other things like

453
00:20:55,790 --> 00:20:57,920
that they're often hosted somewhere else

454
00:20:57,920 --> 00:20:59,200
and we just bring them into the pages

455
00:20:59,200 --> 00:21:01,670
and there's nothing special you have to

456
00:21:01,670 --> 00:21:05,030
do for that because that's that's a

457
00:21:05,030 --> 00:21:07,430
built-in to h2 in HTML itself where it

458
00:21:07,430 --> 00:21:10,100
doesn't make use of the same origin

459
00:21:10,100 --> 00:21:12,560
policy the other one is something called

460
00:21:12,560 --> 00:21:16,100
the course cross-origin resource sharing

461
00:21:16,100 --> 00:21:20,030
and this is an area that I found that's

462
00:21:20,030 --> 00:21:22,100
a little fuzzy to some people is it

463
00:21:22,100 --> 00:21:24,790
anybody here not really sure what it is

464
00:21:24,790 --> 00:21:30,970
you know I've seen a few hands go up so

465
00:21:32,389 --> 00:21:35,070
basically let me go on to the next slide

466
00:21:35,070 --> 00:21:39,389
and I'll explain what it is so the

467
00:21:39,389 --> 00:21:41,490
course or cross-origin resource sharing

468
00:21:41,490 --> 00:21:43,590
is another type of policy it's sort of

469
00:21:43,590 --> 00:21:45,350
an override to the same origin policy

470
00:21:45,350 --> 00:21:48,149
but just with respect to JavaScript

471
00:21:48,149 --> 00:21:50,340
calls so when you're doing your ears

472
00:21:50,340 --> 00:21:52,590
sort of ate your Ajax type stuff so it's

473
00:21:52,590 --> 00:21:55,740
what makes html5 mashup type code

474
00:21:55,740 --> 00:21:57,750
actually work it gets us away from

475
00:21:57,750 --> 00:22:00,629
having to load content into iframes so

476
00:22:00,629 --> 00:22:02,460
you can actually get content from

477
00:22:02,460 --> 00:22:05,940
somewhere else onto your page as long as

478
00:22:05,940 --> 00:22:09,929
it conforms to the coors policy so the

479
00:22:09,929 --> 00:22:13,440
policy itself is it's defined on a

480
00:22:13,440 --> 00:22:15,990
server and that would be the server

481
00:22:15,990 --> 00:22:17,429
hosting the content that you want to

482
00:22:17,429 --> 00:22:20,610
pull on to your site and it's it's the

483
00:22:20,610 --> 00:22:23,250
browser that actually enforces it so if

484
00:22:23,250 --> 00:22:26,429
you look at the speck for this and I

485
00:22:26,429 --> 00:22:29,659
don't have a spec number here but the

486
00:22:29,659 --> 00:22:32,279
there there is no requirement at all for

487
00:22:32,279 --> 00:22:33,659
the server to actually obey its own

488
00:22:33,659 --> 00:22:38,639
policy so if if a if a browser makes a

489
00:22:38,639 --> 00:22:42,299
request for some content and it it's

490
00:22:42,299 --> 00:22:44,279
actually outside of the policy that

491
00:22:44,279 --> 00:22:46,259
requests it still may actually return

492
00:22:46,259 --> 00:22:48,090
that content it's up to the browser to

493
00:22:48,090 --> 00:22:51,629
then put that the code into its

494
00:22:51,629 --> 00:22:53,610
exception block instead of the success

495
00:22:53,610 --> 00:22:57,210
block and I've actually played around

496
00:22:57,210 --> 00:22:58,860
with that and that's exactly what

497
00:22:58,860 --> 00:23:00,210
happens in some cases I would imagine

498
00:23:00,210 --> 00:23:05,039
each server is probably treated

499
00:23:05,039 --> 00:23:06,299
differently there might be some that

500
00:23:06,299 --> 00:23:09,750
that obey their own policies but so far

501
00:23:09,750 --> 00:23:14,070
I haven't had much luck with that so a

502
00:23:14,070 --> 00:23:15,929
little illustration of how this this

503
00:23:15,929 --> 00:23:18,509
actually works if we have two sites so

504
00:23:18,509 --> 00:23:22,230
we have foo that's the site that you're

505
00:23:22,230 --> 00:23:24,360
visiting and then we have this other

506
00:23:24,360 --> 00:23:27,059
site bar that has the chorus policy on

507
00:23:27,059 --> 00:23:28,889
it what's going to happen is when you

508
00:23:28,889 --> 00:23:31,470
make that xmlhttprequest object inside

509
00:23:31,470 --> 00:23:34,850
of javascript it and when you when you

510
00:23:34,850 --> 00:23:38,100
make the request with that is the

511
00:23:38,100 --> 00:23:39,929
browser is going to add that origin

512
00:23:39,929 --> 00:23:42,149
header onto the onto it you can go ahead

513
00:23:42,149 --> 00:23:44,369
and look inside your intercepting proxy

514
00:23:44,369 --> 00:23:45,770
and you'll see that just

515
00:23:45,770 --> 00:23:48,140
it's not something you have control over

516
00:23:48,140 --> 00:23:52,290
the header just goes there when the the

517
00:23:52,290 --> 00:23:54,390
server any server that supports kors

518
00:23:54,390 --> 00:23:58,350
sees that header it will reply with its

519
00:23:58,350 --> 00:24:01,050
policy whatever is defined on there and

520
00:24:01,050 --> 00:24:05,040
so we have down in that the bottom

521
00:24:05,040 --> 00:24:06,840
right-hand corner there you can see some

522
00:24:06,840 --> 00:24:09,060
example headers the the one at the top

523
00:24:09,060 --> 00:24:10,940
is the most common one that will see

524
00:24:10,940 --> 00:24:14,790
access control allow origin okay if

525
00:24:14,790 --> 00:24:17,600
you're if you're using scanning tools

526
00:24:17,600 --> 00:24:19,830
i'll use burp because that's the tool

527
00:24:19,830 --> 00:24:24,180
that I use a lot and it actually has a

528
00:24:24,180 --> 00:24:26,250
finding that pops up sometimes where the

529
00:24:26,250 --> 00:24:28,980
access control allow origin is star and

530
00:24:28,980 --> 00:24:32,040
it calls that OS as an issue the the

531
00:24:32,040 --> 00:24:35,010
reality is at least in I experimented

532
00:24:35,010 --> 00:24:37,230
with several browsers that's not an

533
00:24:37,230 --> 00:24:41,160
issue because the the the third header

534
00:24:41,160 --> 00:24:43,710
on there the one at the bottom access

535
00:24:43,710 --> 00:24:46,200
control allow credentials if that's set

536
00:24:46,200 --> 00:24:48,620
that means that a request can be made

537
00:24:48,620 --> 00:24:51,960
for content where the session cookies

538
00:24:51,960 --> 00:24:53,460
will also be sent well any cookies will

539
00:24:53,460 --> 00:24:56,070
be set sent that's what that means allow

540
00:24:56,070 --> 00:24:57,450
credentials what they mean is allow

541
00:24:57,450 --> 00:25:00,900
cookies so in that case we're making our

542
00:25:00,900 --> 00:25:03,120
XML HTTP requests to a different origin

543
00:25:03,120 --> 00:25:06,180
and as long as the origin is in that

544
00:25:06,180 --> 00:25:09,420
list the access control allow origin

545
00:25:09,420 --> 00:25:13,530
list the if the access control allow

546
00:25:13,530 --> 00:25:15,330
credentials is also set to true then

547
00:25:15,330 --> 00:25:20,220
what will happen is you can the food the

548
00:25:20,220 --> 00:25:22,500
requests that was put together on foo is

549
00:25:22,500 --> 00:25:25,200
going to actually have the browser will

550
00:25:25,200 --> 00:25:28,910
send cookies to bar in that case as well

551
00:25:28,910 --> 00:25:33,540
except if the origin is star so they

552
00:25:33,540 --> 00:25:35,160
were a little smart on how they

553
00:25:35,160 --> 00:25:37,460
implemented that if you say that the

554
00:25:37,460 --> 00:25:40,110
access control allow origin a star then

555
00:25:40,110 --> 00:25:44,000
the allow credentials gets disregarded

556
00:25:44,000 --> 00:25:46,110
so that's actually not as big an issue

557
00:25:46,110 --> 00:25:50,220
what is a bigger issue is cases where

558
00:25:50,220 --> 00:25:53,400
you have a site that's pulling content

559
00:25:53,400 --> 00:25:56,210
from somewhere and

560
00:25:56,280 --> 00:26:01,290
and if that site has basically what

561
00:26:01,290 --> 00:26:05,400
happens is is any vulnerabilities on foo

562
00:26:05,400 --> 00:26:07,730
become vulnerabilities of bar as well

563
00:26:07,730 --> 00:26:10,800
because you basically extended the the

564
00:26:10,800 --> 00:26:13,680
origin of bar through its course policy

565
00:26:13,680 --> 00:26:18,690
it makes sense I'll have a little bit

566
00:26:18,690 --> 00:26:21,030
more on that in a second so going back

567
00:26:21,030 --> 00:26:25,230
to cross-site scripting and our pop-up

568
00:26:25,230 --> 00:26:28,530
boxes if you're interested in trying to

569
00:26:28,530 --> 00:26:29,850
figure out okay well what are some other

570
00:26:29,850 --> 00:26:31,290
options I know I had a list up there

571
00:26:31,290 --> 00:26:33,960
earlier as has anyone ever even heard of

572
00:26:33,960 --> 00:26:35,910
beef the browser exploitation framework

573
00:26:35,910 --> 00:26:39,030
if you haven't heard of beef or played

574
00:26:39,030 --> 00:26:41,130
around with beef then I recommend that

575
00:26:41,130 --> 00:26:45,180
you do it's especially for getting into

576
00:26:45,180 --> 00:26:47,240
cross-site scripting if you're doing

577
00:26:47,240 --> 00:26:50,670
like awareness training for fishing in

578
00:26:50,670 --> 00:26:53,160
your company that's it's also something

579
00:26:53,160 --> 00:26:54,210
that you want to play around with

580
00:26:54,210 --> 00:26:59,580
they're basically it what it does is it

581
00:26:59,580 --> 00:27:02,460
creates zombies that's what that funny

582
00:27:02,460 --> 00:27:04,080
yellow sign there that's actually

583
00:27:04,080 --> 00:27:06,260
supposed to be a zombie caution sign

584
00:27:06,260 --> 00:27:10,560
that's what i was told anyway so it it

585
00:27:10,560 --> 00:27:12,090
creates zombie browsers and then you can

586
00:27:12,090 --> 00:27:13,800
you can basically send commands to them

587
00:27:13,800 --> 00:27:14,790
it kind of like a command-and-control

588
00:27:14,790 --> 00:27:17,910
sort of thing and that's available on

589
00:27:17,910 --> 00:27:20,520
you'll find that on Cali and Samurai web

590
00:27:20,520 --> 00:27:22,350
testing framework and other places or

591
00:27:22,350 --> 00:27:26,100
you can just install it it's it's got

592
00:27:26,100 --> 00:27:27,720
some pretty cool functionality I'm not

593
00:27:27,720 --> 00:27:28,890
going to go through all that hero take a

594
00:27:28,890 --> 00:27:33,870
while I want to move on to a couple of

595
00:27:33,870 --> 00:27:36,620
other things so redirects and forwards

596
00:27:36,620 --> 00:27:39,090
so so far all I've talked about is

597
00:27:39,090 --> 00:27:41,130
cross-site scripting but there are other

598
00:27:41,130 --> 00:27:42,840
vulnerabilities that we can find in

599
00:27:42,840 --> 00:27:45,590
browser code one of them is as

600
00:27:45,590 --> 00:27:48,690
unvalidated redirects and forwards so

601
00:27:48,690 --> 00:27:50,100
redirects and forwards by themselves

602
00:27:50,100 --> 00:27:51,390
that's a normal part of how the web

603
00:27:51,390 --> 00:27:53,850
works we're always forwarding pages to

604
00:27:53,850 --> 00:27:57,090
other pages really common one to see and

605
00:27:57,090 --> 00:27:59,840
all use this as an example a moment is

606
00:27:59,840 --> 00:28:02,730
you go to a website and you get

607
00:28:02,730 --> 00:28:05,160
redirected to the login page okay it

608
00:28:05,160 --> 00:28:06,480
automatically is trying to help you out

609
00:28:06,480 --> 00:28:08,250
it's not going to make you click on

610
00:28:08,250 --> 00:28:09,810
another link if it doesn't have to just

611
00:28:09,810 --> 00:28:11,010
say okay well you're not logged in i'm

612
00:28:11,010 --> 00:28:12,330
going to redirect you to the login page

613
00:28:12,330 --> 00:28:15,420
and in addition to that will redirect

614
00:28:15,420 --> 00:28:17,670
you to the login page i will also let's

615
00:28:17,670 --> 00:28:19,560
just look at the example here i will

616
00:28:19,560 --> 00:28:21,780
also keep track of the URL that you

617
00:28:21,780 --> 00:28:26,010
first click done so that once you've

618
00:28:26,010 --> 00:28:27,330
logged in i can bring you back to where

619
00:28:27,330 --> 00:28:28,910
you were trying to go in the first place

620
00:28:28,910 --> 00:28:32,040
right so that's basically what we're

621
00:28:32,040 --> 00:28:34,050
doing there with it with a redirect now

622
00:28:34,050 --> 00:28:36,090
when we have so that's normal this is we

623
00:28:36,090 --> 00:28:37,590
see this all all over the place this is

624
00:28:37,590 --> 00:28:39,450
not a vulnerability by itself what is a

625
00:28:39,450 --> 00:28:42,660
vulnerability is unvalidated redirects

626
00:28:42,660 --> 00:28:44,400
and forwards so in this case here we're

627
00:28:44,400 --> 00:28:47,190
passing in a URL that's not actually

628
00:28:47,190 --> 00:28:49,200
part of the site it's to somewhere

629
00:28:49,200 --> 00:28:52,980
dangerous and evil and and what's going

630
00:28:52,980 --> 00:28:54,720
to happen of course is the user will get

631
00:28:54,720 --> 00:28:56,460
if they click on this link they'll get

632
00:28:56,460 --> 00:28:57,990
the login box they'll log in and then

633
00:28:57,990 --> 00:29:00,600
they'll end up over at evil hacks or dot

634
00:29:00,600 --> 00:29:04,860
org and trying to think of the tax

635
00:29:04,860 --> 00:29:06,360
scenarios where where this is

636
00:29:06,360 --> 00:29:09,270
particularly bad and I'll pick on the

637
00:29:09,270 --> 00:29:10,650
login form because that's my favorite

638
00:29:10,650 --> 00:29:14,520
place to find this we have something

639
00:29:14,520 --> 00:29:17,610
that I call the evil twin login so what

640
00:29:17,610 --> 00:29:20,100
we can do is take the original login

641
00:29:20,100 --> 00:29:22,260
page and replicate it somewhere else

642
00:29:22,260 --> 00:29:25,350
somewhere that we control and the user

643
00:29:25,350 --> 00:29:27,600
experience in this case is first they're

644
00:29:27,600 --> 00:29:29,910
going to get the they'll click on

645
00:29:29,910 --> 00:29:31,560
something they'll see the log in the log

646
00:29:31,560 --> 00:29:33,960
in and then they'll see the log in again

647
00:29:33,960 --> 00:29:35,880
it's like okay well maybe I typed it

648
00:29:35,880 --> 00:29:37,020
wrong or something right so they'll

649
00:29:37,020 --> 00:29:38,580
retype in their username and password

650
00:29:38,580 --> 00:29:40,050
and then they'll go back to wherever it

651
00:29:40,050 --> 00:29:41,250
is they were supposed to go in the first

652
00:29:41,250 --> 00:29:42,690
place what's happened of course

653
00:29:42,690 --> 00:29:44,340
underneath the covers is that second

654
00:29:44,340 --> 00:29:47,220
time they've logged in their URL changed

655
00:29:47,220 --> 00:29:49,680
so now they're actually sitting on evil

656
00:29:49,680 --> 00:29:52,170
hacker org and logged in with their

657
00:29:52,170 --> 00:29:56,430
credentials and gave them to me great

658
00:29:56,430 --> 00:29:59,180
place to find this sort of thing is on

659
00:29:59,180 --> 00:30:02,700
single sign-on solutions okay you

660
00:30:02,700 --> 00:30:04,620
probably won't find that too much on the

661
00:30:04,620 --> 00:30:07,980
big enterprise solutions that are sold

662
00:30:07,980 --> 00:30:11,400
out there now but but you know sometimes

663
00:30:11,400 --> 00:30:13,200
we find single sign-on solutions that

664
00:30:13,200 --> 00:30:16,410
are homegrown and users are accustomed

665
00:30:16,410 --> 00:30:19,830
to logging in on a fairly regular basis

666
00:30:19,830 --> 00:30:21,840
the same screen pops up all the time so

667
00:30:21,840 --> 00:30:23,420
if you can make use of that

668
00:30:23,420 --> 00:30:26,660
during a pen test it's one way to gather

669
00:30:26,660 --> 00:30:34,640
credentials pretty quickly you can

670
00:30:34,640 --> 00:30:38,480
combine the unvalidated redirects with

671
00:30:38,480 --> 00:30:41,030
cross-site scripting attacks or if you

672
00:30:41,030 --> 00:30:44,000
can then things might get a little more

673
00:30:44,000 --> 00:30:46,580
interesting you have potentially more

674
00:30:46,580 --> 00:30:50,360
convincing fishing links so you can you

675
00:30:50,360 --> 00:30:53,410
can bring them to a server that they

676
00:30:53,410 --> 00:30:56,060
that's part of their organization first

677
00:30:56,060 --> 00:30:58,070
and use the redirect flow net to get

678
00:30:58,070 --> 00:31:00,140
them on to some other server that has a

679
00:31:00,140 --> 00:31:02,420
cross-site scripting flaw so they'll see

680
00:31:02,420 --> 00:31:03,620
the link that they trust and they'll

681
00:31:03,620 --> 00:31:09,980
click it you may also be able to make

682
00:31:09,980 --> 00:31:12,320
use of this to help facilitate running

683
00:31:12,320 --> 00:31:15,650
across a scripting payload inside of the

684
00:31:15,650 --> 00:31:17,210
authenticated space and that that really

685
00:31:17,210 --> 00:31:19,130
goes to you know can can you add it on

686
00:31:19,130 --> 00:31:22,220
to that login URL so that the person

687
00:31:22,220 --> 00:31:23,840
logs in and then they activate the

688
00:31:23,840 --> 00:31:27,980
cross-site scripting flaw afterwards all

689
00:31:27,980 --> 00:31:37,190
right so redirects and forwards the next

690
00:31:37,190 --> 00:31:38,360
one the last one that we're going to

691
00:31:38,360 --> 00:31:43,120
talk about is cross-site request forgery

692
00:31:43,540 --> 00:31:48,310
csrf sometimes you'll see it excess RF

693
00:31:48,310 --> 00:31:50,810
basically this is a type of

694
00:31:50,810 --> 00:31:54,310
vulnerability that's its I think become

695
00:31:54,310 --> 00:31:56,450
there's a lot more awareness around it

696
00:31:56,450 --> 00:31:59,870
now I'm seeing in my pen test a lot of

697
00:31:59,870 --> 00:32:01,580
people will have controls for it built

698
00:32:01,580 --> 00:32:06,460
in to prevent it which is good to see

699
00:32:06,460 --> 00:32:08,600
but basically this has been around for a

700
00:32:08,600 --> 00:32:10,490
long time cross-site request forgery has

701
00:32:10,490 --> 00:32:11,990
been around as long as browsers have

702
00:32:11,990 --> 00:32:14,870
basically had tabs so it takes advantage

703
00:32:14,870 --> 00:32:17,780
of the fact that your browser is keeping

704
00:32:17,780 --> 00:32:19,280
track of multiple sessions at the same

705
00:32:19,280 --> 00:32:21,460
time

706
00:32:25,250 --> 00:32:27,809
okay so a cross-site request is a very

707
00:32:27,809 --> 00:32:29,580
normal part of the way the web works we

708
00:32:29,580 --> 00:32:32,130
do this sort of thing all the time right

709
00:32:32,130 --> 00:32:35,159
we have cases where we have content

710
00:32:35,159 --> 00:32:37,980
that's being put into an iframe or we

711
00:32:37,980 --> 00:32:41,070
have script tags or images these are all

712
00:32:41,070 --> 00:32:42,960
things where there's a request that goes

713
00:32:42,960 --> 00:32:45,929
out to some other site or can go out to

714
00:32:45,929 --> 00:32:47,490
another site and pull content into your

715
00:32:47,490 --> 00:32:51,289
page and that's it's set up that way so

716
00:32:51,289 --> 00:32:54,750
naturally we want to look at as you know

717
00:32:54,750 --> 00:32:56,070
hackers we want to look at what we can

718
00:32:56,070 --> 00:32:58,440
do to take advantage of what's normal

719
00:32:58,440 --> 00:33:00,840
and see if we can do something a little

720
00:33:00,840 --> 00:33:03,929
less normal with it so the forgery

721
00:33:03,929 --> 00:33:05,460
really begins with the sessions with the

722
00:33:05,460 --> 00:33:11,330
cookies okay so what we need and

723
00:33:11,330 --> 00:33:13,049
specifically I guess what we're really

724
00:33:13,049 --> 00:33:14,909
talking about here is is not the fact

725
00:33:14,909 --> 00:33:16,440
that there's cookies but the fact that

726
00:33:16,440 --> 00:33:18,330
the cookies our session cookies are

727
00:33:18,330 --> 00:33:21,450
often protecting functionality that's

728
00:33:21,450 --> 00:33:26,429
sensitive in nature so that could be

729
00:33:26,429 --> 00:33:30,029
your email it could be banking maybe

730
00:33:30,029 --> 00:33:33,659
healthcare records or you know a lot of

731
00:33:33,659 --> 00:33:35,250
the other stuff that's that's on the web

732
00:33:35,250 --> 00:33:41,909
anything that you log into the second

733
00:33:41,909 --> 00:33:43,649
component that we have need for

734
00:33:43,649 --> 00:33:45,690
cross-site request forgery to work is

735
00:33:45,690 --> 00:33:47,429
predictability and what I mean by that

736
00:33:47,429 --> 00:33:49,789
is we're trying to run a function and

737
00:33:49,789 --> 00:33:52,049
are the parameters for that function

738
00:33:52,049 --> 00:33:54,029
something that an attacker can guess

739
00:33:54,029 --> 00:33:57,210
because in general unless it's combined

740
00:33:57,210 --> 00:34:00,600
with with another vulnerability your

741
00:34:00,600 --> 00:34:04,889
cross site scripting is our your sorry

742
00:34:04,889 --> 00:34:08,369
your cross-site request forgery is not

743
00:34:08,369 --> 00:34:09,719
going to result in the attack or

744
00:34:09,719 --> 00:34:11,520
actually seeing the results of the

745
00:34:11,520 --> 00:34:14,520
requests that are forged that request is

746
00:34:14,520 --> 00:34:17,129
made from the victim's browser and it

747
00:34:17,129 --> 00:34:20,909
goes out to another tab so an example

748
00:34:20,909 --> 00:34:25,440
might be let's say I'm browsing the

749
00:34:25,440 --> 00:34:27,000
state let's say have logged in to my

750
00:34:27,000 --> 00:34:28,829
online banking account wherever it is

751
00:34:28,829 --> 00:34:32,310
and and then I've left that tab and I'm

752
00:34:32,310 --> 00:34:34,109
doing something else right we all

753
00:34:34,109 --> 00:34:35,760
multitask we got I don't know about you

754
00:34:35,760 --> 00:34:36,810
guys sometimes I have

755
00:34:36,810 --> 00:34:38,850
20 or 30 browser tabs open at the same

756
00:34:38,850 --> 00:34:41,850
time which is really bad practice makes

757
00:34:41,850 --> 00:34:43,350
you kind of open to this sort of thing a

758
00:34:43,350 --> 00:34:48,449
little bit more but we all do it and so

759
00:34:48,449 --> 00:34:51,000
I go to another one I go to a site

760
00:34:51,000 --> 00:34:53,969
that's been compromised and inside that

761
00:34:53,969 --> 00:34:57,450
site the an attacker has put together a

762
00:34:57,450 --> 00:35:00,240
a vector where they have let's say it's

763
00:35:00,240 --> 00:35:03,120
an iframe call or an image call back to

764
00:35:03,120 --> 00:35:07,860
a function on my online banking so it's

765
00:35:07,860 --> 00:35:10,020
maybe it's a post or a get that

766
00:35:10,020 --> 00:35:12,650
transfers funds over to their account

767
00:35:12,650 --> 00:35:14,760
what's going to happen of course is the

768
00:35:14,760 --> 00:35:16,290
browser's going to see that call it's

769
00:35:16,290 --> 00:35:18,990
going to say okay well it's coming from

770
00:35:18,990 --> 00:35:20,730
you you're already logged in i'm going

771
00:35:20,730 --> 00:35:22,200
to go ahead and send any cookies that

772
00:35:22,200 --> 00:35:25,080
belong to to that origin that i'm

773
00:35:25,080 --> 00:35:29,220
sending them to and and basically it

774
00:35:29,220 --> 00:35:31,230
gets processed behind-the-scenes the

775
00:35:31,230 --> 00:35:33,180
victim never sees the response their

776
00:35:33,180 --> 00:35:35,760
browser does but we can craft it so that

777
00:35:35,760 --> 00:35:38,490
they don't and as far as the browser is

778
00:35:38,490 --> 00:35:40,830
concerned it's a normal function it was

779
00:35:40,830 --> 00:35:45,270
supposed to be that way some key points

780
00:35:45,270 --> 00:35:48,900
about cross-site request forgery it you

781
00:35:48,900 --> 00:35:50,190
don't need any scripting at all to do

782
00:35:50,190 --> 00:35:51,270
across at request forgery attack I

783
00:35:51,270 --> 00:35:52,500
already said you can just put that

784
00:35:52,500 --> 00:35:55,170
inside of a source tag for like an

785
00:35:55,170 --> 00:35:59,160
iframe or an image so there's there's

786
00:35:59,160 --> 00:36:00,630
ways to construct cross-site request

787
00:36:00,630 --> 00:36:03,060
forgery with no scripting at all it also

788
00:36:03,060 --> 00:36:05,430
is not subject to the same origin policy

789
00:36:05,430 --> 00:36:09,810
because we can make use of this those

790
00:36:09,810 --> 00:36:11,310
mechanisms that I just mentioned that I

791
00:36:11,310 --> 00:36:14,160
previously said these things are not

792
00:36:14,160 --> 00:36:15,780
part of the same origin policy same

793
00:36:15,780 --> 00:36:22,020
origin policy does not apply so now

794
00:36:22,020 --> 00:36:23,910
there are situations where you might

795
00:36:23,910 --> 00:36:25,290
have cross-site scripting and cross-site

796
00:36:25,290 --> 00:36:27,060
request forgery combined together and

797
00:36:27,060 --> 00:36:31,550
that's those can be a lot of fun so

798
00:36:31,550 --> 00:36:34,560
really useful when you have the

799
00:36:34,560 --> 00:36:36,750
cross-site scripting and the cross-site

800
00:36:36,750 --> 00:36:40,710
request forgery on the same within the

801
00:36:40,710 --> 00:36:42,720
same origin if you think about it if you

802
00:36:42,720 --> 00:36:45,450
can inject a script and you have

803
00:36:45,450 --> 00:36:47,730
predictable sensitive functionality on

804
00:36:47,730 --> 00:36:50,730
there then you can even bypass

805
00:36:50,730 --> 00:36:53,190
most cross-site request forgery controls

806
00:36:53,190 --> 00:36:55,230
so something that previously might have

807
00:36:55,230 --> 00:36:58,500
been considered not vulnerable all of a

808
00:36:58,500 --> 00:37:00,180
sudden becomes vulnerable because if I

809
00:37:00,180 --> 00:37:02,190
can run a script on there that means I

810
00:37:02,190 --> 00:37:04,830
can make one call get let's say there is

811
00:37:04,830 --> 00:37:07,170
protected by a random token I can make a

812
00:37:07,170 --> 00:37:11,040
call get the random token resubmit that

813
00:37:11,040 --> 00:37:13,890
random token with with the sensitive

814
00:37:13,890 --> 00:37:18,390
function data and lo and behold I'm able

815
00:37:18,390 --> 00:37:21,090
to execute that function from within my

816
00:37:21,090 --> 00:37:24,660
cross-site scripting payload the other

817
00:37:24,660 --> 00:37:27,740
place where cross-site scripting and

818
00:37:27,740 --> 00:37:30,810
cross-site request forgery combined are

819
00:37:30,810 --> 00:37:33,660
pretty cool is when you have a chorus

820
00:37:33,660 --> 00:37:35,310
policy set up so I mentioned this before

821
00:37:35,310 --> 00:37:38,670
if if I have a course policy on a server

822
00:37:38,670 --> 00:37:40,619
that allows certain other servers to

823
00:37:40,619 --> 00:37:42,840
connect to it then vulnerabilities

824
00:37:42,840 --> 00:37:44,280
cross-site scripting vulnerabilities on

825
00:37:44,280 --> 00:37:46,530
those other servers basically become my

826
00:37:46,530 --> 00:37:49,410
problem as well so be very careful

827
00:37:49,410 --> 00:37:51,210
really the takeaway from that is be very

828
00:37:51,210 --> 00:37:54,390
careful with with your chorus policies

829
00:37:54,390 --> 00:37:58,740
don't don't accept origins that you

830
00:37:58,740 --> 00:38:06,649
can't trust right

831
00:38:07,010 --> 00:38:11,280
so another thing i mentioned beef before

832
00:38:11,280 --> 00:38:13,800
go back to beef and take a look at the

833
00:38:13,800 --> 00:38:16,620
the list of exploits on there and you'll

834
00:38:16,620 --> 00:38:19,620
probably notice i put red boxes around

835
00:38:19,620 --> 00:38:21,480
several of them here and this is just a

836
00:38:21,480 --> 00:38:24,240
partial list cross-site request forgery

837
00:38:24,240 --> 00:38:27,420
shows up a lot it's just it's a very

838
00:38:27,420 --> 00:38:31,050
common vector very common for if you can

839
00:38:31,050 --> 00:38:34,320
execute cross-site scripting flaws to

840
00:38:34,320 --> 00:38:35,820
make use of that to get elevated

841
00:38:35,820 --> 00:38:37,770
privileges or create a new account new

842
00:38:37,770 --> 00:38:39,060
admin account or something like that you

843
00:38:39,060 --> 00:38:42,330
see a lot of these on devices on your

844
00:38:42,330 --> 00:38:45,570
routers and it's basically just make

845
00:38:45,570 --> 00:38:48,600
taking advantage of these weaknesses

846
00:38:48,600 --> 00:38:59,310
together in a in a web interface so and

847
00:38:59,310 --> 00:39:01,920
I have one last little bit here one last

848
00:39:01,920 --> 00:39:04,770
combination we have cross-site request

849
00:39:04,770 --> 00:39:06,360
forgery along with an unvalidated

850
00:39:06,360 --> 00:39:09,720
redirect so cross-site request forgery i

851
00:39:09,720 --> 00:39:10,680
mentioned that's when you have multiple

852
00:39:10,680 --> 00:39:13,530
tabs open remember i always said i had

853
00:39:13,530 --> 00:39:16,830
to log into my online banking first and

854
00:39:16,830 --> 00:39:20,970
then if i then went to across that

855
00:39:20,970 --> 00:39:22,410
request for a page with a cross-site

856
00:39:22,410 --> 00:39:23,910
request forgery flaw in it it would be

857
00:39:23,910 --> 00:39:25,620
executed against that and send the

858
00:39:25,620 --> 00:39:28,310
cookies and activate the function so

859
00:39:28,310 --> 00:39:31,590
what a unvalidated redirect allows you

860
00:39:31,590 --> 00:39:35,250
to do is and again i'm picking on the

861
00:39:35,250 --> 00:39:39,720
login one is if you have the debt again

862
00:39:39,720 --> 00:39:42,240
on a part of a login functionality which

863
00:39:42,240 --> 00:39:46,010
is extremely common to have it then

864
00:39:46,010 --> 00:39:48,180
we're in a situation where we can ensure

865
00:39:48,180 --> 00:39:49,950
that the user actually logs in they

866
00:39:49,950 --> 00:39:52,440
authenticate first we can we can send

867
00:39:52,440 --> 00:39:54,080
them a fishing link they authenticate

868
00:39:54,080 --> 00:39:58,050
then the crossing request forgery flaw

869
00:39:58,050 --> 00:40:00,510
gets activated we transfer funds to

870
00:40:00,510 --> 00:40:04,520
ourselves and and then the victim is is

871
00:40:04,520 --> 00:40:06,630
unaware of anything that happened

872
00:40:06,630 --> 00:40:07,770
because they get redirected back to

873
00:40:07,770 --> 00:40:08,850
where they're supposed to be afterwards

874
00:40:08,850 --> 00:40:10,860
so from their perspective all they

875
00:40:10,860 --> 00:40:12,240
really see is it kind of flickered

876
00:40:12,240 --> 00:40:14,010
somewhere and then i came back to where

877
00:40:14,010 --> 00:40:15,060
i was supposed to be anyway so it's

878
00:40:15,060 --> 00:40:17,619
probably no big deal so

879
00:40:17,619 --> 00:40:23,940
it makes sense so there are some

880
00:40:23,940 --> 00:40:26,019
different ways you can combine things I

881
00:40:26,019 --> 00:40:27,910
actually put together this little sort

882
00:40:27,910 --> 00:40:32,230
of cheat sheet summarize everything that

883
00:40:32,230 --> 00:40:38,230
we talked about today I can make this

884
00:40:38,230 --> 00:40:41,099
available afterwards if anyone wants it

885
00:40:41,099 --> 00:40:44,799
and that's basically that's all I have

886
00:40:44,799 --> 00:40:47,799
so one thing I you know just like Dave I

887
00:40:47,799 --> 00:40:49,480
do have some giveaways here so I don't

888
00:40:49,480 --> 00:40:52,539
know if we have do you guys have

889
00:40:52,539 --> 00:40:56,859
questions let's do let's ask the

890
00:40:56,859 --> 00:40:58,390
questions for the giveaways first and

891
00:40:58,390 --> 00:41:12,390
then I'll come back and yes yep

892
00:41:13,160 --> 00:41:16,760
I guess I'm not understanding so

893
00:41:16,760 --> 00:41:34,849
basically the server it was so I'm not

894
00:41:34,849 --> 00:41:36,530
sure exactly where the flaw was in this

895
00:41:36,530 --> 00:41:53,960
case for IMDb but yes okay yeah so it

896
00:41:53,960 --> 00:41:55,640
could be a compromise library or it

897
00:41:55,640 --> 00:41:58,609
could be a flaw in how the how the

898
00:41:58,609 --> 00:42:01,250
website itself is designed so what we

899
00:42:01,250 --> 00:42:03,799
where we often run into this is store

900
00:42:03,799 --> 00:42:05,539
cross-site scripting where it's maybe a

901
00:42:05,539 --> 00:42:07,010
comment field or something along those

902
00:42:07,010 --> 00:42:08,960
lines that seems like that might be the

903
00:42:08,960 --> 00:42:11,839
case for the IMDb so if if there's

904
00:42:11,839 --> 00:42:14,630
somewhere in there where and I'm just I

905
00:42:14,630 --> 00:42:16,460
have no idea if this is where the flaw

906
00:42:16,460 --> 00:42:19,190
was I'm just guessing but but let's say

907
00:42:19,190 --> 00:42:21,380
I was able to comment on a particular

908
00:42:21,380 --> 00:42:25,039
movie and or an actor or something like

909
00:42:25,039 --> 00:42:27,170
that it then if I could actually put

910
00:42:27,170 --> 00:42:29,960
script tags into that comment and those

911
00:42:29,960 --> 00:42:33,859
script tags get executed to everyone

912
00:42:33,859 --> 00:42:35,990
else who views my comment and what

913
00:42:35,990 --> 00:42:38,720
happens is if I haven't it's not like

914
00:42:38,720 --> 00:42:40,460
I've compromised the server itself I've

915
00:42:40,460 --> 00:42:44,140
compromised the content on the website

916
00:42:44,140 --> 00:42:46,880
on that specific page right and so then

917
00:42:46,880 --> 00:42:48,799
it becomes a problem because everybody

918
00:42:48,799 --> 00:42:50,599
who visits that now they have my

919
00:42:50,599 --> 00:42:52,220
malicious code running inside their

920
00:42:52,220 --> 00:42:56,348
browser so

921
00:42:57,050 --> 00:42:59,110
you

922
00:43:10,970 --> 00:43:16,890
oh so how do you so question I think is

923
00:43:16,890 --> 00:43:20,760
is a how do you determine if if the if a

924
00:43:20,760 --> 00:43:22,770
cross-site route you know you're talking

925
00:43:22,770 --> 00:43:25,730
about the redirects

926
00:43:39,869 --> 00:43:42,849
is there any way to identify whether or

927
00:43:42,849 --> 00:43:45,249
not it's a legitimate login really the

928
00:43:45,249 --> 00:43:48,459
only thing is the browser itself so what

929
00:43:48,459 --> 00:43:50,589
what we usually do is we'll recommend if

930
00:43:50,589 --> 00:43:53,680
you're implementing it's a flaw in the

931
00:43:53,680 --> 00:43:55,559
implementation of the single sign-on so

932
00:43:55,559 --> 00:43:58,989
really the fix is to fix that flaw and

933
00:43:58,989 --> 00:44:00,309
then people don't have to worry about it

934
00:44:00,309 --> 00:44:03,539
but as an individual running across this

935
00:44:03,539 --> 00:44:06,910
if you're logging into something just

936
00:44:06,910 --> 00:44:08,410
check the URL bar make sure that you're

937
00:44:08,410 --> 00:44:09,579
actually logging into what you think

938
00:44:09,579 --> 00:44:11,859
you're logging into because it's really

939
00:44:11,859 --> 00:44:14,769
easy for me to take the HTML content off

940
00:44:14,769 --> 00:44:17,049
of any login page and replicate that on

941
00:44:17,049 --> 00:44:20,529
my own server right I just kind of an

942
00:44:20,529 --> 00:44:27,219
exercise and copy paste so cross-site

943
00:44:27,219 --> 00:44:33,609
request forgery that one that one can't

944
00:44:33,609 --> 00:44:36,130
be the user usually is a completely

945
00:44:36,130 --> 00:44:39,069
unaware so there's there's not anything

946
00:44:39,069 --> 00:44:42,670
that you can do as a individual to

947
00:44:42,670 --> 00:44:45,309
protect against that it's up to the

948
00:44:45,309 --> 00:44:47,529
organization and the onus usually falls

949
00:44:47,529 --> 00:44:50,049
on on the organization that's hosting

950
00:44:50,049 --> 00:44:52,930
that to ensure that that they don't have

951
00:44:52,930 --> 00:44:55,269
open cross-site request forgery flaws on

952
00:44:55,269 --> 00:44:56,650
there because that's going to impact

953
00:44:56,650 --> 00:45:00,099
them financially most likely or from a

954
00:45:00,099 --> 00:45:01,420
reputational standpoint to have

955
00:45:01,420 --> 00:45:04,410
something like that on there

956
00:45:08,470 --> 00:45:10,970
yeah so if you're looking at ways to

957
00:45:10,970 --> 00:45:14,510
protect against it go to again I

958
00:45:14,510 --> 00:45:16,850
mentioned at the beginning a loss so if

959
00:45:16,850 --> 00:45:18,860
you go to the olas website and look up

960
00:45:18,860 --> 00:45:23,470
cross-site request forgery defenses or

961
00:45:23,470 --> 00:45:29,600
or controls they have a pretty good

962
00:45:29,600 --> 00:45:31,010
description on there on the types of

963
00:45:31,010 --> 00:45:32,450
things that you can put in place to

964
00:45:32,450 --> 00:45:35,030
prevent that in your own code it's it's

965
00:45:35,030 --> 00:45:38,270
relatively easy fix for most people

966
00:45:38,270 --> 00:45:40,010
which is basically you have a token

967
00:45:40,010 --> 00:45:41,960
inside of inside of your form that's

968
00:45:41,960 --> 00:45:44,300
random in nature and then you check that

969
00:45:44,300 --> 00:45:46,030
token once once a form has been

970
00:45:46,030 --> 00:45:49,520
submitted to make sure that it matches

971
00:45:49,520 --> 00:45:51,410
what was in the in the hidden field and

972
00:45:51,410 --> 00:45:53,690
the reason is because we've gotten way

973
00:45:53,690 --> 00:45:55,610
remember I said predictability is is key

974
00:45:55,610 --> 00:45:56,810
to making cross-site request forgery

975
00:45:56,810 --> 00:45:58,820
work so all you need to do is make

976
00:45:58,820 --> 00:46:00,260
something that's not predictable to an

977
00:46:00,260 --> 00:46:03,530
attacker and and you have a control in

978
00:46:03,530 --> 00:46:05,600
place that will mitigate most cross-site

979
00:46:05,600 --> 00:46:11,260
request forgery attacks anything else

980
00:46:11,260 --> 00:46:16,250
all right i'll be in and around all day

981
00:46:16,250 --> 00:46:17,690
so if you have any other questions about

982
00:46:17,690 --> 00:46:20,210
web stuff or anything else or

983
00:46:20,210 --> 00:46:24,200
homebrewing even let me know let's do

984
00:46:24,200 --> 00:46:26,680
our giveaways

