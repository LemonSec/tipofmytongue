1
00:00:18,420 --> 00:00:20,699
containers and making sure that it

2
00:00:20,699 --> 00:00:22,920
doesn't exhaust the resources in a field

3
00:00:22,920 --> 00:00:25,019
it moves them around and gives it

4
00:00:25,019 --> 00:00:26,760
certain barriers and parameters of what

5
00:00:26,760 --> 00:00:29,340
it's allowed to do and once again we're

6
00:00:29,340 --> 00:00:30,960
talking about your infrastructure being

7
00:00:30,960 --> 00:00:33,960
cattle not a pet so if something goes

8
00:00:33,960 --> 00:00:37,460
wrong you just get another one

9
00:00:37,559 --> 00:00:40,739
so all of these things introduce a

10
00:00:40,739 --> 00:00:42,480
number of complexities

11
00:00:42,480 --> 00:00:45,300
primarily those being like from an IR

12
00:00:45,300 --> 00:00:48,300
perspective tracing what happened in a

13
00:00:48,300 --> 00:00:50,460
container all the way up through the

14
00:00:50,460 --> 00:00:52,739
stack back through like a kubernetes

15
00:00:52,739 --> 00:00:54,600
infrastructure or something like that is

16
00:00:54,600 --> 00:00:56,940
a real headache it's a very difficult

17
00:00:56,940 --> 00:00:59,699
thing to do and manage and you're also

18
00:00:59,699 --> 00:01:02,100
increasing the amount of layers of

19
00:01:02,100 --> 00:01:04,140
identities that you have to manage your

20
00:01:04,140 --> 00:01:06,780
environment and so the configuration of

21
00:01:06,780 --> 00:01:08,700
those identities and just tracing like

22
00:01:08,700 --> 00:01:11,460
who did what where and when it just gets

23
00:01:11,460 --> 00:01:13,500
a lot harder

24
00:01:13,500 --> 00:01:15,540
you're talking about a massive increase

25
00:01:15,540 --> 00:01:17,880
in logging for those who are in our

26
00:01:17,880 --> 00:01:19,320
Workshop

27
00:01:19,320 --> 00:01:21,960
um the the lab that you stood up an

28
00:01:21,960 --> 00:01:24,060
empty kubernetes cluster with full

29
00:01:24,060 --> 00:01:26,520
logging enabled is generating three

30
00:01:26,520 --> 00:01:29,580
megabytes of logs a second it comes out

31
00:01:29,580 --> 00:01:31,680
of the box with hundreds of Secrets

32
00:01:31,680 --> 00:01:34,860
already in it so keeping track of

33
00:01:34,860 --> 00:01:36,720
logging in a production environment is

34
00:01:36,720 --> 00:01:39,479
incredibly expensive and difficult to

35
00:01:39,479 --> 00:01:41,640
the point where many companies don't

36
00:01:41,640 --> 00:01:44,579
actually log everything like people tell

37
00:01:44,579 --> 00:01:46,500
them to just because it's not it's not

38
00:01:46,500 --> 00:01:48,479
affordable

39
00:01:48,479 --> 00:01:50,700
you have a change in your attack surface

40
00:01:50,700 --> 00:01:52,380
I'm not going to say if it's better or

41
00:01:52,380 --> 00:01:54,540
worse it's just different and different

42
00:01:54,540 --> 00:01:57,479
always means like starting over with

43
00:01:57,479 --> 00:01:58,920
trying to you know go through the

44
00:01:58,920 --> 00:02:00,899
process of finding everything that is

45
00:02:00,899 --> 00:02:02,579
wrong

46
00:02:02,579 --> 00:02:04,079
you got a lot of people who are

47
00:02:04,079 --> 00:02:05,579
migrating to these ephemeral

48
00:02:05,579 --> 00:02:07,740
environments migrating to clouds doing

49
00:02:07,740 --> 00:02:10,258
hybrid clouds you know most of that time

50
00:02:10,258 --> 00:02:11,640
that's being done by people who haven't

51
00:02:11,640 --> 00:02:13,920
done it before they're learning so you

52
00:02:13,920 --> 00:02:16,519
know stuff happens

53
00:02:16,739 --> 00:02:18,720
identity management features again

54
00:02:18,720 --> 00:02:22,220
because it is a real pain

55
00:02:22,319 --> 00:02:24,780
um and ephemeral instrumentation what

56
00:02:24,780 --> 00:02:26,459
we're talking about there is if you're

57
00:02:26,459 --> 00:02:28,280
running your business on shared hardware

58
00:02:28,280 --> 00:02:30,420
there are certain things from an IR

59
00:02:30,420 --> 00:02:33,239
perspective that are not possible to do

60
00:02:33,239 --> 00:02:36,060
because you can't snapshot a tenant that

61
00:02:36,060 --> 00:02:39,080
you share with other people

62
00:02:39,660 --> 00:02:41,819
so let's cover a bit about preparation

63
00:02:41,819 --> 00:02:43,739
for an issue when you've got like

64
00:02:43,739 --> 00:02:46,440
hackers or some kind of malware in these

65
00:02:46,440 --> 00:02:49,739
containerizer and ephemeral environments

66
00:02:49,739 --> 00:02:52,920
so preparation comes down to two main

67
00:02:52,920 --> 00:02:55,200
things we're talking about

68
00:02:55,200 --> 00:02:56,879
prevention that's sort of like your

69
00:02:56,879 --> 00:02:58,500
vulnerability management side of things

70
00:02:58,500 --> 00:03:01,200
but also your collection how you get

71
00:03:01,200 --> 00:03:02,640
ready to deal with these kinds of

72
00:03:02,640 --> 00:03:04,160
problems

73
00:03:04,160 --> 00:03:07,560
and there's a lot of steps to uh

74
00:03:07,560 --> 00:03:09,180
prevention but we're just going to cover

75
00:03:09,180 --> 00:03:11,700
a couple of the pink ones the first

76
00:03:11,700 --> 00:03:13,620
thing that generally speaking people

77
00:03:13,620 --> 00:03:17,099
don't do is create an incident response

78
00:03:17,099 --> 00:03:19,379
project within their cloud provider

79
00:03:19,379 --> 00:03:22,440
which has pre-configured sets of rules

80
00:03:22,440 --> 00:03:25,260
of like containment within that

81
00:03:25,260 --> 00:03:27,659
environment of like this project space

82
00:03:27,659 --> 00:03:31,680
has the capability to pull any container

83
00:03:31,680 --> 00:03:34,800
or any host out of another part of the

84
00:03:34,800 --> 00:03:37,319
business and pull it over here so that

85
00:03:37,319 --> 00:03:39,480
your forensics people can stare at it

86
00:03:39,480 --> 00:03:41,700
and do things to it or just like see

87
00:03:41,700 --> 00:03:44,099
what's gone wrong most people don't have

88
00:03:44,099 --> 00:03:46,319
that in advance and when you don't have

89
00:03:46,319 --> 00:03:47,940
that in advance then you have to do it

90
00:03:47,940 --> 00:03:50,459
on the Fly which is like difficult and a

91
00:03:50,459 --> 00:03:51,540
pain because you probably don't have

92
00:03:51,540 --> 00:03:52,980
permission

93
00:03:52,980 --> 00:03:56,580
CI CD controls are really important if

94
00:03:56,580 --> 00:03:59,700
you are discover if you are using your

95
00:03:59,700 --> 00:04:03,599
live environment to detect like issues

96
00:04:03,599 --> 00:04:05,400
where attackers are trying to enumerate

97
00:04:05,400 --> 00:04:07,680
permissions like seeing if they can

98
00:04:07,680 --> 00:04:10,319
mount the host file system or trying to

99
00:04:10,319 --> 00:04:13,260
start a privileged process those look

100
00:04:13,260 --> 00:04:15,420
the same as when developers are figuring

101
00:04:15,420 --> 00:04:17,880
out how to do kubernetes so you're going

102
00:04:17,880 --> 00:04:20,519
to have thousands of log events a day of

103
00:04:20,519 --> 00:04:22,620
people trying to do a thing while they

104
00:04:22,620 --> 00:04:24,780
learn but then you can't tell the

105
00:04:24,780 --> 00:04:28,440
difference between them and an attacker

106
00:04:28,440 --> 00:04:29,639
um David would you like to cover

107
00:04:29,639 --> 00:04:32,880
sandboxing and quarantining yeah um I

108
00:04:32,880 --> 00:04:34,139
just don't know about that so yeah the

109
00:04:34,139 --> 00:04:36,060
idea with these controls is just make

110
00:04:36,060 --> 00:04:37,560
sure you the developers are blocked

111
00:04:37,560 --> 00:04:38,880
before it gets into your environment so

112
00:04:38,880 --> 00:04:41,699
you don't have those alerts firing

113
00:04:41,699 --> 00:04:43,740
um the sandboxing and quarantine

114
00:04:43,740 --> 00:04:46,139
patterning is uh basically the idea of

115
00:04:46,139 --> 00:04:48,240
uh isolating your processes so you

116
00:04:48,240 --> 00:04:49,440
already have containerization you

117
00:04:49,440 --> 00:04:51,600
already have things isolated

118
00:04:51,600 --> 00:04:52,380
um

119
00:04:52,380 --> 00:04:54,960
you want to have sort of what he's

120
00:04:54,960 --> 00:04:56,880
talking about having that project you

121
00:04:56,880 --> 00:04:58,800
want to have something where you can

122
00:04:58,800 --> 00:05:00,960
label an environment label a workload

123
00:05:00,960 --> 00:05:03,060
say this is quarantine and make sure

124
00:05:03,060 --> 00:05:05,520
that no automated processes or

125
00:05:05,520 --> 00:05:07,500
other people come in and touch this

126
00:05:07,500 --> 00:05:09,960
workload because it's uh it's being

127
00:05:09,960 --> 00:05:11,460
under investigation think of it like

128
00:05:11,460 --> 00:05:13,380
putting crime scene tape up around uh

129
00:05:13,380 --> 00:05:18,300
around a like a crime obviously so

130
00:05:18,300 --> 00:05:20,759
the idea here is you want to set there's

131
00:05:20,759 --> 00:05:22,680
a set of things you want to put in place

132
00:05:22,680 --> 00:05:24,199
we'll cover later

133
00:05:24,199 --> 00:05:26,580
to make sure that that stuff that that

134
00:05:26,580 --> 00:05:29,220
gets touched yeah one of the beauties of

135
00:05:29,220 --> 00:05:32,160
kubernetes is you can in advance through

136
00:05:32,160 --> 00:05:34,620
preparation leverage a lot of Automation

137
00:05:34,620 --> 00:05:36,900
in the IR process you can you can

138
00:05:36,900 --> 00:05:39,720
literally type a one-line command to

139
00:05:39,720 --> 00:05:42,840
quarantine a host and have kubernetes

140
00:05:42,840 --> 00:05:44,280
automatically go through a bunch of

141
00:05:44,280 --> 00:05:47,940
steps to like move workloads around

142
00:05:47,940 --> 00:05:48,539
um

143
00:05:48,539 --> 00:05:51,840
make sure that other like uh pods or

144
00:05:51,840 --> 00:05:54,600
containers aren't issued to that node

145
00:05:54,600 --> 00:05:56,160
that you're having problems with so

146
00:05:56,160 --> 00:05:58,440
you're not like having your workloads

147
00:05:58,440 --> 00:06:00,120
run next to a machine that you think

148
00:06:00,120 --> 00:06:02,580
might be infected

149
00:06:02,580 --> 00:06:04,620
security tools on the host is really

150
00:06:04,620 --> 00:06:06,180
important

151
00:06:06,180 --> 00:06:08,280
um sometimes you're seeing people that

152
00:06:08,280 --> 00:06:10,199
are running their security tools in the

153
00:06:10,199 --> 00:06:12,900
container with the workload which means

154
00:06:12,900 --> 00:06:14,639
that you're giving the attacker a lot of

155
00:06:14,639 --> 00:06:16,979
opportunities to with that and

156
00:06:16,979 --> 00:06:19,620
you're also giving the attacker a lot of

157
00:06:19,620 --> 00:06:21,180
opportunities

158
00:06:21,180 --> 00:06:24,300
to um like better understand what's

159
00:06:24,300 --> 00:06:25,740
happening in your environment and work

160
00:06:25,740 --> 00:06:27,240
around that

161
00:06:27,240 --> 00:06:29,280
so you really want to make sure that

162
00:06:29,280 --> 00:06:31,500
your security tools are up one layer out

163
00:06:31,500 --> 00:06:34,080
of the container looking in now the

164
00:06:34,080 --> 00:06:36,419
problem with when you do that is you've

165
00:06:36,419 --> 00:06:38,699
got now lower Fidelity of what your

166
00:06:38,699 --> 00:06:40,440
alerting looks like because it's outside

167
00:06:40,440 --> 00:06:43,080
of the container so a lot of traditional

168
00:06:43,080 --> 00:06:45,180
security tools tools really tend to fall

169
00:06:45,180 --> 00:06:48,479
over here because they're giving you low

170
00:06:48,479 --> 00:06:50,759
low Fidelity information and you can't

171
00:06:50,759 --> 00:06:53,039
tell what's going on very well there's

172
00:06:53,039 --> 00:06:55,259
some new technologies like ebpf that

173
00:06:55,259 --> 00:06:57,120
we'll cover in a moment that really

174
00:06:57,120 --> 00:06:59,580
increase the level of visibility you get

175
00:06:59,580 --> 00:07:02,759
whilst um keeping your tools further

176
00:07:02,759 --> 00:07:05,160
away from attackers

177
00:07:05,160 --> 00:07:07,400
foreign

178
00:07:09,720 --> 00:07:12,060
the incident response process hasn't

179
00:07:12,060 --> 00:07:14,100
really changed in its fundamentals it's

180
00:07:14,100 --> 00:07:16,440
just the processes you need to go on to

181
00:07:16,440 --> 00:07:17,940
look different

182
00:07:17,940 --> 00:07:19,919
you still need logs you still need live

183
00:07:19,919 --> 00:07:22,500
info and you still need disk info but

184
00:07:22,500 --> 00:07:24,360
the process of getting that is just a

185
00:07:24,360 --> 00:07:26,840
little different

186
00:07:27,240 --> 00:07:28,860
so

187
00:07:28,860 --> 00:07:31,440
in many of these like cloud or ephemeral

188
00:07:31,440 --> 00:07:33,479
environments you have some new logging

189
00:07:33,479 --> 00:07:35,039
sources that weren't available to you

190
00:07:35,039 --> 00:07:37,800
before most of them are like really well

191
00:07:37,800 --> 00:07:40,620
structured uh really easy to read and

192
00:07:40,620 --> 00:07:43,020
pretty good data sources but they can be

193
00:07:43,020 --> 00:07:46,620
kind of expensive to to collect so you

194
00:07:46,620 --> 00:07:49,259
need to make some decisions about like

195
00:07:49,259 --> 00:07:51,360
some of these sources and what you want

196
00:07:51,360 --> 00:07:53,039
from where because you really want to

197
00:07:53,039 --> 00:07:54,720
drop down on the amount of duplication

198
00:07:54,720 --> 00:07:58,280
of the same information

199
00:07:58,560 --> 00:08:00,840
and with that said it's like you don't

200
00:08:00,840 --> 00:08:03,120
want to ignore your application logs

201
00:08:03,120 --> 00:08:04,560
just because you can burn down the

202
00:08:04,560 --> 00:08:07,020
application and start over a thing you

203
00:08:07,020 --> 00:08:08,639
hear a lot of people say about ephemeral

204
00:08:08,639 --> 00:08:11,099
environments is oh if it gets hacked

205
00:08:11,099 --> 00:08:12,900
I'll just burn it down and spin up a new

206
00:08:12,900 --> 00:08:15,240
one and then it's like no harm no foul

207
00:08:15,240 --> 00:08:17,699
well the attacker will just come back

208
00:08:17,699 --> 00:08:19,560
through whatever mechanism got them

209
00:08:19,560 --> 00:08:21,660
there in the first place likely they'll

210
00:08:21,660 --> 00:08:23,340
just keep repeating that until they hit

211
00:08:23,340 --> 00:08:25,319
their end goals so you really don't want

212
00:08:25,319 --> 00:08:28,259
to just like neglect those sources of

213
00:08:28,259 --> 00:08:30,240
like data that you think you don't need

214
00:08:30,240 --> 00:08:32,479
anymore

215
00:08:33,599 --> 00:08:35,360
so

216
00:08:35,360 --> 00:08:38,339
collecting live info in these kinds of

217
00:08:38,339 --> 00:08:40,260
environments is certainly more difficult

218
00:08:40,260 --> 00:08:42,059
than it used to be

219
00:08:42,059 --> 00:08:45,000
and I think the main takeaway from this

220
00:08:45,000 --> 00:08:47,220
slide is you need to really be prepared

221
00:08:47,220 --> 00:08:49,260
that the reality is that you're going to

222
00:08:49,260 --> 00:08:51,240
have more than one container infected at

223
00:08:51,240 --> 00:08:54,240
once it's probably going to be multiple

224
00:08:54,240 --> 00:08:57,480
for a variety of reasons and being

225
00:08:57,480 --> 00:09:00,600
prepared to take uh like live info

226
00:09:00,600 --> 00:09:03,839
snapshots from multiple uh infected

227
00:09:03,839 --> 00:09:06,660
places at once is going to be key

228
00:09:06,660 --> 00:09:08,880
generally speaking one of the tools that

229
00:09:08,880 --> 00:09:10,380
helps you with this in these kinds of

230
00:09:10,380 --> 00:09:12,540
ephemeral environments is is called like

231
00:09:12,540 --> 00:09:16,019
a container sidecar this is basically a

232
00:09:16,019 --> 00:09:18,000
container that lives slightly outside of

233
00:09:18,000 --> 00:09:19,800
your workload container that say all the

234
00:09:19,800 --> 00:09:21,839
network traffic passes through and it

235
00:09:21,839 --> 00:09:23,580
gives you a place to like log and

236
00:09:23,580 --> 00:09:25,980
collect all that information the issue

237
00:09:25,980 --> 00:09:28,440
is that many places by the time the

238
00:09:28,440 --> 00:09:30,540
security team is brought in and said hey

239
00:09:30,540 --> 00:09:32,459
what do you need from these hosts to do

240
00:09:32,459 --> 00:09:35,160
your job and you say oh I need a sidecar

241
00:09:35,160 --> 00:09:37,920
that does XYZ the business turns around

242
00:09:37,920 --> 00:09:39,660
and says we're already running three

243
00:09:39,660 --> 00:09:42,300
sidecars we can't add a fourth because

244
00:09:42,300 --> 00:09:45,240
latency because cost because complexity

245
00:09:45,240 --> 00:09:47,100
and then now you have to figure

246
00:09:47,100 --> 00:09:49,580
something else out so

247
00:09:49,580 --> 00:09:52,320
involvement and preparedness early on is

248
00:09:52,320 --> 00:09:54,860
going to be key

249
00:09:55,440 --> 00:09:57,899
so with this collection this is

250
00:09:57,899 --> 00:09:59,760
generally speaking this is like a lot

251
00:09:59,760 --> 00:10:01,800
easier in Cloud environments because you

252
00:10:01,800 --> 00:10:03,839
can just like literally type A one-liner

253
00:10:03,839 --> 00:10:06,839
and snapshot a disk in like two seconds

254
00:10:06,839 --> 00:10:08,880
with containers it's a little different

255
00:10:08,880 --> 00:10:11,040
but the underlying file systems are

256
00:10:11,040 --> 00:10:12,240
going to be available through the

257
00:10:12,240 --> 00:10:15,420
provided a snapshot and snapping a disk

258
00:10:15,420 --> 00:10:17,459
in a regular environment you know that's

259
00:10:17,459 --> 00:10:19,800
no change there

260
00:10:19,800 --> 00:10:21,899
what I would say is

261
00:10:21,899 --> 00:10:24,300
you want to make sure that your

262
00:10:24,300 --> 00:10:26,700
snapshots it's going to be you're going

263
00:10:26,700 --> 00:10:29,100
to be doing incident response in an

264
00:10:29,100 --> 00:10:30,540
environment you're not familiar with it

265
00:10:30,540 --> 00:10:32,279
could be an application that's been

266
00:10:32,279 --> 00:10:33,600
affected at your business you've never

267
00:10:33,600 --> 00:10:35,760
even heard of because you have 3 000 of

268
00:10:35,760 --> 00:10:37,800
them you're going to need to be able to

269
00:10:37,800 --> 00:10:40,920
diff the the bad one against the good

270
00:10:40,920 --> 00:10:43,620
one or the known good one to just like

271
00:10:43,620 --> 00:10:45,300
narrow down the amount of stuff you have

272
00:10:45,300 --> 00:10:47,779
to look at

273
00:10:47,940 --> 00:10:49,680
so

274
00:10:49,680 --> 00:10:51,839
if you're if your plan is to do

275
00:10:51,839 --> 00:10:53,940
snapshots across your Fleet

276
00:10:53,940 --> 00:10:57,440
coming back to my earlier point about uh

277
00:10:57,440 --> 00:11:00,600
having an IR project that has

278
00:11:00,600 --> 00:11:03,600
permissions across the project space or

279
00:11:03,600 --> 00:11:05,579
across the fleet you know in AWS or

280
00:11:05,579 --> 00:11:08,700
gcloud or whatever it is is do you

281
00:11:08,700 --> 00:11:10,620
actually have permissions from a

282
00:11:10,620 --> 00:11:13,680
well-protected account to snapshot some

283
00:11:13,680 --> 00:11:15,240
host that you're worried about somewhere

284
00:11:15,240 --> 00:11:17,459
in like the retail side of the business

285
00:11:17,459 --> 00:11:19,980
right or are you are you gonna like have

286
00:11:19,980 --> 00:11:22,260
to go talk to seven different people in

287
00:11:22,260 --> 00:11:24,300
order to do that that's not going to be

288
00:11:24,300 --> 00:11:26,519
good enough when the time comes

289
00:11:26,519 --> 00:11:29,940
and definitely worth noting that any

290
00:11:29,940 --> 00:11:32,399
incident response tooling or process is

291
00:11:32,399 --> 00:11:36,120
like hella powerful so make sure that

292
00:11:36,120 --> 00:11:37,740
those accounts are well protected and

293
00:11:37,740 --> 00:11:39,540
audited themselves so that you aren't

294
00:11:39,540 --> 00:11:42,439
the cause of the problem

295
00:11:43,740 --> 00:11:46,019
uh here's a visualization of what I'm

296
00:11:46,019 --> 00:11:48,540
talking about here so in Google cloud or

297
00:11:48,540 --> 00:11:51,839
AWS this is the typical structure of

298
00:11:51,839 --> 00:11:54,480
what the project spaces look like each

299
00:11:54,480 --> 00:11:58,440
line of business or project within your

300
00:11:58,440 --> 00:12:01,320
company is going to have different uh

301
00:12:01,320 --> 00:12:03,959
like project buckets it's mainly done

302
00:12:03,959 --> 00:12:06,180
this way for billing purposes so we can

303
00:12:06,180 --> 00:12:08,519
see if the factor is spending a lot more

304
00:12:08,519 --> 00:12:11,220
money than the retail side or if the IT

305
00:12:11,220 --> 00:12:14,279
team is like spending too much money but

306
00:12:14,279 --> 00:12:16,440
within this you'll have a forensic space

307
00:12:16,440 --> 00:12:18,959
that'll have permissions to reach out

308
00:12:18,959 --> 00:12:20,820
and touch things in other places and

309
00:12:20,820 --> 00:12:23,360
pull them in

310
00:12:24,480 --> 00:12:28,740
so a quick note on kubernetes logs

311
00:12:28,740 --> 00:12:32,220
so here's an abstraction of a very basic

312
00:12:32,220 --> 00:12:36,180
kubernetes cluster with one node

313
00:12:36,180 --> 00:12:39,480
uh you know a normal business might have

314
00:12:39,480 --> 00:12:44,040
you know 10 000 nodes but each each node

315
00:12:44,040 --> 00:12:46,500
has these logging components and you can

316
00:12:46,500 --> 00:12:49,380
see that their your container run time

317
00:12:49,380 --> 00:12:52,019
and your pod loggings these are

318
00:12:52,019 --> 00:12:53,940
additional logs on top of what you were

319
00:12:53,940 --> 00:12:55,320
collecting before

320
00:12:55,320 --> 00:12:57,360
and all of this is being logged through

321
00:12:57,360 --> 00:13:00,839
a Daemon set to the control plane now a

322
00:13:00,839 --> 00:13:02,639
quick note on Damon sets that's really

323
00:13:02,639 --> 00:13:04,260
really neat

324
00:13:04,260 --> 00:13:05,579
is

325
00:13:05,579 --> 00:13:09,899
a Daemon set is set in in in the uh in

326
00:13:09,899 --> 00:13:12,300
like the Manifest file that you deploy

327
00:13:12,300 --> 00:13:14,700
with kubernetes which is the list of

328
00:13:14,700 --> 00:13:16,680
instructions of what you want kubernetes

329
00:13:16,680 --> 00:13:18,360
to do and where

330
00:13:18,360 --> 00:13:22,139
and this diamond set basically says that

331
00:13:22,139 --> 00:13:24,240
every resource needs to have these

332
00:13:24,240 --> 00:13:27,060
minimum things installed on it so you

333
00:13:27,060 --> 00:13:29,459
can use this as a CI CD control where

334
00:13:29,459 --> 00:13:32,279
you can say in GitHub or whatever you

335
00:13:32,279 --> 00:13:34,920
use as a CI Runner

336
00:13:34,920 --> 00:13:38,700
every single thing in my business better

337
00:13:38,700 --> 00:13:42,360
have a manifest file where a diamond set

338
00:13:42,360 --> 00:13:44,820
is listed as our like scene like Splunk

339
00:13:44,820 --> 00:13:47,880
or you know whatever tool you use for

340
00:13:47,880 --> 00:13:50,040
doing that that means some application

341
00:13:50,040 --> 00:13:52,019
you've never even heard of within the

342
00:13:52,019 --> 00:13:54,779
business won't be able to deploy unless

343
00:13:54,779 --> 00:13:56,700
they meet your minimum requirements

344
00:13:56,700 --> 00:13:58,680
which is going to be really really

345
00:13:58,680 --> 00:14:02,060
important and easy and fun

346
00:14:02,540 --> 00:14:06,480
so audit logging and kubernetes you see

347
00:14:06,480 --> 00:14:10,380
advice all the time from you know

348
00:14:10,380 --> 00:14:13,200
everyone is just like turn on kubernetes

349
00:14:13,200 --> 00:14:15,540
audit logging if you go to your business

350
00:14:15,540 --> 00:14:17,760
right now and turn on kubernetes audit

351
00:14:17,760 --> 00:14:19,800
logging full audit logging you'll

352
00:14:19,800 --> 00:14:21,480
probably send the place broke by the end

353
00:14:21,480 --> 00:14:25,800
of the month it's extremely expensive

354
00:14:25,800 --> 00:14:27,540
you need to make really careful

355
00:14:27,540 --> 00:14:29,940
decisions based upon the logging you're

356
00:14:29,940 --> 00:14:31,920
getting elsewhere about what you can

357
00:14:31,920 --> 00:14:34,139
afford to get out of kubernetes logs

358
00:14:34,139 --> 00:14:36,060
when you're running like full request

359
00:14:36,060 --> 00:14:38,760
response logging like I said an empty

360
00:14:38,760 --> 00:14:40,920
cluster is generating three Megs of logs

361
00:14:40,920 --> 00:14:43,860
every second so a very large business

362
00:14:43,860 --> 00:14:45,899
might be running you know 50 million

363
00:14:45,899 --> 00:14:47,639
dollars worth of kubernetes logs a month

364
00:14:47,639 --> 00:14:50,399
like that would be pretty much part of

365
00:14:50,399 --> 00:14:52,699
the course

366
00:14:53,399 --> 00:14:55,440
when we talk about what these logs in

367
00:14:55,440 --> 00:14:58,560
kubernetes look like it's really nice

368
00:14:58,560 --> 00:15:00,779
human readable Json

369
00:15:00,779 --> 00:15:04,079
and all kubernetes is making on the back

370
00:15:04,079 --> 00:15:06,240
end to do things there's a bunch of HTTP

371
00:15:06,240 --> 00:15:09,120
web requests so you can quickly look at

372
00:15:09,120 --> 00:15:11,519
this and see what is happening with a

373
00:15:11,519 --> 00:15:13,380
you know like a create command you can

374
00:15:13,380 --> 00:15:15,899
see the who what when where why so you

375
00:15:15,899 --> 00:15:17,760
can see why everyone says turn on full

376
00:15:17,760 --> 00:15:19,740
audit logging because all the

377
00:15:19,740 --> 00:15:21,360
information is right there and it's

378
00:15:21,360 --> 00:15:23,760
super easy but yeah you're going to want

379
00:15:23,760 --> 00:15:26,579
to balance this against joining logs

380
00:15:26,579 --> 00:15:28,320
from different sources in order to save

381
00:15:28,320 --> 00:15:31,339
money unfortunately

382
00:15:32,480 --> 00:15:34,100
so

383
00:15:34,100 --> 00:15:36,540
container forensics you know you've used

384
00:15:36,540 --> 00:15:38,040
your logging and you know you've got a

385
00:15:38,040 --> 00:15:39,800
problem

386
00:15:39,800 --> 00:15:42,959
unfortunately we can't just burn it down

387
00:15:42,959 --> 00:15:45,120
and start over we do need to be able to

388
00:15:45,120 --> 00:15:47,519
tell a story about what happened it

389
00:15:47,519 --> 00:15:49,860
won't be good enough to just say yeah we

390
00:15:49,860 --> 00:15:51,240
just burnt that down we don't really

391
00:15:51,240 --> 00:15:52,500
know what happened and we're starting

392
00:15:52,500 --> 00:15:54,959
over that's probably not gonna you know

393
00:15:54,959 --> 00:15:57,380
cut it

394
00:15:57,839 --> 00:16:01,560
so some general notes is don't log into

395
00:16:01,560 --> 00:16:03,540
the container that you think is infected

396
00:16:03,540 --> 00:16:06,000
you can stay on the host machine but

397
00:16:06,000 --> 00:16:07,680
really you want to rely on your tools

398
00:16:07,680 --> 00:16:09,420
don't like literally log into the

399
00:16:09,420 --> 00:16:11,519
Container ideally should never decision

400
00:16:11,519 --> 00:16:13,920
anything right yeah or anything yeah

401
00:16:13,920 --> 00:16:17,279
ideally yeah

402
00:16:18,600 --> 00:16:23,160
so some of the strategies Dave yeah so

403
00:16:23,160 --> 00:16:24,180
um when you're dealing with the incident

404
00:16:24,180 --> 00:16:25,560
response you sort of have to have sort

405
00:16:25,560 --> 00:16:26,699
of a plan ahead of time you took your

406
00:16:26,699 --> 00:16:28,260
playbooks and and so what we have here

407
00:16:28,260 --> 00:16:30,000
is sort of like the logic or the

408
00:16:30,000 --> 00:16:32,519
reasoning behind sort of the the four

409
00:16:32,519 --> 00:16:36,480
main uh reactions to an event the first

410
00:16:36,480 --> 00:16:37,920
one is isolating that's the one we're

411
00:16:37,920 --> 00:16:39,120
talking about that's your best case

412
00:16:39,120 --> 00:16:40,620
scenario that's where you take a

413
00:16:40,620 --> 00:16:42,360
workload that's infected you move it

414
00:16:42,360 --> 00:16:44,579
somewhere are you are you isolated in

415
00:16:44,579 --> 00:16:45,899
such a way that it can't talk to other

416
00:16:45,899 --> 00:16:49,019
workloads and you're able to uh take

417
00:16:49,019 --> 00:16:50,519
your time look at what the attacker is

418
00:16:50,519 --> 00:16:52,440
doing find out what they're doing from

419
00:16:52,440 --> 00:16:54,060
there figure out what else they're they

420
00:16:54,060 --> 00:16:55,079
might be doing elsewhere in your

421
00:16:55,079 --> 00:16:56,579
environment

422
00:16:56,579 --> 00:16:57,480
um

423
00:16:57,480 --> 00:16:59,399
so that's your I that's your ideal

424
00:16:59,399 --> 00:17:00,899
that's what you want to do but there's

425
00:17:00,899 --> 00:17:02,220
cases where you may end up doing the

426
00:17:02,220 --> 00:17:03,779
other things the reasons the other was

427
00:17:03,779 --> 00:17:05,040
positive this is where you stop the

428
00:17:05,040 --> 00:17:07,319
workload but you don't destroy it uh

429
00:17:07,319 --> 00:17:10,140
that's the next best case scenario

430
00:17:10,140 --> 00:17:11,459
um the third one is so probably

431
00:17:11,459 --> 00:17:14,400
technically the uh the laziest which is

432
00:17:14,400 --> 00:17:16,140
just to restart the workload but you may

433
00:17:16,140 --> 00:17:18,119
end up getting overruled by somebody in

434
00:17:18,119 --> 00:17:19,380
business who says I just want things

435
00:17:19,380 --> 00:17:21,179
back up and running

436
00:17:21,179 --> 00:17:23,220
um and you just you don't have you don't

437
00:17:23,220 --> 00:17:25,439
have the choice of stopping things you

438
00:17:25,439 --> 00:17:26,699
have to just get the business backup and

439
00:17:26,699 --> 00:17:27,959
running so you sort of need to be

440
00:17:27,959 --> 00:17:29,820
prepared but even then you need to have

441
00:17:29,820 --> 00:17:31,320
sort of like a game plan on what

442
00:17:31,320 --> 00:17:33,840
collecting the forensics trying to keep

443
00:17:33,840 --> 00:17:37,740
the attacker uh important in and not

444
00:17:37,740 --> 00:17:39,780
spread throughout your environment uh

445
00:17:39,780 --> 00:17:42,960
the last one is killing everything uh

446
00:17:42,960 --> 00:17:44,880
killing your workloads

447
00:17:44,880 --> 00:17:47,760
this is basically the nightmare scenario

448
00:17:47,760 --> 00:17:50,280
where you end up uh you're trying to

449
00:17:50,280 --> 00:17:51,840
deal with something where the attackers

450
00:17:51,840 --> 00:17:53,820
like leaking data you have some

451
00:17:53,820 --> 00:17:54,900
information you have information

452
00:17:54,900 --> 00:17:57,480
compromise that kind of thing so a talk

453
00:17:57,480 --> 00:18:00,059
through like these a little more detail

454
00:18:00,059 --> 00:18:01,860
um when you talk about isolation we

455
00:18:01,860 --> 00:18:02,880
talked about there's a couple of

456
00:18:02,880 --> 00:18:05,880
strategies for this uh kubernetes has a

457
00:18:05,880 --> 00:18:07,440
concept called Courtney which I'll talk

458
00:18:07,440 --> 00:18:09,419
about in a minute but the idea is like

459
00:18:09,419 --> 00:18:11,400
the first thing you want to do is this

460
00:18:11,400 --> 00:18:13,200
applies to the VMS this applies to

461
00:18:13,200 --> 00:18:15,480
kubernetes as well apply a label to your

462
00:18:15,480 --> 00:18:18,360
uh environment label maybe it's a label

463
00:18:18,360 --> 00:18:19,980
you don't want these to be obvious to

464
00:18:19,980 --> 00:18:21,600
attack her oh I'm under investigation

465
00:18:21,600 --> 00:18:23,280
it's not something you want the attacker

466
00:18:23,280 --> 00:18:24,840
to see but it's something that would

467
00:18:24,840 --> 00:18:27,000
immediately say okay do not stop this do

468
00:18:27,000 --> 00:18:28,620
not stop or shut down or move or

469
00:18:28,620 --> 00:18:30,780
reschedule this workload keep it here

470
00:18:30,780 --> 00:18:32,580
keep it running and then based on that

471
00:18:32,580 --> 00:18:33,660
you might have some other automated

472
00:18:33,660 --> 00:18:35,220
processes in the following the first

473
00:18:35,220 --> 00:18:36,900
thing you want to do is if there's any

474
00:18:36,900 --> 00:18:38,700
security credentials tied to the Pod or

475
00:18:38,700 --> 00:18:40,320
the workload's in there you want to

476
00:18:40,320 --> 00:18:42,780
immediately maybe if you revoke revoke

477
00:18:42,780 --> 00:18:45,179
their access maybe keep them around but

478
00:18:45,179 --> 00:18:47,280
like don't just make it like change the

479
00:18:47,280 --> 00:18:48,120
roles

480
00:18:48,120 --> 00:18:50,340
for book taxes to keep the attacker in

481
00:18:50,340 --> 00:18:51,660
so they can't use those credentials

482
00:18:51,660 --> 00:18:54,240
elsewhere uh you can also create network

483
00:18:54,240 --> 00:18:58,080
policy rules to block egress aggressor

484
00:18:58,080 --> 00:18:59,760
egress especially to other portions of

485
00:18:59,760 --> 00:19:01,260
your environment like you don't want pod

486
00:19:01,260 --> 00:19:02,820
to pod communication going on that kind

487
00:19:02,820 --> 00:19:04,500
of thing

488
00:19:04,500 --> 00:19:06,419
um and then of course coordinating the

489
00:19:06,419 --> 00:19:08,760
node and draining other workflows off of

490
00:19:08,760 --> 00:19:10,740
it so

491
00:19:10,740 --> 00:19:13,380
um if you can't if you can't move it to

492
00:19:13,380 --> 00:19:16,200
a project what you do is you you make

493
00:19:16,200 --> 00:19:17,880
the node that it's running on the

494
00:19:17,880 --> 00:19:19,740
workloads of running on your uh

495
00:19:19,740 --> 00:19:21,059
effectively you make that your crime

496
00:19:21,059 --> 00:19:22,559
scene you get everything you give

497
00:19:22,559 --> 00:19:24,419
everyone else out and you you know start

498
00:19:24,419 --> 00:19:27,120
examining the body more or less

499
00:19:27,120 --> 00:19:29,039
um the other thing you want to do is

500
00:19:29,039 --> 00:19:30,780
start capturing any volatile artifacts

501
00:19:30,780 --> 00:19:34,140
ASAP this is basically what's in uh in

502
00:19:34,140 --> 00:19:37,380
memory if you have like logs that are

503
00:19:37,380 --> 00:19:38,760
gonna like the retention policies

504
00:19:38,760 --> 00:19:40,380
because of expense are like very

505
00:19:40,380 --> 00:19:42,000
short-lived you want to go ahead and

506
00:19:42,000 --> 00:19:43,620
start snapshotting those

507
00:19:43,620 --> 00:19:47,899
like within the window a certain window

508
00:19:49,260 --> 00:19:50,880
okay great

509
00:19:50,880 --> 00:19:51,799
um

510
00:19:51,799 --> 00:19:54,000
thank you

511
00:19:54,000 --> 00:19:57,299
uh so yeah this is just a quick demo of

512
00:19:57,299 --> 00:20:00,179
like doing a kubernetes important so

513
00:20:00,179 --> 00:20:01,860
yeah that idea between behind

514
00:20:01,860 --> 00:20:03,240
coordinating is you're just telling the

515
00:20:03,240 --> 00:20:05,460
scheduler inside of kubernetes do not

516
00:20:05,460 --> 00:20:08,160
put any more workloads on this on this

517
00:20:08,160 --> 00:20:11,100
uh worker node and once that's done then

518
00:20:11,100 --> 00:20:12,840
you can start draining other workloads

519
00:20:12,840 --> 00:20:14,700
off the ones that aren't infected or

520
00:20:14,700 --> 00:20:15,900
compromised

521
00:20:15,900 --> 00:20:19,559
so yeah sorry they're not compromised

522
00:20:19,559 --> 00:20:21,660
um next one

523
00:20:21,660 --> 00:20:24,360
the next the next strategy is pausing

524
00:20:24,360 --> 00:20:26,520
your workloads now if you're taking a

525
00:20:26,520 --> 00:20:28,500
snapshot generally the processes get

526
00:20:28,500 --> 00:20:30,600
paused anyway while you know capturing

527
00:20:30,600 --> 00:20:32,580
memory that kind of thing

528
00:20:32,580 --> 00:20:33,720
um

529
00:20:33,720 --> 00:20:35,100
the other thing you might want to do

530
00:20:35,100 --> 00:20:36,780
this for is if you're trying to if you

531
00:20:36,780 --> 00:20:39,720
have a workload like a a

532
00:20:39,720 --> 00:20:42,539
crypto Miner that's uh consuming a lot

533
00:20:42,539 --> 00:20:44,640
of resources that's where you want to

534
00:20:44,640 --> 00:20:45,960
pause a workload or a very least

535
00:20:45,960 --> 00:20:48,000
throttle it so it's not running up your

536
00:20:48,000 --> 00:20:48,860
bill

537
00:20:48,860 --> 00:20:50,880
[Music]

538
00:20:50,880 --> 00:20:53,400
but yeah it's possible you may want not

539
00:20:53,400 --> 00:20:55,260
want to do this because it may tip off

540
00:20:55,260 --> 00:20:58,160
an attacker that you're on

541
00:20:59,760 --> 00:21:00,960
um again this is the one we talked about

542
00:21:00,960 --> 00:21:01,980
the one you don't want to do is

543
00:21:01,980 --> 00:21:03,660
restarting it

544
00:21:03,660 --> 00:21:04,559
um

545
00:21:04,559 --> 00:21:06,059
it won't fix your problems the

546
00:21:06,059 --> 00:21:08,039
attacker's just going to come back uh

547
00:21:08,039 --> 00:21:09,600
the only white the only reason you may

548
00:21:09,600 --> 00:21:10,799
want to be doing restart is you're

549
00:21:10,799 --> 00:21:12,900
actually rolling out a face like you're

550
00:21:12,900 --> 00:21:15,000
redeploying or redeploying a new version

551
00:21:15,000 --> 00:21:16,580
of your application to fix the problem

552
00:21:16,580 --> 00:21:19,440
allow them in the first place

553
00:21:19,440 --> 00:21:21,299
and then of course this is the final

554
00:21:21,299 --> 00:21:23,160
option

555
00:21:23,160 --> 00:21:26,580
as uh your last report option which is

556
00:21:26,580 --> 00:21:28,679
just to kill the processes now a quick

557
00:21:28,679 --> 00:21:30,539
note here is that when you do something

558
00:21:30,539 --> 00:21:32,700
called a Docker stop it sends the

559
00:21:32,700 --> 00:21:34,919
process a nice kill signal well this may

560
00:21:34,919 --> 00:21:36,720
tip off the attacker that

561
00:21:36,720 --> 00:21:38,220
the process is being killed and they may

562
00:21:38,220 --> 00:21:40,460
have something automated to

563
00:21:40,460 --> 00:21:42,360
stay in your environment or whatever

564
00:21:42,360 --> 00:21:45,120
you're tipping it off so if you're doing

565
00:21:45,120 --> 00:21:46,980
a kill you want to do like the hard kill

566
00:21:46,980 --> 00:21:49,260
like basically the kill-9 where it just

567
00:21:49,260 --> 00:21:51,900
kills the process right away this is the

568
00:21:51,900 --> 00:21:54,000
thing you would do if you were uh there

569
00:21:54,000 --> 00:21:56,760
you see gotta x-fill or

570
00:21:56,760 --> 00:21:58,679
um they're compromised they've

571
00:21:58,679 --> 00:21:59,640
compromised your information they're

572
00:21:59,640 --> 00:22:03,240
changing the information in your systems

573
00:22:03,240 --> 00:22:04,919
um

574
00:22:04,919 --> 00:22:06,960
so let's talk a little bit about some

575
00:22:06,960 --> 00:22:08,880
fancy detection technologies that have

576
00:22:08,880 --> 00:22:11,460
come along to help simplify the process

577
00:22:11,460 --> 00:22:13,200
of seeing what's happening inside some

578
00:22:13,200 --> 00:22:15,299
of these ephemeral workloads where

579
00:22:15,299 --> 00:22:17,460
things have been extract abstracted and

580
00:22:17,460 --> 00:22:20,900
it's getting a little bit more difficult

581
00:22:21,240 --> 00:22:24,419
so ebpf was introduced into the Linux

582
00:22:24,419 --> 00:22:28,440
kernel in like December 2014 and it lets

583
00:22:28,440 --> 00:22:30,179
you extend the kernel that's the

584
00:22:30,179 --> 00:22:33,720
operating system without having to like

585
00:22:33,720 --> 00:22:36,960
literally own maintenance in the

586
00:22:36,960 --> 00:22:39,659
operating system which is something that

587
00:22:39,659 --> 00:22:42,299
most businesses do not want to do it's

588
00:22:42,299 --> 00:22:45,059
extremely involved and time consuming

589
00:22:45,059 --> 00:22:49,260
and breaks a lot uh it's very expensive

590
00:22:49,260 --> 00:22:54,260
so this was introduced as a way to

591
00:22:54,260 --> 00:22:57,539
get kernel level observability and

592
00:22:57,539 --> 00:23:00,059
control without having to clear that

593
00:23:00,059 --> 00:23:01,919
huge power of maintaining a kernel

594
00:23:01,919 --> 00:23:04,340
module

595
00:23:04,860 --> 00:23:09,059
so how evpf works is it's kind of like

596
00:23:09,059 --> 00:23:11,940
if you are sitting in a restaurant and

597
00:23:11,940 --> 00:23:13,260
you want to know what's happening in the

598
00:23:13,260 --> 00:23:14,100
kitchen

599
00:23:14,100 --> 00:23:16,200
uh you know like in the in the operating

600
00:23:16,200 --> 00:23:19,740
system of the of the place you you want

601
00:23:19,740 --> 00:23:21,539
to know you're not allowed to interact

602
00:23:21,539 --> 00:23:24,059
with like the stove or anything else

603
00:23:24,059 --> 00:23:26,159
inside the kitchen of the restaurant you

604
00:23:26,159 --> 00:23:28,080
don't work there you're not allowed

605
00:23:28,080 --> 00:23:30,960
with evpf you're basically putting an

606
00:23:30,960 --> 00:23:33,960
observing Chef in the kitchen who can

607
00:23:33,960 --> 00:23:36,120
touch everything in the kitchen open up

608
00:23:36,120 --> 00:23:38,220
and see what's going on and react

609
00:23:38,220 --> 00:23:41,720
appropriately and then let you know

610
00:23:43,980 --> 00:23:46,320
like a health inspector yeah like a

611
00:23:46,320 --> 00:23:47,880
health inspector

612
00:23:47,880 --> 00:23:51,960
so what is happening here is we can use

613
00:23:51,960 --> 00:23:54,780
evpf to monitor anything that's

614
00:23:54,780 --> 00:23:56,640
happening within the kernel that could

615
00:23:56,640 --> 00:23:59,220
be like system calls or network events

616
00:23:59,220 --> 00:24:02,159
or like any call to any kind of piece of

617
00:24:02,159 --> 00:24:04,020
Hardware or anything like that

618
00:24:04,020 --> 00:24:07,080
and we can report bits of that

619
00:24:07,080 --> 00:24:09,419
information that we choose back into the

620
00:24:09,419 --> 00:24:11,940
user space like back into the normal

621
00:24:11,940 --> 00:24:14,700
place where users live

622
00:24:14,700 --> 00:24:16,500
um

623
00:24:16,500 --> 00:24:19,620
this technology is being used also for

624
00:24:19,620 --> 00:24:22,260
root kits and malware as well

625
00:24:22,260 --> 00:24:24,840
um and so when you're talking about ebpf

626
00:24:24,840 --> 00:24:27,600
malware you're talking about some of the

627
00:24:27,600 --> 00:24:30,720
most resilient and stealthy pieces of

628
00:24:30,720 --> 00:24:33,720
malware that you can possibly imagine

629
00:24:33,720 --> 00:24:35,700
um I have some information about a

630
00:24:35,700 --> 00:24:37,919
particular instance of this that

631
00:24:37,919 --> 00:24:40,020
happened over the course of like eight

632
00:24:40,020 --> 00:24:42,419
years undetected

633
00:24:42,419 --> 00:24:45,299
but if you've ever used TCP dump you've

634
00:24:45,299 --> 00:24:47,220
used a tool called bvf under the wood

635
00:24:47,220 --> 00:24:50,820
basically and with evpf we've taken the

636
00:24:50,820 --> 00:24:54,299
concept of uh TCP dump and just applied

637
00:24:54,299 --> 00:24:56,220
it to every single thing within the

638
00:24:56,220 --> 00:24:58,320
operating system

639
00:24:58,320 --> 00:25:01,020
so when you make a little uh observing

640
00:25:01,020 --> 00:25:03,120
Chef to put in the kitchen what you're

641
00:25:03,120 --> 00:25:05,820
saying is you're basically creating a

642
00:25:05,820 --> 00:25:07,740
list of hooks of things that might

643
00:25:07,740 --> 00:25:09,240
happen within the system that you care

644
00:25:09,240 --> 00:25:12,240
about and saying when you see this event

645
00:25:12,240 --> 00:25:14,820
or this number of events or this type of

646
00:25:14,820 --> 00:25:18,260
event like let me know

647
00:25:19,320 --> 00:25:20,780
so

648
00:25:20,780 --> 00:25:24,360
evpf gives you really really deep and

649
00:25:24,360 --> 00:25:26,580
detailed views into what is happening

650
00:25:26,580 --> 00:25:28,500
within the operating system

651
00:25:28,500 --> 00:25:33,000
and because attackers can use ebpf2 it

652
00:25:33,000 --> 00:25:35,760
means that if an attacker is using ebpf

653
00:25:35,760 --> 00:25:39,000
and you are not they have better control

654
00:25:39,000 --> 00:25:42,900
of your computer than you do because if

655
00:25:42,900 --> 00:25:45,179
you are using a tool like say using a

656
00:25:45,179 --> 00:25:47,760
little program like PS to see a list of

657
00:25:47,760 --> 00:25:49,440
running processes

658
00:25:49,440 --> 00:25:52,080
well if the attacker is running ebpf

659
00:25:52,080 --> 00:25:55,860
malware they own whatever response that

660
00:25:55,860 --> 00:25:59,520
PS decides to give so you can't fight

661
00:25:59,520 --> 00:26:03,120
ebpf malware without evdf

662
00:26:03,120 --> 00:26:06,000
and because of the amount of like really

663
00:26:06,000 --> 00:26:08,279
really detailed viewing you get

664
00:26:08,279 --> 00:26:10,679
it really is one of the best ways to

665
00:26:10,679 --> 00:26:12,480
like stay on top of a handle or what's

666
00:26:12,480 --> 00:26:15,740
happening within your containers

667
00:26:16,200 --> 00:26:18,779
um in this gift here let me see which

668
00:26:18,779 --> 00:26:21,299
one is this okay what we've got here is

669
00:26:21,299 --> 00:26:24,000
a gif of a open source tool called Tracy

670
00:26:24,000 --> 00:26:28,200
which is a uh kind of like an open

671
00:26:28,200 --> 00:26:31,140
source EDI you could think of but for

672
00:26:31,140 --> 00:26:34,320
like containerized workloads and various

673
00:26:34,320 --> 00:26:36,840
things of that nature and all of its

674
00:26:36,840 --> 00:26:39,840
rules and detections are all ebpf based

675
00:26:39,840 --> 00:26:42,480
meaning that they can't be tricked by

676
00:26:42,480 --> 00:26:46,020
really really fancy rickets and you also

677
00:26:46,020 --> 00:26:48,960
get really really high fidelity alerting

678
00:26:48,960 --> 00:26:51,000
and detection that

679
00:26:51,000 --> 00:26:53,520
um it's very difficult for attackers to

680
00:26:53,520 --> 00:26:56,400
get around an example would be like a

681
00:26:56,400 --> 00:26:58,440
lot of tools like OS query and different

682
00:26:58,440 --> 00:26:59,700
things like that that are say like

683
00:26:59,700 --> 00:27:01,500
pulling the batch history off a machine

684
00:27:01,500 --> 00:27:03,179
and then looking for times where someone

685
00:27:03,179 --> 00:27:06,600
like carried some secret file could just

686
00:27:06,600 --> 00:27:08,820
be avoided by like using a space in

687
00:27:08,820 --> 00:27:10,980
front of your command or a little bit of

688
00:27:10,980 --> 00:27:12,900
obfuscation or you know calling it

689
00:27:12,900 --> 00:27:15,900
through platform first with these kinds

690
00:27:15,900 --> 00:27:17,880
of things because you're really looking

691
00:27:17,880 --> 00:27:20,460
for a call made from the kernel you

692
00:27:20,460 --> 00:27:22,679
can't you can't trip that right because

693
00:27:22,679 --> 00:27:24,419
at the end of the day all of those

694
00:27:24,419 --> 00:27:27,240
abstractions are doing system calls

695
00:27:27,240 --> 00:27:28,740
under the hood

696
00:27:28,740 --> 00:27:32,460
oh wait just to add a note to the evpf

697
00:27:32,460 --> 00:27:34,020
is that

698
00:27:34,020 --> 00:27:36,179
um we talked earlier about having a head

699
00:27:36,179 --> 00:27:39,900
sidecar uh sidecar pods or systems for

700
00:27:39,900 --> 00:27:43,200
monitoring potato monitoring also having

701
00:27:43,200 --> 00:27:44,520
to have security tools running inside

702
00:27:44,520 --> 00:27:46,140
your kubernetes environment with like

703
00:27:46,140 --> 00:27:48,659
elevated permissions evpf because it's

704
00:27:48,659 --> 00:27:50,460
running outside of it saves you that

705
00:27:50,460 --> 00:27:52,740
trouble you don't have to worry about

706
00:27:52,740 --> 00:27:54,299
giving some service account to the

707
00:27:54,299 --> 00:27:56,640
attacker might Target or exploit because

708
00:27:56,640 --> 00:27:58,080
it's in the kernel it's going to see

709
00:27:58,080 --> 00:27:59,640
everything from outside the kubernetes

710
00:27:59,640 --> 00:28:02,480
at the host level

711
00:28:03,059 --> 00:28:06,600
one really cool thing about evpf is

712
00:28:06,600 --> 00:28:08,539
because you're talking about

713
00:28:08,539 --> 00:28:12,960
well-structured data is there are a

714
00:28:12,960 --> 00:28:15,299
number of machine learning approaches or

715
00:28:15,299 --> 00:28:16,980
techniques that make quite a lot of

716
00:28:16,980 --> 00:28:19,620
sense to leverage alongside ebpf

717
00:28:19,620 --> 00:28:22,320
from a detection point of view a

718
00:28:22,320 --> 00:28:23,760
research point of view and like a

719
00:28:23,760 --> 00:28:26,580
rehearsing point of view you see a lot

720
00:28:26,580 --> 00:28:28,500
of strengths with behavioral profiling

721
00:28:28,500 --> 00:28:30,840
and anomaly detection

722
00:28:30,840 --> 00:28:33,740
um and I've been using ebpf in some

723
00:28:33,740 --> 00:28:36,539
reversing on some reversing related

724
00:28:36,539 --> 00:28:39,179
things to monitor processes

725
00:28:39,179 --> 00:28:40,980
and I'll give you an example of that

726
00:28:40,980 --> 00:28:42,059
shortly

727
00:28:42,059 --> 00:28:46,140
so we can use ebpf alongside machine

728
00:28:46,140 --> 00:28:47,820
learning tools in this example we're

729
00:28:47,820 --> 00:28:50,039
just using tensorflow

730
00:28:50,039 --> 00:28:53,400
to look for anomalies in the behavior of

731
00:28:53,400 --> 00:28:54,419
a process

732
00:28:54,419 --> 00:28:57,179
so this could be a this could be used in

733
00:28:57,179 --> 00:28:59,159
a defensive capacity or a research

734
00:28:59,159 --> 00:29:00,120
capacity

735
00:29:00,120 --> 00:29:03,360
in the example we've taken a baseline of

736
00:29:03,360 --> 00:29:05,820
the behavior of a password to a tool

737
00:29:05,820 --> 00:29:07,559
called keepass

738
00:29:07,559 --> 00:29:09,840
so for 30 minutes we use keepass

739
00:29:09,840 --> 00:29:12,659
normally and we just log all of the

740
00:29:12,659 --> 00:29:14,880
system calls that it makes into a

741
00:29:14,880 --> 00:29:17,880
histogram which is basically just a CSV

742
00:29:17,880 --> 00:29:22,440
and what happens then is we we train a

743
00:29:22,440 --> 00:29:24,899
model on that data it's just completely

744
00:29:24,899 --> 00:29:27,360
just just literally take the daughter as

745
00:29:27,360 --> 00:29:29,279
it is and train a model

746
00:29:29,279 --> 00:29:31,620
and then we start messing around with

747
00:29:31,620 --> 00:29:34,620
k-pops doing things like you know trying

748
00:29:34,620 --> 00:29:36,720
lots of wrong passwords consecutively

749
00:29:36,720 --> 00:29:39,200
and you can see after the learning step

750
00:29:39,200 --> 00:29:42,600
we save all of these samples and we do

751
00:29:42,600 --> 00:29:45,480
our malicious activity and the tool will

752
00:29:45,480 --> 00:29:47,220
start reporting to us

753
00:29:47,220 --> 00:29:50,460
any system calls that keep us makes that

754
00:29:50,460 --> 00:29:52,559
it wasn't making before

755
00:29:52,559 --> 00:29:55,320
so there's a lot of use cases for this

756
00:29:55,320 --> 00:29:56,820
as you can imagine if you're trying to

757
00:29:56,820 --> 00:30:00,000
like find errors or weird Behavior you

758
00:30:00,000 --> 00:30:01,140
know you could pair this with something

759
00:30:01,140 --> 00:30:03,659
like app armor or SEO Linux to refine

760
00:30:03,659 --> 00:30:06,240
your uh your ruling to get yourself like

761
00:30:06,240 --> 00:30:08,399
a nice runtime application security

762
00:30:08,399 --> 00:30:10,740
protection happening

763
00:30:10,740 --> 00:30:13,799
um I use this also against edrs the

764
00:30:13,799 --> 00:30:15,899
place I work uses

765
00:30:15,899 --> 00:30:18,360
um you know an EDR something like you

766
00:30:18,360 --> 00:30:20,220
know crowdstrike or Sentinel one or

767
00:30:20,220 --> 00:30:22,020
something like that

768
00:30:22,020 --> 00:30:24,840
you can actually just monitor the EDR

769
00:30:24,840 --> 00:30:27,539
process while you build malware and then

770
00:30:27,539 --> 00:30:30,240
since you can't see you know the EDR as

771
00:30:30,240 --> 00:30:32,220
a proprietary software but if you're

772
00:30:32,220 --> 00:30:34,740
monitoring on system calls you can be

773
00:30:34,740 --> 00:30:36,779
aware of when it starts opening a lot of

774
00:30:36,779 --> 00:30:39,059
sockets and phoning home to find out

775
00:30:39,059 --> 00:30:41,279
what to do or when it starts trying to

776
00:30:41,279 --> 00:30:43,799
like read things about your files you

777
00:30:43,799 --> 00:30:46,320
can literally see the uptick in system

778
00:30:46,320 --> 00:30:48,899
activity as an anomaly and then you know

779
00:30:48,899 --> 00:30:51,120
if you're on the right track or not with

780
00:30:51,120 --> 00:30:54,379
like hiding your malware

781
00:30:54,779 --> 00:30:59,820
so ebpf malware as I mentioned yeah

782
00:30:59,820 --> 00:31:01,799
one thing to note too is when you buy

783
00:31:01,799 --> 00:31:03,419
machine learning products they're going

784
00:31:03,419 --> 00:31:04,799
to have their stuff trained on like

785
00:31:04,799 --> 00:31:07,020
other environments the they're going to

786
00:31:07,020 --> 00:31:08,279
get more value out of trading your

787
00:31:08,279 --> 00:31:10,320
models on your own environment first

788
00:31:10,320 --> 00:31:12,240
yeah

789
00:31:12,240 --> 00:31:15,000
yeah thank you

790
00:31:15,000 --> 00:31:17,700
so ebpf malware is really really

791
00:31:17,700 --> 00:31:21,779
exciting uh area space so people make

792
00:31:21,779 --> 00:31:23,760
the argument that evpf malware isn't

793
00:31:23,760 --> 00:31:25,320
like that new or exciting because it's

794
00:31:25,320 --> 00:31:27,600
not that different to a rough chain but

795
00:31:27,600 --> 00:31:29,640
anyone who's ever used a Roth chain to

796
00:31:29,640 --> 00:31:32,279
try and like maintain persistence at a

797
00:31:32,279 --> 00:31:34,320
business is probably never particularly

798
00:31:34,320 --> 00:31:37,140
shocked when they come to come to uh use

799
00:31:37,140 --> 00:31:39,360
their uh Beacon one day and it's just

800
00:31:39,360 --> 00:31:40,919
not there right

801
00:31:40,919 --> 00:31:43,260
but with ebpf malware you have something

802
00:31:43,260 --> 00:31:44,880
that's embedded into the operating

803
00:31:44,880 --> 00:31:47,940
system it's past static analyzer checks

804
00:31:47,940 --> 00:31:51,120
it's now like part of the computer

805
00:31:51,120 --> 00:31:53,179
um it's extremely stable it's wireless

806
00:31:53,179 --> 00:31:57,059
and very very sneaky it only wakes up in

807
00:31:57,059 --> 00:31:58,919
order to react to something that

808
00:31:58,919 --> 00:32:01,320
happened so it's not just like actively

809
00:32:01,320 --> 00:32:03,960
burning all the time

810
00:32:03,960 --> 00:32:07,980
in uh around 2014 equation groups

811
00:32:07,980 --> 00:32:11,520
started using uh BPF malware the piece

812
00:32:11,520 --> 00:32:13,860
of mirror is called bvp47 if you want to

813
00:32:13,860 --> 00:32:14,880
look it up

814
00:32:14,880 --> 00:32:17,279
I have nine dots on the map but there's

815
00:32:17,279 --> 00:32:20,159
actually should be 45 dots

816
00:32:20,159 --> 00:32:22,799
um I just got tired of adding dots but

817
00:32:22,799 --> 00:32:25,440
this malware actually never got detected

818
00:32:25,440 --> 00:32:28,440
in the wild it was only discovered and

819
00:32:28,440 --> 00:32:32,220
like fully uncovered by pangu labs this

820
00:32:32,220 --> 00:32:35,220
year as a result of like secret keys

821
00:32:35,220 --> 00:32:37,620
that were uh leaked as part of like the

822
00:32:37,620 --> 00:32:40,200
shadow Brokers leak a few years ago so

823
00:32:40,200 --> 00:32:42,240
even with all of that leg up it was

824
00:32:42,240 --> 00:32:44,399
still so stealthy that it took a very

825
00:32:44,399 --> 00:32:46,860
long time to uncover

826
00:32:46,860 --> 00:32:50,940
and basically how it worked was it

827
00:32:50,940 --> 00:32:52,559
monitored

828
00:32:52,559 --> 00:32:57,600
the uh TCP drivers of the system and

829
00:32:57,600 --> 00:33:00,840
when it received how it received its

830
00:33:00,840 --> 00:33:03,659
commands and its instructions

831
00:33:03,659 --> 00:33:05,700
was it would

832
00:33:05,700 --> 00:33:08,159
uh the attacker would send

833
00:33:08,159 --> 00:33:12,419
a TCP packet to initiate a handshake

834
00:33:12,419 --> 00:33:14,820
that was actually out of the spec they

835
00:33:14,820 --> 00:33:18,120
added a data frame outside of you know

836
00:33:18,120 --> 00:33:19,860
the initial handshake

837
00:33:19,860 --> 00:33:22,860
and what that meant was the driver would

838
00:33:22,860 --> 00:33:24,779
say oh hey I've received this out of

839
00:33:24,779 --> 00:33:28,019
spec thing what do that exception woke

840
00:33:28,019 --> 00:33:31,200
up the bbp malware it read the commands

841
00:33:31,200 --> 00:33:33,720
executed them and then you know phone

842
00:33:33,720 --> 00:33:36,360
home if it needed a phone home and then

843
00:33:36,360 --> 00:33:38,340
it just went back to sleep again until

844
00:33:38,340 --> 00:33:40,740
it received another out of spec packet

845
00:33:40,740 --> 00:33:44,220
now if you're using IP tables rules to

846
00:33:44,220 --> 00:33:47,519
protect and close ports well the network

847
00:33:47,519 --> 00:33:49,679
driver is still receiving those packets

848
00:33:49,679 --> 00:33:53,340
even to employ support meaning that PVP

849
00:33:53,340 --> 00:33:57,139
malware can listen on a close port

850
00:33:58,740 --> 00:34:01,620
so I hope that you found some useful

851
00:34:01,620 --> 00:34:04,559
preparation steps within the store and

852
00:34:04,559 --> 00:34:07,919
uh you can leverage those in the future

853
00:34:07,919 --> 00:34:10,560
we have labs and resources all the labs

854
00:34:10,560 --> 00:34:13,139
that we did last night and at Defcon are

855
00:34:13,139 --> 00:34:15,960
available at that URL this talk will go

856
00:34:15,960 --> 00:34:17,460
up there shortly too but I believe it's

857
00:34:17,460 --> 00:34:20,159
being recorded anyway but you can use

858
00:34:20,159 --> 00:34:23,339
that to gather any additional resources

859
00:34:23,339 --> 00:34:26,280
you need yeah and then like cover the

860
00:34:26,280 --> 00:34:27,418
last Slide the main thing we want people

861
00:34:27,418 --> 00:34:29,159
to get is you don't want to be doing

862
00:34:29,159 --> 00:34:31,199
your first time you don't first time

863
00:34:31,199 --> 00:34:32,760
it's a response should not be in a live

864
00:34:32,760 --> 00:34:35,280
event there's lots of preparation and

865
00:34:35,280 --> 00:34:36,839
consideration needs to happen ahead of

866
00:34:36,839 --> 00:34:39,300
time especially with terms of preparing

867
00:34:39,300 --> 00:34:41,159
your environment for the event and

868
00:34:41,159 --> 00:34:43,199
having those uh things like the labeling

869
00:34:43,199 --> 00:34:45,260
automated processes and stuff like that

870
00:34:45,260 --> 00:34:48,000
setups that you can react very quickly

871
00:34:48,000 --> 00:34:49,739
because because the lower flows are

872
00:34:49,739 --> 00:34:50,879
ephemeral they're not going to sit

873
00:34:50,879 --> 00:34:52,980
around so long so the evidence may be

874
00:34:52,980 --> 00:34:54,540
destroyed just by the time you even be

875
00:34:54,540 --> 00:34:57,379
able to react to it or

876
00:34:58,020 --> 00:35:01,400
we can take a couple of questions

877
00:35:01,400 --> 00:35:04,400
I have 50 questions

878
00:35:04,400 --> 00:35:06,300
go ahead

879
00:35:06,300 --> 00:35:09,240
um cicd so I was on the other side of

880
00:35:09,240 --> 00:35:11,520
people stack a lot of containers and all

881
00:35:11,520 --> 00:35:12,599
that

882
00:35:12,599 --> 00:35:16,200
um so number one do you do the are there

883
00:35:16,200 --> 00:35:18,119
any good tools to scan your containers

884
00:35:18,119 --> 00:35:20,640
before you get them to production like

885
00:35:20,640 --> 00:35:23,760
would you recommend if you want them too

886
00:35:23,760 --> 00:35:27,119
how do you monitor cicd because I would

887
00:35:27,119 --> 00:35:30,660
run 50 times my CI to see something

888
00:35:30,660 --> 00:35:33,300
accomplished and deploy containers and

889
00:35:33,300 --> 00:35:36,000
then you know how can you monitor that

890
00:35:36,000 --> 00:35:37,859
and say it's not malicious it's a

891
00:35:37,859 --> 00:35:40,400
developer

892
00:35:40,820 --> 00:35:43,800
yeah so the first question is what are

893
00:35:43,800 --> 00:35:46,380
some tools that I can use in my CI

894
00:35:46,380 --> 00:35:49,380
pipeline to you know basically do kind

895
00:35:49,380 --> 00:35:51,060
of like vulnerability scanning on the

896
00:35:51,060 --> 00:35:53,160
containers or pods I'm going to deploy

897
00:35:53,160 --> 00:35:55,140
there's a few

898
00:35:55,140 --> 00:35:57,359
the first one that comes to mind is Sam

899
00:35:57,359 --> 00:35:59,579
graph it has a paid and open source

900
00:35:59,579 --> 00:36:01,680
version and it has out of the box on

901
00:36:01,680 --> 00:36:04,380
GitHub a number of rules of like safe

902
00:36:04,380 --> 00:36:07,079
container behavior and a number of like

903
00:36:07,079 --> 00:36:08,760
patterns and any patterns that you can

904
00:36:08,760 --> 00:36:12,780
use for that there's also a number of

905
00:36:12,780 --> 00:36:14,660
other products that are escaping my

906
00:36:14,660 --> 00:36:17,300
thoughts right now

907
00:36:17,300 --> 00:36:19,800
I know that there's a security tool in

908
00:36:19,800 --> 00:36:22,520
GitHub that doesn't as well yeah

909
00:36:22,520 --> 00:36:26,400
sneak uh s-y-n-k is another really good

910
00:36:26,400 --> 00:36:29,160
one with good sets of container rules

911
00:36:29,160 --> 00:36:32,760
the second question is how do I within

912
00:36:32,760 --> 00:36:36,900
my CI pipeline tell when a developer is

913
00:36:36,900 --> 00:36:39,300
the one behind the like malicious

914
00:36:39,300 --> 00:36:41,339
attempt of not an attacker yeah exactly

915
00:36:41,339 --> 00:36:43,980
because they could be deploying from CI

916
00:36:43,980 --> 00:36:47,119
to prequel or something

917
00:36:47,119 --> 00:36:50,040
yeah I mean times per day because

918
00:36:50,040 --> 00:36:51,720
they're testing yeah yeah that's where

919
00:36:51,720 --> 00:36:53,280
the answer to that so you kubernetes

920
00:36:53,280 --> 00:36:55,740
survival you can usually set up uh like

921
00:36:55,740 --> 00:36:58,160
web hooks or they have like sort of a

922
00:36:58,160 --> 00:37:00,359
admissions controller so it's like

923
00:37:00,359 --> 00:37:02,099
you're trying to like apply to pod to an

924
00:37:02,099 --> 00:37:03,900
environment it'll do checks on the

925
00:37:03,900 --> 00:37:05,880
hotspots to say are you defining

926
00:37:05,880 --> 00:37:07,560
resources so the other things you can

927
00:37:07,560 --> 00:37:09,599
see is like re mounting host volumes are

928
00:37:09,599 --> 00:37:12,839
you trying to uh make it a privileged a

929
00:37:12,839 --> 00:37:14,460
privileged pod which means it contains

930
00:37:14,460 --> 00:37:15,240
on the side will be running those

931
00:37:15,240 --> 00:37:17,040
privilege permissions

932
00:37:17,040 --> 00:37:18,720
um you can have those things set Place

933
00:37:18,720 --> 00:37:20,940
ahead of time so that the developer will

934
00:37:20,940 --> 00:37:23,220
get denied before deployment and that

935
00:37:23,220 --> 00:37:25,440
all your detections will only fire if it

936
00:37:25,440 --> 00:37:27,540
gets deployed

937
00:37:27,540 --> 00:37:29,640
it's also a question of provenance your

938
00:37:29,640 --> 00:37:31,800
question is like is the person pushing

939
00:37:31,800 --> 00:37:34,440
code the person pushing code so that

940
00:37:34,440 --> 00:37:36,000
really comes down to like what kind of

941
00:37:36,000 --> 00:37:37,920
authentication mechanisms are involved

942
00:37:37,920 --> 00:37:40,320
and signing is involved in pushing code

943
00:37:40,320 --> 00:37:42,540
like are you using web often and things

944
00:37:42,540 --> 00:37:45,359
like UB keys in order to authenticate to

945
00:37:45,359 --> 00:37:47,760
your get repos in order to push code and

946
00:37:47,760 --> 00:37:49,260
is there any signing on top of that

947
00:37:49,260 --> 00:37:51,359
right like these are the kind of things

948
00:37:51,359 --> 00:37:53,700
that help you like validate that the

949
00:37:53,700 --> 00:37:57,180
person doing the thing is that person

950
00:37:57,180 --> 00:37:58,260
thank you

951
00:37:58,260 --> 00:38:01,460
any other questions

952
00:38:05,640 --> 00:38:08,640
correlations

953
00:38:09,540 --> 00:38:11,760
yeah uh I'll imagine the back just said

954
00:38:11,760 --> 00:38:13,800
you can use the CI pipeline logs as well

955
00:38:13,800 --> 00:38:15,420
to help establish Providence about

956
00:38:15,420 --> 00:38:18,020
region one

957
00:38:20,160 --> 00:38:22,160
um

958
00:38:26,480 --> 00:38:29,760
all made us does behavioral profile and

959
00:38:29,760 --> 00:38:31,560
get easier or hotter and ephemeral

960
00:38:31,560 --> 00:38:33,960
workloads and I think the answer to that

961
00:38:33,960 --> 00:38:36,420
really has to do with how you can get

962
00:38:36,420 --> 00:38:38,099
your Baseline profiles in the first

963
00:38:38,099 --> 00:38:40,440
place like are your test cases like

964
00:38:40,440 --> 00:38:43,099
built out enough to help you get quality

965
00:38:43,099 --> 00:38:46,740
uh quality Baseline so I think the

966
00:38:46,740 --> 00:38:49,560
ephemerality doesn't really change too

967
00:38:49,560 --> 00:38:53,880
much what kind of yeah what kind of

968
00:38:53,880 --> 00:38:55,440
Baseline you can get

969
00:38:55,440 --> 00:38:57,540
but really A lot of these like these

970
00:38:57,540 --> 00:38:59,099
demos I showed of doing anomaly

971
00:38:59,099 --> 00:39:01,680
detection they definitely work on work

972
00:39:01,680 --> 00:39:04,560
really well if if you're just like

973
00:39:04,560 --> 00:39:06,300
messing around with it on things that

974
00:39:06,300 --> 00:39:08,820
don't change too much like let's say you

975
00:39:08,820 --> 00:39:11,280
ran a crypto exchange and you wanted to

976
00:39:11,280 --> 00:39:12,960
get like really detailed behavioral

977
00:39:12,960 --> 00:39:15,180
profiling you might put that just on

978
00:39:15,180 --> 00:39:17,640
like certain key features that don't

979
00:39:17,640 --> 00:39:20,339
change very often like access to a very

980
00:39:20,339 --> 00:39:22,619
particular resources rather than on

981
00:39:22,619 --> 00:39:25,140
everything so you start you start with

982
00:39:25,140 --> 00:39:26,880
like the Keys of the Kingdom that people

983
00:39:26,880 --> 00:39:28,859
don't touch much and then expand as you

984
00:39:28,859 --> 00:39:31,020
resources allow so

985
00:39:31,020 --> 00:39:32,940
education and then monitor those

986
00:39:32,940 --> 00:39:35,220
Behavior sets yeah like yeah if you have

987
00:39:35,220 --> 00:39:37,140
all you know if you have a very

988
00:39:37,140 --> 00:39:38,940
well-defined like authentication

989
00:39:38,940 --> 00:39:40,980
mechanism there's establishing doesn't

990
00:39:40,980 --> 00:39:42,960
change much that's also very easy to

991
00:39:42,960 --> 00:39:45,060
instrument because there's only like

992
00:39:45,060 --> 00:39:46,440
three or four things that they actually

993
00:39:46,440 --> 00:39:48,599
do

994
00:39:48,599 --> 00:39:51,060
and we've run out of time if you want we

995
00:39:51,060 --> 00:39:53,040
can ask more questions offline so let's

996
00:39:53,040 --> 00:39:55,579
thank our speaker

997
00:39:55,890 --> 00:39:59,020
[Applause]

998
00:40:04,020 --> 00:40:06,740
adults there

