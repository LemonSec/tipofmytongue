1
00:00:05,819 --> 00:00:08,580
hey everyone I've got Paul limey from

2
00:00:08,580 --> 00:00:10,320
tuteria and I'm going to be speaking on

3
00:00:10,320 --> 00:00:12,540
detectors as code

4
00:00:12,540 --> 00:00:14,280
all right I'm going to try to do this

5
00:00:14,280 --> 00:00:16,020
without a mic because I don't like using

6
00:00:16,020 --> 00:00:18,060
mics and I'm also going to try to speed

7
00:00:18,060 --> 00:00:20,400
run this uh presentation so

8
00:00:20,400 --> 00:00:22,560
hold on to any questions till the end uh

9
00:00:22,560 --> 00:00:25,140
real quick my name is Paul Ami I'm a

10
00:00:25,140 --> 00:00:27,060
co-founder of soteria my background I've

11
00:00:27,060 --> 00:00:29,400
done some work in the air force uh

12
00:00:29,400 --> 00:00:32,460
offense at the NSA and cybercom uh that

13
00:00:32,460 --> 00:00:34,320
work from JPMorgan and IRS and their

14
00:00:34,320 --> 00:00:37,739
defensive units uh also can really

15
00:00:37,739 --> 00:00:39,239
operate an edger and make a mean chicken

16
00:00:39,239 --> 00:00:40,680
tender if anybody wants anything like

17
00:00:40,680 --> 00:00:43,020
that but in my career I've done a lot of

18
00:00:43,020 --> 00:00:45,120
uh the offense defense and and special

19
00:00:45,120 --> 00:00:47,579
teams GRC type of stuff so I've kind of

20
00:00:47,579 --> 00:00:48,780
been around the block and done a lot of

21
00:00:48,780 --> 00:00:50,520
different stuff but today we're going to

22
00:00:50,520 --> 00:00:52,200
talk a bit about detection engineering

23
00:00:52,200 --> 00:00:54,480
so just uh setting the stage real quick

24
00:00:54,480 --> 00:00:57,780
for what is detection engineering uh to

25
00:00:57,780 --> 00:01:00,000
me it's really about going and trying to

26
00:01:00,000 --> 00:01:02,100
find the capabilities that you need to

27
00:01:02,100 --> 00:01:04,080
build in order to find bad things

28
00:01:04,080 --> 00:01:06,119
happening within within your environment

29
00:01:06,119 --> 00:01:08,460
right so it used to be that you would go

30
00:01:08,460 --> 00:01:11,460
buy uh you know whatever uh you know

31
00:01:11,460 --> 00:01:13,140
McAfee selling at the time install their

32
00:01:13,140 --> 00:01:15,000
antivirus and hope for the best you know

33
00:01:15,000 --> 00:01:17,100
throw a firewall in and you know you can

34
00:01:17,100 --> 00:01:19,380
go at it but for the last 10 years or so

35
00:01:19,380 --> 00:01:20,340
between

36
00:01:20,340 --> 00:01:24,420
you know EDR tools Sims ndr tools those

37
00:01:24,420 --> 00:01:26,180
types of things you can really build

38
00:01:26,180 --> 00:01:29,040
very customizable tools that are very

39
00:01:29,040 --> 00:01:30,479
unique to your environment can meet your

40
00:01:30,479 --> 00:01:33,180
needs so to me detection engineering is

41
00:01:33,180 --> 00:01:34,860
about figuring out what's out there on

42
00:01:34,860 --> 00:01:37,439
the market going out procuring those

43
00:01:37,439 --> 00:01:40,079
tools or installing them customizing

44
00:01:40,079 --> 00:01:41,460
those capabilities building your own

45
00:01:41,460 --> 00:01:43,979
rules detection logic so on and so forth

46
00:01:43,979 --> 00:01:46,560
testing verifying that they make to make

47
00:01:46,560 --> 00:01:48,180
sure that they work in your environment

48
00:01:48,180 --> 00:01:49,939
the way that you want them to

49
00:01:49,939 --> 00:01:52,020
maintaining them to keep up with threats

50
00:01:52,020 --> 00:01:53,579
and then you know when things don't make

51
00:01:53,579 --> 00:01:55,140
any sense from a cost benefit analysis

52
00:01:55,140 --> 00:01:57,000
anymore you get rid of them and go on so

53
00:01:57,000 --> 00:01:59,280
it's a life cycle and it's something

54
00:01:59,280 --> 00:02:02,220
that we have to have to keep up with but

55
00:02:02,220 --> 00:02:03,720
I want to talk about detectors as code

56
00:02:03,720 --> 00:02:05,159
and the way that we do detection

57
00:02:05,159 --> 00:02:06,960
engineering at soteria so we do a lot of

58
00:02:06,960 --> 00:02:09,119
MDR work manage detection and response

59
00:02:09,119 --> 00:02:11,099
where we're doing this on behalf of our

60
00:02:11,099 --> 00:02:12,300
customers

61
00:02:12,300 --> 00:02:14,040
and in order to make this scale we have

62
00:02:14,040 --> 00:02:16,020
to do a lot of this via code right so

63
00:02:16,020 --> 00:02:18,360
first and foremost why don't we just you

64
00:02:18,360 --> 00:02:21,599
know use the GUI right uh and and these

65
00:02:21,599 --> 00:02:22,680
are the reasons these are the things

66
00:02:22,680 --> 00:02:24,900
that I've seen over and over again as we

67
00:02:24,900 --> 00:02:25,800
looked into different security

68
00:02:25,800 --> 00:02:27,420
operations centers or looked at

69
00:02:27,420 --> 00:02:28,620
different people trying to defend their

70
00:02:28,620 --> 00:02:30,900
Networks you have people who just kind

71
00:02:30,900 --> 00:02:32,819
of log into their Sim they write a query

72
00:02:32,819 --> 00:02:34,140
they think this is a good query I'm

73
00:02:34,140 --> 00:02:35,700
going to save that and make it a

74
00:02:35,700 --> 00:02:37,860
detection capability or you can do the

75
00:02:37,860 --> 00:02:40,920
same thing via EDR or whatever and you

76
00:02:40,920 --> 00:02:42,660
uh you're left with a lot of questions

77
00:02:42,660 --> 00:02:44,340
one you don't really know what you have

78
00:02:44,340 --> 00:02:45,660
right you know you've got a lot of

79
00:02:45,660 --> 00:02:47,400
people who are going in there and saving

80
00:02:47,400 --> 00:02:50,640
rules uh creating new queries but if

81
00:02:50,640 --> 00:02:52,739
somebody said hey you know can we detect

82
00:02:52,739 --> 00:02:55,620
X right can we detect this new Microsoft

83
00:02:55,620 --> 00:02:57,900
Felina exploit that came out earlier

84
00:02:57,900 --> 00:02:59,940
this year uh you know everybody's kind

85
00:02:59,940 --> 00:03:01,620
of looking around at themselves and and

86
00:03:01,620 --> 00:03:03,239
uh you know maybe we can go and look at

87
00:03:03,239 --> 00:03:04,620
the list of queries but there's no real

88
00:03:04,620 --> 00:03:07,140
uh core base of knowledge of what the

89
00:03:07,140 --> 00:03:09,780
capabilities are in a given organization

90
00:03:09,780 --> 00:03:12,120
another one is you had no idea if these

91
00:03:12,120 --> 00:03:13,440
rules really work and that's really

92
00:03:13,440 --> 00:03:14,819
tricky in a lot of environments right

93
00:03:14,819 --> 00:03:16,620
you write a query it comes back with

94
00:03:16,620 --> 00:03:18,120
nothing and you're like well did we just

95
00:03:18,120 --> 00:03:21,060
not get popped or uh is this a bad rule

96
00:03:21,060 --> 00:03:23,400
I don't know so there's no real rigor

97
00:03:23,400 --> 00:03:24,599
around trying to figure that kind of

98
00:03:24,599 --> 00:03:25,500
thing out

99
00:03:25,500 --> 00:03:27,780
uh or the opposite can be true you put

100
00:03:27,780 --> 00:03:29,280
in this new detection capability and

101
00:03:29,280 --> 00:03:30,540
then the next thing you know your your

102
00:03:30,540 --> 00:03:32,280
Sims flooded because you've got you know

103
00:03:32,280 --> 00:03:34,440
10 000 hits coming in a second uh

104
00:03:34,440 --> 00:03:35,700
because you accidentally wrote a rule

105
00:03:35,700 --> 00:03:37,319
that will detect on any new processes

106
00:03:37,319 --> 00:03:40,560
launched within the environment uh and

107
00:03:40,560 --> 00:03:42,720
then uh and this has happened right uh

108
00:03:42,720 --> 00:03:44,459
and another thing is like mysterious

109
00:03:44,459 --> 00:03:46,799
alert so you have some genius uh you

110
00:03:46,799 --> 00:03:48,599
know Sim engineer who writes her her

111
00:03:48,599 --> 00:03:51,120
Rule and saves it and then uh then an

112
00:03:51,120 --> 00:03:52,260
alert fires in the middle of the night

113
00:03:52,260 --> 00:03:54,299
and your overnight analyst gets the

114
00:03:54,299 --> 00:03:55,500
alert and says what the hell do I do

115
00:03:55,500 --> 00:03:57,420
with this I don't know what this means

116
00:03:57,420 --> 00:03:59,700
how do I investigate this and you know

117
00:03:59,700 --> 00:04:01,860
it's pretty much worthless in that sense

118
00:04:01,860 --> 00:04:04,440
or somebody goes in they they make a

119
00:04:04,440 --> 00:04:06,060
change to a rule and it breaks

120
00:04:06,060 --> 00:04:07,500
everything but nobody remembers what it

121
00:04:07,500 --> 00:04:09,239
was like before and you're just kind of

122
00:04:09,239 --> 00:04:10,860
left there's uh stuck looking at it

123
00:04:10,860 --> 00:04:11,519
right

124
00:04:11,519 --> 00:04:13,680
so this is why we take a detectors as

125
00:04:13,680 --> 00:04:16,079
code methodology right you want to be

126
00:04:16,079 --> 00:04:18,418
able to track requirements uh from a

127
00:04:18,418 --> 00:04:20,699
detection standpoint from where did this

128
00:04:20,699 --> 00:04:22,079
requirement go to how did it get

129
00:04:22,079 --> 00:04:24,479
implemented and vice versa what is this

130
00:04:24,479 --> 00:04:26,220
detection can we track this back to the

131
00:04:26,220 --> 00:04:28,500
requirement that that made it exist in

132
00:04:28,500 --> 00:04:30,440
the first place having Source control

133
00:04:30,440 --> 00:04:33,840
using developer tools like git uh will

134
00:04:33,840 --> 00:04:36,240
allow you to have a full history of that

135
00:04:36,240 --> 00:04:37,919
detection capability from the time it

136
00:04:37,919 --> 00:04:39,960
was first created every change that was

137
00:04:39,960 --> 00:04:41,460
ever made and you can attribute each of

138
00:04:41,460 --> 00:04:43,259
those changes to individuals within your

139
00:04:43,259 --> 00:04:44,520
organization

140
00:04:44,520 --> 00:04:46,380
uh you can establish coding and

141
00:04:46,380 --> 00:04:48,000
documentation standards that way you

142
00:04:48,000 --> 00:04:50,040
make sure that when people create these

143
00:04:50,040 --> 00:04:52,560
new capabilities you have documentation

144
00:04:52,560 --> 00:04:54,720
to go along with it that way it survives

145
00:04:54,720 --> 00:04:57,540
past the the mind of whoever created in

146
00:04:57,540 --> 00:04:58,680
the first place

147
00:04:58,680 --> 00:05:00,540
uh you can do some unit testing and you

148
00:05:00,540 --> 00:05:02,400
can do some some continuous delivery

149
00:05:02,400 --> 00:05:04,680
type of stuff so all of this is really

150
00:05:04,680 --> 00:05:07,979
trying to implement these uh these these

151
00:05:07,979 --> 00:05:09,780
capabilities that software Engineers

152
00:05:09,780 --> 00:05:11,460
have been doing for years right like

153
00:05:11,460 --> 00:05:13,560
cicd is the buzzword that everybody uses

154
00:05:13,560 --> 00:05:15,780
and usually people are doing continuous

155
00:05:15,780 --> 00:05:17,240
deployment not necessarily integration

156
00:05:17,240 --> 00:05:19,919
but the software Engineers have been

157
00:05:19,919 --> 00:05:21,600
doing this forever and there's no reason

158
00:05:21,600 --> 00:05:24,240
why your your security operations team

159
00:05:24,240 --> 00:05:25,380
shouldn't be doing the same thing

160
00:05:25,380 --> 00:05:27,419
because it works and it fixed a lot of

161
00:05:27,419 --> 00:05:29,820
problems so uh we're going to talk about

162
00:05:29,820 --> 00:05:32,300
our approach how we go about

163
00:05:32,300 --> 00:05:34,500
implementing detectors as code at

164
00:05:34,500 --> 00:05:36,479
ceteria and we're going to talk about

165
00:05:36,479 --> 00:05:38,100
you know we've been doing this for five

166
00:05:38,100 --> 00:05:39,780
years and we've screwed up a lot so

167
00:05:39,780 --> 00:05:40,800
we're going to talk about some of the

168
00:05:40,800 --> 00:05:41,940
things that we've learned along the way

169
00:05:41,940 --> 00:05:43,680
and uh and how we've gotten better over

170
00:05:43,680 --> 00:05:45,360
the years okay

171
00:05:45,360 --> 00:05:48,120
so real quick uh just talking about our

172
00:05:48,120 --> 00:05:51,060
detection life cycle so this is a little

173
00:05:51,060 --> 00:05:52,560
bit oversimplified but at a high level

174
00:05:52,560 --> 00:05:54,419
this is how it works right first you

175
00:05:54,419 --> 00:05:56,520
have on on your upper left you have a

176
00:05:56,520 --> 00:05:58,199
new detector issue so somebody's got an

177
00:05:58,199 --> 00:06:00,780
idea or I read this thing on Twitter or

178
00:06:00,780 --> 00:06:04,919
Mastodon now I guess or uh you know some

179
00:06:04,919 --> 00:06:06,600
offset guy you know came up with this

180
00:06:06,600 --> 00:06:09,060
new technique that uh that he wants to

181
00:06:09,060 --> 00:06:11,699
know if we have a capability for so you

182
00:06:11,699 --> 00:06:13,380
say hey we got an idea can we detect

183
00:06:13,380 --> 00:06:14,940
this you go and research it say nope

184
00:06:14,940 --> 00:06:16,740
let's take a look

185
00:06:16,740 --> 00:06:18,360
then that gets passed over to your

186
00:06:18,360 --> 00:06:20,759
detection engineering team so they can

187
00:06:20,759 --> 00:06:22,319
go out and build this detector and that

188
00:06:22,319 --> 00:06:24,780
may mean using tools you already have to

189
00:06:24,780 --> 00:06:26,880
write a rule it may mean going out and

190
00:06:26,880 --> 00:06:29,039
procuring some new technology that to

191
00:06:29,039 --> 00:06:31,020
fill that Gap or some combination or

192
00:06:31,020 --> 00:06:33,180
changing the way you look at it but you

193
00:06:33,180 --> 00:06:34,979
have to uh to figure out how to develop

194
00:06:34,979 --> 00:06:36,479
this logic and this capability within

195
00:06:36,479 --> 00:06:37,740
your organization

196
00:06:37,740 --> 00:06:39,479
and then you're going to do testing

197
00:06:39,479 --> 00:06:40,800
right because we're not going to put

198
00:06:40,800 --> 00:06:42,120
anything in production without testing

199
00:06:42,120 --> 00:06:44,819
it right so we're going to find a way to

200
00:06:44,819 --> 00:06:46,979
test uh test these new capabilities

201
00:06:46,979 --> 00:06:48,720
against some sort of telemetry that we

202
00:06:48,720 --> 00:06:50,580
can generate to make sure that it works

203
00:06:50,580 --> 00:06:52,560
the way we want to and to make sure it's

204
00:06:52,560 --> 00:06:54,840
not you know Ultra false positive phone

205
00:06:54,840 --> 00:06:57,660
prone so it's not going to flood your

206
00:06:57,660 --> 00:06:59,220
team with a bunch of noise that's not

207
00:06:59,220 --> 00:07:00,180
useful

208
00:07:00,180 --> 00:07:01,979
then you can deploy it and you're going

209
00:07:01,979 --> 00:07:03,060
to learn lessons once you actually

210
00:07:03,060 --> 00:07:04,380
deploy this in production because

211
00:07:04,380 --> 00:07:06,360
nothing ever Works in testing like it

212
00:07:06,360 --> 00:07:08,100
does in production and it's going to

213
00:07:08,100 --> 00:07:09,720
just go around in that Circle and and

214
00:07:09,720 --> 00:07:11,460
you're going to continue to refine these

215
00:07:11,460 --> 00:07:12,720
things so

216
00:07:12,720 --> 00:07:15,720
phase one uh submitting new detectors

217
00:07:15,720 --> 00:07:18,419
right uh the way that we've done this is

218
00:07:18,419 --> 00:07:19,979
we just use jira right because we're

219
00:07:19,979 --> 00:07:21,419
we're trying to mimic the way that

220
00:07:21,419 --> 00:07:23,699
software Engineers do this and and

221
00:07:23,699 --> 00:07:25,380
really we just want a few different

222
00:07:25,380 --> 00:07:28,020
things one what are we trying to detect

223
00:07:28,020 --> 00:07:30,419
what should we be looking for in uh in

224
00:07:30,419 --> 00:07:32,759
this detection capability uh we want to

225
00:07:32,759 --> 00:07:34,319
have some labels and tags just to make

226
00:07:34,319 --> 00:07:35,639
it easy for us to categorize these

227
00:07:35,639 --> 00:07:37,020
things and report on them that's easy

228
00:07:37,020 --> 00:07:39,539
and then links to reference material

229
00:07:39,539 --> 00:07:42,240
where we have them so going back to some

230
00:07:42,240 --> 00:07:44,160
of our lessons learned over the years we

231
00:07:44,160 --> 00:07:45,539
used to have a whole lot more stuff that

232
00:07:45,539 --> 00:07:47,220
we would ask for when somebody submitted

233
00:07:47,220 --> 00:07:50,220
an issue like this and really it's just

234
00:07:50,220 --> 00:07:51,720
a barrier to entry nobody wants to write

235
00:07:51,720 --> 00:07:53,340
all that who can be bothered with uh

236
00:07:53,340 --> 00:07:55,440
with doing all this research right we

237
00:07:55,440 --> 00:07:56,699
were asking people to like go ahead and

238
00:07:56,699 --> 00:07:58,380
put all the miter attack IDs in there

239
00:07:58,380 --> 00:08:00,720
that apply to this tell us about all the

240
00:08:00,720 --> 00:08:02,639
potential false positives that might be

241
00:08:02,639 --> 00:08:04,680
able to come up and it's just uh you

242
00:08:04,680 --> 00:08:06,960
know nobody wants to do that right so we

243
00:08:06,960 --> 00:08:08,699
have we have offensive security folks

244
00:08:08,699 --> 00:08:10,500
you know we've got security advisors

245
00:08:10,500 --> 00:08:11,819
we've got people who just read blogs and

246
00:08:11,819 --> 00:08:14,039
what we wanted to do was create it in a

247
00:08:14,039 --> 00:08:15,360
way where anybody could go and just

248
00:08:15,360 --> 00:08:17,099
submit an idea and have a very low

249
00:08:17,099 --> 00:08:18,419
barrier to entry that way we could go

250
00:08:18,419 --> 00:08:19,860
and triage it

251
00:08:19,860 --> 00:08:21,960
uh another lesson that we learned is

252
00:08:21,960 --> 00:08:23,639
when we first started this we just did

253
00:08:23,639 --> 00:08:25,620
this for new detection capabilities and

254
00:08:25,620 --> 00:08:27,599
uh you know what we quickly learned is

255
00:08:27,599 --> 00:08:28,860
we're going to be doing a lot of tuning

256
00:08:28,860 --> 00:08:31,440
a lot of changing to existing rules so

257
00:08:31,440 --> 00:08:32,880
we actually created templates that are

258
00:08:32,880 --> 00:08:35,458
very similar but also applied to tuning

259
00:08:35,458 --> 00:08:37,799
existing detectors that way uh for our

260
00:08:37,799 --> 00:08:39,719
uh our security analysts who are

261
00:08:39,719 --> 00:08:41,399
actually triaging alerts on a day-to-day

262
00:08:41,399 --> 00:08:43,679
basis they have a very easy way to go

263
00:08:43,679 --> 00:08:45,060
submit this back to the detection

264
00:08:45,060 --> 00:08:46,440
engineers and make sure that they get

265
00:08:46,440 --> 00:08:48,360
the information they need so they can

266
00:08:48,360 --> 00:08:50,339
also go and link to like hey we get all

267
00:08:50,339 --> 00:08:52,440
these false positives here's some deep

268
00:08:52,440 --> 00:08:54,660
links into our tooling for some example

269
00:08:54,660 --> 00:08:56,160
events that we don't want to get alerts

270
00:08:56,160 --> 00:08:58,500
on anymore can you go fix this makes it

271
00:08:58,500 --> 00:08:59,519
very easy

272
00:08:59,519 --> 00:09:01,800
and then finally we started using you

273
00:09:01,800 --> 00:09:03,899
can see the uh you know create branch

274
00:09:03,899 --> 00:09:06,300
and and create uh pull requests we

275
00:09:06,300 --> 00:09:08,160
started using smart commits and and

276
00:09:08,160 --> 00:09:11,580
GitHub because it allows us to link back

277
00:09:11,580 --> 00:09:13,680
to this jira project uh that way if

278
00:09:13,680 --> 00:09:15,180
somebody wants to know like what is this

279
00:09:15,180 --> 00:09:16,740
what does this pull request actually

280
00:09:16,740 --> 00:09:18,839
trying to achieve and like who who

281
00:09:18,839 --> 00:09:20,760
requested this thing it makes it very

282
00:09:20,760 --> 00:09:22,500
easy to just go map these requirements

283
00:09:22,500 --> 00:09:23,640
back and forth so that's really what

284
00:09:23,640 --> 00:09:25,680
this is all about uh you know the first

285
00:09:25,680 --> 00:09:27,000
time you go through a sock too if

286
00:09:27,000 --> 00:09:28,380
anybody's ever done that that's that's

287
00:09:28,380 --> 00:09:29,760
what your Alternatives always want is

288
00:09:29,760 --> 00:09:32,040
like this audit trail from you know this

289
00:09:32,040 --> 00:09:34,440
requirement into into production so we

290
00:09:34,440 --> 00:09:36,540
started mimicking the the same processes

291
00:09:36,540 --> 00:09:39,240
that our engineering team uh used to

292
00:09:39,240 --> 00:09:42,720
apply to a detection engineering

293
00:09:42,720 --> 00:09:44,880
phase two so now we're gonna go to the

294
00:09:44,880 --> 00:09:48,540
uh uh develop a detector and uh in a one

295
00:09:48,540 --> 00:09:49,920
hour long version of this talk I would

296
00:09:49,920 --> 00:09:51,600
go through and actually create this uh

297
00:09:51,600 --> 00:09:54,300
in in real time but uh since we've got

298
00:09:54,300 --> 00:09:56,700
30 minutes uh these are the fields that

299
00:09:56,700 --> 00:09:58,980
we we demand that have to exist and be

300
00:09:58,980 --> 00:10:00,540
well defined in each one of ours and

301
00:10:00,540 --> 00:10:02,640
I'll go through this like you need an ID

302
00:10:02,640 --> 00:10:04,920
uh we'll have a status right that could

303
00:10:04,920 --> 00:10:06,600
be the archived for for capabilities

304
00:10:06,600 --> 00:10:08,519
that will retire some things are just in

305
00:10:08,519 --> 00:10:09,839
that testing phase so we're not going to

306
00:10:09,839 --> 00:10:11,220
push these out to all of our customers

307
00:10:11,220 --> 00:10:12,660
yet we're just going to do it in a

308
00:10:12,660 --> 00:10:15,120
testing environment or uh active

309
00:10:15,120 --> 00:10:17,519
obviously means yeah this is out there

310
00:10:17,519 --> 00:10:20,940
uh description uh this is again one of

311
00:10:20,940 --> 00:10:23,040
those things that makes this useful to

312
00:10:23,040 --> 00:10:24,480
people beyond the person who actually

313
00:10:24,480 --> 00:10:26,459
wrote the rule uh having a human

314
00:10:26,459 --> 00:10:28,560
readable narrative description of like

315
00:10:28,560 --> 00:10:30,120
hey here's what this thing is looking

316
00:10:30,120 --> 00:10:31,880
for and why it matters

317
00:10:31,880 --> 00:10:34,260
references right if you've got blog

318
00:10:34,260 --> 00:10:36,959
posts or or you know tweets or tweets or

319
00:10:36,959 --> 00:10:39,180
uh you know whatever that you can point

320
00:10:39,180 --> 00:10:40,680
to where people are talking about this

321
00:10:40,680 --> 00:10:42,600
uh make sure that there's like good

322
00:10:42,600 --> 00:10:43,740
reference material because you don't

323
00:10:43,740 --> 00:10:45,120
want to write a whole blog post in your

324
00:10:45,120 --> 00:10:46,560
documentation here

325
00:10:46,560 --> 00:10:48,720
uh miter attack mapping because

326
00:10:48,720 --> 00:10:51,839
obviously uh and then investigation and

327
00:10:51,839 --> 00:10:54,540
response guidance right so if your most

328
00:10:54,540 --> 00:10:56,880
Junior security analyst gets this Alert

329
00:10:56,880 --> 00:10:58,800
in the middle of the night what do they

330
00:10:58,800 --> 00:11:00,240
need to look at how do they investigate

331
00:11:00,240 --> 00:11:02,640
what are some common false positive

332
00:11:02,640 --> 00:11:04,200
scenarios that might exist that you've

333
00:11:04,200 --> 00:11:06,480
seen when do you escalate let's do a

334
00:11:06,480 --> 00:11:07,980
more senior analyst or is this something

335
00:11:07,980 --> 00:11:10,620
that you know immediately escalated and

336
00:11:10,620 --> 00:11:12,959
starts your on-call process so making

337
00:11:12,959 --> 00:11:14,700
sure that if somebody gets this and

338
00:11:14,700 --> 00:11:16,260
they've never seen this detection fire

339
00:11:16,260 --> 00:11:18,180
off before they at least have a place to

340
00:11:18,180 --> 00:11:19,140
start and they know what to do and

341
00:11:19,140 --> 00:11:20,519
they're not left in the dark

342
00:11:20,519 --> 00:11:22,920
uh you know some general notes for

343
00:11:22,920 --> 00:11:24,240
things that don't really fit neatly into

344
00:11:24,240 --> 00:11:26,820
any other categories the actual detector

345
00:11:26,820 --> 00:11:29,100
logic and then verifiers so we're going

346
00:11:29,100 --> 00:11:31,500
to do our unit testing which is what we

347
00:11:31,500 --> 00:11:34,320
want to talk about next right

348
00:11:34,320 --> 00:11:36,660
so unit testing for anything that we're

349
00:11:36,660 --> 00:11:38,579
going to put into production we want to

350
00:11:38,579 --> 00:11:40,980
know does it actually detect the thing

351
00:11:40,980 --> 00:11:43,800
that we're trying to detect

352
00:11:43,800 --> 00:11:47,160
does it uh does it detect unintended

353
00:11:47,160 --> 00:11:49,860
behavior and then is that uh is that

354
00:11:49,860 --> 00:11:51,540
unintended Behavior going to be so noisy

355
00:11:51,540 --> 00:11:53,880
it's becomes useless right is it going

356
00:11:53,880 --> 00:11:56,339
to be resistant to super high numbers of

357
00:11:56,339 --> 00:11:57,600
false positives

358
00:11:57,600 --> 00:11:59,820
and then is it resilient enough to

359
00:11:59,820 --> 00:12:01,980
withstand Behavior Uh evasion tactics

360
00:12:01,980 --> 00:12:04,860
right if you just change the uh the the

361
00:12:04,860 --> 00:12:06,839
camel casing of this command is it just

362
00:12:06,839 --> 00:12:09,680
going to break everything right

363
00:12:09,899 --> 00:12:12,240
is this uh is this detector looking for

364
00:12:12,240 --> 00:12:14,339
commands being run on

365
00:12:14,339 --> 00:12:16,740
in a specific directory or if you change

366
00:12:16,740 --> 00:12:18,300
the name of a binary is it still going

367
00:12:18,300 --> 00:12:20,760
to fire or if you change the port that

368
00:12:20,760 --> 00:12:23,339
you're using to uh to you know do this

369
00:12:23,339 --> 00:12:24,779
command and control protocol is it going

370
00:12:24,779 --> 00:12:27,120
to bypass so making sure that you have

371
00:12:27,120 --> 00:12:30,120
these these capabilities to uh to bypass

372
00:12:30,120 --> 00:12:32,220
that and test it automatically

373
00:12:32,220 --> 00:12:35,040
so some lessons learned here uh you know

374
00:12:35,040 --> 00:12:36,959
I mentioned the the old uh the old alert

375
00:12:36,959 --> 00:12:38,579
that fires on every new process yeah

376
00:12:38,579 --> 00:12:41,940
we've done that so uh that's uh that's

377
00:12:41,940 --> 00:12:43,500
something that we learned very early in

378
00:12:43,500 --> 00:12:45,240
the process right is every every

379
00:12:45,240 --> 00:12:46,800
detection for any type of activity

380
00:12:46,800 --> 00:12:49,019
should have a very generic false

381
00:12:49,019 --> 00:12:50,639
positive test of like here's just like

382
00:12:50,639 --> 00:12:53,279
some process launching and if this

383
00:12:53,279 --> 00:12:54,959
process launching fires this detector

384
00:12:54,959 --> 00:12:57,959
then that's bad get rid of it right

385
00:12:57,959 --> 00:13:00,360
another thing that we learned is is that

386
00:13:00,360 --> 00:13:01,980
you can't really spin up I mean you can

387
00:13:01,980 --> 00:13:03,779
and we did for a while but like spinning

388
00:13:03,779 --> 00:13:05,700
up containers to run Atomic red team or

389
00:13:05,700 --> 00:13:07,440
Caldera or whatever every time you want

390
00:13:07,440 --> 00:13:09,360
to go build something super time

391
00:13:09,360 --> 00:13:10,920
consuming and then after you start doing

392
00:13:10,920 --> 00:13:13,320
this at a high enough scale it takes

393
00:13:13,320 --> 00:13:15,240
hours to go and build and deploy new

394
00:13:15,240 --> 00:13:17,160
rules to your customers and that's not

395
00:13:17,160 --> 00:13:19,320
going to be acceptable

396
00:13:19,320 --> 00:13:22,079
so uh so you really have to shrink that

397
00:13:22,079 --> 00:13:23,700
feedback loop and make sure that your

398
00:13:23,700 --> 00:13:25,860
detection Engineers can really test and

399
00:13:25,860 --> 00:13:27,120
understand that their things are working

400
00:13:27,120 --> 00:13:31,260
uh as quickly as possible

401
00:13:31,260 --> 00:13:33,480
so one of the the core tools that we use

402
00:13:33,480 --> 00:13:36,000
on our uh in our detection platform is

403
00:13:36,000 --> 00:13:38,279
uh lima charlie so they're a sponsor

404
00:13:38,279 --> 00:13:39,839
today these guys are great if you didn't

405
00:13:39,839 --> 00:13:42,660
talk to them you should have uh but they

406
00:13:42,660 --> 00:13:44,100
have some really amazing capabilities

407
00:13:44,100 --> 00:13:46,500
where you can do replays right which is

408
00:13:46,500 --> 00:13:48,300
roughly the equivalent of the Sim of

409
00:13:48,300 --> 00:13:49,680
being able to search against historical

410
00:13:49,680 --> 00:13:52,019
data and see if your queries are going

411
00:13:52,019 --> 00:13:53,279
to hit on anything

412
00:13:53,279 --> 00:13:56,100
but what you can also do is you can copy

413
00:13:56,100 --> 00:13:58,380
out Raw event data from from the limit

414
00:13:58,380 --> 00:14:01,920
Charlie platform in Json format save it

415
00:14:01,920 --> 00:14:03,600
to a file and then say replay this rule

416
00:14:03,600 --> 00:14:05,700
against a series of events and tell me

417
00:14:05,700 --> 00:14:07,740
if it's going to fire or not right so

418
00:14:07,740 --> 00:14:09,779
that's what we started doing within our

419
00:14:09,779 --> 00:14:13,440
uh within our detection engineering

420
00:14:13,440 --> 00:14:15,660
practices we can go and we can work with

421
00:14:15,660 --> 00:14:17,519
our offensive security team or we can go

422
00:14:17,519 --> 00:14:19,860
and pull real data from a client where

423
00:14:19,860 --> 00:14:21,300
we detected some weird thing that we'd

424
00:14:21,300 --> 00:14:23,399
never seen before we can pull that event

425
00:14:23,399 --> 00:14:25,740
data anonymize it so we're not you know

426
00:14:25,740 --> 00:14:27,959
having actual usernames and IP addresses

427
00:14:27,959 --> 00:14:29,700
in there save it within our detection

428
00:14:29,700 --> 00:14:31,139
and then every time somebody makes a

429
00:14:31,139 --> 00:14:33,240
change to this detection we can say hey

430
00:14:33,240 --> 00:14:35,519
this should hit every single time so if

431
00:14:35,519 --> 00:14:37,920
somebody goes and and puts in some sort

432
00:14:37,920 --> 00:14:39,600
of tune request and it causes this

433
00:14:39,600 --> 00:14:41,639
detection not to fire on this event then

434
00:14:41,639 --> 00:14:43,139
it's not good and it needs to fail that

435
00:14:43,139 --> 00:14:45,420
fail that unit testing and not be built

436
00:14:45,420 --> 00:14:49,019
so uh what we ended up doing uh even

437
00:14:49,019 --> 00:14:50,699
still we we had to do a pull request

438
00:14:50,699 --> 00:14:52,320
every time we wanted to test something

439
00:14:52,320 --> 00:14:53,459
because this was part of our build

440
00:14:53,459 --> 00:14:55,560
Pipeline and this continued to cause

441
00:14:55,560 --> 00:14:57,540
frustration for our detection Engineers

442
00:14:57,540 --> 00:15:00,480
so uh you know everything and Charlie's

443
00:15:00,480 --> 00:15:02,519
done via an API so what we did is built

444
00:15:02,519 --> 00:15:05,699
a DS code plugin which is where we write

445
00:15:05,699 --> 00:15:07,019
most of our rules

446
00:15:07,019 --> 00:15:09,000
and we just built a vs code plugin to go

447
00:15:09,000 --> 00:15:10,380
and look for these unit tests and

448
00:15:10,380 --> 00:15:12,060
actually validate these right there on

449
00:15:12,060 --> 00:15:13,680
our developers workstation that way it

450
00:15:13,680 --> 00:15:15,180
takes them a couple of seconds to

451
00:15:15,180 --> 00:15:16,920
actually get this feedback so

452
00:15:16,920 --> 00:15:19,260
in this uh in this example uh you know

453
00:15:19,260 --> 00:15:20,880
what we wanted to do is do some linting

454
00:15:20,880 --> 00:15:22,380
and format checks to make sure that the

455
00:15:22,380 --> 00:15:24,060
it wasn't going to get some weird syntax

456
00:15:24,060 --> 00:15:25,440
error and now they've wasted 30 minutes

457
00:15:25,440 --> 00:15:26,459
you know going through the build

458
00:15:26,459 --> 00:15:29,040
pipeline for nothing uh Leverage The

459
00:15:29,040 --> 00:15:31,560
Limit Charlie replay API to execute

460
00:15:31,560 --> 00:15:34,980
uh these rules and then catch overnight

461
00:15:34,980 --> 00:15:36,660
events to prevent any sort of untunes

462
00:15:36,660 --> 00:15:37,320
right

463
00:15:37,320 --> 00:15:39,899
so in this example you'll see and it's

464
00:15:39,899 --> 00:15:42,180
kind of weird but uh but this event here

465
00:15:42,180 --> 00:15:44,279
in line 276 and this detector that we

466
00:15:44,279 --> 00:15:46,860
wrote is named OCTA device registration

467
00:15:46,860 --> 00:15:48,540
false positive event so this is

468
00:15:48,540 --> 00:15:49,920
something that we were seeing in one of

469
00:15:49,920 --> 00:15:52,440
our clients environments every time OCTA

470
00:15:52,440 --> 00:15:54,120
registered a device it would create a

471
00:15:54,120 --> 00:15:55,800
false positive for this particular rule

472
00:15:55,800 --> 00:15:58,079
so we'd capture those events that cause

473
00:15:58,079 --> 00:16:00,540
this to fire and we said this should

474
00:16:00,540 --> 00:16:02,459
never fire that we can put these unit

475
00:16:02,459 --> 00:16:05,220
tests for the purposes of demonstration

476
00:16:05,220 --> 00:16:06,660
and again I would have done this live if

477
00:16:06,660 --> 00:16:09,600
I had more time but uh I changed it to

478
00:16:09,600 --> 00:16:11,459
fault or to true so saying that this

479
00:16:11,459 --> 00:16:13,500
should Fire And now when we run our

480
00:16:13,500 --> 00:16:16,199
detector buddy very cleverly named uh

481
00:16:16,199 --> 00:16:18,120
when we run our detection engineering

482
00:16:18,120 --> 00:16:19,680
tool it'll go through all these

483
00:16:19,680 --> 00:16:21,660
verifiers say verify pass verify

484
00:16:21,660 --> 00:16:23,040
password and it goes on down to the

485
00:16:23,040 --> 00:16:24,779
bottom and you'll see this verifier

486
00:16:24,779 --> 00:16:27,180
failed and then using the limit Charlie

487
00:16:27,180 --> 00:16:29,579
API we can print out at the bottom and

488
00:16:29,579 --> 00:16:31,260
you can't see the whole thing but we can

489
00:16:31,260 --> 00:16:33,360
say this came back as true this came

490
00:16:33,360 --> 00:16:34,800
back as true this came back as true and

491
00:16:34,800 --> 00:16:36,720
this came back as false so it's a nice

492
00:16:36,720 --> 00:16:38,040
debugging tool for our detection

493
00:16:38,040 --> 00:16:39,420
Engineers to be able to look and say

494
00:16:39,420 --> 00:16:41,699
okay here's the faulty logic that I need

495
00:16:41,699 --> 00:16:45,060
to fix in this tool so again this is uh

496
00:16:45,060 --> 00:16:47,339
you know it's just all about it's the

497
00:16:47,339 --> 00:16:48,660
same with developers right if you're a

498
00:16:48,660 --> 00:16:50,040
software engineer you just want to be

499
00:16:50,040 --> 00:16:51,660
able to get your feedback going as tight

500
00:16:51,660 --> 00:16:53,759
as you can that way you can fix things

501
00:16:53,759 --> 00:16:55,740
and move on and not spend time waiting

502
00:16:55,740 --> 00:16:57,480
on something to build that way it can

503
00:16:57,480 --> 00:16:58,560
fail and then you have to go back and

504
00:16:58,560 --> 00:17:01,040
try it all again right

505
00:17:01,040 --> 00:17:04,500
then phase four uh finally uh we get

506
00:17:04,500 --> 00:17:07,500
into our the automated pipeline so once

507
00:17:07,500 --> 00:17:09,780
all this is done

508
00:17:09,780 --> 00:17:11,819
then we want to push the detection out

509
00:17:11,819 --> 00:17:14,160
to the detection platform and get it out

510
00:17:14,160 --> 00:17:15,540
there going so this is really just a

511
00:17:15,540 --> 00:17:17,459
summary of everything that we

512
00:17:17,459 --> 00:17:19,559
we talked about so right there on the

513
00:17:19,559 --> 00:17:21,000
left this is a flowchart of our entire

514
00:17:21,000 --> 00:17:22,020
process

515
00:17:22,020 --> 00:17:23,579
you start out with your thread Intel

516
00:17:23,579 --> 00:17:25,319
from you know your offensive security or

517
00:17:25,319 --> 00:17:27,179
threat Intel team or you know wherever

518
00:17:27,179 --> 00:17:29,580
you find things that idea gets put into

519
00:17:29,580 --> 00:17:31,320
Jared passed off to detection Engineers

520
00:17:31,320 --> 00:17:33,000
where they will commit something into

521
00:17:33,000 --> 00:17:35,940
GitHub using a an issue Branch because

522
00:17:35,940 --> 00:17:39,240
we never commit directly to Maine right

523
00:17:39,240 --> 00:17:40,740
be a smart commit that's going to be

524
00:17:40,740 --> 00:17:43,260
linked back to jira that gets put into a

525
00:17:43,260 --> 00:17:46,080
pull request GitHub actions will do all

526
00:17:46,080 --> 00:17:48,539
this automated build to uh

527
00:17:48,539 --> 00:17:50,280
you know to go and do all of our unit

528
00:17:50,280 --> 00:17:52,380
testing make sure it's compatible with

529
00:17:52,380 --> 00:17:55,620
the platforms the way we think it is

530
00:17:55,620 --> 00:17:58,080
if it passes that unit test it goes to

531
00:17:58,080 --> 00:17:59,700
peer review we want other detection

532
00:17:59,700 --> 00:18:01,140
Engineers to take a look at this before

533
00:18:01,140 --> 00:18:02,940
we push it into production because

534
00:18:02,940 --> 00:18:04,320
nobody's allowed to go into production

535
00:18:04,320 --> 00:18:05,520
by themselves

536
00:18:05,520 --> 00:18:08,100
uh they can approve the pull request and

537
00:18:08,100 --> 00:18:09,720
from that point it gets merged into Main

538
00:18:09,720 --> 00:18:11,340
in this case goes straight into the

539
00:18:11,340 --> 00:18:13,320
using the lima charlie API gets pushed

540
00:18:13,320 --> 00:18:14,520
out to all of our customers and then

541
00:18:14,520 --> 00:18:16,679
we're off and running and then all of

542
00:18:16,679 --> 00:18:18,179
this you know feeds back into slack

543
00:18:18,179 --> 00:18:19,860
because of course everybody uses slack

544
00:18:19,860 --> 00:18:21,059
to know whether anything's working at

545
00:18:21,059 --> 00:18:22,559
any given time right

546
00:18:22,559 --> 00:18:25,679
so I think I

547
00:18:25,679 --> 00:18:27,780
I got that in just in time to have some

548
00:18:27,780 --> 00:18:30,740
questions any questions

549
00:18:32,840 --> 00:18:36,000
uh when you're generating your own sets

550
00:18:36,000 --> 00:18:38,720
how do you understand

551
00:18:44,160 --> 00:18:46,320
yep so the question was how do we find

552
00:18:46,320 --> 00:18:48,480
blind spots in our coverage and how do

553
00:18:48,480 --> 00:18:50,760
we minimize it I think the there's a

554
00:18:50,760 --> 00:18:52,740
couple ways but really a big piece of it

555
00:18:52,740 --> 00:18:54,840
is miter attack framework right that's

556
00:18:54,840 --> 00:18:57,780
the kind of the go-to so we mentioned in

557
00:18:57,780 --> 00:19:00,660
in our in our uh

558
00:19:00,660 --> 00:19:02,940
in our detector template we're going to

559
00:19:02,940 --> 00:19:04,620
map every detector to the miter attack

560
00:19:04,620 --> 00:19:06,960
technique so that applies to and during

561
00:19:06,960 --> 00:19:08,760
that build process another thing that

562
00:19:08,760 --> 00:19:10,860
does that I didn't mention is that it

563
00:19:10,860 --> 00:19:13,020
will actually build and update a dynamic

564
00:19:13,020 --> 00:19:15,059
you know miter attack tree that you can

565
00:19:15,059 --> 00:19:17,760
go and browse to and see what the

566
00:19:17,760 --> 00:19:19,080
coverage is and you can see all the red

567
00:19:19,080 --> 00:19:21,059
screens and yellows and and you know

568
00:19:21,059 --> 00:19:22,919
whites where you have no coverage so

569
00:19:22,919 --> 00:19:24,720
that's that's one piece that's very

570
00:19:24,720 --> 00:19:27,179
easily visible a lot of it is is working

571
00:19:27,179 --> 00:19:28,620
with customers who are going through pen

572
00:19:28,620 --> 00:19:31,620
tests and and just like being very like

573
00:19:31,620 --> 00:19:33,419
collaborative with them to say

574
00:19:33,419 --> 00:19:34,559
hey

575
00:19:34,559 --> 00:19:36,660
you know we found the saying and they're

576
00:19:36,660 --> 00:19:38,340
like oh this is a pin test and we said

577
00:19:38,340 --> 00:19:39,900
great once you're done with that PIN

578
00:19:39,900 --> 00:19:41,880
test can you like tell us if they found

579
00:19:41,880 --> 00:19:43,200
anything that we didn't alert on and

580
00:19:43,200 --> 00:19:44,400
like let's work together to figure out

581
00:19:44,400 --> 00:19:45,240
why

582
00:19:45,240 --> 00:19:47,220
and uh you know one of the things that

583
00:19:47,220 --> 00:19:48,960
that we've had to come to terms with and

584
00:19:48,960 --> 00:19:50,400
I think every Security operation team

585
00:19:50,400 --> 00:19:52,440
does is like you can't detect everything

586
00:19:52,440 --> 00:19:54,059
right so you have to

587
00:19:54,059 --> 00:19:56,400
you have to just be okay with that like

588
00:19:56,400 --> 00:19:58,320
you can't detect unauthorized logins

589
00:19:58,320 --> 00:19:59,880
because how do you know if this is

590
00:19:59,880 --> 00:20:01,020
unauthorized right so you're going to

591
00:20:01,020 --> 00:20:02,760
have gaps you're going to have miter

592
00:20:02,760 --> 00:20:04,380
attack techniques that that aren't

593
00:20:04,380 --> 00:20:06,360
covered like deleting a file is a miter

594
00:20:06,360 --> 00:20:07,559
attack technique

595
00:20:07,559 --> 00:20:09,860
if you detect that then you'll destroy

596
00:20:09,860 --> 00:20:11,940
you know your team

597
00:20:11,940 --> 00:20:14,880
but uh but that's really how we do it so

598
00:20:14,880 --> 00:20:16,440
just a combination of using like those

599
00:20:16,440 --> 00:20:17,940
known Frameworks

600
00:20:17,940 --> 00:20:19,980
and uh and working with our customers

601
00:20:19,980 --> 00:20:21,419
and then we have an offensive security

602
00:20:21,419 --> 00:20:23,640
team that likes to kind of you know poke

603
00:20:23,640 --> 00:20:25,200
at us and like make fun of how bad we

604
00:20:25,200 --> 00:20:26,280
are at our jobs and then we can tell

605
00:20:26,280 --> 00:20:29,100
them the same thing uh so we uh it's

606
00:20:29,100 --> 00:20:30,480
kind of that competition and going back

607
00:20:30,480 --> 00:20:31,919
and forth and saying like hey can you

608
00:20:31,919 --> 00:20:33,780
guys detect this and you know hopefully

609
00:20:33,780 --> 00:20:35,940
we say yes but if not then we can say oh

610
00:20:35,940 --> 00:20:37,380
well let's go set it up and do some

611
00:20:37,380 --> 00:20:39,419
testing and and you know put together

612
00:20:39,419 --> 00:20:41,940
something to see if we can work out a

613
00:20:41,940 --> 00:20:44,480
good way to do that

614
00:20:44,880 --> 00:20:47,100
actually this is it

615
00:20:47,100 --> 00:20:50,039
a new event generation project when

616
00:20:50,039 --> 00:20:51,660
you're using it just like say by another

617
00:20:51,660 --> 00:20:55,020
thing already

618
00:20:58,679 --> 00:21:02,039
we uh we we do not use Sigma and we

619
00:21:02,039 --> 00:21:03,960
don't pull in pre-built rules but we

620
00:21:03,960 --> 00:21:06,240
definitely look at them for inspiration

621
00:21:06,240 --> 00:21:08,400
so there's a lot of uh

622
00:21:08,400 --> 00:21:09,960
there's a lot of Sigma rules that we

623
00:21:09,960 --> 00:21:12,179
have pretty much one-to-one like

624
00:21:12,179 --> 00:21:14,700
equivalents of already there's some that

625
00:21:14,700 --> 00:21:16,020
that will you know we look at their

626
00:21:16,020 --> 00:21:17,580
GitHub repo and we'll say like oh that's

627
00:21:17,580 --> 00:21:18,900
a good idea but they do a lot of things

628
00:21:18,900 --> 00:21:20,700
that we don't do right we we really

629
00:21:20,700 --> 00:21:23,340
optimize to make sure that we have uh

630
00:21:23,340 --> 00:21:25,080
when we when we look at this we try to

631
00:21:25,080 --> 00:21:26,580
look at attack chains and say can we

632
00:21:26,580 --> 00:21:28,380
catch this somewhere and we understand

633
00:21:28,380 --> 00:21:29,340
that we're not going to catch it

634
00:21:29,340 --> 00:21:31,260
everywhere along the chain and I think

635
00:21:31,260 --> 00:21:33,120
Sigma has a lot of like let's catch

636
00:21:33,120 --> 00:21:34,620
everything along the chain in a lot of

637
00:21:34,620 --> 00:21:36,840
cases so we try to make sure that we're

638
00:21:36,840 --> 00:21:38,880
not getting too much like try to

639
00:21:38,880 --> 00:21:41,220
optimize against false positives but uh

640
00:21:41,220 --> 00:21:42,720
but we definitely look at that and we're

641
00:21:42,720 --> 00:21:45,360
like looking at elastic publishes a lot

642
00:21:45,360 --> 00:21:46,340
of rules

643
00:21:46,340 --> 00:21:48,840
so we'll uh we'll look at those and we

644
00:21:48,840 --> 00:21:50,760
make our rules available to people as

645
00:21:50,760 --> 00:21:51,539
well

646
00:21:51,539 --> 00:21:54,539
so we we look at that sort of body of

647
00:21:54,539 --> 00:21:56,760
work and see what's out there more for

648
00:21:56,760 --> 00:21:57,960
inspiration but we don't automate

649
00:21:57,960 --> 00:21:59,600
anything because

650
00:21:59,600 --> 00:22:01,740
fun story we used to do a lot of network

651
00:22:01,740 --> 00:22:05,220
detection and we used the uh the uh

652
00:22:05,220 --> 00:22:08,220
uh the what's proof points threat feed

653
00:22:08,220 --> 00:22:11,220
from yeah emerging threats yeah yeah and

654
00:22:11,220 --> 00:22:12,840
like you know if you've ever done that

655
00:22:12,840 --> 00:22:15,179
like tons and tons of rules and tons and

656
00:22:15,179 --> 00:22:16,740
tons of noise and that's what we're

657
00:22:16,740 --> 00:22:19,080
trying to avoid is we want to have very

658
00:22:19,080 --> 00:22:21,539
very tight control over everything that

659
00:22:21,539 --> 00:22:22,919
goes in and we want to know that we

660
00:22:22,919 --> 00:22:24,059
built it and we understand everything

661
00:22:24,059 --> 00:22:26,159
and not not do any sort of automated

662
00:22:26,159 --> 00:22:28,260
rule generation that we don't have that

663
00:22:28,260 --> 00:22:30,419
deep understanding of yeah

664
00:22:30,419 --> 00:22:31,740
agree with you

665
00:22:31,740 --> 00:22:33,659
because when you're looking at those of

666
00:22:33,659 --> 00:22:34,620
you that don't know what emerging

667
00:22:34,620 --> 00:22:38,400
threats is a rule set that's about 60

668
00:22:38,400 --> 00:22:39,900
yeah

669
00:22:39,900 --> 00:22:42,980
detect everything from

670
00:22:43,020 --> 00:22:46,200
1990 going forward right yeah

671
00:22:46,200 --> 00:22:47,940
um but the problem is going through all

672
00:22:47,940 --> 00:22:49,440
that data sets and then mapping into

673
00:22:49,440 --> 00:22:51,720
minor helps but that all that's matters

674
00:22:51,720 --> 00:22:54,799
so please yep

675
00:22:55,620 --> 00:22:57,240
yeah

676
00:22:57,240 --> 00:22:58,860
yeah and a lot of it like a lot of what

677
00:22:58,860 --> 00:23:00,659
we focus on too is behavior based and

678
00:23:00,659 --> 00:23:03,840
this is this is another talk right but

679
00:23:03,840 --> 00:23:06,179
going into a

680
00:23:06,179 --> 00:23:08,880
you know a new CBE coming out right the

681
00:23:08,880 --> 00:23:11,760
new like yet another exchange exploit uh

682
00:23:11,760 --> 00:23:12,960
if you're going to be looking for that

683
00:23:12,960 --> 00:23:14,580
there's there's more generic ways to

684
00:23:14,580 --> 00:23:15,900
look at it like looking for shells

685
00:23:15,900 --> 00:23:17,760
spawning from IIs processes and things

686
00:23:17,760 --> 00:23:19,919
that that will catch every iteration of

687
00:23:19,919 --> 00:23:23,100
that or or IES processes providing aspx

688
00:23:23,100 --> 00:23:25,020
files and things like that so you can do

689
00:23:25,020 --> 00:23:26,220
like

690
00:23:26,220 --> 00:23:28,620
generic detection capabilities where

691
00:23:28,620 --> 00:23:30,360
these new exploits come out and you look

692
00:23:30,360 --> 00:23:31,500
at them and say hey we don't have to

693
00:23:31,500 --> 00:23:32,700
write anything else because we already

694
00:23:32,700 --> 00:23:35,520
have coverage uh for that just by nature

695
00:23:35,520 --> 00:23:37,200
of this behavior-based rule so that's

696
00:23:37,200 --> 00:23:39,539
that's a lot of what we focus on is not

697
00:23:39,539 --> 00:23:41,700
trying to detect like the cves to your

698
00:23:41,700 --> 00:23:43,140
point like that's what a lot of emerging

699
00:23:43,140 --> 00:23:45,120
threats is is can I find this byte

700
00:23:45,120 --> 00:23:46,559
pattern that matches this uh this

701
00:23:46,559 --> 00:23:48,360
exploit so we try to avoid that because

702
00:23:48,360 --> 00:23:51,419
it becomes too like too fitted to the

703
00:23:51,419 --> 00:23:53,539
problem

704
00:24:03,440 --> 00:24:05,580
I would say

705
00:24:05,580 --> 00:24:08,640
probably 60 40 like High Fidelity like

706
00:24:08,640 --> 00:24:11,280
like we we totally have some like stupid

707
00:24:11,280 --> 00:24:12,720
rules like

708
00:24:12,720 --> 00:24:15,600
looking for a certificate to sign by

709
00:24:15,600 --> 00:24:17,580
Benjamin Dopey right who created many

710
00:24:17,580 --> 00:24:19,500
cats and those are really signature

711
00:24:19,500 --> 00:24:20,820
based rules and those are super high

712
00:24:20,820 --> 00:24:22,140
fidelity like if you see that that's

713
00:24:22,140 --> 00:24:24,120
always bad news unless it's like a pin

714
00:24:24,120 --> 00:24:25,740
tester uh

715
00:24:25,740 --> 00:24:28,500
on on your own team but we do a lot of

716
00:24:28,500 --> 00:24:30,720
things that are you know strained like

717
00:24:30,720 --> 00:24:32,700
uh binaries running out of weird pass so

718
00:24:32,700 --> 00:24:34,679
they should never be running out of and

719
00:24:34,679 --> 00:24:37,320
uh strange uh

720
00:24:37,320 --> 00:24:39,000
you know somebody running who is a

721
00:24:39,000 --> 00:24:42,000
system right uh so those types of things

722
00:24:42,000 --> 00:24:44,400
is like this could be okay but it could

723
00:24:44,400 --> 00:24:46,679
also be very not okay and that's when it

724
00:24:46,679 --> 00:24:48,059
that's when having like this

725
00:24:48,059 --> 00:24:50,340
documentation that says like

726
00:24:50,340 --> 00:24:52,140
here's what to do and how to investigate

727
00:24:52,140 --> 00:24:55,820
this alert really comes in handy

728
00:24:58,860 --> 00:25:02,520
yeah so we have some that are like

729
00:25:02,520 --> 00:25:05,340
a good example is like RDP an RDP

730
00:25:05,340 --> 00:25:07,440
connection from a public IP address is

731
00:25:07,440 --> 00:25:10,559
like a low priority issue like

732
00:25:10,559 --> 00:25:11,880
you should probably not have this

733
00:25:11,880 --> 00:25:13,919
exposed but you know it's not

734
00:25:13,919 --> 00:25:16,559
necessarily something bad but then the

735
00:25:16,559 --> 00:25:19,020
same rule but with a successful login

736
00:25:19,020 --> 00:25:22,799
uh is uh you know is worse and the same

737
00:25:22,799 --> 00:25:24,539
rule but a successful login and it came

738
00:25:24,539 --> 00:25:27,480
from Bulgaria is like worser and you

739
00:25:27,480 --> 00:25:29,820
know been like kind of escalates and

740
00:25:29,820 --> 00:25:32,960
builds on each other like that

