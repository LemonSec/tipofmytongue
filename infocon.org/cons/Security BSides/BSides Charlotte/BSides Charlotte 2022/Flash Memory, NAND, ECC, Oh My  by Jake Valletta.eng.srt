1
00:00:06,319 --> 00:00:09,000
y'all I hope you're not getting too cold

2
00:00:09,000 --> 00:00:12,179
you're still surviving here so uh we

3
00:00:12,179 --> 00:00:16,199
have next uh Jake Valletta from mandian

4
00:00:16,199 --> 00:00:17,820
and he's gonna do some awesome

5
00:00:17,820 --> 00:00:20,400
interesting stuff about blush and land

6
00:00:20,400 --> 00:00:24,180
and Hardware stuff so take it away

7
00:00:24,180 --> 00:00:25,920
Jake awesome all right thank you so much

8
00:00:25,920 --> 00:00:27,960
and I'm gonna do my best I don't want to

9
00:00:27,960 --> 00:00:30,240
eat this mic but I gotta kill it really

10
00:00:30,240 --> 00:00:31,679
close here

11
00:00:31,679 --> 00:00:32,880
um so I'm not gonna say the whole names

12
00:00:32,880 --> 00:00:34,680
because it's quite long but as you just

13
00:00:34,680 --> 00:00:36,000
heard we're gonna be talking about some

14
00:00:36,000 --> 00:00:38,880
nand processing techniques and I'm gonna

15
00:00:38,880 --> 00:00:40,620
go through a couple different steps here

16
00:00:40,620 --> 00:00:43,200
for us so just real quick about who I am

17
00:00:43,200 --> 00:00:45,780
I work at mandian which was on FireEye

18
00:00:45,780 --> 00:00:48,480
now it's Google but it's still Mandy in

19
00:00:48,480 --> 00:00:50,100
my heart I've been around for about 11

20
00:00:50,100 --> 00:00:53,520
years so I joined back in 2011 and I did

21
00:00:53,520 --> 00:00:55,620
mostly incident response and forensics

22
00:00:55,620 --> 00:00:58,379
my early career and then later in life I

23
00:00:58,379 --> 00:01:00,180
do more and more embedded work actually

24
00:01:00,180 --> 00:01:02,039
more of like a manager so it's I don't

25
00:01:02,039 --> 00:01:03,719
put that on here but my kind of passion

26
00:01:03,719 --> 00:01:06,240
area is embedded security and uh you

27
00:01:06,240 --> 00:01:07,619
know vulnerability research so I'm based

28
00:01:07,619 --> 00:01:09,299
in San Francisco so the weather's a

29
00:01:09,299 --> 00:01:10,500
little bit different and this is

30
00:01:10,500 --> 00:01:12,119
definitely the best view I've had it at

31
00:01:12,119 --> 00:01:13,740
besides or any conference usually it's

32
00:01:13,740 --> 00:01:15,659
in some stuffy hotel room so this is

33
00:01:15,659 --> 00:01:17,700
quite nice

34
00:01:17,700 --> 00:01:20,700
okay so I'm gonna do some quick overview

35
00:01:20,700 --> 00:01:23,100
talk about different types of chips I'm

36
00:01:23,100 --> 00:01:24,360
actually kind of happy that you guys

37
00:01:24,360 --> 00:01:26,280
have a badge because I can use as a prop

38
00:01:26,280 --> 00:01:28,380
here and then we're going to talk about

39
00:01:28,380 --> 00:01:31,020
PCB inspection some chip removal

40
00:01:31,020 --> 00:01:32,580
um talk about how to get data off chips

41
00:01:32,580 --> 00:01:34,140
then we're going to go and kind of the

42
00:01:34,140 --> 00:01:35,520
meat of it the parsing and mounting

43
00:01:35,520 --> 00:01:38,040
techniques and then the last piece the

44
00:01:38,040 --> 00:01:40,020
example next steps is kind of like uh

45
00:01:40,020 --> 00:01:42,180
you know what do you do from here we

46
00:01:42,180 --> 00:01:44,159
could have a whole conversation about

47
00:01:44,159 --> 00:01:45,720
that particular phase so we're not going

48
00:01:45,720 --> 00:01:48,259
to be you know Finding bugs or

49
00:01:48,259 --> 00:01:51,899
demoing exploits or something like that

50
00:01:51,899 --> 00:01:54,840
so the purpose of the presentation is to

51
00:01:54,840 --> 00:01:56,820
kind of help enable this sort of mission

52
00:01:56,820 --> 00:01:58,920
statement we have here so let's just say

53
00:01:58,920 --> 00:02:01,320
you go on Amazon you want to find some

54
00:02:01,320 --> 00:02:04,140
iot device and your your goal is to find

55
00:02:04,140 --> 00:02:07,500
bugs in it obviously step one is to buy

56
00:02:07,500 --> 00:02:09,598
the device get it probably take it apart

57
00:02:09,598 --> 00:02:11,400
plug it in set it up

58
00:02:11,400 --> 00:02:13,379
there's a number of obstacles that you

59
00:02:13,379 --> 00:02:14,520
may encounter while you're doing this

60
00:02:14,520 --> 00:02:16,860
right so you know even before you buy

61
00:02:16,860 --> 00:02:18,420
something you can look up on like the

62
00:02:18,420 --> 00:02:20,940
FCC docs to see if there's any images

63
00:02:20,940 --> 00:02:22,500
out there you could look for prior

64
00:02:22,500 --> 00:02:25,739
research once you have a device you're

65
00:02:25,739 --> 00:02:27,239
going to want to do a couple things so

66
00:02:27,239 --> 00:02:28,440
one you're probably going to want to

67
00:02:28,440 --> 00:02:30,300
entertain the firmware images so you

68
00:02:30,300 --> 00:02:32,459
could Google around go on some forums

69
00:02:32,459 --> 00:02:34,800
maybe you can find a firmware update

70
00:02:34,800 --> 00:02:37,020
page for the manufacturer's website it's

71
00:02:37,020 --> 00:02:38,700
going to be really helpful to have a

72
00:02:38,700 --> 00:02:40,160
firmware image

73
00:02:40,160 --> 00:02:42,540
I would say just in terms of methodology

74
00:02:42,540 --> 00:02:44,519
you want to kind of shift it from like a

75
00:02:44,519 --> 00:02:46,500
black box approach to gray or white so

76
00:02:46,500 --> 00:02:47,819
any kind of information you can find out

77
00:02:47,819 --> 00:02:49,140
about this device is really going to

78
00:02:49,140 --> 00:02:51,480
help you be successful in finding bugs

79
00:02:51,480 --> 00:02:53,280
but what if you can't find the firmware

80
00:02:53,280 --> 00:02:54,720
image right it's not the end of the

81
00:02:54,720 --> 00:02:56,099
world but it does make things a little

82
00:02:56,099 --> 00:02:57,720
more challenging if you don't have

83
00:02:57,720 --> 00:02:59,519
access to that

84
00:02:59,519 --> 00:03:01,620
let's say also let's just say it's a

85
00:03:01,620 --> 00:03:04,260
camera or some sort of iot device for a

86
00:03:04,260 --> 00:03:05,700
home you plug it in

87
00:03:05,700 --> 00:03:07,560
you get it on the network you run nmap

88
00:03:07,560 --> 00:03:09,959
on it and there's no ports right so now

89
00:03:09,959 --> 00:03:11,760
you have limited attack surface on the

90
00:03:11,760 --> 00:03:12,920
network side

91
00:03:12,920 --> 00:03:15,000
you know not really much you can look at

92
00:03:15,000 --> 00:03:16,260
there or maybe there's a web server

93
00:03:16,260 --> 00:03:18,120
running and it's got credentials that

94
00:03:18,120 --> 00:03:21,360
you don't know so you can't log in and

95
00:03:21,360 --> 00:03:22,739
finally you know let's say maybe you

96
00:03:22,739 --> 00:03:24,599
take this thing apart and you know like

97
00:03:24,599 --> 00:03:26,099
just like this guy here you look at it

98
00:03:26,099 --> 00:03:27,360
it's pretty clear there might be some

99
00:03:27,360 --> 00:03:29,220
uart on there

100
00:03:29,220 --> 00:03:31,260
maybe your device doesn't have uart or

101
00:03:31,260 --> 00:03:34,260
doesn't have JTAG so if these kind of

102
00:03:34,260 --> 00:03:35,940
scenarios all play out you don't really

103
00:03:35,940 --> 00:03:38,459
have a lot to go on right so the

104
00:03:38,459 --> 00:03:39,659
solution what we're going to talk about

105
00:03:39,659 --> 00:03:42,480
here is if your device is using external

106
00:03:42,480 --> 00:03:45,780
flash so like a storage medium can we

107
00:03:45,780 --> 00:03:47,760
get data off the flash and use that to

108
00:03:47,760 --> 00:03:49,980
Aid our research right so I just listed

109
00:03:49,980 --> 00:03:51,180
a couple examples there but there's a

110
00:03:51,180 --> 00:03:52,739
lot of use cases here right you could be

111
00:03:52,739 --> 00:03:54,659
again looking for passwords for that web

112
00:03:54,659 --> 00:03:57,180
server obviously the firmware image has

113
00:03:57,180 --> 00:04:00,180
binaries on it or maybe keys to SSH or

114
00:04:00,180 --> 00:04:01,440
something but we'll go through a bunch

115
00:04:01,440 --> 00:04:03,540
of examples when I get further just a

116
00:04:03,540 --> 00:04:04,799
couple things that we're not really

117
00:04:04,799 --> 00:04:06,239
going to talk about so this isn't going

118
00:04:06,239 --> 00:04:07,860
to be about like reverse engineering I

119
00:04:07,860 --> 00:04:09,120
don't think I have any idea screenshots

120
00:04:09,120 --> 00:04:11,280
sorry we're not going to go too much

121
00:04:11,280 --> 00:04:13,140
into binary analysis a little bit kind

122
00:04:13,140 --> 00:04:14,879
of set the stage we're not going to talk

123
00:04:14,879 --> 00:04:16,798
about Ur or JTAG like how I've got a

124
00:04:16,798 --> 00:04:17,940
protocol level talk a little bit about

125
00:04:17,940 --> 00:04:19,918
SPI

126
00:04:19,918 --> 00:04:21,060
um and I'm not going to go into any sort

127
00:04:21,060 --> 00:04:23,100
of power analysis or that kind of stuff

128
00:04:23,100 --> 00:04:23,880
so we're going to keep it kind of high

129
00:04:23,880 --> 00:04:25,560
level and I'm going to try to keep

130
00:04:25,560 --> 00:04:27,120
everyone awake so if I see people

131
00:04:27,120 --> 00:04:28,320
nodding off I'll click through some of

132
00:04:28,320 --> 00:04:30,720
the more boring slides

133
00:04:30,720 --> 00:04:34,080
okay so first just a few slides of

134
00:04:34,080 --> 00:04:35,100
theory then I'll move on to the fun

135
00:04:35,100 --> 00:04:37,199
stuff promise not available storage

136
00:04:37,199 --> 00:04:40,139
right so in an embedded device you're

137
00:04:40,139 --> 00:04:42,660
gonna have to store data somewhere this

138
00:04:42,660 --> 00:04:44,820
is contrasted to something like Ram so

139
00:04:44,820 --> 00:04:46,080
right Ram is going to be like your

140
00:04:46,080 --> 00:04:47,520
memory where things loaded and when you

141
00:04:47,520 --> 00:04:50,220
turn it off you lose all that data

142
00:04:50,220 --> 00:04:53,460
uh there's two main locations or kind of

143
00:04:53,460 --> 00:04:54,960
ways you're gonna see this on a device

144
00:04:54,960 --> 00:04:57,360
one is going to be included inside of a

145
00:04:57,360 --> 00:04:59,880
chip so for example the badge here this

146
00:04:59,880 --> 00:05:02,759
is a esp32 right so this has flash

147
00:05:02,759 --> 00:05:05,280
inside of it and from like a physical

148
00:05:05,280 --> 00:05:07,199
perspective to get access to that would

149
00:05:07,199 --> 00:05:08,340
probably mean taking off this heat

150
00:05:08,340 --> 00:05:10,500
shield maybe decapping whatever chip is

151
00:05:10,500 --> 00:05:12,180
in there it's gonna be kind of hard not

152
00:05:12,180 --> 00:05:14,220
not really my first attack that I would

153
00:05:14,220 --> 00:05:16,919
do here and then the other area is going

154
00:05:16,919 --> 00:05:19,020
to be on like another chip Elsewhere on

155
00:05:19,020 --> 00:05:20,400
the board so I didn't see any on this

156
00:05:20,400 --> 00:05:23,039
guy so if it did have one that would

157
00:05:23,039 --> 00:05:23,820
have been really cool because then we

158
00:05:23,820 --> 00:05:26,340
could use that as an example but

159
00:05:26,340 --> 00:05:27,780
um those are kind of the two main areas

160
00:05:27,780 --> 00:05:28,680
you're going to focus on if it's

161
00:05:28,680 --> 00:05:30,960
included in the stock I wouldn't spend

162
00:05:30,960 --> 00:05:33,180
sorry stock system on chip if it is

163
00:05:33,180 --> 00:05:34,919
included in there I don't think I would

164
00:05:34,919 --> 00:05:36,180
start off with that I would definitely

165
00:05:36,180 --> 00:05:37,620
start with the external or maybe I need

166
00:05:37,620 --> 00:05:39,120
some of those other avenues that I

167
00:05:39,120 --> 00:05:40,620
mentioned like the network side we're

168
00:05:40,620 --> 00:05:42,900
looking for Ur or JTAG just because it

169
00:05:42,900 --> 00:05:44,340
can be way more complicated to get stuff

170
00:05:44,340 --> 00:05:46,340
off of an SLC

171
00:05:46,340 --> 00:05:49,380
uh two kind of main access mediums here

172
00:05:49,380 --> 00:05:51,539
parallel versus cereal I'm going to talk

173
00:05:51,539 --> 00:05:53,160
more about that in a particular slides

174
00:05:53,160 --> 00:05:54,180
so I'm not going to go too much into

175
00:05:54,180 --> 00:05:56,160
that here and then kind of setting the

176
00:05:56,160 --> 00:05:58,380
stage in terms of types so

177
00:05:58,380 --> 00:06:00,300
almost anything you'll see now is Flash

178
00:06:00,300 --> 00:06:02,580
based I'm not an electrical engineer so

179
00:06:02,580 --> 00:06:03,900
I'm not going to talk about like what

180
00:06:03,900 --> 00:06:05,580
how that actually works at a like

181
00:06:05,580 --> 00:06:07,320
fundamental level but a lot of things

182
00:06:07,320 --> 00:06:08,880
are Flash and then kind of another

183
00:06:08,880 --> 00:06:10,860
category which some of these are

184
00:06:10,860 --> 00:06:12,479
actually considered flash now so like

185
00:06:12,479 --> 00:06:13,979
ROM and eprom those are usually much

186
00:06:13,979 --> 00:06:17,039
smaller for things like boot loaders and

187
00:06:17,039 --> 00:06:19,320
more like low-level devices but we're

188
00:06:19,320 --> 00:06:21,660
going to focus on flash memory here uh

189
00:06:21,660 --> 00:06:23,580
and then when you divide flash down one

190
00:06:23,580 --> 00:06:25,139
level you end up with usually nand

191
00:06:25,139 --> 00:06:27,960
versus nor so

192
00:06:27,960 --> 00:06:29,819
just to contrast them a little bit nor

193
00:06:29,819 --> 00:06:32,039
flash is usually a little smaller chip

194
00:06:32,039 --> 00:06:35,759
these are usually a Serial bus so for

195
00:06:35,759 --> 00:06:37,440
example like these eight pin chips on

196
00:06:37,440 --> 00:06:39,240
here these would be like a Serial

197
00:06:39,240 --> 00:06:43,139
interface using SPI uh nor is a lot

198
00:06:43,139 --> 00:06:45,419
faster for reading and a lot slower for

199
00:06:45,419 --> 00:06:47,400
writing right so usually when you have

200
00:06:47,400 --> 00:06:49,319
an embedded device and there is like a

201
00:06:49,319 --> 00:06:51,419
bootloader sort of Chip or maybe some

202
00:06:51,419 --> 00:06:52,919
really low level configuration data

203
00:06:52,919 --> 00:06:55,199
doesn't change that may be stored on a

204
00:06:55,199 --> 00:06:57,900
nor Flash and maybe they developed the

205
00:06:57,900 --> 00:06:59,639
people who built the device won't have a

206
00:06:59,639 --> 00:07:01,020
mechanism to update that it just kind of

207
00:07:01,020 --> 00:07:03,120
stays the way it is

208
00:07:03,120 --> 00:07:05,460
um there's also an assumption that the

209
00:07:05,460 --> 00:07:08,880
data is valid in the newer world so I'll

210
00:07:08,880 --> 00:07:10,380
talk about that a lot in a couple of

211
00:07:10,380 --> 00:07:12,120
slides later here but there's no bad

212
00:07:12,120 --> 00:07:14,340
blocks in the norworld

213
00:07:14,340 --> 00:07:16,139
now on the nand side these are generally

214
00:07:16,139 --> 00:07:17,699
much larger especially more recent

215
00:07:17,699 --> 00:07:20,280
devices you can have multiple gigs on

216
00:07:20,280 --> 00:07:22,620
flash memory now and this is going to be

217
00:07:22,620 --> 00:07:23,639
where you're going to find things like

218
00:07:23,639 --> 00:07:25,740
kernels file systems you'll also see

219
00:07:25,740 --> 00:07:27,599
boot loaders here so it's not impossible

220
00:07:27,599 --> 00:07:30,060
it would be there user data of course

221
00:07:30,060 --> 00:07:31,500
configuration log and all that stuff

222
00:07:31,500 --> 00:07:33,240
that's going to be usually on a nand

223
00:07:33,240 --> 00:07:36,120
flash two kind of main mechanisms for

224
00:07:36,120 --> 00:07:38,580
Access here you'll see parallel so

225
00:07:38,580 --> 00:07:40,139
parallel just uses more pins I have some

226
00:07:40,139 --> 00:07:43,080
pictures you'll see or a Serial protocol

227
00:07:43,080 --> 00:07:47,699
um like for MMC or SPI the big piece

228
00:07:47,699 --> 00:07:52,259
here is the bad blocks can be found on

229
00:07:52,259 --> 00:07:54,180
the device from the factory right so if

230
00:07:54,180 --> 00:07:55,860
you buy a chip let's say you buy like a

231
00:07:55,860 --> 00:07:58,020
sheet of a bunch of nand flashes it's

232
00:07:58,020 --> 00:07:59,460
entirely possible there's actually bad

233
00:07:59,460 --> 00:08:01,440
blocks on there right from the factory

234
00:08:01,440 --> 00:08:04,080
and you have to you being either

235
00:08:04,080 --> 00:08:07,800
yourself or a chip company who uses this

236
00:08:07,800 --> 00:08:09,360
has to kind of account for that and

237
00:08:09,360 --> 00:08:10,500
that'll be that'll play into how we

238
00:08:10,500 --> 00:08:12,360
actually gain access to this I just one

239
00:08:12,360 --> 00:08:14,280
last thing readings a little slower here

240
00:08:14,280 --> 00:08:16,620
but writing is much faster than normal

241
00:08:16,620 --> 00:08:18,120
and that's why you'll see this use for

242
00:08:18,120 --> 00:08:22,280
like you know file systems and firmware

243
00:08:22,440 --> 00:08:25,860
okay so two types of mans we're going to

244
00:08:25,860 --> 00:08:27,419
focus kind of just on Nan for the rest

245
00:08:27,419 --> 00:08:30,000
of this talk one is referred to as raw

246
00:08:30,000 --> 00:08:31,919
nand so this is going to be kind of the

247
00:08:31,919 --> 00:08:34,380
lowest cost per bit you can think of

248
00:08:34,380 --> 00:08:35,880
this kind of a as like a bucket right

249
00:08:35,880 --> 00:08:37,500
it's like it's like a bucket and there's

250
00:08:37,500 --> 00:08:40,380
there's bits inside of that and somebody

251
00:08:40,380 --> 00:08:42,899
else and I'm just calling it external

252
00:08:42,899 --> 00:08:44,520
management here has to actually manage

253
00:08:44,520 --> 00:08:47,100
this flash for you in the form of some

254
00:08:47,100 --> 00:08:48,899
like a controller right so this picture

255
00:08:48,899 --> 00:08:49,920
here

256
00:08:49,920 --> 00:08:53,040
on the left has two chips it's just off

257
00:08:53,040 --> 00:08:54,839
Wikipedia so this is a parallel land

258
00:08:54,839 --> 00:08:56,459
right here and parallel see all these

259
00:08:56,459 --> 00:08:57,959
pins on each side this is actually a 48

260
00:08:57,959 --> 00:09:00,660
pin flash uh that's just those bits

261
00:09:00,660 --> 00:09:02,459
that's the bucket and then over here on

262
00:09:02,459 --> 00:09:04,140
the right this guy that's going to be

263
00:09:04,140 --> 00:09:05,880
the nand controller right so the data is

264
00:09:05,880 --> 00:09:07,620
all here it's kind of unstructured in

265
00:09:07,620 --> 00:09:09,360
the sense that you know the whoever's

266
00:09:09,360 --> 00:09:10,560
reading this whether it's an operating

267
00:09:10,560 --> 00:09:12,899
system or a microcontroller it's kind of

268
00:09:12,899 --> 00:09:14,519
interfacing through this kind of this

269
00:09:14,519 --> 00:09:16,440
whole controller guy here and it's

270
00:09:16,440 --> 00:09:18,720
pretty transparent to him where those

271
00:09:18,720 --> 00:09:21,240
bad blocks are or if the data's some

272
00:09:21,240 --> 00:09:23,580
blocks are older than others that's

273
00:09:23,580 --> 00:09:25,380
called wear leveling that that's all

274
00:09:25,380 --> 00:09:28,860
transparent to the operating system

275
00:09:28,860 --> 00:09:30,959
uh and we're gonna be talking about Ross

276
00:09:30,959 --> 00:09:31,800
that's gonna be like kind of my main

277
00:09:31,800 --> 00:09:34,800
focus for this presentation uh generally

278
00:09:34,800 --> 00:09:37,339
speaking it's going to be using the onfi

279
00:09:37,339 --> 00:09:40,620
layer which is just a protocol used to

280
00:09:40,620 --> 00:09:42,300
read and write from nand

281
00:09:42,300 --> 00:09:44,580
uh manage the end on the other hand is

282
00:09:44,580 --> 00:09:46,500
actually quite popular right so you'll

283
00:09:46,500 --> 00:09:47,880
see this a lot and the reason I'm not

284
00:09:47,880 --> 00:09:49,740
talking about it is because I think it's

285
00:09:49,740 --> 00:09:51,300
a lot easier to deal with there's not as

286
00:09:51,300 --> 00:09:53,640
many gotchas or nuances here because

287
00:09:53,640 --> 00:09:56,580
you're basically using the controller

288
00:09:56,580 --> 00:09:58,980
that's inside the chip here right so

289
00:09:58,980 --> 00:10:00,660
this picture over here we have the

290
00:10:00,660 --> 00:10:02,519
external controller hanging out this one

291
00:10:02,519 --> 00:10:05,640
it's on the die right so this is a

292
00:10:05,640 --> 00:10:08,220
I forget how many pins one

293
00:10:08,220 --> 00:10:11,940
58 pin maybe 58 pin BGA chip this is a

294
00:10:11,940 --> 00:10:13,860
flash right here and the controller is

295
00:10:13,860 --> 00:10:15,420
part of this and you can go on Amazon

296
00:10:15,420 --> 00:10:17,519
and buy one of these all sockets here oh

297
00:10:17,519 --> 00:10:20,940
sorry 153. this is an emmc chip so the

298
00:10:20,940 --> 00:10:22,320
controller is in there all you have to

299
00:10:22,320 --> 00:10:24,480
do get it off the board plug it into the

300
00:10:24,480 --> 00:10:26,160
right socket here you can't see it on

301
00:10:26,160 --> 00:10:28,140
the other side but there's an um

302
00:10:28,140 --> 00:10:30,600
like an SD card uh configuration there

303
00:10:30,600 --> 00:10:31,800
and you just plug that into your laptop

304
00:10:31,800 --> 00:10:33,899
right it's going to mount that as an SD

305
00:10:33,899 --> 00:10:35,399
card and your data is going to be there

306
00:10:35,399 --> 00:10:37,380
and it's super easy if there's any like

307
00:10:37,380 --> 00:10:39,540
encryption going on you'll have to kind

308
00:10:39,540 --> 00:10:41,640
of solve that separately but the idea is

309
00:10:41,640 --> 00:10:44,279
if you have MMC your biggest challenge

310
00:10:44,279 --> 00:10:46,019
is going to be getting the data off and

311
00:10:46,019 --> 00:10:47,600
then reading it

312
00:10:47,600 --> 00:10:50,519
these emmc which is what this is is

313
00:10:50,519 --> 00:10:53,279
extremely popular in mobile devices and

314
00:10:53,279 --> 00:10:56,579
devices that use socs so I see it a lot

315
00:10:56,579 --> 00:10:58,040
on like children's toys

316
00:10:58,040 --> 00:11:00,000
definitely cell phones conference room

317
00:11:00,000 --> 00:11:02,279
phones that kind of stuff a lot of the

318
00:11:02,279 --> 00:11:03,959
newer devices so think like Flagship

319
00:11:03,959 --> 00:11:06,240
Samsung's I think even Apple they now

320
00:11:06,240 --> 00:11:08,459
use this Universal flash storage

321
00:11:08,459 --> 00:11:10,980
it's just another managed nand really

322
00:11:10,980 --> 00:11:13,200
and it's the readers are starting to

323
00:11:13,200 --> 00:11:14,579
become available they're definitely more

324
00:11:14,579 --> 00:11:16,920
expensive than the emmc readers this

325
00:11:16,920 --> 00:11:19,500
one's probably like 100 on Amazon and

326
00:11:19,500 --> 00:11:20,880
it's most of them that I've dealt with

327
00:11:20,880 --> 00:11:25,260
are this 153 or one 169 format

328
00:11:25,260 --> 00:11:27,540
um oh yeah so it does all the management

329
00:11:27,540 --> 00:11:30,060
of the bad blocks of the wear level and

330
00:11:30,060 --> 00:11:31,800
that's all handled inside of the Chip

331
00:11:31,800 --> 00:11:33,180
and that's why it's easier for you

332
00:11:33,180 --> 00:11:34,079
because you have to deal with any of

333
00:11:34,079 --> 00:11:35,399
that

334
00:11:35,399 --> 00:11:36,839
it's not written down here but one last

335
00:11:36,839 --> 00:11:39,300
thing I wanted to mention uh data sheets

336
00:11:39,300 --> 00:11:40,800
right so

337
00:11:40,800 --> 00:11:42,120
if let's say you're let's say You're

338
00:11:42,120 --> 00:11:42,959
Building something let's say You're

339
00:11:42,959 --> 00:11:44,459
Building this badge and you want to use

340
00:11:44,459 --> 00:11:46,800
a raw nand you're definitely going to

341
00:11:46,800 --> 00:11:48,180
need the data sheet right so those are

342
00:11:48,180 --> 00:11:49,620
all publicly available like you will

343
00:11:49,620 --> 00:11:52,680
need access to that to actually do what

344
00:11:52,680 --> 00:11:53,880
you need to do

345
00:11:53,880 --> 00:11:56,040
on the right over here it is written but

346
00:11:56,040 --> 00:11:57,839
you don't usually get the data sheet

347
00:11:57,839 --> 00:11:59,100
here all you're going to get is the pin

348
00:11:59,100 --> 00:12:01,260
out so what the pins actually do and

349
00:12:01,260 --> 00:12:02,640
that's kind of all you need right you

350
00:12:02,640 --> 00:12:04,680
don't really need a lot of details about

351
00:12:04,680 --> 00:12:07,800
this chip to do things but for run and

352
00:12:07,800 --> 00:12:10,260
you're gonna need to know like the

353
00:12:10,260 --> 00:12:10,880
um

354
00:12:10,880 --> 00:12:13,800
the device ID some different parameters

355
00:12:13,800 --> 00:12:14,880
which we're going to do in a few slides

356
00:12:14,880 --> 00:12:17,160
but the data sheets can be critical

357
00:12:17,160 --> 00:12:19,079
okay no more Theory let's we can

358
00:12:19,079 --> 00:12:20,339
actually do some more fun stuff so now

359
00:12:20,339 --> 00:12:23,100
we know we're focusing on raw and end uh

360
00:12:23,100 --> 00:12:25,800
the next step is to identify the demand

361
00:12:25,800 --> 00:12:27,839
on your device and then get it off the

362
00:12:27,839 --> 00:12:29,519
device

363
00:12:29,519 --> 00:12:33,000
so what I always recommend doing is if

364
00:12:33,000 --> 00:12:34,980
you buy a device or you know have a

365
00:12:34,980 --> 00:12:36,720
badge or something right here you're

366
00:12:36,720 --> 00:12:38,760
going to want to start off by making an

367
00:12:38,760 --> 00:12:40,860
inventory of everything on the PCB right

368
00:12:40,860 --> 00:12:43,320
so you know I've checked in this morning

369
00:12:43,320 --> 00:12:44,940
and I was looking at this I noticed this

370
00:12:44,940 --> 00:12:47,639
eight pin chip over here that's the I

371
00:12:47,639 --> 00:12:50,700
think it's a ch330 that's the USB to

372
00:12:50,700 --> 00:12:53,339
uart chip which is conveniently located

373
00:12:53,339 --> 00:12:55,440
right next to the USB and then the pins

374
00:12:55,440 --> 00:12:57,540
go to the uart so that was pretty easy

375
00:12:57,540 --> 00:12:58,940
to identify

376
00:12:58,940 --> 00:13:01,260
the IC as I mentioned the main

377
00:13:01,260 --> 00:13:03,480
controller was an esp32 right so that's

378
00:13:03,480 --> 00:13:05,459
going to be your main processor here

379
00:13:05,459 --> 00:13:07,079
microcontroller and again I didn't

380
00:13:07,079 --> 00:13:08,760
notice any flash hanging out on this guy

381
00:13:08,760 --> 00:13:10,079
but if you did have that I would notice

382
00:13:10,079 --> 00:13:12,000
I would find that and then pull down the

383
00:13:12,000 --> 00:13:13,560
relevant docs for these things so grab

384
00:13:13,560 --> 00:13:14,820
the data sheets for each of them any

385
00:13:14,820 --> 00:13:16,800
sort of pin outs you can find and try to

386
00:13:16,800 --> 00:13:18,180
understand the purpose of each of these

387
00:13:18,180 --> 00:13:19,920
chips you don't need to worry about like

388
00:13:19,920 --> 00:13:22,620
transistors or resistors diodes at least

389
00:13:22,620 --> 00:13:24,180
not for your initial analysis just focus

390
00:13:24,180 --> 00:13:25,320
on like what these things are doing

391
00:13:25,320 --> 00:13:28,260
functionally and then go from there so

392
00:13:28,260 --> 00:13:29,339
obviously it's part of this you're going

393
00:13:29,339 --> 00:13:30,660
to find the Flash

394
00:13:30,660 --> 00:13:34,260
the common package types you'll see it's

395
00:13:34,260 --> 00:13:35,519
actually better that this device

396
00:13:35,519 --> 00:13:39,779
actually has the soic 8 on it this is a

397
00:13:39,779 --> 00:13:42,120
16 format this is really popular for

398
00:13:42,120 --> 00:13:44,459
Flash See The Flash usually in the eight

399
00:13:44,459 --> 00:13:47,040
pin arrangement though the one on the

400
00:13:47,040 --> 00:13:50,160
right there the to SP t-sop as I call it

401
00:13:50,160 --> 00:13:53,339
is the 48 pin parallel flash this is

402
00:13:53,339 --> 00:13:55,560
also a very popular format that you'll

403
00:13:55,560 --> 00:13:58,800
see in a lot of iot devices

404
00:13:58,800 --> 00:14:00,839
you'll also see the the top two where

405
00:14:00,839 --> 00:14:01,800
it's listed here the ones I just

406
00:14:01,800 --> 00:14:04,920
mentioned soic and tsop those are both

407
00:14:04,920 --> 00:14:07,380
with the pins exposed right so those are

408
00:14:07,380 --> 00:14:09,959
my preferred ones I find the bottom two

409
00:14:09,959 --> 00:14:12,839
BGA and flat no lead the pins are

410
00:14:12,839 --> 00:14:14,760
usually going to be really small on the

411
00:14:14,760 --> 00:14:16,560
sides or all on the bottom right and

412
00:14:16,560 --> 00:14:17,639
that's just going to really change how

413
00:14:17,639 --> 00:14:20,279
you get these chips off the device it's

414
00:14:20,279 --> 00:14:21,720
still possible for both of them but it's

415
00:14:21,720 --> 00:14:24,860
definitely a little bit more complicated

416
00:14:24,899 --> 00:14:27,540
so taking it off this can seem if you've

417
00:14:27,540 --> 00:14:28,800
never done this before it can seem a

418
00:14:28,800 --> 00:14:30,420
little scary it was definitely scary for

419
00:14:30,420 --> 00:14:31,860
me I was so terrified that I was going

420
00:14:31,860 --> 00:14:33,899
to actually cause damage and over time

421
00:14:33,899 --> 00:14:36,060
you realize that these these chips are

422
00:14:36,060 --> 00:14:37,260
pretty resilient even though the data

423
00:14:37,260 --> 00:14:38,820
sheets say like oh don't get it too hot

424
00:14:38,820 --> 00:14:41,160
they can get pretty hot and things will

425
00:14:41,160 --> 00:14:43,019
still work for long-term use I'm not

426
00:14:43,019 --> 00:14:45,120
sure but at least for our purposes of

427
00:14:45,120 --> 00:14:46,260
taking it off

428
00:14:46,260 --> 00:14:48,300
doing a reading of it and then probably

429
00:14:48,300 --> 00:14:50,880
throwing in the trash uh this these

430
00:14:50,880 --> 00:14:52,260
methods should work so you really have

431
00:14:52,260 --> 00:14:54,240
three main ways you could do this now

432
00:14:54,240 --> 00:14:55,980
the first one is to use a soldering

433
00:14:55,980 --> 00:14:57,300
station

434
00:14:57,300 --> 00:14:58,980
that's going to be when you have these

435
00:14:58,980 --> 00:15:00,600
right so you can definitely take chips

436
00:15:00,600 --> 00:15:02,040
off with just solder you don't need to

437
00:15:02,040 --> 00:15:05,519
use hot air what you can do is it's kind

438
00:15:05,519 --> 00:15:06,899
of kind of intuitive but if you watch a

439
00:15:06,899 --> 00:15:08,220
couple YouTube videos it'll make sense

440
00:15:08,220 --> 00:15:10,620
you can use this idea called braking so

441
00:15:10,620 --> 00:15:12,000
basically just put a big old blob of

442
00:15:12,000 --> 00:15:13,860
solder right here and then kind of like

443
00:15:13,860 --> 00:15:16,139
break it across the pins and if you put

444
00:15:16,139 --> 00:15:17,399
enough on there it becomes like this

445
00:15:17,399 --> 00:15:20,040
whole pool of solder and if you make

446
00:15:20,040 --> 00:15:21,420
that whole thing molten you can use

447
00:15:21,420 --> 00:15:23,459
tweezers and kind of lift the chip up a

448
00:15:23,459 --> 00:15:25,199
little bit and then let it solidify do

449
00:15:25,199 --> 00:15:26,820
the other side and then kind of just

450
00:15:26,820 --> 00:15:28,620
like slowly lift the chip off the board

451
00:15:28,620 --> 00:15:30,540
you got to be careful you don't bend

452
00:15:30,540 --> 00:15:33,000
anything but it can be done and I've

453
00:15:33,000 --> 00:15:34,380
done that for these ones here because

454
00:15:34,380 --> 00:15:36,060
it's just it's easy to just put a bunch

455
00:15:36,060 --> 00:15:37,320
of solder on here and just kind of lift

456
00:15:37,320 --> 00:15:38,940
it up slowly

457
00:15:38,940 --> 00:15:40,260
you could also use hot air that's what

458
00:15:40,260 --> 00:15:42,180
this picture is on the left here so it's

459
00:15:42,180 --> 00:15:43,500
kind of three things going on in this

460
00:15:43,500 --> 00:15:45,120
picture got the soldering iron off to

461
00:15:45,120 --> 00:15:45,899
the left

462
00:15:45,899 --> 00:15:49,199
and the middle is a PCB heater with a

463
00:15:49,199 --> 00:15:51,300
PCB in it and then a kind of a hot air

464
00:15:51,300 --> 00:15:53,399
gun over the top of it this is obviously

465
00:15:53,399 --> 00:15:54,600
a stage photo you wouldn't want to be

466
00:15:54,600 --> 00:15:56,519
that far away but that's kind of your

467
00:15:56,519 --> 00:15:57,959
Arrangement there and on the right is

468
00:15:57,959 --> 00:16:00,180
just the hot air gun set to about 300C

469
00:16:00,180 --> 00:16:03,240
but the idea is this thing right here is

470
00:16:03,240 --> 00:16:05,399
warming up the board for you so you set

471
00:16:05,399 --> 00:16:06,720
that to I think it's

472
00:16:06,720 --> 00:16:08,040
it's pretty low in this picture again

473
00:16:08,040 --> 00:16:11,339
stage photo but it's a 160c here so what

474
00:16:11,339 --> 00:16:12,480
you're doing is kind of pumping heat

475
00:16:12,480 --> 00:16:14,820
into the PCB so that you're warming the

476
00:16:14,820 --> 00:16:17,040
whole board consistently and the reason

477
00:16:17,040 --> 00:16:20,459
for this is some pcbs will have like a

478
00:16:20,459 --> 00:16:21,720
lot of copper on them or they're really

479
00:16:21,720 --> 00:16:23,880
big pcbs and the second you start

480
00:16:23,880 --> 00:16:26,100
putting heat onto a chip all that heat

481
00:16:26,100 --> 00:16:27,600
can start going to other parts of the

482
00:16:27,600 --> 00:16:29,339
board and then you'll end up just

483
00:16:29,339 --> 00:16:30,779
sitting there forever trying to warm it

484
00:16:30,779 --> 00:16:32,220
up while the heat dissipates so the idea

485
00:16:32,220 --> 00:16:34,860
is what if you warm everything up then

486
00:16:34,860 --> 00:16:36,600
it doesn't have to disperse as much and

487
00:16:36,600 --> 00:16:37,620
then it's a lot easier for you to

488
00:16:37,620 --> 00:16:39,899
actually get the chip off

489
00:16:39,899 --> 00:16:40,920
um and basically you can just kind of

490
00:16:40,920 --> 00:16:42,720
sit there and warm up a specific spot

491
00:16:42,720 --> 00:16:45,060
and then the solder will become molten

492
00:16:45,060 --> 00:16:46,680
and you can kind of lift the chip off

493
00:16:46,680 --> 00:16:48,839
and let it cool down your mileage will

494
00:16:48,839 --> 00:16:50,279
vary depending on if it's leaded solder

495
00:16:50,279 --> 00:16:52,740
versus unleaded obviously it melts at a

496
00:16:52,740 --> 00:16:54,360
different temperature so you'll have to

497
00:16:54,360 --> 00:16:56,160
kind of factor that in if when you're

498
00:16:56,160 --> 00:16:58,860
actually trying to do this just uh this

499
00:16:58,860 --> 00:17:00,300
picture on the right here this kind of

500
00:17:00,300 --> 00:17:02,100
gross looking it's kind of hard to see

501
00:17:02,100 --> 00:17:04,260
but it's like gross yellow stuff this is

502
00:17:04,260 --> 00:17:06,720
just a high heat tape that I like to use

503
00:17:06,720 --> 00:17:08,520
to cover up everything else that's not

504
00:17:08,520 --> 00:17:10,260
what I want to take off because I don't

505
00:17:10,260 --> 00:17:12,540
want little resistors to go flying or

506
00:17:12,540 --> 00:17:15,000
maybe just make things molt into nearby

507
00:17:15,000 --> 00:17:16,919
but you basically would just end up with

508
00:17:16,919 --> 00:17:18,179
this right you have this is where the

509
00:17:18,179 --> 00:17:20,760
chip was this is where it is now see the

510
00:17:20,760 --> 00:17:22,020
solder is kind of still hanging out on

511
00:17:22,020 --> 00:17:23,220
this this chip here you're gonna have to

512
00:17:23,220 --> 00:17:24,599
clean that off

513
00:17:24,599 --> 00:17:26,939
the last thing and you can have like a

514
00:17:26,939 --> 00:17:28,799
whole slide deck on just desoldering and

515
00:17:28,799 --> 00:17:29,880
how all this stuff works I just want to

516
00:17:29,880 --> 00:17:31,080
kind of show you at a high level how you

517
00:17:31,080 --> 00:17:33,120
can do this the last method which is

518
00:17:33,120 --> 00:17:34,080
actually pretty cool is anyone use

519
00:17:34,080 --> 00:17:36,360
infrared to take off ships

520
00:17:36,360 --> 00:17:37,679
it's pretty cool you can you can find

521
00:17:37,679 --> 00:17:40,679
cheap ones on like eBay and AliExpress

522
00:17:40,679 --> 00:17:43,200
but essentially using IR to kind of

523
00:17:43,200 --> 00:17:44,940
focus it on the ship and it looks like

524
00:17:44,940 --> 00:17:47,280
just a light turning on and off and then

525
00:17:47,280 --> 00:17:48,900
all of a sudden the solder is molten and

526
00:17:48,900 --> 00:17:51,059
there's maybe some smoke it's pretty

527
00:17:51,059 --> 00:17:53,700
cool the cheap ones are probably not

528
00:17:53,700 --> 00:17:55,380
recommended because you know you're

529
00:17:55,380 --> 00:17:57,000
doing some

530
00:17:57,000 --> 00:17:59,280
you know high voltage I guess it's like

531
00:17:59,280 --> 00:18:00,660
dangerous things for the thing you

532
00:18:00,660 --> 00:18:02,760
bought on on eBay uh the more expensive

533
00:18:02,760 --> 00:18:05,039
ones are very very much more expensive

534
00:18:05,039 --> 00:18:07,140
more commercial uh but it does work and

535
00:18:07,140 --> 00:18:08,400
that I've used those and it's been

536
00:18:08,400 --> 00:18:10,160
pretty fun

537
00:18:10,160 --> 00:18:13,260
uh once you get the chip off you can

538
00:18:13,260 --> 00:18:15,480
well one clean it and then focus on

539
00:18:15,480 --> 00:18:17,400
reading the data so cleaning is actually

540
00:18:17,400 --> 00:18:18,840
really important not the most exciting

541
00:18:18,840 --> 00:18:20,820
part but once you have it'll chip off

542
00:18:20,820 --> 00:18:22,500
right so this one here you can see you

543
00:18:22,500 --> 00:18:23,520
know some of these pins are already

544
00:18:23,520 --> 00:18:25,260
touching and there's a lot of solder on

545
00:18:25,260 --> 00:18:26,820
here you're gonna have to get rid of

546
00:18:26,820 --> 00:18:30,360
that so the solution usually is to just

547
00:18:30,360 --> 00:18:31,200
use

548
00:18:31,200 --> 00:18:32,880
flux that's what this picture is here

549
00:18:32,880 --> 00:18:33,900
this stuff's really good I think it's

550
00:18:33,900 --> 00:18:37,320
amtec I buy it on Amazon there it's

551
00:18:37,320 --> 00:18:38,880
really good I'd recommend that if you're

552
00:18:38,880 --> 00:18:42,240
gonna do any sort of either BGA or uh

553
00:18:42,240 --> 00:18:43,559
kind of just like flash removal stuff

554
00:18:43,559 --> 00:18:45,360
here it's it's probably like 40 bucks

555
00:18:45,360 --> 00:18:47,520
for that tube but you need to get all

556
00:18:47,520 --> 00:18:50,280
the all the solder off the pins and the

557
00:18:50,280 --> 00:18:51,360
chip should sit like pretty much

558
00:18:51,360 --> 00:18:52,799
completely flat right so if you set it

559
00:18:52,799 --> 00:18:53,880
down and kind of like touch it it

560
00:18:53,880 --> 00:18:55,320
wobbles that means there's still going

561
00:18:55,320 --> 00:18:56,700
to be a little bit of solder on there

562
00:18:56,700 --> 00:18:58,919
you can use some solder Wick which is

563
00:18:58,919 --> 00:19:00,660
kind of like a copper wire that you can

564
00:19:00,660 --> 00:19:02,220
heat up with some flux on it and it'll

565
00:19:02,220 --> 00:19:05,340
pull the solder off the IC but it should

566
00:19:05,340 --> 00:19:06,780
sit completely flat and you should be

567
00:19:06,780 --> 00:19:08,160
able to visually inspect it and say yeah

568
00:19:08,160 --> 00:19:10,520
there's no more solder on this

569
00:19:10,520 --> 00:19:12,660
next you're going to want to remove all

570
00:19:12,660 --> 00:19:14,100
the residue that you left on there has

571
00:19:14,100 --> 00:19:15,480
anyone ever has ever done this by the

572
00:19:15,480 --> 00:19:17,760
way like taking this off the next thing

573
00:19:17,760 --> 00:19:18,600
you're going to have to do is get all

574
00:19:18,600 --> 00:19:19,919
that flux off of there which is like

575
00:19:19,919 --> 00:19:22,140
really sticky and kind of like

576
00:19:22,140 --> 00:19:23,400
discolored

577
00:19:23,400 --> 00:19:25,740
um so you could use acetone or isopropyl

578
00:19:25,740 --> 00:19:27,360
alcohol to just kind of you know use a

579
00:19:27,360 --> 00:19:29,160
toothbrush so I'll just like set the

580
00:19:29,160 --> 00:19:30,419
chip down and kind of scrub it a little

581
00:19:30,419 --> 00:19:31,980
bit and then it removes all this uh

582
00:19:31,980 --> 00:19:34,679
really sticky uh stuff down here so it's

583
00:19:34,679 --> 00:19:36,059
like extremely sticky it definitely use

584
00:19:36,059 --> 00:19:37,620
gloves

585
00:19:37,620 --> 00:19:39,660
once it's clean uh you're going to want

586
00:19:39,660 --> 00:19:42,360
to read the data off of it so a couple a

587
00:19:42,360 --> 00:19:43,500
few different options you can do here

588
00:19:43,500 --> 00:19:45,240
I'm really going to talk about this one

589
00:19:45,240 --> 00:19:48,299
this is probably the easiest one option

590
00:19:48,299 --> 00:19:51,000
one there are like kind of feature built

591
00:19:51,000 --> 00:19:53,220
chips that you can use to how to make

592
00:19:53,220 --> 00:19:54,840
your own breakout board this is going to

593
00:19:54,840 --> 00:19:55,740
be the one that gives you the most

594
00:19:55,740 --> 00:19:57,900
versatility and

595
00:19:57,900 --> 00:20:00,120
um I guess control over things I've

596
00:20:00,120 --> 00:20:02,340
never done this I do I have one of these

597
00:20:02,340 --> 00:20:03,840
but I've never actually set it up

598
00:20:03,840 --> 00:20:05,039
because it seemed like a kind of a

599
00:20:05,039 --> 00:20:07,080
weekend project but it's really just a

600
00:20:07,080 --> 00:20:08,580
chip that allows you to kind of write

601
00:20:08,580 --> 00:20:10,440
your own reader for parallel flash

602
00:20:10,440 --> 00:20:12,419
there's blogs on it if you look it up

603
00:20:12,419 --> 00:20:15,000
it's pretty not too complicated but it's

604
00:20:15,000 --> 00:20:17,580
that's not the easiest option two which

605
00:20:17,580 --> 00:20:19,500
is definitely the easiest is go on eBay

606
00:20:19,500 --> 00:20:21,660
just look up one of these two products

607
00:20:21,660 --> 00:20:23,280
here and these things are about 100

608
00:20:23,280 --> 00:20:26,820
bucks they they come with like every

609
00:20:26,820 --> 00:20:29,280
socket adapter you can imagine all sorts

610
00:20:29,280 --> 00:20:31,740
of peripherals and cables of course

611
00:20:31,740 --> 00:20:34,140
comes with some nice software that uh

612
00:20:34,140 --> 00:20:35,820
conveniently doesn't want to run in VMS

613
00:20:35,820 --> 00:20:38,160
and has lots of WeChat links

614
00:20:38,160 --> 00:20:41,280
but it does work and it will support a

615
00:20:41,280 --> 00:20:43,080
lot of different ships for you

616
00:20:43,080 --> 00:20:43,980
um so I would recommend these are the

617
00:20:43,980 --> 00:20:45,900
two that I use I use them both because

618
00:20:45,900 --> 00:20:48,600
I've had issues where maybe one device

619
00:20:48,600 --> 00:20:50,700
doesn't have support for a chip the

620
00:20:50,700 --> 00:20:52,620
other one does or they both claim they

621
00:20:52,620 --> 00:20:54,419
have support but I read it with one of

622
00:20:54,419 --> 00:20:56,640
them and the results are crazy so kind

623
00:20:56,640 --> 00:20:57,840
of having that redundancy works really

624
00:20:57,840 --> 00:20:59,760
well like I said they're both about 100

625
00:20:59,760 --> 00:21:01,080
or less

626
00:21:01,080 --> 00:21:03,559
and then the last one is Flash ROM

627
00:21:03,559 --> 00:21:06,059
personally I use this more for SPI chips

628
00:21:06,059 --> 00:21:08,039
so when they're the eight pin ones and

629
00:21:08,039 --> 00:21:09,960
it's kind of similar to the first option

630
00:21:09,960 --> 00:21:12,299
here but it is a way and it's also open

631
00:21:12,299 --> 00:21:13,860
source right so you can use that you can

632
00:21:13,860 --> 00:21:16,140
write your own profiles for chips again

633
00:21:16,140 --> 00:21:18,240
a little bit more leg work if you have

634
00:21:18,240 --> 00:21:19,679
to write your own profile we could have

635
00:21:19,679 --> 00:21:21,360
a whole slide deck on just doing that so

636
00:21:21,360 --> 00:21:22,679
just throwing that out there is enough

637
00:21:22,679 --> 00:21:24,480
an option if you wanted to but for

638
00:21:24,480 --> 00:21:26,940
option two here look how easy this is uh

639
00:21:26,940 --> 00:21:28,320
you put your chip in there that's nice

640
00:21:28,320 --> 00:21:29,340
and clean

641
00:21:29,340 --> 00:21:32,400
and then you close it and then you load

642
00:21:32,400 --> 00:21:34,260
up that software I talked about and then

643
00:21:34,260 --> 00:21:36,120
what gets spit out is basically just a

644
00:21:36,120 --> 00:21:38,880
binary dump of The Flash right

645
00:21:38,880 --> 00:21:40,980
because these readers come from China

646
00:21:40,980 --> 00:21:42,600
I'd recommend creating by two or three

647
00:21:42,600 --> 00:21:45,179
of them and then md5ing them just make

648
00:21:45,179 --> 00:21:47,460
sure that you're seeing consistency in

649
00:21:47,460 --> 00:21:49,260
the data sometimes about a couple bits

650
00:21:49,260 --> 00:21:50,760
be wrong here and there and that'll like

651
00:21:50,760 --> 00:21:52,980
that'll like really make things more

652
00:21:52,980 --> 00:21:54,120
challenging down the road when you're

653
00:21:54,120 --> 00:21:55,679
trying to like decrypt files it's

654
00:21:55,679 --> 00:21:57,720
failing you're like I know this is right

655
00:21:57,720 --> 00:21:59,280
I know it's the password why isn't it

656
00:21:59,280 --> 00:22:01,380
working it turns out one one bite

657
00:22:01,380 --> 00:22:03,780
earlier on was was corrupted so

658
00:22:03,780 --> 00:22:05,820
definitely take a couple flash dumps and

659
00:22:05,820 --> 00:22:08,880
then at this point you're kind of done

660
00:22:08,880 --> 00:22:10,559
in the hardware world right you don't

661
00:22:10,559 --> 00:22:12,960
really need any more soldering irons or

662
00:22:12,960 --> 00:22:14,940
hot air or sockets you can kind of push

663
00:22:14,940 --> 00:22:17,220
all that stuff away and shift your

664
00:22:17,220 --> 00:22:20,460
analysis to a software

665
00:22:20,460 --> 00:22:22,799
one little thing that's kind of fun is

666
00:22:22,799 --> 00:22:24,720
in this this if you're thinking about

667
00:22:24,720 --> 00:22:26,280
like how you can use this and how you

668
00:22:26,280 --> 00:22:28,380
can be successful in whatever project

669
00:22:28,380 --> 00:22:30,419
you're doing it is possible to put the

670
00:22:30,419 --> 00:22:32,580
chips back on right so imagine a

671
00:22:32,580 --> 00:22:34,980
scenario where

672
00:22:34,980 --> 00:22:37,679
um you know you you plug in a device

673
00:22:37,679 --> 00:22:39,840
it's got you are you connect over you

674
00:22:39,840 --> 00:22:41,220
are and you are just a serial connection

675
00:22:41,220 --> 00:22:44,159
right you connect in and it you turn it

676
00:22:44,159 --> 00:22:46,080
on and it says Hey welcome to Linux

677
00:22:46,080 --> 00:22:48,120
enter the password and that's how you

678
00:22:48,120 --> 00:22:49,679
don't know the password

679
00:22:49,679 --> 00:22:52,440
well you could take the chip off and

680
00:22:52,440 --> 00:22:54,419
then find that password and Etsy

681
00:22:54,419 --> 00:22:56,159
password RSV Shadow wherever they put it

682
00:22:56,159 --> 00:22:59,520
and then change it re-solder it and then

683
00:22:59,520 --> 00:23:01,320
boot it up again and then you wouldn't

684
00:23:01,320 --> 00:23:03,419
know the password you could log in so

685
00:23:03,419 --> 00:23:06,000
you could make changes and get this

686
00:23:06,000 --> 00:23:08,340
thing to boot back up I will say there's

687
00:23:08,340 --> 00:23:09,539
a number of things you have to consider

688
00:23:09,539 --> 00:23:10,799
and I'm not going to talk about all of

689
00:23:10,799 --> 00:23:13,140
them but it is something that can be

690
00:23:13,140 --> 00:23:14,760
done and I've done that in the past this

691
00:23:14,760 --> 00:23:16,980
is it's not a great photo but you can

692
00:23:16,980 --> 00:23:19,140
see that it's soldered back on there I'm

693
00:23:19,140 --> 00:23:21,360
pretty proud of that sadder job

694
00:23:21,360 --> 00:23:22,140
um

695
00:23:22,140 --> 00:23:23,700
it's much easier when you can see the

696
00:23:23,700 --> 00:23:26,419
pins of course right so if you are

697
00:23:26,419 --> 00:23:29,039
re-soldering something that is BGA

698
00:23:29,039 --> 00:23:31,140
but I'm probably not visible it's a lot

699
00:23:31,140 --> 00:23:32,640
more challenging you have to buy these

700
00:23:32,640 --> 00:23:35,880
crazy uh VGA stencils off of eBay and

701
00:23:35,880 --> 00:23:38,760
then use some solder paste and re-ball

702
00:23:38,760 --> 00:23:41,460
it and then hope it all works this right

703
00:23:41,460 --> 00:23:42,960
here is actually kind of a fun example

704
00:23:42,960 --> 00:23:45,780
this is a little USB device it's a I

705
00:23:45,780 --> 00:23:47,000
think BGA

706
00:23:47,000 --> 00:23:51,000
like 176 layout but I did take this

707
00:23:51,000 --> 00:23:53,460
desolder it clean it use the stencil in

708
00:23:53,460 --> 00:23:55,320
the middle here re-balled it with this

709
00:23:55,320 --> 00:23:58,080
stuff here that I bought this is um

710
00:23:58,080 --> 00:24:00,419
mg chemical I think is the brand

711
00:24:00,419 --> 00:24:01,740
um this stuff's also great good on

712
00:24:01,740 --> 00:24:04,320
Amazon re-balled it here put it back on

713
00:24:04,320 --> 00:24:07,980
there and then it did work so I was very

714
00:24:07,980 --> 00:24:09,480
shocked actually that it did work but it

715
00:24:09,480 --> 00:24:11,340
is possible you can use hot air and just

716
00:24:11,340 --> 00:24:12,960
kind of line it up and it will kind of

717
00:24:12,960 --> 00:24:16,020
reseat as you solder it back on

718
00:24:16,020 --> 00:24:17,520
I wouldn't recommend this as like your

719
00:24:17,520 --> 00:24:19,140
first thing this is like you've tried a

720
00:24:19,140 --> 00:24:20,460
lot of other things and they're not

721
00:24:20,460 --> 00:24:22,620
working this is like your last line of

722
00:24:22,620 --> 00:24:24,360
defense even this one I wouldn't

723
00:24:24,360 --> 00:24:25,980
recommend doing until you've really

724
00:24:25,980 --> 00:24:27,480
exhausted a lot of other options they're

725
00:24:27,480 --> 00:24:29,340
probably better mediums out there but

726
00:24:29,340 --> 00:24:30,780
just something to think about when you

727
00:24:30,780 --> 00:24:32,640
start kind of coming up with an attack

728
00:24:32,640 --> 00:24:34,740
plan here

729
00:24:34,740 --> 00:24:38,159
okay next we have the Reed now we're

730
00:24:38,159 --> 00:24:39,419
going to focus on actually understanding

731
00:24:39,419 --> 00:24:41,159
how this data is arranged and because

732
00:24:41,159 --> 00:24:43,080
we're dealing with raw nand we have to

733
00:24:43,080 --> 00:24:44,220
assume that there was some kind of

734
00:24:44,220 --> 00:24:46,260
controller level in the middle and we're

735
00:24:46,260 --> 00:24:47,580
going to basically have to unpack that

736
00:24:47,580 --> 00:24:49,559
to make sure that we're looking at the

737
00:24:49,559 --> 00:24:52,158
data correctly

738
00:24:52,620 --> 00:24:54,600
right so if you go online and type in

739
00:24:54,600 --> 00:24:55,980
embedded

740
00:24:55,980 --> 00:24:58,260
embedded research blog or something or

741
00:24:58,260 --> 00:25:00,360
hacking a router or something you're

742
00:25:00,360 --> 00:25:01,679
going to get to some guy's blog and it's

743
00:25:01,679 --> 00:25:03,240
going to be very informative but they're

744
00:25:03,240 --> 00:25:04,620
always going to run bin walk and be like

745
00:25:04,620 --> 00:25:07,200
I ran bin walk all the data was there I

746
00:25:07,200 --> 00:25:08,940
found the password and that's awesome

747
00:25:08,940 --> 00:25:11,820
but it's not going to work every step of

748
00:25:11,820 --> 00:25:13,500
the way and this is

749
00:25:13,500 --> 00:25:15,419
how I usually get involved with projects

750
00:25:15,419 --> 00:25:17,100
where I work is somebody will say hey

751
00:25:17,100 --> 00:25:18,480
I'm trying to work on this embedded

752
00:25:18,480 --> 00:25:20,820
device I ran bin walk it didn't work and

753
00:25:20,820 --> 00:25:22,080
then they send me something like this

754
00:25:22,080 --> 00:25:23,340
and then we have to kind of talk through

755
00:25:23,340 --> 00:25:24,659
like some of these these Concepts that

756
00:25:24,659 --> 00:25:25,740
we're going to go over and why you're

757
00:25:25,740 --> 00:25:26,880
seeing this

758
00:25:26,880 --> 00:25:28,919
um so it's not always going to work in

759
00:25:28,919 --> 00:25:30,539
this example here

760
00:25:30,539 --> 00:25:32,159
this is some work that we did that we

761
00:25:32,159 --> 00:25:33,779
published on the manding blog a couple

762
00:25:33,779 --> 00:25:35,159
years ago

763
00:25:35,159 --> 00:25:36,179
um

764
00:25:36,179 --> 00:25:37,980
if you run Ben walk on it there's some

765
00:25:37,980 --> 00:25:39,779
it's good data right you see that

766
00:25:39,779 --> 00:25:42,360
there's a u-boot header up here some

767
00:25:42,360 --> 00:25:43,620
compressed data which is probably the

768
00:25:43,620 --> 00:25:44,520
kernel or maybe it's part of the

769
00:25:44,520 --> 00:25:46,620
bootloader and then you see all these

770
00:25:46,620 --> 00:25:48,120
file systems here

771
00:25:48,120 --> 00:25:50,820
and that's unusual right you would never

772
00:25:50,820 --> 00:25:52,440
see that many file systems in a better

773
00:25:52,440 --> 00:25:54,299
device and your other kind of indicator

774
00:25:54,299 --> 00:25:55,980
that something's wrong here are these

775
00:25:55,980 --> 00:25:57,779
offsets right so these are kind of wild

776
00:25:57,779 --> 00:26:00,600
offsets and it'd be very very unlikely

777
00:26:00,600 --> 00:26:02,940
that a file system is going to be at a

778
00:26:02,940 --> 00:26:04,500
random hexadecimal also that doesn't

779
00:26:04,500 --> 00:26:06,539
align to a block right we'll talk about

780
00:26:06,539 --> 00:26:08,279
blocks in a second here

781
00:26:08,279 --> 00:26:10,919
so anyway something's wrong here

782
00:26:10,919 --> 00:26:13,559
so when you're dealing with manned you

783
00:26:13,559 --> 00:26:16,620
have two like kind of units of

784
00:26:16,620 --> 00:26:19,620
measurement I guess or storage so a page

785
00:26:19,620 --> 00:26:21,419
is going to be the smallest thing that

786
00:26:21,419 --> 00:26:22,500
you can write

787
00:26:22,500 --> 00:26:24,720
and a block is the smallest thing that

788
00:26:24,720 --> 00:26:26,640
you erase so when you do a bulk erase of

789
00:26:26,640 --> 00:26:28,919
an end you do that in a block and you

790
00:26:28,919 --> 00:26:31,500
write things at like a driver level in

791
00:26:31,500 --> 00:26:34,140
the page and all this data is going to

792
00:26:34,140 --> 00:26:35,340
be in the data sheet right so it's going

793
00:26:35,340 --> 00:26:36,240
to say

794
00:26:36,240 --> 00:26:41,600
the page is 2048 bytes and the block is

795
00:26:41,600 --> 00:26:44,460
64 pages right and those you'll need to

796
00:26:44,460 --> 00:26:45,659
know that data when you're dealing with

797
00:26:45,659 --> 00:26:47,100
this

798
00:26:47,100 --> 00:26:48,840
I want to kind of nuance here to deal

799
00:26:48,840 --> 00:26:51,360
with is this concept of main versus

800
00:26:51,360 --> 00:26:54,900
spare data right so we're going to talk

801
00:26:54,900 --> 00:26:55,740
about that in the next slide here but

802
00:26:55,740 --> 00:26:56,760
you have to remember there's two of

803
00:26:56,760 --> 00:26:57,539
those

804
00:26:57,539 --> 00:26:59,400
and I just mentioned this on the last

805
00:26:59,400 --> 00:27:01,700
slide but file systems partitions

806
00:27:01,700 --> 00:27:04,140
whatever are almost always going to be

807
00:27:04,140 --> 00:27:05,640
on the Block boundary right because if

808
00:27:05,640 --> 00:27:08,220
you are doing like a nand wipe you want

809
00:27:08,220 --> 00:27:09,600
to make sure you can actually wipe

810
00:27:09,600 --> 00:27:11,640
blocks so you're not going to have a

811
00:27:11,640 --> 00:27:13,020
kernel

812
00:27:13,020 --> 00:27:14,940
taking up a block and a half right it's

813
00:27:14,940 --> 00:27:16,799
going to be one block three blocks four

814
00:27:16,799 --> 00:27:19,340
blocks whatever

815
00:27:19,620 --> 00:27:21,179
so the spare area is actually really

816
00:27:21,179 --> 00:27:24,000
important and this is oftentimes the

817
00:27:24,000 --> 00:27:25,620
first thing wrong when somebody runs

818
00:27:25,620 --> 00:27:27,779
binwalk is they didn't account for this

819
00:27:27,779 --> 00:27:29,340
so

820
00:27:29,340 --> 00:27:32,220
I mentioned earlier in the slides that

821
00:27:32,220 --> 00:27:34,620
there's this out of band data I'm sorry

822
00:27:34,620 --> 00:27:37,140
that there was a bad block data and

823
00:27:37,140 --> 00:27:38,940
that's usually what you find and what

824
00:27:38,940 --> 00:27:40,860
the purpose of this out-of-band area is

825
00:27:40,860 --> 00:27:42,539
this is where you're going to store

826
00:27:42,539 --> 00:27:46,080
other things about the page that are to

827
00:27:46,080 --> 00:27:47,460
make sure the data can be trusted right

828
00:27:47,460 --> 00:27:48,240
and I'm going to go over that in a

829
00:27:48,240 --> 00:27:50,400
second here but the arrangement is

830
00:27:50,400 --> 00:27:52,679
usually recommended by the chip company

831
00:27:52,679 --> 00:27:54,360
so this is I think a micron one I found

832
00:27:54,360 --> 00:27:56,279
they recommend well they're going to

833
00:27:56,279 --> 00:27:58,799
tell you one you have 20 48 bytes of

834
00:27:58,799 --> 00:28:01,919
main data and 64 of spare

835
00:28:01,919 --> 00:28:04,340
okay they they're recommending having

836
00:28:04,340 --> 00:28:07,559
main main main main main and then the

837
00:28:07,559 --> 00:28:09,659
four spares here at the end that's not

838
00:28:09,659 --> 00:28:11,340
always the case right it's really gonna

839
00:28:11,340 --> 00:28:12,720
depend on whatever's controlling the

840
00:28:12,720 --> 00:28:14,760
stand how they store things so you may

841
00:28:14,760 --> 00:28:18,419
have you know main spare main spare main

842
00:28:18,419 --> 00:28:21,539
spare main spare and hopefully once you

843
00:28:21,539 --> 00:28:22,799
start looking at the binary you can tell

844
00:28:22,799 --> 00:28:23,880
the difference but you're going to have

845
00:28:23,880 --> 00:28:25,200
to make sure you understand that because

846
00:28:25,200 --> 00:28:27,179
Ben walk has no idea about any stuff

847
00:28:27,179 --> 00:28:29,340
it's just reading the data and you'll

848
00:28:29,340 --> 00:28:30,900
have to kind of

849
00:28:30,900 --> 00:28:33,600
look at the button and see what happens

850
00:28:33,600 --> 00:28:35,820
uh and the main thing yeah mostly for us

851
00:28:35,820 --> 00:28:38,460
since we're just trying to read data we

852
00:28:38,460 --> 00:28:39,900
just want to get rid of this right we

853
00:28:39,900 --> 00:28:42,240
don't really want any out-of-band data a

854
00:28:42,240 --> 00:28:44,039
couple caveats here in a minute but most

855
00:28:44,039 --> 00:28:45,059
of the time we just want to get rid of

856
00:28:45,059 --> 00:28:46,440
it

857
00:28:46,440 --> 00:28:49,260
all right so the first use of the bad of

858
00:28:49,260 --> 00:28:52,440
a spare area is bad blocks right so

859
00:28:52,440 --> 00:28:54,360
it's going to depend on again the

860
00:28:54,360 --> 00:28:56,220
controller or the chip but usually

861
00:28:56,220 --> 00:28:57,960
there's this little marker two byte

862
00:28:57,960 --> 00:29:00,720
marker and the first page of a block

863
00:29:00,720 --> 00:29:04,020
that will indicate that it's good if you

864
00:29:04,020 --> 00:29:05,940
find a block that doesn't have that then

865
00:29:05,940 --> 00:29:08,279
that's probably considered a bad block

866
00:29:08,279 --> 00:29:10,260
and again you have to pull up the data

867
00:29:10,260 --> 00:29:12,480
sheet for your chip to confirm

868
00:29:12,480 --> 00:29:16,620
uh ECC is a checksum that's pretty cool

869
00:29:16,620 --> 00:29:18,600
because because not only does it tell

870
00:29:18,600 --> 00:29:21,299
you if something's wrong but it has data

871
00:29:21,299 --> 00:29:23,220
within itself to self-correct things

872
00:29:23,220 --> 00:29:25,620
which is pretty cool so you'll be able

873
00:29:25,620 --> 00:29:27,179
to identify a problem and potentially

874
00:29:27,179 --> 00:29:30,600
correct up to n Bits of data which can

875
00:29:30,600 --> 00:29:32,340
help you if there was a read error but

876
00:29:32,340 --> 00:29:33,960
this is going to be usually per page or

877
00:29:33,960 --> 00:29:35,880
per sub page right so this is going to

878
00:29:35,880 --> 00:29:37,860
be basically a check sum of all the page

879
00:29:37,860 --> 00:29:40,620
data right so back to this slide right

880
00:29:40,620 --> 00:29:43,080
you have data data data data and then

881
00:29:43,080 --> 00:29:44,159
usually you'll have like check some

882
00:29:44,159 --> 00:29:46,020
checks some check some checksum and

883
00:29:46,020 --> 00:29:47,880
whatever nand driver is reading this is

884
00:29:47,880 --> 00:29:50,399
going to basically check are these eccs

885
00:29:50,399 --> 00:29:51,600
correct

886
00:29:51,600 --> 00:29:53,719
yeah

887
00:29:54,360 --> 00:29:56,940
um what else this one's really important

888
00:29:56,940 --> 00:29:59,340
if you are making changes right this is

889
00:29:59,340 --> 00:30:01,320
probably the most important thing if you

890
00:30:01,320 --> 00:30:02,880
plan on doing what I described earlier

891
00:30:02,880 --> 00:30:04,919
taking chips off putting them back on

892
00:30:04,919 --> 00:30:07,500
you have to recalculate the ECC right

893
00:30:07,500 --> 00:30:09,059
because otherwise it's going to turn on

894
00:30:09,059 --> 00:30:11,279
start checking those eccs and they're

895
00:30:11,279 --> 00:30:12,480
going to be wrong and it's going to

896
00:30:12,480 --> 00:30:14,220
think it's all bad data and mark the

897
00:30:14,220 --> 00:30:16,500
whole board bad bad blocks

898
00:30:16,500 --> 00:30:21,059
uh calculating ACC depends entirely on

899
00:30:21,059 --> 00:30:22,799
which algorithm is being used if it's

900
00:30:22,799 --> 00:30:25,440
open source versus closed the Linux

901
00:30:25,440 --> 00:30:27,899
kernel has its own drivers that use bch

902
00:30:27,899 --> 00:30:31,020
so if it is a Linux based system that is

903
00:30:31,020 --> 00:30:32,700
probably pretty easy

904
00:30:32,700 --> 00:30:34,919
I've looked at devices particularly with

905
00:30:34,919 --> 00:30:37,260
like broadcom chips they use a lot of

906
00:30:37,260 --> 00:30:38,700
closed Source software they have their

907
00:30:38,700 --> 00:30:41,399
own ECC algorithms so I don't know how

908
00:30:41,399 --> 00:30:43,799
to calculate those

909
00:30:43,799 --> 00:30:45,840
and then finally there are use cases

910
00:30:45,840 --> 00:30:49,020
where file systems excuse me at a higher

911
00:30:49,020 --> 00:30:51,120
level are storing data in the

912
00:30:51,120 --> 00:30:53,580
out-of-band area so the two main

913
00:30:53,580 --> 00:30:55,320
culprits here are gyps which talk about

914
00:30:55,320 --> 00:30:57,000
you know really for us we don't really

915
00:30:57,000 --> 00:30:58,340
care about this so it doesn't matter

916
00:30:58,340 --> 00:31:01,080
yafs which is an older file system but I

917
00:31:01,080 --> 00:31:03,539
just did an assessment Yep this has been

918
00:31:03,539 --> 00:31:05,880
last year where there was GIF or yaps

919
00:31:05,880 --> 00:31:07,740
which seemed odd I haven't seen this in

920
00:31:07,740 --> 00:31:09,779
probably seven or eight years but there

921
00:31:09,779 --> 00:31:11,940
are structural data inside at a band

922
00:31:11,940 --> 00:31:13,320
which are important when you're actually

923
00:31:13,320 --> 00:31:16,639
trying to mount these file systems

924
00:31:17,760 --> 00:31:19,980
okay uh what I wanted to show on this

925
00:31:19,980 --> 00:31:22,559
slide is this is just some Sam this is a

926
00:31:22,559 --> 00:31:25,200
random chip I was looking at here and

927
00:31:25,200 --> 00:31:27,120
this is going to be why Ben walk is

928
00:31:27,120 --> 00:31:29,820
largely failing for you so let's say you

929
00:31:29,820 --> 00:31:31,440
they I think this is part of the

930
00:31:31,440 --> 00:31:32,940
bootloader right you're looking at the

931
00:31:32,940 --> 00:31:34,740
bootloader you see all these strings

932
00:31:34,740 --> 00:31:36,360
here you know it's obviously binary

933
00:31:36,360 --> 00:31:38,039
because there's you know zero zeros here

934
00:31:38,039 --> 00:31:39,720
but then all of a sudden you'll see this

935
00:31:39,720 --> 00:31:42,240
kind of section down here where all of a

936
00:31:42,240 --> 00:31:43,860
sudden it's just F's right

937
00:31:43,860 --> 00:31:46,020
and then immediately after we see

938
00:31:46,020 --> 00:31:49,440
strings again this is probably your

939
00:31:49,440 --> 00:31:51,720
out-of-band data right and if you look I

940
00:31:51,720 --> 00:31:53,340
made sure that I aligned it nice so

941
00:31:53,340 --> 00:31:54,960
there should be 64 bytes here which is

942
00:31:54,960 --> 00:31:56,940
pretty common right this is the data

943
00:31:56,940 --> 00:31:58,200
that you got to get out of it right

944
00:31:58,200 --> 00:31:59,940
because when you try to bin walk this

945
00:31:59,940 --> 00:32:02,100
it's just gonna include this and if it's

946
00:32:02,100 --> 00:32:04,140
like a zip file or a binary or something

947
00:32:04,140 --> 00:32:06,179
that stuff's got to go

948
00:32:06,179 --> 00:32:08,159
a couple other techniques you can use

949
00:32:08,159 --> 00:32:09,179
here

950
00:32:09,179 --> 00:32:11,399
I like if there is a page that's all

951
00:32:11,399 --> 00:32:13,919
zeroed or all effed

952
00:32:13,919 --> 00:32:14,520
um

953
00:32:14,520 --> 00:32:15,960
and then all of a sudden you see really

954
00:32:15,960 --> 00:32:18,240
high entropy data and that that high

955
00:32:18,240 --> 00:32:20,640
entropy data repeats itself that usually

956
00:32:20,640 --> 00:32:24,059
means that there's four ECC ashes back

957
00:32:24,059 --> 00:32:26,520
to back all hashing the same thing right

958
00:32:26,520 --> 00:32:28,559
so if you can find an all zeroed or all

959
00:32:28,559 --> 00:32:31,500
left Page then that can help you confirm

960
00:32:31,500 --> 00:32:33,480
that it is ECC because it'll be the same

961
00:32:33,480 --> 00:32:35,340
because it's a hash right it's going to

962
00:32:35,340 --> 00:32:36,659
always be the same it's not encryption

963
00:32:36,659 --> 00:32:38,700
and you'll look you'll notice these

964
00:32:38,700 --> 00:32:41,220
patterns as you play around with them

965
00:32:41,220 --> 00:32:43,140
uh We're not gonna go through every line

966
00:32:43,140 --> 00:32:44,460
here but just something if this is

967
00:32:44,460 --> 00:32:47,460
really easy to do uh basically read in

968
00:32:47,460 --> 00:32:48,539
your file

969
00:32:48,539 --> 00:32:50,940
set the out of band size and set your

970
00:32:50,940 --> 00:32:53,220
page size and then all I do is I just

971
00:32:53,220 --> 00:32:56,340
read Main and then out of band

972
00:32:56,340 --> 00:32:58,260
to do two different files and I just do

973
00:32:58,260 --> 00:32:59,760
that for the whole chip right and then

974
00:32:59,760 --> 00:33:01,440
you end up with two files one called dot

975
00:33:01,440 --> 00:33:04,200
main one that out of band and so that

976
00:33:04,200 --> 00:33:06,120
file you can probably pass the binwalk

977
00:33:06,120 --> 00:33:07,860
and it's going to be okay and of course

978
00:33:07,860 --> 00:33:09,419
you'll have to tweak this this kind of

979
00:33:09,419 --> 00:33:11,100
right section here depending on how that

980
00:33:11,100 --> 00:33:13,620
layout looks right so that's kind of an

981
00:33:13,620 --> 00:33:15,179
exercise for whatever's using this to do

982
00:33:15,179 --> 00:33:17,039
but it's not challenging to just remove

983
00:33:17,039 --> 00:33:18,419
that out there

984
00:33:18,419 --> 00:33:19,679
foreign

985
00:33:19,679 --> 00:33:21,779
the last thing we have to do before we

986
00:33:21,779 --> 00:33:23,940
start mounting things is to determine

987
00:33:23,940 --> 00:33:25,860
the partitions and how the flash is

988
00:33:25,860 --> 00:33:28,080
arranged and this is again you could

989
00:33:28,080 --> 00:33:29,159
spend a lot of time just talking about

990
00:33:29,159 --> 00:33:30,360
this I'm just going to give you guys two

991
00:33:30,360 --> 00:33:32,000
techniques that'll work pretty well here

992
00:33:32,000 --> 00:33:34,559
one if you're dealing with a device

993
00:33:34,559 --> 00:33:37,860
that's using the u-boot bootloader so

994
00:33:37,860 --> 00:33:39,419
guys maybe if anyone's seen that in your

995
00:33:39,419 --> 00:33:42,659
travels u-boot it's pretty common it's a

996
00:33:42,659 --> 00:33:45,179
pretty small easy to embed bootloader

997
00:33:45,179 --> 00:33:47,159
and one of the things that it does is

998
00:33:47,159 --> 00:33:50,100
it'll include the layout of The Flash as

999
00:33:50,100 --> 00:33:52,019
an invariabant variable our config

1000
00:33:52,019 --> 00:33:54,059
variable I guess that gets passed to the

1001
00:33:54,059 --> 00:33:56,519
kernel right because your kernel or your

1002
00:33:56,519 --> 00:33:58,620
microprocessor or whatever has no idea

1003
00:33:58,620 --> 00:34:00,120
what this man looks like right so it's

1004
00:34:00,120 --> 00:34:01,440
just going to assume that there's some

1005
00:34:01,440 --> 00:34:03,480
data here and this needs to be told what

1006
00:34:03,480 --> 00:34:06,480
that looks like the MD MDT Parts

1007
00:34:06,480 --> 00:34:08,940
variable is really useful right you can

1008
00:34:08,940 --> 00:34:10,619
kind of see it full skewed over here but

1009
00:34:10,619 --> 00:34:12,480
basically it's going to be

1010
00:34:12,480 --> 00:34:16,500
um the size of a partition and then the

1011
00:34:16,500 --> 00:34:17,820
name of that right so this one here has

1012
00:34:17,820 --> 00:34:19,099
got like

1013
00:34:19,099 --> 00:34:21,119
FBI which is probably like first

1014
00:34:21,119 --> 00:34:23,879
bootloader SBI which makes secondary

1015
00:34:23,879 --> 00:34:25,139
boot loader and then you can see down

1016
00:34:25,139 --> 00:34:27,719
here we'll have like configuration root

1017
00:34:27,719 --> 00:34:30,060
file system right but you can use this

1018
00:34:30,060 --> 00:34:33,418
along with your knowledge of how the at

1019
00:34:33,418 --> 00:34:34,800
a Band-Aid is structured to basically

1020
00:34:34,800 --> 00:34:36,839
split this firmware dump into a bunch of

1021
00:34:36,839 --> 00:34:38,879
small partition dumps that you can

1022
00:34:38,879 --> 00:34:40,560
actually play with individually you

1023
00:34:40,560 --> 00:34:41,820
don't have to do this right you could

1024
00:34:41,820 --> 00:34:44,159
use bin walk and if that works great but

1025
00:34:44,159 --> 00:34:45,359
I like to do this and have it all be

1026
00:34:45,359 --> 00:34:48,119
divided out so that I can see exactly

1027
00:34:48,119 --> 00:34:50,280
what each one of these files is

1028
00:34:50,280 --> 00:34:52,918
yeah that's kind of the easy example

1029
00:34:52,918 --> 00:34:55,199
sometimes you'll see this where you're

1030
00:34:55,199 --> 00:34:56,399
scrolling through and all of a sudden

1031
00:34:56,399 --> 00:34:58,080
you see this kind of just blob of binary

1032
00:34:58,080 --> 00:35:00,599
data here it's the same thing right so

1033
00:35:00,599 --> 00:35:03,420
it's the same data the name of the file

1034
00:35:03,420 --> 00:35:04,800
the name of the partition with the size

1035
00:35:04,800 --> 00:35:06,839
but this time it's just in a binary

1036
00:35:06,839 --> 00:35:08,700
structure right so this will take a

1037
00:35:08,700 --> 00:35:09,900
little bit of analysis to figure out

1038
00:35:09,900 --> 00:35:12,599
like you know at byte one is that the

1039
00:35:12,599 --> 00:35:14,820
size or is it the end data but you could

1040
00:35:14,820 --> 00:35:16,200
write a little parse here this is the

1041
00:35:16,200 --> 00:35:18,540
that's really hard to see sorry this is

1042
00:35:18,540 --> 00:35:20,280
um this is what the Solar City device

1043
00:35:20,280 --> 00:35:21,720
that we looked at that we put on our

1044
00:35:21,720 --> 00:35:24,300
blog it's just a binary format write a

1045
00:35:24,300 --> 00:35:25,440
little python script I just kind of

1046
00:35:25,440 --> 00:35:27,180
chews through it prints out the

1047
00:35:27,180 --> 00:35:29,280
partition sizes but this will take you a

1048
00:35:29,280 --> 00:35:30,480
little bit of time to understand what

1049
00:35:30,480 --> 00:35:31,920
looks like maybe some ring of the

1050
00:35:31,920 --> 00:35:34,339
bootloader

1051
00:35:34,380 --> 00:35:35,940
okay and I just alluded to this right

1052
00:35:35,940 --> 00:35:37,920
now we know both those two things you

1053
00:35:37,920 --> 00:35:39,420
can actually try to mount these file

1054
00:35:39,420 --> 00:35:42,599
systems and actually have some fun so

1055
00:35:42,599 --> 00:35:45,359
let's talk about that

1056
00:35:45,359 --> 00:35:47,339
all right so

1057
00:35:47,339 --> 00:35:48,960
I'm going to cover each of these so I'm

1058
00:35:48,960 --> 00:35:50,040
in a little bit more detail because some

1059
00:35:50,040 --> 00:35:52,800
are more popular and some are easier so

1060
00:35:52,800 --> 00:35:54,060
these are the ones that I've experienced

1061
00:35:54,060 --> 00:35:55,380
and that I see

1062
00:35:55,380 --> 00:35:58,440
I would say if it's an SOC device it's

1063
00:35:58,440 --> 00:36:01,740
probably going to be EXT or maybe

1064
00:36:01,740 --> 00:36:05,220
maybe Ubi or Jeff's gifs yaps I haven't

1065
00:36:05,220 --> 00:36:06,839
seen in a long time except that one

1066
00:36:06,839 --> 00:36:09,300
device last year squash FS I've seen and

1067
00:36:09,300 --> 00:36:10,760
I've seen this used

1068
00:36:10,760 --> 00:36:13,740
when combined with like a secure boot or

1069
00:36:13,740 --> 00:36:15,780
a disc encryption method that was the

1070
00:36:15,780 --> 00:36:17,099
only one I listed on here is read only

1071
00:36:17,099 --> 00:36:18,720
it's because squash FS is usually

1072
00:36:18,720 --> 00:36:20,280
mounted read only and usually don't

1073
00:36:20,280 --> 00:36:21,300
change that it's more like it's

1074
00:36:21,300 --> 00:36:22,619
basically like an archive like it's

1075
00:36:22,619 --> 00:36:24,540
mounted as a file system

1076
00:36:24,540 --> 00:36:26,460
and let's see

1077
00:36:26,460 --> 00:36:28,140
before I go through each of these slides

1078
00:36:28,140 --> 00:36:29,940
I just want to give you kind of how my

1079
00:36:29,940 --> 00:36:31,920
brain works

1080
00:36:31,920 --> 00:36:33,780
um whatever project I'm working on I'll

1081
00:36:33,780 --> 00:36:35,880
use basically a make file with like a

1082
00:36:35,880 --> 00:36:38,460
pretty defined directory structure and

1083
00:36:38,460 --> 00:36:40,440
that helps me remember what I was doing

1084
00:36:40,440 --> 00:36:43,680
so if I have a kind of a task in my head

1085
00:36:43,680 --> 00:36:46,920
called you know Mount ubiffs I'll

1086
00:36:46,920 --> 00:36:48,420
usually wrap it in a script and then

1087
00:36:48,420 --> 00:36:50,339
I'll have that get called here and you

1088
00:36:50,339 --> 00:36:51,780
can kind of chain these together so you

1089
00:36:51,780 --> 00:36:53,940
say like you know mount

1090
00:36:53,940 --> 00:36:56,040
just carve whatever and then put that

1091
00:36:56,040 --> 00:36:57,300
like in a readme so you don't forget I

1092
00:36:57,300 --> 00:36:58,560
always forget this stuff and then I'm

1093
00:36:58,560 --> 00:37:00,540
like digging through my bash history but

1094
00:37:00,540 --> 00:37:01,920
I used I like to name things very

1095
00:37:01,920 --> 00:37:04,740
detailed so I'll have you know Ubi FS

1096
00:37:04,740 --> 00:37:07,560
underscore raw.bin dot main so it's

1097
00:37:07,560 --> 00:37:08,820
clear to me that I'm working on just the

1098
00:37:08,820 --> 00:37:10,980
main data versus out of band I'm not

1099
00:37:10,980 --> 00:37:12,300
saying you guys have to do this but I do

1100
00:37:12,300 --> 00:37:15,079
find it to be useful

1101
00:37:15,119 --> 00:37:16,740
um starting with the easy ones right so

1102
00:37:16,740 --> 00:37:18,420
these are bin walk we'll have no problem

1103
00:37:18,420 --> 00:37:19,920
with these by the way these are super

1104
00:37:19,920 --> 00:37:22,560
easy and even for you guys it's really

1105
00:37:22,560 --> 00:37:24,000
easy to do just basically make a

1106
00:37:24,000 --> 00:37:26,339
directory and then use Mount right so

1107
00:37:26,339 --> 00:37:28,740
nothing crazy here Mount will handle all

1108
00:37:28,740 --> 00:37:30,420
the kind of behind the scenes stuff for

1109
00:37:30,420 --> 00:37:33,720
you you can use file or bin walk to

1110
00:37:33,720 --> 00:37:35,339
basically find these it'll say hey

1111
00:37:35,339 --> 00:37:38,820
squash FS or EXT out of Band-Aid is

1112
00:37:38,820 --> 00:37:40,380
obviously not important here so you

1113
00:37:40,380 --> 00:37:42,660
don't need that in anything uh capacity

1114
00:37:42,660 --> 00:37:44,700
but these are really easy right I would

1115
00:37:44,700 --> 00:37:48,119
definitely recommend just mounting them

1116
00:37:48,119 --> 00:37:49,560
things get a little more complicated

1117
00:37:49,560 --> 00:37:53,520
when we deal with uh gifs and Ubi and

1118
00:37:53,520 --> 00:37:55,260
you'll have to use has anyone ever used

1119
00:37:55,260 --> 00:37:57,300
Nan Sim anyone ever gone through this

1120
00:37:57,300 --> 00:37:59,579
kind of chaotic Journey here

1121
00:37:59,579 --> 00:38:02,280
um so Nan Sim is a Linux driver that

1122
00:38:02,280 --> 00:38:05,720
will simulate a raw nand in your device

1123
00:38:05,720 --> 00:38:08,220
and that's really helpful because if we

1124
00:38:08,220 --> 00:38:09,720
know the device that we're dealing with

1125
00:38:09,720 --> 00:38:12,060
we can tell Linux and have it simulate

1126
00:38:12,060 --> 00:38:14,280
one for us and then all the sections

1127
00:38:14,280 --> 00:38:16,079
will be the right size and then what we

1128
00:38:16,079 --> 00:38:17,880
can do is essentially copy over the data

1129
00:38:17,880 --> 00:38:19,440
we just dumped and then mount it that

1130
00:38:19,440 --> 00:38:21,540
way

1131
00:38:21,540 --> 00:38:23,280
I just described it in like two

1132
00:38:23,280 --> 00:38:24,599
sentences it's probably a lot more

1133
00:38:24,599 --> 00:38:25,740
complicated than when you guys start

1134
00:38:25,740 --> 00:38:27,540
digging in here you'll probably have to

1135
00:38:27,540 --> 00:38:29,820
read some uh some stuff from this guy's

1136
00:38:29,820 --> 00:38:31,560
website he's got a very dry humor and

1137
00:38:31,560 --> 00:38:33,240
has strong opinions about

1138
00:38:33,240 --> 00:38:35,700
driver technology but you guys enjoy

1139
00:38:35,700 --> 00:38:37,200
that

1140
00:38:37,200 --> 00:38:38,700
um really what you'll need here is that

1141
00:38:38,700 --> 00:38:41,220
four byte chip ID that you can get when

1142
00:38:41,220 --> 00:38:42,900
you're actually reading the chip so when

1143
00:38:42,900 --> 00:38:44,099
you're actually dumping it using one of

1144
00:38:44,099 --> 00:38:45,900
those Chinese readers they'll give you

1145
00:38:45,900 --> 00:38:48,720
the four byte uh chip identifier and

1146
00:38:48,720 --> 00:38:49,980
we'll use that in a couple slides coming

1147
00:38:49,980 --> 00:38:52,560
up here uh I'm not gonna go through all

1148
00:38:52,560 --> 00:38:53,880
these because I could probably talk

1149
00:38:53,880 --> 00:38:56,280
about MBT drivers for a while and you

1150
00:38:56,280 --> 00:38:58,260
guys don't want to hear about that but

1151
00:38:58,260 --> 00:39:00,119
the main things are this this lower

1152
00:39:00,119 --> 00:39:02,700
level MBT one is kind of they call it

1153
00:39:02,700 --> 00:39:04,859
the flash trans translation layer or

1154
00:39:04,859 --> 00:39:07,079
transition layer and that's going to be

1155
00:39:07,079 --> 00:39:09,300
representing both the main and the spare

1156
00:39:09,300 --> 00:39:10,740
right so it's going to have both the

1157
00:39:10,740 --> 00:39:13,200
sections per how that ship thinks it

1158
00:39:13,200 --> 00:39:15,060
should look on top of that it's kind of

1159
00:39:15,060 --> 00:39:17,220
like a pseudo block driver where it's

1160
00:39:17,220 --> 00:39:19,079
going to be just the main data right so

1161
00:39:19,079 --> 00:39:20,579
this is going to be at one higher level

1162
00:39:20,579 --> 00:39:22,560
up that's usually where you'll hang out

1163
00:39:22,560 --> 00:39:25,200
unless you have to manipulate the at a

1164
00:39:25,200 --> 00:39:26,780
band or

1165
00:39:26,780 --> 00:39:29,940
let's say you want to

1166
00:39:29,940 --> 00:39:33,180
basically mount a UB ifs and then create

1167
00:39:33,180 --> 00:39:34,920
a copy of that and then flash that to

1168
00:39:34,920 --> 00:39:36,839
your chip that one's going to be where

1169
00:39:36,839 --> 00:39:38,880
you'll use that one the actual uh MBT

1170
00:39:38,880 --> 00:39:40,619
layer

1171
00:39:40,619 --> 00:39:42,000
okay I'm gonna go quick so I have five

1172
00:39:42,000 --> 00:39:43,619
minutes left here uh this is what the

1173
00:39:43,619 --> 00:39:45,119
data sheet will look like you'll get

1174
00:39:45,119 --> 00:39:46,920
that four byte identifier from it here

1175
00:39:46,920 --> 00:39:49,200
and it's going to be all defined for you

1176
00:39:49,200 --> 00:39:52,560
one f1001d

1177
00:39:52,800 --> 00:39:54,720
you'll basically plug that into Nan Sim

1178
00:39:54,720 --> 00:39:56,640
here right so the same bytes I added

1179
00:39:56,640 --> 00:39:59,700
here this is for gifs this one you can

1180
00:39:59,700 --> 00:40:02,520
basically create a named simulation and

1181
00:40:02,520 --> 00:40:05,280
then use DD to just copy it to the block

1182
00:40:05,280 --> 00:40:07,560
driver right so the the higher level one

1183
00:40:07,560 --> 00:40:09,720
and then you can mount it using uh Mount

1184
00:40:09,720 --> 00:40:11,099
down here so that one's actually pretty

1185
00:40:11,099 --> 00:40:14,400
straightforward uh ubifs in the interest

1186
00:40:14,400 --> 00:40:15,660
of time I'm not going to bore you guys

1187
00:40:15,660 --> 00:40:17,400
with how the kind of intermediary layers

1188
00:40:17,400 --> 00:40:19,260
work but it's pretty similar this case

1189
00:40:19,260 --> 00:40:20,760
you'll just use whatever the correct

1190
00:40:20,760 --> 00:40:23,280
bytes are here and then you can if you

1191
00:40:23,280 --> 00:40:24,839
want to you can basically zero it all

1192
00:40:24,839 --> 00:40:27,060
out and you can use a combination of Ubi

1193
00:40:27,060 --> 00:40:28,880
format and attach with all their crazy

1194
00:40:28,880 --> 00:40:31,760
arguments to actually

1195
00:40:31,760 --> 00:40:34,800
attach and mount a Ubi file system so

1196
00:40:34,800 --> 00:40:37,020
these slides will be available after the

1197
00:40:37,020 --> 00:40:38,760
after the presentation so you guys can

1198
00:40:38,760 --> 00:40:40,740
probably just copy this stuff out but

1199
00:40:40,740 --> 00:40:42,000
the nitty-gritties aren't super

1200
00:40:42,000 --> 00:40:43,619
important you'll have to kind of figure

1201
00:40:43,619 --> 00:40:45,000
out what these offsets mean here because

1202
00:40:45,000 --> 00:40:46,740
they'll be tied to your specific chip

1203
00:40:46,740 --> 00:40:48,420
but again you're using your ultimately

1204
00:40:48,420 --> 00:40:51,359
using Mount at the end of the day

1205
00:40:51,359 --> 00:40:52,920
um yaps I would love to talk a lot of

1206
00:40:52,920 --> 00:40:54,359
detail about because I really don't like

1207
00:40:54,359 --> 00:40:56,700
yafs but there's basically like one

1208
00:40:56,700 --> 00:40:57,900
person out there who knows how this

1209
00:40:57,900 --> 00:40:59,880
works and he hasn't touched this project

1210
00:40:59,880 --> 00:41:03,240
in 20 years so uh there's a project

1211
00:41:03,240 --> 00:41:05,820
that's called yaf2 utils that's archived

1212
00:41:05,820 --> 00:41:08,040
and Google code that you can use to try

1213
00:41:08,040 --> 00:41:11,339
to unpack things I've had a lot of mixed

1214
00:41:11,339 --> 00:41:12,900
experience with it and if the

1215
00:41:12,900 --> 00:41:15,119
out-of-band data is not exactly how that

1216
00:41:15,119 --> 00:41:17,700
tool wants it to be then it just doesn't

1217
00:41:17,700 --> 00:41:19,740
work so you have to like move the data

1218
00:41:19,740 --> 00:41:21,599
back to where it should be but that

1219
00:41:21,599 --> 00:41:22,980
means you have to know what the driver

1220
00:41:22,980 --> 00:41:24,780
wants and what his tool wants and it's

1221
00:41:24,780 --> 00:41:27,060
yeah it's not it's not not fun anyway

1222
00:41:27,060 --> 00:41:29,339
you do the same thing here though

1223
00:41:29,339 --> 00:41:31,140
these are the parameters here you have

1224
00:41:31,140 --> 00:41:33,680
to kind of tweak

1225
00:41:34,140 --> 00:41:35,640
and I think I've just set up

1226
00:41:35,640 --> 00:41:38,400
leave you with the the now what right so

1227
00:41:38,400 --> 00:41:40,500
we just spent 45 minutes talking about

1228
00:41:40,500 --> 00:41:43,020
how to get access to a device and I'm

1229
00:41:43,020 --> 00:41:44,820
kind of leaving you with like now you

1230
00:41:44,820 --> 00:41:46,320
have to draw the rest of the owl here

1231
00:41:46,320 --> 00:41:48,660
because once you have access to it the

1232
00:41:48,660 --> 00:41:50,220
next step is to kind of go back to that

1233
00:41:50,220 --> 00:41:52,680
mission statement and find bugs and

1234
00:41:52,680 --> 00:41:54,060
there's again a lot of things you could

1235
00:41:54,060 --> 00:41:56,099
do here we've edited files and

1236
00:41:56,099 --> 00:41:59,339
re-soldered we've removed different

1237
00:41:59,339 --> 00:42:01,140
encryption things that we're

1238
00:42:01,140 --> 00:42:03,780
complicating things we've pulled source

1239
00:42:03,780 --> 00:42:05,280
code off and use that to find bugs

1240
00:42:05,280 --> 00:42:06,720
there's a lot of different things you

1241
00:42:06,720 --> 00:42:08,760
could do here but that's a totally

1242
00:42:08,760 --> 00:42:10,260
different talk right like that's a just

1243
00:42:10,260 --> 00:42:12,960
that's a bug hunting or a binary

1244
00:42:12,960 --> 00:42:15,180
analysis presentation but now that you

1245
00:42:15,180 --> 00:42:17,099
have the data you kind of can do

1246
00:42:17,099 --> 00:42:19,500
whatever you want right so I'll leave

1247
00:42:19,500 --> 00:42:20,400
this here just for a second because

1248
00:42:20,400 --> 00:42:22,700
there's a couple cool things you can do

1249
00:42:22,700 --> 00:42:27,300
but then I'll roll in the conclusions

1250
00:42:27,300 --> 00:42:30,240
okay so just to kind of summarize what I

1251
00:42:30,240 --> 00:42:32,460
talked about and how I would approach

1252
00:42:32,460 --> 00:42:35,880
this one identify external nand and by

1253
00:42:35,880 --> 00:42:38,880
inspecting the PCB two remove the chips

1254
00:42:38,880 --> 00:42:42,119
using solder hot air IR whatever

1255
00:42:42,119 --> 00:42:44,339
three use a universal reader to get the

1256
00:42:44,339 --> 00:42:46,619
data off the chip

1257
00:42:46,619 --> 00:42:49,200
or identify the layout in the partitions

1258
00:42:49,200 --> 00:42:51,540
by analyzing the binary

1259
00:42:51,540 --> 00:42:55,020
five Mount the relevant file systems

1260
00:42:55,020 --> 00:42:57,060
do what we didn't we just talked about

1261
00:42:57,060 --> 00:42:59,099
find something cool make some change do

1262
00:42:59,099 --> 00:42:59,940
something

1263
00:42:59,940 --> 00:43:02,460
and then optionally put it back on right

1264
00:43:02,460 --> 00:43:04,800
so that that process is going to be

1265
00:43:04,800 --> 00:43:06,900
essentially repeated each time you do

1266
00:43:06,900 --> 00:43:09,000
this and each one of these will kind of

1267
00:43:09,000 --> 00:43:10,560
pose its own unique challenges once you

1268
00:43:10,560 --> 00:43:12,540
once you get into it

1269
00:43:12,540 --> 00:43:13,980
um and with that I think I have like one

1270
00:43:13,980 --> 00:43:15,900
or two minutes left here um

1271
00:43:15,900 --> 00:43:18,119
this just some material here

1272
00:43:18,119 --> 00:43:19,980
um I did just pick Mania Vlogs but

1273
00:43:19,980 --> 00:43:22,200
there's plenty of blogs out there the

1274
00:43:22,200 --> 00:43:23,339
reason I picked the menu ones because

1275
00:43:23,339 --> 00:43:25,500
mostly they're mine and I can talk about

1276
00:43:25,500 --> 00:43:26,760
them if you guys want to like learn more

1277
00:43:26,760 --> 00:43:28,800
about the research there's plenty of

1278
00:43:28,800 --> 00:43:31,740
research out there in the space I think

1279
00:43:31,740 --> 00:43:34,380
people this isn't like new material

1280
00:43:34,380 --> 00:43:36,300
right like it's just flash memory at the

1281
00:43:36,300 --> 00:43:37,680
end of the day but I want to kind of get

1282
00:43:37,680 --> 00:43:39,660
it all in one place for people to chew

1283
00:43:39,660 --> 00:43:42,119
through if you guys want to contact me

1284
00:43:42,119 --> 00:43:43,440
um I don't use Twitter very often but

1285
00:43:43,440 --> 00:43:45,680
I'm much more active on email both my

1286
00:43:45,680 --> 00:43:48,119
work and personal emails are there my

1287
00:43:48,119 --> 00:43:50,700
GitHub is there and my website so with

1288
00:43:50,700 --> 00:43:52,319
that I don't know if I have any time for

1289
00:43:52,319 --> 00:43:55,800
questions but you guys tell me

1290
00:43:55,800 --> 00:43:58,319
minutes for questions so do you have any

1291
00:43:58,319 --> 00:44:01,520
questions okay

1292
00:44:06,000 --> 00:44:08,700
[Music]

1293
00:44:08,700 --> 00:44:09,859
yeah

1294
00:44:09,859 --> 00:44:12,540
now I would say not through this mean

1295
00:44:12,540 --> 00:44:14,819
but I've definitely done

1296
00:44:14,819 --> 00:44:17,099
um and the definition of back door is

1297
00:44:17,099 --> 00:44:20,220
always like is it a is it admin util is

1298
00:44:20,220 --> 00:44:22,440
it a purpose-built back door I've

1299
00:44:22,440 --> 00:44:24,119
definitely found some sketchy binaries

1300
00:44:24,119 --> 00:44:27,119
running that you know expected specific

1301
00:44:27,119 --> 00:44:29,520
Flags to then do things like run

1302
00:44:29,520 --> 00:44:32,280
commands so is that a back door sure but

1303
00:44:32,280 --> 00:44:33,900
is it also like maybe something that the

1304
00:44:33,900 --> 00:44:37,079
developers left on there for use testing

1305
00:44:37,079 --> 00:44:38,520
but I don't know it depends but yeah

1306
00:44:38,520 --> 00:44:40,079
definitely there's some weird things

1307
00:44:40,079 --> 00:44:41,640
that you'll find when you uh dive into

1308
00:44:41,640 --> 00:44:44,000
this world

1309
00:44:49,819 --> 00:44:52,819
standardized

1310
00:44:53,300 --> 00:44:56,339
everything's custom like the reading is

1311
00:44:56,339 --> 00:44:58,619
different the mountains different

1312
00:44:58,619 --> 00:45:01,619
patterns

1313
00:45:01,740 --> 00:45:04,500
I mean it's there are like kind of a

1314
00:45:04,500 --> 00:45:06,240
bunch of diverging paths right like if

1315
00:45:06,240 --> 00:45:08,339
this type of thing do these four things

1316
00:45:08,339 --> 00:45:11,220
uh there are things like bin walk though

1317
00:45:11,220 --> 00:45:13,800
like the tool itself is quite good right

1318
00:45:13,800 --> 00:45:15,180
this I don't hopefully no one leaves

1319
00:45:15,180 --> 00:45:17,220
here is like Jake doesn't like Ben walk

1320
00:45:17,220 --> 00:45:19,020
um it's a great tool it does a lot of

1321
00:45:19,020 --> 00:45:21,180
this stuff for you but when it doesn't

1322
00:45:21,180 --> 00:45:22,560
work you gotta take a step back and

1323
00:45:22,560 --> 00:45:23,579
understand what kind of differences

1324
00:45:23,579 --> 00:45:26,400
there are also commercial solutions that

1325
00:45:26,400 --> 00:45:28,200
are that exist that you could buy that

1326
00:45:28,200 --> 00:45:29,700
you know they they expect a firmware

1327
00:45:29,700 --> 00:45:31,319
dump and then you get like a nessus

1328
00:45:31,319 --> 00:45:33,720
report essentially but that's for like

1329
00:45:33,720 --> 00:45:35,400
if you're doing this professionally or

1330
00:45:35,400 --> 00:45:37,020
kind of want to automate things so there

1331
00:45:37,020 --> 00:45:39,420
are this this has been automated in some

1332
00:45:39,420 --> 00:45:41,280
capacities but it will be a little bit

1333
00:45:41,280 --> 00:45:44,900
different per chip and device

1334
00:45:46,460 --> 00:45:49,579
thank you

