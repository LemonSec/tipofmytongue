1
00:00:02,820 --> 00:00:06,359
door is yours thank you okay so hi

2
00:00:06,359 --> 00:00:08,400
everyone so today's talk is going to be

3
00:00:08,400 --> 00:00:10,920
hacking the hackers uh the analysis of a

4
00:00:10,920 --> 00:00:12,540
cobblestrike remote command execution

5
00:00:12,540 --> 00:00:15,139
vulnerability

6
00:00:15,240 --> 00:00:18,119
so before we begin uh I want to give a

7
00:00:18,119 --> 00:00:20,699
brief introduction of myself uh so my

8
00:00:20,699 --> 00:00:22,439
name is serious Sherry I currently work

9
00:00:22,439 --> 00:00:26,220
at IBM adversary Services team where we

10
00:00:26,220 --> 00:00:28,140
run adversity simulation for a big

11
00:00:28,140 --> 00:00:30,359
number of clients including public and

12
00:00:30,359 --> 00:00:33,000
private sector I'm also the founder and

13
00:00:33,000 --> 00:00:35,219
organizer of besides Tirana we also have

14
00:00:35,219 --> 00:00:37,320
the call for papers open so if you want

15
00:00:37,320 --> 00:00:40,680
to participate scan the QR code here and

16
00:00:40,680 --> 00:00:43,020
you can submit your talks and I'll be

17
00:00:43,020 --> 00:00:45,660
really uh it will be really great to see

18
00:00:45,660 --> 00:00:47,640
you there unless you're probably aware

19
00:00:47,640 --> 00:00:50,399
of I'm passionate about offensive

20
00:00:50,399 --> 00:00:53,940
security and I mainly focus on adversary

21
00:00:53,940 --> 00:00:56,340
simulation Windows internals reverse

22
00:00:56,340 --> 00:00:58,860
engineering malware development and also

23
00:00:58,860 --> 00:01:01,800
exploitation which has resulted in me

24
00:01:01,800 --> 00:01:03,719
discovering some vulnerabilities and

25
00:01:03,719 --> 00:01:05,939
several well-known products like Google

26
00:01:05,939 --> 00:01:09,500
Chrome Spotify Microsoft Edge Etc

27
00:01:09,500 --> 00:01:12,659
if you want to see some of my other work

28
00:01:12,659 --> 00:01:15,180
I'm not sure if it's readable here but

29
00:01:15,180 --> 00:01:17,479
uh my handle is

30
00:01:17,479 --> 00:01:20,220
0x09al and you can find me on Twitter on

31
00:01:20,220 --> 00:01:24,900
GitHub to see some of my uh work so

32
00:01:24,900 --> 00:01:28,080
uh before going into details about the

33
00:01:28,080 --> 00:01:30,659
research I just wanted to give a brief

34
00:01:30,659 --> 00:01:32,700
introduction of why we actually started

35
00:01:32,700 --> 00:01:36,360
doing this research so in our day-to-day

36
00:01:36,360 --> 00:01:38,400
job we use Global strike quite a lot

37
00:01:38,400 --> 00:01:40,439
because it's one of the most common uh

38
00:01:40,439 --> 00:01:44,400
used adversary simulation Frameworks and

39
00:01:44,400 --> 00:01:46,799
while we're in a project we receive an

40
00:01:46,799 --> 00:01:49,380
out of bound update for cobblestrike and

41
00:01:49,380 --> 00:01:51,299
it's usually an out of bond update is

42
00:01:51,299 --> 00:01:53,579
usually bad news because it's either

43
00:01:53,579 --> 00:01:55,579
like a vulnerability

44
00:01:55,579 --> 00:01:58,259
that needs to be patched immediately or

45
00:01:58,259 --> 00:02:00,840
there's some bug that may make the

46
00:02:00,840 --> 00:02:03,899
software unusable so we take we have to

47
00:02:03,899 --> 00:02:05,399
take a quick look and see what was

48
00:02:05,399 --> 00:02:07,740
happening so as you can see from the

49
00:02:07,740 --> 00:02:09,720
image here this is actually just a

50
00:02:09,720 --> 00:02:12,120
screenshot of

51
00:02:12,120 --> 00:02:14,099
just a screenshot of the release notes

52
00:02:14,099 --> 00:02:16,440
from cobblestrike so basically there was

53
00:02:16,440 --> 00:02:20,580
a new CV and they said it was an xss

54
00:02:20,580 --> 00:02:22,800
vulnerability which at the beginning we

55
00:02:22,800 --> 00:02:25,739
kind of let's say downplayed it a little

56
00:02:25,739 --> 00:02:28,800
bit because usually when you have a CD

57
00:02:28,800 --> 00:02:31,140
an exercise vulnerability it's usually

58
00:02:31,140 --> 00:02:33,780
not really useful uh when it's a

59
00:02:33,780 --> 00:02:35,640
client-side

60
00:02:35,640 --> 00:02:38,580
program because we we initially thought

61
00:02:38,580 --> 00:02:41,640
it was some sort of self-exist which is

62
00:02:41,640 --> 00:02:43,680
not really useful from exploitation

63
00:02:43,680 --> 00:02:46,260
perspective but then when we're reading

64
00:02:46,260 --> 00:02:50,280
uh the real is not in details the the

65
00:02:50,280 --> 00:02:52,739
blog post actually mentioned that this

66
00:02:52,739 --> 00:02:54,660
exercise vulnerability could lead to

67
00:02:54,660 --> 00:02:57,660
potentially rce and it was like a really

68
00:02:57,660 --> 00:02:59,459
interesting uh

69
00:02:59,459 --> 00:03:01,739
thing and we decided to actually take a

70
00:03:01,739 --> 00:03:03,599
look and because this is one of the

71
00:03:03,599 --> 00:03:05,760
tools we use for our internal Services

72
00:03:05,760 --> 00:03:07,980
we need to make sure that the tools that

73
00:03:07,980 --> 00:03:10,400
we use and provide services to clients

74
00:03:10,400 --> 00:03:13,440
need to be safe and

75
00:03:13,440 --> 00:03:15,780
started to digging deeper into the

76
00:03:15,780 --> 00:03:18,239
cobblestrike and then we discovered that

77
00:03:18,239 --> 00:03:20,400
this patch actually was not sufficient

78
00:03:20,400 --> 00:03:23,280
and that's what this talk is going to be

79
00:03:23,280 --> 00:03:25,400
about

80
00:03:26,879 --> 00:03:29,099
so uh before diving in I'm just going to

81
00:03:29,099 --> 00:03:31,739
give just a quick introduction of global

82
00:03:31,739 --> 00:03:33,659
strike so for those who are not aware

83
00:03:33,659 --> 00:03:37,680
cobblestrike is just like a software and

84
00:03:37,680 --> 00:03:41,040
it allows adversary simulation teams

85
00:03:41,040 --> 00:03:44,180
like the team I work with to provide

86
00:03:44,180 --> 00:03:46,379
these services

87
00:03:46,379 --> 00:03:49,860
essentially it allows you to have to

88
00:03:49,860 --> 00:03:53,819
manage and deploy malware remotely and

89
00:03:53,819 --> 00:03:55,560
also at the same time manage a large

90
00:03:55,560 --> 00:03:58,799
number of systems

91
00:03:58,799 --> 00:04:01,080
it was originally created by raffle

92
00:04:01,080 --> 00:04:05,120
Munch and now I think it's part of forta

93
00:04:05,120 --> 00:04:08,640
also for those that are a little bit old

94
00:04:08,640 --> 00:04:10,260
school you probably remember the

95
00:04:10,260 --> 00:04:13,140
original Armitage which was similar to

96
00:04:13,140 --> 00:04:15,659
the UI of cobblestrike so cobblestrike

97
00:04:15,659 --> 00:04:18,478
was just let's say the pro version that

98
00:04:18,478 --> 00:04:21,238
was not using Metasploit anymore

99
00:04:21,238 --> 00:04:23,340
so just a brief introduction on the

100
00:04:23,340 --> 00:04:26,040
architecture as well because

101
00:04:26,040 --> 00:04:28,979
we need to to be aware of how the the

102
00:04:28,979 --> 00:04:31,259
software is the architecture of the

103
00:04:31,259 --> 00:04:34,259
software is before like understanding

104
00:04:34,259 --> 00:04:37,560
the vulnerabilities so we have three

105
00:04:37,560 --> 00:04:39,900
main components we have the team server

106
00:04:39,900 --> 00:04:43,620
so the team server is actually the the

107
00:04:43,620 --> 00:04:46,080
core of global strike is the back-end

108
00:04:46,080 --> 00:04:48,000
server that handles everything that

109
00:04:48,000 --> 00:04:51,240
happens in combo strike including

110
00:04:51,240 --> 00:04:53,880
the C2 profiles the generation of the

111
00:04:53,880 --> 00:04:57,000
payloads and uh the create the creation

112
00:04:57,000 --> 00:05:00,060
the handling of the https request

113
00:05:00,060 --> 00:05:02,639
Etc and then we have the client which is

114
00:05:02,639 --> 00:05:04,500
the second component and the client is

115
00:05:04,500 --> 00:05:07,020
actually this interface as you see here

116
00:05:07,020 --> 00:05:09,479
it allows The Operators to actually

117
00:05:09,479 --> 00:05:12,240
interact with the team server and manage

118
00:05:12,240 --> 00:05:14,759
all the compromise systems that you have

119
00:05:14,759 --> 00:05:18,000
and also provides you with some attack

120
00:05:18,000 --> 00:05:21,060
methods that you can use to generate new

121
00:05:21,060 --> 00:05:24,320
payloads or like host payloads Etc

122
00:05:24,320 --> 00:05:27,780
uh the other component is the beacon so

123
00:05:27,780 --> 00:05:29,639
the beacon is actually the malware that

124
00:05:29,639 --> 00:05:33,240
is deployed on the systems and that is

125
00:05:33,240 --> 00:05:35,039
the one that's actually connects back to

126
00:05:35,039 --> 00:05:37,620
the team servers retrieves any commands

127
00:05:37,620 --> 00:05:39,060
that the operator sent to the team

128
00:05:39,060 --> 00:05:41,039
server and then executes and gives back

129
00:05:41,039 --> 00:05:42,300
the output

130
00:05:42,300 --> 00:05:44,460
and as I mentioned earlier is actually

131
00:05:44,460 --> 00:05:47,220
one of the most used C2 Frameworks in

132
00:05:47,220 --> 00:05:49,620
the industry and this is by Red teams

133
00:05:49,620 --> 00:05:51,300
but also at the same time by a lot of

134
00:05:51,300 --> 00:05:54,539
threat actors so

135
00:05:54,539 --> 00:05:56,639
it was a really interesting Target to

136
00:05:56,639 --> 00:05:58,919
work on and try to understand try to

137
00:05:58,919 --> 00:06:01,740
reproduce the vulnerability

138
00:06:01,740 --> 00:06:04,919
so for those who do vulnerability

139
00:06:04,919 --> 00:06:07,680
research the first thing that you

140
00:06:07,680 --> 00:06:10,380
probably do is the same the steps that

141
00:06:10,380 --> 00:06:12,240
we follow here so we got the latest

142
00:06:12,240 --> 00:06:14,160
version of global strike and the

143
00:06:14,160 --> 00:06:16,800
previous one that was vulnerable and we

144
00:06:16,800 --> 00:06:19,139
decompiled them using a Java decompiler

145
00:06:19,139 --> 00:06:23,460
and try to find uh what were the

146
00:06:23,460 --> 00:06:27,060
differences between these two programs

147
00:06:27,060 --> 00:06:29,819
so the first thing that we actually saw

148
00:06:29,819 --> 00:06:32,039
there was a function within the beacon

149
00:06:32,039 --> 00:06:35,220
C2 class that actually was changed and

150
00:06:35,220 --> 00:06:37,500
it had a new flag

151
00:06:37,500 --> 00:06:39,360
um unfortunately it's not readable in

152
00:06:39,360 --> 00:06:41,720
the screen but

153
00:06:41,720 --> 00:06:45,300
essentially the flag checked if there

154
00:06:45,300 --> 00:06:48,660
was a xss mitigations flag set in the

155
00:06:48,660 --> 00:06:51,240
team server.prop file

156
00:06:51,240 --> 00:06:54,780
which wasn't there before and another

157
00:06:54,780 --> 00:06:57,060
thing interesting thing was that the

158
00:06:57,060 --> 00:06:59,819
beacon entry class had some checks so

159
00:06:59,819 --> 00:07:03,180
for example it was checking the not sure

160
00:07:03,180 --> 00:07:05,759
if like the username the computer name

161
00:07:05,759 --> 00:07:07,199
the

162
00:07:07,199 --> 00:07:09,960
process name it was checking these

163
00:07:09,960 --> 00:07:12,240
labels for specific characters that

164
00:07:12,240 --> 00:07:14,699
contain an exercise string and they had

165
00:07:14,699 --> 00:07:16,979
two functions that they did this the

166
00:07:16,979 --> 00:07:20,039
first one was a potential xss and the

167
00:07:20,039 --> 00:07:23,039
other one was username potential xss

168
00:07:23,039 --> 00:07:25,740
so that was what we needed to understand

169
00:07:25,740 --> 00:07:28,979
how these checks are done

170
00:07:28,979 --> 00:07:31,440
so as you can see here these two

171
00:07:31,440 --> 00:07:33,720
functions were implemented in the common

172
00:07:33,720 --> 00:07:37,800
HTML utils class so we have the first

173
00:07:37,800 --> 00:07:40,020
potential exercise function which takes

174
00:07:40,020 --> 00:07:42,360
as a parameter string and then we have

175
00:07:42,360 --> 00:07:46,560
the potential username xss so if you

176
00:07:46,560 --> 00:07:48,419
take a look and if you actually

177
00:07:48,419 --> 00:07:50,280
understood the

178
00:07:50,280 --> 00:07:52,620
like how exercise vulnerabilities happen

179
00:07:52,620 --> 00:07:55,020
like you can see that they're checking

180
00:07:55,020 --> 00:07:58,440
for some special characters and it's not

181
00:07:58,440 --> 00:08:00,479
the most ideal patch although it's

182
00:08:00,479 --> 00:08:03,300
effective and it works like they didn't

183
00:08:03,300 --> 00:08:06,539
have to do that and it it shows that

184
00:08:06,539 --> 00:08:09,060
whoever created this patch is probably

185
00:08:09,060 --> 00:08:12,599
not let's say the most aware software

186
00:08:12,599 --> 00:08:15,300
developer about uh xss vulnerabilities

187
00:08:15,300 --> 00:08:17,280
because you could make the patch way

188
00:08:17,280 --> 00:08:19,280
more effective and just use one function

189
00:08:19,280 --> 00:08:22,440
and as soon as we saw this we understood

190
00:08:22,440 --> 00:08:23,940
that there was definitely something

191
00:08:23,940 --> 00:08:25,800
wrong happening because this quad

192
00:08:25,800 --> 00:08:28,199
quality was not something that you would

193
00:08:28,199 --> 00:08:30,539
expect to be in a software that is used

194
00:08:30,539 --> 00:08:32,760
by a lot of red teams

195
00:08:32,760 --> 00:08:34,559
so

196
00:08:34,559 --> 00:08:37,679
we found out that actually the patch was

197
00:08:37,679 --> 00:08:41,279
only checking for specific labels that I

198
00:08:41,279 --> 00:08:43,140
mentioned earlier

199
00:08:43,140 --> 00:08:45,660
go back so basically it was checking

200
00:08:45,660 --> 00:08:47,940
only these labels if they contained any

201
00:08:47,940 --> 00:08:49,140
xss

202
00:08:49,140 --> 00:08:49,680
um

203
00:08:49,680 --> 00:08:53,220
strings but every other label within the

204
00:08:53,220 --> 00:08:54,540
framework was not actually getting

205
00:08:54,540 --> 00:08:57,060
checked so that meant that

206
00:08:57,060 --> 00:08:59,339
if we somehow could manipulate any of

207
00:08:59,339 --> 00:09:02,040
the labels we could actually inject HTML

208
00:09:02,040 --> 00:09:03,779
objects

209
00:09:03,779 --> 00:09:04,500
um

210
00:09:04,500 --> 00:09:08,160
we found out that a lot of the labels

211
00:09:08,160 --> 00:09:10,620
essentially all of them apart from the

212
00:09:10,620 --> 00:09:13,019
ones that they were checking could were

213
00:09:13,019 --> 00:09:16,320
still injectable with HTML objects like

214
00:09:16,320 --> 00:09:18,959
the notes one the HTML HTTP listener

215
00:09:18,959 --> 00:09:22,080
names so now we had reproduced let's say

216
00:09:22,080 --> 00:09:24,060
a new vulnerability similar to the

217
00:09:24,060 --> 00:09:26,940
previous one but at the same time we

218
00:09:26,940 --> 00:09:28,560
only had

219
00:09:28,560 --> 00:09:30,420
we only believed it will be a next

220
00:09:30,420 --> 00:09:33,899
success so we needed to dig a little bit

221
00:09:33,899 --> 00:09:37,200
deeper to actually find out how we can

222
00:09:37,200 --> 00:09:39,060
turn that to RC

223
00:09:39,060 --> 00:09:42,360
so before going back I'm uh going

224
00:09:42,360 --> 00:09:45,959
forward sorry uh I'm going to go through

225
00:09:45,959 --> 00:09:48,000
a little bit of java because this spoke

226
00:09:48,000 --> 00:09:51,180
will be heavily oriented in Java and if

227
00:09:51,180 --> 00:09:54,180
someone actually likes Java hair play to

228
00:09:54,180 --> 00:09:56,700
you but it's not my favorite language so

229
00:09:56,700 --> 00:09:59,700
for those that are not aware of java is

230
00:09:59,700 --> 00:10:01,620
a high level object-oriented programming

231
00:10:01,620 --> 00:10:04,440
language and it's used in almost every

232
00:10:04,440 --> 00:10:09,180
device uh unfortunately and

233
00:10:09,180 --> 00:10:11,820
hence the famous installation uh

234
00:10:11,820 --> 00:10:14,160
installation program from java which

235
00:10:14,160 --> 00:10:15,839
says like it runs in three billion

236
00:10:15,839 --> 00:10:17,880
devices it's probably more now

237
00:10:17,880 --> 00:10:19,620
so

238
00:10:19,620 --> 00:10:21,959
the thing is that couple strike is built

239
00:10:21,959 --> 00:10:24,120
in Java so the team server and every

240
00:10:24,120 --> 00:10:26,640
component is built in Java and the one

241
00:10:26,640 --> 00:10:27,959
that we are interested in the

242
00:10:27,959 --> 00:10:29,820
cobblestrike UI which is the user

243
00:10:29,820 --> 00:10:32,339
interface and which was the vulnerable

244
00:10:32,339 --> 00:10:34,800
component is built on in Java using the

245
00:10:34,800 --> 00:10:36,660
Java Swing Library

246
00:10:36,660 --> 00:10:37,980
so

247
00:10:37,980 --> 00:10:40,260
going forward if you have good knowledge

248
00:10:40,260 --> 00:10:44,100
of java objects Etc I think it will be a

249
00:10:44,100 --> 00:10:47,579
really interesting tool I try to make

250
00:10:47,579 --> 00:10:49,380
all the information processible by

251
00:10:49,380 --> 00:10:51,420
everyone even if you don't know Java but

252
00:10:51,420 --> 00:10:53,700
if you know Java it's going to be way

253
00:10:53,700 --> 00:10:55,980
easier

254
00:10:55,980 --> 00:10:58,019
so

255
00:10:58,019 --> 00:11:00,660
like SMS trailer recover strike was

256
00:11:00,660 --> 00:11:03,120
using the Java Swing Library so the Java

257
00:11:03,120 --> 00:11:05,640
Swing live framework is

258
00:11:05,640 --> 00:11:08,040
a framework that allows you to build the

259
00:11:08,040 --> 00:11:10,740
graphical user interfaces for Java

260
00:11:10,740 --> 00:11:12,600
programs and I'm pretty sure if you did

261
00:11:12,600 --> 00:11:14,220
Java school that's probably one of the

262
00:11:14,220 --> 00:11:16,380
first things you actually did

263
00:11:16,380 --> 00:11:20,100
and we found out actually that or at

264
00:11:20,100 --> 00:11:23,459
least I found out that I uh like Java

265
00:11:23,459 --> 00:11:26,160
Swing elements actually support HTML

266
00:11:26,160 --> 00:11:29,040
which I didn't know before so basically

267
00:11:29,040 --> 00:11:31,800
if you could if you could start a

268
00:11:31,800 --> 00:11:34,380
specific label or let's say a button

269
00:11:34,380 --> 00:11:37,680
with a HTML tag it will actually parse

270
00:11:37,680 --> 00:11:40,260
that as HTML which was really crazy for

271
00:11:40,260 --> 00:11:42,420
me I'm not sure why they did that but at

272
00:11:42,420 --> 00:11:44,279
the end of the day is Java so everything

273
00:11:44,279 --> 00:11:46,620
is expected

274
00:11:46,620 --> 00:11:50,880
so before uh so now we have let's say on

275
00:11:50,880 --> 00:11:52,800
cobblestrike we have some fields that we

276
00:11:52,800 --> 00:11:54,779
could inject HTML to

277
00:11:54,779 --> 00:11:56,160
and

278
00:11:56,160 --> 00:11:58,140
we could like try and test the different

279
00:11:58,140 --> 00:12:00,180
HTML injection techniques that we could

280
00:12:00,180 --> 00:12:02,760
do but unfortunately uh

281
00:12:02,760 --> 00:12:05,579
we don't know like how cobblestrike may

282
00:12:05,579 --> 00:12:08,579
uh process that information or or how

283
00:12:08,579 --> 00:12:11,279
it's going to change it so for this

284
00:12:11,279 --> 00:12:13,740
reason to make it everything easier I've

285
00:12:13,740 --> 00:12:15,600
just decided to write a simple program

286
00:12:15,600 --> 00:12:17,880
I'm not going to go through it but I'm

287
00:12:17,880 --> 00:12:20,160
just going to say uh so basically the

288
00:12:20,160 --> 00:12:21,839
idea is we're just create a new frame

289
00:12:21,839 --> 00:12:24,959
and then if you see here we have a HTML

290
00:12:24,959 --> 00:12:27,779
in the description of the label

291
00:12:27,779 --> 00:12:31,019
so just a hello and then H1 which is

292
00:12:31,019 --> 00:12:34,140
header from J label and then as you can

293
00:12:34,140 --> 00:12:36,600
see from the results it actually after

294
00:12:36,600 --> 00:12:38,700
compiling it or running it

295
00:12:38,700 --> 00:12:40,980
like the hello is actually just like the

296
00:12:40,980 --> 00:12:43,740
normal one and then from uh the from J

297
00:12:43,740 --> 00:12:46,260
level is actually parsys HTML as you can

298
00:12:46,260 --> 00:12:48,959
see here so that was a good point we

299
00:12:48,959 --> 00:12:51,899
could actually reproduce the HTML so

300
00:12:51,899 --> 00:12:54,839
I needed to find a way to actually make

301
00:12:54,839 --> 00:12:57,779
this HTML injection useful because at at

302
00:12:57,779 --> 00:13:00,120
this moment it was like not useful at

303
00:13:00,120 --> 00:13:02,519
all because we could only inject like uh

304
00:13:02,519 --> 00:13:04,920
like headers and nothing

305
00:13:04,920 --> 00:13:07,579
so

306
00:13:07,680 --> 00:13:10,019
so basically uh

307
00:13:10,019 --> 00:13:11,899
the the

308
00:13:11,899 --> 00:13:16,200
release note said it wasn't xss but and

309
00:13:16,200 --> 00:13:18,480
I've been mentioning this like like an

310
00:13:18,480 --> 00:13:20,399
exercise vulnerability so an exercise

311
00:13:20,399 --> 00:13:22,500
vulnerability for those who don't know

312
00:13:22,500 --> 00:13:24,240
stands for cross-site scripting

313
00:13:24,240 --> 00:13:25,860
vulnerability which allows you to

314
00:13:25,860 --> 00:13:28,440
actually insert some JavaScript code

315
00:13:28,440 --> 00:13:29,519
somewhere

316
00:13:29,519 --> 00:13:32,399
but this was not an exercise at best you

317
00:13:32,399 --> 00:13:34,079
could call this the HTML injection

318
00:13:34,079 --> 00:13:36,540
because there was no possibility for

319
00:13:36,540 --> 00:13:39,240
actually injecting JavaScript so

320
00:13:39,240 --> 00:13:41,579
from an exploitment perspective this was

321
00:13:41,579 --> 00:13:43,380
useless because

322
00:13:43,380 --> 00:13:45,300
we couldn't do anything interesting I

323
00:13:45,300 --> 00:13:47,279
mean we could insert like images and

324
00:13:47,279 --> 00:13:49,560
maybe like uh insert some memes to The

325
00:13:49,560 --> 00:13:52,019
Operators without them actually

326
00:13:52,019 --> 00:13:54,360
expecting them but it wasn't really

327
00:13:54,360 --> 00:13:55,980
useful

328
00:13:55,980 --> 00:14:00,060
but what I found out was because knowing

329
00:14:00,060 --> 00:14:02,579
Java and it's low for object the

330
00:14:02,579 --> 00:14:04,740
serialization vulnerabilities I just

331
00:14:04,740 --> 00:14:07,380
tried the object tag which is really an

332
00:14:07,380 --> 00:14:09,899
old uh tag and it's not used a lot

333
00:14:09,899 --> 00:14:10,860
anymore

334
00:14:10,860 --> 00:14:13,500
and then I see this interesting Behavior

335
00:14:13,500 --> 00:14:16,279
I have this two question marks in red

336
00:14:16,279 --> 00:14:19,139
and I was really suspicious because like

337
00:14:19,139 --> 00:14:20,880
there's something happening right

338
00:14:20,880 --> 00:14:22,800
because when we included like different

339
00:14:22,800 --> 00:14:25,680
tags like it was nothing was happening

340
00:14:25,680 --> 00:14:28,860
and then the object tag we get that

341
00:14:28,860 --> 00:14:30,899
those question marks so there was

342
00:14:30,899 --> 00:14:32,519
something interesting and was definitely

343
00:14:32,519 --> 00:14:34,260
not what we expected

344
00:14:34,260 --> 00:14:37,860
so we decided to dig deeper and then

345
00:14:37,860 --> 00:14:40,139
decided to take a look at the object tag

346
00:14:40,139 --> 00:14:43,860
from Java Swing and to my surprise uh

347
00:14:43,860 --> 00:14:46,399
not really but to everyone's surprise

348
00:14:46,399 --> 00:14:48,959
the object tag in Java Swing actually

349
00:14:48,959 --> 00:14:51,839
allows specific objects to be included

350
00:14:51,839 --> 00:14:54,959
which was again surprising

351
00:14:54,959 --> 00:14:58,500
so if you see here it says that this

352
00:14:58,500 --> 00:15:00,600
view will try to load the class

353
00:15:00,600 --> 00:15:03,660
specified by the class ID attribute and

354
00:15:03,660 --> 00:15:06,060
then it will loads the document Etc so

355
00:15:06,060 --> 00:15:08,639
essentially if you see here a simple

356
00:15:08,639 --> 00:15:10,800
example HTML invocation you can see that

357
00:15:10,800 --> 00:15:13,019
it creates a new object with the class

358
00:15:13,019 --> 00:15:16,920
ID the name of uh Java x dot swing.j

359
00:15:16,920 --> 00:15:19,260
label and then we have the parameter

360
00:15:19,260 --> 00:15:21,779
text and the value sample text so that

361
00:15:21,779 --> 00:15:23,699
this means that we can

362
00:15:23,699 --> 00:15:27,899
actually create specific Java objects so

363
00:15:27,899 --> 00:15:30,420
in my test program I go back there and

364
00:15:30,420 --> 00:15:33,480
just created a simple HTML tag in this

365
00:15:33,480 --> 00:15:36,180
case the object class ID and try to

366
00:15:36,180 --> 00:15:39,240
create a Java X swing J button which is

367
00:15:39,240 --> 00:15:41,760
a class for creating buttons and as you

368
00:15:41,760 --> 00:15:43,800
can see here the button was actually

369
00:15:43,800 --> 00:15:47,220
created within the J label so okay we

370
00:15:47,220 --> 00:15:49,380
can create arbitrary objects and

371
00:15:49,380 --> 00:15:52,079
probably everyone that's familiar with

372
00:15:52,079 --> 00:15:54,300
Java exploitation when you can create

373
00:15:54,300 --> 00:15:56,160
arbitrary objects you can do a lot of

374
00:15:56,160 --> 00:15:59,820
stuff and that's what I thought so I was

375
00:15:59,820 --> 00:16:01,980
really happy because finally I could

376
00:16:01,980 --> 00:16:05,220
create some objects and I was thinking

377
00:16:05,220 --> 00:16:06,660
of just like okay so we can create

378
00:16:06,660 --> 00:16:09,079
arbitrary objects we just call

379
00:16:09,079 --> 00:16:12,620
initialize a new instance of java

380
00:16:12,620 --> 00:16:14,820
length.frontime.exec which is a class in

381
00:16:14,820 --> 00:16:17,100
Java and then we'll be able to just get

382
00:16:17,100 --> 00:16:19,560
remote command execution right so it's

383
00:16:19,560 --> 00:16:21,480
just simple easy

384
00:16:21,480 --> 00:16:25,320
so tried to initialize it nothing was

385
00:16:25,320 --> 00:16:27,360
happening we just got the question marks

386
00:16:27,360 --> 00:16:30,660
again which was frustrating and this

387
00:16:30,660 --> 00:16:33,420
this is actually me when I tried it and

388
00:16:33,420 --> 00:16:35,820
then we attempted to initialize other

389
00:16:35,820 --> 00:16:38,339
classes without success and they were

390
00:16:38,339 --> 00:16:40,740
not working so

391
00:16:40,740 --> 00:16:42,959
we had to actually study what was

392
00:16:42,959 --> 00:16:46,620
happening and dig a little bit deeper so

393
00:16:46,620 --> 00:16:49,620
I started analyzing how the the HTML

394
00:16:49,620 --> 00:16:53,220
parsing was actually happening and how

395
00:16:53,220 --> 00:16:55,560
the tags each text was getting processed

396
00:16:55,560 --> 00:16:57,180
so

397
00:16:57,180 --> 00:17:00,420
if you see here this is from the the

398
00:17:00,420 --> 00:17:03,480
Java Swing framework so basically

399
00:17:03,480 --> 00:17:05,939
it has some specific tags and the tag

400
00:17:05,939 --> 00:17:07,679
that we're interested in this case is

401
00:17:07,679 --> 00:17:10,880
the object tag and the object tag

402
00:17:10,880 --> 00:17:14,220
uses the object view object view class

403
00:17:14,220 --> 00:17:17,099
for it shows that the objective class is

404
00:17:17,099 --> 00:17:19,079
actually responsible for handling the

405
00:17:19,079 --> 00:17:21,678
object tag

406
00:17:22,380 --> 00:17:24,959
so uh

407
00:17:24,959 --> 00:17:28,620
then we decided to actually analyze uh

408
00:17:28,620 --> 00:17:30,360
this this new class

409
00:17:30,360 --> 00:17:33,240
so as you can see here the create

410
00:17:33,240 --> 00:17:35,280
component function I'm not sure if it's

411
00:17:35,280 --> 00:17:37,980
readable but I'll try to explain it a

412
00:17:37,980 --> 00:17:40,200
little bit so basically if you read the

413
00:17:40,200 --> 00:17:42,000
code the create component function it's

414
00:17:42,000 --> 00:17:44,520
actually the one that let's say creates

415
00:17:44,520 --> 00:17:47,640
the the the the the element that you

416
00:17:47,640 --> 00:17:49,760
defined in the object tag

417
00:17:49,760 --> 00:17:52,320
so if you see here the first thing it

418
00:17:52,320 --> 00:17:55,860
does it gets all the attributes in an

419
00:17:55,860 --> 00:17:57,600
attribute set which is the specific

420
00:17:57,600 --> 00:18:00,080
variable and then it gets the class name

421
00:18:00,080 --> 00:18:02,539
from the class ID

422
00:18:02,539 --> 00:18:06,960
so after it does that uh it creates a

423
00:18:06,960 --> 00:18:10,140
new instance of the of this class like

424
00:18:10,140 --> 00:18:12,360
it does some Java magic which I'm not

425
00:18:12,360 --> 00:18:14,400
going to go deep into it because there

426
00:18:14,400 --> 00:18:16,080
will probably be another thought

427
00:18:16,080 --> 00:18:19,380
but essentially it creates a new

428
00:18:19,380 --> 00:18:21,840
instance of this object and then it will

429
00:18:21,840 --> 00:18:25,679
check if this instance is and is a child

430
00:18:25,679 --> 00:18:27,539
of component

431
00:18:27,539 --> 00:18:30,660
so the component class let me just try

432
00:18:30,660 --> 00:18:32,760
to get back

433
00:18:32,760 --> 00:18:35,220
yeah so if you see here the component

434
00:18:35,220 --> 00:18:36,900
class is actually

435
00:18:36,900 --> 00:18:39,120
I don't think it's visible but the

436
00:18:39,120 --> 00:18:42,000
component class it's actually uh the

437
00:18:42,000 --> 00:18:43,799
parent for the J component and the J

438
00:18:43,799 --> 00:18:46,500
component is parent for all the the

439
00:18:46,500 --> 00:18:47,640
different

440
00:18:47,640 --> 00:18:49,980
elements that Java Swing framework has

441
00:18:49,980 --> 00:18:53,520
like the J menu J table J level J button

442
00:18:53,520 --> 00:18:55,260
Etc

443
00:18:55,260 --> 00:18:58,440
so it checks if that's part of the

444
00:18:58,440 --> 00:19:01,320
component if it's a child of component

445
00:19:01,320 --> 00:19:03,900
and then if it is it will call the set

446
00:19:03,900 --> 00:19:06,780
parameters function with component uh

447
00:19:06,780 --> 00:19:08,820
with the new newly created class and the

448
00:19:08,820 --> 00:19:12,120
attribute that you got earlier

449
00:19:12,120 --> 00:19:14,700
and then if it's not an instance of

450
00:19:14,700 --> 00:19:17,700
component or that uh there is some error

451
00:19:17,700 --> 00:19:20,460
it will call the get unloadable

452
00:19:20,460 --> 00:19:23,220
representation which

453
00:19:23,220 --> 00:19:25,140
if you read the function it actually

454
00:19:25,140 --> 00:19:27,240
creates a new label with two question

455
00:19:27,240 --> 00:19:29,880
marks and makes them red which was the

456
00:19:29,880 --> 00:19:31,860
initial uh behavior that we were seeing

457
00:19:31,860 --> 00:19:33,960
so that means that previously when we

458
00:19:33,960 --> 00:19:35,820
tried to load those specific classes

459
00:19:35,820 --> 00:19:38,520
here uh

460
00:19:38,520 --> 00:19:41,220
like here for example if we try to load

461
00:19:41,220 --> 00:19:43,200
specific class this was actually what

462
00:19:43,200 --> 00:19:45,360
was happening and that's why we're

463
00:19:45,360 --> 00:19:48,600
getting the red question marks

464
00:19:48,600 --> 00:19:51,840
uh but what if we find something that's

465
00:19:51,840 --> 00:19:54,059
part of that's an instance of components

466
00:19:54,059 --> 00:19:57,179
and uh we we started to analyze what was

467
00:19:57,179 --> 00:19:58,620
happening with the set parameters

468
00:19:58,620 --> 00:20:00,240
function

469
00:20:00,240 --> 00:20:04,320
so the set parameters function uh it's

470
00:20:04,320 --> 00:20:06,179
not really complex function essentially

471
00:20:06,179 --> 00:20:09,900
it does what it does is it checks if any

472
00:20:09,900 --> 00:20:12,179
of the parameters uh

473
00:20:12,179 --> 00:20:14,760
that we were specified in the attributes

474
00:20:14,760 --> 00:20:16,559
of the HTML element

475
00:20:16,559 --> 00:20:20,880
uh for each of them it will check if

476
00:20:20,880 --> 00:20:24,780
there is a Setter method or I calculated

477
00:20:24,780 --> 00:20:27,360
right method or a function essentially

478
00:20:27,360 --> 00:20:29,640
what the setter method is is if you have

479
00:20:29,640 --> 00:20:32,280
a class you have a certain variable for

480
00:20:32,280 --> 00:20:33,660
example employee and then you have

481
00:20:33,660 --> 00:20:36,120
employee name you have you would call

482
00:20:36,120 --> 00:20:39,299
the setter method a function that would

483
00:20:39,299 --> 00:20:40,980
change the value of the employee name

484
00:20:40,980 --> 00:20:42,380
for example

485
00:20:42,380 --> 00:20:45,480
and then if this method actually exists

486
00:20:45,480 --> 00:20:47,640
or this function it will call the

487
00:20:47,640 --> 00:20:49,500
appropriate function with a specific

488
00:20:49,500 --> 00:20:52,080
specified value that we provided earlier

489
00:20:52,080 --> 00:20:54,660
on this so just to make it a little bit

490
00:20:54,660 --> 00:20:56,400
easier because I know it's a little bit

491
00:20:56,400 --> 00:20:59,039
complex so basically if we provide the

492
00:20:59,039 --> 00:21:01,860
following HTML to the library itself to

493
00:21:01,860 --> 00:21:04,799
Java Swing what it will do is it will

494
00:21:04,799 --> 00:21:06,660
first create an instance of this object

495
00:21:06,660 --> 00:21:09,480
the Hello by name object

496
00:21:09,480 --> 00:21:13,740
and then it will check if this object is

497
00:21:13,740 --> 00:21:17,780
actually a subclass or a child of

498
00:21:17,780 --> 00:21:20,640
java.awt.component and then if it's a

499
00:21:20,640 --> 00:21:22,919
child of that class it will actually

500
00:21:22,919 --> 00:21:25,440
call the setter method for the my name

501
00:21:25,440 --> 00:21:29,539
parameter and set the value to real

502
00:21:29,960 --> 00:21:33,539
so I I know it's a little bit complex

503
00:21:33,539 --> 00:21:35,280
and I'll be talking Java for a long time

504
00:21:35,280 --> 00:21:39,059
but I I wanted to kind of explain all

505
00:21:39,059 --> 00:21:40,679
the requirements and all the steps that

506
00:21:40,679 --> 00:21:42,360
we follow because if you don't

507
00:21:42,360 --> 00:21:43,919
understand all the steps that went to

508
00:21:43,919 --> 00:21:45,360
each you probably won't understand the

509
00:21:45,360 --> 00:21:47,940
vulnerability itself so basically at

510
00:21:47,940 --> 00:21:50,460
this moment we can um

511
00:21:50,460 --> 00:21:53,400
we can initialize some objects but we

512
00:21:53,400 --> 00:21:55,980
have some very specific needs so for

513
00:21:55,980 --> 00:21:58,200
example if we want to actually achieve

514
00:21:58,200 --> 00:22:01,020
command execution what we have to do is

515
00:22:01,020 --> 00:22:03,780
we have to find the class it's actually

516
00:22:03,780 --> 00:22:08,220
a subclass of java.awt.component

517
00:22:08,220 --> 00:22:10,500
and this class should have a Setter

518
00:22:10,500 --> 00:22:13,980
method and this Setter method should

519
00:22:13,980 --> 00:22:16,380
only have a single parameter of type

520
00:22:16,380 --> 00:22:19,860
string and when we call this method we

521
00:22:19,860 --> 00:22:22,320
can sum we should be able to somehow

522
00:22:22,320 --> 00:22:24,419
manipulate to achieve command execution

523
00:22:24,419 --> 00:22:26,480
or some other thing

524
00:22:26,480 --> 00:22:29,100
but like going through the internet

525
00:22:29,100 --> 00:22:31,799
source code of cobblestrike not Source

526
00:22:31,799 --> 00:22:33,360
but the decompiled version of global

527
00:22:33,360 --> 00:22:35,820
spike is not really easy

528
00:22:35,820 --> 00:22:37,559
so um

529
00:22:37,559 --> 00:22:40,860
with we didn't want to manually analyze

530
00:22:40,860 --> 00:22:43,080
all of it right so what what can we do

531
00:22:43,080 --> 00:22:44,820
about it because it's like searching a

532
00:22:44,820 --> 00:22:46,799
needle in haystack

533
00:22:46,799 --> 00:22:49,679
so for this reason we decided to use

534
00:22:49,679 --> 00:22:52,740
Derby so for those who are not aware of

535
00:22:52,740 --> 00:22:54,120
this tool is actually really awesome

536
00:22:54,120 --> 00:22:58,020
it's probably uh have it in Your Arsenal

537
00:22:58,020 --> 00:22:59,640
okay

538
00:22:59,640 --> 00:23:02,700
uh so tab is an open source code

539
00:23:02,700 --> 00:23:05,100
analysis tool for Java

540
00:23:05,100 --> 00:23:07,260
it's it's mainly used to actually

541
00:23:07,260 --> 00:23:09,960
discover the serialization gadgets but

542
00:23:09,960 --> 00:23:12,240
you can use it for like other code

543
00:23:12,240 --> 00:23:15,900
analysis uh to code analysis techniques

544
00:23:15,900 --> 00:23:17,340
that you want

545
00:23:17,340 --> 00:23:20,220
so basically in the background what it

546
00:23:20,220 --> 00:23:22,980
does it has the neo4j database and you

547
00:23:22,980 --> 00:23:24,960
can import different types of java

548
00:23:24,960 --> 00:23:26,880
programs like

549
00:23:26,880 --> 00:23:31,140
draw files and essentially any like

550
00:23:31,140 --> 00:23:33,480
common on files for Java compiled

551
00:23:33,480 --> 00:23:35,940
programs as well and what it will do is

552
00:23:35,940 --> 00:23:37,919
like analyze these files and create

553
00:23:37,919 --> 00:23:40,260
graphs based on these functions on the

554
00:23:40,260 --> 00:23:42,840
functions that that are within these

555
00:23:42,840 --> 00:23:44,640
programs

556
00:23:44,640 --> 00:23:48,179
so for this reason uh we loaded the

557
00:23:48,179 --> 00:23:51,679
Cobra strike uh draft file into copy

558
00:23:51,679 --> 00:23:54,419
analyze it with a database and then we

559
00:23:54,419 --> 00:23:56,340
just wrote a custom Cipher query so

560
00:23:56,340 --> 00:23:58,799
Cipher query is kind of similar to SQL

561
00:23:58,799 --> 00:24:00,900
but it's for

562
00:24:00,900 --> 00:24:04,200
um it's for neo4j databases so for

563
00:24:04,200 --> 00:24:05,700
example what I told the program here

564
00:24:05,700 --> 00:24:09,720
which is not readable is I told it like

565
00:24:09,720 --> 00:24:11,880
give me all the classes that are

566
00:24:11,880 --> 00:24:17,220
subclasses of java.aw component and that

567
00:24:17,220 --> 00:24:21,360
have a method that starts with set and

568
00:24:21,360 --> 00:24:23,700
has one specific uh

569
00:24:23,700 --> 00:24:27,900
parameter of type string and that it's

570
00:24:27,900 --> 00:24:31,200
not some specific values that I excluded

571
00:24:31,200 --> 00:24:32,460
from it

572
00:24:32,460 --> 00:24:35,400
so in total I think we got I think

573
00:24:35,400 --> 00:24:38,039
around 48 I'm not sure uh

574
00:24:38,039 --> 00:24:41,760
so 48 functions to analyze is not a big

575
00:24:41,760 --> 00:24:44,220
job manually so we decided to take a

576
00:24:44,220 --> 00:24:46,799
look at all the functions

577
00:24:46,799 --> 00:24:50,460
so all the 48 methods or functions that

578
00:24:50,460 --> 00:24:52,799
we discovered weren't really interesting

579
00:24:52,799 --> 00:24:55,500
they were like mainly to just change a

580
00:24:55,500 --> 00:24:57,600
text label or maybe like update

581
00:24:57,600 --> 00:25:00,480
something but nothing was like really

582
00:25:00,480 --> 00:25:02,640
useful from an exploit the exploitation

583
00:25:02,640 --> 00:25:03,900
perspective

584
00:25:03,900 --> 00:25:07,080
so out of these 48 discovered methods we

585
00:25:07,080 --> 00:25:09,559
found out that the set URI method in the

586
00:25:09,559 --> 00:25:12,960
jsvg canvas class was interesting

587
00:25:12,960 --> 00:25:14,340
because

588
00:25:14,340 --> 00:25:17,159
it's uh it matched all our requirements

589
00:25:17,159 --> 00:25:20,280
so it started with set and it was for

590
00:25:20,280 --> 00:25:23,159
the URI element it had a single

591
00:25:23,159 --> 00:25:25,440
parameter which was stock type string in

592
00:25:25,440 --> 00:25:28,380
this case you know URI and then

593
00:25:28,380 --> 00:25:31,980
using this uh this variable it actually

594
00:25:31,980 --> 00:25:34,080
called another function which was load

595
00:25:34,080 --> 00:25:36,059
SVG document

596
00:25:36,059 --> 00:25:38,039
and this fulfilled all our requirements

597
00:25:38,039 --> 00:25:42,240
and uh if if you're if you actually saw

598
00:25:42,240 --> 00:25:44,840
discovered like a nexus's vulnerability

599
00:25:44,840 --> 00:25:47,760
uh you probably know that SVG files

600
00:25:47,760 --> 00:25:50,820
allow you to include xss so at this

601
00:25:50,820 --> 00:25:52,799
point I was pretty certain that this was

602
00:25:52,799 --> 00:25:55,620
the vulnerability itself so I have an

603
00:25:55,620 --> 00:25:58,679
SVG file I'll just include it script

604
00:25:58,679 --> 00:26:01,340
alert one which is the most

605
00:26:01,340 --> 00:26:05,100
common scripting uh payload that

606
00:26:05,100 --> 00:26:08,039
probably most people use so I I thought

607
00:26:08,039 --> 00:26:11,039
okay so the previous one was an uh

608
00:26:11,039 --> 00:26:13,559
was the next success but was was not a

609
00:26:13,559 --> 00:26:16,620
real xss so at this time we have the SVG

610
00:26:16,620 --> 00:26:18,720
file so it's probably an xss and we can

611
00:26:18,720 --> 00:26:20,580
exploit it right

612
00:26:20,580 --> 00:26:22,220
well no

613
00:26:22,220 --> 00:26:26,039
so basically uh what I did was I hosted

614
00:26:26,039 --> 00:26:28,860
the SVG file in a remote location and

615
00:26:28,860 --> 00:26:31,140
injected the following HTML in the notes

616
00:26:31,140 --> 00:26:33,480
field so basically as I mentioned

617
00:26:33,480 --> 00:26:35,159
earlier just the object class that we

618
00:26:35,159 --> 00:26:39,740
wanted and we have the parameter URI and

619
00:26:39,740 --> 00:26:43,140
this is the URL and we're I was

620
00:26:43,140 --> 00:26:46,200
expecting it to actually uh give me the

621
00:26:46,200 --> 00:26:48,419
the alert one but

622
00:26:48,419 --> 00:26:51,000
even though the SVG file was actually

623
00:26:51,000 --> 00:26:55,500
loaded we got an exception

624
00:26:55,500 --> 00:26:59,580
so now the SVG file was sparse but then

625
00:26:59,580 --> 00:27:01,679
this filed through an exception

626
00:27:01,679 --> 00:27:04,080
because it tried to load the class which

627
00:27:04,080 --> 00:27:06,720
did not find and it was org that Mozilla

628
00:27:06,720 --> 00:27:08,700
the JavaScript are scriptable

629
00:27:08,700 --> 00:27:10,500
and at this point I was like okay so

630
00:27:10,500 --> 00:27:13,080
this SVG file is somehow now loading in

631
00:27:13,080 --> 00:27:15,840
your class that is not finding it so can

632
00:27:15,840 --> 00:27:18,360
we somehow manipulate this to

633
00:27:18,360 --> 00:27:22,520
to actually load the class of our liking

634
00:27:23,659 --> 00:27:25,799
and uh

635
00:27:25,799 --> 00:27:27,559
yes we can

636
00:27:27,559 --> 00:27:30,960
so basically we found out that jsvg

637
00:27:30,960 --> 00:27:33,059
canvas class was actually part of the

638
00:27:33,059 --> 00:27:36,120
Apache batik Library

639
00:27:36,120 --> 00:27:38,640
and we'll search the documentation in

640
00:27:38,640 --> 00:27:40,440
details and was reading it for probably

641
00:27:40,440 --> 00:27:42,960
like way too longer than we should have

642
00:27:42,960 --> 00:27:46,340
and then we found out this uh this entry

643
00:27:46,340 --> 00:27:49,799
so basically it says referencing Java

644
00:27:49,799 --> 00:27:51,659
code from a document from an SVG

645
00:27:51,659 --> 00:27:54,240
document and everyone who's in security

646
00:27:54,240 --> 00:27:56,520
probably knows that's not the best idea

647
00:27:56,520 --> 00:27:59,400
so it had some specific requirements so

648
00:27:59,400 --> 00:28:02,640
the first one is it should have been a

649
00:28:02,640 --> 00:28:05,640
script element which we used before and

650
00:28:05,640 --> 00:28:07,860
then in order for this to actually work

651
00:28:07,860 --> 00:28:10,080
correctly it should be an application

652
00:28:10,080 --> 00:28:12,120
Java archive

653
00:28:12,120 --> 00:28:15,600
so the the script element type should

654
00:28:15,600 --> 00:28:17,880
have been like that and then the the

655
00:28:17,880 --> 00:28:20,159
link of the jar file it should have been

656
00:28:20,159 --> 00:28:23,039
in x-link href so essentially at this

657
00:28:23,039 --> 00:28:25,080
moment we understood that we have this

658
00:28:25,080 --> 00:28:28,020
this SVG file then some with this SVG

659
00:28:28,020 --> 00:28:30,240
file we can reference external jar files

660
00:28:30,240 --> 00:28:32,159
and actually execute code

661
00:28:32,159 --> 00:28:34,020
and uh

662
00:28:34,020 --> 00:28:36,419
I was feeling a little bit like excited

663
00:28:36,419 --> 00:28:38,039
but uh

664
00:28:38,039 --> 00:28:40,380
all the other attempts that failed I was

665
00:28:40,380 --> 00:28:42,900
like still suspicious if it will work or

666
00:28:42,900 --> 00:28:44,700
not

667
00:28:44,700 --> 00:28:47,880
so it's an exploitation plan so we have

668
00:28:47,880 --> 00:28:50,039
everything to potentially kind of to

669
00:28:50,039 --> 00:28:53,760
actually execute code so we have

670
00:28:53,760 --> 00:28:55,980
the HTML injection we have the object

671
00:28:55,980 --> 00:28:58,440
reaction Etc so basically the next step

672
00:28:58,440 --> 00:29:00,779
was to actually build an SVG file that

673
00:29:00,779 --> 00:29:03,240
references the malicious jar package so

674
00:29:03,240 --> 00:29:05,880
you can see it here like following the

675
00:29:05,880 --> 00:29:09,120
documentation we just like linked a jar

676
00:29:09,120 --> 00:29:12,000
file which we create which I'll talk to

677
00:29:12,000 --> 00:29:14,460
you later on and then

678
00:29:14,460 --> 00:29:17,279
just leave the SVG like that and then we

679
00:29:17,279 --> 00:29:19,679
create the malicious jar file so we had

680
00:29:19,679 --> 00:29:22,320
to do some specific uh

681
00:29:22,320 --> 00:29:24,539
so for example here we had to manually

682
00:29:24,539 --> 00:29:28,020
modify the Manifest file uh to include

683
00:29:28,020 --> 00:29:30,299
the class that we actually want to call

684
00:29:30,299 --> 00:29:32,700
and then we implemented the class and

685
00:29:32,700 --> 00:29:34,440
within the class you have to actually

686
00:29:34,440 --> 00:29:37,980
Implement another event listener and the

687
00:29:37,980 --> 00:29:39,600
event listener will essentially just

688
00:29:39,600 --> 00:29:42,360
call runtime dot get runtime exec with a

689
00:29:42,360 --> 00:29:44,640
calculator and it will uh

690
00:29:44,640 --> 00:29:47,220
we'll execute the calculator

691
00:29:47,220 --> 00:29:49,260
so

692
00:29:49,260 --> 00:29:53,279
I created the SVG and the jar file we

693
00:29:53,279 --> 00:29:55,799
hosted them remotely we injected the

694
00:29:55,799 --> 00:29:57,899
malicious HTML in the vulnerable field

695
00:29:57,899 --> 00:30:01,939
that we were testing in this case notes

696
00:30:02,340 --> 00:30:05,100
and after injecting this in the node

697
00:30:05,100 --> 00:30:07,799
field we can see here that we got some

698
00:30:07,799 --> 00:30:10,500
requests first we get the SVG file and

699
00:30:10,500 --> 00:30:12,899
then the jar files and then we can see

700
00:30:12,899 --> 00:30:14,820
here the notes actually is getting

701
00:30:14,820 --> 00:30:16,919
rendered and just executing the

702
00:30:16,919 --> 00:30:19,140
calculator so

703
00:30:19,140 --> 00:30:21,120
this was like a success because we

704
00:30:21,120 --> 00:30:23,159
finally managed to prove that it was

705
00:30:23,159 --> 00:30:25,559
still possible to actually execute code

706
00:30:25,559 --> 00:30:28,080
and calculator probably is not the

707
00:30:28,080 --> 00:30:29,760
easiest way to start the calculator but

708
00:30:29,760 --> 00:30:32,399
I think it's one of the coolest one

709
00:30:32,399 --> 00:30:35,640
but this is all good right uh

710
00:30:35,640 --> 00:30:37,620
but the problem with with this

711
00:30:37,620 --> 00:30:40,320
vulnerability is because it's triggered

712
00:30:40,320 --> 00:30:42,600
in the note field so the note field is

713
00:30:42,600 --> 00:30:44,760
only accessible by an operator so for

714
00:30:44,760 --> 00:30:45,659
example

715
00:30:45,659 --> 00:30:48,240
I can only change that if I actually

716
00:30:48,240 --> 00:30:50,279
have credentials to the team server and

717
00:30:50,279 --> 00:30:52,140
it's not really useful also you can

718
00:30:52,140 --> 00:30:54,840
actually compromise other operators your

719
00:30:54,840 --> 00:30:56,760
colleagues it's I don't think it's

720
00:30:56,760 --> 00:30:58,620
something that uh

721
00:30:58,620 --> 00:31:01,320
has an impact in the real world

722
00:31:01,320 --> 00:31:04,919
so we decided to actually see how we can

723
00:31:04,919 --> 00:31:08,100
exploit this from another perspective

724
00:31:08,100 --> 00:31:11,159
so basically if if you recall earlier I

725
00:31:11,159 --> 00:31:12,659
explained the architecture of global

726
00:31:12,659 --> 00:31:14,899
strike and we were trying to actually

727
00:31:14,899 --> 00:31:17,100
exploit this vulnerability from the

728
00:31:17,100 --> 00:31:19,080
beacon itself because the beacon is

729
00:31:19,080 --> 00:31:20,700
actually the malware that's deployed in

730
00:31:20,700 --> 00:31:22,860
several systems and once you deploy the

731
00:31:22,860 --> 00:31:25,159
malware in the system that means that

732
00:31:25,159 --> 00:31:27,840
someone that you have compromised can

733
00:31:27,840 --> 00:31:29,340
actually hack you back and like

734
00:31:29,340 --> 00:31:31,440
compromise your your system essentially

735
00:31:31,440 --> 00:31:34,200
where you're running Google strike

736
00:31:34,200 --> 00:31:35,340
so

737
00:31:35,340 --> 00:31:39,659
this was the main focus and

738
00:31:39,659 --> 00:31:41,520
some of the fields that we found out

739
00:31:41,520 --> 00:31:43,559
were still vulnerable from a beacon

740
00:31:43,559 --> 00:31:45,419
perspective the first one was the

741
00:31:45,419 --> 00:31:48,299
process browser UI which is uh here on

742
00:31:48,299 --> 00:31:50,340
the right essentially just like a user

743
00:31:50,340 --> 00:31:52,860
interface that you can see uh the remote

744
00:31:52,860 --> 00:31:56,220
processes that are ran on a Target so

745
00:31:56,220 --> 00:31:57,720
for example you have the process name

746
00:31:57,720 --> 00:32:01,140
pit the architecture Etc

747
00:32:01,140 --> 00:32:03,840
and then you have the the other field

748
00:32:03,840 --> 00:32:06,179
fields which is the file browser UI

749
00:32:06,179 --> 00:32:07,440
which is here

750
00:32:07,440 --> 00:32:09,840
so the process browser UI is not really

751
00:32:09,840 --> 00:32:13,200
used because Google strike has also uh

752
00:32:13,200 --> 00:32:16,140
a console command which uh it's probably

753
00:32:16,140 --> 00:32:18,059
that's the best way to actually use and

754
00:32:18,059 --> 00:32:20,520
in my day-to-day operations I rarely use

755
00:32:20,520 --> 00:32:23,159
the process browser UI but on the other

756
00:32:23,159 --> 00:32:24,899
hand the file browser UI is something

757
00:32:24,899 --> 00:32:26,279
really useful

758
00:32:26,279 --> 00:32:28,380
and I use it quite heavily because it's

759
00:32:28,380 --> 00:32:30,659
really difficult to actually browse the

760
00:32:30,659 --> 00:32:33,600
file system without using a a user

761
00:32:33,600 --> 00:32:36,059
interface so this was essentially the

762
00:32:36,059 --> 00:32:37,799
file browser was essentially a better

763
00:32:37,799 --> 00:32:39,679
Target

764
00:32:39,679 --> 00:32:43,980
uh yeah so if you if we wanted to use

765
00:32:43,980 --> 00:32:46,380
the process browser we could still do

766
00:32:46,380 --> 00:32:50,039
that but it was not uh really useful so

767
00:32:50,039 --> 00:32:52,820
we decided to focus on the file browser

768
00:32:52,820 --> 00:32:55,440
so the first thing that we actually

769
00:32:55,440 --> 00:32:58,140
needed to do to actually uh exploit this

770
00:32:58,140 --> 00:33:00,419
from the beacon perspective was try to

771
00:33:00,419 --> 00:33:02,820
see which function was responsible for

772
00:33:02,820 --> 00:33:05,940
the beacon to find or listing the files

773
00:33:05,940 --> 00:33:08,820
so for example we have here the function

774
00:33:08,820 --> 00:33:11,760
finds next file a which like after

775
00:33:11,760 --> 00:33:14,700
reversing the beacon uh we found out it

776
00:33:14,700 --> 00:33:16,799
was the function that was using to find

777
00:33:16,799 --> 00:33:19,019
the files and list the files

778
00:33:19,019 --> 00:33:21,299
and you have two parameters the first

779
00:33:21,299 --> 00:33:25,620
one is just a handle uh to a folder and

780
00:33:25,620 --> 00:33:27,059
then you have

781
00:33:27,059 --> 00:33:29,100
I think a file or folder it doesn't

782
00:33:29,100 --> 00:33:31,320
matter but uh it's just the handle and

783
00:33:31,320 --> 00:33:33,899
then you have uh another parameter which

784
00:33:33,899 --> 00:33:37,019
is the long pointer to a win32 find data

785
00:33:37,019 --> 00:33:39,240
structure so basically the structure

786
00:33:39,240 --> 00:33:41,399
definition is here uh essentially it has

787
00:33:41,399 --> 00:33:45,419
all the details for the files so uh you

788
00:33:45,419 --> 00:33:47,940
have like the file name the alternate

789
00:33:47,940 --> 00:33:50,519
name the file type Creator type Etc so

790
00:33:50,519 --> 00:33:52,500
everything so basically if you see here

791
00:33:52,500 --> 00:33:55,799
the file name is actually uh

792
00:33:55,799 --> 00:33:58,500
a v chart so basically it's just a

793
00:33:58,500 --> 00:34:00,360
string

794
00:34:00,360 --> 00:34:02,760
sorry and so basically like the file

795
00:34:02,760 --> 00:34:05,820
name that we have here is basically just

796
00:34:05,820 --> 00:34:09,179
a string so if we can somehow modify the

797
00:34:09,179 --> 00:34:11,099
response to this function

798
00:34:11,099 --> 00:34:13,859
and modify the file name we can include

799
00:34:13,859 --> 00:34:17,280
our HTML or uh injection object and then

800
00:34:17,280 --> 00:34:19,320
perform remote command execution on the

801
00:34:19,320 --> 00:34:22,020
UI from the beacon

802
00:34:22,020 --> 00:34:25,560
but how can we do that so

803
00:34:25,560 --> 00:34:28,199
we we decided to just like hook the

804
00:34:28,199 --> 00:34:30,239
function uh so basically for those who

805
00:34:30,239 --> 00:34:32,339
don't know what hooking is essentially

806
00:34:32,339 --> 00:34:34,859
is the process of intercepting

807
00:34:34,859 --> 00:34:37,679
um a function call by or in a program by

808
00:34:37,679 --> 00:34:40,940
redirecting it and so how it works is

809
00:34:40,940 --> 00:34:43,560
you have the function and then you

810
00:34:43,560 --> 00:34:46,679
rewrite the function to uh you rewrite

811
00:34:46,679 --> 00:34:48,839
the function codes to actually jump to

812
00:34:48,839 --> 00:34:50,280
another location and then you can do

813
00:34:50,280 --> 00:34:52,800
whatever you want with that function

814
00:34:52,800 --> 00:34:55,139
so there are several methods to actually

815
00:34:55,139 --> 00:34:57,780
perform it there is a

816
00:34:57,780 --> 00:35:00,960
Microsoft detours there is three dust

817
00:35:00,960 --> 00:35:03,660
grapes Etc uh just to make things easier

818
00:35:03,660 --> 00:35:06,000
I use the fermion which is the tool uh

819
00:35:06,000 --> 00:35:09,240
develop one or by one of my colleagues

820
00:35:09,240 --> 00:35:11,160
and essentially just like a

821
00:35:11,160 --> 00:35:13,200
cross-platform framework that allows you

822
00:35:13,200 --> 00:35:16,619
to use Freeda scripts and easily develop

823
00:35:16,619 --> 00:35:17,820
them

824
00:35:17,820 --> 00:35:20,160
so basically the plan was develop a free

825
00:35:20,160 --> 00:35:23,400
dust script that somehow will redirect

826
00:35:23,400 --> 00:35:27,240
the will modify the response of the

827
00:35:27,240 --> 00:35:30,720
finex file a function so we can see here

828
00:35:30,720 --> 00:35:33,060
uh on the right it's just a simple

829
00:35:33,060 --> 00:35:35,220
function essentially we have the

830
00:35:35,220 --> 00:35:38,400
Interceptor data touch which will find

831
00:35:38,400 --> 00:35:41,640
the pointer to that function and then it

832
00:35:41,640 --> 00:35:44,339
will modify so if you see here on leave

833
00:35:44,339 --> 00:35:46,980
it says it will modify when the function

834
00:35:46,980 --> 00:35:50,339
returns rather than when it starts

835
00:35:50,339 --> 00:35:53,160
so if you see here we just replay uh

836
00:35:53,160 --> 00:35:56,820
replace the the string of the or the

837
00:35:56,820 --> 00:35:59,339
file name itself with our exploitation

838
00:35:59,339 --> 00:36:02,220
string which is the malicious HTML as

839
00:36:02,220 --> 00:36:05,700
you can see up so basically sorry so

840
00:36:05,700 --> 00:36:07,440
basically the plan was to actually

841
00:36:07,440 --> 00:36:12,119
inject this one to the beacon uh and

842
00:36:12,119 --> 00:36:14,540
change the return value

843
00:36:14,540 --> 00:36:17,640
and uh fortunately for me after several

844
00:36:17,640 --> 00:36:19,800
failed attempts it actually worked so

845
00:36:19,800 --> 00:36:23,040
basically when the operator uh opens the

846
00:36:23,040 --> 00:36:24,960
file browser and tries to interact with

847
00:36:24,960 --> 00:36:26,280
a beacon

848
00:36:26,280 --> 00:36:28,619
the beacon will receive the commands and

849
00:36:28,619 --> 00:36:31,680
Define next file a will be modified by

850
00:36:31,680 --> 00:36:33,599
our malicious script and then it will

851
00:36:33,599 --> 00:36:35,940
return the malicious code uh the

852
00:36:35,940 --> 00:36:38,579
malicious HTML object which will indeed

853
00:36:38,579 --> 00:36:40,740
execute the SVG file the jar file and

854
00:36:40,740 --> 00:36:43,020
then the calculator and yes that's me

855
00:36:43,020 --> 00:36:46,200
after getting it after two weeks of

856
00:36:46,200 --> 00:36:48,960
actually probably not sleeping a lot

857
00:36:48,960 --> 00:36:51,359
so I'm just going to show a quick demo

858
00:36:51,359 --> 00:36:55,220
should be open here

859
00:36:57,359 --> 00:36:59,040
Yeah so basically we have the

860
00:36:59,040 --> 00:37:01,140
cobblestrike interface UI and this was

861
00:37:01,140 --> 00:37:03,780
the latest version at that time and then

862
00:37:03,780 --> 00:37:06,060
we have

863
00:37:06,060 --> 00:37:08,640
the victim PC where we execute the

864
00:37:08,640 --> 00:37:10,680
beacon the beacon is the malware that I

865
00:37:10,680 --> 00:37:12,839
mentioned earlier

866
00:37:12,839 --> 00:37:16,260
and then we see I just run the command

867
00:37:16,260 --> 00:37:19,320
task list to actually get uh the bit of

868
00:37:19,320 --> 00:37:22,020
the beacon and if is

869
00:37:22,020 --> 00:37:24,180
as you see there is probably not visible

870
00:37:24,180 --> 00:37:27,359
we inject the the free dust script to

871
00:37:27,359 --> 00:37:30,060
that uh to that process and and

872
00:37:30,060 --> 00:37:33,180
everything is working fine so now from

873
00:37:33,180 --> 00:37:35,940
the operator perspective the operator

874
00:37:35,940 --> 00:37:38,160
after getting access to your system

875
00:37:38,160 --> 00:37:41,040
we'll try okay so I want to see uh the

876
00:37:41,040 --> 00:37:43,460
file bro like what files this user has

877
00:37:43,460 --> 00:37:46,020
and we're just going to take a little

878
00:37:46,020 --> 00:37:48,599
bit because I think sleep time was one

879
00:37:48,599 --> 00:37:50,839
minute

880
00:37:52,140 --> 00:37:54,780
Yeah so basically this is just waiting

881
00:37:54,780 --> 00:37:57,240
because the local strike UI has a sleep

882
00:37:57,240 --> 00:38:00,000
time of one uh one minute so basically

883
00:38:00,000 --> 00:38:03,180
as soon as everything loads uh you can

884
00:38:03,180 --> 00:38:04,980
see that several calculators popped up

885
00:38:04,980 --> 00:38:07,440
and we can see that the injection uh on

886
00:38:07,440 --> 00:38:09,300
the right was actually successful so

887
00:38:09,300 --> 00:38:10,500
that's

888
00:38:10,500 --> 00:38:14,900
that's how we finally managed to execute

889
00:38:15,380 --> 00:38:17,940
remotely execute code in the global

890
00:38:17,940 --> 00:38:21,839
strike UI from the beacon perspective

891
00:38:21,839 --> 00:38:24,960
so before like uh finishing off with the

892
00:38:24,960 --> 00:38:26,400
presentation

893
00:38:26,400 --> 00:38:28,920
as I mentioned earlier uh

894
00:38:28,920 --> 00:38:30,780
this my work wouldn't be possible

895
00:38:30,780 --> 00:38:32,820
without the amazing resources that I've

896
00:38:32,820 --> 00:38:35,579
listed here so if you want to take a

897
00:38:35,579 --> 00:38:39,480
read I highly recommend it uh so yeah

898
00:38:39,480 --> 00:38:42,240
uh there was my talk thank you everyone

899
00:38:42,240 --> 00:38:43,450
if you have any questions

900
00:38:43,450 --> 00:38:46,759
[Applause]

901
00:38:47,520 --> 00:38:49,740
real thank you very much it was great

902
00:38:49,740 --> 00:38:52,079
presentation does anybody has any

903
00:38:52,079 --> 00:38:54,380
question

904
00:38:55,079 --> 00:38:57,540
even if you don't want to make them

905
00:38:57,540 --> 00:38:59,520
public feel free to reach out later on

906
00:38:59,520 --> 00:39:02,599
so thank you very much

