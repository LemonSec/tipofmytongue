1
00:00:06,020 --> 00:00:08,820
good morning uh thank you for coming to

2
00:00:08,820 --> 00:00:10,500
this talk and today we'll be discussing

3
00:00:10,500 --> 00:00:12,059
building Bots for Java Games a

4
00:00:12,059 --> 00:00:13,679
beginner's guide

5
00:00:13,679 --> 00:00:15,299
um before I start one common pattern

6
00:00:15,299 --> 00:00:17,340
you'll see throughout this talk is me

7
00:00:17,340 --> 00:00:19,080
tying it back to security somehow as

8
00:00:19,080 --> 00:00:20,640
this is a security conference at the end

9
00:00:20,640 --> 00:00:22,260
of the day

10
00:00:22,260 --> 00:00:24,060
um so moving forward here's the agenda

11
00:00:24,060 --> 00:00:25,680
for today's talk first we'll talk about

12
00:00:25,680 --> 00:00:27,599
the disclaimers we'll introduce the game

13
00:00:27,599 --> 00:00:29,820
that we'll be writing the bot for we'll

14
00:00:29,820 --> 00:00:30,960
talk about some of the techniques we'll

15
00:00:30,960 --> 00:00:32,340
be using and finally we'll get into

16
00:00:32,340 --> 00:00:34,559
building the bot

17
00:00:34,559 --> 00:00:36,600
so quick disclaimers

18
00:00:36,600 --> 00:00:38,820
um as we are writing Bots you know it

19
00:00:38,820 --> 00:00:41,879
can the legal territory is questionable

20
00:00:41,879 --> 00:00:44,700
so whatever you learn here just do it at

21
00:00:44,700 --> 00:00:45,780
your own risk

22
00:00:45,780 --> 00:00:49,079
um and I don't do this for my day job so

23
00:00:49,079 --> 00:00:51,180
this is a pure hobby of mine so it's not

24
00:00:51,180 --> 00:00:52,920
affiliated with my employer in any way

25
00:00:52,920 --> 00:00:54,539
shape or form if my employer is

26
00:00:54,539 --> 00:00:56,579
listening to the stock

27
00:00:56,579 --> 00:00:59,640
um so let's start off with the meme to

28
00:00:59,640 --> 00:01:02,520
kind of light in the mood so

29
00:01:02,520 --> 00:01:04,019
um some of you may have seen this meme

30
00:01:04,019 --> 00:01:06,600
it's how to draw an owl so step one just

31
00:01:06,600 --> 00:01:08,460
draw two circles and then step two draw

32
00:01:08,460 --> 00:01:10,380
the rest of the owl so the purpose of

33
00:01:10,380 --> 00:01:12,240
this meme is to kind of convey the

34
00:01:12,240 --> 00:01:13,860
challenges that speakers face when

35
00:01:13,860 --> 00:01:16,439
talking about you know such dense topics

36
00:01:16,439 --> 00:01:18,360
as this you can break a lot of the

37
00:01:18,360 --> 00:01:20,159
topics in this talk out into their own

38
00:01:20,159 --> 00:01:23,340
sections that will be hours long

39
00:01:23,340 --> 00:01:26,580
though my goal is for this talk to be of

40
00:01:26,580 --> 00:01:28,860
all levels and while you may not

41
00:01:28,860 --> 00:01:30,299
understand what is happening under the

42
00:01:30,299 --> 00:01:33,119
hood you will understand or sorry why

43
00:01:33,119 --> 00:01:35,100
you may not understand why we're doing

44
00:01:35,100 --> 00:01:36,180
something under the hood you will

45
00:01:36,180 --> 00:01:39,259
understand what is happening

46
00:01:42,240 --> 00:01:44,880
so let's introduce the game

47
00:01:44,880 --> 00:01:45,960
um so the game that we're gonna be

48
00:01:45,960 --> 00:01:47,820
working with is RuneScape some of you

49
00:01:47,820 --> 00:01:49,680
may be familiar with this game if not

50
00:01:49,680 --> 00:01:52,439
I'll give a quick tldr so RuneScape was

51
00:01:52,439 --> 00:01:55,020
released in 2001 it's been regularly

52
00:01:55,020 --> 00:01:56,880
updated to this point in fact 10 years

53
00:01:56,880 --> 00:01:59,040
ago it was split into two there's the

54
00:01:59,040 --> 00:02:00,840
more modern version which has you know

55
00:02:00,840 --> 00:02:02,399
what you expect in modern games such as

56
00:02:02,399 --> 00:02:04,380
graphics and you know gameplay mechanics

57
00:02:04,380 --> 00:02:07,020
and there's the old school version so

58
00:02:07,020 --> 00:02:08,639
RuneScape itself is point and click

59
00:02:08,639 --> 00:02:10,440
meaning that to interact with the game

60
00:02:10,440 --> 00:02:11,879
you basically point at the screen and

61
00:02:11,879 --> 00:02:13,200
you click what you want to do so for

62
00:02:13,200 --> 00:02:14,459
example if you want to interact with the

63
00:02:14,459 --> 00:02:16,200
monster you click on the monster if you

64
00:02:16,200 --> 00:02:17,099
want to interact with the player you

65
00:02:17,099 --> 00:02:18,420
click on it this is a little bit

66
00:02:18,420 --> 00:02:20,400
different from your typical games where

67
00:02:20,400 --> 00:02:23,099
you use the wasd keys to move while on

68
00:02:23,099 --> 00:02:24,480
RuneScape the only time you really use

69
00:02:24,480 --> 00:02:26,400
the keyboard is to move the camera or to

70
00:02:26,400 --> 00:02:28,200
speak with other people or I guess type

71
00:02:28,200 --> 00:02:29,520
to other people

72
00:02:29,520 --> 00:02:31,080
so the reason it's actually point and

73
00:02:31,080 --> 00:02:33,420
click is the history behind RuneScape is

74
00:02:33,420 --> 00:02:34,739
that actually started off as a browser

75
00:02:34,739 --> 00:02:36,780
game and that's what gained so much

76
00:02:36,780 --> 00:02:38,340
popularity is because back then you

77
00:02:38,340 --> 00:02:39,360
could actually run it on low end

78
00:02:39,360 --> 00:02:40,920
machines and have a fully fledged game

79
00:02:40,920 --> 00:02:42,720
in the browser you know typically you

80
00:02:42,720 --> 00:02:43,920
have these browser games which are just

81
00:02:43,920 --> 00:02:45,540
like mini games but this is an actual

82
00:02:45,540 --> 00:02:47,879
full MMO in the browser and this is

83
00:02:47,879 --> 00:02:49,860
where it gained its reputation as being

84
00:02:49,860 --> 00:02:51,300
the gamer people played at the library

85
00:02:51,300 --> 00:02:53,819
or people played it at school

86
00:02:53,819 --> 00:02:55,920
um the game itself is written in Java

87
00:02:55,920 --> 00:02:57,900
there's an asterisk because the old

88
00:02:57,900 --> 00:02:59,640
school version is written in Java while

89
00:02:59,640 --> 00:03:01,019
the newer version is obviously written

90
00:03:01,019 --> 00:03:03,480
in C plus plus and the game itself

91
00:03:03,480 --> 00:03:05,340
follows the client server architecture

92
00:03:05,340 --> 00:03:07,739
pattern meaning for every one server

93
00:03:07,739 --> 00:03:09,360
there's many clients

94
00:03:09,360 --> 00:03:11,940
and but the quick caveat is that we're

95
00:03:11,940 --> 00:03:13,739
actually not going to be writing a bot

96
00:03:13,739 --> 00:03:15,000
for the real RuneScape we're going to be

97
00:03:15,000 --> 00:03:16,379
writing a bot for what's known as a

98
00:03:16,379 --> 00:03:18,840
RuneScape private server

99
00:03:18,840 --> 00:03:20,519
so let's talk about what RuneScape

100
00:03:20,519 --> 00:03:22,739
private servers are so rsps is an

101
00:03:22,739 --> 00:03:24,959
acronym for RuneScape private server and

102
00:03:24,959 --> 00:03:26,340
really what it is it's a version of

103
00:03:26,340 --> 00:03:27,840
RuneScape that's not ran by the official

104
00:03:27,840 --> 00:03:29,940
developers but rather individuals who

105
00:03:29,940 --> 00:03:31,800
basically reverse the game and were able

106
00:03:31,800 --> 00:03:33,900
to write their own version of the game

107
00:03:33,900 --> 00:03:35,760
um it typically features custom content

108
00:03:35,760 --> 00:03:37,440
and a different style of gameplay so

109
00:03:37,440 --> 00:03:39,000
that's what makes these games so

110
00:03:39,000 --> 00:03:41,340
alluring is that for example in

111
00:03:41,340 --> 00:03:43,019
RuneScape it was one of the first I

112
00:03:43,019 --> 00:03:44,819
think concepts of a freemium game which

113
00:03:44,819 --> 00:03:47,099
means that you it's free to play but

114
00:03:47,099 --> 00:03:48,599
eventually you hit a paywall and if you

115
00:03:48,599 --> 00:03:49,500
want to continue you have to buy

116
00:03:49,500 --> 00:03:51,659
membership the difference between

117
00:03:51,659 --> 00:03:53,220
RuneScape private servers though is that

118
00:03:53,220 --> 00:03:54,480
typically they would actually give you

119
00:03:54,480 --> 00:03:56,159
all the membership content and all the

120
00:03:56,159 --> 00:03:58,739
features for free the pay model was

121
00:03:58,739 --> 00:04:00,360
sorry the revenue model was a little bit

122
00:04:00,360 --> 00:04:01,560
different in the sense that you could

123
00:04:01,560 --> 00:04:04,560
pay for like custom items you know

124
00:04:04,560 --> 00:04:07,080
because people value exclusivity and as

125
00:04:07,080 --> 00:04:09,299
proven by nfts in the recent past you

126
00:04:09,299 --> 00:04:10,620
know people want to have one of one of

127
00:04:10,620 --> 00:04:12,720
everything there were lots of different

128
00:04:12,720 --> 00:04:14,400
private servers like

129
00:04:14,400 --> 00:04:16,380
actually they've been dying recently but

130
00:04:16,380 --> 00:04:18,660
in the past there have been thousands on

131
00:04:18,660 --> 00:04:19,680
the left you see some of the more

132
00:04:19,680 --> 00:04:21,298
popular private servers back in the day

133
00:04:21,298 --> 00:04:23,580
some of these are from like 2007 all the

134
00:04:23,580 --> 00:04:26,820
way to now and um

135
00:04:26,820 --> 00:04:29,400
so RuneScape itself had I think around

136
00:04:29,400 --> 00:04:31,680
100 I had actually hundreds of thousands

137
00:04:31,680 --> 00:04:32,820
of players but the difference between

138
00:04:32,820 --> 00:04:34,320
RuneScape and RuneScape private servers

139
00:04:34,320 --> 00:04:35,880
is that private servers actually only

140
00:04:35,880 --> 00:04:37,860
had like around a thousand players but

141
00:04:37,860 --> 00:04:39,300
the games felt more populated because

142
00:04:39,300 --> 00:04:40,680
RuneScape would split these players

143
00:04:40,680 --> 00:04:42,660
across different worlds so you would

144
00:04:42,660 --> 00:04:44,460
have maybe 100 worlds with a thousand

145
00:04:44,460 --> 00:04:45,840
players on each of them while on

146
00:04:45,840 --> 00:04:47,160
RuneScape private servers you would only

147
00:04:47,160 --> 00:04:48,780
have one world with a thousand players

148
00:04:48,780 --> 00:04:50,759
so you felt you know it was a little bit

149
00:04:50,759 --> 00:04:52,860
it was a lot more dense and last but not

150
00:04:52,860 --> 00:04:54,960
least there's different revisions AKA

151
00:04:54,960 --> 00:04:56,759
versions of RuneScape private servers so

152
00:04:56,759 --> 00:04:58,979
a revision is RuneScape a version of

153
00:04:58,979 --> 00:05:00,479
RuneScape so for example maybe you like

154
00:05:00,479 --> 00:05:02,280
the version of RuneScape in 2007 maybe

155
00:05:02,280 --> 00:05:04,259
you like it in 2009 so that's what's

156
00:05:04,259 --> 00:05:07,220
known as revisions

157
00:05:08,060 --> 00:05:11,400
so moving forward

158
00:05:11,400 --> 00:05:13,139
so let's discuss some of the techniques

159
00:05:13,139 --> 00:05:14,460
we will be using today that will allow

160
00:05:14,460 --> 00:05:15,780
us to write the bot

161
00:05:15,780 --> 00:05:18,180
so first and foremost is reflection so

162
00:05:18,180 --> 00:05:20,400
reflection there's Reflections in other

163
00:05:20,400 --> 00:05:23,280
languages so for example a language may

164
00:05:23,280 --> 00:05:25,500
have its own variant of reflection so go

165
00:05:25,500 --> 00:05:27,660
laying python Ruby has reflection as

166
00:05:27,660 --> 00:05:28,560
well

167
00:05:28,560 --> 00:05:30,300
um basically what it is is a technique

168
00:05:30,300 --> 00:05:31,740
allowing runtime inspection and

169
00:05:31,740 --> 00:05:33,840
manipulation of objects methods and

170
00:05:33,840 --> 00:05:35,639
Fields basically what this mean is that

171
00:05:35,639 --> 00:05:36,840
while the program is running you could

172
00:05:36,840 --> 00:05:38,940
get the value of whatever you want at

173
00:05:38,940 --> 00:05:40,080
the current time and you can actually

174
00:05:40,080 --> 00:05:42,660
modify it reflection has a close cousin

175
00:05:42,660 --> 00:05:44,340
called introspection and I think

176
00:05:44,340 --> 00:05:46,380
introspection is what python has is

177
00:05:46,380 --> 00:05:47,940
basically why you're not able to modify

178
00:05:47,940 --> 00:05:49,199
the value you're able to actually see

179
00:05:49,199 --> 00:05:52,259
the value you'll see reflection commonly

180
00:05:52,259 --> 00:05:53,639
used in Frameworks and libraries that

181
00:05:53,639 --> 00:05:56,160
deal with you know serialization testing

182
00:05:56,160 --> 00:05:58,759
and you know stuff along those lines

183
00:05:58,759 --> 00:06:01,199
one limitation to know about reflection

184
00:06:01,199 --> 00:06:03,960
is that new logic cannot be introduced

185
00:06:03,960 --> 00:06:06,060
what that means is that I can't inject

186
00:06:06,060 --> 00:06:08,880
entirely New Logic into the client so I

187
00:06:08,880 --> 00:06:11,280
can only use what's there and this will

188
00:06:11,280 --> 00:06:14,160
come in handy later and last not at

189
00:06:14,160 --> 00:06:16,919
least sorry last but not least um um

190
00:06:16,919 --> 00:06:18,660
reflection may cause some performance

191
00:06:18,660 --> 00:06:21,419
overhead so really based on the number

192
00:06:21,419 --> 00:06:24,120
of values you're trying to access with

193
00:06:24,120 --> 00:06:26,100
reflection it

194
00:06:26,100 --> 00:06:27,800
thank you

195
00:06:27,800 --> 00:06:30,000
the performance the more you're trying

196
00:06:30,000 --> 00:06:31,979
to get the more it can be impact your

197
00:06:31,979 --> 00:06:34,620
performance and an extension of the last

198
00:06:34,620 --> 00:06:36,600
point is that anytime you use reflection

199
00:06:36,600 --> 00:06:38,520
to access the value of something you're

200
00:06:38,520 --> 00:06:40,319
only accessing the value at that current

201
00:06:40,319 --> 00:06:41,819
state and time you're only getting that

202
00:06:41,819 --> 00:06:43,440
state at the current time meaning if the

203
00:06:43,440 --> 00:06:45,600
value does change for example like a

204
00:06:45,600 --> 00:06:47,100
player's Health in the game constantly

205
00:06:47,100 --> 00:06:48,600
changes then you'll have to use

206
00:06:48,600 --> 00:06:50,819
reflection to retrieve it again so

207
00:06:50,819 --> 00:06:53,340
you're basically

208
00:06:53,340 --> 00:06:54,780
um

209
00:06:54,780 --> 00:06:57,660
having to keep constantly reusing it and

210
00:06:57,660 --> 00:06:59,639
reflection will be the technique that we

211
00:06:59,639 --> 00:07:02,699
actually will use to write the bot today

212
00:07:02,699 --> 00:07:04,919
um so here's an example of reflection so

213
00:07:04,919 --> 00:07:06,780
in the first case you see that we're

214
00:07:06,780 --> 00:07:08,340
instantiating an instance of the runtime

215
00:07:08,340 --> 00:07:10,259
exact class and what this will allow you

216
00:07:10,259 --> 00:07:12,360
to do is just execute a method or sorry

217
00:07:12,360 --> 00:07:15,660
execute execute a command and as shown

218
00:07:15,660 --> 00:07:17,280
in Rio's wonderful talk yesterday about

219
00:07:17,280 --> 00:07:18,780
hacking Cobalt

220
00:07:18,780 --> 00:07:22,139
um they if you took a close look Cobalt

221
00:07:22,139 --> 00:07:23,400
actually uses Reflections you

222
00:07:23,400 --> 00:07:25,680
instantiate the objects

223
00:07:25,680 --> 00:07:27,419
um the instant the arbitrary objects

224
00:07:27,419 --> 00:07:29,699
that he would pass using the object HTML

225
00:07:29,699 --> 00:07:31,380
tag

226
00:07:31,380 --> 00:07:34,020
so

227
00:07:34,020 --> 00:07:35,880
so let's talk about where you may see

228
00:07:35,880 --> 00:07:37,259
reflection in the real world so if

229
00:07:37,259 --> 00:07:38,400
you've ever had a deal with DC

230
00:07:38,400 --> 00:07:40,979
realization leveraging deserialization

231
00:07:40,979 --> 00:07:43,020
in Java you may have most likely used

232
00:07:43,020 --> 00:07:44,639
the tool called why so serial if you're

233
00:07:44,639 --> 00:07:46,139
not familiar with why so cereal it's

234
00:07:46,139 --> 00:07:47,280
basically a tool that you can use to

235
00:07:47,280 --> 00:07:49,319
generate deserialization payloads that

236
00:07:49,319 --> 00:07:52,139
when evaluated by the Target will result

237
00:07:52,139 --> 00:07:55,380
in active exploitation so

238
00:07:55,380 --> 00:07:56,699
um here's a gadget for Commons

239
00:07:56,699 --> 00:07:58,680
collections five so common collections

240
00:07:58,680 --> 00:08:00,960
is a popular set of Library published by

241
00:08:00,960 --> 00:08:03,419
the Apache Foundation that just adds

242
00:08:03,419 --> 00:08:05,759
like utility and helper methods to Java

243
00:08:05,759 --> 00:08:08,099
and so the one thing you should note

244
00:08:08,099 --> 00:08:11,099
about here is that on line six sorry

245
00:08:11,099 --> 00:08:14,099
we're instantiating an instance of the

246
00:08:14,099 --> 00:08:16,919
bad attribute value exception class and

247
00:08:16,919 --> 00:08:18,479
then on line seven we're getting the

248
00:08:18,479 --> 00:08:20,940
declared field vowel you can see there

249
00:08:20,940 --> 00:08:23,759
and then finally we're setting a value

250
00:08:23,759 --> 00:08:25,740
using it so you may be wondering why are

251
00:08:25,740 --> 00:08:27,300
we using reflection to do this right

252
00:08:27,300 --> 00:08:28,680
it's a little bit of an Overkill it

253
00:08:28,680 --> 00:08:31,020
seems like well if we take a closer look

254
00:08:31,020 --> 00:08:33,120
at the actual class definition of bad

255
00:08:33,120 --> 00:08:34,979
attribute value exception you'll see on

256
00:08:34,979 --> 00:08:37,080
line 11 that the

257
00:08:37,080 --> 00:08:37,919
um

258
00:08:37,919 --> 00:08:39,779
the value actually has the private

259
00:08:39,779 --> 00:08:41,458
modifier meaning if you're familiar with

260
00:08:41,458 --> 00:08:43,380
object oriented programming it means

261
00:08:43,380 --> 00:08:44,760
you're not able to access this value

262
00:08:44,760 --> 00:08:46,620
directly and this value can only outside

263
00:08:46,620 --> 00:08:48,720
of this class so the value only be

264
00:08:48,720 --> 00:08:50,820
accessed inside the class unless there's

265
00:08:50,820 --> 00:08:52,560
mutator methods like Getters and Setters

266
00:08:52,560 --> 00:08:55,800
but that's out of scope for this talk

267
00:08:55,800 --> 00:08:57,600
um a second technique we'll be using um

268
00:08:57,600 --> 00:08:59,820
that you will commonly come across is

269
00:08:59,820 --> 00:09:01,740
called instrumentation

270
00:09:01,740 --> 00:09:02,640
um

271
00:09:02,640 --> 00:09:04,320
so what instrumentation really allows

272
00:09:04,320 --> 00:09:06,860
you to do is add new logic to whatever

273
00:09:06,860 --> 00:09:09,540
you're instrumenting and like I

274
00:09:09,540 --> 00:09:10,920
mentioned earlier one of the limitations

275
00:09:10,920 --> 00:09:12,420
of Reflections is that you're only able

276
00:09:12,420 --> 00:09:14,820
to reuse existing logic well here you're

277
00:09:14,820 --> 00:09:17,279
actually just able to add any arbitrary

278
00:09:17,279 --> 00:09:20,160
logic you want into the application

279
00:09:20,160 --> 00:09:23,220
um so instrumentation is commonly used

280
00:09:23,220 --> 00:09:25,260
for monitoring tracing and profiling so

281
00:09:25,260 --> 00:09:27,480
for example if you want to

282
00:09:27,480 --> 00:09:30,420
you know Trace

283
00:09:30,420 --> 00:09:32,580
um sorry like trace the metrics of your

284
00:09:32,580 --> 00:09:34,320
app how long does you know a specific

285
00:09:34,320 --> 00:09:36,240
method run for example you will be using

286
00:09:36,240 --> 00:09:38,100
instrumentation for this

287
00:09:38,100 --> 00:09:40,140
um it's you'll commonly come across this

288
00:09:40,140 --> 00:09:41,580
as called injection because you are

289
00:09:41,580 --> 00:09:44,459
injecting code essentially

290
00:09:44,459 --> 00:09:46,200
and one of the most popular forms of

291
00:09:46,200 --> 00:09:47,880
instrumentation are actually Java agents

292
00:09:47,880 --> 00:09:50,399
which itself is another topic that can

293
00:09:50,399 --> 00:09:52,920
have its own talk and basically what you

294
00:09:52,920 --> 00:09:54,120
just need to know is that you're able to

295
00:09:54,120 --> 00:09:55,920
attach a Java agent to an existing Java

296
00:09:55,920 --> 00:09:57,300
program and it's able to inject into

297
00:09:57,300 --> 00:10:00,240
that program and in our case the most

298
00:10:00,240 --> 00:10:01,500
common use case

299
00:10:01,500 --> 00:10:04,260
to use instrumentation is to inject

300
00:10:04,260 --> 00:10:06,300
mutators such as the Getters and Setter

301
00:10:06,300 --> 00:10:08,160
methods so for example if the class has

302
00:10:08,160 --> 00:10:10,080
a field that's only private we can

303
00:10:10,080 --> 00:10:12,360
inject a getter method that can now

304
00:10:12,360 --> 00:10:14,459
return that object and one last thing to

305
00:10:14,459 --> 00:10:17,040
leave off about in instrumentation is

306
00:10:17,040 --> 00:10:18,720
that it's typically faster than

307
00:10:18,720 --> 00:10:21,000
reflection and that's because when you

308
00:10:21,000 --> 00:10:23,040
are injecting getter insiders you're

309
00:10:23,040 --> 00:10:25,320
able now you're directly you have direct

310
00:10:25,320 --> 00:10:26,940
access to the fields rather than using

311
00:10:26,940 --> 00:10:30,300
reflection to get them and um

312
00:10:30,300 --> 00:10:31,980
so today we actually won't be

313
00:10:31,980 --> 00:10:33,660
demonstrating reflection

314
00:10:33,660 --> 00:10:35,700
um or sorry we won't be using ejection

315
00:10:35,700 --> 00:10:39,000
to write the bot due to time constraints

316
00:10:39,000 --> 00:10:41,820
so let's examine a real world

317
00:10:41,820 --> 00:10:45,620
um example of instrumentation

318
00:10:45,959 --> 00:10:49,260
so hopefully everyone can see this so

319
00:10:49,260 --> 00:10:52,100
oops

320
00:10:55,399 --> 00:10:58,019
so basically here's a basic Java program

321
00:10:58,019 --> 00:11:01,019
all it does is print hello piece size

322
00:11:01,019 --> 00:11:02,940
for Sheena to standard out

323
00:11:02,940 --> 00:11:05,519
and let's

324
00:11:05,519 --> 00:11:08,220
see the code it's or let's see it run so

325
00:11:08,220 --> 00:11:10,620
here we are compiling it and we're

326
00:11:10,620 --> 00:11:12,180
running it

327
00:11:12,180 --> 00:11:13,920
so right like I said it's going to just

328
00:11:13,920 --> 00:11:15,420
print besides Christina and I ran it

329
00:11:15,420 --> 00:11:16,620
twice just to show you there's nothing

330
00:11:16,620 --> 00:11:18,720
happening under the hood so now let's

331
00:11:18,720 --> 00:11:19,920
look at the agent that we're going to

332
00:11:19,920 --> 00:11:21,420
use so the first thing you should

333
00:11:21,420 --> 00:11:22,740
examine the only thing we're going to

334
00:11:22,740 --> 00:11:24,480
use with this agent is we're going to

335
00:11:24,480 --> 00:11:26,820
connect to the main method and then what

336
00:11:26,820 --> 00:11:28,500
we're going to do is insert the last

337
00:11:28,500 --> 00:11:31,320
line goodbye Pristina 2023 and we

338
00:11:31,320 --> 00:11:33,420
prepend this agent tag to it just so you

339
00:11:33,420 --> 00:11:35,220
can for visibility just so you can see

340
00:11:35,220 --> 00:11:37,380
that this is the agent that's actually

341
00:11:37,380 --> 00:11:38,459
doing it

342
00:11:38,459 --> 00:11:40,019
so

343
00:11:40,019 --> 00:11:42,839
um and then obviously we um then it

344
00:11:42,839 --> 00:11:44,880
manipulates the by code and all that so

345
00:11:44,880 --> 00:11:46,620
so let's run it

346
00:11:46,620 --> 00:11:48,360
um

347
00:11:48,360 --> 00:11:50,160
so actually now I show the original code

348
00:11:50,160 --> 00:11:51,600
again so this is the main method that

349
00:11:51,600 --> 00:11:53,339
we're going to be instrumenting and

350
00:11:53,339 --> 00:11:55,040
we're just going to insert that a

351
00:11:55,040 --> 00:11:57,420
system.out.printline goodbye besides

352
00:11:57,420 --> 00:11:59,640
Christina so

353
00:11:59,640 --> 00:12:02,399
let's do this

354
00:12:02,399 --> 00:12:04,459
um

355
00:12:05,880 --> 00:12:08,279
so here's how we run the Java agent we

356
00:12:08,279 --> 00:12:09,839
passed it an argument called Java agent

357
00:12:09,839 --> 00:12:13,019
when we point it to our agent and as

358
00:12:13,019 --> 00:12:14,760
soon as it executes you now see it

359
00:12:14,760 --> 00:12:17,480
insert goodbye besides Christina 2023

360
00:12:17,480 --> 00:12:20,700
and I think I'm going to run the pro the

361
00:12:20,700 --> 00:12:23,160
original Pro oh that's it so that's an

362
00:12:23,160 --> 00:12:25,800
example use case of using a Java agent

363
00:12:25,800 --> 00:12:29,240
um so let's get into building the bot

364
00:12:29,540 --> 00:12:33,120
so what is the client itself so the

365
00:12:33,120 --> 00:12:34,740
client is a picture of it you see to the

366
00:12:34,740 --> 00:12:36,720
left and it's essentially a graphical

367
00:12:36,720 --> 00:12:38,459
user interface that the player interacts

368
00:12:38,459 --> 00:12:40,680
with in order to play the game so if you

369
00:12:40,680 --> 00:12:41,940
think about it in a way the client

370
00:12:41,940 --> 00:12:43,560
constrains what the player is able to do

371
00:12:43,560 --> 00:12:44,940
and what they're not able to do and what

372
00:12:44,940 --> 00:12:46,320
I mean by this is that for example if

373
00:12:46,320 --> 00:12:47,639
the player doesn't have an item in their

374
00:12:47,639 --> 00:12:49,500
inventory they are not able to equip

375
00:12:49,500 --> 00:12:51,420
that item or if the player is not able

376
00:12:51,420 --> 00:12:52,680
to you know the view distance of what

377
00:12:52,680 --> 00:12:54,060
they're able to see if something's

378
00:12:54,060 --> 00:12:55,440
happening far off they're not able to

379
00:12:55,440 --> 00:12:57,839
see that because they're only able to

380
00:12:57,839 --> 00:12:59,459
play the game the way that the client

381
00:12:59,459 --> 00:13:01,380
wants them to play the game and because

382
00:13:01,380 --> 00:13:02,940
of this the client can be thought as an

383
00:13:02,940 --> 00:13:04,440
intermediary basically a middleman

384
00:13:04,440 --> 00:13:07,940
between the player and the game

385
00:13:09,260 --> 00:13:12,420
so let's talk about oops I didn't

386
00:13:12,420 --> 00:13:16,040
realize it was not in full screen

387
00:13:19,500 --> 00:13:21,240
so let's talk about maybe let me provide

388
00:13:21,240 --> 00:13:22,680
an analogy that maybe a lot of people

389
00:13:22,680 --> 00:13:25,500
some people may understand is that

390
00:13:25,500 --> 00:13:27,899
essentially the browser like your web

391
00:13:27,899 --> 00:13:30,120
browser is a client and the website that

392
00:13:30,120 --> 00:13:31,139
you're interacting with can be

393
00:13:31,139 --> 00:13:33,240
considered the server so in the same

394
00:13:33,240 --> 00:13:34,320
sense

395
00:13:34,320 --> 00:13:36,959
um the browser comes with the engine

396
00:13:36,959 --> 00:13:38,579
which is able to render JavaScript and

397
00:13:38,579 --> 00:13:40,260
because of that you're now able to have

398
00:13:40,260 --> 00:13:44,700
client-side code and what's happening is

399
00:13:44,700 --> 00:13:46,380
for example there are cases where the

400
00:13:46,380 --> 00:13:49,320
client side is able to control what how

401
00:13:49,320 --> 00:13:50,519
the user is able to interact with the

402
00:13:50,519 --> 00:13:53,100
website so in this example this is a

403
00:13:53,100 --> 00:13:54,240
simple

404
00:13:54,240 --> 00:13:56,940
HTML form and basically it has one input

405
00:13:56,940 --> 00:13:59,519
field and what it does is before the

406
00:13:59,519 --> 00:14:02,040
player or sorry before the user submits

407
00:14:02,040 --> 00:14:03,600
the form it will check if the input

408
00:14:03,600 --> 00:14:06,360
field has a single quote and basically

409
00:14:06,360 --> 00:14:08,040
what this is is the ultimate SQL

410
00:14:08,040 --> 00:14:09,720
injection protection right who needs

411
00:14:09,720 --> 00:14:11,519
sanitization or prepared statements when

412
00:14:11,519 --> 00:14:13,260
you can do something like this because

413
00:14:13,260 --> 00:14:15,300
if we're talking in the sense where the

414
00:14:15,300 --> 00:14:17,100
client has full control that means the

415
00:14:17,100 --> 00:14:18,839
player like in RuneScape they're not

416
00:14:18,839 --> 00:14:20,160
able to directly interface with the

417
00:14:20,160 --> 00:14:21,360
server they have to go through the

418
00:14:21,360 --> 00:14:23,940
client but just like many of you may

419
00:14:23,940 --> 00:14:26,579
know that it's so here's an example like

420
00:14:26,579 --> 00:14:28,380
where I type in test with a single quote

421
00:14:28,380 --> 00:14:29,639
and it tells me single quotes are not

422
00:14:29,639 --> 00:14:30,480
allowed

423
00:14:30,480 --> 00:14:32,339
so with this protect against SQL

424
00:14:32,339 --> 00:14:35,040
injection no and that's because what

425
00:14:35,040 --> 00:14:36,839
you're able to do is maybe use a lower

426
00:14:36,839 --> 00:14:38,579
level like curl for example which

427
00:14:38,579 --> 00:14:40,560
doesn't support JavaScript you send data

428
00:14:40,560 --> 00:14:42,240
directly to the server or if you really

429
00:14:42,240 --> 00:14:44,459
wanted to you could just send raw HTTP

430
00:14:44,459 --> 00:14:46,199
requests you can get really really low

431
00:14:46,199 --> 00:14:48,360
on how you get around this and we're

432
00:14:48,360 --> 00:14:51,000
actually going to be using this to be

433
00:14:51,000 --> 00:14:52,500
able to interface with the client or

434
00:14:52,500 --> 00:14:54,720
sorry interface with the server and just

435
00:14:54,720 --> 00:14:55,980
like with any other client server

436
00:14:55,980 --> 00:14:58,019
communication that exchanges user input

437
00:14:58,019 --> 00:15:01,079
always trust but verify the data

438
00:15:01,079 --> 00:15:02,820
so let's talk about how the actual

439
00:15:02,820 --> 00:15:04,320
Runescape or RuneScape private server

440
00:15:04,320 --> 00:15:06,660
client Works under the hood so the game

441
00:15:06,660 --> 00:15:08,399
itself is a Java applet which is bound

442
00:15:08,399 --> 00:15:11,339
to a dream frame a jframe and the jframe

443
00:15:11,339 --> 00:15:13,139
itself is a container which contains all

444
00:15:13,139 --> 00:15:14,459
the interface components of the game so

445
00:15:14,459 --> 00:15:15,720
you like your health for example it

446
00:15:15,720 --> 00:15:19,260
draws the Sprites in it and so here is

447
00:15:19,260 --> 00:15:21,600
an ex and last but not least

448
00:15:21,600 --> 00:15:24,000
um the jframe is also able to receive

449
00:15:24,000 --> 00:15:25,860
events such as like Mouse clicks or

450
00:15:25,860 --> 00:15:28,440
keyboard input and so here's an example

451
00:15:28,440 --> 00:15:30,120
of how it may work under the hood at a

452
00:15:30,120 --> 00:15:32,040
very simplified level So within the

453
00:15:32,040 --> 00:15:33,660
client I want to equip an item so in

454
00:15:33,660 --> 00:15:35,579
this case the Santa hat and what happens

455
00:15:35,579 --> 00:15:37,380
is that a listener is invoked when I

456
00:15:37,380 --> 00:15:39,420
click it which then processes the action

457
00:15:39,420 --> 00:15:41,100
it checks hey what action do you want to

458
00:15:41,100 --> 00:15:43,260
process each action has a code

459
00:15:43,260 --> 00:15:46,079
associated with it an integer so in this

460
00:15:46,079 --> 00:15:47,459
case it's going to be a quip item and

461
00:15:47,459 --> 00:15:48,540
then it's going to run a series of

462
00:15:48,540 --> 00:15:50,579
checks first it's going to say okay if

463
00:15:50,579 --> 00:15:51,600
you want to equip the item we'll remove

464
00:15:51,600 --> 00:15:52,980
your item from the inventory and then

465
00:15:52,980 --> 00:15:54,180
we'll update your the player's

466
00:15:54,180 --> 00:15:56,279
appearance to show the equipped item

467
00:15:56,279 --> 00:15:57,779
what's actually happening is before

468
00:15:57,779 --> 00:15:59,459
these checks are ran

469
00:15:59,459 --> 00:16:01,019
the

470
00:16:01,019 --> 00:16:03,120
client sends a packet to the server and

471
00:16:03,120 --> 00:16:04,920
this is how the package structure looks

472
00:16:04,920 --> 00:16:07,440
like so the first value here is the op

473
00:16:07,440 --> 00:16:10,440
code so opcode 41 means equip item the

474
00:16:10,440 --> 00:16:13,019
second value is the item ID so what item

475
00:16:13,019 --> 00:16:14,699
do you want to equip so in this case the

476
00:16:14,699 --> 00:16:16,920
item id you may see it here it says

477
00:16:16,920 --> 00:16:20,459
1050. right there and then the last two

478
00:16:20,459 --> 00:16:21,839
values are not important it's just

479
00:16:21,839 --> 00:16:23,279
basically the interface ID you can

480
00:16:23,279 --> 00:16:24,839
ignore them and what happens is the

481
00:16:24,839 --> 00:16:27,120
server receives that packet it then says

482
00:16:27,120 --> 00:16:28,560
okay the player wants to equip the item

483
00:16:28,560 --> 00:16:30,300
cool so then we're going to perform some

484
00:16:30,300 --> 00:16:31,740
checks does the player have an item in

485
00:16:31,740 --> 00:16:33,779
the inventory

486
00:16:33,779 --> 00:16:35,459
um Can the player wear the item like you

487
00:16:35,459 --> 00:16:36,779
know maybe there's some stats associated

488
00:16:36,779 --> 00:16:38,040
with the item that the player may need

489
00:16:38,040 --> 00:16:40,019
like requirements and if so okay cool

490
00:16:40,019 --> 00:16:42,000
let's send the packet back to the client

491
00:16:42,000 --> 00:16:44,519
telling everything is okay and now we'll

492
00:16:44,519 --> 00:16:46,860
um update every other player to show

493
00:16:46,860 --> 00:16:50,060
that you've equipped the item

494
00:16:53,759 --> 00:16:55,440
so let's talk about some of the layers

495
00:16:55,440 --> 00:16:56,940
that we'll be writing about for so we'll

496
00:16:56,940 --> 00:16:58,620
be writing a bot for each of these

497
00:16:58,620 --> 00:17:01,139
layers today so you may have heard the

498
00:17:01,139 --> 00:17:02,339
term if you're familiar with game

499
00:17:02,339 --> 00:17:04,140
hacking uh you may have turned heard the

500
00:17:04,140 --> 00:17:05,880
terms of external and internal in the

501
00:17:05,880 --> 00:17:07,799
context of C plus plus game hacking it's

502
00:17:07,799 --> 00:17:09,839
not the same here as in like using right

503
00:17:09,839 --> 00:17:11,640
process memory read process memory for

504
00:17:11,640 --> 00:17:13,919
external or injecting a dll for internal

505
00:17:13,919 --> 00:17:16,619
but rather what external is is we'll

506
00:17:16,619 --> 00:17:18,540
we'll explore each of these Avenues but

507
00:17:18,540 --> 00:17:19,919
just understand that we'll be working on

508
00:17:19,919 --> 00:17:21,839
three layers so let's actually start

509
00:17:21,839 --> 00:17:23,819
with the last layer which is um the

510
00:17:23,819 --> 00:17:27,419
packet okay the network layer so this

511
00:17:27,419 --> 00:17:29,280
bot will be known as a headless spot so

512
00:17:29,280 --> 00:17:30,840
let's kind of talk about what that means

513
00:17:30,840 --> 00:17:32,700
so a headless spot doesn't have a

514
00:17:32,700 --> 00:17:34,440
graphical user interface

515
00:17:34,440 --> 00:17:36,720
um and because of that it's able to run

516
00:17:36,720 --> 00:17:37,980
on machines that are lacking desktop

517
00:17:37,980 --> 00:17:39,660
environments and typically these

518
00:17:39,660 --> 00:17:41,160
machines are like

519
00:17:41,160 --> 00:17:42,660
um Ubuntu servers you know Windows

520
00:17:42,660 --> 00:17:44,880
servers and due to having no desktop

521
00:17:44,880 --> 00:17:46,799
environment and no graphical user

522
00:17:46,799 --> 00:17:48,419
interface this will actually conserve

523
00:17:48,419 --> 00:17:50,460
resources even if it's a one percent

524
00:17:50,460 --> 00:17:52,440
performance Improvement you have to

525
00:17:52,440 --> 00:17:53,700
remember that majority of people who

526
00:17:53,700 --> 00:17:55,500
write Bots are typically using it to

527
00:17:55,500 --> 00:17:57,120
make like money and they're known as

528
00:17:57,120 --> 00:17:59,340
gold Farmers so and that means they're

529
00:17:59,340 --> 00:18:01,919
running like maybe thousands if not tens

530
00:18:01,919 --> 00:18:03,539
of thousands of bots so if you

531
00:18:03,539 --> 00:18:05,160
extrapolate a one percent performance

532
00:18:05,160 --> 00:18:07,260
increase across you know several

533
00:18:07,260 --> 00:18:09,720
thousands of bots it can actually make a

534
00:18:09,720 --> 00:18:11,039
big impact

535
00:18:11,039 --> 00:18:12,780
the one thing about writing headless

536
00:18:12,780 --> 00:18:15,480
spots or network is that you need to

537
00:18:15,480 --> 00:18:17,520
have extensive knowledge about how the

538
00:18:17,520 --> 00:18:20,640
client operates under the hood so for

539
00:18:20,640 --> 00:18:23,520
example if the server sends you a packet

540
00:18:23,520 --> 00:18:25,679
of 41 do you know what that means and

541
00:18:25,679 --> 00:18:27,419
you really need to understand what's

542
00:18:27,419 --> 00:18:30,660
going on and one of the Beauties though

543
00:18:30,660 --> 00:18:32,700
is that you can write this in other

544
00:18:32,700 --> 00:18:34,380
languages so it's interoperable since

545
00:18:34,380 --> 00:18:36,240
you're working at such a low level like

546
00:18:36,240 --> 00:18:37,679
you're working literally with bytes at

547
00:18:37,679 --> 00:18:38,700
this point you can write it in any

548
00:18:38,700 --> 00:18:40,620
language you want and to prove this

549
00:18:40,620 --> 00:18:42,360
let's

550
00:18:42,360 --> 00:18:44,280
um actually before that here's how you

551
00:18:44,280 --> 00:18:46,679
would originally log in using the client

552
00:18:46,679 --> 00:18:48,539
or the graphical universe so notice that

553
00:18:48,539 --> 00:18:50,460
first you click there then you type in

554
00:18:50,460 --> 00:18:52,260
your username and your password and then

555
00:18:52,260 --> 00:18:54,419
you click login so this can be

556
00:18:54,419 --> 00:18:56,100
considered very manual and tedious if

557
00:18:56,100 --> 00:18:57,660
you're trying to run thousands and

558
00:18:57,660 --> 00:18:59,940
thousands of bots and the reason for

559
00:18:59,940 --> 00:19:01,620
this is first and foremost is that copy

560
00:19:01,620 --> 00:19:03,120
and paste is disabled so you're not just

561
00:19:03,120 --> 00:19:04,740
able to copy username and password and

562
00:19:04,740 --> 00:19:06,660
you have to click twice as you've seen

563
00:19:06,660 --> 00:19:08,580
and one of the other things that we'll

564
00:19:08,580 --> 00:19:10,559
talk about is that the client in this

565
00:19:10,559 --> 00:19:12,240
case like I said it has constraints and

566
00:19:12,240 --> 00:19:13,140
you're not able to use special

567
00:19:13,140 --> 00:19:15,299
characters apart from alphanumeric which

568
00:19:15,299 --> 00:19:16,919
are forbidden and this will become

569
00:19:16,919 --> 00:19:18,900
important in um

570
00:19:18,900 --> 00:19:21,980
the next slide

571
00:19:23,760 --> 00:19:26,039
foreign

572
00:19:26,039 --> 00:19:28,980
so let's see what's happening so we just

573
00:19:28,980 --> 00:19:30,480
saw the login happen this is what's

574
00:19:30,480 --> 00:19:32,220
actually happening under the hood so in

575
00:19:32,220 --> 00:19:33,660
red are the packets that the clients

576
00:19:33,660 --> 00:19:35,280
knows and in blue are what the server

577
00:19:35,280 --> 00:19:37,740
sends so you see that the client sends

578
00:19:37,740 --> 00:19:40,919
um I think in 140x0e

579
00:19:40,919 --> 00:19:42,660
um basically telling the client it's

580
00:19:42,660 --> 00:19:45,059
like a magic buy to start the handshake

581
00:19:45,059 --> 00:19:47,280
and then the server sends back a

582
00:19:47,280 --> 00:19:48,960
sequence of bytes and this is the server

583
00:19:48,960 --> 00:19:51,000
key and then finally the client sends

584
00:19:51,000 --> 00:19:54,059
back a large buffer and finally the

585
00:19:54,059 --> 00:19:56,280
server sends back a response and one

586
00:19:56,280 --> 00:19:59,580
thing you should notice about this um

587
00:19:59,580 --> 00:20:01,700
large buffer uh you may not see it yeah

588
00:20:01,700 --> 00:20:04,799
the big buffer right here is that there

589
00:20:04,799 --> 00:20:06,240
is no

590
00:20:06,240 --> 00:20:08,220
um you don't see my plain text username

591
00:20:08,220 --> 00:20:09,840
or my plain text password so my username

592
00:20:09,840 --> 00:20:11,640
was maximum my password is maximum you

593
00:20:11,640 --> 00:20:13,559
don't see that here and that means that

594
00:20:13,559 --> 00:20:15,840
something some form of encoding is

595
00:20:15,840 --> 00:20:17,280
happening under the hood so that can

596
00:20:17,280 --> 00:20:19,380
either be compression can be encryption

597
00:20:19,380 --> 00:20:20,820
could be both could be something

598
00:20:20,820 --> 00:20:22,559
entirely else

599
00:20:22,559 --> 00:20:25,080
um in a lot of cases um for games like

600
00:20:25,080 --> 00:20:26,400
this login handshake is already

601
00:20:26,400 --> 00:20:27,840
documented by people who've already

602
00:20:27,840 --> 00:20:31,080
reversed it and if not

603
00:20:31,080 --> 00:20:32,400
um just take a look at yourself as

604
00:20:32,400 --> 00:20:34,559
what's happening in the code so we'll

605
00:20:34,559 --> 00:20:35,880
see the code here on the left don't

606
00:20:35,880 --> 00:20:37,200
worry if you can't read it it's not

607
00:20:37,200 --> 00:20:38,460
supposed to be read

608
00:20:38,460 --> 00:20:42,740
um but rather what's happening is that

609
00:20:42,780 --> 00:20:45,660
um the TCP TCP is used as a transport

610
00:20:45,660 --> 00:20:47,340
mechanism to send data between a client

611
00:20:47,340 --> 00:20:48,660
and server

612
00:20:48,660 --> 00:20:50,640
um Isaac is actually the cipher used for

613
00:20:50,640 --> 00:20:53,160
encryption and if you don't know what um

614
00:20:53,160 --> 00:20:55,260
Isaac is

615
00:20:55,260 --> 00:20:58,260
sorry

616
00:21:09,260 --> 00:21:12,299
so sorry as I was saying Isaac has used

617
00:21:12,299 --> 00:21:13,799
the encryption Cipher and the way it

618
00:21:13,799 --> 00:21:15,480
works is that the cipher is seated with

619
00:21:15,480 --> 00:21:17,100
a combination of random values generated

620
00:21:17,100 --> 00:21:19,620
by the client and it's concatenated with

621
00:21:19,620 --> 00:21:21,960
this server key that's sent back by the

622
00:21:21,960 --> 00:21:24,059
server in the original handshake and

623
00:21:24,059 --> 00:21:26,340
then the seed and the credentials so my

624
00:21:26,340 --> 00:21:27,600
username and password are exchanged

625
00:21:27,600 --> 00:21:30,240
using RSA and then

626
00:21:30,240 --> 00:21:32,580
um between a client and server but as I

627
00:21:32,580 --> 00:21:33,960
mentioned Isaac is usually encryption

628
00:21:33,960 --> 00:21:36,120
Cipher so where does RSA come in so

629
00:21:36,120 --> 00:21:38,520
stream ciphers such as Isaac are

630
00:21:38,520 --> 00:21:40,500
typically way quicker than something

631
00:21:40,500 --> 00:21:42,120
like RSA which is compute heavy

632
00:21:42,120 --> 00:21:43,440
especially if you're having high data

633
00:21:43,440 --> 00:21:45,840
throughput so if this handshake looks

634
00:21:45,840 --> 00:21:47,220
familiar it should because this is

635
00:21:47,220 --> 00:21:49,320
actually how TLS Works under the hood so

636
00:21:49,320 --> 00:21:51,240
the way TLS works is essentially once

637
00:21:51,240 --> 00:21:53,820
the client so the client will use RSA to

638
00:21:53,820 --> 00:21:56,520
send the server an encrypt a random

639
00:21:56,520 --> 00:21:58,679
value using the server's public key it

640
00:21:58,679 --> 00:22:00,659
will send that value to the server the

641
00:22:00,659 --> 00:22:03,059
server will then decrypt that value and

642
00:22:03,059 --> 00:22:05,580
then finally it will um

643
00:22:05,580 --> 00:22:07,520
then they will switch to another

644
00:22:07,520 --> 00:22:09,720
encryption algorithm that's the stream

645
00:22:09,720 --> 00:22:11,580
Cipher most likely AAS and then they'll

646
00:22:11,580 --> 00:22:13,320
be able to encrypt uh and send data back

647
00:22:13,320 --> 00:22:16,039
and forth to each other

648
00:22:16,500 --> 00:22:19,020
so like I mentioned

649
00:22:19,020 --> 00:22:19,860
um

650
00:22:19,860 --> 00:22:22,740
we're able now to basically write this

651
00:22:22,740 --> 00:22:24,480
login handshake in any language and

652
00:22:24,480 --> 00:22:25,740
something that can come out of this is

653
00:22:25,740 --> 00:22:27,240
actually a login brute forcer for

654
00:22:27,240 --> 00:22:28,320
example so that's one of the security

655
00:22:28,320 --> 00:22:32,340
impacts so here I'll play the video

656
00:22:32,340 --> 00:22:35,480
so basically what I did is I

657
00:22:35,480 --> 00:22:38,340
re-implemented the logic and golang and

658
00:22:38,340 --> 00:22:40,200
so you can see here basically I'm just

659
00:22:40,200 --> 00:22:41,460
quickly scrolling through the code and

660
00:22:41,460 --> 00:22:43,320
again it's you're not really meant to

661
00:22:43,320 --> 00:22:45,120
read and understand the code basically

662
00:22:45,120 --> 00:22:47,159
what it shows it sends a login request

663
00:22:47,159 --> 00:22:48,360
one of the most important things that

664
00:22:48,360 --> 00:22:50,460
I'll highlight here is showing I'm using

665
00:22:50,460 --> 00:22:51,720
the server seats so one of the things

666
00:22:51,720 --> 00:22:52,919
that I know is that this server in

667
00:22:52,919 --> 00:22:54,720
particular did was that it never

668
00:22:54,720 --> 00:22:56,520
verified that this the server CD sent it

669
00:22:56,520 --> 00:22:57,780
is the one that it sent you it's not

670
00:22:57,780 --> 00:22:59,280
really a security impact it was just

671
00:22:59,280 --> 00:23:00,480
kind of interesting it makes it way

672
00:23:00,480 --> 00:23:03,120
easier to write this so essentially what

673
00:23:03,120 --> 00:23:04,559
this is happening is now it's going to

674
00:23:04,559 --> 00:23:07,679
try a username and passwords and try to

675
00:23:07,679 --> 00:23:09,059
Brute Force accounts and one thing is

676
00:23:09,059 --> 00:23:10,860
look in the bottom left corner and the

677
00:23:10,860 --> 00:23:12,179
reason I say this is because if it's

678
00:23:12,179 --> 00:23:14,280
login is successful you'll see it say

679
00:23:14,280 --> 00:23:16,740
player has logged in so let's try so

680
00:23:16,740 --> 00:23:18,179
it's attempting to use the credentials

681
00:23:18,179 --> 00:23:20,460
Sparkle 7 Sparkle gem 79 with the

682
00:23:20,460 --> 00:23:21,960
password maximum and if you look in the

683
00:23:21,960 --> 00:23:23,400
bottom left it says a player has logged

684
00:23:23,400 --> 00:23:25,200
in and therefore you know we know it's

685
00:23:25,200 --> 00:23:27,059
valid credentials and it keeps going

686
00:23:27,059 --> 00:23:29,580
through until it eventually finds it

687
00:23:29,580 --> 00:23:32,460
exhausts the word list

688
00:23:32,460 --> 00:23:34,460
foreign

689
00:23:34,460 --> 00:23:36,360
another thing you could write with this

690
00:23:36,360 --> 00:23:38,400
is a server is a server flutter so

691
00:23:38,400 --> 00:23:40,140
essentially you can um

692
00:23:40,140 --> 00:23:42,840
you know flood the server with a bunch

693
00:23:42,840 --> 00:23:44,760
of arbitrary logins and fill up the

694
00:23:44,760 --> 00:23:47,100
queue and prevent legitimate uh players

695
00:23:47,100 --> 00:23:48,480
from logging in and as I mentioned

696
00:23:48,480 --> 00:23:50,700
earlier you're now able to send the

697
00:23:50,700 --> 00:23:52,559
server unexpected data so for example

698
00:23:52,559 --> 00:23:54,000
the client didn't allow you to use Alpha

699
00:23:54,000 --> 00:23:56,460
numerical characters in your name well

700
00:23:56,460 --> 00:23:57,960
using this way we're able to send a

701
00:23:57,960 --> 00:23:59,340
server whatever we want and what if

702
00:23:59,340 --> 00:24:00,620
during the login

703
00:24:00,620 --> 00:24:02,880
process there's a bunch of SQL

704
00:24:02,880 --> 00:24:04,260
transactions happening under the hood

705
00:24:04,260 --> 00:24:07,620
well if there is no you know form of SQL

706
00:24:07,620 --> 00:24:09,360
injection protection implemented you're

707
00:24:09,360 --> 00:24:10,919
now able to you know potentially

708
00:24:10,919 --> 00:24:13,880
leverage something like SQL injection

709
00:24:13,880 --> 00:24:17,100
or another use case is for example now

710
00:24:17,100 --> 00:24:19,559
what if you send the server unexpected

711
00:24:19,559 --> 00:24:21,120
data that doesn't know how to deal with

712
00:24:21,120 --> 00:24:23,400
this can result in a layer 7 denial of

713
00:24:23,400 --> 00:24:25,679
service essentially crashing the server

714
00:24:25,679 --> 00:24:28,320
I'm sorry I didn't looks like every time

715
00:24:28,320 --> 00:24:31,158
I go into full screen

716
00:24:33,960 --> 00:24:35,400
cool

717
00:24:35,400 --> 00:24:37,260
um let's move on to internal Bots

718
00:24:37,260 --> 00:24:40,919
um so internal Bots are really achieved

719
00:24:40,919 --> 00:24:42,419
using reflection injection and a

720
00:24:42,419 --> 00:24:43,860
combination of both which is why I

721
00:24:43,860 --> 00:24:46,500
showed you a quick tldr of each in the

722
00:24:46,500 --> 00:24:48,059
earlier slides

723
00:24:48,059 --> 00:24:49,679
um the cool thing about internal Bots it

724
00:24:49,679 --> 00:24:51,480
saves you a lot of time because you're

725
00:24:51,480 --> 00:24:52,919
able to reuse existing code like I

726
00:24:52,919 --> 00:24:55,740
mentioned earlier like with a packet bot

727
00:24:55,740 --> 00:24:57,299
or like one that works at the network

728
00:24:57,299 --> 00:24:59,220
layer you really need to know what's

729
00:24:59,220 --> 00:25:00,600
happening between the client and server

730
00:25:00,600 --> 00:25:02,400
well in this case you're just able to

731
00:25:02,400 --> 00:25:03,960
reuse existing code and see what's

732
00:25:03,960 --> 00:25:07,679
happening and typically this using

733
00:25:07,679 --> 00:25:10,200
um this is the most popular form of Bot

734
00:25:10,200 --> 00:25:11,760
written for Java Games because of the

735
00:25:11,760 --> 00:25:14,360
reasons above

736
00:25:16,020 --> 00:25:19,020
foreign

737
00:25:21,320 --> 00:25:23,039
so

738
00:25:23,039 --> 00:25:25,260
let's talk about what client.java is so

739
00:25:25,260 --> 00:25:26,880
a lot of RuneScape drivers follow very

740
00:25:26,880 --> 00:25:28,320
similar boilerplate

741
00:25:28,320 --> 00:25:29,520
um and the reason for that is because

742
00:25:29,520 --> 00:25:31,620
the majority of people who write these

743
00:25:31,620 --> 00:25:33,840
servers their whole intention

744
00:25:33,840 --> 00:25:35,820
is to

745
00:25:35,820 --> 00:25:37,460
my apologies

746
00:25:37,460 --> 00:25:40,140
their whole intention is not to really

747
00:25:40,140 --> 00:25:42,659
because the game itself works well so

748
00:25:42,659 --> 00:25:43,740
really what they're trying to do is add

749
00:25:43,740 --> 00:25:45,179
custom contents you're not really trying

750
00:25:45,179 --> 00:25:46,799
to change anything under the hood so

751
00:25:46,799 --> 00:25:48,179
you'll find the majority of servers will

752
00:25:48,179 --> 00:25:49,760
follow the same boilerplate and

753
00:25:49,760 --> 00:25:52,260
decline.java itself is you can think of

754
00:25:52,260 --> 00:25:53,820
it as a centralized component that works

755
00:25:53,820 --> 00:25:56,159
as a controller and what you'll see to

756
00:25:56,159 --> 00:25:58,980
the left here is a bunch of values

757
00:25:58,980 --> 00:26:02,159
declared that hold references to objects

758
00:26:02,159 --> 00:26:03,419
of Interest especially if you're writing

759
00:26:03,419 --> 00:26:05,340
a bot so to the instance of your local

760
00:26:05,340 --> 00:26:06,720
player

761
00:26:06,720 --> 00:26:09,360
um NPCs other player instances as well

762
00:26:09,360 --> 00:26:10,500
as like The Current player's location

763
00:26:10,500 --> 00:26:13,500
and so on and the client class itself

764
00:26:13,500 --> 00:26:15,600
inherits from the game apply class which

765
00:26:15,600 --> 00:26:16,919
you can see right here on the first line

766
00:26:16,919 --> 00:26:19,320
extends game applet which in turn

767
00:26:19,320 --> 00:26:21,419
inherits from the Apple class so the

768
00:26:21,419 --> 00:26:23,340
client is able to be cast as an applet

769
00:26:23,340 --> 00:26:25,020
and if you're not really from familiar

770
00:26:25,020 --> 00:26:26,880
with I just said don't worry about it it

771
00:26:26,880 --> 00:26:28,320
doesn't make a big difference until you

772
00:26:28,320 --> 00:26:30,419
actually start writing the bot

773
00:26:30,419 --> 00:26:32,159
so let me show you how we'll use

774
00:26:32,159 --> 00:26:34,380
reflection to

775
00:26:34,380 --> 00:26:35,220
um

776
00:26:35,220 --> 00:26:37,799
right to the spot so first and foremost

777
00:26:37,799 --> 00:26:39,240
we have to discover how the real client

778
00:26:39,240 --> 00:26:41,400
is scaffolded and what that means is how

779
00:26:41,400 --> 00:26:43,320
it's built so in red you'll see here it

780
00:26:43,320 --> 00:26:44,760
says original client which means this is

781
00:26:44,760 --> 00:26:46,679
the code from the original client so

782
00:26:46,679 --> 00:26:48,240
well first and foremost we need to find

783
00:26:48,240 --> 00:26:49,860
the main method which is invoked

784
00:26:49,860 --> 00:26:52,620
whenever a Java program is started so we

785
00:26:52,620 --> 00:26:55,020
see what happens and through context

786
00:26:55,020 --> 00:26:56,340
this main method actually lives in

787
00:26:56,340 --> 00:26:57,900
client.java which is why I mentioned

788
00:26:57,900 --> 00:27:00,440
it's such a vital aspect of this whole

789
00:27:00,440 --> 00:27:03,360
process so you'll see the first things

790
00:27:03,360 --> 00:27:05,880
that happen is that we assign a value of

791
00:27:05,880 --> 00:27:08,220
10 or sorry we initialize the node ID

792
00:27:08,220 --> 00:27:10,440
field as a value of 10 pour it offset

793
00:27:10,440 --> 00:27:12,900
zero this none of it's important and you

794
00:27:12,900 --> 00:27:14,820
know essentially you see a call well

795
00:27:14,820 --> 00:27:15,900
it's important if you're writing the bot

796
00:27:15,900 --> 00:27:18,600
it's not important in this case it calls

797
00:27:18,600 --> 00:27:20,220
a method and then you know it further

798
00:27:20,220 --> 00:27:22,260
goes on and finally and instantiates a

799
00:27:22,260 --> 00:27:24,260
new instance with the client and then

800
00:27:24,260 --> 00:27:26,700
lastly it invokes the create client

801
00:27:26,700 --> 00:27:28,320
frame method passing in the frame width

802
00:27:28,320 --> 00:27:32,700
and frame height on the instance and

803
00:27:32,700 --> 00:27:34,679
the reason this is important is because

804
00:27:34,679 --> 00:27:36,240
we'll need to replicate this process

805
00:27:36,240 --> 00:27:37,980
using reflection so let me show you how

806
00:27:37,980 --> 00:27:39,960
that would look using reflection so this

807
00:27:39,960 --> 00:27:42,299
is our reflect decline as denoted by the

808
00:27:42,299 --> 00:27:45,720
green text here so first we get an ins

809
00:27:45,720 --> 00:27:47,880
we get the client class from the class

810
00:27:47,880 --> 00:27:51,480
loader we then grab the Constructor from

811
00:27:51,480 --> 00:27:54,179
this class and the Constructor is the

812
00:27:54,179 --> 00:27:56,039
method that's executed when you

813
00:27:56,039 --> 00:27:58,679
instantiate a new object in Java and

814
00:27:58,679 --> 00:28:00,480
what we do is we instantiate the applet

815
00:28:00,480 --> 00:28:02,279
whenever you use reflection to

816
00:28:02,279 --> 00:28:03,900
instantiate an object or get a value

817
00:28:03,900 --> 00:28:06,000
it'll always return the object of type

818
00:28:06,000 --> 00:28:09,120
of type object which is a generic object

819
00:28:09,120 --> 00:28:11,039
in Java in which every

820
00:28:11,039 --> 00:28:12,659
um

821
00:28:12,659 --> 00:28:15,120
object I keep saying object I'm sorry um

822
00:28:15,120 --> 00:28:18,840
inherits from and we then cast it as an

823
00:28:18,840 --> 00:28:19,860
applet

824
00:28:19,860 --> 00:28:21,600
because if we never casted it it would

825
00:28:21,600 --> 00:28:22,740
just treat it as an object and we

826
00:28:22,740 --> 00:28:24,360
wouldn't be able to have all the methods

827
00:28:24,360 --> 00:28:26,640
that the typical applet would have and

828
00:28:26,640 --> 00:28:28,559
lastly like I shown you earlier you can

829
00:28:28,559 --> 00:28:30,900
see the node ID set to 10 here well this

830
00:28:30,900 --> 00:28:32,400
is how we would do it in reflection we

831
00:28:32,400 --> 00:28:33,720
use reflection to get the node ID

832
00:28:33,720 --> 00:28:36,120
declared field we set it accessible to

833
00:28:36,120 --> 00:28:38,760
true if it's private I don't remember if

834
00:28:38,760 --> 00:28:39,840
it's private in this case it doesn't

835
00:28:39,840 --> 00:28:41,640
make a difference if it is and you just

836
00:28:41,640 --> 00:28:43,500
call it and then finally we set the

837
00:28:43,500 --> 00:28:45,720
value you see 10 and the first argument

838
00:28:45,720 --> 00:28:47,640
we passed in is actually the class

839
00:28:47,640 --> 00:28:49,919
itself and then we do the same thing

840
00:28:49,919 --> 00:28:52,200
with the port and so on so you can if

841
00:28:52,200 --> 00:28:53,940
you look back and forth it's basically

842
00:28:53,940 --> 00:28:55,799
we're doing everything the same up to

843
00:28:55,799 --> 00:28:56,820
here

844
00:28:56,820 --> 00:28:58,200
this part

845
00:28:58,200 --> 00:29:00,480
so now let's examine how this part Works

846
00:29:00,480 --> 00:29:02,520
line tens and 11.

847
00:29:02,520 --> 00:29:03,900
so

848
00:29:03,900 --> 00:29:05,940
um line 10 calls create client frame and

849
00:29:05,940 --> 00:29:07,799
the create client frame method lives in

850
00:29:07,799 --> 00:29:09,059
the game applet class and the game

851
00:29:09,059 --> 00:29:10,440
applet extends the applet like I

852
00:29:10,440 --> 00:29:11,700
mentioned earlier so it inherits from

853
00:29:11,700 --> 00:29:13,320
applet and you see it implements a bunch

854
00:29:13,320 --> 00:29:14,940
of interfaces such as like Mouse motion

855
00:29:14,940 --> 00:29:17,340
listener Mouse wheel listener and this

856
00:29:17,340 --> 00:29:19,260
is what allows you this is what allows

857
00:29:19,260 --> 00:29:20,580
you to receive events so if you click

858
00:29:20,580 --> 00:29:22,140
something in the game you're invoking

859
00:29:22,140 --> 00:29:24,179
the mouse listener for example or if you

860
00:29:24,179 --> 00:29:25,260
move your mouse you're invoking the

861
00:29:25,260 --> 00:29:27,120
mouse motion listener so that's why it

862
00:29:27,120 --> 00:29:28,500
does it so let's see how the create

863
00:29:28,500 --> 00:29:30,360
client Frame Works so again it does

864
00:29:30,360 --> 00:29:31,740
similar stuff it assigns a bunch of

865
00:29:31,740 --> 00:29:33,600
values or initializes a bunch of values

866
00:29:33,600 --> 00:29:35,399
but once one important thing what it

867
00:29:35,399 --> 00:29:37,620
does is it instantiates a new game frame

868
00:29:37,620 --> 00:29:40,159
and let's look at this game frame class

869
00:29:40,159 --> 00:29:43,559
so the game frame extends inherits from

870
00:29:43,559 --> 00:29:46,200
the frame so this is itself a J frame an

871
00:29:46,200 --> 00:29:48,600
extension of A J frame and first thing

872
00:29:48,600 --> 00:29:50,640
it does is initializes the applet it

873
00:29:50,640 --> 00:29:52,260
then sets the title of the frame of

874
00:29:52,260 --> 00:29:53,580
whatever is defined in the configuration

875
00:29:53,580 --> 00:29:55,919
file it sets the resizable it's that's

876
00:29:55,919 --> 00:29:57,419
whether it could be full screen and then

877
00:29:57,419 --> 00:29:59,340
finally it said visible is true so you

878
00:29:59,340 --> 00:30:01,380
can actually see the frame

879
00:30:01,380 --> 00:30:04,020
so now let's see how we would do this in

880
00:30:04,020 --> 00:30:06,360
reflection so what we need to do is use

881
00:30:06,360 --> 00:30:08,399
reflection to get the create client

882
00:30:08,399 --> 00:30:11,520
frame method and then what we do is we

883
00:30:11,520 --> 00:30:14,100
invoke it on the applet that we

884
00:30:14,100 --> 00:30:15,899
instantiated earlier

885
00:30:15,899 --> 00:30:18,960
and one of the interesting things what

886
00:30:18,960 --> 00:30:20,580
we could do is now that we can access

887
00:30:20,580 --> 00:30:23,220
the game frame field from the client and

888
00:30:23,220 --> 00:30:24,960
what we do here is you see we use

889
00:30:24,960 --> 00:30:26,940
reflection to grab an instance of it and

890
00:30:26,940 --> 00:30:29,880
we set the title of the frame to besides

891
00:30:29,880 --> 00:30:34,279
2023 demo reflection client and

892
00:30:45,659 --> 00:30:51,059
exactly so that means that uh this boat

893
00:30:51,059 --> 00:30:53,640
will be shown as an object or it will

894
00:30:53,640 --> 00:30:56,760
still beard on at the console so you you

895
00:30:56,760 --> 00:31:00,679
can run on a system with no uh GUI

896
00:31:00,679 --> 00:31:03,240
interface now so

897
00:31:03,240 --> 00:31:04,980
um that's a good question and I should

898
00:31:04,980 --> 00:31:08,039
have mentioned this is so this will

899
00:31:08,039 --> 00:31:10,860
actually invoke the GUI so what we do is

900
00:31:10,860 --> 00:31:12,360
we take over the GUI and now we have

901
00:31:12,360 --> 00:31:13,980
full control over the GUI so this is you

902
00:31:13,980 --> 00:31:15,360
playing with the GUI and when I mean

903
00:31:15,360 --> 00:31:16,740
internal basically it means you can

904
00:31:16,740 --> 00:31:18,179
access the internal code that the client

905
00:31:18,179 --> 00:31:20,159
encapsulates so if the client has like a

906
00:31:20,159 --> 00:31:21,600
method you want to call you're now able

907
00:31:21,600 --> 00:31:22,740
to do that because before when you click

908
00:31:22,740 --> 00:31:24,779
the GUI it locks you out like the GUI

909
00:31:24,779 --> 00:31:26,399
runs and you can just only you know play

910
00:31:26,399 --> 00:31:27,899
with it as a game now we have full

911
00:31:27,899 --> 00:31:30,600
control of it okay okay thanks thank you

912
00:31:30,600 --> 00:31:32,940
for the question so like I said we set

913
00:31:32,940 --> 00:31:35,520
the title and if this is successful

914
00:31:35,520 --> 00:31:37,380
now you see the client load and now it

915
00:31:37,380 --> 00:31:39,600
has B size 2023 demo reflection client

916
00:31:39,600 --> 00:31:41,159
as the title

917
00:31:41,159 --> 00:31:43,320
so with the applet now under our control

918
00:31:43,320 --> 00:31:45,179
we can now achieve the following things

919
00:31:45,179 --> 00:31:46,919
so first and foremost one of the most

920
00:31:46,919 --> 00:31:48,360
important things for a bot is that we

921
00:31:48,360 --> 00:31:49,799
can read and modify values that will

922
00:31:49,799 --> 00:31:51,240
influence gameplay and what I mean

923
00:31:51,240 --> 00:31:53,100
influence gameplay for example now we

924
00:31:53,100 --> 00:31:54,720
can read our health you know if our

925
00:31:54,720 --> 00:31:56,039
health is lower than a specific

926
00:31:56,039 --> 00:31:58,679
threshold we set we can now you know eat

927
00:31:58,679 --> 00:32:00,419
food or drink a potion whatever the case

928
00:32:00,419 --> 00:32:02,039
may be if we're fighting a monster now

929
00:32:02,039 --> 00:32:03,779
we can see hey we're finding a monster

930
00:32:03,779 --> 00:32:05,760
what's the monster's you know Health

931
00:32:05,760 --> 00:32:07,799
level and stuff like that we're able to

932
00:32:07,799 --> 00:32:09,480
call existing logic Define in the code

933
00:32:09,480 --> 00:32:11,159
so there's several helpers spread

934
00:32:11,159 --> 00:32:13,080
throughout this project throughout the

935
00:32:13,080 --> 00:32:14,820
code base such as like the send packet

936
00:32:14,820 --> 00:32:16,860
method which basically does exactly the

937
00:32:16,860 --> 00:32:18,960
same as our internal batas but at a

938
00:32:18,960 --> 00:32:20,940
higher level so now instead of having to

939
00:32:20,940 --> 00:32:22,740
send raw bytes we can now call helper

940
00:32:22,740 --> 00:32:25,260
with some predefined op codes that will

941
00:32:25,260 --> 00:32:26,760
be able to you know achieve the same

942
00:32:26,760 --> 00:32:27,840
thing and this is what I mentioned by

943
00:32:27,840 --> 00:32:31,639
reusing the code in the earlier slide

944
00:32:32,640 --> 00:32:34,440
um finally we can simulate interaction

945
00:32:34,440 --> 00:32:36,179
in the client such as sending Mouse

946
00:32:36,179 --> 00:32:38,820
events to mimic clicking or key events

947
00:32:38,820 --> 00:32:40,620
to mimic keyboard inputs and this is

948
00:32:40,620 --> 00:32:42,539
important for a bot because at this

949
00:32:42,539 --> 00:32:44,220
stage you have two ways to use the Bots

950
00:32:44,220 --> 00:32:45,799
you can still be sending packets

951
00:32:45,799 --> 00:32:48,659
throughout using the send packet method

952
00:32:48,659 --> 00:32:50,460
or you can be actually using Mouse

953
00:32:50,460 --> 00:32:52,860
events in Java to simulate clicks and

954
00:32:52,860 --> 00:32:55,320
whichever you use is up to you both of

955
00:32:55,320 --> 00:32:57,779
them may invoke some anti-cheat but

956
00:32:57,779 --> 00:32:59,940
again that's there's no anti-cheat in

957
00:32:59,940 --> 00:33:03,620
This Server so

958
00:33:05,340 --> 00:33:07,020
so let me show you some of the things we

959
00:33:07,020 --> 00:33:08,940
could do with reflection so here's a

960
00:33:08,940 --> 00:33:10,500
funny quote dance is a hidden language

961
00:33:10,500 --> 00:33:13,500
of the Soul and so what you'll see here

962
00:33:13,500 --> 00:33:16,260
is my client and my clip player and

963
00:33:16,260 --> 00:33:17,399
you'll see that here are some

964
00:33:17,399 --> 00:33:20,340
non-playable characters like NPCs and on

965
00:33:20,340 --> 00:33:22,200
the left here is a j shell and what that

966
00:33:22,200 --> 00:33:23,880
basically means is you can think of it

967
00:33:23,880 --> 00:33:26,039
as like a rebel or an idol like Python's

968
00:33:26,039 --> 00:33:28,980
Idol where or Ruby's IRB

969
00:33:28,980 --> 00:33:30,600
um we're basically able to execute code

970
00:33:30,600 --> 00:33:33,720
in the context of this and the way you

971
00:33:33,720 --> 00:33:35,100
get the J shell to work and this is not

972
00:33:35,100 --> 00:33:36,600
a scope for the talk is basically

973
00:33:36,600 --> 00:33:38,460
j-shell is launched into its own

974
00:33:38,460 --> 00:33:40,260
isolated process so you have to share

975
00:33:40,260 --> 00:33:42,419
the class loader and again if you're not

976
00:33:42,419 --> 00:33:43,860
really too sure what that means don't

977
00:33:43,860 --> 00:33:45,240
focus on it you can always look it up

978
00:33:45,240 --> 00:33:47,279
later in the bottom left here's the code

979
00:33:47,279 --> 00:33:48,299
that we're going to be executing so

980
00:33:48,299 --> 00:33:49,980
first we get the NPCs field which is

981
00:33:49,980 --> 00:33:51,720
defined in the client and you see that

982
00:33:51,720 --> 00:33:53,940
it's private and means it has the

983
00:33:53,940 --> 00:33:55,500
private modifier so then we call set

984
00:33:55,500 --> 00:33:58,140
accessible true on it

985
00:33:58,140 --> 00:34:01,380
cool and finally we get the actual NPCs

986
00:34:01,380 --> 00:34:03,120
themselves which returns an array of

987
00:34:03,120 --> 00:34:05,159
NPCs so you see a bunch of them are null

988
00:34:05,159 --> 00:34:06,419
because the array is a predefined size

989
00:34:06,419 --> 00:34:08,099
but some of you see some instances right

990
00:34:08,099 --> 00:34:09,418
here because these are these guys

991
00:34:09,418 --> 00:34:11,339
instances finally we'll iterate through

992
00:34:11,339 --> 00:34:14,099
each NPC and we'll set an animation and

993
00:34:14,099 --> 00:34:15,599
now you can we can make them all dance

994
00:34:15,599 --> 00:34:17,219
so we have like full control of the

995
00:34:17,219 --> 00:34:18,480
client

996
00:34:18,480 --> 00:34:21,320
um take a second walk

997
00:34:35,339 --> 00:34:37,980
so let me show you excuse me let me show

998
00:34:37,980 --> 00:34:39,780
you something else we can do so another

999
00:34:39,780 --> 00:34:41,879
quote the only way to do the impossible

1000
00:34:41,879 --> 00:34:44,040
is to believe it's impossible so in my

1001
00:34:44,040 --> 00:34:46,139
case I want to run through walls in the

1002
00:34:46,139 --> 00:34:47,460
game but the game doesn't allow me to

1003
00:34:47,460 --> 00:34:49,020
run through walls so anytime I click you

1004
00:34:49,020 --> 00:34:51,060
see it automatically pass me the uh like

1005
00:34:51,060 --> 00:34:54,179
across the wall and what we could do is

1006
00:34:54,179 --> 00:34:56,280
what we do very similar what we just did

1007
00:34:56,280 --> 00:34:58,619
in the last slide or is we grab the

1008
00:34:58,619 --> 00:35:00,900
Collision Maps we set them to accessible

1009
00:35:00,900 --> 00:35:02,880
because you can see that they're private

1010
00:35:02,880 --> 00:35:05,640
or sorry we grabbed the field and now we

1011
00:35:05,640 --> 00:35:07,020
actually grab the actual Collision map

1012
00:35:07,020 --> 00:35:08,760
so you can see it's an array of

1013
00:35:08,760 --> 00:35:10,680
initialized with the Collision maps and

1014
00:35:10,680 --> 00:35:12,060
we'll iterate through each Collision map

1015
00:35:12,060 --> 00:35:14,040
and we'll basically set it through zero

1016
00:35:14,040 --> 00:35:15,359
so now I'm able to know clip through

1017
00:35:15,359 --> 00:35:18,420
walls and if the server didn't have any

1018
00:35:18,420 --> 00:35:21,180
um logic that will validate your

1019
00:35:21,180 --> 00:35:22,500
location you would essentially be able

1020
00:35:22,500 --> 00:35:25,380
to no clip anywhere and um here I showed

1021
00:35:25,380 --> 00:35:27,000
that I'm able to no clip in an area

1022
00:35:27,000 --> 00:35:28,560
that's in the bank that's never

1023
00:35:28,560 --> 00:35:30,720
accessible to players

1024
00:35:30,720 --> 00:35:31,980
so those are some things we could do

1025
00:35:31,980 --> 00:35:34,079
with reflection so reflection it's

1026
00:35:34,079 --> 00:35:35,940
essentially a bot and a cheat client

1027
00:35:35,940 --> 00:35:37,380
like if you're familiar with the term

1028
00:35:37,380 --> 00:35:39,420
cheat line shred on the same line

1029
00:35:39,420 --> 00:35:41,339
there's a very very minimal difference

1030
00:35:41,339 --> 00:35:42,599
between what you could do with the bot

1031
00:35:42,599 --> 00:35:44,460
and the tree client as shown here so

1032
00:35:44,460 --> 00:35:45,839
this no click for example would be

1033
00:35:45,839 --> 00:35:47,280
something you would find in a cheat

1034
00:35:47,280 --> 00:35:49,640
client

1035
00:35:53,280 --> 00:35:55,140
okay cool let's move forward to external

1036
00:35:55,140 --> 00:35:57,119
bots so external Bots

1037
00:35:57,119 --> 00:35:59,280
um so external Bots are essentially you

1038
00:35:59,280 --> 00:36:00,480
may have heard the term pixel or

1039
00:36:00,480 --> 00:36:01,680
colorbots

1040
00:36:01,680 --> 00:36:03,000
um really what it does it just reads

1041
00:36:03,000 --> 00:36:05,160
data using pixels on the screen so what

1042
00:36:05,160 --> 00:36:07,200
this means is basically what you see is

1043
00:36:07,200 --> 00:36:09,000
what you get so what you see as a player

1044
00:36:09,000 --> 00:36:11,339
is the same thing the bot would see so

1045
00:36:11,339 --> 00:36:13,500
for example you could see um there's

1046
00:36:13,500 --> 00:36:14,820
this interesting blog post about someone

1047
00:36:14,820 --> 00:36:18,240
writing about using OCR libraries and

1048
00:36:18,240 --> 00:36:19,859
other image detections such as like

1049
00:36:19,859 --> 00:36:22,079
Tesseract and stuff like that and what

1050
00:36:22,079 --> 00:36:23,520
they were able to do is uh highlight

1051
00:36:23,520 --> 00:36:25,500
like the Rocks so again this is fully

1052
00:36:25,500 --> 00:36:27,000
external you're not injecting or

1053
00:36:27,000 --> 00:36:28,800
manipulating the client in any way this

1054
00:36:28,800 --> 00:36:30,180
is running in a completely separate

1055
00:36:30,180 --> 00:36:31,440
process

1056
00:36:31,440 --> 00:36:32,099
um

1057
00:36:32,099 --> 00:36:34,380
so it's common to find library so most

1058
00:36:34,380 --> 00:36:35,820
like you'll most likely find these Bots

1059
00:36:35,820 --> 00:36:37,320
written in Python because it has support

1060
00:36:37,320 --> 00:36:39,240
for these kinds of libraries

1061
00:36:39,240 --> 00:36:42,060
um like I said Tesseract opencv and Etc

1062
00:36:42,060 --> 00:36:44,040
there's other software like Auto hotkey

1063
00:36:44,040 --> 00:36:45,359
you may have heard of that you know you

1064
00:36:45,359 --> 00:36:46,920
can have scripts written that will

1065
00:36:46,920 --> 00:36:48,900
detect the pixel on the screen

1066
00:36:48,900 --> 00:36:50,579
um Simba which is a actually was built

1067
00:36:50,579 --> 00:36:51,720
for RuneScape

1068
00:36:51,720 --> 00:36:54,060
so here's what is actually happening

1069
00:36:54,060 --> 00:36:55,740
under the hood with an external bot we

1070
00:36:55,740 --> 00:36:57,180
take a screenshot of a section of the

1071
00:36:57,180 --> 00:36:59,700
screen we pre-pos pre-process the image

1072
00:36:59,700 --> 00:37:01,980
we detect we use OCR to detect what's

1073
00:37:01,980 --> 00:37:03,839
happening on and then we take an action

1074
00:37:03,839 --> 00:37:05,280
so like for example if we're using

1075
00:37:05,280 --> 00:37:06,900
health you know and the action is our

1076
00:37:06,900 --> 00:37:08,520
health is low we need a food we'll

1077
00:37:08,520 --> 00:37:10,260
probably have another script running

1078
00:37:10,260 --> 00:37:11,940
that's able to locate the location of

1079
00:37:11,940 --> 00:37:13,320
the food on the screen and then send a

1080
00:37:13,320 --> 00:37:17,700
click and then it just Loops itself so

1081
00:37:17,700 --> 00:37:20,700
let's take a look at what's happening

1082
00:37:20,700 --> 00:37:22,980
um so what I'm doing here is you may not

1083
00:37:22,980 --> 00:37:24,660
see it but my prayer level is right here

1084
00:37:24,660 --> 00:37:27,660
and this is in the game prayer is just

1085
00:37:27,660 --> 00:37:30,599
used as Buffs you can consider and um

1086
00:37:30,599 --> 00:37:32,099
what you see here is I'm using a color

1087
00:37:32,099 --> 00:37:34,560
bot that's basically or a bot that's

1088
00:37:34,560 --> 00:37:36,359
basically extracting the values of my

1089
00:37:36,359 --> 00:37:38,339
prayer and printing it on the screen and

1090
00:37:38,339 --> 00:37:39,960
you'll see that it's really not that

1091
00:37:39,960 --> 00:37:42,599
reliable so like it prints q1 or prints

1092
00:37:42,599 --> 00:37:44,280
something like five through nine or one

1093
00:37:44,280 --> 00:37:47,940
and again my colorbot is very very

1094
00:37:47,940 --> 00:37:50,640
brittle it's very rudimentary

1095
00:37:50,640 --> 00:37:52,619
um usually you would use like you know

1096
00:37:52,619 --> 00:37:54,480
Implement pre-processing and all this

1097
00:37:54,480 --> 00:37:56,220
stuff to make it like I'm saying is that

1098
00:37:56,220 --> 00:37:58,920
it's not as robust as internal Bots but

1099
00:37:58,920 --> 00:38:00,960
some people make them really really well

1100
00:38:00,960 --> 00:38:04,380
but to me I find it a lot more hard so

1101
00:38:04,380 --> 00:38:07,140
another uh something I just missed is

1102
00:38:07,140 --> 00:38:09,180
that if I close this interface for

1103
00:38:09,180 --> 00:38:10,920
example which you'll see me do right

1104
00:38:10,920 --> 00:38:15,619
here uh just missed it again sir

1105
00:38:20,520 --> 00:38:23,760
there's a so basically what it does is

1106
00:38:23,760 --> 00:38:25,380
that it reads this value so if this

1107
00:38:25,380 --> 00:38:27,119
interface is closed it's not going to be

1108
00:38:27,119 --> 00:38:28,619
able to read the value anymore and I

1109
00:38:28,619 --> 00:38:30,420
think I show an example of here so there

1110
00:38:30,420 --> 00:38:31,859
we go I close the interface and you can

1111
00:38:31,859 --> 00:38:33,420
see that it you know it's not able to

1112
00:38:33,420 --> 00:38:34,980
find the value so that's why these Bots

1113
00:38:34,980 --> 00:38:36,720
can be considered brittle these Bots can

1114
00:38:36,720 --> 00:38:38,880
easily be broken so for example someone

1115
00:38:38,880 --> 00:38:41,040
once wrote a mining bot that would find

1116
00:38:41,040 --> 00:38:42,960
the rock would be a specific color and

1117
00:38:42,960 --> 00:38:44,160
it would just click on the Rock whenever

1118
00:38:44,160 --> 00:38:45,480
it would find the color what another

1119
00:38:45,480 --> 00:38:47,280
player found was they found another item

1120
00:38:47,280 --> 00:38:48,839
in the game that was the same color so

1121
00:38:48,839 --> 00:38:50,400
they went around and dropping that item

1122
00:38:50,400 --> 00:38:51,839
so what happened was the player's bot

1123
00:38:51,839 --> 00:38:53,400
just started clicking that item and

1124
00:38:53,400 --> 00:38:54,839
completely broke and made it obvious

1125
00:38:54,839 --> 00:38:56,940
they were botting

1126
00:38:56,940 --> 00:38:59,060
um

1127
00:39:02,820 --> 00:39:04,140
so

1128
00:39:04,140 --> 00:39:06,180
last but not least I'd like to leave off

1129
00:39:06,180 --> 00:39:07,800
with the slide so one essential fact

1130
00:39:07,800 --> 00:39:09,119
that I didn't show you is that in the

1131
00:39:09,119 --> 00:39:10,320
real world the client's going to be

1132
00:39:10,320 --> 00:39:11,760
obfuscated and what that means is that

1133
00:39:11,760 --> 00:39:13,079
the Java code

1134
00:39:13,079 --> 00:39:15,480
basically in layman's terms it's going

1135
00:39:15,480 --> 00:39:16,859
to be scrambled it's going to be hard to

1136
00:39:16,859 --> 00:39:18,540
read and that's done on purpose to

1137
00:39:18,540 --> 00:39:20,339
prevent you know people like ourselves

1138
00:39:20,339 --> 00:39:23,160
from writing the pot and what and if

1139
00:39:23,160 --> 00:39:24,420
you're interested in this talk and want

1140
00:39:24,420 --> 00:39:28,040
to actually see how you can you know

1141
00:39:28,260 --> 00:39:31,079
write a bot for an obfuscated client

1142
00:39:31,079 --> 00:39:33,000
um there will be a blog post on my blog

1143
00:39:33,000 --> 00:39:35,460
hopefully by uh tomorrow that will

1144
00:39:35,460 --> 00:39:37,200
actually detail the process so basically

1145
00:39:37,200 --> 00:39:39,060
we'll leave off from where we ended here

1146
00:39:39,060 --> 00:39:40,740
and then use

1147
00:39:40,740 --> 00:39:42,420
um some D obfuscation techniques to

1148
00:39:42,420 --> 00:39:43,619
write the bot

1149
00:39:43,619 --> 00:39:45,420
and last but not least here's some cool

1150
00:39:45,420 --> 00:39:48,000
references you can look at if you um are

1151
00:39:48,000 --> 00:39:51,180
interested in this kind of stuff and

1152
00:39:51,180 --> 00:39:55,098
yeah that's pretty much it thank you

1153
00:39:57,839 --> 00:40:00,660
Max thanks so much that was so great I'm

1154
00:40:00,660 --> 00:40:03,119
not a gamer but now I know how cheating

1155
00:40:03,119 --> 00:40:06,000
is done I'm kidding do we have any

1156
00:40:06,000 --> 00:40:08,720
question for Max

1157
00:40:10,800 --> 00:40:12,960
there you go

1158
00:40:12,960 --> 00:40:15,060
it acts in private but you know just for

1159
00:40:15,060 --> 00:40:16,680
the sake of others

1160
00:40:16,680 --> 00:40:18,420
um so you mentioned that when you

1161
00:40:18,420 --> 00:40:19,680
instrument the client you can walk

1162
00:40:19,680 --> 00:40:22,800
through walls and uh if I understand it

1163
00:40:22,800 --> 00:40:25,020
correctly that all happens uh in the

1164
00:40:25,020 --> 00:40:26,460
client

1165
00:40:26,460 --> 00:40:29,339
um did you see any so there's obviously

1166
00:40:29,339 --> 00:40:30,540
going to be communication between the

1167
00:40:30,540 --> 00:40:32,220
client and the server for some stuff

1168
00:40:32,220 --> 00:40:35,160
like where's that limitation where you

1169
00:40:35,160 --> 00:40:38,400
talk to the server and and I assume the

1170
00:40:38,400 --> 00:40:41,579
server also has protections against some

1171
00:40:41,579 --> 00:40:44,040
things like where is that line did you

1172
00:40:44,040 --> 00:40:47,099
find it and what kind of what can you do

1173
00:40:47,099 --> 00:40:49,200
when that when that happens thank you

1174
00:40:49,200 --> 00:40:50,460
thank you for the question um it's a

1175
00:40:50,460 --> 00:40:52,320
good question so

1176
00:40:52,320 --> 00:40:53,820
um so when I showed everyone dancing

1177
00:40:53,820 --> 00:40:55,380
here for example this is only shown on

1178
00:40:55,380 --> 00:40:56,640
your client you're not going to see like

1179
00:40:56,640 --> 00:40:57,599
other players are not going to see

1180
00:40:57,599 --> 00:40:58,980
everybody dancing so this is completely

1181
00:40:58,980 --> 00:41:00,420
client-side

1182
00:41:00,420 --> 00:41:02,339
um this though when you're walking when

1183
00:41:02,339 --> 00:41:03,599
you're making any movement in the game

1184
00:41:03,599 --> 00:41:05,220
it's actually sending packets to the

1185
00:41:05,220 --> 00:41:07,380
server telling it's your location so the

1186
00:41:07,380 --> 00:41:08,760
way you would Implement an anti-cheat on

1187
00:41:08,760 --> 00:41:10,740
the server this is you would have have a

1188
00:41:10,740 --> 00:41:11,880
list of locations that you can

1189
00:41:11,880 --> 00:41:13,800
potentially say hey the player cannot be

1190
00:41:13,800 --> 00:41:15,660
here and if the player is going there

1191
00:41:15,660 --> 00:41:17,640
then you know something's happening

1192
00:41:17,640 --> 00:41:19,200
under the hood that should not be

1193
00:41:19,200 --> 00:41:21,480
happening and so anytime I walk in the

1194
00:41:21,480 --> 00:41:22,859
game anytime you click or you walk

1195
00:41:22,859 --> 00:41:24,540
anywhere it actually sends the location

1196
00:41:24,540 --> 00:41:27,480
of your x y and your Z coordinates and Z

1197
00:41:27,480 --> 00:41:30,920
is the plane to the server

1198
00:41:31,380 --> 00:41:32,760
um yeah so lastly I just want to thank

1199
00:41:32,760 --> 00:41:34,020
my colleagues for coming out and

1200
00:41:34,020 --> 00:41:36,180
watching my talk thank you

1201
00:41:36,180 --> 00:41:37,220
thank you Max

1202
00:41:37,220 --> 00:41:40,319
[Applause]

