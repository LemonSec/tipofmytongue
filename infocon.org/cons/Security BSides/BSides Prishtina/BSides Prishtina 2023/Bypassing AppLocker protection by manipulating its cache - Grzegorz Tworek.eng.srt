1
00:00:03,799 --> 00:00:07,560
hello welcome everyone I'm dragos and uh

2
00:00:07,560 --> 00:00:09,480
you are pronouncing my name really

3
00:00:09,480 --> 00:00:13,200
really properly if you really prefer I

4
00:00:13,200 --> 00:00:16,379
may be Greg for you I'm doing mostly

5
00:00:16,379 --> 00:00:18,000
research around windows I'm working

6
00:00:18,000 --> 00:00:20,100
every day in a large organization trying

7
00:00:20,100 --> 00:00:21,960
to implement a blocker so I started to

8
00:00:21,960 --> 00:00:23,820
dig into a blocker finding a lot of

9
00:00:23,820 --> 00:00:25,619
interesting things when it comes to a

10
00:00:25,619 --> 00:00:26,580
plucker

11
00:00:26,580 --> 00:00:29,460
water blocker is kind of a short

12
00:00:29,460 --> 00:00:31,920
introduction for you it is one of three

13
00:00:31,920 --> 00:00:33,600
ways we have within windows for

14
00:00:33,600 --> 00:00:35,940
application white listing because the

15
00:00:35,940 --> 00:00:38,460
typical approach we have built into

16
00:00:38,460 --> 00:00:41,460
Windows systems we are using everyday on

17
00:00:41,460 --> 00:00:45,239
our desktops just by default it is we

18
00:00:45,239 --> 00:00:47,940
have kind of an anti-malware antivirus

19
00:00:47,940 --> 00:00:50,520
however we call it trying to block

20
00:00:50,520 --> 00:00:53,579
malicious actions especially trying to

21
00:00:53,579 --> 00:00:56,340
block you from running well-known

22
00:00:56,340 --> 00:00:58,680
malware so if you download the malware

23
00:00:58,680 --> 00:01:00,480
to your machine try to run it probably

24
00:01:00,480 --> 00:01:03,840
something will pop up saying it is not

25
00:01:03,840 --> 00:01:06,119
allowed to be run it is a typical black

26
00:01:06,119 --> 00:01:10,020
listing approach telling you it is not

27
00:01:10,020 --> 00:01:12,560
allowed because we know it is bad

28
00:01:12,560 --> 00:01:14,280
whitelisting approach is totally

29
00:01:14,280 --> 00:01:16,619
different it is different Paradigm

30
00:01:16,619 --> 00:01:19,860
telling you you can run only what you

31
00:01:19,860 --> 00:01:22,200
have allowed previously and in Windows

32
00:01:22,200 --> 00:01:25,200
we have three ways of doing this the

33
00:01:25,200 --> 00:01:27,720
very first for his historically saying

34
00:01:27,720 --> 00:01:30,360
is SRP software restriction policies

35
00:01:30,360 --> 00:01:33,780
being built into Windows XP SRP is not

36
00:01:33,780 --> 00:01:36,240
the smartest thing because it relies on

37
00:01:36,240 --> 00:01:39,360
the Explorer and the Explorer is your

38
00:01:39,360 --> 00:01:42,240
process so you can manipulate the

39
00:01:42,240 --> 00:01:45,000
process trying to enforce you from

40
00:01:45,000 --> 00:01:48,119
running an unwanted processes so it is

41
00:01:48,119 --> 00:01:50,700
not that effective in practice it's

42
00:01:50,700 --> 00:01:54,500
easily hacked by the way one of the most

43
00:01:54,500 --> 00:01:57,360
known applications being used for

44
00:01:57,360 --> 00:02:01,380
bypassing SRP is a tiny program called

45
00:02:01,380 --> 00:02:04,200
GP disable written by Mark russinovich

46
00:02:04,200 --> 00:02:06,060
after Mark russinovich joined Microsoft

47
00:02:06,060 --> 00:02:07,680
this program magically disappeared from

48
00:02:07,680 --> 00:02:10,220
the internet you cannot find it anyway

49
00:02:10,220 --> 00:02:13,920
right now we have two possibilities it

50
00:02:13,920 --> 00:02:16,620
is a blocker being built into Windows

51
00:02:16,620 --> 00:02:19,080
starting from Windows 7 if I'm right and

52
00:02:19,080 --> 00:02:20,760
we have Windows Defender application

53
00:02:20,760 --> 00:02:23,520
control they're working I can say in

54
00:02:23,520 --> 00:02:26,340
parallel on different levels a blocker

55
00:02:26,340 --> 00:02:28,800
is definitely more user friendly when

56
00:02:28,800 --> 00:02:30,440
you have to manage it

57
00:02:30,440 --> 00:02:34,920
wdac is protecting you better but the

58
00:02:34,920 --> 00:02:37,440
overall landscape is not only about the

59
00:02:37,440 --> 00:02:39,060
technical possibilities of the solution

60
00:02:39,060 --> 00:02:40,280
but about

61
00:02:40,280 --> 00:02:43,680
friendliness knowledge of Administrators

62
00:02:43,680 --> 00:02:46,200
and so on the whole landscape I'm more

63
00:02:46,200 --> 00:02:49,560
Pro applocker I would say even if WDC is

64
00:02:49,560 --> 00:02:51,360
better when it comes to the pure

65
00:02:51,360 --> 00:02:54,959
technology when it comes to a blocker

66
00:02:54,959 --> 00:02:57,840
uh we have a couple of components

67
00:02:57,840 --> 00:03:00,660
working within a blocker so we have a

68
00:03:00,660 --> 00:03:02,819
Management console absolutely absent in

69
00:03:02,819 --> 00:03:06,000
WDC by the way we have graphical

70
00:03:06,000 --> 00:03:08,160
interface I will show you in a moment we

71
00:03:08,160 --> 00:03:10,739
have some Powershell we have some

72
00:03:10,739 --> 00:03:12,720
special service the service must be run

73
00:03:12,720 --> 00:03:17,519
to have your whitest thing working which

74
00:03:17,519 --> 00:03:20,280
is apply dsvc we have some kernel driver

75
00:03:20,280 --> 00:03:22,739
doing some magic with tokens for example

76
00:03:22,739 --> 00:03:26,940
and we have a login component and right

77
00:03:26,940 --> 00:03:30,300
now I can show you a couple of things on

78
00:03:30,300 --> 00:03:32,340
this camta blocker not yet about the

79
00:03:32,340 --> 00:03:35,099
hash but we are going closer here I can

80
00:03:35,099 --> 00:03:37,739
see the blocker lock I can see couple of

81
00:03:37,739 --> 00:03:39,480
entries

82
00:03:39,480 --> 00:03:42,060
um being I will return to them in a

83
00:03:42,060 --> 00:03:44,959
moment when it comes to the management

84
00:03:44,959 --> 00:03:49,140
there is a sec pull.msc console when you

85
00:03:49,140 --> 00:03:52,319
can Define under security setting

86
00:03:52,319 --> 00:03:53,819
application control policies and

87
00:03:53,819 --> 00:03:56,840
applocker for the app Locker you define

88
00:03:56,840 --> 00:03:59,760
what you are trying to do on different

89
00:03:59,760 --> 00:04:02,400
levels because you can perform with this

90
00:04:02,400 --> 00:04:05,040
thing on executable files on Windows

91
00:04:05,040 --> 00:04:09,560
installer MSI files so scripts and appx

92
00:04:09,560 --> 00:04:12,599
files actually dot exe typical

93
00:04:12,599 --> 00:04:14,459
executables are the most common and

94
00:04:14,459 --> 00:04:16,079
resemble

95
00:04:16,079 --> 00:04:19,620
it would be great to include dlls here

96
00:04:19,620 --> 00:04:22,380
as well you have to enable it on this

97
00:04:22,380 --> 00:04:26,699
page to enforce the dlls as well for

98
00:04:26,699 --> 00:04:28,800
every single single category

99
00:04:28,800 --> 00:04:33,419
you have a possibility to pick the right

100
00:04:33,419 --> 00:04:36,300
way of protecting your machines because

101
00:04:36,300 --> 00:04:40,020
because we can work into modes in the

102
00:04:40,020 --> 00:04:42,240
audit mode and the enforcement mode in

103
00:04:42,240 --> 00:04:44,340
the enforcement mode if something is not

104
00:04:44,340 --> 00:04:46,380
allowed it will simply not run that

105
00:04:46,380 --> 00:04:48,120
there will be a default kind of a

106
00:04:48,120 --> 00:04:50,160
message telling your user it is not

107
00:04:50,160 --> 00:04:53,100
allowed your user when we work in the

108
00:04:53,100 --> 00:04:55,440
audit only mode

109
00:04:55,440 --> 00:04:58,139
um everything is allowed to be run but

110
00:04:58,139 --> 00:05:00,600
we can see what we see over here for

111
00:05:00,600 --> 00:05:03,780
example for this working warning if I

112
00:05:03,780 --> 00:05:06,120
see it I can see there was something in

113
00:05:06,120 --> 00:05:09,000
temp this host some automated stuff

114
00:05:09,000 --> 00:05:11,300
being done within Windows

115
00:05:11,300 --> 00:05:13,280
not being

116
00:05:13,280 --> 00:05:16,320
whitelisted and I have warning because

117
00:05:16,320 --> 00:05:19,800
it was allowed to be run but if we play

118
00:05:19,800 --> 00:05:21,900
seriously it would be blocked

119
00:05:21,900 --> 00:05:27,120
okay so I have two rules defined over

120
00:05:27,120 --> 00:05:28,560
here

121
00:05:28,560 --> 00:05:31,680
um just for demonstration purposes the

122
00:05:31,680 --> 00:05:34,199
first rule is based on the path if

123
00:05:34,199 --> 00:05:36,060
something is within C program files then

124
00:05:36,060 --> 00:05:37,500
it's allowed to be run the second rule

125
00:05:37,500 --> 00:05:41,820
is if something is within uh C Windows

126
00:05:41,820 --> 00:05:44,039
it is allowed to be run because a

127
00:05:44,039 --> 00:05:46,680
regular user cannot drop

128
00:05:46,680 --> 00:05:49,979
in most cases let's say an executable

129
00:05:49,979 --> 00:05:54,000
file there so if a file is within one of

130
00:05:54,000 --> 00:05:57,300
those paths it means an admin did it so

131
00:05:57,300 --> 00:06:01,860
it is legitimate by by the location I

132
00:06:01,860 --> 00:06:04,259
would say automatically because it stays

133
00:06:04,259 --> 00:06:07,740
here so I do not have to manage hundreds

134
00:06:07,740 --> 00:06:09,060
or even thousands of different

135
00:06:09,060 --> 00:06:11,280
executable files because I have created

136
00:06:11,280 --> 00:06:13,560
those two rules for paths and it is

137
00:06:13,560 --> 00:06:14,660
perfectly

138
00:06:14,660 --> 00:06:18,800
enough so if I run something let's say

139
00:06:18,800 --> 00:06:21,259
from my

140
00:06:21,259 --> 00:06:25,800
from my desktop

141
00:06:25,919 --> 00:06:28,860
okay it's wrong console this is the

142
00:06:28,860 --> 00:06:31,020
right one

143
00:06:31,020 --> 00:06:34,560
uh there I have an application called

144
00:06:34,560 --> 00:06:36,360
Write IAA

145
00:06:36,360 --> 00:06:38,819
writing 100 a letters you will show in a

146
00:06:38,819 --> 00:06:40,919
moment why this application is run from

147
00:06:40,919 --> 00:06:42,240
my desktop which is obviously not

148
00:06:42,240 --> 00:06:45,240
program files and not windows so if I do

149
00:06:45,240 --> 00:06:47,639
F5 I can see a warning it would be

150
00:06:47,639 --> 00:06:49,560
blocked if you play seriously a blocker

151
00:06:49,560 --> 00:06:54,539
detected in and warned us okay and so

152
00:06:54,539 --> 00:06:56,460
you can see a blocker is trying to

153
00:06:56,460 --> 00:06:58,020
register every single executable file

154
00:06:58,020 --> 00:07:00,539
being run but there are some interesting

155
00:07:00,539 --> 00:07:04,219
cases over here because

156
00:07:06,060 --> 00:07:10,979
I have written a tiny dll file actually

157
00:07:10,979 --> 00:07:14,580
dll files can contain the same type of

158
00:07:14,580 --> 00:07:16,919
executable code as we have within.exe

159
00:07:16,919 --> 00:07:19,979
files but we have no dll rules being

160
00:07:19,979 --> 00:07:23,599
defined here so I will load my dll

161
00:07:23,599 --> 00:07:26,639
you can see there is my dll called

162
00:07:26,639 --> 00:07:29,039
ignoreapplocker.dll

163
00:07:29,039 --> 00:07:32,580
and I will load it use it using run the

164
00:07:32,580 --> 00:07:34,740
editor 2.

165
00:07:34,740 --> 00:07:36,919
run the other territor

166
00:07:36,919 --> 00:07:40,560
ignore applocker.dll at the method is

167
00:07:40,560 --> 00:07:42,720
called do it

168
00:07:42,720 --> 00:07:45,419
C windows

169
00:07:45,419 --> 00:07:48,060
system

170
00:07:48,060 --> 00:07:51,960
seemed easy and the new CMD appeared

171
00:07:51,960 --> 00:07:54,419
it is very special CMD

172
00:07:54,419 --> 00:07:58,259
because if I do who am I slash all

173
00:07:58,259 --> 00:08:00,419
I will see

174
00:08:00,419 --> 00:08:01,860
I'm

175
00:08:01,860 --> 00:08:04,919
acting here as a system actually this

176
00:08:04,919 --> 00:08:09,900
dll is feeling that token from one of

177
00:08:09,900 --> 00:08:12,120
the services and is launching a new

178
00:08:12,120 --> 00:08:13,740
process I have specified in the path

179
00:08:13,740 --> 00:08:18,360
over here on the stolen token so I have

180
00:08:18,360 --> 00:08:20,639
a stone token from system and what is

181
00:08:20,639 --> 00:08:23,400
most important over here

182
00:08:23,400 --> 00:08:27,800
and the tokens stolen from the service

183
00:08:27,800 --> 00:08:30,620
contains within its

184
00:08:30,620 --> 00:08:35,039
data a very special seed telling clearly

185
00:08:35,039 --> 00:08:39,659
it is a service it is a seat s156

186
00:08:39,659 --> 00:08:44,580
if a blocker sees such seed in the token

187
00:08:44,580 --> 00:08:49,140
it totally ignores such process so I run

188
00:08:49,140 --> 00:08:52,920
around the l32 as a regular user CMD was

189
00:08:52,920 --> 00:08:54,860
launched as a

190
00:08:54,860 --> 00:08:58,080
my special service user on the special

191
00:08:58,080 --> 00:09:01,860
stolen token who am i.exe also an

192
00:09:01,860 --> 00:09:06,560
application was launched on this

193
00:09:06,560 --> 00:09:09,300
token as well if I launch something from

194
00:09:09,300 --> 00:09:11,720
a desktop which is clearly not allowed

195
00:09:11,720 --> 00:09:16,620
let's go here and I will pick

196
00:09:16,620 --> 00:09:19,440
uh one of the applications right AAA is

197
00:09:19,440 --> 00:09:21,600
not a bad example shift right click

198
00:09:21,600 --> 00:09:25,040
shift right click copy as path

199
00:09:25,040 --> 00:09:30,120
now I can paste Ctrl V it was run not a

200
00:09:30,120 --> 00:09:31,980
big surprise I here in the audit mode

201
00:09:31,980 --> 00:09:35,399
but when I look into the event log I can

202
00:09:35,399 --> 00:09:40,080
see the last thing here is run dll was

203
00:09:40,080 --> 00:09:41,519
allowed to be run

204
00:09:41,519 --> 00:09:44,459
this is right IAA but from the my

205
00:09:44,459 --> 00:09:46,980
previous run this one is the freshest

206
00:09:46,980 --> 00:09:50,399
one it is 306 this it is the moment I

207
00:09:50,399 --> 00:09:51,980
have around dll

208
00:09:51,980 --> 00:09:55,500
running everything happening next from

209
00:09:55,500 --> 00:09:58,680
my second window was totally absent in

210
00:09:58,680 --> 00:10:01,320
the app locker lock it was totally it

211
00:10:01,320 --> 00:10:03,420
would be totally absent if applocker

212
00:10:03,420 --> 00:10:06,540
really enforces me and trying to block

213
00:10:06,540 --> 00:10:10,680
some application so if s156 appears

214
00:10:10,680 --> 00:10:13,620
within the process token such token in

215
00:10:13,620 --> 00:10:16,380
such process is totally ignored by a

216
00:10:16,380 --> 00:10:19,140
blocker there is one thing more but it

217
00:10:19,140 --> 00:10:20,899
is documented so it's not that funny

218
00:10:20,899 --> 00:10:23,880
because if you have a API function

219
00:10:23,880 --> 00:10:26,220
create restriction token under

220
00:10:26,220 --> 00:10:29,540
parameters you have a sandbox einert

221
00:10:29,540 --> 00:10:31,279
parameter

222
00:10:31,279 --> 00:10:33,300
saying clearly

223
00:10:33,300 --> 00:10:36,120
control scroll

224
00:10:36,120 --> 00:10:39,560
saying clearly it will be

225
00:10:39,560 --> 00:10:42,120
ignored by

226
00:10:42,120 --> 00:10:45,540
a blocker this flag disables checks for

227
00:10:45,540 --> 00:10:47,160
a blocker but it's not that funny

228
00:10:47,160 --> 00:10:49,620
because it's documented and the previous

229
00:10:49,620 --> 00:10:52,680
one is not documented at all so we can

230
00:10:52,680 --> 00:10:54,779
bypass a blocker by manipulating the

231
00:10:54,779 --> 00:10:58,560
token it is the first case okay when you

232
00:10:58,560 --> 00:11:01,860
create your rules for a blocker you have

233
00:11:01,860 --> 00:11:04,920
actually three possibilities I will go

234
00:11:04,920 --> 00:11:07,680
here this is the console I need create a

235
00:11:07,680 --> 00:11:08,760
new rule

236
00:11:08,760 --> 00:11:12,360
and you have three possibilities for

237
00:11:12,360 --> 00:11:15,180
creating a rule first through the wizard

238
00:11:15,180 --> 00:11:17,519
you have to specify this alert or or

239
00:11:17,519 --> 00:11:19,440
didn't I please do not create the deny

240
00:11:19,440 --> 00:11:21,839
rules applocker is about allowing so

241
00:11:21,839 --> 00:11:24,240
deny rules are pointless

242
00:11:24,240 --> 00:11:27,720
um here we can specify a user which is a

243
00:11:27,720 --> 00:11:29,120
great advantage

244
00:11:29,120 --> 00:11:33,000
of applocker over wdac because we can

245
00:11:33,000 --> 00:11:34,980
specify the special group

246
00:11:34,980 --> 00:11:36,959
this group is allowed to run everything

247
00:11:36,959 --> 00:11:40,200
and if we pick if we put a user into the

248
00:11:40,200 --> 00:11:42,480
group this user magically can run

249
00:11:42,480 --> 00:11:44,579
anything if you remove a user from this

250
00:11:44,579 --> 00:11:47,100
group of course after creating a new

251
00:11:47,100 --> 00:11:49,860
token which requires log off logon and

252
00:11:49,860 --> 00:11:52,560
so on but we can manage easily who can

253
00:11:52,560 --> 00:11:56,100
run everything anyway when you create a

254
00:11:56,100 --> 00:11:58,140
rule you have three possibilities we can

255
00:11:58,140 --> 00:12:00,959
rely on digital signatures uh publisher

256
00:12:00,959 --> 00:12:03,360
here we can rely on path it is what I

257
00:12:03,360 --> 00:12:06,300
did for program files and windows and we

258
00:12:06,300 --> 00:12:08,760
can rely on a file hash

259
00:12:08,760 --> 00:12:11,339
for a file hash

260
00:12:11,339 --> 00:12:14,279
um I will browse files I will pick my

261
00:12:14,279 --> 00:12:17,160
right IAA my simple application write

262
00:12:17,160 --> 00:12:21,839
AAA open create and now I have a rule

263
00:12:21,839 --> 00:12:24,779
based on the half of this write AAA file

264
00:12:24,779 --> 00:12:28,100
so if the hash of the file matches

265
00:12:28,100 --> 00:12:30,660
executable file is allowed to be run if

266
00:12:30,660 --> 00:12:32,579
it does not match it will be not allowed

267
00:12:32,579 --> 00:12:35,279
at least not by by this row if I right

268
00:12:35,279 --> 00:12:37,680
now I will close this console at this as

269
00:12:37,680 --> 00:12:39,959
this one is ignored anyway

270
00:12:39,959 --> 00:12:44,300
if right now I will run right again

271
00:12:44,300 --> 00:12:46,440
within the event log not the big

272
00:12:46,440 --> 00:12:49,620
surprise I will see right IA was allowed

273
00:12:49,620 --> 00:12:52,260
to be run you don't have a rule

274
00:12:52,260 --> 00:12:53,940
specifying its

275
00:12:53,940 --> 00:13:00,000
half so what I'm I will do right now I

276
00:13:00,000 --> 00:13:02,820
cannot easily plug in and plug plug out

277
00:13:02,820 --> 00:13:06,420
a an external drive into my virtual

278
00:13:06,420 --> 00:13:09,480
machine but I can create a vhd file and

279
00:13:09,480 --> 00:13:11,880
detach and attach it allowing me to

280
00:13:11,880 --> 00:13:14,519
manipulate the data on that drive in a

281
00:13:14,519 --> 00:13:19,920
physical way so I will attach a vhd file

282
00:13:19,920 --> 00:13:24,800
to my VM see temp X

283
00:13:24,800 --> 00:13:26,579
vhdx

284
00:13:26,579 --> 00:13:32,220
X Drive will appear I will copy

285
00:13:32,220 --> 00:13:36,959
copy right IAA into X drive I will run

286
00:13:36,959 --> 00:13:38,519
it X

287
00:13:38,519 --> 00:13:42,480
right IAA it will run as everything runs

288
00:13:42,480 --> 00:13:44,459
here in the event log not the big

289
00:13:44,459 --> 00:13:48,180
surprise X right IAA was allowed to run

290
00:13:48,180 --> 00:13:50,579
as the hash is the hash perfectly well

291
00:13:50,579 --> 00:13:53,100
Allowed by the

292
00:13:53,100 --> 00:13:57,360
a blocker so what I will do right now I

293
00:13:57,360 --> 00:13:59,639
will detach the drive

294
00:13:59,639 --> 00:14:01,440
digital vhd

295
00:14:01,440 --> 00:14:05,040
yep I want to detach it I will open it

296
00:14:05,040 --> 00:14:07,920
with hex editor

297
00:14:07,920 --> 00:14:10,620
uh which I have on the desktop which is

298
00:14:10,620 --> 00:14:13,260
yet an another one applications to be

299
00:14:13,260 --> 00:14:14,639
allowed by the way

300
00:14:14,639 --> 00:14:21,000
I will open it X vhdx Ctrl f

301
00:14:21,000 --> 00:14:25,260
AAA does not matter there but you can

302
00:14:25,260 --> 00:14:28,320
see it it is here this is probably at

303
00:14:28,320 --> 00:14:29,700
least some of you did in the past

304
00:14:29,700 --> 00:14:32,220
hacking applications display your name

305
00:14:32,220 --> 00:14:34,260
instead of the legitimate developer name

306
00:14:34,260 --> 00:14:36,000
if you run an application it's exactly

307
00:14:36,000 --> 00:14:38,459
the same level of advances I'm doing

308
00:14:38,459 --> 00:14:41,699
here I will replace couple of a letters

309
00:14:41,699 --> 00:14:43,320
with dots

310
00:14:43,320 --> 00:14:46,980
now I will save it I will close it

311
00:14:46,980 --> 00:14:50,279
and I will attach it again

312
00:14:50,279 --> 00:14:53,279
vsd

313
00:14:53,339 --> 00:14:55,440
C temp

314
00:14:55,440 --> 00:14:58,320
x v h d x

315
00:14:58,320 --> 00:15:01,199
the X Drive appeared

316
00:15:01,199 --> 00:15:02,880
I'm here

317
00:15:02,880 --> 00:15:06,300
X right IAA not the big surprise you can

318
00:15:06,300 --> 00:15:08,940
see those dots I have manipulated on the

319
00:15:08,940 --> 00:15:11,699
physical level on the drive but was it

320
00:15:11,699 --> 00:15:14,100
allowed to be run or not

321
00:15:14,100 --> 00:15:16,440
from the security perspective the answer

322
00:15:16,440 --> 00:15:18,779
should be really simple it should be

323
00:15:18,779 --> 00:15:20,579
never allowed to be run

324
00:15:20,579 --> 00:15:24,899
F5 from the applocker perspective it was

325
00:15:24,899 --> 00:15:26,940
allowed to be run this warning is about

326
00:15:26,940 --> 00:15:31,019
my hex editor just to let you know but

327
00:15:31,019 --> 00:15:34,920
the right AAA the manipulated one one

328
00:15:34,920 --> 00:15:37,079
was perfectly well allowed

329
00:15:37,079 --> 00:15:40,680
so let's try to figure out

330
00:15:40,680 --> 00:15:42,600
what is

331
00:15:42,600 --> 00:15:44,279
going over here

332
00:15:44,279 --> 00:15:47,420
so I will run Powershell

333
00:15:47,420 --> 00:15:51,120
power shell Double L will work better

334
00:15:51,120 --> 00:15:53,579
get

335
00:15:53,579 --> 00:15:56,699
get file hash

336
00:15:56,699 --> 00:15:58,380
for my

337
00:15:58,380 --> 00:16:02,820
right a on the desktop it is d355 at the

338
00:16:02,820 --> 00:16:07,500
beginning schwa256 I get file

339
00:16:07,500 --> 00:16:08,720
hash

340
00:16:08,720 --> 00:16:12,120
X right AAA

341
00:16:12,120 --> 00:16:14,699
totally different not the big surprise I

342
00:16:14,699 --> 00:16:16,800
have manipulated the file so it must be

343
00:16:16,800 --> 00:16:17,639
different

344
00:16:17,639 --> 00:16:21,060
but a blocker allowed it so what is the

345
00:16:21,060 --> 00:16:22,800
applocker policy

346
00:16:22,800 --> 00:16:28,399
get a broker a policy local

347
00:16:28,399 --> 00:16:35,600
I will put it this way and Dot to XML

348
00:16:35,639 --> 00:16:37,920
this is the applocker policy and here

349
00:16:37,920 --> 00:16:39,740
you can see

350
00:16:39,740 --> 00:16:42,480
the information within the app Locker

351
00:16:42,480 --> 00:16:46,079
policy the rule and as you can hopefully

352
00:16:46,079 --> 00:16:48,720
see the hash is yet another different

353
00:16:48,720 --> 00:16:51,600
it's not this one not this one all those

354
00:16:51,600 --> 00:16:53,880
three are three to five six but there

355
00:16:53,880 --> 00:16:56,100
are totally different ones so what is

356
00:16:56,100 --> 00:16:57,360
going on here

357
00:16:57,360 --> 00:16:59,639
the very first thing when it comes to

358
00:16:59,639 --> 00:17:02,759
hashes is a blocker is saying it's

359
00:17:02,759 --> 00:17:06,059
strato56 but it's lying it is not

360
00:17:06,059 --> 00:17:09,419
strato56 it is not clearly documented

361
00:17:09,419 --> 00:17:12,240
what applocker is using here but if we

362
00:17:12,240 --> 00:17:15,179
dig deeper we can realize the harsh

363
00:17:15,179 --> 00:17:18,000
matches so called authentic code hash

364
00:17:18,000 --> 00:17:20,959
there is a well-documented algorithm

365
00:17:20,959 --> 00:17:23,459
invented probably by Microsoft if I'm

366
00:17:23,459 --> 00:17:24,199
right

367
00:17:24,199 --> 00:17:27,179
for creating hashes for executable files

368
00:17:27,179 --> 00:17:28,919
it is commonly used for digital

369
00:17:28,919 --> 00:17:31,740
signatures in practice and applocker is

370
00:17:31,740 --> 00:17:34,740
using it here not telling you it is

371
00:17:34,740 --> 00:17:37,020
using it it is lying it is strato56

372
00:17:37,020 --> 00:17:40,440
which is not the truth at all there is

373
00:17:40,440 --> 00:17:44,400
an undocumented algorithm here you can

374
00:17:44,400 --> 00:17:47,640
specify a schwa256 flat as an algorithm

375
00:17:47,640 --> 00:17:49,500
there is no single mention in the

376
00:17:49,500 --> 00:17:51,179
documentation about this and then you

377
00:17:51,179 --> 00:17:54,660
can use strato56 the real strato56

378
00:17:54,660 --> 00:17:56,160
anyway

379
00:17:56,160 --> 00:17:59,160
a broker is telling you something else

380
00:17:59,160 --> 00:18:03,179
about harshers but still the hush for

381
00:18:03,179 --> 00:18:05,460
this file I have manipulated must be

382
00:18:05,460 --> 00:18:08,700
different so again what is going on here

383
00:18:08,700 --> 00:18:12,179
I will use I will launch console as an

384
00:18:12,179 --> 00:18:16,679
admin and I will use a built-in fsutil

385
00:18:16,679 --> 00:18:19,260
um command fsutil is one of my favorite

386
00:18:19,260 --> 00:18:21,419
commands in Windows it is a command

387
00:18:21,419 --> 00:18:23,820
being constantly managed and updated by

388
00:18:23,820 --> 00:18:25,320
the team responsible for the file system

389
00:18:25,320 --> 00:18:29,460
for the NFS file system so if you can do

390
00:18:29,460 --> 00:18:32,100
some magic with NTFS file system fsutil

391
00:18:32,100 --> 00:18:34,980
probably is the right tool FS util file

392
00:18:34,980 --> 00:18:40,740
a query a a is querying for extended

393
00:18:40,740 --> 00:18:44,580
attributes files within NTFS file system

394
00:18:44,580 --> 00:18:48,260
can have so-called extended attributes

395
00:18:48,260 --> 00:18:51,539
you can think about extended attributes

396
00:18:51,539 --> 00:18:54,120
like if you are familiar with altered

397
00:18:54,120 --> 00:18:57,419
data streams extended attributes are

398
00:18:57,419 --> 00:19:00,120
kind of like alternate data streams on

399
00:19:00,120 --> 00:19:02,400
steroids they are slightly different but

400
00:19:02,400 --> 00:19:04,740
the purpose is somehow similar so there

401
00:19:04,740 --> 00:19:07,679
is kind of a metadata you can attach to

402
00:19:07,679 --> 00:19:10,200
any single file within device system it

403
00:19:10,200 --> 00:19:13,320
may be it may have some name it may be

404
00:19:13,320 --> 00:19:16,799
different length it is just a metadata

405
00:19:16,799 --> 00:19:19,860
kind of an attribute to a file called a

406
00:19:19,860 --> 00:19:22,620
a which means extended attribute if I

407
00:19:22,620 --> 00:19:23,700
display

408
00:19:23,700 --> 00:19:26,880
the extended attribute for my right IAA

409
00:19:26,880 --> 00:19:29,520
file I can see those are extended

410
00:19:29,520 --> 00:19:33,419
attributes of my right AAA and here the

411
00:19:33,419 --> 00:19:35,580
the last one is the long one is not that

412
00:19:35,580 --> 00:19:40,260
interesting in this case but this one uh

413
00:19:40,260 --> 00:19:42,059
very interesting it is called dollar

414
00:19:42,059 --> 00:19:45,299
kernel Purge app ID hash info and you

415
00:19:45,299 --> 00:19:48,320
can see if you look close

416
00:19:48,320 --> 00:19:51,200
this 6E

417
00:19:51,200 --> 00:19:56,100
38 and so on and so on is exactly here

418
00:19:56,100 --> 00:19:59,280
it is the same piece of the data it is

419
00:19:59,280 --> 00:20:01,220
the hash of the file

420
00:20:01,220 --> 00:20:05,400
the applocker version of the hash being

421
00:20:05,400 --> 00:20:09,000
stored as an external attribute extended

422
00:20:09,000 --> 00:20:13,260
attribute of a file and how a blocker

423
00:20:13,260 --> 00:20:16,679
Works a blocker does not calculate the

424
00:20:16,679 --> 00:20:20,100
hash every single file run

425
00:20:20,100 --> 00:20:22,140
it would be time consuming it will be

426
00:20:22,140 --> 00:20:24,000
too expensive in terms of computation

427
00:20:24,000 --> 00:20:27,780
storage operation etc etc so at the

428
00:20:27,780 --> 00:20:30,900
first run this extended attribute is

429
00:20:30,900 --> 00:20:33,360
created it contains the applocker hash

430
00:20:33,360 --> 00:20:36,840
of the file and during next runs only

431
00:20:36,840 --> 00:20:40,919
the cached hash is being verified

432
00:20:40,919 --> 00:20:43,620
what does it mean if I manipulate the

433
00:20:43,620 --> 00:20:46,500
file on the Hardware level which I did

434
00:20:46,500 --> 00:20:51,419
using hex editor on my vhdx file the

435
00:20:51,419 --> 00:20:53,640
hash is not being updated

436
00:20:53,640 --> 00:20:57,240
and a Blocker still relies on the hash

437
00:20:57,240 --> 00:20:59,700
even if the hash does not actually match

438
00:20:59,700 --> 00:21:01,679
the file so I can manipulate The Flash

439
00:21:01,679 --> 00:21:04,020
and applocker believes it's cache

440
00:21:04,020 --> 00:21:06,480
instead of real file content

441
00:21:06,480 --> 00:21:08,700
when it comes to such extended

442
00:21:08,700 --> 00:21:11,780
attributes again some documentation

443
00:21:11,780 --> 00:21:15,780
exists it is here about kernel extended

444
00:21:15,780 --> 00:21:17,700
attributes about two interesting things

445
00:21:17,700 --> 00:21:20,700
here I will scroll a bit to find the

446
00:21:20,700 --> 00:21:21,799
information

447
00:21:21,799 --> 00:21:24,860
which I want to show you is about dollar

448
00:21:24,860 --> 00:21:29,299
kernel.part actually if the

449
00:21:29,900 --> 00:21:33,360
extended attribute name starts with the

450
00:21:33,360 --> 00:21:36,539
dollar kernel it is a kind of a flag for

451
00:21:36,539 --> 00:21:41,640
the NTFS driver only kernel code can

452
00:21:41,640 --> 00:21:44,580
create such extended attribute so I

453
00:21:44,580 --> 00:21:46,740
cannot create a dollar kernel something

454
00:21:46,740 --> 00:21:48,900
something on my own if my code is

455
00:21:48,900 --> 00:21:51,059
running in the user mode and not in the

456
00:21:51,059 --> 00:21:55,740
kernel mode but perch means if the file

457
00:21:55,740 --> 00:21:59,220
is being touched exactly saying any of

458
00:21:59,220 --> 00:22:02,840
those operations is being performed

459
00:22:02,840 --> 00:22:06,240
then an entire attribute must be removed

460
00:22:06,240 --> 00:22:08,760
automatically by the NTFS driver it is

461
00:22:08,760 --> 00:22:12,000
why the hash is good enough if I

462
00:22:12,000 --> 00:22:14,100
manipulate the file the typical the

463
00:22:14,100 --> 00:22:16,740
standard way but if I manipulate the

464
00:22:16,740 --> 00:22:19,200
drive which is plugged off of my machine

465
00:22:19,200 --> 00:22:21,840
there is no way NTFS driver will realize

466
00:22:21,840 --> 00:22:23,520
what I'm actually doing

467
00:22:23,520 --> 00:22:28,380
so it is how it is working so applocker

468
00:22:28,380 --> 00:22:30,600
relies on this hash and if we are smart

469
00:22:30,600 --> 00:22:37,219
enough digging deeply enough in the

470
00:22:37,400 --> 00:22:40,559
structure we can manipulate the data

471
00:22:40,559 --> 00:22:43,280
without being noticed by the

472
00:22:43,280 --> 00:22:46,919
ntfs.driver so the the attribute is not

473
00:22:46,919 --> 00:22:48,720
being automatically removed if I edit

474
00:22:48,720 --> 00:22:50,820
this file traditionally of course this

475
00:22:50,820 --> 00:22:53,159
extended attribute will disappear and

476
00:22:53,159 --> 00:22:55,020
during next run a blocker will

477
00:22:55,020 --> 00:22:57,240
recalculate the hash from the new file

478
00:22:57,240 --> 00:22:59,880
maybe the same one but it will

479
00:22:59,880 --> 00:23:04,400
recalculated and it will put it into the

480
00:23:04,400 --> 00:23:07,740
extended attribute there is interesting

481
00:23:07,740 --> 00:23:09,620
thing over here because

482
00:23:09,620 --> 00:23:13,620
there is a clear proof that a plucker

483
00:23:13,620 --> 00:23:18,179
trying to allow or disallow a DOT exit

484
00:23:18,179 --> 00:23:20,820
file from being run realize on its cache

485
00:23:20,820 --> 00:23:24,179
being on its hash being cached

486
00:23:24,179 --> 00:23:27,840
but we have also uh

487
00:23:27,840 --> 00:23:30,900
a special command called Tesla blocker

488
00:23:30,900 --> 00:23:34,140
policy which is a commandlet in the

489
00:23:34,140 --> 00:23:35,299
Powershell

490
00:23:35,299 --> 00:23:39,720
uh asking a blocker what a blocker would

491
00:23:39,720 --> 00:23:42,840
said say about this file if we try to

492
00:23:42,840 --> 00:23:45,440
run so

493
00:23:45,440 --> 00:23:47,400
I will

494
00:23:47,400 --> 00:23:50,520
put this XML file into a file and let's

495
00:23:50,520 --> 00:23:53,940
call it xml.txt

496
00:23:55,580 --> 00:23:58,860
out file

497
00:23:58,860 --> 00:24:03,020
out file xml.txt so now I have my

498
00:24:03,020 --> 00:24:06,419
applocker policy safe into pxe file

499
00:24:06,419 --> 00:24:09,120
because the next command and the command

500
00:24:09,120 --> 00:24:10,640
test

501
00:24:10,640 --> 00:24:12,860
applocker policy

502
00:24:12,860 --> 00:24:16,559
requires a file to be specified test app

503
00:24:16,559 --> 00:24:21,240
Locker policy requires XML policy

504
00:24:21,240 --> 00:24:21,840
um

505
00:24:21,840 --> 00:24:27,780
to be specified so it is test a boss

506
00:24:27,780 --> 00:24:31,200
XML txt thank you and it requires

507
00:24:31,200 --> 00:24:34,260
another parameter which is path let's

508
00:24:34,260 --> 00:24:37,140
say it is about right IAA here and on

509
00:24:37,140 --> 00:24:39,659
the legitimate file it will say it is

510
00:24:39,659 --> 00:24:42,299
allowed it is policy decision allowed

511
00:24:42,299 --> 00:24:44,520
because we have a matching row called

512
00:24:44,520 --> 00:24:47,220
Write a this is the name of the rule as

513
00:24:47,220 --> 00:24:50,220
well so it is saying based on this rule

514
00:24:50,220 --> 00:24:52,679
we will allow this file to be run if I

515
00:24:52,679 --> 00:24:56,340
do the same on the X drive and my

516
00:24:56,340 --> 00:24:58,939
manipulated

517
00:24:59,100 --> 00:25:01,919
content you will see it will be denied

518
00:25:01,919 --> 00:25:06,120
by default because applocker relies on

519
00:25:06,120 --> 00:25:08,640
the cache and test a blocker policy

520
00:25:08,640 --> 00:25:11,520
command relies on the real file content

521
00:25:11,520 --> 00:25:14,220
just to make it consistent and look more

522
00:25:14,220 --> 00:25:16,140
Microsoft this way

523
00:25:16,140 --> 00:25:18,419
and so

524
00:25:18,419 --> 00:25:20,460
Please be aware that such manipulations

525
00:25:20,460 --> 00:25:23,280
are possible only if you have a physical

526
00:25:23,280 --> 00:25:25,320
access to the drive because it's not

527
00:25:25,320 --> 00:25:27,840
something end user can do it can do

528
00:25:27,840 --> 00:25:31,320
easily even attaching detaching vhd file

529
00:25:31,320 --> 00:25:33,720
is not something allowed for the end

530
00:25:33,720 --> 00:25:34,980
user

531
00:25:34,980 --> 00:25:37,080
uh easily because it requires some

532
00:25:37,080 --> 00:25:39,179
privileges a typical user does not have

533
00:25:39,179 --> 00:25:41,220
but when it comes to the USB drive being

534
00:25:41,220 --> 00:25:43,320
plugged out and plugged in then we are

535
00:25:43,320 --> 00:25:44,820
on the good side and we can try to

536
00:25:44,820 --> 00:25:47,820
manipulate it maybe hashes and such

537
00:25:47,820 --> 00:25:49,860
manipulations are not that common but we

538
00:25:49,860 --> 00:25:53,760
are still on the right by uh right path

539
00:25:53,760 --> 00:25:56,760
I would say instead of manipulating the

540
00:25:56,760 --> 00:25:59,520
file content which has a very limited

541
00:25:59,520 --> 00:26:02,640
practical applications

542
00:26:02,640 --> 00:26:04,799
um but clearly

543
00:26:04,799 --> 00:26:09,059
proving my idea we can write an

544
00:26:09,059 --> 00:26:12,059
attribute to an existing file so

545
00:26:12,059 --> 00:26:15,140
um I will exit from Powershell I will

546
00:26:15,140 --> 00:26:18,659
run my pounding applications it is

547
00:26:18,659 --> 00:26:21,419
working if I go for a blocker policy F5

548
00:26:21,419 --> 00:26:24,200
you can see this application was

549
00:26:24,200 --> 00:26:27,179
detected as unwanted right now is

550
00:26:27,179 --> 00:26:28,799
allowed to be run but if you play

551
00:26:28,799 --> 00:26:30,659
seriously it would not

552
00:26:30,659 --> 00:26:33,419
so

553
00:26:33,419 --> 00:26:38,539
if I know I have some

554
00:26:38,779 --> 00:26:43,279
hash based rule I can try to play

555
00:26:43,279 --> 00:26:46,320
with this as well so I will copy it to

556
00:26:46,320 --> 00:26:48,659
the X drive as manipulation of the on

557
00:26:48,659 --> 00:26:52,260
the X Drive I easier copy

558
00:26:52,260 --> 00:26:53,159
um

559
00:26:53,159 --> 00:26:58,020
my X Drive X primary application was

560
00:26:58,020 --> 00:27:00,360
around but it would not be allowed to

561
00:27:00,360 --> 00:27:02,340
run if we play seriously which is

562
00:27:02,340 --> 00:27:05,279
clearly stated xpwn was allowed but

563
00:27:05,279 --> 00:27:07,919
would have been prevented from running

564
00:27:07,919 --> 00:27:10,500
and I know

565
00:27:10,500 --> 00:27:12,360
I have

566
00:27:12,360 --> 00:27:13,679
um

567
00:27:13,679 --> 00:27:17,460
my hash being prepared and within my

568
00:27:17,460 --> 00:27:19,980
policy I will copy the hash from here it

569
00:27:19,980 --> 00:27:22,679
is the easiest place to take the hash in

570
00:27:22,679 --> 00:27:24,539
its uh

571
00:27:24,539 --> 00:27:29,580
at the perform I can try to create an

572
00:27:29,580 --> 00:27:33,840
extended attribute on a file which

573
00:27:33,840 --> 00:27:37,860
already exists my xpwm I cannot create

574
00:27:37,860 --> 00:27:40,860
what Microsoft documentation says I

575
00:27:40,860 --> 00:27:43,080
cannot create dollar kernel something

576
00:27:43,080 --> 00:27:45,240
something but I will do a dirty trick

577
00:27:45,240 --> 00:27:47,220
over here I will create an attribute

578
00:27:47,220 --> 00:27:49,740
called hash kernel something something

579
00:27:49,740 --> 00:27:52,860
and then I will rename it offline

580
00:27:52,860 --> 00:27:57,539
which will be easier so here I have my

581
00:27:57,539 --> 00:28:00,679
set a blocker hashcash application

582
00:28:00,679 --> 00:28:05,520
it requires a file name and the hash so

583
00:28:05,520 --> 00:28:10,559
it is setup Locker X pwn and the hash I

584
00:28:10,559 --> 00:28:11,820
have just copied

585
00:28:11,820 --> 00:28:13,020
he

586
00:28:13,020 --> 00:28:17,460
ah it's on my X drive he already has so

587
00:28:17,460 --> 00:28:23,820
I will Ex pwn and I will call P pwn from

588
00:28:23,820 --> 00:28:26,820
the desktop the X drive my application

589
00:28:26,820 --> 00:28:30,059
is protecting is uh

590
00:28:30,059 --> 00:28:34,320
uh not allowing you to create a hash the

591
00:28:34,320 --> 00:28:36,659
extend that will which already exists

592
00:28:36,659 --> 00:28:40,320
the X drive right now it does not have

593
00:28:40,320 --> 00:28:43,380
the uh extended attribute I can clearly

594
00:28:43,380 --> 00:28:49,940
prove it by FSU till file query a a x

595
00:28:49,940 --> 00:28:53,640
pwn no standard attributes so I will do

596
00:28:53,640 --> 00:28:58,440
a command line magic watch carefully F7

597
00:28:58,440 --> 00:29:02,460
and I will use a history and now it was

598
00:29:02,460 --> 00:29:04,860
planted over here with the name dollar

599
00:29:04,860 --> 00:29:08,340
kernel which I need to change a hash

600
00:29:08,340 --> 00:29:09,600
kernel I need to change the dollar

601
00:29:09,600 --> 00:29:13,260
kernel I will do this offline by

602
00:29:13,260 --> 00:29:18,620
um detection VG Drive yes by running my

603
00:29:18,620 --> 00:29:20,760
hex editor

604
00:29:20,760 --> 00:29:23,880
again on the same

605
00:29:23,880 --> 00:29:26,820
file Ctrl H

606
00:29:26,820 --> 00:29:31,080
Ctrl H or Ctrl R control R search for

607
00:29:31,080 --> 00:29:35,159
dollar kernel dot Purge

608
00:29:35,159 --> 00:29:39,120
dot into the hash sorry for hash

609
00:29:39,120 --> 00:29:44,299
changing to Dollar kernel dot Purge

610
00:29:44,299 --> 00:29:48,840
dot replace all couple of occurrences

611
00:29:48,840 --> 00:29:53,220
will be replaced okay save

612
00:29:53,220 --> 00:29:58,700
and close and attach a file again

613
00:29:58,700 --> 00:30:02,779
action at ADV

614
00:30:08,340 --> 00:30:10,799
but the first one was hash kernel the

615
00:30:10,799 --> 00:30:13,919
second one was dollar kernel

616
00:30:13,919 --> 00:30:19,620
um a c temp x v h d x will be attached

617
00:30:19,620 --> 00:30:22,500
and right now if I do the same command I

618
00:30:22,500 --> 00:30:27,000
use a moment ago for displaying uh we

619
00:30:27,000 --> 00:30:30,000
had no extended attributes after fsutil

620
00:30:30,000 --> 00:30:31,919
file Courier a we had no extended

621
00:30:31,919 --> 00:30:36,419
attributes right now F7 and FSU till and

622
00:30:36,419 --> 00:30:39,059
so on I have it added by an application

623
00:30:39,059 --> 00:30:41,220
and then renamed to Dollar kernel per

624
00:30:41,220 --> 00:30:45,419
trap ID hashing phone by my physical

625
00:30:45,419 --> 00:30:48,840
Drive data manipulation by raw disk

626
00:30:48,840 --> 00:30:53,399
access so if I run xpwn right now it is

627
00:30:53,399 --> 00:30:56,279
running but the true will stick out out

628
00:30:56,279 --> 00:30:58,679
from the event log it was allowed to be

629
00:30:58,679 --> 00:31:01,440
run as applocker realize only on it has

630
00:31:01,440 --> 00:31:04,500
so I can plan a hash

631
00:31:04,500 --> 00:31:07,440
a cache of the hash on an existing file

632
00:31:07,440 --> 00:31:10,679
if I want however I cannot directly name

633
00:31:10,679 --> 00:31:12,899
it dollar kernel that is not allowed by

634
00:31:12,899 --> 00:31:16,080
user mode and I I'm running my

635
00:31:16,080 --> 00:31:18,840
applications from the user mode

636
00:31:18,840 --> 00:31:21,740
obviously

637
00:31:34,320 --> 00:31:37,320
foreign

638
00:31:39,799 --> 00:31:42,179
when I have a possibility to manipulate

639
00:31:42,179 --> 00:31:45,919
on the offline Drive probably yes

640
00:31:57,240 --> 00:32:00,600
if I am creating an extended attribute

641
00:32:00,600 --> 00:32:02,120
using

642
00:32:02,120 --> 00:32:06,020
ntfs.sys driver dollar kernel

643
00:32:06,020 --> 00:32:08,700
prefix is not allowed if I'm

644
00:32:08,700 --> 00:32:11,360
manipulating the data offline under

645
00:32:11,360 --> 00:32:13,980
ntfs.driver there is no such restriction

646
00:32:13,980 --> 00:32:17,399
I hope it answers your question

647
00:32:17,399 --> 00:32:21,419
so I can plant a fake

648
00:32:21,419 --> 00:32:23,640
cash information

649
00:32:23,640 --> 00:32:28,020
on an existing file I have also a copy I

650
00:32:28,020 --> 00:32:30,470
can also copy and

651
00:32:30,470 --> 00:32:30,840
[Music]

652
00:32:30,840 --> 00:32:32,480
um

653
00:32:32,480 --> 00:32:35,399
existing set of extended attributes from

654
00:32:35,399 --> 00:32:37,740
one file to another one I have a tiny

655
00:32:37,740 --> 00:32:41,880
application copy AAS I can specify

656
00:32:41,880 --> 00:32:43,679
source file and the destination file and

657
00:32:43,679 --> 00:32:45,299
I will simply copy everything so I can

658
00:32:45,299 --> 00:32:48,779
plant a hash cache

659
00:32:48,779 --> 00:32:51,840
or I can copy everything because if yeah

660
00:32:51,840 --> 00:32:55,860
if I do let's see CMD should be great

661
00:32:55,860 --> 00:32:59,340
example FSU

662
00:32:59,340 --> 00:33:01,919
till

663
00:33:01,919 --> 00:33:03,000
um

664
00:33:03,000 --> 00:33:08,000
file where a a c Windows

665
00:33:08,000 --> 00:33:10,279
Cemetery tool

666
00:33:10,279 --> 00:33:13,620
cmd.exe you can see this is a different

667
00:33:13,620 --> 00:33:14,539
one

668
00:33:14,539 --> 00:33:17,460
I will show it on the right IAA as my

669
00:33:17,460 --> 00:33:21,620
right IA application is digitally signed

670
00:33:21,679 --> 00:33:25,620
my applications so the same comment but

671
00:33:25,620 --> 00:33:27,779
not on the SC Windows which is a

672
00:33:27,779 --> 00:33:29,360
slightly different way

673
00:33:29,360 --> 00:33:31,799
manage when it comes to the signatures

674
00:33:31,799 --> 00:33:35,279
right AAA you can see there is a lot of

675
00:33:35,279 --> 00:33:38,159
information the first one Aid one is

676
00:33:38,159 --> 00:33:39,600
about the

677
00:33:39,600 --> 00:33:43,860
um hash cache the second one here

678
00:33:43,860 --> 00:33:48,120
it is called clearly called signer info

679
00:33:48,120 --> 00:33:52,399
it is identified by aid3 and this a

680
00:33:52,399 --> 00:33:55,679
cached information of the digital

681
00:33:55,679 --> 00:33:58,279
signature being planned on this file

682
00:33:58,279 --> 00:34:02,399
so theoretically you can also play with

683
00:34:02,399 --> 00:34:06,899
digital signatures uh hash as digital

684
00:34:06,899 --> 00:34:09,060
signature is not verify every single

685
00:34:09,060 --> 00:34:14,239
file run it is also being used from the

686
00:34:14,239 --> 00:34:18,480
cache so we have some possibility to to

687
00:34:18,480 --> 00:34:20,520
manipulate this

688
00:34:20,520 --> 00:34:22,580
um

689
00:34:22,918 --> 00:34:26,280
typically I hear two very common

690
00:34:26,280 --> 00:34:28,199
questions to the reasonable questions

691
00:34:28,199 --> 00:34:31,800
when it comes to such directly plays

692
00:34:31,800 --> 00:34:35,699
with a blocker hash cash the first one

693
00:34:35,699 --> 00:34:39,540
can we manipulate it the same way not on

694
00:34:39,540 --> 00:34:43,379
the file image but on the CD image the

695
00:34:43,379 --> 00:34:46,379
answer is no because on the CD image we

696
00:34:46,379 --> 00:34:48,839
have cdfs file system and not ntfsi

697
00:34:48,839 --> 00:34:50,159
system it is totally different file

698
00:34:50,159 --> 00:34:53,099
system so we cannot do this which is

699
00:34:53,099 --> 00:34:57,540
great news for Defenders as a regular

700
00:34:57,540 --> 00:34:59,660
user cannot Mount

701
00:34:59,660 --> 00:35:03,060
vhd file can plug in the physical drive

702
00:35:03,060 --> 00:35:05,220
if it's allowed by policies but typical

703
00:35:05,220 --> 00:35:08,240
user can

704
00:35:09,140 --> 00:35:12,839
amount.iso file with the CD image but it

705
00:35:12,839 --> 00:35:15,140
will not work for the

706
00:35:15,140 --> 00:35:18,599
isofits another question I hear

707
00:35:18,599 --> 00:35:20,480
sometimes is about

708
00:35:20,480 --> 00:35:22,980
WDC Windows Defender application control

709
00:35:22,980 --> 00:35:28,880
what about WDC and the answer is wdac

710
00:35:28,880 --> 00:35:33,480
relies on such uh cash as well of course

711
00:35:33,480 --> 00:35:35,820
those attributes are named slightly

712
00:35:35,820 --> 00:35:38,599
differently but at the same time

713
00:35:38,599 --> 00:35:44,640
wdac does not want to use cash from the

714
00:35:44,640 --> 00:35:48,599
external drives it relies only on the

715
00:35:48,599 --> 00:35:51,660
cached information from the system Drive

716
00:35:51,660 --> 00:35:54,240
so you cannot plug in the falsified

717
00:35:54,240 --> 00:35:57,560
drive you have to plug out the C drive

718
00:35:57,560 --> 00:36:00,660
manipulate it offline or by running from

719
00:36:00,660 --> 00:36:05,640
some uh bootable USB whatever and then

720
00:36:05,640 --> 00:36:08,400
WDC will rely on this information

721
00:36:08,400 --> 00:36:11,040
properly so it is theoretically possible

722
00:36:11,040 --> 00:36:13,140
at the same time if you can manipulate

723
00:36:13,140 --> 00:36:15,240
the drive content offline for the C

724
00:36:15,240 --> 00:36:17,820
drive you own this system anyway you can

725
00:36:17,820 --> 00:36:20,460
do anything you want so manipulating the

726
00:36:20,460 --> 00:36:23,820
the cache for the something something to

727
00:36:23,820 --> 00:36:25,800
have one application allowed to be run

728
00:36:25,800 --> 00:36:28,079
is definitely Overkill if you can do

729
00:36:28,079 --> 00:36:30,980
anything if you have and

730
00:36:30,980 --> 00:36:35,880
offline access okay when it comes to

731
00:36:35,880 --> 00:36:40,440
shift five resources I used to share my

732
00:36:40,440 --> 00:36:42,480
source code for those applications my

733
00:36:42,480 --> 00:36:43,740
research

734
00:36:43,740 --> 00:36:46,260
Etc this QR code if you really want is

735
00:36:46,260 --> 00:36:49,200
just the set of links being provided in

736
00:36:49,200 --> 00:36:51,660
a form you can use

737
00:36:51,660 --> 00:36:55,619
on your phone on your device instead of

738
00:36:55,619 --> 00:36:57,720
typing in especially the last link is

739
00:36:57,720 --> 00:37:01,380
Type in Friendly so you have them handy

740
00:37:01,380 --> 00:37:02,940
if you want you can also scan my screen

741
00:37:02,940 --> 00:37:04,920
later on

742
00:37:04,920 --> 00:37:09,119
um when it comes to a blocker I try to

743
00:37:09,119 --> 00:37:12,240
show you its imperfections

744
00:37:12,240 --> 00:37:15,420
and it is how I call it it's about

745
00:37:15,420 --> 00:37:19,320
imperfections it's applocker worth using

746
00:37:19,320 --> 00:37:23,940
yes definitely yes it really Rises the

747
00:37:23,940 --> 00:37:27,200
bar for bad guys even if it's not 100

748
00:37:27,200 --> 00:37:30,660
effective it is rising the bar

749
00:37:30,660 --> 00:37:33,480
so you have a huge advantage using it

750
00:37:33,480 --> 00:37:36,480
the good news and it is a kind of fresh

751
00:37:36,480 --> 00:37:38,900
news is like two months old

752
00:37:38,900 --> 00:37:41,880
so comparing to the history of apoca is

753
00:37:41,880 --> 00:37:43,520
really new

754
00:37:43,520 --> 00:37:46,760
applocker starting this February

755
00:37:46,760 --> 00:37:51,420
is allowed to be run on Windows 10 Pro

756
00:37:51,420 --> 00:37:54,000
previously it was allowed to be run only

757
00:37:54,000 --> 00:37:56,839
on Windows 10 Enterprise and on servers

758
00:37:56,839 --> 00:38:00,060
which clearly limits its

759
00:38:00,060 --> 00:38:02,820
potential in Practical scenarios right

760
00:38:02,820 --> 00:38:05,460
now you can launch and manage a Blocker

761
00:38:05,460 --> 00:38:08,700
in Windows Pro as well

762
00:38:08,700 --> 00:38:12,420
when it comes to Performance well you

763
00:38:12,420 --> 00:38:14,040
will clearly see it is not affecting

764
00:38:14,040 --> 00:38:15,900
performance if you run it in the audit

765
00:38:15,900 --> 00:38:18,660
mode so so you can turn audit mode

766
00:38:18,660 --> 00:38:21,960
literally audit mode literally today

767
00:38:21,960 --> 00:38:25,020
and observe what will happen in your log

768
00:38:25,020 --> 00:38:28,200
for that blocker and then try to narrow

769
00:38:28,200 --> 00:38:30,839
down rules to allow what you want to

770
00:38:30,839 --> 00:38:33,300
allow and then switch it to them and

771
00:38:33,300 --> 00:38:36,720
form enforcement mode and raise the bar

772
00:38:36,720 --> 00:38:39,900
for bad guys and make your systems

773
00:38:39,900 --> 00:38:40,680
better

774
00:38:40,680 --> 00:38:43,800
protected that's basically it thank you

775
00:38:43,800 --> 00:38:44,150
very much

776
00:38:44,150 --> 00:38:47,220
[Applause]

777
00:38:47,220 --> 00:38:50,220
thank you Greg that was awesome

778
00:38:50,220 --> 00:38:52,200
great presentation thank you thank you

779
00:38:52,200 --> 00:38:55,440
does anybody have any question comments

780
00:38:55,440 --> 00:38:59,300
remarks that they would like to make

781
00:39:05,630 --> 00:39:07,700
[Music]

782
00:39:07,700 --> 00:39:12,240
okay so since the user can can mount an

783
00:39:12,240 --> 00:39:16,800
ISO image you can theoretically do the

784
00:39:16,800 --> 00:39:19,320
same thing to the iso image right I saw

785
00:39:19,320 --> 00:39:21,720
image uses different file system is

786
00:39:21,720 --> 00:39:24,660
using cdfs which does not have extended

787
00:39:24,660 --> 00:39:26,880
attributes okay so it is impossible to

788
00:39:26,880 --> 00:39:29,640
be done with ISO image is this possible

789
00:39:29,640 --> 00:39:33,420
using say uh

790
00:39:33,420 --> 00:39:37,260
and USB yes yes when you format USB to

791
00:39:37,260 --> 00:39:39,660
ndfs and manipulate it this way it is

792
00:39:39,660 --> 00:39:41,940
possible for USB yet another reason to

793
00:39:41,940 --> 00:39:44,880
block unwanted USB devices so so you can

794
00:39:44,880 --> 00:39:48,599
still send them if you have the hash you

795
00:39:48,599 --> 00:39:50,700
can send them USB they will run it from

796
00:39:50,700 --> 00:39:52,440
the USB and they will be able to to

797
00:39:52,440 --> 00:39:53,700
bypass the app Locker right

798
00:39:53,700 --> 00:39:55,560
theoretically

799
00:39:55,560 --> 00:39:59,220
yep I can imagine this okay okay thanks

800
00:39:59,220 --> 00:40:01,759
welcome

801
00:40:02,119 --> 00:40:04,800
any other question

802
00:40:04,800 --> 00:40:08,480
going once going twice

803
00:40:08,940 --> 00:40:12,780
okay great speech uh I have just a quick

804
00:40:12,780 --> 00:40:16,140
question uh most of us it security guys

805
00:40:16,140 --> 00:40:18,300
know that app Locker can be run as a

806
00:40:18,300 --> 00:40:19,859
local user

807
00:40:19,859 --> 00:40:22,820
so what are the exceptions in this case

808
00:40:22,820 --> 00:40:26,700
if we have configured app locker from

809
00:40:26,700 --> 00:40:30,300
the admin permissions or admin sites so

810
00:40:30,300 --> 00:40:33,180
what can be done using local user

811
00:40:33,180 --> 00:40:34,920
permission in this case

812
00:40:34,920 --> 00:40:39,240
uh well if you are a local user by

813
00:40:39,240 --> 00:40:40,980
passing a locker a blocker will be not

814
00:40:40,980 --> 00:40:43,200
that easy if system is up to date and

815
00:40:43,200 --> 00:40:45,420
fully passed in the past we had like a

816
00:40:45,420 --> 00:40:48,540
Sandbox einert flag which could be used

817
00:40:48,540 --> 00:40:51,240
by end user in the past but right now

818
00:40:51,240 --> 00:40:53,099
you cannot seal the token from the

819
00:40:53,099 --> 00:40:55,140
service which I did it requires admin

820
00:40:55,140 --> 00:40:57,240
permissions particularly as a debug

821
00:40:57,240 --> 00:40:59,640
privilege on the uh within the token of

822
00:40:59,640 --> 00:41:02,099
the attacker so you must be an admin

823
00:41:02,099 --> 00:41:03,020
already

824
00:41:03,020 --> 00:41:05,820
for end user you can try to download

825
00:41:05,820 --> 00:41:08,700
potentially malicious dll if dlls are

826
00:41:08,700 --> 00:41:11,160
not white listed because dll can contain

827
00:41:11,160 --> 00:41:14,520
the same maliciousness of the code AS

828
00:41:14,520 --> 00:41:17,820
executable file and trust me even if

829
00:41:17,820 --> 00:41:19,680
companies are implementing but a bit

830
00:41:19,680 --> 00:41:21,920
like a blocker

831
00:41:21,920 --> 00:41:26,160
they are leaving dll white listing for

832
00:41:26,160 --> 00:41:28,619
the next stage in the future this is how

833
00:41:28,619 --> 00:41:31,619
they do this so if you are a bad guy put

834
00:41:31,619 --> 00:41:33,599
your stuff into dll and then run your

835
00:41:33,599 --> 00:41:36,119
dll using kind of a site loader for data

836
00:41:36,119 --> 00:41:37,740
starting from an ideal level 32 which is

837
00:41:37,740 --> 00:41:40,380
perfectly allowed or like SRV or some

838
00:41:40,380 --> 00:41:43,280
other system applications

839
00:41:43,280 --> 00:41:46,859
loading arbitrary dlls and put your code

840
00:41:46,859 --> 00:41:49,800
into dll it is what I was advice to bad

841
00:41:49,800 --> 00:41:50,579
guys

842
00:41:50,579 --> 00:41:53,099
but well if You observe this closely

843
00:41:53,099 --> 00:41:54,540
probably you will realize something

844
00:41:54,540 --> 00:41:58,320
wrong is going on and at the same time

845
00:41:58,320 --> 00:42:01,160
still it is well worth

846
00:42:01,160 --> 00:42:03,300
implementing a blocker because you're

847
00:42:03,300 --> 00:42:05,359
raising the bar even if it's not 100

848
00:42:05,359 --> 00:42:09,140
successful thank you

849
00:42:12,660 --> 00:42:15,680
any other question

850
00:42:16,619 --> 00:42:19,140
Gregory

851
00:42:19,140 --> 00:42:21,799
thank you

