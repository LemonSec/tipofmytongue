1
00:00:04,319 --> 00:00:05,839
my name is chris

2
00:00:05,839 --> 00:00:08,080
i work for bishop fox doing offensive

3
00:00:08,080 --> 00:00:09,760
security

4
00:00:09,760 --> 00:00:11,599
today i'm going to demonstrate a hacking

5
00:00:11,599 --> 00:00:12,719
technique

6
00:00:12,719 --> 00:00:15,519
a little context behind this talk

7
00:00:15,519 --> 00:00:17,279
if you've ever been hacking a website

8
00:00:17,279 --> 00:00:20,080
and you have like html injection but not

9
00:00:20,080 --> 00:00:22,160
quite cross-site scripting this is a

10
00:00:22,160 --> 00:00:24,480
technique you can use to potentially get

11
00:00:24,480 --> 00:00:26,800
cross-site scripting

12
00:00:26,800 --> 00:00:28,000
so

13
00:00:28,000 --> 00:00:30,560
in order to fully understand this you

14
00:00:30,560 --> 00:00:31,679
have to have some like basic

15
00:00:31,679 --> 00:00:33,360
understanding and a little deeper

16
00:00:33,360 --> 00:00:35,440
understanding of how html is actually

17
00:00:35,440 --> 00:00:36,800
parsed

18
00:00:36,800 --> 00:00:39,600
um a very relevant pieces name spaces

19
00:00:39,600 --> 00:00:42,800
and their relation to the html parser so

20
00:00:42,800 --> 00:00:44,640
we'll be going through that as well

21
00:00:44,640 --> 00:00:46,879
and then some special parsing rules uh

22
00:00:46,879 --> 00:00:48,559
once we go through those understandings

23
00:00:48,559 --> 00:00:50,719
we'll get to actual exploitation and go

24
00:00:50,719 --> 00:00:51,760
through some

25
00:00:51,760 --> 00:00:54,399
like real world hacks that

26
00:00:54,399 --> 00:00:57,879
came out of this

27
00:00:59,920 --> 00:01:01,920
uh so here's kind of a high level of how

28
00:01:01,920 --> 00:01:04,959
the html parser actually works

29
00:01:04,959 --> 00:01:07,600
so the network stage is mostly relevant

30
00:01:07,600 --> 00:01:10,080
to us for this talk that just refers to

31
00:01:10,080 --> 00:01:12,400
like the html document actually

32
00:01:12,400 --> 00:01:14,240
being received by the user's browser so

33
00:01:14,240 --> 00:01:15,920
like the network transfer

34
00:01:15,920 --> 00:01:18,159
the tokenization this is very

35
00:01:18,159 --> 00:01:20,560
interesting to us as attackers

36
00:01:20,560 --> 00:01:22,799
this is the like lexical parsing piece

37
00:01:22,799 --> 00:01:24,640
of the html parser

38
00:01:24,640 --> 00:01:26,640
what this does

39
00:01:26,640 --> 00:01:28,240
is essentially when it comes across an

40
00:01:28,240 --> 00:01:30,000
html element

41
00:01:30,000 --> 00:01:31,520
it's going to create a token for that

42
00:01:31,520 --> 00:01:33,119
and it's going to determine the data

43
00:01:33,119 --> 00:01:35,680
type that is in that element

44
00:01:35,680 --> 00:01:37,759
right and there's four main data types

45
00:01:37,759 --> 00:01:41,280
so we have rc data raw text plain text

46
00:01:41,280 --> 00:01:43,200
and data

47
00:01:43,200 --> 00:01:45,759
rc data raw text plain text those are

48
00:01:45,759 --> 00:01:48,159
all text like pure text all they're

49
00:01:48,159 --> 00:01:50,640
going to do is update the page's text

50
00:01:50,640 --> 00:01:53,600
data is like computer instruction that's

51
00:01:53,600 --> 00:01:55,360
going to alter the page that's what we

52
00:01:55,360 --> 00:01:57,920
want as attackers

53
00:01:57,920 --> 00:01:59,840
tree construction refers to like when

54
00:01:59,840 --> 00:02:01,439
the dom is actually built and written to

55
00:02:01,439 --> 00:02:03,759
a tree and then it's actually pushed to

56
00:02:03,759 --> 00:02:06,000
the dom which is

57
00:02:06,000 --> 00:02:09,119
the html document as we view it script

58
00:02:09,119 --> 00:02:10,720
execution is just if you have like a

59
00:02:10,720 --> 00:02:12,879
document.right it'll run this process

60
00:02:12,879 --> 00:02:14,879
again

61
00:02:14,879 --> 00:02:16,560
so to better understand it here's like a

62
00:02:16,560 --> 00:02:19,280
visualization of what that looks like

63
00:02:19,280 --> 00:02:21,520
say you come across like an iframe tag

64
00:02:21,520 --> 00:02:22,720
tag

65
00:02:22,720 --> 00:02:24,720
everything in that iframe is going to be

66
00:02:24,720 --> 00:02:26,160
raw text

67
00:02:26,160 --> 00:02:29,200
so anything in iframe tags like not the

68
00:02:29,200 --> 00:02:31,519
attributes of course but the tag itself

69
00:02:31,519 --> 00:02:33,040
is just text

70
00:02:33,040 --> 00:02:35,440
so it's a non-dangerous data type which

71
00:02:35,440 --> 00:02:36,720
is going to be key once we get to

72
00:02:36,720 --> 00:02:38,160
exploitation

73
00:02:38,160 --> 00:02:39,840
h1 is just an example of something

74
00:02:39,840 --> 00:02:42,160
that's actually computer instruction

75
00:02:42,160 --> 00:02:45,519
changing the application

76
00:02:47,200 --> 00:02:48,480
so again

77
00:02:48,480 --> 00:02:50,400
another way to visualize that is into

78
00:02:50,400 --> 00:02:52,480
kind of two categories so we have

79
00:02:52,480 --> 00:02:56,319
non-dangerous which is text data

80
00:02:56,319 --> 00:02:58,319
and dangerous

81
00:02:58,319 --> 00:02:59,519
which is any kind of computer

82
00:02:59,519 --> 00:03:01,599
instruction that's we're gonna we're

83
00:03:01,599 --> 00:03:04,080
gonna get our like javascript execution

84
00:03:04,080 --> 00:03:08,239
as an attacker we want data

85
00:03:12,560 --> 00:03:15,200
so html parser recognizes more than just

86
00:03:15,200 --> 00:03:19,360
html it also recognizes math and svg

87
00:03:19,360 --> 00:03:20,959
um so these are actually completely

88
00:03:20,959 --> 00:03:23,200
different name spaces

89
00:03:23,200 --> 00:03:25,280
what that does is it doesn't actually

90
00:03:25,280 --> 00:03:27,280
parse exactly the same

91
00:03:27,280 --> 00:03:28,720
so it's important to keep in mind that

92
00:03:28,720 --> 00:03:31,200
you can use math svg to kind of confuse

93
00:03:31,200 --> 00:03:33,120
the parser more so

94
00:03:33,120 --> 00:03:34,480
and we'll get into kind of like what

95
00:03:34,480 --> 00:03:37,120
that looks like a bit later

96
00:03:37,120 --> 00:03:39,120
but the the important takeaway from

97
00:03:39,120 --> 00:03:41,280
understanding name spaces is there's

98
00:03:41,280 --> 00:03:42,799
three different types they parse

99
00:03:42,799 --> 00:03:44,720
slightly differently

100
00:03:44,720 --> 00:03:46,080
and the html parser is going to

101
00:03:46,080 --> 00:03:49,040
recognize all three

102
00:03:52,000 --> 00:03:53,519
uh in addition to those kind of

103
00:03:53,519 --> 00:03:54,879
understandings

104
00:03:54,879 --> 00:03:56,799
all the tags you see here and sorry for

105
00:03:56,799 --> 00:03:58,879
the like large blob i i pulled it for

106
00:03:58,879 --> 00:04:00,959
straightening the spec but every single

107
00:04:00,959 --> 00:04:03,040
one of these tags has special parsing

108
00:04:03,040 --> 00:04:04,159
rules

109
00:04:04,159 --> 00:04:06,560
meaning certain things can occur when

110
00:04:06,560 --> 00:04:08,720
these tags are encountered and we'll go

111
00:04:08,720 --> 00:04:10,000
through a couple of them and the

112
00:04:10,000 --> 00:04:14,120
relevance to that for exploitation

113
00:04:15,200 --> 00:04:17,279
so again from the spec these are some of

114
00:04:17,279 --> 00:04:19,199
those special parsing rules

115
00:04:19,199 --> 00:04:22,800
these certain flags here like title

116
00:04:22,800 --> 00:04:26,160
title text area style script iframe no

117
00:04:26,160 --> 00:04:27,199
script

118
00:04:27,199 --> 00:04:29,520
these are all like non-dangerous types

119
00:04:29,520 --> 00:04:32,880
rc data raw text raw text and then plain

120
00:04:32,880 --> 00:04:34,160
text is the only one that's actually

121
00:04:34,160 --> 00:04:35,520
plain text

122
00:04:35,520 --> 00:04:36,720
and then we have

123
00:04:36,720 --> 00:04:38,960
all other tags our data state

124
00:04:38,960 --> 00:04:41,120
that's what we want right so on on the

125
00:04:41,120 --> 00:04:42,240
right side you can kind of see a

126
00:04:42,240 --> 00:04:44,720
visualization of what that looks like rc

127
00:04:44,720 --> 00:04:46,800
data is going to be that output encoding

128
00:04:46,800 --> 00:04:49,040
if if you've hacked a lot of websites

129
00:04:49,040 --> 00:04:51,360
and you can't get xss it's usually from

130
00:04:51,360 --> 00:04:53,280
rc data

131
00:04:53,280 --> 00:04:55,440
raw text very similar although it looks

132
00:04:55,440 --> 00:04:58,000
like it should work but it's just text

133
00:04:58,000 --> 00:05:00,000
and then data type you can actually see

134
00:05:00,000 --> 00:05:01,520
it's trying to load an image it's trying

135
00:05:01,520 --> 00:05:04,400
to alter the page

136
00:05:07,120 --> 00:05:08,720
alright so those are all some caveats

137
00:05:08,720 --> 00:05:10,080
kind of a little understanding of how

138
00:05:10,080 --> 00:05:12,560
the html parser works

139
00:05:12,560 --> 00:05:14,240
we'll get into the relevance of all this

140
00:05:14,240 --> 00:05:16,479
now

141
00:05:16,639 --> 00:05:17,360
so

142
00:05:17,360 --> 00:05:19,759
when html is parsed twice this is what

143
00:05:19,759 --> 00:05:21,120
we're trying to hack

144
00:05:21,120 --> 00:05:22,880
so when you can inject like a little bit

145
00:05:22,880 --> 00:05:25,440
of html this is generally the process

146
00:05:25,440 --> 00:05:26,720
you're going to see

147
00:05:26,720 --> 00:05:28,479
this is pulled from a what you see is

148
00:05:28,479 --> 00:05:30,720
what you get editor

149
00:05:30,720 --> 00:05:32,240
if you're unfamiliar with those you've

150
00:05:32,240 --> 00:05:34,800
probably used them in like different

151
00:05:34,800 --> 00:05:36,320
chat apps things like that where you can

152
00:05:36,320 --> 00:05:39,360
like bold text things like that

153
00:05:39,360 --> 00:05:41,360
so what happens is you input data it

154
00:05:41,360 --> 00:05:43,520
goes through the html parser it then

155
00:05:43,520 --> 00:05:45,600
goes through the editor's parser itself

156
00:05:45,600 --> 00:05:48,960
and that's our target as an attacker

157
00:05:48,960 --> 00:05:51,039
right so that editor how it works at a

158
00:05:51,039 --> 00:05:52,479
like a security level

159
00:05:52,479 --> 00:05:55,199
if it detects that data is non-dangerous

160
00:05:55,199 --> 00:05:58,080
raw text plain text rc data no further

161
00:05:58,080 --> 00:06:00,800
processing happens it just goes through

162
00:06:00,800 --> 00:06:03,280
if it detects it's a data type your like

163
00:06:03,280 --> 00:06:05,199
on errors are going to be stripped your

164
00:06:05,199 --> 00:06:07,600
javascript's getting taken out you don't

165
00:06:07,600 --> 00:06:10,560
have code script execution

166
00:06:10,560 --> 00:06:14,319
so that is what we're trying to target

167
00:06:15,280 --> 00:06:17,600
so essentially like this is the logic of

168
00:06:17,600 --> 00:06:18,800
the attack

169
00:06:18,800 --> 00:06:21,199
like we supply html

170
00:06:21,199 --> 00:06:24,000
we're using the html parser's logic

171
00:06:24,000 --> 00:06:26,160
to exploit the sanitizer to be

172
00:06:26,160 --> 00:06:27,840
reconstructed because it gets parsed

173
00:06:27,840 --> 00:06:29,360
again

174
00:06:29,360 --> 00:06:31,600
and that is written to the dom where we

175
00:06:31,600 --> 00:06:33,600
get our javascript execution

176
00:06:33,600 --> 00:06:37,840
and that's our goal like as an attacker

177
00:06:37,919 --> 00:06:41,759
so here is a test case in tinymce

178
00:06:41,759 --> 00:06:43,600
if you're unfamiliar with tinymce it's

179
00:06:43,600 --> 00:06:45,199
very widely used what you see is what

180
00:06:45,199 --> 00:06:46,479
you get editor

181
00:06:46,479 --> 00:06:49,360
and this is a payload that worked

182
00:06:49,360 --> 00:06:51,199
so essentially what we're doing here is

183
00:06:51,199 --> 00:06:52,319
wrapping

184
00:06:52,319 --> 00:06:54,560
text area and iframes

185
00:06:54,560 --> 00:06:56,400
followed by the payload

186
00:06:56,400 --> 00:06:58,240
so what we're doing is confusing the

187
00:06:58,240 --> 00:07:00,319
parser essentially and i'll show you

188
00:07:00,319 --> 00:07:02,080
more visualizations and break that down

189
00:07:02,080 --> 00:07:04,000
a bit more

190
00:07:04,000 --> 00:07:06,880
but the whole goal is to convince that

191
00:07:06,880 --> 00:07:09,840
sanitizing parser that it's safe data

192
00:07:09,840 --> 00:07:12,080
and in this case this is the payload

193
00:07:12,080 --> 00:07:14,240
that worked

194
00:07:14,240 --> 00:07:15,919
so we'll look at a little bit what that

195
00:07:15,919 --> 00:07:17,599
looks like so here's like a

196
00:07:17,599 --> 00:07:19,280
visualization with our like initial

197
00:07:19,280 --> 00:07:20,720
attack plan

198
00:07:20,720 --> 00:07:23,280
on how that came out so

199
00:07:23,280 --> 00:07:25,840
first we inject our payload

200
00:07:25,840 --> 00:07:27,440
the html parser is going to see it

201
00:07:27,440 --> 00:07:28,880
correctly right

202
00:07:28,880 --> 00:07:30,800
but the sanitizer this is where the bug

203
00:07:30,800 --> 00:07:33,120
lies right so it doesn't parse exactly

204
00:07:33,120 --> 00:07:35,520
the same as the html parser and that's

205
00:07:35,520 --> 00:07:36,880
where you're going to get your bugs

206
00:07:36,880 --> 00:07:39,120
that's what you're looking for

207
00:07:39,120 --> 00:07:40,800
so that's how it sound it thought

208
00:07:40,800 --> 00:07:43,199
everything was in that text area but we

209
00:07:43,199 --> 00:07:46,479
had contained text area in an iframe

210
00:07:46,479 --> 00:07:49,360
so it's confused it thinks that's safe

211
00:07:49,360 --> 00:07:51,280
and then boom we have javascript

212
00:07:51,280 --> 00:07:53,840
execution

213
00:07:55,280 --> 00:07:58,319
so here's a like another view to like

214
00:07:58,319 --> 00:08:00,879
kind of visualize how this attack works

215
00:08:00,879 --> 00:08:02,879
essentially you could see how tiny mce

216
00:08:02,879 --> 00:08:06,000
would view that so it sees raw text and

217
00:08:06,000 --> 00:08:08,400
everything in rc data so it's not gonna

218
00:08:08,400 --> 00:08:10,319
process or strip out our payload we're

219
00:08:10,319 --> 00:08:12,479
gonna get javascript execution we're

220
00:08:12,479 --> 00:08:13,919
going to be able to control the user's

221
00:08:13,919 --> 00:08:15,840
experience

222
00:08:15,840 --> 00:08:17,360
how it actually ended in the dom of

223
00:08:17,360 --> 00:08:20,000
course we actually got data type in

224
00:08:20,000 --> 00:08:23,800
which is the goal

225
00:08:26,720 --> 00:08:29,599
uh here's a little like tree view

226
00:08:29,599 --> 00:08:31,680
just to better visualize it really but

227
00:08:31,680 --> 00:08:33,679
you can see rc data is essentially a

228
00:08:33,679 --> 00:08:35,919
text node in the dom

229
00:08:35,919 --> 00:08:37,440
and uh if you're familiar with like how

230
00:08:37,440 --> 00:08:39,519
that works if it's a text node you don't

231
00:08:39,519 --> 00:08:41,519
have gross site scripting like it's just

232
00:08:41,519 --> 00:08:44,159
text there's essentially no way that i

233
00:08:44,159 --> 00:08:46,240
know to break out of that

234
00:08:46,240 --> 00:08:47,760
data type however you'll see it's

235
00:08:47,760 --> 00:08:48,880
actually

236
00:08:48,880 --> 00:08:51,200
like a node in the dom that is computer

237
00:08:51,200 --> 00:08:54,200
instructions

238
00:08:54,720 --> 00:08:56,880
all right so here is another test case

239
00:08:56,880 --> 00:08:58,480
uh for walla

240
00:08:58,480 --> 00:09:00,880
very similar to tiny mc it's another

241
00:09:00,880 --> 00:09:02,560
text editor

242
00:09:02,560 --> 00:09:05,120
very common

243
00:09:05,120 --> 00:09:07,519
same principle applied to this one right

244
00:09:07,519 --> 00:09:09,200
so we're using iframe this time we're

245
00:09:09,200 --> 00:09:10,959
wrapping it in a comment

246
00:09:10,959 --> 00:09:12,320
because each parser's a little bit

247
00:09:12,320 --> 00:09:13,680
different this is kind of the tricky

248
00:09:13,680 --> 00:09:16,240
part of exploitation is figuring out how

249
00:09:16,240 --> 00:09:18,160
it works and like what that parser is

250
00:09:18,160 --> 00:09:21,120
looking for what that parser allows

251
00:09:21,120 --> 00:09:23,519
in this case just wrapping it with like

252
00:09:23,519 --> 00:09:26,320
rc data raw text wasn't enough we had to

253
00:09:26,320 --> 00:09:28,560
introduce a different name space

254
00:09:28,560 --> 00:09:31,680
but as soon as we put math in there um

255
00:09:31,680 --> 00:09:33,839
boom we won and it might be hard to see

256
00:09:33,839 --> 00:09:35,360
down here but you could see how it

257
00:09:35,360 --> 00:09:37,120
actually landed in the dome

258
00:09:37,120 --> 00:09:39,279
it was trying to close out the comment

259
00:09:39,279 --> 00:09:40,640
because it thought the whole thing was

260
00:09:40,640 --> 00:09:44,640
in a comment but we had restricted it

261
00:09:47,519 --> 00:09:49,600
so yeah here's an another view to just

262
00:09:49,600 --> 00:09:51,760
like better visualize it because it's

263
00:09:51,760 --> 00:09:54,240
pretty key to the like concept here you

264
00:09:54,240 --> 00:09:55,920
could see how it ends in the dom like

265
00:09:55,920 --> 00:09:57,920
comment this is how it viewed it this is

266
00:09:57,920 --> 00:09:59,920
what it thought was happening

267
00:09:59,920 --> 00:10:02,000
uh comment of course non-dangerous it's

268
00:10:02,000 --> 00:10:03,920
not going to execute if it's a comment

269
00:10:03,920 --> 00:10:05,360
this is not actually how it landed in

270
00:10:05,360 --> 00:10:07,040
the dom of course because we had

271
00:10:07,040 --> 00:10:11,120
contained the comment within iframes

272
00:10:12,560 --> 00:10:13,920
and like here's a view of how it

273
00:10:13,920 --> 00:10:15,600
actually turned out

274
00:10:15,600 --> 00:10:18,640
so the comments contained in that iframe

275
00:10:18,640 --> 00:10:21,519
and then we have our data image boom

276
00:10:21,519 --> 00:10:23,600
javascript execution

277
00:10:23,600 --> 00:10:26,320
popped for a while

278
00:10:30,959 --> 00:10:32,880
this is an organization uh no

279
00:10:32,880 --> 00:10:35,120
affiliation but lap analyzer if you've

280
00:10:35,120 --> 00:10:36,560
never heard of them they do like data

281
00:10:36,560 --> 00:10:38,640
analytics on like what tech stack is

282
00:10:38,640 --> 00:10:41,360
used in main large applications

283
00:10:41,360 --> 00:10:43,360
so a bit different but it is a parsing

284
00:10:43,360 --> 00:10:45,279
vulnerability that's similar uh this was

285
00:10:45,279 --> 00:10:47,440
in dom purify if you haven't heard of

286
00:10:47,440 --> 00:10:49,360
these two gentlemen michael pintowski

287
00:10:49,360 --> 00:10:50,959
and gareth hayes highly recommend

288
00:10:50,959 --> 00:10:52,480
reading their work

289
00:10:52,480 --> 00:10:55,920
they're really good great work

290
00:10:57,920 --> 00:10:59,680
so some testing tips when you want to

291
00:10:59,680 --> 00:11:02,079
exploit this yourself or your clients

292
00:11:02,079 --> 00:11:03,279
bug bounty

293
00:11:03,279 --> 00:11:05,600
whatever you're doing

294
00:11:05,600 --> 00:11:07,680
essentially there is kind of a common

295
00:11:07,680 --> 00:11:09,200
exploit pattern that's been occurring

296
00:11:09,200 --> 00:11:10,640
when we've

297
00:11:10,640 --> 00:11:13,120
been employing this tactic

298
00:11:13,120 --> 00:11:15,040
it doesn't always work like that though

299
00:11:15,040 --> 00:11:16,160
so

300
00:11:16,160 --> 00:11:17,839
fuzzing is going to be your friend

301
00:11:17,839 --> 00:11:20,000
essentially try a lot

302
00:11:20,000 --> 00:11:22,160
and take notes like

303
00:11:22,160 --> 00:11:23,920
an example of that is like if you use a

304
00:11:23,920 --> 00:11:26,480
math tag and no further processing

305
00:11:26,480 --> 00:11:28,800
occurs don't use math tags like it's not

306
00:11:28,800 --> 00:11:29,760
going to work

307
00:11:29,760 --> 00:11:31,360
if you're using iframes and you don't

308
00:11:31,360 --> 00:11:33,279
get xss but you can see your payload

309
00:11:33,279 --> 00:11:35,440
still intact and hasn't been modified

310
00:11:35,440 --> 00:11:37,680
but it's encoded that might be like a

311
00:11:37,680 --> 00:11:41,600
viable source you want to use that tag

312
00:11:41,600 --> 00:11:43,600
of course you can script this out as

313
00:11:43,600 --> 00:11:46,399
well although it's like situational i i

314
00:11:46,399 --> 00:11:48,560
did write a script but it's a little too

315
00:11:48,560 --> 00:11:52,239
janky i wasn't going to release it

316
00:11:54,639 --> 00:11:57,200
essentially here's a ton of resources if

317
00:11:57,200 --> 00:11:58,639
you want to read in

318
00:11:58,639 --> 00:12:00,639
to this subject a bit more

319
00:12:00,639 --> 00:12:03,360
i do have a blog post on this topic i

320
00:12:03,360 --> 00:12:04,880
put out recently

321
00:12:04,880 --> 00:12:07,440
um actually really proud um happy to

322
00:12:07,440 --> 00:12:09,279
like port swigger did an article on it

323
00:12:09,279 --> 00:12:11,440
and i was beyond psyched because i have

324
00:12:11,440 --> 00:12:13,279
a ton of respect for those guys so to

325
00:12:13,279 --> 00:12:16,800
get a mention was was great

326
00:12:18,560 --> 00:12:22,680
um that's about it

