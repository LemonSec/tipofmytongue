1
00:00:02,000 --> 00:00:04,879
okay hello

2
00:00:05,440 --> 00:00:07,200
um i'm sharing the whole screen so we'll

3
00:00:07,200 --> 00:00:09,200
just have uh infinite screens for a

4
00:00:09,200 --> 00:00:11,040
moment sorry about that although i kind

5
00:00:11,040 --> 00:00:13,200
of like it it's pretty right

6
00:00:13,200 --> 00:00:15,440
okay we're live

7
00:00:15,440 --> 00:00:17,520
um

8
00:00:17,520 --> 00:00:19,920
is there anyone here i wonder how i find

9
00:00:19,920 --> 00:00:22,960
out if there's anyone here

10
00:00:24,000 --> 00:00:25,599
okay

11
00:00:25,599 --> 00:00:27,760
here we go

12
00:00:27,760 --> 00:00:28,840
hi

13
00:00:28,840 --> 00:00:33,840
ashley yes yes exactly waving to myself

14
00:00:33,840 --> 00:00:35,680
infinite screens and soon we will see

15
00:00:35,680 --> 00:00:38,079
infinite log4js

16
00:00:38,079 --> 00:00:42,079
so yeah this talk is on the many uh

17
00:00:42,079 --> 00:00:44,559
shapes are not shapes but the many

18
00:00:44,559 --> 00:00:46,719
hiding places well kind of shapes

19
00:00:46,719 --> 00:00:48,800
actually shapes as a good uh a metaphor

20
00:00:48,800 --> 00:00:50,160
as well

21
00:00:50,160 --> 00:00:52,879
for uh for log for day the habitats

22
00:00:52,879 --> 00:00:55,280
hiding places camouflages

23
00:00:55,280 --> 00:00:57,520
log4j

24
00:00:57,520 --> 00:00:58,719
and uh

25
00:00:58,719 --> 00:01:01,120
it's gonna be kind of a live coding

26
00:01:01,120 --> 00:01:02,399
session

27
00:01:02,399 --> 00:01:04,799
um and just to confirm i believe

28
00:01:04,799 --> 00:01:06,159
we have

29
00:01:06,159 --> 00:01:07,040
um

30
00:01:07,040 --> 00:01:09,439
you know uh 50 minutes remaining right

31
00:01:09,439 --> 00:01:13,839
this does this one go till 3 p.m

32
00:01:17,360 --> 00:01:18,479
and

33
00:01:18,479 --> 00:01:20,240
yeah okay

34
00:01:20,240 --> 00:01:22,159
that's a good thing to know

35
00:01:22,159 --> 00:01:24,479
okay

36
00:01:24,840 --> 00:01:28,479
um so let's get started with log4j i'm

37
00:01:28,479 --> 00:01:30,159
gonna get myself bring up a terminal

38
00:01:30,159 --> 00:01:31,200
here

39
00:01:31,200 --> 00:01:33,119
and get a log for today

40
00:01:33,119 --> 00:01:34,640
so um

41
00:01:34,640 --> 00:01:36,400
the

42
00:01:36,400 --> 00:01:38,240
the goal here is really to educate

43
00:01:38,240 --> 00:01:40,640
everyone about you know like

44
00:01:40,640 --> 00:01:42,880
jar files right i have a

45
00:01:42,880 --> 00:01:44,880
unnatural

46
00:01:44,880 --> 00:01:47,680
passion for jar files when i was a a

47
00:01:47,680 --> 00:01:49,439
teaching assistant at ubc i was working

48
00:01:49,439 --> 00:01:50,960
on a phd

49
00:01:50,960 --> 00:01:54,640
sadly had to drop out of that phd you

50
00:01:54,640 --> 00:01:56,640
know life happened life got a lot more

51
00:01:56,640 --> 00:01:58,079
complicated

52
00:01:58,079 --> 00:02:00,000
than a phd so i had to drop out this was

53
00:02:00,000 --> 00:02:02,320
back in uh 2013

54
00:02:02,320 --> 00:02:04,719
but i was so i was my passion for jar

55
00:02:04,719 --> 00:02:06,719
files is over 10 years old

56
00:02:06,719 --> 00:02:09,119
and um

57
00:02:09,119 --> 00:02:12,959
let's get a session let's get a terminal

58
00:02:13,120 --> 00:02:15,120
term and all you guys are in there i'm

59
00:02:15,120 --> 00:02:16,400
not re i'm a

60
00:02:16,400 --> 00:02:19,120
linux person i've only i'm only dean to

61
00:02:19,120 --> 00:02:20,879
go on a terminal here

62
00:02:20,879 --> 00:02:22,800
for this talk here because uh you know

63
00:02:22,800 --> 00:02:25,040
web conference software doesn't usually

64
00:02:25,040 --> 00:02:26,959
work on linux or you usually can't share

65
00:02:26,959 --> 00:02:28,640
screen on linux so

66
00:02:28,640 --> 00:02:31,519
i'm i'm in a foreign land here

67
00:02:31,519 --> 00:02:34,160
with uh

68
00:02:34,319 --> 00:02:36,640
being on on a mac

69
00:02:36,640 --> 00:02:39,120
so everything will be painful for me

70
00:02:39,120 --> 00:02:41,200
forgive me are you guys the same size

71
00:02:41,200 --> 00:02:42,400
you guys are the same size let's have

72
00:02:42,400 --> 00:02:44,000
three of you

73
00:02:44,000 --> 00:02:46,720
um

74
00:02:48,840 --> 00:02:51,680
okay and let's go jump to the other

75
00:02:51,680 --> 00:02:53,360
machine

76
00:02:53,360 --> 00:02:57,239
and what is that machine

77
00:03:04,400 --> 00:03:06,319
you are oh

78
00:03:06,319 --> 00:03:08,720
what my other machine has a naughty ip

79
00:03:08,720 --> 00:03:12,959
address today oh no oh well

80
00:03:15,280 --> 00:03:19,080
that was not on purpose

81
00:03:20,640 --> 00:03:23,040
this is where all my good

82
00:03:23,040 --> 00:03:24,640
log freaking examples are is on that

83
00:03:24,640 --> 00:03:26,319
machine

84
00:03:26,319 --> 00:03:28,640
so anyway yeah so like i was saying

85
00:03:28,640 --> 00:03:30,959
back in my ubc uh days when i started

86
00:03:30,959 --> 00:03:33,920
that phd um yeah one of the my students

87
00:03:33,920 --> 00:03:35,200
actually at the end of the semester he

88
00:03:35,200 --> 00:03:38,159
gave me a jar file not a file a jar an

89
00:03:38,159 --> 00:03:39,840
actual jar just a glass jar at the end

90
00:03:39,840 --> 00:03:41,280
of the semester he says

91
00:03:41,280 --> 00:03:42,879
you are so passionate about jar files i

92
00:03:42,879 --> 00:03:45,120
just i had to get you this and so i

93
00:03:45,120 --> 00:03:47,599
still have this jar in my

94
00:03:47,599 --> 00:03:49,599
in my cupboard

95
00:03:49,599 --> 00:03:50,480
um

96
00:03:50,480 --> 00:03:51,840
so jar files for those that aren't

97
00:03:51,840 --> 00:03:55,760
familiar are this how you um

98
00:03:55,760 --> 00:03:57,840
store uh how you put together how you

99
00:03:57,840 --> 00:03:59,599
distribute

100
00:03:59,599 --> 00:04:02,799
java code okay just like you know dlls

101
00:04:02,799 --> 00:04:06,560
are often how you distribute uh

102
00:04:06,560 --> 00:04:10,239
c plus plus or or c sharp uh that's

103
00:04:10,239 --> 00:04:11,920
being developed on windows well jar

104
00:04:11,920 --> 00:04:14,560
files are how you distribute

105
00:04:14,560 --> 00:04:15,760
java code

106
00:04:15,760 --> 00:04:18,880
and i'm actually passionate about all um

107
00:04:18,880 --> 00:04:20,798
distribution formats for software i'm

108
00:04:20,798 --> 00:04:23,440
passionate about gem files that's ruby

109
00:04:23,440 --> 00:04:26,080
i'm passionate about um

110
00:04:26,080 --> 00:04:28,720
you know npm files of course that's uh

111
00:04:28,720 --> 00:04:31,600
the javascript uh dlls

112
00:04:31,600 --> 00:04:32,960
um

113
00:04:32,960 --> 00:04:34,960
go modules all of them

114
00:04:34,960 --> 00:04:37,919
but java was my first language and so i

115
00:04:37,919 --> 00:04:40,479
have a special love for jar files and

116
00:04:40,479 --> 00:04:41,600
and and

117
00:04:41,600 --> 00:04:44,080
log for j of course comes down as a jar

118
00:04:44,080 --> 00:04:45,759
so don't uh you don't tell the other

119
00:04:45,759 --> 00:04:46,880
languages

120
00:04:46,880 --> 00:04:47,759
um

121
00:04:47,759 --> 00:04:49,280
that i feel that way about java please i

122
00:04:49,280 --> 00:04:52,320
don't want them to feel bad

123
00:04:53,120 --> 00:04:56,400
anyway moving on here to log for j

124
00:04:56,400 --> 00:04:58,400
the problem with log for j or the

125
00:04:58,400 --> 00:05:00,400
problem with any really any

126
00:05:00,400 --> 00:05:02,720
distributable piece of code any you know

127
00:05:02,720 --> 00:05:05,600
compiled artifact i know technically

128
00:05:05,600 --> 00:05:06,880
java

129
00:05:06,880 --> 00:05:09,360
is not compiled but i mean what i mean

130
00:05:09,360 --> 00:05:11,039
is like any

131
00:05:11,039 --> 00:05:14,160
that's thing you know box container oh

132
00:05:14,160 --> 00:05:17,440
can't use that word anymore any um

133
00:05:17,440 --> 00:05:20,320
just packaging you know mojo component

134
00:05:20,320 --> 00:05:22,240
library all of these things the way that

135
00:05:22,240 --> 00:05:24,800
we compartmentalize software

136
00:05:24,800 --> 00:05:27,039
such that we can refer it to as a thing

137
00:05:27,039 --> 00:05:29,440
like oh the log for jr any of those

138
00:05:29,440 --> 00:05:30,639
right

139
00:05:30,639 --> 00:05:31,600
um

140
00:05:31,600 --> 00:05:34,160
they kind of like

141
00:05:34,160 --> 00:05:36,000
when a known vulnerability drops like

142
00:05:36,000 --> 00:05:39,199
the huge lock for jcve cve

143
00:05:39,199 --> 00:05:40,880
2021

144
00:05:40,880 --> 00:05:41,840
uh

145
00:05:41,840 --> 00:05:44,240
what was it four four two two eight

146
00:05:44,240 --> 00:05:45,360
right

147
00:05:45,360 --> 00:05:48,240
um that cbe says oh if you have log for

148
00:05:48,240 --> 00:05:50,560
j if you have this version of blog for j

149
00:05:50,560 --> 00:05:52,479
you need to not have that version of

150
00:05:52,479 --> 00:05:54,479
vlog4j you need to have a different

151
00:05:54,479 --> 00:05:56,479
version of blog4j otherwise you're going

152
00:05:56,479 --> 00:05:58,800
to get you know exploited severely it

153
00:05:58,800 --> 00:06:01,199
was an amazing amazing cbe

154
00:06:01,199 --> 00:06:02,319
one of my

155
00:06:02,319 --> 00:06:03,840
favorite cbes

156
00:06:03,840 --> 00:06:05,840
in the last five years in the last five

157
00:06:05,840 --> 00:06:08,000
years i have two favorite cvds

158
00:06:08,000 --> 00:06:10,400
and this one definitely was one of them

159
00:06:10,400 --> 00:06:13,280
so but this this problem is

160
00:06:13,280 --> 00:06:16,000
right is like if you have log4j this

161
00:06:16,000 --> 00:06:18,319
version of vlog4j you need to not have

162
00:06:18,319 --> 00:06:19,680
that version you need to not be running

163
00:06:19,680 --> 00:06:21,440
that because in that version of blog4j

164
00:06:21,440 --> 00:06:24,560
is the bad code the bad code that can be

165
00:06:24,560 --> 00:06:27,840
compelled tricked into you know giving

166
00:06:27,840 --> 00:06:28,960
away

167
00:06:28,960 --> 00:06:31,919
the keys to the kingdom

168
00:06:31,919 --> 00:06:34,919
so

169
00:06:35,120 --> 00:06:36,319
um

170
00:06:36,319 --> 00:06:38,080
there's suddenly there becomes like this

171
00:06:38,080 --> 00:06:39,080
almost

172
00:06:39,080 --> 00:06:40,639
epistemological

173
00:06:40,639 --> 00:06:41,600
problem

174
00:06:41,600 --> 00:06:44,199
when i say log4j

175
00:06:44,199 --> 00:06:45,919
2.16.0

176
00:06:45,919 --> 00:06:47,440
what do i mean

177
00:06:47,440 --> 00:06:50,479
right so let's start there

178
00:06:50,479 --> 00:06:51,919
um

179
00:06:51,919 --> 00:06:54,800
i think i'm going to direct you here

180
00:06:54,800 --> 00:06:57,199
so if i say

181
00:06:57,199 --> 00:06:59,440
log for j

182
00:06:59,440 --> 00:07:01,919
oh you silly mac sorry i'm gonna be

183
00:07:01,919 --> 00:07:03,440
grumpy about being on a mac this whole

184
00:07:03,440 --> 00:07:05,039
time

185
00:07:05,039 --> 00:07:08,240
because i have no idea how to use them

186
00:07:08,240 --> 00:07:09,840
there's frame iron

187
00:07:09,840 --> 00:07:13,440
oh infinite windows again

188
00:07:14,880 --> 00:07:18,319
um seen any any we've got private chats

189
00:07:18,319 --> 00:07:20,479
oh i can't share their private chats

190
00:07:20,479 --> 00:07:22,160
that's bad

191
00:07:22,160 --> 00:07:24,720
i did though yes

192
00:07:24,720 --> 00:07:25,390
um

193
00:07:25,390 --> 00:07:26,880
[Music]

194
00:07:26,880 --> 00:07:28,960
yeah there's a log for jay deep down

195
00:07:28,960 --> 00:07:32,318
there somewhere so

196
00:07:33,120 --> 00:07:37,479
initially when we say log for j2.16

197
00:07:38,160 --> 00:07:40,400
i think it's dot oh

198
00:07:40,400 --> 00:07:42,719
right

199
00:07:42,800 --> 00:07:46,400
do we mean this guy

200
00:07:47,360 --> 00:07:50,240
this by the way this is uh repo

201
00:07:50,240 --> 00:07:52,560
one.maven.org

202
00:07:52,560 --> 00:07:54,400
and when developers

203
00:07:54,400 --> 00:07:57,520
build java projects like with their you

204
00:07:57,520 --> 00:07:59,360
know if you're if you've got all the

205
00:07:59,360 --> 00:08:02,400
java tool chain and all the uh

206
00:08:02,400 --> 00:08:04,960
compilers and intellij and eclipse and

207
00:08:04,960 --> 00:08:06,080
all that good stuff like if you're

208
00:08:06,080 --> 00:08:08,240
making a java application

209
00:08:08,240 --> 00:08:09,280
um

210
00:08:09,280 --> 00:08:10,560
by default this is where you're gonna

211
00:08:10,560 --> 00:08:12,240
get your libraries from repo

212
00:08:12,240 --> 00:08:14,400
one.maven.org

213
00:08:14,400 --> 00:08:16,720
it's actually

214
00:08:16,720 --> 00:08:19,520
hosted and maintained by sonatype and so

215
00:08:19,520 --> 00:08:22,080
sonotype they compete with my company

216
00:08:22,080 --> 00:08:24,240
mergebase and so i'm always

217
00:08:24,240 --> 00:08:26,319
very bitter that they get to host this

218
00:08:26,319 --> 00:08:27,840
because they get to call companies up

219
00:08:27,840 --> 00:08:30,240
and they'll be like huh did you know um

220
00:08:30,240 --> 00:08:32,799
hi there vmware we just want to let you

221
00:08:32,799 --> 00:08:34,559
know you guys downloaded this bad

222
00:08:34,559 --> 00:08:38,000
version of log4j uh 82 000 times in the

223
00:08:38,000 --> 00:08:40,159
last week just thought maybe you might

224
00:08:40,159 --> 00:08:41,360
want to give us a call so you know

225
00:08:41,360 --> 00:08:44,279
because we don't host

226
00:08:44,279 --> 00:08:46,320
repo1.maven.org we don't have data like

227
00:08:46,320 --> 00:08:49,360
that we can't call up a company and say

228
00:08:49,360 --> 00:08:51,519
i mean i guess we could but we'd just be

229
00:08:51,519 --> 00:08:52,720
making

230
00:08:52,720 --> 00:08:54,399
things up we wouldn't have empirical

231
00:08:54,399 --> 00:08:56,000
data like sonatech does yeah this is

232
00:08:56,000 --> 00:08:57,440
actually hosted by sonotype sometimes an

233
00:08:57,440 --> 00:08:59,360
interesting company right because

234
00:08:59,360 --> 00:09:00,560
um

235
00:09:00,560 --> 00:09:02,720
it was the whole maven team the team

236
00:09:02,720 --> 00:09:06,160
that invented and made maven which is a

237
00:09:06,160 --> 00:09:07,200
critical

238
00:09:07,200 --> 00:09:09,360
tool in the java world

239
00:09:09,360 --> 00:09:12,720
for building software uh at apache they

240
00:09:12,720 --> 00:09:14,800
uh they formed a startup and sonotype

241
00:09:14,800 --> 00:09:16,160
was their startup they they launched

242
00:09:16,160 --> 00:09:18,000
that startup like

243
00:09:18,000 --> 00:09:21,279
probably 17 years ago

244
00:09:21,279 --> 00:09:25,120
anyway so when i say log for j2.16.0

245
00:09:25,120 --> 00:09:28,080
do i mean this one right in here let's

246
00:09:28,080 --> 00:09:30,560
bring it down

247
00:09:32,560 --> 00:09:34,160
and

248
00:09:34,160 --> 00:09:37,120
voila so now i have vlog

249
00:09:37,120 --> 00:09:38,480
and in

250
00:09:38,480 --> 00:09:40,240
this log for day

251
00:09:40,240 --> 00:09:43,120
is the bad code right that causes the

252
00:09:43,120 --> 00:09:45,600
the the terrible vulnerability

253
00:09:45,600 --> 00:09:48,959
um for those i mean i figure probably

254
00:09:48,959 --> 00:09:51,279
everyone here today

255
00:09:51,279 --> 00:09:52,800
uh is familiar with that vulnerability

256
00:09:52,800 --> 00:09:54,959
but just in case you aren't

257
00:09:54,959 --> 00:09:57,440
uh just in case there's the one i mean

258
00:09:57,440 --> 00:09:58,880
because i'm sure i have like a thousand

259
00:09:58,880 --> 00:10:00,480
people in the audience today right very

260
00:10:00,480 --> 00:10:01,760
popular talk

261
00:10:01,760 --> 00:10:03,920
and so there's probably like one out of

262
00:10:03,920 --> 00:10:05,200
those thousand people that hasn't heard

263
00:10:05,200 --> 00:10:07,360
of the log fragic vulnerability

264
00:10:07,360 --> 00:10:10,320
and um so the deal with the log4j

265
00:10:10,320 --> 00:10:13,120
vulnerability is log4j is as a logging

266
00:10:13,120 --> 00:10:15,120
framework and it goes back to actually

267
00:10:15,120 --> 00:10:17,600
1999 i was looking at the source code of

268
00:10:17,600 --> 00:10:19,360
it

269
00:10:19,360 --> 00:10:21,680
it was a proprietary private piece of

270
00:10:21,680 --> 00:10:25,440
code developed in 1998 1999

271
00:10:25,440 --> 00:10:27,200
and then it was donated to the apache

272
00:10:27,200 --> 00:10:29,120
software foundation in i think around

273
00:10:29,120 --> 00:10:32,079
2002

274
00:10:32,079 --> 00:10:34,240
and yeah it was like

275
00:10:34,240 --> 00:10:35,839
it was a revelation it's a beautiful

276
00:10:35,839 --> 00:10:37,680
beautiful logging framework beautiful

277
00:10:37,680 --> 00:10:39,360
piece of software like for those that

278
00:10:39,360 --> 00:10:41,760
had been trying to do application logs

279
00:10:41,760 --> 00:10:44,079
in 2001 with java

280
00:10:44,079 --> 00:10:45,440
including me

281
00:10:45,440 --> 00:10:48,000
um you know you just would do horrible

282
00:10:48,000 --> 00:10:49,680
hacky things and then log fridge came

283
00:10:49,680 --> 00:10:51,360
and it just showed you this beautiful

284
00:10:51,360 --> 00:10:54,640
way to just uh leverage this natural

285
00:10:54,640 --> 00:10:58,720
structure of java programs to to um

286
00:10:58,720 --> 00:11:00,480
to do your application logging and just

287
00:11:00,480 --> 00:11:02,560
in a beautiful natural

288
00:11:02,560 --> 00:11:04,399
way

289
00:11:04,399 --> 00:11:07,279
and so since log4j like actually goes

290
00:11:07,279 --> 00:11:09,440
back all the way to 2002 it's it's in

291
00:11:09,440 --> 00:11:10,720
everything

292
00:11:10,720 --> 00:11:13,680
and and it was such a beautiful library

293
00:11:13,680 --> 00:11:15,200
with such a beautiful mechanism for

294
00:11:15,200 --> 00:11:16,480
doing logging

295
00:11:16,480 --> 00:11:19,600
um that you know it really is pervasive

296
00:11:19,600 --> 00:11:21,519
it you know like you write a good

297
00:11:21,519 --> 00:11:23,360
library like a library this guy i can

298
00:11:23,360 --> 00:11:26,480
only dream to write a library this good

299
00:11:26,480 --> 00:11:27,519
um

300
00:11:27,519 --> 00:11:30,720
it's gonna be everywhere

301
00:11:30,720 --> 00:11:33,120
so with it being

302
00:11:33,120 --> 00:11:35,920
everywhere

303
00:11:36,160 --> 00:11:37,680
um

304
00:11:37,680 --> 00:11:39,600
now here comes this problem is that they

305
00:11:39,600 --> 00:11:41,360
had this cute little feature that they

306
00:11:41,360 --> 00:11:43,120
um

307
00:11:43,120 --> 00:11:44,399
that they brought into the product

308
00:11:44,399 --> 00:11:46,200
around

309
00:11:46,200 --> 00:11:48,480
2012 i believe

310
00:11:48,480 --> 00:11:50,560
um i could be wrong about that but

311
00:11:50,560 --> 00:11:51,760
sometime in the last 10 years they

312
00:11:51,760 --> 00:11:53,040
brought in this cute

313
00:11:53,040 --> 00:11:54,320
um

314
00:11:54,320 --> 00:11:55,440
feature

315
00:11:55,440 --> 00:11:56,720
to help make logging even more

316
00:11:56,720 --> 00:11:58,480
convenient for you know application

317
00:11:58,480 --> 00:12:01,519
developers of this uh

318
00:12:01,519 --> 00:12:04,639
substitution uh this uh this key value

319
00:12:04,639 --> 00:12:06,320
lookup mechanism

320
00:12:06,320 --> 00:12:08,639
but the problem with this this um this

321
00:12:08,639 --> 00:12:12,320
lookup mechanism was that um

322
00:12:12,320 --> 00:12:15,360
any log message that came into log4j to

323
00:12:15,360 --> 00:12:16,800
be sent to disk

324
00:12:16,800 --> 00:12:20,320
um to be logged into a log file and disk

325
00:12:20,320 --> 00:12:21,120
would

326
00:12:21,120 --> 00:12:22,320
could take advantage of this

327
00:12:22,320 --> 00:12:24,320
substitution method any log message

328
00:12:24,320 --> 00:12:25,920
could like they just

329
00:12:25,920 --> 00:12:28,000
accidentally um

330
00:12:28,000 --> 00:12:29,760
didn't realize that i think the moment

331
00:12:29,760 --> 00:12:31,839
the developer saw that this was

332
00:12:31,839 --> 00:12:36,000
possible that any substitution

333
00:12:36,000 --> 00:12:37,120
anywhere

334
00:12:37,120 --> 00:12:39,120
it was originally the substitution logic

335
00:12:39,120 --> 00:12:40,720
was actually for the config files but

336
00:12:40,720 --> 00:12:42,560
then because it was so convenient it got

337
00:12:42,560 --> 00:12:45,200
uh ported over to the main logging uh

338
00:12:45,200 --> 00:12:47,200
infrastructure but then because it was

339
00:12:47,200 --> 00:12:48,480
um

340
00:12:48,480 --> 00:12:50,000
i think the developers just just didn't

341
00:12:50,000 --> 00:12:53,120
quite realize oh this this look up this

342
00:12:53,120 --> 00:12:56,639
neat look up substitution routine

343
00:12:56,639 --> 00:12:58,959
is

344
00:12:59,200 --> 00:13:01,120
available

345
00:13:01,120 --> 00:13:03,680
to anyone writing along so if anyone can

346
00:13:03,680 --> 00:13:06,240
control the log message any aspect of

347
00:13:06,240 --> 00:13:07,600
the log message

348
00:13:07,600 --> 00:13:09,360
they could trigger this lookup routine

349
00:13:09,360 --> 00:13:11,120
and then the lookup routines there was

350
00:13:11,120 --> 00:13:12,240
like a whole bunch of them you could do

351
00:13:12,240 --> 00:13:15,279
jndi lookups ldap lookups you could even

352
00:13:15,279 --> 00:13:17,920
like go to some code repository and

353
00:13:17,920 --> 00:13:19,920
download bytecode you have a bytecode on

354
00:13:19,920 --> 00:13:23,040
the fly if you coded the substitution

355
00:13:23,040 --> 00:13:25,839
lookups carefully right based on

356
00:13:25,839 --> 00:13:28,560
jndi and so essentially anyone that

357
00:13:28,560 --> 00:13:30,399
could have any control over the logging

358
00:13:30,399 --> 00:13:33,120
message could cause you know remote code

359
00:13:33,120 --> 00:13:34,959
execution and so you had this funny

360
00:13:34,959 --> 00:13:37,360
situation on minecraft servers where

361
00:13:37,360 --> 00:13:38,720
log4j

362
00:13:38,720 --> 00:13:40,720
was logging all messages in the client

363
00:13:40,720 --> 00:13:43,199
minecraft actually um

364
00:13:43,199 --> 00:13:45,600
very popular versions of minecraft are

365
00:13:45,600 --> 00:13:47,040
were written in java continue to be

366
00:13:47,040 --> 00:13:49,120
written in java on the server and in the

367
00:13:49,120 --> 00:13:51,440
client i think the pc version i think on

368
00:13:51,440 --> 00:13:53,920
the iphone it's not in java but i think

369
00:13:53,920 --> 00:13:56,399
in the on the pc version

370
00:13:56,399 --> 00:13:59,279
it is in java and of course it needs

371
00:13:59,279 --> 00:14:01,600
application logging and it was logging

372
00:14:01,600 --> 00:14:03,839
all chats so if a player was chatting

373
00:14:03,839 --> 00:14:05,920
with other players

374
00:14:05,920 --> 00:14:08,079
log4j would be the the software that was

375
00:14:08,079 --> 00:14:09,920
actually handling that oh someone well

376
00:14:09,920 --> 00:14:11,519
not handling the chat but logging all

377
00:14:11,519 --> 00:14:12,720
the chats

378
00:14:12,720 --> 00:14:14,560
and so

379
00:14:14,560 --> 00:14:16,959
um this situation was happening where

380
00:14:16,959 --> 00:14:19,920
one player could use the exploit to take

381
00:14:19,920 --> 00:14:21,920
over every other player's computer and

382
00:14:21,920 --> 00:14:24,320
the server's computer right

383
00:14:24,320 --> 00:14:27,600
uh this rc was so hilarious

384
00:14:27,600 --> 00:14:29,920
in that regard because they control the

385
00:14:29,920 --> 00:14:31,519
chat message that they're sending and

386
00:14:31,519 --> 00:14:35,199
since the chat message gets logged to

387
00:14:35,199 --> 00:14:36,959
disk and they have full control over

388
00:14:36,959 --> 00:14:38,720
what they chat to the other players they

389
00:14:38,720 --> 00:14:40,959
could just type in the x-play

390
00:14:40,959 --> 00:14:44,000
so that was amusing so this is a severe

391
00:14:44,000 --> 00:14:45,600
severe bug

392
00:14:45,600 --> 00:14:48,399
and so now you get to this problem of

393
00:14:48,399 --> 00:14:52,560
you know is log4j

394
00:14:53,399 --> 00:14:57,120
216.0 in my system so

395
00:14:57,120 --> 00:14:59,199
um normally

396
00:14:59,199 --> 00:15:01,040
i would ask the audience so how would

397
00:15:01,040 --> 00:15:02,160
you do it

398
00:15:02,160 --> 00:15:06,160
how would you find out if log4j 2.16 the

399
00:15:06,160 --> 00:15:07,600
volume related itself actually goes back

400
00:15:07,600 --> 00:15:08,800
to like

401
00:15:08,800 --> 00:15:10,800
pretty much the whole 2.x

402
00:15:10,800 --> 00:15:15,199
branch up to 2.16 log for j1.x uh very

403
00:15:15,199 --> 00:15:18,560
uh different uh implementation 2.0 was a

404
00:15:18,560 --> 00:15:20,240
complete rewrite and so this

405
00:15:20,240 --> 00:15:23,120
vulnerability because 2.0 it said 2.x is

406
00:15:23,120 --> 00:15:24,480
a complete rewrite the vulnerability is

407
00:15:24,480 --> 00:15:26,959
only the 2.x series

408
00:15:26,959 --> 00:15:28,560
if you were on long for j1.x you got

409
00:15:28,560 --> 00:15:29,839
other vulnerabilities to worry about but

410
00:15:29,839 --> 00:15:31,680
nothing quite as bad as this one so

411
00:15:31,680 --> 00:15:35,199
anyway yeah let's do we have log4j2.16.0

412
00:15:35,199 --> 00:15:36,480
or earlier

413
00:15:36,480 --> 00:15:38,560
how would you how would you find that on

414
00:15:38,560 --> 00:15:41,719
your system

415
00:15:42,000 --> 00:15:44,079
let's infinite mirror each other to see

416
00:15:44,079 --> 00:15:47,199
if anyone has any ideas

417
00:15:52,839 --> 00:15:54,560
um

418
00:15:54,560 --> 00:15:57,120
so far

419
00:15:57,120 --> 00:15:58,800
no idea so if you have an idea how would

420
00:15:58,800 --> 00:16:01,519
you find log4j 2.16 on you on your

421
00:16:01,519 --> 00:16:03,600
system

422
00:16:03,600 --> 00:16:04,720
give you guys

423
00:16:04,720 --> 00:16:09,399
10 more seconds if anyone has an idea

424
00:16:14,320 --> 00:16:15,360
okay

425
00:16:15,360 --> 00:16:16,480
um

426
00:16:16,480 --> 00:16:20,160
one popular idea

427
00:16:20,240 --> 00:16:24,480
was to you know just take the the

428
00:16:25,519 --> 00:16:27,759
of

429
00:16:28,560 --> 00:16:30,240
log criteria itself right like so you

430
00:16:30,240 --> 00:16:32,800
could just take a sha-1 or md5 like you

431
00:16:32,800 --> 00:16:33,519
know

432
00:16:33,519 --> 00:16:36,079
people can say that md5 is insecure but

433
00:16:36,079 --> 00:16:37,600
for this kind of situation where you're

434
00:16:37,600 --> 00:16:39,839
just trying to identify is a file on

435
00:16:39,839 --> 00:16:43,920
your disk it's it's totally reasonable

436
00:16:44,160 --> 00:16:46,320
um so if you see this

437
00:16:46,320 --> 00:16:47,759
hash anywhere

438
00:16:47,759 --> 00:16:50,480
on your file system including

439
00:16:50,480 --> 00:16:52,160
um

440
00:16:52,160 --> 00:16:54,959
you know uh a zip inside a zip inside a

441
00:16:54,959 --> 00:16:56,399
zip right you can just you know

442
00:16:56,399 --> 00:16:58,320
recursively descend into the zip files

443
00:16:58,320 --> 00:17:00,160
and just scan every file inside of them

444
00:17:00,160 --> 00:17:02,839
if you see this then yeah

445
00:17:02,839 --> 00:17:05,439
definitely that's a bad

446
00:17:05,439 --> 00:17:08,000
situation

447
00:17:08,000 --> 00:17:10,480
the the problem though is that uh the

448
00:17:10,480 --> 00:17:12,880
jar files are actually zip files and zip

449
00:17:12,880 --> 00:17:15,520
files are actually

450
00:17:15,520 --> 00:17:17,439
fairly

451
00:17:17,439 --> 00:17:21,120
resilient against um

452
00:17:22,480 --> 00:17:23,359
um

453
00:17:23,359 --> 00:17:24,319
you know

454
00:17:24,319 --> 00:17:27,119
just like bite changes to them and

455
00:17:27,119 --> 00:17:28,799
um like for example i can just like

456
00:17:28,799 --> 00:17:32,760
append a space

457
00:17:33,120 --> 00:17:35,120
to the to the zip file

458
00:17:35,120 --> 00:17:36,799
and it's still a completely valid zip

459
00:17:36,799 --> 00:17:39,200
file it's still gonna work

460
00:17:39,200 --> 00:17:41,679
completely fine it's got no problems

461
00:17:41,679 --> 00:17:43,840
see i can get a listing of it i can

462
00:17:43,840 --> 00:17:47,440
unzip it um right

463
00:17:47,440 --> 00:17:48,799
so it's totally fine it's not

464
00:17:48,799 --> 00:17:50,000
complaining

465
00:17:50,000 --> 00:17:51,200
of uh

466
00:17:51,200 --> 00:17:52,160
you know

467
00:17:52,160 --> 00:17:54,160
any problems at all

468
00:17:54,160 --> 00:17:56,320
but i added a space to it so it's gonna

469
00:17:56,320 --> 00:17:58,720
have a completely different shaw once

470
00:17:58,720 --> 00:18:01,280
i'm so i mean that's

471
00:18:01,280 --> 00:18:02,640
not really

472
00:18:02,640 --> 00:18:04,880
uh

473
00:18:04,880 --> 00:18:07,600
a way that you um that the jar files are

474
00:18:07,600 --> 00:18:09,039
getting changed people aren't normally

475
00:18:09,039 --> 00:18:13,400
adding spaces to them

476
00:18:14,640 --> 00:18:16,880
but um

477
00:18:16,880 --> 00:18:20,400
my point right it's just like like

478
00:18:20,400 --> 00:18:21,440
um

479
00:18:21,440 --> 00:18:23,280
we're not so much worried that the jar

480
00:18:23,280 --> 00:18:26,160
falls on this what we're worried about

481
00:18:26,160 --> 00:18:29,320
i'm sorry

482
00:18:29,679 --> 00:18:31,760
you you go away you're making it hard

483
00:18:31,760 --> 00:18:33,840
for me to see

484
00:18:33,840 --> 00:18:37,199
are we still sharing though

485
00:18:38,640 --> 00:18:40,640
oh yeah oh so i just go there hide and

486
00:18:40,640 --> 00:18:43,840
then you come back okay cool

487
00:18:52,240 --> 00:18:56,960
yeah my like my point right is that um

488
00:18:56,960 --> 00:18:58,480
the um

489
00:18:58,480 --> 00:19:00,160
what we're concerned about

490
00:19:00,160 --> 00:19:02,160
right is that the logic right it's the

491
00:19:02,160 --> 00:19:04,880
logic that causes the um

492
00:19:04,880 --> 00:19:07,360
it causes the bug right it's not the uh

493
00:19:07,360 --> 00:19:10,880
the file itself that causes the bug

494
00:19:10,880 --> 00:19:13,520
and um

495
00:19:14,000 --> 00:19:17,039
sure enough right like let's go let's go

496
00:19:17,039 --> 00:19:19,200
um

497
00:19:19,200 --> 00:19:21,200
build some class files

498
00:19:21,200 --> 00:19:25,120
like let's let's um

499
00:19:25,120 --> 00:19:26,720
and other factors right like um for

500
00:19:26,720 --> 00:19:29,039
example the zip files themselves have

501
00:19:29,039 --> 00:19:32,000
date stamps right so if i were to build

502
00:19:32,000 --> 00:19:33,440
log4j core

503
00:19:33,440 --> 00:19:34,640
um

504
00:19:34,640 --> 00:19:36,240
and so i have a little example that i'll

505
00:19:36,240 --> 00:19:38,480
use

506
00:19:38,480 --> 00:19:42,000
let's go get the log4j detector that i

507
00:19:42,000 --> 00:19:45,000
built

508
00:19:55,440 --> 00:19:57,760
okay

509
00:20:03,760 --> 00:20:04,840
i'm going

510
00:20:04,840 --> 00:20:09,039
here and we're gonna go

511
00:20:09,039 --> 00:20:11,840
let's enter what i'm just gonna show you

512
00:20:11,840 --> 00:20:14,639
it's um

513
00:20:14,880 --> 00:20:17,679
for example

514
00:20:19,520 --> 00:20:22,720
we'll start with by just building it

515
00:20:22,720 --> 00:20:24,000
so i'm gonna

516
00:20:24,000 --> 00:20:26,880
build it right now

517
00:20:30,559 --> 00:20:34,559
um my point here is about jar files

518
00:20:34,559 --> 00:20:36,960
so now i've got lock for j detector

519
00:20:36,960 --> 00:20:39,200
latest and so let's put that here larger

520
00:20:39,200 --> 00:20:41,440
j detector latest

521
00:20:41,440 --> 00:20:42,960
uh i'll call it

522
00:20:42,960 --> 00:20:44,159
old

523
00:20:44,159 --> 00:20:48,280
because i built it

524
00:20:48,400 --> 00:20:52,000
and let's rebuild it build it again

525
00:20:52,480 --> 00:20:54,960
and then let's call this one new

526
00:20:54,960 --> 00:20:58,640
right so the exact same code

527
00:20:58,640 --> 00:21:00,240
old and new

528
00:21:00,240 --> 00:21:01,679
and it's um

529
00:21:01,679 --> 00:21:04,080
you know exact same bite count et cetera

530
00:21:04,080 --> 00:21:06,000
but is it going to have the same

531
00:21:06,000 --> 00:21:08,640
shaw and son

532
00:21:08,640 --> 00:21:10,799
pretend it was this is the actual log4j

533
00:21:10,799 --> 00:21:12,320
library itself i just want to show you

534
00:21:12,320 --> 00:21:13,200
something

535
00:21:13,200 --> 00:21:17,039
about using sha ones or you know any

536
00:21:17,039 --> 00:21:19,440
byte oriented signature to detect log

537
00:21:19,440 --> 00:21:21,440
for j just have to remember how to

538
00:21:21,440 --> 00:21:24,640
control paste here

539
00:21:26,000 --> 00:21:27,600
okay

540
00:21:27,600 --> 00:21:29,360
do something exciting there

541
00:21:29,360 --> 00:21:32,880
so if i uh there's the one we just did

542
00:21:32,880 --> 00:21:34,320
and there's the one

543
00:21:34,320 --> 00:21:36,640
i did seconds ago right why do they have

544
00:21:36,640 --> 00:21:38,640
such different

545
00:21:38,640 --> 00:21:40,799
um shot one so this is not going to work

546
00:21:40,799 --> 00:21:43,120
right detecting based on sha 1 is not

547
00:21:43,120 --> 00:21:45,120
gonna work because i just built the

548
00:21:45,120 --> 00:21:46,720
exact same code

549
00:21:46,720 --> 00:21:49,440
uh minutes apart

550
00:21:49,440 --> 00:21:51,600
and they're having different sha ones

551
00:21:51,600 --> 00:21:54,720
i'm sure half the people if not more on

552
00:21:54,720 --> 00:21:56,880
on this on the call here

553
00:21:56,880 --> 00:21:59,120
uh know the answer

554
00:21:59,120 --> 00:22:01,120
but i will tell you anyway and the

555
00:22:01,120 --> 00:22:03,520
reason

556
00:22:04,880 --> 00:22:08,320
see if you can spot the difference

557
00:22:10,000 --> 00:22:12,720
that's the new one

558
00:22:12,720 --> 00:22:16,080
and so i'm just doing a listing on it

559
00:22:16,080 --> 00:22:18,399
right

560
00:22:22,799 --> 00:22:24,559
so you are

561
00:22:24,559 --> 00:22:26,480
old

562
00:22:26,480 --> 00:22:29,440
and you are new

563
00:22:31,520 --> 00:22:34,520
88203

564
00:22:36,480 --> 00:22:39,120
2727

565
00:22:39,120 --> 00:22:41,039
26 27.

566
00:22:41,039 --> 00:22:43,360
well

567
00:22:45,600 --> 00:22:48,799
1375 1375.

568
00:22:48,799 --> 00:22:50,240
looks like i don't even know why they're

569
00:22:50,240 --> 00:22:52,559
different

570
00:22:52,640 --> 00:22:55,360
um did perhaps the

571
00:22:55,360 --> 00:22:57,039
poem about properties because they did a

572
00:22:57,039 --> 00:23:00,720
maybe maybe install it yeah yeah yeah

573
00:23:02,640 --> 00:23:05,520
so that's new

574
00:23:07,760 --> 00:23:09,760
i mean with the time stamps i'm curious

575
00:23:09,760 --> 00:23:12,080
like the time times don't look

576
00:23:12,080 --> 00:23:14,240
oh yeah yeah because that's 227 it's the

577
00:23:14,240 --> 00:23:16,000
seconds that changed

578
00:23:16,000 --> 00:23:18,159
um on them and i'm just not seeing the

579
00:23:18,159 --> 00:23:20,880
seconds in this listing that's right

580
00:23:20,880 --> 00:23:23,360
so i should have waited like a minute

581
00:23:23,360 --> 00:23:24,720
before doing builds and then we would

582
00:23:24,720 --> 00:23:26,559
have seen the minute changed i guess we

583
00:23:26,559 --> 00:23:28,000
could do that now because it's probably

584
00:23:28,000 --> 00:23:30,480
been a minute

585
00:23:33,520 --> 00:23:37,240
so i built it again

586
00:23:37,280 --> 00:23:41,280
and you are you can be new

587
00:23:44,720 --> 00:23:47,279
yeah so you can see it's using for 230

588
00:23:47,279 --> 00:23:51,000
as the timestamp now

589
00:23:51,039 --> 00:23:53,279
whereas before it was using 227 as the

590
00:23:53,279 --> 00:23:54,720
timestamp well those time temps are part

591
00:23:54,720 --> 00:23:56,559
of the byte stream and so because the

592
00:23:56,559 --> 00:23:58,640
timestamp the build time of the jar file

593
00:23:58,640 --> 00:24:01,360
itself is is is changing based on the

594
00:24:01,360 --> 00:24:02,960
time that we build it then that's going

595
00:24:02,960 --> 00:24:06,000
to cause the the sha one to change right

596
00:24:06,000 --> 00:24:07,520
so that's why

597
00:24:07,520 --> 00:24:09,600
that's one of the reasons why

598
00:24:09,600 --> 00:24:13,360
a finger based um

599
00:24:13,360 --> 00:24:16,799
approach is is not going to work right

600
00:24:16,799 --> 00:24:18,640
like it's true

601
00:24:18,640 --> 00:24:20,640
the nice thing about the fingerprint

602
00:24:20,640 --> 00:24:22,000
based approach

603
00:24:22,000 --> 00:24:22,960
is

604
00:24:22,960 --> 00:24:24,279
you know probably

605
00:24:24,279 --> 00:24:27,000
95 percent of

606
00:24:27,000 --> 00:24:28,960
log4j2.16.0s in the world are gonna just

607
00:24:28,960 --> 00:24:30,720
come from maven central people don't

608
00:24:30,720 --> 00:24:33,520
rebuild log4j normally normally they

609
00:24:33,520 --> 00:24:35,760
just download it from here

610
00:24:35,760 --> 00:24:37,840
and copy it into their system and off it

611
00:24:37,840 --> 00:24:38,799
goes

612
00:24:38,799 --> 00:24:40,880
i guess

613
00:24:40,880 --> 00:24:43,360
but my point is that you know this bug

614
00:24:43,360 --> 00:24:46,080
is so severe that the fact that 95

615
00:24:46,080 --> 00:24:47,600
percent of the time the driver will

616
00:24:47,600 --> 00:24:49,440
actually be bite for bite identical as

617
00:24:49,440 --> 00:24:51,279
this one

618
00:24:51,279 --> 00:24:53,919
here on maven central uh is not good

619
00:24:53,919 --> 00:24:56,400
enough right like that that five percent

620
00:24:56,400 --> 00:24:58,159
chance and that's just my gut saying

621
00:24:58,159 --> 00:24:59,039
that

622
00:24:59,039 --> 00:25:02,080
um that you might not have the bite for

623
00:25:02,080 --> 00:25:04,320
bite identical version here like maybe

624
00:25:04,320 --> 00:25:06,559
you're running artifactory in-house and

625
00:25:06,559 --> 00:25:08,880
maybe your artifactory resigns the jar

626
00:25:08,880 --> 00:25:10,960
files um that's i've seen that pattern

627
00:25:10,960 --> 00:25:12,559
where people set up signing keys on

628
00:25:12,559 --> 00:25:14,400
their internal artifactory

629
00:25:14,400 --> 00:25:16,159
um and so artifactory is going to be

630
00:25:16,159 --> 00:25:17,679
resigning all the jar files before it

631
00:25:17,679 --> 00:25:19,600
lets your internal systems bring them

632
00:25:19,600 --> 00:25:21,440
into its uh

633
00:25:21,440 --> 00:25:23,279
into its build right well that's going

634
00:25:23,279 --> 00:25:24,880
to again that's going to perturb the key

635
00:25:24,880 --> 00:25:26,960
so right so if you do

636
00:25:26,960 --> 00:25:30,320
a scan looking for

637
00:25:30,320 --> 00:25:32,640
this xiao on fingerprint again you're

638
00:25:32,640 --> 00:25:33,760
going to miss it you're going to miss

639
00:25:33,760 --> 00:25:35,840
all the log projects

640
00:25:35,840 --> 00:25:38,159
or if you guys if you have a policy like

641
00:25:38,159 --> 00:25:40,320
you know gen 2 is a famous linux

642
00:25:40,320 --> 00:25:42,559
distribution of having a policy of of

643
00:25:42,559 --> 00:25:44,159
rebuilding the operating system from

644
00:25:44,159 --> 00:25:46,000
scratch right well not from scratch but

645
00:25:46,000 --> 00:25:48,159
every new package that you bring down is

646
00:25:48,159 --> 00:25:50,400
going to get recompiled before it's

647
00:25:50,400 --> 00:25:53,679
installed in your gen 2 right so

648
00:25:53,679 --> 00:25:56,080
if you take a if you were to run a

649
00:25:56,080 --> 00:25:58,400
similar philosophy with your own java

650
00:25:58,400 --> 00:26:00,080
application that means you're going to

651
00:26:00,080 --> 00:26:03,440
download and recompile log4j every time

652
00:26:03,440 --> 00:26:05,600
you do a build right like that's not an

653
00:26:05,600 --> 00:26:08,320
unreasonable uh

654
00:26:08,320 --> 00:26:09,279
um

655
00:26:09,279 --> 00:26:11,279
you know best i wouldn't call it a best

656
00:26:11,279 --> 00:26:12,880
practice but it's it's not an

657
00:26:12,880 --> 00:26:14,480
unreasonable practice

658
00:26:14,480 --> 00:26:15,919
uh when building software to be like

659
00:26:15,919 --> 00:26:17,520
okay all my dependencies they better

660
00:26:17,520 --> 00:26:19,200
build and i better build them myself

661
00:26:19,200 --> 00:26:21,840
right well again this uh a fingerprint

662
00:26:21,840 --> 00:26:23,440
based approach is not gonna work so what

663
00:26:23,440 --> 00:26:24,880
do we got to do

664
00:26:24,880 --> 00:26:26,720
if a fingerprint of the jar file is not

665
00:26:26,720 --> 00:26:29,120
good enough

666
00:26:29,600 --> 00:26:33,439
see if any comments here

667
00:26:35,520 --> 00:26:36,799
okay

668
00:26:36,799 --> 00:26:39,279
tim good to see you tim

669
00:26:39,279 --> 00:26:41,039
um

670
00:26:41,039 --> 00:26:44,559
run black duck yeah definitely

671
00:26:44,559 --> 00:26:46,880
i'm curious to just know how black duck

672
00:26:46,880 --> 00:26:48,320
will do

673
00:26:48,320 --> 00:26:51,760
if it can find it in all its variations

674
00:26:51,760 --> 00:26:53,679
you could unzip the war files okay so

675
00:26:53,679 --> 00:26:55,679
let's unzip

676
00:26:55,679 --> 00:26:58,400
you could just look for every

677
00:26:58,400 --> 00:27:00,480
jar file that has the word log in it too

678
00:27:00,480 --> 00:27:01,440
well

679
00:27:01,440 --> 00:27:06,039
okay more problems there

680
00:27:09,200 --> 00:27:11,520
let us

681
00:27:11,520 --> 00:27:13,440
evaluate all of those

682
00:27:13,440 --> 00:27:15,279
ideas and by the way thank you for the

683
00:27:15,279 --> 00:27:18,159
um the comments i'm i'm i

684
00:27:18,159 --> 00:27:19,360
really appreciate the comments that

685
00:27:19,360 --> 00:27:21,120
makes this more fun for me

686
00:27:21,120 --> 00:27:24,880
um so the first one is run black duck i

687
00:27:24,880 --> 00:27:26,159
don't have a black deck license so i

688
00:27:26,159 --> 00:27:27,520
can't do that probably that would work

689
00:27:27,520 --> 00:27:29,440
well i am very curious to know i

690
00:27:29,440 --> 00:27:32,799
actually have a whole corpus of um

691
00:27:32,799 --> 00:27:35,120
log4j samples i think i called it log4j

692
00:27:35,120 --> 00:27:36,240
samples

693
00:27:36,240 --> 00:27:38,880
so um if anyone has

694
00:27:38,880 --> 00:27:41,760
yeah if anyone has a blackduck license

695
00:27:41,760 --> 00:27:44,080
um if they would like to take this

696
00:27:44,080 --> 00:27:45,679
corpus so it has all these different

697
00:27:45,679 --> 00:27:49,919
versions of blog4j done as uber jars

698
00:27:49,919 --> 00:27:53,440
done as uh shaded jars

699
00:27:53,440 --> 00:27:54,960
done as

700
00:27:54,960 --> 00:27:57,200
spring boot executable jars right

701
00:27:57,200 --> 00:28:00,320
etcetera done as exploded jars so if you

702
00:28:00,320 --> 00:28:01,600
have a black deck license i would be

703
00:28:01,600 --> 00:28:03,360
very curious like if you were to take my

704
00:28:03,360 --> 00:28:06,640
log4j samples repository

705
00:28:06,640 --> 00:28:08,480
and um

706
00:28:08,480 --> 00:28:10,080
and clone it

707
00:28:10,080 --> 00:28:13,559
and then um

708
00:28:16,559 --> 00:28:18,320
and then run black back against it i

709
00:28:18,320 --> 00:28:21,120
would be very grateful

710
00:28:21,120 --> 00:28:23,760
that is

711
00:28:23,760 --> 00:28:26,640
i'm sorry i just don't know how to

712
00:28:26,640 --> 00:28:29,520
use mac plus okay mu i'm just gonna use

713
00:28:29,520 --> 00:28:31,279
the mouse

714
00:28:31,279 --> 00:28:34,240
yeah we can do the mouse the mouse can

715
00:28:34,240 --> 00:28:35,360
do this

716
00:28:35,360 --> 00:28:37,678
yes

717
00:28:38,240 --> 00:28:40,080
and this is a public repository anyone's

718
00:28:40,080 --> 00:28:42,799
free to clone it

719
00:28:43,360 --> 00:28:45,440
and down come all these nice variations

720
00:28:45,440 --> 00:28:47,679
of log4j and so

721
00:28:47,679 --> 00:28:50,320
use the log4j samples repository to test

722
00:28:50,320 --> 00:28:51,919
your scanners see what your scanners

723
00:28:51,919 --> 00:28:54,159
think

724
00:28:56,720 --> 00:28:58,880
and we've got the false hits

725
00:28:58,880 --> 00:28:59,840
whoops

726
00:28:59,840 --> 00:29:02,720
uh you got the false hits so these ones

727
00:29:02,720 --> 00:29:05,120
um

728
00:29:08,399 --> 00:29:10,960
yeah do not have the bad vulnerability

729
00:29:10,960 --> 00:29:13,200
oh yeah yeah that's right 216 actually

730
00:29:13,200 --> 00:29:16,080
was patched later it's a 2.14

731
00:29:16,080 --> 00:29:17,600
that has it

732
00:29:17,600 --> 00:29:19,360
um there was some follow-up

733
00:29:19,360 --> 00:29:20,799
vulnerability so they quickly the team

734
00:29:20,799 --> 00:29:23,360
quickly brought out 2.17.1 so these are

735
00:29:23,360 --> 00:29:24,559
all the versions of block feature that

736
00:29:24,559 --> 00:29:26,559
don't have the vulnerability

737
00:29:26,559 --> 00:29:28,640
including api

738
00:29:28,640 --> 00:29:31,760
and slf4j and old log for j 1.x and

739
00:29:31,760 --> 00:29:34,399
exploded right and then the true hits so

740
00:29:34,399 --> 00:29:36,559
just take your um so these are all

741
00:29:36,559 --> 00:29:38,720
versions of log4j that have the

742
00:29:38,720 --> 00:29:41,520
vulnerability in various uh incarnations

743
00:29:41,520 --> 00:29:42,480
these are just downloaded from

744
00:29:42,480 --> 00:29:44,640
ravencentral but then i explode them i

745
00:29:44,640 --> 00:29:46,559
shade them i do springboot executable of

746
00:29:46,559 --> 00:29:48,640
them i uber jar them these are different

747
00:29:48,640 --> 00:29:51,120
ways that people package up java and

748
00:29:51,120 --> 00:29:52,799
distribute it

749
00:29:52,799 --> 00:29:55,440
and then uh and then finally oh yeah old

750
00:29:55,440 --> 00:29:57,840
it's log for j1.x right see what your

751
00:29:57,840 --> 00:30:00,320
scanner thinks of that

752
00:30:00,320 --> 00:30:02,480
so yeah regarding blackbook i would love

753
00:30:02,480 --> 00:30:03,919
to know if anyone's got a black click

754
00:30:03,919 --> 00:30:05,840
license please run it against this

755
00:30:05,840 --> 00:30:07,200
public

756
00:30:07,200 --> 00:30:10,159
repository log4jsamples

757
00:30:10,159 --> 00:30:11,520
on github

758
00:30:11,520 --> 00:30:15,440
and and let me know i'd be very grateful

759
00:30:17,360 --> 00:30:19,760
now as for unzipping the war files if we

760
00:30:19,760 --> 00:30:21,760
just unzip every war file then the jar

761
00:30:21,760 --> 00:30:23,679
files will be in there right

762
00:30:23,679 --> 00:30:25,679
um

763
00:30:25,679 --> 00:30:27,919
and or unzip the jar files themselves

764
00:30:27,919 --> 00:30:29,279
right because

765
00:30:29,279 --> 00:30:32,880
if it's just a date stamp

766
00:30:35,679 --> 00:30:39,440
for problem this one that i was building

767
00:30:39,440 --> 00:30:41,039
if it's just that if it's just a bait

768
00:30:41,039 --> 00:30:43,200
stamp problem what you could do

769
00:30:43,200 --> 00:30:44,960
is

770
00:30:44,960 --> 00:30:48,880
um forget about the date stamps right

771
00:30:48,960 --> 00:30:50,720
so this is a cool idea and i'm actually

772
00:30:50,720 --> 00:30:52,480
going to go somewhere else to do this

773
00:30:52,480 --> 00:30:54,640
idea

774
00:30:54,640 --> 00:30:56,880
here

775
00:30:57,039 --> 00:30:58,399
hey

776
00:30:58,399 --> 00:31:00,960
because

777
00:31:00,960 --> 00:31:04,960
and i'm going to take a copy of that

778
00:31:04,960 --> 00:31:06,880
okay

779
00:31:06,880 --> 00:31:09,039
let's use you can be

780
00:31:09,039 --> 00:31:12,559
java eight and you can be each

781
00:31:12,559 --> 00:31:14,480
eleven and you can be joe i think i got

782
00:31:14,480 --> 00:31:19,720
number 17 and you can do java six sure

783
00:31:22,320 --> 00:31:25,120
so what i'm gonna do

784
00:31:26,799 --> 00:31:28,799
one six hopefully it works i don't know

785
00:31:28,799 --> 00:31:30,799
if java 6 even works on this computer

786
00:31:30,799 --> 00:31:33,799
anymore

787
00:31:38,320 --> 00:31:40,880
and it's done we built the class files

788
00:31:40,880 --> 00:31:43,039
right

789
00:31:43,039 --> 00:31:44,640
so my example what i'm trying to show

790
00:31:44,640 --> 00:31:48,159
here is that even compiler variation

791
00:31:48,159 --> 00:31:50,720
unfortunately

792
00:31:50,720 --> 00:31:53,760
will perturb the signatures

793
00:31:53,760 --> 00:31:58,240
so that's java 6. let's do java 8.

794
00:31:59,120 --> 00:32:01,840
um

795
00:32:07,440 --> 00:32:11,200
oh which java 8 should i go with

796
00:32:11,360 --> 00:32:13,679
i mean the thing is you want

797
00:32:13,679 --> 00:32:16,640
usually you won't see um

798
00:32:16,640 --> 00:32:17,760
oh

799
00:32:17,760 --> 00:32:18,559
yeah

800
00:32:18,559 --> 00:32:22,000
sorry i don't have a file called a okay

801
00:32:22,000 --> 00:32:23,919
so which one should we just use for

802
00:32:23,919 --> 00:32:25,519
maybe util that class looks kind of

803
00:32:25,519 --> 00:32:27,600
interesting so i'm going to do a shot on

804
00:32:27,600 --> 00:32:31,039
some on util.class

805
00:32:32,000 --> 00:32:33,919
and then let's do the same in our log

806
00:32:33,919 --> 00:32:37,720
between our java 6.

807
00:32:44,159 --> 00:32:46,399
and lo and behold right exact same

808
00:32:46,399 --> 00:32:48,000
source code

809
00:32:48,000 --> 00:32:50,000
but i used java 6 as a compiler versus

810
00:32:50,000 --> 00:32:52,960
java 8 in the compiler and oh no

811
00:32:52,960 --> 00:32:57,200
the um the bytes have changed

812
00:32:57,200 --> 00:32:58,320
so

813
00:32:58,320 --> 00:33:00,240
unfortunately that means

814
00:33:00,240 --> 00:33:03,039
um taking signatures of the underlying

815
00:33:03,039 --> 00:33:05,039
um like taking bite

816
00:33:05,039 --> 00:33:07,679
signatures like sha-1 signatures of the

817
00:33:07,679 --> 00:33:08,799
fingerprints

818
00:33:08,799 --> 00:33:10,640
of the underlying class files is not

819
00:33:10,640 --> 00:33:13,200
going to work either because

820
00:33:13,200 --> 00:33:15,279
compiler variation

821
00:33:15,279 --> 00:33:18,399
is going to trip it up

822
00:33:18,480 --> 00:33:20,880
i'll even go i mean of course

823
00:33:20,880 --> 00:33:23,519
um compiler variation

824
00:33:23,519 --> 00:33:26,159
like um

825
00:33:27,440 --> 00:33:31,760
i'm like back in the day here um

826
00:33:31,760 --> 00:33:33,760
first if i go like you know like that

827
00:33:33,760 --> 00:33:35,919
you know optimization level of course

828
00:33:35,919 --> 00:33:37,120
that's gonna

829
00:33:37,120 --> 00:33:39,200
um

830
00:33:39,200 --> 00:33:42,159
have changed it as well

831
00:33:42,960 --> 00:33:44,080
how do you do that how do i do

832
00:33:44,080 --> 00:33:47,120
optimization level

833
00:33:49,519 --> 00:33:51,840
and debug symbols of course so if i do

834
00:33:51,840 --> 00:33:53,679
yeah debugging info that's like you know

835
00:33:53,679 --> 00:33:55,519
there's all these different ways that

836
00:33:55,519 --> 00:33:57,440
you can um

837
00:33:57,440 --> 00:33:58,559
perturb

838
00:33:58,559 --> 00:34:00,240
the byte code

839
00:34:00,240 --> 00:34:02,000
as you're compiling i can't remember how

840
00:34:02,000 --> 00:34:04,559
to set the optimization level on

841
00:34:04,559 --> 00:34:07,360
in the compiling

842
00:34:07,360 --> 00:34:08,239
um

843
00:34:08,239 --> 00:34:09,918
but even just the version yeah as i've

844
00:34:09,918 --> 00:34:12,480
showed java 6 java 8.

845
00:34:12,480 --> 00:34:14,399
i could keep doing it i you know i could

846
00:34:14,399 --> 00:34:15,440
go to

847
00:34:15,440 --> 00:34:18,000
java um

848
00:34:18,000 --> 00:34:20,879
17 java 11 but i think you guys believe

849
00:34:20,879 --> 00:34:22,239
me that every one of those is going to

850
00:34:22,239 --> 00:34:23,760
have different signatures

851
00:34:23,760 --> 00:34:26,239
so unfortunately um

852
00:34:26,239 --> 00:34:27,839
unzipping them all and looking at the

853
00:34:27,839 --> 00:34:29,440
underlying fingerprints of the actual

854
00:34:29,440 --> 00:34:31,918
class files which contain the logic

855
00:34:31,918 --> 00:34:33,359
of the vulnerability that's not going to

856
00:34:33,359 --> 00:34:35,359
work either

857
00:34:35,359 --> 00:34:36,639
it's not going to you know it's not

858
00:34:36,639 --> 00:34:38,159
going to be bulletproof and the goal

859
00:34:38,159 --> 00:34:39,839
here is we want something bulletproof

860
00:34:39,839 --> 00:34:41,679
like this is a severe

861
00:34:41,679 --> 00:34:43,040
vulnerability

862
00:34:43,040 --> 00:34:46,040
um

863
00:34:48,000 --> 00:34:50,800
we don't want to have any any chance

864
00:34:50,800 --> 00:34:53,199
that uh that that vulnerable version is

865
00:34:53,199 --> 00:34:55,598
on disk

866
00:34:59,599 --> 00:35:02,560
yeah and then yeah looking for

867
00:35:02,560 --> 00:35:04,400
looking for all files with log in the

868
00:35:04,400 --> 00:35:06,480
name it's a it's a very good fast

869
00:35:06,480 --> 00:35:08,560
approach

870
00:35:08,560 --> 00:35:10,799
um

871
00:35:12,079 --> 00:35:13,760
but again i mean you can even see with

872
00:35:13,760 --> 00:35:17,560
the samples here

873
00:35:22,560 --> 00:35:26,200
with the true hits

874
00:35:31,599 --> 00:35:33,760
it's it's not these are all true hits eh

875
00:35:33,760 --> 00:35:36,880
so this like um

876
00:35:36,880 --> 00:35:41,040
this jar war zip ear and this zip file

877
00:35:41,040 --> 00:35:43,920
and this funnel jar right like they all

878
00:35:43,920 --> 00:35:45,920
uh have the vulnerable version of blog4j

879
00:35:45,920 --> 00:35:48,079
in them and so for example in the uber

880
00:35:48,079 --> 00:35:50,560
unfortunately

881
00:35:50,560 --> 00:35:51,839
looking for

882
00:35:51,839 --> 00:35:53,440
log yeah it's not going to find it in

883
00:35:53,440 --> 00:35:54,880
that case

884
00:35:54,880 --> 00:35:57,200
ubercards are very interesting i've

885
00:35:57,200 --> 00:35:59,200
actually i've written a blog post about

886
00:35:59,200 --> 00:36:00,079
them

887
00:36:00,079 --> 00:36:01,760
um

888
00:36:01,760 --> 00:36:04,880
encourage you guys to go look at that uh

889
00:36:04,880 --> 00:36:06,880
uber jars

890
00:36:06,880 --> 00:36:08,079
um

891
00:36:08,079 --> 00:36:10,240
where would you

892
00:36:10,240 --> 00:36:12,000
i guess you just put merge basement

893
00:36:12,000 --> 00:36:13,839
company or julius

894
00:36:13,839 --> 00:36:15,359
you just go uber drives jewelers and

895
00:36:15,359 --> 00:36:16,800
then i think you get it

896
00:36:16,800 --> 00:36:19,200
yeah software composition analysis

897
00:36:19,200 --> 00:36:22,240
versus uber jars right

898
00:36:22,240 --> 00:36:24,079
so they're a funny way that java gets

899
00:36:24,079 --> 00:36:26,240
distributed that is actually not that

900
00:36:26,240 --> 00:36:30,000
uncommon for example um

901
00:36:30,000 --> 00:36:32,640
does anyone here

902
00:36:32,640 --> 00:36:34,079
use jira

903
00:36:34,079 --> 00:36:35,040
or

904
00:36:35,040 --> 00:36:37,359
bitbucket or confluence

905
00:36:37,359 --> 00:36:38,560
and if you use

906
00:36:38,560 --> 00:36:41,520
those products bitbucket or jira or

907
00:36:41,520 --> 00:36:43,280
compliments on-prem the on-prem versions

908
00:36:43,280 --> 00:36:45,599
of those products um you probably use

909
00:36:45,599 --> 00:36:47,680
the plug-ins right where you go to the

910
00:36:47,680 --> 00:36:49,520
plug-ins to say oh i'll take this you

911
00:36:49,520 --> 00:36:51,200
know i can draw charts in my jira

912
00:36:51,200 --> 00:36:53,040
tickets if i take this plug-in or this

913
00:36:53,040 --> 00:36:54,400
another plug-in that helps me do

914
00:36:54,400 --> 00:36:56,400
timesheets in my jira and this plug-in

915
00:36:56,400 --> 00:36:58,000
helps me like

916
00:36:58,000 --> 00:36:59,040
draw

917
00:36:59,040 --> 00:37:01,119
sequence diagrams in directly on the

918
00:37:01,119 --> 00:37:02,960
glass and confluence right well those

919
00:37:02,960 --> 00:37:04,480
plug-ins

920
00:37:04,480 --> 00:37:08,400
they tend to be built using this uber um

921
00:37:08,400 --> 00:37:11,280
approach that's just how atlassian java

922
00:37:11,280 --> 00:37:13,440
plug-ins all atlassian plug-ins for

923
00:37:13,440 --> 00:37:15,839
confluence here and pipbucket are java

924
00:37:15,839 --> 00:37:17,839
because atlassian those are java project

925
00:37:17,839 --> 00:37:18,880
products

926
00:37:18,880 --> 00:37:20,480
and the plug-ins themselves are put

927
00:37:20,480 --> 00:37:22,880
together using this uber technique right

928
00:37:22,880 --> 00:37:25,839
and so you might have an atlassian jira

929
00:37:25,839 --> 00:37:28,240
plug-in using log4j

930
00:37:28,240 --> 00:37:32,079
and so you're going to need a technique

931
00:37:32,079 --> 00:37:33,520
that

932
00:37:33,520 --> 00:37:35,359
can you know deal with this this

933
00:37:35,359 --> 00:37:37,280
situation if you want to make sure that

934
00:37:37,280 --> 00:37:39,119
you know all your desks in your

935
00:37:39,119 --> 00:37:41,920
corporation don't have log for day

936
00:37:41,920 --> 00:37:44,240
so good little uh blog article on this

937
00:37:44,240 --> 00:37:46,879
in this problem

938
00:37:49,200 --> 00:37:51,280
so i mean so far i've i've shown you all

939
00:37:51,280 --> 00:37:53,119
the that the

940
00:37:53,119 --> 00:37:55,040
fingerprint based approaches just aren't

941
00:37:55,040 --> 00:37:57,280
going to work here

942
00:37:57,280 --> 00:37:59,520
um what will work however

943
00:37:59,520 --> 00:38:01,920
is to look and this is what i ended up

944
00:38:01,920 --> 00:38:05,119
doing when i i made a log4j detector

945
00:38:05,119 --> 00:38:06,320
um

946
00:38:06,320 --> 00:38:10,560
let's just run it find fun to run

947
00:38:15,200 --> 00:38:17,440
a detector so when i made this log

948
00:38:17,440 --> 00:38:19,280
project detector um

949
00:38:19,280 --> 00:38:22,320
let's use the latest

950
00:38:26,000 --> 00:38:28,960
the goal is to look at everything

951
00:38:28,960 --> 00:38:30,160
on disk

952
00:38:30,160 --> 00:38:32,400
to any recursion level right

953
00:38:32,400 --> 00:38:35,040
no matter how things were put together

954
00:38:35,040 --> 00:38:36,400
um

955
00:38:36,400 --> 00:38:38,320
including shaded shaded is wild because

956
00:38:38,320 --> 00:38:40,800
that's where the log4j code is actually

957
00:38:40,800 --> 00:38:42,560
renamed

958
00:38:42,560 --> 00:38:44,400
all the class names are renamed to

959
00:38:44,400 --> 00:38:46,640
different class names to avoid class

960
00:38:46,640 --> 00:38:49,119
path conflicts

961
00:38:49,119 --> 00:38:51,440
and so i'm looking at it with the goal

962
00:38:51,440 --> 00:38:53,680
is i realize like

963
00:38:53,680 --> 00:38:55,040
what we need to look at is the source

964
00:38:55,040 --> 00:38:57,040
code is the binary code itself we're

965
00:38:57,040 --> 00:38:58,800
going to have to look at the raw

966
00:38:58,800 --> 00:39:01,200
binary code there to look for specific

967
00:39:01,200 --> 00:39:04,240
patterns uh in the binary code that help

968
00:39:04,240 --> 00:39:07,119
identify the version of log4j using as

969
00:39:07,119 --> 00:39:09,680
little log4j code as possible too right

970
00:39:09,680 --> 00:39:12,000
because

971
00:39:12,160 --> 00:39:13,920
you know maybe what if someone only

972
00:39:13,920 --> 00:39:17,520
grabs uh 30 of log4j

973
00:39:17,520 --> 00:39:19,680
in their system but happens to grab the

974
00:39:19,680 --> 00:39:21,680
vulnerable part like i mean that's sort

975
00:39:21,680 --> 00:39:24,000
of that would be insane if someone was

976
00:39:24,000 --> 00:39:26,079
like you know what i just want 30 to log

977
00:39:26,079 --> 00:39:27,520
for j in my system

978
00:39:27,520 --> 00:39:29,520
but you know it's uh i guess it's

979
00:39:29,520 --> 00:39:31,680
conceivable and and that that saying

980
00:39:31,680 --> 00:39:33,920
that i live by is if you can imagine it

981
00:39:33,920 --> 00:39:36,240
it exists it does exist on the internet

982
00:39:36,240 --> 00:39:38,480
somewhere if you can imagine it

983
00:39:38,480 --> 00:39:40,240
so i wanted a detector that would be

984
00:39:40,240 --> 00:39:42,320
robust against

985
00:39:42,320 --> 00:39:44,560
all these possible ways of taking off

986
00:39:44,560 --> 00:39:46,160
your drain and distributing them and so

987
00:39:46,160 --> 00:39:47,839
let me show you what i came up with in

988
00:39:47,839 --> 00:39:49,839
the end

989
00:39:49,839 --> 00:39:52,079
and we can just go to the log4j detector

990
00:39:52,079 --> 00:39:53,200
itself

991
00:39:53,200 --> 00:39:55,599
log4j detector

992
00:39:55,599 --> 00:39:59,119
and see the horrible logic

993
00:39:59,119 --> 00:40:02,160
make this a little bigger

994
00:40:03,680 --> 00:40:04,640
we're going to go into the source

995
00:40:04,640 --> 00:40:06,640
directory

996
00:40:06,640 --> 00:40:08,720
and here it is log free data these are

997
00:40:08,720 --> 00:40:10,880
just utility classes just to help with

998
00:40:10,880 --> 00:40:12,720
you know the json you know because

999
00:40:12,720 --> 00:40:14,319
people

1000
00:40:14,319 --> 00:40:15,760
asked for a

1001
00:40:15,760 --> 00:40:17,839
adjacent output for example right oh

1002
00:40:17,839 --> 00:40:19,920
here have a json output then

1003
00:40:19,920 --> 00:40:20,800
this

1004
00:40:20,800 --> 00:40:23,040
you know parsing and dealing with the

1005
00:40:23,040 --> 00:40:24,720
strings and the output

1006
00:40:24,720 --> 00:40:25,920
um

1007
00:40:25,920 --> 00:40:27,200
and so here's where it's actually

1008
00:40:27,200 --> 00:40:29,598
happening

1009
00:40:29,680 --> 00:40:32,640
open source uh log4j detector you know

1010
00:40:32,640 --> 00:40:35,200
uh public repository you don't need to

1011
00:40:35,200 --> 00:40:37,359
talk to you don't need to talk to us we

1012
00:40:37,359 --> 00:40:38,400
are you know

1013
00:40:38,400 --> 00:40:40,720
a vulnerability scanning company we we

1014
00:40:40,720 --> 00:40:43,200
make a vulnerability scanner but you to

1015
00:40:43,200 --> 00:40:44,400
use this tool you don't need to talk to

1016
00:40:44,400 --> 00:40:46,640
us it's only it's on github it's public

1017
00:40:46,640 --> 00:40:49,760
so what we ended up doing is

1018
00:40:49,760 --> 00:40:52,640
when you look at log4j itself

1019
00:40:52,640 --> 00:40:55,040
um

1020
00:40:57,040 --> 00:40:59,839
right so if we look at the um the

1021
00:40:59,839 --> 00:41:02,400
library inside it you see this this sort

1022
00:41:02,400 --> 00:41:03,839
of um

1023
00:41:03,839 --> 00:41:05,599
structure right there's these

1024
00:41:05,599 --> 00:41:08,160
subdirectories right so good core

1025
00:41:08,160 --> 00:41:11,520
async core filter core pattern so we

1026
00:41:11,520 --> 00:41:13,599
look for um this this path this

1027
00:41:13,599 --> 00:41:14,800
structure

1028
00:41:14,800 --> 00:41:18,000
and it turns out right like if you have

1029
00:41:18,000 --> 00:41:21,280
a file called core and log event and

1030
00:41:21,280 --> 00:41:22,960
core dot appender and cordial filter if

1031
00:41:22,960 --> 00:41:24,640
you have like these

1032
00:41:24,640 --> 00:41:27,920
um you know these five files then you

1033
00:41:27,920 --> 00:41:31,760
probably have log4j2.x on your system

1034
00:41:31,760 --> 00:41:34,000
and if you have this then you probably

1035
00:41:34,000 --> 00:41:36,800
have log4j1.x on your system and if you

1036
00:41:36,800 --> 00:41:39,040
have this file well this file only

1037
00:41:39,040 --> 00:41:42,800
showed up after log4j 2.10 right so you

1038
00:41:42,800 --> 00:41:44,960
can imagine i just spent

1039
00:41:44,960 --> 00:41:48,000
like you all probably

1040
00:41:48,000 --> 00:41:50,000
probably a couple dozen hours just

1041
00:41:50,000 --> 00:41:52,160
crawling through the blog4j because

1042
00:41:52,160 --> 00:41:54,800
log4j itself of course is a public open

1043
00:41:54,800 --> 00:41:57,440
uh apache published piece of software so

1044
00:41:57,440 --> 00:41:58,880
i just looked at all the versions of

1045
00:41:58,880 --> 00:42:00,880
vlog4j and just tried to figure out when

1046
00:42:00,880 --> 00:42:03,680
did this file show up and then you know

1047
00:42:03,680 --> 00:42:06,400
once i actually figured out

1048
00:42:06,400 --> 00:42:08,000
so when did this when did these files

1049
00:42:08,000 --> 00:42:09,200
show up

1050
00:42:09,200 --> 00:42:11,280
and then and then i

1051
00:42:11,280 --> 00:42:14,000
realized in addition

1052
00:42:14,000 --> 00:42:16,480
java because of the way java works

1053
00:42:16,480 --> 00:42:18,960
these string literals are part of error

1054
00:42:18,960 --> 00:42:21,680
messages or part of property lookups

1055
00:42:21,680 --> 00:42:23,760
well string literals are actually stored

1056
00:42:23,760 --> 00:42:26,960
as is directly in the bytecode right so

1057
00:42:26,960 --> 00:42:28,960
if you have an error message if log4j is

1058
00:42:28,960 --> 00:42:30,880
going to say something like invalid jndi

1059
00:42:30,880 --> 00:42:33,280
url you know it's going to complain

1060
00:42:33,280 --> 00:42:34,240
um

1061
00:42:34,240 --> 00:42:36,400
with some error message

1062
00:42:36,400 --> 00:42:38,079
it turns out that error message will be

1063
00:42:38,079 --> 00:42:40,400
stored directly in in the class file so

1064
00:42:40,400 --> 00:42:42,160
you can look for that error message and

1065
00:42:42,160 --> 00:42:44,960
since i realized that that error message

1066
00:42:44,960 --> 00:42:48,240
only showed up starting in log4j 2.15

1067
00:42:48,240 --> 00:42:49,920
you know i can use that to be like okay

1068
00:42:49,920 --> 00:42:51,839
well because i see that error message i

1069
00:42:51,839 --> 00:42:54,240
know that we're at least 2.15 or newer

1070
00:42:54,240 --> 00:42:57,200
right and because i see this config

1071
00:42:57,200 --> 00:42:59,920
option as a string literal like this

1072
00:42:59,920 --> 00:43:02,800
sequence of bytes occurs in the class

1073
00:43:02,800 --> 00:43:05,280
file then i know we're on 216 or later

1074
00:43:05,280 --> 00:43:08,480
so yeah it's just a combination of

1075
00:43:08,480 --> 00:43:10,960
looking for files and directories and

1076
00:43:10,960 --> 00:43:12,400
then within those files and directories

1077
00:43:12,400 --> 00:43:14,640
looking for byte patterns um

1078
00:43:14,640 --> 00:43:17,440
that were present and what's nice about

1079
00:43:17,440 --> 00:43:19,839
these file names and these byte patterns

1080
00:43:19,839 --> 00:43:22,400
is um they are stable like there's

1081
00:43:22,400 --> 00:43:23,760
nothing you can do

1082
00:43:23,760 --> 00:43:27,200
uh to perturb them uh through compiler

1083
00:43:27,200 --> 00:43:29,839
variation or through your environment no

1084
00:43:29,839 --> 00:43:31,520
like these are core

1085
00:43:31,520 --> 00:43:33,440
aspects of log4j that no matter how you

1086
00:43:33,440 --> 00:43:36,079
build it build it on windows or package

1087
00:43:36,079 --> 00:43:38,960
it up in some weird way or only download

1088
00:43:38,960 --> 00:43:41,040
you know

1089
00:43:41,040 --> 00:43:43,520
half of vlog4j to just the bare minimum

1090
00:43:43,520 --> 00:43:45,839
to get you doing what you want you know

1091
00:43:45,839 --> 00:43:46,960
these are the things that are going to

1092
00:43:46,960 --> 00:43:48,800
be in there now you know when i'm saying

1093
00:43:48,800 --> 00:43:51,119
like this only download 50 of that

1094
00:43:51,119 --> 00:43:53,599
that's just me being crazy that would

1095
00:43:53,599 --> 00:43:55,839
i don't think it would do that

1096
00:43:55,839 --> 00:43:56,640
yeah

1097
00:43:56,640 --> 00:43:57,359
so

1098
00:43:57,359 --> 00:43:58,880
that's how i did it in the end it's just

1099
00:43:58,880 --> 00:44:01,200
looking in in the um looking them

1100
00:44:01,200 --> 00:44:02,800
through the source code and looking for

1101
00:44:02,800 --> 00:44:04,319
the things that were stable that i could

1102
00:44:04,319 --> 00:44:07,520
almost use as as flag posts as markers

1103
00:44:07,520 --> 00:44:08,800
to to

1104
00:44:08,800 --> 00:44:11,440
really um

1105
00:44:11,440 --> 00:44:12,720
be certain

1106
00:44:12,720 --> 00:44:16,079
that these versions of log3 were present

1107
00:44:16,079 --> 00:44:17,839
and then you know on top of that you

1108
00:44:17,839 --> 00:44:21,720
have the whole um

1109
00:44:23,520 --> 00:44:25,839
you know the whole like uh jar anti jar

1110
00:44:25,839 --> 00:44:27,920
inside jar etc

1111
00:44:27,920 --> 00:44:31,520
my scanner does not do tars right

1112
00:44:31,520 --> 00:44:33,200
my the reason i don't do tars is just

1113
00:44:33,200 --> 00:44:35,280
i've never in my experience as a job

1114
00:44:35,280 --> 00:44:38,720
well there's two reasons one is um

1115
00:44:38,720 --> 00:44:41,839
tars i i don't there's no

1116
00:44:41,839 --> 00:44:45,359
tooling that i'm aware of uh that can

1117
00:44:45,359 --> 00:44:47,280
stream them like can that can

1118
00:44:47,280 --> 00:44:49,280
recursively handle tars inside tires in

1119
00:44:49,280 --> 00:44:51,359
a streaming fashion you'd have to you

1120
00:44:51,359 --> 00:44:53,040
have to dump them out to temp files and

1121
00:44:53,040 --> 00:44:54,160
i just didn't want to deal with temp

1122
00:44:54,160 --> 00:44:56,000
files in this library you know it

1123
00:44:56,000 --> 00:44:57,680
already was doing enough

1124
00:44:57,680 --> 00:44:59,839
um yeah

1125
00:44:59,839 --> 00:45:01,680
outputting to temp files preserving the

1126
00:45:01,680 --> 00:45:03,200
structure and then cleaning up after

1127
00:45:03,200 --> 00:45:05,040
you're done i was just that was too much

1128
00:45:05,040 --> 00:45:05,920
for me

1129
00:45:05,920 --> 00:45:09,040
for this quick little uh utility whereas

1130
00:45:09,040 --> 00:45:10,800
with jar files you can actually in zip

1131
00:45:10,800 --> 00:45:12,880
files uh because of the way they're

1132
00:45:12,880 --> 00:45:15,280
structured there is good utilities

1133
00:45:15,280 --> 00:45:17,520
including in the jvm for

1134
00:45:17,520 --> 00:45:19,599
for just

1135
00:45:19,599 --> 00:45:22,079
pure in-memory operation of them right

1136
00:45:22,079 --> 00:45:23,440
and so i never had to deal with temp

1137
00:45:23,440 --> 00:45:24,480
files

1138
00:45:24,480 --> 00:45:26,720
but on top of that and probably the same

1139
00:45:26,720 --> 00:45:27,680
reason

1140
00:45:27,680 --> 00:45:30,079
is i just never run into a situation

1141
00:45:30,079 --> 00:45:33,680
where a tar file containing java code

1142
00:45:33,680 --> 00:45:36,000
um was

1143
00:45:36,000 --> 00:45:38,560
being executed on a system right because

1144
00:45:38,560 --> 00:45:41,119
uh because java just the execution oh

1145
00:45:41,119 --> 00:45:42,800
it's always war files or zip files or

1146
00:45:42,800 --> 00:45:44,960
jar files so probably if you have a tar

1147
00:45:44,960 --> 00:45:47,920
especially tar.gzip it's uh

1148
00:45:47,920 --> 00:45:50,240
it's you you it's not great that it's on

1149
00:45:50,240 --> 00:45:52,160
your file system but probably it's it's

1150
00:45:52,160 --> 00:45:53,920
very unlikely that it's being executed

1151
00:45:53,920 --> 00:45:56,480
in any way

1152
00:45:56,640 --> 00:46:00,240
yeah so um yeah so that is my talk on on

1153
00:46:00,240 --> 00:46:03,040
log4j and and how you would find it i

1154
00:46:03,040 --> 00:46:05,839
think the main takeaway really

1155
00:46:05,839 --> 00:46:11,040
um is like if you if you got scanners

1156
00:46:12,319 --> 00:46:13,920
um like if you've got a vulnerability

1157
00:46:13,920 --> 00:46:16,400
scanner like uh dependency check or

1158
00:46:16,400 --> 00:46:20,240
black duck or merge base um i really

1159
00:46:20,240 --> 00:46:23,680
encourage people to put together

1160
00:46:23,680 --> 00:46:25,760
uh synthetic samples

1161
00:46:25,760 --> 00:46:26,800
um

1162
00:46:26,800 --> 00:46:28,720
ahead of time where you know it's

1163
00:46:28,720 --> 00:46:31,280
vulnerable and you know that you've seen

1164
00:46:31,280 --> 00:46:33,599
code deployed in this way and just to

1165
00:46:33,599 --> 00:46:35,839
make sure that the scanner finds it like

1166
00:46:35,839 --> 00:46:37,280
i've been doing that a lot lately i've

1167
00:46:37,280 --> 00:46:39,760
been uh putting together docker images

1168
00:46:39,760 --> 00:46:41,520
where i would take like a log for jhr

1169
00:46:41,520 --> 00:46:43,359
file and just copy it into the docker

1170
00:46:43,359 --> 00:46:45,280
image just be like here just be here in

1171
00:46:45,280 --> 00:46:46,880
a random directory in this docker image

1172
00:46:46,880 --> 00:46:49,520
here log4j.jar and then i would say okay

1173
00:46:49,520 --> 00:46:50,400
snick

1174
00:46:50,400 --> 00:46:52,880
tell me what you think or or

1175
00:46:52,880 --> 00:46:54,400
quay

1176
00:46:54,400 --> 00:46:55,839
dot io well tell me what you think a red

1177
00:46:55,839 --> 00:46:57,200
hat tell me what you and none of them

1178
00:46:57,200 --> 00:46:59,359
find it right they always are like

1179
00:46:59,359 --> 00:47:00,960
they're always saying like yes we find

1180
00:47:00,960 --> 00:47:02,240
all the vulnerabilities but it's like if

1181
00:47:02,240 --> 00:47:04,720
you just huck vulnerable war files

1182
00:47:04,720 --> 00:47:06,880
vulnerable jar files vulnerable dlls

1183
00:47:06,880 --> 00:47:08,560
directly into these docker containers

1184
00:47:08,560 --> 00:47:10,800
they don't seem to find it so i i

1185
00:47:10,800 --> 00:47:13,440
i really encourage yeah everyone when

1186
00:47:13,440 --> 00:47:15,680
you're evaluating scanners or if you

1187
00:47:15,680 --> 00:47:17,680
currently have scanners vulnerability

1188
00:47:17,680 --> 00:47:19,520
scanners and you're not evaluating them

1189
00:47:19,520 --> 00:47:20,559
maybe

1190
00:47:20,559 --> 00:47:22,559
reevaluate them right like literally

1191
00:47:22,559 --> 00:47:24,559
once a year once every six months just

1192
00:47:24,559 --> 00:47:25,920
be like you know what let's throw some

1193
00:47:25,920 --> 00:47:27,920
weird files at it and see what it thinks

1194
00:47:27,920 --> 00:47:30,480
or let's throw our own files at it

1195
00:47:30,480 --> 00:47:32,559
the way we package software the way we

1196
00:47:32,559 --> 00:47:33,920
deploy software

1197
00:47:33,920 --> 00:47:34,880
let's

1198
00:47:34,880 --> 00:47:37,119
do a do a little package of your own

1199
00:47:37,119 --> 00:47:40,319
software precede it

1200
00:47:40,319 --> 00:47:42,160
with um

1201
00:47:42,160 --> 00:47:43,680
with vulnerabilities but do it all the

1202
00:47:43,680 --> 00:47:45,119
way that you package it and then see

1203
00:47:45,119 --> 00:47:48,000
what the scanners think

1204
00:47:48,079 --> 00:47:50,400
um

1205
00:47:50,880 --> 00:47:54,160
okay we have tim saying

1206
00:47:54,160 --> 00:47:56,400
a specific file specific configuration

1207
00:47:56,400 --> 00:47:57,760
parameter

1208
00:47:57,760 --> 00:48:00,160
um recursive unzip fine grebish would

1209
00:48:00,160 --> 00:48:01,760
identify its present

1210
00:48:01,760 --> 00:48:03,680
oh yeah yeah okay one thing that's neat

1211
00:48:03,680 --> 00:48:06,800
about java now this is um this is a

1212
00:48:06,800 --> 00:48:08,640
quirk of java

1213
00:48:08,640 --> 00:48:10,800
in that um

1214
00:48:10,800 --> 00:48:15,119
when java's tooling creates a jar file

1215
00:48:15,119 --> 00:48:17,760
java's tooling will be like oh you're

1216
00:48:17,760 --> 00:48:19,680
putting a jar file inside a jar file

1217
00:48:19,680 --> 00:48:21,760
well i'm going to skip

1218
00:48:21,760 --> 00:48:23,839
compression in that case because you're

1219
00:48:23,839 --> 00:48:25,520
doing a jar fill inside a jar file i'm

1220
00:48:25,520 --> 00:48:27,520
not going to compress the jar this inner

1221
00:48:27,520 --> 00:48:28,640
jar file

1222
00:48:28,640 --> 00:48:30,640
um

1223
00:48:30,640 --> 00:48:32,960
right and so because of that that meant

1224
00:48:32,960 --> 00:48:34,720
the table of contents

1225
00:48:34,720 --> 00:48:36,640
on the inner jar file

1226
00:48:36,640 --> 00:48:39,599
is not perturbed

1227
00:48:39,599 --> 00:48:41,760
word of the day perturbed

1228
00:48:41,760 --> 00:48:44,240
and so that meant you could do

1229
00:48:44,240 --> 00:48:46,240
a recursive grep so if you did a

1230
00:48:46,240 --> 00:48:49,280
recursive grep for

1231
00:48:49,280 --> 00:48:51,359
um

1232
00:48:51,359 --> 00:48:53,200
let's see for like if you did a

1233
00:48:53,200 --> 00:48:55,359
recursive graph for j and the i look up

1234
00:48:55,359 --> 00:48:58,720
right uh dot class just this this became

1235
00:48:58,720 --> 00:49:00,559
a very powerful grep because you could

1236
00:49:00,559 --> 00:49:02,800
just do a recursive grep for that but it

1237
00:49:02,800 --> 00:49:05,359
does it is assuming that that means the

1238
00:49:05,359 --> 00:49:08,079
jar file was created using maven or

1239
00:49:08,079 --> 00:49:10,480
using uh the jar command not the zip

1240
00:49:10,480 --> 00:49:12,400
command because the zip command doesn't

1241
00:49:12,400 --> 00:49:13,920
feel the same way the zip command is

1242
00:49:13,920 --> 00:49:15,760
like oh jar file inside of jar file

1243
00:49:15,760 --> 00:49:16,480
let's

1244
00:49:16,480 --> 00:49:18,079
compress that whole darn thing let's try

1245
00:49:18,079 --> 00:49:20,480
our best zips like even though they know

1246
00:49:20,480 --> 00:49:23,280
they even though we know recompressing a

1247
00:49:23,280 --> 00:49:25,200
zip a second time is useless the zip

1248
00:49:25,200 --> 00:49:26,480
command doesn't know that but the char

1249
00:49:26,480 --> 00:49:28,079
command does

1250
00:49:28,079 --> 00:49:30,240
uh and then zanita how long did it take

1251
00:49:30,240 --> 00:49:31,599
me to build the scanner the log produce

1252
00:49:31,599 --> 00:49:32,880
scanner

1253
00:49:32,880 --> 00:49:35,119
um it took

1254
00:49:35,119 --> 00:49:37,520
about 10 hours to get the uh initial

1255
00:49:37,520 --> 00:49:39,359
version of the door

1256
00:49:39,359 --> 00:49:41,040
um because of course i

1257
00:49:41,040 --> 00:49:42,800
um i just

1258
00:49:42,800 --> 00:49:46,240
based on you know my deep um passion for

1259
00:49:46,240 --> 00:49:50,000
jar files and java and also some um

1260
00:49:50,000 --> 00:49:52,559
research ideas that i've been um

1261
00:49:52,559 --> 00:49:54,640
being chatting with with my supervisor

1262
00:49:54,640 --> 00:49:56,640
my old master supervisor we've stayed in

1263
00:49:56,640 --> 00:49:58,800
contact and he tells me his ideas now

1264
00:49:58,800 --> 00:50:00,000
and again like probably a few times a

1265
00:50:00,000 --> 00:50:01,520
year we get together and he had

1266
00:50:01,520 --> 00:50:04,000
mentioned that identifiers uh class

1267
00:50:04,000 --> 00:50:06,800
names and even inner variables tend to

1268
00:50:06,800 --> 00:50:08,720
be globally unique like there's this

1269
00:50:08,720 --> 00:50:10,960
this crazy um thing that happens in the

1270
00:50:10,960 --> 00:50:12,880
software world where you know

1271
00:50:12,880 --> 00:50:13,760
this

1272
00:50:13,760 --> 00:50:15,680
um

1273
00:50:15,680 --> 00:50:17,520
i mean of course in the java world we're

1274
00:50:17,520 --> 00:50:18,640
making them

1275
00:50:18,640 --> 00:50:20,480
um globally

1276
00:50:20,480 --> 00:50:22,000
unique on purpose but like for example

1277
00:50:22,000 --> 00:50:24,240
nosql pender

1278
00:50:24,240 --> 00:50:27,200
probably is globally unique that's

1279
00:50:27,200 --> 00:50:30,160
probably a globally unique name

1280
00:50:30,160 --> 00:50:32,240
uh in that no other library in the world

1281
00:50:32,240 --> 00:50:33,440
no other software system in the world

1282
00:50:33,440 --> 00:50:35,119
will have that name i mean of course

1283
00:50:35,119 --> 00:50:37,520
once you add log4j

1284
00:50:37,520 --> 00:50:39,520
slash core or slash appender that's

1285
00:50:39,520 --> 00:50:41,200
globally unique on purpose but it turns

1286
00:50:41,200 --> 00:50:42,559
out even this

1287
00:50:42,559 --> 00:50:45,440
probably is globally unique so i was and

1288
00:50:45,440 --> 00:50:46,559
so he

1289
00:50:46,559 --> 00:50:48,559
my supervisor for my masters that's i

1290
00:50:48,559 --> 00:50:50,640
mean that's what he specializes in and

1291
00:50:50,640 --> 00:50:51,599
so

1292
00:50:51,599 --> 00:50:52,880
he's done some research on that and so

1293
00:50:52,880 --> 00:50:54,800
he kind of gave me that idea that you

1294
00:50:54,800 --> 00:50:56,240
know you don't need that much of the

1295
00:50:56,240 --> 00:50:58,079
name just a little bit like core slash

1296
00:50:58,079 --> 00:50:59,680
layout boom that's going to be globally

1297
00:50:59,680 --> 00:51:01,839
unique so that's the fact that that

1298
00:51:01,839 --> 00:51:05,359
pattern has was on the file is gonna

1299
00:51:05,359 --> 00:51:07,520
is gonna be all that you need

1300
00:51:07,520 --> 00:51:09,520
it's a weird um

1301
00:51:09,520 --> 00:51:11,599
unintuitive result in the software

1302
00:51:11,599 --> 00:51:13,680
engineering world yeah so 10 hours to

1303
00:51:13,680 --> 00:51:15,520
get the first version out and then

1304
00:51:15,520 --> 00:51:17,520
then dropped another 30 hours into it

1305
00:51:17,520 --> 00:51:18,800
over the rest of december because i got

1306
00:51:18,800 --> 00:51:20,720
the first version out

1307
00:51:20,720 --> 00:51:22,960
on the sunday right after log4j dropped

1308
00:51:22,960 --> 00:51:26,160
log4j dropped late on a thursday night

1309
00:51:26,160 --> 00:51:29,599
and i had the detector out by sunday and

1310
00:51:29,599 --> 00:51:32,480
then as github issues and bug tickets

1311
00:51:32,480 --> 00:51:34,000
came in and i further improved it

1312
00:51:34,000 --> 00:51:35,680
probably put in another 30. so 40 hours

1313
00:51:35,680 --> 00:51:38,000
in total

1314
00:51:41,040 --> 00:51:41,839
yeah

1315
00:51:41,839 --> 00:51:46,079
zanito my pleasure yeah and um

1316
00:51:46,079 --> 00:51:49,040
i guess i will stop sharing screen and

1317
00:51:49,040 --> 00:51:50,880
yeah thanks everyone

1318
00:51:50,880 --> 00:51:52,319
thanks for coming

1319
00:51:52,319 --> 00:51:53,680
and uh

1320
00:51:53,680 --> 00:51:55,599
yeah be careful with all your files out

1321
00:51:55,599 --> 00:51:56,319
there

1322
00:51:56,319 --> 00:51:57,280
um

1323
00:51:57,280 --> 00:51:59,119
there could be bad things in them

1324
00:51:59,119 --> 00:52:01,040
and uh be careful with your scanners

1325
00:52:01,040 --> 00:52:02,400
because

1326
00:52:02,400 --> 00:52:04,160
you gotta you gotta exercise them it's

1327
00:52:04,160 --> 00:52:06,240
like flossing once a year

1328
00:52:06,240 --> 00:52:07,520
make your scanners find the

1329
00:52:07,520 --> 00:52:09,040
vulnerabilities that you proceed with

1330
00:52:09,040 --> 00:52:10,880
them precede

1331
00:52:10,880 --> 00:52:12,800
vulnerabilities into your files to make

1332
00:52:12,800 --> 00:52:14,640
sure your scanners are still finding the

1333
00:52:14,640 --> 00:52:18,680
vulnerabilities like they should

1334
00:52:19,200 --> 00:52:23,399
bye bye everyone sayonara

1335
00:52:38,880 --> 00:52:40,960
you

