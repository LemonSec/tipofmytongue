1
00:00:01,439 --> 00:00:03,439
hello everyone

2
00:00:03,439 --> 00:00:05,200
i hope you folks can all hear me i'm

3
00:00:05,200 --> 00:00:07,520
sundar krishnamurti i basically manage

4
00:00:07,520 --> 00:00:09,679
application and cloud security with

5
00:00:09,679 --> 00:00:12,400
expedia group in seattle washington

6
00:00:12,400 --> 00:00:14,000
to tell you the truth i'm sleepless in

7
00:00:14,000 --> 00:00:16,320
seattle thanks to all the crazy things

8
00:00:16,320 --> 00:00:19,039
that developers

9
00:00:19,039 --> 00:00:20,560
technical uh

10
00:00:20,560 --> 00:00:22,800
people managers all those that do do

11
00:00:22,800 --> 00:00:23,519
with

12
00:00:23,519 --> 00:00:26,560
implementing systems software security

13
00:00:26,560 --> 00:00:28,720
and for me the talk that i have today is

14
00:00:28,720 --> 00:00:30,640
all about envelope encryption the

15
00:00:30,640 --> 00:00:32,960
proverbial silver bullet you can see all

16
00:00:32,960 --> 00:00:34,880
data is always encrypted right it's

17
00:00:34,880 --> 00:00:36,079
obviously true whenever you have a

18
00:00:36,079 --> 00:00:37,840
breach and the

19
00:00:37,840 --> 00:00:39,840
auditors or the law enforcement has was

20
00:00:39,840 --> 00:00:42,160
this data encrypted you say yes it was

21
00:00:42,160 --> 00:00:44,399
rot 26 encrypted and you give them a

22
00:00:44,399 --> 00:00:46,000
smile they won't understand what you're

23
00:00:46,000 --> 00:00:48,160
talking about but i hope this talk would

24
00:00:48,160 --> 00:00:49,920
be more entertaining i would i'll give

25
00:00:49,920 --> 00:00:52,079
you some bad jokes not some not so bad

26
00:00:52,079 --> 00:00:54,559
jokes and please glare at me give me

27
00:00:54,559 --> 00:00:56,559
comments if you think my jokes stink

28
00:00:56,559 --> 00:00:58,000
most of them they do so i'll make

29
00:00:58,000 --> 00:00:59,760
certain i give you good ones so let's

30
00:00:59,760 --> 00:01:01,600
get started envelop encryption the

31
00:01:01,600 --> 00:01:04,319
proverbial silver bullet so let's see

32
00:01:04,319 --> 00:01:05,760
what are we going to talk about we're

33
00:01:05,760 --> 00:01:07,680
going to talk about the fact that most

34
00:01:07,680 --> 00:01:09,760
companies around the world today go to

35
00:01:09,760 --> 00:01:12,720
extreme lengths to make certain they

36
00:01:12,720 --> 00:01:16,320
guard pci data pci is basically payment

37
00:01:16,320 --> 00:01:18,560
card industry so what the payment card

38
00:01:18,560 --> 00:01:20,240
industry essentially do is they make

39
00:01:20,240 --> 00:01:22,400
certain credit card numbers are

40
00:01:22,400 --> 00:01:24,479
tokenized they are encrypted you use

41
00:01:24,479 --> 00:01:26,880
double triple encryption you've got a

42
00:01:26,880 --> 00:01:29,040
systems that are not accessible from any

43
00:01:29,040 --> 00:01:30,960
networks you don't go to insane lengths

44
00:01:30,960 --> 00:01:34,079
to protect cardholder data or chd but

45
00:01:34,079 --> 00:01:36,799
what about pii which is personally

46
00:01:36,799 --> 00:01:39,759
identifiable information do you what do

47
00:01:39,759 --> 00:01:42,000
you do to protect that data some some

48
00:01:42,000 --> 00:01:43,840
companies say we protect that other

49
00:01:43,840 --> 00:01:46,560
company say we encrypt that but the gdpr

50
00:01:46,560 --> 00:01:49,360
clause is very clear they say encrypt

51
00:01:49,360 --> 00:01:50,880
everything so my talk is going to be

52
00:01:50,880 --> 00:01:53,520
mainly about encryption so personal data

53
00:01:53,520 --> 00:01:56,240
pii is covered by many clauses like you

54
00:01:56,240 --> 00:01:59,360
have gdpr and ccpa like the joke is that

55
00:01:59,360 --> 00:02:02,079
gdpr is a four letter swear word it

56
00:02:02,079 --> 00:02:04,880
indeed is so that is the global data

57
00:02:04,880 --> 00:02:07,680
protection regulation from

58
00:02:07,680 --> 00:02:09,919
uk and europe and ccpa is basically

59
00:02:09,919 --> 00:02:12,319
california's privacy law both of them

60
00:02:12,319 --> 00:02:16,160
say pii must be secured it must be not

61
00:02:16,160 --> 00:02:19,200
accessible anywhere and if you get

62
00:02:19,200 --> 00:02:22,080
breached via for gdp or ccpa you are

63
00:02:22,080 --> 00:02:24,480
going to face hefty penalties so the

64
00:02:24,480 --> 00:02:26,080
problem's hard and we're trying to solve

65
00:02:26,080 --> 00:02:28,959
it the easiest way that we can do it

66
00:02:28,959 --> 00:02:29,680
so

67
00:02:29,680 --> 00:02:31,680
dev product teams were never taught the

68
00:02:31,680 --> 00:02:33,599
right methods to protect this data

69
00:02:33,599 --> 00:02:35,440
correctly and the best method to protect

70
00:02:35,440 --> 00:02:38,160
according to me is encryption encrypt

71
00:02:38,160 --> 00:02:40,000
everything encryption will get you to a

72
00:02:40,000 --> 00:02:42,640
very good place but how to do it will

73
00:02:42,640 --> 00:02:44,879
be the focus of this talk usually what

74
00:02:44,879 --> 00:02:46,959
teams do is insiders are given a lot of

75
00:02:46,959 --> 00:02:49,200
power and privilege with the implicit

76
00:02:49,200 --> 00:02:50,800
assumption that they will work in the

77
00:02:50,800 --> 00:02:53,360
best interests of their product brand

78
00:02:53,360 --> 00:02:56,080
platform or whatever is their startup

79
00:02:56,080 --> 00:02:57,599
idea they're going to work in their best

80
00:02:57,599 --> 00:02:59,840
interest but you give too much

81
00:02:59,840 --> 00:03:02,400
power to these insiders to these people

82
00:03:02,400 --> 00:03:04,560
like i was working at a startup many

83
00:03:04,560 --> 00:03:06,159
years ago and the thing was like there

84
00:03:06,159 --> 00:03:08,959
were 40 of us on the team and fall 40

85
00:03:08,959 --> 00:03:11,440
knew the usernames and passwords to

86
00:03:11,440 --> 00:03:13,680
production all 40 of us

87
00:03:13,680 --> 00:03:15,120
that wasn't a very nice place at the

88
00:03:15,120 --> 00:03:17,360
time i wasn't in security i was like a

89
00:03:17,360 --> 00:03:19,200
startup software engineer but now i

90
00:03:19,200 --> 00:03:21,120
think outside the box and i'm like that

91
00:03:21,120 --> 00:03:23,599
was crazy we should not be doing that so

92
00:03:23,599 --> 00:03:25,760
the last point is logical and physical

93
00:03:25,760 --> 00:03:28,080
access controls differ for most teams

94
00:03:28,080 --> 00:03:30,159
they probably never engage security

95
00:03:30,159 --> 00:03:32,319
teams in their design are built out so

96
00:03:32,319 --> 00:03:34,720
security always gets called in the end

97
00:03:34,720 --> 00:03:36,959
like we folks security

98
00:03:36,959 --> 00:03:39,440
architects engineers managers

99
00:03:39,440 --> 00:03:41,120
professionals we get called in like hey

100
00:03:41,120 --> 00:03:42,879
we want to launch in two weeks can you

101
00:03:42,879 --> 00:03:45,360
please dot all the i's check all the

102
00:03:45,360 --> 00:03:47,360
eyes are dotted t's across push check

103
00:03:47,360 --> 00:03:49,680
boxes and just tell us we can launch and

104
00:03:49,680 --> 00:03:51,360
we say no you can't

105
00:03:51,360 --> 00:03:53,200
you called us so late we're going to do

106
00:03:53,200 --> 00:03:55,040
a performance threat model we're going

107
00:03:55,040 --> 00:03:57,040
to see what are all the gaps that exist

108
00:03:57,040 --> 00:03:59,040
in your system what are the ways via

109
00:03:59,040 --> 00:04:02,080
which your insiders outsiders anyone can

110
00:04:02,080 --> 00:04:03,519
compromise your system we're going to go

111
00:04:03,519 --> 00:04:05,120
deep into it so we've got to come and

112
00:04:05,120 --> 00:04:07,840
make certain we grab our arms around

113
00:04:07,840 --> 00:04:08,799
this

114
00:04:08,799 --> 00:04:09,920
so

115
00:04:09,920 --> 00:04:12,560
the thing is we need to

116
00:04:12,560 --> 00:04:14,159
move to a better place and we say

117
00:04:14,159 --> 00:04:16,478
encrypt everything that is stored at

118
00:04:16,478 --> 00:04:18,959
rest unless public so that should be the

119
00:04:18,959 --> 00:04:22,400
uh tenet a mantra of holy grail for us

120
00:04:22,400 --> 00:04:24,400
so the first bullet point very simply is

121
00:04:24,400 --> 00:04:26,560
there is no law anywhere we know yet

122
00:04:26,560 --> 00:04:28,800
which states you cannot encrypt certain

123
00:04:28,800 --> 00:04:30,800
kinds of data and must be stored plain

124
00:04:30,800 --> 00:04:33,360
text why did i write china in a small

125
00:04:33,360 --> 00:04:35,199
the question mark there china is

126
00:04:35,199 --> 00:04:36,960
basically a country where any data

127
00:04:36,960 --> 00:04:39,919
that's encrypted inside china you must

128
00:04:39,919 --> 00:04:42,240
escrow the encryption keys with the

129
00:04:42,240 --> 00:04:44,800
chinese administration the concept is

130
00:04:44,800 --> 00:04:46,080
that the chinese need to have the

131
00:04:46,080 --> 00:04:48,880
ability to decrypt any and every data

132
00:04:48,880 --> 00:04:50,479
inside their network inside their

133
00:04:50,479 --> 00:04:52,560
country inside their systems and do it

134
00:04:52,560 --> 00:04:54,800
plain text if they can do it you are not

135
00:04:54,800 --> 00:04:56,720
allowed to do encryption in china that's

136
00:04:56,720 --> 00:04:59,120
the only caveat but other than that if

137
00:04:59,120 --> 00:05:01,520
you encrypt data everywhere you're good

138
00:05:01,520 --> 00:05:03,840
like i knew of this weird use case there

139
00:05:03,840 --> 00:05:05,919
was this team what did that team do they

140
00:05:05,919 --> 00:05:08,000
were storing orders for countries around

141
00:05:08,000 --> 00:05:09,520
the world and apparently there is some

142
00:05:09,520 --> 00:05:12,240
law in malaysia indonesia and some asean

143
00:05:12,240 --> 00:05:14,320
countries that says pii must be

144
00:05:14,320 --> 00:05:16,800
encrypted at rest so what did this dev

145
00:05:16,800 --> 00:05:18,560
team do they were looking at the order

146
00:05:18,560 --> 00:05:20,639
countries and then checking if the order

147
00:05:20,639 --> 00:05:22,880
is malaysia indonesia or singapore we

148
00:05:22,880 --> 00:05:24,560
will encrypt it if it is any other

149
00:05:24,560 --> 00:05:26,639
country like india or pakistan we are

150
00:05:26,639 --> 00:05:27,919
going to leave it plain text because

151
00:05:27,919 --> 00:05:29,840
these countries have no law and i'm like

152
00:05:29,840 --> 00:05:32,000
this is stupid this is ridiculous was my

153
00:05:32,000 --> 00:05:33,840
my feedback to the team i just asked the

154
00:05:33,840 --> 00:05:35,440
team what will happen tomorrow if india

155
00:05:35,440 --> 00:05:36,960
come out and say our data must be

156
00:05:36,960 --> 00:05:38,960
encrypted address too the team was like

157
00:05:38,960 --> 00:05:40,080
yeah we are going to write a program it

158
00:05:40,080 --> 00:05:41,919
will go to the database find every

159
00:05:41,919 --> 00:05:44,080
record which is plain text from india

160
00:05:44,080 --> 00:05:46,240
and we will encrypt it i'm like this all

161
00:05:46,240 --> 00:05:48,479
this is a waste of time so my point was

162
00:05:48,479 --> 00:05:50,960
just encrypt everything at rest you need

163
00:05:50,960 --> 00:05:53,440
not check if it's india be encrypt if

164
00:05:53,440 --> 00:05:55,120
it's singapore we encrypt if it's not

165
00:05:55,120 --> 00:05:56,960
then we don't don't do that it's

166
00:05:56,960 --> 00:05:58,000
overkill

167
00:05:58,000 --> 00:06:00,720
just encrypt everything at rest so that

168
00:06:00,720 --> 00:06:02,639
would be the best way out and most

169
00:06:02,639 --> 00:06:04,319
importantly one buzzword you keep

170
00:06:04,319 --> 00:06:07,600
hearing across all security podcasts and

171
00:06:07,600 --> 00:06:09,680
conferences everything is zero trust the

172
00:06:09,680 --> 00:06:11,840
zero trust infrastructure so when you

173
00:06:11,840 --> 00:06:13,759
come to the zero test model it's all

174
00:06:13,759 --> 00:06:15,680
around encryption but my talk is going

175
00:06:15,680 --> 00:06:17,520
to be more around key management and

176
00:06:17,520 --> 00:06:19,759
that is going to be what is the crux of

177
00:06:19,759 --> 00:06:21,520
the problem here if you manage your keys

178
00:06:21,520 --> 00:06:23,600
nicely encryption is there but if you

179
00:06:23,600 --> 00:06:25,680
don't manage your keys you have a big

180
00:06:25,680 --> 00:06:27,520
problem

181
00:06:27,520 --> 00:06:29,680
so the problem is that we have vague and

182
00:06:29,680 --> 00:06:31,919
snowflake encryption patterns

183
00:06:31,919 --> 00:06:33,360
that's what a lot of times what is

184
00:06:33,360 --> 00:06:35,120
happening is you would say it is very

185
00:06:35,120 --> 00:06:37,759
secure because teams are using aes 128

186
00:06:37,759 --> 00:06:41,280
or aes256 so teams are using rsa 2048 it

187
00:06:41,280 --> 00:06:43,360
is secure then it has the team where is

188
00:06:43,360 --> 00:06:45,440
the key and they say the key is actually

189
00:06:45,440 --> 00:06:47,520
a file that is checked into github and

190
00:06:47,520 --> 00:06:49,840
i'm like all bets are off

191
00:06:49,840 --> 00:06:51,599
github is no place for you to store a

192
00:06:51,599 --> 00:06:53,759
key use your key should ideally be

193
00:06:53,759 --> 00:06:56,000
inside a key storage mechanism

194
00:06:56,000 --> 00:06:58,160
right so what do a lot of teams do is

195
00:06:58,160 --> 00:06:59,440
they say we are going to perform

196
00:06:59,440 --> 00:07:01,199
encryption we are going to use

197
00:07:01,199 --> 00:07:03,120
good algorithms but we are going to take

198
00:07:03,120 --> 00:07:04,319
the key and we are going to put it in

199
00:07:04,319 --> 00:07:07,360
secrets manager aws secrets manager or

200
00:07:07,360 --> 00:07:08,560
the teams are going to place it in

201
00:07:08,560 --> 00:07:10,720
hashicorp vault which is another good

202
00:07:10,720 --> 00:07:12,880
place to store secrets but then

203
00:07:12,880 --> 00:07:15,759
hashicorp vault and aws secrets manager

204
00:07:15,759 --> 00:07:18,720
are great place to store credentials

205
00:07:18,720 --> 00:07:21,759
passwords api keys database connection

206
00:07:21,759 --> 00:07:24,479
strings but not encryption keys

207
00:07:24,479 --> 00:07:26,319
that's a completely

208
00:07:26,319 --> 00:07:28,639
wrong way to do it it's like putting a

209
00:07:28,639 --> 00:07:30,400
square peg in a round hole it won't go

210
00:07:30,400 --> 00:07:32,400
in so what the basic problem is that

211
00:07:32,400 --> 00:07:34,240
there is no key rotation mechanism in

212
00:07:34,240 --> 00:07:36,400
place there are no logs for encryption

213
00:07:36,400 --> 00:07:38,560
decryption tasks so you don't know that

214
00:07:38,560 --> 00:07:40,639
key has been used to encrypt how much

215
00:07:40,639 --> 00:07:42,840
data or

216
00:07:42,840 --> 00:07:45,680
what were the mechanisms that you had if

217
00:07:45,680 --> 00:07:47,599
the key has ever left that secret

218
00:07:47,599 --> 00:07:49,759
storage we don't know so teams have been

219
00:07:49,759 --> 00:07:51,520
doing this wrongly in the past they need

220
00:07:51,520 --> 00:07:53,759
to change

221
00:07:53,759 --> 00:07:54,639
so

222
00:07:54,639 --> 00:07:56,319
a lot of times what teams did was they

223
00:07:56,319 --> 00:07:58,080
encrypted by hand in the sense what i'm

224
00:07:58,080 --> 00:07:59,039
trying to say is they're not going to

225
00:07:59,039 --> 00:08:00,319
come up with their own encryption

226
00:08:00,319 --> 00:08:02,080
algorithms essentially

227
00:08:02,080 --> 00:08:03,360
that's what that's not what i mean

228
00:08:03,360 --> 00:08:05,120
encrypting by hand so what i'm trying to

229
00:08:05,120 --> 00:08:06,639
say is teams are using encryption

230
00:08:06,639 --> 00:08:09,840
libraries like bouncy castle for java or

231
00:08:09,840 --> 00:08:12,560
the microsoft dp api and so many other

232
00:08:12,560 --> 00:08:14,639
mechanisms that exist but the problem is

233
00:08:14,639 --> 00:08:17,360
that nobody managed these keys so what

234
00:08:17,360 --> 00:08:19,199
would happen is keys would be checked

235
00:08:19,199 --> 00:08:22,000
into a secrets manager or

236
00:08:22,000 --> 00:08:23,840
hashicorp vault and then what would

237
00:08:23,840 --> 00:08:25,919
happen when one of those people leave

238
00:08:25,919 --> 00:08:26,879
the team

239
00:08:26,879 --> 00:08:29,039
so if one of the admins who quits the

240
00:08:29,039 --> 00:08:30,800
team do you have any governance

241
00:08:30,800 --> 00:08:32,719
mechanisms to know that person went to

242
00:08:32,719 --> 00:08:35,120
secrets manager logged in as an admin

243
00:08:35,120 --> 00:08:37,120
copied over the encryption key that's

244
00:08:37,120 --> 00:08:39,360
used for all your data and he quit the

245
00:08:39,360 --> 00:08:41,599
company do you have any governance there

246
00:08:41,599 --> 00:08:43,679
you don't know right it's a hard problem

247
00:08:43,679 --> 00:08:45,519
so that's why we tell that never

248
00:08:45,519 --> 00:08:47,600
maintain keys by hand ideally there

249
00:08:47,600 --> 00:08:50,000
should be no humans who should ever have

250
00:08:50,000 --> 00:08:52,160
access to keys if you can

251
00:08:52,160 --> 00:08:54,560
take yourself on the holy grail path

252
00:08:54,560 --> 00:08:56,560
there you're in a much better place so

253
00:08:56,560 --> 00:08:58,399
some developers checking github keys

254
00:08:58,399 --> 00:09:00,399
into github and then they say they're

255
00:09:00,399 --> 00:09:02,080
saving costs because instead of going to

256
00:09:02,080 --> 00:09:03,920
secrets manager and getting billed for

257
00:09:03,920 --> 00:09:06,560
every call they're making one call to

258
00:09:06,560 --> 00:09:08,320
github and getting this keys answer is

259
00:09:08,320 --> 00:09:10,560
no it's completely wrong so simple

260
00:09:10,560 --> 00:09:12,720
tenets we need to adopt all encryption

261
00:09:12,720 --> 00:09:14,560
keys must live inside a secure

262
00:09:14,560 --> 00:09:16,880
purpose-built device which is called a

263
00:09:16,880 --> 00:09:20,000
hardware security module or hsm

264
00:09:20,000 --> 00:09:22,320
it can generate runtime encryption keys

265
00:09:22,320 --> 00:09:24,399
for you to use so you have a device it's

266
00:09:24,399 --> 00:09:26,959
like a card or it's like a proper vault

267
00:09:26,959 --> 00:09:28,880
it's a it's a server that's going to be

268
00:09:28,880 --> 00:09:30,560
installed on your network what would

269
00:09:30,560 --> 00:09:32,800
that server do that server's ability is

270
00:09:32,800 --> 00:09:35,440
to generate encryption keys for you so

271
00:09:35,440 --> 00:09:37,360
you can take those keys and encrypt data

272
00:09:37,360 --> 00:09:40,399
with it right so the two ways to which

273
00:09:40,399 --> 00:09:42,560
it would work is you can either import

274
00:09:42,560 --> 00:09:44,240
encryption keys one time from the

275
00:09:44,240 --> 00:09:46,160
outside you can push in a lot of

276
00:09:46,160 --> 00:09:48,320
encryption keys or if you don't want to

277
00:09:48,320 --> 00:09:50,800
go that route you would rely on it to

278
00:09:50,800 --> 00:09:53,360
generate encryption keys within itself

279
00:09:53,360 --> 00:09:54,399
and keep

280
00:09:54,399 --> 00:09:56,640
handing that out to you for you to use

281
00:09:56,640 --> 00:09:58,800
so as since we're going to look at aws

282
00:09:58,800 --> 00:10:01,040
here with my example i hope my the demo

283
00:10:01,040 --> 00:10:03,120
gods are good upon me i have

284
00:10:03,120 --> 00:10:04,560
10 minutes that have kept in the end for

285
00:10:04,560 --> 00:10:06,399
going through that we'll go through that

286
00:10:06,399 --> 00:10:08,480
so the two examples in aws are you have

287
00:10:08,480 --> 00:10:10,959
one service called aws kms which is key

288
00:10:10,959 --> 00:10:13,440
management service it's super chip cheap

289
00:10:13,440 --> 00:10:15,360
it's shared across many customers aws

290
00:10:15,360 --> 00:10:17,200
would have thousands of customers

291
00:10:17,200 --> 00:10:19,040
sharing keys on one device which is good

292
00:10:19,040 --> 00:10:21,440
for them and the second one is cloud hsm

293
00:10:21,440 --> 00:10:23,760
which is way more expensive than kms

294
00:10:23,760 --> 00:10:26,640
because it's a dedicated fips 140-2

295
00:10:26,640 --> 00:10:28,800
level 3 compliant device it means one

296
00:10:28,800 --> 00:10:31,040
device can only contain keys of one

297
00:10:31,040 --> 00:10:33,360
company no other company organization

298
00:10:33,360 --> 00:10:36,399
should ever have keys inside of hsn that

299
00:10:36,399 --> 00:10:38,079
is dedicated

300
00:10:38,079 --> 00:10:39,920
so here is where envelope encryption 10

301
00:10:39,920 --> 00:10:41,680
minutes into my call i come to it so

302
00:10:41,680 --> 00:10:43,920
what does arnold encryption do there are

303
00:10:43,920 --> 00:10:45,440
two separate things in envelope

304
00:10:45,440 --> 00:10:47,920
encryption one is called a master key

305
00:10:47,920 --> 00:10:50,000
the other is called a data key in the

306
00:10:50,000 --> 00:10:52,000
past this was called master but i think

307
00:10:52,000 --> 00:10:54,240
we changed we never use the word master

308
00:10:54,240 --> 00:10:56,000
database slave database all those words

309
00:10:56,000 --> 00:10:58,000
are gone so instead of saying master key

310
00:10:58,000 --> 00:11:00,800
we say it's a managed key so the managed

311
00:11:00,800 --> 00:11:03,440
key lives in kms what can they do it can

312
00:11:03,440 --> 00:11:05,680
generate data keys for you and you

313
00:11:05,680 --> 00:11:08,079
encrypt data with your data key so there

314
00:11:08,079 --> 00:11:11,360
are two keys here a master key or a

315
00:11:11,360 --> 00:11:13,920
managed key and a data key the two

316
00:11:13,920 --> 00:11:15,680
different keys this is very different

317
00:11:15,680 --> 00:11:17,839
from asymmetric encryption where you

318
00:11:17,839 --> 00:11:19,839
have a public key and a private key pair

319
00:11:19,839 --> 00:11:23,360
as what you have in rsa 2048 elgamal

320
00:11:23,360 --> 00:11:25,920
elliptic curve cryptography or perhaps

321
00:11:25,920 --> 00:11:28,160
x59 certificates that's a completely

322
00:11:28,160 --> 00:11:30,079
different asymmetric here both these

323
00:11:30,079 --> 00:11:32,399
keys are symmetric they're unrelated to

324
00:11:32,399 --> 00:11:34,720
each other so our two keys exist with

325
00:11:34,720 --> 00:11:38,160
three acronyms they're called cmkbek

326
00:11:38,160 --> 00:11:40,880
and edek there are two keys with three

327
00:11:40,880 --> 00:11:42,800
acronyms let's see what of them what

328
00:11:42,800 --> 00:11:45,120
they mean cmk stands for customer

329
00:11:45,120 --> 00:11:48,959
managed key it's hsm resident aes 256

330
00:11:48,959 --> 00:11:52,320
symmetric key that can only encrypt 4k

331
00:11:52,320 --> 00:11:54,880
bytes of data that's it it cannot

332
00:11:54,880 --> 00:11:57,920
encrypt anything more than 4k

333
00:11:57,920 --> 00:12:00,079
so if you have a 10 tb database you'd be

334
00:12:00,079 --> 00:12:02,320
wondering how do i use a cmk for it the

335
00:12:02,320 --> 00:12:04,480
answer is you don't use a cmk you use a

336
00:12:04,480 --> 00:12:08,480
dek a dek is also called a kek in the

337
00:12:08,480 --> 00:12:10,320
microsoft azure world or in the google

338
00:12:10,320 --> 00:12:12,880
world they call it kk aws calls it the

339
00:12:12,880 --> 00:12:16,079
ek which stands for data encryption key

340
00:12:16,079 --> 00:12:18,480
a random piece of encryption material

341
00:12:18,480 --> 00:12:21,760
aes 256 32 bytes that you employ but it

342
00:12:21,760 --> 00:12:24,160
must never be saved or logged anywhere

343
00:12:24,160 --> 00:12:26,160
so what we tell developers is whenever

344
00:12:26,160 --> 00:12:28,160
you're going to get this key take the

345
00:12:28,160 --> 00:12:29,920
key inside the function

346
00:12:29,920 --> 00:12:31,120
it's a

347
00:12:31,120 --> 00:12:33,760
auto variable or a stack variable use it

348
00:12:33,760 --> 00:12:35,760
to encrypt your data and then toss the

349
00:12:35,760 --> 00:12:38,800
key away don't move the key to a

350
00:12:38,800 --> 00:12:41,200
object reference or store it anywhere on

351
00:12:41,200 --> 00:12:43,519
the heap because if you have a core dump

352
00:12:43,519 --> 00:12:46,240
the keys are exposed to the world

353
00:12:46,240 --> 00:12:49,839
the third one is called edek edek is the

354
00:12:49,839 --> 00:12:53,120
encrypted data encryption key so it is

355
00:12:53,120 --> 00:12:56,160
the dek encrypted with cmk this must be

356
00:12:56,160 --> 00:12:58,399
saved along with the encrypted data or

357
00:12:58,399 --> 00:13:00,880
cipher text all this might be sounding

358
00:13:00,880 --> 00:13:02,320
greek and latin to you i'll show you in

359
00:13:02,320 --> 00:13:04,800
my demo how simple it is this is how the

360
00:13:04,800 --> 00:13:08,240
whole thing works create a

361
00:13:08,240 --> 00:13:10,160
create a primary encryption key or

362
00:13:10,160 --> 00:13:12,320
employ an imported primary encryption

363
00:13:12,320 --> 00:13:16,079
key within the hsm k1 k1 lives inside

364
00:13:16,079 --> 00:13:19,920
the xsm k1 can never ever leave the hsn

365
00:13:19,920 --> 00:13:22,399
there exists no api no mechanism

366
00:13:22,399 --> 00:13:24,320
probably the mossad know about it no one

367
00:13:24,320 --> 00:13:27,200
else does you cannot get k1 outside of

368
00:13:27,200 --> 00:13:28,720
the hsn

369
00:13:28,720 --> 00:13:30,480
it lives inside the hsm and it will

370
00:13:30,480 --> 00:13:32,959
always live there period now what do you

371
00:13:32,959 --> 00:13:35,760
want the hsm to do you want the hsn or

372
00:13:35,760 --> 00:13:38,160
the shared hsm which is kms which is

373
00:13:38,160 --> 00:13:40,399
shared across all customers to say get

374
00:13:40,399 --> 00:13:43,040
me a key so you have a generate data key

375
00:13:43,040 --> 00:13:45,760
api which gives you two keys or it gives

376
00:13:45,760 --> 00:13:48,480
you two entries one is k2 with what you

377
00:13:48,480 --> 00:13:50,800
will encrypt your data and the other one

378
00:13:50,800 --> 00:13:54,880
is k21 which is k2 encrypted with k1

379
00:13:54,880 --> 00:13:58,000
so you take k2 encrypt your data with k2

380
00:13:58,000 --> 00:14:00,639
toss it away and save your cipher text

381
00:14:00,639 --> 00:14:02,560
along with k21

382
00:14:02,560 --> 00:14:05,360
k2 1 is k2 encrypted with k1 now

383
00:14:05,360 --> 00:14:07,360
whenever you want to decrypt the data

384
00:14:07,360 --> 00:14:11,600
you give k21 back to aws kms or the hsm

385
00:14:11,600 --> 00:14:14,240
and say please give me k2 back it will

386
00:14:14,240 --> 00:14:16,240
verify whether your iam user has

387
00:14:16,240 --> 00:14:19,440
permissions for kms colon decrypt for

388
00:14:19,440 --> 00:14:23,279
that cmk customer managed key inside hsm

389
00:14:23,279 --> 00:14:25,440
do you have the right authority if it

390
00:14:25,440 --> 00:14:27,920
says you do then it would decrypt it and

391
00:14:27,920 --> 00:14:30,399
give you k2 back what do you do with k2

392
00:14:30,399 --> 00:14:33,199
take k2 decrypt your data with it and

393
00:14:33,199 --> 00:14:35,760
you have it plain text this very simply

394
00:14:35,760 --> 00:14:37,839
is envelope encryption

395
00:14:37,839 --> 00:14:39,839
so how does this improve our security

396
00:14:39,839 --> 00:14:42,480
it's very simple there is no risk of cm

397
00:14:42,480 --> 00:14:45,440
cmk data leakage as nothing else should

398
00:14:45,440 --> 00:14:48,000
ever get saved outside the dek should be

399
00:14:48,000 --> 00:14:50,000
tossed right away after encryption or

400
00:14:50,000 --> 00:14:52,800
decryption never logged to memory never

401
00:14:52,800 --> 00:14:54,959
written to disk never logged anywhere if

402
00:14:54,959 --> 00:14:57,440
you log the dek anywhere that developer

403
00:14:57,440 --> 00:14:59,199
is going to get a python on his face

404
00:14:59,199 --> 00:15:01,040
from me let me know if you know of

405
00:15:01,040 --> 00:15:03,199
someone who's saving the deks outside

406
00:15:03,199 --> 00:15:04,399
i'm going to call them up late in the

407
00:15:04,399 --> 00:15:05,600
night and i'll threaten them in an

408
00:15:05,600 --> 00:15:07,920
italian accent so they don't do it so

409
00:15:07,920 --> 00:15:10,079
you can enforce policies only certain

410
00:15:10,079 --> 00:15:12,959
uses users are allowed to encrypt others

411
00:15:12,959 --> 00:15:15,600
can only decrypt and all events get

412
00:15:15,600 --> 00:15:18,000
locked so if the encrypted data

413
00:15:18,000 --> 00:15:20,160
encryption case k21 gets stolen by a

414
00:15:20,160 --> 00:15:22,399
hacker you're going to save k21 right if

415
00:15:22,399 --> 00:15:24,560
k21 gets stolen by a hacker he would

416
00:15:24,560 --> 00:15:26,720
never be able to use that to decrypt

417
00:15:26,720 --> 00:15:28,720
your cipher text because he does not

418
00:15:28,720 --> 00:15:31,120
have the permission to go to kms and say

419
00:15:31,120 --> 00:15:34,079
give me k2 for this k21 he probably

420
00:15:34,079 --> 00:15:36,320
doesn't have that i am user permissions

421
00:15:36,320 --> 00:15:38,880
or policies or writes in order to do it

422
00:15:38,880 --> 00:15:40,959
so key rotation is very accomplished

423
00:15:40,959 --> 00:15:44,560
very simply by re-encrypting k21 with

424
00:15:44,560 --> 00:15:45,920
the new k1

425
00:15:45,920 --> 00:15:47,920
so the it is the difference between this

426
00:15:47,920 --> 00:15:50,399
you are boiling a spoonful of water to

427
00:15:50,399 --> 00:15:52,880
rotate the encryption key you are

428
00:15:52,880 --> 00:15:55,759
rotating the encrypted key so

429
00:15:55,759 --> 00:15:56,800
32

430
00:15:56,800 --> 00:15:58,800
basically bytes of data is going to be

431
00:15:58,800 --> 00:16:01,839
re-encrypted rather than encrypting a 30

432
00:16:01,839 --> 00:16:04,560
tb file a 30 db db backup which is

433
00:16:04,560 --> 00:16:06,320
backed up by a key if you say you've got

434
00:16:06,320 --> 00:16:08,480
to decrypt it and re-encrypt it you're

435
00:16:08,480 --> 00:16:10,880
about looking at many thousand dollars

436
00:16:10,880 --> 00:16:12,000
worth of

437
00:16:12,000 --> 00:16:14,399
ec2 processing power from aws because to

438
00:16:14,399 --> 00:16:17,199
decrypt a 30 db file to plain text and

439
00:16:17,199 --> 00:16:19,120
then encrypt it with another key it is

440
00:16:19,120 --> 00:16:21,199
boiling the mediterranean sea

441
00:16:21,199 --> 00:16:23,040
but then if you're going to re-encrypt

442
00:16:23,040 --> 00:16:25,600
k21 with a new k2

443
00:16:25,600 --> 00:16:26,880
it is beautiful

444
00:16:26,880 --> 00:16:28,160
you don't have to worry at all because

445
00:16:28,160 --> 00:16:30,560
k21 encrypted with the new k2 is boiling

446
00:16:30,560 --> 00:16:32,399
a spoonful of water rather than boiling

447
00:16:32,399 --> 00:16:34,079
the mediterranean sea

448
00:16:34,079 --> 00:16:36,480
and you get components out of this so

449
00:16:36,480 --> 00:16:38,480
set up automatic yearly key rotation

450
00:16:38,480 --> 00:16:40,959
within your hsm it will maintain a train

451
00:16:40,959 --> 00:16:43,440
of expired keys for decryption for older

452
00:16:43,440 --> 00:16:45,839
data that was encrypted and data

453
00:16:45,839 --> 00:16:48,079
custodians of compliant personnel can be

454
00:16:48,079 --> 00:16:50,959
granted a re-encrypt permission they can

455
00:16:50,959 --> 00:16:53,680
only rotate the edek they cannot encrypt

456
00:16:53,680 --> 00:16:55,360
data they cannot decrypt data they can

457
00:16:55,360 --> 00:16:58,079
only rotate the key once every year so

458
00:16:58,079 --> 00:17:00,240
you have compliance and there is no risk

459
00:17:00,240 --> 00:17:03,040
of key leakage ever unless developers do

460
00:17:03,040 --> 00:17:05,199
stupid mistakes that can be mitigated

461
00:17:05,199 --> 00:17:07,679
via secure code reviews and education

462
00:17:07,679 --> 00:17:09,520
and encryption is available as a service

463
00:17:09,520 --> 00:17:11,679
right now so aws offers this service

464
00:17:11,679 --> 00:17:14,959
called ssd kms which stands for server

465
00:17:14,959 --> 00:17:16,799
side encryption using key management

466
00:17:16,799 --> 00:17:19,199
service other cloud services have also

467
00:17:19,199 --> 00:17:20,959
embraced this design pattern and it's

468
00:17:20,959 --> 00:17:23,359
available across gcp azure and the best

469
00:17:23,359 --> 00:17:26,000
thing about ssc kms is that no core

470
00:17:26,000 --> 00:17:27,839
needs to be written you just have to

471
00:17:27,839 --> 00:17:31,200
create a cmk in kms and then go to the

472
00:17:31,200 --> 00:17:33,200
cloud formation templates or terraform

473
00:17:33,200 --> 00:17:35,840
scripts for each of your aws services

474
00:17:35,840 --> 00:17:39,520
like s3 buckets dynamodb tables sqs sns

475
00:17:39,520 --> 00:17:41,919
document db kinesis streams aurora

476
00:17:41,919 --> 00:17:44,960
postgres sql dbs even ebs which is the

477
00:17:44,960 --> 00:17:46,960
elastic block storage and just say i

478
00:17:46,960 --> 00:17:50,559
want to implement sse kms and aws does

479
00:17:50,559 --> 00:17:53,039
all the magic for you so aws is offering

480
00:17:53,039 --> 00:17:55,120
envelope encryption as a service and

481
00:17:55,120 --> 00:17:57,760
calling it ssc kms it's part of their

482
00:17:57,760 --> 00:18:00,000
waf which stands for well architected

483
00:18:00,000 --> 00:18:01,760
framework not the web application

484
00:18:01,760 --> 00:18:03,840
firewall waf is well architected

485
00:18:03,840 --> 00:18:05,760
framework it's one of the architectural

486
00:18:05,760 --> 00:18:08,480
best practices from aws it's a tenet so

487
00:18:08,480 --> 00:18:09,760
i'll just go over these points because i

488
00:18:09,760 --> 00:18:11,120
have a small demo i need to run in the

489
00:18:11,120 --> 00:18:13,600
next 12 minutes never use secret storage

490
00:18:13,600 --> 00:18:15,440
systems like hashicorp or secrets

491
00:18:15,440 --> 00:18:17,919
manager establish a pattern where only

492
00:18:17,919 --> 00:18:20,000
service accounts have the ability to

493
00:18:20,000 --> 00:18:22,320
encrypt and decrypt no human should ever

494
00:18:22,320 --> 00:18:24,160
have the ability so this is known as

495
00:18:24,160 --> 00:18:26,400
hosm which is hands off secrets

496
00:18:26,400 --> 00:18:28,400
management you make certain that humans

497
00:18:28,400 --> 00:18:31,200
have no ability to view any data outside

498
00:18:31,200 --> 00:18:33,280
of dashboards you can view data on

499
00:18:33,280 --> 00:18:34,720
dashboards obviously which is logged in

500
00:18:34,720 --> 00:18:36,160
everything but you can just go to a

501
00:18:36,160 --> 00:18:38,240
summary to a database and say select

502
00:18:38,240 --> 00:18:40,559
star from credit card table you can do

503
00:18:40,559 --> 00:18:42,880
that so audit all your

504
00:18:42,880 --> 00:18:45,039
secret stores audit github and find out

505
00:18:45,039 --> 00:18:47,440
dev teams who have done encryption wrong

506
00:18:47,440 --> 00:18:49,280
and make them learn envelope encryption

507
00:18:49,280 --> 00:18:51,760
it's very simple to do

508
00:18:51,760 --> 00:18:54,000
and pci dss auditors love envelope

509
00:18:54,000 --> 00:18:55,600
encryption it might form an important

510
00:18:55,600 --> 00:18:58,480
prerequisite in the forthcoming pse pci

511
00:18:58,480 --> 00:19:00,480
dss v 4.0 that's going to come out

512
00:19:00,480 --> 00:19:03,360
sometime soon so you can what you can do

513
00:19:03,360 --> 00:19:05,360
as a good engineer is you can take a set

514
00:19:05,360 --> 00:19:08,640
of keys push them into aws secrets sorry

515
00:19:08,640 --> 00:19:11,600
push them into aws kms and cloud hsm you

516
00:19:11,600 --> 00:19:14,720
can push them into your own hsm into gcp

517
00:19:14,720 --> 00:19:16,400
and then you have the same set of

518
00:19:16,400 --> 00:19:18,240
encryption keys everywhere so if one of

519
00:19:18,240 --> 00:19:20,240
those services were to ever go down you

520
00:19:20,240 --> 00:19:22,160
could go to another service and decrypt

521
00:19:22,160 --> 00:19:24,080
your data you are not like a cockroach

522
00:19:24,080 --> 00:19:26,160
upside down with the six legs in the air

523
00:19:26,160 --> 00:19:28,080
unable to turn itself back up you don't

524
00:19:28,080 --> 00:19:29,919
enter that scenario so here comes my

525
00:19:29,919 --> 00:19:32,320
dirty demo thankfully i have 11 minutes

526
00:19:32,320 --> 00:19:34,400
to run through this demo so very simply

527
00:19:34,400 --> 00:19:36,559
let me know if you folks can see my

528
00:19:36,559 --> 00:19:39,840
terminal here

529
00:19:39,919 --> 00:19:42,559
so i do a clear

530
00:19:42,559 --> 00:19:45,840
i do an ls minus l

531
00:19:45,840 --> 00:19:47,600
i see there is nothing oh there is lots

532
00:19:47,600 --> 00:19:49,919
i just tested it so let me do an rm star

533
00:19:49,919 --> 00:19:53,120
i just tested this out yes

534
00:19:53,120 --> 00:19:55,520
yes

535
00:20:05,280 --> 00:20:09,120
one minute let me go back here

536
00:20:10,320 --> 00:20:14,320
demo gods be benevolent upon me

537
00:20:16,640 --> 00:20:18,660
yes

538
00:20:18,660 --> 00:20:21,799
[Music]

539
00:20:22,320 --> 00:20:24,400
i think i just kicked myself in the foot

540
00:20:24,400 --> 00:20:26,480
just give me a minute guys

541
00:20:26,480 --> 00:20:30,039
just give me a minute

542
00:20:44,960 --> 00:20:47,960
uh

543
00:21:07,360 --> 00:21:09,919
i can do it here as well

544
00:21:09,919 --> 00:21:12,240
clear

545
00:21:12,799 --> 00:21:16,520
aws config

546
00:21:25,600 --> 00:21:29,799
can you folks see my screen here

547
00:21:31,840 --> 00:21:35,120
can you folks see my screen here

548
00:21:35,200 --> 00:21:37,039
i think i just shot myself in the foot i

549
00:21:37,039 --> 00:21:39,200
deleted the key if i mistake that i have

550
00:21:39,200 --> 00:21:41,840
here so basically i'll just go over this

551
00:21:41,840 --> 00:21:44,640
what i was planning to do let me just go

552
00:21:44,640 --> 00:21:46,400
back here you folks can see my screen

553
00:21:46,400 --> 00:21:48,559
again

554
00:21:48,559 --> 00:21:50,879
here

555
00:21:51,760 --> 00:21:53,679
aws

556
00:21:53,679 --> 00:21:55,919
yes the command is working so what i

557
00:21:55,919 --> 00:21:58,720
basically do is i do vi

558
00:21:58,720 --> 00:22:02,000
secret dot txt

559
00:22:02,000 --> 00:22:04,480
i say

560
00:22:05,120 --> 00:22:08,640
secret sauce 101

561
00:22:08,640 --> 00:22:11,760
colon wq so i've saved this file

562
00:22:11,760 --> 00:22:13,280
what i'm going to do right now is i'm

563
00:22:13,280 --> 00:22:16,240
going to create a key

564
00:22:16,240 --> 00:22:19,200
in kms so i say aws kms create key

565
00:22:19,200 --> 00:22:22,159
region usbs2 description sample key for

566
00:22:22,159 --> 00:22:24,400
b-sides yvr

567
00:22:24,400 --> 00:22:26,640
it created a key for me so the two very

568
00:22:26,640 --> 00:22:28,080
important things this is how you create

569
00:22:28,080 --> 00:22:30,799
a key so first thing you do is you grab

570
00:22:30,799 --> 00:22:32,880
the key id this is the most important

571
00:22:32,880 --> 00:22:33,760
thing

572
00:22:33,760 --> 00:22:36,158
copy

573
00:22:36,240 --> 00:22:38,400
and then you come back here and then you

574
00:22:38,400 --> 00:22:42,400
create an alias for the key you see

575
00:22:44,480 --> 00:22:46,799
sample key yvr i'm going to give the

576
00:22:46,799 --> 00:22:48,320
name

577
00:22:48,320 --> 00:22:50,720
copy

578
00:22:50,799 --> 00:22:53,799
paste

579
00:22:55,200 --> 00:22:56,960
sample key why we are an alias is

580
00:22:56,960 --> 00:22:59,200
created for this key the next step that

581
00:22:59,200 --> 00:23:01,760
i'm going to do is i'm going to generate

582
00:23:01,760 --> 00:23:04,640
an encryption data key using the kms key

583
00:23:04,640 --> 00:23:06,240
i created before

584
00:23:06,240 --> 00:23:09,760
so i say aws kms generate data key key

585
00:23:09,760 --> 00:23:13,120
id sample key yvr key spec is 256

586
00:23:13,120 --> 00:23:15,679
encryption context this is a encryption

587
00:23:15,679 --> 00:23:17,520
context is a string you must always

588
00:23:17,520 --> 00:23:19,840
provide this is how you make certain the

589
00:23:19,840 --> 00:23:22,159
hacker who even steals your key will not

590
00:23:22,159 --> 00:23:24,159
be able to abuse it because the

591
00:23:24,159 --> 00:23:25,679
encryption context would not be on i'm

592
00:23:25,679 --> 00:23:29,280
saying projects b sides by er

593
00:23:29,760 --> 00:23:31,360
here is my key there are two separate

594
00:23:31,360 --> 00:23:33,520
parts in the json blob first is the

595
00:23:33,520 --> 00:23:37,760
cipher text block this is k21 it is k2

596
00:23:37,760 --> 00:23:40,240
encrypted with k1 i have to copy paste

597
00:23:40,240 --> 00:23:42,240
this because i need this

598
00:23:42,240 --> 00:23:45,440
so i'm going to just paste it here

599
00:23:45,440 --> 00:23:46,880
and the other and the most important

600
00:23:46,880 --> 00:23:48,720
thing is plain text this is your

601
00:23:48,720 --> 00:23:51,279
encryption key 32 bytes this is the key

602
00:23:51,279 --> 00:23:52,640
with which the data is going to be

603
00:23:52,640 --> 00:23:53,840
encrypted

604
00:23:53,840 --> 00:23:55,600
copy

605
00:23:55,600 --> 00:23:57,279
paste it here what i'm doing here is

606
00:23:57,279 --> 00:23:58,720
just for the demo otherwise you should

607
00:23:58,720 --> 00:24:01,279
never be pasting the key anywhere human

608
00:24:01,279 --> 00:24:03,039
shouldn't be able to do this so what i

609
00:24:03,039 --> 00:24:05,360
basically do is i take this particular

610
00:24:05,360 --> 00:24:06,240
text

611
00:24:06,240 --> 00:24:08,480
copy it and i give it to the echo

612
00:24:08,480 --> 00:24:11,679
command to base64 decode it into a file

613
00:24:11,679 --> 00:24:14,640
encrypted key plain text

614
00:24:14,640 --> 00:24:16,840
copy this

615
00:24:16,840 --> 00:24:18,799
paste

616
00:24:18,799 --> 00:24:22,720
files there now take the plain text key

617
00:24:22,720 --> 00:24:25,120
copy it

618
00:24:25,120 --> 00:24:27,600
plain text data encryption key base64

619
00:24:27,600 --> 00:24:29,039
encoded

620
00:24:29,039 --> 00:24:31,200
copy this

621
00:24:31,200 --> 00:24:32,640
paste

622
00:24:32,640 --> 00:24:34,640
paste it now i have these files now here

623
00:24:34,640 --> 00:24:36,080
is the most important thing that i need

624
00:24:36,080 --> 00:24:36,960
to do

625
00:24:36,960 --> 00:24:40,240
i use the open ssl installed program to

626
00:24:40,240 --> 00:24:43,360
just simply say open ssl encrypt minus e

627
00:24:43,360 --> 00:24:46,400
is encrypt using aes256

628
00:24:46,400 --> 00:24:48,799
the input file is secret.txt

629
00:24:48,799 --> 00:24:51,520
which is my secret sauce 101 file out is

630
00:24:51,520 --> 00:24:54,159
an encrypted secret dot txt

631
00:24:54,159 --> 00:24:56,400
and the key file is file b colon triple

632
00:24:56,400 --> 00:24:58,400
slash i have to change this path because

633
00:24:58,400 --> 00:25:00,720
i was in the aws instance that i

634
00:25:00,720 --> 00:25:02,559
actually shot myself in the foot i have

635
00:25:02,559 --> 00:25:04,640
to change this to say

636
00:25:04,640 --> 00:25:07,360
users

637
00:25:11,919 --> 00:25:13,600
source

638
00:25:13,600 --> 00:25:15,600
repose

639
00:25:15,600 --> 00:25:18,400
i just make certain this works

640
00:25:18,400 --> 00:25:19,760
okay it works

641
00:25:19,760 --> 00:25:22,879
so now if i do a cat

642
00:25:23,200 --> 00:25:24,600
encrypted

643
00:25:24,600 --> 00:25:27,120
secret.txt you will see this is the

644
00:25:27,120 --> 00:25:28,400
encrypted file

645
00:25:28,400 --> 00:25:31,200
so this is my secret source 101 which

646
00:25:31,200 --> 00:25:33,760
has been encrypted with my file the file

647
00:25:33,760 --> 00:25:36,240
that i use for encryption is basically

648
00:25:36,240 --> 00:25:37,960
the in the

649
00:25:37,960 --> 00:25:40,400
secret.txt is the input file and data

650
00:25:40,400 --> 00:25:42,080
key plain text is what was used to

651
00:25:42,080 --> 00:25:44,159
encrypt it the next thing most important

652
00:25:44,159 --> 00:25:48,240
thing i need to do delete the secret

653
00:25:49,360 --> 00:25:53,120
delete the data key plain text

654
00:25:53,919 --> 00:25:56,400
and then do an ls minus l

655
00:25:56,400 --> 00:25:58,400
so what files do you have you have a

656
00:25:58,400 --> 00:26:01,120
file called encryptedsecret.txt

657
00:26:01,120 --> 00:26:02,080
you have a file called

658
00:26:02,080 --> 00:26:04,640
encryptedkeyplaintext.txt

659
00:26:04,640 --> 00:26:08,799
right so encrypted keyplane text is dk1

660
00:26:08,799 --> 00:26:11,600
k21 and encrypted secret is the my

661
00:26:11,600 --> 00:26:14,000
cipher text now how do you decrypt it i

662
00:26:14,000 --> 00:26:15,679
still have four minutes i can run my

663
00:26:15,679 --> 00:26:19,600
decryption part very simply

664
00:26:20,159 --> 00:26:21,440
paste

665
00:26:21,440 --> 00:26:24,640
aws kms decrypt the encryption context

666
00:26:24,640 --> 00:26:26,640
first project is b sides yvr this is the

667
00:26:26,640 --> 00:26:28,080
secret string i told you about

668
00:26:28,080 --> 00:26:30,159
encryption context should be your secret

669
00:26:30,159 --> 00:26:33,200
string the ciphertext blob is this

670
00:26:33,200 --> 00:26:34,799
file and i've again got to change the

671
00:26:34,799 --> 00:26:36,720
path because i shot myself in the foot

672
00:26:36,720 --> 00:26:38,480
with the ec2 instance i'm going to using

673
00:26:38,480 --> 00:26:39,840
my local one

674
00:26:39,840 --> 00:26:43,200
so i say users

675
00:26:43,200 --> 00:26:44,640
[Music]

676
00:26:44,640 --> 00:26:47,120
source

677
00:26:47,120 --> 00:26:49,678
repos

678
00:26:51,039 --> 00:26:53,039
decrypted so what did it decrypt it

679
00:26:53,039 --> 00:26:56,080
decrypted my k21 and gave me the plain

680
00:26:56,080 --> 00:26:59,120
text k2 so this is the key with which we

681
00:26:59,120 --> 00:27:01,919
encrypted so i copy this

682
00:27:01,919 --> 00:27:04,080
and i say paste it here

683
00:27:04,080 --> 00:27:06,240
and i see

684
00:27:06,240 --> 00:27:08,320
paste that particular

685
00:27:08,320 --> 00:27:10,159
k2 here

686
00:27:10,159 --> 00:27:12,960
into this file

687
00:27:14,000 --> 00:27:16,320
paste

688
00:27:17,120 --> 00:27:19,919
and this is our open ssl command to

689
00:27:19,919 --> 00:27:21,600
decrypt the file

690
00:27:21,600 --> 00:27:23,279
copy

691
00:27:23,279 --> 00:27:25,679
o since o did not come out

692
00:27:25,679 --> 00:27:30,039
and i again have to change the path

693
00:27:44,240 --> 00:27:46,799
you get one dot pxt now if i do cat

694
00:27:46,799 --> 00:27:50,080
secret one dot pxt secret sauce 101

695
00:27:50,080 --> 00:27:51,760
and that is my demo i still have two

696
00:27:51,760 --> 00:27:53,440
minutes for questions if you folks can

697
00:27:53,440 --> 00:27:55,840
ask me

698
00:27:56,159 --> 00:27:59,720
any sort of questions

699
00:28:12,399 --> 00:28:16,279
do you have any questions folks

700
00:28:22,399 --> 00:28:24,880
i think almost out of time that was my

701
00:28:24,880 --> 00:28:27,440
demo guys demo boys were fine instead of

702
00:28:27,440 --> 00:28:29,360
running it on my ec2 instance i was able

703
00:28:29,360 --> 00:28:32,559
to run it on my macbook because

704
00:28:32,559 --> 00:28:34,960
i shot myself in the foot and i deleted

705
00:28:34,960 --> 00:28:37,039
the ssh key that i had i was thinking i

706
00:28:37,039 --> 00:28:38,799
was already on the ec2 instance so that

707
00:28:38,799 --> 00:28:41,279
rm command was me shooting me myself in

708
00:28:41,279 --> 00:28:43,039
the foot and this demo was running it on

709
00:28:43,039 --> 00:28:44,399
the macbook thankfully

710
00:28:44,399 --> 00:28:46,720
everything saved

711
00:28:46,720 --> 00:28:48,399
and most importantly the last thing that

712
00:28:48,399 --> 00:28:50,080
i want to show you before you guys drop

713
00:28:50,080 --> 00:28:51,679
off is

714
00:28:51,679 --> 00:28:53,360
these were all the commands these are

715
00:28:53,360 --> 00:28:55,679
all links that i have and please note

716
00:28:55,679 --> 00:28:57,120
down this one if you folks can take a

717
00:28:57,120 --> 00:28:59,760
print sprint screen or something you

718
00:28:59,760 --> 00:29:01,760
would get my entire

719
00:29:01,760 --> 00:29:04,399
slide deck at this bitly link if you can

720
00:29:04,399 --> 00:29:06,799
note this bitly link please do

721
00:29:06,799 --> 00:29:10,120
thanks everyone

722
00:29:59,360 --> 00:30:01,439
you

