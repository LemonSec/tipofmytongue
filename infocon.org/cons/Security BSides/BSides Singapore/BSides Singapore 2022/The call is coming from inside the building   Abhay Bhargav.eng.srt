1
00:00:00,120 --> 00:00:01,520
okay

2
00:00:01,520 --> 00:00:04,920
uh awesome thank you thanks so much for

3
00:00:04,920 --> 00:00:06,839
having me uh besides Singapore I look

4
00:00:06,839 --> 00:00:08,580
like I have a little more time for my

5
00:00:08,580 --> 00:00:11,580
talk uh uh and I appreciate that because

6
00:00:11,580 --> 00:00:13,860
sometimes uh I'm doing a live demo and

7
00:00:13,860 --> 00:00:15,540
sometimes that needs a little bit more

8
00:00:15,540 --> 00:00:18,359
time anyway uh

9
00:00:18,359 --> 00:00:20,460
first of all very happy to be here uh

10
00:00:20,460 --> 00:00:22,560
thanks for having me and I really wish

11
00:00:22,560 --> 00:00:25,080
we could meet in person but I guess you

12
00:00:25,080 --> 00:00:26,820
know that things are still not back to

13
00:00:26,820 --> 00:00:29,279
normal all over the place so uh that's

14
00:00:29,279 --> 00:00:31,320
life and virtual conferences are still

15
00:00:31,320 --> 00:00:33,840
the way we share a lot of our ideas and

16
00:00:33,840 --> 00:00:37,260
uh thoughts across the globe anyway so

17
00:00:37,260 --> 00:00:39,600
I'm very happy to be here and this is a

18
00:00:39,600 --> 00:00:42,660
topic that I've spent and my team have

19
00:00:42,660 --> 00:00:44,520
spent some time doing a lot of work on

20
00:00:44,520 --> 00:00:46,140
and we've done a lot of cool post

21
00:00:46,140 --> 00:00:48,600
exploitation work but this is one aspect

22
00:00:48,600 --> 00:00:50,520
of that post exploitation that I'm going

23
00:00:50,520 --> 00:00:53,280
to be talking about and uh I'm going to

24
00:00:53,280 --> 00:00:55,020
be also doing some live demos and live

25
00:00:55,020 --> 00:00:56,760
demos tend to always be a little bit of

26
00:00:56,760 --> 00:00:59,280
a mixed bag because sometimes they can

27
00:00:59,280 --> 00:01:00,780
go really well or sometimes they can go

28
00:01:00,780 --> 00:01:03,539
horribly wrong so let's see uh what

29
00:01:03,539 --> 00:01:05,640
we're gonna see today with the live demo

30
00:01:05,640 --> 00:01:09,119
anyway uh with that in mind I'm gonna

31
00:01:09,119 --> 00:01:11,700
get started with my talk and I'm gonna

32
00:01:11,700 --> 00:01:13,860
start sharing my screen just give me a

33
00:01:13,860 --> 00:01:17,340
second while I get that done I'm

34
00:01:17,340 --> 00:01:20,220
guessing everyone can see my screen or

35
00:01:20,220 --> 00:01:23,179
at least I guess

36
00:01:24,780 --> 00:01:27,960
yeah I'm guessing that that's a yes I'm

37
00:01:27,960 --> 00:01:30,540
not sure but I'm guessing that that for

38
00:01:30,540 --> 00:01:33,119
you all right so first of all this talk

39
00:01:33,119 --> 00:01:34,920
is called the call is coming from inside

40
00:01:34,920 --> 00:01:36,780
the building but kubernetes admission

41
00:01:36,780 --> 00:01:39,180
control now kubernetes I don't know how

42
00:01:39,180 --> 00:01:41,159
many of you work with kubernetes how

43
00:01:41,159 --> 00:01:43,020
many working with kubernetes show of

44
00:01:43,020 --> 00:01:45,720
hands if any uh I don't know whether we

45
00:01:45,720 --> 00:01:48,960
have a hand thing here uh but if you do

46
00:01:48,960 --> 00:01:51,000
have if you are working with kubernetes

47
00:01:51,000 --> 00:01:53,579
you can probably have a show of hands

48
00:01:53,579 --> 00:01:55,020
yeah looks like we have a few attendees

49
00:01:55,020 --> 00:01:57,720
in the audience uh who are raising their

50
00:01:57,720 --> 00:02:00,060
hands uh great if you are working with

51
00:02:00,060 --> 00:02:02,460
kubernetes this is a pretty awesome talk

52
00:02:02,460 --> 00:02:05,040
but there's a good chance that uh you

53
00:02:05,040 --> 00:02:06,899
are probably going to be working with

54
00:02:06,899 --> 00:02:08,399
kubernetes at some point in time because

55
00:02:08,399 --> 00:02:11,400
your company your business unit your

56
00:02:11,400 --> 00:02:13,980
product team uh might look at kubernetes

57
00:02:13,980 --> 00:02:15,660
as the next big thing is the most

58
00:02:15,660 --> 00:02:17,340
important thing for them and there's a

59
00:02:17,340 --> 00:02:18,599
good chance that you might be doing

60
00:02:18,599 --> 00:02:20,580
something around kubernetes pretty soon

61
00:02:20,580 --> 00:02:22,319
right so this is called the call is

62
00:02:22,319 --> 00:02:23,520
coming from inside the building this is

63
00:02:23,520 --> 00:02:25,800
on kubernetes admission abusing

64
00:02:25,800 --> 00:02:27,959
kubernetes admission control right so

65
00:02:27,959 --> 00:02:31,260
let's get started uh I I have had an

66
00:02:31,260 --> 00:02:32,520
introduction so I'm not I'm going to

67
00:02:32,520 --> 00:02:33,959
keep this pretty short uh my name is

68
00:02:33,959 --> 00:02:37,260
abhay I run uh two things basically I

69
00:02:37,260 --> 00:02:38,640
run an application security company

70
00:02:38,640 --> 00:02:41,459
where we hack all day and I also run a

71
00:02:41,459 --> 00:02:43,379
training platform that solves the scale

72
00:02:43,379 --> 00:02:45,000
Gap in application security which is

73
00:02:45,000 --> 00:02:47,819
absec engineer and Abstract engineer is

74
00:02:47,819 --> 00:02:50,099
I'm sure some of you have used abstract

75
00:02:50,099 --> 00:02:52,200
engineer it's a pretty popular training

76
00:02:52,200 --> 00:02:53,580
platform where you can learn you know

77
00:02:53,580 --> 00:02:55,920
kubernetes security Cloud Security app

78
00:02:55,920 --> 00:02:58,080
SEC so on and so forth you can uh and

79
00:02:58,080 --> 00:02:59,459
one of the things that we are famous for

80
00:02:59,459 --> 00:03:01,019
is Hands-On labs and that's one of the

81
00:03:01,019 --> 00:03:02,099
things that you get without seconds

82
00:03:02,099 --> 00:03:05,340
there aside from that what I do on a uh

83
00:03:05,340 --> 00:03:07,800
General basis is that I do a lot of

84
00:03:07,800 --> 00:03:11,340
these talks and train quite a lot uh I I

85
00:03:11,340 --> 00:03:13,620
train at black hat or trained a Defcon

86
00:03:13,620 --> 00:03:16,260
I've traded multiple oasp events and I

87
00:03:16,260 --> 00:03:18,239
also have authored in a past life when I

88
00:03:18,239 --> 00:03:20,159
was a little stupider I've also authored

89
00:03:20,159 --> 00:03:23,280
a couple of books uh so this is this is

90
00:03:23,280 --> 00:03:25,620
me in a nutshell I've been I started off

91
00:03:25,620 --> 00:03:27,959
my work mostly in the offensive security

92
00:03:27,959 --> 00:03:30,900
side but today a lot of my work is at

93
00:03:30,900 --> 00:03:32,580
the intersection of offensive and

94
00:03:32,580 --> 00:03:34,860
defensive mostly in terms of scaling out

95
00:03:34,860 --> 00:03:38,220
security for apps in terms of devsecops

96
00:03:38,220 --> 00:03:40,620
or Cloud native security so I tend to

97
00:03:40,620 --> 00:03:44,220
focus on the future uh stuff quite a bit

98
00:03:44,220 --> 00:03:46,560
so that's really my focus area for those

99
00:03:46,560 --> 00:03:47,640
of you who are interested we have a

100
00:03:47,640 --> 00:03:49,620
pretty uh interesting YouTube channel

101
00:03:49,620 --> 00:03:50,819
where we should forecast a lot of this

102
00:03:50,819 --> 00:03:52,560
content and it's free of course since

103
00:03:52,560 --> 00:03:54,720
it's on YouTube and I also have a Blog

104
00:03:54,720 --> 00:03:56,280
where I write about a lot of this stuff

105
00:03:56,280 --> 00:03:58,620
as well uh which is not kept as nearly

106
00:03:58,620 --> 00:04:00,239
well updated as I think but the YouTube

107
00:04:00,239 --> 00:04:03,239
channel is uh so this is what we do so

108
00:04:03,239 --> 00:04:04,920
my talk today is going to be basically

109
00:04:04,920 --> 00:04:08,360
uh again a lot of memes I I believe that

110
00:04:08,360 --> 00:04:10,860
a serious talk in a serious conference

111
00:04:10,860 --> 00:04:12,720
should it should be nothing but nothing

112
00:04:12,720 --> 00:04:14,939
serious about it at all I believe that

113
00:04:14,939 --> 00:04:17,279
it should be uh you know all of us

114
00:04:17,279 --> 00:04:19,079
respond to memes so my talk is going to

115
00:04:19,079 --> 00:04:20,760
have a lot of it so you'll see a near

116
00:04:20,760 --> 00:04:23,000
nauseating number of names in my blog

117
00:04:23,000 --> 00:04:25,080
and of course I'm also going to be

118
00:04:25,080 --> 00:04:26,880
praying a silent prayer to our demo gods

119
00:04:26,880 --> 00:04:28,139
and I would request all of you to do

120
00:04:28,139 --> 00:04:30,600
that as well uh because I am doing a

121
00:04:30,600 --> 00:04:32,699
live demo a lot a lot of smart speakers

122
00:04:32,699 --> 00:04:34,979
don't do live demos unfortunately I'm

123
00:04:34,979 --> 00:04:36,960
not one of them uh they don't do like

124
00:04:36,960 --> 00:04:38,340
the most they required stuff but

125
00:04:38,340 --> 00:04:39,840
unfortunately I'm going to be doing a

126
00:04:39,840 --> 00:04:41,520
live demo and I'm hoping against hope

127
00:04:41,520 --> 00:04:44,220
that it was all well so that's that's

128
00:04:44,220 --> 00:04:47,580
really uh before I get started now let's

129
00:04:47,580 --> 00:04:51,360
get into the uh topic of admission

130
00:04:51,360 --> 00:04:54,600
control now uh in kubernetes now those

131
00:04:54,600 --> 00:04:56,460
of you who have used kubernetes will

132
00:04:56,460 --> 00:04:57,900
realize that it's quite a large

133
00:04:57,900 --> 00:05:01,080
ecosystem right uh kubernetes has uh

134
00:05:01,080 --> 00:05:02,699
it's basically for container

135
00:05:02,699 --> 00:05:04,440
orchestration uh this I'm just going to

136
00:05:04,440 --> 00:05:06,540
give you the uh two second tour of

137
00:05:06,540 --> 00:05:07,620
kubernetes

138
00:05:07,620 --> 00:05:09,660
um it's basically a massive and a large

139
00:05:09,660 --> 00:05:11,880
ecosystem which basically is for

140
00:05:11,880 --> 00:05:14,160
container orchestration right so if you

141
00:05:14,160 --> 00:05:16,199
want to run your apps your containerized

142
00:05:16,199 --> 00:05:17,940
apps you want to run it at scale you

143
00:05:17,940 --> 00:05:19,380
want to make sure that they are

144
00:05:19,380 --> 00:05:22,320
accessible outside their their scalable

145
00:05:22,320 --> 00:05:24,000
they scale automatically based on

146
00:05:24,000 --> 00:05:26,100
certain rules all of that stuff you

147
00:05:26,100 --> 00:05:27,600
typically use something like a

148
00:05:27,600 --> 00:05:29,400
kubernetes kubernetes is not the only

149
00:05:29,400 --> 00:05:31,020
option to do this there are others but

150
00:05:31,020 --> 00:05:34,139
kubernetes today has emerged as the

151
00:05:34,139 --> 00:05:35,820
leading way to do container

152
00:05:35,820 --> 00:05:38,460
orchestration right now kubernetes is an

153
00:05:38,460 --> 00:05:40,680
entirely API driven ecosystem which

154
00:05:40,680 --> 00:05:43,440
means that you can you can leverage the

155
00:05:43,440 --> 00:05:45,479
existing kubernetes apis you can extend

156
00:05:45,479 --> 00:05:47,400
kubernetes with your own

157
00:05:47,400 --> 00:05:50,460
operators your own controllers your

158
00:05:50,460 --> 00:05:52,680
custom resources your custom API on top

159
00:05:52,680 --> 00:05:54,300
of it you can do a whole bunch of stuff

160
00:05:54,300 --> 00:05:55,919
with kubernetes

161
00:05:55,919 --> 00:05:58,440
right so you can you can really extend

162
00:05:58,440 --> 00:06:00,300
it and I think that's what it's made it

163
00:06:00,300 --> 00:06:02,100
so successful I think that's what has

164
00:06:02,100 --> 00:06:03,960
made kubernetes so successful because

165
00:06:03,960 --> 00:06:06,120
you can extend the boundaries of

166
00:06:06,120 --> 00:06:08,160
kubernetes quite a bit right you can add

167
00:06:08,160 --> 00:06:09,360
your own definitions you can add your

168
00:06:09,360 --> 00:06:11,400
own apis you can add a lot of custom

169
00:06:11,400 --> 00:06:14,340
resources to make it uh yours right or

170
00:06:14,340 --> 00:06:16,560
you can you can make it much more suited

171
00:06:16,560 --> 00:06:18,240
to your requirements of course because

172
00:06:18,240 --> 00:06:20,100
kubernetes has emerged as the number one

173
00:06:20,100 --> 00:06:21,800
way to do content of orchestration

174
00:06:21,800 --> 00:06:24,900
everyone on the cloud has jumped on the

175
00:06:24,900 --> 00:06:26,819
bandwagon as well you see every cloud

176
00:06:26,819 --> 00:06:29,819
provider today creating a whole bunch of

177
00:06:29,819 --> 00:06:31,500
managed kubernetes Services offerings

178
00:06:31,500 --> 00:06:34,139
not just your Google clouds and AWS and

179
00:06:34,139 --> 00:06:36,180
Azure but even the smaller players like

180
00:06:36,180 --> 00:06:39,900
digitalocean scale way uh you know ovh

181
00:06:39,900 --> 00:06:42,720
Cloud vulture all of these folks have

182
00:06:42,720 --> 00:06:44,699
their own managed kubernetes solution

183
00:06:44,699 --> 00:06:48,240
now in kubernetes uh there are this talk

184
00:06:48,240 --> 00:06:49,680
assumes a little bit of knowledge of

185
00:06:49,680 --> 00:06:51,180
kubernetes so I'm going to kind of jump

186
00:06:51,180 --> 00:06:53,580
into it a little bit here now kubernetes

187
00:06:53,580 --> 00:06:56,220
obviously like any other system like any

188
00:06:56,220 --> 00:06:58,380
other API driven system has

189
00:06:58,380 --> 00:07:00,600
authentication and authorization right

190
00:07:00,600 --> 00:07:03,180
now I explained and it also has an

191
00:07:03,180 --> 00:07:04,500
additional approach to doing

192
00:07:04,500 --> 00:07:06,960
authorization by admission control now

193
00:07:06,960 --> 00:07:09,300
let's explain what admission control is

194
00:07:09,300 --> 00:07:11,100
right now this is a very important

195
00:07:11,100 --> 00:07:12,900
concept because we this is kind of gives

196
00:07:12,900 --> 00:07:14,100
you the framework to understand

197
00:07:14,100 --> 00:07:17,160
everything else right so imagine uh so I

198
00:07:17,160 --> 00:07:19,020
use this analogy for authentic creation

199
00:07:19,020 --> 00:07:20,940
authorization and access control now

200
00:07:20,940 --> 00:07:22,860
when you are a citizen of a country of

201
00:07:22,860 --> 00:07:25,259
any country you will and you you want to

202
00:07:25,259 --> 00:07:27,720
prove your identity as a citizen of the

203
00:07:27,720 --> 00:07:29,099
country you have a passport right

204
00:07:29,099 --> 00:07:30,960
basically you get a passport so let's

205
00:07:30,960 --> 00:07:32,220
say you're a citizen of Germany you have

206
00:07:32,220 --> 00:07:34,620
a German person uh so this is

207
00:07:34,620 --> 00:07:36,180
authentication which is basically

208
00:07:36,180 --> 00:07:38,880
validation proof of identity right proof

209
00:07:38,880 --> 00:07:40,500
that you are you and that is your

210
00:07:40,500 --> 00:07:42,780
passport that is authentication right so

211
00:07:42,780 --> 00:07:44,639
kubernetes obviously has authentication

212
00:07:44,639 --> 00:07:46,560
in the forms of users and the forms of

213
00:07:46,560 --> 00:07:48,539
service accounts you can have authentic

214
00:07:48,539 --> 00:07:50,940
you have authentication uh principles in

215
00:07:50,940 --> 00:07:53,340
kubernetes you and when you want to

216
00:07:53,340 --> 00:07:55,080
travel to another country so let's say

217
00:07:55,080 --> 00:07:57,720
you want to try travel from country X to

218
00:07:57,720 --> 00:08:00,300
Country why you might need a visa to

219
00:08:00,300 --> 00:08:02,340
travel from country X to Country y now

220
00:08:02,340 --> 00:08:04,319
this Visa is basically authorization

221
00:08:04,319 --> 00:08:06,180
right now authorization essentially

222
00:08:06,180 --> 00:08:08,460
means that you have the permission to do

223
00:08:08,460 --> 00:08:10,560
something so in this case you have the

224
00:08:10,560 --> 00:08:12,419
permission to visit that country because

225
00:08:12,419 --> 00:08:14,460
you have a visa to that particular

226
00:08:14,460 --> 00:08:15,720
country so you have a passport

227
00:08:15,720 --> 00:08:17,400
authentication you have Visa

228
00:08:17,400 --> 00:08:19,979
authorization but once you arrive at

229
00:08:19,979 --> 00:08:21,419
that country let's say it's whatever

230
00:08:21,419 --> 00:08:23,099
country you arrive at there's a good

231
00:08:23,099 --> 00:08:24,240
chance that you're not just going to be

232
00:08:24,240 --> 00:08:25,500
allowed to enter that country without

233
00:08:25,500 --> 00:08:27,960
any other form of check without any

234
00:08:27,960 --> 00:08:29,879
other form of authorization right so

235
00:08:29,879 --> 00:08:31,080
let's say you're carrying some

236
00:08:31,080 --> 00:08:32,700
Contraband or let's say you're carrying

237
00:08:32,700 --> 00:08:35,039
some food naturally or some other fresh

238
00:08:35,039 --> 00:08:36,958
produce or whatever it is there's a good

239
00:08:36,958 --> 00:08:37,979
chance that they're not going to be

240
00:08:37,979 --> 00:08:39,719
allowed to carry that into that country

241
00:08:39,719 --> 00:08:43,080
so that is called admission control and

242
00:08:43,080 --> 00:08:44,520
that is pretty much done when you are

243
00:08:44,520 --> 00:08:45,720
doing Customs right when you're doing

244
00:08:45,720 --> 00:08:47,640
Customs what you have is your bags are

245
00:08:47,640 --> 00:08:50,220
inspected and only then you are you are

246
00:08:50,220 --> 00:08:51,899
allowed or not allowed into that

247
00:08:51,899 --> 00:08:54,060
particular country and that is admission

248
00:08:54,060 --> 00:08:57,060
control the kubernetes has all three

249
00:08:57,060 --> 00:08:59,160
concepts it has authentication it has

250
00:08:59,160 --> 00:09:01,740
authorization which is hey am I I'm user

251
00:09:01,740 --> 00:09:04,260
abhay okay I want to launch a deployment

252
00:09:04,260 --> 00:09:06,360
on this particular cluster am I allowed

253
00:09:06,360 --> 00:09:08,459
to do that maybe yes or no am I allowed

254
00:09:08,459 --> 00:09:09,720
to create a new service on this question

255
00:09:09,720 --> 00:09:11,820
maybe yes or no that is authorization

256
00:09:11,820 --> 00:09:15,120
but then you also have an additional

257
00:09:15,120 --> 00:09:17,040
concept of admission control which is

258
00:09:17,040 --> 00:09:18,959
basically to say that yeah abhay is

259
00:09:18,959 --> 00:09:20,459
trying to launch this particular

260
00:09:20,459 --> 00:09:24,240
container in the cluster uh and this

261
00:09:24,240 --> 00:09:26,760
particular container does not adhere to

262
00:09:26,760 --> 00:09:28,680
the policies that have been set on this

263
00:09:28,680 --> 00:09:30,899
particular kubernetes cluster so it

264
00:09:30,899 --> 00:09:32,880
denies it right it says yeah other is

265
00:09:32,880 --> 00:09:34,980
authenticated to do this but otherwise

266
00:09:34,980 --> 00:09:36,660
learning to launch a container that is

267
00:09:36,660 --> 00:09:38,580
privileged or this container does not

268
00:09:38,580 --> 00:09:40,980
have a proper label or this container is

269
00:09:40,980 --> 00:09:42,899
not launched in the right namespace so

270
00:09:42,899 --> 00:09:45,120
whatever right you have a whole bunch of

271
00:09:45,120 --> 00:09:47,040
policies that you might have set on that

272
00:09:47,040 --> 00:09:50,040
particular cluster and if you don't have

273
00:09:50,040 --> 00:09:51,720
um and if you're not adhering to the

274
00:09:51,720 --> 00:09:54,180
policies or the uh the control center on

275
00:09:54,180 --> 00:09:55,440
that particular cluster you are

276
00:09:55,440 --> 00:09:57,240
essential thrown out you're not allowed

277
00:09:57,240 --> 00:09:59,399
to perform that action so there's

278
00:09:59,399 --> 00:10:01,320
authentication there is authorization

279
00:10:01,320 --> 00:10:03,480
there is admission control these three

280
00:10:03,480 --> 00:10:04,620
concepts are very important to

281
00:10:04,620 --> 00:10:06,060
understand what I'm going to be talking

282
00:10:06,060 --> 00:10:08,760
about next so admission control is a

283
00:10:08,760 --> 00:10:10,620
very important Concept in kubernetes and

284
00:10:10,620 --> 00:10:12,300
animation control is something that

285
00:10:12,300 --> 00:10:14,580
kubernetes has a lot of different

286
00:10:14,580 --> 00:10:16,800
plugins to do admission to network a lot

287
00:10:16,800 --> 00:10:19,440
of these plugins are created by the

288
00:10:19,440 --> 00:10:21,240
kubernetes the core kubernetes group

289
00:10:21,240 --> 00:10:24,180
itself also as as everything else in

290
00:10:24,180 --> 00:10:26,279
kubernetes you can also write your own

291
00:10:26,279 --> 00:10:27,779
admission controls and that's something

292
00:10:27,779 --> 00:10:29,040
that we're going to explore in a lot

293
00:10:29,040 --> 00:10:33,000
more detail in in the uh in in the demos

294
00:10:33,000 --> 00:10:34,680
as well right so you have a whole bunch

295
00:10:34,680 --> 00:10:36,480
of admission controller plugins that you

296
00:10:36,480 --> 00:10:38,399
already have in kubernetes right so for

297
00:10:38,399 --> 00:10:39,480
instance there is one admission

298
00:10:39,480 --> 00:10:41,760
controller plugin that is always full

299
00:10:41,760 --> 00:10:43,800
images now you can set up an admission

300
00:10:43,800 --> 00:10:46,079
controlled Hey whenever a container is

301
00:10:46,079 --> 00:10:48,120
loaded or whenever a container image is

302
00:10:48,120 --> 00:10:50,220
pulled from a container registry may be

303
00:10:50,220 --> 00:10:52,620
Docker Hub or wherever it is you need to

304
00:10:52,620 --> 00:10:55,560
pull the latest image or the always full

305
00:10:55,560 --> 00:10:57,660
image don't use the ones in the cache in

306
00:10:57,660 --> 00:10:59,940
that particular node always pull that

307
00:10:59,940 --> 00:11:02,940
image from the uh from the container

308
00:11:02,940 --> 00:11:04,740
registry right so you might have you

309
00:11:04,740 --> 00:11:06,240
might set that to true or you might set

310
00:11:06,240 --> 00:11:07,800
that to always or something like that

311
00:11:07,800 --> 00:11:09,240
you also have another admission

312
00:11:09,240 --> 00:11:11,399
controller that denies the exact access

313
00:11:11,399 --> 00:11:13,380
so let's say somebody launches a

314
00:11:13,380 --> 00:11:15,000
critical application on a kubernetes

315
00:11:15,000 --> 00:11:16,140
cluster but somebody is trying to

316
00:11:16,140 --> 00:11:17,880
execute that particular container and

317
00:11:17,880 --> 00:11:19,440
try to change some configuration there

318
00:11:19,440 --> 00:11:21,240
you are not allowed to do that if you

319
00:11:21,240 --> 00:11:22,980
said deny escalating exact admission

320
00:11:22,980 --> 00:11:26,040
controller so you have a lot of these

321
00:11:26,040 --> 00:11:28,260
built-in plugins that you can enable as

322
00:11:28,260 --> 00:11:30,540
part of your uh as part of your when

323
00:11:30,540 --> 00:11:31,860
you're running your kubernetes cluster

324
00:11:31,860 --> 00:11:33,720
right so you have event rate limit you

325
00:11:33,720 --> 00:11:35,880
have limits on the kind of memory

326
00:11:35,880 --> 00:11:38,040
consumption that your part can have you

327
00:11:38,040 --> 00:11:39,720
have you used to have something called

328
00:11:39,720 --> 00:11:41,760
part security policy which I'm not going

329
00:11:41,760 --> 00:11:43,019
to get into because that's just

330
00:11:43,019 --> 00:11:45,240
completely separate Point uh what you

331
00:11:45,240 --> 00:11:47,339
could do before is to basically enforce

332
00:11:47,339 --> 00:11:49,920
a whole bunch of security parameters uh

333
00:11:49,920 --> 00:11:53,279
and then uh if you only uh meet that

334
00:11:53,279 --> 00:11:54,660
particular security parameter you are

335
00:11:54,660 --> 00:11:56,579
able to launch or contain trainer in the

336
00:11:56,579 --> 00:11:58,740
kubernetes cluster today that has been

337
00:11:58,740 --> 00:12:00,120
deprecated they're trying to come out

338
00:12:00,120 --> 00:12:01,079
with something else but there are

339
00:12:01,079 --> 00:12:03,300
different ways of achieving that uh you

340
00:12:03,300 --> 00:12:05,100
have multiple other admission

341
00:12:05,100 --> 00:12:06,720
controllers the idea of an admission

342
00:12:06,720 --> 00:12:09,060
controller is basically there are two

343
00:12:09,060 --> 00:12:11,100
types of admission controllers right so

344
00:12:11,100 --> 00:12:12,959
one type of admission controller is a

345
00:12:12,959 --> 00:12:14,640
yes no admission controller it basically

346
00:12:14,640 --> 00:12:16,980
says that hey uh am I allowed to do this

347
00:12:16,980 --> 00:12:18,420
am I allowed to launch this type of a

348
00:12:18,420 --> 00:12:20,220
container in the cluster and if the

349
00:12:20,220 --> 00:12:21,600
answer is yes you're allowed if the

350
00:12:21,600 --> 00:12:22,680
answer is no you're not allowed right

351
00:12:22,680 --> 00:12:24,480
that's pretty simple there is another

352
00:12:24,480 --> 00:12:26,640
type of admission controller also which

353
00:12:26,640 --> 00:12:28,620
is you you might see something like this

354
00:12:28,620 --> 00:12:30,839
here is that it's called it will mutate

355
00:12:30,839 --> 00:12:32,399
the nature of the original request so

356
00:12:32,399 --> 00:12:35,100
let's say I am trying to launch a

357
00:12:35,100 --> 00:12:38,279
privileged container in the kubernetes

358
00:12:38,279 --> 00:12:40,560
cluster now the privileged container

359
00:12:40,560 --> 00:12:42,060
essentially removes all the security

360
00:12:42,060 --> 00:12:44,940
boundaries for that particular container

361
00:12:44,940 --> 00:12:47,100
it allows you allows the container to

362
00:12:47,100 --> 00:12:49,139
access it like any other process on the

363
00:12:49,139 --> 00:12:50,940
host operating system it's a Bad setting

364
00:12:50,940 --> 00:12:53,279
if you set privileged call and true it's

365
00:12:53,279 --> 00:12:56,519
a pretty big problem right now you can

366
00:12:56,519 --> 00:12:58,380
also set up an admission control to

367
00:12:58,380 --> 00:13:00,360
mutate the request we'll say like yeah I

368
00:13:00,360 --> 00:13:02,399
found that this control this container

369
00:13:02,399 --> 00:13:03,779
somebody is trying to launch this

370
00:13:03,779 --> 00:13:05,639
container with privilege true I'm just

371
00:13:05,639 --> 00:13:08,160
going to remove privilege true and then

372
00:13:08,160 --> 00:13:10,079
launch the container so it changes the

373
00:13:10,079 --> 00:13:12,660
nature of the original request to make

374
00:13:12,660 --> 00:13:15,120
it fit in to the policy that you are

375
00:13:15,120 --> 00:13:17,639
your cluster has right so there are two

376
00:13:17,639 --> 00:13:19,260
types of admission controllers there is

377
00:13:19,260 --> 00:13:21,360
one true false which is validating it

378
00:13:21,360 --> 00:13:22,800
you just check whether it meets it or it

379
00:13:22,800 --> 00:13:24,000
doesn't meet it if it doesn't meet it

380
00:13:24,000 --> 00:13:26,399
throw it out the second type is mutating

381
00:13:26,399 --> 00:13:28,260
where it checks whether it is ask for

382
00:13:28,260 --> 00:13:30,779
policy and it checks whether

383
00:13:30,779 --> 00:13:32,880
um you know it is violating policy or

384
00:13:32,880 --> 00:13:35,220
whatever it is not as per what is needed

385
00:13:35,220 --> 00:13:38,579
in the policy that changes it to make it

386
00:13:38,579 --> 00:13:40,980
uh adhere to the policy right so that's

387
00:13:40,980 --> 00:13:43,620
basically mutating uh admission control

388
00:13:43,620 --> 00:13:45,240
so you have two types of admission

389
00:13:45,240 --> 00:13:47,519
control so you have a validating type

390
00:13:47,519 --> 00:13:49,500
where essentially a request so all of

391
00:13:49,500 --> 00:13:51,660
this in kubernetes happens through the

392
00:13:51,660 --> 00:13:54,240
kubernetes API server right so when I'm

393
00:13:54,240 --> 00:13:56,160
so let's say I'm trying to launch a new

394
00:13:56,160 --> 00:13:58,500
nginx container or nginx deployment in

395
00:13:58,500 --> 00:14:00,839
my kubernetes cluster I would say hey I

396
00:14:00,839 --> 00:14:02,399
want to launch this this is my yaml

397
00:14:02,399 --> 00:14:05,100
manifest it's basically this and uh it

398
00:14:05,100 --> 00:14:06,959
goes to the API server the API server

399
00:14:06,959 --> 00:14:09,240
basically passes it on to this admission

400
00:14:09,240 --> 00:14:10,740
controller object that says hey yeah

401
00:14:10,740 --> 00:14:13,560
just validate this for me and tell me

402
00:14:13,560 --> 00:14:16,320
whether this is meeting policy right so

403
00:14:16,320 --> 00:14:17,760
this is validating admission controller

404
00:14:17,760 --> 00:14:19,680
it says yeah tell me whether this is

405
00:14:19,680 --> 00:14:21,600
meeting policy or not and it hands it

406
00:14:21,600 --> 00:14:23,399
over to this a validating admission

407
00:14:23,399 --> 00:14:24,899
controller the validating admission

408
00:14:24,899 --> 00:14:27,180
controller is basically an API it's just

409
00:14:27,180 --> 00:14:29,880
like any other web service it's a web

410
00:14:29,880 --> 00:14:32,339
hook right uh so what happens is that it

411
00:14:32,339 --> 00:14:33,899
hits the validating admission controller

412
00:14:33,899 --> 00:14:36,779
it checks all of the parameters of what

413
00:14:36,779 --> 00:14:38,279
is trying to be launched in that

414
00:14:38,279 --> 00:14:39,899
particular cluster and it comes back

415
00:14:39,899 --> 00:14:42,540
with a true RF pulse right so it comes

416
00:14:42,540 --> 00:14:43,800
back yes that's fine it's meeting

417
00:14:43,800 --> 00:14:45,120
everything all the policy requirements

418
00:14:45,120 --> 00:14:47,880
submit false no nothing is met right now

419
00:14:47,880 --> 00:14:49,260
right now something has been violated

420
00:14:49,260 --> 00:14:51,959
right so basically it comes back with a

421
00:14:51,959 --> 00:14:54,120
response with either approval deny and

422
00:14:54,120 --> 00:14:55,980
then it either gets launched in the

423
00:14:55,980 --> 00:14:58,620
cluster and the state of the cluster is

424
00:14:58,620 --> 00:15:00,000
stored in that CD right which is

425
00:15:00,000 --> 00:15:02,399
kubernetes database right that's the

426
00:15:02,399 --> 00:15:04,260
database that kubernetes uses in the

427
00:15:04,260 --> 00:15:06,180
cluster right so this is how the

428
00:15:06,180 --> 00:15:08,399
validating aspect of the web hook works

429
00:15:08,399 --> 00:15:10,620
or validating admission controllers work

430
00:15:10,620 --> 00:15:12,420
you also have the mutating admission

431
00:15:12,420 --> 00:15:13,980
controller which is basically like so

432
00:15:13,980 --> 00:15:15,899
which is okay a request comes in from

433
00:15:15,899 --> 00:15:18,300
the API server it comes and hits the

434
00:15:18,300 --> 00:15:20,040
mutating admission controller the

435
00:15:20,040 --> 00:15:22,079
mutating admission controller changes

436
00:15:22,079 --> 00:15:24,420
the request right remember mutation as

437
00:15:24,420 --> 00:15:26,639
the name suggests changes the original

438
00:15:26,639 --> 00:15:29,040
request right so this changes that

439
00:15:29,040 --> 00:15:32,519
original request and then uh sends it

440
00:15:32,519 --> 00:15:36,180
back to the uh to the API server which

441
00:15:36,180 --> 00:15:39,060
is again validated against the to make

442
00:15:39,060 --> 00:15:40,440
sure that the spec is actually correct

443
00:15:40,440 --> 00:15:42,839
or not and only then it will it will

444
00:15:42,839 --> 00:15:45,300
launch that particular resource on the

445
00:15:45,300 --> 00:15:47,880
cluster right so this is how validating

446
00:15:47,880 --> 00:15:50,880
and mutating works now let's talk about

447
00:15:50,880 --> 00:15:53,399
the abuse of this

448
00:15:53,399 --> 00:15:55,800
right now when we talk about the abuse

449
00:15:55,800 --> 00:15:58,680
so basically uh when you are before we

450
00:15:58,680 --> 00:16:00,300
get into the abuse it well let's talk a

451
00:16:00,300 --> 00:16:02,100
little bit about how this works so you

452
00:16:02,100 --> 00:16:03,000
have

453
00:16:03,000 --> 00:16:05,279
scopes for this right so you are

454
00:16:05,279 --> 00:16:07,199
essentially creating a web app or a web

455
00:16:07,199 --> 00:16:09,120
hook right this is something that you

456
00:16:09,120 --> 00:16:11,220
can do you can write your own admission

457
00:16:11,220 --> 00:16:13,620
controllers right so in kubernetes

458
00:16:13,620 --> 00:16:16,079
whatever admission controller plugins

459
00:16:16,079 --> 00:16:17,880
ship with kubernetes that's fine but you

460
00:16:17,880 --> 00:16:19,500
can write your own or you can deploy

461
00:16:19,500 --> 00:16:21,899
something a lot of these policy products

462
00:16:21,899 --> 00:16:24,300
and kubernetes are all about

463
00:16:24,300 --> 00:16:26,760
um you know are essentially web hooks

464
00:16:26,760 --> 00:16:28,079
they're essentially a whole bunch of web

465
00:16:28,079 --> 00:16:30,360
hooks that operate on a certain set of

466
00:16:30,360 --> 00:16:32,399
policies that you have created so if you

467
00:16:32,399 --> 00:16:34,920
look at open policyagent.cover no I'm

468
00:16:34,920 --> 00:16:37,079
not sure if people have experienced

469
00:16:37,079 --> 00:16:39,600
those policy management tools but all of

470
00:16:39,600 --> 00:16:40,860
these policy management tools

471
00:16:40,860 --> 00:16:42,360
essentially under the hood are basically

472
00:16:42,360 --> 00:16:44,339
just web hosts what they do is they look

473
00:16:44,339 --> 00:16:45,899
at a database of rules that they have

474
00:16:45,899 --> 00:16:48,660
check whether your request validates

475
00:16:48,660 --> 00:16:50,040
against that and whether they need to

476
00:16:50,040 --> 00:16:52,079
mutate it or whatever it is

477
00:16:52,079 --> 00:16:54,959
excuse me and then they uh launch or

478
00:16:54,959 --> 00:16:56,880
don't launch based on right so you have

479
00:16:56,880 --> 00:16:58,560
Scopes based on all of these different

480
00:16:58,560 --> 00:17:00,600
things you can launch it based on the

481
00:17:00,600 --> 00:17:02,160
type of operation that you have the type

482
00:17:02,160 --> 00:17:03,899
of resources that it's impacting and the

483
00:17:03,899 --> 00:17:05,880
kind of namespace it's affecting so let

484
00:17:05,880 --> 00:17:08,220
us say you want to deploy a validating

485
00:17:08,220 --> 00:17:09,959
admission controller only on the

486
00:17:09,959 --> 00:17:11,819
production namespace so let's say you

487
00:17:11,819 --> 00:17:13,319
only want to protect the production name

488
00:17:13,319 --> 00:17:14,520
space you don't really care about what's

489
00:17:14,520 --> 00:17:16,380
getting launched elsewhere you only want

490
00:17:16,380 --> 00:17:18,480
to protect the production in space you

491
00:17:18,480 --> 00:17:20,040
can restrict the value the admission

492
00:17:20,040 --> 00:17:22,679
controller to operate only on that name

493
00:17:22,679 --> 00:17:24,599
stretch you can say that yeah every time

494
00:17:24,599 --> 00:17:27,480
somebody is trying to launch a new

495
00:17:27,480 --> 00:17:30,059
deployment on the production namespace

496
00:17:30,059 --> 00:17:33,360
only then send it over to the

497
00:17:33,360 --> 00:17:35,340
admission control right that's basically

498
00:17:35,340 --> 00:17:38,580
how uh you can operate that particular

499
00:17:38,580 --> 00:17:40,140
thing right so that in terms of

500
00:17:40,140 --> 00:17:42,240
admission controllers you also have

501
00:17:42,240 --> 00:17:43,620
certain requirements the cluster

502
00:17:43,620 --> 00:17:44,760
variation should be greater than a

503
00:17:44,760 --> 00:17:47,880
certain version which is one 1.16 uh we

504
00:17:47,880 --> 00:17:51,720
need to enable this uh on the API

505
00:17:51,720 --> 00:17:53,100
servers so the API server must be

506
00:17:53,100 --> 00:17:55,140
configured to work with this right so

507
00:17:55,140 --> 00:17:57,120
essentially say that yeah every time

508
00:17:57,120 --> 00:17:59,160
this resource is launched you need to

509
00:17:59,160 --> 00:18:01,140
talk to this admission controller Web

510
00:18:01,140 --> 00:18:03,059
book or mutating or validating web hook

511
00:18:03,059 --> 00:18:05,520
in order for this to get validated so

512
00:18:05,520 --> 00:18:07,380
the API server needs to know that it

513
00:18:07,380 --> 00:18:10,500
needs to talk to this before actually

514
00:18:10,500 --> 00:18:12,600
launching that resource on the cluster

515
00:18:12,600 --> 00:18:14,940
right that's how it typically works now

516
00:18:14,940 --> 00:18:17,580
uh it also needs TLS Now with uh

517
00:18:17,580 --> 00:18:19,260
kubernetes remember everything in

518
00:18:19,260 --> 00:18:21,780
kubernetes is certificate based so the

519
00:18:21,780 --> 00:18:24,000
API server needs to be able to talk to

520
00:18:24,000 --> 00:18:26,400
the admission controller and it needs

521
00:18:26,400 --> 00:18:28,380
the ls for that to happen so that's why

522
00:18:28,380 --> 00:18:30,000
TLS certificates are required as part of

523
00:18:30,000 --> 00:18:31,679
the configuration and of course you need

524
00:18:31,679 --> 00:18:33,120
the web hook itself you need your web

525
00:18:33,120 --> 00:18:35,580
server is that actually does this job it

526
00:18:35,580 --> 00:18:37,080
actually needs to do this job of

527
00:18:37,080 --> 00:18:39,000
actually validating it or not validating

528
00:18:39,000 --> 00:18:42,900
it so that's uh that's what is needed so

529
00:18:42,900 --> 00:18:44,760
this is what an admission controller

530
00:18:44,760 --> 00:18:47,160
looks like this is registering it as

531
00:18:47,160 --> 00:18:48,780
part of the kubernetes cluster so this

532
00:18:48,780 --> 00:18:52,200
is a uh configuration object that we're

533
00:18:52,200 --> 00:18:54,179
registering we're saying that look

534
00:18:54,179 --> 00:18:57,240
um every time a pod is created in this

535
00:18:57,240 --> 00:18:59,700
namespace that is when you need to call

536
00:18:59,700 --> 00:19:03,120
my validating or mutating uh configure

537
00:19:03,120 --> 00:19:04,980
validating or mutating admission

538
00:19:04,980 --> 00:19:06,360
controller right so it essentially says

539
00:19:06,360 --> 00:19:08,460
that whenever you are if if anyone is

540
00:19:08,460 --> 00:19:11,460
trying to launch Parts uh everyone's

541
00:19:11,460 --> 00:19:13,679
trying to create pods in this particular

542
00:19:13,679 --> 00:19:16,500
namespace only then you need to call my

543
00:19:16,500 --> 00:19:19,140
service and you also add some the TLs

544
00:19:19,140 --> 00:19:21,299
information to that right so that's

545
00:19:21,299 --> 00:19:23,820
basically what you're doing so once you

546
00:19:23,820 --> 00:19:25,500
are once you deploy an admission

547
00:19:25,500 --> 00:19:27,720
controller you have two responses like I

548
00:19:27,720 --> 00:19:29,940
said right the first response and it

549
00:19:29,940 --> 00:19:31,200
depending on the kind of admission

550
00:19:31,200 --> 00:19:32,520
controller there is let's talk about

551
00:19:32,520 --> 00:19:34,500
validating first right so in the

552
00:19:34,500 --> 00:19:36,299
validating uh one you are essentially

553
00:19:36,299 --> 00:19:38,520
sending a request and you're saying that

554
00:19:38,520 --> 00:19:40,919
okay tell me whether it is true or false

555
00:19:40,919 --> 00:19:42,299
so it comes back the validating

556
00:19:42,299 --> 00:19:43,860
admission controller should come back

557
00:19:43,860 --> 00:19:46,260
with a response called admission review

558
00:19:46,260 --> 00:19:49,500
and it should either be a true or it can

559
00:19:49,500 --> 00:19:52,080
also be a false it says yeah sorry it's

560
00:19:52,080 --> 00:19:54,120
not allowed denied response is a false

561
00:19:54,120 --> 00:19:57,120
allowed responses are true and you can

562
00:19:57,120 --> 00:19:59,400
also add additional context right so you

563
00:19:59,400 --> 00:20:01,559
can say that yeah it's not allowed it's

564
00:20:01,559 --> 00:20:04,440
allowed is false and the message is it

565
00:20:04,440 --> 00:20:06,360
doesn't contain the valid level so you

566
00:20:06,360 --> 00:20:08,220
can actually you can customize the

567
00:20:08,220 --> 00:20:10,320
responses that you can give as well so

568
00:20:10,320 --> 00:20:12,120
you can add additional context so that

569
00:20:12,120 --> 00:20:13,740
people understand oh this is why the

570
00:20:13,740 --> 00:20:15,419
deployment has failed because it doesn't

571
00:20:15,419 --> 00:20:17,460
have the valid label or it has

572
00:20:17,460 --> 00:20:19,320
privileged colon true or whatever it is

573
00:20:19,320 --> 00:20:20,820
right now

574
00:20:20,820 --> 00:20:22,919
this is validated now when we talk about

575
00:20:22,919 --> 00:20:24,660
mutating it's just a little different

576
00:20:24,660 --> 00:20:27,240
it's still an admission review uh

577
00:20:27,240 --> 00:20:30,120
resource response type and it's allowed

578
00:20:30,120 --> 00:20:32,880
true or false uh but here remember

579
00:20:32,880 --> 00:20:35,940
mutating we are changing the nature of

580
00:20:35,940 --> 00:20:37,500
the original requests we are changing

581
00:20:37,500 --> 00:20:39,179
the nature of the original Grace which

582
00:20:39,179 --> 00:20:41,160
is basically we are adding a Json pack

583
00:20:41,160 --> 00:20:42,539
and saying yeah this is the original

584
00:20:42,539 --> 00:20:45,780
request we have a patch uh which is

585
00:20:45,780 --> 00:20:48,120
going to essentially add these objects

586
00:20:48,120 --> 00:20:49,679
or remove this stuff from the original

587
00:20:49,679 --> 00:20:52,980
Json request object and this is the Json

588
00:20:52,980 --> 00:20:56,340
patch which is base64 Jetta nothing but

589
00:20:56,340 --> 00:20:59,400
Basics default Json right this is a Json

590
00:20:59,400 --> 00:21:02,760
patch so that's how it works now let's

591
00:21:02,760 --> 00:21:05,220
talk about some very interesting evil

592
00:21:05,220 --> 00:21:08,100
use cases for this right so our

593
00:21:08,100 --> 00:21:10,919
objective now is to use this against the

594
00:21:10,919 --> 00:21:13,919
cluster right so first of all let's look

595
00:21:13,919 --> 00:21:15,360
at

596
00:21:15,360 --> 00:21:19,500
how and why now for in I don't know how

597
00:21:19,500 --> 00:21:20,880
many of you have seen this and how many

598
00:21:20,880 --> 00:21:22,200
of you have experienced this you can

599
00:21:22,200 --> 00:21:24,840
raise your hands if you have is that a

600
00:21:24,840 --> 00:21:26,840
lot of times when you are deploying

601
00:21:26,840 --> 00:21:29,659
admission controllers or any other

602
00:21:29,659 --> 00:21:33,299
security related product in a kubernetes

603
00:21:33,299 --> 00:21:36,120
cluster There is almost no check that is

604
00:21:36,120 --> 00:21:39,000
done for it right you don't check what

605
00:21:39,000 --> 00:21:40,860
the r back rules are you don't check

606
00:21:40,860 --> 00:21:43,280
what is the uh you know what kind of

607
00:21:43,280 --> 00:21:45,539
permissions this has you don't check

608
00:21:45,539 --> 00:21:48,659
what you just Cube CTL apply and it

609
00:21:48,659 --> 00:21:50,580
applies to all the necessary resources

610
00:21:50,580 --> 00:21:52,799
of that particular admission controller

611
00:21:52,799 --> 00:21:54,960
in the a cluster I'm not sure how many

612
00:21:54,960 --> 00:21:57,000
of you have seen this any anyone sees

613
00:21:57,000 --> 00:21:58,380
this a lot of times you just deploy

614
00:21:58,380 --> 00:22:00,059
right especially if you're using Helm or

615
00:22:00,059 --> 00:22:01,679
anything like that you just deployed you

616
00:22:01,679 --> 00:22:03,600
don't really think about okay what is

617
00:22:03,600 --> 00:22:06,000
this actually doing it does it and most

618
00:22:06,000 --> 00:22:08,100
of us don't really think about okay what

619
00:22:08,100 --> 00:22:09,600
is the kind of permission that it has

620
00:22:09,600 --> 00:22:12,360
now what is the kind of issues that it

621
00:22:12,360 --> 00:22:14,580
might cause etc etc we just care about

622
00:22:14,580 --> 00:22:16,620
okay this seems like a pretty reasonable

623
00:22:16,620 --> 00:22:18,780
thing it has a lot of GitHub Stars so it

624
00:22:18,780 --> 00:22:20,820
seems like it's pretty legit let's just

625
00:22:20,820 --> 00:22:22,740
deploy this in our cluster and a lot of

626
00:22:22,740 --> 00:22:24,539
times you deploy admission controllers

627
00:22:24,539 --> 00:22:27,000
based on social proof right you don't

628
00:22:27,000 --> 00:22:28,980
really deploy admission controllers

629
00:22:28,980 --> 00:22:32,039
based on a lot of inspection and a lot

630
00:22:32,039 --> 00:22:33,780
of detailed analysis of that particular

631
00:22:33,780 --> 00:22:36,120
admission controller once you deploy

632
00:22:36,120 --> 00:22:39,600
them or once you apply this admission

633
00:22:39,600 --> 00:22:41,520
controller into the cluster they become

634
00:22:41,520 --> 00:22:44,340
an all-powerful object now the reason

635
00:22:44,340 --> 00:22:46,440
for this is pretty simple right every

636
00:22:46,440 --> 00:22:48,299
single request they are able to

637
00:22:48,299 --> 00:22:49,440
intercept

638
00:22:49,440 --> 00:22:52,140
so naturally they're all powerful they

639
00:22:52,140 --> 00:22:55,140
have this they have this extremely high

640
00:22:55,140 --> 00:22:57,539
privileged position that they can

641
00:22:57,539 --> 00:22:59,580
potentially abuse so if if somebody is

642
00:22:59,580 --> 00:23:01,080
able to get you to install their

643
00:23:01,080 --> 00:23:02,940
admission controller and their admission

644
00:23:02,940 --> 00:23:04,740
controller happens to be malicious or

645
00:23:04,740 --> 00:23:06,960
doing something that is potentially very

646
00:23:06,960 --> 00:23:09,840
naughty there is very little uh once you

647
00:23:09,840 --> 00:23:12,539
deploy it they become a pretty powerful

648
00:23:12,539 --> 00:23:14,280
object in that particular cluster so

649
00:23:14,280 --> 00:23:15,780
that's basically how it works people

650
00:23:15,780 --> 00:23:18,600
rarely verify uh the reason for their

651
00:23:18,600 --> 00:23:20,760
presence so a lot of times when when you

652
00:23:20,760 --> 00:23:22,080
say yeah I'm deploying a new admission

653
00:23:22,080 --> 00:23:24,120
controller the answer is yeah it's good

654
00:23:24,120 --> 00:23:26,100
it's more security right security is

655
00:23:26,100 --> 00:23:29,159
awesome great go ahead do it so a lot of

656
00:23:29,159 --> 00:23:32,039
times people don't really think about uh

657
00:23:32,039 --> 00:23:34,140
why this is there and this seems like

658
00:23:34,140 --> 00:23:36,059
legitimate traffic right even if let's

659
00:23:36,059 --> 00:23:38,520
say somebody compromises so one of the

660
00:23:38,520 --> 00:23:40,080
common cases that we've seen we've done

661
00:23:40,080 --> 00:23:42,360
a lot of kubernetes security uh you know

662
00:23:42,360 --> 00:23:43,860
the red teaming assessment gapt

663
00:23:43,860 --> 00:23:45,960
assessments and so on so forth so in

664
00:23:45,960 --> 00:23:47,880
that what happens is one let's say we

665
00:23:47,880 --> 00:23:50,039
compromise an application or an

666
00:23:50,039 --> 00:23:51,360
application running on a kubernetes

667
00:23:51,360 --> 00:23:53,460
cluster we get rce or we get ssrf or

668
00:23:53,460 --> 00:23:55,679
whatever it is we steal the token we

669
00:23:55,679 --> 00:23:57,240
steal the service account token from the

670
00:23:57,240 --> 00:23:59,400
kubernetes cluster right so from that

671
00:23:59,400 --> 00:24:01,200
point in time let's say instead of

672
00:24:01,200 --> 00:24:03,240
deploying our own malicious object or

673
00:24:03,240 --> 00:24:05,340
whatever we deploy a admission

674
00:24:05,340 --> 00:24:08,760
controller it's almost never detected

675
00:24:08,760 --> 00:24:10,799
right people never detect oh there's

676
00:24:10,799 --> 00:24:12,000
this new admission controller but that's

677
00:24:12,000 --> 00:24:13,559
fine it seems yeah admission controller

678
00:24:13,559 --> 00:24:15,299
must be good yeah it's fine nobody

679
00:24:15,299 --> 00:24:17,700
really thinks about why that exists

680
00:24:17,700 --> 00:24:19,620
right A lot of times you don't even have

681
00:24:19,620 --> 00:24:21,720
uh it looks like completely legitimate

682
00:24:21,720 --> 00:24:24,419
traffic uh it is equivalent is native

683
00:24:24,419 --> 00:24:27,000
object mind you so it is looking like a

684
00:24:27,000 --> 00:24:29,580
completely legitimate the use case that

685
00:24:29,580 --> 00:24:32,100
is there right so and you see that uh

686
00:24:32,100 --> 00:24:33,659
the configuration object has this

687
00:24:33,659 --> 00:24:34,919
hardback like state so you can

688
00:24:34,919 --> 00:24:35,820
essentially say if you have the

689
00:24:35,820 --> 00:24:38,340
permissions to launch it you have the

690
00:24:38,340 --> 00:24:39,720
ability to create whatever

691
00:24:39,720 --> 00:24:41,640
implementation you want in that

692
00:24:41,640 --> 00:24:43,679
particular admission controller and the

693
00:24:43,679 --> 00:24:46,620
post exploit scenarios are quite a large

694
00:24:46,620 --> 00:24:48,659
set of post exploit scenarios as you

695
00:24:48,659 --> 00:24:49,679
will see

696
00:24:49,679 --> 00:24:51,659
right so basically your admission

697
00:24:51,659 --> 00:24:55,020
controller is quite powerful right it

698
00:24:55,020 --> 00:24:57,539
has a lot of power inside the cluster

699
00:24:57,539 --> 00:25:00,659
and if somebody is able to deploy uh

700
00:25:00,659 --> 00:25:02,580
either a malicious admission controller

701
00:25:02,580 --> 00:25:04,080
or your app is compromised and through

702
00:25:04,080 --> 00:25:06,419
that the attacker uses one of the post

703
00:25:06,419 --> 00:25:08,820
exploit scenarios to deploy a malicious

704
00:25:08,820 --> 00:25:11,580
admission controller it is uh it's

705
00:25:11,580 --> 00:25:14,400
pretty complicated to uh even identify

706
00:25:14,400 --> 00:25:16,440
unless you have great login and

707
00:25:16,440 --> 00:25:18,240
monitoring uh it's pretty complicated to

708
00:25:18,240 --> 00:25:20,100
identify and it's really complicated to

709
00:25:20,100 --> 00:25:22,620
uh especially in a large cluster to even

710
00:25:22,620 --> 00:25:24,600
figure this out right so this is this is

711
00:25:24,600 --> 00:25:26,460
something that we see quite a lot of now

712
00:25:26,460 --> 00:25:28,080
let's look at the post exploitation

713
00:25:28,080 --> 00:25:29,820
scenarios now the post exploitation

714
00:25:29,820 --> 00:25:31,980
scenarios have quite a few and depending

715
00:25:31,980 --> 00:25:34,140
on the type of admission controller you

716
00:25:34,140 --> 00:25:37,260
can launch they can become uh great

717
00:25:37,260 --> 00:25:39,480
anywhere between good to great right so

718
00:25:39,480 --> 00:25:41,760
for instance validating so when you are

719
00:25:41,760 --> 00:25:44,400
trying to validate and uh try to launch

720
00:25:44,400 --> 00:25:45,779
a validating admission controller

721
00:25:45,779 --> 00:25:47,460
remember validating can't do anything

722
00:25:47,460 --> 00:25:49,740
but profiles so what you can do is

723
00:25:49,740 --> 00:25:51,659
basically just say that okay I I want

724
00:25:51,659 --> 00:25:53,400
you to validate this but I actually not

725
00:25:53,400 --> 00:25:54,659
do any kind of validation right

726
00:25:54,659 --> 00:25:57,720
basically just uh so let's say I I

727
00:25:57,720 --> 00:25:59,460
create a new admission controller that

728
00:25:59,460 --> 00:26:01,320
says yeah this is an admission

729
00:26:01,320 --> 00:26:03,419
controller every time a new secret is

730
00:26:03,419 --> 00:26:05,400
created in the kubernetes cluster you

731
00:26:05,400 --> 00:26:07,020
need to send it to me so I need to

732
00:26:07,020 --> 00:26:08,940
validate something and I take that

733
00:26:08,940 --> 00:26:10,679
secret and send it over to an attacker

734
00:26:10,679 --> 00:26:11,820
sitting somewhere on the open internet

735
00:26:11,820 --> 00:26:14,400
right I exfiltrate that secret basically

736
00:26:14,400 --> 00:26:16,200
so that's uh that's the kind of stuff

737
00:26:16,200 --> 00:26:17,820
that you can do with validating you can

738
00:26:17,820 --> 00:26:20,820
weaken validation you can also do denial

739
00:26:20,820 --> 00:26:22,440
of service now this is this is an

740
00:26:22,440 --> 00:26:26,279
underrated uh use case remember in a in

741
00:26:26,279 --> 00:26:28,080
an active kubernetes cluster there are

742
00:26:28,080 --> 00:26:30,059
thousands of resources that have created

743
00:26:30,059 --> 00:26:32,220
launched deleted deployed whatever it is

744
00:26:32,220 --> 00:26:34,260
right so if you add a validating

745
00:26:34,260 --> 00:26:36,179
admission controller just denies every

746
00:26:36,179 --> 00:26:39,240
uh response then you can really create a

747
00:26:39,240 --> 00:26:41,220
lot of Mayhem on that kubernetes cluster

748
00:26:41,220 --> 00:26:42,779
so denial of service can be a pretty

749
00:26:42,779 --> 00:26:46,440
powerful uh attack possibility uh with

750
00:26:46,440 --> 00:26:48,000
an admission controller so this is

751
00:26:48,000 --> 00:26:49,919
something that is underrated and I feel

752
00:26:49,919 --> 00:26:51,179
uh

753
00:26:51,179 --> 00:26:54,360
you know it can literally be something

754
00:26:54,360 --> 00:26:56,460
that somebody can use to debilitate an

755
00:26:56,460 --> 00:26:58,020
active kubernetes cluster for quite a

756
00:26:58,020 --> 00:27:00,360
bit mutating of course the possibilities

757
00:27:00,360 --> 00:27:02,700
are endless right so you have you can

758
00:27:02,700 --> 00:27:04,679
because you can change the nature of the

759
00:27:04,679 --> 00:27:06,600
request right so it's basically like

760
00:27:06,600 --> 00:27:09,659
injection uh for in web applications you

761
00:27:09,659 --> 00:27:11,460
have injection where you can change the

762
00:27:11,460 --> 00:27:13,559
nature of the original request the same

763
00:27:13,559 --> 00:27:14,940
thing you can do with mutating admission

764
00:27:14,940 --> 00:27:16,620
controller you get a request thing but

765
00:27:16,620 --> 00:27:18,419
that request is completely changed to do

766
00:27:18,419 --> 00:27:21,179
whatever the attacker wants to do you

767
00:27:21,179 --> 00:27:23,760
can enable configs you can tamper with

768
00:27:23,760 --> 00:27:25,559
runtime you can add your own malicious

769
00:27:25,559 --> 00:27:27,779
sidecar containers you can add malicious

770
00:27:27,779 --> 00:27:29,400
init containers you can do pretty much

771
00:27:29,400 --> 00:27:31,080
anything you want when you have a

772
00:27:31,080 --> 00:27:32,820
malicious mutilating admission

773
00:27:32,820 --> 00:27:35,880
controller there is a huge amount of uh

774
00:27:35,880 --> 00:27:38,520
attack possibilities for a mutilating

775
00:27:38,520 --> 00:27:41,279
admission controller that is malicious

776
00:27:41,279 --> 00:27:44,100
now it's time for the demo and uh for

777
00:27:44,100 --> 00:27:45,840
the demo I'm going to be using one of

778
00:27:45,840 --> 00:27:48,240
our Labs from abstract engineer uh to

779
00:27:48,240 --> 00:27:50,460
Showcase how this works

780
00:27:50,460 --> 00:27:53,460
um and uh I'll explain how this works

781
00:27:53,460 --> 00:27:55,500
now in this we're going to do a full

782
00:27:55,500 --> 00:27:57,240
scope demo right in fact we just

783
00:27:57,240 --> 00:28:00,480
recently finished a class on attacking

784
00:28:00,480 --> 00:28:03,659
the application supply chain in uh in

785
00:28:03,659 --> 00:28:06,659
black hat in in Vegas and this was one

786
00:28:06,659 --> 00:28:08,460
of the labs as part of that so I'm just

787
00:28:08,460 --> 00:28:10,500
gonna showcase how this works in the

788
00:28:10,500 --> 00:28:12,779
meantime I'm also going to show you the

789
00:28:12,779 --> 00:28:15,900
code that makes this possible just give

790
00:28:15,900 --> 00:28:18,000
me a second while I pull up all of that

791
00:28:18,000 --> 00:28:20,820
stuff I was hoping to do this before the

792
00:28:20,820 --> 00:28:22,559
session launched but since I had an

793
00:28:22,559 --> 00:28:24,720
early start to the session I might need

794
00:28:24,720 --> 00:28:28,740
a little bit of time with setup uh

795
00:28:28,740 --> 00:28:32,279
just give me a second yeah looks like I

796
00:28:32,279 --> 00:28:34,620
have the southernmost ready okay so now

797
00:28:34,620 --> 00:28:37,140
what I'm gonna do is yeah so this is one

798
00:28:37,140 --> 00:28:38,880
of our Labs like I said I'm going to

799
00:28:38,880 --> 00:28:41,039
first launch a cluster and I'm going to

800
00:28:41,039 --> 00:28:43,380
launch uh an app so basically the way

801
00:28:43,380 --> 00:28:45,480
I'm gonna go about doing this is that

802
00:28:45,480 --> 00:28:47,159
I'm going to launch this new kubernetes

803
00:28:47,159 --> 00:28:50,159
cluster then I'm going to uh launch an

804
00:28:50,159 --> 00:28:51,900
application the node.js application in

805
00:28:51,900 --> 00:28:53,460
this kubernetes cluster I'm going to

806
00:28:53,460 --> 00:28:55,500
compromise this node.js application and

807
00:28:55,500 --> 00:28:58,320
get an rce on this and I want to steal

808
00:28:58,320 --> 00:29:00,419
the service account token uh that is

809
00:29:00,419 --> 00:29:03,419
injected into the uh not just the the

810
00:29:03,419 --> 00:29:04,980
container that is running the node.js

811
00:29:04,980 --> 00:29:06,360
application to kind of compromise the

812
00:29:06,360 --> 00:29:08,100
application now this service account

813
00:29:08,100 --> 00:29:10,260
token happens to be a very highly

814
00:29:10,260 --> 00:29:12,299
privileged service account from there

815
00:29:12,299 --> 00:29:13,500
I'm going to add my admission

816
00:29:13,500 --> 00:29:15,480
controllers and start completely

817
00:29:15,480 --> 00:29:16,860
compromising the cluster with post

818
00:29:16,860 --> 00:29:18,960
expert scenarios that's basically what

819
00:29:18,960 --> 00:29:20,640
I'm going to do so first I'm going to

820
00:29:20,640 --> 00:29:22,740
pull up uh I'm gonna run a new

821
00:29:22,740 --> 00:29:25,200
kubernetes cluster I'm going to spin up

822
00:29:25,200 --> 00:29:28,380
on your kubernetes cluster and uh

823
00:29:28,380 --> 00:29:31,799
once I do this I am going to start

824
00:29:31,799 --> 00:29:33,840
actually so this is my node.js

825
00:29:33,840 --> 00:29:35,880
application you'll see that my node.js

826
00:29:35,880 --> 00:29:39,299
application uh is basically just a

827
00:29:39,299 --> 00:29:41,880
standard API style application the only

828
00:29:41,880 --> 00:29:43,679
thing can anyone tell me what this is

829
00:29:43,679 --> 00:29:45,779
vulnerable to while we are waiting for

830
00:29:45,779 --> 00:29:47,640
the cluster to deploy

831
00:29:47,640 --> 00:29:49,260
can anyone tell me what this is

832
00:29:49,260 --> 00:29:51,059
vulnerable to what is the vulnerability

833
00:29:51,059 --> 00:29:52,380
here

834
00:29:52,380 --> 00:29:54,000
a little bit of trivia and making sure

835
00:29:54,000 --> 00:29:55,740
that everyone is still awake

836
00:29:55,740 --> 00:29:58,279
okay

837
00:30:00,120 --> 00:30:04,620
I'm not sure if you have chat access

838
00:30:04,620 --> 00:30:07,879
but uh

839
00:30:10,020 --> 00:30:12,179
anyone figured out what it's vulnerable

840
00:30:12,179 --> 00:30:14,419
to

841
00:30:18,899 --> 00:30:21,480
okay I'm not sure if people can even

842
00:30:21,480 --> 00:30:23,100
respond or people are responding but

843
00:30:23,100 --> 00:30:26,059
nevertheless uh I'll explain soon enough

844
00:30:26,059 --> 00:30:28,740
so this is almost done my cluster is

845
00:30:28,740 --> 00:30:31,380
almost bootstrapped and running

846
00:30:31,380 --> 00:30:34,140
um yeah this is vulnerable to uh this is

847
00:30:34,140 --> 00:30:35,700
vulnerable to service site template

848
00:30:35,700 --> 00:30:37,140
injection I don't know how many of you

849
00:30:37,140 --> 00:30:39,240
have worked with server side template

850
00:30:39,240 --> 00:30:41,159
injection show of hands anyone exploited

851
00:30:41,159 --> 00:30:45,120
or heard off or uh seen server-side

852
00:30:45,120 --> 00:30:48,899
template injection anyone

853
00:30:49,080 --> 00:30:52,320
not sure again whether people have but

854
00:30:52,320 --> 00:30:53,760
server-side template injection is

855
00:30:53,760 --> 00:30:57,299
basically uh an injection flaw very

856
00:30:57,299 --> 00:30:59,220
similar to SQL injection except that

857
00:30:59,220 --> 00:31:01,559
we're exploiting it on the templating

858
00:31:01,559 --> 00:31:03,480
system of an application so in this case

859
00:31:03,480 --> 00:31:06,659
we have an application here uh which is

860
00:31:06,659 --> 00:31:08,580
this is a 404 page of the application

861
00:31:08,580 --> 00:31:11,880
and we have just concatenating the the

862
00:31:11,880 --> 00:31:14,039
request that the user sent or the the

863
00:31:14,039 --> 00:31:16,860
page ID that the user sent

864
00:31:16,860 --> 00:31:19,440
um yeah line number 2021 ssti that's

865
00:31:19,440 --> 00:31:21,240
correct uh server-side template

866
00:31:21,240 --> 00:31:22,799
injection so basically what's happening

867
00:31:22,799 --> 00:31:25,880
is we are concatenating the request

868
00:31:25,880 --> 00:31:29,340
parameters here uh with the HTML

869
00:31:29,340 --> 00:31:31,740
template this is being rendered on this

870
00:31:31,740 --> 00:31:33,240
has been processed on the server side

871
00:31:33,240 --> 00:31:35,580
and rendered as a template on the client

872
00:31:35,580 --> 00:31:37,740
side so basically this is vulnerable to

873
00:31:37,740 --> 00:31:39,120
template injection we're going to

874
00:31:39,120 --> 00:31:41,279
leverage this attack to actually perform

875
00:31:41,279 --> 00:31:43,559
some very interesting uh stuff so we're

876
00:31:43,559 --> 00:31:45,240
going to deploy this app first I hope my

877
00:31:45,240 --> 00:31:48,480
kubernetes control plane is ready I

878
00:31:48,480 --> 00:31:53,340
think so uh Cube CPL nodes

879
00:31:53,340 --> 00:31:56,399
yep we are ready let's go ahead and

880
00:31:56,399 --> 00:31:59,580
deploy our app this is our node.js

881
00:31:59,580 --> 00:32:01,640
application we're going to deploy this

882
00:32:01,640 --> 00:32:04,320
uh it's going to deploy this app it's

883
00:32:04,320 --> 00:32:06,240
going to create a service it also

884
00:32:06,240 --> 00:32:07,980
creates a service account token for it

885
00:32:07,980 --> 00:32:09,899
unfortunately the service account token

886
00:32:09,899 --> 00:32:12,600
has huge privileges on the cluster now

887
00:32:12,600 --> 00:32:15,299
remember it's not necessary that you

888
00:32:15,299 --> 00:32:17,220
need to have this level of privileges in

889
00:32:17,220 --> 00:32:19,080
fact if you just have even roles on a

890
00:32:19,080 --> 00:32:20,940
particular namespace I can still pull

891
00:32:20,940 --> 00:32:24,240
off this attack so even the rbac aspect

892
00:32:24,240 --> 00:32:27,059
of it is not so much of an issue here uh

893
00:32:27,059 --> 00:32:28,740
if you have certain privileges to do

894
00:32:28,740 --> 00:32:30,600
launch deployments and stuff like that

895
00:32:30,600 --> 00:32:32,220
you can still do it even add to the

896
00:32:32,220 --> 00:32:33,779
namespace level so that's something that

897
00:32:33,779 --> 00:32:35,460
I want to be very clear about it not

898
00:32:35,460 --> 00:32:38,700
necessarily that it needs to be a lot of

899
00:32:38,700 --> 00:32:40,980
privileges that needs for this attack to

900
00:32:40,980 --> 00:32:42,779
happen our node application is working

901
00:32:42,779 --> 00:32:44,580
now the first thing I'm going to do is

902
00:32:44,580 --> 00:32:46,559
I'm going to make sure that our app I

903
00:32:46,559 --> 00:32:49,140
just export the name of this app and I

904
00:32:49,140 --> 00:32:51,480
also port forward this application

905
00:32:51,480 --> 00:32:53,700
right so I'm going to port forward it on

906
00:32:53,700 --> 00:32:57,659
Port 5000. now once I put forward it on

907
00:32:57,659 --> 00:32:59,700
Port 5000 what I'm going to do is I'm

908
00:32:59,700 --> 00:33:03,779
going to access this on

909
00:33:04,260 --> 00:33:09,000
online so if you see this you will see

910
00:33:09,000 --> 00:33:11,580
I have access to my application it's

911
00:33:11,580 --> 00:33:13,919
called the absec bookstore whatever now

912
00:33:13,919 --> 00:33:17,580
let's actually exploit that uh you know

913
00:33:17,580 --> 00:33:20,700
the template injection so we say in page

914
00:33:20,700 --> 00:33:24,000
name is equal to a buy and it says sorry

915
00:33:24,000 --> 00:33:26,700
I couldn't find a way right but if I do

916
00:33:26,700 --> 00:33:31,760
page name is equal to 7 into 7

917
00:33:32,159 --> 00:33:34,620
it's going to evaluate that expression

918
00:33:34,620 --> 00:33:36,600
and say yeah I'm unable to find 49 so

919
00:33:36,600 --> 00:33:38,419
which means that this is vulnerable to

920
00:33:38,419 --> 00:33:40,799
or potentially vulnerability server-side

921
00:33:40,799 --> 00:33:42,840
template rejection now we are going to

922
00:33:42,840 --> 00:33:44,760
use an old tool but a pretty awesome

923
00:33:44,760 --> 00:33:47,399
tool for server-side template injection

924
00:33:47,399 --> 00:33:49,679
exploitation very similar to SQL map I

925
00:33:49,679 --> 00:33:50,640
don't know how many of you are familiar

926
00:33:50,640 --> 00:33:52,919
with SQL map this is called TPL map

927
00:33:52,919 --> 00:33:55,380
which is basically SQL map for template

928
00:33:55,380 --> 00:33:56,760
injections right so we're going to use

929
00:33:56,760 --> 00:34:00,059
TPL map to actually run uh some payloads

930
00:34:00,059 --> 00:34:01,620
to see whether it is vulnerable or not

931
00:34:01,620 --> 00:34:03,419
we're going to say yeah yeah let's see

932
00:34:03,419 --> 00:34:06,240
whether TPL map can find the exploit and

933
00:34:06,240 --> 00:34:08,339
it runs and says yep you're using

934
00:34:08,339 --> 00:34:09,839
nunchucks which is a JavaScript

935
00:34:09,839 --> 00:34:11,820
templating system I can do everything I

936
00:34:11,820 --> 00:34:14,040
can do shell command I can do reversal I

937
00:34:14,040 --> 00:34:16,859
can do file reduction to file right you

938
00:34:16,859 --> 00:34:19,320
can do a lot of stuff uh this is uh

939
00:34:19,320 --> 00:34:21,540
pretty free for all kind of a Blog it's

940
00:34:21,540 --> 00:34:23,639
huge now but I don't really care about

941
00:34:23,639 --> 00:34:25,560
doing a shell I don't want any of that I

942
00:34:25,560 --> 00:34:27,719
just want to read the kubernetes service

943
00:34:27,719 --> 00:34:29,820
account token so what I'm going to do is

944
00:34:29,820 --> 00:34:32,099
I'm going to tell TPL map just run this

945
00:34:32,099 --> 00:34:35,599
mind on the back end character

946
00:34:35,599 --> 00:34:38,159
Services account token get me the

947
00:34:38,159 --> 00:34:40,020
service account right

948
00:34:40,020 --> 00:34:41,280
I'm going to get this service account

949
00:34:41,280 --> 00:34:44,040
token and it says yeah I got you the

950
00:34:44,040 --> 00:34:45,418
service account book now this service

951
00:34:45,418 --> 00:34:48,060
account token lets me communicate with

952
00:34:48,060 --> 00:34:50,399
the cluster this is by the way if you

953
00:34:50,399 --> 00:34:53,219
don't in a kubernetes cluster uh when

954
00:34:53,219 --> 00:34:54,960
you are deploying containers in the

955
00:34:54,960 --> 00:34:57,599
parts and stuff like that by default the

956
00:34:57,599 --> 00:34:59,580
service account token for that namespace

957
00:34:59,580 --> 00:35:02,280
is injected into the Container so you

958
00:35:02,280 --> 00:35:05,160
will find this on every single container

959
00:35:05,160 --> 00:35:07,740
in unless you disable that functionality

960
00:35:07,740 --> 00:35:11,520
or unless you uh that you know that

961
00:35:11,520 --> 00:35:12,839
service account token has very few

962
00:35:12,839 --> 00:35:14,640
privileges or no privileges that's also

963
00:35:14,640 --> 00:35:16,020
possible but in this case the service

964
00:35:16,020 --> 00:35:18,060
account token happens to have huge

965
00:35:18,060 --> 00:35:20,099
number of privileges right so I'm going

966
00:35:20,099 --> 00:35:22,500
to call this essay token

967
00:35:22,500 --> 00:35:24,300
and I'm just going to copy this so that

968
00:35:24,300 --> 00:35:25,619
I don't have to use that huge value

969
00:35:25,619 --> 00:35:28,380
every single time so I'm gonna I'm gonna

970
00:35:28,380 --> 00:35:31,980
start accessing that cluster as my as

971
00:35:31,980 --> 00:35:34,859
the compromise service account token so

972
00:35:34,859 --> 00:35:38,339
I'll do dollar essay underscore token

973
00:35:38,339 --> 00:35:41,160
and I've set that as my so I'm going to

974
00:35:41,160 --> 00:35:43,020
start accessing it as the compromise

975
00:35:43,020 --> 00:35:44,760
service account right so I'm going to

976
00:35:44,760 --> 00:35:46,800
say this I'm going to check out I'm

977
00:35:46,800 --> 00:35:48,480
going to set the context to that

978
00:35:48,480 --> 00:35:51,599
particular uh token so I'm going to say

979
00:35:51,599 --> 00:35:54,000
this uh yeah I'm gonna now I'm accessing

980
00:35:54,000 --> 00:35:56,940
the cluster as this compromise service

981
00:35:56,940 --> 00:35:59,099
account now you can again this is this

982
00:35:59,099 --> 00:36:01,260
can be done in a completely remote way

983
00:36:01,260 --> 00:36:03,240
also right it can be done in a

984
00:36:03,240 --> 00:36:05,339
completely Remote application so imagine

985
00:36:05,339 --> 00:36:06,780
that this is the real world kubernetes

986
00:36:06,780 --> 00:36:08,460
plus so the same attack same principle

987
00:36:08,460 --> 00:36:10,560
would apply right so this is something

988
00:36:10,560 --> 00:36:12,119
that you'll see now what I'm going to do

989
00:36:12,119 --> 00:36:14,460
is I'm gonna I'm going to first deploy

990
00:36:14,460 --> 00:36:16,680
my first admission controller okay so

991
00:36:16,680 --> 00:36:18,119
let's see what our first admission

992
00:36:18,119 --> 00:36:19,560
controller is doing it's a validating

993
00:36:19,560 --> 00:36:21,839
admission controller now this admission

994
00:36:21,839 --> 00:36:24,240
controller is actually doing pretty much

995
00:36:24,240 --> 00:36:28,079
uh nothing it's not doing anything

996
00:36:28,079 --> 00:36:31,320
um let me show you the code but this is

997
00:36:31,320 --> 00:36:32,880
doing something naughty and let's talk

998
00:36:32,880 --> 00:36:34,260
about what it's doing in terms of

999
00:36:34,260 --> 00:36:36,359
naughtiness

1000
00:36:36,359 --> 00:36:37,859
um

1001
00:36:37,859 --> 00:36:41,060
just give me a sec

1002
00:36:49,079 --> 00:36:51,900
I'm not sure I don't think I have the

1003
00:36:51,900 --> 00:36:53,760
source code

1004
00:36:53,760 --> 00:36:57,960
anywhere uh my apologies

1005
00:36:57,960 --> 00:36:59,820
I don't think I have the source code

1006
00:36:59,820 --> 00:37:01,680
right now

1007
00:37:01,680 --> 00:37:03,780
um it was supposed to be in one of these

1008
00:37:03,780 --> 00:37:05,640
repositories

1009
00:37:05,640 --> 00:37:07,140
just give me a second let me try and

1010
00:37:07,140 --> 00:37:08,160
find that

1011
00:37:08,160 --> 00:37:10,920
I thought it was that but it's clearly

1012
00:37:10,920 --> 00:37:13,099
not

1013
00:37:14,099 --> 00:37:17,099
uh

1014
00:37:19,380 --> 00:37:22,260
uh apparently not sorry about that I'm

1015
00:37:22,260 --> 00:37:23,820
not able to find the source code for the

1016
00:37:23,820 --> 00:37:24,920
actual

1017
00:37:24,920 --> 00:37:27,960
uh web hook

1018
00:37:27,960 --> 00:37:30,540
I was hoping it would be there but it's

1019
00:37:30,540 --> 00:37:33,000
not anyway so uh let me explain how it

1020
00:37:33,000 --> 00:37:35,400
works uh so this is uh validating

1021
00:37:35,400 --> 00:37:37,380
admission controller and what this is

1022
00:37:37,380 --> 00:37:40,619
doing is that it's going to deploy my

1023
00:37:40,619 --> 00:37:42,599
custom validating admission controller

1024
00:37:42,599 --> 00:37:45,180
it's going to deploy my custom hook and

1025
00:37:45,180 --> 00:37:48,000
it every time a new secret is created in

1026
00:37:48,000 --> 00:37:49,320
the cluster or a new environment

1027
00:37:49,320 --> 00:37:51,720
variable is created in the cluster it

1028
00:37:51,720 --> 00:37:53,520
will check it is supposed to check the

1029
00:37:53,520 --> 00:37:55,200
environment variables whether it is

1030
00:37:55,200 --> 00:37:57,420
valid or not so in this case what I'm

1031
00:37:57,420 --> 00:37:58,740
going to do is I'm not going to do any

1032
00:37:58,740 --> 00:38:01,020
validation here what this admission

1033
00:38:01,020 --> 00:38:03,060
controller is going to do is that it's

1034
00:38:03,060 --> 00:38:04,619
going to steal all the environment

1035
00:38:04,619 --> 00:38:07,079
variables from whatever deployment I

1036
00:38:07,079 --> 00:38:09,540
have and dump it to an attacker

1037
00:38:09,540 --> 00:38:11,099
controlled listener out on the internet

1038
00:38:11,099 --> 00:38:12,599
okay that's basically what it's doing

1039
00:38:12,599 --> 00:38:15,119
it's not doing anything that is uh

1040
00:38:15,119 --> 00:38:16,800
actually validating anything it's just

1041
00:38:16,800 --> 00:38:18,780
pretending to be a validating admission

1042
00:38:18,780 --> 00:38:20,579
controller but it's really not doing any

1043
00:38:20,579 --> 00:38:23,760
real validations so to speak it's just

1044
00:38:23,760 --> 00:38:26,460
uh compromising by sending all my

1045
00:38:26,460 --> 00:38:28,920
secrets to a third party listener out on

1046
00:38:28,920 --> 00:38:30,420
the internet that's basically What's

1047
00:38:30,420 --> 00:38:31,859
Happening Here

1048
00:38:31,859 --> 00:38:35,940
all right so let's uh make some changes

1049
00:38:35,940 --> 00:38:39,240
to my uh deployment web hooks so you'll

1050
00:38:39,240 --> 00:38:41,099
see that I'm deploying this particular

1051
00:38:41,099 --> 00:38:43,440
validating admission controller I am

1052
00:38:43,440 --> 00:38:45,300
creating a configuration saying anytime

1053
00:38:45,300 --> 00:38:48,300
a deployment is created in my default

1054
00:38:48,300 --> 00:38:52,500
namespace go for it and let let the API

1055
00:38:52,500 --> 00:38:54,420
server talk to my admission controller

1056
00:38:54,420 --> 00:38:56,339
and I'm deploying that as a service and

1057
00:38:56,339 --> 00:38:57,720
I have some secret and so on right

1058
00:38:57,720 --> 00:38:59,700
that's basically what is happening here

1059
00:38:59,700 --> 00:39:02,820
so I'm going to deploy this first I'm

1060
00:39:02,820 --> 00:39:05,040
going to write the create the deployment

1061
00:39:05,040 --> 00:39:06,599
object

1062
00:39:06,599 --> 00:39:08,579
I'm going to create the secret first

1063
00:39:08,579 --> 00:39:10,800
then I'm going to deploy the deployment

1064
00:39:10,800 --> 00:39:12,660
object

1065
00:39:12,660 --> 00:39:15,180
and I'm also going to add a

1066
00:39:15,180 --> 00:39:16,980
configuration

1067
00:39:16,980 --> 00:39:19,079
services and configuration please show

1068
00:39:19,079 --> 00:39:20,579
so perfect

1069
00:39:20,579 --> 00:39:23,040
if I do this it adds the configuration

1070
00:39:23,040 --> 00:39:26,099
so if I do Cube CTL get

1071
00:39:26,099 --> 00:39:28,320
uh validating

1072
00:39:28,320 --> 00:39:31,160
web hook

1073
00:39:31,320 --> 00:39:33,720
configuration

1074
00:39:33,720 --> 00:39:35,700
you'll see that my web hook has now been

1075
00:39:35,700 --> 00:39:37,680
added so every single time somebody

1076
00:39:37,680 --> 00:39:40,440
tries to create a deployment on this

1077
00:39:40,440 --> 00:39:42,480
cluster in a particular namespace in the

1078
00:39:42,480 --> 00:39:44,040
default namespace

1079
00:39:44,040 --> 00:39:46,200
it will first pass through this Web book

1080
00:39:46,200 --> 00:39:48,599
and this web hook like I said is not

1081
00:39:48,599 --> 00:39:50,099
doing anything legitimate it's just

1082
00:39:50,099 --> 00:39:52,440
sending all the secrets to a third party

1083
00:39:52,440 --> 00:39:54,660
listener so now what I'm going to do is

1084
00:39:54,660 --> 00:39:56,160
I'm going to set up that third party

1085
00:39:56,160 --> 00:39:58,079
listener right so to speak I'm going to

1086
00:39:58,079 --> 00:40:01,680
set up that third party listener

1087
00:40:01,680 --> 00:40:05,040
uh so first I'm going to go into this

1088
00:40:05,040 --> 00:40:09,060
and I'm going to run my listener

1089
00:40:09,060 --> 00:40:10,680
I'm just going to wait on connections

1090
00:40:10,680 --> 00:40:12,359
coming here right so what I'm going to

1091
00:40:12,359 --> 00:40:14,640
do is I'm going to create a new object

1092
00:40:14,640 --> 00:40:17,460
now I'm going to create my uh a new uh

1093
00:40:17,460 --> 00:40:19,859
uh a new deployment on the cluster I'm

1094
00:40:19,859 --> 00:40:21,540
going to create an nginx deployment on

1095
00:40:21,540 --> 00:40:23,820
the cluster this nginx has a whole bunch

1096
00:40:23,820 --> 00:40:26,160
of environment variables right so you'll

1097
00:40:26,160 --> 00:40:27,720
see it has some password it has some

1098
00:40:27,720 --> 00:40:29,760
secret key it has some AWS taxes tid

1099
00:40:29,760 --> 00:40:31,740
some AWS secret access key blah blah

1100
00:40:31,740 --> 00:40:33,300
blah blah blah it has all of this stuff

1101
00:40:33,300 --> 00:40:36,060
now this is being deployed in the

1102
00:40:36,060 --> 00:40:38,700
cluster so let's actually deploy this

1103
00:40:38,700 --> 00:40:40,140
and see what happens when we try and

1104
00:40:40,140 --> 00:40:41,940
launch it in this cluster

1105
00:40:41,940 --> 00:40:44,400
as soon as I landed in this cluster says

1106
00:40:44,400 --> 00:40:45,960
yeah it's fine we've created engineering

1107
00:40:45,960 --> 00:40:47,640
his deployment but

1108
00:40:47,640 --> 00:40:50,460
you'll see that the attack curve has now

1109
00:40:50,460 --> 00:40:51,960
the validating web hook which is

1110
00:40:51,960 --> 00:40:53,460
supposed to validate is not doing

1111
00:40:53,460 --> 00:40:55,800
validation it's essentially just sending

1112
00:40:55,800 --> 00:40:59,040
all of those environment variables or

1113
00:40:59,040 --> 00:41:02,400
secrets to my attacker control listener

1114
00:41:02,400 --> 00:41:05,700
now so any pro any container or any

1115
00:41:05,700 --> 00:41:07,740
deployment that launches if it has

1116
00:41:07,740 --> 00:41:09,480
environment variables

1117
00:41:09,480 --> 00:41:11,940
based on my validating webhook's logic

1118
00:41:11,940 --> 00:41:15,000
it's going to send any validating uh any

1119
00:41:15,000 --> 00:41:16,920
environment variables over to my

1120
00:41:16,920 --> 00:41:18,720
attacker control listener so this is

1121
00:41:18,720 --> 00:41:21,420
pretty much a huge exfiltration attack

1122
00:41:21,420 --> 00:41:23,760
because my validating web Hook is

1123
00:41:23,760 --> 00:41:26,940
behaving as an implant uh and a back

1124
00:41:26,940 --> 00:41:29,820
door uh in some way shape or form right

1125
00:41:29,820 --> 00:41:31,320
so that's basically What's Happening

1126
00:41:31,320 --> 00:41:32,700
Here

1127
00:41:32,700 --> 00:41:36,660
now this is validating all right now

1128
00:41:36,660 --> 00:41:40,320
let's look at what's happening in our

1129
00:41:40,320 --> 00:41:41,460
mutating

1130
00:41:41,460 --> 00:41:44,160
one right so first I'm going to delete

1131
00:41:44,160 --> 00:41:45,839
all of this stuff and I'm going to

1132
00:41:45,839 --> 00:41:48,240
deploy a mutating admission controller

1133
00:41:48,240 --> 00:41:50,640
I'm going to delete all of this

1134
00:41:50,640 --> 00:41:52,920
and I'm going to deploy my mutating

1135
00:41:52,920 --> 00:41:54,900
admission control now in the mutating

1136
00:41:54,900 --> 00:41:57,359
admission controller what I am going to

1137
00:41:57,359 --> 00:42:00,140
do is that I am going to essentially

1138
00:42:00,140 --> 00:42:04,079
uh add entry to the HC hosts file so

1139
00:42:04,079 --> 00:42:06,599
imagine that you are you are container

1140
00:42:06,599 --> 00:42:08,760
or your container needs to talk to a

1141
00:42:08,760 --> 00:42:11,460
example.com and example.com is where it

1142
00:42:11,460 --> 00:42:13,260
gets all the updates from or whatever it

1143
00:42:13,260 --> 00:42:15,480
is now you are going to make a change to

1144
00:42:15,480 --> 00:42:17,220
the Etsy host file which is going to say

1145
00:42:17,220 --> 00:42:18,440
that instead of

1146
00:42:18,440 --> 00:42:20,900
example.com is hosted let's say on

1147
00:42:20,900 --> 00:42:23,099
1.1.1.1 you're going to change your

1148
00:42:23,099 --> 00:42:24,300
let's see host point this is an

1149
00:42:24,300 --> 00:42:27,599
example.com actually refers to 2.2.2.2

1150
00:42:27,599 --> 00:42:28,980
and let's see you are the attacker you

1151
00:42:28,980 --> 00:42:32,339
can control 2.2. every time the

1152
00:42:32,339 --> 00:42:34,200
container is going to make an HTTP

1153
00:42:34,200 --> 00:42:37,079
request example.com because that's the

1154
00:42:37,079 --> 00:42:39,420
host file the DMS has been poisoned it's

1155
00:42:39,420 --> 00:42:42,480
going to make a request to 2.2.2.2 and

1156
00:42:42,480 --> 00:42:45,960
it will be fed my compromised libraries

1157
00:42:45,960 --> 00:42:48,660
or my compromised content or malicious

1158
00:42:48,660 --> 00:42:50,579
content so it's basically what is

1159
00:42:50,579 --> 00:42:52,140
Happening Here

1160
00:42:52,140 --> 00:42:54,480
right so I'm going to delete the

1161
00:42:54,480 --> 00:42:57,079
admission oh sorry the validating

1162
00:42:57,079 --> 00:43:00,480
admission controllers and I'm going to

1163
00:43:00,480 --> 00:43:02,040
deploy

1164
00:43:02,040 --> 00:43:06,720
my mutating admission controllers let's

1165
00:43:06,720 --> 00:43:08,760
deploy my mutating admission controller

1166
00:43:08,760 --> 00:43:11,579
the same process applies you will see

1167
00:43:11,579 --> 00:43:13,800
that there's nothing really different

1168
00:43:13,800 --> 00:43:15,780
here it's just that it's a mutating

1169
00:43:15,780 --> 00:43:18,359
config previously was validating now

1170
00:43:18,359 --> 00:43:20,220
it's a mutating conflict right so

1171
00:43:20,220 --> 00:43:23,220
there's no real difference sorry that's

1172
00:43:23,220 --> 00:43:26,520
the wrong one uh yeah it's just going to

1173
00:43:26,520 --> 00:43:28,440
deploy the same thing and it's going to

1174
00:43:28,440 --> 00:43:29,099
do

1175
00:43:29,099 --> 00:43:32,460
yeah it's the same secret and it has a

1176
00:43:32,460 --> 00:43:34,140
configuration instead of validating the

1177
00:43:34,140 --> 00:43:36,119
community workbook every single time a

1178
00:43:36,119 --> 00:43:37,680
deployment is created or updated that's

1179
00:43:37,680 --> 00:43:40,920
when this mutating Hook is uh triggered

1180
00:43:40,920 --> 00:43:43,440
right so that's basically how it works

1181
00:43:43,440 --> 00:43:46,520
so we have added our deployment object

1182
00:43:46,520 --> 00:43:50,040
uh we're going to add uh

1183
00:43:50,040 --> 00:43:52,740
service object and finally we are going

1184
00:43:52,740 --> 00:43:54,919
to

1185
00:43:55,260 --> 00:43:57,839
all right configuration objects so if

1186
00:43:57,839 --> 00:44:02,400
you do Cube CTL get mutating

1187
00:44:02,400 --> 00:44:06,119
web hook configuration

1188
00:44:06,119 --> 00:44:08,940
you'll see that our mutating webhook has

1189
00:44:08,940 --> 00:44:11,760
been the plug Factory View

1190
00:44:11,760 --> 00:44:13,940
describe

1191
00:44:13,940 --> 00:44:15,920
this particular

1192
00:44:15,920 --> 00:44:19,200
mutating web hook

1193
00:44:19,200 --> 00:44:22,020
you will see that it is working it is

1194
00:44:22,020 --> 00:44:25,220
basically the cable every time a

1195
00:44:25,220 --> 00:44:27,839
deployment is created or updated that's

1196
00:44:27,839 --> 00:44:31,800
when it triggers so it is pretty it's a

1197
00:44:31,800 --> 00:44:34,380
pretty powerful object

1198
00:44:34,380 --> 00:44:37,440
now let's run our nginx part again this

1199
00:44:37,440 --> 00:44:39,060
time it's not going to steal Secrets but

1200
00:44:39,060 --> 00:44:40,260
it's going to do something much more

1201
00:44:40,260 --> 00:44:42,720
dangerous right it's going to tamper

1202
00:44:42,720 --> 00:44:44,700
with the DNS entries of the nginx part

1203
00:44:44,700 --> 00:44:46,680
so I'm going to do this I'm going to

1204
00:44:46,680 --> 00:44:49,920
copy this I'm going to run my nginx part

1205
00:44:49,920 --> 00:44:51,480
we're going to create it as always

1206
00:44:51,480 --> 00:44:53,099
nothing nothing changes from the

1207
00:44:53,099 --> 00:44:56,900
standpoint now let's

1208
00:44:57,180 --> 00:45:02,160
so I'm going to do Cube CPL xdec IP

1209
00:45:02,160 --> 00:45:04,920
nginx and I'm going to actually exec

1210
00:45:04,920 --> 00:45:06,480
into the Container to show you what's

1211
00:45:06,480 --> 00:45:07,800
happening inside that particular

1212
00:45:07,800 --> 00:45:09,300
container right

1213
00:45:09,300 --> 00:45:11,940
been

1214
00:45:11,940 --> 00:45:13,380
I don't know whether there's a bin bash

1215
00:45:13,380 --> 00:45:15,180
in here okay looks like yeah we have it

1216
00:45:15,180 --> 00:45:18,599
all right so now if we look at our Etsy

1217
00:45:18,599 --> 00:45:20,400
hosts file

1218
00:45:20,400 --> 00:45:22,260
you will see that there is a tampered

1219
00:45:22,260 --> 00:45:25,079
entry that has been added in here

1220
00:45:25,079 --> 00:45:28,380
so you see that yeah so whenever you

1221
00:45:28,380 --> 00:45:31,560
want to talk to example.com it says you

1222
00:45:31,560 --> 00:45:33,720
need to make call to this type of

1223
00:45:33,720 --> 00:45:34,920
address this IP address belongs to

1224
00:45:34,920 --> 00:45:37,440
Google uh it's just a google.com right

1225
00:45:37,440 --> 00:45:39,680
google.com uh

1226
00:45:39,680 --> 00:45:42,599
DNS so instead of going to example.com

1227
00:45:42,599 --> 00:45:44,640
so if you look at from my machine if I

1228
00:45:44,640 --> 00:45:47,520
do curl example.com that actually goes

1229
00:45:47,520 --> 00:45:50,819
to the right example.com but if I do

1230
00:45:50,819 --> 00:45:54,000
call example.com from inside here it

1231
00:45:54,000 --> 00:45:56,280
goes to google.com right it goes to

1232
00:45:56,280 --> 00:45:58,680
Google's 404 error page

1233
00:45:58,680 --> 00:46:01,560
of course Google is not very malicious

1234
00:46:01,560 --> 00:46:04,800
but in our case we can literally uh get

1235
00:46:04,800 --> 00:46:07,200
it to address to any host out on the

1236
00:46:07,200 --> 00:46:09,720
open internet and that can be a pretty

1237
00:46:09,720 --> 00:46:12,300
huge uh Bridge because let's say this

1238
00:46:12,300 --> 00:46:15,060
was place where an API that it used to

1239
00:46:15,060 --> 00:46:17,460
call and I can set up my own uh

1240
00:46:17,460 --> 00:46:20,819
dangerous or malicious API and it will

1241
00:46:20,819 --> 00:46:23,160
start talking to my API and basically

1242
00:46:23,160 --> 00:46:24,540
think that yeah this is the legitimate

1243
00:46:24,540 --> 00:46:26,040
API because everything that it's

1244
00:46:26,040 --> 00:46:28,500
supposed to respond on I'm able to get

1245
00:46:28,500 --> 00:46:30,119
the request into Partners partner so

1246
00:46:30,119 --> 00:46:33,420
this can be a huge uh attack Vector if

1247
00:46:33,420 --> 00:46:35,400
not dealt with

1248
00:46:35,400 --> 00:46:38,000
foreign

1249
00:46:40,640 --> 00:46:43,859
like I said a more uh focused attack

1250
00:46:43,859 --> 00:46:47,099
Centric talk that I have on uh admission

1251
00:46:47,099 --> 00:46:48,780
controllers

1252
00:46:48,780 --> 00:46:50,460
um and if you do have any questions I'll

1253
00:46:50,460 --> 00:46:53,400
be happy to take it but otherwise uh I'm

1254
00:46:53,400 --> 00:46:55,440
done with the talk thank you for having

1255
00:46:55,440 --> 00:46:57,240
me and I hope you enjoyed it and I hope

1256
00:46:57,240 --> 00:47:00,020
you found it useful

1257
00:47:01,619 --> 00:47:03,540
thank you everybody for the thought

1258
00:47:03,540 --> 00:47:05,160
um let's wait for a while and see if

1259
00:47:05,160 --> 00:47:08,040
anybody in the chat and Discord has any

1260
00:47:08,040 --> 00:47:09,780
any questions

1261
00:47:09,780 --> 00:47:12,319
so

1262
00:47:36,720 --> 00:47:39,900
okay looks like um we have no questions

1263
00:47:39,900 --> 00:47:43,079
as of now but if you have questions for

1264
00:47:43,079 --> 00:47:45,780
him uh you can put your question in

1265
00:47:45,780 --> 00:47:47,780
Discord and I think uh

1266
00:47:47,780 --> 00:47:51,260
answer your question

1267
00:47:51,859 --> 00:47:54,599
thank you so much and yeah you can reach

1268
00:47:54,599 --> 00:47:56,339
out to me on Twitter or whatever as well

1269
00:47:56,339 --> 00:47:58,140
if you're if you want to ask any

1270
00:47:58,140 --> 00:47:59,760
questions even after the talk happy to

1271
00:47:59,760 --> 00:48:01,500
take any questions that you have thank

1272
00:48:01,500 --> 00:48:03,619
you

