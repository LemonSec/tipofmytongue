1
00:00:00,480 --> 00:00:02,520
okay awesome

2
00:00:02,520 --> 00:00:08,460
so I think we are all set and let's get

3
00:00:08,460 --> 00:00:09,360
started

4
00:00:09,360 --> 00:00:12,540
so good morning everyone we're good to

5
00:00:12,540 --> 00:00:14,759
start right

6
00:00:14,759 --> 00:00:18,000
yeah yeah we can start now

7
00:00:18,000 --> 00:00:19,080
okay

8
00:00:19,080 --> 00:00:21,960
so good morning everyone so today we'll

9
00:00:21,960 --> 00:00:24,420
be talking about security securing

10
00:00:24,420 --> 00:00:27,599
kubernetes deployment at scale I am

11
00:00:27,599 --> 00:00:30,779
sohini Mukherjee and I am a senior

12
00:00:30,779 --> 00:00:34,320
security partner with LinkedIn

13
00:00:34,320 --> 00:00:37,260
so let's get started here's our agenda

14
00:00:37,260 --> 00:00:38,579
for today

15
00:00:38,579 --> 00:00:40,739
we'll talk about the kubernetes

16
00:00:40,739 --> 00:00:42,420
architecture

17
00:00:42,420 --> 00:00:45,840
talk about some attack scenarios

18
00:00:45,840 --> 00:00:49,500
will touch space on how we can secure

19
00:00:49,500 --> 00:00:53,399
kubernetes deployment at scale and we'll

20
00:00:53,399 --> 00:00:56,820
end with the conclusion of course

21
00:00:56,820 --> 00:00:59,879
and before we get started we stand on

22
00:00:59,879 --> 00:01:01,800
the shoulder of giants so the

23
00:01:01,800 --> 00:01:04,440
presentation is based on the knowledge

24
00:01:04,440 --> 00:01:07,680
that I have acquired from my experience

25
00:01:07,680 --> 00:01:10,860
and also based on the many amazing open

26
00:01:10,860 --> 00:01:13,799
source projects in this domain our

27
00:01:13,799 --> 00:01:17,100
opinions are my own and based on my

28
00:01:17,100 --> 00:01:19,680
perception of security

29
00:01:19,680 --> 00:01:23,700
so I have included many uh links in the

30
00:01:23,700 --> 00:01:26,159
course of this presentation in my slide

31
00:01:26,159 --> 00:01:28,799
deck which has helped me a lot when I

32
00:01:28,799 --> 00:01:30,840
got started with learning about

33
00:01:30,840 --> 00:01:33,180
kubernetes in general and kubernetes

34
00:01:33,180 --> 00:01:36,000
security and hopefully it would help you

35
00:01:36,000 --> 00:01:38,280
as well

36
00:01:38,280 --> 00:01:41,159
so what is containerization

37
00:01:41,159 --> 00:01:44,820
so increasing number of Enterprises and

38
00:01:44,820 --> 00:01:47,520
organizations have moved from monolithic

39
00:01:47,520 --> 00:01:50,399
to the microservice architecture for its

40
00:01:50,399 --> 00:01:53,399
Simplicity agility and scalability

41
00:01:53,399 --> 00:01:56,939
have a not all such deployments and

42
00:01:56,939 --> 00:01:59,280
infrastructure were conceptualized

43
00:01:59,280 --> 00:02:02,399
keeping Security in mind right in most

44
00:02:02,399 --> 00:02:04,500
cases I would say security was an

45
00:02:04,500 --> 00:02:08,160
afterthought so this meme uh I would say

46
00:02:08,160 --> 00:02:11,239
fairly depicts the evolution of

47
00:02:11,239 --> 00:02:13,800
containerization Technology

48
00:02:13,800 --> 00:02:16,980
but on a more serious note as more and

49
00:02:16,980 --> 00:02:20,040
more developers deploy containers on

50
00:02:20,040 --> 00:02:23,640
premises and in cloud services uh

51
00:02:23,640 --> 00:02:26,340
critical data could be inadvertently

52
00:02:26,340 --> 00:02:29,459
exposed due to security control failures

53
00:02:29,459 --> 00:02:32,819
common misconfigurations making them an

54
00:02:32,819 --> 00:02:35,900
interesting Target for threat attacks

55
00:02:35,900 --> 00:02:39,180
uh this can be circumvented to some

56
00:02:39,180 --> 00:02:42,540
extent I would say by avoiding common uh

57
00:02:42,540 --> 00:02:45,360
misconfiguration pitfalls and knowing

58
00:02:45,360 --> 00:02:47,760
the possible attack vectors so if you

59
00:02:47,760 --> 00:02:50,400
ask me what is kubernetes I would say

60
00:02:50,400 --> 00:02:52,620
it's a it's a software-defined data

61
00:02:52,620 --> 00:02:56,819
center via container orchestration

62
00:02:56,819 --> 00:03:00,300
but first like how do containerization

63
00:03:00,300 --> 00:03:04,340
differ from virtualization

64
00:03:04,340 --> 00:03:09,300
uh this is a fun screen snapshot that I

65
00:03:09,300 --> 00:03:12,060
found somewhere on the internet and I

66
00:03:12,060 --> 00:03:16,200
think it um it greatly describes how

67
00:03:16,200 --> 00:03:18,540
containerization as a technology is

68
00:03:18,540 --> 00:03:21,300
different from virtualization so I would

69
00:03:21,300 --> 00:03:23,879
let you read through this fun screenshot

70
00:03:23,879 --> 00:03:26,420
but again on a more formal note

71
00:03:26,420 --> 00:03:29,220
containers virtualize and operating

72
00:03:29,220 --> 00:03:32,040
system so that multiple workloads can

73
00:03:32,040 --> 00:03:34,800
run on a single OS instance I mean

74
00:03:34,800 --> 00:03:37,440
sharing the same host kernel space

75
00:03:37,440 --> 00:03:41,459
on the contrary for VMS the hardware is

76
00:03:41,459 --> 00:03:43,200
the one that's virtualized to run

77
00:03:43,200 --> 00:03:45,299
multiple operating system instances

78
00:03:45,299 --> 00:03:47,519
called guest OS and this is done by

79
00:03:47,519 --> 00:03:49,739
something called an hypervisor

80
00:03:49,739 --> 00:03:52,080
so high pricer is basically a layer that

81
00:03:52,080 --> 00:03:55,200
enables multiple operating systems to

82
00:03:55,200 --> 00:03:57,780
run alongside each other sharing the

83
00:03:57,780 --> 00:04:00,659
same physical Computing resources

84
00:04:00,659 --> 00:04:03,780
so containers traditionally don't have

85
00:04:03,780 --> 00:04:06,360
hypervisor and hence are deemed light to

86
00:04:06,360 --> 00:04:10,040
it and a more agile way of handling

87
00:04:10,040 --> 00:04:13,379
virtualization and resource provisioning

88
00:04:13,379 --> 00:04:16,320
however it might be fair to state that

89
00:04:16,320 --> 00:04:19,440
containers are not secure by default you

90
00:04:19,440 --> 00:04:22,440
might need to walk that extra mile to

91
00:04:22,440 --> 00:04:24,780
make sure that the workloads are secure

92
00:04:24,780 --> 00:04:28,500
in a multi-tenant environment

93
00:04:28,500 --> 00:04:31,800
so with that in mind uh let's talk uh

94
00:04:31,800 --> 00:04:33,300
briefly about the kubernetes

95
00:04:33,300 --> 00:04:35,460
architecture

96
00:04:35,460 --> 00:04:38,580
so this Steph picks the client server

97
00:04:38,580 --> 00:04:41,340
architecture that kubernetes is on the

98
00:04:41,340 --> 00:04:43,139
left hand side it's the control plane

99
00:04:43,139 --> 00:04:45,360
the master node and on the right hand

100
00:04:45,360 --> 00:04:48,020
side it's it's the worker nodes

101
00:04:48,020 --> 00:04:51,660
supports are the smallest unit of

102
00:04:51,660 --> 00:04:54,720
compute in the kubernetes world and I

103
00:04:54,720 --> 00:04:56,940
might be using pots and containers

104
00:04:56,940 --> 00:04:58,500
interchangeably throughout this

105
00:04:58,500 --> 00:04:59,900
presentations

106
00:04:59,900 --> 00:05:03,240
notes on the other hand can be bare

107
00:05:03,240 --> 00:05:06,180
metal or virtual machine that stages the

108
00:05:06,180 --> 00:05:08,639
containers I mean including the cube lid

109
00:05:08,639 --> 00:05:11,460
the cube proxy and runtime

110
00:05:11,460 --> 00:05:14,160
so that's like the formal representation

111
00:05:14,160 --> 00:05:18,479
of the architecture but I am a fan of

112
00:05:18,479 --> 00:05:21,600
cartoon guide and memes so I will

113
00:05:21,600 --> 00:05:24,720
piggyback on some fun cartoons that I

114
00:05:24,720 --> 00:05:27,300
found online while I talk about the

115
00:05:27,300 --> 00:05:28,919
different components of the control

116
00:05:28,919 --> 00:05:31,740
plane and worker nodes

117
00:05:31,740 --> 00:05:35,479
so control plane to begin with

118
00:05:35,580 --> 00:05:39,720
um the cube API server so it's it's

119
00:05:39,720 --> 00:05:41,759
basically the front end of the cluster

120
00:05:41,759 --> 00:05:45,000
it's the central management entity that

121
00:05:45,000 --> 00:05:48,060
receives all API requests all rest API

122
00:05:48,060 --> 00:05:51,320
request to make changes to pod Services

123
00:05:51,320 --> 00:05:55,020
replication sets Etc

124
00:05:55,020 --> 00:05:57,660
to controller manager so it basically

125
00:05:57,660 --> 00:06:00,419
runs a number of controller processes in

126
00:06:00,419 --> 00:06:02,940
the background for example replication

127
00:06:02,940 --> 00:06:05,400
controller controls number of replicas

128
00:06:05,400 --> 00:06:08,160
in a pod endpoints controller popular

129
00:06:08,160 --> 00:06:10,560
standpoint objects like services and

130
00:06:10,560 --> 00:06:12,720
parts so on and so forth basically to

131
00:06:12,720 --> 00:06:15,900
regulate the shared state of the cluster

132
00:06:15,900 --> 00:06:18,680
and a cloud controller manager it's it's

133
00:06:18,680 --> 00:06:22,680
responsible for managing uh the same the

134
00:06:22,680 --> 00:06:24,960
controller processes with the

135
00:06:24,960 --> 00:06:28,139
dependencies on on the underlying cloud

136
00:06:28,139 --> 00:06:30,240
provider

137
00:06:30,240 --> 00:06:33,240
a cube scheduler uh as the name suggests

138
00:06:33,240 --> 00:06:35,759
is responsible for scheduling the pots

139
00:06:35,759 --> 00:06:38,039
on various notes based on resource

140
00:06:38,039 --> 00:06:40,319
utilization

141
00:06:40,319 --> 00:06:43,560
and last but not the least the hcd which

142
00:06:43,560 --> 00:06:46,319
is basically a journal if you will it's

143
00:06:46,319 --> 00:06:48,720
it's a distributed key value storage

144
00:06:48,720 --> 00:06:51,060
which is used to store the kubernetes

145
00:06:51,060 --> 00:06:53,580
clustered data and and configuration

146
00:06:53,580 --> 00:06:56,460
details such as number of PODS their

147
00:06:56,460 --> 00:06:59,940
state namespace so on and so forth

148
00:06:59,940 --> 00:07:02,460
now let's talk a bit about the worker

149
00:07:02,460 --> 00:07:03,479
nodes

150
00:07:03,479 --> 00:07:06,860
uh the cubelet uh it's it's responsible

151
00:07:06,860 --> 00:07:10,380
to to periodically take in New Or

152
00:07:10,380 --> 00:07:13,380
modified bot specifications

153
00:07:13,380 --> 00:07:15,720
um through the cube API server and

154
00:07:15,720 --> 00:07:18,419
ensuring that the pods are healthy and

155
00:07:18,419 --> 00:07:21,180
running in the desired state

156
00:07:21,180 --> 00:07:26,419
proxy is uh uh is a is a proxy service

157
00:07:26,419 --> 00:07:29,639
that runs on each worker node and

158
00:07:29,639 --> 00:07:31,680
performs request forwarding to the

159
00:07:31,680 --> 00:07:33,419
correct Parts

160
00:07:33,419 --> 00:07:36,360
um across the various isolated networks

161
00:07:36,360 --> 00:07:38,699
in a cluster

162
00:07:38,699 --> 00:07:41,880
the container runtime is actually a low

163
00:07:41,880 --> 00:07:44,240
level component of the container engine

164
00:07:44,240 --> 00:07:47,819
that mounts the container and works with

165
00:07:47,819 --> 00:07:50,880
the underlying operating system kernel

166
00:07:50,880 --> 00:07:52,259
to start and support the

167
00:07:52,259 --> 00:07:56,099
containerization process now

168
00:07:56,099 --> 00:07:59,099
with that that's as much context that I

169
00:07:59,099 --> 00:08:02,360
believe we would need to talk more about

170
00:08:02,360 --> 00:08:06,259
some attack scenarios

171
00:08:06,259 --> 00:08:07,979
okay

172
00:08:07,979 --> 00:08:11,520
so crypto Mining and crypto jacking

173
00:08:11,520 --> 00:08:14,400
remains one of the most popular attacks

174
00:08:14,400 --> 00:08:16,080
in the container and container

175
00:08:16,080 --> 00:08:18,840
orchestration world the primary

176
00:08:18,840 --> 00:08:21,419
objective being to hog Computing

177
00:08:21,419 --> 00:08:22,860
resources

178
00:08:22,860 --> 00:08:26,460
now an attacker can get a foothold on a

179
00:08:26,460 --> 00:08:29,220
pod or a node and eventually compromise

180
00:08:29,220 --> 00:08:32,700
the entire cluster by various method you

181
00:08:32,700 --> 00:08:35,039
know so for example breaking out of a

182
00:08:35,039 --> 00:08:37,200
container via an exploit like remote

183
00:08:37,200 --> 00:08:39,958
code execution I mean any vulnerability

184
00:08:39,958 --> 00:08:42,779
that allows the attacker to modify the

185
00:08:42,779 --> 00:08:45,360
kernel data structure can lead to a

186
00:08:45,360 --> 00:08:48,600
breakout scenario or say if a attacker

187
00:08:48,600 --> 00:08:51,660
can get hold of login credentials of an

188
00:08:51,660 --> 00:08:54,600
user of an admin who has access to a

189
00:08:54,600 --> 00:08:55,519
node

190
00:08:55,519 --> 00:08:58,440
and even better if an attacker can

191
00:08:58,440 --> 00:09:01,500
compromise a privileged container

192
00:09:01,500 --> 00:09:04,019
so let's talk a bit about the devil

193
00:09:04,019 --> 00:09:07,200
called over proficient container

194
00:09:07,200 --> 00:09:10,019
privileged containers have ability to

195
00:09:10,019 --> 00:09:13,019
mount the entire slash Dev tree

196
00:09:13,019 --> 00:09:15,899
privileged containers can insert a

197
00:09:15,899 --> 00:09:18,420
module into the running kernel and has

198
00:09:18,420 --> 00:09:20,760
access to all root capabilities

199
00:09:20,760 --> 00:09:23,880
sounds a bit scary right

200
00:09:23,880 --> 00:09:26,220
um host Network containers that is like

201
00:09:26,220 --> 00:09:28,800
containers which has host networks such

202
00:09:28,800 --> 00:09:30,899
as true in their pod security policies

203
00:09:30,899 --> 00:09:32,580
and and we'll discuss about the Pod

204
00:09:32,580 --> 00:09:35,600
security policies in the subsequent

205
00:09:35,600 --> 00:09:39,600
subsequent slides uh those containers

206
00:09:39,600 --> 00:09:42,779
use the nodes network name space and

207
00:09:42,779 --> 00:09:45,060
which basically allows container to

208
00:09:45,060 --> 00:09:47,160
impersonate the node from a network

209
00:09:47,160 --> 00:09:48,660
perspective

210
00:09:48,660 --> 00:09:51,300
like such a container can can for

211
00:09:51,300 --> 00:09:53,820
example bypass Cube to IMS protection

212
00:09:53,820 --> 00:09:57,660
since q2im intersects request

213
00:09:57,660 --> 00:10:00,000
um from the ports to the Metallica

214
00:10:00,000 --> 00:10:02,279
server and just to set some context Cube

215
00:10:02,279 --> 00:10:05,339
to IM is is very popular in the cloud

216
00:10:05,339 --> 00:10:08,399
native world and is used to define IM

217
00:10:08,399 --> 00:10:11,100
roles for pots and thereby enforce

218
00:10:11,100 --> 00:10:13,320
fine-grained Access Control at the Pod

219
00:10:13,320 --> 00:10:15,420
level

220
00:10:15,420 --> 00:10:19,019
so with that let's talk about our first

221
00:10:19,019 --> 00:10:23,279
container Escape scenario based on Linux

222
00:10:23,279 --> 00:10:24,860
workloads

223
00:10:24,860 --> 00:10:28,080
uh now this is obviously publicly

224
00:10:28,080 --> 00:10:32,100
available attack scenarios and because

225
00:10:32,100 --> 00:10:34,500
that's as much I can share in this

226
00:10:34,500 --> 00:10:37,800
presentation but be rest assured this

227
00:10:37,800 --> 00:10:41,220
are you know like uh Model Behavior

228
00:10:41,220 --> 00:10:43,860
patterns of you know real world attacks

229
00:10:43,860 --> 00:10:48,060
that we see in uh Enterprises and and

230
00:10:48,060 --> 00:10:51,600
other uh engineering organizations as

231
00:10:51,600 --> 00:10:52,440
well

232
00:10:52,440 --> 00:10:55,380
so if you want to follow along the

233
00:10:55,380 --> 00:10:57,660
diagram that's that's here and this is

234
00:10:57,660 --> 00:10:58,940
one of the

235
00:10:58,940 --> 00:11:02,480
attacks that was observed by Trent micro

236
00:11:02,480 --> 00:11:06,180
in their Honeypot environment

237
00:11:06,180 --> 00:11:09,420
so what happens here is a network

238
00:11:09,420 --> 00:11:12,720
scanner called Z grab controlled by the

239
00:11:12,720 --> 00:11:13,980
attackers

240
00:11:13,980 --> 00:11:16,920
scans for containers in the wild with

241
00:11:16,920 --> 00:11:19,800
exposed API server exposed Cube API

242
00:11:19,800 --> 00:11:23,040
servers so once such a misconfiguration

243
00:11:23,040 --> 00:11:25,860
is detected the API using the create

244
00:11:25,860 --> 00:11:28,380
command pulls a malicious container

245
00:11:28,380 --> 00:11:30,440
image from its registry

246
00:11:30,440 --> 00:11:34,800
now one of the options used as a

247
00:11:34,800 --> 00:11:36,959
deployment parameter is privileged

248
00:11:36,959 --> 00:11:38,940
because it's a requirement for this

249
00:11:38,940 --> 00:11:41,040
specific Escape technique

250
00:11:41,040 --> 00:11:43,380
now if you're following along the the

251
00:11:43,380 --> 00:11:45,120
attack

252
00:11:45,120 --> 00:11:46,160
um

253
00:11:46,160 --> 00:11:49,680
flow diagram here I mean the attacker's

254
00:11:49,680 --> 00:11:52,260
entry point is the shell script called

255
00:11:52,260 --> 00:11:56,100
com.sh now com.sh now drops in a

256
00:11:56,100 --> 00:11:59,100
secondary shell script called CMD which

257
00:11:59,100 --> 00:12:01,140
has all the coded

258
00:12:01,140 --> 00:12:04,320
malicious binary that is involved to to

259
00:12:04,320 --> 00:12:07,320
execute this this particular attack now

260
00:12:07,320 --> 00:12:11,160
com.sh will will also call

261
00:12:11,160 --> 00:12:14,640
an uh an app a fake app called nginx

262
00:12:14,640 --> 00:12:17,940
which is the crypto cryptocurrency Miner

263
00:12:17,940 --> 00:12:20,100
in in this scenario

264
00:12:20,100 --> 00:12:23,220
so the attacker innocuously named this

265
00:12:23,220 --> 00:12:27,480
as nginx which is a popular HTTP server

266
00:12:27,480 --> 00:12:31,320
as well to evade detection and fly under

267
00:12:31,320 --> 00:12:33,240
the radar and pass off as something

268
00:12:33,240 --> 00:12:35,899
legitimate

269
00:12:35,899 --> 00:12:40,200
uh with that let's talk about our second

270
00:12:40,200 --> 00:12:44,940
tax scenario and uh this is silos k

271
00:12:44,940 --> 00:12:48,000
so siloscope is a heavily obscated

272
00:12:48,000 --> 00:12:50,399
malware that actively attempts to

273
00:12:50,399 --> 00:12:53,820
exploit in Windows Server containers in

274
00:12:53,820 --> 00:12:55,860
the Wind

275
00:12:55,860 --> 00:12:58,860
um this malware can Leverage The

276
00:12:58,860 --> 00:13:01,079
Computing resources in a kubernetes

277
00:13:01,079 --> 00:13:03,540
cluster for crypto jacking and it

278
00:13:03,540 --> 00:13:04,980
doesn't stop there I mean it can

279
00:13:04,980 --> 00:13:07,620
potentially exfiltrate sensitive data

280
00:13:07,620 --> 00:13:10,019
from all the applications that's running

281
00:13:10,019 --> 00:13:12,720
in compromised clusters

282
00:13:12,720 --> 00:13:15,839
so a little bit of background on how

283
00:13:15,839 --> 00:13:18,420
Microsoft implements isolation in its

284
00:13:18,420 --> 00:13:21,240
container technology because Linux

285
00:13:21,240 --> 00:13:24,060
workloads in in containerization is

286
00:13:24,060 --> 00:13:26,100
common but I'm pretty sure you wouldn't

287
00:13:26,100 --> 00:13:28,260
have heard about too many windows

288
00:13:28,260 --> 00:13:32,220
workloads running on on containers

289
00:13:32,220 --> 00:13:35,459
so Microsoft developed two solutions for

290
00:13:35,459 --> 00:13:38,279
running Windows based containers the

291
00:13:38,279 --> 00:13:40,860
first one is running each container

292
00:13:40,860 --> 00:13:43,139
inside a virtual machine based on

293
00:13:43,139 --> 00:13:45,000
hypervisor technology

294
00:13:45,000 --> 00:13:46,920
the second one and this is the

295
00:13:46,920 --> 00:13:49,740
interesting one here in this context is

296
00:13:49,740 --> 00:13:52,800
Windows Server containers which rely on

297
00:13:52,800 --> 00:13:56,220
Windows kernel features such as Silo

298
00:13:56,220 --> 00:13:59,040
objects to set up containers

299
00:13:59,040 --> 00:14:02,279
now this resembles our traditional Linux

300
00:14:02,279 --> 00:14:05,100
implementation for containers where

301
00:14:05,100 --> 00:14:07,860
processes are run on the same kernel

302
00:14:07,860 --> 00:14:10,620
with logical mechanisms like c groups

303
00:14:10,620 --> 00:14:13,620
and namespaces that enforce isolation

304
00:14:13,620 --> 00:14:15,000
between

305
00:14:15,000 --> 00:14:17,279
processes that's that's running on the

306
00:14:17,279 --> 00:14:19,320
same host kernel space

307
00:14:19,320 --> 00:14:21,839
now here's an interesting disclaimer

308
00:14:21,839 --> 00:14:24,420
from Microsoft so quote unquote

309
00:14:24,420 --> 00:14:27,300
Microsoft states that Windows Server

310
00:14:27,300 --> 00:14:30,240
containers provide a reasonably High

311
00:14:30,240 --> 00:14:32,760
degree of isolation between workloads

312
00:14:32,760 --> 00:14:35,639
but are not meant to protect against

313
00:14:35,639 --> 00:14:39,300
hostile workloads hypervisor containers

314
00:14:39,300 --> 00:14:42,180
are our solution as in Microsoft

315
00:14:42,180 --> 00:14:45,980
solution for hostile multi-tenancy

316
00:14:45,980 --> 00:14:48,600
but that being said hypervisor

317
00:14:48,600 --> 00:14:50,940
technology comes with a lot of

318
00:14:50,940 --> 00:14:54,060
performance impact and it's not like a

319
00:14:54,060 --> 00:14:56,760
top top favorite for for most

320
00:14:56,760 --> 00:14:59,160
Enterprises right

321
00:14:59,160 --> 00:15:02,339
so to understand the semantics of this

322
00:15:02,339 --> 00:15:04,620
attack or deeper understanding of

323
00:15:04,620 --> 00:15:07,139
Windows kernel internals and symbolic

324
00:15:07,139 --> 00:15:10,500
links is required which is really beyond

325
00:15:10,500 --> 00:15:12,120
the scope of this presentation

326
00:15:12,120 --> 00:15:14,639
considering the time we have and a lot

327
00:15:14,639 --> 00:15:16,440
many items that I need to talk about

328
00:15:16,440 --> 00:15:19,560
today but I have shared some links that

329
00:15:19,560 --> 00:15:22,139
you can read up and get more details if

330
00:15:22,139 --> 00:15:24,480
you are curious about it

331
00:15:24,480 --> 00:15:27,180
we will briefly talk about something

332
00:15:27,180 --> 00:15:30,300
called an object manager symbolic link

333
00:15:30,300 --> 00:15:32,699
in this context now there are other

334
00:15:32,699 --> 00:15:34,800
symbolic links as well which is again

335
00:15:34,800 --> 00:15:37,380
out of scope of this discussion

336
00:15:37,380 --> 00:15:40,260
but coming back to our context

337
00:15:40,260 --> 00:15:43,500
um uh the attacker creates a symbolic

338
00:15:43,500 --> 00:15:46,760
link for the host C drive

339
00:15:46,760 --> 00:15:50,880
and uh it gains TCB as interested

340
00:15:50,880 --> 00:15:54,300
Computing these privileges by doing dll

341
00:15:54,300 --> 00:15:56,579
injection to a special process in

342
00:15:56,579 --> 00:16:00,180
Windows containers called C exec SVC

343
00:16:00,180 --> 00:16:02,040
now what is the interesting part about

344
00:16:02,040 --> 00:16:05,100
this process is this is in charge of

345
00:16:05,100 --> 00:16:07,579
many aspects of the container execution

346
00:16:07,579 --> 00:16:10,380
including communication between the host

347
00:16:10,380 --> 00:16:12,120
and the container

348
00:16:12,120 --> 00:16:15,480
it also has TCB privileges so if a

349
00:16:15,480 --> 00:16:18,120
container process can execute code in

350
00:16:18,120 --> 00:16:19,740
the context of this particular process

351
00:16:19,740 --> 00:16:22,860
inside this this process it would run

352
00:16:22,860 --> 00:16:24,899
with the TCB privileges that the

353
00:16:24,899 --> 00:16:26,519
attacker needs to break out of the

354
00:16:26,519 --> 00:16:27,839
container

355
00:16:27,839 --> 00:16:31,620
and once that happens the attacker can

356
00:16:31,620 --> 00:16:33,839
can tweak certain aspects of the

357
00:16:33,839 --> 00:16:36,959
internal kernels to make the symbolic

358
00:16:36,959 --> 00:16:39,779
link Global and at that point the docker

359
00:16:39,779 --> 00:16:42,240
can access files on the host file system

360
00:16:42,240 --> 00:16:44,399
because a breakout has happened

361
00:16:44,399 --> 00:16:46,800
successfully

362
00:16:46,800 --> 00:16:51,420
uh with that context let's see how this

363
00:16:51,420 --> 00:16:54,300
exploit unfolds again this is an awesome

364
00:16:54,300 --> 00:16:58,019
research by a gentleman from Palo Alto

365
00:16:58,019 --> 00:17:00,839
networks and you can follow along the

366
00:17:00,839 --> 00:17:03,300
the attack flow that we have in in this

367
00:17:03,300 --> 00:17:05,339
diagram

368
00:17:05,339 --> 00:17:07,859
so the attacker achieves remote code

369
00:17:07,859 --> 00:17:10,439
execution through

370
00:17:10,439 --> 00:17:13,280
um I mean inside a Windows container

371
00:17:13,280 --> 00:17:15,839
using a known vulnerability or a

372
00:17:15,839 --> 00:17:18,780
vulnerable page or database and then

373
00:17:18,780 --> 00:17:21,720
opens backdoor to this misconfigured

374
00:17:21,720 --> 00:17:23,939
kubernetes clusters with the primary

375
00:17:23,939 --> 00:17:28,400
objective of running crypto jackers

376
00:17:28,679 --> 00:17:30,540
um now let's see what are some of the

377
00:17:30,540 --> 00:17:33,240
ttps as in like tactics techniques and

378
00:17:33,240 --> 00:17:36,600
procedures associated with this attack

379
00:17:36,600 --> 00:17:39,539
so it targets web servers for initial

380
00:17:39,539 --> 00:17:42,900
access using known vulnerabilities as we

381
00:17:42,900 --> 00:17:46,559
had just just talked about right and

382
00:17:46,559 --> 00:17:48,720
then it uses Windows container Escape

383
00:17:48,720 --> 00:17:52,020
techniques we talked in in line with the

384
00:17:52,020 --> 00:17:56,460
process C exec dot is is we see uh and

385
00:17:56,460 --> 00:17:58,799
and dll injection through it to escape

386
00:17:58,799 --> 00:18:01,380
the container and gain a code execution

387
00:18:01,380 --> 00:18:04,700
on the underlying node

388
00:18:05,940 --> 00:18:08,220
um and it creates a global symbolic link

389
00:18:08,220 --> 00:18:10,320
to the host and at that point the

390
00:18:10,320 --> 00:18:13,620
containerized X Drive is is practically

391
00:18:13,620 --> 00:18:15,960
linked to the host C drive and that's

392
00:18:15,960 --> 00:18:20,039
how a container Escape is is achieved

393
00:18:20,039 --> 00:18:22,380
um at that point the attacker when when

394
00:18:22,380 --> 00:18:24,900
the attacker has has

395
00:18:24,900 --> 00:18:27,419
been successful to break into the host

396
00:18:27,419 --> 00:18:30,179
kernel space would attempt to abuse the

397
00:18:30,179 --> 00:18:32,280
nodes credentials to spread into the

398
00:18:32,280 --> 00:18:33,360
cluster

399
00:18:33,360 --> 00:18:36,660
of course it connects to its CNC server

400
00:18:36,660 --> 00:18:39,840
over the torn Network and Dot onion

401
00:18:39,840 --> 00:18:42,120
domain and waits for further commands

402
00:18:42,120 --> 00:18:45,240
from its CNC server

403
00:18:45,240 --> 00:18:46,440
okay

404
00:18:46,440 --> 00:18:49,919
so let's see uh we talked about couple

405
00:18:49,919 --> 00:18:54,919
of attack uh scenarios but how would we

406
00:18:54,919 --> 00:18:58,799
structure such attack scenarios so that

407
00:18:58,799 --> 00:19:00,720
we can configure guardrails or

408
00:19:00,720 --> 00:19:03,299
detections in an Enterprise environment

409
00:19:03,299 --> 00:19:05,640
and this is a good reference that

410
00:19:05,640 --> 00:19:08,400
Microsoft had come up with with in terms

411
00:19:08,400 --> 00:19:10,919
of a threat Matrix or an attack metrics

412
00:19:10,919 --> 00:19:13,919
where you know such such attack vectors

413
00:19:13,919 --> 00:19:16,620
are categorized from initial access to

414
00:19:16,620 --> 00:19:19,500
execution to persistence to lateral

415
00:19:19,500 --> 00:19:22,200
movement and the eventual impact that it

416
00:19:22,200 --> 00:19:23,100
has

417
00:19:23,100 --> 00:19:26,220
and a more and transition to a more

418
00:19:26,220 --> 00:19:29,100
formal miter attack framework which is

419
00:19:29,100 --> 00:19:31,500
specially attuned towards containers and

420
00:19:31,500 --> 00:19:34,140
container orchestration platform

421
00:19:34,140 --> 00:19:36,780
so we briefly talked about escaping to

422
00:19:36,780 --> 00:19:40,220
host uh in in the privilege escalation

423
00:19:40,220 --> 00:19:43,200
domain that we talked in in in the

424
00:19:43,200 --> 00:19:45,780
couple of attack scenarios in in terms

425
00:19:45,780 --> 00:19:50,418
of Linux workloads and windows workloads

426
00:19:51,000 --> 00:19:53,960
so how can we secure such kubernetes

427
00:19:53,960 --> 00:19:58,580
deployments and hopefully at scale

428
00:19:59,520 --> 00:20:02,460
um so uh kubernetes was historically

429
00:20:02,460 --> 00:20:05,640
designed to be highly portable right and

430
00:20:05,640 --> 00:20:08,039
as in users can easily migrate their

431
00:20:08,039 --> 00:20:10,380
workloads across various installations

432
00:20:10,380 --> 00:20:14,880
like bare metal on-prem public cloud

433
00:20:14,880 --> 00:20:17,280
I mean what that means is like the

434
00:20:17,280 --> 00:20:20,160
deployment is highly customizable and

435
00:20:20,160 --> 00:20:23,480
you know users can turn on certain

436
00:20:23,480 --> 00:20:26,160
configurations to secure that cluster

437
00:20:26,160 --> 00:20:30,299
but that does require deep knowledge or

438
00:20:30,299 --> 00:20:32,820
reasonable amount of knowledge of the

439
00:20:32,820 --> 00:20:35,280
potential attack vectors and the threat

440
00:20:35,280 --> 00:20:37,440
landscape that certain poor

441
00:20:37,440 --> 00:20:40,140
configuration might lead to

442
00:20:40,140 --> 00:20:43,080
so let's talk about certain best best

443
00:20:43,080 --> 00:20:45,900
practices that are recommended and in

444
00:20:45,900 --> 00:20:48,600
terms of securing kubernetes host

445
00:20:48,600 --> 00:20:51,539
so hardening the underlying host by

446
00:20:51,539 --> 00:20:53,580
installing the latest version of

447
00:20:53,580 --> 00:20:55,980
operating system I mean clearly a

448
00:20:55,980 --> 00:20:57,780
no-brainer

449
00:20:57,780 --> 00:21:00,360
a very uh streamlined patch management

450
00:21:00,360 --> 00:21:03,840
and configuration management system is

451
00:21:03,840 --> 00:21:06,960
also very imperative in I would say uh

452
00:21:06,960 --> 00:21:09,840
improving the security posture of of the

453
00:21:09,840 --> 00:21:11,220
cluster

454
00:21:11,220 --> 00:21:13,380
for example running the latest version

455
00:21:13,380 --> 00:21:16,919
of kubernetes right uh because as I

456
00:21:16,919 --> 00:21:18,720
mentioned like a lot of these

457
00:21:18,720 --> 00:21:22,260
Technologies pair conceptual is not

458
00:21:22,260 --> 00:21:24,840
necessarily keeping Security in mind

459
00:21:24,840 --> 00:21:27,840
right and as the threat landscape has

460
00:21:27,840 --> 00:21:31,100
evolved over the years right so now

461
00:21:31,100 --> 00:21:34,380
developers of the Frameworks are trying

462
00:21:34,380 --> 00:21:36,480
their best to make sure that you know

463
00:21:36,480 --> 00:21:39,299
certain attack vectors can be minimized

464
00:21:39,299 --> 00:21:42,120
with respect to the to the most recent

465
00:21:42,120 --> 00:21:45,480
updates right so as users as responsible

466
00:21:45,480 --> 00:21:49,559
customers I mean clients uh end users I

467
00:21:49,559 --> 00:21:52,080
mean we would try our best to make sure

468
00:21:52,080 --> 00:21:55,020
we are using the latest version of of

469
00:21:55,020 --> 00:21:57,179
the software and operating system that's

470
00:21:57,179 --> 00:22:00,059
available pretty rudimentary right

471
00:22:00,059 --> 00:22:03,480
uh not that as easy to implement in a

472
00:22:03,480 --> 00:22:07,200
large-scale Enterprise environment too

473
00:22:07,200 --> 00:22:09,000
um that being said let's talk about

474
00:22:09,000 --> 00:22:12,500
control plane security

475
00:22:13,080 --> 00:22:15,000
um it is recommended to configure

476
00:22:15,000 --> 00:22:18,179
authentication and authorization on the

477
00:22:18,179 --> 00:22:20,580
cluster and cluster nodes to deny

478
00:22:20,580 --> 00:22:23,700
unauthorized access attempts

479
00:22:23,700 --> 00:22:26,159
um like Network should be well segmented

480
00:22:26,159 --> 00:22:28,620
and network access to Ports for the

481
00:22:28,620 --> 00:22:30,480
control pen components should be

482
00:22:30,480 --> 00:22:32,460
strictly restricted

483
00:22:32,460 --> 00:22:35,340
and why is CSO is like say for example

484
00:22:35,340 --> 00:22:37,440
hcd I mean it's it's a critical

485
00:22:37,440 --> 00:22:39,659
kubernetes component which stores

486
00:22:39,659 --> 00:22:43,740
information on cluster state right so

487
00:22:43,740 --> 00:22:46,740
right access to the hcd is equivalent to

488
00:22:46,740 --> 00:22:48,960
gaining root on the entire cluster and

489
00:22:48,960 --> 00:22:52,100
even read access can be used to escalate

490
00:22:52,100 --> 00:22:57,299
Scarlet privileges uh fairly easily

491
00:22:57,299 --> 00:22:59,520
now let's talk about the

492
00:22:59,520 --> 00:23:02,400
kubernetes API server the kubernetes

493
00:23:02,400 --> 00:23:05,640
platform is controlled using API request

494
00:23:05,640 --> 00:23:07,620
and it's basically the first line of

495
00:23:07,620 --> 00:23:10,200
defense against attackers so controlling

496
00:23:10,200 --> 00:23:12,840
who has access and what actions they are

497
00:23:12,840 --> 00:23:15,600
allowed to perform is is extremely

498
00:23:15,600 --> 00:23:18,000
critical

499
00:23:18,000 --> 00:23:20,520
I'm talking about kubernetes components

500
00:23:20,520 --> 00:23:23,580
like denying or restricting SSH access

501
00:23:23,580 --> 00:23:26,700
to to kubernetes nodes significantly

502
00:23:26,700 --> 00:23:30,240
reduce uh the risk for unauthorized

503
00:23:30,240 --> 00:23:33,720
access to the host resource instead you

504
00:23:33,720 --> 00:23:35,880
know guidance should be provided to use

505
00:23:35,880 --> 00:23:38,400
cubecutive commands which will provide

506
00:23:38,400 --> 00:23:40,200
direct access to the container

507
00:23:40,200 --> 00:23:42,480
environment without the ability to

508
00:23:42,480 --> 00:23:45,200
access the host

509
00:23:45,200 --> 00:23:49,440
uh controlling or restricting access to

510
00:23:49,440 --> 00:23:51,840
cubelet so cubelets expose https

511
00:23:51,840 --> 00:23:54,299
endpoints which Grant powerful control

512
00:23:54,299 --> 00:23:57,240
over the node and containers and should

513
00:23:57,240 --> 00:24:00,419
be strictly monitored and and access

514
00:24:00,419 --> 00:24:03,240
controlled as well

515
00:24:03,240 --> 00:24:05,940
Mutual TLS so mutual TLS should be

516
00:24:05,940 --> 00:24:08,100
configured to to encrypt in cluster

517
00:24:08,100 --> 00:24:10,919
communication now you might argue that

518
00:24:10,919 --> 00:24:13,260
you know why would you need to encrypt

519
00:24:13,260 --> 00:24:16,140
traffic within a cluster I mean we need

520
00:24:16,140 --> 00:24:18,539
to take a note that we are referring to

521
00:24:18,539 --> 00:24:21,539
hostile multi-tenancy here and it is

522
00:24:21,539 --> 00:24:24,919
still very much relevant

523
00:24:25,200 --> 00:24:27,960
so shifting gears and and let's see how

524
00:24:27,960 --> 00:24:30,600
we can secure uh kubernetes deployment

525
00:24:30,600 --> 00:24:34,679
at the build deploy or runtime phase and

526
00:24:34,679 --> 00:24:36,960
starting with image management

527
00:24:36,960 --> 00:24:39,000
so what what's a container image it's

528
00:24:39,000 --> 00:24:42,260
it's an immutable lightweight Standalone

529
00:24:42,260 --> 00:24:44,580
executable it's it's a package of

530
00:24:44,580 --> 00:24:46,860
software per se right which includes

531
00:24:46,860 --> 00:24:49,039
everything needed to run an application

532
00:24:49,039 --> 00:24:52,799
code runtime system tool system

533
00:24:52,799 --> 00:24:55,559
libraries so if you ask me what's what's

534
00:24:55,559 --> 00:24:58,080
the risk here the risk is profound it's

535
00:24:58,080 --> 00:25:00,419
it's it's running untrusted code in your

536
00:25:00,419 --> 00:25:01,940
cluster

537
00:25:01,940 --> 00:25:04,919
so the best practice is container images

538
00:25:04,919 --> 00:25:07,980
must be built using approved and signed

539
00:25:07,980 --> 00:25:10,620
secure based images that is scanned and

540
00:25:10,620 --> 00:25:12,480
monitored periodically at regular

541
00:25:12,480 --> 00:25:15,780
intervals to ensure that only secure and

542
00:25:15,780 --> 00:25:17,640
authentic images are used in your

543
00:25:17,640 --> 00:25:21,480
cluster or there should be a central

544
00:25:21,480 --> 00:25:24,900
repository or or artifactory where base

545
00:25:24,900 --> 00:25:27,120
images are maintained and there should

546
00:25:27,120 --> 00:25:29,520
be a deployment pipeline that is

547
00:25:29,520 --> 00:25:30,539
controlled

548
00:25:30,539 --> 00:25:34,260
even for uh development environment it

549
00:25:34,260 --> 00:25:36,840
is dangerous to let users download and

550
00:25:36,840 --> 00:25:40,320
run random images from unknown sources I

551
00:25:40,320 --> 00:25:42,600
mean an unknown image can be subject to

552
00:25:42,600 --> 00:25:45,480
supply chain kind of attack and due to

553
00:25:45,480 --> 00:25:47,400
some malicious third-party libraries

554
00:25:47,400 --> 00:25:49,919
being injected in a seemingly benign

555
00:25:49,919 --> 00:25:51,419
image

556
00:25:51,419 --> 00:25:54,600
so the best practice recommendation is

557
00:25:54,600 --> 00:25:57,480
to use minimal base image and avoid

558
00:25:57,480 --> 00:25:59,480
unnecessary packages

559
00:25:59,480 --> 00:26:03,179
because distillers images contains less

560
00:26:03,179 --> 00:26:05,580
packages compared to other images and

561
00:26:05,580 --> 00:26:09,419
significantly reduces the attack surface

562
00:26:09,419 --> 00:26:13,080
so tldr scan images in your CI CD

563
00:26:13,080 --> 00:26:16,080
pipeline there are tools like systic

564
00:26:16,080 --> 00:26:18,480
sync that will check for vulnerabilities

565
00:26:18,480 --> 00:26:21,659
common misconfigurations hard-coded

566
00:26:21,659 --> 00:26:23,820
Secrets Etc

567
00:26:23,820 --> 00:26:26,220
now talking about hard-coded Secrets I

568
00:26:26,220 --> 00:26:28,620
mean I I can probably go on and on on

569
00:26:28,620 --> 00:26:32,400
how secret management is relevant in any

570
00:26:32,400 --> 00:26:35,039
Enterprise environment and and how tough

571
00:26:35,039 --> 00:26:37,860
it is to to enforce good secret

572
00:26:37,860 --> 00:26:40,380
management practices but to keep things

573
00:26:40,380 --> 00:26:43,620
short in this context in kubernetes

574
00:26:43,620 --> 00:26:45,779
context I mean there shouldn't be any

575
00:26:45,779 --> 00:26:50,100
hard-coded secrets in in config and the

576
00:26:50,100 --> 00:26:52,799
the best practice should be you know uh

577
00:26:52,799 --> 00:26:54,900
secret should be mounted into read-only

578
00:26:54,900 --> 00:26:58,559
volumes in containers or even best if it

579
00:26:58,559 --> 00:27:01,620
can be fetched at runtime from something

580
00:27:01,620 --> 00:27:04,320
like KMS a key management solution or

581
00:27:04,320 --> 00:27:05,460
vault

582
00:27:05,460 --> 00:27:08,220
and we should also scan container file

583
00:27:08,220 --> 00:27:11,340
systems for for Secrets like API tokens

584
00:27:11,340 --> 00:27:14,400
passwords and keys because such Secrets

585
00:27:14,400 --> 00:27:18,059
would be accessible to any user or or

586
00:27:18,059 --> 00:27:20,820
service and that have access to

587
00:27:20,820 --> 00:27:22,980
non-encrypted container file system

588
00:27:22,980 --> 00:27:26,400
whether during build or runtime any is

589
00:27:26,400 --> 00:27:29,520
encrypt cigarettes at rest

590
00:27:29,520 --> 00:27:32,940
now talking about our back uh configure

591
00:27:32,940 --> 00:27:35,960
least privilege I mean it's a profound

592
00:27:35,960 --> 00:27:38,940
importance I would say but how do you

593
00:27:38,940 --> 00:27:40,980
ensure that least privileged access

594
00:27:40,980 --> 00:27:43,860
control is is enforced I mean who can

595
00:27:43,860 --> 00:27:46,200
access the cluster and what permission

596
00:27:46,200 --> 00:27:49,679
do they have so kubernetes have

597
00:27:49,679 --> 00:27:53,520
um several parameters like role cluster

598
00:27:53,520 --> 00:27:56,520
role role binding cluster role binding

599
00:27:56,520 --> 00:27:59,940
which can be leveraged to to enforce

600
00:27:59,940 --> 00:28:02,520
list privilege Access Control via our

601
00:28:02,520 --> 00:28:05,820
back uh for example a role is used to

602
00:28:05,820 --> 00:28:08,460
define a role within a namespace on the

603
00:28:08,460 --> 00:28:10,620
contrary crusted cluster role defines

604
00:28:10,620 --> 00:28:13,799
cell role across a cluster across all

605
00:28:13,799 --> 00:28:17,400
name spaces uh for example a cluster

606
00:28:17,400 --> 00:28:21,000
admin might might need view create

607
00:28:21,000 --> 00:28:23,720
update or delete deployments

608
00:28:23,720 --> 00:28:28,020
capabilities to do his day job right but

609
00:28:28,020 --> 00:28:31,260
a certain user might just need a view or

610
00:28:31,260 --> 00:28:33,900
List pod capabilities within a certain

611
00:28:33,900 --> 00:28:35,220
namespace

612
00:28:35,220 --> 00:28:39,179
so uh the bottom line here is uh the

613
00:28:39,179 --> 00:28:41,400
best practice is to assign permissions

614
00:28:41,400 --> 00:28:43,380
at the name skills level wherever

615
00:28:43,380 --> 00:28:46,200
possible I mean use role bindings as

616
00:28:46,200 --> 00:28:48,419
opposed to the cluster role bindings to

617
00:28:48,419 --> 00:28:50,400
give user rights to the same specific

618
00:28:50,400 --> 00:28:51,960
namespace

619
00:28:51,960 --> 00:28:55,380
I mean a strong uh our back system is

620
00:28:55,380 --> 00:28:57,120
arguably one of the most critical

621
00:28:57,120 --> 00:28:58,919
requirements in large engineering

622
00:28:58,919 --> 00:29:02,340
organizations since you know even the

623
00:29:02,340 --> 00:29:04,740
most secure system can be compromised by

624
00:29:04,740 --> 00:29:08,279
our privileged users so again tldr

625
00:29:08,279 --> 00:29:11,039
restrict privilege users to lease

626
00:29:11,039 --> 00:29:13,080
privileges necessary to perform job

627
00:29:13,080 --> 00:29:16,559
responsibilities and access to systems

628
00:29:16,559 --> 00:29:20,240
are configured to deny all by default

629
00:29:20,240 --> 00:29:22,320
now let's talk a little bit about

630
00:29:22,320 --> 00:29:26,520
Network policies so by default any bot

631
00:29:26,520 --> 00:29:29,580
can talk to any bot within a cluster

632
00:29:29,580 --> 00:29:31,799
however if you think about it a

633
00:29:31,799 --> 00:29:34,559
front-end pod for example might only

634
00:29:34,559 --> 00:29:37,860
need to talk to a backend pod and has no

635
00:29:37,860 --> 00:29:40,200
business need to be able to communicate

636
00:29:40,200 --> 00:29:43,320
to a storage pod so Network segmentation

637
00:29:43,320 --> 00:29:46,200
policies are a key security control that

638
00:29:46,200 --> 00:29:48,360
can prevent lateral movement across

639
00:29:48,360 --> 00:29:51,419
containers in the event like for example

640
00:29:51,419 --> 00:29:53,820
in in attack scenarios we discussed

641
00:29:53,820 --> 00:29:57,500
where an attacker has successfully

642
00:29:57,500 --> 00:30:00,059
escaped and and containered the bounce

643
00:30:00,059 --> 00:30:04,440
of a container and uh and jumped into

644
00:30:04,440 --> 00:30:07,500
the host kernel space so it does help in

645
00:30:07,500 --> 00:30:10,919
in minimizing the blast radius

646
00:30:10,919 --> 00:30:12,899
now one of the challenges in kubernetes

647
00:30:12,899 --> 00:30:14,940
deployment is creating Network

648
00:30:14,940 --> 00:30:17,600
segmentation between pods and services

649
00:30:17,600 --> 00:30:20,039
and this is challenged due to the

650
00:30:20,039 --> 00:30:22,279
dynamic nature of container Network

651
00:30:22,279 --> 00:30:25,679
identities as in eyepiece but there are

652
00:30:25,679 --> 00:30:29,159
plugins like Calico and celium that can

653
00:30:29,159 --> 00:30:30,899
be leveraged to implement Network

654
00:30:30,899 --> 00:30:34,559
policies across the cluster

655
00:30:34,559 --> 00:30:37,380
um service mesh like it still can be

656
00:30:37,380 --> 00:30:39,480
deployed to achieve such a segmentation

657
00:30:39,480 --> 00:30:43,380
at a service or application or platform

658
00:30:43,380 --> 00:30:44,279
level

659
00:30:44,279 --> 00:30:48,120
so the bottom line Network policy and or

660
00:30:48,120 --> 00:30:51,299
service mesh can be used to define or

661
00:30:51,299 --> 00:30:53,760
restrict communication rules between

662
00:30:53,760 --> 00:30:55,799
ports

663
00:30:55,799 --> 00:30:58,220
uh let's talk about bot security

664
00:30:58,220 --> 00:31:02,340
policies so Port security policies in a

665
00:31:02,340 --> 00:31:04,559
nutshell it defines how a body is

666
00:31:04,559 --> 00:31:07,140
allowed to run and let's talk about a

667
00:31:07,140 --> 00:31:09,360
couple of best practices with respect to

668
00:31:09,360 --> 00:31:12,620
part security policies

669
00:31:12,960 --> 00:31:15,299
um so privileged containers should be

670
00:31:15,299 --> 00:31:17,520
disallowed I mean as you might have

671
00:31:17,520 --> 00:31:20,159
figured out by now I have a special

672
00:31:20,159 --> 00:31:22,980
dislike towards privileged containers

673
00:31:22,980 --> 00:31:27,000
so setting a container to privileged uh

674
00:31:27,000 --> 00:31:29,159
settings privileged mode within

675
00:31:29,159 --> 00:31:31,679
kubernetes or allowing privileged

676
00:31:31,679 --> 00:31:35,220
escalation enables a container to access

677
00:31:35,220 --> 00:31:38,279
kernel capabilities of of the host right

678
00:31:38,279 --> 00:31:41,399
and that itself is is scary enough in

679
00:31:41,399 --> 00:31:43,320
terms of the attack vectors that we

680
00:31:43,320 --> 00:31:45,240
briefly discussed about

681
00:31:45,240 --> 00:31:48,000
so privileged containers are dangerous

682
00:31:48,000 --> 00:31:50,760
as they bypass many of the built-in

683
00:31:50,760 --> 00:31:55,020
container isolation mechanisms

684
00:31:55,020 --> 00:31:57,419
in the same line

685
00:31:57,419 --> 00:32:00,600
um application processes should not run

686
00:32:00,600 --> 00:32:03,179
as root I mean running the process

687
00:32:03,179 --> 00:32:06,179
inside a container as the root user is a

688
00:32:06,179 --> 00:32:08,340
common misconfiguration that I have

689
00:32:08,340 --> 00:32:10,620
noticed in in many deployments in many

690
00:32:10,620 --> 00:32:11,720
clusters

691
00:32:11,720 --> 00:32:14,399
while root may be an absolute

692
00:32:14,399 --> 00:32:17,100
requirement in some scenarios for

693
00:32:17,100 --> 00:32:19,500
example infrastructure level workloads

694
00:32:19,500 --> 00:32:22,200
it shouldn't be the non-deffective I

695
00:32:22,200 --> 00:32:24,600
mean if the container was compromised by

696
00:32:24,600 --> 00:32:27,899
say a remote code execution the attacker

697
00:32:27,899 --> 00:32:30,480
would have readily available root level

698
00:32:30,480 --> 00:32:33,600
privileges on a platter presented to him

699
00:32:33,600 --> 00:32:36,000
and you know from there on the attacker

700
00:32:36,000 --> 00:32:38,340
can do anything he wants across the

701
00:32:38,340 --> 00:32:41,039
cluster right

702
00:32:41,039 --> 00:32:42,059
um

703
00:32:42,059 --> 00:32:44,399
um I would Zoom through the usage of

704
00:32:44,399 --> 00:32:47,159
host known namespaces host networking

705
00:32:47,159 --> 00:32:50,820
and pods in the interest of time uh

706
00:32:50,820 --> 00:32:54,899
usage of host file system but let's talk

707
00:32:54,899 --> 00:32:58,279
briefly about the the importance of

708
00:32:58,279 --> 00:33:02,220
enforcing a read-only root file system

709
00:33:02,220 --> 00:33:05,520
so uh in order to limit the impact of a

710
00:33:05,520 --> 00:33:07,620
compromised container on a kubernetes

711
00:33:07,620 --> 00:33:09,899
node it is recommended to utilize

712
00:33:09,899 --> 00:33:12,539
feed-only file systems whenever possible

713
00:33:12,539 --> 00:33:15,360
I mean this just prevents a malicious

714
00:33:15,360 --> 00:33:17,760
process or application from writing to

715
00:33:17,760 --> 00:33:19,919
the host host system

716
00:33:19,919 --> 00:33:22,440
so read-only file systems are a key

717
00:33:22,440 --> 00:33:25,019
component to preventing uh container

718
00:33:25,019 --> 00:33:27,299
breakouts like the examples couple of

719
00:33:27,299 --> 00:33:30,059
examples that we just discussed

720
00:33:30,059 --> 00:33:32,700
and last but not the least uh do

721
00:33:32,700 --> 00:33:35,880
leverage Linux capabilities like uh SEC

722
00:33:35,880 --> 00:33:39,179
comp aparma or isilinence so for example

723
00:33:39,179 --> 00:33:41,279
a second can be used to restrict

724
00:33:41,279 --> 00:33:45,360
containers syscalls right now app armor

725
00:33:45,360 --> 00:33:48,059
is a is a Linux kernel security module

726
00:33:48,059 --> 00:33:50,039
that restricts capabilities of an

727
00:33:50,039 --> 00:33:52,140
application like network access or

728
00:33:52,140 --> 00:33:54,299
socket access Etc

729
00:33:54,299 --> 00:33:57,539
now essay Linux it's it's pretty complex

730
00:33:57,539 --> 00:33:59,760
with steep learning curve it's not so

731
00:33:59,760 --> 00:34:02,179
easy to implement in an Enterprise

732
00:34:02,179 --> 00:34:06,059
but in a nutshell AC Linux defines the

733
00:34:06,059 --> 00:34:08,219
access and transition rights of every

734
00:34:08,219 --> 00:34:10,800
user's application process and it's

735
00:34:10,800 --> 00:34:13,800
totally worth you know exploring how far

736
00:34:13,800 --> 00:34:16,460
you can Implement AC Linux in your

737
00:34:16,460 --> 00:34:20,339
Enterprise deployment

738
00:34:20,339 --> 00:34:23,099
so a quick example of what security

739
00:34:23,099 --> 00:34:25,800
policies now also but although Port

740
00:34:25,800 --> 00:34:28,440
security policies are being deprecated

741
00:34:28,440 --> 00:34:31,020
and and they are making way for Port

742
00:34:31,020 --> 00:34:33,659
security standards but there are still

743
00:34:33,659 --> 00:34:36,960
you know profound applications of Port

744
00:34:36,960 --> 00:34:38,820
security policies across many

745
00:34:38,820 --> 00:34:41,580
organizations at this point of time as

746
00:34:41,580 --> 00:34:42,659
we speak

747
00:34:42,659 --> 00:34:45,418
so on the left hand side you can see a

748
00:34:45,418 --> 00:34:47,940
restrictive pod security policies where

749
00:34:47,940 --> 00:34:50,099
you know the privileged flag is set as

750
00:34:50,099 --> 00:34:52,440
false they allow privileges calcium set

751
00:34:52,440 --> 00:34:55,020
as false the host network is also false

752
00:34:55,020 --> 00:34:58,020
and the contrary a permissive PHP has

753
00:34:58,020 --> 00:35:01,800
all such Flex it as true now as I as I

754
00:35:01,800 --> 00:35:03,599
mentioned I mean there might be absolute

755
00:35:03,599 --> 00:35:06,359
need to have permissive what security

756
00:35:06,359 --> 00:35:09,180
policies for certain infrastructure

757
00:35:09,180 --> 00:35:11,760
level workloads but it definitely

758
00:35:11,760 --> 00:35:15,480
shouldn't be the practice de facto

759
00:35:15,480 --> 00:35:16,500
foreign

760
00:35:16,500 --> 00:35:18,720
so we talked about certain guardrails

761
00:35:18,720 --> 00:35:21,660
right which can be used to uh to improve

762
00:35:21,660 --> 00:35:23,520
the security posture of kubernetes

763
00:35:23,520 --> 00:35:27,240
deployment but how do we implement this

764
00:35:27,240 --> 00:35:29,160
at scale

765
00:35:29,160 --> 00:35:32,940
so Opa or open policy agent is uh open

766
00:35:32,940 --> 00:35:35,880
source policy enforcement tool which was

767
00:35:35,880 --> 00:35:39,240
introduced in 2016

768
00:35:39,240 --> 00:35:43,680
um to create a unified method per se of

769
00:35:43,680 --> 00:35:46,560
enforcing security policy across Center

770
00:35:46,560 --> 00:35:49,140
a step

771
00:35:49,140 --> 00:35:52,200
um and it can be implemented effectively

772
00:35:52,200 --> 00:35:54,839
for kubernetes admission control

773
00:35:54,839 --> 00:35:57,420
and what I mean by that is we we discuss

774
00:35:57,420 --> 00:36:00,660
certain policies right so like um

775
00:36:00,660 --> 00:36:03,480
ensuring that all Container images are

776
00:36:03,480 --> 00:36:06,480
signed and from trusted sources or our

777
00:36:06,480 --> 00:36:11,180
pods are not run as root or are as

778
00:36:11,180 --> 00:36:14,160
disallowed to have privilege escalation

779
00:36:14,160 --> 00:36:17,339
so all these policies can be built via

780
00:36:17,339 --> 00:36:21,900
Opa and enforced across the cluster

781
00:36:21,900 --> 00:36:24,780
so being integrates directly with the

782
00:36:24,780 --> 00:36:27,900
kubernetes API server and the way you

783
00:36:27,900 --> 00:36:30,000
can use it is it can be implemented

784
00:36:30,000 --> 00:36:32,280
early in the development life cycle in

785
00:36:32,280 --> 00:36:36,119
the CI CD pipeline or or run ad hoc

786
00:36:36,119 --> 00:36:39,060
periodically to monitored compliance of

787
00:36:39,060 --> 00:36:42,540
your cluster uh

788
00:36:42,540 --> 00:36:46,619
um at certain certain snapshots of time

789
00:36:46,619 --> 00:36:49,140
now op can also be used to regulate

790
00:36:49,140 --> 00:36:51,980
service mesh architecture for example

791
00:36:51,980 --> 00:36:55,260
implementing policies in service mesh to

792
00:36:55,260 --> 00:36:58,079
to limit lateral movement like the one

793
00:36:58,079 --> 00:37:01,320
we had discussed previously

794
00:37:01,320 --> 00:37:03,200
foreign

795
00:37:03,200 --> 00:37:06,780
s right so even after our attempt to

796
00:37:06,780 --> 00:37:09,300
implement certain guardrails

797
00:37:09,300 --> 00:37:11,460
um Things fall through right I mean

798
00:37:11,460 --> 00:37:13,020
there's still

799
00:37:13,020 --> 00:37:15,540
things which go wrong are there are

800
00:37:15,540 --> 00:37:17,339
compromise scenarios

801
00:37:17,339 --> 00:37:21,900
so we should have the visibility to be

802
00:37:21,900 --> 00:37:25,740
able to alert the security team in case

803
00:37:25,740 --> 00:37:28,740
things go wrong right and how that can

804
00:37:28,740 --> 00:37:32,280
be done is you know parsing Linux kernel

805
00:37:32,280 --> 00:37:35,160
system calls at runtime and which can be

806
00:37:35,160 --> 00:37:37,920
used as a source of Truth for example

807
00:37:37,920 --> 00:37:42,420
you can use your your ebpf logs to be

808
00:37:42,420 --> 00:37:46,140
able to to monitor certain system calls

809
00:37:46,140 --> 00:37:50,460
like one in the line of execv can can

810
00:37:50,460 --> 00:37:53,460
help you monitor scenarios when a shell

811
00:37:53,460 --> 00:37:56,460
is run inside a container or even worse

812
00:37:56,460 --> 00:37:58,740
if a reverse shell connection is

813
00:37:58,740 --> 00:38:00,480
detected

814
00:38:00,480 --> 00:38:02,880
see a container mounts a sensitive path

815
00:38:02,880 --> 00:38:06,599
from the host such as slash proc or a

816
00:38:06,599 --> 00:38:09,900
sensitive file like etsy's Shadow is

817
00:38:09,900 --> 00:38:12,480
unexpectedly red in a running container

818
00:38:12,480 --> 00:38:15,660
and this our behavioral detections I

819
00:38:15,660 --> 00:38:18,480
would say that has never been seen in

820
00:38:18,480 --> 00:38:19,760
your

821
00:38:19,760 --> 00:38:22,200
kubernetes cluster deployments or

822
00:38:22,200 --> 00:38:25,140
container environment previously

823
00:38:25,140 --> 00:38:28,140
it's a standard system binary like LS or

824
00:38:28,140 --> 00:38:30,420
Ps is making an outbound network

825
00:38:30,420 --> 00:38:31,800
connection

826
00:38:31,800 --> 00:38:35,099
our process is spawning an unexpected

827
00:38:35,099 --> 00:38:38,640
child process for example a Java process

828
00:38:38,640 --> 00:38:41,820
is spawning a shell and you know there's

829
00:38:41,820 --> 00:38:45,119
there's no legitimate reason uh for it

830
00:38:45,119 --> 00:38:48,599
to do so and and you know it has hasn't

831
00:38:48,599 --> 00:38:50,940
been part of your Baseline behavior in

832
00:38:50,940 --> 00:38:53,280
your container environment

833
00:38:53,280 --> 00:38:55,859
or any first seen privilege process is

834
00:38:55,859 --> 00:38:58,440
spawn it it can be used for any any

835
00:38:58,440 --> 00:39:00,240
proactive threat hunting in your

836
00:39:00,240 --> 00:39:02,640
kubernetes cluster environment

837
00:39:02,640 --> 00:39:05,579
or or just like track unexpected system

838
00:39:05,579 --> 00:39:07,500
calls that can lead to privileged

839
00:39:07,500 --> 00:39:09,119
escalation and these are more in the

840
00:39:09,119 --> 00:39:11,640
line of proactive threat hunting

841
00:39:11,640 --> 00:39:14,280
so again the tldr the bottom line here

842
00:39:14,280 --> 00:39:17,160
is do you know your environment well

843
00:39:17,160 --> 00:39:19,920
enough or do you have enough visibility

844
00:39:19,920 --> 00:39:22,320
in terms of logs that you're ingesting

845
00:39:22,320 --> 00:39:26,099
from your kubernetes cluster so what is

846
00:39:26,099 --> 00:39:28,619
the Baseline behavior in in your

847
00:39:28,619 --> 00:39:30,839
deployment and anything that's beyond

848
00:39:30,839 --> 00:39:34,440
the Baseline Behavior categorizes as an

849
00:39:34,440 --> 00:39:36,839
outlier right it's it's an anomaly not

850
00:39:36,839 --> 00:39:38,880
necessarily malicious but gives you

851
00:39:38,880 --> 00:39:41,400
enough subset of information to look

852
00:39:41,400 --> 00:39:44,820
deeper into the rapid hole and be

853
00:39:44,820 --> 00:39:46,740
proactively able to detect some

854
00:39:46,740 --> 00:39:49,140
compromise scenarios

855
00:39:49,140 --> 00:39:52,320
so there are tools like um Falco from

856
00:39:52,320 --> 00:39:55,859
cystic which which can be used along

857
00:39:55,859 --> 00:40:00,000
this lines and be able to to you know uh

858
00:40:00,000 --> 00:40:02,760
deploy such detection rules in your

859
00:40:02,760 --> 00:40:05,300
ecosystem

860
00:40:05,579 --> 00:40:08,460
so kubernetes is complex right I mean it

861
00:40:08,460 --> 00:40:10,800
presents a significantly steep learning

862
00:40:10,800 --> 00:40:13,140
curve I would say to deploy a cluster

863
00:40:13,140 --> 00:40:16,320
it's not necessarily secure by default

864
00:40:16,320 --> 00:40:19,800
if I may say so it can be subject to

865
00:40:19,800 --> 00:40:22,380
Loosely configured clusters and some

866
00:40:22,380 --> 00:40:26,160
common misconfigurations and security is

867
00:40:26,160 --> 00:40:28,619
hard right I mean a bad guy can have

868
00:40:28,619 --> 00:40:31,140
thousand chances to infiltrate an

869
00:40:31,140 --> 00:40:34,320
infrastructure and need to get it right

870
00:40:34,320 --> 00:40:38,099
just one time however the Defenders need

871
00:40:38,099 --> 00:40:40,980
to get it right every single time at

872
00:40:40,980 --> 00:40:42,480
multiple levels

873
00:40:42,480 --> 00:40:46,140
so if I ask you how would you respond to

874
00:40:46,140 --> 00:40:48,359
a question like how secure are you today

875
00:40:48,359 --> 00:40:51,720
on a scale of 1 to 10. and this might be

876
00:40:51,720 --> 00:40:54,000
a very subjective answer right I mean

877
00:40:54,000 --> 00:40:56,839
depending on your perception of security

878
00:40:56,839 --> 00:41:00,240
uh your threat landscape threat modeling

879
00:41:00,240 --> 00:41:01,920
so on and so forth

880
00:41:01,920 --> 00:41:05,339
however from my experience a data-driven

881
00:41:05,339 --> 00:41:08,339
approach helps right so can we ask

882
00:41:08,339 --> 00:41:10,980
ourselves do we have enough data or

883
00:41:10,980 --> 00:41:13,320
visibility to answer my previous

884
00:41:13,320 --> 00:41:16,619
question that how secure are are we

885
00:41:16,619 --> 00:41:19,619
and there's importance of both pre-fill

886
00:41:19,619 --> 00:41:22,800
and post fill and by prefill I mean you

887
00:41:22,800 --> 00:41:24,839
know threat modeling your infrastructure

888
00:41:24,839 --> 00:41:27,240
threat modeling each component of your

889
00:41:27,240 --> 00:41:30,240
ecosystem right and post well indicates

890
00:41:30,240 --> 00:41:32,760
you know whether we have the security

891
00:41:32,760 --> 00:41:35,640
logging and visibility and whether the

892
00:41:35,640 --> 00:41:37,440
data makes sense whether we have enough

893
00:41:37,440 --> 00:41:40,200
data sets to be able to proactively

894
00:41:40,200 --> 00:41:42,720
Monitor and detect any compromise

895
00:41:42,720 --> 00:41:46,500
scenario in our kubernetes cluster

896
00:41:46,500 --> 00:41:49,320
so basically a defense in-depth approach

897
00:41:49,320 --> 00:41:52,140
helps in in software they say don't

898
00:41:52,140 --> 00:41:54,720
repeat yourself use use libraries right

899
00:41:54,720 --> 00:41:57,300
but it's it's quite different for for

900
00:41:57,300 --> 00:42:00,660
security I mean we be redundant I mean

901
00:42:00,660 --> 00:42:03,900
apply security at multiple layers so a

902
00:42:03,900 --> 00:42:06,060
defense in depth approach I would

903
00:42:06,060 --> 00:42:09,420
believe is truly imperative in securing

904
00:42:09,420 --> 00:42:12,780
a kubernetes cluster as it is true for

905
00:42:12,780 --> 00:42:16,020
security in general

906
00:42:16,020 --> 00:42:20,579
uh these are some of uh the open source

907
00:42:20,579 --> 00:42:23,579
projects and CIS Benchmark that helped

908
00:42:23,579 --> 00:42:26,099
me a lot when I got started with

909
00:42:26,099 --> 00:42:29,339
learning about kubernetes and containers

910
00:42:29,339 --> 00:42:32,280
and kubernetes Security in general and

911
00:42:32,280 --> 00:42:34,980
hopefully it would be helpful for you as

912
00:42:34,980 --> 00:42:36,720
well

913
00:42:36,720 --> 00:42:40,619
uh so I guess that's as much uh time I

914
00:42:40,619 --> 00:42:43,619
had for today uh please feel free to

915
00:42:43,619 --> 00:42:47,160
connect with me on LinkedIn or or tutor

916
00:42:47,160 --> 00:42:50,400
and we can have more more discussion

917
00:42:50,400 --> 00:42:52,980
about any any questions or any thoughts

918
00:42:52,980 --> 00:42:55,859
that you might have had about my

919
00:42:55,859 --> 00:42:58,700
presentation today

