1
00:00:01,920 --> 00:00:05,339
okay so welcome everyone thank you so

2
00:00:05,339 --> 00:00:07,140
much for attending this session

3
00:00:07,140 --> 00:00:09,420
today we are gonna talk about pawning

4
00:00:09,420 --> 00:00:11,880
Android apps at scale and in this

5
00:00:11,880 --> 00:00:13,440
research we exploited multiple

6
00:00:13,440 --> 00:00:15,599
vulnerabilities in the back-end Services

7
00:00:15,599 --> 00:00:17,400
which are powering these Android

8
00:00:17,400 --> 00:00:19,199
applications

9
00:00:19,199 --> 00:00:21,480
uh but before I get into the actual

10
00:00:21,480 --> 00:00:23,460
research in the findings I want to give

11
00:00:23,460 --> 00:00:25,380
you a little background about how we

12
00:00:25,380 --> 00:00:27,180
reach these findings

13
00:00:27,180 --> 00:00:29,939
so it all started with a project that

14
00:00:29,939 --> 00:00:31,740
we've been doing it's called be Visual

15
00:00:31,740 --> 00:00:34,380
and be visual is a APK scanner but it's

16
00:00:34,380 --> 00:00:36,840
not a regular APK scanner the whole

17
00:00:36,840 --> 00:00:40,260
theme of be visual is to scan an APK not

18
00:00:40,260 --> 00:00:42,480
from a vipd point of view but rather

19
00:00:42,480 --> 00:00:45,000
scan the APK from the data collection

20
00:00:45,000 --> 00:00:46,739
and indexing point of view

21
00:00:46,739 --> 00:00:49,260
so with that I would like to start this

22
00:00:49,260 --> 00:00:50,579
talk uh

23
00:00:50,579 --> 00:00:53,280
I'm sparsh and today I have Shashank

24
00:00:53,280 --> 00:00:55,020
with me we have both security

25
00:00:55,020 --> 00:00:58,399
researchers at cloudsec we are part of

26
00:00:58,399 --> 00:01:03,199
the r d team of clouds like ASM product

27
00:01:04,080 --> 00:01:06,180
and these will be the things that we are

28
00:01:06,180 --> 00:01:08,460
going to cover today we will start with

29
00:01:08,460 --> 00:01:10,320
what was the motivation behind this

30
00:01:10,320 --> 00:01:11,100
project

31
00:01:11,100 --> 00:01:13,439
and then we'll understand the problems

32
00:01:13,439 --> 00:01:14,820
that we saw with the current mobile

33
00:01:14,820 --> 00:01:18,119
ecosystem and after that we'll have a

34
00:01:18,119 --> 00:01:19,920
look at what we did our Innovation that

35
00:01:19,920 --> 00:01:22,140
is the B widget and after that we'll

36
00:01:22,140 --> 00:01:24,960
have a overview of the inventory uh the

37
00:01:24,960 --> 00:01:26,759
data we have indexed so far

38
00:01:26,759 --> 00:01:28,740
and after that Shashank will take you

39
00:01:28,740 --> 00:01:30,119
through the research and the findings

40
00:01:30,119 --> 00:01:32,640
and we are also launching an open source

41
00:01:32,640 --> 00:01:35,040
tool today for the community by which

42
00:01:35,040 --> 00:01:36,900
you can have access to the data we have

43
00:01:36,900 --> 00:01:39,000
in our inventory

44
00:01:39,000 --> 00:01:40,740
and then hopefully we'll be having some

45
00:01:40,740 --> 00:01:43,820
time for the Q a

46
00:01:46,140 --> 00:01:48,119
so internet-wide data Gathering and

47
00:01:48,119 --> 00:01:50,820
scanning we as a security Community have

48
00:01:50,820 --> 00:01:52,860
been doing internet-wide data Gathering

49
00:01:52,860 --> 00:01:54,840
and scanning for a while now we are not

50
00:01:54,840 --> 00:01:57,899
the first one to do so we have multiple

51
00:01:57,899 --> 00:02:00,240
popular projects in this category and I

52
00:02:00,240 --> 00:02:01,619
think these four which I have mentioned

53
00:02:01,619 --> 00:02:04,680
in the slides are are very well known so

54
00:02:04,680 --> 00:02:06,960
we all know showed and Showdown is a

55
00:02:06,960 --> 00:02:08,639
powerful search engine for Internet

56
00:02:08,639 --> 00:02:11,220
connected devices and the most awesome

57
00:02:11,220 --> 00:02:13,500
thing about Showdown are The Showdown

58
00:02:13,500 --> 00:02:15,720
filters so using The Showdown filters

59
00:02:15,720 --> 00:02:17,940
you can correlate an IP to a SSL

60
00:02:17,940 --> 00:02:21,239
certificate or you can map a specific

61
00:02:21,239 --> 00:02:23,879
kind of service across the internet so

62
00:02:23,879 --> 00:02:27,840
it's very cool and we also have projects

63
00:02:27,840 --> 00:02:31,260
for now by rapid 7 so they also scan the

64
00:02:31,260 --> 00:02:33,239
internet for a particular service and

65
00:02:33,239 --> 00:02:35,459
after that they used to post this data

66
00:02:35,459 --> 00:02:38,780
online for the community

67
00:02:38,940 --> 00:02:41,840
foreign

68
00:02:50,730 --> 00:02:53,850
[Music]

69
00:03:15,980 --> 00:03:18,659
Ty collects so much data from the

70
00:03:18,659 --> 00:03:20,459
internet so we do so in order to

71
00:03:20,459 --> 00:03:22,260
identify widespread vulnerabilities and

72
00:03:22,260 --> 00:03:24,120
Patch them before the before the bad

73
00:03:24,120 --> 00:03:26,459
guys exploit them and here you can see

74
00:03:26,459 --> 00:03:28,500
while we have a lot of uh tools which

75
00:03:28,500 --> 00:03:30,239
are collecting the data from networks or

76
00:03:30,239 --> 00:03:31,500
which are collecting the data of web

77
00:03:31,500 --> 00:03:34,080
application but when it comes to mobile

78
00:03:34,080 --> 00:03:35,879
applications we are not really doing

79
00:03:35,879 --> 00:03:37,620
much of the data collection there so

80
00:03:37,620 --> 00:03:42,319
that motivated us for this research

81
00:03:43,200 --> 00:03:45,480
uh now let's understand the problems

82
00:03:45,480 --> 00:03:46,799
that we saw with the current mobile

83
00:03:46,799 --> 00:03:49,500
ecosystem so the number one and the

84
00:03:49,500 --> 00:03:51,239
biggest problem we saw is the huge

85
00:03:51,239 --> 00:03:53,340
amount of Android applications which are

86
00:03:53,340 --> 00:03:55,739
out there so according to our research

87
00:03:55,739 --> 00:03:57,780
we have more than 14 million Android

88
00:03:57,780 --> 00:04:00,480
applications spread across 80 plus app

89
00:04:00,480 --> 00:04:02,879
stores and growing every day

90
00:04:02,879 --> 00:04:05,700
we also have startups and I'm talking

91
00:04:05,700 --> 00:04:08,340
about unicorn startups we have startups

92
00:04:08,340 --> 00:04:10,920
which are mobile app only so mobile app

93
00:04:10,920 --> 00:04:15,000
only I mean these startups uh offer most

94
00:04:15,000 --> 00:04:16,440
of their functionality through a mobile

95
00:04:16,440 --> 00:04:18,418
app they don't have a web interface at

96
00:04:18,418 --> 00:04:19,079
all

97
00:04:19,079 --> 00:04:21,238
so we have a lot of vendor applications

98
00:04:21,238 --> 00:04:23,280
and most of these and Android

99
00:04:23,280 --> 00:04:24,660
applications never pass through a

100
00:04:24,660 --> 00:04:26,820
security test so whatever assets or

101
00:04:26,820 --> 00:04:28,440
Secrets they are hiding in the source

102
00:04:28,440 --> 00:04:31,620
code they left and left it and that

103
00:04:31,620 --> 00:04:33,840
brings me to the problem number two

104
00:04:33,840 --> 00:04:36,180
which is we all know Android apps are

105
00:04:36,180 --> 00:04:37,800
notorious for

106
00:04:37,800 --> 00:04:40,520
hard-coded assets and secrets

107
00:04:40,520 --> 00:04:42,900
we have in the source code we have

108
00:04:42,900 --> 00:04:45,180
hard-coded asset hardcoded secrets we

109
00:04:45,180 --> 00:04:48,060
have URLs endpoints parameters file

110
00:04:48,060 --> 00:04:50,220
names Cloud assets which are further

111
00:04:50,220 --> 00:04:53,100
prone to more misconfigurations so these

112
00:04:53,100 --> 00:04:55,440
all assets are there and if you multiply

113
00:04:55,440 --> 00:04:57,419
the assets that we get from one Android

114
00:04:57,419 --> 00:04:59,940
application to the total number of

115
00:04:59,940 --> 00:05:01,860
Android applications that we have the

116
00:05:01,860 --> 00:05:06,000
resulting data is insane so these two

117
00:05:06,000 --> 00:05:07,919
problems that we saw and another problem

118
00:05:07,919 --> 00:05:10,080
we saw was The Limited availability of

119
00:05:10,080 --> 00:05:11,759
comprehensive data sets and

120
00:05:11,759 --> 00:05:13,979
investigative tools so like you have

121
00:05:13,979 --> 00:05:15,960
showed and where you can correlate the

122
00:05:15,960 --> 00:05:18,300
data of networks right so let's say you

123
00:05:18,300 --> 00:05:21,120
found a vulnerability in a in a library

124
00:05:21,120 --> 00:05:22,620
which is very popular among Android

125
00:05:22,620 --> 00:05:24,960
developers and now you want to see how

126
00:05:24,960 --> 00:05:26,759
many Android applications are out there

127
00:05:26,759 --> 00:05:30,060
which are actually vulnerable to uh this

128
00:05:30,060 --> 00:05:32,280
finding so you literally have no way to

129
00:05:32,280 --> 00:05:34,199
figure out that in order to figure out

130
00:05:34,199 --> 00:05:35,520
that you have to download all the

131
00:05:35,520 --> 00:05:37,740
applications you have to decompile them

132
00:05:37,740 --> 00:05:39,660
and after that you have to search in the

133
00:05:39,660 --> 00:05:41,039
source code for that particular Library

134
00:05:41,039 --> 00:05:44,280
which is not very feasible so these were

135
00:05:44,280 --> 00:05:47,479
some of the problems that we saw and

136
00:05:47,479 --> 00:05:50,400
this uh was our solution for these

137
00:05:50,400 --> 00:05:51,900
problems

138
00:05:51,900 --> 00:05:55,080
we decided to build B widgets and uh in

139
00:05:55,080 --> 00:05:56,820
a nutshell these were the four major

140
00:05:56,820 --> 00:05:59,520
steps of this project the step one was

141
00:05:59,520 --> 00:06:01,020
the collection of mobile applications

142
00:06:01,020 --> 00:06:04,740
obviously and for that we use Play Store

143
00:06:04,740 --> 00:06:06,960
for majority of the application and we

144
00:06:06,960 --> 00:06:09,360
use some third-party app stores as well

145
00:06:09,360 --> 00:06:12,900
so after that we decompiled all these

146
00:06:12,900 --> 00:06:16,380
applications for that we use jedx and

147
00:06:16,380 --> 00:06:19,320
and after decompiling uh once we had the

148
00:06:19,320 --> 00:06:21,960
first code of these applications we we

149
00:06:21,960 --> 00:06:25,500
did some static scanning as well but the

150
00:06:25,500 --> 00:06:28,020
main focus was on identifying and

151
00:06:28,020 --> 00:06:30,720
categorizing more and more assets and

152
00:06:30,720 --> 00:06:34,199
secrets so for that we created an

153
00:06:34,199 --> 00:06:36,660
extensive list of regex's in order to

154
00:06:36,660 --> 00:06:40,979
identify more and more aspects and the

155
00:06:40,979 --> 00:06:42,900
last and most important step of This

156
00:06:42,900 --> 00:06:45,060
research was to providing this data set

157
00:06:45,060 --> 00:06:46,800
and along with the search functionality

158
00:06:46,800 --> 00:06:50,520
to the community so there are two ways

159
00:06:50,520 --> 00:06:51,900
by which you can have access to this

160
00:06:51,900 --> 00:06:54,240
data but before going there I want to

161
00:06:54,240 --> 00:06:56,699
give you a quick overview of what assets

162
00:06:56,699 --> 00:06:58,380
and what secrets we have in our

163
00:06:58,380 --> 00:07:00,919
inventory

164
00:07:03,900 --> 00:07:06,660
so this is the pie chart of secrets that

165
00:07:06,660 --> 00:07:08,699
we have in our inventory so we have so

166
00:07:08,699 --> 00:07:10,440
far we have more than a million Android

167
00:07:10,440 --> 00:07:13,620
applications and we have extracted 1.6

168
00:07:13,620 --> 00:07:15,840
million hard-coded API keys and secrets

169
00:07:15,840 --> 00:07:19,139
from these applications

170
00:07:19,139 --> 00:07:22,139
now in this pie chart you can see we

171
00:07:22,139 --> 00:07:24,660
have a lot of critical API Keys we have

172
00:07:24,660 --> 00:07:27,660
AWS API Keys here we have GitHub access

173
00:07:27,660 --> 00:07:29,819
tokens here we have Razer pay API Keys

174
00:07:29,819 --> 00:07:31,319
here

175
00:07:31,319 --> 00:07:34,380
so some of these API keys are capable

176
00:07:34,380 --> 00:07:35,699
enough to compromise the entire

177
00:07:35,699 --> 00:07:39,360
organization so so when when we saw

178
00:07:39,360 --> 00:07:41,699
these many API keys in secret coming in

179
00:07:41,699 --> 00:07:43,919
we decided to report them to the

180
00:07:43,919 --> 00:07:47,460
organizations but reporting these many

181
00:07:47,460 --> 00:07:50,580
API Keys manually is a very tough

182
00:07:50,580 --> 00:07:53,039
process so

183
00:07:53,039 --> 00:07:55,280
an entire

184
00:07:55,280 --> 00:07:57,479
reporting pipeline in order to report

185
00:07:57,479 --> 00:08:00,120
these vulnerabilities so so we built a

186
00:08:00,120 --> 00:08:03,240
validator API so that API takes these

187
00:08:03,240 --> 00:08:05,639
API keys and validates them it checks if

188
00:08:05,639 --> 00:08:07,620
the token is valid or not and if the

189
00:08:07,620 --> 00:08:09,720
token is valid uh automated report will

190
00:08:09,720 --> 00:08:11,460
be generated and it will be sent to the

191
00:08:11,460 --> 00:08:12,960
respective organization or to the

192
00:08:12,960 --> 00:08:14,759
developer ID which was which we found on

193
00:08:14,759 --> 00:08:16,319
the Play Store

194
00:08:16,319 --> 00:08:19,379
uh so so far we have reached out to more

195
00:08:19,379 --> 00:08:21,180
than 600 different organizations with

196
00:08:21,180 --> 00:08:23,039
the findings just related to hard-coded

197
00:08:23,039 --> 00:08:26,639
API keys but this talk is not really

198
00:08:26,639 --> 00:08:29,580
about the secrets and API keys this talk

199
00:08:29,580 --> 00:08:33,179
is more about the assets the assets that

200
00:08:33,179 --> 00:08:34,559
we have extracted from these Android

201
00:08:34,559 --> 00:08:36,479
applications

202
00:08:36,479 --> 00:08:38,820
in this pie chart you can see we have

203
00:08:38,820 --> 00:08:41,339
extracted more than 294 million plus

204
00:08:41,339 --> 00:08:44,279
assets from after scanning a million

205
00:08:44,279 --> 00:08:46,440
applications and

206
00:08:46,440 --> 00:08:50,640
and you can see we have a lot of URLs we

207
00:08:50,640 --> 00:08:52,560
have here recovery is not very popular

208
00:08:52,560 --> 00:08:55,620
from from Android applications but it is

209
00:08:55,620 --> 00:08:57,420
there we have found some sub domains

210
00:08:57,420 --> 00:08:59,820
which are only in the Android source

211
00:08:59,820 --> 00:09:01,620
code and we were not able to find these

212
00:09:01,620 --> 00:09:04,500
sub domains from any other subdominal

213
00:09:04,500 --> 00:09:06,480
immigration source

214
00:09:06,480 --> 00:09:09,360
so here you can see we have these many

215
00:09:09,360 --> 00:09:12,240
assets uh are there we have we are also

216
00:09:12,240 --> 00:09:15,779
identifying Cloud assets here and uh one

217
00:09:15,779 --> 00:09:17,279
more important point that I would like

218
00:09:17,279 --> 00:09:20,100
to highlight here is that there is a

219
00:09:20,100 --> 00:09:22,500
supply chain running behind the Android

220
00:09:22,500 --> 00:09:25,440
applications there are companies which

221
00:09:25,440 --> 00:09:27,660
have their employee only applications or

222
00:09:27,660 --> 00:09:28,800
which have their vendor only

223
00:09:28,800 --> 00:09:31,080
applications or or distributor only

224
00:09:31,080 --> 00:09:33,360
applications and later in the chain

225
00:09:33,360 --> 00:09:35,399
these vendors have more applications

226
00:09:35,399 --> 00:09:36,959
more Android applications for their

227
00:09:36,959 --> 00:09:39,360
customers right so

228
00:09:39,360 --> 00:09:42,480
so I think one can find a direct related

229
00:09:42,480 --> 00:09:44,640
or non-directed assets related to a

230
00:09:44,640 --> 00:09:47,880
company from this data set and I would

231
00:09:47,880 --> 00:09:49,860
like to explain this with an example so

232
00:09:49,860 --> 00:09:53,279
uh it is a security incident that we

233
00:09:53,279 --> 00:09:55,440
encountered so let's say there are two

234
00:09:55,440 --> 00:09:58,680
companies company a and Company B so uh

235
00:09:58,680 --> 00:10:00,480
so what we found we found the

236
00:10:00,480 --> 00:10:03,480
credentials of company a hard-coded in

237
00:10:03,480 --> 00:10:05,100
the source code of Android application

238
00:10:05,100 --> 00:10:06,720
of Company B

239
00:10:06,720 --> 00:10:09,180
and when we investigated on this finding

240
00:10:09,180 --> 00:10:12,000
uh we figured out that both of these

241
00:10:12,000 --> 00:10:14,279
applications were developed by the same

242
00:10:14,279 --> 00:10:17,100
third-party software development company

243
00:10:17,100 --> 00:10:20,459
now when you look at this finding from a

244
00:10:20,459 --> 00:10:22,440
black box point of view from our Bounty

245
00:10:22,440 --> 00:10:24,600
Hunter's Point of View you literally

246
00:10:24,600 --> 00:10:27,180
have no way to identify that there is a

247
00:10:27,180 --> 00:10:29,220
loophole in the systems of company a

248
00:10:29,220 --> 00:10:31,620
because of some developer of a third

249
00:10:31,620 --> 00:10:33,180
party company hard-coded their

250
00:10:33,180 --> 00:10:36,779
credentials in a different application

251
00:10:36,779 --> 00:10:40,380
uh so that is why we believe this data

252
00:10:40,380 --> 00:10:42,600
set needs to be introduced to the

253
00:10:42,600 --> 00:10:44,399
community this we believe is a hidden

254
00:10:44,399 --> 00:10:46,140
attack surface which is get to be

255
00:10:46,140 --> 00:10:48,660
revealed So In This research we we try

256
00:10:48,660 --> 00:10:51,300
to re to offer that data set to the

257
00:10:51,300 --> 00:10:53,339
community and we did some research as

258
00:10:53,339 --> 00:10:56,220
well on this data set so now coming back

259
00:10:56,220 --> 00:10:58,079
to the point on how you can have access

260
00:10:58,079 --> 00:11:00,600
to this data set right so there are

261
00:11:00,600 --> 00:11:02,519
majorly two ways by which you can have

262
00:11:02,519 --> 00:11:04,260
access to this data set

263
00:11:04,260 --> 00:11:06,839
one is through the code search and the

264
00:11:06,839 --> 00:11:08,519
other way by which you can have access

265
00:11:08,519 --> 00:11:12,240
to this data set is through API

266
00:11:12,240 --> 00:11:14,339
so I'll talk about the code search first

267
00:11:14,339 --> 00:11:15,899
first so in order to have access to this

268
00:11:15,899 --> 00:11:17,220
code search you just have to go to

269
00:11:17,220 --> 00:11:19,560
behavioral.com sign up and you will find

270
00:11:19,560 --> 00:11:22,380
the search bar there and in this example

271
00:11:22,380 --> 00:11:24,240
in this screenshot I searched for the

272
00:11:24,240 --> 00:11:27,720
URL parameter URL parameter is known for

273
00:11:27,720 --> 00:11:30,360
vulnerabilities like ssrf open redirect

274
00:11:30,360 --> 00:11:32,880
so similarly you can search for any kind

275
00:11:32,880 --> 00:11:34,380
of parameter here

276
00:11:34,380 --> 00:11:36,300
you can search for any kind of parameter

277
00:11:36,300 --> 00:11:38,640
you can search for any kind of file name

278
00:11:38,640 --> 00:11:40,740
or it can be a company keyword as well

279
00:11:40,740 --> 00:11:43,440
so so if you look at the example of the

280
00:11:43,440 --> 00:11:45,000
vulnerability which I just explained of

281
00:11:45,000 --> 00:11:47,700
company a and Company B you just have to

282
00:11:47,700 --> 00:11:49,260
come to this code search you have to

283
00:11:49,260 --> 00:11:51,720
search for the company a keyword and you

284
00:11:51,720 --> 00:11:53,399
will find all the application which have

285
00:11:53,399 --> 00:11:55,079
the mention of that company in their

286
00:11:55,079 --> 00:11:56,660
source code

287
00:11:56,660 --> 00:11:59,459
uh and that's exactly how we discovered

288
00:11:59,459 --> 00:12:01,560
that vulnerability and

289
00:12:01,560 --> 00:12:04,019
um and and uh and regarding the library

290
00:12:04,019 --> 00:12:05,940
right the first example which I gave

291
00:12:05,940 --> 00:12:07,140
let's say you found a zero day

292
00:12:07,140 --> 00:12:08,700
vulnerability you know in a library

293
00:12:08,700 --> 00:12:10,079
which is very popular among Android

294
00:12:10,079 --> 00:12:13,380
developers uh in order to find how many

295
00:12:13,380 --> 00:12:15,480
applications are using that Library you

296
00:12:15,480 --> 00:12:17,040
just have to come to code search search

297
00:12:17,040 --> 00:12:18,720
for that Library keyword and you will

298
00:12:18,720 --> 00:12:21,060
get all the applications

299
00:12:21,060 --> 00:12:24,000
so that was one way of how you can have

300
00:12:24,000 --> 00:12:26,760
access to this data set and the other

301
00:12:26,760 --> 00:12:29,100
way of having access to this data set is

302
00:12:29,100 --> 00:12:31,440
through a API and for that I would like

303
00:12:31,440 --> 00:12:34,079
to invite Shashank who will uh Shashank

304
00:12:34,079 --> 00:12:35,760
will take you through I will tell you

305
00:12:35,760 --> 00:12:37,800
more about the API and he will also take

306
00:12:37,800 --> 00:12:39,000
you through the research and the

307
00:12:39,000 --> 00:12:41,880
findings so uh I'll stop sharing my

308
00:12:41,880 --> 00:12:44,040
screen and I'll request Shashank to

309
00:12:44,040 --> 00:12:46,699
share his screen

310
00:12:54,860 --> 00:12:57,920
all right

311
00:12:58,139 --> 00:13:01,260
thank you Smosh uh hello everyone I hope

312
00:13:01,260 --> 00:13:03,180
my screen is visible

313
00:13:03,180 --> 00:13:06,360
uh so you just saw that coach search is

314
00:13:06,360 --> 00:13:09,480
one way to access this data another way

315
00:13:09,480 --> 00:13:14,000
to access this data is using the

316
00:13:14,279 --> 00:13:17,779
visual oceans API

317
00:13:18,800 --> 00:13:22,320
API provides API access easy API access

318
00:13:22,320 --> 00:13:25,200
to the data set that we have created of

319
00:13:25,200 --> 00:13:27,899
millions of categorized assets

320
00:13:27,899 --> 00:13:31,079
for more info regarding the API you can

321
00:13:31,079 --> 00:13:33,180
visit the mentioned links here

322
00:13:33,180 --> 00:13:35,100
so now let's look at some of the key

323
00:13:35,100 --> 00:13:38,579
features that are offered by this API

324
00:13:38,579 --> 00:13:41,100
or I should say endpoints that are

325
00:13:41,100 --> 00:13:43,560
offered by this API so there are a lot

326
00:13:43,560 --> 00:13:45,959
of endpoints like wordless hose S3

327
00:13:45,959 --> 00:13:48,540
buckets URL parameters application sub

328
00:13:48,540 --> 00:13:50,100
domains Etc

329
00:13:50,100 --> 00:13:52,260
but one of the interesting endpoints

330
00:13:52,260 --> 00:13:55,019
that I would like to uh tell you is the

331
00:13:55,019 --> 00:13:58,560
app's endpoint uh apps endpoint uh takes

332
00:13:58,560 --> 00:14:00,720
in a domain name as a parameter and

333
00:14:00,720 --> 00:14:02,700
gives you all the Android packages that

334
00:14:02,700 --> 00:14:04,440
are associated with it

335
00:14:04,440 --> 00:14:07,380
so uh we observed that a lot of Android

336
00:14:07,380 --> 00:14:10,139
security researchers uh of a lot of

337
00:14:10,139 --> 00:14:12,120
security researchers uh during their pen

338
00:14:12,120 --> 00:14:13,800
test or during the reconnaissance phase

339
00:14:13,800 --> 00:14:16,200
do not even look at the source code of

340
00:14:16,200 --> 00:14:17,820
the Android application until and unless

341
00:14:17,820 --> 00:14:19,560
it is mentioned in the scope of the

342
00:14:19,560 --> 00:14:20,279
target

343
00:14:20,279 --> 00:14:24,120
and this leads to a lot of assets a lot

344
00:14:24,120 --> 00:14:26,579
of Juicy assets being missed remain

345
00:14:26,579 --> 00:14:28,800
untested and leaving a room for a lot of

346
00:14:28,800 --> 00:14:31,139
vulnerabilities that is why we decided

347
00:14:31,139 --> 00:14:33,300
to build this endpoint which simply

348
00:14:33,300 --> 00:14:36,660
receives a domain name and gives you all

349
00:14:36,660 --> 00:14:37,920
the Android packages or Android

350
00:14:37,920 --> 00:14:40,500
applications that are related to it

351
00:14:40,500 --> 00:14:42,660
another such interesting endpoint that I

352
00:14:42,660 --> 00:14:44,639
would like to highlight here is the

353
00:14:44,639 --> 00:14:47,579
search for S3 or S3 keyword search

354
00:14:47,579 --> 00:14:48,779
endpoint

355
00:14:48,779 --> 00:14:52,199
so this endpoint takes

356
00:14:52,199 --> 00:14:55,680
a keyword or any pattern as an input and

357
00:14:55,680 --> 00:14:58,560
gives you all the S3 bucket URLs that we

358
00:14:58,560 --> 00:15:00,120
have discovered in more than one million

359
00:15:00,120 --> 00:15:02,279
Android applications that matches that

360
00:15:02,279 --> 00:15:03,959
keyword or that pattern

361
00:15:03,959 --> 00:15:07,019
so during some vapt engagements we

362
00:15:07,019 --> 00:15:09,480
encountered that a lot of companies have

363
00:15:09,480 --> 00:15:11,880
patents in their S3 bucket names so

364
00:15:11,880 --> 00:15:15,060
let's say if they have multiple S3

365
00:15:15,060 --> 00:15:17,579
buckets for images JavaScript files and

366
00:15:17,579 --> 00:15:19,740
other stuff they are going to be a

367
00:15:19,740 --> 00:15:22,260
format like company name Dash images

368
00:15:22,260 --> 00:15:25,380
company name Dash JavaScript so these

369
00:15:25,380 --> 00:15:26,820
are some of the common patterns that we

370
00:15:26,820 --> 00:15:29,399
encounter during VIP engagements so that

371
00:15:29,399 --> 00:15:30,959
is why we have this endpoint in place

372
00:15:30,959 --> 00:15:33,420
where you can simply write the pattern

373
00:15:33,420 --> 00:15:35,279
or the keyword that you have spotted in

374
00:15:35,279 --> 00:15:37,199
the S3 bucket of a company and it will

375
00:15:37,199 --> 00:15:39,839
list you all the S3 buckets that have

376
00:15:39,839 --> 00:15:42,660
that similar pattern that we found among

377
00:15:42,660 --> 00:15:44,100
more than one million Android

378
00:15:44,100 --> 00:15:45,360
applications

379
00:15:45,360 --> 00:15:47,459
apart from that there are a bunch of

380
00:15:47,459 --> 00:15:49,440
other endpoints as well uh like

381
00:15:49,440 --> 00:15:52,019
worldless host and URL parameters which

382
00:15:52,019 --> 00:15:54,779
are pretty self-explanatory uh you can

383
00:15:54,779 --> 00:15:57,000
craft a word list out of an Android

384
00:15:57,000 --> 00:16:00,899
package uh using the word list parameter

385
00:16:00,899 --> 00:16:03,660
you can extract all the URL parameters

386
00:16:03,660 --> 00:16:04,920
that are found in the Android

387
00:16:04,920 --> 00:16:07,560
applications using a URL param endpoint

388
00:16:07,560 --> 00:16:10,199
so these are a bunch of endpoints which

389
00:16:10,199 --> 00:16:12,180
I encourage you to explore by yourself

390
00:16:12,180 --> 00:16:15,680
through the mentioned links

391
00:16:16,199 --> 00:16:20,220
yeah so now we have more than a 100

392
00:16:20,220 --> 00:16:22,139
million Assets in our hand we have a lot

393
00:16:22,139 --> 00:16:24,300
of Assets in our hand organized assets

394
00:16:24,300 --> 00:16:26,699
how can we make use of this data

395
00:16:26,699 --> 00:16:30,779
so uh one way we can think of its uses

396
00:16:30,779 --> 00:16:32,579
through smart fuzzing

397
00:16:32,579 --> 00:16:35,279
we can uh use all the collected data

398
00:16:35,279 --> 00:16:38,220
points and assets to fuzz a Target very

399
00:16:38,220 --> 00:16:39,300
smartly

400
00:16:39,300 --> 00:16:41,880
and by smart I mean using the correct

401
00:16:41,880 --> 00:16:43,920
endpoint and the correct URL parameters

402
00:16:43,920 --> 00:16:45,360
that we have discovered inside the

403
00:16:45,360 --> 00:16:47,519
Android application

404
00:16:47,519 --> 00:16:50,279
right uh

405
00:16:50,279 --> 00:16:52,199
so we decided to use this method of

406
00:16:52,199 --> 00:16:53,880
smart fuzzing to conduct an

407
00:16:53,880 --> 00:16:56,519
internet-wide security scan a venuity

408
00:16:56,519 --> 00:16:58,199
scan uh

409
00:16:58,199 --> 00:17:00,899
so here is the basic approach that we

410
00:17:00,899 --> 00:17:03,480
followed for every Target uh for an

411
00:17:03,480 --> 00:17:05,459
example let's say netflix.com in this

412
00:17:05,459 --> 00:17:06,240
case

413
00:17:06,240 --> 00:17:09,179
for netflix.com first we enumerated all

414
00:17:09,179 --> 00:17:10,380
the Android packages or Android

415
00:17:10,380 --> 00:17:12,720
applications that are indirectly or

416
00:17:12,720 --> 00:17:15,540
directly related to netflix.com

417
00:17:15,540 --> 00:17:17,400
so you can see that hosting API written

418
00:17:17,400 --> 00:17:20,280
all that packages name and then we fed

419
00:17:20,280 --> 00:17:22,260
those packages to the osint API itself

420
00:17:22,260 --> 00:17:25,260
to enumerate all the URL parameters that

421
00:17:25,260 --> 00:17:28,439
are found in those Android packages

422
00:17:28,439 --> 00:17:30,600
so now we have the correct domain name

423
00:17:30,600 --> 00:17:32,520
we have the correct endpoint and now we

424
00:17:32,520 --> 00:17:34,620
have enumerated all the URL parameters

425
00:17:34,620 --> 00:17:36,600
that we need and now we can first our

426
00:17:36,600 --> 00:17:38,340
Target very smartly having a very high

427
00:17:38,340 --> 00:17:40,200
chance of finding something

428
00:17:40,200 --> 00:17:42,900
so uh then we constructed an exploit URL

429
00:17:42,900 --> 00:17:45,960
uh like this and then we can first uh

430
00:17:45,960 --> 00:17:47,700
the parameter with any payload we want

431
00:17:47,700 --> 00:17:48,660
right

432
00:17:48,660 --> 00:17:50,280
so back in the time when we were doing

433
00:17:50,280 --> 00:17:53,520
this research uh the log4j vulnerability

434
00:17:53,520 --> 00:17:55,320
came in and shocked the internet

435
00:17:55,320 --> 00:17:57,780
completely

436
00:17:57,780 --> 00:17:59,820
most of the Android applications are

437
00:17:59,820 --> 00:18:02,400
written in Java and since the vulnerable

438
00:18:02,400 --> 00:18:04,919
log 4J was also a Java logging utility

439
00:18:04,919 --> 00:18:07,500
so we thought that most of the Android

440
00:18:07,500 --> 00:18:09,840
ecosystem could be affected with this

441
00:18:09,840 --> 00:18:11,580
vulnerability and as we mentioned

442
00:18:11,580 --> 00:18:14,640
earlier a lot of Android applications go

443
00:18:14,640 --> 00:18:17,220
untested so they are even more prone to

444
00:18:17,220 --> 00:18:19,380
this kind of vulnerabilities so that is

445
00:18:19,380 --> 00:18:21,539
why we decided to pick it up as our

446
00:18:21,539 --> 00:18:24,559
internet wide scan

447
00:18:24,780 --> 00:18:28,500
so uh these are the Snippets of the HTTP

448
00:18:28,500 --> 00:18:30,840
request that we sent for each Target for

449
00:18:30,840 --> 00:18:33,299
scanning the targets for lock for shelf

450
00:18:33,299 --> 00:18:34,500
uh

451
00:18:34,500 --> 00:18:36,840
so we notice here that uh we are fuzzing

452
00:18:36,840 --> 00:18:39,240
all the enumerated parameters uh with

453
00:18:39,240 --> 00:18:42,000
the log4j payload and in the log 4J

454
00:18:42,000 --> 00:18:44,039
payload we are using the hostname Java

455
00:18:44,039 --> 00:18:47,220
environment variable uh for validation

456
00:18:47,220 --> 00:18:50,340
whether or not the issue is legit right

457
00:18:50,340 --> 00:18:52,320
apart from the parameters we are also

458
00:18:52,320 --> 00:18:54,059
fuzzing some of the common headers that

459
00:18:54,059 --> 00:18:56,039
are locked by uh backend application

460
00:18:56,039 --> 00:18:57,380
servers

461
00:18:57,380 --> 00:18:59,940
and you you can see here that in the

462
00:18:59,940 --> 00:19:02,160
post request we are sending all the

463
00:19:02,160 --> 00:19:03,900
parameters or all the payloads in the

464
00:19:03,900 --> 00:19:07,020
Json format the reason behind that is a

465
00:19:07,020 --> 00:19:10,320
lot of applications uh rely on apis to

466
00:19:10,320 --> 00:19:11,760
communicate with the Android application

467
00:19:11,760 --> 00:19:15,120
backend server and among the apis Json

468
00:19:15,120 --> 00:19:19,500
is a pretty uh popular standard to uh

469
00:19:19,500 --> 00:19:21,600
for data exchange that is why we decided

470
00:19:21,600 --> 00:19:23,280
to pick it up

471
00:19:23,280 --> 00:19:26,520
so we send these requests for each URL

472
00:19:26,520 --> 00:19:28,200
we send two requests one get and one

473
00:19:28,200 --> 00:19:31,140
post to not miss out on any findings and

474
00:19:31,140 --> 00:19:32,820
the outcome of This research was pretty

475
00:19:32,820 --> 00:19:34,980
interesting

476
00:19:34,980 --> 00:19:37,559
we discovered more than 300 confirmed

477
00:19:37,559 --> 00:19:40,440
remote code executions and more than 400

478
00:19:40,440 --> 00:19:42,419
server-side request forgeries and open

479
00:19:42,419 --> 00:19:43,760
redrx

480
00:19:43,760 --> 00:19:46,140
and uh

481
00:19:46,140 --> 00:19:48,120
to validate the remote code executions

482
00:19:48,120 --> 00:19:50,160
we use the hostname reflection technique

483
00:19:50,160 --> 00:19:53,580
and for open redirects and ssrfs we use

484
00:19:53,580 --> 00:19:56,700
the HTTP hitbacks for detection right

485
00:19:56,700 --> 00:19:59,580
and the 300 remote code executions you

486
00:19:59,580 --> 00:20:01,679
are seeing here are more than 300 remote

487
00:20:01,679 --> 00:20:03,419
code executions these are from every

488
00:20:03,419 --> 00:20:05,400
sector you can imagine Healthcare

489
00:20:05,400 --> 00:20:09,360
education Transportation banking uh in

490
00:20:09,360 --> 00:20:11,700
every sector we got multiple remote code

491
00:20:11,700 --> 00:20:14,340
executions

492
00:20:14,340 --> 00:20:17,039
um and uh so that you can see that the

493
00:20:17,039 --> 00:20:19,320
impact is pretty huge here and that is

494
00:20:19,320 --> 00:20:21,360
why we decided to disclose all of these

495
00:20:21,360 --> 00:20:23,880
vulnerities and issues responsibly to

496
00:20:23,880 --> 00:20:25,260
the authorities of the respective

497
00:20:25,260 --> 00:20:27,360
companies and followed up with them

498
00:20:27,360 --> 00:20:29,340
until unless the issue is completely

499
00:20:29,340 --> 00:20:31,260
mitigated

500
00:20:31,260 --> 00:20:33,539
also uh back when we were doing this

501
00:20:33,539 --> 00:20:36,539
research we only scanned 6 million

502
00:20:36,539 --> 00:20:39,900
targets we only had 6 million urls and

503
00:20:39,900 --> 00:20:41,520
now we have scanned more than one

504
00:20:41,520 --> 00:20:43,200
million Android applications now you can

505
00:20:43,200 --> 00:20:46,200
think uh how much vulnerable the system

506
00:20:46,200 --> 00:20:47,520
could be

507
00:20:47,520 --> 00:20:50,280
right yeah so this was about the

508
00:20:50,280 --> 00:20:52,980
research that we did uh now we have a

509
00:20:52,980 --> 00:20:54,360
little gift for the security Community

510
00:20:54,360 --> 00:20:55,500
from us

511
00:20:55,500 --> 00:20:58,260
so BBG CLI is a handy command line

512
00:20:58,260 --> 00:21:00,660
utility and a python Library

513
00:21:00,660 --> 00:21:02,580
to interact with the oceans API with

514
00:21:02,580 --> 00:21:04,740
ease you can utilize this tool to

515
00:21:04,740 --> 00:21:06,720
enumerate all the URL parameters hosts

516
00:21:06,720 --> 00:21:08,700
as three buckets all those endpoints

517
00:21:08,700 --> 00:21:10,140
that you saw all those features that you

518
00:21:10,140 --> 00:21:13,200
saw using this CLI tool more info

519
00:21:13,200 --> 00:21:15,900
regarding the installation and usage can

520
00:21:15,900 --> 00:21:17,820
be found in the GitHub link mentioned

521
00:21:17,820 --> 00:21:19,380
here

522
00:21:19,380 --> 00:21:22,919
now let's have a quick demo of this tool

523
00:21:22,919 --> 00:21:25,740
so let's say uh you want to enumerate

524
00:21:25,740 --> 00:21:28,460
all the sub domains for netflix.com

525
00:21:28,460 --> 00:21:31,440
which we have encountered in one million

526
00:21:31,440 --> 00:21:33,539
Android applications so you simply have

527
00:21:33,539 --> 00:21:36,000
to run bbgl CLI enum subdomains and pass

528
00:21:36,000 --> 00:21:37,980
in the domain name and you will have

529
00:21:37,980 --> 00:21:39,900
that data

530
00:21:39,900 --> 00:21:41,760
and similarly if you have an automated

531
00:21:41,760 --> 00:21:43,980
Recon flow you can make use of the bay

532
00:21:43,980 --> 00:21:46,740
visual python library and achieve the

533
00:21:46,740 --> 00:21:47,820
same

534
00:21:47,820 --> 00:21:48,960
yep

535
00:21:48,960 --> 00:21:51,059
so this was the tool in research with

536
00:21:51,059 --> 00:21:53,159
that we moved to conclusion and

537
00:21:53,159 --> 00:21:56,220
takeaways So In This research we tried

538
00:21:56,220 --> 00:21:59,220
to uncover a very uncommon yet very

539
00:21:59,220 --> 00:22:00,960
important attack surface that is mobile

540
00:22:00,960 --> 00:22:03,299
application attack surface which a lot

541
00:22:03,299 --> 00:22:04,919
of these researchers usually tend to

542
00:22:04,919 --> 00:22:07,980
ignore during the Recon phase

543
00:22:07,980 --> 00:22:10,980
and you saw the fraction of hard-coded

544
00:22:10,980 --> 00:22:13,520
Secrets and misconfigurations we found

545
00:22:13,520 --> 00:22:15,900
so these were liabilities and

546
00:22:15,900 --> 00:22:17,580
misconfigurations are everywhere the

547
00:22:17,580 --> 00:22:20,100
internet is broken and the only way uh

548
00:22:20,100 --> 00:22:22,200
through which we can resolve these

549
00:22:22,200 --> 00:22:24,000
issues is through collaboration between

550
00:22:24,000 --> 00:22:26,340
researchers and engineers

551
00:22:26,340 --> 00:22:28,640
and we also encourage uh the community

552
00:22:28,640 --> 00:22:31,500
to utilize the be visual CLI or the

553
00:22:31,500 --> 00:22:33,419
oceans API in their day-to-day con

554
00:22:33,419 --> 00:22:34,340
process

555
00:22:34,340 --> 00:22:37,080
to have an increased number of ads to

556
00:22:37,080 --> 00:22:38,220
test

557
00:22:38,220 --> 00:22:40,440
with that we would like to end this uh

558
00:22:40,440 --> 00:22:42,539
talk here and thank you for joining us

559
00:22:42,539 --> 00:22:46,400
and we are open for any questions

