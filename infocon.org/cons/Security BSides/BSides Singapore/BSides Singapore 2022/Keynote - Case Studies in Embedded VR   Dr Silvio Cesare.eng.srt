1
00:00:00,480 --> 00:00:03,540
thank you very much uh one more time uh

2
00:00:03,540 --> 00:00:06,299
to Keynote uh B-side Singapore it is uh

3
00:00:06,299 --> 00:00:08,460
such a great thing uh to be invited to

4
00:00:08,460 --> 00:00:10,679
to this event uh and I'm looking forward

5
00:00:10,679 --> 00:00:12,480
to the rest of the conference

6
00:00:12,480 --> 00:00:14,759
um this talk is a

7
00:00:14,759 --> 00:00:17,100
a bit of a technical look at

8
00:00:17,100 --> 00:00:19,560
um vulnerability research on embedded

9
00:00:19,560 --> 00:00:21,840
devices so it does cover a little bit of

10
00:00:21,840 --> 00:00:24,480
technical content but it is a sort of a

11
00:00:24,480 --> 00:00:26,939
technical keynote on on embedded device

12
00:00:26,939 --> 00:00:28,980
research

13
00:00:28,980 --> 00:00:30,539
I'm going to talk about a few different

14
00:00:30,539 --> 00:00:31,619
things

15
00:00:31,619 --> 00:00:33,300
I'm going to talk about when you're

16
00:00:33,300 --> 00:00:35,940
looking at an embedded device

17
00:00:35,940 --> 00:00:38,520
um what you do with it and and pretty

18
00:00:38,520 --> 00:00:39,899
much you start off with getting the

19
00:00:39,899 --> 00:00:42,300
firmware for an embedded device

20
00:00:42,300 --> 00:00:44,100
um once you've got the firmware maybe

21
00:00:44,100 --> 00:00:45,719
even the source code that's definitely

22
00:00:45,719 --> 00:00:47,160
possible depending on how they've

23
00:00:47,160 --> 00:00:49,440
released it you want to do vulnerability

24
00:00:49,440 --> 00:00:51,660
research and hopefully find some sort of

25
00:00:51,660 --> 00:00:53,460
bug to exploit

26
00:00:53,460 --> 00:00:55,460
as part of the export development

27
00:00:55,460 --> 00:00:57,960
process you probably don't want to start

28
00:00:57,960 --> 00:00:59,280
off writing an exploit on the real

29
00:00:59,280 --> 00:01:01,800
device so you want to emulate that

30
00:01:01,800 --> 00:01:05,040
device and then sort of develop your

31
00:01:05,040 --> 00:01:07,200
exploit within that framework and then

32
00:01:07,200 --> 00:01:08,520
hopefully by the end of it you've got a

33
00:01:08,520 --> 00:01:10,140
working exploit against

34
00:01:10,140 --> 00:01:11,939
whatever it might be whether that's a

35
00:01:11,939 --> 00:01:14,100
Soho router whether that's a Nas whether

36
00:01:14,100 --> 00:01:16,080
that's a security camera whether that's

37
00:01:16,080 --> 00:01:18,000
an NVR whatever it might be some some

38
00:01:18,000 --> 00:01:20,159
sort of embedded device most embedded

39
00:01:20,159 --> 00:01:22,619
devices do look quite similar to each

40
00:01:22,619 --> 00:01:24,540
other once you get under the hood so

41
00:01:24,540 --> 00:01:26,580
it's a you know these techniques don't

42
00:01:26,580 --> 00:01:28,200
just apply to one particular type of

43
00:01:28,200 --> 00:01:30,360
embedded device but but all devices so

44
00:01:30,360 --> 00:01:32,640
that's what this technical keynote is

45
00:01:32,640 --> 00:01:35,579
about it is about trying to exploit

46
00:01:35,579 --> 00:01:37,979
embedded devices and the process that I

47
00:01:37,979 --> 00:01:40,920
use and the process that infosec the

48
00:01:40,920 --> 00:01:44,640
company that I I I run users

49
00:01:44,640 --> 00:01:46,680
to do sort of vulnerability research and

50
00:01:46,680 --> 00:01:48,600
Export development

51
00:01:48,600 --> 00:01:50,880
so you've been given an embedded advice

52
00:01:50,880 --> 00:01:53,340
uh you want to sort of find a bug in

53
00:01:53,340 --> 00:01:54,960
that you want to exploit it what do you

54
00:01:54,960 --> 00:01:56,460
do the first thing you really want to do

55
00:01:56,460 --> 00:01:58,500
is look at the firmware and there are

56
00:01:58,500 --> 00:01:59,939
different ways that you can get the

57
00:01:59,939 --> 00:02:01,860
firmware that might be through

58
00:02:01,860 --> 00:02:03,979
physically interfacing with the device

59
00:02:03,979 --> 00:02:07,380
that might be through

60
00:02:07,380 --> 00:02:08,758
um downloading the firmware off the

61
00:02:08,758 --> 00:02:10,139
vendor website and that's exactly what

62
00:02:10,139 --> 00:02:12,599
I've got here this is a sort of a Soho

63
00:02:12,599 --> 00:02:15,000
router a Netgear router I've just

64
00:02:15,000 --> 00:02:17,160
downloaded it from the internet

65
00:02:17,160 --> 00:02:18,660
um a lot of Soho routers actually do

66
00:02:18,660 --> 00:02:20,099
provide the firmware available to

67
00:02:20,099 --> 00:02:21,420
download

68
00:02:21,420 --> 00:02:24,540
um um so it's it's very easy to to get

69
00:02:24,540 --> 00:02:26,580
you know the binary images of the

70
00:02:26,580 --> 00:02:28,500
software that's running

71
00:02:28,500 --> 00:02:31,620
um not all embedded devices do provide

72
00:02:31,620 --> 00:02:33,660
firmware over the Internet so security

73
00:02:33,660 --> 00:02:35,580
cameras are a good example of that where

74
00:02:35,580 --> 00:02:37,739
typically they'll just do automatic

75
00:02:37,739 --> 00:02:39,540
updates and not provide publicly

76
00:02:39,540 --> 00:02:42,840
available downloads or their firmware

77
00:02:42,840 --> 00:02:44,220
that that's just the way it goes a lot

78
00:02:44,220 --> 00:02:46,019
of devices are moving across the sort of

79
00:02:46,019 --> 00:02:47,519
automatic updates and don't provide

80
00:02:47,519 --> 00:02:49,739
firmware for download but I think Soho

81
00:02:49,739 --> 00:02:51,360
routers in particular sort of came from

82
00:02:51,360 --> 00:02:54,660
an era where initially sort of they they

83
00:02:54,660 --> 00:02:56,700
didn't do automatic updates and what the

84
00:02:56,700 --> 00:02:59,220
uh the vendors did was they sort of made

85
00:02:59,220 --> 00:03:00,660
it available that you could download the

86
00:03:00,660 --> 00:03:02,519
firmware and then do a manual update

87
00:03:02,519 --> 00:03:04,920
yourself and put on a USB stick or do

88
00:03:04,920 --> 00:03:06,599
something like that and then press the

89
00:03:06,599 --> 00:03:08,099
update button and it will do an update

90
00:03:08,099 --> 00:03:10,200
and so there was a reason that that

91
00:03:10,200 --> 00:03:12,060
vendors did provide download links to

92
00:03:12,060 --> 00:03:14,040
the firmware and that

93
00:03:14,040 --> 00:03:16,080
really that idea of providing

94
00:03:16,080 --> 00:03:18,120
downloadable firmware has just remained

95
00:03:18,120 --> 00:03:20,400
even though a lot of devices today Soho

96
00:03:20,400 --> 00:03:22,500
routers will do automatic updates and

97
00:03:22,500 --> 00:03:24,540
don't actually need a download button

98
00:03:24,540 --> 00:03:27,120
but that they'll still provide it um Nas

99
00:03:27,120 --> 00:03:30,180
is another embedded device where

100
00:03:30,180 --> 00:03:30,959
um

101
00:03:30,959 --> 00:03:33,120
um what you'll see is that they will

102
00:03:33,120 --> 00:03:34,860
provide download links

103
00:03:34,860 --> 00:03:37,440
um very common nbrs they'll often

104
00:03:37,440 --> 00:03:39,480
provide download links because nvios

105
00:03:39,480 --> 00:03:41,459
want to stay sort of upload up sort of

106
00:03:41,459 --> 00:03:43,739
they often don't do automatic updates on

107
00:03:43,739 --> 00:03:45,060
their own so

108
00:03:45,060 --> 00:03:46,860
but on this particular case this is the

109
00:03:46,860 --> 00:03:50,099
Nike and Nighthawk um router version uh

110
00:03:50,099 --> 00:03:52,319
download link available and we can just

111
00:03:52,319 --> 00:03:54,480
download it over the Internet when we

112
00:03:54,480 --> 00:03:55,860
get this

113
00:03:55,860 --> 00:03:56,879
um

114
00:03:56,879 --> 00:03:59,459
this ZIP file which is the firmware

115
00:03:59,459 --> 00:04:01,080
um we just we can we can literally just

116
00:04:01,080 --> 00:04:02,940
download it with the wget or curl

117
00:04:02,940 --> 00:04:04,980
request and we've got sort of the latest

118
00:04:04,980 --> 00:04:06,780
version the latest firmware and all the

119
00:04:06,780 --> 00:04:09,000
software for that for that router or you

120
00:04:09,000 --> 00:04:10,319
know if it was another embedded device

121
00:04:10,319 --> 00:04:12,000
another embedded device but all the

122
00:04:12,000 --> 00:04:14,280
software is available for us to look at

123
00:04:14,280 --> 00:04:16,320
and really one of the first things that

124
00:04:16,320 --> 00:04:18,478
we do with a firmware that once we've

125
00:04:18,478 --> 00:04:21,238
got it is to run binwalk on it and Bin

126
00:04:21,238 --> 00:04:24,240
walk pulls out all sort of the embedded

127
00:04:24,240 --> 00:04:26,280
content inside that firmware and the

128
00:04:26,280 --> 00:04:28,199
Very typically it will pull out an

129
00:04:28,199 --> 00:04:30,780
embedded file system

130
00:04:30,780 --> 00:04:32,580
um that's a very common thing that

131
00:04:32,580 --> 00:04:34,560
binwall does and that's really what you

132
00:04:34,560 --> 00:04:36,479
want you want that embedded file system

133
00:04:36,479 --> 00:04:39,060
that holds all the system files and

134
00:04:39,060 --> 00:04:40,919
typically for these types of devices

135
00:04:40,919 --> 00:04:42,960
they're going to be running some sort of

136
00:04:42,960 --> 00:04:45,780
Linux or Linux Dairy um sort of some cut

137
00:04:45,780 --> 00:04:48,120
down Linux embedded system

138
00:04:48,120 --> 00:04:50,040
but you can put you know you'll pull out

139
00:04:50,040 --> 00:04:52,259
a file system that is readable

140
00:04:52,259 --> 00:04:54,180
um normally and that you can process so

141
00:04:54,180 --> 00:04:56,100
you run bin walk minor C on the sort of

142
00:04:56,100 --> 00:04:57,840
the image file that you pulled from that

143
00:04:57,840 --> 00:04:59,220
firmware download

144
00:04:59,220 --> 00:05:00,960
and this is what you get you run bin

145
00:05:00,960 --> 00:05:02,520
what we we just unzip that firmware

146
00:05:02,520 --> 00:05:04,800
download it just sorted as a zip there's

147
00:05:04,800 --> 00:05:06,479
an image file which is the actual

148
00:05:06,479 --> 00:05:08,820
firmware image we run bin walk on that

149
00:05:08,820 --> 00:05:11,940
on that firmware and what we see is a

150
00:05:11,940 --> 00:05:13,860
few different things but of particular

151
00:05:13,860 --> 00:05:17,820
importance is that last line that squash

152
00:05:17,820 --> 00:05:20,940
FS file system that's the embedded file

153
00:05:20,940 --> 00:05:24,000
system that stores all the files for

154
00:05:24,000 --> 00:05:26,580
this particular router and you know some

155
00:05:26,580 --> 00:05:28,320
of those files are going to be Network

156
00:05:28,320 --> 00:05:30,539
Services that start they'll be you know

157
00:05:30,539 --> 00:05:32,759
potentially you can also from this

158
00:05:32,759 --> 00:05:35,160
firmware look at the kernel image if you

159
00:05:35,160 --> 00:05:36,180
want to

160
00:05:36,180 --> 00:05:38,460
you can see any customized software that

161
00:05:38,460 --> 00:05:40,139
they've got on that file system as well

162
00:05:40,139 --> 00:05:42,960
and if we actually just look at what bin

163
00:05:42,960 --> 00:05:45,600
walk extracts it extracts that squash FS

164
00:05:45,600 --> 00:05:46,979
file system which is a very typical

165
00:05:46,979 --> 00:05:49,080
compressed file system that's in use by

166
00:05:49,080 --> 00:05:51,360
firmware very typical

167
00:05:51,360 --> 00:05:52,080
um

168
00:05:52,080 --> 00:05:54,000
we can see that squash FS route which

169
00:05:54,000 --> 00:05:56,220
binwall has extracted and we see

170
00:05:56,220 --> 00:05:57,960
basically a Linux file system there's

171
00:05:57,960 --> 00:06:00,120
you know there's there's user there's

172
00:06:00,120 --> 00:06:03,120
there's lib there's s bin all of the

173
00:06:03,120 --> 00:06:04,680
standard sort of things that we would

174
00:06:04,680 --> 00:06:06,440
expect from an embedded sort of device

175
00:06:06,440 --> 00:06:08,580
there's also some interesting stuff

176
00:06:08,580 --> 00:06:10,320
there there's you know that do my OS

177
00:06:10,320 --> 00:06:12,780
that sort of specific to the embedded

178
00:06:12,780 --> 00:06:15,180
World ROM you know or a few different

179
00:06:15,180 --> 00:06:17,340
types of things www all of these things

180
00:06:17,340 --> 00:06:20,880
are sort of specific to this device

181
00:06:20,880 --> 00:06:24,800
so that's quite interesting to look at

182
00:06:27,240 --> 00:06:29,280
um this is from one of those neck ear

183
00:06:29,280 --> 00:06:30,780
Nighthawk routers and if there's a

184
00:06:30,780 --> 00:06:33,539
binary that actually sits um in the

185
00:06:33,539 --> 00:06:35,699
firmware and in this firmware there's

186
00:06:35,699 --> 00:06:37,800
this this binary this network service

187
00:06:37,800 --> 00:06:39,780
effectively well not a network service

188
00:06:39,780 --> 00:06:42,060
it runs once a day

189
00:06:42,060 --> 00:06:43,860
um via some sort of sort of Cron job

190
00:06:43,860 --> 00:06:46,620
basically and it runs once a day and

191
00:06:46,620 --> 00:06:49,500
embedded in this binary this AWS iot

192
00:06:49,500 --> 00:06:52,919
binary is a hard-coded RSA private key

193
00:06:52,919 --> 00:06:55,560
with a hard-coded domain name pointing

194
00:06:55,560 --> 00:06:59,220
to an Amazon ec2 image and

195
00:06:59,220 --> 00:07:01,620
what this binary does on this Netgear

196
00:07:01,620 --> 00:07:03,900
Nighthawk router is once a day it

197
00:07:03,900 --> 00:07:05,580
communicates out to the sort of the

198
00:07:05,580 --> 00:07:08,220
internet and gives statistics about CPU

199
00:07:08,220 --> 00:07:10,620
usage load averages and so forth of the

200
00:07:10,620 --> 00:07:12,840
router itself so you might not even be

201
00:07:12,840 --> 00:07:14,819
aware of it but you know some of these

202
00:07:14,819 --> 00:07:16,560
some of these embedded devices that

203
00:07:16,560 --> 00:07:18,780
you've got are pulling information from

204
00:07:18,780 --> 00:07:21,599
your sort of your system or your network

205
00:07:21,599 --> 00:07:24,060
um to a certain level and pushing it out

206
00:07:24,060 --> 00:07:25,979
onto the internet and updating these

207
00:07:25,979 --> 00:07:27,660
servers and I presume

208
00:07:27,660 --> 00:07:30,360
in this particular case Netgear wants to

209
00:07:30,360 --> 00:07:31,740
know if that if their routers are

210
00:07:31,740 --> 00:07:33,720
working effectively and and if the sort

211
00:07:33,720 --> 00:07:35,400
of have they got the appropriate

212
00:07:35,400 --> 00:07:37,080
Hardware are they overloaded and so

213
00:07:37,080 --> 00:07:39,180
forth so it's it's probably useful to

214
00:07:39,180 --> 00:07:41,340
the vendor to have this information

215
00:07:41,340 --> 00:07:42,840
um but it is interesting that you know

216
00:07:42,840 --> 00:07:44,699
there's hard-coded domains probably

217
00:07:44,699 --> 00:07:46,860
high-coded RSA private key just to sort

218
00:07:46,860 --> 00:07:49,380
of communicate to the device communicate

219
00:07:49,380 --> 00:07:51,660
to the internet appropriately but very

220
00:07:51,660 --> 00:07:53,940
interesting nevertheless most people

221
00:07:53,940 --> 00:07:55,560
don't know that this type of software

222
00:07:55,560 --> 00:07:59,780
does run on their on their equipment

223
00:08:00,060 --> 00:08:01,860
um you know if you look at you know

224
00:08:01,860 --> 00:08:04,139
embedded firmware's you'll often see

225
00:08:04,139 --> 00:08:07,440
that there's um backdoor accounts on

226
00:08:07,440 --> 00:08:10,139
embedded devices it's a very standard

227
00:08:10,139 --> 00:08:12,360
um thing to do to look at the password

228
00:08:12,360 --> 00:08:14,699
file or the shadow file of the embedded

229
00:08:14,699 --> 00:08:16,440
device that you're looking at

230
00:08:16,440 --> 00:08:17,940
uh in this particular case we're looking

231
00:08:17,940 --> 00:08:19,860
at a sort of a unify

232
00:08:19,860 --> 00:08:21,720
um I think it was a router or maybe a

233
00:08:21,720 --> 00:08:24,419
udm pro Universal dream machine pro

234
00:08:24,419 --> 00:08:27,120
um but this is a hard-coded password but

235
00:08:27,120 --> 00:08:29,160
it's only for first time login so as

236
00:08:29,160 --> 00:08:30,840
soon as you log in with this hard-coded

237
00:08:30,840 --> 00:08:32,520
password it will ask you to sort of

238
00:08:32,520 --> 00:08:34,679
update your password so not really a

239
00:08:34,679 --> 00:08:37,440
problem but there's a surprisingly large

240
00:08:37,440 --> 00:08:39,719
number of iot devices that have

241
00:08:39,719 --> 00:08:43,440
hard-coded passwords that are permanent

242
00:08:43,440 --> 00:08:45,300
um sometimes even if they're not network

243
00:08:45,300 --> 00:08:48,000
accessible if you try to get console

244
00:08:48,000 --> 00:08:50,279
access to the device and it might

245
00:08:50,279 --> 00:08:51,839
present you with the login prompt and

246
00:08:51,839 --> 00:08:53,580
you you might need to use some of these

247
00:08:53,580 --> 00:08:55,920
hard-coded passwords just to get serial

248
00:08:55,920 --> 00:08:58,380
access to the device as well but

249
00:08:58,380 --> 00:09:00,540
hard-coded passwords are a very common

250
00:09:00,540 --> 00:09:02,220
feature in embedded devices but

251
00:09:02,220 --> 00:09:04,019
effectively their service accounts I

252
00:09:04,019 --> 00:09:06,019
suppose would be one way to describe it

253
00:09:06,019 --> 00:09:07,740
sometimes they're not accessible

254
00:09:07,740 --> 00:09:09,540
sometimes they are sometimes they lead

255
00:09:09,540 --> 00:09:11,700
to sort of useful things for an attacker

256
00:09:11,700 --> 00:09:13,320
or sometimes they're just footholds into

257
00:09:13,320 --> 00:09:15,480
sort of gaining more knowledge about the

258
00:09:15,480 --> 00:09:18,860
system for reverse engineering

259
00:09:20,519 --> 00:09:22,980
okay so that's you know some of the some

260
00:09:22,980 --> 00:09:26,640
of the things that we can do with um

261
00:09:26,640 --> 00:09:28,019
firmware

262
00:09:28,019 --> 00:09:30,480
um you know we've got our firmware we

263
00:09:30,480 --> 00:09:31,920
probably also want to look at the

264
00:09:31,920 --> 00:09:34,440
network services that are starting when

265
00:09:34,440 --> 00:09:38,519
our um our Pro our device starts up we

266
00:09:38,519 --> 00:09:39,480
don't just want to look at password

267
00:09:39,480 --> 00:09:41,100
files and Shadow files we want remote

268
00:09:41,100 --> 00:09:43,260
code execution on these devices so we

269
00:09:43,260 --> 00:09:44,399
probably need to look at some Network

270
00:09:44,399 --> 00:09:46,800
Services and there's there's a few main

271
00:09:46,800 --> 00:09:49,820
approaches that you can use to do

272
00:09:49,820 --> 00:09:52,019
vulnerability research finding bugs

273
00:09:52,019 --> 00:09:54,300
basically you can do code review so

274
00:09:54,300 --> 00:09:56,220
manually reading the code or reversing

275
00:09:56,220 --> 00:09:58,860
the code you can fuzz test and do

276
00:09:58,860 --> 00:10:00,720
Dynamic analysis so basically sending

277
00:10:00,720 --> 00:10:03,540
random inputs to the code or the network

278
00:10:03,540 --> 00:10:05,279
service binaries or whatever they might

279
00:10:05,279 --> 00:10:07,680
be to see if you get a crash or you

280
00:10:07,680 --> 00:10:09,420
might want to use static analysis tools

281
00:10:09,420 --> 00:10:11,220
maybe if you've got the source code or

282
00:10:11,220 --> 00:10:12,540
maybe if you've got the firmware some

283
00:10:12,540 --> 00:10:14,040
sort of gear Plugin or something like

284
00:10:14,040 --> 00:10:15,720
that or decompile it back to source code

285
00:10:15,720 --> 00:10:18,300
and then run your static analysis tools

286
00:10:18,300 --> 00:10:20,060
sometimes you do have the source code

287
00:10:20,060 --> 00:10:22,260
provided in a release

288
00:10:22,260 --> 00:10:24,240
or sometimes you just have the firmware

289
00:10:24,240 --> 00:10:25,740
binary so you better use something like

290
00:10:25,740 --> 00:10:29,959
ghidra and do reverse engineering on it

291
00:10:30,600 --> 00:10:33,060
this is a router that I'm going to look

292
00:10:33,060 --> 00:10:33,899
at

293
00:10:33,899 --> 00:10:35,220
um I looked at it a couple of years ago

294
00:10:35,220 --> 00:10:37,200
when it was the point to own Target in

295
00:10:37,200 --> 00:10:39,120
2020 phone to own is sort of an

296
00:10:39,120 --> 00:10:41,580
international competition where you

297
00:10:41,580 --> 00:10:43,680
basically have competitors trying to

298
00:10:43,680 --> 00:10:46,019
sort of compromise the latest software

299
00:10:46,019 --> 00:10:48,000
in very later software and devices and

300
00:10:48,000 --> 00:10:50,640
various things from browsers to cars to

301
00:10:50,640 --> 00:10:53,040
Soho routers as well and NASA's and a

302
00:10:53,040 --> 00:10:54,959
variety of other things in one of the

303
00:10:54,959 --> 00:10:56,940
poem to owns in 2020 they had the

304
00:10:56,940 --> 00:11:01,019
tp-link AC 1750 Smart Wi-Fi router

305
00:11:01,019 --> 00:11:03,839
pretty standard Soho router and the goal

306
00:11:03,839 --> 00:11:05,880
was to get remote code execution on this

307
00:11:05,880 --> 00:11:08,339
device from either the local network or

308
00:11:08,339 --> 00:11:10,140
over the WAN interface on sort of over

309
00:11:10,140 --> 00:11:12,839
you know via the Internet

310
00:11:12,839 --> 00:11:15,180
um now a lot of these tp-link routers

311
00:11:15,180 --> 00:11:17,700
have this special networking capability

312
00:11:17,700 --> 00:11:19,560
they have this zero configuration

313
00:11:19,560 --> 00:11:21,959
Network management capability and the

314
00:11:21,959 --> 00:11:23,579
idea of this is that when you sort of

315
00:11:23,579 --> 00:11:25,500
add your tp-link device to your local

316
00:11:25,500 --> 00:11:28,200
home network you can just go onto your

317
00:11:28,200 --> 00:11:29,760
mobile phone app and it automatically

318
00:11:29,760 --> 00:11:31,440
detects that you know I've got a new

319
00:11:31,440 --> 00:11:33,300
tp-link device on your network you want

320
00:11:33,300 --> 00:11:35,160
to add this to your you know to your you

321
00:11:35,160 --> 00:11:37,320
know your save configuration and be able

322
00:11:37,320 --> 00:11:40,140
to manipulate it and to do this to sort

323
00:11:40,140 --> 00:11:42,300
of to do this automatic Discovery and

324
00:11:42,300 --> 00:11:44,640
automatic configuration there's some

325
00:11:44,640 --> 00:11:46,680
sort of extra Network Services that run

326
00:11:46,680 --> 00:11:48,600
on tp-link routers

327
00:11:48,600 --> 00:11:51,240
and this is a pretty good attack surface

328
00:11:51,240 --> 00:11:53,940
anything customized anything unique

329
00:11:53,940 --> 00:11:56,339
um is good to act to look at for bugs

330
00:11:56,339 --> 00:11:58,440
now we can just download the firmware

331
00:11:58,440 --> 00:12:01,260
for our router the the tp-link AC 1750

332
00:12:01,260 --> 00:12:02,940
whatever it might be and we can just

333
00:12:02,940 --> 00:12:05,399
look at the Network Services the demons

334
00:12:05,399 --> 00:12:07,320
that Implement that zero configuration

335
00:12:07,320 --> 00:12:09,779
Network management capability now the

336
00:12:09,779 --> 00:12:11,940
code for these Services is closed source

337
00:12:11,940 --> 00:12:13,560
so we don't have the source code to look

338
00:12:13,560 --> 00:12:17,479
at but we do have the binaries

339
00:12:17,760 --> 00:12:19,920
now the demons were originally written

340
00:12:19,920 --> 00:12:22,079
in C C is a very common language to

341
00:12:22,079 --> 00:12:23,820
implement a lot of Network Services in

342
00:12:23,820 --> 00:12:26,820
iot and embedded devices and one binary

343
00:12:26,820 --> 00:12:30,000
in particular is called tddp the tp-link

344
00:12:30,000 --> 00:12:31,860
device Discovery protocol I think if I

345
00:12:31,860 --> 00:12:33,899
recall correctly and I've seen user been

346
00:12:33,899 --> 00:12:36,120
very standard place to put you know

347
00:12:36,120 --> 00:12:38,040
binaries and so forth so I just

348
00:12:38,040 --> 00:12:40,320
decompiled that that binary using Geiger

349
00:12:40,320 --> 00:12:42,779
to recover the source code from the you

350
00:12:42,779 --> 00:12:44,100
know and have a look at the source code

351
00:12:44,100 --> 00:12:46,200
now this source code the decompilation

352
00:12:46,200 --> 00:12:48,000
is that the original source code the

353
00:12:48,000 --> 00:12:49,380
recovery is good but it's nowhere near

354
00:12:49,380 --> 00:12:50,639
as good as the original you don't have

355
00:12:50,639 --> 00:12:52,440
all the symbols you don't even have you

356
00:12:52,440 --> 00:12:54,180
don't have comments of course

357
00:12:54,180 --> 00:12:55,980
um sometimes it doesn't always work

358
00:12:55,980 --> 00:12:58,380
perfectly but it's good enough

359
00:12:58,380 --> 00:13:00,540
um and what I did was I wanted to look

360
00:13:00,540 --> 00:13:02,040
at all

361
00:13:02,040 --> 00:13:04,800
the pre-authentication parts of the

362
00:13:04,800 --> 00:13:06,720
network protocol implemented by this

363
00:13:06,720 --> 00:13:10,260
tddp binary and

364
00:13:10,260 --> 00:13:12,480
if it was if there was a bug in

365
00:13:12,480 --> 00:13:14,339
pre-authentication network packet

366
00:13:14,339 --> 00:13:16,980
passing or configuration that's a pretty

367
00:13:16,980 --> 00:13:20,720
good place to get remote code execution

368
00:13:21,120 --> 00:13:24,300
so this is um one of the functions that

369
00:13:24,300 --> 00:13:26,700
I decompiled and I I found I saw in

370
00:13:26,700 --> 00:13:29,399
ghidra and really the only thing to note

371
00:13:29,399 --> 00:13:30,779
of this function because you don't have

372
00:13:30,779 --> 00:13:32,639
to look at the line by line of this is I

373
00:13:32,639 --> 00:13:34,019
can just talk about it at a higher level

374
00:13:34,019 --> 00:13:35,579
that's you know you don't really need to

375
00:13:35,579 --> 00:13:37,260
know the code here and you might not

376
00:13:37,260 --> 00:13:38,760
even be able to read it it is quite

377
00:13:38,760 --> 00:13:41,399
small but this is a function that

378
00:13:41,399 --> 00:13:43,740
basically implements executing shell

379
00:13:43,740 --> 00:13:46,380
commands it's tddp exact command is the

380
00:13:46,380 --> 00:13:47,820
name of this function it's sort of added

381
00:13:47,820 --> 00:13:49,920
a debug symbol for or debugging

382
00:13:49,920 --> 00:13:51,540
information to us so we actually know

383
00:13:51,540 --> 00:13:54,480
what the function is doing it just

384
00:13:54,480 --> 00:13:56,399
basically executes the shell command if

385
00:13:56,399 --> 00:13:59,519
you pass to it you know a command as as

386
00:13:59,519 --> 00:14:01,800
a string and this is going to be used

387
00:14:01,800 --> 00:14:03,300
later on this is basically a

388
00:14:03,300 --> 00:14:06,480
re-implementation of the system API

389
00:14:06,480 --> 00:14:08,639
um and system is just an API and C in

390
00:14:08,639 --> 00:14:11,700
Unix that just executes shell commands

391
00:14:11,700 --> 00:14:15,360
and as part of this

392
00:14:15,360 --> 00:14:18,420
um pre-authentication

393
00:14:18,959 --> 00:14:21,839
protocol passing of sort of this this

394
00:14:21,839 --> 00:14:23,940
zero configuration networking there's

395
00:14:23,940 --> 00:14:26,579
this one special command called command

396
00:14:26,579 --> 00:14:28,740
f-test config

397
00:14:28,740 --> 00:14:31,019
um so this is pre-authentication if you

398
00:14:31,019 --> 00:14:33,300
basically send a special packet

399
00:14:33,300 --> 00:14:35,519
um with this sort of option to say I'm

400
00:14:35,519 --> 00:14:37,440
going to use this command then it

401
00:14:37,440 --> 00:14:39,360
executes this code it calls this

402
00:14:39,360 --> 00:14:40,620
function

403
00:14:40,620 --> 00:14:44,160
um and so this is a print you know this

404
00:14:44,160 --> 00:14:45,480
is the type of stuff that we want to

405
00:14:45,480 --> 00:14:46,800
audit this is the type of stuff that we

406
00:14:46,800 --> 00:14:48,079
want to find bugs in anything

407
00:14:48,079 --> 00:14:50,519
pre-authentication but does packet

408
00:14:50,519 --> 00:14:53,279
passing is a good Target to audit

409
00:14:53,279 --> 00:14:54,600
and

410
00:14:54,600 --> 00:14:56,220
if we look at the function that

411
00:14:56,220 --> 00:14:59,160
implements this this Um this can this um

412
00:14:59,160 --> 00:15:01,019
what is it called I'll just command

413
00:15:01,019 --> 00:15:03,120
ftest config that's the sort of the the

414
00:15:03,120 --> 00:15:05,100
protocol that it's the part of the

415
00:15:05,100 --> 00:15:07,199
protocol that's doing it eventually gets

416
00:15:07,199 --> 00:15:08,339
to this point again you don't need to

417
00:15:08,339 --> 00:15:09,660
read this code I'm just going to talk

418
00:15:09,660 --> 00:15:11,160
about it but it's sort of just here for

419
00:15:11,160 --> 00:15:12,240
reference

420
00:15:12,240 --> 00:15:14,639
um you get to the end and it executes a

421
00:15:14,639 --> 00:15:16,320
shell command

422
00:15:16,320 --> 00:15:18,300
um and it calls that function that we

423
00:15:18,300 --> 00:15:20,160
talked about earlier that exact command

424
00:15:20,160 --> 00:15:22,620
function that executes the shell command

425
00:15:22,620 --> 00:15:24,120
but we're just calling that instead of

426
00:15:24,120 --> 00:15:26,040
calling the normal system API but we're

427
00:15:26,040 --> 00:15:27,600
based we're executing a shell command

428
00:15:27,600 --> 00:15:29,820
and as part of the shell command it sort

429
00:15:29,820 --> 00:15:33,180
of CDs into temp tftp something and

430
00:15:33,180 --> 00:15:35,279
there's one of the arguments for this um

431
00:15:35,279 --> 00:15:36,660
in this shell command that sort of

432
00:15:36,660 --> 00:15:40,860
expands it uses untrusted import coming

433
00:15:40,860 --> 00:15:44,220
across from the network so as an

434
00:15:44,220 --> 00:15:47,160
attacker on the land we can send this

435
00:15:47,160 --> 00:15:50,040
untrusted input and get this embedded

436
00:15:50,040 --> 00:15:52,880
into this shell command that is executed

437
00:15:52,880 --> 00:15:56,220
pre-authentication in this tdtp

438
00:15:56,220 --> 00:16:00,139
um demon and what we have is a classic

439
00:16:00,139 --> 00:16:03,480
command injection we can just execute

440
00:16:03,480 --> 00:16:05,699
um we can just inject a command using

441
00:16:05,699 --> 00:16:07,920
shell meta characters and embed any a

442
00:16:07,920 --> 00:16:09,959
command to do whatever we want we could

443
00:16:09,959 --> 00:16:12,779
you know we're running as root

444
00:16:12,779 --> 00:16:15,180
um it's PR it's it's it's not running as

445
00:16:15,180 --> 00:16:16,560
a sort of an unprivileged User it's

446
00:16:16,560 --> 00:16:18,420
running as root we can inject a shell

447
00:16:18,420 --> 00:16:20,220
command and get arbitrary code execution

448
00:16:20,220 --> 00:16:23,459
and under emulation this bug is entirely

449
00:16:23,459 --> 00:16:25,740
legitimate and works as expected we can

450
00:16:25,740 --> 00:16:28,260
emulate it uh we can execute arbitrary

451
00:16:28,260 --> 00:16:30,240
commands as root from an unautheticated

452
00:16:30,240 --> 00:16:32,699
user on the land so this seems like a

453
00:16:32,699 --> 00:16:34,500
great bug and when I found it I was

454
00:16:34,500 --> 00:16:36,779
actually very pleased I thought oh this

455
00:16:36,779 --> 00:16:39,720
is you know this is a good you know rce

456
00:16:39,720 --> 00:16:42,899
as root unauthenticated uh it's a good

457
00:16:42,899 --> 00:16:45,600
bug and it's very good bug to um to

458
00:16:45,600 --> 00:16:47,160
command is actually always very good

459
00:16:47,160 --> 00:16:48,740
because you don't have to worry about

460
00:16:48,740 --> 00:16:51,120
the reliability of memory corruption

461
00:16:51,120 --> 00:16:53,100
command injections are typically going

462
00:16:53,100 --> 00:16:55,380
to be much more reliable the problem is

463
00:16:55,380 --> 00:16:57,839
that this

464
00:16:57,839 --> 00:17:01,920
um service the tddp protocol only seems

465
00:17:01,920 --> 00:17:04,859
to be enabled in factory mode so after

466
00:17:04,859 --> 00:17:07,439
it's been sort of freshly installed or

467
00:17:07,439 --> 00:17:09,959
freshly delivered to the customer

468
00:17:09,959 --> 00:17:10,679
um

469
00:17:10,679 --> 00:17:12,959
you have this service running so I mean

470
00:17:12,959 --> 00:17:15,660
and it's not always in factory mode so

471
00:17:15,660 --> 00:17:18,119
it's not necessarily the case that it is

472
00:17:18,119 --> 00:17:20,280
default configuration

473
00:17:20,280 --> 00:17:24,000
um so that's not very good

474
00:17:24,000 --> 00:17:27,059
so the demon only runs in factory mode

475
00:17:27,059 --> 00:17:29,040
settings so it's a vulnerability but

476
00:17:29,040 --> 00:17:31,980
it's not default and

477
00:17:31,980 --> 00:17:34,980
even more interesting or sort of maybe

478
00:17:34,980 --> 00:17:36,120
it's concerning or maybe it's

479
00:17:36,120 --> 00:17:37,440
interesting depending on your point of

480
00:17:37,440 --> 00:17:40,080
view it turns out this TDP but tddp bug

481
00:17:40,080 --> 00:17:41,640
that I found that I thought was a zero

482
00:17:41,640 --> 00:17:43,860
day wasn't even a zero eight it's known

483
00:17:43,860 --> 00:17:45,120
about

484
00:17:45,120 --> 00:17:47,039
um in fact there's a there's a blog post

485
00:17:47,039 --> 00:17:49,440
by a guy

486
00:17:49,440 --> 00:17:52,140
um who talks about the tp-link SR20 a

487
00:17:52,140 --> 00:17:54,419
different router and he documents this

488
00:17:54,419 --> 00:17:56,220
exact bug

489
00:17:56,220 --> 00:17:58,980
um and it's just it's exactly the same

490
00:17:58,980 --> 00:18:01,919
bug in exactly the same service and it

491
00:18:01,919 --> 00:18:03,360
just turns out and they've patched this

492
00:18:03,360 --> 00:18:04,860
on a you know you know a bunch of

493
00:18:04,860 --> 00:18:06,660
devices but it just turns out that many

494
00:18:06,660 --> 00:18:08,760
routers have been patched as a result of

495
00:18:08,760 --> 00:18:10,380
this blog post

496
00:18:10,380 --> 00:18:11,760
um but not all routers they haven't

497
00:18:11,760 --> 00:18:13,440
ported it to all the routers in their

498
00:18:13,440 --> 00:18:14,820
product line that have this service

499
00:18:14,820 --> 00:18:17,700
running so not even a zero day it's sort

500
00:18:17,700 --> 00:18:20,840
of terrible I think

501
00:18:21,179 --> 00:18:24,419
um but if you look a little bit deeper

502
00:18:24,419 --> 00:18:26,760
into the sort of the services that are

503
00:18:26,760 --> 00:18:30,120
starting up there's this weird thing in

504
00:18:30,120 --> 00:18:32,460
the sort of the initialization of this

505
00:18:32,460 --> 00:18:34,320
network Services as as the sort of the

506
00:18:34,320 --> 00:18:36,900
device boot says this call

507
00:18:36,900 --> 00:18:37,679
um

508
00:18:37,679 --> 00:18:40,620
it basically downloads this file off a

509
00:18:40,620 --> 00:18:43,559
hard-coded IP address on your network

510
00:18:43,559 --> 00:18:45,919
and then later on it executes it

511
00:18:45,919 --> 00:18:48,780
it's an auto calibration shell script or

512
00:18:48,780 --> 00:18:50,039
something like that I don't I don't know

513
00:18:50,039 --> 00:18:52,860
what it is what a calibration 2G

514
00:18:52,860 --> 00:18:55,500
it's presumably some sort of development

515
00:18:55,500 --> 00:18:57,000
backdoor just to sort of help

516
00:18:57,000 --> 00:18:59,820
development and sort of debug it but it

517
00:18:59,820 --> 00:19:01,200
downloads with this heart-shaded IP

518
00:19:01,200 --> 00:19:03,660
address and executes his shell script

519
00:19:03,660 --> 00:19:07,620
um so there's a it's a back door

520
00:19:07,620 --> 00:19:09,840
but the developer back door seems to be

521
00:19:09,840 --> 00:19:13,740
only enabled when the tddp Daemon is

522
00:19:13,740 --> 00:19:16,320
enabled as well uh which seems to be

523
00:19:16,320 --> 00:19:19,799
after a factory or reset so this is I

524
00:19:19,799 --> 00:19:23,160
mean is it a zero day I mean if it if it

525
00:19:23,160 --> 00:19:25,679
was having such constraints on on your

526
00:19:25,679 --> 00:19:27,780
bugs isn't very good and really the

527
00:19:27,780 --> 00:19:30,720
solution is just to find better bugs

528
00:19:30,720 --> 00:19:32,400
that's really the solution there's

529
00:19:32,400 --> 00:19:34,679
better bugs out there almost all of

530
00:19:34,679 --> 00:19:36,720
these devices do have more bugs that you

531
00:19:36,720 --> 00:19:39,240
can find so you just got you've just got

532
00:19:39,240 --> 00:19:42,020
to look harder

533
00:19:42,120 --> 00:19:44,280
okay so let's say that we've got a bug

534
00:19:44,280 --> 00:19:46,200
and we'll talk about some some sort of

535
00:19:46,200 --> 00:19:48,600
bugs later on but uh let's you know once

536
00:19:48,600 --> 00:19:50,100
we found our bug you know assuming our

537
00:19:50,100 --> 00:19:52,200
VR process did actually come up with

538
00:19:52,200 --> 00:19:53,640
something useful

539
00:19:53,640 --> 00:19:55,919
and we want to write an exploit the

540
00:19:55,919 --> 00:19:58,500
typical thing that we do is emulate our

541
00:19:58,500 --> 00:20:00,660
device we don't want to sort of develop

542
00:20:00,660 --> 00:20:02,700
an exploit on the real device unless we

543
00:20:02,700 --> 00:20:05,280
have to we would prefer to emulate it so

544
00:20:05,280 --> 00:20:07,020
that we can sort of test out our

545
00:20:07,020 --> 00:20:09,419
exploitation with our full normal tool

546
00:20:09,419 --> 00:20:12,539
chains that we use on our host device at

547
00:20:12,539 --> 00:20:14,220
a sort of a reasonable speed embedded

548
00:20:14,220 --> 00:20:16,020
devices are probably low power or much

549
00:20:16,020 --> 00:20:18,960
more lower power than or less performant

550
00:20:18,960 --> 00:20:21,660
than our than our host machines so I

551
00:20:21,660 --> 00:20:23,520
mean you know it would be nice to

552
00:20:23,520 --> 00:20:25,919
emulate it if we can so we're assuming

553
00:20:25,919 --> 00:20:27,720
that you've downloaded the firmware or

554
00:20:27,720 --> 00:20:29,340
you've acquired the firmware through

555
00:20:29,340 --> 00:20:31,980
physical interfacing or intercepted web

556
00:20:31,980 --> 00:20:33,720
traffic to sort of a person in the

557
00:20:33,720 --> 00:20:35,400
middle a sort of a firmware download or

558
00:20:35,400 --> 00:20:37,020
firmware update so you've got the

559
00:20:37,020 --> 00:20:39,120
firmware and we're assuming that you

560
00:20:39,120 --> 00:20:40,799
sort of extracted the root file system

561
00:20:40,799 --> 00:20:42,900
from the firmware using bin walk or some

562
00:20:42,900 --> 00:20:45,299
other mechanism and it's also a Linux

563
00:20:45,299 --> 00:20:47,400
based device which is very very likely

564
00:20:47,400 --> 00:20:49,200
for a sort of sort of most it devices

565
00:20:49,200 --> 00:20:51,059
today

566
00:20:51,059 --> 00:20:53,340
now the first step we wanted to emulate

567
00:20:53,340 --> 00:20:55,919
it um you know is to sort of you know

568
00:20:55,919 --> 00:20:57,059
we've got the bike we've got firmware

569
00:20:57,059 --> 00:20:59,280
binaries what is the architecture

570
00:20:59,280 --> 00:21:00,780
um you know what architecture should we

571
00:21:00,780 --> 00:21:02,460
emulate it with it could be arm it could

572
00:21:02,460 --> 00:21:04,559
be mips it could be x86

573
00:21:04,559 --> 00:21:06,960
um and mips are probably very common

574
00:21:06,960 --> 00:21:09,059
um arm is the most common I would say

575
00:21:09,059 --> 00:21:11,700
mips are still out there

576
00:21:11,700 --> 00:21:13,140
um actually mips

577
00:21:13,140 --> 00:21:15,240
um if you're Soho router at home or your

578
00:21:15,240 --> 00:21:17,280
embedded devices running mips

579
00:21:17,280 --> 00:21:19,140
um only in recent only in the recent

580
00:21:19,140 --> 00:21:20,760
couple of years has a Linux kernel

581
00:21:20,760 --> 00:21:22,500
actually implemented non-executable

582
00:21:22,500 --> 00:21:23,760
stack

583
00:21:23,760 --> 00:21:25,620
a non-executable stack for the mips

584
00:21:25,620 --> 00:21:28,380
architecture and in all likelihood your

585
00:21:28,380 --> 00:21:30,720
router or your embedded device is using

586
00:21:30,720 --> 00:21:32,220
an old kernel most embedded devices

587
00:21:32,220 --> 00:21:34,500
don't use the latest kernels and so

588
00:21:34,500 --> 00:21:36,000
probably

589
00:21:36,000 --> 00:21:37,799
you know when you think about like you

590
00:21:37,799 --> 00:21:40,500
know old school stack smashing exploits

591
00:21:40,500 --> 00:21:42,960
you know with executable Stacks that's

592
00:21:42,960 --> 00:21:44,940
probably the case for your for some of

593
00:21:44,940 --> 00:21:46,380
these so for some of these embedded

594
00:21:46,380 --> 00:21:48,299
devices that you will see on a sort of a

595
00:21:48,299 --> 00:21:50,820
you know on a regular basis

596
00:21:50,820 --> 00:21:53,700
um so I mean some of these bugs you know

597
00:21:53,700 --> 00:21:55,980
use can be exploited using sort of old

598
00:21:55,980 --> 00:21:57,419
school techniques

599
00:21:57,419 --> 00:21:59,280
but armaments have multiple sort of

600
00:21:59,280 --> 00:22:00,600
architectures the variants of those

601
00:22:00,600 --> 00:22:01,980
architectures so you need to determine

602
00:22:01,980 --> 00:22:03,240
that as well if you're if you're trying

603
00:22:03,240 --> 00:22:04,559
to emulate it

604
00:22:04,559 --> 00:22:07,020
you can run file which is sort of tells

605
00:22:07,020 --> 00:22:08,580
you identify sort of magic byte

606
00:22:08,580 --> 00:22:10,260
sequences in the binary to identify the

607
00:22:10,260 --> 00:22:11,520
file type and you can determine the

608
00:22:11,520 --> 00:22:13,559
architecture based on that you can run

609
00:22:13,559 --> 00:22:15,900
read elf which gives you the Earth

610
00:22:15,900 --> 00:22:18,720
headers and you can actually use get the

611
00:22:18,720 --> 00:22:20,039
all the headers with the minus a

612
00:22:20,039 --> 00:22:22,080
lowercase or minus capital A to get the

613
00:22:22,080 --> 00:22:24,120
architecture information these are some

614
00:22:24,120 --> 00:22:26,100
ways that you can determine the

615
00:22:26,100 --> 00:22:28,740
architecture of your of your binary and

616
00:22:28,740 --> 00:22:30,780
so we're just running file on on this

617
00:22:30,780 --> 00:22:33,299
web service and it says it's an arm

618
00:22:33,299 --> 00:22:35,580
binary it's 32-bit 32-bit is still very

619
00:22:35,580 --> 00:22:37,860
common in in embedded

620
00:22:37,860 --> 00:22:41,100
um especially for what sort of your Soho

621
00:22:41,100 --> 00:22:44,400
style devices that 32-bit is very common

622
00:22:44,400 --> 00:22:46,380
uh we look at the architecture we can

623
00:22:46,380 --> 00:22:48,840
see it's an executable standard it's not

624
00:22:48,840 --> 00:22:50,580
a pi binary position independent

625
00:22:50,580 --> 00:22:52,020
executable so it doesn't use it doesn't

626
00:22:52,020 --> 00:22:53,760
use all the mitigations that you want to

627
00:22:53,760 --> 00:22:56,220
have on a standard desktop very standard

628
00:22:56,220 --> 00:22:58,380
most of these devices don't use all the

629
00:22:58,380 --> 00:23:00,179
mitigations a lot of them don't even use

630
00:23:00,179 --> 00:23:03,120
stacking areas for their buffers or

631
00:23:03,120 --> 00:23:05,340
their stack based buffers so it's um we

632
00:23:05,340 --> 00:23:08,340
can see information running readers

633
00:23:08,340 --> 00:23:10,260
we're going to use the tool called qmu

634
00:23:10,260 --> 00:23:13,799
or quick emulator everyone calls it qumu

635
00:23:13,799 --> 00:23:16,080
it's a Linux tool that can emulate a

636
00:23:16,080 --> 00:23:18,059
variety of architectures

637
00:23:18,059 --> 00:23:20,400
um including

638
00:23:20,400 --> 00:23:23,340
um you know arm mips x86 we can emulate

639
00:23:23,340 --> 00:23:25,500
a whole system uh Boot and I was from a

640
00:23:25,500 --> 00:23:27,240
disk we can emulate user mode

641
00:23:27,240 --> 00:23:29,820
applications as well which is a really

642
00:23:29,820 --> 00:23:31,919
great thing to do we don't need to sort

643
00:23:31,919 --> 00:23:33,799
of emulate an entire operating system

644
00:23:33,799 --> 00:23:35,940
and for quick testing I would actually

645
00:23:35,940 --> 00:23:37,919
say that user mode emulation is a good

646
00:23:37,919 --> 00:23:39,600
place to start but once you've done that

647
00:23:39,600 --> 00:23:41,460
then go to that whole system emulation

648
00:23:41,460 --> 00:23:43,080
and actually run

649
00:23:43,080 --> 00:23:44,820
you know in a proper you know an arm

650
00:23:44,820 --> 00:23:46,799
Linux distro so that you can get more

651
00:23:46,799 --> 00:23:48,000
information

652
00:23:48,000 --> 00:23:49,860
there are a couple of techniques to do

653
00:23:49,860 --> 00:23:52,559
user mode emulation in qmu you can

654
00:23:52,559 --> 00:23:53,880
specify

655
00:23:53,880 --> 00:23:56,580
um the root file system basically using

656
00:23:56,580 --> 00:23:58,559
the minus L option so if you notice

657
00:23:58,559 --> 00:24:01,020
where the firmware libraries are we can

658
00:24:01,020 --> 00:24:03,059
see act route into it and launch a shell

659
00:24:03,059 --> 00:24:04,140
there are a couple of different

660
00:24:04,140 --> 00:24:05,580
approaches I'll show you some examples

661
00:24:05,580 --> 00:24:07,860
of this the minor cell basically option

662
00:24:07,860 --> 00:24:09,960
specifies the library path to use

663
00:24:09,960 --> 00:24:12,299
because your firmware

664
00:24:12,299 --> 00:24:14,760
is going to be using its own version of

665
00:24:14,760 --> 00:24:17,220
Liberty probably you see libsy something

666
00:24:17,220 --> 00:24:19,440
like a micro libsy embedded lib C

667
00:24:19,440 --> 00:24:21,900
version not your standard desktop and so

668
00:24:21,900 --> 00:24:24,000
if you just go into your squash FS route

669
00:24:24,000 --> 00:24:25,919
that we extracted from bin walk and we

670
00:24:25,919 --> 00:24:27,419
downloaded the firmware off we just run

671
00:24:27,419 --> 00:24:30,780
Kimmy um minus capital L to say this is

672
00:24:30,780 --> 00:24:33,059
the prefix for our library path we run

673
00:24:33,059 --> 00:24:36,240
bin LS and we're emulating this firmware

674
00:24:36,240 --> 00:24:39,240
this binary this LS binary uh under the

675
00:24:39,240 --> 00:24:41,039
arm architecture and that's pretty cool

676
00:24:41,039 --> 00:24:43,500
we've just emulated part of our firmware

677
00:24:43,500 --> 00:24:45,480
binary I mean that's that's pretty cool

678
00:24:45,480 --> 00:24:47,400
I think that we can do that and it's so

679
00:24:47,400 --> 00:24:50,580
easy we just run qbr and we're able to

680
00:24:50,580 --> 00:24:52,879
do it

681
00:24:53,520 --> 00:24:55,020
um so I would recommend at this point

682
00:24:55,020 --> 00:24:57,179
once you verify that you can do user

683
00:24:57,179 --> 00:24:58,919
mode emulation

684
00:24:58,919 --> 00:25:00,960
um just um

685
00:25:00,960 --> 00:25:03,900
you know do whole system emulation I'll

686
00:25:03,900 --> 00:25:05,580
get a disk image for a Linux distro

687
00:25:05,580 --> 00:25:07,140
that's running armor whatever it might

688
00:25:07,140 --> 00:25:10,020
be and you can do port forwarding so

689
00:25:10,020 --> 00:25:11,940
that you can SSH into your guest image

690
00:25:11,940 --> 00:25:13,260
as well

691
00:25:13,260 --> 00:25:15,480
there are a bunch of pre-compiled or

692
00:25:15,480 --> 00:25:17,940
pre-built images

693
00:25:17,940 --> 00:25:19,860
um for Debian you can just download

694
00:25:19,860 --> 00:25:21,299
these off the internet so you've got

695
00:25:21,299 --> 00:25:23,640
here for example a mips Linux distro

696
00:25:23,640 --> 00:25:25,799
that you can just emulate income you and

697
00:25:25,799 --> 00:25:27,059
you can just download everything you

698
00:25:27,059 --> 00:25:28,500
don't have to build Debian image

699
00:25:28,500 --> 00:25:30,299
yourself the old images that you can

700
00:25:30,299 --> 00:25:31,799
download but if you want to build a new

701
00:25:31,799 --> 00:25:33,600
one you can do that as well

702
00:25:33,600 --> 00:25:35,700
and you run qmu

703
00:25:35,700 --> 00:25:38,220
with your special you know command line

704
00:25:38,220 --> 00:25:39,960
options I suppose

705
00:25:39,960 --> 00:25:41,820
um specifying the kernel

706
00:25:41,820 --> 00:25:43,980
um the uh the ram disk image that you're

707
00:25:43,980 --> 00:25:45,659
going to use

708
00:25:45,659 --> 00:25:47,520
um you specify the cue card the disk

709
00:25:47,520 --> 00:25:49,740
image of this Debian image that you

710
00:25:49,740 --> 00:25:52,140
downloaded and you're able to emulate an

711
00:25:52,140 --> 00:25:55,559
entire system and now it boots up like a

712
00:25:55,559 --> 00:25:57,240
normal Linux distro

713
00:25:57,240 --> 00:26:00,000
except it's running arm or mips or

714
00:26:00,000 --> 00:26:01,440
whatever it might be

715
00:26:01,440 --> 00:26:02,760
and

716
00:26:02,760 --> 00:26:04,320
you know that's a pretty good place to

717
00:26:04,320 --> 00:26:06,779
be to emulate binaries

718
00:26:06,779 --> 00:26:10,260
SSH into your um your image your your

719
00:26:10,260 --> 00:26:12,299
guest and you've got a root shell

720
00:26:12,299 --> 00:26:14,640
running arm and

721
00:26:14,640 --> 00:26:16,440
there's a trick actually to emulating

722
00:26:16,440 --> 00:26:18,960
Firmware when you've got a system like

723
00:26:18,960 --> 00:26:19,799
this

724
00:26:19,799 --> 00:26:22,380
um you know we've got a a an arm Linux

725
00:26:22,380 --> 00:26:24,720
image now what we're going to do is just

726
00:26:24,720 --> 00:26:26,820
copy the firmware image our root file

727
00:26:26,820 --> 00:26:29,940
system our squash FS root into our guest

728
00:26:29,940 --> 00:26:32,340
and we're going to just ch root into

729
00:26:32,340 --> 00:26:35,900
that squash FS route and then run bnsh

730
00:26:35,900 --> 00:26:39,000
from our firmware and that basically

731
00:26:39,000 --> 00:26:41,039
gives us the shell

732
00:26:41,039 --> 00:26:45,419
uh gives us a shell inside our firmware

733
00:26:45,419 --> 00:26:48,419
on the native architecture emulated by

734
00:26:48,419 --> 00:26:50,640
qmu so that's pretty cool that's a

735
00:26:50,640 --> 00:26:52,620
pretty cool way of doing it

736
00:26:52,620 --> 00:26:55,260
um that's a whole system emulation we

737
00:26:55,260 --> 00:26:57,179
did user mode emulation to start off

738
00:26:57,179 --> 00:26:58,799
with and then we can just transform to

739
00:26:58,799 --> 00:27:00,900
whole system emulation and now we can

740
00:27:00,900 --> 00:27:03,419
just install native tools like GDB and

741
00:27:03,419 --> 00:27:04,740
do all of those things that we want to

742
00:27:04,740 --> 00:27:06,179
do

743
00:27:06,179 --> 00:27:08,520
Okay so we've got our bug or we're

744
00:27:08,520 --> 00:27:11,220
assuming we found a bug we've got our

745
00:27:11,220 --> 00:27:13,320
emulation set up now we actually want to

746
00:27:13,320 --> 00:27:16,399
go write an exploit

747
00:27:16,440 --> 00:27:18,539
um I'll talk about a real zero a day now

748
00:27:18,539 --> 00:27:21,240
and the export development process for

749
00:27:21,240 --> 00:27:23,460
it and I'll give you some background

750
00:27:23,460 --> 00:27:26,460
through manual code review uh the

751
00:27:26,460 --> 00:27:28,559
vulnerability research process basically

752
00:27:28,559 --> 00:27:30,419
just get code review

753
00:27:30,419 --> 00:27:31,919
um this process discovered a

754
00:27:31,919 --> 00:27:34,080
pre-authentication stack based buffer

755
00:27:34,080 --> 00:27:36,659
overflow in a web server implementation

756
00:27:36,659 --> 00:27:39,299
and for this device the attack only

757
00:27:39,299 --> 00:27:43,440
requires a single HTTP get request and

758
00:27:43,440 --> 00:27:46,080
this web interface is enabled by default

759
00:27:46,080 --> 00:27:48,779
on the land side and it can be enabled

760
00:27:48,779 --> 00:27:50,400
on the WAN interface if you're going to

761
00:27:50,400 --> 00:27:51,840
Showdown and you start searching for

762
00:27:51,840 --> 00:27:53,340
this device there's probably a bunch of

763
00:27:53,340 --> 00:27:54,960
them out there

764
00:27:54,960 --> 00:27:56,940
now generally

765
00:27:56,940 --> 00:27:59,039
when you found a bug that one of the

766
00:27:59,039 --> 00:28:00,179
first things you want to do is just

767
00:28:00,179 --> 00:28:02,039
trigger a crash just just to see if this

768
00:28:02,039 --> 00:28:03,840
it's a real bug or not

769
00:28:03,840 --> 00:28:05,580
um I actually did sort of a convoluted

770
00:28:05,580 --> 00:28:07,020
way of doing this I actually compiled

771
00:28:07,020 --> 00:28:09,240
the source code that I had on it

772
00:28:09,240 --> 00:28:11,279
um with debug symbols and what I

773
00:28:11,279 --> 00:28:12,900
realized that I just needed to have a

774
00:28:12,900 --> 00:28:14,760
you know an extra header and when I did

775
00:28:14,760 --> 00:28:16,980
my get request to trigger the bug

776
00:28:16,980 --> 00:28:18,659
which is an important part this is sort

777
00:28:18,659 --> 00:28:20,580
of you know getting the sort of a crash

778
00:28:20,580 --> 00:28:22,679
to trigger um I needed that referrer

779
00:28:22,679 --> 00:28:25,620
header I also needed a timestamp as part

780
00:28:25,620 --> 00:28:27,960
of the get request and the timestamp had

781
00:28:27,960 --> 00:28:29,640
to be within a couple minutes of the web

782
00:28:29,640 --> 00:28:32,700
servers real time and initially I

783
00:28:32,700 --> 00:28:34,380
thought this was sort of that you know

784
00:28:34,380 --> 00:28:35,880
had I figured this out and I realized oh

785
00:28:35,880 --> 00:28:37,260
actually this is a really good thing

786
00:28:37,260 --> 00:28:39,000
because it means that if you are fuzz

787
00:28:39,000 --> 00:28:40,980
testing this service

788
00:28:40,980 --> 00:28:43,799
you probably wouldn't be able to find a

789
00:28:43,799 --> 00:28:46,679
bug like this or reproduce it so manual

790
00:28:46,679 --> 00:28:48,960
code reviewed here found a bug that

791
00:28:48,960 --> 00:28:51,840
probably wasn't particularly easy to

792
00:28:51,840 --> 00:28:53,820
fuzz or probably wasn't going to be

793
00:28:53,820 --> 00:28:56,039
fuzzable because of that time stamp so

794
00:28:56,039 --> 00:28:58,140
that's a good thing it means this bug is

795
00:28:58,140 --> 00:29:00,960
going to be longer lived

796
00:29:00,960 --> 00:29:02,640
um so I emulated the real web server

797
00:29:02,640 --> 00:29:05,360
under qmu

798
00:29:06,059 --> 00:29:09,000
I've got a raised hand

799
00:29:09,000 --> 00:29:11,779
oh

800
00:29:13,140 --> 00:29:15,779
I'll keep on going and I'll I'll I think

801
00:29:15,779 --> 00:29:18,059
I'm going to 9 45 I think my time is but

802
00:29:18,059 --> 00:29:19,440
I'll keep on going

803
00:29:19,440 --> 00:29:21,840
uh The Next Step was to emulate the real

804
00:29:21,840 --> 00:29:24,539
web server under qmu the target

805
00:29:24,539 --> 00:29:26,399
architecture is arm

806
00:29:26,399 --> 00:29:28,679
um the firmware Doug did use data

807
00:29:28,679 --> 00:29:30,179
execution prevention so I didn't have an

808
00:29:30,179 --> 00:29:31,860
executable stack

809
00:29:31,860 --> 00:29:33,779
um it did use asli address space layout

810
00:29:33,779 --> 00:29:36,840
randomization the binary wasn't pi and

811
00:29:36,840 --> 00:29:39,179
didn't use stack canaries

812
00:29:39,179 --> 00:29:42,000
um so that's a good thing I mean that's

813
00:29:42,000 --> 00:29:43,559
that's a pretty good mitigation stat

814
00:29:43,559 --> 00:29:46,940
canaries but it didn't use it

815
00:29:49,580 --> 00:29:52,200
in an Ideal World I would just overwrite

816
00:29:52,200 --> 00:29:54,720
the return address with a gadget to move

817
00:29:54,720 --> 00:29:56,159
the stack pointer into the argument

818
00:29:56,159 --> 00:29:58,380
register and then drop into system it's

819
00:29:58,380 --> 00:30:00,179
a pretty standard exploitation technique

820
00:30:00,179 --> 00:30:02,880
to get sort of execute arbitrary shell

821
00:30:02,880 --> 00:30:04,740
commands

822
00:30:04,740 --> 00:30:06,779
um the tech segment for these gadgets

823
00:30:06,779 --> 00:30:09,299
though contained a null white and you

824
00:30:09,299 --> 00:30:10,980
can't build a rock chain since I need

825
00:30:10,980 --> 00:30:12,779
these null bites into a string based

826
00:30:12,779 --> 00:30:14,039
buffer overflow so that's quite

827
00:30:14,039 --> 00:30:16,700
problematic

828
00:30:17,820 --> 00:30:21,299
um also there's other problems on x86 it

829
00:30:21,299 --> 00:30:23,039
was a clean return address stack

830
00:30:23,039 --> 00:30:25,679
override and on the real Target the web

831
00:30:25,679 --> 00:30:27,600
server crashes before it overwrites the

832
00:30:27,600 --> 00:30:30,000
return address and

833
00:30:30,000 --> 00:30:33,120
um it turns out what happens is that the

834
00:30:33,120 --> 00:30:36,179
web server does some Json processing

835
00:30:36,179 --> 00:30:38,640
using an application pointer stored on

836
00:30:38,640 --> 00:30:40,080
the stack that points to this Json

837
00:30:40,080 --> 00:30:41,880
object and this application when it gets

838
00:30:41,880 --> 00:30:43,919
corrupted by the exploit that does the

839
00:30:43,919 --> 00:30:45,299
buffer overflow so this is a real

840
00:30:45,299 --> 00:30:47,159
problem

841
00:30:47,159 --> 00:30:49,740
um now the web server isn't pi and in

842
00:30:49,740 --> 00:30:52,080
fact the user agent header is stored in

843
00:30:52,080 --> 00:30:53,880
a global data addresses so we can just

844
00:30:53,880 --> 00:30:58,200
create a fake Json object in this fixed

845
00:30:58,200 --> 00:31:01,260
addressable data and we'll modify modify

846
00:31:01,260 --> 00:31:02,760
export to overwrite the cropped

847
00:31:02,760 --> 00:31:04,799
application point it's a to point to our

848
00:31:04,799 --> 00:31:08,100
fake Json object

849
00:31:08,100 --> 00:31:12,360
now fake Json object also stores a kind

850
00:31:12,360 --> 00:31:14,899
of virtual function table or a v table

851
00:31:14,899 --> 00:31:17,640
so we can hijack control Flow by not

852
00:31:17,640 --> 00:31:19,020
overriding the Stack's return address

853
00:31:19,020 --> 00:31:21,960
but by overriding the V table function

854
00:31:21,960 --> 00:31:24,419
pointer and the interesting thing about

855
00:31:24,419 --> 00:31:26,820
this is that we can also bypass stack

856
00:31:26,820 --> 00:31:31,399
canaries if that mitigation was present

857
00:31:32,220 --> 00:31:33,899
um we

858
00:31:33,899 --> 00:31:36,539
actually have to bypass aslr as well now

859
00:31:36,539 --> 00:31:38,580
so

860
00:31:38,580 --> 00:31:40,679
we can basically

861
00:31:40,679 --> 00:31:46,080
um use uh a gadget to Pivot our Rock

862
00:31:46,080 --> 00:31:47,360
chain

863
00:31:47,360 --> 00:31:50,039
then we can call system at PLT we can

864
00:31:50,039 --> 00:31:53,159
bypass aslr in a non-ply binary and our

865
00:31:53,159 --> 00:31:55,320
exploit pretty much Works

866
00:31:55,320 --> 00:31:58,158
um 100 percent

867
00:31:58,679 --> 00:32:01,020
finally I craft a shell command that

868
00:32:01,020 --> 00:32:03,059
Echoes a string to a file to generate an

869
00:32:03,059 --> 00:32:05,220
executable to connect back to me and I

870
00:32:05,220 --> 00:32:07,140
get a root cell and the exploit is 100

871
00:32:07,140 --> 00:32:09,720
reliable and it would work if stacked in

872
00:32:09,720 --> 00:32:11,640
areas were used since it doesn't

873
00:32:11,640 --> 00:32:15,200
overwrite the return address

874
00:32:18,000 --> 00:32:19,980
let's look at a router in a different

875
00:32:19,980 --> 00:32:23,880
vendor let's look at a D-Link router

876
00:32:23,880 --> 00:32:24,539
um

877
00:32:24,539 --> 00:32:26,399
and have a look at sort of a working

878
00:32:26,399 --> 00:32:28,620
export to see what it looks like

879
00:32:28,620 --> 00:32:31,639
let's look at it

880
00:32:31,919 --> 00:32:34,980
and this is a D-Link router this is um

881
00:32:34,980 --> 00:32:37,799
pretty sort of standard Soho router I

882
00:32:37,799 --> 00:32:40,140
just connected it over the network

883
00:32:40,140 --> 00:32:40,980
um

884
00:32:40,980 --> 00:32:43,380
because uh

885
00:32:43,380 --> 00:32:45,059
it's easier than the Wi-Fi for this

886
00:32:45,059 --> 00:32:47,159
setup but Wi-Fi works as well I run the

887
00:32:47,159 --> 00:32:49,620
exploit I'm basically it's a staged

888
00:32:49,620 --> 00:32:51,360
exploit so I'm sort of building up the

889
00:32:51,360 --> 00:32:53,580
payload as I go

890
00:32:53,580 --> 00:32:55,320
um I'm running it does take a few

891
00:32:55,320 --> 00:32:58,039
seconds to run

892
00:33:10,380 --> 00:33:12,960
and I've also started a netcat listener

893
00:33:12,960 --> 00:33:14,519
on another and it's connected back to me

894
00:33:14,519 --> 00:33:16,440
the the router now is connected back to

895
00:33:16,440 --> 00:33:18,360
me running his root I should have a

896
00:33:18,360 --> 00:33:20,640
shell and if I run unit minus a I can

897
00:33:20,640 --> 00:33:22,919
actually see a shell a root shell on

898
00:33:22,919 --> 00:33:25,919
this box uh I will on this router got a

899
00:33:25,919 --> 00:33:27,419
root shell and it's a running an old

900
00:33:27,419 --> 00:33:29,039
version of Linux as well but this is a

901
00:33:29,039 --> 00:33:30,600
Soho router and the interesting about

902
00:33:30,600 --> 00:33:32,279
this router was

903
00:33:32,279 --> 00:33:34,320
um and I've got other router exports of

904
00:33:34,320 --> 00:33:35,460
course but

905
00:33:35,460 --> 00:33:37,860
um they've got demos of but um for this

906
00:33:37,860 --> 00:33:39,960
router I bought it from our local sort

907
00:33:39,960 --> 00:33:42,419
of entertain you know sort of white um

908
00:33:42,419 --> 00:33:44,640
sort of electronics entertainment store

909
00:33:44,640 --> 00:33:46,500
and so forth I just bought one off the

910
00:33:46,500 --> 00:33:47,820
shelf because I thought that would be

911
00:33:47,820 --> 00:33:49,799
you know a good example of a router I

912
00:33:49,799 --> 00:33:50,880
took it home and I looked at the

913
00:33:50,880 --> 00:33:52,200
firmware and actually found on the

914
00:33:52,200 --> 00:33:54,539
vendor website that this

915
00:33:54,539 --> 00:33:58,919
um that this uh this router is end of

916
00:33:58,919 --> 00:33:59,700
life

917
00:33:59,700 --> 00:34:01,620
it was still being sold at my local

918
00:34:01,620 --> 00:34:04,980
store at its end of life and as part of

919
00:34:04,980 --> 00:34:08,399
these devices when it's end of life

920
00:34:08,399 --> 00:34:10,859
they never do firmware updates again so

921
00:34:10,859 --> 00:34:13,500
this exploit is forever present now and

922
00:34:13,500 --> 00:34:15,659
will never be patched and so if you go

923
00:34:15,659 --> 00:34:17,460
on the internet and you go on to show it

924
00:34:17,460 --> 00:34:19,379
and sort of look for

925
00:34:19,379 --> 00:34:22,139
um you know this router you can

926
00:34:22,139 --> 00:34:24,359
guarantee if it's out there then the

927
00:34:24,359 --> 00:34:26,159
export is is present

928
00:34:26,159 --> 00:34:28,379
which isn't a great thing for security I

929
00:34:28,379 --> 00:34:29,399
mean

930
00:34:29,399 --> 00:34:32,219
um a lot of um a lot of countries in

931
00:34:32,219 --> 00:34:33,659
fact have sort of started trying to

932
00:34:33,659 --> 00:34:35,520
address sort of iot problems and

933
00:34:35,520 --> 00:34:37,619
embedded problems and you know I think

934
00:34:37,619 --> 00:34:39,179
Australia has a code of practice and

935
00:34:39,179 --> 00:34:40,500
they've sort of extended that to other

936
00:34:40,500 --> 00:34:42,179
things now they had a code of practice a

937
00:34:42,179 --> 00:34:44,760
few years ago where they sort of set set

938
00:34:44,760 --> 00:34:46,859
guidelines for iot vendors and and

939
00:34:46,859 --> 00:34:49,918
embedded vendors to sort of and lifetime

940
00:34:49,918 --> 00:34:51,359
management of the product was part of

941
00:34:51,359 --> 00:34:52,980
that how do you you know how do you

942
00:34:52,980 --> 00:34:55,020
delete accounts how do you and firmware

943
00:34:55,020 --> 00:34:56,520
updates were part of that having

944
00:34:56,520 --> 00:34:58,020
established you know end-of-life

945
00:34:58,020 --> 00:35:00,540
programs and all of these things are big

946
00:35:00,540 --> 00:35:03,119
concerns and the world is only becoming

947
00:35:03,119 --> 00:35:05,099
more and more connected to it devices

948
00:35:05,099 --> 00:35:07,440
today so

949
00:35:07,440 --> 00:35:09,540
um you know we haven't solved iot but

950
00:35:09,540 --> 00:35:11,400
but people are trying to address it and

951
00:35:11,400 --> 00:35:13,859
as a sort of different communities in

952
00:35:13,859 --> 00:35:15,480
different countries work sort of on this

953
00:35:15,480 --> 00:35:17,040
they're all trying to sort of they

954
00:35:17,040 --> 00:35:18,720
realize it's a problem and are trying to

955
00:35:18,720 --> 00:35:20,760
do something about it I think it will

956
00:35:20,760 --> 00:35:22,440
get better over you know the next five

957
00:35:22,440 --> 00:35:25,020
or so years but I mean right now a lot

958
00:35:25,020 --> 00:35:28,880
of these devices are so vulnerable

959
00:35:30,599 --> 00:35:33,720
so that is the end of my keynote I hope

960
00:35:33,720 --> 00:35:35,160
you liked it it did get a bit technical

961
00:35:35,160 --> 00:35:38,040
at uh quite a number of points but I

962
00:35:38,040 --> 00:35:38,940
think

963
00:35:38,940 --> 00:35:40,920
um you know there's there's insight to

964
00:35:40,920 --> 00:35:42,720
be gained from looking at the state of

965
00:35:42,720 --> 00:35:45,560
I.T security

966
00:35:47,099 --> 00:35:49,680
that do have vulnerabilities uh we need

967
00:35:49,680 --> 00:35:51,480
to make sure that you know that we find

968
00:35:51,480 --> 00:35:53,940
them that we address them uh we take you

969
00:35:53,940 --> 00:35:55,920
know do appropriate things to ensure the

970
00:35:55,920 --> 00:35:58,619
security of our networks to get sort of

971
00:35:58,619 --> 00:36:01,200
build IIT zero days it does take work it

972
00:36:01,200 --> 00:36:05,220
is achievable and we do have a uh our

973
00:36:05,220 --> 00:36:08,099
premises in in Australia and we do run

974
00:36:08,099 --> 00:36:09,900
sort of IIT training and this is some of

975
00:36:09,900 --> 00:36:11,700
the boxes of routers that we use for our

976
00:36:11,700 --> 00:36:13,200
training where we pull them up hard and

977
00:36:13,200 --> 00:36:15,119
these sold the chips and dump firmware

978
00:36:15,119 --> 00:36:17,280
and so forth so thank you very much

979
00:36:17,280 --> 00:36:20,520
again for the invite to B-side Singapore

980
00:36:20,520 --> 00:36:22,859
um I'm uh it's been a real pleasure I'm

981
00:36:22,859 --> 00:36:25,140
very honored that you've invited me and

982
00:36:25,140 --> 00:36:26,700
I will take any questions if you've got

983
00:36:26,700 --> 00:36:28,939
them

