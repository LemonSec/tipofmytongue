1
00:00:00,000 --> 00:00:03,720
morning my time but for you it is a near

2
00:00:03,720 --> 00:00:06,299
the end of the day I will talk as I was

3
00:00:06,299 --> 00:00:08,940
introduced about the app Locker cache

4
00:00:08,940 --> 00:00:11,580
and all the Beauties about the app

5
00:00:11,580 --> 00:00:15,360
Locker cache so um what I'm doing for

6
00:00:15,360 --> 00:00:18,420
life I'm a security researcher and

7
00:00:18,420 --> 00:00:21,180
working as an engineer and at some point

8
00:00:21,180 --> 00:00:24,480
I obtained a project I was involved in

9
00:00:24,480 --> 00:00:26,340
that project related to a blocker and I

10
00:00:26,340 --> 00:00:29,460
started to dig deeper so I dig deeper

11
00:00:29,460 --> 00:00:30,960
and I find a couple of interesting

12
00:00:30,960 --> 00:00:34,500
things inside to quickly introduce you

13
00:00:34,500 --> 00:00:38,780
to the topic and what is all about

14
00:00:38,780 --> 00:00:42,300
it is about application white listing

15
00:00:42,300 --> 00:00:46,440
because the typical approach is to

16
00:00:46,440 --> 00:00:50,579
Blacklist applications I mean it is what

17
00:00:50,579 --> 00:00:53,879
antivirus anti-malware is doing if

18
00:00:53,879 --> 00:00:57,600
something is known to be bad then it

19
00:00:57,600 --> 00:00:59,039
will be blocked with no operating system

20
00:00:59,039 --> 00:01:00,899
if you download the virus you cannot run

21
00:01:00,899 --> 00:01:03,899
it because it is well known to be bad a

22
00:01:03,899 --> 00:01:06,299
white listing is thinking the opposite

23
00:01:06,299 --> 00:01:10,140
way which means if I know something is

24
00:01:10,140 --> 00:01:13,619
good then I will allow it to run if I do

25
00:01:13,619 --> 00:01:15,720
not know any piece of the executable

26
00:01:15,720 --> 00:01:18,060
file it will be not allowed to be run of

27
00:01:18,060 --> 00:01:20,460
course it is not something uh I would

28
00:01:20,460 --> 00:01:24,600
like to have at home as I'm under normal

29
00:01:24,600 --> 00:01:27,000
conditions running a lot of unknown

30
00:01:27,000 --> 00:01:29,460
software every day or compiling my no

31
00:01:29,460 --> 00:01:32,700
and so on so it is mostly for

32
00:01:32,700 --> 00:01:36,000
Enterprises but it is raising the bar or

33
00:01:36,000 --> 00:01:39,479
 for hackers quite high as cannot

34
00:01:39,479 --> 00:01:43,380
run they cannot run anything the it

35
00:01:43,380 --> 00:01:45,659
which is not explicitly Allowed by

36
00:01:45,659 --> 00:01:48,299
administrators Microsoft had his first

37
00:01:48,299 --> 00:01:50,759
approach to the white listing within the

38
00:01:50,759 --> 00:01:53,640
operating system in Windows XP it was

39
00:01:53,640 --> 00:01:56,159
called SRP right now we have three

40
00:01:56,159 --> 00:01:58,100
Technologies

41
00:01:58,100 --> 00:02:01,380
related to White listing it is SRP still

42
00:02:01,380 --> 00:02:05,000
working it is not safe it is easy to be

43
00:02:05,000 --> 00:02:08,699
hacked let's call it this way because it

44
00:02:08,699 --> 00:02:10,619
is enforced within the user mode within

45
00:02:10,619 --> 00:02:13,319
the Explorer process being owned by the

46
00:02:13,319 --> 00:02:16,739
same user which is limited so it is not

47
00:02:16,739 --> 00:02:19,379
really effective one of the best no

48
00:02:19,379 --> 00:02:21,200
solutions for

49
00:02:21,200 --> 00:02:25,200
disabling protection made by SRP is a

50
00:02:25,200 --> 00:02:29,640
small tool called GP disable written by

51
00:02:29,640 --> 00:02:31,739
Mark russinovich but after he joined

52
00:02:31,739 --> 00:02:34,020
Microsoft the tool magically disappeared

53
00:02:34,020 --> 00:02:36,900
from the internet the next technology

54
00:02:36,900 --> 00:02:40,140
was introduced in Windows Vista it was a

55
00:02:40,140 --> 00:02:43,500
blocker internally called SRP version 2.

56
00:02:43,500 --> 00:02:46,680
and this one is enforced by the kernel

57
00:02:46,680 --> 00:02:50,160
driver and has couple of components I

58
00:02:50,160 --> 00:02:52,739
will cover them briefly in a moment the

59
00:02:52,739 --> 00:02:54,599
third technology is Windows Defender

60
00:02:54,599 --> 00:02:57,959
application control WDC and this one

61
00:02:57,959 --> 00:03:00,180
relies on Hardware is the most advanced

62
00:03:00,180 --> 00:03:03,120
one Microsoft is trying to tell us the

63
00:03:03,120 --> 00:03:06,360
will focus more on the WDC in the future

64
00:03:06,360 --> 00:03:10,739
but right now both WDC and applocker are

65
00:03:10,739 --> 00:03:13,680
supported and developed and you can find

66
00:03:13,680 --> 00:03:16,379
some side to side comparison of those

67
00:03:16,379 --> 00:03:19,739
two for some reasons I prefer a blocker

68
00:03:19,739 --> 00:03:21,900
when I have to implement application

69
00:03:21,900 --> 00:03:24,300
white listing but the your experience

70
00:03:24,300 --> 00:03:26,580
maybe maybe it's like slightly different

71
00:03:26,580 --> 00:03:28,860
when it comes to that blocker the main

72
00:03:28,860 --> 00:03:31,220
topic for uh today

73
00:03:31,220 --> 00:03:34,920
the applocker itself has couple of

74
00:03:34,920 --> 00:03:37,200
components of course it has some nice

75
00:03:37,200 --> 00:03:39,360
management maybe not of course because

76
00:03:39,360 --> 00:03:41,819
WDC the comparable solution for right

77
00:03:41,819 --> 00:03:44,159
this thing has no noise management at

78
00:03:44,159 --> 00:03:46,519
all but applocker has some management

79
00:03:46,519 --> 00:03:49,080
including graphical interface Powershell

80
00:03:49,080 --> 00:03:53,640
commandlets and the data being created

81
00:03:53,640 --> 00:03:55,799
within the graphical interface is being

82
00:03:55,799 --> 00:03:58,080
stored within internal applocker

83
00:03:58,080 --> 00:04:00,260
database and there's a special service

84
00:04:00,260 --> 00:04:02,879
application identity Service app ID as

85
00:04:02,879 --> 00:04:03,739
we see

86
00:04:03,739 --> 00:04:07,019
which translates the data then for the

87
00:04:07,019 --> 00:04:09,060
driver there's a kernel driver app

88
00:04:09,060 --> 00:04:12,360
id.sys and the forcing application white

89
00:04:12,360 --> 00:04:15,599
listing in the kernel of course

90
00:04:15,599 --> 00:04:17,760
everything is being logged and we have a

91
00:04:17,760 --> 00:04:19,798
log I will show you every single

92
00:04:19,798 --> 00:04:22,860
component demonstrating uh the hacking

93
00:04:22,860 --> 00:04:24,080
of the cache

94
00:04:24,080 --> 00:04:28,440
later on but quickly covering it I can

95
00:04:28,440 --> 00:04:32,940
say there is a log for applocker log uh

96
00:04:32,940 --> 00:04:36,360
we have a logging of successful and

97
00:04:36,360 --> 00:04:38,940
unsuccessful uh things within the app

98
00:04:38,940 --> 00:04:41,340
Locker okay let's go for the virtual

99
00:04:41,340 --> 00:04:44,699
machine and let's try to see it in

100
00:04:44,699 --> 00:04:47,280
practice when it comes to policies a

101
00:04:47,280 --> 00:04:49,560
blocker and when it comes to the

102
00:04:49,560 --> 00:04:51,500
graphical management first

103
00:04:51,500 --> 00:04:53,180
applocker

104
00:04:53,180 --> 00:04:56,100
is being managed from the local security

105
00:04:56,100 --> 00:04:58,020
policy or through GPO we have

106
00:04:58,020 --> 00:05:00,180
application control places a blocker and

107
00:05:00,180 --> 00:05:03,840
a set of rules we can have rules for

108
00:05:03,840 --> 00:05:05,940
different types of

109
00:05:05,940 --> 00:05:07,979
stuff running within the operating

110
00:05:07,979 --> 00:05:10,100
system in practice

111
00:05:10,100 --> 00:05:13,199
the reasonable approach is to focus on

112
00:05:13,199 --> 00:05:18,360
executable files and on dll files you

113
00:05:18,360 --> 00:05:20,940
cannot see dll here so because if you go

114
00:05:20,940 --> 00:05:23,160
for the properties go to Advanced and

115
00:05:23,160 --> 00:05:26,580
you have to check dll checkbox to have a

116
00:05:26,580 --> 00:05:27,680
dll

117
00:05:27,680 --> 00:05:30,840
being or not being enforced as you can

118
00:05:30,840 --> 00:05:32,460
see the other rules appeared under

119
00:05:32,460 --> 00:05:35,160
enforcement rules appearance on so you

120
00:05:35,160 --> 00:05:39,900
can take in turn it or on or off

121
00:05:39,900 --> 00:05:42,840
uh when you start with a blocker I would

122
00:05:42,840 --> 00:05:45,300
definitely recommend to focus on

123
00:05:45,300 --> 00:05:48,960
executable files first when you play

124
00:05:48,960 --> 00:05:51,380
with a poker more seriously definitely

125
00:05:51,380 --> 00:05:56,100
including dlls is really important I

126
00:05:56,100 --> 00:05:57,840
will show you one of the examples why in

127
00:05:57,840 --> 00:05:59,460
a moment

128
00:05:59,460 --> 00:06:00,120
um

129
00:06:00,120 --> 00:06:02,060
when it comes to the configuration

130
00:06:02,060 --> 00:06:04,919
within the blocker configuration we have

131
00:06:04,919 --> 00:06:08,100
a possibility of working in two

132
00:06:08,100 --> 00:06:11,039
different modes we can enforce rules

133
00:06:11,039 --> 00:06:13,380
which means if the file is not being

134
00:06:13,380 --> 00:06:15,840
whitelisted it will be denied it will be

135
00:06:15,840 --> 00:06:17,539
not allowed to be run

136
00:06:17,539 --> 00:06:21,300
in the audit only nothing happens from

137
00:06:21,300 --> 00:06:24,360
the end user perspective but if an

138
00:06:24,360 --> 00:06:26,880
executable file would be blocked if we

139
00:06:26,880 --> 00:06:28,340
play seriously

140
00:06:28,340 --> 00:06:30,720
the entry will appear within the event

141
00:06:30,720 --> 00:06:33,840
log so from the end user perspective

142
00:06:33,840 --> 00:06:35,580
nothing changes but from the

143
00:06:35,580 --> 00:06:37,979
administrator perspective we have a

144
00:06:37,979 --> 00:06:41,100
great resource allowing us to make our

145
00:06:41,100 --> 00:06:43,860
rules better before we start to enforce

146
00:06:43,860 --> 00:06:44,880
them because we have everything

147
00:06:44,880 --> 00:06:47,460
collected within the log I will work in

148
00:06:47,460 --> 00:06:49,979
the audit only mode to have everything

149
00:06:49,979 --> 00:06:52,620
working at the same time I will be able

150
00:06:52,620 --> 00:06:54,900
to use event lock with some information

151
00:06:54,900 --> 00:06:57,360
something would be blocked to show you

152
00:06:57,360 --> 00:07:00,660
how things are happening inside so so

153
00:07:00,660 --> 00:07:03,600
let's go for the executable rules only

154
00:07:03,600 --> 00:07:05,460
only and for the audit on the

155
00:07:05,460 --> 00:07:08,160
configuration within executable rules I

156
00:07:08,160 --> 00:07:12,000
have two rules being created by default

157
00:07:12,000 --> 00:07:14,039
by Windows the third one I have removed

158
00:07:14,039 --> 00:07:15,720
is to allow everything for

159
00:07:15,720 --> 00:07:18,020
administrators which makes some sense

160
00:07:18,020 --> 00:07:20,819
mostly workstation not review on servers

161
00:07:20,819 --> 00:07:24,360
so here I have two rules of the type of

162
00:07:24,360 --> 00:07:25,500
the path

163
00:07:25,500 --> 00:07:29,639
the first one is if something stays

164
00:07:29,639 --> 00:07:31,919
within program wise folder it is allowed

165
00:07:31,919 --> 00:07:34,440
if something stays within Windows folder

166
00:07:34,440 --> 00:07:39,199
it is allowed it is not the perfect

167
00:07:39,539 --> 00:07:42,900
a set of rules but good enough for

168
00:07:42,900 --> 00:07:45,360
starting for observing uh what is going

169
00:07:45,360 --> 00:07:47,900
on how everything is working etc etc

170
00:07:47,900 --> 00:07:50,819
when it comes to the log within the

171
00:07:50,819 --> 00:07:53,819
event log we have a blocker X and dll I

172
00:07:53,819 --> 00:07:56,160
have created a view over here if I refer

173
00:07:56,160 --> 00:07:57,720
sheet I can see

174
00:07:57,720 --> 00:08:00,599
um my changes within policy I

175
00:08:00,599 --> 00:08:02,699
demonstrated the moment ago being

176
00:08:02,699 --> 00:08:05,220
reflected over here within the log if I

177
00:08:05,220 --> 00:08:07,440
go to the command line if I learned

178
00:08:07,440 --> 00:08:09,960
let's say no but notepad launches

179
00:08:09,960 --> 00:08:12,960
obviously and if I do F5 I can see an

180
00:08:12,960 --> 00:08:13,880
event

181
00:08:13,880 --> 00:08:17,280
80002 notepad was allowed to run which

182
00:08:17,280 --> 00:08:21,000
is following in my rule set because if

183
00:08:21,000 --> 00:08:22,860
something stays within the windows

184
00:08:22,860 --> 00:08:26,340
folder it is allowed and this is

185
00:08:26,340 --> 00:08:28,319
obviously the case

186
00:08:28,319 --> 00:08:32,120
of the notepad let's go

187
00:08:32,120 --> 00:08:35,039
within the app Locker for the first

188
00:08:35,039 --> 00:08:37,200
beauty of that blocker I would like to

189
00:08:37,200 --> 00:08:40,080
demonstrate you right now because this

190
00:08:40,080 --> 00:08:42,599
one is about uh running stuff under

191
00:08:42,599 --> 00:08:45,600
different user uh context

192
00:08:45,600 --> 00:08:46,920
uh

193
00:08:46,920 --> 00:08:52,620
so I will launch a tiny tool I have

194
00:08:52,620 --> 00:08:55,320
created when it comes to the tools I'm

195
00:08:55,320 --> 00:08:57,899
presenting most of those are my own

196
00:08:57,899 --> 00:09:01,260
tools I'm sharing both executable files

197
00:09:01,260 --> 00:09:05,640
compiled Excel or dll and the source

198
00:09:05,640 --> 00:09:08,100
code on my GitHub I will provide you a

199
00:09:08,100 --> 00:09:11,279
set of Links at the very end of the

200
00:09:11,279 --> 00:09:13,740
session so everything is open source and

201
00:09:13,740 --> 00:09:16,019
you are invited to play improve it

202
00:09:16,019 --> 00:09:17,399
whatever

203
00:09:17,399 --> 00:09:22,740
so I will load a dll it is called ignore

204
00:09:22,740 --> 00:09:25,080
blocker dll

205
00:09:25,080 --> 00:09:28,620
so I will load this dll as I said dll

206
00:09:28,620 --> 00:09:31,140
and Dot exit is exactly the same when it

207
00:09:31,140 --> 00:09:33,420
comes to the code execution there is a

208
00:09:33,420 --> 00:09:36,000
different way of making it make it

209
00:09:36,000 --> 00:09:39,839
running for the dot exe file to make it

210
00:09:39,839 --> 00:09:42,120
run you have to double click it or tap

211
00:09:42,120 --> 00:09:46,100
it type its name within the um

212
00:09:46,100 --> 00:09:50,160
command line but when it comes to uh dll

213
00:09:50,160 --> 00:09:53,399
you have to load it somehow and possibly

214
00:09:53,399 --> 00:09:57,360
invoke one of its exported methods to

215
00:09:57,360 --> 00:09:59,820
load the dll we have couple of tools

216
00:09:59,820 --> 00:10:02,480
being built into the operating system

217
00:10:02,480 --> 00:10:04,860
designed for loading dlls for different

218
00:10:04,860 --> 00:10:06,899
purposes like run the other territor

219
00:10:06,899 --> 00:10:11,940
like break s svr and so on we have

220
00:10:11,940 --> 00:10:15,360
couple of unofficial way of loading dlls

221
00:10:15,360 --> 00:10:17,940
and official I mean something that is

222
00:10:17,940 --> 00:10:20,279
happening but Microsoft is not saying

223
00:10:20,279 --> 00:10:23,459
this is the purpose of it for example uh

224
00:10:23,459 --> 00:10:26,220
you know probably the format

225
00:10:26,220 --> 00:10:28,200
um

226
00:10:28,200 --> 00:10:30,720
um utility the format utility allows you

227
00:10:30,720 --> 00:10:32,160
to

228
00:10:32,160 --> 00:10:32,940
um

229
00:10:32,940 --> 00:10:36,959
specify a file system for formatting a

230
00:10:36,959 --> 00:10:37,980
new Drive

231
00:10:37,980 --> 00:10:40,740
if you specify the file system the

232
00:10:40,740 --> 00:10:44,760
appropriate dll is being loaded so there

233
00:10:44,760 --> 00:10:48,839
is a you prefix so if you specify FS

234
00:10:48,839 --> 00:10:53,060
colon NTFS the

235
00:10:53,060 --> 00:10:56,160
untfs.dll dll is being logged by The

236
00:10:56,160 --> 00:10:57,540
Format utility

237
00:10:57,540 --> 00:11:00,680
but what if you specify some

238
00:11:00,680 --> 00:11:03,779
non-existing file system for example

239
00:11:03,779 --> 00:11:08,700
test the u-test.dll is loaded by the

240
00:11:08,700 --> 00:11:10,380
formal utility this is how format

241
00:11:10,380 --> 00:11:13,200
utility is working is is actually the

242
00:11:13,200 --> 00:11:15,240
side loading of the dll is affected my

243
00:11:15,240 --> 00:11:18,420
research from some months ago but you

244
00:11:18,420 --> 00:11:21,120
can load your dlls using this well this

245
00:11:21,120 --> 00:11:23,519
way for example which is absolutely

246
00:11:23,519 --> 00:11:25,920
unofficial but working so

247
00:11:25,920 --> 00:11:27,779
um probably will be used Sooner or Later

248
00:11:27,779 --> 00:11:31,200
by by some uh beta course anyway I will

249
00:11:31,200 --> 00:11:33,260
stick to the standard

250
00:11:33,260 --> 00:11:37,140
method of loading dll if I refresh my

251
00:11:37,140 --> 00:11:39,420
log by the way you can clearly see

252
00:11:39,420 --> 00:11:41,600
format was allowed to run

253
00:11:41,600 --> 00:11:46,700
the extension of the format is like late

254
00:11:46,700 --> 00:11:49,560
80s from the previous Century but who

255
00:11:49,560 --> 00:11:52,920
cares actually what I do right now I

256
00:11:52,920 --> 00:11:56,160
will launch run dll 32 which is

257
00:11:56,160 --> 00:11:58,860
perfectly allowed in any single

258
00:11:58,860 --> 00:12:01,200
environment because it is important part

259
00:12:01,200 --> 00:12:04,200
of the Windows operating system so

260
00:12:04,200 --> 00:12:09,420
run dll 32 and I will specify the dll if

261
00:12:09,420 --> 00:12:11,399
this is my ignore block already alert

262
00:12:11,399 --> 00:12:14,100
then I will specify a meter to it this

263
00:12:14,100 --> 00:12:17,040
is how the method is called in my

264
00:12:17,040 --> 00:12:18,180
environment

265
00:12:18,180 --> 00:12:20,579
in my dll

266
00:12:20,579 --> 00:12:22,860
um I called it this way then I will

267
00:12:22,860 --> 00:12:26,820
specify a full path to the executable

268
00:12:26,820 --> 00:12:29,660
file so see Windows

269
00:12:29,660 --> 00:12:31,880
1032

270
00:12:31,880 --> 00:12:36,720
cmd.exe is the full path and new CMD is

271
00:12:36,720 --> 00:12:40,740
loud uh not the big deal so far the

272
00:12:40,740 --> 00:12:42,899
interesting thing is who am I here

273
00:12:42,899 --> 00:12:46,560
because where my slash all I will

274
00:12:46,560 --> 00:12:49,139
display me I'm a local system this is

275
00:12:49,139 --> 00:12:52,440
how my dll is working and when the very

276
00:12:52,440 --> 00:12:55,380
very important thing here is this

277
00:12:55,380 --> 00:12:59,279
particular seed and group being present

278
00:12:59,279 --> 00:13:02,040
within the token why it is present here

279
00:13:02,040 --> 00:13:04,019
because I took the token from the

280
00:13:04,019 --> 00:13:05,180
spoiler Service

281
00:13:05,180 --> 00:13:07,740
uh I I

282
00:13:07,740 --> 00:13:10,800
um there is a stealing a token technique

283
00:13:10,800 --> 00:13:13,800
or duplicating a tote can depends on the

284
00:13:13,800 --> 00:13:16,320
context so it is what I did within the

285
00:13:16,320 --> 00:13:18,860
dll so right now I have a command line

286
00:13:18,860 --> 00:13:22,800
uh with this seed being present in the

287
00:13:22,800 --> 00:13:25,800
token of the process I launched first

288
00:13:25,800 --> 00:13:29,040
utility where my slash all I will I can

289
00:13:29,040 --> 00:13:31,680
launch another one no but whatever

290
00:13:31,680 --> 00:13:34,079
everything is working simply say but

291
00:13:34,079 --> 00:13:36,959
let's go to the log right now if you go

292
00:13:36,959 --> 00:13:40,079
for the log if you refresh level the

293
00:13:40,079 --> 00:13:42,180
last thing you can observe in the loan

294
00:13:42,180 --> 00:13:45,420
it is run dll no single piece of

295
00:13:45,420 --> 00:13:48,420
information about CMD in new instance

296
00:13:48,420 --> 00:13:51,839
about the who am I utility about notepad

297
00:13:51,839 --> 00:13:55,260
whatever nothing appears here within the

298
00:13:55,260 --> 00:13:59,519
log why because if a process within

299
00:13:59,519 --> 00:14:04,040
Windows contains this particular seed

300
00:14:04,040 --> 00:14:05,880
within that

301
00:14:05,880 --> 00:14:10,860
token such process is totally ignored by

302
00:14:10,860 --> 00:14:12,540
a blocker both when it comes to

303
00:14:12,540 --> 00:14:16,260
enforcement and when it comes to uh

304
00:14:16,260 --> 00:14:19,019
logging it so if you are able to create

305
00:14:19,019 --> 00:14:22,760
a process having this seed in the token

306
00:14:22,760 --> 00:14:26,940
you went off the blocker control and you

307
00:14:26,940 --> 00:14:28,019
will be not

308
00:14:28,019 --> 00:14:33,480
um touched by applocker any way so up to

309
00:14:33,480 --> 00:14:35,700
you it is one of the ways of hacking a

310
00:14:35,700 --> 00:14:38,579
blocker I believe it is quite nice

311
00:14:38,579 --> 00:14:39,240
um

312
00:14:39,240 --> 00:14:42,899
and may be helpful I will close it and

313
00:14:42,899 --> 00:14:45,839
let's go for the next part which is

314
00:14:45,839 --> 00:14:48,680
really about the caching and hacking the

315
00:14:48,680 --> 00:14:52,680
cache so let's focus on the more

316
00:14:52,680 --> 00:14:57,180
interesting topic here on the desktop of

317
00:14:57,180 --> 00:15:00,120
my virtual machine I will minimize my

318
00:15:00,120 --> 00:15:01,339
Event Viewer

319
00:15:01,339 --> 00:15:04,820
here comes the

320
00:15:04,940 --> 00:15:07,800
the command line

321
00:15:07,800 --> 00:15:11,699
I have write a a utility I will run it

322
00:15:11,699 --> 00:15:14,760
in a moment it is a really simple tool

323
00:15:14,760 --> 00:15:19,019
um I will make a rule allowing it to run

324
00:15:19,019 --> 00:15:23,820
so as I said we can have three different

325
00:15:23,820 --> 00:15:26,880
types of rules the first one is about

326
00:15:26,880 --> 00:15:28,500
the path you can see it on the screen

327
00:15:28,500 --> 00:15:33,740
the second one is about the um

328
00:15:33,740 --> 00:15:37,680
publisher which means it is about the

329
00:15:37,680 --> 00:15:40,079
digital signature so if something is

330
00:15:40,079 --> 00:15:42,360
being digitally signed by Microsoft it

331
00:15:42,360 --> 00:15:43,920
is allowed to be run

332
00:15:43,920 --> 00:15:46,800
it does not matter which path

333
00:15:46,800 --> 00:15:49,980
um this particular executable file has

334
00:15:49,980 --> 00:15:52,380
and so on you can create another rule

335
00:15:52,380 --> 00:15:54,779
for Adobe quite common in environments

336
00:15:54,779 --> 00:15:57,240
Etc and you know only legitimate

337
00:15:57,240 --> 00:15:59,699
software from those Publishers will be

338
00:15:59,699 --> 00:16:02,639
allowed to be run by a couple of very

339
00:16:02,639 --> 00:16:05,279
simple rules you can allow a lot of

340
00:16:05,279 --> 00:16:07,380
application with one rule which is

341
00:16:07,380 --> 00:16:08,360
always

342
00:16:08,360 --> 00:16:11,579
beneficial and of course if you feel it

343
00:16:11,579 --> 00:16:13,500
is good enough for you

344
00:16:13,500 --> 00:16:16,079
and the third type of the rule next to

345
00:16:16,079 --> 00:16:19,500
path and the publisher is the hash Rule

346
00:16:19,500 --> 00:16:22,980
and the harsh rule creates a hash of the

347
00:16:22,980 --> 00:16:26,579
executable file and if the hash of the

348
00:16:26,579 --> 00:16:29,660
rule matches the hash of the real file

349
00:16:29,660 --> 00:16:32,519
the file is allowed to be run if the

350
00:16:32,519 --> 00:16:34,680
hash does not match the file is not

351
00:16:34,680 --> 00:16:38,040
allowed to be run what is the best thing

352
00:16:38,040 --> 00:16:41,519
about using hashes the management of

353
00:16:41,519 --> 00:16:43,860
such rules will be a nightmare try to

354
00:16:43,860 --> 00:16:46,259
imagine you have created nicely a

355
00:16:46,259 --> 00:16:48,240
prepared rule for every single

356
00:16:48,240 --> 00:16:50,040
executable file within your environment

357
00:16:50,040 --> 00:16:52,380
based on hash and then the second

358
00:16:52,380 --> 00:16:54,500
Tuesday of the months month is coming

359
00:16:54,500 --> 00:16:57,480
and some files are being replaced by

360
00:16:57,480 --> 00:17:00,480
their patched versions so their hashes

361
00:17:00,480 --> 00:17:03,839
clearly do not match so rules are

362
00:17:03,839 --> 00:17:05,880
blocking such stuff because something

363
00:17:05,880 --> 00:17:09,480
was updated so managing hash rules will

364
00:17:09,480 --> 00:17:13,260
be quite complex task at the same time I

365
00:17:13,260 --> 00:17:15,959
can say harsh rules are the safest one

366
00:17:15,959 --> 00:17:18,660
because if you change any single bit

367
00:17:18,660 --> 00:17:21,720
within the executable file the hash will

368
00:17:21,720 --> 00:17:25,799
not match so any an authorized changed

369
00:17:25,799 --> 00:17:29,220
will be effectively blocked I will

370
00:17:29,220 --> 00:17:32,640
create a hash rule for my file I have it

371
00:17:32,640 --> 00:17:36,120
on the desktop so create new rule I will

372
00:17:36,120 --> 00:17:38,580
go through the wizard it is hello for

373
00:17:38,580 --> 00:17:41,820
everyone let's keep it simple file hash

374
00:17:41,820 --> 00:17:45,840
I will specify the file I'm referring to

375
00:17:45,840 --> 00:17:51,059
on the desktop right IAA open create and

376
00:17:51,059 --> 00:17:55,740
I have a rule over here right now if I

377
00:17:55,740 --> 00:18:00,299
try to run less write a utility this is

378
00:18:00,299 --> 00:18:01,200
the

379
00:18:01,200 --> 00:18:03,539
uh one

380
00:18:03,539 --> 00:18:04,919
um

381
00:18:04,919 --> 00:18:07,380
you can see it is running it is uh

382
00:18:07,380 --> 00:18:09,840
arriving 100 a letters on the screen

383
00:18:09,840 --> 00:18:12,539
because uh it is easy to manipulate if

384
00:18:12,539 --> 00:18:15,299
it's working this this way if I go to

385
00:18:15,299 --> 00:18:18,780
the load uh if I refresh icons clearly

386
00:18:18,780 --> 00:18:22,940
see a right AAA was allowed to

387
00:18:22,940 --> 00:18:26,340
uh run so

388
00:18:26,340 --> 00:18:29,039
not a big deal here I have allowed a

389
00:18:29,039 --> 00:18:32,039
file with a particular hash to be to be

390
00:18:32,039 --> 00:18:34,140
run if I run this file I can see it is

391
00:18:34,140 --> 00:18:39,059
allowed what I do right now I will

392
00:18:39,059 --> 00:18:43,500
attack a vhd drive I have my virtual

393
00:18:43,500 --> 00:18:46,440
machine over here if I try to

394
00:18:46,440 --> 00:18:48,900
demonstrate the same or hack the same

395
00:18:48,900 --> 00:18:51,299
way in the real environment I have to

396
00:18:51,299 --> 00:18:53,940
plug this out then manipulate the disk

397
00:18:53,940 --> 00:18:57,120
and the plug disk in okay let's go with

398
00:18:57,120 --> 00:18:58,700
the Virtual Drive

399
00:18:58,700 --> 00:19:02,240
attach vhd

400
00:19:06,260 --> 00:19:09,480
and the new Drive is appearing over here

401
00:19:09,480 --> 00:19:14,039
I will copy my time utility to the X

402
00:19:14,039 --> 00:19:17,760
drive so for the right IAA to the X

403
00:19:17,760 --> 00:19:21,679
drive I can right now run it from the X

404
00:19:21,679 --> 00:19:25,200
write a drive or obviously it is running

405
00:19:25,200 --> 00:19:26,419
and

406
00:19:26,419 --> 00:19:30,360
obviously within the even low there is

407
00:19:30,360 --> 00:19:33,780
an entry it was allowed to be run for a

408
00:19:33,780 --> 00:19:37,380
reason because it has matches my rule

409
00:19:37,380 --> 00:19:40,740
which is not a big deal okay what I'm

410
00:19:40,740 --> 00:19:46,160
doing right now I will detach the vhd

411
00:19:46,160 --> 00:19:51,480
okay and I will launch a Binary Editor I

412
00:19:51,480 --> 00:19:54,780
have on my desktop

413
00:19:54,780 --> 00:19:56,580
and uh

414
00:19:56,580 --> 00:20:00,179
I will do a trick I I did the last time

415
00:20:00,179 --> 00:20:03,780
probably when I was a teenager replacing

416
00:20:03,780 --> 00:20:06,600
parts of the executable file with some

417
00:20:06,600 --> 00:20:09,299
other string and

418
00:20:09,299 --> 00:20:11,120
to make it display something different

419
00:20:11,120 --> 00:20:13,380
Ctrl f

420
00:20:13,380 --> 00:20:16,740
AAA and here you can see the pattern

421
00:20:16,740 --> 00:20:18,780
being displayed by my executable file

422
00:20:18,780 --> 00:20:21,720
and I will replace bunch of my AAA

423
00:20:21,720 --> 00:20:25,200
letters with let's say xxxx

424
00:20:25,200 --> 00:20:27,660
and I will save it

425
00:20:27,660 --> 00:20:33,840
I will close it and I I will attach the

426
00:20:33,840 --> 00:20:37,140
drive again so action

427
00:20:37,140 --> 00:20:39,720
vhd

428
00:20:39,720 --> 00:20:42,240
C and

429
00:20:42,240 --> 00:20:43,820
um

430
00:20:43,820 --> 00:20:47,520
the HDX

431
00:20:47,520 --> 00:20:52,140
X driver appeared and right now if I

432
00:20:52,140 --> 00:20:54,780
issue the same command

433
00:20:54,780 --> 00:20:57,600
that string will be manipulated I

434
00:20:57,600 --> 00:21:00,299
changed the binary way on a disk which

435
00:21:00,299 --> 00:21:03,900
was offline on this line so you clearly

436
00:21:03,900 --> 00:21:07,140
see a series of X letter it is exactly

437
00:21:07,140 --> 00:21:11,100
what I changed I hope it is not a magic

438
00:21:11,100 --> 00:21:13,080
up to this point the more interesting

439
00:21:13,080 --> 00:21:14,600
thing

440
00:21:14,600 --> 00:21:18,299
comes now because I will take a look

441
00:21:18,299 --> 00:21:21,960
into the log so a file was manipulated

442
00:21:21,960 --> 00:21:23,940
because it is working slightly different

443
00:21:23,940 --> 00:21:28,200
way than previously if I refresh it here

444
00:21:28,200 --> 00:21:30,240
you can see a warning it is related to

445
00:21:30,240 --> 00:21:32,700
my hex editor I used for the

446
00:21:32,700 --> 00:21:37,520
manipulation but the file the X right a

447
00:21:37,520 --> 00:21:40,799
was allowed to run and the question is

448
00:21:40,799 --> 00:21:42,780
why

449
00:21:42,780 --> 00:21:47,760
and the answer is quite complex as a

450
00:21:47,760 --> 00:21:51,840
for the speed of a blocker

451
00:21:51,840 --> 00:21:52,679
um

452
00:21:52,679 --> 00:21:56,400
the mechan is within a blocker caches

453
00:21:56,400 --> 00:21:58,620
that file hash

454
00:21:58,620 --> 00:22:01,919
and if I manipulate the file offline on

455
00:22:01,919 --> 00:22:03,260
a detached drive

456
00:22:03,260 --> 00:22:07,620
no one realized I changed the executable

457
00:22:07,620 --> 00:22:12,720
file and no one updated or invalidated

458
00:22:12,720 --> 00:22:18,480
the cache so the kernel driver enforcing

459
00:22:18,480 --> 00:22:21,179
the execution relies on the cached

460
00:22:21,179 --> 00:22:24,360
information and no one knows the cached

461
00:22:24,360 --> 00:22:28,919
information is not very up-to-date at I

462
00:22:28,919 --> 00:22:33,299
would say so let's take a look at the

463
00:22:33,299 --> 00:22:36,600
cache because it is quite interesting I

464
00:22:36,600 --> 00:22:37,679
believe

465
00:22:37,679 --> 00:22:40,980
I will run powerful

466
00:22:40,980 --> 00:22:45,600
and I will use a get a file hash command

467
00:22:45,600 --> 00:22:48,419
to calculate the hash for the original

468
00:22:48,419 --> 00:22:51,480
file so the hash for the original file

469
00:22:51,480 --> 00:22:54,419
the schwa256 being calculated by default

470
00:22:54,419 --> 00:22:59,220
you can see over here if I do the same

471
00:22:59,220 --> 00:23:01,740
for the

472
00:23:01,740 --> 00:23:06,000
X the manipulated one the cache the

473
00:23:06,000 --> 00:23:10,799
sorry the hash is clearly different so

474
00:23:10,799 --> 00:23:14,700
we can see here the real information not

475
00:23:14,700 --> 00:23:17,960
the cached information

476
00:23:18,480 --> 00:23:21,799
um what the

477
00:23:21,799 --> 00:23:25,320
applocker policy says let's display the

478
00:23:25,320 --> 00:23:28,559
applocker policy in the in its raw XML

479
00:23:28,559 --> 00:23:32,580
form using Powershell as well get a plug

480
00:23:32,580 --> 00:23:37,080
their policy and minus local and

481
00:23:37,080 --> 00:23:37,919
um

482
00:23:37,919 --> 00:23:40,100
I will put this this way

483
00:23:40,100 --> 00:23:44,940
to XML to XML

484
00:23:44,940 --> 00:23:47,820
and you can see here the policy of a

485
00:23:47,820 --> 00:23:50,580
blocker saying all files located in the

486
00:23:50,580 --> 00:23:53,940
windows folder etc etc and here you can

487
00:23:53,940 --> 00:23:58,620
see a file hash rule allo file hash

488
00:23:58,620 --> 00:24:02,220
condition file and here you can see the

489
00:24:02,220 --> 00:24:06,360
condition file hash type Schwab 256 and

490
00:24:06,360 --> 00:24:10,500
the data comes here and here the first

491
00:24:10,500 --> 00:24:14,340
quite interesting thing happens as you

492
00:24:14,340 --> 00:24:18,480
can see the hash uh being stored by app

493
00:24:18,480 --> 00:24:22,740
Locker does not match the original nor

494
00:24:22,740 --> 00:24:27,059
the modified file the question is why so

495
00:24:27,059 --> 00:24:29,220
what is going on

496
00:24:29,220 --> 00:24:31,380
and the answer is pretty pretty

497
00:24:31,380 --> 00:24:35,760
interesting despite this schwa256

498
00:24:35,760 --> 00:24:38,900
information over here this particular

499
00:24:38,900 --> 00:24:44,280
hash is not schwa256 at all this is the

500
00:24:44,280 --> 00:24:49,100
real schwaco 56 hash uh function result

501
00:24:49,100 --> 00:24:55,020
this one is not sure 256. Microsoft does

502
00:24:55,020 --> 00:24:57,840
not clearly document what is going on

503
00:24:57,840 --> 00:25:00,720
here but this particular piece of the

504
00:25:00,720 --> 00:25:05,480
hash matches so called uh

505
00:25:05,480 --> 00:25:09,000
authentic code hash the algorithm for

506
00:25:09,000 --> 00:25:12,059
calculating authenticode hash is well

507
00:25:12,059 --> 00:25:14,640
known Microsoft users is heavily for

508
00:25:14,640 --> 00:25:17,340
digital signatures for the digitally

509
00:25:17,340 --> 00:25:21,179
signing files but no one is saying

510
00:25:21,179 --> 00:25:24,480
clearly a blocker uses the same way of

511
00:25:24,480 --> 00:25:27,240
hashing we can see harsh matches so

512
00:25:27,240 --> 00:25:30,240
there is a good reason to guess it's the

513
00:25:30,240 --> 00:25:35,580
same one but no one says it clearly so

514
00:25:35,580 --> 00:25:38,760
how to calculate a hash of a file if you

515
00:25:38,760 --> 00:25:42,059
need it the best possible approach is to

516
00:25:42,059 --> 00:25:44,580
go for get

517
00:25:44,580 --> 00:25:45,539
um

518
00:25:45,539 --> 00:25:50,700
a blocker file information and then take

519
00:25:50,700 --> 00:25:53,340
a file and you can see only the

520
00:25:53,340 --> 00:25:55,799
beginning of the hash but it clearly

521
00:25:55,799 --> 00:25:58,740
matches uh this beginning of the harsh

522
00:25:58,740 --> 00:26:01,500
so it is exactly the same one and again

523
00:26:01,500 --> 00:26:04,500
you can see shwat256 over here which is

524
00:26:04,500 --> 00:26:06,900
absolutely not true it is not true at

525
00:26:06,900 --> 00:26:08,820
256 and

526
00:26:08,820 --> 00:26:14,039
of the file at all you can use very

527
00:26:14,039 --> 00:26:16,860
undocumented feature of a blocker and

528
00:26:16,860 --> 00:26:20,159
specifies what a real SWAT 256 hash over

529
00:26:20,159 --> 00:26:23,159
here but the type here in the config

530
00:26:23,159 --> 00:26:24,559
file must be

531
00:26:24,559 --> 00:26:29,100
1256 flat and it is not documented but

532
00:26:29,100 --> 00:26:31,559
it works and you can

533
00:26:31,559 --> 00:26:33,600
um work this way if you are brave enough

534
00:26:33,600 --> 00:26:35,460
and you believe Microsoft will not

535
00:26:35,460 --> 00:26:37,500
change it in the future future without

536
00:26:37,500 --> 00:26:40,799
telling us okay anyway uh right here

537
00:26:40,799 --> 00:26:44,520
what we can see and uh what is happening

538
00:26:44,520 --> 00:26:45,960
over here right now

539
00:26:45,960 --> 00:26:49,020
I have the original file the modified

540
00:26:49,020 --> 00:26:51,720
file and the rule

541
00:26:51,720 --> 00:26:52,679
um

542
00:26:52,679 --> 00:26:55,260
for this particular file by the way if I

543
00:26:55,260 --> 00:26:58,020
calculate the same for the X you will

544
00:26:58,020 --> 00:26:59,960
clearly see

545
00:26:59,960 --> 00:27:03,840
uh it is a different one so it is not

546
00:27:03,840 --> 00:27:07,500
like this hash is not good enough for uh

547
00:27:07,500 --> 00:27:11,100
working uh it is good uh but it is not

548
00:27:11,100 --> 00:27:13,320
about uh this algorithm it's just as

549
00:27:13,320 --> 00:27:16,260
like a site site thing over here to let

550
00:27:16,260 --> 00:27:19,559
it let you know I will exit uh the

551
00:27:19,559 --> 00:27:21,840
Powershell and

552
00:27:21,840 --> 00:27:22,500
um

553
00:27:22,500 --> 00:27:25,020
I started at some point when I realized

554
00:27:25,020 --> 00:27:28,020
what is going on uh I after I had

555
00:27:28,020 --> 00:27:30,980
realized I can run and modified

556
00:27:30,980 --> 00:27:35,279
literally modified file and seeing it is

557
00:27:35,279 --> 00:27:38,460
allowed to run despite totally different

558
00:27:38,460 --> 00:27:39,480
hash

559
00:27:39,480 --> 00:27:43,260
uh the rule specifies I started to

560
00:27:43,260 --> 00:27:46,620
suspect some caching being involved so

561
00:27:46,620 --> 00:27:50,760
where such cache is being stored and the

562
00:27:50,760 --> 00:27:54,120
answer is such cache is being stored

563
00:27:54,120 --> 00:27:57,900
within a special file metadata on the

564
00:27:57,900 --> 00:28:01,320
NTFS file system and the metadata is

565
00:28:01,320 --> 00:28:03,539
called extended attribute

566
00:28:03,539 --> 00:28:05,520
and um

567
00:28:05,520 --> 00:28:07,799
if you know

568
00:28:07,799 --> 00:28:11,520
um alternate data streams you can think

569
00:28:11,520 --> 00:28:14,880
about extended attributes like alternate

570
00:28:14,880 --> 00:28:18,179
data streams on steroids it is somehow

571
00:28:18,179 --> 00:28:19,620
comparable

572
00:28:19,620 --> 00:28:23,120
so how to play with

573
00:28:23,120 --> 00:28:26,580
extended attributes to display it I will

574
00:28:26,580 --> 00:28:29,520
use the built-in utility one of the most

575
00:28:29,520 --> 00:28:31,140
powerful Utilities in Windows the most

576
00:28:31,140 --> 00:28:32,820
powerful when it comes to the file

577
00:28:32,820 --> 00:28:38,159
systems fsut FS you will file

578
00:28:38,159 --> 00:28:41,100
maybe I will open the second pencil to

579
00:28:41,100 --> 00:28:46,380
have both handy okay over here and FSU

580
00:28:46,380 --> 00:28:49,400
till file

581
00:28:49,400 --> 00:28:55,520
a second CD user or file

582
00:28:55,520 --> 00:28:59,840
desktop and now FSU deal

583
00:28:59,840 --> 00:29:04,980
FSU till file and here you can see one

584
00:29:04,980 --> 00:29:07,380
of the sub commands of the FSU till for

585
00:29:07,380 --> 00:29:11,520
displaying extended attributes of a file

586
00:29:11,520 --> 00:29:14,820
if I display extended attributes

587
00:29:14,820 --> 00:29:17,580
if I display extended attributes for

588
00:29:17,580 --> 00:29:23,100
them where AA for the my right a and the

589
00:29:23,100 --> 00:29:26,340
desktop you can see those extended

590
00:29:26,340 --> 00:29:29,820
attributes and this one the first one

591
00:29:29,820 --> 00:29:31,200
over here

592
00:29:31,200 --> 00:29:35,640
uh with the aib one identifier you can

593
00:29:35,640 --> 00:29:39,799
see it stores some numerical value being

594
00:29:39,799 --> 00:29:44,820
6e38 AF etc etc let's go to the previous

595
00:29:44,820 --> 00:29:46,799
console

596
00:29:46,799 --> 00:29:50,220
probably you can see it is exactly the

597
00:29:50,220 --> 00:29:55,020
same data as we have here within the uh

598
00:29:55,020 --> 00:29:59,340
applocker rules are the same data I have

599
00:29:59,340 --> 00:30:02,820
calculated using a get a blocker file

600
00:30:02,820 --> 00:30:05,820
information so here this particular

601
00:30:05,820 --> 00:30:10,200
extended attribute stores the hash of

602
00:30:10,200 --> 00:30:13,620
the file why because reading one

603
00:30:13,620 --> 00:30:16,380
extended attribute is significantly

604
00:30:16,380 --> 00:30:19,980
faster than reading an entire file and

605
00:30:19,980 --> 00:30:22,799
the calcul and calculating the hash from

606
00:30:22,799 --> 00:30:25,320
the entire file so keeping it in the

607
00:30:25,320 --> 00:30:28,980
cache is beneficial from the speed

608
00:30:28,980 --> 00:30:30,539
perspective

609
00:30:30,539 --> 00:30:33,600
and uh

610
00:30:33,600 --> 00:30:36,419
here uh when you dig into the

611
00:30:36,419 --> 00:30:39,600
documentation of the extended attributes

612
00:30:39,600 --> 00:30:42,960
you can find an information about two

613
00:30:42,960 --> 00:30:46,320
prefixes the first prefix is dollar

614
00:30:46,320 --> 00:30:47,580
kernel

615
00:30:47,580 --> 00:30:50,580
if the name of the extended attribute

616
00:30:50,580 --> 00:30:53,600
starts with dollar kernel

617
00:30:53,600 --> 00:30:59,460
it is allowed to be modified only by the

618
00:30:59,460 --> 00:31:01,679
kernel of the operating system and its

619
00:31:01,679 --> 00:31:04,799
components like NTFS dotsys driver for

620
00:31:04,799 --> 00:31:06,799
example so such

621
00:31:06,799 --> 00:31:11,340
extended attribute cannot be written by

622
00:31:11,340 --> 00:31:13,980
a regular user

623
00:31:13,980 --> 00:31:18,960
so it is I Cannot drop a file on the

624
00:31:18,960 --> 00:31:21,779
drive and then create a hash a cache

625
00:31:21,779 --> 00:31:25,080
entry but I can drop a file make the

626
00:31:25,080 --> 00:31:29,220
system creating a cached entry and then

627
00:31:29,220 --> 00:31:31,679
manipulate the file and it will work as

628
00:31:31,679 --> 00:31:34,679
the cache is not touched this is the

629
00:31:34,679 --> 00:31:38,460
cache for the right AAA the original one

630
00:31:38,460 --> 00:31:41,360
matching the

631
00:31:41,820 --> 00:31:43,880
um set of information

632
00:31:43,880 --> 00:31:46,740
being defined within that blocker if I

633
00:31:46,740 --> 00:31:48,960
do the same for the X

634
00:31:48,960 --> 00:31:51,659
um or my modified version the file is

635
00:31:51,659 --> 00:31:54,000
being modified obviously but the

636
00:31:54,000 --> 00:31:56,580
information within the cache is the

637
00:31:56,580 --> 00:31:59,880
original one as I have modified the file

638
00:31:59,880 --> 00:32:03,419
but didn't modify the cache

639
00:32:03,419 --> 00:32:06,419
and here comes the second prefix the

640
00:32:06,419 --> 00:32:09,600
perch pert means

641
00:32:09,600 --> 00:32:15,539
if anyone modifies uh the file

642
00:32:15,539 --> 00:32:17,520
uh

643
00:32:17,520 --> 00:32:19,679
the

644
00:32:19,679 --> 00:32:21,140
um

645
00:32:21,140 --> 00:32:26,100
extended attribute must be removed by

646
00:32:26,100 --> 00:32:29,220
the uh

647
00:32:29,220 --> 00:32:31,380
by the

648
00:32:31,380 --> 00:32:33,260
um

649
00:32:33,260 --> 00:32:38,779
[Music]

650
00:32:38,779 --> 00:32:42,720
so if I change the file using the

651
00:32:42,720 --> 00:32:47,220
typical standard way my

652
00:32:49,340 --> 00:32:55,039
uh cached data will be clearly removed

653
00:32:55,039 --> 00:33:00,179
if I uh modify the drive behind the

654
00:33:00,179 --> 00:33:01,159
scene

655
00:33:01,159 --> 00:33:06,919
my cache will remain intact as

656
00:33:06,919 --> 00:33:11,760
ntfs.driver has no way of realizing a

657
00:33:11,760 --> 00:33:14,340
file was modified because I modified

658
00:33:14,340 --> 00:33:19,580
everything under the level uh which

659
00:33:19,580 --> 00:33:24,960
ntfs.drivers can see here you can see

660
00:33:24,960 --> 00:33:26,810
the aid3

661
00:33:26,810 --> 00:33:28,159
[Music]

662
00:33:28,159 --> 00:33:33,419
extended attribute aid3 is about

663
00:33:33,419 --> 00:33:36,720
um digital signatures my right IIA file

664
00:33:36,720 --> 00:33:39,120
is being digitally signed I have

665
00:33:39,120 --> 00:33:40,919
digitally signed it with a certificate

666
00:33:40,919 --> 00:33:44,159
for code signing Etc and this

667
00:33:44,159 --> 00:33:47,279
information is cached as well which can

668
00:33:47,279 --> 00:33:51,200
give us a bit more interesting

669
00:33:51,200 --> 00:33:54,419
scenarios because when it comes to

670
00:33:54,419 --> 00:33:57,840
hushes hashes are not that common in

671
00:33:57,840 --> 00:33:59,299
practice

672
00:33:59,299 --> 00:34:02,580
when it comes to the applocker rules but

673
00:34:02,580 --> 00:34:05,299
we have a lot under

674
00:34:05,299 --> 00:34:08,418
real world environment

675
00:34:08,418 --> 00:34:11,780
conditions a lot of

676
00:34:11,780 --> 00:34:15,119
signature based or publisher-based rules

677
00:34:15,119 --> 00:34:18,440
and we can manipulate such information

678
00:34:18,440 --> 00:34:22,679
exactly the same way okay so I have

679
00:34:22,679 --> 00:34:25,739
demonstrated the first approach

680
00:34:25,739 --> 00:34:27,599
like

681
00:34:27,599 --> 00:34:31,379
I'm putting a legit file on the

682
00:34:31,379 --> 00:34:35,719
removable Drive I run it to create a

683
00:34:35,719 --> 00:34:37,760
cached information

684
00:34:37,760 --> 00:34:40,560
then I

685
00:34:40,560 --> 00:34:42,300
plug the drive

686
00:34:42,300 --> 00:34:45,719
out modify the content of the file plug

687
00:34:45,719 --> 00:34:48,540
it back in and a blocker relies on its

688
00:34:48,540 --> 00:34:52,500
cache but it is not very interesting

689
00:34:52,500 --> 00:34:54,839
scenario I would say it is good as a

690
00:34:54,839 --> 00:34:57,900
proof of concept I change the string and

691
00:34:57,900 --> 00:35:00,900
my file still runs but at the same time

692
00:35:00,900 --> 00:35:03,480
it is not something which is really

693
00:35:03,480 --> 00:35:08,520
exciting for a typical attacks if I go

694
00:35:08,520 --> 00:35:11,940
for more like live scenarios I have a

695
00:35:11,940 --> 00:35:14,220
file which is not allowed I have no

696
00:35:14,220 --> 00:35:17,280
cached information nothing like this so

697
00:35:17,280 --> 00:35:19,920
this file is called if I appear on the

698
00:35:19,920 --> 00:35:22,920
desktop I'm in this pwm

699
00:35:22,920 --> 00:35:26,359
for owning my machine so I will copy

700
00:35:26,359 --> 00:35:31,200
pwn to the X drive it is on the X drive

701
00:35:31,200 --> 00:35:35,220
and it has no cached information if as

702
00:35:35,220 --> 00:35:37,380
you you file

703
00:35:37,380 --> 00:35:39,320
um who are

704
00:35:39,320 --> 00:35:43,099
AA and

705
00:35:43,099 --> 00:35:45,960
xwn.exe has no caching information as a

706
00:35:45,960 --> 00:35:49,140
blocker never had to run to calculate

707
00:35:49,140 --> 00:35:51,540
the hash for it so obviously it is not

708
00:35:51,540 --> 00:35:56,099
present right now uh I will use another

709
00:35:56,099 --> 00:36:02,099
utility I will take a copy of this hash

710
00:36:02,099 --> 00:36:07,500
a copy and I will use another utility I

711
00:36:07,500 --> 00:36:09,839
have prepared setup Locker hash cache

712
00:36:09,839 --> 00:36:12,740
and on the X

713
00:36:12,740 --> 00:36:18,000
bwn.exe I will set this particular

714
00:36:18,000 --> 00:36:19,560
um

715
00:36:19,560 --> 00:36:24,000
hash cache if I do this okay if I

716
00:36:24,000 --> 00:36:27,359
display uh right now the information

717
00:36:27,359 --> 00:36:30,240
about the extended attributes about the

718
00:36:30,240 --> 00:36:33,240
cached information about the hash I have

719
00:36:33,240 --> 00:36:37,260
just planted the string six E38 AF you

720
00:36:37,260 --> 00:36:39,480
can see six e three F and so on and so

721
00:36:39,480 --> 00:36:40,980
on so

722
00:36:40,980 --> 00:36:44,900
uh obviously as I said dollar kernel

723
00:36:44,900 --> 00:36:47,579
attributes cannot be written by mere

724
00:36:47,579 --> 00:36:50,760
mortals it is only for kernel so I did a

725
00:36:50,760 --> 00:36:54,420
simple trick I didn't name my attribute

726
00:36:54,420 --> 00:36:57,300
dollar kernel I

727
00:36:57,300 --> 00:37:01,619
named it hash kernel is it valid from

728
00:37:01,619 --> 00:37:06,119
the applocker perspective not at all

729
00:37:06,119 --> 00:37:09,180
but at the same time it is really easy

730
00:37:09,180 --> 00:37:13,579
to be manipulated detached vhd okay

731
00:37:13,579 --> 00:37:17,000
from the desktop

732
00:37:17,000 --> 00:37:19,400
my editor

733
00:37:19,400 --> 00:37:23,760
and now reopen the vhdx

734
00:37:23,760 --> 00:37:27,720
Pokemon the HDX file and then control

735
00:37:27,720 --> 00:37:33,859
for replace and I will search for Harsh

736
00:37:33,920 --> 00:37:37,619
kernel Dot and I will replace to the

737
00:37:37,619 --> 00:37:38,420
dollar

738
00:37:38,420 --> 00:37:45,180
kernel uh dot replace all

739
00:37:45,180 --> 00:37:49,020
hopefully I have only one replace all or

740
00:37:49,020 --> 00:37:52,980
two it is normal as well uh save close

741
00:37:52,980 --> 00:37:56,339
editor attach the drive again

742
00:37:56,339 --> 00:37:59,839
and right now I have manipulated offline

743
00:37:59,839 --> 00:38:01,980
see temp

744
00:38:01,980 --> 00:38:08,339
x b a b x again and right now I will

745
00:38:08,339 --> 00:38:13,460
launch X if I display the uh

746
00:38:13,460 --> 00:38:15,960
metadata that Excel attribute it was

747
00:38:15,960 --> 00:38:20,700
clearly renamed if I launch X pwn

748
00:38:20,700 --> 00:38:23,520
it is running and within the log I can

749
00:38:23,520 --> 00:38:28,020
see it was allowed to run well to detach

750
00:38:28,020 --> 00:38:30,660
attach drives I have some additional I

751
00:38:30,660 --> 00:38:32,579
need to to use some additional

752
00:38:32,579 --> 00:38:36,000
privileges to manipulate disk data

753
00:38:36,000 --> 00:38:39,180
offline uh I have to take the disk

754
00:38:39,180 --> 00:38:41,700
offline which allows me to do a lot of

755
00:38:41,700 --> 00:38:45,180
different attacks but there is one

756
00:38:45,180 --> 00:38:46,380
scenario

757
00:38:46,380 --> 00:38:51,960
in which it may be really beneficial

758
00:38:51,960 --> 00:38:54,380
um because

759
00:38:54,380 --> 00:38:57,900
try to imagine the same attack not on

760
00:38:57,900 --> 00:39:00,540
the vhdx drive but on your removable

761
00:39:00,540 --> 00:39:03,060
drive so if you have a removable drive

762
00:39:03,060 --> 00:39:09,299
if you know some cache or some signature

763
00:39:10,020 --> 00:39:12,240
um being allowed within their blocker

764
00:39:12,240 --> 00:39:13,280
rules

765
00:39:13,280 --> 00:39:18,500
uh it means if you detach such USB drive

766
00:39:18,500 --> 00:39:21,480
manipulate on your hacking machine uh

767
00:39:21,480 --> 00:39:25,740
let's say from Linux plug it back in to

768
00:39:25,740 --> 00:39:28,200
the attack machine it will be allowed to

769
00:39:28,200 --> 00:39:30,200
be run because the hash

770
00:39:30,200 --> 00:39:33,599
matches and such attacks are perfectly

771
00:39:33,599 --> 00:39:35,160
possible

772
00:39:35,160 --> 00:39:37,380
and for some scenarios may be very

773
00:39:37,380 --> 00:39:40,020
tempting by the way within the app

774
00:39:40,020 --> 00:39:42,960
Locker in the Powershell

775
00:39:42,960 --> 00:39:45,660
I can go for the Powershell within the

776
00:39:45,660 --> 00:39:50,460
first here okay CLS power

777
00:39:51,440 --> 00:39:54,320
shell I will make it slightly bigger

778
00:39:54,320 --> 00:39:59,460
there is a test uh blocker or we see a

779
00:39:59,460 --> 00:40:01,740
command to test a blocker policy I have

780
00:40:01,740 --> 00:40:05,040
to store my applicator policy in the XML

781
00:40:05,040 --> 00:40:06,440
file first

782
00:40:06,440 --> 00:40:11,640
so uh the uh to XML I will save it to

783
00:40:11,640 --> 00:40:16,500
file for EC dot um XML

784
00:40:16,500 --> 00:40:19,760
um like this out

785
00:40:19,760 --> 00:40:24,420
5.6 ml so right now I have my policy XML

786
00:40:24,420 --> 00:40:28,980
stored on the drive and now CLS it has a

787
00:40:28,980 --> 00:40:33,960
block per policy if I do control control

788
00:40:33,960 --> 00:40:36,560
space

789
00:40:37,040 --> 00:40:42,779
minus controls oh come on controls

790
00:40:43,260 --> 00:40:45,660
control space

791
00:40:45,660 --> 00:40:50,040
uh I have a XML policy uh parameter and

792
00:40:50,040 --> 00:40:54,720
I have a path parameter so the

793
00:40:54,720 --> 00:40:58,020
test a blocker policy command will

794
00:40:58,020 --> 00:41:02,700
verify if my file would be allowed to

795
00:41:02,700 --> 00:41:05,520
run without trying to actually run it so

796
00:41:05,520 --> 00:41:08,400
police example policy is a policy.xml

797
00:41:08,400 --> 00:41:11,420
and the file

798
00:41:11,420 --> 00:41:15,900
s and the path parameter is let's say

799
00:41:15,900 --> 00:41:18,180
the original one and I can say the

800
00:41:18,180 --> 00:41:19,260
information

801
00:41:19,260 --> 00:41:24,060
it is allowed to be run by the row codes

802
00:41:24,060 --> 00:41:27,240
right AAA as this is the name of the

803
00:41:27,240 --> 00:41:30,480
rule we can observe it over here so it

804
00:41:30,480 --> 00:41:31,920
is allowed to be run and the test

805
00:41:31,920 --> 00:41:35,700
applocker policy simply verified it

806
00:41:35,700 --> 00:41:39,740
and here comes the beauty of the

807
00:41:39,740 --> 00:41:44,040
applocker duty with the well

808
00:41:44,040 --> 00:41:46,440
a big

809
00:41:46,440 --> 00:41:51,780
quotation marks path X and write a if

810
00:41:51,780 --> 00:41:53,940
you remember this is the modified one

811
00:41:53,940 --> 00:41:59,640
with the proper cache but improper real

812
00:41:59,640 --> 00:42:02,220
content and the test app Locker policy

813
00:42:02,220 --> 00:42:05,640
will not allow to run it what does it

814
00:42:05,640 --> 00:42:07,320
mean in practice

815
00:42:07,320 --> 00:42:11,700
the driver for that blocker the real

816
00:42:11,700 --> 00:42:15,180
enforcement part of the applocker relies

817
00:42:15,180 --> 00:42:18,119
on the cache and the test a blocker

818
00:42:18,119 --> 00:42:21,660
policy command for verifying how is

819
00:42:21,660 --> 00:42:23,000
everything working

820
00:42:23,000 --> 00:42:26,339
realize not on the cache but on the real

821
00:42:26,339 --> 00:42:28,940
content of the file

822
00:42:28,940 --> 00:42:32,220
well we can discuss this if this cash

823
00:42:32,220 --> 00:42:35,060
issue is really good or bad or whatever

824
00:42:35,060 --> 00:42:38,160
but at the same time using different

825
00:42:38,160 --> 00:42:40,260
methods for real enforcement and for

826
00:42:40,260 --> 00:42:43,400
verifying the enforcement is obviously

827
00:42:43,400 --> 00:42:45,960
uh something

828
00:42:45,960 --> 00:42:47,700
um

829
00:42:47,700 --> 00:42:51,060
let's call it not very well done by by

830
00:42:51,060 --> 00:42:52,859
Microsoft

831
00:42:52,859 --> 00:42:53,520
um

832
00:42:53,520 --> 00:42:56,420
when it comes to the comparable

833
00:42:56,420 --> 00:42:59,940
mechanisms I mentioned previously I mean

834
00:42:59,940 --> 00:43:03,900
wdac being an applocker or steroids how

835
00:43:03,900 --> 00:43:05,700
Microsoft sometimes sometimes call it

836
00:43:05,700 --> 00:43:10,560
and so on and for wdac we have two

837
00:43:10,560 --> 00:43:13,740
things making the situation a bit better

838
00:43:13,740 --> 00:43:17,640
than for a blocker and the first one is

839
00:43:17,640 --> 00:43:20,640
we have an option within wdac policies

840
00:43:20,640 --> 00:43:24,180
allowing us to invalidate I will try to

841
00:43:24,180 --> 00:43:27,300
demonstrate it maybe maybe I would I

842
00:43:27,300 --> 00:43:28,319
will not

843
00:43:28,319 --> 00:43:29,660
um

844
00:43:29,660 --> 00:43:33,240
break it really but I will try to show

845
00:43:33,240 --> 00:43:35,520
you an option within the

846
00:43:35,520 --> 00:43:36,200
um

847
00:43:36,200 --> 00:43:40,440
wdac wizard if I create a new policy I

848
00:43:40,440 --> 00:43:42,960
have to maximize it base policy multiple

849
00:43:42,960 --> 00:43:45,599
file format I will create it based on

850
00:43:45,599 --> 00:43:48,020
any template does not matter actually

851
00:43:48,020 --> 00:43:52,079
under Advanced options within WDC rules

852
00:43:52,079 --> 00:43:54,900
I have an option for invalidating

853
00:43:54,900 --> 00:43:59,579
extended attributes on a reboot so it

854
00:43:59,579 --> 00:44:02,700
on the C drive extended attributes will

855
00:44:02,700 --> 00:44:03,480
not

856
00:44:03,480 --> 00:44:07,800
survive a reboot another good news when

857
00:44:07,800 --> 00:44:10,760
it comes to them

858
00:44:11,280 --> 00:44:14,359
to the wdac is it

859
00:44:14,359 --> 00:44:17,300
trusts the cash

860
00:44:17,300 --> 00:44:21,540
about the hashes only when it's on the C

861
00:44:21,540 --> 00:44:25,560
drive and not on removable drives so the

862
00:44:25,560 --> 00:44:28,819
situation is slightly better

863
00:44:28,819 --> 00:44:32,700
but still not really great as

864
00:44:32,700 --> 00:44:35,099
manipulating the file offline gives you

865
00:44:35,099 --> 00:44:38,220
exactly the same effect WDC allows it to

866
00:44:38,220 --> 00:44:41,540
run despite it manipulated

867
00:44:41,540 --> 00:44:47,460
content and within WDC if I run such a

868
00:44:47,460 --> 00:44:50,579
file let's go let's run this particular

869
00:44:50,579 --> 00:44:55,700
one uh write a a uh being launched um

870
00:44:55,700 --> 00:44:57,500
desktop

871
00:44:57,500 --> 00:45:01,339
and FSU till

872
00:45:01,339 --> 00:45:05,819
file a query a a

873
00:45:05,819 --> 00:45:08,520
um write AAA the name of the attribute

874
00:45:08,520 --> 00:45:10,440
is slightly different as you can see

875
00:45:10,440 --> 00:45:14,060
it's sbcash and not app ID

876
00:45:14,060 --> 00:45:18,300
uh one like we had here in the blocker

877
00:45:18,300 --> 00:45:20,460
but anyway it's like time difference

878
00:45:20,460 --> 00:45:22,800
please pay attention at Dollar kernel

879
00:45:22,800 --> 00:45:24,180
period this is the important thing

880
00:45:24,180 --> 00:45:26,760
because it means it's validated if you

881
00:45:26,760 --> 00:45:29,000
want to stay on the on the safe side

882
00:45:29,000 --> 00:45:32,160
we'll try to look on attributes and

883
00:45:32,160 --> 00:45:36,000
invalidate them on yourself if you want

884
00:45:36,000 --> 00:45:39,420
to play with everything here you can see

885
00:45:39,420 --> 00:45:44,460
my resources the QR code guides you to

886
00:45:44,460 --> 00:45:47,160
the same set of links in the way being

887
00:45:47,160 --> 00:45:49,560
slightly easier to copy paste than uh

888
00:45:49,560 --> 00:45:52,200
retyping it from the screen I'm sharing

889
00:45:52,200 --> 00:45:55,200
tools I'm sharing executable files and

890
00:45:55,200 --> 00:45:58,200
see source code you can easily compile

891
00:45:58,200 --> 00:46:00,839
it everything you I have those also made

892
00:46:00,839 --> 00:46:02,839
a short write up

893
00:46:02,839 --> 00:46:05,819
maybe not that detail like this session

894
00:46:05,819 --> 00:46:08,760
but guiding you to the right direction

895
00:46:08,760 --> 00:46:10,740
if you read it

896
00:46:10,740 --> 00:46:14,940
and so on is it a real problem a real

897
00:46:14,940 --> 00:46:17,760
security bug it is a bug for sure

898
00:46:17,760 --> 00:46:20,880
actually when we are talking about cash

899
00:46:20,880 --> 00:46:23,700
always we have to face such things when

900
00:46:23,700 --> 00:46:26,460
we are caching something at the same

901
00:46:26,460 --> 00:46:28,680
time it is not breaking any security

902
00:46:28,680 --> 00:46:31,200
boundary as it requires offline

903
00:46:31,200 --> 00:46:33,480
manipulation if we can manipulate the

904
00:46:33,480 --> 00:46:36,480
drive content offline we can do a lot of

905
00:46:36,480 --> 00:46:39,240
bad things about the operating system

906
00:46:39,240 --> 00:46:41,640
and

907
00:46:41,640 --> 00:46:44,160
um this is one of those it is probably

908
00:46:44,160 --> 00:46:46,859
not so visible not so well known it's

909
00:46:46,859 --> 00:46:52,319
better to know about it but unaware and

910
00:46:52,319 --> 00:46:55,020
hopefully Microsoft will improve it

911
00:46:55,020 --> 00:46:57,839
somehow in the nearest Future that's all

912
00:46:57,839 --> 00:47:01,020
thank you very much uh it was a pleasure

913
00:47:01,020 --> 00:47:04,619
to talk to you hopefully see you soon in

914
00:47:04,619 --> 00:47:09,240
the uh face to face version

915
00:47:09,240 --> 00:47:13,079
have a great day great the rest of the

916
00:47:13,079 --> 00:47:15,920
day thank you

