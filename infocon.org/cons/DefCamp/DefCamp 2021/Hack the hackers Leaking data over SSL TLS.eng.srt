1
00:00:00,160 --> 00:00:02,879
so uh moving right on here's a word that

2
00:00:02,879 --> 00:00:05,200
we don't often utter in a cyber security

3
00:00:05,200 --> 00:00:08,160
conference the word is predictable yet

4
00:00:08,160 --> 00:00:10,000
our next speaker would argue that the

5
00:00:10,000 --> 00:00:12,080
way hackers exploit vulnerabilities over

6
00:00:12,080 --> 00:00:14,719
the network can be predictable

7
00:00:14,719 --> 00:00:16,880
in a world where attacks evolve but the

8
00:00:16,880 --> 00:00:19,520
ssl specs stay the same how long before

9
00:00:19,520 --> 00:00:21,279
we don't even need to concern ourselves

10
00:00:21,279 --> 00:00:23,039
with decrypting the traffic in order to

11
00:00:23,039 --> 00:00:25,039
carry an attack

12
00:00:25,039 --> 00:00:27,279
it's quite nice that jones chernika is

13
00:00:27,279 --> 00:00:28,640
going to take the stage he's a

14
00:00:28,640 --> 00:00:30,800
penetration tester at uipath and a

15
00:00:30,800 --> 00:00:32,719
seasoned competitor in the security

16
00:00:32,719 --> 00:00:34,160
contest world

17
00:00:34,160 --> 00:00:36,480
it's so great that he follows up after

18
00:00:36,480 --> 00:00:38,640
an introduction to bug bounty hunting

19
00:00:38,640 --> 00:00:40,320
because he's been doing this for the

20
00:00:40,320 --> 00:00:42,559
past years and he's racked up more than

21
00:00:42,559 --> 00:00:45,600
100 participations and such challenges

22
00:00:45,600 --> 00:00:47,200
he's here to tell us all about the

23
00:00:47,200 --> 00:00:49,120
results of his research related to

24
00:00:49,120 --> 00:00:52,239
leaking data over ssl januz you have the

25
00:00:52,239 --> 00:00:54,559
stage

26
00:00:57,440 --> 00:00:59,760
thank you alexandra for the intro

27
00:00:59,760 --> 00:01:02,960
let me share the screen

28
00:01:02,960 --> 00:01:05,680
not this one but

29
00:01:05,680 --> 00:01:08,960
the one with the presentation

30
00:01:08,960 --> 00:01:10,640
okay

31
00:01:10,640 --> 00:01:12,799
so heck the hacker sticking data over

32
00:01:12,799 --> 00:01:15,600
sslts welcome everyone my name is janusz

33
00:01:15,600 --> 00:01:16,960
chernika

34
00:01:16,960 --> 00:01:18,159
and

35
00:01:18,159 --> 00:01:19,680
first of all i'll have an introduction

36
00:01:19,680 --> 00:01:21,360
about the blind injection what is the

37
00:01:21,360 --> 00:01:23,600
problem with the blind injection what is

38
00:01:23,600 --> 00:01:25,680
a blind injection scenarios and

39
00:01:25,680 --> 00:01:28,159
challenges then i'll go over to blind

40
00:01:28,159 --> 00:01:31,840
injections over ssl tls then will be the

41
00:01:31,840 --> 00:01:33,759
demo time with the known

42
00:01:33,759 --> 00:01:35,040
tool for

43
00:01:35,040 --> 00:01:39,040
sql injection sql map and my conclusion

44
00:01:39,040 --> 00:01:41,520
who am i i'm a penetration tester for

45
00:01:41,520 --> 00:01:44,320
uipath i'm also phd student for

46
00:01:44,320 --> 00:01:46,320
department at the department of computer

47
00:01:46,320 --> 00:01:48,799
science polytechnol bucharest i'm also a

48
00:01:48,799 --> 00:01:51,600
ctf player mentor because i want to give

49
00:01:51,600 --> 00:01:54,799
back to the community sometimes i do bug

50
00:01:54,799 --> 00:01:57,680
bounty hunter i i do back bounty by

51
00:01:57,680 --> 00:01:59,600
bounty i do

52
00:01:59,600 --> 00:02:01,600
i i'm searching for bug bounties in

53
00:02:01,600 --> 00:02:03,759
black bounty programs and i'm

54
00:02:03,759 --> 00:02:05,840
ex-entrepreneur

55
00:02:05,840 --> 00:02:08,479
so blind injection how it works

56
00:02:08,479 --> 00:02:11,280
so it's about extracting one byte at a

57
00:02:11,280 --> 00:02:13,520
time from each position from the

58
00:02:13,520 --> 00:02:16,080
information by clearing the server for

59
00:02:16,080 --> 00:02:17,520
trim forces

60
00:02:17,520 --> 00:02:20,400
so this kind of technique is done by

61
00:02:20,400 --> 00:02:23,200
in two ways boolean and time based

62
00:02:23,200 --> 00:02:24,800
so

63
00:02:24,800 --> 00:02:27,760
where we found this kind of technique

64
00:02:27,760 --> 00:02:30,000
in lots of vulnerabilities like sql

65
00:02:30,000 --> 00:02:31,920
injection welcome and execution when you

66
00:02:31,920 --> 00:02:35,360
have to get one byte at a time but

67
00:02:35,360 --> 00:02:38,160
the most common is in sql injection so

68
00:02:38,160 --> 00:02:41,920
there is a blind sql injection

69
00:02:41,920 --> 00:02:42,959
problem

70
00:02:42,959 --> 00:02:44,959
maybe not but we can distinguish that

71
00:02:44,959 --> 00:02:47,360
reinforces from the encrypted traffic

72
00:02:47,360 --> 00:02:48,720
by looking on the length of the

73
00:02:48,720 --> 00:02:51,440
responses or just

74
00:02:51,440 --> 00:02:54,080
the delays from between the from between

75
00:02:54,080 --> 00:02:56,080
the responses

76
00:02:56,080 --> 00:02:58,000
the real problem i introduced should be

77
00:02:58,000 --> 00:03:00,159
lost we lost refers to blind injection

78
00:03:00,159 --> 00:03:03,360
leak over ssl tls which is a passive

79
00:03:03,360 --> 00:03:05,440
attack there is no interaction with the

80
00:03:05,440 --> 00:03:06,400
victim

81
00:03:06,400 --> 00:03:07,760
so um

82
00:03:07,760 --> 00:03:10,000
our blind injection exploits maybe are

83
00:03:10,000 --> 00:03:12,560
written in a predictable way and we

84
00:03:12,560 --> 00:03:14,319
when we are trying to exploit over the

85
00:03:14,319 --> 00:03:17,440
network maybe we can do some steps

86
00:03:17,440 --> 00:03:19,599
some reverse steps to get the same

87
00:03:19,599 --> 00:03:22,159
information as the hacker did

88
00:03:22,159 --> 00:03:23,760
how's that because

89
00:03:23,760 --> 00:03:24,879
when you are

90
00:03:24,879 --> 00:03:28,319
writing on blind injection exploit we

91
00:03:28,319 --> 00:03:29,840
use our

92
00:03:29,840 --> 00:03:32,480
we feed our method with

93
00:03:32,480 --> 00:03:35,760
the the with the with an input

94
00:03:35,760 --> 00:03:38,080
our that input is the leak and we have

95
00:03:38,080 --> 00:03:40,480
the two type two types of output we have

96
00:03:40,480 --> 00:03:42,400
that we suppose from the encrypted

97
00:03:42,400 --> 00:03:45,120
traffic the trend falls that reinforces

98
00:03:45,120 --> 00:03:47,680
if you suppose correctly this we just

99
00:03:47,680 --> 00:03:50,720
have to give to to have a visible make a

100
00:03:50,720 --> 00:03:53,200
feasible brute force on the method that

101
00:03:53,200 --> 00:03:56,080
was used by the hacker and by having the

102
00:03:56,080 --> 00:03:59,360
method and the output you just

103
00:03:59,360 --> 00:04:02,319
the the input which is our leak

104
00:04:02,319 --> 00:04:04,799
so known methods of exploiting with

105
00:04:04,799 --> 00:04:07,120
blind injection techniques we have the

106
00:04:07,120 --> 00:04:09,280
charset method when you construct your

107
00:04:09,280 --> 00:04:11,040
charset by

108
00:04:11,040 --> 00:04:14,799
creating the the letters a b c d to z

109
00:04:14,799 --> 00:04:16,079
and then

110
00:04:16,079 --> 00:04:16,798
you

111
00:04:16,798 --> 00:04:19,358
you put in the chart set as well the the

112
00:04:19,358 --> 00:04:22,240
digits zero one two till nine

113
00:04:22,240 --> 00:04:24,720
or you have some

114
00:04:24,720 --> 00:04:26,639
optimization techniques like binary

115
00:04:26,639 --> 00:04:27,520
search

116
00:04:27,520 --> 00:04:30,880
this is used by a lot of tools like sql

117
00:04:30,880 --> 00:04:33,759
map there is there are other tools to

118
00:04:33,759 --> 00:04:35,440
to

119
00:04:35,440 --> 00:04:37,360
exploit blind injections

120
00:04:37,360 --> 00:04:38,479
and

121
00:04:38,479 --> 00:04:41,120
other tools use but that is not so

122
00:04:41,120 --> 00:04:42,960
common i don't i don't remember right

123
00:04:42,960 --> 00:04:44,160
now

124
00:04:44,160 --> 00:04:45,759
the name of the tool but there is a tool

125
00:04:45,759 --> 00:04:48,400
which is using bit shifting technique to

126
00:04:48,400 --> 00:04:50,800
to exploit blind injections sql blind

127
00:04:50,800 --> 00:04:52,160
injections

128
00:04:52,160 --> 00:04:54,320
challenges with the extraction methods

129
00:04:54,320 --> 00:04:56,240
so i um

130
00:04:56,240 --> 00:04:58,320
i saw that there is no challenges when

131
00:04:58,320 --> 00:04:59,759
you are dealing with optimization

132
00:04:59,759 --> 00:05:02,479
techniques like i mentioned earlier like

133
00:05:02,479 --> 00:05:04,800
binary search or bit shifting but there

134
00:05:04,800 --> 00:05:07,600
is a big problem when you are using the

135
00:05:07,600 --> 00:05:10,479
hacker is using the charset method and

136
00:05:10,479 --> 00:05:12,720
this is what this was the biggest

137
00:05:12,720 --> 00:05:14,160
challenge because

138
00:05:14,160 --> 00:05:15,520
um

139
00:05:15,520 --> 00:05:18,000
we don't know how the the hacker

140
00:05:18,000 --> 00:05:21,280
constructed the chart set because

141
00:05:21,280 --> 00:05:23,840
we don't know if he starts the charges

142
00:05:23,840 --> 00:05:26,080
starts with digits or starts with

143
00:05:26,080 --> 00:05:28,080
letters and so on maybe he has some

144
00:05:28,080 --> 00:05:30,479
extra characters in the chart set

145
00:05:30,479 --> 00:05:33,360
and this this problem

146
00:05:33,360 --> 00:05:35,840
you can solve this problem by cr by

147
00:05:35,840 --> 00:05:38,160
making a rotation like caesar you have

148
00:05:38,160 --> 00:05:42,240
some crypto stuff problems but

149
00:05:42,240 --> 00:05:45,039
it is exploitable in this charset method

150
00:05:45,039 --> 00:05:47,199
it's it's harder but

151
00:05:47,199 --> 00:05:48,800
not impossible

152
00:05:48,800 --> 00:05:51,520
exploiting over ssl tls we have the

153
00:05:51,520 --> 00:05:53,680
length of the packets in the encrypted

154
00:05:53,680 --> 00:05:56,000
traffic we have the time between packets

155
00:05:56,000 --> 00:05:57,600
if it's the time based

156
00:05:57,600 --> 00:05:59,440
then even there is a padding involved

157
00:05:59,440 --> 00:06:02,560
some cipher cipher cipher

158
00:06:02,560 --> 00:06:04,960
encryption uh has some padding involved

159
00:06:04,960 --> 00:06:07,840
in some cases

160
00:06:07,919 --> 00:06:10,720
so we still exploit the problem

161
00:06:10,720 --> 00:06:13,520
uh if we are lucky enough that the block

162
00:06:13,520 --> 00:06:15,120
size is smaller than the difference

163
00:06:15,120 --> 00:06:17,120
between two m forces so we have the

164
00:06:17,120 --> 00:06:18,160
padding

165
00:06:18,160 --> 00:06:21,120
so the true truths should be

166
00:06:21,120 --> 00:06:23,919
uh bigger or smaller than the forces the

167
00:06:23,919 --> 00:06:26,720
length of the truth and the the length

168
00:06:26,720 --> 00:06:28,560
of the force should be different

169
00:06:28,560 --> 00:06:30,800
and i should mention from the beginning

170
00:06:30,800 --> 00:06:31,600
but

171
00:06:31,600 --> 00:06:33,520
now it's an opportunity that there is no

172
00:06:33,520 --> 00:06:37,120
problem with the ssl tls protocol so

173
00:06:37,120 --> 00:06:39,039
because of that there there will not be

174
00:06:39,039 --> 00:06:41,120
a change in this protocol

175
00:06:41,120 --> 00:06:44,720
but it should be in our way of

176
00:06:44,720 --> 00:06:48,400
creating the blind injection exploits

177
00:06:48,400 --> 00:06:50,800
scenarios of exploiting so if you are

178
00:06:50,800 --> 00:06:53,199
you are a penetration testing company

179
00:06:53,199 --> 00:06:54,800
imagine that you are

180
00:06:54,800 --> 00:06:58,160
how many times did you get the

181
00:06:58,160 --> 00:07:01,039
uh i don't know the database from a comp

182
00:07:01,039 --> 00:07:02,560
from a client

183
00:07:02,560 --> 00:07:05,599
maybe some a lot of times maybe and how

184
00:07:05,599 --> 00:07:07,840
many times did you get through blind

185
00:07:07,840 --> 00:07:09,360
injection

186
00:07:09,360 --> 00:07:11,919
several times maybe more

187
00:07:11,919 --> 00:07:14,400
but you maybe you didn't know that when

188
00:07:14,400 --> 00:07:16,479
you are taking the database from the

189
00:07:16,479 --> 00:07:17,919
from your client

190
00:07:17,919 --> 00:07:20,479
those important data

191
00:07:20,479 --> 00:07:21,599
which

192
00:07:21,599 --> 00:07:24,080
you shouldn't have and or

193
00:07:24,080 --> 00:07:26,800
no one should have uh

194
00:07:26,800 --> 00:07:29,120
are leaked through the encrypted traffic

195
00:07:29,120 --> 00:07:33,360
so this one this is one of the scenarios

196
00:07:33,360 --> 00:07:34,960
another scenario implies the internet

197
00:07:34,960 --> 00:07:36,479
service provider

198
00:07:36,479 --> 00:07:39,039
he has the encrypted traffic maybe he

199
00:07:39,039 --> 00:07:40,960
can start digging for

200
00:07:40,960 --> 00:07:43,039
i don't know script kiddies and

201
00:07:43,039 --> 00:07:46,080
professional ethical hackers

202
00:07:46,080 --> 00:07:49,120
hackers and so on and maybe why not one

203
00:07:49,120 --> 00:07:51,120
more reason why large countries have a

204
00:07:51,120 --> 00:07:53,280
strategic interest to pass the traffic

205
00:07:53,280 --> 00:07:55,280
of another country through their

206
00:07:55,280 --> 00:07:57,280
infrastructure maybe they are digging

207
00:07:57,280 --> 00:07:59,520
for some other information and one of

208
00:07:59,520 --> 00:08:01,919
them maybe should be each it is like

209
00:08:01,919 --> 00:08:04,080
this one blind injection

210
00:08:04,080 --> 00:08:06,160
exploitation

211
00:08:06,160 --> 00:08:08,319
as the future work maybe you have some

212
00:08:08,319 --> 00:08:09,599
exit notes

213
00:08:09,599 --> 00:08:10,879
over tor

214
00:08:10,879 --> 00:08:12,479
so

215
00:08:12,479 --> 00:08:14,960
if you have exit nodes maybe you are

216
00:08:14,960 --> 00:08:18,000
aware about the cell padding there is a

217
00:08:18,000 --> 00:08:19,599
cell padding in tor

218
00:08:19,599 --> 00:08:22,560
and you can start at least digging in

219
00:08:22,560 --> 00:08:24,479
your encrypted traffic because you have

220
00:08:24,479 --> 00:08:26,479
just encrypted traffic there

221
00:08:26,479 --> 00:08:28,720
you can start digging for

222
00:08:28,720 --> 00:08:31,840
for information from script kids

223
00:08:31,840 --> 00:08:33,039
professional

224
00:08:33,039 --> 00:08:35,839
pen testers and so on hackers

225
00:08:35,839 --> 00:08:36,719
for

226
00:08:36,719 --> 00:08:40,120
dumped databases

227
00:08:40,479 --> 00:08:43,679
um tools and exploits databases sorry

228
00:08:43,679 --> 00:08:45,300
just one second

229
00:08:45,300 --> 00:08:46,800
[Music]

230
00:08:46,800 --> 00:08:49,440
uh i analyzed a lot of tools i analyzed

231
00:08:49,440 --> 00:08:52,640
a lot a lot of databases that has blind

232
00:08:52,640 --> 00:08:54,959
injection exploits and

233
00:08:54,959 --> 00:08:57,760
we found with no exceptions that those

234
00:08:57,760 --> 00:08:59,760
tools were vulnerable

235
00:08:59,760 --> 00:09:01,360
by

236
00:09:01,360 --> 00:09:04,000
were vulnerable because they were

237
00:09:04,000 --> 00:09:06,160
exploiting the blind injection in a

238
00:09:06,160 --> 00:09:08,399
predictable manner so

239
00:09:08,399 --> 00:09:10,000
the same thing was with the blind

240
00:09:10,000 --> 00:09:11,360
injection

241
00:09:11,360 --> 00:09:14,080
tools that they are exploiting with the

242
00:09:14,080 --> 00:09:16,080
known optimization technique like like

243
00:09:16,080 --> 00:09:17,360
sql map

244
00:09:17,360 --> 00:09:18,640
or the

245
00:09:18,640 --> 00:09:20,480
other tools like they are using other

246
00:09:20,480 --> 00:09:22,240
optimization techniques like bit

247
00:09:22,240 --> 00:09:25,200
shifting and so on

248
00:09:25,360 --> 00:09:28,800
in pontify ctf in two years ago i have i

249
00:09:28,800 --> 00:09:30,640
created a

250
00:09:30,640 --> 00:09:32,320
i created a task

251
00:09:32,320 --> 00:09:34,640
and i have the access log from

252
00:09:34,640 --> 00:09:36,800
from that task that i

253
00:09:36,800 --> 00:09:39,360
i created i run a script to trace the

254
00:09:39,360 --> 00:09:40,560
text

255
00:09:40,560 --> 00:09:40,860
and

256
00:09:40,860 --> 00:09:41,920
[Music]

257
00:09:41,920 --> 00:09:44,480
i i created a script to extract the

258
00:09:44,480 --> 00:09:46,399
information just from the access log

259
00:09:46,399 --> 00:09:48,000
because the access log has the response

260
00:09:48,000 --> 00:09:50,880
length and i found seven unique ips so

261
00:09:50,880 --> 00:09:54,399
that the task was solved by five teams

262
00:09:54,399 --> 00:09:57,519
and i find i found seven unique ips

263
00:09:57,519 --> 00:09:59,600
that extracted the flag but by running

264
00:09:59,600 --> 00:10:01,760
some scripts against those those access

265
00:10:01,760 --> 00:10:02,640
logs

266
00:10:02,640 --> 00:10:05,279
and five five of them was with the

267
00:10:05,279 --> 00:10:07,760
charset method and two of them was with

268
00:10:07,760 --> 00:10:09,920
the sql map and i was able to take the

269
00:10:09,920 --> 00:10:13,440
information back from those access logs

270
00:10:13,440 --> 00:10:17,320
so i'll make a demo

271
00:10:19,360 --> 00:10:21,519
okay

272
00:10:21,519 --> 00:10:25,600
let me start the demo the video

273
00:10:28,720 --> 00:10:30,160
so i'll

274
00:10:30,160 --> 00:10:32,880
i'll take it from the beginning so here

275
00:10:32,880 --> 00:10:35,680
is the demo which uh implies three

276
00:10:35,680 --> 00:10:37,440
parties like the penetration tester in

277
00:10:37,440 --> 00:10:40,160
the in the left in the middle is the man

278
00:10:40,160 --> 00:10:42,959
in the middle which he has only

279
00:10:42,959 --> 00:10:45,440
access to the encrypted traffic

280
00:10:45,440 --> 00:10:47,760
and the vulnerable web application which

281
00:10:47,760 --> 00:10:49,680
is in the right side

282
00:10:49,680 --> 00:10:51,680
so in the first first of all the

283
00:10:51,680 --> 00:10:53,279
penetration i have to mention that the

284
00:10:53,279 --> 00:10:56,160
penetration tester is already found

285
00:10:56,160 --> 00:10:57,680
vulnerability in the vulnerable web

286
00:10:57,680 --> 00:10:59,440
application from the right

287
00:10:59,440 --> 00:11:02,000
and he's starting an sql mapping against

288
00:11:02,000 --> 00:11:04,000
the vulnerable web application and the

289
00:11:04,000 --> 00:11:05,839
man in the middle

290
00:11:05,839 --> 00:11:07,839
so he just started the

291
00:11:07,839 --> 00:11:10,160
the sql map

292
00:11:10,160 --> 00:11:11,519
man in the middle

293
00:11:11,519 --> 00:11:13,279
in the middle of the

294
00:11:13,279 --> 00:11:16,560
demo of my demo he's starting a tcp dump

295
00:11:16,560 --> 00:11:19,600
to take the encrypted traffic you'll see

296
00:11:19,600 --> 00:11:21,600
later that

297
00:11:21,600 --> 00:11:23,360
those

298
00:11:23,360 --> 00:11:25,600
that line those lines from the encrypted

299
00:11:25,600 --> 00:11:27,440
traffic are encrypted and

300
00:11:27,440 --> 00:11:28,880
we don't need more

301
00:11:28,880 --> 00:11:31,519
we don't need more than that we just ha

302
00:11:31,519 --> 00:11:33,279
we just need the encrypted traffic and

303
00:11:33,279 --> 00:11:34,399
that's all

304
00:11:34,399 --> 00:11:37,040
so the penetration tester as i mentioned

305
00:11:37,040 --> 00:11:39,519
he already started to dump data from the

306
00:11:39,519 --> 00:11:42,720
vulnerable web application by

307
00:11:42,720 --> 00:11:44,880
exploiting it

308
00:11:44,880 --> 00:11:47,920
and soon we'll see that he

309
00:11:47,920 --> 00:11:50,720
finished the the sql map

310
00:11:50,720 --> 00:11:53,040
i will stop the tcp dump from the man in

311
00:11:53,040 --> 00:11:56,199
the middle

312
00:11:56,240 --> 00:11:58,560
after the penetration tester we'll

313
00:11:58,560 --> 00:12:01,760
finish with the scale mop

314
00:12:04,079 --> 00:12:06,240
just one second so man in the middle

315
00:12:06,240 --> 00:12:08,320
stop the tcp dump as well

316
00:12:08,320 --> 00:12:11,760
i will put the the file the tcp dump

317
00:12:11,760 --> 00:12:14,720
file on my windows machine to open it

318
00:12:14,720 --> 00:12:17,839
with the wireshark to show you that

319
00:12:17,839 --> 00:12:19,760
i have only encrypted traffic the client

320
00:12:19,760 --> 00:12:22,079
hello exchange

321
00:12:22,079 --> 00:12:25,760
so we don't need any more than

322
00:12:25,760 --> 00:12:26,959
than the

323
00:12:26,959 --> 00:12:29,360
packet length in this case because was

324
00:12:29,360 --> 00:12:30,639
exploited

325
00:12:30,639 --> 00:12:34,480
uh through the boolean technique

326
00:12:34,480 --> 00:12:39,600
so i extracted in demos csv the some

327
00:12:39,600 --> 00:12:42,079
data like packet length

328
00:12:42,079 --> 00:12:43,360
and then

329
00:12:43,360 --> 00:12:46,560
i run a python script against the c s

330
00:12:46,560 --> 00:12:50,399
csv in order to take the trim forces so

331
00:12:50,399 --> 00:12:51,600
now

332
00:12:51,600 --> 00:12:53,040
first of all i have to mention that the

333
00:12:53,040 --> 00:12:54,639
main innovator has that encrypted

334
00:12:54,639 --> 00:12:55,600
traffic

335
00:12:55,600 --> 00:12:58,639
he's started he started to take the the

336
00:12:58,639 --> 00:13:01,440
packet lengths and process them into

337
00:13:01,440 --> 00:13:03,839
true m forces

338
00:13:03,839 --> 00:13:05,760
right now he process the encrypted

339
00:13:05,760 --> 00:13:09,360
traffic into three and forces

340
00:13:09,360 --> 00:13:11,040
okay

341
00:13:11,040 --> 00:13:13,279
and now to

342
00:13:13,279 --> 00:13:16,480
to have to to leak the same data the

343
00:13:16,480 --> 00:13:18,880
penetration tester right now there is no

344
00:13:18,880 --> 00:13:20,240
interaction involved so many in the

345
00:13:20,240 --> 00:13:22,000
middle will not interact with the

346
00:13:22,000 --> 00:13:24,079
vulnerable web application so he is not

347
00:13:24,079 --> 00:13:26,079
sending any request to vulnerable web

348
00:13:26,079 --> 00:13:28,320
application and he is not sending any

349
00:13:28,320 --> 00:13:30,000
requests to penetration testing so there

350
00:13:30,000 --> 00:13:32,079
is no interaction which is very is a

351
00:13:32,079 --> 00:13:35,120
passive attack which is very very

352
00:13:35,120 --> 00:13:36,160
bad for

353
00:13:36,160 --> 00:13:37,279
for the

354
00:13:37,279 --> 00:13:39,279
affected parties like penetration tester

355
00:13:39,279 --> 00:13:41,199
and vulnerable web application

356
00:13:41,199 --> 00:13:43,600
so what i do now i created a dummy

357
00:13:43,600 --> 00:13:46,079
database on my main in the middle

358
00:13:46,079 --> 00:13:49,760
i will start to i'll start to

359
00:13:49,760 --> 00:13:51,760
exploit a vulnerable

360
00:13:51,760 --> 00:13:54,560
blind injection on my side

361
00:13:54,560 --> 00:13:58,160
which has dummy database and dummy data

362
00:13:58,160 --> 00:13:59,360
but

363
00:13:59,360 --> 00:14:02,320
after the sql map finds scaling scan

364
00:14:02,320 --> 00:14:04,480
injection i will start the sql map

365
00:14:04,480 --> 00:14:06,399
sqlmar starts to

366
00:14:06,399 --> 00:14:07,680
to

367
00:14:07,680 --> 00:14:10,560
find the sql injection when he finds

368
00:14:10,560 --> 00:14:14,000
finds the sql injection i will start to

369
00:14:14,000 --> 00:14:16,720
tell the sql map to the application to

370
00:14:16,720 --> 00:14:18,560
fit the sql map with the same true and

371
00:14:18,560 --> 00:14:20,079
forces

372
00:14:20,079 --> 00:14:21,920
you'll see soon

373
00:14:21,920 --> 00:14:23,279
so i have my

374
00:14:23,279 --> 00:14:26,000
sql map

375
00:14:26,079 --> 00:14:29,040
and right now i'm creating the database

376
00:14:29,040 --> 00:14:32,480
which is an important step

377
00:14:32,480 --> 00:14:34,720
of the exploitation of course you you

378
00:14:34,720 --> 00:14:35,760
can make

379
00:14:35,760 --> 00:14:36,880
all these

380
00:14:36,880 --> 00:14:39,760
steps by creating a script but it's not

381
00:14:39,760 --> 00:14:42,959
fun to to show you like that so

382
00:14:42,959 --> 00:14:45,440
that's why i choose to

383
00:14:45,440 --> 00:14:48,240
feed my own sql map with the same data

384
00:14:48,240 --> 00:14:50,000
like this one three and forces already

385
00:14:50,000 --> 00:14:53,120
have the three and forces

386
00:14:53,519 --> 00:14:56,000
so i repeat my local sql map with those

387
00:14:56,000 --> 00:14:58,160
three and forces

388
00:14:58,160 --> 00:15:00,800
and you'll see the the result

389
00:15:00,800 --> 00:15:02,560
soon

390
00:15:02,560 --> 00:15:04,560
so this is my local

391
00:15:04,560 --> 00:15:07,360
vulnerable web application which is

392
00:15:07,360 --> 00:15:12,320
vulnerable to sql to sql injection

393
00:15:12,320 --> 00:15:15,199
map starts to confirm if it's vulnerable

394
00:15:15,199 --> 00:15:17,120
or not

395
00:15:17,120 --> 00:15:18,959
okay

396
00:15:18,959 --> 00:15:21,199
so

397
00:15:23,279 --> 00:15:27,279
he's testing for mysql database dbms

398
00:15:27,279 --> 00:15:29,680
mysql

399
00:15:29,680 --> 00:15:31,680
and right now

400
00:15:31,680 --> 00:15:32,720
i'll

401
00:15:32,720 --> 00:15:35,680
i'll comment the the code which is with

402
00:15:35,680 --> 00:15:37,839
the vulnerable web application which is

403
00:15:37,839 --> 00:15:41,680
vulnerable to sql injection

404
00:15:41,680 --> 00:15:43,360
and i will start

405
00:15:43,360 --> 00:15:46,399
look right now he finds that

406
00:15:46,399 --> 00:15:49,759
the url has an sql injection

407
00:15:49,759 --> 00:15:51,360
oh no

408
00:15:51,360 --> 00:15:54,079
he's still testing okay right now he

409
00:15:54,079 --> 00:15:56,480
finds out that id parameter from get is

410
00:15:56,480 --> 00:15:59,279
vulnerable to a scan injection right now

411
00:15:59,279 --> 00:16:01,199
you just have to answer with those two

412
00:16:01,199 --> 00:16:03,440
enforcers nothing else

413
00:16:03,440 --> 00:16:06,480
and i'll make a change in my application

414
00:16:06,480 --> 00:16:09,600
to respond with those three and forces

415
00:16:09,600 --> 00:16:13,120
and pay attention what's happening

416
00:16:16,240 --> 00:16:19,440
so right now i'll save this file on my

417
00:16:19,440 --> 00:16:22,399
server

418
00:16:22,399 --> 00:16:24,240
and i will serve those reinforces from

419
00:16:24,240 --> 00:16:26,800
the session look he's just getting the

420
00:16:26,800 --> 00:16:30,240
same data as penetration tester

421
00:16:30,240 --> 00:16:32,399
took from the vulnerable web application

422
00:16:32,399 --> 00:16:34,639
through the same technique

423
00:16:34,639 --> 00:16:37,839
so there is no no

424
00:16:38,399 --> 00:16:41,519
no losses loses from the

425
00:16:41,519 --> 00:16:45,519
from the process i'll have the same data

426
00:16:47,440 --> 00:16:50,440
okay

427
00:16:50,880 --> 00:16:54,560
go back to my presentation

428
00:16:59,440 --> 00:17:01,199
so what we did in the demo so the

429
00:17:01,199 --> 00:17:04,319
penetration tester from a company a

430
00:17:04,319 --> 00:17:06,720
let's say exploited a vulnerable web

431
00:17:06,720 --> 00:17:09,280
application

432
00:17:09,280 --> 00:17:11,520
and

433
00:17:13,439 --> 00:17:15,439
and a man in the middle took the

434
00:17:15,439 --> 00:17:17,599
encrypted traffic and did a passive

435
00:17:17,599 --> 00:17:19,599
attack with no interaction with the

436
00:17:19,599 --> 00:17:21,280
penetration tester or with the

437
00:17:21,280 --> 00:17:23,199
vulnerable web application so

438
00:17:23,199 --> 00:17:25,119
penetration tester and vulnerable web

439
00:17:25,119 --> 00:17:27,280
application they have no way to

440
00:17:27,280 --> 00:17:29,679
track the hackers

441
00:17:29,679 --> 00:17:30,640
at all

442
00:17:30,640 --> 00:17:32,240
so the man in the middle took the

443
00:17:32,240 --> 00:17:33,919
encrypted traffic

444
00:17:33,919 --> 00:17:36,320
and in the same time he did a passive

445
00:17:36,320 --> 00:17:37,520
attack

446
00:17:37,520 --> 00:17:39,280
as i mentioned no interaction between

447
00:17:39,280 --> 00:17:40,640
those parties

448
00:17:40,640 --> 00:17:43,280
and he extracted the true enforcers from

449
00:17:43,280 --> 00:17:44,320
the

450
00:17:44,320 --> 00:17:47,600
tcp dumping encrypted packets

451
00:17:47,600 --> 00:17:49,360
and feed his local scale map with the

452
00:17:49,360 --> 00:17:51,120
sentry and forces

453
00:17:51,120 --> 00:17:53,440
and he leaked the data and the result is

454
00:17:53,440 --> 00:17:54,480
this one

455
00:17:54,480 --> 00:17:57,039
so he was able to take the same data as

456
00:17:57,039 --> 00:17:59,760
as the penetration tester did

457
00:17:59,760 --> 00:18:02,799
so he has nothing less nothing more

458
00:18:02,799 --> 00:18:05,600
the same data

459
00:18:05,600 --> 00:18:06,320
so

460
00:18:06,320 --> 00:18:08,640
how we fix this problem

461
00:18:08,640 --> 00:18:12,080
uh for charts that method

462
00:18:12,080 --> 00:18:13,679
at the defcon because i had the same

463
00:18:13,679 --> 00:18:14,960
presentation

464
00:18:14,960 --> 00:18:16,880
same i have

465
00:18:16,880 --> 00:18:19,440
most of that this presentation was uh

466
00:18:19,440 --> 00:18:21,919
was presented at defcon this year in las

467
00:18:21,919 --> 00:18:24,320
vegas and i

468
00:18:24,320 --> 00:18:25,919
i said uh

469
00:18:25,919 --> 00:18:28,160
at that time that you have we have just

470
00:18:28,160 --> 00:18:29,840
to shuffle the charset

471
00:18:29,840 --> 00:18:30,880
but

472
00:18:30,880 --> 00:18:33,520
it's not a good idea when you have

473
00:18:33,520 --> 00:18:37,360
lots of data when you dump lots of data

474
00:18:37,360 --> 00:18:40,160
i don't know megabytes or gigabytes of

475
00:18:40,160 --> 00:18:42,480
data from the database why

476
00:18:42,480 --> 00:18:45,039
because all the process okay you have

477
00:18:45,039 --> 00:18:47,200
the you shuffle the chart set you have

478
00:18:47,200 --> 00:18:49,840
randomized order of the letters but the

479
00:18:49,840 --> 00:18:51,520
problem now is that

480
00:18:51,520 --> 00:18:54,559
um you transform this

481
00:18:54,559 --> 00:18:57,360
this problem in a substitution problem

482
00:18:57,360 --> 00:18:59,600
and you can take the data

483
00:18:59,600 --> 00:19:01,600
anyway so it's not

484
00:19:01,600 --> 00:19:03,600
it's not fixing the problem if you

485
00:19:03,600 --> 00:19:07,039
randomize the characters what uh what uh

486
00:19:07,039 --> 00:19:09,360
fix the fix what is fixing the problem

487
00:19:09,360 --> 00:19:12,320
is by adding some extra steps

488
00:19:12,320 --> 00:19:14,880
even for the charset mod method for the

489
00:19:14,880 --> 00:19:16,880
other optimization methods like binary

490
00:19:16,880 --> 00:19:19,600
search bit shifting you just have to to

491
00:19:19,600 --> 00:19:22,880
add some extra steps in your in your

492
00:19:22,880 --> 00:19:25,520
exploit and

493
00:19:25,520 --> 00:19:27,360
you just won't take them into account

494
00:19:27,360 --> 00:19:29,440
when you are exploiting

495
00:19:29,440 --> 00:19:32,000
so my conclusion the way we write blind

496
00:19:32,000 --> 00:19:35,280
injection might be predictable and we

497
00:19:35,280 --> 00:19:38,400
should pay attention on how we

498
00:19:38,400 --> 00:19:40,160
write those exploits

499
00:19:40,160 --> 00:19:41,760
and when we want to run a blind

500
00:19:41,760 --> 00:19:44,320
injection attack you must consider in

501
00:19:44,320 --> 00:19:47,200
inserting random steps in the algorithm

502
00:19:47,200 --> 00:19:48,720
so you can

503
00:19:48,720 --> 00:19:51,039
uh you can hide your

504
00:19:51,039 --> 00:19:53,840
your

505
00:19:54,880 --> 00:19:55,600
your

506
00:19:55,600 --> 00:19:56,720
algorithm

507
00:19:56,720 --> 00:19:58,880
of extract of extraction

508
00:19:58,880 --> 00:20:01,919
and maybe there is this can be

509
00:20:01,919 --> 00:20:04,880
useful as a defensive technique you can

510
00:20:04,880 --> 00:20:07,360
start digging in your encrypted traffic

511
00:20:07,360 --> 00:20:08,159
for

512
00:20:08,159 --> 00:20:10,559
script kiddies for hackers that are

513
00:20:10,559 --> 00:20:13,760
trying to dump databases on your company

514
00:20:13,760 --> 00:20:14,720
so

515
00:20:14,720 --> 00:20:17,600
it it's like a payload less detection

516
00:20:17,600 --> 00:20:20,400
against blind injection

517
00:20:20,400 --> 00:20:22,400
thank you

518
00:20:22,400 --> 00:20:24,320
do you have any questions

519
00:20:24,320 --> 00:20:26,080
thank you your nose that was a very

520
00:20:26,080 --> 00:20:28,159
awesome demo and i really liked the

521
00:20:28,159 --> 00:20:30,159
setup that you had as well everything

522
00:20:30,159 --> 00:20:33,039
was so clean and it worked so the demo

523
00:20:33,039 --> 00:20:35,200
gods were on your side fully

524
00:20:35,200 --> 00:20:37,360
thank you thank you alexander i'm uh i'm

525
00:20:37,360 --> 00:20:40,320
wondering have you used this method in

526
00:20:40,320 --> 00:20:43,440
as part of your professional bug hunt

527
00:20:43,440 --> 00:20:44,880
bug hunting

528
00:20:44,880 --> 00:20:46,400
activity

529
00:20:46,400 --> 00:20:49,200
no i can't do that because it implies to

530
00:20:49,200 --> 00:20:50,799
take

531
00:20:50,799 --> 00:20:54,240
encrypted traffic of other parties so

532
00:20:54,240 --> 00:20:56,640
most of the bug bounties doesn't imply

533
00:20:56,640 --> 00:20:57,679
to

534
00:20:57,679 --> 00:21:00,159
to have a tcp dump or something like

535
00:21:00,159 --> 00:21:01,360
this

536
00:21:01,360 --> 00:21:03,280
is something else

537
00:21:03,280 --> 00:21:04,159
so

538
00:21:04,159 --> 00:21:06,240
i don't do that in my blog monthly

539
00:21:06,240 --> 00:21:08,080
activities

540
00:21:08,080 --> 00:21:10,080
i'm sure that even if you would have

541
00:21:10,080 --> 00:21:11,919
been doing it you wouldn't have told us

542
00:21:11,919 --> 00:21:14,720
so i think this is the correct answer

543
00:21:14,720 --> 00:21:17,280
yes but um

544
00:21:17,280 --> 00:21:18,880
i think um

545
00:21:18,880 --> 00:21:21,120
it could be used in some other things

546
00:21:21,120 --> 00:21:23,440
like i mentioned tor if you have an exit

547
00:21:23,440 --> 00:21:26,240
mode you can start digging for those

548
00:21:26,240 --> 00:21:29,120
script kiddies or hackers and see what

549
00:21:29,120 --> 00:21:31,919
company leaked in some data some

550
00:21:31,919 --> 00:21:35,440
databases and so on i think it's uh

551
00:21:35,440 --> 00:21:38,159
it's a good starting point to make

552
00:21:38,159 --> 00:21:40,480
to go to i don't know to make this

553
00:21:40,480 --> 00:21:43,520
research at another level

554
00:21:43,520 --> 00:21:44,880
i think

555
00:21:44,880 --> 00:21:46,480
i think it's a very

556
00:21:46,480 --> 00:21:48,799
dangerous kind of practice as well since

557
00:21:48,799 --> 00:21:50,799
everything is passive and you leave no

558
00:21:50,799 --> 00:21:54,559
traces yeah there is no traces

559
00:21:54,559 --> 00:21:56,880
yeah it's like eavesdropping on people's

560
00:21:56,880 --> 00:22:00,320
conversations but over ssl

561
00:22:00,320 --> 00:22:02,240
yeah

562
00:22:02,240 --> 00:22:03,600
it's very ugly

563
00:22:03,600 --> 00:22:06,000
thank you very much for demoing this and

564
00:22:06,000 --> 00:22:08,000
i think this is a very fitting end to

565
00:22:08,000 --> 00:22:10,159
the second day of death camp

566
00:22:10,159 --> 00:22:13,200
thank you alexandra thank you all

567
00:22:13,200 --> 00:22:15,039
thank you and can't wait to see you

568
00:22:15,039 --> 00:22:17,760
again hopefully maybe in a hybrid model

569
00:22:17,760 --> 00:22:19,200
where we can actually see each other's

570
00:22:19,200 --> 00:22:22,080
faces more than what zoom allowance

571
00:22:22,080 --> 00:22:24,000
maybe next year

572
00:22:24,000 --> 00:22:25,440
fingers crossed

573
00:22:25,440 --> 00:22:27,440
yeah

574
00:22:27,440 --> 00:22:31,240
thank you bye

