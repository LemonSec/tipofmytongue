1
00:00:00,060 --> 00:00:03,899
evening everyone and thank you for

2
00:00:02,009 --> 00:00:07,309
showing interest in the subject that

3
00:00:03,899 --> 00:00:10,889
we've submitted I'm actually impressed

4
00:00:07,309 --> 00:00:12,809
in the number of people that are still

5
00:00:10,889 --> 00:00:15,719
here because we are covering the last

6
00:00:12,809 --> 00:00:18,419
slot of the day we've made actually some

7
00:00:15,719 --> 00:00:21,419
bets earlier the better you said

8
00:00:18,420 --> 00:00:23,850
something about around fifty people

9
00:00:21,420 --> 00:00:26,189
I'm the pessimist of the group I said

10
00:00:23,850 --> 00:00:31,050
I'm bet there will be no more than

11
00:00:26,189 --> 00:00:33,540
thirty people so I guess he won and I

12
00:00:31,050 --> 00:00:37,469
owe him like two pounds of french fries

13
00:00:33,540 --> 00:00:39,719
because this dude sits outside the norm

14
00:00:37,469 --> 00:00:41,910
I'm pretty sure you would have expected

15
00:00:39,719 --> 00:00:44,010
me to owe him like a six-pack of beer

16
00:00:41,910 --> 00:00:48,510
but he script and I hit hard french

17
00:00:44,010 --> 00:00:50,489
fries so yeah my name is Marius Malika

18
00:00:48,510 --> 00:00:52,500
I'm part of the Adobe security

19
00:00:50,489 --> 00:00:55,199
Coordination Center where I'm mostly

20
00:00:52,500 --> 00:00:56,910
responsible for IR related activities

21
00:00:55,199 --> 00:00:58,170
this is the very borders my colleague

22
00:00:56,910 --> 00:01:00,870
his part of the security intelligence

23
00:00:58,170 --> 00:01:03,960
team at Adobe he's mostly responsible

24
00:01:00,870 --> 00:01:07,048
for ml related stuff so the topic that

25
00:01:03,960 --> 00:01:10,530
we are proposing today it's actually an

26
00:01:07,049 --> 00:01:13,439
alternative approach of classifying

27
00:01:10,530 --> 00:01:16,650
scripts as being malicious or benign the

28
00:01:13,439 --> 00:01:18,570
project is called Scout I'm responsible

29
00:01:16,650 --> 00:01:21,780
for picking the name he's responsible

30
00:01:18,570 --> 00:01:25,350
for mapping machine learning notions on

31
00:01:21,780 --> 00:01:27,810
each of the letters in in the name scout

32
00:01:25,350 --> 00:01:33,389
so basically Scout means simple

33
00:01:27,810 --> 00:01:37,380
classifier over unsupervised tokens yeah

34
00:01:33,390 --> 00:01:39,030
it's impressive cool now before

35
00:01:37,380 --> 00:01:41,699
continuing with the presentation I want

36
00:01:39,030 --> 00:01:44,220
to say that we did a couple of dry runs

37
00:01:41,700 --> 00:01:46,049
yesterday in front of a part of our

38
00:01:44,220 --> 00:01:48,500
colleagues and the feedback that I've

39
00:01:46,049 --> 00:01:51,119
received was that dude you have no idea

40
00:01:48,500 --> 00:01:52,710
on how to use intonation when you are

41
00:01:51,119 --> 00:01:56,909
giving a presentation and you lack

42
00:01:52,710 --> 00:01:58,649
enthusiasm so even if if in the middle

43
00:01:56,909 --> 00:02:02,390
of the presentation I'm gonna start

44
00:01:58,649 --> 00:02:02,390
doing some Michael Jackson trick voice

45
00:02:02,620 --> 00:02:14,020
you now know the reason okay yeah

46
00:02:10,240 --> 00:02:16,630
okay so for our proof of concept we've

47
00:02:14,020 --> 00:02:20,560
chosen JavaScript for several reasons

48
00:02:16,630 --> 00:02:21,400
I've started initially researching I've

49
00:02:20,560 --> 00:02:23,290
started the research for this

50
00:02:21,400 --> 00:02:27,280
presentation in mid-october

51
00:02:23,290 --> 00:02:29,230
I found some some information which

52
00:02:27,280 --> 00:02:30,670
situate the JavaScript in terms of

53
00:02:29,230 --> 00:02:35,109
client-side programming languages that I

54
00:02:30,670 --> 00:02:39,600
use on websites that around 95.1% so

55
00:02:35,110 --> 00:02:43,690
this is the current market position and

56
00:02:39,600 --> 00:02:45,760
being this present in the web it mostly

57
00:02:43,690 --> 00:02:49,540
embodies come on attack vector when it

58
00:02:45,760 --> 00:02:56,950
comes to evil minded attackers trying to

59
00:02:49,540 --> 00:02:59,200
get access to victims computers I'm I'm

60
00:02:56,950 --> 00:03:01,988
not saying per se that JavaScript

61
00:02:59,200 --> 00:03:03,850
frameworks are in any way sort shape or

62
00:03:01,989 --> 00:03:05,320
form vulnerable to anything in

63
00:03:03,850 --> 00:03:07,989
particular I'm just saying that it's

64
00:03:05,320 --> 00:03:11,190
easy to use JavaScript because as an

65
00:03:07,989 --> 00:03:16,150
attacker it's easy to blend to blend in

66
00:03:11,190 --> 00:03:19,510
so some of the popular flavors that you

67
00:03:16,150 --> 00:03:22,510
I'm pretty sure you already know that we

68
00:03:19,510 --> 00:03:25,060
focused on and will encompass some of

69
00:03:22,510 --> 00:03:27,340
the data set that we are going to

70
00:03:25,060 --> 00:03:30,070
present in a couple of slides the good

71
00:03:27,340 --> 00:03:32,769
data set is based on some of the Java

72
00:03:30,070 --> 00:03:39,870
scripts that were pulled from this this

73
00:03:32,769 --> 00:03:42,459
repositories in terms of vulnerabilities

74
00:03:39,870 --> 00:03:45,519
these are quite common when it comes to

75
00:03:42,459 --> 00:03:48,430
to JavaScript I'm pretty sure you are

76
00:03:45,519 --> 00:03:50,230
all familiar with this with the notion

77
00:03:48,430 --> 00:03:54,780
that we've wish we are showing on the

78
00:03:50,230 --> 00:03:59,738
screen I've shifted to a couple of

79
00:03:54,780 --> 00:04:03,730
security reports which were shown this

80
00:03:59,739 --> 00:04:06,180
year and JavaScript is currently used as

81
00:04:03,730 --> 00:04:09,399
a common attack vector most of the head

82
00:04:06,180 --> 00:04:11,950
lines that I've I've seen were related

83
00:04:09,400 --> 00:04:14,620
to form jacking which was quite popular

84
00:04:11,950 --> 00:04:16,409
this year apart from that we had a lot

85
00:04:14,620 --> 00:04:20,510
of JavaScript downloaders

86
00:04:16,410 --> 00:04:23,190
and crypto wall which was a variant of

87
00:04:20,510 --> 00:04:26,730
ransomware used as initial infection

88
00:04:23,190 --> 00:04:32,100
vector a JavaScript file so it's it's

89
00:04:26,730 --> 00:04:34,620
actually commonly used and it's it's not

90
00:04:32,100 --> 00:04:37,890
only targeting like websites it's also

91
00:04:34,620 --> 00:04:39,780
targeting individuals or enterprises

92
00:04:37,890 --> 00:04:41,550
these vulnerabilities that we are

93
00:04:39,780 --> 00:04:44,270
currently showing being not only

94
00:04:41,550 --> 00:04:48,240
client-side issues but also enterprise

95
00:04:44,270 --> 00:04:49,770
nightmares so the detection methods that

96
00:04:48,240 --> 00:04:52,620
we are currently employing when we are

97
00:04:49,770 --> 00:04:55,409
performing analysis are always I'm

98
00:04:52,620 --> 00:04:57,060
pretty sure you already know static and

99
00:04:55,410 --> 00:04:59,310
dynamic and are based on the current

100
00:04:57,060 --> 00:05:00,900
execution state of the script so when

101
00:04:59,310 --> 00:05:04,170
you are talking about static analysis we

102
00:05:00,900 --> 00:05:06,719
are referring to the static features of

103
00:05:04,170 --> 00:05:08,040
a script and its structure and we are

104
00:05:06,720 --> 00:05:10,550
referring to when we are referring to

105
00:05:08,040 --> 00:05:12,390
dynamic analysis we are actually

106
00:05:10,550 --> 00:05:14,070
executing a script in a control

107
00:05:12,390 --> 00:05:15,840
environment and we are monitoring for

108
00:05:14,070 --> 00:05:18,000
known stuff like ports network

109
00:05:15,840 --> 00:05:21,630
connections system configuration file

110
00:05:18,000 --> 00:05:24,060
modifications and or registry registry

111
00:05:21,630 --> 00:05:26,880
modifications and what we are currently

112
00:05:24,060 --> 00:05:30,750
trying to propose with Scout is just

113
00:05:26,880 --> 00:05:38,180
some what a different approach because

114
00:05:30,750 --> 00:05:41,430
Scout uses as a method of detection a

115
00:05:38,180 --> 00:05:43,680
static way of analyzing things but which

116
00:05:41,430 --> 00:05:45,980
is not relying on any sort of explicit

117
00:05:43,680 --> 00:05:48,380
rule and it has two main components

118
00:05:45,980 --> 00:05:51,210
tripod which is the actual brain of the

119
00:05:48,380 --> 00:05:53,280
the project and TB will cover it in the

120
00:05:51,210 --> 00:05:59,969
next slides and a simple simple

121
00:05:53,280 --> 00:06:02,460
multi-layer perceptron okay guys so I am

122
00:05:59,970 --> 00:06:04,770
going to be covering in tripod and I'm

123
00:06:02,460 --> 00:06:06,630
going to start by saying that basically

124
00:06:04,770 --> 00:06:09,180
the main topic in machine learning today

125
00:06:06,630 --> 00:06:11,250
are laid under presentations and I think

126
00:06:09,180 --> 00:06:13,440
this is a good starting point so I mean

127
00:06:11,250 --> 00:06:15,150
begin by defining them and say what

128
00:06:13,440 --> 00:06:16,530
makes them good and what makes some bad

129
00:06:15,150 --> 00:06:19,859
how you do distinguish between them so

130
00:06:16,530 --> 00:06:21,510
for that do we have a mic mobile mic yes

131
00:06:19,860 --> 00:06:25,020
I'm going to need a volunteer

132
00:06:21,510 --> 00:06:27,530
does anybody a volunteer I'm going to

133
00:06:25,020 --> 00:06:27,530
choose that guy

134
00:06:28,439 --> 00:06:35,110
yeah Wow just sit don't worry

135
00:06:31,719 --> 00:06:36,308
okay so we've to everybody so they can

136
00:06:35,110 --> 00:06:38,379
see you come on come on

137
00:06:36,309 --> 00:06:42,189
so we know each other his name is Alex

138
00:06:38,379 --> 00:06:43,929
but I spent half of the day convincing

139
00:06:42,189 --> 00:06:45,699
him to come to this presentation he had

140
00:06:43,929 --> 00:06:48,878
no idea that he's going to he was going

141
00:06:45,699 --> 00:06:50,979
to be abuse here so we're gonna start by

142
00:06:48,879 --> 00:06:53,519
playing a little game I'm going to show

143
00:06:50,979 --> 00:06:55,959
you some pictures and you're going to

144
00:06:53,519 --> 00:06:58,959
and you're going to tell me what you see

145
00:06:55,959 --> 00:07:00,639
in them right so just look at the

146
00:06:58,959 --> 00:07:02,019
pictures on the right not the one on the

147
00:07:00,639 --> 00:07:05,199
top left corner

148
00:07:02,019 --> 00:07:08,259
I'll try have this life right yeah what

149
00:07:05,199 --> 00:07:16,059
do you see kids we want to save him have

150
00:07:08,259 --> 00:07:21,579
anybody are all so cats dog who's that

151
00:07:16,059 --> 00:07:23,409
dog okay one dog where's the dog this

152
00:07:21,579 --> 00:07:32,829
one is the dog right do you know how you

153
00:07:23,409 --> 00:07:34,808
know that's a dog so Alex okay so

154
00:07:32,829 --> 00:07:39,429
basically you know that's a dog because

155
00:07:34,809 --> 00:07:43,719
you have a good he's more happy I catch

156
00:07:39,429 --> 00:07:44,888
her or his head so this means that you

157
00:07:43,719 --> 00:07:46,360
actually have a good internal

158
00:07:44,889 --> 00:07:48,369
representation of what a cat is

159
00:07:46,360 --> 00:07:50,679
you already know that it's furry it has

160
00:07:48,369 --> 00:07:52,869
point years and most of all it goes now

161
00:07:50,679 --> 00:07:55,359
it doesn't bark barking would be a dead

162
00:07:52,869 --> 00:07:59,289
giveaway that that's a dog right so

163
00:07:55,360 --> 00:08:01,599
basically what an later representation

164
00:07:59,289 --> 00:08:03,849
is it's a vector of real valued numbers

165
00:08:01,599 --> 00:08:05,649
that tries to capture abstract features

166
00:08:03,849 --> 00:08:07,209
from the input data now the more

167
00:08:05,649 --> 00:08:09,399
abstract the features the better the

168
00:08:07,209 --> 00:08:11,289
later representation which means that

169
00:08:09,399 --> 00:08:13,389
actually this representation over here

170
00:08:11,289 --> 00:08:15,369
is the perfect representation of a cat

171
00:08:13,389 --> 00:08:18,099
if you'd be able to train a network that

172
00:08:15,369 --> 00:08:19,479
would see that when it sees a cat as an

173
00:08:18,099 --> 00:08:21,519
input that would be great

174
00:08:19,479 --> 00:08:24,279
well in reality it probably looks

175
00:08:21,519 --> 00:08:25,449
something like this which is an abstract

176
00:08:24,279 --> 00:08:28,389
representation of an abyssal

177
00:08:25,449 --> 00:08:30,009
representation of a cat but I mean that

178
00:08:28,389 --> 00:08:31,749
that's good enough so I mean this is

179
00:08:30,009 --> 00:08:33,250
just for show it doesn't really mean

180
00:08:31,749 --> 00:08:36,819
that that's what Network sign it could

181
00:08:33,250 --> 00:08:39,940
be worse than this now one of the main

182
00:08:36,818 --> 00:08:41,949
the most important features of

183
00:08:39,940 --> 00:08:46,360
later presentation is that they have to

184
00:08:41,950 --> 00:08:48,310
be separable on coherent right so I mean

185
00:08:46,360 --> 00:08:52,960
we rendered a couple of digits over here

186
00:08:48,310 --> 00:08:55,420
so we have ones sixes fives fries stuff

187
00:08:52,960 --> 00:08:57,610
like that and we rendered the later

188
00:08:55,420 --> 00:08:59,380
representation of in V dimensional space

189
00:08:57,610 --> 00:09:01,540
this is actually something forever from

190
00:08:59,380 --> 00:09:03,340
a variation autoencoder I think or t-sne

191
00:09:01,540 --> 00:09:05,860
I don't remember but the idea still

192
00:09:03,340 --> 00:09:09,160
holds so you want the input data that

193
00:09:05,860 --> 00:09:10,900
looks alike to be in the same space

194
00:09:09,160 --> 00:09:14,770
the one we you want them to be really

195
00:09:10,900 --> 00:09:17,170
close to each other and you don't so you

196
00:09:14,770 --> 00:09:18,970
expect something like to have a six that

197
00:09:17,170 --> 00:09:21,250
looks like a five that's okay that

198
00:09:18,970 --> 00:09:24,010
happens when the five that looks like a

199
00:09:21,250 --> 00:09:26,530
free which is all the points over here

200
00:09:24,010 --> 00:09:28,780
but what you don't want to have is a six

201
00:09:26,530 --> 00:09:30,579
that would actually create a later

202
00:09:28,780 --> 00:09:33,339
representation that would be close to

203
00:09:30,580 --> 00:09:35,320
one right because if you have a network

204
00:09:33,340 --> 00:09:36,850
that learned that that means it didn't

205
00:09:35,320 --> 00:09:40,750
learn anything so you have a problem

206
00:09:36,850 --> 00:09:42,430
with the data so the same thing applies

207
00:09:40,750 --> 00:09:44,410
for words in natural language so if

208
00:09:42,430 --> 00:09:47,229
you're building later representation for

209
00:09:44,410 --> 00:09:49,780
words you'd expect that words that have

210
00:09:47,230 --> 00:09:51,310
similar meanings or that appear in

211
00:09:49,780 --> 00:09:53,230
similar context to be really close to

212
00:09:51,310 --> 00:09:56,739
each other and further apart from the

213
00:09:53,230 --> 00:09:59,460
other words so now let's let's get to

214
00:09:56,740 --> 00:10:03,100
tripod you still have your mic yeah okay

215
00:09:59,460 --> 00:10:05,350
I'm thinking of a sentence and I'm going

216
00:10:03,100 --> 00:10:07,210
to give you a clue okay and you're going

217
00:10:05,350 --> 00:10:13,060
to tell me what sentence I'm thinking of

218
00:10:07,210 --> 00:10:16,080
right I'll try okay this is the clue the

219
00:10:13,060 --> 00:10:18,989
quick brown fox jumps over the lazy dog

220
00:10:16,080 --> 00:10:27,040
is that okay for everybody

221
00:10:18,990 --> 00:10:28,450
why not there should be a kid but okay

222
00:10:27,040 --> 00:10:32,250
this is not the sentence I was thinking

223
00:10:28,450 --> 00:10:35,020
of I was actually on the way here

224
00:10:32,250 --> 00:10:36,940
Mario's told me that this sentence is

225
00:10:35,020 --> 00:10:39,910
overrated but or for him

226
00:10:36,940 --> 00:10:43,900
foxes are actually read which is really

227
00:10:39,910 --> 00:10:49,079
good but dogs are usually lazy if

228
00:10:43,900 --> 00:10:49,079
they're fat so what could my sentence be

229
00:10:50,320 --> 00:11:06,279
oh come on the fat the fat dog okay so

230
00:11:04,360 --> 00:11:08,370
these were the two sentences great catch

231
00:11:06,279 --> 00:11:11,290
on the red yeah really

232
00:11:08,370 --> 00:11:13,630
so let's see what happened when you saw

233
00:11:11,290 --> 00:11:15,370
my clue you immediately thought about

234
00:11:13,630 --> 00:11:17,410
the quick brown fox jumps over the lazy

235
00:11:15,370 --> 00:11:19,420
dog because you saw that sentence a lot

236
00:11:17,410 --> 00:11:21,490
of times you probably already memorized

237
00:11:19,420 --> 00:11:23,399
it you've seen it everywhere it's been

238
00:11:21,490 --> 00:11:25,839
used in light of I think Microsoft

239
00:11:23,399 --> 00:11:27,699
speech recognition to tune your system

240
00:11:25,839 --> 00:11:29,470
and stuff like that so that's awesome

241
00:11:27,699 --> 00:11:31,689
but you didn't know what I was thinking

242
00:11:29,470 --> 00:11:33,519
about because you're missing something

243
00:11:31,690 --> 00:11:35,050
called context because I told you the

244
00:11:33,519 --> 00:11:37,449
story and you already

245
00:11:35,050 --> 00:11:40,630
I mean you begin began to guess what I

246
00:11:37,449 --> 00:11:43,420
was thinking of so this is this sentence

247
00:11:40,630 --> 00:11:45,699
is from memory those two words

248
00:11:43,420 --> 00:11:47,500
yeah come from context when you had

249
00:11:45,699 --> 00:11:50,949
context you're able to replace them and

250
00:11:47,500 --> 00:11:53,800
to guess exactly what I was thinking and

251
00:11:50,949 --> 00:11:56,139
now there are many sentences that have

252
00:11:53,800 --> 00:11:58,630
the same skeleton so we have the quick

253
00:11:56,139 --> 00:12:00,550
fox jumps over the dog and you can say

254
00:11:58,630 --> 00:12:03,760
the quick red fox jumps over the blue

255
00:12:00,550 --> 00:12:06,189
dog you can say the quick red fox jumps

256
00:12:03,760 --> 00:12:08,380
over the old dog yeah they are the same

257
00:12:06,190 --> 00:12:12,389
so basically you have three types of

258
00:12:08,380 --> 00:12:15,699
representations here right so this is um

259
00:12:12,389 --> 00:12:17,529
getting back to tripod tripod is a

260
00:12:15,699 --> 00:12:20,380
machine learning toolkit that is open

261
00:12:17,529 --> 00:12:23,680
sourced it is used to compute latent

262
00:12:20,380 --> 00:12:25,959
representations for sequences right so

263
00:12:23,680 --> 00:12:27,430
it builds the freed representations that

264
00:12:25,959 --> 00:12:30,099
we talked about so we have the memory

265
00:12:27,430 --> 00:12:34,569
based representation the context which

266
00:12:30,100 --> 00:12:36,819
we call summary here and the GST which

267
00:12:34,569 --> 00:12:41,019
stands for global style tokens but it's

268
00:12:36,819 --> 00:12:43,569
the style representation right so what

269
00:12:41,019 --> 00:12:45,490
it does it uses a trick that is using

270
00:12:43,569 --> 00:12:47,170
many unsupervised machine learning

271
00:12:45,490 --> 00:12:49,269
algorithms that try to learn later

272
00:12:47,170 --> 00:12:51,790
representations and it has the input

273
00:12:49,269 --> 00:12:53,949
data it computes a later representation

274
00:12:51,790 --> 00:12:55,209
for that and it tries to reconstruct the

275
00:12:53,949 --> 00:12:56,829
same input data based on the other

276
00:12:55,209 --> 00:13:02,410
presentation so that's a procedure is

277
00:12:56,829 --> 00:13:03,579
called conditioning vector and tripod

278
00:13:02,410 --> 00:13:05,620
computes

279
00:13:03,580 --> 00:13:07,899
the conditioning vector using something

280
00:13:05,620 --> 00:13:10,000
called an attention the attention

281
00:13:07,899 --> 00:13:13,630
mechanism so what the attention

282
00:13:10,000 --> 00:13:15,100
mechanism is can be easily shown by

283
00:13:13,630 --> 00:13:16,899
taking these three examples so we have

284
00:13:15,100 --> 00:13:19,630
the two standard machine learning

285
00:13:16,899 --> 00:13:21,820
approaches to image captioning on the

286
00:13:19,630 --> 00:13:25,149
left on machine translation on the right

287
00:13:21,820 --> 00:13:26,830
so we have English and French and we

288
00:13:25,149 --> 00:13:30,100
have those images and the model has to

289
00:13:26,830 --> 00:13:33,160
guess the sentence word by word so

290
00:13:30,100 --> 00:13:35,529
attention actually allows the model to

291
00:13:33,160 --> 00:13:37,930
focus on a small portion of the input

292
00:13:35,529 --> 00:13:40,990
whenever it generates a new token so

293
00:13:37,930 --> 00:13:42,250
when it says frisbee this is I don't

294
00:13:40,990 --> 00:13:44,380
know if you can read this is this

295
00:13:42,250 --> 00:13:46,660
readable for anybody okay

296
00:13:44,380 --> 00:13:49,029
so when it says frisbee it focuses on

297
00:13:46,660 --> 00:13:51,550
this portion of the image where you have

298
00:13:49,029 --> 00:13:57,660
a frisbee when it says dog it looks

299
00:13:51,550 --> 00:13:57,660
under the dog under the bed right okay

300
00:13:57,839 --> 00:14:03,550
so this is basically tripod tripod

301
00:14:00,880 --> 00:14:05,050
computes free attentions the first one

302
00:14:03,550 --> 00:14:06,849
is over the input sequence this is

303
00:14:05,050 --> 00:14:10,000
actually the model it's a standard

304
00:14:06,850 --> 00:14:11,649
encoder decoder it takes the input it

305
00:14:10,000 --> 00:14:13,089
computes an attention over it and it

306
00:14:11,649 --> 00:14:16,060
tries to reconstruct it and this

307
00:14:13,089 --> 00:14:17,950
actually creates the context right now

308
00:14:16,060 --> 00:14:19,479
it turns out that you don't have to

309
00:14:17,950 --> 00:14:23,010
apply the attention over the input

310
00:14:19,480 --> 00:14:27,550
necessarily you can actually use vectors

311
00:14:23,010 --> 00:14:30,189
a fixed number of vectors and if the the

312
00:14:27,550 --> 00:14:31,930
number is really small like 20 or 40 or

313
00:14:30,190 --> 00:14:35,790
stuff like that the network would have

314
00:14:31,930 --> 00:14:38,319
to generalize and actually learn to map

315
00:14:35,790 --> 00:14:41,290
skeletons of sentences to these vectors

316
00:14:38,320 --> 00:14:43,540
so this is where you get the style and

317
00:14:41,290 --> 00:14:45,430
the last part the memory part is really

318
00:14:43,540 --> 00:14:48,910
easy because you can always over fit a

319
00:14:45,430 --> 00:14:50,979
model so each time it sees something

320
00:14:48,910 --> 00:14:53,110
that is has seen enough you know in the

321
00:14:50,980 --> 00:14:55,420
past it will know it has seen it and

322
00:14:53,110 --> 00:14:57,220
this is done in our case by applying the

323
00:14:55,420 --> 00:15:02,620
attention of a really large number of

324
00:14:57,220 --> 00:15:04,839
tokens right now we the project is open

325
00:15:02,620 --> 00:15:07,510
sourced we have a pip package

326
00:15:04,839 --> 00:15:11,890
installation you have also Python API

327
00:15:07,510 --> 00:15:13,600
you have just been import the the API in

328
00:15:11,890 --> 00:15:15,400
Python create a new instance that it

329
00:15:13,600 --> 00:15:16,460
what model to load we provide with a

330
00:15:15,400 --> 00:15:19,040
model for

331
00:15:16,460 --> 00:15:21,170
English romanian and also javascript

332
00:15:19,040 --> 00:15:23,750
which is actually the base of the rest

333
00:15:21,170 --> 00:15:26,660
of the presentation once you've loaded

334
00:15:23,750 --> 00:15:28,160
the data you just have to apply it order

335
00:15:26,660 --> 00:15:30,199
the model you just have to apply it over

336
00:15:28,160 --> 00:15:32,360
your data I just call this method over

337
00:15:30,200 --> 00:15:33,620
here and you get it and a presentation

338
00:15:32,360 --> 00:15:35,810
and to show you how this works on

339
00:15:33,620 --> 00:15:38,990
JavaScript we have three really simple

340
00:15:35,810 --> 00:15:41,150
examples so the first two right you can

341
00:15:38,990 --> 00:15:42,650
see them over here so we have example

342
00:15:41,150 --> 00:15:45,140
one example - and the example number

343
00:15:42,650 --> 00:15:47,390
three the first two are just basic for

344
00:15:45,140 --> 00:15:49,520
loops with a conditional print on the

345
00:15:47,390 --> 00:15:53,420
last one isn't really an optimal sorting

346
00:15:49,520 --> 00:15:55,970
algorithm right so over here we rendered

347
00:15:53,420 --> 00:15:58,400
the tripod vectors we projected them

348
00:15:55,970 --> 00:16:00,290
into a b dimensional space and this is

349
00:15:58,400 --> 00:16:02,209
the general representation composed of

350
00:16:00,290 --> 00:16:03,980
by concatenating all the free vectors

351
00:16:02,210 --> 00:16:06,740
inside one or reducing the

352
00:16:03,980 --> 00:16:09,560
dimensionality this is the summary based

353
00:16:06,740 --> 00:16:10,820
representation and these are the style

354
00:16:09,560 --> 00:16:13,280
tokens and the memory based

355
00:16:10,820 --> 00:16:16,160
representations now if you look at the

356
00:16:13,280 --> 00:16:19,069
summary you see that the vectors are

357
00:16:16,160 --> 00:16:20,959
further apart right so this is because

358
00:16:19,070 --> 00:16:22,550
they use different variables the

359
00:16:20,960 --> 00:16:24,980
condition is inverted and there are

360
00:16:22,550 --> 00:16:27,140
slight differences in the way if the

361
00:16:24,980 --> 00:16:28,790
code is written right so we have break

362
00:16:27,140 --> 00:16:31,100
it's on top we don't have one on the

363
00:16:28,790 --> 00:16:33,500
bottom but when you look at the style on

364
00:16:31,100 --> 00:16:36,530
memory the first two examples actually

365
00:16:33,500 --> 00:16:38,300
collapse this is this is a vector which

366
00:16:36,530 --> 00:16:39,920
is composed by the to collapse in

367
00:16:38,300 --> 00:16:42,790
vectors of the first two examples which

368
00:16:39,920 --> 00:16:48,890
is good because basically the code does

369
00:16:42,790 --> 00:16:50,810
kind of the same thing right so this

370
00:16:48,890 --> 00:16:53,870
also works for text we have two

371
00:16:50,810 --> 00:16:55,880
sentences with from Wikipedia that think

372
00:16:53,870 --> 00:16:57,620
about Science and Mathematics the first

373
00:16:55,880 --> 00:17:00,950
two and the second two something to do

374
00:16:57,620 --> 00:17:01,370
with administrative and table stuff like

375
00:17:00,950 --> 00:17:06,080
that

376
00:17:01,370 --> 00:17:07,459
so we have the overall vectors which

377
00:17:06,079 --> 00:17:09,379
we're not going to talk about because it

378
00:17:07,459 --> 00:17:11,209
doesn't really express anything but we

379
00:17:09,380 --> 00:17:12,620
have the summary which says that the

380
00:17:11,209 --> 00:17:13,910
first two sentences are really close to

381
00:17:12,619 --> 00:17:15,829
each other and the last sentences are

382
00:17:13,910 --> 00:17:18,410
really close to each other and when you

383
00:17:15,829 --> 00:17:21,079
look at the style on memory based

384
00:17:18,410 --> 00:17:22,700
representation you see that actually the

385
00:17:21,079 --> 00:17:24,349
first and the last sentence are close to

386
00:17:22,700 --> 00:17:26,839
each other and that's probably because

387
00:17:24,349 --> 00:17:28,969
they are definitions of something so

388
00:17:26,839 --> 00:17:32,539
basically this is tripod

389
00:17:28,970 --> 00:17:32,900
I think mothers can I can take it from

390
00:17:32,539 --> 00:17:36,140
here

391
00:17:32,900 --> 00:17:38,330
yep so we've tried to formalize the bid

392
00:17:36,140 --> 00:17:40,190
the process so this is the machine

393
00:17:38,330 --> 00:17:42,649
learning project lifecycle so we've

394
00:17:40,190 --> 00:17:45,080
wrapped our efforts around the stages as

395
00:17:42,650 --> 00:17:48,140
you can see on the screen now we've

396
00:17:45,080 --> 00:17:50,330
spent the most time of the most of our

397
00:17:48,140 --> 00:17:54,909
time in gathering the data and exploring

398
00:17:50,330 --> 00:17:54,908
and prepared for the for the project so

399
00:17:54,940 --> 00:17:59,630
we've encountered some challenges when

400
00:17:57,590 --> 00:18:02,928
building the the the data set because we

401
00:17:59,630 --> 00:18:04,610
we've needed enough labeled data good

402
00:18:02,929 --> 00:18:07,460
and bad for our project because this was

403
00:18:04,610 --> 00:18:09,799
the specifics of it and one thing that

404
00:18:07,460 --> 00:18:11,780
we've learned was that data is the most

405
00:18:09,799 --> 00:18:15,408
crucial aspect of a machine learning

406
00:18:11,780 --> 00:18:17,240
project no matter how good your AI team

407
00:18:15,409 --> 00:18:20,480
is and trust me this guy is really smart

408
00:18:17,240 --> 00:18:22,370
your project will will actually fail

409
00:18:20,480 --> 00:18:24,260
second of all you will spend a lot of

410
00:18:22,370 --> 00:18:26,330
time on exploring the day time preparing

411
00:18:24,260 --> 00:18:28,129
yet because machine learning is not all

412
00:18:26,330 --> 00:18:31,280
about large data sets you have to feed

413
00:18:28,130 --> 00:18:34,760
the system with carefully curated and

414
00:18:31,280 --> 00:18:37,158
and diverse data and after that you have

415
00:18:34,760 --> 00:18:39,230
to model the data that you will be using

416
00:18:37,159 --> 00:18:40,820
for prediction and make sure that you

417
00:18:39,230 --> 00:18:44,150
communicate the results in a manner

418
00:18:40,820 --> 00:18:48,408
that's clear and concise now what were

419
00:18:44,150 --> 00:18:50,210
the specifics of our project before

420
00:18:48,409 --> 00:18:52,010
going further I'd like to mention that

421
00:18:50,210 --> 00:18:54,110
all the resources that we've used will

422
00:18:52,010 --> 00:18:57,860
be mentioned on the last slide of the

423
00:18:54,110 --> 00:19:00,949
presentation for creating the legitimate

424
00:18:57,860 --> 00:19:04,520
data set we've used we've sifted through

425
00:19:00,950 --> 00:19:06,260
a lot of github pages of known popular

426
00:19:04,520 --> 00:19:08,450
frameworks basically the one that I've

427
00:19:06,260 --> 00:19:10,400
listed on the first slide so jQuery know

428
00:19:08,450 --> 00:19:12,500
the angular view material and stuff like

429
00:19:10,400 --> 00:19:13,940
that we've extracted JavaScript from

430
00:19:12,500 --> 00:19:16,159
there and created the legitimate data

431
00:19:13,940 --> 00:19:18,080
set and then we were lucky enough and

432
00:19:16,159 --> 00:19:19,429
one of the reasons that we focused or

433
00:19:18,080 --> 00:19:21,830
another reason that we focused on

434
00:19:19,429 --> 00:19:24,260
JavaScript was because we were able to

435
00:19:21,830 --> 00:19:26,799
find a couple of repositories on github

436
00:19:24,260 --> 00:19:29,780
which stored around 40,000 malicious

437
00:19:26,799 --> 00:19:32,929
JavaScript but keep in mind that those

438
00:19:29,780 --> 00:19:37,190
repositories were created around 2016 or

439
00:19:32,929 --> 00:19:40,730
2017 so initially we had the good data

440
00:19:37,190 --> 00:19:42,110
set and the bad data set and we ran our

441
00:19:40,730 --> 00:19:43,670
initial tests on them

442
00:19:42,110 --> 00:19:46,010
the results that we've obtained were

443
00:19:43,670 --> 00:19:47,990
unsatisfactory meaning that we were able

444
00:19:46,010 --> 00:19:51,110
to classify malicious JavaScript with

445
00:19:47,990 --> 00:19:52,850
generic accuracy of 0.99 percent one

446
00:19:51,110 --> 00:19:54,949
being the maximum of it so we then

447
00:19:52,850 --> 00:19:57,199
return to the exploration part and we

448
00:19:54,950 --> 00:20:00,380
found out that a vast majority of the

449
00:19:57,200 --> 00:20:02,000
the scripts were obfuscated and then

450
00:20:00,380 --> 00:20:03,830
we've spent a lot of time trying to

451
00:20:02,000 --> 00:20:05,929
replicate and mimic obfuscation

452
00:20:03,830 --> 00:20:07,970
techniques that were used in our bad

453
00:20:05,929 --> 00:20:09,590
data set and include them in the actual

454
00:20:07,970 --> 00:20:12,650
corpus because we wanted to be the

455
00:20:09,590 --> 00:20:14,510
Builder robust dataset and we wanted to

456
00:20:12,650 --> 00:20:18,049
avoid that every time we run Scout

457
00:20:14,510 --> 00:20:19,970
against an obfuscated script it will be

458
00:20:18,049 --> 00:20:21,918
automatically flagged as malicious even

459
00:20:19,970 --> 00:20:23,450
though the script wasn't malicious and

460
00:20:21,919 --> 00:20:25,820
now that I'm mentioning that I'm

461
00:20:23,450 --> 00:20:28,730
thinking at least of a couple of reasons

462
00:20:25,820 --> 00:20:30,710
that one might want to obfuscate let's

463
00:20:28,730 --> 00:20:36,410
say illegitimate scripts for size

464
00:20:30,710 --> 00:20:41,780
reasons or for ideas logic or code and

465
00:20:36,410 --> 00:20:44,840
code cool the pre-processing part of it

466
00:20:41,780 --> 00:20:48,470
included as a suit of technique so we've

467
00:20:44,840 --> 00:20:49,850
focused a lot of minification which is

468
00:20:48,470 --> 00:20:52,040
the process of removing all the

469
00:20:49,850 --> 00:20:53,659
unnecessary characters from our script

470
00:20:52,040 --> 00:20:58,520
without tempering its functionality

471
00:20:53,660 --> 00:21:02,299
we've targeted comments wide spaces

472
00:20:58,520 --> 00:21:04,160
lines and tabs when we did finish this

473
00:21:02,299 --> 00:21:05,780
part we moved on to obfuscation and we

474
00:21:04,160 --> 00:21:07,960
were able to find an open source tool

475
00:21:05,780 --> 00:21:11,918
which is called JavaScript obfuscator

476
00:21:07,960 --> 00:21:14,990
this tool provides several ways of

477
00:21:11,919 --> 00:21:17,720
actually obfuscating script so we

478
00:21:14,990 --> 00:21:21,530
focused on base 64 hexadecimal

479
00:21:17,720 --> 00:21:23,570
obfuscation and mangle obfuscation as

480
00:21:21,530 --> 00:21:25,549
they call them and apart from that we

481
00:21:23,570 --> 00:21:27,139
found out that another obfuscation

482
00:21:25,549 --> 00:21:31,929
technique that was highly used in our

483
00:21:27,140 --> 00:21:35,000
malicious data set was the pending of

484
00:21:31,929 --> 00:21:37,400
certain symbols inside the script so

485
00:21:35,000 --> 00:21:41,030
what we did we've actually appended

486
00:21:37,400 --> 00:21:43,490
commas and quotations after each

487
00:21:41,030 --> 00:21:45,830
character on a subset of the data set

488
00:21:43,490 --> 00:21:47,870
after sequences of two characters and

489
00:21:45,830 --> 00:21:50,740
after sequences of three characters

490
00:21:47,870 --> 00:21:54,770
because that was the actual the actual

491
00:21:50,740 --> 00:21:55,680
specifics of our data set and when we

492
00:21:54,770 --> 00:21:57,870
were

493
00:21:55,680 --> 00:22:00,630
and satisfied with the applications that

494
00:21:57,870 --> 00:22:03,419
we've employed so far we moved on to

495
00:22:00,630 --> 00:22:05,580
character code sequences because if you

496
00:22:03,420 --> 00:22:07,530
remember I'm pretty sure you do a tripod

497
00:22:05,580 --> 00:22:09,629
works one character called sequences so

498
00:22:07,530 --> 00:22:12,030
what we did we actually from the whole

499
00:22:09,630 --> 00:22:13,080
master data set because that was the

500
00:22:12,030 --> 00:22:16,470
name that we've used

501
00:22:13,080 --> 00:22:18,389
we've split it and created one thousand

502
00:22:16,470 --> 00:22:20,370
characters called sequences and we've

503
00:22:18,390 --> 00:22:23,130
also labeled them with zero if the

504
00:22:20,370 --> 00:22:25,260
character code sequence was good and one

505
00:22:23,130 --> 00:22:27,470
if the character code sequence was bad

506
00:22:25,260 --> 00:22:30,870
and then the next step was actually to

507
00:22:27,470 --> 00:22:34,290
run tripod on all those the character

508
00:22:30,870 --> 00:22:39,209
code sequences and tripod to care of the

509
00:22:34,290 --> 00:22:41,580
vectorization part of it in terms of

510
00:22:39,210 --> 00:22:44,040
model implementation one thing that I

511
00:22:41,580 --> 00:22:45,449
would like to emphasize before like

512
00:22:44,040 --> 00:22:49,170
explaining the logic flow which is

513
00:22:45,450 --> 00:22:51,870
extremely simple open source and

514
00:22:49,170 --> 00:22:55,590
user-friendly these are the main things

515
00:22:51,870 --> 00:22:59,250
that you should keep in mind so we've

516
00:22:55,590 --> 00:23:02,250
used two two libraries for our

517
00:22:59,250 --> 00:23:04,320
multi-layer perceptron which is a class

518
00:23:02,250 --> 00:23:08,280
of neural network that has at least one

519
00:23:04,320 --> 00:23:10,950
hidden network tensorflow which can be

520
00:23:08,280 --> 00:23:14,340
used on all platforms windows mac linux

521
00:23:10,950 --> 00:23:16,890
and Kara's which is a library written in

522
00:23:14,340 --> 00:23:18,899
Python that can be used for fast

523
00:23:16,890 --> 00:23:23,250
experimentations with with neural

524
00:23:18,900 --> 00:23:25,080
networks also so if you want to gather

525
00:23:23,250 --> 00:23:27,750
more information about this particular

526
00:23:25,080 --> 00:23:30,780
libraries why we highly encourage you to

527
00:23:27,750 --> 00:23:33,540
visit their official pages and find more

528
00:23:30,780 --> 00:23:35,910
about the features and how they can be

529
00:23:33,540 --> 00:23:38,550
actually used and if you search like

530
00:23:35,910 --> 00:23:39,930
Google you will find a lot of projects

531
00:23:38,550 --> 00:23:41,370
which are based on care centers for

532
00:23:39,930 --> 00:23:43,380
because these are too powerful really

533
00:23:41,370 --> 00:23:46,020
powerful resources so what you're seeing

534
00:23:43,380 --> 00:23:48,450
on the screen is basically our

535
00:23:46,020 --> 00:23:51,030
multi-layer perceptron and that's why

536
00:23:48,450 --> 00:23:54,420
I've said that is a simple simple

537
00:23:51,030 --> 00:23:55,860
solution that we've used inside Scout

538
00:23:54,420 --> 00:23:58,650
and the logic flow is quite

539
00:23:55,860 --> 00:24:01,340
straightforward so we had the good and

540
00:23:58,650 --> 00:24:04,230
the bad script which we fed into tripod

541
00:24:01,340 --> 00:24:06,360
tripod created the vectors which we've

542
00:24:04,230 --> 00:24:08,150
labeled here is our data set and then we

543
00:24:06,360 --> 00:24:15,620
use the multi-layer

544
00:24:08,150 --> 00:24:20,049
in the training phase now results and I

545
00:24:15,620 --> 00:24:20,049
have to make a few mentions here so

546
00:24:21,190 --> 00:24:29,270
we've run a scout on an unseen data set

547
00:24:25,549 --> 00:24:31,400
which was composed of 42 benign scripts

548
00:24:29,270 --> 00:24:34,100
and 42 malicious scripts what I would

549
00:24:31,400 --> 00:24:35,750
like to mention here it's why did we

550
00:24:34,100 --> 00:24:37,219
call it an unseen data set I mean it's a

551
00:24:35,750 --> 00:24:39,620
common machine learning thing is because

552
00:24:37,220 --> 00:24:41,990
this particular data set wasn't part of

553
00:24:39,620 --> 00:24:44,059
the training set so we have to keep in

554
00:24:41,990 --> 00:24:47,559
mind this we've created a separate data

555
00:24:44,059 --> 00:24:50,990
set which was composed out of other

556
00:24:47,559 --> 00:24:53,120
malicious scripts which employed let's

557
00:24:50,990 --> 00:24:55,809
say more novel techniques in terms of

558
00:24:53,120 --> 00:24:57,590
obfuscation and we've worked

559
00:24:55,809 --> 00:25:00,350
hand-in-hand with our threat

560
00:24:57,590 --> 00:25:03,320
intelligence team to create this

561
00:25:00,350 --> 00:25:06,439
particular data set and I can explain

562
00:25:03,320 --> 00:25:09,830
the the the results that we've obtained

563
00:25:06,440 --> 00:25:11,990
on that unseen data set what you're

564
00:25:09,830 --> 00:25:14,960
actually seeing here is the results that

565
00:25:11,990 --> 00:25:17,660
we've we were able to obtain on the

566
00:25:14,960 --> 00:25:18,980
actual training set so the results that

567
00:25:17,660 --> 00:25:22,760
we've obtained on the training set were

568
00:25:18,980 --> 00:25:27,620
a bit higher on the training set and

569
00:25:22,760 --> 00:25:30,020
test set up to 0.97% accuracy in terms

570
00:25:27,620 --> 00:25:32,989
of detection but when we've run Scout on

571
00:25:30,020 --> 00:25:35,418
the unseen data set the accuracy per

572
00:25:32,990 --> 00:25:39,410
segment so those 1,000 character code

573
00:25:35,419 --> 00:25:41,419
sequences was situated at around 0.99 1%

574
00:25:39,410 --> 00:25:44,030
and what we did afterwards we've applied

575
00:25:41,419 --> 00:25:46,309
some sort of logic because we've

576
00:25:44,030 --> 00:25:48,980
intended to increase the accuracy in

577
00:25:46,309 --> 00:25:51,350
detecting malicious those malicious

578
00:25:48,980 --> 00:25:55,490
scripts so we've employed a couple of if

579
00:25:51,350 --> 00:25:56,899
statements I'm gonna give you some

580
00:25:55,490 --> 00:25:58,669
examples in order for you to better

581
00:25:56,900 --> 00:26:01,330
understand what we did here so we've

582
00:25:58,669 --> 00:26:05,120
said that if a particular script

583
00:26:01,330 --> 00:26:07,129
contains like four segments and out of

584
00:26:05,120 --> 00:26:09,799
those four segments three of them are

585
00:26:07,130 --> 00:26:11,299
flagged as being malicious by Scout then

586
00:26:09,799 --> 00:26:14,510
the whole file will be considered as

587
00:26:11,299 --> 00:26:16,940
malicious if we have for example of a

588
00:26:14,510 --> 00:26:19,929
really big web page which was injected

589
00:26:16,940 --> 00:26:19,929
with a segment

590
00:26:19,980 --> 00:26:25,440
and we run Scout on it and the score

591
00:26:22,830 --> 00:26:27,960
that we are getting out of only that

592
00:26:25,440 --> 00:26:30,419
specific segment it's like zero point

593
00:26:27,960 --> 00:26:32,340
nine nine percent then we're gonna flag

594
00:26:30,419 --> 00:26:34,169
it as militias per se even though it

595
00:26:32,340 --> 00:26:36,840
contains only one segment but the score

596
00:26:34,169 --> 00:26:39,360
is really really high and a couple of

597
00:26:36,840 --> 00:26:41,820
other things but you can actually modify

598
00:26:39,360 --> 00:26:44,790
to you know to your needs this specific

599
00:26:41,820 --> 00:26:49,918
logic maybe if you're obtaining scores

600
00:26:44,790 --> 00:26:53,760
like around 0.5% 0.4% and a couple of

601
00:26:49,919 --> 00:26:57,870
the segments that you identify where

602
00:26:53,760 --> 00:27:00,179
this specific result maybe you can want

603
00:26:57,870 --> 00:27:02,459
you might want to flag that that that

604
00:27:00,179 --> 00:27:06,330
file is being suspicious not malicious

605
00:27:02,460 --> 00:27:08,100
and analyze it afterwards cool but you

606
00:27:06,330 --> 00:27:11,100
don't have to actually trust these

607
00:27:08,100 --> 00:27:14,668
results so it's it's 91 percent it's not

608
00:27:11,100 --> 00:27:21,090
0.91 yeah 90 91 95 I said something

609
00:27:14,669 --> 00:27:22,410
about one being the max score okay yeah

610
00:27:21,090 --> 00:27:25,918
yeah them you don't have to trust us

611
00:27:22,410 --> 00:27:29,190
it's open source just run it on your

612
00:27:25,919 --> 00:27:36,150
machine and I think it will do it will

613
00:27:29,190 --> 00:27:42,200
do it will do the job now some of the

614
00:27:36,150 --> 00:27:45,570
conclusions that we've found during the

615
00:27:42,200 --> 00:27:47,790
this project it's like there is space

616
00:27:45,570 --> 00:27:49,530
for machine learning there is a place

617
00:27:47,790 --> 00:27:53,460
for machine learning in the security

618
00:27:49,530 --> 00:27:57,510
space apart from that we found out that

619
00:27:53,460 --> 00:27:59,549
data and the time you spend processing

620
00:27:57,510 --> 00:28:02,309
it is actually the most crucial aspect

621
00:27:59,549 --> 00:28:04,350
of machine learning project and I'm

622
00:28:02,309 --> 00:28:08,340
gonna let it be like make a few mentions

623
00:28:04,350 --> 00:28:10,530
about tripod okay so tripod is open

624
00:28:08,340 --> 00:28:12,178
sourced if you guys want to contribute

625
00:28:10,530 --> 00:28:14,940
to it you can contribute by train your

626
00:28:12,179 --> 00:28:17,490
models maybe making them available for

627
00:28:14,940 --> 00:28:18,260
other people who are part of the

628
00:28:17,490 --> 00:28:21,900
community

629
00:28:18,260 --> 00:28:26,400
also if you want future requests you can

630
00:28:21,900 --> 00:28:28,730
just go to github file an issue as for

631
00:28:26,400 --> 00:28:32,540
resources they top anything you want and

632
00:28:28,730 --> 00:28:32,540
also give us a star

633
00:28:34,160 --> 00:28:39,030
yeah and another mention that we would

634
00:28:36,540 --> 00:28:42,030
like to make so we weren't the only ones

635
00:28:39,030 --> 00:28:44,160
who worked on this project I'm if you

636
00:28:42,030 --> 00:28:47,639
remember there were three names on the

637
00:28:44,160 --> 00:28:50,100
initial slide so we had another member

638
00:28:47,640 --> 00:28:51,900
of our team who spent a lot of time on

639
00:28:50,100 --> 00:28:54,300
this project and this dude is like

640
00:28:51,900 --> 00:28:56,280
sitting right here and judging us

641
00:28:54,300 --> 00:28:59,389
because we haven't called his name so

642
00:28:56,280 --> 00:29:10,170
far so his name is Andre Cote and he had

643
00:28:59,390 --> 00:29:13,410
some contributions to this project yeah

644
00:29:10,170 --> 00:29:16,110
and I feel like I need to mention two

645
00:29:13,410 --> 00:29:17,700
more things so when we've worked on this

646
00:29:16,110 --> 00:29:19,590
project we've encountered a couple of

647
00:29:17,700 --> 00:29:22,920
limitations that I feel like I need to

648
00:29:19,590 --> 00:29:25,980
bring up so one limitation is like the

649
00:29:22,920 --> 00:29:27,480
unavailability of malicious repositories

650
00:29:25,980 --> 00:29:31,590
that you can use in order to train your

651
00:29:27,480 --> 00:29:33,960
model and the other one let's say it's

652
00:29:31,590 --> 00:29:38,399
related to obfuscation techniques so

653
00:29:33,960 --> 00:29:40,350
we've trained Scout on a finite number

654
00:29:38,400 --> 00:29:44,190
of obfuscation techniques and if

655
00:29:40,350 --> 00:29:48,389
tomorrow let's say I've heard like apt

656
00:29:44,190 --> 00:29:50,790
25 being a thing these days comes up

657
00:29:48,390 --> 00:29:52,560
with a new technique of focus gating

658
00:29:50,790 --> 00:29:56,190
these files that it's going to be able

659
00:29:52,560 --> 00:29:58,409
to hide this structure we might not be

660
00:29:56,190 --> 00:30:00,690
able to highlight that specific script

661
00:29:58,410 --> 00:30:02,340
as being malicious with that without

662
00:30:00,690 --> 00:30:05,700
high accuracy but keep in mind that

663
00:30:02,340 --> 00:30:09,480
Scout is a work in progress type of a

664
00:30:05,700 --> 00:30:11,370
project so we or you if you find new

665
00:30:09,480 --> 00:30:13,020
techniques or we if we come along with

666
00:30:11,370 --> 00:30:16,050
new techniques we can create specific

667
00:30:13,020 --> 00:30:20,840
datasets which use that technique and we

668
00:30:16,050 --> 00:30:20,840
can train Scout on those techniques

669
00:30:21,220 --> 00:30:33,700
and thank you thank you for the

670
00:30:31,750 --> 00:30:36,460
presentation guys and I think you can

671
00:30:33,700 --> 00:30:38,200
notice how much it was appreciated by

672
00:30:36,460 --> 00:30:41,560
the number of hands that started raising

673
00:30:38,200 --> 00:30:43,000
before you are done all right let's take

674
00:30:41,560 --> 00:30:46,210
a few questions can you take a question

675
00:30:43,000 --> 00:30:49,300
from the right side phone sorry I don't

676
00:30:46,210 --> 00:30:51,280
know this is working yeah I have two

677
00:30:49,300 --> 00:30:53,680
questions actually Oh first one is

678
00:30:51,280 --> 00:30:56,620
related to the training part like you

679
00:30:53,680 --> 00:30:58,480
said it's open source and I can download

680
00:30:56,620 --> 00:31:01,479
it and use it in my own project so what

681
00:30:58,480 --> 00:31:03,400
happens if after I download it I use it

682
00:31:01,480 --> 00:31:05,560
in my Python script and the training

683
00:31:03,400 --> 00:31:06,940
section what would be like it's already

684
00:31:05,560 --> 00:31:10,090
trained it's gonna start from scratch

685
00:31:06,940 --> 00:31:14,590
and trained it's gonna train based on my

686
00:31:10,090 --> 00:31:17,470
samples so so so basically we have two

687
00:31:14,590 --> 00:31:19,810
parts of the projects of the first one

688
00:31:17,470 --> 00:31:22,120
is tripod which is able to extract later

689
00:31:19,810 --> 00:31:23,350
representation from JavaScript and you

690
00:31:22,120 --> 00:31:25,570
can probably train it on any other

691
00:31:23,350 --> 00:31:27,750
languages on the second one it's

692
00:31:25,570 --> 00:31:29,970
actually the classifier which tries to

693
00:31:27,750 --> 00:31:31,930
classify based on the extract of

694
00:31:29,970 --> 00:31:32,370
representation if that's malicious or

695
00:31:31,930 --> 00:31:35,650
not

696
00:31:32,370 --> 00:31:37,419
now I know that tripod is open-source

697
00:31:35,650 --> 00:31:42,700
I don't know if Scout itself it's

698
00:31:37,420 --> 00:31:45,640
already out there and so the code is not

699
00:31:42,700 --> 00:31:48,460
actually open source just tripod okay so

700
00:31:45,640 --> 00:31:51,670
next yeah and the next question would be

701
00:31:48,460 --> 00:31:54,820
like did you perform any tests against

702
00:31:51,670 --> 00:31:58,060
the most classic stuff the delivery

703
00:31:54,820 --> 00:32:04,570
mechanism using the JavaScript no yes no

704
00:31:58,060 --> 00:32:11,409
we have of course I mean you just send

705
00:32:04,570 --> 00:32:12,370
me an email to Brianna Thanks all right

706
00:32:11,410 --> 00:32:20,710
next question

707
00:32:12,370 --> 00:32:24,370
a great job by the way these two I have

708
00:32:20,710 --> 00:32:25,690
a question related to an Adobe product H

709
00:32:24,370 --> 00:32:27,040
yeah I would like to know when you guys

710
00:32:25,690 --> 00:32:34,450
want to read the world of

711
00:32:27,040 --> 00:32:35,580
test called flash with no I mean I mean

712
00:32:34,450 --> 00:32:38,500
for real

713
00:32:35,580 --> 00:32:42,070
just promises we're gonna pull the

714
00:32:38,500 --> 00:32:47,010
finger buried it's already dead from

715
00:32:42,070 --> 00:32:49,870
what I know don't shatter his hope yeah

716
00:32:47,010 --> 00:32:53,790
all right let's take another actual

717
00:32:49,870 --> 00:32:57,030
question here at the front

718
00:32:53,790 --> 00:33:01,060
hi a very good presentation thank you

719
00:32:57,030 --> 00:33:02,830
how can we use this to limit false

720
00:33:01,060 --> 00:33:04,090
positive in static code analysis for

721
00:33:02,830 --> 00:33:06,909
instance because you mentioned that we

722
00:33:04,090 --> 00:33:11,199
can go and use it in Java or C sharp can

723
00:33:06,910 --> 00:33:13,150
use it how hard is to port this oh so

724
00:33:11,200 --> 00:33:17,190
basically we have I mean we have a

725
00:33:13,150 --> 00:33:20,770
Python API you just feed it some random

726
00:33:17,190 --> 00:33:22,900
size of code sample of code and you say

727
00:33:20,770 --> 00:33:25,810
compute something based on this right

728
00:33:22,900 --> 00:33:27,820
and then what you do with that data

729
00:33:25,810 --> 00:33:29,830
it depends on you so if you want to

730
00:33:27,820 --> 00:33:31,360
place I mean to classify between

731
00:33:29,830 --> 00:33:32,980
malicious or not malicious maybe you

732
00:33:31,360 --> 00:33:34,479
have a different data set you just build

733
00:33:32,980 --> 00:33:38,080
your own multiplayer multi-layer

734
00:33:34,480 --> 00:33:40,690
perceptron use your own data or just

735
00:33:38,080 --> 00:33:45,970
wait for Scott to be open source done

736
00:33:40,690 --> 00:33:48,310
but I believe that everybody has I mean

737
00:33:45,970 --> 00:33:51,430
we relied off on stuff that was already

738
00:33:48,310 --> 00:33:53,980
out there and I think that most most

739
00:33:51,430 --> 00:33:57,010
companies have their own repository of

740
00:33:53,980 --> 00:33:58,960
what they deem as bad and good which

741
00:33:57,010 --> 00:34:07,020
would probably be a better idea to just

742
00:33:58,960 --> 00:34:10,380
train it on that Thanks two questions

743
00:34:07,020 --> 00:34:12,509
the first one would be generally what

744
00:34:10,380 --> 00:34:16,110
were using and how long the training

745
00:34:12,510 --> 00:34:20,370
went and the second one is did you often

746
00:34:16,110 --> 00:34:23,490
encounter the situation when the network

747
00:34:20,370 --> 00:34:26,489
collapsed during the training well the

748
00:34:23,489 --> 00:34:30,029
training didn't took that much so

749
00:34:26,489 --> 00:34:33,689
training took like three days on

750
00:34:30,030 --> 00:34:36,149
JavaScript code and JavaScript I mean

751
00:34:33,690 --> 00:34:37,530
basically the multi-layer perceptron is

752
00:34:36,149 --> 00:34:39,060
really fast medicine give you the

753
00:34:37,530 --> 00:34:43,530
numbers if you want I mean it's very

754
00:34:39,060 --> 00:34:45,779
close okay and about the collapsing the

755
00:34:43,530 --> 00:34:47,280
network networking collapsed during the

756
00:34:45,780 --> 00:34:50,760
training did you encounter these

757
00:34:47,280 --> 00:34:51,870
problems we we I mean we didn't have

758
00:34:50,760 --> 00:34:53,429
that problem with the multi-layer

759
00:34:51,870 --> 00:34:55,049
perceptron we actually had that problem

760
00:34:53,429 --> 00:34:58,110
with tripod because we trained it on

761
00:34:55,050 --> 00:34:59,820
some application logs and it collapsed

762
00:34:58,110 --> 00:35:01,830
when we did that but it has an option

763
00:34:59,820 --> 00:35:04,230
when you train it to reduce duplicates

764
00:35:01,830 --> 00:35:07,049
because that's what what the problem was

765
00:35:04,230 --> 00:35:09,450
and to actually do something called

766
00:35:07,050 --> 00:35:11,400
partition dropout which makes it usable

767
00:35:09,450 --> 00:35:12,210
for application logs that repeat it

768
00:35:11,400 --> 00:35:17,760
themselves

769
00:35:12,210 --> 00:35:20,810
okay thank you come on we have time for

770
00:35:17,760 --> 00:35:23,190
one more question if there is one

771
00:35:20,810 --> 00:35:28,740
let's go on the left as well because we

772
00:35:23,190 --> 00:35:36,630
haven't had any from here it's a long

773
00:35:28,740 --> 00:35:39,149
way down left hey so thanks for this

774
00:35:36,630 --> 00:35:42,170
it's nice to see realistic machine

775
00:35:39,150 --> 00:35:45,090
learning why do you guys choose

776
00:35:42,170 --> 00:35:47,100
JavaScript as opposed to PowerShell

777
00:35:45,090 --> 00:35:50,130
scripts and have you considered using

778
00:35:47,100 --> 00:35:54,299
for example word to vector apply this to

779
00:35:50,130 --> 00:35:57,990
other data that could be used in thread

780
00:35:54,300 --> 00:36:00,390
hunting well I can take care of the why

781
00:35:57,990 --> 00:36:02,970
did we actually choose JavaScript I mean

782
00:36:00,390 --> 00:36:06,150
first of all is because we've focused on

783
00:36:02,970 --> 00:36:08,669
open source things that are were already

784
00:36:06,150 --> 00:36:11,850
there so we were able to find those

785
00:36:08,670 --> 00:36:15,030
repositories which held around 40,000

786
00:36:11,850 --> 00:36:17,759
malicious scripts so it was easier this

787
00:36:15,030 --> 00:36:20,070
way and second of all due to his

788
00:36:17,760 --> 00:36:24,660
presence as I've mentioned

789
00:36:20,070 --> 00:36:27,630
initially because it's highly used and

790
00:36:24,660 --> 00:36:29,970
we're Tyvek okay and the idea is that

791
00:36:27,630 --> 00:36:31,890
what work actually computes late and

792
00:36:29,970 --> 00:36:35,970
representations force tokens not for

793
00:36:31,890 --> 00:36:38,400
entire sequences you need to use

794
00:36:35,970 --> 00:36:41,160
paragraph to the court document avec and

795
00:36:38,400 --> 00:36:42,720
we actually compared tripod with

796
00:36:41,160 --> 00:36:44,940
paragraph to vehicon on that standard

797
00:36:42,720 --> 00:36:47,970
natural language inference process and

798
00:36:44,940 --> 00:36:51,890
we got an absolute increasement in

799
00:36:47,970 --> 00:36:57,149
accuracy of five to seven percent on the

800
00:36:51,890 --> 00:36:59,120
s and Alli data set from Stanford a one

801
00:36:57,150 --> 00:37:02,880
quick thing have you considered using

802
00:36:59,120 --> 00:37:10,970
retro hunting and virustotal to find

803
00:37:02,880 --> 00:37:10,970
more data no yeah you could do that

804
00:37:11,090 --> 00:37:15,900
alright thank you so much for this

805
00:37:13,260 --> 00:37:18,000
presentation it's going to go down in

806
00:37:15,900 --> 00:37:20,940
history as having questions already from

807
00:37:18,000 --> 00:37:22,860
the last quarter going forward thank you

808
00:37:20,940 --> 00:37:26,229
thank you

809
00:37:22,860 --> 00:37:26,229
[Applause]

