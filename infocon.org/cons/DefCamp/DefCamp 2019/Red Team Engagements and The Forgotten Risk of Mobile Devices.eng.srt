1
00:00:00,030 --> 00:00:04,680
welcome thank you for coming today I

2
00:00:02,399 --> 00:00:08,370
know it's kind of early but you know

3
00:00:04,680 --> 00:00:09,989
let's try so yeah thanks for the

4
00:00:08,370 --> 00:00:12,690
introduction my name is Luka Pellegrino

5
00:00:09,990 --> 00:00:14,670
and yeah the talk would be around red

6
00:00:12,690 --> 00:00:16,710
team engagement and mobile devices and

7
00:00:14,670 --> 00:00:19,710
mobile infrastructure is sort of

8
00:00:16,710 --> 00:00:22,199
overlooked as we just said mandatory Who

9
00:00:19,710 --> 00:00:25,140
am I I'm a penetration tester I work at

10
00:00:22,199 --> 00:00:27,150
dye neck based in the UK as part of my

11
00:00:25,140 --> 00:00:29,039
daily job as basically do everything are

12
00:00:27,150 --> 00:00:30,779
up and dancing so stand up and test

13
00:00:29,039 --> 00:00:33,329
internal penetration test

14
00:00:30,779 --> 00:00:35,309
what happened testing and more recently

15
00:00:33,329 --> 00:00:37,350
have been involved in mobile application

16
00:00:35,309 --> 00:00:39,089
protection test and retina engagement

17
00:00:37,350 --> 00:00:42,660
which is basically the reason why I

18
00:00:39,090 --> 00:00:44,789
decided to make this talk so what are we

19
00:00:42,660 --> 00:00:47,099
going to talk about today quick and

20
00:00:44,789 --> 00:00:50,399
robot red teaming concept which I think

21
00:00:47,100 --> 00:00:52,350
are helpful and then we're gonna discuss

22
00:00:50,399 --> 00:00:56,010
why going after mobiles when we do these

23
00:00:52,350 --> 00:00:58,770
engagements and then mobile applications

24
00:00:56,010 --> 00:01:00,599
from a pen testing perspective versus a

25
00:00:58,770 --> 00:01:03,180
red team perspective which there are a

26
00:01:00,600 --> 00:01:04,920
few differences here a bit of

27
00:01:03,180 --> 00:01:07,740
storytelling there I want to propose

28
00:01:04,920 --> 00:01:09,299
some scenarios these are like real-world

29
00:01:07,740 --> 00:01:11,130
engagements that we've been formed and

30
00:01:09,299 --> 00:01:12,960
we're looking at the mobile

31
00:01:11,130 --> 00:01:14,850
infrastructure or mobile application was

32
00:01:12,960 --> 00:01:17,548
actually crucial for the success of

33
00:01:14,850 --> 00:01:20,309
these engagements finally onto the

34
00:01:17,549 --> 00:01:22,770
technical bed I'm gonna basically

35
00:01:20,310 --> 00:01:25,409
discuss frida which ultimately this is a

36
00:01:22,770 --> 00:01:26,429
mobile app presentation so you know it

37
00:01:25,409 --> 00:01:29,189
wouldn't be complete without mentioning

38
00:01:26,430 --> 00:01:30,930
this awesome tool I'm gonna look at

39
00:01:29,189 --> 00:01:35,070
Frida from a different angle we use it

40
00:01:30,930 --> 00:01:36,450
mostly as a fantastic it but let's have

41
00:01:35,070 --> 00:01:38,309
a look and see what we can do from an

42
00:01:36,450 --> 00:01:39,659
offensive perspective and finally I

43
00:01:38,310 --> 00:01:42,270
think we're gonna have some time from

44
00:01:39,659 --> 00:01:43,439
some question and hopefully answer if I

45
00:01:42,270 --> 00:01:46,500
can manage

46
00:01:43,439 --> 00:01:47,820
so okay red teaming I think everyone

47
00:01:46,500 --> 00:01:49,259
here is familiar with the concept

48
00:01:47,820 --> 00:01:50,820
there was a awesome presentation

49
00:01:49,259 --> 00:01:53,399
yesterday as well about around this

50
00:01:50,820 --> 00:01:55,500
topic but essentially the red team you

51
00:01:53,399 --> 00:01:58,170
want to replicate a real attack a real

52
00:01:55,500 --> 00:02:00,899
scenario or a specific threat actor as

53
00:01:58,170 --> 00:02:03,420
much as possible it is an engagement or

54
00:02:00,899 --> 00:02:05,850
like a fan test which is gold trophy

55
00:02:03,420 --> 00:02:08,038
oriented so essentially you have a goal

56
00:02:05,850 --> 00:02:11,670
in your engagement being a sequel server

57
00:02:08,038 --> 00:02:14,380
on a strict on network being the CEO or

58
00:02:11,670 --> 00:02:16,510
the CTOs mailbox you know

59
00:02:14,380 --> 00:02:18,970
typically there are no restriction in

60
00:02:16,510 --> 00:02:21,870
scope so if you think of a pen test you

61
00:02:18,970 --> 00:02:24,819
are limited on a mobile app let's say

62
00:02:21,870 --> 00:02:26,500
doing a real team real engagement or red

63
00:02:24,819 --> 00:02:29,560
team engagement essentially your scope

64
00:02:26,500 --> 00:02:31,530
is the organization right so typically

65
00:02:29,560 --> 00:02:34,209
have little to no restriction as I said

66
00:02:31,530 --> 00:02:36,430
finally I want to stress this point if

67
00:02:34,209 --> 00:02:37,420
you do a red team is most likely that

68
00:02:36,430 --> 00:02:38,800
you're going to face the blue team

69
00:02:37,420 --> 00:02:41,140
that's the whole purpose of the

70
00:02:38,800 --> 00:02:43,209
engagement right so when you do a red

71
00:02:41,140 --> 00:02:45,250
team we're all good hackers you know we

72
00:02:43,209 --> 00:02:46,570
try to be stealthy we reach our goal

73
00:02:45,250 --> 00:02:49,120
we're cool

74
00:02:46,570 --> 00:02:52,060
you know the client didn't expect us to

75
00:02:49,120 --> 00:02:54,550
succeed we're super stealthy as I said

76
00:02:52,060 --> 00:02:56,110
but what about the blue team let's not

77
00:02:54,550 --> 00:02:57,670
forget about them the reason why they're

78
00:02:56,110 --> 00:02:59,560
doing this is most likely because they

79
00:02:57,670 --> 00:03:01,958
want to test their defenses right so

80
00:02:59,560 --> 00:03:04,060
let's try to bring some value so my

81
00:03:01,959 --> 00:03:06,250
suggestion is when do a red team you get

82
00:03:04,060 --> 00:03:07,989
in you get your goal but try to make

83
00:03:06,250 --> 00:03:09,730
some noise I don't know drop me me cats

84
00:03:07,989 --> 00:03:12,190
whatever just make some noise inside the

85
00:03:09,730 --> 00:03:15,518
network so you kind of scaring them but

86
00:03:12,190 --> 00:03:17,530
you know you want them to be awake so

87
00:03:15,519 --> 00:03:19,630
there are a few phases in red team

88
00:03:17,530 --> 00:03:20,410
essentially I'll group them and mainly

89
00:03:19,630 --> 00:03:21,700
four phases

90
00:03:20,410 --> 00:03:23,890
you wanna start of course with your

91
00:03:21,700 --> 00:03:25,869
recon which is finding out as much as

92
00:03:23,890 --> 00:03:28,480
possible about your target being their

93
00:03:25,870 --> 00:03:31,120
web app what's available externally

94
00:03:28,480 --> 00:03:33,399
essentially and one of the fits in scope

95
00:03:31,120 --> 00:03:35,890
their look their physical office if

96
00:03:33,400 --> 00:03:37,709
you're trying to break in and then

97
00:03:35,890 --> 00:03:39,820
eventually you want to move in into

98
00:03:37,709 --> 00:03:42,160
compromising or getting an initial

99
00:03:39,820 --> 00:03:44,680
foothold inside their network that's

100
00:03:42,160 --> 00:03:47,890
mostly done through a pasture spring and

101
00:03:44,680 --> 00:03:49,239
even though it's 2010 teen fishing seem

102
00:03:47,890 --> 00:03:50,859
strong you can just send a phishing

103
00:03:49,239 --> 00:03:53,620
campaign and most likely you're gonna

104
00:03:50,860 --> 00:03:55,480
get in once you're inside the network

105
00:03:53,620 --> 00:03:56,860
you want to try and move laterally so

106
00:03:55,480 --> 00:03:59,048
you wanna essentially from your

107
00:03:56,860 --> 00:04:01,209
perspective what can you see can you get

108
00:03:59,049 --> 00:04:04,840
any passwords that's gonna be like an

109
00:04:01,209 --> 00:04:07,540
easy win can you get any PII personal

110
00:04:04,840 --> 00:04:10,959
information right typically we look for

111
00:04:07,540 --> 00:04:13,480
this stuff on file shares right sort of

112
00:04:10,959 --> 00:04:15,820
related is escalation of religious most

113
00:04:13,480 --> 00:04:17,589
likely you're not going to get a domain

114
00:04:15,820 --> 00:04:19,168
admin shell after your phishing campaign

115
00:04:17,589 --> 00:04:21,668
you're probably gonna get like

116
00:04:19,168 --> 00:04:23,859
receptionist shell or you know a low

117
00:04:21,668 --> 00:04:27,250
pillage most of the time so you want to

118
00:04:23,860 --> 00:04:28,660
try and escalate if you think about on

119
00:04:27,250 --> 00:04:30,460
pretty standard Windows Active Directory

120
00:04:28,660 --> 00:04:33,040
environment that would be the equivalent

121
00:04:30,460 --> 00:04:35,590
of you going from a low prove user to

122
00:04:33,040 --> 00:04:38,470
local admin to domain admin or

123
00:04:35,590 --> 00:04:39,940
eventually enterprise or forest admin or

124
00:04:38,470 --> 00:04:43,120
whatever is the highest throne in their

125
00:04:39,940 --> 00:04:45,790
network so okay you're doing an

126
00:04:43,120 --> 00:04:48,040
engagement why you want to go after

127
00:04:45,790 --> 00:04:50,740
mobile phones or mobile or mobile

128
00:04:48,040 --> 00:04:52,990
infrastructure in general well as I said

129
00:04:50,740 --> 00:04:55,810
an introduction I've been involved in a

130
00:04:52,990 --> 00:04:58,450
number of mobile app dentist recently

131
00:04:55,810 --> 00:05:00,550
and I've noticed a general lack of

132
00:04:58,450 --> 00:05:03,280
mobile application hardening what I mean

133
00:05:00,550 --> 00:05:04,660
is that essentially across different

134
00:05:03,280 --> 00:05:07,719
applications we always find the same

135
00:05:04,660 --> 00:05:10,000
issues over and over and at the same

136
00:05:07,720 --> 00:05:11,980
time though for us the testers we're

137
00:05:10,000 --> 00:05:13,960
getting a lot better there is a general

138
00:05:11,980 --> 00:05:15,760
improvement in testing methodologies so

139
00:05:13,960 --> 00:05:17,680
those are like the framework that I've

140
00:05:15,760 --> 00:05:19,840
been using in the past years or so and

141
00:05:17,680 --> 00:05:21,070
you know browser needle scrounger we're

142
00:05:19,840 --> 00:05:23,440
talking about frida which is a ready

143
00:05:21,070 --> 00:05:24,730
game changer in this field but

144
00:05:23,440 --> 00:05:26,620
essentially what I'm trying to say here

145
00:05:24,730 --> 00:05:30,450
is that we're sort of winning the game

146
00:05:26,620 --> 00:05:33,280
in sort of mobile a pen testing right

147
00:05:30,450 --> 00:05:37,120
the other thing is if you think about

148
00:05:33,280 --> 00:05:38,890
mobile devices are often overlooked so

149
00:05:37,120 --> 00:05:41,160
if you're talking about scoping with

150
00:05:38,890 --> 00:05:43,450
someone they might not think that the

151
00:05:41,160 --> 00:05:43,960
iPad or the tablet that I have in the

152
00:05:43,450 --> 00:05:45,190
meeting room

153
00:05:43,960 --> 00:05:47,080
they might not consider that the risk

154
00:05:45,190 --> 00:05:49,390
they might not even consider the risk

155
00:05:47,080 --> 00:05:51,280
that the phone that they're handling or

156
00:05:49,390 --> 00:05:52,690
that they have in their pocket it's a

157
00:05:51,280 --> 00:05:56,500
risk or they might think it's a lower

158
00:05:52,690 --> 00:05:58,180
risk finally we know that everything is

159
00:05:56,500 --> 00:06:00,460
moving to the cloud and I think mobile

160
00:05:58,180 --> 00:06:03,760
devices are really no exception there is

161
00:06:00,460 --> 00:06:05,349
a rise in the cloud-based ambien so if

162
00:06:03,760 --> 00:06:06,909
you just Google likely three cloud-based

163
00:06:05,350 --> 00:06:09,760
and young you're gonna get a little

164
00:06:06,910 --> 00:06:12,190
place to a dozen results of company

165
00:06:09,760 --> 00:06:14,380
offering these services and you know if

166
00:06:12,190 --> 00:06:16,719
you think about if you find them in your

167
00:06:14,380 --> 00:06:18,070
recon and you get you get in a sanctuary

168
00:06:16,720 --> 00:06:19,990
you basically on their mobile

169
00:06:18,070 --> 00:06:24,610
infrastructure so what can you do with

170
00:06:19,990 --> 00:06:27,640
that let's say so assuming you have a

171
00:06:24,610 --> 00:06:29,979
mobile app and using a pen test or

172
00:06:27,640 --> 00:06:32,020
you're doing a red team what are the

173
00:06:29,979 --> 00:06:34,719
main differences well it's not related

174
00:06:32,020 --> 00:06:37,840
to the test itself essentially as I

175
00:06:34,720 --> 00:06:40,030
briefly mentioned doing a bad test well

176
00:06:37,840 --> 00:06:40,989
your goal is essentially to find as many

177
00:06:40,030 --> 00:06:43,059
issues as possible

178
00:06:40,990 --> 00:06:45,699
so you might overlook something in a rat

179
00:06:43,060 --> 00:06:47,830
theme this is more specific you are more

180
00:06:45,699 --> 00:06:50,460
your attacker more targeted towards the

181
00:06:47,830 --> 00:06:53,020
application and what's your end goal so

182
00:06:50,460 --> 00:06:54,638
let's assume for instance that doing a

183
00:06:53,020 --> 00:06:58,120
pen test you find out that the

184
00:06:54,639 --> 00:07:01,419
application is storing data on the

185
00:06:58,120 --> 00:07:04,000
device securely cookies being passwords

186
00:07:01,419 --> 00:07:05,799
being whatever from red teamer

187
00:07:04,000 --> 00:07:07,180
perspective not that helpful if you

188
00:07:05,800 --> 00:07:08,680
think about it because essentially the

189
00:07:07,180 --> 00:07:10,720
scenario would be me going to an

190
00:07:08,680 --> 00:07:13,090
employee punching him I don't know

191
00:07:10,720 --> 00:07:15,400
getting his phone the plug in this phone

192
00:07:13,090 --> 00:07:18,130
and get the information of the phone

193
00:07:15,400 --> 00:07:20,020
pretty unlikely so I might not get into

194
00:07:18,130 --> 00:07:23,440
you know how stuff is stored on the

195
00:07:20,020 --> 00:07:25,060
device I don't probably care second

196
00:07:23,440 --> 00:07:27,520
point is sorts relates to the first one

197
00:07:25,060 --> 00:07:30,639
so essentially doing a parent test you

198
00:07:27,520 --> 00:07:31,900
do you do have limited time and at the

199
00:07:30,639 --> 00:07:34,380
same time you're trying to find as many

200
00:07:31,900 --> 00:07:37,060
issues as possible remember so you might

201
00:07:34,380 --> 00:07:39,340
flag an issue being a secret injection

202
00:07:37,060 --> 00:07:41,560
for instance but you might now go ahead

203
00:07:39,340 --> 00:07:44,590
and actually test this further see where

204
00:07:41,560 --> 00:07:48,669
how far you can go in a red team this

205
00:07:44,590 --> 00:07:50,409
sort of doesn't apply so you do have

206
00:07:48,669 --> 00:07:52,150
your deadline you you are gonna have

207
00:07:50,409 --> 00:07:53,740
your deadline of course a writing

208
00:07:52,150 --> 00:07:54,659
engagement adventure is grand you know

209
00:07:53,740 --> 00:07:59,830
we're not real

210
00:07:54,659 --> 00:08:01,659
rockers yeah sort of but if you think

211
00:07:59,830 --> 00:08:03,550
about it it's really up to you it's the

212
00:08:01,659 --> 00:08:05,460
same thing as we're testing your web app

213
00:08:03,550 --> 00:08:07,930
let's say you find the secret injection

214
00:08:05,460 --> 00:08:11,650
you want to try and get get more out of

215
00:08:07,930 --> 00:08:13,000
it so you do you do want to spend more

216
00:08:11,650 --> 00:08:15,340
time on it and you don't have resources

217
00:08:13,000 --> 00:08:16,719
when you're doing a rat team right it's

218
00:08:15,340 --> 00:08:18,638
really up to you so if you think that

219
00:08:16,719 --> 00:08:20,409
something is important you know if you

220
00:08:18,639 --> 00:08:22,810
find a mobile app that I know maybe

221
00:08:20,409 --> 00:08:24,729
obfuscated but you think that could be

222
00:08:22,810 --> 00:08:28,240
very interesting for your engagement go

223
00:08:24,729 --> 00:08:30,810
ahead spend more time on it finally big

224
00:08:28,240 --> 00:08:33,789
thing as I mentioned before is the scope

225
00:08:30,810 --> 00:08:36,070
for a mobile app from mobile app

226
00:08:33,789 --> 00:08:39,549
penetration test the scope is most

227
00:08:36,070 --> 00:08:43,089
likely gonna be one apk one IP a file

228
00:08:39,549 --> 00:08:44,949
that the client gives to you and in some

229
00:08:43,089 --> 00:08:48,760
cases as we know most all times

230
00:08:44,950 --> 00:08:50,709
the mobile application basically is a is

231
00:08:48,760 --> 00:08:53,560
a mobile as a web app that calls an API

232
00:08:50,709 --> 00:08:54,189
essentially and sometimes doing a fan

233
00:08:53,560 --> 00:08:56,020
test

234
00:08:54,190 --> 00:08:57,940
they because they want to focus so much

235
00:08:56,020 --> 00:09:00,280
on mobile app issues they want to be

236
00:08:57,940 --> 00:09:02,740
compliant whatever they might even

237
00:09:00,280 --> 00:09:05,199
exclude from the scope the API endpoints

238
00:09:02,740 --> 00:09:07,420
which is really bad I think during the

239
00:09:05,200 --> 00:09:09,330
rat team that doesn't happen so the

240
00:09:07,420 --> 00:09:11,199
scope is the organization again so

241
00:09:09,330 --> 00:09:12,280
essentially you're not limited to the

242
00:09:11,200 --> 00:09:13,840
number of application that you're

243
00:09:12,280 --> 00:09:16,780
testing so if you go to the Play Store

244
00:09:13,840 --> 00:09:18,580
and you see the lab 5 applications go

245
00:09:16,780 --> 00:09:20,890
ahead download them all it's all in your

246
00:09:18,580 --> 00:09:22,960
scope if you reverse them you see that

247
00:09:20,890 --> 00:09:24,460
the API endpoints is in scope it's

248
00:09:22,960 --> 00:09:27,990
basically they own the infrastructure

249
00:09:24,460 --> 00:09:33,520
they own the server go ahead test them

250
00:09:27,990 --> 00:09:35,290
so assuming you have to do this and you

251
00:09:33,520 --> 00:09:38,770
are on Android let's say there are a

252
00:09:35,290 --> 00:09:40,180
bunch of tools they are well known but

253
00:09:38,770 --> 00:09:43,329
you want to start and reverse the

254
00:09:40,180 --> 00:09:44,770
application so bunch of tools

255
00:09:43,330 --> 00:09:46,900
you probably familiar with this but

256
00:09:44,770 --> 00:09:49,000
essentially when I start and decompile

257
00:09:46,900 --> 00:09:51,459
you up with apktool pretty much the

258
00:09:49,000 --> 00:09:53,350
default li facto standard and then you

259
00:09:51,460 --> 00:09:55,750
want to get this to the source code the

260
00:09:53,350 --> 00:09:57,730
way you do it is just run index to jar

261
00:09:55,750 --> 00:10:02,170
against the application and then you

262
00:09:57,730 --> 00:10:03,280
open it with a J Java editor such as JD

263
00:10:02,170 --> 00:10:05,829
GUI

264
00:10:03,280 --> 00:10:06,819
I'm a huge fan of Jack Jack's I think

265
00:10:05,830 --> 00:10:08,170
that's how you pronounce it but

266
00:10:06,820 --> 00:10:10,450
essentially it's pretty straightforward

267
00:10:08,170 --> 00:10:12,699
it just takes the apk and gives you the

268
00:10:10,450 --> 00:10:14,890
code it also has some deification

269
00:10:12,700 --> 00:10:15,280
capabilities which you know might come

270
00:10:14,890 --> 00:10:17,470
in handy

271
00:10:15,280 --> 00:10:18,850
because the app might be associated you

272
00:10:17,470 --> 00:10:20,440
can just throw a debugger edit or

273
00:10:18,850 --> 00:10:22,480
reverse engineering tool such as rather

274
00:10:20,440 --> 00:10:24,220
or are too but we don't draw it wouldn't

275
00:10:22,480 --> 00:10:27,010
really go that far it's fairly

276
00:10:24,220 --> 00:10:28,960
straightforward to reverse it you do

277
00:10:27,010 --> 00:10:31,510
have some tools or some framework or

278
00:10:28,960 --> 00:10:33,640
scanners even which can help you out to

279
00:10:31,510 --> 00:10:35,250
basically map the attack surface so what

280
00:10:33,640 --> 00:10:38,770
if what can you do on the mobile app

281
00:10:35,250 --> 00:10:41,320
browser is one of them 400 it's a Python

282
00:10:38,770 --> 00:10:44,410
tool and essentially has a bunch of

283
00:10:41,320 --> 00:10:47,650
modules so a module for scanning even

284
00:10:44,410 --> 00:10:51,130
for finding sequel injection or to find

285
00:10:47,650 --> 00:10:54,329
I don't know expose activities broadcast

286
00:10:51,130 --> 00:10:56,650
receivers and things like that similarly

287
00:10:54,330 --> 00:10:58,810
I'm a fan of these mobile security

288
00:10:56,650 --> 00:11:00,550
framework or mobile surf it's an open

289
00:10:58,810 --> 00:11:03,640
source project is essentially a mobile

290
00:11:00,550 --> 00:11:06,040
web app which you can give it your apk

291
00:11:03,640 --> 00:11:07,990
and it's gonna do some reversing some

292
00:11:06,040 --> 00:11:09,550
scanning essentially and it's going to

293
00:11:07,990 --> 00:11:11,770
you are resolved which is pretty

294
00:11:09,550 --> 00:11:13,359
nice-looking report and again you're

295
00:11:11,770 --> 00:11:16,360
gonna find issues such as insecure

296
00:11:13,360 --> 00:11:19,029
functions exposed activities again so

297
00:11:16,360 --> 00:11:21,399
just different ways of doing it if you

298
00:11:19,029 --> 00:11:23,350
are on iOS from red teamer I wouldn't

299
00:11:21,399 --> 00:11:25,240
really go and look into that that far

300
00:11:23,350 --> 00:11:27,880
because reversing is not that easy as

301
00:11:25,240 --> 00:11:29,529
Android as you probably know my best bet

302
00:11:27,880 --> 00:11:32,290
would be if you really have to do this

303
00:11:29,529 --> 00:11:34,620
just throw Ida or operate it and hope

304
00:11:32,290 --> 00:11:34,620
for the best

305
00:11:34,630 --> 00:11:38,470
there's framers here as well if you

306
00:11:36,459 --> 00:11:41,349
follow the OS documentation or

307
00:11:38,470 --> 00:11:43,360
guidelines on mobile security they have

308
00:11:41,350 --> 00:11:45,060
a bunch of references to needle which is

309
00:11:43,360 --> 00:11:47,649
again a framework which allows you to

310
00:11:45,060 --> 00:11:47,890
extract the keychain and things like

311
00:11:47,649 --> 00:11:50,230
that

312
00:11:47,890 --> 00:11:52,630
mobis F works as well although I do

313
00:11:50,230 --> 00:11:55,089
think that you need the decrypted AP IPA

314
00:11:52,630 --> 00:11:56,410
which if you're a pen tester not worried

315
00:11:55,089 --> 00:11:58,330
about here you can just ask them you

316
00:11:56,410 --> 00:11:59,949
know saying that you need it for more

317
00:11:58,330 --> 00:12:02,080
value for the test or something like

318
00:11:59,950 --> 00:12:04,870
that from a retina perspective that

319
00:12:02,080 --> 00:12:07,000
would probably imply you compromising at

320
00:12:04,870 --> 00:12:08,680
development developing the environment

321
00:12:07,000 --> 00:12:13,990
or like a dev account or something

322
00:12:08,680 --> 00:12:16,359
pretty unlikely so ok was this stuff

323
00:12:13,990 --> 00:12:18,870
actually helpful for us somehow as I

324
00:12:16,360 --> 00:12:21,970
pulled you into interaction yeah it was

325
00:12:18,870 --> 00:12:24,100
one of purpose two scenarios so in the

326
00:12:21,970 --> 00:12:26,380
first scenario scenario number one we

327
00:12:24,100 --> 00:12:29,290
had a few things going on in our team

328
00:12:26,380 --> 00:12:31,240
engagement we did have as part of our

329
00:12:29,290 --> 00:12:34,149
recon a bunch of username and passwords

330
00:12:31,240 --> 00:12:36,130
these were mainly from leaked databases

331
00:12:34,149 --> 00:12:38,860
or again information gathering social

332
00:12:36,130 --> 00:12:40,899
media presence and things like that we

333
00:12:38,860 --> 00:12:43,180
also knew that the company was used

334
00:12:40,899 --> 00:12:45,550
Microsoft Office you might think yeah ok

335
00:12:43,180 --> 00:12:48,370
80% of them are using it so what can you

336
00:12:45,550 --> 00:12:50,439
do with that you want to animate as much

337
00:12:48,370 --> 00:12:52,089
as possible and the reason is you can

338
00:12:50,440 --> 00:12:54,430
basically tailor your fishing campaigns

339
00:12:52,089 --> 00:12:56,310
towards the company one of the phishing

340
00:12:54,430 --> 00:12:58,899
campaigns that we had running was

341
00:12:56,310 --> 00:13:01,869
essentially trying to get to gain access

342
00:12:58,899 --> 00:13:04,690
to their entire mashes by exploiting a

343
00:13:01,870 --> 00:13:06,940
known let's not call it one ability

344
00:13:04,690 --> 00:13:10,480
let's call it feature about look where

345
00:13:06,940 --> 00:13:12,730
essentially if you have a link to an SMB

346
00:13:10,480 --> 00:13:14,230
sure share in your email and they enable

347
00:13:12,730 --> 00:13:16,209
the content of the email there basically

348
00:13:14,230 --> 00:13:18,070
they can potentially according to the

349
00:13:16,209 --> 00:13:21,729
firewall maybe they can potentially leak

350
00:13:18,070 --> 00:13:23,680
the entire image to you so you can go

351
00:13:21,730 --> 00:13:26,160
then crack it offline and potentially

352
00:13:23,680 --> 00:13:28,959
use this this combination usernames and

353
00:13:26,160 --> 00:13:31,300
freshly new password cracked against

354
00:13:28,959 --> 00:13:32,888
other services so okay

355
00:13:31,300 --> 00:13:35,139
we were pretty hyped because we managed

356
00:13:32,889 --> 00:13:36,790
to get the end till I'm ash from fishing

357
00:13:35,139 --> 00:13:39,790
and on top of that we managed to crack

358
00:13:36,790 --> 00:13:42,370
it so again pretty hyped we go ahead we

359
00:13:39,790 --> 00:13:44,010
go to their main portal whatever they

360
00:13:42,370 --> 00:13:45,550
were using at the time and sure enough

361
00:13:44,010 --> 00:13:49,089
this happened

362
00:13:45,550 --> 00:13:50,050
posture was wrong so we thought okay

363
00:13:49,089 --> 00:13:52,769
what's wrong

364
00:13:50,050 --> 00:13:54,849
we're pretty puzzled at the time because

365
00:13:52,769 --> 00:13:57,459
we didn't have other ways of verifying

366
00:13:54,850 --> 00:14:00,430
this bastard we could for instance login

367
00:13:57,459 --> 00:14:02,109
into their skype so we could see people

368
00:14:00,430 --> 00:14:04,750
online we could potentially chat with

369
00:14:02,110 --> 00:14:07,079
people and but we could not log in

370
00:14:04,750 --> 00:14:09,880
elsewhere like their mail portal so

371
00:14:07,079 --> 00:14:11,469
again pretty puzzled here we were

372
00:14:09,880 --> 00:14:13,750
thinking of moving on started in

373
00:14:11,470 --> 00:14:15,670
phishing campaign maybe spamming people

374
00:14:13,750 --> 00:14:18,370
on skype with links eventually someone

375
00:14:15,670 --> 00:14:20,709
is gonna open it but eventually one of

376
00:14:18,370 --> 00:14:24,519
my colleague get an idea so he thought

377
00:14:20,709 --> 00:14:25,899
okay let's go back let's see miss let's

378
00:14:24,519 --> 00:14:28,000
think about it right they're probably

379
00:14:25,899 --> 00:14:31,569
blocking us somehow because you know

380
00:14:28,000 --> 00:14:34,199
people need to access their mail so what

381
00:14:31,569 --> 00:14:37,569
are we doing wrong we're coming from our

382
00:14:34,199 --> 00:14:39,939
systems essentially so there shouldn't

383
00:14:37,569 --> 00:14:41,589
be anything really weird right because

384
00:14:39,940 --> 00:14:43,990
you want to have access to the email as

385
00:14:41,589 --> 00:14:46,029
I said but maybe let's try to get access

386
00:14:43,990 --> 00:14:48,540
to other means other application you

387
00:14:46,029 --> 00:14:51,189
probably guessed it we try to access the

388
00:14:48,540 --> 00:14:53,439
mailbox from a mobile phone from the

389
00:14:51,190 --> 00:14:56,350
mobile app and sure enough that worked

390
00:14:53,440 --> 00:14:57,819
so essentially it turns out that there

391
00:14:56,350 --> 00:15:00,550
were no restriction or policies in place

392
00:14:57,819 --> 00:15:03,010
from that prevented you from logging in

393
00:15:00,550 --> 00:15:04,810
basically whoever locks in from a mobile

394
00:15:03,010 --> 00:15:06,339
app was fine there were no restriction

395
00:15:04,810 --> 00:15:07,989
also in terms of where you could log in

396
00:15:06,339 --> 00:15:10,630
from you know we were doing stuff from

397
00:15:07,990 --> 00:15:13,029
our network and on top of that the main

398
00:15:10,630 --> 00:15:14,519
point was that these basically bypass

399
00:15:13,029 --> 00:15:17,769
the existing multi-factor authentication

400
00:15:14,519 --> 00:15:20,199
so essentially they had multi-factor but

401
00:15:17,769 --> 00:15:22,420
they did not enforce this on mobile

402
00:15:20,199 --> 00:15:24,490
phones or anything that was coming from

403
00:15:22,420 --> 00:15:25,779
my mobile was pretty funny because you

404
00:15:24,490 --> 00:15:27,910
know we talked with this guy did the

405
00:15:25,779 --> 00:15:29,319
blue team and they were like oh yeah how

406
00:15:27,910 --> 00:15:31,569
did you get around multi-factor we were

407
00:15:29,319 --> 00:15:34,810
like what multi-factor you don't have it

408
00:15:31,569 --> 00:15:36,410
so you know like it was pretty funny at

409
00:15:34,810 --> 00:15:38,599
the time

410
00:15:36,410 --> 00:15:42,529
yeah well for us for them it must have

411
00:15:38,600 --> 00:15:45,680
been a nightmare but essentially you

412
00:15:42,529 --> 00:15:47,240
might guess from there we scroll through

413
00:15:45,680 --> 00:15:48,709
the image of this guy it turns out that

414
00:15:47,240 --> 00:15:52,480
this guy is a very high-level employee

415
00:15:48,710 --> 00:15:55,100
like very high in the chain and

416
00:15:52,480 --> 00:15:57,950
basically from there if you're familiar

417
00:15:55,100 --> 00:15:59,540
with how a team should work once you get

418
00:15:57,950 --> 00:16:01,160
access to an internal email the other

419
00:15:59,540 --> 00:16:02,300
thing you can do is essentially you can

420
00:16:01,160 --> 00:16:04,490
launch an internal phishing campaign

421
00:16:02,300 --> 00:16:06,650
which is pretty strong because it comes

422
00:16:04,490 --> 00:16:08,750
from a trusted source on top of that

423
00:16:06,650 --> 00:16:10,069
this guy was again pretty high so people

424
00:16:08,750 --> 00:16:12,140
were sort of scared when they received

425
00:16:10,070 --> 00:16:13,700
an email from this guy and they just

426
00:16:12,140 --> 00:16:17,029
went ahead and click it

427
00:16:13,700 --> 00:16:18,920
so this phishing campaign had a few

428
00:16:17,029 --> 00:16:21,950
payloads in it standard stuff that

429
00:16:18,920 --> 00:16:25,400
worked so we start popping shell and

430
00:16:21,950 --> 00:16:27,710
eventually move laterally as explained

431
00:16:25,400 --> 00:16:31,010
relate our pledges eventually to domain

432
00:16:27,710 --> 00:16:33,110
admin which was our goal at the time so

433
00:16:31,010 --> 00:16:34,970
after a rat team there's gonna be a

434
00:16:33,110 --> 00:16:37,400
lesson learned from both things right so

435
00:16:34,970 --> 00:16:37,580
what did we learn so if you are a team

436
00:16:37,400 --> 00:16:40,370
err

437
00:16:37,580 --> 00:16:42,050
I would say do not be nor mobile devices

438
00:16:40,370 --> 00:16:44,390
or in general coming from another source

439
00:16:42,050 --> 00:16:46,339
when you're trying or verifying any sort

440
00:16:44,390 --> 00:16:47,480
of passwords you never know this stuff

441
00:16:46,339 --> 00:16:49,010
can happen you can even bypass

442
00:16:47,480 --> 00:16:50,420
multi-factor so even if you think that

443
00:16:49,010 --> 00:16:52,189
they have multi-factor you do know that

444
00:16:50,420 --> 00:16:54,890
they have multi-factor try from my phone

445
00:16:52,190 --> 00:16:57,470
you know it costs nothing if you're a

446
00:16:54,890 --> 00:16:59,420
blue team err yeah you have multi-factor

447
00:16:57,470 --> 00:17:02,270
right but try to enforce it properly

448
00:16:59,420 --> 00:17:04,579
review policies and when you do this try

449
00:17:02,270 --> 00:17:06,650
to not do not ignore your mobile devices

450
00:17:04,579 --> 00:17:10,280
think about that your employees do have

451
00:17:06,650 --> 00:17:12,709
one so there was an example in which we

452
00:17:10,280 --> 00:17:14,379
exploited the lack of policies

453
00:17:12,709 --> 00:17:16,850
essentially on their devices

454
00:17:14,380 --> 00:17:19,550
the second scenario the scenario number

455
00:17:16,849 --> 00:17:21,409
two essentially we started in this

456
00:17:19,550 --> 00:17:23,688
engagement and similar to the first one

457
00:17:21,410 --> 00:17:27,800
what did we have well essentially

458
00:17:23,689 --> 00:17:29,810
nothing so we started to look at mobile

459
00:17:27,800 --> 00:17:31,010
application as part of our recon that's

460
00:17:29,810 --> 00:17:32,540
something that we decide because we were

461
00:17:31,010 --> 00:17:34,310
like okay maybe there's something more

462
00:17:32,540 --> 00:17:36,889
against this mobile world or whatever

463
00:17:34,310 --> 00:17:38,780
that we can exploit so I started to look

464
00:17:36,890 --> 00:17:40,970
at mobile app as the during the recon

465
00:17:38,780 --> 00:17:43,370
phase as I said and because of the scope

466
00:17:40,970 --> 00:17:45,020
again is the organization so I found at

467
00:17:43,370 --> 00:17:47,090
least formal application that belong to

468
00:17:45,020 --> 00:17:48,740
the company so this company also like

469
00:17:47,090 --> 00:17:49,669
small companies and those are all in

470
00:17:48,740 --> 00:17:52,850
scoped right because

471
00:17:49,670 --> 00:17:54,650
just one big company so I went ahead and

472
00:17:52,850 --> 00:17:56,330
essentially give them a free pen test

473
00:17:54,650 --> 00:17:59,450
well free they paid for it but anyway

474
00:17:56,330 --> 00:18:01,939
like a pen test essentially I didn't if

475
00:17:59,450 --> 00:18:04,340
I as I said the beginning general lack

476
00:18:01,940 --> 00:18:06,920
of application security standard issues

477
00:18:04,340 --> 00:18:08,810
such as lack of SSL pinning that

478
00:18:06,920 --> 00:18:10,520
essentially means that you can intercept

479
00:18:08,810 --> 00:18:12,379
the traffic fairly easily and if they

480
00:18:10,520 --> 00:18:14,000
have an API that's just like awesome

481
00:18:12,380 --> 00:18:16,850
because you can just go ahead and test

482
00:18:14,000 --> 00:18:19,460
the API fairly easily by passing the

483
00:18:16,850 --> 00:18:21,350
login page not we seek an injection just

484
00:18:19,460 --> 00:18:23,000
through the mobile app itself so the way

485
00:18:21,350 --> 00:18:24,980
they were doing is they were exposing an

486
00:18:23,000 --> 00:18:27,530
activity in Android which they shouldn't

487
00:18:24,980 --> 00:18:29,390
have and you can basically bypass the

488
00:18:27,530 --> 00:18:32,330
login page by invoking this activity

489
00:18:29,390 --> 00:18:35,630
with with a tool essentially drozer if

490
00:18:32,330 --> 00:18:37,159
you want they were stored storing data

491
00:18:35,630 --> 00:18:39,020
and securing the device but as I said

492
00:18:37,160 --> 00:18:40,460
the beginning didn't cut that much

493
00:18:39,020 --> 00:18:43,820
because that was my device at the time

494
00:18:40,460 --> 00:18:46,490
so I just moved ahead and I decided to

495
00:18:43,820 --> 00:18:49,970
dig into more into the application more

496
00:18:46,490 --> 00:18:51,590
and to do some reversing main thing I

497
00:18:49,970 --> 00:18:53,660
was looking for was essentially

498
00:18:51,590 --> 00:18:55,070
passwords an API key of course that

499
00:18:53,660 --> 00:18:57,830
would be again an easy win for me I

500
00:18:55,070 --> 00:18:59,929
could just log in and with the API key

501
00:18:57,830 --> 00:19:02,419
probably get some you know password as

502
00:18:59,930 --> 00:19:04,910
well or any access to the server user

503
00:19:02,420 --> 00:19:06,980
names and email addresses do not ignore

504
00:19:04,910 --> 00:19:08,930
this even if you do not have a password

505
00:19:06,980 --> 00:19:11,420
because you know you can just take them

506
00:19:08,930 --> 00:19:14,390
and use them across different services

507
00:19:11,420 --> 00:19:15,560
that they have even if they don't work

508
00:19:14,390 --> 00:19:16,550
you know you still have something that

509
00:19:15,560 --> 00:19:19,159
you can use later on in the engagement

510
00:19:16,550 --> 00:19:21,830
but funny thing the nose is a mobile app

511
00:19:19,160 --> 00:19:23,450
they use this sort of like dev email

512
00:19:21,830 --> 00:19:25,159
addresses that you don't find anywhere

513
00:19:23,450 --> 00:19:28,010
else they just have like you know

514
00:19:25,160 --> 00:19:30,200
development at company comm something

515
00:19:28,010 --> 00:19:32,180
like that so that's a good way of

516
00:19:30,200 --> 00:19:33,830
because probably they're not securing

517
00:19:32,180 --> 00:19:38,410
that account that much as their main

518
00:19:33,830 --> 00:19:40,970
account hopefully for you and then

519
00:19:38,410 --> 00:19:43,340
essentially while reversing the code as

520
00:19:40,970 --> 00:19:45,440
2019 what I expect him to find custom

521
00:19:43,340 --> 00:19:48,740
PHP code right so essentially they have

522
00:19:45,440 --> 00:19:52,070
this API which had again custom PHP code

523
00:19:48,740 --> 00:19:54,140
which was easily exploitable and sure

524
00:19:52,070 --> 00:19:57,169
enough I did identify few issues being

525
00:19:54,140 --> 00:19:58,640
the first one secret injection cool not

526
00:19:57,170 --> 00:20:01,130
that cool great but not that great for

527
00:19:58,640 --> 00:20:03,110
us at the time because essentially the

528
00:20:01,130 --> 00:20:03,690
goal at the time for us was getting in

529
00:20:03,110 --> 00:20:05,850
right

530
00:20:03,690 --> 00:20:08,790
the database that we compromised was

531
00:20:05,850 --> 00:20:11,820
full of customer details so we could

532
00:20:08,790 --> 00:20:13,320
potentially get names email addresses if

533
00:20:11,820 --> 00:20:15,540
they're not PCI compliant probably

534
00:20:13,320 --> 00:20:16,889
credit cards and stuff like that but we

535
00:20:15,540 --> 00:20:18,300
sort of moved on from there

536
00:20:16,890 --> 00:20:21,870
because it's not something that we were

537
00:20:18,300 --> 00:20:25,680
interested in and then the next one was

538
00:20:21,870 --> 00:20:27,449
cross the scripting yeah you might say

539
00:20:25,680 --> 00:20:28,530
okay what can I do with it I would say

540
00:20:27,450 --> 00:20:30,120
do not really ignore through some

541
00:20:28,530 --> 00:20:32,129
scripting when you do red teaming

542
00:20:30,120 --> 00:20:35,310
because if you think about it if you can

543
00:20:32,130 --> 00:20:36,660
do dodgy stuff from their domain and you

544
00:20:35,310 --> 00:20:38,550
send a phishing you know their their

545
00:20:36,660 --> 00:20:41,480
mail filter might be super happy to

546
00:20:38,550 --> 00:20:44,790
accept their domain as a trusted link

547
00:20:41,480 --> 00:20:46,890
but finally more digging paying PHP

548
00:20:44,790 --> 00:20:49,379
eventually you find a b-tree file upload

549
00:20:46,890 --> 00:20:51,870
you might have guessed it just an upload

550
00:20:49,380 --> 00:20:53,760
functionality which again the oldest

551
00:20:51,870 --> 00:20:55,860
stuff was given me from the mobile app I

552
00:20:53,760 --> 00:20:57,180
didn't fast the API or anything it was

553
00:20:55,860 --> 00:20:58,770
just the mobile app from the code was

554
00:20:57,180 --> 00:21:02,280
telling me look this is how you use it

555
00:20:58,770 --> 00:21:04,620
and yeah that worked essentially so the

556
00:21:02,280 --> 00:21:06,330
way you concluded the engagement was you

557
00:21:04,620 --> 00:21:08,419
go ahead and you upload the pitch

558
00:21:06,330 --> 00:21:11,040
Michelle super-easy

559
00:21:08,420 --> 00:21:13,740
although we kind of hit a wall there

560
00:21:11,040 --> 00:21:15,960
because that the box that we compromised

561
00:21:13,740 --> 00:21:17,850
was essentially just an azure box

562
00:21:15,960 --> 00:21:19,770
somewhere it wasn't really connected to

563
00:21:17,850 --> 00:21:21,360
their internal network so I think with

564
00:21:19,770 --> 00:21:22,889
this engagement you get super hyped and

565
00:21:21,360 --> 00:21:26,250
then you get basically down and then you

566
00:21:22,890 --> 00:21:28,350
get typed again so so from this

567
00:21:26,250 --> 00:21:31,380
compromised box though we did more

568
00:21:28,350 --> 00:21:34,080
digging and we found clear test

569
00:21:31,380 --> 00:21:36,030
credentials embedded in a script we

570
00:21:34,080 --> 00:21:38,310
could reuse them across another service

571
00:21:36,030 --> 00:21:40,139
we did that and then we got blocked

572
00:21:38,310 --> 00:21:42,030
again by their circle whatever they were

573
00:21:40,140 --> 00:21:43,590
using because essentially we're coming

574
00:21:42,030 --> 00:21:45,899
we were trying this it's probably

575
00:21:43,590 --> 00:21:50,129
mistake last night we tried this from

576
00:21:45,900 --> 00:21:52,380
our infrastructure it turns out these

577
00:21:50,130 --> 00:21:55,260
box we could actually use these but this

578
00:21:52,380 --> 00:21:57,510
box too as an attacking slash pivot

579
00:21:55,260 --> 00:21:59,250
point so we could essentially use this

580
00:21:57,510 --> 00:22:01,170
box to authenticate on other services

581
00:21:59,250 --> 00:22:02,580
and whatever approach that were using

582
00:22:01,170 --> 00:22:04,170
they were not blocking us so it was

583
00:22:02,580 --> 00:22:06,720
probably a whitelisting approach based

584
00:22:04,170 --> 00:22:08,460
on IP addresses so yeah because that IP

585
00:22:06,720 --> 00:22:10,050
was trusted even though it was just a

586
00:22:08,460 --> 00:22:13,080
random that box Monsieur

587
00:22:10,050 --> 00:22:16,440
it was completely fine so eventually

588
00:22:13,080 --> 00:22:17,340
from their copy pn axis and compromise

589
00:22:16,440 --> 00:22:19,440
the the

590
00:22:17,340 --> 00:22:20,720
internal network which again was the our

591
00:22:19,440 --> 00:22:24,230
goal at time

592
00:22:20,720 --> 00:22:27,720
so let's alert well had to keep the

593
00:22:24,230 --> 00:22:28,440
takeaways from this engagement well as a

594
00:22:27,720 --> 00:22:31,590
red teamer

595
00:22:28,440 --> 00:22:32,820
I would definitely now include reversing

596
00:22:31,590 --> 00:22:34,470
or having a look at the mobile

597
00:22:32,820 --> 00:22:35,879
application as part of my recon now

598
00:22:34,470 --> 00:22:39,360
because you know you never know what

599
00:22:35,880 --> 00:22:41,220
you're gonna find that API endpoint you

600
00:22:39,360 --> 00:22:42,209
probably familiar with the Recon process

601
00:22:41,220 --> 00:22:45,240
but you know there are a bunch of tools

602
00:22:42,210 --> 00:22:47,640
to enumerate to man named Amos go Buster

603
00:22:45,240 --> 00:22:49,350
you name it that domain name wasn't

604
00:22:47,640 --> 00:22:51,630
flagged by any of this because he was

605
00:22:49,350 --> 00:22:54,990
like so random and he was probably used

606
00:22:51,630 --> 00:22:56,310
by just that mobile app that yeah he

607
00:22:54,990 --> 00:22:59,430
probably wouldn't have find it with

608
00:22:56,310 --> 00:23:02,310
these tools so if you're a timur start

609
00:22:59,430 --> 00:23:04,440
looking a mobile app as a blue Timur you

610
00:23:02,310 --> 00:23:07,590
want to protect your mobile app so hard

611
00:23:04,440 --> 00:23:09,660
let's get a fan test and please include

612
00:23:07,590 --> 00:23:11,159
the API server in your fan test that's

613
00:23:09,660 --> 00:23:14,970
probably the main thing that your app

614
00:23:11,160 --> 00:23:18,900
mobile app is doing nowadays so they

615
00:23:14,970 --> 00:23:21,150
make me think okay we started basically

616
00:23:18,900 --> 00:23:23,580
exploiting a lack of policies and then

617
00:23:21,150 --> 00:23:26,010
mobile application what can we do on

618
00:23:23,580 --> 00:23:28,199
this mobile stuff right we could

619
00:23:26,010 --> 00:23:32,220
eventually maybe target the mobile user

620
00:23:28,200 --> 00:23:34,320
itself can we do this most likely if you

621
00:23:32,220 --> 00:23:36,330
think that on the Play Store as you

622
00:23:34,320 --> 00:23:38,730
probably aware it's full of malware

623
00:23:36,330 --> 00:23:42,389
Google is trying its best but still full

624
00:23:38,730 --> 00:23:45,240
of malware but from us from for us for

625
00:23:42,390 --> 00:23:47,040
from a red teamer perspective it's sort

626
00:23:45,240 --> 00:23:48,480
of a gray area if you think about it

627
00:23:47,040 --> 00:23:49,770
when you put stuff on the Play Store

628
00:23:48,480 --> 00:23:51,390
you're still agreeing with terms of

629
00:23:49,770 --> 00:23:54,150
condition of google and google is not

630
00:23:51,390 --> 00:23:57,090
very nice with red teamer if there are

631
00:23:54,150 --> 00:23:58,590
some article out there but essentially

632
00:23:57,090 --> 00:24:02,250
yeah do your research before you start

633
00:23:58,590 --> 00:24:05,760
targeting people it this way as I said

634
00:24:02,250 --> 00:24:07,170
earlier MDM are also an option so if

635
00:24:05,760 --> 00:24:08,820
they have one in the cloud if they use

636
00:24:07,170 --> 00:24:11,310
this service if they have one exposed in

637
00:24:08,820 --> 00:24:14,399
general you might just have people

638
00:24:11,310 --> 00:24:16,440
credits or weak Reds and you can just

639
00:24:14,400 --> 00:24:19,650
get into the MDM and push stuff onto the

640
00:24:16,440 --> 00:24:23,220
device that's another way of another

641
00:24:19,650 --> 00:24:26,640
back to let's say finally you can just

642
00:24:23,220 --> 00:24:28,350
send the apk you know email SMS if you

643
00:24:26,640 --> 00:24:30,540
have the number you might argue that

644
00:24:28,350 --> 00:24:31,260
this requires a huge amount of user

645
00:24:30,540 --> 00:24:32,970
interaction

646
00:24:31,260 --> 00:24:34,770
I tried myself you know in hundreds

647
00:24:32,970 --> 00:24:37,530
crazy need to enable adoption and things

648
00:24:34,770 --> 00:24:39,360
of that but with that I don't know you

649
00:24:37,530 --> 00:24:41,700
by every time I look at friends and

650
00:24:39,360 --> 00:24:43,260
family member they have malware sure

651
00:24:41,700 --> 00:24:45,510
enough you go into their download folder

652
00:24:43,260 --> 00:24:47,940
and I have some random apk from like

653
00:24:45,510 --> 00:24:50,070
some somewhere that I downloaded I don't

654
00:24:47,940 --> 00:24:51,810
know how they managed to do it but you

655
00:24:50,070 --> 00:24:53,790
know if they can manage you know if you

656
00:24:51,810 --> 00:24:56,190
have a good pretext which is not just

657
00:24:53,790 --> 00:24:59,129
watch this video though it might work

658
00:24:56,190 --> 00:25:02,100
yeah you might get into them into

659
00:24:59,130 --> 00:25:04,500
install in your application so assuming

660
00:25:02,100 --> 00:25:06,929
you have one of one method being one of

661
00:25:04,500 --> 00:25:08,550
them being another method to deploy

662
00:25:06,930 --> 00:25:11,520
something onto that onto a device

663
00:25:08,550 --> 00:25:13,409
why are you going to deploy you might be

664
00:25:11,520 --> 00:25:16,560
aware the the out there there is a

665
00:25:13,410 --> 00:25:19,770
matter potato apk meterpreter is one non

666
00:25:16,560 --> 00:25:22,560
Metasploit payload essentially you can

667
00:25:19,770 --> 00:25:25,230
generate a pretty easily with one-liner

668
00:25:22,560 --> 00:25:29,700
of a mass vinum but do you really want

669
00:25:25,230 --> 00:25:32,490
to do this you might argue again no one

670
00:25:29,700 --> 00:25:34,500
does have an anti-virus on their mobile

671
00:25:32,490 --> 00:25:36,750
phone I'm I say yeah

672
00:25:34,500 --> 00:25:39,060
you probably don't you're dealing most

673
00:25:36,750 --> 00:25:40,830
likely with corporate phones most of the

674
00:25:39,060 --> 00:25:42,780
times antivirus solution they do come

675
00:25:40,830 --> 00:25:44,100
with MDM also the other way around if

676
00:25:42,780 --> 00:25:47,399
you have an anti-virus they might come

677
00:25:44,100 --> 00:25:48,870
with an MDM to manage it so I might you

678
00:25:47,400 --> 00:25:50,610
know you don't want to spoil it just

679
00:25:48,870 --> 00:25:54,810
because you you know you want to drop a

680
00:25:50,610 --> 00:25:55,199
Terp return on it so okay what I'm gonna

681
00:25:54,810 --> 00:25:57,480
do

682
00:25:55,200 --> 00:25:59,640
well we do have existing tools for this

683
00:25:57,480 --> 00:26:02,400
you know we're pen testers we do have

684
00:25:59,640 --> 00:26:05,610
sort of offensive tool kit right so why

685
00:26:02,400 --> 00:26:08,280
not exploiting this so here here's where

686
00:26:05,610 --> 00:26:10,350
freedom comes into play or could come

687
00:26:08,280 --> 00:26:11,940
into play I think so actually

688
00:26:10,350 --> 00:26:14,969
quick question how many of you heard the

689
00:26:11,940 --> 00:26:20,070
freedom or familiar with it okay

690
00:26:14,970 --> 00:26:21,840
quite a few good well yeah I wouldn't be

691
00:26:20,070 --> 00:26:25,439
surprised if you are familiar with it in

692
00:26:21,840 --> 00:26:27,899
the past year years I'd say it's been

693
00:26:25,440 --> 00:26:30,270
pretty popular and mobile app pen

694
00:26:27,900 --> 00:26:32,790
testing if you're not familiar with it

695
00:26:30,270 --> 00:26:34,770
essentially frida is a dynamic code

696
00:26:32,790 --> 00:26:36,450
instrumentation toolkit which allows you

697
00:26:34,770 --> 00:26:38,910
to inject JavaScript code into native

698
00:26:36,450 --> 00:26:41,670
apps for a bunch of platforms including

699
00:26:38,910 --> 00:26:45,090
our mobile platform such as iOS or

700
00:26:41,670 --> 00:26:47,070
Android so why freedom Co popular

701
00:26:45,090 --> 00:26:49,169
nowadays is essentially in pentesting

702
00:26:47,070 --> 00:26:52,290
allows you to do a bunch of tasks that

703
00:26:49,170 --> 00:26:54,960
in fact there were kind of tedious think

704
00:26:52,290 --> 00:26:57,330
about these functions right SSL pending

705
00:26:54,960 --> 00:26:59,340
bypass or route detection by pass before

706
00:26:57,330 --> 00:27:01,379
free document you basically had to

707
00:26:59,340 --> 00:27:04,530
decompile the apk find the function

708
00:27:01,380 --> 00:27:07,650
responsible for it sort of change the

709
00:27:04,530 --> 00:27:09,840
functionality put it back in repackage

710
00:27:07,650 --> 00:27:13,560
the apk portion the device pray and

711
00:27:09,840 --> 00:27:15,449
hopefully that's gonna work now with

712
00:27:13,560 --> 00:27:17,190
Frieda it's essentially just a matter of

713
00:27:15,450 --> 00:27:19,740
loading a script and these scripts are

714
00:27:17,190 --> 00:27:21,930
even universal so no matter what library

715
00:27:19,740 --> 00:27:24,150
they're using their kind of advanced and

716
00:27:21,930 --> 00:27:26,640
they can recognize the library and do

717
00:27:24,150 --> 00:27:29,010
the SSL pinning for you same thing with

718
00:27:26,640 --> 00:27:31,860
route detection so how this thing works

719
00:27:29,010 --> 00:27:34,620
is a shell essentially Frieda is looking

720
00:27:31,860 --> 00:27:38,189
for a find a function being is device

721
00:27:34,620 --> 00:27:39,540
rooted return true or false of course if

722
00:27:38,190 --> 00:27:41,820
your device is rooted and if the

723
00:27:39,540 --> 00:27:43,590
behavior is correct it's going to return

724
00:27:41,820 --> 00:27:47,820
true other question is the device rooted

725
00:27:43,590 --> 00:27:50,520
or to the function the way this Frieda

726
00:27:47,820 --> 00:27:52,860
JavaScript hooking works is essentially

727
00:27:50,520 --> 00:27:54,330
it just hooked the function wait for it

728
00:27:52,860 --> 00:27:56,850
to be called by the device by the

729
00:27:54,330 --> 00:27:59,340
application itself and it basically

730
00:27:56,850 --> 00:28:00,719
returns false no matter what so your

731
00:27:59,340 --> 00:28:02,159
application doesn't care if the device

732
00:28:00,720 --> 00:28:03,930
is root anymore because you can just

733
00:28:02,160 --> 00:28:05,430
load the JavaScript which tells to the

734
00:28:03,930 --> 00:28:06,660
app okay just return false to the

735
00:28:05,430 --> 00:28:10,320
function I don't care whatever you want

736
00:28:06,660 --> 00:28:12,840
I like the other functionality such as

737
00:28:10,320 --> 00:28:14,700
memory dumping so there is a tool called

738
00:28:12,840 --> 00:28:16,110
freedom that you can use this is

739
00:28:14,700 --> 00:28:17,850
essentially dumping the memory of the

740
00:28:16,110 --> 00:28:19,320
process which in this case if you're

741
00:28:17,850 --> 00:28:22,800
looking at a mobile app that would be

742
00:28:19,320 --> 00:28:25,230
your your basic application moment

743
00:28:22,800 --> 00:28:27,570
memory and it's awful because if you

744
00:28:25,230 --> 00:28:28,800
think about it and the device it's what

745
00:28:27,570 --> 00:28:31,800
the application is stored everything

746
00:28:28,800 --> 00:28:34,169
securely on the device they might leak

747
00:28:31,800 --> 00:28:36,419
stuff on the memory so what you do is

748
00:28:34,170 --> 00:28:38,220
basically dump all the memory and you go

749
00:28:36,420 --> 00:28:38,940
hunting in memory for passwords credits

750
00:28:38,220 --> 00:28:42,210
username

751
00:28:38,940 --> 00:28:44,520
whatever you need the last one the

752
00:28:42,210 --> 00:28:48,180
runtime decryption it's sort of a CTF

753
00:28:44,520 --> 00:28:49,820
like thingy but I added in one or two

754
00:28:48,180 --> 00:28:52,290
engagement where it was helpful so

755
00:28:49,820 --> 00:28:55,050
essentially if the application do is

756
00:28:52,290 --> 00:28:56,700
doing some encryption instead of you

757
00:28:55,050 --> 00:28:57,899
going there reversing the app of course

758
00:28:56,700 --> 00:28:58,770
you're gonna say you want to save some

759
00:28:57,900 --> 00:29:00,390
time

760
00:28:58,770 --> 00:29:02,970
so what you can do is just waiting for

761
00:29:00,390 --> 00:29:05,910
the application to invoke the decrypted

762
00:29:02,970 --> 00:29:08,370
value and or even the function and just

763
00:29:05,910 --> 00:29:10,200
hijack this function and print the

764
00:29:08,370 --> 00:29:12,149
decrypted barrier for you it's pretty

765
00:29:10,200 --> 00:29:16,560
straightforward but again fairly used in

766
00:29:12,150 --> 00:29:18,060
CD f's so as I said I want to propose

767
00:29:16,560 --> 00:29:19,500
freedom from a different perspective so

768
00:29:18,060 --> 00:29:21,870
maybe can we use this on a talking

769
00:29:19,500 --> 00:29:25,200
toolkit can we maybe create a backdoor

770
00:29:21,870 --> 00:29:27,090
with it it is possible even one

771
00:29:25,200 --> 00:29:29,220
documented essentially they have this

772
00:29:27,090 --> 00:29:33,270
Freda gadget library which allows you to

773
00:29:29,220 --> 00:29:35,670
run the Freda essentially on the device

774
00:29:33,270 --> 00:29:37,710
even if the device is not rooted or

775
00:29:35,670 --> 00:29:39,120
jailbroken which is pretty likely if

776
00:29:37,710 --> 00:29:40,710
you're doing a team engagement you

777
00:29:39,120 --> 00:29:42,810
probably not going to be gonna be

778
00:29:40,710 --> 00:29:45,810
dealing with a rooted or a jailbroken

779
00:29:42,810 --> 00:29:49,010
device right the process kind of follows

780
00:29:45,810 --> 00:29:52,590
these steps so you want to start by

781
00:29:49,010 --> 00:29:54,150
decompiling the the application the

782
00:29:52,590 --> 00:29:55,470
compiled in the apk if you're under

783
00:29:54,150 --> 00:29:58,650
Android it's pretty straightforward just

784
00:29:55,470 --> 00:30:01,560
a peek a tool what you want to do then

785
00:29:58,650 --> 00:30:03,330
is injecting the gadget into the apk so

786
00:30:01,560 --> 00:30:06,149
you do have your own pocket and packaged

787
00:30:03,330 --> 00:30:09,179
apk you don't load the library you put

788
00:30:06,150 --> 00:30:10,800
in the Lib folder and the libraries is

789
00:30:09,180 --> 00:30:12,780
there at the moment but it's not invoked

790
00:30:10,800 --> 00:30:15,300
this is where the tur stuff come in

791
00:30:12,780 --> 00:30:17,129
which is editing these Mallicoat or

792
00:30:15,300 --> 00:30:19,260
essentially the application code in a

793
00:30:17,130 --> 00:30:21,750
way that as soon as you open the app the

794
00:30:19,260 --> 00:30:23,629
frida library will be loaded so you

795
00:30:21,750 --> 00:30:26,820
probably probably what you want to do is

796
00:30:23,630 --> 00:30:29,580
look for the constructor and put your

797
00:30:26,820 --> 00:30:31,409
invocation for Frida in the constructor

798
00:30:29,580 --> 00:30:33,929
so as soon as the app is open you have

799
00:30:31,410 --> 00:30:35,610
freedom essentially first step

800
00:30:33,930 --> 00:30:39,030
essentially is the final step which is

801
00:30:35,610 --> 00:30:42,510
creating your apk again again apktool

802
00:30:39,030 --> 00:30:44,129
just creating the APK for you but you

803
00:30:42,510 --> 00:30:46,530
know being lazy there are other ways

804
00:30:44,130 --> 00:30:47,850
that you can do it automatically if

805
00:30:46,530 --> 00:30:49,680
you're fantastic you would call this

806
00:30:47,850 --> 00:30:53,550
process patching an apk rather

807
00:30:49,680 --> 00:30:56,640
backdooring I think the same I'm a huge

808
00:30:53,550 --> 00:30:58,590
fan of objection this is a framework or

809
00:30:56,640 --> 00:31:02,850
this basically Python framework built

810
00:30:58,590 --> 00:31:03,899
around Frida on top of Frida and it's

811
00:31:02,850 --> 00:31:06,090
pretty straightforward to do this

812
00:31:03,900 --> 00:31:08,690
process it's just one command touch abk

813
00:31:06,090 --> 00:31:11,310
or watch ABA depending on the platform

814
00:31:08,690 --> 00:31:13,029
there are other scripts out there that

815
00:31:11,310 --> 00:31:16,658
do this for you

816
00:31:13,029 --> 00:31:21,099
on github freely available I had some

817
00:31:16,659 --> 00:31:23,889
luck with this Freda leaf injector but

818
00:31:21,099 --> 00:31:26,499
personally when objection fails I would

819
00:31:23,889 --> 00:31:29,498
just go back to the modern way because

820
00:31:26,499 --> 00:31:31,869
if you go back to the stages you did

821
00:31:29,499 --> 00:31:33,729
your main point of failure here with

822
00:31:31,869 --> 00:31:36,099
objection is going to be your first and

823
00:31:33,729 --> 00:31:38,829
fourth stage so the apktool commands

824
00:31:36,099 --> 00:31:41,319
because some there are some custom flags

825
00:31:38,829 --> 00:31:42,879
that you can specify so you have a bit

826
00:31:41,319 --> 00:31:44,678
more control on the manner on the

827
00:31:42,879 --> 00:31:47,289
monitor process so if the application is

828
00:31:44,679 --> 00:31:49,239
using some weird resources and objection

829
00:31:47,289 --> 00:31:51,879
cannot repackage the apk just do it

830
00:31:49,239 --> 00:31:53,289
manually it's not a long process but you

831
00:31:51,879 --> 00:31:57,668
know if objection is there and it works

832
00:31:53,289 --> 00:31:59,579
why not just using it so as we said how

833
00:31:57,669 --> 00:32:02,349
can we do something malicious as I said

834
00:31:59,579 --> 00:32:03,519
it's basically a framework Freda its

835
00:32:02,349 --> 00:32:05,948
basic affray mode allows you to inject

836
00:32:03,519 --> 00:32:08,379
JavaScript so and there are already

837
00:32:05,949 --> 00:32:11,469
existing scripts which I think we can

838
00:32:08,379 --> 00:32:13,658
slightly alter to change the behavior of

839
00:32:11,469 --> 00:32:17,169
the application in a more offensive way

840
00:32:13,659 --> 00:32:19,689
as I said take the following example for

841
00:32:17,169 --> 00:32:23,139
instance this is JavaScript West Java

842
00:32:19,689 --> 00:32:26,169
slash Freda code which originally what

843
00:32:23,139 --> 00:32:28,178
this script was doing was waiting for a

844
00:32:26,169 --> 00:32:29,529
webview I whup you if you don't know is

845
00:32:28,179 --> 00:32:30,819
essentially an embedded browser in

846
00:32:29,529 --> 00:32:31,839
android you know sometimes you might

847
00:32:30,819 --> 00:32:33,849
have looked to that you know if you

848
00:32:31,839 --> 00:32:35,649
scroll on up and you open something you

849
00:32:33,849 --> 00:32:37,418
click a link it doesn't open your Chrome

850
00:32:35,649 --> 00:32:39,579
you know it opens like a weird browser

851
00:32:37,419 --> 00:32:42,579
looking window that's essentially a web

852
00:32:39,579 --> 00:32:44,408
view so what this script was doing was

853
00:32:42,579 --> 00:32:47,259
waiting for a webview to be called and

854
00:32:44,409 --> 00:32:49,119
print the value of the URL that webview

855
00:32:47,259 --> 00:32:50,919
was loading I was pretty helpful you

856
00:32:49,119 --> 00:32:54,249
know if you cannot intercept the traffic

857
00:32:50,919 --> 00:32:56,589
you can just look at what you're out the

858
00:32:54,249 --> 00:32:58,959
application is loading without doing SSL

859
00:32:56,589 --> 00:33:00,969
pinning bypass and things like that but

860
00:32:58,959 --> 00:33:03,099
the other thing you can do you can

861
00:33:00,969 --> 00:33:06,279
probably do this you can just specify an

862
00:33:03,099 --> 00:33:08,889
arbitrary site or v3 web site in a

863
00:33:06,279 --> 00:33:10,509
variable or whatever and yeah you can

864
00:33:08,889 --> 00:33:13,238
wait for the webview to be loaded but

865
00:33:10,509 --> 00:33:15,879
you can also overwrite the behavior of

866
00:33:13,239 --> 00:33:18,249
the webview so you have you know

867
00:33:15,879 --> 00:33:20,408
standard webview a function which is

868
00:33:18,249 --> 00:33:23,909
used to load the URL which is called

869
00:33:20,409 --> 00:33:26,010
load URL so the way you do this is just

870
00:33:23,909 --> 00:33:29,580
overload the

871
00:33:26,010 --> 00:33:32,400
loadurl function that the call of this

872
00:33:29,580 --> 00:33:33,780
function which an arbitrary value which

873
00:33:32,400 --> 00:33:37,680
in this case is going to be this

874
00:33:33,780 --> 00:33:38,639
variable the K variable and that K

875
00:33:37,680 --> 00:33:41,490
variable is going to contain the

876
00:33:38,640 --> 00:33:44,450
attacker website or your website so

877
00:33:41,490 --> 00:33:47,250
essentially the way this is gonna work

878
00:33:44,450 --> 00:33:50,580
this web you are jacking you might have

879
00:33:47,250 --> 00:33:54,210
guessed it but essentially are you gonna

880
00:33:50,580 --> 00:33:56,250
end up with is scenario like this so you

881
00:33:54,210 --> 00:33:58,050
try to connect with freedom nothing

882
00:33:56,250 --> 00:34:00,090
happens right because my app is no open

883
00:33:58,050 --> 00:34:01,919
but as soon as I open the app you do

884
00:34:00,090 --> 00:34:03,510
have a Freda gadget there which is

885
00:34:01,920 --> 00:34:05,790
essentially mean that now free that's

886
00:34:03,510 --> 00:34:09,570
running and loaded on the device so you

887
00:34:05,790 --> 00:34:12,630
can interact with it so what you can do

888
00:34:09,570 --> 00:34:14,700
is maybe load objection again it's the

889
00:34:12,630 --> 00:34:16,679
framework that I mentioned earlier he

890
00:34:14,699 --> 00:34:18,899
has a few few cool functionality such as

891
00:34:16,679 --> 00:34:22,440
operating system command and the way I

892
00:34:18,899 --> 00:34:25,199
used import my script is just import my

893
00:34:22,440 --> 00:34:28,560
script or the web UI Jackie is very

894
00:34:25,199 --> 00:34:31,399
straightforward now nothing is happening

895
00:34:28,560 --> 00:34:33,719
on my device when I do import script

896
00:34:31,399 --> 00:34:35,429
reason being because the device is not

897
00:34:33,719 --> 00:34:38,370
calling any webview at the moment it's

898
00:34:35,429 --> 00:34:40,020
just working with their activities well

899
00:34:38,370 --> 00:34:42,330
sure enough as soon as I click designing

900
00:34:40,020 --> 00:34:44,190
the application is actually loading a

901
00:34:42,330 --> 00:34:45,719
web view which again hijack and

902
00:34:44,190 --> 00:34:48,120
hopefully well it's a video no it's

903
00:34:45,719 --> 00:34:51,000
going to happen but there is my nicely

904
00:34:48,120 --> 00:34:53,460
looking phishing page and as you might

905
00:34:51,000 --> 00:34:56,040
have guessed on the bottom left I'm

906
00:34:53,460 --> 00:34:59,280
essentially waiting for this guy just me

907
00:34:56,040 --> 00:35:02,160
yeah anyway this guy to insert a scratch

908
00:34:59,280 --> 00:35:03,990
and I can capture them and the

909
00:35:02,160 --> 00:35:05,790
application flow important is not

910
00:35:03,990 --> 00:35:08,939
interrupted so the user has no clue what

911
00:35:05,790 --> 00:35:11,009
just happened so this is essentially how

912
00:35:08,940 --> 00:35:13,020
can i I Jack a web view it's very easy

913
00:35:11,010 --> 00:35:15,960
as you saw the code is pretty much about

914
00:35:13,020 --> 00:35:23,750
five lines of code and I just closed my

915
00:35:15,960 --> 00:35:29,130
demo file just for later it's easier so

916
00:35:23,750 --> 00:35:30,450
okay that was an example right but some

917
00:35:29,130 --> 00:35:33,390
of you may already spotted a small issue

918
00:35:30,450 --> 00:35:36,089
which is this attack at the moment is

919
00:35:33,390 --> 00:35:38,279
working locally so I was connecting to a

920
00:35:36,090 --> 00:35:39,300
device on a 10 dot something address

921
00:35:38,280 --> 00:35:41,730
which is a local address

922
00:35:39,300 --> 00:35:45,150
on my local network and this is default

923
00:35:41,730 --> 00:35:46,650
Frieda gadget behavior but there is a

924
00:35:45,150 --> 00:35:47,130
way to automate this and to get around

925
00:35:46,650 --> 00:35:49,800
it

926
00:35:47,130 --> 00:35:51,000
so what you want end up with essentially

927
00:35:49,800 --> 00:35:53,250
if you want to create a backdoor is

928
00:35:51,000 --> 00:35:55,560
something that you can run that it runs

929
00:35:53,250 --> 00:35:56,610
actually as soon as the application is

930
00:35:55,560 --> 00:35:58,140
loaded and requires no further

931
00:35:56,610 --> 00:35:59,700
interaction from you you know I don't

932
00:35:58,140 --> 00:36:01,080
need to know the freelance running I

933
00:35:59,700 --> 00:36:03,720
don't need to interact with it I just

934
00:36:01,080 --> 00:36:06,440
want the script to run and that's it you

935
00:36:03,720 --> 00:36:10,410
can do it with you by using config files

936
00:36:06,440 --> 00:36:13,880
and a config file is very complex I'm

937
00:36:10,410 --> 00:36:17,279
joking it's just it is like five lines

938
00:36:13,880 --> 00:36:20,700
it's pretty straightforward by default

939
00:36:17,280 --> 00:36:23,370
as I said the behavior is to listen so

940
00:36:20,700 --> 00:36:25,169
the type would be listened so but we can

941
00:36:23,370 --> 00:36:27,779
just override this by saying typescript

942
00:36:25,170 --> 00:36:29,880
which you guess that is just loading a

943
00:36:27,780 --> 00:36:32,130
script and that's going to be defined by

944
00:36:29,880 --> 00:36:34,650
the path variable which is the path to

945
00:36:32,130 --> 00:36:36,270
your script and the onload resume it

946
00:36:34,650 --> 00:36:37,650
just so that the application doesn't

947
00:36:36,270 --> 00:36:40,230
stop because again the default behavior

948
00:36:37,650 --> 00:36:41,670
is to wait an application it wait for

949
00:36:40,230 --> 00:36:43,350
your script to be finished for the

950
00:36:41,670 --> 00:36:45,180
application to continue its

951
00:36:43,350 --> 00:36:46,830
functionality essentially so if you do

952
00:36:45,180 --> 00:36:50,190
this it's basically overriding this

953
00:36:46,830 --> 00:36:52,230
behavior and basically it's done because

954
00:36:50,190 --> 00:36:54,260
the user doesn't need to wait right we

955
00:36:52,230 --> 00:36:56,970
want the users to continue using the app

956
00:36:54,260 --> 00:37:00,420
there are a few hacks that we need to

957
00:36:56,970 --> 00:37:02,129
remember when we use a config file first

958
00:37:00,420 --> 00:37:05,640
one first is how you call the config

959
00:37:02,130 --> 00:37:08,820
file the standard says that you need to

960
00:37:05,640 --> 00:37:12,480
call this file with the same name of the

961
00:37:08,820 --> 00:37:14,070
frida library dot-com fiddly so if using

962
00:37:12,480 --> 00:37:16,620
objection you probably gonna end up with

963
00:37:14,070 --> 00:37:18,900
a naming convention like this one so Lib

964
00:37:16,620 --> 00:37:21,150
Freda - gadget that s so it's gonna be

965
00:37:18,900 --> 00:37:22,950
your Frida got your library and your

966
00:37:21,150 --> 00:37:26,760
config file needs to be named leave

967
00:37:22,950 --> 00:37:28,950
Frida - gadget confit does so the other

968
00:37:26,760 --> 00:37:30,750
thing is that if you think about it if

969
00:37:28,950 --> 00:37:31,950
you don't have a phone with you or

970
00:37:30,750 --> 00:37:33,510
that's your target

971
00:37:31,950 --> 00:37:36,270
you don't have control over the path

972
00:37:33,510 --> 00:37:38,730
variable right so if we go to the script

973
00:37:36,270 --> 00:37:39,990
your path variable if you're a pen

974
00:37:38,730 --> 00:37:42,240
tester you can just plug in the phone

975
00:37:39,990 --> 00:37:45,299
put the script into Data local temp and

976
00:37:42,240 --> 00:37:47,609
say - dis cut to this gadget config okay

977
00:37:45,300 --> 00:37:50,430
load the script from data local time my

978
00:37:47,610 --> 00:37:52,590
script all JavaScript you don't have the

979
00:37:50,430 --> 00:37:52,950
luxury of doing it here you don't really

980
00:37:52,590 --> 00:37:55,640
have

981
00:37:52,950 --> 00:37:57,990
control over the path so because as

982
00:37:55,640 --> 00:37:59,759
especially if you try to put a

983
00:37:57,990 --> 00:38:01,799
JavaScript file in the library folder

984
00:37:59,760 --> 00:38:03,420
and you repackage the apk that's fine

985
00:38:01,800 --> 00:38:05,310
it's gotta be there well as soon as you

986
00:38:03,420 --> 00:38:08,550
install it the Android operating system

987
00:38:05,310 --> 00:38:12,390
is just gonna get rid for you mmm this

988
00:38:08,550 --> 00:38:14,579
for you very nicely however I did find

989
00:38:12,390 --> 00:38:16,279
that in a similar way of the previous

990
00:38:14,579 --> 00:38:19,410
point Android it's gonna preserve

991
00:38:16,280 --> 00:38:21,510
whatever config file you have for an

992
00:38:19,410 --> 00:38:24,509
existing library so you can sort of hack

993
00:38:21,510 --> 00:38:27,119
this by saying you have a library which

994
00:38:24,510 --> 00:38:28,710
is called leave ssl/tls so I don't care

995
00:38:27,119 --> 00:38:31,380
about what this library does is probably

996
00:38:28,710 --> 00:38:32,970
gonna do SSL stuff but essentially you

997
00:38:31,380 --> 00:38:35,970
can rename your JavaScript file to be

998
00:38:32,970 --> 00:38:38,640
something like Lib ssl.com video so and

999
00:38:35,970 --> 00:38:41,879
Android not knowing or how a config file

1000
00:38:38,640 --> 00:38:45,240
is probably gonna looking it's just

1001
00:38:41,880 --> 00:38:46,770
gonna accept this and it's gonna save it

1002
00:38:45,240 --> 00:38:50,729
one is inst when the application

1003
00:38:46,770 --> 00:38:52,829
installed on your device so you probably

1004
00:38:50,730 --> 00:38:56,339
want to end up with something like this

1005
00:38:52,829 --> 00:38:59,910
freida config is in red just below it

1006
00:38:56,339 --> 00:39:01,349
it's the original gadget dollar saw

1007
00:38:59,910 --> 00:39:04,410
which is the library so you just call it

1008
00:39:01,349 --> 00:39:06,540
as I said Commodore saw and that that is

1009
00:39:04,410 --> 00:39:08,670
to load your frida and then I just

1010
00:39:06,540 --> 00:39:10,800
picked a random library like this Lib G

1011
00:39:08,670 --> 00:39:13,920
log dollar saw which is below the green

1012
00:39:10,800 --> 00:39:15,599
box and again I don't care what this

1013
00:39:13,920 --> 00:39:17,880
library does I just need a name for my

1014
00:39:15,599 --> 00:39:20,910
JavaScript so I just named my JavaScript

1015
00:39:17,880 --> 00:39:23,099
Lib G log dog confidante I saw and told

1016
00:39:20,910 --> 00:39:25,980
to my config grabbed the JavaScript from

1017
00:39:23,099 --> 00:39:30,990
this config which is not a confident

1018
00:39:25,980 --> 00:39:34,020
from this file so all of this is done so

1019
00:39:30,990 --> 00:39:36,419
we can automate the process so fairly

1020
00:39:34,020 --> 00:39:39,420
similar demo but essentially as you can

1021
00:39:36,420 --> 00:39:42,660
see now locally I don't see any Frida

1022
00:39:39,420 --> 00:39:44,640
anymore because my type a script is not

1023
00:39:42,660 --> 00:39:46,740
listened so I can't see any gadget here

1024
00:39:44,640 --> 00:39:48,930
but I don't care because my if the back

1025
00:39:46,740 --> 00:39:51,359
there worked my script is already loaded

1026
00:39:48,930 --> 00:39:53,359
in the apk well in the application

1027
00:39:51,359 --> 00:39:55,109
that's installed on the device so

1028
00:39:53,359 --> 00:39:58,369
essentially as soon as I click the

1029
00:39:55,109 --> 00:40:02,848
sign-in button as we saw before the

1030
00:39:58,369 --> 00:40:03,839
phishing page is loaded and I didn't

1031
00:40:02,849 --> 00:40:06,360
need to interact with the application

1032
00:40:03,839 --> 00:40:08,040
whatsoever and this works even not on

1033
00:40:06,360 --> 00:40:10,740
local network because you know the

1034
00:40:08,040 --> 00:40:14,120
script is there and you know capture

1035
00:40:10,740 --> 00:40:18,439
creds and the application flow continues

1036
00:40:14,120 --> 00:40:20,339
so okay we saw that we can maybe

1037
00:40:18,440 --> 00:40:21,860
orchestrate or instrument eight the

1038
00:40:20,340 --> 00:40:25,020
application in a way so download

1039
00:40:21,860 --> 00:40:26,670
something malicious I'd say maybe you

1040
00:40:25,020 --> 00:40:29,070
can use for comforter credentials but

1041
00:40:26,670 --> 00:40:32,220
can we get some sort of execution on the

1042
00:40:29,070 --> 00:40:34,410
phone using Frieda ironically you ready

1043
00:40:32,220 --> 00:40:36,060
can if you're a pen tester and you play

1044
00:40:34,410 --> 00:40:39,600
with objection you already know that

1045
00:40:36,060 --> 00:40:42,990
recently there's been a release that

1046
00:40:39,600 --> 00:40:47,190
included a plugin to load metal on iOS

1047
00:40:42,990 --> 00:40:49,319
devices metal is essentially a stateless

1048
00:40:47,190 --> 00:40:51,570
meterpreter shell so it's a small room

1049
00:40:49,320 --> 00:40:53,250
interpreter which works for embedded

1050
00:40:51,570 --> 00:40:57,630
devices which is which are our phones

1051
00:40:53,250 --> 00:40:59,760
right and yeah the way you can do this

1052
00:40:57,630 --> 00:41:01,140
with android so what I wanted to do I

1053
00:40:59,760 --> 00:41:03,420
wanted to post it to Android and while I

1054
00:41:01,140 --> 00:41:06,810
was doing it freida release DC module

1055
00:41:03,420 --> 00:41:08,580
which essentially loads C code on

1056
00:41:06,810 --> 00:41:10,290
runtime with Freda

1057
00:41:08,580 --> 00:41:12,000
so with JavaScript and if you think

1058
00:41:10,290 --> 00:41:15,870
about it C code gives you access to the

1059
00:41:12,000 --> 00:41:18,630
system function so you basically can

1060
00:41:15,870 --> 00:41:21,350
ultimately store metal as a fake config

1061
00:41:18,630 --> 00:41:24,720
or meterpreter whatever and load

1062
00:41:21,350 --> 00:41:27,029
meterpreter through JavaScript through

1063
00:41:24,720 --> 00:41:28,740
Freda using C code and if you use the

1064
00:41:27,030 --> 00:41:33,630
objection you even using that on top of

1065
00:41:28,740 --> 00:41:35,370
Python so bit of mess but essentially as

1066
00:41:33,630 --> 00:41:37,350
I said you can store your meterpreter as

1067
00:41:35,370 --> 00:41:40,890
a comfy dolly so android one care is

1068
00:41:37,350 --> 00:41:42,569
just a file for android you need the

1069
00:41:40,890 --> 00:41:45,509
pool path because when invoke this is

1070
00:41:42,570 --> 00:41:46,950
the seed code it doesn't understand your

1071
00:41:45,510 --> 00:41:49,140
relative path so you need the full path

1072
00:41:46,950 --> 00:41:52,919
you can instruct the do 3des again very

1073
00:41:49,140 --> 00:41:55,080
easily in this way so you just get the

1074
00:41:52,920 --> 00:41:57,690
context of the app and then you get the

1075
00:41:55,080 --> 00:41:59,370
package resource path which is gonna be

1076
00:41:57,690 --> 00:42:00,870
something like this on your device by

1077
00:41:59,370 --> 00:42:02,670
the way I'm using onedrive just because

1078
00:42:00,870 --> 00:42:04,319
it's random you know you can do it with

1079
00:42:02,670 --> 00:42:07,920
any application that can be patched

1080
00:42:04,320 --> 00:42:10,170
which is essentially everything and yeah

1081
00:42:07,920 --> 00:42:12,780
then you need your architecture I was

1082
00:42:10,170 --> 00:42:14,700
using an emulator so it's exciting xt6

1083
00:42:12,780 --> 00:42:17,550
tested on my arm devices and they worked

1084
00:42:14,700 --> 00:42:19,799
fine and then you essentially know that

1085
00:42:17,550 --> 00:42:22,740
metal is gonna be there so you you based

1086
00:42:19,800 --> 00:42:24,840
this script and you have the puffs

1087
00:42:22,740 --> 00:42:28,379
variable that you can invoke the way you

1088
00:42:24,840 --> 00:42:32,370
load C code is again very complicated

1089
00:42:28,380 --> 00:42:35,340
it's just like one big string of C code

1090
00:42:32,370 --> 00:42:37,259
in JavaScript which you know you can

1091
00:42:35,340 --> 00:42:38,910
just include standard libraries and then

1092
00:42:37,260 --> 00:42:41,850
you invoke the system function as I said

1093
00:42:38,910 --> 00:42:43,830
and I'm invoking this weird lip as a

1094
00:42:41,850 --> 00:42:46,259
cell the computer so by century that's

1095
00:42:43,830 --> 00:42:50,000
your methyl slash meterpreter slash any

1096
00:42:46,260 --> 00:42:52,980
binary that you can drop on Android and

1097
00:42:50,000 --> 00:42:55,050
the C module is gonna do the difficult

1098
00:42:52,980 --> 00:42:57,750
job for me I'm just gonna load the code

1099
00:42:55,050 --> 00:43:01,650
on runtime and execute it with the last

1100
00:42:57,750 --> 00:43:04,950
function so I'll show you quickly how it

1101
00:43:01,650 --> 00:43:06,570
works again all automated I'm already

1102
00:43:04,950 --> 00:43:08,939
back touring the app I just want a

1103
00:43:06,570 --> 00:43:12,030
matter P dash I now know session on my

1104
00:43:08,940 --> 00:43:16,320
Metasploit as soon as they open onedrive

1105
00:43:12,030 --> 00:43:19,560
I should get meterpreter shell and just

1106
00:43:16,320 --> 00:43:21,330
confirming my I'm on my Linux host she's

1107
00:43:19,560 --> 00:43:24,240
genymotion is an Android emulator and

1108
00:43:21,330 --> 00:43:26,009
then from here I can execute system

1109
00:43:24,240 --> 00:43:27,660
function funny thing about meterpreter

1110
00:43:26,010 --> 00:43:30,750
took me a while to figure it out that

1111
00:43:27,660 --> 00:43:34,799
when you do shell is looking for being

1112
00:43:30,750 --> 00:43:36,390
SH on a Linux X on a Linux binary but

1113
00:43:34,800 --> 00:43:38,400
because Android store stuff in the

1114
00:43:36,390 --> 00:43:40,290
system being SH that gives you an error

1115
00:43:38,400 --> 00:43:43,260
so I thought that this wasn't working

1116
00:43:40,290 --> 00:43:46,020
for about a week but essentially the way

1117
00:43:43,260 --> 00:43:47,730
you do it is just you execute system bin

1118
00:43:46,020 --> 00:43:49,820
shell which is where the shell is and

1119
00:43:47,730 --> 00:43:53,420
you interact with it so you have an

1120
00:43:49,820 --> 00:43:56,970
Android shell essentially small caveat

1121
00:43:53,420 --> 00:43:59,400
this is basically link to the permission

1122
00:43:56,970 --> 00:44:01,439
or to the context of the application so

1123
00:43:59,400 --> 00:44:03,600
you can do what the application can do

1124
00:44:01,440 --> 00:44:05,640
so if the application has permission

1125
00:44:03,600 --> 00:44:07,319
from your for getting your location you

1126
00:44:05,640 --> 00:44:09,359
can get your location if the permission

1127
00:44:07,320 --> 00:44:10,760
doesn't have permission if the

1128
00:44:09,360 --> 00:44:13,050
application doesn't have permission to

1129
00:44:10,760 --> 00:44:15,510
take photos you're not going to get

1130
00:44:13,050 --> 00:44:18,510
photos unless you change the Android

1131
00:44:15,510 --> 00:44:21,510
manifest before package the apk but I

1132
00:44:18,510 --> 00:44:23,870
would say if you have to do this don't

1133
00:44:21,510 --> 00:44:26,670
change two things too much because

1134
00:44:23,870 --> 00:44:29,009
otherwise it sounds dodgy and you don't

1135
00:44:26,670 --> 00:44:31,500
want to do that so what what what do you

1136
00:44:29,010 --> 00:44:33,280
have most of times application got a lot

1137
00:44:31,500 --> 00:44:38,140
of permission

1138
00:44:33,280 --> 00:44:40,930
so that sorts of conclude my talk I just

1139
00:44:38,140 --> 00:44:43,150
wanted to recap a few things if you're a

1140
00:44:40,930 --> 00:44:45,370
dreamer again mobiles are not to be

1141
00:44:43,150 --> 00:44:47,800
overlooked so include looking at mobile

1142
00:44:45,370 --> 00:44:50,950
apps in your recon phase and think about

1143
00:44:47,800 --> 00:44:53,140
their policies could be very relaxed in

1144
00:44:50,950 --> 00:44:56,290
terms of mobile app for mobile devices

1145
00:44:53,140 --> 00:44:58,000
if you're blue Timur same thing do not

1146
00:44:56,290 --> 00:45:00,220
ignore your mobile infrastructure but

1147
00:44:58,000 --> 00:45:02,530
from a defensive perspective of course

1148
00:45:00,220 --> 00:45:05,410
so harden your mobile app look into

1149
00:45:02,530 --> 00:45:07,390
maybe some anti reversing tools there

1150
00:45:05,410 --> 00:45:08,830
are a few out there by century you don't

1151
00:45:07,390 --> 00:45:11,440
want to store sensing information in the

1152
00:45:08,830 --> 00:45:13,509
code in the first place finally I do

1153
00:45:11,440 --> 00:45:15,370
think that freedom can be used as an

1154
00:45:13,510 --> 00:45:16,930
offensive toolkit rather than a a pen

1155
00:45:15,370 --> 00:45:18,430
testing toolkit because if you think

1156
00:45:16,930 --> 00:45:20,290
about it they're already pre-made script

1157
00:45:18,430 --> 00:45:22,060
for it which can slightly be adjusted

1158
00:45:20,290 --> 00:45:23,259
like the webview a jacket that I show

1159
00:45:22,060 --> 00:45:25,090
today

1160
00:45:23,260 --> 00:45:27,130
they're already powerful frameworks like

1161
00:45:25,090 --> 00:45:28,870
objection that essentially has

1162
00:45:27,130 --> 00:45:31,000
functionality such as the load files

1163
00:45:28,870 --> 00:45:33,190
load files executor brains insist

1164
00:45:31,000 --> 00:45:36,520
command and this sounds like a remote

1165
00:45:33,190 --> 00:45:38,290
access tool kit to me essentially so I

1166
00:45:36,520 --> 00:45:39,880
think there is a potential for an entire

1167
00:45:38,290 --> 00:45:41,920
command and control or mobile

1168
00:45:39,880 --> 00:45:44,200
infrastructure which is entirely built

1169
00:45:41,920 --> 00:45:45,970
on Frida so the concept is you basically

1170
00:45:44,200 --> 00:45:48,189
back down an application with a massive

1171
00:45:45,970 --> 00:45:50,890
javascript file which basically gets a

1172
00:45:48,190 --> 00:45:52,210
shell to the attacker and potentially

1173
00:45:50,890 --> 00:45:54,040
yeah that's how you can factor the

1174
00:45:52,210 --> 00:45:55,660
infrastructure or use them to move

1175
00:45:54,040 --> 00:45:58,150
laterally to grab credentials as I

1176
00:45:55,660 --> 00:46:01,480
showed with the fake login page and so

1177
00:45:58,150 --> 00:46:03,280
forth so on and so forth so yeah that

1178
00:46:01,480 --> 00:46:05,500
concludes my presentation thank you

1179
00:46:03,280 --> 00:46:11,530
everyone for listening and please any

1180
00:46:05,500 --> 00:46:17,440
question thank you are there any

1181
00:46:11,530 --> 00:46:20,410
questions Congress from the presentation

1182
00:46:17,440 --> 00:46:22,990
thank you mentioned many of tools and

1183
00:46:20,410 --> 00:46:25,629
methods and thank you for for that which

1184
00:46:22,990 --> 00:46:27,520
nowadays may work but not sure in the

1185
00:46:25,630 --> 00:46:29,320
future maybe all of the company we were

1186
00:46:27,520 --> 00:46:31,540
vendors will enhance their application

1187
00:46:29,320 --> 00:46:34,480
so my question do you have like a

1188
00:46:31,540 --> 00:46:36,550
research team behind which is testing

1189
00:46:34,480 --> 00:46:39,250
all of these or trying to find other

1190
00:46:36,550 --> 00:46:40,870
method and tools to be yeah you need to

1191
00:46:39,250 --> 00:46:42,730
keep an eye on them because as you said

1192
00:46:40,870 --> 00:46:45,279
some of them might be broken in the

1193
00:46:42,730 --> 00:46:46,960
future let's let's think about iOS you

1194
00:46:45,280 --> 00:46:49,360
know the keychain speed if

1195
00:46:46,960 --> 00:46:51,490
tadam probably impossible so you need to

1196
00:46:49,360 --> 00:46:53,860
keep on a unit but I think in the long

1197
00:46:51,490 --> 00:46:56,529
run you might end up doing essentially

1198
00:46:53,860 --> 00:46:58,330
your test on Frieda because it's pretty

1199
00:46:56,530 --> 00:47:01,120
difficult because it basically runs on

1200
00:46:58,330 --> 00:47:02,799
run time right so even if the device

1201
00:47:01,120 --> 00:47:06,040
itself is protecting you from doing

1202
00:47:02,800 --> 00:47:08,140
things the application is running so if

1203
00:47:06,040 --> 00:47:09,850
you can control the runtime doesn't

1204
00:47:08,140 --> 00:47:11,770
matter what the app is doing you can you

1205
00:47:09,850 --> 00:47:14,290
can see whatever so I do think that in

1206
00:47:11,770 --> 00:47:16,240
the future every not every tool but most

1207
00:47:14,290 --> 00:47:19,120
likely most of them are gonna build

1208
00:47:16,240 --> 00:47:21,879
around Frida so I'll say keep an eye on

1209
00:47:19,120 --> 00:47:36,880
the tool but work on Frida if you can

1210
00:47:21,880 --> 00:47:41,680
because that essentially the future most

1211
00:47:36,880 --> 00:47:44,740
common vulnerabilities okay for mobile

1212
00:47:41,680 --> 00:47:48,399
devices or more applications or devices

1213
00:47:44,740 --> 00:47:52,600
itself well I've looked a few mDM's and

1214
00:47:48,400 --> 00:47:54,340
I'd say the fact that first of all there

1215
00:47:52,600 --> 00:47:58,120
is no control about what you can install

1216
00:47:54,340 --> 00:48:01,240
on the device itself so ideally you want

1217
00:47:58,120 --> 00:48:02,830
to have a restricted Play Store if that

1218
00:48:01,240 --> 00:48:05,140
makes sense so you know the company is

1219
00:48:02,830 --> 00:48:07,900
using just a few application right so

1220
00:48:05,140 --> 00:48:09,730
why do you need random employees to

1221
00:48:07,900 --> 00:48:12,220
install stuff from the Play Store so the

1222
00:48:09,730 --> 00:48:14,650
main thing I'd say is restricting the

1223
00:48:12,220 --> 00:48:16,629
user the end user from installing random

1224
00:48:14,650 --> 00:48:19,770
things from the Play Store say I'll say

1225
00:48:16,630 --> 00:48:22,410
yeah that's the first thing and then

1226
00:48:19,770 --> 00:48:25,480
standard thing that do apply to

1227
00:48:22,410 --> 00:48:27,520
workstations such as passwords you know

1228
00:48:25,480 --> 00:48:30,760
they might not they might allow you to

1229
00:48:27,520 --> 00:48:32,620
put a pin we all know that's vulnerable

1230
00:48:30,760 --> 00:48:35,170
so you know you want to enforce password

1231
00:48:32,620 --> 00:48:37,540
policies or fingerprinting if you accept

1232
00:48:35,170 --> 00:48:39,780
the risk so yeah I'd say those are the

1233
00:48:37,540 --> 00:48:41,410
main the main vulnerabilities or issues

1234
00:48:39,780 --> 00:48:46,330
one more question

1235
00:48:41,410 --> 00:48:50,220
I thank you very much for your

1236
00:48:46,330 --> 00:48:50,220
presentation is very very interesting

1237
00:48:53,130 --> 00:48:58,660
going wrong

1238
00:48:55,569 --> 00:49:11,140
what what did you do about that and how

1239
00:48:58,660 --> 00:49:14,129
the blue team reacted okay yeah yeah I

1240
00:49:11,140 --> 00:49:17,140
did yeah no I did have once where

1241
00:49:14,130 --> 00:49:22,119
essentially there was a very critical

1242
00:49:17,140 --> 00:49:25,390
system that yes that sorry so

1243
00:49:22,119 --> 00:49:28,690
essentially there was a secret injection

1244
00:49:25,390 --> 00:49:30,759
in the login page more specifically in

1245
00:49:28,690 --> 00:49:34,089
the update a forgotten password

1246
00:49:30,759 --> 00:49:37,420
functionality again very excited about

1247
00:49:34,089 --> 00:49:41,019
it didn't think about it and I just

1248
00:49:37,420 --> 00:49:43,930
basically did a forgot password and I

1249
00:49:41,019 --> 00:49:47,109
said for the username or one equal to

1250
00:49:43,930 --> 00:49:48,430
one a password or password now if it's a

1251
00:49:47,109 --> 00:49:51,400
second injection you probably gonna end

1252
00:49:48,430 --> 00:49:53,799
up with insert into database for the

1253
00:49:51,400 --> 00:49:56,319
user or one equal to one which is every

1254
00:49:53,799 --> 00:49:58,449
user password equal password so I

1255
00:49:56,319 --> 00:50:01,869
basically reset the entire database to

1256
00:49:58,449 --> 00:50:03,699
password equal password and funny thing

1257
00:50:01,869 --> 00:50:06,759
after three seconds people are gonna

1258
00:50:03,699 --> 00:50:09,339
receive calls and they're gonna say the

1259
00:50:06,759 --> 00:50:10,509
world run somewhere around you and you

1260
00:50:09,339 --> 00:50:12,430
know they thought they was a run

1261
00:50:10,509 --> 00:50:14,229
somewhere and I was just there sweating

1262
00:50:12,430 --> 00:50:20,828
waiting for the police so yeah there was

1263
00:50:14,229 --> 00:50:23,680
funny day thank you very much for your

1264
00:50:20,829 --> 00:50:26,579
presentation yeah it's really fun thank

1265
00:50:23,680 --> 00:50:26,578
you thanks

