1
00:00:00,030 --> 00:00:04,680
good day everybody so I know that you

2
00:00:02,970 --> 00:00:07,980
are relaxed after the food and now I

3
00:00:04,680 --> 00:00:10,500
have to talk to you about some difficult

4
00:00:07,980 --> 00:00:13,380
technical stuff but I will try to make

5
00:00:10,500 --> 00:00:16,590
it as easy as possible of course I will

6
00:00:13,380 --> 00:00:21,210
talk about technical details so it's a

7
00:00:16,590 --> 00:00:24,180
result of our last research grant it's a

8
00:00:21,210 --> 00:00:27,330
new grant only six months have passed

9
00:00:24,180 --> 00:00:32,460
and this our if to say truce our first

10
00:00:27,330 --> 00:00:34,379
results so let us begin with basic

11
00:00:32,460 --> 00:00:37,040
concept of cryptography and let's cover

12
00:00:34,380 --> 00:00:40,950
them quickly for everybody to follow me

13
00:00:37,040 --> 00:00:43,910
so in cryptography as always we have our

14
00:00:40,950 --> 00:00:48,030
two heroes Alice and Bob

15
00:00:43,910 --> 00:00:50,610
first of all they have to generate the

16
00:00:48,030 --> 00:00:54,390
kill and to share it so Alice generates

17
00:00:50,610 --> 00:00:57,559
it and sends a key to Bob now we are

18
00:00:54,390 --> 00:01:01,320
talking about symmetric cryptography so

19
00:00:57,559 --> 00:01:04,890
private encryption so Alice takes a

20
00:01:01,320 --> 00:01:09,000
message and sends encrypt a message by

21
00:01:04,890 --> 00:01:12,270
means of Hakeem you think them as you

22
00:01:09,000 --> 00:01:15,509
can see no encrypt encryption algorithm

23
00:01:12,270 --> 00:01:18,840
and sends the cipher to Bob okay Bob

24
00:01:15,509 --> 00:01:22,500
received the cipher and as he has the

25
00:01:18,840 --> 00:01:26,390
key he can I will take a lot from here I

26
00:01:22,500 --> 00:01:29,640
think and he can decrypt yes

27
00:01:26,390 --> 00:01:31,890
the cipher by means of his key here we

28
00:01:29,640 --> 00:01:35,070
have mr. hacker that is looking at

29
00:01:31,890 --> 00:01:37,650
cipher and trying to get the information

30
00:01:35,070 --> 00:01:42,089
we say that the scheme is perfect secret

31
00:01:37,650 --> 00:01:44,310
if the hacker when looking at the cipher

32
00:01:42,090 --> 00:01:47,340
doesn't give doesn't get any additional

33
00:01:44,310 --> 00:01:50,159
information about the message soon they

34
00:01:47,340 --> 00:01:52,500
would think that must be true that after

35
00:01:50,159 --> 00:01:54,630
decrypting after decrypting say

36
00:01:52,500 --> 00:01:58,439
encrypted message of course we must get

37
00:01:54,630 --> 00:02:01,140
our message back as I talked about

38
00:01:58,439 --> 00:02:04,559
perfect secrecy one-time pad is a scheme

39
00:02:01,140 --> 00:02:07,110
that has perfect secrecy and it uses XOR

40
00:02:04,560 --> 00:02:10,080
here quickly explained what is sex or

41
00:02:07,110 --> 00:02:13,290
it's a bitwise operation when we saw 0 &

42
00:02:10,080 --> 00:02:17,489
1 we get 1 and when we XOR the same

43
00:02:13,290 --> 00:02:19,798
well you so we get zero so how high in

44
00:02:17,489 --> 00:02:22,230
one time but work with the exam acetal

45
00:02:19,799 --> 00:02:25,439
and bit long which generates a key of

46
00:02:22,230 --> 00:02:28,018
the same size and we just exalt key and

47
00:02:25,439 --> 00:02:31,430
the message to decrypt a message what we

48
00:02:28,019 --> 00:02:34,530
do we just reverse the operation we

49
00:02:31,430 --> 00:02:39,390
exalt key and see now here it's shown

50
00:02:34,530 --> 00:02:42,840
that it really drawn into Gibbs or key 0

51
00:02:39,390 --> 00:02:44,790
and we are left with a message here it

52
00:02:42,840 --> 00:02:46,739
is illustrated how it works and bit key

53
00:02:44,790 --> 00:02:49,739
and bit message and we get and bit

54
00:02:46,739 --> 00:02:52,019
ciphers why it's all good why it's not

55
00:02:49,739 --> 00:02:56,310
used in practice it was used for example

56
00:02:52,019 --> 00:02:58,980
it was a phone line between Washington

57
00:02:56,310 --> 00:03:01,650
DC and Moscow but now it's not local

58
00:02:58,980 --> 00:03:03,810
used in practice because of two big

59
00:03:01,650 --> 00:03:06,090
problems because the size of the key

60
00:03:03,810 --> 00:03:07,620
must be really big because it must be of

61
00:03:06,090 --> 00:03:10,400
the size of the message today in real

62
00:03:07,620 --> 00:03:13,109
life the messages are really big and

63
00:03:10,400 --> 00:03:15,389
it's one time key what does it mean that

64
00:03:13,109 --> 00:03:25,260
it's a cure if we use a key only ones

65
00:03:15,389 --> 00:03:28,889
now here is a little proof that we can

66
00:03:25,260 --> 00:03:30,780
not use say key twice so here is the

67
00:03:28,889 --> 00:03:33,000
first type of the second cipher the

68
00:03:30,780 --> 00:03:35,099
first cipher is got by encrypting the

69
00:03:33,000 --> 00:03:36,930
first message with the key and the

70
00:03:35,099 --> 00:03:39,298
second cipher is God by encrypting the

71
00:03:36,930 --> 00:03:43,069
second message with the same key when we

72
00:03:39,299 --> 00:03:47,579
XOR the ciphers once more key X or key

73
00:03:43,069 --> 00:03:50,069
by exploring q is a key we get 0 and we

74
00:03:47,579 --> 00:03:52,709
are left with a short message so if we

75
00:03:50,069 --> 00:03:55,560
have two ciphers we can just exhort them

76
00:03:52,709 --> 00:03:57,810
and get the sort of the message so we

77
00:03:55,560 --> 00:04:00,930
leak some information about M 1 and M 2

78
00:03:57,810 --> 00:04:03,329
okay we got it but is it significant yes

79
00:04:00,930 --> 00:04:05,970
it is because first of all it's not

80
00:04:03,329 --> 00:04:08,250
longer perfect secret okay it doesn't

81
00:04:05,970 --> 00:04:12,930
seem that it's really serious but we

82
00:04:08,250 --> 00:04:15,750
will see it now also when we XOR m0 and

83
00:04:12,930 --> 00:04:18,090
m1 we see an whereas there be the

84
00:04:15,750 --> 00:04:20,639
messages of the bits differ because if

85
00:04:18,089 --> 00:04:23,810
they differ we will get the 1 X XOR and

86
00:04:20,639 --> 00:04:26,520
if are the same we will get 0 we can

87
00:04:23,810 --> 00:04:28,229
analysis a frequency and all

88
00:04:26,520 --> 00:04:31,799
so exploit the characteristics of a

89
00:04:28,229 --> 00:04:35,729
scale here is ASCII table and what is

90
00:04:31,800 --> 00:04:38,060
interesting here that every letter in

91
00:04:35,729 --> 00:04:43,620
binary bikies with 0 begins with 0 1

92
00:04:38,060 --> 00:04:46,139
every space begins with 0 0 so so if we

93
00:04:43,620 --> 00:04:47,879
XOR to let us quickly we get 0 0 but

94
00:04:46,139 --> 00:04:53,250
when we exhort a letter with a space

95
00:04:47,879 --> 00:04:55,319
what we get we get 0 1 so it's very easy

96
00:04:53,250 --> 00:04:57,419
to tenth if I identify him

97
00:04:55,319 --> 00:05:01,169
when we exhort a letter with a space

98
00:04:57,419 --> 00:05:04,440
here is just a real the little example

99
00:05:01,169 --> 00:05:08,190
for fun we have two ciphers weeks or it

100
00:05:04,440 --> 00:05:12,120
and here is the exhaust that we got here

101
00:05:08,190 --> 00:05:17,060
only 2 bits are shown what it gives us

102
00:05:12,120 --> 00:05:17,060
it gives us the information that we XOR

103
00:05:17,270 --> 00:05:21,990
the space with a letter here because

104
00:05:20,219 --> 00:05:25,710
it's the same that according to messages

105
00:05:21,990 --> 00:05:28,740
like we proved so let us try let us try

106
00:05:25,710 --> 00:05:31,289
to recover them later how we can recover

107
00:05:28,740 --> 00:05:34,199
it for example the XOR of ciphers gave

108
00:05:31,289 --> 00:05:36,840
us this well value we know that this

109
00:05:34,199 --> 00:05:39,870
value is good by exploring the space

110
00:05:36,840 --> 00:05:44,179
with something and exploring back we can

111
00:05:39,870 --> 00:05:47,400
easily identify that it's the letter P

112
00:05:44,180 --> 00:05:50,279
ok as we said that the key must be

113
00:05:47,400 --> 00:05:53,068
really big room for this you have

114
00:05:50,279 --> 00:05:55,259
observed a random number generators how

115
00:05:53,069 --> 00:05:57,569
that works it takes a little seed and

116
00:05:55,259 --> 00:06:02,039
after what enlarge it was a big output

117
00:05:57,569 --> 00:06:06,090
this P so the random number generator I

118
00:06:02,039 --> 00:06:08,400
will call it parent Gian can be used in

119
00:06:06,090 --> 00:06:11,068
one-time pad in this case perfect is a

120
00:06:08,400 --> 00:06:14,880
secrecy we will not have already but we

121
00:06:11,069 --> 00:06:17,759
will have to security but different one

122
00:06:14,880 --> 00:06:20,449
computational one so here's a key we

123
00:06:17,759 --> 00:06:25,680
have n bits the message we have P bits

124
00:06:20,449 --> 00:06:28,710
where P is much more than n we apply the

125
00:06:25,680 --> 00:06:31,529
random number number generator to say n

126
00:06:28,710 --> 00:06:35,039
bit message and after what we XOR the

127
00:06:31,529 --> 00:06:36,990
message who is served okyun and get P

128
00:06:35,039 --> 00:06:39,560
bit ciphertext ok very good

129
00:06:36,990 --> 00:06:44,860
after what we got a revolution

130
00:06:39,560 --> 00:06:47,810
of public encryption here Alex already

131
00:06:44,860 --> 00:06:50,540
generally took is a secret one in public

132
00:06:47,810 --> 00:06:54,830
one the public one she stores in sama

133
00:06:50,540 --> 00:06:56,180
public repository open one and by means

134
00:06:54,830 --> 00:06:58,669
of this public key

135
00:06:56,180 --> 00:07:01,040
Bob stake it and he gripped the message

136
00:06:58,669 --> 00:07:04,099
so everybody can encrypt a message in

137
00:07:01,040 --> 00:07:07,010
this example Bob's Bob Kane and he sends

138
00:07:04,100 --> 00:07:09,410
the encrypted message to Alice and only

139
00:07:07,010 --> 00:07:15,260
Alice can decrypt it why because she has

140
00:07:09,410 --> 00:07:19,180
the secret key eres a is the example of

141
00:07:15,260 --> 00:07:24,860
a public key cryptosystem here Bob

142
00:07:19,180 --> 00:07:29,210
generates the key en is a is a

143
00:07:24,860 --> 00:07:33,080
multiplication of two prime numbers the

144
00:07:29,210 --> 00:07:36,289
public is an Indian security 16 so he

145
00:07:33,080 --> 00:07:39,590
gives the public key to Alice Alice

146
00:07:36,290 --> 00:07:42,590
encrypts the message and afterwards

147
00:07:39,590 --> 00:07:45,530
Bob decrypts it not just however say

148
00:07:42,590 --> 00:07:47,060
blocks let us talk say couple words

149
00:07:45,530 --> 00:07:49,340
about digital signatures because was a

150
00:07:47,060 --> 00:07:51,320
we will use them in the results so it's

151
00:07:49,340 --> 00:07:53,780
a really key technology for making the

152
00:07:51,320 --> 00:07:55,610
Internet and other IT infrastructure

153
00:07:53,780 --> 00:07:59,500
secure they provide a centricity

154
00:07:55,610 --> 00:08:02,090
integrity reputation and day of data so

155
00:07:59,500 --> 00:08:04,700
having the really secure digital

156
00:08:02,090 --> 00:08:09,229
signatures is very very important in

157
00:08:04,700 --> 00:08:11,570
practice for cryptography the signatures

158
00:08:09,229 --> 00:08:16,150
that are used in practice today our RSA

159
00:08:11,570 --> 00:08:19,820
that we just talked about the SI ECDSA

160
00:08:16,150 --> 00:08:22,250
okay we began to walk I want to say once

161
00:08:19,820 --> 00:08:24,020
more that what I am talking today is

162
00:08:22,250 --> 00:08:26,389
postpartum cryptography it's not one to

163
00:08:24,020 --> 00:08:28,820
miss post quantum oh it's the

164
00:08:26,389 --> 00:08:32,299
implementation of neon crypto systems

165
00:08:28,820 --> 00:08:34,458
yes so we began to work on it when we

166
00:08:32,299 --> 00:08:37,189
saw that Google signed a contract with

167
00:08:34,458 --> 00:08:39,679
the wave that they began to create

168
00:08:37,190 --> 00:08:44,380
quantum processes yes that create a

169
00:08:39,679 --> 00:08:47,329
qubit each qubit each couple qubit

170
00:08:44,380 --> 00:08:50,490
double them

171
00:08:47,330 --> 00:08:52,950
calculation speed sauces quantum

172
00:08:50,490 --> 00:08:55,710
processors can make the tasks as

173
00:08:52,950 --> 00:08:58,770
classical the computers cannot and what

174
00:08:55,710 --> 00:09:00,930
they can do they can break our si they

175
00:08:58,770 --> 00:09:03,720
can bake break all the crypto systems

176
00:09:00,930 --> 00:09:06,630
that are based on mathematical problems

177
00:09:03,720 --> 00:09:09,330
and for example our sales based as we

178
00:09:06,630 --> 00:09:11,580
set on factorization problem and it can

179
00:09:09,330 --> 00:09:16,760
break it and as you know si is just

180
00:09:11,580 --> 00:09:19,530
everywhere in other protocols also its

181
00:09:16,760 --> 00:09:21,780
underlying protocol it used an

182
00:09:19,530 --> 00:09:24,689
underlying protocol protected Internet

183
00:09:21,780 --> 00:09:26,610
communication like SSL as well and its

184
00:09:24,690 --> 00:09:30,090
universities in government organizations

185
00:09:26,610 --> 00:09:33,530
and so on so breaking karesse as you can

186
00:09:30,090 --> 00:09:39,420
understand will cause real real house

187
00:09:33,530 --> 00:09:44,329
but now on october 2 mm this is no in

188
00:09:39,420 --> 00:09:47,069
october 23 to ensured we got very

189
00:09:44,330 --> 00:09:50,430
interesting news that google said that

190
00:09:47,070 --> 00:09:53,940
they have reached something called

191
00:09:50,430 --> 00:09:56,339
quantum supremacy so they created a

192
00:09:53,940 --> 00:10:00,000
computer that is called the sycamore

193
00:09:56,340 --> 00:10:03,030
that solve very difficult problems into

194
00:10:00,000 --> 00:10:05,430
and in two hundred seconds when they

195
00:10:03,030 --> 00:10:08,520
compared it to best classical computers

196
00:10:05,430 --> 00:10:10,920
that was released by IBM and it's really

197
00:10:08,520 --> 00:10:14,340
big it's like took two basketball courts

198
00:10:10,920 --> 00:10:20,010
they said that IBM would break it in ten

199
00:10:14,340 --> 00:10:22,260
thousand years so they showed that the

200
00:10:20,010 --> 00:10:23,640
computer is really quantum and he can do

201
00:10:22,260 --> 00:10:26,970
something interesting and by the way

202
00:10:23,640 --> 00:10:30,750
they concretely made random number

203
00:10:26,970 --> 00:10:34,200
generator by means of it okay IBM didn't

204
00:10:30,750 --> 00:10:38,460
like it so much and that I said that

205
00:10:34,200 --> 00:10:42,420
goggle eyes a bit and they don't need

206
00:10:38,460 --> 00:10:45,270
their computer that is called some it

207
00:10:42,420 --> 00:10:48,839
doesn't need 10,000 years for it

208
00:10:45,270 --> 00:10:54,569
it just needs today's and a half and

209
00:10:48,839 --> 00:10:57,140
what Google did is not a big deal we do

210
00:10:54,570 --> 00:10:59,790
have a different result and native's

211
00:10:57,140 --> 00:11:01,010
here's a list of them HP digital

212
00:10:59,790 --> 00:11:03,290
signatures or

213
00:11:01,010 --> 00:11:06,020
based ladies based cryptography

214
00:11:03,290 --> 00:11:07,760
multivariate public-key cryptosystem

215
00:11:06,020 --> 00:11:10,880
last year I was talking about ladies

216
00:11:07,760 --> 00:11:15,170
based but no the integration with hash

217
00:11:10,880 --> 00:11:18,050
and today our results are only connected

218
00:11:15,170 --> 00:11:20,510
to HBase digital signature schemes so

219
00:11:18,050 --> 00:11:23,839
let's talk about them today okay we have

220
00:11:20,510 --> 00:11:24,920
alternatives so what to do more but we

221
00:11:23,840 --> 00:11:26,690
have the problem because these

222
00:11:24,920 --> 00:11:30,050
alternatives are not efficient enough

223
00:11:26,690 --> 00:11:32,780
and they are not safe enough for example

224
00:11:30,050 --> 00:11:35,479
there was a take the successful attempts

225
00:11:32,780 --> 00:11:38,000
implemented by and nail costigan the

226
00:11:35,480 --> 00:11:40,900
student of Dublin City University which

227
00:11:38,000 --> 00:11:45,530
is professor together Michael Scott and

228
00:11:40,900 --> 00:11:48,350
former countries were involved in this

229
00:11:45,530 --> 00:11:52,010
attack and this attack who was able to

230
00:11:48,350 --> 00:11:54,560
recover the key in some 8,000 hour hours

231
00:11:52,010 --> 00:11:56,360
of CPU time what the scientists answered

232
00:11:54,560 --> 00:11:58,880
about it they said that the key wasn't

233
00:11:56,360 --> 00:12:01,790
enough and enlarged it so knew it solid

234
00:11:58,880 --> 00:12:04,430
is a big problem when it's hacked

235
00:12:01,790 --> 00:12:06,310
yeah it's attacked also must be

236
00:12:04,430 --> 00:12:09,020
emphasized that this key system cannot

237
00:12:06,310 --> 00:12:11,599
be used to encrypt the same message

238
00:12:09,020 --> 00:12:14,920
twice and to encrypt the messages when

239
00:12:11,600 --> 00:12:18,350
it's known the correlation between okay

240
00:12:14,920 --> 00:12:21,469
the efficiency spectrum is also very

241
00:12:18,350 --> 00:12:23,990
important in efficient cryptography can

242
00:12:21,470 --> 00:12:28,550
be OK for us but for the servers at

243
00:12:23,990 --> 00:12:30,350
handles 1000 the process per second it

244
00:12:28,550 --> 00:12:33,170
is impossible to have inefficient

245
00:12:30,350 --> 00:12:34,820
cryptography so let us talk as I

246
00:12:33,170 --> 00:12:38,120
promised about hash based digital

247
00:12:34,820 --> 00:12:40,430
signatures as we know it's impossible

248
00:12:38,120 --> 00:12:44,120
it's very important because quantum

249
00:12:40,430 --> 00:12:45,949
computer breaks RSA and other digital

250
00:12:44,120 --> 00:12:48,770
signatures that are based on difficult

251
00:12:45,950 --> 00:12:51,170
mathematical problems and this has

252
00:12:48,770 --> 00:12:54,310
bewitched all signatures there is a use

253
00:12:51,170 --> 00:12:56,750
just a hash function and security is

254
00:12:54,310 --> 00:13:00,979
based on the collision of this hash

255
00:12:56,750 --> 00:13:03,220
function so first of all named for to

256
00:13:00,980 --> 00:13:05,750
defeat one time signature was proposed

257
00:13:03,220 --> 00:13:08,510
there we have signature piece and

258
00:13:05,750 --> 00:13:12,620
verification keys the signature we have

259
00:13:08,510 --> 00:13:14,319
n pair so 2 n signature keys and pairs

260
00:13:12,620 --> 00:13:17,019
of signature piece

261
00:13:14,320 --> 00:13:20,470
by love length n to get the verification

262
00:13:17,019 --> 00:13:24,240
Kim we just apply one by function to it

263
00:13:20,470 --> 00:13:28,509
and here's how it's got and get

264
00:13:24,240 --> 00:13:31,389
verification key okay to science a

265
00:13:28,509 --> 00:13:35,259
message we'll look at the message if the

266
00:13:31,389 --> 00:13:37,660
first bit is zero we takes and we take

267
00:13:35,259 --> 00:13:40,060
the first element from the first pair

268
00:13:37,660 --> 00:13:46,000
and if it's one who takes the second

269
00:13:40,060 --> 00:13:48,819
element this signature length so that we

270
00:13:46,000 --> 00:13:52,329
get is n squared okay to verify the

271
00:13:48,819 --> 00:13:58,120
signature what we do we apply the follow

272
00:13:52,329 --> 00:14:01,599
following equality so we apply one-way

273
00:13:58,120 --> 00:14:04,839
function to our signature and compare it

274
00:14:01,600 --> 00:14:07,899
with hash of our message why - because

275
00:14:04,839 --> 00:14:10,870
the message can be of any size first of

276
00:14:07,899 --> 00:14:15,430
all we hash it to get the N bit message

277
00:14:10,870 --> 00:14:17,380
and are working with it in the indicate

278
00:14:15,430 --> 00:14:21,040
of LAN port to achieve the minimum

279
00:14:17,380 --> 00:14:25,870
security of - to say ATM the total size

280
00:14:21,040 --> 00:14:28,209
of public of the keys must be in 51,200

281
00:14:25,870 --> 00:14:32,019
bits that is 50 times larger than in

282
00:14:28,209 --> 00:14:35,229
there's RSA case and also as I said the

283
00:14:32,019 --> 00:14:36,699
signature length is much bigger than in

284
00:14:35,230 --> 00:14:38,529
the case of RSA

285
00:14:36,699 --> 00:14:41,349
ok we in turn it one time signature

286
00:14:38,529 --> 00:14:43,600
scheme was offered to reduce the size of

287
00:14:41,350 --> 00:14:45,490
the signatures but this one time

288
00:14:43,600 --> 00:14:51,279
signatures some aren't convenient in

289
00:14:45,490 --> 00:14:54,550
practice because too many C's signature

290
00:14:51,279 --> 00:14:57,399
and verification keys yes and was

291
00:14:54,550 --> 00:15:02,380
proposed Merkel a crypto system where I

292
00:14:57,399 --> 00:15:05,139
am the public key was a public area

293
00:15:02,380 --> 00:15:07,209
places all this verification case yes

294
00:15:05,139 --> 00:15:10,930
and the public Ian is the root of the

295
00:15:07,209 --> 00:15:13,689
tree ok how it works

296
00:15:10,930 --> 00:15:16,959
the link of the key of the trillion is

297
00:15:13,690 --> 00:15:19,480
chosen to be H Morrison tool and with

298
00:15:16,960 --> 00:15:23,940
one public it is possible to sign - to

299
00:15:19,480 --> 00:15:27,370
say H documents and are generated XY +

300
00:15:23,940 --> 00:15:30,210
YY signature and verification keys in

301
00:15:27,370 --> 00:15:32,860
the same way like I talked to you on and

302
00:15:30,210 --> 00:15:35,620
afterwards a hash values of this way of

303
00:15:32,860 --> 00:15:38,890
the verification keys are calculated and

304
00:15:35,620 --> 00:15:39,339
we get nodes of the tree now look how it

305
00:15:38,890 --> 00:15:43,300
works

306
00:15:39,339 --> 00:15:45,790
so we hashed this verification keys got

307
00:15:43,300 --> 00:15:50,260
two nodes after what we concatenate Emma

308
00:15:45,790 --> 00:15:52,719
hash the result afterwards so we

309
00:15:50,260 --> 00:15:54,520
concatenate them as the result we got

310
00:15:52,720 --> 00:15:56,950
two result women patent a temp as a

311
00:15:54,520 --> 00:15:57,460
result and like this we go to the upper

312
00:15:56,950 --> 00:15:59,710
node

313
00:15:57,460 --> 00:16:02,320
the only thing what we know that every

314
00:15:59,710 --> 00:16:06,100
right node 4 for example for these nodes

315
00:16:02,320 --> 00:16:10,330
is node is called flatten one so or

316
00:16:06,100 --> 00:16:13,150
authentication also hours this note is a

317
00:16:10,330 --> 00:16:17,890
flattened 40 so every right note is an

318
00:16:13,150 --> 00:16:20,170
latin of the left node okay how it works

319
00:16:17,890 --> 00:16:21,850
oh how the signature generation works

320
00:16:20,170 --> 00:16:25,560
first of all we get the message we hash

321
00:16:21,850 --> 00:16:29,800
it to get n bit message afterwards

322
00:16:25,560 --> 00:16:32,349
afterwards we generate one time

323
00:16:29,800 --> 00:16:35,109
signature by means of LAN port and

324
00:16:32,350 --> 00:16:37,600
internet how we want for we for this we

325
00:16:35,110 --> 00:16:40,690
choose any signature Qian which is we

326
00:16:37,600 --> 00:16:42,910
begin yes after upload a verification

327
00:16:40,690 --> 00:16:46,150
key and our signature is a concatenation

328
00:16:42,910 --> 00:16:48,819
of this one time signature of our public

329
00:16:46,150 --> 00:16:51,189
key what is public is our wrote of this

330
00:16:48,820 --> 00:16:54,520
index or verification key and all these

331
00:16:51,190 --> 00:16:59,800
enosis all these flattened nodes all the

332
00:16:54,520 --> 00:17:04,800
services so every write node as you see

333
00:16:59,800 --> 00:17:12,339
in here we have a lot of a lot of

334
00:17:04,800 --> 00:17:14,859
one-time pcs so so not to generate so

335
00:17:12,339 --> 00:17:17,800
many signature keys was offered to use

336
00:17:14,859 --> 00:17:19,178
save the random number generator so it

337
00:17:17,800 --> 00:17:21,280
will take secede

338
00:17:19,179 --> 00:17:23,839
a by means of the season it will

339
00:17:21,280 --> 00:17:27,769
generate all these branches so

340
00:17:23,839 --> 00:17:31,370
here how it works with ax acid apply to

341
00:17:27,769 --> 00:17:33,529
parent G gets a news gets a new seat and

342
00:17:31,370 --> 00:17:36,918
gets a random number and by means of

343
00:17:33,529 --> 00:17:40,999
this we get all this signature keys so

344
00:17:36,919 --> 00:17:45,529
we use only little only some little

345
00:17:40,999 --> 00:17:46,899
cedar and afterward it was his signature

346
00:17:45,529 --> 00:17:51,350
keys

347
00:17:46,899 --> 00:17:54,559
it must be integrated in two phases

348
00:17:51,350 --> 00:17:56,600
once when we generate the keys and after

349
00:17:54,559 --> 00:18:00,918
what we need once more this signature

350
00:17:56,600 --> 00:18:03,699
keys when we sign the message yes so

351
00:18:00,919 --> 00:18:07,159
what is great help here that we don't

352
00:18:03,700 --> 00:18:10,399
that we don't save so many signature

353
00:18:07,159 --> 00:18:13,879
keys in the memory very big ones we need

354
00:18:10,399 --> 00:18:16,610
to save only one seed but but it has a

355
00:18:13,879 --> 00:18:20,240
problems let's talk about them now um

356
00:18:16,610 --> 00:18:22,008
what are CCS parent jeez there's a third

357
00:18:20,240 --> 00:18:25,789
random number generators that are used

358
00:18:22,009 --> 00:18:28,190
in cryptography that are that are

359
00:18:25,789 --> 00:18:30,440
considered to be secure in cryptography

360
00:18:28,190 --> 00:18:33,919
use for example bloom bloom McCauley and

361
00:18:30,440 --> 00:18:39,710
bloom charge generators are used very

362
00:18:33,919 --> 00:18:42,590
often in cryptography and this CSP and

363
00:18:39,710 --> 00:18:46,190
G's are based on number theory yeah

364
00:18:42,590 --> 00:18:52,029
for example here is the example of how

365
00:18:46,190 --> 00:18:56,149
sha'ban works so he is its next output

366
00:18:52,029 --> 00:18:59,360
box recursively and so we get it from

367
00:18:56,149 --> 00:19:03,139
the previous one and so excite was one

368
00:18:59,360 --> 00:19:08,209
is axis XY squared modern and what is N

369
00:19:03,139 --> 00:19:11,869
and is a product of two prime numbers as

370
00:19:08,210 --> 00:19:14,749
the seed as a seat it it gave ah first

371
00:19:11,869 --> 00:19:19,999
of all is a input it gets as it must

372
00:19:14,749 --> 00:19:23,720
gets a seed and it must get x0 it must

373
00:19:19,999 --> 00:19:26,659
it gets a seed x0 and it must get n the

374
00:19:23,720 --> 00:19:30,950
only very important thing that initial

375
00:19:26,659 --> 00:19:32,250
state x0 x0 must come from true random

376
00:19:30,950 --> 00:19:35,549
number generator

377
00:19:32,250 --> 00:19:37,890
okay there was a article on there where

378
00:19:35,549 --> 00:19:41,010
publish the results that the quantum

379
00:19:37,890 --> 00:19:43,260
computer are able to break this type of

380
00:19:41,010 --> 00:19:45,750
parent chicks concretely they were able

381
00:19:43,260 --> 00:19:48,210
to break blue macaulay appear and

382
00:19:45,750 --> 00:19:50,880
Chilean say attack on it was shown it

383
00:19:48,210 --> 00:19:54,630
was using proper algorithm and it was

384
00:19:50,880 --> 00:19:57,090
able to reveal all the key to recover

385
00:19:54,630 --> 00:19:59,940
all Satyam so this type of attack and

386
00:19:57,090 --> 00:20:03,320
show to us at some this type of parent

387
00:19:59,940 --> 00:20:06,450
cheese that are secured against

388
00:20:03,320 --> 00:20:10,110
classical computers cannot be secured

389
00:20:06,450 --> 00:20:14,330
against quantum computers we offered to

390
00:20:10,110 --> 00:20:18,030
use parent cheese that are based on hash

391
00:20:14,330 --> 00:20:21,299
these parodies are HDPE archean and h

392
00:20:18,030 --> 00:20:23,879
make the bell Jim they are any standards

393
00:20:21,299 --> 00:20:26,100
so they are absolutely secure and they

394
00:20:23,880 --> 00:20:28,650
use a hash function it's very convenient

395
00:20:26,100 --> 00:20:31,020
for us because in our military we use a

396
00:20:28,650 --> 00:20:35,460
hash function we made the comparison of

397
00:20:31,020 --> 00:20:39,950
it and he has deeper Gian is much more

398
00:20:35,460 --> 00:20:44,330
efficient and as we know it must get

399
00:20:39,950 --> 00:20:48,240
really random seed and we decided to

400
00:20:44,330 --> 00:20:51,780
integrate seed that we get from quantum

401
00:20:48,240 --> 00:20:53,909
random random number generator okay what

402
00:20:51,780 --> 00:20:56,639
are quantum random number generators in

403
00:20:53,909 --> 00:20:59,460
1961 the researchers offered to use

404
00:20:56,640 --> 00:21:01,590
quantum phenomena phenomena is a source

405
00:20:59,460 --> 00:21:04,140
of randomness and afterwards they began

406
00:21:01,590 --> 00:21:08,250
to use it a lot to work to work on it a

407
00:21:04,140 --> 00:21:10,289
lot and that I am productive decay was

408
00:21:08,250 --> 00:21:12,990
already particularly accessible source

409
00:21:10,289 --> 00:21:15,270
of true randomness Gregor Muller table

410
00:21:12,990 --> 00:21:17,909
so we're already sensitive enough to

411
00:21:15,270 --> 00:21:20,549
capture and amplify an alpha beta and

412
00:21:17,909 --> 00:21:24,210
gamma radiations know the time mostly

413
00:21:20,549 --> 00:21:28,830
and better radiations was used Oh radio

414
00:21:24,210 --> 00:21:32,610
ok in a Geiger Muller detector a single

415
00:21:28,830 --> 00:21:34,830
particle makes a uni sation effect said

416
00:21:32,610 --> 00:21:35,699
after what is amplified in a Townsend

417
00:21:34,830 --> 00:21:39,510
Avalanche

418
00:21:35,700 --> 00:21:42,600
so so we get a device

419
00:21:39,510 --> 00:21:46,170
that creates a pools for each detected

420
00:21:42,600 --> 00:21:49,850
particles and the time of detection of

421
00:21:46,170 --> 00:21:54,270
this particle is exponential random

422
00:21:49,850 --> 00:21:57,199
variable and the probability of getting

423
00:21:54,270 --> 00:22:04,070
suppose no can be shown by this formula

424
00:21:57,200 --> 00:22:06,210
and must be emphasized and the number of

425
00:22:04,070 --> 00:22:08,669
pulses that occur in concrete time

426
00:22:06,210 --> 00:22:13,050
period follows a Poisson distribution

427
00:22:08,670 --> 00:22:15,990
and we can show experimentally that this

428
00:22:13,050 --> 00:22:19,950
pulses occur in independent time and the

429
00:22:15,990 --> 00:22:22,440
probability of finding sand pulses here

430
00:22:19,950 --> 00:22:27,570
it is where lambda is a mean number of

431
00:22:22,440 --> 00:22:30,990
pulses it acted in 1 second this

432
00:22:27,570 --> 00:22:33,169
chlorine G is based on reject if a

433
00:22:30,990 --> 00:22:35,760
decaying have a lot of common features

434
00:22:33,170 --> 00:22:38,220
mostly all of them have the counters

435
00:22:35,760 --> 00:22:41,940
opened by means of these counters a

436
00:22:38,220 --> 00:22:45,470
random number are the number of pulses

437
00:22:41,940 --> 00:22:50,550
are converted into random numbers oh

438
00:22:45,470 --> 00:22:53,490
when when the device gets the new poles

439
00:22:50,550 --> 00:22:55,919
it raises its counter and in some

440
00:22:53,490 --> 00:22:57,870
concrete time in some concrete time it

441
00:22:55,920 --> 00:23:00,930
resets it to zero

442
00:22:57,870 --> 00:23:05,850
and another important element is timing

443
00:23:00,930 --> 00:23:09,750
with a digital clock if if we say that F

444
00:23:05,850 --> 00:23:12,179
is a frequency of the clock when F is

445
00:23:09,750 --> 00:23:14,790
more than lambda we say that it's a

446
00:23:12,180 --> 00:23:18,590
first clock cause the first clock so it

447
00:23:14,790 --> 00:23:21,930
can rate a lot of pulses in us a lot of

448
00:23:18,590 --> 00:23:24,270
pulses in some concrete time and if F is

449
00:23:21,930 --> 00:23:27,210
less than lambda then we say that a

450
00:23:24,270 --> 00:23:31,670
clock is low the randomness the

451
00:23:27,210 --> 00:23:36,420
randomness in this time in this type of

452
00:23:31,670 --> 00:23:39,050
generators can be converted into random

453
00:23:36,420 --> 00:23:42,750
values in different ways for example

454
00:23:39,050 --> 00:23:44,669
Vincent and E and you see the and

455
00:23:42,750 --> 00:23:49,110
decayed and with an generator used a

456
00:23:44,670 --> 00:23:51,470
fast clock so they get same they get

457
00:23:49,110 --> 00:23:55,949
impulses and afterwards

458
00:23:51,470 --> 00:23:58,560
simple system are converted to random

459
00:23:55,950 --> 00:24:01,290
numbers okay the sequence is not Ram

460
00:23:58,560 --> 00:24:03,899
format but the distribution of the

461
00:24:01,290 --> 00:24:06,930
values must be corrected for example -

462
00:24:03,900 --> 00:24:14,370
meat generator it uses a slope or the

463
00:24:06,930 --> 00:24:22,350
slow clock so when the clock produces a

464
00:24:14,370 --> 00:24:25,800
new poles say the general the generator

465
00:24:22,350 --> 00:24:30,300
increases a number and in some period it

466
00:24:25,800 --> 00:24:34,320
resets it if we need to if we must get

467
00:24:30,300 --> 00:24:38,340
the values from 0 to be minus 1 we just

468
00:24:34,320 --> 00:24:41,639
use modulo operation if we use we equal

469
00:24:38,340 --> 00:24:44,250
to 2 we can get just binary so we can

470
00:24:41,640 --> 00:24:48,810
get 0 and once of course in this case

471
00:24:44,250 --> 00:24:51,600
the distribution is also is also not

472
00:24:48,810 --> 00:24:54,840
uniform but when we take when we use

473
00:24:51,600 --> 00:25:00,090
modification mode operation we get only

474
00:24:54,840 --> 00:25:02,970
a very very small bias okay today almost

475
00:25:00,090 --> 00:25:05,970
all existing quantum random number

476
00:25:02,970 --> 00:25:10,740
generators are based on quantum optics

477
00:25:05,970 --> 00:25:13,440
why because parameters of say light of

478
00:25:10,740 --> 00:25:15,570
the quantum state of the light have very

479
00:25:13,440 --> 00:25:19,010
good rather have a very good property

480
00:25:15,570 --> 00:25:23,669
have very good randomness property so

481
00:25:19,010 --> 00:25:26,490
they give us the opportunity to get very

482
00:25:23,670 --> 00:25:29,340
good implementation for example light

483
00:25:26,490 --> 00:25:32,550
from lasers like light-emitting diodes

484
00:25:29,340 --> 00:25:35,120
and single photons are very very

485
00:25:32,550 --> 00:25:38,370
affordable and convenient alternative of

486
00:25:35,120 --> 00:25:40,610
radioactive material and are wonderful

487
00:25:38,370 --> 00:25:44,250
source source of quantum randomness

488
00:25:40,610 --> 00:25:46,199
today we will use time of arrival

489
00:25:44,250 --> 00:25:49,740
generators and they are the

490
00:25:46,200 --> 00:25:52,920
representatives of optical quantum

491
00:25:49,740 --> 00:25:56,090
random number generators and why we talk

492
00:25:52,920 --> 00:25:59,340
a lot about radioactive decay because

493
00:25:56,090 --> 00:26:02,639
their principal are very cinema similar

494
00:25:59,340 --> 00:26:05,220
to secure and G's that use radioactive

495
00:26:02,640 --> 00:26:08,220
decay ok how do they work

496
00:26:05,220 --> 00:26:13,290
they have a rather weak source of bottle

497
00:26:08,220 --> 00:26:16,620
photons and they have a detector and a

498
00:26:13,290 --> 00:26:20,790
timing secretory that race is a time of

499
00:26:16,620 --> 00:26:23,610
each detection so the detector receives

500
00:26:20,790 --> 00:26:28,040
photon from lab in coherent light and

501
00:26:23,610 --> 00:26:32,459
from the coherent state from a laser and

502
00:26:28,040 --> 00:26:35,730
this time is exponential value we are

503
00:26:32,460 --> 00:26:41,850
just taking we are taking the timing

504
00:26:35,730 --> 00:26:45,090
intervals of getting to of getting two

505
00:26:41,850 --> 00:26:48,120
pulses and afterwards if the first tile

506
00:26:45,090 --> 00:26:51,149
time interval is to zero and the second

507
00:26:48,120 --> 00:26:55,469
one is t1 we takes a difference if tin

508
00:26:51,150 --> 00:26:59,970
t1 is more than t2 zero we assign able

509
00:26:55,470 --> 00:27:03,510
to a bit c1 and in the opposite opposite

510
00:26:59,970 --> 00:27:05,910
case were assigned to it zero of course

511
00:27:03,510 --> 00:27:10,020
there is very little probability that

512
00:27:05,910 --> 00:27:14,310
the 0 will be equal to t1 it were a

513
00:27:10,020 --> 00:27:17,250
small probability but this K about this

514
00:27:14,310 --> 00:27:20,520
cases case we also consider we use it in

515
00:27:17,250 --> 00:27:23,820
our implementation and of course is t1

516
00:27:20,520 --> 00:27:28,620
and t0 are not integer CS they are some

517
00:27:23,820 --> 00:27:33,840
kind of flawed numbers here but we

518
00:27:28,620 --> 00:27:35,729
convert them into integers in 2007 was

519
00:27:33,840 --> 00:27:39,750
offered the first optical quantum random

520
00:27:35,730 --> 00:27:44,730
generation that used time detection it

521
00:27:39,750 --> 00:27:49,740
took photons from select so won't we

522
00:27:44,730 --> 00:27:53,130
offer to use time arrival quantum random

523
00:27:49,740 --> 00:27:56,340
number generator as a seat of hash of

524
00:27:53,130 --> 00:28:02,940
the PRG and here is a schema what we do

525
00:27:56,340 --> 00:28:05,120
own so in the key generation we don't we

526
00:28:02,940 --> 00:28:11,310
don't generate all this excise we just

527
00:28:05,120 --> 00:28:14,310
take one quantum cedar o pass it to the

528
00:28:11,310 --> 00:28:16,669
parent Jian and afterwards get all these

529
00:28:14,310 --> 00:28:20,840
signature keys

530
00:28:16,670 --> 00:28:23,630
all the other processes a Saima and in

531
00:28:20,840 --> 00:28:27,649
the signature phase who we need the

532
00:28:23,630 --> 00:28:29,870
signature kiss once more so we take the

533
00:28:27,650 --> 00:28:34,220
same seed from quantum random number

534
00:28:29,870 --> 00:28:37,489
generators to get the same kiss and by

535
00:28:34,220 --> 00:28:42,440
means of HT branches that is in standard

536
00:28:37,490 --> 00:28:44,240
we get all the signature kiss and the

537
00:28:42,440 --> 00:28:46,400
signature verification is absolutely the

538
00:28:44,240 --> 00:28:48,770
same process because here we don't need

539
00:28:46,400 --> 00:28:51,169
his third random number generators at

540
00:28:48,770 --> 00:28:55,030
all about the security of course the

541
00:28:51,169 --> 00:28:57,559
system is secure because who who what we

542
00:28:55,030 --> 00:29:00,918
changed in the classical MacLean

543
00:28:57,559 --> 00:29:03,320
will only an integrated here the third

544
00:29:00,919 --> 00:29:06,080
random number generator that is quantum

545
00:29:03,320 --> 00:29:08,240
resistant because it uses hash functions

546
00:29:06,080 --> 00:29:12,199
as you will see we use it here we used

547
00:29:08,240 --> 00:29:16,910
here and sha-512 and as I said it gets

548
00:29:12,200 --> 00:29:18,740
really really random seed that is that

549
00:29:16,910 --> 00:29:23,390
is God from quantum random number

550
00:29:18,740 --> 00:29:26,720
generator yeah so we have made the

551
00:29:23,390 --> 00:29:31,179
implementation of it in your familiar

552
00:29:26,720 --> 00:29:37,130
Python separately were made

553
00:29:31,179 --> 00:29:38,990
implementation of oh dear Pacino and of

554
00:29:37,130 --> 00:29:41,890
quantum random number generator here

555
00:29:38,990 --> 00:29:41,890
we're importing same

556
00:29:43,100 --> 00:29:50,760
nothing interesting here as you see we

557
00:29:48,210 --> 00:29:54,300
are getting secede from quantum random

558
00:29:50,760 --> 00:30:00,000
number generator and afterwards we are

559
00:29:54,300 --> 00:30:04,110
passing it to our drbg he it was a key

560
00:30:00,000 --> 00:30:10,160
generation phase in in the signature

561
00:30:04,110 --> 00:30:14,370
phase what we do with the same seed of

562
00:30:10,160 --> 00:30:18,210
the the Arbor Jian we generate a

563
00:30:14,370 --> 00:30:20,610
signature keys and as you can see we use

564
00:30:18,210 --> 00:30:22,950
tuple here and afterwards we are just

565
00:30:20,610 --> 00:30:25,110
deleting it immediately on and as I said

566
00:30:22,950 --> 00:30:28,230
that the time intervals the time

567
00:30:25,110 --> 00:30:29,939
intervals can be the same with very

568
00:30:28,230 --> 00:30:36,360
little probability now we check if they

569
00:30:29,940 --> 00:30:39,480
are the same we just received it here is

570
00:30:36,360 --> 00:30:44,159
an efficiency of the schema it's rather

571
00:30:39,480 --> 00:30:48,780
good it checked for 128-bit message here

572
00:30:44,160 --> 00:30:54,540
is the same byte and implementation of

573
00:30:48,780 --> 00:30:56,940
it that I showed yes it works rather

574
00:30:54,540 --> 00:31:00,480
fast no of course for little signature

575
00:30:56,940 --> 00:31:03,180
and ok that's it that's what we made and

576
00:31:00,480 --> 00:31:11,529
if you have some questions welcome

577
00:31:03,180 --> 00:31:11,529
[Applause]

578
00:31:26,610 --> 00:31:31,649
yeah

579
00:31:28,380 --> 00:31:34,049
okay so for what I understand you use

580
00:31:31,650 --> 00:31:38,039
quantum random number generators to

581
00:31:34,049 --> 00:31:43,350
improve the security of existing

582
00:31:38,039 --> 00:31:47,700
encryption algorithm that is right I use

583
00:31:43,350 --> 00:31:49,289
it to create a seed for certain random

584
00:31:47,700 --> 00:31:52,020
number generator and I do it of course

585
00:31:49,289 --> 00:31:56,390
for made it real for to have it really a

586
00:31:52,020 --> 00:31:59,970
random one okay because if we use a

587
00:31:56,390 --> 00:32:02,130
random key we can decrypt it at the

588
00:31:59,970 --> 00:32:06,270
destination that is the problem so we

589
00:32:02,130 --> 00:32:09,600
cannot use directly key generated by a

590
00:32:06,270 --> 00:32:11,280
quantum random because we cannot decrypt

591
00:32:09,600 --> 00:32:15,299
the message you are absolutely correct

592
00:32:11,280 --> 00:32:17,840
because of it we use it as a seed not

593
00:32:15,299 --> 00:32:20,250
observe the random number generator and

594
00:32:17,840 --> 00:32:21,480
we are using the same seed and

595
00:32:20,250 --> 00:32:24,179
afterwards of the random number

596
00:32:21,480 --> 00:32:26,390
generator gives us the different route

597
00:32:24,179 --> 00:32:30,360
door and amah well is very good question

598
00:32:26,390 --> 00:32:35,130
thank you so so the the nice thing of

599
00:32:30,360 --> 00:32:38,459
that is we can adapt the quantum random

600
00:32:35,130 --> 00:32:48,330
number generator to existing encryption

601
00:32:38,460 --> 00:32:50,789
schemes yes yes okay how it works I have

602
00:32:48,330 --> 00:32:57,480
a question about the actual generation

603
00:32:50,789 --> 00:33:01,770
of the seed do know if there's a

604
00:32:57,480 --> 00:33:08,789
commercial implementation right now for

605
00:33:01,770 --> 00:33:11,970
such what what do you think is the

606
00:33:08,789 --> 00:33:14,908
estimation of the cost oh by the way by

607
00:33:11,970 --> 00:33:17,370
the way said we exist quantum random

608
00:33:14,909 --> 00:33:20,850
number generators I do exist they are

609
00:33:17,370 --> 00:33:24,449
checked and so on so as we said from

610
00:33:20,850 --> 00:33:30,539
1961 I began to use so-called quantum

611
00:33:24,450 --> 00:33:33,500
phenomena to get the randomness so and

612
00:33:30,539 --> 00:33:36,658
what is interesting we are thinking of

613
00:33:33,500 --> 00:33:40,120
buying couple of them and bringing to

614
00:33:36,659 --> 00:33:44,169
your gian for experiments

615
00:33:40,120 --> 00:33:45,668
thank you hi do you have any

616
00:33:44,169 --> 00:33:47,919
implementations that you have done on

617
00:33:45,669 --> 00:33:52,809
hardware security modules with this

618
00:33:47,919 --> 00:33:55,779
schema no no it's a new result it's a

619
00:33:52,809 --> 00:33:57,639
new result that what is done on this a

620
00:33:55,779 --> 00:33:59,470
software implementation for novice so

621
00:33:57,640 --> 00:34:01,330
only software right now for now yes what

622
00:33:59,470 --> 00:34:03,730
do you plan any iteration with any

623
00:34:01,330 --> 00:34:07,720
hardware security module provider I

624
00:34:03,730 --> 00:34:09,820
think yes I think we will try it first

625
00:34:07,720 --> 00:34:11,080
of all we have to bring this quantity to

626
00:34:09,820 --> 00:34:13,240
buy this quantum random number

627
00:34:11,080 --> 00:34:16,179
generators to get the seed from them

628
00:34:13,239 --> 00:34:19,060
afterwards to apply here and see what

629
00:34:16,179 --> 00:34:23,500
how it works something that you see in

630
00:34:19,060 --> 00:34:25,869
the near future I mean if we get the

631
00:34:23,500 --> 00:34:33,339
finances for it okay we are working on

632
00:34:25,869 --> 00:34:38,109
it so I hope that is ok as I understood

633
00:34:33,339 --> 00:34:42,040
you are using quantum seed in PRNG

634
00:34:38,109 --> 00:34:45,609
and can you change the size of the seat

635
00:34:42,040 --> 00:34:50,168
if it's necessary yes yes it's dynamic

636
00:34:45,609 --> 00:34:56,009
here is shown here you can see that I

637
00:34:50,168 --> 00:34:56,009
specifies one minute I will enlarge it

638
00:34:56,280 --> 00:35:12,420
here you can see that I specify the size

639
00:35:00,820 --> 00:35:15,730
and I pass it to the chironji thank you

640
00:35:12,420 --> 00:35:17,020
ok so suppose I do get my hands someday

641
00:35:15,730 --> 00:35:19,000
on a cube RNG

642
00:35:17,020 --> 00:35:24,580
how may I go on and prove that it is

643
00:35:19,000 --> 00:35:27,580
indeed a cubed NGO not that PRNG how it

644
00:35:24,580 --> 00:35:31,089
can be a PNG because it's a hardware and

645
00:35:27,580 --> 00:35:33,069
it's quantum yes use this get to me as a

646
00:35:31,089 --> 00:35:45,880
service so I don't actually get to see

647
00:35:33,070 --> 00:35:47,920
it physically but as I said in 2007 was

648
00:35:45,880 --> 00:35:50,950
over 200 already the first commercial

649
00:35:47,920 --> 00:35:54,330
ones and they are effectively and sold

650
00:35:50,950 --> 00:35:56,589
and the physics pros that is really

651
00:35:54,330 --> 00:36:00,490
quantum random number generator and so

652
00:35:56,590 --> 00:36:03,640
on okay thank you but what about 50

653
00:36:00,490 --> 00:36:05,319
years from now let's say about what 50

654
00:36:03,640 --> 00:36:07,720
years from now when I will be able to

655
00:36:05,320 --> 00:36:10,270
get a generated as a service so that is

656
00:36:07,720 --> 00:36:12,759
a physical appliance how can I simple it

657
00:36:10,270 --> 00:36:15,100
and prove to myself at least that okay

658
00:36:12,760 --> 00:36:18,490
it is 20 quantum and not just appeared

659
00:36:15,100 --> 00:36:21,160
in G or whatever I understand what you

660
00:36:18,490 --> 00:36:24,549
say for example the Google News that I

661
00:36:21,160 --> 00:36:26,859
talked today yes they concretely show

662
00:36:24,550 --> 00:36:30,610
that they created a new random number

663
00:36:26,860 --> 00:36:34,510
generator the quantum one IBM says that

664
00:36:30,610 --> 00:36:36,640
it's not so special as I say but nobody

665
00:36:34,510 --> 00:36:38,770
says that it doesn't that is not quantum

666
00:36:36,640 --> 00:36:41,770
I read a lot of articles a lot of

667
00:36:38,770 --> 00:36:43,920
discussions about it and what experts

668
00:36:41,770 --> 00:36:46,480
say they said that it is a teat

669
00:36:43,920 --> 00:36:49,330
reallocates a quantum one the only

670
00:36:46,480 --> 00:36:53,530
problem that they arethey're that they

671
00:36:49,330 --> 00:36:55,650
are still far away from from

672
00:36:53,530 --> 00:37:00,160
implementing Rover and short summary -

673
00:36:55,650 --> 00:37:02,280
ok thank you so as we see it works thank

674
00:37:00,160 --> 00:37:02,279
you

675
00:37:06,980 --> 00:37:12,410
how is he do you think it would be tween

676
00:37:09,650 --> 00:37:19,339
integrate a quantum number generator

677
00:37:12,410 --> 00:37:21,319
with today's classical computers I think

678
00:37:19,339 --> 00:37:27,078
I think that in any case it will be a

679
00:37:21,320 --> 00:37:29,030
good idea because we can see that a lot

680
00:37:27,079 --> 00:37:32,300
of parents are broken yes

681
00:37:29,030 --> 00:37:34,070
so theoretically of course parts mortise

682
00:37:32,300 --> 00:37:36,500
Grover's algorithm is for now on this

683
00:37:34,070 --> 00:37:38,390
article but we can prove that so a lot

684
00:37:36,500 --> 00:37:41,390
of parents are broken yes

685
00:37:38,390 --> 00:37:44,390
so in any case to have the quantum

686
00:37:41,390 --> 00:37:47,868
randomness in today's scheme is rather

687
00:37:44,390 --> 00:37:49,690
good idea because maybe tomorrow this

688
00:37:47,869 --> 00:37:53,480
quantum computers already a.m.

689
00:37:49,690 --> 00:37:56,510
will be in in practice yes and they will

690
00:37:53,480 --> 00:38:00,920
maybe break our existing parent cheese

691
00:37:56,510 --> 00:38:04,250
and all the stuff IAM how hard would it

692
00:38:00,920 --> 00:38:09,380
be to build a quantum number generator

693
00:38:04,250 --> 00:38:12,500
at home at home I think it will be hard

694
00:38:09,380 --> 00:38:17,140
here but I don't have any I am going to

695
00:38:12,500 --> 00:38:17,140
buy so I don't think that it's too easy

696
00:38:31,990 --> 00:38:42,250
do I know what I didn't hear do you know

697
00:38:35,060 --> 00:38:51,650
in the case 11 device on the market that

698
00:38:42,250 --> 00:38:55,310
benefits of I think no I don't know if

699
00:38:51,650 --> 00:39:00,470
to say truth I don't know if they use it

700
00:38:55,310 --> 00:39:02,270
in some crypto schemes for now mmm for

701
00:39:00,470 --> 00:39:04,578
commercial use I think they don't exist

702
00:39:02,270 --> 00:39:07,069
say there exists on this separate

703
00:39:04,579 --> 00:39:11,980
quantum random number generators but the

704
00:39:07,069 --> 00:39:11,980
whole systems as I know they don't exist

705
00:39:15,609 --> 00:39:22,328
because they can walk see

706
00:39:19,170 --> 00:39:22,329
[Applause]

