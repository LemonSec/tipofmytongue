1
00:00:00,089 --> 00:00:04,920
good one in everyone so my name is Alex

2
00:00:02,429 --> 00:00:07,770
Morozov and let's talk about some

3
00:00:04,920 --> 00:00:10,830
hardcore stuff this morning right so my

4
00:00:07,770 --> 00:00:13,379
presentation is about it when Zach read

5
00:00:10,830 --> 00:00:15,450
evolution and actually how this

6
00:00:13,380 --> 00:00:18,359
evolution changing the defensive

7
00:00:15,450 --> 00:00:20,340
solutions and also changing the minds of

8
00:00:18,359 --> 00:00:24,420
researchers and direction of their

9
00:00:20,340 --> 00:00:27,599
research actually this presentation I

10
00:00:24,420 --> 00:00:31,650
give a keynote on of the on this summer

11
00:00:27,599 --> 00:00:33,899
and then echo party its Argentinian

12
00:00:31,650 --> 00:00:37,170
conference and Buenos Aires invite me

13
00:00:33,899 --> 00:00:40,320
for talk about these problems on Latin

14
00:00:37,170 --> 00:00:43,710
America and after that platform Security

15
00:00:40,320 --> 00:00:46,260
Summit were basically a lot of silicon

16
00:00:43,710 --> 00:00:48,660
vendors and hardware developers been

17
00:00:46,260 --> 00:00:50,399
invited we erase this attention and

18
00:00:48,660 --> 00:00:53,099
awareness about this problem and

19
00:00:50,399 --> 00:00:55,260
basically what kind of solutions we can

20
00:00:53,100 --> 00:00:57,449
develop together and now at Def Jam

21
00:00:55,260 --> 00:01:00,059
it's a really big pleasure for me to be

22
00:00:57,449 --> 00:01:01,949
invited on this stage and opening the

23
00:01:00,059 --> 00:01:06,060
technical talks today on the track one

24
00:01:01,949 --> 00:01:08,039
and let's go about some background about

25
00:01:06,060 --> 00:01:10,619
me so when chief offensive security

26
00:01:08,040 --> 00:01:12,420
researcher at Nvidia focusing mostly

27
00:01:10,619 --> 00:01:14,700
about breaking the stuff and the

28
00:01:12,420 --> 00:01:17,549
hardware and firmware side did a lot of

29
00:01:14,700 --> 00:01:20,460
stuff on malware Research seen before

30
00:01:17,549 --> 00:01:25,409
and also have fun with reverse

31
00:01:20,460 --> 00:01:28,429
engineering more than 20 years how I get

32
00:01:25,409 --> 00:01:32,070
the idea of this presentation and why

33
00:01:28,430 --> 00:01:34,979
actually because I was starting my

34
00:01:32,070 --> 00:01:38,899
career as a reverse engineer I was

35
00:01:34,979 --> 00:01:42,649
involved in a lot of stuff tied to the

36
00:01:38,900 --> 00:01:45,149
Robert rats and as a hardware security

37
00:01:42,649 --> 00:01:48,630
researcher I currently see a lot of

38
00:01:45,149 --> 00:01:53,310
problems and blinding spots for

39
00:01:48,630 --> 00:01:56,789
defensive solutions and actually you

40
00:01:53,310 --> 00:02:00,030
know I get this analogy it's iceberg

41
00:01:56,790 --> 00:02:04,049
right and we have a security industry

42
00:02:00,030 --> 00:02:07,140
visibility point where current endpoints

43
00:02:04,049 --> 00:02:09,379
can detect persistence on the operating

44
00:02:07,140 --> 00:02:11,640
system level we have a lot of

45
00:02:09,378 --> 00:02:12,510
mitigations like a secure boot to

46
00:02:11,640 --> 00:02:14,970
prevent

47
00:02:12,510 --> 00:02:19,439
buton boot treads like a boot kids and

48
00:02:14,970 --> 00:02:22,019
some type of route kids but modern

49
00:02:19,439 --> 00:02:24,060
persistence techniques tied to the

50
00:02:22,019 --> 00:02:26,640
firmware and hardware more and more

51
00:02:24,060 --> 00:02:30,629
especially because we have this stuff

52
00:02:26,640 --> 00:02:33,208
coming in much more other directions

53
00:02:30,629 --> 00:02:35,700
like okay we have it automotive we have

54
00:02:33,209 --> 00:02:39,150
much more devices around our homes now

55
00:02:35,700 --> 00:02:41,159
we have industrial LT and all the

56
00:02:39,150 --> 00:02:43,980
Cotto's and building getting smarter

57
00:02:41,159 --> 00:02:47,629
right and how we can protect from these

58
00:02:43,980 --> 00:02:50,459
threads so basically most of the

59
00:02:47,629 --> 00:02:52,739
defensive solutions nowadays looking on

60
00:02:50,459 --> 00:02:55,650
the traffic looking on some events on

61
00:02:52,739 --> 00:02:58,440
the operating system level but if we go

62
00:02:55,650 --> 00:03:01,200
deeper inside the firmware cardboard

63
00:02:58,440 --> 00:03:06,269
it's nothing there I mean nothing to see

64
00:03:01,200 --> 00:03:07,709
something which is exists let's talk a

65
00:03:06,269 --> 00:03:12,000
bit about evolution of resistance

66
00:03:07,709 --> 00:03:15,329
techniques and I think the mitigations

67
00:03:12,000 --> 00:03:21,629
against malware persistence it's raising

68
00:03:15,329 --> 00:03:25,019
the bar but actually this bar have a

69
00:03:21,629 --> 00:03:27,959
limitation of the complexity because the

70
00:03:25,019 --> 00:03:31,019
bar it's always a minimum level of the

71
00:03:27,959 --> 00:03:37,489
common techniques but it's never cover

72
00:03:31,019 --> 00:03:41,430
everything else we can see here some

73
00:03:37,489 --> 00:03:44,250
evolution and actually how this bar

74
00:03:41,430 --> 00:03:46,859
works we have a root kids and code sign

75
00:03:44,250 --> 00:03:50,090
and policy for kernel models start

76
00:03:46,859 --> 00:03:52,949
blocking this kind of treads boot kids

77
00:03:50,090 --> 00:03:54,870
actually was evolution of the root kids

78
00:03:52,949 --> 00:03:57,540
because they want to bypass the sign and

79
00:03:54,870 --> 00:03:59,459
policy getting execution before the

80
00:03:57,540 --> 00:04:01,888
operating star a system starts and

81
00:03:59,459 --> 00:04:04,049
verify all the drivers right and secure

82
00:04:01,889 --> 00:04:07,829
boot actually was introduced just

83
00:04:04,049 --> 00:04:09,959
because we want operating system have

84
00:04:07,829 --> 00:04:13,620
more visibility on the boot process and

85
00:04:09,959 --> 00:04:15,959
trust the boot chain transition to the

86
00:04:13,620 --> 00:04:18,349
boot loaders of the operating system but

87
00:04:15,959 --> 00:04:22,650
think about the bioship plans and

88
00:04:18,349 --> 00:04:24,539
hardware threads so if we think about of

89
00:04:22,650 --> 00:04:25,950
the evolution of the modern threads it's

90
00:04:24,539 --> 00:04:28,080
always get

91
00:04:25,950 --> 00:04:30,750
to the direction closer and closer to

92
00:04:28,080 --> 00:04:34,950
the card where and firmer side and also

93
00:04:30,750 --> 00:04:40,230
its grow the complexity of stealth

94
00:04:34,950 --> 00:04:44,430
techniques let's talk about the types of

95
00:04:40,230 --> 00:04:46,590
the persistent we have a lot of EDR and

96
00:04:44,430 --> 00:04:49,560
point solution threat hunting tools

97
00:04:46,590 --> 00:04:53,700
manage it response and all of them

98
00:04:49,560 --> 00:04:56,040
mostly focus it on the memory operating

99
00:04:53,700 --> 00:04:59,969
system user mode kernel mode boot

100
00:04:56,040 --> 00:05:02,550
loaders boot sectors but not hardware

101
00:04:59,970 --> 00:05:04,620
and firmware anymore actually not

102
00:05:02,550 --> 00:05:07,260
anymore it's never been focused at there

103
00:05:04,620 --> 00:05:09,750
we have some antivirus solutions which

104
00:05:07,260 --> 00:05:11,670
is used all techniques which is actually

105
00:05:09,750 --> 00:05:13,860
they using on the operating system level

106
00:05:11,670 --> 00:05:15,960
and collecting the data dumping the

107
00:05:13,860 --> 00:05:18,210
former from the operating system but

108
00:05:15,960 --> 00:05:21,180
it's not enough because if you have

109
00:05:18,210 --> 00:05:26,940
implant inside the firmware it can fake

110
00:05:21,180 --> 00:05:30,570
everything else right I was writing this

111
00:05:26,940 --> 00:05:32,460
book and especially we was focusing on

112
00:05:30,570 --> 00:05:34,380
evolution of the treads chapter by

113
00:05:32,460 --> 00:05:36,810
chapter and getting to the firmware

114
00:05:34,380 --> 00:05:40,260
threads to but it's not about the book

115
00:05:36,810 --> 00:05:43,500
it's about this cover art and you can

116
00:05:40,260 --> 00:05:46,320
see here is a cracking and some a little

117
00:05:43,500 --> 00:05:52,920
guy with a board try to escape from the

118
00:05:46,320 --> 00:05:56,130
cracking and it's the truth about this

119
00:05:52,920 --> 00:05:58,640
cover and some idea behind the guy in

120
00:05:56,130 --> 00:06:00,480
support its a malware researcher and

121
00:05:58,640 --> 00:06:03,930
hardware and firmware threads

122
00:06:00,480 --> 00:06:08,160
unfortunately is blind spot just because

123
00:06:03,930 --> 00:06:11,030
for covering this trade landscape you

124
00:06:08,160 --> 00:06:13,830
should have a hardware and silicon level

125
00:06:11,030 --> 00:06:17,250
background to basically understand that

126
00:06:13,830 --> 00:06:18,990
but if you just have a silicon and card

127
00:06:17,250 --> 00:06:20,580
wear and firmware level background and

128
00:06:18,990 --> 00:06:24,480
don't have a malware research background

129
00:06:20,580 --> 00:06:27,030
you basically don't have skills to

130
00:06:24,480 --> 00:06:32,130
detect this traps and this disconnection

131
00:06:27,030 --> 00:06:34,380
create limitations on this threat

132
00:06:32,130 --> 00:06:37,590
landscape for develop the right

133
00:06:34,380 --> 00:06:38,969
solutions but also the hardware industry

134
00:06:37,590 --> 00:06:41,310
it's not very supportive

135
00:06:38,970 --> 00:06:44,600
to provide us the sensor and telemetry

136
00:06:41,310 --> 00:06:49,350
to understand how we can raise some

137
00:06:44,600 --> 00:06:51,750
information to and events to detect this

138
00:06:49,350 --> 00:06:53,610
kind of trends let's talk about the

139
00:06:51,750 --> 00:06:57,210
Golden Age of boot kids and route kids

140
00:06:53,610 --> 00:06:59,640
and mostly it was became understand

141
00:06:57,210 --> 00:07:03,599
scene because the cyber crime actors

142
00:06:59,640 --> 00:07:06,090
want a persistent ghost the main driver

143
00:07:03,600 --> 00:07:08,430
for raising the route kids on a Windows

144
00:07:06,090 --> 00:07:12,679
operating system it was a spam bots and

145
00:07:08,430 --> 00:07:15,990
DDoS bots in the past and actually

146
00:07:12,680 --> 00:07:18,660
state-sponsored actors was kind of like

147
00:07:15,990 --> 00:07:22,050
interested in these techniques to gain

148
00:07:18,660 --> 00:07:26,610
the persistence for the long term on the

149
00:07:22,050 --> 00:07:29,030
infected costs right but golden age of

150
00:07:26,610 --> 00:07:32,730
the firmware and hardware imports

151
00:07:29,030 --> 00:07:35,640
happening right now and you know why

152
00:07:32,730 --> 00:07:39,180
because nobody's seen it but we have

153
00:07:35,640 --> 00:07:46,289
some examples which is actually show us

154
00:07:39,180 --> 00:07:49,980
the problem is exist this picture have a

155
00:07:46,290 --> 00:07:53,850
two sides one side is the researchers

156
00:07:49,980 --> 00:07:56,220
proof of concept and other side it's a

157
00:07:53,850 --> 00:07:59,940
real implant mostly detected in the

158
00:07:56,220 --> 00:08:02,520
world and as we can see it's not a lot

159
00:07:59,940 --> 00:08:05,070
of implants for the firmware was

160
00:08:02,520 --> 00:08:08,010
detected and if you pay attention

161
00:08:05,070 --> 00:08:10,169
most of these threads was known just

162
00:08:08,010 --> 00:08:16,409
because of information leaks hacking

163
00:08:10,169 --> 00:08:19,080
team17 and others but if you look how

164
00:08:16,410 --> 00:08:21,270
many proof of concepts been developed by

165
00:08:19,080 --> 00:08:25,500
the researchers and I think it's a good

166
00:08:21,270 --> 00:08:28,859
proof how these threats can be developed

167
00:08:25,500 --> 00:08:32,010
and really persists in our system

168
00:08:28,860 --> 00:08:35,280
I always actually ask it the question on

169
00:08:32,010 --> 00:08:38,270
my presentation how many people updating

170
00:08:35,280 --> 00:08:41,250
their BIOS firmware on laptops or

171
00:08:38,270 --> 00:08:45,390
workstations after acquiring them from

172
00:08:41,250 --> 00:08:48,870
the market and usually I don't get a lot

173
00:08:45,390 --> 00:08:52,050
of rise at hands because usually we buy

174
00:08:48,870 --> 00:08:56,820
the hardware and forget about that right

175
00:08:52,050 --> 00:09:00,569
so we just work on the operating system

176
00:08:56,820 --> 00:09:06,210
level but other work anything else we

177
00:09:00,570 --> 00:09:07,980
just don't pay attention much and number

178
00:09:06,210 --> 00:09:11,130
of incidents actually with the firmware

179
00:09:07,980 --> 00:09:15,960
increases every year and we can see a

180
00:09:11,130 --> 00:09:18,840
lot of things coming especially on the

181
00:09:15,960 --> 00:09:20,970
hardware side and everybody actually

182
00:09:18,840 --> 00:09:24,120
talking about the supply chain problem

183
00:09:20,970 --> 00:09:29,070
this year especially on shadow primer

184
00:09:24,120 --> 00:09:31,320
from Asus tag because a so stack shadow

185
00:09:29,070 --> 00:09:36,030
hammer shows the software been

186
00:09:31,320 --> 00:09:38,220
compromised its deliver a lot of it can

187
00:09:36,030 --> 00:09:40,770
be deliver a lot of updates for

188
00:09:38,220 --> 00:09:46,200
operating system-level but think about

189
00:09:40,770 --> 00:09:49,980
it's also can update the firmware and if

190
00:09:46,200 --> 00:09:52,740
you inside the firmware you can get a

191
00:09:49,980 --> 00:09:54,810
physical access to the memory you can

192
00:09:52,740 --> 00:09:58,380
compromise a lot of interesting stuff we

193
00:09:54,810 --> 00:10:02,489
will talk about that later but let's

194
00:09:58,380 --> 00:10:05,610
talk about the mitigations so and this

195
00:10:02,490 --> 00:10:07,650
slide actually show how many things we

196
00:10:05,610 --> 00:10:11,670
have on the higher levels of the stack

197
00:10:07,650 --> 00:10:16,199
but honestly on the bias and firmware

198
00:10:11,670 --> 00:10:21,000
level we have a zero visibility and most

199
00:10:16,200 --> 00:10:23,580
of security features which is a card

200
00:10:21,000 --> 00:10:27,420
where vendors provide us as example bias

201
00:10:23,580 --> 00:10:30,480
guard boot guard and others it was

202
00:10:27,420 --> 00:10:34,949
actually weak for many types of attack

203
00:10:30,480 --> 00:10:39,270
and personally myself in the past three

204
00:10:34,950 --> 00:10:42,390
years I was proven on my blackhat talks

205
00:10:39,270 --> 00:10:47,340
boot guard is vulnerable and this year

206
00:10:42,390 --> 00:10:50,060
about the BIOS guard so we don't have

207
00:10:47,340 --> 00:10:54,930
much to prevent the former threads but

208
00:10:50,060 --> 00:10:57,000
think about I like the initiative from

209
00:10:54,930 --> 00:10:59,250
the Apple they've first in the industry

210
00:10:57,000 --> 00:11:02,400
from the operating system developers

211
00:10:59,250 --> 00:11:04,960
released publicly released a tool which

212
00:11:02,400 --> 00:11:08,199
is actually if you use also six it's

213
00:11:04,960 --> 00:11:10,810
installed on every mark if I check

214
00:11:08,200 --> 00:11:14,800
basically what this tool does its

215
00:11:10,810 --> 00:11:17,349
collect the firmware from the operating

216
00:11:14,800 --> 00:11:20,859
system level and check the integrity and

217
00:11:17,350 --> 00:11:22,000
some anomaly settings for for the for

218
00:11:20,860 --> 00:11:24,340
your system firmware

219
00:11:22,000 --> 00:11:30,120
if something wrong it will be raised

220
00:11:24,340 --> 00:11:34,470
some information what is the problem

221
00:11:30,120 --> 00:11:37,660
it's not scale and also scale the

222
00:11:34,470 --> 00:11:40,840
integrity checks release a lot of false

223
00:11:37,660 --> 00:11:43,480
positives because in update process for

224
00:11:40,840 --> 00:11:45,640
millions of the system some something

225
00:11:43,480 --> 00:11:49,750
can go wrong and if you check in the

226
00:11:45,640 --> 00:11:53,650
integrity only one bit change can affect

227
00:11:49,750 --> 00:11:55,690
the integrity check and I talked it with

228
00:11:53,650 --> 00:11:59,620
the Apple folks and actually they have a

229
00:11:55,690 --> 00:12:03,730
lot of a lot of information from the

230
00:11:59,620 --> 00:12:07,660
users but not really a lot of success on

231
00:12:03,730 --> 00:12:11,110
detecting something malicious so other

232
00:12:07,660 --> 00:12:15,040
example its antivirus company which is

233
00:12:11,110 --> 00:12:17,440
basically detect threats and parts you

234
00:12:15,040 --> 00:12:20,310
fight firmware images in the same way

235
00:12:17,440 --> 00:12:22,900
and I think it's one of the first

236
00:12:20,310 --> 00:12:27,000
antivirus engines who start doing that

237
00:12:22,900 --> 00:12:31,050
and it's a good example but my opinion

238
00:12:27,000 --> 00:12:35,470
firmware it's not only like Dixie

239
00:12:31,050 --> 00:12:39,040
drivers which is special executables on

240
00:12:35,470 --> 00:12:44,590
the firmware side for most of modern

241
00:12:39,040 --> 00:12:48,160
computers use a PE format but parsing P

242
00:12:44,590 --> 00:12:49,990
format as you doing for the malicious

243
00:12:48,160 --> 00:12:52,270
threats on the operating system level

244
00:12:49,990 --> 00:12:55,420
doesn't make sense because you will be

245
00:12:52,270 --> 00:12:58,449
losing a lot of specifics and metadata

246
00:12:55,420 --> 00:13:00,699
focus it on the firmware side and I

247
00:12:58,450 --> 00:13:02,680
think modern antivirus engines who

248
00:13:00,700 --> 00:13:06,160
collect the firmware have a lot of data

249
00:13:02,680 --> 00:13:12,189
but they processing not correctly it's

250
00:13:06,160 --> 00:13:14,260
why we don't see much and I collect some

251
00:13:12,190 --> 00:13:18,480
ideas about the challenges and

252
00:13:14,260 --> 00:13:22,319
limitations for antivirus solutions

253
00:13:18,480 --> 00:13:26,490
basically what is can be go wrong and

254
00:13:22,320 --> 00:13:31,050
why it's not a problem solving solution

255
00:13:26,490 --> 00:13:33,600
anyway it's good it's to do something

256
00:13:31,050 --> 00:13:37,290
it's always good you can spot some

257
00:13:33,600 --> 00:13:41,550
threat if you get lucky enough but think

258
00:13:37,290 --> 00:13:45,750
about everything it can be fake after

259
00:13:41,550 --> 00:13:48,750
the system boots if you have BIOS

260
00:13:45,750 --> 00:13:50,820
implant in your system term where it can

261
00:13:48,750 --> 00:13:53,010
disable any endpoint solution on the

262
00:13:50,820 --> 00:13:55,350
operating system level so you will be

263
00:13:53,010 --> 00:13:58,800
don't get anything from your dump right

264
00:13:55,350 --> 00:14:01,590
all the BIOS updates can be reinforce it

265
00:13:58,800 --> 00:14:05,219
or just blocked from the BIOS implant

266
00:14:01,590 --> 00:14:07,320
side it is no trusted path of the

267
00:14:05,220 --> 00:14:09,510
transition from the v5 firmware to

268
00:14:07,320 --> 00:14:12,600
antivirus engine for some telemetry or

269
00:14:09,510 --> 00:14:17,430
cooperation to basically provide trusted

270
00:14:12,600 --> 00:14:20,040
path of events or something and of

271
00:14:17,430 --> 00:14:23,489
course supply chains which is mostly

272
00:14:20,040 --> 00:14:26,969
focused at as example you're buying from

273
00:14:23,490 --> 00:14:29,940
Amazon on any other internet market new

274
00:14:26,970 --> 00:14:33,050
laptop but you not control the way how

275
00:14:29,940 --> 00:14:35,820
they this laptop coming to you and

276
00:14:33,050 --> 00:14:39,030
actually if you not pay attention enough

277
00:14:35,820 --> 00:14:41,520
it's very easy to just open your laptop

278
00:14:39,030 --> 00:14:44,189
we programmed the spy flash with some

279
00:14:41,520 --> 00:14:48,540
malicious stuff and delivered to you but

280
00:14:44,190 --> 00:14:50,610
probably individuals very rare became

281
00:14:48,540 --> 00:14:54,209
targets of these treads but if we talk

282
00:14:50,610 --> 00:14:56,910
about the data centers it's much more

283
00:14:54,210 --> 00:14:59,760
interesting because sometimes it's

284
00:14:56,910 --> 00:15:03,060
hundreds or thousands of new hardware

285
00:14:59,760 --> 00:15:06,240
came in the same moment and how we can

286
00:15:03,060 --> 00:15:11,719
check if something wrong with the

287
00:15:06,240 --> 00:15:15,450
firmware which is a real desire another

288
00:15:11,720 --> 00:15:17,640
interesting idea

289
00:15:15,450 --> 00:15:20,040
it's who watch the Watchers right we

290
00:15:17,640 --> 00:15:25,290
have the card where developers and we

291
00:15:20,040 --> 00:15:28,319
can see it actually last few years a lot

292
00:15:25,290 --> 00:15:30,569
of attacks on silicon level especially

293
00:15:28,320 --> 00:15:34,590
in microarchitecture

294
00:15:30,570 --> 00:15:39,870
and in my opinion it's raised a very

295
00:15:34,590 --> 00:15:43,500
very interesting point we have focused a

296
00:15:39,870 --> 00:15:46,230
lot on the software but nobody pay

297
00:15:43,500 --> 00:15:50,340
attention to the Carver for years and

298
00:15:46,230 --> 00:15:53,130
now we don't have any good solution to

299
00:15:50,340 --> 00:15:55,590
manage how we can trust this hardware

300
00:15:53,130 --> 00:15:58,620
even if it comes from the trusted vendor

301
00:15:55,590 --> 00:16:00,960
because somebody on the fab can

302
00:15:58,620 --> 00:16:03,240
compromised the line of producing

303
00:16:00,960 --> 00:16:11,910
servers for subsidy for specific

304
00:16:03,240 --> 00:16:21,960
customer also buyers became a foundation

305
00:16:11,910 --> 00:16:24,199
for cloud security think about we have a

306
00:16:21,960 --> 00:16:29,520
lot of good examples and even it's

307
00:16:24,200 --> 00:16:32,790
lambda concept besides creamer proof of

308
00:16:29,520 --> 00:16:36,060
concept it's like a PCI board with FPGA

309
00:16:32,790 --> 00:16:40,370
Artic 7 which you can program as a PCIe

310
00:16:36,060 --> 00:16:43,319
device and put on the server and try to

311
00:16:40,370 --> 00:16:47,460
reproduce direct memory access DMA

312
00:16:43,320 --> 00:16:49,020
attack so ok this one is big right so

313
00:16:47,460 --> 00:16:54,120
it's feasible for you if something

314
00:16:49,020 --> 00:16:56,640
appears on on your server but think

315
00:16:54,120 --> 00:17:01,650
about this one

316
00:16:56,640 --> 00:17:05,040
it's a PCIe device with the Artic 7 but

317
00:17:01,650 --> 00:17:08,220
much more smaller and it can actually be

318
00:17:05,040 --> 00:17:10,260
installed on your laptop and how many

319
00:17:08,220 --> 00:17:12,329
people opening their laptops to spot

320
00:17:10,260 --> 00:17:15,240
something after they acquiring the

321
00:17:12,329 --> 00:17:16,290
laptops from the market probably very

322
00:17:15,240 --> 00:17:20,220
close to zero right

323
00:17:16,290 --> 00:17:22,920
because modern laptops became tin and

324
00:17:20,220 --> 00:17:26,640
tin and it's very hard to open and

325
00:17:22,920 --> 00:17:28,920
actually make it beautiful as it wasn't

326
00:17:26,640 --> 00:17:34,560
the beginning without breaking anything

327
00:17:28,920 --> 00:17:36,600
right so this kind of devices it's just

328
00:17:34,560 --> 00:17:40,500
the mainstream devices from the market

329
00:17:36,600 --> 00:17:41,809
but if you think about the attacker

330
00:17:40,500 --> 00:17:44,450
direction

331
00:17:41,809 --> 00:17:49,418
it's a lot of ideas how you can develop

332
00:17:44,450 --> 00:17:49,419
this kind of solution on smaller chips

333
00:17:49,719 --> 00:17:57,590
also many people will be say oh we have

334
00:17:53,840 --> 00:18:01,129
a iommu which is basically we TV

335
00:17:57,590 --> 00:18:04,999
blocking DMA attacks on the boot process

336
00:18:01,129 --> 00:18:08,718
but think about with the technology

337
00:18:04,999 --> 00:18:13,099
developed by Intel is also need to be

338
00:18:08,719 --> 00:18:19,639
initialized on some level but the

339
00:18:13,099 --> 00:18:21,830
fingers power on the platform will be

340
00:18:19,639 --> 00:18:25,189
applied to the devices much earlier and

341
00:18:21,830 --> 00:18:29,960
if your device powered earlier than VDD

342
00:18:25,190 --> 00:18:33,950
is enabled you have pretty big window to

343
00:18:29,960 --> 00:18:38,359
an opportunity for the attack to be

344
00:18:33,950 --> 00:18:41,210
successful me triolic silk show the very

345
00:18:38,359 --> 00:18:44,899
interesting concept with Roush PCI

346
00:18:41,210 --> 00:18:49,129
device and show actually architectural

347
00:18:44,899 --> 00:18:51,468
problem in the framework which is used

348
00:18:49,129 --> 00:18:54,349
for all the farmers on modern platforms

349
00:18:51,469 --> 00:18:58,940
to be developed from Intel it's a decade

350
00:18:54,349 --> 00:19:03,678
tool and honestly in to develop the

351
00:18:58,940 --> 00:19:06,679
patch but touch not solve cool problem I

352
00:19:03,679 --> 00:19:14,029
would say it's prevent particular attack

353
00:19:06,679 --> 00:19:18,859
type which is meat represented in other

354
00:19:14,029 --> 00:19:21,469
case we need more visibility from the

355
00:19:18,859 --> 00:19:24,678
operating systems and operating system

356
00:19:21,469 --> 00:19:26,539
vendors and think about we're talking

357
00:19:24,679 --> 00:19:31,089
about the device health on enterprise

358
00:19:26,539 --> 00:19:34,999
level enterprise level Microsoft

359
00:19:31,089 --> 00:19:37,700
developed Windows device guard which is

360
00:19:34,999 --> 00:19:39,289
actually have a lot of internals and by

361
00:19:37,700 --> 00:19:43,249
the way it's not a lot of information

362
00:19:39,289 --> 00:19:45,799
how many things from the wise guard you

363
00:19:43,249 --> 00:19:47,629
have in your firmware and here is some

364
00:19:45,799 --> 00:19:51,349
which is I spotted on american

365
00:19:47,629 --> 00:19:53,928
megatrends firmer and i think it's a

366
00:19:51,349 --> 00:19:54,470
reference code which is has any firmware

367
00:19:53,929 --> 00:19:57,650
for

368
00:19:54,470 --> 00:19:59,870
modern laptops proposed by Microsoft

369
00:19:57,650 --> 00:20:02,000
basically what they need they need to

370
00:19:59,870 --> 00:20:04,428
understand this transition between

371
00:20:02,000 --> 00:20:07,940
firmware to operating system it was not

372
00:20:04,429 --> 00:20:10,490
fake as example how you know the secure

373
00:20:07,940 --> 00:20:14,000
boot is really enabled you need

374
00:20:10,490 --> 00:20:17,570
basically have some driver executed and

375
00:20:14,000 --> 00:20:20,090
trusted place and support secure boot is

376
00:20:17,570 --> 00:20:24,860
enable it or work in some configuration

377
00:20:20,090 --> 00:20:27,580
and Microsoft did that with a security

378
00:20:24,860 --> 00:20:30,408
testability specification at UCI and

379
00:20:27,580 --> 00:20:33,110
also device guard has a direct feedback

380
00:20:30,409 --> 00:20:35,750
loop from the operating system level I

381
00:20:33,110 --> 00:20:37,850
really wish antivirus vendors and

382
00:20:35,750 --> 00:20:42,500
endpoint solutions will be kept the same

383
00:20:37,850 --> 00:20:46,639
but not all of them have enough power to

384
00:20:42,500 --> 00:20:49,250
push hardware vendors provide this

385
00:20:46,640 --> 00:20:52,940
opportunity to them also very

386
00:20:49,250 --> 00:20:55,789
interesting point Microsoft just not

387
00:20:52,940 --> 00:20:57,470
yesterday I think it was at one day they

388
00:20:55,789 --> 00:21:02,450
announced on their can con friends

389
00:20:57,470 --> 00:21:04,640
ignite about they develop a new ATP

390
00:21:02,450 --> 00:21:07,100
opportunity for hunting firmware threads

391
00:21:04,640 --> 00:21:09,380
at scale which is quite interesting and

392
00:21:07,100 --> 00:21:12,980
they sporting some configuration

393
00:21:09,380 --> 00:21:15,200
problems but what I really wish they

394
00:21:12,980 --> 00:21:19,520
will be not catch only the vulnerable

395
00:21:15,200 --> 00:21:22,309
configurations in supply chain they will

396
00:21:19,520 --> 00:21:24,379
be catch something real and make it

397
00:21:22,309 --> 00:21:26,450
public because we need more information

398
00:21:24,380 --> 00:21:29,210
and visibility about the firmware

399
00:21:26,450 --> 00:21:33,980
threads to gain of our awareness on the

400
00:21:29,210 --> 00:21:37,400
who industry but not all the vendors

401
00:21:33,980 --> 00:21:41,240
actually the same the vendors wide

402
00:21:37,400 --> 00:21:43,490
gigabyte us who stack a stroke MSI they

403
00:21:41,240 --> 00:21:46,580
just don't care about security if you

404
00:21:43,490 --> 00:21:48,919
look on the screenshot it shows some Dom

405
00:21:46,580 --> 00:21:51,168
from the chip sector which is a public

406
00:21:48,919 --> 00:21:55,610
tool for the firmware assessment and it

407
00:21:51,169 --> 00:21:59,360
shows actually the path for read and

408
00:21:55,610 --> 00:22:02,479
write your system firmware in the spy

409
00:21:59,360 --> 00:22:05,539
flash chip it's not protected so you can

410
00:22:02,480 --> 00:22:06,919
even if it's sign that firmware you can

411
00:22:05,539 --> 00:22:10,279
just go

412
00:22:06,919 --> 00:22:16,879
on the back way and right it modified it

413
00:22:10,279 --> 00:22:19,249
and it will be both on another side we

414
00:22:16,879 --> 00:22:21,439
have a lot of limitation for forensics

415
00:22:19,249 --> 00:22:24,139
and reverse engineering because think

416
00:22:21,440 --> 00:22:26,450
about okay we have the full system

417
00:22:24,139 --> 00:22:29,449
simulation YK simek's from Intel

418
00:22:26,450 --> 00:22:34,460
actually bent River but in tow use it a

419
00:22:29,450 --> 00:22:39,470
lot and if we don't provide the hardware

420
00:22:34,460 --> 00:22:41,960
specifics and if I protocols which is

421
00:22:39,470 --> 00:22:44,029
kind of like a API level for the Dixie

422
00:22:41,960 --> 00:22:46,429
driver which I mentioned before it

423
00:22:44,029 --> 00:22:48,830
creates a lot of limitation you can just

424
00:22:46,429 --> 00:22:51,679
take malicious driver and execute on

425
00:22:48,830 --> 00:22:56,629
this environment also you find Malaysian

426
00:22:51,679 --> 00:22:58,999
like qmo have the same problem you can

427
00:22:56,629 --> 00:23:02,418
innovate some basic stuff but if you

428
00:22:58,999 --> 00:23:04,700
don't know what the configuration are on

429
00:23:02,419 --> 00:23:06,769
your particular device or execution

430
00:23:04,700 --> 00:23:10,369
environment you will be not able to

431
00:23:06,769 --> 00:23:14,029
reproduce it hardware level debugging

432
00:23:10,369 --> 00:23:16,999
like a DCI when you can connect USB

433
00:23:14,029 --> 00:23:20,149
dongle to your laptop and debug your

434
00:23:16,999 --> 00:23:22,850
firmware and in the way of connecting to

435
00:23:20,149 --> 00:23:26,590
CPU it's very limited and actually it's

436
00:23:22,850 --> 00:23:29,480
provided mostly for the test and

437
00:23:26,590 --> 00:23:32,449
configuration and QA for the factories

438
00:23:29,480 --> 00:23:34,279
sometimes it's unlocked or it's not

439
00:23:32,450 --> 00:23:38,179
difficult to unlock but it's not a

440
00:23:34,279 --> 00:23:42,080
proper way to go there for forensics

441
00:23:38,179 --> 00:23:47,710
because nobody provide as a legit

442
00:23:42,080 --> 00:23:50,178
solution for that here is actually a

443
00:23:47,710 --> 00:23:59,859
example of debugging system firmware

444
00:23:50,179 --> 00:23:59,859
from from Intel system tools and

445
00:24:00,909 --> 00:24:08,179
actually also titre in solution is very

446
00:24:05,269 --> 00:24:10,970
interesting because some French company

447
00:24:08,179 --> 00:24:13,279
g-train developed the full time travel

448
00:24:10,970 --> 00:24:16,190
debugging for for the whole operating

449
00:24:13,279 --> 00:24:19,909
system and also they've been catching

450
00:24:16,190 --> 00:24:23,869
some very late stages on the digs

451
00:24:19,909 --> 00:24:26,599
you can't actually debug the full system

452
00:24:23,869 --> 00:24:31,249
farmer but you can catch something also

453
00:24:26,599 --> 00:24:33,979
I do pro I actually have a lot of a lot

454
00:24:31,249 --> 00:24:36,319
of features for automatic parsing as

455
00:24:33,979 --> 00:24:40,039
example for the context and the main

456
00:24:36,319 --> 00:24:43,879
functions and initialize some particular

457
00:24:40,039 --> 00:24:47,719
protocols in ufi Dixie drivers which is

458
00:24:43,879 --> 00:24:51,799
good so welcome to the brave new world

459
00:24:47,719 --> 00:24:56,089
and I don't have a good solution but I

460
00:24:51,799 --> 00:24:57,739
have more things to scare you guys you

461
00:24:56,089 --> 00:25:01,908
if I update process

462
00:24:57,739 --> 00:25:05,239
it's a chaos right and if you basically

463
00:25:01,909 --> 00:25:07,929
attack the legit updating tools like I

464
00:25:05,239 --> 00:25:10,869
mentioned before with the shadow hammer

465
00:25:07,929 --> 00:25:13,399
supply chain attack on the auto stack

466
00:25:10,869 --> 00:25:16,189
you can basically flourish the firmware

467
00:25:13,399 --> 00:25:20,768
with a sign a driver without any

468
00:25:16,190 --> 00:25:26,899
antivirus raised in a particular alert

469
00:25:20,769 --> 00:25:30,889
so yes we have a bios guard and we have

470
00:25:26,899 --> 00:25:33,498
some coverage of the sign that firmware

471
00:25:30,889 --> 00:25:36,109
volumes on the spy flash but usually

472
00:25:33,499 --> 00:25:39,589
it's not covered as a full flash and

473
00:25:36,109 --> 00:25:42,619
have some limitations also this

474
00:25:39,589 --> 00:25:45,079
screenshot I really like it because when

475
00:25:42,619 --> 00:25:47,689
you have a large enterprise company with

476
00:25:45,079 --> 00:25:51,379
it thousands of the machines you can't

477
00:25:47,690 --> 00:25:53,899
go and update the buyers manually right

478
00:25:51,379 --> 00:25:57,619
so you can't go and disable a good guard

479
00:25:53,899 --> 00:26:00,198
to do it so you need some way with

480
00:25:57,619 --> 00:26:03,589
Active Directory or other enterprise

481
00:26:00,199 --> 00:26:07,759
tools to make it for all the users in

482
00:26:03,589 --> 00:26:10,759
the same manner and time and this

483
00:26:07,759 --> 00:26:13,669
screenshot showing how boot guard

484
00:26:10,759 --> 00:26:16,729
disable it remotely but what is the

485
00:26:13,669 --> 00:26:19,639
problem here if the system administrator

486
00:26:16,729 --> 00:26:27,459
can disable good guard the attacker also

487
00:26:19,639 --> 00:26:30,619
can right I was try to learn about

488
00:26:27,459 --> 00:26:31,399
generic path of updating the system

489
00:26:30,619 --> 00:26:33,439
firmware

490
00:26:31,399 --> 00:26:35,959
on Microsoft and they have

491
00:26:33,440 --> 00:26:41,540
component firmware update which is very

492
00:26:35,960 --> 00:26:43,580
good idea when you have a generic way to

493
00:26:41,540 --> 00:26:46,909
update the system firmware on the

494
00:26:43,580 --> 00:26:50,439
Windows operating system level what is

495
00:26:46,910 --> 00:26:54,140
the problem here oh if you read

496
00:26:50,440 --> 00:26:57,380
developer to do the charm bar basically

497
00:26:54,140 --> 00:26:59,930
not mandatory should be sign it and you

498
00:26:57,380 --> 00:27:03,530
can deliver unsigned that updates which

499
00:26:59,930 --> 00:27:06,200
is raise some red flag at least for me

500
00:27:03,530 --> 00:27:08,629
because I believe is the firmware not

501
00:27:06,200 --> 00:27:15,100
sign it it can be easily faked it right

502
00:27:08,630 --> 00:27:18,320
or modifier another very good initiative

503
00:27:15,100 --> 00:27:21,590
its Linux vendor firmware service will

504
00:27:18,320 --> 00:27:25,129
be fast and they develop for the Linux

505
00:27:21,590 --> 00:27:27,620
system quite the same way of generic

506
00:27:25,130 --> 00:27:30,470
delivering generic updates for USB

507
00:27:27,620 --> 00:27:31,850
controllers for the system farmers and

508
00:27:30,470 --> 00:27:36,110
it's really good initiative

509
00:27:31,850 --> 00:27:39,260
I talked with Richard hedges recently

510
00:27:36,110 --> 00:27:40,879
and I read this idea about like why

511
00:27:39,260 --> 00:27:43,730
we're not implementing at least

512
00:27:40,880 --> 00:27:46,610
something simpler like a yara rules on

513
00:27:43,730 --> 00:27:48,530
the on the firmware images before it's

514
00:27:46,610 --> 00:27:50,719
getting to the customers it leads to

515
00:27:48,530 --> 00:27:53,510
detect some simple supply chain problems

516
00:27:50,720 --> 00:27:57,380
and he recently implements that and we

517
00:27:53,510 --> 00:28:01,879
see how many problems it appears but

518
00:27:57,380 --> 00:28:06,440
let's talk about actually how you can

519
00:28:01,880 --> 00:28:11,450
really exploit the system with your bias

520
00:28:06,440 --> 00:28:14,510
remotely it's actually quite expensive

521
00:28:11,450 --> 00:28:18,020
because your exploit chain should be

522
00:28:14,510 --> 00:28:20,180
kept something with remote code

523
00:28:18,020 --> 00:28:20,720
execution on the browser office or

524
00:28:20,180 --> 00:28:25,280
something

525
00:28:20,720 --> 00:28:27,230
which is will be basically elevate the

526
00:28:25,280 --> 00:28:31,399
privileges to the kernel mode and kernel

527
00:28:27,230 --> 00:28:33,950
mode actually can talk to some ufi

528
00:28:31,400 --> 00:28:38,200
services directly at least its be

529
00:28:33,950 --> 00:28:43,550
talking about the five or six chain

530
00:28:38,200 --> 00:28:46,880
stages of the chain to get there but if

531
00:28:43,550 --> 00:28:50,480
we think about the LoJack's which is

532
00:28:46,880 --> 00:28:55,760
being discovered last year and a part of

533
00:28:50,480 --> 00:28:59,240
apt 28 they was using some proof of

534
00:28:55,760 --> 00:29:02,240
concepts presented by researchers about

535
00:28:59,240 --> 00:29:09,280
like years ago and it still was working

536
00:29:02,240 --> 00:29:11,510
fine so in the realistic picture this

537
00:29:09,280 --> 00:29:14,600
exploit chain will be not a really

538
00:29:11,510 --> 00:29:17,360
expensive if you go the large scale but

539
00:29:14,600 --> 00:29:22,040
it will be expensive if you want to

540
00:29:17,360 --> 00:29:29,629
attack the particular target and it's

541
00:29:22,040 --> 00:29:33,800
different motivation so and here is the

542
00:29:29,630 --> 00:29:36,170
end point of execution for payload its

543
00:29:33,800 --> 00:29:39,980
SMM it's one of the most privileged yet

544
00:29:36,170 --> 00:29:47,210
most on the x86 system system management

545
00:29:39,980 --> 00:29:50,120
model but think about for modern servers

546
00:29:47,210 --> 00:29:54,560
you don't really need the persistence on

547
00:29:50,120 --> 00:29:56,959
spy flash chip because uptime for the

548
00:29:54,560 --> 00:30:03,740
server it's much longer and even like

549
00:29:56,960 --> 00:30:05,690
newer laptop you don't need like you

550
00:30:03,740 --> 00:30:07,790
don't reboot your system really

551
00:30:05,690 --> 00:30:09,920
frequently right so you just close the

552
00:30:07,790 --> 00:30:12,950
lid and it's go to the sleep or

553
00:30:09,920 --> 00:30:16,360
hibernate state so it's a member an time

554
00:30:12,950 --> 00:30:19,870
persistent I think it's more efficient

555
00:30:16,360 --> 00:30:19,870
than we think about

556
00:30:22,670 --> 00:30:28,910
and why the Golden Age of firmware

557
00:30:26,600 --> 00:30:29,389
hardware appliance is happening right

558
00:30:28,910 --> 00:30:34,640
now

559
00:30:29,390 --> 00:30:38,000
I think the firmware is a new big thing

560
00:30:34,640 --> 00:30:39,890
for the attackers and for the state

561
00:30:38,000 --> 00:30:43,490
sponsor it attackers it's been quite a

562
00:30:39,890 --> 00:30:46,880
while in the game and we have a lot of

563
00:30:43,490 --> 00:30:50,290
problems which is basically should pay

564
00:30:46,880 --> 00:30:53,570
more attention from who industry and

565
00:30:50,290 --> 00:30:58,250
play more awareness on the hardware side

566
00:30:53,570 --> 00:31:02,210
- but main thing nor days everything

567
00:30:58,250 --> 00:31:04,760
goes to the cloud right and think about

568
00:31:02,210 --> 00:31:07,280
in the cloud it's very difficult to

569
00:31:04,760 --> 00:31:09,890
control the supply chain and modern

570
00:31:07,280 --> 00:31:12,260
servers adjust the cloud instance of VM

571
00:31:09,890 --> 00:31:14,210
right it's not really you have your

572
00:31:12,260 --> 00:31:17,840
physical machine anymore you have a

573
00:31:14,210 --> 00:31:20,929
server from the cloud provider but your

574
00:31:17,840 --> 00:31:24,159
instance it's just VM so let's talk

575
00:31:20,929 --> 00:31:28,760
about that a bit because I believe I

576
00:31:24,160 --> 00:31:32,809
believe it's a lot of things can be a

577
00:31:28,760 --> 00:31:35,390
problem there - but before we going talk

578
00:31:32,809 --> 00:31:38,750
about the cloud let's focus on the

579
00:31:35,390 --> 00:31:41,780
persistent classification and I think we

580
00:31:38,750 --> 00:31:44,090
can split the persistent classification

581
00:31:41,780 --> 00:31:47,889
for the firmware threads on two big

582
00:31:44,090 --> 00:31:50,629
groups it's compromised supply chain or

583
00:31:47,890 --> 00:31:52,910
results of exploitation and actually I

584
00:31:50,630 --> 00:31:55,340
think will really cover at most of them

585
00:31:52,910 --> 00:31:57,020
on the previous slide but basically some

586
00:31:55,340 --> 00:32:02,020
compromised supply chain

587
00:31:57,020 --> 00:32:05,360
it's about weak configuration or

588
00:32:02,020 --> 00:32:07,970
somebody intentionally change this

589
00:32:05,360 --> 00:32:10,399
configuration on the voices server to

590
00:32:07,970 --> 00:32:13,669
the data center result of exploitation

591
00:32:10,400 --> 00:32:16,549
it's more about you need a vulnerability

592
00:32:13,669 --> 00:32:19,070
on the system and then basically get

593
00:32:16,549 --> 00:32:22,990
therefore gain persistence in execution

594
00:32:19,070 --> 00:32:25,820
runtime for SMM or something else

595
00:32:22,990 --> 00:32:29,840
problem for most of the vulnerabilities

596
00:32:25,820 --> 00:32:34,070
in the former average time for passion

597
00:32:29,840 --> 00:32:36,050
in 8 6 to 9 months which is a lot right

598
00:32:34,070 --> 00:32:39,710
so it's almost a year you have one

599
00:32:36,050 --> 00:32:42,919
day and it's why even it's a lot of

600
00:32:39,710 --> 00:32:48,950
stages in the chain it can be very cheap

601
00:32:42,920 --> 00:32:50,960
for the attacker also we have a lot of

602
00:32:48,950 --> 00:32:53,510
challenges of understanding the attacker

603
00:32:50,960 --> 00:32:55,850
tactics and creating the road mitigation

604
00:32:53,510 --> 00:32:58,790
in related to mindset and differences

605
00:32:55,850 --> 00:33:01,969
between attacker and architect think

606
00:32:58,790 --> 00:33:04,460
about the security architect thinking

607
00:33:01,970 --> 00:33:08,000
about new mitigation but he never ride

608
00:33:04,460 --> 00:33:11,750
the exploit right or attack - or even

609
00:33:08,000 --> 00:33:14,510
use it it's why offensive security

610
00:33:11,750 --> 00:33:18,140
research it's not equal to just their

611
00:33:14,510 --> 00:33:22,040
usual security research because why a

612
00:33:18,140 --> 00:33:25,850
lot of big companies like Nvidia Intel

613
00:33:22,040 --> 00:33:28,760
Oracle Google and many others try to

614
00:33:25,850 --> 00:33:31,370
have offensive security research team

615
00:33:28,760 --> 00:33:34,540
internally just because they have they

616
00:33:31,370 --> 00:33:37,969
want to develop this expertise and

617
00:33:34,540 --> 00:33:40,850
prevent problems before it goes to the

618
00:33:37,970 --> 00:33:43,280
market and have a more realistic picture

619
00:33:40,850 --> 00:33:46,669
on their mitigation and security

620
00:33:43,280 --> 00:33:49,129
technologies as well and mitigation

621
00:33:46,670 --> 00:33:52,040
design it's actually not equal to

622
00:33:49,130 --> 00:33:54,910
security architecture just because if

623
00:33:52,040 --> 00:33:57,440
you think on one particular attack and

624
00:33:54,910 --> 00:34:00,140
design the mitigation to block one

625
00:33:57,440 --> 00:34:02,690
exploit it doesn't make sense right you

626
00:34:00,140 --> 00:34:06,650
need to develop something which is will

627
00:34:02,690 --> 00:34:10,159
be block entire class of vulnerabilities

628
00:34:06,650 --> 00:34:17,410
and this one it's not easy and it's why

629
00:34:10,159 --> 00:34:19,819
I raise this point here I would say

630
00:34:17,409 --> 00:34:22,149
internal offensive team it's kind of

631
00:34:19,820 --> 00:34:26,030
like a telemetry and which is gained

632
00:34:22,150 --> 00:34:28,040
reality for the company of understanding

633
00:34:26,030 --> 00:34:32,870
of current state of the security for

634
00:34:28,040 --> 00:34:37,239
their technologies let's go back to the

635
00:34:32,870 --> 00:34:40,270
cloud and look on this picture we have

636
00:34:37,239 --> 00:34:44,899
like server machine which is running

637
00:34:40,270 --> 00:34:47,090
some cloud virtual machines and if we

638
00:34:44,900 --> 00:34:49,520
have a protected card where everything

639
00:34:47,090 --> 00:34:53,119
looks good right so everything is green

640
00:34:49,520 --> 00:34:55,520
because we have trusted hardware witches

641
00:34:53,119 --> 00:34:59,590
have trusted secure boot and boot

642
00:34:55,520 --> 00:35:04,240
everything right but if the tracker

643
00:34:59,590 --> 00:35:07,400
target in particular VM instances and

644
00:35:04,240 --> 00:35:11,270
all the VM instances actually have they

645
00:35:07,400 --> 00:35:14,510
are open beer Tobias I was seeing some

646
00:35:11,270 --> 00:35:19,580
problems when enterprise vendor for the

647
00:35:14,510 --> 00:35:22,060
server provide particular instance the

648
00:35:19,580 --> 00:35:25,069
rights to update the system firmware

649
00:35:22,060 --> 00:35:29,240
think about if you compromised one

650
00:35:25,070 --> 00:35:32,630
instance you can go directly to flush

651
00:35:29,240 --> 00:35:34,490
your system firmware but many cases

652
00:35:32,630 --> 00:35:37,369
there is a weight from the external

653
00:35:34,490 --> 00:35:40,250
Network this VM image and other things

654
00:35:37,369 --> 00:35:44,119
for basically not going to happens but

655
00:35:40,250 --> 00:35:46,670
think about if you make this writes for

656
00:35:44,119 --> 00:35:49,250
writing the system firmware for VM image

657
00:35:46,670 --> 00:35:53,420
for one machine that's mean on the

658
00:35:49,250 --> 00:35:56,510
hypervisor level this privilege exists

659
00:35:53,420 --> 00:35:59,990
for others too it's just not exist on

660
00:35:56,510 --> 00:36:02,450
the particular EMS but if you gain in

661
00:35:59,990 --> 00:36:05,149
the weight of privilege with privileges

662
00:36:02,450 --> 00:36:09,200
to the hypervisors you will be able to

663
00:36:05,150 --> 00:36:11,980
attack this path to from any machine so

664
00:36:09,200 --> 00:36:14,029
if you have compromised hardware

665
00:36:11,980 --> 00:36:17,119
everything is gone wrong because

666
00:36:14,030 --> 00:36:19,910
attacker can as example from the system

667
00:36:17,119 --> 00:36:24,710
forever have a direct access to the

668
00:36:19,910 --> 00:36:28,279
memory and we defy VM configuration VM

669
00:36:24,710 --> 00:36:30,619
sales instances or like readed parse it

670
00:36:28,280 --> 00:36:34,670
and find all the vertices and have a

671
00:36:30,619 --> 00:36:37,040
direct access to the memory ok if

672
00:36:34,670 --> 00:36:40,160
cardboard is ok then a system firmware

673
00:36:37,040 --> 00:36:41,960
but if system firmware is ok let's talk

674
00:36:40,160 --> 00:36:45,200
about the guest bias and I think it's

675
00:36:41,960 --> 00:36:49,460
very important and because we don't talk

676
00:36:45,200 --> 00:36:53,689
a lot about that and what I found in the

677
00:36:49,460 --> 00:36:55,940
wild recently the summer spy flash

678
00:36:53,690 --> 00:36:57,880
descriptor on the C bias and the court

679
00:36:55,940 --> 00:37:01,160
board configuration for some large

680
00:36:57,880 --> 00:37:02,510
enterprise linux distribution was not

681
00:37:01,160 --> 00:37:05,089
configured correctly what the

682
00:37:02,510 --> 00:37:07,610
mean basically this vulnerability allow

683
00:37:05,090 --> 00:37:11,030
you even if you have the sign that way

684
00:37:07,610 --> 00:37:13,430
to update your buyers you can basically

685
00:37:11,030 --> 00:37:16,100
with this vulnerability bypass because

686
00:37:13,430 --> 00:37:19,129
flesh descriptor described which regions

687
00:37:16,100 --> 00:37:22,460
you can override and this vulnerability

688
00:37:19,130 --> 00:37:26,750
can allow you to override the spy flash

689
00:37:22,460 --> 00:37:29,450
memory without any permissions actually

690
00:37:26,750 --> 00:37:31,040
here is the permissions given so you

691
00:37:29,450 --> 00:37:35,779
have a permissions if owner ability

692
00:37:31,040 --> 00:37:38,390
exist some of the form words also have a

693
00:37:35,780 --> 00:37:39,110
write protection region problem but it's

694
00:37:38,390 --> 00:37:41,420
easy

695
00:37:39,110 --> 00:37:44,840
gulnur ability to sport not all of them

696
00:37:41,420 --> 00:37:50,060
does this one what is the problem with

697
00:37:44,840 --> 00:37:52,400
the vertol buyers same you have veto

698
00:37:50,060 --> 00:37:54,650
machine introspection but you don't have

699
00:37:52,400 --> 00:37:59,180
a virtual machine bias detection

700
00:37:54,650 --> 00:38:01,640
mechanisms also sometimes I seen it's

701
00:37:59,180 --> 00:38:06,080
just a one time but it was really funny

702
00:38:01,640 --> 00:38:08,240
when one vendor tried to share one

703
00:38:06,080 --> 00:38:11,870
vertebra tween multiple virtual machines

704
00:38:08,240 --> 00:38:13,879
and again escape when I basically attack

705
00:38:11,870 --> 00:38:16,580
the Bertil bias and because it was

706
00:38:13,880 --> 00:38:19,810
accessible to other instances so

707
00:38:16,580 --> 00:38:23,480
basically the file on the file system

708
00:38:19,810 --> 00:38:26,120
its replicate for all the instances if

709
00:38:23,480 --> 00:38:28,400
you modify the file on the file system

710
00:38:26,120 --> 00:38:31,220
you basically can manage to get and any

711
00:38:28,400 --> 00:38:39,860
dirt on machines after it's rebooted it

712
00:38:31,220 --> 00:38:42,500
was fun so yeah she boils and coreboot

713
00:38:39,860 --> 00:38:44,840
by default have a big configuration and

714
00:38:42,500 --> 00:38:47,300
it was a funny situation because I came

715
00:38:44,840 --> 00:38:49,670
to the vendor and say guys you have a

716
00:38:47,300 --> 00:38:52,010
problem and they say oh we use a core

717
00:38:49,670 --> 00:38:55,640
boot so go to the core boot and tell

718
00:38:52,010 --> 00:38:57,770
them we have a problem because they not

719
00:38:55,640 --> 00:39:00,560
configured their security features I

720
00:38:57,770 --> 00:39:02,780
came to Corps boot owners and they say

721
00:39:00,560 --> 00:39:04,880
you know what by default we don't

722
00:39:02,780 --> 00:39:08,210
configure anything we put to the

723
00:39:04,880 --> 00:39:10,130
shoulders of the vendor this type of

724
00:39:08,210 --> 00:39:12,050
configuration for security because it's

725
00:39:10,130 --> 00:39:14,860
not generic and it really depends on the

726
00:39:12,050 --> 00:39:16,160
vendor awareness and a lot of things and

727
00:39:14,860 --> 00:39:19,130
basically

728
00:39:16,160 --> 00:39:23,290
who will be in charge of this problem it

729
00:39:19,130 --> 00:39:23,290
was difficult but we managed to fix it

730
00:39:24,700 --> 00:39:31,730
so and big cloud providers actually have

731
00:39:29,720 --> 00:39:35,750
a lot of technologies like a shielded vm

732
00:39:31,730 --> 00:39:37,940
by Google by Microsoft and Oh actually

733
00:39:35,750 --> 00:39:40,790
shielded VM by Google but are more

734
00:39:37,940 --> 00:39:44,270
advanced by Microsoft and Amazon did

735
00:39:40,790 --> 00:39:46,220
some other thing but in the same

736
00:39:44,270 --> 00:39:48,530
directions that means they try to walked

737
00:39:46,220 --> 00:39:51,799
every machine with configuration and

738
00:39:48,530 --> 00:39:57,950
visible eyes just do not allow you to do

739
00:39:51,800 --> 00:39:59,990
what I just described but still any VM

740
00:39:57,950 --> 00:40:04,189
guest bias it's out of scope for

741
00:39:59,990 --> 00:40:07,430
security solutions other thing which I

742
00:40:04,190 --> 00:40:09,830
want to describe a waste waste board

743
00:40:07,430 --> 00:40:14,210
management controller being seen and

744
00:40:09,830 --> 00:40:17,650
being see it's small chip which is exist

745
00:40:14,210 --> 00:40:20,390
on any server for the remote management

746
00:40:17,650 --> 00:40:24,080
BMC has their oven is their net

747
00:40:20,390 --> 00:40:28,490
controller on the chip and actually it

748
00:40:24,080 --> 00:40:32,480
also can update the BIOS so here's some

749
00:40:28,490 --> 00:40:35,890
links with research than the last year

750
00:40:32,480 --> 00:40:38,720
from Airbus when they managed to gain

751
00:40:35,890 --> 00:40:41,810
remote exploitation exploit on the

752
00:40:38,720 --> 00:40:44,839
operate real-time operating system on

753
00:40:41,810 --> 00:40:47,480
the beam seed and basically update the

754
00:40:44,840 --> 00:40:49,940
system buyers Loveridge the privileges

755
00:40:47,480 --> 00:40:56,050
of BMC

756
00:40:49,940 --> 00:40:59,870
to do so other big problem which is we

757
00:40:56,050 --> 00:41:01,700
everybody talking about but not all of

758
00:40:59,870 --> 00:41:05,299
the people understand the complexity of

759
00:41:01,700 --> 00:41:07,669
the problem is huge so becomes a chip

760
00:41:05,300 --> 00:41:10,810
design company but how many chip design

761
00:41:07,670 --> 00:41:16,970
companies have their oven factory for

762
00:41:10,810 --> 00:41:22,759
basically create the silicon create the

763
00:41:16,970 --> 00:41:28,009
actual chip not a lot right and you send

764
00:41:22,760 --> 00:41:29,250
your design to the fab fab create your

765
00:41:28,010 --> 00:41:31,650
chip

766
00:41:29,250 --> 00:41:34,890
and then basically cheap going back with

767
00:41:31,650 --> 00:41:37,050
some tests first model to the company

768
00:41:34,890 --> 00:41:40,620
who designs it sheep you test it and

769
00:41:37,050 --> 00:41:44,190
then you make a series of basically just

770
00:41:40,620 --> 00:41:48,109
repeat the same chip for many users but

771
00:41:44,190 --> 00:41:51,030
also we have a lot of distributors or

772
00:41:48,110 --> 00:41:53,550
m.i.c vendors I mean when you basically

773
00:41:51,030 --> 00:41:55,650
have some circuit design you have a lot

774
00:41:53,550 --> 00:41:59,550
of components on it right and that's

775
00:41:55,650 --> 00:42:02,160
example if you think any hardware vendor

776
00:41:59,550 --> 00:42:05,040
developed the full platform theirselves

777
00:42:02,160 --> 00:42:08,040
that's not true as example USB

778
00:42:05,040 --> 00:42:11,520
controller always is the third party

779
00:42:08,040 --> 00:42:14,880
which is kept there open farmer in many

780
00:42:11,520 --> 00:42:17,759
cases the platform vendor even doesn't

781
00:42:14,880 --> 00:42:19,770
have access to the source code they just

782
00:42:17,760 --> 00:42:23,520
get a sign at binaries and they trust

783
00:42:19,770 --> 00:42:25,140
them which is create a huge huge hole in

784
00:42:23,520 --> 00:42:28,500
the supply chain

785
00:42:25,140 --> 00:42:31,200
but if you ask me a question why just

786
00:42:28,500 --> 00:42:34,980
because it will be cheaper do not have

787
00:42:31,200 --> 00:42:37,680
access to the source code I really like

788
00:42:34,980 --> 00:42:40,500
the screen because it's described in

789
00:42:37,680 --> 00:42:43,319
very simple picture of the problems in

790
00:42:40,500 --> 00:42:47,810
supply chain and it's been presented on

791
00:42:43,320 --> 00:42:50,340
blue cut Israel by Andrew Quan Bonnie

792
00:42:47,810 --> 00:42:54,660
very great presentation I highly

793
00:42:50,340 --> 00:42:58,550
recommend you guys to work on it another

794
00:42:54,660 --> 00:43:01,710
thing which I just mentioned with USB

795
00:42:58,550 --> 00:43:03,810
controller firmware we really trust

796
00:43:01,710 --> 00:43:07,380
everything which has come from the

797
00:43:03,810 --> 00:43:11,250
vendor and sign it right we don't have

798
00:43:07,380 --> 00:43:16,230
any visibility what is inside and it

799
00:43:11,250 --> 00:43:20,760
became really a huge huge blind spot for

800
00:43:16,230 --> 00:43:22,950
that and cover flake sport Thomas Dooley

801
00:43:20,760 --> 00:43:31,590
and spot this problem and his keynote

802
00:43:22,950 --> 00:43:33,600
a few years ago why actually hardware

803
00:43:31,590 --> 00:43:37,710
vendors don't think about the security

804
00:43:33,600 --> 00:43:41,569
on the first place I would say it's very

805
00:43:37,710 --> 00:43:44,420
difficult but in most of the cases

806
00:43:41,570 --> 00:43:47,930
security for the hardware vendor just a

807
00:43:44,420 --> 00:43:52,150
customer needs so basically they develop

808
00:43:47,930 --> 00:43:57,500
security features to sell more products

809
00:43:52,150 --> 00:44:01,250
so I think here is some interest in

810
00:43:57,500 --> 00:44:04,460
situation where security are not driven

811
00:44:01,250 --> 00:44:10,300
in intention to make device more secure

812
00:44:04,460 --> 00:44:12,980
in real picture and also think about

813
00:44:10,300 --> 00:44:15,740
Manik hardware vendors say oh we have a

814
00:44:12,980 --> 00:44:19,310
technology break it inside inside the

815
00:44:15,740 --> 00:44:22,399
hardware which is protect the user but

816
00:44:19,310 --> 00:44:25,009
sometimes if you go deeper just one bit

817
00:44:22,400 --> 00:44:27,560
in the cardboard ship which is locking

818
00:44:25,010 --> 00:44:30,890
something and they call this security

819
00:44:27,560 --> 00:44:36,460
technology yeah it is but it's not

820
00:44:30,890 --> 00:44:39,080
really hard to break it in many cases I

821
00:44:36,460 --> 00:44:41,870
like this presentation from trauma

822
00:44:39,080 --> 00:44:43,940
Hudson he did this year and it was time

823
00:44:41,870 --> 00:44:46,040
to use time to check attacks on the spy

824
00:44:43,940 --> 00:44:48,590
for a flash chips and bypass the boot

825
00:44:46,040 --> 00:44:52,759
guard technology from window basically

826
00:44:48,590 --> 00:44:56,270
the main idea behind this was okay

827
00:44:52,760 --> 00:44:59,780
because the spy flash chip where our

828
00:44:56,270 --> 00:45:03,259
firmware is stored and BIOS boot guard

829
00:44:59,780 --> 00:45:07,850
is verifying its in its integrity right

830
00:45:03,260 --> 00:45:09,920
but if it's authenticated once that

831
00:45:07,850 --> 00:45:12,860
doesn't mean we should trust it forever

832
00:45:09,920 --> 00:45:16,010
what that's mean exactly after the

833
00:45:12,860 --> 00:45:19,100
system boots good guard never back to

834
00:45:16,010 --> 00:45:21,500
recheck the firmware integrity or its

835
00:45:19,100 --> 00:45:24,890
check on very early stage and you can

836
00:45:21,500 --> 00:45:27,080
fight a fake it if you have a ability to

837
00:45:24,890 --> 00:45:27,950
write physically on spy flash chip other

838
00:45:27,080 --> 00:45:30,920
regions

839
00:45:27,950 --> 00:45:34,520
it's what actually trauma proof and here

840
00:45:30,920 --> 00:45:37,310
is a link on his presentation other

841
00:45:34,520 --> 00:45:40,640
thing I don't know how many people is

842
00:45:37,310 --> 00:45:43,100
aware but any Intel firmware have a lot

843
00:45:40,640 --> 00:45:48,290
of binary blobs called identification

844
00:45:43,100 --> 00:45:50,830
code models which is x86 code and it's

845
00:45:48,290 --> 00:45:54,540
executed before a parading system start

846
00:45:50,830 --> 00:45:58,680
mainly but some of them even later

847
00:45:54,540 --> 00:46:00,900
so and it's not covered by a boot guard

848
00:45:58,680 --> 00:46:03,419
because it's executed very early even

849
00:46:00,900 --> 00:46:07,740
before boot guard started the same thing

850
00:46:03,420 --> 00:46:10,620
about the microcode and I think it's

851
00:46:07,740 --> 00:46:13,970
raised interesting point about downgrade

852
00:46:10,620 --> 00:46:18,000
attacks right so if it's not protected

853
00:46:13,970 --> 00:46:20,339
why we not don't great microcode or ACMs

854
00:46:18,000 --> 00:46:23,450
with vulnerabilities which we already

855
00:46:20,340 --> 00:46:28,020
know and try to attack it and run time

856
00:46:23,450 --> 00:46:30,210
so I think this problem was cover it

857
00:46:28,020 --> 00:46:34,140
original hikers to hikers conferences

858
00:46:30,210 --> 00:46:37,830
few weeks ago by Alex yermolov in San

859
00:46:34,140 --> 00:46:40,290
Paulo and I think if slides will be

860
00:46:37,830 --> 00:46:42,540
public soon so you can learn more about

861
00:46:40,290 --> 00:46:45,060
that we have this discussion on Twitter

862
00:46:42,540 --> 00:46:48,240
where exactly I was talking about the

863
00:46:45,060 --> 00:46:51,240
downgrade directions and he spots this

864
00:46:48,240 --> 00:47:00,200
vulnerability and report to Intel and it

865
00:46:51,240 --> 00:47:04,439
was real so and I think one more point

866
00:47:00,200 --> 00:47:10,080
we should always keep in mind the code

867
00:47:04,440 --> 00:47:11,970
signing is really only one thing we

868
00:47:10,080 --> 00:47:19,290
should have to control our term worse

869
00:47:11,970 --> 00:47:22,410
and it's not enough third party

870
00:47:19,290 --> 00:47:24,750
component so it's a part of supply chain

871
00:47:22,410 --> 00:47:30,379
hell and we talk just few slides ago

872
00:47:24,750 --> 00:47:34,520
about that any any new chip on your

873
00:47:30,380 --> 00:47:37,500
hardware can extend attack your face and

874
00:47:34,520 --> 00:47:40,470
security boundaries usually built around

875
00:47:37,500 --> 00:47:42,720
one chip but not building around full

876
00:47:40,470 --> 00:47:45,230
platform and this point it will be for

877
00:47:42,720 --> 00:47:49,290
my keynote and 0 nights on the next week

878
00:47:45,230 --> 00:47:54,570
but for good picture on it I think TPM

879
00:47:49,290 --> 00:47:56,759
root of problems because Jeremy boon was

880
00:47:54,570 --> 00:47:59,970
sporting you fight genie when you can

881
00:47:56,760 --> 00:48:02,340
have a man-in-the-middle attack on the

882
00:47:59,970 --> 00:48:04,950
communication channel between TPM chip

883
00:48:02,340 --> 00:48:07,720
and the system firmware and trommel cuts

884
00:48:04,950 --> 00:48:13,000
and just solder some wires directly

885
00:48:07,720 --> 00:48:18,069
to use TPM and Fayed something for

886
00:48:13,000 --> 00:48:19,810
system firmware to major vendors try to

887
00:48:18,070 --> 00:48:22,750
fix the root of trust with their own

888
00:48:19,810 --> 00:48:26,859
chips apple vista to Google with Titan

889
00:48:22,750 --> 00:48:30,040
Microsoft with Cerberus and Amazon with

890
00:48:26,859 --> 00:48:33,580
green grass but problem it's still a

891
00:48:30,040 --> 00:48:35,890
chip on the platform it has a traces to

892
00:48:33,580 --> 00:48:40,000
communicate with other components and

893
00:48:35,890 --> 00:48:46,960
attack surface is quite big there anyway

894
00:48:40,000 --> 00:48:50,230
and my point is if we say like we have

895
00:48:46,960 --> 00:48:53,260
the chip which is now wake root of trust

896
00:48:50,230 --> 00:48:54,790
inside the card where I don't think it

897
00:48:53,260 --> 00:48:58,210
solve everything

898
00:48:54,790 --> 00:49:01,180
still it's verifying the boot but not

899
00:48:58,210 --> 00:49:03,880
solve as example runtime exploitation so

900
00:49:01,180 --> 00:49:07,348
for the secure boot I would say it's a

901
00:49:03,880 --> 00:49:11,970
game changing in many cases but not for

902
00:49:07,349 --> 00:49:16,380
everything in terms of firmware security

903
00:49:11,970 --> 00:49:20,740
also Google just recently two days ago

904
00:49:16,380 --> 00:49:24,190
open source their Titan chip and silicon

905
00:49:20,740 --> 00:49:26,049
with RTL and the firmware is available

906
00:49:24,190 --> 00:49:29,050
what I would say it's a bit different

907
00:49:26,050 --> 00:49:31,750
than they use on their servers but it's

908
00:49:29,050 --> 00:49:38,940
really big step for open computing and

909
00:49:31,750 --> 00:49:42,490
this design is quite good so main point

910
00:49:38,940 --> 00:49:46,599
any hardware vendors doesn't have full

911
00:49:42,490 --> 00:49:49,118
control on their supply chains and a lot

912
00:49:46,599 --> 00:49:53,400
of third parties wineries blog can

913
00:49:49,119 --> 00:49:55,690
create huge problem for security

914
00:49:53,400 --> 00:49:58,359
operation shadow crimer we spotted

915
00:49:55,690 --> 00:50:01,480
multiple times in our representation I

916
00:49:58,359 --> 00:50:04,810
will be just leave this wide but what I

917
00:50:01,480 --> 00:50:07,780
want to say researcher arm raised really

918
00:50:04,810 --> 00:50:10,390
continuance not it never stops because

919
00:50:07,780 --> 00:50:13,780
we have a lot of problems and for

920
00:50:10,390 --> 00:50:17,020
creating meaningful solutions for these

921
00:50:13,780 --> 00:50:19,839
problems we really need to go deep with

922
00:50:17,020 --> 00:50:20,970
these vulnerabilities inside the

923
00:50:19,839 --> 00:50:25,710
hardware

924
00:50:20,970 --> 00:50:29,189
and create good security solution but

925
00:50:25,710 --> 00:50:31,619
without who industry awareness I don't

926
00:50:29,190 --> 00:50:34,920
think it's possible what we do in the

927
00:50:31,619 --> 00:50:36,900
steps in this direction together thank

928
00:50:34,920 --> 00:50:43,440
you very much for your attention and I

929
00:50:36,900 --> 00:50:45,780
think it's it for today I hope I have

930
00:50:43,440 --> 00:50:49,250
some time for this equation and for the

931
00:50:45,780 --> 00:50:51,869
best question I will give away this book

932
00:50:49,250 --> 00:50:55,140
thank you we do have time for two

933
00:50:51,869 --> 00:50:56,550
questions so let's try to make it super

934
00:50:55,140 --> 00:50:59,040
effective plus you get one of these

935
00:50:56,550 --> 00:51:01,079
heads along with that likes this book so

936
00:50:59,040 --> 00:51:04,950
we're gonna pass it around just yeah we

937
00:51:01,079 --> 00:51:08,730
have one over here can we get a mic it's

938
00:51:04,950 --> 00:51:10,950
coming okay hi thanks for the

939
00:51:08,730 --> 00:51:13,380
presentation so my question is a bit

940
00:51:10,950 --> 00:51:16,500
more general in the sense the do you

941
00:51:13,380 --> 00:51:19,170
think as an industry some of these

942
00:51:16,500 --> 00:51:21,930
issues are because of a perception

943
00:51:19,170 --> 00:51:24,630
problem where we treat like hardware

944
00:51:21,930 --> 00:51:26,730
informer or former in particular

945
00:51:24,630 --> 00:51:28,920
different than software because we call

946
00:51:26,730 --> 00:51:30,960
it former but actually it's software and

947
00:51:28,920 --> 00:51:32,819
everything is software and when you

948
00:51:30,960 --> 00:51:35,670
think about like you mentioned paste bad

949
00:51:32,819 --> 00:51:39,509
management controllers or Intel ME Intel

950
00:51:35,670 --> 00:51:41,550
AMT which are basically operating system

951
00:51:39,510 --> 00:51:43,950
operating systems running alongside your

952
00:51:41,550 --> 00:51:46,230
real operating system on the same on the

953
00:51:43,950 --> 00:51:48,839
same machine do you think benders have

954
00:51:46,230 --> 00:51:51,089
this mindset of where hardware vendors

955
00:51:48,839 --> 00:51:53,609
we don't do software we do hardware and

956
00:51:51,089 --> 00:51:56,520
that's what caused some of these design

957
00:51:53,609 --> 00:52:00,529
issues where security is lacking by

958
00:51:56,520 --> 00:52:03,420
design so it's very good question so

959
00:52:00,530 --> 00:52:07,050
just think what I want to say in many

960
00:52:03,420 --> 00:52:09,390
cases security it's a tool for selling

961
00:52:07,050 --> 00:52:12,630
more products for the cardboard vendors

962
00:52:09,390 --> 00:52:15,900
and your question was okay this vendors

963
00:52:12,630 --> 00:52:17,819
keeping in mind about security for

964
00:52:15,900 --> 00:52:19,710
bass-player detecting these things and

965
00:52:17,819 --> 00:52:24,440
it really depends because many people

966
00:52:19,710 --> 00:52:27,030
involved on like developing me even and

967
00:52:24,440 --> 00:52:31,109
the problem is which is I mentioned

968
00:52:27,030 --> 00:52:33,380
about architects and mitigation design

969
00:52:31,109 --> 00:52:33,380
and

970
00:52:33,420 --> 00:52:38,710
all the operating system for me I

971
00:52:36,279 --> 00:52:40,960
believe developed by usual architects

972
00:52:38,710 --> 00:52:43,869
they don't have this security mindset

973
00:52:40,960 --> 00:52:48,190
how it can be broken or it's based on

974
00:52:43,869 --> 00:52:51,759
some information which they read which

975
00:52:48,190 --> 00:52:53,920
is can be just all you know it's why as

976
00:52:51,759 --> 00:52:56,650
example back two years ago we have a

977
00:52:53,920 --> 00:52:59,500
code execution box from positive

978
00:52:56,650 --> 00:53:04,750
technologies on management engine right

979
00:52:59,500 --> 00:53:07,029
see semi and even modern days like

980
00:53:04,750 --> 00:53:10,900
actually Google mentioned in the news

981
00:53:07,029 --> 00:53:14,470
the main driver for open for developing

982
00:53:10,900 --> 00:53:18,279
the Titan ship was because they try to

983
00:53:14,470 --> 00:53:20,109
prevent root of trust from being enemy

984
00:53:18,279 --> 00:53:23,470
and transfer to their own piece of

985
00:53:20,109 --> 00:53:25,808
silicon because image have the MINIX

986
00:53:23,470 --> 00:53:28,269
operating system inside and it's very

987
00:53:25,809 --> 00:53:31,180
known piece of software and even open

988
00:53:28,269 --> 00:53:35,258
source and easier to create the attack

989
00:53:31,180 --> 00:53:37,899
and you were in made ships use x86 not

990
00:53:35,259 --> 00:53:40,509
Ark which is also easier to exploit

991
00:53:37,900 --> 00:53:43,809
because it's a lot of knowledge on x86

992
00:53:40,509 --> 00:53:46,990
exploitation right if I can power up a

993
00:53:43,809 --> 00:53:49,210
bit so what I think is that we have this

994
00:53:46,990 --> 00:53:52,598
perception of software security being

995
00:53:49,210 --> 00:53:56,950
more mature because it's been it's been

996
00:53:52,599 --> 00:53:59,079
scrutinized for decades now right but we

997
00:53:56,950 --> 00:54:01,118
accept the fact that hardware is not so

998
00:53:59,079 --> 00:54:05,200
we see this like this is the new thing

999
00:54:01,119 --> 00:54:06,910
why haven't they had not enough time to

1000
00:54:05,200 --> 00:54:09,669
implement secure software development

1001
00:54:06,910 --> 00:54:11,950
life cycles if they viewed themselves as

1002
00:54:09,670 --> 00:54:13,809
also software vendors they could have

1003
00:54:11,950 --> 00:54:16,379
implemented some of the same solutions

1004
00:54:13,809 --> 00:54:21,609
that software vendors in many cases

1005
00:54:16,380 --> 00:54:23,589
hardware if Bach exists as example and

1006
00:54:21,609 --> 00:54:26,380
it's related to hardware in many cases

1007
00:54:23,589 --> 00:54:29,109
it can be just former doesn't use hard

1008
00:54:26,380 --> 00:54:31,150
work correctly so because then when a

1009
00:54:29,109 --> 00:54:34,598
company seven who develop the hardware

1010
00:54:31,150 --> 00:54:38,529
solutions teams who develop the firmware

1011
00:54:34,599 --> 00:54:40,750
or like higher stack operating systems

1012
00:54:38,529 --> 00:54:44,049
not connected to the hardware engineers

1013
00:54:40,750 --> 00:54:47,170
and it's creating some sport where this

1014
00:54:44,049 --> 00:54:50,900
misunderstanding can lead some

1015
00:54:47,170 --> 00:54:54,740
architectural box thank you okay so just

1016
00:54:50,900 --> 00:54:57,020
one more very super quick question over

1017
00:54:54,740 --> 00:54:58,939
here since of the white knights thank

1018
00:54:57,020 --> 00:55:03,050
you thank you

1019
00:54:58,940 --> 00:55:06,590
just a quick question you as we've seen

1020
00:55:03,050 --> 00:55:10,430
that when we do the trusted boot it just

1021
00:55:06,590 --> 00:55:14,870
ignores the ACM piece of code can we not

1022
00:55:10,430 --> 00:55:17,960
run hash algorithm on top of it and

1023
00:55:14,870 --> 00:55:20,450
compare it after the secure boot as in

1024
00:55:17,960 --> 00:55:22,610
to this comparison constantly you mean

1025
00:55:20,450 --> 00:55:27,020
like we just want to check the integrity

1026
00:55:22,610 --> 00:55:28,460
for ECM right yes so I think integrity

1027
00:55:27,020 --> 00:55:31,430
is good but what you should do you

1028
00:55:28,460 --> 00:55:35,600
should check all the headers as example

1029
00:55:31,430 --> 00:55:37,940
entry point of ECM was not changed the

1030
00:55:35,600 --> 00:55:40,490
timestamp of Ischia model was not

1031
00:55:37,940 --> 00:55:42,530
changed and of course integrity for the

1032
00:55:40,490 --> 00:55:45,620
code yeah I think it's a right point to

1033
00:55:42,530 --> 00:55:48,380
create at least some barrier for prevent

1034
00:55:45,620 --> 00:55:51,140
malicious ACMs downgrade that a CMS

1035
00:55:48,380 --> 00:55:56,840
executed on the platform yeah for the

1036
00:55:51,140 --> 00:55:58,250
time being that's cool thank you so much

1037
00:55:56,840 --> 00:56:05,300
thank you Alex thank you everyone for

1038
00:55:58,250 --> 00:56:07,850
the question very much I would avoid the

1039
00:56:05,300 --> 00:56:11,000
first question just because the person

1040
00:56:07,850 --> 00:56:13,910
raised in the strip problem and they

1041
00:56:11,000 --> 00:56:16,790
think it's very important to discuss was

1042
00:56:13,910 --> 00:56:22,759
very important to discuss here what is

1043
00:56:16,790 --> 00:56:24,710
your name okay which listen you are the

1044
00:56:22,760 --> 00:56:27,950
winner of the boot kit route kids book

1045
00:56:24,710 --> 00:56:30,440
and I will sign it for you just after I

1046
00:56:27,950 --> 00:56:32,270
leave the stage awesome awesome

1047
00:56:30,440 --> 00:56:34,370
so thank you so much thank you change

1048
00:56:32,270 --> 00:56:35,930
you always has the best friendship thank

1049
00:56:34,370 --> 00:56:40,720
you thank you everybody

1050
00:56:35,930 --> 00:56:40,720
it was a pleasure to speak on this stage

