1
00:00:00,000 --> 00:00:05,160
<font color="#CCCCCC">bucharest i welcome you all to my talk</font>

2
00:00:02,639 --> 00:00:08,400
about<font color="#CCCCCC"> web application firewall by</font>

3
00:00:05,160 --> 00:00:10,170
<font color="#CCCCCC">passing</font><font color="#E5E5E5"> an approach for pen testers my</font>

4
00:00:08,400 --> 00:00:13,980
name is<font color="#CCCCCC"> Khaled</font><font color="#E5E5E5"> visual</font><font color="#CCCCCC"> I'm a security</font>

5
00:00:10,170 --> 00:00:18,119
consultant for a company called<font color="#CCCCCC"> EurAsEC</font>

6
00:00:13,980 --> 00:00:25,289
<font color="#CCCCCC">we are a</font><font color="#E5E5E5"> consulting company in Germany</font>

7
00:00:18,119 --> 00:00:28,320
and<font color="#E5E5E5"> do security since 9098 so the first</font>

8
00:00:25,289 --> 00:00:30,929
question is by placing a web<font color="#E5E5E5"> why do we</font>

9
00:00:28,320 --> 00:00:34,110
even want to do that<font color="#E5E5E5"> first of all</font><font color="#CCCCCC"> more</font>

10
00:00:30,929 --> 00:00:37,469
and<font color="#E5E5E5"> more companies are deploying webs in</font>

11
00:00:34,110 --> 00:00:40,680
<font color="#E5E5E5">their infrastructure so it is the number</font>

12
00:00:37,469 --> 00:00:43,649
of<font color="#CCCCCC"> webs</font><font color="#E5E5E5"> is increasing and websites from</font>

13
00:00:40,680 --> 00:00:45,870
the perspective of the pen tester<font color="#E5E5E5"> make a</font>

14
00:00:43,649 --> 00:00:49,320
penetration test security assessment

15
00:00:45,870 --> 00:00:52,559
more difficult so<font color="#E5E5E5"> attempting to bypass</font>

16
00:00:49,320 --> 00:00:55,260
<font color="#E5E5E5">the web is a very important aspect of of</font>

17
00:00:52,559 --> 00:00:57,510
<font color="#CCCCCC">the penetration test and should be in</font>

18
00:00:55,260 --> 00:01:03,420
the<font color="#E5E5E5"> skill set of every penetration test</font>

19
00:00:57,510 --> 00:01:05,459
so the goal of this talk is to provide a

20
00:01:03,420 --> 00:01:09,420
practical approach for penetration

21
00:01:05,459 --> 00:01:14,520
testers<font color="#E5E5E5"> on how to bypass a web because</font>

22
00:01:09,420 --> 00:01:17,790
ultimately the<font color="#CCCCCC"> our aim or</font><font color="#E5E5E5"> our goal is to</font>

23
00:01:14,520 --> 00:01:20,640
provide accurate results to the customer

24
00:01:17,790 --> 00:01:22,500
<font color="#E5E5E5">and tell him you have vulnerabilities in</font>

25
00:01:20,640 --> 00:01:28,409
your application and they are

26
00:01:22,500 --> 00:01:32,070
exploitable<font color="#E5E5E5"> or whether they are not but</font>

27
00:01:28,409 --> 00:01:34,439
<font color="#CCCCCC">before we dive into the bypassing the</font>

28
00:01:32,070 --> 00:01:37,979
first of all have to know a little bit

29
00:01:34,439 --> 00:01:44,220
more about web application<font color="#CCCCCC"> firewalls</font>

30
00:01:37,979 --> 00:01:46,950
so first of all<font color="#CCCCCC"> in the old days</font>

31
00:01:44,220 --> 00:01:49,259
companies were using firewalls and

32
00:01:46,950 --> 00:01:53,610
intrusion detection and prevention

33
00:01:49,259 --> 00:01:57,630
systems<font color="#CCCCCC"> the problem with these are that</font>

34
00:01:53,610 --> 00:02:00,659
they work on the trends<font color="#E5E5E5"> transport layer</font>

35
00:01:57,630 --> 00:02:06,419
<font color="#E5E5E5">so they don't understand application</font>

36
00:02:00,659 --> 00:02:08,340
logic very well one of the<font color="#E5E5E5"> problems of</font>

37
00:02:06,420 --> 00:02:10,800
firewalls and intrusion prevention

38
00:02:08,340 --> 00:02:13,590
systems<font color="#E5E5E5"> where that they tend to false</font>

39
00:02:10,800 --> 00:02:17,670
positive so they were blocking<font color="#E5E5E5"> request</font>

40
00:02:13,590 --> 00:02:21,480
that<font color="#E5E5E5"> aren't militias at all or that they</font>

41
00:02:17,670 --> 00:02:23,940
<font color="#E5E5E5">didn't even detect the payload</font><font color="#CCCCCC"> so what</font>

42
00:02:21,480 --> 00:02:27,030
we needed was a firewall that

43
00:02:23,940 --> 00:02:30,599
understands application logic more or

44
00:02:27,030 --> 00:02:34,140
better<font color="#E5E5E5"> so web application firewalls were</font>

45
00:02:30,599 --> 00:02:36,179
introduced and they replace these

46
00:02:34,140 --> 00:02:39,298
<font color="#E5E5E5">old-fashioned firewalls and intrusion</font>

47
00:02:36,180 --> 00:02:41,640
detection prevention systems for web

48
00:02:39,299 --> 00:02:44,580
applications<font color="#CCCCCC"> so what does a web</font>

49
00:02:41,640 --> 00:02:46,230
application firewall do<font color="#CCCCCC"> it's provided an</font>

50
00:02:44,580 --> 00:02:49,920
additional security layer<font color="#CCCCCC"> 2</font>

51
00:02:46,230 --> 00:02:52,319
infrastructure's<font color="#E5E5E5"> and</font><font color="#CCCCCC"> checks for</font>

52
00:02:49,920 --> 00:02:58,950
malicious traffic<font color="#E5E5E5"> and if it detects</font>

53
00:02:52,319 --> 00:03:00,929
<font color="#CCCCCC">malicious traffic</font><font color="#E5E5E5"> it blocks it coming to</font>

54
00:02:58,950 --> 00:03:05,099
the functionality of the web<font color="#E5E5E5"> application</font>

55
00:03:00,930 --> 00:03:07,739
firewall<font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing is that a request</font>

56
00:03:05,099 --> 00:03:11,220
is<font color="#CCCCCC"> incoming</font><font color="#E5E5E5"> so the web application</font>

57
00:03:07,739 --> 00:03:13,769
<font color="#E5E5E5">firewall runs the preprocessor the</font>

58
00:03:11,220 --> 00:03:17,549
<font color="#E5E5E5">preprocessor decides whether a request</font>

59
00:03:13,769 --> 00:03:20,310
will be further processed by the web or

60
00:03:17,549 --> 00:03:22,170
whether it will not<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> instance if</font>

61
00:03:20,310 --> 00:03:24,690
the web application<font color="#E5E5E5"> firewalls these are</font>

62
00:03:22,170 --> 00:03:27,298
<font color="#E5E5E5">the request comes from an internal IP</font>

63
00:03:24,690 --> 00:03:31,139
address<font color="#CCCCCC"> it may just skip it and send it</font>

64
00:03:27,299 --> 00:03:35,040
to the<font color="#CCCCCC"> back end and the</font><font color="#E5E5E5"> next step after</font>

65
00:03:31,139 --> 00:03:39,180
the<font color="#E5E5E5"> preprocessor off the web performance</font>

66
00:03:35,040 --> 00:03:42,179
<font color="#E5E5E5">normalization functions so the input may</font>

67
00:03:39,180 --> 00:03:45,840
have may vary from application to

68
00:03:42,180 --> 00:03:47,970
application sometimes we have we have

69
00:03:45,840 --> 00:03:50,010
<font color="#CCCCCC">unicode sometimes we have hex</font><font color="#E5E5E5"> encoded</font>

70
00:03:47,970 --> 00:03:55,290
characters<font color="#E5E5E5"> so what we need is a</font>

71
00:03:50,010 --> 00:03:57,929
<font color="#E5E5E5">normalization of this input and after</font>

72
00:03:55,290 --> 00:04:01,108
that the input is validated by the web

73
00:03:57,930 --> 00:04:03,690
so the web has some rules in it<font color="#E5E5E5"> and</font>

74
00:04:01,109 --> 00:04:06,780
checks the user input against these

75
00:04:03,690 --> 00:04:09,239
rooms and<font color="#E5E5E5"> if everything is fine until</font>

76
00:04:06,780 --> 00:04:16,798
now<font color="#E5E5E5"> the request will be forwarded to the</font>

77
00:04:09,239 --> 00:04:18,750
<font color="#E5E5E5">back</font><font color="#CCCCCC"> and yet so to understand the</font>

78
00:04:16,798 --> 00:04:21,388
<font color="#E5E5E5">normalization functions a little better</font>

79
00:04:18,750 --> 00:04:24,330
and<font color="#CCCCCC"> their</font><font color="#E5E5E5"> their purpose</font>

80
00:04:21,389 --> 00:04:26,270
first of all<font color="#CCCCCC"> normalization punch and</font>

81
00:04:24,330 --> 00:04:29,900
simplify the writing of<font color="#E5E5E5"> room</font>

82
00:04:26,270 --> 00:04:33,080
<font color="#E5E5E5">so if you have a an administrator wants</font>

83
00:04:29,900 --> 00:04:34,909
<font color="#CCCCCC">to define some rules</font><font color="#E5E5E5"> for the web</font>

84
00:04:33,080 --> 00:04:37,520
he does not have to know about the

85
00:04:34,909 --> 00:04:41,569
different encoding<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the different</font>

86
00:04:37,520 --> 00:04:44,568
variations of input<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> instance we</font>

87
00:04:41,569 --> 00:04:46,879
have here<font color="#E5E5E5"> for functions which are used</font>

88
00:04:44,569 --> 00:04:51,289
by<font color="#CCCCCC"> much security</font><font color="#E5E5E5"> which is a very famous</font>

89
00:04:46,879 --> 00:04:53,539
<font color="#CCCCCC">web</font><font color="#E5E5E5"> application firewall used in many</font>

90
00:04:51,289 --> 00:04:55,460
environments for instance we have the

91
00:04:53,539 --> 00:04:58,520
<font color="#CCCCCC">compress whitespace</font><font color="#E5E5E5"> function which</font>

92
00:04:55,460 --> 00:05:01,190
converts whitespace characters like a

93
00:04:58,520 --> 00:05:04,130
horizontal tab<font color="#E5E5E5"> or a vertical</font><font color="#CCCCCC"> tab to</font>

94
00:05:01,190 --> 00:05:07,340
normal spaces<font color="#CCCCCC"> then we</font><font color="#E5E5E5"> have the</font><font color="#CCCCCC"> hex</font>

95
00:05:04,130 --> 00:05:09,800
decode function which also is clear<font color="#E5E5E5"> it</font>

96
00:05:07,340 --> 00:05:12,289
<font color="#E5E5E5">decodes a hex encoded string</font><font color="#CCCCCC"> we have the</font>

97
00:05:09,800 --> 00:05:14,630
<font color="#E5E5E5">lowercase function which converts</font>

98
00:05:12,289 --> 00:05:18,830
characters<font color="#E5E5E5"> uppercase</font><font color="#CCCCCC"> collect characters</font>

99
00:05:14,630 --> 00:05:21,020
to<font color="#CCCCCC"> lowercase</font><font color="#E5E5E5"> characters and finally the</font>

100
00:05:18,830 --> 00:05:24,919
last example is the URL decode function

101
00:05:21,020 --> 00:05:34,400
which decodes your URL encoded string

102
00:05:24,919 --> 00:05:37,130
then the input validation of<font color="#CCCCCC"> webs comes</font>

103
00:05:34,400 --> 00:05:39,830
after the<font color="#E5E5E5"> normalization functions and</font>

104
00:05:37,130 --> 00:05:44,539
here<font color="#E5E5E5"> we have different security models</font>

105
00:05:39,830 --> 00:05:48,109
and these security models define how to

106
00:05:44,539 --> 00:05:51,620
enforce the rules<font color="#CCCCCC"> they mostly consists</font>

107
00:05:48,110 --> 00:05:53,990
of regular expressions and generally we

108
00:05:51,620 --> 00:05:57,080
have three security models<font color="#E5E5E5"> the positive</font>

109
00:05:53,990 --> 00:06:02,719
security model<font color="#CCCCCC"> the</font><font color="#E5E5E5"> negative security</font>

110
00:05:57,080 --> 00:06:05,060
model and the hybrid security model<font color="#E5E5E5"> to</font>

111
00:06:02,719 --> 00:06:08,360
have a deeper look into the first<font color="#CCCCCC"> two</font>

112
00:06:05,060 --> 00:06:11,479
security<font color="#E5E5E5"> models use a shot</font><font color="#CCCCCC"> comparison</font>

113
00:06:08,360 --> 00:06:13,699
comparison<font color="#E5E5E5"> between the positive and the</font>

114
00:06:11,479 --> 00:06:15,380
negative security model<font color="#E5E5E5"> so the positive</font>

115
00:06:13,699 --> 00:06:18,919
security model is also called

116
00:06:15,380 --> 00:06:22,219
<font color="#E5E5E5">whitelisting the general rule is deny</font>

117
00:06:18,919 --> 00:06:25,190
all but known good<font color="#CCCCCC"> so the general rule</font>

118
00:06:22,219 --> 00:06:28,039
is to deny every request<font color="#CCCCCC"> accept if we</font>

119
00:06:25,190 --> 00:06:31,729
find something in it that we<font color="#E5E5E5"> define that</font>

120
00:06:28,039 --> 00:06:34,430
we have defined as good the<font color="#E5E5E5"> the</font>

121
00:06:31,729 --> 00:06:37,190
advantage of a<font color="#CCCCCC"> whitelist</font><font color="#E5E5E5"> is that it</font>

122
00:06:34,430 --> 00:06:38,430
prevents most<font color="#E5E5E5"> zero-day exploits</font>

123
00:06:37,190 --> 00:06:41,219
so for instance<font color="#E5E5E5"> if</font>

124
00:06:38,430 --> 00:06:44,430
<font color="#CCCCCC">we have a parameter</font><font color="#E5E5E5"> ID we can assume</font>

125
00:06:41,220 --> 00:06:47,190
that the input for this parameter will

126
00:06:44,430 --> 00:06:48,780
be only integer numbers<font color="#E5E5E5"> so if there is a</font>

127
00:06:47,190 --> 00:06:53,040
zero-day exploit it will be very

128
00:06:48,780 --> 00:06:55,320
unlikely that it<font color="#E5E5E5"> will work</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can say</font>

129
00:06:53,040 --> 00:06:58,890
that the whitelist model is more secure

130
00:06:55,320 --> 00:07:01,380
than a blacklist model but the

131
00:06:58,890 --> 00:07:03,630
disadvantage of the<font color="#CCCCCC"> whitelist and</font><font color="#E5E5E5"> that</font>

132
00:07:01,380 --> 00:07:07,290
is that<font color="#CCCCCC"> this is probably</font><font color="#E5E5E5"> why most</font>

133
00:07:03,630 --> 00:07:09,900
<font color="#E5E5E5">companies do not use it is that for</font>

134
00:07:07,290 --> 00:07:12,060
setting a whitelist<font color="#E5E5E5"> up you have to have</font>

135
00:07:09,900 --> 00:07:14,429
a<font color="#E5E5E5"> comprehensive comprehensive</font>

136
00:07:12,060 --> 00:07:16,770
understanding of the web application<font color="#E5E5E5"> so</font>

137
00:07:14,430 --> 00:07:19,170
the administrator and needs to know what

138
00:07:16,770 --> 00:07:21,930
is the application about<font color="#E5E5E5"> what does it do</font>

139
00:07:19,170 --> 00:07:24,780
<font color="#CCCCCC">what parametres does it have</font><font color="#E5E5E5"> and what is</font>

140
00:07:21,930 --> 00:07:27,390
a valid input and what is not<font color="#E5E5E5"> so</font>

141
00:07:24,780 --> 00:07:31,739
creating the rules for this<font color="#CCCCCC"> white list</font>

142
00:07:27,390 --> 00:07:34,620
is a<font color="#E5E5E5"> time-consuming process on the other</font>

143
00:07:31,740 --> 00:07:37,620
hand we have the blacklist model<font color="#CCCCCC"> here's</font>

144
00:07:34,620 --> 00:07:41,130
the general rule<font color="#CCCCCC"> allow allow all</font><font color="#E5E5E5"> but</font>

145
00:07:37,620 --> 00:07:42,720
<font color="#CCCCCC">unknown bet so every request is fine and</font>

146
00:07:41,130 --> 00:07:44,640
is allowed by the web

147
00:07:42,720 --> 00:07:48,780
except for<font color="#E5E5E5"> those requests where we find</font>

148
00:07:44,640 --> 00:07:50,969
something that the blacklist mostly

149
00:07:48,780 --> 00:07:55,289
comes<font color="#CCCCCC"> shipped</font><font color="#E5E5E5"> with the web so we don't</font>

150
00:07:50,970 --> 00:07:57,510
have to create a blacklist ourselves and

151
00:07:55,290 --> 00:08:00,330
yet another advantage is the<font color="#CCCCCC"> fast</font>

152
00:07:57,510 --> 00:08:02,820
adoption<font color="#E5E5E5"> so we may</font><font color="#CCCCCC"> by the web or</font>

153
00:08:00,330 --> 00:08:07,020
<font color="#E5E5E5">installer web and we can use it right</font>

154
00:08:02,820 --> 00:08:09,000
away<font color="#E5E5E5"> the administrator who is you</font>

155
00:08:07,020 --> 00:08:11,460
deploying the web does not need to know

156
00:08:09,000 --> 00:08:13,230
anything about the application in

157
00:08:11,460 --> 00:08:16,049
general<font color="#CCCCCC"> heat</font><font color="#E5E5E5"> it doesn't need to know a</font>

158
00:08:13,230 --> 00:08:19,170
lot<font color="#E5E5E5"> you can just deploy it and</font><font color="#CCCCCC"> may</font><font color="#E5E5E5"> and</font>

159
00:08:16,050 --> 00:08:21,840
it will work<font color="#CCCCCC"> how good it</font><font color="#E5E5E5"> will work is</font>

160
00:08:19,170 --> 00:08:25,890
the other question but it will work<font color="#CCCCCC"> and</font>

161
00:08:21,840 --> 00:08:29,130
finally it will blacklist and this is

162
00:08:25,890 --> 00:08:32,280
probably why<font color="#E5E5E5"> most companies use them are</font>

163
00:08:29,130 --> 00:08:35,309
able to protect several applications as

164
00:08:32,280 --> 00:08:37,230
we define what is bad input the<font color="#E5E5E5"> we</font>

165
00:08:35,309 --> 00:08:39,569
define what is the bad input and the bad

166
00:08:37,230 --> 00:08:43,470
input is not just<font color="#CCCCCC"> bad input</font><font color="#E5E5E5"> for one</font>

167
00:08:39,570 --> 00:08:45,780
application but for all our applications

168
00:08:43,470 --> 00:08:49,020
the problem with the<font color="#E5E5E5"> blacklist is that</font>

169
00:08:45,780 --> 00:08:51,420
it tends to false positives<font color="#E5E5E5"> so if anyone</font>

170
00:08:49,020 --> 00:08:52,020
of you<font color="#E5E5E5"> may have used once</font><font color="#CCCCCC"> much security</font>

171
00:08:51,420 --> 00:08:55,199
with

172
00:08:52,020 --> 00:08:58,530
the standard<font color="#CCCCCC"> blacklist ruleset</font><font color="#E5E5E5"> you may</font>

173
00:08:55,200 --> 00:09:00,870
have encountered several error pages

174
00:08:58,530 --> 00:09:03,329
where you were just using and the

175
00:09:00,870 --> 00:09:05,310
application normally<font color="#E5E5E5"> so for instance if</font>

176
00:09:03,330 --> 00:09:08,010
you want to use<font color="#CCCCCC"> modsecurity</font><font color="#E5E5E5"> with the CMS</font>

177
00:09:05,310 --> 00:09:10,349
like WordPress<font color="#CCCCCC"> you may forget it without</font>

178
00:09:08,010 --> 00:09:14,310
<font color="#CCCCCC">if you're not if you don't</font><font color="#E5E5E5"> if you don't</font>

179
00:09:10,350 --> 00:09:19,320
disallow<font color="#CCCCCC"> or if you don't disable some of</font>

180
00:09:14,310 --> 00:09:22,560
the<font color="#E5E5E5"> roots and another thing which</font><font color="#CCCCCC"> maybe</font>

181
00:09:19,320 --> 00:09:25,350
not a big disadvantage but it is a

182
00:09:22,560 --> 00:09:27,810
<font color="#CCCCCC">time-consuming process for the web to</font>

183
00:09:25,350 --> 00:09:30,090
check every request<font color="#E5E5E5"> against a very very</font>

184
00:09:27,810 --> 00:09:36,959
long list of that inputs

185
00:09:30,090 --> 00:09:39,870
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> that's about</font><font color="#CCCCCC"> the functionality of</font>

186
00:09:36,960 --> 00:09:47,190
<font color="#CCCCCC">webs</font><font color="#E5E5E5"> coming to bypassing methods and</font>

187
00:09:39,870 --> 00:09:50,880
techniques so these techniques and

188
00:09:47,190 --> 00:09:53,940
methods can be categorized into three

189
00:09:50,880 --> 00:09:58,260
different parts the first part is the

190
00:09:53,940 --> 00:10:00,810
<font color="#E5E5E5">preprocessor exploitation here we try to</font>

191
00:09:58,260 --> 00:10:05,460
make the web skip input validation<font color="#CCCCCC"> so</font>

192
00:10:00,810 --> 00:10:08,400
maybe we can try<font color="#E5E5E5"> to</font><font color="#CCCCCC"> I'll give an example</font>

193
00:10:05,460 --> 00:10:10,260
<font color="#E5E5E5">later so we try to let the web think</font>

194
00:10:08,400 --> 00:10:13,800
<font color="#E5E5E5">about</font><font color="#CCCCCC"> this recourses okay i don't even</font>

195
00:10:10,260 --> 00:10:16,830
have to see in<font color="#E5E5E5"> its</font><font color="#CCCCCC"> local</font><font color="#E5E5E5"> look through it</font>

196
00:10:13,800 --> 00:10:21,120
<font color="#E5E5E5">through</font><font color="#CCCCCC"> it and</font><font color="#E5E5E5"> try to find any bad</font>

197
00:10:16,830 --> 00:10:24,060
<font color="#E5E5E5">payload the second category is the</font>

198
00:10:21,120 --> 00:10:27,720
impedance mismatch category where we try

199
00:10:24,060 --> 00:10:31,589
to find a payload that is interpreted by

200
00:10:27,720 --> 00:10:33,780
the<font color="#CCCCCC"> web differently</font><font color="#E5E5E5"> than the</font><font color="#CCCCCC"> backend and</font>

201
00:10:31,590 --> 00:10:36,960
<font color="#E5E5E5">finally we have the</font><font color="#CCCCCC"> rules set by passing</font>

202
00:10:33,780 --> 00:10:39,810
<font color="#E5E5E5">and this is probably the category where</font>

203
00:10:36,960 --> 00:10:42,960
we<font color="#E5E5E5"> where the methods are most likely to</font>

204
00:10:39,810 --> 00:10:48,689
work<font color="#CCCCCC"> we try to find</font><font color="#E5E5E5"> payloads that are</font>

205
00:10:42,960 --> 00:10:51,480
not detected by the web so coming to the

206
00:10:48,690 --> 00:10:56,880
first category<font color="#E5E5E5"> preprocessor exploitation</font>

207
00:10:51,480 --> 00:11:01,230
one example for this category is

208
00:10:56,880 --> 00:11:05,320
skipping parameter verification<font color="#CCCCCC"> here we</font>

209
00:11:01,230 --> 00:11:08,830
try to find<font color="#CCCCCC"> and</font><font color="#E5E5E5"> and</font>

210
00:11:05,320 --> 00:11:11,380
alternative for the parameter name which

211
00:11:08,830 --> 00:11:14,200
is interpreted by the<font color="#CCCCCC"> web differently so</font>

212
00:11:11,380 --> 00:11:16,630
for<font color="#E5E5E5"> instance we have PHP which removes</font>

213
00:11:14,200 --> 00:11:19,330
<font color="#CCCCCC">white spaces</font><font color="#E5E5E5"> from parameter names</font><font color="#CCCCCC"> or</font>

214
00:11:16,630 --> 00:11:22,600
transforms them into<font color="#E5E5E5"> underscores</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> we</font>

215
00:11:19,330 --> 00:11:27,220
have this URL website.com<font color="#E5E5E5"> / products dot</font>

216
00:11:22,600 --> 00:11:31,690
PHP ?<font color="#CCCCCC"> percent</font><font color="#E5E5E5"> 20 which is</font><font color="#CCCCCC"> the URL</font>

217
00:11:27,220 --> 00:11:34,180
encoded<font color="#E5E5E5"> whitespace</font><font color="#CCCCCC"> product ID so this</font>

218
00:11:31,690 --> 00:11:36,820
request comes<font color="#E5E5E5"> into the web and the</font>

219
00:11:34,180 --> 00:11:39,069
<font color="#CCCCCC">webseries</font><font color="#E5E5E5"> person</font><font color="#CCCCCC"> 20</font><font color="#E5E5E5"> product</font><font color="#CCCCCC"> ID</font><font color="#E5E5E5"> and tries</font>

220
00:11:36,820 --> 00:11:43,150
to match it against all parameters<font color="#CCCCCC"> it's</font>

221
00:11:39,070 --> 00:11:45,700
<font color="#E5E5E5">it</font><font color="#CCCCCC"> knows and it doesn't find one</font><font color="#E5E5E5"> and in</font>

222
00:11:43,150 --> 00:11:48,069
the back and when it we see when it is

223
00:11:45,700 --> 00:11:51,970
really when it comes to the PHP web

224
00:11:48,070 --> 00:11:56,440
server<font color="#CCCCCC"> the website which uses PHP and</font>

225
00:11:51,970 --> 00:11:59,260
the white<font color="#E5E5E5"> spaces just removed and we</font>

226
00:11:56,440 --> 00:12:00,850
have the permit<font color="#E5E5E5"> and product ID and it</font>

227
00:11:59,260 --> 00:12:05,050
will be processed correctly by the

228
00:12:00,850 --> 00:12:07,960
<font color="#CCCCCC">backend the same applies for</font><font color="#E5E5E5"> for asp</font>

229
00:12:05,050 --> 00:12:10,810
<font color="#E5E5E5">which removes a person character which</font>

230
00:12:07,960 --> 00:12:13,630
is not followed by<font color="#E5E5E5"> to hexadecimal digits</font>

231
00:12:10,810 --> 00:12:19,449
<font color="#E5E5E5">so again we have the example website.com</font>

232
00:12:13,630 --> 00:12:22,450
/ products<font color="#E5E5E5"> dot aspx ?</font><font color="#CCCCCC"> percent</font><font color="#E5E5E5"> product ID</font>

233
00:12:19,450 --> 00:12:24,790
again what does it is<font color="#CCCCCC"> what does the web</font>

234
00:12:22,450 --> 00:12:26,950
see<font color="#CCCCCC"> she's the person product ID</font>

235
00:12:24,790 --> 00:12:31,150
I don't know this parameter so<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> it</font>

236
00:12:26,950 --> 00:12:33,250
will be fine<font color="#CCCCCC"> and when it when it is when</font>

237
00:12:31,150 --> 00:12:37,300
it comes to the back<font color="#E5E5E5"> and a speed then</font>

238
00:12:33,250 --> 00:12:41,650
just<font color="#E5E5E5"> remove the percent and</font><font color="#CCCCCC"> sees</font><font color="#E5E5E5"> product</font>

239
00:12:37,300 --> 00:12:43,780
ID<font color="#E5E5E5"> and</font><font color="#CCCCCC"> yet the web is configured in such</font>

240
00:12:41,650 --> 00:12:47,680
a way that it does not reject<font color="#E5E5E5"> unknown</font>

241
00:12:43,780 --> 00:12:54,850
<font color="#CCCCCC">parametres</font><font color="#E5E5E5"> it may be bypassed in this by</font>

242
00:12:47,680 --> 00:12:58,449
this way<font color="#CCCCCC"> the second</font><font color="#E5E5E5"> example is</font><font color="#CCCCCC"> among</font>

243
00:12:54,850 --> 00:13:01,150
malformed HTTP method<font color="#E5E5E5"> so if we have a</font>

244
00:12:58,450 --> 00:13:04,960
web server that is misconfigured<font color="#E5E5E5"> and</font>

245
00:13:01,150 --> 00:13:08,110
accepts<font color="#E5E5E5"> HTTP paramed</font><font color="#CCCCCC"> parametres</font><font color="#E5E5E5"> that are</font>

246
00:13:04,960 --> 00:13:11,440
not defined in the specification like

247
00:13:08,110 --> 00:13:17,080
the example hello 123<font color="#CCCCCC"> and we got a</font>

248
00:13:11,440 --> 00:13:18,180
response of 200<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> then we may try this</font>

249
00:13:17,080 --> 00:13:21,390
method<font color="#E5E5E5"> and</font>

250
00:13:18,180 --> 00:13:23,609
<font color="#E5E5E5">hope that the web only inspects get and</font>

251
00:13:21,390 --> 00:13:31,830
post parameters and skips<font color="#E5E5E5"> every other</font>

252
00:13:23,610 --> 00:13:34,470
<font color="#E5E5E5">HTTP method and the</font><font color="#CCCCCC"> third</font><font color="#E5E5E5"> bit brutal</font>

253
00:13:31,830 --> 00:13:37,980
<font color="#E5E5E5">method is to just try to overload the</font>

254
00:13:34,470 --> 00:13:41,130
web<font color="#E5E5E5"> so a web may be configured in such a</font>

255
00:13:37,980 --> 00:13:44,310
way that it skips input validation if

256
00:13:41,130 --> 00:13:47,459
performance load is heavy and this often

257
00:13:44,310 --> 00:13:50,399
applies to<font color="#CCCCCC"> embedded web because we as a</font>

258
00:13:47,459 --> 00:13:53,939
company to not want to reduce the

259
00:13:50,399 --> 00:13:56,580
usability of our application and<font color="#E5E5E5"> with</font>

260
00:13:53,940 --> 00:14:00,029
most companies then<font color="#CCCCCC"> favor usability</font><font color="#E5E5E5"> over</font>

261
00:13:56,580 --> 00:14:03,450
security<font color="#CCCCCC"> so what we can do is to send a</font>

262
00:14:00,029 --> 00:14:06,330
great deal of malicious requests and try

263
00:14:03,450 --> 00:14:09,089
to overload the web<font color="#E5E5E5"> with this technique</font>

264
00:14:06,330 --> 00:14:13,050
and hope that some of our<font color="#E5E5E5"> requests gets</font>

265
00:14:09,089 --> 00:14:20,130
them through the web and<font color="#E5E5E5"> will be sent to</font>

266
00:14:13,050 --> 00:14:22,439
the<font color="#CCCCCC"> backend ok</font><font color="#E5E5E5"> the second category is</font>

267
00:14:20,130 --> 00:14:25,950
impedance mismatch<font color="#E5E5E5"> again what we hear</font>

268
00:14:22,440 --> 00:14:28,589
try is to find a payload that is

269
00:14:25,950 --> 00:14:32,940
interpreted by the<font color="#E5E5E5"> web differently than</font>

270
00:14:28,589 --> 00:14:37,260
by the<font color="#CCCCCC"> backend</font><font color="#E5E5E5"> a very famous technique</font>

271
00:14:32,940 --> 00:14:41,190
is called<font color="#E5E5E5"> HTTP parameter pollution</font><font color="#CCCCCC"> so</font>

272
00:14:37,260 --> 00:14:43,560
what we do is we sent a request with<font color="#CCCCCC"> are</font>

273
00:14:41,190 --> 00:14:44,490
<font color="#CCCCCC">a number of parametres</font><font color="#E5E5E5"> with the same</font>

274
00:14:43,560 --> 00:14:48,270
name

275
00:14:44,490 --> 00:14:52,560
so for instance we have<font color="#E5E5E5"> website.com</font><font color="#CCCCCC"> /</font>

276
00:14:48,270 --> 00:14:55,260
product /<font color="#E5E5E5"> ? product ID equals</font><font color="#CCCCCC"> one and</font>

277
00:14:52,560 --> 00:14:58,199
<font color="#CCCCCC">product ID equals 2 so we have the same</font>

278
00:14:55,260 --> 00:15:03,240
parameter name<font color="#E5E5E5"> with two different values</font>

279
00:14:58,200 --> 00:15:09,209
<font color="#E5E5E5">how different technologies interpret</font>

280
00:15:03,240 --> 00:15:11,160
this request<font color="#E5E5E5"> asp.net concatenates both</font>

281
00:15:09,209 --> 00:15:14,849
values with a comma

282
00:15:11,160 --> 00:15:18,870
so what it what gets to the<font color="#CCCCCC"> backend</font><font color="#E5E5E5"> is</font>

283
00:15:14,850 --> 00:15:21,000
product ID equals<font color="#CCCCCC"> one coming</font><font color="#E5E5E5"> to JSP for</font>

284
00:15:18,870 --> 00:15:24,779
instance just uses the first occurrence

285
00:15:21,000 --> 00:15:27,810
<font color="#E5E5E5">so what it processes is product ID</font>

286
00:15:24,779 --> 00:15:31,050
equals<font color="#CCCCCC"> one and PHP</font><font color="#E5E5E5"> uses the last</font>

287
00:15:27,810 --> 00:15:31,500
<font color="#CCCCCC">occurrence</font><font color="#E5E5E5"> and it gets</font><font color="#CCCCCC"> product ID equals</font>

288
00:15:31,050 --> 00:15:38,670
<font color="#CCCCCC">two</font>

289
00:15:31,500 --> 00:15:40,800
<font color="#CCCCCC">so if we assume that</font><font color="#E5E5E5"> we have the</font>

290
00:15:38,670 --> 00:15:43,260
following payload<font color="#E5E5E5"> product ID equals</font>

291
00:15:40,800 --> 00:15:46,709
selects one coming to<font color="#E5E5E5"> come a</font><font color="#CCCCCC"> three-prong</font>

292
00:15:43,260 --> 00:15:51,120
table then probably everywhere<font color="#E5E5E5"> will</font>

293
00:15:46,710 --> 00:15:54,930
block our<font color="#E5E5E5"> request but</font><font color="#CCCCCC"> what we can do if</font>

294
00:15:51,120 --> 00:15:57,930
we have for instance and asp.net

295
00:15:54,930 --> 00:16:01,800
application<font color="#E5E5E5"> we can try to divide our</font>

296
00:15:57,930 --> 00:16:05,430
payload and<font color="#CCCCCC"> send</font><font color="#E5E5E5"> product ID equals</font>

297
00:16:01,800 --> 00:16:10,229
select one and<font color="#E5E5E5"> product ID equals 2 comma</font>

298
00:16:05,430 --> 00:16:12,719
3 from table<font color="#E5E5E5"> so what the web</font><font color="#CCCCCC"> series is</font>

299
00:16:10,230 --> 00:16:14,940
<font color="#CCCCCC">two different parameters are two</font>

300
00:16:12,720 --> 00:16:19,470
individual<font color="#E5E5E5"> parameters the first one</font>

301
00:16:14,940 --> 00:16:23,460
<font color="#CCCCCC">select one is not malicious and products</font>

302
00:16:19,470 --> 00:16:25,950
<font color="#E5E5E5">ID equals</font><font color="#CCCCCC"> 2 comma 3 from table which is</font>

303
00:16:23,460 --> 00:16:28,080
also not malicious<font color="#E5E5E5"> but we have the</font>

304
00:16:25,950 --> 00:16:31,590
<font color="#E5E5E5">center</font><font color="#CCCCCC"> hole rechristen just the first</font>

305
00:16:28,080 --> 00:16:33,930
parameter then the<font color="#CCCCCC"> weapon a</font><font color="#E5E5E5"> detected and</font>

306
00:16:31,590 --> 00:16:39,450
it and this was actually a bypass

307
00:16:33,930 --> 00:16:43,170
<font color="#CCCCCC">formats much security in 2009</font>

308
00:16:39,450 --> 00:16:45,570
yeah<font color="#CCCCCC"> and</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> i explained</font><font color="#E5E5E5"> to asp.net</font><font color="#CCCCCC"> sees</font>

309
00:16:43,170 --> 00:16:47,910
these two values and<font color="#E5E5E5"> concatenates both</font>

310
00:16:45,570 --> 00:16:55,650
with<font color="#E5E5E5"> a</font><font color="#CCCCCC"> comma</font><font color="#E5E5E5"> so what we get in the end</font>

311
00:16:47,910 --> 00:17:00,689
is what we have<font color="#E5E5E5"> above another technique</font>

312
00:16:55,650 --> 00:17:03,839
is<font color="#CCCCCC"> wrl encoding so what we try here is</font>

313
00:17:00,690 --> 00:17:07,560
<font color="#CCCCCC">oh what a web normally does is it</font>

314
00:17:03,839 --> 00:17:09,780
normalizes the URL encoded characters<font color="#E5E5E5"> if</font>

315
00:17:07,560 --> 00:17:13,530
the web is configured in such a way that

316
00:17:09,780 --> 00:17:17,399
it decodes the URL encoded parameter<font color="#CCCCCC"> for</font>

317
00:17:13,530 --> 00:17:19,589
the well<font color="#E5E5E5"> in coded value only once</font><font color="#CCCCCC"> then</font>

318
00:17:17,400 --> 00:17:23,490
we might may find the bypass

319
00:17:19,589 --> 00:17:26,730
so what we try is to take a character

320
00:17:23,490 --> 00:17:31,980
like<font color="#E5E5E5"> the s in the example and URL</font>

321
00:17:26,730 --> 00:17:35,880
encoded<font color="#E5E5E5"> which get gives us</font><font color="#CCCCCC"> percent 7437</font>

322
00:17:31,980 --> 00:17:40,679
<font color="#CCCCCC">73 sorry</font>

323
00:17:35,880 --> 00:17:45,290
and this again<font color="#E5E5E5"> we URL encoded this again</font>

324
00:17:40,679 --> 00:17:49,700
and get<font color="#CCCCCC"> percent 25-percent</font><font color="#E5E5E5"> 37</font><font color="#CCCCCC"> /</font>

325
00:17:45,290 --> 00:17:52,399
sent<font color="#E5E5E5"> 33</font><font color="#CCCCCC"> so we try to craft our payload</font>

326
00:17:49,700 --> 00:17:55,760
then<font color="#E5E5E5"> with which you can see on the</font>

327
00:17:52,400 --> 00:17:58,940
bottom<font color="#E5E5E5"> one</font><font color="#CCCCCC"> Union and then our wrl</font>

328
00:17:55,760 --> 00:18:01,760
encoded<font color="#E5E5E5"> s elect one coming through 2</font>

329
00:17:58,940 --> 00:18:03,590
<font color="#E5E5E5">comma 3</font><font color="#CCCCCC"> so what hopefully</font><font color="#E5E5E5"> happens is</font>

330
00:18:01,760 --> 00:18:07,430
that the<font color="#CCCCCC"> web</font><font color="#E5E5E5"> receives the request</font>

331
00:18:03,590 --> 00:18:14,000
<font color="#E5E5E5">decodes it once and still sees</font><font color="#CCCCCC"> percent</font>

332
00:18:07,430 --> 00:18:16,520
<font color="#E5E5E5">73 and the says okay this</font><font color="#CCCCCC"> paper</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> ok I</font>

333
00:18:14,000 --> 00:18:18,860
<font color="#E5E5E5">don't find it in my blacklist</font><font color="#CCCCCC"> so i can</font>

334
00:18:16,520 --> 00:18:24,560
give it to the<font color="#CCCCCC"> back end</font>

335
00:18:18,860 --> 00:18:28,760
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> coming to the last category which is</font>

336
00:18:24,560 --> 00:18:33,919
<font color="#CCCCCC">ruleset bypassing</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the rules had</font>

337
00:18:28,760 --> 00:18:36,770
<font color="#E5E5E5">bypassing we have two methods first one</font>

338
00:18:33,920 --> 00:18:39,230
is a<font color="#E5E5E5"> brute force method where we just</font>

339
00:18:36,770 --> 00:18:41,720
try different payloads and hope that one

340
00:18:39,230 --> 00:18:45,350
of our<font color="#E5E5E5"> payload gets through the web</font>

341
00:18:41,720 --> 00:18:48,560
this is a very simple approach and

342
00:18:45,350 --> 00:18:50,780
probably not the best one but the more

343
00:18:48,560 --> 00:18:53,540
intelligent approach is to<font color="#CCCCCC"> reverse</font>

344
00:18:50,780 --> 00:18:56,060
<font color="#CCCCCC">engineer the web</font><font color="#E5E5E5"> screw set</font><font color="#CCCCCC"> so what we</font>

345
00:18:53,540 --> 00:18:58,250
try is to find out how does the ruleset

346
00:18:56,060 --> 00:19:00,110
look at a in the web

347
00:18:58,250 --> 00:19:03,020
what is blocked by the web<font color="#E5E5E5"> and what is</font>

348
00:19:00,110 --> 00:19:05,090
not blocked by the web and we know if we

349
00:19:03,020 --> 00:19:07,160
know how how the<font color="#CCCCCC"> rules</font><font color="#E5E5E5"> that looks like</font>

350
00:19:05,090 --> 00:19:10,790
we can attempt to find<font color="#CCCCCC"> the people</font><font color="#E5E5E5"> that</font>

351
00:19:07,160 --> 00:19:13,790
is not blocked by the web and this is

352
00:19:10,790 --> 00:19:16,420
probably the technique that is the most

353
00:19:13,790 --> 00:19:22,940
successful of all mentioned<font color="#E5E5E5"> once</font>

354
00:19:16,420 --> 00:19:29,240
[Music]

355
00:19:22,940 --> 00:19:32,540
<font color="#CCCCCC">ok so now we have a good overview of the</font>

356
00:19:29,240 --> 00:19:34,670
methods and techniques<font color="#E5E5E5"> just that you</font>

357
00:19:32,540 --> 00:19:37,100
know<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> these are just examples and</font>

358
00:19:34,670 --> 00:19:41,600
there are many more out in the<font color="#CCCCCC"> White</font>

359
00:19:37,100 --> 00:19:44,389
coming to the approach for penetration

360
00:19:41,600 --> 00:19:47,090
testers<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> question we want to</font>

361
00:19:44,390 --> 00:19:48,800
answer here is if you are a penetration

362
00:19:47,090 --> 00:19:51,050
<font color="#CCCCCC">tester and</font><font color="#E5E5E5"> have an application which is</font>

363
00:19:48,800 --> 00:19:53,510
secured by<font color="#CCCCCC"> a web what are the steps that</font>

364
00:19:51,050 --> 00:19:57,230
you have to take<font color="#E5E5E5"> and what are the faces</font>

365
00:19:53,510 --> 00:19:58,970
and for bypassing the web

366
00:19:57,230 --> 00:20:02,419
[Music]

367
00:19:58,970 --> 00:20:06,950
<font color="#E5E5E5">so to give an overview first of all</font>

368
00:20:02,419 --> 00:20:09,110
these faces are a little bit similar to

369
00:20:06,950 --> 00:20:12,620
the normal places of the normal

370
00:20:09,110 --> 00:20:16,370
<font color="#E5E5E5">penetration test statistic divided into</font>

371
00:20:12,620 --> 00:20:18,199
six<font color="#E5E5E5"> paces</font><font color="#CCCCCC"> whereas a zero</font><font color="#E5E5E5"> may not be</font>

372
00:20:16,370 --> 00:20:22,399
always possible

373
00:20:18,200 --> 00:20:38,029
so does anyone of you have an idea what

374
00:20:22,400 --> 00:20:41,029
the first<font color="#E5E5E5"> phase maybe</font><font color="#CCCCCC"> face 0</font>

375
00:20:38,029 --> 00:20:43,429
<font color="#E5E5E5">to say to find the name of the web</font>

376
00:20:41,029 --> 00:20:46,309
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> that's very</font><font color="#CCCCCC"> good so you mean</font>

377
00:20:43,429 --> 00:20:49,729
reconnaissance<font color="#E5E5E5"> space very good but</font><font color="#CCCCCC"> even</font>

378
00:20:46,309 --> 00:20:53,479
before it<font color="#CCCCCC"> something that I</font><font color="#E5E5E5"> think no one</font>

379
00:20:49,729 --> 00:20:58,759
thinks<font color="#E5E5E5"> of but the first</font><font color="#CCCCCC"> place</font><font color="#E5E5E5"> is to just</font>

380
00:20:53,479 --> 00:21:00,769
<font color="#E5E5E5">disable the web so what is again our</font>

381
00:20:58,759 --> 00:21:03,440
objective<font color="#CCCCCC"> all</font><font color="#E5E5E5"> objective is to find</font>

382
00:21:00,769 --> 00:21:06,229
security holes in<font color="#E5E5E5"> an application</font><font color="#CCCCCC"> we want</font>

383
00:21:03,440 --> 00:21:09,229
to find<font color="#CCCCCC"> box and security vulnerabilities</font>

384
00:21:06,229 --> 00:21:11,989
in an application<font color="#CCCCCC"> so if we disable the</font>

385
00:21:09,229 --> 00:21:15,440
web<font color="#E5E5E5"> we can find these vulnerabilities</font>

386
00:21:11,989 --> 00:21:17,479
more easily and eventually the

387
00:21:15,440 --> 00:21:22,309
assessment of the<font color="#E5E5E5"> security will provide</font>

388
00:21:17,479 --> 00:21:26,839
more accurate results<font color="#E5E5E5"> so what we try to</font>

389
00:21:22,309 --> 00:21:30,080
accomplish is to tell the customer to

390
00:21:26,839 --> 00:21:32,479
disable the web for one or two days<font color="#E5E5E5"> and</font>

391
00:21:30,080 --> 00:21:35,449
if the<font color="#CCCCCC"> wettest disabled we can have a</font>

392
00:21:32,479 --> 00:21:38,210
more focused approach to find

393
00:21:35,450 --> 00:21:40,519
vulnerabilities or find where the bullet

394
00:21:38,210 --> 00:21:43,039
vulnerabilities in<font color="#E5E5E5"> an application are</font>

395
00:21:40,519 --> 00:21:46,639
and if later the weapons turned on again

396
00:21:43,039 --> 00:21:50,989
<font color="#E5E5E5">we can try to we know where</font><font color="#CCCCCC"> where to</font>

397
00:21:46,639 --> 00:21:53,599
search but that's why it's called<font color="#E5E5E5"> pay</font>

398
00:21:50,989 --> 00:21:55,249
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> it maybe</font><font color="#E5E5E5"> not realizable in every</font>

399
00:21:53,599 --> 00:22:01,129
penetration<font color="#E5E5E5"> test for instance if the</font>

400
00:21:55,249 --> 00:22:07,190
customer once<font color="#CCCCCC"> to wants to wants</font><font color="#E5E5E5"> you to</font>

401
00:22:01,129 --> 00:22:09,049
test<font color="#E5E5E5"> productive system and after that as</font>

402
00:22:07,190 --> 00:22:11,659
you said correctly is the reconnaissance

403
00:22:09,049 --> 00:22:14,450
<font color="#CCCCCC">space so what we try here is to gather</font>

404
00:22:11,659 --> 00:22:17,299
information about the target<font color="#E5E5E5"> about the</font>

405
00:22:14,450 --> 00:22:19,219
web about the<font color="#CCCCCC"> web server about the</font>

406
00:22:17,299 --> 00:22:46,910
programming language that it was used

407
00:22:19,219 --> 00:24:05,390
about<font color="#CCCCCC"> it</font>

408
00:22:46,910 --> 00:24:31,030
[Music]

409
00:24:05,390 --> 00:24:38,260
[Music]

410
00:24:31,030 --> 00:24:40,149
<font color="#CCCCCC">ok ok</font>

411
00:24:38,260 --> 00:24:43,120
<font color="#E5E5E5">phase</font><font color="#CCCCCC"> three finding an impedance</font>

412
00:24:40,150 --> 00:24:47,290
mismatch<font color="#E5E5E5"> impedance mismatch to remember</font>

413
00:24:43,120 --> 00:24:49,959
you is to find a payload that is

414
00:24:47,290 --> 00:24:52,899
interpreted by the<font color="#E5E5E5"> web differently</font><font color="#CCCCCC"> than</font>

415
00:24:49,960 --> 00:24:54,010
by the<font color="#CCCCCC"> backend and therefore it may not</font>

416
00:24:52,900 --> 00:24:58,390
<font color="#CCCCCC">detect it</font>

417
00:24:54,010 --> 00:25:01,240
<font color="#CCCCCC">so what is really important here is what</font>

418
00:24:58,390 --> 00:25:04,570
<font color="#E5E5E5">really important is is to have knowledge</font>

419
00:25:01,240 --> 00:25:06,550
about the<font color="#CCCCCC"> backend system which we have</font>

420
00:25:04,570 --> 00:25:13,000
hopefully<font color="#CCCCCC"> acquired in</font><font color="#E5E5E5"> the reconnaissance</font>

421
00:25:06,550 --> 00:25:16,540
<font color="#E5E5E5">face in the fourth phase we try to</font>

422
00:25:13,000 --> 00:25:18,880
bypass the<font color="#E5E5E5"> ruleset again we have the</font>

423
00:25:16,540 --> 00:25:20,740
<font color="#E5E5E5">brute force method where we just brute</font>

424
00:25:18,880 --> 00:25:23,410
force<font color="#E5E5E5"> our different payloads and hope</font>

425
00:25:20,740 --> 00:25:26,470
for<font color="#E5E5E5"> palin to be not detected by the web</font>

426
00:25:23,410 --> 00:25:29,110
and we have the more intelligent<font color="#CCCCCC"> a</font>

427
00:25:26,470 --> 00:25:32,020
method where we try to<font color="#E5E5E5"> reverse-engineer</font>

428
00:25:29,110 --> 00:25:37,540
the rules it<font color="#CCCCCC"> so what we actually do is</font>

429
00:25:32,020 --> 00:25:41,139
to send symbols like<font color="#CCCCCC"> double double quote</font>

430
00:25:37,540 --> 00:25:43,540
or a smaller sign or a bigger sign and

431
00:25:41,140 --> 00:25:46,540
<font color="#CCCCCC">see does their web block our</font><font color="#E5E5E5"> requests</font>

432
00:25:43,540 --> 00:25:49,450
<font color="#CCCCCC">are not then we observe whether</font><font color="#E5E5E5"> the</font>

433
00:25:46,540 --> 00:25:51,639
block<font color="#E5E5E5"> the string or the</font><font color="#CCCCCC"> characters</font>

434
00:25:49,450 --> 00:25:54,670
<font color="#E5E5E5">blocked or not</font><font color="#CCCCCC"> and in the</font><font color="#E5E5E5"> end we have a</font>

435
00:25:51,640 --> 00:25:56,530
nice list of the<font color="#CCCCCC"> rule set of the web</font><font color="#E5E5E5"> we</font>

436
00:25:54,670 --> 00:26:03,820
know which characters are blocked and

437
00:25:56,530 --> 00:26:06,670
which are not taste<font color="#CCCCCC"> 5 would be to find</font>

438
00:26:03,820 --> 00:26:08,919
other vulnerabilities<font color="#CCCCCC"> so</font><font color="#E5E5E5"> so there are</font>

439
00:26:06,670 --> 00:26:10,390
vulnerabilities that cannot be blocked

440
00:26:08,920 --> 00:26:12,280
by web at all

441
00:26:10,390 --> 00:26:15,430
for instance<font color="#E5E5E5"> if we have</font><font color="#CCCCCC"> owner abilities</font>

442
00:26:12,280 --> 00:26:18,070
in the application logic for instance a

443
00:26:15,430 --> 00:26:21,220
broken authentication mechanism or a

444
00:26:18,070 --> 00:26:23,470
privilege escalation vulnerability and

445
00:26:21,220 --> 00:26:25,540
so on and so forth so these

446
00:26:23,470 --> 00:26:29,770
vulnerabilities cannot be detected by

447
00:26:25,540 --> 00:26:35,260
<font color="#E5E5E5">web and we have to assess the</font>

448
00:26:29,770 --> 00:26:36,129
application for such a vulnerability and

449
00:26:35,260 --> 00:26:39,910
face

450
00:26:36,130 --> 00:26:41,740
number<font color="#E5E5E5"> six is</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> is after the</font><font color="#CCCCCC"> pentas so</font>

451
00:26:39,910 --> 00:26:43,960
now is the<font color="#E5E5E5"> face where we are done with</font>

452
00:26:41,740 --> 00:26:44,840
our penetration test and we have to

453
00:26:43,960 --> 00:26:47,150
inform the<font color="#CCCCCC"> cut</font>

454
00:26:44,840 --> 00:26:51,799
<font color="#CCCCCC">I'm about the vulnerabilities that we</font>

455
00:26:47,150 --> 00:26:54,500
have found<font color="#E5E5E5"> so the best advice that you</font>

456
00:26:51,799 --> 00:26:57,379
can give your customer is to fix the

457
00:26:54,500 --> 00:27:00,440
root cause of vulnerability<font color="#CCCCCC"> so if you</font>

458
00:26:57,380 --> 00:27:02,480
for instance<font color="#E5E5E5"> heaven</font><font color="#CCCCCC"> has ever have a SQL</font>

459
00:27:00,440 --> 00:27:05,659
injection vulnerability in your

460
00:27:02,480 --> 00:27:09,140
application<font color="#CCCCCC"> are cross-site scripting</font>

461
00:27:05,659 --> 00:27:11,539
<font color="#E5E5E5">applique vulnerability the</font><font color="#CCCCCC"> customer</font>

462
00:27:09,140 --> 00:27:14,630
<font color="#E5E5E5">should not just put a rule into the web</font>

463
00:27:11,539 --> 00:27:18,440
to block all<font color="#E5E5E5"> malicious request but</font>

464
00:27:14,630 --> 00:27:23,390
should<font color="#E5E5E5"> them fix the root cause which is</font>

465
00:27:18,440 --> 00:27:26,960
the<font color="#CCCCCC"> the</font><font color="#E5E5E5"> application itself for the</font><font color="#CCCCCC"> time</font>

466
00:27:23,390 --> 00:27:33,080
<font color="#CCCCCC">being why the application is getting</font>

467
00:27:26,960 --> 00:27:34,669
fixed<font color="#E5E5E5"> the web should be and should rule</font>

468
00:27:33,080 --> 00:27:38,870
should be added to the web which

469
00:27:34,669 --> 00:27:41,809
virtually patches<font color="#E5E5E5"> this vulnerability and</font>

470
00:27:38,870 --> 00:27:45,110
sometimes you may use an application

471
00:27:41,809 --> 00:27:46,970
from<font color="#CCCCCC"> a third-party are</font><font color="#E5E5E5"> you using a very</font>

472
00:27:45,110 --> 00:27:49,969
old application where you do not have

473
00:27:46,970 --> 00:27:51,740
the ability to change the source<font color="#CCCCCC"> code</font>

474
00:27:49,970 --> 00:27:54,289
<font color="#CCCCCC">where</font><font color="#E5E5E5"> you do not have the ability to fix</font>

475
00:27:51,740 --> 00:27:56,960
the<font color="#CCCCCC"> route the vulnerability so you have</font>

476
00:27:54,289 --> 00:28:01,399
to apply rules<font color="#E5E5E5"> to the left to fix this</font>

477
00:27:56,960 --> 00:28:05,450
vulnerability and what is very important

478
00:28:01,399 --> 00:28:08,239
for the customer to understand is that a

479
00:28:05,450 --> 00:28:11,000
web<font color="#CCCCCC"> main</font><font color="#E5E5E5"> mitigate of vulnerability but</font>

480
00:28:08,240 --> 00:28:19,190
it cannot<font color="#E5E5E5"> thoroughly thoroughly</font><font color="#CCCCCC"> fix</font><font color="#E5E5E5"> it</font>

481
00:28:11,000 --> 00:28:23,419
coming to the last aspect of my talk

482
00:28:19,190 --> 00:28:32,720
which is a program<font color="#CCCCCC"> i developed during my</font>

483
00:28:23,419 --> 00:28:36,320
<font color="#E5E5E5">bachelor thesis called</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> ninja</font>

484
00:28:32,720 --> 00:28:39,919
<font color="#E5E5E5">so weapon job is a comment line</font>

485
00:28:36,320 --> 00:28:42,918
interface<font color="#E5E5E5"> to written in</font><font color="#CCCCCC"> python</font><font color="#E5E5E5"> and what</font>

486
00:28:39,919 --> 00:28:46,130
it does is<font color="#CCCCCC"> it's automate some of them</font>

487
00:28:42,919 --> 00:28:49,100
parts<font color="#CCCCCC"> or some of the faces of the</font>

488
00:28:46,130 --> 00:28:52,130
approach we have just talked about<font color="#E5E5E5"> was</font>

489
00:28:49,100 --> 00:28:54,350
already in several penetration tests and

490
00:28:52,130 --> 00:28:57,679
you can now find it on get up<font color="#CCCCCC"> it's open</font>

491
00:28:54,350 --> 00:29:02,389
sauce and<font color="#E5E5E5"> yeah you can find it on the</font>

492
00:28:57,679 --> 00:29:04,220
<font color="#E5E5E5">internet</font><font color="#CCCCCC"> supports https connections it</font>

493
00:29:02,390 --> 00:29:07,159
supports the use of get and post

494
00:29:04,220 --> 00:29:10,549
<font color="#CCCCCC">parametres</font><font color="#E5E5E5"> the usage of cookies and you</font>

495
00:29:07,159 --> 00:29:17,030
can also<font color="#CCCCCC"> set up an intercepting proxy</font>

496
00:29:10,549 --> 00:29:19,820
<font color="#E5E5E5">wealth manager has a function called the</font>

497
00:29:17,030 --> 00:29:22,580
<font color="#E5E5E5">positive function or</font><font color="#CCCCCC"> yet the first</font>

498
00:29:19,820 --> 00:29:26,299
function<font color="#CCCCCC"> so what it does is causing the</font>

499
00:29:22,580 --> 00:29:28,970
application<font color="#E5E5E5"> it</font><font color="#CCCCCC"> sends different keywords</font>

500
00:29:26,299 --> 00:29:31,490
and payloads to the application and

501
00:29:28,970 --> 00:29:34,460
analyzes<font color="#CCCCCC"> the response and tries to</font>

502
00:29:31,490 --> 00:29:36,740
detect whether the<font color="#CCCCCC"> read whether the</font>

503
00:29:34,460 --> 00:29:40,220
<font color="#CCCCCC">payloads it was it has sent whether they</font>

504
00:29:36,740 --> 00:29:42,020
were blocked blocked by a web or not<font color="#CCCCCC"> and</font>

505
00:29:40,220 --> 00:29:44,480
in the<font color="#E5E5E5"> end the results are displayed in</font>

506
00:29:42,020 --> 00:29:47,450
a clear and concise way<font color="#CCCCCC"> so we have a</font>

507
00:29:44,480 --> 00:29:49,909
nice<font color="#E5E5E5"> output at the end where you can</font>

508
00:29:47,450 --> 00:29:54,140
just check is this symbol blocked or not

509
00:29:49,909 --> 00:29:58,070
<font color="#E5E5E5">and you can always extend the fuzzing</font>

510
00:29:54,140 --> 00:30:03,020
strings with a function called insert<font color="#E5E5E5"> us</font>

511
00:29:58,070 --> 00:30:15,040
so<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> prepared a small team of the</font>

512
00:30:03,020 --> 00:30:18,370
tool just<font color="#E5E5E5"> to show you how it works</font>

513
00:30:15,040 --> 00:30:20,170
<font color="#E5E5E5">so what we have here is the damn</font>

514
00:30:18,370 --> 00:30:23,169
vulnerable web application which

515
00:30:20,170 --> 00:30:26,560
probably the most of you know already

516
00:30:23,170 --> 00:30:29,140
it's a application used to test

517
00:30:26,560 --> 00:30:31,629
different vulnerabilities<font color="#E5E5E5"> and to get in</font>

518
00:30:29,140 --> 00:30:34,840
to get a little bit of experience with

519
00:30:31,630 --> 00:30:38,320
these technologies for instance we have

520
00:30:34,840 --> 00:30:42,280
this field which says what is your name

521
00:30:38,320 --> 00:30:44,770
<font color="#CCCCCC">and as you can see in the title 10 with</font>

522
00:30:42,280 --> 00:30:47,950
the vulnerability is called reflected

523
00:30:44,770 --> 00:30:50,020
<font color="#E5E5E5">cross-site scripting</font><font color="#CCCCCC"> so what we we have</font>

524
00:30:47,950 --> 00:30:57,880
an input field where we enter our name

525
00:30:50,020 --> 00:31:02,139
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> instance</font><font color="#CCCCCC"> enter my name Carly</font><font color="#E5E5E5"> and</font>

526
00:30:57,880 --> 00:31:03,820
as you can see it says hello<font color="#E5E5E5"> Carly what</font>

527
00:31:02,140 --> 00:31:05,200
<font color="#E5E5E5">the penetration for</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> penetration</font>

528
00:31:03,820 --> 00:31:08,830
<font color="#CCCCCC">testing</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> office</font><font color="#E5E5E5"> cross-site</font>

529
00:31:05,200 --> 00:31:16,690
<font color="#E5E5E5">scripting so what we now try is</font><font color="#CCCCCC"> Colleen</font>

530
00:31:08,830 --> 00:31:19,990
<font color="#CCCCCC">script</font><font color="#E5E5E5"> alert one script and we try to</font>

531
00:31:16,690 --> 00:31:23,050
execute our<font color="#CCCCCC"> requests and see</font><font color="#E5E5E5"> oh we got a</font>

532
00:31:19,990 --> 00:31:25,240
web application firewall alert so<font color="#E5E5E5"> the</font>

533
00:31:23,050 --> 00:31:30,220
<font color="#E5E5E5">application is now secured by a</font><font color="#CCCCCC"> web</font>

534
00:31:25,240 --> 00:31:33,130
<font color="#E5E5E5">called</font><font color="#CCCCCC"> webknight</font><font color="#E5E5E5"> which is</font><font color="#CCCCCC"> an open-source</font>

535
00:31:30,220 --> 00:31:38,050
<font color="#E5E5E5">web application firewall</font><font color="#CCCCCC"> made by the</font>

536
00:31:33,130 --> 00:31:40,150
company electronics so our payload is

537
00:31:38,050 --> 00:31:42,730
blocked what are we going to do now

538
00:31:40,150 --> 00:31:44,650
<font color="#E5E5E5">normally what</font><font color="#CCCCCC"> a penetration tester is</font>

539
00:31:42,730 --> 00:31:47,530
going to do is going to try two

540
00:31:44,650 --> 00:31:52,360
different<font color="#E5E5E5"> to try different payloads and</font>

541
00:31:47,530 --> 00:31:57,430
different variations of his input so

542
00:31:52,360 --> 00:32:05,889
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> and this is where the</font><font color="#E5E5E5"> two weapons</font>

543
00:31:57,430 --> 00:32:08,800
<font color="#CCCCCC">are</font><font color="#E5E5E5"> comes into the game</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> what we</font>

544
00:32:05,890 --> 00:32:18,419
can<font color="#CCCCCC"> first</font><font color="#E5E5E5"> of all do is to start the tool</font>

545
00:32:08,800 --> 00:32:23,700
and look at the help<font color="#CCCCCC"> fire works</font>

546
00:32:18,419 --> 00:32:33,560
<font color="#CCCCCC">ok moment i'll have to make it a little</font>

547
00:32:23,700 --> 00:32:45,650
bit bigger so you can<font color="#CCCCCC"> also see</font>

548
00:32:33,560 --> 00:32:54,759
[Music]

549
00:32:45,650 --> 00:32:57,579
<font color="#CCCCCC">ok</font>

550
00:32:54,759 --> 00:33:06,940
<font color="#CCCCCC">ok I think</font><font color="#E5E5E5"> you can now see what it</font><font color="#CCCCCC"> it</font>

551
00:32:57,579 --> 00:33:15,489
looks<font color="#E5E5E5"> like</font><font color="#CCCCCC"> I'm great</font>

552
00:33:06,940 --> 00:33:17,320
<font color="#CCCCCC">ok so this is again the help file so it</font>

553
00:33:15,489 --> 00:33:19,629
says<font color="#CCCCCC"> wealth manager penetration</font><font color="#E5E5E5"> testers</font>

554
00:33:17,320 --> 00:33:25,359
have<font color="#CCCCCC"> a favorite for penetration testing</font>

555
00:33:19,629 --> 00:33:27,069
<font color="#CCCCCC">we have different methods and techniques</font>

556
00:33:25,359 --> 00:33:29,529
we have the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> technique which we</font>

557
00:33:27,069 --> 00:33:32,289
just talked about<font color="#CCCCCC"> we have the bypass</font>

558
00:33:29,529 --> 00:33:34,569
technique which is the primitive method

559
00:33:32,289 --> 00:33:37,209
of just trying different payloads and

560
00:33:34,569 --> 00:33:38,799
hoping that one gets through the web and

561
00:33:37,209 --> 00:33:41,739
then we have other functions where we

562
00:33:38,799 --> 00:33:45,729
can insert the fuzzing stream<font color="#CCCCCC"> a string</font>

563
00:33:41,739 --> 00:33:58,299
or<font color="#E5E5E5"> insert a payload string so we want to</font>

564
00:33:45,729 --> 00:34:07,239
use the first function and this is<font color="#CCCCCC"> so</font>

565
00:33:58,299 --> 00:34:08,949
<font color="#CCCCCC">tight and wet noon dot py ok</font><font color="#E5E5E5"> so as you</font>

566
00:34:07,239 --> 00:34:11,379
can see this is how the comment looks

567
00:34:08,949 --> 00:34:14,949
like<font color="#E5E5E5"> looks more complicated than it is</font>

568
00:34:11,379 --> 00:34:23,618
<font color="#CCCCCC">so the</font><font color="#E5E5E5"> first thing is between the first</font>

569
00:34:14,949 --> 00:34:31,239
thing that we need is a URL<font color="#CCCCCC"> so-</font><font color="#E5E5E5"> you and</font>

570
00:34:23,619 --> 00:34:36,339
<font color="#CCCCCC">I'll copy the URL from here and a city</font>

571
00:34:31,239 --> 00:34:39,219
<font color="#E5E5E5">so use double quotes and the parameter</font>

572
00:34:36,339 --> 00:34:44,049
we want to send our<font color="#CCCCCC"> buzzing strings has</font>

573
00:34:39,219 --> 00:34:45,908
to be changed and we have to add the

574
00:34:44,049 --> 00:34:52,929
keyword<font color="#CCCCCC"> buzzes</font><font color="#E5E5E5"> into it</font>

575
00:34:45,909 --> 00:34:55,179
the<font color="#E5E5E5"> next thing that we need is</font><font color="#CCCCCC"> ok the</font>

576
00:34:52,929 --> 00:34:57,910
next<font color="#E5E5E5"> thing that we could provide our</font>

577
00:34:55,179 --> 00:35:00,519
post<font color="#CCCCCC"> parametres but as we have a get</font>

578
00:34:57,910 --> 00:35:03,368
request we don't need this<font color="#E5E5E5"> you but</font><font color="#CCCCCC"> what</font>

579
00:35:00,519 --> 00:35:04,328
we<font color="#E5E5E5"> need is the</font><font color="#CCCCCC"> sea parameter for using a</font>

580
00:35:03,369 --> 00:35:08,320
cookie

581
00:35:04,329 --> 00:35:11,620
so we have to provide the cookie

582
00:35:08,320 --> 00:35:17,050
<font color="#E5E5E5">this is something</font><font color="#CCCCCC"> I have</font><font color="#E5E5E5"> to copy from</font>

583
00:35:11,620 --> 00:35:23,049
here<font color="#CCCCCC"> i also have to look on the big</font>

584
00:35:17,050 --> 00:35:30,340
screen to happen<font color="#E5E5E5"> see what you see here</font>

585
00:35:23,050 --> 00:35:39,760
<font color="#CCCCCC">this</font><font color="#E5E5E5"> so show me the cookies again here</font>

586
00:35:30,340 --> 00:35:42,310
and<font color="#CCCCCC"> I copy the value of it says</font><font color="#E5E5E5"> ID and</font>

587
00:35:39,760 --> 00:35:47,770
there's a second cookie called security

588
00:35:42,310 --> 00:35:49,930
<font color="#E5E5E5">which is this is the setting for setting</font>

589
00:35:47,770 --> 00:35:52,300
the security level of the application<font color="#CCCCCC"> so</font>

590
00:35:49,930 --> 00:35:56,859
if you set it too high<font color="#E5E5E5"> the vulnerability</font>

591
00:35:52,300 --> 00:36:00,850
should be<font color="#CCCCCC"> unexploited them and the</font>

592
00:35:56,860 --> 00:36:03,040
<font color="#E5E5E5">security use</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> cookie is a cookie up</font>

593
00:36:00,850 --> 00:36:04,089
the damn vulnerable<font color="#CCCCCC"> web application i</font>

594
00:36:03,040 --> 00:36:12,430
think<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> clear</font>

595
00:36:04,090 --> 00:36:15,580
<font color="#CCCCCC">ok so the next thing is the minus T</font>

596
00:36:12,430 --> 00:36:17,529
<font color="#E5E5E5">parameter where we have to define</font>

597
00:36:15,580 --> 00:36:20,319
whether we want to test for<font color="#E5E5E5"> cross-site</font>

598
00:36:17,530 --> 00:36:26,050
scripting vulnerability of<font color="#CCCCCC"> forest SQL</font>

599
00:36:20,320 --> 00:36:28,540
injection<font color="#CCCCCC"> Soyuz</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> T exercises then</font>

600
00:36:26,050 --> 00:36:31,300
<font color="#E5E5E5">we have a the option to set up a delay</font>

601
00:36:28,540 --> 00:36:33,279
<font color="#E5E5E5">where we can set</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> delay between each</font>

602
00:36:31,300 --> 00:36:35,290
request because the<font color="#E5E5E5"> web application</font>

603
00:36:33,280 --> 00:36:37,840
<font color="#E5E5E5">firewall may be configured in such a way</font>

604
00:36:35,290 --> 00:36:41,230
that if you<font color="#E5E5E5"> send too many requests in a</font>

605
00:36:37,840 --> 00:36:43,750
very short time of<font color="#E5E5E5"> in a very shot matter</font>

606
00:36:41,230 --> 00:36:46,600
of time that you<font color="#E5E5E5"> your IP address will be</font>

607
00:36:43,750 --> 00:36:50,380
blocked<font color="#E5E5E5"> but we don't need it for our</font>

608
00:36:46,600 --> 00:36:56,710
<font color="#E5E5E5">demo the next</font><font color="#CCCCCC"> parameter</font><font color="#E5E5E5"> is the ultrafine</font>

609
00:36:50,380 --> 00:37:01,030
<font color="#CCCCCC">so we want a nice</font><font color="#E5E5E5"> HTML file and where</font>

610
00:36:56,710 --> 00:37:03,700
<font color="#E5E5E5">the results are displayed</font><font color="#CCCCCC"> we can set up</font>

611
00:37:01,030 --> 00:37:07,000
a proxy if we want<font color="#E5E5E5"> like</font><font color="#CCCCCC"> purple something</font>

612
00:37:03,700 --> 00:37:10,359
we can<font color="#CCCCCC"> set up a prefix so there is a</font>

613
00:37:07,000 --> 00:37:12,580
string<font color="#CCCCCC"> edit</font><font color="#E5E5E5"> at the at the beginning of</font>

614
00:37:10,360 --> 00:37:15,460
every<font color="#CCCCCC"> buzzing string</font><font color="#E5E5E5"> or we can add</font><font color="#CCCCCC"> the</font>

615
00:37:12,580 --> 00:37:17,110
<font color="#CCCCCC">postfix where a string is edit</font><font color="#E5E5E5"> at the</font>

616
00:37:15,460 --> 00:37:21,319
end of every<font color="#CCCCCC"> person</font><font color="#E5E5E5"> stream</font>

617
00:37:17,110 --> 00:37:27,799
<font color="#CCCCCC">ok so i think we are good to go</font>

618
00:37:21,319 --> 00:37:32,239
<font color="#E5E5E5">we start the application and what you</font>

619
00:37:27,799 --> 00:37:40,219
can see is that we have sent<font color="#E5E5E5"> hundred and</font>

620
00:37:32,239 --> 00:37:42,469
<font color="#E5E5E5">eighty-five and</font><font color="#CCCCCC"> 58</font><font color="#E5E5E5"> sorry housing strings</font>

621
00:37:40,219 --> 00:37:48,380
to the application and that the output

622
00:37:42,469 --> 00:37:52,160
was<font color="#CCCCCC"> saved to results or HTML so if you</font>

623
00:37:48,380 --> 00:37:58,099
<font color="#E5E5E5">know how did you call it results dot</font>

624
00:37:52,160 --> 00:38:05,118
HTML<font color="#E5E5E5"> so we can then open the HTML file</font>

625
00:37:58,099 --> 00:38:07,999
<font color="#CCCCCC">let's use</font><font color="#E5E5E5"> firefox</font><font color="#CCCCCC"> ok so this is the</font>

626
00:38:05,119 --> 00:38:09,589
result that weapon<font color="#CCCCCC"> engine produces at</font>

627
00:38:07,999 --> 00:38:12,618
the top you have some information like

628
00:38:09,589 --> 00:38:15,709
what was the target<font color="#E5E5E5"> and was there a</font>

629
00:38:12,619 --> 00:38:20,839
delay or not<font color="#E5E5E5"> and so on and</font><font color="#CCCCCC"> so forth</font><font color="#E5E5E5"> and</font>

630
00:38:15,709 --> 00:38:22,969
<font color="#E5E5E5">on the left side in the closet column</font>

631
00:38:20,839 --> 00:38:25,459
you see<font color="#E5E5E5"> what which</font><font color="#CCCCCC"> string was actually</font>

632
00:38:22,969 --> 00:38:28,130
sent to the application

633
00:38:25,459 --> 00:38:30,379
HTTP status is often an indicator

634
00:38:28,130 --> 00:38:32,630
whether the<font color="#CCCCCC"> the week</font>

635
00:38:30,380 --> 00:38:35,209
the request was blocked or not for

636
00:38:32,630 --> 00:38:39,140
instance<font color="#E5E5E5"> the</font><font color="#CCCCCC"> website</font><font color="#E5E5E5"> web application</font>

637
00:38:35,209 --> 00:38:42,198
firewall<font color="#E5E5E5"> sense the</font><font color="#CCCCCC"> HDTV</font><font color="#E5E5E5"> set us</font><font color="#CCCCCC"> 99</font><font color="#E5E5E5"> back</font>

638
00:38:39,140 --> 00:38:45,170
<font color="#CCCCCC">if the request was blocked then we have</font>

639
00:38:42,199 --> 00:38:48,799
the content length which<font color="#E5E5E5"> may be also</font>

640
00:38:45,170 --> 00:38:51,140
useful if<font color="#E5E5E5"> to analyze whether the web the</font>

641
00:38:48,799 --> 00:38:53,209
<font color="#CCCCCC">the ricans was blocked or not</font><font color="#E5E5E5"> because</font>

642
00:38:51,140 --> 00:38:58,489
<font color="#E5E5E5">sometimes the</font><font color="#CCCCCC"> web does not change the</font>

643
00:38:53,209 --> 00:39:04,098
HTTP<font color="#CCCCCC"> status</font><font color="#E5E5E5"> and just says 200</font><font color="#CCCCCC"> i'm</font>

644
00:38:58,489 --> 00:39:07,459
expected is used<font color="#CCCCCC"> is also start</font><font color="#E5E5E5"> in the</font>

645
00:39:04,099 --> 00:39:09,229
database of<font color="#CCCCCC"> web upwelling jump</font><font color="#E5E5E5"> because</font>

646
00:39:07,459 --> 00:39:12,169
sometimes you sent a payload which is

647
00:39:09,229 --> 00:39:14,180
URL encoded<font color="#E5E5E5"> and if it gets reflected by</font>

648
00:39:12,170 --> 00:39:16,519
the web server at the end<font color="#CCCCCC"> it does not</font>

649
00:39:14,180 --> 00:39:19,578
come<font color="#CCCCCC"> your</font><font color="#E5E5E5"> URL encoded back</font>

650
00:39:16,519 --> 00:39:21,948
so what the<font color="#E5E5E5"> weft rise is to get the</font>

651
00:39:19,579 --> 00:39:26,509
<font color="#CCCCCC">results look</font><font color="#E5E5E5"> in the source code for this</font>

652
00:39:21,949 --> 00:39:30,199
value for instance now the smaller<font color="#E5E5E5"> tag</font>

653
00:39:26,509 --> 00:39:33,130
<font color="#E5E5E5">and if it finds it then it also displays</font>

654
00:39:30,199 --> 00:39:37,450
it here in the output<font color="#CCCCCC"> color</font>

655
00:39:33,130 --> 00:39:40,029
<font color="#E5E5E5">and working is self-explanatory</font>

656
00:39:37,450 --> 00:39:43,899
<font color="#E5E5E5">you have no not working and the yes for</font>

657
00:39:40,029 --> 00:39:46,990
working<font color="#E5E5E5"> so what we now try to find is a</font>

658
00:39:43,900 --> 00:39:49,900
<font color="#CCCCCC">the first thing that we try this</font>

659
00:39:46,990 --> 00:39:52,299
the script and as you can see as also

660
00:39:49,900 --> 00:39:54,910
the tool<font color="#E5E5E5"> tells us it is blocked by the</font>

661
00:39:52,299 --> 00:39:57,609
web so we cannot use it<font color="#CCCCCC"> so what we now</font>

662
00:39:54,910 --> 00:40:07,569
<font color="#E5E5E5">tries to find another tech and if we</font>

663
00:39:57,609 --> 00:40:10,299
scroll a little bit down<font color="#CCCCCC"> who and search</font>

664
00:40:07,569 --> 00:40:14,288
for<font color="#E5E5E5"> tax</font><font color="#CCCCCC"> i'll</font><font color="#E5E5E5"> make it a little bit bigger</font>

665
00:40:10,299 --> 00:40:17,559
so I think that's better<font color="#E5E5E5"> now</font>

666
00:40:14,289 --> 00:40:19,990
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> and now we can look for different</font>

667
00:40:17,559 --> 00:40:22,240
tags which are not blocked by<font color="#E5E5E5"> them</font><font color="#CCCCCC"> where</font>

668
00:40:19,990 --> 00:40:27,549
<font color="#E5E5E5">for instance we have the image sauce</font><font color="#CCCCCC"> tag</font>

669
00:40:22,240 --> 00:40:31,149
<font color="#E5E5E5">so what we can do is to verify whether</font>

670
00:40:27,549 --> 00:40:38,349
it is a false positive or not we can

671
00:40:31,150 --> 00:40:42,609
copy it and paste it into our

672
00:40:38,349 --> 00:40:44,859
application we send it<font color="#CCCCCC"> and</font><font color="#E5E5E5"> as you can</font>

673
00:40:42,609 --> 00:40:47,859
see it was not blocked by the web and

674
00:40:44,859 --> 00:40:52,328
the web application processes<font color="#CCCCCC"> so what we</font>

675
00:40:47,859 --> 00:40:55,480
now do what we now need is a<font color="#CCCCCC"> JavaScript</font>

676
00:40:52,329 --> 00:40:57,579
<font color="#CCCCCC">function where we can insert javascript</font>

677
00:40:55,480 --> 00:41:00,220
who has an idea which function we can

678
00:40:57,579 --> 00:41:06,759
use<font color="#E5E5E5"> an</font><font color="#CCCCCC"> error very good</font>

679
00:41:00,220 --> 00:41:09,220
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so we try on error equals</font><font color="#CCCCCC"> okay</font>

680
00:41:06,759 --> 00:41:14,230
without adding anything more

681
00:41:09,220 --> 00:41:14,709
so we try it and<font color="#CCCCCC"> to get blocked</font><font color="#E5E5E5"> bad for</font>

682
00:41:14,230 --> 00:41:17,440
<font color="#E5E5E5">us</font>

683
00:41:14,710 --> 00:41:22,750
so what we can do next who knows another

684
00:41:17,440 --> 00:41:25,539
function on click we get blocked

685
00:41:22,750 --> 00:41:28,690
<font color="#CCCCCC">ok and this is the game that we are</font>

686
00:41:25,539 --> 00:41:31,599
going to play<font color="#CCCCCC"> so what we try to what we</font>

687
00:41:28,690 --> 00:41:34,119
what we did was we use weapon inja<font color="#E5E5E5"> and</font>

688
00:41:31,599 --> 00:41:36,519
now have a nice list of every<font color="#E5E5E5"> javascript</font>

689
00:41:34,119 --> 00:41:38,890
function<font color="#E5E5E5"> that works and which is not</font>

690
00:41:36,519 --> 00:41:41,740
work<font color="#CCCCCC"> in there are over a hundred fifty</font>

691
00:41:38,890 --> 00:41:45,578
JavaScript functions<font color="#E5E5E5"> and actually when I</font>

692
00:41:41,740 --> 00:41:46,750
when<font color="#E5E5E5"> I</font><font color="#CCCCCC"> assess that this open-source</font><font color="#E5E5E5"> web</font>

693
00:41:45,579 --> 00:41:48,700
application firewall

694
00:41:46,750 --> 00:41:51,040
<font color="#E5E5E5">there was one function which was not</font>

695
00:41:48,700 --> 00:41:52,509
blocked in which was also<font color="#CCCCCC"> exploitable</font>

696
00:41:51,040 --> 00:41:55,120
<font color="#E5E5E5">because sometimes you have like</font>

697
00:41:52,510 --> 00:41:57,640
JavaScript functions which only use

698
00:41:55,120 --> 00:42:00,220
which only work if you have like media

699
00:41:57,640 --> 00:42:02,740
on your application<font color="#CCCCCC"> sounds or something</font>

700
00:42:00,220 --> 00:42:06,009
like that<font color="#CCCCCC"> so it's a little bit tricking</font>

701
00:42:02,740 --> 00:42:09,640
<font color="#CCCCCC">but</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> there's a function called anhui</font>

702
00:42:06,010 --> 00:42:16,120
<font color="#E5E5E5">which is not blocked by the web as you</font>

703
00:42:09,640 --> 00:42:29,710
can see here and we can just use it yet

704
00:42:16,120 --> 00:42:34,900
<font color="#E5E5E5">so we try to insert it and see whether</font>

705
00:42:29,710 --> 00:42:38,020
we are blocked a lot

706
00:42:34,900 --> 00:42:40,330
<font color="#CCCCCC">ok and as you can see we wear what we</font>

707
00:42:38,020 --> 00:42:43,630
<font color="#CCCCCC">wear not blocked now the last thing that</font>

708
00:42:40,330 --> 00:42:45,490
we need is<font color="#CCCCCC"> a JavaScript function like a</font>

709
00:42:43,630 --> 00:42:47,530
lot of something<font color="#E5E5E5"> and this is also</font>

710
00:42:45,490 --> 00:42:50,770
something that we can look up so<font color="#CCCCCC"> we can</font>

711
00:42:47,530 --> 00:42:52,870
<font color="#E5E5E5">see is a lot blocked by the web and the</font>

712
00:42:50,770 --> 00:43:06,400
answer is no it is not locked so it's

713
00:42:52,870 --> 00:43:16,509
working<font color="#CCCCCC"> so we can also just copy it and</font>

714
00:43:06,400 --> 00:43:20,230
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the sauce x anhui</font><font color="#E5E5E5"> equals</font><font color="#CCCCCC"> 1</font>

715
00:43:16,510 --> 00:43:22,390
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> we're good to go to</font><font color="#E5E5E5"> execute</font>

716
00:43:20,230 --> 00:43:26,109
that we sent<font color="#CCCCCC"> a payload and then what we</font>

717
00:43:22,390 --> 00:43:27,730
have to do is to use the mouse<font color="#CCCCCC"> wing and</font>

718
00:43:26,109 --> 00:43:32,380
as you can see the payload is then

719
00:43:27,730 --> 00:43:35,680
processed by the browser<font color="#CCCCCC"> so we have</font>

720
00:43:32,380 --> 00:43:37,779
found the bypass<font color="#E5E5E5"> father's</font><font color="#CCCCCC"> letter</font><font color="#E5E5E5"> thank</font>

721
00:43:35,680 --> 00:43:43,660
you

722
00:43:37,779 --> 00:43:46,539
so we have<font color="#E5E5E5"> find</font><font color="#CCCCCC"> a payload that is not</font>

723
00:43:43,660 --> 00:43:48,970
blocked by the web<font color="#E5E5E5"> but is requested or</font>

724
00:43:46,539 --> 00:43:51,160
<font color="#CCCCCC">processed by</font><font color="#E5E5E5"> the web application and</font>

725
00:43:48,970 --> 00:43:54,009
<font color="#E5E5E5">actually when I reported this one</font>

726
00:43:51,160 --> 00:43:57,009
durability<font color="#E5E5E5"> the vendor he also gave me a</font>

727
00:43:54,010 --> 00:43:59,980
small<font color="#E5E5E5"> back</font><font color="#CCCCCC"> County so I was quite happy</font>

728
00:43:57,010 --> 00:44:02,289
<font color="#E5E5E5">and if you also want to try it out you</font>

729
00:43:59,980 --> 00:44:04,299
can just search for<font color="#E5E5E5"> wed night in the</font>

730
00:44:02,289 --> 00:44:06,490
<font color="#CCCCCC">internet</font><font color="#E5E5E5"> and if you find the</font>

731
00:44:04,299 --> 00:44:20,880
vulnerability also get a little bit of

732
00:44:06,490 --> 00:44:26,368
money

733
00:44:20,880 --> 00:44:29,250
<font color="#CCCCCC">ok that's it from my side I'm</font><font color="#E5E5E5"> happy to</font>

734
00:44:26,369 --> 00:44:36,329
<font color="#CCCCCC">hear your questions if you have</font><font color="#E5E5E5"> been</font>

735
00:44:29,250 --> 00:44:41,849
<font color="#CCCCCC">pleased</font>

736
00:44:36,329 --> 00:44:43,920
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> you said</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> fighting for</font>

737
00:44:41,849 --> 00:44:46,829
<font color="#CCCCCC">little</font><font color="#E5E5E5"> you wrote on the</font><font color="#CCCCCC"> conducive for</font>

738
00:44:43,920 --> 00:44:52,470
<font color="#CCCCCC">you use the beautiful beautiful</font><font color="#E5E5E5"> super</font>

739
00:44:46,829 --> 00:44:54,119
<font color="#CCCCCC">mixing</font><font color="#E5E5E5"> or some other</font><font color="#CCCCCC"> librarians yeah</font>

740
00:44:52,470 --> 00:44:57,868
<font color="#CCCCCC">that</font><font color="#E5E5E5"> everyone understand the question he</font>

741
00:44:54,119 --> 00:44:59,609
asked whether<font color="#CCCCCC"> i use Python father</font><font color="#E5E5E5"> as a</font>

742
00:44:57,869 --> 00:45:01,650
programming language for my<font color="#CCCCCC"> tool</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font>

743
00:44:59,609 --> 00:45:03,690
use<font color="#E5E5E5"> any libraries</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> not</font>

744
00:45:01,650 --> 00:45:06,539
yes<font color="#E5E5E5"> i did use libraries</font><font color="#CCCCCC"> there is a good</font>

745
00:45:03,690 --> 00:45:09,779
library<font color="#CCCCCC"> called your l</font><font color="#E5E5E5"> lip</font><font color="#CCCCCC"> to which</font><font color="#E5E5E5"> is</font>

746
00:45:06,539 --> 00:45:12,119
used to send requests and to receive

747
00:45:09,779 --> 00:45:13,859
responses<font color="#E5E5E5"> because</font><font color="#CCCCCC"> I didn't want to</font>

748
00:45:12,119 --> 00:45:17,069
program something on the circuit<font color="#E5E5E5"> level</font>

749
00:45:13,859 --> 00:45:19,259
<font color="#E5E5E5">so yeah I used to this library and it</font>

750
00:45:17,069 --> 00:45:22,319
was very good and easy to use so i can

751
00:45:19,259 --> 00:45:25,589
just<font color="#CCCCCC"> recommend it and</font><font color="#E5E5E5"> generally speaking</font>

752
00:45:22,319 --> 00:45:27,538
<font color="#CCCCCC">as I said you can find weapons on get up</font>

753
00:45:25,589 --> 00:45:29,759
you can download<font color="#E5E5E5"> it try it yourself and</font>

754
00:45:27,539 --> 00:45:32,819
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> very happy if you could provide some</font>

755
00:45:29,759 --> 00:45:35,309
date<font color="#E5E5E5"> please</font>

756
00:45:32,819 --> 00:45:37,140
<font color="#E5E5E5">happy happy tested</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> working jobs</font>

757
00:45:35,309 --> 00:45:40,529
on a pipe

758
00:45:37,140 --> 00:45:44,460
<font color="#E5E5E5">no I unfortunately not</font><font color="#CCCCCC"> i didn't have the</font>

759
00:45:40,529 --> 00:45:47,849
chance to<font color="#CCCCCC"> sow them</font><font color="#E5E5E5"> this this paper</font><font color="#CCCCCC"> I</font>

760
00:45:44,460 --> 00:45:50,220
<font color="#E5E5E5">wrote and also the tool</font><font color="#CCCCCC"> i developed</font>

761
00:45:47,849 --> 00:45:52,289
during my<font color="#CCCCCC"> Bachelorette visas and I</font>

762
00:45:50,220 --> 00:45:55,950
didn't have the resources to<font color="#CCCCCC"> buy f5</font>

763
00:45:52,289 --> 00:45:58,529
<font color="#E5E5E5">perfect for my home that so yeah</font><font color="#CCCCCC"> I only</font>

764
00:45:55,950 --> 00:46:01,589
used<font color="#CCCCCC"> open software</font><font color="#E5E5E5"> application firewalls</font>

765
00:45:58,529 --> 00:46:04,559
<font color="#CCCCCC">but there</font><font color="#E5E5E5"> was a paper</font><font color="#CCCCCC"> i think some</font>

766
00:46:01,589 --> 00:46:08,038
months ago<font color="#E5E5E5"> around six months ago</font>

767
00:46:04,559 --> 00:46:09,779
<font color="#E5E5E5">something</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> a guy called</font><font color="#CCCCCC"> magazine</font>

768
00:46:08,039 --> 00:46:12,599
<font color="#CCCCCC">Muhammad</font><font color="#E5E5E5"> who found several</font>

769
00:46:09,779 --> 00:46:16,650
vulnerabilities in it in the<font color="#CCCCCC"> improv a</font>

770
00:46:12,599 --> 00:46:20,309
<font color="#CCCCCC">pie</font><font color="#E5E5E5"> wall in several commercial firewalls</font>

771
00:46:16,650 --> 00:46:26,789
so yeah<font color="#E5E5E5"> you may also search for this</font>

772
00:46:20,309 --> 00:46:28,700
<font color="#CCCCCC">okay i think yes please</font>

773
00:46:26,789 --> 00:46:40,310
one<font color="#E5E5E5"> moment</font>

774
00:46:28,700 --> 00:46:44,390
<font color="#CCCCCC">the theory about wrl encoding</font><font color="#E5E5E5"> do you see</font>

775
00:46:40,310 --> 00:46:46,670
<font color="#CCCCCC">working</font><font color="#E5E5E5"> that you would</font><font color="#CCCCCC"> abate</font><font color="#E5E5E5"> something</font>

776
00:46:44,390 --> 00:46:50,299
because<font color="#E5E5E5"> double decoding or</font><font color="#CCCCCC"> I don't know</font>

777
00:46:46,670 --> 00:46:53,000
how many<font color="#E5E5E5"> times infinity decoding sounds</font>

778
00:46:50,300 --> 00:46:54,230
like<font color="#E5E5E5"> incorrect</font><font color="#CCCCCC"> behavior doing is</font>

779
00:46:53,000 --> 00:46:56,810
<font color="#CCCCCC">corrected that</font><font color="#E5E5E5"> this is incorrect</font>

780
00:46:54,230 --> 00:46:59,839
behavior and<font color="#CCCCCC"> you cite</font><font color="#E5E5E5"> find such a thing</font>

781
00:46:56,810 --> 00:47:03,140
<font color="#CCCCCC">that the web is</font><font color="#E5E5E5"> probably not a good wish</font>

782
00:46:59,839 --> 00:47:06,470
<font color="#CCCCCC">and you can just dismiss it</font><font color="#E5E5E5"> and i took</font>

783
00:47:03,140 --> 00:47:07,879
this technique from<font color="#CCCCCC"> Chinese</font><font color="#E5E5E5"> what it was</font>

784
00:47:06,470 --> 00:47:11,598
called<font color="#E5E5E5"> web application firewall</font>

785
00:47:07,880 --> 00:47:13,940
<font color="#CCCCCC">bypassing cookbook is so what he was</font>

786
00:47:11,599 --> 00:47:16,070
doing was using<font color="#CCCCCC"> Chinese</font><font color="#E5E5E5"> web application</font>

787
00:47:13,940 --> 00:47:18,290
firewalls and try to find<font color="#CCCCCC"> when</font><font color="#E5E5E5"> we will</font>

788
00:47:16,070 --> 00:47:22,040
<font color="#CCCCCC">do burner abilities in them</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> you're</font>

789
00:47:18,290 --> 00:47:24,440
<font color="#CCCCCC">correct i wouldn't suppose that that the</font>

790
00:47:22,040 --> 00:47:27,859
known<font color="#CCCCCC"> uno</font><font color="#E5E5E5"> web application</font><font color="#CCCCCC"> i was really</font>

791
00:47:24,440 --> 00:47:29,930
<font color="#E5E5E5">only decode URL encoded</font><font color="#CCCCCC"> strings once so</font>

792
00:47:27,859 --> 00:47:33,380
<font color="#CCCCCC">I also think that it's very unlikely</font>

793
00:47:29,930 --> 00:47:35,930
that it will work work but<font color="#E5E5E5"> it's the</font>

794
00:47:33,380 --> 00:47:37,579
technique and yet there's a small<font color="#E5E5E5"> little</font>

795
00:47:35,930 --> 00:47:42,799
chance

796
00:47:37,579 --> 00:47:49,240
<font color="#CCCCCC">alright great thank you guys for your</font>

797
00:47:42,800 --> 00:47:49,240
questions<font color="#CCCCCC"> thank you for</font><font color="#E5E5E5"> your attention</font>

