1
00:00:00,000 --> 00:00:01,860
thank you for the introduction and thank

2
00:00:01,860 --> 00:00:04,080
you for having us I know that it's a bit

3
00:00:04,080 --> 00:00:05,940
late and everybody's tired but I think

4
00:00:05,940 --> 00:00:07,760
you're gonna maybe like our presentation

5
00:00:07,760 --> 00:00:10,320
so what we're going to present today is

6
00:00:10,320 --> 00:00:11,700
actually a research paper that we did

7
00:00:11,700 --> 00:00:13,380
during our masters at the University of

8
00:00:13,380 --> 00:00:16,680
Amsterdam and it focuses mainly on wsl2

9
00:00:16,680 --> 00:00:18,660
and the security around it and if it's

10
00:00:18,660 --> 00:00:20,580
actually beneficial or if it's a

11
00:00:20,580 --> 00:00:22,500
liability

12
00:00:22,500 --> 00:00:24,420
the authors actually of this paper there

13
00:00:24,420 --> 00:00:26,939
are four people on out of which two are

14
00:00:26,939 --> 00:00:29,820
present here and everyone from here

15
00:00:29,820 --> 00:00:32,220
um is actually a student at the

16
00:00:32,220 --> 00:00:33,719
University of Amsterdam or graduated

17
00:00:33,719 --> 00:00:36,840
from University of Amsterdam oops

18
00:00:36,840 --> 00:00:39,059
um the first person is Max vanderhorst

19
00:00:39,059 --> 00:00:41,820
which is an incident responder myself

20
00:00:41,820 --> 00:00:44,420
radish threat intelligence

21
00:00:44,420 --> 00:00:47,520
analystane an ethical hacker and Bert

22
00:00:47,520 --> 00:00:49,620
young Paul's a security analyst

23
00:00:49,620 --> 00:00:52,500
so what exactly is WSL so we're going to

24
00:00:52,500 --> 00:00:55,079
use our savior of course Wikipedia that

25
00:00:55,079 --> 00:00:57,300
says windows subsystem for Linux of the

26
00:00:57,300 --> 00:00:58,800
cell is a compatible layer for running

27
00:00:58,800 --> 00:01:01,020
Linux binary executables in L format

28
00:01:01,020 --> 00:01:03,480
navidadly on Windows 10 Windows 11

29
00:01:03,480 --> 00:01:05,700
Windows Server 2019 and with the server

30
00:01:05,700 --> 00:01:08,880
uh 2022. so generally what it says is

31
00:01:08,880 --> 00:01:11,040
that a Linux system inside

32
00:01:11,040 --> 00:01:12,600
Linux system inside the windows

33
00:01:12,600 --> 00:01:14,220
environment that can run multiple

34
00:01:14,220 --> 00:01:15,540
distributions

35
00:01:15,540 --> 00:01:17,760
there are actually two versions of wsl2

36
00:01:17,760 --> 00:01:20,280
or WSL actually um that appeared the

37
00:01:20,280 --> 00:01:23,640
first one in 2016 on Windows 10 and wsl2

38
00:01:23,640 --> 00:01:26,159
appeared in 2019 but what's actually the

39
00:01:26,159 --> 00:01:27,780
difference between those two

40
00:01:27,780 --> 00:01:30,299
so wsl1 actually works as a translation

41
00:01:30,299 --> 00:01:33,000
layer so think of it like a wine fashion

42
00:01:33,000 --> 00:01:36,000
kind of system where the Linux system

43
00:01:36,000 --> 00:01:37,140
actually is going to be a translation

44
00:01:37,140 --> 00:01:38,759
between Linux system and the windows

45
00:01:38,759 --> 00:01:41,520
kernel so the ciscals and then how does

46
00:01:41,520 --> 00:01:44,040
it do this it uses uh bigger processes

47
00:01:44,040 --> 00:01:46,439
and bigger providers what are those so

48
00:01:46,439 --> 00:01:48,840
bigger processes are the bin Bash

49
00:01:48,840 --> 00:01:50,939
and pickup providers are the actually

50
00:01:50,939 --> 00:01:52,560
drivers that actually do the translation

51
00:01:52,560 --> 00:01:56,700
so uh LX SS system and Alex core system

52
00:01:56,700 --> 00:01:59,460
when it comes to wsl2 it's a totally

53
00:01:59,460 --> 00:02:01,560
different architecture and it's using

54
00:02:01,560 --> 00:02:04,680
actually virtualization using hyper-v so

55
00:02:04,680 --> 00:02:07,320
actual type 1 hypervisor and a

56
00:02:07,320 --> 00:02:09,419
lightweight virtual machine to actually

57
00:02:09,419 --> 00:02:10,500
improve

58
00:02:10,500 --> 00:02:14,099
deployment and quick iteration and how

59
00:02:14,099 --> 00:02:15,959
it is done actually the distributed

60
00:02:15,959 --> 00:02:18,540
kernels are maintained by Microsoft so

61
00:02:18,540 --> 00:02:20,220
everything is open source

62
00:02:20,220 --> 00:02:23,040
so if we look a bit inside of it how it

63
00:02:23,040 --> 00:02:25,379
works we have three components the first

64
00:02:25,379 --> 00:02:28,920
one is the wsl.xa which is the GUI

65
00:02:28,920 --> 00:02:31,620
where the user can actually interact

66
00:02:31,620 --> 00:02:33,959
with it and what it does it takes the

67
00:02:33,959 --> 00:02:36,480
sdn and puts it in the batch using

68
00:02:36,480 --> 00:02:39,300
vsocket then is the LX manager service

69
00:02:39,300 --> 00:02:40,860
that actually does the conversion

70
00:02:40,860 --> 00:02:43,800
between the file systems and keeps count

71
00:02:43,800 --> 00:02:45,959
of the Linux distribution there's the

72
00:02:45,959 --> 00:02:47,700
host computer that does the emulation of

73
00:02:47,700 --> 00:02:50,459
the Linux kernel but also starts the

74
00:02:50,459 --> 00:02:52,980
virtual machine then comes actually the

75
00:02:52,980 --> 00:02:55,500
second component which is the file

76
00:02:55,500 --> 00:02:58,379
system so how does the Linux

77
00:02:58,379 --> 00:03:00,660
uh from WSL actually communicates with

78
00:03:00,660 --> 00:03:02,580
the windows it actually uses a protocol

79
00:03:02,580 --> 00:03:06,360
9p protocol and uses a server client and

80
00:03:06,360 --> 00:03:08,400
you can access both file systems from

81
00:03:08,400 --> 00:03:11,159
both systems and the last component is

82
00:03:11,159 --> 00:03:13,739
actually the virtual machine

83
00:03:13,739 --> 00:03:16,019
this being said

84
00:03:16,019 --> 00:03:18,420
um what actually is the address issue

85
00:03:18,420 --> 00:03:20,580
that we are trying to do here because of

86
00:03:20,580 --> 00:03:23,819
the actual translation in wsl1 the

87
00:03:23,819 --> 00:03:25,260
things that appeared are the batchware

88
00:03:25,260 --> 00:03:27,300
which is actually malware in Linux that

89
00:03:27,300 --> 00:03:29,940
can be run in Windows environment and

90
00:03:29,940 --> 00:03:31,680
can be actually bypassing the Windows

91
00:03:31,680 --> 00:03:33,000
security

92
00:03:33,000 --> 00:03:37,019
so actually this went to the the process

93
00:03:37,019 --> 00:03:39,540
of actually developing wsl2 which as I

94
00:03:39,540 --> 00:03:42,540
mentioned it doesn't use any more bigger

95
00:03:42,540 --> 00:03:45,120
processes but instead it searches as a

96
00:03:45,120 --> 00:03:47,819
completely separate VM however

97
00:03:47,819 --> 00:03:49,980
um security researchers from s-secure

98
00:03:49,980 --> 00:03:54,540
did a research on how you can use wsl2

99
00:03:54,540 --> 00:03:56,760
to actually increase the attack surface

100
00:03:56,760 --> 00:03:59,819
and actually uh bypass the security of

101
00:03:59,819 --> 00:04:02,700
windows so in the end how secure is this

102
00:04:02,700 --> 00:04:04,739
redesign and how does it impact your

103
00:04:04,739 --> 00:04:06,659
Windows machine

104
00:04:06,659 --> 00:04:09,360
to take a bigger closer look to what seq

105
00:04:09,360 --> 00:04:10,500
did

106
00:04:10,500 --> 00:04:12,360
um we firstly it actually used a

107
00:04:12,360 --> 00:04:15,120
Powershell to install stefully and

108
00:04:15,120 --> 00:04:16,858
enable wsl2

109
00:04:16,858 --> 00:04:19,620
then it download and installed the Linux

110
00:04:19,620 --> 00:04:21,060
distribution

111
00:04:21,060 --> 00:04:23,040
then install the back door and in the

112
00:04:23,040 --> 00:04:24,840
end expose the back door and started

113
00:04:24,840 --> 00:04:27,419
doing C2 calls

114
00:04:27,419 --> 00:04:29,699
so here starts our research where the

115
00:04:29,699 --> 00:04:32,639
test environment was a Windows 10 21 21

116
00:04:32,639 --> 00:04:37,740
H1 wcl2 and Ubuntu 2004 LTS and we

117
00:04:37,740 --> 00:04:39,300
started with the thread model of

118
00:04:39,300 --> 00:04:41,699
f-secure where the compromise there was

119
00:04:41,699 --> 00:04:44,040
a compromised Windows 10 machine and the

120
00:04:44,040 --> 00:04:47,160
attacker had the full access to it

121
00:04:47,160 --> 00:04:48,960
so in the end how did we actually test

122
00:04:48,960 --> 00:04:49,979
this

123
00:04:49,979 --> 00:04:51,000
um

124
00:04:51,000 --> 00:04:53,040
we created this thing of a baseline

125
00:04:53,040 --> 00:04:55,440
called attacker stories which were ways

126
00:04:55,440 --> 00:04:57,840
to test the security of Windows and see

127
00:04:57,840 --> 00:05:00,060
how we can bypass it and also what we

128
00:05:00,060 --> 00:05:01,680
can see inside the windows environment

129
00:05:01,680 --> 00:05:03,680
so we created three levels of security

130
00:05:03,680 --> 00:05:06,600
before security so whatever the windows

131
00:05:06,600 --> 00:05:08,880
image comes with event logging audit

132
00:05:08,880 --> 00:05:10,560
policies something about Windows

133
00:05:10,560 --> 00:05:14,520
Firewall process creation Powershell and

134
00:05:14,520 --> 00:05:15,900
then a premium security product

135
00:05:15,900 --> 00:05:17,520
unfortunately we couldn't take actual

136
00:05:17,520 --> 00:05:19,380
premium but we use CIS internals to

137
00:05:19,380 --> 00:05:21,300
actually emulate this

138
00:05:21,300 --> 00:05:24,539
to clarify a bit more in the phase one

139
00:05:24,539 --> 00:05:26,880
we Define the attacker stories then we

140
00:05:26,880 --> 00:05:28,560
do we did actually experiments with

141
00:05:28,560 --> 00:05:30,600
attack stories then we create a real

142
00:05:30,600 --> 00:05:32,699
life scenario how we could use this and

143
00:05:32,699 --> 00:05:34,259
in the end evaluated the Windows

144
00:05:34,259 --> 00:05:35,699
security

145
00:05:35,699 --> 00:05:37,259
so in the end we came with these eight

146
00:05:37,259 --> 00:05:39,600
attacker stories which we divided on

147
00:05:39,600 --> 00:05:42,780
network on processes resource management

148
00:05:42,780 --> 00:05:45,840
and system components

149
00:05:45,840 --> 00:05:48,180
so the first one is the Windows Firewall

150
00:05:48,180 --> 00:05:51,240
bypass and here as the title says we

151
00:05:51,240 --> 00:05:53,580
actually try to talk a IP domain in the

152
00:05:53,580 --> 00:05:55,080
Windows Firewall and then tried with

153
00:05:55,080 --> 00:05:58,440
wsl2 to bypass it and guess what it was

154
00:05:58,440 --> 00:06:01,139
a success and you can see here we try to

155
00:06:01,139 --> 00:06:03,840
access the domain that was blocked in

156
00:06:03,840 --> 00:06:05,759
the firewall and then we tried to do the

157
00:06:05,759 --> 00:06:07,199
same with the curl command inside the

158
00:06:07,199 --> 00:06:10,620
wsl2 and it actually went on WSL and the

159
00:06:10,620 --> 00:06:13,800
same command in CMD it was blocked

160
00:06:13,800 --> 00:06:16,440
so what actually what did Windows see in

161
00:06:16,440 --> 00:06:18,300
the default security nothing

162
00:06:18,300 --> 00:06:20,880
in the policy changes we actually could

163
00:06:20,880 --> 00:06:23,220
see in the firewall that there was a

164
00:06:23,220 --> 00:06:24,720
connection from the double SL2 private

165
00:06:24,720 --> 00:06:27,180
IP to the blocked IP and in the premium

166
00:06:27,180 --> 00:06:29,400
security with the city internals we can

167
00:06:29,400 --> 00:06:30,720
see that there was a connection to the

168
00:06:30,720 --> 00:06:34,139
block IP from the sav host of excel

169
00:06:34,139 --> 00:06:35,880
and why is that is it because of the

170
00:06:35,880 --> 00:06:39,180
architecture of the hypervisor because

171
00:06:39,180 --> 00:06:41,220
each one of these virtual machines have

172
00:06:41,220 --> 00:06:42,960
a virtual Nick and then it connects to

173
00:06:42,960 --> 00:06:45,660
the virtual switch of the hyper-v and

174
00:06:45,660 --> 00:06:47,160
then to the physical clinic so it's a

175
00:06:47,160 --> 00:06:48,479
different layer so that's why you

176
00:06:48,479 --> 00:06:50,699
couldn't detect it

177
00:06:50,699 --> 00:06:52,680
um now my colleague Max is gonna

178
00:06:52,680 --> 00:06:54,840
actually continue with describing the

179
00:06:54,840 --> 00:06:57,500
attacker stories

180
00:07:00,240 --> 00:07:02,699
thank you good afternoon everyone I'm

181
00:07:02,699 --> 00:07:04,860
going to run you guys through the

182
00:07:04,860 --> 00:07:07,139
remainder of the attacker stories that

183
00:07:07,139 --> 00:07:09,539
we actually had uh the first one being

184
00:07:09,539 --> 00:07:11,280
the reverse shell so we did an

185
00:07:11,280 --> 00:07:13,680
experiment with a reverse shell to test

186
00:07:13,680 --> 00:07:17,280
whether we could exfiltrate files

187
00:07:17,280 --> 00:07:18,780
through a reversal without being

188
00:07:18,780 --> 00:07:21,720
detected based on the experiment that my

189
00:07:21,720 --> 00:07:23,819
colleague just explained this was also a

190
00:07:23,819 --> 00:07:26,099
success a success

191
00:07:26,099 --> 00:07:27,120
um

192
00:07:27,120 --> 00:07:29,699
basically what we found was that under

193
00:07:29,699 --> 00:07:32,520
the default security of Windows uh port

194
00:07:32,520 --> 00:07:34,620
forwarding and the connection was kind

195
00:07:34,620 --> 00:07:37,259
of locked but it was not detected under

196
00:07:37,259 --> 00:07:39,960
policy changes nothing actually changed

197
00:07:39,960 --> 00:07:43,979
and under the premium security emulation

198
00:07:43,979 --> 00:07:44,639
um

199
00:07:44,639 --> 00:07:46,740
it was detected TCP if you could see

200
00:07:46,740 --> 00:07:48,360
things but nothing was actually

201
00:07:48,360 --> 00:07:49,979
triggered

202
00:07:49,979 --> 00:07:51,860
this is interesting because

203
00:07:51,860 --> 00:07:55,560
that verifies the firewall bypass and

204
00:07:55,560 --> 00:07:58,080
other things

205
00:07:58,080 --> 00:08:00,900
basically what we

206
00:08:00,900 --> 00:08:05,639
verified it would be was that

207
00:08:05,639 --> 00:08:07,880
what my colleague explained that the

208
00:08:07,880 --> 00:08:11,039
traffic goes through the Phoenix to the

209
00:08:11,039 --> 00:08:13,440
physical Nick and that Windows kind of

210
00:08:13,440 --> 00:08:16,259
looks at the traffic that is going

211
00:08:16,259 --> 00:08:17,699
through the physical Nick but in

212
00:08:17,699 --> 00:08:20,039
promiscuous profession but that it

213
00:08:20,039 --> 00:08:23,699
doesn't actually take action on it

214
00:08:23,699 --> 00:08:27,479
next we had an experiment surrounding

215
00:08:27,479 --> 00:08:29,639
the SSH connections which is in Behavior

216
00:08:29,639 --> 00:08:31,139
kind of similar to the previous

217
00:08:31,139 --> 00:08:34,260
experiment this was also a success

218
00:08:34,260 --> 00:08:37,860
so the reason we would we did this

219
00:08:37,860 --> 00:08:40,620
separate to the reverse shell was to

220
00:08:40,620 --> 00:08:43,399
because SSH connections can actually be

221
00:08:43,399 --> 00:08:46,320
somewhat more stealthy and Reliant

222
00:08:46,320 --> 00:08:48,720
rather than a river shell

223
00:08:48,720 --> 00:08:49,740
um

224
00:08:49,740 --> 00:08:52,260
as I said this had kind of similar

225
00:08:52,260 --> 00:08:55,620
Behavior it was locked but no real

226
00:08:55,620 --> 00:08:57,620
action was taken

227
00:08:57,620 --> 00:09:00,899
so the SSH connection could be seen

228
00:09:00,899 --> 00:09:03,420
alongside the port but it wasn't really

229
00:09:03,420 --> 00:09:05,880
obvious that anything happened and if

230
00:09:05,880 --> 00:09:08,760
the threat actor adds the keys to WSL

231
00:09:08,760 --> 00:09:12,800
this is actually completely fine

232
00:09:13,320 --> 00:09:16,620
um furthermore the next experiment we

233
00:09:16,620 --> 00:09:18,600
had was a research Excel exhaustion

234
00:09:18,600 --> 00:09:21,140
sorry experiment so we wanted to see

235
00:09:21,140 --> 00:09:25,740
whether the resources of Windows could

236
00:09:25,740 --> 00:09:29,339
be exhausted from WSL with the goal of

237
00:09:29,339 --> 00:09:32,640
slowing down the system uh and trading a

238
00:09:32,640 --> 00:09:35,100
restart or whatever

239
00:09:35,100 --> 00:09:37,380
um the motive the threat actor could

240
00:09:37,380 --> 00:09:41,240
have for in this use case is to

241
00:09:41,240 --> 00:09:43,980
coerce a user into restarting the

242
00:09:43,980 --> 00:09:46,920
machine which actually confirms changes

243
00:09:46,920 --> 00:09:48,120
made to the system such as the

244
00:09:48,120 --> 00:09:51,000
disablement of Shadow copies

245
00:09:51,000 --> 00:09:52,980
um so we wanted to see whether we could

246
00:09:52,980 --> 00:09:57,000
exceed the 80 CPU REM usage on Windows

247
00:09:57,000 --> 00:09:59,760
which was actually the case so

248
00:09:59,760 --> 00:10:02,399
um in the end it's very simple what we

249
00:10:02,399 --> 00:10:05,040
did was we four bonded and this is

250
00:10:05,040 --> 00:10:07,560
actually a known memory leak issue

251
00:10:07,560 --> 00:10:08,779
inside

252
00:10:08,779 --> 00:10:11,160
Windows Microsoft knows about this but

253
00:10:11,160 --> 00:10:14,240
refuses to fetch it and

254
00:10:14,240 --> 00:10:19,260
basically what happens is that once the

255
00:10:19,260 --> 00:10:21,899
instance is Fork bombed the lxss manager

256
00:10:21,899 --> 00:10:25,339
starts handling this these threads and

257
00:10:25,339 --> 00:10:29,160
the front end becomes unusable so if

258
00:10:29,160 --> 00:10:32,279
this front end is closed it is not the

259
00:10:32,279 --> 00:10:34,320
case that the entirety of WSL is closed

260
00:10:34,320 --> 00:10:36,540
but only the front end which decouples

261
00:10:36,540 --> 00:10:38,339
the front end from the back end

262
00:10:38,339 --> 00:10:42,839
and actually allows for

263
00:10:42,839 --> 00:10:46,560
um well permanent 100 usage of CPU and

264
00:10:46,560 --> 00:10:48,899
REM as you can see in the image it

265
00:10:48,899 --> 00:10:51,300
actually does nothing

266
00:10:51,300 --> 00:10:53,279
this is what it looks like so the only

267
00:10:53,279 --> 00:10:55,500
thing WSL says is that the resource is

268
00:10:55,500 --> 00:10:59,519
unavailable with a 100 CPU usage there's

269
00:10:59,519 --> 00:11:00,660
nothing you can do about this only

270
00:11:00,660 --> 00:11:03,300
restart your machine

271
00:11:03,300 --> 00:11:06,899
next we wanted to investigate whether we

272
00:11:06,899 --> 00:11:11,220
could uh see any any processes from wso

273
00:11:11,220 --> 00:11:13,620
inside windows the reason we wanted to

274
00:11:13,620 --> 00:11:15,600
do this was because we wanted to see

275
00:11:15,600 --> 00:11:17,519
what the potential was for antivirus

276
00:11:17,519 --> 00:11:21,120
solutions to actually recognize

277
00:11:21,120 --> 00:11:24,120
malicious behavior this was also well

278
00:11:24,120 --> 00:11:26,160
for from an attacker perspective a

279
00:11:26,160 --> 00:11:28,680
success because windows

280
00:11:28,680 --> 00:11:30,360
couldn't really see anything except for

281
00:11:30,360 --> 00:11:33,959
the vmm and the wsl.exe processes if we

282
00:11:33,959 --> 00:11:37,200
use the premium or well if we used his

283
00:11:37,200 --> 00:11:40,160
internals uh

284
00:11:40,160 --> 00:11:42,180
wslhost.exe was

285
00:11:42,180 --> 00:11:44,519
joined that list but other than that we

286
00:11:44,519 --> 00:11:46,800
couldn't really see anything as you see

287
00:11:46,800 --> 00:11:49,740
in the image it is only wsl.exe creating

288
00:11:49,740 --> 00:11:53,040
events but it is covers up any activity

289
00:11:53,040 --> 00:11:55,160
inside wso which is interesting for

290
00:11:55,160 --> 00:12:00,200
attackers as AV doesn't detectives and

291
00:12:00,200 --> 00:12:03,180
furthermore it's just an abstraction

292
00:12:03,180 --> 00:12:05,160
layer

293
00:12:05,160 --> 00:12:07,140
so

294
00:12:07,140 --> 00:12:09,660
building on top of that we wanted to see

295
00:12:09,660 --> 00:12:12,360
to what extent we actually could use

296
00:12:12,360 --> 00:12:15,420
malware and hacking tools inside WSL

297
00:12:15,420 --> 00:12:18,180
without Windows detecting this we could

298
00:12:18,180 --> 00:12:20,339
spoiler alert but

299
00:12:20,339 --> 00:12:21,240
um

300
00:12:21,240 --> 00:12:23,519
yeah under

301
00:12:23,519 --> 00:12:26,040
yeah under default security it was

302
00:12:26,040 --> 00:12:28,019
detected inside windows but not inside

303
00:12:28,019 --> 00:12:32,040
WSL so this meant that we could download

304
00:12:32,040 --> 00:12:34,700
malware for example we used the icar

305
00:12:34,700 --> 00:12:38,640
binary we could download this to WSL and

306
00:12:38,640 --> 00:12:40,560
it would not be detected but only if we

307
00:12:40,560 --> 00:12:43,139
started executing this inside windows it

308
00:12:43,139 --> 00:12:45,300
would be detected

309
00:12:45,300 --> 00:12:45,899
um

310
00:12:45,899 --> 00:12:48,839
under policy changes Windows did log the

311
00:12:48,839 --> 00:12:52,320
specific events and the assist internal

312
00:12:52,320 --> 00:12:54,540
Suite could see what was happening but

313
00:12:54,540 --> 00:12:56,100
potentially this is interesting because

314
00:12:56,100 --> 00:12:58,800
as long as the malware is Linux based

315
00:12:58,800 --> 00:13:02,220
you can run this without any issues

316
00:13:02,220 --> 00:13:04,680
uh for mimikatz this was the same thing

317
00:13:04,680 --> 00:13:08,459
so we attempted to launch many cats from

318
00:13:08,459 --> 00:13:13,139
wso inside windows and this can be

319
00:13:13,139 --> 00:13:14,760
defined as a partial success because

320
00:13:14,760 --> 00:13:19,100
what actually happened was that

321
00:13:19,100 --> 00:13:21,420
antivirus solution inside windows did

322
00:13:21,420 --> 00:13:24,420
detect the mini cats being run but only

323
00:13:24,420 --> 00:13:27,480
after it was launched so

324
00:13:27,480 --> 00:13:30,899
um yes uh the detector of threat actor

325
00:13:30,899 --> 00:13:33,260
would be out in the open but

326
00:13:33,260 --> 00:13:36,120
credentials would be already stolen so

327
00:13:36,120 --> 00:13:39,779
it's a last resort Maybe

328
00:13:39,779 --> 00:13:40,500
um

329
00:13:40,500 --> 00:13:43,560
yeah that that's what it looks like

330
00:13:43,560 --> 00:13:45,660
we also had some unsuccessful

331
00:13:45,660 --> 00:13:47,579
experiments

332
00:13:47,579 --> 00:13:50,639
um among which the evaluation of linkage

333
00:13:50,639 --> 00:13:53,279
through memory we wanted to see whether

334
00:13:53,279 --> 00:13:56,940
we could actually uh

335
00:13:56,940 --> 00:13:59,639
Max's memory from wso inside windows and

336
00:13:59,639 --> 00:14:01,620
vice versa this isn't the case because

337
00:14:01,620 --> 00:14:04,260
of the architecture so biography has

338
00:14:04,260 --> 00:14:06,000
separate page tables for each VM which

339
00:14:06,000 --> 00:14:08,760
actually makes sense but that's that

340
00:14:08,760 --> 00:14:11,220
doesn't work

341
00:14:11,220 --> 00:14:14,779
sorry yes and the other thing was

342
00:14:14,779 --> 00:14:18,000
exploiting environment variables so we

343
00:14:18,000 --> 00:14:20,940
wanted to see whether we could set up

344
00:14:20,940 --> 00:14:22,860
the environment variables of WSL or for

345
00:14:22,860 --> 00:14:25,740
of windows for a confused Deputy like

346
00:14:25,740 --> 00:14:28,260
issues so we could trick Windows into

347
00:14:28,260 --> 00:14:31,860
using uh environment environment

348
00:14:31,860 --> 00:14:33,779
variables set by threat actor

349
00:14:33,779 --> 00:14:36,540
for with higher privileges

350
00:14:36,540 --> 00:14:39,540
and this this is just not persistent

351
00:14:39,540 --> 00:14:42,240
it's only set once WS are to respond and

352
00:14:42,240 --> 00:14:45,360
after the instance closes it is gone

353
00:14:45,360 --> 00:14:48,360
again so that didn't really work

354
00:14:48,360 --> 00:14:51,360
so now that we've had all the attacker

355
00:14:51,360 --> 00:14:53,519
stories uh where we can put it together

356
00:14:53,519 --> 00:14:54,959
into a scenario

357
00:14:54,959 --> 00:14:56,940
the first of which is a ransomware

358
00:14:56,940 --> 00:14:59,940
scenario so what we

359
00:14:59,940 --> 00:15:02,940
came up with is actually an already

360
00:15:02,940 --> 00:15:05,339
compromised system as we mentioned

361
00:15:05,339 --> 00:15:08,399
but that

362
00:15:08,399 --> 00:15:10,139
the firewall bypass can be used to

363
00:15:10,139 --> 00:15:12,000
download ransomware

364
00:15:12,000 --> 00:15:15,899
this can be executed on wso

365
00:15:15,899 --> 00:15:18,300
we it can be scripted that the shadow

366
00:15:18,300 --> 00:15:21,600
copies are removed so any backups can be

367
00:15:21,600 --> 00:15:23,820
disabled then we Fork bomb the instance

368
00:15:23,820 --> 00:15:27,779
to force a restart of the system

369
00:15:27,779 --> 00:15:30,180
and after the restart the system changes

370
00:15:30,180 --> 00:15:31,800
of the Shadow copies are confirmed and

371
00:15:31,800 --> 00:15:34,320
we can start encryption process

372
00:15:34,320 --> 00:15:36,360
the second was the data exploration

373
00:15:36,360 --> 00:15:40,320
scenario so uh is actually somewhat

374
00:15:40,320 --> 00:15:44,040
simpler but for persistency use you can

375
00:15:44,040 --> 00:15:46,260
create a chrome job inside WSL you can

376
00:15:46,260 --> 00:15:48,380
keep it running in the background

377
00:15:48,380 --> 00:15:50,880
WSL actually makes an automatic mount to

378
00:15:50,880 --> 00:15:53,160
the C drive so you can use that Crown

379
00:15:53,160 --> 00:15:55,620
job to access the C C drive on Windows

380
00:15:55,620 --> 00:15:59,060
and Excel trade data to another system

381
00:15:59,060 --> 00:16:01,320
during which you again bypass the

382
00:16:01,320 --> 00:16:04,019
firewall it's detected nowhere

383
00:16:04,019 --> 00:16:06,360
so this you can actually use to send

384
00:16:06,360 --> 00:16:08,300
data to command and control center or

385
00:16:08,300 --> 00:16:12,600
get whatever you want

386
00:16:12,600 --> 00:16:16,680
so to conclude whether wso is a secure

387
00:16:16,680 --> 00:16:18,420
or reliability there are some good

388
00:16:18,420 --> 00:16:20,100
points and there's some less good points

389
00:16:20,100 --> 00:16:22,579
so the good points that we had is that

390
00:16:22,579 --> 00:16:25,079
most importantly bestware attacks are no

391
00:16:25,079 --> 00:16:26,760
longer possible or viable that's

392
00:16:26,760 --> 00:16:29,519
interesting there's separation of memory

393
00:16:29,519 --> 00:16:32,220
which is nice changes in Windows are

394
00:16:32,220 --> 00:16:34,079
picked up on very well in terms of

395
00:16:34,079 --> 00:16:36,360
logging

396
00:16:36,360 --> 00:16:38,579
um and there is a possibility for

397
00:16:38,579 --> 00:16:42,440
Windows to improve uh premium security

398
00:16:42,440 --> 00:16:45,420
to actually monitor changes happening

399
00:16:45,420 --> 00:16:47,060
inside WSL

400
00:16:47,060 --> 00:16:49,980
as the CIS internals Suite can do it so

401
00:16:49,980 --> 00:16:53,040
why couldn't the why can't not get the

402
00:16:53,040 --> 00:16:55,740
premium vendors do it

403
00:16:55,740 --> 00:16:57,779
the less good points however are that

404
00:16:57,779 --> 00:17:01,079
there are some design decisions that we

405
00:17:01,079 --> 00:17:03,660
consider poor there's very bad

406
00:17:03,660 --> 00:17:06,740
documentation and the network traffic

407
00:17:06,740 --> 00:17:08,939
bypass firewall

408
00:17:08,939 --> 00:17:11,520
which is not good

409
00:17:11,520 --> 00:17:13,439
um there is no fully integrated logging

410
00:17:13,439 --> 00:17:15,839
so not everything from wso is actually

411
00:17:15,839 --> 00:17:17,819
visible inside the Event Viewer of

412
00:17:17,819 --> 00:17:21,720
Windows and because that happens it

413
00:17:21,720 --> 00:17:23,520
becomes a potential blind spot for

414
00:17:23,520 --> 00:17:26,579
antivirus Solutions and possibly EDR

415
00:17:26,579 --> 00:17:30,780
so it's not insecure but it may need

416
00:17:30,780 --> 00:17:33,600
some reconsideration on design and user

417
00:17:33,600 --> 00:17:35,940
support to make it more secure and to

418
00:17:35,940 --> 00:17:39,360
help users Harden their systems

419
00:17:39,360 --> 00:17:42,120
so there was some future work when we

420
00:17:42,120 --> 00:17:43,760
wrote this paper so

421
00:17:43,760 --> 00:17:46,020
we actually want to continue this

422
00:17:46,020 --> 00:17:49,320
research on WSL by enhancing the current

423
00:17:49,320 --> 00:17:51,600
experiments to reevaluate after a

424
00:17:51,600 --> 00:17:53,340
certain period what changed and see if

425
00:17:53,340 --> 00:17:55,620
there's extra documentation we also want

426
00:17:55,620 --> 00:17:57,000
to introduce new experiments such as

427
00:17:57,000 --> 00:17:59,220
with the 9p protocol because we had no

428
00:17:59,220 --> 00:18:02,160
in the set time frame we had no room to

429
00:18:02,160 --> 00:18:04,320
actually go in depth on this

430
00:18:04,320 --> 00:18:07,080
uh we want to actually take bringing

431
00:18:07,080 --> 00:18:10,559
security the solutions and test with

432
00:18:10,559 --> 00:18:13,260
these Solutions whether the results

433
00:18:13,260 --> 00:18:17,600
differ any from the CIS internal Suite

434
00:18:17,820 --> 00:18:21,419
and we wanted to do this with the latest

435
00:18:21,419 --> 00:18:23,520
version of Windows as the version that

436
00:18:23,520 --> 00:18:25,740
we use for this paper is by now somewhat

437
00:18:25,740 --> 00:18:28,620
outdated so maybe something changed

438
00:18:28,620 --> 00:18:29,960
and

439
00:18:29,960 --> 00:18:33,480
yeah we hope we really hope that by by

440
00:18:33,480 --> 00:18:35,880
in time there is extra documentation as

441
00:18:35,880 --> 00:18:37,980
this was very time consuming

442
00:18:37,980 --> 00:18:40,740
but for now we I want to thank you we

443
00:18:40,740 --> 00:18:42,900
want to thank you for your attention uh

444
00:18:42,900 --> 00:18:45,919
and we will be open to questions

445
00:18:46,030 --> 00:18:53,180
[Applause]

446
00:18:59,160 --> 00:19:03,559
couldn't we have um something else to

447
00:19:03,559 --> 00:19:08,700
help the wsl2 as to not have as many

448
00:19:08,700 --> 00:19:10,320
problems

449
00:19:10,320 --> 00:19:12,120
as in um

450
00:19:12,120 --> 00:19:14,640
the documentation and the other parts

451
00:19:14,640 --> 00:19:17,460
isn't there something to help the Ws

452
00:19:17,460 --> 00:19:20,820
seller to to help not be

453
00:19:20,820 --> 00:19:24,720
as a much of a threat

454
00:19:24,720 --> 00:19:25,980
um I'm not sure I fully understand

455
00:19:25,980 --> 00:19:27,419
you're saying that we should help with

456
00:19:27,419 --> 00:19:29,760
the documentation yeah no like another

457
00:19:29,760 --> 00:19:33,960
program to help the wslr2 to prepare its

458
00:19:33,960 --> 00:19:36,419
problems or something that can

459
00:19:36,419 --> 00:19:39,600
compensate it oh yeah so because WS also

460
00:19:39,600 --> 00:19:41,039
in the end is a Linux system you could

461
00:19:41,039 --> 00:19:43,380
Harden your Linux system as well so that

462
00:19:43,380 --> 00:19:45,240
will definitely make it more safer in

463
00:19:45,240 --> 00:19:47,280
the Linux system but still there are

464
00:19:47,280 --> 00:19:49,320
problems like bypassing things you're

465
00:19:49,320 --> 00:19:51,179
still going to bypass and also as Max

466
00:19:51,179 --> 00:19:53,160
said if you actually take the logging

467
00:19:53,160 --> 00:19:54,600
from the Linux system you're still going

468
00:19:54,600 --> 00:19:55,500
to see the traffic and everything

469
00:19:55,500 --> 00:19:58,080
because it actually locks that so that

470
00:19:58,080 --> 00:20:00,059
would be useful that's yeah

471
00:20:00,059 --> 00:20:02,240
thank you

472
00:20:03,840 --> 00:20:07,020
is uh this program safer than a normal

473
00:20:07,020 --> 00:20:10,140
windows or not

474
00:20:10,140 --> 00:20:13,440
if the WSL is more safer yeah with the

475
00:20:13,440 --> 00:20:14,960
normal Windows yeah

476
00:20:14,960 --> 00:20:18,120
other operation system

477
00:20:18,120 --> 00:20:21,720
um well it's a Linux system so uh it

478
00:20:21,720 --> 00:20:24,299
it's as safe as you configure it uh in

479
00:20:24,299 --> 00:20:26,460
the end but also the definition of

480
00:20:26,460 --> 00:20:27,960
normal windows

481
00:20:27,960 --> 00:20:29,400
I'm not sure exactly what you mean like

482
00:20:29,400 --> 00:20:31,860
Windows 10 machine Windows 11 machine

483
00:20:31,860 --> 00:20:34,799
um so to be honest I don't know exactly

484
00:20:34,799 --> 00:20:36,960
what to refer with Windows 11 machine

485
00:20:36,960 --> 00:20:40,740
okay well

486
00:20:40,799 --> 00:20:43,559
yeah we can say in our opinion maybe it

487
00:20:43,559 --> 00:20:45,539
is but having double SL2 there it could

488
00:20:45,539 --> 00:20:46,700
be alive

489
00:20:46,700 --> 00:20:50,340
opinion as well okay thank you

490
00:20:50,340 --> 00:20:52,140
okay so I'll have a question you've

491
00:20:52,140 --> 00:20:54,000
mentioned an automatic mounts of the C

492
00:20:54,000 --> 00:20:56,179
drive in the slash MNC in the slash Dev

493
00:20:56,179 --> 00:20:59,039
environment that's frightening honestly

494
00:20:59,039 --> 00:21:01,140
it doesn't have right permissions like

495
00:21:01,140 --> 00:21:03,000
what permissions does it it does yeah

496
00:21:03,000 --> 00:21:04,860
you have full what user permission you

497
00:21:04,860 --> 00:21:06,000
have you have for some permission there

498
00:21:06,000 --> 00:21:09,360
as well so if WS holds uh let's say I've

499
00:21:09,360 --> 00:21:12,480
seen lots of people using wso uh use it

500
00:21:12,480 --> 00:21:14,160
directly as written not about the

501
00:21:14,160 --> 00:21:15,840
setting up users which again is a very

502
00:21:15,840 --> 00:21:19,080
bad choice if hypothetically a malicious

503
00:21:19,080 --> 00:21:20,820
attacker could have run a process on

504
00:21:20,820 --> 00:21:23,580
that WSL machine that could have had

505
00:21:23,580 --> 00:21:25,140
full right access to the Windows machine

506
00:21:25,140 --> 00:21:27,900
too low in the C drive yes that's

507
00:21:27,900 --> 00:21:28,919
horrible

508
00:21:28,919 --> 00:21:30,480
um also one more question if you don't

509
00:21:30,480 --> 00:21:32,760
mind uh I've been windows clean for a

510
00:21:32,760 --> 00:21:34,860
few years so I don't know how this works

511
00:21:34,860 --> 00:21:37,559
necessary but Chief man mentioned wso

512
00:21:37,559 --> 00:21:40,140
one is like a wine type system or it's a

513
00:21:40,140 --> 00:21:42,240
translation layer not an emulation not a

514
00:21:42,240 --> 00:21:43,620
virtualization

515
00:21:43,620 --> 00:21:45,659
so was that better for process

516
00:21:45,659 --> 00:21:47,520
monitoring as you've explained the

517
00:21:47,520 --> 00:21:50,220
logging on wslc for Linux processes is

518
00:21:50,220 --> 00:21:52,740
horrible it was WSL like word process is

519
00:21:52,740 --> 00:21:54,179
more visible to Enterprise Solutions

520
00:21:54,179 --> 00:21:55,740
hypothetically there were to be

521
00:21:55,740 --> 00:21:57,720
malicious yeah that question actually is

522
00:21:57,720 --> 00:21:59,280
answered by somebody from Suns it

523
00:21:59,280 --> 00:22:00,780
actually did a research on that and yes

524
00:22:00,780 --> 00:22:02,940
the processes are better monetary than

525
00:22:02,940 --> 00:22:04,919
event logs because in the end it's just

526
00:22:04,919 --> 00:22:06,480
a translation so events still happen in

527
00:22:06,480 --> 00:22:08,220
the windows yeah yeah exactly so yeah so

528
00:22:08,220 --> 00:22:10,980
yes okay thank you thank you

529
00:22:10,980 --> 00:22:14,460
hi uh here here I'm Dana

530
00:22:14,460 --> 00:22:17,280
yeah so um really nice research thank

531
00:22:17,280 --> 00:22:19,020
you I wanted to ask you in their

532
00:22:19,020 --> 00:22:21,299
checkpoint research in 2017

533
00:22:21,299 --> 00:22:22,080
um

534
00:22:22,080 --> 00:22:24,860
um basically they said that the wind

535
00:22:24,860 --> 00:22:28,320
wsl1 was actually enabled but you had to

536
00:22:28,320 --> 00:22:30,840
like just tick like developer options it

537
00:22:30,840 --> 00:22:32,820
was there and the ransomware could

538
00:22:32,820 --> 00:22:34,440
actually do it for the user

539
00:22:34,440 --> 00:22:37,080
automatically what about WSL too like if

540
00:22:37,080 --> 00:22:38,820
I have like a fresh Windows installation

541
00:22:38,820 --> 00:22:41,520
Windows 10 Windows 11 is it enabled is

542
00:22:41,520 --> 00:22:42,960
it disabled do you have to enable do I

543
00:22:42,960 --> 00:22:44,880
have to download it yeah there are a few

544
00:22:44,880 --> 00:22:46,620
more steps that you have to take in WSL

545
00:22:46,620 --> 00:22:48,179
too because the Linux kernel doesn't

546
00:22:48,179 --> 00:22:49,919
come with Windows uh I'm not sure about

547
00:22:49,919 --> 00:22:51,720
Windows 11 if it comes right now uh you

548
00:22:51,720 --> 00:22:53,640
have to actually download that but f-seq

549
00:22:53,640 --> 00:22:55,740
research it was specifically for that

550
00:22:55,740 --> 00:22:58,440
and it showed how a clean installation

551
00:22:58,440 --> 00:23:01,200
can be actually you can install the wsl2

552
00:23:01,200 --> 00:23:03,360
in a stealth mode uh you can actually

553
00:23:03,360 --> 00:23:05,700
install a distribution in self mode and

554
00:23:05,700 --> 00:23:07,020
then you start actually hacking with

555
00:23:07,020 --> 00:23:09,960
others L2 so in the f-seq research we

556
00:23:09,960 --> 00:23:12,419
our research is based on fcq Research

557
00:23:12,419 --> 00:23:14,400
meaning over FC research so they

558
00:23:14,400 --> 00:23:16,860
actually show the initial access and how

559
00:23:16,860 --> 00:23:19,320
you can do that so basically for wsl2

560
00:23:19,320 --> 00:23:21,360
it's exactly the same like if you manage

561
00:23:21,360 --> 00:23:23,100
to run the payload you can just yeah

562
00:23:23,100 --> 00:23:24,900
exactly just a few more steps but it's

563
00:23:24,900 --> 00:23:28,520
still the same thing thank you

564
00:23:32,340 --> 00:23:34,860
thank you uh would you consider that

565
00:23:34,860 --> 00:23:37,500
it's safer to run Linux in a virtual

566
00:23:37,500 --> 00:23:40,880
environment rather than BSL

567
00:23:40,880 --> 00:23:43,740
well in the end it's a separate VM right

568
00:23:43,740 --> 00:23:44,820
so

569
00:23:44,820 --> 00:23:47,760
um it I would not say particularly it's

570
00:23:47,760 --> 00:23:54,360
safer to run Linux all separately but

571
00:23:54,360 --> 00:23:55,220
um

572
00:23:55,220 --> 00:23:58,620
considering the design that Microsoft

573
00:23:58,620 --> 00:24:03,260
made around these around wsl2

574
00:24:04,280 --> 00:24:06,240
I would

575
00:24:06,240 --> 00:24:09,780
say Linux is in itself more secure than

576
00:24:09,780 --> 00:24:11,700
WSL but that's not because Linux but

577
00:24:11,700 --> 00:24:12,900
that's because of the underlying

578
00:24:12,900 --> 00:24:15,179
architecture yeah but you know VM like

579
00:24:15,179 --> 00:24:17,520
you're depending on the hypervisor and

580
00:24:17,520 --> 00:24:18,720
everything like

581
00:24:18,720 --> 00:24:21,059
would it that be safer rather than going

582
00:24:21,059 --> 00:24:23,340
for WSL

583
00:24:23,340 --> 00:24:25,740
uh so sorry could you repeat

584
00:24:25,740 --> 00:24:29,039
like would you rather rely on the VM

585
00:24:29,039 --> 00:24:31,440
rather than vsl

586
00:24:31,440 --> 00:24:36,000
uh well wso is a VM in the end but

587
00:24:36,000 --> 00:24:37,679
um

588
00:24:37,679 --> 00:24:40,860
looking at I would rather have a

589
00:24:40,860 --> 00:24:42,659
virtualbox a different type hypervisor

590
00:24:42,659 --> 00:24:47,059
than hyper-v yes okay thanks

591
00:24:48,360 --> 00:24:50,280
hello

592
00:24:50,280 --> 00:24:52,340
um one more question here

593
00:24:52,340 --> 00:24:54,840
what's the likelihood of encountering

594
00:24:54,840 --> 00:24:57,419
this pretty much lab environment

595
00:24:57,419 --> 00:25:00,120
experiment in the real life I mean are

596
00:25:00,120 --> 00:25:03,480
there products already using

597
00:25:03,480 --> 00:25:05,340
um are these layers so that you know

598
00:25:05,340 --> 00:25:08,820
somebody can nowadays abuse it without

599
00:25:08,820 --> 00:25:12,200
installing it on purpose

600
00:25:12,900 --> 00:25:14,700
um yeah so if you want to use Docker on

601
00:25:14,700 --> 00:25:17,820
Windows you need WSL too and then

602
00:25:17,820 --> 00:25:19,679
immediately if a developer wants to try

603
00:25:19,679 --> 00:25:22,260
Docker on Windows uh you immediately

604
00:25:22,260 --> 00:25:24,419
have installed up the SL2 so that's

605
00:25:24,419 --> 00:25:26,340
already a live one it's not really yeah

606
00:25:26,340 --> 00:25:27,720
exactly so it wouldn't be a clean

607
00:25:27,720 --> 00:25:28,980
installation immediately would have

608
00:25:28,980 --> 00:25:32,840
access to WSL too thank you

609
00:25:38,539 --> 00:25:40,799
thank you for your for your research

610
00:25:40,799 --> 00:25:43,080
it's really interesting I'm a heavy user

611
00:25:43,080 --> 00:25:46,140
of WSL as a software developer and it's

612
00:25:46,140 --> 00:25:48,960
really making my life easier so I hope

613
00:25:48,960 --> 00:25:51,120
no one takes it away

614
00:25:51,120 --> 00:25:54,600
um do you think WSL is is less secure um

615
00:25:54,600 --> 00:25:57,919
compared to if I would like use

616
00:25:57,919 --> 00:26:00,840
hyper-v and install a hyper a Windows

617
00:26:00,840 --> 00:26:02,460
hyper-vient

618
00:26:02,460 --> 00:26:04,559
install some Linux distribution for

619
00:26:04,559 --> 00:26:06,900
cross compiling because the process to

620
00:26:06,900 --> 00:26:09,360
get to it I think is not straightforward

621
00:26:09,360 --> 00:26:12,360
if you want to intrude it so you need to

622
00:26:12,360 --> 00:26:15,240
enable Windows feature subsystem for

623
00:26:15,240 --> 00:26:19,260
Linux you need a reboot and then as soon

624
00:26:19,260 --> 00:26:21,299
as Windows 11 I think you really just

625
00:26:21,299 --> 00:26:24,480
need Powershell WSL install and you get

626
00:26:24,480 --> 00:26:26,220
everything

627
00:26:26,220 --> 00:26:28,559
but for me it's like the same if I would

628
00:26:28,559 --> 00:26:30,900
use hyper-v

629
00:26:30,900 --> 00:26:31,559
um

630
00:26:31,559 --> 00:26:36,539
yeah so the I would say from purely from

631
00:26:36,539 --> 00:26:37,740
an organizational operational

632
00:26:37,740 --> 00:26:39,840
perspective that using hyper-v from

633
00:26:39,840 --> 00:26:42,500
scratch is more secure

634
00:26:42,500 --> 00:26:44,279
mainly because you have to think about

635
00:26:44,279 --> 00:26:46,860
what you configured right so things like

636
00:26:46,860 --> 00:26:49,919
the automatic Mount to to C drive it's

637
00:26:49,919 --> 00:26:52,380
fine if you do that but if you do them

638
00:26:52,380 --> 00:26:53,960
consciously

639
00:26:53,960 --> 00:26:56,159
it's not something that happens in the

640
00:26:56,159 --> 00:26:58,020
background without you knowing right so

641
00:26:58,020 --> 00:26:59,580
um

642
00:26:59,580 --> 00:27:01,880
just using hyper-v

643
00:27:01,880 --> 00:27:04,020
and thinking about what you configure is

644
00:27:04,020 --> 00:27:08,120
in my opinion safe okay thank you

645
00:27:10,799 --> 00:27:12,720
all right if we don't have any more

646
00:27:12,720 --> 00:27:15,179
questions from the audience thank you so

647
00:27:15,179 --> 00:27:16,100
much

648
00:27:16,100 --> 00:27:17,770
give it up

649
00:27:17,770 --> 00:27:21,109
[Applause]

650
00:27:23,190 --> 00:27:25,749
[Applause]

