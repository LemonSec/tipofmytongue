1
00:00:00,359 --> 00:00:03,060
thank you very much uh how are you guys

2
00:00:03,060 --> 00:00:05,700
enjoying the conference very good

3
00:00:05,700 --> 00:00:08,580
uh before actually starting the

4
00:00:08,580 --> 00:00:10,679
presentation I want to ask some

5
00:00:10,679 --> 00:00:13,259
questions uh hands up how many of you

6
00:00:13,259 --> 00:00:15,599
rely on Windows Defender for personal

7
00:00:15,599 --> 00:00:19,740
and organization computers

8
00:00:19,740 --> 00:00:22,159
okay

9
00:00:23,640 --> 00:00:24,960
okay good

10
00:00:24,960 --> 00:00:26,939
um the next question

11
00:00:26,939 --> 00:00:30,420
from those people how many of you are

12
00:00:30,420 --> 00:00:33,719
confident about this decision

13
00:00:33,719 --> 00:00:35,899
foreign

14
00:00:39,020 --> 00:00:42,420
how how the things goes

15
00:00:42,420 --> 00:00:46,020
um a little bit about myself uh I'm

16
00:00:46,020 --> 00:00:48,239
founder of zero tax security co-founder

17
00:00:48,239 --> 00:00:50,879
of cyber Union to cyber security service

18
00:00:50,879 --> 00:00:54,239
providers uh I'm trainer for some

19
00:00:54,239 --> 00:00:55,820
entities

20
00:00:55,820 --> 00:00:58,920
and also speaker to to some conferences

21
00:00:58,920 --> 00:01:00,899
and also part of the AC Council

22
00:01:00,899 --> 00:01:02,359
certified tech

23
00:01:02,359 --> 00:01:05,459
scheme committee and as a note I'm not

24
00:01:05,459 --> 00:01:09,180
responsible for deep end map questions

25
00:01:09,180 --> 00:01:11,400
um also stopped by write some articles

26
00:01:11,400 --> 00:01:15,780
on medium and that's that's it

27
00:01:15,780 --> 00:01:17,520
good so

28
00:01:17,520 --> 00:01:20,060
um agenda for this for this presentation

29
00:01:20,060 --> 00:01:23,400
uh firstly we will take a look into the

30
00:01:23,400 --> 00:01:26,220
scenario the proposed scenario

31
00:01:26,220 --> 00:01:29,400
um next we'll explain how AMC bypass

32
00:01:29,400 --> 00:01:32,460
Works how execution policy bypass Works

33
00:01:32,460 --> 00:01:35,340
how we can put everything together in a

34
00:01:35,340 --> 00:01:38,220
payload Runner and after this one how to

35
00:01:38,220 --> 00:01:41,880
deploy the attack using a bad USB

36
00:01:41,880 --> 00:01:46,200
so uh and yeah after that a demo and

37
00:01:46,200 --> 00:01:48,360
some post exploitation persistence and

38
00:01:48,360 --> 00:01:50,820
prevention tips

39
00:01:50,820 --> 00:01:54,060
so the the scenario

40
00:01:54,060 --> 00:01:57,960
we have Bob Bob go smoking in the in the

41
00:01:57,960 --> 00:02:01,860
parking lot and he found a device like

42
00:02:01,860 --> 00:02:03,000
this

43
00:02:03,000 --> 00:02:07,140
what pope will do he he went to to his

44
00:02:07,140 --> 00:02:11,160
office and just introduced the USB into

45
00:02:11,160 --> 00:02:14,099
the computer laptop whatever he has

46
00:02:14,099 --> 00:02:15,660
there

47
00:02:15,660 --> 00:02:17,840
what happened in the background

48
00:02:17,840 --> 00:02:21,180
basically now an attacker is connected

49
00:02:21,180 --> 00:02:24,180
to pop computer but we must take in

50
00:02:24,180 --> 00:02:26,400
consideration some aspects Bob has

51
00:02:26,400 --> 00:02:29,520
Windows Defender enabled Bob is using a

52
00:02:29,520 --> 00:02:31,379
low privilege account

53
00:02:31,379 --> 00:02:34,260
um and also the policy within the

54
00:02:34,260 --> 00:02:37,980
company enforce the removal media

55
00:02:37,980 --> 00:02:42,780
storage blockage so what happened here

56
00:02:42,780 --> 00:02:45,180
um and the the answer for this question

57
00:02:45,180 --> 00:02:47,400
will be seen through through the

58
00:02:47,400 --> 00:02:49,879
presentation

59
00:02:51,180 --> 00:02:53,519
um the sequence of attacks are the

60
00:02:53,519 --> 00:02:56,879
following basically we used AMC bypass

61
00:02:56,879 --> 00:03:01,260
for uh cutting the the defender then

62
00:03:01,260 --> 00:03:03,599
execution policy bypass for the current

63
00:03:03,599 --> 00:03:06,239
user in order to be allowed to run

64
00:03:06,239 --> 00:03:08,760
Powershell scripts and commands in the

65
00:03:08,760 --> 00:03:11,819
context of the low privileged user then

66
00:03:11,819 --> 00:03:14,519
use the payload Runner that injected the

67
00:03:14,519 --> 00:03:18,120
Shell Code into the into the memory and

68
00:03:18,120 --> 00:03:20,459
as a post exploitation method we

69
00:03:20,459 --> 00:03:23,700
migrated to to another process for

70
00:03:23,700 --> 00:03:26,359
persistence

71
00:03:26,519 --> 00:03:29,819
good so we will move forward with the

72
00:03:29,819 --> 00:03:35,340
DMC bypass and we will explain a bit

73
00:03:35,340 --> 00:03:35,879
um

74
00:03:35,879 --> 00:03:38,940
basically I'm see bypass what is it it

75
00:03:38,940 --> 00:03:40,620
stands for anti-malware scanning

76
00:03:40,620 --> 00:03:43,640
interface it's like a middleman between

77
00:03:43,640 --> 00:03:46,379
what antivirus products you have

78
00:03:46,379 --> 00:03:49,379
installed on your computer

79
00:03:49,379 --> 00:03:51,959
um and the Powershell or scripts that

80
00:03:51,959 --> 00:03:53,819
are running on the on the computer

81
00:03:53,819 --> 00:03:58,440
itself in our case I'm C stands in

82
00:03:58,440 --> 00:04:02,159
between Windows Defender and our scripts

83
00:04:02,159 --> 00:04:04,099
our Powershell Scripts

84
00:04:04,099 --> 00:04:08,940
uh how how it scans those scripts and

85
00:04:08,940 --> 00:04:12,959
user input for malicious indicators it

86
00:04:12,959 --> 00:04:15,599
uses the ampsy scan buffer function from

87
00:04:15,599 --> 00:04:17,699
amc.dll library

88
00:04:17,699 --> 00:04:20,760
and yeah it seems that the presentation

89
00:04:20,760 --> 00:04:22,440
is a big heart

90
00:04:22,440 --> 00:04:26,240
um basically what we'll do will attack

91
00:04:26,240 --> 00:04:31,320
this function here in order to return us

92
00:04:31,320 --> 00:04:33,800
okay

93
00:04:33,800 --> 00:04:35,820
it blocked

94
00:04:35,820 --> 00:04:38,460
oh okay perfect

95
00:04:38,460 --> 00:04:41,100
so we'll attack the armscan buffer

96
00:04:41,100 --> 00:04:44,340
function in order to patch it and return

97
00:04:44,340 --> 00:04:48,720
every time we do a Powershell input a

98
00:04:48,720 --> 00:04:52,680
Powershell script to return us like uh

99
00:04:52,680 --> 00:04:55,620
invalid Syntax for example and here is

100
00:04:55,620 --> 00:04:58,800
the trick that if arms returns invalid

101
00:04:58,800 --> 00:05:03,000
arguments or invalid Syntax for scanning

102
00:05:03,000 --> 00:05:06,300
it will pass the script to be executed

103
00:05:06,300 --> 00:05:09,600
by default and that's the the method

104
00:05:09,600 --> 00:05:13,680
that we'll use to to bypass this aspect

105
00:05:13,680 --> 00:05:19,020
so uh in building our payload we will

106
00:05:19,020 --> 00:05:22,320
Define the three three Windows native

107
00:05:22,320 --> 00:05:26,160
API functions get proc access address

108
00:05:26,160 --> 00:05:29,160
load library and virtual protect those

109
00:05:29,160 --> 00:05:32,039
we'll use later to load our necessary

110
00:05:32,039 --> 00:05:35,580
modules within the the bypass

111
00:05:35,580 --> 00:05:39,000
second step is as you've seen from the

112
00:05:39,000 --> 00:05:42,300
previous slide we'll use the amsyscom

113
00:05:42,300 --> 00:05:45,660
buffer from the amc.dla library so we'll

114
00:05:45,660 --> 00:05:49,380
load the RC dot dll library in memory

115
00:05:49,380 --> 00:05:51,780
within our script

116
00:05:51,780 --> 00:05:55,259
next we will take the arms discount

117
00:05:55,259 --> 00:05:59,340
buffer from the loaded mc.dll and put it

118
00:05:59,340 --> 00:06:02,520
uh also in our script we'll use the

119
00:06:02,520 --> 00:06:04,100
virtual protect

120
00:06:04,100 --> 00:06:09,180
function that we grabbed within the last

121
00:06:09,180 --> 00:06:13,160
method in order to make the

122
00:06:13,160 --> 00:06:17,039
the memory region of the function write

123
00:06:17,039 --> 00:06:20,639
readable why we need that in order to to

124
00:06:20,639 --> 00:06:23,880
pitch the actual function and as I said

125
00:06:23,880 --> 00:06:26,220
to return invalid syntax invalid

126
00:06:26,220 --> 00:06:29,819
argument and things of the nature

127
00:06:29,819 --> 00:06:35,340
um and then we will build our uh our

128
00:06:35,340 --> 00:06:38,699
assembly assembly instructions in order

129
00:06:38,699 --> 00:06:44,639
to to pitch the the function uh this is

130
00:06:44,639 --> 00:06:47,759
on address memory but I think yeah it's

131
00:06:47,759 --> 00:06:52,139
pretty it got cut in the text and then

132
00:06:52,139 --> 00:06:55,199
we will do the actual replacement

133
00:06:55,199 --> 00:06:56,940
and

134
00:06:56,940 --> 00:06:59,880
this is the the address that will pitch

135
00:06:59,880 --> 00:07:03,180
the armscan buffer function why this

136
00:07:03,180 --> 00:07:04,100
value

137
00:07:04,100 --> 00:07:08,639
uh this value is that one that we built

138
00:07:08,639 --> 00:07:12,060
within the fourth step of our payload

139
00:07:12,060 --> 00:07:13,620
Construction

140
00:07:13,620 --> 00:07:16,800
why do we build why do we pitch with

141
00:07:16,800 --> 00:07:20,039
this value if we look at the official

142
00:07:20,039 --> 00:07:23,099
documentation of the MC scan buffer

143
00:07:23,099 --> 00:07:25,460
function from Microsoft

144
00:07:25,460 --> 00:07:28,560
they say there that if this function

145
00:07:28,560 --> 00:07:32,400
succeeds it returns s underscore okay or

146
00:07:32,400 --> 00:07:36,000
otherwise it returns an age result error

147
00:07:36,000 --> 00:07:36,840
code

148
00:07:36,840 --> 00:07:41,580
so uh we will take in consideration this

149
00:07:41,580 --> 00:07:45,360
age result error code and we'll patch

150
00:07:45,360 --> 00:07:49,319
with an edge result error code and the

151
00:07:49,319 --> 00:07:52,199
code that will page from also from their

152
00:07:52,199 --> 00:07:55,440
official documentation is this one one

153
00:07:55,440 --> 00:07:59,280
or more arguments are invalid if we page

154
00:07:59,280 --> 00:08:03,440
using this using this value

155
00:08:03,440 --> 00:08:07,199
will return every time true I mean not

156
00:08:07,199 --> 00:08:09,720
to return true but it will pass the

157
00:08:09,720 --> 00:08:12,780
script or the user input to be to be

158
00:08:12,780 --> 00:08:15,300
executed

159
00:08:15,300 --> 00:08:19,620
okay so we put together our payload this

160
00:08:19,620 --> 00:08:22,379
this is the the payload each step of the

161
00:08:22,379 --> 00:08:25,379
payload was explained uh in the previous

162
00:08:25,379 --> 00:08:29,520
slides but it's not it's not complete

163
00:08:29,520 --> 00:08:31,680
do you have any suggestions what we can

164
00:08:31,680 --> 00:08:34,140
do for this payload

165
00:08:34,140 --> 00:08:36,679
yes

166
00:08:41,299 --> 00:08:43,979
so since you're using ad type it will

167
00:08:43,979 --> 00:08:46,700
basically compile

168
00:08:46,700 --> 00:08:49,680
the c-sharp code and it will leave some

169
00:08:49,680 --> 00:08:51,480
tracks like some

170
00:08:51,480 --> 00:08:54,500
um what's it called

171
00:08:54,500 --> 00:08:57,120
artifacts on disk and it can be detected

172
00:08:57,120 --> 00:09:00,000
by the antimonar solution it is saved in

173
00:09:00,000 --> 00:09:02,519
C time in the temp directory it will

174
00:09:02,519 --> 00:09:06,899
save so you can create I think it's uh

175
00:09:06,899 --> 00:09:09,920
what's called run or something Runner

176
00:09:09,920 --> 00:09:13,620
right yes we'll do that but regarding

177
00:09:13,620 --> 00:09:15,899
this specific payload we'll do the

178
00:09:15,899 --> 00:09:19,260
payload Runner after this one so this

179
00:09:19,260 --> 00:09:21,300
this payload will integrate within a

180
00:09:21,300 --> 00:09:23,880
payload Runner but before that what we

181
00:09:23,880 --> 00:09:26,940
can do to evade detection for this

182
00:09:26,940 --> 00:09:28,980
payload especially if we are thinking

183
00:09:28,980 --> 00:09:31,740
about static detection strings strings

184
00:09:31,740 --> 00:09:34,800
okay okay string there's an AMC the dll

185
00:09:34,800 --> 00:09:37,380
string MC scan buffer string yes exactly

186
00:09:37,380 --> 00:09:40,560
obfuscation actually so we'll play with

187
00:09:40,560 --> 00:09:43,080
strings with concatenation and things of

188
00:09:43,080 --> 00:09:45,180
that nature we can use

189
00:09:45,180 --> 00:09:47,279
um the invoke obfuscation from

190
00:09:47,279 --> 00:09:49,620
Powershell it's it's a module that

191
00:09:49,620 --> 00:09:52,440
allows you to obfuscate your payload and

192
00:09:52,440 --> 00:09:55,200
we have here a final ampsi bypass

193
00:09:55,200 --> 00:09:58,800
payload using the obfuscation

194
00:09:58,800 --> 00:10:03,839
so next one is a Christian policy bypass

195
00:10:03,839 --> 00:10:07,380
um how many of you have got turned into

196
00:10:07,380 --> 00:10:09,899
the situation where you

197
00:10:09,899 --> 00:10:13,680
you are shown a red flag in Powershell

198
00:10:13,680 --> 00:10:16,380
and you are not able to run a script or

199
00:10:16,380 --> 00:10:19,019
import a module hands up

200
00:10:19,019 --> 00:10:21,899
okay good perfect that's the execution

201
00:10:21,899 --> 00:10:25,680
policy that we are addressing how can

202
00:10:25,680 --> 00:10:28,680
this one be bypassed

203
00:10:28,680 --> 00:10:31,740
basically execution policy works on

204
00:10:31,740 --> 00:10:35,339
multiple levels of access it works for a

205
00:10:35,339 --> 00:10:39,660
current machine Uh current user uh or

206
00:10:39,660 --> 00:10:43,260
the whole organization what we can do

207
00:10:43,260 --> 00:10:46,800
this is a default Windows policy or

208
00:10:46,800 --> 00:10:49,140
execution policy what we can do on the

209
00:10:49,140 --> 00:10:51,899
default Windows execution policy we can

210
00:10:51,899 --> 00:10:55,380
set the unrestricted mode for the

211
00:10:55,380 --> 00:10:59,399
current user this one will allow us as

212
00:10:59,399 --> 00:11:02,040
the user as the low privileged user to

213
00:11:02,040 --> 00:11:05,940
run any Powershell scripts to to load

214
00:11:05,940 --> 00:11:09,560
any Powershell modules

215
00:11:09,600 --> 00:11:14,220
good so we tackled the MC bypass and

216
00:11:14,220 --> 00:11:18,779
also the execution policy bypass now we

217
00:11:18,779 --> 00:11:21,480
will take a look over the payload Runner

218
00:11:21,480 --> 00:11:23,880
uh why we need a payload Runner

219
00:11:23,880 --> 00:11:27,920
basically we need it in order to import

220
00:11:27,920 --> 00:11:31,620
the what we did previously and our Shell

221
00:11:31,620 --> 00:11:34,380
Code directly into the memory everything

222
00:11:34,380 --> 00:11:38,160
is being done fileless using this USB

223
00:11:38,160 --> 00:11:40,260
stick

224
00:11:40,260 --> 00:11:42,779
so firstly

225
00:11:42,779 --> 00:11:45,320
um we should have a lookup function

226
00:11:45,320 --> 00:11:49,260
which basically we'll use later for

227
00:11:49,260 --> 00:11:50,700
searching

228
00:11:50,700 --> 00:11:52,740
um for basically for searching for

229
00:11:52,740 --> 00:11:56,519
assembly references and this one

230
00:11:56,519 --> 00:12:00,240
uh it's pretty pretty hard to to explain

231
00:12:00,240 --> 00:12:03,779
and we don't have much much time

232
00:12:03,779 --> 00:12:06,720
um basically we'll use it to to search

233
00:12:06,720 --> 00:12:10,339
some references from other

234
00:12:10,339 --> 00:12:12,480
libraries and things of the nature that

235
00:12:12,480 --> 00:12:15,240
we'll use later in our payload Runner

236
00:12:15,240 --> 00:12:18,720
good then we have the the get delegate

237
00:12:18,720 --> 00:12:22,440
type function uh this one is used to to

238
00:12:22,440 --> 00:12:24,420
set the the argument types because

239
00:12:24,420 --> 00:12:27,540
Powershell does not know some argument

240
00:12:27,540 --> 00:12:31,440
types that are using in C sharp because

241
00:12:31,440 --> 00:12:36,420
all we do we convert to Powershell so

242
00:12:36,420 --> 00:12:41,040
oh okay uh then the the third step would

243
00:12:41,040 --> 00:12:45,060
be to allocate the memory uh using the

244
00:12:45,060 --> 00:12:48,959
virtual alloc function from kernel 32

245
00:12:48,959 --> 00:12:52,620
dll and this is where you we we use the

246
00:12:52,620 --> 00:12:55,079
lookup func and get delegate type

247
00:12:55,079 --> 00:12:57,899
because as I said Powershell doesn't

248
00:12:57,899 --> 00:13:01,680
know about all those argument types so

249
00:13:01,680 --> 00:13:03,720
we needed to look up firstly the

250
00:13:03,720 --> 00:13:06,839
function in the kernel 32 dll and then

251
00:13:06,839 --> 00:13:09,480
getting the argument types

252
00:13:09,480 --> 00:13:12,839
then we generate the Shell Code our

253
00:13:12,839 --> 00:13:16,500
reverse shell or using msv Venom or any

254
00:13:16,500 --> 00:13:17,420
other

255
00:13:17,420 --> 00:13:20,399
C2 framework you want or Shell Code

256
00:13:20,399 --> 00:13:23,660
Generator you want

257
00:13:23,660 --> 00:13:27,839
then we will import our payload our

258
00:13:27,839 --> 00:13:31,440
Shell Code into the payload Runner and

259
00:13:31,440 --> 00:13:35,220
execute it with a marshall copy within

260
00:13:35,220 --> 00:13:39,060
our read writeable memory that we just

261
00:13:39,060 --> 00:13:42,839
previously allocated and just executed

262
00:13:42,839 --> 00:13:46,019
at the final with create thread function

263
00:13:46,019 --> 00:13:49,620
from kernel32.dll

264
00:13:50,519 --> 00:13:55,139
good so uh we have the payload uh you

265
00:13:55,139 --> 00:13:58,079
can try this one from a computer to

266
00:13:58,079 --> 00:14:00,660
another computer but what is most useful

267
00:14:00,660 --> 00:14:03,420
we need to create a silver bullet for

268
00:14:03,420 --> 00:14:07,260
this payload to to run very efficient so

269
00:14:07,260 --> 00:14:10,139
we'll use a bad USB how many of you

270
00:14:10,139 --> 00:14:13,399
played with bad USBS

271
00:14:13,440 --> 00:14:15,779
okay perfect

272
00:14:15,779 --> 00:14:18,000
um how many of you played with rubber

273
00:14:18,000 --> 00:14:19,620
duckies

274
00:14:19,620 --> 00:14:22,980
okay perfect so with USB is not a rubber

275
00:14:22,980 --> 00:14:25,200
ducky or rubber duck is not a bad USB

276
00:14:25,200 --> 00:14:27,540
but we find some similarities between

277
00:14:27,540 --> 00:14:28,500
them

278
00:14:28,500 --> 00:14:33,420
so what is a bad USB similar to rubber

279
00:14:33,420 --> 00:14:34,339
ducky

280
00:14:34,339 --> 00:14:36,899
it's basically a keyboard and the mouse

281
00:14:36,899 --> 00:14:39,899
and it can bypass the removal media

282
00:14:39,899 --> 00:14:43,279
storage filters because it uses other

283
00:14:43,279 --> 00:14:47,639
identifiers then uh on external hard

284
00:14:47,639 --> 00:14:51,199
drive or something like this

285
00:14:51,360 --> 00:14:55,860
so how can we develop payloads for bed

286
00:14:55,860 --> 00:14:56,959
USB

287
00:14:56,959 --> 00:15:01,920
or they use t plus plus syntax which is

288
00:15:01,920 --> 00:15:04,680
pretty pretty bad I mean not pretty bad

289
00:15:04,680 --> 00:15:07,620
but somehow complex so we'll do a Smart

290
00:15:07,620 --> 00:15:09,839
Switch we'll take the docky script

291
00:15:09,839 --> 00:15:14,940
syntax which is user friendly it's more

292
00:15:14,940 --> 00:15:17,000
simpler and we'll use an online

293
00:15:17,000 --> 00:15:20,760
converter in order to convert from docky

294
00:15:20,760 --> 00:15:24,000
script to Arduino to C plus plus which

295
00:15:24,000 --> 00:15:28,380
is used by uh by the bed USB and also

296
00:15:28,380 --> 00:15:30,420
another thing this is based on Arduino

297
00:15:30,420 --> 00:15:33,860
so it's on Arduino microboard

298
00:15:33,860 --> 00:15:39,060
and be be very uh

299
00:15:39,060 --> 00:15:41,040
how to say it

300
00:15:41,040 --> 00:15:43,320
um be very aware when you when you buy

301
00:15:43,320 --> 00:15:45,779
them from China yes they are shipped

302
00:15:45,779 --> 00:15:50,940
from China because I I had a surprise to

303
00:15:50,940 --> 00:15:54,300
um to buy one insert in my my main

304
00:15:54,300 --> 00:15:55,519
computer

305
00:15:55,519 --> 00:15:59,339
fortunately I I'm using Kali Linux as a

306
00:15:59,339 --> 00:16:01,800
default OS system

307
00:16:01,800 --> 00:16:04,500
um and it was basically a malicious

308
00:16:04,500 --> 00:16:07,260
payload that downloaded something from

309
00:16:07,260 --> 00:16:09,720
the from the internet so firstly running

310
00:16:09,720 --> 00:16:12,480
you know in a sandbox when you when you

311
00:16:12,480 --> 00:16:14,959
buy one

312
00:16:15,120 --> 00:16:18,779
okay so as I said we will be using docky

313
00:16:18,779 --> 00:16:20,579
script syntax which is pretty

314
00:16:20,579 --> 00:16:24,420
straightforward so we'll use string as

315
00:16:24,420 --> 00:16:28,620
the as the type to basically for the USB

316
00:16:28,620 --> 00:16:32,579
to enter any string any input to the

317
00:16:32,579 --> 00:16:33,740
computer

318
00:16:33,740 --> 00:16:37,740
and delay if we want to to have some

319
00:16:37,740 --> 00:16:40,459
some sleeping time between the commands

320
00:16:40,459 --> 00:16:45,360
and the rest the rest are not so not so

321
00:16:45,360 --> 00:16:48,540
important for us but I said just to to

322
00:16:48,540 --> 00:16:51,259
specify them

323
00:16:51,420 --> 00:16:55,079
okay how can we persist using this this

324
00:16:55,079 --> 00:17:00,300
attack after we uh after we got the the

325
00:17:00,300 --> 00:17:03,060
shell uh we can search for some

326
00:17:03,060 --> 00:17:06,000
credentials we can try to escalate

327
00:17:06,000 --> 00:17:07,380
privileges

328
00:17:07,380 --> 00:17:09,839
and we can try to find the process to

329
00:17:09,839 --> 00:17:15,119
migrate to such as explorer.xm also

330
00:17:15,119 --> 00:17:19,619
using using this payload it spawns us a

331
00:17:19,619 --> 00:17:22,439
meter Predator which allows also to load

332
00:17:22,439 --> 00:17:26,160
mimikets if the local user is on high

333
00:17:26,160 --> 00:17:30,600
privileged user an admin user

334
00:17:30,600 --> 00:17:34,440
okay so let's let's see a little bit of

335
00:17:34,440 --> 00:17:37,799
demo I hope it works I hope it works but

336
00:17:37,799 --> 00:17:40,820
let's let's see

337
00:17:54,020 --> 00:17:57,440
just one second

338
00:18:10,020 --> 00:18:12,200
foreign

339
00:18:18,660 --> 00:18:21,200
okay

340
00:18:36,480 --> 00:18:40,500
one second just to prepare it here

341
00:18:40,500 --> 00:18:43,100
oh

342
00:18:54,120 --> 00:18:58,260
okay so we will be using

343
00:18:58,260 --> 00:19:02,039
um a Kali machine which is which is on

344
00:19:02,039 --> 00:19:03,900
the internet itself

345
00:19:03,900 --> 00:19:07,320
and a Windows machine as the victim

346
00:19:07,320 --> 00:19:10,640
the the Windows machine

347
00:19:10,640 --> 00:19:15,720
as you can see it's basically up to date

348
00:19:15,720 --> 00:19:19,260
yes it's running it's running Defender

349
00:19:19,260 --> 00:19:21,419
everything fine

350
00:19:21,419 --> 00:19:24,080
we'll start here

351
00:19:24,080 --> 00:19:28,860
a matter Predator listener

352
00:19:28,860 --> 00:19:30,900
just a bit it's running a little bit

353
00:19:30,900 --> 00:19:33,919
slow on hotspot

354
00:19:43,140 --> 00:19:45,740
okay

355
00:19:48,840 --> 00:19:54,439
come on we'll set up the The Listener

356
00:20:03,059 --> 00:20:06,600
reverse plane TCP

357
00:20:06,600 --> 00:20:08,039
set

358
00:20:08,039 --> 00:20:11,840
lhost zero zero zero

359
00:20:11,840 --> 00:20:19,140
set L Port 443 run and we have the

360
00:20:19,140 --> 00:20:22,740
the pet USB we insert

361
00:20:22,740 --> 00:20:25,080
right now into the

362
00:20:25,080 --> 00:20:27,780
machine

363
00:20:27,780 --> 00:20:31,160
and hope it will work

364
00:20:51,299 --> 00:20:53,840
foreign

365
00:21:04,630 --> 00:21:13,249
[Applause]

366
00:21:16,340 --> 00:21:20,100
let's take a look over uh can you put

367
00:21:20,100 --> 00:21:23,039
the the Kali one on the main screen I

368
00:21:23,039 --> 00:21:25,679
want to show how it looks in

369
00:21:25,679 --> 00:21:28,700
in Arduino

370
00:21:29,039 --> 00:21:32,039
so

371
00:21:32,280 --> 00:21:36,240
perfect uh what we'll use basically

372
00:21:36,240 --> 00:21:39,000
to

373
00:21:39,000 --> 00:21:40,080
um

374
00:21:40,080 --> 00:21:42,960
to edit this bad USB is basically

375
00:21:42,960 --> 00:21:44,659
Arduino

376
00:21:44,659 --> 00:21:51,299
compiler and one second let me see I

377
00:21:51,299 --> 00:21:53,940
have it here

378
00:21:53,940 --> 00:21:56,460
oh

379
00:21:56,460 --> 00:21:59,659
just one second

380
00:22:01,020 --> 00:22:03,500
oh

381
00:22:20,100 --> 00:22:21,539
okay

382
00:22:21,539 --> 00:22:24,080
oh

383
00:22:31,740 --> 00:22:35,460
okay I I found it

384
00:22:35,460 --> 00:22:37,860
foreign

385
00:22:37,860 --> 00:22:40,559
so the problem is

386
00:22:40,559 --> 00:22:44,780
that those little little USPS

387
00:22:44,780 --> 00:22:49,980
have just a small a small uh portion of

388
00:22:49,980 --> 00:22:53,220
memory that you can write code with

389
00:22:53,220 --> 00:22:56,400
um and you should compress somehow the

390
00:22:56,400 --> 00:22:58,460
the payloads

391
00:22:58,460 --> 00:23:00,419
for example

392
00:23:00,419 --> 00:23:03,260
for example

393
00:23:04,400 --> 00:23:07,500
where it is

394
00:23:07,500 --> 00:23:09,500
um

395
00:23:11,280 --> 00:23:15,960
for example we can actually store

396
00:23:15,960 --> 00:23:20,039
the the payload what the bit USB writes

397
00:23:20,039 --> 00:23:23,580
and then delete it using keyboard.print

398
00:23:23,580 --> 00:23:25,919
and if

399
00:23:25,919 --> 00:23:30,600
uh identifier the starting point of the

400
00:23:30,600 --> 00:23:32,880
of the code

401
00:23:32,880 --> 00:23:35,700
yes that's that's it just just a little

402
00:23:35,700 --> 00:23:37,500
little hint

403
00:23:37,500 --> 00:23:40,380
uh okay I think we can move forward with

404
00:23:40,380 --> 00:23:43,340
the presentation please

405
00:23:44,159 --> 00:23:46,700
um prevention for this type of attack

406
00:23:46,700 --> 00:23:49,860
basically you should disable Powershell

407
00:23:49,860 --> 00:23:53,640
for all low privileged end users

408
00:23:53,640 --> 00:23:56,520
um should have an access control list on

409
00:23:56,520 --> 00:23:59,340
USB ports but this is hard

410
00:23:59,340 --> 00:24:02,280
I know that you can have some kind of

411
00:24:02,280 --> 00:24:05,640
white listing to uh not what listing is

412
00:24:05,640 --> 00:24:08,820
the the incorrect word for this access

413
00:24:08,820 --> 00:24:12,740
allow list yes access allow list

414
00:24:12,740 --> 00:24:15,600
which will provide access to just some

415
00:24:15,600 --> 00:24:18,600
vendors of keyboards mouses and things

416
00:24:18,600 --> 00:24:20,640
of the nature

417
00:24:20,640 --> 00:24:24,120
change your approach for antivirus and

418
00:24:24,120 --> 00:24:25,799
use something like Advanced endpoint

419
00:24:25,799 --> 00:24:28,620
protection solution and also for the

420
00:24:28,620 --> 00:24:31,320
user train them so train them to not

421
00:24:31,320 --> 00:24:34,080
pick USB sticks from the parking lot

422
00:24:34,080 --> 00:24:36,960
while they are smoking

423
00:24:36,960 --> 00:24:40,500
okay unfortunately

424
00:24:40,919 --> 00:24:41,580
um

425
00:24:41,580 --> 00:24:45,780
I reported the this issue to multiple

426
00:24:45,780 --> 00:24:48,720
antivirus vendors to multiple security

427
00:24:48,720 --> 00:24:51,720
providers to Defender also and here are

428
00:24:51,720 --> 00:24:52,980
the results

429
00:24:52,980 --> 00:24:55,679
Microsoft is not considering this worth

430
00:24:55,679 --> 00:24:58,700
their attention unfortunately

431
00:24:58,700 --> 00:25:02,400
the research was tested on 20 antivirus

432
00:25:02,400 --> 00:25:04,799
vendors free trial versions

433
00:25:04,799 --> 00:25:08,220
uh seven from 20 spawn the meter

434
00:25:08,220 --> 00:25:11,039
pressure reverse cell which allowed also

435
00:25:11,039 --> 00:25:13,559
mimic has to be run into the memory and

436
00:25:13,559 --> 00:25:17,820
extract credentials uh 9 from 20 spawned

437
00:25:17,820 --> 00:25:22,440
only a normal reversal and four from 20

438
00:25:22,440 --> 00:25:26,520
block the the attempt I'm not disclosing

439
00:25:26,520 --> 00:25:30,480
the AV vendors names or things of the

440
00:25:30,480 --> 00:25:33,539
nature but the issue was reported to to

441
00:25:33,539 --> 00:25:36,240
all that allowed

442
00:25:36,240 --> 00:25:39,900
16 all out yes

443
00:25:39,900 --> 00:25:44,100
okay and a little announcement

444
00:25:44,100 --> 00:25:46,380
um we are working on a very interesting

445
00:25:46,380 --> 00:25:49,559
project at the national level

446
00:25:49,559 --> 00:25:51,720
which is the national cyber security

447
00:25:51,720 --> 00:25:54,120
training center of excellence which will

448
00:25:54,120 --> 00:25:57,840
be starting from the next year so I hope

449
00:25:57,840 --> 00:26:00,500
that this will provide

450
00:26:00,500 --> 00:26:03,480
opportunity for students for people that

451
00:26:03,480 --> 00:26:05,700
want to get into this domain to learn

452
00:26:05,700 --> 00:26:09,539
more and to to form a beautiful career

453
00:26:09,539 --> 00:26:13,080
path and I think that's it

454
00:26:13,080 --> 00:26:14,940
thank you very much

455
00:26:14,940 --> 00:26:18,799
[Applause]

456
00:26:21,950 --> 00:26:23,419
[Applause]

457
00:26:23,419 --> 00:26:26,039
thank you thank you for very interesting

458
00:26:26,039 --> 00:26:28,500
presentation I have two small questions

459
00:26:28,500 --> 00:26:31,400
the first one and the easiest

460
00:26:31,400 --> 00:26:34,860
vulnerability payload already public did

461
00:26:34,860 --> 00:26:37,500
you upload it to GitHub it's the first

462
00:26:37,500 --> 00:26:39,779
question and the second one is did you

463
00:26:39,779 --> 00:26:43,940
check this vulnerability on bitdefender

464
00:26:46,799 --> 00:26:48,779
I'll not answer to the second question

465
00:26:48,779 --> 00:26:50,820
I'll not answer to the second question

466
00:26:50,820 --> 00:26:53,760
I'll not answer to that question but the

467
00:26:53,760 --> 00:26:55,200
first question yes it's public

468
00:26:55,200 --> 00:26:58,200
everything is public I've wrote also an

469
00:26:58,200 --> 00:27:00,260
article about this explanation

470
00:27:00,260 --> 00:27:03,440
exploitation pet but it's a simple

471
00:27:03,440 --> 00:27:09,480
write-up and this speak was about uh

472
00:27:09,480 --> 00:27:12,720
extended version of that of that

473
00:27:12,720 --> 00:27:15,059
exploitation it's it's public everything

474
00:27:15,059 --> 00:27:18,799
you can find it on medium

475
00:27:19,919 --> 00:27:21,299
um thank you for this excellent

476
00:27:21,299 --> 00:27:22,740
presentation at the beginning you

477
00:27:22,740 --> 00:27:24,299
mentioned uh

478
00:27:24,299 --> 00:27:26,940
um this attack can be launched on

479
00:27:26,940 --> 00:27:29,940
systems where admin sorry Powershell is

480
00:27:29,940 --> 00:27:32,400
disabled like restricted for the end

481
00:27:32,400 --> 00:27:34,020
users

482
00:27:34,020 --> 00:27:36,419
um but clearly you can't really if

483
00:27:36,419 --> 00:27:38,100
somebody can't run Powershell on their

484
00:27:38,100 --> 00:27:40,140
computer you can't really do anything

485
00:27:40,140 --> 00:27:41,460
with it right

486
00:27:41,460 --> 00:27:45,360
right or is there another function which

487
00:27:45,360 --> 00:27:49,260
is the quantity content language mode

488
00:27:49,260 --> 00:27:52,919
for Powershell uh but that one can be

489
00:27:52,919 --> 00:27:55,559
also bypassed in a group policy if you

490
00:27:55,559 --> 00:27:57,600
disable Powershell command prompt and

491
00:27:57,600 --> 00:27:59,100
they have no use the user doesn't have

492
00:27:59,100 --> 00:28:01,260
admin right yes how would you be able to

493
00:28:01,260 --> 00:28:04,380
run anything onto it uh for the high

494
00:28:04,380 --> 00:28:07,020
privileged users basically so allow it

495
00:28:07,020 --> 00:28:09,720
for high privileged user high privilege

496
00:28:09,720 --> 00:28:12,179
will will not actually insert a USB

497
00:28:12,179 --> 00:28:13,980
without checking their computers or even

498
00:28:13,980 --> 00:28:16,740
checking what's on the USB right yes but

499
00:28:16,740 --> 00:28:19,860
for normal users I do not see really the

500
00:28:19,860 --> 00:28:22,500
point when they need to to access

501
00:28:22,500 --> 00:28:24,419
Powershell yeah that's why we keep it

502
00:28:24,419 --> 00:28:26,580
disabled yes but initially you say that

503
00:28:26,580 --> 00:28:28,559
it could be overwritten even if

504
00:28:28,559 --> 00:28:30,840
Powershell was disabled or was it just

505
00:28:30,840 --> 00:28:33,779
command prompt ah no no no I was talking

506
00:28:33,779 --> 00:28:35,580
about content language mode for

507
00:28:35,580 --> 00:28:37,799
Powershell oh right yes which is a

508
00:28:37,799 --> 00:28:39,900
Sandbox a Sandbox for Powershell

509
00:28:39,900 --> 00:28:44,539
commands and scripts yes no thank you

510
00:28:46,039 --> 00:28:48,600
hello thank you very much for your very

511
00:28:48,600 --> 00:28:50,940
interesting presentation uh I want to

512
00:28:50,940 --> 00:28:53,820
ask something related to the payload why

513
00:28:53,820 --> 00:28:56,220
have you chosen Metasploit it's the most

514
00:28:56,220 --> 00:28:59,100
detected and the most used

515
00:28:59,100 --> 00:29:01,380
attack system so everyone will expect

516
00:29:01,380 --> 00:29:04,320
attackers to use them exactly that's the

517
00:29:04,320 --> 00:29:06,439
reason

518
00:29:07,320 --> 00:29:11,039
how how to show better if not choosing a

519
00:29:11,039 --> 00:29:13,440
very well-known detected solution

520
00:29:13,440 --> 00:29:15,840
Defender doesn't block it

521
00:29:15,840 --> 00:29:19,140
this is the main reason oh okay so for

522
00:29:19,140 --> 00:29:20,820
more sophisticated attacks you could

523
00:29:20,820 --> 00:29:24,240
code your own payloads

524
00:29:24,240 --> 00:29:27,120
for some customized you can also use

525
00:29:27,120 --> 00:29:29,760
modules from cobal Strike you can

526
00:29:29,760 --> 00:29:33,919
customize and yeah okay thank you

527
00:29:34,320 --> 00:29:37,200
um so what version of Defender did you

528
00:29:37,200 --> 00:29:38,039
use

529
00:29:38,039 --> 00:29:40,380
sorry what version of Defender did you

530
00:29:40,380 --> 00:29:43,080
use the free one the Enterprise one uh

531
00:29:43,080 --> 00:29:46,200
the the default one the default one the

532
00:29:46,200 --> 00:29:47,940
one that comes with it comes with

533
00:29:47,940 --> 00:29:49,760
Windows 10 home

534
00:29:49,760 --> 00:29:52,679
x64. have you tried to do it with the

535
00:29:52,679 --> 00:29:54,539
Enterprise version and with the yes

536
00:29:54,539 --> 00:29:58,860
Enterprise blocks it okay thank you

537
00:29:58,860 --> 00:30:01,399
foreign

538
00:30:04,919 --> 00:30:07,020
hey

539
00:30:07,020 --> 00:30:10,559
um so what's the actual root cause in

540
00:30:10,559 --> 00:30:12,779
this probe exploitation chain what's

541
00:30:12,779 --> 00:30:15,720
what's the technical issue actually

542
00:30:15,720 --> 00:30:18,600
it's a chain of technical issues firstly

543
00:30:18,600 --> 00:30:22,320
the the MC so the defender must notice

544
00:30:22,320 --> 00:30:27,120
when the OMSI is patched secondly the

545
00:30:27,120 --> 00:30:32,460
memory addresses that we override the

546
00:30:32,460 --> 00:30:35,220
that attempt must be also checked by

547
00:30:35,220 --> 00:30:39,559
Defender uh also the execution policy

548
00:30:39,559 --> 00:30:43,380
should low privileged users should not

549
00:30:43,380 --> 00:30:45,720
be allowed to change the execution

550
00:30:45,720 --> 00:30:47,299
policy

551
00:30:47,299 --> 00:30:49,320
and then

552
00:30:49,320 --> 00:30:52,260
greater signatures for Defender

553
00:30:52,260 --> 00:30:54,179
cool thanks

554
00:30:54,179 --> 00:30:56,279
so first of all congratulations for the

555
00:30:56,279 --> 00:30:59,340
presentation and the POC uh it's lovely

556
00:30:59,340 --> 00:31:02,520
to see it working live this is more like

557
00:31:02,520 --> 00:31:04,679
a philosophical question regarding DMZ

558
00:31:04,679 --> 00:31:07,080
protection what would trigger a security

559
00:31:07,080 --> 00:31:10,260
developer to allow the bypass of an

560
00:31:10,260 --> 00:31:12,919
invalid argument into a security product

561
00:31:12,919 --> 00:31:15,840
security product because clearly it's

562
00:31:15,840 --> 00:31:17,880
something that will protect the users

563
00:31:17,880 --> 00:31:21,059
and why would you not invest time and

564
00:31:21,059 --> 00:31:23,399
not protect it sufficiently

565
00:31:23,399 --> 00:31:27,000
yes so your question is basically uh

566
00:31:27,000 --> 00:31:29,820
regarding the age result that we yeah I

567
00:31:29,820 --> 00:31:31,799
mean why would you prefer to pass some

568
00:31:31,799 --> 00:31:33,840
arguments instead of blocking them if

569
00:31:33,840 --> 00:31:35,520
you're talking about securing a product

570
00:31:35,520 --> 00:31:38,760
that should protect the users

571
00:31:38,760 --> 00:31:40,200
I don't know that's that's a question

572
00:31:40,200 --> 00:31:43,080
for developers I think

573
00:31:43,080 --> 00:31:46,020
no I I mean I see it as a single point

574
00:31:46,020 --> 00:31:47,399
of failure because if you fail to

575
00:31:47,399 --> 00:31:49,679
protect that one it's easier to develop

576
00:31:49,679 --> 00:31:51,299
that exploit so

577
00:31:51,299 --> 00:31:53,299
why wouldn't you take into consideration

578
00:31:53,299 --> 00:31:55,140
blocking the

579
00:31:55,140 --> 00:31:58,080
arguments instead of forwarding them

580
00:31:58,080 --> 00:32:00,620
ah okay uh

581
00:32:00,620 --> 00:32:03,840
basically because

582
00:32:03,840 --> 00:32:06,799
um it's by default it allows you to pass

583
00:32:06,799 --> 00:32:10,320
the the script you can choose any any

584
00:32:10,320 --> 00:32:14,760
error code from there so so I chose one

585
00:32:14,760 --> 00:32:17,580
random from the documentation you can

586
00:32:17,580 --> 00:32:20,880
just choose any error code and once the

587
00:32:20,880 --> 00:32:24,059
age result is returned to the user uh

588
00:32:24,059 --> 00:32:27,659
basically it will pass the execution of

589
00:32:27,659 --> 00:32:31,880
the of the script of the partial script

590
00:32:34,200 --> 00:32:36,059
quick quick question here can you hear

591
00:32:36,059 --> 00:32:36,840
me

592
00:32:36,840 --> 00:32:38,220
okay

593
00:32:38,220 --> 00:32:40,799
uh quick question here uh do you know if

594
00:32:40,799 --> 00:32:42,840
this is still possible with the latest

595
00:32:42,840 --> 00:32:46,860
security changes in Windows 11. uh I

596
00:32:46,860 --> 00:32:48,480
don't know I didn't test it didn't test

597
00:32:48,480 --> 00:32:50,419
okay

598
00:32:50,419 --> 00:32:52,740
for the presentation I was curious if

599
00:32:52,740 --> 00:32:54,600
you checked the logs or of any of your

600
00:32:54,600 --> 00:32:57,419
commands were identified by Windows

601
00:32:57,419 --> 00:32:59,120
event logs or anything

602
00:32:59,120 --> 00:33:03,659
uh this mod detects them okay if you

603
00:33:03,659 --> 00:33:05,460
have this one you can see them in

604
00:33:05,460 --> 00:33:07,620
seasonal how about the Windows Firewall

605
00:33:07,620 --> 00:33:08,760
log

606
00:33:08,760 --> 00:33:11,220
usually that should detect part of a

607
00:33:11,220 --> 00:33:13,340
shot yes yes

608
00:33:13,340 --> 00:33:16,820
okay thank you

609
00:33:22,559 --> 00:33:25,200
uh hello so I've seen that you've used

610
00:33:25,200 --> 00:33:28,860
Powershell or the export yourself and I

611
00:33:28,860 --> 00:33:31,679
was thinking maybe if you

612
00:33:31,679 --> 00:33:32,640
um

613
00:33:32,640 --> 00:33:36,919
did a POC where you used uh C plus plus

614
00:33:36,919 --> 00:33:39,659
so you wouldn't need an active

615
00:33:39,659 --> 00:33:41,039
Powershell and you would just need to

616
00:33:41,039 --> 00:33:44,159
run the executable and do let it do the

617
00:33:44,159 --> 00:33:47,399
patches and everything yes so A C C plus

618
00:33:47,399 --> 00:33:50,640
plus was used to encode the payload the

619
00:33:50,640 --> 00:33:53,640
Powershell payload into the the bed USB

620
00:33:53,640 --> 00:33:57,240
device yeah yeah but uh I was thinking

621
00:33:57,240 --> 00:33:59,700
maybe the patching of the Windows

622
00:33:59,700 --> 00:34:02,220
Defender and everything

623
00:34:02,220 --> 00:34:05,159
um could be due could be done in C plus

624
00:34:05,159 --> 00:34:07,559
plus and you wouldn't need Powershell

625
00:34:07,559 --> 00:34:09,480
and maybe you could bypass some other

626
00:34:09,480 --> 00:34:12,239
protections for example on yes execution

627
00:34:12,239 --> 00:34:15,599
policies yes it's it's possible C sharp

628
00:34:15,599 --> 00:34:17,879
C plus plus

629
00:34:17,879 --> 00:34:19,260
visual

630
00:34:19,260 --> 00:34:21,719
yeah I was just thinking if you did that

631
00:34:21,719 --> 00:34:27,500
oh no no okay I relied on partial

632
00:34:28,099 --> 00:34:31,080
one question from me so thanks a lot for

633
00:34:31,080 --> 00:34:32,639
the presentation

634
00:34:32,639 --> 00:34:35,339
um here here okay in the back

635
00:34:35,339 --> 00:34:37,918
uh

636
00:34:37,918 --> 00:34:39,899
um I was curious how come data execution

637
00:34:39,899 --> 00:34:42,060
prevention didn't prevent you from

638
00:34:42,060 --> 00:34:44,760
writing to the dll

639
00:34:44,760 --> 00:34:46,320
I don't know

640
00:34:46,320 --> 00:34:49,359
[Music]

641
00:34:50,639 --> 00:34:53,280
uh sorry yeah yes

642
00:34:53,280 --> 00:34:57,300
uh I was curious uh what trigger did was

643
00:34:57,300 --> 00:34:59,700
it the auto run or the fact that he

644
00:34:59,700 --> 00:35:01,740
detected new hardware

645
00:35:01,740 --> 00:35:04,560
so my question is if auto run would be

646
00:35:04,560 --> 00:35:07,320
disabled would it still be yes okay yes

647
00:35:07,320 --> 00:35:10,460
because it's not a USB it's not a

648
00:35:10,460 --> 00:35:13,920
removal media storage it's a device yeah

649
00:35:13,920 --> 00:35:16,859
okay so it's the hardware detection that

650
00:35:16,859 --> 00:35:20,180
triggered it yes okay

651
00:35:24,560 --> 00:35:27,300
thank you so much if we don't have any

652
00:35:27,300 --> 00:35:29,280
other question let's give it up for

653
00:35:29,280 --> 00:35:29,580
Christian

654
00:35:29,580 --> 00:35:36,590
[Applause]

