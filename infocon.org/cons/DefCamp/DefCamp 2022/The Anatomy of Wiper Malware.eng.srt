1
00:00:00,000 --> 00:00:02,340
so to present myself my name is Johan

2
00:00:02,340 --> 00:00:05,759
Jacob I'm a security researcher at Cross

3
00:00:05,759 --> 00:00:08,700
strike for quite some years now and I

4
00:00:08,700 --> 00:00:11,219
have nine years of experience in the

5
00:00:11,219 --> 00:00:12,179
domain

6
00:00:12,179 --> 00:00:15,059
my colleague will assist me his his name

7
00:00:15,059 --> 00:00:17,880
is Madeline yonitza he also works for

8
00:00:17,880 --> 00:00:21,660
crowdstrike and has more than six years

9
00:00:21,660 --> 00:00:23,220
experience in reverse engineering

10
00:00:23,220 --> 00:00:25,380
malware

11
00:00:25,380 --> 00:00:28,500
so this is the agenda of today we're

12
00:00:28,500 --> 00:00:32,040
gonna gonna talk a bit about various

13
00:00:32,040 --> 00:00:34,800
techniques that wipers have used in the

14
00:00:34,800 --> 00:00:36,200
past 10 years

15
00:00:36,200 --> 00:00:39,540
uh I think you already know about the

16
00:00:39,540 --> 00:00:43,920
context from the spring Ukraine hasn't

17
00:00:43,920 --> 00:00:45,780
been only attacked on the battlefield

18
00:00:45,780 --> 00:00:48,360
but also in the cyber security space and

19
00:00:48,360 --> 00:00:51,180
it has seen five or six wiper families

20
00:00:51,180 --> 00:00:53,460
trying to sabotage their their

21
00:00:53,460 --> 00:00:55,320
operations

22
00:00:55,320 --> 00:00:57,480
so to give you some uh some background

23
00:00:57,480 --> 00:01:00,780
first what wipers do is they're mainly

24
00:01:00,780 --> 00:01:02,879
used to to sabotage as previously

25
00:01:02,879 --> 00:01:06,299
mentioned they their only purpose in

26
00:01:06,299 --> 00:01:09,659
life is to destroy data Beyond

27
00:01:09,659 --> 00:01:11,460
recoverability

28
00:01:11,460 --> 00:01:14,520
and they can also they can Target both

29
00:01:14,520 --> 00:01:17,880
files and the drive itself so depending

30
00:01:17,880 --> 00:01:20,360
on the type of wiper you're dealing with

31
00:01:20,360 --> 00:01:22,979
you might see either files or the entire

32
00:01:22,979 --> 00:01:25,680
Drive being being wiped

33
00:01:25,680 --> 00:01:28,140
there are some uh shared trades between

34
00:01:28,140 --> 00:01:30,720
wipers and ransomers so they pretty much

35
00:01:30,720 --> 00:01:33,420
have the same Anatomy I would say the

36
00:01:33,420 --> 00:01:35,420
only the biggest difference is that

37
00:01:35,420 --> 00:01:39,119
ransomware needs to somehow make data

38
00:01:39,119 --> 00:01:40,799
recoverable

39
00:01:40,799 --> 00:01:43,140
and wipers do not need to do that extra

40
00:01:43,140 --> 00:01:45,140
step

41
00:01:45,140 --> 00:01:49,799
well over the 20 or so wiper families

42
00:01:49,799 --> 00:01:53,220
that we analyzed we found that there are

43
00:01:53,220 --> 00:01:54,960
quite a lot of techniques so we'll try

44
00:01:54,960 --> 00:01:58,699
and dive into some of them

45
00:02:00,720 --> 00:02:03,600
and each technique comes with its own

46
00:02:03,600 --> 00:02:05,399
set of advantages and disadvantages

47
00:02:05,399 --> 00:02:08,340
either speed or recoverability for uh

48
00:02:08,340 --> 00:02:10,199
for the victim

49
00:02:10,199 --> 00:02:13,379
to give you some history uh

50
00:02:13,379 --> 00:02:16,739
I've we started analyzing wipers from

51
00:02:16,739 --> 00:02:20,900
back in 20 2012 with

52
00:02:20,900 --> 00:02:24,840
raskas being targeted by by shamoon and

53
00:02:24,840 --> 00:02:27,720
all of the following years have various

54
00:02:27,720 --> 00:02:28,879
types of

55
00:02:28,879 --> 00:02:32,400
wipers being

56
00:02:32,400 --> 00:02:35,099
targeting various companies and last

57
00:02:35,099 --> 00:02:38,160
this year in Ukraine uh we've seen you

58
00:02:38,160 --> 00:02:41,760
know six or so smaller families uh wiper

59
00:02:41,760 --> 00:02:44,040
families targeting Ukraine alone so

60
00:02:44,040 --> 00:02:46,680
that's why we we got interested in doing

61
00:02:46,680 --> 00:02:48,599
uh

62
00:02:48,599 --> 00:02:50,940
presentation on this

63
00:02:50,940 --> 00:02:53,760
our goals for today's talk is to

64
00:02:53,760 --> 00:02:55,739
identify the most common techniques used

65
00:02:55,739 --> 00:02:58,560
by by wipers talk a bit about some of

66
00:02:58,560 --> 00:03:00,319
them do a deep dive

67
00:03:00,319 --> 00:03:04,140
identify the the most common ones and

68
00:03:04,140 --> 00:03:06,540
see their their benefits and

69
00:03:06,540 --> 00:03:08,640
disadvantages

70
00:03:08,640 --> 00:03:10,200
so

71
00:03:10,200 --> 00:03:12,060
I'm gonna start with some main

72
00:03:12,060 --> 00:03:15,000
techniques that all of or the majority

73
00:03:15,000 --> 00:03:18,420
of wipers have will have file Discovery

74
00:03:18,420 --> 00:03:19,980
file override

75
00:03:19,980 --> 00:03:22,440
how they distract the drive or destroy

76
00:03:22,440 --> 00:03:25,739
the drive and we also see that these

77
00:03:25,739 --> 00:03:28,140
wipers differ in the data that is

78
00:03:28,140 --> 00:03:32,359
overwritten on top of the target files

79
00:03:33,540 --> 00:03:34,980
um

80
00:03:34,980 --> 00:03:36,840
already mentioned that wipers have some

81
00:03:36,840 --> 00:03:38,780
treats with with ransomware

82
00:03:38,780 --> 00:03:42,720
some wipers are just darn simple the

83
00:03:42,720 --> 00:03:44,819
only thing that they do is they delete

84
00:03:44,819 --> 00:03:48,780
delete files other go even into the

85
00:03:48,780 --> 00:03:50,940
kernel and try to

86
00:03:50,940 --> 00:03:54,599
delete raw sectors from the kernel space

87
00:03:54,599 --> 00:03:56,159
which is something user mode cannot

88
00:03:56,159 --> 00:03:58,620
cannot do but let's dive into the

89
00:03:58,620 --> 00:04:00,120
technical part

90
00:04:00,120 --> 00:04:02,879
I'm going to start with file discovery

91
00:04:02,879 --> 00:04:04,500
this is

92
00:04:04,500 --> 00:04:06,500
um

93
00:04:06,959 --> 00:04:09,659
a technique that is seen in most of the

94
00:04:09,659 --> 00:04:12,720
wiper families out there you it would

95
00:04:12,720 --> 00:04:15,060
need to iterate over the entire file

96
00:04:15,060 --> 00:04:17,940
system in order to find Target the

97
00:04:17,940 --> 00:04:19,738
targets the target files and the target

98
00:04:19,738 --> 00:04:22,019
drives that it needs to

99
00:04:22,019 --> 00:04:25,800
to to wipe and to do so the most often

100
00:04:25,800 --> 00:04:29,220
seeing apis are find first file and find

101
00:04:29,220 --> 00:04:33,780
next file within a recursive function

102
00:04:33,780 --> 00:04:36,419
the majority of wipers will immediately

103
00:04:36,419 --> 00:04:41,639
wipe the file uh when it reaches it but

104
00:04:41,639 --> 00:04:43,800
a few like Apostle double zero Rich

105
00:04:43,800 --> 00:04:45,060
scale Shred

106
00:04:45,060 --> 00:04:49,139
we'll cue them to be wiped after the

107
00:04:49,139 --> 00:04:51,300
iteration process has finished

108
00:04:51,300 --> 00:04:54,180
which might buy some time for uh for the

109
00:04:54,180 --> 00:04:57,900
victim to to stop the wiping process

110
00:04:57,900 --> 00:05:00,600
uh to override the files

111
00:05:00,600 --> 00:05:03,720
the most often scene technique is just

112
00:05:03,720 --> 00:05:07,280
plain old right file API

113
00:05:07,280 --> 00:05:09,540
of course in order to write to a file

114
00:05:09,540 --> 00:05:11,520
you need a handle to a file so you would

115
00:05:11,520 --> 00:05:14,280
use create file for that

116
00:05:14,280 --> 00:05:17,880
uh and some wipers differ in the amount

117
00:05:17,880 --> 00:05:19,919
of data that is overwritten to the file

118
00:05:19,919 --> 00:05:22,440
some right overwrite the entire length

119
00:05:22,440 --> 00:05:25,080
of the file others just try to increase

120
00:05:25,080 --> 00:05:28,680
speed of operation by overwriting the

121
00:05:28,680 --> 00:05:33,180
first X bytes from from that file

122
00:05:33,180 --> 00:05:38,220
which might leave room for recovery

123
00:05:40,259 --> 00:05:42,600
some wiper families like double zero Go

124
00:05:42,600 --> 00:05:45,300
a step further and use use ioctos

125
00:05:45,300 --> 00:05:48,840
against files in order to to to wipe the

126
00:05:48,840 --> 00:05:50,280
files

127
00:05:50,280 --> 00:05:51,660
um modeling we will talk a bit more

128
00:05:51,660 --> 00:05:53,639
about what an eye octol is I'm just

129
00:05:53,639 --> 00:05:56,699
gonna do a brief presentation of one

130
00:05:56,699 --> 00:05:59,940
this one double zero uses NTFS control

131
00:05:59,940 --> 00:06:02,639
file API and sends the set zero data

132
00:06:02,639 --> 00:06:06,300
sends the set zero data ioctal to

133
00:06:06,300 --> 00:06:09,600
to the file system and this way the

134
00:06:09,600 --> 00:06:11,100
entire length of the file will be

135
00:06:11,100 --> 00:06:13,979
overwritten with the with zeros

136
00:06:13,979 --> 00:06:16,039
you can see a code snippet on the left

137
00:06:16,039 --> 00:06:20,039
if you want to have a better look all of

138
00:06:20,039 --> 00:06:21,720
the slides of course will be available

139
00:06:21,720 --> 00:06:24,919
after the presentation

140
00:06:25,259 --> 00:06:30,060
other families uh use simple simple file

141
00:06:30,060 --> 00:06:34,100
deletion using delete file

142
00:06:36,620 --> 00:06:39,060
implement this uh

143
00:06:39,060 --> 00:06:42,080
this technique

144
00:06:44,639 --> 00:06:48,240
you can see over here on your left one

145
00:06:48,240 --> 00:06:50,759
good example is they open the file they

146
00:06:50,759 --> 00:06:54,660
they read the they grab the size of that

147
00:06:54,660 --> 00:06:55,620
file

148
00:06:55,620 --> 00:06:58,080
they override the entire file with uh

149
00:06:58,080 --> 00:07:01,080
with bogus data and at the end they will

150
00:07:01,080 --> 00:07:04,340
uh they will delete it

151
00:07:08,880 --> 00:07:09,979
another

152
00:07:09,979 --> 00:07:14,039
Target is uh so we've talked previously

153
00:07:14,039 --> 00:07:15,900
about files but another Target for

154
00:07:15,900 --> 00:07:19,280
wipers would be the drive itself

155
00:07:19,280 --> 00:07:23,160
so why not just uh why why delete all of

156
00:07:23,160 --> 00:07:25,979
the the files when you can just uh stop

157
00:07:25,979 --> 00:07:29,639
the operation of your target just by

158
00:07:29,639 --> 00:07:30,900
um

159
00:07:30,900 --> 00:07:33,780
deleting the master boot records in

160
00:07:33,780 --> 00:07:36,300
order to do so caddy wiper uses another

161
00:07:36,300 --> 00:07:39,599
I octo the disk set Drive layout diaper

162
00:07:39,599 --> 00:07:42,539
and this one is used to to wipe out the

163
00:07:42,539 --> 00:07:48,139
web out the MBR of the of the machine

164
00:07:51,120 --> 00:07:53,880
we've seen also some differences in the

165
00:07:53,880 --> 00:07:57,860
contents that are overwritten over files

166
00:07:58,259 --> 00:08:00,900
most of the samples like caddy wiper

167
00:08:00,900 --> 00:08:03,660
double zero kill disk Etc will override

168
00:08:03,660 --> 00:08:05,880
the files with zeros

169
00:08:05,880 --> 00:08:08,039
because this might leave some

170
00:08:08,039 --> 00:08:11,460
opportunity for uh recovery methods like

171
00:08:11,460 --> 00:08:13,740
magnetic force microscopy which is

172
00:08:13,740 --> 00:08:15,000
something that we're not going to dive

173
00:08:15,000 --> 00:08:18,780
into right now other wipers decided to

174
00:08:18,780 --> 00:08:21,319
Let's Implement random data

175
00:08:21,319 --> 00:08:24,840
so they generate a random buffer this

176
00:08:24,840 --> 00:08:27,419
buffer of course when it's generated to

177
00:08:27,419 --> 00:08:28,740
take some time so it takes some

178
00:08:28,740 --> 00:08:31,039
computational power so

179
00:08:31,039 --> 00:08:33,958
it the operation will take more more

180
00:08:33,958 --> 00:08:35,520
time

181
00:08:35,520 --> 00:08:38,219
but this is the preferred technique by

182
00:08:38,219 --> 00:08:40,679
uh by some wipers in order to minimize

183
00:08:40,679 --> 00:08:43,620
that generation time of random data in

184
00:08:43,620 --> 00:08:45,860
the case of

185
00:08:45,860 --> 00:08:49,740
uh what motor was this one

186
00:08:49,740 --> 00:08:52,680
discover you would see that it uses

187
00:08:52,680 --> 00:08:54,000
malloc

188
00:08:54,000 --> 00:08:56,640
which allocates a piece of memory but

189
00:08:56,640 --> 00:08:58,740
doesn't initiate that that memory with

190
00:08:58,740 --> 00:09:01,140
zero so you would have garbage data in

191
00:09:01,140 --> 00:09:03,420
in that memory so that garbage data is

192
00:09:03,420 --> 00:09:06,480
overwritten over the over the the target

193
00:09:06,480 --> 00:09:09,240
file which is a nice way of generating

194
00:09:09,240 --> 00:09:12,320
random data

195
00:09:12,360 --> 00:09:14,360
in order to

196
00:09:14,360 --> 00:09:16,820
surpass that potential

197
00:09:16,820 --> 00:09:19,980
drawback other wiper families have

198
00:09:19,980 --> 00:09:21,600
hard-coded

199
00:09:21,600 --> 00:09:25,080
contents that will be overwritten to the

200
00:09:25,080 --> 00:09:28,140
files in the case of shamun for example

201
00:09:28,140 --> 00:09:29,760
they have

202
00:09:29,760 --> 00:09:32,640
a JPEG image that is overwritten over

203
00:09:32,640 --> 00:09:35,820
these files you can see here in the

204
00:09:35,820 --> 00:09:39,540
memory of this debugger the jpeg header

205
00:09:39,540 --> 00:09:41,640
I want to show you the the image is

206
00:09:41,640 --> 00:09:44,220
pretty pretty ugly and in the case of

207
00:09:44,220 --> 00:09:46,800
Israel by they were overwriting with the

208
00:09:46,800 --> 00:09:49,860
xenophobic message on the

209
00:09:49,860 --> 00:09:52,200
the contents of the file is Rabbi was

210
00:09:52,200 --> 00:09:54,600
targeting Israel

211
00:09:54,600 --> 00:09:57,540
I think you can guess by the name

212
00:09:57,540 --> 00:10:01,019
so that is for the first part uh I'm

213
00:10:01,019 --> 00:10:03,120
gonna hand it over to Madeline please

214
00:10:03,120 --> 00:10:04,980
take it over

215
00:10:04,980 --> 00:10:07,500
hello so in this part I will talk about

216
00:10:07,500 --> 00:10:10,980
iOS eye octals and how well they are

217
00:10:10,980 --> 00:10:14,339
used in the samples that we've analyzed

218
00:10:14,339 --> 00:10:17,160
first of all I octos are a method of

219
00:10:17,160 --> 00:10:18,660
communicating between a user mode

220
00:10:18,660 --> 00:10:20,940
process and a kernel mode device

221
00:10:20,940 --> 00:10:25,620
uh they are sent via a device IO control

222
00:10:25,620 --> 00:10:29,160
API and they are used by developers in

223
00:10:29,160 --> 00:10:31,620
order to gain extra functionalities from

224
00:10:31,620 --> 00:10:32,959
the operating system

225
00:10:32,959 --> 00:10:36,720
other than the well-known create open

226
00:10:36,720 --> 00:10:38,300
read write

227
00:10:38,300 --> 00:10:42,620
Windows API that are available

228
00:10:42,620 --> 00:10:44,060
[Music]

229
00:10:44,060 --> 00:10:46,800
in order to gain extra functionality as

230
00:10:46,800 --> 00:10:49,560
well and we will going to see some

231
00:10:49,560 --> 00:10:52,200
examples in the following slides

232
00:10:52,200 --> 00:10:55,040
when it comes to acquiring information

233
00:10:55,040 --> 00:10:58,260
the rice layer uses these three airports

234
00:10:58,260 --> 00:11:01,320
that are on the slides in order to get a

235
00:11:01,320 --> 00:11:04,019
information about device type partition

236
00:11:04,019 --> 00:11:07,200
number and to find the location of the

237
00:11:07,200 --> 00:11:09,600
master file table and master boot record

238
00:11:09,600 --> 00:11:13,019
in order to send them to the wiper

239
00:11:13,019 --> 00:11:16,019
routine

240
00:11:17,000 --> 00:11:20,940
before starting to overwrite the disk

241
00:11:20,940 --> 00:11:26,220
itself first drive layer will use facial

242
00:11:26,220 --> 00:11:29,040
log volume in order to lock the volume

243
00:11:29,040 --> 00:11:31,440
then it will start the wiping routine

244
00:11:31,440 --> 00:11:34,440
and after that it will Dismount or

245
00:11:34,440 --> 00:11:37,800
unmount it using facetl this one volume

246
00:11:37,800 --> 00:11:40,040
I octagon

247
00:11:40,040 --> 00:11:45,180
this procedure is taken it's run for

248
00:11:45,180 --> 00:11:47,579
every Drive letter that is available on

249
00:11:47,579 --> 00:11:49,320
the operating system

250
00:11:49,320 --> 00:11:52,440
a similar approach we've seen was seen

251
00:11:52,440 --> 00:11:56,959
in patients from the stone drill as well

252
00:11:57,320 --> 00:12:01,860
an interesting use case is made by SQL

253
00:12:01,860 --> 00:12:04,440
shred which uses ioctal disk delete

254
00:12:04,440 --> 00:12:06,120
Drive layout

255
00:12:06,120 --> 00:12:09,120
which basically deletes the boot record

256
00:12:09,120 --> 00:12:12,180
from the master boot rate record and

257
00:12:12,180 --> 00:12:15,480
thus schedules the schedules the drive

258
00:12:15,480 --> 00:12:18,180
for formatting starting from offset zero

259
00:12:18,180 --> 00:12:19,800
to the end of the disk

260
00:12:19,800 --> 00:12:22,260
this is a quick and easy way of deleting

261
00:12:22,260 --> 00:12:23,220
the drive

262
00:12:23,220 --> 00:12:25,500
rather easily

263
00:12:25,500 --> 00:12:27,600
uh

264
00:12:27,600 --> 00:12:30,120
dry Slayer takes it a bit further and

265
00:12:30,120 --> 00:12:33,720
uses fsctl get volume bitmap in order to

266
00:12:33,720 --> 00:12:36,600
get a bit bitmap data structure

267
00:12:36,600 --> 00:12:40,920
uh a bitmap data structure is a

268
00:12:40,920 --> 00:12:43,920
you know each bit you need to represents

269
00:12:43,920 --> 00:12:46,740
a cluster in the disk with a positive

270
00:12:46,740 --> 00:12:49,500
value meaning that that cluster is

271
00:12:49,500 --> 00:12:52,560
occupied drives their targets only the

272
00:12:52,560 --> 00:12:55,440
occupied clusters of course this is a

273
00:12:55,440 --> 00:12:58,320
snapshot in time so it there might be

274
00:12:58,320 --> 00:13:01,320
clusters that aren't deleted uh when the

275
00:13:01,320 --> 00:13:04,579
wiping routine starts

276
00:13:04,740 --> 00:13:07,920
when it comes to files uh drys layer

277
00:13:07,920 --> 00:13:10,860
dries layer uses fsctl get retrieval

278
00:13:10,860 --> 00:13:14,100
pointers in order to get the virtual

279
00:13:14,100 --> 00:13:16,579
clusters that are allocated for a file

280
00:13:16,579 --> 00:13:20,880
and fsctl move file in order to scramble

281
00:13:20,880 --> 00:13:25,079
the Clusters so this way it will make

282
00:13:25,079 --> 00:13:28,200
the data fragmented across the disk and

283
00:13:28,200 --> 00:13:30,000
thus making recovery it will make

284
00:13:30,000 --> 00:13:33,200
recovery even harder

285
00:13:33,779 --> 00:13:35,760
uh

286
00:13:35,760 --> 00:13:38,339
SQL shred on the other hand on the other

287
00:13:38,339 --> 00:13:40,620
hand has another has a different

288
00:13:40,620 --> 00:13:43,920
approach in which it constructs a custom

289
00:13:43,920 --> 00:13:47,600
data structure similar to an array

290
00:13:47,600 --> 00:13:51,540
in which it will store the file paths

291
00:13:51,540 --> 00:13:53,940
that are going to be deleted and

292
00:13:53,940 --> 00:13:56,940
together with some extra data

293
00:13:56,940 --> 00:14:00,240
in this case it will use fsctl Gear 3

294
00:14:00,240 --> 00:14:03,060
parse point I octal in order to get

295
00:14:03,060 --> 00:14:04,740
additional information about the file or

296
00:14:04,740 --> 00:14:05,940
the directory

297
00:14:05,940 --> 00:14:09,959
uh in the snip uh snippet we

298
00:14:09,959 --> 00:14:12,779
the check is made to see if the file is

299
00:14:12,779 --> 00:14:14,820
a Sim link or the directory's amount

300
00:14:14,820 --> 00:14:17,060
point

301
00:14:18,139 --> 00:14:22,620
we've compiled a table of I octos I came

302
00:14:22,620 --> 00:14:26,100
together with their wiper variants that

303
00:14:26,100 --> 00:14:29,940
use them this can be seen the slides or

304
00:14:29,940 --> 00:14:32,940
on the blog post that we've posted

305
00:14:32,940 --> 00:14:35,839
uh Johnny

306
00:14:37,800 --> 00:14:39,660
Q so I'm going to continue with the

307
00:14:39,660 --> 00:14:41,519
first part of today

308
00:14:41,519 --> 00:14:43,380
so now we're going to talk about care

309
00:14:43,380 --> 00:14:45,540
mode and drivers

310
00:14:45,540 --> 00:14:48,600
and we've seen two we've seen two two

311
00:14:48,600 --> 00:14:50,760
drivers used by

312
00:14:50,760 --> 00:14:53,420
um by these wipers

313
00:14:53,420 --> 00:14:55,740
one is called Aero disk and the other

314
00:14:55,740 --> 00:14:57,600
one I think is called endpoint Mount

315
00:14:57,600 --> 00:15:00,720
driver or something like that

316
00:15:00,720 --> 00:15:03,839
so as you might already know user mode

317
00:15:03,839 --> 00:15:05,579
is heavily guarded by very security

318
00:15:05,579 --> 00:15:08,339
tools and even by the OS itself so you

319
00:15:08,339 --> 00:15:10,560
have some constraints you cannot do all

320
00:15:10,560 --> 00:15:12,720
of the fancy stuff from from user mode

321
00:15:12,720 --> 00:15:14,279
and if you want to do something more

322
00:15:14,279 --> 00:15:16,440
advanced then delete files that are

323
00:15:16,440 --> 00:15:19,199
protected by the operating system like

324
00:15:19,199 --> 00:15:23,459
virtual Shadow copies maybe you can you

325
00:15:23,459 --> 00:15:25,980
should inject into an inject you should

326
00:15:25,980 --> 00:15:28,740
plant a driver inside the kernel space

327
00:15:28,740 --> 00:15:30,720
and you can do from there anything that

328
00:15:30,720 --> 00:15:32,519
you want

329
00:15:32,519 --> 00:15:33,060
um

330
00:15:33,060 --> 00:15:35,820
it sounds easy and fury but it's not

331
00:15:35,820 --> 00:15:39,300
that easy to develop a kernel driver any

332
00:15:39,300 --> 00:15:41,639
the the smallest of bugs can crash the

333
00:15:41,639 --> 00:15:44,279
the entire operating system if it if

334
00:15:44,279 --> 00:15:45,839
it's left untreated

335
00:15:45,839 --> 00:15:50,940
uh this requires a lot of resources

336
00:15:52,160 --> 00:15:57,240
programming power and also money

337
00:15:57,240 --> 00:15:59,880
um on top of that Microsoft has to sign

338
00:15:59,880 --> 00:16:02,940
your driver which in theory shouldn't be

339
00:16:02,940 --> 00:16:05,279
easy for you to be able to get your

340
00:16:05,279 --> 00:16:08,399
malicious driver to beside my Microsoft

341
00:16:08,399 --> 00:16:10,920
so why go through all of the hassle of

342
00:16:10,920 --> 00:16:13,279
using these

343
00:16:13,279 --> 00:16:17,519
these uh own build custom built drivers

344
00:16:17,519 --> 00:16:20,100
and spend time on on doing that when you

345
00:16:20,100 --> 00:16:22,320
could use legitimate drivers from

346
00:16:22,320 --> 00:16:25,380
third-party entities and use that driver

347
00:16:25,380 --> 00:16:27,839
to achieve your malicious goals so this

348
00:16:27,839 --> 00:16:30,480
is exactly what these these wipers have

349
00:16:30,480 --> 00:16:31,620
done

350
00:16:31,620 --> 00:16:34,699
they uh

351
00:16:34,920 --> 00:16:37,860
copied drivers from third-party vendors

352
00:16:37,860 --> 00:16:40,259
within their own their own wiper they

353
00:16:40,259 --> 00:16:42,540
installed that and they proxy all of the

354
00:16:42,540 --> 00:16:43,920
communication with the file system

355
00:16:43,920 --> 00:16:46,740
through that driver so the operating

356
00:16:46,740 --> 00:16:49,199
system will not know that the request is

357
00:16:49,199 --> 00:16:50,759
coming from

358
00:16:50,759 --> 00:16:53,339
from user module it will see that the

359
00:16:53,339 --> 00:16:55,620
file system itself is manipulated by by

360
00:16:55,620 --> 00:16:56,699
driver

361
00:16:56,699 --> 00:16:59,399
so this way the operating system the the

362
00:16:59,399 --> 00:17:02,459
wiper can delete Shadow copies Master

363
00:17:02,459 --> 00:17:05,640
file tables even raw clusters or raw

364
00:17:05,640 --> 00:17:07,980
sectors on on disk

365
00:17:07,980 --> 00:17:09,900
where are what were other protected

366
00:17:09,900 --> 00:17:12,179
files that might not be reachable from

367
00:17:12,179 --> 00:17:15,140
from user space

368
00:17:15,179 --> 00:17:16,740
the first driver I'm going to talk about

369
00:17:16,740 --> 00:17:18,839
is elrodisk

370
00:17:18,839 --> 00:17:22,500
it's a legitimate driver used by uh

371
00:17:22,500 --> 00:17:25,439
created developed by the eldos company

372
00:17:25,439 --> 00:17:28,740
it was used by the Stover zero clear

373
00:17:28,740 --> 00:17:31,440
dust man and shamoon

374
00:17:31,440 --> 00:17:33,900
all of the

375
00:17:33,900 --> 00:17:36,720
activity to the file system was proxied

376
00:17:36,720 --> 00:17:39,620
through this through this driver

377
00:17:39,620 --> 00:17:43,799
and they could achieve a deletion of VSS

378
00:17:43,799 --> 00:17:46,260
copies for example

379
00:17:46,260 --> 00:17:47,880
there was an interesting caveat with

380
00:17:47,880 --> 00:17:49,620
zero clearance one they were using an

381
00:17:49,620 --> 00:17:52,980
unsight version of yellow disk they had

382
00:17:52,980 --> 00:17:54,780
some additional features but it wasn't

383
00:17:54,780 --> 00:17:57,299
signed so in order in order to get that

384
00:17:57,299 --> 00:17:59,880
driver to to execute in the kernel space

385
00:17:59,880 --> 00:18:01,860
they had to use

386
00:18:01,860 --> 00:18:04,140
a module quality deal I think it's total

387
00:18:04,140 --> 00:18:07,500
driver loader and what they have done is

388
00:18:07,500 --> 00:18:09,720
they installed a legitimate vulnerable

389
00:18:09,720 --> 00:18:12,720
driver from virtualbox they explained

390
00:18:12,720 --> 00:18:16,080
that driver to disable driver signature

391
00:18:16,080 --> 00:18:18,419
enforcement and then

392
00:18:18,419 --> 00:18:21,660
they could load their unsigned malicious

393
00:18:21,660 --> 00:18:24,960
driver into the kernel space

394
00:18:24,960 --> 00:18:26,039
so yeah

395
00:18:26,039 --> 00:18:28,200
that's that's a thing

396
00:18:28,200 --> 00:18:30,299
when we have a driver installed in the

397
00:18:30,299 --> 00:18:33,000
kernel space now you can interact with

398
00:18:33,000 --> 00:18:35,100
it the same as you do with the file you

399
00:18:35,100 --> 00:18:37,200
need to grab a handle to it you can see

400
00:18:37,200 --> 00:18:39,900
over here we uh a screenshot with create

401
00:18:39,900 --> 00:18:42,720
file to dialro disk device and then you

402
00:18:42,720 --> 00:18:44,880
can talk to it as you would or

403
00:18:44,880 --> 00:18:46,500
manipulated as you would with the

404
00:18:46,500 --> 00:18:49,860
regular file in the operating system

405
00:18:49,860 --> 00:18:53,580
so no Fancy no fancy I don't know

406
00:18:53,580 --> 00:18:57,439
programming skills are required

407
00:18:58,320 --> 00:19:00,419
um

408
00:19:00,419 --> 00:19:03,120
so Shamu uses this driver to retrieve

409
00:19:03,120 --> 00:19:04,340
various information

410
00:19:04,340 --> 00:19:08,160
uh it can retrieve

411
00:19:08,160 --> 00:19:10,440
pointer data from uh from the file

412
00:19:10,440 --> 00:19:13,860
system itself and decide what sectors to

413
00:19:13,860 --> 00:19:16,860
it can use to to override in order to do

414
00:19:16,860 --> 00:19:18,900
so it will send the get retrieval

415
00:19:18,900 --> 00:19:20,640
pointer as I octo it will send a Gateway

416
00:19:20,640 --> 00:19:24,000
towards pointer I octal via the device i

417
00:19:24,000 --> 00:19:27,200
o control API

418
00:19:29,340 --> 00:19:32,400
um we can see an example of how shamoon

419
00:19:32,400 --> 00:19:36,900
is overwriting these sectors uh in the

420
00:19:36,900 --> 00:19:39,360
second screenshot you see that it's

421
00:19:39,360 --> 00:19:42,360
opening a handle to to the to the device

422
00:19:42,360 --> 00:19:45,380
and then uses

423
00:19:45,380 --> 00:19:48,600
uh set file pointer and write file to

424
00:19:48,600 --> 00:19:51,539
iterate over the raw sectors from the

425
00:19:51,539 --> 00:19:53,880
disk and it will wipe them with with

426
00:19:53,880 --> 00:19:55,080
zeros

427
00:19:55,080 --> 00:19:57,000
cell file pointer is just basically

428
00:19:57,000 --> 00:20:01,880
setting a cursor in uh in an array

429
00:20:03,720 --> 00:20:05,340
the other driver I'm going to talk about

430
00:20:05,340 --> 00:20:07,320
is a

431
00:20:07,320 --> 00:20:09,780
endpoint Mount driver this one was

432
00:20:09,780 --> 00:20:13,380
developed by izas or easybus I know how

433
00:20:13,380 --> 00:20:16,380
it's pronounced it was used for their

434
00:20:16,380 --> 00:20:18,780
partition it is used for their partition

435
00:20:18,780 --> 00:20:20,940
manager utility

436
00:20:20,940 --> 00:20:23,640
so it's pretty similar to the previous

437
00:20:23,640 --> 00:20:25,679
one in um

438
00:20:25,679 --> 00:20:29,700
in capabilities and it has been seen

439
00:20:29,700 --> 00:20:32,760
used by driveslayer in March of 2022

440
00:20:32,760 --> 00:20:35,100
targeting Ukraine

441
00:20:35,100 --> 00:20:37,980
uh this was kept inside of a LG

442
00:20:37,980 --> 00:20:40,260
compressed resource inside the PE binary

443
00:20:40,260 --> 00:20:42,620
itself

444
00:20:43,440 --> 00:20:45,240
I'm gonna go a little bit and how the

445
00:20:45,240 --> 00:20:47,520
driver actually works under the hood you

446
00:20:47,520 --> 00:20:49,020
can see we can see here the main

447
00:20:49,020 --> 00:20:52,440
function the of the driver uh what the

448
00:20:52,440 --> 00:20:56,280
driver needs to do is create a

449
00:20:56,280 --> 00:20:58,380
create a device and it also needs to

450
00:20:58,380 --> 00:21:00,299
create a symbolic link when you want to

451
00:21:00,299 --> 00:21:02,100
talk to the driver you need to grab a

452
00:21:02,100 --> 00:21:04,260
handle to that symbolic link and after

453
00:21:04,260 --> 00:21:06,299
that it initiates some major functions

454
00:21:06,299 --> 00:21:08,460
within an array and every time you call

455
00:21:08,460 --> 00:21:11,340
let's say create file it will call the

456
00:21:11,340 --> 00:21:16,440
uh create a major function when you call

457
00:21:16,440 --> 00:21:18,840
write file the operating system will

458
00:21:18,840 --> 00:21:22,320
know that it will call the right major

459
00:21:22,320 --> 00:21:23,400
function

460
00:21:23,400 --> 00:21:26,100
so one example here we have the create a

461
00:21:26,100 --> 00:21:29,340
create file or major function we can see

462
00:21:29,340 --> 00:21:31,799
that it's basically grabbing a handle to

463
00:21:31,799 --> 00:21:32,530
the original

464
00:21:32,530 --> 00:21:34,080
[Music]

465
00:21:34,080 --> 00:21:36,240
driver that is responsible for talking

466
00:21:36,240 --> 00:21:40,799
to the disk and the other uh bright file

467
00:21:40,799 --> 00:21:44,640
or device control device or control API

468
00:21:44,640 --> 00:21:47,159
will just

469
00:21:47,159 --> 00:21:50,640
proxy all of the requests to to the

470
00:21:50,640 --> 00:21:52,799
to the appropriate

471
00:21:52,799 --> 00:21:55,200
file system driver

472
00:21:55,200 --> 00:21:56,780
foreign

473
00:21:56,780 --> 00:21:59,640
again in order to work with this drive

474
00:21:59,640 --> 00:22:01,980
you don't do you don't have to do fancy

475
00:22:01,980 --> 00:22:04,200
fancy operation you just need to grab a

476
00:22:04,200 --> 00:22:06,120
handle to the driver to the device

477
00:22:06,120 --> 00:22:09,600
itself set file pointer to point exact

478
00:22:09,600 --> 00:22:12,299
on the disk where you want to to write

479
00:22:12,299 --> 00:22:14,700
and then you use write file and over to

480
00:22:14,700 --> 00:22:18,059
override.xo there's not that big of a

481
00:22:18,059 --> 00:22:22,340
programming problem in my opinion

482
00:22:22,340 --> 00:22:26,159
so yeah drivers are a thing and I'm

483
00:22:26,159 --> 00:22:29,159
Gonna Leave the last techniques to to

484
00:22:29,159 --> 00:22:31,380
model him

485
00:22:31,380 --> 00:22:34,260
uh on the last part I'm going to talk

486
00:22:34,260 --> 00:22:36,720
about the miscellaneous techniques that

487
00:22:36,720 --> 00:22:39,240
we've seen across the wiper samples

488
00:22:39,240 --> 00:22:43,200
and some of them are common to wipers

489
00:22:43,200 --> 00:22:46,799
only others are common with Rams and

490
00:22:46,799 --> 00:22:49,700
dark ransomware specific

491
00:22:49,700 --> 00:22:52,559
we're going to take a few examples

492
00:22:52,559 --> 00:22:55,880
because time is short it's pretty short

493
00:22:55,880 --> 00:22:58,919
when it comes to volume Shadow copies

494
00:22:58,919 --> 00:23:02,400
deletion we've only seen one one sample

495
00:23:02,400 --> 00:23:03,960
namely meteor

496
00:23:03,960 --> 00:23:08,220
who deletes the vs the snapshots either

497
00:23:08,220 --> 00:23:10,260
via Windows management instrumentation

498
00:23:10,260 --> 00:23:13,080
command line utility or using the

499
00:23:13,080 --> 00:23:16,100
standard VSS admin tool

500
00:23:16,100 --> 00:23:19,919
unlike meteor dry Slayer disables the

501
00:23:19,919 --> 00:23:21,840
VSS Service as we can see in the

502
00:23:21,840 --> 00:23:22,860
snapshot

503
00:23:22,860 --> 00:23:25,559
but does not attempt to delete to delete

504
00:23:25,559 --> 00:23:26,700
them

505
00:23:26,700 --> 00:23:29,059
there is an important footnote here

506
00:23:29,059 --> 00:23:32,940
wipers that use third-party drivers

507
00:23:32,940 --> 00:23:35,700
like the one presented in the in the

508
00:23:35,700 --> 00:23:36,780
previous part

509
00:23:36,780 --> 00:23:39,840
uh does not need to delete the snapshot

510
00:23:39,840 --> 00:23:42,419
as in the snapshots as they can remove

511
00:23:42,419 --> 00:23:44,760
everything

512
00:23:44,760 --> 00:23:48,059
Isaac wiper has an interesting approach

513
00:23:48,059 --> 00:23:50,280
in you in which creates a threat for

514
00:23:50,280 --> 00:23:53,820
each partition and reads the partition

515
00:23:53,820 --> 00:23:57,480
available space creates a file and

516
00:23:57,480 --> 00:23:59,580
starts writing to that file this will

517
00:23:59,580 --> 00:24:01,460
basically overwrite all the free space

518
00:24:01,460 --> 00:24:04,799
in the partition making data

519
00:24:04,799 --> 00:24:08,100
recoverability harder because having

520
00:24:08,100 --> 00:24:12,860
junk space in the unused pages

521
00:24:13,320 --> 00:24:15,860
can make a

522
00:24:15,860 --> 00:24:17,780
incident

523
00:24:17,780 --> 00:24:21,120
responder's life harder

524
00:24:21,120 --> 00:24:25,380
some wipers do not use the standard

525
00:24:25,380 --> 00:24:29,280
Windows API like lead file and use the

526
00:24:29,280 --> 00:24:35,039
default Windows script bad files and for

527
00:24:35,039 --> 00:24:37,980
example they only execute the commands

528
00:24:37,980 --> 00:24:42,799
that we that are seen on the slide

529
00:24:42,960 --> 00:24:45,419
the final nail in the coffin so to speak

530
00:24:45,419 --> 00:24:48,299
it's rebooting the operating system

531
00:24:48,299 --> 00:24:49,820
after

532
00:24:49,820 --> 00:24:53,059
after the wiping routine has finished

533
00:24:53,059 --> 00:24:56,400
uh most of the wipers use the standard

534
00:24:56,400 --> 00:24:58,980
Windows API exit Windows X which will

535
00:24:58,980 --> 00:25:00,480
just reboot the operating system

536
00:25:00,480 --> 00:25:03,000
depending on the flags or just shut it

537
00:25:03,000 --> 00:25:03,780
down

538
00:25:03,780 --> 00:25:07,799
uh petia calls anti-race heart error

539
00:25:07,799 --> 00:25:10,020
which will trigger a blue screen

540
00:25:10,020 --> 00:25:12,960
and device layer we'll call initiate

541
00:25:12,960 --> 00:25:14,880
system shutdown X API with different

542
00:25:14,880 --> 00:25:15,960
flags

543
00:25:15,960 --> 00:25:18,419
after the reboot or the shutdown the

544
00:25:18,419 --> 00:25:20,159
operating system isn't bootable anymore

545
00:25:20,159 --> 00:25:23,760
so you know you have a problem

546
00:25:23,760 --> 00:25:25,260
uh

547
00:25:25,260 --> 00:25:27,659
an interesting approach is seen in

548
00:25:27,659 --> 00:25:29,820
double zero it is the only wiper variant

549
00:25:29,820 --> 00:25:32,880
that takes time to walk the registry

550
00:25:32,880 --> 00:25:36,059
Hive and delete each and every key with

551
00:25:36,059 --> 00:25:38,940
either zero if it's an integer or with

552
00:25:38,940 --> 00:25:41,400
an empty string if it's a string and as

553
00:25:41,400 --> 00:25:43,919
it goes up up it will delete the

554
00:25:43,919 --> 00:25:47,340
registry as well

555
00:25:47,340 --> 00:25:49,799
on the impact part which is the last

556
00:25:49,799 --> 00:25:52,620
part I will let Johnny take the delete

557
00:25:52,620 --> 00:25:54,539
again

558
00:25:54,539 --> 00:25:56,100
so this is the last part of our

559
00:25:56,100 --> 00:25:57,679
presentation

560
00:25:57,679 --> 00:26:01,860
so for we we analyzed the wiper families

561
00:26:01,860 --> 00:26:03,539
that we've seen for

562
00:26:03,539 --> 00:26:07,200
in the uh in the wild from the past 10

563
00:26:07,200 --> 00:26:10,500
years and

564
00:26:10,500 --> 00:26:14,279
the majority of them were this year

565
00:26:14,279 --> 00:26:17,220
alone in 20 to 2022

566
00:26:17,220 --> 00:26:20,820
and we have seen that they didn't

567
00:26:20,820 --> 00:26:24,320
necessarily increase in uh in complexity

568
00:26:24,320 --> 00:26:27,960
they tend to share uh features from

569
00:26:27,960 --> 00:26:30,360
other wipers that were seen back in the

570
00:26:30,360 --> 00:26:32,279
day they also share some features with

571
00:26:32,279 --> 00:26:35,640
transomware yeah

572
00:26:35,640 --> 00:26:36,480
um

573
00:26:36,480 --> 00:26:39,860
I'm gonna try and speed it up

574
00:26:40,799 --> 00:26:43,679
so each technique has its own advantages

575
00:26:43,679 --> 00:26:46,500
and disadvantages so developers might

576
00:26:46,500 --> 00:26:48,120
need to make some trade-offs either

577
00:26:48,120 --> 00:26:50,279
increase the speed of the the operation

578
00:26:50,279 --> 00:26:53,520
or risk that though that effectiveness

579
00:26:53,520 --> 00:26:55,320
of the wiping routine is isn't good

580
00:26:55,320 --> 00:26:57,779
enough and victims may have the

581
00:26:57,779 --> 00:27:01,740
opportunity to recover the the data

582
00:27:01,740 --> 00:27:06,600
these are all of the the techniques that

583
00:27:06,600 --> 00:27:08,220
you can see over here associated with

584
00:27:08,220 --> 00:27:09,779
all of Tomorrow families again would

585
00:27:09,779 --> 00:27:11,940
have access to the slides don't there's

586
00:27:11,940 --> 00:27:14,880
no big need to take to take pictures and

587
00:27:14,880 --> 00:27:16,620
of course all of this effort was done in

588
00:27:16,620 --> 00:27:18,960
order for us to gain detection on on

589
00:27:18,960 --> 00:27:20,340
wiper families

590
00:27:20,340 --> 00:27:22,980
I think we got time for three questions

591
00:27:22,980 --> 00:27:24,059
let's say

592
00:27:24,059 --> 00:27:26,400
yeah well let's hear out from the

593
00:27:26,400 --> 00:27:28,200
audience first if you have questions

594
00:27:28,200 --> 00:27:31,380
please let us know our colleagues uh

595
00:27:31,380 --> 00:27:34,080
over here Catalin and we'll share a mic

596
00:27:34,080 --> 00:27:37,620
with you uh and we also have prizes for

597
00:27:37,620 --> 00:27:39,900
the people that

598
00:27:39,900 --> 00:27:40,640
um

599
00:27:40,640 --> 00:27:44,100
have questions well we're going to share

600
00:27:44,100 --> 00:27:48,179
uh hats and t-shirts and uh crowd Stakes

601
00:27:48,179 --> 00:27:50,940
specifically has prizes for the people

602
00:27:50,940 --> 00:27:54,120
interested in this well let me get you

603
00:27:54,120 --> 00:27:56,658
the mic

604
00:28:00,480 --> 00:28:04,020
um thank you it was a great presentation

605
00:28:04,020 --> 00:28:04,860
um

606
00:28:04,860 --> 00:28:07,620
one question popped into my mind when

607
00:28:07,620 --> 00:28:11,220
you showed that real legit drivers are

608
00:28:11,220 --> 00:28:14,100
used in the in the attacks by the

609
00:28:14,100 --> 00:28:17,700
malware are the companies behind the

610
00:28:17,700 --> 00:28:20,760
drivers doing anything about it

611
00:28:20,760 --> 00:28:24,360
like I know that Nvidia has drivers for

612
00:28:24,360 --> 00:28:26,940
its GPU but what can you do if you hack

613
00:28:26,940 --> 00:28:28,559
a GPU it's

614
00:28:28,559 --> 00:28:30,419
I don't know if there's

615
00:28:30,419 --> 00:28:32,580
much room for opportunity over them from

616
00:28:32,580 --> 00:28:35,400
from their side one of the drivers

617
00:28:35,400 --> 00:28:38,580
requires that you send a serial key when

618
00:28:38,580 --> 00:28:41,520
you try to open a handle to it so unless

619
00:28:41,520 --> 00:28:43,500
you have that serial key it shouldn't

620
00:28:43,500 --> 00:28:46,200
allow you to grab a handle to it

621
00:28:46,200 --> 00:28:48,419
but you can easily grab the Civil key

622
00:28:48,419 --> 00:28:51,419
and replicate it because wipers that we

623
00:28:51,419 --> 00:28:53,480
we showed previously had that serial key

624
00:28:53,480 --> 00:28:56,460
in it so I don't know if they can do

625
00:28:56,460 --> 00:28:58,380
much I'm pretty sure they are aware of

626
00:28:58,380 --> 00:29:00,559
that

627
00:29:00,900 --> 00:29:03,360
maybe that's a topic of research I don't

628
00:29:03,360 --> 00:29:04,919
know or maybe that's something that

629
00:29:04,919 --> 00:29:06,840
Microsoft can help us with

630
00:29:06,840 --> 00:29:10,200
great we we have also another questions

631
00:29:10,200 --> 00:29:11,760
here

632
00:29:11,760 --> 00:29:13,260
hey guys thank you for the presentation

633
00:29:13,260 --> 00:29:17,400
uh so you mentioned uh something about

634
00:29:17,400 --> 00:29:20,760
um disabling the driver verification or

635
00:29:20,760 --> 00:29:23,159
the driver do you need like a system

636
00:29:23,159 --> 00:29:25,200
privileges or running kernel mode to be

637
00:29:25,200 --> 00:29:26,880
able to achieve that yeah you need

638
00:29:26,880 --> 00:29:28,500
administrative privileges administrative

639
00:29:28,500 --> 00:29:31,260
okay and the malware cannot

640
00:29:31,260 --> 00:29:36,120
do it easily I mean without kernel level

641
00:29:36,120 --> 00:29:38,340
so in order to load the driver you need

642
00:29:38,340 --> 00:29:40,679
you need administrative privileges for

643
00:29:40,679 --> 00:29:42,059
the user more process we had a question

644
00:29:42,059 --> 00:29:43,440
over there I think that was the first

645
00:29:43,440 --> 00:29:44,399
one

646
00:29:44,399 --> 00:29:47,360
let's talk about it

647
00:29:47,360 --> 00:29:50,220
and you can then install the the driver

648
00:29:50,220 --> 00:29:53,700
after you have the driver installed and

649
00:29:53,700 --> 00:29:55,260
up up and running

650
00:29:55,260 --> 00:29:57,600
it has unlimited power you're in god

651
00:29:57,600 --> 00:29:59,640
mode in the operating system you can do

652
00:29:59,640 --> 00:30:02,700
everything you want and

653
00:30:02,700 --> 00:30:04,140
I think

654
00:30:04,140 --> 00:30:08,460
yeah have I answered your question

655
00:30:08,460 --> 00:30:10,980
hi uh another question

656
00:30:10,980 --> 00:30:13,860
um is there the possibility for example

657
00:30:13,860 --> 00:30:15,659
if an attacker gets in the network and

658
00:30:15,659 --> 00:30:18,659
reaches the the machine that writes data

659
00:30:18,659 --> 00:30:21,840
on tapes can he use a wiper to to delete

660
00:30:21,840 --> 00:30:24,000
the tapes of course we're not talking

661
00:30:24,000 --> 00:30:26,220
about worm tapes which we can read one

662
00:30:26,220 --> 00:30:29,220
you can write once and read many but the

663
00:30:29,220 --> 00:30:32,399
regular ones which can be Rewritten and

664
00:30:32,399 --> 00:30:34,799
if we know that if there is a

665
00:30:34,799 --> 00:30:37,020
possibility to recover the data after it

666
00:30:37,020 --> 00:30:39,260
was deleted

667
00:30:39,260 --> 00:30:42,299
I don't have enough I don't have a lot

668
00:30:42,299 --> 00:30:45,240
of experience with the actual tapes but

669
00:30:45,240 --> 00:30:48,419
there is a driver that uh

670
00:30:48,419 --> 00:30:50,700
is used to write to those tapes you

671
00:30:50,700 --> 00:30:52,440
don't need to know this exact protocol

672
00:30:52,440 --> 00:30:54,480
you just need to attach to the to the

673
00:30:54,480 --> 00:30:56,100
driver that is responsible to write it

674
00:30:56,100 --> 00:30:57,659
to the team so that's not something

675
00:30:57,659 --> 00:31:00,919
difficult I think these wipers will work

676
00:31:00,919 --> 00:31:04,679
as is on any backup system that has tape

677
00:31:04,679 --> 00:31:07,260
so that shouldn't be an issue recovery

678
00:31:07,260 --> 00:31:11,220
wise no idea what can be done on tapes

679
00:31:11,220 --> 00:31:13,200
in theory everything is possible but in

680
00:31:13,200 --> 00:31:15,720
practice that's not that okay

681
00:31:15,720 --> 00:31:20,000
uh hi a question

682
00:31:22,279 --> 00:31:26,720
driver that makes use of the kernel

683
00:31:37,140 --> 00:31:39,559
yeah so the question was that if we

684
00:31:39,559 --> 00:31:41,880
analyze wipers on other operating

685
00:31:41,880 --> 00:31:45,419
systems we mainly focus on Windows the

686
00:31:45,419 --> 00:31:47,700
two of us focus on Windows and we didn't

687
00:31:47,700 --> 00:31:51,179
look at other wiper families but I think

688
00:31:51,179 --> 00:31:53,640
Ukraine had a variant targeting Linux

689
00:31:53,640 --> 00:31:55,860
operating system as well

690
00:31:55,860 --> 00:31:59,899
so yeah Linux has malware

691
00:32:00,299 --> 00:32:02,340
and Mac as well

692
00:32:02,340 --> 00:32:04,679
cheers guys a quick question from my

693
00:32:04,679 --> 00:32:05,880
side

694
00:32:05,880 --> 00:32:07,860
um out of the samples that you normally

695
00:32:07,860 --> 00:32:11,039
analyze here here

696
00:32:11,039 --> 00:32:14,039
um how many of them or rather how many

697
00:32:14,039 --> 00:32:17,220
wipers are actually disguised as around

698
00:32:17,220 --> 00:32:19,820
somewhere

699
00:32:24,020 --> 00:32:27,000
it started us around somewhere and it

700
00:32:27,000 --> 00:32:29,940
became a wiper because the confusion key

701
00:32:29,940 --> 00:32:33,240
was randomly generated and it wasn't a

702
00:32:33,240 --> 00:32:36,240
possibility to retrieve that key

703
00:32:36,240 --> 00:32:39,600
but there we've seen some examples in

704
00:32:39,600 --> 00:32:41,340
which wipers

705
00:32:41,340 --> 00:32:43,200
move to run somewhere and to run

706
00:32:43,200 --> 00:32:45,539
somewhere move to wipers as well

707
00:32:45,539 --> 00:32:49,380
but if we can have another series of

708
00:32:49,380 --> 00:32:51,360
questions at the Stanford at Cross

709
00:32:51,360 --> 00:32:53,779
strike

