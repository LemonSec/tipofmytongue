1
00:00:00,780 --> 00:00:03,659
uh today I'm going to talk I have to

2
00:00:03,659 --> 00:00:06,839
talk or not to like that's the question

3
00:00:06,839 --> 00:00:09,139
from the Shakespeare

4
00:00:09,139 --> 00:00:12,420
uh first a quick introve myself

5
00:00:12,420 --> 00:00:14,360
um Amir Jose

6
00:00:14,360 --> 00:00:16,680
uh replacing security engineer at

7
00:00:16,680 --> 00:00:18,380
booking

8
00:00:18,380 --> 00:00:23,039
with MSC as I said cyber security I was

9
00:00:23,039 --> 00:00:25,380
a lecturer in the university and also

10
00:00:25,380 --> 00:00:28,199
yeah with lots of yeah maybe this but

11
00:00:28,199 --> 00:00:31,099
sure with lots of experience in every

12
00:00:31,099 --> 00:00:33,420
single uh

13
00:00:33,420 --> 00:00:37,079
uh field in the computer that I was

14
00:00:37,079 --> 00:00:42,899
able uh okay and a bit about uh booking

15
00:00:42,899 --> 00:00:44,340
holding uh

16
00:00:44,340 --> 00:00:46,260
booking Holding Center of Excellence

17
00:00:46,260 --> 00:00:47,940
here in bohorst is a part of working

18
00:00:47,940 --> 00:00:51,000
Holdings the awards leading provider of

19
00:00:51,000 --> 00:00:53,940
online travel and related service with a

20
00:00:53,940 --> 00:00:56,760
rich Heritage of in a digital Innovation

21
00:00:56,760 --> 00:01:00,360
uh the center provides

22
00:01:00,360 --> 00:01:01,480
uh

23
00:01:01,480 --> 00:01:03,320
[Music]

24
00:01:03,320 --> 00:01:04,938
sorry

25
00:01:04,938 --> 00:01:08,760
the center provides access to a highly

26
00:01:08,760 --> 00:01:12,360
skilled talents uh for across the brand

27
00:01:12,360 --> 00:01:15,740
to uh yeah provide different services

28
00:01:15,740 --> 00:01:18,360
for the older brands under the booking

29
00:01:18,360 --> 00:01:20,880
holding uh which consists of the

30
00:01:20,880 --> 00:01:24,479
booking.com kayak Open Table Agoda

31
00:01:24,479 --> 00:01:27,780
prostein and rental cars the

32
00:01:27,780 --> 00:01:29,400
a center of excellence the currency

33
00:01:29,400 --> 00:01:32,280
provide core cyber Security fraud

34
00:01:32,280 --> 00:01:34,560
monitoring IIT infrastructure and

35
00:01:34,560 --> 00:01:36,240
procurement analytics and also it's

36
00:01:36,240 --> 00:01:39,060
going to provide more services to our

37
00:01:39,060 --> 00:01:41,040
this year and the next year such as data

38
00:01:41,040 --> 00:01:44,880
governance finance and marketing

39
00:01:44,880 --> 00:01:48,600
okay in this meeting we will first uh

40
00:01:48,600 --> 00:01:52,140
have a talk about the motivations of

41
00:01:52,140 --> 00:01:53,720
logging information

42
00:01:53,720 --> 00:01:57,200
uh just to make it clear we I I Molly

43
00:01:57,200 --> 00:02:01,740
I'm mainly focused on uh logging in the

44
00:02:01,740 --> 00:02:04,920
web applications uh

45
00:02:04,920 --> 00:02:08,038
and I will uh yeah as I said give some

46
00:02:08,038 --> 00:02:11,038
motivations of uh why to lie and then

47
00:02:11,038 --> 00:02:13,140
some challenges of vlogging especially

48
00:02:13,140 --> 00:02:15,540
when you are dealing with some uh larger

49
00:02:15,540 --> 00:02:18,560
scale Enterprise and

50
00:02:18,560 --> 00:02:22,080
having lots of requests and blocks uh

51
00:02:22,080 --> 00:02:24,780
then I will give some example of a real

52
00:02:24,780 --> 00:02:27,959
example of uh things that might happen

53
00:02:27,959 --> 00:02:31,260
with uh logging inappropriately and yeah

54
00:02:31,260 --> 00:02:35,459
so finally I will provide some of our

55
00:02:35,459 --> 00:02:39,420
experiences that we had to implement

56
00:02:39,420 --> 00:02:44,059
such a solution in an Enterprise

57
00:02:44,540 --> 00:02:47,720
uh yeah they're one of the most

58
00:02:47,720 --> 00:02:50,700
motivations of vlogging is for the uh

59
00:02:50,700 --> 00:02:54,120
debugging uh developers want to log some

60
00:02:54,120 --> 00:02:56,879
internal States variables decision

61
00:02:56,879 --> 00:03:00,420
series input output uh and uh errors and

62
00:03:00,420 --> 00:03:02,580
warnings to be able to debug the

63
00:03:02,580 --> 00:03:04,080
applications

64
00:03:04,080 --> 00:03:06,660
and to find their edge cases and I don't

65
00:03:06,660 --> 00:03:08,819
know any problem that might be happen

66
00:03:08,819 --> 00:03:11,640
during the real time running of the

67
00:03:11,640 --> 00:03:14,459
applications also there's there are some

68
00:03:14,459 --> 00:03:18,180
security related usage for logs as well

69
00:03:18,180 --> 00:03:21,360
uh for example logs can be used for

70
00:03:21,360 --> 00:03:24,239
intrusion detections different detection

71
00:03:24,239 --> 00:03:27,120
of malicious input and output based on

72
00:03:27,120 --> 00:03:30,300
signatures or uh

73
00:03:30,300 --> 00:03:34,019
yeah some patterns can be implemented uh

74
00:03:34,019 --> 00:03:36,180
for example looking for uh malicious

75
00:03:36,180 --> 00:03:39,180
inputs such as injections and also uh

76
00:03:39,180 --> 00:03:42,120
working on the outputs uh for example

77
00:03:42,120 --> 00:03:44,640
whenever some errors has appeared in the

78
00:03:44,640 --> 00:03:46,799
output that can be a sign of some

79
00:03:46,799 --> 00:03:49,680
problems so this can be also used also

80
00:03:49,680 --> 00:03:53,760
animal detections can be run on the logs

81
00:03:53,760 --> 00:03:57,480
to find uh malicious behavior for for

82
00:03:57,480 --> 00:04:01,739
example uh if we have your facing more

83
00:04:01,739 --> 00:04:05,400
than normal errors in a specific time

84
00:04:05,400 --> 00:04:07,739
window then it seems that something is

85
00:04:07,739 --> 00:04:09,959
going wrong or if the for example

86
00:04:09,959 --> 00:04:12,900
request sizes the response sizes are

87
00:04:12,900 --> 00:04:14,760
bigger than normal maybe there's some

88
00:04:14,760 --> 00:04:16,978
database happening

89
00:04:16,978 --> 00:04:20,760
also uh if we have logs we have the logs

90
00:04:20,760 --> 00:04:23,160
they can then correlate them to have

91
00:04:23,160 --> 00:04:25,340
some higher level overview of the

92
00:04:25,340 --> 00:04:28,560
application and what's going on and yeah

93
00:04:28,560 --> 00:04:33,540
run more uh services and works to find

94
00:04:33,540 --> 00:04:36,360
out that what's going on

95
00:04:36,360 --> 00:04:40,020
uh one of the core reasons of using logs

96
00:04:40,020 --> 00:04:43,400
are the incident response process

97
00:04:43,400 --> 00:04:48,840
uh yeah by having uh uh logs whenever we

98
00:04:48,840 --> 00:04:50,940
have enough logs and some incidents

99
00:04:50,940 --> 00:04:53,699
happen we can look for known attack

100
00:04:53,699 --> 00:04:58,199
vectors uh that that are already used to

101
00:04:58,199 --> 00:05:02,100
find out uh their real uh exploit

102
00:05:02,100 --> 00:05:05,940
attempts and the real uh bridge that we

103
00:05:05,940 --> 00:05:08,120
have

104
00:05:11,540 --> 00:05:14,699
uh yeah uh also locks can be fine to

105
00:05:14,699 --> 00:05:16,759
identify the attacker

106
00:05:16,759 --> 00:05:19,620
to find uh I don't know the IP address

107
00:05:19,620 --> 00:05:21,720
or any other information that can help

108
00:05:21,720 --> 00:05:24,479
us to identify the eye attacker by using

109
00:05:24,479 --> 00:05:26,880
logs you can find their real leaked data

110
00:05:26,880 --> 00:05:29,639
if we have good enough logs we will be

111
00:05:29,639 --> 00:05:32,940
able to find uh what data that we have

112
00:05:32,940 --> 00:05:36,960
been leaked during an incident also uh

113
00:05:36,960 --> 00:05:39,900
yeah you can trace back to the the root

114
00:05:39,900 --> 00:05:42,060
cause of the incidents and their real

115
00:05:42,060 --> 00:05:44,460
exploit points that the attacker were

116
00:05:44,460 --> 00:05:47,960
able to enter our system

117
00:05:48,259 --> 00:05:51,900
uh but uh logging and collecting and

118
00:05:51,900 --> 00:05:55,199
producing log is not uh three well there

119
00:05:55,199 --> 00:05:58,560
are different challenges uh uh when we

120
00:05:58,560 --> 00:06:02,100
we are deploying such a solution

121
00:06:02,100 --> 00:06:05,639
well uh yeah logs may contain sensitive

122
00:06:05,639 --> 00:06:08,520
data uh because the request contain

123
00:06:08,520 --> 00:06:11,580
sensitive data the all the uh requests

124
00:06:11,580 --> 00:06:13,680
that coming might contain I don't know

125
00:06:13,680 --> 00:06:16,860
username password email address physical

126
00:06:16,860 --> 00:06:19,220
address credit card information

127
00:06:19,220 --> 00:06:21,120
authentication information such as

128
00:06:21,120 --> 00:06:23,160
username password or authentication

129
00:06:23,160 --> 00:06:24,440
tokens

130
00:06:24,440 --> 00:06:27,419
uh and yeah they're coming and if you

131
00:06:27,419 --> 00:06:31,380
just log them like everything then uh

132
00:06:31,380 --> 00:06:34,919
yeah we will have uh those data stored

133
00:06:34,919 --> 00:06:36,780
somewhere that are not not supposed to

134
00:06:36,780 --> 00:06:38,220
be there

135
00:06:38,220 --> 00:06:41,520
so maybe we can try just to stop logging

136
00:06:41,520 --> 00:06:44,819
this kind of information uh uh what if

137
00:06:44,819 --> 00:06:47,699
we do not just log uh I don't know

138
00:06:47,699 --> 00:06:50,819
password for examples the problem is

139
00:06:50,819 --> 00:06:54,960
that it is not so trivial to just detect

140
00:06:54,960 --> 00:06:57,840
this information uh this is this let's

141
00:06:57,840 --> 00:06:59,600
say this is a similar

142
00:06:59,600 --> 00:07:04,940
uh issue with finding the injections

143
00:07:04,940 --> 00:07:08,460
if we were able to find where the

144
00:07:08,460 --> 00:07:10,080
injections where the SQL injection or

145
00:07:10,080 --> 00:07:11,639
any other injection coming from you

146
00:07:11,639 --> 00:07:14,039
could just block them or I don't know a

147
00:07:14,039 --> 00:07:16,440
fixed issue there but this is this is

148
00:07:16,440 --> 00:07:18,479
also the same case if we were able to

149
00:07:18,479 --> 00:07:20,759
identify where the sensitive data are

150
00:07:20,759 --> 00:07:23,280
you could just stop logging them or do

151
00:07:23,280 --> 00:07:25,380
something with that but it is not so

152
00:07:25,380 --> 00:07:27,900
trivial because the sensitive data are

153
00:07:27,900 --> 00:07:30,780
appearing in every place is in the query

154
00:07:30,780 --> 00:07:33,360
parameters in the body in the headers in

155
00:07:33,360 --> 00:07:34,860
any internal States

156
00:07:34,860 --> 00:07:37,020
in the variables that we are logging for

157
00:07:37,020 --> 00:07:40,440
debugging and so on also if we stop

158
00:07:40,440 --> 00:07:44,099
logging a sensitive formation it will

159
00:07:44,099 --> 00:07:47,460
also uh limit us uh during the

160
00:07:47,460 --> 00:07:49,380
investigation for example we want to

161
00:07:49,380 --> 00:07:51,120
identify the data that are really

162
00:07:51,120 --> 00:07:54,720
breached and we have just not like those

163
00:07:54,720 --> 00:07:56,940
data then it will be a structure and we

164
00:07:56,940 --> 00:08:00,360
will not be able to find uh their real

165
00:08:00,360 --> 00:08:03,860
data that have been breached

166
00:08:04,280 --> 00:08:08,340
uh yeah the producing log is also uh not

167
00:08:08,340 --> 00:08:11,880
so trivial uh we need to know where we

168
00:08:11,880 --> 00:08:14,520
should produce the logs we can think

169
00:08:14,520 --> 00:08:17,220
about some uh web server the entry point

170
00:08:17,220 --> 00:08:19,979
that a request is coming so every

171
00:08:19,979 --> 00:08:22,319
requests are passing through that point

172
00:08:22,319 --> 00:08:24,599
so you can just lock lock everything

173
00:08:24,599 --> 00:08:28,199
there but the one of the main problems

174
00:08:28,199 --> 00:08:31,080
is logging uh in the web server is that

175
00:08:31,080 --> 00:08:33,000
we are missing the context in the web

176
00:08:33,000 --> 00:08:35,760
server in the entry point they do not

177
00:08:35,760 --> 00:08:37,799
know what their request is about what

178
00:08:37,799 --> 00:08:39,899
does the parameters mean what are the

179
00:08:39,899 --> 00:08:44,459
real uh Parts the value of the parameter

180
00:08:44,459 --> 00:08:45,740
so

181
00:08:45,740 --> 00:08:48,480
uh we really miss the context and and

182
00:08:48,480 --> 00:08:51,600
this can be uh not so good in vlogging

183
00:08:51,600 --> 00:08:53,940
uh we can log in there by the

184
00:08:53,940 --> 00:08:55,620
applications itself in the code in the

185
00:08:55,620 --> 00:08:59,339
code basis uh yeah there we know that

186
00:08:59,339 --> 00:09:01,980
all the uh contexts and all the domain

187
00:09:01,980 --> 00:09:05,580
information so we can just uh log there

188
00:09:05,580 --> 00:09:08,700
uh but the problem is that if there also

189
00:09:08,700 --> 00:09:11,040
might be missing some uh information

190
00:09:11,040 --> 00:09:14,880
there uh for example some uh information

191
00:09:14,880 --> 00:09:17,519
related to protocol might be Mister if

192
00:09:17,519 --> 00:09:19,500
there is a load balancer in front of the

193
00:09:19,500 --> 00:09:22,500
applications the TLs connection is is

194
00:09:22,500 --> 00:09:24,779
already terminated there and if we do

195
00:09:24,779 --> 00:09:28,260
not have uh Telus info or other clients

196
00:09:28,260 --> 00:09:30,480
related information

197
00:09:30,480 --> 00:09:34,700
uh also it's going to be a bit hard to

198
00:09:34,700 --> 00:09:37,500
manage change and standards or the logs

199
00:09:37,500 --> 00:09:40,680
that are being blocked uh because there

200
00:09:40,680 --> 00:09:43,740
are no numbers in a larger Scale Company

201
00:09:43,740 --> 00:09:45,839
there might be different uh hundreds of

202
00:09:45,839 --> 00:09:48,480
different teams and applications that

203
00:09:48,480 --> 00:09:51,899
they might own their own way of logging

204
00:09:51,899 --> 00:09:56,360
and it's going to be a bit pain

205
00:09:57,200 --> 00:10:01,140
also uh we do not have their real

206
00:10:01,140 --> 00:10:03,300
database operations we might not have

207
00:10:03,300 --> 00:10:05,160
the real database operations that are

208
00:10:05,160 --> 00:10:07,080
being run in the application because

209
00:10:07,080 --> 00:10:10,019
there might be another layer of the data

210
00:10:10,019 --> 00:10:13,440
access layer that uh some of the

211
00:10:13,440 --> 00:10:17,779
uh data might be already

212
00:10:17,779 --> 00:10:20,580
dropped or I don't know is not

213
00:10:20,580 --> 00:10:22,680
completely visible uh by the application

214
00:10:22,680 --> 00:10:25,860
itself uh we can go to the data access

215
00:10:25,860 --> 00:10:27,959
layer it's again a single point that we

216
00:10:27,959 --> 00:10:30,240
can just lock every data that have been

217
00:10:30,240 --> 00:10:32,700
accessed or touched or changed but it

218
00:10:32,700 --> 00:10:35,459
also have its own problem again it do

219
00:10:35,459 --> 00:10:37,200
not have the real context of their

220
00:10:37,200 --> 00:10:39,120
requests your content context of the

221
00:10:39,120 --> 00:10:42,120
application that what is it about and

222
00:10:42,120 --> 00:10:44,640
also yeah maybe we are just over logging

223
00:10:44,640 --> 00:10:47,459
there just logging everything and every

224
00:10:47,459 --> 00:10:49,700
single access

225
00:10:49,700 --> 00:10:52,880
row or a cell that might be a bit

226
00:10:52,880 --> 00:10:55,380
producing a lot of data that's not

227
00:10:55,380 --> 00:10:58,320
always the best way

228
00:10:58,320 --> 00:11:00,000
the next challenge is about the

229
00:11:00,000 --> 00:11:01,740
delivering the logs that we have

230
00:11:01,740 --> 00:11:05,640
generated the locks uh well we can think

231
00:11:05,640 --> 00:11:09,680
about uh something like one billion

232
00:11:09,680 --> 00:11:11,820
external requests that come into a

233
00:11:11,820 --> 00:11:12,660
server

234
00:11:12,660 --> 00:11:16,140
and yeah normally uh the most of the

235
00:11:16,140 --> 00:11:18,600
services are using somehow some service

236
00:11:18,600 --> 00:11:21,060
oriented architecture they call some

237
00:11:21,060 --> 00:11:23,579
internal requests as well so yeah you

238
00:11:23,579 --> 00:11:25,980
can add two for each request so we are

239
00:11:25,980 --> 00:11:27,600
dealing with something like three

240
00:11:27,600 --> 00:11:31,560
billion requests a day and yeah that's

241
00:11:31,560 --> 00:11:33,899
not a small number

242
00:11:33,899 --> 00:11:35,220
uh

243
00:11:35,220 --> 00:11:38,399
we are not going to store them uh so we

244
00:11:38,399 --> 00:11:40,200
were stored you are not going to store

245
00:11:40,200 --> 00:11:42,360
them locally we probably want to store

246
00:11:42,360 --> 00:11:44,640
them in a central place that we can uh

247
00:11:44,640 --> 00:11:46,380
query and we can look over there so we

248
00:11:46,380 --> 00:11:48,360
are you're going to send them over the

249
00:11:48,360 --> 00:11:50,940
network again so we are producing more

250
00:11:50,940 --> 00:11:52,380
Network traffic and more Network

251
00:11:52,380 --> 00:11:55,279
congestion there

252
00:11:55,740 --> 00:11:57,600
and then there are lots of logs we want

253
00:11:57,600 --> 00:12:00,060
to uh store them

254
00:12:00,060 --> 00:12:03,839
uh yeah uh what we want from log we

255
00:12:03,839 --> 00:12:05,399
normally want the details of the

256
00:12:05,399 --> 00:12:07,740
requests some internal Estates and some

257
00:12:07,740 --> 00:12:11,100
variables uh there are details of the

258
00:12:11,100 --> 00:12:13,140
response the response size the headers

259
00:12:13,140 --> 00:12:16,680
that we are sending to the uh user also

260
00:12:16,680 --> 00:12:18,540
errors and warnings that are happening

261
00:12:18,540 --> 00:12:21,180
we are eager to have them we can

262
00:12:21,180 --> 00:12:23,700
consider something like two kilobytes

263
00:12:23,700 --> 00:12:27,120
for each log then we had about three

264
00:12:27,120 --> 00:12:29,220
billion Lux it's going to be six

265
00:12:29,220 --> 00:12:32,100
petabytes per day and yeah we are not

266
00:12:32,100 --> 00:12:34,980
going to just store like for one day if

267
00:12:34,980 --> 00:12:36,360
you have for example for some

268
00:12:36,360 --> 00:12:39,240
comprehensive reasons we might we needed

269
00:12:39,240 --> 00:12:42,300
to store uh logs for at least six months

270
00:12:42,300 --> 00:12:44,639
so it's going to be something like one

271
00:12:44,639 --> 00:12:48,000
exabyte of storage which is

272
00:12:48,000 --> 00:12:50,779
too much

273
00:12:51,019 --> 00:12:53,880
and yeah then you are going to use them

274
00:12:53,880 --> 00:12:56,339
we want to analyze the logs

275
00:12:56,339 --> 00:12:57,720
uh

276
00:12:57,720 --> 00:13:00,240
it it doesn't make sense to just have

277
00:13:00,240 --> 00:13:02,339
the logs laying there you want to do

278
00:13:02,339 --> 00:13:05,459
filtering filter by a specific IP

279
00:13:05,459 --> 00:13:08,399
address filter by uh

280
00:13:08,399 --> 00:13:11,220
uh I don't know some ISP or any other

281
00:13:11,220 --> 00:13:13,680
information also you might want to Pi

282
00:13:13,680 --> 00:13:16,079
with data based on a specific criteria

283
00:13:16,079 --> 00:13:18,540
and specific parameters you also are

284
00:13:18,540 --> 00:13:20,579
eager to do some aggregations I don't

285
00:13:20,579 --> 00:13:23,880
know top 10 IP addresses top 10 requests

286
00:13:23,880 --> 00:13:26,279
maximum response size average responses

287
00:13:26,279 --> 00:13:28,860
or this kind of information to be able

288
00:13:28,860 --> 00:13:31,620
to run this we surely need to index data

289
00:13:31,620 --> 00:13:34,320
and by indexing data we need more and

290
00:13:34,320 --> 00:13:36,860
more storage

291
00:13:39,000 --> 00:13:40,860
uh

292
00:13:40,860 --> 00:13:43,500
yeah this is also access control over

293
00:13:43,500 --> 00:13:46,500
the logs is also a problems not all the

294
00:13:46,500 --> 00:13:49,380
data on the that are stored on the logs

295
00:13:49,380 --> 00:13:52,320
should be accessed by everybody uh some

296
00:13:52,320 --> 00:13:54,720
of the information might be only uh

297
00:13:54,720 --> 00:13:56,220
valid to to be accessed by the

298
00:13:56,220 --> 00:13:57,779
Developers for example errors and

299
00:13:57,779 --> 00:13:59,459
warnings might only needed to be

300
00:13:59,459 --> 00:14:01,200
accessed by developers some others I

301
00:14:01,200 --> 00:14:03,120
don't know the source IP uh some

302
00:14:03,120 --> 00:14:05,040
sensitive information might not be

303
00:14:05,040 --> 00:14:06,660
accessed by developers but some Security

304
00:14:06,660 --> 00:14:10,260
Experts on a specific condition so we

305
00:14:10,260 --> 00:14:11,279
need to

306
00:14:11,279 --> 00:14:12,720
have

307
00:14:12,720 --> 00:14:15,480
a very granular access control over the

308
00:14:15,480 --> 00:14:18,240
logs over the time it is not such a

309
00:14:18,240 --> 00:14:21,060
simple just a simple storage

310
00:14:21,060 --> 00:14:24,420
uh also the logs might be used by some

311
00:14:24,420 --> 00:14:26,940
services or some users and stored in

312
00:14:26,940 --> 00:14:28,860
other places and that's all that's also

313
00:14:28,860 --> 00:14:32,040
going to be a big problem uh that's the

314
00:14:32,040 --> 00:14:33,959
data might be leaked in other places as

315
00:14:33,959 --> 00:14:36,079
well

316
00:14:37,079 --> 00:14:41,579
uh yeah then we can go to some examples

317
00:14:41,579 --> 00:14:44,459
of the logging at the bad loggings that

318
00:14:44,459 --> 00:14:49,500
might happen uh as I said yeah uh the a

319
00:14:49,500 --> 00:14:52,620
normal login page can just have a

320
00:14:52,620 --> 00:14:54,720
request like this an email a password

321
00:14:54,720 --> 00:14:57,899
and some other parameters if you just uh

322
00:14:57,899 --> 00:15:00,959
log the password log the request bodies

323
00:15:00,959 --> 00:15:02,639
we will lock the passwords everywhere

324
00:15:02,639 --> 00:15:07,320
and yeah it's not the things to do also

325
00:15:07,320 --> 00:15:09,300
the credit card information might be

326
00:15:09,300 --> 00:15:11,639
existing requests it is not only uh the

327
00:15:11,639 --> 00:15:14,160
page that get the credit card that is

328
00:15:14,160 --> 00:15:16,860
sending the credit card for storing uh

329
00:15:16,860 --> 00:15:19,139
lots of sites lots lots of websites and

330
00:15:19,139 --> 00:15:21,839
services uh use some javascripts for

331
00:15:21,839 --> 00:15:24,540
example to store the current state of

332
00:15:24,540 --> 00:15:27,540
the page so if you uh come back again to

333
00:15:27,540 --> 00:15:29,940
the page you have all the fields uh

334
00:15:29,940 --> 00:15:32,880
field uh and you can continue with that

335
00:15:32,880 --> 00:15:36,360
that I said if such a script is uh

336
00:15:36,360 --> 00:15:39,120
exists in a page that get credit card

337
00:15:39,120 --> 00:15:41,699
information then uh

338
00:15:41,699 --> 00:15:43,380
the critical information might be

339
00:15:43,380 --> 00:15:45,839
already sent to the server in the

340
00:15:45,839 --> 00:15:47,459
endpoint that is not supposed to get

341
00:15:47,459 --> 00:15:49,920
credit card so uh

342
00:15:49,920 --> 00:15:52,800
it's not so trivial to just uh

343
00:15:52,800 --> 00:15:54,540
uh keep track of the accurate the

344
00:15:54,540 --> 00:15:56,220
endpoint that are supposed to get the

345
00:15:56,220 --> 00:15:58,680
credit score

346
00:15:58,680 --> 00:16:01,980
also uh this is nothing good but common

347
00:16:01,980 --> 00:16:04,500
practice that especially for mobile and

348
00:16:04,500 --> 00:16:08,699
API endpoints uh they the programmers

349
00:16:08,699 --> 00:16:11,279
send authentication tokens via their

350
00:16:11,279 --> 00:16:12,980
requests

351
00:16:12,980 --> 00:16:17,459
parameters uh something like this and so

352
00:16:17,459 --> 00:16:19,500
yeah they are being logged in everywhere

353
00:16:19,500 --> 00:16:22,079
uh because there existing their requests

354
00:16:22,079 --> 00:16:24,120
and they can be blocked authentication

355
00:16:24,120 --> 00:16:27,260
tokens are somehow worse than

356
00:16:27,260 --> 00:16:29,699
passwording sometimes because

357
00:16:29,699 --> 00:16:31,440
uh

358
00:16:31,440 --> 00:16:34,680
uh it it is also a common practice that

359
00:16:34,680 --> 00:16:38,040
by changing the password uh the systems

360
00:16:38,040 --> 00:16:41,100
might not uh expire the token or might

361
00:16:41,100 --> 00:16:42,899
an exploit authentication token and they

362
00:16:42,899 --> 00:16:44,399
for example if you change your password

363
00:16:44,399 --> 00:16:46,680
your mobile application might still be

364
00:16:46,680 --> 00:16:49,320
logged in uh because it's a bad

365
00:16:49,320 --> 00:16:52,380
experience that might the user happen so

366
00:16:52,380 --> 00:16:54,420
yeah they are not doing this lots of

367
00:16:54,420 --> 00:16:56,759
them so in some terms authentication

368
00:16:56,759 --> 00:16:59,339
tokens are uh more dangerous than

369
00:16:59,339 --> 00:17:02,639
passwords so yeah their best practice is

370
00:17:02,639 --> 00:17:06,319
just to send the tokens with the uh

371
00:17:06,319 --> 00:17:09,959
headers uh but again headers are also

372
00:17:09,959 --> 00:17:13,520
some users inputs and if you are uh

373
00:17:13,520 --> 00:17:16,980
if you want to uh log the user input we

374
00:17:16,980 --> 00:17:20,099
should lock the headers as well and yeah

375
00:17:20,099 --> 00:17:22,439
we will again we'll lock the headers

376
00:17:22,439 --> 00:17:25,199
there so if we need to uh take care of

377
00:17:25,199 --> 00:17:27,240
that as well when to look at okay all

378
00:17:27,240 --> 00:17:29,940
the headers should not be locked

379
00:17:29,940 --> 00:17:33,240
also uh one important one uh things that

380
00:17:33,240 --> 00:17:35,940
happen with the log is that uh normally

381
00:17:35,940 --> 00:17:38,820
the applications that are uh directly

382
00:17:38,820 --> 00:17:40,679
dealing with the user inputs are more

383
00:17:40,679 --> 00:17:45,480
considered as uh or almost have a better

384
00:17:45,480 --> 00:17:49,380
security looking so developers and I

385
00:17:49,380 --> 00:17:51,360
don't know Security Experts have uh more

386
00:17:51,360 --> 00:17:54,480
eye on that to make sure that the user

387
00:17:54,480 --> 00:17:57,539
input is sanitized or uh do not have

388
00:17:57,539 --> 00:17:58,980
injection or something like that but

389
00:17:58,980 --> 00:18:01,799
this data if you use log in the data I'm

390
00:18:01,799 --> 00:18:04,200
going to be rest is going to be a store

391
00:18:04,200 --> 00:18:06,720
somewhere and sometimes later it's going

392
00:18:06,720 --> 00:18:08,820
to be used by under applications and

393
00:18:08,820 --> 00:18:11,400
because the application uh mentally

394
00:18:11,400 --> 00:18:13,320
developers think that okay this is not

395
00:18:13,320 --> 00:18:15,900
going to work on the user input they

396
00:18:15,900 --> 00:18:19,460
might be not uh as

397
00:18:19,460 --> 00:18:24,720
a secure Vision about over that though

398
00:18:24,720 --> 00:18:27,539
they might not have enough a secure

399
00:18:27,539 --> 00:18:29,880
Vision over those applications

400
00:18:29,880 --> 00:18:32,520
and it can be lead to some blind

401
00:18:32,520 --> 00:18:36,559
injection and the loggings

402
00:18:39,000 --> 00:18:43,679
okay uh no uh I'm going to uh yeah based

403
00:18:43,679 --> 00:18:45,600
on some of our experiences that we had

404
00:18:45,600 --> 00:18:48,900
in Booking uh to provide some base

405
00:18:48,900 --> 00:18:50,820
structure really high level structure

406
00:18:50,820 --> 00:18:54,419
that we are using in Booking to have a

407
00:18:54,419 --> 00:18:59,400
better logging uh ecosystem

408
00:18:59,400 --> 00:19:01,919
yeah

409
00:19:01,919 --> 00:19:03,780
uh

410
00:19:03,780 --> 00:19:06,660
this is the really high level overview

411
00:19:06,660 --> 00:19:08,160
of what we have

412
00:19:08,160 --> 00:19:12,380
uh uh declined sent a request to the uh

413
00:19:12,380 --> 00:19:15,360
server to the external load balancer

414
00:19:15,360 --> 00:19:17,940
let's say the the entry point of the

415
00:19:17,940 --> 00:19:22,440
application the whole uh ecosystem uh

416
00:19:22,440 --> 00:19:25,140
the external load balancer uh I I say I

417
00:19:25,140 --> 00:19:28,200
will assign an ID to the request it can

418
00:19:28,200 --> 00:19:30,539
then then it will pass the request to

419
00:19:30,539 --> 00:19:31,919
the real application that is going to

420
00:19:31,919 --> 00:19:34,440
handle their request and process their

421
00:19:34,440 --> 00:19:37,500
request to uh generate the response the

422
00:19:37,500 --> 00:19:40,380
application then after uh

423
00:19:40,380 --> 00:19:43,679
processing their request will and be

424
00:19:43,679 --> 00:19:46,500
before sending the response back to the

425
00:19:46,500 --> 00:19:49,140
load balancer we'll send a log with the

426
00:19:49,140 --> 00:19:52,200
ID with the id1 to the a place and a

427
00:19:52,200 --> 00:19:54,240
streamer let's say a Kafka topic or any

428
00:19:54,240 --> 00:19:56,760
other streaming uh

429
00:19:56,760 --> 00:19:59,640
event streaming uh ecosystem that you

430
00:19:59,640 --> 00:20:03,179
can take then the external load balancer

431
00:20:03,179 --> 00:20:06,080
will just accept their request

432
00:20:06,080 --> 00:20:09,240
the response to be sent back to the user

433
00:20:09,240 --> 00:20:11,880
if the ID exists if a log with that ID

434
00:20:11,880 --> 00:20:15,780
is already sent to the topic so each

435
00:20:15,780 --> 00:20:18,600
application is mandated each service is

436
00:20:18,600 --> 00:20:22,679
mandated to at least write a log to be

437
00:20:22,679 --> 00:20:25,200
able to serve externally or internal to

438
00:20:25,200 --> 00:20:27,780
be able to server request by this we can

439
00:20:27,780 --> 00:20:29,820
make sure that applications are doing

440
00:20:29,820 --> 00:20:32,580
logging also if the application is going

441
00:20:32,580 --> 00:20:35,039
to contact some internal Services as we

442
00:20:35,039 --> 00:20:37,980
thought uh yeah if it's a some

443
00:20:37,980 --> 00:20:40,799
structures like service mesh or any

444
00:20:40,799 --> 00:20:44,520
other architecture uh the application

445
00:20:44,520 --> 00:20:46,559
will send it to another load balancer

446
00:20:46,559 --> 00:20:48,600
and the load balancer will do the same

447
00:20:48,600 --> 00:20:52,440
they will send assign a new ID let's say

448
00:20:52,440 --> 00:20:55,860
id2 to their request and pack it

449
00:20:55,860 --> 00:20:58,260
together with their id1 which is the

450
00:20:58,260 --> 00:21:00,960
parent ID and send it by send it to

451
00:21:00,960 --> 00:21:02,220
service one

452
00:21:02,220 --> 00:21:06,660
uh the service will again process the

453
00:21:06,660 --> 00:21:10,919
requests and log to the topic and then

454
00:21:10,919 --> 00:21:13,799
get it back to the load balancer and all

455
00:21:13,799 --> 00:21:16,380
the way back to the clients so with this

456
00:21:16,380 --> 00:21:20,460
uh structure we are making sure that uh

457
00:21:20,460 --> 00:21:22,679
first as I said every application is

458
00:21:22,679 --> 00:21:25,200
doing the log is logging something for

459
00:21:25,200 --> 00:21:26,600
each request

460
00:21:26,600 --> 00:21:31,559
then by having this uh parent ID over

461
00:21:31,559 --> 00:21:32,940
the

462
00:21:32,940 --> 00:21:36,840
uh Services we are correlating the

463
00:21:36,840 --> 00:21:39,720
different uh requests the different logs

464
00:21:39,720 --> 00:21:42,179
to together so whenever we have a

465
00:21:42,179 --> 00:21:45,840
internal uh request under one of our

466
00:21:45,840 --> 00:21:48,059
internal Services we know that it is

467
00:21:48,059 --> 00:21:51,720
triggered by what external request

468
00:21:51,720 --> 00:21:55,080
then it will be consumed by different uh

469
00:21:55,080 --> 00:21:56,820
services and different storage systems

470
00:21:56,820 --> 00:22:00,860
that I will be get back to that as well

471
00:22:01,740 --> 00:22:04,740
uh

472
00:22:05,039 --> 00:22:08,760
well uh yeah one problem here that we

473
00:22:08,760 --> 00:22:10,620
mentioned is about the uh producing the

474
00:22:10,620 --> 00:22:14,220
locks and the way that uh their

475
00:22:14,220 --> 00:22:16,740
applications should produce the logs uh

476
00:22:16,740 --> 00:22:18,600
we need to Define we have need to define

477
00:22:18,600 --> 00:22:23,880
a standard uh uh a practical standard

478
00:22:23,880 --> 00:22:26,520
art uh for the service owners for the

479
00:22:26,520 --> 00:22:29,280
developer teams to make sure that they

480
00:22:29,280 --> 00:22:31,640
are uh

481
00:22:31,640 --> 00:22:34,860
the generating the logs then generating

482
00:22:34,860 --> 00:22:38,640
the data that we as the security as the

483
00:22:38,640 --> 00:22:40,980
application security team wants the data

484
00:22:40,980 --> 00:22:44,360
so we had defined it at a standard

485
00:22:44,360 --> 00:22:47,100
and work together with the service teams

486
00:22:47,100 --> 00:22:49,559
to make sure that they are able to

487
00:22:49,559 --> 00:22:51,840
provide those data as standards should

488
00:22:51,840 --> 00:22:54,120
be practical it's not a good idea to

489
00:22:54,120 --> 00:22:56,940
just uh send this to under writing a

490
00:22:56,940 --> 00:23:00,360
standard and send it to be uh applied by

491
00:23:00,360 --> 00:23:02,520
everybody we need to make sure that it

492
00:23:02,520 --> 00:23:05,760
is practical and teams can make sure you

493
00:23:05,760 --> 00:23:07,860
can provide those data and exactly

494
00:23:07,860 --> 00:23:11,159
provide the data that we are looking for

495
00:23:11,159 --> 00:23:13,700
foreign

496
00:23:16,880 --> 00:23:19,679
we also need to make sure that the

497
00:23:19,679 --> 00:23:22,880
produce logs are uh

498
00:23:22,880 --> 00:23:25,559
are compatible with their standard we

499
00:23:25,559 --> 00:23:29,280
need to make sure that the logs uh met

500
00:23:29,280 --> 00:23:31,200
the standards so we need some company

501
00:23:31,200 --> 00:23:33,840
asthmatics we need to have a look over

502
00:23:33,840 --> 00:23:36,780
the all the logs to see that okay uh we

503
00:23:36,780 --> 00:23:38,940
we had make sure that every every for

504
00:23:38,940 --> 00:23:40,679
every single request there is a lot but

505
00:23:40,679 --> 00:23:42,720
does those logs really contain the

506
00:23:42,720 --> 00:23:44,700
information that we want so we need some

507
00:23:44,700 --> 00:23:47,940
compliance matches over there uh it is

508
00:23:47,940 --> 00:23:51,539
not a good uh practice to make it uh

509
00:23:51,539 --> 00:23:53,820
strictly blocking if an application is

510
00:23:53,820 --> 00:23:55,799
not providing all the details that we

511
00:23:55,799 --> 00:23:57,720
want just block the request and not

512
00:23:57,720 --> 00:23:59,640
serving to the client because it might

513
00:23:59,640 --> 00:24:02,100
be in lots of reasons that that is

514
00:24:02,100 --> 00:24:06,000
happening uh and it is not a good uh

515
00:24:06,000 --> 00:24:09,120
user experience to just block some lots

516
00:24:09,120 --> 00:24:10,860
of requests because of some internal

517
00:24:10,860 --> 00:24:13,559
errors or something that can be

518
00:24:13,559 --> 00:24:17,340
temporary bypassed so we made it as a

519
00:24:17,340 --> 00:24:19,140
synchronous way

520
00:24:19,140 --> 00:24:23,100
uh the the data that were coming to the

521
00:24:23,100 --> 00:24:25,559
topic were stored somewhere and we had

522
00:24:25,559 --> 00:24:28,620
some uh graphs and some compliance

523
00:24:28,620 --> 00:24:32,220
metrics over uh this data that can be

524
00:24:32,220 --> 00:24:34,860
reported to the different uh

525
00:24:34,860 --> 00:24:36,600
stakeholders such as the developers

526
00:24:36,600 --> 00:24:39,360
themselves the owners the directors or

527
00:24:39,360 --> 00:24:41,340
anybody who is interested in those data

528
00:24:41,340 --> 00:24:45,539
and if service is not compliance with uh

529
00:24:45,539 --> 00:24:49,559
the standard for a while it can be a red

530
00:24:49,559 --> 00:24:52,440
flag maybe it got blocked or any other

531
00:24:52,440 --> 00:24:54,419
action that is required you need to have

532
00:24:54,419 --> 00:24:57,480
some graphs not like this one probably

533
00:24:57,480 --> 00:25:00,480
but uh yeah with some kind of graph with

534
00:25:00,480 --> 00:25:03,780
it you can make sure that

535
00:25:03,780 --> 00:25:06,000
the applications or the service are

536
00:25:06,000 --> 00:25:08,880
completely standard

537
00:25:08,880 --> 00:25:10,200
uh

538
00:25:10,200 --> 00:25:12,900
uh to be able to implement the data

539
00:25:12,900 --> 00:25:15,240
because if we are talking about the web

540
00:25:15,240 --> 00:25:17,520
applications there are lots of common

541
00:25:17,520 --> 00:25:19,440
things in the web applications that can

542
00:25:19,440 --> 00:25:23,520
be shared among different Services uh

543
00:25:23,520 --> 00:25:26,760
the IP address the request info query

544
00:25:26,760 --> 00:25:29,760
parameters headers these are the common

545
00:25:29,760 --> 00:25:33,740
data that every single applications need

546
00:25:33,740 --> 00:25:37,559
can provide I need to provide so we work

547
00:25:37,559 --> 00:25:40,320
with some or framework team and some

548
00:25:40,320 --> 00:25:42,960
there's provided some shared shared

549
00:25:42,960 --> 00:25:45,260
libraries to

550
00:25:45,260 --> 00:25:48,659
uh producers those those data the basic

551
00:25:48,659 --> 00:25:51,360
information the structures uh of the

552
00:25:51,360 --> 00:25:54,600
data uh and also some scrubbing of some

553
00:25:54,600 --> 00:25:56,940
if some sensitive information uh for

554
00:25:56,940 --> 00:25:59,940
example the credit card information uh

555
00:25:59,940 --> 00:26:02,460
for sure is not going to be locked and

556
00:26:02,460 --> 00:26:06,020
it have a specific structure so by the

557
00:26:06,020 --> 00:26:08,220
underlying framework and the shape

558
00:26:08,220 --> 00:26:10,320
Library we can just scrub this data and

559
00:26:10,320 --> 00:26:12,659
prevent them from being locked

560
00:26:12,659 --> 00:26:15,179
then we need to work with the every

561
00:26:15,179 --> 00:26:18,720
single uh service to make sure that they

562
00:26:18,720 --> 00:26:21,659
are providing the specific business

563
00:26:21,659 --> 00:26:24,059
related information for example the uh

564
00:26:24,059 --> 00:26:26,340
in our case the hotel ID the hotel name

565
00:26:26,340 --> 00:26:28,559
this information that are related to a

566
00:26:28,559 --> 00:26:30,659
travel that are related to the request

567
00:26:30,659 --> 00:26:33,480
can be provided in in the logs in the

568
00:26:33,480 --> 00:26:35,779
best way

569
00:26:36,419 --> 00:26:39,720
then as of delivery we say that our main

570
00:26:39,720 --> 00:26:43,320
uh delivery infrastructure was a Kafka

571
00:26:43,320 --> 00:26:46,860
topic but uh we decided to have a

572
00:26:46,860 --> 00:26:50,640
another layer over there that is the we

573
00:26:50,640 --> 00:26:54,600
call the event system uh which is uh

574
00:26:54,600 --> 00:26:56,220
getting the logs from the applications

575
00:26:56,220 --> 00:26:58,919
but before sending them and writing them

576
00:26:58,919 --> 00:27:01,460
directly to the Kafka it will do some

577
00:27:01,460 --> 00:27:06,500
processing on it first it will look for

578
00:27:06,740 --> 00:27:11,820
uh if we look for the the Privacy from

579
00:27:11,820 --> 00:27:14,760
the pii or other uh sensitive

580
00:27:14,760 --> 00:27:19,200
information uh we use uh mapping we can

581
00:27:19,200 --> 00:27:23,279
use a mapping of the pii uh and uh have

582
00:27:23,279 --> 00:27:26,159
instead of the API ID himself have some

583
00:27:26,159 --> 00:27:28,799
IDs for them to be logged in the uh

584
00:27:28,799 --> 00:27:31,260
loggings in in their uh like a storage

585
00:27:31,260 --> 00:27:33,539
that we want then uh someone with access

586
00:27:33,539 --> 00:27:36,720
to their logs cannot have access to the

587
00:27:36,720 --> 00:27:39,840
Pio information uh the personally

588
00:27:39,840 --> 00:27:44,039
identifiable information but

589
00:27:44,039 --> 00:27:45,799
uh they they

590
00:27:45,799 --> 00:27:49,799
map to exact one a specific PRI if for

591
00:27:49,799 --> 00:27:52,559
uh later use it was needed to access

592
00:27:52,559 --> 00:27:55,320
those information if we wanted to know

593
00:27:55,320 --> 00:27:57,299
that for example as I said uh there's a

594
00:27:57,299 --> 00:27:59,100
database you want to know what users

595
00:27:59,100 --> 00:28:00,900
have in British or what data have been

596
00:28:00,900 --> 00:28:03,480
preached we can just remap again to the

597
00:28:03,480 --> 00:28:06,620
to those data and these uh

598
00:28:06,620 --> 00:28:09,600
piui mapping database are stored

599
00:28:09,600 --> 00:28:13,140
securely in the uh I'm busy Journal

600
00:28:13,140 --> 00:28:15,179
Access Control

601
00:28:15,179 --> 00:28:18,960
also uh some scrubbing can be again

602
00:28:18,960 --> 00:28:21,779
implemented here if there exists any

603
00:28:21,779 --> 00:28:24,900
credit card information or any other

604
00:28:24,900 --> 00:28:27,059
sensitive information that can be a

605
00:28:27,059 --> 00:28:29,100
scrub also there are some other

606
00:28:29,100 --> 00:28:32,039
sensitive information that might not be

607
00:28:32,039 --> 00:28:34,500
accessed by everybody or by developers

608
00:28:34,500 --> 00:28:37,620
especially we can just separate these

609
00:28:37,620 --> 00:28:38,640
data

610
00:28:38,640 --> 00:28:42,419
to another place with another access

611
00:28:42,419 --> 00:28:45,720
control so we will have this data

612
00:28:45,720 --> 00:28:47,700
separated and the different Access

613
00:28:47,700 --> 00:28:50,480
Control here

614
00:28:52,080 --> 00:28:55,620
then finally uh not finally but uh when

615
00:28:55,620 --> 00:28:58,559
we want to store the data uh we can do

616
00:28:58,559 --> 00:29:01,500
some enrichment over the data it is not

617
00:29:01,500 --> 00:29:04,559
uh the enrichment of it is sometimes

618
00:29:04,559 --> 00:29:06,240
time consuming when you want to generate

619
00:29:06,240 --> 00:29:10,919
the extract the uh geo-ip information of

620
00:29:10,919 --> 00:29:13,320
a single IP or attach some threat

621
00:29:13,320 --> 00:29:15,720
intelligence information about some uh

622
00:29:15,720 --> 00:29:17,700
IP or some requests or anything else

623
00:29:17,700 --> 00:29:19,620
also to correlate the information for

624
00:29:19,620 --> 00:29:21,419
example if you have a hotel ID we want

625
00:29:21,419 --> 00:29:23,580
also the hotel name to be attached there

626
00:29:23,580 --> 00:29:26,159
there are some information that even

627
00:29:26,159 --> 00:29:28,080
they can be produced during the

628
00:29:28,080 --> 00:29:30,059
producing of the log by the applications

629
00:29:30,059 --> 00:29:34,320
but they are not uh but but they are

630
00:29:34,320 --> 00:29:36,480
time consuming so we can't do it later

631
00:29:36,480 --> 00:29:39,299
so before a storage before storing you

632
00:29:39,299 --> 00:29:41,399
are doing this to make sure that the

633
00:29:41,399 --> 00:29:44,100
applications are returning in a faster

634
00:29:44,100 --> 00:29:45,419
way

635
00:29:45,419 --> 00:29:48,779
also if needed uh for for some specific

636
00:29:48,779 --> 00:29:51,840
use cases those pii data might be

637
00:29:51,840 --> 00:29:55,740
retrieved and mapped with the uh the

638
00:29:55,740 --> 00:29:57,779
anonymized ID and stored in a secure

639
00:29:57,779 --> 00:30:01,140
place if needed also for some use cases

640
00:30:01,140 --> 00:30:04,919
and uh for uh specific data especially

641
00:30:04,919 --> 00:30:07,500
we can use sampling data I don't know

642
00:30:07,500 --> 00:30:09,480
store the data one in 100 or something

643
00:30:09,480 --> 00:30:12,600
like that to make sure that uh the to

644
00:30:12,600 --> 00:30:15,720
reduce the storage costs especially for

645
00:30:15,720 --> 00:30:19,200
some analytical uh data that you want to

646
00:30:19,200 --> 00:30:21,000
produce you want you can run some

647
00:30:21,000 --> 00:30:24,059
analytics over the sample data so we can

648
00:30:24,059 --> 00:30:24,980
uh

649
00:30:24,980 --> 00:30:27,720
uh make some Statistics over the data

650
00:30:27,720 --> 00:30:30,899
with sampling without almost losing uh

651
00:30:30,899 --> 00:30:33,139
nothing

652
00:30:34,500 --> 00:30:37,620
and yeah finally to be able to use the

653
00:30:37,620 --> 00:30:39,899
data uh

654
00:30:39,899 --> 00:30:43,740
we had different storage systems uh some

655
00:30:43,740 --> 00:30:47,539
short term heavily indexed and uh

656
00:30:47,539 --> 00:30:51,779
re-really granular data that can be uh

657
00:30:51,779 --> 00:30:55,860
queried and filtered near Real Time with

658
00:30:55,860 --> 00:30:58,559
the seconds of the response time a bit

659
00:30:58,559 --> 00:31:00,240
shorter

660
00:31:00,240 --> 00:31:04,200
uh retention period uh something like

661
00:31:04,200 --> 00:31:07,039
two months and we will store the

662
00:31:07,039 --> 00:31:10,200
long-term data for six months or more in

663
00:31:10,200 --> 00:31:14,039
a cold storage which is way cheaper but

664
00:31:14,039 --> 00:31:18,120
the data there is not so uh well indexed

665
00:31:18,120 --> 00:31:20,820
and uh retrieving the data is more

666
00:31:20,820 --> 00:31:23,940
costly but it is needed uh once at a

667
00:31:23,940 --> 00:31:27,960
time and uh yeah the cost can be reduced

668
00:31:27,960 --> 00:31:31,740
by this size so much also uh we can use

669
00:31:31,740 --> 00:31:33,600
and we have used some distributed

670
00:31:33,600 --> 00:31:35,600
tracing uh

671
00:31:35,600 --> 00:31:39,600
uh solutions to be able to just go over

672
00:31:39,600 --> 00:31:41,940
different logs and correlate logs based

673
00:31:41,940 --> 00:31:43,919
on different parameters uh the base

674
00:31:43,919 --> 00:31:45,899
parameters that we that I have mentioned

675
00:31:45,899 --> 00:31:49,320
is the uh the parent ID of the log that

676
00:31:49,320 --> 00:31:52,200
the log 3 of a service that is coming

677
00:31:52,200 --> 00:31:55,200
different through the

678
00:31:55,200 --> 00:31:56,399
uh

679
00:31:56,399 --> 00:31:58,260
uh different Services whenever a request

680
00:31:58,260 --> 00:32:01,380
comes but other than that uh it can be

681
00:32:01,380 --> 00:32:03,600
used to correlate data based on other

682
00:32:03,600 --> 00:32:06,240
parameters as well to make sure that we

683
00:32:06,240 --> 00:32:10,140
will be able to uh yeah uh just uh

684
00:32:10,140 --> 00:32:12,720
analyze the log all over the uh places

685
00:32:12,720 --> 00:32:16,460
that a request is coming and going

686
00:32:16,500 --> 00:32:19,039
uh

687
00:32:19,440 --> 00:32:23,580
uh it was my and yeah uh the whole

688
00:32:23,580 --> 00:32:26,220
idea of us is not to end up something

689
00:32:26,220 --> 00:32:29,460
like this that their logs exist and but

690
00:32:29,460 --> 00:32:32,520
we cannot find anything from them

691
00:32:32,520 --> 00:32:34,550
thank you there's any questions

692
00:32:34,550 --> 00:32:41,039
[Applause]

693
00:32:41,039 --> 00:32:43,020
are there any questions in the audience

694
00:32:43,020 --> 00:32:46,860
can you find folks get a mic over there

695
00:32:46,860 --> 00:32:49,100
please

696
00:32:52,820 --> 00:32:54,840
uh hello

697
00:32:54,840 --> 00:32:58,200
um so you you said earlier that you are

698
00:32:58,200 --> 00:33:02,399
storing six pentabytes of data per day

699
00:33:02,399 --> 00:33:06,720
and I was curious what solution are you

700
00:33:06,720 --> 00:33:09,720
using for storage and discovery of the

701
00:33:09,720 --> 00:33:12,600
logs because as you said logs don't show

702
00:33:12,600 --> 00:33:14,840
nothing

703
00:33:15,559 --> 00:33:17,460
uh

704
00:33:17,460 --> 00:33:20,640
yeah as I said this amount of data is if

705
00:33:20,640 --> 00:33:25,799
we use some let's say a road a store raw

706
00:33:25,799 --> 00:33:28,679
data for all their Lots

707
00:33:28,679 --> 00:33:30,659
but yeah for sure we are doing

708
00:33:30,659 --> 00:33:34,500
compression these are the text uh text

709
00:33:34,500 --> 00:33:36,419
logs we then use the compression it will

710
00:33:36,419 --> 00:33:39,600
be I think one in ten or one in uh less

711
00:33:39,600 --> 00:33:43,200
still it's a lot of data yeah so if you

712
00:33:43,200 --> 00:33:45,179
want for example use the elasticsearch

713
00:33:45,179 --> 00:33:47,899
for I don't know for discovery

714
00:33:47,899 --> 00:33:51,960
uh it's it's capable elastic or Splunk

715
00:33:51,960 --> 00:33:53,519
to

716
00:33:53,519 --> 00:33:57,360
to do the analysis of the logs

717
00:33:57,360 --> 00:33:59,940
uh for for yeah as I said for sure for

718
00:33:59,940 --> 00:34:01,440
short term yeah for six months it's not

719
00:34:01,440 --> 00:34:04,019
going to be uh capable of doing that I

720
00:34:04,019 --> 00:34:07,440
mean for one day six pentabytes of data

721
00:34:07,440 --> 00:34:11,659
for for those amount of data

722
00:34:12,020 --> 00:34:17,099
almost yes uh also I think I'm afraid

723
00:34:17,099 --> 00:34:19,560
that I'm uh I cannot give more

724
00:34:19,560 --> 00:34:21,300
information about okay underlying the

725
00:34:21,300 --> 00:34:23,879
system but yes for those I wanted this

726
00:34:23,879 --> 00:34:26,399
we have some solutions that we do so you

727
00:34:26,399 --> 00:34:28,320
are using a proprietary solution for

728
00:34:28,320 --> 00:34:31,619
this yeah okay okay yeah I was thinking

729
00:34:31,619 --> 00:34:35,780
which one it's much more

730
00:34:41,119 --> 00:34:44,219
uh can we also get a mic on this side of

731
00:34:44,219 --> 00:34:46,879
the room please

732
00:34:48,599 --> 00:34:51,379
see

733
00:34:53,540 --> 00:34:57,060
okay thank you for the presentation so I

734
00:34:57,060 --> 00:34:58,680
know that logging is a very important

735
00:34:58,680 --> 00:35:02,640
thing right but is it all it is also a

736
00:35:02,640 --> 00:35:05,400
very expensive especially when companies

737
00:35:05,400 --> 00:35:07,800
want to just take them for like six

738
00:35:07,800 --> 00:35:10,880
months or more right so in your opinion

739
00:35:10,880 --> 00:35:14,760
uh what kind or what type of logs are

740
00:35:14,760 --> 00:35:18,000
the most overlooked in companies or not

741
00:35:18,000 --> 00:35:20,599
logged

742
00:35:21,790 --> 00:35:22,560
[Music]

743
00:35:22,560 --> 00:35:24,560
um

744
00:35:25,940 --> 00:35:31,339
or are not luck are not locked yeah

745
00:35:31,339 --> 00:35:34,200
uh well

746
00:35:34,200 --> 00:35:36,960
uh

747
00:35:36,960 --> 00:35:39,420
you know what what saw some information

748
00:35:39,420 --> 00:35:43,800
that are normally not logged or uh the

749
00:35:43,800 --> 00:35:45,839
the big chunk of data which are most

750
00:35:45,839 --> 00:35:48,960
expensive to a store for example I don't

751
00:35:48,960 --> 00:35:51,240
know their response

752
00:35:51,240 --> 00:35:53,940
uh the responses or the request bodies

753
00:35:53,940 --> 00:35:56,520
or the errors these are the data that

754
00:35:56,520 --> 00:36:01,920
normally might be bypassed by logging uh

755
00:36:01,920 --> 00:36:05,760
and yes some of them can be regenerated

756
00:36:05,760 --> 00:36:07,619
for example if you talk about the

757
00:36:07,619 --> 00:36:10,619
response the real responses it might not

758
00:36:10,619 --> 00:36:13,859
be really needed because we know their

759
00:36:13,859 --> 00:36:16,560
input and if we have the state we can if

760
00:36:16,560 --> 00:36:19,619
needed regenerate the status uh

761
00:36:19,619 --> 00:36:21,180
but

762
00:36:21,180 --> 00:36:23,940
uh

763
00:36:23,940 --> 00:36:26,410
yeah the ones that are overlooked

764
00:36:26,410 --> 00:36:29,560
[Music]

765
00:36:30,960 --> 00:36:33,660
now I know it's a wider question like

766
00:36:33,660 --> 00:36:36,060
there are many answers to this I just

767
00:36:36,060 --> 00:36:39,259
wanted to know your opinion

768
00:36:40,320 --> 00:36:42,240
I think that the most important thing

769
00:36:42,240 --> 00:36:44,099
that should be a stored and should be

770
00:36:44,099 --> 00:36:47,460
locked are uh yeah the core things that

771
00:36:47,460 --> 00:36:49,500
have the parameters and these

772
00:36:49,500 --> 00:36:52,020
informations and being able to correlate

773
00:36:52,020 --> 00:36:54,960
them uh having some some specific place

774
00:36:54,960 --> 00:36:57,060
to correlate and aggregate on these are

775
00:36:57,060 --> 00:36:59,220
specific things but but it's going to be

776
00:36:59,220 --> 00:37:03,060
a bit uh lots of uh storage and lots of

777
00:37:03,060 --> 00:37:07,440
course to for example have a space each

778
00:37:07,440 --> 00:37:09,900
let's say a parameter indexed

779
00:37:09,900 --> 00:37:11,760
individually yes query parameter or

780
00:37:11,760 --> 00:37:14,359
header indexing jewelry it is very

781
00:37:14,359 --> 00:37:18,720
costly thing that's uh yeah normally uh

782
00:37:18,720 --> 00:37:21,420
we are not doing that in the first place

783
00:37:21,420 --> 00:37:24,660
we will try to make it the minimum then

784
00:37:24,660 --> 00:37:29,280
uh yeah if needed we will run uh

785
00:37:29,280 --> 00:37:31,740
again on the roll logs to extract this

786
00:37:31,740 --> 00:37:35,300
and to index these and be able to

787
00:37:35,300 --> 00:37:38,339
do the filters that you want but here we

788
00:37:38,339 --> 00:37:42,720
will have a less useful data during the

789
00:37:42,720 --> 00:37:45,180
runtime yeah I just wanted to ask this

790
00:37:45,180 --> 00:37:47,460
because sometimes people just realize

791
00:37:47,460 --> 00:37:49,800
they don't have the logging that they

792
00:37:49,800 --> 00:37:52,079
need in place just after a breach right

793
00:37:52,079 --> 00:37:53,940
because you don't find what you need

794
00:37:53,940 --> 00:37:56,099
yeah that's why I wanted to know it yeah

795
00:37:56,099 --> 00:37:59,119
thank you thank you very much

796
00:38:00,599 --> 00:38:05,040
um hello here so for sensitive data

797
00:38:05,040 --> 00:38:10,040
let's say do we have redundancy backups

798
00:38:11,760 --> 00:38:15,720
uh for sensitive logs same with data do

799
00:38:15,720 --> 00:38:18,619
you have for the proposed solution

800
00:38:18,619 --> 00:38:21,540
backup redundancy

801
00:38:21,540 --> 00:38:24,720
yeah yeah because you didn't mention so

802
00:38:24,720 --> 00:38:27,720
I was just curious

803
00:38:27,720 --> 00:38:29,959
yeah

804
00:38:30,200 --> 00:38:34,680
also there for every single data it

805
00:38:34,680 --> 00:38:37,279
should be exist

806
00:38:38,280 --> 00:38:39,660
hello

807
00:38:39,660 --> 00:38:43,079
thank you for the presentation uh do you

808
00:38:43,079 --> 00:38:46,859
have any recommendation

809
00:38:46,859 --> 00:38:49,260
for uh

810
00:38:49,260 --> 00:38:52,740
I don't know Frameworks which are space

811
00:38:52,740 --> 00:38:54,320
efficient

812
00:38:54,320 --> 00:38:57,420
for let's say embedded devices or

813
00:38:57,420 --> 00:38:59,160
strategy for logging for embedded

814
00:38:59,160 --> 00:39:01,980
devices where I I don't know you need to

815
00:39:01,980 --> 00:39:05,780
put all the logs in 100k

816
00:39:05,780 --> 00:39:10,400
uh so I didn't get your question

817
00:39:10,400 --> 00:39:13,020
Frameworks which are optimal for

818
00:39:13,020 --> 00:39:16,320
embedded devices for logging very tiny

819
00:39:16,320 --> 00:39:19,680
storage yeah yeah uh yeah I'm afraid

820
00:39:19,680 --> 00:39:21,780
that no I don't have any experience on

821
00:39:21,780 --> 00:39:23,640
the embedded devices and those kind of

822
00:39:23,640 --> 00:39:26,460
things okay thank you sorry

823
00:39:26,460 --> 00:39:28,920
all right thank you so much I'm here

824
00:39:28,920 --> 00:39:31,880
thank you everyone

