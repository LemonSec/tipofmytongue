1
00:00:00,030 --> 00:00:04,500
okay anyway we can start<font color="#E5E5E5"> so today's</font>

2
00:00:02,610 --> 00:00:06,000
<font color="#E5E5E5">topic of interest</font><font color="#CCCCCC"> is timing attacks</font>

3
00:00:04,500 --> 00:00:09,150
whether<font color="#E5E5E5"> or not they're still practical</font>

4
00:00:06,000 --> 00:00:10,950
in regards to<font color="#E5E5E5"> web applications</font><font color="#CCCCCC"> and we're</font>

5
00:00:09,150 --> 00:00:14,460
<font color="#CCCCCC">seeing web modifications because</font><font color="#E5E5E5"> timing</font>

6
00:00:10,950 --> 00:00:15,570
attacks are usually<font color="#E5E5E5"> a methodologist</font><font color="#CCCCCC"> art</font>

7
00:00:14,460 --> 00:00:17,130
in cryptography in the field of

8
00:00:15,570 --> 00:00:19,800
<font color="#CCCCCC">cryptography</font><font color="#E5E5E5"> and that's not pretty</font>

9
00:00:17,130 --> 00:00:21,599
common in web applications nowadays<font color="#E5E5E5"> the</font>

10
00:00:19,800 --> 00:00:24,240
<font color="#E5E5E5">main reason</font><font color="#CCCCCC"> for that or reasons</font><font color="#E5E5E5"> will be</font>

11
00:00:21,600 --> 00:00:27,630
speaking about later on but for<font color="#CCCCCC"> now this</font>

12
00:00:24,240 --> 00:00:30,589
is<font color="#E5E5E5"> the topic</font><font color="#CCCCCC"> and the things</font><font color="#E5E5E5"> that we'll</font>

13
00:00:27,630 --> 00:00:33,589
be<font color="#E5E5E5"> discussing here just doesn't work</font>

14
00:00:30,590 --> 00:00:33,590
obviously

15
00:00:38,200 --> 00:00:42,530
so the topics<font color="#CCCCCC"> that we're going to</font>

16
00:00:40,250 --> 00:00:43,730
discuss<font color="#E5E5E5"> today is what is</font><font color="#CCCCCC"> dumbing tab</font>

17
00:00:42,530 --> 00:00:46,340
because<font color="#E5E5E5"> there are different types of</font>

18
00:00:43,730 --> 00:00:48,650
timing attacks but in the field<font color="#E5E5E5"> of</font>

19
00:00:46,340 --> 00:00:50,420
<font color="#CCCCCC">cryptography it's quite different</font><font color="#E5E5E5"> so in</font>

20
00:00:48,650 --> 00:00:53,050
this particular<font color="#E5E5E5"> case we're going</font><font color="#CCCCCC"> to go</font>

21
00:00:50,420 --> 00:00:56,420
over<font color="#CCCCCC"> a specific case</font><font color="#E5E5E5"> of timing attacks</font>

22
00:00:53,050 --> 00:00:58,580
<font color="#CCCCCC">we'll go over</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> our plan was</font><font color="#E5E5E5"> for the</font>

23
00:00:56,420 --> 00:01:01,760
presentation<font color="#CCCCCC"> what we did differently</font><font color="#E5E5E5"> to</font>

24
00:00:58,580 --> 00:01:04,089
our researches<font color="#E5E5E5"> because there's been a</font>

25
00:01:01,760 --> 00:01:06,170
lot of research<font color="#E5E5E5"> in this field but</font>

26
00:01:04,089 --> 00:01:07,880
<font color="#E5E5E5">obviously most of them haven't been</font>

27
00:01:06,170 --> 00:01:09,500
carried out<font color="#E5E5E5"> on</font><font color="#CCCCCC"> web applications at all</font>

28
00:01:07,880 --> 00:01:11,839
they have been solely focused on

29
00:01:09,500 --> 00:01:13,970
cryptography<font color="#CCCCCC"> and this is because the</font>

30
00:01:11,840 --> 00:01:15,530
timing side<font color="#E5E5E5"> channel is famous in that</font>

31
00:01:13,970 --> 00:01:16,250
<font color="#CCCCCC">field and it's not pretty common web</font>

32
00:01:15,530 --> 00:01:18,710
applications

33
00:01:16,250 --> 00:01:20,869
there's too many jitter<font color="#E5E5E5"> and a lot of</font>

34
00:01:18,710 --> 00:01:23,149
network latency that<font color="#E5E5E5"> is pretty difficult</font>

35
00:01:20,869 --> 00:01:26,240
to<font color="#CCCCCC"> figure out so this</font><font color="#E5E5E5"> is not something</font>

36
00:01:23,150 --> 00:01:27,740
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> usually done on daily basis so</font>

37
00:01:26,240 --> 00:01:29,899
<font color="#CCCCCC">we'll</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> did differently</font>

38
00:01:27,740 --> 00:01:31,640
<font color="#E5E5E5">doing our researches what we achieve</font>

39
00:01:29,900 --> 00:01:35,090
because<font color="#E5E5E5"> first of all</font><font color="#CCCCCC"> we have a different</font>

40
00:01:31,640 --> 00:01:37,700
goal for the target but<font color="#E5E5E5"> we ended up with</font>

41
00:01:35,090 --> 00:01:41,390
a total<font color="#E5E5E5"> different scenario</font><font color="#CCCCCC"> we'll be</font>

42
00:01:37,700 --> 00:01:42,830
generalizing timing attacks<font color="#E5E5E5"> and we were</font>

43
00:01:41,390 --> 00:01:44,119
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about how practical</font><font color="#E5E5E5"> they are</font>

44
00:01:42,830 --> 00:01:47,840
which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the true meaning of</font><font color="#E5E5E5"> the</font>

45
00:01:44,119 --> 00:01:51,110
presentation because<font color="#CCCCCC"> as it seems</font><font color="#E5E5E5"> as of</font>

46
00:01:47,840 --> 00:01:54,710
2018 they haven't been any exploits<font color="#E5E5E5"> in</font>

47
00:01:51,110 --> 00:01:56,720
the wild for<font color="#E5E5E5"> timing attacks and finally</font>

48
00:01:54,710 --> 00:01:58,910
we<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be talking about</font><font color="#E5E5E5"> a bit of misc</font>

49
00:01:56,720 --> 00:02:00,890
stuff about core subjects<font color="#CCCCCC"> to</font><font color="#E5E5E5"> attack what</font>

50
00:01:58,910 --> 00:02:02,990
is an<font color="#E5E5E5"> acceptable solution because a lot</font>

51
00:02:00,890 --> 00:02:06,069
of people<font color="#CCCCCC"> don't think that trading off</font>

52
00:02:02,990 --> 00:02:08,299
memory for execution time<font color="#CCCCCC"> is a good</font><font color="#E5E5E5"> idea</font>

53
00:02:06,069 --> 00:02:11,660
<font color="#CCCCCC">while this may be true</font><font color="#E5E5E5"> to some extent</font>

54
00:02:08,300 --> 00:02:18,680
<font color="#E5E5E5">it's not entirely true so we'll be</font>

55
00:02:11,660 --> 00:02:20,329
<font color="#E5E5E5">discussing that as well so this is</font><font color="#CCCCCC"> a</font>

56
00:02:18,680 --> 00:02:22,160
basic string comparison in PHP we've

57
00:02:20,330 --> 00:02:24,290
taken PHP<font color="#CCCCCC"> is an example</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> pretty</font>

58
00:02:22,160 --> 00:02:26,720
<font color="#E5E5E5">much applies to almost any</font><font color="#CCCCCC"> language out</font>

59
00:02:24,290 --> 00:02:28,700
there<font color="#E5E5E5"> so the first thing we have here is</font>

60
00:02:26,720 --> 00:02:30,350
<font color="#CCCCCC">a</font><font color="#E5E5E5"> pretty exaggerated example and</font><font color="#CCCCCC"> blitzen</font>

61
00:02:28,700 --> 00:02:32,630
fight so you can just<font color="#E5E5E5"> get the</font><font color="#CCCCCC"> idea is</font>

62
00:02:30,350 --> 00:02:34,970
that we<font color="#E5E5E5"> have a variable key</font><font color="#CCCCCC"> as the only</font>

63
00:02:32,630 --> 00:02:37,670
<font color="#CCCCCC">5 checksum of any string actually</font>

64
00:02:34,970 --> 00:02:42,020
<font color="#E5E5E5">doesn't matter as long as it's an md5</font>

65
00:02:37,670 --> 00:02:44,059
it's 32 characters<font color="#E5E5E5"> and what we have next</font>

66
00:02:42,020 --> 00:02:45,890
<font color="#CCCCCC">is an</font><font color="#E5E5E5"> if check and</font><font color="#CCCCCC"> if course</font><font color="#E5E5E5"> we're</font>

67
00:02:44,060 --> 00:02:47,780
checking whether the<font color="#CCCCCC"> gap parameter code</font>

68
00:02:45,890 --> 00:02:50,600
key<font color="#E5E5E5"> is equal</font><font color="#CCCCCC"> to the value of</font><font color="#E5E5E5"> the</font>

69
00:02:47,780 --> 00:02:51,310
variable key<font color="#E5E5E5"> which is essentially saying</font>

70
00:02:50,600 --> 00:02:53,920
that<font color="#E5E5E5"> if</font>

71
00:02:51,310 --> 00:02:56,380
not<font color="#CCCCCC"> different</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> not equal then it</font>

72
00:02:53,920 --> 00:02:58,329
<font color="#E5E5E5">echoes out</font><font color="#CCCCCC"> for better</font><font color="#E5E5E5"> next case it</font>

73
00:02:56,380 --> 00:03:00,430
echoes<font color="#E5E5E5"> us welcome</font><font color="#CCCCCC"> so this is pretty</font>

74
00:02:58,330 --> 00:03:01,959
<font color="#E5E5E5">similar</font><font color="#CCCCCC"> to any authentication</font><font color="#E5E5E5"> with the</font>

75
00:03:00,430 --> 00:03:05,800
<font color="#CCCCCC">own</font><font color="#E5E5E5"> exception</font><font color="#CCCCCC"> that authentications tend</font>

76
00:03:01,959 --> 00:03:07,900
to be a lot<font color="#E5E5E5"> more complex than this so</font>

77
00:03:05,800 --> 00:03:10,150
the problem<font color="#E5E5E5"> here is that we have a</font>

78
00:03:07,900 --> 00:03:12,489
<font color="#E5E5E5">comparison and the comparison is not</font><font color="#CCCCCC"> a</font>

79
00:03:10,150 --> 00:03:14,590
<font color="#E5E5E5">constant time algorithm which means that</font>

80
00:03:12,489 --> 00:03:16,920
<font color="#CCCCCC">depending on what</font><font color="#E5E5E5"> we input it takes</font>

81
00:03:14,590 --> 00:03:19,000
<font color="#E5E5E5">different amount of time</font><font color="#CCCCCC"> to process</font><font color="#E5E5E5"> it</font>

82
00:03:16,920 --> 00:03:21,069
<font color="#CCCCCC">essentially</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is giving out a lot of</font>

83
00:03:19,000 --> 00:03:24,069
<font color="#CCCCCC">information that shouldn't</font><font color="#E5E5E5"> be exposed</font>

84
00:03:21,069 --> 00:03:25,929
otherwise for<font color="#E5E5E5"> example imagine that</font><font color="#CCCCCC"> you</font>

85
00:03:24,069 --> 00:03:28,810
<font color="#CCCCCC">are inputting your password in any form</font>

86
00:03:25,930 --> 00:03:30,940
of their authentication form<font color="#E5E5E5"> and once</font>

87
00:03:28,810 --> 00:03:33,040
you've mistaken that<font color="#E5E5E5"> imagine if the form</font>

88
00:03:30,940 --> 00:03:35,049
says<font color="#CCCCCC"> well we have an error and that's on</font>

89
00:03:33,040 --> 00:03:41,950
position<font color="#CCCCCC"> five your password is</font><font color="#E5E5E5"> not wrong</font>

90
00:03:35,049 --> 00:03:43,810
it's not<font color="#E5E5E5"> correct so this is the source</font>

91
00:03:41,950 --> 00:03:46,119
code for the is identical function

92
00:03:43,810 --> 00:03:50,170
because PHP<font color="#E5E5E5"> as we know is written in C</font>

93
00:03:46,120 --> 00:03:53,670
<font color="#E5E5E5">there's a source code of C of HP that's</font>

94
00:03:50,170 --> 00:03:57,518
in C and we have<font color="#E5E5E5"> a simple switch case</font>

95
00:03:53,670 --> 00:04:00,339
which match up if the<font color="#E5E5E5"> input string is a</font>

96
00:03:57,519 --> 00:04:02,950
string type first thing that we do<font color="#E5E5E5"> on</font>

97
00:04:00,340 --> 00:04:05,079
<font color="#CCCCCC">one - is that we compare</font><font color="#E5E5E5"> whether the</font>

98
00:04:02,950 --> 00:04:07,268
variables are the<font color="#CCCCCC"> same this is different</font>

99
00:04:05,079 --> 00:04:11,200
from comparing values just<font color="#E5E5E5"> about</font>

100
00:04:07,269 --> 00:04:13,540
variables<font color="#E5E5E5"> as types and what is a</font>

101
00:04:11,200 --> 00:04:16,209
particular<font color="#E5E5E5"> interest is</font><font color="#CCCCCC"> the else</font><font color="#E5E5E5"> clause</font>

102
00:04:13,540 --> 00:04:18,130
which<font color="#E5E5E5"> is the thing</font><font color="#CCCCCC"> that we're going to</font>

103
00:04:16,209 --> 00:04:21,220
exploit in this presentation<font color="#CCCCCC"> we also</font>

104
00:04:18,130 --> 00:04:22,419
have a demo included at the<font color="#CCCCCC"> end the</font>

105
00:04:21,220 --> 00:04:24,490
first thing<font color="#CCCCCC"> that it does is</font><font color="#E5E5E5"> it compares</font>

106
00:04:22,419 --> 00:04:26,919
<font color="#E5E5E5">the length of the strings if they are</font>

107
00:04:24,490 --> 00:04:29,830
<font color="#E5E5E5">different doesn't</font><font color="#CCCCCC"> matter</font><font color="#E5E5E5"> I mean we won't</font>

108
00:04:26,919 --> 00:04:31,500
<font color="#CCCCCC">continue further obviously if the length</font>

109
00:04:29,830 --> 00:04:34,479
<font color="#E5E5E5">is not the same strings are</font><font color="#CCCCCC"> not the same</font>

110
00:04:31,500 --> 00:04:38,080
<font color="#E5E5E5">so next thing we do is that we</font><font color="#CCCCCC"> compare</font>

111
00:04:34,479 --> 00:04:41,200
the bytes<font color="#CCCCCC"> one byte at a time this is</font>

112
00:04:38,080 --> 00:04:44,229
<font color="#E5E5E5">done by passing three arguments to mem</font>

113
00:04:41,200 --> 00:04:47,020
CP the<font color="#E5E5E5"> mem compare</font><font color="#CCCCCC"> function and the</font>

114
00:04:44,229 --> 00:04:51,389
first<font color="#E5E5E5"> part asks for the first variable</font>

115
00:04:47,020 --> 00:04:51,389
the second variable and<font color="#E5E5E5"> their length</font>

116
00:04:55,869 --> 00:05:00,649
so this is what<font color="#CCCCCC"> the source code of</font>

117
00:04:57,889 --> 00:05:03,739
<font color="#E5E5E5">memory camp areas actually it takes two</font>

118
00:05:00,649 --> 00:05:05,779
unsigned cars<font color="#CCCCCC"> u1 and YouTube and indeed</font>

119
00:05:03,739 --> 00:05:08,359
<font color="#CCCCCC">rates over the</font><font color="#E5E5E5"> entire string so it</font>

120
00:05:05,779 --> 00:05:10,849
counts<font color="#CCCCCC"> it one byte at a time and it</font>

121
00:05:08,359 --> 00:05:13,308
basically<font color="#E5E5E5"> says</font><font color="#CCCCCC"> that if you're comparing</font>

122
00:05:10,849 --> 00:05:15,558
<font color="#E5E5E5">one byte at a time you want to index</font>

123
00:05:13,309 --> 00:05:17,989
<font color="#CCCCCC">that as an array and what you have right</font>

124
00:05:15,559 --> 00:05:20,059
<font color="#E5E5E5">now is you take each and every</font><font color="#CCCCCC"> single</font>

125
00:05:17,989 --> 00:05:21,709
character<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you compare</font><font color="#E5E5E5"> it with its</font>

126
00:05:20,059 --> 00:05:23,929
corresponding from the following string

127
00:05:21,709 --> 00:05:26,539
from<font color="#E5E5E5"> the second string if they don't</font>

128
00:05:23,929 --> 00:05:30,888
match up<font color="#E5E5E5"> an error is it don't or</font>

129
00:05:26,539 --> 00:05:33,409
<font color="#E5E5E5">otherwise says return false so this</font>

130
00:05:30,889 --> 00:05:34,939
exposes<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> information but if we</font>

131
00:05:33,409 --> 00:05:36,889
can time<font color="#CCCCCC"> it properly</font><font color="#E5E5E5"> if we can extract</font>

132
00:05:34,939 --> 00:05:39,559
<font color="#CCCCCC">information from</font><font color="#E5E5E5"> that it would be great</font>

133
00:05:36,889 --> 00:05:41,089
but unfortunately<font color="#E5E5E5"> over</font><font color="#CCCCCC"> the network is</font>

134
00:05:39,559 --> 00:05:44,089
<font color="#E5E5E5">pretty difficult to filter out jitter</font>

135
00:05:41,089 --> 00:05:51,799
<font color="#E5E5E5">and that's not</font><font color="#CCCCCC"> something a</font><font color="#E5E5E5"> lot of people</font>

136
00:05:44,089 --> 00:05:53,809
are eager to accomplish nowadays so this

137
00:05:51,799 --> 00:05:56,839
is a pretty trivial example

138
00:05:53,809 --> 00:05:58,610
<font color="#E5E5E5">those are nanoseconds but it's a pretty</font>

139
00:05:56,839 --> 00:06:00,559
exaggerated<font color="#E5E5E5"> example has nothing to do</font>

140
00:05:58,610 --> 00:06:03,229
actually<font color="#E5E5E5"> with real data</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> just to</font>

141
00:06:00,559 --> 00:06:04,519
exemplify<font color="#CCCCCC"> what timing attacks are and in</font>

142
00:06:03,229 --> 00:06:07,399
particular timing attacks that we're

143
00:06:04,519 --> 00:06:08,989
going<font color="#E5E5E5"> to discuss now so as we said we</font>

144
00:06:07,399 --> 00:06:11,809
<font color="#E5E5E5">have</font><font color="#CCCCCC"> one key</font><font color="#E5E5E5"> this year that is a</font>

145
00:06:08,989 --> 00:06:15,919
checksum<font color="#E5E5E5"> an md5 that's hexadecimal and</font>

146
00:06:11,809 --> 00:06:18,889
32 characters<font color="#E5E5E5"> of length and the first</font>

147
00:06:15,919 --> 00:06:22,969
thing we do is that we input any string

148
00:06:18,889 --> 00:06:26,269
literally if we find<font color="#E5E5E5"> let's say the first</font>

149
00:06:22,969 --> 00:06:27,889
four matches<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the string and we get</font>

150
00:06:26,269 --> 00:06:30,499
different<font color="#E5E5E5"> times but when you attempt</font><font color="#CCCCCC"> to</font>

151
00:06:27,889 --> 00:06:31,759
uncover<font color="#E5E5E5"> the fifth one</font><font color="#CCCCCC"> and it's wrong yes</font>

152
00:06:30,499 --> 00:06:33,349
it does process it it does take some

153
00:06:31,759 --> 00:06:35,269
<font color="#CCCCCC">time</font><font color="#E5E5E5"> but it doesn't attempt to process</font>

154
00:06:33,349 --> 00:06:36,589
the sixth character<font color="#E5E5E5"> because the fifth</font>

155
00:06:35,269 --> 00:06:38,179
one is wrong so it doesn't matter

156
00:06:36,589 --> 00:06:40,939
<font color="#CCCCCC">whether the sixth seventh or eighth</font>

157
00:06:38,179 --> 00:06:44,109
s-sarah<font color="#CCCCCC"> are correct</font><font color="#E5E5E5"> even if one's wrong</font>

158
00:06:40,939 --> 00:06:46,549
the whole<font color="#CCCCCC"> string is not equal to itself</font>

159
00:06:44,109 --> 00:06:48,789
and<font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> from this example that</font>

160
00:06:46,549 --> 00:06:52,008
the<font color="#E5E5E5"> 18 nanoseconds we</font><font color="#CCCCCC"> compared three</font>

161
00:06:48,789 --> 00:06:55,549
letters<font color="#E5E5E5"> three symbols</font><font color="#CCCCCC"> two five and six</font>

162
00:06:52,009 --> 00:06:56,869
de the fourth one is incorrect<font color="#E5E5E5"> it takes</font>

163
00:06:55,549 --> 00:06:59,479
time<font color="#CCCCCC"> to process</font><font color="#E5E5E5"> it but it doesn't</font>

164
00:06:56,869 --> 00:07:01,249
<font color="#E5E5E5">attempt to process the fifth one so this</font>

165
00:06:59,479 --> 00:07:03,079
means less time less execution time

166
00:07:01,249 --> 00:07:06,050
which we can assume<font color="#E5E5E5"> that the next</font>

167
00:07:03,079 --> 00:07:08,360
<font color="#E5E5E5">character is not correct the main idea</font>

168
00:07:06,050 --> 00:07:10,520
<font color="#CCCCCC">of this is to just try</font><font color="#E5E5E5"> all possible</font>

169
00:07:08,360 --> 00:07:12,800
characters<font color="#E5E5E5"> until we find one that</font><font color="#CCCCCC"> it</font>

170
00:07:10,520 --> 00:07:14,810
takes the most time<font color="#E5E5E5"> the one who takes</font>

171
00:07:12,800 --> 00:07:17,469
<font color="#E5E5E5">the most time means</font><font color="#CCCCCC"> that is it the</font>

172
00:07:14,810 --> 00:07:17,469
<font color="#E5E5E5">correct</font><font color="#CCCCCC"> character</font>

173
00:07:21,520 --> 00:07:26,120
how does another example<font color="#CCCCCC"> that would</font><font color="#E5E5E5"> show</font>

174
00:07:24,560 --> 00:07:29,090
what<font color="#E5E5E5"> timing tacks are and particularly</font>

175
00:07:26,120 --> 00:07:31,159
<font color="#CCCCCC">ones we're</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> discuss as you can</font>

176
00:07:29,090 --> 00:07:33,318
see<font color="#E5E5E5"> again the times are</font><font color="#CCCCCC"> different but</font>

177
00:07:31,159 --> 00:07:35,539
<font color="#E5E5E5">they</font><font color="#CCCCCC"> are still in a particular</font><font color="#E5E5E5"> range of</font>

178
00:07:33,319 --> 00:07:38,210
each other<font color="#E5E5E5"> so it's there's no spikes</font>

179
00:07:35,539 --> 00:07:40,128
here<font color="#E5E5E5"> because obviously we have what</font>

180
00:07:38,210 --> 00:07:43,580
could<font color="#E5E5E5"> a</font><font color="#CCCCCC"> dancer</font><font color="#E5E5E5"> that that's just a</font>

181
00:07:40,129 --> 00:07:45,500
<font color="#E5E5E5">trivial example so the times are pretty</font>

182
00:07:43,580 --> 00:07:47,270
<font color="#E5E5E5">much the same</font><font color="#CCCCCC"> I mean the difference of</font>

183
00:07:45,500 --> 00:07:50,120
<font color="#E5E5E5">four nanoseconds doesn't really feel</font>

184
00:07:47,270 --> 00:07:51,919
like<font color="#E5E5E5"> much and we have 59</font><font color="#CCCCCC"> five</font>

185
00:07:50,120 --> 00:07:55,159
nanoseconds<font color="#E5E5E5"> for the first string we have</font>

186
00:07:51,919 --> 00:07:57,409
<font color="#E5E5E5">guessed four characters and</font><font color="#CCCCCC"> 91 seconds</font>

187
00:07:55,159 --> 00:08:00,469
for the second case again<font color="#E5E5E5"> with four</font>

188
00:07:57,409 --> 00:08:02,389
characters then we have the<font color="#E5E5E5"> third</font>

189
00:08:00,469 --> 00:08:04,969
example which is<font color="#E5E5E5"> accounted</font><font color="#CCCCCC"> in 15</font>

190
00:08:02,389 --> 00:08:07,460
nanoseconds<font color="#CCCCCC"> but in this case</font><font color="#E5E5E5"> we have a</font>

191
00:08:04,969 --> 00:08:10,669
total<font color="#E5E5E5"> of five characters that we have</font>

192
00:08:07,460 --> 00:08:12,318
<font color="#E5E5E5">guessed and it attempted to check the</font>

193
00:08:10,669 --> 00:08:14,589
sixth one<font color="#E5E5E5"> whether it's correct or</font><font color="#CCCCCC"> not</font>

194
00:08:12,319 --> 00:08:19,879
doesn't matter<font color="#CCCCCC"> it takes more time and</font>

195
00:08:14,589 --> 00:08:26,629
<font color="#E5E5E5">clearly 91 91 95 and 115 is</font><font color="#CCCCCC"> very</font>

196
00:08:19,879 --> 00:08:29,120
<font color="#CCCCCC">different</font><font color="#E5E5E5"> from each other so our main</font>

197
00:08:26,629 --> 00:08:31,699
idea<font color="#CCCCCC"> for timing</font><font color="#E5E5E5"> attacks the other side</font>

198
00:08:29,120 --> 00:08:33,229
it's a particular it's<font color="#E5E5E5"> being studying a</font>

199
00:08:31,699 --> 00:08:35,659
particular<font color="#CCCCCC"> field of the cryptography</font>

200
00:08:33,229 --> 00:08:38,300
field and it's not something that<font color="#E5E5E5"> is</font>

201
00:08:35,659 --> 00:08:39,860
<font color="#E5E5E5">generally</font><font color="#CCCCCC"> used in web applications so we</font>

202
00:08:38,299 --> 00:08:42,169
<font color="#E5E5E5">had to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that we time each and</font>

203
00:08:39,860 --> 00:08:44,089
<font color="#E5E5E5">every segment properly so the first</font>

204
00:08:42,169 --> 00:08:46,850
thing we had to do is done the

205
00:08:44,089 --> 00:08:49,010
round-trip time<font color="#CCCCCC"> RTT which is basically</font>

206
00:08:46,850 --> 00:08:50,630
<font color="#E5E5E5">how</font><font color="#CCCCCC"> many hops it takes to reach the</font>

207
00:08:49,010 --> 00:08:53,209
destination and how long it takes for

208
00:08:50,630 --> 00:08:56,300
<font color="#CCCCCC">each</font><font color="#E5E5E5"> cup to be processed we also have to</font>

209
00:08:53,209 --> 00:08:58,939
<font color="#E5E5E5">time the</font><font color="#CCCCCC"> webserver its response time and</font>

210
00:08:56,300 --> 00:09:02,359
the response time of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> application and</font>

211
00:08:58,940 --> 00:09:04,070
<font color="#E5E5E5">we should also consider</font><font color="#CCCCCC"> that those times</font>

212
00:09:02,360 --> 00:09:06,050
are pretty<font color="#CCCCCC"> equal to each other</font><font color="#E5E5E5"> they are</font>

213
00:09:04,070 --> 00:09:07,880
<font color="#E5E5E5">self-contained</font><font color="#CCCCCC"> I mean the application</font>

214
00:09:06,050 --> 00:09:09,349
time<font color="#E5E5E5"> the time it takes for the</font>

215
00:09:07,880 --> 00:09:11,810
application to<font color="#CCCCCC"> cross</font><font color="#E5E5E5"> the data we input</font>

216
00:09:09,350 --> 00:09:13,430
is pretty much<font color="#E5E5E5"> contained to the server's</font>

217
00:09:11,810 --> 00:09:16,520
response time so<font color="#CCCCCC"> we have to figure that</font>

218
00:09:13,430 --> 00:09:19,130
<font color="#CCCCCC">out we have to know what the server</font>

219
00:09:16,520 --> 00:09:21,230
response time<font color="#E5E5E5"> is essentially we know all</font>

220
00:09:19,130 --> 00:09:21,820
these measurements<font color="#CCCCCC"> and take measurement</font>

221
00:09:21,230 --> 00:09:25,190
of both

222
00:09:21,820 --> 00:09:28,220
categories in<font color="#CCCCCC"> order to just execute a</font>

223
00:09:25,190 --> 00:09:29,750
normal timing attack<font color="#E5E5E5"> otherwise if we</font>

224
00:09:28,220 --> 00:09:31,010
work on<font color="#E5E5E5"> it with the</font><font color="#CCCCCC"> service response</font>

225
00:09:29,750 --> 00:09:32,510
time<font color="#E5E5E5"> without</font><font color="#CCCCCC"> the application without</font>

226
00:09:31,010 --> 00:09:34,250
round-trip time it's pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> a</font>

227
00:09:32,510 --> 00:09:42,620
failure and we won't<font color="#E5E5E5"> be getting any</font>

228
00:09:34,250 --> 00:09:44,240
reliable data<font color="#E5E5E5"> at all so the thing that</font>

229
00:09:42,620 --> 00:09:48,500
we<font color="#CCCCCC"> should</font><font color="#E5E5E5"> mention before we can</font><font color="#CCCCCC"> continue</font>

230
00:09:44,240 --> 00:09:50,270
is a cup of pre requisite<font color="#CCCCCC"> because you</font>

231
00:09:48,500 --> 00:09:52,940
need<font color="#E5E5E5"> to know what we've had access to</font>

232
00:09:50,270 --> 00:09:56,150
what we've done<font color="#CCCCCC"> different</font><font color="#E5E5E5"> and what our</font>

233
00:09:52,940 --> 00:09:58,250
test cases was so first of<font color="#E5E5E5"> all we had</font>

234
00:09:56,150 --> 00:10:02,120
<font color="#CCCCCC">access the source</font><font color="#E5E5E5"> code it's a PHP system</font>

235
00:09:58,250 --> 00:10:03,860
that is<font color="#E5E5E5"> vulnerable timing attacks and it</font>

236
00:10:02,120 --> 00:10:06,560
also has<font color="#E5E5E5"> grown ability that</font><font color="#CCCCCC"> as a pass</font>

237
00:10:03,860 --> 00:10:09,470
the hash is present again not<font color="#E5E5E5"> so common</font>

238
00:10:06,560 --> 00:10:12,010
<font color="#CCCCCC">in web applications but apparently this</font>

239
00:10:09,470 --> 00:10:14,210
case the developers<font color="#E5E5E5"> consider that</font>

240
00:10:12,010 --> 00:10:16,520
<font color="#E5E5E5">performing hashing on the front end was</font>

241
00:10:14,210 --> 00:10:18,230
better so they<font color="#CCCCCC"> had the password just to</font>

242
00:10:16,520 --> 00:10:20,930
save some execution time with their

243
00:10:18,230 --> 00:10:23,780
<font color="#E5E5E5">back-end forcing the user to compute his</font>

244
00:10:20,930 --> 00:10:25,189
own hash<font color="#E5E5E5"> using javascript and then they</font>

245
00:10:23,780 --> 00:10:26,900
were comparing the hash at the<font color="#CCCCCC"> backend</font>

246
00:10:25,190 --> 00:10:28,700
<font color="#CCCCCC">so whatever was generated on the</font>

247
00:10:26,900 --> 00:10:31,840
<font color="#CCCCCC">front-end was compared on the backend</font>

248
00:10:28,700 --> 00:10:34,730
eventually<font color="#CCCCCC"> we also didn't have</font><font color="#E5E5E5"> any</font>

249
00:10:31,840 --> 00:10:36,860
hindrance with web application firewalls

250
00:10:34,730 --> 00:10:39,530
intrusion detection systems<font color="#CCCCCC"> prevention</font>

251
00:10:36,860 --> 00:10:41,540
systems we had no<font color="#CCCCCC"> Sirians</font><font color="#E5E5E5"> but no Koffler</font>

252
00:10:39,530 --> 00:10:44,300
<font color="#E5E5E5">no caching no reverse proxies no nginx</font>

253
00:10:41,540 --> 00:10:47,329
<font color="#CCCCCC">and</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> vital because in most cases</font>

254
00:10:44,300 --> 00:10:49,400
when you have<font color="#E5E5E5"> any kind of a reverse</font>

255
00:10:47,330 --> 00:10:50,720
<font color="#CCCCCC">proxy it will</font><font color="#E5E5E5"> just fill out the data you</font>

256
00:10:49,400 --> 00:10:51,640
won't have any reliable source

257
00:10:50,720 --> 00:10:53,720
whatsoever

258
00:10:51,640 --> 00:10:55,910
imagine the reverse proxy<font color="#E5E5E5"> just standing</font>

259
00:10:53,720 --> 00:10:56,840
in front<font color="#E5E5E5"> of your web server and it just</font>

260
00:10:55,910 --> 00:10:58,670
routes packets

261
00:10:56,840 --> 00:11:01,250
we're actually timing its response time

262
00:10:58,670 --> 00:11:03,860
not the<font color="#E5E5E5"> actual web server so this was a</font>

263
00:11:01,250 --> 00:11:06,320
<font color="#CCCCCC">problem</font><font color="#E5E5E5"> and in this case we had no</font>

264
00:11:03,860 --> 00:11:08,330
reverse proxies in front of us<font color="#CCCCCC"> obviously</font>

265
00:11:06,320 --> 00:11:11,510
<font color="#CCCCCC">a web application firewall or</font><font color="#E5E5E5"> an IDs</font>

266
00:11:08,330 --> 00:11:13,970
<font color="#E5E5E5">near because timing attacks tend to</font>

267
00:11:11,510 --> 00:11:17,720
<font color="#E5E5E5">require a large</font><font color="#CCCCCC"> amount of requests</font><font color="#E5E5E5"> and</font>

268
00:11:13,970 --> 00:11:20,660
if we were<font color="#E5E5E5"> to send out let's say a</font>

269
00:11:17,720 --> 00:11:22,520
thousand requests per second<font color="#E5E5E5"> clearly</font>

270
00:11:20,660 --> 00:11:24,650
most web application firewalls or<font color="#E5E5E5"> IDs</font>

271
00:11:22,520 --> 00:11:27,069
will stop us and<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> be able to</font>

272
00:11:24,650 --> 00:11:27,069
<font color="#E5E5E5">continue</font>

273
00:11:30,420 --> 00:11:36,250
so the thing<font color="#E5E5E5"> that we started off with</font>

274
00:11:33,430 --> 00:11:38,319
<font color="#CCCCCC">was first of</font><font color="#E5E5E5"> all study application</font>

275
00:11:36,250 --> 00:11:40,269
source<font color="#CCCCCC"> coding details just so we can</font>

276
00:11:38,319 --> 00:11:43,180
find a particular module particular

277
00:11:40,269 --> 00:11:44,589
<font color="#E5E5E5">functionality to exploit usual that</font>

278
00:11:43,180 --> 00:11:46,029
revolves around security critical

279
00:11:44,589 --> 00:11:49,000
operations like authentication

280
00:11:46,029 --> 00:11:50,620
cryptography<font color="#E5E5E5"> and we know that also</font>

281
00:11:49,000 --> 00:11:54,160
operations don't<font color="#E5E5E5"> take time because</font><font color="#CCCCCC"> they</font>

282
00:11:50,620 --> 00:11:56,319
process a lot more<font color="#E5E5E5"> data and it's pretty</font>

283
00:11:54,160 --> 00:11:59,110
<font color="#E5E5E5">different</font><font color="#CCCCCC"> to any other really</font>

284
00:11:56,319 --> 00:12:01,689
implementation of modules and mechanisms

285
00:11:59,110 --> 00:12:03,550
and essentially<font color="#E5E5E5"> it's one that exposes</font>

286
00:12:01,689 --> 00:12:05,610
data<font color="#CCCCCC"> I mean if we have one ability the</font>

287
00:12:03,550 --> 00:12:07,508
<font color="#E5E5E5">fication system that's not</font><font color="#CCCCCC"> a good idea</font>

288
00:12:05,610 --> 00:12:09,579
<font color="#E5E5E5">so we have to</font><font color="#CCCCCC"> pinpoint a particular</font>

289
00:12:07,509 --> 00:12:13,120
<font color="#E5E5E5">function source code that handles this</font>

290
00:12:09,579 --> 00:12:14,979
data to exploit it we conduct the basic

291
00:12:13,120 --> 00:12:15,879
data<font color="#E5E5E5"> collection so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can just know what</font>

292
00:12:14,980 --> 00:12:18,790
we're working with

293
00:12:15,879 --> 00:12:22,060
as in information about<font color="#CCCCCC"> timing</font>

294
00:12:18,790 --> 00:12:23,529
differences<font color="#E5E5E5"> and we had to work on</font>

295
00:12:22,060 --> 00:12:26,560
<font color="#E5E5E5">improving the noise filtration because</font>

296
00:12:23,529 --> 00:12:28,629
<font color="#E5E5E5">the noise situation is if not the</font><font color="#CCCCCC"> most</font>

297
00:12:26,560 --> 00:12:32,319
important part<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> entire timing</font>

298
00:12:28,629 --> 00:12:34,269
attack if we have a lot<font color="#CCCCCC"> of noise no</font>

299
00:12:32,319 --> 00:12:36,790
matter how much requests we<font color="#CCCCCC"> send it</font>

300
00:12:34,269 --> 00:12:39,250
doesn't matter it's just a fair attempt

301
00:12:36,790 --> 00:12:41,349
whatsoever<font color="#CCCCCC"> so we have to figure out</font>

302
00:12:39,250 --> 00:12:43,779
noise and we applied<font color="#E5E5E5"> several techniques</font>

303
00:12:41,350 --> 00:12:46,660
<font color="#E5E5E5">most of which were derived from another</font>

304
00:12:43,779 --> 00:12:50,170
<font color="#E5E5E5">conference</font><font color="#CCCCCC"> in blackhat that we kind of</font>

305
00:12:46,660 --> 00:12:51,459
copied there and eventually we had<font color="#CCCCCC"> to</font>

306
00:12:50,170 --> 00:12:55,930
reduce<font color="#CCCCCC"> the search space for a timing</font>

307
00:12:51,459 --> 00:12:57,758
<font color="#CCCCCC">attack</font><font color="#E5E5E5"> yes unfortunately</font><font color="#CCCCCC"> we have to</font><font color="#E5E5E5"> test</font>

308
00:12:55,930 --> 00:13:00,149
<font color="#E5E5E5">each in every</font><font color="#CCCCCC"> character which is 16</font>

309
00:12:57,759 --> 00:13:03,100
<font color="#E5E5E5">characters in total for 32 positions</font>

310
00:13:00,149 --> 00:13:05,649
<font color="#CCCCCC">this</font><font color="#E5E5E5"> amounts to millions of requests</font>

311
00:13:03,100 --> 00:13:07,589
<font color="#E5E5E5">that have to be sent in a reasonable</font>

312
00:13:05,649 --> 00:13:10,959
time let's say within<font color="#E5E5E5"> an hour or</font><font color="#CCCCCC"> two</font>

313
00:13:07,589 --> 00:13:13,449
<font color="#CCCCCC">otherwise we get</font><font color="#E5E5E5"> a watch</font><font color="#CCCCCC"> CPU spike</font><font color="#E5E5E5"> from</font>

314
00:13:10,959 --> 00:13:15,309
<font color="#CCCCCC">the remote</font><font color="#E5E5E5"> server or there could be some</font>

315
00:13:13,449 --> 00:13:17,229
other<font color="#E5E5E5"> noise that is induced by</font><font color="#CCCCCC"> our</font>

316
00:13:15,309 --> 00:13:19,089
<font color="#E5E5E5">network and that</font><font color="#CCCCCC"> general isn't a</font><font color="#E5E5E5"> good</font>

317
00:13:17,230 --> 00:13:20,949
<font color="#E5E5E5">idea so</font><font color="#CCCCCC"> we had to think of a way to</font>

318
00:13:19,089 --> 00:13:23,829
reduce<font color="#E5E5E5"> the search space</font><font color="#CCCCCC"> as a matter of</font>

319
00:13:20,949 --> 00:13:26,500
fact in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> particular case we had an</font>

320
00:13:23,829 --> 00:13:30,628
<font color="#E5E5E5">idea what</font><font color="#CCCCCC"> to do but it isn't really</font>

321
00:13:26,500 --> 00:13:30,629
applicable in most cases<font color="#E5E5E5"> out there</font>

322
00:13:38,080 --> 00:13:42,980
so those are<font color="#E5E5E5"> things that we've attempted</font>

323
00:13:40,600 --> 00:13:44,960
<font color="#E5E5E5">first of all this is part of what we did</font>

324
00:13:42,980 --> 00:13:48,290
<font color="#E5E5E5">differently than our researchers out</font>

325
00:13:44,960 --> 00:13:50,240
there<font color="#CCCCCC"> what we attempted to do and we</font>

326
00:13:48,290 --> 00:13:52,490
thought initially<font color="#E5E5E5"> it was a good</font><font color="#CCCCCC"> idea was</font>

327
00:13:50,240 --> 00:13:54,860
to profile the application using<font color="#CCCCCC"> AXA</font>

328
00:13:52,490 --> 00:13:58,610
<font color="#CCCCCC">buck or ACH prof.</font><font color="#E5E5E5"> it's a PHP application</font>

329
00:13:54,860 --> 00:14:01,280
again<font color="#E5E5E5"> but as it turned out this didn't</font>

330
00:13:58,610 --> 00:14:04,790
<font color="#E5E5E5">work out well because the application</font>

331
00:14:01,280 --> 00:14:07,610
itself isn't<font color="#CCCCCC"> really a viable</font><font color="#E5E5E5"> means of</font>

332
00:14:04,790 --> 00:14:10,880
<font color="#E5E5E5">data and we had to resort</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> other</font>

333
00:14:07,610 --> 00:14:13,460
techniques essentially timing it woke

334
00:14:10,880 --> 00:14:16,100
early without the usage<font color="#E5E5E5"> of the bugger</font><font color="#CCCCCC"> we</font>

335
00:14:13,460 --> 00:14:18,350
have a lot<font color="#E5E5E5"> less noise we also have to</font>

336
00:14:16,100 --> 00:14:20,330
measure the round-trip time<font color="#E5E5E5"> we've</font>

337
00:14:18,350 --> 00:14:23,750
attempted to do<font color="#CCCCCC"> that via TCP timestamps</font>

338
00:14:20,330 --> 00:14:27,140
<font color="#E5E5E5">but they don't keep that much data and</font>

339
00:14:23,750 --> 00:14:29,780
there was gravity is one millisecond to

340
00:14:27,140 --> 00:14:32,449
a hundred seconds<font color="#E5E5E5"> and we're working</font><font color="#CCCCCC"> with</font>

341
00:14:29,780 --> 00:14:34,670
microseconds so milliseconds are no good

342
00:14:32,450 --> 00:14:37,310
for<font color="#CCCCCC"> us and TCP timestamps go as well as</font>

343
00:14:34,670 --> 00:14:39,890
one millisecond so this wasn't<font color="#E5E5E5"> something</font>

344
00:14:37,310 --> 00:14:44,900
<font color="#E5E5E5">that could help us at least not at</font><font color="#CCCCCC"> first</font>

345
00:14:39,890 --> 00:14:46,670
sight and we also didn't get to make

346
00:14:44,900 --> 00:14:49,030
<font color="#E5E5E5">observations from user</font><font color="#CCCCCC"> space because</font>

347
00:14:46,670 --> 00:14:51,680
they didn't<font color="#CCCCCC"> use a lot of noise as well</font>

348
00:14:49,030 --> 00:14:53,720
working<font color="#CCCCCC"> from user space</font><font color="#E5E5E5"> implies that you</font>

349
00:14:51,680 --> 00:14:56,329
<font color="#CCCCCC">have to handle a lot</font><font color="#E5E5E5"> of things for</font>

350
00:14:53,720 --> 00:14:57,620
<font color="#CCCCCC">example system calls when you send a</font>

351
00:14:56,330 --> 00:14:59,090
request<font color="#E5E5E5"> and when you receive</font><font color="#CCCCCC"> it goes</font>

352
00:14:57,620 --> 00:15:02,240
through the kernel<font color="#E5E5E5"> the interface card</font>

353
00:14:59,090 --> 00:15:04,280
and of those<font color="#E5E5E5"> operations take a large</font>

354
00:15:02,240 --> 00:15:06,110
<font color="#E5E5E5">amount of time I mean what amount of</font>

355
00:15:04,280 --> 00:15:07,520
time is in microseconds<font color="#CCCCCC"> something that</font>

356
00:15:06,110 --> 00:15:09,740
we really<font color="#CCCCCC"> don't need</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> the time</font>

357
00:15:07,520 --> 00:15:12,350
difference and<font color="#E5E5E5"> we had to fill that out</font>

358
00:15:09,740 --> 00:15:14,420
<font color="#E5E5E5">so doing that from user</font><font color="#CCCCCC"> space for</font>

359
00:15:12,350 --> 00:15:16,760
<font color="#CCCCCC">example using</font><font color="#E5E5E5"> curl burp or anything like</font>

360
00:15:14,420 --> 00:15:18,490
<font color="#E5E5E5">that didn't work out</font><font color="#CCCCCC"> we had</font><font color="#E5E5E5"> to dress</font>

361
00:15:16,760 --> 00:15:20,689
system codes with a stress for example

362
00:15:18,490 --> 00:15:23,030
<font color="#E5E5E5">but that was pretty tricky because</font>

363
00:15:20,690 --> 00:15:26,450
<font color="#CCCCCC">estrous is not as handle and we also had</font>

364
00:15:23,030 --> 00:15:28,430
to<font color="#E5E5E5"> automate the</font><font color="#CCCCCC"> process in the end but</font>

365
00:15:26,450 --> 00:15:30,440
what we did differently<font color="#E5E5E5"> and what</font>

366
00:15:28,430 --> 00:15:34,010
actually<font color="#E5E5E5"> worked is timing</font><font color="#CCCCCC"> each</font>

367
00:15:30,440 --> 00:15:36,950
individual PHP function by itself<font color="#CCCCCC"> we've</font>

368
00:15:34,010 --> 00:15:39,730
copied from<font color="#E5E5E5"> source code</font><font color="#CCCCCC"> we've done some</font>

369
00:15:36,950 --> 00:15:42,140
unit testing and eventually we just

370
00:15:39,730 --> 00:15:44,990
attempted to time it using the micro

371
00:15:42,140 --> 00:15:46,279
time function in PHP we<font color="#CCCCCC"> collected data</font>

372
00:15:44,990 --> 00:15:48,829
<font color="#E5E5E5">from</font>

373
00:15:46,279 --> 00:15:51,560
samples<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> in this particular</font>

374
00:15:48,829 --> 00:15:54,589
<font color="#CCCCCC">case</font><font color="#E5E5E5"> the samples we took were a hundred</font>

375
00:15:51,560 --> 00:15:57,498
thousand and we also have rich<font color="#E5E5E5"> talc</font>

376
00:15:54,589 --> 00:15:59,749
Webster's performance<font color="#CCCCCC"> perversion because</font>

377
00:15:57,499 --> 00:16:02,389
different versions of PHP for example or

378
00:15:59,749 --> 00:16:04,490
Apache<font color="#CCCCCC"> because we've done PHP as well as</font>

379
00:16:02,389 --> 00:16:07,249
an interpreter<font color="#CCCCCC"> tend to have different</font>

380
00:16:04,490 --> 00:16:09,709
<font color="#E5E5E5">execution times for</font><font color="#CCCCCC"> example PHP</font><font color="#E5E5E5"> five six</font>

381
00:16:07,249 --> 00:16:12,110
is totally different from PHP cell<font color="#CCCCCC"> b7</font>

382
00:16:09,709 --> 00:16:14,119
has huge boost<font color="#E5E5E5"> in performance and that</font>

383
00:16:12,110 --> 00:16:16,670
can pretty much<font color="#E5E5E5"> grip our attack to a</font>

384
00:16:14,120 --> 00:16:19,249
large extent<font color="#E5E5E5"> so we have to handle that</font>

385
00:16:16,670 --> 00:16:21,680
as well<font color="#CCCCCC"> and timing different PHP</font>

386
00:16:19,249 --> 00:16:25,100
functions<font color="#E5E5E5"> was our main aspect of</font><font color="#CCCCCC"> this</font>

387
00:16:21,680 --> 00:16:26,779
act<font color="#E5E5E5"> because once we have a reasonable</font>

388
00:16:25,100 --> 00:16:29,889
<font color="#CCCCCC">idea how long it takes</font><font color="#E5E5E5"> for a function to</font>

389
00:16:26,779 --> 00:16:31,999
<font color="#CCCCCC">get executed we could essentially</font><font color="#E5E5E5"> just</font>

390
00:16:29,889 --> 00:16:33,920
subtract that time from the total time

391
00:16:31,999 --> 00:16:36,589
<font color="#E5E5E5">and we can have some</font><font color="#CCCCCC"> reasonable data to</font>

392
00:16:33,920 --> 00:16:39,800
work with<font color="#E5E5E5"> so those are the few things we</font>

393
00:16:36,589 --> 00:16:42,139
<font color="#CCCCCC">did</font><font color="#E5E5E5"> differently from others</font><font color="#CCCCCC"> because I</font>

394
00:16:39,800 --> 00:16:44,899
say<font color="#CCCCCC"> others as</font><font color="#E5E5E5"> in the parentheses</font>

395
00:16:42,139 --> 00:16:46,790
presented at blackhat in 2015

396
00:16:44,899 --> 00:16:50,240
they've only attempted to calculate a

397
00:16:46,790 --> 00:16:53,599
round-trip<font color="#E5E5E5"> time they've calculated the</font>

398
00:16:50,240 --> 00:16:55,879
noise<font color="#E5E5E5"> Delta and they worked with a lot</font>

399
00:16:53,600 --> 00:16:59,300
<font color="#CCCCCC">of statistical analysis</font><font color="#E5E5E5"> where I guessed</font>

400
00:16:55,879 --> 00:17:01,189
<font color="#E5E5E5">iOS tomaters nothing that they used was</font>

401
00:16:59,300 --> 00:17:03,649
a common<font color="#E5E5E5"> furor we use a common</font><font color="#CCCCCC"> filler as</font>

402
00:17:01,189 --> 00:17:06,230
well but it turned out in our case

403
00:17:03,649 --> 00:17:08,059
<font color="#CCCCCC">comfiest the only thing we needed in</font>

404
00:17:06,230 --> 00:17:14,569
<font color="#E5E5E5">addition to the timing of different PHP</font>

405
00:17:08,059 --> 00:17:17,720
functions so regarding the<font color="#E5E5E5"> round-trip</font>

406
00:17:14,569 --> 00:17:19,789
time<font color="#E5E5E5"> what we actually don't to calculate</font>

407
00:17:17,720 --> 00:17:22,490
it is that we didn't do it from user

408
00:17:19,789 --> 00:17:24,140
space<font color="#E5E5E5"> we clarify that because user space</font>

409
00:17:22,490 --> 00:17:27,470
is not<font color="#E5E5E5"> reliable especially</font><font color="#CCCCCC"> for</font>

410
00:17:24,140 --> 00:17:29,870
networking<font color="#CCCCCC"> but what was pretty robber</font>

411
00:17:27,470 --> 00:17:32,450
was packet capturing we captured cup of

412
00:17:29,870 --> 00:17:34,639
packets we estimated a time based on the

413
00:17:32,450 --> 00:17:37,909
<font color="#E5E5E5">synchronized and</font><font color="#CCCCCC"> acknowledgment</font><font color="#E5E5E5"> requests</font>

414
00:17:34,640 --> 00:17:39,799
and yeah as I said<font color="#CCCCCC"> history timestamps</font>

415
00:17:37,909 --> 00:17:43,460
don't work that<font color="#E5E5E5"> well was drawn right is</font>

416
00:17:39,799 --> 00:17:45,049
<font color="#E5E5E5">one millisecond</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> stress can</font><font color="#CCCCCC"> be tricky</font>

417
00:17:43,460 --> 00:17:46,730
<font color="#E5E5E5">and different protocols came through out</font>

418
00:17:45,049 --> 00:17:49,789
differently for<font color="#CCCCCC"> example if you were</font>

419
00:17:46,730 --> 00:17:53,179
attempting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get the round-trip time</font>

420
00:17:49,789 --> 00:17:55,789
using pink ICMP traffic<font color="#E5E5E5"> you won't be</font>

421
00:17:53,179 --> 00:17:59,059
getting as much<font color="#CCCCCC"> Robo data as using TCP</font>

422
00:17:55,789 --> 00:17:59,870
stack so we<font color="#CCCCCC"> had to work with Pakistani</font>

423
00:17:59,059 --> 00:18:02,570
<font color="#CCCCCC">thing and</font>

424
00:17:59,870 --> 00:18:04,820
<font color="#E5E5E5">that was pretty much</font><font color="#CCCCCC"> something that we</font>

425
00:18:02,570 --> 00:18:06,710
had to automate as well so packet

426
00:18:04,820 --> 00:18:11,559
<font color="#E5E5E5">capturing and extracting information</font>

427
00:18:06,710 --> 00:18:11,559
from<font color="#E5E5E5"> it and that's about round-trip time</font>

428
00:18:12,760 --> 00:18:17,690
here you can see basic statistics of<font color="#CCCCCC"> how</font>

429
00:18:15,260 --> 00:18:20,540
a round-trip time differs this is the

430
00:18:17,690 --> 00:18:23,270
basic ping<font color="#E5E5E5"> request those are the four</font>

431
00:18:20,540 --> 00:18:24,710
criterias<font color="#E5E5E5"> the medium deviation the</font>

432
00:18:23,270 --> 00:18:27,350
maximum value the<font color="#E5E5E5"> average value and</font><font color="#CCCCCC"> the</font>

433
00:18:24,710 --> 00:18:28,970
<font color="#CCCCCC">minimum value as you can see it's quite</font>

434
00:18:27,350 --> 00:18:31,520
a lot<font color="#CCCCCC"> of noise here we can't</font><font color="#E5E5E5"> really</font>

435
00:18:28,970 --> 00:18:34,790
<font color="#CCCCCC">figure out what wobble data is hidden</font>

436
00:18:31,520 --> 00:18:36,980
<font color="#E5E5E5">within it and if we just leave out an</font>

437
00:18:34,790 --> 00:18:39,409
average<font color="#CCCCCC"> value it doesn't work out as</font>

438
00:18:36,980 --> 00:18:42,800
well<font color="#E5E5E5"> because one little spike and we're</font>

439
00:18:39,410 --> 00:18:45,920
all<font color="#E5E5E5"> charts and using</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> beeping which</font>

440
00:18:42,800 --> 00:18:48,710
is not utility<font color="#E5E5E5"> but instead</font><font color="#CCCCCC"> of using ICMP</font>

441
00:18:45,920 --> 00:18:50,530
requests<font color="#CCCCCC"> uses TCP once was also not a</font>

442
00:18:48,710 --> 00:18:54,290
<font color="#E5E5E5">great idea</font><font color="#CCCCCC"> because as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see it's</font>

443
00:18:50,530 --> 00:18:56,300
pretty different from a smooth graph

444
00:18:54,290 --> 00:18:59,629
that would otherwise represent<font color="#CCCCCC"> wobble</font>

445
00:18:56,300 --> 00:19:01,250
data<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> couldn't</font><font color="#E5E5E5"> use any of those</font><font color="#CCCCCC"> we</font>

446
00:18:59,630 --> 00:19:03,500
<font color="#E5E5E5">had</font><font color="#CCCCCC"> reserved</font><font color="#E5E5E5"> something else and packet</font>

447
00:19:01,250 --> 00:19:06,770
<font color="#E5E5E5">capturing was that we</font><font color="#CCCCCC"> had</font><font color="#E5E5E5"> to capture</font>

448
00:19:03,500 --> 00:19:09,770
packets using<font color="#E5E5E5"> wireshark let's say or TCP</font>

449
00:19:06,770 --> 00:19:19,370
dump<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> calculated</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> depending on</font>

450
00:19:09,770 --> 00:19:21,889
<font color="#E5E5E5">the differences and this is how the syn</font>

451
00:19:19,370 --> 00:19:23,780
and a<font color="#CCCCCC"> scape packets</font><font color="#E5E5E5"> look like when we</font>

452
00:19:21,890 --> 00:19:26,179
<font color="#E5E5E5">applied a common</font><font color="#CCCCCC"> furor the graph is a</font>

453
00:19:23,780 --> 00:19:28,250
lot smaller<font color="#E5E5E5"> and this is pretty much data</font>

454
00:19:26,179 --> 00:19:30,740
<font color="#E5E5E5">we could work with</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> addition to the</font>

455
00:19:28,250 --> 00:19:34,460
timing<font color="#CCCCCC"> with</font><font color="#E5E5E5"> PHP functions and averaging</font>

456
00:19:30,740 --> 00:19:38,150
<font color="#E5E5E5">out</font><font color="#CCCCCC"> Webster's response time</font><font color="#E5E5E5"> because yeah</font>

457
00:19:34,460 --> 00:19:41,120
I mean Apache 2.2 is taking a bit more

458
00:19:38,150 --> 00:19:43,130
time than Apache 2.4 of the scale of

459
00:19:41,120 --> 00:19:45,080
nanoseconds<font color="#E5E5E5"> microseconds but this does</font>

460
00:19:43,130 --> 00:19:48,110
matter<font color="#CCCCCC"> to us because</font><font color="#E5E5E5"> we're aiming to</font>

461
00:19:45,080 --> 00:19:50,360
time<font color="#E5E5E5"> this as perfect as possible</font><font color="#CCCCCC"> we</font>

462
00:19:48,110 --> 00:19:52,969
can't afford to lose any microsecond at

463
00:19:50,360 --> 00:19:55,070
all and as you can guess<font color="#E5E5E5"> this induces a</font>

464
00:19:52,970 --> 00:19:57,309
lot of noise which<font color="#CCCCCC"> is otherwise</font><font color="#E5E5E5"> not</font>

465
00:19:55,070 --> 00:19:57,309
preferable

466
00:20:00,760 --> 00:20:05,840
so this is what<font color="#CCCCCC"> a</font><font color="#E5E5E5"> basic packet capturing</font>

467
00:20:03,590 --> 00:20:08,570
looks like<font color="#CCCCCC"> we've filter out most</font><font color="#E5E5E5"> of the</font>

468
00:20:05,840 --> 00:20:12,980
data so<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can represent in a sensible</font>

469
00:20:08,570 --> 00:20:14,450
<font color="#CCCCCC">way the xxx IP is ours</font><font color="#E5E5E5"> this is the hosts</font>

470
00:20:12,980 --> 00:20:17,390
<font color="#E5E5E5">the target</font><font color="#CCCCCC"> yoy</font>

471
00:20:14,450 --> 00:20:20,570
<font color="#CCCCCC">the first thing we do is send an HTTP</font>

472
00:20:17,390 --> 00:20:24,290
request with<font color="#CCCCCC"> sighs the protocol version</font>

473
00:20:20,570 --> 00:20:26,149
request method and this is the current

474
00:20:24,290 --> 00:20:30,139
<font color="#CCCCCC">timestamp that is on our walking</font>

475
00:20:26,150 --> 00:20:33,110
computer this<font color="#E5E5E5"> is the first response the</font>

476
00:20:30,140 --> 00:20:35,450
<font color="#CCCCCC">acknowledgment packet</font><font color="#E5E5E5"> and in the end we</font>

477
00:20:33,110 --> 00:20:37,850
have essentially<font color="#E5E5E5"> the status code there's</font>

478
00:20:35,450 --> 00:20:39,200
<font color="#E5E5E5">actually response from the web server so</font>

479
00:20:37,850 --> 00:20:42,260
as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see there's</font><font color="#E5E5E5"> quite a lot</font><font color="#CCCCCC"> of</font>

480
00:20:39,200 --> 00:20:44,810
difference here as in time differences

481
00:20:42,260 --> 00:20:46,280
and if we were<font color="#CCCCCC"> to measure from time it</font>

482
00:20:44,810 --> 00:20:48,980
<font color="#E5E5E5">took the time</font><font color="#CCCCCC"> it took from the first</font>

483
00:20:46,280 --> 00:20:50,660
request<font color="#E5E5E5"> hours</font><font color="#CCCCCC"> response time of</font><font color="#E5E5E5"> the</font>

484
00:20:48,980 --> 00:20:51,740
server<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> totally different</font><font color="#CCCCCC"> the</font>

485
00:20:50,660 --> 00:20:54,860
<font color="#E5E5E5">response time is actually the</font>

486
00:20:51,740 --> 00:20:57,320
<font color="#CCCCCC">acknowledgment packet and we have to use</font>

487
00:20:54,860 --> 00:20:59,570
this data to<font color="#CCCCCC"> work with and get some</font>

488
00:20:57,320 --> 00:21:02,090
<font color="#E5E5E5">reliable statistics so</font><font color="#CCCCCC"> we can later on</font>

489
00:20:59,570 --> 00:21:04,520
<font color="#E5E5E5">work with our timing attack in order to</font>

490
00:21:02,090 --> 00:21:06,379
<font color="#CCCCCC">derive noise that's centrally the</font>

491
00:21:04,520 --> 00:21:08,750
biggest part<font color="#E5E5E5"> of the entire attack</font><font color="#CCCCCC"> feel</font>

492
00:21:06,380 --> 00:21:11,000
<font color="#CCCCCC">right noise so we can have revival data</font>

493
00:21:08,750 --> 00:21:13,280
<font color="#E5E5E5">and then basically for the server with a</font>

494
00:21:11,000 --> 00:21:14,960
lot<font color="#E5E5E5"> of requests so you can just get</font><font color="#CCCCCC"> a</font>

495
00:21:13,280 --> 00:21:18,460
lot<font color="#E5E5E5"> of metrics and figure out which</font>

496
00:21:14,960 --> 00:21:18,460
<font color="#CCCCCC">character is</font><font color="#E5E5E5"> the next one</font>

497
00:21:22,630 --> 00:21:29,570
so<font color="#E5E5E5"> spikes were another case which gonna</font>

498
00:21:27,409 --> 00:21:32,000
bug out our statistics<font color="#E5E5E5"> you can't always</font>

499
00:21:29,570 --> 00:21:35,149
predict you can almost never predict

500
00:21:32,000 --> 00:21:38,480
<font color="#E5E5E5">whether a spike can occur and how it can</font>

501
00:21:35,149 --> 00:21:40,039
differ from time to time<font color="#E5E5E5"> so imagine</font><font color="#CCCCCC"> that</font>

502
00:21:38,480 --> 00:21:42,529
a process with a higher priority<font color="#E5E5E5"> than</font>

503
00:21:40,039 --> 00:21:44,120
<font color="#E5E5E5">peach peace process is running it can</font>

504
00:21:42,529 --> 00:21:46,639
<font color="#E5E5E5">simply affect it up the scale of</font>

505
00:21:44,120 --> 00:21:48,529
nanoseconds<font color="#E5E5E5"> or microseconds</font><font color="#CCCCCC"> and this</font>

506
00:21:46,639 --> 00:21:50,178
would<font color="#E5E5E5"> pretty much bug our data and</font><font color="#CCCCCC"> we</font>

507
00:21:48,529 --> 00:21:53,659
won't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to get anything out of it</font>

508
00:21:50,179 --> 00:21:57,289
<font color="#CCCCCC">so ever</font><font color="#E5E5E5"> so what we did to reduce</font><font color="#CCCCCC"> that</font>

509
00:21:53,659 --> 00:21:59,870
<font color="#E5E5E5">and actually calculate how long it</font><font color="#CCCCCC"> took</font>

510
00:21:57,289 --> 00:22:02,330
on average<font color="#E5E5E5"> was by mirroring the target</font>

511
00:21:59,870 --> 00:22:05,299
environment<font color="#CCCCCC"> we've essentially done some</font>

512
00:22:02,330 --> 00:22:07,070
reconnaissance<font color="#E5E5E5"> on the target</font><font color="#CCCCCC"> site and we</font>

513
00:22:05,299 --> 00:22:10,639
<font color="#CCCCCC">figure out it's using a certain version</font>

514
00:22:07,070 --> 00:22:14,000
<font color="#E5E5E5">of</font><font color="#CCCCCC"> patch after the minor version 2.4</font><font color="#E5E5E5"> 29</font>

515
00:22:10,639 --> 00:22:17,149
I think so we timed how much<font color="#E5E5E5"> on average</font>

516
00:22:14,000 --> 00:22:19,549
<font color="#E5E5E5">it</font><font color="#CCCCCC"> takes for a patch 2.4</font><font color="#E5E5E5"> point 29 takes</font>

517
00:22:17,149 --> 00:22:22,250
to execute<font color="#CCCCCC"> certain requests</font><font color="#E5E5E5"> we did the</font>

518
00:22:19,549 --> 00:22:25,519
same with PHP<font color="#CCCCCC"> and pretty</font><font color="#E5E5E5"> much anything</font>

519
00:22:22,250 --> 00:22:27,019
that we knew we had information<font color="#E5E5E5"> about so</font>

520
00:22:25,519 --> 00:22:29,980
we could just subtract that from<font color="#E5E5E5"> total</font>

521
00:22:27,019 --> 00:22:32,330
time and that's<font color="#E5E5E5"> just averaging out stuff</font>

522
00:22:29,980 --> 00:22:33,740
so the application profiling the

523
00:22:32,330 --> 00:22:36,918
function timing is<font color="#E5E5E5"> the most important</font>

524
00:22:33,740 --> 00:22:39,080
thing we've done<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> think that pretty</font>

525
00:22:36,919 --> 00:22:41,389
<font color="#E5E5E5">much made our</font><font color="#CCCCCC"> attack successful</font><font color="#E5E5E5"> in this</font>

526
00:22:39,080 --> 00:22:43,279
particular case this<font color="#E5E5E5"> is not usually the</font>

527
00:22:41,389 --> 00:22:45,740
<font color="#CCCCCC">case in most</font><font color="#E5E5E5"> web applications because</font>

528
00:22:43,279 --> 00:22:47,870
what they do is<font color="#CCCCCC"> they hash a value they</font>

529
00:22:45,740 --> 00:22:50,149
store it and when you<font color="#CCCCCC"> input a string it</font>

530
00:22:47,870 --> 00:22:51,678
has to be compares it so this<font color="#E5E5E5"> is totally</font>

531
00:22:50,149 --> 00:22:54,229
<font color="#CCCCCC">different we're not working with string</font>

532
00:22:51,679 --> 00:22:56,269
comparison there<font color="#E5E5E5"> and I'd say they're not</font>

533
00:22:54,230 --> 00:22:58,429
skeptical timing attacks but<font color="#E5E5E5"> in our case</font>

534
00:22:56,269 --> 00:23:02,149
we had a pass the hash vulnerability

535
00:22:58,429 --> 00:23:06,860
<font color="#E5E5E5">which essentially allowed us to provide</font>

536
00:23:02,149 --> 00:23:08,629
<font color="#CCCCCC">a hash instead of a password and this</font>

537
00:23:06,860 --> 00:23:09,979
pretty<font color="#E5E5E5"> much</font><font color="#CCCCCC"> means that we can</font>

538
00:23:08,630 --> 00:23:11,510
authenticate without having the plain

539
00:23:09,980 --> 00:23:14,330
text<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the password we</font><font color="#CCCCCC"> can just provide</font>

540
00:23:11,510 --> 00:23:16,760
<font color="#E5E5E5">a hash couple of developers</font><font color="#CCCCCC"> consider</font>

541
00:23:14,330 --> 00:23:19,549
<font color="#E5E5E5">that a good practice</font><font color="#CCCCCC"> but in general</font>

542
00:23:16,760 --> 00:23:21,470
<font color="#E5E5E5">that's pretty bad idea because yeah I</font>

543
00:23:19,549 --> 00:23:23,720
<font color="#E5E5E5">threw</font><font color="#CCCCCC"> that you transmitting the password</font>

544
00:23:21,470 --> 00:23:27,200
<font color="#E5E5E5">encrypted in this case hashed over the</font>

545
00:23:23,720 --> 00:23:28,760
network<font color="#CCCCCC"> in case somebody sniffs it he'll</font>

546
00:23:27,200 --> 00:23:30,440
<font color="#E5E5E5">be intercepting the hash but at the same</font>

547
00:23:28,760 --> 00:23:32,629
time he'll<font color="#CCCCCC"> be walking with the hash</font><font color="#E5E5E5"> you</font>

548
00:23:30,440 --> 00:23:34,490
wouldn't need<font color="#CCCCCC"> to crack it because our</font>

549
00:23:32,629 --> 00:23:34,899
authentication mechanism is using the

550
00:23:34,490 --> 00:23:40,570
hash

551
00:23:34,900 --> 00:23:41,950
instead of its plaintext value so yeah

552
00:23:40,570 --> 00:23:43,659
we've calculated<font color="#E5E5E5"> a session time for</font>

553
00:23:41,950 --> 00:23:45,370
<font color="#E5E5E5">different</font><font color="#CCCCCC"> environments and we also</font>

554
00:23:43,660 --> 00:23:47,590
calculate the medium<font color="#CCCCCC"> absolute deviation</font>

555
00:23:45,370 --> 00:23:52,000
this<font color="#E5E5E5"> is just something</font><font color="#CCCCCC"> I would refer to</font>

556
00:23:47,590 --> 00:23:53,020
as time differences or<font color="#E5E5E5"> variance and it</font>

557
00:23:52,000 --> 00:23:55,090
turned out to be<font color="#CCCCCC"> a pretty useful</font>

558
00:23:53,020 --> 00:23:57,580
statistic in our attack because it

559
00:23:55,090 --> 00:24:00,909
<font color="#E5E5E5">helped us improve the analysis by I</font>

560
00:23:57,580 --> 00:24:04,350
think<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> 15 30 percent which was</font>

561
00:24:00,910 --> 00:24:04,350
pretty huge of disco

562
00:24:11,970 --> 00:24:16,509
so the target more specifically what we

563
00:24:14,559 --> 00:24:17,980
had is we've extracted some<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font>

564
00:24:16,509 --> 00:24:20,739
<font color="#E5E5E5">functions here so you can visualize that</font>

565
00:24:17,980 --> 00:24:22,600
<font color="#E5E5E5">easier</font><font color="#CCCCCC"> we have the is valid hash</font>

566
00:24:20,739 --> 00:24:25,090
function which just<font color="#E5E5E5"> checks</font><font color="#CCCCCC"> where the</font>

567
00:24:22,600 --> 00:24:27,449
hash is valid or not<font color="#CCCCCC"> so we can know</font>

568
00:24:25,090 --> 00:24:30,309
whether we<font color="#CCCCCC"> should even</font><font color="#E5E5E5"> process it and</font>

569
00:24:27,450 --> 00:24:32,679
what is<font color="#E5E5E5"> basically does is it</font><font color="#CCCCCC"> just</font>

570
00:24:30,309 --> 00:24:35,859
compares the length if the length is<font color="#E5E5E5"> not</font>

571
00:24:32,679 --> 00:24:39,369
equal to<font color="#E5E5E5"> 40 basically not a</font><font color="#CCCCCC"> sh-1 a shave</font>

572
00:24:35,859 --> 00:24:41,379
on hash and if it's not hexadecimal<font color="#E5E5E5"> it's</font>

573
00:24:39,369 --> 00:24:43,689
not a hash eater so if none of<font color="#E5E5E5"> those</font>

574
00:24:41,379 --> 00:24:46,600
<font color="#CCCCCC">both these not confirmed</font><font color="#E5E5E5"> it returns</font>

575
00:24:43,690 --> 00:24:48,220
<font color="#CCCCCC">false otherwise</font><font color="#E5E5E5"> that's true so once we</font>

576
00:24:46,600 --> 00:24:51,428
use that down<font color="#E5E5E5"> here in the verify</font>

577
00:24:48,220 --> 00:24:53,619
password<font color="#CCCCCC"> function we can then proceed</font>

578
00:24:51,429 --> 00:24:55,389
with<font color="#E5E5E5"> the string comparison we compare</font>

579
00:24:53,619 --> 00:24:57,369
the user<font color="#E5E5E5"> password hash with the one that</font>

580
00:24:55,389 --> 00:25:00,459
is stored on<font color="#E5E5E5"> our</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> on database in this</font>

581
00:24:57,369 --> 00:25:02,289
<font color="#E5E5E5">case and this is again using a</font><font color="#CCCCCC"> known</font>

582
00:25:00,460 --> 00:25:04,090
constant<font color="#E5E5E5"> time algorithm as we would be a</font>

583
00:25:02,289 --> 00:25:06,749
is identical function<font color="#E5E5E5"> in the earlier</font>

584
00:25:04,090 --> 00:25:09,908
slides<font color="#E5E5E5"> it's comparing one byte at</font><font color="#CCCCCC"> a time</font>

585
00:25:06,749 --> 00:25:12,039
<font color="#E5E5E5">which is not a good idea it induces some</font>

586
00:25:09,909 --> 00:25:15,009
vulnerability<font color="#E5E5E5"> that is essentially a</font>

587
00:25:12,039 --> 00:25:17,200
timing<font color="#E5E5E5"> channel so this was not</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> good</font>

588
00:25:15,009 --> 00:25:19,840
idea<font color="#E5E5E5"> at all from developers but you know</font>

589
00:25:17,200 --> 00:25:21,609
they've they haven't<font color="#E5E5E5"> figured</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> pass</font>

590
00:25:19,840 --> 00:25:24,789
<font color="#E5E5E5">the hash vulnerabilities are that much</font>

591
00:25:21,609 --> 00:25:26,379
of a concern<font color="#E5E5E5"> and they were more like</font>

592
00:25:24,789 --> 00:25:28,720
relying on performance rather than

593
00:25:26,379 --> 00:25:30,549
<font color="#E5E5E5">security like saying you can't obtain a</font>

594
00:25:28,720 --> 00:25:32,139
hash so basically you can't walk in so

595
00:25:30,549 --> 00:25:35,080
it<font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> matter if I've implemented</font>

596
00:25:32,139 --> 00:25:38,859
the past<font color="#CCCCCC"> cache vulnerability or</font><font color="#E5E5E5"> not but</font>

597
00:25:35,080 --> 00:25:41,199
anyway in this<font color="#E5E5E5"> case all we</font><font color="#CCCCCC"> had was we</font>

598
00:25:38,859 --> 00:25:44,379
needed<font color="#CCCCCC"> to time among how long it takes</font>

599
00:25:41,200 --> 00:25:46,029
for<font color="#CCCCCC"> a hash process one character at a</font>

600
00:25:44,379 --> 00:25:53,769
time<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can essentially guess the</font>

601
00:25:46,029 --> 00:25:55,899
next character etc so this is how the

602
00:25:53,769 --> 00:25:59,619
execution time of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> is valid hash</font>

603
00:25:55,899 --> 00:26:02,320
function works like it is up the scale

604
00:25:59,619 --> 00:26:05,759
of microseconds<font color="#CCCCCC"> this time</font><font color="#E5E5E5"> 5,000</font>

605
00:26:02,320 --> 00:26:08,470
microseconds<font color="#CCCCCC"> in this</font><font color="#E5E5E5"> particular case and</font>

606
00:26:05,759 --> 00:26:10,960
yeah there is not a lot of noise<font color="#CCCCCC"> but</font>

607
00:26:08,470 --> 00:26:14,009
still we would like to<font color="#E5E5E5"> smooth that and</font>

608
00:26:10,960 --> 00:26:16,210
have more reliable<font color="#CCCCCC"> data to work</font><font color="#E5E5E5"> with</font>

609
00:26:14,009 --> 00:26:17,679
<font color="#E5E5E5">because what we've done is done this</font>

610
00:26:16,210 --> 00:26:20,859
<font color="#CCCCCC">particular function how long</font><font color="#E5E5E5"> it takes</font>

611
00:26:17,679 --> 00:26:23,080
under different PHP versions and in

612
00:26:20,859 --> 00:26:24,669
particular the<font color="#CCCCCC"> point was using let's say</font>

613
00:26:23,080 --> 00:26:27,189
<font color="#CCCCCC">B to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> 546</font>

614
00:26:24,670 --> 00:26:28,750
so we had at execution time<font color="#CCCCCC"> subtracted</font>

615
00:26:27,190 --> 00:26:36,940
<font color="#E5E5E5">but at the same time we were</font><font color="#CCCCCC"> calculating</font>

616
00:26:28,750 --> 00:26:39,360
during the<font color="#CCCCCC"> runtime as well and this is</font>

617
00:26:36,940 --> 00:26:42,309
<font color="#CCCCCC">the verified password function how it</font>

618
00:26:39,360 --> 00:26:46,379
resembled<font color="#E5E5E5"> you know a similar graph but</font>

619
00:26:42,309 --> 00:26:49,330
different time<font color="#CCCCCC"> this time is</font><font color="#E5E5E5"> 19,000</font>

620
00:26:46,380 --> 00:26:51,840
<font color="#E5E5E5">microseconds</font><font color="#CCCCCC"> or different and takes a</font>

621
00:26:49,330 --> 00:26:54,280
lot<font color="#CCCCCC"> more</font><font color="#E5E5E5"> time to do that comparison</font>

622
00:26:51,840 --> 00:26:56,290
<font color="#CCCCCC">that's because it does the string</font>

623
00:26:54,280 --> 00:26:59,139
comparison here<font color="#CCCCCC"> in addition to the</font>

624
00:26:56,290 --> 00:27:00,879
<font color="#E5E5E5">verification of the hash so this is</font>

625
00:26:59,140 --> 00:27:03,520
<font color="#E5E5E5">something that we're focusing right now</font>

626
00:27:00,880 --> 00:27:06,460
<font color="#CCCCCC">this is the</font><font color="#E5E5E5"> vulnerability in the system</font>

627
00:27:03,520 --> 00:27:10,030
<font color="#E5E5E5">that we're trying</font><font color="#CCCCCC"> to expose and trying</font>

628
00:27:06,460 --> 00:27:18,610
to<font color="#E5E5E5"> bypass the mechanism by trying one</font>

629
00:27:10,030 --> 00:27:20,620
<font color="#E5E5E5">character at a time</font><font color="#CCCCCC"> but unfortunately</font><font color="#E5E5E5"> in</font>

630
00:27:18,610 --> 00:27:22,899
<font color="#E5E5E5">this case some rough statistics means</font>

631
00:27:20,620 --> 00:27:25,449
that on<font color="#CCCCCC"> average we have</font><font color="#E5E5E5"> sent</font><font color="#CCCCCC"> 14,000</font>

632
00:27:22,900 --> 00:27:28,720
requests and this is pretty much I'd<font color="#CCCCCC"> say</font>

633
00:27:25,450 --> 00:27:33,010
<font color="#E5E5E5">not a huge number</font><font color="#CCCCCC"> for now</font><font color="#E5E5E5"> usually takes</font>

634
00:27:28,720 --> 00:27:35,320
a lot<font color="#CCCCCC"> more like 50,000 400,000 but this</font>

635
00:27:33,010 --> 00:27:37,330
was like<font color="#E5E5E5"> two hops away from us we had</font>

636
00:27:35,320 --> 00:27:39,639
reliable statistics and we also worked

637
00:27:37,330 --> 00:27:42,428
with<font color="#E5E5E5"> the server</font><font color="#CCCCCC"> itself we had accident</font>

638
00:27:39,640 --> 00:27:44,410
server as well<font color="#E5E5E5"> so we had you know the</font>

639
00:27:42,429 --> 00:27:47,050
possibility<font color="#E5E5E5"> time</font><font color="#CCCCCC"> it's particular</font>

640
00:27:44,410 --> 00:27:48,670
response time locally<font color="#E5E5E5"> in this case so</font>

641
00:27:47,050 --> 00:27:51,580
the example<font color="#E5E5E5"> is pretty much exaggerated</font>

642
00:27:48,670 --> 00:27:53,620
just demonstrate the attack but<font color="#E5E5E5"> the main</font>

643
00:27:51,580 --> 00:27:55,960
<font color="#CCCCCC">idea is the hashes 40</font><font color="#E5E5E5"> characters we have</font>

644
00:27:53,620 --> 00:27:57,909
<font color="#E5E5E5">to guess it one character at a</font><font color="#CCCCCC"> time it's</font>

645
00:27:55,960 --> 00:28:01,630
<font color="#E5E5E5">hexadecimal you know</font><font color="#CCCCCC"> that hexadecimal</font>

646
00:27:57,910 --> 00:28:04,240
contains<font color="#E5E5E5"> 16 elements it is based on a</font><font color="#CCCCCC"> to</font>

647
00:28:01,630 --> 00:28:08,590
F 0 to 9<font color="#E5E5E5"> 16 characters that we have to</font>

648
00:28:04,240 --> 00:28:11,260
try<font color="#E5E5E5"> this session means that for every</font>

649
00:28:08,590 --> 00:28:13,540
<font color="#CCCCCC">element</font><font color="#E5E5E5"> we have to send out 14,000</font>

650
00:28:11,260 --> 00:28:16,059
requests and as per every<font color="#CCCCCC"> position as</font>

651
00:28:13,540 --> 00:28:20,830
well which means that on average we have

652
00:28:16,059 --> 00:28:22,330
<font color="#E5E5E5">to send out 224 thousand requests for</font>

653
00:28:20,830 --> 00:28:24,490
<font color="#E5E5E5">each position to guess a single</font>

654
00:28:22,330 --> 00:28:26,470
character and<font color="#CCCCCC"> that's on average</font><font color="#E5E5E5"> this</font>

655
00:28:24,490 --> 00:28:28,300
could<font color="#E5E5E5"> range up</font><font color="#CCCCCC"> to billions</font><font color="#E5E5E5"> of requests</font>

656
00:28:26,470 --> 00:28:31,480
minutes of requests nobody would

657
00:28:28,300 --> 00:28:33,490
naturally allow us to do that and in

658
00:28:31,480 --> 00:28:36,040
total<font color="#E5E5E5"> for a</font><font color="#CCCCCC"> full hash recovery in this</font>

659
00:28:33,490 --> 00:28:37,049
gauge<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this case is the secure hashing</font>

660
00:28:36,040 --> 00:28:41,649
algorithm<font color="#E5E5E5"> one</font>

661
00:28:37,049 --> 00:28:43,599
sha1 it would take all about<font color="#E5E5E5"> nearly</font><font color="#CCCCCC"> nine</font>

662
00:28:41,649 --> 00:28:45,849
million requests for<font color="#E5E5E5"> a foolish recovery</font>

663
00:28:43,599 --> 00:28:48,428
<font color="#E5E5E5">and as I said</font><font color="#CCCCCC"> this is again greatly</font>

664
00:28:45,849 --> 00:28:50,589
exaggerated because otherwise we<font color="#CCCCCC"> would</font>

665
00:28:48,429 --> 00:28:52,929
have billions<font color="#E5E5E5"> of requests sending out</font>

666
00:28:50,589 --> 00:28:55,269
and we are<font color="#E5E5E5"> also expecting a</font><font color="#CCCCCC"> response</font>

667
00:28:52,929 --> 00:28:58,629
from<font color="#E5E5E5"> the server so this is not a thing</font>

668
00:28:55,269 --> 00:29:00,999
<font color="#CCCCCC">to look up to</font><font color="#E5E5E5"> we have consider like a</font>

669
00:28:58,629 --> 00:29:03,309
window of two<font color="#E5E5E5"> hours and in those two</font>

670
00:29:00,999 --> 00:29:05,049
<font color="#CCCCCC">hours we</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to send</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> 9</font><font color="#E5E5E5"> million</font>

671
00:29:03,309 --> 00:29:11,829
requests usually<font color="#CCCCCC"> we won't be allowed to</font>

672
00:29:05,049 --> 00:29:14,408
<font color="#E5E5E5">do that so what if</font><font color="#CCCCCC"> people</font><font color="#E5E5E5"> were wondering</font>

673
00:29:11,829 --> 00:29:17,198
<font color="#E5E5E5">when</font><font color="#CCCCCC"> you did our research</font><font color="#E5E5E5"> online we</font>

674
00:29:14,409 --> 00:29:18,909
<font color="#CCCCCC">prepped a</font><font color="#E5E5E5"> lot of topics and forums</font><font color="#CCCCCC"> a lot</font>

675
00:29:17,199 --> 00:29:20,199
of opinions expressed by<font color="#E5E5E5"> other searches</font>

676
00:29:18,909 --> 00:29:22,659
<font color="#E5E5E5">they were wondering what is the</font>

677
00:29:20,199 --> 00:29:25,779
difference<font color="#E5E5E5"> to</font><font color="#CCCCCC"> brute-forcing is there any</font>

678
00:29:22,659 --> 00:29:27,939
actual usage<font color="#E5E5E5"> of timing attacks well</font>

679
00:29:25,779 --> 00:29:28,389
there is and yeah it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> really quite</font>

680
00:29:27,939 --> 00:29:30,069
<font color="#E5E5E5">simple</font>

681
00:29:28,389 --> 00:29:31,988
<font color="#E5E5E5">because it works for</font><font color="#CCCCCC"> any password no</font>

682
00:29:30,069 --> 00:29:33,459
matter the complexity in this case we're

683
00:29:31,989 --> 00:29:36,189
not cracking<font color="#E5E5E5"> the hash we were covering</font>

684
00:29:33,459 --> 00:29:39,009
the hash not the plain text<font color="#E5E5E5"> behind it so</font>

685
00:29:36,189 --> 00:29:41,169
in this case let's<font color="#E5E5E5"> say that our password</font>

686
00:29:39,009 --> 00:29:43,629
<font color="#E5E5E5">is totally random</font><font color="#CCCCCC"> 20</font><font color="#E5E5E5"> characters of</font>

687
00:29:41,169 --> 00:29:47,709
length<font color="#E5E5E5"> using wide variety of characters</font>

688
00:29:43,629 --> 00:29:49,958
say<font color="#CCCCCC"> our character set is 64 of length</font>

689
00:29:47,709 --> 00:29:52,209
<font color="#E5E5E5">that would take a large amount of time</font>

690
00:29:49,959 --> 00:29:55,359
if<font color="#E5E5E5"> you were to attempt and brute force</font>

691
00:29:52,209 --> 00:29:57,309
<font color="#E5E5E5">it because essentially this</font><font color="#CCCCCC"> roundabouts</font>

692
00:29:55,359 --> 00:29:59,408
you<font color="#E5E5E5"> I know</font>

693
00:29:57,309 --> 00:30:00,908
trillions of requests<font color="#E5E5E5"> trillions of</font>

694
00:29:59,409 --> 00:30:02,219
combinations<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to try each and</font>

695
00:30:00,909 --> 00:30:05,229
<font color="#E5E5E5">every one</font>

696
00:30:02,219 --> 00:30:07,179
so brute forcing is preferable in some

697
00:30:05,229 --> 00:30:08,829
cases<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is if the password</font><font color="#E5E5E5"> is</font>

698
00:30:07,179 --> 00:30:11,169
predictable<font color="#E5E5E5"> consume the password is</font>

699
00:30:08,829 --> 00:30:12,999
<font color="#E5E5E5">whatever or test or test one two three</font>

700
00:30:11,169 --> 00:30:15,909
yeah<font color="#E5E5E5"> brute forcing would be better</font>

701
00:30:12,999 --> 00:30:19,629
because it would simply contain this<font color="#CCCCCC"> in</font>

702
00:30:15,909 --> 00:30:22,239
a couple<font color="#CCCCCC"> of iterations or</font><font color="#E5E5E5"> it would be in</font>

703
00:30:19,629 --> 00:30:24,369
a word list<font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the top passwords so</font>

704
00:30:22,239 --> 00:30:25,569
to say otherwise<font color="#E5E5E5"> we would</font><font color="#CCCCCC"> be trying</font><font color="#E5E5E5"> a</font>

705
00:30:24,369 --> 00:30:29,738
timing attack<font color="#CCCCCC"> get something that is</font>

706
00:30:25,569 --> 00:30:32,489
<font color="#E5E5E5">fairly simple to to guess so yeah I mean</font>

707
00:30:29,739 --> 00:30:34,899
<font color="#E5E5E5">the basic idea is if someone attempts to</font>

708
00:30:32,489 --> 00:30:37,719
target a system like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> should</font>

709
00:30:34,899 --> 00:30:40,178
first perform any<font color="#CCCCCC"> wordlist attack</font><font color="#E5E5E5"> mask</font>

710
00:30:37,719 --> 00:30:42,009
attack<font color="#E5E5E5"> brute force and only then if</font>

711
00:30:40,179 --> 00:30:43,569
nothing<font color="#CCCCCC"> is recovered resorted timing</font>

712
00:30:42,009 --> 00:30:46,320
attacks timing attacks are<font color="#E5E5E5"> not practical</font>

713
00:30:43,569 --> 00:30:49,200
<font color="#E5E5E5">at all</font><font color="#CCCCCC"> in web applications and</font>

714
00:30:46,320 --> 00:30:51,780
the only<font color="#E5E5E5"> difference is</font><font color="#CCCCCC"> that it works</font><font color="#E5E5E5"> on</font>

715
00:30:49,200 --> 00:30:53,160
<font color="#E5E5E5">any user support input in this</font>

716
00:30:51,780 --> 00:30:59,520
<font color="#E5E5E5">particular case the</font><font color="#CCCCCC"> pass the hash</font>

717
00:30:53,160 --> 00:31:02,010
<font color="#E5E5E5">vulnerability so reducing the search</font>

718
00:30:59,520 --> 00:31:04,230
space<font color="#E5E5E5"> essentially means that we have to</font>

719
00:31:02,010 --> 00:31:06,540
reduce<font color="#E5E5E5"> the</font><font color="#CCCCCC"> number of attempts</font><font color="#E5E5E5"> we're</font>

720
00:31:04,230 --> 00:31:08,760
making because<font color="#CCCCCC"> 9 million requests are a</font>

721
00:31:06,540 --> 00:31:12,990
lot and as I said it's exaggerated so

722
00:31:08,760 --> 00:31:15,930
<font color="#CCCCCC">they're billions actually and</font><font color="#E5E5E5"> this is</font>

723
00:31:12,990 --> 00:31:18,390
not a good<font color="#E5E5E5"> idea to usually go</font><font color="#CCCCCC"> out we</font>

724
00:31:15,930 --> 00:31:20,850
have<font color="#CCCCCC"> to do something about this and in</font>

725
00:31:18,390 --> 00:31:23,250
this<font color="#E5E5E5"> case as we said before this</font><font color="#CCCCCC"> is a</font>

726
00:31:20,850 --> 00:31:24,929
pretty weak<font color="#E5E5E5"> authentication mechanism it</font>

727
00:31:23,250 --> 00:31:27,930
was like<font color="#CCCCCC"> intentionally vulnerable so to</font>

728
00:31:24,930 --> 00:31:31,340
say because not a<font color="#E5E5E5"> lot of developers are</font>

729
00:31:27,930 --> 00:31:35,360
using<font color="#CCCCCC"> such mechanisms</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> tenth occasion</font>

730
00:31:31,340 --> 00:31:38,399
for<font color="#E5E5E5"> example in this case we</font><font color="#CCCCCC"> had a simple</font>

731
00:31:35,360 --> 00:31:40,620
<font color="#E5E5E5">message</font><font color="#CCCCCC"> dysfunction I think it was 75</font>

732
00:31:38,400 --> 00:31:43,560
<font color="#E5E5E5">but we</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> on test with</font><font color="#CCCCCC"> h1 worked as</font>

733
00:31:40,620 --> 00:31:47,280
well<font color="#E5E5E5"> and the length is 32 characters we</font>

734
00:31:43,560 --> 00:31:50,100
<font color="#CCCCCC">know that we know how an md5 is bill to</font>

735
00:31:47,280 --> 00:31:51,810
<font color="#E5E5E5">know what it consists of and if we were</font>

736
00:31:50,100 --> 00:31:54,510
to attempt each and every<font color="#E5E5E5"> possible</font>

737
00:31:51,810 --> 00:31:56,580
element<font color="#E5E5E5"> it would take a total</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> nine</font>

738
00:31:54,510 --> 00:31:59,550
<font color="#E5E5E5">million requests it's not a good idea</font><font color="#CCCCCC"> so</font>

739
00:31:56,580 --> 00:32:01,500
what<font color="#E5E5E5"> we do differently is</font><font color="#CCCCCC"> that it wasn't</font>

740
00:31:59,550 --> 00:32:03,930
<font color="#E5E5E5">necessary to recover the</font><font color="#CCCCCC"> fou hash you</font>

741
00:32:01,500 --> 00:32:06,930
know search space is incredibly big and

742
00:32:03,930 --> 00:32:08,580
we wouldn't need<font color="#CCCCCC"> to recover</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> fou hash</font>

743
00:32:06,930 --> 00:32:11,190
<font color="#E5E5E5">because if we have let's say the first</font>

744
00:32:08,580 --> 00:32:13,379
four five six or<font color="#E5E5E5"> ten characters doesn't</font>

745
00:32:11,190 --> 00:32:15,450
<font color="#E5E5E5">matter we could just look them up in</font>

746
00:32:13,380 --> 00:32:17,670
rainbow table<font color="#CCCCCC"> of precomputed hashes</font><font color="#E5E5E5"> and</font>

747
00:32:15,450 --> 00:32:21,750
store plaintext corresponding<font color="#E5E5E5"> to them</font>

748
00:32:17,670 --> 00:32:24,180
and say like 50 or 40 pop out to<font color="#E5E5E5"> be</font>

749
00:32:21,750 --> 00:32:26,370
certain matches we could<font color="#E5E5E5"> just try those</font>

750
00:32:24,180 --> 00:32:29,250
passwords<font color="#E5E5E5"> manually or automated doesn't</font>

751
00:32:26,370 --> 00:32:31,709
matter but<font color="#E5E5E5"> the</font><font color="#CCCCCC"> main idea is that</font><font color="#E5E5E5"> we can</font>

752
00:32:29,250 --> 00:32:35,700
<font color="#CCCCCC">just</font><font color="#E5E5E5"> identify hash by the first several</font>

753
00:32:31,710 --> 00:32:37,770
symbols so that<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of reduce</font><font color="#CCCCCC"> the</font>

754
00:32:35,700 --> 00:32:39,900
search space a bit but considering<font color="#CCCCCC"> that</font>

755
00:32:37,770 --> 00:32:43,470
the hash is in a<font color="#E5E5E5"> rainbow table and</font>

756
00:32:39,900 --> 00:32:46,470
rainbow tables<font color="#E5E5E5"> tend to be quite huge in</font>

757
00:32:43,470 --> 00:32:48,840
terms<font color="#CCCCCC"> of storage</font><font color="#E5E5E5"> we needed like</font><font color="#CCCCCC"> two</font>

758
00:32:46,470 --> 00:32:51,330
terabytes of data for<font color="#CCCCCC"> just basic</font><font color="#E5E5E5"> rainbow</font>

759
00:32:48,840 --> 00:32:55,260
tables<font color="#E5E5E5"> was basically alpha numeric</font>

760
00:32:51,330 --> 00:32:57,330
numeric<font color="#E5E5E5"> of the length of</font><font color="#CCCCCC"> nine and that's</font>

761
00:32:55,260 --> 00:32:59,580
assuming<font color="#E5E5E5"> the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> uses a password one of</font>

762
00:32:57,330 --> 00:33:01,139
those but the main idea<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> that</font>

763
00:32:59,580 --> 00:33:02,820
we've taken this from<font color="#E5E5E5"> an</font><font color="#CCCCCC"> online attack</font>

764
00:33:01,139 --> 00:33:05,158
<font color="#E5E5E5">to an offline attack once we have the</font>

765
00:33:02,820 --> 00:33:08,549
hash we can work with it it doesn't<font color="#E5E5E5"> mean</font>

766
00:33:05,159 --> 00:33:10,529
<font color="#CCCCCC">that we should brute force and</font><font color="#E5E5E5"> expect an</font>

767
00:33:08,549 --> 00:33:12,269
answer<font color="#E5E5E5"> from the server once we retrieve</font>

768
00:33:10,529 --> 00:33:15,470
the<font color="#E5E5E5"> hash we can just do an offline</font>

769
00:33:12,269 --> 00:33:18,539
attack<font color="#E5E5E5"> where we have no limitations and</font>

770
00:33:15,470 --> 00:33:20,340
this<font color="#E5E5E5"> bit of Statistics well first for</font>

771
00:33:18,539 --> 00:33:22,769
first<font color="#CCCCCC"> 10 characters I expect to be</font>

772
00:33:20,340 --> 00:33:24,238
<font color="#E5E5E5">recovered with</font><font color="#CCCCCC"> 2 million requests based</font>

773
00:33:22,769 --> 00:33:26,009
off of this the elements would pick

774
00:33:24,239 --> 00:33:27,690
multiplied by the<font color="#E5E5E5"> number of requests per</font>

775
00:33:26,009 --> 00:33:29,730
<font color="#E5E5E5">element multiplied by the length because</font>

776
00:33:27,690 --> 00:33:34,230
we need to apply<font color="#CCCCCC"> this for each and every</font>

777
00:33:29,730 --> 00:33:36,799
position<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the full length so if</font>

778
00:33:34,230 --> 00:33:40,590
<font color="#E5E5E5">words say recover the first</font><font color="#CCCCCC"> 5</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> 6</font>

779
00:33:36,799 --> 00:33:43,080
characters<font color="#E5E5E5"> this would take a reasonably</font>

780
00:33:40,590 --> 00:33:46,139
wall amount of requests in comparison to

781
00:33:43,080 --> 00:33:50,609
<font color="#E5E5E5">a</font><font color="#CCCCCC"> fou hash recovery and 13 characters</font>

782
00:33:46,139 --> 00:33:52,350
<font color="#E5E5E5">take up to 3 million as 4.5 million so</font>

783
00:33:50,609 --> 00:33:54,239
it's still<font color="#E5E5E5"> better a lot</font><font color="#CCCCCC"> better than 9</font>

784
00:33:52,350 --> 00:33:56,369
million<font color="#E5E5E5"> requests and we can work with</font>

785
00:33:54,239 --> 00:34:00,259
this methodology<font color="#E5E5E5"> for other</font>

786
00:33:56,369 --> 00:34:00,259
vulnerabilities<font color="#CCCCCC"> not only the past hash</font>

787
00:34:03,799 --> 00:34:08,119
so we can switch<font color="#E5E5E5"> to demo now</font>

788
00:34:27,550 --> 00:34:32,919
so we produced<font color="#CCCCCC"> pretty simple</font><font color="#E5E5E5"> and</font>

789
00:34:30,280 --> 00:34:36,669
simplified<font color="#CCCCCC"> to for this</font><font color="#E5E5E5"> particular case</font>

790
00:34:32,918 --> 00:34:39,040
and I<font color="#CCCCCC"> exaggerate</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I focus</font><font color="#E5E5E5"> on this</font>

791
00:34:36,668 --> 00:34:41,379
<font color="#E5E5E5">particular case because we've written</font>

792
00:34:39,040 --> 00:34:43,810
this tool for one<font color="#E5E5E5"> specific case and that</font>

793
00:34:41,380 --> 00:34:45,850
case is the<font color="#E5E5E5"> pastor has vulnerability</font>

794
00:34:43,810 --> 00:34:48,040
<font color="#E5E5E5">that is present and</font><font color="#CCCCCC"> that we've exploited</font>

795
00:34:45,850 --> 00:34:51,100
<font color="#CCCCCC">what is</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually does is you</font><font color="#E5E5E5"> filled</font>

796
00:34:48,040 --> 00:34:53,620
<font color="#CCCCCC">in</font><font color="#E5E5E5"> some data</font><font color="#CCCCCC"> that there is essentially</font>

797
00:34:51,100 --> 00:34:57,009
the URL to target the page<font color="#CCCCCC"> request where</font>

798
00:34:53,620 --> 00:34:59,080
it goes<font color="#CCCCCC"> you also have to specify</font><font color="#E5E5E5"> the</font>

799
00:34:57,010 --> 00:35:01,990
data<font color="#E5E5E5"> that accepts otherwise it</font><font color="#CCCCCC"> won't</font>

800
00:34:59,080 --> 00:35:05,410
know what<font color="#E5E5E5"> to send what to expect and it</font>

801
00:35:01,990 --> 00:35:07,779
does some statistics<font color="#CCCCCC"> it estimates</font><font color="#E5E5E5"> the</font>

802
00:35:05,410 --> 00:35:09,520
transfer<font color="#E5E5E5"> rate so we can know</font><font color="#CCCCCC"> therapod</font>

803
00:35:07,780 --> 00:35:12,880
and how much how<font color="#CCCCCC"> many requests we can</font>

804
00:35:09,520 --> 00:35:14,500
process it also checks for<font color="#E5E5E5"> caching</font>

805
00:35:12,880 --> 00:35:17,590
because<font color="#CCCCCC"> like caching would be a huge</font>

806
00:35:14,500 --> 00:35:19,840
<font color="#E5E5E5">problem if we</font><font color="#CCCCCC"> have any</font><font color="#E5E5E5"> sort of hashing</font>

807
00:35:17,590 --> 00:35:23,110
it would not be a<font color="#E5E5E5"> good</font><font color="#CCCCCC"> idea at</font><font color="#E5E5E5"> all</font>

808
00:35:19,840 --> 00:35:25,900
because caching<font color="#E5E5E5"> just</font><font color="#CCCCCC"> cache our requests</font>

809
00:35:23,110 --> 00:35:27,130
won't be able<font color="#E5E5E5"> to get a reliable data</font><font color="#CCCCCC"> we</font>

810
00:35:25,900 --> 00:35:29,310
won't be communicating<font color="#CCCCCC"> with</font><font color="#E5E5E5"> the server</font>

811
00:35:27,130 --> 00:35:31,750
will just be receiving a cache copy<font color="#E5E5E5"> and</font>

812
00:35:29,310 --> 00:35:34,509
in this case<font color="#E5E5E5"> they detected</font><font color="#CCCCCC"> model flight</font>

813
00:35:31,750 --> 00:35:38,140
but<font color="#E5E5E5"> mother flight is not a problem</font>

814
00:35:34,510 --> 00:35:39,970
it's caching statical resources and it's

815
00:35:38,140 --> 00:35:41,560
not<font color="#E5E5E5"> something that can borrow us what</font>

816
00:35:39,970 --> 00:35:44,620
<font color="#CCCCCC">we're working for is dynamic requests</font>

817
00:35:41,560 --> 00:35:51,270
and dynamic requests only<font color="#E5E5E5"> and next is</font>

818
00:35:44,620 --> 00:35:54,279
checking<font color="#CCCCCC"> for that's the</font><font color="#E5E5E5"> timing check</font>

819
00:35:51,270 --> 00:35:57,280
yeah it's pretty<font color="#CCCCCC"> corded first thing is a</font>

820
00:35:54,280 --> 00:35:59,080
<font color="#CCCCCC">caching it checks for any rate limiting</font>

821
00:35:57,280 --> 00:36:02,980
which is essentially a web<font color="#CCCCCC"> application</font>

822
00:35:59,080 --> 00:36:04,900
firewall<font color="#CCCCCC"> on</font><font color="#E5E5E5"> IDs and IPS and after it</font>

823
00:36:02,980 --> 00:36:06,940
filters<font color="#E5E5E5"> that out after</font><font color="#CCCCCC"> refines whether</font>

824
00:36:04,900 --> 00:36:09,640
there's an application firewall in front

825
00:36:06,940 --> 00:36:10,990
it continues on<font color="#E5E5E5"> obviously if there is</font>

826
00:36:09,640 --> 00:36:13,750
one it wouldn't<font color="#E5E5E5"> continue because</font>

827
00:36:10,990 --> 00:36:16,750
there'll be<font color="#E5E5E5"> a huge</font><font color="#CCCCCC"> problem with data</font>

828
00:36:13,750 --> 00:36:18,640
<font color="#CCCCCC">we're working it it also does automated</font>

829
00:36:16,750 --> 00:36:19,960
calculation the round-trip time<font color="#CCCCCC"> using</font>

830
00:36:18,640 --> 00:36:22,540
the difference<font color="#CCCCCC"> between the synchronized</font>

831
00:36:19,960 --> 00:36:25,270
<font color="#E5E5E5">and</font><font color="#CCCCCC"> acknowledgment packets and wasn't</font>

832
00:36:22,540 --> 00:36:27,250
calculates<font color="#CCCCCC"> that as well only then can we</font>

833
00:36:25,270 --> 00:36:29,980
have<font color="#E5E5E5"> the timing attack executed</font><font color="#CCCCCC"> because</font>

834
00:36:27,250 --> 00:36:31,540
we need to have<font color="#E5E5E5"> some data to</font><font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out</font>

835
00:36:29,980 --> 00:36:36,000
we<font color="#CCCCCC"> need to subtract that data so</font><font color="#E5E5E5"> you can</font>

836
00:36:31,540 --> 00:36:36,000
<font color="#E5E5E5">get a rough</font><font color="#CCCCCC"> estimate of what</font><font color="#E5E5E5"> is going on</font>

837
00:36:42,910 --> 00:36:47,690
at my tech tip of seconds<font color="#CCCCCC"> the</font><font color="#E5E5E5"> 3/4 view</font>

838
00:36:45,740 --> 00:36:49,850
because a<font color="#CCCCCC"> real-time attack will take a</font>

839
00:36:47,690 --> 00:36:53,180
lot more<font color="#E5E5E5"> resources and we won't be able</font>

840
00:36:49,850 --> 00:36:55,250
<font color="#CCCCCC">to execute</font><font color="#E5E5E5"> it here on stage especially</font>

841
00:36:53,180 --> 00:36:56,930
<font color="#CCCCCC">over the Wi-Fi and considering that</font>

842
00:36:55,250 --> 00:37:00,020
we've done this<font color="#E5E5E5"> over three hops away</font>

843
00:36:56,930 --> 00:37:02,600
<font color="#CCCCCC">here it might have been</font><font color="#E5E5E5"> depending on</font><font color="#CCCCCC"> the</font>

844
00:37:00,020 --> 00:37:07,070
routers but could<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> seven this</font>

845
00:37:02,600 --> 00:37:09,830
<font color="#E5E5E5">matter so calculated round-trip time</font><font color="#CCCCCC"> its</font>

846
00:37:07,070 --> 00:37:11,060
error data is<font color="#CCCCCC"> Robert's table so the</font>

847
00:37:09,830 --> 00:37:12,620
<font color="#E5E5E5">round-trip time it</font><font color="#CCCCCC"> does several</font>

848
00:37:11,060 --> 00:37:15,740
<font color="#E5E5E5">measurements of round-trip time using</font>

849
00:37:12,620 --> 00:37:16,730
<font color="#E5E5E5">different methods not only the</font>

850
00:37:15,740 --> 00:37:19,430
synchronous and<font color="#E5E5E5"> acknowledgment packet</font>

851
00:37:16,730 --> 00:37:23,120
differences<font color="#E5E5E5"> it is also ICMP traffic as</font>

852
00:37:19,430 --> 00:37:25,480
we mentioned earlier<font color="#E5E5E5"> and</font><font color="#CCCCCC"> all of our</font>

853
00:37:23,120 --> 00:37:29,330
<font color="#E5E5E5">information that is retrieved from</font>

854
00:37:25,480 --> 00:37:31,190
different sources so it<font color="#CCCCCC"> calculated</font>

855
00:37:29,330 --> 00:37:33,290
round-trip time it said how<font color="#E5E5E5"> many hops</font>

856
00:37:31,190 --> 00:37:35,000
<font color="#CCCCCC">away</font><font color="#E5E5E5"> we are and what is the</font><font color="#CCCCCC"> Webster's</font>

857
00:37:33,290 --> 00:37:37,460
response time<font color="#E5E5E5"> it says all of this</font>

858
00:37:35,000 --> 00:37:41,200
information<font color="#E5E5E5"> in his memory so it knows</font>

859
00:37:37,460 --> 00:37:44,360
what to subtract when<font color="#CCCCCC"> subtracted</font><font color="#E5E5E5"> and</font>

860
00:37:41,200 --> 00:37:47,569
what we<font color="#E5E5E5"> are</font><font color="#CCCCCC"> doing now is just it prompts</font>

861
00:37:44,360 --> 00:37:50,510
you to you<font color="#E5E5E5"> know whether you want to use</font>

862
00:37:47,570 --> 00:37:54,470
<font color="#CCCCCC">statistics from this</font><font color="#E5E5E5"> particular version</font>

863
00:37:50,510 --> 00:37:57,590
of<font color="#E5E5E5"> Apache 2.4 29 because we had</font><font color="#CCCCCC"> walk of</font>

864
00:37:54,470 --> 00:38:00,529
<font color="#CCCCCC">statistics loaded</font><font color="#E5E5E5"> prior</font><font color="#CCCCCC"> to this attack</font>

865
00:37:57,590 --> 00:38:02,090
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is the average time it takes</font><font color="#E5E5E5"> for</font>

866
00:38:00,530 --> 00:38:07,010
this particular version<font color="#E5E5E5"> of patch to</font>

867
00:38:02,090 --> 00:38:08,870
process requests and yeah we've decided

868
00:38:07,010 --> 00:38:13,580
to<font color="#CCCCCC"> use the statistics to reduce the</font>

869
00:38:08,870 --> 00:38:15,380
noise does some basic<font color="#E5E5E5"> request statistics</font>

870
00:38:13,580 --> 00:38:18,410
<font color="#CCCCCC">how</font><font color="#E5E5E5"> many requests on average it would</font>

871
00:38:15,380 --> 00:38:22,040
take for<font color="#CCCCCC"> us to execute</font><font color="#E5E5E5"> the attack in</font>

872
00:38:18,410 --> 00:38:25,129
<font color="#CCCCCC">this case it's 47,000 requests which is</font>

873
00:38:22,040 --> 00:38:25,820
you know<font color="#E5E5E5"> per element</font><font color="#CCCCCC"> it's not it's</font><font color="#E5E5E5"> not a</font>

874
00:38:25,130 --> 00:38:28,100
whole number

875
00:38:25,820 --> 00:38:30,830
<font color="#E5E5E5">it's pretty huge number and we have</font><font color="#CCCCCC"> to</font>

876
00:38:28,100 --> 00:38:32,630
<font color="#CCCCCC">multiply that</font><font color="#E5E5E5"> by the character set</font>

877
00:38:30,830 --> 00:38:36,200
length which is<font color="#CCCCCC"> 60 in this case and then</font>

878
00:38:32,630 --> 00:38:37,700
multiply all<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> by 32 if we were to</font>

879
00:38:36,200 --> 00:38:41,120
check and amplify for example<font color="#E5E5E5"> first</font>

880
00:38:37,700 --> 00:38:43,129
check on sha-1<font color="#E5E5E5"> it would be 40 and</font>

881
00:38:41,120 --> 00:38:46,069
imagine if there was a<font color="#E5E5E5"> South it would</font>

882
00:38:43,130 --> 00:38:48,680
pretty much<font color="#CCCCCC"> rendered attack useless so</font>

883
00:38:46,070 --> 00:38:50,600
in this particular<font color="#E5E5E5"> case it already</font>

884
00:38:48,680 --> 00:38:51,710
<font color="#E5E5E5">started so there's</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of</font>

885
00:38:50,600 --> 00:38:54,140
<font color="#E5E5E5">statistics</font><font color="#CCCCCC"> before that</font>

886
00:38:51,710 --> 00:38:57,410
as well it said that on average attack

887
00:38:54,140 --> 00:39:01,279
<font color="#E5E5E5">might take about 37 minutes depending on</font>

888
00:38:57,410 --> 00:39:03,830
transfer rate but this<font color="#E5E5E5"> is not much</font>

889
00:39:01,280 --> 00:39:05,660
accurate<font color="#CCCCCC"> I mean it's just roundabout</font>

890
00:39:03,830 --> 00:39:07,640
time it would take<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we can't</font>

891
00:39:05,660 --> 00:39:10,580
<font color="#E5E5E5">really calculate I want you to take and</font>

892
00:39:07,640 --> 00:39:14,440
what it does now is sense<font color="#E5E5E5"> samples of</font>

893
00:39:10,580 --> 00:39:17,270
data<font color="#CCCCCC"> forty-seven</font><font color="#E5E5E5"> thousand requests and</font>

894
00:39:14,440 --> 00:39:21,380
this is done usually in<font color="#E5E5E5"> a</font><font color="#CCCCCC"> time frame of</font>

895
00:39:17,270 --> 00:39:24,080
say a minute or so<font color="#CCCCCC"> so it checks each and</font>

896
00:39:21,380 --> 00:39:26,720
every single<font color="#E5E5E5"> character</font><font color="#CCCCCC"> to see how long</font>

897
00:39:24,080 --> 00:39:29,119
it<font color="#CCCCCC"> takes it does some statistics based</font>

898
00:39:26,720 --> 00:39:30,230
on that and we're essentially checking

899
00:39:29,119 --> 00:39:31,280
each and every character we're

900
00:39:30,230 --> 00:39:33,530
calculating the medium absolute

901
00:39:31,280 --> 00:39:36,920
<font color="#E5E5E5">deviation here</font><font color="#CCCCCC"> we're also</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> to</font>

902
00:39:33,530 --> 00:39:39,589
subtract it<font color="#E5E5E5"> to know how far from</font><font color="#CCCCCC"> the</font>

903
00:39:36,920 --> 00:39:42,740
<font color="#E5E5E5">Walker difference that is the deviation</font>

904
00:39:39,589 --> 00:39:45,259
<font color="#CCCCCC">and we have variance</font><font color="#E5E5E5"> this is something</font>

905
00:39:42,740 --> 00:39:47,779
<font color="#CCCCCC">that we've been using to to how</font><font color="#E5E5E5"> variable</font>

906
00:39:45,260 --> 00:39:50,720
is this<font color="#E5E5E5"> result from the different ones</font>

907
00:39:47,780 --> 00:39:52,640
<font color="#E5E5E5">from the previous ones</font><font color="#CCCCCC"> so the first</font><font color="#E5E5E5"> few</font>

908
00:39:50,720 --> 00:39:54,799
ones are not really<font color="#CCCCCC"> Robbo as an</font>

909
00:39:52,640 --> 00:39:56,420
information source<font color="#E5E5E5"> obviously if we</font>

910
00:39:54,800 --> 00:39:59,119
retrieve<font color="#E5E5E5"> more information it would be</font>

911
00:39:56,420 --> 00:40:05,210
pretty clear that<font color="#E5E5E5"> the tolerance that the</font>

912
00:39:59,119 --> 00:40:07,250
variance<font color="#E5E5E5"> is storable and</font><font color="#CCCCCC"> this is the</font>

913
00:40:05,210 --> 00:40:09,369
confidence level something<font color="#E5E5E5"> that we have</font>

914
00:40:07,250 --> 00:40:12,820
<font color="#E5E5E5">invented again something</font><font color="#CCCCCC"> that says how</font>

915
00:40:09,369 --> 00:40:16,580
confident is the<font color="#CCCCCC"> two about this data</font>

916
00:40:12,820 --> 00:40:17,930
we've also<font color="#E5E5E5"> worked for identifying spikes</font>

917
00:40:16,580 --> 00:40:19,339
<font color="#E5E5E5">between the two but that was a bit</font>

918
00:40:17,930 --> 00:40:22,160
<font color="#CCCCCC">tricky so we couldn't implement it</font>

919
00:40:19,339 --> 00:40:26,599
eventually<font color="#CCCCCC"> and right now is checking up</font>

920
00:40:22,160 --> 00:40:29,029
to the length of<font color="#CCCCCC"> five because</font><font color="#E5E5E5"> we might</font>

921
00:40:26,599 --> 00:40:30,890
<font color="#CCCCCC">have a</font><font color="#E5E5E5"> full hash recovery but we've</font>

922
00:40:29,030 --> 00:40:34,130
talked<font color="#CCCCCC"> about that it takes a lot more</font>

923
00:40:30,890 --> 00:40:37,368
<font color="#E5E5E5">time to process and</font><font color="#CCCCCC"> a lot more</font><font color="#E5E5E5"> requests</font>

924
00:40:34,130 --> 00:40:40,010
so in this case we were prompted and we

925
00:40:37,369 --> 00:40:41,990
chose<font color="#E5E5E5"> to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> five positions</font><font color="#CCCCCC"> two time</font>

926
00:40:40,010 --> 00:40:43,880
five positions<font color="#E5E5E5"> and then woke</font><font color="#CCCCCC"> up those</font>

927
00:40:41,990 --> 00:40:46,129
first five characters<font color="#E5E5E5"> in any rainbow</font>

928
00:40:43,880 --> 00:40:48,460
<font color="#E5E5E5">table so we can just find hashes that</font>

929
00:40:46,130 --> 00:40:50,480
<font color="#E5E5E5">start with</font><font color="#CCCCCC"> this particular pattern</font><font color="#E5E5E5"> and</font>

930
00:40:48,460 --> 00:40:53,780
we could basically make an assumption

931
00:40:50,480 --> 00:40:54,920
that<font color="#E5E5E5"> maybe one of those hashes that are</font>

932
00:40:53,780 --> 00:40:57,800
<font color="#CCCCCC">contained in rainbow</font><font color="#E5E5E5"> table that matched</font>

933
00:40:54,920 --> 00:41:00,490
<font color="#CCCCCC">or our users</font><font color="#E5E5E5"> hash essentially the</font>

934
00:40:57,800 --> 00:41:00,490
password<font color="#E5E5E5"> adventure</font>

935
00:41:02,119 --> 00:41:07,109
so this goes long times actually<font color="#E5E5E5"> 47</font>

936
00:41:05,790 --> 00:41:09,000
minutes won't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> watching The Hobbit</font>

937
00:41:07,109 --> 00:41:10,859
<font color="#CCCCCC">because there</font><font color="#E5E5E5"> is pretty much the same</font>

938
00:41:09,000 --> 00:41:15,240
<font color="#E5E5E5">you've seen the same over and over again</font>

939
00:41:10,859 --> 00:41:17,730
<font color="#E5E5E5">eventually</font><font color="#CCCCCC"> it ends up calculating</font><font color="#E5E5E5"> the</font>

940
00:41:15,240 --> 00:41:19,140
<font color="#E5E5E5">first five characters and I said we can</font>

941
00:41:17,730 --> 00:41:22,650
look them up in a<font color="#E5E5E5"> rainbow table</font>

942
00:41:19,140 --> 00:41:27,660
<font color="#E5E5E5">essentially find hash so this case we</font>

943
00:41:22,650 --> 00:41:30,510
can just<font color="#E5E5E5"> skip the</font><font color="#CCCCCC"> video and see if</font><font color="#E5E5E5"> I can</font>

944
00:41:27,660 --> 00:41:32,399
do<font color="#CCCCCC"> it from here</font><font color="#E5E5E5"> we're colleagues from</font>

945
00:41:30,510 --> 00:41:33,510
<font color="#CCCCCC">deaf camp can just switch the video</font><font color="#E5E5E5"> back</font>

946
00:41:32,400 --> 00:41:36,200
to<font color="#CCCCCC"> Pradesh can we go back to</font>

947
00:41:33,510 --> 00:41:36,200
presentation please

948
00:42:03,370 --> 00:42:09,640
so first thing<font color="#CCCCCC"> to talk</font><font color="#E5E5E5"> about after demo</font>

949
00:42:07,030 --> 00:42:12,070
is what<font color="#E5E5E5"> the consequences can be because</font>

950
00:42:09,640 --> 00:42:14,740
a lot<font color="#E5E5E5"> of people overlook</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> type of</font>

951
00:42:12,070 --> 00:42:17,590
tax but it's not that unusual to see

952
00:42:14,740 --> 00:42:19,779
them in the wild<font color="#CCCCCC"> especially</font><font color="#E5E5E5"> if the</font>

953
00:42:17,590 --> 00:42:22,330
attack is<font color="#E5E5E5"> targeted against a</font><font color="#CCCCCC"> specific</font>

954
00:42:19,780 --> 00:42:23,920
system<font color="#E5E5E5"> and we've also done that we've</font>

955
00:42:22,330 --> 00:42:25,390
attempted<font color="#E5E5E5"> that to WordPress but</font>

956
00:42:23,920 --> 00:42:27,490
<font color="#E5E5E5">WordPress doesn't use the same</font>

957
00:42:25,390 --> 00:42:30,009
<font color="#E5E5E5">methodology it doesn't do pass</font><font color="#CCCCCC"> the hash</font>

958
00:42:27,490 --> 00:42:32,319
you inputted a password and<font color="#E5E5E5"> it hashes it</font>

959
00:42:30,010 --> 00:42:33,670
on the back end<font color="#CCCCCC"> but this isn't</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> pie</font>

960
00:42:32,320 --> 00:42:35,170
<font color="#CCCCCC">only to pass the hash when abilities</font>

961
00:42:33,670 --> 00:42:37,450
<font color="#CCCCCC">it's also</font><font color="#E5E5E5"> applies to a</font><font color="#CCCCCC"> wide range of</font>

962
00:42:35,170 --> 00:42:40,000
vulnerabilities that<font color="#E5E5E5"> could induce a</font>

963
00:42:37,450 --> 00:42:41,980
<font color="#CCCCCC">timing channel</font><font color="#E5E5E5"> because most developers</font>

964
00:42:40,000 --> 00:42:46,300
are concerned<font color="#CCCCCC"> about performance more</font>

965
00:42:41,980 --> 00:42:48,730
<font color="#E5E5E5">than the security aspect and essentially</font>

966
00:42:46,300 --> 00:42:51,310
they don't even don't even consider

967
00:42:48,730 --> 00:42:53,230
timing attacks<font color="#E5E5E5"> practical at all to a</font>

968
00:42:51,310 --> 00:42:55,270
<font color="#E5E5E5">certain extent</font><font color="#CCCCCC"> they're not</font><font color="#E5E5E5"> practical but</font>

969
00:42:53,230 --> 00:42:57,130
in<font color="#E5E5E5"> specific cases they could</font><font color="#CCCCCC"> turn</font><font color="#E5E5E5"> out to</font>

970
00:42:55,270 --> 00:42:59,950
<font color="#CCCCCC">be quite more practical than</font><font color="#E5E5E5"> a simple</font>

971
00:42:57,130 --> 00:43:02,770
brute-force attack and the consequences

972
00:42:59,950 --> 00:43:05,589
<font color="#E5E5E5">can range from a complete</font><font color="#CCCCCC"> take over the</font>

973
00:43:02,770 --> 00:43:07,360
server<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that could be</font>

974
00:43:05,590 --> 00:43:11,380
<font color="#CCCCCC">the final goal it could be achieved</font>

975
00:43:07,360 --> 00:43:13,660
<font color="#E5E5E5">although</font><font color="#CCCCCC"> in rare cases and</font><font color="#E5E5E5"> consider that</font>

976
00:43:11,380 --> 00:43:16,930
<font color="#CCCCCC">that kit has been</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> for a long</font>

977
00:43:13,660 --> 00:43:19,480
<font color="#CCCCCC">time this</font><font color="#E5E5E5"> also induces a lot of resource</font>

978
00:43:16,930 --> 00:43:21,370
exhaustion<font color="#E5E5E5"> on the server if cost the</font>

979
00:43:19,480 --> 00:43:22,870
operations are performed<font color="#E5E5E5"> an example the</font>

980
00:43:21,370 --> 00:43:25,359
<font color="#CCCCCC">identification system might do some</font>

981
00:43:22,870 --> 00:43:27,759
crypto on the back end in addition to

982
00:43:25,360 --> 00:43:29,410
the comparison<font color="#E5E5E5"> and this takes some</font><font color="#CCCCCC"> cpu</font>

983
00:43:27,760 --> 00:43:32,500
time essentially<font color="#CCCCCC"> for sending out</font>

984
00:43:29,410 --> 00:43:34,120
thousands of requests it would just sum

985
00:43:32,500 --> 00:43:35,530
up<font color="#E5E5E5"> and it would exhaust a lot of</font>

986
00:43:34,120 --> 00:43:37,690
<font color="#CCCCCC">resource</font><font color="#E5E5E5"> if you're even a lot of</font><font color="#CCCCCC"> that</font>

987
00:43:35,530 --> 00:43:40,030
code<font color="#E5E5E5"> Linux protects against this for</font>

988
00:43:37,690 --> 00:43:42,040
example<font color="#CCCCCC"> and</font><font color="#E5E5E5"> quadrants available in</font>

989
00:43:40,030 --> 00:43:44,740
<font color="#E5E5E5">almost every cPanel there are almost</font><font color="#CCCCCC"> any</font>

990
00:43:42,040 --> 00:43:46,690
shared hosting environment<font color="#E5E5E5"> and it's</font>

991
00:43:44,740 --> 00:43:49,660
basically something<font color="#E5E5E5"> that says you're</font>

992
00:43:46,690 --> 00:43:52,600
limited<font color="#CCCCCC"> to those resources you can't use</font>

993
00:43:49,660 --> 00:43:54,549
any more CPU<font color="#CCCCCC"> times than this so this</font>

994
00:43:52,600 --> 00:43:57,580
would pretty<font color="#CCCCCC"> much you know</font><font color="#E5E5E5"> wouldn't</font><font color="#CCCCCC"> be a</font>

995
00:43:54,550 --> 00:43:59,950
<font color="#E5E5E5">problem in this case but in general</font><font color="#CCCCCC"> it</font>

996
00:43:57,580 --> 00:44:00,880
<font color="#CCCCCC">could</font><font color="#E5E5E5"> to not be a problem over</font><font color="#CCCCCC"> an</font>

997
00:43:59,950 --> 00:44:03,240
extended<font color="#E5E5E5"> period of time</font>

998
00:44:00,880 --> 00:44:05,470
if there is no limitation at all

999
00:44:03,240 --> 00:44:09,270
<font color="#E5E5E5">regarding the</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> of requests we send</font>

1000
00:44:05,470 --> 00:44:09,270
<font color="#E5E5E5">this could turn out to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> a problem</font>

1001
00:44:10,510 --> 00:44:14,380
and the basic solution timing<font color="#E5E5E5"> attacks</font>

1002
00:44:12,610 --> 00:44:16,870
we've read a lot<font color="#E5E5E5"> of papers online</font>

1003
00:44:14,380 --> 00:44:18,820
<font color="#E5E5E5">something that a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> people express</font>

1004
00:44:16,870 --> 00:44:21,370
an opinion is that you<font color="#E5E5E5"> should just</font>

1005
00:44:18,820 --> 00:44:23,410
<font color="#E5E5E5">compare each character doesn't matter if</font>

1006
00:44:21,370 --> 00:44:25,180
it's right or<font color="#CCCCCC"> wrong you compare the next</font>

1007
00:44:23,410 --> 00:44:28,899
one as well<font color="#CCCCCC"> so it's a constant time</font>

1008
00:44:25,180 --> 00:44:31,919
function and it's<font color="#E5E5E5"> pretty much applies</font>

1009
00:44:28,900 --> 00:44:34,390
mostly to security<font color="#CCCCCC"> critical operations</font>

1010
00:44:31,920 --> 00:44:36,550
<font color="#CCCCCC">go on such example is the authentication</font>

1011
00:44:34,390 --> 00:44:38,020
again as I say because<font color="#E5E5E5"> this is something</font>

1012
00:44:36,550 --> 00:44:40,120
that handles our data this is something

1013
00:44:38,020 --> 00:44:41,680
that handles the authentication of a

1014
00:44:40,120 --> 00:44:44,650
user which<font color="#CCCCCC"> is essentially almost</font>

1015
00:44:41,680 --> 00:44:46,210
<font color="#CCCCCC">everything in today's systems</font><font color="#E5E5E5"> and of</font>

1016
00:44:44,650 --> 00:44:49,150
course if you have a rate limiting

1017
00:44:46,210 --> 00:44:50,920
<font color="#E5E5E5">policy if you have caching if you have a</font>

1018
00:44:49,150 --> 00:44:53,020
reverse proxy<font color="#E5E5E5"> pretty much renders our</font>

1019
00:44:50,920 --> 00:44:55,570
attack useless<font color="#E5E5E5"> so</font><font color="#CCCCCC"> even the</font><font color="#E5E5E5"> smallest</font>

1020
00:44:53,020 --> 00:44:58,000
things can<font color="#E5E5E5"> hinder the attack consider</font>

1021
00:44:55,570 --> 00:45:01,570
<font color="#E5E5E5">that the user is using up cash and PHP</font>

1022
00:44:58,000 --> 00:45:03,400
<font color="#CCCCCC">that</font><font color="#E5E5E5"> would might as well just ruin the</font>

1023
00:45:01,570 --> 00:45:05,260
attack<font color="#E5E5E5"> totally and we will be</font><font color="#CCCCCC"> working</font>

1024
00:45:03,400 --> 00:45:08,560
with<font color="#E5E5E5"> quite useless data from then on</font>

1025
00:45:05,260 --> 00:45:11,350
which is not<font color="#CCCCCC"> a</font><font color="#E5E5E5"> good idea at all but yeah</font>

1026
00:45:08,560 --> 00:45:13,090
<font color="#E5E5E5">we would be wasting just on yeah so</font>

1027
00:45:11,350 --> 00:45:15,610
enforcing a<font color="#CCCCCC"> very limiting</font><font color="#E5E5E5"> policy saying</font>

1028
00:45:13,090 --> 00:45:18,430
<font color="#E5E5E5">that this IP address is allowed a couple</font>

1029
00:45:15,610 --> 00:45:21,370
of requests<font color="#E5E5E5"> per second and requests per</font>

1030
00:45:18,430 --> 00:45:22,960
second would<font color="#CCCCCC"> be a good</font><font color="#E5E5E5"> idea and the</font>

1031
00:45:21,370 --> 00:45:27,759
usage of constant time algorithms is

1032
00:45:22,960 --> 00:45:30,400
really the key aspect<font color="#E5E5E5"> if we rely on just</font>

1033
00:45:27,760 --> 00:45:32,230
<font color="#E5E5E5">third factors like caching and</font><font color="#CCCCCC"> rate</font>

1034
00:45:30,400 --> 00:45:35,470
limiting yeah this would most probably

1035
00:45:32,230 --> 00:45:37,840
<font color="#E5E5E5">limit the attacks but it</font><font color="#CCCCCC"> would they</font>

1036
00:45:35,470 --> 00:45:42,700
<font color="#E5E5E5">would still be</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> no matter how</font>

1037
00:45:37,840 --> 00:45:44,620
small and yeah<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of developers who</font>

1038
00:45:42,700 --> 00:45:46,810
are<font color="#E5E5E5"> also relying on</font><font color="#CCCCCC"> network jitter we</font>

1039
00:45:44,620 --> 00:45:48,790
thought up a couple<font color="#E5E5E5"> of github</font>

1040
00:45:46,810 --> 00:45:51,370
repositories<font color="#CCCCCC"> when there were issues I</font>

1041
00:45:48,790 --> 00:45:52,720
have been submitted from<font color="#E5E5E5"> the community</font>

1042
00:45:51,370 --> 00:45:54,279
they were saying that you know there's

1043
00:45:52,720 --> 00:45:56,319
<font color="#E5E5E5">time attack here and developer was</font>

1044
00:45:54,280 --> 00:45:57,880
simply replying that<font color="#E5E5E5"> there is a lot</font><font color="#CCCCCC"> of</font>

1045
00:45:56,320 --> 00:46:00,700
<font color="#E5E5E5">noise so they</font><font color="#CCCCCC"> won't be</font><font color="#E5E5E5"> able to export it</font>

1046
00:45:57,880 --> 00:46:02,980
eventually<font color="#CCCCCC"> this was a case of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> system</font>

1047
00:46:00,700 --> 00:46:06,370
<font color="#CCCCCC">Pyrrhic the statistics</font><font color="#E5E5E5"> system it was</font>

1048
00:46:02,980 --> 00:46:08,230
<font color="#E5E5E5">actually exploited in the wild and it</font>

1049
00:46:06,370 --> 00:46:10,540
turned out that<font color="#E5E5E5"> this is not something</font>

1050
00:46:08,230 --> 00:46:12,700
<font color="#CCCCCC">that you should generate a Y on national</font>

1051
00:46:10,540 --> 00:46:14,529
jitter<font color="#CCCCCC"> yes it does</font><font color="#E5E5E5"> stop you but as we</font>

1052
00:46:12,700 --> 00:46:17,410
saw<font color="#CCCCCC"> earlier on we can figure that out</font><font color="#E5E5E5"> as</font>

1053
00:46:14,530 --> 00:46:20,170
well<font color="#E5E5E5"> and come up with a rate limiting</font>

1054
00:46:17,410 --> 00:46:22,660
<font color="#E5E5E5">policy a caching server something that</font>

1055
00:46:20,170 --> 00:46:23,800
you not sure naturally have<font color="#E5E5E5"> anyway this</font>

1056
00:46:22,660 --> 00:46:25,960
was pretty much rendered

1057
00:46:23,800 --> 00:46:29,790
the attacks totally useless<font color="#CCCCCC"> we won't be</font>

1058
00:46:25,960 --> 00:46:29,790
<font color="#E5E5E5">able to utilize in any way possible</font>

1059
00:46:30,150 --> 00:46:36,580
last but<font color="#CCCCCC"> not least what give some kudos</font>

1060
00:46:32,860 --> 00:46:40,090
to these<font color="#E5E5E5"> two researches the second one</font>

1061
00:46:36,580 --> 00:46:43,000
of<font color="#E5E5E5"> Patrick Brady is spirit technical and</font>

1062
00:46:40,090 --> 00:46:47,410
it's something that<font color="#E5E5E5"> sparked the idea of</font>

1063
00:46:43,000 --> 00:46:50,860
timing attacks<font color="#CCCCCC"> back in 2010 when</font><font color="#E5E5E5"> it was</font>

1064
00:46:47,410 --> 00:46:52,270
<font color="#CCCCCC">possible to time it up</font><font color="#E5E5E5"> to nanoseconds</font><font color="#CCCCCC"> we</font>

1065
00:46:50,860 --> 00:46:54,580
couldn't time it up to<font color="#CCCCCC"> nanoseconds we</font>

1066
00:46:52,270 --> 00:46:56,170
managed only<font color="#CCCCCC"> to microseconds</font><font color="#E5E5E5"> but it</font>

1067
00:46:54,580 --> 00:46:58,509
would be a more<font color="#CCCCCC"> or more</font><font color="#E5E5E5"> accurate if we</font>

1068
00:46:56,170 --> 00:47:01,119
could you know go down to nanoseconds

1069
00:46:58,510 --> 00:47:05,050
unfortunately<font color="#E5E5E5"> Dallas we didn't find</font><font color="#CCCCCC"> it</font>

1070
00:47:01,119 --> 00:47:06,490
possible in our<font color="#E5E5E5"> case and the first one</font>

1071
00:47:05,050 --> 00:47:08,230
<font color="#CCCCCC">the opportunities and limits of remote</font>

1072
00:47:06,490 --> 00:47:11,439
timing attacks is something that also

1073
00:47:08,230 --> 00:47:14,130
<font color="#E5E5E5">had a lot of news about</font><font color="#CCCCCC"> it a lot of</font>

1074
00:47:11,440 --> 00:47:17,830
<font color="#CCCCCC">people were talking</font><font color="#E5E5E5"> about this of course</font>

1075
00:47:14,130 --> 00:47:19,510
<font color="#CCCCCC">the</font><font color="#E5E5E5"> mail down and spectra exploits</font><font color="#CCCCCC"> we're</font>

1076
00:47:17,830 --> 00:47:21,400
essentially<font color="#E5E5E5"> using a side channel</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a</font>

1077
00:47:19,510 --> 00:47:23,380
bit different<font color="#CCCCCC"> from</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> I should rather</font>

1078
00:47:21,400 --> 00:47:26,080
<font color="#CCCCCC">say totally different this one but again</font>

1079
00:47:23,380 --> 00:47:27,790
it was a timing<font color="#CCCCCC"> attack and we all know</font>

1080
00:47:26,080 --> 00:47:30,250
what a consequence of<font color="#E5E5E5"> meltdown</font><font color="#CCCCCC"> inspector</font>

1081
00:47:27,790 --> 00:47:32,950
were they<font color="#E5E5E5"> weren't patched immediately</font>

1082
00:47:30,250 --> 00:47:37,390
and yeah this was a<font color="#CCCCCC"> pretty different</font>

1083
00:47:32,950 --> 00:47:38,680
story<font color="#E5E5E5"> so that's about it</font><font color="#CCCCCC"> if anyone has</font>

1084
00:47:37,390 --> 00:47:41,379
any<font color="#CCCCCC"> questions I'm guessing there will be</font>

1085
00:47:38,680 --> 00:48:00,240
a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> questions asked now's the</font><font color="#CCCCCC"> time</font>

1086
00:47:41,380 --> 00:48:03,670
<font color="#CCCCCC">to thank</font><font color="#E5E5E5"> you just a quick question</font>

1087
00:48:00,240 --> 00:48:06,100
some people suggest to use delays

1088
00:48:03,670 --> 00:48:07,510
randomly days what's your opinion on

1089
00:48:06,100 --> 00:48:09,700
<font color="#E5E5E5">them no run the place are</font><font color="#CCCCCC"> not a good</font>

1090
00:48:07,510 --> 00:48:11,410
idea<font color="#E5E5E5"> because you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> still average out</font>

1091
00:48:09,700 --> 00:48:13,419
<font color="#CCCCCC">the noise you can still have ajar how</font>

1092
00:48:11,410 --> 00:48:15,850
<font color="#E5E5E5">long it takes for example you can send</font>

1093
00:48:13,420 --> 00:48:17,740
out<font color="#E5E5E5"> let's say</font><font color="#CCCCCC"> 12 requests when you</font>

1094
00:48:15,850 --> 00:48:19,810
request<font color="#CCCCCC"> 100 requests</font><font color="#E5E5E5"> depends on the data</font>

1095
00:48:17,740 --> 00:48:22,118
and how much<font color="#E5E5E5"> noise</font><font color="#CCCCCC"> induced and you can</font>

1096
00:48:19,810 --> 00:48:25,600
still average<font color="#E5E5E5"> that</font><font color="#CCCCCC"> out you can just</font><font color="#E5E5E5"> you</font>

1097
00:48:22,119 --> 00:48:27,310
<font color="#CCCCCC">can also predict the output</font><font color="#E5E5E5"> into entropy</font>

1098
00:48:25,600 --> 00:48:28,630
<font color="#CCCCCC">as to wall but that</font><font color="#E5E5E5"> depends</font><font color="#CCCCCC"> on the</font>

1099
00:48:27,310 --> 00:48:30,820
source if you're using<font color="#CCCCCC"> deff few random</font>

1100
00:48:28,630 --> 00:48:32,140
<font color="#CCCCCC">for example Linux that</font><font color="#E5E5E5"> won't be possible</font>

1101
00:48:30,820 --> 00:48:33,609
it will still hinder the attack to a

1102
00:48:32,140 --> 00:48:34,930
great deal but it would still<font color="#CCCCCC"> be</font>

1103
00:48:33,609 --> 00:48:38,250
possible from ability<font color="#E5E5E5"> will still be</font>

1104
00:48:34,930 --> 00:48:38,250
there thank you

1105
00:48:41,470 --> 00:48:51,859
second question<font color="#E5E5E5"> hi how can</font><font color="#CCCCCC"> you find the</font>

1106
00:48:46,940 --> 00:48:55,670
<font color="#CCCCCC">best the</font><font color="#E5E5E5"> best timing do we mean by the</font>

1107
00:48:51,859 --> 00:48:59,480
best time<font color="#CCCCCC"> so you will set the request</font>

1108
00:48:55,670 --> 00:49:02,869
and delay<font color="#CCCCCC"> up for a few seconds</font><font color="#E5E5E5"> or</font><font color="#CCCCCC"> maybe</font>

1109
00:48:59,480 --> 00:49:05,630
<font color="#CCCCCC">a</font><font color="#E5E5E5"> few minutes but do you have a method</font>

1110
00:49:02,869 --> 00:49:08,300
<font color="#CCCCCC">to find the</font><font color="#E5E5E5"> dupe the one that took the</font>

1111
00:49:05,630 --> 00:49:10,300
<font color="#E5E5E5">longest yes yeah</font><font color="#CCCCCC"> that essentially the</font>

1112
00:49:08,300 --> 00:49:13,820
character that<font color="#E5E5E5"> is considered to</font><font color="#CCCCCC"> be valid</font>

1113
00:49:10,300 --> 00:49:15,980
<font color="#CCCCCC">in other words but what we've done</font><font color="#E5E5E5"> is</font>

1114
00:49:13,820 --> 00:49:17,390
that<font color="#E5E5E5"> we've sent a 47 thousand requests</font>

1115
00:49:15,980 --> 00:49:19,910
for<font color="#E5E5E5"> each</font><font color="#CCCCCC"> in every position each and</font>

1116
00:49:17,390 --> 00:49:21,828
every character<font color="#E5E5E5"> which position and on</font>

1117
00:49:19,910 --> 00:49:24,259
average<font color="#CCCCCC"> depending on how long it took</font>

1118
00:49:21,829 --> 00:49:27,890
for each and every single we<font color="#E5E5E5"> managed to</font>

1119
00:49:24,260 --> 00:49:29,930
<font color="#E5E5E5">just establish the basic</font><font color="#CCCCCC"> disco analysis</font>

1120
00:49:27,890 --> 00:49:33,710
when you could say that<font color="#E5E5E5"> this one took</font>

1121
00:49:29,930 --> 00:49:36,078
say 100<font color="#CCCCCC"> nanosecond 100 microseconds more</font>

1122
00:49:33,710 --> 00:49:38,180
than the previous<font color="#CCCCCC"> ones was</font><font color="#E5E5E5"> basically the</font>

1123
00:49:36,079 --> 00:49:40,579
one that has the<font color="#CCCCCC"> most</font><font color="#E5E5E5"> execution time but</font>

1124
00:49:38,180 --> 00:49:44,259
we do that by sending<font color="#E5E5E5"> a ton of requests</font>

1125
00:49:40,579 --> 00:49:50,000
in<font color="#E5E5E5"> this case for</font><font color="#CCCCCC"> 7,000 per position and</font>

1126
00:49:44,260 --> 00:49:52,790
maybe make you vulnerable<font color="#E5E5E5"> we didn't</font>

1127
00:49:50,000 --> 00:49:56,750
create some noise<font color="#E5E5E5"> when</font><font color="#CCCCCC"> you do that when</font>

1128
00:49:52,790 --> 00:50:00,470
we send out 7,000<font color="#E5E5E5"> requests or</font><font color="#CCCCCC"> 47,000 no</font>

1129
00:49:56,750 --> 00:50:02,450
<font color="#E5E5E5">well that would depend as I said the</font>

1130
00:50:00,470 --> 00:50:04,879
statistics is greatly<font color="#E5E5E5"> affected</font><font color="#CCCCCC"> by almost</font>

1131
00:50:02,450 --> 00:50:07,490
any factor out there so we can't<font color="#E5E5E5"> really</font>

1132
00:50:04,880 --> 00:50:09,800
work<font color="#E5E5E5"> with rapid at all the time as a</font>

1133
00:50:07,490 --> 00:50:11,930
matter<font color="#CCCCCC"> of fact this particular</font><font color="#E5E5E5"> recording</font>

1134
00:50:09,800 --> 00:50:13,780
of the test<font color="#E5E5E5"> script was done</font><font color="#CCCCCC"> after</font><font color="#E5E5E5"> the</font>

1135
00:50:11,930 --> 00:50:16,160
fourth or sixth attempt<font color="#E5E5E5"> I don't know</font>

1136
00:50:13,780 --> 00:50:19,010
<font color="#CCCCCC">until we could get this working</font>

1137
00:50:16,160 --> 00:50:21,859
especially<font color="#E5E5E5"> so yeah it is possible</font><font color="#CCCCCC"> quite</font>

1138
00:50:19,010 --> 00:50:24,400
possibly yes thank you we<font color="#E5E5E5"> have our next</font>

1139
00:50:21,859 --> 00:50:24,400
<font color="#CCCCCC">question</font>

1140
00:50:25,540 --> 00:50:35,860
you you have<font color="#E5E5E5"> done here okay</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so most</font>

1141
00:50:30,040 --> 00:50:39,759
of the CMS<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> we using to reset</font>

1142
00:50:35,860 --> 00:50:42,610
the<font color="#CCCCCC"> password</font><font color="#E5E5E5"> using linked with</font><font color="#CCCCCC"> Heche and</font>

1143
00:50:39,760 --> 00:50:46,120
there is no limit on<font color="#E5E5E5"> how many requests</font>

1144
00:50:42,610 --> 00:50:48,280
you can<font color="#E5E5E5"> do on the reset password link</font><font color="#CCCCCC"> so</font>

1145
00:50:46,120 --> 00:50:50,859
<font color="#E5E5E5">isn't the best way not to attack the</font>

1146
00:50:48,280 --> 00:50:53,320
password<font color="#E5E5E5"> but the reset</font><font color="#CCCCCC"> password</font><font color="#E5E5E5"> Heche</font>

1147
00:50:50,860 --> 00:50:56,740
<font color="#E5E5E5">yeah</font><font color="#CCCCCC"> but in this</font><font color="#E5E5E5"> case we wouldn't know</font>

1148
00:50:53,320 --> 00:50:59,170
which<font color="#CCCCCC"> hash</font><font color="#E5E5E5"> we're selling in order to do</font>

1149
00:50:56,740 --> 00:51:00,660
that we need<font color="#E5E5E5"> to have a dependent</font><font color="#CCCCCC"> system</font>

1150
00:50:59,170 --> 00:51:04,270
but what they usually do<font color="#CCCCCC"> is they</font>

1151
00:51:00,660 --> 00:51:06,129
whenever<font color="#CCCCCC"> pass request is being sent</font><font color="#E5E5E5"> they</font>

1152
00:51:04,270 --> 00:51:07,780
generate a hash<font color="#E5E5E5"> for the specific user</font>

1153
00:51:06,130 --> 00:51:10,450
and you have to guess the<font color="#E5E5E5"> hash for this</font>

1154
00:51:07,780 --> 00:51:12,580
user<font color="#E5E5E5"> but consider that a system is more</font>

1155
00:51:10,450 --> 00:51:15,370
<font color="#E5E5E5">scale website is widely used</font><font color="#CCCCCC"> consider</font>

1156
00:51:12,580 --> 00:51:17,620
<font color="#E5E5E5">that a couple</font><font color="#CCCCCC"> of users</font><font color="#E5E5E5"> have requested a</font>

1157
00:51:15,370 --> 00:51:20,680
forgotten past at the same time<font color="#E5E5E5"> similar</font>

1158
00:51:17,620 --> 00:51:22,660
<font color="#CCCCCC">time</font><font color="#E5E5E5"> frame we would recover a different</font>

1159
00:51:20,680 --> 00:51:25,350
hash possibly<font color="#E5E5E5"> we wouldn't know which</font>

1160
00:51:22,660 --> 00:51:27,790
hash would<font color="#E5E5E5"> be for this particular user</font>

1161
00:51:25,350 --> 00:51:30,190
so it's kind of a logical issue here

1162
00:51:27,790 --> 00:51:32,170
<font color="#CCCCCC">because we</font><font color="#E5E5E5"> wouldn't know how to match up</font>

1163
00:51:30,190 --> 00:51:33,430
this hash to the specific user<font color="#E5E5E5"> you might</font>

1164
00:51:32,170 --> 00:51:37,210
<font color="#E5E5E5">as</font><font color="#CCCCCC"> well reset the password to another</font>

1165
00:51:33,430 --> 00:51:46,750
user<font color="#E5E5E5"> in this case next question was</font>

1166
00:51:37,210 --> 00:51:49,600
somewhere here hello as far as<font color="#CCCCCC"> I know in</font>

1167
00:51:46,750 --> 00:51:51,850
these days<font color="#E5E5E5"> web applications sold</font>

1168
00:51:49,600 --> 00:51:54,730
password hashes before storing<font color="#E5E5E5"> them in</font>

1169
00:51:51,850 --> 00:51:57,490
databases<font color="#CCCCCC"> so</font><font color="#E5E5E5"> isn't that actually the</font>

1170
00:51:54,730 --> 00:52:00,790
best solution about around<font color="#E5E5E5"> the timing</font>

1171
00:51:57,490 --> 00:52:02,890
attacks<font color="#E5E5E5"> well it it wouldn't make this</font>

1172
00:52:00,790 --> 00:52:04,750
possible certainly<font color="#E5E5E5"> but in this example</font>

1173
00:52:02,890 --> 00:52:07,839
the developers had no<font color="#CCCCCC"> understanding of</font>

1174
00:52:04,750 --> 00:52:10,990
security at<font color="#CCCCCC"> all</font><font color="#E5E5E5"> and the idea was to</font><font color="#CCCCCC"> just</font>

1175
00:52:07,840 --> 00:52:13,420
present<font color="#CCCCCC"> a simplified version of tech but</font>

1176
00:52:10,990 --> 00:52:16,359
if you using<font color="#E5E5E5"> bcrypt for example if using</font>

1177
00:52:13,420 --> 00:52:18,700
<font color="#CCCCCC">argon to does matter as long</font><font color="#E5E5E5"> as it has a</font>

1178
00:52:16,360 --> 00:52:21,070
hash<font color="#E5E5E5"> as well as long as</font><font color="#CCCCCC"> it has a pepper</font>

1179
00:52:18,700 --> 00:52:23,259
or salt<font color="#E5E5E5"> that's pretty much run or attack</font>

1180
00:52:21,070 --> 00:52:25,030
<font color="#CCCCCC">useless whatsoever</font><font color="#E5E5E5"> yeah okay now this is</font>

1181
00:52:23,260 --> 00:52:26,860
<font color="#CCCCCC">also if you have a</font><font color="#E5E5E5"> past</font><font color="#CCCCCC"> hashman</font><font color="#E5E5E5"> ability</font>

1182
00:52:25,030 --> 00:52:28,780
which is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> something you have in</font>

1183
00:52:26,860 --> 00:52:30,940
<font color="#E5E5E5">almost any application out there</font><font color="#CCCCCC"> so it's</font>

1184
00:52:28,780 --> 00:52:33,130
<font color="#E5E5E5">not very practical at all</font><font color="#CCCCCC"> atomic attack</font>

1185
00:52:30,940 --> 00:52:35,530
yes a<font color="#E5E5E5"> South would totally render it</font>

1186
00:52:33,130 --> 00:52:38,050
useless<font color="#E5E5E5"> unless</font><font color="#CCCCCC"> the Souda static</font><font color="#E5E5E5"> I mean</font>

1187
00:52:35,530 --> 00:52:38,970
if we have one<font color="#CCCCCC"> single statics out for</font>

1188
00:52:38,050 --> 00:52:44,950
each and every hash

1189
00:52:38,970 --> 00:52:47,759
thank you thank you and is there anyone

1190
00:52:44,950 --> 00:52:52,390
<font color="#E5E5E5">else</font><font color="#CCCCCC"> or will this be our last question</font>

1191
00:52:47,760 --> 00:52:54,789
hi<font color="#CCCCCC"> actually I have two questions if you</font>

1192
00:52:52,390 --> 00:52:57,190
may how often do you use<font color="#E5E5E5"> timing attacks</font>

1193
00:52:54,789 --> 00:53:00,250
in your fantastic engagements and

1194
00:52:57,190 --> 00:53:03,160
secondly what's the best result that<font color="#CCCCCC"> you</font>

1195
00:53:00,250 --> 00:53:04,809
could<font color="#E5E5E5"> get well we don't naturally use</font>

1196
00:53:03,160 --> 00:53:07,538
timing attacks not penetration<font color="#E5E5E5"> tests</font>

1197
00:53:04,809 --> 00:53:08,380
because we kind<font color="#E5E5E5"> of focused on more</font><font color="#CCCCCC"> rabo</font>

1198
00:53:07,539 --> 00:53:10,539
vulnerabilities

1199
00:53:08,380 --> 00:53:13,180
<font color="#E5E5E5">timing attacks are something that is</font>

1200
00:53:10,539 --> 00:53:15,460
something<font color="#E5E5E5"> of wasps resort so to say if</font>

1201
00:53:13,180 --> 00:53:18,069
we<font color="#E5E5E5"> haven't found any</font><font color="#CCCCCC"> other vulnerability</font>

1202
00:53:15,460 --> 00:53:19,630
or<font color="#E5E5E5"> if</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> specific to</font><font color="#E5E5E5"> the</font>

1203
00:53:18,069 --> 00:53:20,980
application<font color="#CCCCCC"> that</font><font color="#E5E5E5"> could be explained and</font>

1204
00:53:19,630 --> 00:53:23,440
<font color="#E5E5E5">we have in mind that it could be</font>

1205
00:53:20,980 --> 00:53:24,940
<font color="#E5E5E5">exploited we will attempt that but it</font>

1206
00:53:23,440 --> 00:53:27,700
<font color="#E5E5E5">just requires a lot of research what of</font>

1207
00:53:24,940 --> 00:53:29,619
resources<font color="#E5E5E5"> we spend all about let's say a</font>

1208
00:53:27,700 --> 00:53:31,118
month<font color="#E5E5E5"> and a half on this specific</font><font color="#CCCCCC"> case</font>

1209
00:53:29,619 --> 00:53:34,029
and<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> practical at all</font><font color="#E5E5E5"> as we also</font>

1210
00:53:31,119 --> 00:53:36,579
so they're<font color="#CCCCCC"> pretty</font><font color="#E5E5E5"> much not practical and</font>

1211
00:53:34,029 --> 00:53:39,029
<font color="#E5E5E5">this isn't something that</font><font color="#CCCCCC"> we do on</font>

1212
00:53:36,579 --> 00:53:41,859
natural base as penetration<font color="#CCCCCC"> testers</font>

1213
00:53:39,029 --> 00:53:45,190
obviously if a client<font color="#CCCCCC"> asks for white box</font>

1214
00:53:41,859 --> 00:53:46,598
testing and if he<font color="#E5E5E5"> asks us</font><font color="#CCCCCC"> to test for</font>

1215
00:53:45,190 --> 00:53:49,720
timing<font color="#E5E5E5"> attacks in particular we</font><font color="#CCCCCC"> will do</font>

1216
00:53:46,599 --> 00:53:51,880
that yeah<font color="#CCCCCC"> but not</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> general case no not</font>

1217
00:53:49,720 --> 00:53:54,700
in<font color="#E5E5E5"> general case the best result month</font>

1218
00:53:51,880 --> 00:53:57,069
timing<font color="#CCCCCC"> attacks is just to make string</font>

1219
00:53:54,700 --> 00:53:57,700
comparison constant time in critical

1220
00:53:57,069 --> 00:54:00,400
operations

1221
00:53:57,700 --> 00:54:02,319
I'm not saying make the entire<font color="#E5E5E5"> code you</font>

1222
00:54:00,400 --> 00:54:04,630
know<font color="#E5E5E5"> constant</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> because that would be</font>

1223
00:54:02,319 --> 00:54:06,069
<font color="#CCCCCC">totally</font><font color="#E5E5E5"> nonsense but the idea is for</font>

1224
00:54:04,630 --> 00:54:07,839
<font color="#E5E5E5">security critical operations for</font>

1225
00:54:06,069 --> 00:54:09,788
identification<font color="#CCCCCC"> in cryptography</font><font color="#E5E5E5"> make it a</font>

1226
00:54:07,839 --> 00:54:12,578
constant time algorithm so<font color="#E5E5E5"> it takes the</font>

1227
00:54:09,789 --> 00:54:15,220
same<font color="#CCCCCC"> amount</font><font color="#E5E5E5"> of time for</font><font color="#CCCCCC"> each and every</font>

1228
00:54:12,579 --> 00:54:18,700
input that<font color="#E5E5E5"> would be the best thing to do</font>

1229
00:54:15,220 --> 00:54:20,680
of course<font color="#CCCCCC"> you could also bypass</font><font color="#E5E5E5"> that but</font>

1230
00:54:18,700 --> 00:54:23,259
this is<font color="#E5E5E5"> something totally from the</font>

1231
00:54:20,680 --> 00:54:25,868
theoretical<font color="#CCCCCC"> field</font><font color="#E5E5E5"> depending on how much</font>

1232
00:54:23,259 --> 00:54:27,579
CPU it takes you could still time it but

1233
00:54:25,869 --> 00:54:28,710
I was totally<font color="#CCCCCC"> off the charts I don't</font>

1234
00:54:27,579 --> 00:54:31,229
<font color="#E5E5E5">think that is even possible nowadays</font>

1235
00:54:28,710 --> 00:54:33,789
<font color="#CCCCCC">cool thank you</font>

1236
00:54:31,229 --> 00:54:36,489
thank you if we have<font color="#E5E5E5"> any other</font><font color="#CCCCCC"> questions</font>

1237
00:54:33,789 --> 00:54:39,910
<font color="#E5E5E5">otherwise we will</font><font color="#CCCCCC"> be finishing here</font>

1238
00:54:36,489 --> 00:54:42,100
<font color="#E5E5E5">thank you</font><font color="#CCCCCC"> so much Vaughn thank you</font>

1239
00:54:39,910 --> 00:54:42,100
[Applause]

