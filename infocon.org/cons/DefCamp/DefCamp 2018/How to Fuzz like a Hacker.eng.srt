1
00:00:00,060 --> 00:00:04,560
good afternoon everyone<font color="#E5E5E5"> my</font><font color="#CCCCCC"> name is</font>

2
00:00:03,629 --> 00:00:07,379
<font color="#CCCCCC">marilyn sworsky</font>

3
00:00:04,560 --> 00:00:10,260
I work for face rec company as a

4
00:00:07,379 --> 00:00:13,920
security<font color="#E5E5E5"> researcher</font><font color="#CCCCCC"> and I would like</font><font color="#E5E5E5"> to</font>

5
00:00:10,260 --> 00:00:17,160
<font color="#CCCCCC">speak a</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> about AFL which is</font>

6
00:00:13,920 --> 00:00:23,580
not probably surprised<font color="#E5E5E5"> and how we can do</font>

7
00:00:17,160 --> 00:00:27,800
<font color="#E5E5E5">it better okay</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> few words about me</font>

8
00:00:23,580 --> 00:00:27,799
security<font color="#E5E5E5"> enthusiast security researcher</font>

9
00:00:28,820 --> 00:00:33,140
<font color="#E5E5E5">okay</font>

10
00:00:30,420 --> 00:00:35,489
<font color="#CCCCCC">fan of</font><font color="#E5E5E5"> hacker and the Matrix movie and</font>

11
00:00:33,140 --> 00:00:41,040
also I have a two kids who can<font color="#E5E5E5"> even see</font>

12
00:00:35,489 --> 00:00:43,860
here<font color="#CCCCCC"> okay so let's talk a little bit</font>

13
00:00:41,040 --> 00:00:46,500
<font color="#CCCCCC">about what IFL</font><font color="#E5E5E5"> is it's</font><font color="#CCCCCC"> an American</font>

14
00:00:43,860 --> 00:00:48,450
<font color="#E5E5E5">facing a lot if</font><font color="#CCCCCC"> you don't know what</font>

15
00:00:46,500 --> 00:00:51,960
<font color="#E5E5E5">American president laughs maybe it's</font>

16
00:00:48,450 --> 00:00:56,969
<font color="#CCCCCC">around conference so this is American</font>

17
00:00:51,960 --> 00:01:00,870
<font color="#E5E5E5">facing lab and also</font><font color="#CCCCCC"> a very good</font><font color="#E5E5E5"> tool</font>

18
00:00:56,969 --> 00:01:05,460
written by<font color="#CCCCCC"> Mia</font><font color="#E5E5E5"> was the left key I'll</font>

19
00:01:00,870 --> 00:01:07,048
come<font color="#E5E5E5"> too many years ago so I just copied</font>

20
00:01:05,459 --> 00:01:09,809
the<font color="#E5E5E5"> definition so it's a security</font>

21
00:01:07,049 --> 00:01:12,240
oriented father<font color="#E5E5E5"> that employs a novel</font>

22
00:01:09,810 --> 00:01:14,090
type of<font color="#CCCCCC"> compiled instrumentation and</font>

23
00:01:12,240 --> 00:01:17,100
generic algorithms to automate

24
00:01:14,090 --> 00:01:21,470
everything including discovery

25
00:01:17,100 --> 00:01:25,560
interesting test cases and strategy<font color="#E5E5E5"> to</font>

26
00:01:21,470 --> 00:01:27,780
choose another one<font color="#CCCCCC"> I did small research</font>

27
00:01:25,560 --> 00:01:28,350
because I was interesting<font color="#E5E5E5"> when it was</font>

28
00:01:27,780 --> 00:01:30,540
created

29
00:01:28,350 --> 00:01:34,169
<font color="#E5E5E5">I</font><font color="#CCCCCC"> I'm thinking</font><font color="#E5E5E5"> that it was always here</font>

30
00:01:30,540 --> 00:01:36,810
<font color="#CCCCCC">but it was not</font><font color="#E5E5E5"> so as an ancestor of it</font>

31
00:01:34,170 --> 00:01:39,990
it was<font color="#CCCCCC"> funny the father</font><font color="#E5E5E5"> released in 2007</font>

32
00:01:36,810 --> 00:01:44,700
then the first release of<font color="#CCCCCC"> AFL happened</font>

33
00:01:39,990 --> 00:01:48,990
in 2013<font color="#E5E5E5"> and since that time there were</font>

34
00:01:44,700 --> 00:01:53,280
230 releases<font color="#CCCCCC"> I counted</font><font color="#E5E5E5"> so it's literally</font>

35
00:01:48,990 --> 00:01:58,619
to 235<font color="#E5E5E5"> you can download on I'll come to</font>

36
00:01:53,280 --> 00:02:00,299
plan H so how it<font color="#E5E5E5"> works in</font><font color="#CCCCCC"> general</font><font color="#E5E5E5"> so</font>

37
00:01:58,619 --> 00:02:03,090
everything starts from a corpus we need

38
00:02:00,299 --> 00:02:06,210
to define corpus initial test case

39
00:02:03,090 --> 00:02:08,950
however<font color="#E5E5E5"> you call it then AFL takes those</font>

40
00:02:06,210 --> 00:02:11,500
<font color="#E5E5E5">and run through the application</font>

41
00:02:08,949 --> 00:02:14,349
application<font color="#CCCCCC"> create</font><font color="#E5E5E5"> some feed</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> it</font>

42
00:02:11,500 --> 00:02:17,260
<font color="#E5E5E5">creates some feedback and based on the</font>

43
00:02:14,349 --> 00:02:19,720
feedback<font color="#E5E5E5"> the initial files are</font><font color="#CCCCCC"> chosen</font>

44
00:02:17,260 --> 00:02:22,989
for a<font color="#CCCCCC"> forum mutation and for</font><font color="#E5E5E5"> further</font>

45
00:02:19,720 --> 00:02:25,840
<font color="#CCCCCC">phasing</font><font color="#E5E5E5"> and after every every mutation</font>

46
00:02:22,989 --> 00:02:27,910
that<font color="#CCCCCC"> IFL does there's kind of feedback</font>

47
00:02:25,840 --> 00:02:30,340
if this was interesting<font color="#CCCCCC"> if there was a</font>

48
00:02:27,910 --> 00:02:33,250
crash<font color="#E5E5E5"> or we should just skip this test</font>

49
00:02:30,340 --> 00:02:38,890
case<font color="#E5E5E5"> this is general overview what would</font>

50
00:02:33,250 --> 00:02:42,090
<font color="#CCCCCC">I</font><font color="#E5E5E5"> FL does and how it works okay so how</font>

51
00:02:38,890 --> 00:02:45,760
we<font color="#CCCCCC"> can speed up this</font><font color="#E5E5E5"> process</font>

52
00:02:42,090 --> 00:02:47,829
well there are seven<font color="#E5E5E5"> of different areas</font>

53
00:02:45,760 --> 00:02:51,578
when we can make it better

54
00:02:47,829 --> 00:02:53,890
<font color="#E5E5E5">and have</font><font color="#CCCCCC"> an achieved better</font><font color="#E5E5E5"> results so</font>

55
00:02:51,579 --> 00:02:55,569
let's start from<font color="#CCCCCC"> the beginning so at the</font>

56
00:02:53,890 --> 00:02:57,220
<font color="#CCCCCC">beginning there is a corpus file initial</font>

57
00:02:55,569 --> 00:02:59,560
test case<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> need to</font><font color="#CCCCCC"> create it and</font>

58
00:02:57,220 --> 00:03:01,959
fit and not<font color="#E5E5E5"> only</font><font color="#CCCCCC"> IFL so most of the</font>

59
00:02:59,560 --> 00:03:06,730
<font color="#E5E5E5">father start either from generating</font>

60
00:03:01,959 --> 00:03:08,410
itself or from from a corpus<font color="#E5E5E5"> so most of</font>

61
00:03:06,730 --> 00:03:11,310
the guided father including clip father

62
00:03:08,410 --> 00:03:15,670
or<font color="#E5E5E5"> hung fast all of them relies on</font>

63
00:03:11,310 --> 00:03:18,940
<font color="#E5E5E5">initial corpus and your</font><font color="#CCCCCC"> fuzzing will be</font>

64
00:03:15,670 --> 00:03:20,440
as good as the initial corpus<font color="#E5E5E5"> so what</font>

65
00:03:18,940 --> 00:03:22,959
you can do you can of<font color="#CCCCCC"> course start</font><font color="#E5E5E5"> from</font>

66
00:03:20,440 --> 00:03:26,250
either<font color="#CCCCCC"> zero so give give nothing</font><font color="#E5E5E5"> a FL</font>

67
00:03:22,959 --> 00:03:29,139
can do that you can give an<font color="#E5E5E5"> empty file</font>

68
00:03:26,250 --> 00:03:30,790
<font color="#CCCCCC">you need it at least</font><font color="#E5E5E5"> one file it's from</font>

69
00:03:29,139 --> 00:03:33,880
technical<font color="#CCCCCC"> points of</font><font color="#E5E5E5"> view but</font><font color="#CCCCCC"> it can be</font>

70
00:03:30,790 --> 00:03:37,720
just<font color="#CCCCCC"> empty and</font><font color="#E5E5E5"> I FL can can handle that</font>

71
00:03:33,880 --> 00:03:41,139
<font color="#E5E5E5">but the time of filing will be much much</font>

72
00:03:37,720 --> 00:03:42,639
longer<font color="#E5E5E5"> it was already proven by I'll</font>

73
00:03:41,139 --> 00:03:45,310
come<font color="#E5E5E5"> to if you can see on his</font><font color="#CCCCCC"> webpage</font>

74
00:03:42,639 --> 00:03:48,280
the test when he start from<font color="#E5E5E5"> zero file</font>

75
00:03:45,310 --> 00:03:51,489
and<font color="#E5E5E5"> after some time</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> FL generated</font>

76
00:03:48,280 --> 00:03:55,660
appropriate I<font color="#E5E5E5"> think it was PNG file so</font>

77
00:03:51,489 --> 00:03:57,040
it works<font color="#E5E5E5"> the second thing you</font><font color="#CCCCCC"> can do</font><font color="#E5E5E5"> you</font>

78
00:03:55,660 --> 00:03:58,959
can<font color="#CCCCCC"> just download the stuff from</font>

79
00:03:57,040 --> 00:04:01,090
<font color="#E5E5E5">Internet there are a number of resources</font>

80
00:03:58,959 --> 00:04:03,280
you can you can download from from the

81
00:04:01,090 --> 00:04:05,950
<font color="#E5E5E5">internet if you</font><font color="#CCCCCC"> first PDF files I don't</font>

82
00:04:03,280 --> 00:04:07,750
know PNG JPEGs<font color="#E5E5E5"> whatever you want the</font>

83
00:04:05,950 --> 00:04:09,790
important thing is what is<font color="#E5E5E5"> the quality</font>

84
00:04:07,750 --> 00:04:11,650
<font color="#CCCCCC">of the file that you are downloading</font><font color="#E5E5E5"> all</font>

85
00:04:09,790 --> 00:04:15,010
<font color="#E5E5E5">right you can downloading</font><font color="#CCCCCC"> thousands of</font>

86
00:04:11,650 --> 00:04:18,190
PDFs<font color="#E5E5E5"> that</font><font color="#CCCCCC"> will be</font><font color="#E5E5E5"> a simple text and you</font>

87
00:04:15,010 --> 00:04:20,029
won't get<font color="#E5E5E5"> much coverage of it there are</font>

88
00:04:18,190 --> 00:04:22,670
<font color="#E5E5E5">of course some</font>

89
00:04:20,029 --> 00:04:26,780
sample sets<font color="#E5E5E5"> you can go also to L come to</font>

90
00:04:22,670 --> 00:04:29,570
<font color="#CCCCCC">four</font><font color="#E5E5E5"> other key github pages when you can</font>

91
00:04:26,780 --> 00:04:36,138
download prepare test set for<font color="#CCCCCC"> four video</font>

92
00:04:29,570 --> 00:04:38,480
files or<font color="#CCCCCC"> for for a</font><font color="#E5E5E5"> graphic files or you</font>

93
00:04:36,139 --> 00:04:41,060
can try to try to generate<font color="#E5E5E5"> using</font>

94
00:04:38,480 --> 00:04:44,000
<font color="#E5E5E5">different tools</font><font color="#CCCCCC"> try to when you</font><font color="#E5E5E5"> want to</font>

95
00:04:41,060 --> 00:04:46,520
<font color="#CCCCCC">generate</font><font color="#E5E5E5"> for example video files you can</font>

96
00:04:44,000 --> 00:04:48,110
<font color="#CCCCCC">use a public available decoders create</font>

97
00:04:46,520 --> 00:04:51,530
different types of<font color="#E5E5E5"> the file different</font>

98
00:04:48,110 --> 00:04:54,740
conversion<font color="#CCCCCC"> whatever you want</font><font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the</font>

99
00:04:51,530 --> 00:04:58,190
<font color="#E5E5E5">techniques is used to symbolic execution</font>

100
00:04:54,740 --> 00:05:00,590
tool<font color="#CCCCCC"> I already give a presentation about</font>

101
00:04:58,190 --> 00:05:04,700
this<font color="#E5E5E5"> you can you can download it and see</font>

102
00:05:00,590 --> 00:05:08,359
it when<font color="#CCCCCC"> we use symbolic execution tool</font>

103
00:05:04,700 --> 00:05:12,620
to generate valid graphic files<font color="#E5E5E5"> so we</font>

104
00:05:08,360 --> 00:05:16,160
<font color="#CCCCCC">run through it</font><font color="#E5E5E5"> generate a hundreds of of</font>

105
00:05:12,620 --> 00:05:18,590
the files<font color="#E5E5E5"> and then feed a file you can</font>

106
00:05:16,160 --> 00:05:22,010
go there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> see the compression how it</font>

107
00:05:18,590 --> 00:05:27,349
works with the zero<font color="#E5E5E5"> file and with with</font>

108
00:05:22,010 --> 00:05:30,740
the stuff that<font color="#E5E5E5"> we generate okay so we've</font>

109
00:05:27,350 --> 00:05:32,330
got our<font color="#E5E5E5"> initial initial corpus is</font><font color="#CCCCCC"> run</font>

110
00:05:30,740 --> 00:05:36,080
through application and the<font color="#CCCCCC"> FI was</font>

111
00:05:32,330 --> 00:05:38,719
running the<font color="#E5E5E5"> next the next thing that</font><font color="#CCCCCC"> IFR</font>

112
00:05:36,080 --> 00:05:41,270
is doing is how the<font color="#CCCCCC"> FL choose the input</font>

113
00:05:38,720 --> 00:05:43,789
<font color="#E5E5E5">right because not every file will be</font>

114
00:05:41,270 --> 00:05:45,650
will be chosen<font color="#CCCCCC"> it need to decide which</font>

115
00:05:43,789 --> 00:05:47,890
file is interesting the<font color="#CCCCCC"> question is what</font>

116
00:05:45,650 --> 00:05:47,890
means

117
00:05:48,250 --> 00:05:53,960
<font color="#E5E5E5">interesting so IFR has a classic genetic</font>

118
00:05:51,800 --> 00:05:56,510
algorithm inside you can go through the

119
00:05:53,960 --> 00:05:59,539
source<font color="#E5E5E5"> code</font><font color="#CCCCCC"> and and see how it works</font>

120
00:05:56,510 --> 00:06:02,780
however there<font color="#E5E5E5"> are other strategies</font><font color="#CCCCCC"> a</font>

121
00:05:59,539 --> 00:06:04,789
viable<font color="#E5E5E5"> in the network</font>

122
00:06:02,780 --> 00:06:06,890
<font color="#CCCCCC">I just two of</font><font color="#E5E5E5"> them there are quite</font>

123
00:06:04,789 --> 00:06:10,130
interesting one is called<font color="#E5E5E5"> a</font><font color="#CCCCCC"> FL rare</font>

124
00:06:06,890 --> 00:06:13,690
branches so it's a fork of<font color="#E5E5E5"> a FL that</font>

125
00:06:10,130 --> 00:06:18,200
promotes the branches that<font color="#CCCCCC"> are executed</font>

126
00:06:13,690 --> 00:06:23,150
<font color="#CCCCCC">there are the other one is called AFR</font>

127
00:06:18,200 --> 00:06:25,310
<font color="#E5E5E5">it's use path fantasy fuzzing</font><font color="#CCCCCC"> it's quite</font>

128
00:06:23,150 --> 00:06:28,010
interesting idea of how they are

129
00:06:25,310 --> 00:06:31,400
choosing<font color="#E5E5E5"> what to fast next what</font><font color="#CCCCCC"> input</font>

130
00:06:28,010 --> 00:06:33,590
<font color="#E5E5E5">should be used next the problem is</font>

131
00:06:31,400 --> 00:06:39,859
adjust<font color="#CCCCCC"> the paper</font><font color="#E5E5E5"> so the fork is not</font>

132
00:06:33,590 --> 00:06:44,750
available yet<font color="#CCCCCC"> I talk</font><font color="#E5E5E5"> to the outer of of</font>

133
00:06:39,860 --> 00:06:47,060
this tool<font color="#E5E5E5"> and he said they won't make it</font>

134
00:06:44,750 --> 00:06:48,710
<font color="#E5E5E5">open source yet</font><font color="#CCCCCC"> so they are they are</font>

135
00:06:47,060 --> 00:06:50,419
trying<font color="#CCCCCC"> to add some</font><font color="#E5E5E5"> interesting stuff</font>

136
00:06:48,710 --> 00:06:53,539
because they have a very<font color="#E5E5E5"> good result</font>

137
00:06:50,419 --> 00:06:58,310
<font color="#CCCCCC">with it so not</font><font color="#E5E5E5"> yet but</font><font color="#CCCCCC"> you can reach how</font>

138
00:06:53,540 --> 00:07:01,699
they how they are<font color="#E5E5E5"> change that well the</font>

139
00:06:58,310 --> 00:07:05,900
other<font color="#E5E5E5"> thing is you can do additional</font>

140
00:07:01,699 --> 00:07:07,789
input<font color="#E5E5E5"> during the</font><font color="#CCCCCC"> AFR is</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> here you</font>

141
00:07:05,900 --> 00:07:08,750
have a<font color="#CCCCCC"> two interesting option one is</font>

142
00:07:07,789 --> 00:07:13,039
master/slave mode

143
00:07:08,750 --> 00:07:15,710
<font color="#CCCCCC">IFO allows you to run parallel</font><font color="#E5E5E5"> when one</font>

144
00:07:13,039 --> 00:07:18,110
of the instance or instances are running

145
00:07:15,710 --> 00:07:21,229
in master other<font color="#CCCCCC"> are running in</font><font color="#E5E5E5"> slave and</font>

146
00:07:18,110 --> 00:07:24,800
then they are feed each other<font color="#E5E5E5"> which</font>

147
00:07:21,229 --> 00:07:26,840
<font color="#CCCCCC">makes more reliable</font><font color="#E5E5E5"> the other thing is</font>

148
00:07:24,800 --> 00:07:30,650
<font color="#E5E5E5">something</font><font color="#CCCCCC"> called con colic execution</font>

149
00:07:26,840 --> 00:07:34,000
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is a new</font><font color="#CCCCCC"> approach that you connect</font>

150
00:07:30,650 --> 00:07:40,010
connect or use<font color="#CCCCCC"> AFL in parallel with</font>

151
00:07:34,000 --> 00:07:42,380
symbolic<font color="#CCCCCC"> execution engines so so how it</font>

152
00:07:40,010 --> 00:07:44,870
<font color="#CCCCCC">works so we have</font><font color="#E5E5E5"> instances</font><font color="#CCCCCC"> of AFL that</font>

153
00:07:42,380 --> 00:07:47,960
are running<font color="#E5E5E5"> and then we have a classic</font>

154
00:07:44,870 --> 00:07:49,400
symbolic execution tools<font color="#E5E5E5"> might be short</font>

155
00:07:47,960 --> 00:07:52,070
if you don't<font color="#CCCCCC"> know what a symbolic</font>

156
00:07:49,400 --> 00:07:54,500
<font color="#E5E5E5">execution tools are these are the tools</font>

157
00:07:52,070 --> 00:07:57,229
<font color="#E5E5E5">that going through</font><font color="#CCCCCC"> the application and</font>

158
00:07:54,500 --> 00:08:01,400
try to solve and fight all the possible

159
00:07:57,229 --> 00:08:04,639
paths by constraint solving<font color="#CCCCCC"> they are</font>

160
00:08:01,400 --> 00:08:06,799
very<font color="#CCCCCC"> time consuming resource consuming</font>

161
00:08:04,639 --> 00:08:09,860
and they have few problems<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> why</font>

162
00:08:06,800 --> 00:08:12,949
they are<font color="#E5E5E5"> not used itself to validate the</font>

163
00:08:09,860 --> 00:08:15,500
application but with the AFL they have

164
00:08:12,949 --> 00:08:18,470
very good results<font color="#CCCCCC"> and right now there</font>

165
00:08:15,500 --> 00:08:21,490
are<font color="#CCCCCC"> three public available you can</font>

166
00:08:18,470 --> 00:08:24,949
<font color="#E5E5E5">download</font><font color="#CCCCCC"> it tested</font><font color="#E5E5E5"> I've seen all of them</font>

167
00:08:21,490 --> 00:08:28,639
one is Manish the second one is driller

168
00:08:24,949 --> 00:08:34,310
<font color="#E5E5E5">and</font><font color="#CCCCCC"> lasting which is quite new</font><font color="#E5E5E5"> excuse</font>

169
00:08:28,639 --> 00:08:36,409
<font color="#CCCCCC">him and maybe a few words</font><font color="#E5E5E5"> so Manish is a</font>

170
00:08:34,309 --> 00:08:38,838
platform that<font color="#CCCCCC"> takes</font><font color="#E5E5E5"> a clear which is</font>

171
00:08:36,409 --> 00:08:40,400
<font color="#E5E5E5">very popular symbolic execution tool and</font>

172
00:08:38,839 --> 00:08:43,250
just<font color="#CCCCCC"> run it</font><font color="#E5E5E5"> first</font>

173
00:08:40,400 --> 00:08:44,000
<font color="#E5E5E5">whatever clean</font><font color="#CCCCCC"> throw up it goes</font><font color="#E5E5E5"> through</font>

174
00:08:43,250 --> 00:08:47,270
the air

175
00:08:44,000 --> 00:08:49,760
<font color="#CCCCCC">an AFL fast from</font><font color="#E5E5E5"> some time and then it's</font>

176
00:08:47,270 --> 00:08:53,090
<font color="#CCCCCC">going back to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> clay and regenerate</font>

177
00:08:49,760 --> 00:08:57,350
new<font color="#CCCCCC"> those</font><font color="#E5E5E5"> cases again</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> very</font>

178
00:08:53,090 --> 00:09:01,250
painful to to<font color="#E5E5E5"> install the second one is</font>

179
00:08:57,350 --> 00:09:04,370
driller<font color="#CCCCCC"> drill is much more advanced</font><font color="#E5E5E5"> it</font>

180
00:09:01,250 --> 00:09:07,790
used not only<font color="#E5E5E5"> AFL but also Ankara and</font>

181
00:09:04,370 --> 00:09:10,490
and platform<font color="#E5E5E5"> and it works like this that</font>

182
00:09:07,790 --> 00:09:12,860
AFL is working and when the AFL is

183
00:09:10,490 --> 00:09:15,550
saturated<font color="#E5E5E5"> and it cannot find anything</font>

184
00:09:12,860 --> 00:09:19,730
more then the anchor platform is running

185
00:09:15,550 --> 00:09:21,560
with a FL map<font color="#E5E5E5"> so then they try to find</font>

186
00:09:19,730 --> 00:09:24,650
at<font color="#CCCCCC"> least</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> that haven't</font><font color="#CCCCCC"> been</font>

187
00:09:21,560 --> 00:09:27,079
found by<font color="#E5E5E5"> AFL when they find it they feed</font>

188
00:09:24,650 --> 00:09:31,790
it back to AFL and<font color="#E5E5E5"> AFL start running</font>

189
00:09:27,080 --> 00:09:34,540
<font color="#E5E5E5">further</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can also go</font><font color="#CCCCCC"> to web page and</font>

190
00:09:31,790 --> 00:09:37,579
<font color="#E5E5E5">download it</font><font color="#CCCCCC"> and test it</font>

191
00:09:34,540 --> 00:09:40,280
the third one<font color="#E5E5E5"> very interesting tool that</font>

192
00:09:37,580 --> 00:09:43,790
I've seen<font color="#CCCCCC"> recently it's called Q</font><font color="#E5E5E5"> sim</font>

193
00:09:40,280 --> 00:09:45,410
it's not exactly con<font color="#CCCCCC"> colleague execution</font>

194
00:09:43,790 --> 00:09:48,920
<font color="#CCCCCC">because it doesn't use</font><font color="#E5E5E5"> symbolic</font>

195
00:09:45,410 --> 00:09:53,719
execution<font color="#E5E5E5"> for for a test case generation</font>

196
00:09:48,920 --> 00:09:56,990
<font color="#E5E5E5">it use pin tool and try to solve the</font>

197
00:09:53,720 --> 00:09:59,180
constraint like loosely so it's guessing

198
00:09:56,990 --> 00:10:03,170
the country it doesn't<font color="#E5E5E5"> solve them but</font>

199
00:09:59,180 --> 00:10:05,239
this<font color="#E5E5E5"> goes that it works much faster</font><font color="#CCCCCC"> then</font>

200
00:10:03,170 --> 00:10:07,069
<font color="#CCCCCC">con</font><font color="#E5E5E5"> colic execution the other advantages</font>

201
00:10:05,240 --> 00:10:09,410
that<font color="#E5E5E5"> you need to recompile your</font>

202
00:10:07,070 --> 00:10:11,810
application again for<font color="#E5E5E5"> african colic</font>

203
00:10:09,410 --> 00:10:13,760
execution<font color="#E5E5E5"> because for every symbolic</font>

204
00:10:11,810 --> 00:10:16,640
tool you need<font color="#E5E5E5"> to compile it to</font>

205
00:10:13,760 --> 00:10:20,120
immediately language instead<font color="#CCCCCC"> of instead</font>

206
00:10:16,640 --> 00:10:22,280
<font color="#CCCCCC">of a binary</font><font color="#E5E5E5"> there is a PDF also it all</font>

207
00:10:20,120 --> 00:10:24,710
it's available<font color="#E5E5E5"> on a github but if you go</font>

208
00:10:22,280 --> 00:10:32,390
to the<font color="#E5E5E5"> PDF there is a link where you can</font>

209
00:10:24,710 --> 00:10:34,790
download<font color="#CCCCCC"> q</font><font color="#E5E5E5"> soon</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> next part that this</font>

210
00:10:32,390 --> 00:10:37,699
is very important with<font color="#CCCCCC"> IFOS</font>

211
00:10:34,790 --> 00:10:39,800
crash detection so<font color="#CCCCCC"> AF o is looking for</font>

212
00:10:37,700 --> 00:10:42,890
crashes if your application doesn't

213
00:10:39,800 --> 00:10:47,000
<font color="#E5E5E5">crash I have a one report that</font><font color="#CCCCCC"> it's it's</font>

214
00:10:42,890 --> 00:10:50,150
very simple<font color="#CCCCCC"> but sometimes it's not</font><font color="#E5E5E5"> so</font>

215
00:10:47,000 --> 00:10:52,100
<font color="#E5E5E5">easy</font><font color="#CCCCCC"> so when you have for example</font><font color="#E5E5E5"> buffer</font>

216
00:10:50,150 --> 00:10:54,740
<font color="#E5E5E5">overflows that don't cause a crash</font><font color="#CCCCCC"> I</font>

217
00:10:52,100 --> 00:10:59,660
have a one reported so we need to make

218
00:10:54,740 --> 00:11:01,430
it more<font color="#CCCCCC"> crash able than normally we have</font>

219
00:10:59,660 --> 00:11:04,490
few<font color="#CCCCCC"> methods of course</font><font color="#E5E5E5"> I just mentioned</font>

220
00:11:01,430 --> 00:11:08,000
the most popular ones<font color="#CCCCCC"> one is a</font><font color="#E5E5E5"> address</font>

221
00:11:04,490 --> 00:11:11,750
<font color="#E5E5E5">sanitizer is a tool used by</font><font color="#CCCCCC"> clang</font>

222
00:11:08,000 --> 00:11:14,150
compiler<font color="#E5E5E5"> it's at all the checks for a</font>

223
00:11:11,750 --> 00:11:14,690
memory read<font color="#CCCCCC"> write</font><font color="#E5E5E5"> and if something's</font>

224
00:11:14,150 --> 00:11:18,410
wrong

225
00:11:14,690 --> 00:11:21,440
it just crash<font color="#CCCCCC"> so the trick is</font><font color="#E5E5E5"> of course</font>

226
00:11:18,410 --> 00:11:23,870
there is always<font color="#CCCCCC"> a trick it works nice</font>

227
00:11:21,440 --> 00:11:26,180
<font color="#CCCCCC">but there is a huge overhead in memory</font>

228
00:11:23,870 --> 00:11:29,240
and<font color="#E5E5E5"> in speed of of your application and</font>

229
00:11:26,180 --> 00:11:31,910
for<font color="#CCCCCC"> 64 applications it's not even</font>

230
00:11:29,240 --> 00:11:34,220
recommended<font color="#CCCCCC"> because the the application</font>

231
00:11:31,910 --> 00:11:37,610
<font color="#CCCCCC">compile with address sanitizer is really</font>

232
00:11:34,220 --> 00:11:40,820
huge<font color="#CCCCCC"> the second one worth to mention is</font>

233
00:11:37,610 --> 00:11:44,300
undefined behavior sanitizer<font color="#E5E5E5"> so it's a</font>

234
00:11:40,820 --> 00:11:48,350
tool that checks for everything that is

235
00:11:44,300 --> 00:11:49,579
in the in the<font color="#CCCCCC"> C programming or C++</font>

236
00:11:48,350 --> 00:11:52,339
programming called as<font color="#E5E5E5"> an undefined</font>

237
00:11:49,580 --> 00:11:54,790
behavior<font color="#E5E5E5"> right it still can undefined</font>

238
00:11:52,339 --> 00:11:58,940
behavior can work can<font color="#E5E5E5"> make no crashes</font>

239
00:11:54,790 --> 00:12:01,790
<font color="#E5E5E5">but still can generate mistakes that can</font>

240
00:11:58,940 --> 00:12:04,760
<font color="#E5E5E5">be found with behave undefined behavior</font>

241
00:12:01,790 --> 00:12:08,990
sanitizer<font color="#CCCCCC"> the third thing</font><font color="#E5E5E5"> that I</font><font color="#CCCCCC"> found</font>

242
00:12:04,760 --> 00:12:10,819
recently is a library called<font color="#E5E5E5"> DFAS so</font>

243
00:12:08,990 --> 00:12:12,980
<font color="#E5E5E5">it's alternative to memory sanitizer</font>

244
00:12:10,820 --> 00:12:15,770
memory sanitizer is just part of address

245
00:12:12,980 --> 00:12:17,870
sanitizer<font color="#CCCCCC"> that is used to see if there</font>

246
00:12:15,770 --> 00:12:21,560
is an<font color="#E5E5E5"> initialized</font>

247
00:12:17,870 --> 00:12:25,010
memories on the stack<font color="#CCCCCC"> so the link for</font>

248
00:12:21,560 --> 00:12:26,800
the<font color="#CCCCCC"> Lib DFAS you can check it I haven't</font>

249
00:12:25,010 --> 00:12:32,630
so I don't know how it works

250
00:12:26,800 --> 00:12:34,699
but<font color="#E5E5E5"> it seems pretty</font><font color="#CCCCCC"> much ok another step</font>

251
00:12:32,630 --> 00:12:37,520
if<font color="#E5E5E5"> you have all the stuff we need</font><font color="#CCCCCC"> to</font>

252
00:12:34,700 --> 00:12:39,830
take our<font color="#CCCCCC"> tests test cases and we need to</font>

253
00:12:37,520 --> 00:12:44,780
somehow mutated<font color="#E5E5E5"> mutated them how to do</font>

254
00:12:39,830 --> 00:12:47,060
<font color="#E5E5E5">it well</font><font color="#CCCCCC"> IFL has some genetic algorithm</font>

255
00:12:44,780 --> 00:12:50,630
implemented some<font color="#CCCCCC"> deter me statistics</font><font color="#E5E5E5"> I'm</font>

256
00:12:47,060 --> 00:12:54,800
not<font color="#CCCCCC"> deterministic but</font><font color="#E5E5E5"> what we want to do</font>

257
00:12:50,630 --> 00:12:57,920
is to make these<font color="#CCCCCC"> mutaters</font><font color="#E5E5E5"> improved how</font>

258
00:12:54,800 --> 00:13:01,160
we can do it<font color="#E5E5E5"> well first thing is to use</font>

259
00:12:57,920 --> 00:13:04,150
dictionaries so<font color="#CCCCCC"> ifr allows to use</font>

260
00:13:01,160 --> 00:13:07,459
dictionary which is<font color="#CCCCCC"> a file</font>

261
00:13:04,150 --> 00:13:14,510
including the list<font color="#E5E5E5"> of the values</font><font color="#CCCCCC"> that we</font>

262
00:13:07,460 --> 00:13:16,070
want<font color="#CCCCCC"> AFL to include every every test how</font>

263
00:13:14,510 --> 00:13:19,370
can we<font color="#E5E5E5"> create this kind of dictionaries</font>

264
00:13:16,070 --> 00:13:22,490
<font color="#CCCCCC">well by hand</font><font color="#E5E5E5"> just type it whatever you</font>

265
00:13:19,370 --> 00:13:23,750
<font color="#CCCCCC">want in inside the file you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> download</font>

266
00:13:22,490 --> 00:13:25,730
it from<font color="#E5E5E5"> the internet there</font><font color="#CCCCCC"> are</font>

267
00:13:23,750 --> 00:13:29,480
dictionaries<font color="#E5E5E5"> available for example for</font>

268
00:13:25,730 --> 00:13:31,550
PDF<font color="#E5E5E5"> files having all the key words</font><font color="#CCCCCC"> you</font>

269
00:13:29,480 --> 00:13:33,980
can just parse the source code<font color="#E5E5E5"> whatever</font>

270
00:13:31,550 --> 00:13:36,170
you want<font color="#CCCCCC"> you can parse for example the</font>

271
00:13:33,980 --> 00:13:38,210
applications<font color="#E5E5E5"> looking for strings and</font>

272
00:13:36,170 --> 00:13:41,360
then add those strings inside the

273
00:13:38,210 --> 00:13:45,620
dictionary<font color="#E5E5E5"> or you can do it during</font>

274
00:13:41,360 --> 00:13:49,700
compilation time there is a nice plug in

275
00:13:45,620 --> 00:13:52,970
called<font color="#CCCCCC"> IFL LVM chalk and cut</font><font color="#E5E5E5"> pass which</font>

276
00:13:49,700 --> 00:13:55,760
<font color="#E5E5E5">is used for generating direction</font>

277
00:13:52,970 --> 00:13:57,890
<font color="#CCCCCC">Dictionary y application is compiling it</font>

278
00:13:55,760 --> 00:14:00,230
takes all the<font color="#E5E5E5"> ifs all the string</font>

279
00:13:57,890 --> 00:14:02,270
comparison memory compares and<font color="#E5E5E5"> dump</font>

280
00:14:00,230 --> 00:14:07,160
everything<font color="#E5E5E5"> to one file</font><font color="#CCCCCC"> here is the</font><font color="#E5E5E5"> link</font>

281
00:14:02,270 --> 00:14:13,520
<font color="#CCCCCC">for</font><font color="#E5E5E5"> it and you can test it if you want</font>

282
00:14:07,160 --> 00:14:15,949
<font color="#CCCCCC">the other thing that may help</font><font color="#E5E5E5"> the</font>

283
00:14:13,520 --> 00:14:17,750
mutaters working much better<font color="#CCCCCC"> is not</font>

284
00:14:15,950 --> 00:14:21,020
changing the mutaters by changing the

285
00:14:17,750 --> 00:14:24,970
<font color="#CCCCCC">application</font><font color="#E5E5E5"> to make it easy for</font><font color="#CCCCCC"> AFL as</font>

286
00:14:21,020 --> 00:14:28,069
you may know IFO has some problems with

287
00:14:24,970 --> 00:14:31,130
<font color="#CCCCCC">which some ifs I think here is the end</font>

288
00:14:28,070 --> 00:14:35,300
example right<font color="#E5E5E5"> so the on the left the</font>

289
00:14:31,130 --> 00:14:37,400
<font color="#E5E5E5">first if if you see something like</font><font color="#CCCCCC"> I</font>

290
00:14:35,300 --> 00:14:40,400
didn't check this particular value<font color="#E5E5E5"> but I</font>

291
00:14:37,400 --> 00:14:42,500
check different<font color="#E5E5E5"> one if you do this kind</font>

292
00:14:40,400 --> 00:14:44,420
of<font color="#E5E5E5"> if I if I won't find it doesn't</font>

293
00:14:42,500 --> 00:14:47,330
matter how long<font color="#E5E5E5"> you will you will run in</font>

294
00:14:44,420 --> 00:14:49,339
it pure I felt downloaded from the from

295
00:14:47,330 --> 00:14:52,670
the<font color="#CCCCCC"> Internet</font><font color="#E5E5E5"> won't won't find this kind</font>

296
00:14:49,340 --> 00:14:56,780
of code there<font color="#CCCCCC"> is no way speed</font><font color="#E5E5E5"> compare</font>

297
00:14:52,670 --> 00:15:00,439
<font color="#E5E5E5">pass as a</font><font color="#CCCCCC"> plug-in</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a client deal with</font>

298
00:14:56,780 --> 00:15:05,000
this by<font color="#E5E5E5"> changing one if to multiple ifs</font>

299
00:15:00,440 --> 00:15:09,140
<font color="#E5E5E5">which is much better for for</font><font color="#CCCCCC"> IFL to find</font>

300
00:15:05,000 --> 00:15:11,330
and go through the second plug-in is

301
00:15:09,140 --> 00:15:12,910
called compared transform pass and it

302
00:15:11,330 --> 00:15:14,680
does the<font color="#E5E5E5"> same</font>

303
00:15:12,910 --> 00:15:17,199
but with the string compares right it

304
00:15:14,680 --> 00:15:22,920
<font color="#E5E5E5">changed</font><font color="#CCCCCC"> the string compares to multiple</font>

305
00:15:17,200 --> 00:15:22,920
if which are very easy<font color="#CCCCCC"> to handle by IFL</font>

306
00:15:25,410 --> 00:15:33,040
<font color="#CCCCCC">what else you</font><font color="#E5E5E5"> can also create your own</font>

307
00:15:28,360 --> 00:15:35,320
<font color="#CCCCCC">mutaters</font><font color="#E5E5E5"> this can help you especially if</font>

308
00:15:33,040 --> 00:15:37,060
you<font color="#E5E5E5"> have your own application tested or</font>

309
00:15:35,320 --> 00:15:39,400
your company<font color="#E5E5E5"> testing the application</font>

310
00:15:37,060 --> 00:15:41,170
<font color="#CCCCCC">your developer and you know exactly what</font>

311
00:15:39,400 --> 00:15:43,870
<font color="#E5E5E5">kind of application you have what kind</font>

312
00:15:41,170 --> 00:15:47,229
<font color="#E5E5E5">of magic</font><font color="#CCCCCC"> value you you are used so we</font>

313
00:15:43,870 --> 00:15:49,840
can do<font color="#E5E5E5"> it you're</font><font color="#CCCCCC"> on your own for AFL</font>

314
00:15:47,230 --> 00:15:52,780
there is a nice article<font color="#E5E5E5"> about how</font><font color="#CCCCCC"> to do</font>

315
00:15:49,840 --> 00:15:56,260
it<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> the link</font>

316
00:15:52,780 --> 00:15:58,990
there is also<font color="#E5E5E5"> Lib</font><font color="#CCCCCC"> facile module that</font>

317
00:15:56,260 --> 00:16:05,350
<font color="#E5E5E5">allows you to</font><font color="#CCCCCC"> add custom imitators</font><font color="#E5E5E5"> to a</font>

318
00:15:58,990 --> 00:16:08,350
leap<font color="#E5E5E5"> father if you</font><font color="#CCCCCC"> are interested ok so</font>

319
00:16:05,350 --> 00:16:10,020
we have all of<font color="#E5E5E5"> this but how about</font>

320
00:16:08,350 --> 00:16:13,660
<font color="#E5E5E5">speeding up the application</font><font color="#CCCCCC"> right</font>

321
00:16:10,020 --> 00:16:16,720
because even even if you make<font color="#CCCCCC"> it working</font>

322
00:16:13,660 --> 00:16:18,670
faster<font color="#E5E5E5"> for</font><font color="#CCCCCC"> 5 10</font><font color="#E5E5E5"> percent if you</font><font color="#CCCCCC"> fuzzing</font>

323
00:16:16,720 --> 00:16:23,950
on a larger scale<font color="#CCCCCC"> it gives you</font>

324
00:16:18,670 --> 00:16:27,490
significant difference right what you

325
00:16:23,950 --> 00:16:29,050
can do you can destroy you can do

326
00:16:27,490 --> 00:16:31,360
distributed<font color="#CCCCCC"> filing right we already</font>

327
00:16:29,050 --> 00:16:34,930
<font color="#CCCCCC">mentioned</font><font color="#E5E5E5"> about there is this</font><font color="#CCCCCC"> masters</font>

328
00:16:31,360 --> 00:16:39,760
<font color="#CCCCCC">life mode so how it</font><font color="#E5E5E5"> works so masters</font>

329
00:16:34,930 --> 00:16:41,979
master mode works in deterministic way

330
00:16:39,760 --> 00:16:42,550
<font color="#E5E5E5">so you say how many masters you want to</font>

331
00:16:41,980 --> 00:16:45,070
have it

332
00:16:42,550 --> 00:16:48,430
what master<font color="#CCCCCC"> is number and it split up</font>

333
00:16:45,070 --> 00:16:50,740
all the search area<font color="#CCCCCC"> to</font><font color="#E5E5E5"> those masters so</font>

334
00:16:48,430 --> 00:16:53,770
all the<font color="#E5E5E5"> masters need to run and then</font><font color="#CCCCCC"> you</font>

335
00:16:50,740 --> 00:16:57,420
have a slave<font color="#E5E5E5"> that works</font><font color="#CCCCCC"> under</font><font color="#E5E5E5"> terminus</font>

336
00:16:53,770 --> 00:17:01,510
<font color="#E5E5E5">take random way and all</font><font color="#CCCCCC"> these together</font>

337
00:16:57,420 --> 00:17:05,079
give very good<font color="#E5E5E5"> result you can see about</font>

338
00:17:01,510 --> 00:17:08,470
parallel<font color="#CCCCCC"> phasing from from original IFL</font>

339
00:17:05,079 --> 00:17:11,919
what you can do to make it make<font color="#CCCCCC"> it</font>

340
00:17:08,470 --> 00:17:13,510
faster<font color="#E5E5E5"> so this was on one machine but</font>

341
00:17:11,920 --> 00:17:18,160
<font color="#E5E5E5">how you can distribute different</font>

342
00:17:13,510 --> 00:17:20,829
<font color="#E5E5E5">machines well you can do it by by simple</font>

343
00:17:18,160 --> 00:17:23,530
trick so<font color="#CCCCCC"> IFOS between every instance is</font>

344
00:17:20,829 --> 00:17:25,349
synchronized based on the directory<font color="#E5E5E5"> so</font>

345
00:17:23,530 --> 00:17:27,750
one of the trick that<font color="#CCCCCC"> you can use</font><font color="#E5E5E5"> it</font>

346
00:17:25,349 --> 00:17:31,439
use the network<font color="#E5E5E5"> share right then you can</font>

347
00:17:27,750 --> 00:17:33,539
<font color="#CCCCCC">have access</font><font color="#E5E5E5"> to this one directory from</font>

348
00:17:31,440 --> 00:17:36,240
many machines and then you can build the

349
00:17:33,539 --> 00:17:42,720
cluster without adding any other stuff

350
00:17:36,240 --> 00:17:46,110
for<font color="#E5E5E5"> AFL here are tools already designed</font>

351
00:17:42,720 --> 00:17:48,929
for that<font color="#E5E5E5"> when they are doing this</font>

352
00:17:46,110 --> 00:17:52,500
<font color="#E5E5E5">distributed passing between different</font>

353
00:17:48,929 --> 00:17:58,140
computers<font color="#CCCCCC"> what I will what</font><font color="#E5E5E5"> I did in my</font>

354
00:17:52,500 --> 00:18:01,110
<font color="#E5E5E5">previous job</font><font color="#CCCCCC"> we were we build passing</font>

355
00:17:58,140 --> 00:18:03,090
farm based on the<font color="#CCCCCC"> Android devices and we</font>

356
00:18:01,110 --> 00:18:06,539
use<font color="#CCCCCC"> AFL and</font><font color="#E5E5E5"> we synchronized the</font>

357
00:18:03,090 --> 00:18:09,480
directory between the devices<font color="#E5E5E5"> so each</font>

358
00:18:06,539 --> 00:18:11,789
device had the same directory<font color="#E5E5E5"> and on</font>

359
00:18:09,480 --> 00:18:14,700
each device<font color="#E5E5E5"> you can you can run multiple</font>

360
00:18:11,789 --> 00:18:18,990
<font color="#E5E5E5">i/o file instances so at the end we end</font>

361
00:18:14,700 --> 00:18:23,100
up with 96 instances of<font color="#CCCCCC"> AFL</font><font color="#E5E5E5"> which was</font>

362
00:18:18,990 --> 00:18:29,640
divided by<font color="#CCCCCC"> 4 like</font><font color="#E5E5E5"> 20 something physical</font>

363
00:18:23,100 --> 00:18:32,428
devices another technique that you can

364
00:18:29,640 --> 00:18:35,520
<font color="#E5E5E5">use is called</font><font color="#CCCCCC"> in-memory facing one of</font>

365
00:18:32,429 --> 00:18:37,409
the most consuming process way while you

366
00:18:35,520 --> 00:18:40,139
are fasting<font color="#E5E5E5"> is loading the</font><font color="#CCCCCC"> application</font>

367
00:18:37,409 --> 00:18:42,299
you need to load it<font color="#CCCCCC"> then the application</font>

368
00:18:40,140 --> 00:18:49,020
<font color="#CCCCCC">just run small test case and then you</font>

369
00:18:42,299 --> 00:18:51,600
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> unload</font><font color="#CCCCCC"> it right</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> battery</font><font color="#E5E5E5"> is</font>

370
00:18:49,020 --> 00:18:53,520
just<font color="#CCCCCC"> to load everything you need and</font>

371
00:18:51,600 --> 00:18:55,320
before the functions that you<font color="#E5E5E5"> want to</font>

372
00:18:53,520 --> 00:18:58,889
test you<font color="#E5E5E5"> just fork it instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> running</font>

373
00:18:55,320 --> 00:19:01,860
the<font color="#E5E5E5"> whole the</font><font color="#CCCCCC"> whole application</font><font color="#E5E5E5"> make it</font>

374
00:18:58,890 --> 00:19:04,770
much faster<font color="#E5E5E5"> so iPhone allows that it's</font>

375
00:19:01,860 --> 00:19:09,469
called<font color="#CCCCCC"> a</font><font color="#E5E5E5"> FL persistent mode you just</font>

376
00:19:04,770 --> 00:19:13,408
create a loop here<font color="#E5E5E5"> is here is the</font><font color="#CCCCCC"> loop</font>

377
00:19:09,470 --> 00:19:15,090
right you compile<font color="#CCCCCC"> it and here is the</font><font color="#E5E5E5"> the</font>

378
00:19:13,409 --> 00:19:18,570
<font color="#E5E5E5">function that you</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> test that</font><font color="#CCCCCC"> what</font>

379
00:19:15,090 --> 00:19:21,510
<font color="#CCCCCC">IFL will do will run this this while</font>

380
00:19:18,570 --> 00:19:26,720
here here is the fort<font color="#CCCCCC"> Mahajan so it</font>

381
00:19:21,510 --> 00:19:28,919
Forks<font color="#CCCCCC"> one</font><font color="#E5E5E5"> 1000 times and then it will</font>

382
00:19:26,720 --> 00:19:31,559
exit the<font color="#E5E5E5"> application and run the</font>

383
00:19:28,919 --> 00:19:34,980
<font color="#CCCCCC">application again</font><font color="#E5E5E5"> so we could</font>

384
00:19:31,559 --> 00:19:40,020
have much more faster working

385
00:19:34,980 --> 00:19:41,370
application<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> one another thing that</font>

386
00:19:40,020 --> 00:19:44,129
is very important is<font color="#CCCCCC"> the feedback</font>

387
00:19:41,370 --> 00:19:47,820
feedback is information going<font color="#E5E5E5"> back</font><font color="#CCCCCC"> from</font>

388
00:19:44,130 --> 00:19:49,470
<font color="#E5E5E5">the application to</font><font color="#CCCCCC"> AFL how the</font>

389
00:19:47,820 --> 00:19:52,289
application handled the test case

390
00:19:49,470 --> 00:19:55,380
normally it<font color="#CCCCCC"> just information what kind</font>

391
00:19:52,289 --> 00:20:00,360
of coverage we have what basic block

392
00:19:55,380 --> 00:20:02,940
were executed<font color="#CCCCCC"> what kind of path we went</font>

393
00:20:00,360 --> 00:20:04,649
through so every new test cases<font color="#E5E5E5"> we can</font>

394
00:20:02,940 --> 00:20:06,210
say<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> these test cases go through the</font>

395
00:20:04,650 --> 00:20:09,929
same path that<font color="#E5E5E5"> we already seen is</font>

396
00:20:06,210 --> 00:20:11,610
pointless<font color="#E5E5E5"> to test it right and we have</font>

397
00:20:09,929 --> 00:20:14,640
few<font color="#E5E5E5"> options</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> first option is</font>

398
00:20:11,610 --> 00:20:18,750
<font color="#CCCCCC">compile-time</font><font color="#E5E5E5"> instrumentation the basic</font>

399
00:20:14,640 --> 00:20:21,539
things that was<font color="#E5E5E5"> invented by a count of</font>

400
00:20:18,750 --> 00:20:24,870
was something called<font color="#CCCCCC"> AFL GCC it was a</font>

401
00:20:21,539 --> 00:20:29,400
wrapper<font color="#CCCCCC"> for GCC that adds some assembly</font>

402
00:20:24,870 --> 00:20:32,340
Blox assembly blobs on every basic block

403
00:20:29,400 --> 00:20:34,260
<font color="#E5E5E5">and based on each time the basic block</font>

404
00:20:32,340 --> 00:20:36,658
was executed this assembly block<font color="#CCCCCC"> gets</font>

405
00:20:34,260 --> 00:20:38,820
the information<font color="#E5E5E5"> what what what I am</font>

406
00:20:36,659 --> 00:20:43,200
thanks to this<font color="#CCCCCC"> AF o knows what kind</font><font color="#E5E5E5"> of</font>

407
00:20:38,820 --> 00:20:44,970
basic<font color="#E5E5E5"> blocks were executed right now AF</font>

408
00:20:43,200 --> 00:20:47,580
I'll have a module<font color="#CCCCCC"> to use the LLVM</font>

409
00:20:44,970 --> 00:20:50,370
compiler time instrumentation<font color="#CCCCCC"> I'm using</font>

410
00:20:47,580 --> 00:20:52,370
this module<font color="#E5E5E5"> because it's it's quite easy</font>

411
00:20:50,370 --> 00:20:59,479
<font color="#CCCCCC">to add if you if you</font><font color="#E5E5E5"> are using client</font>

412
00:20:52,370 --> 00:21:02,760
complied<font color="#CCCCCC"> computer</font><font color="#E5E5E5"> yes the other thing is</font>

413
00:20:59,480 --> 00:21:05,370
<font color="#E5E5E5">hardware tracing there are two</font>

414
00:21:02,760 --> 00:21:09,690
<font color="#CCCCCC">advantages over the completion time one</font>

415
00:21:05,370 --> 00:21:12,418
is much faster<font color="#E5E5E5"> and the second thing the</font>

416
00:21:09,690 --> 00:21:16,020
application doesn't<font color="#E5E5E5"> need to be compiled</font>

417
00:21:12,419 --> 00:21:17,610
this is very important so we<font color="#CCCCCC"> can take</font><font color="#E5E5E5"> we</font>

418
00:21:16,020 --> 00:21:19,500
can<font color="#E5E5E5"> buy an application you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to test</font>

419
00:21:17,610 --> 00:21:22,139
<font color="#E5E5E5">it we don't have</font><font color="#CCCCCC"> a source code we can</font>

420
00:21:19,500 --> 00:21:25,590
you under<font color="#E5E5E5"> hardware training and get very</font>

421
00:21:22,140 --> 00:21:28,620
good results<font color="#CCCCCC"> two most popular hard road</font>

422
00:21:25,590 --> 00:21:31,908
racing technology<font color="#E5E5E5"> our Intel PT Intel</font>

423
00:21:28,620 --> 00:21:36,479
processor<font color="#E5E5E5"> trace and something called our</font>

424
00:21:31,909 --> 00:21:39,870
core site so what<font color="#CCCCCC"> is</font><font color="#E5E5E5"> inter</font><font color="#CCCCCC"> process or</font>

425
00:21:36,480 --> 00:21:42,470
trace<font color="#E5E5E5"> it just additional feature inside</font>

426
00:21:39,870 --> 00:21:44,870
the processor that<font color="#E5E5E5"> gives the</font><font color="#CCCCCC"> information</font>

427
00:21:42,470 --> 00:21:49,640
<font color="#E5E5E5">what kind of execution what kind of</font>

428
00:21:44,870 --> 00:21:52,070
addresses were executed<font color="#E5E5E5"> the advantage of</font>

429
00:21:49,640 --> 00:21:53,870
this is that<font color="#E5E5E5"> there is no overhead how</font>

430
00:21:52,070 --> 00:21:58,100
the application is executed it's done on

431
00:21:53,870 --> 00:21:59,809
<font color="#CCCCCC">the</font><font color="#E5E5E5"> hardware</font><font color="#CCCCCC"> there are two windows</font>

432
00:21:58,100 --> 00:22:03,139
<font color="#E5E5E5">unfortunately windows a FL</font>

433
00:21:59,809 --> 00:22:06,980
implementation that can use that<font color="#E5E5E5"> pity</font>

434
00:22:03,140 --> 00:22:09,830
phaser win<font color="#CCCCCC"> AFR intel pity phaser</font><font color="#E5E5E5"> that</font>

435
00:22:06,980 --> 00:22:11,590
use this you can<font color="#E5E5E5"> you can test it of</font>

436
00:22:09,830 --> 00:22:15,470
course<font color="#E5E5E5"> you need to have appropriate</font>

437
00:22:11,590 --> 00:22:20,658
<font color="#E5E5E5">processor from Intel</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> remember what</font>

438
00:22:15,470 --> 00:22:23,450
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of version it starts so I have no</font>

439
00:22:20,659 --> 00:22:26,110
slide about arm<font color="#E5E5E5"> core</font><font color="#CCCCCC"> sight because</font><font color="#E5E5E5"> I</font>

440
00:22:23,450 --> 00:22:29,360
haven't<font color="#E5E5E5"> found</font><font color="#CCCCCC"> an implementation for</font><font color="#E5E5E5"> arm</font>

441
00:22:26,110 --> 00:22:34,309
with the hardware<font color="#E5E5E5"> I think I know that</font>

442
00:22:29,360 --> 00:22:36,408
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> still very highly developed</font><font color="#CCCCCC"> so it's</font>

443
00:22:34,309 --> 00:22:39,549
<font color="#E5E5E5">not finished</font><font color="#CCCCCC"> yet there is only one Lin</font>

444
00:22:36,409 --> 00:22:41,990
one version of Linux system on arm that

445
00:22:39,549 --> 00:22:45,020
supports this arm core<font color="#CCCCCC"> site it's much</font>

446
00:22:41,990 --> 00:22:46,880
more<font color="#CCCCCC"> complicated it works in much more</font>

447
00:22:45,020 --> 00:22:48,830
<font color="#E5E5E5">complicated way than</font><font color="#CCCCCC"> inter process</font><font color="#E5E5E5"> of</font>

448
00:22:46,880 --> 00:22:52,220
tracing<font color="#E5E5E5"> and you need to decode all the</font>

449
00:22:48,830 --> 00:22:54,620
trace and<font color="#E5E5E5"> that's why it's so so</font>

450
00:22:52,220 --> 00:23:00,559
<font color="#E5E5E5">difficult to probably to implement or no</font>

451
00:22:54,620 --> 00:23:03,110
one needed<font color="#CCCCCC"> the third thing</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can do is</font>

452
00:23:00,559 --> 00:23:04,730
just use the execution time

453
00:23:03,110 --> 00:23:06,469
instrumentation<font color="#E5E5E5"> if you don't have a</font>

454
00:23:04,730 --> 00:23:11,480
source code you cannot recompile the

455
00:23:06,470 --> 00:23:14,299
application<font color="#CCCCCC"> you can just use this there</font>

456
00:23:11,480 --> 00:23:18,110
are<font color="#CCCCCC"> a few product available dino Morea</font>

457
00:23:14,299 --> 00:23:21,679
<font color="#E5E5E5">pink um oh then aced and recently very</font>

458
00:23:18,110 --> 00:23:23,990
interesting<font color="#CCCCCC"> qmo TCG</font><font color="#E5E5E5"> they are the tools</font>

459
00:23:21,679 --> 00:23:25,850
frameworks however<font color="#CCCCCC"> you call it</font><font color="#E5E5E5"> that can</font>

460
00:23:23,990 --> 00:23:29,200
inject the code<font color="#E5E5E5"> while the application</font><font color="#CCCCCC"> is</font>

461
00:23:25,850 --> 00:23:32,090
executed<font color="#E5E5E5"> it's very</font><font color="#CCCCCC"> highly</font><font color="#E5E5E5"> overhead but</font>

462
00:23:29,200 --> 00:23:37,809
as<font color="#E5E5E5"> I said you</font><font color="#CCCCCC"> don't need</font><font color="#E5E5E5"> a source code</font>

463
00:23:32,090 --> 00:23:37,809
which makes a very<font color="#E5E5E5"> good for for testing</font>

464
00:23:38,440 --> 00:23:45,650
the<font color="#E5E5E5"> last thing that I would like</font><font color="#CCCCCC"> to</font>

465
00:23:41,780 --> 00:23:50,750
mention is<font color="#CCCCCC"> about different branches so I</font>

466
00:23:45,650 --> 00:23:53,149
<font color="#CCCCCC">fo become a very</font><font color="#E5E5E5"> popular tool and right</font>

467
00:23:50,750 --> 00:23:55,440
<font color="#E5E5E5">now there is a lot</font><font color="#CCCCCC"> of stuff going</font><font color="#E5E5E5"> on</font>

468
00:23:53,149 --> 00:23:56,729
<font color="#E5E5E5">around IFR so it's</font><font color="#CCCCCC"> not just simple</font>

469
00:23:55,440 --> 00:24:00,269
<font color="#E5E5E5">IFL there are different branches</font>

470
00:23:56,730 --> 00:24:03,450
<font color="#CCCCCC">available on</font><font color="#E5E5E5"> the market whatever you</font>

471
00:24:00,269 --> 00:24:05,610
want you<font color="#E5E5E5"> can just look</font><font color="#CCCCCC"> for it I just</font>

472
00:24:03,450 --> 00:24:07,710
<font color="#CCCCCC">mentioned a few there is one for</font><font color="#E5E5E5"> Android</font>

473
00:24:05,610 --> 00:24:09,928
<font color="#CCCCCC">there is one for</font><font color="#E5E5E5"> JavaScript there is one</font>

474
00:24:07,710 --> 00:24:13,350
for network<font color="#CCCCCC"> passing</font><font color="#E5E5E5"> there is one even</font>

475
00:24:09,929 --> 00:24:16,350
for Python modules<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are many</font>

476
00:24:13,350 --> 00:24:20,219
<font color="#E5E5E5">many different branches</font><font color="#CCCCCC"> I didn't mention</font>

477
00:24:16,350 --> 00:24:25,740
all<font color="#E5E5E5"> of them because there is no space</font>

478
00:24:20,220 --> 00:24:28,620
here<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the trick</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> before you</font>

479
00:24:25,740 --> 00:24:30,720
start phasing<font color="#E5E5E5"> and using the AFR and try</font>

480
00:24:28,620 --> 00:24:39,090
to<font color="#E5E5E5"> change it just just Google maybe</font>

481
00:24:30,720 --> 00:24:41,970
someone already wrote an<font color="#CCCCCC"> IFL for that so</font>

482
00:24:39,090 --> 00:24:47,428
what next<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> nothing more to say</font>

483
00:24:41,970 --> 00:24:49,940
<font color="#CCCCCC">just choose the target and fast thank</font>

484
00:24:47,429 --> 00:24:49,940
you<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

485
00:24:54,060 --> 00:25:04,860
any questions yes<font color="#CCCCCC"> I cannot provide</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> a</font>

486
00:25:01,120 --> 00:25:04,860
<font color="#CCCCCC">microphone because I don't have</font><font color="#E5E5E5"> it one</font>

487
00:25:06,450 --> 00:25:10,020
still<font color="#E5E5E5"> can hear you</font>

488
00:25:14,040 --> 00:25:23,970
<font color="#E5E5E5">ha</font><font color="#CCCCCC"> oh</font><font color="#E5E5E5"> man</font><font color="#CCCCCC"> so you said that AFL was using</font>

489
00:25:19,700 --> 00:25:25,800
genetically<font color="#E5E5E5"> determined inputs for</font>

490
00:25:23,970 --> 00:25:29,550
<font color="#CCCCCC">fuzzing the</font><font color="#E5E5E5"> data</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> was wondering whether</font>

491
00:25:25,800 --> 00:25:32,190
it<font color="#E5E5E5"> came with a preset</font><font color="#CCCCCC"> of good inputs</font>

492
00:25:29,550 --> 00:25:35,310
that<font color="#E5E5E5"> falls dwell or if I start phasing</font>

493
00:25:32,190 --> 00:25:37,710
<font color="#E5E5E5">it will start seeing which ones were</font>

494
00:25:35,310 --> 00:25:38,639
successful<font color="#E5E5E5"> and start generating new data</font>

495
00:25:37,710 --> 00:25:42,480
based on<font color="#E5E5E5"> that</font>

496
00:25:38,640 --> 00:25:44,460
so the<font color="#CCCCCC"> original AFL has doesn't have an</font>

497
00:25:42,480 --> 00:25:48,090
input<font color="#E5E5E5"> you provide the input and they</font>

498
00:25:44,460 --> 00:25:49,920
have something<font color="#E5E5E5"> called</font><font color="#CCCCCC"> mutaters so inside</font>

499
00:25:48,090 --> 00:25:56,070
the code you could see the mutaters<font color="#E5E5E5"> are</font>

500
00:25:49,920 --> 00:25:58,710
for example<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> 1 -1 255 256 right these</font>

501
00:25:56,070 --> 00:26:01,020
are<font color="#E5E5E5"> the mutaters that are</font><font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> in</font>

502
00:25:58,710 --> 00:26:02,520
<font color="#CCCCCC">iff</font><font color="#E5E5E5"> right depends what kind of</font>

503
00:26:01,020 --> 00:26:04,110
application<font color="#E5E5E5"> you</font><font color="#CCCCCC"> are testing and what</font>

504
00:26:02,520 --> 00:26:08,490
kind of set you are providing it will

505
00:26:04,110 --> 00:26:10,439
use those<font color="#E5E5E5"> set of</font><font color="#CCCCCC"> mutaters and and try to</font>

506
00:26:08,490 --> 00:26:13,890
file your input if you don't provide<font color="#E5E5E5"> it</font>

507
00:26:10,440 --> 00:26:16,500
<font color="#E5E5E5">and it will try to build from from the</font>

508
00:26:13,890 --> 00:26:18,750
stuff that that<font color="#E5E5E5"> they have right one of</font>

509
00:26:16,500 --> 00:26:21,660
the one of<font color="#E5E5E5"> the example is</font><font color="#CCCCCC"> that i show</font>

510
00:26:18,750 --> 00:26:23,760
with this<font color="#E5E5E5"> if and the</font><font color="#CCCCCC"> long-long value</font>

511
00:26:21,660 --> 00:26:25,890
right there<font color="#CCCCCC"> is not such kind of thing</font>

512
00:26:23,760 --> 00:26:27,930
inside<font color="#E5E5E5"> the</font><font color="#CCCCCC"> AFR</font><font color="#E5E5E5"> it won't never find this</font>

513
00:26:25,890 --> 00:26:29,790
kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> value right</font><font color="#E5E5E5"> it needs to go</font>

514
00:26:27,930 --> 00:26:31,530
through<font color="#E5E5E5"> iterate all the numbers right</font>

515
00:26:29,790 --> 00:26:34,850
<font color="#CCCCCC">but there is no such thing it just</font>

516
00:26:31,530 --> 00:26:37,170
<font color="#CCCCCC">sometimes try to random numbers</font><font color="#E5E5E5"> but only</font>

517
00:26:34,850 --> 00:26:39,990
<font color="#CCCCCC">for that that's why the trick is to</font>

518
00:26:37,170 --> 00:26:41,940
<font color="#E5E5E5">either provide very good inputs all</font>

519
00:26:39,990 --> 00:26:47,640
right you can you can download all the

520
00:26:41,940 --> 00:26:49,230
<font color="#E5E5E5">spectra of I would say like all the all</font>

521
00:26:47,640 --> 00:26:52,530
the inputs<font color="#CCCCCC"> that you're interested right</font>

522
00:26:49,230 --> 00:26:55,200
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> if you want</font><font color="#E5E5E5"> to test</font><font color="#CCCCCC"> PNG</font>

523
00:26:52,530 --> 00:26:58,139
files right so you can<font color="#E5E5E5"> create small big</font>

524
00:26:55,200 --> 00:26:59,400
one color<font color="#E5E5E5"> grayscale this kind of</font>

525
00:26:58,140 --> 00:27:00,810
<font color="#E5E5E5">compression this kind of compression</font>

526
00:26:59,400 --> 00:27:03,870
<font color="#E5E5E5">this kind of compression</font><font color="#CCCCCC"> right this is</font>

527
00:27:00,810 --> 00:27:06,419
good<font color="#CCCCCC"> input</font><font color="#E5E5E5"> so I know</font><font color="#CCCCCC"> all the staff can</font>

528
00:27:03,870 --> 00:27:08,760
learn from<font color="#E5E5E5"> this can you take those files</font>

529
00:27:06,420 --> 00:27:11,490
<font color="#E5E5E5">and do the stuff if you don't</font><font color="#CCCCCC"> provide</font>

530
00:27:08,760 --> 00:27:12,840
this it still can try to do it but it

531
00:27:11,490 --> 00:27:15,450
may may<font color="#CCCCCC"> not found it</font>

532
00:27:12,840 --> 00:27:18,649
<font color="#E5E5E5">I had the test when we</font><font color="#CCCCCC"> are testing JPEG</font>

533
00:27:15,450 --> 00:27:21,480
files<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I have whole set of colorful</font>

534
00:27:18,650 --> 00:27:24,190
pictures but none of<font color="#E5E5E5"> them were in</font>

535
00:27:21,480 --> 00:27:25,480
<font color="#CCCCCC">grayscale</font><font color="#E5E5E5"> and it never found it any that</font>

536
00:27:24,190 --> 00:27:28,899
can you can go through there through the

537
00:27:25,480 --> 00:27:32,080
gray scale<font color="#E5E5E5"> so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the type of the file</font>

538
00:27:28,899 --> 00:27:34,090
inside<font color="#CCCCCC"> the</font><font color="#E5E5E5"> bytes that needs to be inside</font>

539
00:27:32,080 --> 00:27:36,158
to say yeah this<font color="#E5E5E5"> was a grayscale was too</font>

540
00:27:34,090 --> 00:27:39,370
complicated for<font color="#CCCCCC"> AF oh right</font><font color="#E5E5E5"> he never</font>

541
00:27:36,159 --> 00:27:41,740
found it<font color="#E5E5E5"> when I provide just</font><font color="#CCCCCC"> one then it</font>

542
00:27:39,370 --> 00:27:44,469
goes in cascade<font color="#E5E5E5"> right and another</font>

543
00:27:41,740 --> 00:27:46,330
<font color="#E5E5E5">question</font><font color="#CCCCCC"> if you had no idea</font><font color="#E5E5E5"> about the</font>

544
00:27:44,470 --> 00:27:48,039
input you are supposed to<font color="#E5E5E5"> provide</font><font color="#CCCCCC"> for</font>

545
00:27:46,330 --> 00:27:51,639
<font color="#E5E5E5">your application where would be a good</font>

546
00:27:48,039 --> 00:27:52,990
start<font color="#E5E5E5"> so if you have a source code you</font>

547
00:27:51,639 --> 00:27:54,668
<font color="#CCCCCC">have a source code</font><font color="#E5E5E5"> or no because</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

548
00:27:52,990 --> 00:27:57,759
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is crucial question if you have a</font>

549
00:27:54,669 --> 00:27:59,649
source code<font color="#E5E5E5"> you can go what I did in my</font>

550
00:27:57,759 --> 00:28:01,539
<font color="#E5E5E5">previous presentation</font><font color="#CCCCCC"> there is a link</font>

551
00:27:59,649 --> 00:28:04,418
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can see I went with the symbolic</font>

552
00:28:01,539 --> 00:28:05,799
<font color="#E5E5E5">execution so symbolic execution can go</font>

553
00:28:04,419 --> 00:28:08,649
through all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> paths and create you</font>

554
00:28:05,799 --> 00:28:12,009
<font color="#CCCCCC">inputs</font><font color="#E5E5E5"> file right even if you don't know</font>

555
00:28:08,649 --> 00:28:15,070
what kind<font color="#CCCCCC"> of input file the</font><font color="#E5E5E5"> the symbolic</font>

556
00:28:12,009 --> 00:28:16,629
execution<font color="#E5E5E5"> tool will do that there are</font>

557
00:28:15,070 --> 00:28:18,820
from there are a few<font color="#E5E5E5"> problems with that</font>

558
00:28:16,629 --> 00:28:22,269
<font color="#E5E5E5">with those kind of tools there are very</font>

559
00:28:18,820 --> 00:28:24,668
resource and<font color="#CCCCCC"> time-consuming but for for</font>

560
00:28:22,269 --> 00:28:26,409
a beginning is very<font color="#E5E5E5"> good so we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> you</font>

561
00:28:24,669 --> 00:28:29,860
<font color="#E5E5E5">can run it for two</font><font color="#CCCCCC"> or three hours</font><font color="#E5E5E5"> and</font>

562
00:28:26,409 --> 00:28:32,649
get hundreds of of new very good<font color="#E5E5E5"> test</font>

563
00:28:29,860 --> 00:28:34,449
<font color="#E5E5E5">cases right the other thing is you can</font>

564
00:28:32,649 --> 00:28:37,899
<font color="#CCCCCC">you can I</font><font color="#E5E5E5"> don't know for example reverse</font>

565
00:28:34,450 --> 00:28:39,850
it in<font color="#E5E5E5"> Ida and dump all the constant that</font>

566
00:28:37,899 --> 00:28:45,039
that Ida found right and add as a

567
00:28:39,850 --> 00:28:46,658
dictionary<font color="#CCCCCC"> you can sorry you can you can</font>

568
00:28:45,039 --> 00:28:48,549
do the same with the source<font color="#E5E5E5"> code right</font>

569
00:28:46,659 --> 00:28:50,710
you can<font color="#E5E5E5"> go through all</font><font color="#CCCCCC"> the eaves or the</font>

570
00:28:48,549 --> 00:28:53,740
compares<font color="#E5E5E5"> although I don't know mem</font>

571
00:28:50,710 --> 00:28:56,549
copies whatever all the constants<font color="#E5E5E5"> and</font>

572
00:28:53,740 --> 00:28:59,669
again add to dictionary<font color="#CCCCCC"> and run again</font>

573
00:28:56,549 --> 00:28:59,668
thank you

574
00:29:10,690 --> 00:29:18,320
hi so if I remember<font color="#E5E5E5"> correctly from</font>

575
00:29:14,660 --> 00:29:23,090
memory<font color="#CCCCCC"> FL</font><font color="#E5E5E5"> was originally designed for</font>

576
00:29:18,320 --> 00:29:25,090
<font color="#E5E5E5">using file inputs right yes</font><font color="#CCCCCC"> is it good</font>

577
00:29:23,090 --> 00:29:29,209
now or is there a good fork for fusing

578
00:29:25,090 --> 00:29:32,360
network<font color="#E5E5E5"> input and does it have to</font><font color="#CCCCCC"> be on</font>

579
00:29:29,210 --> 00:29:34,970
the same machine<font color="#E5E5E5"> so I haven't used it</font>

580
00:29:32,360 --> 00:29:36,800
for a for a<font color="#E5E5E5"> fuzzy</font><font color="#CCCCCC"> map for input there</font><font color="#E5E5E5"> is</font>

581
00:29:34,970 --> 00:29:39,890
a branch to do that

582
00:29:36,800 --> 00:29:45,230
is it a fork<font color="#E5E5E5"> or yes yes</font><font color="#CCCCCC"> it is a</font><font color="#E5E5E5"> fork of</font>

583
00:29:39,890 --> 00:29:47,710
<font color="#CCCCCC">AFI with some add-ons</font><font color="#E5E5E5"> that allows you to</font>

584
00:29:45,230 --> 00:29:50,840
too fast the network protocols but I

585
00:29:47,710 --> 00:29:53,060
<font color="#E5E5E5">haven't seen it what about a</font><font color="#CCCCCC"> different</font>

586
00:29:50,840 --> 00:29:57,280
tool that<font color="#E5E5E5"> will be like at the</font><font color="#CCCCCC"> same level</font>

587
00:29:53,060 --> 00:30:00,679
of goodness like I fell for networking<font color="#CCCCCC"> I</font>

588
00:29:57,280 --> 00:30:03,290
don't know them is like the AFL<font color="#E5E5E5"> is right</font>

589
00:30:00,680 --> 00:30:06,260
now the<font color="#E5E5E5"> state of the art so all of all</font>

590
00:30:03,290 --> 00:30:08,800
<font color="#E5E5E5">of them try</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do do the fork that the</font>

591
00:30:06,260 --> 00:30:11,570
trick is that<font color="#CCCCCC"> AF I'll use this</font>

592
00:30:08,800 --> 00:30:14,180
instrumentation<font color="#CCCCCC"> right and this</font><font color="#E5E5E5"> is the</font>

593
00:30:11,570 --> 00:30:15,800
one<font color="#E5E5E5"> of the the importing thing crucial</font>

594
00:30:14,180 --> 00:30:17,450
things in the<font color="#CCCCCC"> phasing</font><font color="#E5E5E5"> process right</font><font color="#CCCCCC"> now</font>

595
00:30:15,800 --> 00:30:20,629
right you get<font color="#CCCCCC"> the feedback</font><font color="#E5E5E5"> and you know</font>

596
00:30:17,450 --> 00:30:24,140
which input is good which<font color="#E5E5E5"> input is no</font>

597
00:30:20,630 --> 00:30:26,690
good the different approach<font color="#E5E5E5"> you can find</font>

598
00:30:24,140 --> 00:30:30,110
a faster called Hong<font color="#E5E5E5"> fast</font><font color="#CCCCCC"> I don't know</font>

599
00:30:26,690 --> 00:30:33,040
if you heard so it's also written by by

600
00:30:30,110 --> 00:30:37,909
one of the guy of the<font color="#CCCCCC"> Google so it use</font>

601
00:30:33,040 --> 00:30:39,860
system<font color="#E5E5E5"> pervs so you can you</font><font color="#CCCCCC"> can define</font>

602
00:30:37,910 --> 00:30:41,840
<font color="#E5E5E5">what kind of</font><font color="#CCCCCC"> purse</font><font color="#E5E5E5"> you are using from</font>

603
00:30:39,860 --> 00:30:44,719
<font color="#CCCCCC">the system like how many branches you</font>

604
00:30:41,840 --> 00:30:46,490
<font color="#E5E5E5">are executing</font><font color="#CCCCCC"> or how many MS branches</font>

605
00:30:44,720 --> 00:30:49,970
you<font color="#CCCCCC"> are executing and this kind of</font><font color="#E5E5E5"> stuff</font>

606
00:30:46,490 --> 00:30:53,270
<font color="#CCCCCC">is</font><font color="#E5E5E5"> used for a feedback but I don't know</font>

607
00:30:49,970 --> 00:30:57,230
any faster that does the<font color="#E5E5E5"> same as a FL</font>

608
00:30:53,270 --> 00:31:00,860
<font color="#E5E5E5">and it's not a FL branch okay thank</font><font color="#CCCCCC"> you</font>

609
00:30:57,230 --> 00:31:07,310
<font color="#E5E5E5">thank you we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> next question here</font>

610
00:31:00,860 --> 00:31:09,610
anyone<font color="#E5E5E5"> else after so this will be the</font>

611
00:31:07,310 --> 00:31:09,610
<font color="#E5E5E5">last question</font>

612
00:31:10,510 --> 00:31:16,490
hello great presentation the question of

613
00:31:13,190 --> 00:31:18,230
them my question is so if<font color="#CCCCCC"> you you serve</font>

614
00:31:16,490 --> 00:31:20,210
a<font color="#CCCCCC"> field a certain file that has a</font>

615
00:31:18,230 --> 00:31:21,020
certain<font color="#E5E5E5"> format can you specify it</font>

616
00:31:20,210 --> 00:31:23,840
somehow

617
00:31:21,020 --> 00:31:26,150
<font color="#CCCCCC">okay pl-please mutate mutate this but</font>

618
00:31:23,840 --> 00:31:27,709
ignore this part<font color="#E5E5E5"> for example ignore the</font>

619
00:31:26,150 --> 00:31:29,810
parts<font color="#CCCCCC"> that indicate</font><font color="#E5E5E5"> that this is</font><font color="#CCCCCC"> going</font>

620
00:31:27,710 --> 00:31:33,650
<font color="#E5E5E5">to be a certain header that needs to be</font>

621
00:31:29,810 --> 00:31:36,950
<font color="#E5E5E5">there so right</font><font color="#CCCCCC"> now no</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I FL can learn</font>

622
00:31:33,650 --> 00:31:39,350
that so<font color="#CCCCCC"> IFL doing the process of of</font>

623
00:31:36,950 --> 00:31:41,420
mutating can learn that for example<font color="#E5E5E5"> this</font>

624
00:31:39,350 --> 00:31:44,600
part of the code is<font color="#CCCCCC"> not for to mutate</font>

625
00:31:41,420 --> 00:31:47,930
anymore<font color="#CCCCCC"> and this part of the code</font><font color="#E5E5E5"> it is</font>

626
00:31:44,600 --> 00:31:50,480
so then you can there is<font color="#E5E5E5"> there is a tool</font>

627
00:31:47,930 --> 00:31:52,730
for<font color="#CCCCCC"> FL FL map or something similar that</font>

628
00:31:50,480 --> 00:31:54,860
<font color="#E5E5E5">shows you that yet this this piece of</font>

629
00:31:52,730 --> 00:31:56,810
the file is something responsible<font color="#E5E5E5"> for</font>

630
00:31:54,860 --> 00:31:59,300
for a length or something this<font color="#CCCCCC"> is for</font>

631
00:31:56,810 --> 00:32:00,950
this this<font color="#E5E5E5"> is for this so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> FL somehow</font>

632
00:31:59,300 --> 00:32:03,020
<font color="#E5E5E5">learned that but there is I</font><font color="#CCCCCC"> don't know</font>

633
00:32:00,950 --> 00:32:04,880
the way that<font color="#CCCCCC"> you can you can say that</font>

634
00:32:03,020 --> 00:32:08,030
<font color="#E5E5E5">don't</font><font color="#CCCCCC"> fast this piece of the part of the</font>

635
00:32:04,880 --> 00:32:10,070
file<font color="#CCCCCC"> no I</font><font color="#E5E5E5"> don't I don't know that</font><font color="#CCCCCC"> okay</font>

636
00:32:08,030 --> 00:32:12,920
<font color="#CCCCCC">so</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> hundred question if I may</font>

637
00:32:10,070 --> 00:32:15,050
sure<font color="#E5E5E5"> if you had any experience with lib</font>

638
00:32:12,920 --> 00:32:16,850
<font color="#CCCCCC">buzzer can you compare their mutation</font>

639
00:32:15,050 --> 00:32:19,730
engines which one is better and why are

640
00:32:16,850 --> 00:32:21,439
there similar so there is they<font color="#CCCCCC"> are</font>

641
00:32:19,730 --> 00:32:23,990
<font color="#E5E5E5">working in</font><font color="#CCCCCC"> different ways right</font>

642
00:32:21,440 --> 00:32:25,640
classic<font color="#E5E5E5"> AF all works</font><font color="#CCCCCC"> each time it runs</font>

643
00:32:23,990 --> 00:32:28,760
the application go through everything

644
00:32:25,640 --> 00:32:30,800
and an exit from the<font color="#CCCCCC"> application</font><font color="#E5E5E5"> right</font>

645
00:32:28,760 --> 00:32:35,420
<font color="#CCCCCC">lip visor is just running</font><font color="#E5E5E5"> the same</font>

646
00:32:30,800 --> 00:32:37,610
function many times right<font color="#CCCCCC"> it's very</font>

647
00:32:35,420 --> 00:32:40,250
<font color="#E5E5E5">difficult to compare that because</font>

648
00:32:37,610 --> 00:32:41,919
<font color="#E5E5E5">sometimes it's happened that for example</font>

649
00:32:40,250 --> 00:32:45,560
if you fast

650
00:32:41,920 --> 00:32:47,240
if<font color="#CCCCCC"> you've has a function that inside use</font>

651
00:32:45,560 --> 00:32:49,010
some<font color="#E5E5E5"> kind of resources right and there</font>

652
00:32:47,240 --> 00:32:50,720
is<font color="#CCCCCC"> a</font><font color="#E5E5E5"> bag that the resources are not back</font>

653
00:32:49,010 --> 00:32:52,580
to the<font color="#E5E5E5"> system</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> facet one</font><font color="#CCCCCC"> one</font>

654
00:32:50,720 --> 00:32:54,980
<font color="#CCCCCC">thousand time so at some point</font><font color="#E5E5E5"> it will</font>

655
00:32:52,580 --> 00:32:56,689
crash but you will<font color="#E5E5E5"> never get this inside</font>

656
00:32:54,980 --> 00:32:58,490
the<font color="#E5E5E5"> FT inside the application because</font>

657
00:32:56,690 --> 00:33:00,290
<font color="#E5E5E5">each time the application exits the</font>

658
00:32:58,490 --> 00:33:01,730
system automatically<font color="#E5E5E5"> release those</font>

659
00:33:00,290 --> 00:33:04,610
<font color="#E5E5E5">resources right so these</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> the</font>

660
00:33:01,730 --> 00:33:08,120
<font color="#E5E5E5">problems</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are not you cannot compare</font>

661
00:33:04,610 --> 00:33:10,159
right<font color="#CCCCCC"> so everything depends</font><font color="#E5E5E5"> what kind of</font>

662
00:33:08,120 --> 00:33:11,840
function<font color="#CCCCCC"> it's there is no one answer</font>

663
00:33:10,160 --> 00:33:13,820
<font color="#E5E5E5">this is better this is</font><font color="#CCCCCC"> worst</font>

664
00:33:11,840 --> 00:33:16,010
everything depends what what you want to

665
00:33:13,820 --> 00:33:21,260
<font color="#CCCCCC">find</font><font color="#E5E5E5"> right the question is also</font><font color="#CCCCCC"> if it's</font>

666
00:33:16,010 --> 00:33:23,240
better<font color="#E5E5E5"> to fast PDF</font><font color="#CCCCCC"> or images right fr it</font>

667
00:33:21,260 --> 00:33:26,060
may be not<font color="#CCCCCC"> very</font><font color="#E5E5E5"> good with PDF it's much</font>

668
00:33:23,240 --> 00:33:28,970
better with image files<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same is here</font>

669
00:33:26,060 --> 00:33:32,149
<font color="#CCCCCC">Lib faster is for one thing and</font><font color="#E5E5E5"> I FL is</font>

670
00:33:28,970 --> 00:33:33,680
for for the second thing right<font color="#E5E5E5"> or you</font>

671
00:33:32,150 --> 00:33:35,809
should use both

672
00:33:33,680 --> 00:33:38,920
the best solution<font color="#CCCCCC"> is</font><font color="#E5E5E5"> used both and feed</font>

673
00:33:35,809 --> 00:33:41,360
them each other<font color="#CCCCCC"> if it's possible right</font>

674
00:33:38,920 --> 00:33:44,150
sometimes<font color="#E5E5E5"> it's not sometimes you you</font>

675
00:33:41,360 --> 00:33:46,309
just<font color="#CCCCCC"> fast the part of the file which you</font>

676
00:33:44,150 --> 00:33:49,430
<font color="#E5E5E5">feed the function but if they are the</font>

677
00:33:46,309 --> 00:33:51,320
same<font color="#E5E5E5"> use both like there is there is no</font>

678
00:33:49,430 --> 00:33:53,240
problem<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use three or</font><font color="#CCCCCC"> four phasers no</font>

679
00:33:51,320 --> 00:33:54,889
one said<font color="#CCCCCC"> you cannot do it you</font><font color="#E5E5E5"> can you</font>

680
00:33:53,240 --> 00:33:56,930
can<font color="#E5E5E5"> run different faster and if it is</font>

681
00:33:54,890 --> 00:33:57,730
<font color="#CCCCCC">out with with the inputs there is no no</font>

682
00:33:56,930 --> 00:34:00,559
problem with that

683
00:33:57,730 --> 00:34:06,260
<font color="#E5E5E5">just whatever you have you can run it</font>

684
00:34:00,559 --> 00:34:08,509
right so this was<font color="#E5E5E5"> Mark Smith</font><font color="#CCCCCC"> sworsky</font>

685
00:34:06,260 --> 00:34:09,090
<font color="#E5E5E5">from</font><font color="#CCCCCC"> Sai</font><font color="#E5E5E5"> serie thank you very much very</font>

686
00:34:08,510 --> 00:34:14,699
<font color="#CCCCCC">much</font>

687
00:34:09,090 --> 00:34:14,699
[Applause]

