1
00:00:11,490 --> 00:00:14,610
today

2
00:00:14,610 --> 00:00:28,849
detail looking at each other in a second
but first I'm Josh Charles we are with

3
00:00:28,849 --> 00:00:36,180
the transport means to us is a kind of
our indy shop for hire / consulting firm

4
00:00:36,180 --> 00:00:40,600
for security and cyber related things
been in business for a couple of years

5
00:00:40,600 --> 00:00:49,190
we tends to either do it now says for
like major cell phone manufacturers will

6
00:00:49,190 --> 00:00:54,500
bring us into look at maybe a new sock
that they're looking to put the film or

7
00:00:54,500 --> 00:00:59,070
maybe the next consulting engagement
will do is someone asking about smart

8
00:00:59,070 --> 00:01:04,019
grid we definitely we go deep and broad
on our topics

9
00:01:04,019 --> 00:01:07,729
the other thing that we've been doing
more and more recently because people

10
00:01:07,729 --> 00:01:16,590
ask is trying to figure out how to use
it he he's or how to replace TV's or if

11
00:01:16,590 --> 00:01:25,729
they can trust the city so we do not
have the same the world is is good you

12
00:01:25,729 --> 00:01:30,170
may be so I would like to caviar right
up front of we have never looked at

13
00:01:30,170 --> 00:01:38,869
Sonic and if we say anything that you
disagree with please costs we're gonna

14
00:01:38,869 --> 00:01:48,000
primarily be focused on Qualcomm stock
so in theory and we saw a lot of this in

15
00:01:48,000 --> 00:01:55,180
the last set of slides too especially
the diagrams from the arm Consortium for

16
00:01:55,180 --> 00:02:01,159
how trusted execution should work
remember that those are white paper

17
00:02:01,159 --> 00:02:06,380
documents that is a theory arm arm
itself does not really make a chip

18
00:02:06,380 --> 00:02:12,890
design for a processor processor gets
implemented by companies like Qualcomm

19
00:02:12,890 --> 00:02:20,500
and so it is a reference guide is how
you expect that ship to behave in the

20
00:02:20,500 --> 00:02:26,440
chips do come out of the factory
behaving like that to some extent there

21
00:02:26,440 --> 00:02:33,060
are implementation details between
design in and actually what gives

22
00:02:33,060 --> 00:02:38,230
shifting your phone there are maybe a
little more squishy just because the way

23
00:02:38,230 --> 00:02:44,260
they're designed so you mentioned secure
boot forty how that works on a Qualcomm

24
00:02:44,260 --> 00:02:49,720
chip is you've got two to four cores are
sitting on your phone doing processing

25
00:02:49,720 --> 00:02:55,620
40 is what's going to be running trust
so so in the boot chain you put power to

26
00:02:55,620 --> 00:02:56,720
your phone

27
00:02:56,720 --> 00:03:01,520
you get a very small stage 1 bootloader
that does a little bit start spinning up

28
00:03:01,520 --> 00:03:07,760
the processors she have staged 2.1 2.8
depending on the docks just a little

29
00:03:07,760 --> 00:03:12,910
more that actually spends up trusts
under which plane from that point on

30
00:03:12,910 --> 00:03:19,120
trust only running in court 0 will
validate everything else but there's

31
00:03:19,120 --> 00:03:24,209
still a chance on itself is being
validated by an external source that

32
00:03:24,209 --> 00:03:36,840
ends up being the power management on
your phone so it's it's it's trusted but

33
00:03:36,840 --> 00:03:46,060
it's still slightly machine on occasion
so things like that looks great in a

34
00:03:46,060 --> 00:03:52,640
design from army but then when you look
at implementation there are points that

35
00:03:52,640 --> 00:03:58,480
you can put it may or may not fail

36
00:03:58,480 --> 00:04:07,370
you think we are you talk about this I
mean it's hyped as a let's take

37
00:04:07,370 --> 00:04:12,129
something that we wished was all secure
which was an Android phone and a Linux

38
00:04:12,129 --> 00:04:15,599
kernel and all that stuff and let's just
go ahead and accept that it's not going

39
00:04:15,599 --> 00:04:20,070
to be fully secure for everything so
it's magically do something else that's

40
00:04:20,070 --> 00:04:24,790
going to be secure there is another
operating system running on the same

41
00:04:24,790 --> 00:04:29,990
chip in his own little box and just
pretend that if we couldn't secure this

42
00:04:29,990 --> 00:04:34,060
big thing maybe we can secure this
little thing and in Syria we can write

43
00:04:34,060 --> 00:04:43,130
but this little thing is only secure
when we know all the code that's running

44
00:04:43,130 --> 00:04:48,440
in and we trust all the codes its
raining in it

45
00:04:48,440 --> 00:05:00,340
by like everyone else we have a whole
bunch of things that we would love to

46
00:05:00,340 --> 00:05:05,299
see happen we'd love to see truly secure
banking are you the most about evil one

47
00:05:05,300 --> 00:05:18,800
out but what she really is at the end of
the day is DRM so the movie theaters the

48
00:05:18,800 --> 00:05:25,110
movie studios cell phone providers
what's not up here as you also have

49
00:05:25,110 --> 00:05:30,510
another slew of companies writing code
that runs in the trusted environment

50
00:05:30,510 --> 00:05:35,570
which is actual manufacturer Samsung
will have specific Motorola will have

51
00:05:35,570 --> 00:05:41,330
specific code they all have vague API is
that they're supposed to follow but it

52
00:05:41,330 --> 00:05:50,270
the Indus today it is a bunch a bunch of
companies writing code that is not in

53
00:05:50,270 --> 00:05:57,849
any way open for public or reviewable at
all and its shoved into a very black box

54
00:05:57,850 --> 00:06:02,640
that's very hard to do an assessment on
to see if its good security code or not

55
00:06:02,640 --> 00:06:09,760
so it's kind of like this big blob of
Code Red my whole bunch of companies

56
00:06:09,760 --> 00:06:15,360
that aren't really writing it to be
secure it is written to be hard to get

57
00:06:15,360 --> 00:06:22,610
to a lot of times which is different
than trying to ready to be secure

58
00:06:22,610 --> 00:06:26,629
also discussing the clock and
implementation I receive get DRM running

59
00:06:26,629 --> 00:06:33,310
over there we had confuses which are
basically one-time global fuses you have

60
00:06:33,310 --> 00:06:35,719
16 K

61
00:06:35,719 --> 00:06:50,330
fuses sitting inside T inside trust
itself this user like used to burden to

62
00:06:50,330 --> 00:06:58,008
talk to the cell towers there the space
key for the phone to the base keys for

63
00:06:58,009 --> 00:07:05,400
your provider's these are all said
one-time programmable discovered that I

64
00:07:05,400 --> 00:07:11,330
was published before the show you how to
burn fuses so you can write your own

65
00:07:11,330 --> 00:07:18,359
fuses it's not very easy to read all of
the fuses there are some that are

66
00:07:18,360 --> 00:07:22,669
accessible from usually and or at least
from the kernel there's others that are

67
00:07:22,669 --> 00:07:28,849
only accessible from inside trust

68
00:07:28,849 --> 00:07:35,599
that is held up so far but I don't feel
like we hoped that hard trying to be all

69
00:07:35,599 --> 00:07:39,849
of the fuses but they are we we know
where they are and we know how to access

70
00:07:39,849 --> 00:07:58,899
specific stuff so it's going to be
somewhat controlled or at least the

71
00:07:58,899 --> 00:08:01,819
flags for locking and unlocking
bootloader will be control themselves

72
00:08:01,819 --> 00:08:12,080
he's secure boot settings on call home
in particular Jaytech so can you hear in

73
00:08:12,080 --> 00:08:19,359
debug my phone there is a fuse that can
be blown that cistern JTAG off Qualcomm

74
00:08:19,360 --> 00:08:22,580
in their documentation highly suggested
she blew this useful for you

75
00:08:22,580 --> 00:08:26,959
mass-producing ship devices had to end
consumers there's a huge right next to

76
00:08:26,959 --> 00:08:34,000
it the says okay I was heading turn
Jaytech back on because they want the

77
00:08:34,000 --> 00:08:38,630
ability for us to get broken out the
real world and come back to be looked at

78
00:08:38,630 --> 00:08:44,208
they want us comes to the attacks to be
able to JTAG forget what happened with

79
00:08:44,208 --> 00:08:48,649
the hardware that makes a lot of logical
sense and then there's a third use the

80
00:08:48,649 --> 00:08:52,339
caucuses don't ever blow because you'll
never be able to change a tire back on

81
00:08:52,339 --> 00:08:59,819
the does fully channels again so I mean
it's logical things that make logical

82
00:08:59,819 --> 00:09:03,729
sense and then you put them in a device
that goes out to customers in and get

83
00:09:03,730 --> 00:09:07,899
squishy and mushy and there's ways for
security researchers to polka make

84
00:09:07,899 --> 00:09:13,290
things happen it shouldn't

85
00:09:13,290 --> 00:09:25,139
simpson also saw this picture that we're
not supposed to make a bigger problems

86
00:09:25,139 --> 00:09:31,959
just having a decade all is the Qualcomm
layout for what is in the 8960 does

87
00:09:31,959 --> 00:09:39,719
anyone have a Samsung past two years or
motorola's home in the past two years

88
00:09:39,720 --> 00:09:45,370
anyone sure okay it's that sock is
what's running in your pocket rate down

89
00:09:45,370 --> 00:09:52,589
you have four cores the whole bunch of
memory a lot of personal shit so nice

90
00:09:52,589 --> 00:10:03,420
little chip

91
00:10:03,420 --> 00:10:06,719
the other thing that we have worked out
before we get into the problems that we

92
00:10:06,720 --> 00:10:16,590
have found there are buses that are
accessible directly into muscle memory

93
00:10:16,590 --> 00:10:20,180
into the secure memory space

94
00:10:20,180 --> 00:10:25,160
potentially manipulator belittle
hardware level and maybe a kernel level

95
00:10:25,160 --> 00:10:38,650
has failed so far but they still seem
slightly problematic everyone in the

96
00:10:38,650 --> 00:10:44,800
Android world pretty much running some
variant of trust on blackberrys doing

97
00:10:44,800 --> 00:10:47,370
the same thing Windows Phones you doing
the same thing

98
00:10:47,370 --> 00:10:54,350
hardware level they're all really
interacting as mentioned a little for

99
00:10:54,350 --> 00:11:00,060
basically the main interaction point
between user and kernel and trusted

100
00:11:00,060 --> 00:11:14,699
execution secure world is the SMC calls
always always fully public published

101
00:11:14,700 --> 00:11:26,850
these are the guys that you shall use
yes but you can get all of them

102
00:11:26,850 --> 00:11:32,959
recovered really well unless talks I
won't go into it but there's there's

103
00:11:32,959 --> 00:11:37,949
basically the four ways to talk talk to
it or what it can talk to some see calls

104
00:11:37,949 --> 00:11:46,839
the obvious correct path vector places
that you can enter actions the shared

105
00:11:46,839 --> 00:11:51,130
memory is already covered hopefully it's
always shared on the other side of the

106
00:11:51,130 --> 00:12:00,889
wall that's not always the case and then
peripherals we are taking a big box

107
00:12:00,889 --> 00:12:05,649
which is the Android Linux kernel
calling it in security and then making

108
00:12:05,649 --> 00:12:08,569
another smaller box inside that box and
saying this is going to be secure

109
00:12:08,569 --> 00:12:17,420
because it's a colonel inside of the
kernel inside this kernel it is small so

110
00:12:17,420 --> 00:12:21,069
we lose a lot of the protections that we
would actually have a higher layer right

111
00:12:21,069 --> 00:12:28,540
we don't have the hills ASLR we don't
have depth there there's no all of these

112
00:12:28,540 --> 00:12:34,569
trusts trusts his own is built on the
fact that you as an attacker could not

113
00:12:34,569 --> 00:12:40,209
be able to do anything in that world
that is the for the most part that is

114
00:12:40,209 --> 00:12:45,109
the sole protection there is the
assumption that that wall is unreachable

115
00:12:45,110 --> 00:12:54,370
inside while inside the secure World as
of a couple of years ago it used to be

116
00:12:54,370 --> 00:13:00,649
one just big blob jumble of code now it
is a little more architected but you

117
00:13:00,649 --> 00:13:05,240
still have a lot of interest during cold
in there that you can't see and everyone

118
00:13:05,240 --> 00:13:08,990
just believes it's good because you do
have that one wall of separation but we

119
00:13:08,990 --> 00:13:22,710
lose all of the other protections that
we would have a hurler

120
00:13:22,710 --> 00:13:28,510
as you would expect from multiple
vendors doing multiple things side of a

121
00:13:28,510 --> 00:13:32,730
black box some of them follow the call
comes back on how to do things some of

122
00:13:32,730 --> 00:13:38,040
them go over smarter than Qualcomm will
do it ourselves have a lot of

123
00:13:38,040 --> 00:13:47,640
combinations were to trust our insider
stock also has the ability to reach out

124
00:13:47,640 --> 00:13:51,400
and talk to other person feels so you
can have a direct channel to the

125
00:13:51,400 --> 00:14:08,089
baseband interesting today due to time

126
00:14:08,089 --> 00:14:56,150
what is called

127
00:14:56,150 --> 00:15:06,709
just taking a quick step back these Sen
cause which is how the Android kernel

128
00:15:06,710 --> 00:15:11,440
interface with the trust execution
environment Qualcomm this is what it

129
00:15:11,440 --> 00:15:16,460
exposes its kind of NiSource I really
important what's shown there but the

130
00:15:16,460 --> 00:15:21,820
important thing is there's fifty sixty
some are some sent in that range

131
00:15:21,820 --> 00:15:25,300
different functions that we can attack
so that's really did you see that tax

132
00:15:25,300 --> 00:15:32,160
service beyond these different vendor
weekend they might add additional

133
00:15:32,160 --> 00:15:36,480
functionality so the previous life was
what Qualcomm provides and then Williams

134
00:15:36,480 --> 00:15:43,970
add something new and so my personal
favorite one on this is this is this

135
00:15:43,970 --> 00:15:50,990
what's called a podium do something the
Xperia and it's also on the HTC One so

136
00:15:50,990 --> 00:15:56,920
if you look at it actually doesn't do
anything but you can tell that Qualcomm

137
00:15:56,920 --> 00:16:02,280
gauge like a developer to to someone who
has never developed a key before and

138
00:16:02,280 --> 00:16:07,010
that's the bug code that they just left
in because they're not familiar with it

139
00:16:07,010 --> 00:16:12,270
so you kind of have this impression that
the informant who ever implemented these

140
00:16:12,270 --> 00:16:16,720
functions is kind of making it work they
don't really know the environment that

141
00:16:16,720 --> 00:16:21,880
they're operating in and so I think this
might be a great you know attack vector

142
00:16:21,880 --> 00:16:29,360
this is a good place to look for trying
to compromise the integrity of trust and

143
00:16:29,360 --> 00:16:35,370
again you know that the problem is it's
closed source that has to do with DRM

144
00:16:35,370 --> 00:16:40,430
protecting private keys is not something
people want publicly available so it's a

145
00:16:40,430 --> 00:16:46,370
big black box and you have the chip
manufacturers of Qualcomm Nvidia you

146
00:16:46,370 --> 00:16:52,010
have the OMC carriers that are putting
their bootloader unlocking the carrier

147
00:16:52,010 --> 00:16:52,769
or not

148
00:16:52,769 --> 00:16:58,249
r you have maybe Netflix who is trying
to do their own dear

149
00:16:58,249 --> 00:17:05,089
discredits discredits the company that
sells Durham software vendors and that

150
00:17:05,089 --> 00:17:09,480
software can find its way into trust so
you can add up with like open source

151
00:17:09,480 --> 00:17:22,299
libraries here to OpenSSL stuffing their
ashes are you surprised that so I'm

152
00:17:22,299 --> 00:17:25,299
really gonna walk through and I
apologize because it was kind of a lot

153
00:17:25,299 --> 00:17:32,590
of source code here but we were curious
if we if trust loan secure know what is

154
00:17:32,590 --> 00:17:38,730
secure means should we use it and so we
tried to answer it now has got feelings

155
00:17:38,730 --> 00:17:42,110
but actually try to compromise and so
I'm gonna walk through the process that

156
00:17:42,110 --> 00:17:46,490
we did an end up with an exploit that
runs to give this arbitrary code

157
00:17:46,490 --> 00:17:53,289
execution on HTC devices one of the
questions are always given I get this is

158
00:17:53,289 --> 00:18:00,649
like how to get the dress on images it
seems really complex but Android you

159
00:18:00,649 --> 00:18:05,649
just find the name block devices and
there's one name trust them and then you

160
00:18:05,649 --> 00:18:09,989
can just didi dad and then you have
address on image so now you service

161
00:18:09,990 --> 00:18:13,220
engineering that trying to find
vulnerabilities and trying to identify

162
00:18:13,220 --> 00:18:22,520
how it works so getting dress on image
areas talked about these SEM those are

163
00:18:22,520 --> 00:18:27,730
secure channel monitor calls which
executes Witcher invoked by the arm

164
00:18:27,730 --> 00:18:34,330
secure monitor called instruction so
there's SCM in SMC in the very tightly

165
00:18:34,330 --> 00:18:41,428
related but the kernel so only the
Android kernel of this can be done for

166
00:18:41,429 --> 00:18:45,159
userspace so only the current to talk to
the trusted execution environment with

167
00:18:45,159 --> 00:18:51,350
the SEC instruction and the way that
does it is it but the request in memory

168
00:18:51,350 --> 00:18:54,918
and it puts its response buffer after
that

169
00:18:54,919 --> 00:19:00,580
and the responsible for has a flag that
says is this request and that flag is

170
00:19:00,580 --> 00:19:05,289
the trusted execution environment and
social issue that request and then I'll

171
00:19:05,289 --> 00:19:09,700
start pulling that flag and once the
trusted and execution environment sets

172
00:19:09,700 --> 00:19:17,070
that can handle the response more detail
in the Android Open Source look they're

173
00:19:17,070 --> 00:19:28,230
furious but is it really got a little so
we have to reverse engineer it to figure

174
00:19:28,230 --> 00:19:33,489
out how everything works that big table
that we had before we generated that

175
00:19:33,489 --> 00:19:38,739
because very conveniently with interest
thereon is this table and this is just a

176
00:19:38,739 --> 00:19:44,179
snippet of it but what it contains is an
ideal for each function the name of what

177
00:19:44,179 --> 00:19:46,070
that function is so we know what it does

178
00:19:46,070 --> 00:19:48,749
which is very convenient for her
standing there so I don't actually

179
00:19:48,749 --> 00:19:55,749
figure out what it does mean has values
it returns so if it returns a buffer

180
00:19:55,749 --> 00:20:01,809
shared buffer or just like a return code
success or failure it has a function

181
00:20:01,809 --> 00:20:07,999
pointer to what handles that on the
Trust's inside and then it has kind of a

182
00:20:07,999 --> 00:20:14,570
very hard to see but thats 244 what that
means is it takes into parameters the

183
00:20:14,570 --> 00:20:19,480
first parameter is 4 bytes long second
parameters for fights so using this you

184
00:20:19,480 --> 00:20:23,570
can get a very good understanding of
what they taken his arguments how

185
00:20:23,570 --> 00:20:33,580
they're processed products are starting
from here we started looking at HTC HTC

186
00:20:33,580 --> 00:20:38,649
because there are some really nice long
since they exposed read memory right now

187
00:20:38,649 --> 00:20:45,609
remember the like may have been naive I
really thought I could invoke name copy

188
00:20:45,609 --> 00:20:49,949
and then just gotta trust owned and data
may be extracted is now be really cool

189
00:20:49,950 --> 00:20:56,570
to be agreed targets as well and 4 p.m.
copy and compromising

190
00:20:56,570 --> 00:21:03,450
for tonight wasn't quite that simple ACC
does this need thing where they have

191
00:21:03,450 --> 00:21:11,740
this bit mask and whenever one of those
SEM services is no longer needed a

192
00:21:11,740 --> 00:21:18,210
disabled so doesn't do this so even if
you know one of those services were

193
00:21:18,210 --> 00:21:22,139
never really need to use it is only used
to secure boot it still available so

194
00:21:22,139 --> 00:21:27,639
there's a vulnerability can still be
triggered from the Android side so I can

195
00:21:27,639 --> 00:21:33,508
only call comes doing in terms of you
know he might have an idea twenty and

196
00:21:33,509 --> 00:21:39,870
this is service is disabled it is a
global bit mask and if the 20th is one

197
00:21:39,870 --> 00:21:49,928
you can invoke the service the 20th 0
you can so kind of anything okay

198
00:21:49,929 --> 00:21:51,170
so

199
00:21:51,170 --> 00:21:56,160
vulnerability that we found within
Qualcomm or ACC's Qualcomm

200
00:21:56,160 --> 00:22:02,650
implementation it's implemented its OEM
discredits something that discredits

201
00:22:02,650 --> 00:22:09,690
added for doing the area and we control
both parameters so because we control

202
00:22:09,690 --> 00:22:15,320
the primaries and in the example trusted
application that the previous stock had

203
00:22:15,320 --> 00:22:20,159
it had a check saying let's make sure
the buffer that I'm provided is from the

204
00:22:20,160 --> 00:22:27,820
non-secure world there's no check that
the buffer zone unsecured world so this

205
00:22:27,820 --> 00:22:34,169
gives us the ability to make any address
and trust them or really on the entire

206
00:22:34,170 --> 00:22:36,920
memory of the of the phone

207
00:22:36,920 --> 00:22:41,920
overwrite it with the value of its
global that happens always be zero so

208
00:22:41,920 --> 00:22:54,110
have we can make any address on the
device could start elsewhere and ACC's

209
00:22:54,110 --> 00:22:59,709
implementation we do see Sun address
validation what it's trying to make sure

210
00:22:59,710 --> 00:23:06,200
is this is another awesome service and
it's doing validation the buffer that

211
00:23:06,200 --> 00:23:11,070
you provide validation that it's doing
is saying are you trying to write to

212
00:23:11,070 --> 00:23:16,159
trust their memory if you are avail

213
00:23:16,160 --> 00:23:24,900
ok that's good I guess I'm doing
something but their problems with this

214
00:23:24,900 --> 00:23:32,850
if you provide a very large link you get
an integer overflow and you can trigger

215
00:23:32,850 --> 00:23:40,570
rights but if you provide something
greater than 280 3 F's eros it right

216
00:23:40,570 --> 00:23:46,310
there and interesting thing about eight
cc's implementation is described texts

217
00:23:46,310 --> 00:23:54,659
code was so large that trust them and
expanded past this constant value which

218
00:23:54,660 --> 00:23:59,890
is normally where tyson ended so you can
actually write two portions of trust

219
00:23:59,890 --> 00:24:12,160
with you know despite the validation and
it's very complex it's got tons of rules

220
00:24:12,160 --> 00:24:17,480
that might have exposed memory and this
is really only checking the region of

221
00:24:17,480 --> 00:24:21,540
memory that trust funds in there are
plenty of other secure memory segments

222
00:24:21,540 --> 00:24:27,420
that you could then use this to kind of
bypassing over eight so

223
00:24:27,420 --> 00:24:33,650
major problems with the validation that
it's easy does here

224
00:24:33,650 --> 00:24:39,070
nice or not super important or going
back to them copy that I really want to

225
00:24:39,070 --> 00:24:46,520
use that they'll be fine rain but he's
doing is it saying is my service enables

226
00:24:46,520 --> 00:24:52,300
yes I know turns out they do disabled it
so I feel right there if they didn't

227
00:24:52,300 --> 00:24:57,600
disable it to do in that same sort of
checking for McCartney into her from

228
00:24:57,600 --> 00:25:01,120
trust on memory and I'm trying to
overexpress known I would feel there

229
00:25:01,120 --> 00:25:10,080
again then they do more validation and
not important

230
00:25:10,080 --> 00:25:14,250
so when I want you know I'm trying to
compromise this thing would be really

231
00:25:14,250 --> 00:25:19,190
nice if that was the implementation of
them copy because that's what in my head

232
00:25:19,190 --> 00:25:23,470
that's what many copies should be right
where I provide the source to

233
00:25:23,470 --> 00:25:28,820
destination the link then override any
data that I was interested but

234
00:25:28,820 --> 00:25:34,730
unfortunately is a validation disabling
being very annoying so what can we do

235
00:25:34,730 --> 00:25:40,659
about it is all we have is a little
silly raid 0 vulnerability we try to a

236
00:25:40,659 --> 00:25:46,110
bunch of things before having this
realization of they couldn't possibly

237
00:25:46,110 --> 00:25:55,459
had done something is done so quick
refresher arm and thumb and unload zeros

238
00:25:55,460 --> 00:26:06,029
is not constructive moves are 00 and our
mood it's also not so suddenly our

239
00:26:06,029 --> 00:26:14,000
rights your availability is a right not
a reality we do with you right now

240
00:26:14,000 --> 00:26:22,250
bility is here's the assembly from the
main copy and all that validation that

241
00:26:22,250 --> 00:26:27,260
we saw before we just remove it so the
only thing that's left is the continent

242
00:26:27,260 --> 00:26:33,070
copy and returning success which is
exactly what we want to do

243
00:26:33,070 --> 00:26:40,049
so here's final exploit code for what we
have it set in lines this is not a

244
00:26:40,049 --> 00:26:47,029
complex exploit this is very
straightforward all we do is we

245
00:26:47,029 --> 00:26:51,470
Alcocer remove all the validation and
then we invoke min copy of card copy

246
00:26:51,470 --> 00:26:57,480
arbitrary data into or out of trust them
so to be clear we're writing these euros

247
00:26:57,480 --> 00:27:01,419
these not instructions which are being
executed with interest so so this gives

248
00:27:01,419 --> 00:27:05,139
us the ability to run arbitrary code
with interest them as we can now use

249
00:27:05,139 --> 00:27:11,918
this to copy cellco would override trust
on memory extract he's this gives this

250
00:27:11,919 --> 00:27:19,659
is keys to the kingdom with seven lines
of code should say this is something

251
00:27:19,659 --> 00:27:25,399
that is a problem with HTC's
implementation but the larger problem

252
00:27:25,399 --> 00:27:30,758
here is an architectural 12 stone or
Qualcomm stress on doesn't have these

253
00:27:30,759 --> 00:27:36,950
predictions that you would normally
expect that it's it's written in such a

254
00:27:36,950 --> 00:27:40,350
way to your passing physical memory
buffers back and forth which relies on

255
00:27:40,350 --> 00:27:44,709
every single one of these services to do
proper validation if one of those

256
00:27:44,710 --> 00:27:46,779
services doesn't it's game over

257
00:27:46,779 --> 00:27:52,580
you get arbitrary code execution and we
had this one very simple right

258
00:27:52,580 --> 00:27:58,309
vulnerability and using this right
vulnerability we can gain arbitrary code

259
00:27:58,309 --> 00:28:02,629
execution and its architect in such a
way that only vulnerabilities that

260
00:28:02,629 --> 00:28:11,049
you're going to find our rightful
abilities so it's it's it's it's it's

261
00:28:11,049 --> 00:28:17,899
where I want to put my trust in this is
going to be a very secure environment is

262
00:28:17,899 --> 00:28:22,008
going to protect my personal information
it might be fine for protecting

263
00:28:22,009 --> 00:28:26,860
care about songs like that please

264
00:28:26,860 --> 00:28:40,709
so when we first came up with this
actually I we had a feeling that the

265
00:28:40,710 --> 00:28:44,820
previous stress on top is going to cover
a lot of the introductory material and

266
00:28:44,820 --> 00:28:48,830
so we gonna get through this very
quickly so you kind of frantically out

267
00:28:48,830 --> 00:28:54,230
of content so bear with us but when we
first found this vulnerability we made

268
00:28:54,230 --> 00:28:57,290
this claim that its its architect in
such a way that you're going to sign

269
00:28:57,290 --> 00:29:00,710
right vulnerabilities and he's right
point abilities as we've just shown can

270
00:29:00,710 --> 00:29:06,740
be made to get game code execution is a
great little blog post here about

271
00:29:06,740 --> 00:29:11,870
someone who found a right on ability and
Qualcomm's implementation trust so no

272
00:29:11,870 --> 00:29:18,439
longer specific to HTC but it's a right
on ability that really affects every

273
00:29:18,440 --> 00:29:24,700
Android devices room so good about that

274
00:29:24,700 --> 00:29:30,299
coincidentally enough it's actually a
nother rights heroes honored bility so

275
00:29:30,299 --> 00:29:36,290
quickly walk through a little bit a
comparison of how qualcomm is different

276
00:29:36,290 --> 00:29:41,590
from HTC so remember how he says he was
doing a validation was just checking

277
00:29:41,590 --> 00:29:45,799
that one small memory range these are
the memory ranges that Qualcomm cares

278
00:29:45,799 --> 00:29:52,320
about you see there's like 10 secure
regions AC was only taking one but

279
00:29:52,320 --> 00:29:54,040
Qualcomm to check the model that's good

280
00:29:54,040 --> 00:30:00,720
here's a function that checks it was
basically just iterate over and whenever

281
00:30:00,720 --> 00:30:07,780
a buffer is passed to the press on it
says overall his memory regions in it is

282
00:30:07,780 --> 00:30:10,520
a secure memory region it sees it
there's an overlap but there's an

283
00:30:10,520 --> 00:30:19,150
overlap to reject the request but how
can we take one of these memory regions

284
00:30:19,150 --> 00:30:23,960
and use a rightful owner ability to
bypass it is this tons of different ways

285
00:30:23,960 --> 00:30:28,220
depending on what they are you can rate
if you have a raid 0 vulnerability just

286
00:30:28,220 --> 00:30:31,809
over at the boundaries of the start and
end of the security doin ok

287
00:30:31,809 --> 00:30:37,530
bypasses check you can make the Ady
negative one because it starts when it

288
00:30:37,530 --> 00:30:42,710
sees an idea of negative one cave by
Pastor you can flip the secure flag too

289
00:30:42,710 --> 00:30:46,870
insecure to bypass it again or you can
make the end anything less than the

290
00:30:46,870 --> 00:30:52,469
start and you might happen again so
again this is another example hella

291
00:30:52,470 --> 00:30:59,030
rivalry bility can be easily be used to
triple the bypass the security checks

292
00:30:59,030 --> 00:31:06,600
with interest on anything that they did
and you know that this is just really

293
00:31:06,600 --> 00:31:13,000
cool because I like never seen it before
but it's a neat feature of armed there's

294
00:31:13,000 --> 00:31:17,220
the Dimona domain access control
register and what this basically years

295
00:31:17,220 --> 00:31:23,320
is there's sixteen regions of memory on
the device and this basically tells the

296
00:31:23,320 --> 00:31:29,770
MMU how to treat access is this memory
memory regions should generate a fault

297
00:31:29,770 --> 00:31:37,889
on executed a generator followed on
right before acct museum you will be

298
00:31:37,890 --> 00:31:42,150
able to override code had executed which
is terrible the Qualcomm they do it

299
00:31:42,150 --> 00:31:49,030
right so we can't just over I Qualcomm's
code you have to take one more step and

300
00:31:49,030 --> 00:31:53,710
this is really need things that he did
if you can write all ones into this

301
00:31:53,710 --> 00:31:59,900
field you enter this kind of Lake binary
god mode which means the image was never

302
00:31:59,900 --> 00:32:03,220
going to generate a fault so then

303
00:32:03,220 --> 00:32:08,590
if you write all one's there instead of
using the translation look inside offer

304
00:32:08,590 --> 00:32:13,559
for whether it's generated volatile just
allow it so you can read anything right

305
00:32:13,559 --> 00:32:18,450
anything execute anything that's a
really need technique that will get you

306
00:32:18,450 --> 00:32:25,820
some day again

307
00:32:25,820 --> 00:32:32,450
gonna leave behind so when I said trust
under for this I've always say trust on

308
00:32:32,450 --> 00:32:36,690
but there are tons of implementations
address on before this point I meant to

309
00:32:36,690 --> 00:32:41,070
us soon as Qualcomm stress on
implementation

310
00:32:41,070 --> 00:32:56,809
trustee is a visa come up and give give
us peace but not surprised

311
00:32:56,809 --> 00:33:03,340
sneaky Google Android has kind of
fragmentation problem I think everyone

312
00:33:03,340 --> 00:33:07,149
in this room knows this but when we talk
about a hundred fragmentation

313
00:33:07,150 --> 00:33:12,669
really talking about we think Williams
are adding shared libraries are changing

314
00:33:12,669 --> 00:33:16,190
functionality they're adding their own
after changing configuration they're

315
00:33:16,190 --> 00:33:21,120
adding custom OTA updates areas are
doing the same thing this is what we

316
00:33:21,120 --> 00:33:28,309
think we think our nation but restaurant
also has a fragmentation problem there

317
00:33:28,309 --> 00:33:36,120
are probably a dozen implementations of
trust on of varying levels of use and it

318
00:33:36,120 --> 00:33:40,520
just depends on what chipset your phone
is running I think qualcomm is probably

319
00:33:40,520 --> 00:33:47,150
the biggest but there are there several
others and so I will ask you what stress

320
00:33:47,150 --> 00:33:54,620
on image runs on the Nexus six and the
next night and from my previous question

321
00:33:54,620 --> 00:33:58,629
I suspect only that one guy in the
bathroom does the exodus

322
00:33:58,630 --> 00:34:08,310
and the answer is trustee trustee is and
andrew is now an open source project it

323
00:34:08,310 --> 00:34:14,190
was it it appears in the Android
repository now and so we can speculate a

324
00:34:14,190 --> 00:34:19,790
bit about motivation because there's
this link from the web crypto from last

325
00:34:19,790 --> 00:34:24,779
year that talks about basic the
precursor of Trustees something called

326
00:34:24,780 --> 00:34:30,480
trusted little colonel and it's an open
source version of trust zone with the

327
00:34:30,480 --> 00:34:36,490
ability that'll probably created with
the motivation of lowering the barrier

328
00:34:36,489 --> 00:34:40,609
to entry you know allowing more devices
and more manufacturers to standardize on

329
00:34:40,610 --> 00:34:45,440
a dress on implementation coming to
market and not having to pay their

330
00:34:45,440 --> 00:34:50,950
engineers to maintain software that they
don't really care about too much this

331
00:34:50,949 --> 00:34:54,799
kind of my favorite from the side that I
don't really know what it means but its

332
00:34:54,800 --> 00:35:00,160
existing trust funds after a sexy scene
variety of challenges supporting all

333
00:35:00,160 --> 00:35:05,500
requirements of our partners including
the defense intelligence community's I'm

334
00:35:05,500 --> 00:35:08,810
really curious with the intelligence
community's requirements are for just so

335
00:35:08,810 --> 00:35:15,759
I hope there aren't any but I'm now glad
there is an open source version of it

336
00:35:15,760 --> 00:35:22,250
out there hopefully other people develop
this might be a look forward on a quick

337
00:35:22,250 --> 00:35:27,820
shower invitations might be going I
don't know but the big speculation on it

338
00:35:27,820 --> 00:35:36,400
is it's likely in video who developed
this you put together this I don't want

339
00:35:36,400 --> 00:35:39,450
to trust and implementation there was
someone else's problem because it will

340
00:35:39,450 --> 00:35:43,980
be cheaper that way my speculation

341
00:35:43,980 --> 00:35:49,700
so the way that is architected is it
builds on an open-source kernel called

342
00:35:49,700 --> 00:35:55,379
little kernel very favorable license and
MIT license its on get home if you want

343
00:35:55,380 --> 00:35:59,119
to look at it it's it's a very small
colonel it's something that you normally

344
00:35:59,119 --> 00:36:04,250
think it's like a real time operating
system not like a Linux server operating

345
00:36:04,250 --> 00:36:10,060
system it's very small something that
you'd expect to see on robotics or some

346
00:36:10,060 --> 00:36:21,000
other embedded device like that it's got
very basic synchronization primitives it

347
00:36:21,000 --> 00:36:26,350
has IPC it has threatened but it doesn't
have is the ability to really run of

348
00:36:26,350 --> 00:36:31,240
success on cuz you know we've seen trust
on has the secure monitor layer that

349
00:36:31,240 --> 00:36:37,660
requires it has these SMC handlers
there's a secure user apps insecure

350
00:36:37,660 --> 00:36:44,190
kernel and that was an okay so all these
different things were added to it and

351
00:36:44,190 --> 00:36:52,410
can kind of be looked at on the end
repository its architected black doesn't

352
00:36:52,410 --> 00:36:58,040
show up very well but basically just
like every other just an implementation

353
00:36:58,040 --> 00:37:04,300
te you have user applications on the
Android side that can talk to device

354
00:37:04,300 --> 00:37:10,380
drivers go into the kernel the kernels
can then make the SEC calls over to the

355
00:37:10,380 --> 00:37:15,130
secure side and then those SMC calls can
be dispatched to whoever's gonna handle

356
00:37:15,130 --> 00:37:20,430
them so the thing that's nice about this
as opposed to Qualcomm's implementation

357
00:37:20,430 --> 00:37:27,910
is Quoc anh handles of his SMC calls
inside the secure colonel so you know

358
00:37:27,910 --> 00:37:32,430
they have a handle on here that means
that there's a vulnerability in those

359
00:37:32,430 --> 00:37:39,580
calls its kind of game over this seems
to know that the problem is the

360
00:37:39,580 --> 00:37:44,060
open-source person the apps are an open
source so don't really know what the

361
00:37:44,060 --> 00:37:47,930
apps to yet this is kind of a look into
the future research kinda something that

362
00:37:47,930 --> 00:37:53,730
we want to look into more detail later
is it just you know just kidding

363
00:37:53,730 --> 00:37:58,210
hopefully it's interesting that the SMC
Koskinen passed you passed up in

364
00:37:58,210 --> 00:38:01,920
handling the trusted a player so if
there is a vulnerability it's in this

365
00:38:01,920 --> 00:38:07,900
application layer so you don't address
on isn't completely compromised you then

366
00:38:07,900 --> 00:38:12,440
need to find an overblown ability to go
from the security side in userspace back

367
00:38:12,440 --> 00:38:38,609
down into securing aside add back over
these weird anyway

368
00:38:38,609 --> 00:39:05,470
questions

369
00:39:05,470 --> 00:39:27,250
unhappiness different companies offering
different components one one could argue

370
00:39:27,250 --> 00:39:33,390
that this is a sign of openness and
innovation because you can please

371
00:39:33,390 --> 00:39:39,779
different operating systems open source
funds on undies kernels in India secure

372
00:39:39,780 --> 00:39:44,900
word you can also do it as you can do it
regularly on a normal work as well and

373
00:39:44,900 --> 00:39:50,109
you can run different companies provide
different applications like we have a

374
00:39:50,109 --> 00:39:54,960
desktop devices today and and that's
supposed to be a good thing but of

375
00:39:54,960 --> 00:39:58,880
course is also a downside because it
makes things more complicated you

376
00:39:58,880 --> 00:40:06,250
mentioned dpi is that job at undeveloped
and there was an attempted may not have

377
00:40:06,250 --> 00:40:10,050
worked out as people like this because
not everyone uses the CPI isn't science

378
00:40:10,050 --> 00:40:14,670
but I I see I see that one of them

379
00:40:14,670 --> 00:40:21,020
criticisms that you have is that the
implementation not really open it's very

380
00:40:21,020 --> 00:40:26,920
hard for you do to analyze them on the
other hand that's very common in the

381
00:40:26,920 --> 00:40:31,710
industry overall not everyone has a
business 121 to release everything think

382
00:40:31,710 --> 00:40:34,310
about graphics drivers think about
basement modems

383
00:40:34,310 --> 00:40:42,960
operating systems and also endured
there's another everything is so how do

384
00:40:42,960 --> 00:40:46,960
how one would actually interested unless
you go ahead and build your company in

385
00:40:46,960 --> 00:40:48,059
and change data

386
00:40:48,059 --> 00:40:55,859
state of the game it's sometimes also
for example when you were complaining

387
00:40:55,859 --> 00:41:00,749
about white sometimes hard to see where
you actually addressing your complaint

388
00:41:00,749 --> 00:41:05,410
is it more on the side of some specific
company and implementation of a specific

389
00:41:05,410 --> 00:41:15,328
company in architecture feature what
specifically for example when the bug is

390
00:41:15,329 --> 00:41:18,920
it a failure for purses cell is a
failure Stila standard history of the

391
00:41:18,920 --> 00:41:27,289
standardization process this software
process failure etc etc so it's very

392
00:41:27,289 --> 00:41:32,189
difficult to see unlike you actually
blame and what could be a possibility to

393
00:41:32,189 --> 00:41:36,339
fix it up wondering whether you have a
sense of what and how you could actually

394
00:41:36,339 --> 00:41:40,660
make things better

395
00:41:40,660 --> 00:41:51,308
could be better but there's a lot needs
to change i think is an interesting

396
00:41:51,309 --> 00:41:57,719
approach that might make it a more
secure because there are a lot of black

397
00:41:57,719 --> 00:42:02,910
boxes and you know no one can make
everything open source like I agree with

398
00:42:02,910 --> 00:42:11,288
that but trustee is has the potential to
be a you know an operating system a

399
00:42:11,289 --> 00:42:15,799
secure operating system that you can
assess and then people can develop

400
00:42:15,799 --> 00:42:20,288
applications that run on to that because
we know that like the DRM epi is in some

401
00:42:20,289 --> 00:42:23,949
of the key management is gonna be
sensitive enough that I can open sources

402
00:42:23,949 --> 00:42:30,059
and having small course horse boxes that
run within an environment that their

403
00:42:30,059 --> 00:42:33,849
compromise doesn't compromise the
trusted execution environment that's

404
00:42:33,849 --> 00:42:37,769
something I would like to see in weather
that's trustee whether that's called

405
00:42:37,769 --> 00:42:42,258
connery architect him something whether
that is this tons of different ways to

406
00:42:42,259 --> 00:45:14,980
accomplish that

407
00:45:14,980 --> 00:45:29,960
given the disclosure process and I'm
just curious if you can share how either

408
00:45:29,960 --> 00:45:40,680
HTC com responded intriguing to me or we
could take that off line which is a

409
00:45:40,680 --> 00:45:46,779
funny story I'm trying to interact with
him over the years

410
00:45:46,780 --> 00:46:42,550
think this is sometimes

411
00:46:42,550 --> 00:47:16,720
yes we did and so did the responsible
thing we disclose them to HEC so we

412
00:47:16,720 --> 00:47:23,600
found the PGP key for security tht C dot
com we broke up the dollar bilities in a

413
00:47:23,600 --> 00:47:31,200
very nice way to them and we heard
nothing back about too much and then get

414
00:47:31,200 --> 00:47:34,220
an email when I can finally there is
that there's finally gonna come up with

415
00:47:34,220 --> 00:47:39,600
a fix and it was dere dere Travis

416
00:47:39,600 --> 00:47:44,140
we are unable to open the email that you
sent would you please send it again in

417
00:47:44,140 --> 00:47:48,359
plain text

418
00:47:48,359 --> 00:47:57,308
he said again and plain text we heard
nothing about another two months the

419
00:47:57,309 --> 00:48:01,819
email us back seen these vulnerabilities
have been fixed

420
00:48:01,819 --> 00:48:08,200
we would appreciate it if you would
verify you know at your leisure

421
00:48:08,200 --> 00:48:14,450
cool we pull out of ice W to identify
the problem let me check for all updates

422
00:48:14,450 --> 00:48:22,210
there are none it still vulnerable to
the exact same vulnerabilities back we

423
00:48:22,210 --> 00:48:27,619
say give us the firmware with the six
and we'll be happy to verify for you and

424
00:48:27,619 --> 00:48:35,720
we haven't heard that sets so yeah and
update so has not come out with these

425
00:48:35,720 --> 00:48:44,200
effects yet

426
00:48:44,200 --> 00:49:00,819
they do you have any recommendations on
how to protect against something else

427
00:49:00,820 --> 00:49:22,079
secure boot exactly there's nothing like
its lesson is signed its integrated

428
00:49:22,079 --> 00:49:29,730
secure boot you can't turn it off it has
to be there you can't disable any pain

429
00:49:29,730 --> 00:49:34,650
the only way you can compromise is it
from the Colonels so you've already kind

430
00:49:34,650 --> 00:49:40,500
of assumed that the end result has been
compromised not a lot you can do about

431
00:49:40,500 --> 00:51:26,799
it it's the site from engage with the
vendors

432
00:51:26,799 --> 00:51:57,380
why should watch encrypted video why
should watching that video potentially

433
00:51:57,380 --> 00:52:02,989
compromised trust which could then they
could use that to steal my personal

434
00:52:02,989 --> 00:52:05,670
information like credit cards or any
information that is stored in the

435
00:52:05,670 --> 00:52:11,489
Trust's inside the fact that I'm
watching a video should not directly to

436
00:52:11,489 --> 00:52:16,390
the complete compromise of my device
that the really scary thing in my head

437
00:52:16,390 --> 00:52:18,038
that I don't want to see happen

438
00:52:18,039 --> 00:52:37,709
architectures people think back you know
the birth of Linux right you're passing

439
00:52:37,709 --> 00:52:41,879
physical addresses from userspace the
kernel space they went away from doing

440
00:52:41,880 --> 00:52:46,679
that they went on tours copy from user
or that kind of good stuff but Armstrong

441
00:52:46,679 --> 00:52:50,429
zone is architected such that you're
passing physical buffers back and forth

442
00:52:50,429 --> 00:52:57,390
like they didn't learn that lesson and
to run on the arm spec you have to do

443
00:52:57,390 --> 00:53:00,310
that there's no other alternative so
it's

444
00:53:00,310 --> 00:53:06,060
you know adding an architecture like
that helps but there's still this

445
00:53:06,060 --> 00:53:14,350
underlying for all of your passing
physical addresses back and forth

446
00:53:14,350 --> 00:53:19,120
questions let's go for kardashian think
the statistics

