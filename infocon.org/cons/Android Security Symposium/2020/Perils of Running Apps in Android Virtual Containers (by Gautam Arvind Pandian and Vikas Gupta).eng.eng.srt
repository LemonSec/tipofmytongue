1
00:00:08,320 --> 00:00:12,559
so the next talk

2
00:00:09,519 --> 00:00:16,400
is from gautam arvind pandyan

3
00:00:12,559 --> 00:00:16,799
and vikas gupta and it's called perils

4
00:00:16,400 --> 00:00:19,279
of

5
00:00:16,800 --> 00:00:21,199
running apps in android virtual

6
00:00:19,279 --> 00:00:24,320
containers

7
00:00:21,199 --> 00:00:26,640
gautam is from a vales group

8
00:00:24,320 --> 00:00:27,439
and is a security researcher in the

9
00:00:26,640 --> 00:00:30,080
field of

10
00:00:27,439 --> 00:00:31,039
mobile applications and in the past

11
00:00:30,080 --> 00:00:33,199
supervised

12
00:00:31,039 --> 00:00:35,760
development of applications dealing with

13
00:00:33,200 --> 00:00:38,960
very sensitive data in the banking

14
00:00:35,760 --> 00:00:40,879
and governmental sectors because gupta

15
00:00:38,960 --> 00:00:43,040
is going to start this talk he's a

16
00:00:40,879 --> 00:00:45,039
security researcher and penetration

17
00:00:43,040 --> 00:00:48,239
tester focusing on

18
00:00:45,039 --> 00:00:49,760
mobile applications he's also one of the

19
00:00:48,239 --> 00:00:53,680
top contributors of

20
00:00:49,760 --> 00:00:56,800
the ovasp mobile security testing guide

21
00:00:53,680 --> 00:00:59,920
and involves himself a lot in reverse

22
00:00:56,800 --> 00:01:01,599
engineering which can be a lot of fun

23
00:00:59,920 --> 00:01:03,280
they're going to talk about the pitfalls

24
00:01:01,600 --> 00:01:06,240
of running application

25
00:01:03,280 --> 00:01:07,280
in android virtual containers and please

26
00:01:06,240 --> 00:01:11,039
welcome

27
00:01:07,280 --> 00:01:13,840
vikas gupta please enlighten us with

28
00:01:11,040 --> 00:01:13,840
your talk

29
00:01:23,920 --> 00:01:30,159
all right so is my slides visible

30
00:01:28,080 --> 00:01:32,320
your slides are perfectly visible yes

31
00:01:30,159 --> 00:01:33,200
okay great uh so firstly thanks to the

32
00:01:32,320 --> 00:01:36,320
organizers

33
00:01:33,200 --> 00:01:37,920
uh for organizing this virtually uh all

34
00:01:36,320 --> 00:01:39,758
right so let's get started so

35
00:01:37,920 --> 00:01:41,280
the today's talk is about perils of

36
00:01:39,759 --> 00:01:42,479
running apps in android virtual

37
00:01:41,280 --> 00:01:46,560
containers

38
00:01:42,479 --> 00:01:48,960
and uh okay let me get this full screen

39
00:01:46,560 --> 00:01:48,960
first

40
00:01:52,320 --> 00:01:57,439
okay yeah so the agenda for this

41
00:01:55,600 --> 00:01:58,479
presentation so we'll start with an

42
00:01:57,439 --> 00:02:01,199
introduction what

43
00:01:58,479 --> 00:02:02,880
android virtual containers are uh then

44
00:02:01,200 --> 00:02:04,320
we'll talk about the use case and the

45
00:02:02,880 --> 00:02:06,399
current market status of these

46
00:02:04,320 --> 00:02:08,639
applications

47
00:02:06,399 --> 00:02:10,160
we look into how we can attack the an

48
00:02:08,639 --> 00:02:11,359
application running inside the virtual

49
00:02:10,160 --> 00:02:13,280
containers

50
00:02:11,360 --> 00:02:15,440
uh then we'll move on to how we can

51
00:02:13,280 --> 00:02:17,280
detect these virtual containers

52
00:02:15,440 --> 00:02:18,720
uh we also have some recommendations for

53
00:02:17,280 --> 00:02:21,440
the developers uh

54
00:02:18,720 --> 00:02:22,959
to to be to ensure security and then

55
00:02:21,440 --> 00:02:25,599
we'll have some points for discussion

56
00:02:22,959 --> 00:02:25,599
and conclusion

57
00:02:25,840 --> 00:02:29,280
so a quick word about us so myself vikas

58
00:02:28,720 --> 00:02:31,920
gupta

59
00:02:29,280 --> 00:02:32,640
i've been working with talus dis india

60
00:02:31,920 --> 00:02:35,760
and

61
00:02:32,640 --> 00:02:37,440
i have been actively contributing to

62
00:02:35,760 --> 00:02:41,120
and i have interest in reverse

63
00:02:37,440 --> 00:02:41,120
engineering and obfuscation

64
00:02:41,280 --> 00:02:43,680
gotham

65
00:02:46,400 --> 00:02:51,840
uh you your audio is not okay

66
00:02:53,920 --> 00:02:59,599
okay hello i am gautam arvind pandyan

67
00:02:57,280 --> 00:03:00,879
i work as a security researcher and

68
00:02:59,599 --> 00:03:04,238
security architect

69
00:03:00,879 --> 00:03:06,000
at palace dis singapore my interests are

70
00:03:04,239 --> 00:03:08,640
towards crypto and the hardening of

71
00:03:06,000 --> 00:03:11,120
mobile applications

72
00:03:08,640 --> 00:03:12,399
okay thank you gotham so let's get

73
00:03:11,120 --> 00:03:14,480
started

74
00:03:12,400 --> 00:03:15,920
so what are android virtual containers

75
00:03:14,480 --> 00:03:17,518
so these are innovative

76
00:03:15,920 --> 00:03:19,119
application level virtualization

77
00:03:17,519 --> 00:03:20,879
frameworks uh

78
00:03:19,120 --> 00:03:22,480
so you can relay that there is a host

79
00:03:20,879 --> 00:03:24,000
application which is an android

80
00:03:22,480 --> 00:03:25,599
application and then

81
00:03:24,000 --> 00:03:27,440
this host application will be running

82
00:03:25,599 --> 00:03:28,560
multiple guest android application

83
00:03:27,440 --> 00:03:30,400
inside it

84
00:03:28,560 --> 00:03:32,720
uh one important thing to note is that

85
00:03:30,400 --> 00:03:35,040
these guest application does not require

86
00:03:32,720 --> 00:03:36,959
any explicit installation

87
00:03:35,040 --> 00:03:38,400
also the added advantage is that you can

88
00:03:36,959 --> 00:03:41,360
have a second instance

89
00:03:38,400 --> 00:03:42,400
of any desired application uh running on

90
00:03:41,360 --> 00:03:44,879
your device

91
00:03:42,400 --> 00:03:46,319
uh the guest type can act as a as the

92
00:03:44,879 --> 00:03:48,640
second instance

93
00:03:46,319 --> 00:03:51,119
and we'll see uh in this presentation

94
00:03:48,640 --> 00:03:53,119
that when you run an application a guest

95
00:03:51,120 --> 00:03:56,560
app inside virtual container it kind of

96
00:03:53,120 --> 00:04:00,000
reduces the security overall

97
00:03:56,560 --> 00:04:02,640
so to visualize uh over here i have a

98
00:04:00,000 --> 00:04:03,519
parallel space app uh installed on my

99
00:04:02,640 --> 00:04:05,839
device

100
00:04:03,519 --> 00:04:07,040
and you can see there are multiple apps

101
00:04:05,840 --> 00:04:09,040
uh installed

102
00:04:07,040 --> 00:04:11,280
inside the panel space app so these are

103
00:04:09,040 --> 00:04:13,599
the guest apps on the right hand side

104
00:04:11,280 --> 00:04:15,840
uh you can see i have two instances for

105
00:04:13,599 --> 00:04:18,159
an app called ola and uber

106
00:04:15,840 --> 00:04:21,840
and that's basically the use case for

107
00:04:18,160 --> 00:04:21,840
such kind of virtual containers

108
00:04:23,280 --> 00:04:26,960
so the first work the most important

109
00:04:26,080 --> 00:04:30,560
work was done

110
00:04:26,960 --> 00:04:32,080
and presented in black hat asia 2017

111
00:04:30,560 --> 00:04:33,759
they provided a very detailed

112
00:04:32,080 --> 00:04:36,960
description of how these

113
00:04:33,759 --> 00:04:39,600
android virtual containers work

114
00:04:36,960 --> 00:04:41,440
they also gave some examples about how

115
00:04:39,600 --> 00:04:42,639
it has been actively exploited by

116
00:04:41,440 --> 00:04:45,040
malwares

117
00:04:42,639 --> 00:04:47,199
and they also propose some ideas how to

118
00:04:45,040 --> 00:04:49,919
detect and kind of stop

119
00:04:47,199 --> 00:04:51,120
your app being used as a yeah by malware

120
00:04:49,919 --> 00:04:52,799
basically

121
00:04:51,120 --> 00:04:55,360
uh one thing i would like to note is

122
00:04:52,800 --> 00:04:57,120
that we personally didn't find the

123
00:04:55,360 --> 00:04:59,840
use of the term android plugin slightly

124
00:04:57,120 --> 00:05:01,919
confusing and not descriptive enough

125
00:04:59,840 --> 00:05:04,880
so in this slide we use the terminology

126
00:05:01,919 --> 00:05:04,880
virtual container

127
00:05:06,320 --> 00:05:09,440
okay so some of the apps which are

128
00:05:08,800 --> 00:05:12,080
available

129
00:05:09,440 --> 00:05:14,000
on google play store and what is there

130
00:05:12,080 --> 00:05:16,880
yeah where can i get one

131
00:05:14,000 --> 00:05:18,560
so two important projects are virtual

132
00:05:16,880 --> 00:05:20,639
app android plugin they are available on

133
00:05:18,560 --> 00:05:22,080
github they are open source so you can

134
00:05:20,639 --> 00:05:22,960
always go and build their own

135
00:05:22,080 --> 00:05:26,080
applications

136
00:05:22,960 --> 00:05:26,400
virtual containers then the most famous

137
00:05:26,080 --> 00:05:28,800
one

138
00:05:26,400 --> 00:05:30,719
uh is parallel space app which is having

139
00:05:28,800 --> 00:05:32,160
more than 100 million downloads

140
00:05:30,720 --> 00:05:33,919
then there are other applications as

141
00:05:32,160 --> 00:05:36,880
well which are pretty famous

142
00:05:33,919 --> 00:05:38,560
and yeah you can see from the the number

143
00:05:36,880 --> 00:05:40,240
of times they are downloaded that for

144
00:05:38,560 --> 00:05:41,440
sure there are easily millions of users

145
00:05:40,240 --> 00:05:44,080
using this kind of

146
00:05:41,440 --> 00:05:44,080
environments

147
00:05:46,880 --> 00:05:52,639
another case is oems providing a way to

148
00:05:50,000 --> 00:05:55,680
run multiple instances of application

149
00:05:52,639 --> 00:05:57,919
uh one such case is one plus devices

150
00:05:55,680 --> 00:05:59,919
uh it's important to note that oneplus

151
00:05:57,919 --> 00:06:01,280
devices are not using virtual container

152
00:05:59,919 --> 00:06:03,758
approach

153
00:06:01,280 --> 00:06:04,479
instead they create a new android device

154
00:06:03,759 --> 00:06:06,479
internally

155
00:06:04,479 --> 00:06:07,680
and then they run the second instance of

156
00:06:06,479 --> 00:06:10,080
these apps

157
00:06:07,680 --> 00:06:11,759
in the context of this new android user

158
00:06:10,080 --> 00:06:13,919
so some of these applications

159
00:06:11,759 --> 00:06:15,039
uh which are which are supported by

160
00:06:13,919 --> 00:06:17,280
oneplus devices

161
00:06:15,039 --> 00:06:20,080
are messaging apps like whatsapp

162
00:06:17,280 --> 00:06:21,679
ride-hailing apps digital payment apps

163
00:06:20,080 --> 00:06:23,680
and they have a huge list of chinese

164
00:06:21,680 --> 00:06:24,400
apps so overall there are 56 hard-coded

165
00:06:23,680 --> 00:06:25,840
applications

166
00:06:24,400 --> 00:06:28,479
inside the oneplus devices which are

167
00:06:25,840 --> 00:06:29,280
supported another vendor supporting this

168
00:06:28,479 --> 00:06:32,840
is xiaomi

169
00:06:29,280 --> 00:06:35,840
and they market it as dual apps on their

170
00:06:32,840 --> 00:06:35,840
platform

171
00:06:37,199 --> 00:06:41,280
so it obviously raises the question is

172
00:06:39,039 --> 00:06:42,800
there a really need to running multiple

173
00:06:41,280 --> 00:06:44,638
instances of an app so

174
00:06:42,800 --> 00:06:47,919
in our research we find that for sure

175
00:06:44,639 --> 00:06:50,880
there is a need especially given that

176
00:06:47,919 --> 00:06:51,359
the prevalence of dual sim devices now

177
00:06:50,880 --> 00:06:54,319
so

178
00:06:51,360 --> 00:06:56,000
every user predominantly have dual sim

179
00:06:54,319 --> 00:06:57,199
devices these days especially in asian

180
00:06:56,000 --> 00:07:00,160
countries

181
00:06:57,199 --> 00:07:01,120
and which kind of makes a need to have

182
00:07:00,160 --> 00:07:03,440
two accounts

183
00:07:01,120 --> 00:07:04,319
one account associated with each mobile

184
00:07:03,440 --> 00:07:05,919
number

185
00:07:04,319 --> 00:07:08,080
for example i want to have two whatsapp

186
00:07:05,919 --> 00:07:11,440
accounts or maybe two e-commerce

187
00:07:08,080 --> 00:07:14,159
accounts to get different kind of

188
00:07:11,440 --> 00:07:16,160
deals some accounts have different deals

189
00:07:14,160 --> 00:07:18,560
another need is to have a separate

190
00:07:16,160 --> 00:07:20,400
uh personal and business applications on

191
00:07:18,560 --> 00:07:23,919
one device

192
00:07:20,400 --> 00:07:25,840
another case is to run games

193
00:07:23,919 --> 00:07:27,440
which is which is very helpful when you

194
00:07:25,840 --> 00:07:28,960
want to tinker with the games and you

195
00:07:27,440 --> 00:07:30,719
don't want to root your device

196
00:07:28,960 --> 00:07:32,400
so there are already tools available

197
00:07:30,720 --> 00:07:33,919
which can help you

198
00:07:32,400 --> 00:07:36,960
if you have the games installed inside

199
00:07:33,919 --> 00:07:36,960
the virtual containers

200
00:07:37,919 --> 00:07:41,840
so a quick understanding how these

201
00:07:39,919 --> 00:07:44,080
virtual containers work

202
00:07:41,840 --> 00:07:46,638
so these virtual containers are using

203
00:07:44,080 --> 00:07:49,520
technologies like java dynamic proxy api

204
00:07:46,639 --> 00:07:50,720
and reflection to create a virtual

205
00:07:49,520 --> 00:07:53,359
environment on top of

206
00:07:50,720 --> 00:07:54,720
and transparent to the android framework

207
00:07:53,360 --> 00:07:57,280
using these

208
00:07:54,720 --> 00:07:59,840
technologies you can kind of hook into

209
00:07:57,280 --> 00:08:03,039
the apis and regulate the life cycle

210
00:07:59,840 --> 00:08:13,840
of the application of the components

211
00:08:03,039 --> 00:08:13,840
another important thing is that

212
00:08:14,479 --> 00:08:26,240
i'm sorry we can't hear you maybe you

213
00:08:16,800 --> 00:08:27,759
you muted your microphone

214
00:08:26,240 --> 00:08:29,599
maybe i think he has some network

215
00:08:27,759 --> 00:08:32,880
problems

216
00:08:29,599 --> 00:08:35,360
we also we cannot hear disconnected from

217
00:08:32,880 --> 00:08:35,360
his side

218
00:08:36,240 --> 00:08:41,839
okay there seems to be a problem

219
00:08:46,480 --> 00:08:50,160
okay just a minute we try to resolve

220
00:08:52,839 --> 00:08:55,839
that

221
00:09:13,440 --> 00:09:18,320
okay can you hear me it seems the murphy

222
00:09:16,720 --> 00:09:21,519
law has hit me

223
00:09:18,320 --> 00:09:24,399
yes we hear and see you again okay all

224
00:09:21,519 --> 00:09:28,080
right let me try to present again then

225
00:09:24,399 --> 00:09:28,080
okay please yeah

226
00:09:29,040 --> 00:09:35,839
okay sorry for that so starting again so

227
00:09:32,880 --> 00:09:37,200
i have a diagrammatic representation how

228
00:09:35,839 --> 00:09:39,279
virtual containers work

229
00:09:37,200 --> 00:09:40,720
so over here you can see that i have

230
00:09:39,279 --> 00:09:43,600
three guest applications

231
00:09:40,720 --> 00:09:45,440
app one after three and all the various

232
00:09:43,600 --> 00:09:47,200
calls for these guest applications will

233
00:09:45,440 --> 00:09:49,440
be going through proxy hooks

234
00:09:47,200 --> 00:09:50,720
which was implemented using reflection

235
00:09:49,440 --> 00:09:53,279
and other java

236
00:09:50,720 --> 00:09:55,519
techniques you can note that all these

237
00:09:53,279 --> 00:09:56,560
calls will be going via host app

238
00:09:55,519 --> 00:09:58,480
and then the host app will be

239
00:09:56,560 --> 00:09:59,040
interacting with the android framework

240
00:09:58,480 --> 00:10:00,880
so

241
00:09:59,040 --> 00:10:02,800
for the android framework the presence

242
00:10:00,880 --> 00:10:04,800
of guest app is totally transparent in

243
00:10:02,800 --> 00:10:07,519
fact it doesn't even know about

244
00:10:04,800 --> 00:10:07,519
their presence

245
00:10:09,600 --> 00:10:12,640
okay just to summarize the three

246
00:10:11,040 --> 00:10:13,279
important things with these virtual

247
00:10:12,640 --> 00:10:16,319
containers

248
00:10:13,279 --> 00:10:18,000
is one is the shared uid uh we'll be

249
00:10:16,320 --> 00:10:20,800
talking a lot about this in detail

250
00:10:18,000 --> 00:10:22,640
as well but all the guest apps installed

251
00:10:20,800 --> 00:10:25,599
inside the virtual container tend to

252
00:10:22,640 --> 00:10:26,720
share the same uid it has various

253
00:10:25,600 --> 00:10:29,760
implications

254
00:10:26,720 --> 00:10:31,360
and then secondly for the

255
00:10:29,760 --> 00:10:33,040
management of the permissions and

256
00:10:31,360 --> 00:10:34,720
various sub components uh

257
00:10:33,040 --> 00:10:37,040
and the various application components

258
00:10:34,720 --> 00:10:39,760
which are there for the guest apps

259
00:10:37,040 --> 00:10:40,800
it's kind of the host app defines pre

260
00:10:39,760 --> 00:10:42,160
defines them

261
00:10:40,800 --> 00:10:44,399
and then they try to use these

262
00:10:42,160 --> 00:10:46,079
predefined components

263
00:10:44,399 --> 00:10:47,600
similarly the host app takes care for

264
00:10:46,079 --> 00:10:49,519
the component lifecycle management

265
00:10:47,600 --> 00:10:51,200
whether it is the services or broadcast

266
00:10:49,519 --> 00:10:52,399
receivers or other android components

267
00:10:51,200 --> 00:10:53,920
which are there

268
00:10:52,399 --> 00:10:55,920
i highly recommend that if you want to

269
00:10:53,920 --> 00:10:58,160
really understand the detailed workings

270
00:10:55,920 --> 00:11:00,000
uh to check out the blackhead paper

271
00:10:58,160 --> 00:11:01,920
although we don't need to understand all

272
00:11:00,000 --> 00:11:04,640
the details to for this particular

273
00:11:01,920 --> 00:11:04,640
presentation

274
00:11:06,480 --> 00:11:10,320
okay so now uh just a quick refresher of

275
00:11:09,839 --> 00:11:13,120
one

276
00:11:10,320 --> 00:11:15,040
important information that in android

277
00:11:13,120 --> 00:11:16,640
whenever an application is installed it

278
00:11:15,040 --> 00:11:18,959
gets a unique user id

279
00:11:16,640 --> 00:11:21,519
and it also is assigned a directory

280
00:11:18,959 --> 00:11:23,760
owned by the application

281
00:11:21,519 --> 00:11:25,120
this uniqueness of the uid which is

282
00:11:23,760 --> 00:11:28,640
assigned to the application

283
00:11:25,120 --> 00:11:32,000
is responsible or which is used a lot

284
00:11:28,640 --> 00:11:37,040
for various security mechanisms

285
00:11:32,000 --> 00:11:37,040
and yeah we'll discuss them pretty soon

286
00:11:37,839 --> 00:11:42,240
okay so if we look at the android

287
00:11:40,160 --> 00:11:42,800
documentation there are six core points

288
00:11:42,240 --> 00:11:45,360
which are

289
00:11:42,800 --> 00:11:47,519
uh listed which talk about the various

290
00:11:45,360 --> 00:11:49,200
course security offered by android

291
00:11:47,519 --> 00:11:50,560
and if we go through them one by one

292
00:11:49,200 --> 00:11:52,240
we'll see that out of the six

293
00:11:50,560 --> 00:11:53,920
four of them are really not applicable

294
00:11:52,240 --> 00:11:55,360
in case of a guest application

295
00:11:53,920 --> 00:11:58,160
or an application running inside the

296
00:11:55,360 --> 00:12:00,480
virtual container the two points which

297
00:11:58,160 --> 00:12:01,279
are not broken uh by these virtual

298
00:12:00,480 --> 00:12:03,200
containers

299
00:12:01,279 --> 00:12:04,639
are way below their abstraction layer

300
00:12:03,200 --> 00:12:06,880
like presence of aslr

301
00:12:04,639 --> 00:12:08,560
or dl malloc or kellogg kind of

302
00:12:06,880 --> 00:12:10,160
functionalities

303
00:12:08,560 --> 00:12:12,560
and similarly the encryption of the file

304
00:12:10,160 --> 00:12:12,560
system

305
00:12:14,160 --> 00:12:18,560
so there are many mechanisms in android

306
00:12:16,560 --> 00:12:20,959
which are dependent on the uid

307
00:12:18,560 --> 00:12:21,680
for example application permissions key

308
00:12:20,959 --> 00:12:25,439
store

309
00:12:21,680 --> 00:12:27,680
android id some other android

310
00:12:25,440 --> 00:12:29,360
security mechanisms which are broken is

311
00:12:27,680 --> 00:12:31,040
unauthorized access to the other guest

312
00:12:29,360 --> 00:12:32,800
app sandbox data

313
00:12:31,040 --> 00:12:34,399
a guest app can get the listing of the

314
00:12:32,800 --> 00:12:35,439
other running guest apps or even the

315
00:12:34,399 --> 00:12:37,680
installed apps

316
00:12:35,440 --> 00:12:40,720
so let's have a look on each of these

317
00:12:37,680 --> 00:12:40,719
attacks one by one

318
00:12:40,800 --> 00:12:44,240
first is the android manifest

319
00:12:42,240 --> 00:12:46,639
permissions

320
00:12:44,240 --> 00:12:47,360
so the problem is that the guest apps

321
00:12:46,639 --> 00:12:51,040
are not really

322
00:12:47,360 --> 00:12:52,560
installed in the virtual container and

323
00:12:51,040 --> 00:12:54,319
because of which the manifest file is

324
00:12:52,560 --> 00:12:55,839
not really processed so

325
00:12:54,320 --> 00:12:57,760
whatever permissions and guest

326
00:12:55,839 --> 00:13:00,240
application requires

327
00:12:57,760 --> 00:13:02,880
uh the host application or the virtual

328
00:13:00,240 --> 00:13:05,440
container kind of need to pre-guess it

329
00:13:02,880 --> 00:13:07,040
so what they do is they they blankly ask

330
00:13:05,440 --> 00:13:08,959
for all the permissions which are which

331
00:13:07,040 --> 00:13:09,760
can be possible so in case of droid

332
00:13:08,959 --> 00:13:11,920
plugin

333
00:13:09,760 --> 00:13:13,680
application 141 permissions are present

334
00:13:11,920 --> 00:13:16,880
in the manifest file

335
00:13:13,680 --> 00:13:18,560
so once an application or once this one

336
00:13:16,880 --> 00:13:20,000
permission is granted it will be

337
00:13:18,560 --> 00:13:22,800
available for all the guest

338
00:13:20,000 --> 00:13:24,160
applications so this raises a major

339
00:13:22,800 --> 00:13:25,680
privacy concern

340
00:13:24,160 --> 00:13:27,839
and also let's say if one guest

341
00:13:25,680 --> 00:13:28,479
application which primarily needed this

342
00:13:27,839 --> 00:13:31,920
particular

343
00:13:28,480 --> 00:13:33,680
permission uh is deleted or no more used

344
00:13:31,920 --> 00:13:35,680
still the other application will be

345
00:13:33,680 --> 00:13:37,680
having access to this permission

346
00:13:35,680 --> 00:13:39,760
so this is a major privacy concern in

347
00:13:37,680 --> 00:13:41,359
terms of overall

348
00:13:39,760 --> 00:13:44,639
various cast application installed

349
00:13:41,360 --> 00:13:44,639
inside the virtual container

350
00:13:45,040 --> 00:13:48,719
another privacy concern is with the

351
00:13:47,120 --> 00:13:50,720
listing of the various

352
00:13:48,720 --> 00:13:52,639
other applications inside the virtual

353
00:13:50,720 --> 00:13:54,560
container for example

354
00:13:52,639 --> 00:13:55,920
you see the screenshot on the top i'm

355
00:13:54,560 --> 00:13:57,680
listing various

356
00:13:55,920 --> 00:13:59,120
installed applications inside the

357
00:13:57,680 --> 00:14:01,120
virtual container

358
00:13:59,120 --> 00:14:03,279
and in the bottom screenshot you can see

359
00:14:01,120 --> 00:14:04,800
various running application at the at

360
00:14:03,279 --> 00:14:06,000
the given point of time in the virtual

361
00:14:04,800 --> 00:14:09,519
container

362
00:14:06,000 --> 00:14:11,279
uh from api 22 onwards in android such

363
00:14:09,519 --> 00:14:12,560
kind of listing of running apps was

364
00:14:11,279 --> 00:14:14,480
disabled but

365
00:14:12,560 --> 00:14:17,839
yeah inside the virtual container it is

366
00:14:14,480 --> 00:14:17,839
still available

367
00:14:18,240 --> 00:14:22,079
another example is the sandboxing of the

368
00:14:21,279 --> 00:14:23,839
app data

369
00:14:22,079 --> 00:14:25,120
so over here you can see that on the

370
00:14:23,839 --> 00:14:26,639
left hand side

371
00:14:25,120 --> 00:14:29,120
the apps which are running inside the

372
00:14:26,639 --> 00:14:31,040
virtual container can access

373
00:14:29,120 --> 00:14:32,399
the sandbox data of each other

374
00:14:31,040 --> 00:14:34,079
application

375
00:14:32,399 --> 00:14:38,000
we'll try to demonstrate the

376
00:14:34,079 --> 00:14:38,000
implications using a demo as well

377
00:14:38,160 --> 00:14:42,639
but before that a quick uh intro about

378
00:14:40,959 --> 00:14:44,399
the android keystore

379
00:14:42,639 --> 00:14:46,000
so i think most of us already know that

380
00:14:44,399 --> 00:14:47,839
android key store is a secure system

381
00:14:46,000 --> 00:14:49,920
level credential storage

382
00:14:47,839 --> 00:14:51,519
uh in modern android devices it is

383
00:14:49,920 --> 00:14:53,199
hardware backed and

384
00:14:51,519 --> 00:14:54,959
previously it was implemented in

385
00:14:53,199 --> 00:14:58,079
software as well

386
00:14:54,959 --> 00:15:00,000
and the overall security of the android

387
00:14:58,079 --> 00:15:01,120
key store again depends on the uid of

388
00:15:00,000 --> 00:15:03,040
the application

389
00:15:01,120 --> 00:15:04,399
so to understand it diagrammatically

390
00:15:03,040 --> 00:15:06,240
over here

391
00:15:04,399 --> 00:15:08,000
i have a virtual container application

392
00:15:06,240 --> 00:15:10,959
with three guest apps

393
00:15:08,000 --> 00:15:12,639
and one key associated with each app

394
00:15:10,959 --> 00:15:13,199
inside the android key store and you can

395
00:15:12,639 --> 00:15:16,800
see that

396
00:15:13,199 --> 00:15:18,719
each key will be accessible

397
00:15:16,800 --> 00:15:20,560
from the other guest application so

398
00:15:18,720 --> 00:15:24,000
basically there is no

399
00:15:20,560 --> 00:15:24,000
segregation of these keys

400
00:15:24,079 --> 00:15:28,560
such kind of vulnerabilities were there

401
00:15:26,399 --> 00:15:30,959
previously like in 2014 there was a

402
00:15:28,560 --> 00:15:33,439
vulnerability of key leakage

403
00:15:30,959 --> 00:15:34,638
between the security domains which was

404
00:15:33,440 --> 00:15:36,320
fixed in android

405
00:15:34,639 --> 00:15:40,079
but then these kind of things are still

406
00:15:36,320 --> 00:15:43,120
available in virtual containers

407
00:15:40,079 --> 00:15:45,599
so on the demonstration part so we took

408
00:15:43,120 --> 00:15:49,360
up an application called and otp

409
00:15:45,600 --> 00:15:53,120
uh it's a 2fa application for generating

410
00:15:49,360 --> 00:15:56,480
three otp and hotp tokens

411
00:15:53,120 --> 00:15:58,320
yeah we we are using this application uh

412
00:15:56,480 --> 00:16:00,000
the application inherently does not have

413
00:15:58,320 --> 00:16:02,000
any vulnerability but when we

414
00:16:00,000 --> 00:16:04,000
look into the this demo we will realize

415
00:16:02,000 --> 00:16:04,880
that how a vulnerability can be

416
00:16:04,000 --> 00:16:06,560
introduced when

417
00:16:04,880 --> 00:16:09,839
we are using an application inside the

418
00:16:06,560 --> 00:16:09,839
virtual container

419
00:16:09,920 --> 00:16:16,399
a quick idea about what we are really

420
00:16:12,959 --> 00:16:19,040
looking at in this and otp application

421
00:16:16,399 --> 00:16:20,560
so this androtp application provides a

422
00:16:19,040 --> 00:16:23,759
functionality

423
00:16:20,560 --> 00:16:26,479
where you can encrypt the data backup so

424
00:16:23,759 --> 00:16:27,440
you have the otp seeds and other related

425
00:16:26,480 --> 00:16:29,519
information

426
00:16:27,440 --> 00:16:32,079
critical information which is needed to

427
00:16:29,519 --> 00:16:34,720
generate the otp information

428
00:16:32,079 --> 00:16:37,279
so you have an aes key which is

429
00:16:34,720 --> 00:16:40,720
generated using the

430
00:16:37,279 --> 00:16:40,720
user provided

431
00:16:48,839 --> 00:16:51,839
uh

432
00:16:56,399 --> 00:17:01,199
diagrammatically that malware is present

433
00:16:59,040 --> 00:17:05,839
inside the virtual container

434
00:17:01,199 --> 00:17:05,839
and will have

435
00:17:10,160 --> 00:17:20,640
because we can't hear you clearly

436
00:17:18,079 --> 00:17:33,678
there seems to be a problem with your

437
00:17:20,640 --> 00:17:35,679
internet connection may this be the case

438
00:17:33,679 --> 00:17:39,120
okay once again we try to resolve that

439
00:17:35,679 --> 00:17:47,840
issue please stand by

440
00:17:39,120 --> 00:17:47,840
all right has to be the

441
00:17:48,480 --> 00:18:01,840
and then

442
00:18:20,160 --> 00:18:24,720
okay because i'm sorry to tell you it's

443
00:18:21,919 --> 00:18:29,840
still it still doesn't work we don't yet

444
00:18:24,720 --> 00:18:29,840
see or hear you

445
00:18:32,720 --> 00:18:35,120
okay

446
00:18:40,720 --> 00:18:44,960
am i audible hello oh yes that looks

447
00:18:43,600 --> 00:18:47,039
nice

448
00:18:44,960 --> 00:18:48,640
yeah this is horrible i'm really sorry

449
00:18:47,039 --> 00:18:50,080
about it i have no idea why it's

450
00:18:48,640 --> 00:18:52,320
happening now

451
00:18:50,080 --> 00:18:53,760
okay anyways i'm i'm almost done and

452
00:18:52,320 --> 00:18:56,080
then i can hand over to

453
00:18:53,760 --> 00:18:58,480
gotham so let me just quickly share the

454
00:18:56,080 --> 00:18:58,480
video

455
00:18:58,880 --> 00:19:03,600
so i have a small demonstration about

456
00:19:01,440 --> 00:19:05,919
how i attack the and otp

457
00:19:03,600 --> 00:19:09,039
i'm sorry it's could you possibly go

458
00:19:05,919 --> 00:19:11,679
back one or two slides because um

459
00:19:09,039 --> 00:19:12,400
time frame where we weren't sure if it

460
00:19:11,679 --> 00:19:17,520
will

461
00:19:12,400 --> 00:19:17,520
work again okay let me try it yeah

462
00:19:19,360 --> 00:19:24,320
okay so i was over here we're

463
00:19:22,400 --> 00:19:26,880
talking about that if a malware is

464
00:19:24,320 --> 00:19:29,678
present inside the virtual container

465
00:19:26,880 --> 00:19:31,440
uh it can get access to the rsa key pair

466
00:19:29,679 --> 00:19:32,480
which is generated by androtp

467
00:19:31,440 --> 00:19:35,120
application

468
00:19:32,480 --> 00:19:36,559
for backing up the data and it will also

469
00:19:35,120 --> 00:19:39,760
have the access to the

470
00:19:36,559 --> 00:19:40,960
otp key and the secret data the two

471
00:19:39,760 --> 00:19:43,520
files which are backing up the

472
00:19:40,960 --> 00:19:43,520
information

473
00:19:43,840 --> 00:19:53,840
okay moving to the demo

474
00:19:59,200 --> 00:20:03,520
so over here i have this virtual

475
00:20:02,000 --> 00:20:04,880
container which i have multiple

476
00:20:03,520 --> 00:20:09,120
application installed

477
00:20:04,880 --> 00:20:09,120
i'll be attacking an otp application

478
00:20:10,080 --> 00:20:14,000
so i have the android tp working here

479
00:20:12,159 --> 00:20:21,360
i'm entering the

480
00:20:14,000 --> 00:20:24,080
you and over here you can see that

481
00:20:21,360 --> 00:20:24,080
a31

482
00:20:28,320 --> 00:20:31,840
okay now i have uh another malware

483
00:20:30,640 --> 00:20:34,880
application

484
00:20:31,840 --> 00:20:35,600
which will be attacking this and you can

485
00:20:34,880 --> 00:20:38,720
see that

486
00:20:35,600 --> 00:20:49,840
i am able to generate the same otp

487
00:20:38,720 --> 00:20:49,840
over here

488
00:20:53,679 --> 00:21:03,840
okay because once again you were cut off

489
00:21:15,520 --> 00:21:22,000
i think we don't hear audio we do see

490
00:21:18,880 --> 00:21:24,960
the screen but we don't hear audio okay

491
00:21:22,000 --> 00:21:26,880
okay i i think uh because has some

492
00:21:24,960 --> 00:21:30,799
network issues

493
00:21:26,880 --> 00:21:33,760
yes i i guess so okay so uh i'm the next

494
00:21:30,799 --> 00:21:34,400
uh speaker so i can maybe take over yeah

495
00:21:33,760 --> 00:21:39,520
perfect

496
00:21:34,400 --> 00:21:39,520
this seems to work thank you okay

497
00:21:40,480 --> 00:21:49,120
uh okay you're seeing my screen right

498
00:21:43,679 --> 00:21:49,120
yes we see your screen yes okay

499
00:21:49,840 --> 00:21:55,360
so to just reiterate uh what

500
00:21:52,880 --> 00:21:57,520
uh vikas was mentioning so it was

501
00:21:55,360 --> 00:21:59,840
mentioning that if a malware is present

502
00:21:57,520 --> 00:22:01,039
in the same container as an otp

503
00:21:59,840 --> 00:22:03,678
application

504
00:22:01,039 --> 00:22:05,919
so the malware can actually access the

505
00:22:03,679 --> 00:22:09,120
rsa key which is inside the keystore

506
00:22:05,919 --> 00:22:12,240
and using the rsa keypad he'll be able

507
00:22:09,120 --> 00:22:14,080
to decrypt the otp seed itself so

508
00:22:12,240 --> 00:22:15,679
once you have the otp seed which is the

509
00:22:14,080 --> 00:22:18,639
primary asset then

510
00:22:15,679 --> 00:22:19,840
the malware can actually generate otp at

511
00:22:18,640 --> 00:22:22,159
will

512
00:22:19,840 --> 00:22:22,879
so this is the point which you are

513
00:22:22,159 --> 00:22:27,760
trying to show

514
00:22:22,880 --> 00:22:30,880
in this demo

515
00:22:27,760 --> 00:22:34,400
okay i'm sorry to interrupt you it seems

516
00:22:30,880 --> 00:22:34,400
that your screen is frozen

517
00:22:34,559 --> 00:22:40,720
okay it's it's uh you just

518
00:22:38,159 --> 00:22:42,320
try to make it full screen and then it

519
00:22:40,720 --> 00:22:45,679
just seemed to be frozen

520
00:22:42,320 --> 00:22:47,918
we can hear you oh okay okay yeah yeah

521
00:22:45,679 --> 00:22:47,919
okay

522
00:22:52,080 --> 00:22:56,559
uh no i think the the very same thing

523
00:22:54,720 --> 00:22:57,840
happened it simply did not switch to

524
00:22:56,559 --> 00:23:01,760
full screen

525
00:22:57,840 --> 00:23:05,840
okay okay once you start the full screen

526
00:23:01,760 --> 00:23:07,039
it freezes okay uh let me keep it like

527
00:23:05,840 --> 00:23:09,760
this is it fine

528
00:23:07,039 --> 00:23:12,000
yeah that's perfect we can read it well

529
00:23:09,760 --> 00:23:12,000
okay

530
00:23:12,960 --> 00:23:16,320
okay so the next part of the talk is

531
00:23:15,440 --> 00:23:19,440
about

532
00:23:16,320 --> 00:23:22,480
the pen testing environment so

533
00:23:19,440 --> 00:23:24,720
generally a virtual container

534
00:23:22,480 --> 00:23:25,600
can actually provide a good pen testing

535
00:23:24,720 --> 00:23:27,360
environment

536
00:23:25,600 --> 00:23:29,600
so when we researched into this virtual

537
00:23:27,360 --> 00:23:32,158
containers we wanted to check

538
00:23:29,600 --> 00:23:33,280
what are the attacks possible from a

539
00:23:32,159 --> 00:23:36,080
host application

540
00:23:33,280 --> 00:23:37,039
onto a guest application so while

541
00:23:36,080 --> 00:23:39,120
researching that

542
00:23:37,039 --> 00:23:40,559
we found that besides permissions and

543
00:23:39,120 --> 00:23:42,959
other attacks

544
00:23:40,559 --> 00:23:44,000
so we found four more attacks that is

545
00:23:42,960 --> 00:23:46,480
actually possible

546
00:23:44,000 --> 00:23:48,400
that can be used to attack a guest

547
00:23:46,480 --> 00:23:50,640
application

548
00:23:48,400 --> 00:23:52,559
and we also realized that these virtual

549
00:23:50,640 --> 00:23:53,919
containers provide a good pen testing

550
00:23:52,559 --> 00:23:56,080
environment

551
00:23:53,919 --> 00:23:56,960
because it provides a root like

552
00:23:56,080 --> 00:24:00,080
environment

553
00:23:56,960 --> 00:24:04,000
on one side and the next good thing is

554
00:24:00,080 --> 00:24:05,840
it avoids the need for patching or

555
00:24:04,000 --> 00:24:08,960
resigning or recompiling a guest

556
00:24:05,840 --> 00:24:12,559
application while doing a pen test

557
00:24:08,960 --> 00:24:12,880
so if you see in a normal scenario right

558
00:24:12,559 --> 00:24:14,399
so

559
00:24:12,880 --> 00:24:16,320
you can see this when you do a

560
00:24:14,400 --> 00:24:18,640
decompilation of an application

561
00:24:16,320 --> 00:24:21,520
so you will get something like my apk

562
00:24:18,640 --> 00:24:24,640
tool may fail at some times also

563
00:24:21,520 --> 00:24:25,279
so this is uh this kind of things is not

564
00:24:24,640 --> 00:24:27,840
really

565
00:24:25,279 --> 00:24:30,000
uh going to be a hindrance for a pen

566
00:24:27,840 --> 00:24:32,959
tester when he is actually executing

567
00:24:30,000 --> 00:24:34,640
a guest application inside a modified

568
00:24:32,960 --> 00:24:37,440
virtual container

569
00:24:34,640 --> 00:24:39,279
and in fact many runtime application

570
00:24:37,440 --> 00:24:40,720
self protection mechanisms

571
00:24:39,279 --> 00:24:42,400
which is incorporated in the

572
00:24:40,720 --> 00:24:44,799
applications can be bypassed in such

573
00:24:42,400 --> 00:24:46,880
environment

574
00:24:44,799 --> 00:24:48,320
so i'll be talking about four different

575
00:24:46,880 --> 00:24:50,640
attacks that is possible

576
00:24:48,320 --> 00:24:53,360
from from a host application on to a

577
00:24:50,640 --> 00:24:55,840
guest application

578
00:24:53,360 --> 00:24:57,760
the first one is about the debuggable

579
00:24:55,840 --> 00:25:00,320
property of

580
00:24:57,760 --> 00:25:01,840
the host application normally all the

581
00:25:00,320 --> 00:25:06,399
play store applications

582
00:25:01,840 --> 00:25:09,678
are not debuggable by default

583
00:25:06,400 --> 00:25:12,240
so generally one has to decompile it

584
00:25:09,679 --> 00:25:12,720
patch the manifest file and recompile it

585
00:25:12,240 --> 00:25:15,840
and then

586
00:25:12,720 --> 00:25:18,240
use it so

587
00:25:15,840 --> 00:25:19,360
but in the case of virtual containers if

588
00:25:18,240 --> 00:25:21,760
we what we found is

589
00:25:19,360 --> 00:25:24,240
if the host is debuggable then all the

590
00:25:21,760 --> 00:25:26,960
guest apps become debuggable too

591
00:25:24,240 --> 00:25:28,159
so once it is debuggable then you can

592
00:25:26,960 --> 00:25:30,559
actually attach or

593
00:25:28,159 --> 00:25:32,559
android debuggers to the guest apps and

594
00:25:30,559 --> 00:25:34,240
also we found that it retrace can be

595
00:25:32,559 --> 00:25:36,158
attached between guest apps

596
00:25:34,240 --> 00:25:38,640
uh and also from the host up to the

597
00:25:36,159 --> 00:25:40,640
guest app and vice versa

598
00:25:38,640 --> 00:25:42,880
so there is no additional step needed

599
00:25:40,640 --> 00:25:45,039
for any recompilation

600
00:25:42,880 --> 00:25:46,640
or resigning is required on the guest

601
00:25:45,039 --> 00:25:48,720
application

602
00:25:46,640 --> 00:25:49,919
so without tampering an application you

603
00:25:48,720 --> 00:25:53,840
can actually make

604
00:25:49,919 --> 00:25:56,240
an app debuggable the next attack

605
00:25:53,840 --> 00:25:57,840
okay so this is about uh so this is just

606
00:25:56,240 --> 00:26:01,120
a snapshot about

607
00:25:57,840 --> 00:26:03,600
how on a virtual container the

608
00:26:01,120 --> 00:26:05,039
six different uh five different uh

609
00:26:03,600 --> 00:26:07,120
applications which is downloaded from

610
00:26:05,039 --> 00:26:09,600
the play store appears here

611
00:26:07,120 --> 00:26:10,320
and by default we built the virtual

612
00:26:09,600 --> 00:26:13,360
application

613
00:26:10,320 --> 00:26:15,840
as debuggable so all the other

614
00:26:13,360 --> 00:26:17,760
applications inside the container

615
00:26:15,840 --> 00:26:18,879
becomes debuggable too so you can

616
00:26:17,760 --> 00:26:22,559
possibly attach

617
00:26:18,880 --> 00:26:22,559
a debugger to this any of these

618
00:26:22,840 --> 00:26:27,439
applications

619
00:26:25,120 --> 00:26:29,039
the next attack is about network

620
00:26:27,440 --> 00:26:32,400
security configuration

621
00:26:29,039 --> 00:26:34,320
since android 7.0 we see that that

622
00:26:32,400 --> 00:26:36,000
apps can customize their own network

623
00:26:34,320 --> 00:26:38,559
security settings

624
00:26:36,000 --> 00:26:40,400
normally you can have a user installed

625
00:26:38,559 --> 00:26:42,639
tls certificates

626
00:26:40,400 --> 00:26:44,240
and also a custom certificate which an

627
00:26:42,640 --> 00:26:46,000
application believes

628
00:26:44,240 --> 00:26:47,840
that can be part of the network security

629
00:26:46,000 --> 00:26:51,200
configurations

630
00:26:47,840 --> 00:26:52,480
so this makes sure that if certain ca

631
00:26:51,200 --> 00:26:54,159
certificates are not

632
00:26:52,480 --> 00:26:56,799
like a self-signed certificates are not

633
00:26:54,159 --> 00:26:57,679
available on the device it is possible

634
00:26:56,799 --> 00:26:59,360
to

635
00:26:57,679 --> 00:27:02,320
include as part of the application

636
00:26:59,360 --> 00:27:04,080
itself so that that specific application

637
00:27:02,320 --> 00:27:06,080
can actually trust that self-signed

638
00:27:04,080 --> 00:27:08,639
certificate or any user install

639
00:27:06,080 --> 00:27:08,639
certificates

640
00:27:09,039 --> 00:27:12,720
so what we see here is when the host

641
00:27:11,760 --> 00:27:14,158
application is

642
00:27:12,720 --> 00:27:15,919
built with a network security

643
00:27:14,159 --> 00:27:19,279
configuration

644
00:27:15,919 --> 00:27:22,000
so this particular property is inherited

645
00:27:19,279 --> 00:27:23,039
by all the guest applications as well so

646
00:27:22,000 --> 00:27:25,679
once it is

647
00:27:23,039 --> 00:27:27,120
uh once all the guest apps get the same

648
00:27:25,679 --> 00:27:29,679
set of configurations

649
00:27:27,120 --> 00:27:30,639
then it is easier to perform man in the

650
00:27:29,679 --> 00:27:32,880
middle attacks

651
00:27:30,640 --> 00:27:35,840
on all these kind of steps inside the

652
00:27:32,880 --> 00:27:35,840
container

653
00:27:36,480 --> 00:27:41,760
the third interesting attack is about

654
00:27:38,880 --> 00:27:45,520
the java security provider

655
00:27:41,760 --> 00:27:46,559
so we have jc ajca jca apis provided by

656
00:27:45,520 --> 00:27:49,039
the system

657
00:27:46,559 --> 00:27:50,399
so for all kinds of crypto operations

658
00:27:49,039 --> 00:27:54,559
and keystore operations

659
00:27:50,399 --> 00:27:56,799
applications generally use these apis

660
00:27:54,559 --> 00:27:58,879
when executing inside the container and

661
00:27:56,799 --> 00:28:02,480
if the host application

662
00:27:58,880 --> 00:28:05,600
has the flexibility to add a malicious

663
00:28:02,480 --> 00:28:07,279
security provider at number one so when

664
00:28:05,600 --> 00:28:09,678
it does this

665
00:28:07,279 --> 00:28:11,600
the all the guest applications which

666
00:28:09,679 --> 00:28:12,320
actually depend on the default security

667
00:28:11,600 --> 00:28:15,360
provider

668
00:28:12,320 --> 00:28:17,360
or unassumingly will start using this

669
00:28:15,360 --> 00:28:20,799
crypto providers and then they will be

670
00:28:17,360 --> 00:28:20,799
their crypto will be kind of broken

671
00:28:20,880 --> 00:28:24,720
so here we see that uh in this one of

672
00:28:24,159 --> 00:28:26,559
the

673
00:28:24,720 --> 00:28:28,000
as a proof of concept actually what we

674
00:28:26,559 --> 00:28:31,120
have done is uh

675
00:28:28,000 --> 00:28:32,640
we took one virtual container and uh we

676
00:28:31,120 --> 00:28:34,320
took one out of

677
00:28:32,640 --> 00:28:35,840
security provider something like spongy

678
00:28:34,320 --> 00:28:39,120
cancel and we

679
00:28:35,840 --> 00:28:41,678
uh patched that provider with some locks

680
00:28:39,120 --> 00:28:44,879
that's that it prints the keys and as

681
00:28:41,679 --> 00:28:46,159
well as prints the output so we inserted

682
00:28:44,880 --> 00:28:48,480
that at the number one

683
00:28:46,159 --> 00:28:50,159
and we tried the same and otp

684
00:28:48,480 --> 00:28:52,000
application

685
00:28:50,159 --> 00:28:53,760
so when we use this application you can

686
00:28:52,000 --> 00:28:57,760
see that

687
00:28:53,760 --> 00:29:01,360
when a otp is generated it uses a hmac

688
00:28:57,760 --> 00:29:04,240
operation so for the hmac operation the

689
00:29:01,360 --> 00:29:06,399
the the otp seed is actually the key and

690
00:29:04,240 --> 00:29:09,760
the output will be the

691
00:29:06,399 --> 00:29:11,360
32 byte value of which a portion of that

692
00:29:09,760 --> 00:29:14,879
will be the otp

693
00:29:11,360 --> 00:29:17,120
value so this logs actually prints in

694
00:29:14,880 --> 00:29:17,919
fact the otp seed itself and the otp

695
00:29:17,120 --> 00:29:21,520
value

696
00:29:17,919 --> 00:29:24,480
so once the otp seed is

697
00:29:21,520 --> 00:29:25,760
leaked then i think all the host apps

698
00:29:24,480 --> 00:29:29,200
can actually

699
00:29:25,760 --> 00:29:29,200
use it to generate otp

700
00:29:30,640 --> 00:29:35,600
the fourth attack is about having a

701
00:29:33,679 --> 00:29:36,960
flexibility to do a dynamic

702
00:29:35,600 --> 00:29:40,639
instrumentation

703
00:29:36,960 --> 00:29:42,720
on the container applications so

704
00:29:40,640 --> 00:29:44,480
generally this virtual apps pre-loads

705
00:29:42,720 --> 00:29:48,000
certain libraries

706
00:29:44,480 --> 00:29:50,640
as part of the guest applications

707
00:29:48,000 --> 00:29:52,399
so we also found frida as one of the

708
00:29:50,640 --> 00:29:54,960
very popular

709
00:29:52,399 --> 00:29:55,439
dynamic instrumentation tool and we

710
00:29:54,960 --> 00:29:57,840
start

711
00:29:55,440 --> 00:29:59,279
we thought of inserting that into the

712
00:29:57,840 --> 00:30:00,639
guest apps and see whether it really

713
00:29:59,279 --> 00:30:02,640
works

714
00:30:00,640 --> 00:30:04,000
so for this particular experiment we

715
00:30:02,640 --> 00:30:07,200
took a free gadget

716
00:30:04,000 --> 00:30:09,120
which generally works in a non-rooted

717
00:30:07,200 --> 00:30:11,120
device basically it can be inserted into

718
00:30:09,120 --> 00:30:11,760
any application on a non-rooted device

719
00:30:11,120 --> 00:30:14,559
and you can

720
00:30:11,760 --> 00:30:15,440
actually use the normal feeder scripts

721
00:30:14,559 --> 00:30:16,879
to

722
00:30:15,440 --> 00:30:20,080
reverse engineer or dynamically

723
00:30:16,880 --> 00:30:22,559
instrument the applications running

724
00:30:20,080 --> 00:30:24,720
so the host applications here actually

725
00:30:22,559 --> 00:30:27,360
can inject

726
00:30:24,720 --> 00:30:29,200
a freera gadget when the container

727
00:30:27,360 --> 00:30:32,479
application or the guest application

728
00:30:29,200 --> 00:30:32,960
starts to run so at this point we see

729
00:30:32,480 --> 00:30:35,360
that

730
00:30:32,960 --> 00:30:37,679
the frida gadget is inserted into the

731
00:30:35,360 --> 00:30:39,439
process memory of

732
00:30:37,679 --> 00:30:42,640
the process memory of the particular

733
00:30:39,440 --> 00:30:45,039
guest application and you can freely

734
00:30:42,640 --> 00:30:50,960
instrument this particular guest

735
00:30:45,039 --> 00:30:53,520
application using freda scripts

736
00:30:50,960 --> 00:30:54,320
so to summarize all the attacks we

737
00:30:53,520 --> 00:30:57,039
talked about

738
00:30:54,320 --> 00:30:57,840
so from android manifest point of view

739
00:30:57,039 --> 00:31:00,158
the permissions

740
00:30:57,840 --> 00:31:01,840
is one of the issues which is generally

741
00:31:00,159 --> 00:31:03,919
a security concern or

742
00:31:01,840 --> 00:31:06,399
more it's more of a privacy concern for

743
00:31:03,919 --> 00:31:08,399
users rather than a security issue

744
00:31:06,399 --> 00:31:10,479
the remaining things is mostly related

745
00:31:08,399 --> 00:31:12,158
to attacking an application so

746
00:31:10,480 --> 00:31:14,559
let's say a debuggable property or

747
00:31:12,159 --> 00:31:18,320
network security configurations can be

748
00:31:14,559 --> 00:31:19,918
used to uh to sniff the traffic

749
00:31:18,320 --> 00:31:22,158
or make a particular application

750
00:31:19,919 --> 00:31:25,840
debuggable inside a container

751
00:31:22,159 --> 00:31:27,200
so as part of uh there is another issues

752
00:31:25,840 --> 00:31:28,799
about you can actually list

753
00:31:27,200 --> 00:31:30,320
all the running guest applications

754
00:31:28,799 --> 00:31:33,200
inside a container

755
00:31:30,320 --> 00:31:34,960
and this virtual container provides a

756
00:31:33,200 --> 00:31:35,840
route like environment because you have

757
00:31:34,960 --> 00:31:38,159
access to

758
00:31:35,840 --> 00:31:39,439
all the sandbox data of all the guest

759
00:31:38,159 --> 00:31:41,360
applications

760
00:31:39,440 --> 00:31:42,799
and the most important thing is about

761
00:31:41,360 --> 00:31:45,439
the android keystone

762
00:31:42,799 --> 00:31:46,158
so with android keystore you can you can

763
00:31:45,440 --> 00:31:49,279
access

764
00:31:46,159 --> 00:31:50,159
keys which is generated by uh different

765
00:31:49,279 --> 00:31:52,159
guest apps

766
00:31:50,159 --> 00:31:53,600
and any mall where executing in the

767
00:31:52,159 --> 00:31:55,919
context of the

768
00:31:53,600 --> 00:31:58,158
in the virtual container can actually

769
00:31:55,919 --> 00:31:59,760
use such keys to decrypt

770
00:31:58,159 --> 00:32:01,279
the data which is stored inside the

771
00:31:59,760 --> 00:32:02,879
sandbox itself

772
00:32:01,279 --> 00:32:04,720
and the next thing is about the java

773
00:32:02,880 --> 00:32:05,039
security providers we talked about and

774
00:32:04,720 --> 00:32:07,039
the

775
00:32:05,039 --> 00:32:08,799
dynamic instrumentation of a guest app

776
00:32:07,039 --> 00:32:11,600
which is also possible

777
00:32:08,799 --> 00:32:14,240
so these are not exhaustive lists there

778
00:32:11,600 --> 00:32:15,760
can be many attacks possible

779
00:32:14,240 --> 00:32:17,519
one minor thing which we wanted to tell

780
00:32:15,760 --> 00:32:21,039
about is android id so

781
00:32:17,519 --> 00:32:21,039
android id is one of the

782
00:32:21,360 --> 00:32:24,879
mainly it is used for anti-cloning

783
00:32:23,360 --> 00:32:28,080
purposes but

784
00:32:24,880 --> 00:32:29,600
we see that even on latest android

785
00:32:28,080 --> 00:32:31,840
devices we see that it is

786
00:32:29,600 --> 00:32:36,080
same for all the guest applications

787
00:32:31,840 --> 00:32:36,080
which is indeed a security concern

788
00:32:36,480 --> 00:32:43,919
so given all these security implications

789
00:32:40,159 --> 00:32:45,039
so we thought of uh providing mechanisms

790
00:32:43,919 --> 00:32:48,799
that can be used to

791
00:32:45,039 --> 00:32:51,440
detect such kind of virtual containers

792
00:32:48,799 --> 00:32:53,039
the first thing is about safetynet so

793
00:32:51,440 --> 00:32:56,080
safetynet as you know

794
00:32:53,039 --> 00:32:59,039
is a set of services and apis which is

795
00:32:56,080 --> 00:32:59,439
which helps to know the device integrity

796
00:32:59,039 --> 00:33:00,960
and

797
00:32:59,440 --> 00:33:02,640
this is generally used by security

798
00:33:00,960 --> 00:33:04,720
sensitive applications

799
00:33:02,640 --> 00:33:06,240
what we saw that is inside the container

800
00:33:04,720 --> 00:33:09,519
when a guest application

801
00:33:06,240 --> 00:33:10,320
calls a safety net api the result is in

802
00:33:09,519 --> 00:33:12,640
fact

803
00:33:10,320 --> 00:33:16,158
it says the cts profile match is false

804
00:33:12,640 --> 00:33:18,320
as well as the basic integrity is false

805
00:33:16,159 --> 00:33:20,000
but this is also one good way to detect

806
00:33:18,320 --> 00:33:21,360
that you are running in a compromised

807
00:33:20,000 --> 00:33:23,600
environment

808
00:33:21,360 --> 00:33:24,559
but not all virtual containers actually

809
00:33:23,600 --> 00:33:26,719
support this

810
00:33:24,559 --> 00:33:28,639
google play services so which is kind of

811
00:33:26,720 --> 00:33:30,720
a negative point so you can't completely

812
00:33:28,640 --> 00:33:33,919
rely on safety net alone

813
00:33:30,720 --> 00:33:37,360
when executing inside the country

814
00:33:33,919 --> 00:33:39,600
so we are going to talk about six

815
00:33:37,360 --> 00:33:41,439
different detection mechanisms using

816
00:33:39,600 --> 00:33:44,000
heuristics

817
00:33:41,440 --> 00:33:45,120
so here are manifest permissions as we

818
00:33:44,000 --> 00:33:48,000
discussed earlier

819
00:33:45,120 --> 00:33:49,039
the host application has a whole lot of

820
00:33:48,000 --> 00:33:50,960
permissions

821
00:33:49,039 --> 00:33:52,399
and generally a guest application need

822
00:33:50,960 --> 00:33:55,279
not have all these

823
00:33:52,399 --> 00:33:56,320
permissions granted so if you if a guest

824
00:33:55,279 --> 00:33:58,000
application checks

825
00:33:56,320 --> 00:34:00,320
uh what is what are the permissions

826
00:33:58,000 --> 00:34:03,120
granted versus what is

827
00:34:00,320 --> 00:34:04,639
uh actually asked for so that difference

828
00:34:03,120 --> 00:34:06,399
is going to indicate that guest

829
00:34:04,640 --> 00:34:08,960
application is in fact running in a

830
00:34:06,399 --> 00:34:11,359
compromised environment

831
00:34:08,960 --> 00:34:12,879
the second detection mechanism is about

832
00:34:11,359 --> 00:34:15,679
the storage directory

833
00:34:12,879 --> 00:34:17,279
so normally on android you have a

834
00:34:15,679 --> 00:34:20,800
flexible

835
00:34:17,280 --> 00:34:24,000
normal common data paths like data data

836
00:34:20,800 --> 00:34:27,599
and the package name but inside the

837
00:34:24,000 --> 00:34:29,839
virtual container it has a additional

838
00:34:27,599 --> 00:34:31,679
package name which is related to the

839
00:34:29,839 --> 00:34:34,078
host application itself

840
00:34:31,679 --> 00:34:36,240
so you can see when the and otp storage

841
00:34:34,079 --> 00:34:38,079
directory it includes the package name

842
00:34:36,239 --> 00:34:40,479
of a parallel space itself

843
00:34:38,079 --> 00:34:41,520
so this is also an indication that you

844
00:34:40,480 --> 00:34:44,399
are running inside a

845
00:34:41,520 --> 00:34:44,399
virtual container

846
00:34:44,960 --> 00:34:50,240
the third detection mechanism is about

847
00:34:48,000 --> 00:34:51,199
using a process memory a container

848
00:34:50,239 --> 00:34:54,000
application

849
00:34:51,199 --> 00:34:54,638
when it checks its own process memory it

850
00:34:54,000 --> 00:34:58,320
usually can

851
00:34:54,639 --> 00:35:00,320
find only the uh the libraries loaded by

852
00:34:58,320 --> 00:35:01,119
the particular application or the system

853
00:35:00,320 --> 00:35:04,800
libraries

854
00:35:01,119 --> 00:35:07,920
but you see a whole lot of application

855
00:35:04,800 --> 00:35:10,880
libraries or artifacts which is not

856
00:35:07,920 --> 00:35:13,280
related to that specific application

857
00:35:10,880 --> 00:35:15,119
so using this also is one of the

858
00:35:13,280 --> 00:35:17,440
detection mechanisms

859
00:35:15,119 --> 00:35:18,960
the fourth is about seeing the

860
00:35:17,440 --> 00:35:21,680
environmental variables

861
00:35:18,960 --> 00:35:22,800
generally some of the containers have

862
00:35:21,680 --> 00:35:25,279
some proprietary

863
00:35:22,800 --> 00:35:27,440
namings for this environmental variables

864
00:35:25,280 --> 00:35:28,960
so which is also a good indication that

865
00:35:27,440 --> 00:35:30,480
it is

866
00:35:28,960 --> 00:35:32,079
that you can understand that it is

867
00:35:30,480 --> 00:35:34,640
running inside some container

868
00:35:32,079 --> 00:35:37,280
there is one more thing is uh ld preload

869
00:35:34,640 --> 00:35:38,078
so normally a host application preloads

870
00:35:37,280 --> 00:35:40,160
certain

871
00:35:38,079 --> 00:35:41,599
certain libraries on the guest

872
00:35:40,160 --> 00:35:45,279
application

873
00:35:41,599 --> 00:35:45,760
so you can find a part of the ld preload

874
00:35:45,280 --> 00:35:47,599
to be

875
00:35:45,760 --> 00:35:49,280
something suspicious which is not

876
00:35:47,599 --> 00:35:52,400
related to this application

877
00:35:49,280 --> 00:35:54,720
so this is also a good indication that

878
00:35:52,400 --> 00:35:57,359
that the application is running inside a

879
00:35:54,720 --> 00:35:59,359
virtual container

880
00:35:57,359 --> 00:36:01,119
the fifth is one of the simplest things

881
00:35:59,359 --> 00:36:03,119
when you check when you iterate through

882
00:36:01,119 --> 00:36:04,240
the running services of a particular

883
00:36:03,119 --> 00:36:05,920
application

884
00:36:04,240 --> 00:36:08,000
usually you will find the running

885
00:36:05,920 --> 00:36:09,920
services of your own application

886
00:36:08,000 --> 00:36:11,839
but inside the container you will see

887
00:36:09,920 --> 00:36:13,359
additional services which is run by the

888
00:36:11,839 --> 00:36:15,680
virtual container itself

889
00:36:13,359 --> 00:36:18,480
so that can also be a good indicator of

890
00:36:15,680 --> 00:36:21,359
a virtual container

891
00:36:18,480 --> 00:36:22,720
the sixth mechanism is about app

892
00:36:21,359 --> 00:36:26,799
components

893
00:36:22,720 --> 00:36:28,959
generally you can declare some kind of

894
00:36:26,800 --> 00:36:30,800
a particular component something like a

895
00:36:28,960 --> 00:36:32,960
broadcast receiver as

896
00:36:30,800 --> 00:36:34,079
enabled is not enabled like enabled is

897
00:36:32,960 --> 00:36:36,800
equal to false

898
00:36:34,079 --> 00:36:37,599
and dynamically enable them in the code

899
00:36:36,800 --> 00:36:39,680
but this

900
00:36:37,599 --> 00:36:41,040
kind of operation doesn't really work

901
00:36:39,680 --> 00:36:43,200
inside a virtual container

902
00:36:41,040 --> 00:36:45,119
basically this broadcast receiver cannot

903
00:36:43,200 --> 00:36:46,000
be enabled at all when you actually run

904
00:36:45,119 --> 00:36:47,359
inside a container

905
00:36:46,000 --> 00:36:48,880
so which this is also one of the

906
00:36:47,359 --> 00:36:50,799
indications that it is running inside a

907
00:36:48,880 --> 00:36:53,119
virtual container

908
00:36:50,800 --> 00:36:54,160
so putting it all together so we are

909
00:36:53,119 --> 00:36:57,040
releasing uh

910
00:36:54,160 --> 00:36:58,560
a conveyer library so it is an open

911
00:36:57,040 --> 00:37:00,160
source library and it is

912
00:36:58,560 --> 00:37:01,599
available in this link which is which

913
00:37:00,160 --> 00:37:05,040
you can see here

914
00:37:01,599 --> 00:37:06,320
so it can detect the presence of virtual

915
00:37:05,040 --> 00:37:08,320
containers using

916
00:37:06,320 --> 00:37:10,320
the various uh the techniques which we

917
00:37:08,320 --> 00:37:12,960
discussed already

918
00:37:10,320 --> 00:37:14,160
so one caution that it is actually not

919
00:37:12,960 --> 00:37:16,079
tested across

920
00:37:14,160 --> 00:37:18,160
many android devices and it may have

921
00:37:16,079 --> 00:37:20,560
some rough edges so be cautious about

922
00:37:18,160 --> 00:37:23,680
using it

923
00:37:20,560 --> 00:37:27,040
so we ran this columbia library

924
00:37:23,680 --> 00:37:28,240
on different popular container

925
00:37:27,040 --> 00:37:30,240
applications

926
00:37:28,240 --> 00:37:31,359
and we found that process memory and

927
00:37:30,240 --> 00:37:34,640
storage directory

928
00:37:31,359 --> 00:37:35,359
seems to be more consistently able to

929
00:37:34,640 --> 00:37:38,799
detect

930
00:37:35,359 --> 00:37:41,279
all these containers so you can

931
00:37:38,800 --> 00:37:42,160
you can really believe this mechanisms

932
00:37:41,280 --> 00:37:44,560
as

933
00:37:42,160 --> 00:37:46,000
as one of the reliable detection

934
00:37:44,560 --> 00:37:48,480
mechanisms to be used to detect

935
00:37:46,000 --> 00:37:48,480
containers

936
00:37:49,119 --> 00:37:53,839
so given all the security implications

937
00:37:51,920 --> 00:37:55,920
uh so we have some recommendations for

938
00:37:53,839 --> 00:37:58,240
the developers

939
00:37:55,920 --> 00:38:00,240
so at first do not let your apps run

940
00:37:58,240 --> 00:38:02,560
inside a virtual container

941
00:38:00,240 --> 00:38:03,439
because given the security implications

942
00:38:02,560 --> 00:38:05,920
we see

943
00:38:03,440 --> 00:38:07,680
already so you may you need to increase

944
00:38:05,920 --> 00:38:09,440
the cost of repacking your app as a

945
00:38:07,680 --> 00:38:12,399
malware

946
00:38:09,440 --> 00:38:13,520
so also do not rely completely on the

947
00:38:12,400 --> 00:38:15,760
warrior security

948
00:38:13,520 --> 00:38:17,599
you should have your own mechanisms to

949
00:38:15,760 --> 00:38:20,880
encrypt data at rest

950
00:38:17,599 --> 00:38:23,520
and for the network configurations

951
00:38:20,880 --> 00:38:24,960
so to prevent management middle attacks

952
00:38:23,520 --> 00:38:26,320
you should have your own certificate

953
00:38:24,960 --> 00:38:28,800
pinning mechanisms

954
00:38:26,320 --> 00:38:30,240
and if you are really security sensitive

955
00:38:28,800 --> 00:38:30,800
application then you may need to think

956
00:38:30,240 --> 00:38:32,720
about

957
00:38:30,800 --> 00:38:35,599
having an additional layer of encryption

958
00:38:32,720 --> 00:38:38,000
or signing of network traffic

959
00:38:35,599 --> 00:38:39,119
and for the crypto again don't rely on

960
00:38:38,000 --> 00:38:42,079
the default

961
00:38:39,119 --> 00:38:43,760
platform providers like what is

962
00:38:42,079 --> 00:38:47,119
available on the system

963
00:38:43,760 --> 00:38:49,520
rather you can have your own provider

964
00:38:47,119 --> 00:38:51,680
or you can use directly the crypto apis

965
00:38:49,520 --> 00:38:54,160
provided by bouncy castle

966
00:38:51,680 --> 00:38:55,759
so also there's another way that you can

967
00:38:54,160 --> 00:38:58,000
use

968
00:38:55,760 --> 00:38:59,359
explicit security providers like cipher

969
00:38:58,000 --> 00:39:02,960
dot get instance with

970
00:38:59,359 --> 00:39:03,279
aes and putting a second parameter which

971
00:39:02,960 --> 00:39:07,440
is

972
00:39:03,280 --> 00:39:09,280
pointing to the explicit provider

973
00:39:07,440 --> 00:39:10,720
so the recommendations are applicable as

974
00:39:09,280 --> 00:39:13,280
per the threat model which

975
00:39:10,720 --> 00:39:15,919
you have understood for your

976
00:39:13,280 --> 00:39:15,920
applications

977
00:39:16,640 --> 00:39:20,319
and we are coming to the discussion and

978
00:39:18,160 --> 00:39:23,359
conclusion part

979
00:39:20,320 --> 00:39:25,359
so uh here uh generally this

980
00:39:23,359 --> 00:39:28,160
user should be well informed about the

981
00:39:25,359 --> 00:39:29,920
security implications of

982
00:39:28,160 --> 00:39:31,359
this kind of application because of

983
00:39:29,920 --> 00:39:34,720
these virtual containers

984
00:39:31,359 --> 00:39:36,000
so users should avoid in fact using this

985
00:39:34,720 --> 00:39:39,118
virtual containers for

986
00:39:36,000 --> 00:39:40,720
sensitive applications at least

987
00:39:39,119 --> 00:39:43,200
we see that some oems are already

988
00:39:40,720 --> 00:39:44,078
supporting it and if more and more oem

989
00:39:43,200 --> 00:39:46,000
starts supporting

990
00:39:44,079 --> 00:39:48,400
such kind of running multiple instances

991
00:39:46,000 --> 00:39:51,280
of an app it will be great

992
00:39:48,400 --> 00:39:52,880
and uh and more importantly if it is

993
00:39:51,280 --> 00:39:55,200
already if it is implemented as part of

994
00:39:52,880 --> 00:39:58,320
the aosp itself it will be even more

995
00:39:55,200 --> 00:39:59,279
better so given all the security

996
00:39:58,320 --> 00:40:02,240
implications

997
00:39:59,280 --> 00:40:03,599
we are actually not able to reason why

998
00:40:02,240 --> 00:40:05,200
this virtual containers

999
00:40:03,599 --> 00:40:07,599
are actually allowed in the play store

1000
00:40:05,200 --> 00:40:07,598
itself

1001
00:40:08,319 --> 00:40:12,800
so to conclude uh so we see there is a

1002
00:40:11,040 --> 00:40:15,839
need to run multiple instances

1003
00:40:12,800 --> 00:40:17,520
of an app on a device uh virtual

1004
00:40:15,839 --> 00:40:20,319
containers are in fact

1005
00:40:17,520 --> 00:40:21,359
easy to use and it solves a particular

1006
00:40:20,319 --> 00:40:23,920
purpose

1007
00:40:21,359 --> 00:40:25,920
but we see that it abuses the android

1008
00:40:23,920 --> 00:40:28,240
security model

1009
00:40:25,920 --> 00:40:29,839
so we also see that there is a security

1010
00:40:28,240 --> 00:40:31,118
and privacy concern

1011
00:40:29,839 --> 00:40:33,119
for all the guest apps which is

1012
00:40:31,119 --> 00:40:34,960
executing and

1013
00:40:33,119 --> 00:40:36,240
we saw that virtual containers can be

1014
00:40:34,960 --> 00:40:38,960
used as a

1015
00:40:36,240 --> 00:40:40,000
good pen testing environment and we see

1016
00:40:38,960 --> 00:40:42,079
that safety net

1017
00:40:40,000 --> 00:40:43,040
and other heuristic mechanisms can be

1018
00:40:42,079 --> 00:40:46,240
used to detect

1019
00:40:43,040 --> 00:40:47,040
virtual containers so our contribution

1020
00:40:46,240 --> 00:40:49,759
in this talk

1021
00:40:47,040 --> 00:40:50,560
is about documenting and demonstrating

1022
00:40:49,760 --> 00:40:53,359
the different

1023
00:40:50,560 --> 00:40:55,359
attacks and we are also proposing

1024
00:40:53,359 --> 00:40:58,400
different detection mechanisms and

1025
00:40:55,359 --> 00:41:01,598
releasing the conveyor level so i will

1026
00:40:58,400 --> 00:41:01,599
show you a very short

1027
00:41:04,839 --> 00:41:07,839
demo

1028
00:41:24,880 --> 00:41:30,160
uh are you able to see this thing yes

1029
00:41:27,920 --> 00:41:32,839
would you see your screen and currently

1030
00:41:30,160 --> 00:41:36,480
a virtualized android

1031
00:41:32,839 --> 00:41:38,400
okay so we developed the application

1032
00:41:36,480 --> 00:41:40,880
which is called conveyor

1033
00:41:38,400 --> 00:41:42,800
so this conveyor is uh actually

1034
00:41:40,880 --> 00:41:43,359
mimicking as if what a malware can

1035
00:41:42,800 --> 00:41:46,400
actually do

1036
00:41:43,359 --> 00:41:49,279
inside the container application so

1037
00:41:46,400 --> 00:41:50,160
whatever we discussed earlier about uh

1038
00:41:49,280 --> 00:41:52,560
how

1039
00:41:50,160 --> 00:41:53,839
how normal guest applications can

1040
00:41:52,560 --> 00:41:56,240
actually see

1041
00:41:53,839 --> 00:41:58,480
can do an attack on other applications

1042
00:41:56,240 --> 00:42:02,160
here we have listed out most of the

1043
00:41:58,480 --> 00:42:04,640
attacks which we discussed so here is

1044
00:42:02,160 --> 00:42:05,279
actually a list of applications which is

1045
00:42:04,640 --> 00:42:07,839
actually

1046
00:42:05,280 --> 00:42:08,640
present inside the container and you can

1047
00:42:07,839 --> 00:42:10,160
see a zip

1048
00:42:08,640 --> 00:42:11,759
so once you press this zip you can

1049
00:42:10,160 --> 00:42:13,680
actually have the data

1050
00:42:11,760 --> 00:42:15,839
of that particular application exported

1051
00:42:13,680 --> 00:42:16,799
to the sd card or you can actually

1052
00:42:15,839 --> 00:42:19,759
export it to

1053
00:42:16,800 --> 00:42:19,760
a cloud service

1054
00:42:21,359 --> 00:42:24,960
the next thing is about seeing the list

1055
00:42:24,000 --> 00:42:27,839
of running apps

1056
00:42:24,960 --> 00:42:28,800
you can see a whole lot of running apps

1057
00:42:27,839 --> 00:42:30,799
basically when

1058
00:42:28,800 --> 00:42:32,240
especially these are all in fact running

1059
00:42:30,800 --> 00:42:33,520
inside the guest application inside the

1060
00:42:32,240 --> 00:42:35,040
container so you can see

1061
00:42:33,520 --> 00:42:38,240
all the running guest applications

1062
00:42:35,040 --> 00:42:38,240
inside this container

1063
00:42:40,880 --> 00:42:44,319
next is about the keystore thing so we

1064
00:42:43,359 --> 00:42:46,640
see that so

1065
00:42:44,319 --> 00:42:47,680
we can see all kinds of keys even though

1066
00:42:46,640 --> 00:42:50,078
this conveyor

1067
00:42:47,680 --> 00:42:51,200
app is actually haven't created any keys

1068
00:42:50,079 --> 00:42:53,760
inside the keystroke

1069
00:42:51,200 --> 00:42:54,720
but it is all the keys of the keystore

1070
00:42:53,760 --> 00:42:56,720
is visible

1071
00:42:54,720 --> 00:42:58,560
and in fact you can get to know what

1072
00:42:56,720 --> 00:43:00,078
kind of key is it and what is the alias

1073
00:42:58,560 --> 00:43:01,920
what are the algorithms can be used with

1074
00:43:00,079 --> 00:43:05,040
this keys

1075
00:43:01,920 --> 00:43:07,119
and finally we also show the detection

1076
00:43:05,040 --> 00:43:09,200
so we are running inside the parallel

1077
00:43:07,119 --> 00:43:12,480
space app

1078
00:43:09,200 --> 00:43:14,078
so you can actually see the different

1079
00:43:12,480 --> 00:43:16,800
detection mechanisms which we

1080
00:43:14,079 --> 00:43:20,240
showcased is actually detected when

1081
00:43:16,800 --> 00:43:20,240
running inside the final space

1082
00:43:24,839 --> 00:43:27,839
okay

1083
00:43:34,800 --> 00:43:38,079
okay so thank you for this opportunity

1084
00:43:37,760 --> 00:43:41,839
and

1085
00:43:38,079 --> 00:43:41,839
we are looking forward for the questions

1086
00:43:42,160 --> 00:43:45,680
uh okay thank you very much gotham and

1087
00:43:44,400 --> 00:43:47,520
vikas for your talk

1088
00:43:45,680 --> 00:43:48,879
uh sorry for the technical difficulties

1089
00:43:47,520 --> 00:43:51,440
but i guess in the end

1090
00:43:48,880 --> 00:43:53,280
everyone was able to follow we are ready

1091
00:43:51,440 --> 00:43:55,680
for another q and a session

1092
00:43:53,280 --> 00:43:57,200
once again you can either use the race

1093
00:43:55,680 --> 00:44:00,960
hand feature in zoom

1094
00:43:57,200 --> 00:44:04,240
if you follow using the zoom client or

1095
00:44:00,960 --> 00:44:06,880
you can use metamost the program 1

1096
00:44:04,240 --> 00:44:10,160
q and the 8 channel and we actually have

1097
00:44:06,880 --> 00:44:13,599
a couple of questions already

1098
00:44:10,160 --> 00:44:15,598
i try to do them in order the first one

1099
00:44:13,599 --> 00:44:18,079
is from thomas he asks

1100
00:44:15,599 --> 00:44:19,200
do you know if there is a connection to

1101
00:44:18,079 --> 00:44:21,680
activity view

1102
00:44:19,200 --> 00:44:24,799
which allows to start activities of

1103
00:44:21,680 --> 00:44:24,799
other applications

1104
00:44:28,079 --> 00:44:32,880
so for starting the activities they they

1105
00:44:32,000 --> 00:44:36,160
tend to hook

1106
00:44:32,880 --> 00:44:38,400
the activities which are called

1107
00:44:36,160 --> 00:44:39,759
i'm currently not 100 sure if you can

1108
00:44:38,400 --> 00:44:42,000
start the activities

1109
00:44:39,760 --> 00:44:44,000
on your own for the other applications

1110
00:44:42,000 --> 00:44:44,880
uh but for sure when a user starts an

1111
00:44:44,000 --> 00:44:48,400
activity

1112
00:44:44,880 --> 00:44:49,839
uh you can always hook and basically

1113
00:44:48,400 --> 00:44:52,319
it looks transparent to the android

1114
00:44:49,839 --> 00:44:52,319
framework

1115
00:44:53,760 --> 00:45:00,800
okay thanks um then we do have

1116
00:44:57,599 --> 00:45:03,920
actually a couple of questions from

1117
00:45:00,800 --> 00:45:04,720
daniel thomas the first one i just read

1118
00:45:03,920 --> 00:45:07,200
it out loud

1119
00:45:04,720 --> 00:45:08,160
the first one is um he says these

1120
00:45:07,200 --> 00:45:10,399
attacks are

1121
00:45:08,160 --> 00:45:11,759
interesting could you expand on the

1122
00:45:10,400 --> 00:45:14,560
threat model

1123
00:45:11,760 --> 00:45:16,800
uh i'm not so clear on the relative

1124
00:45:14,560 --> 00:45:18,880
danger of different attacks as some

1125
00:45:16,800 --> 00:45:21,680
require a malicious host

1126
00:45:18,880 --> 00:45:25,920
and others only a malicious guest app

1127
00:45:21,680 --> 00:45:25,919
thou is the host vulnerable to the guest

1128
00:45:26,960 --> 00:45:33,119
so it's about the threat model yeah okay

1129
00:45:30,640 --> 00:45:34,560
that's an interesting one so yes that is

1130
00:45:33,119 --> 00:45:36,640
correct that

1131
00:45:34,560 --> 00:45:38,799
for for this threat model you always

1132
00:45:36,640 --> 00:45:42,319
require

1133
00:45:38,800 --> 00:45:44,079
a host application a malicious one

1134
00:45:42,319 --> 00:45:46,079
but then we have seen that there is a

1135
00:45:44,079 --> 00:45:47,040
tendency for users to use these

1136
00:45:46,079 --> 00:45:49,280
applications

1137
00:45:47,040 --> 00:45:50,880
and you need to believe on these

1138
00:45:49,280 --> 00:45:52,319
providers that they don't do anything

1139
00:45:50,880 --> 00:45:54,400
malicious

1140
00:45:52,319 --> 00:45:56,480
so firstly we are depending on the end

1141
00:45:54,400 --> 00:45:58,160
user that they

1142
00:45:56,480 --> 00:46:00,160
that they know very well like what

1143
00:45:58,160 --> 00:46:02,399
security decision is to be taken and if

1144
00:46:00,160 --> 00:46:04,319
they're using these virtual containers

1145
00:46:02,400 --> 00:46:06,560
uh they don't install sensitive

1146
00:46:04,319 --> 00:46:08,480
applications so that is one aspect of it

1147
00:46:06,560 --> 00:46:09,920
the other aspect is that of a malware

1148
00:46:08,480 --> 00:46:12,079
that once

1149
00:46:09,920 --> 00:46:14,480
this is installed as a malware then they

1150
00:46:12,079 --> 00:46:16,079
can always leverage they can

1151
00:46:14,480 --> 00:46:18,319
use the applications which are already

1152
00:46:16,079 --> 00:46:21,520
installed on these uh devices

1153
00:46:18,319 --> 00:46:23,680
uh to to mimic uh like a real one

1154
00:46:21,520 --> 00:46:24,880
so yeah that that's mostly in terms of

1155
00:46:23,680 --> 00:46:28,078
the threat model uh

1156
00:46:24,880 --> 00:46:30,240
gotham you have anything to uh add

1157
00:46:28,079 --> 00:46:31,599
uh generally actually what we see is uh

1158
00:46:30,240 --> 00:46:34,319
this containers actually

1159
00:46:31,599 --> 00:46:35,359
act like a god mode kind of uh uh

1160
00:46:34,319 --> 00:46:37,279
application

1161
00:46:35,359 --> 00:46:39,119
so normally these kind of god mode

1162
00:46:37,280 --> 00:46:42,079
applications are the uh

1163
00:46:39,119 --> 00:46:43,839
general attack points for the malware so

1164
00:46:42,079 --> 00:46:45,359
generally always try to attack such kind

1165
00:46:43,839 --> 00:46:48,160
of applications so that they can

1166
00:46:45,359 --> 00:46:50,160
gain all kinds of privileges within the

1167
00:46:48,160 --> 00:46:53,920
virtual container

1168
00:46:50,160 --> 00:46:56,078
so typically it is mostly whether

1169
00:46:53,920 --> 00:46:58,480
virtual container can be can be a rogue

1170
00:46:56,079 --> 00:47:01,119
application or it can be

1171
00:46:58,480 --> 00:47:04,400
our application becomes raw when it is

1172
00:47:01,119 --> 00:47:04,400
put inside the virtual content

1173
00:47:05,040 --> 00:47:08,880
okay thank you very much the next

1174
00:47:07,520 --> 00:47:11,839
question from thomas

1175
00:47:08,880 --> 00:47:14,000
is would it be possible for container

1176
00:47:11,839 --> 00:47:16,799
developers to improve their

1177
00:47:14,000 --> 00:47:18,319
faking capabilities of being a real

1178
00:47:16,800 --> 00:47:21,440
device to guest apps

1179
00:47:18,319 --> 00:47:23,759
so that none of your heuristics actually

1180
00:47:21,440 --> 00:47:25,920
work

1181
00:47:23,760 --> 00:47:27,280
yeah it is very much possible so it is

1182
00:47:25,920 --> 00:47:30,079
like a cat and mouse game

1183
00:47:27,280 --> 00:47:32,079
uh i'm pretty sure if you're helping

1184
00:47:30,079 --> 00:47:34,240
thing is open source so you can

1185
00:47:32,079 --> 00:47:35,839
always make it look like uh the

1186
00:47:34,240 --> 00:47:38,959
container is not present at

1187
00:47:35,839 --> 00:47:39,440
all so uh i think many of us can relate

1188
00:47:38,960 --> 00:47:41,280
it to

1189
00:47:39,440 --> 00:47:43,520
a rooting of the android device like

1190
00:47:41,280 --> 00:47:44,800
magisk hide hides it so well that you

1191
00:47:43,520 --> 00:47:46,960
cannot even

1192
00:47:44,800 --> 00:47:50,400
uh detect the presence of the root so

1193
00:47:46,960 --> 00:47:50,400
it's very much the same scenario

1194
00:47:50,720 --> 00:47:55,040
okay uh one more question from daniel if

1195
00:47:53,760 --> 00:47:58,720
you directly call

1196
00:47:55,040 --> 00:48:01,279
bouncy castle do you benefit from opera

1197
00:47:58,720 --> 00:48:03,040
operating system security updates for

1198
00:48:01,280 --> 00:48:05,280
the security providers

1199
00:48:03,040 --> 00:48:06,079
or do you have to ship updates for your

1200
00:48:05,280 --> 00:48:10,079
application

1201
00:48:06,079 --> 00:48:13,119
every time bounty castle ships an update

1202
00:48:10,079 --> 00:48:15,680
uh yes it's a good question actually so

1203
00:48:13,119 --> 00:48:18,240
with with bouncy castle because it is

1204
00:48:15,680 --> 00:48:20,799
actually part of your application itself

1205
00:48:18,240 --> 00:48:22,640
so that means uh so whenever there is a

1206
00:48:20,800 --> 00:48:24,480
update on the bouncy castle so you may

1207
00:48:22,640 --> 00:48:25,598
need to actually update your application

1208
00:48:24,480 --> 00:48:27,920
as well

1209
00:48:25,599 --> 00:48:29,040
uh uh given all these things actually

1210
00:48:27,920 --> 00:48:31,920
yeah i agree that

1211
00:48:29,040 --> 00:48:32,720
uh system security providers are up to

1212
00:48:31,920 --> 00:48:36,319
date

1213
00:48:32,720 --> 00:48:37,839
but there are other pitfalls like

1214
00:48:36,319 --> 00:48:39,279
when you are executing inside a virtual

1215
00:48:37,839 --> 00:48:40,319
container so you have to be really

1216
00:48:39,280 --> 00:48:42,640
careful about

1217
00:48:40,319 --> 00:48:45,040
are you really using a system default

1218
00:48:42,640 --> 00:48:47,279
security provider or it is

1219
00:48:45,040 --> 00:48:48,319
a patched provider so if you are able to

1220
00:48:47,280 --> 00:48:50,160
differentiate that

1221
00:48:48,319 --> 00:48:52,558
then it is good if you are not it is

1222
00:48:50,160 --> 00:48:54,240
better to actually focus

1223
00:48:52,559 --> 00:48:56,720
you can have your own set of crypto

1224
00:48:54,240 --> 00:48:56,720
providers

1225
00:48:57,119 --> 00:49:01,599
okay thank you so we have a bunch more

1226
00:49:00,000 --> 00:49:03,520
questions

1227
00:49:01,599 --> 00:49:05,040
which is no problem because fortunately

1228
00:49:03,520 --> 00:49:08,960
we are

1229
00:49:05,040 --> 00:49:11,520
just waiting for the break william

1230
00:49:08,960 --> 00:49:14,000
william writes into the chat i wonder

1231
00:49:11,520 --> 00:49:16,319
how much of the motivation for using

1232
00:49:14,000 --> 00:49:19,040
these applications is a result

1233
00:49:16,319 --> 00:49:20,079
of the difficulty of switching between

1234
00:49:19,040 --> 00:49:24,160
user accounts in

1235
00:49:20,079 --> 00:49:26,720
android similar to the chat hats problem

1236
00:49:24,160 --> 00:49:29,598
which is apps doing dangerous things

1237
00:49:26,720 --> 00:49:31,439
android created a dedicated api

1238
00:49:29,599 --> 00:49:34,240
possibly there is a way for android to

1239
00:49:31,440 --> 00:49:38,240
associate two user accounts in a way

1240
00:49:34,240 --> 00:49:40,319
that this is more seamless in the ui

1241
00:49:38,240 --> 00:49:42,799
yeah that's what is one of the major

1242
00:49:40,319 --> 00:49:45,119
point of our discussion as well that

1243
00:49:42,800 --> 00:49:46,559
for sure there is a big market uh for

1244
00:49:45,119 --> 00:49:48,319
sure people want it

1245
00:49:46,559 --> 00:49:50,079
i mean from a personal point of view as

1246
00:49:48,319 --> 00:49:51,759
well i do tend to use two whatsapp

1247
00:49:50,079 --> 00:49:54,880
accounts as well so

1248
00:49:51,760 --> 00:49:58,720
i feel the need of it and uh

1249
00:49:54,880 --> 00:50:00,400
given the the the need the use case

1250
00:49:58,720 --> 00:50:04,160
and then you have the example of some

1251
00:50:00,400 --> 00:50:06,640
oems doing it like oneplus and xiaomi

1252
00:50:04,160 --> 00:50:08,319
uh if you personally ask me yes i i very

1253
00:50:06,640 --> 00:50:09,920
much would be happy if android can

1254
00:50:08,319 --> 00:50:12,160
provide such kind of

1255
00:50:09,920 --> 00:50:13,440
inbuilt mechanisms and which we can

1256
00:50:12,160 --> 00:50:17,040
believe and use it

1257
00:50:13,440 --> 00:50:17,040
without considering the security

1258
00:50:17,359 --> 00:50:25,119
okay thank you the next question is from

1259
00:50:21,440 --> 00:50:28,559
paul blandell he asks if any app

1260
00:50:25,119 --> 00:50:30,160
can be imported into parallel spaces and

1261
00:50:28,559 --> 00:50:32,559
thus be vulnerable

1262
00:50:30,160 --> 00:50:34,640
or does the app need some special

1263
00:50:32,559 --> 00:50:37,760
changes in order to work with

1264
00:50:34,640 --> 00:50:40,558
parallel spaces uh any app

1265
00:50:37,760 --> 00:50:42,319
so we tried multiple of them so if you

1266
00:50:40,559 --> 00:50:44,720
see in the slides we have screenshots

1267
00:50:42,319 --> 00:50:46,640
for like ride hailing apps uber

1268
00:50:44,720 --> 00:50:48,078
we tried some digital apps uh they were

1269
00:50:46,640 --> 00:50:49,920
working as well

1270
00:50:48,079 --> 00:50:51,760
with some applications other than

1271
00:50:49,920 --> 00:50:54,480
parallel space

1272
00:50:51,760 --> 00:50:56,240
there could be a slight problem if they

1273
00:50:54,480 --> 00:50:56,880
are heavily dependent on google play

1274
00:50:56,240 --> 00:51:00,000
services

1275
00:50:56,880 --> 00:51:00,400
or those kind of services but other than

1276
00:51:00,000 --> 00:51:02,720
that

1277
00:51:00,400 --> 00:51:04,160
if they are standalone applications

1278
00:51:02,720 --> 00:51:06,839
without much dependence

1279
00:51:04,160 --> 00:51:08,078
on google play services they work pretty

1280
00:51:06,839 --> 00:51:12,240
fine

1281
00:51:08,079 --> 00:51:14,000
okay um not so much of a question uh

1282
00:51:12,240 --> 00:51:14,879
rather a statement i guess is from

1283
00:51:14,000 --> 00:51:17,680
matthew

1284
00:51:14,880 --> 00:51:20,480
he says google generally recommends not

1285
00:51:17,680 --> 00:51:22,078
specifying security providers especially

1286
00:51:20,480 --> 00:51:23,599
given

1287
00:51:22,079 --> 00:51:25,599
the built in bouncy castle

1288
00:51:23,599 --> 00:51:27,920
implementation is old

1289
00:51:25,599 --> 00:51:29,520
indeed it should be noted that play

1290
00:51:27,920 --> 00:51:33,359
services also provide

1291
00:51:29,520 --> 00:51:36,880
updates updated providers to help fix

1292
00:51:33,359 --> 00:51:37,200
some ssl vulnerabilities such patches

1293
00:51:36,880 --> 00:51:39,839
are

1294
00:51:37,200 --> 00:51:40,960
so possible if you hard code the

1295
00:51:39,839 --> 00:51:44,000
provider

1296
00:51:40,960 --> 00:51:47,520
if you want to add something um

1297
00:51:44,000 --> 00:51:50,559
please do that yeah

1298
00:51:47,520 --> 00:51:53,119
so yeah i do agree that

1299
00:51:50,559 --> 00:51:54,720
i mean in the first place uh tinkering

1300
00:51:53,119 --> 00:51:58,000
around with the crypto providers of

1301
00:51:54,720 --> 00:52:00,078
crypto in general can be

1302
00:51:58,000 --> 00:52:01,760
not so advisable and i understand the

1303
00:52:00,079 --> 00:52:02,720
google's point of view that why they

1304
00:52:01,760 --> 00:52:04,640
advise so

1305
00:52:02,720 --> 00:52:06,319
and of course the security patches is a

1306
00:52:04,640 --> 00:52:09,759
problem

1307
00:52:06,319 --> 00:52:10,400
uh but then uh the recommendations that

1308
00:52:09,760 --> 00:52:12,400
we have

1309
00:52:10,400 --> 00:52:13,440
is especially when the threat model

1310
00:52:12,400 --> 00:52:15,119
requires

1311
00:52:13,440 --> 00:52:17,440
you to take care of them so if your

1312
00:52:15,119 --> 00:52:19,599
applications are sensitive enough and

1313
00:52:17,440 --> 00:52:21,280
if you have people who really aware

1314
00:52:19,599 --> 00:52:24,160
about what they are really doing

1315
00:52:21,280 --> 00:52:26,240
especially when tinkering with crypto uh

1316
00:52:24,160 --> 00:52:27,839
then for sure they can do that

1317
00:52:26,240 --> 00:52:29,520
i got them i think you have something to

1318
00:52:27,839 --> 00:52:31,200
add

1319
00:52:29,520 --> 00:52:32,640
some something similar to what i said

1320
00:52:31,200 --> 00:52:35,520
earlier so

1321
00:52:32,640 --> 00:52:36,000
especially if you can really detect that

1322
00:52:35,520 --> 00:52:38,079
you

1323
00:52:36,000 --> 00:52:39,680
are using the real system security

1324
00:52:38,079 --> 00:52:41,599
provider then it is uh

1325
00:52:39,680 --> 00:52:44,799
then it is you are good to actually use

1326
00:52:41,599 --> 00:52:44,800
the system security provider

1327
00:52:45,119 --> 00:52:48,240
okay thank you very much

1328
00:52:48,559 --> 00:52:54,640
okay um well next question from si han

1329
00:52:52,160 --> 00:52:58,000
goy are there plans to incorporate

1330
00:52:54,640 --> 00:53:01,598
virtual container detection into the

1331
00:52:58,000 --> 00:53:02,720
mstg resilience checks i guess this one

1332
00:53:01,599 --> 00:53:05,839
goes to

1333
00:53:02,720 --> 00:53:08,640
to yeah so

1334
00:53:05,839 --> 00:53:10,000
okay yeah that's uh that's of course uh

1335
00:53:08,640 --> 00:53:12,400
firstly thanks for the question so yeah

1336
00:53:10,000 --> 00:53:14,079
of course uh that's in the plan so

1337
00:53:12,400 --> 00:53:15,520
i think me and gotham were really

1338
00:53:14,079 --> 00:53:17,040
discussing that once we are done with

1339
00:53:15,520 --> 00:53:19,680
this presentation we'll

1340
00:53:17,040 --> 00:53:21,680
take up these topics with uh with os

1341
00:53:19,680 --> 00:53:23,759
guys and try to incorporate and

1342
00:53:21,680 --> 00:53:24,799
uh get their feedback how we can make it

1343
00:53:23,760 --> 00:53:27,520
more developer

1344
00:53:24,800 --> 00:53:28,000
friendly and uh yeah get to a broader

1345
00:53:27,520 --> 00:53:29,920
audience

1346
00:53:28,000 --> 00:53:31,200
that these are the issues that can be

1347
00:53:29,920 --> 00:53:33,359
addressed so

1348
00:53:31,200 --> 00:53:36,240
yes to answer the question in short yes

1349
00:53:33,359 --> 00:53:39,680
we have a plan to go for it yes

1350
00:53:36,240 --> 00:53:39,680
okay perfect it sounds great

1351
00:53:39,760 --> 00:53:43,680
so another question from bernhard

1352
00:53:41,680 --> 00:53:46,720
grindling he asks if

1353
00:53:43,680 --> 00:53:48,960
an app uses certificate pinning

1354
00:53:46,720 --> 00:53:50,799
we could circumvent this without

1355
00:53:48,960 --> 00:53:53,119
rebuilding the guest apk

1356
00:53:50,800 --> 00:53:54,480
in this case is this correct this is

1357
00:53:53,119 --> 00:53:56,640
part one of the question

1358
00:53:54,480 --> 00:53:59,280
and part two is additionally we could

1359
00:53:56,640 --> 00:54:01,440
provide our ca certificate

1360
00:53:59,280 --> 00:54:02,319
via the host application environment

1361
00:54:01,440 --> 00:54:05,359
instead of

1362
00:54:02,319 --> 00:54:08,240
writing it to the system is this correct

1363
00:54:05,359 --> 00:54:08,480
so the first one is certificate pinning

1364
00:54:08,240 --> 00:54:10,640
and

1365
00:54:08,480 --> 00:54:11,520
the second one is to provide a ca

1366
00:54:10,640 --> 00:54:14,558
certificate

1367
00:54:11,520 --> 00:54:17,599
to the host application environment

1368
00:54:14,559 --> 00:54:18,000
okay for the certificate printing yes so

1369
00:54:17,599 --> 00:54:20,800
when

1370
00:54:18,000 --> 00:54:22,720
when a guest application has its own

1371
00:54:20,800 --> 00:54:25,680
certificate training so yes

1372
00:54:22,720 --> 00:54:27,279
you can at least mitigate this specific

1373
00:54:25,680 --> 00:54:28,480
attack which we talked about

1374
00:54:27,280 --> 00:54:30,640
especially related to the network

1375
00:54:28,480 --> 00:54:33,359
security configuration uh

1376
00:54:30,640 --> 00:54:35,759
but having said that it is still not a

1377
00:54:33,359 --> 00:54:37,839
foolproof again so you can

1378
00:54:35,760 --> 00:54:40,079
we also talked about frida

1379
00:54:37,839 --> 00:54:42,000
instrumentation and also

1380
00:54:40,079 --> 00:54:43,760
that is also not enough because you can

1381
00:54:42,000 --> 00:54:45,119
actually who can bypass your certificate

1382
00:54:43,760 --> 00:54:48,319
training as well

1383
00:54:45,119 --> 00:54:51,200
so that's one thing the second question

1384
00:54:48,319 --> 00:54:52,240
because yeah the second question it says

1385
00:54:51,200 --> 00:54:55,359
additionally

1386
00:54:52,240 --> 00:54:57,279
we could provide our ca certificate via

1387
00:54:55,359 --> 00:54:59,359
the host application environment

1388
00:54:57,280 --> 00:55:06,559
instead of writing it to the system is

1389
00:54:59,359 --> 00:55:09,279
this correct okay

1390
00:55:06,559 --> 00:55:11,200
uh actually this is uh okay if you are

1391
00:55:09,280 --> 00:55:11,760
if you are a guest application so then

1392
00:55:11,200 --> 00:55:13,839
this is

1393
00:55:11,760 --> 00:55:15,200
completely not uh possible at all

1394
00:55:13,839 --> 00:55:17,279
because the host application is a

1395
00:55:15,200 --> 00:55:19,759
different application by itself

1396
00:55:17,280 --> 00:55:21,440
so if this is something similar to like

1397
00:55:19,760 --> 00:55:22,880
you you are you are inserting

1398
00:55:21,440 --> 00:55:24,880
certificates which

1399
00:55:22,880 --> 00:55:26,480
that specific application is going to

1400
00:55:24,880 --> 00:55:28,480
trust

1401
00:55:26,480 --> 00:55:29,920
okay so it is it is not really putting

1402
00:55:28,480 --> 00:55:32,880
inside the system trust so

1403
00:55:29,920 --> 00:55:33,200
it is something like a trusty store only

1404
00:55:32,880 --> 00:55:36,960
for

1405
00:55:33,200 --> 00:55:40,319
that specific application to believe

1406
00:55:36,960 --> 00:55:43,440
okay that sounds reasonable thank you

1407
00:55:40,319 --> 00:55:49,680
so there is one more question from

1408
00:55:43,440 --> 00:55:51,280
renee please you're using audio i guess

1409
00:55:49,680 --> 00:55:53,440
it's been partially answered already i

1410
00:55:51,280 --> 00:55:56,559
was just interested in

1411
00:55:53,440 --> 00:55:58,960
the use case scenarios that you

1412
00:55:56,559 --> 00:56:00,160
saw those containerization apps to be

1413
00:55:58,960 --> 00:56:02,960
targeted for

1414
00:56:00,160 --> 00:56:03,520
how many of those do you think would

1415
00:56:02,960 --> 00:56:06,799
actually

1416
00:56:03,520 --> 00:56:10,079
be easily replaceable with just

1417
00:56:06,799 --> 00:56:10,799
um standard work profile or do you think

1418
00:56:10,079 --> 00:56:12,960
that

1419
00:56:10,799 --> 00:56:13,839
people use those containerization apps

1420
00:56:12,960 --> 00:56:15,440
instead of

1421
00:56:13,839 --> 00:56:17,279
something like multiple work profiles

1422
00:56:15,440 --> 00:56:18,000
having more than even two instances of

1423
00:56:17,280 --> 00:56:20,559
an app

1424
00:56:18,000 --> 00:56:21,599
is that do you do you see so considering

1425
00:56:20,559 --> 00:56:23,599
that work profile

1426
00:56:21,599 --> 00:56:24,720
is widely available on at least modern

1427
00:56:23,599 --> 00:56:27,359
devices

1428
00:56:24,720 --> 00:56:29,040
and if we could get around could make it

1429
00:56:27,359 --> 00:56:32,319
easier to

1430
00:56:29,040 --> 00:56:32,799
not require a large mdm centrally

1431
00:56:32,319 --> 00:56:35,359
managed

1432
00:56:32,799 --> 00:56:37,440
on do you think that that might be a

1433
00:56:35,359 --> 00:56:37,839
replacement for most of the use cases

1434
00:56:37,440 --> 00:56:39,839
that

1435
00:56:37,839 --> 00:56:40,880
you've seen those containerization apps

1436
00:56:39,839 --> 00:56:44,720
used for or

1437
00:56:40,880 --> 00:56:46,480
is there anything else missing uh yes

1438
00:56:44,720 --> 00:56:48,240
for them

1439
00:56:46,480 --> 00:56:50,319
okay so that's for sure actually we uh

1440
00:56:48,240 --> 00:56:51,118
we also are thinking about on the same

1441
00:56:50,319 --> 00:56:53,440
lines of

1442
00:56:51,119 --> 00:56:54,160
managed profiles uh which is already

1443
00:56:53,440 --> 00:56:57,119
part of

1444
00:56:54,160 --> 00:56:58,000
android devices uh so the one one issue

1445
00:56:57,119 --> 00:56:59,599
which we generally see

1446
00:56:58,000 --> 00:57:01,440
is uh with respect to the managed

1447
00:56:59,599 --> 00:57:03,599
profiles there is an additional uh

1448
00:57:01,440 --> 00:57:05,599
yeah of course there is a device admin

1449
00:57:03,599 --> 00:57:07,599
or an additional set of

1450
00:57:05,599 --> 00:57:08,880
authentication which is required to move

1451
00:57:07,599 --> 00:57:11,680
between two

1452
00:57:08,880 --> 00:57:12,640
two spaces so you but in the case of

1453
00:57:11,680 --> 00:57:14,720
virtual containers

1454
00:57:12,640 --> 00:57:15,839
normally this uh there is no such kind

1455
00:57:14,720 --> 00:57:18,000
of a need

1456
00:57:15,839 --> 00:57:19,200
for additional another device i mean

1457
00:57:18,000 --> 00:57:22,400
kind of an application

1458
00:57:19,200 --> 00:57:23,919
or uh or kind of additional

1459
00:57:22,400 --> 00:57:25,440
authentication which is required when

1460
00:57:23,920 --> 00:57:28,640
you use virtual containers

1461
00:57:25,440 --> 00:57:30,480
so for sure what profile is uh is almost

1462
00:57:28,640 --> 00:57:32,240
on the same lines as

1463
00:57:30,480 --> 00:57:34,640
what this virtual containers are already

1464
00:57:32,240 --> 00:57:38,240
providing and in fact it is more safer

1465
00:57:34,640 --> 00:57:39,839
to actually use work profiles

1466
00:57:38,240 --> 00:57:41,680
because you want to add something yeah i

1467
00:57:39,839 --> 00:57:43,759
think you mostly covered it so

1468
00:57:41,680 --> 00:57:45,359
i just wanted to add that these virtual

1469
00:57:43,760 --> 00:57:47,440
containers just provide

1470
00:57:45,359 --> 00:57:48,880
the ability to use them is so easy you

1471
00:57:47,440 --> 00:57:49,599
just download from play store and you

1472
00:57:48,880 --> 00:57:52,079
use it

1473
00:57:49,599 --> 00:57:53,119
i think that's one reason that users

1474
00:57:52,079 --> 00:57:55,359
prefer

1475
00:57:53,119 --> 00:57:57,280
to use them compared to let's say

1476
00:57:55,359 --> 00:57:58,640
setting up a work profile or

1477
00:57:57,280 --> 00:58:00,640
it could be possible that many

1478
00:57:58,640 --> 00:58:01,839
non-technical users sees it as a hassle

1479
00:58:00,640 --> 00:58:03,920
to to set up and

1480
00:58:01,839 --> 00:58:08,480
do those things so i think it's also

1481
00:58:03,920 --> 00:58:12,079
from the usability point of view as well

1482
00:58:08,480 --> 00:58:15,839
thanks a lot okay thank you

1483
00:58:12,079 --> 00:58:17,599
very much um i guess there are no more

1484
00:58:15,839 --> 00:58:20,880
questions i'd like to conclude

1485
00:58:17,599 --> 00:58:23,920
with a very non-technical question uh

1486
00:58:20,880 --> 00:58:28,400
when do you intend to release the the

1487
00:58:23,920 --> 00:58:30,000
combi library uh it could be as soon as

1488
00:58:28,400 --> 00:58:32,240
tonight so i just need to clean up the

1489
00:58:30,000 --> 00:58:34,720
code and just upload on github so it's

1490
00:58:32,240 --> 00:58:35,439
it's all about the last few things okay

1491
00:58:34,720 --> 00:58:37,919
perfect

1492
00:58:35,440 --> 00:58:39,760
yeah glad to hear that all right thank

1493
00:58:37,920 --> 00:58:40,880
you so much for the questions and thank

1494
00:58:39,760 --> 00:58:43,520
you so much

1495
00:58:40,880 --> 00:58:44,480
thank you all thank you very much okay

1496
00:58:43,520 --> 00:58:46,640
uh

1497
00:58:44,480 --> 00:58:51,839
yes thank you very much for this for

1498
00:58:46,640 --> 00:58:51,839
this great talk

1499
00:58:52,160 --> 00:58:54,240
you

