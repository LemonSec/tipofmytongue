1
00:00:05,920 --> 00:00:08,719
okay

2
00:00:06,560 --> 00:00:09,840
so ladies and gentlemen we've already

3
00:00:08,720 --> 00:00:13,120
come to the

4
00:00:09,840 --> 00:00:14,399
final talk of today um it has the very

5
00:00:13,120 --> 00:00:16,800
promising title

6
00:00:14,400 --> 00:00:18,439
50 ways to leak your data and

7
00:00:16,800 --> 00:00:21,199
exploration of apps

8
00:00:18,439 --> 00:00:21,760
circumvention of the android permission

9
00:00:21,199 --> 00:00:24,880
system

10
00:00:21,760 --> 00:00:27,920
and is held by search eagleman

11
00:00:24,880 --> 00:00:31,198
search is the research director of the

12
00:00:27,920 --> 00:00:33,440
usable security and privacy group at the

13
00:00:31,199 --> 00:00:36,640
international cyber security

14
00:00:33,440 --> 00:00:38,800
institute icsi which is an independent

15
00:00:36,640 --> 00:00:42,000
research institute affiliated with the

16
00:00:38,800 --> 00:00:43,680
university of california berkeley

17
00:00:42,000 --> 00:00:45,920
he also holds an appointment in the

18
00:00:43,680 --> 00:00:49,120
department of electrical engineering

19
00:00:45,920 --> 00:00:50,559
and computer sciences and he is the cto

20
00:00:49,120 --> 00:00:53,199
and co-founder of

21
00:00:50,559 --> 00:00:54,239
of app census a company performing

22
00:00:53,199 --> 00:00:57,360
on-demand

23
00:00:54,239 --> 00:01:00,000
privacy analysis of mobile applications

24
00:00:57,360 --> 00:01:00,960
which they call privacy analysis as a

25
00:01:00,000 --> 00:01:02,719
service

26
00:01:00,960 --> 00:01:04,559
search is going to talk about how

27
00:01:02,719 --> 00:01:06,400
android application circumvents the

28
00:01:04,559 --> 00:01:08,560
system's permission model

29
00:01:06,400 --> 00:01:11,360
in order to gain access to protect its

30
00:01:08,560 --> 00:01:13,680
data without the user's consent

31
00:01:11,360 --> 00:01:14,560
some which is something that shouldn't

32
00:01:13,680 --> 00:01:16,960
happen at all

33
00:01:14,560 --> 00:01:18,159
obviously so welcome search we're

34
00:01:16,960 --> 00:01:22,399
pleased to have you here

35
00:01:18,159 --> 00:01:22,400
and we are ready for your talk

36
00:01:24,400 --> 00:01:27,840
thanks for having me uh let me open this

37
00:01:26,960 --> 00:01:31,119
up to

38
00:01:27,840 --> 00:01:31,119
the screen sharing

39
00:01:38,560 --> 00:01:42,720
okay can everyone see my screen yes we

40
00:01:41,280 --> 00:01:43,759
can see your screen we hear your

41
00:01:42,720 --> 00:01:45,920
everything is fine

42
00:01:43,759 --> 00:01:48,240
great okay so um yeah thanks for the

43
00:01:45,920 --> 00:01:48,560
introduction i'm sarah jegelman and this

44
00:01:48,240 --> 00:01:51,679
is

45
00:01:48,560 --> 00:01:55,360
work uh that my research group has been

46
00:01:51,680 --> 00:01:57,520
uh performing over several years um and

47
00:01:55,360 --> 00:01:58,399
with a bunch of others um at other

48
00:01:57,520 --> 00:02:01,600
institutes

49
00:01:58,399 --> 00:02:03,280
um so we've been looking generally at

50
00:02:01,600 --> 00:02:04,960
the android permission system for a

51
00:02:03,280 --> 00:02:08,080
couple years now

52
00:02:04,960 --> 00:02:09,840
in terms of uh what users

53
00:02:08,080 --> 00:02:11,120
understand about what they're granting

54
00:02:09,840 --> 00:02:13,680
to apps and

55
00:02:11,120 --> 00:02:15,120
basically um looking at from the user

56
00:02:13,680 --> 00:02:15,599
perspective in terms of how can we

57
00:02:15,120 --> 00:02:18,959
design

58
00:02:15,599 --> 00:02:21,839
better controls for end users and so

59
00:02:18,959 --> 00:02:22,319
everyone's probably familiar with you

60
00:02:21,840 --> 00:02:25,360
know the

61
00:02:22,319 --> 00:02:27,359
the existing permissions dialogues um so

62
00:02:25,360 --> 00:02:29,040
you know now there's this you know the

63
00:02:27,360 --> 00:02:32,319
the runtime permissions on both

64
00:02:29,040 --> 00:02:34,000
android and ios originally you know

65
00:02:32,319 --> 00:02:35,599
originally when android first came out

66
00:02:34,000 --> 00:02:36,800
there were a list of permissions you

67
00:02:35,599 --> 00:02:38,399
would get at install time and the

68
00:02:36,800 --> 00:02:39,280
problem with that is that it like lacks

69
00:02:38,400 --> 00:02:40,720
context

70
00:02:39,280 --> 00:02:42,879
you know most people who are using an

71
00:02:40,720 --> 00:02:43,359
app don't really you know have any idea

72
00:02:42,879 --> 00:02:46,079
of

73
00:02:43,360 --> 00:02:46,879
how location data or microphone data or

74
00:02:46,080 --> 00:02:48,879
any of that

75
00:02:46,879 --> 00:02:50,560
might be used but by having the runtime

76
00:02:48,879 --> 00:02:52,879
prompts that you know gives

77
00:02:50,560 --> 00:02:54,239
some additional context such as you know

78
00:02:52,879 --> 00:02:56,239
you were doing something such as

79
00:02:54,239 --> 00:02:58,159
clicking a button to find stuff near you

80
00:02:56,239 --> 00:02:59,040
and therefore the app asks for the gps

81
00:02:58,159 --> 00:03:00,799
location

82
00:02:59,040 --> 00:03:02,480
so in that situation there's the you

83
00:03:00,800 --> 00:03:03,840
know contextual information that makes

84
00:03:02,480 --> 00:03:06,000
the permission requests a little bit

85
00:03:03,840 --> 00:03:07,599
easier to understand

86
00:03:06,000 --> 00:03:09,360
especially if you're trying to determine

87
00:03:07,599 --> 00:03:12,879
whether or not the data

88
00:03:09,360 --> 00:03:13,760
access is appropriate so you know this

89
00:03:12,879 --> 00:03:15,920
is now pretty

90
00:03:13,760 --> 00:03:18,239
you know widespread it allows users to

91
00:03:15,920 --> 00:03:20,640
allow or deny access um

92
00:03:18,239 --> 00:03:22,400
and you know it supports uh this notion

93
00:03:20,640 --> 00:03:24,159
of notice and choice which is sort of

94
00:03:22,400 --> 00:03:26,720
the governed privacy regime in most

95
00:03:24,159 --> 00:03:28,399
countries where users are presented with

96
00:03:26,720 --> 00:03:29,760
you know disclosures and then can make

97
00:03:28,400 --> 00:03:31,519
an informed decision

98
00:03:29,760 --> 00:03:34,079
so the question that we were looking at

99
00:03:31,519 --> 00:03:36,480
is does this actually work in practice

100
00:03:34,080 --> 00:03:37,519
so you know from the the several years

101
00:03:36,480 --> 00:03:40,720
of research

102
00:03:37,519 --> 00:03:42,480
looking at android security generally

103
00:03:40,720 --> 00:03:44,560
my group and then another group doing

104
00:03:42,480 --> 00:03:46,238
research at ixi

105
00:03:44,560 --> 00:03:48,159
have been looking at instrumenting you

106
00:03:46,239 --> 00:03:50,720
know various parts of the os as well as

107
00:03:48,159 --> 00:03:52,798
creating uh tools to help us look at

108
00:03:50,720 --> 00:03:54,879
traffic to try and figure out what apps

109
00:03:52,799 --> 00:03:56,959
are actually doing with data

110
00:03:54,879 --> 00:03:59,280
so you know my group um for several

111
00:03:56,959 --> 00:04:01,040
years has maintained a fork of android

112
00:03:59,280 --> 00:04:02,239
where we have instrumentation so that we

113
00:04:01,040 --> 00:04:04,640
can monitor

114
00:04:02,239 --> 00:04:06,159
um every time an app tries to access

115
00:04:04,640 --> 00:04:08,399
data that's protected by

116
00:04:06,159 --> 00:04:10,879
the you know the permission system such

117
00:04:08,400 --> 00:04:12,879
as you know accessing the location data

118
00:04:10,879 --> 00:04:13,518
or the call logs any of that stuff so

119
00:04:12,879 --> 00:04:14,879
there are

120
00:04:13,519 --> 00:04:17,840
you know several places throughout the

121
00:04:14,879 --> 00:04:19,759
os where you know when data is accessed

122
00:04:17,839 --> 00:04:20,719
through the android api that triggers a

123
00:04:19,759 --> 00:04:22,400
permission check

124
00:04:20,720 --> 00:04:23,919
and then the os checks to see whether

125
00:04:22,400 --> 00:04:24,960
the app you know has been granted that

126
00:04:23,919 --> 00:04:26,639
permission

127
00:04:24,960 --> 00:04:29,440
um before deciding whether or not to

128
00:04:26,639 --> 00:04:31,280
share the data through the api

129
00:04:29,440 --> 00:04:32,960
you know and so that's you know our goal

130
00:04:31,280 --> 00:04:34,080
is to monitor when those apis are

131
00:04:32,960 --> 00:04:35,520
actually called

132
00:04:34,080 --> 00:04:37,520
um in parallel there's this other

133
00:04:35,520 --> 00:04:39,359
project going on at xe called lumen

134
00:04:37,520 --> 00:04:41,680
which is a user space traffic monitor

135
00:04:39,360 --> 00:04:44,800
that does you know tls interception

136
00:04:41,680 --> 00:04:46,720
via the vpn interface and so

137
00:04:44,800 --> 00:04:48,400
by combining these two tools our

138
00:04:46,720 --> 00:04:51,040
instrumented build of android

139
00:04:48,400 --> 00:04:52,799
and a network monitor that allows us to

140
00:04:51,040 --> 00:04:54,800
do deep packet inspection

141
00:04:52,800 --> 00:04:56,320
we can start looking at you know what

142
00:04:54,800 --> 00:04:58,000
data goes to which parties

143
00:04:56,320 --> 00:04:59,919
um answer specific questions about

144
00:04:58,000 --> 00:05:01,919
specific data types such as you know

145
00:04:59,919 --> 00:05:03,758
which parties you know share location

146
00:05:01,919 --> 00:05:05,039
data what types of persistent

147
00:05:03,759 --> 00:05:06,800
identifiers are collected

148
00:05:05,039 --> 00:05:08,080
are they shared across apps stuff like

149
00:05:06,800 --> 00:05:10,479
that and so

150
00:05:08,080 --> 00:05:11,840
in using these tools we basically had to

151
00:05:10,479 --> 00:05:14,240
build a workflow

152
00:05:11,840 --> 00:05:16,080
um to you know build data sets and so

153
00:05:14,240 --> 00:05:17,680
the first step obviously is downloading

154
00:05:16,080 --> 00:05:19,280
lots of android apps

155
00:05:17,680 --> 00:05:21,360
we have a you know a scraper that we've

156
00:05:19,280 --> 00:05:24,479
been using from the play store

157
00:05:21,360 --> 00:05:27,199
as well as various other sources of

158
00:05:24,479 --> 00:05:29,039
android ap apks um you know obviously

159
00:05:27,199 --> 00:05:31,840
step two is then running those apps

160
00:05:29,039 --> 00:05:32,479
um to see what data they access using

161
00:05:31,840 --> 00:05:34,479
the system

162
00:05:32,479 --> 00:05:35,680
instrumentation and then where it goes

163
00:05:34,479 --> 00:05:37,919
using the you know

164
00:05:35,680 --> 00:05:39,360
the network instrumentation um and then

165
00:05:37,919 --> 00:05:40,880
we can see you know exactly what

166
00:05:39,360 --> 00:05:42,080
personal data was accessed and where it

167
00:05:40,880 --> 00:05:44,240
was sent

168
00:05:42,080 --> 00:05:46,000
and so the first problem obviously is

169
00:05:44,240 --> 00:05:49,120
you know the apps need to actually be

170
00:05:46,000 --> 00:05:50,880
run um so that we can see what code gets

171
00:05:49,120 --> 00:05:53,680
executed and what that code actually

172
00:05:50,880 --> 00:05:55,039
does um generally this is thought of as

173
00:05:53,680 --> 00:05:57,039
a you know human task

174
00:05:55,039 --> 00:05:59,360
and so to start out we you know hired a

175
00:05:57,039 --> 00:06:02,719
couple students to play a bunch of games

176
00:05:59,360 --> 00:06:04,160
um so that we can examine uh basically

177
00:06:02,720 --> 00:06:07,199
just the code coverage

178
00:06:04,160 --> 00:06:08,880
for you know normal use of apps um you

179
00:06:07,199 --> 00:06:10,720
know people playing what sort of code

180
00:06:08,880 --> 00:06:11,360
coverage can we get and then we compared

181
00:06:10,720 --> 00:06:14,000
that with

182
00:06:11,360 --> 00:06:15,520
the exerciser monkey so the exerciser

183
00:06:14,000 --> 00:06:18,560
monkey is a tool that

184
00:06:15,520 --> 00:06:20,560
basically it's for fuzzing the uis

185
00:06:18,560 --> 00:06:22,880
of android apps it generates random

186
00:06:20,560 --> 00:06:24,560
clicks swipes and so forth

187
00:06:22,880 --> 00:06:25,919
um and so we compared that with the

188
00:06:24,560 --> 00:06:26,240
undergrads and we actually found that

189
00:06:25,919 --> 00:06:28,639
the

190
00:06:26,240 --> 00:06:30,000
exerciser monkey got equivalent code

191
00:06:28,639 --> 00:06:32,479
coverage for about 60

192
00:06:30,000 --> 00:06:34,560
of the apps that we tested and so that

193
00:06:32,479 --> 00:06:35,440
led to us building what is essentially a

194
00:06:34,560 --> 00:06:38,479
click farm

195
00:06:35,440 --> 00:06:38,719
um we now have about 50 60 devices that

196
00:06:38,479 --> 00:06:41,359
are

197
00:06:38,720 --> 00:06:42,400
running apps um and this is all part of

198
00:06:41,360 --> 00:06:45,600
a whole pipeline

199
00:06:42,400 --> 00:06:47,120
so we have you know at the heart is the

200
00:06:45,600 --> 00:06:49,120
the test bed which is basically just

201
00:06:47,120 --> 00:06:51,280
phones running our custom

202
00:06:49,120 --> 00:06:52,560
you know build of android with all the

203
00:06:51,280 --> 00:06:54,479
instrumentation

204
00:06:52,560 --> 00:06:56,240
um we feed it apps from an app

205
00:06:54,479 --> 00:06:58,318
repository that we're maintaining

206
00:06:56,240 --> 00:07:00,479
and then we feed that you know both

207
00:06:58,319 --> 00:07:01,919
simulated user actions and real user

208
00:07:00,479 --> 00:07:02,560
actions which i'm going to get to in a

209
00:07:01,919 --> 00:07:04,318
little bit

210
00:07:02,560 --> 00:07:06,240
that goes into it results database which

211
00:07:04,319 --> 00:07:08,080
basically shows what data was accessed

212
00:07:06,240 --> 00:07:10,479
by apps and you know what host names

213
00:07:08,080 --> 00:07:12,080
received it and then we you know post

214
00:07:10,479 --> 00:07:14,560
that online we have a website

215
00:07:12,080 --> 00:07:15,520
um where you can search for apps and

216
00:07:14,560 --> 00:07:17,520
we've been

217
00:07:15,520 --> 00:07:19,120
working the past year building an api

218
00:07:17,520 --> 00:07:20,919
for all of this

219
00:07:19,120 --> 00:07:23,520
so you know you can go to

220
00:07:20,919 --> 00:07:26,080
search.census.io this is our the

221
00:07:23,520 --> 00:07:27,840
basically our collection of free apps

222
00:07:26,080 --> 00:07:29,919
that we've been monitoring

223
00:07:27,840 --> 00:07:30,960
um it shows you know what various apps

224
00:07:29,919 --> 00:07:32,799
do this

225
00:07:30,960 --> 00:07:34,960
site is actually in a state of flux

226
00:07:32,800 --> 00:07:35,360
because we've been uh working the past

227
00:07:34,960 --> 00:07:37,758
year

228
00:07:35,360 --> 00:07:38,720
on the back end so we now have a set of

229
00:07:37,759 --> 00:07:41,599
tools where

230
00:07:38,720 --> 00:07:43,280
instead of the monkey we now have a

231
00:07:41,599 --> 00:07:44,000
remote desktop feature where we can

232
00:07:43,280 --> 00:07:46,400
actually just play

233
00:07:44,000 --> 00:07:49,440
apps um within the browser and so that's

234
00:07:46,400 --> 00:07:52,479
what we've been doing for the startup

235
00:07:49,440 --> 00:07:54,319
we have you know testers in one place

236
00:07:52,479 --> 00:07:56,159
who just use the browser to play apps

237
00:07:54,319 --> 00:07:58,479
and the phones can be located anywhere

238
00:07:56,160 --> 00:08:00,960
in the world

239
00:07:58,479 --> 00:08:02,400
and so you know just give an example of

240
00:08:00,960 --> 00:08:04,318
you know what we see internally we have

241
00:08:02,400 --> 00:08:07,840
maps of data flows

242
00:08:04,319 --> 00:08:10,240
and we flag various things such as um

243
00:08:07,840 --> 00:08:12,080
you know abuse of the permission system

244
00:08:10,240 --> 00:08:14,240
or exfiltration of certain other types

245
00:08:12,080 --> 00:08:15,758
of data that are prohibited by policies

246
00:08:14,240 --> 00:08:17,599
and so forth

247
00:08:15,759 --> 00:08:19,039
and so right now you know this is all

248
00:08:17,599 --> 00:08:20,878
what we see internally and it's you know

249
00:08:19,039 --> 00:08:22,080
we're dog fooding it but eventually this

250
00:08:20,879 --> 00:08:23,280
you know this part is going to be open

251
00:08:22,080 --> 00:08:25,359
to the public

252
00:08:23,280 --> 00:08:26,318
so what have we been using this for so

253
00:08:25,360 --> 00:08:28,080
one of the things is

254
00:08:26,319 --> 00:08:31,599
uncovering deceptive practices and

255
00:08:28,080 --> 00:08:32,799
that's a large part of this talk

256
00:08:31,599 --> 00:08:35,279
but there are a few other things which

257
00:08:32,799 --> 00:08:37,039
i'll get to a little later so

258
00:08:35,279 --> 00:08:38,399
you know when we talk about security

259
00:08:37,039 --> 00:08:40,479
often you know we have security

260
00:08:38,399 --> 00:08:42,080
mechanisms that we put up and obviously

261
00:08:40,479 --> 00:08:43,120
those security mechanisms are only

262
00:08:42,080 --> 00:08:45,760
effective

263
00:08:43,120 --> 00:08:46,160
um insofar as users can't get around

264
00:08:45,760 --> 00:08:48,240
them

265
00:08:46,160 --> 00:08:50,640
and you know we see this both you know

266
00:08:48,240 --> 00:08:52,640
online in terms of computer security

267
00:08:50,640 --> 00:08:54,640
um but also in the physical world too

268
00:08:52,640 --> 00:08:55,760
right when security barriers are put up

269
00:08:54,640 --> 00:08:56,720
if there's an easy way around the

270
00:08:55,760 --> 00:09:00,080
security barrier

271
00:08:56,720 --> 00:09:01,600
people will do so so specifically we

272
00:09:00,080 --> 00:09:04,800
want to look at side channels

273
00:09:01,600 --> 00:09:05,519
so you know a side channel is you know

274
00:09:04,800 --> 00:09:08,640
where you have

275
00:09:05,519 --> 00:09:10,000
say an app that tries to access

276
00:09:08,640 --> 00:09:12,319
data that might be protected by a

277
00:09:10,000 --> 00:09:15,519
security mechanism such as

278
00:09:12,320 --> 00:09:15,920
the android permission system the issue

279
00:09:15,519 --> 00:09:18,240
is

280
00:09:15,920 --> 00:09:19,680
if there's a way around that security

281
00:09:18,240 --> 00:09:21,360
mechanism such as

282
00:09:19,680 --> 00:09:22,800
getting access to the same data that's

283
00:09:21,360 --> 00:09:24,959
stored in a different place that's not

284
00:09:22,800 --> 00:09:27,120
protected by the permission system

285
00:09:24,959 --> 00:09:28,479
that's known as a side channel covert

286
00:09:27,120 --> 00:09:30,160
channel is a similar thing where you

287
00:09:28,480 --> 00:09:33,040
have an access control mechanism

288
00:09:30,160 --> 00:09:34,640
and you have you know one app that has

289
00:09:33,040 --> 00:09:35,439
permission to access the protected

290
00:09:34,640 --> 00:09:36,959
resource

291
00:09:35,440 --> 00:09:39,200
and then you have another app that

292
00:09:36,959 --> 00:09:40,880
doesn't um well if the app that doesn't

293
00:09:39,200 --> 00:09:42,399
have access is able to communicate with

294
00:09:40,880 --> 00:09:43,920
an app that does have access

295
00:09:42,399 --> 00:09:47,600
then you know that's another way of

296
00:09:43,920 --> 00:09:50,160
evading um the security mechanism

297
00:09:47,600 --> 00:09:52,160
so using our instrumentation uh we

298
00:09:50,160 --> 00:09:53,839
started searching for evidence of side

299
00:09:52,160 --> 00:09:56,000
and convert channels um

300
00:09:53,839 --> 00:09:57,120
that were occurring um and then the goal

301
00:09:56,000 --> 00:09:58,880
was to figure out you know what those

302
00:09:57,120 --> 00:09:59,839
channels are and how they're being used

303
00:09:58,880 --> 00:10:02,399
exactly

304
00:09:59,839 --> 00:10:03,519
and so to give given i guess more

305
00:10:02,399 --> 00:10:04,880
detailed overview of how the

306
00:10:03,519 --> 00:10:07,440
instrumentation works

307
00:10:04,880 --> 00:10:08,480
we have this app corpus we can then you

308
00:10:07,440 --> 00:10:10,079
know uh

309
00:10:08,480 --> 00:10:12,160
feed the apps through the static

310
00:10:10,079 --> 00:10:14,399
analysis you know parts

311
00:10:12,160 --> 00:10:15,680
um to look at what data apps have

312
00:10:14,399 --> 00:10:17,279
permission to access

313
00:10:15,680 --> 00:10:18,880
um so what you know what permissions are

314
00:10:17,279 --> 00:10:21,439
listed in the

315
00:10:18,880 --> 00:10:23,680
manifest file um but then we can also

316
00:10:21,440 --> 00:10:25,600
add in the dynamic analysis to look at

317
00:10:23,680 --> 00:10:27,599
what apps you know what what what data

318
00:10:25,600 --> 00:10:28,480
those apps are actually accessing in

319
00:10:27,600 --> 00:10:30,399
practice

320
00:10:28,480 --> 00:10:32,959
with the instrumentation code as well as

321
00:10:30,399 --> 00:10:35,839
then where they actually send it

322
00:10:32,959 --> 00:10:37,279
so we can then compare these two sets so

323
00:10:35,839 --> 00:10:39,920
for instance we can see

324
00:10:37,279 --> 00:10:41,839
you know which apps um are allowed to

325
00:10:39,920 --> 00:10:43,920
you know access a certain type of data

326
00:10:41,839 --> 00:10:46,240
and then which apps are sending that out

327
00:10:43,920 --> 00:10:48,560
and if we you know subtract those

328
00:10:46,240 --> 00:10:51,200
to look at what apps are sending data

329
00:10:48,560 --> 00:10:53,199
out but didn't have access to it

330
00:10:51,200 --> 00:10:55,120
then we consider those apps that cheat

331
00:10:53,200 --> 00:10:55,680
and so these are all operations that we

332
00:10:55,120 --> 00:10:59,519
can do

333
00:10:55,680 --> 00:11:01,199
automatically using our test pad

334
00:10:59,519 --> 00:11:03,200
what happens then though is when we see

335
00:11:01,200 --> 00:11:04,880
apps that cheat now it becomes a matter

336
00:11:03,200 --> 00:11:06,399
of reverse engineering to figuring out

337
00:11:04,880 --> 00:11:06,959
you have to figure out how they're doing

338
00:11:06,399 --> 00:11:10,079
it

339
00:11:06,959 --> 00:11:10,800
um and this is largely a manual task and

340
00:11:10,079 --> 00:11:12,560
so let's look

341
00:11:10,800 --> 00:11:14,800
take a look at how this works so we have

342
00:11:12,560 --> 00:11:16,800
two sets here so we have the apps that

343
00:11:14,800 --> 00:11:18,319
don't have the location permission and

344
00:11:16,800 --> 00:11:20,240
then we have apps that are transmitting

345
00:11:18,320 --> 00:11:20,959
location data so these are you know

346
00:11:20,240 --> 00:11:23,839
pretty easy

347
00:11:20,959 --> 00:11:24,319
queries for us to to do on our database

348
00:11:23,839 --> 00:11:26,000
and

349
00:11:24,320 --> 00:11:28,000
you know we did this about a year ago

350
00:11:26,000 --> 00:11:29,519
and found there were 1300 apps

351
00:11:28,000 --> 00:11:32,000
that were transmitting location data

352
00:11:29,519 --> 00:11:35,120
without the location permission

353
00:11:32,000 --> 00:11:36,640
and so you know that obviously you know

354
00:11:35,120 --> 00:11:38,160
the intersection of these two sets

355
00:11:36,640 --> 00:11:39,199
should be null these should not be

356
00:11:38,160 --> 00:11:40,959
overlapping

357
00:11:39,200 --> 00:11:42,640
but in fact they are and that suggests

358
00:11:40,959 --> 00:11:45,279
the presence of either side channels or

359
00:11:42,640 --> 00:11:48,160
covert channels

360
00:11:45,279 --> 00:11:49,360
and so once we you know uncover the

361
00:11:48,160 --> 00:11:50,719
existence of one

362
00:11:49,360 --> 00:11:52,160
through the reverse engineering we can

363
00:11:50,720 --> 00:11:53,360
then do that we can then generate a

364
00:11:52,160 --> 00:11:56,480
fingerprint

365
00:11:53,360 --> 00:11:58,639
for that particular chunk of code that

366
00:11:56,480 --> 00:12:01,120
was violating the permission system

367
00:11:58,639 --> 00:12:02,399
um and then once we have a fingerprint

368
00:12:01,120 --> 00:12:04,560
for the code that

369
00:12:02,399 --> 00:12:06,000
you know that that's the exploit um it's

370
00:12:04,560 --> 00:12:07,920
just a matter then of searching our

371
00:12:06,000 --> 00:12:08,880
entire database again for existence of

372
00:12:07,920 --> 00:12:11,120
that and we might

373
00:12:08,880 --> 00:12:13,839
you know uncover situations where there

374
00:12:11,120 --> 00:12:17,040
was an app that was granted permission

375
00:12:13,839 --> 00:12:18,880
to access certain data um you know it

376
00:12:17,040 --> 00:12:20,560
transmitted it you transmitted that data

377
00:12:18,880 --> 00:12:22,000
and so we didn't flag it as a potential

378
00:12:20,560 --> 00:12:25,279
side channel but the code

379
00:12:22,000 --> 00:12:26,880
existed and that's because you know

380
00:12:25,279 --> 00:12:28,480
during testing the permission was

381
00:12:26,880 --> 00:12:29,839
granted and what that means is during

382
00:12:28,480 --> 00:12:30,720
testing if the permission was not

383
00:12:29,839 --> 00:12:32,160
granted or

384
00:12:30,720 --> 00:12:33,760
you know if a user would use the app

385
00:12:32,160 --> 00:12:35,439
under different circumstances and not

386
00:12:33,760 --> 00:12:35,839
grant the permission then that suggests

387
00:12:35,440 --> 00:12:38,000
that

388
00:12:35,839 --> 00:12:39,279
the app has the the potential to exit

389
00:12:38,000 --> 00:12:40,800
you know to exploit the side channel

390
00:12:39,279 --> 00:12:42,880
instead

391
00:12:40,800 --> 00:12:44,079
so looking at a few of these um a lot of

392
00:12:42,880 --> 00:12:45,680
them came down to

393
00:12:44,079 --> 00:12:48,319
sensitive data that's protected by the

394
00:12:45,680 --> 00:12:49,599
android apis you know and the permission

395
00:12:48,320 --> 00:12:52,079
system

396
00:12:49,600 --> 00:12:53,760
that's available elsewhere outside of

397
00:12:52,079 --> 00:12:55,599
the android apis and therefore not

398
00:12:53,760 --> 00:12:57,040
protected by the permission system

399
00:12:55,600 --> 00:12:59,200
um one source for a lot of this

400
00:12:57,040 --> 00:13:02,160
information is the proc file system

401
00:12:59,200 --> 00:13:03,600
uh so you know proc uh is a virtual file

402
00:13:02,160 --> 00:13:04,959
system it stores lots of information

403
00:13:03,600 --> 00:13:06,959
about the hardware of the device the

404
00:13:04,959 --> 00:13:08,880
running processes and so forth

405
00:13:06,959 --> 00:13:11,040
including you know sometimes contents of

406
00:13:08,880 --> 00:13:12,560
memory um it also includes networking

407
00:13:11,040 --> 00:13:15,920
information such as the arc

408
00:13:12,560 --> 00:13:18,239
table so if you open up proc net arp

409
00:13:15,920 --> 00:13:20,399
that you know up until uh the most

410
00:13:18,240 --> 00:13:21,519
recent version i could believe in 10

411
00:13:20,399 --> 00:13:23,760
this was fixed

412
00:13:21,519 --> 00:13:24,639
uh proc net arp was readable is word

413
00:13:23,760 --> 00:13:27,200
world readable

414
00:13:24,639 --> 00:13:29,360
um so any app can open that and that has

415
00:13:27,200 --> 00:13:32,639
the mac address of the upstream

416
00:13:29,360 --> 00:13:35,360
wi-fi router now you know the the bssid

417
00:13:32,639 --> 00:13:36,000
or the the mac address of the upstream

418
00:13:35,360 --> 00:13:39,600
router

419
00:13:36,000 --> 00:13:41,360
that can potentially leak location data

420
00:13:39,600 --> 00:13:42,399
because those tend to be in fixed places

421
00:13:41,360 --> 00:13:45,040
there are many

422
00:13:42,399 --> 00:13:45,680
public databases that map router map you

423
00:13:45,040 --> 00:13:49,040
know the

424
00:13:45,680 --> 00:13:50,880
mac addresses to gps coordinates

425
00:13:49,040 --> 00:13:52,319
um and so that's why you know for

426
00:13:50,880 --> 00:13:55,760
several versions now

427
00:13:52,320 --> 00:13:57,360
accessing the bssid was governed by the

428
00:13:55,760 --> 00:13:58,959
location permission but obviously that's

429
00:13:57,360 --> 00:14:00,560
all out the window if it's still if it's

430
00:13:58,959 --> 00:14:03,599
worlds readable on the

431
00:14:00,560 --> 00:14:04,239
uh the file system so you know one of

432
00:14:03,600 --> 00:14:07,279
the

433
00:14:04,240 --> 00:14:10,399
the sdks that we found doing this um

434
00:14:07,279 --> 00:14:10,880
looked pretty blatant so um here what's

435
00:14:10,399 --> 00:14:14,000
happening

436
00:14:10,880 --> 00:14:17,199
is this is a decompiled

437
00:14:14,000 --> 00:14:18,079
sdk it calls this function is permission

438
00:14:17,199 --> 00:14:21,680
granted which

439
00:14:18,079 --> 00:14:23,599
you know as as the name uh indicates

440
00:14:21,680 --> 00:14:25,680
checks to see whether the the permission

441
00:14:23,600 --> 00:14:27,680
was granted to the app in this case it's

442
00:14:25,680 --> 00:14:31,120
the access wi-fi state permission

443
00:14:27,680 --> 00:14:33,680
which also governs the bss id and so if

444
00:14:31,120 --> 00:14:35,360
if the permission was not granted it

445
00:14:33,680 --> 00:14:37,199
then calls this you know jumps

446
00:14:35,360 --> 00:14:39,680
uh to this line and calls this function

447
00:14:37,199 --> 00:14:42,079
called get device mac address from arp

448
00:14:39,680 --> 00:14:43,040
um and you know here you see it opening

449
00:14:42,079 --> 00:14:45,279
procnet arp

450
00:14:43,040 --> 00:14:46,719
reading the value from there and you

451
00:14:45,279 --> 00:14:48,720
know what's happening here is this is

452
00:14:46,720 --> 00:14:50,160
pretty explicit right it first checks to

453
00:14:48,720 --> 00:14:51,279
see whether it's you know it's able to

454
00:14:50,160 --> 00:14:52,959
get the data

455
00:14:51,279 --> 00:14:54,560
through the allowed way through the

456
00:14:52,959 --> 00:14:56,880
android api and then

457
00:14:54,560 --> 00:14:59,040
only failing that does it then exploit

458
00:14:56,880 --> 00:15:00,880
this side channel to get the data anyway

459
00:14:59,040 --> 00:15:03,599
and this is actually pretty pervasive so

460
00:15:00,880 --> 00:15:06,399
we found lots of apps that had the code

461
00:15:03,600 --> 00:15:07,199
to do this and many of these apps

462
00:15:06,399 --> 00:15:10,399
correspond

463
00:15:07,199 --> 00:15:12,560
to billions of installs so these are

464
00:15:10,399 --> 00:15:14,399
sorry these are sdks but it shows the

465
00:15:12,560 --> 00:15:16,399
number of apps that they're in

466
00:15:14,399 --> 00:15:19,120
and then the total number of installs

467
00:15:16,399 --> 00:15:19,120
for those apps

468
00:15:20,160 --> 00:15:23,600
another um vulnerability that we looked

469
00:15:23,199 --> 00:15:26,240
at

470
00:15:23,600 --> 00:15:27,120
that was actually being exploited is uh

471
00:15:26,240 --> 00:15:29,519
using the

472
00:15:27,120 --> 00:15:30,880
universal plug-and-play protocol so this

473
00:15:29,519 --> 00:15:34,000
is you know designed

474
00:15:30,880 --> 00:15:36,320
to help with configuring new wi-fi

475
00:15:34,000 --> 00:15:38,480
routers that are added to a home network

476
00:15:36,320 --> 00:15:39,680
but um it also leaks information about

477
00:15:38,480 --> 00:15:43,440
devices so

478
00:15:39,680 --> 00:15:46,399
we found at least one app that was

479
00:15:43,440 --> 00:15:48,000
just directly opening up a socket to the

480
00:15:46,399 --> 00:15:49,839
you know the upstream router

481
00:15:48,000 --> 00:15:51,600
so this you know just getting the

482
00:15:49,839 --> 00:15:53,040
information about the device's ip

483
00:15:51,600 --> 00:15:53,759
address is not something that was

484
00:15:53,040 --> 00:15:57,680
considered

485
00:15:53,759 --> 00:16:00,000
sensitive but knowing the ip address um

486
00:15:57,680 --> 00:16:01,839
you can you know you can attempt you

487
00:16:00,000 --> 00:16:03,040
know dot want you know try dot one on

488
00:16:01,839 --> 00:16:06,320
the network or even

489
00:16:03,040 --> 00:16:08,079
you know if you get the router um

490
00:16:06,320 --> 00:16:10,959
you know the routing table directly and

491
00:16:08,079 --> 00:16:13,519
then it opens up a socket to that router

492
00:16:10,959 --> 00:16:15,199
um and then using the upnp protocol it

493
00:16:13,519 --> 00:16:18,240
queries the the bss id

494
00:16:15,199 --> 00:16:20,639
and then shares it with um lots of other

495
00:16:18,240 --> 00:16:20,639
servers

496
00:16:21,199 --> 00:16:24,479
uh another one that we found was you

497
00:16:22,880 --> 00:16:26,000
know also using the shared file system

498
00:16:24,480 --> 00:16:28,880
so here's baidu

499
00:16:26,000 --> 00:16:29,839
um which is in a ton of apps so baidu

500
00:16:28,880 --> 00:16:32,880
checks to see

501
00:16:29,839 --> 00:16:35,440
whether the app that it's in uh has been

502
00:16:32,880 --> 00:16:36,160
granted permission to access the imei

503
00:16:35,440 --> 00:16:38,079
which is

504
00:16:36,160 --> 00:16:39,279
you know a hardware-based persistent

505
00:16:38,079 --> 00:16:42,638
identifier that's not

506
00:16:39,279 --> 00:16:45,759
easily reset um so

507
00:16:42,639 --> 00:16:48,320
what happens is if an app has baidu

508
00:16:45,759 --> 00:16:49,759
and has been granted access to the phone

509
00:16:48,320 --> 00:16:51,199
state and identity permission which

510
00:16:49,759 --> 00:16:53,040
governs the imei

511
00:16:51,199 --> 00:16:54,639
it then saves that data to the file

512
00:16:53,040 --> 00:16:56,880
system

513
00:16:54,639 --> 00:16:58,480
um and we found that you know if i do

514
00:16:56,880 --> 00:16:59,600
apps with this permission we're writing

515
00:16:58,480 --> 00:17:02,480
this file

516
00:16:59,600 --> 00:17:05,520
and it looks like you know base64 uh

517
00:17:02,480 --> 00:17:07,919
unencoding it we get binary data and so

518
00:17:05,520 --> 00:17:09,599
at that point we started tracing through

519
00:17:07,919 --> 00:17:11,280
you know the the program to figure out

520
00:17:09,599 --> 00:17:14,000
what's actually writing this

521
00:17:11,280 --> 00:17:15,520
and you know here what we found was uh

522
00:17:14,000 --> 00:17:17,599
keys in code

523
00:17:15,520 --> 00:17:18,559
um you know bad practice but not

524
00:17:17,599 --> 00:17:20,399
surprising

525
00:17:18,559 --> 00:17:22,799
and you know using this key we're able

526
00:17:20,400 --> 00:17:24,400
to easily decrypt what was being stored

527
00:17:22,799 --> 00:17:25,760
and in fact what was being stored was

528
00:17:24,400 --> 00:17:28,640
the imei

529
00:17:25,760 --> 00:17:31,120
and the device id which i um which i

530
00:17:28,640 --> 00:17:33,200
think was the hardware serial number

531
00:17:31,120 --> 00:17:34,399
uh and so it stores this to the file

532
00:17:33,200 --> 00:17:37,840
system so that when an

533
00:17:34,400 --> 00:17:41,280
app that has baidu in it runs

534
00:17:37,840 --> 00:17:43,280
and doesn't have access to the imei

535
00:17:41,280 --> 00:17:45,440
that app will then just check this known

536
00:17:43,280 --> 00:17:46,960
location on the file system to see if

537
00:17:45,440 --> 00:17:48,559
an existing app on the device has

538
00:17:46,960 --> 00:17:51,679
already written this file

539
00:17:48,559 --> 00:17:53,200
containing the imei and so we found 153

540
00:17:51,679 --> 00:17:54,720
apps that had this encryption key

541
00:17:53,200 --> 00:17:56,640
embedded in them um

542
00:17:54,720 --> 00:17:57,840
of those half cent you know almost half

543
00:17:56,640 --> 00:17:59,520
sent the imei

544
00:17:57,840 --> 00:18:02,080
now you know what this means is you know

545
00:17:59,520 --> 00:18:04,240
during dynamic testing especially

546
00:18:02,080 --> 00:18:06,320
when we're using the monkey this is

547
00:18:04,240 --> 00:18:07,679
largely a stochastic process of what

548
00:18:06,320 --> 00:18:09,520
code gets triggered

549
00:18:07,679 --> 00:18:11,200
um and so it's possible that you know if

550
00:18:09,520 --> 00:18:14,080
we if the monkey played with the apps

551
00:18:11,200 --> 00:18:17,919
for a longer period of time or if

552
00:18:14,080 --> 00:18:20,320
um you know if real users use this

553
00:18:17,919 --> 00:18:23,200
um there would be more occurrences of

554
00:18:20,320 --> 00:18:24,799
apps sent to the imei

555
00:18:23,200 --> 00:18:26,320
uh and of the ones that we did observe

556
00:18:24,799 --> 00:18:28,000
actually sending it

557
00:18:26,320 --> 00:18:30,320
20 of those didn't have the imei

558
00:18:28,000 --> 00:18:31,919
permission

559
00:18:30,320 --> 00:18:34,399
um but you know it's not limited to

560
00:18:31,919 --> 00:18:35,360
baidu so we found derivatives of this

561
00:18:34,400 --> 00:18:37,760
vulnerability

562
00:18:35,360 --> 00:18:38,639
or of this you know exploit in salomon

563
00:18:37,760 --> 00:18:42,400
ads which is

564
00:18:38,640 --> 00:18:43,200
another um you know advertiser and

565
00:18:42,400 --> 00:18:45,280
tracker

566
00:18:43,200 --> 00:18:48,000
um by do i mentioned which is in a bunch

567
00:18:45,280 --> 00:18:49,760
of popular apps

568
00:18:48,000 --> 00:18:51,039
uh another one that we found is uh

569
00:18:49,760 --> 00:18:54,320
looking at native code

570
00:18:51,039 --> 00:18:57,679
so unity is in a ton of apps um

571
00:18:54,320 --> 00:18:59,678
we actually found uh over 12 000 apps

572
00:18:57,679 --> 00:19:01,360
that had code to transmit the mac

573
00:18:59,679 --> 00:19:02,480
address which is something that

574
00:19:01,360 --> 00:19:04,719
theoretically

575
00:19:02,480 --> 00:19:06,320
isn't readable by apps and hasn't been

576
00:19:04,720 --> 00:19:08,799
since android 6.

577
00:19:06,320 --> 00:19:10,720
so starting in android 6 when apps tried

578
00:19:08,799 --> 00:19:12,799
to access the mac address they get the

579
00:19:10,720 --> 00:19:14,559
string of you know zero two zero zero

580
00:19:12,799 --> 00:19:17,200
zero zero and so on

581
00:19:14,559 --> 00:19:18,080
um but we noticed that apps you know

582
00:19:17,200 --> 00:19:20,960
we're sending

583
00:19:18,080 --> 00:19:21,840
the real mac address to unity servers um

584
00:19:20,960 --> 00:19:23,840
and it turns out that

585
00:19:21,840 --> 00:19:25,199
you know the reason here is that they're

586
00:19:23,840 --> 00:19:27,439
using ioctals

587
00:19:25,200 --> 00:19:28,799
um in native c plus plus code and you

588
00:19:27,440 --> 00:19:31,360
know with the native c

589
00:19:28,799 --> 00:19:32,080
plus code that you know goes that that

590
00:19:31,360 --> 00:19:35,280
doesn't

591
00:19:32,080 --> 00:19:36,879
that goes around the android uh apis

592
00:19:35,280 --> 00:19:38,320
and therefore there aren't any

593
00:19:36,880 --> 00:19:40,720
permission checks on this

594
00:19:38,320 --> 00:19:42,320
and so there are you know places on the

595
00:19:40,720 --> 00:19:43,600
system where you can still find the mac

596
00:19:42,320 --> 00:19:46,080
address and in this case the

597
00:19:43,600 --> 00:19:47,520
the i octal is enough to to return that

598
00:19:46,080 --> 00:19:48,159
we actually found another one of these

599
00:19:47,520 --> 00:19:51,520
with the y

600
00:19:48,160 --> 00:19:54,880
um the the wi-fi mac address being

601
00:19:51,520 --> 00:19:55,440
shared with apps just last week using a

602
00:19:54,880 --> 00:19:58,880
different

603
00:19:55,440 --> 00:20:00,880
exploit we reported it to google

604
00:19:58,880 --> 00:20:03,760
and we're told that they're uninterested

605
00:20:00,880 --> 00:20:08,240
in fixing it so

606
00:20:03,760 --> 00:20:10,000
uh gps data so we saw shutterfly was

607
00:20:08,240 --> 00:20:12,080
uh you know flagged by our system as

608
00:20:10,000 --> 00:20:15,520
sharing gps coordinates

609
00:20:12,080 --> 00:20:16,960
um with their servers without holding

610
00:20:15,520 --> 00:20:18,720
the location permission and this was

611
00:20:16,960 --> 00:20:19,679
because they were looking at exif

612
00:20:18,720 --> 00:20:21,840
metadata

613
00:20:19,679 --> 00:20:24,320
found in the photo library so to access

614
00:20:21,840 --> 00:20:26,080
the photo library you just need the

615
00:20:24,320 --> 00:20:28,000
uh permission that governs access to the

616
00:20:26,080 --> 00:20:30,158
shared file system where the

617
00:20:28,000 --> 00:20:31,520
photo library is saved and so any app

618
00:20:30,159 --> 00:20:34,880
that has the

619
00:20:31,520 --> 00:20:35,918
um you know read uh read from the the

620
00:20:34,880 --> 00:20:38,480
shared file system

621
00:20:35,919 --> 00:20:39,679
can open up the library to look at the

622
00:20:38,480 --> 00:20:41,840
photo metadata

623
00:20:39,679 --> 00:20:42,799
which invariably will contain gps

624
00:20:41,840 --> 00:20:44,879
coordinates and

625
00:20:42,799 --> 00:20:46,799
invariably gps coordinates of places

626
00:20:44,880 --> 00:20:49,120
what you know the user has been

627
00:20:46,799 --> 00:20:50,240
probably sufficient to infer where they

628
00:20:49,120 --> 00:20:53,600
live exactly and

629
00:20:50,240 --> 00:20:56,000
maybe you know bear all their activities

630
00:20:53,600 --> 00:20:57,678
and so all of these behaviors that are

631
00:20:56,000 --> 00:20:58,799
you know circumventing the permission

632
00:20:57,679 --> 00:21:01,600
system

633
00:20:58,799 --> 00:21:02,158
were due to the use of third party sdks

634
00:21:01,600 --> 00:21:05,280
um

635
00:21:02,159 --> 00:21:07,280
so you know the real takeaway here is in

636
00:21:05,280 --> 00:21:09,200
many of these cases it's likely that the

637
00:21:07,280 --> 00:21:11,039
developers had no idea

638
00:21:09,200 --> 00:21:13,760
that you know not only were their apps

639
00:21:11,039 --> 00:21:16,879
violating you know google's policies

640
00:21:13,760 --> 00:21:19,440
for you know use of uh you know

641
00:21:16,880 --> 00:21:20,960
certain types of user data um but you

642
00:21:19,440 --> 00:21:21,919
know they probably had no idea that any

643
00:21:20,960 --> 00:21:23,600
of this was occurring

644
00:21:21,919 --> 00:21:25,280
but none nonetheless these app

645
00:21:23,600 --> 00:21:26,639
developers are still liable for it

646
00:21:25,280 --> 00:21:28,320
because it's code that they chose to

647
00:21:26,640 --> 00:21:30,799
bundle in their apps they're releasing

648
00:21:28,320 --> 00:21:32,559
the apps with their name and those apps

649
00:21:30,799 --> 00:21:34,240
you know are violating these policies

650
00:21:32,559 --> 00:21:35,840
but they might also be violating their

651
00:21:34,240 --> 00:21:38,240
own privacy policies

652
00:21:35,840 --> 00:21:39,840
um if the developers aren't aware what

653
00:21:38,240 --> 00:21:43,440
data collection is actually

654
00:21:39,840 --> 00:21:45,520
you know taking place and so you know

655
00:21:43,440 --> 00:21:47,039
looking at what the privacy behaviors

656
00:21:45,520 --> 00:21:49,760
are of an app

657
00:21:47,039 --> 00:21:51,360
is a lot more than uh just looking at

658
00:21:49,760 --> 00:21:53,200
what permissions were requested or

659
00:21:51,360 --> 00:21:55,120
whether sdks were bundled

660
00:21:53,200 --> 00:21:56,480
um you know what matters is what's

661
00:21:55,120 --> 00:21:57,918
actually being sent so

662
00:21:56,480 --> 00:21:59,679
you know what we found is that the

663
00:21:57,919 --> 00:22:01,200
permissions really don't you know play a

664
00:21:59,679 --> 00:22:02,799
complete picture if an app

665
00:22:01,200 --> 00:22:04,320
you know says that it's only you know

666
00:22:02,799 --> 00:22:05,918
it's only declared these particular

667
00:22:04,320 --> 00:22:06,639
permissions that doesn't necessarily

668
00:22:05,919 --> 00:22:09,200
mean

669
00:22:06,640 --> 00:22:10,880
that the app doesn't have access to the

670
00:22:09,200 --> 00:22:12,640
those data types that are protected by

671
00:22:10,880 --> 00:22:15,280
those permissions

672
00:22:12,640 --> 00:22:17,280
um and so you know app developers need

673
00:22:15,280 --> 00:22:19,440
to do a lot more to try and figure out

674
00:22:17,280 --> 00:22:21,120
what their app is actually collecting

675
00:22:19,440 --> 00:22:22,960
you know when they're using third-party

676
00:22:21,120 --> 00:22:24,399
code and so for you know

677
00:22:22,960 --> 00:22:25,760
most of the ones that that i've

678
00:22:24,400 --> 00:22:27,039
mentioned in here we've reported those

679
00:22:25,760 --> 00:22:28,320
to google and they've been fixed in

680
00:22:27,039 --> 00:22:30,158
android queue

681
00:22:28,320 --> 00:22:31,439
but i think there's a lot more work that

682
00:22:30,159 --> 00:22:33,120
needs to be done so

683
00:22:31,440 --> 00:22:35,919
you know with there are a lot of you

684
00:22:33,120 --> 00:22:36,799
know software updates for security

685
00:22:35,919 --> 00:22:38,559
issues

686
00:22:36,799 --> 00:22:40,000
um that happen over the air there are

687
00:22:38,559 --> 00:22:42,960
hot fixes that come out

688
00:22:40,000 --> 00:22:43,600
but not really the same with privacy so

689
00:22:42,960 --> 00:22:45,039
you know

690
00:22:43,600 --> 00:22:46,799
as much as they say that privacy

691
00:22:45,039 --> 00:22:48,320
shouldn't be a luxury good that's very

692
00:22:46,799 --> 00:22:50,320
much what's happening here

693
00:22:48,320 --> 00:22:52,320
um if these bugs are only fixed in the

694
00:22:50,320 --> 00:22:55,678
bleeding edge whereas 95

695
00:22:52,320 --> 00:22:58,559
of users aren't using android q 95 or on

696
00:22:55,679 --> 00:22:59,120
nine and below um that's that's a

697
00:22:58,559 --> 00:23:00,480
problem

698
00:22:59,120 --> 00:23:02,080
because most of those users aren't

699
00:23:00,480 --> 00:23:04,720
getting the privacy protections that

700
00:23:02,080 --> 00:23:06,639
they think they're getting

701
00:23:04,720 --> 00:23:08,159
so um with the remaining time i was

702
00:23:06,640 --> 00:23:10,000
gonna go over some of the you know other

703
00:23:08,159 --> 00:23:13,520
fun things that we found

704
00:23:10,000 --> 00:23:13,520
during the course of doing this research

705
00:23:14,000 --> 00:23:17,520
so we see a lot of obfuscations that

706
00:23:15,840 --> 00:23:18,879
appear in code and again

707
00:23:17,520 --> 00:23:20,639
you know this is all stuff that we see

708
00:23:18,880 --> 00:23:23,919
in sdks so

709
00:23:20,640 --> 00:23:27,200
here is a transmission from chart boost

710
00:23:23,919 --> 00:23:31,039
um we can see this field marked identity

711
00:23:27,200 --> 00:23:32,799
um does anyone wanna

712
00:23:31,039 --> 00:23:35,280
i mean so you know it's obviously that

713
00:23:32,799 --> 00:23:36,799
you know this is just base64

714
00:23:35,280 --> 00:23:38,480
um and what's you know what's what's

715
00:23:36,799 --> 00:23:41,600
being copied is the

716
00:23:38,480 --> 00:23:44,240
uh the advertising id alongside

717
00:23:41,600 --> 00:23:45,918
the the device serial number which is a

718
00:23:44,240 --> 00:23:48,240
violation of the

719
00:23:45,919 --> 00:23:51,039
you know the ad id policy that google

720
00:23:48,240 --> 00:23:53,520
has for the platform

721
00:23:51,039 --> 00:23:57,200
um here's another one does anyone want

722
00:23:53,520 --> 00:23:57,200
to want to guess what this is

723
00:24:01,840 --> 00:24:05,199
it's hard to see any hands from this

724
00:24:03,360 --> 00:24:07,678
view

725
00:24:05,200 --> 00:24:10,000
but um you can see here that you know

726
00:24:07,679 --> 00:24:13,600
this looks like base 64.

727
00:24:10,000 --> 00:24:15,090
um but it's not really and but the the

728
00:24:13,600 --> 00:24:16,320
indication is you know if you if you

729
00:24:15,090 --> 00:24:19,279
[Music]

730
00:24:16,320 --> 00:24:19,840
if you try and decode this as base 64 it

731
00:24:19,279 --> 00:24:22,240
doesn't

732
00:24:19,840 --> 00:24:23,918
decode properly and the the key that we

733
00:24:22,240 --> 00:24:24,880
figured out was looking at the last two

734
00:24:23,919 --> 00:24:27,120
characters the

735
00:24:24,880 --> 00:24:28,480
y e um for those of you who have looked

736
00:24:27,120 --> 00:24:30,158
at a lot of base 64

737
00:24:28,480 --> 00:24:32,400
you'll see you'll know you know that

738
00:24:30,159 --> 00:24:34,480
when json objects are are transmitted

739
00:24:32,400 --> 00:24:36,720
they usually begin with ey

740
00:24:34,480 --> 00:24:38,799
which is a you know opening curly

741
00:24:36,720 --> 00:24:42,000
bracket to denote a json object

742
00:24:38,799 --> 00:24:42,720
and so uh we this is what we refer to as

743
00:24:42,000 --> 00:24:46,799
the

744
00:24:42,720 --> 00:24:50,080
uh the 46 esab encoding

745
00:24:46,799 --> 00:24:51,760
um basically they you know took uh

746
00:24:50,080 --> 00:24:54,320
you know they take all the data they you

747
00:24:51,760 --> 00:24:57,679
know save it as a json object

748
00:24:54,320 --> 00:25:00,000
um and then they take the base64

749
00:24:57,679 --> 00:25:01,520
and you know flip it around so that it

750
00:25:00,000 --> 00:25:03,440
can't be easily decoded

751
00:25:01,520 --> 00:25:05,120
until you you know flip it around again

752
00:25:03,440 --> 00:25:05,600
and you know once we know to do that

753
00:25:05,120 --> 00:25:07,120
from

754
00:25:05,600 --> 00:25:08,959
you know just looking at the underlying

755
00:25:07,120 --> 00:25:10,639
data you know we can see that again

756
00:25:08,960 --> 00:25:12,640
you know it's it's transmitting stuff

757
00:25:10,640 --> 00:25:15,840
that it's not supposed to

758
00:25:12,640 --> 00:25:17,919
um other weird stuff that we see um this

759
00:25:15,840 --> 00:25:19,120
i have no idea you know this maybe this

760
00:25:17,919 --> 00:25:20,400
is just bad coding

761
00:25:19,120 --> 00:25:21,918
maybe i'm you know thinking too much

762
00:25:20,400 --> 00:25:23,039
about it but you know here they send the

763
00:25:21,919 --> 00:25:26,159
imei

764
00:25:23,039 --> 00:25:28,720
um then they send the md5 of the imei

765
00:25:26,159 --> 00:25:31,039
then the sha-1 of the imei uh then the

766
00:25:28,720 --> 00:25:32,400
shot 256 of the imei

767
00:25:31,039 --> 00:25:34,240
um and you know the same thing again

768
00:25:32,400 --> 00:25:35,840
with the android id um

769
00:25:34,240 --> 00:25:37,120
and what's interesting is you know

770
00:25:35,840 --> 00:25:37,678
what's interesting here is that not only

771
00:25:37,120 --> 00:25:39,039
duvet

772
00:25:37,679 --> 00:25:42,480
you know the reason why they're sending

773
00:25:39,039 --> 00:25:44,240
this twice um as the md5 and the sha1

774
00:25:42,480 --> 00:25:46,159
is the function that sends this it it

775
00:25:44,240 --> 00:25:49,120
calculates the md5

776
00:25:46,159 --> 00:25:50,880
um of the you know the hex characters

777
00:25:49,120 --> 00:25:53,039
both as uppercase and lowercase in the

778
00:25:50,880 --> 00:25:54,400
case of the imei it's all numeric so you

779
00:25:53,039 --> 00:25:56,320
get the same hashes

780
00:25:54,400 --> 00:25:57,919
um with the android id that's not the

781
00:25:56,320 --> 00:26:00,240
case there there will be a difference

782
00:25:57,919 --> 00:26:01,760
you know with uppercase versus lowercase

783
00:26:00,240 --> 00:26:03,200
and so they collect them all

784
00:26:01,760 --> 00:26:05,120
why they do that when they're also

785
00:26:03,200 --> 00:26:06,960
collecting the unencoded data and could

786
00:26:05,120 --> 00:26:08,559
be hashing it back ends to

787
00:26:06,960 --> 00:26:11,679
on the back end to figure out if they're

788
00:26:08,559 --> 00:26:14,720
matching it elsewhere from hashes

789
00:26:11,679 --> 00:26:14,720
i i have no idea

790
00:26:14,960 --> 00:26:18,480
another thing is you know keys and

791
00:26:16,559 --> 00:26:21,440
source that i mentioned we see this

792
00:26:18,480 --> 00:26:21,440
a lot of the time

793
00:26:22,159 --> 00:26:25,600
so yeah i guess there's not really much

794
00:26:24,159 --> 00:26:28,400
more to say about that

795
00:26:25,600 --> 00:26:28,799
uh bad keys in source um this was a fun

796
00:26:28,400 --> 00:26:32,640
one

797
00:26:28,799 --> 00:26:35,279
so in the traffic we saw a key name

798
00:26:32,640 --> 00:26:36,000
as locations um and you know we saw this

799
00:26:35,279 --> 00:26:38,960
string

800
00:26:36,000 --> 00:26:41,520
which looks like base64 but when you

801
00:26:38,960 --> 00:26:43,279
decode it you know you don't get binary

802
00:26:41,520 --> 00:26:45,120
um these are all you know ascii

803
00:26:43,279 --> 00:26:46,240
characters which was an indication

804
00:26:45,120 --> 00:26:48,479
and what we discovered what was

805
00:26:46,240 --> 00:26:52,480
happening is that it was just xoring

806
00:26:48,480 --> 00:26:56,000
um and so what it's doing

807
00:26:52,480 --> 00:26:57,760
is um it takes the location coordinates

808
00:26:56,000 --> 00:26:59,360
and xors them with the encryption key

809
00:26:57,760 --> 00:27:01,440
encryption key encryption key

810
00:26:59,360 --> 00:27:03,199
and then xors them with start app start

811
00:27:01,440 --> 00:27:07,200
app start app in lead speak

812
00:27:03,200 --> 00:27:10,240
where start app is the name of this sdk

813
00:27:07,200 --> 00:27:12,240
uh there's incompetent sharing of pii

814
00:27:10,240 --> 00:27:13,840
is another thing that we've seen a lot

815
00:27:12,240 --> 00:27:16,000
of so

816
00:27:13,840 --> 00:27:17,439
um one thing when we first started this

817
00:27:16,000 --> 00:27:18,960
project

818
00:27:17,440 --> 00:27:21,039
this was about two years ago one of the

819
00:27:18,960 --> 00:27:21,679
things that came up was as a sanity

820
00:27:21,039 --> 00:27:23,840
check

821
00:27:21,679 --> 00:27:24,880
um i we did you know i just did a search

822
00:27:23,840 --> 00:27:26,639
i was looking for

823
00:27:24,880 --> 00:27:28,880
apps sharing lots of location data and

824
00:27:26,640 --> 00:27:31,600
we found that cvs which is a big

825
00:27:28,880 --> 00:27:31,919
pharmacy chain in the us they have an

826
00:27:31,600 --> 00:27:34,000
app

827
00:27:31,919 --> 00:27:34,960
and according to our instrumentation it

828
00:27:34,000 --> 00:27:37,200
was sharing

829
00:27:34,960 --> 00:27:38,080
location data with 40 different third

830
00:27:37,200 --> 00:27:40,399
parties

831
00:27:38,080 --> 00:27:41,918
uh my first thought when seeing this was

832
00:27:40,399 --> 00:27:42,959
you know surely there's some bug with

833
00:27:41,919 --> 00:27:44,480
our instrumentation

834
00:27:42,960 --> 00:27:46,240
that you know all of these companies

835
00:27:44,480 --> 00:27:49,120
couldn't possibly be collecting you know

836
00:27:46,240 --> 00:27:51,760
user location data when using this app

837
00:27:49,120 --> 00:27:52,879
but you know in fact it was correct and

838
00:27:51,760 --> 00:27:55,760
uh it turned out

839
00:27:52,880 --> 00:27:56,080
what was happening was um whatever you

840
00:27:55,760 --> 00:27:59,200
know

841
00:27:56,080 --> 00:28:01,199
genius coded this app decided to add

842
00:27:59,200 --> 00:28:02,399
location coordinates to the user agent

843
00:28:01,200 --> 00:28:04,960
string

844
00:28:02,399 --> 00:28:07,360
and because the app basically consisted

845
00:28:04,960 --> 00:28:09,679
of a whole series of web views

846
00:28:07,360 --> 00:28:11,439
um every you know every time third-party

847
00:28:09,679 --> 00:28:12,559
content was loaded in one of these web

848
00:28:11,440 --> 00:28:14,480
views

849
00:28:12,559 --> 00:28:16,158
it received the location data as part of

850
00:28:14,480 --> 00:28:19,200
the user agent string

851
00:28:16,159 --> 00:28:20,960
um and you know this was obviously a bug

852
00:28:19,200 --> 00:28:22,240
in the app um it shouldn't have been

853
00:28:20,960 --> 00:28:23,840
designed this way

854
00:28:22,240 --> 00:28:25,919
um and so i you know i spent about an

855
00:28:23,840 --> 00:28:27,279
hour um

856
00:28:25,919 --> 00:28:30,080
on their website trying to find a

857
00:28:27,279 --> 00:28:31,520
technical contact uh to email about this

858
00:28:30,080 --> 00:28:32,559
and i you know after an hour i finally

859
00:28:31,520 --> 00:28:34,240
gave up

860
00:28:32,559 --> 00:28:36,559
and just sent an email to customer

861
00:28:34,240 --> 00:28:38,240
support pointing out the problem

862
00:28:36,559 --> 00:28:40,559
and of course i got this very nice you

863
00:28:38,240 --> 00:28:42,240
know form email back saying we don't

864
00:28:40,559 --> 00:28:45,360
share data with anyone

865
00:28:42,240 --> 00:28:46,960
which obviously uh was untrue and so at

866
00:28:45,360 --> 00:28:49,120
this point there wasn't you know

867
00:28:46,960 --> 00:28:51,120
since i i had exhausted all of the ways

868
00:28:49,120 --> 00:28:52,000
i could think of trying to alert cvs to

869
00:28:51,120 --> 00:28:53,840
the issue

870
00:28:52,000 --> 00:28:56,399
um i tipped off a journalist and then

871
00:28:53,840 --> 00:28:59,439
when it became actually a news story

872
00:28:56,399 --> 00:29:00,399
they then fix the error um and so you

873
00:28:59,440 --> 00:29:01,919
know this also

874
00:29:00,399 --> 00:29:03,678
illustrates the importance of having you

875
00:29:01,919 --> 00:29:06,159
know technical contact information

876
00:29:03,679 --> 00:29:09,600
available on your website

877
00:29:06,159 --> 00:29:11,120
so i'll leave it at here and open it up

878
00:29:09,600 --> 00:29:13,840
for questions

879
00:29:11,120 --> 00:29:13,840
um

880
00:29:15,760 --> 00:29:21,279
okay thank you very much search

881
00:29:18,880 --> 00:29:22,320
so i not only learnt your name is

882
00:29:21,279 --> 00:29:24,640
pronounced

883
00:29:22,320 --> 00:29:26,480
uh edelman not eagle man sorry for that

884
00:29:24,640 --> 00:29:29,840
but that's fine

885
00:29:26,480 --> 00:29:33,919
but i i also came to know that

886
00:29:29,840 --> 00:29:36,559
that 46 esp is a thing apparently

887
00:29:33,919 --> 00:29:38,880
this was quite funny so uh we're up for

888
00:29:36,559 --> 00:29:41,279
the final q a session of today so please

889
00:29:38,880 --> 00:29:42,640
don't hesitate to ask whatever you like

890
00:29:41,279 --> 00:29:45,520
to know

891
00:29:42,640 --> 00:29:46,960
we already have two questions in the

892
00:29:45,520 --> 00:29:50,960
chats the first one

893
00:29:46,960 --> 00:29:53,840
is from renee who asks have you seen

894
00:29:50,960 --> 00:29:54,799
those sdks you talked about adapts their

895
00:29:53,840 --> 00:29:57,279
behavior

896
00:29:54,799 --> 00:29:58,559
now that newer android versions block

897
00:29:57,279 --> 00:30:01,200
access to

898
00:29:58,559 --> 00:30:02,000
uh proc nets to the prognet directory

899
00:30:01,200 --> 00:30:05,600
and other such

900
00:30:02,000 --> 00:30:07,600
channels that were previously possible

901
00:30:05,600 --> 00:30:09,520
that's a very good question um we're

902
00:30:07,600 --> 00:30:11,439
certainly monitoring for that i don't

903
00:30:09,520 --> 00:30:13,520
think we've collected enough data

904
00:30:11,440 --> 00:30:15,279
to really see if if that's been

905
00:30:13,520 --> 00:30:17,760
impactful because

906
00:30:15,279 --> 00:30:19,919
you know the fundamental issue is for 95

907
00:30:17,760 --> 00:30:22,080
percent of android users

908
00:30:19,919 --> 00:30:23,919
that that vulnerability still exists and

909
00:30:22,080 --> 00:30:24,720
it's still being exploited by lots of

910
00:30:23,919 --> 00:30:27,679
apps

911
00:30:24,720 --> 00:30:29,440
um and that's because the fix for it is

912
00:30:27,679 --> 00:30:32,480
you know is in

913
00:30:29,440 --> 00:30:35,600
uh i think it started in 10

914
00:30:32,480 --> 00:30:37,760
and so you know with that fix only five

915
00:30:35,600 --> 00:30:40,000
percent of users have upgraded because

916
00:30:37,760 --> 00:30:41,840
most you know most android users aren't

917
00:30:40,000 --> 00:30:43,600
buying a new phone every year

918
00:30:41,840 --> 00:30:45,120
so that they can get access to the you

919
00:30:43,600 --> 00:30:45,678
know to the most recent over-the-air

920
00:30:45,120 --> 00:30:47,120
updates

921
00:30:45,679 --> 00:30:49,440
and so i think that's a that's a big

922
00:30:47,120 --> 00:30:50,399
issue is that you know the exploits that

923
00:30:49,440 --> 00:30:52,240
have been

924
00:30:50,399 --> 00:30:53,520
um you know discovered and the

925
00:30:52,240 --> 00:30:56,080
vulnerabilities patched

926
00:30:53,520 --> 00:30:57,760
are still being exploited right because

927
00:30:56,080 --> 00:30:59,120
you know it only goes to the bleeding

928
00:30:57,760 --> 00:31:00,320
edge so

929
00:30:59,120 --> 00:31:02,158
it's a good question it's something that

930
00:31:00,320 --> 00:31:03,678
we're looking for but we're not really

931
00:31:02,159 --> 00:31:05,120
you know seeing much of it yet because

932
00:31:03,679 --> 00:31:07,279
there's so many other ways of collecting

933
00:31:05,120 --> 00:31:10,320
the same data

934
00:31:07,279 --> 00:31:12,799
okay thanks um another question

935
00:31:10,320 --> 00:31:13,519
from renee do you think that scoped

936
00:31:12,799 --> 00:31:16,080
storage

937
00:31:13,519 --> 00:31:16,559
will mitigate those side channels

938
00:31:16,080 --> 00:31:19,120
between

939
00:31:16,559 --> 00:31:20,240
apps in a sufficient manner or put

940
00:31:19,120 --> 00:31:22,320
differently uh

941
00:31:20,240 --> 00:31:24,000
which other way would you in the role of

942
00:31:22,320 --> 00:31:26,720
a malicious app developer

943
00:31:24,000 --> 00:31:28,559
go on an android version with scoped

944
00:31:26,720 --> 00:31:29,919
storage

945
00:31:28,559 --> 00:31:31,600
yeah no that's a really good question i

946
00:31:29,919 --> 00:31:33,360
mean the short answer is yes i think

947
00:31:31,600 --> 00:31:34,959
that scope storage really solves you

948
00:31:33,360 --> 00:31:37,199
know solves this problem

949
00:31:34,960 --> 00:31:38,399
a lot um i think that you know the big

950
00:31:37,200 --> 00:31:41,679
problem was that

951
00:31:38,399 --> 00:31:44,239
with shared storage you know one

952
00:31:41,679 --> 00:31:46,080
that gives apps a lot of power um if

953
00:31:44,240 --> 00:31:46,640
they can read the entire shared file

954
00:31:46,080 --> 00:31:49,279
system

955
00:31:46,640 --> 00:31:51,360
and if the shared file system is sort of

956
00:31:49,279 --> 00:31:53,200
you know the go-to place for apps to

957
00:31:51,360 --> 00:31:55,439
store stuff so if apps are storing lots

958
00:31:53,200 --> 00:31:57,120
of sensitive data there

959
00:31:55,440 --> 00:31:59,679
even if they're you know a perfectly

960
00:31:57,120 --> 00:32:02,239
benign app that isn't intent

961
00:31:59,679 --> 00:32:03,200
intending to you know exploit any of

962
00:32:02,240 --> 00:32:04,559
these things

963
00:32:03,200 --> 00:32:06,399
by putting data on the shared file

964
00:32:04,559 --> 00:32:07,840
system then bear a target for other apps

965
00:32:06,399 --> 00:32:09,439
that might have you know less benign

966
00:32:07,840 --> 00:32:10,320
intentions and so the best thing i think

967
00:32:09,440 --> 00:32:12,960
is just you know

968
00:32:10,320 --> 00:32:14,559
having the scope storage um i i suspect

969
00:32:12,960 --> 00:32:17,279
that will solve a lot of it um

970
00:32:14,559 --> 00:32:18,720
but you know increasingly you know again

971
00:32:17,279 --> 00:32:20,240
we found some new findings last week

972
00:32:18,720 --> 00:32:22,399
that seemed to all be due to

973
00:32:20,240 --> 00:32:24,480
native code and i don't really have a

974
00:32:22,399 --> 00:32:26,158
good solution around that other than

975
00:32:24,480 --> 00:32:27,760
moving a lot of these protections into

976
00:32:26,159 --> 00:32:29,120
the kernel it seems

977
00:32:27,760 --> 00:32:31,120
you know i haven't looked at the code

978
00:32:29,120 --> 00:32:31,678
directly but like the proc file system

979
00:32:31,120 --> 00:32:34,719
fix

980
00:32:31,679 --> 00:32:37,120
um based on just playing around um

981
00:32:34,720 --> 00:32:38,799
with that fix um i assume the way it was

982
00:32:37,120 --> 00:32:40,559
implemented is by looking at you know

983
00:32:38,799 --> 00:32:42,879
the kernel looking at the uid of who's

984
00:32:40,559 --> 00:32:44,320
trying to read from the proc file system

985
00:32:42,880 --> 00:32:45,679
because when it's an app you know it

986
00:32:44,320 --> 00:32:46,960
shows the you know the file you know the

987
00:32:45,679 --> 00:32:50,080
file doesn't exist

988
00:32:46,960 --> 00:32:50,960
um whereas if i you know using adb i i

989
00:32:50,080 --> 00:32:52,559
can still see it

990
00:32:50,960 --> 00:32:54,080
so i think there's a lot more that you

991
00:32:52,559 --> 00:32:58,000
could do with the kernel to look at what

992
00:32:54,080 --> 00:32:58,000
user ids are reading from what files

993
00:32:58,320 --> 00:33:06,399
so yeah okay thanks yeah i i

994
00:33:02,399 --> 00:33:09,439
let's hope that as code courage will

995
00:33:06,399 --> 00:33:10,080
make things better in that regard so we

996
00:33:09,440 --> 00:33:13,039
have a question

997
00:33:10,080 --> 00:33:13,840
from daniel thomas who asks is the

998
00:33:13,039 --> 00:33:16,720
problem

999
00:33:13,840 --> 00:33:17,519
with the privacy breach fixes that

1000
00:33:16,720 --> 00:33:20,720
fixing them

1001
00:33:17,519 --> 00:33:23,440
changes the potentially unofficial api

1002
00:33:20,720 --> 00:33:26,159
and so requires a new api version is

1003
00:33:23,440 --> 00:33:26,159
that a problem

1004
00:33:26,480 --> 00:33:30,000
it's a problem but i mean isn't that i

1005
00:33:28,880 --> 00:33:32,480
mean that's the problem of using

1006
00:33:30,000 --> 00:33:35,279
unofficial apis to do things right

1007
00:33:32,480 --> 00:33:36,080
i mean if you're relying on if you're

1008
00:33:35,279 --> 00:33:38,159
relying on

1009
00:33:36,080 --> 00:33:40,480
exploiting a vulnerability to get the

1010
00:33:38,159 --> 00:33:42,080
data that your app needs to function

1011
00:33:40,480 --> 00:33:43,600
that that doesn't seem like a great

1012
00:33:42,080 --> 00:33:46,639
long-term uh

1013
00:33:43,600 --> 00:33:48,879
solution instead maybe you need to then

1014
00:33:46,640 --> 00:33:50,840
focus on only using supported apis so

1015
00:33:48,880 --> 00:33:52,320
that you don't find yourself in that

1016
00:33:50,840 --> 00:33:54,799
situation

1017
00:33:52,320 --> 00:33:56,158
i meant that um the reason why they

1018
00:33:54,799 --> 00:33:58,399
might not be back porting it

1019
00:33:56,159 --> 00:33:59,840
is that they might be worried about it

1020
00:33:58,399 --> 00:34:02,399
being an

1021
00:33:59,840 --> 00:34:03,519
a breaking change i don't i'm not saying

1022
00:34:02,399 --> 00:34:05,039
interesting that's not

1023
00:34:03,519 --> 00:34:06,559
that they wouldn't they wouldn't but

1024
00:34:05,039 --> 00:34:09,280
they shouldn't still do it

1025
00:34:06,559 --> 00:34:11,359
but i'm i'm guessing that's the pushback

1026
00:34:09,280 --> 00:34:13,119
from the backboard

1027
00:34:11,359 --> 00:34:14,560
sure but it's i mean so that's yeah the

1028
00:34:13,119 --> 00:34:17,839
calculation is

1029
00:34:14,560 --> 00:34:20,639
um you know should you know

1030
00:34:17,839 --> 00:34:21,119
should we you know if we fix this you

1031
00:34:20,639 --> 00:34:23,119
know

1032
00:34:21,119 --> 00:34:24,879
developers are going to complain that

1033
00:34:23,119 --> 00:34:26,560
their legacy code that was x

1034
00:34:24,879 --> 00:34:28,960
you know that that wasn't using

1035
00:34:26,560 --> 00:34:30,399
supported apis is breaking

1036
00:34:28,960 --> 00:34:32,079
that's one side of the coin the other

1037
00:34:30,399 --> 00:34:34,560
side of the coin is you know

1038
00:34:32,079 --> 00:34:36,800
users actually get to control what data

1039
00:34:34,560 --> 00:34:38,960
is accessed by their apps

1040
00:34:36,800 --> 00:34:40,960
um and so you know given those you know

1041
00:34:38,960 --> 00:34:42,079
those two trade-offs it seems like

1042
00:34:40,960 --> 00:34:44,159
you know making it so that the

1043
00:34:42,079 --> 00:34:45,280
permission system actually does what it

1044
00:34:44,159 --> 00:34:46,960
says it does

1045
00:34:45,280 --> 00:34:48,720
and the controls actually you know

1046
00:34:46,960 --> 00:34:50,480
prevent the data from being accessed so

1047
00:34:48,719 --> 00:34:51,918
that users can actually have a better

1048
00:34:50,480 --> 00:34:52,879
understanding of what data is being

1049
00:34:51,918 --> 00:34:54,560
accessed

1050
00:34:52,879 --> 00:34:56,239
um it seems like that should be the

1051
00:34:54,560 --> 00:34:58,799
priority but it's not

1052
00:34:56,239 --> 00:34:59,439
so i'm thinking that there was an there

1053
00:34:58,800 --> 00:35:01,359
was a

1054
00:34:59,440 --> 00:35:02,480
remote code execution vulnerability that

1055
00:35:01,359 --> 00:35:07,040
required a

1056
00:35:02,480 --> 00:35:09,760
api change um and um you had to wait for

1057
00:35:07,040 --> 00:35:11,040
you didn't get back ported you had to

1058
00:35:09,760 --> 00:35:13,040
have to wait for the upgrade

1059
00:35:11,040 --> 00:35:14,240
and you had the remote execution until

1060
00:35:13,040 --> 00:35:17,599
you got the

1061
00:35:14,240 --> 00:35:20,000
until you changed your phone um right

1062
00:35:17,599 --> 00:35:21,920
and so that that that that fear of

1063
00:35:20,000 --> 00:35:22,800
changing the api isn't just a privacy

1064
00:35:21,920 --> 00:35:24,720
thing like

1065
00:35:22,800 --> 00:35:25,839
you still have remote execution that can

1066
00:35:24,720 --> 00:35:27,118
still be could live

1067
00:35:25,839 --> 00:35:31,839
live for ages because they're just

1068
00:35:27,119 --> 00:35:35,119
afraid of breaking people's apps

1069
00:35:31,839 --> 00:35:36,560
now but that was the case no

1070
00:35:35,119 --> 00:35:38,400
sure i mean like there's no doubt that

1071
00:35:36,560 --> 00:35:38,880
some apps would break but those apps are

1072
00:35:38,400 --> 00:35:40,400
breaking

1073
00:35:38,880 --> 00:35:41,440
you know the reason why those apps would

1074
00:35:40,400 --> 00:35:42,880
break is because they were using

1075
00:35:41,440 --> 00:35:46,720
unsupported apis

1076
00:35:42,880 --> 00:35:48,880
for their functionality and so i mean

1077
00:35:46,720 --> 00:35:51,598
if you know the risk that developers

1078
00:35:48,880 --> 00:35:54,000
took is you know

1079
00:35:51,599 --> 00:35:55,440
coming back to them that's kind of their

1080
00:35:54,000 --> 00:35:57,680
fault and instead

1081
00:35:55,440 --> 00:35:59,280
you know leave you know instead choosing

1082
00:35:57,680 --> 00:36:01,279
to

1083
00:35:59,280 --> 00:36:02,640
you know provide users with controls

1084
00:36:01,280 --> 00:36:03,839
that don't actually work

1085
00:36:02,640 --> 00:36:06,799
that doesn't seem like it's an

1086
00:36:03,839 --> 00:36:06,799
acceptable trade-off

1087
00:36:09,119 --> 00:36:14,560
okay thank you very much um i do have a

1088
00:36:12,480 --> 00:36:16,480
question so you told us you compared the

1089
00:36:14,560 --> 00:36:18,240
code coverage of ui monkey with the

1090
00:36:16,480 --> 00:36:21,440
actions of your students

1091
00:36:18,240 --> 00:36:22,319
and it was quite similar for 60 of the

1092
00:36:21,440 --> 00:36:24,160
apps

1093
00:36:22,320 --> 00:36:26,640
so i asked myself how much more code

1094
00:36:24,160 --> 00:36:28,799
coverage did your undergrads get

1095
00:36:26,640 --> 00:36:30,640
for the remaining 40 of the apps

1096
00:36:28,800 --> 00:36:33,920
approximately much more or

1097
00:36:30,640 --> 00:36:35,680
is it neglect neglectable

1098
00:36:33,920 --> 00:36:37,839
i don't remember i mean so this was a

1099
00:36:35,680 --> 00:36:39,118
specific type of app um that statistic

1100
00:36:37,839 --> 00:36:42,000
was when we were looking at

1101
00:36:39,119 --> 00:36:43,920
games that's how this initially started

1102
00:36:42,000 --> 00:36:45,520
so one thing i didn't talk about in this

1103
00:36:43,920 --> 00:36:47,440
talk was you know one of the

1104
00:36:45,520 --> 00:36:48,880
the first uses for this uh

1105
00:36:47,440 --> 00:36:51,680
infrastructure was testing

1106
00:36:48,880 --> 00:36:52,800
kids apps because that's actually one of

1107
00:36:51,680 --> 00:36:54,720
the few areas

1108
00:36:52,800 --> 00:36:56,320
in the u.s where there actually is you

1109
00:36:54,720 --> 00:36:58,480
know privacy law

1110
00:36:56,320 --> 00:37:00,480
um and so we wanted to see whether you

1111
00:36:58,480 --> 00:37:02,240
know apps that were marketed to children

1112
00:37:00,480 --> 00:37:03,680
were obeying the you know children's

1113
00:37:02,240 --> 00:37:05,759
privacy law in the u.s

1114
00:37:03,680 --> 00:37:07,200
and so for children's apps we got pretty

1115
00:37:05,760 --> 00:37:09,920
good coverage because

1116
00:37:07,200 --> 00:37:11,520
those apps are a lot simpler i you know

1117
00:37:09,920 --> 00:37:12,800
the reason why we've shifted to doing

1118
00:37:11,520 --> 00:37:13,520
this you know the remote desktop

1119
00:37:12,800 --> 00:37:15,040
solution

1120
00:37:13,520 --> 00:37:16,640
um we're also doing some work that we

1121
00:37:15,040 --> 00:37:19,279
haven't published yet

1122
00:37:16,640 --> 00:37:20,640
um to try and improve the monkey but by

1123
00:37:19,280 --> 00:37:22,960
and large for you know any sort of

1124
00:37:20,640 --> 00:37:23,839
complicated app the monkey isn't a great

1125
00:37:22,960 --> 00:37:26,480
solution

1126
00:37:23,839 --> 00:37:27,920
um that said it captures a lot of the

1127
00:37:26,480 --> 00:37:29,520
stuff that we're interested in

1128
00:37:27,920 --> 00:37:31,359
because again most of the stuff that

1129
00:37:29,520 --> 00:37:33,359
we're finding is due to

1130
00:37:31,359 --> 00:37:35,598
third-party sdks that have been bundled

1131
00:37:33,359 --> 00:37:38,799
with the app and in many cases

1132
00:37:35,599 --> 00:37:40,240
those sdks start transmitting you know

1133
00:37:38,800 --> 00:37:42,240
all of the personal data that they're

1134
00:37:40,240 --> 00:37:42,720
going to transfer as soon as you run the

1135
00:37:42,240 --> 00:37:44,479
app

1136
00:37:42,720 --> 00:37:45,839
um you know so not in response to any

1137
00:37:44,480 --> 00:37:47,520
particular user input

1138
00:37:45,839 --> 00:37:48,880
you know obviously that changes when it

1139
00:37:47,520 --> 00:37:51,040
starts serving ads

1140
00:37:48,880 --> 00:37:52,400
um the user clicks on those ads and

1141
00:37:51,040 --> 00:37:54,000
there's a whole you know attribution

1142
00:37:52,400 --> 00:37:54,480
chain and lots of other third parties

1143
00:37:54,000 --> 00:37:57,040
get

1144
00:37:54,480 --> 00:37:58,800
contacted but by and large most of the

1145
00:37:57,040 --> 00:38:00,960
sdks that are bundled

1146
00:37:58,800 --> 00:38:02,560
um communicate personal information to

1147
00:38:00,960 --> 00:38:05,200
their servers you know at time

1148
00:38:02,560 --> 00:38:06,799
zero and so that's why the monkey for

1149
00:38:05,200 --> 00:38:08,000
you know many purposes is actually

1150
00:38:06,800 --> 00:38:11,119
sufficient

1151
00:38:08,000 --> 00:38:13,440
um but yeah but it it it

1152
00:38:11,119 --> 00:38:15,359
but the but the monkey's very stupid and

1153
00:38:13,440 --> 00:38:18,720
so you know

1154
00:38:15,359 --> 00:38:21,680
yes okay okay

1155
00:38:18,720 --> 00:38:22,078
thanks um another question uh do you

1156
00:38:21,680 --> 00:38:25,040
think

1157
00:38:22,079 --> 00:38:27,520
uh eye octals or or let's say native c

1158
00:38:25,040 --> 00:38:29,359
plus plus calls in general may be used

1159
00:38:27,520 --> 00:38:31,200
for even more questionable techniques

1160
00:38:29,359 --> 00:38:32,000
like what you show us for getting the

1161
00:38:31,200 --> 00:38:34,799
mac address

1162
00:38:32,000 --> 00:38:36,880
i think it was the mac address yeah yeah

1163
00:38:34,800 --> 00:38:39,440
so we found two just last week

1164
00:38:36,880 --> 00:38:41,200
one was gathering the bss id another was

1165
00:38:39,440 --> 00:38:44,320
gathering mac addresses

1166
00:38:41,200 --> 00:38:47,040
um they weren't those weren't

1167
00:38:44,320 --> 00:38:48,079
iactals but they were other java apis

1168
00:38:47,040 --> 00:38:51,040
that were

1169
00:38:48,079 --> 00:38:52,400
you know that were being used um outside

1170
00:38:51,040 --> 00:38:54,240
of the permission system so that you

1171
00:38:52,400 --> 00:38:56,800
know the data was available in

1172
00:38:54,240 --> 00:38:58,560
um some you know other java apis that

1173
00:38:56,800 --> 00:39:01,599
weren't protected

1174
00:38:58,560 --> 00:39:02,960
um yeah

1175
00:39:01,599 --> 00:39:05,520
but yeah i mean there's there's a lot of

1176
00:39:02,960 --> 00:39:06,960
this out there right so you know we find

1177
00:39:05,520 --> 00:39:09,119
stuff you know new stuff like this all

1178
00:39:06,960 --> 00:39:11,520
the time

1179
00:39:09,119 --> 00:39:13,200
yeah uh if you do i hope you tell us

1180
00:39:11,520 --> 00:39:15,440
next year if there if there is another

1181
00:39:13,200 --> 00:39:19,200
composition next year

1182
00:39:15,440 --> 00:39:23,119
okay uh i guess that's it regarding

1183
00:39:19,200 --> 00:39:29,598
questions if i'm not mistaken

1184
00:39:23,119 --> 00:39:31,680
so thank you very much again

1185
00:39:29,599 --> 00:39:31,680
you

