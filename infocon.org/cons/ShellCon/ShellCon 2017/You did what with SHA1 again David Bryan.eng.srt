1
00:00:01,159 --> 00:00:04,460
glamour shots

2
00:00:13,010 --> 00:00:19,230
okay so next is David David Bryan is the

3
00:00:17,699 --> 00:00:21,210
senior managing consultant in charge of

4
00:00:19,230 --> 00:00:22,470
technology with x-force read IBM's elite

5
00:00:21,210 --> 00:00:23,970
security testing team his

6
00:00:22,470 --> 00:00:25,679
responsibilities include establishing

7
00:00:23,970 --> 00:00:27,210
standardized tool sets and environments

8
00:00:25,679 --> 00:00:29,310
for project delivery and delivering on

9
00:00:27,210 --> 00:00:30,720
pen test projects David has been a

10
00:00:29,310 --> 00:00:32,610
participant in the information security

11
00:00:30,720 --> 00:00:33,900
community for 18 plus years first

12
00:00:32,610 --> 00:00:36,180
starting out as a DEFCON volunteer

13
00:00:33,900 --> 00:00:37,890
securing the DEFCON Network and now is

14
00:00:36,180 --> 00:00:40,080
on the board that runs Caan a shark a

15
00:00:37,890 --> 00:00:42,450
Chicago internet information security

16
00:00:40,080 --> 00:00:44,040
conference David lives in cold but

17
00:00:42,450 --> 00:00:46,320
beautiful Minneapolis Minnesota with his

18
00:00:44,040 --> 00:00:52,590
wife and two cats please join me in

19
00:00:46,320 --> 00:00:55,620
welcoming David to choke on 2017 hi

20
00:00:52,590 --> 00:01:00,960
folks how's everybody doing today good

21
00:00:55,620 --> 00:01:05,789
good good all right so this talk kind of

22
00:01:00,960 --> 00:01:07,950
explores the the methods for gaining

23
00:01:05,790 --> 00:01:09,690
access gaining credentials and some of

24
00:01:07,950 --> 00:01:13,350
the things that we discovered and then

25
00:01:09,690 --> 00:01:18,570
some post exploitation research that I

26
00:01:13,350 --> 00:01:21,389
sort of did fairly recently one of the

27
00:01:18,570 --> 00:01:24,179
things we want to remember is 1.2

28
00:01:21,390 --> 00:01:28,560
million right it's a number to think

29
00:01:24,180 --> 00:01:30,480
about we'll talk a little bit more about

30
00:01:28,560 --> 00:01:36,900
this number and why it's significant as

31
00:01:30,480 --> 00:01:38,550
we continue through this arc I've been

32
00:01:36,900 --> 00:01:41,700
involved in information security for a

33
00:01:38,550 --> 00:01:44,820
number of years as a consultant for a

34
00:01:41,700 --> 00:01:48,450
number of years as well over 15 years

35
00:01:44,820 --> 00:01:51,600
now I guess or 10 years over 10 years

36
00:01:48,450 --> 00:01:54,030
have and I've been involved in the

37
00:01:51,600 --> 00:01:55,649
information security community been

38
00:01:54,030 --> 00:01:57,810
volunteering for DEFCON 4

39
00:01:55,650 --> 00:02:01,950
this is my 19th DEFCON which is crazy

40
00:01:57,810 --> 00:02:04,290
but a lot of fun you know it's

41
00:02:01,950 --> 00:02:06,420
interesting to see the the progression

42
00:02:04,290 --> 00:02:08,459
of people in the industry

43
00:02:06,420 --> 00:02:10,378
well the progression of what we're

44
00:02:08,459 --> 00:02:13,370
teenagers and kids to people in the

45
00:02:10,378 --> 00:02:15,829
industry to where they've ended up now

46
00:02:13,370 --> 00:02:19,970
myself included in that I guess

47
00:02:15,830 --> 00:02:22,430
right and then dc-6 1 2 is the DEF CON

48
00:02:19,970 --> 00:02:24,740
local DEFCON group I think it's really

49
00:02:22,430 --> 00:02:29,720
important to support those right if you

50
00:02:24,740 --> 00:02:33,800
if you can and now I'm I'm with x-force

51
00:02:29,720 --> 00:02:35,510
red from IBM in charge of Technology I

52
00:02:33,800 --> 00:02:38,570
make technology decisions than I do pen

53
00:02:35,510 --> 00:02:42,310
testing right it's it's actually a

54
00:02:38,570 --> 00:02:45,260
really fun job I also believe that

55
00:02:42,310 --> 00:02:47,840
people should have options for internet

56
00:02:45,260 --> 00:02:50,149
that are not Comcast or CenturyLink if

57
00:02:47,840 --> 00:02:53,120
you can and I've started my own Wireless

58
00:02:50,150 --> 00:03:02,140
ISP Pico ISP in Minneapolis I have about

59
00:02:53,120 --> 00:03:04,910
15 customers so so hashing right I think

60
00:03:02,140 --> 00:03:08,019
one of the things that I see very often

61
00:03:04,910 --> 00:03:11,240
in developers comments in the code is

62
00:03:08,020 --> 00:03:13,700
encrypt the data or encrypted password

63
00:03:11,240 --> 00:03:16,640
it's not encrypted it's a one-way hash

64
00:03:13,700 --> 00:03:20,238
function right we have to we have to

65
00:03:16,640 --> 00:03:22,760
remember that so we put appropriate

66
00:03:20,239 --> 00:03:24,200
controls around that hash right and

67
00:03:22,760 --> 00:03:30,709
around the data that you're you're

68
00:03:24,200 --> 00:03:33,440
trying to secure so decrypt right

69
00:03:30,709 --> 00:03:36,890
decrypt is a hashing function it uses a

70
00:03:33,440 --> 00:03:39,230
salt a salt is a bit of random data that

71
00:03:36,890 --> 00:03:41,179
gets essentially passed along into the

72
00:03:39,230 --> 00:03:48,260
hashing algorithm with your your

73
00:03:41,180 --> 00:03:50,390
password right this is a cloud

74
00:03:48,260 --> 00:03:53,810
environment right you

75
00:03:50,390 --> 00:03:57,799
anybody can rent this it's got eight

76
00:03:53,810 --> 00:04:01,850
Tesla k80 GPUs and the speed of bcrypt

77
00:03:57,800 --> 00:04:06,709
is just a benchmark it's 15,000 hashes

78
00:04:01,850 --> 00:04:09,200
per second right so then in contrast we

79
00:04:06,709 --> 00:04:11,630
have sha-1 rain sha-1 is a another

80
00:04:09,200 --> 00:04:13,640
hashing function if you look on

81
00:04:11,630 --> 00:04:19,430
Wikipedia it basically says don't trust

82
00:04:13,640 --> 00:04:23,210
this shot hash anymore write it so in

83
00:04:19,430 --> 00:04:26,030
contrast we can do 14 Giga hashes per

84
00:04:23,210 --> 00:04:28,948
second of brute force of that right as a

85
00:04:26,030 --> 00:04:31,109
theoretical bench

86
00:04:28,949 --> 00:04:34,650
there's no salt right unless you have a

87
00:04:31,110 --> 00:04:39,659
sha-1 salted hash which I know like AIX

88
00:04:34,650 --> 00:04:41,388
for example we'll do some of that our

89
00:04:39,659 --> 00:04:48,449
benchmark here is again with the same

90
00:04:41,389 --> 00:04:52,530
cloud-based computing hardware so the

91
00:04:48,449 --> 00:04:54,509
the path to watch sha-1 right I was

92
00:04:52,530 --> 00:04:57,448
essentially involved in doing a pen test

93
00:04:54,509 --> 00:05:04,710
of an application that we were acquiring

94
00:04:57,449 --> 00:05:06,960
right and in order to to identify right

95
00:05:04,710 --> 00:05:09,930
if the application is secure or what

96
00:05:06,960 --> 00:05:12,029
controls were missed I was asked to go

97
00:05:09,930 --> 00:05:14,099
on site to a pen test and this was

98
00:05:12,029 --> 00:05:16,469
essentially sort of a walkthrough of

99
00:05:14,099 --> 00:05:18,389
where where I started where I got to and

100
00:05:16,469 --> 00:05:26,879
finally some of the metrics that I

101
00:05:18,389 --> 00:05:30,509
gathered from that so the first step is

102
00:05:26,879 --> 00:05:33,750
finding open access right a lot of

103
00:05:30,509 --> 00:05:38,039
companies will leave just wide open

104
00:05:33,750 --> 00:05:40,319
right one of the first things I

105
00:05:38,039 --> 00:05:42,539
identified was that they had NFS shares

106
00:05:40,319 --> 00:05:45,589
that were open anybody write at least

107
00:05:42,539 --> 00:05:45,589
one machine that had that

108
00:05:48,930 --> 00:05:53,880
what I found was what's called a

109
00:05:51,780 --> 00:05:55,948
kickstart file right essentially a thing

110
00:05:53,880 --> 00:05:59,370
that allows you to boot off the network

111
00:05:55,949 --> 00:06:05,190
bring a machine up install the OS right

112
00:05:59,370 --> 00:06:08,580
I was able to log into this box right

113
00:06:05,190 --> 00:06:09,960
one box but it didn't have any data on

114
00:06:08,580 --> 00:06:13,229
it didn't look like it was linked to

115
00:06:09,960 --> 00:06:19,560
anything it was kind of a dead end if

116
00:06:13,229 --> 00:06:21,270
you will right so all right I guess I

117
00:06:19,560 --> 00:06:25,080
have to start over again right go back

118
00:06:21,270 --> 00:06:28,729
to the go back to my end map data see

119
00:06:25,080 --> 00:06:28,729
what else is open what else is available

120
00:06:30,259 --> 00:06:37,259
in this case there was a web application

121
00:06:33,539 --> 00:06:39,440
running it was a Jenkins server right

122
00:06:37,259 --> 00:06:43,530
does anybody know what Jenkins is here

123
00:06:39,440 --> 00:06:46,020
yeah okay so Jenkins allows you

124
00:06:43,530 --> 00:06:51,989
basically to deploy code to production

125
00:06:46,020 --> 00:06:54,330
web servers if you will it it's actually

126
00:06:51,990 --> 00:06:56,789
I mean it's a useful tool right it's a

127
00:06:54,330 --> 00:07:04,469
development tool DevOps tool but you

128
00:06:56,789 --> 00:07:09,150
kind of have to secure it right in this

129
00:07:04,470 --> 00:07:11,280
case there's no credentials to access it

130
00:07:09,150 --> 00:07:13,320
you just pop open a web page and you

131
00:07:11,280 --> 00:07:18,179
have full access to any other Jenkins

132
00:07:13,320 --> 00:07:19,530
jobs right and there's a couple of

133
00:07:18,180 --> 00:07:21,330
things I think there's a Metasploit

134
00:07:19,530 --> 00:07:24,448
module for this right that allows you to

135
00:07:21,330 --> 00:07:29,520
deploy him edit reporter shells on the

136
00:07:24,449 --> 00:07:33,539
box but you know I don't know I don't

137
00:07:29,520 --> 00:07:35,820
know if I need that this screen shot is

138
00:07:33,539 --> 00:07:37,650
a little hard to read but essentially

139
00:07:35,820 --> 00:07:39,570
there's a scripting console built into

140
00:07:37,650 --> 00:07:42,690
it so you can run your scripts right

141
00:07:39,570 --> 00:07:45,180
well as one component of the scripting

142
00:07:42,690 --> 00:07:47,940
console there's the ability to run a

143
00:07:45,180 --> 00:07:51,810
process execute a process as the user

144
00:07:47,940 --> 00:07:53,580
running the Jenkins server right so

145
00:07:51,810 --> 00:07:55,740
there's no password on this machine and

146
00:07:53,580 --> 00:07:59,210
now you have direct access to a shell on

147
00:07:55,740 --> 00:07:59,210
the box it's pretty bad

148
00:08:00,840 --> 00:08:09,969
so basically what you do in a lot of

149
00:08:06,760 --> 00:08:12,909
linux distributions they've they include

150
00:08:09,970 --> 00:08:14,820
netcat but they've removed the - e which

151
00:08:12,910 --> 00:08:17,320
allows you to execute a command

152
00:08:14,820 --> 00:08:19,030
underneath the shell so you can do like

153
00:08:17,320 --> 00:08:22,270
a reverse shell that comes back to you

154
00:08:19,030 --> 00:08:24,909
but all you really have to do is pipe

155
00:08:22,270 --> 00:08:27,190
the output of a shell to netcat and send

156
00:08:24,910 --> 00:08:30,010
it back to you right so the first thing

157
00:08:27,190 --> 00:08:32,530
you have to do is make a pipe right

158
00:08:30,010 --> 00:08:35,169
basically develop our device pipe and

159
00:08:32,530 --> 00:08:37,329
then take all the output pipe it's

160
00:08:35,169 --> 00:08:42,039
netback netcat any of the input goes

161
00:08:37,330 --> 00:08:44,470
back to netcat and lo and behold you get

162
00:08:42,039 --> 00:08:48,550
a shell in the box right this is this is

163
00:08:44,470 --> 00:08:50,320
me just showing this example on my

164
00:08:48,550 --> 00:08:51,819
laptop today I was like well I should I

165
00:08:50,320 --> 00:08:57,250
should include that script because that

166
00:08:51,820 --> 00:09:00,030
script is useful this is me actually

167
00:08:57,250 --> 00:09:03,790
getting a shell on the customer box

168
00:09:00,030 --> 00:09:06,370
because I was able to run a double you

169
00:09:03,790 --> 00:09:09,910
get to pull back a shell script right

170
00:09:06,370 --> 00:09:11,290
via that Jenkins scripting console when

171
00:09:09,910 --> 00:09:13,630
a double you get pulled down the shell

172
00:09:11,290 --> 00:09:17,170
script executes the shell script it

173
00:09:13,630 --> 00:09:19,660
calls back to me using netcat and Here I

174
00:09:17,170 --> 00:09:28,420
am I'm running as the Jenkins user on

175
00:09:19,660 --> 00:09:31,870
their build server ok so now what right

176
00:09:28,420 --> 00:09:33,490
I think there are a lot of companies

177
00:09:31,870 --> 00:09:35,410
that would stop here and be like oh I

178
00:09:33,490 --> 00:09:41,230
found a problem I got access to your

179
00:09:35,410 --> 00:09:43,480
shell ok done and I don't think that's

180
00:09:41,230 --> 00:09:45,400
appropriate right I think you should go

181
00:09:43,480 --> 00:09:49,410
the next level and the next level that

182
00:09:45,400 --> 00:09:52,870
that I go for is looking for SSH keys

183
00:09:49,410 --> 00:09:57,579
looking for private data looking for

184
00:09:52,870 --> 00:09:59,830
passwords looking for users look in the

185
00:09:57,580 --> 00:10:01,720
shell history right a lot of people will

186
00:09:59,830 --> 00:10:03,250
put passwords on the command line

187
00:10:01,720 --> 00:10:08,050
right and then it logs it in shell

188
00:10:03,250 --> 00:10:10,330
history in this case in the in the

189
00:10:08,050 --> 00:10:12,449
Jenkins directory there was something

190
00:10:10,330 --> 00:10:13,980
called dotnet RC

191
00:10:12,450 --> 00:10:16,220
and I I didn't really know what the heck

192
00:10:13,980 --> 00:10:19,740
that was because I'd never used it right

193
00:10:16,220 --> 00:10:22,950
but there was a deployment user and

194
00:10:19,740 --> 00:10:27,839
password and a mobile dev user and

195
00:10:22,950 --> 00:10:31,170
password right what I what I found out

196
00:10:27,839 --> 00:10:34,079
later is the dotnet RC is actually

197
00:10:31,170 --> 00:10:35,610
github credentials right it's a it's an

198
00:10:34,079 --> 00:10:38,099
automated process to pull it out of

199
00:10:35,610 --> 00:10:45,660
there get repo build a file and then

200
00:10:38,100 --> 00:10:48,540
deploy it right so it's anybody here use

201
00:10:45,660 --> 00:10:51,120
git yeah I think everybody does right

202
00:10:48,540 --> 00:10:53,010
it's it's a super great tool allows you

203
00:10:51,120 --> 00:11:01,800
to do code tracking and all that fun

204
00:10:53,010 --> 00:11:05,130
stuff so in this case I use those

205
00:11:01,800 --> 00:11:08,370
credentials to log directly into their

206
00:11:05,130 --> 00:11:11,189
github right here we can see okay you

207
00:11:08,370 --> 00:11:12,110
know this is a bit of one of the codes

208
00:11:11,190 --> 00:11:14,459
right

209
00:11:12,110 --> 00:11:17,660
okay well that that's that's not good

210
00:11:14,459 --> 00:11:19,800
right okay

211
00:11:17,660 --> 00:11:23,819
so then I started going through their

212
00:11:19,800 --> 00:11:27,949
hedge source code repository like what

213
00:11:23,820 --> 00:11:33,779
what attacker is not gonna do this right

214
00:11:27,949 --> 00:11:36,329
and found user names passwords users for

215
00:11:33,779 --> 00:11:41,430
the database passwords for the database

216
00:11:36,329 --> 00:11:43,319
my sequel database I also found that

217
00:11:41,430 --> 00:11:45,989
they'd like to put things in comments in

218
00:11:43,320 --> 00:11:49,440
their code right and in this specific

219
00:11:45,990 --> 00:11:51,600
example it's a comment for the actual

220
00:11:49,440 --> 00:11:55,050
live administrator for the mailgun

221
00:11:51,600 --> 00:11:57,089
account right so I then took this and

222
00:11:55,050 --> 00:11:59,060
actually went to mailgun and logged in

223
00:11:57,089 --> 00:12:03,589
as their administrator for their account

224
00:11:59,060 --> 00:12:06,209
right they also had a payment gateway

225
00:12:03,589 --> 00:12:08,670
administrator account they had a bunch

226
00:12:06,209 --> 00:12:10,739
of other accounts checked into github on

227
00:12:08,670 --> 00:12:15,569
there in the source code as a comment

228
00:12:10,740 --> 00:12:18,420
right I mean this is this is like sanity

229
00:12:15,569 --> 00:12:21,769
of development 101 is just don't check

230
00:12:18,420 --> 00:12:21,769
in secret keys to your github

231
00:12:24,060 --> 00:12:31,810
all right so now that I have the

232
00:12:28,920 --> 00:12:33,699
Microsoft or my yourself my sequel

233
00:12:31,810 --> 00:12:35,619
password right user and password for

234
00:12:33,699 --> 00:12:41,310
root I'm gonna go after that database

235
00:12:35,620 --> 00:12:44,260
cuz what what could be there right well

236
00:12:41,310 --> 00:12:47,768
looks like we have user name user

237
00:12:44,260 --> 00:12:50,170
password they're encrypted password wait

238
00:12:47,769 --> 00:12:52,750
a bit I thought we had a password and OH

239
00:12:50,170 --> 00:12:54,670
encrypted okay all right we have their

240
00:12:52,750 --> 00:12:57,279
email I think at some point there's like

241
00:12:54,670 --> 00:12:59,889
a PayPal there's a Facebook I mean it's

242
00:12:57,279 --> 00:13:04,199
got everything right this whole whole

243
00:12:59,889 --> 00:13:04,199
database has all of the info that I want

244
00:13:06,779 --> 00:13:14,139
and then I went through and figured out

245
00:13:10,630 --> 00:13:19,410
okay how many users do we think we have

246
00:13:14,139 --> 00:13:25,360
here so this is 1.2 million users right

247
00:13:19,410 --> 00:13:27,880
that's crazy like wow that's that to me

248
00:13:25,360 --> 00:13:30,339
was sort of an eye-opener I think that's

249
00:13:27,880 --> 00:13:38,230
the biggest compromise of users I've I

250
00:13:30,339 --> 00:13:39,699
have ever personally done right like so

251
00:13:38,230 --> 00:13:42,010
out of that I figured out there was

252
00:13:39,699 --> 00:13:46,000
eight hundred and twenty thousand sha-1

253
00:13:42,010 --> 00:13:51,100
hashes in this database alongside bcrypt

254
00:13:46,000 --> 00:13:53,380
hashes right so they had both both

255
00:13:51,100 --> 00:13:56,589
password fields in their database and

256
00:13:53,380 --> 00:14:00,180
they still had them right it's pretty

257
00:13:56,589 --> 00:14:04,060
bad like wait a minute

258
00:14:00,180 --> 00:14:07,630
so I'm gonna change gears a little bit

259
00:14:04,060 --> 00:14:10,149
here back about six months ago just

260
00:14:07,630 --> 00:14:12,360
before blackhat we actually built a

261
00:14:10,149 --> 00:14:14,889
password cracking cluster as

262
00:14:12,360 --> 00:14:16,779
specifically as a demo for blackhat but

263
00:14:14,889 --> 00:14:19,420
then also for our consulting team to be

264
00:14:16,779 --> 00:14:22,089
able to use right because we recover

265
00:14:19,420 --> 00:14:23,860
passwords or recover password hashes we

266
00:14:22,089 --> 00:14:27,459
recover secrets and things like that

267
00:14:23,860 --> 00:14:29,819
that we all want to be able to recover

268
00:14:27,459 --> 00:14:34,529
it and then use it to gain access and

269
00:14:29,819 --> 00:14:34,529
escalate or elevate our privileges right

270
00:14:36,690 --> 00:14:41,290
the system that we built we're calling

271
00:14:39,070 --> 00:14:45,580
it the Kraken right so the Kraken is

272
00:14:41,290 --> 00:14:50,339
sort of an homage to the creatures in

273
00:14:45,580 --> 00:14:54,730
the sea if you will right we're using

274
00:14:50,340 --> 00:14:58,810
essentially two clusters with 16 GT X

275
00:14:54,730 --> 00:15:02,530
1080 cards this is sort of a total we've

276
00:14:58,810 --> 00:15:06,550
got 86 cores 256 gigs of memory and 4

277
00:15:02,530 --> 00:15:11,220
terabytes of disk it's actually a pretty

278
00:15:06,550 --> 00:15:14,439
pretty sweet rig or - pretty sweet rigs

279
00:15:11,220 --> 00:15:16,180
when I first proposed hey we need this

280
00:15:14,440 --> 00:15:19,930
password cracking rig I actually brought

281
00:15:16,180 --> 00:15:21,339
it to our team and I brought it to the

282
00:15:19,930 --> 00:15:23,949
capital team you know the team that does

283
00:15:21,340 --> 00:15:25,930
the capital expenditures and said hey we

284
00:15:23,950 --> 00:15:28,060
need this and they're like well we have

285
00:15:25,930 --> 00:15:33,069
extra money do you want do you need more

286
00:15:28,060 --> 00:15:40,079
and I was like yes so I managed to get

287
00:15:33,070 --> 00:15:41,260
two instead of one all right so this is

288
00:15:40,080 --> 00:15:46,810
bcrypt

289
00:15:41,260 --> 00:15:50,189
on our cracking rig is 118 thousand

290
00:15:46,810 --> 00:15:52,420
hashes per second now if we remember on

291
00:15:50,190 --> 00:15:55,060
the cloud version

292
00:15:52,420 --> 00:15:58,089
it was 15,000 hashes per second so

293
00:15:55,060 --> 00:16:00,250
that's a huge magnitude of order for for

294
00:15:58,090 --> 00:16:08,680
brute forcing bcrypt bcrypt

295
00:16:00,250 --> 00:16:13,150
is slow super slow right sha-1 on these

296
00:16:08,680 --> 00:16:16,839
guys is 66 Giga hashes per second on the

297
00:16:13,150 --> 00:16:18,880
cloud it's 14 so again an order of

298
00:16:16,840 --> 00:16:25,110
magnitude difference for cracking these

299
00:16:18,880 --> 00:16:30,580
the sha-1 hashes using just eight Tesla

300
00:16:25,110 --> 00:16:34,990
or eight gtx 1080s right there consumer

301
00:16:30,580 --> 00:16:37,330
cards right there about 750 a pop but

302
00:16:34,990 --> 00:16:41,380
they work amazingly well for hashes and

303
00:16:37,330 --> 00:16:44,320
they're faster than the you know Tesla P

304
00:16:41,380 --> 00:16:46,189
100 cards so test the P 100 is about a

305
00:16:44,320 --> 00:16:48,680
$3,000 card

306
00:16:46,190 --> 00:16:51,200
it's just awful as far as computing

307
00:16:48,680 --> 00:16:52,640
hashes and cracking hashes as far as

308
00:16:51,200 --> 00:16:54,470
performance goes right

309
00:16:52,640 --> 00:16:59,390
maybe it's great for games and rendering

310
00:16:54,470 --> 00:17:01,280
all that stuff but and here's a

311
00:16:59,390 --> 00:17:02,360
benchmark now you can't see it the

312
00:17:01,280 --> 00:17:05,660
benchmarks cut off

313
00:17:02,360 --> 00:17:09,050
I think it's Oh No there is 334 Giga

314
00:17:05,660 --> 00:17:10,850
hashes for ntlm right so NC L M is what

315
00:17:09,050 --> 00:17:14,240
Active Directory stores your password

316
00:17:10,849 --> 00:17:17,780
hash in so if you've got a 7 character

317
00:17:14,240 --> 00:17:21,970
password we can brute force all eight or

318
00:17:17,780 --> 00:17:24,290
all alphanumeric specials and digits in

319
00:17:21,970 --> 00:17:30,860
three minutes I think an eight character

320
00:17:24,290 --> 00:17:33,740
password takes about 12 hours so all

321
00:17:30,860 --> 00:17:39,010
right so let's go back to dun dun dun

322
00:17:33,740 --> 00:17:41,870
our database so I took the sha-1 hash

323
00:17:39,010 --> 00:17:45,200
right and basically went through and

324
00:17:41,870 --> 00:17:47,570
said okay let's let's see who's got the

325
00:17:45,200 --> 00:17:51,560
same password right let's take the top

326
00:17:47,570 --> 00:17:54,770
top 1000 of the same password and then

327
00:17:51,560 --> 00:17:59,929
just brute force it because why not I've

328
00:17:54,770 --> 00:18:03,350
got spare cycles right I was running

329
00:17:59,930 --> 00:18:05,240
this stuff in the cloud and it was

330
00:18:03,350 --> 00:18:09,189
costing two to three thousand dollars a

331
00:18:05,240 --> 00:18:11,240
month right extremely prohibitive right

332
00:18:09,190 --> 00:18:13,520
and that was only for two to three

333
00:18:11,240 --> 00:18:17,630
hundred hours at a pop to start it up

334
00:18:13,520 --> 00:18:20,330
run some hashes shut it down over a

335
00:18:17,630 --> 00:18:23,090
five-year period we're saving like five

336
00:18:20,330 --> 00:18:25,730
hundred thousand dollars to buy the

337
00:18:23,090 --> 00:18:28,490
hardware right to buy 40 thousand

338
00:18:25,730 --> 00:18:32,950
dollars worth of hardware alright so

339
00:18:28,490 --> 00:18:32,950
anyway back to the the hashes here so

340
00:18:33,100 --> 00:18:42,139
this is eight characters all in which is

341
00:18:36,800 --> 00:18:47,060
alpha upper lower special characters all

342
00:18:42,140 --> 00:18:51,380
that fun stuff out of those top 1000 I

343
00:18:47,060 --> 00:18:53,300
loaded 997 hashes probably some spaces

344
00:18:51,380 --> 00:18:56,280
in there some other garbage in the in

345
00:18:53,300 --> 00:18:59,129
the hashes in

346
00:18:56,280 --> 00:19:00,960
a 12-hour run nine hundred and seven of

347
00:18:59,130 --> 00:19:09,690
them were recovered right and that's

348
00:19:00,960 --> 00:19:11,910
eight characters all in so I was kind of

349
00:19:09,690 --> 00:19:13,260
surprised I thought password or password

350
00:19:11,910 --> 00:19:16,880
one was gonna be up at the top here

351
00:19:13,260 --> 00:19:21,540
right but one two three four five six

352
00:19:16,880 --> 00:19:23,120
was the top shared password amongst you

353
00:19:21,540 --> 00:19:28,409
know eight hundred and some thousand

354
00:19:23,120 --> 00:19:30,739
faster or hashes right then its password

355
00:19:28,410 --> 00:19:32,010
QWERTY keyboard walk keyboard walk

356
00:19:30,740 --> 00:19:33,570
abc123

357
00:19:32,010 --> 00:19:43,080
keyboard walk keyboard walk keyboard

358
00:19:33,570 --> 00:19:46,379
mark right and then I added just a

359
00:19:43,080 --> 00:19:49,970
simple digit to the end of it and it

360
00:19:46,380 --> 00:19:55,500
came back in like three minutes and

361
00:19:49,970 --> 00:19:58,850
recovered and that there's password one

362
00:19:55,500 --> 00:20:02,460
I'm really surprised this is so low like

363
00:19:58,850 --> 00:20:03,780
cuz it used to be like I mean what I've

364
00:20:02,460 --> 00:20:05,580
done password sprays on domain

365
00:20:03,780 --> 00:20:08,460
controllers in an environment like

366
00:20:05,580 --> 00:20:15,720
password one typically works everywhere

367
00:20:08,460 --> 00:20:19,250
I think I'm an app - oh yeah yeah so

368
00:20:15,720 --> 00:20:21,870
this this is what will pass an ad

369
00:20:19,250 --> 00:20:24,570
complexity requirement right this will

370
00:20:21,870 --> 00:20:26,010
not pass an ad complexity requirement so

371
00:20:24,570 --> 00:20:29,850
that's why I always go for the password

372
00:20:26,010 --> 00:20:32,070
one with the capital P because that's

373
00:20:29,850 --> 00:20:33,899
what people are gonna use I think I was

374
00:20:32,070 --> 00:20:36,750
thinking it through too much I need to

375
00:20:33,900 --> 00:20:39,990
use you know one two three four five six

376
00:20:36,750 --> 00:20:47,780
seven eight nine four one two three four

377
00:20:39,990 --> 00:20:47,780
five six all right

378
00:20:49,370 --> 00:20:56,959
when we got our racks we got some SSD

379
00:20:54,440 --> 00:21:01,160
drives and a third SSD drive for our

380
00:20:56,960 --> 00:21:04,310
data but they didn't include the drive

381
00:21:01,160 --> 00:21:06,700
sleds so I had to use basically make a

382
00:21:04,310 --> 00:21:10,700
makeshift drive sled that's what that

383
00:21:06,700 --> 00:21:15,110
the I think it's a it's a cover slide

384
00:21:10,700 --> 00:21:18,770
for a PCI bus I was like all right well

385
00:21:15,110 --> 00:21:20,479
I'm leaving tomorrow and I can't come

386
00:21:18,770 --> 00:21:23,810
back for a month because I'm doing pen

387
00:21:20,480 --> 00:21:25,250
testing for other clients so did that to

388
00:21:23,810 --> 00:21:26,450
start off with no it's got real drive

389
00:21:25,250 --> 00:21:30,370
sleds in it but I thought it was funny

390
00:21:26,450 --> 00:21:33,710
like in true fashion of ordering stuff

391
00:21:30,370 --> 00:21:39,610
all right switch gears a little bit here

392
00:21:33,710 --> 00:21:44,780
from sha-1 hashes over to SSH keys right

393
00:21:39,610 --> 00:21:47,750
SSH keys are very useful very wonderful

394
00:21:44,780 --> 00:21:49,730
for automating things but developers do

395
00:21:47,750 --> 00:21:53,270
not know how to use them or store them

396
00:21:49,730 --> 00:21:55,730
right and and to some degree I would say

397
00:21:53,270 --> 00:21:57,710
a lot of system admins and even somewhat

398
00:21:55,730 --> 00:22:01,370
security people don't know how to use

399
00:21:57,710 --> 00:22:09,500
them right kind of an epidemic of a

400
00:22:01,370 --> 00:22:12,560
problem that's at what are the Paris I

401
00:22:09,500 --> 00:22:15,980
think in the at DEFCON someone decided

402
00:22:12,560 --> 00:22:18,970
to put googly eyes on Gordon Ramsay it's

403
00:22:15,980 --> 00:22:23,900
like a that's pretty funny

404
00:22:18,970 --> 00:22:26,960
so I keep finding SSH keys without in

405
00:22:23,900 --> 00:22:29,570
without a password lying around right I

406
00:22:26,960 --> 00:22:32,060
pulled them from like literally from the

407
00:22:29,570 --> 00:22:34,460
Jenkins config files because you can

408
00:22:32,060 --> 00:22:36,980
upload an SSH key that will then be used

409
00:22:34,460 --> 00:22:43,130
to deploy your code right so that's one

410
00:22:36,980 --> 00:22:46,520
place there was a engagement where I had

411
00:22:43,130 --> 00:22:48,440
access to an open NFS export and they

412
00:22:46,520 --> 00:22:51,860
stored all of the SSH keys on that

413
00:22:48,440 --> 00:22:54,380
machine right for their production AWS

414
00:22:51,860 --> 00:22:56,629
instances there's no password and then

415
00:22:54,380 --> 00:22:59,000
there's a text file with the IP address

416
00:22:56,630 --> 00:22:59,640
for the production instant instance next

417
00:22:59,000 --> 00:23:04,110
to it

418
00:22:59,640 --> 00:23:08,340
right home directories SMB shares app

419
00:23:04,110 --> 00:23:14,370
configs I always you know do a find for

420
00:23:08,340 --> 00:23:16,980
ID star or star key right it's pretty

421
00:23:14,370 --> 00:23:18,780
annoying from my perspective as a as a

422
00:23:16,980 --> 00:23:21,930
person who wants these things to be

423
00:23:18,780 --> 00:23:25,200
secure to you know basically completely

424
00:23:21,930 --> 00:23:27,360
own everything in just a couple of steps

425
00:23:25,200 --> 00:23:36,020
because they haven't secured that one

426
00:23:27,360 --> 00:23:36,020
key right there was a engagement where

427
00:23:36,740 --> 00:23:43,320
where they they had gone through and

428
00:23:39,290 --> 00:23:45,030
created a single root key I think it was

429
00:23:43,320 --> 00:23:49,439
a single root key yes a single root key

430
00:23:45,030 --> 00:23:51,510
that everybody could use to get into an

431
00:23:49,440 --> 00:23:53,430
environment that was behind another box

432
00:23:51,510 --> 00:23:58,860
right so they had a box that was

433
00:23:53,430 --> 00:24:02,520
supposedly a jump post we discovered

434
00:23:58,860 --> 00:24:05,399
that I think they had ten users of the

435
00:24:02,520 --> 00:24:07,410
ten users three of them were using their

436
00:24:05,400 --> 00:24:10,830
username as their password right these

437
00:24:07,410 --> 00:24:15,750
are Linux boxes so we got on that box

438
00:24:10,830 --> 00:24:17,699
and then we just sort of had a little

439
00:24:15,750 --> 00:24:20,310
bit of fun and looking first looking for

440
00:24:17,700 --> 00:24:25,320
files and we found one of their keys one

441
00:24:20,310 --> 00:24:27,120
of the keys that eventually basically

442
00:24:25,320 --> 00:24:30,870
just got us into the ninety six hosts

443
00:24:27,120 --> 00:24:32,790
behind that one box right and then it

444
00:24:30,870 --> 00:24:34,290
got worse from there because then we

445
00:24:32,790 --> 00:24:37,170
figured out that oh yeah they chucked it

446
00:24:34,290 --> 00:24:40,649
into github they and the key didn't have

447
00:24:37,170 --> 00:24:44,450
a password on it right so once you have

448
00:24:40,650 --> 00:24:44,450
access to that get access to everything

449
00:24:44,480 --> 00:24:52,370
same thing with the same thing with the

450
00:24:48,000 --> 00:24:52,370
AWS servers AWS instances

451
00:24:57,630 --> 00:25:05,740
all right so I think the other you know

452
00:25:03,790 --> 00:25:08,320
one of the things that people don't

453
00:25:05,740 --> 00:25:10,320
think of is is that their dev

454
00:25:08,320 --> 00:25:13,990
environment is linked to production

455
00:25:10,320 --> 00:25:16,960
right and so they'll leave things wide

456
00:25:13,990 --> 00:25:18,520
open or without controls on it because

457
00:25:16,960 --> 00:25:20,620
they have a timeline right and the

458
00:25:18,520 --> 00:25:23,679
timeline is we've got three months to

459
00:25:20,620 --> 00:25:29,709
get code pushed right and that makes

460
00:25:23,679 --> 00:25:31,630
sense but however if you're leaving car

461
00:25:29,710 --> 00:25:33,400
keys that are the same between those

462
00:25:31,630 --> 00:25:35,440
environments you can use those and those

463
00:25:33,400 --> 00:25:38,110
keys to leverage access to the other

464
00:25:35,440 --> 00:25:46,960
these other environments it's really

465
00:25:38,110 --> 00:25:52,120
awful yeah don't store your credentials

466
00:25:46,960 --> 00:25:53,530
or keys and get right there there is

467
00:25:52,120 --> 00:25:55,418
actually a Python tool that we'll go

468
00:25:53,530 --> 00:26:00,850
through and look in your your git repo

469
00:25:55,419 --> 00:26:02,770
to pull out SSH keys from get I tried to

470
00:26:00,850 --> 00:26:06,250
look it up the other day and I totally

471
00:26:02,770 --> 00:26:08,710
blanked it but the other thing you can

472
00:26:06,250 --> 00:26:12,340
do is just look for ID underscore star

473
00:26:08,710 --> 00:26:14,020
in your git repos in fact I did this on

474
00:26:12,340 --> 00:26:16,330
our Enterprise get repo and I was sort

475
00:26:14,020 --> 00:26:17,650
of blown away at how much stuff comes

476
00:26:16,330 --> 00:26:23,320
back right

477
00:26:17,650 --> 00:26:24,910
I used strong hashing and do security

478
00:26:23,320 --> 00:26:27,159
testing I think that's the biggest thing

479
00:26:24,910 --> 00:26:28,780
is like if you're doing a development if

480
00:26:27,160 --> 00:26:31,660
you're making if you're developing an

481
00:26:28,780 --> 00:26:33,370
app you're doing the work yourself you

482
00:26:31,660 --> 00:26:35,110
should have someone come in and test the

483
00:26:33,370 --> 00:26:36,668
security of it right or at least do a

484
00:26:35,110 --> 00:26:39,459
code review and go oh wait a minute you

485
00:26:36,669 --> 00:26:41,340
shouldn't be using sha-1 cuz no one uses

486
00:26:39,460 --> 00:26:43,330
that anymore

487
00:26:41,340 --> 00:26:45,250
don't create credentials lying around

488
00:26:43,330 --> 00:26:47,790
encrypt your private keys and use agent

489
00:26:45,250 --> 00:26:51,730
40 does everybody know what agent 14 is

490
00:26:47,790 --> 00:26:56,590
okay so agent 14 you load your key up on

491
00:26:51,730 --> 00:27:00,010
your local machine and then when you SSH

492
00:26:56,590 --> 00:27:02,290
out you tell SSH hey do agent forwarding

493
00:27:00,010 --> 00:27:04,690
so now your private key only lives on

494
00:27:02,290 --> 00:27:07,149
your machine and you have basically a

495
00:27:04,690 --> 00:27:10,429
tunneled port that gets tunneled out to

496
00:27:07,150 --> 00:27:13,340
the next hop so if I want to get to

497
00:27:10,429 --> 00:27:17,330
like let's say machine Si and I have to

498
00:27:13,340 --> 00:27:19,399
go you know a b2c you can use SSH

499
00:27:17,330 --> 00:27:23,418
forwarding to forward your private key

500
00:27:19,399 --> 00:27:27,439
or your agent that can validate your

501
00:27:23,419 --> 00:27:29,389
public key all the way out right and so

502
00:27:27,440 --> 00:27:32,269
your private keys don't have to live

503
00:27:29,389 --> 00:27:34,820
anywhere but on your machine and that's

504
00:27:32,269 --> 00:27:36,260
key right because your your private key

505
00:27:34,820 --> 00:27:37,760
then has a password on it

506
00:27:36,260 --> 00:27:41,149
it only gets loaded into your machine

507
00:27:37,760 --> 00:27:43,490
that agent the agent forwarding only

508
00:27:41,149 --> 00:27:47,689
allows machines you're connecting to to

509
00:27:43,490 --> 00:27:49,700
authorize your access etc etc the the

510
00:27:47,690 --> 00:27:50,960
chance of someone stealing it I mean

511
00:27:49,700 --> 00:27:52,820
that there is a chance that someone

512
00:27:50,960 --> 00:27:55,039
could steal that agent forwarding but

513
00:27:52,820 --> 00:27:56,570
the chance is much lower than just

514
00:27:55,039 --> 00:27:58,399
having a key that's sitting out there

515
00:27:56,570 --> 00:28:03,428
unencrypted that anybody can steal and

516
00:27:58,399 --> 00:28:06,529
then reuse a million times right so

517
00:28:03,429 --> 00:28:08,750
learning learning how well making sure

518
00:28:06,529 --> 00:28:11,450
you encrypted your private key on your

519
00:28:08,750 --> 00:28:13,639
machine is one aspect and then learning

520
00:28:11,450 --> 00:28:15,830
how to set up agent forwarding right

521
00:28:13,639 --> 00:28:19,399
it's just in the SSH config file

522
00:28:15,830 --> 00:28:21,799
I think putty may have some config

523
00:28:19,399 --> 00:28:27,080
options for it as well but it's it's

524
00:28:21,799 --> 00:28:30,250
really just setting that up right that

525
00:28:27,080 --> 00:28:30,250
reduces a lot of the risk

526
00:28:31,800 --> 00:29:00,740
all right does anybody have any

527
00:28:34,200 --> 00:29:04,290
questions top 5 1 Sh agent 42 probably I

528
00:29:00,740 --> 00:29:06,020
mean what what's your industry like

529
00:29:04,290 --> 00:29:10,889
[Music]

530
00:29:06,020 --> 00:29:14,879
what's that look okay

531
00:29:10,890 --> 00:29:17,100
a wasp security procedures and policies

532
00:29:14,880 --> 00:29:20,730
and things like that so a wasp as a

533
00:29:17,100 --> 00:29:23,189
whole right up on how to do secure

534
00:29:20,730 --> 00:29:25,500
hashing right and if you go to their

535
00:29:23,190 --> 00:29:27,740
website has all that stuff laid out

536
00:29:25,500 --> 00:29:32,070
right that's a that's a good takeaway

537
00:29:27,740 --> 00:29:33,960
and then educating the users to not

538
00:29:32,070 --> 00:29:36,270
leave lying around educating the

539
00:29:33,960 --> 00:29:38,970
developers right educating the

540
00:29:36,270 --> 00:29:41,790
developers that you don't check private

541
00:29:38,970 --> 00:29:44,670
keys into github right it's it's a it's

542
00:29:41,790 --> 00:29:47,430
a retraining of them of the users of the

543
00:29:44,670 --> 00:29:50,240
developers or github users to get them

544
00:29:47,430 --> 00:29:50,240
to not do that

545
00:29:55,520 --> 00:30:02,559
I don't know I've stopped my head there

546
00:29:58,730 --> 00:30:02,559
are talks about bcrypt

547
00:30:21,220 --> 00:30:28,850
absolutely

548
00:30:23,140 --> 00:30:29,690
yeah decrypted uses Blowfish and I I

549
00:30:28,850 --> 00:30:32,149
don't remember

550
00:30:29,690 --> 00:30:33,680
I'll top my head who developed the

551
00:30:32,150 --> 00:30:40,130
bcrypt I don't I don't think it was

552
00:30:33,680 --> 00:30:44,750
Microsoft but I don't remember they

553
00:30:40,130 --> 00:30:46,970
could yeah no but the the the secure

554
00:30:44,750 --> 00:30:49,040
hashing page from Olas the what the wiki

555
00:30:46,970 --> 00:30:51,350
does actually go into I think it's four

556
00:30:49,040 --> 00:30:54,850
different hashing algorithms that you

557
00:30:51,350 --> 00:30:54,850
could potentially use it out

558
00:30:59,090 --> 00:31:10,879
a big hand for David all right you

559
00:31:09,890 --> 00:31:13,100
probably getting tired of hearing this

560
00:31:10,880 --> 00:31:14,270
but please fill up the speaker survey

561
00:31:13,100 --> 00:31:15,889
cards in the back of the room let us

562
00:31:14,270 --> 00:31:17,990
know what you thought for this talk and

563
00:31:15,890 --> 00:31:21,220
all the others you've seen today it'll

564
00:31:17,990 --> 00:31:21,220
really help us out thank you

