1
00:00:00,000 --> 00:00:02,029
Oh

2
00:00:14,580 --> 00:00:17,759
[Music]

3
00:00:25,490 --> 00:00:37,559
hello everyone we're about to get

4
00:00:27,240 --> 00:00:39,900
started here okay so Chris is my

5
00:00:37,559 --> 00:00:41,280
personal powershell guru over the past

6
00:00:39,900 --> 00:00:43,110
20 years he's moved from desktop

7
00:00:41,280 --> 00:00:44,640
software development to web applications

8
00:00:43,110 --> 00:00:45,629
then Linux and ultimately in Windows

9
00:00:44,640 --> 00:00:47,400
System administration

10
00:00:45,629 --> 00:00:49,440
specializing in high sensitivity and

11
00:00:47,400 --> 00:00:52,400
high security environments please join

12
00:00:49,440 --> 00:00:55,970
me in welcoming Chris to chicon 2017

13
00:00:52,400 --> 00:00:58,190
[Applause]

14
00:00:55,970 --> 00:01:04,099
myself all right cool

15
00:00:58,190 --> 00:01:07,429
how's everybody doing today awesome cool

16
00:01:04,099 --> 00:01:09,690
welcome welcome

17
00:01:07,430 --> 00:01:13,140
let's just get going right what's the

18
00:01:09,690 --> 00:01:15,450
new formalities Who am I I don't think

19
00:01:13,140 --> 00:01:18,119
anyone really cares so we're just gonna

20
00:01:15,450 --> 00:01:23,100
skip over this what we're gonna be doing

21
00:01:18,119 --> 00:01:25,829
are looking at how to author practically

22
00:01:23,100 --> 00:01:29,369
author implants for Windows in

23
00:01:25,829 --> 00:01:30,869
PowerShell we have Linux now for our

24
00:01:29,369 --> 00:01:34,560
show so I kind of have to be specific

25
00:01:30,869 --> 00:01:36,420
although it sucks very specifically very

26
00:01:34,560 --> 00:01:39,799
specifically focused on post

27
00:01:36,420 --> 00:01:41,579
exploitation post excellent post

28
00:01:39,799 --> 00:01:44,969
escalation privilege escalation

29
00:01:41,579 --> 00:01:46,529
malicious code I'm not trying to do all

30
00:01:44,969 --> 00:01:49,979
the rest of the things we're focusing on

31
00:01:46,530 --> 00:01:53,969
one particular part today post

32
00:01:49,979 --> 00:01:56,219
exploitation implants we're gonna

33
00:01:53,969 --> 00:01:58,979
probably run about the full time about

34
00:01:56,219 --> 00:02:01,530
the first two-thirds of the talk is code

35
00:01:58,979 --> 00:02:03,299
samples for implants we're going to

36
00:02:01,530 --> 00:02:04,710
start with some easy stuff to eat on the

37
00:02:03,299 --> 00:02:07,740
same page then where they got to go off

38
00:02:04,710 --> 00:02:09,389
the deep end we'll have about 1/6 of a

39
00:02:07,740 --> 00:02:12,420
talk for packaging because it's pretty

40
00:02:09,389 --> 00:02:16,260
easy and then 1/6 for persistence

41
00:02:12,420 --> 00:02:17,700
because there's like two good ways and

42
00:02:16,260 --> 00:02:22,130
you should just use those and you don't

43
00:02:17,700 --> 00:02:22,130
really care about the other 20 or so

44
00:02:22,200 --> 00:02:28,049
I kind of had to do all the W's so sorry

45
00:02:25,050 --> 00:02:31,290
so while we're doing this why we're

46
00:02:28,050 --> 00:02:34,050
doing this talk is because of script

47
00:02:31,290 --> 00:02:36,269
kiddies I'm tired of running into them

48
00:02:34,050 --> 00:02:37,890
so some of you guys know what you're

49
00:02:36,269 --> 00:02:39,800
doing that's cool

50
00:02:37,890 --> 00:02:42,329
some don't and I want you to learn I

51
00:02:39,800 --> 00:02:44,630
keep hearing over and over again the

52
00:02:42,330 --> 00:02:46,500
same stuff there are some cool new hack

53
00:02:44,630 --> 00:02:49,260
some new things that come out new

54
00:02:46,500 --> 00:02:51,510
exploit and we have this cool marketing

55
00:02:49,260 --> 00:02:54,420
buzzwords and someone makes this really

56
00:02:51,510 --> 00:02:56,579
weirdly named tool that does a really

57
00:02:54,420 --> 00:02:59,220
weird and renamed hacks and then we get

58
00:02:56,580 --> 00:03:01,260
the box and I'm talking to people like

59
00:02:59,220 --> 00:03:08,849
oh that's really cool like how does that

60
00:03:01,260 --> 00:03:12,269
work like like PowerShell No like how

61
00:03:08,849 --> 00:03:14,099
does that work PowerShell and it's fine

62
00:03:12,269 --> 00:03:15,299
like the space like the info 6 space is

63
00:03:14,099 --> 00:03:16,859
huge now there's so many different

64
00:03:15,299 --> 00:03:19,410
things to do so many different

65
00:03:16,860 --> 00:03:20,730
specializations I don't think you need

66
00:03:19,410 --> 00:03:25,560
to know everything about everything

67
00:03:20,730 --> 00:03:28,230
quite the opposite really but something

68
00:03:25,560 --> 00:03:30,630
that is ubiquitous and pervasive and

69
00:03:28,230 --> 00:03:31,410
important now is PowerShell is you

70
00:03:30,630 --> 00:03:33,739
should at least have a basic

71
00:03:31,410 --> 00:03:38,069
understanding so we're gonna look at

72
00:03:33,739 --> 00:03:39,389
code the entire time for your core

73
00:03:38,069 --> 00:03:42,388
understanding of certain areas of

74
00:03:39,389 --> 00:03:45,510
PowerShell that facilitate writing

75
00:03:42,389 --> 00:03:46,950
implants if you want the cool hot missus

76
00:03:45,510 --> 00:03:48,989
I'm not here about hot nurses I'm here

77
00:03:46,950 --> 00:03:52,470
about fundamentals hotness gets you Nike

78
00:03:48,989 --> 00:03:55,049
contracts with fundamental win games the

79
00:03:52,470 --> 00:03:57,900
hotness is right there if only one is

80
00:03:55,049 --> 00:04:02,160
the hotness you're done well know how to

81
00:03:57,900 --> 00:04:06,329
bypass a msi there's a couple of ways

82
00:04:02,160 --> 00:04:08,310
this guy's probably the easiest way you

83
00:04:06,329 --> 00:04:11,880
want to obsolete your code

84
00:04:08,310 --> 00:04:13,709
Daniel Bohannon stuff is awesome he's

85
00:04:11,880 --> 00:04:16,349
got a bunch of a library for eating

86
00:04:13,709 --> 00:04:17,668
PowerShell and obstacle enough just do

87
00:04:16,349 --> 00:04:20,820
that I mean we can give an entire talk

88
00:04:17,668 --> 00:04:23,789
on obstacle obstacle shell but just use

89
00:04:20,820 --> 00:04:26,250
the guy's library because it's it works

90
00:04:23,789 --> 00:04:28,289
it's awesome you want to do some weird

91
00:04:26,250 --> 00:04:30,000
Nike stuff you want to thrill and plant

92
00:04:28,289 --> 00:04:31,890
some boxes just look at PowerShell

93
00:04:30,000 --> 00:04:33,120
Empire you want the hotness

94
00:04:31,890 --> 00:04:34,430
that's the hotness if you want the

95
00:04:33,120 --> 00:04:37,250
fundamentals

96
00:04:34,430 --> 00:04:40,240
that's what's coming up so we're going

97
00:04:37,250 --> 00:04:44,270
to do this by looking at three

98
00:04:40,240 --> 00:04:46,250
prototypes for implants we're gonna

99
00:04:44,270 --> 00:04:47,750
start with the super super basic baby

100
00:04:46,250 --> 00:04:49,910
stuff which is downloader which you've

101
00:04:47,750 --> 00:04:51,740
all undoubtedly seen because I want to

102
00:04:49,910 --> 00:04:52,940
get on the same page once we're on the

103
00:04:51,740 --> 00:04:54,710
same page we'll move to something

104
00:04:52,940 --> 00:04:57,020
slightly more complicated but still easy

105
00:04:54,710 --> 00:04:58,729
we'll do a buying shell after the Bynes

106
00:04:57,020 --> 00:05:01,008
show we're gonna go for a weird data

107
00:04:58,729 --> 00:05:02,979
scraper and that's where we go off the

108
00:05:01,009 --> 00:05:05,060
rails with all kinds of weird stuff

109
00:05:02,979 --> 00:05:09,080
after the implants we'll look at

110
00:05:05,060 --> 00:05:12,590
packaging executions so disclaimers

111
00:05:09,080 --> 00:05:15,948
though for the code I have written this

112
00:05:12,590 --> 00:05:18,650
to show you I've written this to lead

113
00:05:15,949 --> 00:05:21,050
you through things you can run it it is

114
00:05:18,650 --> 00:05:23,659
functional however you probably don't

115
00:05:21,050 --> 00:05:27,710
want to deploy this like really giant

116
00:05:23,660 --> 00:05:29,000
verbose flowery code like in the real

117
00:05:27,710 --> 00:05:30,229
world if you're actually doing a ready

118
00:05:29,000 --> 00:05:33,770
team exercise you probably shouldn't use

119
00:05:30,229 --> 00:05:36,530
this but most of it's over buboes most

120
00:05:33,770 --> 00:05:38,510
of its flower flowering you will see a

121
00:05:36,530 --> 00:05:41,960
few inconsistencies and that's about

122
00:05:38,510 --> 00:05:44,690
displaying things for example one of

123
00:05:41,960 --> 00:05:46,930
referencing net assemblies I'm dropping

124
00:05:44,690 --> 00:05:50,120
the system prefix cuz that's not

125
00:05:46,930 --> 00:05:52,250
necessary we can get in that later and I

126
00:05:50,120 --> 00:05:54,919
definitely matter you will see lines

127
00:05:52,250 --> 00:05:56,900
some I've tried to be good about it wear

128
00:05:54,919 --> 00:05:59,030
something spans multiple lines and you

129
00:05:56,900 --> 00:06:01,159
do have to do lion continuations I have

130
00:05:59,030 --> 00:06:03,770
put those in there but just be careful

131
00:06:01,159 --> 00:06:09,010
that this is formatted for you to look

132
00:06:03,770 --> 00:06:10,849
at right here not to run Plus like

133
00:06:09,010 --> 00:06:12,650
PowerPoint there's all kinds of weird

134
00:06:10,849 --> 00:06:14,719
smartcoach quotes things it's not gonna

135
00:06:12,650 --> 00:06:17,690
work anyway anyway so let's get to

136
00:06:14,720 --> 00:06:18,650
implants let's write some stuff let's

137
00:06:17,690 --> 00:06:23,300
get going we're gonna start with a

138
00:06:18,650 --> 00:06:26,929
downloader pretty basic operation here

139
00:06:23,300 --> 00:06:30,830
download stuff execute it right simple

140
00:06:26,930 --> 00:06:33,919
workflow so let us have a look you've

141
00:06:30,830 --> 00:06:39,229
all undoubtedly seen some variation of

142
00:06:33,919 --> 00:06:40,549
this code I hope very simple we do have

143
00:06:39,229 --> 00:06:44,750
a laser pointer here

144
00:06:40,550 --> 00:06:47,000
there we go very simple built-in both in

145
00:06:44,750 --> 00:06:49,190
command and voc expression runs code

146
00:06:47,000 --> 00:06:51,470
from a string not hard

147
00:06:49,190 --> 00:06:54,289
we have invoked web request which is

148
00:06:51,470 --> 00:06:57,050
also cool download stuff for us super

149
00:06:54,289 --> 00:06:59,990
easy we're gonna throw that out we're

150
00:06:57,050 --> 00:07:02,659
gonna pull a property out of the of the

151
00:06:59,990 --> 00:07:05,930
object we get back this PowerShell is

152
00:07:02,659 --> 00:07:07,909
object based not text base that's the

153
00:07:05,930 --> 00:07:12,740
content and we're gonna run it it's

154
00:07:07,909 --> 00:07:14,780
pretty simple so this is the same thing

155
00:07:12,740 --> 00:07:16,490
you've probably seen this actually

156
00:07:14,780 --> 00:07:19,309
rather than the first one this is the

157
00:07:16,490 --> 00:07:21,380
exact same thing using shortcuts using

158
00:07:19,310 --> 00:07:25,069
powershell aliases that are built built

159
00:07:21,380 --> 00:07:28,639
in this is the IE x thing you're gonna

160
00:07:25,069 --> 00:07:31,310
see all over the place the drawback of

161
00:07:28,639 --> 00:07:33,319
course with this is somebody might be

162
00:07:31,310 --> 00:07:36,080
sneaky and they might not like it hacked

163
00:07:33,319 --> 00:07:38,930
so they might I don't know

164
00:07:36,080 --> 00:07:41,359
remove these aliases from PowerShell and

165
00:07:38,930 --> 00:07:42,830
their profile and your hot code doesn't

166
00:07:41,360 --> 00:07:45,770
work so use ie X instead of invoke

167
00:07:42,830 --> 00:07:47,150
expression general generally with

168
00:07:45,770 --> 00:07:49,008
PowerShell if you're at the command line

169
00:07:47,150 --> 00:07:52,370
go ahead and use shortcuts if you're

170
00:07:49,009 --> 00:07:54,530
writing code do not use if you pull

171
00:07:52,370 --> 00:07:57,849
everything full command names full

172
00:07:54,530 --> 00:07:59,539
parameter names just do it be clean

173
00:07:57,849 --> 00:08:02,509
hopefully we can be on the same page

174
00:07:59,539 --> 00:08:05,110
about that this is the better version

175
00:08:02,509 --> 00:08:07,699
you've probably also seen this as well

176
00:08:05,110 --> 00:08:09,009
we're mixing PowerShell and dotnet and

177
00:08:07,699 --> 00:08:12,349
this is we're gonna do for the rest of

178
00:08:09,009 --> 00:08:14,630
everything else we're still using invoke

179
00:08:12,349 --> 00:08:17,090
expression here at least by its alias to

180
00:08:14,630 --> 00:08:18,500
execute code from a stream but we're

181
00:08:17,090 --> 00:08:21,739
calling the new object commandment goes

182
00:08:18,500 --> 00:08:24,159
into PowerShell instantiating a dotnet

183
00:08:21,740 --> 00:08:27,440
object the net a system net web client

184
00:08:24,159 --> 00:08:31,250
downloading a string executing awesome

185
00:08:27,440 --> 00:08:33,610
this is like every POC you've seen is

186
00:08:31,250 --> 00:08:36,559
probably this the reason to do this is

187
00:08:33,610 --> 00:08:39,950
PowerShell version compatibility this

188
00:08:36,559 --> 00:08:42,739
works in 2.0 a invoke web expression

189
00:08:39,950 --> 00:08:46,520
does not exist into PowerShell 3 do you

190
00:08:42,740 --> 00:08:48,230
care maybe I mean how many of you guys

191
00:08:46,520 --> 00:08:52,310
have seen Windows 2008 box is still

192
00:08:48,230 --> 00:08:54,240
running around yeah oh wait r2 came the

193
00:08:52,310 --> 00:08:57,060
PowerShell to

194
00:08:54,240 --> 00:08:59,370
maybe people didn't upgrade focus on

195
00:08:57,060 --> 00:09:02,849
compatibility it's very important so

196
00:08:59,370 --> 00:09:04,470
that was that's super basic are we on

197
00:09:02,850 --> 00:09:05,330
the same page with everything guys we're

198
00:09:04,470 --> 00:09:08,250
cool

199
00:09:05,330 --> 00:09:09,780
alright I think so

200
00:09:08,250 --> 00:09:12,360
I can't click on the thing this is

201
00:09:09,780 --> 00:09:22,829
tragic it doesn't like it

202
00:09:12,360 --> 00:09:24,660
I invoke web request doesn't work in 2.0

203
00:09:22,830 --> 00:09:27,300
so you can use ie X but you have to use

204
00:09:24,660 --> 00:09:30,540
that system that web client to download

205
00:09:27,300 --> 00:09:33,329
instead of voc expression so we're gonna

206
00:09:30,540 --> 00:09:39,240
mix PowerShell net hopefully pretty

207
00:09:33,330 --> 00:09:41,270
seamlessly so that was easy let's look

208
00:09:39,240 --> 00:09:43,080
at a bind show slightly more complicated

209
00:09:41,270 --> 00:09:44,850
we're gonna do the same things are gonna

210
00:09:43,080 --> 00:09:46,350
mix PowerShell and we're gonna make

211
00:09:44,850 --> 00:09:48,900
something it there a couple of other

212
00:09:46,350 --> 00:09:51,560
things that we need to be aware of when

213
00:09:48,900 --> 00:09:54,569
we up our complication game a little bit

214
00:09:51,560 --> 00:09:56,699
pretty basic functionality we're gonna

215
00:09:54,570 --> 00:09:59,130
hang out on the network wait for someone

216
00:09:56,700 --> 00:10:03,930
to connect eat their data run it super

217
00:09:59,130 --> 00:10:05,730
simple right so we get to start it by

218
00:10:03,930 --> 00:10:07,709
jumping right into sockets programming

219
00:10:05,730 --> 00:10:12,060
who loves sockets programming

220
00:10:07,710 --> 00:10:13,350
I love sockets programming okay man

221
00:10:12,060 --> 00:10:15,150
PowerShell you do all the stuff

222
00:10:13,350 --> 00:10:17,850
automatically for me it's magic like

223
00:10:15,150 --> 00:10:19,230
yeah we can download what pages there's

224
00:10:17,850 --> 00:10:23,280
some stuff you can do you can do uploads

225
00:10:19,230 --> 00:10:24,960
but a lot of stuff do by hand if you

226
00:10:23,280 --> 00:10:29,939
need a socket make a socket we do this

227
00:10:24,960 --> 00:10:34,440
with dotnet not particularly hard we're

228
00:10:29,940 --> 00:10:36,780
just using the PowerShell new objects

229
00:10:34,440 --> 00:10:39,600
command lit to instantiate a dotnet

230
00:10:36,780 --> 00:10:42,030
object and we're gonna start messing

231
00:10:39,600 --> 00:10:44,420
with stuff very atypical sockets

232
00:10:42,030 --> 00:10:46,220
programming it's very easy in dotnet

233
00:10:44,420 --> 00:10:48,290
creating an endpoint

234
00:10:46,220 --> 00:10:51,330
creating a listener on that endpoint

235
00:10:48,290 --> 00:10:53,160
starting the listener there's some magic

236
00:10:51,330 --> 00:10:55,020
with some stuff here right in the middle

237
00:10:53,160 --> 00:10:57,270
with but then we want to close at the

238
00:10:55,020 --> 00:10:58,680
end just because you're writing things

239
00:10:57,270 --> 00:11:00,750
that you're gonna shove off on someone

240
00:10:58,680 --> 00:11:02,010
else's box to mess with them doesn't

241
00:11:00,750 --> 00:11:05,190
mean you shouldn't fall good programming

242
00:11:02,010 --> 00:11:08,339
practices close your sockets

243
00:11:05,190 --> 00:11:09,360
really throw you throw malware you throw

244
00:11:08,339 --> 00:11:11,279
something at somebody's box and the

245
00:11:09,360 --> 00:11:14,940
expected to be long-lived what happens

246
00:11:11,279 --> 00:11:18,120
to crashes yeah do a good job where'd

247
00:11:14,940 --> 00:11:20,250
you go correctly well that's basic

248
00:11:18,120 --> 00:11:21,569
framework there after we do that we'll

249
00:11:20,250 --> 00:11:23,310
live for a connection because that's

250
00:11:21,569 --> 00:11:26,878
that's blocking and you don't need to

251
00:11:23,310 --> 00:11:28,949
get into it but that the the listen the

252
00:11:26,879 --> 00:11:31,290
listener start will wait until we have a

253
00:11:28,949 --> 00:11:33,120
connection established no execution will

254
00:11:31,290 --> 00:11:35,129
happen until that until that connection

255
00:11:33,120 --> 00:11:36,410
happens once it does we can move on so

256
00:11:35,129 --> 00:11:39,660
we don't have to worry about paneling

257
00:11:36,410 --> 00:11:41,040
events will go on inside of that area

258
00:11:39,660 --> 00:11:44,129
where I said stuffy's in the previous

259
00:11:41,040 --> 00:11:46,379
slide will do a couple of things we'll

260
00:11:44,129 --> 00:11:48,360
do a little forever loop here to start

261
00:11:46,379 --> 00:11:54,300
start off with our process we're going

262
00:11:48,360 --> 00:11:55,980
to accept the connection what this does

263
00:11:54,300 --> 00:11:58,410
is if you're at all familiar with

264
00:11:55,980 --> 00:11:59,579
sockets programming if you wondered why

265
00:11:58,410 --> 00:12:01,319
you can have a website we're listening

266
00:11:59,579 --> 00:12:03,060
on port 80 and like a thousand people

267
00:12:01,319 --> 00:12:04,439
can connect to it you have a listening

268
00:12:03,060 --> 00:12:06,810
socket you actually accept that

269
00:12:04,439 --> 00:12:08,430
connection on a different socket that's

270
00:12:06,810 --> 00:12:09,630
what this will do what listener accept

271
00:12:08,430 --> 00:12:11,910
ECB client will do is will give you a

272
00:12:09,630 --> 00:12:16,230
new socket separately you can go ahead

273
00:12:11,910 --> 00:12:18,719
and enjoy that guy and of course

274
00:12:16,230 --> 00:12:21,769
close it when you're done let's go

275
00:12:18,720 --> 00:12:25,740
deeper another level into our loops and

276
00:12:21,769 --> 00:12:27,959
then buffers showed up and you're

277
00:12:25,740 --> 00:12:30,149
probably thinking earlier a.k powershell

278
00:12:27,959 --> 00:12:32,819
magical you know dotnet there's all this

279
00:12:30,149 --> 00:12:35,819
really cool tight unsafe stuff we don't

280
00:12:32,819 --> 00:12:37,920
care about you wouldn't think you'd have

281
00:12:35,819 --> 00:12:39,810
to manage buffers but you totally do

282
00:12:37,920 --> 00:12:42,290
we're doing so if it's not necessarily

283
00:12:39,810 --> 00:12:44,910
PowerShell native we have access to it

284
00:12:42,290 --> 00:12:47,069
but it requires a little bit more

285
00:12:44,910 --> 00:12:49,649
programming so we're going to do that

286
00:12:47,069 --> 00:12:51,479
here with some buffers we're gonna need

287
00:12:49,649 --> 00:12:56,309
to create a buffer to hold data we're

288
00:12:51,480 --> 00:12:58,500
gonna read off the network types are

289
00:12:56,309 --> 00:13:01,309
super important when you're dealing with

290
00:12:58,500 --> 00:13:03,660
underlying gotten in objects PowerShell

291
00:13:01,309 --> 00:13:05,069
doesn't really care you can throw

292
00:13:03,660 --> 00:13:07,819
anything whatever variable it'll try and

293
00:13:05,069 --> 00:13:09,660
figure out the best it can no big deal

294
00:13:07,819 --> 00:13:12,209
we're talking to things beneath

295
00:13:09,660 --> 00:13:15,209
PowerShell now so we have to be specific

296
00:13:12,209 --> 00:13:18,219
we need a buffer we understand seeing

297
00:13:15,209 --> 00:13:20,859
that buffer by declaring a

298
00:13:18,220 --> 00:13:24,370
variable read buffer here that is of a

299
00:13:20,860 --> 00:13:25,450
type that is a byte array right super

300
00:13:24,370 --> 00:13:27,310
easy

301
00:13:25,450 --> 00:13:30,190
we're losing we're using the PowerShell

302
00:13:27,310 --> 00:13:32,199
magic to save some time we don't have to

303
00:13:30,190 --> 00:13:34,930
do any weird system calls don't do any

304
00:13:32,200 --> 00:13:37,630
any Malick's or calyx whatever we're

305
00:13:34,930 --> 00:13:40,780
just going to iterate over the numbers 0

306
00:13:37,630 --> 00:13:44,200
to 1024 because I'm heathen and I want

307
00:13:40,780 --> 00:13:48,250
to use 1025 bytes instead of 1 to 1024

308
00:13:44,200 --> 00:13:50,530
kids yeah even we're pipelining through

309
00:13:48,250 --> 00:13:53,320
in PowerShell somewhere to bash right

310
00:13:50,530 --> 00:13:54,910
pipeline and we're gonna execute a block

311
00:13:53,320 --> 00:13:56,830
of code for each object when we come in

312
00:13:54,910 --> 00:13:58,810
so we're gonna get the numbers year

313
00:13:56,830 --> 00:14:00,400
through 1024 we're gonna completely

314
00:13:58,810 --> 00:14:03,189
ignore them we're just going to execute

315
00:14:00,400 --> 00:14:09,730
code it's going to write a 0 back out we

316
00:14:03,190 --> 00:14:12,880
are essentially instantiating a a 1k 0

317
00:14:09,730 --> 00:14:16,380
initial 0 initialized buffer initialize

318
00:14:12,880 --> 00:14:17,800
your memory I know this is not see I

319
00:14:16,380 --> 00:14:21,300
don't care

320
00:14:17,800 --> 00:14:21,300
initialize your memory just do it

321
00:14:21,360 --> 00:14:28,390
command buffer TCP TCP stream accept all

322
00:14:26,200 --> 00:14:29,590
basic sockets up if you guys are writing

323
00:14:28,390 --> 00:14:32,319
stuff down don't worry about it because

324
00:14:29,590 --> 00:14:34,000
the codes published because I hope my

325
00:14:32,320 --> 00:14:37,270
numbers wrong I was a Mississippi code

326
00:14:34,000 --> 00:14:40,710
to publish it like exactly 450 and I

327
00:14:37,270 --> 00:14:43,720
can't do math so it published it 250

328
00:14:40,710 --> 00:14:44,500
does everything whatever it's up there

329
00:14:43,720 --> 00:14:46,600
don't worry about it

330
00:14:44,500 --> 00:14:47,740
you don't have to remember any of this I

331
00:14:46,600 --> 00:14:52,990
don't expect you to remember this from

332
00:14:47,740 --> 00:14:55,330
the slides it's it's crazy reading from

333
00:14:52,990 --> 00:14:57,130
our buffers appending to a command

334
00:14:55,330 --> 00:14:59,440
buffer and there's another important

335
00:14:57,130 --> 00:15:01,740
thing on this slide the Society's is for

336
00:14:59,440 --> 00:15:04,930
two reasons ones the buffer the other is

337
00:15:01,740 --> 00:15:07,830
text encoding you can see down here

338
00:15:04,930 --> 00:15:12,489
we've got text encoding we're calling a

339
00:15:07,830 --> 00:15:14,830
static some static methods on a.net

340
00:15:12,490 --> 00:15:17,980
object and we're converting from our

341
00:15:14,830 --> 00:15:19,930
input buffer into a string as he gets

342
00:15:17,980 --> 00:15:22,030
string makes sense right we think we've

343
00:15:19,930 --> 00:15:25,479
got some ASCII bytes we're gonna convert

344
00:15:22,030 --> 00:15:28,720
that to a string it's kind of important

345
00:15:25,480 --> 00:15:32,290
because dotnet internally uses either

346
00:15:28,720 --> 00:15:35,290
UCS to utf-16

347
00:15:32,290 --> 00:15:38,290
it might otherwise be expecting that you

348
00:15:35,290 --> 00:15:39,670
have to bite long characters so when

349
00:15:38,290 --> 00:15:40,689
you're not dealing with that either way

350
00:15:39,670 --> 00:15:42,310
when you're dealing with bites you know

351
00:15:40,690 --> 00:15:47,860
with characters you need to be specific

352
00:15:42,310 --> 00:15:49,599
I am specifically saying gimme yeah this

353
00:15:47,860 --> 00:15:52,320
is an ass this is these are ASCII bytes

354
00:15:49,600 --> 00:15:58,330
give me a dotnet string which is

355
00:15:52,320 --> 00:16:00,070
powershell string not too bad a little

356
00:15:58,330 --> 00:16:02,620
bit more stuff we're going to keep

357
00:16:00,070 --> 00:16:04,270
adding to our buffer will read will read

358
00:16:02,620 --> 00:16:05,680
back the last character of the buffer if

359
00:16:04,270 --> 00:16:09,520
it's a new line we'll go ahead and

360
00:16:05,680 --> 00:16:13,630
execute everything in it very simple a

361
00:16:09,520 --> 00:16:15,730
lot of the code you'll see out there for

362
00:16:13,630 --> 00:16:17,770
find shells there's something really

363
00:16:15,730 --> 00:16:20,530
stupid it reads from the buffer and

364
00:16:17,770 --> 00:16:22,270
excuse every time so that's cool if

365
00:16:20,530 --> 00:16:24,579
you're just gonna like netcat a payload

366
00:16:22,270 --> 00:16:26,230
in but if you want interactive access it

367
00:16:24,580 --> 00:16:29,380
doesn't work you sit there and you type

368
00:16:26,230 --> 00:16:32,920
I want to do like get process and take G

369
00:16:29,380 --> 00:16:37,990
and then the shell receives G and

370
00:16:32,920 --> 00:16:39,939
execute it what's gonna happen nothing

371
00:16:37,990 --> 00:16:43,030
be careful about your input your input

372
00:16:39,940 --> 00:16:44,140
control some kind of trigger to know

373
00:16:43,030 --> 00:16:48,040
that you need to execute like your last

374
00:16:44,140 --> 00:16:49,720
last character was a newline makes sense

375
00:16:48,040 --> 00:16:51,670
we're gonna use an evoke expression

376
00:16:49,720 --> 00:16:54,310
again like we saw on the first the first

377
00:16:51,670 --> 00:16:57,339
guy there to execute was that whatever's

378
00:16:54,310 --> 00:16:59,349
in a command buffer just like bash we're

379
00:16:57,340 --> 00:17:01,270
gonna redirect Oliver at our output

380
00:16:59,350 --> 00:17:03,580
we're gonna rick redirect standard error

381
00:17:01,270 --> 00:17:05,230
to standard in that's what this to

382
00:17:03,580 --> 00:17:06,280
greater than ampersand one thing is I

383
00:17:05,230 --> 00:17:09,790
really hope you guys know your bash

384
00:17:06,280 --> 00:17:12,329
programming and it's out string is

385
00:17:09,790 --> 00:17:16,629
critically important

386
00:17:12,329 --> 00:17:20,349
PowerShell being object based will

387
00:17:16,630 --> 00:17:23,400
return objects that may be what you want

388
00:17:20,349 --> 00:17:26,409
it may not be what you want PowerShell

389
00:17:23,400 --> 00:17:29,710
display on the console is controlled by

390
00:17:26,410 --> 00:17:31,330
types they are mostly preset

391
00:17:29,710 --> 00:17:33,340
pre-installed when you have an object

392
00:17:31,330 --> 00:17:35,500
coming out to the console PowerShell

393
00:17:33,340 --> 00:17:37,600
figures out how to display that that's

394
00:17:35,500 --> 00:17:39,670
selecting which properties show up how

395
00:17:37,600 --> 00:17:41,590
we format them whatever format things as

396
00:17:39,670 --> 00:17:43,450
list strings you can customize all this

397
00:17:41,590 --> 00:17:44,959
but by default PowerShell is not going

398
00:17:43,450 --> 00:17:47,330
to necessarily give you

399
00:17:44,960 --> 00:17:48,980
you know it'll give you an object and

400
00:17:47,330 --> 00:17:51,740
it'll kind of figure out how to display

401
00:17:48,980 --> 00:17:54,380
that however if you're doing this

402
00:17:51,740 --> 00:17:57,529
remotely over a socket that's not gonna

403
00:17:54,380 --> 00:17:59,840
work you need to convert whatever you

404
00:17:57,529 --> 00:18:02,630
have on your output to some nice text

405
00:17:59,840 --> 00:18:05,480
data so we can convert that just bytes

406
00:18:02,630 --> 00:18:09,679
and we can send that back out over our

407
00:18:05,480 --> 00:18:13,580
socket and close it reset our buffer so

408
00:18:09,679 --> 00:18:18,770
a little bit more there look weird

409
00:18:13,580 --> 00:18:21,470
I'm not buffer is not net stuff are we

410
00:18:18,770 --> 00:18:22,970
cool on that yeah we're gonna get some

411
00:18:21,470 --> 00:18:25,750
weird stuff now that wasn't the weird

412
00:18:22,970 --> 00:18:27,710
stuff we're about to get weird stuff

413
00:18:25,750 --> 00:18:30,740
basic things to take away from this

414
00:18:27,710 --> 00:18:31,820
before we into the weird stuff is this

415
00:18:30,740 --> 00:18:34,309
pattern you're gonna see over and over

416
00:18:31,820 --> 00:18:35,418
again we're gonna see PowerShell because

417
00:18:34,309 --> 00:18:38,620
it's convenient because we can rapidly

418
00:18:35,419 --> 00:18:42,740
iterate we're to see PowerShell for

419
00:18:38,620 --> 00:18:46,510
control flow control flow for logic for

420
00:18:42,740 --> 00:18:49,029
behavior and then we'll talk to dotnet

421
00:18:46,510 --> 00:18:51,860
when we need to do the heavy lifting

422
00:18:49,029 --> 00:18:54,980
there are lots of reasons for that

423
00:18:51,860 --> 00:18:57,168
it's IO is faster when you bypass some

424
00:18:54,980 --> 00:18:59,120
of the powershell commandlets things

425
00:18:57,169 --> 00:19:02,450
might just not be available in

426
00:18:59,120 --> 00:19:07,899
PowerShell but nuts there we have in

427
00:19:02,450 --> 00:19:07,899
most cases full access to it so go nuts

428
00:19:10,840 --> 00:19:19,189
now we look at a little data scraper is

429
00:19:14,720 --> 00:19:24,020
where things get a little crazy I'll

430
00:19:19,190 --> 00:19:28,789
just do it so it's really easy to grab

431
00:19:24,020 --> 00:19:32,929
and exfiltrated data from a shop you

432
00:19:28,789 --> 00:19:37,429
might see something like this for

433
00:19:32,929 --> 00:19:43,370
various bash scripts actually we execute

434
00:19:37,429 --> 00:19:46,490
a command here capture data and then we

435
00:19:43,370 --> 00:19:49,129
can push that data back out to a server

436
00:19:46,490 --> 00:19:50,510
that we control invoke web requests can

437
00:19:49,130 --> 00:19:53,960
be used to download but it can also be

438
00:19:50,510 --> 00:19:56,270
used to upload pretty simple you just

439
00:19:53,960 --> 00:19:58,890
say post here's your post body no big

440
00:19:56,270 --> 00:20:00,639
deal so in one line

441
00:19:58,890 --> 00:20:04,870
normally it'll be one line especially

442
00:20:00,640 --> 00:20:07,590
few shortcuts we can grab grab some data

443
00:20:04,870 --> 00:20:11,350
send it out excellent rate super easy

444
00:20:07,590 --> 00:20:14,399
who will remember zone alarm there's no

445
00:20:11,350 --> 00:20:16,600
alarm yeah I feel sorry for all of you I

446
00:20:14,400 --> 00:20:20,590
switch to black eyes to figure because I

447
00:20:16,600 --> 00:20:21,520
was a cool kid and it sounded cooler so

448
00:20:20,590 --> 00:20:24,939
if you're if you're poking around your

449
00:20:21,520 --> 00:20:27,070
network and you're like for hunting and

450
00:20:24,940 --> 00:20:29,290
you see a power shell process

451
00:20:27,070 --> 00:20:30,850
connecting to like a bunch of servers

452
00:20:29,290 --> 00:20:33,010
around the internet is that gonna look

453
00:20:30,850 --> 00:20:36,399
suspicious to you let's go a little

454
00:20:33,010 --> 00:20:39,160
suspicious to me so maybe we don't want

455
00:20:36,400 --> 00:20:41,190
to use PowerShell to move data maybe we

456
00:20:39,160 --> 00:20:44,020
should use something else

457
00:20:41,190 --> 00:20:45,550
one thing people often overlook is the

458
00:20:44,020 --> 00:20:49,629
Mac the Microsoft background intelligent

459
00:20:45,550 --> 00:20:52,389
transfer service that service does

460
00:20:49,630 --> 00:20:54,040
things like download Windows updates but

461
00:20:52,390 --> 00:20:57,340
it also does the Windows Error reporting

462
00:20:54,040 --> 00:20:59,500
uploads it's there it's on every Windows

463
00:20:57,340 --> 00:21:00,570
box yes you can disable it they'll

464
00:20:59,500 --> 00:21:03,520
probably have some headaches if you do

465
00:21:00,570 --> 00:21:06,100
but to be less suspicious when we're

466
00:21:03,520 --> 00:21:07,300
exfiltrating data we can just use a

467
00:21:06,100 --> 00:21:10,600
background intelligent transfer service

468
00:21:07,300 --> 00:21:12,100
it's available over comm or power so

469
00:21:10,600 --> 00:21:15,159
just gives us a couple commands it's

470
00:21:12,100 --> 00:21:17,530
really really easy to take data from a

471
00:21:15,160 --> 00:21:21,040
file take a file and upload it to

472
00:21:17,530 --> 00:21:23,050
whatever we want drawback is that it

473
00:21:21,040 --> 00:21:25,629
transfers files so you have to actually

474
00:21:23,050 --> 00:21:27,940
write a file to disk which might make

475
00:21:25,630 --> 00:21:31,060
you show up but on the plus side

476
00:21:27,940 --> 00:21:32,710
something that's probably already got

477
00:21:31,060 --> 00:21:35,110
firewall exceptions too if you're

478
00:21:32,710 --> 00:21:36,850
reading a host-based stuff is what

479
00:21:35,110 --> 00:21:39,699
you're using for ducts exfiltrate bits

480
00:21:36,850 --> 00:21:41,399
on bitch moving data on the network not

481
00:21:39,700 --> 00:21:44,160
suspicious that's what we want to use it

482
00:21:41,400 --> 00:21:47,110
if you want to use bits for uploading

483
00:21:44,160 --> 00:21:49,330
you know go-to was your grab Windows

484
00:21:47,110 --> 00:21:52,689
server with is install the bitch stuff

485
00:21:49,330 --> 00:21:59,290
on it it's not hard or maybe you use

486
00:21:52,690 --> 00:22:02,080
like PHP it's PHP so come on maybe use a

487
00:21:59,290 --> 00:22:04,780
little PHP handler to handle your bits

488
00:22:02,080 --> 00:22:07,120
upload and maybe someone because they

489
00:22:04,780 --> 00:22:09,220
loved you wrote one earlier this week

490
00:22:07,120 --> 00:22:11,469
and we'll make it available so you can

491
00:22:09,220 --> 00:22:14,260
just so this becomes as easy

492
00:22:11,470 --> 00:22:16,120
this one I will totally do that for you

493
00:22:14,260 --> 00:22:17,980
I don't love you that much kind of a

494
00:22:16,120 --> 00:22:21,039
love-hate thing because it is PHP and

495
00:22:17,980 --> 00:22:23,950
this code could absolutely be used at

496
00:22:21,039 --> 00:22:25,390
Oscar box but yeah whatever goal were to

497
00:22:23,950 --> 00:22:27,159
write yourself if you want to make a

498
00:22:25,390 --> 00:22:29,169
decent but at least it's out there

499
00:22:27,159 --> 00:22:32,950
another option is to use Internet

500
00:22:29,169 --> 00:22:34,770
Explorer now on my systems very unusual

501
00:22:32,950 --> 00:22:39,370
to have Internet Explorer doing anything

502
00:22:34,770 --> 00:22:41,400
but if it's available if it's in use we

503
00:22:39,370 --> 00:22:44,799
can use Internet Explorer to upload data

504
00:22:41,400 --> 00:22:47,380
from PowerShell we do that by

505
00:22:44,799 --> 00:22:50,320
instantiating a comm object-- internet's

506
00:22:47,380 --> 00:22:52,659
florida application it's made also like

507
00:22:50,320 --> 00:22:54,850
most of the Microsoft Office apps are

508
00:22:52,659 --> 00:22:58,090
there that are totally available we can

509
00:22:54,850 --> 00:23:01,809
grab an instance of ie in the background

510
00:22:58,090 --> 00:23:04,990
and have it you work for us this is

511
00:23:01,809 --> 00:23:08,049
really convenient if I use something

512
00:23:04,990 --> 00:23:10,809
they can talk on the network except for

513
00:23:08,049 --> 00:23:13,059
if you'd never use IE and you know a

514
00:23:10,809 --> 00:23:14,440
little annoying pop-up it's just hey you

515
00:23:13,059 --> 00:23:16,658
should enable all the stuff that let's

516
00:23:14,440 --> 00:23:19,270
just track you or do you want to

517
00:23:16,659 --> 00:23:22,450
customize settings this will actually

518
00:23:19,270 --> 00:23:25,090
make that pop up so

519
00:23:22,450 --> 00:23:26,590
yeah yeah so make sure that's set first

520
00:23:25,090 --> 00:23:28,449
before you go using this like write

521
00:23:26,590 --> 00:23:30,220
something to the registry and otherwise

522
00:23:28,450 --> 00:23:32,980
it's pretty simple it's it's similar to

523
00:23:30,220 --> 00:23:35,470
bits upload or invoke web request we can

524
00:23:32,980 --> 00:23:37,840
give it a target URL in this case we've

525
00:23:35,470 --> 00:23:39,460
you have to provide bytes one of them is

526
00:23:37,840 --> 00:23:42,428
strings it won't convert for us but we

527
00:23:39,460 --> 00:23:43,960
can provide some bytes upload and now

528
00:23:42,429 --> 00:23:45,970
they have Internet Explorer uploading

529
00:23:43,960 --> 00:23:48,190
data out of the network for us rather

530
00:23:45,970 --> 00:23:50,220
than PowerShell slightly less suspicious

531
00:23:48,190 --> 00:23:53,919
if you're looking at the box

532
00:23:50,220 --> 00:23:57,789
so options for upload I'm going to get

533
00:23:53,919 --> 00:24:02,619
back to grabbing some data another thing

534
00:23:57,789 --> 00:24:05,859
you may see is crawling through the

535
00:24:02,619 --> 00:24:09,100
machine looking for items of interest

536
00:24:05,859 --> 00:24:10,299
like your putty sessions if you have

537
00:24:09,100 --> 00:24:13,658
putty installed and you've saved

538
00:24:10,299 --> 00:24:18,220
sessions we can pull those save sessions

539
00:24:13,659 --> 00:24:21,789
and figs out of the registry why do we

540
00:24:18,220 --> 00:24:25,419
want to do that because if you have a

541
00:24:21,789 --> 00:24:27,009
public key specified that will point us

542
00:24:25,419 --> 00:24:30,100
right to it

543
00:24:27,009 --> 00:24:32,470
thrashing a disk walking through the

544
00:24:30,100 --> 00:24:35,519
entire C Drive entire user profiles look

545
00:24:32,470 --> 00:24:38,409
for data that you want to exfiltrate is

546
00:24:35,519 --> 00:24:39,940
definitely something you can do but if

547
00:24:38,409 --> 00:24:42,429
someone that clicks on a link in a

548
00:24:39,940 --> 00:24:44,019
website those are their hard drives here

549
00:24:42,429 --> 00:24:47,109
it's grinding even though you know we're

550
00:24:44,019 --> 00:24:50,769
getting all SSD down like suspicious

551
00:24:47,109 --> 00:24:53,820
right so maybe we don't do that maybe we

552
00:24:50,769 --> 00:24:56,649
look for pointers to the data we want

553
00:24:53,820 --> 00:24:57,730
same pattern hasn't been saying we use

554
00:24:56,649 --> 00:25:03,219
PowerShell

555
00:24:57,730 --> 00:25:04,840
to grab data we're piping through them

556
00:25:03,220 --> 00:25:06,519
through the pipeline here to kind of get

557
00:25:04,840 --> 00:25:08,619
everything in a nice format for us

558
00:25:06,519 --> 00:25:11,289
if you select objects here with the

559
00:25:08,619 --> 00:25:13,600
unique flag so we wind up with a a list

560
00:25:11,289 --> 00:25:16,389
of unique keys if you have a hundred

561
00:25:13,600 --> 00:25:19,809
save sessions that use three keys we'll

562
00:25:16,389 --> 00:25:21,100
wind up with three keys in our list and

563
00:25:19,809 --> 00:25:28,739
then we'll do something to each of those

564
00:25:21,100 --> 00:25:34,459
keys let's get weird dotnet has fun io

565
00:25:28,739 --> 00:25:35,750
stream API we want to use these

566
00:25:34,460 --> 00:25:40,070
if possible because it allows us to

567
00:25:35,750 --> 00:25:41,960
manipulate data as we're doing things to

568
00:25:40,070 --> 00:25:44,720
it we can establish a pipeline for that

569
00:25:41,960 --> 00:25:50,390
data like commands in power shell or

570
00:25:44,720 --> 00:25:52,670
bash and it's faster a lot of the power

571
00:25:50,390 --> 00:25:55,400
shell generally empower so you use get

572
00:25:52,670 --> 00:25:57,950
content set content commandlets to read

573
00:25:55,400 --> 00:26:00,410
and write data between files it can be a

574
00:25:57,950 --> 00:26:03,380
little bit faster if you give the read

575
00:26:00,410 --> 00:26:06,170
conte the the get content command the

576
00:26:03,380 --> 00:26:08,450
raw parameter it won't do any magic on

577
00:26:06,170 --> 00:26:09,950
it but I still want the fastest option

578
00:26:08,450 --> 00:26:12,110
if you have lots of data you have big

579
00:26:09,950 --> 00:26:17,120
chunks of data you want to keep your

580
00:26:12,110 --> 00:26:21,919
memory utilization low use dot IO

581
00:26:17,120 --> 00:26:24,590
streams super easy what we do here is

582
00:26:21,920 --> 00:26:29,300
set up a bucket to hold some compressed

583
00:26:24,590 --> 00:26:33,080
data we then set up another member of

584
00:26:29,300 --> 00:26:37,490
our stream here a gzipstream for

585
00:26:33,080 --> 00:26:39,129
compression this targets the memory the

586
00:26:37,490 --> 00:26:45,080
memory bucket we made earlier and

587
00:26:39,130 --> 00:26:49,820
finally we grab a file stream that's

588
00:26:45,080 --> 00:26:51,980
targeting our key basic file IO once we

589
00:26:49,820 --> 00:26:53,419
have this path set up it doesn't matter

590
00:26:51,980 --> 00:26:54,950
in this case that the putty keys are

591
00:26:53,420 --> 00:26:58,310
very small it's not really a big deal if

592
00:26:54,950 --> 00:27:00,320
you have a large chunks of data this is

593
00:26:58,310 --> 00:27:02,389
really nice because we don't have to

594
00:27:00,320 --> 00:27:04,540
manage reading and writing and buffers

595
00:27:02,390 --> 00:27:07,490
if we're over the network doesn't matter

596
00:27:04,540 --> 00:27:10,580
we can just tell the file stream to copy

597
00:27:07,490 --> 00:27:13,970
to our gzipstream those bytes get read

598
00:27:10,580 --> 00:27:17,449
they go in they get pushed through that

599
00:27:13,970 --> 00:27:20,360
kind of pipeline of of i/o streams we've

600
00:27:17,450 --> 00:27:24,790
created and closed them up at the end

601
00:27:20,360 --> 00:27:29,479
and the result is a bucket in memory of

602
00:27:24,790 --> 00:27:32,450
compressed compressed data from there

603
00:27:29,480 --> 00:27:35,150
very simple convert that compress data

604
00:27:32,450 --> 00:27:37,880
to an array because this command expects

605
00:27:35,150 --> 00:27:40,070
that we convert that array of bytes to a

606
00:27:37,880 --> 00:27:43,090
base64 stream and then we can upload a

607
00:27:40,070 --> 00:27:43,090
via any method we want

608
00:27:44,210 --> 00:27:49,590
but you tell me you know you want to do

609
00:27:47,250 --> 00:27:50,070
more than just copying files of course

610
00:27:49,590 --> 00:27:54,500
you do

611
00:27:50,070 --> 00:27:57,240
we're gonna do some weird stuff that

612
00:27:54,500 --> 00:28:01,530
like spying on the user I want to see

613
00:27:57,240 --> 00:28:03,420
for this what the user is doing what

614
00:28:01,530 --> 00:28:06,300
application they're working with and

615
00:28:03,420 --> 00:28:10,020
their power shell doesn't natively have

616
00:28:06,300 --> 00:28:11,850
this ability but this is something that

617
00:28:10,020 --> 00:28:13,830
the wind the windows API does provide

618
00:28:11,850 --> 00:28:17,010
there's a function called get foreground

619
00:28:13,830 --> 00:28:19,949
window don't worry with the details of

620
00:28:17,010 --> 00:28:22,520
windows ability programming but it will

621
00:28:19,950 --> 00:28:26,250
return a handle to whatever window is

622
00:28:22,520 --> 00:28:29,190
foremost in the the user's desktop

623
00:28:26,250 --> 00:28:31,680
session so if that's powershell chrome

624
00:28:29,190 --> 00:28:35,250
whatever it'll tell you the handle of

625
00:28:31,680 --> 00:28:38,910
the window that's up front the common

626
00:28:35,250 --> 00:28:43,530
the official way to access Windows API

627
00:28:38,910 --> 00:28:47,280
from PowerShell is with ad type don't

628
00:28:43,530 --> 00:28:50,580
use it and if you're prototyping sure

629
00:28:47,280 --> 00:28:54,030
don't actually use it outside of the lab

630
00:28:50,580 --> 00:28:57,060
and prototyping because this will if if

631
00:28:54,030 --> 00:29:00,720
you have good blue team will set off all

632
00:28:57,060 --> 00:29:02,070
kinds of flex it looks like we're doing

633
00:29:00,720 --> 00:29:04,800
this in memory it looks like we're

634
00:29:02,070 --> 00:29:07,950
providing some c-sharp and then just

635
00:29:04,800 --> 00:29:10,740
magically adding it to powershell this

636
00:29:07,950 --> 00:29:12,330
actually writes to disk in the

637
00:29:10,740 --> 00:29:14,610
background it writes temporary file

638
00:29:12,330 --> 00:29:16,169
compiles our code and then loads it in

639
00:29:14,610 --> 00:29:18,659
so if you have any nodding it's in there

640
00:29:16,170 --> 00:29:20,730
that's gonna get picked up by AV you've

641
00:29:18,660 --> 00:29:24,330
just shot yourself in the foot so don't

642
00:29:20,730 --> 00:29:26,580
use that type there is a much more

643
00:29:24,330 --> 00:29:31,860
convoluted way we can get access to

644
00:29:26,580 --> 00:29:35,939
certain windows api calls and that's

645
00:29:31,860 --> 00:29:38,100
with a little bit of reflection we don't

646
00:29:35,940 --> 00:29:39,930
have every single windows api available

647
00:29:38,100 --> 00:29:43,320
in powershell without doing some weird

648
00:29:39,930 --> 00:29:46,890
stuff but as you can imagine powershell

649
00:29:43,320 --> 00:29:49,770
being when being run on windows probably

650
00:29:46,890 --> 00:29:53,430
talks to the windows api in any case

651
00:29:49,770 --> 00:29:54,980
where powershell or some net stuff

652
00:29:53,430 --> 00:29:58,679
already has

653
00:29:54,980 --> 00:30:03,059
links to windows API functions we can

654
00:29:58,679 --> 00:30:05,429
find and use those references so getting

655
00:30:03,059 --> 00:30:06,330
getting the address of the windows to

656
00:30:05,429 --> 00:30:09,649
the foreground is something that's very

657
00:30:06,330 --> 00:30:16,309
common it just so happens to be loaded

658
00:30:09,649 --> 00:30:23,758
by PowerShell so we can find a reference

659
00:30:16,309 --> 00:30:28,350
to to the target the target I am too

660
00:30:23,759 --> 00:30:29,700
tired to the target assembly if you

661
00:30:28,350 --> 00:30:30,600
don't know that this is a Miss assembly

662
00:30:29,700 --> 00:30:34,379
doesn't matter this is tool out there

663
00:30:30,600 --> 00:30:36,029
the Microsoft scripting guy blog there's

664
00:30:34,379 --> 00:30:39,240
a little snippet of PowerShell that will

665
00:30:36,029 --> 00:30:42,269
let you give it a windows API function

666
00:30:39,240 --> 00:30:43,950
and will find it if it's imported so

667
00:30:42,269 --> 00:30:45,179
that's how I know that's in there you

668
00:30:43,950 --> 00:30:47,879
don't have to necessarily know this off

669
00:30:45,179 --> 00:30:49,649
just run the tool it's not a big deal so

670
00:30:47,879 --> 00:30:51,899
we're going to just look for a reference

671
00:30:49,649 --> 00:30:53,820
to this power this dutta net assembly

672
00:30:51,899 --> 00:30:56,070
that's loaded this happens to be for

673
00:30:53,820 --> 00:30:59,250
power show once we find it we can get a

674
00:30:56,070 --> 00:31:04,110
reference to a specific type which is an

675
00:30:59,250 --> 00:31:06,629
object inside that assembly and then we

676
00:31:04,110 --> 00:31:10,019
can grab a reference to the actual

677
00:31:06,629 --> 00:31:12,928
method declared so we don't have to

678
00:31:10,019 --> 00:31:15,659
compile any weird code on the on on the

679
00:31:12,929 --> 00:31:18,419
fly but we can still grab things that we

680
00:31:15,659 --> 00:31:20,039
weren't supposed to grab in powershell

681
00:31:18,419 --> 00:31:21,779
that's all like the really weird

682
00:31:20,039 --> 00:31:25,230
powershell stuff right how the hell did

683
00:31:21,779 --> 00:31:27,779
they do that there's no commandment fine

684
00:31:25,230 --> 00:31:28,799
wrap windows api that's what's happening

685
00:31:27,779 --> 00:31:31,139
in the background of a lot of these

686
00:31:28,799 --> 00:31:33,240
things so we can grab a reference we can

687
00:31:31,139 --> 00:31:34,500
use it we'd call it whatever we want to

688
00:31:33,240 --> 00:31:38,909
it's go a little bit differently because

689
00:31:34,500 --> 00:31:41,879
yeah it's kind of there but we can call

690
00:31:38,909 --> 00:31:46,320
whatever we want why would i want to

691
00:31:41,879 --> 00:31:50,250
find out what what window the user has

692
00:31:46,320 --> 00:31:53,428
in the foreground maybe I don't want to

693
00:31:50,250 --> 00:31:56,190
look for certain programs maybe I want

694
00:31:53,429 --> 00:31:58,350
to see what you do it what are these I

695
00:31:56,190 --> 00:32:00,670
don't know they're just random software

696
00:31:58,350 --> 00:32:03,550
I put there

697
00:32:00,670 --> 00:32:06,380
so we can combine again powershell

698
00:32:03,550 --> 00:32:08,570
dotnet windows api

699
00:32:06,380 --> 00:32:11,300
now that we've imported that function

700
00:32:08,570 --> 00:32:13,370
the the get foreground window we can

701
00:32:11,300 --> 00:32:16,250
just kind of keep track of a buffer here

702
00:32:13,370 --> 00:32:18,949
loop forever and we'll just constantly

703
00:32:16,250 --> 00:32:22,460
get the address of the foreground window

704
00:32:18,950 --> 00:32:25,160
and we can use PowerShell command that

705
00:32:22,460 --> 00:32:26,660
get processed to look for the processes

706
00:32:25,160 --> 00:32:30,380
that are running on the box

707
00:32:26,660 --> 00:32:32,720
and filter those down to processes that

708
00:32:30,380 --> 00:32:34,310
have a main window handle matching the

709
00:32:32,720 --> 00:32:36,800
handle that we got this essentially

710
00:32:34,310 --> 00:32:42,679
gives us back a reference to the process

711
00:32:36,800 --> 00:32:46,550
that is currently in the foreground if

712
00:32:42,680 --> 00:32:51,950
we find that if we have a if we have a

713
00:32:46,550 --> 00:32:54,080
match we can do some stuff all we really

714
00:32:51,950 --> 00:32:55,760
need to do is it's super easy in this

715
00:32:54,080 --> 00:32:58,520
case because power shall let you

716
00:32:55,760 --> 00:33:00,800
interact with the clipboard get the

717
00:32:58,520 --> 00:33:02,629
clipboard content if it's not like the

718
00:33:00,800 --> 00:33:05,690
last bit of clipboard content uploaded

719
00:33:02,630 --> 00:33:09,230
done so whenever you're in a browser

720
00:33:05,690 --> 00:33:10,700
I will every one second check for what

721
00:33:09,230 --> 00:33:13,430
you have in the clipboard and I will

722
00:33:10,700 --> 00:33:16,730
upload that as it comes are you pacing

723
00:33:13,430 --> 00:33:19,370
in password you pacing the URLs pacing

724
00:33:16,730 --> 00:33:20,660
driver license number I can I could

725
00:33:19,370 --> 00:33:22,939
watch it there there are technically

726
00:33:20,660 --> 00:33:24,140
better ways to write that for that type

727
00:33:22,940 --> 00:33:27,200
of code but if you want to do it in

728
00:33:24,140 --> 00:33:28,700
PowerShell so we can iterate quickly all

729
00:33:27,200 --> 00:33:30,530
you have to do this is write as much

730
00:33:28,700 --> 00:33:34,610
power show as you can and you can call

731
00:33:30,530 --> 00:33:36,139
out for the one windows API function or

732
00:33:34,610 --> 00:33:39,080
the two windows API functions you really

733
00:33:36,140 --> 00:33:44,530
need you don't have to write an entire C

734
00:33:39,080 --> 00:33:44,530
application and push that through

735
00:33:46,690 --> 00:34:04,479
so that was weird questions okay alright

736
00:34:00,099 --> 00:34:06,009
so assuming that we have code written we

737
00:34:04,479 --> 00:34:09,339
need to package your code when you get

738
00:34:06,009 --> 00:34:12,010
out and execute it you've got to protect

739
00:34:09,339 --> 00:34:15,719
whatever it is that you've written make

740
00:34:12,010 --> 00:34:19,000
sure it gets where you want to go the

741
00:34:15,719 --> 00:34:21,219
pretty basic tick what if you have throw

742
00:34:19,000 --> 00:34:26,159
in a little box slipping the container

743
00:34:21,219 --> 00:34:26,158
throw it out there let it do its thing

744
00:34:26,789 --> 00:34:31,599
but you will see over it over again is

745
00:34:29,289 --> 00:34:35,289
this remember this guy from earlier our

746
00:34:31,599 --> 00:34:36,849
super basic example yeah you can you can

747
00:34:35,289 --> 00:34:40,000
embed that in weird documents you can

748
00:34:36,849 --> 00:34:42,609
paste it a bell whatever quotes can be a

749
00:34:40,000 --> 00:34:44,949
problem mm-hmm so we want to wrap this

750
00:34:42,609 --> 00:34:48,389
up packaging is really simple

751
00:34:44,949 --> 00:34:48,388
everything's usually wrapped in base64

752
00:34:49,109 --> 00:34:56,739
not hard you know just have built in

753
00:34:52,679 --> 00:35:01,299
base64 conversion function in dotnet

754
00:34:56,739 --> 00:35:05,700
right take our text convert two bytes

755
00:35:01,299 --> 00:35:07,750
converted to base64 we have some string

756
00:35:05,700 --> 00:35:10,000
power cell is really nice because it

757
00:35:07,750 --> 00:35:11,710
lets you and lets you execute from that

758
00:35:10,000 --> 00:35:17,400
directly

759
00:35:11,710 --> 00:35:24,069
it lets you immediately execute utf-16

760
00:35:17,400 --> 00:35:28,240
base64 encoding code who does process

761
00:35:24,069 --> 00:35:30,038
audit logging all right so it was like

762
00:35:28,240 --> 00:35:34,720
three you are okay the rest rate in

763
00:35:30,039 --> 00:35:36,569
hacked encoded command is kind of a big

764
00:35:34,720 --> 00:35:39,669
red flag you should never use it

765
00:35:36,569 --> 00:35:42,099
don't ever use it I was listening around

766
00:35:39,670 --> 00:35:45,220
at a place one time they shall not be

767
00:35:42,099 --> 00:35:47,680
named and as with some stuff all kinds

768
00:35:45,220 --> 00:35:51,220
of powershell trickery is and not eNOS

769
00:35:47,680 --> 00:35:53,440
and get ready to leave for the day and I

770
00:35:51,220 --> 00:35:54,160
have a message window pops up all right

771
00:35:53,440 --> 00:35:55,869
cool what's that

772
00:35:54,160 --> 00:35:58,700
some guy he's probably gonna ask me to

773
00:35:55,869 --> 00:36:03,530
restart a server something a big deal

774
00:35:58,700 --> 00:36:05,990
typing nothing typing nothing no message

775
00:36:03,530 --> 00:36:07,790
that have been hi typing nothing she was

776
00:36:05,990 --> 00:36:11,229
gone for a few minutes know what's going

777
00:36:07,790 --> 00:36:15,370
on so I look up the guy's contact card

778
00:36:11,230 --> 00:36:18,230
and it's guy who shall not be named

779
00:36:15,370 --> 00:36:22,390
Department Global Information Security

780
00:36:18,230 --> 00:36:25,670
Response Team yes

781
00:36:22,390 --> 00:36:27,140
what did I do

782
00:36:25,670 --> 00:36:28,490
he delete everything I'll just delete

783
00:36:27,140 --> 00:36:29,870
everything oh crap

784
00:36:28,490 --> 00:36:32,839
they're already watching me they

785
00:36:29,870 --> 00:36:35,600
shouldn't delete anything turns out they

786
00:36:32,840 --> 00:36:37,340
just saw encoded command and like hey we

787
00:36:35,600 --> 00:36:39,560
saw this PowerShell command that was

788
00:36:37,340 --> 00:36:41,450
executed we said okay is that fine like

789
00:36:39,560 --> 00:36:42,410
malware usually uses that way no dude

790
00:36:41,450 --> 00:36:44,899
he's fine don't worry about it there's

791
00:36:42,410 --> 00:36:49,879
no need looking at anything else on my

792
00:36:44,900 --> 00:36:54,140
box it's totally fine go away it's like

793
00:36:49,880 --> 00:36:57,440
five o'clock just go home no need to

794
00:36:54,140 --> 00:36:58,509
follow up it's fine go home I was lucky

795
00:36:57,440 --> 00:37:03,140
we're cool

796
00:36:58,510 --> 00:37:05,270
don't use it don't use it because it

797
00:37:03,140 --> 00:37:08,629
gets flagged an audit logging and don't

798
00:37:05,270 --> 00:37:11,330
use it because base64 you can expect

799
00:37:08,630 --> 00:37:14,900
maybe a thirty percent overhead and

800
00:37:11,330 --> 00:37:17,600
stuff does this look like a 30% overhead

801
00:37:14,900 --> 00:37:19,370
from that initial initial command I

802
00:37:17,600 --> 00:37:21,170
didn't do the math it's roughly two

803
00:37:19,370 --> 00:37:23,779
hundred and thirty percent I mentioned

804
00:37:21,170 --> 00:37:27,830
earlier net internally uses two byte

805
00:37:23,780 --> 00:37:29,150
characters so Lexi it's like so ucs-2 so

806
00:37:27,830 --> 00:37:31,910
this is a lot bigger than it needs to be

807
00:37:29,150 --> 00:37:36,070
if you don't use a code of command and

808
00:37:31,910 --> 00:37:39,770
do this yourself decode yourself and

809
00:37:36,070 --> 00:37:41,960
just ëcause execution yourself with

810
00:37:39,770 --> 00:37:45,470
invoking expression or whatever other

811
00:37:41,960 --> 00:37:50,600
trickery you want you have more control

812
00:37:45,470 --> 00:37:53,270
over packaging the main reason to do

813
00:37:50,600 --> 00:37:58,279
this is to stuff things in the middle

814
00:37:53,270 --> 00:38:00,830
like encryption even a basic basic xor

815
00:37:58,280 --> 00:38:05,180
or bit shift will make things a little

816
00:38:00,830 --> 00:38:09,170
bit harder to find it is possible to

817
00:38:05,180 --> 00:38:11,390
search your logs for base64 I think Lee

818
00:38:09,170 --> 00:38:17,330
Hom sample code

819
00:38:11,390 --> 00:38:18,980
actually Holmes weird thing about the

820
00:38:17,330 --> 00:38:23,330
way base64 works I'm not gonna get super

821
00:38:18,980 --> 00:38:26,810
deep into it but certain things get

822
00:38:23,330 --> 00:38:29,090
pushed out you might if you encode you

823
00:38:26,810 --> 00:38:32,870
know the word Bob you have a certain

824
00:38:29,090 --> 00:38:34,670
basic four string if you put a letter in

825
00:38:32,870 --> 00:38:35,450
front of that it's gonna look completely

826
00:38:34,670 --> 00:38:37,820
different

827
00:38:35,450 --> 00:38:39,770
that's okay but there's only a couple

828
00:38:37,820 --> 00:38:42,950
rule variations so what you can actually

829
00:38:39,770 --> 00:38:45,680
do is if you're looking for a specific

830
00:38:42,950 --> 00:38:50,419
string and basics T for you can encode

831
00:38:45,680 --> 00:38:52,850
all the you can look for what the base64

832
00:38:50,420 --> 00:38:56,150
encoding would be for that in all cases

833
00:38:52,850 --> 00:38:58,640
there's only about three potential

834
00:38:56,150 --> 00:39:01,400
base64 strings and you can search your

835
00:38:58,640 --> 00:39:03,560
logs for that if you're looking a search

836
00:39:01,400 --> 00:39:07,730
search your process your process audit

837
00:39:03,560 --> 00:39:10,400
logs for command lines that have invoke

838
00:39:07,730 --> 00:39:14,600
expression in them pretty easy to find

839
00:39:10,400 --> 00:39:17,720
if you shift that if you use awkward and

840
00:39:14,600 --> 00:39:20,330
coding if the ringing an X or if they're

841
00:39:17,720 --> 00:39:22,520
a bit shift that makes it a lot harder

842
00:39:20,330 --> 00:39:24,440
to do you have to actually go after

843
00:39:22,520 --> 00:39:27,350
someone somebody's threat hunting or

844
00:39:24,440 --> 00:39:29,120
someone who is doing DFR will still find

845
00:39:27,350 --> 00:39:31,190
you but at least you're off the

846
00:39:29,120 --> 00:39:33,020
automated log so when hack she has to

847
00:39:31,190 --> 00:39:36,490
get out of their chair and go get you

848
00:39:33,020 --> 00:39:36,490
which might be enough

849
00:39:39,670 --> 00:39:49,950
so we talked about writing some stuff

850
00:39:46,620 --> 00:39:53,230
and we talked about hacking some stuff

851
00:39:49,950 --> 00:39:55,870
are we still okay on all this I'm

852
00:39:53,230 --> 00:40:00,750
touching all weird pieces of dotnet you

853
00:39:55,870 --> 00:40:00,750
need to exist we're all cool all right

854
00:40:00,810 --> 00:40:12,820
we should probably get to execution

855
00:40:02,890 --> 00:40:17,190
which isn't some behind schedule that's

856
00:40:12,820 --> 00:40:17,190
life that was hilarious slide all right

857
00:40:17,400 --> 00:40:23,650
so we set things up we throw them in a

858
00:40:21,970 --> 00:40:24,939
box they eventually have to blow up and

859
00:40:23,650 --> 00:40:26,620
do something right otherwise what's the

860
00:40:24,940 --> 00:40:28,660
point if you don't get your code running

861
00:40:26,620 --> 00:40:31,870
it doesn't really matter

862
00:40:28,660 --> 00:40:34,120
PowerShell stuff you can run like

863
00:40:31,870 --> 00:40:35,470
anything else you can run PowerShell exe

864
00:40:34,120 --> 00:40:36,460
you can pass it scripts you can pass

865
00:40:35,470 --> 00:40:39,160
that's the stuff

866
00:40:36,460 --> 00:40:43,030
it's fine like if you were to invoke

867
00:40:39,160 --> 00:40:46,210
PowerShell with some string you could

868
00:40:43,030 --> 00:40:51,250
even invoke with the shortcuts because

869
00:40:46,210 --> 00:40:54,580
you like shortcuts you can do things

870
00:40:51,250 --> 00:40:55,780
like throw this into the image file

871
00:40:54,580 --> 00:41:04,630
execution options that everyone is

872
00:40:55,780 --> 00:41:07,120
always saying well that's kind of lame

873
00:41:04,630 --> 00:41:09,460
like I don't like that Wow we can use

874
00:41:07,120 --> 00:41:11,440
WMI instead it's way better you don't

875
00:41:09,460 --> 00:41:14,350
really care about what w - you'd only

876
00:41:11,440 --> 00:41:16,150
care why we're gonna use it it's

877
00:41:14,350 --> 00:41:18,549
pervasive it's everywhere if you have a

878
00:41:16,150 --> 00:41:20,590
Windows box it has W am I on it

879
00:41:18,550 --> 00:41:23,560
most important part is that Windows

880
00:41:20,590 --> 00:41:26,770
admins don't like it awesome do it's

881
00:41:23,560 --> 00:41:28,600
kind of like a magic black box like

882
00:41:26,770 --> 00:41:30,250
people like oh yeah it W - a thing that

883
00:41:28,600 --> 00:41:33,180
sometimes it's corrupted yeah they don't

884
00:41:30,250 --> 00:41:35,340
want to go there the place that you are

885
00:41:33,180 --> 00:41:38,319
uncomfortably you're uncomfortable being

886
00:41:35,340 --> 00:41:39,190
it's the place I want to be cuz you're

887
00:41:38,320 --> 00:41:41,560
not gonna find me there

888
00:41:39,190 --> 00:41:43,930
yeah I gotta come looking for me we can

889
00:41:41,560 --> 00:41:47,980
use W my event subscription model to

890
00:41:43,930 --> 00:41:50,529
execute it's pretty simple we start with

891
00:41:47,980 --> 00:41:53,200
an event filter this just looks for

892
00:41:50,530 --> 00:41:57,190
things that happen on the box

893
00:41:53,200 --> 00:42:00,250
filters them down - you got away we have

894
00:41:57,190 --> 00:42:02,110
about a bit consumer that gets triggered

895
00:42:00,250 --> 00:42:04,300
when we have find a matching pattern and

896
00:42:02,110 --> 00:42:07,450
we linked these with a filter to

897
00:42:04,300 --> 00:42:09,400
consumer binding three obvious seem to

898
00:42:07,450 --> 00:42:12,430
be created the filter to consumer

899
00:42:09,400 --> 00:42:15,130
binding is what gets logged by the way

900
00:42:12,430 --> 00:42:17,020
are you guys logging are you guys

901
00:42:15,130 --> 00:42:19,840
reading all your windows logs and

902
00:42:17,020 --> 00:42:26,320
forwarding them to a central store are

903
00:42:19,840 --> 00:42:28,450
you I'm gonna take that as a no even if

904
00:42:26,320 --> 00:42:30,940
you are are you are you pulling all of

905
00:42:28,450 --> 00:42:34,629
them all are you pulling the W my

906
00:42:30,940 --> 00:42:35,950
operational log probably not I see when

907
00:42:34,630 --> 00:42:49,150
we get you get it you're gonna spot this

908
00:42:35,950 --> 00:42:50,230
in real time so so we know what we need

909
00:42:49,150 --> 00:42:51,550
to do we need those three things we

910
00:42:50,230 --> 00:42:53,440
needed it vent filter that's our trigger

911
00:42:51,550 --> 00:42:54,580
we need an action and we need to link

912
00:42:53,440 --> 00:43:00,280
them together and we need to hope it

913
00:42:54,580 --> 00:43:02,710
works it's actually pretty easy so take

914
00:43:00,280 --> 00:43:06,160
this sample we're going to execute this

915
00:43:02,710 --> 00:43:07,510
little command here we're gonna do

916
00:43:06,160 --> 00:43:13,060
something off disk for now because we're

917
00:43:07,510 --> 00:43:16,990
lazy we can start with selecting a event

918
00:43:13,060 --> 00:43:20,500
filter in in W mine

919
00:43:16,990 --> 00:43:22,000
I suggest looking for activities that

920
00:43:20,500 --> 00:43:24,460
happened on the box on a regular basis

921
00:43:22,000 --> 00:43:26,860
so triggering say whenever we have a

922
00:43:24,460 --> 00:43:28,540
service change this means you to

923
00:43:26,860 --> 00:43:30,100
probably fire a lot more often than you

924
00:43:28,540 --> 00:43:32,890
want to but there are ways to deal with

925
00:43:30,100 --> 00:43:34,660
that like control ways to check checking

926
00:43:32,890 --> 00:43:36,430
for control if you're gonna bind a shell

927
00:43:34,660 --> 00:43:38,200
on a specific port it's really easy

928
00:43:36,430 --> 00:43:39,490
because if the by if you can't bind to

929
00:43:38,200 --> 00:43:41,950
the port those are already something

930
00:43:39,490 --> 00:43:44,680
there just died who cares you can be

931
00:43:41,950 --> 00:43:46,509
fairly resilient that way I don't like

932
00:43:44,680 --> 00:43:48,279
the other options that are you generally

933
00:43:46,510 --> 00:43:51,160
see they usually look for the system

934
00:43:48,280 --> 00:43:53,980
uptime in a certain range that happens

935
00:43:51,160 --> 00:43:57,420
once per reboot I don't like to root my

936
00:43:53,980 --> 00:43:59,440
boxes very often so why would I do that

937
00:43:57,420 --> 00:44:02,560
certain industries may only patch

938
00:43:59,440 --> 00:44:03,730
quarterly if your code crashes you don't

939
00:44:02,560 --> 00:44:04,520
get another chance for it to exit for

940
00:44:03,730 --> 00:44:09,140
another quarter

941
00:44:04,520 --> 00:44:10,849
that sucks so looking for modified

942
00:44:09,140 --> 00:44:13,819
services which is include what a service

943
00:44:10,849 --> 00:44:15,800
state changes when it starts to stop as

944
00:44:13,820 --> 00:44:17,930
a reasonable way to get action so long

945
00:44:15,800 --> 00:44:18,619
as you in your code filter it down so

946
00:44:17,930 --> 00:44:22,279
you don't fire

947
00:44:18,619 --> 00:44:25,160
too often we then need to look at a

948
00:44:22,280 --> 00:44:29,240
consumer we can use it as ma'am a

949
00:44:25,160 --> 00:44:32,390
command line event consumer not that bad

950
00:44:29,240 --> 00:44:35,330
we can create create an object give it a

951
00:44:32,390 --> 00:44:37,759
command line to execute super easy we

952
00:44:35,330 --> 00:44:39,920
link these up with a filter to consumer

953
00:44:37,760 --> 00:44:42,230
binding which is easy because we see it

954
00:44:39,920 --> 00:44:43,880
references the first two object no big

955
00:44:42,230 --> 00:44:48,140
deal whenever a service changes our

956
00:44:43,880 --> 00:44:49,880
codes going to get executed I don't

957
00:44:48,140 --> 00:44:52,069
think that's too good though because we

958
00:44:49,880 --> 00:44:53,630
have something on disk we're executing

959
00:44:52,070 --> 00:45:00,080
file off disk I think we can do a little

960
00:44:53,630 --> 00:45:04,160
bit better than this this is a read back

961
00:45:00,080 --> 00:45:05,750
of a event consumer that was a command

962
00:45:04,160 --> 00:45:07,819
line of it cuz anyway that was created

963
00:45:05,750 --> 00:45:09,950
is there anything here that looks like

964
00:45:07,820 --> 00:45:12,859
it's of potential fun all right does it

965
00:45:09,950 --> 00:45:14,990
look useful I'll give you a hint there's

966
00:45:12,859 --> 00:45:16,069
a lot more that's output here than I put

967
00:45:14,990 --> 00:45:18,709
on the screen so it's one of these

968
00:45:16,070 --> 00:45:22,820
couple of things no no see there's a

969
00:45:18,710 --> 00:45:24,040
window title guy here I wonder what that

970
00:45:22,820 --> 00:45:26,839
is

971
00:45:24,040 --> 00:45:30,259
turns out it's a string that we can

972
00:45:26,839 --> 00:45:32,270
throw stuff into so we've sort of

973
00:45:30,260 --> 00:45:33,980
executing from the disk I'm gonna change

974
00:45:32,270 --> 00:45:38,470
we can change our command line event

975
00:45:33,980 --> 00:45:41,720
consumer here to read back WMI object

976
00:45:38,470 --> 00:45:44,330
and just execute whatever we find in the

977
00:45:41,720 --> 00:45:46,160
window title property I don't know

978
00:45:44,330 --> 00:45:48,380
exactly how big that can be because I

979
00:45:46,160 --> 00:45:50,960
was testing it on my box and I really

980
00:45:48,380 --> 00:45:53,390
was not trying to kill my box that hard

981
00:45:50,960 --> 00:46:00,020
I got 10k in there so you've got some

982
00:45:53,390 --> 00:46:01,040
room to work with the full command to

983
00:46:00,020 --> 00:46:02,089
create that object looks a little bit

984
00:46:01,040 --> 00:46:06,529
different

985
00:46:02,089 --> 00:46:09,290
modified command line template modified

986
00:46:06,530 --> 00:46:12,020
window title with the code we actually

987
00:46:09,290 --> 00:46:14,900
want to execute and let that go when we

988
00:46:12,020 --> 00:46:17,780
read that that object back we have code

989
00:46:14,900 --> 00:46:20,319
all in W my

990
00:46:17,780 --> 00:46:22,670
in that WMI database so we don't have

991
00:46:20,319 --> 00:46:25,099
extra files on this is still backed by

992
00:46:22,670 --> 00:46:27,099
disk but there's no like ps1 files lying

993
00:46:25,099 --> 00:46:29,089
around and so we can execute this

994
00:46:27,099 --> 00:46:33,520
whatever we want

995
00:46:29,089 --> 00:46:36,819
it's great the really the number one

996
00:46:33,520 --> 00:46:40,910
greatest fantastic thing about this is

997
00:46:36,819 --> 00:46:43,099
WMI is available over our PC and web

998
00:46:40,910 --> 00:46:46,220
services management which means if you

999
00:46:43,099 --> 00:46:49,220
are on like an admin workstation network

1000
00:46:46,220 --> 00:46:51,169
that has RPC access to other boxes if

1001
00:46:49,220 --> 00:46:53,509
you are on a monitoring server that has

1002
00:46:51,170 --> 00:46:56,480
RPC access but you don't necessarily

1003
00:46:53,510 --> 00:46:59,299
want to open a shell on a box or get

1004
00:46:56,480 --> 00:47:06,400
interactive on a box you can set this up

1005
00:46:59,299 --> 00:47:08,599
remotely that's the most fun part so I

1006
00:47:06,400 --> 00:47:11,000
know there was a lot I wanted to

1007
00:47:08,599 --> 00:47:14,920
introduce you to thinks so that you can

1008
00:47:11,000 --> 00:47:17,599
go work on them later if you want code I

1009
00:47:14,920 --> 00:47:19,190
have the code written out and step by

1010
00:47:17,599 --> 00:47:23,779
step chunks like I showed you here so

1011
00:47:19,190 --> 00:47:29,569
you can go and look for references go

1012
00:47:23,779 --> 00:47:32,630
play have fun enjoy you want that so

1013
00:47:29,569 --> 00:47:35,720
there's a little white NFC dot on my

1014
00:47:32,630 --> 00:47:38,109
talk on the board that you can scan I

1015
00:47:35,720 --> 00:47:40,368
also have stickers in my pocket

1016
00:47:38,109 --> 00:47:41,808
Twitter's whatever there's 80 billion

1017
00:47:40,369 --> 00:47:47,539
ways to get it don't worry about it

1018
00:47:41,809 --> 00:47:51,609
not hard questions we have less than two

1019
00:47:47,539 --> 00:47:51,609
minutes for questions yes

1020
00:47:52,500 --> 00:47:55,920
well that sucks

1021
00:47:57,150 --> 00:48:03,089
there are a lot of ways to dodge that

1022
00:47:59,109 --> 00:48:05,890
kind of stuff some work well some don't

1023
00:48:03,089 --> 00:48:10,029
if you're in a position here if your

1024
00:48:05,890 --> 00:48:11,980
post exploitation you can probably get

1025
00:48:10,030 --> 00:48:14,440
like rewrite your policy registry keys

1026
00:48:11,980 --> 00:48:17,049
first they're just not persistent

1027
00:48:14,440 --> 00:48:21,099
obviously basically you're screwed deal

1028
00:48:17,049 --> 00:48:26,230
with it like who was it who raised their

1029
00:48:21,099 --> 00:48:29,079
hands for log forwarding like like two

1030
00:48:26,230 --> 00:48:31,930
people three people like who cares just

1031
00:48:29,079 --> 00:48:33,369
do it like they'll get you in DI FR but

1032
00:48:31,930 --> 00:48:36,399
you already have their data doesn't

1033
00:48:33,369 --> 00:48:39,839
matter well it doesn't matter but yeah

1034
00:48:36,400 --> 00:48:39,839
any more questions any more questions

1035
00:48:42,210 --> 00:48:47,200
that is awesome just called Daniel

1036
00:48:45,460 --> 00:48:49,660
Bohannon we'll go to those github just

1037
00:48:47,200 --> 00:48:50,618
use it like don't write your own because

1038
00:48:49,660 --> 00:48:54,339
you're not going to be better than his

1039
00:48:50,619 --> 00:48:57,040
code best option there are some weird

1040
00:48:54,339 --> 00:49:00,730
options you want to use the options that

1041
00:48:57,040 --> 00:49:01,720
don't rely on invoke expression because

1042
00:49:00,730 --> 00:49:04,599
you're a little bit harder to go through

1043
00:49:01,720 --> 00:49:06,839
again if it's there IDF our guy is gonna

1044
00:49:04,599 --> 00:49:09,670
get it a threat hunter is gonna get it

1045
00:49:06,839 --> 00:49:12,190
you just don't want to show up on logs

1046
00:49:09,670 --> 00:49:14,799
early enough to set off alarms there's

1047
00:49:12,190 --> 00:49:21,460
always a tray somewhere just buy

1048
00:49:14,799 --> 00:49:23,670
yourself time questions questions no no

1049
00:49:21,460 --> 00:49:23,670
questions

1050
00:49:26,570 --> 00:49:32,580
that was a wedgie turn right on I'm sad

1051
00:49:31,200 --> 00:49:33,990
you can't hear my boss music that I

1052
00:49:32,580 --> 00:49:34,650
picked for this right now but that's

1053
00:49:33,990 --> 00:49:37,020
okay

1054
00:49:34,650 --> 00:49:38,790
I had to do credit of the shots of

1055
00:49:37,020 --> 00:49:53,520
bringing Greeks back okay I'm taking

1056
00:49:38,790 --> 00:50:01,490
back the Greeks no more questions a new

1057
00:49:53,520 --> 00:50:01,490
object how many objects there's so many

1058
00:50:04,190 --> 00:50:08,430
meaning we get popped

1059
00:50:06,300 --> 00:50:10,770
every company of words that gets popped

1060
00:50:08,430 --> 00:50:12,390
by two year-old vulnerabilities do not

1061
00:50:10,770 --> 00:50:24,990
 talk to me about O'Day's I do

1062
00:50:12,390 --> 00:50:26,700
not all right thank you go look go get

1063
00:50:24,990 --> 00:50:28,859
the code experiment yourself this is

1064
00:50:26,700 --> 00:50:31,470
meant to introduce you to those features

1065
00:50:28,859 --> 00:50:33,299
I remember there was no hotness here I

1066
00:50:31,470 --> 00:50:35,310
want you to know what those features are

1067
00:50:33,300 --> 00:50:38,490
where they exist what they're used for

1068
00:50:35,310 --> 00:50:40,740
so you can go home tonight learn a

1069
00:50:38,490 --> 00:50:41,970
little bit from powershell and write

1070
00:50:40,740 --> 00:50:46,500
some stuff it's gonna be a pain in the

1071
00:50:41,970 --> 00:50:49,310
ass from the on Monday thank you big

1072
00:50:46,500 --> 00:50:49,310
round of applause for Chris

1073
00:50:51,530 --> 00:50:56,240
I just like to remind everybody

1074
00:50:54,530 --> 00:50:58,160
there's speaker circuit cards in the

1075
00:50:56,240 --> 00:51:01,750
back so if you liked what you saw please

1076
00:50:58,160 --> 00:51:01,750
let us know thank you

