1
00:03:01,230 --> 00:03:06,869
so as you can see my dog's got

2
00:03:04,080 --> 00:03:09,209
perfidious make evaporate again I'll be

3
00:03:06,870 --> 00:03:10,620
producing you who possible new technique

4
00:03:09,209 --> 00:03:13,430
that could be used to buy will be

5
00:03:10,620 --> 00:03:15,630
friends but I want you to remember that

6
00:03:13,430 --> 00:03:17,130
you're focusing on the technique itself

7
00:03:15,630 --> 00:03:19,410
you should focus on the bigger picture

8
00:03:17,130 --> 00:03:20,970
which is note itself and the library

9
00:03:19,410 --> 00:03:24,269
that is that is being correctly

10
00:03:20,970 --> 00:03:26,010
deadlocked so this is the URL ready to

11
00:03:24,269 --> 00:03:30,950
try to find these slides if you don't

12
00:03:26,010 --> 00:03:30,950
know them just tie your head or function

13
00:03:48,930 --> 00:03:52,760
I like reverse engineering

14
00:03:55,349 --> 00:04:01,030
and that's enough about me I would like

15
00:03:59,140 --> 00:04:03,339
to know like what is the demographic of

16
00:04:01,030 --> 00:04:05,290
the audience right now so how many of

17
00:04:03,340 --> 00:04:09,700
you are interested in math aragaki-san's

18
00:04:05,290 --> 00:04:11,530
reverse engineer a okay awesome

19
00:04:09,700 --> 00:04:15,010
so we are going to talk about those

20
00:04:11,530 --> 00:04:17,199
things let's get started so in order to

21
00:04:15,010 --> 00:04:19,358
understand how this library came into

22
00:04:17,199 --> 00:04:22,990
development it's important to know the

23
00:04:19,358 --> 00:04:24,760
context in which this became it right so

24
00:04:22,990 --> 00:04:26,620
doing the sonority 19 I started

25
00:04:24,760 --> 00:04:29,409
interning at Highbury at that time there

26
00:04:26,620 --> 00:04:31,780
was nothing I knew like what else to do

27
00:04:29,410 --> 00:04:35,050
I was basically scan a screen for just a

28
00:04:31,780 --> 00:04:38,260
father has his field skills and machine

29
00:04:35,050 --> 00:04:40,750
learning skills after that my mentor for

30
00:04:38,260 --> 00:04:43,270
the project basically told me that you

31
00:04:40,750 --> 00:04:45,220
wanted to develop a tool that would be

32
00:04:43,270 --> 00:04:47,979
used as a free computer them you monitor

33
00:04:45,220 --> 00:04:50,410
samples if you use machine learning in

34
00:04:47,979 --> 00:04:52,330
order to learn over the current modular

35
00:04:50,410 --> 00:04:54,340
sample school sport in order to generate

36
00:04:52,330 --> 00:04:56,919
new samples that could be me by basket

37
00:04:54,340 --> 00:04:58,539
detection systems now when he told me

38
00:04:56,919 --> 00:05:04,389
about this project I will basic

39
00:04:58,539 --> 00:05:07,000
questions first for so many samples and

40
00:05:04,389 --> 00:05:08,710
how would enter the parcels or all the

41
00:05:07,000 --> 00:05:11,590
various languages interventions

42
00:05:08,710 --> 00:05:13,570
mother samples are needed the second

43
00:05:11,590 --> 00:05:15,400
question was is this even legal for me

44
00:05:13,570 --> 00:05:17,919
because I don't want it we are knocking

45
00:05:15,400 --> 00:05:20,380
on our door so as fate would have it

46
00:05:17,919 --> 00:05:22,210
after introducing the idea in 15 days or

47
00:05:20,380 --> 00:05:24,789
something he basically left the company

48
00:05:22,210 --> 00:05:28,270
and joined another phone service with

49
00:05:24,789 --> 00:05:30,550
this project whatever I wanted to do so

50
00:05:28,270 --> 00:05:32,590
there were basically two choices with me

51
00:05:30,550 --> 00:05:35,380
I could either live my time and sanity

52
00:05:32,590 --> 00:05:38,380
and get paid for it or I could develop a

53
00:05:35,380 --> 00:05:41,199
project which could be a possible like

54
00:05:38,380 --> 00:05:45,219
step to this project so that is not what

55
00:05:41,199 --> 00:05:47,050
we do in the future right so in order to

56
00:05:45,220 --> 00:05:49,090
understand what perfidious does it is

57
00:05:47,050 --> 00:05:51,520
important to know what P file format

58
00:05:49,090 --> 00:05:52,960
looks like and what are the different

59
00:05:51,520 --> 00:05:56,620
structures that are present inside of

60
00:05:52,960 --> 00:05:58,750
each file right so these are the basic

61
00:05:56,620 --> 00:06:01,320
components of a be fine this is the dog

62
00:05:58,750 --> 00:06:03,639
header this Doster then there's a

63
00:06:01,320 --> 00:06:06,400
recently discovered structure

64
00:06:03,639 --> 00:06:07,150
say 2015 or bridge header there is the

65
00:06:06,400 --> 00:06:09,729
e-signature

66
00:06:07,150 --> 00:06:12,370
followed by the header which consists of

67
00:06:09,729 --> 00:06:14,590
define header which points to the data

68
00:06:12,370 --> 00:06:16,840
directly followed by the section header

69
00:06:14,590 --> 00:06:19,568
and the actual sections which contains

70
00:06:16,840 --> 00:06:21,250
the data of the b5 right we'll go into

71
00:06:19,569 --> 00:06:24,009
all these sections in detail a few

72
00:06:21,250 --> 00:06:25,300
things to remember these are some of the

73
00:06:24,009 --> 00:06:27,009
concepts that you'll need to know in

74
00:06:25,300 --> 00:06:29,289
order to understand how addressing works

75
00:06:27,009 --> 00:06:31,000
inside B files so there is the row

76
00:06:29,289 --> 00:06:33,449
address row address is basically the

77
00:06:31,000 --> 00:06:36,370
actual offset and which a particular

78
00:06:33,449 --> 00:06:39,789
thing is present inside a be fine so you

79
00:06:36,370 --> 00:06:42,460
can see if the 35 the one that fit

80
00:06:39,789 --> 00:06:44,560
inside ego fide this little thing is

81
00:06:42,460 --> 00:06:46,750
present wrong address space is basically

82
00:06:44,560 --> 00:06:49,080
actual address space ranging from zero

83
00:06:46,750 --> 00:06:51,310
to the actual file size of the p5

84
00:06:49,080 --> 00:06:53,889
virtual address space so what should

85
00:06:51,310 --> 00:06:57,490
address space usually begins at four

86
00:06:53,889 --> 00:07:00,430
hundred four hundred thousand something

87
00:06:57,490 --> 00:07:02,050
next is an exercise number so that is

88
00:07:00,430 --> 00:07:03,939
basically offset from which this

89
00:07:02,050 --> 00:07:05,560
particular file will be loaded in the

90
00:07:03,939 --> 00:07:07,090
memory and the address space is

91
00:07:05,560 --> 00:07:09,789
basically everything ranging from there

92
00:07:07,090 --> 00:07:11,888
so it's important to know the mapping

93
00:07:09,789 --> 00:07:13,539
between draw a transfer row address

94
00:07:11,889 --> 00:07:15,520
space a commercial address space in

95
00:07:13,539 --> 00:07:19,210
order to actually map the data

96
00:07:15,520 --> 00:07:21,909
structures because a lot of the offsets

97
00:07:19,210 --> 00:07:24,068
present inside we find an RBA format so

98
00:07:21,909 --> 00:07:25,960
we need to convert the IPS it with your

99
00:07:24,069 --> 00:07:27,699
offsets so that we can actually find

100
00:07:25,960 --> 00:07:29,859
those data structures inside the raw

101
00:07:27,699 --> 00:07:32,620
file right so this is the formula that

102
00:07:29,860 --> 00:07:34,210
can be used in order to convert the RBA

103
00:07:32,620 --> 00:07:38,589
inside the e-file

104
00:07:34,210 --> 00:07:40,388
or or address and so this is the

105
00:07:38,589 --> 00:07:42,310
structure of our doors header now it

106
00:07:40,389 --> 00:07:43,210
contains a lot of information but the

107
00:07:42,310 --> 00:07:46,000
important ones that have been

108
00:07:43,210 --> 00:07:49,359
highlighted eat magic is basically the

109
00:07:46,000 --> 00:07:50,680
NC you can see that the NC pipes that

110
00:07:49,360 --> 00:07:53,159
are present inside a key file this

111
00:07:50,680 --> 00:07:55,779
basically identifies that this we fight

112
00:07:53,159 --> 00:07:58,930
this reason is basically the checksum of

113
00:07:55,779 --> 00:08:00,490
the B file itself and the entry points

114
00:07:58,930 --> 00:08:02,710
to the offset to the extended handle

115
00:08:00,490 --> 00:08:07,210
this is where the actual PFI begin

116
00:08:02,710 --> 00:08:10,529
strong for most part the dorsum now how

117
00:08:07,210 --> 00:08:10,529
many of you participate

118
00:08:10,690 --> 00:08:16,940
fire so if you participated in the ACC

119
00:08:14,900 --> 00:08:19,700
challenge of flair on one of the

120
00:08:16,940 --> 00:08:22,030
challenges involved a program which was

121
00:08:19,700 --> 00:08:25,460
actually a toss program that was being

122
00:08:22,030 --> 00:08:28,119
passed off as a we fed so it was not

123
00:08:25,460 --> 00:08:30,830
physically able to run on the normal

124
00:08:28,120 --> 00:08:33,560
reduce machines that we have currently

125
00:08:30,830 --> 00:08:36,319
so whenever you see toaster toaster

126
00:08:33,559 --> 00:08:38,299
basically cities the state this program

127
00:08:36,320 --> 00:08:39,800
cannot be run in DOS mode right so this

128
00:08:38,299 --> 00:08:41,689
basically explains to us that this

129
00:08:39,799 --> 00:08:44,870
program is not meant to be done indoors

130
00:08:41,690 --> 00:08:47,030
on lost machines as a das program but in

131
00:08:44,870 --> 00:08:49,190
that particular challenge once you solve

132
00:08:47,030 --> 00:08:51,410
the challenge you basically got a swing

133
00:08:49,190 --> 00:08:53,780
saying this program cannot not periodic

134
00:08:51,410 --> 00:08:56,990
table right so it was actually a toss

135
00:08:53,780 --> 00:08:58,490
program so this is the toss of them

136
00:08:56,990 --> 00:09:00,590
which is basically contain an entire

137
00:08:58,490 --> 00:09:04,610
program in itself that can run in DOS

138
00:09:00,590 --> 00:09:05,750
mode right Richard now great shredder is

139
00:09:04,610 --> 00:09:08,330
really interesting because this

140
00:09:05,750 --> 00:09:10,580
particular header was discovered in 2015

141
00:09:08,330 --> 00:09:12,710
and this was previously unknown now

142
00:09:10,580 --> 00:09:16,130
Microsoft use this header in order to

143
00:09:12,710 --> 00:09:18,650
identify different grooves that were

144
00:09:16,130 --> 00:09:19,700
using Microsoft tools in order to build

145
00:09:18,650 --> 00:09:21,800
them other samples

146
00:09:19,700 --> 00:09:24,770
now since this header was not previously

147
00:09:21,800 --> 00:09:26,449
discovered they could not be paying

148
00:09:24,770 --> 00:09:28,790
attention or changing the actual

149
00:09:26,450 --> 00:09:30,380
specifics inside this header this header

150
00:09:28,790 --> 00:09:32,329
basically contains information about the

151
00:09:30,380 --> 00:09:35,060
file and then Lincoln used to create a

152
00:09:32,330 --> 00:09:36,890
particular be fine right so this tells

153
00:09:35,060 --> 00:09:38,540
you a lot about what kind of foods were

154
00:09:36,890 --> 00:09:40,730
used in order to create a V file

155
00:09:38,540 --> 00:09:42,829
Microsoft was using this header to

156
00:09:40,730 --> 00:09:44,930
basically identify different kinds of

157
00:09:42,830 --> 00:09:47,360
groups from the samples that they

158
00:09:44,930 --> 00:09:49,640
collected right so this was a really

159
00:09:47,360 --> 00:09:51,710
good you can see signature detection

160
00:09:49,640 --> 00:09:54,110
mechanism that Microsoft was previously

161
00:09:51,710 --> 00:09:57,260
using as you can see it contains the

162
00:09:54,110 --> 00:09:59,270
retiree and the checks now so it's

163
00:09:57,260 --> 00:10:00,770
important to understand that there are

164
00:09:59,270 --> 00:10:01,550
several different types of values that

165
00:10:00,770 --> 00:10:03,740
are present inside

166
00:10:01,550 --> 00:10:05,750
P files so these are hatchery that

167
00:10:03,740 --> 00:10:08,180
requires that represent a side effect so

168
00:10:05,750 --> 00:10:10,160
if you actually make changes so P file

169
00:10:08,180 --> 00:10:11,540
it is important to change each and every

170
00:10:10,160 --> 00:10:14,270
checksum that is affected right

171
00:10:11,540 --> 00:10:16,099
otherwise you will not basically make

172
00:10:14,270 --> 00:10:19,730
changes that could be easily detected by

173
00:10:16,100 --> 00:10:20,480
any endpoint detection system so the

174
00:10:19,730 --> 00:10:21,030
e-signature

175
00:10:20,480 --> 00:10:24,420
this

176
00:10:21,030 --> 00:10:26,970
he actually finds people begins from it

177
00:10:24,420 --> 00:10:28,380
is basically contains of these

178
00:10:26,970 --> 00:10:31,140
particular goodbyes

179
00:10:28,380 --> 00:10:34,290
PE followed by two nuns so this is

180
00:10:31,140 --> 00:10:37,500
penalty actually file begins from right

181
00:10:34,290 --> 00:10:39,270
now interior in an analysis of fine

182
00:10:37,500 --> 00:10:41,370
header and optional middle which in turn

183
00:10:39,270 --> 00:10:43,560
point sooty data directories which are

184
00:10:41,370 --> 00:10:47,430
the metadata of the sections as a

185
00:10:43,560 --> 00:10:50,670
present inside of a file or 500 now 500

186
00:10:47,430 --> 00:10:52,709
consists of machine time number of

187
00:10:50,670 --> 00:10:55,680
sessions time and date Sam when this

188
00:10:52,710 --> 00:10:57,320
particular file was the file pointer to

189
00:10:55,680 --> 00:11:00,359
the segment even number of simple

190
00:10:57,320 --> 00:11:01,920
simples characteristics of the p5 now

191
00:11:00,360 --> 00:11:09,020
how many of your know but you would have

192
00:11:01,920 --> 00:11:12,630
to be stats for it Uwe what does it mean

193
00:11:09,020 --> 00:11:15,030
exactly so if you know about Universal

194
00:11:12,630 --> 00:11:16,980
Windows platform is basically Windows

195
00:11:15,030 --> 00:11:18,540
it's time to introduce a common Indiana

196
00:11:16,980 --> 00:11:21,570
can be used across all these different

197
00:11:18,540 --> 00:11:23,640
machine times so ranging from xbox two

198
00:11:21,570 --> 00:11:26,280
microphones two packs of laptops and

199
00:11:23,640 --> 00:11:28,199
computers so this common API can be used

200
00:11:26,280 --> 00:11:31,500
to develop programs that can run on all

201
00:11:28,200 --> 00:11:33,810
these platforms right so in order to in

202
00:11:31,500 --> 00:11:35,280
order to have something like this in

203
00:11:33,810 --> 00:11:36,959
order to have this ecosystem it is

204
00:11:35,280 --> 00:11:40,290
important to make sure that a file

205
00:11:36,960 --> 00:11:40,950
format can adjust each of those machine

206
00:11:40,290 --> 00:11:43,290
types right

207
00:11:40,950 --> 00:11:45,140
so machine type basically specifies the

208
00:11:43,290 --> 00:11:50,040
type of machine on which this particular

209
00:11:45,140 --> 00:11:51,000
P file is expected to run right so these

210
00:11:50,040 --> 00:11:52,980
are basically some of the

211
00:11:51,000 --> 00:11:55,410
characteristics that are result so it

212
00:11:52,980 --> 00:11:57,630
can be like whether it's an executable

213
00:11:55,410 --> 00:11:59,939
image whether the relocation symbols

214
00:11:57,630 --> 00:12:01,920
have been strained or whether it's a

215
00:11:59,940 --> 00:12:03,600
16-bit machine so there is a ton of

216
00:12:01,920 --> 00:12:06,030
information that distance contained

217
00:12:03,600 --> 00:12:08,790
inside the file header now time dates

218
00:12:06,030 --> 00:12:12,480
are who knows what January 1st 1970

219
00:12:08,790 --> 00:12:15,630
means exactly

220
00:12:12,480 --> 00:12:17,460
so any time and date stamp that is that

221
00:12:15,630 --> 00:12:19,350
you have that is present inside this

222
00:12:17,460 --> 00:12:21,210
particular field is basically at the

223
00:12:19,350 --> 00:12:23,580
time data from that particular diagram

224
00:12:21,210 --> 00:12:26,490
right so this basically helps you

225
00:12:23,580 --> 00:12:28,170
identify when this particular binary was

226
00:12:26,490 --> 00:12:30,630
compiled now the funny thing about this

227
00:12:28,170 --> 00:12:31,020
is several different time dates and the

228
00:12:30,630 --> 00:12:33,180
resin

229
00:12:31,020 --> 00:12:34,770
defense right there are several

230
00:12:33,180 --> 00:12:36,780
different time dates under the missile

231
00:12:34,770 --> 00:12:38,189
so it's not just enough to change the

232
00:12:36,780 --> 00:12:40,230
type name sound that is present in the

233
00:12:38,190 --> 00:12:42,150
fire atom right you need a change each

234
00:12:40,230 --> 00:12:44,070
and every time Mesa that is present

235
00:12:42,150 --> 00:12:47,340
inside of each side so this is a

236
00:12:44,070 --> 00:12:49,170
relatively important field now the

237
00:12:47,340 --> 00:12:52,080
optional header also can either give us

238
00:12:49,170 --> 00:12:54,420
a letter it's not really optional it

239
00:12:52,080 --> 00:12:56,130
contains a ton of information a ton of

240
00:12:54,420 --> 00:12:58,920
important information that you need in

241
00:12:56,130 --> 00:13:00,210
order to execute a program right so it

242
00:12:58,920 --> 00:13:02,490
contains the base of the core which

243
00:13:00,210 --> 00:13:03,960
points to the section where the actual

244
00:13:02,490 --> 00:13:06,480
pole is missing right

245
00:13:03,960 --> 00:13:08,370
it contains the main subsystem

246
00:13:06,480 --> 00:13:11,880
information version number operating

247
00:13:08,370 --> 00:13:13,860
system information so it basically but

248
00:13:11,880 --> 00:13:16,770
it contains a ton of information which

249
00:13:13,860 --> 00:13:19,070
is not really an option right at the end

250
00:13:16,770 --> 00:13:21,420
of the ocean header there is an eternity

251
00:13:19,070 --> 00:13:25,590
table which is present which points to

252
00:13:21,420 --> 00:13:27,209
the actual person inside of effect so

253
00:13:25,590 --> 00:13:29,940
these are some of the data degrees that

254
00:13:27,210 --> 00:13:32,370
can be present inside of a fight not all

255
00:13:29,940 --> 00:13:35,070
files have all these data treaties but

256
00:13:32,370 --> 00:13:37,200
some of them like import/export those

257
00:13:35,070 --> 00:13:39,480
are some of the communities that will be

258
00:13:37,200 --> 00:13:41,550
present inside almost every defect right

259
00:13:39,480 --> 00:13:44,190
so have a look at some of them and what

260
00:13:41,550 --> 00:13:47,719
they mean so it's portable export table

261
00:13:44,190 --> 00:13:50,610
basically points to the dot each section

262
00:13:47,720 --> 00:13:52,380
contains information about the functions

263
00:13:50,610 --> 00:13:55,620
that are exported by this particular

264
00:13:52,380 --> 00:13:57,540
defect now as some of you might may or

265
00:13:55,620 --> 00:14:01,560
may not know but we find that we are DLL

266
00:13:57,540 --> 00:14:02,910
or nvac right so DLL is most dealers are

267
00:14:01,560 --> 00:14:04,890
basically like dynamically linked

268
00:14:02,910 --> 00:14:07,050
libraries right now libraries do not

269
00:14:04,890 --> 00:14:09,030
really execute functions on their own

270
00:14:07,050 --> 00:14:11,520
it's poor functions that I use five

271
00:14:09,030 --> 00:14:13,530
different DD files right so the others

272
00:14:11,520 --> 00:14:15,540
will most probably have an exportable

273
00:14:13,530 --> 00:14:17,189
which is very large which contains a

274
00:14:15,540 --> 00:14:19,890
number of functions that are exported by

275
00:14:17,190 --> 00:14:22,410
that particular theater right then there

276
00:14:19,890 --> 00:14:23,610
is the portable now exactly opposite to

277
00:14:22,410 --> 00:14:25,800
this normal

278
00:14:23,610 --> 00:14:27,900
Lacy's are basically programs that are

279
00:14:25,800 --> 00:14:30,359
meant to import functions from different

280
00:14:27,900 --> 00:14:32,069
dll's and run those functions right so

281
00:14:30,360 --> 00:14:35,250
we booted all that means those imported

282
00:14:32,070 --> 00:14:38,009
functions now for a foreign key C it

283
00:14:35,250 --> 00:14:42,670
will have a large number of important

284
00:14:38,009 --> 00:14:45,459
the export table resource table now if

285
00:14:42,670 --> 00:14:48,040
you know programs our largest meant to

286
00:14:45,459 --> 00:14:50,199
be run once here like right programs can

287
00:14:48,040 --> 00:14:52,149
range from anything from games to music

288
00:14:50,199 --> 00:14:54,399
players to different things which have

289
00:14:52,149 --> 00:14:56,439
graphical user interfaces made from all

290
00:14:54,399 --> 00:14:59,350
that graphical data to be stored inside

291
00:14:56,439 --> 00:15:01,748
the V file now that data is basically

292
00:14:59,350 --> 00:15:04,120
stored inside the V Phi that pointed to

293
00:15:01,749 --> 00:15:06,220
by the resource table a resource table

294
00:15:04,120 --> 00:15:08,410
contains addresses of other resources

295
00:15:06,220 --> 00:15:10,629
that are needed in order for that

296
00:15:08,410 --> 00:15:13,719
particular be fight to run right so if

297
00:15:10,629 --> 00:15:16,329
you have a dot RS RS RC section that

298
00:15:13,720 --> 00:15:18,670
basically means that you have resources

299
00:15:16,329 --> 00:15:20,559
like icons are dialog boxes that are

300
00:15:18,670 --> 00:15:22,628
present inside the be fine so if you

301
00:15:20,559 --> 00:15:24,639
move the resource table it is basically

302
00:15:22,629 --> 00:15:27,279
a very easy way to find out whether a

303
00:15:24,639 --> 00:15:32,889
particular program is a we or a CLI

304
00:15:27,279 --> 00:15:34,990
right exception table now for good

305
00:15:32,889 --> 00:15:37,209
programming practices programs have

306
00:15:34,990 --> 00:15:39,550
exceptions right that need to be handled

307
00:15:37,209 --> 00:15:41,170
now those exceptions will be handle

308
00:15:39,550 --> 00:15:43,959
needs to be stored inside the B file

309
00:15:41,170 --> 00:15:45,910
exception table basically contains the

310
00:15:43,959 --> 00:15:47,529
pointers to the exceptions and the

311
00:15:45,910 --> 00:15:49,649
function that returns those exceptions

312
00:15:47,529 --> 00:15:52,269
right this is really important because

313
00:15:49,649 --> 00:15:54,519
you may have H pieces that need to be

314
00:15:52,269 --> 00:15:56,350
handled by this exception handles right

315
00:15:54,519 --> 00:16:00,040
so the exception table basically

316
00:15:56,350 --> 00:16:01,629
contains all that data certificate table

317
00:16:00,040 --> 00:16:15,730
now how many of you don't know what a

318
00:16:01,629 --> 00:16:18,670
certificate may consist of yes exactly

319
00:16:15,730 --> 00:16:20,379
so if you downloaded any program that is

320
00:16:18,670 --> 00:16:22,389
not from microphone and trying to run

321
00:16:20,379 --> 00:16:25,660
that you basically get it I love saying

322
00:16:22,389 --> 00:16:28,059
that this program is not by Microsoft

323
00:16:25,660 --> 00:16:30,160
right now this table is what causes that

324
00:16:28,059 --> 00:16:31,809
exception to hood right because if a

325
00:16:30,160 --> 00:16:33,999
particular program is not signed by

326
00:16:31,809 --> 00:16:35,620
Microsoft it tries to tell you that this

327
00:16:33,999 --> 00:16:38,050
program may or may not be malicious in

328
00:16:35,620 --> 00:16:39,670
nature right so if you have seen those

329
00:16:38,050 --> 00:16:41,859
ID certificates for Microsoft you would

330
00:16:39,670 --> 00:16:43,870
basically sign over there and deliver it

331
00:16:41,860 --> 00:16:46,149
to anyone and they will basically run it

332
00:16:43,870 --> 00:16:48,309
as the Microsoft based program right and

333
00:16:46,149 --> 00:16:50,500
there will never be an exception right

334
00:16:48,309 --> 00:16:52,839
so this is a table

335
00:16:50,500 --> 00:16:57,040
you realize to change the certificate of

336
00:16:52,840 --> 00:16:59,430
a particular b5 debug table now debug

337
00:16:57,040 --> 00:17:01,780
paper is usually stripped for all the

338
00:16:59,430 --> 00:17:04,030
commercially available here B files

339
00:17:01,780 --> 00:17:05,740
because most companies want people to

340
00:17:04,030 --> 00:17:08,829
know that debug information of a P file

341
00:17:05,740 --> 00:17:12,220
like what kind of break points for use

342
00:17:08,829 --> 00:17:14,230
in order to debug this particular use so

343
00:17:12,220 --> 00:17:16,270
this table is usually straight but if

344
00:17:14,230 --> 00:17:18,670
it's present it usually contains the

345
00:17:16,270 --> 00:17:19,990
debug information that pertaining to

346
00:17:18,670 --> 00:17:22,720
that particular p5

347
00:17:19,990 --> 00:17:26,290
TNS table now how many of you know what

348
00:17:22,720 --> 00:17:28,660
at Els people could stand for it's not

349
00:17:26,290 --> 00:17:30,810
the clearest or networks so what would

350
00:17:28,660 --> 00:17:30,810
it be

351
00:17:36,660 --> 00:17:42,690
so Microsoft like any normal operating

352
00:17:40,480 --> 00:17:44,980
system in today's world has

353
00:17:42,690 --> 00:17:46,960
multi-threading available to it right so

354
00:17:44,980 --> 00:17:49,960
TLS basically stands for thread-local

355
00:17:46,960 --> 00:17:51,850
storage so a particular program if it's

356
00:17:49,960 --> 00:17:54,940
done if it has multi fitting

357
00:17:51,850 --> 00:17:56,409
capabilities a same way even can happen

358
00:17:54,940 --> 00:17:58,630
can be present with multiple different

359
00:17:56,410 --> 00:18:00,010
instances of that particular programming

360
00:17:58,630 --> 00:18:02,410
that is multiple different threads

361
00:18:00,010 --> 00:18:04,629
utilizing different values for C

362
00:18:02,410 --> 00:18:06,130
variable they try to no thread-local

363
00:18:04,630 --> 00:18:08,200
storage basically stores all that

364
00:18:06,130 --> 00:18:10,870
information it shows multiple in

365
00:18:08,200 --> 00:18:13,570
multiple instances and the instances of

366
00:18:10,870 --> 00:18:14,790
a variable and data present inside of

367
00:18:13,570 --> 00:18:17,230
the event

368
00:18:14,790 --> 00:18:19,300
amudha reversible now if mod had a

369
00:18:17,230 --> 00:18:21,520
stable for most part is same as the

370
00:18:19,300 --> 00:18:23,320
protocol before the file is done but

371
00:18:21,520 --> 00:18:26,100
once the file is loaded in memory

372
00:18:23,320 --> 00:18:28,870
important address even basically contain

373
00:18:26,100 --> 00:18:31,510
basically changes through contain all

374
00:18:28,870 --> 00:18:33,399
the symbols and all its actual address

375
00:18:31,510 --> 00:18:35,860
is present inside the DLL from which

376
00:18:33,400 --> 00:18:37,030
those numbers are reported right so once

377
00:18:35,860 --> 00:18:39,250
it is loaded in memory

378
00:18:37,030 --> 00:18:40,750
once the offense related memory would

379
00:18:39,250 --> 00:18:44,350
address legal becomes really important

380
00:18:40,750 --> 00:18:46,210
to see now all this is followed by the

381
00:18:44,350 --> 00:18:48,340
section header which is the metadata for

382
00:18:46,210 --> 00:18:50,350
these sections present it contains the

383
00:18:48,340 --> 00:18:51,449
name the virtual addresses the size of

384
00:18:50,350 --> 00:18:53,790
the raw data or

385
00:18:51,450 --> 00:18:57,450
and characteristics of a section header

386
00:18:53,790 --> 00:19:00,000
now can even tell me why characteristics

387
00:18:57,450 --> 00:19:03,960
of a section might be important why it

388
00:19:00,000 --> 00:19:05,850
should be relevant like if it's just a

389
00:19:03,960 --> 00:19:07,440
stream of my x-ray why do you mean the

390
00:19:05,850 --> 00:19:08,939
specific characteristics of a particular

391
00:19:07,440 --> 00:19:25,100
section and satisfied

392
00:19:08,940 --> 00:19:28,560
like what good would it do so basically

393
00:19:25,100 --> 00:19:30,120
any section like code cannot be run from

394
00:19:28,560 --> 00:19:32,970
any section present inside of a file

395
00:19:30,120 --> 00:19:34,860
right you need to specify permissions or

396
00:19:32,970 --> 00:19:36,570
the metadata for a particular section

397
00:19:34,860 --> 00:19:38,520
right now all the sections present

398
00:19:36,570 --> 00:19:40,169
inside of the file are runnable not all

399
00:19:38,520 --> 00:19:42,480
sections have the execute permissions

400
00:19:40,170 --> 00:19:44,130
just imagine if every section present

401
00:19:42,480 --> 00:19:46,110
inside of a file had in secure

402
00:19:44,130 --> 00:19:47,520
permissions what you would have as

403
00:19:46,110 --> 00:19:49,320
basically you would have you would have

404
00:19:47,520 --> 00:19:52,110
to have checks on each of those sessions

405
00:19:49,320 --> 00:19:54,389
like executable code would be presenting

406
00:19:52,110 --> 00:19:54,899
data executable could be present at any

407
00:19:54,390 --> 00:19:57,060
time

408
00:19:54,900 --> 00:19:59,100
not positions require as equal purpose

409
00:19:57,060 --> 00:20:01,169
as Ray you only need execute permissions

410
00:19:59,100 --> 00:20:03,449
for the sections that have all that

411
00:20:01,170 --> 00:20:05,370
needs to be executed right all that data

412
00:20:03,450 --> 00:20:07,410
is contained in the characteristics

413
00:20:05,370 --> 00:20:11,729
field of the section header for that

414
00:20:07,410 --> 00:20:13,740
particular section right so now that you

415
00:20:11,730 --> 00:20:16,170
know what a PE file looks like and what

416
00:20:13,740 --> 00:20:17,790
are some of the basic things and make

417
00:20:16,170 --> 00:20:20,190
basic assumption under present inside

418
00:20:17,790 --> 00:20:22,290
people let's move on to the current

419
00:20:20,190 --> 00:20:25,440
projection like these or any defect

420
00:20:22,290 --> 00:20:27,180
right so the most common hole injection

421
00:20:25,440 --> 00:20:30,300
technique that is present for any be

422
00:20:27,180 --> 00:20:32,820
fine is custom section addition right so

423
00:20:30,300 --> 00:20:35,129
once you have the entire header followed

424
00:20:32,820 --> 00:20:38,129
the actual sections you may say just add

425
00:20:35,130 --> 00:20:39,840
another section and have that present in

426
00:20:38,130 --> 00:20:42,270
that section you inject the militia

427
00:20:39,840 --> 00:20:44,610
sport that you need to be targeting to

428
00:20:42,270 --> 00:20:46,500
execute right and then you redirect the

429
00:20:44,610 --> 00:20:48,240
entry point of the function to point to

430
00:20:46,500 --> 00:20:50,730
that particular section which has the

431
00:20:48,240 --> 00:20:55,170
execute permissions now can you tell me

432
00:20:50,730 --> 00:20:57,710
what problem would a person face if you

433
00:20:55,170 --> 00:20:59,820
like p5 ejection in the state

434
00:20:57,710 --> 00:21:01,650
what would be some of the problems that

435
00:20:59,820 --> 00:21:04,490
you could face like why is this not

436
00:21:01,650 --> 00:21:04,490
doable

437
00:21:04,860 --> 00:21:23,889
say you change the checksum to

438
00:21:07,710 --> 00:21:26,710
accommodate this change yes okay close

439
00:21:23,890 --> 00:21:28,240
enough so if you needed to control flow

440
00:21:26,710 --> 00:21:30,460
to the point to something that is not

441
00:21:28,240 --> 00:21:33,100
that is not part of the actual execution

442
00:21:30,460 --> 00:21:34,600
flow that could be a red flag but even

443
00:21:33,100 --> 00:21:38,500
before that like you wouldn't care about

444
00:21:34,600 --> 00:21:41,110
that has already executed so what could

445
00:21:38,500 --> 00:21:43,870
be one of the major red flags for this

446
00:21:41,110 --> 00:21:53,290
particular thing for this particular

447
00:21:43,870 --> 00:21:55,510
method no so then as I said before if

448
00:21:53,290 --> 00:21:57,850
you add another section and you want

449
00:21:55,510 --> 00:21:59,770
that code to be executed that section

450
00:21:57,850 --> 00:22:03,129
needs to contain execute permissions

451
00:21:59,770 --> 00:22:04,960
right now four of the nine piece is the

452
00:22:03,130 --> 00:22:07,240
only section that usually contains

453
00:22:04,960 --> 00:22:09,730
execute permission is the dot ten

454
00:22:07,240 --> 00:22:11,580
section so if you have a section that is

455
00:22:09,730 --> 00:22:13,600
present inside of a file that contains

456
00:22:11,580 --> 00:22:15,429
execute permissions that is an

457
00:22:13,600 --> 00:22:17,679
instant-read time like I don't even need

458
00:22:15,430 --> 00:22:19,690
to run this be fine I can just look for

459
00:22:17,680 --> 00:22:21,580
the include sections contain the execute

460
00:22:19,690 --> 00:22:23,530
permissions and intersection does not

461
00:22:21,580 --> 00:22:25,780
belong to one of the normal section that

462
00:22:23,530 --> 00:22:27,910
you have outside a particular list we

463
00:22:25,780 --> 00:22:29,230
just say that this particular file is

464
00:22:27,910 --> 00:22:31,990
malicious and you can send it to our

465
00:22:29,230 --> 00:22:34,030
sandbox right so that is one of the

466
00:22:31,990 --> 00:22:34,570
reasons but in this approach is not

467
00:22:34,030 --> 00:22:36,820
viable

468
00:22:34,570 --> 00:22:39,220
the stealth game using this approach

469
00:22:36,820 --> 00:22:41,590
versus the time required for its correct

470
00:22:39,220 --> 00:22:43,870
implementation is way to look like you

471
00:22:41,590 --> 00:22:45,879
kill very little still stands all the

472
00:22:43,870 --> 00:22:48,850
amount of things that would be required

473
00:22:45,880 --> 00:22:50,830
to go through this through this roj you

474
00:22:48,850 --> 00:22:53,020
can just add a section and the end of

475
00:22:50,830 --> 00:22:54,220
the media file and expected to run right

476
00:22:53,020 --> 00:22:55,750
you don't have to change the section

477
00:22:54,220 --> 00:22:57,430
headers you have to change all the check

478
00:22:55,750 --> 00:22:59,140
sounds you don't have to change the time

479
00:22:57,430 --> 00:23:00,880
a sound so it's a ton of different

480
00:22:59,140 --> 00:23:03,670
things that you have to do and in the

481
00:23:00,880 --> 00:23:05,580
end it will be easily read that right so

482
00:23:03,670 --> 00:23:08,590
this approach is not really viable

483
00:23:05,580 --> 00:23:11,080
PE forgiving now in this technique you

484
00:23:08,590 --> 00:23:17,459
know for forgives now can even if you

485
00:23:11,080 --> 00:23:22,080
tell me what forgives are yes

486
00:23:17,460 --> 00:23:24,090
first of all whites were sections that

487
00:23:22,080 --> 00:23:28,020
are identify this not be chief

488
00:23:24,090 --> 00:23:30,600
exactly so a we fight again 19

489
00:23:28,020 --> 00:23:32,490
like a stream of nuns inside inside

490
00:23:30,600 --> 00:23:34,800
answer so we had this basically a

491
00:23:32,490 --> 00:23:37,020
speaker pipe straight again it's just a

492
00:23:34,800 --> 00:23:39,780
ton of clients that have been that are

493
00:23:37,020 --> 00:23:41,940
present in a particular format so it

494
00:23:39,780 --> 00:23:44,129
execute so there can be a stream of nuns

495
00:23:41,940 --> 00:23:47,070
present inside a me - which is not being

496
00:23:44,130 --> 00:23:49,230
used by giving right so that space can

497
00:23:47,070 --> 00:23:51,510
be used to accommodate our malicious

498
00:23:49,230 --> 00:23:53,850
pool and here we are not adding another

499
00:23:51,510 --> 00:23:55,620
session we are not doing any of theories

500
00:23:53,850 --> 00:23:58,260
and we are just using space that was

501
00:23:55,620 --> 00:24:03,270
previously not being utilized right so

502
00:23:58,260 --> 00:24:04,980
we add malicious code that would keep as

503
00:24:03,270 --> 00:24:06,870
an inside of he fed and then we

504
00:24:04,980 --> 00:24:08,880
basically redirect the flow to that

505
00:24:06,870 --> 00:24:11,639
point to that point a particular motive

506
00:24:08,880 --> 00:24:14,270
now what can be the problems with the

507
00:24:11,640 --> 00:24:16,740
face by a right to give up easy

508
00:24:14,270 --> 00:24:17,190
thank you but has this technique not

509
00:24:16,740 --> 00:24:19,680
viable

510
00:24:17,190 --> 00:24:21,510
it looks pretty fine to me like you're

511
00:24:19,680 --> 00:24:23,760
not adding another section you're just

512
00:24:21,510 --> 00:24:25,379
using the exception that was not they

513
00:24:23,760 --> 00:24:27,300
part of a beef and that was not

514
00:24:25,380 --> 00:24:31,530
previously being utilized what is it

515
00:24:27,300 --> 00:24:33,540
this not violent that's one of the

516
00:24:31,530 --> 00:24:46,950
reasons that might not be enough space

517
00:24:33,540 --> 00:24:49,230
you might have a media file that might

518
00:24:46,950 --> 00:24:50,460
not retain be good kids so this is one

519
00:24:49,230 --> 00:24:53,100
of the common techniques that could be

520
00:24:50,460 --> 00:24:54,780
used to prevent tearing off be files you

521
00:24:53,100 --> 00:24:56,399
would just have random garbage data

522
00:24:54,780 --> 00:24:58,530
present at the code caves that are

523
00:24:56,400 --> 00:25:00,780
present inside your p5 and then there

524
00:24:58,530 --> 00:25:02,340
would be no you wouldn't be able to

525
00:25:00,780 --> 00:25:03,960
differentiate between a bootcamp and

526
00:25:02,340 --> 00:25:07,790
commenting that because then there is no

527
00:25:03,960 --> 00:25:13,260
stream of nuns right one more recent

528
00:25:07,790 --> 00:25:16,290
it's okay that's common but that you'll

529
00:25:13,260 --> 00:25:22,950
have to edit for each and every like ehh

530
00:25:16,290 --> 00:25:25,020
a technique right so if you want to put

531
00:25:22,950 --> 00:25:27,990
a media file you have the same problem

532
00:25:25,020 --> 00:25:30,160
as mentioned before right the mode key

533
00:25:27,990 --> 00:25:32,590
needs to be present inside execution

534
00:25:30,160 --> 00:25:35,020
the section of a be fun right you can't

535
00:25:32,590 --> 00:25:37,360
have a hotel being present in any any

536
00:25:35,020 --> 00:25:39,820
section of paper so the constraint are

537
00:25:37,360 --> 00:25:42,129
you need to have a big enough protein to

538
00:25:39,820 --> 00:25:44,620
accommodate your malicious code the code

539
00:25:42,130 --> 00:25:46,750
clearly needs to be present and it needs

540
00:25:44,620 --> 00:25:49,719
to be present inside a single executable

541
00:25:46,750 --> 00:25:52,810
section of a BSI now these constraints

542
00:25:49,720 --> 00:25:56,410
are usually never accommodated by a dd5

543
00:25:52,810 --> 00:25:59,500
right so this technique even though it's

544
00:25:56,410 --> 00:26:04,500
really good it cannot give me this it

545
00:25:59,500 --> 00:26:07,330
has a really huge miss ratio right so

546
00:26:04,500 --> 00:26:10,720
why can't we just edit the dot egg

547
00:26:07,330 --> 00:26:12,639
section of a BFF then why not

548
00:26:10,720 --> 00:26:15,100
but then let's just take the port that

549
00:26:12,640 --> 00:26:17,770
is present inside the accession of a be

550
00:26:15,100 --> 00:26:19,540
fine and I did that exception like what

551
00:26:17,770 --> 00:26:22,629
could be the problems that we could face

552
00:26:19,540 --> 00:26:25,090
if you wanted to do that they that our

553
00:26:22,630 --> 00:26:27,760
petition contains all the code and we

554
00:26:25,090 --> 00:26:28,530
need to add to that pool so why not just

555
00:26:27,760 --> 00:26:30,730
do that

556
00:26:28,530 --> 00:26:35,200
what could be the problem that we would

557
00:26:30,730 --> 00:26:38,230
face that would be one of the problems

558
00:26:35,200 --> 00:26:49,420
say you got into work then what do we

559
00:26:38,230 --> 00:26:52,600
have to change like even before that

560
00:26:49,420 --> 00:26:54,640
like if you say you make sure that

561
00:26:52,600 --> 00:26:58,449
original functionality state the same

562
00:26:54,640 --> 00:27:01,390
somehow and you had like you could

563
00:26:58,450 --> 00:27:03,490
basically injecting into take section

564
00:27:01,390 --> 00:27:06,960
was viable what would be the problems

565
00:27:03,490 --> 00:27:06,960
that have to face even the fourth

566
00:27:11,010 --> 00:27:15,879
exactly ready because the egg section is

567
00:27:14,470 --> 00:27:18,970
usually the purpose section that is

568
00:27:15,880 --> 00:27:20,650
present after the section headers so if

569
00:27:18,970 --> 00:27:22,630
you change the text section each and

570
00:27:20,650 --> 00:27:24,990
every addresses everything basically

571
00:27:22,630 --> 00:27:28,450
that comes after it needs to be changed

572
00:27:24,990 --> 00:27:32,530
right so that's a huge amount of all

573
00:27:28,450 --> 00:27:34,210
right so what do you have what would you

574
00:27:32,530 --> 00:27:36,310
need to have in order to do something

575
00:27:34,210 --> 00:27:38,520
like this they what would you need to

576
00:27:36,310 --> 00:27:38,520
have

577
00:27:41,390 --> 00:27:44,520
she would all the addresses are really

578
00:27:43,800 --> 00:27:46,139
are

579
00:27:44,520 --> 00:27:49,530
she wouldn't numbers really are

580
00:27:46,140 --> 00:27:52,110
addresses exactly so if I had some days

581
00:27:49,530 --> 00:27:54,240
what he just said you would basically

582
00:27:52,110 --> 00:27:56,879
need complete control over your effect

583
00:27:54,240 --> 00:27:59,460
right you know what goes where you know

584
00:27:56,880 --> 00:28:00,930
how does it work you would have you they

585
00:27:59,460 --> 00:28:03,360
basically need to have complete control

586
00:28:00,930 --> 00:28:05,730
over each and every data structure that

587
00:28:03,360 --> 00:28:08,070
is present inside of a file you need to

588
00:28:05,730 --> 00:28:10,170
change important tables you need to

589
00:28:08,070 --> 00:28:11,580
change addresses inside those tables you

590
00:28:10,170 --> 00:28:13,770
need to change a ton of different

591
00:28:11,580 --> 00:28:15,629
addresses inside the intersection you

592
00:28:13,770 --> 00:28:18,570
have to change basically a ton of

593
00:28:15,630 --> 00:28:20,550
different stuff right so you need

594
00:28:18,570 --> 00:28:22,230
something that could allow you to have

595
00:28:20,550 --> 00:28:23,700
access to all those different data

596
00:28:22,230 --> 00:28:27,240
structures and the virtual addresses

597
00:28:23,700 --> 00:28:29,940
right so this is basically what

598
00:28:27,240 --> 00:28:33,150
perfidious instrument right perfidious

599
00:28:29,940 --> 00:28:35,010
basically parses the entire file and

600
00:28:33,150 --> 00:28:36,990
passes each and every structure that is

601
00:28:35,010 --> 00:28:39,060
present inside of effect and then it

602
00:28:36,990 --> 00:28:41,400
performs all the recalculations for you

603
00:28:39,060 --> 00:28:43,590
right so what it does is basically it

604
00:28:41,400 --> 00:28:45,060
takes your text section that is

605
00:28:43,590 --> 00:28:47,520
basically just a bunch bunch of bytes

606
00:28:45,060 --> 00:28:50,159
converts it into being assembly code

607
00:28:47,520 --> 00:28:52,830
corresponding to that text section then

608
00:28:50,160 --> 00:28:54,540
it performs injections in between the

609
00:28:52,830 --> 00:28:56,699
next section so that the original

610
00:28:54,540 --> 00:28:58,860
functionality of a GUI is not interfered

611
00:28:56,700 --> 00:29:00,300
with right the original some sanity

612
00:28:58,860 --> 00:29:02,580
remains the same so basically you have

613
00:29:00,300 --> 00:29:04,169
changed the size of the next section so

614
00:29:02,580 --> 00:29:05,879
then the next thing that you need to do

615
00:29:04,170 --> 00:29:08,250
is change all the addresses that come

616
00:29:05,880 --> 00:29:10,680
after it right so that is what it means

617
00:29:08,250 --> 00:29:12,930
to do it basically tries to control each

618
00:29:10,680 --> 00:29:14,640
and every aspect of effect so that you

619
00:29:12,930 --> 00:29:18,690
can alternate in the way that you want

620
00:29:14,640 --> 00:29:20,190
it to write it so the advantages of this

621
00:29:18,690 --> 00:29:23,520
approach is it would be really difficult

622
00:29:20,190 --> 00:29:25,050
to detect it statically right because it

623
00:29:23,520 --> 00:29:28,200
would have almost the same from

624
00:29:25,050 --> 00:29:29,970
Saturday's off the regular PG file then

625
00:29:28,200 --> 00:29:33,480
Ruby wouldn't be changed because the

626
00:29:29,970 --> 00:29:34,890
entropy of the text section connection

627
00:29:33,480 --> 00:29:37,230
with only section that contains the

628
00:29:34,890 --> 00:29:39,720
board rate so the entropy of the PE file

629
00:29:37,230 --> 00:29:41,880
would be the rate and reseal the

630
00:29:39,720 --> 00:29:43,620
malicious code itself is divided into

631
00:29:41,880 --> 00:29:45,180
smaller pieces and ejected into the

632
00:29:43,620 --> 00:29:47,189
patrols flow of the regular program

633
00:29:45,180 --> 00:29:49,080
right so you can have chunks that are

634
00:29:47,190 --> 00:29:51,810
present at length

635
00:29:49,080 --> 00:29:53,580
so when you execute it then that is the

636
00:29:51,810 --> 00:29:57,840
only times that thirty malicious code to

637
00:29:53,580 --> 00:30:00,860
be executed right so this is something

638
00:29:57,840 --> 00:30:03,060
that I and my friends are not to do and

639
00:30:00,860 --> 00:30:06,360
how would you detect something like this

640
00:30:03,060 --> 00:30:08,159
right the easiest approach to solve all

641
00:30:06,360 --> 00:30:10,379
these problems is basically only on our

642
00:30:08,160 --> 00:30:13,430
by piston software on your network now

643
00:30:10,380 --> 00:30:15,330
that is not really viable is it because

644
00:30:13,430 --> 00:30:17,700
it's not something that is really

645
00:30:15,330 --> 00:30:19,679
possible another approach is performing

646
00:30:17,700 --> 00:30:22,350
dynamic analysis on each and every P

647
00:30:19,680 --> 00:30:24,630
find that is passed for your network now

648
00:30:22,350 --> 00:30:26,909
that is something that can be done if

649
00:30:24,630 --> 00:30:28,110
you have a proper endpoint induction

650
00:30:26,910 --> 00:30:30,480
system that is running on your network

651
00:30:28,110 --> 00:30:33,540
and performing all all those things for

652
00:30:30,480 --> 00:30:35,400
you but it's not something that contains

653
00:30:33,540 --> 00:30:37,470
speed right because each and every P

654
00:30:35,400 --> 00:30:39,750
file that is passed by Michael will need

655
00:30:37,470 --> 00:30:43,050
to be dynamic executed inside a samples

656
00:30:39,750 --> 00:30:45,120
right so the third approach is something

657
00:30:43,050 --> 00:30:48,090
that I found out while I was presenting

658
00:30:45,120 --> 00:30:49,469
the same thing at Singapore a group of

659
00:30:48,090 --> 00:30:51,720
researchers is currently working on a

660
00:30:49,470 --> 00:30:53,880
technique that could be used to create a

661
00:30:51,720 --> 00:30:56,010
graph hash for the control flow graph of

662
00:30:53,880 --> 00:30:57,750
a program right you insert okie if i

663
00:30:56,010 --> 00:30:59,970
iearnt creates the hash or the control

664
00:30:57,750 --> 00:31:01,590
flow of a program right so if your

665
00:30:59,970 --> 00:31:03,660
controls flow hash is basically

666
00:31:01,590 --> 00:31:05,459
different from the hash of the original

667
00:31:03,660 --> 00:31:07,050
program you could easily say this

668
00:31:05,460 --> 00:31:09,240
program or something different from the

669
00:31:07,050 --> 00:31:10,860
original program right so this is one of

670
00:31:09,240 --> 00:31:12,620
the things that would be easily used to

671
00:31:10,860 --> 00:31:15,840
detect this type of injection technique

672
00:31:12,620 --> 00:31:18,179
now perfidious is currently under

673
00:31:15,840 --> 00:31:23,699
development but I will just like to show

674
00:31:18,180 --> 00:31:26,070
you a peek into how it does something so

675
00:31:23,700 --> 00:31:28,860
our sidious basically creates a class

676
00:31:26,070 --> 00:31:34,110
file of the entire piece tough to define

677
00:31:28,860 --> 00:31:35,939
that you pass into the program and then

678
00:31:34,110 --> 00:31:38,300
you would just say print demo and it

679
00:31:35,940 --> 00:31:38,300
will basically

680
00:31:54,690 --> 00:32:00,519
Hey so what it does is it tries to parse

681
00:31:57,970 --> 00:32:02,799
through he identify that identify was

682
00:32:00,519 --> 00:32:04,240
the structure that were found inside you

683
00:32:02,799 --> 00:32:06,250
the be fine and then it creates the

684
00:32:04,240 --> 00:32:09,909
object which is present at that address

685
00:32:06,250 --> 00:32:11,860
now this P now this P of P object

686
00:32:09,909 --> 00:32:13,870
basically contains all the individual

687
00:32:11,860 --> 00:32:15,639
data structures inside the P fight so

688
00:32:13,870 --> 00:32:19,360
you can access that that data structure

689
00:32:15,639 --> 00:32:22,209
has some castle of the p5 right so you

690
00:32:19,360 --> 00:32:25,299
could say I want to see the header of

691
00:32:22,210 --> 00:32:29,080
this particular key fight so if I ran

692
00:32:25,299 --> 00:32:32,559
that to basically make the dog header

693
00:32:29,080 --> 00:32:33,639
and was the hash is that for that

694
00:32:32,559 --> 00:32:36,100
particular toss header

695
00:32:33,639 --> 00:32:39,370
now how is how are those hashes really

696
00:32:36,100 --> 00:32:45,428
useful to you like how could those

697
00:32:39,370 --> 00:32:51,969
hashes be used anyone they buy really

698
00:32:45,429 --> 00:32:53,740
need intermediate hashes not just for

699
00:32:51,970 --> 00:32:55,539
das header but for any data structure

700
00:32:53,740 --> 00:33:04,269
inside of a vine why do you need

701
00:32:55,539 --> 00:33:06,399
intermediate harshness exactly over for

702
00:33:04,269 --> 00:33:09,279
a particular family word sections are

703
00:33:06,399 --> 00:33:11,949
used in order to take the malicious code

704
00:33:09,279 --> 00:33:14,500
so it basically allows you to pinpoint

705
00:33:11,950 --> 00:33:16,090
exactly what has changed in between them

706
00:33:14,500 --> 00:33:18,309
out that malicious file and the be fine

707
00:33:16,090 --> 00:33:20,199
right right now we are using input hash

708
00:33:18,309 --> 00:33:22,360
right but a good hash this is basically

709
00:33:20,200 --> 00:33:24,460
a hash of the inputs that have been done

710
00:33:22,360 --> 00:33:26,350
by a particular arrangement that is used

711
00:33:24,460 --> 00:33:29,559
currently in order to detect hunger

712
00:33:26,350 --> 00:33:31,928
samples right it is good enough but with

713
00:33:29,559 --> 00:33:33,970
only balls on the it only functions is

714
00:33:31,929 --> 00:33:35,909
wrong the important opportunity favorite

715
00:33:33,970 --> 00:33:38,559
for defining a function and evolution

716
00:33:35,909 --> 00:33:41,649
right the most on hash would be

717
00:33:38,559 --> 00:33:44,649
different or that is like so this can be

718
00:33:41,649 --> 00:33:45,939
used as a much better hashing mechanism

719
00:33:44,649 --> 00:33:50,529
in order to detect changes between

720
00:33:45,940 --> 00:33:53,710
events so as you can see strange

721
00:33:50,529 --> 00:33:55,750
function or use uses just like normal

722
00:33:53,710 --> 00:33:59,830
you can use print function just like

723
00:33:55,750 --> 00:34:04,360
inaudible print he is a state assumption

724
00:33:59,830 --> 00:34:07,120
that are present inside the p5 no just

725
00:34:04,360 --> 00:34:09,250
passing the B - and having the ability

726
00:34:07,120 --> 00:34:11,319
to reduce obsess is not enough right you

727
00:34:09,250 --> 00:34:13,449
need the ability to change those

728
00:34:11,320 --> 00:34:18,040
structures that are messing inside now

729
00:34:13,449 --> 00:34:20,290
this is a demo that one of the data

730
00:34:18,040 --> 00:34:22,000
structures being changed right so what I

731
00:34:20,290 --> 00:34:23,710
am doing is basically I am for spending

732
00:34:22,000 --> 00:34:25,449
the original toss stuff that is present

733
00:34:23,710 --> 00:34:28,899
itself like the message of the Kosta

734
00:34:25,449 --> 00:34:30,850
that is present inside the movie if I

735
00:34:28,899 --> 00:34:32,770
which is put it on exe and then I am

736
00:34:30,850 --> 00:34:37,899
changing the cost of message crucial for

737
00:34:32,770 --> 00:34:40,300
2019 and then printing that right so in

738
00:34:37,899 --> 00:34:41,710
the same manner the same thing could be

739
00:34:40,300 --> 00:34:43,690
applied to each and every day

740
00:34:41,710 --> 00:34:46,000
destruction inside abilify or we would

741
00:34:43,690 --> 00:34:47,770
have at the end is you have complete

742
00:34:46,000 --> 00:34:49,830
control one each and every destruction

743
00:34:47,770 --> 00:34:52,149
in size of a file and you would have

744
00:34:49,830 --> 00:34:54,190
relationships between those data such as

745
00:34:52,149 --> 00:34:56,020
right so say you change if you change

746
00:34:54,190 --> 00:34:59,560
the message of the be fine structure

747
00:34:56,020 --> 00:35:01,420
right you you can like equal length I

748
00:34:59,560 --> 00:35:03,580
think the checksum of the if I will

749
00:35:01,420 --> 00:35:05,200
change the Datagram of the beef I will

750
00:35:03,580 --> 00:35:08,110
change of itself that is what we're

751
00:35:05,200 --> 00:35:09,790
trying to achieve a maximum control over

752
00:35:08,110 --> 00:35:12,790
the B file so that you have the ability

753
00:35:09,790 --> 00:35:16,210
to change it as much as you want once

754
00:35:12,790 --> 00:35:18,670
this is done we come to the future of

755
00:35:16,210 --> 00:35:21,870
the message right so our food is to

756
00:35:18,670 --> 00:35:25,060
basically complete the parsing and the

757
00:35:21,870 --> 00:35:28,900
editing of a key file - ever once that

758
00:35:25,060 --> 00:35:30,430
is done you basically establish as the

759
00:35:28,900 --> 00:35:32,620
establishing the relationships between

760
00:35:30,430 --> 00:35:34,750
made Islita structures and then you

761
00:35:32,620 --> 00:35:36,549
don't have a good enough knowledge of

762
00:35:34,750 --> 00:35:39,010
people those in order that is used in

763
00:35:36,550 --> 00:35:40,600
order to execute the be files the next

764
00:35:39,010 --> 00:35:42,070
step for this project would be to

765
00:35:40,600 --> 00:35:43,750
develop a machine learning algorithm

766
00:35:42,070 --> 00:35:46,870
that will automatically change the

767
00:35:43,750 --> 00:35:49,570
structures inside ePHI to closely

768
00:35:46,870 --> 00:35:51,640
resemble malicious samples this will

769
00:35:49,570 --> 00:35:54,250
basically be used to identify new

770
00:35:51,640 --> 00:35:57,940
methods of rejection and Psyche he finds

771
00:35:54,250 --> 00:36:00,160
so that is what we are right thank you

772
00:35:57,940 --> 00:36:03,090
for your time

773
00:36:00,160 --> 00:36:03,089
any questions

774
00:36:07,150 --> 00:36:13,160
early versions of this available so

775
00:36:10,760 --> 00:36:16,640
since we are developing this entire

776
00:36:13,160 --> 00:36:21,020
library its operating I will be

777
00:36:16,640 --> 00:36:22,940
releasing like it's online but it's a

778
00:36:21,020 --> 00:36:24,740
private repository right now because it

779
00:36:22,940 --> 00:36:26,600
does not reach the version which can be

780
00:36:24,740 --> 00:36:29,000
released so by December we'll be able to

781
00:36:26,600 --> 00:36:31,670
release of an alpha version of this

782
00:36:29,000 --> 00:36:34,070
particular library at that time it will

783
00:36:31,670 --> 00:36:37,430
be available to everyone high school but

784
00:36:34,070 --> 00:36:53,600
currently no since we cannot release

785
00:36:37,430 --> 00:37:07,720
incomplete project so this NMOS is being

786
00:36:53,600 --> 00:37:07,720
under doesn't this is the

