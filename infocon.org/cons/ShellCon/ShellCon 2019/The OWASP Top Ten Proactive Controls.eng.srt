1
00:00:00,570 --> 00:00:06,660
it's it's it's another top ten list it's

2
00:00:03,300 --> 00:00:09,300
an answer to the wasps top 10 which is a

3
00:00:06,660 --> 00:00:11,099
list of risks right a list of security

4
00:00:09,300 --> 00:00:13,469
risk really from a tacher point of view

5
00:00:11,099 --> 00:00:16,079
you owe us proactive controls is a

6
00:00:13,469 --> 00:00:18,359
defensive top ten list around the same

7
00:00:16,079 --> 00:00:20,580
subject matter from from a program

8
00:00:18,359 --> 00:00:23,130
programmatic defense point of view this

9
00:00:20,580 --> 00:00:25,439
is not a standard this is just a another

10
00:00:23,130 --> 00:00:27,359
top ten list to spread awareness to

11
00:00:25,439 --> 00:00:29,010
developers about application security

12
00:00:27,359 --> 00:00:30,750
we looked about defining security

13
00:00:29,010 --> 00:00:33,420
requirements leveraging different

14
00:00:30,750 --> 00:00:37,110
frameworks for security secure access to

15
00:00:33,420 --> 00:00:40,320
our database and code injection and the

16
00:00:37,110 --> 00:00:43,230
validation is good ID implement digital

17
00:00:40,320 --> 00:00:45,600
identity next-generation login type

18
00:00:43,230 --> 00:00:48,328
mechanisms one for Scott access control

19
00:00:45,600 --> 00:00:50,190
design protect data everywhere and

20
00:00:48,329 --> 00:00:51,989
transit and storage you want to

21
00:00:50,190 --> 00:00:54,899
implement security logging and

22
00:00:51,989 --> 00:00:56,669
monitoring so our security teams in real

23
00:00:54,899 --> 00:00:58,920
time know what's happening and our app

24
00:00:56,670 --> 00:01:03,059
security wise we want to handle errors

25
00:00:58,920 --> 00:01:04,860
and exceptions in a granular fashion and

26
00:01:03,059 --> 00:01:07,158
so we're going this presentation let's

27
00:01:04,860 --> 00:01:07,159
do this

28
00:01:17,010 --> 00:01:22,110
60 or so requirements for developers

29
00:01:19,830 --> 00:01:24,960
that define what security is for an

30
00:01:22,110 --> 00:01:26,700
application and this standards broken up

31
00:01:24,960 --> 00:01:29,160
in three different categories three of

32
00:01:26,700 --> 00:01:31,080
the tiers one for every app a second

33
00:01:29,160 --> 00:01:33,090
level for like sensitive data and a

34
00:01:31,080 --> 00:01:35,490
third level for like critical and

35
00:01:33,090 --> 00:01:36,480
infrastructure applications so you can

36
00:01:35,490 --> 00:01:38,550
start with the level one requirements

37
00:01:36,480 --> 00:01:40,620
work your way up over time depending on

38
00:01:38,550 --> 00:01:42,450
the kind of risk profile you have in

39
00:01:40,620 --> 00:01:45,780
your app this is examples of the

40
00:01:42,450 --> 00:01:47,580
requirements verify that communication

41
00:01:45,780 --> 00:01:49,770
between application components to the

42
00:01:47,580 --> 00:01:52,229
api's middleware data layers are

43
00:01:49,770 --> 00:01:54,840
authenticated component um the least

44
00:01:52,229 --> 00:01:56,460
necessary kernel is needed so that's

45
00:01:54,840 --> 00:01:57,570
talking about I get a micro service

46
00:01:56,460 --> 00:01:59,100
hierarchy of all these different

47
00:01:57,570 --> 00:02:01,619
services we want to keep verify

48
00:01:59,100 --> 00:02:03,240
authentication we each hop well the

49
00:02:01,620 --> 00:02:27,020
application that's what this is trying

50
00:02:03,240 --> 00:02:31,380
to say for this for your team and for

51
00:02:27,020 --> 00:02:33,480
your team and and customizing for your

52
00:02:31,380 --> 00:02:35,609
specific organization or whatever

53
00:02:33,480 --> 00:02:37,980
standard you have is better than what we

54
00:02:35,610 --> 00:02:42,269
usually do now which is bloomin free for

55
00:02:37,980 --> 00:02:55,589
all it comes security bugs when I take a

56
00:02:42,269 --> 00:02:57,750
more proactive approach we might use a

57
00:02:55,590 --> 00:02:59,670
certain identity service have a certain

58
00:02:57,750 --> 00:03:01,680
access control design or other

59
00:02:59,670 --> 00:03:04,190
procedures and policies around privacy

60
00:03:01,680 --> 00:03:06,390
you want to make sure that is those

61
00:03:04,190 --> 00:03:08,700
custom requirements about our

62
00:03:06,390 --> 00:03:11,458
organization is a part of our standards

63
00:03:08,700 --> 00:03:14,609
as well so the real point here is to

64
00:03:11,459 --> 00:03:16,140
take the SDS standard and forked for

65
00:03:14,610 --> 00:03:18,860
your organization that's the real

66
00:03:16,140 --> 00:03:18,859
purpose of it

67
00:03:31,190 --> 00:03:35,730
identity services gonna work for the

68
00:03:33,660 --> 00:03:37,680
access control policy or any rules you

69
00:03:35,730 --> 00:03:39,869
may have about validation of complex

70
00:03:37,680 --> 00:03:42,300
data or a certain standard on logging

71
00:03:39,870 --> 00:03:44,580
whatever that is the more detailed your

72
00:03:42,300 --> 00:03:48,030
standards can get the more developers

73
00:03:44,580 --> 00:03:49,380
can act upon it and the whole point of

74
00:03:48,030 --> 00:03:52,350
this first one I know it's kind of a

75
00:03:49,380 --> 00:03:55,170
soft entry non-technical but developers

76
00:03:52,350 --> 00:03:57,120
are almost never given clear security

77
00:03:55,170 --> 00:03:59,070
requirements at the beginning of a

78
00:03:57,120 --> 00:04:03,260
project and there you can give in

79
00:03:59,070 --> 00:04:03,260
general guidelines or tools or like

80
00:04:25,310 --> 00:04:52,890
security out there using different

81
00:04:30,600 --> 00:05:14,550
frameworks to read XMP toolkit and

82
00:04:52,890 --> 00:05:17,310
Apache execution in 2015 security

83
00:05:14,550 --> 00:05:19,500
automation so that infrastructure itself

84
00:05:17,310 --> 00:05:22,050
is constantly filled with critical

85
00:05:19,500 --> 00:05:24,180
security bugs as well and so we're using

86
00:05:22,050 --> 00:05:26,010
these third-party components for

87
00:05:24,180 --> 00:05:29,419
security and development we have this

88
00:05:26,010 --> 00:05:31,710
massive responsibility for all update I

89
00:05:29,419 --> 00:05:34,500
think they got response time to be

90
00:05:31,710 --> 00:05:36,479
audience members when we have a third

91
00:05:34,500 --> 00:05:39,030
party live but how often should we check

92
00:05:36,480 --> 00:05:40,890
our application to see if the

93
00:05:39,030 --> 00:05:42,059
third-party libraries are using her up

94
00:05:40,890 --> 00:05:46,530
today how often

95
00:05:42,060 --> 00:05:49,970
check on that what do you think that bra

96
00:05:46,530 --> 00:05:49,969
do you think that just Coco works

97
00:05:58,430 --> 00:06:03,180
yep so does yours you're saying is I

98
00:06:01,470 --> 00:06:05,400
don't want to have to scan for it I want

99
00:06:03,180 --> 00:06:07,889
to be reactive so as soon as it's soon

100
00:06:05,400 --> 00:06:09,989
as of insecure library is found on the

101
00:06:07,889 --> 00:06:12,300
learning that's how github rolls you're

102
00:06:09,990 --> 00:06:14,790
a good enough developer so if you're

103
00:06:12,300 --> 00:06:16,710
doing your own build environment anybody

104
00:06:14,790 --> 00:06:19,290
else I love by the way that's a eight

105
00:06:16,710 --> 00:06:21,870
plus answer that's good what else what

106
00:06:19,290 --> 00:06:23,520
else is out there how often do we check

107
00:06:21,870 --> 00:06:25,229
our code base for third-party libraries

108
00:06:23,520 --> 00:06:27,870
if we're doing more local development in

109
00:06:25,229 --> 00:06:29,580
our own Jenkins environment how often do

110
00:06:27,870 --> 00:06:34,889
we checked their party libraries for

111
00:06:29,580 --> 00:06:36,060
security click on times day that's kind

112
00:06:34,889 --> 00:06:38,190
of what I'm thinking like every time a

113
00:06:36,060 --> 00:06:39,900
developer compiles every time we build

114
00:06:38,190 --> 00:06:42,150
every time they touch the codebase in

115
00:06:39,900 --> 00:06:45,090
some way we want to run testing to check

116
00:06:42,150 --> 00:06:49,590
their third-party library security the

117
00:06:45,090 --> 00:06:51,000
other the other big piece of this is the

118
00:06:49,590 --> 00:06:52,469
other big piece of this is where the

119
00:06:51,000 --> 00:06:54,330
first bits legacy and we're not

120
00:06:52,470 --> 00:06:56,400
developing anymore you want to have some

121
00:06:54,330 --> 00:06:58,380
kind of offline process so even if

122
00:06:56,400 --> 00:07:00,150
you're not developing it's good to keep

123
00:06:58,380 --> 00:07:02,280
an eye on the codebase even as it gets

124
00:07:00,150 --> 00:07:04,469
into sunset both or retire maybe they're

125
00:07:02,280 --> 00:07:06,359
not working on it we should still be

126
00:07:04,470 --> 00:07:08,970
checking for security of the daily basis

127
00:07:06,360 --> 00:07:11,280
remember I said struts 10 some major

128
00:07:08,970 --> 00:07:22,470
burner builders a yearly basis anyone

129
00:07:11,280 --> 00:07:29,099
know why this see - why is this

130
00:07:22,470 --> 00:07:31,979
significant to all of us so it's one

131
00:07:29,100 --> 00:07:35,870
server not being patched so a few notes

132
00:07:31,979 --> 00:07:35,870
on third-party libraries as we have a

133
00:07:47,180 --> 00:08:55,440
like security versions at the same time

134
00:07:50,490 --> 00:08:57,600
is also retired but that's out there

135
00:08:55,440 --> 00:08:59,970
right now because he's using the best of

136
00:08:57,600 --> 00:09:02,160
retooling do you think that alerts that

137
00:08:59,970 --> 00:09:04,080
we get tell us about all of our

138
00:09:02,160 --> 00:09:07,290
buildings and the third-party library

139
00:09:04,080 --> 00:09:09,300
code out there it's not even close Ron

140
00:09:07,290 --> 00:09:12,209
Paris was looking at the react world in

141
00:09:09,300 --> 00:09:14,880
2018 in thousand three bucks and react

142
00:09:12,210 --> 00:09:17,220
third-party modules guess how many bugs

143
00:09:14,880 --> 00:09:20,550
reported in reactive 2018 that'd be

144
00:09:17,220 --> 00:09:23,190
three and this is what that says to me

145
00:09:20,550 --> 00:09:26,130
is the JavaScript ecosystem for those

146
00:09:23,190 --> 00:09:28,440
others there's massive amounts of

147
00:09:26,130 --> 00:09:30,450
insecurity out there that someone's

148
00:09:28,440 --> 00:09:32,640
looking for or reporting on we're just

149
00:09:30,450 --> 00:09:34,710
using this stuff plainly hoping doesn't

150
00:09:32,640 --> 00:09:37,080
have a security problem and depending on

151
00:09:34,710 --> 00:09:40,589
other researchers to find bugs for us

152
00:09:37,080 --> 00:09:43,200
and reported to us for us to be secure a

153
00:09:40,589 --> 00:09:45,780
tsk it's not nerdy there's so much

154
00:09:43,200 --> 00:09:48,480
third-party library code out there that

155
00:09:45,780 --> 00:09:50,819
even if even if

156
00:09:48,480 --> 00:09:53,280
the dependency checkers don't tell you

157
00:09:50,820 --> 00:09:55,530
there's a problem I would still keep all

158
00:09:53,280 --> 00:09:57,990
of your code on your third-party code up

159
00:09:55,530 --> 00:09:59,910
to date at all times this is not easy to

160
00:09:57,990 --> 00:10:02,040
do but the third the point I'm trying to

161
00:09:59,910 --> 00:10:06,530
make is the third-party checkers only

162
00:10:02,040 --> 00:10:06,530
address part of the problem so there's a

163
00:10:51,740 --> 00:10:57,900
lot of folks who are not as wise and

164
00:10:54,810 --> 00:10:59,219
brilliant as you are sir would say input

165
00:10:57,900 --> 00:11:01,319
validation right have you heard that

166
00:10:59,220 --> 00:11:02,880
answer before just validate your data

167
00:11:01,320 --> 00:11:04,290
before you put in the query and you're

168
00:11:02,880 --> 00:11:06,540
all set have you heard that answer

169
00:11:04,290 --> 00:11:11,069
before this is not right this is not a

170
00:11:06,540 --> 00:11:13,290
good answer for example email address

171
00:11:11,070 --> 00:11:19,230
come in my account profile edit my

172
00:11:13,290 --> 00:11:21,120
profile and you're going to validate

173
00:11:19,230 --> 00:11:42,750
this is a good email address right or

174
00:11:21,120 --> 00:11:43,980
security yeah it's crazy broad but this

175
00:11:42,750 --> 00:11:46,980
is an email address

176
00:11:43,980 --> 00:11:50,210
legit it's active so you could send me

177
00:11:46,980 --> 00:11:50,210
email here and I'll reply

178
00:11:56,190 --> 00:12:00,870
like this I'm going to select some data

179
00:11:58,350 --> 00:12:03,780
from my customer table where that email

180
00:12:00,870 --> 00:12:07,110
is that email we just entered in right

181
00:12:03,780 --> 00:12:10,140
if we just validated our security there

182
00:12:07,110 --> 00:12:13,230
it is there's a final query select data

183
00:12:10,140 --> 00:12:16,860
from a customer table where email is Jim

184
00:12:13,230 --> 00:12:20,300
or one does not equal medical calm this

185
00:12:16,860 --> 00:12:23,340
is always true it's a very evil or true

186
00:12:20,300 --> 00:12:25,349
will cause this email check to speak nor

187
00:12:23,340 --> 00:12:28,380
because is that true is that true or

188
00:12:25,350 --> 00:12:30,420
true the entire customer table will get

189
00:12:28,380 --> 00:12:32,640
dumped from illegal email address so we

190
00:12:30,420 --> 00:12:35,010
got a parameter on our queries by the

191
00:12:32,640 --> 00:12:36,960
way third single injection encodes the

192
00:12:35,010 --> 00:12:39,569
vulnerability any time you're building

193
00:12:36,960 --> 00:12:41,220
sequel where you're cleaning it with

194
00:12:39,570 --> 00:12:43,410
strange instruction that sequel

195
00:12:41,220 --> 00:12:45,060
injection in code what we want to do is

196
00:12:43,410 --> 00:12:46,860
we want to promote rise our queries

197
00:12:45,060 --> 00:13:00,630
ready for which your language of choice

198
00:12:46,860 --> 00:13:03,300
call out a language we decode which is

199
00:13:00,630 --> 00:13:06,030
an XML parser abstraction that turns off

200
00:13:03,300 --> 00:13:07,740
all the different dangerous XML features

201
00:13:06,030 --> 00:13:09,630
as an example the best practice I don't

202
00:13:07,740 --> 00:13:10,380
see anywhere else it's really good so

203
00:13:09,630 --> 00:13:12,960
where am I going

204
00:13:10,380 --> 00:13:15,810
yeah we have let's do let's do something

205
00:13:12,960 --> 00:13:19,380
let's do some hql that's getting obscure

206
00:13:15,810 --> 00:13:23,069
so here's I got an hql statement from

207
00:13:19,380 --> 00:13:25,830
java using hibernate in two of the Duke

208
00:13:23,070 --> 00:13:28,620
so I'll say from the inventory objects

209
00:13:25,830 --> 00:13:31,830
where the product ID is a certain value

210
00:13:28,620 --> 00:13:33,870
there's no there it's oql object query

211
00:13:31,830 --> 00:13:35,910
intention we want to cram a tries the

212
00:13:33,870 --> 00:13:38,190
product item and bind the data from the

213
00:13:35,910 --> 00:13:41,189
user to that property interaction goes

214
00:13:38,190 --> 00:13:42,810
away we have this also in c-sharp for u

215
00:13:41,190 --> 00:13:44,910
dot matters to c-sharp that's really

216
00:13:42,810 --> 00:13:46,739
even sure these days I'm a Java guy

217
00:13:44,910 --> 00:13:49,560
myself look I got am in c-sharp has come

218
00:13:46,740 --> 00:13:51,570
a long way so select from user where

219
00:13:49,560 --> 00:13:54,329
they used name is name and the passwords

220
00:13:51,570 --> 00:13:56,220
password and buying that data into our

221
00:13:54,330 --> 00:13:58,530
fine state and sequel injection goes

222
00:13:56,220 --> 00:14:01,110
away it performance benefits there's my

223
00:13:58,530 --> 00:14:03,600
relative job coach Java update the

224
00:14:01,110 --> 00:14:06,210
employee table set salary which our

225
00:14:03,600 --> 00:14:09,489
question mark placeholders there's our

226
00:14:06,210 --> 00:14:11,529
binding statement go query parameter

227
00:14:09,489 --> 00:14:14,109
I know you're shocked at how exciting

228
00:14:11,529 --> 00:14:17,769
these cone examples are but this and by

229
00:14:14,109 --> 00:14:19,989
the way we're talking about some

230
00:14:17,769 --> 00:14:22,600
injection we're talking about using

231
00:14:19,989 --> 00:14:24,389
query parameters ation now we're talking

232
00:14:22,600 --> 00:14:26,609
about where you can't apply

233
00:14:24,389 --> 00:14:29,739
privatization like an evil name or

234
00:14:26,609 --> 00:14:31,509
column name if your parameter izing a

235
00:14:29,739 --> 00:14:33,939
table name that's probably some weird

236
00:14:31,509 --> 00:14:36,369
design since it's a design flaw usually

237
00:14:33,939 --> 00:14:38,709
and if your parametrizing a column name

238
00:14:36,369 --> 00:14:39,999
and order buyer similar we just want to

239
00:14:38,709 --> 00:14:41,799
like do some kind of lookup map I

240
00:14:39,999 --> 00:14:44,559
usually give the user pick a number in

241
00:14:41,799 --> 00:14:46,209
my code that map's a column a which I

242
00:14:44,559 --> 00:14:48,129
safely add to the query from the

243
00:14:46,209 --> 00:14:50,378
dressing source there's a couple cheat

244
00:14:48,129 --> 00:14:52,119
sheets the body table shows you how to

245
00:14:50,379 --> 00:14:53,889
do sequel injection protection in many

246
00:14:52,119 --> 00:14:56,379
languages there's a great parent

247
00:14:53,889 --> 00:14:58,059
research teaching and it's just a SPS

248
00:14:56,379 --> 00:15:00,069
requirement number five point three

249
00:14:58,059 --> 00:15:02,230
point four so there's a document

250
00:15:00,069 --> 00:15:04,319
standard I talked about earlier that

251
00:15:02,230 --> 00:15:06,939
points to sequel injection defense

252
00:15:04,319 --> 00:15:08,889
alright we're talking about the LS

253
00:15:06,939 --> 00:15:11,649
practical controls where I'm control

254
00:15:08,889 --> 00:15:14,319
number four and if we're building a

255
00:15:11,649 --> 00:15:16,660
secure user interface we want to apply

256
00:15:14,319 --> 00:15:18,339
some kind of escaping library yeah maybe

257
00:15:16,660 --> 00:15:20,230
you plays on Python people you've got

258
00:15:18,339 --> 00:15:22,389
the ginger tube framework you know the

259
00:15:20,230 --> 00:15:24,459
markup safe library for HTML

260
00:15:22,389 --> 00:15:27,249
sanitization this is pretty legit so

261
00:15:24,459 --> 00:15:30,008
almost every language has some kind of

262
00:15:27,249 --> 00:15:33,249
escaping capability if we really want to

263
00:15:30,009 --> 00:15:36,100
do is use technology like go templates

264
00:15:33,249 --> 00:15:38,589
or react or angular which do a lot of

265
00:15:36,100 --> 00:15:41,470
the escaping for us when we escape

266
00:15:38,589 --> 00:15:43,929
attacks like this this is a cross-site

267
00:15:41,470 --> 00:15:47,559
scripting attack that gets added to a

268
00:15:43,929 --> 00:15:49,720
user interface in some way and if I

269
00:15:47,559 --> 00:15:51,999
escape this attack all the dangerous

270
00:15:49,720 --> 00:15:54,339
characters get get neutralized and then

271
00:15:51,999 --> 00:15:56,949
the attack that the attack would render

272
00:15:54,339 --> 00:15:59,619
I'll see it on screen but it will

273
00:15:56,949 --> 00:16:01,899
actually execute the attack and this is

274
00:15:59,619 --> 00:16:03,999
a big part of the cross-site scripting

275
00:16:01,899 --> 00:16:06,399
user interface security and building web

276
00:16:03,999 --> 00:16:08,259
applications without madness here's a

277
00:16:06,399 --> 00:16:11,049
little additional escaping and Here I am

278
00:16:08,259 --> 00:16:13,059
building an LDAP query to talk to an old

279
00:16:11,049 --> 00:16:14,919
school of education system and I'm

280
00:16:13,059 --> 00:16:17,199
escaping all in dangerous characters

281
00:16:14,919 --> 00:16:19,059
that could change the command I also

282
00:16:17,199 --> 00:16:21,008
have really specific escape for

283
00:16:19,059 --> 00:16:21,949
distinguished things and now that so

284
00:16:21,009 --> 00:16:24,860
this is been

285
00:16:21,950 --> 00:16:27,890
shows you whenever we're trying to stop

286
00:16:24,860 --> 00:16:30,020
injection very often one of the

287
00:16:27,890 --> 00:16:34,490
defensive strategies is escaping

288
00:16:30,020 --> 00:16:36,500
dangerous characters a watch project

289
00:16:34,490 --> 00:16:39,200
controls where at where at fracture

290
00:16:36,500 --> 00:16:42,440
control number five in the validation

291
00:16:39,200 --> 00:16:44,900
now so the basic rules of every piece of

292
00:16:42,440 --> 00:16:46,820
data entering your software regardless

293
00:16:44,900 --> 00:16:49,459
of the source should go through some

294
00:16:46,820 --> 00:16:52,310
kind of input validation layer a lot of

295
00:16:49,460 --> 00:16:55,670
these fields that we don't typically

296
00:16:52,310 --> 00:16:58,010
type into as a user often are less prone

297
00:16:55,670 --> 00:17:00,079
to validation like a cookie value or a

298
00:16:58,010 --> 00:17:01,730
header or a hidden field or something

299
00:17:00,080 --> 00:17:03,860
like that that's just part of the app

300
00:17:01,730 --> 00:17:05,660
not something to user types in these are

301
00:17:03,860 --> 00:17:07,430
often less prone to validation and

302
00:17:05,660 --> 00:17:08,810
there's like three kinds of validation

303
00:17:07,430 --> 00:17:10,850
we want to do sometimes you want to do

304
00:17:08,810 --> 00:17:13,250
exact match validation well there's a

305
00:17:10,849 --> 00:17:14,629
limited list of choices most of the time

306
00:17:13,250 --> 00:17:17,900
you want to do known good likeness

307
00:17:14,630 --> 00:17:20,270
validation to like define a pattern is

308
00:17:17,900 --> 00:17:22,850
reject everything else sometimes we're

309
00:17:20,270 --> 00:17:25,250
looking for specific attacks or we can

310
00:17:22,849 --> 00:17:28,069
pick up places another validation code

311
00:17:25,250 --> 00:17:30,460
that we know only attacker can get to

312
00:17:28,069 --> 00:17:32,960
let's look at that let's let's do that

313
00:17:30,460 --> 00:17:34,640
before we get to other validation rules

314
00:17:32,960 --> 00:17:36,320
you know a lot of my code and I will do

315
00:17:34,640 --> 00:17:37,610
validation anymore because I'm

316
00:17:36,320 --> 00:17:40,520
supporting so many international

317
00:17:37,610 --> 00:17:42,260
languages so the very least I do plain

318
00:17:40,520 --> 00:17:44,420
checking I make sure that all the

319
00:17:42,260 --> 00:17:46,370
characters are printable out of control

320
00:17:44,420 --> 00:17:49,520
character and then I check to make sure

321
00:17:46,370 --> 00:17:51,979
that that the the feel that about what

322
00:17:49,520 --> 00:17:56,000
my database are similar is limited by a

323
00:17:51,980 --> 00:17:57,650
certain size to do at least this other

324
00:17:56,000 --> 00:18:01,070
kinds of special validation are like

325
00:17:57,650 --> 00:18:03,680
validating URLs to secure open redress I

326
00:18:01,070 --> 00:18:07,490
want to I want to make sure that that

327
00:18:03,680 --> 00:18:11,020
the URL either exactly equals what I'm

328
00:18:07,490 --> 00:18:14,420
expecting or starts with the HBS scheme

329
00:18:11,020 --> 00:18:17,060
mannequin calm and a slash to live in

330
00:18:14,420 --> 00:18:20,750
all that that URL to my specific domain

331
00:18:17,060 --> 00:18:22,399
so I also Here I am doing URL validation

332
00:18:20,750 --> 00:18:25,010
athan react itself

333
00:18:22,400 --> 00:18:27,000
I want to avoid JavaScript URLs I want

334
00:18:25,010 --> 00:18:29,908
to avoid dating URL

335
00:18:27,000 --> 00:18:34,710
because prospecting cost injection so

336
00:18:29,909 --> 00:18:37,500
I'm checking if the URL is HTTP or HTTPS

337
00:18:34,710 --> 00:18:39,210
only so when they render the link I'm

338
00:18:37,500 --> 00:18:41,460
only gonna render the link if it's a

339
00:18:39,210 --> 00:18:43,980
safe protocol if it's JavaScript that's

340
00:18:41,460 --> 00:18:45,330
a part of all I'm not gonna render it so

341
00:18:43,980 --> 00:18:46,590
there's another kind of specialized

342
00:18:45,330 --> 00:18:49,710
Allen agent that was a little bit

343
00:18:46,590 --> 00:18:52,980
circuitous controls we're now talking

344
00:18:49,710 --> 00:18:55,260
about control number six implementation

345
00:18:52,980 --> 00:18:58,770
of digital identity like handling

346
00:18:55,260 --> 00:19:00,990
logging systems what is authentication

347
00:18:58,770 --> 00:19:03,270
first of all well it doesn't end here is

348
00:19:00,990 --> 00:19:04,950
a identity dump it's establishing the

349
00:19:03,270 --> 00:19:06,690
who user is right that's all it is it's

350
00:19:04,950 --> 00:19:09,179
establishing that someone is who they

351
00:19:06,690 --> 00:19:11,190
claim to be authenticated session is an

352
00:19:09,179 --> 00:19:13,320
area of memory on the server that we use

353
00:19:11,190 --> 00:19:15,240
to track if someone's logged in and a

354
00:19:13,320 --> 00:19:16,710
lot of the server-side sessions is well

355
00:19:15,240 --> 00:19:19,320
we will wait and modern development a

356
00:19:16,710 --> 00:19:21,539
lot of us are moving to JSON web tokens

357
00:19:19,320 --> 00:19:23,610
that are stateless and depend upon a

358
00:19:21,539 --> 00:19:26,100
digital signature to make sure they're

359
00:19:23,610 --> 00:19:27,510
not tampered with routes anyways I'm

360
00:19:26,100 --> 00:19:29,309
going to talk about modern password

361
00:19:27,510 --> 00:19:31,320
policy what do you think you've been

362
00:19:29,309 --> 00:19:32,940
password really good policy is wrote

363
00:19:31,320 --> 00:19:35,280
password these days anybody want to

364
00:19:32,940 --> 00:19:38,900
childhood before I before you go down my

365
00:19:35,280 --> 00:19:38,899
my rant on passwords

366
00:19:50,539 --> 00:19:56,520
we also please make a unique for every

367
00:19:53,309 --> 00:19:58,710
single website - yes and then average

368
00:19:56,520 --> 00:20:00,600
people about 90 counts on the web so

369
00:19:58,710 --> 00:20:05,100
please give us 90 different passwords

370
00:20:00,600 --> 00:20:08,490
you gotta remember there is nuts right

371
00:20:05,100 --> 00:20:10,230
so we there's a new standard from NIST

372
00:20:08,490 --> 00:20:12,059
which was trying to change this they

373
00:20:10,230 --> 00:20:14,850
want to set a whole new set of rules on

374
00:20:12,059 --> 00:20:18,809
on what a password policy is this is

375
00:20:14,850 --> 00:20:21,149
this special publication 800-53 beef the

376
00:20:18,809 --> 00:20:23,070
new digital authentication guidelines it

377
00:20:21,150 --> 00:20:26,070
would have changed the burden of the

378
00:20:23,070 --> 00:20:27,600
password on to the verifier and take

379
00:20:26,070 --> 00:20:30,030
some of the burden off to use whenever

380
00:20:27,600 --> 00:20:32,219
possible so rule number one don't limit

381
00:20:30,030 --> 00:20:33,870
the the characters of a password and

382
00:20:32,220 --> 00:20:36,090
password to contains literally any

383
00:20:33,870 --> 00:20:38,209
printable character should be acceptable

384
00:20:36,090 --> 00:20:41,120
number two the size should be

385
00:20:38,210 --> 00:20:43,670
minimum eight we kind of disagree at the

386
00:20:41,120 --> 00:20:45,350
ASDs standard but this says eight

387
00:20:43,670 --> 00:20:47,330
characters are just fine

388
00:20:45,350 --> 00:20:48,469
especially if you're also using

389
00:20:47,330 --> 00:20:51,199
multi-factor

390
00:20:48,470 --> 00:20:53,750
we've also something also missed asks us

391
00:20:51,200 --> 00:20:56,120
to block passwords that are contextual

392
00:20:53,750 --> 00:20:57,740
to our service like where it shouldn't

393
00:20:56,120 --> 00:20:58,699
contain the word password because it is

394
00:20:57,740 --> 00:21:00,290
a password field

395
00:20:58,700 --> 00:21:03,020
it shouldn't contain the name of our

396
00:21:00,290 --> 00:21:06,260
business or the type of business and we

397
00:21:03,020 --> 00:21:08,780
want to have like 10 to 15 context words

398
00:21:06,260 --> 00:21:10,790
that we want to look for and block out

399
00:21:08,780 --> 00:21:13,100
of a password next we want to check

400
00:21:10,790 --> 00:21:15,800
against the list of common passwords

401
00:21:13,100 --> 00:21:18,590
this is often how group force attackers

402
00:21:15,800 --> 00:21:21,290
go after an account they know the if the

403
00:21:18,590 --> 00:21:24,830
attacker those and username though try a

404
00:21:21,290 --> 00:21:27,020
large list of common passwords the most

405
00:21:24,830 --> 00:21:29,960
common passwords that would normally fit

406
00:21:27,020 --> 00:21:31,490
your policy and use a large number of

407
00:21:29,960 --> 00:21:33,500
those to attack an account with an

408
00:21:31,490 --> 00:21:35,720
intelligent word list as a kind of print

409
00:21:33,500 --> 00:21:37,910
force and so the word defend we're

410
00:21:35,720 --> 00:21:40,310
building our own authentication system

411
00:21:37,910 --> 00:21:43,070
or using authentication servers there

412
00:21:40,310 --> 00:21:45,800
should be a capability to block the top

413
00:21:43,070 --> 00:21:47,810
fifty to one hundred and fifty thousand

414
00:21:45,800 --> 00:21:50,450
common passwords used in the world today

415
00:21:47,810 --> 00:21:52,490
that would ordinarily figure policy that

416
00:21:50,450 --> 00:21:55,460
we would have that block Daniel nice

417
00:21:52,490 --> 00:21:58,730
learn some of the unbounding value folks

418
00:21:55,460 --> 00:22:00,410
have a set list github page with these

419
00:21:58,730 --> 00:22:02,900
millions millions of billions and

420
00:22:00,410 --> 00:22:05,870
password in various lists that you can

421
00:22:02,900 --> 00:22:08,930
use to feed your own systems next you

422
00:22:05,870 --> 00:22:11,419
want to block a list of user name

423
00:22:08,930 --> 00:22:12,980
password pairs so this is called

424
00:22:11,420 --> 00:22:15,080
credential stuffing it's a relatively

425
00:22:12,980 --> 00:22:18,410
new category and what they're suggesting

426
00:22:15,080 --> 00:22:21,710
here is that there's been about 7

427
00:22:18,410 --> 00:22:23,630
billion username password combinations

428
00:22:21,710 --> 00:22:27,730
leaked to the world and breaches in the

429
00:22:23,630 --> 00:22:32,510
last 10 years like they did in eBay like

430
00:22:27,730 --> 00:22:34,760
Yahoo and many others 7 billion accounts

431
00:22:32,510 --> 00:22:37,280
altogether and so whenever someone tries

432
00:22:34,760 --> 00:22:39,470
to register a new password new count

433
00:22:37,280 --> 00:22:42,500
were trying to change the password we

434
00:22:39,470 --> 00:22:44,980
want to block the use of known username

435
00:22:42,500 --> 00:22:47,050
password pairs and there's different

436
00:22:44,980 --> 00:22:49,570
commercial service

437
00:22:47,050 --> 00:22:52,240
that verification we also want to have

438
00:22:49,570 --> 00:22:54,909
multi-factor and play we've known about

439
00:22:52,240 --> 00:22:57,100
the over a decade it's meant to stop

440
00:22:54,910 --> 00:22:59,290
brute force and other attacks against

441
00:22:57,100 --> 00:23:01,540
your password and so having won't play

442
00:22:59,290 --> 00:23:04,540
factor is a real must have these days

443
00:23:01,540 --> 00:23:06,250
and every year I get a little like up

444
00:23:04,540 --> 00:23:11,649
the heat a little bit used to say it's

445
00:23:06,250 --> 00:23:13,540
nice this is really a must-have for any

446
00:23:11,650 --> 00:23:15,790
kind of application that contains

447
00:23:13,540 --> 00:23:18,310
private data that you don't want leaked

448
00:23:15,790 --> 00:23:20,290
and if you if you're not a public data

449
00:23:18,310 --> 00:23:22,149
that you still unauthenticated for

450
00:23:20,290 --> 00:23:24,639
accountability and the password alone is

451
00:23:22,150 --> 00:23:27,250
okay but simply a private data nap miss

452
00:23:24,640 --> 00:23:28,810
miss workflow saying it's time to at

453
00:23:27,250 --> 00:23:31,120
least have some kind of multi factor

454
00:23:28,810 --> 00:23:33,340
like cryptographically generated value

455
00:23:31,120 --> 00:23:34,840
and that you're actually don't forget in

456
00:23:33,340 --> 00:23:36,010
all the sides all right so they also say

457
00:23:34,840 --> 00:23:36,490
you don't have email addresses for

458
00:23:36,010 --> 00:23:38,650
username

459
00:23:36,490 --> 00:23:41,080
so it's email as a public other piece of

460
00:23:38,650 --> 00:23:44,110
data anyways and also if a large website

461
00:23:41,080 --> 00:23:47,409
gets breached we want to make sure that

462
00:23:44,110 --> 00:23:48,969
we see a breach we major website we take

463
00:23:47,410 --> 00:23:50,950
to you to mains that were part of that

464
00:23:48,970 --> 00:23:53,050
breach that they match the user names in

465
00:23:50,950 --> 00:23:55,630
our website block those accounts and

466
00:23:53,050 --> 00:23:57,940
force password reset on their futures as

467
00:23:55,630 --> 00:24:05,410
a practice I see lay my customers that's

468
00:23:57,940 --> 00:24:08,680
a stop credential stuff what is the

469
00:24:05,410 --> 00:24:12,250
policy on your username your email if if

470
00:24:08,680 --> 00:24:13,780
that is getting so exposed how it's

471
00:24:12,250 --> 00:24:15,790
imperative that you get rid of that

472
00:24:13,780 --> 00:24:17,649
whole username or email because people

473
00:24:15,790 --> 00:24:19,570
lined up including unfortunately myself

474
00:24:17,650 --> 00:24:22,120
and then lose the same username for a

475
00:24:19,570 --> 00:24:24,100
blog account or like you know different

476
00:24:22,120 --> 00:24:28,090
passwords of course but just at the

477
00:24:24,100 --> 00:24:29,949
quality I'm less concerned about about

478
00:24:28,090 --> 00:24:31,540
new changes in their user days I'm more

479
00:24:29,950 --> 00:24:34,150
concerned that you use like a password

480
00:24:31,540 --> 00:24:36,820
manager to give each of your accounts a

481
00:24:34,150 --> 00:24:38,530
really strong unique password that if

482
00:24:36,820 --> 00:24:41,050
you're doing you're at your cliched

483
00:24:38,530 --> 00:24:42,790
really is even better if all those

484
00:24:41,050 --> 00:24:44,710
accounts have to have a unique strong

485
00:24:42,790 --> 00:24:47,500
password you also enable multi-factor

486
00:24:44,710 --> 00:24:50,230
you're really in good shape now that

487
00:24:47,500 --> 00:24:52,450
aside there are some sites that are very

488
00:24:50,230 --> 00:24:54,430
obscure and how they deliver that they

489
00:24:52,450 --> 00:24:57,220
give you obscure huge names on purpose

490
00:24:54,430 --> 00:25:00,050
like I've got an institutional Bitcoin

491
00:24:57,220 --> 00:25:02,600
trading for big companies and

492
00:25:00,050 --> 00:25:05,780
built an account for them I can't I

493
00:25:02,600 --> 00:25:08,389
can't take my user name they'll assign

494
00:25:05,780 --> 00:25:10,340
one to me to help make that account

495
00:25:08,390 --> 00:25:13,060
unique and strong that's not a bad

496
00:25:10,340 --> 00:25:15,439
practice for banking another you know

497
00:25:13,060 --> 00:25:18,950
Hydra software that you're using inside

498
00:25:15,440 --> 00:25:21,650
of that practice at all and on that note

499
00:25:18,950 --> 00:25:23,510
yet letting a user as a user feature let

500
00:25:21,650 --> 00:25:26,090
them change their user name or even

501
00:25:23,510 --> 00:25:29,680
better a suggested user name for them

502
00:25:26,090 --> 00:25:32,629
that's strong is really not a bad idea

503
00:25:29,680 --> 00:25:36,200
also throttling force attacks fluid

504
00:25:32,630 --> 00:25:38,630
address brute force in subway modeling

505
00:25:36,200 --> 00:25:40,460
slowly down the attack but letting a big

506
00:25:38,630 --> 00:25:43,040
hazard in fast is usually the best way

507
00:25:40,460 --> 00:25:44,570
to handle that don't force a natural

508
00:25:43,040 --> 00:25:46,190
password special character rules

509
00:25:44,570 --> 00:25:48,080
uppercase lowercase numbers special

510
00:25:46,190 --> 00:25:49,850
character get that happy / - that is

511
00:25:48,080 --> 00:25:52,520
very controversial I think it's a good

512
00:25:49,850 --> 00:25:55,040
idea if you do everything else on this

513
00:25:52,520 --> 00:25:56,780
list well don't use security questions

514
00:25:55,040 --> 00:25:58,790
or hints I can look up on social media

515
00:25:56,780 --> 00:26:00,680
no more mandatory password expiration

516
00:25:58,790 --> 00:26:02,570
because you can castrate one test for

517
00:26:00,680 --> 00:26:04,700
two tests for three and have a sequence

518
00:26:02,570 --> 00:26:07,820
in the race and 11 approval character

519
00:26:04,700 --> 00:26:09,950
including emoji spaces as well this

520
00:26:07,820 --> 00:26:11,330
should be this advant password because

521
00:26:09,950 --> 00:26:15,800
it's got the word password in it it's

522
00:26:11,330 --> 00:26:18,350
only ten characters it's it's one of the

523
00:26:15,800 --> 00:26:20,690
top 50,000 passwords in the world today

524
00:26:18,350 --> 00:26:22,580
it's like 30 31 thousand in terms of

525
00:26:20,690 --> 00:26:26,630
commonality there's a lot of reason why

526
00:26:22,580 --> 00:26:28,129
this is a bad password what you want to

527
00:26:26,630 --> 00:26:30,500
hear it off I asked her to store me when

528
00:26:28,130 --> 00:26:33,340
you care about how to store a password

529
00:26:30,500 --> 00:26:36,830
within your system and you're about that

530
00:26:33,340 --> 00:26:38,780
gumbo is slow today I'm in LA and more

531
00:26:36,830 --> 00:26:41,480
chill today so I would give you one

532
00:26:38,780 --> 00:26:43,550
important piece which is you speak rate

533
00:26:41,480 --> 00:26:45,890
which s crip there are on - I use the

534
00:26:43,550 --> 00:26:48,830
right algorithm they all have at least a

535
00:26:45,890 --> 00:26:51,550
time cost and I recommend like bcrypt

536
00:26:48,830 --> 00:26:54,919
would like a work factor of 13 or more

537
00:26:51,550 --> 00:26:58,159
and what that means is when when you're

538
00:26:54,920 --> 00:27:01,130
gonna when you're gonna do pass tracking

539
00:26:58,160 --> 00:27:03,530
but someone has stolen your database if

540
00:27:01,130 --> 00:27:06,260
you have nb5 with your storage mechanism

541
00:27:03,530 --> 00:27:08,629
it's about 200 million attempts per

542
00:27:06,260 --> 00:27:10,460
second on my laptop that shall 168

543
00:27:08,630 --> 00:27:12,440
million and be quick with the

544
00:27:10,460 --> 00:27:14,960
recommendation work factor of 30

545
00:27:12,440 --> 00:27:16,850
it's only three hundred eighty per

546
00:27:14,960 --> 00:27:19,640
second it really slows down the attacker

547
00:27:16,850 --> 00:27:22,129
who stolen their database is now trying

548
00:27:19,640 --> 00:27:24,260
to uncover your password based on these

549
00:27:22,130 --> 00:27:26,720
secret storage the slower you go the

550
00:27:24,260 --> 00:27:28,460
more time that you could handle it you

551
00:27:26,720 --> 00:27:31,810
can used to have to manage a breach and

552
00:27:28,460 --> 00:27:35,030
so this is a ginormous topic identity

553
00:27:31,810 --> 00:27:37,040
ASVs has a whole section of 2.1 on this

554
00:27:35,030 --> 00:27:38,320
as well as are the authentication cheat

555
00:27:37,040 --> 00:27:41,659
sheet and your homework

556
00:27:38,320 --> 00:27:43,159
what's your name mister I don't want to

557
00:27:41,660 --> 00:27:44,390
see any I want to be told what that it's

558
00:27:43,160 --> 00:27:47,420
pretty problem I'm impressed with that

559
00:27:44,390 --> 00:27:51,170
answer so this is your homework it's go

560
00:27:47,420 --> 00:27:53,450
reading this 853 three new duty

561
00:27:51,170 --> 00:27:55,160
notification guidelines there will be a

562
00:27:53,450 --> 00:27:56,840
test so just tell me what you're ready

563
00:27:55,160 --> 00:27:58,760
all rights move on when I'm looking at

564
00:27:56,840 --> 00:28:01,220
oh oh oh oh

565
00:27:58,760 --> 00:28:03,980
wasp rise in control number seven one

566
00:28:01,220 --> 00:28:09,740
force access control how do we have this

567
00:28:03,980 --> 00:28:20,060
this Web API thing for water I'm going

568
00:28:09,740 --> 00:28:22,430
to here's a URL that's a message system

569
00:28:20,060 --> 00:28:24,379
and here's a URL that you're using to

570
00:28:22,430 --> 00:28:27,140
read one of your messages this is not a

571
00:28:24,380 --> 00:28:28,850
hard question how do you act this ya

572
00:28:27,140 --> 00:28:30,800
bunch of random numbers how long would

573
00:28:28,850 --> 00:28:33,830
it take you to write script to try every

574
00:28:30,800 --> 00:28:37,659
possible number here five minutes are

575
00:28:33,830 --> 00:28:37,659
you full-time are you a contractor

576
00:28:38,020 --> 00:28:42,080
you're a full-time see if you're an

577
00:28:40,010 --> 00:28:43,550
old-timer that's a five minute project

578
00:28:42,080 --> 00:28:45,080
you're my hero thank you so much

579
00:28:43,550 --> 00:28:49,240
if you're a contractor like me it's a

580
00:28:45,080 --> 00:28:52,699
Institute project cheers new parents

581
00:28:49,240 --> 00:28:54,230
thank you very much the water so this is

582
00:28:52,700 --> 00:28:56,120
the normal declaring behind this this is

583
00:28:54,230 --> 00:28:57,770
under Rule two direct out the correct

584
00:28:56,120 --> 00:28:59,719
for this an axis called control level of

585
00:28:57,770 --> 00:29:01,970
ability against this if I had an

586
00:28:59,720 --> 00:29:03,710
ownership references select message

587
00:29:01,970 --> 00:29:05,840
where the message I need a certain

588
00:29:03,710 --> 00:29:08,000
number and the owner of that message is

589
00:29:05,840 --> 00:29:10,070
the user I knew wouldn't hold assessment

590
00:29:08,000 --> 00:29:13,100
that's trust to location inside my hat

591
00:29:10,070 --> 00:29:15,770
then the database is only pulling down

592
00:29:13,100 --> 00:29:16,909
messages that that I own and that

593
00:29:15,770 --> 00:29:19,190
contention of the buildings have the

594
00:29:16,910 --> 00:29:21,710
neighbor level and overall I recommend

595
00:29:19,190 --> 00:29:24,440
that you move away from Harvick lending

596
00:29:21,710 --> 00:29:25,600
goals always access control to move to a

597
00:29:24,440 --> 00:29:27,490
more action

598
00:29:25,600 --> 00:29:30,070
based access control system or isn't

599
00:29:27,490 --> 00:29:32,410
permission or activity based access

600
00:29:30,070 --> 00:29:36,159
control here's some homework we have

601
00:29:32,410 --> 00:29:38,140
this 800 162 the new federal standard

602
00:29:36,160 --> 00:29:40,240
without a couple years old federal

603
00:29:38,140 --> 00:29:42,280
standard on next generation access

604
00:29:40,240 --> 00:29:44,740
control design as well as the access

605
00:29:42,280 --> 00:29:48,940
control cheat sheet at the OS foundation

606
00:29:44,740 --> 00:29:50,740
so c8 says protect data everywhere now

607
00:29:48,940 --> 00:29:54,120
that's a tall order but let's do it so

608
00:29:50,740 --> 00:29:57,309
essentially how often should we be using

609
00:29:54,120 --> 00:30:01,689
HTTPS in web and API development these

610
00:29:57,309 --> 00:30:07,149
days is there ever a good reason to use

611
00:30:01,690 --> 00:30:10,510
HTTP in our work and even that I'm going

612
00:30:07,150 --> 00:30:12,220
to do it because especially if it's in a

613
00:30:10,510 --> 00:30:16,090
cloud environment look on the same box

614
00:30:12,220 --> 00:30:18,220
today across web services because the

615
00:30:16,090 --> 00:30:22,000
nares I hear I hear they're saying but

616
00:30:18,220 --> 00:30:25,570
as a new norm as a default we really

617
00:30:22,000 --> 00:30:28,059
should use well configured HTTP pretty

618
00:30:25,570 --> 00:30:29,799
much everywhere at this point and so we

619
00:30:28,059 --> 00:30:32,320
can also use things like strict

620
00:30:29,799 --> 00:30:35,500
Transport Security with this technique

621
00:30:32,320 --> 00:30:39,340
called reloading this is a response

622
00:30:35,500 --> 00:30:43,510
header that tells the browser my website

623
00:30:39,340 --> 00:30:45,520
is only accessible over HTTP and you can

624
00:30:43,510 --> 00:30:47,379
actually submit your website to the

625
00:30:45,520 --> 00:30:49,510
chromium project to say that your

626
00:30:47,380 --> 00:30:52,030
website has to follow certain rules of

627
00:30:49,510 --> 00:30:53,559
playlng they have the word preload in

628
00:30:52,030 --> 00:30:55,480
the strict Transport Security Response

629
00:30:53,559 --> 00:30:57,730
Center that's more than a year's worth

630
00:30:55,480 --> 00:31:00,490
of time that you follow all that right

631
00:30:57,730 --> 00:31:02,590
criteria you fill actually hard-code

632
00:31:00,490 --> 00:31:04,900
your website into chrome chromium

633
00:31:02,590 --> 00:31:07,209
Firefox Safari I'm gonna read your

634
00:31:04,900 --> 00:31:10,870
browser that has a rule that says your

635
00:31:07,210 --> 00:31:13,240
website is only accessible over HTTP

636
00:31:10,870 --> 00:31:16,479
this is again called strict Transport

637
00:31:13,240 --> 00:31:19,120
Security pre loading and the highest

638
00:31:16,480 --> 00:31:21,460
form of configuring the website to be

639
00:31:19,120 --> 00:31:24,100
really strong from an HTTPS point of

640
00:31:21,460 --> 00:31:26,980
view are their set also if you're going

641
00:31:24,100 --> 00:31:28,870
to put the graphics storage then I

642
00:31:26,980 --> 00:31:30,970
recommend the first of all was the

643
00:31:28,870 --> 00:31:32,979
hardest part of this forum cryptosystem

644
00:31:30,970 --> 00:31:34,960
hugely weird least take the keys where

645
00:31:32,980 --> 00:31:36,730
do you stick the keys sir who knows

646
00:31:34,960 --> 00:31:37,070
about query parameter ization let's go

647
00:31:36,730 --> 00:31:39,740
beyond

648
00:31:37,070 --> 00:31:44,870
what do you think where's Virgil I stick

649
00:31:39,740 --> 00:31:47,389
my keys that's a great answer island

650
00:31:44,870 --> 00:31:50,870
that's a form of Secrets management not

651
00:31:47,389 --> 00:31:53,809
follow number two out of our we want

652
00:31:50,870 --> 00:31:56,299
some kind of key vault we want some kind

653
00:31:53,809 --> 00:31:57,889
of secrets management solution and the

654
00:31:56,299 --> 00:32:00,470
old-school way to do this is a

655
00:31:57,889 --> 00:32:02,719
straight-up hardware security module

656
00:32:00,470 --> 00:32:04,549
you're basically sending the key in this

657
00:32:02,720 --> 00:32:05,750
specialized piece of hardware and

658
00:32:04,549 --> 00:32:07,820
locking it

659
00:32:05,750 --> 00:32:10,100
so the key can even be extracted of the

660
00:32:07,820 --> 00:32:12,799
hardware then you send data into your

661
00:32:10,100 --> 00:32:14,809
HSM encryption hacks into the sealed

662
00:32:12,799 --> 00:32:17,090
environment the coprocessor and then the

663
00:32:14,809 --> 00:32:19,580
encrypted data is returned where the tea

664
00:32:17,090 --> 00:32:21,678
was never exposed to mycologists one of

665
00:32:19,580 --> 00:32:23,509
the ways you can learn at HSN so we see

666
00:32:21,679 --> 00:32:26,570
a lot of the payment processors use

667
00:32:23,509 --> 00:32:28,039
technology of this nature and during the

668
00:32:26,570 --> 00:32:30,649
development there's a project called

669
00:32:28,039 --> 00:32:32,240
action core vault full project up I know

670
00:32:30,649 --> 00:32:34,189
there's no good source commercial

671
00:32:32,240 --> 00:32:36,440
version that you can look up to your

672
00:32:34,190 --> 00:32:39,950
server as a form of secrets and key

673
00:32:36,440 --> 00:32:42,740
management also I highly recommend you

674
00:32:39,950 --> 00:32:49,070
don't do your own stuff going code right

675
00:32:42,740 --> 00:32:52,159
don't use job working right now it's a

676
00:32:49,070 --> 00:32:54,259
real simple used API it has direct

677
00:32:52,159 --> 00:32:57,049
integration with key management like

678
00:32:54,259 --> 00:33:00,200
Amazon to Management Service TPC to key

679
00:32:57,049 --> 00:33:02,629
management Azure or a chic or as direct

680
00:33:00,200 --> 00:33:05,360
integration library itself so all the

681
00:33:02,629 --> 00:33:08,209
difficult problems team I cycle the

682
00:33:05,360 --> 00:33:11,120
problems with algorithms to choose solid

683
00:33:08,210 --> 00:33:12,740
and well well chosen for you there's a

684
00:33:11,120 --> 00:33:14,750
much better experience of using

685
00:33:12,740 --> 00:33:17,299
libraries like this if you're deep in

686
00:33:14,750 --> 00:33:18,919
Sealab there's little sodium University

687
00:33:17,299 --> 00:33:20,450
of Chicago and Bernstein

688
00:33:18,919 --> 00:33:23,509
another really couldn't bat practice

689
00:33:20,450 --> 00:33:25,460
library and this is not easy right chi

690
00:33:23,509 --> 00:33:27,590
Chi's transport layer protection cheat

691
00:33:25,460 --> 00:33:29,299
sheet cryptographic storage cheat sheet

692
00:33:27,590 --> 00:33:31,309
and not to mention SSL labs they got

693
00:33:29,299 --> 00:33:33,649
their act together great documentation

694
00:33:31,309 --> 00:33:36,250
on the best practices for HTTP

695
00:33:33,649 --> 00:33:39,408
configuration oh yeah

696
00:33:36,250 --> 00:33:43,029
we're the proactive controls when we

697
00:33:39,409 --> 00:33:44,210
talk about next so what let me see where

698
00:33:43,029 --> 00:33:47,840
we're at

699
00:33:44,210 --> 00:33:49,270
protecting everywhere and c---nine we

700
00:33:47,840 --> 00:33:52,179
talked about

701
00:33:49,270 --> 00:33:55,030
security logging and monitoring this is

702
00:33:52,180 --> 00:33:57,910
a very exciting topic or like it's funny

703
00:33:55,030 --> 00:33:59,590
but this is so exciting because it helps

704
00:33:57,910 --> 00:34:01,540
us to intrusion detection it screams

705
00:33:59,590 --> 00:34:03,699
professional if there has been a breach

706
00:34:01,540 --> 00:34:06,129
it lets us do forensic analysis in a

707
00:34:03,700 --> 00:34:08,139
reputable way there's a lot of laws and

708
00:34:06,130 --> 00:34:10,090
compliance over our head that really

709
00:34:08,139 --> 00:34:11,440
forced us to do logging in a certain way

710
00:34:10,090 --> 00:34:13,180
there's a lot of good reason trying to

711
00:34:11,440 --> 00:34:16,000
do this which is Bob Gurley by parking

712
00:34:13,179 --> 00:34:18,250
lot only request and response the

713
00:34:16,000 --> 00:34:20,980
response is missing we know that the

714
00:34:18,250 --> 00:34:22,840
request crashed in some way and then we

715
00:34:20,980 --> 00:34:25,600
really should do is work with their

716
00:34:22,840 --> 00:34:27,730
security team to define a clear locking

717
00:34:25,600 --> 00:34:29,679
standard an understanding developer's

718
00:34:27,730 --> 00:34:32,340
responsibility is that doesn't always

719
00:34:29,679 --> 00:34:36,909
happen so at the very least blog all

720
00:34:32,340 --> 00:34:39,220
successful all events about how your

721
00:34:36,909 --> 00:34:41,710
front gates working long and failure

722
00:34:39,219 --> 00:34:44,739
change password registration bad or good

723
00:34:41,710 --> 00:34:46,870
session IDs everything long any access

724
00:34:44,739 --> 00:34:50,049
control failure on the back end of your

725
00:34:46,870 --> 00:34:53,500
system when you have a feature not not

726
00:34:50,050 --> 00:34:56,410
like a server-side feature how often to

727
00:34:53,500 --> 00:34:58,720
your users be trying to access it and be

728
00:34:56,409 --> 00:35:01,029
denied access to it let's give it a

729
00:34:58,720 --> 00:35:03,069
feature like delete user how often

730
00:35:01,030 --> 00:35:05,380
should you juice two users trying to

731
00:35:03,070 --> 00:35:08,560
delete user who don't have access to do

732
00:35:05,380 --> 00:35:10,000
so will really never if your app is

733
00:35:08,560 --> 00:35:12,180
written correctly so if you see those

734
00:35:10,000 --> 00:35:16,990
events you're under attack in subway

735
00:35:12,180 --> 00:35:19,029
also input validation failure and sizes

736
00:35:16,990 --> 00:35:20,979
and characters with certain fields long

737
00:35:19,030 --> 00:35:22,960
all of that lets me see what a mini scan

738
00:35:20,980 --> 00:35:24,970
my attacks software and regular basis

739
00:35:22,960 --> 00:35:26,620
that's all you give me for thoughts then

740
00:35:24,970 --> 00:35:30,540
I can I can work with that

741
00:35:26,620 --> 00:35:30,540
also things to long a start and stops

742
00:35:31,800 --> 00:35:35,530
authentication failure invention posts

743
00:35:33,790 --> 00:35:38,670
to this great limiting actions from

744
00:35:35,530 --> 00:35:42,070
brute force transaction of fraudulent

745
00:35:38,670 --> 00:35:43,780
transaction attempts as well and also be

746
00:35:42,070 --> 00:35:46,330
careful not to live things like credit

747
00:35:43,780 --> 00:35:49,030
cards I wouldn't on the Ross session ID

748
00:35:46,330 --> 00:35:50,500
that lets anyone viewing the blog hijack

749
00:35:49,030 --> 00:35:53,530
different accounts I would lie about

750
00:35:50,500 --> 00:35:55,780
cashing section ID so I can tie certain

751
00:35:53,530 --> 00:35:58,090
bonding events together without exposing

752
00:35:55,780 --> 00:35:59,110
the session ID itself I can use that to

753
00:35:58,090 --> 00:36:02,099
hijack account

754
00:35:59,110 --> 00:36:05,160
I also recommend not logging data

755
00:36:02,099 --> 00:36:07,499
it's relevant to GDP ours two categories

756
00:36:05,160 --> 00:36:09,180
of privacy data so you're respecting the

757
00:36:07,499 --> 00:36:11,578
privacy of your users of European

758
00:36:09,180 --> 00:36:14,399
citizens and basically if you don't need

759
00:36:11,579 --> 00:36:16,559
it any sensitive data PII or healthcare

760
00:36:14,400 --> 00:36:18,210
information you really don't eat it the

761
00:36:16,559 --> 00:36:20,249
twelve log and trust into security

762
00:36:18,210 --> 00:36:20,670
information so there's a couple of cheat

763
00:36:20,249 --> 00:36:22,799
sheets

764
00:36:20,670 --> 00:36:25,529
Livan will teach you to know lot to give

765
00:36:22,799 --> 00:36:28,859
you more information about these

766
00:36:25,529 --> 00:36:31,049
comments eighty ten is about handling

767
00:36:28,859 --> 00:36:34,259
errors I'm going to punt on that for now

768
00:36:31,049 --> 00:36:38,249
but the basic conclusion it's a good

769
00:36:34,259 --> 00:36:41,119
good wrap how far along are we ten

770
00:36:38,249 --> 00:36:43,259
minutes QA or not a little earlier up

771
00:36:41,119 --> 00:36:45,839
talk about error codes I'll talk about

772
00:36:43,259 --> 00:36:46,380
EPIRB codes actually do that we hop out

773
00:36:45,839 --> 00:36:48,960
of here

774
00:36:46,380 --> 00:36:51,329
so let's do let's do the ten category

775
00:36:48,960 --> 00:36:57,450
let's talk about error codes there's a

776
00:36:51,329 --> 00:37:03,479
very exciting topic let's talk about

777
00:36:57,450 --> 00:37:06,868
like application developers let's talk

778
00:37:03,479 --> 00:37:18,479
about one nice concept about handling

779
00:37:06,869 --> 00:37:20,609
airs so rest rest development for

780
00:37:18,479 --> 00:37:23,848
Webster's development we want to

781
00:37:20,609 --> 00:37:26,578
standardize error codes on the HTTP

782
00:37:23,849 --> 00:37:28,890
protocol response codes what that means

783
00:37:26,579 --> 00:37:37,109
is if there's an access control problem

784
00:37:28,890 --> 00:37:38,969
we maybe we want to say if maybe they're

785
00:37:37,109 --> 00:37:41,609
trying to access a feature they don't

786
00:37:38,969 --> 00:37:44,999
have access to 403 for baby poured into

787
00:37:41,609 --> 00:37:46,589
the 401 now it's all these are for I'm

788
00:37:44,999 --> 00:37:48,808
trying to book an appointment that

789
00:37:46,589 --> 00:37:51,900
someone else grab the timeslot for for

790
00:37:48,809 --> 00:37:53,910
online conflict a lot of people don't

791
00:37:51,900 --> 00:37:56,369
agree that I usually listing all these

792
00:37:53,910 --> 00:37:58,680
error codes one of my customer does is

793
00:37:56,369 --> 00:38:00,900
the only airing will say is for under

794
00:37:58,680 --> 00:38:03,210
that request so they don't want to tell

795
00:38:00,900 --> 00:38:05,999
the attacker if it's an access control

796
00:38:03,210 --> 00:38:08,729
problem or her resource doesn't exist or

797
00:38:05,999 --> 00:38:10,609
similar they just made 400 requests then

798
00:38:08,729 --> 00:38:13,720
they love the more granular

799
00:38:10,609 --> 00:38:16,788
code in the antibody system as well

800
00:38:13,720 --> 00:38:18,859
that's one quick note about about

801
00:38:16,789 --> 00:38:21,470
handling and managing errors within the

802
00:38:18,859 --> 00:38:23,630
world of web security is that be careful

803
00:38:21,470 --> 00:38:26,930
what kind of error you begin to the

804
00:38:23,630 --> 00:38:32,509
client you may leak information that one

805
00:38:26,930 --> 00:38:36,200
lasts a lot of get across when we talk

806
00:38:32,509 --> 00:38:38,509
about application security right we want

807
00:38:36,200 --> 00:38:41,720
to develop secure code and we really

808
00:38:38,509 --> 00:38:44,839
want to do testing a very continuous

809
00:38:41,720 --> 00:38:47,808
basis using as much fun of nation as we

810
00:38:44,839 --> 00:38:49,578
can so I mentioned the ASVs standard

811
00:38:47,809 --> 00:38:51,769
again like to nating requirements for

812
00:38:49,579 --> 00:38:53,539
development I recommend you fork this

813
00:38:51,769 --> 00:38:55,939
standard for your team or your

814
00:38:53,539 --> 00:38:58,759
organization so you will have a clear

815
00:38:55,940 --> 00:39:00,529
definition and a clear vision of what

816
00:38:58,759 --> 00:39:01,999
secure software is about from the

817
00:39:00,529 --> 00:39:04,309
developers point of view what

818
00:39:01,999 --> 00:39:06,649
responsibilities took like the 18

819
00:39:04,309 --> 00:39:08,539
requirements for authentication and you

820
00:39:06,650 --> 00:39:11,569
drop them and just said who's our

821
00:39:08,539 --> 00:39:13,549
authentication service this way on this

822
00:39:11,569 --> 00:39:15,380
document will tell you how to use it and

823
00:39:13,549 --> 00:39:19,400
that is their own set of rules on

824
00:39:15,380 --> 00:39:22,549
authentication done so for your purpose

825
00:39:19,400 --> 00:39:25,309
also it can have more questions of the

826
00:39:22,549 --> 00:39:28,009
different details about secure Greene

827
00:39:25,309 --> 00:39:30,230
the Oh wash teach a series is just that

828
00:39:28,009 --> 00:39:32,450
a series of guides on how to write

829
00:39:30,230 --> 00:39:35,150
software it's basically a living

830
00:39:32,450 --> 00:39:37,098
encyclopedia that's costly edited by a

831
00:39:35,150 --> 00:39:39,650
series of experts around the world every

832
00:39:37,099 --> 00:39:42,440
day also that's about that's the the

833
00:39:39,650 --> 00:39:44,749
main resources I look at myself for how

834
00:39:42,440 --> 00:39:46,880
to build secure software now I have to

835
00:39:44,749 --> 00:39:49,069
test on a regular basis to verify I'm

836
00:39:46,880 --> 00:39:51,019
doing it correct and so we want to make

837
00:39:49,069 --> 00:39:54,019
sure that there were delivered tools

838
00:39:51,019 --> 00:39:56,238
here using they're being run hundred

839
00:39:54,019 --> 00:39:59,390
times a day you want to automate as much

840
00:39:56,239 --> 00:40:01,369
as possible and as early as possible as

841
00:39:59,390 --> 00:40:03,288
developers are doing their work every

842
00:40:01,369 --> 00:40:05,749
day every check-in and every time we

843
00:40:03,289 --> 00:40:08,450
build right a suite of tests for

844
00:40:05,749 --> 00:40:12,009
security that relatively quickly and

845
00:40:08,450 --> 00:40:15,710
then maybe one day at the end of the day

846
00:40:12,009 --> 00:40:18,349
with full load that goes slowly it may

847
00:40:15,710 --> 00:40:20,329
take several hours to scan at night or

848
00:40:18,349 --> 00:40:22,489
on a periodic basis so you have these

849
00:40:20,329 --> 00:40:23,690
two different wheels of automation

850
00:40:22,489 --> 00:40:26,839
running at all times

851
00:40:23,690 --> 00:40:29,150
one run fast and furious quick test

852
00:40:26,839 --> 00:40:31,069
every time someone touches code and then

853
00:40:29,150 --> 00:40:34,880
once a day or once every couple of days

854
00:40:31,069 --> 00:40:37,038
in a much more slow detailed full-blown

855
00:40:34,880 --> 00:40:39,079
scan that a professional reviews on a

856
00:40:37,039 --> 00:40:43,329
regular basis as well and that's like

857
00:40:39,079 --> 00:40:43,329
the engine of security test data to be

858
00:40:43,630 --> 00:40:48,769
professionals on a regular basis and

859
00:40:46,099 --> 00:40:50,259
this automation is going to miss things

860
00:40:48,769 --> 00:40:53,359
like business logic

861
00:40:50,259 --> 00:40:55,609
access control like what tool knows your

862
00:40:53,359 --> 00:40:56,808
access control policy they don't the

863
00:40:55,609 --> 00:40:59,598
tools just know about those

864
00:40:56,809 --> 00:41:02,390
vulnerabilities to wanna also have

865
00:40:59,599 --> 00:41:04,970
penetration testers a custom unit tests

866
00:41:02,390 --> 00:41:08,239
other forms of testing that can't look

867
00:41:04,970 --> 00:41:10,339
for custom problems were the textual to

868
00:41:08,239 --> 00:41:13,640
your business or software that's it for

869
00:41:10,339 --> 00:41:15,920
me any of any questions as we wrap up

870
00:41:13,640 --> 00:41:20,089
the Oh wash top to any proactive

871
00:41:15,920 --> 00:41:22,430
controls and if you have a question for

872
00:41:20,089 --> 00:41:24,980
me beyond this presentation on jimpat

873
00:41:22,430 --> 00:41:26,989
mannequin town or gym at a loss that org

874
00:41:24,980 --> 00:41:29,059
thank you for being here at shell calm

875
00:41:26,989 --> 00:41:31,779
hope to see you at the pool party

876
00:41:29,059 --> 00:41:31,779
tonight

