1
00:00:37,280 --> 00:00:41,219
all right

2
00:00:38,700 --> 00:00:44,610
this is rolling your own custom light

3
00:00:41,219 --> 00:00:46,440
weights diagnostic tools with but as

4
00:00:44,610 --> 00:00:47,610
research director Xu secret the global

5
00:00:46,440 --> 00:00:50,039
information assurance specialist

6
00:00:47,610 --> 00:00:52,079
providing organizations with consulting

7
00:00:50,039 --> 00:00:54,059
services as helicopters implement

8
00:00:52,079 --> 00:00:55,530
security automation and desta cops best

9
00:00:54,059 --> 00:00:56,760
practices as the most important

10
00:00:55,530 --> 00:01:00,890
penetration test with companies ranging

11
00:00:56,760 --> 00:01:00,890
from large reprises to new startups

12
00:01:03,680 --> 00:01:07,710
thank you everyone for coming

13
00:01:05,549 --> 00:01:10,140
I know it's the last talk of the day so

14
00:01:07,710 --> 00:01:13,380
I'm impressed and honored that you're

15
00:01:10,140 --> 00:01:18,479
here and not taking a nap as I maybe I

16
00:01:13,380 --> 00:01:20,850
was so this I did with my friend Daniel

17
00:01:18,479 --> 00:01:23,700
unfortunately something he was able to

18
00:01:20,850 --> 00:01:25,610
attend but he was essential to this work

19
00:01:23,700 --> 00:01:28,380
so again we're gonna talk about how to

20
00:01:25,610 --> 00:01:30,210
build your own custom static analyses

21
00:01:28,380 --> 00:01:34,949
using some open source tools rather than

22
00:01:30,210 --> 00:01:36,689
these very expensive points so what I

23
00:01:34,950 --> 00:01:39,180
would start off with is why should you

24
00:01:36,689 --> 00:01:40,559
care and when the stock hits the

25
00:01:39,180 --> 00:01:41,909
following so by the end of this talk

26
00:01:40,560 --> 00:01:43,680
you're going to understand at a high

27
00:01:41,909 --> 00:01:45,360
level how the static analysis was work

28
00:01:43,680 --> 00:01:48,329
in general we're going to walk through

29
00:01:45,360 --> 00:01:50,009
several hands-on examples using open

30
00:01:48,329 --> 00:01:51,179
source tools that and some interesting

31
00:01:50,009 --> 00:01:53,100
things that you can do with just a few

32
00:01:51,180 --> 00:01:55,890
hundred lines of Python which is all

33
00:01:53,100 --> 00:01:58,229
open source don't get the art as of

34
00:01:55,890 --> 00:01:59,670
today we're going to talk about trying

35
00:01:58,229 --> 00:02:01,380
to get you some intuition as to like

36
00:01:59,670 --> 00:02:03,180
what use pieces for static analysis are

37
00:02:01,380 --> 00:02:04,500
easy and which are hard like where is it

38
00:02:03,180 --> 00:02:06,719
a good fit where when you wouldn't do

39
00:02:04,500 --> 00:02:08,369
something else and just because I didn't

40
00:02:06,719 --> 00:02:10,258
ask this very often we'll talk a little

41
00:02:08,369 --> 00:02:10,520
bit about when do personal static you

42
00:02:10,258 --> 00:02:13,000
know

43
00:02:10,520 --> 00:02:16,160
wolves are useful and when maybe not

44
00:02:13,000 --> 00:02:18,500
okay a little bit about my friend Daniel

45
00:02:16,160 --> 00:02:21,740
his pregnant PhD student at UC Davis

46
00:02:18,500 --> 00:02:22,820
that's where we met when I was also an

47
00:02:21,740 --> 00:02:26,300
indentured servant

48
00:02:22,820 --> 00:02:29,840
I mean grad student there so when I was

49
00:02:26,300 --> 00:02:32,570
there I intended to dress like this as

50
00:02:29,840 --> 00:02:34,790
one of us but after I graduated I then

51
00:02:32,570 --> 00:02:36,500
moved to San Francisco and obviously to

52
00:02:34,790 --> 00:02:39,530
get anyone to respect me and I needed to

53
00:02:36,500 --> 00:02:41,570
dress like this so obviously I only

54
00:02:39,530 --> 00:02:43,790
drink from these two jars and I do yoga

55
00:02:41,570 --> 00:02:46,760
three times a day so important facts

56
00:02:43,790 --> 00:02:48,260
about me I also work at NC secret as the

57
00:02:46,760 --> 00:02:51,019
technical director of research

58
00:02:48,260 --> 00:02:53,420
structures so we do tend testing all the

59
00:02:51,020 --> 00:02:55,280
things specifically I enjoy helping

60
00:02:53,420 --> 00:02:57,619
companies like systematically raise

61
00:02:55,280 --> 00:02:59,450
their security bar by using like that's

62
00:02:57,620 --> 00:03:01,310
a cop security operations that house and

63
00:02:59,450 --> 00:03:04,730
things like that that's just what I

64
00:03:01,310 --> 00:03:06,620
really like just quickly KCU kind of

65
00:03:04,730 --> 00:03:07,970
program in CC group it's a fun place to

66
00:03:06,620 --> 00:03:11,030
work with lots of smart people who

67
00:03:07,970 --> 00:03:13,250
written a couple of books and also

68
00:03:11,030 --> 00:03:14,420
people who have been an NCC crew come

69
00:03:13,250 --> 00:03:16,370
out to do like a lot of other cool

70
00:03:14,420 --> 00:03:18,010
things up in places this is an

71
00:03:16,370 --> 00:03:20,090
incomplete list I just did enough room

72
00:03:18,010 --> 00:03:21,769
anyway I wouldn't normally mention this

73
00:03:20,090 --> 00:03:23,180
but last year a bunch of people came up

74
00:03:21,770 --> 00:03:24,620
and said hey I might want to work in a

75
00:03:23,180 --> 00:03:28,450
GC group can you like tell me about it

76
00:03:24,620 --> 00:03:30,710
and so yeah chat about it okay so

77
00:03:28,450 --> 00:03:32,690
organization at this time first we're

78
00:03:30,710 --> 00:03:34,340
going to cover some background like what

79
00:03:32,690 --> 00:03:37,070
is static versus dynamic analysis

80
00:03:34,340 --> 00:03:38,180
motivating examples then the book of

81
00:03:37,070 --> 00:03:39,829
this hoc would be walking through some

82
00:03:38,180 --> 00:03:41,480
can find examples of interesting things

83
00:03:39,830 --> 00:03:43,400
you could do let's talk about some

84
00:03:41,480 --> 00:03:46,280
fundamental childhood is like let's just

85
00:03:43,400 --> 00:03:49,730
harvest at analysis period and then some

86
00:03:46,280 --> 00:03:52,850
going forward future stuff okay

87
00:03:49,730 --> 00:03:55,340
just make sure we're all in each static

88
00:03:52,850 --> 00:03:57,230
analysis is where reasoning about based

89
00:03:55,340 --> 00:03:59,420
on looking at it and then the analysis

90
00:03:57,230 --> 00:04:01,700
were running code and observing how it

91
00:03:59,420 --> 00:04:03,890
behaves so if you are testing a web

92
00:04:01,700 --> 00:04:05,329
application using first week or gonna be

93
00:04:03,890 --> 00:04:07,279
pudding or something like that that's

94
00:04:05,330 --> 00:04:08,959
tank analysis so here we're just going

95
00:04:07,280 --> 00:04:11,270
to look at the source code and not

96
00:04:08,959 --> 00:04:12,920
breath I'm not gonna have time to get

97
00:04:11,270 --> 00:04:14,630
into the details about the pros and cons

98
00:04:12,920 --> 00:04:17,209
and talk about all the different types

99
00:04:14,630 --> 00:04:19,750
of program analysis techniques but we

100
00:04:17,209 --> 00:04:22,480
mentioned a number of these more detail

101
00:04:19,750 --> 00:04:24,490
Montauk last year automated mug mining

102
00:04:22,480 --> 00:04:26,290
in practice so the the court thing you

103
00:04:24,490 --> 00:04:28,000
need to know for this talk is just the

104
00:04:26,290 --> 00:04:29,890
Thursday range in complexity of static

105
00:04:28,000 --> 00:04:31,720
analysis tools so on the simple side you

106
00:04:29,890 --> 00:04:33,430
have like rabid winters and then a more

107
00:04:31,720 --> 00:04:35,980
complex sign you have commercial tools

108
00:04:33,430 --> 00:04:39,300
like fortify checkmarks and many others

109
00:04:35,980 --> 00:04:41,950
that do complicated data flow analysis

110
00:04:39,300 --> 00:04:43,690
okay so let's walk through a motivating

111
00:04:41,950 --> 00:04:45,789
example like why are we doing the

112
00:04:43,690 --> 00:04:49,240
techniques in this talk my quiet weekend

113
00:04:45,790 --> 00:04:51,490
so let's say we want to apply in some

114
00:04:49,240 --> 00:04:52,300
code advection in nodejs applications so

115
00:04:51,490 --> 00:04:54,580
we start reading through the

116
00:04:52,300 --> 00:04:56,080
documentation and we find the chart

117
00:04:54,580 --> 00:04:58,300
process module which has a couple of

118
00:04:56,080 --> 00:05:00,609
different that it's one of which is

119
00:04:58,300 --> 00:05:02,890
exact so we use greet the docs and say

120
00:05:00,610 --> 00:05:06,010
all of the code on this first argument

121
00:05:02,890 --> 00:05:08,050
making command essentially any string we

122
00:05:06,010 --> 00:05:11,140
pass to it will then be executed as it

123
00:05:08,050 --> 00:05:12,280
was the shell camp so if you're for the

124
00:05:11,140 --> 00:05:14,289
vacuuming I'll be able to read this but

125
00:05:12,280 --> 00:05:16,239
we read it down at the documentation a

126
00:05:14,290 --> 00:05:18,310
little bit and it says never pass

127
00:05:16,240 --> 00:05:20,320
unsanitized user inputs of this function

128
00:05:18,310 --> 00:05:21,970
any input containing show meta

129
00:05:20,320 --> 00:05:24,820
characters may be used to trigger

130
00:05:21,970 --> 00:05:26,470
arbitrary command execution right so if

131
00:05:24,820 --> 00:05:29,710
you're like me when you see stuff in

132
00:05:26,470 --> 00:05:32,080
Doc's like that you're like oh yeah

133
00:05:29,710 --> 00:05:33,640
so basically we need to just find the

134
00:05:32,080 --> 00:05:35,039
source code and wherever be controlled

135
00:05:33,640 --> 00:05:40,000
the first argument and then we're a

136
00:05:35,040 --> 00:05:41,470
hacker person okay so let's say like

137
00:05:40,000 --> 00:05:43,360
simplest way we want to do this let's

138
00:05:41,470 --> 00:05:44,980
just like clone a bunch of nodejs

139
00:05:43,360 --> 00:05:48,220
applications that just correct through

140
00:05:44,980 --> 00:05:50,110
them for the string exact I'm calling

141
00:05:48,220 --> 00:05:52,090
our rubric here because it's essentially

142
00:05:50,110 --> 00:05:55,050
grown but like significantly faster so

143
00:05:52,090 --> 00:05:57,479
if you use grep now use Ripper instead

144
00:05:55,050 --> 00:05:59,680
you'll notice the difference I promise

145
00:05:57,480 --> 00:06:02,530
okay so let's say we downloaded a bunch

146
00:05:59,680 --> 00:06:03,820
of these Travis group repos and we're

147
00:06:02,530 --> 00:06:05,549
like okay let's just look for the

148
00:06:03,820 --> 00:06:08,230
straight exec in all of them

149
00:06:05,550 --> 00:06:11,080
unfortunately this is gonna give you a

150
00:06:08,230 --> 00:06:13,330
lot of matches in other non JavaScript

151
00:06:11,080 --> 00:06:15,940
files right it's not gonna find no J's

152
00:06:13,330 --> 00:06:17,560
command injection in like a read or

153
00:06:15,940 --> 00:06:21,400
something that ran it that's not I'm

154
00:06:17,560 --> 00:06:24,669
going to add okay so let's filter based

155
00:06:21,400 --> 00:06:26,469
on file type okay so grab as well as has

156
00:06:24,669 --> 00:06:28,479
a option where you can say okay only

157
00:06:26,470 --> 00:06:30,560
match you know JavaScript or typescript

158
00:06:28,479 --> 00:06:31,909
files of the jrt

159
00:06:30,560 --> 00:06:33,560
okay cool so we're getting a little bit

160
00:06:31,910 --> 00:06:36,200
better we're filtering out a lot of the

161
00:06:33,560 --> 00:06:39,560
chaff but here's some other cases right

162
00:06:36,200 --> 00:06:41,539
so the first two this is a right-footed

163
00:06:39,560 --> 00:06:44,450
screen obviously if we can't influence

164
00:06:41,540 --> 00:06:46,370
the value of the call to a center we can

165
00:06:44,450 --> 00:06:49,490
do an ejection and then in the second

166
00:06:46,370 --> 00:06:51,410
example these are testifying this other

167
00:06:49,490 --> 00:06:53,330
function called executing foods like

168
00:06:51,410 --> 00:06:55,910
execs no matches but that's not the one

169
00:06:53,330 --> 00:06:57,020
we're looking for but you know we might

170
00:06:55,910 --> 00:07:00,770
remember that here and say we are

171
00:06:57,020 --> 00:07:02,659
awesome that registers so we are not to

172
00:07:00,770 --> 00:07:04,159
be dismissed

173
00:07:02,660 --> 00:07:06,320
okay so let's make the rebeis a little

174
00:07:04,160 --> 00:07:09,320
bit better this time we're going to do

175
00:07:06,320 --> 00:07:10,940
exec and then open a friend right so you

176
00:07:09,320 --> 00:07:12,320
know start a function call and then we

177
00:07:10,940 --> 00:07:15,800
don't want to match hard-coded strings

178
00:07:12,320 --> 00:07:17,810
so let's match like it is a lowercase or

179
00:07:15,800 --> 00:07:19,070
uppercase right okay cool

180
00:07:17,810 --> 00:07:23,000
definitely it's going to be a buy signal

181
00:07:19,070 --> 00:07:25,130
map unfortunately six or scope can be

182
00:07:23,000 --> 00:07:27,680
very flexible Frank so you can have this

183
00:07:25,130 --> 00:07:29,659
call of profitable lines maybe there is

184
00:07:27,680 --> 00:07:31,100
a different function that like ends an

185
00:07:29,660 --> 00:07:34,220
exec right there's something difficult

186
00:07:31,100 --> 00:07:36,020
for rather than after okay so this is

187
00:07:34,220 --> 00:07:38,030
like you know this is like those little

188
00:07:36,020 --> 00:07:40,549
the frustrating but you know we're like

189
00:07:38,030 --> 00:07:43,250
okay like you can match my space maybe

190
00:07:40,550 --> 00:07:44,420
we can do some like multi-line stuff so

191
00:07:43,250 --> 00:07:48,140
maybe we like we try again

192
00:07:44,420 --> 00:07:50,000
but actually the things that could be in

193
00:07:48,140 --> 00:07:51,890
the comments it could be in a string

194
00:07:50,000 --> 00:07:53,450
literal price like okay now we need to

195
00:07:51,890 --> 00:07:56,690
figure out like contextually are we in a

196
00:07:53,450 --> 00:07:58,460
string or comments so we're like past

197
00:07:56,690 --> 00:08:01,400
like this projects is going to get

198
00:07:58,460 --> 00:08:03,620
pretty painful and then look so this

199
00:08:01,400 --> 00:08:05,599
maybe is the actual odd way exact but

200
00:08:03,620 --> 00:08:07,070
now it's a combination of a variable and

201
00:08:05,600 --> 00:08:10,460
a hard-coded string it's not just one of

202
00:08:07,070 --> 00:08:11,930
the other so like at some point we're

203
00:08:10,460 --> 00:08:14,690
just gonna put a table right like this

204
00:08:11,930 --> 00:08:16,130
is not working let's take a step back

205
00:08:14,690 --> 00:08:18,920
and think like why isn't this working

206
00:08:16,130 --> 00:08:22,010
and I argued that the fundamental issue

207
00:08:18,920 --> 00:08:23,690
is that when we're using these matrixes

208
00:08:22,010 --> 00:08:25,760
we're operating on strings right it's

209
00:08:23,690 --> 00:08:27,170
like oh this is just a text file it it

210
00:08:25,760 --> 00:08:29,289
has no other meaning it's just like the

211
00:08:27,170 --> 00:08:31,220
wrong character but that's not actually

212
00:08:29,290 --> 00:08:33,919
conceptually what we want to do really

213
00:08:31,220 --> 00:08:37,099
to us as humans this is source code

214
00:08:33,919 --> 00:08:38,510
which has as an instructor and there's

215
00:08:37,099 --> 00:08:40,790
like the convenience based on the book

216
00:08:38,510 --> 00:08:41,960
it's right but it's not just arbitrary

217
00:08:40,789 --> 00:08:44,300
text there is

218
00:08:41,960 --> 00:08:45,920
a structure here so fundamentally there

219
00:08:44,300 --> 00:08:47,839
is this mismatch between the search

220
00:08:45,920 --> 00:08:49,490
limit reusing and the problem domain

221
00:08:47,840 --> 00:08:51,050
all right so conceptually what we want

222
00:08:49,490 --> 00:08:53,030
is very simple you know we want to find

223
00:08:51,050 --> 00:08:55,490
all method calls where the method name

224
00:08:53,030 --> 00:08:57,230
is a sec and the first argument is not

225
00:08:55,490 --> 00:08:58,490
just hard coded string like I think this

226
00:08:57,230 --> 00:09:01,430
whole time this is probably what you're

227
00:08:58,490 --> 00:09:03,950
thinking right in you can get closer

228
00:09:01,430 --> 00:09:05,449
using some very coverage X's but

229
00:09:03,950 --> 00:09:08,410
fundamentally we're just limited by the

230
00:09:05,450 --> 00:09:11,390
expert civet e of our query language and

231
00:09:08,410 --> 00:09:13,370
you know as many pearl wizards there

232
00:09:11,390 --> 00:09:14,870
perhaps are in the audience's you know

233
00:09:13,370 --> 00:09:17,480
you're spoken to go down a regex rabbit

234
00:09:14,870 --> 00:09:19,310
hole okay so how are we going to solve

235
00:09:17,480 --> 00:09:21,500
this so the solution is we're going to

236
00:09:19,310 --> 00:09:23,599
parse the code into an intermediate

237
00:09:21,500 --> 00:09:25,880
structure so this is going to allow us

238
00:09:23,600 --> 00:09:28,010
to search the source code in a way that

239
00:09:25,880 --> 00:09:29,720
aware of this context and the languages

240
00:09:28,010 --> 00:09:32,420
structure so this is going to let us go

241
00:09:29,720 --> 00:09:34,280
from operating on text strings that is

242
00:09:32,420 --> 00:09:36,589
the concrete syntax to operating on

243
00:09:34,280 --> 00:09:38,600
language constructs or the abstract

244
00:09:36,590 --> 00:09:41,060
syntax so we'll be able to reason about

245
00:09:38,600 --> 00:09:43,940
things like additional solutes variables

246
00:09:41,060 --> 00:09:45,680
function calls and so forth so we're

247
00:09:43,940 --> 00:09:47,600
going to know like oh is this a function

248
00:09:45,680 --> 00:09:49,030
call or is it in a string that's what

249
00:09:47,600 --> 00:09:51,890
we're going to be able to do

250
00:09:49,030 --> 00:09:53,870
okay so there's many ways to do this so

251
00:09:51,890 --> 00:09:54,699
one is you could write your own parser

252
00:09:53,870 --> 00:09:58,070
from scratch

253
00:09:54,700 --> 00:09:59,720
absolutely do not do this the liquids

254
00:09:58,070 --> 00:10:01,100
are complex and ever-evolving this is

255
00:09:59,720 --> 00:10:03,620
going to be a passive engineering effort

256
00:10:01,100 --> 00:10:06,260
you could use a grammar and then generic

257
00:10:03,620 --> 00:10:08,960
parser like antlered for example many

258
00:10:06,260 --> 00:10:10,910
languages have a very very primary or a

259
00:10:08,960 --> 00:10:12,440
standalone tool something that can parse

260
00:10:10,910 --> 00:10:15,050
that language you can particularly those

261
00:10:12,440 --> 00:10:16,700
comparison examples if you have a modern

262
00:10:15,050 --> 00:10:18,199
IDE that lets you you know jump to

263
00:10:16,700 --> 00:10:21,160
definition and all of those nice things

264
00:10:18,200 --> 00:10:23,600
like eclipse or the JetBrains IDs

265
00:10:21,160 --> 00:10:25,579
perhaps somehow we can extract our own

266
00:10:23,600 --> 00:10:28,700
presentation we're going to use a

267
00:10:25,580 --> 00:10:29,840
compiler like clang or we can use the

268
00:10:28,700 --> 00:10:32,380
pressing tool that handles multiple

269
00:10:29,840 --> 00:10:36,260
languages and allows us to extract it in

270
00:10:32,380 --> 00:10:37,460
some nice structure like Jason so that's

271
00:10:36,260 --> 00:10:39,350
what we're going to do there's many

272
00:10:37,460 --> 00:10:41,030
tools that do this one of them is called

273
00:10:39,350 --> 00:10:42,620
semantic by and github

274
00:10:41,030 --> 00:10:44,600
another is compound efficient and

275
00:10:42,620 --> 00:10:46,520
there's others so we're going to use my

276
00:10:44,600 --> 00:10:49,670
first clip for the purposes of this talk

277
00:10:46,520 --> 00:10:50,960
for a couple of reasons one is it

278
00:10:49,670 --> 00:10:53,329
developed that maintained by getting up

279
00:10:50,960 --> 00:10:54,120
so it's going to continue getting better

280
00:10:53,330 --> 00:10:55,680
over time

281
00:10:54,120 --> 00:10:57,660
it also has some additional features

282
00:10:55,680 --> 00:10:58,709
like building import perhaps and call

283
00:10:57,660 --> 00:11:00,810
graphs and things that we don't actually

284
00:10:58,710 --> 00:11:03,360
need for the purposes of this song but

285
00:11:00,810 --> 00:11:05,430
will be usable in the future and then

286
00:11:03,360 --> 00:11:07,110
the other reason is it's written Pascal

287
00:11:05,430 --> 00:11:09,180
so that's going to definitely our big

288
00:11:07,110 --> 00:11:11,790
credit but don't worry

289
00:11:09,180 --> 00:11:14,280
ready for the code in this basically we

290
00:11:11,790 --> 00:11:15,630
just like call semantic and help us

291
00:11:14,280 --> 00:11:16,589
trace it and then we parse that we don't

292
00:11:15,630 --> 00:11:19,620
actually have to deal with

293
00:11:16,590 --> 00:11:22,590
implementation but still makes us feel

294
00:11:19,620 --> 00:11:25,020
cool ok so I enroll your own static

295
00:11:22,590 --> 00:11:26,880
analysis so commercial staff tools can

296
00:11:25,020 --> 00:11:29,010
be very expensive in terms of money as

297
00:11:26,880 --> 00:11:31,620
well as just computational right takes a

298
00:11:29,010 --> 00:11:33,000
lot of RAM takes all kind of run and

299
00:11:31,620 --> 00:11:35,100
also they're a bit opaque you don't

300
00:11:33,000 --> 00:11:36,570
necessarily know why is it finding this

301
00:11:35,100 --> 00:11:39,630
or why they do not find something else

302
00:11:36,570 --> 00:11:41,130
and another application that is I think

303
00:11:39,630 --> 00:11:43,260
not as many people think of is you can

304
00:11:41,130 --> 00:11:45,240
actually do some linked exploratory in

305
00:11:43,260 --> 00:11:47,610
troops in derivative searching of code

306
00:11:45,240 --> 00:11:50,100
bases with static analysis you know it's

307
00:11:47,610 --> 00:11:52,530
not just a black box so our goal here is

308
00:11:50,100 --> 00:11:55,530
can we do something interesting using

309
00:11:52,530 --> 00:11:57,030
open source tools in you know explains a

310
00:11:55,530 --> 00:11:58,380
Python without this whole number like a

311
00:11:57,030 --> 00:12:00,089
few hundred lines maybe announcement

312
00:11:58,380 --> 00:12:02,010
lines or something like that so we

313
00:12:00,090 --> 00:12:04,380
shouldn't be roll-your-own

314
00:12:02,010 --> 00:12:05,939
so again if you're building an app

315
00:12:04,380 --> 00:12:08,220
updater maintain it this is about an

316
00:12:05,940 --> 00:12:10,860
upfront as well as a recurring

317
00:12:08,220 --> 00:12:12,900
engineering cost there's also no

318
00:12:10,860 --> 00:12:14,970
built-in setup rules so we'll begin by

319
00:12:12,900 --> 00:12:16,319
an existing tool that comes with like

320
00:12:14,970 --> 00:12:17,790
here's how I look for sequel infection

321
00:12:16,320 --> 00:12:20,670
here's have a look for XSS and all these

322
00:12:17,790 --> 00:12:22,439
things so you're gonna have to provide

323
00:12:20,670 --> 00:12:24,360
the rules here and if you need to do

324
00:12:22,440 --> 00:12:26,070
data flow analysis this is very hard to

325
00:12:24,360 --> 00:12:27,720
build yourself I would encourage you to

326
00:12:26,070 --> 00:12:29,870
use an existing tool or framework in

327
00:12:27,720 --> 00:12:33,000
fact the case

328
00:12:29,870 --> 00:12:35,100
ok just quickly this is basically a

329
00:12:33,000 --> 00:12:37,290
high-level how every internal cesspool

330
00:12:35,100 --> 00:12:39,270
works and there's like implementation

331
00:12:37,290 --> 00:12:41,790
different system picture this is how the

332
00:12:39,270 --> 00:12:44,130
general that goes so I have source code

333
00:12:41,790 --> 00:12:46,290
right so just text files you then parse

334
00:12:44,130 --> 00:12:49,470
those into an abstract syntax for you

335
00:12:46,290 --> 00:12:51,120
AST so like one of these nodes might be

336
00:12:49,470 --> 00:12:54,810
this is in class F H this is a method

337
00:12:51,120 --> 00:12:56,790
definition and so forth and then from

338
00:12:54,810 --> 00:12:58,530
that tree that that construct a graph

339
00:12:56,790 --> 00:13:00,689
which represents control and data flow

340
00:12:58,530 --> 00:13:04,140
between statements so this allows you to

341
00:13:00,690 --> 00:13:05,889
do things like ok we see you know this

342
00:13:04,140 --> 00:13:07,749
URL parameter is the fastest

343
00:13:05,889 --> 00:13:10,149
which is that passages other method and

344
00:13:07,749 --> 00:13:13,629
then passed away Graham Frye sequel

345
00:13:10,149 --> 00:13:15,040
query boobies equal protection so given

346
00:13:13,629 --> 00:13:17,470
this graph representation of the tools

347
00:13:15,040 --> 00:13:20,170
that apply security rules and our cops

348
00:13:17,470 --> 00:13:23,859
security bugs so conceptually pretty

349
00:13:20,170 --> 00:13:25,118
much every successful works like this so

350
00:13:23,859 --> 00:13:30,220
when this talk maybe you just care about

351
00:13:25,119 --> 00:13:31,540
the the first property ASDs okay so just

352
00:13:30,220 --> 00:13:33,549
to make this a little bit concrete like

353
00:13:31,540 --> 00:13:36,549
what does it actually look like so if

354
00:13:33,549 --> 00:13:38,709
you feed the following line of Ruby mean

355
00:13:36,549 --> 00:13:40,449
equals world into some apps I can say

356
00:13:38,709 --> 00:13:41,949
yoga might give me an adjacent or this

357
00:13:40,449 --> 00:13:45,878
please this is basically what it was

358
00:13:41,949 --> 00:13:47,589
like so and you just go there's a key

359
00:13:45,879 --> 00:13:49,929
called term which basically said that

360
00:13:47,589 --> 00:13:51,879
this is what notes I that it's so at the

361
00:13:49,929 --> 00:13:53,980
top level the first line you have turned

362
00:13:51,879 --> 00:13:56,290
equals assignment so this is saying this

363
00:13:53,980 --> 00:13:58,629
is an assignment statement and then the

364
00:13:56,290 --> 00:14:01,959
assignment target is saying okay what

365
00:13:58,629 --> 00:14:04,720
we're restoring like the right hand side

366
00:14:01,959 --> 00:14:06,368
like look that going into so we see

367
00:14:04,720 --> 00:14:08,079
there the term is identifier so

368
00:14:06,369 --> 00:14:11,319
identifier is basically like a variable

369
00:14:08,079 --> 00:14:13,899
name so okay this assignment what is

370
00:14:11,319 --> 00:14:17,049
getting assigned to a variable whose

371
00:14:13,899 --> 00:14:18,790
name is the strength name and then what

372
00:14:17,049 --> 00:14:21,129
is it what value is it getting so that's

373
00:14:18,790 --> 00:14:23,980
where we look at the assignment value

374
00:14:21,129 --> 00:14:26,799
section thanks to the orange arrow so we

375
00:14:23,980 --> 00:14:28,480
can see there is a text element and the

376
00:14:26,799 --> 00:14:32,619
value of that text element is this great

377
00:14:28,480 --> 00:14:34,119
world so that you know like ten

378
00:14:32,619 --> 00:14:36,129
characters then turns it to this big

379
00:14:34,119 --> 00:14:37,360
jason blob and I've actually cut some

380
00:14:36,129 --> 00:14:40,029
things out for clarity but you can

381
00:14:37,360 --> 00:14:41,470
imagine this is essentially like all of

382
00:14:40,029 --> 00:14:46,179
the things you need to know representing

383
00:14:41,470 --> 00:14:50,259
the coop in a map form okay let's walk

384
00:14:46,179 --> 00:14:52,629
through some examples so first clip talk

385
00:14:50,259 --> 00:14:55,329
about iteratively exploring a rails code

386
00:14:52,629 --> 00:14:57,759
base so one challenges you may have as a

387
00:14:55,329 --> 00:14:59,289
security video or as a pen tester is hey

388
00:14:57,759 --> 00:15:00,879
here's this massive code base it's a

389
00:14:59,289 --> 00:15:03,009
couple million lines of code you've

390
00:15:00,879 --> 00:15:04,959
never seen it before there is little to

391
00:15:03,009 --> 00:15:08,739
no documentation and comments are scarce

392
00:15:04,959 --> 00:15:10,569
right this is every codebase ever so you

393
00:15:08,739 --> 00:15:11,589
don't necessarily know how things are

394
00:15:10,569 --> 00:15:14,169
laid out when you know the word encode

395
00:15:11,589 --> 00:15:15,819
is your time and basically you want to

396
00:15:14,169 --> 00:15:16,880
say oh what's interesting what's

397
00:15:15,819 --> 00:15:18,560
relevant

398
00:15:16,880 --> 00:15:21,439
how would things fit together ideally

399
00:15:18,560 --> 00:15:23,420
but they easily as possible so we

400
00:15:21,440 --> 00:15:24,980
include in this example because a lot of

401
00:15:23,420 --> 00:15:26,719
people think of static analysis as a

402
00:15:24,980 --> 00:15:28,940
black box where you can even source code

403
00:15:26,720 --> 00:15:30,949
you get bugs out and then you're done

404
00:15:28,940 --> 00:15:32,779
but you can actually use it to sort of

405
00:15:30,949 --> 00:15:34,969
iteratively explore code base to

406
00:15:32,779 --> 00:15:36,949
understand how things fit together so

407
00:15:34,970 --> 00:15:38,509
the key difference here is we don't know

408
00:15:36,949 --> 00:15:40,519
what we're looking for ahead of time so

409
00:15:38,509 --> 00:15:44,300
like help us try to get some insight

410
00:15:40,519 --> 00:15:46,610
into like was interesting okay so before

411
00:15:44,300 --> 00:15:48,979
we get into some of the specifics let's

412
00:15:46,610 --> 00:15:50,300
just say any general okay here's the new

413
00:15:48,980 --> 00:15:51,500
code base we've never seen before

414
00:15:50,300 --> 00:15:55,130
oh and we're going to look at the

415
00:15:51,500 --> 00:15:57,350
rubygems.org source code which is like

416
00:15:55,130 --> 00:15:58,790
no rubygems package manager this is the

417
00:15:57,350 --> 00:16:00,649
source code for that website which I

418
00:15:58,790 --> 00:16:02,779
never looked at before before doing this

419
00:16:00,649 --> 00:16:05,000
so there's a useful tool called clock

420
00:16:02,779 --> 00:16:06,560
which if you run in any repo it just

421
00:16:05,000 --> 00:16:08,120
says oh here's all the different

422
00:16:06,560 --> 00:16:09,979
technologies used there's a number of

423
00:16:08,120 --> 00:16:12,170
file as there many lines of code for

424
00:16:09,980 --> 00:16:14,300
that so we can see as expected

425
00:16:12,170 --> 00:16:16,219
lots of Ruby a lot of p.m. we'll

426
00:16:14,300 --> 00:16:17,719
probably config pilots we can see

427
00:16:16,220 --> 00:16:20,509
there's a little bit of fashion they

428
00:16:17,720 --> 00:16:21,860
seem to stalker so just you know in two

429
00:16:20,509 --> 00:16:24,920
seconds we have an idea put sort of

430
00:16:21,860 --> 00:16:26,870
technologies we're using another great

431
00:16:24,920 --> 00:16:28,279
thing to do is okay you know whether or

432
00:16:26,870 --> 00:16:29,870
the dependencies you know what their

433
00:16:28,279 --> 00:16:34,009
party things are being used so in Ruby

434
00:16:29,870 --> 00:16:35,120
this is a fine gem file so we can see

435
00:16:34,009 --> 00:16:37,339
the probably storing data and

436
00:16:35,120 --> 00:16:38,810
elasticsearch they're using something

437
00:16:37,339 --> 00:16:40,220
called present clients so it's probably

438
00:16:38,810 --> 00:16:42,380
making some network requests to some

439
00:16:40,220 --> 00:16:44,779
third party service so we might think oh

440
00:16:42,380 --> 00:16:47,089
I'm going to look forward SSRS or maybe

441
00:16:44,779 --> 00:16:48,589
is a communicating over HTTP so it maybe

442
00:16:47,089 --> 00:16:51,079
is leaking credentials or something like

443
00:16:48,589 --> 00:16:52,490
that we can see that there's this gem

444
00:16:51,079 --> 00:16:53,870
called clearance which maybe we've never

445
00:16:52,490 --> 00:16:55,730
heard of a horse when we google it and

446
00:16:53,870 --> 00:16:58,310
we say oh this is a authentication

447
00:16:55,730 --> 00:17:00,290
vibrator for rails okay cool

448
00:16:58,310 --> 00:17:02,540
kaneki authentication and authorization

449
00:17:00,290 --> 00:17:05,928
always good things to review so let's

450
00:17:02,540 --> 00:17:08,750
keep that might okay so what sort of

451
00:17:05,929 --> 00:17:10,250
analysis are we going to do so again we

452
00:17:08,750 --> 00:17:12,650
have these source code for religions

453
00:17:10,250 --> 00:17:14,449
we're going to type that through and I

454
00:17:12,650 --> 00:17:15,260
get that stole semantics so they get

455
00:17:14,449 --> 00:17:17,000
some ASDs

456
00:17:15,260 --> 00:17:19,099
then we're going to write some custom

457
00:17:17,000 --> 00:17:20,959
scripts in python which rather than

458
00:17:19,099 --> 00:17:22,399
outputting both are going to ideally

459
00:17:20,959 --> 00:17:22,980
give us some program understanding in

460
00:17:22,400 --> 00:17:25,770
terms of

461
00:17:22,980 --> 00:17:28,140
listed together was interesting just a

462
00:17:25,770 --> 00:17:29,430
little quick Ruby and rails background

463
00:17:28,140 --> 00:17:31,470
so in your troller

464
00:17:29,430 --> 00:17:34,050
is a class that defines methods that

465
00:17:31,470 --> 00:17:36,540
respond to HTTP repulses you can think

466
00:17:34,050 --> 00:17:38,250
of this by different routes and there's

467
00:17:36,540 --> 00:17:40,710
something called a before action which

468
00:17:38,250 --> 00:17:42,390
basically says you know call this method

469
00:17:40,710 --> 00:17:46,800
before running this round so you might

470
00:17:42,390 --> 00:17:49,500
imagine you know if you you're you know

471
00:17:46,800 --> 00:17:51,149
personal private notes page we might

472
00:17:49,500 --> 00:17:52,650
know about go for action that says make

473
00:17:51,150 --> 00:17:55,340
sure your assignment before doing this

474
00:17:52,650 --> 00:17:57,540
right thanks

475
00:17:55,340 --> 00:17:59,850
okay so we little better than a couple

476
00:17:57,540 --> 00:18:01,950
of different options it's this one tool

477
00:17:59,850 --> 00:18:04,469
that again it's not gonna I have a link

478
00:18:01,950 --> 00:18:06,480
on the last slide so one of them is - -

479
00:18:04,470 --> 00:18:07,890
rails summarize controllers so basically

480
00:18:06,480 --> 00:18:10,500
what it does the see point is that any

481
00:18:07,890 --> 00:18:12,390
rails repo and it starts printing meta

482
00:18:10,500 --> 00:18:15,930
information about every controller so

483
00:18:12,390 --> 00:18:18,810
first it comes out the class name and

484
00:18:15,930 --> 00:18:20,280
the parent there's requests so this

485
00:18:18,810 --> 00:18:21,450
gives you a quick intuition as to like

486
00:18:20,280 --> 00:18:23,790
what sort of business logic are we

487
00:18:21,450 --> 00:18:25,380
seeing here so we can see a profile

488
00:18:23,790 --> 00:18:27,120
controller so probably this represents

489
00:18:25,380 --> 00:18:29,580
when they use their crates of chrome

490
00:18:27,120 --> 00:18:31,590
cloud this is probably it and second we

491
00:18:29,580 --> 00:18:33,540
see like a web host controller okay cool

492
00:18:31,590 --> 00:18:36,090
you know I know what web hook is

493
00:18:33,540 --> 00:18:38,129
probably there's a way to specify some

494
00:18:36,090 --> 00:18:39,929
URL that when some action happens you

495
00:18:38,130 --> 00:18:41,720
know send a post request and what might

496
00:18:39,930 --> 00:18:43,920
be interesting to look at maybe that's

497
00:18:41,720 --> 00:18:45,240
like the rest kind thing that we looked

498
00:18:43,920 --> 00:18:46,830
at before you know there's a given

499
00:18:45,240 --> 00:18:48,600
activity in the code yet we're just you

500
00:18:46,830 --> 00:18:52,169
know this is like minute file of a new

501
00:18:48,600 --> 00:18:53,100
code base and then it also prints out

502
00:18:52,170 --> 00:18:55,050
all the different methods that are

503
00:18:53,100 --> 00:18:57,270
defined so for profiles we can see

504
00:18:55,050 --> 00:19:00,450
various current madnesses are defined

505
00:18:57,270 --> 00:19:02,610
and for the post controller like okay

506
00:19:00,450 --> 00:19:04,080
this this fire and center are pretty

507
00:19:02,610 --> 00:19:06,389
interesting right so fire is probably

508
00:19:04,080 --> 00:19:08,970
like calling a web hook say who runs

509
00:19:06,390 --> 00:19:12,210
probably sending the you off or a web

510
00:19:08,970 --> 00:19:14,040
hook where to communicate to and then we

511
00:19:12,210 --> 00:19:16,890
see a list of before actions so again

512
00:19:14,040 --> 00:19:18,840
these are things that happen before one

513
00:19:16,890 --> 00:19:22,170
of these actions are called

514
00:19:18,840 --> 00:19:23,490
so some of these are pretty interesting

515
00:19:22,170 --> 00:19:25,080
like if we look at the bottom and we see

516
00:19:23,490 --> 00:19:27,000
that there is a before action called

517
00:19:25,080 --> 00:19:28,560
authenticate with API - right that

518
00:19:27,000 --> 00:19:29,760
sounds pretty important so probably

519
00:19:28,560 --> 00:19:31,530
we're going to review the source code of

520
00:19:29,760 --> 00:19:34,560
that to make sure there aren't any bugs

521
00:19:31,530 --> 00:19:35,700
associated with it so looking at scalar

522
00:19:34,560 --> 00:19:38,610
controllers

523
00:19:35,700 --> 00:19:40,380
see there's an API based controller so a

524
00:19:38,610 --> 00:19:42,330
common Rails pattern is you have either

525
00:19:40,380 --> 00:19:44,399
an application controller if you got

526
00:19:42,330 --> 00:19:46,710
base controller it defines these helper

527
00:19:44,399 --> 00:19:48,809
methods used by other things so we can

528
00:19:46,710 --> 00:19:51,019
see a couple of them here specifically

529
00:19:48,809 --> 00:19:54,480
you know like verify we'll go TP

530
00:19:51,019 --> 00:19:56,700
authenticate with API QT a some pretty

531
00:19:54,480 --> 00:19:58,799
interesting so again there's maybe

532
00:19:56,700 --> 00:20:00,029
hundreds of files these are a couple of

533
00:19:58,799 --> 00:20:03,389
things that probably want to start

534
00:20:00,029 --> 00:20:05,190
prepping for quickly and then we can see

535
00:20:03,389 --> 00:20:07,549
a couple of interesting before actions

536
00:20:05,190 --> 00:20:12,029
are applied on the owners controller

537
00:20:07,549 --> 00:20:14,429
again Yankee also the verified gem

538
00:20:12,029 --> 00:20:16,740
ownership and verify with OTP like I

539
00:20:14,429 --> 00:20:18,860
know this is good new person that sounds

540
00:20:16,740 --> 00:20:23,279
pretty interesting I wonder how it works

541
00:20:18,860 --> 00:20:26,399
so diversion before we look at the next

542
00:20:23,279 --> 00:20:28,950
one so again a common pattern is you can

543
00:20:26,399 --> 00:20:30,809
do a PID controller that controllers

544
00:20:28,950 --> 00:20:32,429
occurred from and this is you're

545
00:20:30,809 --> 00:20:34,379
defining the number of color functions

546
00:20:32,429 --> 00:20:37,019
that they can use as well as setting

547
00:20:34,380 --> 00:20:38,820
like the four actions that apply to be

548
00:20:37,019 --> 00:20:41,700
many other controllers right in the

549
00:20:38,820 --> 00:20:43,350
common thing to do here is security

550
00:20:41,700 --> 00:20:45,240
protections right like implements

551
00:20:43,350 --> 00:20:46,260
decertified everything as these were

552
00:20:45,240 --> 00:20:48,090
protection of them and everything that

553
00:20:46,260 --> 00:20:51,269
prepares for me or do them often they're

554
00:20:48,090 --> 00:20:54,000
off GHS so the above that I found on a

555
00:20:51,269 --> 00:20:55,679
number of tests is where there's a

556
00:20:54,000 --> 00:20:56,700
controller that doesn't inherit from one

557
00:20:55,679 --> 00:20:58,409
of these characters all the ways that

558
00:20:56,700 --> 00:21:00,090
I'm supposed to write so you're okay let

559
00:20:58,409 --> 00:21:01,380
me just do the various security checks

560
00:21:00,090 --> 00:21:02,820
in the space controller and then I know

561
00:21:01,380 --> 00:21:05,279
it all will be applying everywhere but

562
00:21:02,820 --> 00:21:06,928
if you don't subclass them properly you

563
00:21:05,279 --> 00:21:10,320
don't get those here to secure a checks

564
00:21:06,929 --> 00:21:11,880
so this is a obvious mistake but it's

565
00:21:10,320 --> 00:21:15,539
hard to check all of them if you have

566
00:21:11,880 --> 00:21:18,210
hundreds of controller files right so we

567
00:21:15,539 --> 00:21:21,450
built a controllers by superclass method

568
00:21:18,210 --> 00:21:23,460
which basically looks at every separable

569
00:21:21,450 --> 00:21:25,200
controller it figures out what these

570
00:21:23,460 --> 00:21:29,669
super classes and then routes though

571
00:21:25,200 --> 00:21:31,019
they stop that so here we see an

572
00:21:29,669 --> 00:21:32,940
imperfect rollers like the evening

573
00:21:31,019 --> 00:21:35,159
passwords session is and users

574
00:21:32,940 --> 00:21:36,870
controller all subclass various

575
00:21:35,159 --> 00:21:39,090
controllers provided by clearance which

576
00:21:36,870 --> 00:21:41,100
again is this authentication memory so

577
00:21:39,090 --> 00:21:43,168
again we've never looked at clearance

578
00:21:41,100 --> 00:21:44,820
before but some obvious questions come

579
00:21:43,169 --> 00:21:46,620
out right like okay how is should

580
00:21:44,820 --> 00:21:47,070
clearance be used like are they using it

581
00:21:46,620 --> 00:21:48,580
right

582
00:21:47,070 --> 00:21:50,230
are there big setting

583
00:21:48,580 --> 00:21:51,580
that are specifically important like are

584
00:21:50,230 --> 00:21:54,789
there things you need to turn off or

585
00:21:51,580 --> 00:21:56,168
turn on in order to like half of the

586
00:21:54,789 --> 00:21:59,500
vulnerability these are those good

587
00:21:56,169 --> 00:22:01,390
questions and then we look at all the

588
00:21:59,500 --> 00:22:03,549
other controllers and all of them I've

589
00:22:01,390 --> 00:22:05,590
EV eryth from the application controller

590
00:22:03,549 --> 00:22:07,418
or the API based controller so at least

591
00:22:05,590 --> 00:22:10,928
for this visiting type of issue you know

592
00:22:07,419 --> 00:22:13,630
Mirka so again this just saves us some

593
00:22:10,929 --> 00:22:15,700
time right this is just you know if you

594
00:22:13,630 --> 00:22:17,830
have in mind for Python and you could

595
00:22:15,700 --> 00:22:20,080
imagine that rolling as it Tunes the ICP

596
00:22:17,830 --> 00:22:21,460
checks so every time any developer you

597
00:22:20,080 --> 00:22:23,320
know maybe your company has tens or

598
00:22:21,460 --> 00:22:24,820
hundreds of developers every time they

599
00:22:23,320 --> 00:22:26,980
get created in controller you could just

600
00:22:24,820 --> 00:22:29,019
have this check oh are you some pricing

601
00:22:26,980 --> 00:22:31,059
one of the controllers that we expect if

602
00:22:29,019 --> 00:22:32,529
not you know sent me a slack message or

603
00:22:31,059 --> 00:22:35,470
you know comments on the committee talk

604
00:22:32,529 --> 00:22:37,330
to security or something like that okay

605
00:22:35,470 --> 00:22:37,809
let's look at the last one for this

606
00:22:37,330 --> 00:22:40,720
example

607
00:22:37,809 --> 00:22:42,990
so before actions are very interesting

608
00:22:40,720 --> 00:22:45,220
and one thing we might want to know is

609
00:22:42,990 --> 00:22:46,779
how are they apply it across the whole

610
00:22:45,220 --> 00:22:48,820
code base right so we can look at each

611
00:22:46,779 --> 00:22:50,679
file individually but what this does is

612
00:22:48,820 --> 00:22:52,960
it looks at every before actually used

613
00:22:50,679 --> 00:22:56,860
by any controller and then groups

614
00:22:52,960 --> 00:22:59,529
basically which controller uses them and

615
00:22:56,860 --> 00:23:01,689
then and then it also looks at like you

616
00:22:59,529 --> 00:23:03,549
can selectively apply before actions you

617
00:23:01,690 --> 00:23:05,350
can't say apply this to every action of

618
00:23:03,549 --> 00:23:07,360
the controller or you can say only these

619
00:23:05,350 --> 00:23:09,908
ones where all of them but these ones so

620
00:23:07,360 --> 00:23:11,830
what this does is for example we have

621
00:23:09,909 --> 00:23:13,419
redirects assignment which conceptually

622
00:23:11,830 --> 00:23:16,360
without even looking at the source we

623
00:23:13,419 --> 00:23:19,299
could think okay probably any any action

624
00:23:16,360 --> 00:23:20,559
this applies to means you have to be you

625
00:23:19,299 --> 00:23:23,019
have to get one thing right so you have

626
00:23:20,559 --> 00:23:25,809
to be authenticated to do this and then

627
00:23:23,019 --> 00:23:27,159
you don't spend the under ignored on the

628
00:23:25,809 --> 00:23:28,240
right hand side probably about something

629
00:23:27,159 --> 00:23:30,340
you can do authentic peoples would have

630
00:23:28,240 --> 00:23:31,960
intuitively again we looked at no source

631
00:23:30,340 --> 00:23:33,428
code but we're already starting to

632
00:23:31,960 --> 00:23:35,130
understand probably the developers

633
00:23:33,429 --> 00:23:37,690
expectations when they're writing this

634
00:23:35,130 --> 00:23:40,419
so as you would expect various crud

635
00:23:37,690 --> 00:23:42,490
actions for profiles you have to be

636
00:23:40,419 --> 00:23:44,769
locked in but you can shown that it's

637
00:23:42,490 --> 00:23:48,429
few without you pumping sort of make

638
00:23:44,769 --> 00:23:50,649
sense we see for the Yankees controller

639
00:23:48,429 --> 00:23:52,539
to reset it you probably have to be

640
00:23:50,649 --> 00:23:54,370
locked in but it looks like you can view

641
00:23:52,539 --> 00:23:57,399
them without being locked in right so I

642
00:23:54,370 --> 00:23:59,168
don't know to me I have surprised that

643
00:23:57,399 --> 00:24:00,610
another authenticated person can maybe

644
00:23:59,169 --> 00:24:01,270
look at API keys that maybe there's

645
00:24:00,610 --> 00:24:03,310
other protection

646
00:24:01,270 --> 00:24:04,629
to place maybe you need specify an API

647
00:24:03,310 --> 00:24:05,940
token and a header or something like

648
00:24:04,630 --> 00:24:08,020
that which would be different from here

649
00:24:05,940 --> 00:24:11,290
but again this is like something

650
00:24:08,020 --> 00:24:14,320
interesting to look at you can also say

651
00:24:11,290 --> 00:24:17,550
oh is a specific book or actually

652
00:24:14,320 --> 00:24:19,840
applied across say almost a changing

653
00:24:17,550 --> 00:24:22,810
request for various models except this

654
00:24:19,840 --> 00:24:26,590
one model right that everybody might be

655
00:24:22,810 --> 00:24:28,480
above so in general just like what is

656
00:24:26,590 --> 00:24:30,490
the trend in publicist of mine so here

657
00:24:28,480 --> 00:24:33,280
we can see for a couple ones Oh

658
00:24:30,490 --> 00:24:35,740
there are several controllers where some

659
00:24:33,280 --> 00:24:37,030
of the actions in a class get something

660
00:24:35,740 --> 00:24:38,770
they don't so like why is that

661
00:24:37,030 --> 00:24:40,240
intentional we're trying to give a quick

662
00:24:38,770 --> 00:24:44,290
understanding and developers intentions

663
00:24:40,240 --> 00:24:47,470
here okay so next example we're going to

664
00:24:44,290 --> 00:24:51,149
look across all of github for command

665
00:24:47,470 --> 00:24:54,370
injection because that's what we do okay

666
00:24:51,150 --> 00:24:57,430
quick refresher so again if we can

667
00:24:54,370 --> 00:24:59,709
control input the to Tron exec command

668
00:24:57,430 --> 00:25:01,270
injection so this is a yeah I generally

669
00:24:59,710 --> 00:25:05,200
you should use exact file where spot

670
00:25:01,270 --> 00:25:07,000
instead another quick background so

671
00:25:05,200 --> 00:25:10,720
Express status is one of the most

672
00:25:07,000 --> 00:25:14,170
popular frameworks and how it works is

673
00:25:10,720 --> 00:25:17,350
you can define the routes like in the

674
00:25:14,170 --> 00:25:19,600
second example so you have this function

675
00:25:17,350 --> 00:25:22,629
call map rec representing the requests

676
00:25:19,600 --> 00:25:26,199
coming in Brett arias representing the

677
00:25:22,630 --> 00:25:28,750
response going out so the key part the

678
00:25:26,200 --> 00:25:30,700
reason I mention this here is your old

679
00:25:28,750 --> 00:25:32,980
keep track of like what we nav control

680
00:25:30,700 --> 00:25:36,490
of and that is anything from like a

681
00:25:32,980 --> 00:25:40,690
request object or basically a sort of a

682
00:25:36,490 --> 00:25:42,420
cheap shorthand anything that has RTP as

683
00:25:40,690 --> 00:25:45,550
a very perfect

684
00:25:42,420 --> 00:25:47,770
okay so github has a lot of code right

685
00:25:45,550 --> 00:25:49,629
and we could bring a crawler to try to

686
00:25:47,770 --> 00:25:51,220
tell them as many repos as possible but

687
00:25:49,630 --> 00:25:53,140
that's going to take a lot of time maybe

688
00:25:51,220 --> 00:25:55,390
we'll get rate limited and we want to do

689
00:25:53,140 --> 00:25:55,900
this ideally as lazily and easily as

690
00:25:55,390 --> 00:25:59,590
possible

691
00:25:55,900 --> 00:26:02,020
right so fortunately Google bigquery and

692
00:25:59,590 --> 00:26:04,389
has a number of public datasets

693
00:26:02,020 --> 00:26:06,340
one of them is essentially it's been

694
00:26:04,390 --> 00:26:07,330
information about every open source

695
00:26:06,340 --> 00:26:10,840
github repo

696
00:26:07,330 --> 00:26:14,820
cool so basically what we can do is we

697
00:26:10,840 --> 00:26:16,470
can query this bigquery data set and the

698
00:26:14,820 --> 00:26:18,540
throughout all these JavaScript files

699
00:26:16,470 --> 00:26:20,490
that contain the following strings so

700
00:26:18,540 --> 00:26:23,280
the child process representing can be a

701
00:26:20,490 --> 00:26:25,410
module exec representing these

702
00:26:23,280 --> 00:26:27,270
functional new caramel and then ret

703
00:26:25,410 --> 00:26:29,160
representing oh this looks like maybe

704
00:26:27,270 --> 00:26:31,290
it's a request topping so again these

705
00:26:29,160 --> 00:26:33,810
are heuristics we don't know that RTP

706
00:26:31,290 --> 00:26:36,210
was a request object but it's a nice way

707
00:26:33,810 --> 00:26:38,190
to stack up like limit down in the chat

708
00:26:36,210 --> 00:26:40,170
so after applying this filter we get a

709
00:26:38,190 --> 00:26:43,350
list of interesting files again we pass

710
00:26:40,170 --> 00:26:45,150
them into semantics which gives us a STS

711
00:26:43,350 --> 00:26:48,000
we then apply some rules that will

712
00:26:45,150 --> 00:26:50,100
distract soon and pop the other into

713
00:26:48,000 --> 00:26:51,780
command injection so spoilers we did

714
00:26:50,100 --> 00:26:55,649
find the number of cases and we'll show

715
00:26:51,780 --> 00:26:57,060
you some code snippets okay so why did

716
00:26:55,650 --> 00:27:00,120
we have to do all this work so let's

717
00:26:57,060 --> 00:27:02,520
look at how this work at it and big

718
00:27:00,120 --> 00:27:06,060
picture book so in the big great dataset

719
00:27:02,520 --> 00:27:07,830
for about 2.2 billion files so we didn't

720
00:27:06,060 --> 00:27:10,080
want to analyze all of those that would

721
00:27:07,830 --> 00:27:11,520
take a lot so when you filter those down

722
00:27:10,080 --> 00:27:14,429
to just the JavaScript files

723
00:27:11,520 --> 00:27:17,639
that's just 284 million oh those

724
00:27:14,430 --> 00:27:20,190
JavaScript files only 1% of them include

725
00:27:17,640 --> 00:27:22,410
this greatness of process and except and

726
00:27:20,190 --> 00:27:27,210
of those only about a little bit under

727
00:27:22,410 --> 00:27:30,930
4% have the straight rdq as well so our

728
00:27:27,210 --> 00:27:34,130
total simple science are innocent for

729
00:27:30,930 --> 00:27:36,510
our example is about well thousand pots

730
00:27:34,130 --> 00:27:37,740
ok so generally when you're in graduate

731
00:27:36,510 --> 00:27:39,420
programs how you beat something you want

732
00:27:37,740 --> 00:27:42,270
to do like the easiest quickest thing

733
00:27:39,420 --> 00:27:44,310
possible so there's a nice command-line

734
00:27:42,270 --> 00:27:46,200
utility called JQ which basically you

735
00:27:44,310 --> 00:27:47,700
can pass Kaizen hit and then you can

736
00:27:46,200 --> 00:27:49,980
pull out an arbitrary

737
00:27:47,700 --> 00:27:51,450
keys and values and sort of slice and

738
00:27:49,980 --> 00:27:53,700
dice Jason like super easy on the

739
00:27:51,450 --> 00:27:56,880
command line so let's say that we've

740
00:27:53,700 --> 00:27:59,100
parsed a javascript file into an ast and

741
00:27:56,880 --> 00:28:01,740
store it back into Jason we can then

742
00:27:59,100 --> 00:28:05,610
type add it to Jake you and say ok find

743
00:28:01,740 --> 00:28:08,820
me all the keys where the key mean is

744
00:28:05,610 --> 00:28:11,820
call option and then select within that

745
00:28:08,820 --> 00:28:15,210
those where the main attribute is exec

746
00:28:11,820 --> 00:28:17,220
so this is when match this JQ crawl of

747
00:28:15,210 --> 00:28:20,430
the left hand side click match on the

748
00:28:17,220 --> 00:28:22,740
right hand side basically in knowing

749
00:28:20,430 --> 00:28:25,440
public call function whose name is exec

750
00:28:22,740 --> 00:28:26,770
and you also see semantics includes like

751
00:28:25,440 --> 00:28:29,110
where the file is this

752
00:28:26,770 --> 00:28:31,450
and things like that so what's

753
00:28:29,110 --> 00:28:33,850
interesting about this example is even

754
00:28:31,450 --> 00:28:35,800
though it's very simple writers is not a

755
00:28:33,850 --> 00:28:38,409
complicated JQ expression this is

756
00:28:35,800 --> 00:28:40,090
already better at work precisely that

757
00:28:38,410 --> 00:28:42,070
the most complicated regular expression

758
00:28:40,090 --> 00:28:44,559
we can write right because we know that

759
00:28:42,070 --> 00:28:46,419
is a function call this is not in a

760
00:28:44,559 --> 00:28:48,428
comment or in the strengthened role and

761
00:28:46,420 --> 00:28:51,670
we know that the email of it is exactly

762
00:28:48,429 --> 00:28:56,110
things that it's not who exec or execs

763
00:28:51,670 --> 00:28:58,750
who so even very simply this level it's

764
00:28:56,110 --> 00:29:01,209
like specific is better than readiness

765
00:28:58,750 --> 00:29:02,440
so not too shabby but unfortunately

766
00:29:01,210 --> 00:29:04,870
there's some limitations here right so

767
00:29:02,440 --> 00:29:07,300
JQ it was nice when you're continuously

768
00:29:04,870 --> 00:29:09,280
getting narrower and narrower but it's

769
00:29:07,300 --> 00:29:10,659
hard if you make a live match card match

770
00:29:09,280 --> 00:29:13,450
preferred of the treated and go back up

771
00:29:10,660 --> 00:29:15,670
so in the first example Jacob could do

772
00:29:13,450 --> 00:29:17,740
this pretty well where you're accessing

773
00:29:15,670 --> 00:29:20,470
something from the request and then

774
00:29:17,740 --> 00:29:22,450
immediately has get to exact right you

775
00:29:20,470 --> 00:29:24,760
can't find that at JP not too hard but

776
00:29:22,450 --> 00:29:25,600
and realistically it co doesn't never

777
00:29:24,760 --> 00:29:28,540
going to happen

778
00:29:25,600 --> 00:29:32,260
right so below we have an example that

779
00:29:28,540 --> 00:29:33,790
we found from real code and how does the

780
00:29:32,260 --> 00:29:35,470
command variable set to something from

781
00:29:33,790 --> 00:29:37,678
the request and then pass it that on the

782
00:29:35,470 --> 00:29:40,120
next line to the second so it's like

783
00:29:37,679 --> 00:29:42,010
trivially more complicated but this

784
00:29:40,120 --> 00:29:43,989
would be our data going to make it JQ so

785
00:29:42,010 --> 00:29:45,840
we want to grant some custom codes who

786
00:29:43,990 --> 00:29:51,640
they finding this a little bit better

787
00:29:45,840 --> 00:29:53,620
okay so quick terminology so a source is

788
00:29:51,640 --> 00:29:55,450
basically anywhere the untrusted an

789
00:29:53,620 --> 00:29:58,120
attacker controlled data it comes in so

790
00:29:55,450 --> 00:29:59,860
URL parameters data from third-party

791
00:29:58,120 --> 00:30:01,750
sources is basically like an attacker

792
00:29:59,860 --> 00:30:04,629
what we have control over that's at and

793
00:30:01,750 --> 00:30:06,730
source eighteens sync is a function call

794
00:30:04,630 --> 00:30:09,340
that's dangerous and attacker before the

795
00:30:06,730 --> 00:30:10,990
hook gets there so again like a nun for

796
00:30:09,340 --> 00:30:12,820
him try single query a shallow technique

797
00:30:10,990 --> 00:30:16,240
something new stuff like that so

798
00:30:12,820 --> 00:30:17,620
basically if a data from a source gets

799
00:30:16,240 --> 00:30:22,059
to a sink that's what kind of things

800
00:30:17,620 --> 00:30:24,340
happen okay so we get sort of simple way

801
00:30:22,059 --> 00:30:26,770
to introduce false positives is limiting

802
00:30:24,340 --> 00:30:29,678
the path length you know doing all the

803
00:30:26,770 --> 00:30:31,490
o'clock class so once that would be our

804
00:30:29,679 --> 00:30:34,790
example from before

805
00:30:31,490 --> 00:30:39,260
using it directly and to stuff which is

806
00:30:34,790 --> 00:30:44,030
what we do here is basically if a an

807
00:30:39,260 --> 00:30:45,530
assignment uses something a call to

808
00:30:44,030 --> 00:30:46,910
requesting they're like a cookie a euro

809
00:30:45,530 --> 00:30:49,070
grandma or something like that because

810
00:30:46,910 --> 00:30:50,090
maintains that variable if that variable

811
00:30:49,070 --> 00:30:54,050
that knows the sink

812
00:30:50,090 --> 00:30:56,559
we found a command injection so again

813
00:30:54,050 --> 00:31:00,440
this is like very rough approximation

814
00:30:56,559 --> 00:31:03,290
any very old name correct so that's

815
00:31:00,440 --> 00:31:04,760
example like for a parameter or cookies

816
00:31:03,290 --> 00:31:07,120
and then if one of those is passed to

817
00:31:04,760 --> 00:31:09,470
accept the boom command injection

818
00:31:07,120 --> 00:31:12,020
unfortunately this found a few things

819
00:31:09,470 --> 00:31:13,970
that not very many which made us sad we

820
00:31:12,020 --> 00:31:18,170
did that we need to debate a better

821
00:31:13,970 --> 00:31:19,400
approximation so here's what we did so

822
00:31:18,170 --> 00:31:23,090
basically we said that they've noticed

823
00:31:19,400 --> 00:31:24,559
painted if a sub tree contains a taint

824
00:31:23,090 --> 00:31:27,409
source so we needed to do this because

825
00:31:24,559 --> 00:31:29,690
it handles expressions for example like

826
00:31:27,410 --> 00:31:31,429
x equals something from a request plus

827
00:31:29,690 --> 00:31:33,530
either a very overt aren't good is great

828
00:31:31,429 --> 00:31:35,480
or something like that so it's a bit

829
00:31:33,530 --> 00:31:36,620
quick diagram of like what the a steam

830
00:31:35,480 --> 00:31:39,170
of the clips let's say we have an

831
00:31:36,620 --> 00:31:40,189
assignment on the right-hand side you

832
00:31:39,170 --> 00:31:42,290
can see that there's an extreme

833
00:31:40,190 --> 00:31:45,740
concatenation and then one of those

834
00:31:42,290 --> 00:31:48,080
parts is a string and another is a call

835
00:31:45,740 --> 00:31:48,650
tuesday requests so it taints or so okay

836
00:31:48,080 --> 00:31:51,139
cool

837
00:31:48,650 --> 00:31:52,250
so that concatenation part of it to see

838
00:31:51,140 --> 00:31:54,559
them so that we're going to take the

839
00:31:52,250 --> 00:31:58,010
whole thing and then we know that the

840
00:31:54,559 --> 00:32:00,800
left hand side that is the variable we

841
00:31:58,010 --> 00:32:04,090
considered that to eat okay so let's

842
00:32:00,800 --> 00:32:06,649
walk through this on a real example so

843
00:32:04,090 --> 00:32:08,449
again this is from like a real codes

844
00:32:06,650 --> 00:32:11,510
born of all cosas de that we found in

845
00:32:08,450 --> 00:32:14,330
them so any column to request we know

846
00:32:11,510 --> 00:32:17,210
that this is attainted a user can am i

847
00:32:14,330 --> 00:32:20,030
looking and then we apply on first row

848
00:32:17,210 --> 00:32:23,240
which is an ast node is tainted if any

849
00:32:20,030 --> 00:32:26,480
descendants is attained source so record

850
00:32:23,240 --> 00:32:29,090
a query back then this is the source of

851
00:32:26,480 --> 00:32:31,700
tainted data and this strength of the

852
00:32:29,090 --> 00:32:34,189
catenation up right hand side together

853
00:32:31,700 --> 00:32:38,090
we have my robot we know that this will

854
00:32:34,190 --> 00:32:40,660
things that we then look at rules rule

855
00:32:38,090 --> 00:32:42,879
number two which that says okay if

856
00:32:40,660 --> 00:32:45,250
there's an assignment where

857
00:32:42,880 --> 00:32:49,060
right - tainted then the we came to that

858
00:32:45,250 --> 00:32:51,280
variable and then finally is something

859
00:32:49,060 --> 00:32:55,060
that we teach it through these two steps

860
00:32:51,280 --> 00:32:57,129
is passed to a single then we say that

861
00:32:55,060 --> 00:32:58,690
expands in turn has occurred so

862
00:32:57,130 --> 00:33:00,220
conceptually this is actually as a

863
00:32:58,690 --> 00:33:04,900
security person probably how you think

864
00:33:00,220 --> 00:33:07,540
of it right we're just codifying in like

865
00:33:04,900 --> 00:33:09,220
a programming rigorous play what you are

866
00:33:07,540 --> 00:33:11,760
anything about right so if you look at

867
00:33:09,220 --> 00:33:15,190
this you would say oh my control is

868
00:33:11,760 --> 00:33:16,600
right got great FS cool oh I can see

869
00:33:15,190 --> 00:33:18,310
that that's me by for this other thing

870
00:33:16,600 --> 00:33:20,110
it's sort of command I have a little bit

871
00:33:18,310 --> 00:33:22,810
of influence over planets oh and I see

872
00:33:20,110 --> 00:33:25,030
command and go somewhere dangerous thus

873
00:33:22,810 --> 00:33:28,360
this is something I should try an SPS

874
00:33:25,030 --> 00:33:29,590
see it so let's just walk through with a

875
00:33:28,360 --> 00:33:32,909
couple of examples he's not with his

876
00:33:29,590 --> 00:33:35,560
various reboots so here we can see a

877
00:33:32,910 --> 00:33:39,630
current is being built up by a number of

878
00:33:35,560 --> 00:33:42,970
different cookies as well as the story

879
00:33:39,630 --> 00:33:49,720
idea so basically a malicious people

880
00:33:42,970 --> 00:33:52,570
that can be put in member boots and here

881
00:33:49,720 --> 00:33:55,810
we can see in part of the query just

882
00:33:52,570 --> 00:33:57,250
directly a task except pretty economical

883
00:33:55,810 --> 00:34:00,070
here

884
00:33:57,250 --> 00:34:01,870
this example is interesting because we

885
00:34:00,070 --> 00:34:03,669
can actually see the developer made a

886
00:34:01,870 --> 00:34:05,550
comment that says oh I need was get me

887
00:34:03,670 --> 00:34:07,420
close this could be an infection

888
00:34:05,550 --> 00:34:10,120
unfortunately this isn't sufficient

889
00:34:07,420 --> 00:34:12,639
right because we mean that people escape

890
00:34:10,120 --> 00:34:13,989
the quilts but if you use additional

891
00:34:12,639 --> 00:34:15,790
many characters by something cool in

892
00:34:13,989 --> 00:34:17,949
some way for example something that we

893
00:34:15,790 --> 00:34:19,300
could still do coded connection so I

894
00:34:17,949 --> 00:34:21,429
thought this was interesting because I

895
00:34:19,300 --> 00:34:26,980
could come look like they cared but it

896
00:34:21,429 --> 00:34:29,879
just wasn't right okay so this technique

897
00:34:26,980 --> 00:34:32,080
isn't perfect right it's fairly simple

898
00:34:29,880 --> 00:34:34,180
programs and acts as the false positive

899
00:34:32,080 --> 00:34:35,620
rate is pretty low so we're gonna have a

900
00:34:34,179 --> 00:34:37,659
number of false negative that is there

901
00:34:35,620 --> 00:34:39,069
was real bugs if you won't find but we

902
00:34:37,659 --> 00:34:44,560
don't have to triage hundreds of issues

903
00:34:39,070 --> 00:34:46,450
which Ferrari is actually so one example

904
00:34:44,560 --> 00:34:49,630
that we thought was pretty interesting

905
00:34:46,449 --> 00:34:50,980
about a real hot auditive we encountered

906
00:34:49,630 --> 00:34:53,840
so this code here

907
00:34:50,980 --> 00:34:56,340
so again may be very welcome and is

908
00:34:53,840 --> 00:34:58,680
information requests of cool we control

909
00:34:56,340 --> 00:35:00,240
that but then it's comparative Shaitan

910
00:34:58,680 --> 00:35:02,609
against a series of hard-coded strings

911
00:35:00,240 --> 00:35:04,379
so yes we can provide whatever we want

912
00:35:02,609 --> 00:35:06,210
but it's only going to get passed to

913
00:35:04,380 --> 00:35:08,180
executive that specific string so we

914
00:35:06,210 --> 00:35:12,060
can't really do command efficient there

915
00:35:08,180 --> 00:35:14,190
squish man is that okay so what about

916
00:35:12,060 --> 00:35:15,990
where I was a person not going to be

917
00:35:14,190 --> 00:35:19,170
changes like a laptop

918
00:35:15,990 --> 00:35:21,899
we found 37 injection bugs across

919
00:35:19,170 --> 00:35:24,510
various remotes I am and I will say

920
00:35:21,900 --> 00:35:25,710
disclaimer most of these are not you

921
00:35:24,510 --> 00:35:27,930
know super important production

922
00:35:25,710 --> 00:35:30,960
applications they're mostly like people

923
00:35:27,930 --> 00:35:33,359
side projects or old code bases but it

924
00:35:30,960 --> 00:35:35,280
pretty much all are real bugs though so

925
00:35:33,359 --> 00:35:36,990
that didn't raise the power of attendee

926
00:35:35,280 --> 00:35:40,400
and that you can do interesting things

927
00:35:36,990 --> 00:35:42,359
and like a few hundred lines in Python

928
00:35:40,400 --> 00:35:44,150
it was talk a little bit about some

929
00:35:42,359 --> 00:35:45,900
travelers and limitations

930
00:35:44,150 --> 00:35:48,950
that's is there's some things that just

931
00:35:45,900 --> 00:35:51,300
fundamentally hard about static analysis

932
00:35:48,950 --> 00:35:52,890
basically you reasoning about any

933
00:35:51,300 --> 00:35:55,260
non-trivial program property is

934
00:35:52,890 --> 00:35:58,350
undecidable you can check out the prices

935
00:35:55,260 --> 00:36:00,390
here I think with the group but in

936
00:35:58,350 --> 00:36:01,980
general dynamically typed languages like

937
00:36:00,390 --> 00:36:04,470
Python Ruby JavaScript said to be a

938
00:36:01,980 --> 00:36:05,790
little bit harder than say sharp or

939
00:36:04,470 --> 00:36:08,459
dominant or other statically typed

940
00:36:05,790 --> 00:36:10,650
languages any language a teacher or

941
00:36:08,460 --> 00:36:12,869
we're even executing strings s code such

942
00:36:10,650 --> 00:36:15,840
as email function reflection pen

943
00:36:12,869 --> 00:36:17,400
appropriate doses technique if their

944
00:36:15,840 --> 00:36:19,080
calls to third grade libraries where you

945
00:36:17,400 --> 00:36:20,760
don't have the source code of course you

946
00:36:19,080 --> 00:36:22,560
can't reason about the source code but

947
00:36:20,760 --> 00:36:24,660
you don't have that so generally it

948
00:36:22,560 --> 00:36:26,609
feels there and just one thing to point

949
00:36:24,660 --> 00:36:29,520
out like pretty much every festival

950
00:36:26,609 --> 00:36:31,859
you're making trade-offs right so how

951
00:36:29,520 --> 00:36:34,560
precisely do model code versus the

952
00:36:31,859 --> 00:36:36,029
memory and CPU possible so let's say you

953
00:36:34,560 --> 00:36:38,130
have an app that has a bunch of

954
00:36:36,030 --> 00:36:39,210
different keys one of those keys is

955
00:36:38,130 --> 00:36:41,460
tainted at the restaurant

956
00:36:39,210 --> 00:36:43,680
butane spell format or just on one

957
00:36:41,460 --> 00:36:46,050
particular part if you have complex

958
00:36:43,680 --> 00:36:48,240
objects where you have say a fool object

959
00:36:46,050 --> 00:36:49,859
which has the attribute of a different

960
00:36:48,240 --> 00:36:51,450
class which Vanessa the deliverer value

961
00:36:49,859 --> 00:36:53,220
that has a different one that give this

962
00:36:51,450 --> 00:36:54,689
like long chain of like nested objects

963
00:36:53,220 --> 00:36:55,799
like what if one of them is tainted

964
00:36:54,690 --> 00:36:58,109
do you taint the whole thing or just

965
00:36:55,800 --> 00:37:00,420
parts of it these are just trade offs

966
00:36:58,109 --> 00:37:03,119
you need to make like one way I think

967
00:37:00,420 --> 00:37:04,769
about this is essentially you coming up

968
00:37:03,119 --> 00:37:06,990
which I : I find everything purses

969
00:37:04,769 --> 00:37:08,848
finally real about it's not so you can

970
00:37:06,990 --> 00:37:11,249
turn it down where you're only reporting

971
00:37:08,849 --> 00:37:12,210
bugs that you're off this is definitely

972
00:37:11,249 --> 00:37:13,558
a bun I'm sure of it

973
00:37:12,210 --> 00:37:16,319
well you're going to false-negatives

974
00:37:13,559 --> 00:37:18,630
where you're going this actual bugs or

975
00:37:16,319 --> 00:37:20,069
you can turn it all the way up to try

976
00:37:18,630 --> 00:37:22,230
and catch all the bugs but you're gonna

977
00:37:20,069 --> 00:37:24,119
tell us positives so it's going to tell

978
00:37:22,230 --> 00:37:26,279
you there are things that are not

979
00:37:24,119 --> 00:37:27,450
actually real guns and fundamentally

980
00:37:26,279 --> 00:37:30,779
this depends on the goals of your

981
00:37:27,450 --> 00:37:32,910
organization so let's say you don't have

982
00:37:30,779 --> 00:37:34,859
a lot of time or people to triage many

983
00:37:32,910 --> 00:37:36,598
false positives you're okay with some

984
00:37:34,859 --> 00:37:38,308
frisk maybe work at a startup or

985
00:37:36,599 --> 00:37:40,589
honestly most organizations and learning

986
00:37:38,309 --> 00:37:42,930
experience they maybe wouldn't turn to

987
00:37:40,589 --> 00:37:46,288
just maybe the high say them stuff but

988
00:37:42,930 --> 00:37:47,730
for some companies making an coming but

989
00:37:46,289 --> 00:37:50,700
it was production is just massively

990
00:37:47,730 --> 00:37:52,559
costly or just unacceptable so if you're

991
00:37:50,700 --> 00:37:54,299
building the Mars rover and you're

992
00:37:52,559 --> 00:37:56,220
putting it like a billion dollars to to

993
00:37:54,299 --> 00:37:58,319
sending this twice Mars if it

994
00:37:56,220 --> 00:38:00,450
malfunctions on the way there or want to

995
00:37:58,319 --> 00:38:02,819
get there you know you just glue a

996
00:38:00,450 --> 00:38:03,960
bajillion dollars right so either you're

997
00:38:02,819 --> 00:38:06,538
going to put the work to make sure that

998
00:38:03,960 --> 00:38:09,150
it's as bright as possible or if you're

999
00:38:06,539 --> 00:38:11,390
a financial institution or a plate or

1000
00:38:09,150 --> 00:38:14,849
something like that

1001
00:38:11,390 --> 00:38:16,859
another challenge is types often a turn

1002
00:38:14,849 --> 00:38:20,609
we can early talk about this so far but

1003
00:38:16,859 --> 00:38:22,619
so one example is if JavaScript the

1004
00:38:20,609 --> 00:38:25,348
exact function could be shell exactly

1005
00:38:22,619 --> 00:38:27,630
something but the regular Russian

1006
00:38:25,349 --> 00:38:29,160
project also has a function also called

1007
00:38:27,630 --> 00:38:31,559
exam so they have the same function

1008
00:38:29,160 --> 00:38:33,269
right so in one case we're showing

1009
00:38:31,559 --> 00:38:34,920
second interesting the other we're

1010
00:38:33,269 --> 00:38:37,109
applying a regular expression less

1011
00:38:34,920 --> 00:38:39,089
interesting so the way they got around

1012
00:38:37,109 --> 00:38:41,970
this sort of in a happy way is just

1013
00:38:39,089 --> 00:38:43,680
staying home file has the trial process

1014
00:38:41,970 --> 00:38:45,359
spring in it so probably it's important

1015
00:38:43,680 --> 00:38:47,788
this module again that's not a guarantee

1016
00:38:45,359 --> 00:38:51,089
right you could import Java process in

1017
00:38:47,789 --> 00:38:52,289
the running regular expression that's

1018
00:38:51,089 --> 00:38:54,239
just go to a heuristic and we try to

1019
00:38:52,289 --> 00:38:55,440
reduce the noise but in fact is what you

1020
00:38:54,239 --> 00:38:59,730
want to do complicated things that

1021
00:38:55,440 --> 00:39:04,619
entitles matter okay this is the some

1022
00:38:59,730 --> 00:39:05,609
additional stuff going program so

1023
00:39:04,619 --> 00:39:06,989
there's a bunch of things you can do

1024
00:39:05,609 --> 00:39:09,390
with ASU magic we just talked about a

1025
00:39:06,989 --> 00:39:11,369
couple you can do things like you know

1026
00:39:09,390 --> 00:39:13,339
finding all the methods that return a

1027
00:39:11,369 --> 00:39:16,500
value where a career this

1028
00:39:13,340 --> 00:39:19,320
you can find all classes that inherit

1029
00:39:16,500 --> 00:39:21,480
from a specific interface or class you

1030
00:39:19,320 --> 00:39:24,360
can find all a lot of indicated routes

1031
00:39:21,480 --> 00:39:26,310
so let's say in a number of Java web

1032
00:39:24,360 --> 00:39:27,720
frameworks you have annotations that say

1033
00:39:26,310 --> 00:39:29,070
you know this is a rabbit so you could

1034
00:39:27,720 --> 00:39:31,080
say find all that it doesn't have this

1035
00:39:29,070 --> 00:39:33,090
annotation and then you could filter out

1036
00:39:31,080 --> 00:39:34,940
all those methods that check the user

1037
00:39:33,090 --> 00:39:37,230
session or apply the write a middleware

1038
00:39:34,940 --> 00:39:38,010
so you can say ok I know because the

1039
00:39:37,230 --> 00:39:39,810
annotations

1040
00:39:38,010 --> 00:39:41,940
these are routes I can see that I

1041
00:39:39,810 --> 00:39:43,740
probably do a lot and are on see this

1042
00:39:41,940 --> 00:39:45,390
folks should is or isn't cold okay these

1043
00:39:43,740 --> 00:39:47,220
are all the other finicky Brownson I

1044
00:39:45,390 --> 00:39:48,230
have friends a couple of companies do

1045
00:39:47,220 --> 00:39:50,669
things like this

1046
00:39:48,230 --> 00:39:53,010
so here's couple it might mean killer

1047
00:39:50,670 --> 00:39:55,170
applications of ast matching you know

1048
00:39:53,010 --> 00:39:57,900
finally when the secure Library created

1049
00:39:55,170 --> 00:39:59,970
isn't being used right so hey we built

1050
00:39:57,900 --> 00:40:01,980
this nice way to parse XML for you like

1051
00:39:59,970 --> 00:40:04,350
just use this and this allows you to

1052
00:40:01,980 --> 00:40:06,870
precisely find it in a way that's more

1053
00:40:04,350 --> 00:40:08,430
high signal than just aggressively you

1054
00:40:06,870 --> 00:40:11,009
can also find the company specific

1055
00:40:08,430 --> 00:40:12,750
business logic box so in every code base

1056
00:40:11,010 --> 00:40:15,630
there's assumptions about how methods

1057
00:40:12,750 --> 00:40:18,900
are or aren't call so for example maybe

1058
00:40:15,630 --> 00:40:20,580
like oh whatever you call food you have

1059
00:40:18,900 --> 00:40:22,680
to call bar before it because it sets up

1060
00:40:20,580 --> 00:40:23,040
some sort of global scheme then you go

1061
00:40:22,680 --> 00:40:25,560
do that

1062
00:40:23,040 --> 00:40:27,810
it's that or maybe if you call foo and

1063
00:40:25,560 --> 00:40:29,880
God gets accomplished well or for some

1064
00:40:27,810 --> 00:40:31,799
something like that where perhaps

1065
00:40:29,880 --> 00:40:33,630
there's an argument to a specific

1066
00:40:31,800 --> 00:40:36,480
function that you know should or should

1067
00:40:33,630 --> 00:40:39,960
not be a hard-coded value for example in

1068
00:40:36,480 --> 00:40:40,920
crypto API where if you supply our coded

1069
00:40:39,960 --> 00:40:45,210
value as an thoughts

1070
00:40:40,920 --> 00:40:46,830
obviously this can be dangerous so

1071
00:40:45,210 --> 00:40:48,390
here's a little cheat sheet in terms of

1072
00:40:46,830 --> 00:40:49,830
there's a bunch of different static

1073
00:40:48,390 --> 00:40:52,680
analysis applications we only talked

1074
00:40:49,830 --> 00:40:54,090
about a few but this is I think it

1075
00:40:52,680 --> 00:40:54,720
wittingly kind of thinking like how hard

1076
00:40:54,090 --> 00:40:58,800
is this

1077
00:40:54,720 --> 00:41:00,180
so as X goes to the right we're a little

1078
00:40:58,800 --> 00:41:02,010
bit more complex that we can express

1079
00:41:00,180 --> 00:41:04,440
more complicated things and as Y

1080
00:41:02,010 --> 00:41:06,510
increases the difficulty for you to

1081
00:41:04,440 --> 00:41:08,910
build it is going up so note that this

1082
00:41:06,510 --> 00:41:12,240
is more exponential than it isn't here

1083
00:41:08,910 --> 00:41:14,129
alright so easiest the appendices this

1084
00:41:12,240 --> 00:41:15,899
is easy you can do it matter if you want

1085
00:41:14,130 --> 00:41:17,480
to do it is T magic this is a little bit

1086
00:41:15,900 --> 00:41:20,160
more work but you get some nice

1087
00:41:17,480 --> 00:41:21,480
expressivity benefits but if you're

1088
00:41:20,160 --> 00:41:24,240
going to do this obviously use something

1089
00:41:21,480 --> 00:41:25,290
else to parse and to me I would say

1090
00:41:24,240 --> 00:41:26,890
they're going to do anything to the

1091
00:41:25,290 --> 00:41:28,450
right of this line

1092
00:41:26,890 --> 00:41:30,549
probably use an existing jeweler

1093
00:41:28,450 --> 00:41:32,288
frequency once we start reasoning about

1094
00:41:30,549 --> 00:41:34,569
types or a data flow meter within

1095
00:41:32,289 --> 00:41:38,650
affected or across continents that's

1096
00:41:34,569 --> 00:41:39,730
gonna be a lot of one I need include

1097
00:41:38,650 --> 00:41:41,910
this because I get asked this pretty

1098
00:41:39,730 --> 00:41:45,160
often you know should I buy us a stable

1099
00:41:41,910 --> 00:41:47,950
and it's pretty nuanced but I'll just do

1100
00:41:45,160 --> 00:41:49,359
something quick Heal the artisan really

1101
00:41:47,950 --> 00:41:51,129
intense like a company you know what

1102
00:41:49,359 --> 00:41:52,598
technologies do you use what's culture

1103
00:41:51,130 --> 00:41:55,990
like I guess these are tools that are

1104
00:41:52,599 --> 00:41:58,059
run maybe daily or weekly because they

1105
00:41:55,990 --> 00:41:59,740
take a long time to run some schools

1106
00:41:58,059 --> 00:42:02,380
trying to do like scamp and dip but in

1107
00:41:59,740 --> 00:42:04,180
my experience it was a very traumatic so

1108
00:42:02,380 --> 00:42:06,339
the quick takeaway is if one or more of

1109
00:42:04,180 --> 00:42:08,500
these apply like maybe it's not the best

1110
00:42:06,339 --> 00:42:10,029
immediate use of your time so if you use

1111
00:42:08,500 --> 00:42:11,710
modern frameworks and you don't have

1112
00:42:10,029 --> 00:42:14,410
lots of legacy code if you're actually

1113
00:42:11,710 --> 00:42:16,990
you should code rapidly if your code is

1114
00:42:14,410 --> 00:42:19,269
not written in C and C++ so if you're in

1115
00:42:16,990 --> 00:42:22,089
a language that like handles type of

1116
00:42:19,269 --> 00:42:23,589
memory safety for you if you haven't

1117
00:42:22,089 --> 00:42:25,538
already spent a lot of time building

1118
00:42:23,589 --> 00:42:27,490
secure by default libraries that's a

1119
00:42:25,539 --> 00:42:29,890
super great thing to do first I'm going

1120
00:42:27,490 --> 00:42:31,450
to talk more about that a second I guess

1121
00:42:29,890 --> 00:42:34,390
one of them sort of core takeaway I want

1122
00:42:31,450 --> 00:42:35,890
to say is this isn't fascism usually an

1123
00:42:34,390 --> 00:42:37,660
easy win you're going to have one or

1124
00:42:35,890 --> 00:42:40,328
more people spending all the week months

1125
00:42:37,660 --> 00:42:42,129
onboarding tuning this tool so number of

1126
00:42:40,329 --> 00:42:43,539
companies have property and as the

1127
00:42:42,130 --> 00:42:47,170
security intelligence I help them do

1128
00:42:43,539 --> 00:42:48,849
this and because basically market ami

1129
00:42:47,170 --> 00:42:50,529
don't cut the time or the budget where

1130
00:42:48,849 --> 00:42:52,180
the expertise to do this and it's a lot

1131
00:42:50,529 --> 00:42:54,730
of work so this is generally not

1132
00:42:52,180 --> 00:42:56,618
appointment and again I love static

1133
00:42:54,730 --> 00:42:59,740
analysis but you know I have to be

1134
00:42:56,619 --> 00:43:01,720
honest so I took a number of additional

1135
00:42:59,740 --> 00:43:02,609
questions from this execute you talk I

1136
00:43:01,720 --> 00:43:04,868
gave

1137
00:43:02,609 --> 00:43:08,078
again you're gonna have access to these

1138
00:43:04,869 --> 00:43:11,049
slides but one thing I want to emphasize

1139
00:43:08,079 --> 00:43:12,579
is from what I've seen from a bunch of

1140
00:43:11,049 --> 00:43:14,759
different company is security

1141
00:43:12,579 --> 00:43:18,250
engineering like building infrastructure

1142
00:43:14,759 --> 00:43:22,119
as well as secure libraries has a huge

1143
00:43:18,250 --> 00:43:23,500
ROI almost everywhere so I have been

1144
00:43:22,119 --> 00:43:25,750
privilege of moderating in the cryptic

1145
00:43:23,500 --> 00:43:27,579
ops panels with people were super smart

1146
00:43:25,750 --> 00:43:29,140
from the number of companies and one

1147
00:43:27,579 --> 00:43:31,299
thing I hear again and again and again

1148
00:43:29,140 --> 00:43:32,710
is they've invested heavily in building

1149
00:43:31,299 --> 00:43:34,720
secure bank account libraries and

1150
00:43:32,710 --> 00:43:36,309
infrastructure it just makes it hard to

1151
00:43:34,720 --> 00:43:37,538
do things that securely and that's

1152
00:43:36,309 --> 00:43:39,699
really how many systemically

1153
00:43:37,539 --> 00:43:43,209
raise your security card another great

1154
00:43:39,699 --> 00:43:45,519
talk i Morgan he actually gave a version

1155
00:43:43,209 --> 00:43:47,169
of this yesterday I believe about van

1156
00:43:45,519 --> 00:43:49,269
footmen it's like how do you basically

1157
00:43:47,169 --> 00:43:51,519
make it hard to do a dangerous thing

1158
00:43:49,269 --> 00:43:53,618
it's a key study at DocuSign where they

1159
00:43:51,519 --> 00:43:56,078
essentially eliminated several classes

1160
00:43:53,619 --> 00:43:59,079
of vulnerabilities xx the NSS RF we've

1161
00:43:56,079 --> 00:44:00,609
been redirected maybe one other by

1162
00:43:59,079 --> 00:44:01,989
building secure by default libraries and

1163
00:44:00,609 --> 00:44:03,279
then making sure people use them so I

1164
00:44:01,989 --> 00:44:05,259
would highly recommend checking out

1165
00:44:03,279 --> 00:44:08,109
those slides I'm going to talk about a

1166
00:44:05,259 --> 00:44:09,909
couple of other security engineering

1167
00:44:08,109 --> 00:44:14,859
tasks that can solve classes of

1168
00:44:09,909 --> 00:44:16,149
vulnerabilities ok so here's some tools

1169
00:44:14,859 --> 00:44:17,619
there's like a lot of them out there

1170
00:44:16,149 --> 00:44:19,328
here is some that I tried that are

1171
00:44:17,619 --> 00:44:23,889
really pretty bit or at least not

1172
00:44:19,329 --> 00:44:26,469
terrible so one thing I found is there's

1173
00:44:23,889 --> 00:44:28,749
so many conferences so many talks it's

1174
00:44:26,469 --> 00:44:30,099
difficult to keep up so I started doing

1175
00:44:28,749 --> 00:44:32,049
this thing mostly just for friends but

1176
00:44:30,099 --> 00:44:34,119
then I opened it up where I write

1177
00:44:32,049 --> 00:44:35,679
detailed summaries of basically blocks

1178
00:44:34,119 --> 00:44:37,419
that I think are really good or can here

1179
00:44:35,679 --> 00:44:39,729
some tools and other links that I came

1180
00:44:37,419 --> 00:44:42,819
across as well as sherry talks like this

1181
00:44:39,729 --> 00:44:45,999
is another site so anyway it's like that

1182
00:44:42,819 --> 00:44:47,349
an infrequent high signal newsletter at

1183
00:44:45,999 --> 00:44:47,799
least against what people think it's not

1184
00:44:47,349 --> 00:44:52,089
horrible

1185
00:44:47,799 --> 00:44:54,880
so so maybe you will too but whatever so

1186
00:44:52,089 --> 00:44:56,499
in conclusion that analysis can find a

1187
00:44:54,880 --> 00:44:58,869
lot of bugs at scale it's not going to

1188
00:44:56,499 --> 00:45:01,598
find everybody dataflow analysis is

1189
00:44:58,869 --> 00:45:03,039
fundamentally hard SAS can't provide

1190
00:45:01,599 --> 00:45:06,669
value but it depends on your environment

1191
00:45:03,039 --> 00:45:09,249
in pools it's not usually a PC with you

1192
00:45:06,669 --> 00:45:10,779
can think of ast matching as a way it

1193
00:45:09,249 --> 00:45:12,069
sort of like a code aware of breath

1194
00:45:10,779 --> 00:45:14,709
where you're finding interesting code

1195
00:45:12,069 --> 00:45:16,509
balance and you can't find things that

1196
00:45:14,709 --> 00:45:17,888
are unique to your code base using open

1197
00:45:16,509 --> 00:45:20,709
source tools and just a few hundred

1198
00:45:17,889 --> 00:45:22,059
lines of Python and again except

1199
00:45:20,709 --> 00:45:24,819
analysis it doesn't have to be a black

1200
00:45:22,059 --> 00:45:26,559
box it comes will be interactive anyway

1201
00:45:24,819 --> 00:45:29,880
so here's a link to the slides

1202
00:45:26,559 --> 00:45:32,799
the code is live for a particular didn't

1203
00:45:29,880 --> 00:45:34,509
that's a link to the newsletter in the

1204
00:45:32,799 --> 00:45:35,829
bottom so I guess for the slides there's

1205
00:45:34,509 --> 00:45:38,829
like an underscore because the

1206
00:45:35,829 --> 00:45:40,239
highlighting cameras man thank you all

1207
00:45:38,829 --> 00:45:42,929
so much for your time and I believe I

1208
00:45:40,239 --> 00:45:42,929
have a few minutes for questions

1209
00:46:08,130 --> 00:46:30,100
or I mean yeah yeah so that's a great

1210
00:46:27,400 --> 00:46:34,390
question and just to rephrase so I think

1211
00:46:30,100 --> 00:46:36,759
the question is yeah by critic you have

1212
00:46:34,390 --> 00:46:38,920
linters you have this wing EST matching

1213
00:46:36,760 --> 00:46:40,620
like can't you just integrate where

1214
00:46:38,920 --> 00:46:42,640
security tracks in your limiting

1215
00:46:40,620 --> 00:46:45,640
williams are totally yes how much

1216
00:46:42,640 --> 00:46:47,920
companies are doing this already limping

1217
00:46:45,640 --> 00:46:49,600
tends to actually work at like abstract

1218
00:46:47,920 --> 00:46:54,130
syntax tree of levels so you tend to

1219
00:46:49,600 --> 00:46:56,950
have a similar level of power as what I

1220
00:46:54,130 --> 00:46:59,740
talked about with you yeah so if you're

1221
00:46:56,950 --> 00:47:01,540
say using is lint or JavaScript that

1222
00:46:59,740 --> 00:47:04,359
actually parses it using that one or one

1223
00:47:01,540 --> 00:47:06,520
of other backends into like an AST form

1224
00:47:04,360 --> 00:47:08,890
that you can then do materials on so

1225
00:47:06,520 --> 00:47:11,020
there are a number of tools and our

1226
00:47:08,890 --> 00:47:14,529
various linters that would give you this

1227
00:47:11,020 --> 00:47:16,600
sort of power of expert City the reason

1228
00:47:14,530 --> 00:47:18,310
that we use a static instead of those is

1229
00:47:16,600 --> 00:47:19,540
semantics of course many languages so we

1230
00:47:18,310 --> 00:47:21,910
can sort of write with one thing and

1231
00:47:19,540 --> 00:47:23,710
then more easily coalesce with inside

1232
00:47:21,910 --> 00:47:26,649
yeah I think there's a lot of power and

1233
00:47:23,710 --> 00:47:29,260
value in creating secure related lists

1234
00:47:26,650 --> 00:47:31,510
for sure so I think that's a great idea

1235
00:47:29,260 --> 00:47:41,590
people are doing it already and we

1236
00:47:31,510 --> 00:47:44,530
should be like oh we write a lot of

1237
00:47:41,590 --> 00:47:45,550
JavaScript before we deal with a stuff

1238
00:47:44,530 --> 00:47:48,730
you

1239
00:47:45,550 --> 00:47:50,560
would it be easy to port like illuminate

1240
00:47:48,730 --> 00:47:54,070
the Sentinel writing for table script a

1241
00:47:50,560 --> 00:47:56,920
little pg-13 yeah so the question is how

1242
00:47:54,070 --> 00:48:03,000
reusable is this that's a good question

1243
00:47:56,920 --> 00:48:05,890
so so it depends so if you're writing a

1244
00:48:03,000 --> 00:48:08,500
lid at exporting could be could be

1245
00:48:05,890 --> 00:48:09,670
specific for my building class obviously

1246
00:48:08,500 --> 00:48:12,010
that's going to be used for specifics

1247
00:48:09,670 --> 00:48:14,170
path the example in this talk where we

1248
00:48:12,010 --> 00:48:16,330
put a personal minute creation about

1249
00:48:14,170 --> 00:48:17,970
real sets that applies to any real

1250
00:48:16,330 --> 00:48:22,299
application

1251
00:48:17,970 --> 00:48:24,040
so yeah making there are a number of

1252
00:48:22,300 --> 00:48:26,590
companies for example web linting rules

1253
00:48:24,040 --> 00:48:29,290
where in their JavaScript to your point

1254
00:48:26,590 --> 00:48:31,960
they just ban an email right so actually

1255
00:48:29,290 --> 00:48:34,360
in their checks if anyone pushes code

1256
00:48:31,960 --> 00:48:37,030
they use custom like insulin rules to

1257
00:48:34,360 --> 00:48:40,690
say oh you did an email you know a lot

1258
00:48:37,030 --> 00:48:43,360
of emerge so I would say checks that are

1259
00:48:40,690 --> 00:48:48,400
specific to a language or framework can

1260
00:48:43,360 --> 00:48:49,960
easily apply to many things yeah I would

1261
00:48:48,400 --> 00:48:52,870
say for this code there was some upfront

1262
00:48:49,960 --> 00:48:54,730
work in basically running semantics

1263
00:48:52,870 --> 00:48:55,900
getting adjacent in parsing that in the

1264
00:48:54,730 --> 00:48:57,760
Python objects so that's how much

1265
00:48:55,900 --> 00:49:02,410
upfront stuff you have to do but then

1266
00:48:57,760 --> 00:49:03,880
you can sort of iterate various checks

1267
00:49:02,410 --> 00:49:06,279
in that language would be easily from

1268
00:49:03,880 --> 00:49:07,720
there so actually like a lowly coop that

1269
00:49:06,280 --> 00:49:10,170
I wrote for this like for the real

1270
00:49:07,720 --> 00:49:12,790
specific examples once I had the

1271
00:49:10,170 --> 00:49:14,530
information into Python objects like

1272
00:49:12,790 --> 00:49:16,210
writing those specific things with like

1273
00:49:14,530 --> 00:49:19,150
tens of lines of code so there's like

1274
00:49:16,210 --> 00:49:24,940
order plate like yeah there's a file in

1275
00:49:19,150 --> 00:49:27,690
the repo called but yeah like all of the

1276
00:49:24,940 --> 00:49:27,690
rails stuff is like

1277
00:49:48,190 --> 00:49:52,519
yeah I think there's a lot of power in

1278
00:49:50,690 --> 00:49:54,109
able to iterate quickly so one thing

1279
00:49:52,519 --> 00:49:56,359
that I did for this is I a would just

1280
00:49:54,109 --> 00:49:57,529
like locate cars all of this into Python

1281
00:49:56,359 --> 00:49:59,690
objects and then I can just put like a

1282
00:49:57,529 --> 00:50:01,130
Red Bull there and then I were just like

1283
00:49:59,690 --> 00:50:02,390
oh you know writing like a list

1284
00:50:01,130 --> 00:50:03,890
comprehensions where I was like you

1285
00:50:02,390 --> 00:50:05,960
could read all over all the classes in

1286
00:50:03,890 --> 00:50:08,089
like I could prototype these things

1287
00:50:05,960 --> 00:50:09,589
pretty quickly and easily we're in a

1288
00:50:08,089 --> 00:50:12,170
commercial SAS tool with my experience

1289
00:50:09,589 --> 00:50:14,150
you're like running a pool and is taking

1290
00:50:12,170 --> 00:50:16,309
hours to get to be back so sort of the

1291
00:50:14,150 --> 00:50:19,630
the feedback on the checks your writing

1292
00:50:16,309 --> 00:50:19,630
can be like super quick for this

1293
00:50:20,079 --> 00:50:33,519
questions yeah okay so with the language

1294
00:50:31,309 --> 00:50:40,400
has a school where you start to

1295
00:50:33,519 --> 00:50:43,279
convalesce okay yeah so I would say like

1296
00:50:40,400 --> 00:50:48,160
about one fish I linked earlier supports

1297
00:50:43,279 --> 00:50:50,450
more languages than semantics but it's a

1298
00:50:48,160 --> 00:50:52,250
created by some like startup it might

1299
00:50:50,450 --> 00:50:53,868
you know go away at some point so that's

1300
00:50:52,250 --> 00:50:58,730
why I didn't want to face a lot of stuff

1301
00:50:53,869 --> 00:51:00,680
on them yet I would say if there's like

1302
00:50:58,730 --> 00:51:01,849
a total it get those many languages that

1303
00:51:00,680 --> 00:51:03,319
handles the language you care about

1304
00:51:01,849 --> 00:51:06,470
that's a nice place to start but if it

1305
00:51:03,319 --> 00:51:09,170
if you can't find that I would say you

1306
00:51:06,470 --> 00:51:17,509
know like parser my language or

1307
00:51:09,170 --> 00:51:19,690
something come back yeah I think yeah I

1308
00:51:17,509 --> 00:51:21,859
think they're about to clean up the room

1309
00:51:19,690 --> 00:51:22,970
for the imposing keynotes but I'm

1310
00:51:21,859 --> 00:51:24,769
getting thank you so much for your time

1311
00:51:22,970 --> 00:51:26,779
I'm going to stick around and I'll be

1312
00:51:24,769 --> 00:51:28,868
around at the bonfire so thanks for your

1313
00:51:26,779 --> 00:51:28,869
time

