1
00:00:00,030 --> 00:00:03,929
all right so this is Tracy because

2
00:00:02,280 --> 00:00:05,730
tracing user input their JavaScript is

3
00:00:03,929 --> 00:00:09,420
for tools by Jay Keith and Michael

4
00:00:05,730 --> 00:00:11,010
Roberts so Jake is a penetration tester

5
00:00:09,420 --> 00:00:12,300
with NCC group Jake performs web

6
00:00:11,010 --> 00:00:13,530
application and network penetration

7
00:00:12,300 --> 00:00:14,910
tests as well as various types of

8
00:00:13,530 --> 00:00:16,349
hardware engagements including Hardware

9
00:00:14,910 --> 00:00:18,960
tear downs physical threat modeling and

10
00:00:16,350 --> 00:00:20,550
secure boot implementations Michael

11
00:00:18,960 --> 00:00:22,320
Roberts is a pendant ish penetration

12
00:00:20,550 --> 00:00:24,150
tester with NCC group Michael performs

13
00:00:22,320 --> 00:00:26,189
web web mobile application and network

14
00:00:24,150 --> 00:00:27,538
penetration tests and has a passion for

15
00:00:26,189 --> 00:00:29,640
virtual reality and machine learning

16
00:00:27,539 --> 00:00:41,399
outside of work life please welcome Jake

17
00:00:29,640 --> 00:00:44,579
and Michael - thanks everybody

18
00:00:41,399 --> 00:00:46,079
I can y'all hear me okay okay yeah so

19
00:00:44,579 --> 00:00:47,510
this talk we're going to be talking

20
00:00:46,079 --> 00:00:52,020
about a tool that Michael and I wrote

21
00:00:47,510 --> 00:00:53,190
mainly for work there's this essentially

22
00:00:52,020 --> 00:00:55,469
vulnerability called cross-site

23
00:00:53,190 --> 00:00:57,839
scripting how many here are familiar

24
00:00:55,469 --> 00:00:59,160
with cross-site scripting everyone no

25
00:00:57,840 --> 00:01:01,699
okay so this is a small group so I'm

26
00:00:59,160 --> 00:01:03,870
just gonna like talk to you individually

27
00:01:01,699 --> 00:01:06,600
so everyone seems to really kind of know

28
00:01:03,870 --> 00:01:08,880
what it is so cross-site scripting is a

29
00:01:06,600 --> 00:01:11,850
super old bug that we still find on pin

30
00:01:08,880 --> 00:01:13,770
tests all the time blue team people hate

31
00:01:11,850 --> 00:01:15,630
us because they feel like they every

32
00:01:13,770 --> 00:01:17,158
time they introduce a new feature and

33
00:01:15,630 --> 00:01:18,770
have a pin test we know finding some

34
00:01:17,159 --> 00:01:20,790
kind of form across the scripting in it

35
00:01:18,770 --> 00:01:22,619
and even though it's still like a really

36
00:01:20,790 --> 00:01:24,930
well-known and like well studied bug

37
00:01:22,619 --> 00:01:28,290
it's still like prolific throughout the

38
00:01:24,930 --> 00:01:30,450
web and we kind of hate finding it so we

39
00:01:28,290 --> 00:01:32,939
wrote this tool to help essentially

40
00:01:30,450 --> 00:01:35,100
automate most of the work flow that's

41
00:01:32,939 --> 00:01:37,649
going that goes into identifying

42
00:01:35,100 --> 00:01:40,048
vulnerable cases and essentially

43
00:01:37,650 --> 00:01:44,130
organizing all user input within a web

44
00:01:40,049 --> 00:01:45,479
application yeah so you already got a

45
00:01:44,130 --> 00:01:46,740
nice intro so I'm just gonna kind of

46
00:01:45,479 --> 00:01:49,380
skip through that so you can get to the

47
00:01:46,740 --> 00:01:50,460
cool stuff which is like a demo yeah so

48
00:01:49,380 --> 00:01:52,770
the three things that we want to talk

49
00:01:50,460 --> 00:01:55,289
about really quickly are why we wrote

50
00:01:52,770 --> 00:01:58,350
this tool there are other XSS tools and

51
00:01:55,290 --> 00:02:00,119
we'll kind of like try to essentially

52
00:01:58,350 --> 00:02:02,460
give you a thesis statement for what we

53
00:02:00,119 --> 00:02:03,600
wanted when we wrote the tool we'll go

54
00:02:02,460 --> 00:02:05,520
through those other existing tools

55
00:02:03,600 --> 00:02:07,199
hoping to defend ourselves like why we

56
00:02:05,520 --> 00:02:11,370
needed another tool and then we'll just

57
00:02:07,200 --> 00:02:13,680
kind of do a demo of Tracy so we started

58
00:02:11,370 --> 00:02:14,040
with this idea that we wanted to

59
00:02:13,680 --> 00:02:15,959
eliminate

60
00:02:14,040 --> 00:02:17,790
this problem we were really tired of it

61
00:02:15,959 --> 00:02:19,680
it's not fun to find it's not

62
00:02:17,790 --> 00:02:22,349
challenging anymore

63
00:02:19,680 --> 00:02:25,170
it's pretty much automatic when we go on

64
00:02:22,349 --> 00:02:27,719
site we have a website we can find

65
00:02:25,170 --> 00:02:29,608
cross-site scripting pretty quickly but

66
00:02:27,719 --> 00:02:31,590
pretty quickly actually is about like

67
00:02:29,609 --> 00:02:34,650
two or three days of testing so that's a

68
00:02:31,590 --> 00:02:36,569
lot of time that I end up wasting when

69
00:02:34,650 --> 00:02:39,780
there are other like more complex bugs

70
00:02:36,569 --> 00:02:42,298
that computers aren't as good as finding

71
00:02:39,780 --> 00:02:45,510
like access controls and things like

72
00:02:42,299 --> 00:02:47,220
that and we want to eliminate the the

73
00:02:45,510 --> 00:02:50,700
problem of cross-site scripting using

74
00:02:47,220 --> 00:02:53,129
two main things the Dom is the big one

75
00:02:50,700 --> 00:02:54,869
the Dom knows everything the Dom knows

76
00:02:53,129 --> 00:02:57,439
what's rendered in the page what scripts

77
00:02:54,870 --> 00:03:00,450
are hitting what Java scripts rendering

78
00:02:57,439 --> 00:03:02,099
when and where so it knows everything

79
00:03:00,450 --> 00:03:05,339
and we really wanted to capture all that

80
00:03:02,099 --> 00:03:06,659
data so that we essentially want to

81
00:03:05,340 --> 00:03:09,750
capture data that's already in the DOM

82
00:03:06,659 --> 00:03:12,298
and use that to help our you know pen

83
00:03:09,750 --> 00:03:13,889
testing the other thing that we really

84
00:03:12,299 --> 00:03:17,159
wanted as like a keystone for this tool

85
00:03:13,889 --> 00:03:19,049
was we wanted to be human driven we

86
00:03:17,159 --> 00:03:21,418
didn't want this to be like some kind of

87
00:03:19,049 --> 00:03:23,069
automated scanner that automatically

88
00:03:21,419 --> 00:03:25,560
like fixed all cross-site scripting we

89
00:03:23,069 --> 00:03:26,728
knew that was kind of like a long a long

90
00:03:25,560 --> 00:03:28,739
ways away and probably wouldn't work

91
00:03:26,729 --> 00:03:29,879
ever really that well we wanted the

92
00:03:28,739 --> 00:03:33,000
human to be able to like kind of

93
00:03:29,879 --> 00:03:34,168
navigate some complex UI flow so this is

94
00:03:33,000 --> 00:03:38,639
you should think this tool is more like

95
00:03:34,169 --> 00:03:42,810
an Augmented tool a sister like rather

96
00:03:38,639 --> 00:03:44,069
than an automated tool scanner things

97
00:03:42,810 --> 00:03:48,090
that we're trying to avoid

98
00:03:44,069 --> 00:03:50,099
hey I automated scanning static analysis

99
00:03:48,090 --> 00:03:52,919
blockchain all that buzzwords stuff

100
00:03:50,099 --> 00:03:55,048
we're trying to avoid using that kind of

101
00:03:52,919 --> 00:03:56,970
technology because again we want to keep

102
00:03:55,049 --> 00:04:00,150
the control in the pen tester because

103
00:03:56,970 --> 00:04:02,099
the pen tester actually knows a lot they

104
00:04:00,150 --> 00:04:04,379
they just need a little help organizing

105
00:04:02,099 --> 00:04:10,048
their fork flow and essentially getting

106
00:04:04,379 --> 00:04:11,668
all that data organized all right before

107
00:04:10,049 --> 00:04:13,199
we talk about Tracy let's talk about

108
00:04:11,669 --> 00:04:15,650
some of the existing toolings and

109
00:04:13,199 --> 00:04:18,780
methodology that's used by testers now

110
00:04:15,650 --> 00:04:20,880
the first methodology is the shotgun

111
00:04:18,779 --> 00:04:23,429
approach which is pretty much you just

112
00:04:20,880 --> 00:04:24,750
take a XSS payload you just insert it

113
00:04:23,430 --> 00:04:26,850
into every input field in the web

114
00:04:24,750 --> 00:04:30,960
application you browse around and

115
00:04:26,850 --> 00:04:33,420
try to find where box pops-up there's

116
00:04:30,960 --> 00:04:36,090
some pros and cons to this the pro is

117
00:04:33,420 --> 00:04:37,710
like it's super easy it requires very

118
00:04:36,090 --> 00:04:39,780
little knowledge to just put them in

119
00:04:37,710 --> 00:04:43,260
payloads into the application and it's

120
00:04:39,780 --> 00:04:45,989
fast the problem is is that you don't

121
00:04:43,260 --> 00:04:49,590
really know where your input is going in

122
00:04:45,990 --> 00:04:52,350
and where it's coming out so whenever

123
00:04:49,590 --> 00:04:54,630
you like find an alert box if you don't

124
00:04:52,350 --> 00:04:56,970
like label that alert box you want to

125
00:04:54,630 --> 00:04:58,890
know like where you originally put it

126
00:04:56,970 --> 00:05:00,660
like sometimes an alert can pop up like

127
00:04:58,890 --> 00:05:02,580
3 or 4 days later and you're just like I

128
00:05:00,660 --> 00:05:04,160
don't know where I put that input at so

129
00:05:02,580 --> 00:05:06,000
you have to go back and hunt for it and

130
00:05:04,160 --> 00:05:07,290
where you put it inside of the

131
00:05:06,000 --> 00:05:09,330
application and it can be kind of

132
00:05:07,290 --> 00:05:11,310
tedious it can also be really annoying

133
00:05:09,330 --> 00:05:14,390
there's a lot of XSS in the application

134
00:05:11,310 --> 00:05:17,040
you'll just get alert boxes for days and

135
00:05:14,390 --> 00:05:20,010
you won't be able to like figure out

136
00:05:17,040 --> 00:05:23,970
like the application will become

137
00:05:20,010 --> 00:05:29,610
unusable at that point and the other

138
00:05:23,970 --> 00:05:37,080
problem is that there is no well there's

139
00:05:29,610 --> 00:05:40,580
a concept of a Dom oh yeah but if you're

140
00:05:37,080 --> 00:05:40,580
just using the shotgun approach it would

141
00:05:41,750 --> 00:05:48,870
this is another approach where you

142
00:05:46,080 --> 00:05:52,349
pretty much like this is an example like

143
00:05:48,870 --> 00:05:54,900
burp where it has the ability to look at

144
00:05:52,350 --> 00:05:57,510
the flow of the code and determine like

145
00:05:54,900 --> 00:06:00,409
the sources and sinks and figure out

146
00:05:57,510 --> 00:06:03,090
whether there would be XSS that way

147
00:06:00,410 --> 00:06:08,010
there's also some other software like

148
00:06:03,090 --> 00:06:18,060
check marks which also a check marks

149
00:06:08,010 --> 00:06:22,710
it's oh for the second alysus just like

150
00:06:18,060 --> 00:06:26,850
in general anyways there is very little

151
00:06:22,710 --> 00:06:28,109
user inputs it can find hidden logic

152
00:06:26,850 --> 00:06:29,820
flows something that's really hard

153
00:06:28,110 --> 00:06:30,960
whenever you're like testing by like the

154
00:06:29,820 --> 00:06:33,540
shotgun approach there could be like

155
00:06:30,960 --> 00:06:34,650
hidden flows with inside the application

156
00:06:33,540 --> 00:06:36,210
there might be pages you don't know

157
00:06:34,650 --> 00:06:39,239
about and stuff like that but sack

158
00:06:36,210 --> 00:06:40,120
analysis has a full understanding of

159
00:06:39,240 --> 00:06:42,490
like the code and

160
00:06:40,120 --> 00:06:44,110
where everything goes hopefully it's not

161
00:06:42,490 --> 00:06:45,490
intrusive you won't break the

162
00:06:44,110 --> 00:06:47,949
application by running some static

163
00:06:45,490 --> 00:06:50,470
analysis on it and it has there like a

164
00:06:47,949 --> 00:06:51,760
very low like learning curve for like a

165
00:06:50,470 --> 00:06:55,180
user to run against it

166
00:06:51,760 --> 00:07:01,150
tuning on the other hand is a different

167
00:06:55,180 --> 00:07:03,010
thing it's often really costly some of

168
00:07:01,150 --> 00:07:08,198
the software that does static analysis

169
00:07:03,010 --> 00:07:10,180
can run you they do like a user per repo

170
00:07:08,199 --> 00:07:13,919
model and like per run model where

171
00:07:10,180 --> 00:07:16,389
whenever you run it on the code you know

172
00:07:13,919 --> 00:07:19,630
it requires like money and then for each

173
00:07:16,389 --> 00:07:23,410
repo you all have to like pay each time

174
00:07:19,630 --> 00:07:26,830
there's also a lot of false positives or

175
00:07:23,410 --> 00:07:28,930
false negatives this is the case if you

176
00:07:26,830 --> 00:07:31,020
just like take one of these pieces of

177
00:07:28,930 --> 00:07:33,039
software and run it like outside the box

178
00:07:31,020 --> 00:07:34,750
there's a lot of like tuning that's

179
00:07:33,039 --> 00:07:36,219
evolved with actually getting good

180
00:07:34,750 --> 00:07:39,550
results and it could be really

181
00:07:36,220 --> 00:07:41,020
time-consuming and you kind of have like

182
00:07:39,550 --> 00:07:42,460
I have a deep understanding of how the

183
00:07:41,020 --> 00:07:44,289
code works to be able to tune it

184
00:07:42,460 --> 00:07:45,310
properly for your code base it's not

185
00:07:44,289 --> 00:07:47,050
something that you can just take off

186
00:07:45,310 --> 00:07:50,080
itself and running as some software and

187
00:07:47,050 --> 00:07:52,570
I magically get it to work it doesn't

188
00:07:50,080 --> 00:07:54,639
really have like the concept of like the

189
00:07:52,570 --> 00:07:56,080
Dom like he doesn't know like what

190
00:07:54,639 --> 00:07:57,729
happens when the it actually is

191
00:07:56,080 --> 00:08:01,240
displayed to the user so if there's any

192
00:07:57,729 --> 00:08:04,659
like there might be XSS server side but

193
00:08:01,240 --> 00:08:06,460
on the client there are there might be

194
00:08:04,660 --> 00:08:09,460
some JavaScript sanitization that's

195
00:08:06,460 --> 00:08:12,638
going on so you won't actually know that

196
00:08:09,460 --> 00:08:15,190
doing regular static analysis on like

197
00:08:12,639 --> 00:08:17,710
the server-side code so it might have

198
00:08:15,190 --> 00:08:19,210
false positives that way too and then

199
00:08:17,710 --> 00:08:21,969
another part is you have to be able to

200
00:08:19,210 --> 00:08:23,888
actually have all the source code like

201
00:08:21,970 --> 00:08:27,760
if you want to do static analysis

202
00:08:23,889 --> 00:08:29,320
against the the target you need to know

203
00:08:27,760 --> 00:08:33,640
like the source code so you can't use it

204
00:08:29,320 --> 00:08:37,208
in like a black box situation the other

205
00:08:33,640 --> 00:08:40,750
things is there's like another set of

206
00:08:37,208 --> 00:08:42,579
thing where they do like a fork of the

207
00:08:40,750 --> 00:08:46,089
browser and they do some like taint

208
00:08:42,580 --> 00:08:47,800
analysis like blue closure and there's

209
00:08:46,089 --> 00:08:52,360
also like a fork of phantom jeaious that

210
00:08:47,800 --> 00:08:53,930
does this we don't exactly know how blue

211
00:08:52,360 --> 00:08:55,670
closure works because there

212
00:08:53,930 --> 00:09:00,770
very secretive about how that technology

213
00:08:55,670 --> 00:09:02,479
works but like I said our idea from like

214
00:09:00,770 --> 00:09:05,120
reading their like guidelines and stuff

215
00:09:02,480 --> 00:09:06,260
like that is that it's just a fork of

216
00:09:05,120 --> 00:09:07,790
the browser and then they hook the

217
00:09:06,260 --> 00:09:09,350
JavaScript functions that are inside

218
00:09:07,790 --> 00:09:11,060
that browser and look to see the code

219
00:09:09,350 --> 00:09:16,399
that's flowing through it to kind of

220
00:09:11,060 --> 00:09:19,430
understand what's going on so the pros

221
00:09:16,399 --> 00:09:20,870
and cons is that it has like a deep

222
00:09:19,430 --> 00:09:22,670
understanding what's going on in the

223
00:09:20,870 --> 00:09:25,880
JavaScript because of all this like

224
00:09:22,670 --> 00:09:27,560
taint analysis stuff and it can have an

225
00:09:25,880 --> 00:09:31,250
understanding of the Dom because it

226
00:09:27,560 --> 00:09:35,209
isn't a browser I can also know how to

227
00:09:31,250 --> 00:09:37,850
unlock new paths it can know like that a

228
00:09:35,209 --> 00:09:40,040
user input needs to be like this to be

229
00:09:37,850 --> 00:09:44,209
able to like pass a certain check and

230
00:09:40,040 --> 00:09:46,399
stuff like that the hard part is keeping

231
00:09:44,209 --> 00:09:49,219
it up-to-date and the learning curve

232
00:09:46,399 --> 00:09:50,720
that's used for these applications like

233
00:09:49,220 --> 00:09:53,330
it's not part of your standard workflow

234
00:09:50,720 --> 00:09:55,160
to use these applications they have like

235
00:09:53,330 --> 00:09:58,220
a whole new you ice and stuff like that

236
00:09:55,160 --> 00:10:03,050
and they're often quite costly from what

237
00:09:58,220 --> 00:10:05,270
we could tell so now that we've looked

238
00:10:03,050 --> 00:10:09,349
at the competition let's go into details

239
00:10:05,270 --> 00:10:11,750
about how Tracy works there's really

240
00:10:09,350 --> 00:10:15,640
three main components of Tracy there is

241
00:10:11,750 --> 00:10:19,310
the plugin the api server and the proxy

242
00:10:15,640 --> 00:10:22,010
the plug-in or browser extension uses a

243
00:10:19,310 --> 00:10:25,400
set of API s to be able to monitor the

244
00:10:22,010 --> 00:10:29,450
Dom so like your normal workflow would

245
00:10:25,400 --> 00:10:32,510
be to install this plugin or extension

246
00:10:29,450 --> 00:10:35,150
into your browser and whatever you do

247
00:10:32,510 --> 00:10:37,880
that each page reload actually uses this

248
00:10:35,150 --> 00:10:39,650
mutation observer API and so the way

249
00:10:37,880 --> 00:10:43,400
that this mutation is our API works is

250
00:10:39,650 --> 00:10:45,740
you can set a mutation observer on the

251
00:10:43,400 --> 00:10:47,390
whole DOM and whenever there is a

252
00:10:45,740 --> 00:10:50,329
mutation to that Dom anytime there's

253
00:10:47,390 --> 00:10:52,220
like a write or a modification of an

254
00:10:50,329 --> 00:10:54,140
attribute it will actually fire an event

255
00:10:52,220 --> 00:10:56,750
and tell you that like there's been a

256
00:10:54,140 --> 00:10:58,430
write to the application and then we can

257
00:10:56,750 --> 00:11:00,649
look at those rights to the application

258
00:10:58,430 --> 00:11:03,319
and determine if our user input was ever

259
00:11:00,649 --> 00:11:06,140
written down to the the Dom and how it

260
00:11:03,320 --> 00:11:10,130
was written to the Dom

261
00:11:06,140 --> 00:11:12,949
so a normal tracer workflow would be you

262
00:11:10,130 --> 00:11:15,370
cancel the plug-in and then you start up

263
00:11:12,950 --> 00:11:17,390
the server and you go to the website

264
00:11:15,370 --> 00:11:20,269
whenever you go to the website there's

265
00:11:17,390 --> 00:11:22,790
this drop-down menu by clicking on input

266
00:11:20,269 --> 00:11:25,399
boxes which allows you to select like

267
00:11:22,790 --> 00:11:28,040
different kinds of payloads in this case

268
00:11:25,399 --> 00:11:29,750
the payload is a plain payload because

269
00:11:28,040 --> 00:11:32,899
it's a user name and most of the time

270
00:11:29,750 --> 00:11:35,450
you can not have special characters with

271
00:11:32,899 --> 00:11:37,070
inside the user name and then you can

272
00:11:35,450 --> 00:11:40,790
enter a password and then whenever

273
00:11:37,070 --> 00:11:42,470
Tracey sees that user name in anywhere

274
00:11:40,790 --> 00:11:46,130
inside the application it will flag it

275
00:11:42,470 --> 00:11:48,860
and tell you in the UI where it was

276
00:11:46,130 --> 00:11:52,160
written into the Dom so in this case you

277
00:11:48,860 --> 00:11:55,370
can see that the top bar has the on each

278
00:11:52,160 --> 00:11:57,050
page has the user's username and you can

279
00:11:55,370 --> 00:12:02,060
see like where it was written into the

280
00:11:57,050 --> 00:12:06,979
dominant so we can use this ability to

281
00:12:02,060 --> 00:12:10,489
track the Dom to find XSS we use a

282
00:12:06,980 --> 00:12:13,160
polyglot you can see here that there's

283
00:12:10,490 --> 00:12:15,920
like this double quote single quote and

284
00:12:13,160 --> 00:12:18,290
then the brackets so what we're trying

285
00:12:15,920 --> 00:12:21,560
to do here is trying to trigger some

286
00:12:18,290 --> 00:12:26,149
kind of Dom mutation that will we can

287
00:12:21,560 --> 00:12:28,839
detect so if your application ever like

288
00:12:26,149 --> 00:12:33,290
if your user input ever becomes a

289
00:12:28,839 --> 00:12:36,110
attribute name or a Dom element you know

290
00:12:33,290 --> 00:12:38,209
that there must be XSS because that's

291
00:12:36,110 --> 00:12:39,470
usually impossible because the user

292
00:12:38,209 --> 00:12:41,029
shouldn't be able to control an

293
00:12:39,470 --> 00:12:43,610
attribute name or a Dom element name

294
00:12:41,029 --> 00:12:46,310
which a Dom element name is like a div

295
00:12:43,610 --> 00:12:49,459
or like an input box and an attribute

296
00:12:46,310 --> 00:12:53,540
name should be like value or on air or

297
00:12:49,459 --> 00:12:55,099
something like that so by looking at

298
00:12:53,540 --> 00:12:57,050
those like mutations and like breaking

299
00:12:55,100 --> 00:13:03,470
out of like the certain context we can

300
00:12:57,050 --> 00:13:05,719
tell whether there's XSS or not so I

301
00:13:03,470 --> 00:13:07,820
think it's easiest to kind of see a demo

302
00:13:05,720 --> 00:13:10,760
of this like working in action and I've

303
00:13:07,820 --> 00:13:13,730
got like I got a VM here set up with the

304
00:13:10,760 --> 00:13:16,459
UI and then how we're going to demo this

305
00:13:13,730 --> 00:13:19,339
is has anyone ever used the Google's XSS

306
00:13:16,459 --> 00:13:19,680
game before it's like a fun little like

307
00:13:19,339 --> 00:13:21,480
too

308
00:13:19,680 --> 00:13:22,500
you can you know play around with like

309
00:13:21,480 --> 00:13:24,899
cross-site scripting bugs if you've

310
00:13:22,500 --> 00:13:26,700
never done it before and so I've got

311
00:13:24,899 --> 00:13:30,750
Tracy install you can see the little owl

312
00:13:26,700 --> 00:13:32,640
up here and this is kind of the UI the

313
00:13:30,750 --> 00:13:34,589
way that you should read this is on the

314
00:13:32,640 --> 00:13:36,689
left is going to be all of the user

315
00:13:34,589 --> 00:13:38,880
input so it's essentially a table up

316
00:13:36,690 --> 00:13:41,459
here in the top that I'll show

317
00:13:38,880 --> 00:13:43,350
essentially every time I've put in user

318
00:13:41,459 --> 00:13:45,149
input through a text field or an HTTP

319
00:13:43,350 --> 00:13:48,240
request or something that essentially

320
00:13:45,149 --> 00:13:49,890
goes into the application and then this

321
00:13:48,240 --> 00:13:52,740
will be like kind of an extended view of

322
00:13:49,890 --> 00:13:55,500
the HTTP request that was used to issue

323
00:13:52,740 --> 00:13:58,770
that that injection and then on the

324
00:13:55,500 --> 00:14:01,410
right is going to be the the inverse so

325
00:13:58,770 --> 00:14:03,510
the outputs we consider outputs to be a

326
00:14:01,410 --> 00:14:05,069
lot of different signal but the main one

327
00:14:03,510 --> 00:14:08,640
that we care about is when it was

328
00:14:05,070 --> 00:14:10,410
written back to the Dom so and where it

329
00:14:08,640 --> 00:14:12,899
was written so there are Dom rights but

330
00:14:10,410 --> 00:14:15,719
there's also HTTP responses there's also

331
00:14:12,899 --> 00:14:18,330
we hook the inner HTML method function

332
00:14:15,720 --> 00:14:20,580
and we make that part of our signal so

333
00:14:18,330 --> 00:14:22,380
that'll show up in there as well it's

334
00:14:20,580 --> 00:14:23,580
usually used because sometimes you can

335
00:14:22,380 --> 00:14:25,529
get crosser scripting through inner HTML

336
00:14:23,580 --> 00:14:27,600
but we have a lot of different other

337
00:14:25,529 --> 00:14:30,240
like hooks that will show up in this

338
00:14:27,600 --> 00:14:31,950
output and in the bottom rights same

339
00:14:30,240 --> 00:14:34,770
thing it's just an extended view of the

340
00:14:31,950 --> 00:14:36,450
of the event usually it's like the

341
00:14:34,770 --> 00:14:38,010
actual HTML that was written into the

342
00:14:36,450 --> 00:14:42,510
Dom and you'll actually see all the

343
00:14:38,010 --> 00:14:44,400
encoding and whatnot so if I get started

344
00:14:42,510 --> 00:14:46,980
with this game we get kind of presented

345
00:14:44,400 --> 00:14:48,630
with this application and we're looking

346
00:14:46,980 --> 00:14:50,760
for cross-site scripting and I happen to

347
00:14:48,630 --> 00:14:52,050
know that this one's pretty simple if I

348
00:14:50,760 --> 00:14:55,230
just type you know I'm gonna search for

349
00:14:52,050 --> 00:14:57,810
Jake oh I noticed the you know I get a

350
00:14:55,230 --> 00:14:59,370
query prayer in the top right for Jake

351
00:14:57,810 --> 00:15:02,279
and it gets reflected back to me so this

352
00:14:59,370 --> 00:15:04,829
is likely a case of reflected cross-site

353
00:15:02,279 --> 00:15:07,110
scripting so I want to show you kind of

354
00:15:04,829 --> 00:15:10,650
how you would use this Tracy to solve

355
00:15:07,110 --> 00:15:12,329
this problem it's pretty trivial in like

356
00:15:10,650 --> 00:15:14,010
this case to use like a script alert

357
00:15:12,329 --> 00:15:16,469
which would be pretty easy to like

358
00:15:14,010 --> 00:15:18,180
create an alert box but you can see at

359
00:15:16,470 --> 00:15:19,290
scale when you don't know which inputs

360
00:15:18,180 --> 00:15:21,329
are going to trigger a cross-site

361
00:15:19,290 --> 00:15:24,620
scripting having it all organized in one

362
00:15:21,329 --> 00:15:28,920
app is kind of like a desired workflow

363
00:15:24,620 --> 00:15:30,630
so if I click over here I can get this

364
00:15:28,920 --> 00:15:32,010
like Tracy context menu and it's the

365
00:15:30,630 --> 00:15:33,300
same menu that Michael showed in the

366
00:15:32,010 --> 00:15:35,220
slides

367
00:15:33,300 --> 00:15:37,109
but I can essentially generate a payload

368
00:15:35,220 --> 00:15:39,570
that's our polyglot and it generates

369
00:15:37,110 --> 00:15:43,019
this automatically and now that tracy

370
00:15:39,570 --> 00:15:47,990
has this in its database any time TB rlo

371
00:15:43,019 --> 00:15:53,490
xk MSV is seen in the dom we'll get a

372
00:15:47,990 --> 00:15:58,190
skew z an event for that particular dom

373
00:15:53,490 --> 00:16:03,329
right so when I go back to the UI let's

374
00:15:58,190 --> 00:16:05,490
let's try this again sorry I just

375
00:16:03,329 --> 00:16:06,719
searched here so you can see it you know

376
00:16:05,490 --> 00:16:09,300
my payload doesn't show up like before

377
00:16:06,720 --> 00:16:11,070
because and I get this little alert from

378
00:16:09,300 --> 00:16:13,170
Tracy saying that there's a vulnerable

379
00:16:11,070 --> 00:16:14,730
case of cross-site scripting and it's

380
00:16:13,170 --> 00:16:16,410
likely because we broke the dom and we

381
00:16:14,730 --> 00:16:18,540
can actually see exactly what happened

382
00:16:16,410 --> 00:16:22,290
so you see here on the left we got the

383
00:16:18,540 --> 00:16:25,469
user input I apologize because the this

384
00:16:22,290 --> 00:16:27,689
UI is like kind of squished just so that

385
00:16:25,470 --> 00:16:29,730
you can see it on the screen but it's

386
00:16:27,690 --> 00:16:31,829
just a table of all the information that

387
00:16:29,730 --> 00:16:35,010
was used to gather the event this is the

388
00:16:31,829 --> 00:16:37,560
get request that was used to make to the

389
00:16:35,010 --> 00:16:40,170
application to inject that user input

390
00:16:37,560 --> 00:16:43,560
that you sgf and then this was the

391
00:16:40,170 --> 00:16:47,430
output so Tracy the extension noticed

392
00:16:43,560 --> 00:16:50,969
that our input was actually output in

393
00:16:47,430 --> 00:16:52,949
the dom as a node name inside of this be

394
00:16:50,970 --> 00:16:56,040
node tag so you can see that here

395
00:16:52,950 --> 00:16:58,620
instead of a B and since this is

396
00:16:56,040 --> 00:17:01,349
actually in the Dom we know this is not

397
00:16:58,620 --> 00:17:06,449
encoded and we can know that this is a

398
00:17:01,350 --> 00:17:08,010
vulnerable case across by scripting so

399
00:17:06,449 --> 00:17:13,760
now I like to get through the next page

400
00:17:08,010 --> 00:17:20,319
I'm just going to do a quick

401
00:17:13,760 --> 00:17:23,439
proof of concepts so you get through

402
00:17:20,319 --> 00:17:23,438
[Music]

403
00:17:23,900 --> 00:17:26,900
this

404
00:17:38,289 --> 00:17:54,470
that really messing up here thank you

405
00:17:51,520 --> 00:17:56,120
all right cool so that's like a

406
00:17:54,470 --> 00:17:59,090
reflective case so if we go to the next

407
00:17:56,120 --> 00:18:02,510
page we get a more interesting case of

408
00:17:59,090 --> 00:18:04,189
like dom-based xss so in this particular

409
00:18:02,510 --> 00:18:06,529
case there's like a chat window and you

410
00:18:04,190 --> 00:18:08,510
can type you know Jake and without

411
00:18:06,529 --> 00:18:11,000
making an HTTP request it's already put

412
00:18:08,510 --> 00:18:12,379
in the little chat box and so dom-based

413
00:18:11,000 --> 00:18:14,059
cross-site scripting is actually kind of

414
00:18:12,380 --> 00:18:17,059
complicated to find in practice because

415
00:18:14,059 --> 00:18:20,330
it requires the pen tester to like see

416
00:18:17,059 --> 00:18:23,059
the whole application as it's acting at

417
00:18:20,330 --> 00:18:25,070
once and this is the actual good really

418
00:18:23,059 --> 00:18:26,720
nice case that tracy has where since it

419
00:18:25,070 --> 00:18:28,939
has access to the Dominus watching

420
00:18:26,720 --> 00:18:30,950
constantly it can see modifications as

421
00:18:28,940 --> 00:18:32,840
your pen testing you don't have to like

422
00:18:30,950 --> 00:18:34,159
change your workflow really at all

423
00:18:32,840 --> 00:18:35,990
the only thing you have to change is

424
00:18:34,159 --> 00:18:38,330
about instead of you know typing you

425
00:18:35,990 --> 00:18:41,059
know your normal script alert you can

426
00:18:38,330 --> 00:18:43,279
type nothing and have Tracy generate a

427
00:18:41,059 --> 00:18:46,460
payload for you and since now this is in

428
00:18:43,279 --> 00:18:49,250
Tracy's database Tracy will see this get

429
00:18:46,460 --> 00:18:52,309
written to the Dom and when it does ok

430
00:18:49,250 --> 00:18:54,169
we have a little notification and it

431
00:18:52,309 --> 00:18:55,549
tells us that oh this is broken the Dom

432
00:18:54,169 --> 00:18:58,309
in a predictable way just like before

433
00:18:55,549 --> 00:19:00,889
and in this case we get two events one

434
00:18:58,309 --> 00:19:03,559
for Dom right so this is the actual raw

435
00:19:00,890 --> 00:19:05,330
Dom right that without encoding and we

436
00:19:03,559 --> 00:19:07,549
can see it's the same case where it's

437
00:19:05,330 --> 00:19:09,470
broken out of this block quote and it's

438
00:19:07,549 --> 00:19:11,629
made its own Dom node so we know that it

439
00:19:09,470 --> 00:19:14,240
has to be vulnerable and we also get an

440
00:19:11,630 --> 00:19:17,000
event for inner HTML because of how we

441
00:19:14,240 --> 00:19:18,799
hook the inner HTML function and how

442
00:19:17,000 --> 00:19:19,850
inner HTML is particularly bad and we

443
00:19:18,799 --> 00:19:21,320
want to know about it when people are

444
00:19:19,850 --> 00:19:25,639
using it so that's why we have two

445
00:19:21,320 --> 00:19:28,039
events here so in the same way we can do

446
00:19:25,640 --> 00:19:30,580
our proof-of-concept once we know a

447
00:19:28,039 --> 00:19:34,060
vulnerable case exists

448
00:19:30,580 --> 00:19:40,879
[Music]

449
00:19:34,060 --> 00:19:43,909
cool let me get our alert nice so this

450
00:19:40,880 --> 00:19:46,640
next case so this is a innerhtml case

451
00:19:43,910 --> 00:19:50,240
again and we can kind of like see the

452
00:19:46,640 --> 00:19:54,080
code to see exactly what's happening so

453
00:19:50,240 --> 00:19:56,750
in line 18 this line right here it's

454
00:19:54,080 --> 00:19:58,220
taking this number which is

455
00:19:56,750 --> 00:20:00,320
user-supplied and it's calling the

456
00:19:58,220 --> 00:20:04,430
jQuery HTML which is actually just a

457
00:20:00,320 --> 00:20:05,360
wrapper for inter HTM oh and so this is

458
00:20:04,430 --> 00:20:08,150
obviously going to be a case of

459
00:20:05,360 --> 00:20:09,919
cross-site scripting but it's

460
00:20:08,150 --> 00:20:13,940
essentially these numbers up here our

461
00:20:09,920 --> 00:20:15,380
user supplied and what I can do is

462
00:20:13,940 --> 00:20:19,880
essentially put our Treacy payload in

463
00:20:15,380 --> 00:20:23,570
again and if you give it a second

464
00:20:19,880 --> 00:20:25,310
cool notification and we can see all the

465
00:20:23,570 --> 00:20:27,200
events for when the Dom was written it's

466
00:20:25,310 --> 00:20:29,510
actually two Dom writes so first the

467
00:20:27,200 --> 00:20:31,340
iframe which is like to just the iframe

468
00:20:29,510 --> 00:20:34,790
that's used to load the page and then

469
00:20:31,340 --> 00:20:36,560
this this image is loaded but the more

470
00:20:34,790 --> 00:20:40,100
cool interesting example in this case is

471
00:20:36,560 --> 00:20:41,570
this image inner HTML hook so we

472
00:20:40,100 --> 00:20:44,780
actually know they're using inner HTML

473
00:20:41,570 --> 00:20:47,450
to write this exact text without

474
00:20:44,780 --> 00:20:50,690
encoding and since it breaks the Dom in

475
00:20:47,450 --> 00:20:54,220
its predictable way we get the known

476
00:20:50,690 --> 00:21:02,720
vulnerable case of cross-site scripting

477
00:20:54,220 --> 00:21:07,340
so whoops I think that's probably good

478
00:21:02,720 --> 00:21:10,640
and there's another example on here yeah

479
00:21:07,340 --> 00:21:13,570
why not show it since what it's just on

480
00:21:10,640 --> 00:21:13,570
air that's right

481
00:21:18,300 --> 00:21:21,300
okay

482
00:21:28,320 --> 00:21:31,570
[Music]

483
00:21:31,920 --> 00:21:36,840
nice alright yeah let's do one more

484
00:21:34,090 --> 00:21:39,280
example so this one's a little trickier

485
00:21:36,840 --> 00:21:42,459
and I'll show the code again to see why

486
00:21:39,280 --> 00:21:46,629
it's trickier but essentially what

487
00:21:42,460 --> 00:21:49,060
happens in this case is this image this

488
00:21:46,630 --> 00:21:51,100
image tag has a non Loan property and

489
00:21:49,060 --> 00:21:53,649
unload our on event handlers are

490
00:21:51,100 --> 00:21:55,090
actually eval so which means they take

491
00:21:53,650 --> 00:21:57,910
the string inside and they run eval on

492
00:21:55,090 --> 00:21:59,110
them and if you control user input

493
00:21:57,910 --> 00:22:00,520
inside of an eval it's almost a

494
00:21:59,110 --> 00:22:01,810
guaranteed case of cross-site scripting

495
00:22:00,520 --> 00:22:03,580
as long as you know that they're not

496
00:22:01,810 --> 00:22:07,480
encoding it in some kind of protected

497
00:22:03,580 --> 00:22:11,020
way and in this particular case timers

498
00:22:07,480 --> 00:22:13,000
under these little hamburger quotes so

499
00:22:11,020 --> 00:22:15,879
that it's replaced with something that

500
00:22:13,000 --> 00:22:17,830
you supply so the idea is that you would

501
00:22:15,880 --> 00:22:21,940
break out of this start timer call and

502
00:22:17,830 --> 00:22:23,199
then a value and Tracy can even find

503
00:22:21,940 --> 00:22:27,070
cases like this even though it's a

504
00:22:23,200 --> 00:22:30,580
little complicated but you'll see that

505
00:22:27,070 --> 00:22:35,800
if I use instead of three here and I

506
00:22:30,580 --> 00:22:37,629
generate a Tracy payload it won't be it

507
00:22:35,800 --> 00:22:38,860
won't give you the three that we really

508
00:22:37,630 --> 00:22:40,390
want because three is pretty much

509
00:22:38,860 --> 00:22:43,149
guaranteed but it does give it a two

510
00:22:40,390 --> 00:22:45,100
because it thinks this is pretty bad

511
00:22:43,150 --> 00:22:46,630
because it knows about on event handlers

512
00:22:45,100 --> 00:22:49,719
and it knows if user input ever gets

513
00:22:46,630 --> 00:22:51,070
inside of a non event handler it

514
00:22:49,720 --> 00:22:53,020
probably should get checked out by the

515
00:22:51,070 --> 00:22:54,909
pen tester to make sure that it hasn't

516
00:22:53,020 --> 00:22:57,520
been encoded but there are cases where

517
00:22:54,910 --> 00:22:59,290
essentially this will be hard to execute

518
00:22:57,520 --> 00:23:01,090
arbitrary JavaScript so that's why we

519
00:22:59,290 --> 00:23:02,530
give it a two instead of a three but you

520
00:23:01,090 --> 00:23:04,570
still get the nice little notification

521
00:23:02,530 --> 00:23:07,330
so while your pin testing if you end up

522
00:23:04,570 --> 00:23:13,270
firing that event it'll kind of alert

523
00:23:07,330 --> 00:23:16,990
you to the to that bug okay so I'm gonna

524
00:23:13,270 --> 00:23:19,930
go back to slides here then we have a

525
00:23:16,990 --> 00:23:21,160
good good idea so what can Tracy do yeah

526
00:23:19,930 --> 00:23:23,710
so it's not eliminating cross-site

527
00:23:21,160 --> 00:23:26,490
scripting correct but it is hopefully

528
00:23:23,710 --> 00:23:28,480
reducing the barrier of entry to

529
00:23:26,490 --> 00:23:31,270
cross-site scripting so much that even

530
00:23:28,480 --> 00:23:32,230
QA people can find these things the idea

531
00:23:31,270 --> 00:23:34,629
is that we would be able to like have

532
00:23:32,230 --> 00:23:37,090
you set up a Tracy environment with QA

533
00:23:34,630 --> 00:23:38,560
or testing or you know like maybe even

534
00:23:37,090 --> 00:23:39,370
your bug bounty teams so that they can

535
00:23:38,560 --> 00:23:41,409
just

536
00:23:39,370 --> 00:23:43,149
peel these off without you really even

537
00:23:41,410 --> 00:23:45,160
having to look through them and it's all

538
00:23:43,150 --> 00:23:46,540
done dynamically which is great now the

539
00:23:45,160 --> 00:23:48,550
other thing that it gives you is maps

540
00:23:46,540 --> 00:23:50,889
all inputs to outputs that's what you

541
00:23:48,550 --> 00:23:53,169
saw with the left versus the right all

542
00:23:50,890 --> 00:23:55,720
that left stuff is user input into the

543
00:23:53,170 --> 00:23:58,300
application and all the rights are the

544
00:23:55,720 --> 00:24:00,010
outputs ideally you'd be able to use

545
00:23:58,300 --> 00:24:02,530
this to like maybe generate other kinds

546
00:24:00,010 --> 00:24:03,760
of tools to see what kind of tank goes

547
00:24:02,530 --> 00:24:07,059
into your application and how its

548
00:24:03,760 --> 00:24:08,379
rendered it can automatically discover

549
00:24:07,059 --> 00:24:11,649
vulnerable cases across site scripting

550
00:24:08,380 --> 00:24:14,140
and pretty soon as in like this morning

551
00:24:11,650 --> 00:24:15,580
I committed it it can generate automatic

552
00:24:14,140 --> 00:24:18,309
reproduction stuffs which is pretty cool

553
00:24:15,580 --> 00:24:20,320
because since it has all the data from

554
00:24:18,309 --> 00:24:22,270
the DOM and it creates like this map of

555
00:24:20,320 --> 00:24:26,559
inputs to outputs you can generate

556
00:24:22,270 --> 00:24:27,879
reproduction steps automatically so this

557
00:24:26,559 --> 00:24:29,410
is just a project that Michael and I

558
00:24:27,880 --> 00:24:32,830
work on in our spare time we would love

559
00:24:29,410 --> 00:24:34,809
a few extra hands if we can get our our

560
00:24:32,830 --> 00:24:37,350
hands on them because it needs to be

561
00:24:34,809 --> 00:24:39,428
more stable which is a would be great

562
00:24:37,350 --> 00:24:42,850
the other thing that we would like to

563
00:24:39,429 --> 00:24:44,650
get more of is signal so outputs are

564
00:24:42,850 --> 00:24:46,149
varied like the Dom writes are like a

565
00:24:44,650 --> 00:24:47,950
big part of that and that's really the

566
00:24:46,150 --> 00:24:49,750
only thing that we care about but there

567
00:24:47,950 --> 00:24:51,010
are a couple of function calls that are

568
00:24:49,750 --> 00:24:52,510
super important that we want to catch

569
00:24:51,010 --> 00:24:55,840
which are like eval we want to be able

570
00:24:52,510 --> 00:24:57,280
to essentially hook eval and see when

571
00:24:55,840 --> 00:24:59,199
users are using eval within their

572
00:24:57,280 --> 00:25:02,139
JavaScript to execute user controlled

573
00:24:59,200 --> 00:25:04,960
input turns out hooking evals like super

574
00:25:02,140 --> 00:25:07,059
difficult because of reasons

575
00:25:04,960 --> 00:25:09,070
same with set timeout same with set

576
00:25:07,059 --> 00:25:09,970
interval and there's a lot of other

577
00:25:09,070 --> 00:25:12,189
signal that we'd like to gather

578
00:25:09,970 --> 00:25:13,809
essentially Tracy should be monitoring

579
00:25:12,190 --> 00:25:16,809
everything while you're pin testing and

580
00:25:13,809 --> 00:25:18,940
collecting analytics we have front-end

581
00:25:16,809 --> 00:25:20,950
fuzzy now we have verification of XSS

582
00:25:18,940 --> 00:25:23,920
and we do have automatically production

583
00:25:20,950 --> 00:25:29,050
steps so there's a lot to come with like

584
00:25:23,920 --> 00:25:31,150
essentially automating the flow yeah I

585
00:25:29,050 --> 00:25:32,800
said this before my last talk I don't

586
00:25:31,150 --> 00:25:35,590
really tweet but that is my Twitter and

587
00:25:32,800 --> 00:25:37,270
I will respond to you but I don't like

588
00:25:35,590 --> 00:25:39,820
have cool things to say on Twitter and

589
00:25:37,270 --> 00:25:44,500
there's the github link see the source

590
00:25:39,820 --> 00:25:46,510
code and thanks for shell con for having

591
00:25:44,500 --> 00:25:51,400
us any questions

592
00:25:46,510 --> 00:25:54,539
oh sorry yeah yeah go ahead thank you

593
00:25:51,400 --> 00:25:54,539
[Applause]

594
00:26:01,159 --> 00:26:06,320
right now it's free state a little from

595
00:26:03,019 --> 00:26:09,200
and Firefox yeah it's just like we use

596
00:26:06,320 --> 00:26:11,359
the regular Chrome extension and they're

597
00:26:09,200 --> 00:26:14,359
compatible with Firefox and before we

598
00:26:11,359 --> 00:26:17,029
usually push production it's we make

599
00:26:14,359 --> 00:26:18,708
sure that they work for both so but yeah

600
00:26:17,029 --> 00:26:37,159
it doesn't work for like Safari I don't

601
00:26:18,709 --> 00:26:39,049
think or Internet Explorer browser stuff

602
00:26:37,159 --> 00:26:41,599
like when we try to for example when we

603
00:26:39,049 --> 00:26:42,229
try to hook eval the way we hook in or

604
00:26:41,599 --> 00:26:46,369
html's

605
00:26:42,229 --> 00:26:47,959
we were using the proxy api's if

606
00:26:46,369 --> 00:26:49,458
anyone's familiar 'those but essentially

607
00:26:47,959 --> 00:26:50,869
they allow you to write wrapper

608
00:26:49,459 --> 00:26:53,769
functions for like getters and setters

609
00:26:50,869 --> 00:26:57,738
and other types of method of invitations

610
00:26:53,769 --> 00:27:00,759
and you can't do that with eval because

611
00:26:57,739 --> 00:27:03,379
of how eval sees like the this context

612
00:27:00,759 --> 00:27:05,089
within its context so whenever you call

613
00:27:03,379 --> 00:27:08,119
you valid jumps you can pass it at this

614
00:27:05,089 --> 00:27:10,369
context but I actually forget all the

615
00:27:08,119 --> 00:27:24,589
details but it essentially breaks most

616
00:27:10,369 --> 00:27:26,119
apps yeah yeah web pack will put

617
00:27:24,589 --> 00:27:28,369
everything in a closure for you which

618
00:27:26,119 --> 00:27:31,879
means eval can't see it when we jump

619
00:27:28,369 --> 00:27:33,468
into our method essentially hook I don't

620
00:27:31,879 --> 00:27:35,539
know it's like a lot of weird like stuff

621
00:27:33,469 --> 00:27:37,059
like that like getting the extension to

622
00:27:35,539 --> 00:27:41,239
talk to the Dom oh we do a lot of like

623
00:27:37,059 --> 00:27:43,158
Tracy the Dom browser extension sits in

624
00:27:41,239 --> 00:27:45,979
its own context but then sometimes we'll

625
00:27:43,159 --> 00:27:47,629
inject scripts into the Dom so that they

626
00:27:45,979 --> 00:27:49,429
can manipulate things like for example

627
00:27:47,629 --> 00:27:51,949
that's how you get the context menu and

628
00:27:49,429 --> 00:27:54,919
you click on the owl and like getting

629
00:27:51,950 --> 00:27:57,409
that timing correctly was a pain like

630
00:27:54,919 --> 00:28:00,450
when scripts actually load and how to

631
00:27:57,409 --> 00:28:02,120
communicate them time

632
00:28:00,450 --> 00:28:05,010
the other thing I was gonna say was

633
00:28:02,120 --> 00:28:07,168
duplicate data so Tracy actually does

634
00:28:05,010 --> 00:28:09,510
all D duping for you you don't like if

635
00:28:07,169 --> 00:28:11,220
you reload a page with user input in it

636
00:28:09,510 --> 00:28:14,220
it doesn't record it again because it

637
00:28:11,220 --> 00:28:15,840
knows that to be the same data so a lot

638
00:28:14,220 --> 00:28:19,860
getting all that D duping working was

639
00:28:15,840 --> 00:28:25,980
kind of a pain as well that you guys are

640
00:28:19,860 --> 00:28:30,899
hurt yeah you guys stuff tough stuff any

641
00:28:25,980 --> 00:28:31,370
other questions okay thanks appreciate

642
00:28:30,900 --> 00:28:36,770
it

643
00:28:31,370 --> 00:28:36,770
[Applause]

