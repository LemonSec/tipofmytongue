1
00:00:00,030 --> 00:00:06,660
all right so this is enter the Python

2
00:00:05,520 --> 00:00:09,870
for security professionals with

3
00:00:06,660 --> 00:00:11,190
Ravikumar Ravin is a data security as a

4
00:00:09,870 --> 00:00:13,110
data scientist by day and a hacker

5
00:00:11,190 --> 00:00:14,610
enthusiast at night has been involved in

6
00:00:13,110 --> 00:00:16,410
security circles for over a decade now

7
00:00:14,610 --> 00:00:17,880
and there's a keyholder at 23 B hacker

8
00:00:16,410 --> 00:00:19,260
space free and other key holders

9
00:00:17,880 --> 00:00:21,689
maintain an open space for the community

10
00:00:19,260 --> 00:00:23,189
to come learn anything from fabrication

11
00:00:21,689 --> 00:00:25,470
to lock-picking to cyber security

12
00:00:23,189 --> 00:00:31,740
please welcome Robin - so she'll con

13
00:00:25,470 --> 00:00:34,170
2018 all right well thank you for coming

14
00:00:31,740 --> 00:00:37,739
I assume a lot of you want to learn

15
00:00:34,170 --> 00:00:41,600
Python so I'll go through the same

16
00:00:37,739 --> 00:00:44,129
basics yeah about me that one so yeah

17
00:00:41,600 --> 00:00:46,379
ravine or Canyon it's fine I used to

18
00:00:44,129 --> 00:00:48,210
flip you know over things kilter 23b

19
00:00:46,379 --> 00:00:49,739
there's a lot of hacker spaces in Orange

20
00:00:48,210 --> 00:00:52,829
County so there's no space labs there's

21
00:00:49,739 --> 00:00:54,239
mag labs dc5 to hold to meet up so if

22
00:00:52,829 --> 00:00:56,280
you enjoy this sort of thing you should

23
00:00:54,239 --> 00:00:56,839
show up to any one of those four they're

24
00:00:56,280 --> 00:01:00,750
all over the place

25
00:00:56,840 --> 00:01:02,640
I write a lot of Python for work I'm not

26
00:01:00,750 --> 00:01:04,830
a security person professionally but I

27
00:01:02,640 --> 00:01:06,330
do Python for data science data analysis

28
00:01:04,830 --> 00:01:07,530
which you probably read about in the

29
00:01:06,330 --> 00:01:10,080
news whatnot and machine learning all

30
00:01:07,530 --> 00:01:11,400
that crap so I write a ton of Python for

31
00:01:10,080 --> 00:01:12,720
that but I certainly enjoyed the

32
00:01:11,400 --> 00:01:14,220
security community which is why I come

33
00:01:12,720 --> 00:01:17,729
out to these things and Def Con and all

34
00:01:14,220 --> 00:01:19,860
that so why this talk a lot of security

35
00:01:17,729 --> 00:01:21,990
professionals I know use Python lightly

36
00:01:19,860 --> 00:01:23,040
or they want to learn Python there but

37
00:01:21,990 --> 00:01:25,259
they have to learn a lot of things so I

38
00:01:23,040 --> 00:01:26,670
figured this to be a good one if you

39
00:01:25,259 --> 00:01:29,040
want a great introduction why python is

40
00:01:26,670 --> 00:01:31,650
useful you can Emily talk if you were in

41
00:01:29,040 --> 00:01:34,710
that she had a great talk about how she

42
00:01:31,650 --> 00:01:37,439
uses Python in her day to day work and

43
00:01:34,710 --> 00:01:41,250
it was a fantastic fantastic explanation

44
00:01:37,439 --> 00:01:42,389
of how it helps her with sentiment

45
00:01:41,250 --> 00:01:45,119
analysis and figuring out where the

46
00:01:42,390 --> 00:01:49,500
people are what people are saying about

47
00:01:45,119 --> 00:01:51,329
a client and all that also Kali Linux

48
00:01:49,500 --> 00:01:53,399
has a lot of Python tools in it there

49
00:01:51,329 --> 00:01:54,600
was one in particular I'm gonna go

50
00:01:53,399 --> 00:01:56,759
through it's called brute spray will

51
00:01:54,600 --> 00:02:00,719
speak about in a second so python is

52
00:01:56,759 --> 00:02:03,299
super useful in data science financial

53
00:02:00,719 --> 00:02:06,570
analysis and cybersecurity so pretty

54
00:02:03,299 --> 00:02:08,039
good here you're gonna notice I have no

55
00:02:06,570 --> 00:02:09,959
slides for this presentation I want to

56
00:02:08,038 --> 00:02:11,609
do the whole thing live so we're gonna

57
00:02:09,959 --> 00:02:14,069
see how that goes and we hold experiment

58
00:02:11,610 --> 00:02:16,319
so you can grab every

59
00:02:14,069 --> 00:02:18,179
thing off of the github repo if you want

60
00:02:16,319 --> 00:02:19,679
so there is a github repo it's got

61
00:02:18,180 --> 00:02:22,319
literally everything I'm going to cover

62
00:02:19,680 --> 00:02:24,480
in this step-by-step so if you're trying

63
00:02:22,319 --> 00:02:25,619
to learn Python I hopefully it's a good

64
00:02:24,480 --> 00:02:27,840
resource we're gonna be going through

65
00:02:25,620 --> 00:02:32,099
all the code that's in this repo in the

66
00:02:27,840 --> 00:02:34,530
next 50 minutes oh and then legal stuff

67
00:02:32,099 --> 00:02:36,060
everything I say is my opinion so I'm

68
00:02:34,530 --> 00:02:37,139
not representing anyone I work for a

69
00:02:36,060 --> 00:02:40,669
company I'm not representing that

70
00:02:37,139 --> 00:02:44,400
company or anything else so with that

71
00:02:40,669 --> 00:02:46,409
let's talk about brute spray so quick

72
00:02:44,400 --> 00:02:48,060
thing about this presentation questions

73
00:02:46,409 --> 00:02:49,409
are rewarded you're welcome to shout

74
00:02:48,060 --> 00:02:51,689
them out at any time you don't have to

75
00:02:49,409 --> 00:02:54,500
wait to the end so does anyone have any

76
00:02:51,689 --> 00:02:54,500
questions before we start

77
00:02:55,430 --> 00:03:02,219
okay all right so we're gonna be

78
00:02:59,219 --> 00:03:08,579
covering the brute spray tool or I'm not

79
00:03:02,219 --> 00:03:11,819
gonna be let me turn the volume off well

80
00:03:08,579 --> 00:03:13,230
so you can hear the audio but rephrase

81
00:03:11,819 --> 00:03:16,349
the tool that's included by Kali by

82
00:03:13,230 --> 00:03:19,590
default it's a it's a great example of

83
00:03:16,349 --> 00:03:21,388
Python and pythons use in the security

84
00:03:19,590 --> 00:03:23,069
industry which is why I'm I want to go

85
00:03:21,389 --> 00:03:25,259
through how it's built essentially what

86
00:03:23,069 --> 00:03:27,418
booth berry does is it takes an nmap

87
00:03:25,259 --> 00:03:29,698
scan and it finds all the targets that

88
00:03:27,419 --> 00:03:33,329
nmap found and then it will then try and

89
00:03:29,699 --> 00:03:34,829
brute force all of the sort of end

90
00:03:33,329 --> 00:03:38,310
points and stuff found so it's a little

91
00:03:34,829 --> 00:03:39,120
hard to see in this in this video but

92
00:03:38,310 --> 00:03:41,639
essentially it's going through

93
00:03:39,120 --> 00:03:43,019
everything found in nmap and it's

94
00:03:41,639 --> 00:03:44,579
hitting it with like default content

95
00:03:43,019 --> 00:03:46,889
also like pasta password Postgres

96
00:03:44,579 --> 00:03:50,729
process pseudo route all those sorts of

97
00:03:46,889 --> 00:03:53,609
things brutes pay is an open-source tool

98
00:03:50,729 --> 00:03:56,639
as well it's online so if you use Kali

99
00:03:53,609 --> 00:03:59,069
it's there again it's a great example of

100
00:03:56,639 --> 00:04:00,269
Python so let me go through I'll just

101
00:03:59,069 --> 00:04:02,250
show you the source code this is the

102
00:04:00,269 --> 00:04:03,599
source code for root spray it's it's

103
00:04:02,250 --> 00:04:05,129
long and if you're not used to Python it

104
00:04:03,599 --> 00:04:07,138
looks scary but really it's just

105
00:04:05,129 --> 00:04:08,280
composed of a few basic pieces that are

106
00:04:07,139 --> 00:04:10,019
used over and over and over again so

107
00:04:08,280 --> 00:04:12,509
once you learn the few ingredients

108
00:04:10,019 --> 00:04:14,310
you'll be able to go through it and I

109
00:04:12,509 --> 00:04:16,529
guess for street cred I wasn't planning

110
00:04:14,310 --> 00:04:17,880
on doing this but as I was learning

111
00:04:16,529 --> 00:04:18,929
brute spray for this talk we're going

112
00:04:17,880 --> 00:04:20,370
through breacher this talk I ended up

113
00:04:18,930 --> 00:04:25,050
contributing here to a bunch so there

114
00:04:20,370 --> 00:04:26,039
you go no my cousin Kali so now you can

115
00:04:25,050 --> 00:04:26,780
believe actually know how to do this

116
00:04:26,039 --> 00:04:28,610
stuff

117
00:04:26,780 --> 00:04:30,650
so let's talk about how this talk is

118
00:04:28,610 --> 00:04:32,750
gonna work let me show you how this talk

119
00:04:30,650 --> 00:04:33,859
it's gonna work I have a bunch of

120
00:04:32,750 --> 00:04:35,270
directories and maybe it's a little

121
00:04:33,860 --> 00:04:36,890
easier in a GUI so let me go through a

122
00:04:35,270 --> 00:04:40,760
GUI first so I don't scare you guys with

123
00:04:36,890 --> 00:04:43,039
a terminal you're not used to it there's

124
00:04:40,760 --> 00:04:45,860
every single one of these folders or

125
00:04:43,040 --> 00:04:47,600
directories contains a file called hack

126
00:04:45,860 --> 00:04:49,400
py we're gonna be talking about Python

127
00:04:47,600 --> 00:04:52,010
and scripting so what we're gonna do is

128
00:04:49,400 --> 00:04:53,419
we're gonna slowly build up and the

129
00:04:52,010 --> 00:04:55,190
basic functional out of brute spray in

130
00:04:53,420 --> 00:04:57,680
11 steps and my hope with been doing

131
00:04:55,190 --> 00:04:59,210
this is that when you see it like brute

132
00:04:57,680 --> 00:05:00,530
spray it's a whole bunch of scary code

133
00:04:59,210 --> 00:05:02,150
and you can't really figure out which

134
00:05:00,530 --> 00:05:04,010
pieces which and where what fits where

135
00:05:02,150 --> 00:05:06,200
by building it piece by piece I hope

136
00:05:04,010 --> 00:05:07,370
you'll be able to find the points that

137
00:05:06,200 --> 00:05:09,560
maybe you're confused on and you can

138
00:05:07,370 --> 00:05:14,830
focus on those or you can see how the

139
00:05:09,560 --> 00:05:14,830
whole thing is just stuck together okay

140
00:05:15,460 --> 00:05:22,700
usually no questions not so much she's

141
00:05:19,540 --> 00:05:23,900
yeah and because you asked a question

142
00:05:22,700 --> 00:05:25,490
you get your choice of candy you want

143
00:05:23,900 --> 00:05:33,469
Hershey's Reese's KitKat or Hershey's

144
00:05:25,490 --> 00:05:35,030
almond yeah all right cool that's what

145
00:05:33,470 --> 00:05:39,850
you get for questions yeah now before

146
00:05:35,030 --> 00:05:41,780
asking questions huh what was that uh

147
00:05:39,850 --> 00:05:43,090
yeah you're not that's a question

148
00:05:41,780 --> 00:05:47,450
there's gonna have to be a good one

149
00:05:43,090 --> 00:05:49,099
everyone learn what is that green that's

150
00:05:47,450 --> 00:05:50,659
the only easy one you're gonna get after

151
00:05:49,100 --> 00:05:54,410
that they're gonna have to be legitimate

152
00:05:50,660 --> 00:05:58,250
questions also you're gonna figure out

153
00:05:54,410 --> 00:06:01,640
that uh that I'm not yes my github link

154
00:05:58,250 --> 00:06:04,580
is right here candy - and I Python for

155
00:06:01,640 --> 00:06:07,010
hackers so if you google Kenya and I

156
00:06:04,580 --> 00:06:09,710
have Python for hackers and get it up

157
00:06:07,010 --> 00:06:10,940
you'll get to get to this repo you guys

158
00:06:09,710 --> 00:06:12,229
gonna find out I'm not great at sports

159
00:06:10,940 --> 00:06:18,260
so I'm sorry if I hit somebody in the

160
00:06:12,229 --> 00:06:19,729
face so if we talk I'm gonna I'll take

161
00:06:18,260 --> 00:06:20,810
our boots pray only for a minute because

162
00:06:19,729 --> 00:06:22,430
I'm gonna run out of time

163
00:06:20,810 --> 00:06:23,780
brutes very supports a whole bunch of

164
00:06:22,430 --> 00:06:25,820
protocols it's a really well developed

165
00:06:23,780 --> 00:06:27,799
tool and I think it's a fantastic I'm

166
00:06:25,820 --> 00:06:29,210
using brief ray as an example for pen

167
00:06:27,800 --> 00:06:32,210
testing tools if you want more examples

168
00:06:29,210 --> 00:06:33,830
watch Emily's talk or go talk to her she

169
00:06:32,210 --> 00:06:35,870
she's developed an entire tool chain

170
00:06:33,830 --> 00:06:37,609
that supports what she does it's a great

171
00:06:35,870 --> 00:06:38,750
example of how Python is useful in

172
00:06:37,610 --> 00:06:40,610
InfoSec

173
00:06:38,750 --> 00:06:42,319
so it's pythons are fantastic too

174
00:06:40,610 --> 00:06:45,110
automated do a lot of things that are

175
00:06:42,319 --> 00:06:45,919
common in InfoSec frankly data science

176
00:06:45,110 --> 00:06:47,539
because I'm in the data science

177
00:06:45,919 --> 00:06:49,400
community and a bunch of other fields

178
00:06:47,539 --> 00:06:51,199
which is why I'm doing a talk specific

179
00:06:49,400 --> 00:06:53,688
than ipython all right so let's talk

180
00:06:51,199 --> 00:06:56,090
about Python real quick and how it works

181
00:06:53,689 --> 00:06:58,039
so python is installed by default on

182
00:06:56,090 --> 00:06:59,568
every Linux distribution and and all

183
00:06:58,039 --> 00:07:02,000
Macs it's just it just happens to be

184
00:06:59,569 --> 00:07:03,500
there I mean and I'm gonna I'm gonna

185
00:07:02,000 --> 00:07:04,849
fire it up a weird way to there's an

186
00:07:03,500 --> 00:07:08,150
explanation but I'll show you why I'm

187
00:07:04,849 --> 00:07:10,310
doing it this way if you have a Mac or

188
00:07:08,150 --> 00:07:12,979
Linux computer you're gonna get python 2

189
00:07:10,310 --> 00:07:14,719
7 usually by default it'll just be there

190
00:07:12,979 --> 00:07:17,750
on my Mac it's on the user bin directory

191
00:07:14,719 --> 00:07:19,669
as you might expect the one new I still

192
00:07:17,750 --> 00:07:21,259
have my talk is since I use Python a lot

193
00:07:19,669 --> 00:07:23,060
I've installed the custom versions for

194
00:07:21,259 --> 00:07:27,159
myself when I type in Python

195
00:07:23,060 --> 00:07:29,569
I get 3.6 by default or 3.5 by default

196
00:07:27,159 --> 00:07:31,129
if you run it again if you go on a Mac

197
00:07:29,569 --> 00:07:33,710
or Linux you'll have two point seven by

198
00:07:31,129 --> 00:07:36,500
default why is this important

199
00:07:33,710 --> 00:07:39,520
Python 2 or python 3 was released in

200
00:07:36,500 --> 00:07:49,430
2010 and actually I'll just pull up the

201
00:07:39,520 --> 00:07:50,930
some easy Python 2 or 3 there's actually

202
00:07:49,430 --> 00:07:53,270
no question about it now I use Python 3

203
00:07:50,930 --> 00:07:55,400
Python to end a life basically in a year

204
00:07:53,270 --> 00:07:57,650
just not a point to learn it anymore

205
00:07:55,400 --> 00:07:59,690
it's been deprecated or it's going to be

206
00:07:57,650 --> 00:08:00,979
a deprecated really soon you're still

207
00:07:59,690 --> 00:08:02,270
gonna see a lot of Python 2 because

208
00:08:00,979 --> 00:08:03,529
there's a ton of legacy code built in

209
00:08:02,270 --> 00:08:05,870
but if you're brand new I would suggest

210
00:08:03,529 --> 00:08:07,310
strongly suggest starting with Python 3

211
00:08:05,870 --> 00:08:09,110
because pretty much everyone's gonna

212
00:08:07,310 --> 00:08:12,650
switch over in a matter of months at

213
00:08:09,110 --> 00:08:18,620
this point so no question Python 3

214
00:08:12,650 --> 00:08:20,239
everything I run will be Python 3 so

215
00:08:18,620 --> 00:08:22,190
python 3 is not a distribution python 3

216
00:08:20,240 --> 00:08:23,449
z is a standard so python is an

217
00:08:22,190 --> 00:08:25,520
interpreted language and this is

218
00:08:23,449 --> 00:08:29,569
actually a good segue why all Python is

219
00:08:25,520 --> 00:08:31,430
is is a file as a set of files so this

220
00:08:29,569 --> 00:08:33,199
file this text file is Python it's

221
00:08:31,430 --> 00:08:34,698
written in the Python standard syntax

222
00:08:33,198 --> 00:08:36,769
now there are there are numerous

223
00:08:34,698 --> 00:08:38,328
interpreters for Python there's there's

224
00:08:36,769 --> 00:08:39,679
the standard Python it's called cytha

225
00:08:38,328 --> 00:08:41,088
see python or so I thought that's

226
00:08:39,679 --> 00:08:42,978
usually what 99% of people are talking

227
00:08:41,089 --> 00:08:44,269
about but there's this thing that's

228
00:08:42,979 --> 00:08:45,199
called PI pi which is a Python

229
00:08:44,269 --> 00:08:46,430
interpreter for Python there's

230
00:08:45,199 --> 00:08:49,550
ironpython which is a c-sharp

231
00:08:46,430 --> 00:08:51,620
interpreter for python so keynote python

232
00:08:49,550 --> 00:08:54,479
is an interpreted language and a lot of

233
00:08:51,620 --> 00:08:57,180
people make interpreters C Python

234
00:08:54,480 --> 00:08:58,320
is the RC Python is the most common it's

235
00:08:57,180 --> 00:08:59,880
what most people talk about when they

236
00:08:58,320 --> 00:09:02,279
say Python so when you write Python

237
00:08:59,880 --> 00:09:03,689
you're basically writing a text file and

238
00:09:02,279 --> 00:09:05,550
then you're asking HR pro to interpret

239
00:09:03,690 --> 00:09:06,899
it I am not using the default Mac

240
00:09:05,550 --> 00:09:08,339
interpreter I'm using an interpreter

241
00:09:06,899 --> 00:09:08,850
that I installed because that's the one

242
00:09:08,339 --> 00:09:11,130
I like

243
00:09:08,850 --> 00:09:13,380
I that doesn't matter if you're using

244
00:09:11,130 --> 00:09:15,449
was that I'm sorry

245
00:09:13,380 --> 00:09:16,589
I use the anakata distribution because

246
00:09:15,449 --> 00:09:17,069
it's real it works for lower for data

247
00:09:16,589 --> 00:09:22,589
science

248
00:09:17,070 --> 00:09:23,670
I just installed it's about SH file and

249
00:09:22,589 --> 00:09:26,010
it's just as alt but it does all its

250
00:09:23,670 --> 00:09:28,620
magic to take over my computer so we'll

251
00:09:26,010 --> 00:09:30,360
go with it for other terminal magic and

252
00:09:28,620 --> 00:09:32,880
this is how I'm gonna run the top the

253
00:09:30,360 --> 00:09:34,410
bottom one is gonna be me in a vim

254
00:09:32,880 --> 00:09:36,120
so vim is just a text editor it's just

255
00:09:34,410 --> 00:09:38,670
like notepad plus plus or your notepad

256
00:09:36,120 --> 00:09:40,500
or atom or whatever you want to use the

257
00:09:38,670 --> 00:09:41,969
top one is gonna be the bash shell where

258
00:09:40,500 --> 00:09:45,720
I'm actually gonna run this stuff so

259
00:09:41,970 --> 00:09:47,970
Python runs in 1:1 and of numerous ways

260
00:09:45,720 --> 00:09:49,230
the one that's heat that I'm in the

261
00:09:47,970 --> 00:09:52,620
InfoSec community that's probably most

262
00:09:49,230 --> 00:09:54,540
useful is you just type in Python oh one

263
00:09:52,620 --> 00:09:57,000
and then you type in your file and you

264
00:09:54,540 --> 00:09:59,689
hit enter and it'll actually run the

265
00:09:57,000 --> 00:10:02,730
file so if I pull up the file up below

266
00:09:59,690 --> 00:10:05,399
all I'm doing here is I'm hacking Canyon

267
00:10:02,730 --> 00:10:06,569
on my son my sequel and that's what

268
00:10:05,399 --> 00:10:08,790
happened what's happening

269
00:10:06,569 --> 00:10:11,639
Python runs this one command so that's

270
00:10:08,790 --> 00:10:12,660
your first Python program alright so

271
00:10:11,639 --> 00:10:14,069
we're gonna start doing now is we're

272
00:10:12,660 --> 00:10:15,600
gonna start building it up the print

273
00:10:14,069 --> 00:10:19,260
command you know cool you can print

274
00:10:15,600 --> 00:10:20,399
stuff to terminal pretty boring so we're

275
00:10:19,260 --> 00:10:22,620
gonna be sticking with the print command

276
00:10:20,399 --> 00:10:24,779
for awhile and they'll slap it out later

277
00:10:22,620 --> 00:10:26,220
to show you how Brutes or it works so

278
00:10:24,779 --> 00:10:32,240
we're going to talk about datatypes next

279
00:10:26,220 --> 00:10:32,240
so vim go to complete doesn't work

280
00:10:39,810 --> 00:10:44,319
No

281
00:10:41,310 --> 00:10:44,979
all right life cutting off to a great

282
00:10:44,320 --> 00:10:47,230
start

283
00:10:44,980 --> 00:10:48,310
all right Python has a lot of data types

284
00:10:47,230 --> 00:10:50,560
the first thing you should learn about

285
00:10:48,310 --> 00:10:52,599
Python if you're gonna go do it is learn

286
00:10:50,560 --> 00:10:54,430
about all the ways you can store data in

287
00:10:52,600 --> 00:10:57,040
python in this talk we're going to be

288
00:10:54,430 --> 00:10:58,800
covering strings in dictionaries and

289
00:10:57,040 --> 00:11:01,839
integers but python literally as

290
00:10:58,800 --> 00:11:03,339
thousands of things if you're if you're

291
00:11:01,840 --> 00:11:04,690
a computer nerd I'm gonna say the thing

292
00:11:03,340 --> 00:11:06,040
that pipe everything in Python is an

293
00:11:04,690 --> 00:11:07,630
object so if that means something to you

294
00:11:06,040 --> 00:11:08,640
then cool you understand if it doesn't

295
00:11:07,630 --> 00:11:10,870
then don't worry about it that's a

296
00:11:08,640 --> 00:11:13,090
far-out thing but it essentially means

297
00:11:10,870 --> 00:11:15,700
that things that Python act certain ways

298
00:11:13,090 --> 00:11:16,480
so we have two things here we have a

299
00:11:15,700 --> 00:11:18,100
list

300
00:11:16,480 --> 00:11:19,720
oops probably won't don't want to do

301
00:11:18,100 --> 00:11:22,630
that we have a list and then we also

302
00:11:19,720 --> 00:11:24,130
have a dictionary a list is just like a

303
00:11:22,630 --> 00:11:25,810
shell for you going you got the first

304
00:11:24,130 --> 00:11:28,060
shelf you've got the second shelf

305
00:11:25,810 --> 00:11:29,859
dictionaries are like lookup values and

306
00:11:28,060 --> 00:11:33,189
to demonstrate that to you guys real

307
00:11:29,860 --> 00:11:34,180
quick I'm gonna fire up a Python

308
00:11:33,190 --> 00:11:37,030
interpreter and I'm just gonna do it

309
00:11:34,180 --> 00:11:38,349
live so I let's say a equals and then

310
00:11:37,030 --> 00:11:40,000
I'll you shot as an example probably

311
00:11:38,350 --> 00:11:43,900
shot as an example a lot I use Muriel as

312
00:11:40,000 --> 00:11:46,600
an example - oops all right well I

313
00:11:43,900 --> 00:11:48,880
missed I went up with a list you index

314
00:11:46,600 --> 00:11:50,860
it by you grab things out by index so

315
00:11:48,880 --> 00:11:53,589
there's Python is 0 indexed when I type

316
00:11:50,860 --> 00:11:55,930
in a or a 0 I get the first thing on the

317
00:11:53,589 --> 00:11:56,610
list when I type in a 1 I get a second

318
00:11:55,930 --> 00:11:59,260
thing on the list

319
00:11:56,610 --> 00:12:00,520
the other thing is on supports and as

320
00:11:59,260 --> 00:12:02,380
frequently using boots phrase the thing

321
00:12:00,520 --> 00:12:03,430
called dictionaries so we'll make be and

322
00:12:02,380 --> 00:12:09,430
we'll assign it to dictionary and we'll

323
00:12:03,430 --> 00:12:16,900
say we'll map 1 2 5 and we'll map for no

324
00:12:09,430 --> 00:12:18,819
no 20 well just type in 20 and now with

325
00:12:16,900 --> 00:12:20,949
a dictionary I grab things out when I

326
00:12:18,820 --> 00:12:22,330
type in a 1 I get the 5 but not because

327
00:12:20,950 --> 00:12:23,500
it's the first thing it's because it's

328
00:12:22,330 --> 00:12:26,260
the thing that's mapped to it and if I

329
00:12:23,500 --> 00:12:27,700
type in 4 I end up getting 20 and I can

330
00:12:26,260 --> 00:12:31,569
actually create new keys so if I want to

331
00:12:27,700 --> 00:12:35,950
say shell con for instance and I want to

332
00:12:31,570 --> 00:12:40,990
sign that to conference now I can grab

333
00:12:35,950 --> 00:12:44,080
out conference shell con and my

334
00:12:40,990 --> 00:12:46,570
dictionary is updated with chalk on so

335
00:12:44,080 --> 00:12:48,940
lists and dictionaries super super handy

336
00:12:46,570 --> 00:12:50,800
used all over the place and

337
00:12:48,940 --> 00:12:53,500
the point I want to make is I put I put

338
00:12:50,800 --> 00:12:55,750
like links to examples in brute spray

339
00:12:53,500 --> 00:12:56,770
for everything I'm going for so you can

340
00:12:55,750 --> 00:12:58,810
see where it's being used in a

341
00:12:56,770 --> 00:13:02,350
full-blown tool you can see the basics

342
00:12:58,810 --> 00:13:12,219
you can see where its weirdest so what

343
00:13:02,350 --> 00:13:14,320
we're going to do here so what's

344
00:13:12,220 --> 00:13:15,700
happening here is we want hack a couple

345
00:13:14,320 --> 00:13:17,740
people we're gonna hack Canyon this is a

346
00:13:15,700 --> 00:13:20,260
jerk we're gonna also gonna hacks artis

347
00:13:17,740 --> 00:13:22,330
eq0 who's also a huge jerk so we don't

348
00:13:20,260 --> 00:13:24,790
like you do these people we want to get

349
00:13:22,330 --> 00:13:26,230
in and wreck their sequel databases and

350
00:13:24,790 --> 00:13:28,930
email us or whatever we end up finding

351
00:13:26,230 --> 00:13:30,160
on their own web scam so we have we have

352
00:13:28,930 --> 00:13:33,189
two people on the list because we're

353
00:13:30,160 --> 00:13:34,870
going to have two people and then we

354
00:13:33,190 --> 00:13:37,480
have two protocols we have Postgres and

355
00:13:34,870 --> 00:13:39,610
we have we have pop3 now it gets in

356
00:13:37,480 --> 00:13:41,110
Postgres is basically version 2 sequel

357
00:13:39,610 --> 00:13:43,060
so when I type in Postgres I want brutes

358
00:13:41,110 --> 00:13:45,820
Breda just hit it with a bunch of sequel

359
00:13:43,060 --> 00:13:47,020
commands and if I if I type in pop3 that

360
00:13:45,820 --> 00:13:50,320
basically is just an email address so I

361
00:13:47,020 --> 00:13:52,860
want the hack somebody's email so when I

362
00:13:50,320 --> 00:13:52,860
run the script

363
00:13:55,260 --> 00:14:02,470
Paisano - yeah there you get the output

364
00:13:59,680 --> 00:14:06,099
the first one printing hacking we're

365
00:14:02,470 --> 00:14:08,440
Canyon and then hacking RTI gz-20 that's

366
00:14:06,100 --> 00:14:10,780
from the list right here so python has

367
00:14:08,440 --> 00:14:12,730
strings and you can mash strings

368
00:14:10,780 --> 00:14:14,770
together by saying hacking + and you've

369
00:14:12,730 --> 00:14:17,830
got me and then hacking + the first

370
00:14:14,770 --> 00:14:20,920
person RTC q0 and you got protocols

371
00:14:17,830 --> 00:14:23,820
hacking on pop3 so here we say hacking

372
00:14:20,920 --> 00:14:29,709
person at the index 0 protocol pop3

373
00:14:23,820 --> 00:14:32,670
that's basic data types in Python all

374
00:14:29,710 --> 00:14:32,670
right let's go to loose

375
00:14:34,779 --> 00:14:38,990
all right so it's annoying to type in

376
00:14:37,550 --> 00:14:42,050
all that stuff over and over again so

377
00:14:38,990 --> 00:14:44,569
Python supports loops while loop so

378
00:14:42,050 --> 00:14:46,699
we're just gonna cover for loops so we

379
00:14:44,569 --> 00:14:48,349
want to say for person and people just

380
00:14:46,699 --> 00:14:49,490
tack them so you can imagine if you had

381
00:14:48,350 --> 00:14:50,990
a list of hundred targets you literally

382
00:14:49,490 --> 00:14:53,240
don't want to type in the same thing a

383
00:14:50,990 --> 00:14:54,529
hundred times after your email hack that

384
00:14:53,240 --> 00:14:56,209
email hack this person's email hack mask

385
00:14:54,529 --> 00:14:57,499
person's email it's way easier to get a

386
00:14:56,209 --> 00:14:59,149
list of people and then just say for

387
00:14:57,499 --> 00:15:03,170
every person in my list just hack each

388
00:14:59,149 --> 00:15:04,399
one Python is a really it's got a lot of

389
00:15:03,170 --> 00:15:05,660
what's called syntactic sugar you don't

390
00:15:04,399 --> 00:15:07,160
have to do all the if you guys ever

391
00:15:05,660 --> 00:15:08,420
didn't see your any lower-level

392
00:15:07,160 --> 00:15:10,670
languages you have to be like index

393
00:15:08,420 --> 00:15:12,410
pointers and it's a whole ordeal with

394
00:15:10,670 --> 00:15:14,599
Python you just say for person and

395
00:15:12,410 --> 00:15:18,410
people which is my list right here let's

396
00:15:14,600 --> 00:15:21,499
hack them all Python also supports a

397
00:15:18,410 --> 00:15:23,990
fancier syntax and what it does is it's

398
00:15:21,499 --> 00:15:26,089
called it's called unpacking over

399
00:15:23,990 --> 00:15:27,470
iteration if I pass it a list of list

400
00:15:26,089 --> 00:15:28,579
because you can do that in programming

401
00:15:27,470 --> 00:15:29,779
you can have shelves and then you can

402
00:15:28,579 --> 00:15:32,029
have more shells and more cells like a

403
00:15:29,779 --> 00:15:34,040
Russian nesting doll you say for person

404
00:15:32,029 --> 00:15:35,720
and protocol and people protocol hack

405
00:15:34,040 --> 00:15:37,339
that person with protocol so what Python

406
00:15:35,720 --> 00:15:38,779
does is it sees that it's got this thing

407
00:15:37,339 --> 00:15:40,339
and then this thing is this oh this is

408
00:15:38,779 --> 00:15:41,899
the person and this thing is the

409
00:15:40,339 --> 00:15:43,730
protocol because ever sign those two

410
00:15:41,899 --> 00:15:45,769
here and then it over here you've got a

411
00:15:43,730 --> 00:15:47,269
person in a protocol print hacking that

412
00:15:45,769 --> 00:15:51,379
person and hacking with that protocol

413
00:15:47,269 --> 00:15:52,759
and then this is a very advanced one if

414
00:15:51,379 --> 00:15:53,689
this one is confusing don't worry about

415
00:15:52,759 --> 00:15:55,759
it but this is called the list

416
00:15:53,689 --> 00:15:57,110
comprehension Python then supports

417
00:15:55,759 --> 00:16:02,540
another layer where you can do this all

418
00:15:57,110 --> 00:16:14,839
in one line so when I run this yeah

419
00:16:02,540 --> 00:16:18,139
questions okay no three all right so up

420
00:16:14,839 --> 00:16:21,170
here it ran it three times or so yeah so

421
00:16:18,139 --> 00:16:22,399
you got one all right yeah one two three

422
00:16:21,170 --> 00:16:25,670
and then here it is just doing the

423
00:16:22,399 --> 00:16:27,319
listen of hacking that was um the list

424
00:16:25,670 --> 00:16:29,389
comprehension so you you can see with

425
00:16:27,319 --> 00:16:31,309
one line it printed this out twice so

426
00:16:29,389 --> 00:16:33,649
here's one line or two lines but it's

427
00:16:31,309 --> 00:16:35,240
it's iterating over this array and then

428
00:16:33,649 --> 00:16:36,740
over here it's also iterating over this

429
00:16:35,240 --> 00:16:39,230
array so those are four loops in Python

430
00:16:36,740 --> 00:16:43,059
it lets us just do a thing over and over

431
00:16:39,230 --> 00:16:43,059
and over again very very handling

432
00:16:44,300 --> 00:16:53,740
all right so we're gonna build on four

433
00:16:45,740 --> 00:16:53,740
loops all right

434
00:16:55,080 --> 00:17:03,390
yeah yeah I'm ready there all right

435
00:17:01,020 --> 00:17:04,950
another basic programming construct you

436
00:17:03,390 --> 00:17:08,160
don't always want to do the same thing

437
00:17:04,950 --> 00:17:09,870
for every line of code you want to do

438
00:17:08,160 --> 00:17:11,970
what's called conditional flow so if

439
00:17:09,869 --> 00:17:14,729
something if something is happening or

440
00:17:11,970 --> 00:17:17,280
if a condition then do another thing so

441
00:17:14,730 --> 00:17:21,839
we have our two data structures so it's

442
00:17:17,280 --> 00:17:23,160
this one anyone want to take a guess all

443
00:17:21,839 --> 00:17:26,159
right one person is paying attention to

444
00:17:23,160 --> 00:17:33,290
the top anyone want to grab the second

445
00:17:26,160 --> 00:17:33,290
one yes

446
00:17:40,440 --> 00:17:43,679
lissa list so we have both our data

447
00:17:42,299 --> 00:17:45,779
structures to store everything we wanted

448
00:17:43,679 --> 00:17:47,399
you so we have two protocols that we

449
00:17:45,779 --> 00:17:49,169
want to use we have three things we want

450
00:17:47,399 --> 00:17:51,870
to have you want to hack Canyon on in

451
00:17:49,169 --> 00:17:54,480
sequel one hack RTC q0 and pop3 and then

452
00:17:51,870 --> 00:17:56,820
we want to hack our TZ on its sequel

453
00:17:54,480 --> 00:17:57,809
database as well however we really don't

454
00:17:56,820 --> 00:17:59,820
like our T's dq0

455
00:17:57,809 --> 00:18:01,769
he's really really a jerk so when we get

456
00:17:59,820 --> 00:18:04,009
to RTC Q zero we want to hack them even

457
00:18:01,769 --> 00:18:07,309
harder than the last time we tried

458
00:18:04,009 --> 00:18:09,960
because you know we're gonna we just

459
00:18:07,309 --> 00:18:10,559
user when you meet him you know exactly

460
00:18:09,960 --> 00:18:11,970
what I'm talking about

461
00:18:10,559 --> 00:18:18,000
he's a piece of walking-around good you

462
00:18:11,970 --> 00:18:19,440
can go tell him I said all this so this

463
00:18:18,000 --> 00:18:20,610
is this is all that's happening when we

464
00:18:19,440 --> 00:18:22,679
were you trying to add Canyon just

465
00:18:20,610 --> 00:18:24,330
normal day-to-day stuff but once you get

466
00:18:22,679 --> 00:18:26,279
to RTC to zero we try to hack them even

467
00:18:24,330 --> 00:18:28,439
harder because we say if the person is

468
00:18:26,279 --> 00:18:29,970
our TZ q zero with a double equal sign

469
00:18:28,440 --> 00:18:31,169
then we're gonna run this line of code

470
00:18:29,970 --> 00:18:34,799
otherwise we're going to run this line

471
00:18:31,169 --> 00:18:36,240
of code so Python single equals it's

472
00:18:34,799 --> 00:18:37,620
called what's called an assignment

473
00:18:36,240 --> 00:18:40,169
operator you're assigning a thing to a

474
00:18:37,620 --> 00:18:48,000
point in memory and double equals is the

475
00:18:40,169 --> 00:18:50,580
Equality check pythons because Python

476
00:18:48,000 --> 00:18:51,690
was designed and I don't wanna say

477
00:18:50,580 --> 00:18:53,100
something someone the other guy's smart

478
00:18:51,690 --> 00:18:54,120
too but the other guy made a mistake and

479
00:18:53,100 --> 00:18:55,230
then you can't break the internet so

480
00:18:54,120 --> 00:18:56,820
then you have to just hack around layers

481
00:18:55,230 --> 00:18:59,039
of crap on layers of crap which is why

482
00:18:56,820 --> 00:19:00,299
JavaScript is triple equals javascript

483
00:18:59,039 --> 00:19:01,559
has double equals but try it and watch

484
00:19:00,299 --> 00:19:03,000
all your code fill because it doesn't

485
00:19:01,559 --> 00:19:04,289
work the way you want it to work it does

486
00:19:03,000 --> 00:19:05,399
triple equals because they realize they

487
00:19:04,289 --> 00:19:08,129
messed up but they couldn't deprecated

488
00:19:05,399 --> 00:19:10,469
the entire Internet Python decided to

489
00:19:08,129 --> 00:19:11,668
deprecated version two and sort of wash

490
00:19:10,470 --> 00:19:18,990
away two mistakes which is why there's

491
00:19:11,669 --> 00:19:20,100
Python 3 so yeah that is an excellent

492
00:19:18,990 --> 00:19:23,029
question you want to Reese is that was a

493
00:19:20,100 --> 00:19:23,029
really good one actually good too

494
00:19:26,430 --> 00:19:34,000
yeah love it so yeah I quality checks a

495
00:19:30,640 --> 00:19:35,530
thing in programming languages all right

496
00:19:34,000 --> 00:19:36,520
and I know these ones are pretty boring

497
00:19:35,530 --> 00:19:38,500
we're we're just going through very

498
00:19:36,520 --> 00:19:39,850
basic language constructs and then it's

499
00:19:38,500 --> 00:19:45,640
gonna ramp up pretty quick once we get

500
00:19:39,850 --> 00:19:47,649
to the fun stuff okay so we've been

501
00:19:45,640 --> 00:19:50,050
we've been putting strings together by

502
00:19:47,650 --> 00:19:52,560
by doing pluses oops I don't want to

503
00:19:50,050 --> 00:19:53,919
break my code in the middle of the talk

504
00:19:52,560 --> 00:19:56,409
all right

505
00:19:53,920 --> 00:20:01,840
so you can put strings together by

506
00:19:56,410 --> 00:20:03,100
saying hello and then plus something but

507
00:20:01,840 --> 00:20:05,139
this makes you look like a noob in

508
00:20:03,100 --> 00:20:07,929
Python I don't want any of you guys to

509
00:20:05,140 --> 00:20:09,490
write code and people judge you so the

510
00:20:07,930 --> 00:20:11,140
actually the better way to do it in

511
00:20:09,490 --> 00:20:12,880
Python for numerous reasons is do what's

512
00:20:11,140 --> 00:20:15,880
called the string interpolation so you

513
00:20:12,880 --> 00:20:18,460
do hello you put in two braces like this

514
00:20:15,880 --> 00:20:21,460
and then you put dot format and then you

515
00:20:18,460 --> 00:20:26,140
say I don't know thing and then what

516
00:20:21,460 --> 00:20:27,630
Python does is it it takes your argument

517
00:20:26,140 --> 00:20:29,560
and it puts it right into the string

518
00:20:27,630 --> 00:20:33,190
does anyone remember what I said about

519
00:20:29,560 --> 00:20:37,990
Python everything in Python yes it's an

520
00:20:33,190 --> 00:20:39,430
object somebody who said that yes

521
00:20:37,990 --> 00:20:41,590
everything in Python is an object I'm

522
00:20:39,430 --> 00:20:43,210
sorry everything in Python is an object

523
00:20:41,590 --> 00:20:44,169
so the thing is in other languages you

524
00:20:43,210 --> 00:20:45,360
have what's called primitives which

525
00:20:44,170 --> 00:20:48,250
don't actually do anything

526
00:20:45,360 --> 00:20:49,689
Python everything has methods has the

527
00:20:48,250 --> 00:20:51,160
ability everything definitely has

528
00:20:49,690 --> 00:20:52,330
methods on it so we can we can do

529
00:20:51,160 --> 00:20:54,160
another one I'll just for hello again

530
00:20:52,330 --> 00:20:56,350
and now I've put two things in there so

531
00:20:54,160 --> 00:20:58,590
string interpolation is the way to way

532
00:20:56,350 --> 00:21:00,750
to smash strings together in Python

533
00:20:58,590 --> 00:21:02,860
definitely use that don't use pluses

534
00:21:00,750 --> 00:21:03,970
this is actually not in brute spray but

535
00:21:02,860 --> 00:21:05,889
it actually should be in good string I

536
00:21:03,970 --> 00:21:11,200
didn't I got lazy after a while and stop

537
00:21:05,890 --> 00:21:12,430
making peers so no the technical reasons

538
00:21:11,200 --> 00:21:14,470
if you wanna be really into it is it's

539
00:21:12,430 --> 00:21:15,670
it's safer and it's actually faster

540
00:21:14,470 --> 00:21:17,800
under the hood d string interpolation

541
00:21:15,670 --> 00:21:19,660
and as a programmer it's actually nicer

542
00:21:17,800 --> 00:21:20,860
because if you have if you want to put

543
00:21:19,660 --> 00:21:22,150
numbers into a string you'd have to

544
00:21:20,860 --> 00:21:24,760
you'd have to cast them and do all this

545
00:21:22,150 --> 00:21:27,430
crap so just to show you here to make

546
00:21:24,760 --> 00:21:29,890
the point if I do a hello

547
00:21:27,430 --> 00:21:31,570
and then I do plus two Python says what

548
00:21:29,890 --> 00:21:33,250
the hell can't convert into string and

549
00:21:31,570 --> 00:21:34,240
plus Lee this is good and this is

550
00:21:33,250 --> 00:21:35,320
actually something to note because we're

551
00:21:34,240 --> 00:21:36,640
gonna cover in a second this is called

552
00:21:35,320 --> 00:21:37,120
an exception where your program is

553
00:21:36,640 --> 00:21:38,650
telling you

554
00:21:37,120 --> 00:21:40,239
can't do the thing you're asking it to

555
00:21:38,650 --> 00:21:41,290
do because it makes no sense Python

556
00:21:40,240 --> 00:21:43,030
doesn't know how to add literally the

557
00:21:41,290 --> 00:21:46,059
number two to a string but if I

558
00:21:43,030 --> 00:21:48,879
converted this to a string then it makes

559
00:21:46,059 --> 00:21:50,710
sense but the nice thing with dot format

560
00:21:48,880 --> 00:21:54,670
is that Python just does all that stuff

561
00:21:50,710 --> 00:21:57,540
for you so there there is both technical

562
00:21:54,670 --> 00:22:00,309
reasons hello

563
00:21:57,540 --> 00:22:02,860
there's technical reasons and niceness

564
00:22:00,309 --> 00:22:04,540
reasons to use string interpolation so

565
00:22:02,860 --> 00:22:05,860
that's string interpolation that's what

566
00:22:04,540 --> 00:22:08,290
you're going to see the rest of this

567
00:22:05,860 --> 00:22:10,990
this talk is you're not going to see the

568
00:22:08,290 --> 00:22:12,700
pluses anymore you're going to see this

569
00:22:10,990 --> 00:22:14,530
string interpolation zero just means

570
00:22:12,700 --> 00:22:16,720
first index and and one means second

571
00:22:14,530 --> 00:22:19,090
index so that's all the zeros and the

572
00:22:16,720 --> 00:22:20,440
ones are doing and so put person persons

573
00:22:19,090 --> 00:22:22,330
the first argument put it at zero place

574
00:22:20,440 --> 00:22:26,309
protocols the second argument put it in

575
00:22:22,330 --> 00:22:32,770
the first place and to prove that to you

576
00:22:26,309 --> 00:22:34,480
yeah yeah that's actually that's a good

577
00:22:32,770 --> 00:22:37,629
yeah we can do that and I'll actually

578
00:22:34,480 --> 00:22:42,550
I'll do a tricky thing and I'll show you

579
00:22:37,630 --> 00:22:44,320
what happens um so Python Hekmat py so

580
00:22:42,550 --> 00:22:45,610
here we go hacking same deals before we

581
00:22:44,320 --> 00:22:46,659
didn't really change the protocol all we

582
00:22:45,610 --> 00:22:56,110
did was change our strings

583
00:22:46,660 --> 00:22:57,429
oops 20 G so the question was can we put

584
00:22:56,110 --> 00:22:59,110
a list in yeah you can put a list in if

585
00:22:57,429 --> 00:23:02,190
you want yeah if we change this to a

586
00:22:59,110 --> 00:23:06,550
list object because this is one object

587
00:23:02,190 --> 00:23:09,340
I'll have to actually take this out and

588
00:23:06,550 --> 00:23:12,370
I'll show you what it looks like so now

589
00:23:09,340 --> 00:23:14,500
because it's it's one object Python only

590
00:23:12,370 --> 00:23:15,969
has one place to put it and it'll it'll

591
00:23:14,500 --> 00:23:18,240
put the list right here so it's just

592
00:23:15,970 --> 00:23:18,240
doing

593
00:23:23,609 --> 00:23:27,879
Python is just taking your your object

594
00:23:26,080 --> 00:23:30,509
and then smashing it into a place then

595
00:23:27,879 --> 00:23:30,509
answer the question Oh

596
00:23:34,029 --> 00:23:45,009
with the dot format no this is these

597
00:23:36,999 --> 00:23:47,289
indices just correspond to the T in this

598
00:23:45,009 --> 00:23:48,489
particular method it looks at the

599
00:23:47,289 --> 00:23:49,690
argument order and that's where it

600
00:23:48,489 --> 00:23:51,450
places things it's just the way this

601
00:23:49,690 --> 00:23:53,049
method works that's all

602
00:23:51,450 --> 00:24:14,919
excellent question did I give you

603
00:23:53,049 --> 00:24:19,049
something recent so go just do basic

604
00:24:14,919 --> 00:24:19,049
language constructs I know not exciting

605
00:24:24,389 --> 00:24:34,539
so if you mess things up it's not fun

606
00:24:32,169 --> 00:24:36,159
he's nice it does a lot of things for

607
00:24:34,539 --> 00:24:37,960
you you have to declare variables like

608
00:24:36,159 --> 00:24:39,009
magic but it's not a completely you guys

609
00:24:37,960 --> 00:24:42,279
right so pretty

610
00:24:39,009 --> 00:24:46,769
softly a baby rules that make sense so

611
00:24:42,279 --> 00:24:46,769
it's example let's say I'm in dictionary

612
00:24:46,840 --> 00:24:52,139
I'll say p1 and then

613
00:24:53,510 --> 00:25:04,820
well I want to grab one right but if I

614
00:25:02,270 --> 00:25:06,770
try to get p2 I get what's called an

615
00:25:04,820 --> 00:25:07,159
exception python is telling you

616
00:25:06,770 --> 00:25:09,710
something

617
00:25:07,160 --> 00:25:12,080
I'm getting a Pierre which is saying it

618
00:25:09,710 --> 00:25:14,330
can't find the key exceptions halt your

619
00:25:12,080 --> 00:25:16,820
programs execution so when it's time to

620
00:25:14,330 --> 00:25:20,449
completely stop this is to be annoying

621
00:25:16,820 --> 00:25:22,668
if you turn back something if if pilot

622
00:25:20,450 --> 00:25:24,710
makes a call present database and runs

623
00:25:22,669 --> 00:25:26,210
on air if you're really annoying if you

624
00:25:24,710 --> 00:25:27,049
didn't try and hack the other nineteen

625
00:25:26,210 --> 00:25:28,640
nineties as well

626
00:25:27,049 --> 00:25:31,970
you think you're on a strict overnight

627
00:25:28,640 --> 00:25:33,919
it stops and then every year this is

628
00:25:31,970 --> 00:25:35,090
happened to me I get lazy sometimes I

629
00:25:33,919 --> 00:25:36,679
don't put it into second hand alone I

630
00:25:35,090 --> 00:25:39,730
think I'm running a thing over night and

631
00:25:36,679 --> 00:25:39,730
I'm going to be ready for boss tomorrow

632
00:25:42,669 --> 00:25:48,590
when I tell my boss my works not done so

633
00:25:45,440 --> 00:25:49,730
exactly I'm learning helps you tell if I

634
00:25:48,590 --> 00:25:51,949
don't want to do what it runs a little

635
00:25:49,730 --> 00:25:53,570
problem so in our particular case for

636
00:25:51,950 --> 00:25:55,070
two protocols that you defined support

637
00:25:53,570 --> 00:25:57,379
redefined what expression you find top

638
00:25:55,070 --> 00:26:00,620
three for sequel an email but let's say

639
00:25:57,380 --> 00:26:03,980
you also want to hang artist eq's sister

640
00:26:00,620 --> 00:26:05,780
phone just tell them well we don't can

641
00:26:03,980 --> 00:26:08,320
act on that support it so you're unhappy

642
00:26:05,780 --> 00:26:08,320
why

643
00:26:14,870 --> 00:26:19,039
when I run this my partner doesn't

644
00:26:17,120 --> 00:26:21,530
finish running and it stops and it hit

645
00:26:19,039 --> 00:26:23,150
Stella it just says I can't do anything

646
00:26:21,530 --> 00:26:25,428
practice on them you can see that it it

647
00:26:23,150 --> 00:26:28,160
through email so pretty sticky for my

648
00:26:25,429 --> 00:26:30,530
pop green but then just stop some it in

649
00:26:28,160 --> 00:26:32,840
this step you want actually happy like

650
00:26:30,530 --> 00:26:36,580
you see p0 even though we don't have a

651
00:26:32,840 --> 00:26:36,580
ton that limitation yet so

652
00:26:46,690 --> 00:26:56,879
so we do I'm gonna conference line outs

653
00:26:49,029 --> 00:27:00,190
to shout explicitly in Python

654
00:26:56,879 --> 00:27:01,918
triple quotes and then you block them to

655
00:27:00,190 --> 00:27:08,440
pretend and single line comments are

656
00:27:01,919 --> 00:27:09,489
complex so the program or execution so

657
00:27:08,440 --> 00:27:13,119
what I'm going to use it to put a

658
00:27:09,489 --> 00:27:15,909
comment right under protocol so Python

659
00:27:13,119 --> 00:27:16,090
doesn't rain right now I'm gonna run to

660
00:27:15,909 --> 00:27:17,799
now

661
00:27:16,090 --> 00:27:22,988
sorry now I'm going to run this and

662
00:27:17,799 --> 00:27:25,749
you'll see that it works it's here's the

663
00:27:22,989 --> 00:27:28,210
trick what I'm saying is try something

664
00:27:25,749 --> 00:27:34,869
but if it doesn't work any exception

665
00:27:28,210 --> 00:27:36,820
then print out print something else I'm

666
00:27:34,869 --> 00:27:39,459
saying do this but if you get any sort

667
00:27:36,820 --> 00:27:41,710
of problem then just run this and keep

668
00:27:39,460 --> 00:27:43,389
moving on so I'm gonna try printing

669
00:27:41,710 --> 00:27:45,549
protocol telnet but I'll get a key error

670
00:27:43,389 --> 00:27:47,168
you guys saw before and so if I get a

671
00:27:45,549 --> 00:27:48,940
key here say just say telnet is not an

672
00:27:47,169 --> 00:27:51,429
option and then just keep going through

673
00:27:48,940 --> 00:27:52,960
my day so we're gonna try hacking some

674
00:27:51,429 --> 00:27:54,999
on something we're gonna try aking

675
00:27:52,960 --> 00:27:56,859
Canyon on sequel it works we're gonna

676
00:27:54,999 --> 00:27:59,080
try hacking our tcq on email and it

677
00:27:56,859 --> 00:28:00,879
works we're gonna try hacking our tzq on

678
00:27:59,080 --> 00:28:02,349
telnet through our for loop but it's

679
00:28:00,879 --> 00:28:05,709
gonna say protocol telnet is not an

680
00:28:02,349 --> 00:28:09,158
option falling back or failed on hack or

681
00:28:05,710 --> 00:28:11,109
failed hack on Artie's eq0 that's what's

682
00:28:09,159 --> 00:28:13,599
called exception control it's very handy

683
00:28:11,109 --> 00:28:17,168
for dealing with problems in your in

684
00:28:13,599 --> 00:28:18,908
your program you say do this if you run

685
00:28:17,169 --> 00:28:22,059
an air don't worry about it keep moving

686
00:28:18,909 --> 00:28:23,349
on with all the other things exception

687
00:28:22,059 --> 00:28:24,668
handling is a little more of an advanced

688
00:28:23,349 --> 00:28:26,289
topic so there's any if there's any

689
00:28:24,669 --> 00:28:28,950
confusion please feel free to ask I'll

690
00:28:26,289 --> 00:28:28,950
pause for a second

691
00:28:33,390 --> 00:28:37,330
yes you can do that you can you can have

692
00:28:35,860 --> 00:28:40,510
a series of try so you can say try

693
00:28:37,330 --> 00:28:42,159
accept value err so try it if I get this

694
00:28:40,510 --> 00:28:44,890
error then do this if I get this area do

695
00:28:42,160 --> 00:28:47,770
that and then if I get this then keep

696
00:28:44,890 --> 00:28:49,510
going on so Python supports nesting

697
00:28:47,770 --> 00:28:51,790
track steps which is excellent it also

698
00:28:49,510 --> 00:28:53,260
supports multiple types of track accepts

699
00:28:51,790 --> 00:28:55,389
so a good example that I have at work

700
00:28:53,260 --> 00:28:58,540
I wouldn't when trying to talk to a

701
00:28:55,390 --> 00:28:59,560
database over over the network there's

702
00:28:58,540 --> 00:29:00,790
two things are happening right I have to

703
00:28:59,560 --> 00:29:02,260
go over a network so I could end up with

704
00:29:00,790 --> 00:29:04,120
a network error from my networking

705
00:29:02,260 --> 00:29:06,610
library and I could end up with a an

706
00:29:04,120 --> 00:29:07,929
error for the database itself so I say

707
00:29:06,610 --> 00:29:09,580
if I have a network error then just

708
00:29:07,930 --> 00:29:11,200
pause for five seconds and then just try

709
00:29:09,580 --> 00:29:12,610
again network has a faulty right if I

710
00:29:11,200 --> 00:29:14,530
end up with a database error in some

711
00:29:12,610 --> 00:29:16,090
cases were serious then I say stop doing

712
00:29:14,530 --> 00:29:18,250
everything and roll back all my database

713
00:29:16,090 --> 00:29:19,990
transactions because I want to make sure

714
00:29:18,250 --> 00:29:22,630
my for me with data integrity is a huge

715
00:29:19,990 --> 00:29:24,250
point as a data scientist so I capture

716
00:29:22,630 --> 00:29:26,680
the air in two ways I say network error

717
00:29:24,250 --> 00:29:28,120
just wait try again database here stop

718
00:29:26,680 --> 00:29:30,160
what you're doing undo everything and

719
00:29:28,120 --> 00:29:34,959
like send me an email and alert alert me

720
00:29:30,160 --> 00:29:35,920
that something went wrong so excellent

721
00:29:34,960 --> 00:29:36,280
question all right this is gonna be

722
00:29:35,920 --> 00:29:42,130
tricky

723
00:29:36,280 --> 00:29:43,810
oh yeah Python it it's that's another

724
00:29:42,130 --> 00:29:46,120
hint yeah it's another nice thing that

725
00:29:43,810 --> 00:29:48,220
the the Python code adds built-in so

726
00:29:46,120 --> 00:29:48,429
let's go to functions how much time do I

727
00:29:48,220 --> 00:29:51,250
have

728
00:29:48,430 --> 00:29:52,120
oh maybe a little close all right CD

729
00:29:51,250 --> 00:29:55,050
functions we're gonna go through

730
00:29:52,120 --> 00:29:55,050
functions pretty quickly then

731
00:30:03,389 --> 00:30:09,570
all right in programming and this is

732
00:30:06,419 --> 00:30:11,039
this is one thing full-blown programs do

733
00:30:09,570 --> 00:30:13,950
they don't usually write everything out

734
00:30:11,039 --> 00:30:15,299
in one long script which what is nice to

735
00:30:13,950 --> 00:30:17,190
do is put things into functions

736
00:30:15,299 --> 00:30:18,299
functions are just repeatable pieces of

737
00:30:17,190 --> 00:30:21,559
code that you can use over and over

738
00:30:18,299 --> 00:30:23,190
again so let me actually just print this

739
00:30:21,559 --> 00:30:25,079
modify this a little bit so it's a

740
00:30:23,190 --> 00:30:27,589
little more clear what I'm doing here is

741
00:30:25,079 --> 00:30:27,589
I'm saying

742
00:30:27,859 --> 00:30:34,168
so I'm saying to Python well there's two

743
00:30:32,669 --> 00:30:35,459
things there's protocols in these people

744
00:30:34,169 --> 00:30:37,229
you guys have seen this before but now

745
00:30:35,459 --> 00:30:40,049
here's the new syntax I'm saying define

746
00:30:37,229 --> 00:30:41,489
a function called people protocol and

747
00:30:40,049 --> 00:30:44,549
it's gonna take one argument

748
00:30:41,489 --> 00:30:46,320
it'll take something and then if I'm

749
00:30:44,549 --> 00:30:47,820
saying pone them then let's actually try

750
00:30:46,320 --> 00:30:49,739
and hack them I have a doc string in

751
00:30:47,820 --> 00:30:51,570
there just to say with this to us please

752
00:30:49,739 --> 00:30:54,659
write doc strings on your functions I

753
00:30:51,570 --> 00:30:57,208
know I say that and people will do it

754
00:30:54,659 --> 00:30:58,349
please do we have another function down

755
00:30:57,209 --> 00:30:59,579
here that's just gonna print the target

756
00:30:58,349 --> 00:31:00,749
so I'm doing I'm doing two things I'm

757
00:30:59,579 --> 00:31:02,369
saying this function is just gonna print

758
00:31:00,749 --> 00:31:03,839
two we want to hack I'm saying the other

759
00:31:02,369 --> 00:31:06,389
function is gonna actually hack the

760
00:31:03,839 --> 00:31:08,999
people so I sort of created my routines

761
00:31:06,389 --> 00:31:10,228
in these blocks of code an important

762
00:31:08,999 --> 00:31:11,729
point of my Python and I should have

763
00:31:10,229 --> 00:31:13,529
mention this earlier as well Python is

764
00:31:11,729 --> 00:31:15,509
whitespace indented so there's no curly

765
00:31:13,529 --> 00:31:19,049
braces the things you see in Java or C

766
00:31:15,509 --> 00:31:20,159
sharp or even JavaScript when you want

767
00:31:19,049 --> 00:31:22,320
to make a code block you put an

768
00:31:20,159 --> 00:31:24,059
indentation in so what I'm saying is the

769
00:31:22,320 --> 00:31:25,200
Python is this is a function here's all

770
00:31:24,059 --> 00:31:27,839
the code that's in the function by a

771
00:31:25,200 --> 00:31:29,579
single indentation the the for loop

772
00:31:27,839 --> 00:31:31,559
indentation is saying what it should

773
00:31:29,579 --> 00:31:33,869
what it should try to do in the for loop

774
00:31:31,559 --> 00:31:35,700
and the try indentation is saying what

775
00:31:33,869 --> 00:31:37,859
is to do if this try it fails so in

776
00:31:35,700 --> 00:31:39,419
Python that's how you control on the

777
00:31:37,859 --> 00:31:43,259
flow of the program or indicate to it

778
00:31:39,419 --> 00:31:45,419
what code is part of what block in this

779
00:31:43,259 --> 00:31:48,659
particular case what we're gonna do is

780
00:31:45,419 --> 00:31:51,899
we're gonna we're gonna just run these

781
00:31:48,659 --> 00:31:53,009
functions so when I run this I just

782
00:31:51,899 --> 00:31:55,018
print out the names of the people that

783
00:31:53,009 --> 00:31:56,249
are being hacked my next thing I say is

784
00:31:55,019 --> 00:31:57,989
actually just try and hack these people

785
00:31:56,249 --> 00:32:00,419
so now we're getting back to our hacking

786
00:31:57,989 --> 00:32:02,129
where we're getting a Kenyan and our tzq

787
00:32:00,419 --> 00:32:03,869
zero and we're running the old hacking

788
00:32:02,129 --> 00:32:05,428
code and then I'm telling it to redo the

789
00:32:03,869 --> 00:32:07,139
print code and you see that I don't have

790
00:32:05,429 --> 00:32:09,029
to rewrite it again I just call print

791
00:32:07,139 --> 00:32:12,299
again and it'll just run the print so

792
00:32:09,029 --> 00:32:13,649
python syntax def method name method or

793
00:32:12,299 --> 00:32:15,299
function name and then the arguments you

794
00:32:13,649 --> 00:32:16,830
want to have to the function Python

795
00:32:15,299 --> 00:32:18,658
supports keyword arguments and

796
00:32:16,830 --> 00:32:20,129
social arguments if that means something

797
00:32:18,659 --> 00:32:22,010
to people if it doesn't don't worry

798
00:32:20,130 --> 00:32:24,090
about it you don't really need it for

799
00:32:22,010 --> 00:32:30,299
for brutes we're actually only with the

800
00:32:24,090 --> 00:32:31,350
babies Cupid arguments all right all

801
00:32:30,299 --> 00:32:33,179
right so we're gonna make it a little

802
00:32:31,350 --> 00:32:35,010
more interesting now and this is where

803
00:32:33,179 --> 00:32:37,320
we're sort of we're sorta moving past

804
00:32:35,010 --> 00:32:40,950
the Python basics and moving into some

805
00:32:37,320 --> 00:32:43,350
of the more and a specialized code that

806
00:32:40,950 --> 00:32:46,679
that's good for this application so as

807
00:32:43,350 --> 00:32:48,090
of now we've just been all we've been

808
00:32:46,679 --> 00:32:51,029
doing is telling Python to print things

809
00:32:48,090 --> 00:32:52,289
that's not really that exciting it we've

810
00:32:51,029 --> 00:32:55,799
just been working within the bounds of

811
00:32:52,289 --> 00:32:58,260
Python a really really handy use of

812
00:32:55,799 --> 00:33:03,720
Python is to tell the OS or other things

813
00:32:58,260 --> 00:33:05,580
to do things so in Python you can

814
00:33:03,720 --> 00:33:07,500
actually tell the the operating system

815
00:33:05,580 --> 00:33:09,418
or the bash shell to do something in

816
00:33:07,500 --> 00:33:12,720
this case we're telling sub-process

817
00:33:09,419 --> 00:33:14,610
which is the the bash shell to echo the

818
00:33:12,720 --> 00:33:15,990
hacking command so from now on out when

819
00:33:14,610 --> 00:33:17,428
you see me run the hacking command it's

820
00:33:15,990 --> 00:33:19,889
not Python that's printing it it's the

821
00:33:17,429 --> 00:33:21,389
OS so the real-world example of this is

822
00:33:19,889 --> 00:33:23,879
brute spray doesn't actually run the

823
00:33:21,389 --> 00:33:26,129
hacks itself it calls a see tool called

824
00:33:23,880 --> 00:33:29,519
Medusa which paralyzes the hacks on a

825
00:33:26,130 --> 00:33:31,169
bunch of the the brute-force attempts on

826
00:33:29,519 --> 00:33:33,090
a bunch of other computers so brute

827
00:33:31,169 --> 00:33:35,519
spray itself is just calling another

828
00:33:33,090 --> 00:33:36,809
colleague tool and automating the use of

829
00:33:35,519 --> 00:33:38,669
that kali told i guess this guy got

830
00:33:36,809 --> 00:33:40,168
tired of typing in the medusa for each

831
00:33:38,669 --> 00:33:44,130
one of his targets he just wrote a

832
00:33:40,169 --> 00:33:47,010
python layer to call AC program to do

833
00:33:44,130 --> 00:33:49,470
that same thing a hundred times you can

834
00:33:47,010 --> 00:33:50,789
with Python you can it's a really good

835
00:33:49,470 --> 00:33:52,649
what's called blue language you can use

836
00:33:50,789 --> 00:33:54,240
it to automate stuff and pretty much

837
00:33:52,649 --> 00:33:55,860
every other language you can use Python

838
00:33:54,240 --> 00:33:57,960
it called JavaScript commands I used to

839
00:33:55,860 --> 00:34:01,439
call api's all the time I run sequel

840
00:33:57,960 --> 00:34:03,419
commands from Python like Python just

841
00:34:01,440 --> 00:34:04,980
does things for me in other other

842
00:34:03,419 --> 00:34:06,809
languages and other protocols and I just

843
00:34:04,980 --> 00:34:08,159
like it a lot because it's easier to

844
00:34:06,809 --> 00:34:10,409
write so I don't have to mess around

845
00:34:08,159 --> 00:34:12,149
with low-level C code or or I don't have

846
00:34:10,409 --> 00:34:14,520
to write database commands my hand in my

847
00:34:12,149 --> 00:34:17,359
particular field so the way we do this

848
00:34:14,520 --> 00:34:19,739
and this is an important one we Python

849
00:34:17,359 --> 00:34:21,569
doesn't have all it doesn't import all

850
00:34:19,739 --> 00:34:25,168
its coding automatically would I

851
00:34:21,570 --> 00:34:26,339
first off actually yeah there's more

852
00:34:25,168 --> 00:34:28,109
Python code than what's on my computer

853
00:34:26,339 --> 00:34:29,429
like I don't think anyone in the world

854
00:34:28,109 --> 00:34:29,889
kind of all the Python code ever on

855
00:34:29,429 --> 00:34:32,829
their

856
00:34:29,889 --> 00:34:34,389
so what you do is you you get the

857
00:34:32,829 --> 00:34:36,519
libraries and then you import them so

858
00:34:34,389 --> 00:34:38,409
pythons import syntax is fairly simple

859
00:34:36,518 --> 00:34:40,418
you see you say import and then you just

860
00:34:38,409 --> 00:34:41,349
tell it what to import in this case

861
00:34:40,418 --> 00:34:44,009
we're importing something from the

862
00:34:41,349 --> 00:34:45,879
standard library if you're doing

863
00:34:44,009 --> 00:34:47,139
computer security applications you'll

864
00:34:45,879 --> 00:34:48,759
pretty much be using the same in library

865
00:34:47,139 --> 00:34:50,049
but if you watch Emily's talk there's a

866
00:34:48,759 --> 00:34:52,389
couple libraries that you can install

867
00:34:50,049 --> 00:34:53,679
through a thing called pip so but

868
00:34:52,389 --> 00:34:55,480
basically we have a bunch of libraries

869
00:34:53,679 --> 00:34:58,809
on a computer and we want to grab a

870
00:34:55,480 --> 00:35:00,880
library that in particular will run

871
00:34:58,809 --> 00:35:02,859
os-level commands and I'm gonna do this

872
00:35:00,880 --> 00:35:04,239
manually first to make it simple to

873
00:35:02,859 --> 00:35:06,160
share you what's going on if I want to

874
00:35:04,239 --> 00:35:07,900
LS what's in a directory Python doesn't

875
00:35:06,160 --> 00:35:09,129
understand LS it's a bash command but

876
00:35:07,900 --> 00:35:14,499
what I can do is I can import sub

877
00:35:09,130 --> 00:35:18,009
process and then I could say sub process

878
00:35:14,499 --> 00:35:19,328
call LS and now it'll run the LS command

879
00:35:18,009 --> 00:35:22,269
and the bash shell and they give me the

880
00:35:19,329 --> 00:35:24,730
results back so sub process isn't Python

881
00:35:22,269 --> 00:35:27,249
sub process is Python but it sub process

882
00:35:24,730 --> 00:35:28,809
is calling bash if I want to call C go

883
00:35:27,249 --> 00:35:29,410
for it I want to call I don't know

884
00:35:28,809 --> 00:35:31,180
anything

885
00:35:29,410 --> 00:35:33,430
Fortran actually that is a very

886
00:35:31,180 --> 00:35:35,259
important application a lot of a lot of

887
00:35:33,430 --> 00:35:36,308
scientific applications for kinds of

888
00:35:35,259 --> 00:35:38,259
super old language it's a pain to write

889
00:35:36,309 --> 00:35:39,609
people just write Python layers on top

890
00:35:38,259 --> 00:35:41,200
of old Fortran libraries it's really

891
00:35:39,609 --> 00:35:44,460
properly so that's how I mess around

892
00:35:41,200 --> 00:35:46,808
with the operating system with Python

893
00:35:44,460 --> 00:35:48,279
the next thing we want to go through

894
00:35:46,809 --> 00:35:50,819
this file IO so we're going to keep

895
00:35:48,279 --> 00:35:53,259
diving into messing around with files

896
00:35:50,819 --> 00:35:54,880
it's kind of annoying so you have to

897
00:35:53,259 --> 00:35:56,799
type in the password each time right or

898
00:35:54,880 --> 00:35:58,809
or actually we don't have any passwords

899
00:35:56,799 --> 00:36:00,788
I've just been I just been saying I'm

900
00:35:58,809 --> 00:36:02,289
gonna hack targets it'd be nice if we

901
00:36:00,789 --> 00:36:05,890
could just download a password list and

902
00:36:02,289 --> 00:36:08,079
use that so in here I have passwords

903
00:36:05,890 --> 00:36:09,430
that txt and I have to pass ordinary

904
00:36:08,079 --> 00:36:11,819
password one two three and super secure

905
00:36:09,430 --> 00:36:11,819
password

906
00:36:15,270 --> 00:36:22,860
so in Python the way I can I can grab

907
00:36:19,590 --> 00:36:24,990
stuff from the from the file system

908
00:36:22,860 --> 00:36:26,550
I tell it where the file is so I've

909
00:36:24,990 --> 00:36:28,109
imported OS at the top

910
00:36:26,550 --> 00:36:30,510
I tell it I want to join passwords and

911
00:36:28,110 --> 00:36:32,910
passwords txt the reason being and I'll

912
00:36:30,510 --> 00:36:35,670
using I'll use actually use a regular

913
00:36:32,910 --> 00:36:38,339
URI to show this to you in my in here

914
00:36:35,670 --> 00:36:40,619
the passwords are one directory up and

915
00:36:38,340 --> 00:36:42,060
the file is right here so I'm telling

916
00:36:40,619 --> 00:36:44,760
Python go to the passwords directory and

917
00:36:42,060 --> 00:36:47,490
grab passwords at txt and then with

918
00:36:44,760 --> 00:36:49,500
opening opening the file as pastor file

919
00:36:47,490 --> 00:36:51,299
I wanted to grab all the passwords out

920
00:36:49,500 --> 00:36:54,000
of here and put it into an array this is

921
00:36:51,300 --> 00:36:55,470
a fairly substantial chunk of code and I

922
00:36:54,000 --> 00:36:56,820
can't cover it fully in depth at this

923
00:36:55,470 --> 00:36:58,379
time but there are a lot of tutorials

924
00:36:56,820 --> 00:37:00,300
online if you see me the air out of the

925
00:36:58,380 --> 00:37:01,410
conference just come and talk to me but

926
00:37:00,300 --> 00:37:02,700
otherwise you can just copy and paste

927
00:37:01,410 --> 00:37:04,319
this if you already files in like if you

928
00:37:02,700 --> 00:37:06,899
don't have to understand it this is just

929
00:37:04,320 --> 00:37:13,619
the recipe to grab the passwords out so

930
00:37:06,900 --> 00:37:17,330
if I run Python 9 hacked up he why mmm

931
00:37:13,619 --> 00:37:17,330
no such bad yeah I know why

932
00:37:25,910 --> 00:37:31,799
Pepi why it prints out my passwords

933
00:37:28,850 --> 00:37:37,799
which it grabbed her file so file island

934
00:37:31,800 --> 00:37:39,030
Python it's this pattern and these

935
00:37:37,800 --> 00:37:46,520
sections are gonna get a little hand

936
00:37:39,030 --> 00:37:46,520
wavy but we'll go for it all right

937
00:37:52,760 --> 00:37:59,340
there's one program a bit that I have to

938
00:37:56,340 --> 00:38:00,960
bring in just just to explain it or show

939
00:37:59,340 --> 00:38:02,580
what's going on you're gonna see this

940
00:38:00,960 --> 00:38:05,970
this a lot you're gonna see this if name

941
00:38:02,580 --> 00:38:08,069
equals main quite a bit all this is

942
00:38:05,970 --> 00:38:09,750
saying and this has to do with with lily

943
00:38:08,070 --> 00:38:10,920
Python runs Python can run neither

944
00:38:09,750 --> 00:38:12,960
what's called a scripted mode where you

945
00:38:10,920 --> 00:38:15,870
run the file directly or it can run as

946
00:38:12,960 --> 00:38:17,160
an import of a library so sometimes

947
00:38:15,870 --> 00:38:18,900
you're importing other people's code we

948
00:38:17,160 --> 00:38:20,279
just imported sub process and sometimes

949
00:38:18,900 --> 00:38:21,930
you're running your own scripts directly

950
00:38:20,280 --> 00:38:22,770
with the Python program you might want

951
00:38:21,930 --> 00:38:25,290
them to behave slightly differently

952
00:38:22,770 --> 00:38:27,300
because the way python works is it it

953
00:38:25,290 --> 00:38:29,100
actually runs the coded imports when it

954
00:38:27,300 --> 00:38:30,660
imports it so if I had a piece of code

955
00:38:29,100 --> 00:38:32,940
in here that said dropped database by

956
00:38:30,660 --> 00:38:34,230
just importing that code I would end up

957
00:38:32,940 --> 00:38:37,940
dropping my database my coworker did

958
00:38:34,230 --> 00:38:40,380
this he was an idiot so don't do this

959
00:38:37,940 --> 00:38:42,690
this is this is I know this is program

960
00:38:40,380 --> 00:38:43,830
e-fit but it's an important important

961
00:38:42,690 --> 00:38:45,630
enough that I want to explain what's

962
00:38:43,830 --> 00:38:47,370
going on so you're not confused by it so

963
00:38:45,630 --> 00:38:48,870
I have a simplified example because we

964
00:38:47,370 --> 00:38:53,630
have a lot going on and I'm going to go

965
00:38:48,870 --> 00:38:53,630
through the simplified example although

966
00:38:55,610 --> 00:38:59,070
although I'm also made the larger

967
00:38:57,870 --> 00:39:02,339
example so you can see that as well as

968
00:38:59,070 --> 00:39:03,690
the CD 10 very simplified example so the

969
00:39:02,340 --> 00:39:05,520
simplified example just has two pieces

970
00:39:03,690 --> 00:39:08,040
of code it has print and it has running

971
00:39:05,520 --> 00:39:09,660
instructions so usually up here is where

972
00:39:08,040 --> 00:39:10,170
we're defining functions methods or

973
00:39:09,660 --> 00:39:12,660
Global's

974
00:39:10,170 --> 00:39:15,030
right things that were just like pop3 is

975
00:39:12,660 --> 00:39:16,770
email Postgres the sequel my sequel is

976
00:39:15,030 --> 00:39:18,960
sequel Mariya DB is sequel we're just

977
00:39:16,770 --> 00:39:20,310
bringing up the the generic stuff and

978
00:39:18,960 --> 00:39:24,630
down here is where we actually want to

979
00:39:20,310 --> 00:39:27,600
run things so when I when I run Python

980
00:39:24,630 --> 00:39:29,550
so I'm gonna run Python we're gonna run

981
00:39:27,600 --> 00:39:31,500
the other one simplified example it

982
00:39:29,550 --> 00:39:32,970
prints both right it prints this is a

983
00:39:31,500 --> 00:39:35,160
set of instructions and this is running

984
00:39:32,970 --> 00:39:37,379
the instructions you can see that it

985
00:39:35,160 --> 00:39:38,759
doesn't print this first it prints this

986
00:39:37,380 --> 00:39:39,460
is a set of instructions first because

987
00:39:38,760 --> 00:39:41,470
python

988
00:39:39,460 --> 00:39:43,780
runs a code top-down hits this block

989
00:39:41,470 --> 00:39:45,220
sees it runs it and then it says and

990
00:39:43,780 --> 00:39:47,140
then it when we have the running portion

991
00:39:45,220 --> 00:39:48,520
it actually runs the portion of code the

992
00:39:47,140 --> 00:39:50,819
difference and I want to show you right

993
00:39:48,520 --> 00:39:53,140
here when I import hack dot py or sorry

994
00:39:50,819 --> 00:39:57,308
simplified I got to type it a lot to

995
00:39:53,140 --> 00:39:59,230
provide example I'm not running the code

996
00:39:57,309 --> 00:40:01,359
directly I'm just telling Python to grab

997
00:39:59,230 --> 00:40:04,450
the file and bring it into memory it

998
00:40:01,359 --> 00:40:06,819
does not run running the instructions on

999
00:40:04,450 --> 00:40:08,828
the import it still runs the code

1000
00:40:06,819 --> 00:40:11,230
definition but because this isn't the

1001
00:40:08,829 --> 00:40:13,150
main program that I'm running it skips

1002
00:40:11,230 --> 00:40:14,920
everything below so this is just an if

1003
00:40:13,150 --> 00:40:17,319
statement saying if you're importing

1004
00:40:14,920 --> 00:40:20,680
this file in don't bother running any of

1005
00:40:17,319 --> 00:40:22,210
this stuff just grab all the code that's

1006
00:40:20,680 --> 00:40:25,180
up here around all the definitions and

1007
00:40:22,210 --> 00:40:27,550
get everything set up up here that is I

1008
00:40:25,180 --> 00:40:29,230
know it's slightly nuanced when I'll run

1009
00:40:27,550 --> 00:40:31,210
it one more time so if I run simplified

1010
00:40:29,230 --> 00:40:32,920
example it runs the instructions and

1011
00:40:31,210 --> 00:40:34,569
because it's the main target of my

1012
00:40:32,920 --> 00:40:40,240
Python interpreter it's also gonna run

1013
00:40:34,569 --> 00:40:42,550
the code down here it finds if I instead

1014
00:40:40,240 --> 00:40:44,410
run a Python process so that my main

1015
00:40:42,550 --> 00:40:47,520
process is actually up here and I tell

1016
00:40:44,410 --> 00:40:50,259
it instead to import a piece of code

1017
00:40:47,520 --> 00:40:51,640
then it'll just run that so if you run

1018
00:40:50,260 --> 00:40:53,170
into bugs or things are confusing later

1019
00:40:51,640 --> 00:40:54,879
why certain pieces of code or running or

1020
00:40:53,170 --> 00:40:57,640
not running this is usually what I look

1021
00:40:54,880 --> 00:40:59,500
for first this as a code style you

1022
00:40:57,640 --> 00:41:01,000
usually should put all the code that you

1023
00:40:59,500 --> 00:41:02,799
want to run stuff or you want to define

1024
00:41:01,000 --> 00:41:05,470
stuff up here and all the code for

1025
00:41:02,799 --> 00:41:07,420
running stuff down here breed spray does

1026
00:41:05,470 --> 00:41:09,790
have this in here I do you can you can

1027
00:41:07,420 --> 00:41:11,829
see it if you go to the full bullet

1028
00:41:09,790 --> 00:41:14,109
Brutes break it actually I'll just pull

1029
00:41:11,829 --> 00:41:15,579
it up I have it here brute spray has it

1030
00:41:14,109 --> 00:41:17,650
at the bottom this is where brute spray

1031
00:41:15,579 --> 00:41:19,089
is just defining all its methods and how

1032
00:41:17,650 --> 00:41:22,240
to do things let's make a dictionary

1033
00:41:19,089 --> 00:41:23,710
let's have our dictionary for for

1034
00:41:22,240 --> 00:41:25,118
services where's a service ticket right

1035
00:41:23,710 --> 00:41:28,839
here let's have our service dictionary

1036
00:41:25,119 --> 00:41:30,309
so Microsoft es is just Samba s MTS

1037
00:41:28,839 --> 00:41:32,170
secure is just is just your mail

1038
00:41:30,309 --> 00:41:35,650
protocol pop3 is also just pop through

1039
00:41:32,170 --> 00:41:38,349
reassess your pop3 protocol and it's got

1040
00:41:35,650 --> 00:41:40,630
another one in here actually somewhere

1041
00:41:38,349 --> 00:41:41,950
it's got list but it's saying that this

1042
00:41:40,630 --> 00:41:43,540
is all the stuff I'm using to define how

1043
00:41:41,950 --> 00:41:44,558
brutally should work and this is where

1044
00:41:43,540 --> 00:41:48,480
we're actually going to run brute or

1045
00:41:44,559 --> 00:41:48,480
when you run Python routes for a DUI

1046
00:41:51,990 --> 00:41:59,589
yeah anything below the the conditional

1047
00:41:56,500 --> 00:42:03,280
is gonna be called by me so I pull it

1048
00:41:59,590 --> 00:42:09,670
into an existing program whatever is

1049
00:42:03,280 --> 00:42:11,320
that the main is the Python is the is

1050
00:42:09,670 --> 00:42:13,210
the main price on process rank so when

1051
00:42:11,320 --> 00:42:15,250
you a little bit into the Python stuff

1052
00:42:13,210 --> 00:42:17,770
when you when I run type in Python it

1053
00:42:15,250 --> 00:42:22,120
starts an interpreter that interpreter

1054
00:42:17,770 --> 00:42:24,009
it labels as the main this it labels as

1055
00:42:22,120 --> 00:42:26,170
that is the main namespace the top of

1056
00:42:24,010 --> 00:42:28,210
the namespace and that's why when I get

1057
00:42:26,170 --> 00:42:29,800
to this point the name of the namespace

1058
00:42:28,210 --> 00:42:32,350
that's generated when I'm executing this

1059
00:42:29,800 --> 00:42:34,720
code is main so it runs this when I run

1060
00:42:32,350 --> 00:42:38,410
it this way this interpreter is main

1061
00:42:34,720 --> 00:42:39,609
right here but when I import something

1062
00:42:38,410 --> 00:42:41,890
it actually goes under this simplified

1063
00:42:39,610 --> 00:42:43,480
example namespace so this is Python you

1064
00:42:41,890 --> 00:42:44,379
don't it does a lot of magic for you if

1065
00:42:43,480 --> 00:42:45,430
you've worked with other programming

1066
00:42:44,380 --> 00:42:47,230
language you have to explicitly just

1067
00:42:45,430 --> 00:42:48,580
declare namespaces like c-sharp I know

1068
00:42:47,230 --> 00:42:50,080
for sure you have to like actually type

1069
00:42:48,580 --> 00:42:52,840
in everyday space Python doesn't name

1070
00:42:50,080 --> 00:42:54,310
spacing magic for you it's just when you

1071
00:42:52,840 --> 00:42:55,690
if you don't know how programming works

1072
00:42:54,310 --> 00:42:57,460
and and suddenly she stopped starts

1073
00:42:55,690 --> 00:42:59,560
happening know that Python is implicit

1074
00:42:57,460 --> 00:43:01,060
in creating namespaces for you in our

1075
00:42:59,560 --> 00:43:02,529
particular case the main namespace is

1076
00:43:01,060 --> 00:43:04,779
the first entry point and then all the

1077
00:43:02,530 --> 00:43:08,710
imports are under on their module level

1078
00:43:04,780 --> 00:43:09,970
namespaces super program II if it

1079
00:43:08,710 --> 00:43:11,800
doesn't make sense don't worry about it

1080
00:43:09,970 --> 00:43:14,549
just know that this this is what the

1081
00:43:11,800 --> 00:43:16,720
line this one line of code is doing

1082
00:43:14,550 --> 00:43:18,550
alright and then we'll get to our very

1083
00:43:16,720 --> 00:43:21,040
very last bit and and to tie it all

1084
00:43:18,550 --> 00:43:22,900
together hopefully was all worth it the

1085
00:43:21,040 --> 00:43:24,279
last bit is we've hard-coded everything

1086
00:43:22,900 --> 00:43:27,220
into our program so when I want to hack

1087
00:43:24,280 --> 00:43:29,980
somebody I have to literally type in RTC

1088
00:43:27,220 --> 00:43:31,629
to 0 or Canyon in this it's not you

1089
00:43:29,980 --> 00:43:34,630
don't go in and edit the Python program

1090
00:43:31,630 --> 00:43:36,130
by hand every time not fun right it's

1091
00:43:34,630 --> 00:43:37,360
not scalable it's not something you're

1092
00:43:36,130 --> 00:43:38,620
gonna do on every pentas just type in

1093
00:43:37,360 --> 00:43:42,040
the list of every target you're gonna go

1094
00:43:38,620 --> 00:43:45,400
after and you would probably not last as

1095
00:43:42,040 --> 00:43:46,960
a pen tester very long so there's a lot

1096
00:43:45,400 --> 00:43:48,580
of what's called interfaces for Python

1097
00:43:46,960 --> 00:43:54,100
and the one that is usually the most

1098
00:43:48,580 --> 00:43:55,299
common that I see in in security

1099
00:43:54,100 --> 00:43:57,790
applications it's what's called a

1100
00:43:55,300 --> 00:44:00,660
command-line interface so I'm gonna

1101
00:43:57,790 --> 00:44:02,620
actually just copy and paste an example

1102
00:44:00,660 --> 00:44:04,960
code because otherwise I'm gonna mess it

1103
00:44:02,620 --> 00:44:08,020
up when I type it so I'll show you how

1104
00:44:04,960 --> 00:44:09,490
works first and then I will I will go

1105
00:44:08,020 --> 00:44:13,359
through and explain how I did it because

1106
00:44:09,490 --> 00:44:16,118
it'll make more sense and this is a very

1107
00:44:13,359 --> 00:44:19,420
last bit so let's say I want to hack

1108
00:44:16,119 --> 00:44:20,859
arteezy q0 used to password my password

1109
00:44:19,420 --> 00:44:23,349
1 2 3 in my past and i want to use my

1110
00:44:20,859 --> 00:44:25,720
sequel and pop3 i can set up command

1111
00:44:23,349 --> 00:44:27,420
line flags for those unfamiliar command

1112
00:44:25,720 --> 00:44:29,470
line flags or just a way of telling

1113
00:44:27,420 --> 00:44:32,650
giving some inputs to a program on a

1114
00:44:29,470 --> 00:44:34,419
command line in this case i everything i

1115
00:44:32,650 --> 00:44:38,400
have up here it's doing attacking Kanyon

1116
00:44:34,420 --> 00:44:40,720
attacking RTC q0 its using my past and

1117
00:44:38,400 --> 00:44:42,190
password 1 2 3 in my past let's say I

1118
00:44:40,720 --> 00:44:45,660
don't I want to make this really simple

1119
00:44:42,190 --> 00:44:51,099
I just want to hack someone on pop3 I

1120
00:44:45,660 --> 00:44:53,020
just want to use password 1 2 3 and I

1121
00:44:51,099 --> 00:44:55,930
just went ahead at Canyon now when I run

1122
00:44:53,020 --> 00:44:57,430
this only one line up here 6 lines

1123
00:44:55,930 --> 00:45:01,868
because the commented torques of this is

1124
00:44:57,430 --> 00:45:05,049
all of us let's say me real annoyed me

1125
00:45:01,869 --> 00:45:06,849
for some reason because she's like that

1126
00:45:05,050 --> 00:45:08,710
now we can try hacking both of us by

1127
00:45:06,849 --> 00:45:11,740
just putting in a command line fly so

1128
00:45:08,710 --> 00:45:13,000
this is this is usually how if you're in

1129
00:45:11,740 --> 00:45:15,390
your pen testing people wrap up their

1130
00:45:13,000 --> 00:45:17,470
programs and python the way you define

1131
00:45:15,390 --> 00:45:20,170
these days is I'm actually just gonna go

1132
00:45:17,470 --> 00:45:22,689
to my my Geary at this point to show you

1133
00:45:20,170 --> 00:45:23,040
is it it's actually worse ok we won't do

1134
00:45:22,690 --> 00:45:27,030
that

1135
00:45:23,040 --> 00:45:28,990
alright it's a little confusing but you

1136
00:45:27,030 --> 00:45:31,660
have to actually let's go with a

1137
00:45:28,990 --> 00:45:34,118
simplified example first you have to

1138
00:45:31,660 --> 00:45:36,339
import in a thing called arc parse so

1139
00:45:34,119 --> 00:45:38,680
you're bringing in another library just

1140
00:45:36,339 --> 00:45:40,509
for parsing arguments the way you define

1141
00:45:38,680 --> 00:45:42,279
arguments is you create a partyer object

1142
00:45:40,510 --> 00:45:44,740
and you can give it a description if

1143
00:45:42,280 --> 00:45:45,820
you'd like and then you tell the parser

1144
00:45:44,740 --> 00:45:48,129
you want to add arguments so i'm going

1145
00:45:45,820 --> 00:45:49,869
to add an argument i can be short short

1146
00:45:48,130 --> 00:45:52,240
argument you or long argument username

1147
00:45:49,869 --> 00:45:55,119
and I could put a help string in require

1148
00:45:52,240 --> 00:45:58,560
this true and the default is Canyon 2 8

1149
00:45:55,119 --> 00:46:02,830
9 I can add another argument here and

1150
00:45:58,560 --> 00:46:04,509
then if I want to if I want to be able

1151
00:46:02,830 --> 00:46:07,240
to pass on a list of arguments I give it

1152
00:46:04,510 --> 00:46:09,849
another I give I tell add argument that

1153
00:46:07,240 --> 00:46:11,339
the number of args is Plus which is a

1154
00:46:09,849 --> 00:46:13,990
list

1155
00:46:11,339 --> 00:46:16,509
my advice for this one it's you're not

1156
00:46:13,990 --> 00:46:18,160
going to get it the next one minute what

1157
00:46:16,510 --> 00:46:18,819
if you don't see now what I would do is

1158
00:46:18,160 --> 00:46:20,319
just play

1159
00:46:18,819 --> 00:46:22,299
with the code again download the code

1160
00:46:20,319 --> 00:46:24,099
mess around with some of these see what

1161
00:46:22,299 --> 00:46:26,489
the difference is and what it does to

1162
00:46:24,099 --> 00:46:29,890
your program through this simplified it

1163
00:46:26,489 --> 00:46:31,239
to the simplified example so let's let's

1164
00:46:29,890 --> 00:46:33,219
go through here real quick I'll run this

1165
00:46:31,239 --> 00:46:34,809
last one and then I think I'm nearly out

1166
00:46:33,219 --> 00:46:37,619
of time so I'm gonna run my simplified

1167
00:46:34,809 --> 00:46:39,489
example I can say U is gonna be Canyon

1168
00:46:37,619 --> 00:46:40,959
actually we're gonna leave that out

1169
00:46:39,489 --> 00:46:45,939
we'll leave you out and we'll just say I

1170
00:46:40,959 --> 00:46:49,299
want to put in a password of password PW

1171
00:46:45,939 --> 00:46:53,499
and then I want to add in protocols I'll

1172
00:46:49,299 --> 00:46:58,119
do - PR - PR and I'll be email and I'll

1173
00:46:53,499 --> 00:47:07,629
do pops know I'm in the wrong directory

1174
00:46:58,119 --> 00:47:09,579
of course no so I guess usually name is

1175
00:47:07,630 --> 00:47:14,069
required so that's what it's telling me

1176
00:47:09,579 --> 00:47:16,419
I'll put in the - you I'll put in Canyon

1177
00:47:14,069 --> 00:47:17,739
when I run this and now you can see

1178
00:47:16,419 --> 00:47:19,959
print out each one of my arguments it

1179
00:47:17,739 --> 00:47:23,400
prints out Canyon as a string it prints

1180
00:47:19,959 --> 00:47:28,379
out password and email clock three and

1181
00:47:23,400 --> 00:47:31,119
so I know we covered a lot of ground in

1182
00:47:28,380 --> 00:47:34,179
this but actually this is actually all

1183
00:47:31,119 --> 00:47:36,789
you need to recreate an bridge spray

1184
00:47:34,179 --> 00:47:38,919
like brute spray all of it is just those

1185
00:47:36,789 --> 00:47:41,919
pieces used over and over again and in

1186
00:47:38,919 --> 00:47:43,359
different combinations so I'm with this

1187
00:47:41,919 --> 00:47:44,618
I mean this is all you need to know to

1188
00:47:43,359 --> 00:47:45,759
create a lot of different tools you

1189
00:47:44,619 --> 00:47:47,469
probably create tools that can go

1190
00:47:45,759 --> 00:47:49,299
straight into Kali like extremely useful

1191
00:47:47,469 --> 00:47:50,289
tools same thing that Emily did oh and

1192
00:47:49,299 --> 00:47:56,439
you look at her talk you'll see these

1193
00:47:50,289 --> 00:47:56,619
same elements in there for questions all

1194
00:47:56,439 --> 00:47:58,839
right

1195
00:47:56,619 --> 00:48:02,650
yeah questions we can go through

1196
00:47:58,839 --> 00:48:06,880
anything I do live examples yeah so you

1197
00:48:02,650 --> 00:48:08,559
know link is right up here github comm

1198
00:48:06,880 --> 00:48:11,039
slash Kane so surprise time for hackers

1199
00:48:08,559 --> 00:48:12,939
if it was interesting I highly advise

1200
00:48:11,039 --> 00:48:14,319
downloading this code and running it

1201
00:48:12,939 --> 00:48:15,819
you'll learn a lot more about running

1202
00:48:14,319 --> 00:48:18,849
yourself rather than just watching me

1203
00:48:15,819 --> 00:48:20,558
sort of blob up here so just go through

1204
00:48:18,849 --> 00:48:22,239
the code get your Python interpreter run

1205
00:48:20,559 --> 00:48:25,859
things change a little bit see what

1206
00:48:22,239 --> 00:48:25,859
happens just play around

1207
00:48:26,810 --> 00:48:34,630
[Applause]

