1
00:00:00,030 --> 00:00:03,300
all right so this is building breaking

2
00:00:01,920 --> 00:00:05,130
blockchains with Merlin quarter

3
00:00:03,300 --> 00:00:07,020
Merlin is a soccer and systems wizard

4
00:00:05,130 --> 00:00:08,309
with a penchant for cryptography and

5
00:00:07,020 --> 00:00:09,959
security who loves to share knowledge

6
00:00:08,309 --> 00:00:11,459
and ideas with anyone who will listen

7
00:00:09,960 --> 00:00:12,809
professionally Merlin is currently

8
00:00:11,460 --> 00:00:15,000
working as an engineer for a blockchain

9
00:00:12,809 --> 00:00:22,049
security focus startup called metal box

10
00:00:15,000 --> 00:00:28,320
welcome Burlington 2018 thank you guys

11
00:00:22,050 --> 00:00:38,340
thank you very much I thought I was

12
00:00:28,320 --> 00:00:39,660
ready okay so as he said I'm Merlin if

13
00:00:38,340 --> 00:00:43,110
you want a little bit more about me I'm

14
00:00:39,660 --> 00:00:45,660
a bit of a crypto nerd I mean no space

15
00:00:43,110 --> 00:00:47,340
labs keyholder I hang out at layer one

16
00:00:45,660 --> 00:00:50,069
and the hardware hacking village with

17
00:00:47,340 --> 00:00:51,770
milady kitten there and you can also see

18
00:00:50,070 --> 00:00:54,989
me at Def Con in tamper-evident Village

19
00:00:51,770 --> 00:00:59,129
I'm all kinds of places so you know find

20
00:00:54,989 --> 00:01:01,410
me around so for this talk I have some

21
00:00:59,129 --> 00:01:03,750
basic assumptions which are that you

22
00:01:01,410 --> 00:01:06,450
have some cryptographic fundamentals and

23
00:01:03,750 --> 00:01:09,810
a vague idea of a crypto currency is at

24
00:01:06,450 --> 00:01:13,170
least and a passing familiarity with

25
00:01:09,810 --> 00:01:16,259
Python or another language however if

26
00:01:13,170 --> 00:01:17,850
you don't it's alright because we're

27
00:01:16,259 --> 00:01:18,960
gonna take a little quick little lesson

28
00:01:17,850 --> 00:01:22,020
to make sure we're all kind of on the

29
00:01:18,960 --> 00:01:24,298
same page so the most important part for

30
00:01:22,020 --> 00:01:27,960
the cryptographic fundamentals is going

31
00:01:24,299 --> 00:01:30,329
to come down to hashing hashes are a

32
00:01:27,960 --> 00:01:33,059
one-way function where you pass some

33
00:01:30,329 --> 00:01:35,880
data and you get essentially a unique

34
00:01:33,060 --> 00:01:37,710
identifier as a very large number and we

35
00:01:35,880 --> 00:01:40,979
have certain properties of hashes that

36
00:01:37,710 --> 00:01:43,110
we really care about ideally we want

37
00:01:40,979 --> 00:01:46,110
them to be fairly randomized so that you

38
00:01:43,110 --> 00:01:48,899
can't predict them we also would like it

39
00:01:46,110 --> 00:01:51,210
if hashes had no collisions so that two

40
00:01:48,899 --> 00:01:54,899
inputs did not ever have the same output

41
00:01:51,210 --> 00:01:58,429
and you know for that we'd also like a

42
00:01:54,899 --> 00:02:01,469
large amount of space for our hashes

43
00:01:58,430 --> 00:02:02,969
generally you know you might think of a

44
00:02:01,469 --> 00:02:05,130
cryptocurrency as magical internet

45
00:02:02,969 --> 00:02:07,439
currencies you might think of it as say

46
00:02:05,130 --> 00:02:09,239
a pyramid scheme you might be super hype

47
00:02:07,439 --> 00:02:11,519
on it and think it's the future of all

48
00:02:09,239 --> 00:02:13,800
the things

49
00:02:11,520 --> 00:02:15,810
really it is though actually kind of a

50
00:02:13,800 --> 00:02:17,310
bit of a really slow database and

51
00:02:15,810 --> 00:02:20,310
there's a lot of different applications

52
00:02:17,310 --> 00:02:22,710
not everything has to do with you know

53
00:02:20,310 --> 00:02:24,870
currencies and and monies people are

54
00:02:22,710 --> 00:02:26,130
doing all kinds of experiments but most

55
00:02:24,870 --> 00:02:28,590
of what you hear about is definitely

56
00:02:26,130 --> 00:02:30,210
gonna be around the currency token side

57
00:02:28,590 --> 00:02:32,820
of things and everyone getting rich

58
00:02:30,210 --> 00:02:34,650
going to the moon so whether you're in

59
00:02:32,820 --> 00:02:36,840
that camp or you want to see everyone

60
00:02:34,650 --> 00:02:39,870
fail this talk is relevant to you

61
00:02:36,840 --> 00:02:42,120
because you want to protect your stuff

62
00:02:39,870 --> 00:02:42,600
or break everyone else's stuff just for

63
00:02:42,120 --> 00:02:44,430
the lulz

64
00:02:42,600 --> 00:02:49,040
so you know I'm speaking to everyone

65
00:02:44,430 --> 00:02:51,150
here so for basic programming

66
00:02:49,040 --> 00:02:54,269
essentially if we look at this first

67
00:02:51,150 --> 00:02:56,160
line here track a is gonna be equivalent

68
00:02:54,270 --> 00:02:58,740
to some room there's a puffer fish on

69
00:02:56,160 --> 00:03:01,890
the outside so there we go I'm Merlin

70
00:02:58,740 --> 00:03:04,530
I'm equivalent to a speaker and for each

71
00:03:01,890 --> 00:03:07,470
attendee in this room I'm hoping that

72
00:03:04,530 --> 00:03:10,110
you're gonna listen to me and then now

73
00:03:07,470 --> 00:03:12,690
you know Python basically Python is

74
00:03:10,110 --> 00:03:14,580
almost exactly like the pseudo code it's

75
00:03:12,690 --> 00:03:17,070
that readable so if you don't know

76
00:03:14,580 --> 00:03:20,010
programming if you understood that now

77
00:03:17,070 --> 00:03:23,700
you know programming congratulations all

78
00:03:20,010 --> 00:03:27,570
right so there's a whole lot of articles

79
00:03:23,700 --> 00:03:30,209
out there and some prior art so I would

80
00:03:27,570 --> 00:03:33,780
be remiss in and not mentioning that for

81
00:03:30,210 --> 00:03:38,160
example this first github link is to

82
00:03:33,780 --> 00:03:39,510
this guy's example learn block chains by

83
00:03:38,160 --> 00:03:42,120
building one which he wrote a nice

84
00:03:39,510 --> 00:03:43,260
little article in 2017

85
00:03:42,120 --> 00:03:44,910
and it makes a nice little web

86
00:03:43,260 --> 00:03:48,239
application so you can kind of play

87
00:03:44,910 --> 00:03:51,480
around with that the one below it is a

88
00:03:48,240 --> 00:03:54,420
much more extensive complete coin so to

89
00:03:51,480 --> 00:03:57,630
speak it has all the bells and whistles

90
00:03:54,420 --> 00:03:59,070
of a real production blockchain and if

91
00:03:57,630 --> 00:04:00,840
you want to experiment with stuff I

92
00:03:59,070 --> 00:04:03,420
would say it's a pretty good basis

93
00:04:00,840 --> 00:04:06,060
however it is unmaintained for last few

94
00:04:03,420 --> 00:04:07,079
years Python - yadda yadda yadda so you

95
00:04:06,060 --> 00:04:10,620
know take it or leave it

96
00:04:07,080 --> 00:04:14,370
so with that the question is how hard

97
00:04:10,620 --> 00:04:16,798
could it be and it's pretty hard to be

98
00:04:14,370 --> 00:04:18,989
honest but we're gonna we're gonna keep

99
00:04:16,798 --> 00:04:21,719
it as simple as possible and take our

100
00:04:18,988 --> 00:04:23,190
time and of course at the end feel free

101
00:04:21,720 --> 00:04:25,120
to ask me any questions I'll clarify

102
00:04:23,190 --> 00:04:30,150
anything I must missed out on

103
00:04:25,120 --> 00:04:35,020
or went too fast so from a high level

104
00:04:30,150 --> 00:04:38,679
we've got transactions which are kind of

105
00:04:35,020 --> 00:04:41,530
the basis of blocks so a transaction is

106
00:04:38,680 --> 00:04:46,030
generally gonna be some kind of exchange

107
00:04:41,530 --> 00:04:47,080
between one or more parties however as

108
00:04:46,030 --> 00:04:50,320
we'll see when we look at the

109
00:04:47,080 --> 00:04:52,510
implementation it could be any random

110
00:04:50,320 --> 00:04:54,159
thing that your virtual machine will

111
00:04:52,510 --> 00:04:58,180
implement and we'll talk about that more

112
00:04:54,160 --> 00:04:59,950
later each block is going to be made up

113
00:04:58,180 --> 00:05:01,810
of a group of transactions generally

114
00:04:59,950 --> 00:05:04,210
every block needs at least one

115
00:05:01,810 --> 00:05:06,639
transaction and say Bitcoin and

116
00:05:04,210 --> 00:05:08,049
classical type of block chains that one

117
00:05:06,639 --> 00:05:10,180
transaction is going to be what's called

118
00:05:08,050 --> 00:05:12,820
the coinbase transaction we'll talk some

119
00:05:10,180 --> 00:05:16,000
more about that a block chain is

120
00:05:12,820 --> 00:05:18,820
essentially a graph or tree of said

121
00:05:16,000 --> 00:05:21,610
blocks where you have a chain thus block

122
00:05:18,820 --> 00:05:26,500
chain of blocks referring to previous

123
00:05:21,610 --> 00:05:29,770
blocks and a node is essentially going

124
00:05:26,500 --> 00:05:32,350
to be a minor device trying to mine new

125
00:05:29,770 --> 00:05:34,510
coins or say a wallet where you're

126
00:05:32,350 --> 00:05:36,220
tracking your coins and sending them

127
00:05:34,510 --> 00:05:38,169
around or whatever the blockchain may do

128
00:05:36,220 --> 00:05:43,180
like I said buck chains don't just have

129
00:05:38,169 --> 00:05:47,109
to be currency but they often are keep

130
00:05:43,180 --> 00:05:49,450
switching windows so a little more deep

131
00:05:47,110 --> 00:05:52,660
on transaction transactions are

132
00:05:49,450 --> 00:05:55,719
typically made up of inputs and they

133
00:05:52,660 --> 00:05:57,639
point to outputs and as I said there's a

134
00:05:55,720 --> 00:06:01,539
special transaction which is a coin base

135
00:05:57,639 --> 00:06:03,849
so a coinbase transaction going back up

136
00:06:01,539 --> 00:06:06,460
is the transaction that actually

137
00:06:03,849 --> 00:06:07,840
generates the currency so what

138
00:06:06,460 --> 00:06:10,960
distinguishes a coinbase transaction

139
00:06:07,840 --> 00:06:12,210
typically is that it has no inputs it

140
00:06:10,960 --> 00:06:15,880
comes from nowhere

141
00:06:12,210 --> 00:06:19,150
it's just generated so it's basically

142
00:06:15,880 --> 00:06:21,070
just a list of inputs where the stuff

143
00:06:19,150 --> 00:06:24,940
came from and outputs where it's gonna

144
00:06:21,070 --> 00:06:27,639
go so to create a coin you just have no

145
00:06:24,940 --> 00:06:30,850
input comes from nowhere it's magic

146
00:06:27,639 --> 00:06:35,470
magical internet currency

147
00:06:30,850 --> 00:06:37,270
so a block is generally you're gonna

148
00:06:35,470 --> 00:06:39,000
have all your transactions in there and

149
00:06:37,270 --> 00:06:42,099
you're gonna sign them in some way

150
00:06:39,000 --> 00:06:44,590
typically we use a merkel route or a

151
00:06:42,100 --> 00:06:47,860
Merkel tree the root of the Merkel tree

152
00:06:44,590 --> 00:06:50,560
specifically is what's used to kind of

153
00:06:47,860 --> 00:06:52,090
give you a nice small hash of all of the

154
00:06:50,560 --> 00:06:57,040
transactions in the block without

155
00:06:52,090 --> 00:06:59,010
requiring extended processing for people

156
00:06:57,040 --> 00:07:05,710
verifying I think I think is the main

157
00:06:59,010 --> 00:07:07,940
motivation there let me restart that see

158
00:07:05,710 --> 00:07:11,659
there you go that was that was the time

159
00:07:07,940 --> 00:07:11,660
[Laughter]

160
00:07:13,350 --> 00:07:18,400
all right

161
00:07:14,830 --> 00:07:20,680
so also there's generally going to be

162
00:07:18,400 --> 00:07:23,500
some kind of proof which is how

163
00:07:20,680 --> 00:07:26,320
transactions are verified other nodes on

164
00:07:23,500 --> 00:07:28,840
the network can take a new block that's

165
00:07:26,320 --> 00:07:31,390
on the chain and essentially look at the

166
00:07:28,840 --> 00:07:34,000
proof and very quickly determine whether

167
00:07:31,390 --> 00:07:35,650
or not that block is in fact valid and

168
00:07:34,000 --> 00:07:37,960
met all the criteria for the blockchain

169
00:07:35,650 --> 00:07:40,210
so that's how confirmations and such

170
00:07:37,960 --> 00:07:42,669
work is other nodes on the network are

171
00:07:40,210 --> 00:07:44,739
doing that work using the proof to

172
00:07:42,670 --> 00:07:46,240
confirm it and most importantly you have

173
00:07:44,740 --> 00:07:51,190
the parent block because without that

174
00:07:46,240 --> 00:07:53,740
you do not have a blockchain so as I

175
00:07:51,190 --> 00:07:57,270
said block chains connected by parent

176
00:07:53,740 --> 00:08:02,200
blocks this is just a you know very

177
00:07:57,270 --> 00:08:05,380
straightforward list of children on into

178
00:08:02,200 --> 00:08:08,140
infinity there's should be no limit even

179
00:08:05,380 --> 00:08:10,150
in say Bitcoin where the currency stops

180
00:08:08,140 --> 00:08:12,789
generating new coins there will still be

181
00:08:10,150 --> 00:08:14,260
new blocks there's just that those

182
00:08:12,790 --> 00:08:17,200
blocks will no longer have a coinbase

183
00:08:14,260 --> 00:08:21,099
transaction that's going to be the main

184
00:08:17,200 --> 00:08:24,099
difference so nodes as I said we're

185
00:08:21,100 --> 00:08:26,290
speaking mainly of miners and wallets

186
00:08:24,100 --> 00:08:29,020
you as a consumer you'll have

187
00:08:26,290 --> 00:08:30,970
essentially a wallet node if you're

188
00:08:29,020 --> 00:08:34,510
trying to mind coins you'll have a bunch

189
00:08:30,970 --> 00:08:37,030
of GPUs or a6 or whatever it is for what

190
00:08:34,510 --> 00:08:39,429
you're mining and those are all gonna

191
00:08:37,030 --> 00:08:41,500
have their own sets of public and

192
00:08:39,429 --> 00:08:43,140
private keys which is another important

193
00:08:41,500 --> 00:08:44,850
part of cryptography

194
00:08:43,140 --> 00:08:46,319
that's based on all this that's one

195
00:08:44,850 --> 00:08:48,450
we're gonna touch on a little less

196
00:08:46,320 --> 00:08:54,450
directly but essentially if you

197
00:08:48,450 --> 00:08:56,430
understand say SSL or SSH keys you have

198
00:08:54,450 --> 00:09:00,480
some familiarity with asymmetric

199
00:08:56,430 --> 00:09:03,270
cryptography so what is the actual

200
00:09:00,480 --> 00:09:06,060
network the network is just this

201
00:09:03,270 --> 00:09:08,100
abstract collection of all of these

202
00:09:06,060 --> 00:09:11,250
nodes who are in connection with each

203
00:09:08,100 --> 00:09:15,420
other all of the blocks and then the

204
00:09:11,250 --> 00:09:18,540
protocol that defines what exactly makes

205
00:09:15,420 --> 00:09:20,339
that chain so one of the kind of issues

206
00:09:18,540 --> 00:09:22,170
that not a lot of people necessarily

207
00:09:20,340 --> 00:09:24,360
talk about that I here that I would like

208
00:09:22,170 --> 00:09:26,939
to expose is for example on Bitcoin

209
00:09:24,360 --> 00:09:29,520
there's no real standard of what that

210
00:09:26,940 --> 00:09:32,190
protocol is you have to kind of discover

211
00:09:29,520 --> 00:09:37,920
it based on the implementation of

212
00:09:32,190 --> 00:09:40,110
Bitcoin so there's no like RFC standard

213
00:09:37,920 --> 00:09:42,030
that can go to and read like what a

214
00:09:40,110 --> 00:09:43,890
block should look like you have to

215
00:09:42,030 --> 00:09:44,880
basically look at the code and if they

216
00:09:43,890 --> 00:09:47,699
make a change

217
00:09:44,880 --> 00:09:49,470
you have to make the same change and by

218
00:09:47,700 --> 00:09:52,020
the same token as I said the network is

219
00:09:49,470 --> 00:09:54,300
made up of the nodes so obviously the

220
00:09:52,020 --> 00:09:57,480
developers have a lot of power but so

221
00:09:54,300 --> 00:10:00,390
does everyone running the nodes if they

222
00:09:57,480 --> 00:10:02,040
choose not to update to a new version of

223
00:10:00,390 --> 00:10:04,650
the code it doesn't matter what the

224
00:10:02,040 --> 00:10:07,829
developers push right so there's a

225
00:10:04,650 --> 00:10:10,500
little bit of you know opposing forces

226
00:10:07,830 --> 00:10:12,420
going on there and that's kind of what's

227
00:10:10,500 --> 00:10:15,510
happening in the Bitcoin world with the

228
00:10:12,420 --> 00:10:21,689
whole like size of the block issue you

229
00:10:15,510 --> 00:10:24,200
may have heard about all right so we're

230
00:10:21,690 --> 00:10:28,710
going to look at our first little bit of

231
00:10:24,200 --> 00:10:31,590
code I wish I could zoom it in a little

232
00:10:28,710 --> 00:10:34,080
more but it's pretty straightforward so

233
00:10:31,590 --> 00:10:40,110
here we're defining a function called

234
00:10:34,080 --> 00:10:43,260
make transaction in it or sorry make

235
00:10:40,110 --> 00:10:44,700
transaction input and the important

236
00:10:43,260 --> 00:10:48,060
parts about this function are that it

237
00:10:44,700 --> 00:10:51,980
will receive a previous transaction ID

238
00:10:48,060 --> 00:10:54,900
hash a previous transaction ID index and

239
00:10:51,980 --> 00:10:58,340
some blob of data which we're going to

240
00:10:54,900 --> 00:10:58,340
talk about in depth a little bit more

241
00:10:59,400 --> 00:11:05,949
similarly for the outputs we're going to

242
00:11:02,140 --> 00:11:12,699
produce a dictionary based on a value

243
00:11:05,950 --> 00:11:17,140
and another blob of data so what are

244
00:11:12,700 --> 00:11:20,680
these blobs of data in Bitcoin even

245
00:11:17,140 --> 00:11:22,960
there's a virtual machine it's not as

246
00:11:20,680 --> 00:11:26,739
extensive to say aetherium where they

247
00:11:22,960 --> 00:11:28,900
have like a whole range of virtual

248
00:11:26,740 --> 00:11:32,140
machine language stuff and like

249
00:11:28,900 --> 00:11:33,520
facilities like memory so to speak on

250
00:11:32,140 --> 00:11:35,770
the blockchain and things like that

251
00:11:33,520 --> 00:11:38,740
it's much more simple it's more like a

252
00:11:35,770 --> 00:11:41,680
basic calculator so to speak and it has

253
00:11:38,740 --> 00:11:43,420
very few instructions the main

254
00:11:41,680 --> 00:11:47,469
instructions are as you may have noticed

255
00:11:43,420 --> 00:11:48,569
in this output it doesn't say who it

256
00:11:47,470 --> 00:11:51,400
goes to

257
00:11:48,570 --> 00:11:54,660
that's because who it goes to is a

258
00:11:51,400 --> 00:11:58,090
script in the virtual machine language

259
00:11:54,660 --> 00:11:59,800
and there are other things that you can

260
00:11:58,090 --> 00:12:04,540
do in there for their example there's

261
00:11:59,800 --> 00:12:07,030
kind of like null ish commands I believe

262
00:12:04,540 --> 00:12:09,670
Opie return is abused by a lot of people

263
00:12:07,030 --> 00:12:12,670
to do say data hiding in the blockchain

264
00:12:09,670 --> 00:12:16,810
so essentially you can send a bunch of

265
00:12:12,670 --> 00:12:23,770
data to nowhere because your script

266
00:12:16,810 --> 00:12:25,420
won't tell it where to go which means

267
00:12:23,770 --> 00:12:27,970
you can use that for other purposes for

268
00:12:25,420 --> 00:12:30,150
other applications and that's also kind

269
00:12:27,970 --> 00:12:33,520
of the basis of say sidechains and such

270
00:12:30,150 --> 00:12:37,780
they send data to special addresses and

271
00:12:33,520 --> 00:12:42,699
in special scripts and the coins are

272
00:12:37,780 --> 00:12:46,089
then moved to the side chain all right

273
00:12:42,700 --> 00:12:48,790
so we've got inputs we've got outputs

274
00:12:46,090 --> 00:12:50,650
now we can make a transaction the

275
00:12:48,790 --> 00:12:52,240
transaction is pretty much literally

276
00:12:50,650 --> 00:12:54,250
just a list of the inputs and the

277
00:12:52,240 --> 00:12:57,400
outputs there should always be at least

278
00:12:54,250 --> 00:12:59,560
one input and one output but there could

279
00:12:57,400 --> 00:13:03,390
be more you may have may have heard of

280
00:12:59,560 --> 00:13:06,010
say multiple outputs or multiple

281
00:13:03,390 --> 00:13:07,930
signature type things there's there's a

282
00:13:06,010 --> 00:13:09,370
lot that you can do here it doesn't have

283
00:13:07,930 --> 00:13:09,800
to be one-to-one it could be one too

284
00:13:09,370 --> 00:13:11,600
many

285
00:13:09,800 --> 00:13:13,880
is this kind of what I'm saying you said

286
00:13:11,600 --> 00:13:15,110
take from one input place and say I want

287
00:13:13,880 --> 00:13:19,370
to send it to three different outputs

288
00:13:15,110 --> 00:13:21,260
for example and that's kind of why you

289
00:13:19,370 --> 00:13:22,640
need a Bitcoin client you may have ever

290
00:13:21,260 --> 00:13:25,069
wondered like why do I need a Bitcoin

291
00:13:22,640 --> 00:13:26,300
client because it's got a handle of the

292
00:13:25,070 --> 00:13:32,630
scripting language stuff and create

293
00:13:26,300 --> 00:13:36,620
programs on the fly so as I mentioned

294
00:13:32,630 --> 00:13:38,959
the coinbase transaction is simply the

295
00:13:36,620 --> 00:13:41,480
first transaction in a block and it has

296
00:13:38,959 --> 00:13:43,430
no inputs so here we've encoded that

297
00:13:41,480 --> 00:13:46,130
very much straightforwardly we've made a

298
00:13:43,430 --> 00:13:50,120
function called make transaction

299
00:13:46,130 --> 00:13:54,920
coinbase it receives a value and I went

300
00:13:50,120 --> 00:14:01,459
a little far thought I was in the other

301
00:13:54,920 --> 00:14:02,899
window so it receives the same value and

302
00:14:01,459 --> 00:14:10,729
data so that says you know how much

303
00:14:02,899 --> 00:14:13,329
we're going to generate and then it has

304
00:14:10,730 --> 00:14:15,980
no inputs as I said most importantly

305
00:14:13,329 --> 00:14:18,380
also we make a special function here

306
00:14:15,980 --> 00:14:20,589
just to make an empty transaction which

307
00:14:18,380 --> 00:14:23,360
we're going to see why that's useful

308
00:14:20,589 --> 00:14:25,220
very shortly and that's just pretty

309
00:14:23,360 --> 00:14:27,740
straightforwardly making a transaction

310
00:14:25,220 --> 00:14:31,550
with no inputs and no outputs which is

311
00:14:27,740 --> 00:14:38,240
generally invalid so real quick I want

312
00:14:31,550 --> 00:14:39,859
to look at which one is it five I want

313
00:14:38,240 --> 00:14:42,470
to look at some hashing just to make

314
00:14:39,860 --> 00:14:50,660
sure again like I said that everyone is

315
00:14:42,470 --> 00:14:52,970
on the same page so in Python there's a

316
00:14:50,660 --> 00:14:55,279
nice little library called hashlib that

317
00:14:52,970 --> 00:14:57,260
you can import I'm gonna make a little

318
00:14:55,279 --> 00:14:59,810
convenience function here called sha-2

319
00:14:57,260 --> 00:15:01,819
which if you've ever used say the UNIX

320
00:14:59,810 --> 00:15:03,560
shell or bash shell or whatever there's

321
00:15:01,820 --> 00:15:05,540
usually a command similar to this

322
00:15:03,560 --> 00:15:09,369
that'll just take any random data and

323
00:15:05,540 --> 00:15:12,469
give you a digest that's this little bit

324
00:15:09,370 --> 00:15:14,839
so for example if we send into sha to

325
00:15:12,470 --> 00:15:18,649
the string test we get this unique

326
00:15:14,839 --> 00:15:21,380
identifier if we do it again we get the

327
00:15:18,649 --> 00:15:23,420
same unique identifier which we can

328
00:15:21,380 --> 00:15:26,960
verify by asking Python to

329
00:15:23,420 --> 00:15:30,410
if the shot to of test is indeed the

330
00:15:26,960 --> 00:15:33,200
same as the shot to of test if we do the

331
00:15:30,410 --> 00:15:35,900
shot to of test zero we get this value

332
00:15:33,200 --> 00:15:36,500
and if we do the shot to test one we get

333
00:15:35,900 --> 00:15:39,380
this value

334
00:15:36,500 --> 00:15:42,110
and notice how very different they are

335
00:15:39,380 --> 00:15:45,020
even though the inputs were just

336
00:15:42,110 --> 00:15:47,600
different by one character almost every

337
00:15:45,020 --> 00:15:48,980
character in the outputs is different so

338
00:15:47,600 --> 00:15:51,470
that's kind of what I meant about the

339
00:15:48,980 --> 00:15:55,670
randomized property of hashing being

340
00:15:51,470 --> 00:15:58,310
very important so finally if we take a

341
00:15:55,670 --> 00:16:02,810
bit more complicated data say your Bill

342
00:15:58,310 --> 00:16:04,939
of Rights we can see hey here's the top

343
00:16:02,810 --> 00:16:06,859
10 Bill of Rights I'm gonna make another

344
00:16:04,940 --> 00:16:09,170
little convenience function which is

345
00:16:06,860 --> 00:16:11,510
going to take a pair of data because I

346
00:16:09,170 --> 00:16:15,110
have a short version and a long version

347
00:16:11,510 --> 00:16:20,450
of each right and that's just gonna make

348
00:16:15,110 --> 00:16:22,790
a shot too of both of those together and

349
00:16:20,450 --> 00:16:25,310
so now I'm gonna write a nice little

350
00:16:22,790 --> 00:16:27,439
loop this is very straightforward code

351
00:16:25,310 --> 00:16:30,739
where we say hey we want to hash all of

352
00:16:27,440 --> 00:16:32,900
these rights I'm gonna make use of a

353
00:16:30,740 --> 00:16:36,110
convenience function in Python that will

354
00:16:32,900 --> 00:16:39,650
easily let us enumerate them and then

355
00:16:36,110 --> 00:16:45,650
for each right I will enumerate it so we

356
00:16:39,650 --> 00:16:47,930
can see the hash for one here is this

357
00:16:45,650 --> 00:16:53,660
guy so just kind of driving the point

358
00:16:47,930 --> 00:16:55,189
home all very much unique data and it's

359
00:16:53,660 --> 00:16:57,650
repeatable this is just a different way

360
00:16:55,190 --> 00:17:00,380
to write this loop and we know it's the

361
00:16:57,650 --> 00:17:04,520
same for the output and yet again

362
00:17:00,380 --> 00:17:07,369
another way same output so hopefully

363
00:17:04,520 --> 00:17:12,280
we're all 100% on the same page with

364
00:17:07,369 --> 00:17:16,729
regards to hashing the reason why is

365
00:17:12,280 --> 00:17:19,550
because oh I wonder if I can start it

366
00:17:16,730 --> 00:17:22,000
from now I see it's already going

367
00:17:19,550 --> 00:17:22,000
somewhere

368
00:17:32,860 --> 00:17:43,879
hmm okay that's thank you thank you

369
00:17:39,169 --> 00:17:47,740
perfect timing perfect timing let's see

370
00:17:43,880 --> 00:17:53,720
if I can just cycle it no ah there we go

371
00:17:47,740 --> 00:17:55,340
all right so with all that in mind we're

372
00:17:53,720 --> 00:17:59,450
come back a little more concrete again

373
00:17:55,340 --> 00:18:01,490
so I make a little function here to just

374
00:17:59,450 --> 00:18:04,340
turn any random Python data into

375
00:18:01,490 --> 00:18:07,700
something hashable and most Python data

376
00:18:04,340 --> 00:18:08,678
structures are hashable already I went

377
00:18:07,700 --> 00:18:11,750
too far

378
00:18:08,679 --> 00:18:13,610
and so we just returned them as is

379
00:18:11,750 --> 00:18:16,909
otherwise we'll convert them to a string

380
00:18:13,610 --> 00:18:19,070
and strings are hashable so then I make

381
00:18:16,909 --> 00:18:22,220
a little function sha-256 digests

382
00:18:19,070 --> 00:18:23,899
exactly like that sha-2 function and it

383
00:18:22,220 --> 00:18:25,970
makes sure that data is horrible and

384
00:18:23,899 --> 00:18:27,379
returns the digest and then I make this

385
00:18:25,970 --> 00:18:28,640
little interesting function that we're

386
00:18:27,380 --> 00:18:32,990
gonna look at in depth in a minute

387
00:18:28,640 --> 00:18:35,960
called sha-256 digest reduce and the

388
00:18:32,990 --> 00:18:39,350
purpose of this is to take a list of

389
00:18:35,960 --> 00:18:43,340
shots 256 values append them together

390
00:18:39,350 --> 00:18:45,559
and create a new one why do we want to

391
00:18:43,340 --> 00:18:49,250
do that because we want to sign our

392
00:18:45,559 --> 00:18:51,649
transactions with a Merkel tree a Merkel

393
00:18:49,250 --> 00:18:54,260
tree essentially if we start here at the

394
00:18:51,649 --> 00:18:56,029
bottom these are the data blocks so each

395
00:18:54,260 --> 00:18:59,629
of our data blocks is going to be a

396
00:18:56,029 --> 00:19:03,890
transaction so we will hash each of our

397
00:18:59,630 --> 00:19:07,820
transactions which will then allow us to

398
00:19:03,890 --> 00:19:11,929
take each pair of transactions and hash

399
00:19:07,820 --> 00:19:14,779
them together and then each other pair

400
00:19:11,929 --> 00:19:17,360
and so on and so forth until you get one

401
00:19:14,779 --> 00:19:21,590
overall hash value and as we saw before

402
00:19:17,360 --> 00:19:24,408
each hash is unique so essentially this

403
00:19:21,590 --> 00:19:27,559
is a unique identifier for all of the

404
00:19:24,409 --> 00:19:29,270
transactions it's pretty clever stuff

405
00:19:27,559 --> 00:19:36,139
from this guy named Merkel that's why he

406
00:19:29,270 --> 00:19:37,549
got a tree named after so this is one of

407
00:19:36,140 --> 00:19:40,730
the more complicated functions that

408
00:19:37,549 --> 00:19:44,029
we'll look at and this is my calculate

409
00:19:40,730 --> 00:19:45,470
Merkel root function and it has a nice

410
00:19:44,029 --> 00:19:46,880
little dock string which is planes with

411
00:19:45,470 --> 00:19:49,580
it

412
00:19:46,880 --> 00:19:52,130
I will also explain what it does that's

413
00:19:49,580 --> 00:19:58,490
my notes all right

414
00:19:52,130 --> 00:20:00,680
so essentially as I said you know we

415
00:19:58,490 --> 00:20:04,040
were looking at the diagram there we're

416
00:20:00,680 --> 00:20:05,540
gonna take each of the hashes into pairs

417
00:20:04,040 --> 00:20:08,330
I'm sorry we're gonna take each thing

418
00:20:05,540 --> 00:20:11,360
make it into the hashes and then take

419
00:20:08,330 --> 00:20:14,840
each pair of hashes and move up and up

420
00:20:11,360 --> 00:20:17,750
until we get exactly one hash so that is

421
00:20:14,840 --> 00:20:22,399
why we made an empty transaction thing

422
00:20:17,750 --> 00:20:26,450
so that we can hear oh I'm so expecting

423
00:20:22,400 --> 00:20:30,230
it to let me select it so here at this

424
00:20:26,450 --> 00:20:33,280
line we test to see first if there's any

425
00:20:30,230 --> 00:20:36,860
transactions and if there are we break

426
00:20:33,280 --> 00:20:38,570
transactions into pairs padding with

427
00:20:36,860 --> 00:20:40,520
empty transactions so if there's one

428
00:20:38,570 --> 00:20:42,830
three any odd number we're gonna end up

429
00:20:40,520 --> 00:20:44,750
with an even number just one of the

430
00:20:42,830 --> 00:20:46,639
transactions is empty which is no

431
00:20:44,750 --> 00:20:49,250
problem for us because that's our

432
00:20:46,640 --> 00:20:54,310
algorithm that's our protocol we've now

433
00:20:49,250 --> 00:20:54,310
specified our box chain protocol in code

434
00:20:54,680 --> 00:21:11,060
oh and I have a debug print here nice

435
00:20:57,550 --> 00:21:12,740
that's a good time for that once I have

436
00:21:11,060 --> 00:21:15,110
made sure that I have an even number of

437
00:21:12,740 --> 00:21:19,310
transactions I then hash each of those

438
00:21:15,110 --> 00:21:24,290
individually and then while I have more

439
00:21:19,310 --> 00:21:27,800
than two hashes I consecutively make a

440
00:21:24,290 --> 00:21:29,960
new list of hashes by using that digest

441
00:21:27,800 --> 00:21:32,450
reduce function that takes a pair and

442
00:21:29,960 --> 00:21:35,720
makes one or takes any number and makes

443
00:21:32,450 --> 00:21:40,580
one we do that to collapse it and

444
00:21:35,720 --> 00:21:42,710
basically we end up with this tree so

445
00:21:40,580 --> 00:21:44,960
the final value after we're sure that

446
00:21:42,710 --> 00:21:48,970
there's only two is the root we return

447
00:21:44,960 --> 00:21:48,970
that root and boom we have our signature

448
00:21:55,800 --> 00:22:06,340
so the can you repeat your question I

449
00:21:59,530 --> 00:22:08,290
just wanna make sure okay I get yes so

450
00:22:06,340 --> 00:22:10,540
the question is every time you had a new

451
00:22:08,290 --> 00:22:12,700
transaction do you keep recalculating

452
00:22:10,540 --> 00:22:13,510
this and the answer is at least in my

453
00:22:12,700 --> 00:22:19,780
implementation

454
00:22:13,510 --> 00:22:23,470
no because transactions are part of the

455
00:22:19,780 --> 00:22:25,540
block so you don't get a block until you

456
00:22:23,470 --> 00:22:28,270
have a complete list of transactions and

457
00:22:25,540 --> 00:22:32,020
so you will only calculate that route

458
00:22:28,270 --> 00:22:43,330
once in in my case so we'll look at that

459
00:22:32,020 --> 00:22:45,750
in a second and actually yeah for for

460
00:22:43,330 --> 00:22:45,750
that

461
00:22:56,430 --> 00:23:03,270
okay yes so that is the next slide so

462
00:23:00,060 --> 00:23:06,540
now this is the next most complicated

463
00:23:03,270 --> 00:23:11,150
bit and this is the mining process for

464
00:23:06,540 --> 00:23:17,399
this blockchain that we've invented the

465
00:23:11,150 --> 00:23:19,410
idea is that we calculate the merkel

466
00:23:17,400 --> 00:23:21,750
route first was the very first thing we

467
00:23:19,410 --> 00:23:25,890
do we calculate the Merkel route for all

468
00:23:21,750 --> 00:23:29,760
of these transactions and then that will

469
00:23:25,890 --> 00:23:32,430
be included in the block here so I have

470
00:23:29,760 --> 00:23:34,560
an alighted function make block header

471
00:23:32,430 --> 00:23:37,890
that just receives a bunch of data and

472
00:23:34,560 --> 00:23:39,450
returns to you a new structure one of

473
00:23:37,890 --> 00:23:42,230
the most important pieces of that data

474
00:23:39,450 --> 00:23:45,000
is of course the previous block hash and

475
00:23:42,230 --> 00:23:48,870
the route the medical route that we

476
00:23:45,000 --> 00:23:51,900
talked about and then a little bit later

477
00:23:48,870 --> 00:23:54,060
down here where we start the making of

478
00:23:51,900 --> 00:23:56,340
next block that's where we add in the

479
00:23:54,060 --> 00:23:59,129
transactions so we merge this header

480
00:23:56,340 --> 00:24:01,560
which has the header data and then we

481
00:23:59,130 --> 00:24:03,150
add in the transactions to the end so

482
00:24:01,560 --> 00:24:05,220
that they're all in there and they're

483
00:24:03,150 --> 00:24:07,770
signed by this route so that can then be

484
00:24:05,220 --> 00:24:10,470
verified by other clients right like if

485
00:24:07,770 --> 00:24:12,090
I tried to make a fake transaction go

486
00:24:10,470 --> 00:24:23,190
into things it would need to have a

487
00:24:12,090 --> 00:24:25,379
correct vertical route a little bit yes

488
00:24:23,190 --> 00:24:31,620
we got one we got a couple more steps

489
00:24:25,380 --> 00:24:36,210
here so there is also involved in it a

490
00:24:31,620 --> 00:24:38,939
nonce so each block is gonna have a

491
00:24:36,210 --> 00:24:41,880
particular like secret value that's

492
00:24:38,940 --> 00:24:45,990
somewhat public in that it's included

493
00:24:41,880 --> 00:24:49,710
with it and what happens is you need to

494
00:24:45,990 --> 00:24:52,080
find a hash that combines in some way

495
00:24:49,710 --> 00:24:55,290
their knots and your knots

496
00:24:52,080 --> 00:24:57,149
which in my case I just add one to it so

497
00:24:55,290 --> 00:25:00,930
let's say we're mining the Genesis block

498
00:24:57,150 --> 00:25:03,870
right the Genesis block its previous

499
00:25:00,930 --> 00:25:05,820
nonce is going to be 0 it's not gonna

500
00:25:03,870 --> 00:25:08,459
have a previous hash because it's the

501
00:25:05,820 --> 00:25:11,700
first block

502
00:25:08,460 --> 00:25:13,820
and usually you'll do something cheeky

503
00:25:11,700 --> 00:25:17,820
like the only transaction and it will

504
00:25:13,820 --> 00:25:20,460
have some like news headline in it with

505
00:25:17,820 --> 00:25:26,520
the date so you can prove like my

506
00:25:20,460 --> 00:25:29,490
blockchain was created this day so we

507
00:25:26,520 --> 00:25:32,990
need that nonce as I said and we need a

508
00:25:29,490 --> 00:25:35,250
difficulty the way that difficulty is

509
00:25:32,990 --> 00:25:38,970
defined in this blockchain and in

510
00:25:35,250 --> 00:25:40,860
several others is basically the output

511
00:25:38,970 --> 00:25:42,929
of your hash remember we looked at the

512
00:25:40,860 --> 00:25:45,029
like the Bill of Rights each each one

513
00:25:42,929 --> 00:25:46,890
had like a different long string the

514
00:25:45,029 --> 00:25:49,770
output of your hash needs to have a

515
00:25:46,890 --> 00:25:51,770
certain number of leading zeroes or some

516
00:25:49,770 --> 00:25:56,549
other value that you decide it's

517
00:25:51,770 --> 00:25:58,350
traditionally zeros so in this case for

518
00:25:56,549 --> 00:26:00,299
the Genesis block we start out with a

519
00:25:58,350 --> 00:26:03,959
difficulty of one which means it needs

520
00:26:00,299 --> 00:26:06,809
to have at least one leading zero so you

521
00:26:03,960 --> 00:26:08,640
take their nots you take your nots you

522
00:26:06,809 --> 00:26:13,320
mix them together in this case I just

523
00:26:08,640 --> 00:26:16,380
add them together in a string and oh bug

524
00:26:13,320 --> 00:26:21,059
in my code oh no I didn't it's right

525
00:26:16,380 --> 00:26:25,529
there and you add in the proof which is

526
00:26:21,059 --> 00:26:29,039
just a random data so they're not plus

527
00:26:25,529 --> 00:26:31,529
your knots plus some random data equals

528
00:26:29,039 --> 00:26:34,020
a new hash that has some number of

529
00:26:31,529 --> 00:26:35,760
leading zeros if it has enough leading

530
00:26:34,020 --> 00:26:38,668
zeros you have found a correct block

531
00:26:35,760 --> 00:26:40,529
which means now you can push to the

532
00:26:38,669 --> 00:26:42,750
other nodes in the network saying hey I

533
00:26:40,529 --> 00:26:45,659
found a new block it's got these

534
00:26:42,750 --> 00:26:50,130
transactions it is this difficulty

535
00:26:45,659 --> 00:26:52,710
here's my knots here's my proof now

536
00:26:50,130 --> 00:26:55,200
other nodes can go and they can run the

537
00:26:52,710 --> 00:26:57,330
same transaction they can take your

538
00:26:55,200 --> 00:26:59,640
proof that you gave them they can take

539
00:26:57,330 --> 00:27:02,220
the previous blocks knots and your knots

540
00:26:59,640 --> 00:27:06,890
and they can get the same hash and they

541
00:27:02,220 --> 00:27:11,960
can say yes correct that is a good block

542
00:27:06,890 --> 00:27:18,149
now the next thing is what determines

543
00:27:11,960 --> 00:27:20,039
the blockchain if there are say multiple

544
00:27:18,149 --> 00:27:20,800
people who find the same block at the

545
00:27:20,039 --> 00:27:24,640
same time

546
00:27:20,800 --> 00:27:29,050
and that comes down to longest chain

547
00:27:24,640 --> 00:27:31,570
wins however it's slightly a misnomer

548
00:27:29,050 --> 00:27:33,840
because they actually mean the chain

549
00:27:31,570 --> 00:27:37,629
with the largest amount of difficulty

550
00:27:33,840 --> 00:27:39,520
summed up because otherwise you could

551
00:27:37,630 --> 00:27:43,180
make a bunch of really really small

552
00:27:39,520 --> 00:27:45,639
blocks with few transactions and low

553
00:27:43,180 --> 00:27:49,060
difficulty and just kind of spam the

554
00:27:45,640 --> 00:27:50,890
network and just take over right so

555
00:27:49,060 --> 00:27:53,530
basically the difficulty is always

556
00:27:50,890 --> 00:27:57,760
rising and there's usually some kind of

557
00:27:53,530 --> 00:27:59,950
timing factor where you say you know we

558
00:27:57,760 --> 00:28:04,960
want to generate X number of blocks an

559
00:27:59,950 --> 00:28:07,150
hour on average so every thousand blocks

560
00:28:04,960 --> 00:28:11,560
we're gonna check and we're gonna see

561
00:28:07,150 --> 00:28:14,980
how many we generated and if it met our

562
00:28:11,560 --> 00:28:16,570
goal then cool but if it was too many or

563
00:28:14,980 --> 00:28:20,020
too little we're gonna raise or lower

564
00:28:16,570 --> 00:28:24,100
the difficulty and that is pretty much

565
00:28:20,020 --> 00:28:25,950
how mining works in completion it is not

566
00:28:24,100 --> 00:28:35,740
any more complicated than that it's all

567
00:28:25,950 --> 00:28:36,930
hashes proofs and a chain of custody did

568
00:28:35,740 --> 00:28:46,600
that answer your question

569
00:28:36,930 --> 00:28:48,240
cool so the transactions take as long as

570
00:28:46,600 --> 00:28:51,189
they take you can't you can't really

571
00:28:48,240 --> 00:28:54,580
estimate well you can only estimate I

572
00:28:51,190 --> 00:28:56,170
should say because it could each time

573
00:28:54,580 --> 00:29:00,520
that you're doing one of these random

574
00:28:56,170 --> 00:29:03,010
things you're just guessing so each time

575
00:29:00,520 --> 00:29:06,430
you have the same chance to find a

576
00:29:03,010 --> 00:29:08,290
winning block right so just like you

577
00:29:06,430 --> 00:29:11,560
could flip a coin 100 times and

578
00:29:08,290 --> 00:29:14,889
generally it's gonna be 50/50 there's no

579
00:29:11,560 --> 00:29:17,919
reason why it can't be 70/30 you know

580
00:29:14,890 --> 00:29:19,960
what I mean so you could just get so

581
00:29:17,920 --> 00:29:23,800
unlucky and just never find the block or

582
00:29:19,960 --> 00:29:27,880
you could find two back-to-back it could

583
00:29:23,800 --> 00:29:30,850
happen but that's why the difficulty is

584
00:29:27,880 --> 00:29:32,470
checked at a goal at a goal point so

585
00:29:30,850 --> 00:29:33,980
they say like okay cool we've made a

586
00:29:32,470 --> 00:29:37,340
thousand blocks

587
00:29:33,980 --> 00:29:39,409
and we wanted that to take a week but

588
00:29:37,340 --> 00:29:42,649
actually it took two days

589
00:29:39,409 --> 00:29:45,500
so now let's double the difficulty and

590
00:29:42,649 --> 00:29:47,959
then oops we only generated 10 blocks

591
00:29:45,500 --> 00:29:56,240
this week let's lower it and eventually

592
00:29:47,960 --> 00:29:59,149
it comes to an equilibrium alright so

593
00:29:56,240 --> 00:30:02,000
now we're going to attempt the live

594
00:29:59,149 --> 00:30:13,510
untested demo so get that get that sound

595
00:30:02,000 --> 00:30:13,510
effect ready okay you ready

596
00:30:27,020 --> 00:30:34,120
we should be able to actually I'm gonna

597
00:30:31,160 --> 00:30:34,120
make a little easier for myself

598
00:30:46,180 --> 00:30:51,710
all right so now we should be able to

599
00:30:49,190 --> 00:30:53,600
play with all the code that we were

600
00:30:51,710 --> 00:30:57,070
looking at because it's all in here now

601
00:30:53,600 --> 00:31:01,820
so for example we can say make

602
00:30:57,070 --> 00:31:04,970
transaction input and we can give it a

603
00:31:01,820 --> 00:31:08,149
previous TX ID hash in this case I'm

604
00:31:04,970 --> 00:31:13,160
just going to put some not real data and

605
00:31:08,150 --> 00:31:15,200
an index the index is important because

606
00:31:13,160 --> 00:31:17,300
as I said you know multiple inputs and

607
00:31:15,200 --> 00:31:20,120
multiple outputs in a transaction right

608
00:31:17,300 --> 00:31:22,100
so you need to know which transaction

609
00:31:20,120 --> 00:31:26,179
are you referencing that's that's the

610
00:31:22,100 --> 00:31:29,389
purpose of the index and then finally

611
00:31:26,180 --> 00:31:31,520
arbitrary data so in Bitcoin that's

612
00:31:29,390 --> 00:31:35,330
going to be some binary string with a

613
00:31:31,520 --> 00:31:38,240
bunch of like encoded data which is

614
00:31:35,330 --> 00:31:40,129
gonna equal a program or a script which

615
00:31:38,240 --> 00:31:42,290
is usually gonna say hey output goes

616
00:31:40,130 --> 00:31:44,600
here or as I said sometimes it's abused

617
00:31:42,290 --> 00:31:47,720
for other purposes like hiding data in

618
00:31:44,600 --> 00:31:52,449
the blockchain in our case it can be

619
00:31:47,720 --> 00:31:55,700
whatever we want so we're just gonna say

620
00:31:52,450 --> 00:31:58,220
Genesis live because we're gonna use

621
00:31:55,700 --> 00:32:05,540
this transaction I believe for the

622
00:31:58,220 --> 00:32:13,520
Genesis block so there we go so now we

623
00:32:05,540 --> 00:32:17,389
have a transaction we also are going to

624
00:32:13,520 --> 00:32:20,270
need well strictly speaking we'd

625
00:32:17,390 --> 00:32:22,850
probably want some kind of output and a

626
00:32:20,270 --> 00:32:24,470
coinbase transaction but I'm more just

627
00:32:22,850 --> 00:32:26,000
want to test the miner I assume that's

628
00:32:24,470 --> 00:32:27,650
probably what you guys want to see too

629
00:32:26,000 --> 00:32:29,510
so I'm not gonna worry too much about

630
00:32:27,650 --> 00:32:31,220
the correctness of what I put in this

631
00:32:29,510 --> 00:32:41,150
transaction we're just gonna see if it

632
00:32:31,220 --> 00:32:46,900
mines okay so we've got an input so now

633
00:32:41,150 --> 00:32:50,060
we need a transaction alright so

634
00:32:46,900 --> 00:32:54,410
transaction is gonna be

635
00:32:50,060 --> 00:32:59,330
make transaction and it's gonna take

636
00:32:54,410 --> 00:33:04,730
this input and have no outputs all right

637
00:32:59,330 --> 00:33:08,270
so recapping we've got a structure it is

638
00:33:04,730 --> 00:33:10,310
a transaction or TX it has no outputs

639
00:33:08,270 --> 00:33:13,930
and it has this input that we created

640
00:33:10,310 --> 00:33:16,820
here it's attempting to be a Genesis

641
00:33:13,930 --> 00:33:19,610
indication so I would normally put for

642
00:33:16,820 --> 00:33:23,139
example some data here indicating what

643
00:33:19,610 --> 00:33:23,139
today is and all that fun stuff all

644
00:33:23,440 --> 00:33:35,870
right so now we should be able to

645
00:33:32,090 --> 00:33:41,740
calculate the Merkel route on that so

646
00:33:35,870 --> 00:33:41,739
let's try that oh that's wrong

647
00:33:49,809 --> 00:34:02,619
and it has a problem ah thank you thank

648
00:33:57,340 --> 00:34:04,359
you thank you let's see if I just give

649
00:34:02,619 --> 00:34:09,879
it something I want to make sure it's

650
00:34:04,359 --> 00:34:12,909
just broken okay all right so what

651
00:34:09,879 --> 00:34:14,889
before it is not going to work with that

652
00:34:12,909 --> 00:34:15,339
and I'm not going to live fix that right

653
00:34:14,889 --> 00:34:17,679
now

654
00:34:15,339 --> 00:34:19,719
so we're gonna move on and if you want

655
00:34:17,679 --> 00:34:29,879
to see the mining demo see me right

656
00:34:19,719 --> 00:34:33,368
after this and I apologize womp alright

657
00:34:29,879 --> 00:34:35,739
so as I said there's a virtual machine

658
00:34:33,369 --> 00:34:36,369
involved typically transaction outputs

659
00:34:35,739 --> 00:34:38,348
are scripts

660
00:34:36,369 --> 00:34:40,539
that's essentially one of the most

661
00:34:38,349 --> 00:34:42,549
important takeaways that you can get

662
00:34:40,539 --> 00:34:46,119
from this whole discussion of what our

663
00:34:42,549 --> 00:34:47,739
transactions in the blockchain breathe a

664
00:34:46,119 --> 00:34:50,559
sigh of relief though because we're not

665
00:34:47,739 --> 00:34:52,299
gonna be implementing all that today but

666
00:34:50,559 --> 00:34:54,549
you know you can listen to me ramble on

667
00:34:52,299 --> 00:34:56,020
about it a little bit anyway what else

668
00:34:54,549 --> 00:34:58,690
do we use those things for well in

669
00:34:56,020 --> 00:35:00,579
aetherium they do smart contracts so

670
00:34:58,690 --> 00:35:02,589
they have a much more extensive virtual

671
00:35:00,579 --> 00:35:04,119
machine as I mentioned they have all the

672
00:35:02,589 --> 00:35:06,069
whole lot of facilities like you can say

673
00:35:04,119 --> 00:35:08,200
hey I want to source some data here and

674
00:35:06,069 --> 00:35:10,180
it'll give you an address essentially

675
00:35:08,200 --> 00:35:12,308
where you can store data and it's all

676
00:35:10,180 --> 00:35:14,828
hashed and distributed over the

677
00:35:12,309 --> 00:35:17,380
blockchain and all that fun stuff so

678
00:35:14,829 --> 00:35:23,440
it's like a little mini computer like an

679
00:35:17,380 --> 00:35:26,920
Arduino or something but in the box it's

680
00:35:23,440 --> 00:35:28,779
pretty weird it's pretty weird so how

681
00:35:26,920 --> 00:35:30,369
would we go about breaking this well you

682
00:35:28,779 --> 00:35:35,559
guys think about what is controllable

683
00:35:30,369 --> 00:35:38,579
and how exactly is a 51% attack executed

684
00:35:35,559 --> 00:35:42,730
and what can you do there so if you have

685
00:35:38,579 --> 00:35:44,680
more than more than half of the mining

686
00:35:42,730 --> 00:35:46,440
pool of the mining power if you're

687
00:35:44,680 --> 00:35:50,200
generating more than half of the blocks

688
00:35:46,440 --> 00:35:52,630
then everybody else you can do some

689
00:35:50,200 --> 00:35:56,049
nifty stuff for example the most famous

690
00:35:52,630 --> 00:35:57,880
one being a double spend attack so how

691
00:35:56,049 --> 00:35:59,200
does that work if my mining

692
00:35:57,880 --> 00:36:02,079
demonstration had worked

693
00:35:59,200 --> 00:36:02,830
we were then gonna do it but what we do

694
00:36:02,079 --> 00:36:07,000
essentially

695
00:36:02,830 --> 00:36:09,460
is you create a transaction with the

696
00:36:07,000 --> 00:36:12,010
node you don't control and you say hey I

697
00:36:09,460 --> 00:36:16,120
want to send these coins over here and

698
00:36:12,010 --> 00:36:18,370
they're like sure no problem bro and on

699
00:36:16,120 --> 00:36:22,230
the other side on your nodes that you

700
00:36:18,370 --> 00:36:25,390
control you just start building blocks

701
00:36:22,230 --> 00:36:29,920
because again the way that consensus

702
00:36:25,390 --> 00:36:31,900
works is longest chain wins so in your

703
00:36:29,920 --> 00:36:37,140
thing that you're doing you send those

704
00:36:31,900 --> 00:36:40,210
same tokens to an address you control so

705
00:36:37,140 --> 00:36:41,920
whoever is waiting on whatever service

706
00:36:40,210 --> 00:36:43,750
to see hey cool I got these coins from

707
00:36:41,920 --> 00:36:46,890
this person they're gonna see hey oh

708
00:36:43,750 --> 00:36:49,540
this is confirmed great no problem and

709
00:36:46,890 --> 00:36:54,549
they're gonna give you whatever you paid

710
00:36:49,540 --> 00:36:59,080
for potentially here hoping and then the

711
00:36:54,550 --> 00:37:02,740
hammer Falls and oh sorry your chain

712
00:36:59,080 --> 00:37:05,500
with four new blocks and a few

713
00:37:02,740 --> 00:37:08,290
confirmations is now preempted by my

714
00:37:05,500 --> 00:37:10,720
chain with eight new blocks and a bunch

715
00:37:08,290 --> 00:37:12,730
more confirmations sorry

716
00:37:10,720 --> 00:37:16,450
those coins didn't actually go there

717
00:37:12,730 --> 00:37:19,930
that transaction didn't happen and

718
00:37:16,450 --> 00:37:24,009
that's a double spend you literally just

719
00:37:19,930 --> 00:37:27,940
are able to do a shadow build of a block

720
00:37:24,010 --> 00:37:30,190
chain and then say hey this is the real

721
00:37:27,940 --> 00:37:35,950
thing and everyone has to listen to you

722
00:37:30,190 --> 00:37:44,170
because you have the most work that's

723
00:37:35,950 --> 00:37:46,210
the face I was hoping to see not too

724
00:37:44,170 --> 00:37:48,070
often we're gonna talk about the

725
00:37:46,210 --> 00:37:51,700
feasibility of all that stuff but it did

726
00:37:48,070 --> 00:37:54,790
recently happen to a Bitcoin offshoot

727
00:37:51,700 --> 00:37:58,419
blockchain and as if I recall correctly

728
00:37:54,790 --> 00:38:02,259
they were doing something crazy like 24

729
00:37:58,420 --> 00:38:04,450
or 26 blocks deep so people were like oh

730
00:38:02,260 --> 00:38:13,360
no yeah it's cool this is confirmed by

731
00:38:04,450 --> 00:38:15,919
13 blocks below oh no so it happens but

732
00:38:13,360 --> 00:38:18,650
it takes a whole lot of effort and

733
00:38:15,920 --> 00:38:21,800
money like we'll talk about it's more

734
00:38:18,650 --> 00:38:25,850
later as I set mmm-hmm

735
00:38:21,800 --> 00:38:28,130
so there are many attacks against smart

736
00:38:25,850 --> 00:38:30,259
contracts these slides I believe will be

737
00:38:28,130 --> 00:38:31,790
available to everyone after and that's a

738
00:38:30,260 --> 00:38:35,360
nice little link with two nice little

739
00:38:31,790 --> 00:38:37,430
article the most basic is under flow and

740
00:38:35,360 --> 00:38:40,700
over flow so as I said there's a virtual

741
00:38:37,430 --> 00:38:43,279
machine in here in aetherium you can

742
00:38:40,700 --> 00:38:46,220
make a contract where you do stuff like

743
00:38:43,280 --> 00:38:48,380
say okay I've got this public value it's

744
00:38:46,220 --> 00:38:50,569
a variable imma call it zero and I'm

745
00:38:48,380 --> 00:38:53,360
gonna set it to zero and you got this

746
00:38:50,570 --> 00:38:56,960
other value which is au int that's a

747
00:38:53,360 --> 00:38:59,000
like C language e talk for an unsigned

748
00:38:56,960 --> 00:39:01,610
integer so that means it should only be

749
00:38:59,000 --> 00:39:04,370
positive numbers so you're gonna say hey

750
00:39:01,610 --> 00:39:06,590
there's gonna be max 2 to the 256 minus

751
00:39:04,370 --> 00:39:08,410
1 that happens to be the largest integer

752
00:39:06,590 --> 00:39:11,750
that that virtual machine can represent

753
00:39:08,410 --> 00:39:13,700
so if you are completely unaware of this

754
00:39:11,750 --> 00:39:15,710
fact or have never played around with C

755
00:39:13,700 --> 00:39:18,109
and gotten bitten by all this stuff in

756
00:39:15,710 --> 00:39:21,350
the past then you will be completely

757
00:39:18,110 --> 00:39:26,990
surprised to find out that 0 minus 1 is

758
00:39:21,350 --> 00:39:30,290
actually 2 to the 256 minus 1 and 2 to

759
00:39:26,990 --> 00:39:33,259
the 256 minus 1 plus 1 over flows back

760
00:39:30,290 --> 00:39:34,759
to zero so the numbers wrap around so

761
00:39:33,260 --> 00:39:37,670
you would expect maybe some kind of

762
00:39:34,760 --> 00:39:42,110
error like number out of range nope

763
00:39:37,670 --> 00:39:45,200
it just happily processes the code so

764
00:39:42,110 --> 00:39:47,870
it's basically an old-school seer alive

765
00:39:45,200 --> 00:39:52,549
on the blockchain the next biggest thing

766
00:39:47,870 --> 00:39:54,589
is the Dao hack so aetherium did a big

767
00:39:52,550 --> 00:39:59,720
distributed autonomous organization

768
00:39:54,590 --> 00:40:02,270
thing and a very smart person read

769
00:39:59,720 --> 00:40:04,819
through the code and found an issue with

770
00:40:02,270 --> 00:40:06,830
it and exploited it for all it was worth

771
00:40:04,820 --> 00:40:10,130
to the point where they went back on

772
00:40:06,830 --> 00:40:14,319
code is law and hard fork the blockchain

773
00:40:10,130 --> 00:40:17,690
to say that that guy never got his money

774
00:40:14,320 --> 00:40:21,800
so how did that happen recursive

775
00:40:17,690 --> 00:40:26,090
function calls are dangerous especially

776
00:40:21,800 --> 00:40:31,040
when you do work on either side of it so

777
00:40:26,090 --> 00:40:33,470
if we imagine this is the code for the

778
00:40:31,040 --> 00:40:36,440
contract and these are some breakpoints

779
00:40:33,470 --> 00:40:41,089
let's kind of walk through so if we want

780
00:40:36,440 --> 00:40:42,860
to withdraw money from the Dow we say

781
00:40:41,090 --> 00:40:45,980
hey I would like to withdraw some amount

782
00:40:42,860 --> 00:40:49,160
and it said okay cool it checks to make

783
00:40:45,980 --> 00:40:57,290
sure that the sender has enough money

784
00:40:49,160 --> 00:41:04,310
and if it does it uses this call to send

785
00:40:57,290 --> 00:41:06,770
out the money and I believe I say and I

786
00:41:04,310 --> 00:41:09,500
believe this is solidity for basically

787
00:41:06,770 --> 00:41:13,460
saying return that amount now the issue

788
00:41:09,500 --> 00:41:17,600
here is that this makes a recursive call

789
00:41:13,460 --> 00:41:22,070
and this is where it actually subtracts

790
00:41:17,600 --> 00:41:24,080
the money so the issue is that in a

791
00:41:22,070 --> 00:41:25,880
virtual machine you often have a stack

792
00:41:24,080 --> 00:41:29,150
and you may have heard of this website

793
00:41:25,880 --> 00:41:32,420
called stack overflow well if you have

794
00:41:29,150 --> 00:41:34,220
too many things on the stack the stack

795
00:41:32,420 --> 00:41:36,710
will overflow and stop running so this

796
00:41:34,220 --> 00:41:39,020
guy found out that basically for example

797
00:41:36,710 --> 00:41:42,920
he could send in 20 30 whatever

798
00:41:39,020 --> 00:41:45,440
transactions and most of them would send

799
00:41:42,920 --> 00:41:48,110
out but then the stack would crash and

800
00:41:45,440 --> 00:41:49,610
it couldn't unwind and subtract the

801
00:41:48,110 --> 00:41:58,880
money so he basically was getting like

802
00:41:49,610 --> 00:42:02,300
20 to 1 another interesting smart

803
00:41:58,880 --> 00:42:05,150
contracts attack is the ERC 20 short

804
00:42:02,300 --> 00:42:07,820
address attack so there's a standard in

805
00:42:05,150 --> 00:42:11,240
aetherium for making tokens on aetherium

806
00:42:07,820 --> 00:42:15,260
called ERC 20 and if you're not careful

807
00:42:11,240 --> 00:42:17,810
with your inputs on that people can just

808
00:42:15,260 --> 00:42:20,270
generate a lot more tokens than you

809
00:42:17,810 --> 00:42:21,980
expected them to what they do is they

810
00:42:20,270 --> 00:42:25,009
generate an address with a trailing zero

811
00:42:21,980 --> 00:42:26,540
which is not hard to do you just keep

812
00:42:25,010 --> 00:42:28,730
their own random data at it until you

813
00:42:26,540 --> 00:42:30,440
have trailing zeros rather than leading

814
00:42:28,730 --> 00:42:33,950
zeros same kind of concept as we looked

815
00:42:30,440 --> 00:42:34,610
at with the mining and then you send to

816
00:42:33,950 --> 00:42:38,270
that address

817
00:42:34,610 --> 00:42:39,920
but you remove the trailing 0 this

818
00:42:38,270 --> 00:42:43,670
causes a bug in the virtual

819
00:42:39,920 --> 00:42:46,310
machine to say okay there must be some

820
00:42:43,670 --> 00:42:51,740
magnitude error here let me multiply by

821
00:42:46,310 --> 00:42:54,680
10 on your amount just so you can you

822
00:42:51,740 --> 00:42:58,609
can essentially use this crafted address

823
00:42:54,680 --> 00:43:05,029
attack to say hey give me orders of

824
00:42:58,610 --> 00:43:08,540
magnitude more than you should so if you

825
00:43:05,030 --> 00:43:11,450
have a node or a wallet you're gonna

826
00:43:08,540 --> 00:43:14,000
want to make sure that your private keys

827
00:43:11,450 --> 00:43:17,359
are protected make sure you use a

828
00:43:14,000 --> 00:43:19,040
passphrase if your wallet is open also

829
00:43:17,360 --> 00:43:21,440
gonna have to do is get on your box and

830
00:43:19,040 --> 00:43:23,750
send those coins away or take the wallet

831
00:43:21,440 --> 00:43:25,430
because then they they own the private

832
00:43:23,750 --> 00:43:28,010
keys at that point if you instead have a

833
00:43:25,430 --> 00:43:31,100
passphrase than encrypted they can't do

834
00:43:28,010 --> 00:43:34,970
that also cold storage is a good option

835
00:43:31,100 --> 00:43:37,040
if you can if you have the technical

836
00:43:34,970 --> 00:43:38,540
ability which isn't too hard nowadays

837
00:43:37,040 --> 00:43:40,520
there's plenty of tools that'll get you

838
00:43:38,540 --> 00:43:42,110
started basically you can create an

839
00:43:40,520 --> 00:43:46,310
address that you can print on a sheet of

840
00:43:42,110 --> 00:43:48,740
paper and store that in a safe and that

841
00:43:46,310 --> 00:43:50,840
is probably generally going to be safer

842
00:43:48,740 --> 00:43:53,089
than an unprotected wallet sitting on

843
00:43:50,840 --> 00:43:56,410
your computer that any random person can

844
00:43:53,090 --> 00:43:58,820
steal make sure you read the manual

845
00:43:56,410 --> 00:44:00,740
there's generally gonna be lots of

846
00:43:58,820 --> 00:44:02,840
things in your configuration that'll

847
00:44:00,740 --> 00:44:05,240
allow you to do things like you know

848
00:44:02,840 --> 00:44:07,400
disallow certain clients make sure you

849
00:44:05,240 --> 00:44:10,310
set a password if you have RPC all that

850
00:44:07,400 --> 00:44:14,750
fun stuff if you don't people will just

851
00:44:10,310 --> 00:44:15,920
find your stuff and thinking firewalls

852
00:44:14,750 --> 00:44:17,840
and all that kind of basic stuff

853
00:44:15,920 --> 00:44:20,090
monitoring and alerting if you're

854
00:44:17,840 --> 00:44:22,760
running a service for example or if you

855
00:44:20,090 --> 00:44:25,520
really care about your your wallet

856
00:44:22,760 --> 00:44:28,010
contents you might want to have a

857
00:44:25,520 --> 00:44:30,320
process that is watching that and making

858
00:44:28,010 --> 00:44:35,060
sure that you know your funds aren't

859
00:44:30,320 --> 00:44:37,520
moving unless you moved it right all

860
00:44:35,060 --> 00:44:40,910
right so towards your questions sir

861
00:44:37,520 --> 00:44:46,190
the economic feasibility of a 51% attack

862
00:44:40,910 --> 00:44:48,259
is pretty not good in Bitcoin to do that

863
00:44:46,190 --> 00:44:49,850
you're going to need millions probably

864
00:44:48,260 --> 00:44:53,060
at this point billions of dollars in

865
00:44:49,850 --> 00:44:53,450
electricity and gear so it's kind of

866
00:44:53,060 --> 00:44:55,790
more

867
00:44:53,450 --> 00:44:59,029
of a problem in smaller chains there's

868
00:44:55,790 --> 00:45:02,420
any random quote-unquote coin or

869
00:44:59,030 --> 00:45:04,880
altcoin is probably not gonna have

870
00:45:02,420 --> 00:45:06,920
enough hashing power to stop a serious

871
00:45:04,880 --> 00:45:07,220
miner who decides that they want to own

872
00:45:06,920 --> 00:45:10,160
it

873
00:45:07,220 --> 00:45:12,919
so definitely tread carefully in the

874
00:45:10,160 --> 00:45:15,020
altcoin world make sure you look at the

875
00:45:12,920 --> 00:45:18,109
difficulty rate the hash power all that

876
00:45:15,020 --> 00:45:19,460
fun stuff and like any other software

877
00:45:18,109 --> 00:45:22,098
there's gonna be patches make sure you

878
00:45:19,460 --> 00:45:24,490
stay up-to-date with stuff just a few

879
00:45:22,099 --> 00:45:26,570
days ago there was a Bitcoin dispatch

880
00:45:24,490 --> 00:45:28,040
basically someone found you could send

881
00:45:26,570 --> 00:45:29,570
it to crafted transaction because

882
00:45:28,040 --> 00:45:31,880
remember the outputs of the transactions

883
00:45:29,570 --> 00:45:35,839
are scripts that would actually crash

884
00:45:31,880 --> 00:45:37,880
the client and then a gentleman over

885
00:45:35,839 --> 00:45:39,770
there informed me last night that this

886
00:45:37,880 --> 00:45:42,859
has actually been escalated now to a

887
00:45:39,770 --> 00:45:45,470
possible Bitcoin infinite inflation bug

888
00:45:42,859 --> 00:45:49,279
which has now been confirmed and given a

889
00:45:45,470 --> 00:45:51,529
CVE number so make sure you stay up to

890
00:45:49,280 --> 00:45:55,099
date and kind of as I mentioned before

891
00:45:51,530 --> 00:45:58,430
the protocol here has changed the

892
00:45:55,099 --> 00:46:00,170
protocol is different you know what I

893
00:45:58,430 --> 00:46:02,660
mean there's no specification they just

894
00:46:00,170 --> 00:46:04,220
made this big patch the protocol has

895
00:46:02,660 --> 00:46:07,879
changed so that's that's the big deal

896
00:46:04,220 --> 00:46:09,970
keep in mind to me so how do you protect

897
00:46:07,880 --> 00:46:12,530
yourself in the smart contract world

898
00:46:09,970 --> 00:46:14,180
avoid or interesting issues make sure

899
00:46:12,530 --> 00:46:14,839
you think it all out make sure you do

900
00:46:14,180 --> 00:46:17,299
all the work

901
00:46:14,839 --> 00:46:18,980
before you call somewhere else because

902
00:46:17,300 --> 00:46:21,380
you don't know what it's gonna happen

903
00:46:18,980 --> 00:46:23,349
there you want to make sure you know all

904
00:46:21,380 --> 00:46:25,670
your ducks in a row

905
00:46:23,349 --> 00:46:27,470
be careful of overflows and under flows

906
00:46:25,670 --> 00:46:30,109
think like a seed programmer be

907
00:46:27,470 --> 00:46:32,569
defensive use a library there's a safe

908
00:46:30,109 --> 00:46:35,299
math library out there that will take

909
00:46:32,569 --> 00:46:36,710
care of a lot of this for you make sure

910
00:46:35,300 --> 00:46:39,079
you're checking the links of addresses

911
00:46:36,710 --> 00:46:41,329
and other data and there's a nifty

912
00:46:39,079 --> 00:46:44,150
little thing called aetherium fiddle

913
00:46:41,329 --> 00:46:49,099
which will let you build and test smart

914
00:46:44,150 --> 00:46:53,060
contracts online and test them test them

915
00:46:49,099 --> 00:46:55,010
and test them so any questions if you're

916
00:46:53,060 --> 00:46:57,890
still awake if you want to talk to me

917
00:46:55,010 --> 00:46:59,089
hit me up on IRC or hit us up at

918
00:46:57,890 --> 00:47:00,950
null-space labs

919
00:46:59,089 --> 00:47:03,549
starting at the end of October we're

920
00:47:00,950 --> 00:47:07,299
gonna have a Halloween party hopefully

921
00:47:03,550 --> 00:47:07,300
and of course you have me a drink

922
00:47:09,880 --> 00:47:17,459
[Applause]

923
00:47:15,199 --> 00:47:22,849
so does anyone have any questions or did

924
00:47:17,459 --> 00:47:22,848
I answer them all during ha yes sir

925
00:47:36,619 --> 00:47:43,409
I'm not sure offhand but I do know along

926
00:47:39,959 --> 00:47:47,638
those lines that there is a fair bit of

927
00:47:43,409 --> 00:47:51,389
work and research into partial use of

928
00:47:47,639 --> 00:47:53,369
rework sorry reusing of your work so I

929
00:47:51,389 --> 00:47:56,309
believe that there's probably a good

930
00:47:53,369 --> 00:47:58,829
case for making those empty transaction

931
00:47:56,309 --> 00:48:01,109
blocks getting you a good way into the

932
00:47:58,829 --> 00:48:03,089
computation that you can then reuse to

933
00:48:01,109 --> 00:48:04,558
be even faster at mining it sounds like

934
00:48:03,089 --> 00:48:12,119
a very interesting strategy and I'll

935
00:48:04,559 --> 00:48:14,099
need to look at that anybody else so

936
00:48:12,119 --> 00:48:17,669
yeah so for Bitcoin you have to have a

937
00:48:14,099 --> 00:48:20,669
certain number of miners keepers of

938
00:48:17,669 --> 00:48:23,368
blockchain to agree as to whether the

939
00:48:20,669 --> 00:48:25,589
blockchain to legitimate of them and so

940
00:48:23,369 --> 00:48:28,439
one of the attacks is if you can get and

941
00:48:25,589 --> 00:48:32,189
the majority of people's out out mine

942
00:48:28,439 --> 00:48:37,919
the others then you win I guess that

943
00:48:32,189 --> 00:48:40,319
might have happened in the past now as I

944
00:48:37,919 --> 00:48:42,209
said there was a recent attack on

945
00:48:40,319 --> 00:48:45,449
another Bitcoin like black chain where

946
00:48:42,209 --> 00:48:50,428
they were twenty thirty blocks deep able

947
00:48:45,449 --> 00:48:52,469
to rewrite transactions and as I said

948
00:48:50,429 --> 00:48:54,329
it's just on the Bitcoin blockchain it's

949
00:48:52,469 --> 00:48:55,469
just not economically feasible for the

950
00:48:54,329 --> 00:48:57,479
amount of money that you're gonna make

951
00:48:55,469 --> 00:49:00,539
doing that is gonna cost you probably

952
00:48:57,479 --> 00:49:02,908
much more but at smaller that smaller

953
00:49:00,539 --> 00:49:04,859
coins and off coins and stuff it's gonna

954
00:49:02,909 --> 00:49:06,779
be a lot more risky so you definitely

955
00:49:04,859 --> 00:49:09,288
want to pay attention to that where's

956
00:49:06,779 --> 00:49:09,289
your question sir

957
00:49:20,300 --> 00:49:31,200
sorry what was the end bit of that yes

958
00:49:27,270 --> 00:49:32,609
so there's various enterprise-e bock

959
00:49:31,200 --> 00:49:34,740
chain things that are coming out there's

960
00:49:32,609 --> 00:49:37,319
a Linux consortium project called hyper

961
00:49:34,740 --> 00:49:40,200
ledger it still got some issues like it

962
00:49:37,320 --> 00:49:42,750
can't run multi region which is kind of

963
00:49:40,200 --> 00:49:47,819
a you would expect to decentralized box

964
00:49:42,750 --> 00:49:49,050
chain thing to do also I am under the

965
00:49:47,820 --> 00:49:51,960
understanding that Oracle is going to

966
00:49:49,050 --> 00:49:54,150
come out with one and the main things

967
00:49:51,960 --> 00:49:56,130
that I've heard it applied to our things

968
00:49:54,150 --> 00:49:59,369
of course like finance kind of like

969
00:49:56,130 --> 00:50:02,010
settlement between banks as well as the

970
00:49:59,369 --> 00:50:04,170
chain of custody type things where you

971
00:50:02,010 --> 00:50:06,570
kind of want an immutable list of things

972
00:50:04,170 --> 00:50:08,400
at the company that I work for we're

973
00:50:06,570 --> 00:50:11,760
looking at this thing called unified

974
00:50:08,400 --> 00:50:14,340
vault where they their pitch is that

975
00:50:11,760 --> 00:50:17,460
they will bring all your security data

976
00:50:14,340 --> 00:50:20,400
into a blockchain that will act as an

977
00:50:17,460 --> 00:50:23,130
immutable log of what has happened to

978
00:50:20,400 --> 00:50:25,980
your systems which can help you with

979
00:50:23,130 --> 00:50:27,810
essentially remediation in the past and

980
00:50:25,980 --> 00:50:30,089
you know due to the nature of the

981
00:50:27,810 --> 00:50:32,160
blockchain that those logs can't have

982
00:50:30,089 --> 00:50:35,580
not been tampered because if so the

983
00:50:32,160 --> 00:50:37,080
blocks won't verify and such so there's

984
00:50:35,580 --> 00:50:39,119
some interesting applications out there

985
00:50:37,080 --> 00:50:41,509
that have nothing to do with currency I

986
00:50:39,119 --> 00:50:41,510
would say

987
00:50:46,380 --> 00:50:50,699
[Applause]

