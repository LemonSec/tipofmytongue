1
00:00:06,399 --> 00:00:08,320
uh so just so you know guys i will be

2
00:00:08,320 --> 00:00:09,840
going through this talk pretty fast it

3
00:00:09,840 --> 00:00:11,440
wasn't originally

4
00:00:11,440 --> 00:00:13,360
designed to be 30 minutes so if i stop

5
00:00:13,360 --> 00:00:15,839
making sense please wave frantically at

6
00:00:15,839 --> 00:00:19,039
me and i'll try my best to explain um

7
00:00:19,039 --> 00:00:21,359
so the bit that nobody cares about this

8
00:00:21,359 --> 00:00:23,439
is me i'm not don smith no matter what

9
00:00:23,439 --> 00:00:26,560
the um schedule says

10
00:00:26,560 --> 00:00:28,640
i'm keith lerman that's my creative name

11
00:00:28,640 --> 00:00:31,599
on twitter i'm an aberdeen graduate they

12
00:00:31,599 --> 00:00:33,120
still let me on the premises though so

13
00:00:33,120 --> 00:00:34,960
thank you

14
00:00:34,960 --> 00:00:38,000
i've worked in mssp for the last six

15
00:00:38,000 --> 00:00:40,559
years i started off in the sock

16
00:00:40,559 --> 00:00:41,360
with

17
00:00:41,360 --> 00:00:42,800
a large number of clients and a large

18
00:00:42,800 --> 00:00:44,960
number of logs and i work within the ir

19
00:00:44,960 --> 00:00:46,079
team

20
00:00:46,079 --> 00:00:47,920
and i go by the professional treatise

21
00:00:47,920 --> 00:00:49,440
that as long as you can google faster

22
00:00:49,440 --> 00:00:51,680
than your client can think up questions

23
00:00:51,680 --> 00:00:53,840
you're good to go

24
00:00:53,840 --> 00:00:55,199
so this talk's going to be about

25
00:00:55,199 --> 00:00:57,680
credential theft so first of all

26
00:00:57,680 --> 00:00:59,600
it's the first priority for an attacker

27
00:00:59,600 --> 00:01:02,879
in post-exploitation why because often

28
00:01:02,879 --> 00:01:05,360
there's not that much use in the account

29
00:01:05,360 --> 00:01:07,439
that you land on first

30
00:01:07,439 --> 00:01:09,119
outside of things like web server

31
00:01:09,119 --> 00:01:11,040
exploits and even then you still need to

32
00:01:11,040 --> 00:01:12,720
pivot

33
00:01:12,720 --> 00:01:14,560
uh yeah you enter at low privilege you

34
00:01:14,560 --> 00:01:16,799
need high privilege to get actions on

35
00:01:16,799 --> 00:01:18,080
your objective

36
00:01:18,080 --> 00:01:19,759
so why do you need them first of all

37
00:01:19,759 --> 00:01:22,159
lateral movement that's the key

38
00:01:22,159 --> 00:01:25,119
attackers are going in to encrypt data

39
00:01:25,119 --> 00:01:26,720
exfiltrate data

40
00:01:26,720 --> 00:01:28,720
something to get money for the

41
00:01:28,720 --> 00:01:30,799
information that they want that's not

42
00:01:30,799 --> 00:01:32,799
going to be on the server that you land

43
00:01:32,799 --> 00:01:35,200
on most time

44
00:01:35,200 --> 00:01:37,520
privilege escalation again actions

45
00:01:37,520 --> 00:01:39,759
objectives being an admin is always good

46
00:01:39,759 --> 00:01:41,680
so if you can steal the credentials of

47
00:01:41,680 --> 00:01:43,600
an existing admin

48
00:01:43,600 --> 00:01:45,119
that'll help you get to where you want

49
00:01:45,119 --> 00:01:46,399
to be

50
00:01:46,399 --> 00:01:47,680
and the

51
00:01:47,680 --> 00:01:48,880
one that's talked about less is

52
00:01:48,880 --> 00:01:51,280
persistence you know if you do get

53
00:01:51,280 --> 00:01:52,880
detected and they kick you off the

54
00:01:52,880 --> 00:01:54,880
infrastructure what better persistence

55
00:01:54,880 --> 00:01:56,640
mechanism is there than having a

56
00:01:56,640 --> 00:01:58,159
username and password that you can just

57
00:01:58,159 --> 00:02:00,960
log back into

58
00:02:03,040 --> 00:02:05,119
um so why don't you just make a new

59
00:02:05,119 --> 00:02:06,640
account

60
00:02:06,640 --> 00:02:07,600
well

61
00:02:07,600 --> 00:02:09,440
you need access to do this first so you

62
00:02:09,440 --> 00:02:11,440
need to steal credentials to create the

63
00:02:11,440 --> 00:02:13,120
account in the first place

64
00:02:13,120 --> 00:02:15,120
and also account creations tend to be

65
00:02:15,120 --> 00:02:16,160
tracked

66
00:02:16,160 --> 00:02:18,800
a little more stringently than

67
00:02:18,800 --> 00:02:19,680
um

68
00:02:19,680 --> 00:02:21,760
account usage

69
00:02:21,760 --> 00:02:23,360
simply because there are a lot less

70
00:02:23,360 --> 00:02:25,360
account creations and

71
00:02:25,360 --> 00:02:27,520
group petitions than there are

72
00:02:27,520 --> 00:02:30,640
um logins and login failures

73
00:02:30,640 --> 00:02:32,160
so we'll split the accounts into two

74
00:02:32,160 --> 00:02:33,760
categories here first of all you have

75
00:02:33,760 --> 00:02:35,120
local accounts

76
00:02:35,120 --> 00:02:36,640
um these are the accounts that are

77
00:02:36,640 --> 00:02:39,599
stored locally on a machine for use with

78
00:02:39,599 --> 00:02:42,720
one machine ostensibly i say ostensibly

79
00:02:42,720 --> 00:02:45,519
because if you have like a golden

80
00:02:45,519 --> 00:02:47,040
windows image that you're pushing to all

81
00:02:47,040 --> 00:02:48,720
of your laptops

82
00:02:48,720 --> 00:02:51,200
and you have a local account on every

83
00:02:51,200 --> 00:02:53,280
single image

84
00:02:53,280 --> 00:02:54,640
it's gonna have the same password it

85
00:02:54,640 --> 00:02:56,239
might as well be a domain account at

86
00:02:56,239 --> 00:02:58,560
that point

87
00:02:58,560 --> 00:03:00,959
um the details are stored locally in the

88
00:03:00,959 --> 00:03:02,879
registry there's a database

89
00:03:02,879 --> 00:03:04,800
called the security account manager also

90
00:03:04,800 --> 00:03:06,239
known as the sam hive it's always going

91
00:03:06,239 --> 00:03:09,280
to be written as sam on this

92
00:03:09,280 --> 00:03:11,840
it's a hash based authentication

93
00:03:11,840 --> 00:03:14,159
so the actual passwords aren't stored in

94
00:03:14,159 --> 00:03:16,640
windows it's only hashes

95
00:03:16,640 --> 00:03:18,640
before the nt kernel which i think was

96
00:03:18,640 --> 00:03:21,440
1993 they were stored as lm

97
00:03:21,440 --> 00:03:23,280
i'm not going to go into the details on

98
00:03:23,280 --> 00:03:26,879
lm and ntlm and how they are created

99
00:03:26,879 --> 00:03:27,760
as

100
00:03:27,760 --> 00:03:29,840
you know that would add another 15 30

101
00:03:29,840 --> 00:03:33,280
minutes on to the end of this talk

102
00:03:33,280 --> 00:03:35,599
um you also have some two built-in

103
00:03:35,599 --> 00:03:37,040
accounts in

104
00:03:37,040 --> 00:03:38,560
almost all the windows operating systems

105
00:03:38,560 --> 00:03:40,640
you've got the administrator account

106
00:03:40,640 --> 00:03:43,280
which has you know full control of local

107
00:03:43,280 --> 00:03:45,920
resources and accounts and you have the

108
00:03:45,920 --> 00:03:48,640
guest accounts

109
00:03:49,040 --> 00:03:50,080
i

110
00:03:50,080 --> 00:03:53,519
have lost my mouse

111
00:03:54,239 --> 00:03:56,640
hello

112
00:03:58,840 --> 00:04:01,760
yeah this is stuff about the ntl and

113
00:04:01,760 --> 00:04:04,159
hash i'm just gonna skip through them um

114
00:04:04,159 --> 00:04:05,920
one important fact that will come up is

115
00:04:05,920 --> 00:04:08,000
that the ntlm hashes

116
00:04:08,000 --> 00:04:09,840
are not salted

117
00:04:09,840 --> 00:04:12,480
um that might sound not great for hash

118
00:04:12,480 --> 00:04:14,560
based authentication but if you think

119
00:04:14,560 --> 00:04:16,639
about it if you salt

120
00:04:16,639 --> 00:04:18,959
uh if your salts input before you hash

121
00:04:18,959 --> 00:04:20,880
it you have to store the salt somewhere

122
00:04:20,880 --> 00:04:23,600
if you're storing the salt in a local

123
00:04:23,600 --> 00:04:25,680
database

124
00:04:25,680 --> 00:04:27,280
there's no added security because the

125
00:04:27,280 --> 00:04:29,280
attacker has access to the salt as well

126
00:04:29,280 --> 00:04:32,479
as the hash that trying to crack

127
00:04:33,520 --> 00:04:37,440
so the user input when you type your

128
00:04:37,440 --> 00:04:40,000
password into the login screen that is

129
00:04:40,000 --> 00:04:42,479
converted to an ntlm hash

130
00:04:42,479 --> 00:04:43,919
which

131
00:04:43,919 --> 00:04:48,160
the win logon xe and lsas.exe processes

132
00:04:48,160 --> 00:04:51,680
will compare that hash you've inputted

133
00:04:51,680 --> 00:04:54,080
to the hash that's in the sam database

134
00:04:54,080 --> 00:04:56,080
if they're the same that means what you

135
00:04:56,080 --> 00:04:58,160
put in the login screen

136
00:04:58,160 --> 00:05:02,400
is the password and it lets you in

137
00:05:03,039 --> 00:05:04,960
um other hashes do exist for local

138
00:05:04,960 --> 00:05:05,919
accounts

139
00:05:05,919 --> 00:05:07,120
um

140
00:05:07,120 --> 00:05:10,160
ts pkg w digest live ssp i'm going to go

141
00:05:10,160 --> 00:05:11,680
into what they are in a second they're

142
00:05:11,680 --> 00:05:13,280
mostly for a single sign-on for other

143
00:05:13,280 --> 00:05:15,120
protocols

144
00:05:15,120 --> 00:05:18,320
uh the other one's remote accounts

145
00:05:18,320 --> 00:05:19,680
were you all familiar with active

146
00:05:19,680 --> 00:05:22,160
directory

147
00:05:23,360 --> 00:05:25,120
there's a lot of nods so i won't go into

148
00:05:25,120 --> 00:05:26,560
detail on that

149
00:05:26,560 --> 00:05:28,479
um the one detail to know about active

150
00:05:28,479 --> 00:05:29,919
directory that is important is that you

151
00:05:29,919 --> 00:05:31,840
have the domain controller which is a

152
00:05:31,840 --> 00:05:33,759
server that contains

153
00:05:33,759 --> 00:05:36,880
the hashes of all of the accounts in the

154
00:05:36,880 --> 00:05:39,039
domain all the remote accounts when you

155
00:05:39,039 --> 00:05:40,560
are trying to

156
00:05:40,560 --> 00:05:42,639
access them it's usually the kerberos

157
00:05:42,639 --> 00:05:44,800
protocol that speaks to the domain

158
00:05:44,800 --> 00:05:47,600
controller to say is this person who

159
00:05:47,600 --> 00:05:49,600
they say they are and have they got the

160
00:05:49,600 --> 00:05:52,880
password for that account

161
00:05:52,880 --> 00:05:55,600
sometimes it will default to ntlm based

162
00:05:55,600 --> 00:05:56,800
hash

163
00:05:56,800 --> 00:05:58,560
authentication

164
00:05:58,560 --> 00:06:00,479
even though it's

165
00:06:00,479 --> 00:06:02,400
remote with the domain controller

166
00:06:02,400 --> 00:06:04,319
that is when the server isn't in a

167
00:06:04,319 --> 00:06:05,520
domain

168
00:06:05,520 --> 00:06:06,400
it will

169
00:06:06,400 --> 00:06:09,039
default to the hash

170
00:06:09,039 --> 00:06:10,240
and

171
00:06:10,240 --> 00:06:12,720
when it connects to a server using an ip

172
00:06:12,720 --> 00:06:14,880
address and

173
00:06:14,880 --> 00:06:17,759
reverse dns is unavailable the kerberos

174
00:06:17,759 --> 00:06:19,840
protocol needs to know the host name of

175
00:06:19,840 --> 00:06:20,800
the

176
00:06:20,800 --> 00:06:22,720
thing it's speaking to if it can't find

177
00:06:22,720 --> 00:06:24,000
that

178
00:06:24,000 --> 00:06:27,600
it just uses that hash

179
00:06:29,360 --> 00:06:32,319
for interactive so if i'm typing the

180
00:06:32,319 --> 00:06:36,080
password in on the computer itself or if

181
00:06:36,080 --> 00:06:37,600
i'm doing an rdp

182
00:06:37,600 --> 00:06:40,960
the hash is still loaded into lsas

183
00:06:40,960 --> 00:06:43,919
even when it's remote

184
00:06:44,000 --> 00:06:44,880
um

185
00:06:44,880 --> 00:06:46,319
i'm going to skip over this for the sake

186
00:06:46,319 --> 00:06:49,400
of time

187
00:06:51,919 --> 00:06:55,759
so the ntds.dip file is for the remote

188
00:06:55,759 --> 00:06:58,400
accounts this is the

189
00:06:58,400 --> 00:07:00,240
file that's stored on the domain

190
00:07:00,240 --> 00:07:04,479
controller that contains all of the

191
00:07:04,479 --> 00:07:07,039
user and

192
00:07:07,039 --> 00:07:09,440
the user credentials

193
00:07:09,440 --> 00:07:11,360
for the entire domain so that's all your

194
00:07:11,360 --> 00:07:13,280
user accounts your admin accounts your

195
00:07:13,280 --> 00:07:15,759
service accounts and even the computer

196
00:07:15,759 --> 00:07:18,319
accounts for each individual machine

197
00:07:18,319 --> 00:07:20,560
all those details are stored in this one

198
00:07:20,560 --> 00:07:22,639
database on your domain controller so

199
00:07:22,639 --> 00:07:26,400
it's really the keys to the kingdom

200
00:07:26,400 --> 00:07:29,440
it's stored in c slash windows slash

201
00:07:29,440 --> 00:07:31,840
ntds

202
00:07:32,080 --> 00:07:35,120
and it is locked and protected

203
00:07:35,120 --> 00:07:37,520
and it is encrypted with a

204
00:07:37,520 --> 00:07:42,240
rc4 encryption key named syskey

205
00:07:43,280 --> 00:07:45,599
so just i went over that quickly so just

206
00:07:45,599 --> 00:07:47,280
as a summary of the different places

207
00:07:47,280 --> 00:07:48,879
hashes can be found

208
00:07:48,879 --> 00:07:50,639
you've got the sam registry hive for

209
00:07:50,639 --> 00:07:52,800
local accounts

210
00:07:52,800 --> 00:07:55,120
you have the

211
00:07:55,120 --> 00:07:57,199
um security cache which is the one that

212
00:07:57,199 --> 00:07:59,759
i skipped over that's for

213
00:07:59,759 --> 00:08:02,240
previously logged in users

214
00:08:02,240 --> 00:08:05,039
and you have the ntds.dit on the domain

215
00:08:05,039 --> 00:08:07,440
controller for all your remote accounts

216
00:08:07,440 --> 00:08:09,520
you also have the system registry hive

217
00:08:09,520 --> 00:08:11,840
which contains the sys key value that's

218
00:08:11,840 --> 00:08:14,479
encrypting the sam registry hive and

219
00:08:14,479 --> 00:08:18,159
encrypting the ntds file

220
00:08:18,479 --> 00:08:21,520
and you also have lsas i mentioned this

221
00:08:21,520 --> 00:08:23,520
process earlier it's the bit that's

222
00:08:23,520 --> 00:08:26,960
comparing your hash against the hash in

223
00:08:26,960 --> 00:08:28,160
the database

224
00:08:28,160 --> 00:08:30,160
it's the one that's making sure you've

225
00:08:30,160 --> 00:08:32,159
put the right thing in

226
00:08:32,159 --> 00:08:34,320
which means that it has interesting

227
00:08:34,320 --> 00:08:37,599
things in memory

228
00:08:37,839 --> 00:08:40,320
i'll get onto more details on lsas in a

229
00:08:40,320 --> 00:08:41,599
second

230
00:08:41,599 --> 00:08:44,080
so how do i retrieve hashes from the sam

231
00:08:44,080 --> 00:08:46,000
database

232
00:08:46,000 --> 00:08:48,000
um so they are partially encrypted with

233
00:08:48,000 --> 00:08:50,080
cis key value so you need to retrieve

234
00:08:50,080 --> 00:08:52,880
the cis key value before you can

235
00:08:52,880 --> 00:08:54,640
retrieve the hashes

236
00:08:54,640 --> 00:08:56,160
now there is a built-in windows

237
00:08:56,160 --> 00:08:59,839
executable named reg this is just a very

238
00:08:59,839 --> 00:09:02,640
basic tool that allows you to query and

239
00:09:02,640 --> 00:09:05,760
edit the registry

240
00:09:06,320 --> 00:09:09,279
so um

241
00:09:09,279 --> 00:09:10,800
is that plenty big for everyone because

242
00:09:10,800 --> 00:09:12,560
there's a few pictures like this this is

243
00:09:12,560 --> 00:09:15,600
output from an edr so we have

244
00:09:15,600 --> 00:09:17,519
um a little bit of reconnaissance from

245
00:09:17,519 --> 00:09:20,240
an attacker this is them landing on a

246
00:09:20,240 --> 00:09:21,839
machine for the first time they do a

247
00:09:21,839 --> 00:09:23,440
hostname to work out what the host

248
00:09:23,440 --> 00:09:25,680
they've landed on is they do net user to

249
00:09:25,680 --> 00:09:27,760
work out who they are who they're logged

250
00:09:27,760 --> 00:09:29,040
in as a moment

251
00:09:29,040 --> 00:09:30,880
and then they go straight into saving

252
00:09:30,880 --> 00:09:33,200
the sam file using reg and then they

253
00:09:33,200 --> 00:09:35,279
save the system file

254
00:09:35,279 --> 00:09:37,680
and then most likely what they did next

255
00:09:37,680 --> 00:09:39,600
was after taking those

256
00:09:39,600 --> 00:09:41,440
offline onto their own machines

257
00:09:41,440 --> 00:09:43,120
user tool like

258
00:09:43,120 --> 00:09:46,560
uh pwdump password dump

259
00:09:46,560 --> 00:09:48,480
put in the system hive put in the sam

260
00:09:48,480 --> 00:09:50,160
hives you've

261
00:09:50,160 --> 00:09:51,920
exfiltrated

262
00:09:51,920 --> 00:09:55,040
and it decrypts the hashes so

263
00:09:55,040 --> 00:09:58,880
this is the ntlm hash for the account

264
00:09:58,880 --> 00:10:01,680
administrator

265
00:10:01,680 --> 00:10:02,480
um

266
00:10:02,480 --> 00:10:03,440
the

267
00:10:03,440 --> 00:10:06,480
second big long string is the lm hash

268
00:10:06,480 --> 00:10:08,560
uh you'll note that it's the same for

269
00:10:08,560 --> 00:10:10,480
everyone that's because lm was

270
00:10:10,480 --> 00:10:14,160
deprecated in 1993 but because microsoft

271
00:10:14,160 --> 00:10:16,880
refuses to

272
00:10:16,880 --> 00:10:19,040
deal with backwards compatibility it

273
00:10:19,040 --> 00:10:21,440
sticks a blank value in for the lm hash

274
00:10:21,440 --> 00:10:23,279
for everyone so

275
00:10:23,279 --> 00:10:26,480
it's there but it's not usable

276
00:10:26,480 --> 00:10:27,760
um

277
00:10:27,760 --> 00:10:29,120
cache credentials i've got too many

278
00:10:29,120 --> 00:10:30,720
slides on this so

279
00:10:30,720 --> 00:10:33,200
so i'll go over it the cash credentials

280
00:10:33,200 --> 00:10:35,920
if i go to my mum's house with my work

281
00:10:35,920 --> 00:10:39,600
laptop and i log in

282
00:10:39,600 --> 00:10:41,360
i don't have an internet connection so

283
00:10:41,360 --> 00:10:42,640
it can't reach out to the domain

284
00:10:42,640 --> 00:10:44,880
controller for my company but it still

285
00:10:44,880 --> 00:10:46,880
allows me in

286
00:10:46,880 --> 00:10:48,640
that's because

287
00:10:48,640 --> 00:10:51,279
for every domain user that logs into a

288
00:10:51,279 --> 00:10:54,320
computer it caches the credentials of

289
00:10:54,320 --> 00:10:57,120
the last 10 users who logged into a

290
00:10:57,120 --> 00:10:59,360
machine and that's so if you don't have

291
00:10:59,360 --> 00:11:01,279
internet you can still access your

292
00:11:01,279 --> 00:11:03,440
computer even if you can't reach the

293
00:11:03,440 --> 00:11:04,640
domain

294
00:11:04,640 --> 00:11:07,040
um which is really when you think about

295
00:11:07,040 --> 00:11:09,600
an incredibly large number of accounts

296
00:11:09,600 --> 00:11:11,200
because

297
00:11:11,200 --> 00:11:12,399
if you think about your work laptop how

298
00:11:12,399 --> 00:11:13,760
many people log into that how many

299
00:11:13,760 --> 00:11:15,920
accounts log into that

300
00:11:15,920 --> 00:11:16,880
you

301
00:11:16,880 --> 00:11:19,279
the it guy who set it up

302
00:11:19,279 --> 00:11:22,800
and maybe one or two help desk people so

303
00:11:22,800 --> 00:11:25,920
those credentials are in forever

304
00:11:25,920 --> 00:11:27,360
and if they're help desk most likely

305
00:11:27,360 --> 00:11:29,200
that they've got high levels of

306
00:11:29,200 --> 00:11:31,760
privilege so

307
00:11:31,760 --> 00:11:33,920
um

308
00:11:33,920 --> 00:11:35,279
yes when you're

309
00:11:35,279 --> 00:11:37,920
um dumping those hashes they are

310
00:11:37,920 --> 00:11:41,279
very similar to um dump into sam

311
00:11:41,279 --> 00:11:44,399
they're also encrypted with siskiy

312
00:11:44,399 --> 00:11:46,640
but they're in the security hive instead

313
00:11:46,640 --> 00:11:47,519
so

314
00:11:47,519 --> 00:11:49,440
very much like the last tool

315
00:11:49,440 --> 00:11:51,200
you give it the system

316
00:11:51,200 --> 00:11:53,120
hive you've excelled rated then you get

317
00:11:53,120 --> 00:11:55,200
the security hybrid sexual traited and

318
00:11:55,200 --> 00:11:56,399
it gives you

319
00:11:56,399 --> 00:11:59,040
um hashes these are not mtlm hashes

320
00:11:59,040 --> 00:12:01,440
they're a different type of hash

321
00:12:01,440 --> 00:12:03,600
there's not actually that much use for

322
00:12:03,600 --> 00:12:05,760
them other than brute forcing to try and

323
00:12:05,760 --> 00:12:08,240
get a plain text password back you can't

324
00:12:08,240 --> 00:12:11,279
use them for some of the interesting

325
00:12:11,279 --> 00:12:15,040
techniques you can use ntlm hashes for

326
00:12:15,040 --> 00:12:18,800
and how would you pool ntds.dit

327
00:12:18,800 --> 00:12:22,000
so i mentioned it encrypted with cisc

328
00:12:22,000 --> 00:12:23,680
but it's also a locked and protected

329
00:12:23,680 --> 00:12:25,120
file because it's

330
00:12:25,120 --> 00:12:26,720
the most important thing in active

331
00:12:26,720 --> 00:12:28,399
directory

332
00:12:28,399 --> 00:12:30,240
so you need to dump the sam the system

333
00:12:30,240 --> 00:12:33,200
hives to decrypt the ntds file

334
00:12:33,200 --> 00:12:35,360
so but i've already shown how that easy

335
00:12:35,360 --> 00:12:37,440
that is for the other things

336
00:12:37,440 --> 00:12:40,079
um but since it's locked you can't copy

337
00:12:40,079 --> 00:12:42,320
that file and since it's protected you

338
00:12:42,320 --> 00:12:43,120
can

339
00:12:43,120 --> 00:12:44,959
read that you can't take a copy of it

340
00:12:44,959 --> 00:12:47,200
and read that

341
00:12:47,200 --> 00:12:48,720
um

342
00:12:48,720 --> 00:12:50,800
it's the windows security api that's

343
00:12:50,800 --> 00:12:53,200
protecting it saying it's locked it's in

344
00:12:53,200 --> 00:12:55,920
use and also it's protected you can

345
00:12:55,920 --> 00:12:57,120
access it

346
00:12:57,120 --> 00:13:00,079
but if you have a malicious driver the

347
00:13:00,079 --> 00:13:02,000
driver doesn't use the api

348
00:13:02,000 --> 00:13:04,639
it's the level below apis so it

349
00:13:04,639 --> 00:13:08,560
completely skips all of the um

350
00:13:08,560 --> 00:13:10,720
completely skips all of the protections

351
00:13:10,720 --> 00:13:12,240
uh that's what powersport and a number

352
00:13:12,240 --> 00:13:14,880
of other post-exploitation frameworks

353
00:13:14,880 --> 00:13:18,000
use i believe metasploit has another one

354
00:13:18,000 --> 00:13:20,639
but that isn't as popular as

355
00:13:20,639 --> 00:13:24,959
ntds util because with every single good

356
00:13:24,959 --> 00:13:26,560
security protection

357
00:13:26,560 --> 00:13:28,880
there's about 50 chance microsoft have

358
00:13:28,880 --> 00:13:30,720
written their own tool to bypass that

359
00:13:30,720 --> 00:13:32,399
security protection

360
00:13:32,399 --> 00:13:35,200
so this is a built-in sysadmin tool that

361
00:13:35,200 --> 00:13:38,160
can directly access the ntts

362
00:13:38,160 --> 00:13:39,680
zip file

363
00:13:39,680 --> 00:13:41,920
and the last one is volume shadows so

364
00:13:41,920 --> 00:13:43,839
you can use the volume shadow tool to

365
00:13:43,839 --> 00:13:46,720
create a backup of the system image

366
00:13:46,720 --> 00:13:48,399
so if you've got a protected

367
00:13:48,399 --> 00:13:51,120
um file ntds

368
00:13:51,120 --> 00:13:53,199
if you take a backup

369
00:13:53,199 --> 00:13:54,800
why not access the copy of it in the

370
00:13:54,800 --> 00:13:57,040
backup instead

371
00:13:57,040 --> 00:14:00,839
so here's another telemetry this is

372
00:14:00,839 --> 00:14:02,399
um

373
00:14:02,399 --> 00:14:04,800
another example of

374
00:14:04,800 --> 00:14:07,360
an actor landing on a host

375
00:14:07,360 --> 00:14:09,360
they are running a batch script that

376
00:14:09,360 --> 00:14:11,760
does ntdes util

377
00:14:11,760 --> 00:14:15,519
actual traits the ntts file as c windows

378
00:14:15,519 --> 00:14:17,199
web temp

379
00:14:17,199 --> 00:14:18,399
and then they can excel trade that and

380
00:14:18,399 --> 00:14:20,480
that's all of your domain credentials

381
00:14:20,480 --> 00:14:21,760
done

382
00:14:21,760 --> 00:14:23,839
and this is an example of

383
00:14:23,839 --> 00:14:25,440
an attacker who's created a volume

384
00:14:25,440 --> 00:14:27,600
shadow copy

385
00:14:27,600 --> 00:14:29,040
and you're just taking

386
00:14:29,040 --> 00:14:32,399
the ntds.dip file directly out the copy

387
00:14:32,399 --> 00:14:33,680
because there's no protections on it

388
00:14:33,680 --> 00:14:36,000
anymore

389
00:14:36,560 --> 00:14:37,440
um

390
00:14:37,440 --> 00:14:40,000
and lsas this is probably one of the

391
00:14:40,000 --> 00:14:41,839
most common

392
00:14:41,839 --> 00:14:42,959
credential

393
00:14:42,959 --> 00:14:45,519
theft techniques these days mainly

394
00:14:45,519 --> 00:14:47,279
because of the prevalence of minicats

395
00:14:47,279 --> 00:14:49,680
which is

396
00:14:49,760 --> 00:14:52,160
the main tool that focuses in lsas

397
00:14:52,160 --> 00:14:53,760
so it's part of the internal interface

398
00:14:53,760 --> 00:14:56,240
with sam and

399
00:14:56,240 --> 00:14:59,199
new hashes and kerberos tickets tend to

400
00:14:59,199 --> 00:15:02,560
end up in the memory of the process so

401
00:15:02,560 --> 00:15:04,720
dump the memory process take that memory

402
00:15:04,720 --> 00:15:07,199
dump offline crack the hashes or

403
00:15:07,199 --> 00:15:09,120
retrieve the hashes

404
00:15:09,120 --> 00:15:11,199
um there are a lot of tools proc dumps

405
00:15:11,199 --> 00:15:12,399
the most common

406
00:15:12,399 --> 00:15:14,639
the proc dump is a

407
00:15:14,639 --> 00:15:16,639
tool from the sysinternal suites which

408
00:15:16,639 --> 00:15:18,959
was a big load of sysadmin tools created

409
00:15:18,959 --> 00:15:21,360
by a third-party engineer

410
00:15:21,360 --> 00:15:22,959
who was so good at it that microsoft

411
00:15:22,959 --> 00:15:24,959
then hired him and took the tools

412
00:15:24,959 --> 00:15:26,720
internally

413
00:15:26,720 --> 00:15:29,519
very simple proc dump elsa sexy

414
00:15:29,519 --> 00:15:31,759
outputting as lsas.dump

415
00:15:31,759 --> 00:15:33,759
attacker then takes the dump file

416
00:15:33,759 --> 00:15:36,959
offline pulls the hashes out of it

417
00:15:36,959 --> 00:15:38,959
um there are other techniques that have

418
00:15:38,959 --> 00:15:41,360
come up because people have started

419
00:15:41,360 --> 00:15:42,720
cutting on to

420
00:15:42,720 --> 00:15:45,320
procdump and these tools

421
00:15:45,320 --> 00:15:48,240
commservices.dll is a

422
00:15:48,240 --> 00:15:50,720
dll containing functions for com

423
00:15:50,720 --> 00:15:54,399
services it's a built-in

424
00:15:54,399 --> 00:15:56,880
microsoft file it's a signed library

425
00:15:56,880 --> 00:15:59,680
it's in system 32 for everyone

426
00:15:59,680 --> 00:16:02,720
in traditional microsoft fashion it's

427
00:16:02,720 --> 00:16:04,639
completely undocumented

428
00:16:04,639 --> 00:16:06,720
so

429
00:16:06,720 --> 00:16:09,040
there just happens to be a live uh

430
00:16:09,040 --> 00:16:10,800
function in it called minidump where you

431
00:16:10,800 --> 00:16:13,519
give it a process id and it dumps all of

432
00:16:13,519 --> 00:16:15,519
the memory of that so it's entire you

433
00:16:15,519 --> 00:16:16,880
don't need to download any additional

434
00:16:16,880 --> 00:16:18,720
tools you've got all the functionality

435
00:16:18,720 --> 00:16:19,839
in it

436
00:16:19,839 --> 00:16:22,560
um so you get you've got a powershell

437
00:16:22,560 --> 00:16:25,440
script here that gets the process of

438
00:16:25,440 --> 00:16:27,279
um lsas

439
00:16:27,279 --> 00:16:29,040
process id

440
00:16:29,040 --> 00:16:30,000
and just

441
00:16:30,000 --> 00:16:31,279
outputs it in

442
00:16:31,279 --> 00:16:33,519
and saves it as a dump

443
00:16:33,519 --> 00:16:36,320
um there's another one that's is

444
00:16:36,320 --> 00:16:38,959
beginning to rise in um

445
00:16:38,959 --> 00:16:42,079
popularity as well uh create dump.xy

446
00:16:42,079 --> 00:16:45,440
which is a executable within.net which

447
00:16:45,440 --> 00:16:47,920
is also in every single

448
00:16:47,920 --> 00:16:48,839
um

449
00:16:48,839 --> 00:16:51,920
windows instance these days

450
00:16:51,920 --> 00:16:53,040
there's there's just a lot of

451
00:16:53,040 --> 00:16:54,720
undocumented stuff floating around in

452
00:16:54,720 --> 00:16:57,279
windows and you know five years after it

453
00:16:57,279 --> 00:17:00,320
shows up someone will eventually realize

454
00:17:00,320 --> 00:17:02,079
this is

455
00:17:02,079 --> 00:17:04,400
the perfect thing for attacking windows

456
00:17:04,400 --> 00:17:07,119
and they built it themselves

457
00:17:07,119 --> 00:17:08,799
um

458
00:17:08,799 --> 00:17:10,559
but if you don't want to dump the

459
00:17:10,559 --> 00:17:13,280
process and uh dump the memory and then

460
00:17:13,280 --> 00:17:15,520
pull it out there are ways to read the

461
00:17:15,520 --> 00:17:18,640
memory live from the process

462
00:17:18,640 --> 00:17:19,520
um

463
00:17:19,520 --> 00:17:21,760
this is what mimikatz does and invoke

464
00:17:21,760 --> 00:17:23,520
mimikatz and then there's a couple of

465
00:17:23,520 --> 00:17:25,760
older tools windows credential editor

466
00:17:25,760 --> 00:17:29,199
and pw dump six

467
00:17:29,280 --> 00:17:31,440
mimikats got too good and kind of

468
00:17:31,440 --> 00:17:34,160
squeezed out all of the others so i

469
00:17:34,160 --> 00:17:36,960
don't really see many of the others

470
00:17:36,960 --> 00:17:40,640
um so at the ring three level um

471
00:17:40,640 --> 00:17:43,360
the sc debug privilege

472
00:17:43,360 --> 00:17:45,039
if you are an admin you can grant to

473
00:17:45,039 --> 00:17:47,600
yourself this allows you to

474
00:17:47,600 --> 00:17:49,039
it's designed for debugging it

475
00:17:49,039 --> 00:17:50,320
essentially allows you to open up a

476
00:17:50,320 --> 00:17:52,640
process and

477
00:17:52,640 --> 00:17:55,760
dig through the memory of it

478
00:17:55,760 --> 00:17:57,200
so if you have the ability to do that in

479
00:17:57,200 --> 00:17:58,799
lsas you don't need to dump the memory

480
00:17:58,799 --> 00:18:00,880
you already have the access

481
00:18:00,880 --> 00:18:02,720
at a ring zero level

482
00:18:02,720 --> 00:18:04,960
malicious driver does the exact same

483
00:18:04,960 --> 00:18:05,760
thing

484
00:18:05,760 --> 00:18:08,480
it's below all the protection levels

485
00:18:08,480 --> 00:18:12,400
you can just access the memory directly

486
00:18:12,400 --> 00:18:14,720
so this is an example of the ring three

487
00:18:14,720 --> 00:18:15,600
stuff

488
00:18:15,600 --> 00:18:19,120
we have a run dll32 that is opening the

489
00:18:19,120 --> 00:18:20,880
lsas process

490
00:18:20,880 --> 00:18:23,120
and writing

491
00:18:23,120 --> 00:18:26,480
writes a new thread and puts it into the

492
00:18:26,480 --> 00:18:29,440
lsas process and exfiltrates the

493
00:18:29,440 --> 00:18:31,679
credentials and this one led you'll

494
00:18:31,679 --> 00:18:35,360
notice that's o208 1815

495
00:18:35,360 --> 00:18:37,919
and then 0209

496
00:18:37,919 --> 00:18:41,520
so that's 25 hours later we have comps

497
00:18:41,520 --> 00:18:44,000
6.txt which is a list of all of their

498
00:18:44,000 --> 00:18:45,120
computers

499
00:18:45,120 --> 00:18:47,120
the admin username and the password

500
00:18:47,120 --> 00:18:48,640
they've pulled out

501
00:18:48,640 --> 00:18:52,720
and r.exe which is riok so

502
00:18:52,720 --> 00:18:56,360
good goodbye domain

503
00:18:56,480 --> 00:18:58,400
um

504
00:18:58,400 --> 00:19:00,080
yes so some authentication types some of

505
00:19:00,080 --> 00:19:04,000
the older ones and less well-known ones

506
00:19:04,000 --> 00:19:04,720
do

507
00:19:04,720 --> 00:19:06,080
encrypt

508
00:19:06,080 --> 00:19:08,400
i can't see what that says

509
00:19:08,400 --> 00:19:11,440
five okay um so you've got wd digest

510
00:19:11,440 --> 00:19:13,039
which is the important one

511
00:19:13,039 --> 00:19:15,840
um this was for ldap authentication in

512
00:19:15,840 --> 00:19:18,640
server 2003 it's really

513
00:19:18,640 --> 00:19:21,679
like weakly encrypted within lsas so you

514
00:19:21,679 --> 00:19:23,280
can basically pull the plain text

515
00:19:23,280 --> 00:19:26,640
password out of the memory of lsas

516
00:19:26,640 --> 00:19:27,840
um

517
00:19:27,840 --> 00:19:29,919
a patch in 2017 removed clear text

518
00:19:29,919 --> 00:19:32,559
passwords from all but w digest

519
00:19:32,559 --> 00:19:35,280
but the same patch introduced a registry

520
00:19:35,280 --> 00:19:37,679
key that allows you to switch it back on

521
00:19:37,679 --> 00:19:39,600
so attackers

522
00:19:39,600 --> 00:19:40,480
just

523
00:19:40,480 --> 00:19:42,640
go in and change the registry value what

524
00:19:42,640 --> 00:19:44,640
that means is then every logon

525
00:19:44,640 --> 00:19:47,039
afterwards has the plain text stored in

526
00:19:47,039 --> 00:19:48,400
elsas

527
00:19:48,400 --> 00:19:49,840
that's just

528
00:19:49,840 --> 00:19:52,720
a picture if it's red that means

529
00:19:52,720 --> 00:19:55,360
data is stored within lsas if it's green

530
00:19:55,360 --> 00:19:57,280
that means no data is in memory i'm

531
00:19:57,280 --> 00:19:58,559
afraid i can't remember who i stole this

532
00:19:58,559 --> 00:20:01,919
from so if they're watching i'm sorry

533
00:20:01,919 --> 00:20:04,080
so we have a hash

534
00:20:04,080 --> 00:20:05,440
we have the hashes we don't have the

535
00:20:05,440 --> 00:20:06,720
clear text passwords what we're going to

536
00:20:06,720 --> 00:20:08,000
do with them

537
00:20:08,000 --> 00:20:10,480
there's a huge load of hash cracking

538
00:20:10,480 --> 00:20:12,559
tools john the repair hash cat cane

539
00:20:12,559 --> 00:20:13,520
enable

540
00:20:13,520 --> 00:20:15,760
spanning many many years

541
00:20:15,760 --> 00:20:16,720
um

542
00:20:16,720 --> 00:20:18,240
you can do mostly rainbow table based

543
00:20:18,240 --> 00:20:22,080
cracking because it's not salted hash

544
00:20:22,240 --> 00:20:23,360
but

545
00:20:23,360 --> 00:20:26,799
if neither computer has the password

546
00:20:26,799 --> 00:20:29,120
and you're verifying the hash at the far

547
00:20:29,120 --> 00:20:30,000
end

548
00:20:30,000 --> 00:20:32,240
we already have the hash

549
00:20:32,240 --> 00:20:33,440
so why do we need the plain text

550
00:20:33,440 --> 00:20:35,840
password

551
00:20:35,919 --> 00:20:39,120
so if you are logging in remotely using

552
00:20:39,120 --> 00:20:41,760
ntlm authentication

553
00:20:41,760 --> 00:20:44,480
that is stored as a token

554
00:20:44,480 --> 00:20:46,000
because you only want to put password in

555
00:20:46,000 --> 00:20:47,440
once you don't have to give the password

556
00:20:47,440 --> 00:20:49,520
every single time you send it a new

557
00:20:49,520 --> 00:20:51,360
command

558
00:20:51,360 --> 00:20:52,240
so

559
00:20:52,240 --> 00:20:54,559
every authenticated process on that

560
00:20:54,559 --> 00:20:55,840
remote system

561
00:20:55,840 --> 00:20:58,799
is assigned to a token that token

562
00:20:58,799 --> 00:20:59,919
contains

563
00:20:59,919 --> 00:21:02,159
the username and the hash and that's how

564
00:21:02,159 --> 00:21:04,240
it's authenticating it so all you need

565
00:21:04,240 --> 00:21:05,679
to do is

566
00:21:05,679 --> 00:21:08,480
edit the token you're sending and stick

567
00:21:08,480 --> 00:21:11,360
in the hash of

568
00:21:11,360 --> 00:21:13,360
the hash of the user you've just stolen

569
00:21:13,360 --> 00:21:14,320
and

570
00:21:14,320 --> 00:21:17,200
there we go you've got a valid token

571
00:21:17,200 --> 00:21:18,480
um

572
00:21:18,480 --> 00:21:21,280
yeah so this is me the cat's

573
00:21:21,280 --> 00:21:23,039
being given a hash

574
00:21:23,039 --> 00:21:25,120
logging in as a user

575
00:21:25,120 --> 00:21:27,760
in a domain

576
00:21:27,840 --> 00:21:30,080
tokens yes we've just gone over this

577
00:21:30,080 --> 00:21:32,000
every logon pro every logon and process

578
00:21:32,000 --> 00:21:35,039
gets a security token

579
00:21:35,120 --> 00:21:36,799
it describes the privileges and security

580
00:21:36,799 --> 00:21:37,919
on sets for the account that's running

581
00:21:37,919 --> 00:21:40,159
as i just explained now impersonate and

582
00:21:40,159 --> 00:21:42,559
delegate tokens allow for

583
00:21:42,559 --> 00:21:45,840
the single sign-on

584
00:21:46,720 --> 00:21:47,600
so

585
00:21:47,600 --> 00:21:49,600
using the impersonate privilege allows

586
00:21:49,600 --> 00:21:51,360
you to essentially

587
00:21:51,360 --> 00:21:53,919
run processes as other users and

588
00:21:53,919 --> 00:21:55,600
delegate does the same thing but over

589
00:21:55,600 --> 00:21:57,840
network resources so not just on a local

590
00:21:57,840 --> 00:22:00,240
account

591
00:22:02,559 --> 00:22:05,039
now the tokens only exist during a logon

592
00:22:05,039 --> 00:22:06,159
session

593
00:22:06,159 --> 00:22:09,039
so these tokens can be

594
00:22:09,039 --> 00:22:10,960
extracted as soon as you've got the se

595
00:22:10,960 --> 00:22:12,880
impersonate privilege so if you have

596
00:22:12,880 --> 00:22:15,600
local admin permissions you can just sit

597
00:22:15,600 --> 00:22:16,960
on the host

598
00:22:16,960 --> 00:22:19,120
wait for a domain admin to log on and

599
00:22:19,120 --> 00:22:21,039
just take their token

600
00:22:21,039 --> 00:22:24,559
and use it yourself

601
00:22:25,120 --> 00:22:27,760
um there's an example so tickets

602
00:22:27,760 --> 00:22:29,679
kerberos

603
00:22:29,679 --> 00:22:32,320
uh a whirlwind tour of kerberos

604
00:22:32,320 --> 00:22:33,280
you

605
00:22:33,280 --> 00:22:35,039
send a request to the main controller

606
00:22:35,039 --> 00:22:37,600
saying i want access to something

607
00:22:37,600 --> 00:22:40,400
the domain controller verifies the

608
00:22:40,400 --> 00:22:42,240
credentials of the account you've sent

609
00:22:42,240 --> 00:22:45,120
saying does this account exist if yes

610
00:22:45,120 --> 00:22:47,120
it

611
00:22:47,120 --> 00:22:51,120
sends a ticket granting ticket tgt back

612
00:22:51,120 --> 00:22:52,640
that is encrypted

613
00:22:52,640 --> 00:22:53,440
with

614
00:22:53,440 --> 00:22:54,960
the hash

615
00:22:54,960 --> 00:22:56,720
of the

616
00:22:56,720 --> 00:22:59,039
user you want it creates a secret key

617
00:22:59,039 --> 00:23:01,600
using the hash

618
00:23:01,600 --> 00:23:03,520
now when you've got this ticket granting

619
00:23:03,520 --> 00:23:06,080
tickets encrypted

620
00:23:06,080 --> 00:23:08,400
you your user input

621
00:23:08,400 --> 00:23:10,320
you put your password in that gets

622
00:23:10,320 --> 00:23:12,480
turned into a secret key as well and if

623
00:23:12,480 --> 00:23:14,799
you put in the right password then

624
00:23:14,799 --> 00:23:16,559
the keys are the same they'll be able to

625
00:23:16,559 --> 00:23:19,280
decrypt the tickets

626
00:23:19,280 --> 00:23:20,880
and

627
00:23:20,880 --> 00:23:22,240
yeah from there once you have a

628
00:23:22,240 --> 00:23:23,760
decrypted ticket

629
00:23:23,760 --> 00:23:25,360
you can verify the domain controller

630
00:23:25,360 --> 00:23:26,640
that you actually have permissions to

631
00:23:26,640 --> 00:23:28,320
access the service

632
00:23:28,320 --> 00:23:30,400
if you do it sends back the session

633
00:23:30,400 --> 00:23:32,720
token and you go to your service and

634
00:23:32,720 --> 00:23:34,640
you're authenticated

635
00:23:34,640 --> 00:23:36,799
now this ticket granting ticket lives

636
00:23:36,799 --> 00:23:39,760
for 10 hours by default

637
00:23:39,760 --> 00:23:40,559
um

638
00:23:40,559 --> 00:23:43,039
this is stored within the lsas process

639
00:23:43,039 --> 00:23:44,880
memory and can be stolen the same way

640
00:23:44,880 --> 00:23:46,880
that the hashes are

641
00:23:46,880 --> 00:23:48,880
it lives for 10 hours by default because

642
00:23:48,880 --> 00:23:51,279
you don't want someone to have access to

643
00:23:51,279 --> 00:23:52,960
your service forever but you also don't

644
00:23:52,960 --> 00:23:54,960
want to have to spam the main controller

645
00:23:54,960 --> 00:23:58,559
every single time they try and access it

646
00:23:58,960 --> 00:24:01,919
so the pass the tickets

647
00:24:01,919 --> 00:24:04,559
is much the same as pass the hash if you

648
00:24:04,559 --> 00:24:07,120
can if you can pull the tickets out of

649
00:24:07,120 --> 00:24:08,880
elsa's memory you're already

650
00:24:08,880 --> 00:24:10,640
pre-authenticated as that user for 10

651
00:24:10,640 --> 00:24:14,480
minutes 10 hours you can just use it

652
00:24:14,480 --> 00:24:15,760
um it allows you to post there's only

653
00:24:15,760 --> 00:24:17,039
one user

654
00:24:17,039 --> 00:24:19,120
for a limited time for that 10 hour

655
00:24:19,120 --> 00:24:21,360
period and if you stole it seven hours

656
00:24:21,360 --> 00:24:22,960
in you've only got three hours to play

657
00:24:22,960 --> 00:24:25,520
with we can do better than that

658
00:24:25,520 --> 00:24:28,400
so there's a thing called kerberos thing

659
00:24:28,400 --> 00:24:31,039
an idea behind windows is that

660
00:24:31,039 --> 00:24:34,640
basically any action in windows can be

661
00:24:34,640 --> 00:24:36,799
mapped back to an account whether that's

662
00:24:36,799 --> 00:24:38,960
a user account whether that's an account

663
00:24:38,960 --> 00:24:40,720
for the actual machine

664
00:24:40,720 --> 00:24:43,440
every service that's running is mapped

665
00:24:43,440 --> 00:24:44,840
to a service

666
00:24:44,840 --> 00:24:47,919
account etc

667
00:24:47,919 --> 00:24:50,640
so say you have like office 365

668
00:24:50,640 --> 00:24:52,240
automations if you've got scripts there

669
00:24:52,240 --> 00:24:53,520
might be a service account called office

670
00:24:53,520 --> 00:24:56,799
365 automations

671
00:24:57,200 --> 00:25:02,320
so any user can request any service yeah

672
00:25:03,679 --> 00:25:05,840
any user can request any service the

673
00:25:05,840 --> 00:25:07,919
ticket that comes back has an unsalted

674
00:25:07,919 --> 00:25:10,480
password hash for the service account so

675
00:25:10,480 --> 00:25:12,320
you can just take that

676
00:25:12,320 --> 00:25:15,120
out the ticket take it offline and crack

677
00:25:15,120 --> 00:25:16,720
the password

678
00:25:16,720 --> 00:25:19,039
for any service

679
00:25:19,039 --> 00:25:21,039
um and you can request a weaker cipher

680
00:25:21,039 --> 00:25:23,520
so it makes it even easier

681
00:25:23,520 --> 00:25:25,919
now since any action

682
00:25:25,919 --> 00:25:27,679
maps to a

683
00:25:27,679 --> 00:25:29,000
service account

684
00:25:29,000 --> 00:25:32,240
kbrtgt is the service that creates the

685
00:25:32,240 --> 00:25:35,279
tickets so you can request the

686
00:25:35,279 --> 00:25:37,919
unsalted password hash from

687
00:25:37,919 --> 00:25:38,640
the

688
00:25:38,640 --> 00:25:42,400
ticket granting ticket account

689
00:25:42,400 --> 00:25:43,919
brute force the password and then you

690
00:25:43,919 --> 00:25:45,520
can create tickets

691
00:25:45,520 --> 00:25:47,440
at leisure

692
00:25:47,440 --> 00:25:49,200
you can grant it any time you want

693
00:25:49,200 --> 00:25:51,200
you're stuck at 10 hours before you can

694
00:25:51,200 --> 00:25:53,919
just create one for 20 years now and

695
00:25:53,919 --> 00:25:55,360
nothing cares

696
00:25:55,360 --> 00:25:56,559
you're not

697
00:25:56,559 --> 00:25:58,320
you're not past expiry date therefore

698
00:25:58,320 --> 00:26:00,559
it's fine

699
00:26:00,559 --> 00:26:02,879
um

700
00:26:03,440 --> 00:26:05,520
xp was bad

701
00:26:05,520 --> 00:26:07,679
there was a lot of flaws windows 7 got a

702
00:26:07,679 --> 00:26:09,440
little bit better they added user access

703
00:26:09,440 --> 00:26:11,919
control so admins aren't running as

704
00:26:11,919 --> 00:26:12,960
admins

705
00:26:12,960 --> 00:26:15,600
by default

706
00:26:17,039 --> 00:26:19,679
windows 8 was really good even if it

707
00:26:19,679 --> 00:26:21,679
didn't do anything else right

708
00:26:21,679 --> 00:26:23,360
so single sign-on was no longer cached

709
00:26:23,360 --> 00:26:25,039
and else ass

710
00:26:25,039 --> 00:26:27,600
you can still switch it on

711
00:26:27,600 --> 00:26:29,600
uh your local accounts are restricted

712
00:26:29,600 --> 00:26:31,919
from network logons so you can't really

713
00:26:31,919 --> 00:26:33,520
pass the hash with the local accounts

714
00:26:33,520 --> 00:26:34,960
you've created

715
00:26:34,960 --> 00:26:37,039
and protected processes ltas is now

716
00:26:37,039 --> 00:26:38,640
protected so

717
00:26:38,640 --> 00:26:40,640
you need to be signed code to inject

718
00:26:40,640 --> 00:26:43,039
into it and only other protected

719
00:26:43,039 --> 00:26:47,039
processes can attach the debugger

720
00:26:48,400 --> 00:26:49,919
they also added a security group called

721
00:26:49,919 --> 00:26:52,320
domain protected users which bans weak

722
00:26:52,320 --> 00:26:55,039
authentication credentials never cached

723
00:26:55,039 --> 00:26:57,760
tokens cannot be delegated

724
00:26:57,760 --> 00:27:00,320
and your hashes aren't cached and your

725
00:27:00,320 --> 00:27:02,480
kerberos ticket is restricted to four

726
00:27:02,480 --> 00:27:04,640
hours and you can't give it weak ciphers

727
00:27:04,640 --> 00:27:07,840
for curb roasting

728
00:27:09,360 --> 00:27:12,320
um windows 10 did credential guard where

729
00:27:12,320 --> 00:27:14,960
lsas was essentially split into lsas and

730
00:27:14,960 --> 00:27:17,840
elsa iso this is using virtualization to

731
00:27:17,840 --> 00:27:20,960
give an extra level of protection

732
00:27:20,960 --> 00:27:25,200
really it comes down to basic hygiene

733
00:27:25,760 --> 00:27:27,520
don't interactively log into user

734
00:27:27,520 --> 00:27:29,760
laptops as domain admin because that's

735
00:27:29,760 --> 00:27:31,440
caching credentials if you're a help

736
00:27:31,440 --> 00:27:32,960
desk and you really need to use

737
00:27:32,960 --> 00:27:34,960
powershell administration because it

738
00:27:34,960 --> 00:27:36,880
doesn't send the credentials

739
00:27:36,880 --> 00:27:38,720
over to be cached

740
00:27:38,720 --> 00:27:41,520
um on that subject a policy of lowest

741
00:27:41,520 --> 00:27:43,840
required privilege

742
00:27:43,840 --> 00:27:45,679
you're only using excel chrome and

743
00:27:45,679 --> 00:27:47,679
outlook you don't need a local admin on

744
00:27:47,679 --> 00:27:49,440
your machine

745
00:27:49,440 --> 00:27:51,279
why are you checking your ad your emails

746
00:27:51,279 --> 00:27:53,520
as an admin anyway

747
00:27:53,520 --> 00:27:54,480
um

748
00:27:54,480 --> 00:27:56,240
rdp connections

749
00:27:56,240 --> 00:27:57,840
terminate them when you're finished

750
00:27:57,840 --> 00:27:59,440
don't just click close because you're

751
00:27:59,440 --> 00:28:00,799
still logged in at that point which

752
00:28:00,799 --> 00:28:01,919
means your tokens are still on the

753
00:28:01,919 --> 00:28:03,520
machine if you're help desk and you're

754
00:28:03,520 --> 00:28:06,320
already peeing into people's machines

755
00:28:06,320 --> 00:28:07,679
don't leave

756
00:28:07,679 --> 00:28:10,240
your account running on all of these

757
00:28:10,240 --> 00:28:11,919
laptops

758
00:28:11,919 --> 00:28:13,520
long passwords on your service accounts

759
00:28:13,520 --> 00:28:14,880
and it might be worth changing them

760
00:28:14,880 --> 00:28:17,279
regularly and while it's easier said

761
00:28:17,279 --> 00:28:19,840
than done monitor for anomalous activity

762
00:28:19,840 --> 00:28:21,840
if one user suddenly starts requesting a

763
00:28:21,840 --> 00:28:23,440
lot of tgts

764
00:28:23,440 --> 00:28:25,360
chances are there's an attempt at

765
00:28:25,360 --> 00:28:28,479
kerberos thing going on

766
00:28:28,960 --> 00:28:30,480
there are a lot of times a workstation

767
00:28:30,480 --> 00:28:32,640
will log into a server there aren't very

768
00:28:32,640 --> 00:28:34,720
many cases where a laptop will log into

769
00:28:34,720 --> 00:28:36,960
another laptop so

770
00:28:36,960 --> 00:28:39,200
another thing to keep an eye out on

771
00:28:39,200 --> 00:28:41,360
and your domain controller needs

772
00:28:41,360 --> 00:28:42,880
monitoring if you only have a limited

773
00:28:42,880 --> 00:28:44,320
amount of licenses on an edr or

774
00:28:44,320 --> 00:28:45,279
something

775
00:28:45,279 --> 00:28:46,880
that's your crown jewels keep it

776
00:28:46,880 --> 00:28:48,640
protected

777
00:28:48,640 --> 00:28:50,480
um we don't have any time because it's

778
00:28:50,480 --> 00:28:52,320
the next keynote

779
00:28:52,320 --> 00:28:54,720
so no questions i'm afraid i won't be in

780
00:28:54,720 --> 00:28:56,640
the pub either so

781
00:28:56,640 --> 00:28:58,000
i'll go back to the start to show you

782
00:28:58,000 --> 00:29:00,240
that

783
00:29:04,320 --> 00:29:05,919
keith lerman is my twitter name so you

784
00:29:05,919 --> 00:29:07,520
can send me a message on there if you

785
00:29:07,520 --> 00:29:09,350
have questions

786
00:29:09,350 --> 00:29:16,730
[Applause]

787
00:29:17,919 --> 00:29:20,000
you

