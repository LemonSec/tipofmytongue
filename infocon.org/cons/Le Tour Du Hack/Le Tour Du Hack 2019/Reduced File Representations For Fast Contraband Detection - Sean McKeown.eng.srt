1
00:00:02,580 --> 00:00:05,430
hi my name is Shaun McEwan and I'm

2
00:00:05,430 --> 00:00:07,259
actually a lecturer at Napier now but

3
00:00:07,259 --> 00:00:09,059
this is going to be presenting work for

4
00:00:09,059 --> 00:00:12,119
my PhD so I kind of snuck in through the

5
00:00:12,119 --> 00:00:13,619
back door sort of thing I'm still

6
00:00:13,619 --> 00:00:15,299
technically a student as well so this is

7
00:00:15,299 --> 00:00:18,870
actually thing I'll have the contact

8
00:00:18,870 --> 00:00:20,280
details at the bottom the whole time and

9
00:00:20,280 --> 00:00:21,990
again at the end if you're really super

10
00:00:21,990 --> 00:00:23,610
interest in forensics I'm actually glad

11
00:00:23,610 --> 00:00:25,530
the room is not completely empty because

12
00:00:25,530 --> 00:00:27,300
forensics is sort of like the weird

13
00:00:27,300 --> 00:00:29,190
stepchild of the security world and it

14
00:00:29,190 --> 00:00:30,480
sort of sets in the corner most of

15
00:00:30,480 --> 00:00:32,460
things so thanks for thanks for coming

16
00:00:32,460 --> 00:00:36,440
and supporting my choice and research in

17
00:00:37,220 --> 00:00:43,110
sorry sweetener till then please don't

18
00:00:43,110 --> 00:00:47,010
shout out when I'm wrong I should sit

19
00:00:47,010 --> 00:00:49,280
really right so the the failure was a

20
00:00:49,280 --> 00:00:51,780
utilizing reducible representations to

21
00:00:51,780 --> 00:00:54,030
facilitate fast corner by detection but

22
00:00:54,030 --> 00:00:55,530
my fool that's the tale the thesis

23
00:00:55,530 --> 00:00:57,600
hopefully will make more sense in a

24
00:00:57,600 --> 00:00:58,020
minute

25
00:00:58,020 --> 00:01:01,050
at least so the scenario we're talking

26
00:01:01,050 --> 00:01:03,090
about here is one the King I just

27
00:01:03,090 --> 00:01:04,709
touched on a little bit and basically

28
00:01:04,709 --> 00:01:06,630
it's about detecting contraband images

29
00:01:06,630 --> 00:01:08,249
contraband just being another word for

30
00:01:08,249 --> 00:01:10,319
legal and then the public sector that

31
00:01:10,319 --> 00:01:12,899
means pretty much one thing and I'll

32
00:01:12,899 --> 00:01:15,149
leave it there so the public sector

33
00:01:15,149 --> 00:01:17,369
forensics the most of the work is pretty

34
00:01:17,369 --> 00:01:19,079
much to do it illegal images illegal

35
00:01:19,079 --> 00:01:21,689
media that sort of stuff and most of the

36
00:01:21,689 --> 00:01:24,209
way that this is detected at least first

37
00:01:24,209 --> 00:01:27,689
is using a cryptographic signatures so

38
00:01:27,689 --> 00:01:28,979
basically you've got your image of

39
00:01:28,979 --> 00:01:31,829
random staff here in Glasgow you pass it

40
00:01:31,829 --> 00:01:33,990
through some hash function and this case

41
00:01:33,990 --> 00:01:36,270
sha-256 you get a fairly long

42
00:01:36,270 --> 00:01:38,639
cryptographic strength that shouldn't

43
00:01:38,639 --> 00:01:40,289
match any other image but just that one

44
00:01:40,289 --> 00:01:43,139
and you look up in a database and that's

45
00:01:43,139 --> 00:01:44,579
pretty much it that's the first wave of

46
00:01:44,579 --> 00:01:46,679
detection if we've seen it before in the

47
00:01:46,679 --> 00:01:48,359
sense database issued we flagged up with

48
00:01:48,359 --> 00:01:51,709
us now the problem with this approach is

49
00:01:51,709 --> 00:01:54,149
amongst other things with modifications

50
00:01:54,149 --> 00:01:55,109
and stuff that won't bother talking

51
00:01:55,109 --> 00:01:58,919
about there's just so much data to look

52
00:01:58,919 --> 00:02:01,919
at right so visual forensics is

53
00:02:01,919 --> 00:02:03,419
suffering a massive backlog and it's

54
00:02:03,419 --> 00:02:05,130
been a problem for the last 10 years or

55
00:02:05,130 --> 00:02:07,590
so well actually maybe more like 15

56
00:02:07,590 --> 00:02:09,320
there

57
00:02:09,320 --> 00:02:11,380
given that there's so many more devices

58
00:02:11,380 --> 00:02:13,880
para investigation so if you think about

59
00:02:13,880 --> 00:02:15,740
checking in someone's door it's got a

60
00:02:15,740 --> 00:02:17,870
phone with a laptop I have a PC they

61
00:02:17,870 --> 00:02:21,590
forgot ps4 Smart TV some kind of thing

62
00:02:21,590 --> 00:02:23,480
for receiving Hulu Netflix that sort of

63
00:02:23,480 --> 00:02:25,910
stuff if anyone else lives there they

64
00:02:25,910 --> 00:02:28,070
probably got the same stuff again so you

65
00:02:28,070 --> 00:02:30,530
might you know kick and one house store

66
00:02:30,530 --> 00:02:32,900
and come up with ten devices and though

67
00:02:32,900 --> 00:02:34,670
you have to figure out what to do with

68
00:02:34,670 --> 00:02:37,010
that and then that's compounded by the

69
00:02:37,010 --> 00:02:38,810
fact that the volume for each of these

70
00:02:38,810 --> 00:02:41,330
devices is increasing year on year so

71
00:02:41,330 --> 00:02:44,110
back when I had the windows 95 machine

72
00:02:44,110 --> 00:02:47,630
probably around withers around 1995 the

73
00:02:47,630 --> 00:02:50,060
hard drive is 2 gigabytes that has last

74
00:02:50,060 --> 00:02:51,650
football that is like half of the RAM in

75
00:02:51,650 --> 00:02:53,630
my phone right it's nothing absolutely

76
00:02:53,630 --> 00:02:55,550
nothing so the forensics tools were

77
00:02:55,550 --> 00:02:57,650
really created for those size of drives

78
00:02:57,650 --> 00:02:59,690
they didn't really like the whole 4

79
00:02:59,690 --> 00:03:01,870
terabyte stuff this goes on just named

80
00:03:01,870 --> 00:03:04,220
so because of the volume because the

81
00:03:04,220 --> 00:03:05,840
number of devices because the tools just

82
00:03:05,840 --> 00:03:07,970
being really old and not really

83
00:03:07,970 --> 00:03:10,550
advancing the times of such bretton at

84
00:03:10,550 --> 00:03:12,860
least in 2015 at a backlog of a year

85
00:03:12,860 --> 00:03:15,739
half and the year after that

86
00:03:15,739 --> 00:03:19,340
Ireland recorded four years so see the

87
00:03:19,340 --> 00:03:21,739
device put in a warehouse we'll get to

88
00:03:21,739 --> 00:03:24,170
that four years then fantastic ray

89
00:03:24,170 --> 00:03:25,989
that's not anyone any use to anyone and

90
00:03:25,989 --> 00:03:29,450
really part of the problem or a lot of

91
00:03:29,450 --> 00:03:31,430
the problem as it turns out is that

92
00:03:31,430 --> 00:03:33,160
there's this story for media bottleneck

93
00:03:33,160 --> 00:03:36,590
so we've got a 4 terabyte drive but it

94
00:03:36,590 --> 00:03:38,600
takes hours to actually read everything

95
00:03:38,600 --> 00:03:41,450
off of it so you can think about the

96
00:03:41,450 --> 00:03:43,730
data as this big reservoir a big pool of

97
00:03:43,730 --> 00:03:46,400
water but to get it out you have to put

98
00:03:46,400 --> 00:03:48,650
a little tiny print prick in the bottom

99
00:03:48,650 --> 00:03:49,970
of it and just wait for it to all seep

100
00:03:49,970 --> 00:03:52,430
out so that data stream is really thin

101
00:03:52,430 --> 00:03:54,530
that's the read speed that's the 133

102
00:03:54,530 --> 00:03:56,180
megabytes which is actually tricky

103
00:03:56,180 --> 00:04:00,260
swords for our hard drive and if you

104
00:04:00,260 --> 00:04:01,940
look back I've got some nice numbers and

105
00:04:01,940 --> 00:04:03,320
my thesis I don't remember them off the

106
00:04:03,320 --> 00:04:03,920
top of my head

107
00:04:03,920 --> 00:04:06,019
but essentially that sort of 2 gigabyte

108
00:04:06,019 --> 00:04:08,330
Drive you may have read in an hour or

109
00:04:08,330 --> 00:04:11,300
less I've got some some drives that you

110
00:04:11,300 --> 00:04:12,769
could have read in about two or three

111
00:04:12,769 --> 00:04:14,630
minutes based on the fact of the

112
00:04:14,630 --> 00:04:16,910
capacity and the ratio of the capacity

113
00:04:16,910 --> 00:04:18,108
to the read speed were actually much

114
00:04:18,108 --> 00:04:19,600
more in bounce

115
00:04:19,600 --> 00:04:21,910
and unfortunately this whole scenario is

116
00:04:21,910 --> 00:04:25,870
only getting worse so si que si es they

117
00:04:25,870 --> 00:04:28,060
had bits showing there were new hammer

118
00:04:28,060 --> 00:04:31,720
and iMac - technology essentially hammer

119
00:04:31,720 --> 00:04:35,410
and the left hand gif or Jif depending

120
00:04:35,410 --> 00:04:40,180
which brand the Philistine you're the

121
00:04:40,180 --> 00:04:41,770
left unsaid is all about applying heat

122
00:04:41,770 --> 00:04:43,810
when you're essentially rating that my

123
00:04:43,810 --> 00:04:45,640
nothing Fox to the drive so they found

124
00:04:45,640 --> 00:04:47,380
that if you actually apply heat you get

125
00:04:47,380 --> 00:04:50,290
a better signal and it holds it better

126
00:04:50,290 --> 00:04:52,270
for the tiny areas we're looking at here

127
00:04:52,270 --> 00:04:54,040
so basically they can cram more things

128
00:04:54,040 --> 00:04:56,590
together on the disk and the numbers

129
00:04:56,590 --> 00:04:57,430
they're talking about it they've

130
00:04:57,430 --> 00:04:59,110
actually got drives their sixteenth air

131
00:04:59,110 --> 00:05:01,720
base already is basically this year

132
00:05:01,720 --> 00:05:03,070
they're looking to check twenty terabyte

133
00:05:03,070 --> 00:05:05,110
drives or maybe by next year depending

134
00:05:05,110 --> 00:05:07,300
on how it pans out but in the next five

135
00:05:07,300 --> 00:05:09,310
or six years they're looking out 40 to

136
00:05:09,310 --> 00:05:11,890
100 terabytes which is absolutely

137
00:05:11,890 --> 00:05:14,250
staggering through our hard disk

138
00:05:14,250 --> 00:05:15,910
fortunately they're sort of bringing

139
00:05:15,910 --> 00:05:18,430
along this idea called Mach 2 where you

140
00:05:18,430 --> 00:05:20,230
can have to read heads per site of

141
00:05:20,230 --> 00:05:23,290
Leclaire so we can effectively double

142
00:05:23,290 --> 00:05:25,120
the reach speeds maybe the problem with

143
00:05:25,120 --> 00:05:26,650
that is you double the reach speed but

144
00:05:26,650 --> 00:05:28,180
the capacity is increasing by five or

145
00:05:28,180 --> 00:05:31,810
ten times so if you take the same kind

146
00:05:31,810 --> 00:05:32,800
of numbers and you move them down

147
00:05:32,800 --> 00:05:35,380
actually it takes nearly two days do we

148
00:05:35,380 --> 00:05:37,900
the disk at that point two days that's

149
00:05:37,900 --> 00:05:38,730
insane

150
00:05:38,730 --> 00:05:41,140
even if you say okay is as fast as an

151
00:05:41,140 --> 00:05:43,330
SSD it still takes nearly an entire day

152
00:05:43,330 --> 00:05:46,450
at 22 hours so it's kind of bonkers and

153
00:05:46,450 --> 00:05:49,150
it's not going to get any better so

154
00:05:49,150 --> 00:05:52,000
let's talk briefly about the volume both

155
00:05:52,000 --> 00:05:53,680
existing techniques that are being used

156
00:05:53,680 --> 00:05:56,320
in researchers now so we again go back

157
00:05:56,320 --> 00:05:57,790
to this idea of having a big data

158
00:05:57,790 --> 00:06:00,700
reservoir well we can actually post that

159
00:06:00,700 --> 00:06:02,140
at the same speed we're getting off the

160
00:06:02,140 --> 00:06:04,960
desk right so we're printing it out

161
00:06:04,960 --> 00:06:06,670
really slowly but we're doing all the

162
00:06:06,670 --> 00:06:08,170
processing and we're copying it

163
00:06:08,170 --> 00:06:10,690
forensically all the same time we're

164
00:06:10,690 --> 00:06:12,040
still gonna take eight errors to get

165
00:06:12,040 --> 00:06:13,150
everything off the desk but least we're

166
00:06:13,150 --> 00:06:14,140
doing something about that the meantime

167
00:06:14,140 --> 00:06:17,470
I should also mention that these these

168
00:06:17,470 --> 00:06:19,420
boxes here they're just references to

169
00:06:19,420 --> 00:06:20,800
literature so you don't have to read

170
00:06:20,800 --> 00:06:22,270
them kind of ignore them if you don't

171
00:06:22,270 --> 00:06:25,240
really care but they'll be popping up

172
00:06:25,240 --> 00:06:27,340
every now and then so so we're still

173
00:06:27,340 --> 00:06:29,759
limited by a terror window

174
00:06:29,759 --> 00:06:31,800
well another solution is to say well we

175
00:06:31,800 --> 00:06:33,389
don't need that massive reservoir we

176
00:06:33,389 --> 00:06:34,710
don't need everything on it a lot of us

177
00:06:34,710 --> 00:06:36,509
probably going to be banane not really

178
00:06:36,509 --> 00:06:38,370
worth looking at so what we just

179
00:06:38,370 --> 00:06:40,199
selectively pick the best we want to

180
00:06:40,199 --> 00:06:42,960
look at and a couple of the methods in

181
00:06:42,960 --> 00:06:44,279
the left picture really look at parsing

182
00:06:44,279 --> 00:06:46,259
the file system and saying okay there's

183
00:06:46,259 --> 00:06:47,939
like a big directory there it seems to

184
00:06:47,939 --> 00:06:49,770
have 100 images why do we look at that

185
00:06:49,770 --> 00:06:51,419
this one just seems to have Excel

186
00:06:51,419 --> 00:06:53,009
spreadsheets we won't bother with that

187
00:06:53,009 --> 00:06:55,830
one and we can sort of base it on the

188
00:06:55,830 --> 00:06:57,330
type of case for looking at service

189
00:06:57,330 --> 00:06:59,069
embezzlement actually the spreadsheets

190
00:06:59,069 --> 00:07:01,379
are probably relevant if it's tough the

191
00:07:01,379 --> 00:07:02,939
police are doing then really focusing on

192
00:07:02,939 --> 00:07:05,879
media we want images and video so it's

193
00:07:05,879 --> 00:07:07,409
all about reducing the data set the

194
00:07:07,409 --> 00:07:10,289
point we can actually manage and that

195
00:07:10,289 --> 00:07:12,330
sort of continues with some stuff that

196
00:07:12,330 --> 00:07:15,389
has been done most recently by fell pen

197
00:07:15,389 --> 00:07:18,059
was at Napier and essentially the idea

198
00:07:18,059 --> 00:07:19,740
is well we don't need to care about file

199
00:07:19,740 --> 00:07:21,389
systems we just needed this and we just

200
00:07:21,389 --> 00:07:23,069
need to plug it in and then we'll just

201
00:07:23,069 --> 00:07:24,930
select random blocks through a disk it

202
00:07:24,930 --> 00:07:26,550
more hash those and compare them with

203
00:07:26,550 --> 00:07:29,279
the database and in doing so we don't

204
00:07:29,279 --> 00:07:31,110
have to read one two three four hundred

205
00:07:31,110 --> 00:07:32,669
terabytes we can maybe get away with

206
00:07:32,669 --> 00:07:34,139
reading a couple hundred megabytes

207
00:07:34,139 --> 00:07:35,909
couple gigabytes something like that and

208
00:07:35,909 --> 00:07:37,979
the benchmarks are looking pretty good

209
00:07:37,979 --> 00:07:41,310
especially for SSDs so under an hour in

210
00:07:41,310 --> 00:07:43,259
most cases for this kind of analysis and

211
00:07:43,259 --> 00:07:45,689
the next thing about that is it's the

212
00:07:45,689 --> 00:07:48,509
testicle confidence so because you're

213
00:07:48,509 --> 00:07:51,120
doing a sample you can reason about the

214
00:07:51,120 --> 00:07:53,039
target data size and the samples and the

215
00:07:53,039 --> 00:07:54,930
number of samples you say well actually

216
00:07:54,930 --> 00:07:56,520
this is maintaining weight maintaining

217
00:07:56,520 --> 00:07:57,270
percent

218
00:07:57,270 --> 00:07:58,680
gonna happen if it's there we'll

219
00:07:58,680 --> 00:08:01,379
probably find that with this with this

220
00:08:01,379 --> 00:08:03,479
reasonable certainty which is very

221
00:08:03,479 --> 00:08:06,059
useful though I don't do that so I'll go

222
00:08:06,059 --> 00:08:07,949
talk about my stuff which is still about

223
00:08:07,949 --> 00:08:09,599
data reduction as you may have gathered

224
00:08:09,599 --> 00:08:11,759
from the table or you may not gathered

225
00:08:11,759 --> 00:08:13,729
very much from the table I'm honest but

226
00:08:13,729 --> 00:08:16,020
it's all about reducing the amount of

227
00:08:16,020 --> 00:08:17,849
theater so I've reduced representation

228
00:08:17,849 --> 00:08:19,800
as I've called that is pretty much just

229
00:08:19,800 --> 00:08:22,169
the way of saying some cane a

230
00:08:22,169 --> 00:08:23,669
representation of the image that we

231
00:08:23,669 --> 00:08:25,860
don't need the field data for so if you

232
00:08:25,860 --> 00:08:27,479
can picture the film image on the right

233
00:08:27,479 --> 00:08:29,520
well maybe we just want to look at the

234
00:08:29,520 --> 00:08:31,289
thumbnails as a king I was just talking

235
00:08:31,289 --> 00:08:31,709
about

236
00:08:31,709 --> 00:08:33,719
so that's centralized as lower

237
00:08:33,719 --> 00:08:35,578
resolution it's a reduced version of the

238
00:08:35,578 --> 00:08:38,640
filament another way is to say well we

239
00:08:38,640 --> 00:08:39,479
don't actually need to read the whole

240
00:08:39,479 --> 00:08:41,309
image let's just read a tiny snippet of

241
00:08:41,309 --> 00:08:43,470
it that could be front or back

242
00:08:43,470 --> 00:08:45,510
whatever you decided well I've got

243
00:08:45,510 --> 00:08:48,450
failed specific approaches we are

244
00:08:48,450 --> 00:08:51,240
looking at JPEG PNG features and I've

245
00:08:51,240 --> 00:08:53,010
got file agnostic approaches where it's

246
00:08:53,010 --> 00:08:54,840
pretty much just who base are and a big

247
00:08:54,840 --> 00:08:57,090
block of data I don't care if it's PNG

248
00:08:57,090 --> 00:08:59,700
is whoever just get me this block of

249
00:08:59,700 --> 00:09:01,250
data and all hash that instead

250
00:09:01,250 --> 00:09:03,810
so I'll essentially be mostly talking

251
00:09:03,810 --> 00:09:06,300
about this partial file stuff just

252
00:09:06,300 --> 00:09:08,100
because the thumbnail cache stuff isn't

253
00:09:08,100 --> 00:09:10,350
quite well it's not published for a

254
00:09:10,350 --> 00:09:11,850
start so I don't want to say too much

255
00:09:11,850 --> 00:09:13,530
about it anyway but also you just heard

256
00:09:13,530 --> 00:09:16,050
a lot with um those anyway assuming most

257
00:09:16,050 --> 00:09:17,400
of the people in the room were in the

258
00:09:17,400 --> 00:09:20,100
previous talk so I'll just quickly blast

259
00:09:20,100 --> 00:09:21,540
through the thumbnail based triai stuff

260
00:09:21,540 --> 00:09:23,250
and you'll know where thumbnails are

261
00:09:23,250 --> 00:09:25,620
just small version of the image normally

262
00:09:25,620 --> 00:09:28,230
used for explorer finder or gallery

263
00:09:28,230 --> 00:09:30,120
depending on the application

264
00:09:30,120 --> 00:09:33,810
or the operating system rather so if we

265
00:09:33,810 --> 00:09:35,940
take it back to this this idea of having

266
00:09:35,940 --> 00:09:37,920
a big data reservoir well we're not

267
00:09:37,920 --> 00:09:39,450
sampling we're not reducing the whole

268
00:09:39,450 --> 00:09:40,800
thing we're actually just looking in Oh

269
00:09:40,800 --> 00:09:44,820
No of them right looking one very

270
00:09:44,820 --> 00:09:47,970
specific place to sing go here that

271
00:09:47,970 --> 00:09:50,070
should have thumbnails for images on the

272
00:09:50,070 --> 00:09:52,230
entire desk it's actually only going to

273
00:09:52,230 --> 00:09:53,940
be a few hundred megabytes maybe a

274
00:09:53,940 --> 00:09:55,740
gigabyte and a bit depending on how phil

275
00:09:55,740 --> 00:09:58,020
is but we can ignore the fact that

276
00:09:58,020 --> 00:09:59,520
there's terabytes of data on here right

277
00:09:59,520 --> 00:10:01,200
if it's been viewed recently it's

278
00:10:01,200 --> 00:10:02,640
probably in the cache it's probably a

279
00:10:02,640 --> 00:10:04,830
good place to go and the really nice

280
00:10:04,830 --> 00:10:06,300
thing about this is this been there

281
00:10:06,300 --> 00:10:08,280
since Windows Vista so when there's

282
00:10:08,280 --> 00:10:09,870
Vista all the way through the Windows 10

283
00:10:09,870 --> 00:10:13,100
doing the same thing the work I did

284
00:10:13,100 --> 00:10:16,560
mostly looked at the 95 pixel in the 256

285
00:10:16,560 --> 00:10:19,380
pixel thumbnails so that's like the the

286
00:10:19,380 --> 00:10:21,180
smallest one and then the sort of medium

287
00:10:21,180 --> 00:10:24,060
large it gets that different size when

288
00:10:24,060 --> 00:10:25,530
you'll get the super extra large ones in

289
00:10:25,530 --> 00:10:27,530
the previews but that's the most common

290
00:10:27,530 --> 00:10:31,110
format for them and rather than talk a

291
00:10:31,110 --> 00:10:32,730
bit more about the the triage I'm

292
00:10:32,730 --> 00:10:34,560
essentially just gonna talk about some

293
00:10:34,560 --> 00:10:36,510
of the difficulties so it's not just as

294
00:10:36,510 --> 00:10:38,100
simple as hashing it and saying yeah

295
00:10:38,100 --> 00:10:40,770
we'll throw out a database Blair there's

296
00:10:40,770 --> 00:10:43,020
actually some complications because of

297
00:10:43,020 --> 00:10:44,880
the way that Windows versions store this

298
00:10:44,880 --> 00:10:47,520
stuff so it turns out after having

299
00:10:47,520 --> 00:10:52,620
looked Windows Vista 7 and 10 Ice kept 8

300
00:10:52,620 --> 00:10:57,209
because reasons a lot of the time that

301
00:10:57,209 --> 00:10:59,189
des is just different so on the

302
00:10:59,189 --> 00:11:01,019
right-hand side here we've got Windows

303
00:11:01,019 --> 00:11:02,879
10 thumbnail and a Windows 7 thumbnail

304
00:11:02,879 --> 00:11:05,129
and this is just an energy deaf so all

305
00:11:05,129 --> 00:11:07,470
the stuff in pink is different like it

306
00:11:07,470 --> 00:11:11,129
could be like by of a 255 color of pecs

307
00:11:11,129 --> 00:11:13,829
or maybe 254 instead right so it's not

308
00:11:13,829 --> 00:11:15,149
necessarily a big difference it's just

309
00:11:15,149 --> 00:11:17,759
that that pixels different but it turns

310
00:11:17,759 --> 00:11:19,800
out quite a lot of the images have got

311
00:11:19,800 --> 00:11:20,999
most of the image being different

312
00:11:20,999 --> 00:11:23,429
between the two and that's kind of

313
00:11:23,429 --> 00:11:25,589
concerning but it just basically means

314
00:11:25,589 --> 00:11:27,420
that you can't hash the image and get

315
00:11:27,420 --> 00:11:29,550
the same thing and there's another

316
00:11:29,550 --> 00:11:31,619
reason for that and that sometimes they

317
00:11:31,619 --> 00:11:33,689
just store them differently so sometimes

318
00:11:33,689 --> 00:11:36,179
the header is different especially for

319
00:11:36,179 --> 00:11:38,160
the bitmaps so the bet Maps change like

320
00:11:38,160 --> 00:11:40,019
three times I think just by having a

321
00:11:40,019 --> 00:11:41,730
different header even if you don't look

322
00:11:41,730 --> 00:11:44,249
at the peps all there one of them also

323
00:11:44,249 --> 00:11:46,379
uses compression but feels compression

324
00:11:46,379 --> 00:11:49,949
each I think is one does 10 and yeah so

325
00:11:49,949 --> 00:11:51,240
there's all sorts of small differences

326
00:11:51,240 --> 00:11:53,249
and for the slightly larger thumbnails

327
00:11:53,249 --> 00:11:54,839
that use JPEGs they've actually got

328
00:11:54,839 --> 00:11:57,029
different quality settings as well so

329
00:11:57,029 --> 00:11:58,410
you're never going to get the exact same

330
00:11:58,410 --> 00:11:59,910
thing between them so hashing wouldn't

331
00:11:59,910 --> 00:12:01,860
work because if you change one pixel the

332
00:12:01,860 --> 00:12:03,990
hash changes if you change one arbitrary

333
00:12:03,990 --> 00:12:05,490
bit and save the whole thing the hash

334
00:12:05,490 --> 00:12:07,439
changes so you can't build a single

335
00:12:07,439 --> 00:12:11,670
database another even weirder thing that

336
00:12:11,670 --> 00:12:13,769
only happens with Windows 7 as far as

337
00:12:13,769 --> 00:12:16,529
I'm aware at least is the some of the

338
00:12:16,529 --> 00:12:17,819
thumbnails aren't even extracted from

339
00:12:17,819 --> 00:12:19,829
the fill thing so on the right hand side

340
00:12:19,829 --> 00:12:22,860
this is the full image and then you can

341
00:12:22,860 --> 00:12:24,240
see Windows 10 is basically just looking

342
00:12:24,240 --> 00:12:25,619
at the film Majin saying yep create a

343
00:12:25,619 --> 00:12:28,170
thumbnail from that done sort it when

344
00:12:28,170 --> 00:12:29,759
your 7 does this weird thing where it

345
00:12:29,759 --> 00:12:31,920
depends on the size of the thumbnail so

346
00:12:31,920 --> 00:12:37,429
the navy 6 which one was it - 5 6 pixels

347
00:12:37,429 --> 00:12:39,720
ok then a nice xpx or thumbnails look

348
00:12:39,720 --> 00:12:41,850
like this but if you go up to the

349
00:12:41,850 --> 00:12:43,709
slightly larger 2 5 6 pixel thumbnails

350
00:12:43,709 --> 00:12:46,230
that actually picks it from this and by

351
00:12:46,230 --> 00:12:47,399
I mean that it looks like that bit

352
00:12:47,399 --> 00:12:50,730
actually thinks over that so in ng pegs

353
00:12:50,730 --> 00:12:52,799
you can have an embedded thumbnail so if

354
00:12:52,799 --> 00:12:54,509
I take a picture with my camera on my

355
00:12:54,509 --> 00:12:55,019
phone

356
00:12:55,019 --> 00:12:56,939
it usually embeds a little thumbnail on

357
00:12:56,939 --> 00:12:58,529
there that can get used for displaying

358
00:12:58,529 --> 00:13:00,600
stuff so it's it's a secondary image

359
00:13:00,600 --> 00:13:02,369
within the main image so you can

360
00:13:02,369 --> 00:13:05,189
actually pull that out but a weird thing

361
00:13:05,189 --> 00:13:06,929
that can happen is if you edit the full

362
00:13:06,929 --> 00:13:09,419
sized image it may not change the

363
00:13:09,419 --> 00:13:10,499
thumbnail

364
00:13:10,499 --> 00:13:12,749
and this actually backfired quite

365
00:13:12,749 --> 00:13:15,149
heavily on someone I can't remember

366
00:13:15,149 --> 00:13:18,569
names like 2012 she had a photo shoot

367
00:13:18,569 --> 00:13:21,749
it's topless and decided to crop it put

368
00:13:21,749 --> 00:13:24,539
it on a blog post or something and for

369
00:13:24,539 --> 00:13:26,129
some bizarre reason someone was mucking

370
00:13:26,129 --> 00:13:27,599
about in the XF and found that yep

371
00:13:27,599 --> 00:13:28,919
there's the original image she was

372
00:13:28,919 --> 00:13:31,019
actually like topless or whatever and it

373
00:13:31,019 --> 00:13:32,849
was a whole thing than use so this can

374
00:13:32,849 --> 00:13:35,429
happen and oddly if it happens on

375
00:13:35,429 --> 00:13:36,929
Windows 7 and you're switching between

376
00:13:36,929 --> 00:13:38,459
the small the medium and a large

377
00:13:38,459 --> 00:13:40,349
thumbnail previews you see different

378
00:13:40,349 --> 00:13:43,619
things which is just stupid so yeah

379
00:13:43,619 --> 00:13:44,849
another reason the hashes are just going

380
00:13:44,849 --> 00:13:47,099
to be different but that isn't really

381
00:13:47,099 --> 00:13:48,149
the thing I want to talk about and I'm

382
00:13:48,149 --> 00:13:49,829
blasting through lots of time talking

383
00:13:49,829 --> 00:13:52,949
about not the main thing so partial file

384
00:13:52,949 --> 00:13:54,239
signatures is really what I want to get

385
00:13:54,239 --> 00:13:56,129
out okay what's a partial file signature

386
00:13:56,129 --> 00:13:58,379
well it's basically just chopping off a

387
00:13:58,379 --> 00:13:59,669
better the fail and saying let's tweak

388
00:13:59,669 --> 00:14:02,489
that instead of the whole thing so we

389
00:14:02,489 --> 00:14:03,899
come back to that sort of data reservoir

390
00:14:03,899 --> 00:14:05,129
now to you which I really found though

391
00:14:05,129 --> 00:14:07,709
for some reason it's essentially just

392
00:14:07,709 --> 00:14:09,629
like taking the start or end of a file

393
00:14:09,629 --> 00:14:11,429
so depending on how many files have back

394
00:14:11,429 --> 00:14:12,299
they are you'll get a different

395
00:14:12,299 --> 00:14:14,939
distribution of your sample essentially

396
00:14:14,939 --> 00:14:16,889
from the disk there's only really two

397
00:14:16,889 --> 00:14:19,679
main criteria here we want the signature

398
00:14:19,679 --> 00:14:22,619
to be pretty unique or unique at some

399
00:14:22,619 --> 00:14:24,539
scale because otherwise the database

400
00:14:24,539 --> 00:14:26,669
doesn't go to work and we wanted to be

401
00:14:26,669 --> 00:14:28,019
faster than just reading the whole image

402
00:14:28,019 --> 00:14:29,249
because otherwise there's actually no

403
00:14:29,249 --> 00:14:32,939
point and next thing about this as well

404
00:14:32,939 --> 00:14:38,099
as it's deterministic so you want to

405
00:14:38,099 --> 00:14:39,479
read all the files and process all the

406
00:14:39,479 --> 00:14:41,129
files it's not just randomly pecking

407
00:14:41,129 --> 00:14:42,869
them so it'll be the same result every

408
00:14:42,869 --> 00:14:46,470
time we're just quite nice so the first

409
00:14:46,470 --> 00:14:47,819
approach and I'm not really going to

410
00:14:47,819 --> 00:14:48,839
talk about this in too much detail

411
00:14:48,839 --> 00:14:50,699
because there's two separate papers on

412
00:14:50,699 --> 00:14:54,659
just a slide the PNG stuff if you read a

413
00:14:54,659 --> 00:14:56,519
bit one percent of the file just using

414
00:14:56,519 --> 00:14:59,339
some header things and obtaining a nice

415
00:14:59,339 --> 00:15:01,739
leather of the actual image data you can

416
00:15:01,739 --> 00:15:03,899
actually do quite well you can build a

417
00:15:03,899 --> 00:15:05,609
signature which is pretty much negative

418
00:15:05,609 --> 00:15:08,359
9.8 percent unique for some some scale

419
00:15:08,359 --> 00:15:11,279
and JPEGs if you read about one to three

420
00:15:11,279 --> 00:15:13,319
percent of the file depending on the

421
00:15:13,319 --> 00:15:16,259
size of the file using the optimized

422
00:15:16,259 --> 00:15:17,549
Huffman tables you can actually generate

423
00:15:17,549 --> 00:15:19,289
pretty unique signatures again and

424
00:15:19,289 --> 00:15:21,479
they're quite useful so on the diagram

425
00:15:21,479 --> 00:15:23,459
the right-hand side here we've got a

426
00:15:23,459 --> 00:15:24,240
bunch of header day

427
00:15:24,240 --> 00:15:26,220
so that's like your XF your compression

428
00:15:26,220 --> 00:15:27,869
tables and then the rest of the day I

429
00:15:27,869 --> 00:15:30,029
don't hear so traditional hash would say

430
00:15:30,029 --> 00:15:31,679
get me all the data put it through some

431
00:15:31,679 --> 00:15:33,749
function all I was really caring about

432
00:15:33,749 --> 00:15:35,790
here was the start some and not even all

433
00:15:35,790 --> 00:15:37,230
of it some of this stuff in the start

434
00:15:37,230 --> 00:15:38,699
and saying get me that or process that

435
00:15:38,699 --> 00:15:42,119
somehow I've got a new signature the

436
00:15:42,119 --> 00:15:43,559
generic approach is pretty much to say

437
00:15:43,559 --> 00:15:45,749
well I don't care what failed taper is I

438
00:15:45,749 --> 00:15:47,759
can either look at the start of the file

439
00:15:47,759 --> 00:15:49,079
at the end of the file and just grab a

440
00:15:49,079 --> 00:15:51,749
better fit and hash that and it turns

441
00:15:51,749 --> 00:15:53,069
out the start isn't very good because

442
00:15:53,069 --> 00:15:54,720
you've got things like Hoffman tables

443
00:15:54,720 --> 00:15:56,490
and quantization tables that are the

444
00:15:56,490 --> 00:15:58,619
same for every every camera well not

445
00:15:58,619 --> 00:16:01,009
every camera but that model of camera

446
00:16:01,009 --> 00:16:03,569
every for every picture I take with my

447
00:16:03,569 --> 00:16:05,149
phone is gone at the same tables and

448
00:16:05,149 --> 00:16:07,559
color profiles and stuff are be used so

449
00:16:07,559 --> 00:16:08,490
the start isn't very good

450
00:16:08,490 --> 00:16:10,350
but if you take it from the end you're

451
00:16:10,350 --> 00:16:11,999
pretty much landing in the end of the

452
00:16:11,999 --> 00:16:14,069
compressed data stream so that's just

453
00:16:14,069 --> 00:16:15,899
raw entropy and if you take enough of it

454
00:16:15,899 --> 00:16:18,029
you get a unique signature unless the

455
00:16:18,029 --> 00:16:19,769
images are basically the same in which

456
00:16:19,769 --> 00:16:21,179
case you want the signatures to match

457
00:16:21,179 --> 00:16:26,309
anyway so how unique as you can see on

458
00:16:26,309 --> 00:16:28,110
the left-hand side of this reading from

459
00:16:28,110 --> 00:16:30,119
the start a file doesn't quite get to

460
00:16:30,119 --> 00:16:32,699
unique so the Flickr one-million dataset

461
00:16:32,699 --> 00:16:34,139
is aptly named because it's about

462
00:16:34,139 --> 00:16:36,480
million images the Guf Docs

463
00:16:36,480 --> 00:16:38,249
PNG stuff is a hundred and eight

464
00:16:38,249 --> 00:16:40,619
thousand or so didn't quite get unique

465
00:16:40,619 --> 00:16:43,049
there but if you read the last four kb

466
00:16:43,049 --> 00:16:44,790
from the end of the file you can

467
00:16:44,790 --> 00:16:46,829
actually get you an extender for 1.1

468
00:16:46,829 --> 00:16:48,480
million images so we don't really need

469
00:16:48,480 --> 00:16:50,100
it to be any better than that that'll do

470
00:16:50,100 --> 00:16:53,009
for most use cases and I'll just ignore

471
00:16:53,009 --> 00:16:54,389
the but at the bottom for now for the

472
00:16:54,389 --> 00:16:56,939
sake of time right so how did this

473
00:16:56,939 --> 00:16:59,579
perform so we know based on what I've

474
00:16:59,579 --> 00:17:00,689
said then you'll have to take my word

475
00:17:00,689 --> 00:17:01,589
for it unless you want to read the

476
00:17:01,589 --> 00:17:04,349
papers that reading the end of the file

477
00:17:04,349 --> 00:17:06,709
unique or unique enough for the sake of

478
00:17:06,709 --> 00:17:09,270
looking at single disk if you talk about

479
00:17:09,270 --> 00:17:10,679
billions of images then we may have a

480
00:17:10,679 --> 00:17:12,059
different conversation but you don't

481
00:17:12,059 --> 00:17:12,750
tend to find

482
00:17:12,750 --> 00:17:15,419
billions of images on a disk although if

483
00:17:15,419 --> 00:17:17,069
there's 100 terabytes then you might you

484
00:17:17,069 --> 00:17:20,130
may manage it so the performance is

485
00:17:20,130 --> 00:17:21,990
similar for the JPEG and PNG stuff but

486
00:17:21,990 --> 00:17:23,549
I'll just talk about the generic block

487
00:17:23,549 --> 00:17:25,740
based stuff for the sake of getting

488
00:17:25,740 --> 00:17:28,409
through this so before I actually give

489
00:17:28,409 --> 00:17:30,539
you some numbers I'll talk about some of

490
00:17:30,539 --> 00:17:32,159
the impacts or some of the things that

491
00:17:32,159 --> 00:17:34,710
impact performance so the main thing

492
00:17:34,710 --> 00:17:36,330
really is the type of drive

493
00:17:36,330 --> 00:17:38,040
so if

494
00:17:38,040 --> 00:17:39,540
think about how these drives perform

495
00:17:39,540 --> 00:17:42,420
you'll know that hard drives just like

496
00:17:42,420 --> 00:17:44,280
to read things sequentially they don't

497
00:17:44,280 --> 00:17:45,450
like moving about it because you

498
00:17:45,450 --> 00:17:46,860
physically have to spend a big platter

499
00:17:46,860 --> 00:17:49,500
physically move ahead to focusing about

500
00:17:49,500 --> 00:17:51,650
on it this doesn't work very well

501
00:17:51,650 --> 00:17:54,150
SSDs don't care so much they've you know

502
00:17:54,150 --> 00:17:55,140
they do things in parallel

503
00:17:55,140 --> 00:17:56,700
it's all flash based looking pretty much

504
00:17:56,700 --> 00:17:58,800
to see get me that block of data to get

505
00:17:58,800 --> 00:18:00,930
me that block of data so they're random

506
00:18:00,930 --> 00:18:03,510
4k small block small chunk of data

507
00:18:03,510 --> 00:18:05,850
performance is actually pretty decent so

508
00:18:05,850 --> 00:18:08,160
if you compare the two you can get up to

509
00:18:08,160 --> 00:18:10,470
about two megabytes seconds randomly

510
00:18:10,470 --> 00:18:12,810
bouncing about hard disk but for an SSD

511
00:18:12,810 --> 00:18:15,090
you can get a couple hundred megabytes

512
00:18:15,090 --> 00:18:17,010
so as much it's gonna work much better

513
00:18:17,010 --> 00:18:20,400
for reading those teeny chunks the other

514
00:18:20,400 --> 00:18:21,780
thing to bear in mind is the file size

515
00:18:21,780 --> 00:18:24,060
so obviously if I'm only reading a fixed

516
00:18:24,060 --> 00:18:25,080
size from the disk

517
00:18:25,080 --> 00:18:27,150
the bigger the file the smaller a

518
00:18:27,150 --> 00:18:30,290
proportion of the file that is so 4k is

519
00:18:30,290 --> 00:18:33,660
like half of an 8k file but it's

520
00:18:33,660 --> 00:18:34,530
bugger-all

521
00:18:34,530 --> 00:18:36,870
of a 10 megabyte file right so so get

522
00:18:36,870 --> 00:18:38,070
the ratio of these things and

523
00:18:38,070 --> 00:18:39,840
essentially if you're reading the entire

524
00:18:39,840 --> 00:18:41,120
file

525
00:18:41,120 --> 00:18:43,320
the bigger the file is the longer that

526
00:18:43,320 --> 00:18:44,940
takes right it just takes more time

527
00:18:44,940 --> 00:18:47,550
whereas reading a tiny block of it is

528
00:18:47,550 --> 00:18:48,900
always going to take the same amount of

529
00:18:48,900 --> 00:18:52,380
thing and essentially that comes down to

530
00:18:52,380 --> 00:18:54,030
bigger the file the longer it takes to

531
00:18:54,030 --> 00:18:56,940
fill hash but sub file stuff doesn't

532
00:18:56,940 --> 00:18:58,680
actually care it's going to be the same

533
00:18:58,680 --> 00:19:01,050
but the bigger the file is the bigger

534
00:19:01,050 --> 00:19:02,820
black gap is so the files are really

535
00:19:02,820 --> 00:19:04,950
small either about the same performance

536
00:19:04,950 --> 00:19:07,320
wise but the file is really big then you

537
00:19:07,320 --> 00:19:09,270
get this massive gulf which is really

538
00:19:09,270 --> 00:19:12,560
where I'm trying to cash in a little bit

539
00:19:12,560 --> 00:19:14,490
another thing that bear main is the file

540
00:19:14,490 --> 00:19:16,860
system may have some overheads so

541
00:19:16,860 --> 00:19:18,510
basically you've got this kind of tree

542
00:19:18,510 --> 00:19:20,010
structure and you want to get to this

543
00:19:20,010 --> 00:19:21,510
but you have to bounce through the sub

544
00:19:21,510 --> 00:19:23,040
directories and the folders and get the

545
00:19:23,040 --> 00:19:25,380
path and with the file systems metadata

546
00:19:25,380 --> 00:19:27,690
and that takes a bit of time it's not

547
00:19:27,690 --> 00:19:29,460
free especially be doing it like a

548
00:19:29,460 --> 00:19:30,800
million times

549
00:19:30,800 --> 00:19:33,330
well it turns out in experiments unless

550
00:19:33,330 --> 00:19:36,000
you're using the ntfs driver on Linux

551
00:19:36,000 --> 00:19:40,380
which is a bit garbage NTFS and ext4 so

552
00:19:40,380 --> 00:19:42,000
the windows file system the Linux file

553
00:19:42,000 --> 00:19:43,710
system are basically about the same

554
00:19:43,710 --> 00:19:45,750
performance wise well if you're using

555
00:19:45,750 --> 00:19:48,360
the stuff of our network then NFS is

556
00:19:48,360 --> 00:19:49,860
actually much better if he's kind of

557
00:19:49,860 --> 00:19:51,450
small accesses than samba

558
00:19:51,450 --> 00:19:53,610
and you can do some sort of magic with

559
00:19:53,610 --> 00:19:56,250
logical block addresses we pre process

560
00:19:56,250 --> 00:19:58,890
the entire file system essentially and

561
00:19:58,890 --> 00:20:00,270
you get all the blocks and you see an

562
00:20:00,270 --> 00:20:01,860
essence of ever gonna read and then you

563
00:20:01,860 --> 00:20:03,630
can optimize it so that this is less of

564
00:20:03,630 --> 00:20:06,840
an issue another thing to bear in mind

565
00:20:06,840 --> 00:20:08,730
as well is the number of threads so you

566
00:20:08,730 --> 00:20:11,310
can do many simultaneous reads on an SSD

567
00:20:11,310 --> 00:20:13,740
but it's gonna negatively affect

568
00:20:13,740 --> 00:20:15,120
performance on the hard drive because

569
00:20:15,120 --> 00:20:16,110
the hard drive just wants to spend

570
00:20:16,110 --> 00:20:18,510
through everything in one pass an SSD

571
00:20:18,510 --> 00:20:20,220
conductor rounds and do things in

572
00:20:20,220 --> 00:20:22,830
parallel sorry I'm gonna bet fast

573
00:20:22,830 --> 00:20:24,320
because I spent too much time at start

574
00:20:24,320 --> 00:20:27,720
right so actual performance II numbers

575
00:20:27,720 --> 00:20:30,090
the main thing to focus on here is that

576
00:20:30,090 --> 00:20:31,890
we're comparing it to the baseline the

577
00:20:31,890 --> 00:20:33,840
baseline being read the whole file in

578
00:20:33,840 --> 00:20:36,150
hash it so if it's the same as the

579
00:20:36,150 --> 00:20:38,070
baseline is 1x it takes the same time as

580
00:20:38,070 --> 00:20:40,560
Phillie hashing the file it is 10x it

581
00:20:40,560 --> 00:20:42,840
means is 10 times faster than up or in

582
00:20:42,840 --> 00:20:44,820
this nice diagram it's like 10 drives

583
00:20:44,820 --> 00:20:48,990
rather than one really the stuff on the

584
00:20:48,990 --> 00:20:50,700
Left we start on Linux which is why I've

585
00:20:50,700 --> 00:20:52,860
swapped the NTFS and ext4 back even

586
00:20:52,860 --> 00:20:54,000
though I said they're fundamentally the

587
00:20:54,000 --> 00:20:56,730
same because the NTFS driver on Linux is

588
00:20:56,730 --> 00:20:58,950
not great and the stuff on the right is

589
00:20:58,950 --> 00:21:00,300
just to say that if you're doing it over

590
00:21:00,300 --> 00:21:01,950
the Internet it's about the same as I

591
00:21:01,950 --> 00:21:04,560
get back land connection but essentially

592
00:21:04,560 --> 00:21:06,480
doing on hard disks you can get about

593
00:21:06,480 --> 00:21:08,940
three things the performance of reading

594
00:21:08,940 --> 00:21:10,890
the whole file which is pretty decent

595
00:21:10,890 --> 00:21:12,600
even though I've just said it's not

596
00:21:12,600 --> 00:21:14,840
optimized for this kind of access and

597
00:21:14,840 --> 00:21:16,920
obviously the bigger the file the bigger

598
00:21:16,920 --> 00:21:20,850
that number will be on an SSD you can

599
00:21:20,850 --> 00:21:22,440
get well depending on whether or not

600
00:21:22,440 --> 00:21:23,940
you're on Linux and depending on the

601
00:21:23,940 --> 00:21:24,480
file system

602
00:21:24,480 --> 00:21:26,970
you get anywhere between like 20 and 70

603
00:21:26,970 --> 00:21:29,970
things performance increase so I can do

604
00:21:29,970 --> 00:21:32,100
70 times as many lookups in the same

605
00:21:32,100 --> 00:21:37,050
amount of time on an SSD effectively so

606
00:21:37,050 --> 00:21:38,460
if you're talking about all that would

607
00:21:38,460 --> 00:21:40,590
take a day well this would take what I

608
00:21:40,590 --> 00:21:42,840
know I never lasts even with some

609
00:21:42,840 --> 00:21:45,210
overheads and I actually works really

610
00:21:45,210 --> 00:21:46,950
well across the network as well because

611
00:21:46,950 --> 00:21:48,300
the less stuff you have to point across

612
00:21:48,300 --> 00:21:50,100
the network the less stuff you actually

613
00:21:50,100 --> 00:21:52,440
have to read you can get rid of some of

614
00:21:52,440 --> 00:21:56,250
the bandwidth constraints so on samba it

615
00:21:56,250 --> 00:21:58,650
was about 10 times faster on NFS it was

616
00:21:58,650 --> 00:22:00,990
fair but better than that about 26 times

617
00:22:00,990 --> 00:22:03,630
faster but really the winner here is

618
00:22:03,630 --> 00:22:05,440
just doing some

619
00:22:05,440 --> 00:22:08,620
file hashes on SSDs because it just

620
00:22:08,620 --> 00:22:12,370
works really well and anything else to

621
00:22:12,370 --> 00:22:14,159
say

622
00:22:14,159 --> 00:22:18,070
great yeah so it still works on hard

623
00:22:18,070 --> 00:22:19,210
drives the back of the the back of the

624
00:22:19,210 --> 00:22:20,980
file the back of the difference is gonna

625
00:22:20,980 --> 00:22:23,679
be but these numbers are giving you or

626
00:22:23,679 --> 00:22:26,230
for actually reasonably small files so

627
00:22:26,230 --> 00:22:27,700
we go back to this graph I had up

628
00:22:27,700 --> 00:22:31,480
earlier the data sets are actually at

629
00:22:31,480 --> 00:22:32,710
least the median and the mean values

630
00:22:32,710 --> 00:22:34,870
they were focused around here so a

631
00:22:34,870 --> 00:22:37,539
couple hundred KB for each file which

632
00:22:37,539 --> 00:22:40,090
isn't really that big if I take well I

633
00:22:40,090 --> 00:22:41,799
don't know how big is my new phone but I

634
00:22:41,799 --> 00:22:43,750
had an S sex before and the average

635
00:22:43,750 --> 00:22:45,509
image size was about five megabytes

636
00:22:45,509 --> 00:22:48,639
which would place you off the end of the

637
00:22:48,639 --> 00:22:50,889
thing somewhere so yeah it would be back

638
00:22:50,889 --> 00:22:53,559
here which is a massive difference so I

639
00:22:53,559 --> 00:22:55,960
was being quite generous to the full

640
00:22:55,960 --> 00:22:57,309
hashing approach when I was putting

641
00:22:57,309 --> 00:22:58,929
these numbers together I was taking

642
00:22:58,929 --> 00:23:00,669
phases there are maybe a bit smaller

643
00:23:00,669 --> 00:23:03,070
than I'd actually hoped to see so that

644
00:23:03,070 --> 00:23:04,269
basically means these numbers get

645
00:23:04,269 --> 00:23:07,740
inflated massively in fact if you

646
00:23:07,740 --> 00:23:10,659
project this Lane forward and use a bit

647
00:23:10,659 --> 00:23:14,080
of machine learning sort of linear

648
00:23:14,080 --> 00:23:15,580
regression it pretty much just draw a

649
00:23:15,580 --> 00:23:17,200
line through that and project it

650
00:23:17,200 --> 00:23:22,269
forwards at 800 KB it's about 30 X so 30

651
00:23:22,269 --> 00:23:23,590
times faster than filling reading the

652
00:23:23,590 --> 00:23:26,559
file in hashing we start an SSD but if

653
00:23:26,559 --> 00:23:29,409
you got to ten megabytes then it's

654
00:23:29,409 --> 00:23:31,269
actually more like 300 things faster or

655
00:23:31,269 --> 00:23:34,659
more so dial that back about 10 mega

656
00:23:34,659 --> 00:23:36,730
bases maybe a bit too fast sorry a bit

657
00:23:36,730 --> 00:23:40,059
too much for for a picture well you know

658
00:23:40,059 --> 00:23:42,100
if you define megabyte image the gap is

659
00:23:42,100 --> 00:23:44,440
going to be huge so that's kind of the

660
00:23:44,440 --> 00:23:46,330
whole crux of my PhD is saying hey look

661
00:23:46,330 --> 00:23:47,590
these are completely different things

662
00:23:47,590 --> 00:23:51,309
and I'm awesome or something yeah it's

663
00:23:51,309 --> 00:23:52,690
worked so far let's see how the Fiber

664
00:23:52,690 --> 00:23:57,220
goes so yeah I may be accelerating

665
00:23:57,220 --> 00:23:58,600
slightly too fast but hopefully people

666
00:23:58,600 --> 00:24:01,120
got that so the basic takeaway is that

667
00:24:01,120 --> 00:24:02,860
you don't have to read the entire file

668
00:24:02,860 --> 00:24:04,990
to generate a signature that you can use

669
00:24:04,990 --> 00:24:07,509
on a database so I don't need that for

670
00:24:07,509 --> 00:24:09,100
five megabytes of the file to generate

671
00:24:09,100 --> 00:24:10,179
something that's unique to that image

672
00:24:10,179 --> 00:24:12,250
actually I can just look at the last

673
00:24:12,250 --> 00:24:16,059
four K this kind of thing is really good

674
00:24:16,059 --> 00:24:18,429
on SSDs not so good on hard disks but if

675
00:24:18,429 --> 00:24:19,000
you're

676
00:24:19,000 --> 00:24:20,890
dataset is really high-resolution then

677
00:24:20,890 --> 00:24:23,860
actually it's still good enough and you

678
00:24:23,860 --> 00:24:26,440
have to be remain things like what does

679
00:24:26,440 --> 00:24:28,330
the Tor transaction costs so how

680
00:24:28,330 --> 00:24:30,790
expensive it is it performer lookup in

681
00:24:30,790 --> 00:24:32,920
the file system how long does it take to

682
00:24:32,920 --> 00:24:35,320
seek on a hard disk to that thing what

683
00:24:35,320 --> 00:24:37,360
does the ratio of that cost to the size

684
00:24:37,360 --> 00:24:39,130
of the fail if I'm doing that across the

685
00:24:39,130 --> 00:24:40,540
network how much bandwidth to behalf

686
00:24:40,540 --> 00:24:42,670
what's the latency so there's actually

687
00:24:42,670 --> 00:24:44,110
loads of different questions you can ask

688
00:24:44,110 --> 00:24:46,830
but fundamentally it works awesome and

689
00:24:46,830 --> 00:24:48,970
the really neat thing about this as well

690
00:24:48,970 --> 00:24:51,180
is just the spot point here is that

691
00:24:51,180 --> 00:24:53,950
there was some stuff on sub file

692
00:24:53,950 --> 00:24:56,260
forensics but it was mostly breaking up

693
00:24:56,260 --> 00:24:58,120
the whole image and hashing all the

694
00:24:58,120 --> 00:25:00,490
blocks so I'm basically saying you don't

695
00:25:00,490 --> 00:25:02,800
need most of those blocks you can just

696
00:25:02,800 --> 00:25:05,190
use some of them to find the stuff and

697
00:25:05,190 --> 00:25:07,680
there's not been a lot of work on

698
00:25:07,680 --> 00:25:10,210
basically exploiting the behavior or the

699
00:25:10,210 --> 00:25:12,490
performance characteristics of SSDs to

700
00:25:12,490 --> 00:25:14,560
speed up the forensics process because

701
00:25:14,560 --> 00:25:15,520
most of the things we're assuming

702
00:25:15,520 --> 00:25:18,340
there's a hard disk but as you'll find

703
00:25:18,340 --> 00:25:20,470
with every mobile device that's been

704
00:25:20,470 --> 00:25:23,140
produced in lasts what 10 years it's all

705
00:25:23,140 --> 00:25:26,140
flash based all your laptops will

706
00:25:26,140 --> 00:25:27,490
probably have an SSD you're buying

707
00:25:27,490 --> 00:25:29,500
newish ones this hard that sort of kind

708
00:25:29,500 --> 00:25:32,280
of gonna fashion unless you're Seagate

709
00:25:32,280 --> 00:25:35,200
so hopefully that kind of made sense I'm

710
00:25:35,200 --> 00:25:36,850
happy to take questions and if you're

711
00:25:36,850 --> 00:25:39,310
super duper interested that's the list

712
00:25:39,310 --> 00:25:40,840
of publications where all the materials

713
00:25:40,840 --> 00:25:43,030
come from and hopefully this latter one

714
00:25:43,030 --> 00:25:44,560
will be published in the near future on

715
00:25:44,560 --> 00:25:46,930
the thumbnails awesome sorry did you

716
00:25:46,930 --> 00:25:58,420
have a question yeah okay yeah yeah yes

717
00:25:58,420 --> 00:26:00,070
because the encoding will be different

718
00:26:00,070 --> 00:26:02,440
the frackers you would basically need to

719
00:26:02,440 --> 00:26:04,750
reproduce the exact same encoding

720
00:26:04,750 --> 00:26:06,820
procedure so if you had the same encoder

721
00:26:06,820 --> 00:26:08,770
and you knew everything about how it is

722
00:26:08,770 --> 00:26:10,270
compressed and stuff you can probably

723
00:26:10,270 --> 00:26:16,750
generate this yeah or just save it in

724
00:26:16,750 --> 00:26:18,430
like a weird format or do literally

725
00:26:18,430 --> 00:26:20,050
anything to change it in any way and the

726
00:26:20,050 --> 00:26:22,300
hashes won't work but don't do that

727
00:26:22,300 --> 00:26:24,810
anyway

728
00:26:25,400 --> 00:26:27,200
the fact is super illegal there's also

729
00:26:27,200 --> 00:26:29,300
this technology called forth of DNA

730
00:26:29,300 --> 00:26:31,040
that's used a lot of credit providers

731
00:26:31,040 --> 00:26:32,600
and they're not looking at the binary

732
00:26:32,600 --> 00:26:35,570
hash they're looking at pixel stuff so

733
00:26:35,570 --> 00:26:37,520
basically it would generate hash from

734
00:26:37,520 --> 00:26:41,180
the pixel data which will then I know

735
00:26:41,180 --> 00:26:42,740
I'm still looking at binary stuff

736
00:26:42,740 --> 00:26:44,750
although the thumbnail paper that I

737
00:26:44,750 --> 00:26:45,920
haven't published is looking at

738
00:26:45,920 --> 00:26:48,320
perceptual hashing which is I didn't

739
00:26:48,320 --> 00:26:49,820
mention it during that I probably should

740
00:26:49,820 --> 00:26:50,180
huh

741
00:26:50,180 --> 00:26:53,660
sorry cheaper question I think sort of

742
00:26:53,660 --> 00:26:56,150
quietly out there because this doesn't

743
00:26:56,150 --> 00:26:57,710
even stand up and like a nod to say it

744
00:26:57,710 --> 00:26:59,660
was pretty situation if I if I just

745
00:26:59,660 --> 00:27:03,980
alter the image and well this should

746
00:27:03,980 --> 00:27:06,559
stay the same yeah well the as long as

747
00:27:06,559 --> 00:27:07,670
you don't change the last four okay

748
00:27:07,670 --> 00:27:09,890
actually for this is fine and the

749
00:27:09,890 --> 00:27:11,330
regulars to help with your hashing the

750
00:27:11,330 --> 00:27:13,490
whole file any bet James with Mac Europe

751
00:27:13,490 --> 00:27:15,559
so that's always a problem so of

752
00:27:15,559 --> 00:27:17,150
anything this is better off than that

753
00:27:17,150 --> 00:27:18,950
and but still susceptible to the same

754
00:27:18,950 --> 00:27:21,140
kind of thing is this faster than like

755
00:27:21,140 --> 00:27:24,080
fuzzy how fuzzy hashing is way slower

756
00:27:24,080 --> 00:27:26,270
and any of the bait wise stuff for the

757
00:27:26,270 --> 00:27:28,940
perceptual stuff because hostage-taking

758
00:27:28,940 --> 00:27:31,190
the kind of similarity rather than just

759
00:27:31,190 --> 00:27:34,850
identity is as much especially the pixel

760
00:27:34,850 --> 00:27:36,350
level stuff so this is just regular

761
00:27:36,350 --> 00:27:38,030
capital hashing which makes it really

762
00:27:38,030 --> 00:27:48,530
fast you can do both so you could do

763
00:27:48,530 --> 00:27:50,690
clever triage if you can pain this

764
00:27:50,690 --> 00:27:52,340
subset selection of stuff that I talked

765
00:27:52,340 --> 00:27:54,620
about the start so parse the file system

766
00:27:54,620 --> 00:27:55,820
look at some directories of interest

767
00:27:55,820 --> 00:27:58,100
then do that your convenience - well

768
00:27:58,100 --> 00:27:59,720
really what I was looking at was making

769
00:27:59,720 --> 00:28:01,760
it faster to process the entire drive

770
00:28:01,760 --> 00:28:06,500
and get it all the way so that yeah

771
00:28:06,500 --> 00:28:07,640
you're not having to read the entire

772
00:28:07,640 --> 00:28:09,470
terabyte or the higher entire hundred

773
00:28:09,470 --> 00:28:11,450
terabytes ever does that would take that

774
00:28:11,450 --> 00:28:13,470
would take a long long time

775
00:28:13,470 --> 00:28:15,840
all right that's a good time for one

776
00:28:15,840 --> 00:28:18,240
morning okay yes right

777
00:28:18,240 --> 00:28:28,919
oh you go I think yeah exhale you'd have

778
00:28:28,919 --> 00:28:30,870
to go back in process and because I'm

779
00:28:30,870 --> 00:28:57,419
actually doing a logical level yeah so

780
00:28:57,419 --> 00:29:00,000
actually because I thought you're

781
00:29:00,000 --> 00:29:09,779
talking about that no right you need to

782
00:29:09,779 --> 00:29:12,450
unhide it fortunately yeah right click

783
00:29:12,450 --> 00:29:16,320
under one I didn't say I was hoping like

784
00:29:16,320 --> 00:29:18,179
it just maximize your vessel night so it

785
00:29:18,179 --> 00:29:25,409
makes it tough to be a chef that fight

786
00:29:25,409 --> 00:29:30,600
to get the current slide yeah great you

787
00:29:30,600 --> 00:29:37,679
can see it essentially it's not

788
00:29:37,679 --> 00:29:39,179
including slack space it's not putting

789
00:29:39,179 --> 00:29:41,730
the the boundaries especially just

790
00:29:41,730 --> 00:29:43,710
saying from the logical end of the fail

791
00:29:43,710 --> 00:29:45,750
feedback or okay so technically you

792
00:29:45,750 --> 00:29:47,340
could actually be struggling across to

793
00:29:47,340 --> 00:29:49,409
just to sector boundaries sorry one

794
00:29:49,409 --> 00:29:51,539
sector behind you for two sectors but

795
00:29:51,539 --> 00:29:52,440
that actually prevents it about

796
00:29:52,440 --> 00:29:53,490
robustness because it means if you

797
00:29:53,490 --> 00:29:55,080
append some random garbage at the start

798
00:29:55,080 --> 00:29:57,120
you're not worried about her lanes later

799
00:29:57,120 --> 00:29:59,850
on so you're only looking at the actual

800
00:29:59,850 --> 00:30:01,409
content of the file and the axes and the

801
00:30:01,409 --> 00:30:07,549
poet Elaine's so I think we're good

