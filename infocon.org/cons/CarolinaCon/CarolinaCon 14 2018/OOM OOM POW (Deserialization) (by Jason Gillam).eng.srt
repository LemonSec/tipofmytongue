1
00:00:00,000 --> 00:00:09,300
<font color="#E5E5E5">all right okay so this talk</font>

2
00:00:05,400 --> 00:00:14,280
boom boom pow<font color="#CCCCCC"> I I was</font><font color="#E5E5E5"> messing around on</font>

3
00:00:09,300 --> 00:00:17,460
a pen test<font color="#E5E5E5"> last year and ran across a</font>

4
00:00:14,280 --> 00:00:20,460
situation<font color="#E5E5E5"> where a PHP application had</font>

5
00:00:17,460 --> 00:00:22,140
some weird stuff showing<font color="#E5E5E5"> up in headers</font>

6
00:00:20,460 --> 00:00:28,260
<font color="#E5E5E5">I'm an upset guy in case anybody doesn't</font>

7
00:00:22,140 --> 00:00:30,810
know<font color="#E5E5E5"> that yet</font><font color="#CCCCCC"> and and I noticed hey look</font>

8
00:00:28,260 --> 00:00:32,219
at this it's like serialized PHP objects

9
00:00:30,810 --> 00:00:33,719
and<font color="#E5E5E5"> that made me go okay well this is</font>

10
00:00:32,219 --> 00:00:35,700
kind<font color="#CCCCCC"> of interesting because up until</font>

11
00:00:33,719 --> 00:00:38,309
that<font color="#CCCCCC"> point</font><font color="#E5E5E5"> most of the serialization</font>

12
00:00:35,700 --> 00:00:40,110
<font color="#E5E5E5">that we'd run across had been just in</font>

13
00:00:38,309 --> 00:00:43,468
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> we heard about</font><font color="#E5E5E5"> Java serialization</font>

14
00:00:40,110 --> 00:00:46,350
flaws all the time<font color="#CCCCCC"> but</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first</font>

15
00:00:43,469 --> 00:00:49,039
<font color="#E5E5E5">time I started realizing that it's</font>

16
00:00:46,350 --> 00:00:55,050
actually across multiple different types

17
00:00:49,039 --> 00:00:56,579
<font color="#CCCCCC">of languages so this is me this is me</font>

18
00:00:55,050 --> 00:00:57,599
actually<font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> about this talk I took</font>

19
00:00:56,579 --> 00:01:00,180
this<font color="#CCCCCC"> picture while I was</font><font color="#E5E5E5"> thinking about</font>

20
00:00:57,600 --> 00:01:00,660
the talk contemplating how am I<font color="#CCCCCC"> going to</font>

21
00:01:00,180 --> 00:01:03,210
do<font color="#E5E5E5"> this</font>

22
00:01:00,660 --> 00:01:04,798
<font color="#E5E5E5">because what I wanted to do is</font><font color="#CCCCCC"> is I'm</font>

23
00:01:03,210 --> 00:01:07,920
sure some of<font color="#CCCCCC"> the people in this room</font>

24
00:01:04,799 --> 00:01:10,560
probably played around with<font color="#CCCCCC"> Wiseau</font>

25
00:01:07,920 --> 00:01:11,970
cereal before<font color="#CCCCCC"> that's not what I'm gonna</font>

26
00:01:10,560 --> 00:01:14,880
be doing<font color="#CCCCCC"> here</font>

27
00:01:11,970 --> 00:01:17,729
but the point is when I looked<font color="#E5E5E5"> at that</font>

28
00:01:14,880 --> 00:01:20,490
stuff<font color="#CCCCCC"> I found that it was pretty</font>

29
00:01:17,729 --> 00:01:23,189
<font color="#CCCCCC">complicated right</font><font color="#E5E5E5"> it was a little</font>

30
00:01:20,490 --> 00:01:26,399
<font color="#E5E5E5">overwhelming and I've been I've</font><font color="#CCCCCC"> been a</font>

31
00:01:23,189 --> 00:01:28,350
<font color="#E5E5E5">developer doing java stuffs in pretty</font>

32
00:01:26,400 --> 00:01:30,329
much<font color="#E5E5E5"> since Java came out and if it was</font>

33
00:01:28,350 --> 00:01:31,770
<font color="#E5E5E5">complicated to me imagine is probably</font>

34
00:01:30,329 --> 00:01:33,539
complicated a lot<font color="#E5E5E5"> of other people too</font>

35
00:01:31,770 --> 00:01:35,210
especially<font color="#E5E5E5"> anybody was mostly</font><font color="#CCCCCC"> networked</font>

36
00:01:33,540 --> 00:01:37,619
background hasn't done a<font color="#CCCCCC"> whole lot of</font>

37
00:01:35,210 --> 00:01:40,048
programming<font color="#E5E5E5"> so what I wanted to do was</font>

38
00:01:37,619 --> 00:01:42,540
was put together<font color="#E5E5E5"> a talk</font><font color="#CCCCCC"> that could</font><font color="#E5E5E5"> kind</font>

39
00:01:40,049 --> 00:01:44,509
<font color="#E5E5E5">of relay bring everybody up to</font><font color="#CCCCCC"> the same</font>

40
00:01:42,540 --> 00:01:47,820
<font color="#CCCCCC">level so we all understand</font>

41
00:01:44,509 --> 00:01:49,890
<font color="#E5E5E5">object-oriented design and how that</font>

42
00:01:47,820 --> 00:01:53,669
<font color="#CCCCCC">contributes to</font><font color="#E5E5E5"> these D serialization</font>

43
00:01:49,890 --> 00:01:56,430
<font color="#E5E5E5">flaws</font><font color="#CCCCCC"> so I put together a couple demos</font>

44
00:01:53,670 --> 00:01:58,110
I'll show those<font color="#E5E5E5"> later so other things</font>

45
00:01:56,430 --> 00:02:00,180
<font color="#E5E5E5">about me</font><font color="#CCCCCC"> that are relevant to</font><font color="#E5E5E5"> this talk</font>

46
00:01:58,110 --> 00:02:02,850
I am a<font color="#E5E5E5"> consultant with secure ideas as</font>

47
00:02:00,180 --> 00:02:05,270
<font color="#CCCCCC">was mentioned earlier I do a lot of pen</font>

48
00:02:02,850 --> 00:02:09,568
testing mostly<font color="#E5E5E5"> application security and</font>

49
00:02:05,270 --> 00:02:11,810
I'm a home brewer<font color="#E5E5E5"> so that's that's the</font>

50
00:02:09,568 --> 00:02:13,030
most important part<font color="#E5E5E5"> I love home brewing</font>

51
00:02:11,810 --> 00:02:15,400
so

52
00:02:13,030 --> 00:02:17,880
<font color="#CCCCCC">I mentioned why I</font><font color="#E5E5E5"> was going to talk</font>

53
00:02:15,400 --> 00:02:17,880
about<font color="#E5E5E5"> it</font>

54
00:02:18,180 --> 00:02:24,030
<font color="#CCCCCC">Dewar's d serialization flaws are still</font>

55
00:02:20,650 --> 00:02:26,709
<font color="#E5E5E5">very relevant</font><font color="#CCCCCC"> in case anybody missed it</font>

56
00:02:24,030 --> 00:02:29,170
<font color="#CCCCCC">I don't know if you can see this but</font>

57
00:02:26,709 --> 00:02:31,150
<font color="#E5E5E5">this is the cyber-ark</font>

58
00:02:29,170 --> 00:02:33,069
<font color="#E5E5E5">I'll read it hang on the</font><font color="#CCCCCC"> rest API in</font>

59
00:02:31,150 --> 00:02:38,230
cyber-ark password vault web access

60
00:02:33,069 --> 00:02:40,839
before<font color="#E5E5E5"> 995 etc etc allows a remote</font>

61
00:02:38,230 --> 00:02:44,140
attackers to execute arbitrary code via

62
00:02:40,840 --> 00:02:45,820
serialized net object<font color="#E5E5E5"> so they didn't say</font>

63
00:02:44,140 --> 00:02:47,980
deserialize but they mean it's<font color="#E5E5E5"> a</font><font color="#CCCCCC"> D</font>

64
00:02:45,820 --> 00:02:50,320
serialization flaw this this came<font color="#E5E5E5"> out</font>

65
00:02:47,980 --> 00:02:52,510
<font color="#E5E5E5">this</font><font color="#CCCCCC"> week this was announced just this</font>

66
00:02:50,320 --> 00:02:55,870
week so<font color="#E5E5E5"> this is brand</font><font color="#CCCCCC"> new stuff</font><font color="#E5E5E5"> it's</font>

67
00:02:52,510 --> 00:02:57,790
<font color="#E5E5E5">still happening in the past year</font>

68
00:02:55,870 --> 00:03:00,280
<font color="#E5E5E5">probably</font><font color="#CCCCCC"> the biggest breach that every</font>

69
00:02:57,790 --> 00:03:02,620
was on everyone's<font color="#E5E5E5"> mind is Equifax that</font>

70
00:03:00,280 --> 00:03:04,840
was<font color="#E5E5E5"> also due</font><font color="#CCCCCC"> to a CD serialization</font><font color="#E5E5E5"> flaw</font>

71
00:03:02,620 --> 00:03:08,170
that's this<font color="#E5E5E5"> one was Java as part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that</font>

72
00:03:04,840 --> 00:03:12,670
struts<font color="#E5E5E5"> API it one of several issues with</font>

73
00:03:08,170 --> 00:03:14,619
struts<font color="#CCCCCC"> and that was really</font><font color="#E5E5E5"> really bad</font>

74
00:03:12,670 --> 00:03:18,970
right everybody heard<font color="#CCCCCC"> about it everybody</font>

75
00:03:14,620 --> 00:03:23,200
talked<font color="#E5E5E5"> about it and they're</font><font color="#CCCCCC"> not going</font>

76
00:03:18,970 --> 00:03:25,870
<font color="#E5E5E5">away</font><font color="#CCCCCC"> so just out</font><font color="#E5E5E5"> of fun of course to go</font>

77
00:03:23,200 --> 00:03:28,390
over to<font color="#CCCCCC"> CVE details and do a little</font>

78
00:03:25,870 --> 00:03:30,970
search there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i searched on d</font>

79
00:03:28,390 --> 00:03:32,500
serialization<font color="#E5E5E5"> so that's not a very</font>

80
00:03:30,970 --> 00:03:33,940
<font color="#E5E5E5">common term</font><font color="#CCCCCC"> I can only think of one</font>

81
00:03:32,500 --> 00:03:38,260
<font color="#CCCCCC">place where you</font><font color="#E5E5E5"> would use it which would</font>

82
00:03:33,940 --> 00:03:39,390
<font color="#CCCCCC">be</font><font color="#E5E5E5"> a D serialization flaw and I don't</font>

83
00:03:38,260 --> 00:03:42,989
know if everyone<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see that</font>

84
00:03:39,390 --> 00:03:45,309
<font color="#CCCCCC">sixteen hundred</font><font color="#E5E5E5"> and eighty results so</font>

85
00:03:42,989 --> 00:03:47,410
1608 now some of those are<font color="#CCCCCC"> probably just</font>

86
00:03:45,310 --> 00:03:49,269
describing<font color="#E5E5E5"> what</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> D serialization or</font>

87
00:03:47,410 --> 00:03:51,130
something like<font color="#E5E5E5"> what the flaw</font><font color="#CCCCCC"> typo</font><font color="#E5E5E5"> flies</font>

88
00:03:49,269 --> 00:03:53,560
but a lot<font color="#CCCCCC"> of those are going to be</font>

89
00:03:51,130 --> 00:03:54,850
actual<font color="#E5E5E5"> D serialization flaws that were</font>

90
00:03:53,560 --> 00:03:58,420
found inside<font color="#CCCCCC"> of various different</font>

91
00:03:54,850 --> 00:03:59,950
products<font color="#CCCCCC"> its its inherent inside of</font>

92
00:03:58,420 --> 00:04:01,298
frameworks<font color="#E5E5E5"> I mean that's this where</font>

93
00:03:59,950 --> 00:04:02,708
you're gonna run across<font color="#E5E5E5"> it and then</font>

94
00:04:01,299 --> 00:04:05,049
frameworks are used in a<font color="#E5E5E5"> lot of products</font>

95
00:04:02,709 --> 00:04:07,959
<font color="#E5E5E5">so a lot</font><font color="#CCCCCC"> of the same flaws end up in a</font>

96
00:04:05,049 --> 00:04:10,000
<font color="#E5E5E5">lot of places and also if you scroll</font>

97
00:04:07,959 --> 00:04:10,870
down those results you'll see<font color="#E5E5E5"> that many</font>

98
00:04:10,000 --> 00:04:13,780
of<font color="#E5E5E5"> those CVS</font>

99
00:04:10,870 --> 00:04:15,549
are<font color="#CCCCCC"> twenty eighteen CVS or twenty</font>

100
00:04:13,780 --> 00:04:18,880
seventeen like these things<font color="#E5E5E5"> are rampant</font>

101
00:04:15,549 --> 00:04:21,099
<font color="#E5E5E5">so it's not going away anytime</font><font color="#CCCCCC"> soon and</font>

102
00:04:18,880 --> 00:04:23,560
this is this<font color="#E5E5E5"> is the kind</font><font color="#CCCCCC"> of thing that</font>

103
00:04:21,099 --> 00:04:25,260
made me<font color="#CCCCCC"> really think about this</font><font color="#E5E5E5"> what I</font>

104
00:04:23,560 --> 00:04:26,800
wanted<font color="#E5E5E5"> to present here because it's it's</font>

105
00:04:25,260 --> 00:04:28,599
it's<font color="#E5E5E5"> not going</font>

106
00:04:26,800 --> 00:04:30,490
away and why<font color="#E5E5E5"> isn't it going away like</font>

107
00:04:28,599 --> 00:04:34,990
isn't<font color="#E5E5E5"> this it can't we just fix it and</font>

108
00:04:30,490 --> 00:04:37,210
move<font color="#E5E5E5"> on</font><font color="#CCCCCC"> but we can't not</font><font color="#E5E5E5"> really and</font>

109
00:04:34,990 --> 00:04:40,330
<font color="#E5E5E5">that's what I'm</font><font color="#CCCCCC"> going to talk about here</font>

110
00:04:37,210 --> 00:04:42,638
so in<font color="#CCCCCC"> order</font><font color="#E5E5E5"> to understand what is a</font>

111
00:04:40,330 --> 00:04:45,280
<font color="#CCCCCC">deserialization flaw</font><font color="#E5E5E5"> the first thing I</font>

112
00:04:42,639 --> 00:04:47,199
want<font color="#E5E5E5"> to do is kind of get us to what it</font>

113
00:04:45,280 --> 00:04:49,919
<font color="#CCCCCC">really is serialization</font><font color="#E5E5E5"> and why do we</font>

114
00:04:47,199 --> 00:04:51,940
<font color="#E5E5E5">have it what do we mean by</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so</font>

115
00:04:49,919 --> 00:04:54,520
definite the definition dictionary

116
00:04:51,940 --> 00:04:57,370
definition is arranged in something in a

117
00:04:54,520 --> 00:05:03,240
series so why would we need to<font color="#E5E5E5"> do that</font>

118
00:04:57,370 --> 00:05:03,240
when we're programming<font color="#E5E5E5"> stuff nobody</font>

119
00:05:04,289 --> 00:05:08,500
storing stuff that's right<font color="#E5E5E5"> so if we're</font>

120
00:05:07,360 --> 00:05:11,650
gonna store stuff or we're gonna

121
00:05:08,500 --> 00:05:13,599
transmit stuff<font color="#E5E5E5"> right transmitting or</font>

122
00:05:11,650 --> 00:05:15,099
storing we need to serialize<font color="#E5E5E5"> it first</font>

123
00:05:13,599 --> 00:05:17,500
because we want to<font color="#E5E5E5"> put things in a</font>

124
00:05:15,099 --> 00:05:19,750
<font color="#E5E5E5">predictable order so that at the unto</font>

125
00:05:17,500 --> 00:05:23,500
other end of whatever we're<font color="#CCCCCC"> doing either</font>

126
00:05:19,750 --> 00:05:25,289
<font color="#CCCCCC">loading it back from a disk or receiving</font>

127
00:05:23,500 --> 00:05:27,849
<font color="#E5E5E5">it on the other end of a transmission</font>

128
00:05:25,289 --> 00:05:29,800
<font color="#CCCCCC">that we can put it back into the</font><font color="#E5E5E5"> right</font>

129
00:05:27,849 --> 00:05:32,199
<font color="#CCCCCC">order so</font><font color="#E5E5E5"> that's the same data that we</font>

130
00:05:29,800 --> 00:05:36,029
started<font color="#E5E5E5"> with right it's very simple but</font>

131
00:05:32,199 --> 00:05:39,340
that that<font color="#CCCCCC"> is what serialization</font><font color="#E5E5E5"> is about</font>

132
00:05:36,029 --> 00:05:40,900
<font color="#CCCCCC">so where do they come from D</font>

133
00:05:39,340 --> 00:05:45,638
serialization<font color="#E5E5E5"> flaws where do those</font><font color="#CCCCCC"> come</font>

134
00:05:40,900 --> 00:05:48,330
from it comes inherently from one

135
00:05:45,639 --> 00:05:52,180
specific<font color="#CCCCCC"> area of programming which is</font>

136
00:05:48,330 --> 00:05:53,620
<font color="#CCCCCC">object-oriented stuff right</font><font color="#E5E5E5"> that's where</font>

137
00:05:52,180 --> 00:05:57,340
all of<font color="#CCCCCC"> these flaws are coming from is</font>

138
00:05:53,620 --> 00:05:58,900
always<font color="#E5E5E5"> object-oriented languages which</font>

139
00:05:57,340 --> 00:06:03,279
<font color="#E5E5E5">is an area</font><font color="#CCCCCC"> that I've spent a lot of time</font>

140
00:05:58,900 --> 00:06:05,318
in so<font color="#E5E5E5"> object-oriented the concept of</font>

141
00:06:03,279 --> 00:06:07,599
object-oriented<font color="#E5E5E5"> program programming has</font>

142
00:06:05,319 --> 00:06:10,539
actually been<font color="#CCCCCC"> around since</font><font color="#E5E5E5"> like the</font>

143
00:06:07,599 --> 00:06:12,819
1950s<font color="#CCCCCC"> Lisp right that's that's</font><font color="#E5E5E5"> where it</font>

144
00:06:10,539 --> 00:06:14,949
<font color="#CCCCCC">first came out</font><font color="#E5E5E5"> but it really started to</font>

145
00:06:12,819 --> 00:06:17,800
gain ground<font color="#E5E5E5"> probably in the mid 80s to</font>

146
00:06:14,949 --> 00:06:20,050
<font color="#E5E5E5">mid 90s where we had object like</font>

147
00:06:17,800 --> 00:06:21,819
<font color="#CCCCCC">object-oriented was a buzzword right it</font>

148
00:06:20,050 --> 00:06:23,169
was object oriented architecture<font color="#CCCCCC"> object</font>

149
00:06:21,819 --> 00:06:25,810
<font color="#CCCCCC">oriented design</font><font color="#E5E5E5"> object oriented</font>

150
00:06:23,169 --> 00:06:27,520
programming object-oriented methodology

151
00:06:25,810 --> 00:06:31,389
which is<font color="#E5E5E5"> where the title the</font><font color="#CCCCCC"> slope of</font>

152
00:06:27,520 --> 00:06:33,400
<font color="#E5E5E5">the presentation comes from so</font><font color="#CCCCCC"> we had</font>

153
00:06:31,389 --> 00:06:36,610
people like Grady<font color="#E5E5E5"> Booch starting to make</font>

154
00:06:33,400 --> 00:06:39,929
this into a design methodology in a way

155
00:06:36,610 --> 00:06:39,930
of<font color="#E5E5E5"> building out architect</font>

156
00:06:40,970 --> 00:06:49,380
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> some huge advantages</font><font color="#CCCCCC"> to</font>

157
00:06:43,410 --> 00:06:50,640
<font color="#CCCCCC">object-oriented design and that's kind</font>

158
00:06:49,380 --> 00:06:52,740
of why<font color="#CCCCCC"> it'd</font><font color="#E5E5E5"> be gained so much popularity</font>

159
00:06:50,640 --> 00:06:54,930
it wasn't<font color="#E5E5E5"> just a</font><font color="#CCCCCC"> buzzword I mean</font><font color="#E5E5E5"> it's</font>

160
00:06:52,740 --> 00:06:58,440
<font color="#E5E5E5">it's it once it started gaining ground</font>

161
00:06:54,930 --> 00:07:00,720
as a way to<font color="#E5E5E5"> design things it pretty much</font>

162
00:06:58,440 --> 00:07:02,790
stayed there and<font color="#CCCCCC"> even today a large</font>

163
00:07:00,720 --> 00:07:04,530
portion of the software<font color="#CCCCCC"> that's out there</font>

164
00:07:02,790 --> 00:07:09,810
<font color="#CCCCCC">right now is all based on</font>

165
00:07:04,530 --> 00:07:11,159
<font color="#CCCCCC">object-oriented</font><font color="#E5E5E5"> design so it's</font><font color="#CCCCCC"> been one</font>

166
00:07:09,810 --> 00:07:13,050
<font color="#CCCCCC">of the main things I</font><font color="#E5E5E5"> mean it allows</font><font color="#CCCCCC"> us</font>

167
00:07:11,160 --> 00:07:14,580
<font color="#E5E5E5">to have some abstraction I'll get into a</font>

168
00:07:13,050 --> 00:07:15,810
<font color="#CCCCCC">little bit more of what</font><font color="#E5E5E5"> that is just in</font>

169
00:07:14,580 --> 00:07:17,159
<font color="#E5E5E5">case there are still people in the</font>

170
00:07:15,810 --> 00:07:19,740
audience who aren't<font color="#E5E5E5"> really sure what I</font>

171
00:07:17,160 --> 00:07:21,720
mean by<font color="#E5E5E5"> object-oriented but we can</font>

172
00:07:19,740 --> 00:07:26,130
basically<font color="#E5E5E5"> in our design represent</font>

173
00:07:21,720 --> 00:07:29,010
<font color="#CCCCCC">real-world objects in in a way that</font>

174
00:07:26,130 --> 00:07:33,150
makes it easy<font color="#CCCCCC"> to code around them</font>

175
00:07:29,010 --> 00:07:34,800
it's very<font color="#CCCCCC"> modular so you</font><font color="#E5E5E5"> can have you</font>

176
00:07:33,150 --> 00:07:37,469
can<font color="#CCCCCC"> you can like break it down into two</font>

177
00:07:34,800 --> 00:07:38,790
modular pieces<font color="#E5E5E5"> and just work on</font><font color="#CCCCCC"> one</font>

178
00:07:37,470 --> 00:07:40,470
little<font color="#E5E5E5"> bit here one a little bit there</font>

179
00:07:38,790 --> 00:07:43,170
<font color="#E5E5E5">and</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> little bit over here</font><font color="#E5E5E5"> and then</font>

180
00:07:40,470 --> 00:07:46,650
<font color="#CCCCCC">it all kind</font><font color="#E5E5E5"> of fits together nicely so</font>

181
00:07:43,170 --> 00:07:48,420
much so that<font color="#E5E5E5"> it's it one of the biggest</font>

182
00:07:46,650 --> 00:07:51,210
<font color="#CCCCCC">advantages to object-oriented is that</font>

183
00:07:48,420 --> 00:07:53,940
huge teams of developers<font color="#CCCCCC"> or like multi</font>

184
00:07:51,210 --> 00:07:56,760
teams of developers<font color="#E5E5E5"> could design a large</font>

185
00:07:53,940 --> 00:07:59,550
system<font color="#E5E5E5"> break it up into separate little</font>

186
00:07:56,760 --> 00:08:01,230
object areas work on everything

187
00:07:59,550 --> 00:08:02,580
independently and<font color="#E5E5E5"> then at the end of the</font>

188
00:08:01,230 --> 00:08:05,310
day they stick it<font color="#CCCCCC"> all together and</font><font color="#E5E5E5"> it</font>

189
00:08:02,580 --> 00:08:07,440
<font color="#E5E5E5">somehow magically actually works</font><font color="#CCCCCC"> okay</font>

190
00:08:05,310 --> 00:08:09,510
it's not<font color="#CCCCCC"> really that easy we all</font><font color="#E5E5E5"> know</font>

191
00:08:07,440 --> 00:08:11,700
that<font color="#CCCCCC"> right but but you get the</font><font color="#E5E5E5"> idea um</font>

192
00:08:09,510 --> 00:08:13,770
can you imagine writing<font color="#E5E5E5"> some of some of</font>

193
00:08:11,700 --> 00:08:15,120
<font color="#E5E5E5">that same code that's you have a hundred</font>

194
00:08:13,770 --> 00:08:17,700
<font color="#E5E5E5">people working on it</font><font color="#CCCCCC"> in a procedural</font>

195
00:08:15,120 --> 00:08:23,370
<font color="#CCCCCC">language can you imagine doing</font><font color="#E5E5E5"> all that</font>

196
00:08:17,700 --> 00:08:24,420
in Perl<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> it'd be really hard so the</font>

197
00:08:23,370 --> 00:08:27,110
other thing with object or any language

198
00:08:24,420 --> 00:08:29,820
<font color="#CCCCCC">is is they tend to be</font><font color="#E5E5E5"> strongly typed</font>

199
00:08:27,110 --> 00:08:32,789
like that's part<font color="#E5E5E5"> of how the</font>

200
00:08:29,820 --> 00:08:35,849
<font color="#E5E5E5">object-oriented design works we have we</font>

201
00:08:32,789 --> 00:08:40,380
define what things are<font color="#E5E5E5"> and then we make</font>

202
00:08:35,849 --> 00:08:42,000
objects of those so<font color="#E5E5E5"> looking at an</font>

203
00:08:40,380 --> 00:08:44,529
<font color="#CCCCCC">example here</font>

204
00:08:42,000 --> 00:08:46,260
I'm gonna start really<font color="#E5E5E5"> simple I'm gonna</font>

205
00:08:44,529 --> 00:08:48,639
build this<font color="#E5E5E5"> out just a little bit and</font>

206
00:08:46,260 --> 00:08:50,529
<font color="#E5E5E5">hopefully if there's any doubt in your</font>

207
00:08:48,639 --> 00:08:52,060
minds<font color="#E5E5E5"> as to what object-oriented what I</font>

208
00:08:50,529 --> 00:08:54,040
mean when I say object-oriented design

209
00:08:52,060 --> 00:08:56,489
that kind<font color="#CCCCCC"> of goes away by the time I get</font>

210
00:08:54,040 --> 00:09:00,250
<font color="#CCCCCC">to the third or fourth slide here</font><font color="#E5E5E5"> so</font>

211
00:08:56,490 --> 00:09:02,829
<font color="#E5E5E5">this is a class diagram</font><font color="#CCCCCC"> alright we're</font>

212
00:09:00,250 --> 00:09:04,980
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> not objects these are the</font>

213
00:09:02,829 --> 00:09:07,060
templates<font color="#E5E5E5"> for creating objects</font>

214
00:09:04,980 --> 00:09:10,329
everything inherits from<font color="#E5E5E5"> the class</font>

215
00:09:07,060 --> 00:09:14,319
object<font color="#CCCCCC"> so all objects funny</font><font color="#E5E5E5"> enough</font>

216
00:09:10,329 --> 00:09:15,849
actually come from<font color="#CCCCCC"> the class object now</font>

217
00:09:14,320 --> 00:09:16,570
in this case<font color="#CCCCCC"> here in this</font><font color="#E5E5E5"> system I'm</font>

218
00:09:15,850 --> 00:09:20,350
building<font color="#E5E5E5"> out</font>

219
00:09:16,570 --> 00:09:26,339
I have container and liquid<font color="#CCCCCC"> I felt that</font>

220
00:09:20,350 --> 00:09:28,449
<font color="#E5E5E5">was appropriate</font><font color="#CCCCCC"> for this</font><font color="#E5E5E5"> conference so</font>

221
00:09:26,339 --> 00:09:31,480
containers let's just say they have an

222
00:09:28,449 --> 00:09:33,189
attribute<font color="#E5E5E5"> capacity it's an integer</font><font color="#CCCCCC"> so</font>

223
00:09:31,480 --> 00:09:35,709
<font color="#CCCCCC">now we're</font><font color="#E5E5E5"> starting to talk kind of code</font>

224
00:09:33,190 --> 00:09:37,660
like stuff<font color="#CCCCCC"> now I</font><font color="#E5E5E5"> haven't created any</font>

225
00:09:35,709 --> 00:09:39,430
containers yet<font color="#E5E5E5"> this is still the class</font>

226
00:09:37,660 --> 00:09:41,920
container so we're saying all<font color="#E5E5E5"> containers</font>

227
00:09:39,430 --> 00:09:45,099
have a capacity and all liquids have<font color="#E5E5E5"> a</font>

228
00:09:41,920 --> 00:09:47,229
volume<font color="#CCCCCC"> and amount of</font><font color="#E5E5E5"> liquid and a</font>

229
00:09:45,100 --> 00:09:49,959
<font color="#E5E5E5">container you can fill it with liquid</font>

230
00:09:47,230 --> 00:09:52,569
<font color="#CCCCCC">and you can pour out</font><font color="#E5E5E5"> liquid so those are</font>

231
00:09:49,959 --> 00:09:55,000
<font color="#E5E5E5">two actions that we can</font><font color="#CCCCCC"> perform</font><font color="#E5E5E5"> on a</font>

232
00:09:52,569 --> 00:09:56,199
container<font color="#E5E5E5"> all right so let's drill</font><font color="#CCCCCC"> down</font>

233
00:09:55,000 --> 00:09:59,260
a little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more on what</font><font color="#CCCCCC"> we mean by</font>

234
00:09:56,199 --> 00:10:01,149
containers<font color="#E5E5E5"> all right so at the top there</font>

235
00:09:59,260 --> 00:10:03,220
that<font color="#E5E5E5"> container that's the same box I had</font>

236
00:10:01,149 --> 00:10:04,690
<font color="#CCCCCC">before in the previous diagram so now</font>

237
00:10:03,220 --> 00:10:07,690
I'm saying that there's different types

238
00:10:04,690 --> 00:10:09,670
or<font color="#CCCCCC"> different</font><font color="#E5E5E5"> subclasses of container so</font>

239
00:10:07,690 --> 00:10:10,779
<font color="#CCCCCC">we have a glass which is basically just</font>

240
00:10:09,670 --> 00:10:13,269
<font color="#E5E5E5">does everything in a container you can</font>

241
00:10:10,779 --> 00:10:15,160
<font color="#E5E5E5">do in this case we have a different type</font>

242
00:10:13,269 --> 00:10:18,399
of container which<font color="#CCCCCC"> is a keg that's a</font>

243
00:10:15,160 --> 00:10:19,930
really cool container because a keg<font color="#CCCCCC"> not</font>

244
00:10:18,399 --> 00:10:23,350
<font color="#E5E5E5">only allows you to pour stuff out or</font>

245
00:10:19,930 --> 00:10:25,359
<font color="#E5E5E5">pour stuff in but you can also hook</font><font color="#CCCCCC"> it</font>

246
00:10:23,350 --> 00:10:28,300
up to a gas cylinder<font color="#CCCCCC"> and dispense it and</font>

247
00:10:25,360 --> 00:10:30,940
it's all<font color="#E5E5E5"> bubbly and really cool</font><font color="#CCCCCC"> I like</font>

248
00:10:28,300 --> 00:10:33,849
<font color="#E5E5E5">that and then that</font><font color="#CCCCCC"> we have in this one</font><font color="#E5E5E5"> a</font>

249
00:10:30,940 --> 00:10:35,560
bottle as<font color="#CCCCCC"> well now a bottle extends an</font>

250
00:10:33,850 --> 00:10:37,089
interface<font color="#CCCCCC"> that's a bottle cap</font>

251
00:10:35,560 --> 00:10:41,489
so it allows you to<font color="#E5E5E5"> actually open</font><font color="#CCCCCC"> it up</font>

252
00:10:37,089 --> 00:10:44,079
with<font color="#CCCCCC"> a you can remove the bottle cap</font>

253
00:10:41,490 --> 00:10:44,620
<font color="#CCCCCC">okay so now let's take</font><font color="#E5E5E5"> a quick look at</font>

254
00:10:44,079 --> 00:10:46,359
<font color="#CCCCCC">liquid</font>

255
00:10:44,620 --> 00:10:49,149
<font color="#E5E5E5">I'm just keeping this really simple</font>

256
00:10:46,360 --> 00:10:51,550
intentionally<font color="#CCCCCC"> so we have liquid</font><font color="#E5E5E5"> it has a</font>

257
00:10:49,149 --> 00:10:52,480
volume<font color="#E5E5E5"> now we're gonna subclass liquid</font>

258
00:10:51,550 --> 00:10:55,839
and we're going to<font color="#E5E5E5"> give it</font><font color="#CCCCCC"> some</font>

259
00:10:52,480 --> 00:10:59,470
<font color="#CCCCCC">additional attributes</font><font color="#E5E5E5"> ABV</font>

260
00:10:55,840 --> 00:11:03,490
so alcohol<font color="#E5E5E5"> by volume</font><font color="#CCCCCC"> it's a float and</font><font color="#E5E5E5"> we</font>

261
00:10:59,470 --> 00:11:05,560
have IBUs<font color="#E5E5E5"> so everybody who's really into</font>

262
00:11:03,490 --> 00:11:08,170
like<font color="#CCCCCC"> into real beer knows what IBU is</font>

263
00:11:05,560 --> 00:11:13,779
right so for those<font color="#CCCCCC"> you are drinking</font><font color="#E5E5E5"> a</font>

264
00:11:08,170 --> 00:11:16,959
Bud Light<font color="#CCCCCC"> I'm sorry I bu is is an intra</font>

265
00:11:13,779 --> 00:11:18,970
be between<font color="#CCCCCC"> 100 okay</font><font color="#E5E5E5"> international</font>

266
00:11:16,960 --> 00:11:21,610
bittering units<font color="#E5E5E5"> and then we have al</font>

267
00:11:18,970 --> 00:11:23,620
ciders and<font color="#CCCCCC"> Meads as different types of</font>

268
00:11:21,610 --> 00:11:25,360
brew<font color="#E5E5E5"> they're all brew but they're</font>

269
00:11:23,620 --> 00:11:30,040
they're actually<font color="#CCCCCC"> different subtypes of</font>

270
00:11:25,360 --> 00:11:32,800
real now in this<font color="#E5E5E5"> diagram I've decided</font>

271
00:11:30,040 --> 00:11:34,510
<font color="#E5E5E5">okay now that we have</font><font color="#CCCCCC"> some idea what our</font>

272
00:11:32,800 --> 00:11:38,979
object classes are let's actually create

273
00:11:34,510 --> 00:11:42,160
<font color="#E5E5E5">some objects so we</font><font color="#CCCCCC"> have the darker blue</font>

274
00:11:38,980 --> 00:11:44,860
box in the middle<font color="#CCCCCC"> is an object that</font><font color="#E5E5E5"> I'm</font>

275
00:11:42,160 --> 00:11:46,779
<font color="#E5E5E5">calling a pint glass</font><font color="#CCCCCC"> now that that</font><font color="#E5E5E5"> would</font>

276
00:11:44,860 --> 00:11:49,660
be<font color="#E5E5E5"> the variable inside of your code</font><font color="#CCCCCC"> it'd</font>

277
00:11:46,779 --> 00:11:52,420
<font color="#E5E5E5">be a pint glass and it is of type glass</font>

278
00:11:49,660 --> 00:11:54,069
which extends container so it has all of

279
00:11:52,420 --> 00:11:57,459
<font color="#E5E5E5">the</font><font color="#CCCCCC"> attributes of container</font><font color="#E5E5E5"> not only</font>

280
00:11:54,070 --> 00:11:58,690
that but we can now assign actual values

281
00:11:57,460 --> 00:12:02,290
to it because we have an object in

282
00:11:58,690 --> 00:12:07,030
memory<font color="#E5E5E5"> okay same thing with at the</font>

283
00:12:02,290 --> 00:12:08,319
bottom<font color="#E5E5E5"> I</font><font color="#CCCCCC"> have a type of ale and I'm</font><font color="#E5E5E5"> just</font>

284
00:12:07,030 --> 00:12:10,839
<font color="#E5E5E5">going to call</font><font color="#CCCCCC"> it a pint so that way I</font>

285
00:12:08,320 --> 00:12:13,660
have<font color="#CCCCCC"> a pint of ale and it has all of</font><font color="#E5E5E5"> the</font>

286
00:12:10,839 --> 00:12:15,820
<font color="#CCCCCC">attributes of a brew</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> a liquid</font><font color="#E5E5E5"> and</font>

287
00:12:13,660 --> 00:12:17,829
basically all everything up<font color="#CCCCCC"> that chain</font>

288
00:12:15,820 --> 00:12:21,100
<font color="#E5E5E5">and those two are</font><font color="#CCCCCC"> related</font><font color="#E5E5E5"> one actually</font>

289
00:12:17,830 --> 00:12:22,290
contains the<font color="#E5E5E5"> other okay so everybody</font>

290
00:12:21,100 --> 00:12:25,270
with me so far

291
00:12:22,290 --> 00:12:28,120
so now that we have<font color="#CCCCCC"> an idea of what our</font>

292
00:12:25,270 --> 00:12:30,040
object structure looks<font color="#CCCCCC"> like we need to</font>

293
00:12:28,120 --> 00:12:32,440
figure<font color="#E5E5E5"> out how do we transmit or store</font>

294
00:12:30,040 --> 00:12:37,949
it for later purpose so we have a pint

295
00:12:32,440 --> 00:12:41,709
of ale<font color="#CCCCCC"> and we want to store it or</font>

296
00:12:37,950 --> 00:12:43,000
transmit it from<font color="#E5E5E5"> point A to point B now</font>

297
00:12:41,709 --> 00:12:46,660
there's a couple<font color="#CCCCCC"> of ways we</font><font color="#E5E5E5"> could do</font>

298
00:12:43,000 --> 00:12:48,550
this<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> of a program the first way</font>

299
00:12:46,660 --> 00:12:49,990
and<font color="#E5E5E5"> this is I guess sort of the</font>

300
00:12:48,550 --> 00:12:52,510
traditional<font color="#E5E5E5"> way</font><font color="#CCCCCC"> we think about</font>

301
00:12:49,990 --> 00:12:54,700
serializing something is we take all<font color="#CCCCCC"> of</font>

302
00:12:52,510 --> 00:12:58,990
the<font color="#E5E5E5"> data that makes up those objects or</font>

303
00:12:54,700 --> 00:13:01,510
the<font color="#E5E5E5"> data structure and we save it all in</font>

304
00:12:58,990 --> 00:13:04,900
a particular<font color="#E5E5E5"> order so the capacity the</font>

305
00:13:01,510 --> 00:13:06,459
volume of the liquid<font color="#E5E5E5"> the ABV the</font><font color="#CCCCCC"> ibu we</font>

306
00:13:04,900 --> 00:13:09,139
would take all of<font color="#E5E5E5"> those attributes and</font>

307
00:13:06,459 --> 00:13:10,459
we would store them or send them<font color="#E5E5E5"> all</font>

308
00:13:09,139 --> 00:13:12,679
in a certain order<font color="#CCCCCC"> and then on the other</font>

309
00:13:10,459 --> 00:13:15,170
<font color="#E5E5E5">end of whatever we're doing so let's say</font>

310
00:13:12,679 --> 00:13:17,089
we're receiving a transmission<font color="#E5E5E5"> we would</font>

311
00:13:15,170 --> 00:13:20,299
we would<font color="#CCCCCC"> know that we're receiving them</font>

312
00:13:17,089 --> 00:13:22,939
in<font color="#E5E5E5"> that same order all right so that's</font>

313
00:13:20,299 --> 00:13:26,358
that's traditionally how<font color="#E5E5E5"> serialized</font>

314
00:13:22,939 --> 00:13:28,309
serialization<font color="#E5E5E5"> might occur some big</font>

315
00:13:26,359 --> 00:13:30,529
problems<font color="#E5E5E5"> with this especially in an</font>

316
00:13:28,309 --> 00:13:32,358
<font color="#CCCCCC">object-oriented world</font><font color="#E5E5E5"> in an</font>

317
00:13:30,529 --> 00:13:34,579
object-oriented design I<font color="#E5E5E5"> can very easily</font>

318
00:13:32,359 --> 00:13:36,829
change things<font color="#CCCCCC"> that's one</font><font color="#E5E5E5"> of the</font>

319
00:13:34,579 --> 00:13:39,138
<font color="#CCCCCC">advantages of</font><font color="#E5E5E5"> object-oriented is further</font>

320
00:13:36,829 --> 00:13:40,729
up the it could<font color="#CCCCCC"> be</font><font color="#E5E5E5"> not just</font><font color="#CCCCCC"> the class</font>

321
00:13:39,139 --> 00:13:43,040
that<font color="#CCCCCC"> I'm serializing but it could be one</font>

322
00:13:40,730 --> 00:13:47,540
<font color="#CCCCCC">of its</font><font color="#E5E5E5"> super classes that I change maybe</font>

323
00:13:43,040 --> 00:13:49,939
<font color="#E5E5E5">I add an attribute</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two ales maybe I</font>

324
00:13:47,540 --> 00:13:52,219
say that they have a color or<font color="#CCCCCC"> or an</font>

325
00:13:49,939 --> 00:13:53,809
amount of carbonation<font color="#CCCCCC"> or maybe I change</font>

326
00:13:52,220 --> 00:13:56,720
a container and it has a<font color="#E5E5E5"> material that</font>

327
00:13:53,809 --> 00:13:59,179
it's made out<font color="#CCCCCC"> of all</font><font color="#E5E5E5"> right so so now</font>

328
00:13:56,720 --> 00:14:01,009
I've<font color="#E5E5E5"> made it more complex now any code</font>

329
00:13:59,179 --> 00:14:02,600
that<font color="#CCCCCC"> I have that serializes I need to</font>

330
00:14:01,009 --> 00:14:05,689
rethink that put<font color="#CCCCCC"> things back into</font><font color="#E5E5E5"> a</font>

331
00:14:02,600 --> 00:14:07,399
<font color="#E5E5E5">different order</font><font color="#CCCCCC"> and basically I keep</font>

332
00:14:05,689 --> 00:14:08,809
adding<font color="#CCCCCC"> more</font><font color="#E5E5E5"> and more lines to this both</font>

333
00:14:07,399 --> 00:14:13,639
on the sending side and the receiving

334
00:14:08,809 --> 00:14:15,519
<font color="#E5E5E5">side option two is well why don't we</font>

335
00:14:13,639 --> 00:14:18,649
<font color="#E5E5E5">just</font><font color="#CCCCCC"> make that part</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> language and</font>

336
00:14:15,519 --> 00:14:20,329
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> every object-oriented</font>

337
00:14:18,649 --> 00:14:23,480
language I've ever<font color="#E5E5E5"> worked with does it</font>

338
00:14:20,329 --> 00:14:25,189
has a single<font color="#E5E5E5"> call a single</font><font color="#CCCCCC"> function that</font>

339
00:14:23,480 --> 00:14:27,139
says write this object<font color="#CCCCCC"> to this output</font>

340
00:14:25,189 --> 00:14:30,589
stream or read this object<font color="#CCCCCC"> from</font><font color="#E5E5E5"> this</font>

341
00:14:27,139 --> 00:14:32,869
input<font color="#E5E5E5"> stream and it just</font><font color="#CCCCCC"> auto magically</font>

342
00:14:30,589 --> 00:14:36,230
<font color="#E5E5E5">does everything for you it's on</font>

343
00:14:32,869 --> 00:14:39,079
<font color="#E5E5E5">autopilot so that's that's basically</font>

344
00:14:36,230 --> 00:14:41,179
<font color="#E5E5E5">where serialization comes from is it's</font>

345
00:14:39,079 --> 00:14:43,729
the easy way it's the lazy way for us to

346
00:14:41,179 --> 00:14:46,579
do<font color="#E5E5E5"> things it's</font><font color="#CCCCCC"> ah automatic we don't</font>

347
00:14:43,730 --> 00:14:49,489
have to think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it right so</font><font color="#CCCCCC"> a lot of</font>

348
00:14:46,579 --> 00:14:51,709
languages do this Java PHP Python

349
00:14:49,489 --> 00:14:55,339
<font color="#CCCCCC">actually has a serialization capability</font>

350
00:14:51,709 --> 00:14:57,979
in there<font color="#CCCCCC"> it's called pickle Ruby I don't</font>

351
00:14:55,339 --> 00:14:59,509
do<font color="#CCCCCC"> anything in Ruby but I understand it</font>

352
00:14:57,980 --> 00:15:04,329
has serialization and also do

353
00:14:59,509 --> 00:15:04,329
serialization<font color="#E5E5E5"> flaws</font><font color="#CCCCCC"> even JavaScript does</font>

354
00:15:05,859 --> 00:15:13,489
<font color="#CCCCCC">all right so what I'm gonna do now is go</font>

355
00:15:10,999 --> 00:15:15,109
through<font color="#E5E5E5"> a couple of contrived examples</font>

356
00:15:13,489 --> 00:15:16,939
<font color="#CCCCCC">this is sample</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> that I put together</font>

357
00:15:15,109 --> 00:15:19,959
<font color="#E5E5E5">I also put it out on github</font><font color="#CCCCCC"> so you can</font>

358
00:15:16,939 --> 00:15:22,368
play<font color="#E5E5E5"> with it</font><font color="#CCCCCC"> later if</font><font color="#E5E5E5"> you want</font><font color="#CCCCCC"> and</font>

359
00:15:19,959 --> 00:15:23,089
<font color="#CCCCCC">whatever it's it's basically just to</font>

360
00:15:22,369 --> 00:15:25,160
kind<font color="#E5E5E5"> of show</font>

361
00:15:23,089 --> 00:15:27,230
<font color="#E5E5E5">how the serialization</font><font color="#CCCCCC"> deserializing</font>

362
00:15:25,160 --> 00:15:31,219
<font color="#CCCCCC">Asian works and how can we can introduce</font>

363
00:15:27,230 --> 00:15:33,769
<font color="#E5E5E5">a malicious payload</font><font color="#CCCCCC"> or at least changed</font>

364
00:15:31,220 --> 00:15:37,029
payload into a a mechanism<font color="#E5E5E5"> that's doing</font>

365
00:15:33,769 --> 00:15:39,110
D serialization<font color="#E5E5E5"> of objects</font><font color="#CCCCCC"> all right so</font>

366
00:15:37,029 --> 00:15:41,360
let's consider<font color="#E5E5E5"> this is like I</font><font color="#CCCCCC"> says</font>

367
00:15:39,110 --> 00:15:43,459
<font color="#E5E5E5">contrived made it up we have a ticketing</font>

368
00:15:41,360 --> 00:15:45,410
system and part<font color="#E5E5E5"> of this ticketing system</font>

369
00:15:43,459 --> 00:15:47,180
the<font color="#CCCCCC"> first</font><font color="#E5E5E5"> thing it's going to do we're</font>

370
00:15:45,410 --> 00:15:48,920
<font color="#E5E5E5">going to have the creating a ticket or</font>

371
00:15:47,180 --> 00:15:51,920
generating a ticket capability on there

372
00:15:48,920 --> 00:15:57,469
<font color="#E5E5E5">and I'm just</font><font color="#CCCCCC"> going to put some very</font>

373
00:15:51,920 --> 00:16:03,979
simple<font color="#E5E5E5"> information in there</font><font color="#CCCCCC"> let's see</font>

374
00:15:57,470 --> 00:16:07,670
<font color="#E5E5E5">here hang on</font><font color="#CCCCCC"> a second so here is the</font>

375
00:16:03,980 --> 00:16:09,230
<font color="#E5E5E5">sample stuff and I'll go through the</font>

376
00:16:07,670 --> 00:16:10,579
code after<font color="#E5E5E5"> first I'm just going</font><font color="#CCCCCC"> to show</font>

377
00:16:09,230 --> 00:16:13,670
you<font color="#E5E5E5"> what the app does so you have an</font>

378
00:16:10,579 --> 00:16:15,258
idea<font color="#E5E5E5"> so I'm creating a ticket</font><font color="#CCCCCC"> let's cut</font>

379
00:16:13,670 --> 00:16:20,930
off there a little<font color="#E5E5E5"> bit but it's my my</font>

380
00:16:15,259 --> 00:16:22,850
first and last<font color="#E5E5E5"> name</font><font color="#CCCCCC"> and then</font><font color="#E5E5E5"> when I when</font>

381
00:16:20,930 --> 00:16:24,888
I submit<font color="#CCCCCC"> that it generates the ticket</font>

382
00:16:22,850 --> 00:16:27,439
<font color="#CCCCCC">and we have that weird string at the top</font>

383
00:16:24,889 --> 00:16:30,170
<font color="#E5E5E5">which I will talk</font><font color="#CCCCCC"> through that</font><font color="#E5E5E5"> in just</font><font color="#CCCCCC"> a</font>

384
00:16:27,439 --> 00:16:32,629
second<font color="#CCCCCC"> which then</font><font color="#E5E5E5"> I base64 encode that</font>

385
00:16:30,170 --> 00:16:35,660
ticket so now<font color="#E5E5E5"> I have this</font><font color="#CCCCCC"> information</font>

386
00:16:32,629 --> 00:16:37,009
here which<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> ticket for this</font>

387
00:16:35,660 --> 00:16:38,420
ticketing system this<font color="#E5E5E5"> could be event</font>

388
00:16:37,009 --> 00:16:43,009
tickets it could be<font color="#E5E5E5"> trouble tickets</font>

389
00:16:38,420 --> 00:16:46,339
whatever<font color="#E5E5E5"> it doesn't</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> matter</font><font color="#CCCCCC"> now if</font>

390
00:16:43,009 --> 00:16:48,620
I go back<font color="#E5E5E5"> here</font><font color="#CCCCCC"> and submit the ticket so</font>

391
00:16:46,339 --> 00:16:51,050
think later on<font color="#E5E5E5"> down the</font><font color="#CCCCCC"> process maybe</font>

392
00:16:48,620 --> 00:16:53,319
the user who submitted a ticket receives

393
00:16:51,050 --> 00:16:56,990
an<font color="#CCCCCC"> email or it</font><font color="#E5E5E5"> gets a link or whatever</font>

394
00:16:53,319 --> 00:17:01,990
<font color="#E5E5E5">or scans a QR</font><font color="#CCCCCC"> code and</font><font color="#E5E5E5"> an event that</font>

395
00:16:56,990 --> 00:17:06,380
same ticket value gets submitted and

396
00:17:01,990 --> 00:17:09,919
then it gets when it's<font color="#E5E5E5"> submitted the</font>

397
00:17:06,380 --> 00:17:14,049
base64<font color="#E5E5E5"> encoding it decodes to</font><font color="#CCCCCC"> its</font>

398
00:17:09,919 --> 00:17:16,730
serialized value which we can then

399
00:17:14,049 --> 00:17:21,199
deserialize and show the<font color="#CCCCCC"> information on</font>

400
00:17:16,730 --> 00:17:26,870
it<font color="#CCCCCC"> okay so let</font><font color="#E5E5E5"> me jump back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> my slides</font>

401
00:17:21,199 --> 00:17:29,540
for a second so a couple<font color="#E5E5E5"> of things</font>

402
00:17:26,869 --> 00:17:33,340
<font color="#CCCCCC">mention so first of</font><font color="#E5E5E5"> all what is that</font>

403
00:17:29,540 --> 00:17:36,170
<font color="#E5E5E5">weird string that I was showing that's</font>

404
00:17:33,340 --> 00:17:40,550
serialized PHP so this this example<font color="#E5E5E5"> is</font>

405
00:17:36,170 --> 00:17:43,580
<font color="#E5E5E5">in PHP by the way</font><font color="#CCCCCC"> and it's this is what</font>

406
00:17:40,550 --> 00:17:45,770
I noticed when I was doing my<font color="#E5E5E5"> test</font><font color="#CCCCCC"> last</font>

407
00:17:43,580 --> 00:17:47,300
year<font color="#CCCCCC"> I saw this</font><font color="#E5E5E5"> going back and forth</font>

408
00:17:45,770 --> 00:17:49,370
between the browser and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> server</font><font color="#E5E5E5"> and</font>

409
00:17:47,300 --> 00:17:51,830
<font color="#CCCCCC">that's kind of</font><font color="#E5E5E5"> what made me go okay huh</font>

410
00:17:49,370 --> 00:17:54,020
that's<font color="#E5E5E5"> interesting it's not</font><font color="#CCCCCC"> JSON</font><font color="#E5E5E5"> that's</font>

411
00:17:51,830 --> 00:17:55,580
what I was first when<font color="#E5E5E5"> I first caught a</font>

412
00:17:54,020 --> 00:17:58,070
glimpse of it<font color="#E5E5E5"> I was like oh it's JSON oh</font>

413
00:17:55,580 --> 00:18:03,379
wait no it's not<font color="#CCCCCC"> that's weird</font><font color="#E5E5E5"> it's got</font>

414
00:17:58,070 --> 00:18:06,050
all<font color="#CCCCCC"> of these colon delimited pieces to</font>

415
00:18:03,380 --> 00:18:07,670
it each string in<font color="#E5E5E5"> there starts off with</font>

416
00:18:06,050 --> 00:18:09,169
an S to tell you it's a string and<font color="#E5E5E5"> then</font>

417
00:18:07,670 --> 00:18:10,640
it<font color="#E5E5E5"> gives you the length of the string</font>

418
00:18:09,170 --> 00:18:13,309
and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> puts the string in there and</font>

419
00:18:10,640 --> 00:18:17,120
so then<font color="#E5E5E5"> I delved into this in more</font>

420
00:18:13,309 --> 00:18:18,559
detail<font color="#CCCCCC"> and then kind of you know pulled</font>

421
00:18:17,120 --> 00:18:20,510
it all together and went okay that's

422
00:18:18,559 --> 00:18:21,980
cool<font color="#CCCCCC"> and you know you</font><font color="#E5E5E5"> think that</font>

423
00:18:20,510 --> 00:18:23,450
somebody who's been<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> applications</font>

424
00:18:21,980 --> 00:18:25,040
security<font color="#E5E5E5"> for many years would have</font>

425
00:18:23,450 --> 00:18:27,679
encountered<font color="#E5E5E5"> this already except I almost</font>

426
00:18:25,040 --> 00:18:29,300
never test any PHP stuff like most most

427
00:18:27,679 --> 00:18:30,920
<font color="#E5E5E5">of</font><font color="#CCCCCC"> what's out</font><font color="#E5E5E5"> there is not that I'm</font>

428
00:18:29,300 --> 00:18:32,540
testing<font color="#CCCCCC"> is in PHP because</font><font color="#E5E5E5"> I do a lot of</font>

429
00:18:30,920 --> 00:18:35,420
stuff in the<font color="#CCCCCC"> enterprise and</font><font color="#E5E5E5"> you don't</font>

430
00:18:32,540 --> 00:18:36,649
<font color="#E5E5E5">really find that very often so this but</font>

431
00:18:35,420 --> 00:18:38,510
<font color="#E5E5E5">this was the first</font><font color="#CCCCCC"> time I encountered a</font>

432
00:18:36,650 --> 00:18:39,650
PHP<font color="#E5E5E5"> app that was actually serializing</font>

433
00:18:38,510 --> 00:18:42,050
these things back and forth<font color="#E5E5E5"> from the</font>

434
00:18:39,650 --> 00:18:43,900
<font color="#E5E5E5">router</font><font color="#CCCCCC"> so I was like</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> that's</font>

435
00:18:42,050 --> 00:18:46,610
interesting<font color="#CCCCCC"> let me look at that</font>

436
00:18:43,900 --> 00:18:49,100
<font color="#CCCCCC">so this is what we're doing</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> generate</font>

437
00:18:46,610 --> 00:18:51,110
the ticket<font color="#E5E5E5"> very simple for those of you</font>

438
00:18:49,100 --> 00:18:52,520
know PHP should already understand this

439
00:18:51,110 --> 00:18:57,159
for those who don't<font color="#CCCCCC"> I'll walk through it</font>

440
00:18:52,520 --> 00:19:00,020
very<font color="#E5E5E5"> quickly</font><font color="#CCCCCC"> so we have our ticket data</font>

441
00:18:57,160 --> 00:19:02,030
<font color="#E5E5E5">okay and for that what we're doing is</font>

442
00:19:00,020 --> 00:19:04,280
we're creating<font color="#E5E5E5"> an array it has my first</font>

443
00:19:02,030 --> 00:19:06,230
and<font color="#CCCCCC"> last name</font><font color="#E5E5E5"> that that comes from the</font>

444
00:19:04,280 --> 00:19:07,910
post so this is when I typed in<font color="#E5E5E5"> the</font>

445
00:19:06,230 --> 00:19:10,940
first and<font color="#E5E5E5"> last name in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> in that form</font>

446
00:19:07,910 --> 00:19:13,340
field and then hit submit<font color="#CCCCCC"> this is the</font>

447
00:19:10,940 --> 00:19:14,870
file<font color="#CCCCCC"> that gets</font><font color="#E5E5E5"> called after that all</font>

448
00:19:13,340 --> 00:19:17,209
right so it's taking that<font color="#CCCCCC"> information</font>

449
00:19:14,870 --> 00:19:21,559
putting<font color="#E5E5E5"> it into an array it's calling</font>

450
00:19:17,210 --> 00:19:23,450
<font color="#CCCCCC">the PHP built-in function</font><font color="#E5E5E5"> serialize and</font>

451
00:19:21,559 --> 00:19:25,129
passing in that<font color="#E5E5E5"> ticket data and then</font>

452
00:19:23,450 --> 00:19:27,800
what's coming out of<font color="#CCCCCC"> that is the</font>

453
00:19:25,130 --> 00:19:30,740
serialized<font color="#CCCCCC"> version which</font><font color="#E5E5E5"> I then echo</font><font color="#CCCCCC"> out</font>

454
00:19:27,800 --> 00:19:33,350
in base64<font color="#CCCCCC"> encoded form right so</font><font color="#E5E5E5"> just be</font>

455
00:19:30,740 --> 00:19:35,390
<font color="#CCCCCC">64 encoded to make it safe for</font><font color="#E5E5E5"> the web</font>

456
00:19:33,350 --> 00:19:38,360
<font color="#CCCCCC">that</font><font color="#E5E5E5"> way I can put</font><font color="#CCCCCC"> it inside</font><font color="#E5E5E5"> a cookies I</font>

457
00:19:35,390 --> 00:19:39,740
can put it<font color="#CCCCCC"> into</font><font color="#E5E5E5"> URLs</font><font color="#CCCCCC"> I don't have to</font>

458
00:19:38,360 --> 00:19:40,029
worry<font color="#CCCCCC"> about any special characters in</font>

459
00:19:39,740 --> 00:19:45,110
there

460
00:19:40,029 --> 00:19:47,029
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> next we have the submitting of</font>

461
00:19:45,110 --> 00:19:49,639
the ticket so this is the second form

462
00:19:47,029 --> 00:19:51,919
where I just<font color="#CCCCCC"> took</font><font color="#E5E5E5"> that blob of basic</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> 4</font>

463
00:19:49,639 --> 00:19:55,010
encoded stuff and put that into<font color="#CCCCCC"> that</font>

464
00:19:51,919 --> 00:19:56,750
<font color="#E5E5E5">second form and it's basically just</font>

465
00:19:55,010 --> 00:19:58,330
<font color="#E5E5E5">doing the opposite it's very simple</font><font color="#CCCCCC"> so</font>

466
00:19:56,750 --> 00:20:01,490
<font color="#E5E5E5">it's its first thing I'm doing</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> I'm</font>

467
00:19:58,330 --> 00:20:05,480
base64 decoding that<font color="#E5E5E5"> value so that gives</font>

468
00:20:01,490 --> 00:20:08,480
me<font color="#E5E5E5"> my serialized object and then I</font><font color="#CCCCCC"> unn</font>

469
00:20:05,480 --> 00:20:13,279
<font color="#CCCCCC">serialized that and that gives</font><font color="#E5E5E5"> me back</font>

470
00:20:08,480 --> 00:20:16,120
to my array<font color="#E5E5E5"> and then I can output that</font>

471
00:20:13,279 --> 00:20:18,529
data from<font color="#CCCCCC"> the array back into the</font><font color="#E5E5E5"> the</font>

472
00:20:16,120 --> 00:20:25,010
<font color="#CCCCCC">onto the screen so we can all see it</font><font color="#E5E5E5"> we</font>

473
00:20:18,529 --> 00:20:27,860
can all read<font color="#CCCCCC"> it make sense here's here's</font>

474
00:20:25,010 --> 00:20:29,510
the catch<font color="#CCCCCC"> we do</font><font color="#E5E5E5"> include a vulnerable dot</font>

475
00:20:27,860 --> 00:20:31,850
PHP file now I will tell<font color="#E5E5E5"> you right now</font>

476
00:20:29,510 --> 00:20:33,649
<font color="#E5E5E5">you're probably not going to find</font><font color="#CCCCCC"> as</font>

477
00:20:31,850 --> 00:20:34,639
you're doing<font color="#CCCCCC"> a test or something that</font>

478
00:20:33,649 --> 00:20:35,719
you're<font color="#E5E5E5"> gonna find a file</font><font color="#CCCCCC"> called</font>

479
00:20:34,639 --> 00:20:40,158
vulnerable it's not going to be that

480
00:20:35,720 --> 00:20:41,809
obvious<font color="#E5E5E5"> but I saw in a contrived example</font>

481
00:20:40,159 --> 00:20:43,460
it is<font color="#E5E5E5"> I may try to make it very</font><font color="#CCCCCC"> clear</font>

482
00:20:41,809 --> 00:20:45,320
where the vulnerability<font color="#E5E5E5"> is so we have</font>

483
00:20:43,460 --> 00:20:47,059
<font color="#CCCCCC">this vulnerable PHP this was included in</font>

484
00:20:45,320 --> 00:20:48,918
<font color="#E5E5E5">this file which</font><font color="#CCCCCC"> means if it has any</font>

485
00:20:47,059 --> 00:20:51,289
vulnerabilities<font color="#CCCCCC"> we can make use of them</font>

486
00:20:48,919 --> 00:20:54,590
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> of the PHP here</font><font color="#E5E5E5"> and in this case</font>

487
00:20:51,289 --> 00:20:56,059
<font color="#CCCCCC">we can so before I do that let me</font><font color="#E5E5E5"> just</font>

488
00:20:54,590 --> 00:20:59,389
<font color="#E5E5E5">discuss something very quickly because</font>

489
00:20:56,059 --> 00:21:00,740
this is a key concept<font color="#E5E5E5"> in object-oriented</font>

490
00:20:59,389 --> 00:21:02,719
design when<font color="#CCCCCC"> you get 2d serial</font>

491
00:21:00,740 --> 00:21:05,840
serialization<font color="#E5E5E5"> and deserialization</font><font color="#CCCCCC"> and</font>

492
00:21:02,720 --> 00:21:08,840
that's the idea that<font color="#E5E5E5"> there's parts of</font>

493
00:21:05,840 --> 00:21:11,899
that that<font color="#E5E5E5"> run automatically and you can</font>

494
00:21:08,840 --> 00:21:14,449
<font color="#CCCCCC">usually override for special cases in</font>

495
00:21:11,899 --> 00:21:16,010
<font color="#CCCCCC">there as well so</font><font color="#E5E5E5"> remember</font><font color="#CCCCCC"> how I said we</font>

496
00:21:14,450 --> 00:21:17,630
<font color="#E5E5E5">have the right</font><font color="#CCCCCC"> object and you just</font>

497
00:21:16,010 --> 00:21:18,980
basically<font color="#E5E5E5"> say hey yeah take this object</font>

498
00:21:17,630 --> 00:21:20,269
and<font color="#CCCCCC"> just write it</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the stream</font>

499
00:21:18,980 --> 00:21:22,549
however you're supposed to do that<font color="#CCCCCC"> and</font>

500
00:21:20,269 --> 00:21:24,289
Java just figures it out or<font color="#E5E5E5"> PHP just</font>

501
00:21:22,549 --> 00:21:27,230
figures it out automatically<font color="#E5E5E5"> you don't</font>

502
00:21:24,289 --> 00:21:29,750
<font color="#E5E5E5">have to do anything else</font><font color="#CCCCCC"> now there was</font>

503
00:21:27,230 --> 00:21:32,210
always special circumstances when you're

504
00:21:29,750 --> 00:21:34,370
<font color="#CCCCCC">writing code developer will find hey you</font>

505
00:21:32,210 --> 00:21:36,019
know I'm I'm<font color="#E5E5E5"> trying to read this</font><font color="#CCCCCC"> object</font>

506
00:21:34,370 --> 00:21:38,059
in but I<font color="#CCCCCC"> need to go fetch this other</font>

507
00:21:36,019 --> 00:21:39,769
resource that<font color="#E5E5E5"> wasn't available when</font><font color="#CCCCCC"> I</font>

508
00:21:38,059 --> 00:21:41,990
saved it<font color="#E5E5E5"> but I need</font><font color="#CCCCCC"> it again or I need</font>

509
00:21:39,769 --> 00:21:44,840
<font color="#E5E5E5">to validate something or whatever</font><font color="#CCCCCC"> and so</font>

510
00:21:41,990 --> 00:21:46,760
every<font color="#CCCCCC"> language that does this</font><font color="#E5E5E5"> also has</font>

511
00:21:44,840 --> 00:21:50,269
this concept of<font color="#E5E5E5"> these magic functions</font>

512
00:21:46,760 --> 00:21:51,559
<font color="#E5E5E5">and in PHP there's two magic functions</font>

513
00:21:50,269 --> 00:21:53,250
there's actually more<font color="#CCCCCC"> than two but these</font>

514
00:21:51,559 --> 00:21:56,940
two that we're concerned<font color="#E5E5E5"> with</font>

515
00:21:53,250 --> 00:21:59,670
our sleep<font color="#E5E5E5"> and wake</font><font color="#CCCCCC"> up so sleep</font><font color="#E5E5E5"> gets</font>

516
00:21:56,940 --> 00:22:02,610
called<font color="#E5E5E5"> automatically when you serialize</font>

517
00:21:59,670 --> 00:22:04,440
an object and wake up<font color="#E5E5E5"> course gets called</font>

518
00:22:02,610 --> 00:22:07,770
automatically<font color="#E5E5E5"> when you do serialize an</font>

519
00:22:04,440 --> 00:22:09,570
object<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so you have your stream</font>

520
00:22:07,770 --> 00:22:11,700
blob whatever and when you deserialize

521
00:22:09,570 --> 00:22:13,679
it<font color="#E5E5E5"> if there's any objects in there the</font>

522
00:22:11,700 --> 00:22:19,080
<font color="#E5E5E5">wakeup function for those objects is</font>

523
00:22:13,680 --> 00:22:23,670
gonna be called okay so our vulnerable

524
00:22:19,080 --> 00:22:26,550
class<font color="#CCCCCC"> I kept it as simple</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> possible it</font>

525
00:22:23,670 --> 00:22:28,650
has<font color="#E5E5E5"> one of these magic functions it</font><font color="#CCCCCC"> has</font>

526
00:22:26,550 --> 00:22:31,110
a<font color="#CCCCCC"> wakeup function so</font><font color="#E5E5E5"> that means upon D</font>

527
00:22:28,650 --> 00:22:32,790
serialization<font color="#CCCCCC"> if I have this type of</font>

528
00:22:31,110 --> 00:22:34,530
<font color="#E5E5E5">object in there it's going to get the</font>

529
00:22:32,790 --> 00:22:35,850
wakeup function is<font color="#E5E5E5"> going to call and in</font>

530
00:22:34,530 --> 00:22:38,550
this case the wakeup function does

531
00:22:35,850 --> 00:22:42,570
<font color="#CCCCCC">something really</font><font color="#E5E5E5"> dumb</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I've run into</font>

532
00:22:38,550 --> 00:22:45,600
<font color="#E5E5E5">this developers do dumb things</font><font color="#CCCCCC"> so if is</font>

533
00:22:42,570 --> 00:22:46,800
set<font color="#E5E5E5"> if so if the the hook</font><font color="#CCCCCC"> parameter has</font>

534
00:22:45,600 --> 00:22:49,709
been set then we're just going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> call</font>

535
00:22:46,800 --> 00:22:51,270
eval<font color="#CCCCCC"> on whatever</font><font color="#E5E5E5"> that is now in this</font>

536
00:22:49,710 --> 00:22:53,730
case here<font color="#CCCCCC"> our developer thought they</font>

537
00:22:51,270 --> 00:22:56,520
were<font color="#E5E5E5"> being clever</font><font color="#CCCCCC"> because hope actually</font>

538
00:22:53,730 --> 00:22:57,960
is private<font color="#CCCCCC"> it's declared as private</font><font color="#E5E5E5"> for</font>

539
00:22:56,520 --> 00:23:00,180
those of you who are not<font color="#CCCCCC"> that</font><font color="#E5E5E5"> familiar</font>

540
00:22:57,960 --> 00:23:02,760
with<font color="#E5E5E5"> object-oriented design usually</font>

541
00:23:00,180 --> 00:23:04,920
private means it's only<font color="#E5E5E5"> available</font><font color="#CCCCCC"> from</font>

542
00:23:02,760 --> 00:23:06,540
inside that class<font color="#CCCCCC"> you can't call</font><font color="#E5E5E5"> it from</font>

543
00:23:04,920 --> 00:23:11,340
<font color="#E5E5E5">outside you can't get a handle on to</font>

544
00:23:06,540 --> 00:23:14,879
that and<font color="#E5E5E5"> do</font><font color="#CCCCCC"> anything with it usually so</font>

545
00:23:11,340 --> 00:23:19,679
going back<font color="#CCCCCC"> to the D serialization</font><font color="#E5E5E5"> of the</font>

546
00:23:14,880 --> 00:23:21,960
ticket<font color="#CCCCCC"> we had this basic C</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> decode</font>

547
00:23:19,680 --> 00:23:24,510
and then we have this<font color="#CCCCCC"> unsterilized</font><font color="#E5E5E5"> so</font>

548
00:23:21,960 --> 00:23:26,310
the question is is it<font color="#CCCCCC"> possible</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> put</font>

549
00:23:24,510 --> 00:23:28,650
<font color="#E5E5E5">something else in there other than the</font>

550
00:23:26,310 --> 00:23:30,510
array that<font color="#CCCCCC"> it's expecting and the answer</font>

551
00:23:28,650 --> 00:23:34,350
is<font color="#E5E5E5"> yes of course it is otherwise it</font>

552
00:23:30,510 --> 00:23:36,600
wouldn't be here<font color="#CCCCCC"> doing this talk so</font><font color="#E5E5E5"> so</font>

553
00:23:34,350 --> 00:23:38,760
how do we do<font color="#E5E5E5"> that we have</font><font color="#CCCCCC"> to create an</font>

554
00:23:36,600 --> 00:23:40,320
object<font color="#CCCCCC"> alright we have to create one of</font>

555
00:23:38,760 --> 00:23:41,340
<font color="#E5E5E5">those vulnerable objects in there and</font>

556
00:23:40,320 --> 00:23:45,300
then we<font color="#CCCCCC"> have to inject</font><font color="#E5E5E5"> it</font>

557
00:23:41,340 --> 00:23:48,209
so<font color="#CCCCCC"> I created a tool in PHP for creating</font>

558
00:23:45,300 --> 00:23:52,500
this type<font color="#CCCCCC"> of object and it should</font>

559
00:23:48,210 --> 00:23:56,430
actually<font color="#E5E5E5"> work on for anything</font><font color="#CCCCCC"> probably I</font>

560
00:23:52,500 --> 00:24:02,970
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> we'll see</font><font color="#CCCCCC"> and and what it's</font>

561
00:23:56,430 --> 00:24:05,730
doing is it's taking<font color="#CCCCCC"> the the class that</font>

562
00:24:02,970 --> 00:24:07,200
I want to create and notice that I'm

563
00:24:05,730 --> 00:24:10,270
<font color="#E5E5E5">only referencing it as a</font>

564
00:24:07,200 --> 00:24:12,700
so I think<font color="#CCCCCC"> hang on I have yo I have a</font>

565
00:24:10,270 --> 00:24:15,780
mouse<font color="#E5E5E5"> okay so right here only</font>

566
00:24:12,700 --> 00:24:15,780
<font color="#E5E5E5">referencing</font><font color="#CCCCCC"> has a string</font>

567
00:24:15,910 --> 00:24:21,490
vulnerable<font color="#E5E5E5"> so I I'm ignoring the fact</font>

568
00:24:19,510 --> 00:24:23,290
<font color="#CCCCCC">that this is an object-oriented language</font>

569
00:24:21,490 --> 00:24:24,880
and I have strong typing available to me

570
00:24:23,290 --> 00:24:27,940
and<font color="#CCCCCC"> I'm circumventing that with some</font>

571
00:24:24,880 --> 00:24:30,150
other mechanism called reflection and

572
00:24:27,940 --> 00:24:33,340
<font color="#E5E5E5">I'll get more</font><font color="#CCCCCC"> into that in a minute</font>

573
00:24:30,150 --> 00:24:37,960
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> so then I am getting the hook</font>

574
00:24:33,340 --> 00:24:40,600
property again<font color="#E5E5E5"> out of that object and</font>

575
00:24:37,960 --> 00:24:42,030
I'm<font color="#E5E5E5"> setting</font><font color="#CCCCCC"> accesible to</font><font color="#E5E5E5"> true does</font>

576
00:24:40,600 --> 00:24:44,949
anybody know what<font color="#E5E5E5"> that does</font>

577
00:24:42,030 --> 00:24:47,080
remember how is<font color="#CCCCCC"> I we had that private</font>

578
00:24:44,950 --> 00:24:49,150
<font color="#E5E5E5">keyword on there well this basically</font>

579
00:24:47,080 --> 00:24:50,740
gets rid<font color="#CCCCCC"> of it it says</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> nevermind we</font>

580
00:24:49,150 --> 00:24:53,860
can go ahead<font color="#E5E5E5"> and access that</font><font color="#CCCCCC"> variable</font>

581
00:24:50,740 --> 00:24:56,860
now<font color="#CCCCCC"> so now I can create</font><font color="#E5E5E5"> an instance of</font>

582
00:24:53,860 --> 00:25:00,969
it<font color="#E5E5E5"> and this is the one place actually</font>

583
00:24:56,860 --> 00:25:06,850
<font color="#E5E5E5">where PHP isn't so strongly typed</font><font color="#CCCCCC"> and</font>

584
00:25:00,970 --> 00:25:09,160
then I can set the value on<font color="#CCCCCC"> my property</font>

585
00:25:06,850 --> 00:25:10,840
<font color="#CCCCCC">and</font><font color="#E5E5E5"> I'm just</font><font color="#CCCCCC"> going to give it PHP info</font>

586
00:25:09,160 --> 00:25:12,640
that's something that's<font color="#CCCCCC"> very obvious</font><font color="#E5E5E5"> in</font>

587
00:25:10,840 --> 00:25:15,550
a<font color="#E5E5E5"> PHP applications to show that you're</font>

588
00:25:12,640 --> 00:25:17,590
able<font color="#E5E5E5"> to execute other stuff and I'm</font>

589
00:25:15,550 --> 00:25:18,879
<font color="#E5E5E5">gonna basically for</font><font color="#CCCCCC"> encode that</font><font color="#E5E5E5"> so now I</font>

590
00:25:17,590 --> 00:25:19,360
have my string back and move on from

591
00:25:18,880 --> 00:25:22,650
<font color="#CCCCCC">there</font>

592
00:25:19,360 --> 00:25:34,689
<font color="#E5E5E5">all right so let's take a look at this</font>

593
00:25:22,650 --> 00:25:36,700
hopefully working<font color="#E5E5E5"> all right so here's</font>

594
00:25:34,690 --> 00:25:37,900
<font color="#E5E5E5">the tool and</font><font color="#CCCCCC"> I actually</font><font color="#E5E5E5"> modified it</font>

595
00:25:36,700 --> 00:25:39,370
afterwards I made it a little<font color="#CCCCCC"> more</font>

596
00:25:37,900 --> 00:25:43,510
parameterised so we could put other

597
00:25:39,370 --> 00:25:45,969
<font color="#CCCCCC">things in here if you wanted to</font><font color="#E5E5E5"> and when</font>

598
00:25:43,510 --> 00:25:48,910
I submit this<font color="#E5E5E5"> it pulls out that</font><font color="#CCCCCC"> together</font>

599
00:25:45,970 --> 00:25:51,070
it sets the accessible<font color="#E5E5E5"> flag it sets the</font>

600
00:25:48,910 --> 00:25:54,670
hook and then<font color="#E5E5E5"> generates the</font><font color="#CCCCCC"> base64</font>

601
00:25:51,070 --> 00:25:56,730
encoded stuff okay I'm going<font color="#E5E5E5"> to copy</font>

602
00:25:54,670 --> 00:26:00,370
that

603
00:25:56,730 --> 00:26:03,100
<font color="#CCCCCC">and then I'm</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go back to where</font>

604
00:26:00,370 --> 00:26:09,459
I'm submitting<font color="#E5E5E5"> the ticket and if it</font>

605
00:26:03,100 --> 00:26:12,159
works we got PHP info right so<font color="#E5E5E5"> very</font>

606
00:26:09,460 --> 00:26:14,200
simple demonstration of how we're<font color="#CCCCCC"> able</font>

607
00:26:12,160 --> 00:26:16,660
<font color="#E5E5E5">to take now we have this different</font>

608
00:26:14,200 --> 00:26:18,250
serialized<font color="#E5E5E5"> value on here this looks</font>

609
00:26:16,660 --> 00:26:20,620
nothing like the<font color="#E5E5E5"> array we passed in the</font>

610
00:26:18,250 --> 00:26:21,010
<font color="#CCCCCC">first time</font><font color="#E5E5E5"> in this case here we're</font>

611
00:26:20,620 --> 00:26:23,560
<font color="#E5E5E5">actually</font>

612
00:26:21,010 --> 00:26:26,500
specifying the object<font color="#E5E5E5"> that we made up</font>

613
00:26:23,560 --> 00:26:29,110
and put in there<font color="#CCCCCC"> so</font><font color="#E5E5E5"> we're you're gonna</font>

614
00:26:26,500 --> 00:26:31,930
run into<font color="#E5E5E5"> this sort of thing is if you</font>

615
00:26:29,110 --> 00:26:34,659
have a<font color="#E5E5E5"> PHP application and it's</font>

616
00:26:31,930 --> 00:26:37,900
including any files<font color="#E5E5E5"> that are are</font>

617
00:26:34,660 --> 00:26:39,160
handling<font color="#E5E5E5"> any files that have magic</font>

618
00:26:37,900 --> 00:26:41,080
functions in them<font color="#E5E5E5"> that get called</font>

619
00:26:39,160 --> 00:26:45,700
automatically<font color="#E5E5E5"> during</font><font color="#CCCCCC"> C serialization or</font>

620
00:26:41,080 --> 00:26:48,159
serialization<font color="#E5E5E5"> and you have serialized</font>

621
00:26:45,700 --> 00:26:49,890
objects of any type being shipped<font color="#E5E5E5"> back</font>

622
00:26:48,160 --> 00:26:53,230
<font color="#E5E5E5">and forth between the client the server</font>

623
00:26:49,890 --> 00:26:58,570
then there's the opportunity<font color="#CCCCCC"> maybe to</font>

624
00:26:53,230 --> 00:27:03,850
<font color="#CCCCCC">make this</font><font color="#E5E5E5"> word make sense they lose</font>

625
00:26:58,570 --> 00:27:07,300
everybody cool<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> so it is highly</font>

626
00:27:03,850 --> 00:27:08,980
contrived<font color="#E5E5E5"> in PHP</font><font color="#CCCCCC"> it's there's a</font><font color="#E5E5E5"> lot of</font>

627
00:27:07,300 --> 00:27:11,020
it's sort of a corner case you know it's

628
00:27:08,980 --> 00:27:13,420
gonna<font color="#E5E5E5"> be really hard</font><font color="#CCCCCC"> to for all the</font>

629
00:27:11,020 --> 00:27:15,550
stars to align<font color="#E5E5E5"> because of the fact that</font>

630
00:27:13,420 --> 00:27:17,320
<font color="#CCCCCC">it's templating language which</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> you</font>

631
00:27:15,550 --> 00:27:19,000
only have what Evers in scope<font color="#E5E5E5"> so it's</font>

632
00:27:17,320 --> 00:27:21,669
<font color="#CCCCCC">only whatever</font><font color="#E5E5E5"> you've</font><font color="#CCCCCC"> included that's</font>

633
00:27:19,000 --> 00:27:25,270
<font color="#CCCCCC">available in any given PHP file when you</font>

634
00:27:21,670 --> 00:27:29,050
<font color="#E5E5E5">run it</font><font color="#CCCCCC"> in Java on the other hand things</font>

635
00:27:25,270 --> 00:27:31,330
are different<font color="#E5E5E5"> because we have a job of</font>

636
00:27:29,050 --> 00:27:34,510
<font color="#CCCCCC">people out there some some</font><font color="#E5E5E5"> of you yeah</font>

637
00:27:31,330 --> 00:27:37,330
<font color="#E5E5E5">so in Java you have access to anything</font>

638
00:27:34,510 --> 00:27:39,730
<font color="#E5E5E5">in the class path so for those</font><font color="#CCCCCC"> of us who</font>

639
00:27:37,330 --> 00:27:41,439
have done<font color="#E5E5E5"> web applications that's lots</font>

640
00:27:39,730 --> 00:27:44,500
and lots and<font color="#E5E5E5"> lots of stuff usually the</font>

641
00:27:41,440 --> 00:27:47,350
class path ends up being huge and from

642
00:27:44,500 --> 00:27:49,840
from any point<font color="#CCCCCC"> inside of a java</font>

643
00:27:47,350 --> 00:27:56,350
application<font color="#E5E5E5"> you can access anything in</font>

644
00:27:49,840 --> 00:27:58,360
the class path so the the reason all<font color="#CCCCCC"> of</font>

645
00:27:56,350 --> 00:28:00,850
this works<font color="#CCCCCC"> so well and why we've had</font><font color="#E5E5E5"> so</font>

646
00:27:58,360 --> 00:28:02,229
many<font color="#CCCCCC"> java d serialization issues is</font>

647
00:28:00,850 --> 00:28:05,530
<font color="#CCCCCC">because of another language feature</font>

648
00:28:02,230 --> 00:28:08,230
called reflection this<font color="#E5E5E5"> is part of object</font>

649
00:28:05,530 --> 00:28:10,840
<font color="#E5E5E5">oriented languages as</font><font color="#CCCCCC"> well because</font>

650
00:28:08,230 --> 00:28:12,400
what's happened is without reflection

651
00:28:10,840 --> 00:28:15,010
<font color="#CCCCCC">let me just go through an</font><font color="#E5E5E5"> example here</font>

652
00:28:12,400 --> 00:28:19,540
<font color="#E5E5E5">so without reflection everything's</font>

653
00:28:15,010 --> 00:28:24,220
<font color="#E5E5E5">strongly typed</font><font color="#CCCCCC"> okay so if I want to</font>

654
00:28:19,540 --> 00:28:29,320
create and fill a keg of<font color="#E5E5E5"> ale I need to</font>

655
00:28:24,220 --> 00:28:31,180
create<font color="#E5E5E5"> an ale object create a keg object</font>

656
00:28:29,320 --> 00:28:32,620
and<font color="#E5E5E5"> notice that they're strongly typed</font>

657
00:28:31,180 --> 00:28:34,630
and what<font color="#E5E5E5"> I mean by that is see how it</font>

658
00:28:32,620 --> 00:28:34,929
defines<font color="#E5E5E5"> the class right in front of the</font>

659
00:28:34,630 --> 00:28:37,510
very

660
00:28:34,930 --> 00:28:40,210
right it's<font color="#CCCCCC"> that capital K capital K on</font>

661
00:28:37,510 --> 00:28:43,960
the keg<font color="#CCCCCC"> I'm defining</font><font color="#E5E5E5"> that the keg is of</font>

662
00:28:40,210 --> 00:28:46,330
type<font color="#E5E5E5"> class of type keg class has to be</font>

663
00:28:43,960 --> 00:28:49,030
if you don't it's<font color="#E5E5E5"> gonna fail during</font>

664
00:28:46,330 --> 00:28:53,320
compilation<font color="#CCCCCC"> if you put something</font><font color="#E5E5E5"> else in</font>

665
00:28:49,030 --> 00:28:55,990
<font color="#CCCCCC">there when you create it okay and</font><font color="#E5E5E5"> then I</font>

666
00:28:53,320 --> 00:28:58,139
<font color="#E5E5E5">can fill it with</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> ale and fill fill</font>

667
00:28:55,990 --> 00:29:00,730
works with any liquid<font color="#E5E5E5"> which includes ale</font>

668
00:28:58,140 --> 00:29:04,300
<font color="#E5E5E5">right we define that in our class</font>

669
00:29:00,730 --> 00:29:06,040
diagram earlier<font color="#CCCCCC"> so again if we tried to</font>

670
00:29:04,300 --> 00:29:08,830
fill it with<font color="#CCCCCC"> something</font><font color="#E5E5E5"> other than a</font>

671
00:29:06,040 --> 00:29:10,750
<font color="#E5E5E5">liquid it would break during compilation</font>

672
00:29:08,830 --> 00:29:13,870
<font color="#CCCCCC">it won't even let you compile the file</font>

673
00:29:10,750 --> 00:29:20,620
so it it's a strong typing basically

674
00:29:13,870 --> 00:29:23,649
<font color="#E5E5E5">prevents you from making mistakes</font><font color="#CCCCCC"> go</font>

675
00:29:20,620 --> 00:29:25,629
here<font color="#E5E5E5"> okay so we can do the exact same</font>

676
00:29:23,650 --> 00:29:28,510
<font color="#E5E5E5">thing I just did</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> using reflection</font>

677
00:29:25,630 --> 00:29:30,730
<font color="#CCCCCC">inside</font><font color="#E5E5E5"> of Java so Java has</font><font color="#CCCCCC"> it's a</font>

678
00:29:28,510 --> 00:29:33,210
sometimes also called introspection

679
00:29:30,730 --> 00:29:37,600
<font color="#CCCCCC">they're not</font><font color="#E5E5E5"> exactly the same</font><font color="#CCCCCC"> thing but</font>

680
00:29:33,210 --> 00:29:40,270
reflection with reflection<font color="#E5E5E5"> look at this</font>

681
00:29:37,600 --> 00:29:42,129
look at the the code<font color="#E5E5E5"> that's on there now</font>

682
00:29:40,270 --> 00:29:45,430
and<font color="#E5E5E5"> you will see</font><font color="#CCCCCC"> that no we're on</font><font color="#E5E5E5"> here</font>

683
00:29:42,130 --> 00:29:47,770
am<font color="#CCCCCC"> I using any of the types for the the</font>

684
00:29:45,430 --> 00:29:49,810
class system<font color="#E5E5E5"> that I built liquid is not</font>

685
00:29:47,770 --> 00:29:53,200
on there<font color="#E5E5E5"> ale isn't on there keg isn't on</font>

686
00:29:49,810 --> 00:29:56,080
there<font color="#E5E5E5"> except as strings</font><font color="#CCCCCC"> everything's</font><font color="#E5E5E5"> a</font>

687
00:29:53,200 --> 00:30:00,130
string literal<font color="#CCCCCC"> so the only classes I</font><font color="#E5E5E5"> am</font>

688
00:29:56,080 --> 00:30:02,080
defining our class so I'm using the

689
00:30:00,130 --> 00:30:04,090
class class which I know it sounds weird

690
00:30:02,080 --> 00:30:07,770
<font color="#E5E5E5">but that's the way it works</font>

691
00:30:04,090 --> 00:30:11,560
and I said build a class for a<font color="#E5E5E5"> named keg</font>

692
00:30:07,770 --> 00:30:13,480
<font color="#E5E5E5">then I'm saying okay well now that</font><font color="#CCCCCC"> we</font>

693
00:30:11,560 --> 00:30:16,659
have<font color="#CCCCCC"> one of those</font><font color="#E5E5E5"> create a new instance</font>

694
00:30:13,480 --> 00:30:21,160
<font color="#E5E5E5">of an object with that and again</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> still</font>

695
00:30:16,660 --> 00:30:23,860
have not<font color="#E5E5E5"> used these strong typing then</font>

696
00:30:21,160 --> 00:30:26,230
I'm<font color="#E5E5E5"> gonna create the method fill I would</font>

697
00:30:23,860 --> 00:30:29,080
set up<font color="#E5E5E5"> some arguments and then call</font>

698
00:30:26,230 --> 00:30:31,600
method invoke on that<font color="#CCCCCC"> object so the</font>

699
00:30:29,080 --> 00:30:33,129
arguments whatever I've defined it<font color="#CCCCCC"> that</font>

700
00:30:31,600 --> 00:30:36,550
will<font color="#CCCCCC"> actually run</font><font color="#E5E5E5"> that function call</font>

701
00:30:33,130 --> 00:30:43,300
it'll run<font color="#E5E5E5"> fill because that's that's the</font>

702
00:30:36,550 --> 00:30:45,010
method<font color="#CCCCCC"> that we've defined</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so what</font>

703
00:30:43,300 --> 00:30:47,139
we've<font color="#E5E5E5"> done</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is we've</font><font color="#CCCCCC"> taken a</font>

704
00:30:45,010 --> 00:30:48,370
language that had this really<font color="#E5E5E5"> great</font>

705
00:30:47,140 --> 00:30:52,419
feature on<font color="#E5E5E5"> there in</font>

706
00:30:48,370 --> 00:30:56,080
strong typed and we basically<font color="#CCCCCC"> threw that</font>

707
00:30:52,419 --> 00:30:58,630
<font color="#CCCCCC">out the</font><font color="#E5E5E5"> window is it okay let's not do</font>

708
00:30:56,080 --> 00:31:00,189
<font color="#CCCCCC">that well and in fact</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we what we</font>

709
00:30:58,630 --> 00:31:02,169
<font color="#CCCCCC">happen here what happens here is</font>

710
00:31:00,190 --> 00:31:03,610
developers basically said<font color="#CCCCCC"> okay well I</font>

711
00:31:02,169 --> 00:31:06,460
know<font color="#E5E5E5"> it's strong typed and that's really</font>

712
00:31:03,610 --> 00:31:08,469
cool but<font color="#E5E5E5"> it would be really awesome if I</font>

713
00:31:06,460 --> 00:31:11,470
could<font color="#CCCCCC"> make it so I could make my</font>

714
00:31:08,470 --> 00:31:14,140
<font color="#CCCCCC">application run anything</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> I could</font>

715
00:31:11,470 --> 00:31:15,250
just run like arbitrary stuff and<font color="#E5E5E5"> send</font>

716
00:31:14,140 --> 00:31:17,370
it to<font color="#CCCCCC"> it that</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> really cool</font>

717
00:31:15,250 --> 00:31:20,200
<font color="#E5E5E5">because then I don't</font><font color="#CCCCCC"> have to recompile</font>

718
00:31:17,370 --> 00:31:22,750
<font color="#E5E5E5">that would be awesome</font><font color="#CCCCCC"> wouldn't it and of</font>

719
00:31:20,200 --> 00:31:26,710
<font color="#E5E5E5">course us being security people look at</font>

720
00:31:22,750 --> 00:31:29,200
that<font color="#E5E5E5"> go yeah it would be awesome so and</font>

721
00:31:26,710 --> 00:31:31,809
<font color="#E5E5E5">that you know that's exactly what leads</font>

722
00:31:29,200 --> 00:31:33,549
us to this this problem<font color="#E5E5E5"> so if you if</font>

723
00:31:31,809 --> 00:31:35,049
you've looked at<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Y</font><font color="#E5E5E5"> so serial stuff</font>

724
00:31:33,549 --> 00:31:36,908
before you you will<font color="#CCCCCC"> have run into this</font>

725
00:31:35,049 --> 00:31:39,039
term called<font color="#E5E5E5"> a gadget chain because</font>

726
00:31:36,909 --> 00:31:43,960
that's one<font color="#E5E5E5"> of the main things</font><font color="#CCCCCC"> that came</font>

727
00:31:39,039 --> 00:31:45,340
out of<font color="#E5E5E5"> the Apache Jakarta Commons</font>

728
00:31:43,960 --> 00:31:47,919
collections<font color="#CCCCCC"> api ensign</font><font color="#E5E5E5"> long is a</font>

729
00:31:45,340 --> 00:31:50,260
mouthful<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Commons collections API</font>

730
00:31:47,919 --> 00:31:52,179
<font color="#E5E5E5">that's a vulnerable library one of</font>

731
00:31:50,260 --> 00:31:54,309
several vulnerable libraries that<font color="#E5E5E5"> do</font>

732
00:31:52,179 --> 00:31:59,350
<font color="#E5E5E5">this</font><font color="#CCCCCC"> sort of thing and so what I</font><font color="#E5E5E5"> created</font>

733
00:31:54,309 --> 00:32:01,690
here is a a<font color="#E5E5E5"> basically mocked up a</font>

734
00:31:59,350 --> 00:32:03,399
simplified<font color="#CCCCCC"> version of a gadget chain so</font>

735
00:32:01,690 --> 00:32:06,029
it's it's a<font color="#E5E5E5"> little easier to understand</font>

736
00:32:03,399 --> 00:32:11,799
but it<font color="#CCCCCC"> basically does the same thing</font>

737
00:32:06,029 --> 00:32:15,789
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> so if you consider key value pairs</font>

738
00:32:11,799 --> 00:32:19,870
so just like a dictionary<font color="#E5E5E5"> or a hash map</font>

739
00:32:15,789 --> 00:32:22,779
or<font color="#E5E5E5"> whatever except that they</font><font color="#CCCCCC"> are set up</font>

740
00:32:19,870 --> 00:32:25,479
for<font color="#E5E5E5"> the basically the the elements that</font>

741
00:32:22,779 --> 00:32:26,919
you need<font color="#E5E5E5"> to call a function somewhere</font><font color="#CCCCCC"> so</font>

742
00:32:25,480 --> 00:32:29,529
you have method parameter types

743
00:32:26,919 --> 00:32:32,260
parameters<font color="#E5E5E5"> classes each of them defined</font>

744
00:32:29,529 --> 00:32:33,820
as so the key is a method<font color="#E5E5E5"> and then you</font>

745
00:32:32,260 --> 00:32:35,470
give<font color="#CCCCCC"> it the</font><font color="#E5E5E5"> name</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the method the</font>

746
00:32:33,820 --> 00:32:37,870
parameter types would<font color="#E5E5E5"> be it would tell</font>

747
00:32:35,470 --> 00:32:40,090
you which parameters you need<font color="#E5E5E5"> parameters</font>

748
00:32:37,870 --> 00:32:41,500
<font color="#E5E5E5">themselves is going to be a list of what</font>

749
00:32:40,090 --> 00:32:43,209
the values are you're gonna pass in

750
00:32:41,500 --> 00:32:43,750
there<font color="#E5E5E5"> the class would</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> the name</font><font color="#CCCCCC"> of the</font>

751
00:32:43,210 --> 00:32:46,210
class

752
00:32:43,750 --> 00:32:48,190
all of these are by name<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> it's</font>

753
00:32:46,210 --> 00:32:48,940
string key value pairs is what I'm

754
00:32:48,190 --> 00:32:51,250
talking about

755
00:32:48,940 --> 00:32:53,649
<font color="#E5E5E5">that is is what makes up our gadget</font>

756
00:32:51,250 --> 00:32:57,730
chain and we can chain<font color="#CCCCCC"> multiple of those</font>

757
00:32:53,649 --> 00:33:00,010
together<font color="#E5E5E5"> in order to with some clever</font>

758
00:32:57,730 --> 00:33:01,600
logic on the<font color="#E5E5E5"> back end which is that's</font>

759
00:33:00,010 --> 00:33:02,169
what<font color="#E5E5E5"> we find inside those vulnerable</font>

760
00:33:01,600 --> 00:33:05,379
libraries

761
00:33:02,169 --> 00:33:10,330
to actually<font color="#CCCCCC"> do</font><font color="#E5E5E5"> stuff to make it execute</font>

762
00:33:05,379 --> 00:33:13,570
just about anything okay so the goal

763
00:33:10,330 --> 00:33:14,739
<font color="#E5E5E5">that I have here I was gonna start off</font>

764
00:33:13,570 --> 00:33:16,359
with<font color="#E5E5E5"> well why don't I</font><font color="#CCCCCC"> just you know why</font>

765
00:33:14,739 --> 00:33:18,100
<font color="#CCCCCC">don't i execute something on the command</font>

766
00:33:16,359 --> 00:33:19,600
<font color="#CCCCCC">line</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> i actually</font><font color="#E5E5E5"> tried that first and</font>

767
00:33:18,100 --> 00:33:22,719
it failed inside of my vagrant

768
00:33:19,600 --> 00:33:25,449
environment that<font color="#E5E5E5"> i'd set up for this</font><font color="#CCCCCC"> and</font>

769
00:33:22,720 --> 00:33:28,269
it turns out the reason<font color="#E5E5E5"> is because the</font>

770
00:33:25,450 --> 00:33:31,450
<font color="#E5E5E5">default version of</font><font color="#CCCCCC"> tomcat that gets</font>

771
00:33:28,269 --> 00:33:33,999
installed<font color="#E5E5E5"> with app get on ubuntu</font><font color="#CCCCCC"> it</font>

772
00:33:31,450 --> 00:33:37,480
<font color="#E5E5E5">actually set up</font><font color="#CCCCCC"> a security profile on</font>

773
00:33:33,999 --> 00:33:39,009
there that prevents execution<font color="#CCCCCC"> by default</font>

774
00:33:37,480 --> 00:33:40,389
and<font color="#E5E5E5"> i was like okay i could disable that</font>

775
00:33:39,009 --> 00:33:42,940
because<font color="#E5E5E5"> in a lot of systems it's not</font>

776
00:33:40,389 --> 00:33:44,408
<font color="#CCCCCC">enabled so but let's go with something</font>

777
00:33:42,940 --> 00:33:45,999
<font color="#CCCCCC">that we know works</font><font color="#E5E5E5"> that I can still</font>

778
00:33:44,409 --> 00:33:47,619
demonstrate and I'm also running<font color="#E5E5E5"> a</font>

779
00:33:45,999 --> 00:33:49,779
little bit short on time so<font color="#CCCCCC"> I want to</font>

780
00:33:47,619 --> 00:33:53,080
<font color="#E5E5E5">make</font><font color="#CCCCCC"> sure that you know we have</font>

781
00:33:49,779 --> 00:33:54,460
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that we can see easily</font><font color="#E5E5E5"> so what</font>

782
00:33:53,080 --> 00:33:58,779
we're gonna do here is<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> going to do</font>

783
00:33:54,460 --> 00:34:00,190
thread current thread and then step two

784
00:33:58,779 --> 00:34:07,749
is we're gonna make<font color="#E5E5E5"> it sleep for five</font>

785
00:34:00,190 --> 00:34:16,480
seconds<font color="#CCCCCC"> so very simple</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> so we</font>

786
00:34:07,749 --> 00:34:19,119
have<font color="#E5E5E5"> let me</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> write okay so here is</font>

787
00:34:16,480 --> 00:34:24,219
<font color="#E5E5E5">my demo application for</font><font color="#CCCCCC"> this one</font><font color="#E5E5E5"> let me</font>

788
00:34:19,119 --> 00:34:27,490
<font color="#CCCCCC">just refresh</font><font color="#E5E5E5"> this okay so what's</font>

789
00:34:24,219 --> 00:34:30,219
happened is<font color="#E5E5E5"> I've created an object</font>

790
00:34:27,489 --> 00:34:31,928
<font color="#E5E5E5">that's serialized that then put that</font>

791
00:34:30,219 --> 00:34:36,118
that is then put inside of a cookie

792
00:34:31,929 --> 00:34:39,040
<font color="#CCCCCC">value okay so there's our</font><font color="#E5E5E5"> there's our</font>

793
00:34:36,119 --> 00:34:40,659
the object that<font color="#E5E5E5"> it decide what I did</font>

794
00:34:39,040 --> 00:34:43,149
here is is just<font color="#E5E5E5"> so we can see what's</font>

795
00:34:40,659 --> 00:34:46,329
going<font color="#CCCCCC"> on i</font><font color="#E5E5E5"> deserialize it on this page</font>

796
00:34:43,149 --> 00:34:49,649
<font color="#E5E5E5">and then print it out so we have the</font>

797
00:34:46,329 --> 00:34:52,990
object<font color="#CCCCCC"> is in this case is a hash map</font>

798
00:34:49,649 --> 00:34:56,440
that has three values<font color="#E5E5E5"> on it roll</font>

799
00:34:52,989 --> 00:34:57,848
timestamp and<font color="#E5E5E5"> username and then it's</font>

800
00:34:56,440 --> 00:34:59,740
basically<font color="#CCCCCC"> serially that you can</font>

801
00:34:57,849 --> 00:35:02,859
serialize a hash<font color="#E5E5E5"> map just like any other</font>

802
00:34:59,740 --> 00:35:04,959
collection<font color="#E5E5E5"> serialized put into base64</font>

803
00:35:02,859 --> 00:35:08,220
and dropped into a cookie<font color="#CCCCCC"> I have</font><font color="#E5E5E5"> a</font>

804
00:35:04,960 --> 00:35:12,040
cookie editor here so if i refresh<font color="#E5E5E5"> this</font>

805
00:35:08,220 --> 00:35:13,720
we should be<font color="#CCCCCC"> able to go and see the</font>

806
00:35:12,040 --> 00:35:15,609
cookie value<font color="#E5E5E5"> and here it is</font><font color="#CCCCCC"> right here</font>

807
00:35:13,720 --> 00:35:17,919
<font color="#E5E5E5">okay</font>

808
00:35:15,609 --> 00:35:19,989
I know it's probably<font color="#E5E5E5"> not super</font><font color="#CCCCCC"> visible</font>

809
00:35:17,920 --> 00:35:22,150
there and I have it<font color="#E5E5E5"> on some slides later</font>

810
00:35:19,989 --> 00:35:24,579
on that's bigger but one of<font color="#CCCCCC"> the one of</font>

811
00:35:22,150 --> 00:35:26,589
<font color="#E5E5E5">the main telling points</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> any</font><font color="#CCCCCC"> java</font>

812
00:35:24,579 --> 00:35:28,779
serialized object is you have that that

813
00:35:26,589 --> 00:35:31,839
<font color="#CCCCCC">roo at the beginning</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> the little R</font>

814
00:35:28,779 --> 00:35:33,670
the Big O<font color="#CCCCCC"> and the zero so if whenever</font>

815
00:35:31,839 --> 00:35:34,839
<font color="#E5E5E5">you see</font><font color="#CCCCCC"> that that's</font><font color="#E5E5E5"> a serialized</font><font color="#CCCCCC"> java</font>

816
00:35:33,670 --> 00:35:40,950
object so that's<font color="#E5E5E5"> when you start</font>

817
00:35:34,839 --> 00:35:44,049
wondering<font color="#E5E5E5"> hey you know what what's</font>

818
00:35:40,950 --> 00:35:45,129
what's up here<font color="#E5E5E5"> here's a</font><font color="#CCCCCC"> Java serialized</font>

819
00:35:44,049 --> 00:35:50,829
object there's something I can do<font color="#E5E5E5"> with</font>

820
00:35:45,130 --> 00:35:53,319
this<font color="#E5E5E5"> all right so I have my invoker</font>

821
00:35:50,829 --> 00:35:55,329
<font color="#CCCCCC">chained here so this is my</font><font color="#E5E5E5"> my gadget</font>

822
00:35:53,319 --> 00:35:58,690
chain and you<font color="#E5E5E5"> can see that it's</font><font color="#CCCCCC"> doing</font>

823
00:35:55,329 --> 00:36:00,069
what I described before<font color="#CCCCCC"> I don't know</font>

824
00:35:58,690 --> 00:36:01,869
it's a little<font color="#E5E5E5"> bit dark on there but it's</font>

825
00:36:00,069 --> 00:36:04,239
basically the<font color="#CCCCCC"> same stuff that</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> had</font>

826
00:36:01,869 --> 00:36:07,150
before<font color="#E5E5E5"> so I have a</font><font color="#CCCCCC"> hashmap I'm adding</font>

827
00:36:04,239 --> 00:36:10,239
class and<font color="#E5E5E5"> method into that for the</font>

828
00:36:07,150 --> 00:36:12,249
<font color="#E5E5E5">java.lang thread current thread and then</font>

829
00:36:10,239 --> 00:36:14,980
putting<font color="#E5E5E5"> a second element</font><font color="#CCCCCC"> in there for</font>

830
00:36:12,249 --> 00:36:17,618
calling that sleep function<font color="#E5E5E5"> with a value</font>

831
00:36:14,980 --> 00:36:19,809
of<font color="#CCCCCC"> 5,000</font><font color="#E5E5E5"> Milly's and then I'm adding</font>

832
00:36:17,619 --> 00:36:23,849
those all to a list and then serializing

833
00:36:19,809 --> 00:36:23,849
it<font color="#E5E5E5"> so let me just go ahead and run that</font>

834
00:36:24,390 --> 00:36:33,910
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> and so that's created a new make</font>

835
00:36:31,450 --> 00:36:38,489
sure I get<font color="#CCCCCC"> the</font><font color="#E5E5E5"> whole thing</font><font color="#CCCCCC"> okay</font>

836
00:36:33,910 --> 00:36:43,210
that's<font color="#E5E5E5"> creating a new serialized string</font>

837
00:36:38,489 --> 00:36:45,220
<font color="#E5E5E5">that's base64 encoded this one's much</font>

838
00:36:43,210 --> 00:36:48,460
bigger because<font color="#E5E5E5"> there's more a lot more</font>

839
00:36:45,220 --> 00:36:52,720
<font color="#CCCCCC">to it</font><font color="#E5E5E5"> than just a</font><font color="#CCCCCC"> couple</font><font color="#E5E5E5"> of values I'm</font>

840
00:36:48,460 --> 00:36:54,489
<font color="#CCCCCC">gonna copy</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> alright and then I'm</font>

841
00:36:52,720 --> 00:36:58,480
gonna<font color="#E5E5E5"> I just want to refresh</font><font color="#CCCCCC"> this</font>

842
00:36:54,489 --> 00:37:05,710
because I know I have a very<font color="#CCCCCC"> short time</font>

843
00:36:58,480 --> 00:37:09,069
out<font color="#CCCCCC"> on that cookie</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> I have set the</font>

844
00:37:05,710 --> 00:37:11,259
value to<font color="#E5E5E5"> my payload and then when I go</font>

845
00:37:09,069 --> 00:37:13,599
back<font color="#E5E5E5"> to</font><font color="#CCCCCC"> this page if it actually works</font>

846
00:37:11,259 --> 00:37:15,339
when I hit refresh that cookies going<font color="#E5E5E5"> to</font>

847
00:37:13,599 --> 00:37:17,920
load in it's going<font color="#E5E5E5"> to try to deserialize</font>

848
00:37:15,339 --> 00:37:20,619
whatever the object<font color="#CCCCCC"> is and it should</font>

849
00:37:17,920 --> 00:37:27,330
wait<font color="#CCCCCC"> for about 5 seconds before</font><font color="#E5E5E5"> it does</font>

850
00:37:20,619 --> 00:37:28,740
<font color="#E5E5E5">something hopefully yep so it did so</font>

851
00:37:27,330 --> 00:37:30,569
I got a<font color="#CCCCCC"> 500 so you might be wondering</font>

852
00:37:28,740 --> 00:37:31,560
<font color="#E5E5E5">well</font><font color="#CCCCCC"> did it</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> well yeah of course it</font>

853
00:37:30,570 --> 00:37:34,530
did because<font color="#CCCCCC"> it was so waited</font><font color="#E5E5E5"> five</font>

854
00:37:31,560 --> 00:37:36,900
seconds<font color="#E5E5E5"> before it did that</font><font color="#CCCCCC"> so what</font>

855
00:37:34,530 --> 00:37:38,760
happened<font color="#E5E5E5"> here is once it finally did get</font>

856
00:37:36,900 --> 00:37:41,850
<font color="#CCCCCC">to my object it went okay it's a class</font>

857
00:37:38,760 --> 00:37:43,530
cast exception<font color="#E5E5E5"> you you passed in some</font>

858
00:37:41,850 --> 00:37:46,350
weird thing I wasn't expecting

859
00:37:43,530 --> 00:37:47,760
I wanted a hashmap from you so I'm gonna

860
00:37:46,350 --> 00:37:49,770
<font color="#E5E5E5">throw this out on the screen instead</font>

861
00:37:47,760 --> 00:37:56,130
right so that that's<font color="#E5E5E5"> what we get out</font><font color="#CCCCCC"> of</font>

862
00:37:49,770 --> 00:37:58,470
<font color="#E5E5E5">it but the the</font><font color="#CCCCCC"> fact is is that</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> of</font>

863
00:37:56,130 --> 00:37:59,550
<font color="#E5E5E5">Java</font><font color="#CCCCCC"> you you can't get to this point</font>

864
00:37:58,470 --> 00:38:01,770
<font color="#E5E5E5">here where there's a class cast</font>

865
00:37:59,550 --> 00:38:04,560
exception<font color="#CCCCCC"> until after you deserialize</font>

866
00:38:01,770 --> 00:38:06,360
the object so the<font color="#CCCCCC"> deserialization has</font>

867
00:38:04,560 --> 00:38:07,680
already<font color="#CCCCCC"> taken</font><font color="#E5E5E5"> place and any custom code</font>

868
00:38:06,360 --> 00:38:10,200
that's in there has already<font color="#CCCCCC"> been</font>

869
00:38:07,680 --> 00:38:12,480
executed<font color="#CCCCCC"> and that's why we have so many</font>

870
00:38:10,200 --> 00:38:18,240
<font color="#CCCCCC">d serialization</font><font color="#E5E5E5"> flaws out there</font><font color="#CCCCCC"> because</font>

871
00:38:12,480 --> 00:38:20,880
we can't really<font color="#E5E5E5"> get</font><font color="#CCCCCC"> around it it's it's</font>

872
00:38:18,240 --> 00:38:22,129
part of the language<font color="#E5E5E5"> it's it's not it</font>

873
00:38:20,880 --> 00:38:24,330
you know it's part of how

874
00:38:22,130 --> 00:38:26,520
<font color="#CCCCCC">object-oriented languages work it's</font>

875
00:38:24,330 --> 00:38:28,049
baked in and so these types<font color="#E5E5E5"> of flaws are</font>

876
00:38:26,520 --> 00:38:30,000
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> probably going to keep</font>

877
00:38:28,050 --> 00:38:33,630
<font color="#E5E5E5">popping up for a while yet</font>

878
00:38:30,000 --> 00:38:40,650
so there's some solutions that<font color="#CCCCCC"> can work</font>

879
00:38:33,630 --> 00:38:44,010
<font color="#CCCCCC">across</font><font color="#E5E5E5"> any of these</font><font color="#CCCCCC"> one is</font><font color="#E5E5E5"> you can sign</font>

880
00:38:40,650 --> 00:38:46,290
objects right so you could take<font color="#E5E5E5"> the</font>

881
00:38:44,010 --> 00:38:48,540
object serialize<font color="#CCCCCC"> it and then wrap it in</font>

882
00:38:46,290 --> 00:38:51,540
a signature that then get you check

883
00:38:48,540 --> 00:38:52,920
<font color="#E5E5E5">before you DC realize the object</font><font color="#CCCCCC"> alright</font>

884
00:38:51,540 --> 00:38:54,750
<font color="#CCCCCC">so</font><font color="#E5E5E5"> that if you're stuck with</font>

885
00:38:52,920 --> 00:38:56,400
<font color="#E5E5E5">serialization and you want to keep it</font>

886
00:38:54,750 --> 00:38:58,350
there<font color="#E5E5E5"> that's really what you should</font><font color="#CCCCCC"> be</font>

887
00:38:56,400 --> 00:39:00,170
<font color="#CCCCCC">doing that way that you prevented any</font>

888
00:38:58,350 --> 00:39:03,540
<font color="#E5E5E5">tampering with it</font>

889
00:39:00,170 --> 00:39:05,400
option to<font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> / solution just don't</font>

890
00:39:03,540 --> 00:39:06,900
use serialization<font color="#E5E5E5"> serialized objects at</font>

891
00:39:05,400 --> 00:39:11,580
all<font color="#E5E5E5"> replace</font><font color="#CCCCCC"> that with something else</font>

892
00:39:06,900 --> 00:39:13,530
<font color="#E5E5E5">like</font><font color="#CCCCCC"> JSON Jason Jason I guess it's sort</font>

893
00:39:11,580 --> 00:39:15,150
of serialized to<font color="#E5E5E5"> JSON whatever but it's</font>

894
00:39:13,530 --> 00:39:16,860
not object serialization because<font color="#E5E5E5"> it's</font>

895
00:39:15,150 --> 00:39:20,280
<font color="#E5E5E5">not there there shouldn't be any case</font>

896
00:39:16,860 --> 00:39:22,800
where code gets executed<font color="#CCCCCC"> as a result of</font>

897
00:39:20,280 --> 00:39:27,330
taking<font color="#CCCCCC"> a JSON data structure and turning</font>

898
00:39:22,800 --> 00:39:30,330
that into an object structure right so

899
00:39:27,330 --> 00:39:31,980
that's<font color="#CCCCCC"> also</font><font color="#E5E5E5"> Jason's very properly these</font>

900
00:39:30,330 --> 00:39:34,770
days it works<font color="#E5E5E5"> across a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

901
00:39:31,980 --> 00:39:38,160
<font color="#CCCCCC">platforms</font><font color="#E5E5E5"> it's gaining huge amount of</font>

902
00:39:34,770 --> 00:39:39,540
<font color="#E5E5E5">popularity with web services</font><font color="#CCCCCC"> so if</font>

903
00:39:38,160 --> 00:39:40,770
you're not<font color="#E5E5E5"> already working with it then</font>

904
00:39:39,540 --> 00:39:42,540
<font color="#E5E5E5">get used to it</font>

905
00:39:40,770 --> 00:39:44,700
another one promptly patch any

906
00:39:42,540 --> 00:39:46,800
frameworks that<font color="#E5E5E5"> you're using which you</font>

907
00:39:44,700 --> 00:39:48,118
know if you're using<font color="#E5E5E5"> Java with anything</font>

908
00:39:46,800 --> 00:39:51,630
you should definitely be<font color="#E5E5E5"> doing that</font>

909
00:39:48,119 --> 00:39:52,830
there that's<font color="#E5E5E5"> what got Equifax really it</font>

910
00:39:51,630 --> 00:39:53,970
wasn't<font color="#E5E5E5"> the fact</font><font color="#CCCCCC"> that they had that well</font>

911
00:39:52,830 --> 00:39:55,230
yeah it was the fact<font color="#E5E5E5"> they had the flaw</font>

912
00:39:53,970 --> 00:39:56,970
was<font color="#CCCCCC"> the fact they didn't patch it</font>

913
00:39:55,230 --> 00:39:59,750
because there<font color="#E5E5E5"> was a patch available they</font>

914
00:39:56,970 --> 00:40:02,850
just didn't get<font color="#CCCCCC"> to</font><font color="#E5E5E5"> it quickly enough</font><font color="#CCCCCC"> so</font>

915
00:39:59,750 --> 00:40:05,670
<font color="#E5E5E5">and then if there are if you're</font><font color="#CCCCCC"> on in a</font>

916
00:40:02,850 --> 00:40:08,940
situation where you can apply<font color="#CCCCCC"> a security</font>

917
00:40:05,670 --> 00:40:11,130
policy<font color="#CCCCCC"> then do so obviously that will</font>

918
00:40:08,940 --> 00:40:16,560
prevent dangerous behavior should<font color="#E5E5E5"> a</font>

919
00:40:11,130 --> 00:40:18,960
malicious object enter the system<font color="#CCCCCC"> so</font>

920
00:40:16,560 --> 00:40:21,630
<font color="#E5E5E5">takeaways inherent</font><font color="#CCCCCC"> nob jekt oriented</font>

921
00:40:18,960 --> 00:40:22,230
languages<font color="#CCCCCC"> in many languages not just</font>

922
00:40:21,630 --> 00:40:24,300
Java

923
00:40:22,230 --> 00:40:27,930
I think Java is the<font color="#E5E5E5"> first parse the</font>

924
00:40:24,300 --> 00:40:30,000
first place we discovered it really but

925
00:40:27,930 --> 00:40:30,930
I<font color="#E5E5E5"> think it's we're gonna see it in other</font>

926
00:40:30,000 --> 00:40:33,180
<font color="#E5E5E5">places too</font>

927
00:40:30,930 --> 00:40:34,980
there was a dotnet just this week with

928
00:40:33,180 --> 00:40:38,029
<font color="#CCCCCC">ArcSight I think we're probably going</font><font color="#E5E5E5"> to</font>

929
00:40:34,980 --> 00:40:41,760
<font color="#E5E5E5">see</font><font color="#CCCCCC"> more net serialization</font><font color="#E5E5E5"> flaws pop up</font>

930
00:40:38,030 --> 00:40:44,730
<font color="#CCCCCC">it's due to sort of that combination of</font>

931
00:40:41,760 --> 00:40:46,350
the fact that<font color="#E5E5E5"> during that</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> in</font>

932
00:40:44,730 --> 00:40:47,790
every<font color="#CCCCCC"> language there's some kind of</font>

933
00:40:46,350 --> 00:40:51,810
magic function<font color="#E5E5E5"> in there some way of</font>

934
00:40:47,790 --> 00:40:54,950
<font color="#E5E5E5">overriding default behavior</font><font color="#CCCCCC"> so that's</font>

935
00:40:51,810 --> 00:40:58,560
going to<font color="#E5E5E5"> be there along with reflection</font>

936
00:40:54,950 --> 00:41:00,240
right reflection<font color="#E5E5E5"> allows us to get</font><font color="#CCCCCC"> away</font>

937
00:40:58,560 --> 00:41:02,090
from the strong typing normally strong

938
00:41:00,240 --> 00:41:05,399
<font color="#E5E5E5">typing you would think might save you</font>

939
00:41:02,090 --> 00:41:08,340
<font color="#E5E5E5">but it doesn't we can introduce objects</font>

940
00:41:05,400 --> 00:41:11,190
that are<font color="#E5E5E5"> not actually part of the system</font>

941
00:41:08,340 --> 00:41:12,720
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is expecting them and</font><font color="#E5E5E5"> it'll still</font>

942
00:41:11,190 --> 00:41:14,880
blow up like we saw we<font color="#E5E5E5"> got the class</font>

943
00:41:12,720 --> 00:41:19,259
cast exception but not until<font color="#CCCCCC"> after we've</font>

944
00:41:14,880 --> 00:41:22,140
<font color="#E5E5E5">already executed</font><font color="#CCCCCC"> so they do require</font>

945
00:41:19,260 --> 00:41:24,600
access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a class that's doing something</font>

946
00:41:22,140 --> 00:41:27,240
<font color="#E5E5E5">dangerous or stupid</font><font color="#CCCCCC"> those are</font>

947
00:41:24,600 --> 00:41:31,350
unfortunately<font color="#E5E5E5"> too easy to find that</font>

948
00:41:27,240 --> 00:41:34,560
<font color="#E5E5E5">they're around</font><font color="#CCCCCC"> and so that's it so</font><font color="#E5E5E5"> my</font>

949
00:41:31,350 --> 00:41:37,799
demo code for this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> available on my</font>

950
00:41:34,560 --> 00:41:39,900
github repo<font color="#CCCCCC"> serial vom demo</font><font color="#E5E5E5"> up I'm</font>

951
00:41:37,800 --> 00:41:41,580
hoping to over the<font color="#E5E5E5"> next few months put</font>

952
00:41:39,900 --> 00:41:43,470
some<font color="#E5E5E5"> additional</font><font color="#CCCCCC"> ones on there so instead</font>

953
00:41:41,580 --> 00:41:46,259
of just PHP and Java

954
00:41:43,470 --> 00:41:48,089
<font color="#CCCCCC">maybe add a</font><font color="#E5E5E5"> net example on there</font><font color="#CCCCCC"> I don't</font>

955
00:41:46,260 --> 00:41:51,470
<font color="#CCCCCC">know if I'll brave Ruby or not but I'll</font>

956
00:41:48,090 --> 00:41:53,910
probably<font color="#E5E5E5"> put a Python one on there</font><font color="#CCCCCC"> and</font>

957
00:41:51,470 --> 00:41:55,259
that's pretty<font color="#E5E5E5"> much it I do have one</font>

958
00:41:53,910 --> 00:41:57,509
attribution out there I just<font color="#CCCCCC"> want to say</font>

959
00:41:55,260 --> 00:42:00,570
that the marshalling pickles was part<font color="#E5E5E5"> of</font>

960
00:41:57,510 --> 00:42:05,290
what inspired<font color="#E5E5E5"> this</font><font color="#CCCCCC"> the guys who did why</font>

961
00:42:00,570 --> 00:42:10,849
so<font color="#E5E5E5"> serial as well so thank you very much</font>

962
00:42:05,290 --> 00:42:10,849
[Applause]

