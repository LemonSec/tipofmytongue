1
00:00:00,000 --> 00:00:07,309
<font color="#CCCCCC">you guys are gonna thank you you guys</font>

2
00:00:05,400 --> 00:00:11,880
<font color="#E5E5E5">are gonna get drunk tonight</font>

3
00:00:07,309 --> 00:00:16,770
one of my demos tonight<font color="#E5E5E5"> involves a lot</font>

4
00:00:11,880 --> 00:00:18,240
of tour<font color="#E5E5E5"> all right so what we're gonna do</font>

5
00:00:16,770 --> 00:00:20,100
today is<font color="#E5E5E5"> I'm gonna have a little bit of</font>

6
00:00:18,240 --> 00:00:21,889
an egotistical moment<font color="#CCCCCC"> talk a</font><font color="#E5E5E5"> little bit</font>

7
00:00:20,100 --> 00:00:24,390
about myself all people are filing in

8
00:00:21,890 --> 00:00:26,910
<font color="#E5E5E5">we'll talk a little</font><font color="#CCCCCC"> bit about</font><font color="#E5E5E5"> FreeBSD</font>

9
00:00:24,390 --> 00:00:30,269
what it is and why it's<font color="#E5E5E5"> not Linux and</font>

10
00:00:26,910 --> 00:00:33,210
why you should care<font color="#CCCCCC"> and then we'll talk</font>

11
00:00:30,269 --> 00:00:35,550
a little<font color="#E5E5E5"> bit about</font><font color="#CCCCCC"> lib hijack a post</font>

12
00:00:33,210 --> 00:00:39,030
exploitation runtime process infection

13
00:00:35,550 --> 00:00:42,980
tool for FreeBSD<font color="#E5E5E5"> then we'll talk about</font>

14
00:00:39,030 --> 00:00:46,800
the mandatory<font color="#E5E5E5"> access control framework</font>

15
00:00:42,980 --> 00:00:51,660
<font color="#E5E5E5">we'll talk about Mac rootkits</font><font color="#CCCCCC"> and we'll</font>

16
00:00:46,800 --> 00:00:53,309
do a demo<font color="#CCCCCC"> so today's demo is the most</font>

17
00:00:51,660 --> 00:00:56,218
complicated demo that<font color="#E5E5E5"> I've</font><font color="#CCCCCC"> ever done</font>

18
00:00:53,309 --> 00:01:00,660
<font color="#CCCCCC">I've sacrificed the required three and</font>

19
00:00:56,219 --> 00:01:02,670
<font color="#E5E5E5">three-quarters goats to the demo gods so</font>

20
00:01:00,660 --> 00:01:04,860
let's hope that<font color="#E5E5E5"> that</font><font color="#CCCCCC"> works so about</font><font color="#E5E5E5"> a</font>

21
00:01:02,670 --> 00:01:06,600
<font color="#E5E5E5">little bit about me I'm</font><font color="#CCCCCC"> an offensive</font><font color="#E5E5E5"> and</font>

22
00:01:04,860 --> 00:01:09,720
defensive security researcher and

23
00:01:06,600 --> 00:01:14,669
engineer but in the<font color="#E5E5E5"> field for around 15</font>

24
00:01:09,720 --> 00:01:17,460
years<font color="#E5E5E5"> on and off and</font><font color="#CCCCCC"> human rights really</font>

25
00:01:14,670 --> 00:01:19,830
<font color="#E5E5E5">matters to me being able</font><font color="#CCCCCC"> to have free</font>

26
00:01:17,460 --> 00:01:21,600
<font color="#CCCCCC">speech and freedom of thought is</font>

27
00:01:19,830 --> 00:01:24,090
something<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> close to my heart</font><font color="#CCCCCC"> and</font>

28
00:01:21,600 --> 00:01:27,059
so as part of<font color="#CCCCCC"> that I run a</font><font color="#E5E5E5"> high</font>

29
00:01:24,090 --> 00:01:28,680
<font color="#E5E5E5">bandwidth</font><font color="#CCCCCC"> Tor relay at home</font><font color="#E5E5E5"> it's a non</font>

30
00:01:27,060 --> 00:01:31,259
exit relay because<font color="#CCCCCC"> I don't want feds</font>

31
00:01:28,680 --> 00:01:33,689
knocking on my door<font color="#E5E5E5"> especially</font><font color="#CCCCCC"> since I'm</font>

32
00:01:31,259 --> 00:01:36,119
the co-founder of hardened BSD and<font color="#E5E5E5"> I</font>

33
00:01:33,689 --> 00:01:37,470
have some of<font color="#E5E5E5"> harden vsts infrastructure</font>

34
00:01:36,119 --> 00:01:41,070
out of my home like the<font color="#CCCCCC"> packaged</font>

35
00:01:37,470 --> 00:01:44,429
building server I'm an<font color="#E5E5E5"> open source</font>

36
00:01:41,070 --> 00:01:46,770
enthusiast<font color="#E5E5E5"> in advocate</font><font color="#CCCCCC"> I owe my whole</font>

37
00:01:44,430 --> 00:01:50,610
career<font color="#E5E5E5"> my</font><font color="#CCCCCC"> entire life to open source</font>

38
00:01:46,770 --> 00:01:52,199
because<font color="#CCCCCC"> of the generosity of others I've</font>

39
00:01:50,610 --> 00:01:55,680
been able<font color="#CCCCCC"> to establish</font><font color="#E5E5E5"> a career I</font>

40
00:01:52,200 --> 00:01:57,509
flunked out of college and studied<font color="#E5E5E5"> open</font>

41
00:01:55,680 --> 00:02:01,100
<font color="#E5E5E5">source and learned how</font><font color="#CCCCCC"> to code through</font>

42
00:01:57,509 --> 00:02:06,270
the generosity of others<font color="#E5E5E5"> so thank you I</font>

43
00:02:01,100 --> 00:02:08,310
consider myself a<font color="#E5E5E5"> noob</font><font color="#CCCCCC"> I like to learn</font>

44
00:02:06,270 --> 00:02:10,318
new<font color="#CCCCCC"> things and</font><font color="#E5E5E5"> I find that if I'm not</font>

45
00:02:08,310 --> 00:02:14,060
<font color="#CCCCCC">learning that least one new thing a day</font>

46
00:02:10,318 --> 00:02:14,060
<font color="#E5E5E5">I kind of feel like I'm failing myself</font>

47
00:02:14,220 --> 00:02:19,680
it's a little bit about<font color="#CCCCCC"> FreeBSD</font><font color="#E5E5E5"> FreeBSD</font>

48
00:02:16,620 --> 00:02:23,100
is a unix-like operating system we say

49
00:02:19,680 --> 00:02:26,940
<font color="#CCCCCC">unix-like instead</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> UNIX because of a</font>

50
00:02:23,100 --> 00:02:31,620
lawsuit back in the early 90s<font color="#E5E5E5"> but it has</font>

51
00:02:26,940 --> 00:02:33,390
its roots directly with UNIX might have

52
00:02:31,620 --> 00:02:37,170
heard<font color="#E5E5E5"> of a few companies that use</font>

53
00:02:33,390 --> 00:02:39,500
<font color="#CCCCCC">freebsd heavily netflix juniper</font><font color="#E5E5E5"> sony</font>

54
00:02:37,170 --> 00:02:42,109
<font color="#E5E5E5">cisco dell emc isilon</font>

55
00:02:39,500 --> 00:02:45,120
<font color="#CCCCCC">netflix is open connect appliances</font>

56
00:02:42,110 --> 00:02:47,670
<font color="#CCCCCC">they're big servers that get installed</font>

57
00:02:45,120 --> 00:02:50,810
<font color="#E5E5E5">in internet exchange points around the</font>

58
00:02:47,670 --> 00:02:55,190
world<font color="#E5E5E5"> those open connect appliances</font>

59
00:02:50,810 --> 00:03:01,830
<font color="#E5E5E5">deliver your streaming video content</font><font color="#CCCCCC"> and</font>

60
00:02:55,190 --> 00:03:04,829
last time<font color="#CCCCCC"> net craft ran a survey they</font>

61
00:03:01,830 --> 00:03:08,130
estimated<font color="#E5E5E5"> around 36%</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> all peak North</font>

62
00:03:04,830 --> 00:03:12,090
<font color="#E5E5E5">American Internet traffic is delivered</font>

63
00:03:08,130 --> 00:03:15,410
by Netflix that's<font color="#E5E5E5"> FreeBSD your</font>

64
00:03:12,090 --> 00:03:20,060
<font color="#CCCCCC">PlayStation 4 at home runs FreeBSD</font>

65
00:03:15,410 --> 00:03:23,760
<font color="#CCCCCC">NetApp appliances run FreeBSD junipers</font>

66
00:03:20,060 --> 00:03:25,880
<font color="#E5E5E5">switches and routers so FreeBSD is used</font>

67
00:03:23,760 --> 00:03:29,070
a lot<font color="#E5E5E5"> especially in the corporate scene</font>

68
00:03:25,880 --> 00:03:31,470
the problem is is that FreeBSD security

69
00:03:29,070 --> 00:03:37,079
is lacking<font color="#CCCCCC"> FreeBSD has some great</font>

70
00:03:31,470 --> 00:03:39,810
<font color="#CCCCCC">features like DTrace jails</font><font color="#E5E5E5"> ZFS but the</font>

71
00:03:37,080 --> 00:03:45,780
exploit mitigations are<font color="#CCCCCC"> laughing they</font>

72
00:03:39,810 --> 00:03:49,800
only have a stack cookie which is pretty

73
00:03:45,780 --> 00:03:51,209
<font color="#E5E5E5">stupid because exploit authors today</font>

74
00:03:49,800 --> 00:03:55,670
they<font color="#E5E5E5"> don't really care</font><font color="#CCCCCC"> much about stack</font>

75
00:03:51,209 --> 00:03:58,350
cookies especially with today's

76
00:03:55,670 --> 00:04:00,899
techniques like raw up and job and s

77
00:03:58,350 --> 00:04:04,109
<font color="#CCCCCC">crop and</font><font color="#E5E5E5"> all that fun stuff they don't</font>

78
00:04:00,900 --> 00:04:08,280
<font color="#E5E5E5">have a SLR they don't have W X or X or</font>

79
00:04:04,110 --> 00:04:11,310
<font color="#E5E5E5">for your windows folk DEP DEP no</font><font color="#CCCCCC"> CFI no</font>

80
00:04:08,280 --> 00:04:13,489
<font color="#CCCCCC">save stack so really literally the only</font>

81
00:04:11,310 --> 00:04:16,019
<font color="#CCCCCC">thing that they have is a stack</font><font color="#E5E5E5"> cookie</font>

82
00:04:13,489 --> 00:04:19,440
all system hardening options are

83
00:04:16,019 --> 00:04:22,079
disabled by default<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so if you're</font>

84
00:04:19,440 --> 00:04:26,010
getting<font color="#E5E5E5"> started in exploit authorship in</font>

85
00:04:22,079 --> 00:04:30,520
reverse engineering<font color="#CCCCCC"> or any offensive</font>

86
00:04:26,010 --> 00:04:32,430
aspect of the InfoSec industry<font color="#CCCCCC"> freebsd</font>

87
00:04:30,520 --> 00:04:36,940
really is a good<font color="#E5E5E5"> system</font><font color="#CCCCCC"> to learn</font><font color="#E5E5E5"> on</font>

88
00:04:32,430 --> 00:04:41,020
because you're in 1999 era of security

89
00:04:36,940 --> 00:04:48,700
it's<font color="#E5E5E5"> really easy to write copy and paste</font>

90
00:04:41,020 --> 00:04:50,830
style<font color="#E5E5E5"> mass exploitation of</font><font color="#CCCCCC"> ulnar to a</font>

91
00:04:48,700 --> 00:04:52,719
few different<font color="#CCCCCC"> topics and right now i'm</font>

92
00:04:50,830 --> 00:04:57,520
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> jump</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> executable and</font>

93
00:04:52,720 --> 00:05:02,380
linkable format<font color="#E5E5E5"> or elf file format linux</font>

94
00:04:57,520 --> 00:05:04,690
and freebsd and<font color="#E5E5E5"> solaris</font><font color="#CCCCCC"> i'll use elf elf</font>

95
00:05:02,380 --> 00:05:06,010
<font color="#E5E5E5">described describes how your program</font>

96
00:05:04,690 --> 00:05:10,660
gets<font color="#CCCCCC"> loaded it tells the operating</font>

97
00:05:06,010 --> 00:05:13,150
system where<font color="#E5E5E5"> where in memory to load the</font>

98
00:05:10,660 --> 00:05:16,210
<font color="#CCCCCC">application there are different headers</font>

99
00:05:13,150 --> 00:05:18,549
within the elf file format the elf

100
00:05:16,210 --> 00:05:22,060
<font color="#CCCCCC">header main elf header is required</font><font color="#E5E5E5"> in</font>

101
00:05:18,550 --> 00:05:24,400
the process header which describes<font color="#E5E5E5"> which</font>

102
00:05:22,060 --> 00:05:26,919
tells the operating system<font color="#E5E5E5"> at what</font>

103
00:05:24,400 --> 00:05:30,729
address<font color="#CCCCCC"> at what addresses and</font><font color="#E5E5E5"> weight</font>

104
00:05:26,919 --> 00:05:33,719
<font color="#E5E5E5">with which permission bits to to load</font>

105
00:05:30,730 --> 00:05:38,290
your different parts of<font color="#E5E5E5"> your application</font>

106
00:05:33,720 --> 00:05:41,080
<font color="#CCCCCC">the dynamic header is required in one</font>

107
00:05:38,290 --> 00:05:44,140
case if your application is dynamically

108
00:05:41,080 --> 00:05:46,060
<font color="#E5E5E5">loaded and you will not see it for</font>

109
00:05:44,140 --> 00:05:49,120
statically statically compiled

110
00:05:46,060 --> 00:05:49,780
applications section headers are

111
00:05:49,120 --> 00:05:52,060
optional

112
00:05:49,780 --> 00:05:56,710
when you strip<font color="#E5E5E5"> a binary</font><font color="#CCCCCC"> your stripping</font>

113
00:05:52,060 --> 00:05:59,470
<font color="#E5E5E5">out the section headers now when we want</font>

114
00:05:56,710 --> 00:06:04,150
to talk<font color="#CCCCCC"> about process infection</font><font color="#E5E5E5"> we want</font>

115
00:05:59,470 --> 00:06:06,370
to talk<font color="#E5E5E5"> about getting injecting</font>

116
00:06:04,150 --> 00:06:08,440
arbitrary code and running<font color="#E5E5E5"> that</font>

117
00:06:06,370 --> 00:06:13,630
<font color="#E5E5E5">arbitrary code there's a few techniques</font>

118
00:06:08,440 --> 00:06:16,570
for doing<font color="#E5E5E5"> that you can overwrite a part</font>

119
00:06:13,630 --> 00:06:20,229
<font color="#E5E5E5">of the processes address space that</font><font color="#CCCCCC"> is</font>

120
00:06:16,570 --> 00:06:23,200
executable<font color="#E5E5E5"> the problem is is that when</font>

121
00:06:20,229 --> 00:06:30,370
<font color="#CCCCCC">you do that you are</font><font color="#E5E5E5"> destroying a part of</font>

122
00:06:23,200 --> 00:06:33,669
that executable<font color="#E5E5E5"> image when as an as as</font>

123
00:06:30,370 --> 00:06:37,090
<font color="#E5E5E5">someone who writes</font><font color="#CCCCCC"> long lived</font><font color="#E5E5E5"> exploits</font>

124
00:06:33,669 --> 00:06:38,799
and<font color="#CCCCCC"> long-lived malware</font><font color="#E5E5E5"> we want to be</font>

125
00:06:37,090 --> 00:06:41,080
able<font color="#E5E5E5"> to have</font><font color="#CCCCCC"> our code</font>

126
00:06:38,800 --> 00:06:44,470
running indefinitely<font color="#CCCCCC"> we want to have the</font>

127
00:06:41,080 --> 00:06:49,030
<font color="#CCCCCC">program continue its normal behavior but</font>

128
00:06:44,470 --> 00:06:51,400
<font color="#CCCCCC">also do malicious things on the side we</font>

129
00:06:49,030 --> 00:06:52,960
can<font color="#E5E5E5"> overwrite parts of the heap the</font>

130
00:06:51,400 --> 00:06:54,940
problem is is that<font color="#E5E5E5"> the heap is</font><font color="#CCCCCC"> not</font>

131
00:06:52,960 --> 00:06:57,969
executable on amd64

132
00:06:54,940 --> 00:07:00,490
<font color="#E5E5E5">and</font><font color="#CCCCCC"> armed</font><font color="#E5E5E5"> 64 we could override a part</font><font color="#CCCCCC"> of</font>

133
00:06:57,970 --> 00:07:05,440
the stack<font color="#E5E5E5"> but again the stack is also</font>

134
00:07:00,490 --> 00:07:09,930
<font color="#CCCCCC">non executable on</font><font color="#E5E5E5"> AMD 64 + RM 64 so</font>

135
00:07:05,440 --> 00:07:12,699
we're really left<font color="#E5E5E5"> with no options with</font>

136
00:07:09,930 --> 00:07:16,479
injecting arbitrary code and getting

137
00:07:12,699 --> 00:07:18,669
that code to run the procedure linkage

138
00:07:16,479 --> 00:07:21,008
table and global offset table<font color="#E5E5E5"> is a</font>

139
00:07:18,669 --> 00:07:24,758
lookup table of sorts<font color="#CCCCCC"> so when your</font>

140
00:07:21,009 --> 00:07:27,210
application<font color="#E5E5E5"> calls printf for example it</font>

141
00:07:24,759 --> 00:07:30,539
won't it will never directly call printf

142
00:07:27,210 --> 00:07:33,758
<font color="#E5E5E5">for dynamically loaded applications</font>

143
00:07:30,539 --> 00:07:37,150
<font color="#E5E5E5">instead it'll instruct the operating</font>

144
00:07:33,759 --> 00:07:39,460
<font color="#CCCCCC">systems runtime linker to resolve</font><font color="#E5E5E5"> the</font>

145
00:07:37,150 --> 00:07:42,909
address of printf because printf could

146
00:07:39,460 --> 00:07:46,419
be<font color="#E5E5E5"> loaded anywhere in memory</font><font color="#CCCCCC"> and it'll</font>

147
00:07:42,909 --> 00:07:49,569
stuff that resolved<font color="#E5E5E5"> address it'll</font><font color="#CCCCCC"> cache</font>

148
00:07:46,419 --> 00:07:53,590
it in the PLT<font color="#CCCCCC"> G ot</font><font color="#E5E5E5"> the procedure linkage</font>

149
00:07:49,569 --> 00:07:56,349
table global offset<font color="#E5E5E5"> table and the next</font>

150
00:07:53,590 --> 00:08:00,638
time<font color="#E5E5E5"> your application calls printf the</font>

151
00:07:56,349 --> 00:08:07,360
resolution has has<font color="#E5E5E5"> taken</font><font color="#CCCCCC"> place and and</font>

152
00:08:00,639 --> 00:08:10,810
so and<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it can</font><font color="#CCCCCC"> use that entry in the</font>

153
00:08:07,360 --> 00:08:14,440
PLT<font color="#E5E5E5"> G ot to call</font><font color="#CCCCCC"> printf no further</font>

154
00:08:10,810 --> 00:08:18,279
resolution needs to happen<font color="#CCCCCC"> there isn't</font>

155
00:08:14,440 --> 00:08:21,789
any tooling for<font color="#E5E5E5"> making</font><font color="#CCCCCC"> PLT g OT</font>

156
00:08:18,279 --> 00:08:24,940
redirection techniques possible when you

157
00:08:21,789 --> 00:08:28,120
want<font color="#CCCCCC"> to hijack</font><font color="#E5E5E5"> a function you simply</font>

158
00:08:24,940 --> 00:08:30,340
overwrite the PLT<font color="#E5E5E5"> G ot entry for that</font>

159
00:08:28,120 --> 00:08:31,840
<font color="#E5E5E5">function so if I wanted</font><font color="#CCCCCC"> to write a</font>

160
00:08:30,340 --> 00:08:34,569
malicious printf<font color="#E5E5E5"> and have the</font>

161
00:08:31,840 --> 00:08:37,390
application<font color="#CCCCCC"> call my malicious printf I</font>

162
00:08:34,570 --> 00:08:40,570
would<font color="#E5E5E5"> simply write my malicious printf</font>

163
00:08:37,390 --> 00:08:42,699
skoda<font color="#CCCCCC"> in assembly or shell or in shell</font>

164
00:08:40,570 --> 00:08:46,060
code or in a shared object<font color="#E5E5E5"> that gets</font>

165
00:08:42,700 --> 00:08:48,640
<font color="#E5E5E5">loaded and then I would replace the</font>

166
00:08:46,060 --> 00:08:52,189
print the lookup table<font color="#E5E5E5"> the cached</font>

167
00:08:48,640 --> 00:08:55,770
<font color="#CCCCCC">version of</font><font color="#E5E5E5"> the printf</font>

168
00:08:52,190 --> 00:09:00,600
<font color="#E5E5E5">address which is</font><font color="#CCCCCC"> in the PLT ggot</font><font color="#E5E5E5"> with</font>

169
00:08:55,770 --> 00:09:02,210
the<font color="#CCCCCC"> address</font><font color="#E5E5E5"> of my malicious</font><font color="#CCCCCC"> printf so</font>

170
00:09:00,600 --> 00:09:04,770
that's where lib hijack comes into play

171
00:09:02,210 --> 00:09:08,040
lib hijack is a post exploitation

172
00:09:04,770 --> 00:09:11,610
<font color="#CCCCCC">runtime process infection tool that aims</font>

173
00:09:08,040 --> 00:09:15,030
to<font color="#CCCCCC"> make in injection of arbitrary code</font>

174
00:09:11,610 --> 00:09:18,570
and the hijack of<font color="#CCCCCC"> PLT G ot entries</font>

175
00:09:15,030 --> 00:09:21,860
really easy I originally wrote<font color="#E5E5E5"> it for</font>

176
00:09:18,570 --> 00:09:26,820
Linux<font color="#E5E5E5"> way back</font><font color="#CCCCCC"> in the day and around</font>

177
00:09:21,860 --> 00:09:28,830
<font color="#E5E5E5">2010-2011 and I got really busy it took</font>

178
00:09:26,820 --> 00:09:33,360
it took<font color="#CCCCCC"> a few years for me</font><font color="#E5E5E5"> to develop</font>

179
00:09:28,830 --> 00:09:36,330
lib hijack<font color="#E5E5E5"> in its current state and I</font>

180
00:09:33,360 --> 00:09:38,970
got<font color="#CCCCCC"> really busy and around 2013 2014 I</font>

181
00:09:36,330 --> 00:09:42,570
gave live hijack to a community called

182
00:09:38,970 --> 00:09:45,000
soldier<font color="#E5E5E5"> X and soldier X is an online</font>

183
00:09:42,570 --> 00:09:47,220
security<font color="#E5E5E5"> community filled with people of</font>

184
00:09:45,000 --> 00:09:49,830
like minds<font color="#E5E5E5"> people who do reverse</font>

185
00:09:47,220 --> 00:09:54,210
<font color="#CCCCCC">engineering</font><font color="#E5E5E5"> people who write exploits</font>

186
00:09:49,830 --> 00:09:59,310
<font color="#E5E5E5">and the really talented group of people</font>

187
00:09:54,210 --> 00:10:01,860
<font color="#CCCCCC">and I said I told</font><font color="#E5E5E5"> him hey I</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> have</font>

188
00:09:59,310 --> 00:10:04,170
much free time<font color="#CCCCCC"> anymore so here's</font><font color="#E5E5E5"> Lib</font>

189
00:10:01,860 --> 00:10:10,110
hijack you guys can now develop it and

190
00:10:04,170 --> 00:10:12,750
maintain<font color="#CCCCCC"> it and and so I left</font><font color="#E5E5E5"> for a few</font>

191
00:10:10,110 --> 00:10:15,210
<font color="#CCCCCC">years I left the project to live to</font>

192
00:10:12,750 --> 00:10:17,310
soldier X for a few years and then<font color="#E5E5E5"> last</font>

193
00:10:15,210 --> 00:10:21,720
<font color="#E5E5E5">year I was curious would it work on</font>

194
00:10:17,310 --> 00:10:25,050
FreeBSD anymore<font color="#CCCCCC"> and it did after a few</font>

195
00:10:21,720 --> 00:10:27,120
<font color="#E5E5E5">changes</font><font color="#CCCCCC"> and so I</font><font color="#E5E5E5"> picked up the project</font>

196
00:10:25,050 --> 00:10:31,229
<font color="#CCCCCC">again and I</font><font color="#E5E5E5"> removed the</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> support</font>

197
00:10:27,120 --> 00:10:34,350
and I ported it to arm 64 so now live

198
00:10:31,230 --> 00:10:36,930
high Jack<font color="#E5E5E5"> only</font><font color="#CCCCCC"> supports</font><font color="#E5E5E5"> FreeBSD and it</font>

199
00:10:34,350 --> 00:10:40,080
supports two architectures<font color="#E5E5E5"> AMD 64 and</font>

200
00:10:36,930 --> 00:10:42,329
arm 64<font color="#CCCCCC"> I removed Linux</font><font color="#E5E5E5"> support because I</font>

201
00:10:40,080 --> 00:10:46,590
haven't<font color="#E5E5E5"> really used Linux in around a</font>

202
00:10:42,330 --> 00:10:49,230
<font color="#CCCCCC">decade in any serious manner</font><font color="#E5E5E5"> BSD has has</font>

203
00:10:46,590 --> 00:10:52,080
really<font color="#E5E5E5"> caught my interests and I can</font>

204
00:10:49,230 --> 00:10:56,570
pretty much do<font color="#CCCCCC"> anything in</font><font color="#E5E5E5"> FreeBSD or</font>

205
00:10:52,080 --> 00:10:56,570
<font color="#CCCCCC">harden BSD that I could do in Linux</font>

206
00:10:56,860 --> 00:11:04,340
so so<font color="#E5E5E5"> lib hijack does not support Linux</font>

207
00:11:03,530 --> 00:11:06,980
anymore

208
00:11:04,340 --> 00:11:10,130
it relies heavily on the elf headers

209
00:11:06,980 --> 00:11:13,040
when you attach<font color="#CCCCCC"> Lib hijack</font><font color="#E5E5E5"> to the victim</font>

210
00:11:10,130 --> 00:11:16,160
process it will cache<font color="#E5E5E5"> a lot of that elf</font>

211
00:11:13,040 --> 00:11:20,480
headers<font color="#E5E5E5"> because</font><font color="#CCCCCC"> we need to parse through</font>

212
00:11:16,160 --> 00:11:23,050
the elf headers to<font color="#E5E5E5"> find the PLT G ot so</font>

213
00:11:20,480 --> 00:11:27,020
remember we can't store our<font color="#CCCCCC"> shellcode</font>

214
00:11:23,050 --> 00:11:29,390
where<font color="#E5E5E5"> the application is executed is</font>

215
00:11:27,020 --> 00:11:32,470
currently<font color="#E5E5E5"> executing we can't store</font>

216
00:11:29,390 --> 00:11:37,790
<font color="#E5E5E5">shellcode on the heap or on the stack so</font>

217
00:11:32,470 --> 00:11:40,070
<font color="#CCCCCC">what Lib hijack does is it is it forces</font>

218
00:11:37,790 --> 00:11:43,459
the victim application creates a new

219
00:11:40,070 --> 00:11:46,940
<font color="#E5E5E5">memory mapping that new memory mapping</font>

220
00:11:43,460 --> 00:11:50,390
<font color="#E5E5E5">can be read only or read and execute</font><font color="#CCCCCC"> it</font>

221
00:11:46,940 --> 00:11:52,310
can have the right bit dropped but we

222
00:11:50,390 --> 00:11:55,010
can write to<font color="#E5E5E5"> it</font><font color="#CCCCCC"> ourselves</font><font color="#E5E5E5"> because we're</font>

223
00:11:52,310 --> 00:11:57,589
using<font color="#CCCCCC"> P</font><font color="#E5E5E5"> trace and you by using P trace</font>

224
00:11:55,010 --> 00:11:59,720
the operating system gives us godlike

225
00:11:57,590 --> 00:12:04,730
permissions over the over the<font color="#E5E5E5"> victim</font>

226
00:11:59,720 --> 00:12:09,830
process so we<font color="#CCCCCC"> can inject</font><font color="#E5E5E5"> our shellcode</font>

227
00:12:04,730 --> 00:12:11,840
into the new memory allocation the end

228
00:12:09,830 --> 00:12:14,690
goal for<font color="#CCCCCC"> lib hijack is to be able to</font>

229
00:12:11,840 --> 00:12:18,800
inject anonymously full shared objects

230
00:12:14,690 --> 00:12:21,320
if I'm an<font color="#CCCCCC"> attacker and I'm attacking</font><font color="#E5E5E5"> and</font>

231
00:12:18,800 --> 00:12:26,150
my<font color="#CCCCCC"> target is a web server</font><font color="#E5E5E5"> maybe running</font>

232
00:12:21,320 --> 00:12:28,280
<font color="#E5E5E5">Apache and I want to have a patchy send</font>

233
00:12:26,150 --> 00:12:33,319
me<font color="#CCCCCC"> pcaps</font><font color="#E5E5E5"> whenever I send it a special</font>

234
00:12:28,280 --> 00:12:40,069
string perhaps get<font color="#CCCCCC"> /a get /p caps HP /</font>

235
00:12:33,320 --> 00:12:44,660
<font color="#CCCCCC">1.1 if I have if I have Lib pcap opened</font>

236
00:12:40,070 --> 00:12:48,530
in<font color="#E5E5E5"> Apache</font><font color="#CCCCCC"> via deal open then if it's</font>

237
00:12:44,660 --> 00:12:51,829
this admin<font color="#E5E5E5"> suspects the box has been</font>

238
00:12:48,530 --> 00:12:53,689
<font color="#E5E5E5">compromised and</font><font color="#CCCCCC"> the sysadmin can go and</font>

239
00:12:51,830 --> 00:12:56,440
look at the<font color="#CCCCCC"> apache process and see what</font>

240
00:12:53,690 --> 00:13:01,460
files<font color="#E5E5E5"> the apache process has opened and</font>

241
00:12:56,440 --> 00:13:04,339
if the sysadmin<font color="#E5E5E5"> sees</font><font color="#CCCCCC"> lib pcap opened</font>

242
00:13:01,460 --> 00:13:06,260
within<font color="#E5E5E5"> Libya within</font><font color="#CCCCCC"> Apache the sysadmin</font>

243
00:13:04,339 --> 00:13:08,450
is immediately<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> know that</font>

244
00:13:06,260 --> 00:13:11,840
something has<font color="#CCCCCC"> gone wrong</font>

245
00:13:08,450 --> 00:13:16,260
so what we want to<font color="#E5E5E5"> do instead is</font>

246
00:13:11,840 --> 00:13:18,860
anonymously inject<font color="#E5E5E5"> lippy cap which means</font>

247
00:13:16,260 --> 00:13:22,560
that lid<font color="#CCCCCC"> P cap is loaded within</font><font color="#E5E5E5"> Apache</font>

248
00:13:18,860 --> 00:13:26,610
<font color="#E5E5E5">but</font><font color="#CCCCCC"> it's not backed by a file so that</font>

249
00:13:22,560 --> 00:13:32,069
<font color="#CCCCCC">means that we can still sniff packets</font>

250
00:13:26,610 --> 00:13:35,010
off the wire<font color="#E5E5E5"> use lippy cap as normal but</font>

251
00:13:32,070 --> 00:13:39,690
the memory allocations for live<font color="#E5E5E5"> P cap</font>

252
00:13:35,010 --> 00:13:41,990
<font color="#E5E5E5">just look like a JIT or a heap they look</font>

253
00:13:39,690 --> 00:13:44,760
like normal memory anonymous memory

254
00:13:41,990 --> 00:13:46,530
allocations<font color="#E5E5E5"> the system administrator</font>

255
00:13:44,760 --> 00:13:50,819
might be fooled into thinking that

256
00:13:46,530 --> 00:13:55,290
<font color="#E5E5E5">nothing has nothing gone nothing wrong</font>

257
00:13:50,820 --> 00:14:00,900
has happened<font color="#E5E5E5"> that's the end goal</font><font color="#CCCCCC"> of clip</font>

258
00:13:55,290 --> 00:14:02,610
hijack we're not there yet<font color="#CCCCCC"> in lib hijack</font>

259
00:14:00,900 --> 00:14:05,189
does not support file back to<font color="#E5E5E5"> memory</font>

260
00:14:02,610 --> 00:14:07,200
mappings because of the stealth aspect

261
00:14:05,190 --> 00:14:09,950
of<font color="#CCCCCC"> Lib hijack we don't want to leave a</font>

262
00:14:07,200 --> 00:14:13,170
trace on the file system

263
00:14:09,950 --> 00:14:17,520
now<font color="#CCCCCC"> FreeBSD has this really cool sandbox</font>

264
00:14:13,170 --> 00:14:19,079
scene a framework called<font color="#E5E5E5"> capsicum it is</font>

265
00:14:17,520 --> 00:14:20,329
a capabilities framework that is

266
00:14:19,080 --> 00:14:23,190
<font color="#E5E5E5">extremely strong</font>

267
00:14:20,330 --> 00:14:26,880
it works<font color="#E5E5E5"> on a per file descriptor basis</font>

268
00:14:23,190 --> 00:14:29,340
so when you open<font color="#E5E5E5"> when you open a file</font>

269
00:14:26,880 --> 00:14:31,590
<font color="#E5E5E5">and create a file descriptor</font><font color="#CCCCCC"> you say I</font>

270
00:14:29,340 --> 00:14:34,680
can only read from<font color="#E5E5E5"> this file I can't</font>

271
00:14:31,590 --> 00:14:38,910
write to<font color="#E5E5E5"> it I can only do certain types</font>

272
00:14:34,680 --> 00:14:41,750
<font color="#E5E5E5">of operations and when you enter</font>

273
00:14:38,910 --> 00:14:44,699
capabilities mode or cap mode for short

274
00:14:41,750 --> 00:14:47,250
<font color="#E5E5E5">then</font><font color="#CCCCCC"> the operating system expects you to</font>

275
00:14:44,700 --> 00:14:50,520
have<font color="#CCCCCC"> all of your file descriptors all of</font>

276
00:14:47,250 --> 00:14:53,400
your sockets<font color="#E5E5E5"> everything loaded and</font>

277
00:14:50,520 --> 00:14:56,189
connected prior<font color="#CCCCCC"> to entering capabilities</font>

278
00:14:53,400 --> 00:14:57,900
mode<font color="#E5E5E5"> so once you enter capabilities mode</font>

279
00:14:56,190 --> 00:15:00,210
you have<font color="#E5E5E5"> no access to</font><font color="#CCCCCC"> the global</font>

280
00:14:57,900 --> 00:15:04,350
<font color="#CCCCCC">namespace so you can't call open</font><font color="#E5E5E5"> you</font>

281
00:15:00,210 --> 00:15:08,760
cannot call socket or connect you cannot

282
00:15:04,350 --> 00:15:10,860
call<font color="#E5E5E5"> those system sis calls anymore so</font>

283
00:15:08,760 --> 00:15:12,810
capsicum is really a<font color="#E5E5E5"> pain in</font><font color="#CCCCCC"> the neck to</font>

284
00:15:10,860 --> 00:15:16,110
use I<font color="#E5E5E5"> have a love-hate relationship</font>

285
00:15:12,810 --> 00:15:18,599
because capsicum expects you to<font color="#E5E5E5"> have</font>

286
00:15:16,110 --> 00:15:20,720
<font color="#E5E5E5">everything open already and if you're</font>

287
00:15:18,600 --> 00:15:26,600
trying<font color="#CCCCCC"> to integrate capsicum</font>

288
00:15:20,720 --> 00:15:30,319
<font color="#CCCCCC">a</font><font color="#E5E5E5"> complex</font><font color="#CCCCCC"> application like tor tor will</font>

289
00:15:26,600 --> 00:15:33,379
open sockets arbitrarily during its<font color="#CCCCCC"> life</font>

290
00:15:30,319 --> 00:15:38,810
<font color="#CCCCCC">cycle</font><font color="#E5E5E5"> and that that is in direct</font>

291
00:15:33,379 --> 00:15:41,449
<font color="#E5E5E5">conflict with capsicum and so it using</font>

292
00:15:38,810 --> 00:15:44,479
capsicum<font color="#E5E5E5"> takes a bit</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> work to do</font>

293
00:15:41,449 --> 00:15:47,329
<font color="#E5E5E5">properly one of the things that multiple</font>

294
00:15:44,480 --> 00:15:49,550
<font color="#E5E5E5">FreeBSD developers have told me is that</font>

295
00:15:47,329 --> 00:15:52,300
once you integrate<font color="#E5E5E5"> with capsicum</font>

296
00:15:49,550 --> 00:15:55,609
once you enter capabilities mode

297
00:15:52,300 --> 00:15:58,729
attackers will never be able<font color="#E5E5E5"> to gain</font>

298
00:15:55,610 --> 00:16:04,370
arbitrary code execution<font color="#E5E5E5"> so tonight</font>

299
00:15:58,730 --> 00:16:06,170
that's what<font color="#E5E5E5"> we're gonna do</font><font color="#CCCCCC"> most</font>

300
00:16:04,370 --> 00:16:07,670
<font color="#E5E5E5">applications when you're one you're</font>

301
00:16:06,170 --> 00:16:09,469
integrating with capsicum most

302
00:16:07,670 --> 00:16:12,800
applications will<font color="#E5E5E5"> write wrappers around</font>

303
00:16:09,470 --> 00:16:15,709
<font color="#E5E5E5">those global namespace functions so open</font>

304
00:16:12,800 --> 00:16:19,609
becomes a sandbox underscore open socket

305
00:16:15,709 --> 00:16:21,979
becomes sandbox<font color="#E5E5E5"> socket</font><font color="#CCCCCC"> and because of</font>

306
00:16:19,610 --> 00:16:22,819
how difficult<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> to use capsicum</font>

307
00:16:21,980 --> 00:16:26,809
properly

308
00:16:22,819 --> 00:16:32,029
they've abstracted out<font color="#CCCCCC"> helper functions</font>

309
00:16:26,809 --> 00:16:33,920
to make using capsicum<font color="#E5E5E5"> easier and for</font>

310
00:16:32,029 --> 00:16:39,670
<font color="#E5E5E5">those</font><font color="#CCCCCC"> of you who are a little</font><font color="#E5E5E5"> bit older</font>

311
00:16:33,920 --> 00:16:43,969
in the exploit authorship arena<font color="#CCCCCC"> scene</font>

312
00:16:39,670 --> 00:16:47,319
<font color="#CCCCCC">you'll you'll understand the phrase ret</font>

313
00:16:43,970 --> 00:16:51,139
<font color="#E5E5E5">to Lib C style attacks</font><font color="#CCCCCC"> that's when you</font>

314
00:16:47,319 --> 00:16:55,370
write an exploit payload<font color="#CCCCCC"> that returns</font>

315
00:16:51,139 --> 00:17:02,809
into Lib C I'm going<font color="#E5E5E5"> to abuse that</font><font color="#CCCCCC"> style</font>

316
00:16:55,370 --> 00:17:06,819
of of exploiting and I'm going to do

317
00:17:02,809 --> 00:17:06,819
something<font color="#E5E5E5"> similar</font><font color="#CCCCCC"> with ret to sandbox</font>

318
00:17:06,849 --> 00:17:11,809
and<font color="#CCCCCC"> you can do something if you're using</font>

319
00:17:09,530 --> 00:17:14,869
the<font color="#E5E5E5"> Casper abstraction library you could</font>

320
00:17:11,809 --> 00:17:18,699
return into that as well<font color="#E5E5E5"> now last year</font>

321
00:17:14,869 --> 00:17:24,729
when I was integrating capsicum into<font color="#CCCCCC"> tor</font>

322
00:17:18,699 --> 00:17:29,539
<font color="#E5E5E5">eyes that wrapper style capsicum ization</font>

323
00:17:24,730 --> 00:17:32,010
requires<font color="#E5E5E5"> a SLR</font><font color="#CCCCCC"> WX WX or X</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> CFI at a</font>

324
00:17:29,539 --> 00:17:36,810
bare minimum<font color="#CCCCCC"> to be effective</font>

325
00:17:32,010 --> 00:17:41,220
and this year<font color="#CCCCCC"> Microsoft in Israel at a</font>

326
00:17:36,810 --> 00:17:43,620
<font color="#E5E5E5">presentation in their Israel labs they</font>

327
00:17:41,220 --> 00:17:46,920
noted<font color="#CCCCCC"> CFI goes hand in hand with</font>

328
00:17:43,620 --> 00:17:50,729
sandboxing<font color="#CCCCCC"> CFI</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> control-flow integrity</font>

329
00:17:46,920 --> 00:17:58,560
<font color="#E5E5E5">it helps it aims to prevent</font><font color="#CCCCCC"> rhop and job</font>

330
00:17:50,730 --> 00:18:00,980
and<font color="#CCCCCC"> rob bearings so right now tour</font>

331
00:17:58,560 --> 00:18:04,020
<font color="#CCCCCC">officially only supports Linux</font>

332
00:18:00,980 --> 00:18:06,390
<font color="#E5E5E5">sandboxing so that's set</font><font color="#CCCCCC"> comp 2 which</font>

333
00:18:04,020 --> 00:18:09,000
uses<font color="#CCCCCC"> eb</font><font color="#E5E5E5"> PF filters which whitelist</font>

334
00:18:06,390 --> 00:18:11,160
<font color="#E5E5E5">syscalls so what you do is you whitelist</font>

335
00:18:09,000 --> 00:18:15,840
<font color="#CCCCCC">all</font><font color="#E5E5E5"> this is calls that you want to make</font>

336
00:18:11,160 --> 00:18:18,780
like open and socket and stat and<font color="#E5E5E5"> and</font>

337
00:18:15,840 --> 00:18:20,879
then<font color="#E5E5E5"> after that you can call those</font>

338
00:18:18,780 --> 00:18:25,170
syscalls arbitrarily within the

339
00:18:20,880 --> 00:18:28,500
applications lifetime<font color="#CCCCCC"> lifecycle with</font>

340
00:18:25,170 --> 00:18:30,750
with when<font color="#CCCCCC"> i</font><font color="#E5E5E5"> integrated capsicum and this</font>

341
00:18:28,500 --> 00:18:35,490
integration<font color="#E5E5E5"> has not landed upstream yet</font>

342
00:18:30,750 --> 00:18:43,920
in<font color="#CCCCCC"> tor it's still in a in a in</font><font color="#E5E5E5"> a private</font>

343
00:18:35,490 --> 00:18:47,070
github repo<font color="#CCCCCC"> what i did was i i figured</font>

344
00:18:43,920 --> 00:18:51,210
that<font color="#CCCCCC"> i needed</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> create an IP c socket</font>

345
00:18:47,070 --> 00:18:53,929
and fork off a child process the child

346
00:18:51,210 --> 00:18:57,930
process<font color="#E5E5E5"> would remain uncaps Akamai's and</font>

347
00:18:53,930 --> 00:19:00,780
the parent process<font color="#E5E5E5"> tour itself would</font>

348
00:18:57,930 --> 00:19:03,150
enter capabilities mode<font color="#E5E5E5"> and I would</font>

349
00:19:00,780 --> 00:19:05,580
write wrapper functions in the parent

350
00:19:03,150 --> 00:19:07,830
process<font color="#E5E5E5"> and those wrapper functions</font>

351
00:19:05,580 --> 00:19:10,590
communicate with the uncaps<font color="#CCCCCC"> atomized</font>

352
00:19:07,830 --> 00:19:12,840
child and they do file descriptor

353
00:19:10,590 --> 00:19:14,909
passing between<font color="#E5E5E5"> the two between the</font>

354
00:19:12,840 --> 00:19:17,340
parents and<font color="#E5E5E5"> the child so the</font><font color="#CCCCCC"> child can</font>

355
00:19:14,910 --> 00:19:19,710
<font color="#E5E5E5">do those privileged operations on behalf</font>

356
00:19:17,340 --> 00:19:23,100
of the parent<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Pat and they can pass</font>

357
00:19:19,710 --> 00:19:24,990
file descriptors<font color="#E5E5E5"> back and forth so</font>

358
00:19:23,100 --> 00:19:29,399
there's a<font color="#E5E5E5"> contact structure with a ton</font>

359
00:19:24,990 --> 00:19:33,720
of function<font color="#CCCCCC"> pointers and and so if you</font>

360
00:19:29,400 --> 00:19:37,020
want to<font color="#E5E5E5"> implement a new sandbox with tor</font>

361
00:19:33,720 --> 00:19:39,000
you just implement a new contact

362
00:19:37,020 --> 00:19:40,620
structure with your own custom wrapper

363
00:19:39,000 --> 00:19:42,929
functions

364
00:19:40,620 --> 00:19:44,309
so in my<font color="#E5E5E5"> shellcode instead of calling</font>

365
00:19:42,929 --> 00:19:47,070
<font color="#E5E5E5">deal</font><font color="#CCCCCC"> open</font><font color="#E5E5E5"> directly</font>

366
00:19:44,309 --> 00:19:50,760
I'm gonna call sandbox<font color="#CCCCCC"> deal open</font><font color="#E5E5E5"> our</font>

367
00:19:47,070 --> 00:19:52,370
sandbox<font color="#CCCCCC"> open and then FTL open on the</font>

368
00:19:50,760 --> 00:19:55,890
resulting<font color="#E5E5E5"> file descriptor</font>

369
00:19:52,370 --> 00:19:59,279
because<font color="#CCCCCC"> freebsd doesn't have a SLR and</font>

370
00:19:55,890 --> 00:20:01,980
it does not have control<font color="#E5E5E5"> flow integrity</font>

371
00:19:59,279 --> 00:20:06,330
we can hard code addresses and jump to

372
00:20:01,980 --> 00:20:08,669
them directly<font color="#E5E5E5"> we can we can do anything</font>

373
00:20:06,330 --> 00:20:13,168
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we want</font><font color="#CCCCCC"> within the context</font><font color="#E5E5E5"> of this</font>

374
00:20:08,669 --> 00:20:16,200
process<font color="#E5E5E5"> we can use copy and paste style</font>

375
00:20:13,169 --> 00:20:19,679
exploitation<font color="#E5E5E5"> so if you're running</font><font color="#CCCCCC"> tor on</font>

376
00:20:16,200 --> 00:20:22,799
<font color="#CCCCCC">freebsd maybe a relay or maybe a client</font>

377
00:20:19,679 --> 00:20:26,370
<font color="#CCCCCC">maybe an exit node and there's a</font>

378
00:20:22,799 --> 00:20:30,090
<font color="#CCCCCC">vulnerability within tor</font><font color="#E5E5E5"> then we can use</font>

379
00:20:26,370 --> 00:20:34,199
the exact<font color="#CCCCCC"> same exploit without having to</font>

380
00:20:30,090 --> 00:20:38,939
modify<font color="#E5E5E5"> it in the slightest against all</font>

381
00:20:34,200 --> 00:20:42,539
of those vulnerable<font color="#E5E5E5"> nodes so what we'll</font>

382
00:20:38,940 --> 00:20:45,659
do is<font color="#E5E5E5"> we'll use</font><font color="#CCCCCC"> Lib hijack to emulate a</font>

383
00:20:42,539 --> 00:20:48,960
control flow<font color="#E5E5E5"> hijack will bypass capsicum</font>

384
00:20:45,659 --> 00:20:52,140
<font color="#CCCCCC">by</font><font color="#E5E5E5"> you by mixing sandbox open with FDL</font>

385
00:20:48,960 --> 00:20:56,640
open so much for no arbitrary code

386
00:20:52,140 --> 00:20:59,760
execution<font color="#E5E5E5"> so what we're going to do is</font>

387
00:20:56,640 --> 00:21:02,610
first call sandbox open that alert that

388
00:20:59,760 --> 00:21:05,070
will return us<font color="#E5E5E5"> a file descriptor</font><font color="#CCCCCC"> then we</font>

389
00:21:02,610 --> 00:21:09,149
will call FDL open on the resulting file

390
00:21:05,070 --> 00:21:12,870
descriptor<font color="#CCCCCC"> that will open that</font><font color="#E5E5E5"> will load</font>

391
00:21:09,149 --> 00:21:16,199
<font color="#E5E5E5">the malicious shared object we will call</font>

392
00:21:12,870 --> 00:21:19,289
<font color="#CCCCCC">DL sim which will resolve our malicious</font>

393
00:21:16,200 --> 00:21:22,169
function within<font color="#E5E5E5"> that shared object then</font>

394
00:21:19,289 --> 00:21:26,158
<font color="#E5E5E5">we will patch the PLT G ot with the</font>

395
00:21:22,169 --> 00:21:28,409
<font color="#CCCCCC">address of our malicious function then</font>

396
00:21:26,159 --> 00:21:30,539
within<font color="#E5E5E5"> our malicious function we can</font>

397
00:21:28,409 --> 00:21:33,870
peek into the context structure and

398
00:21:30,539 --> 00:21:36,240
replace sandbox open replace those

399
00:21:33,870 --> 00:21:42,689
function pointers without<font color="#CCCCCC"> maybe</font>

400
00:21:36,240 --> 00:21:45,140
malicious file function pointers so this

401
00:21:42,690 --> 00:21:48,150
is what I'm<font color="#E5E5E5"> going to do the demo and</font>

402
00:21:45,140 --> 00:21:53,190
let's hope that<font color="#CCCCCC"> this works</font>

403
00:21:48,150 --> 00:22:03,110
let's see yeah I'm gonna<font color="#E5E5E5"> try this</font><font color="#CCCCCC"> I need</font>

404
00:21:53,190 --> 00:22:07,740
<font color="#E5E5E5">to plug a</font><font color="#CCCCCC"> few things in so I have here</font>

405
00:22:03,110 --> 00:22:13,500
this is a firewall<font color="#CCCCCC"> that is it's running</font>

406
00:22:07,740 --> 00:22:16,250
tor and it's set up<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that all all of</font>

407
00:22:13,500 --> 00:22:19,080
my network traffic from<font color="#E5E5E5"> my laptop</font>

408
00:22:16,250 --> 00:22:21,240
<font color="#E5E5E5">automatically gets routed through tor</font><font color="#CCCCCC"> I</font>

409
00:22:19,080 --> 00:22:25,168
don't have to configure<font color="#E5E5E5"> my laptop to do</font>

410
00:22:21,240 --> 00:22:27,419
<font color="#E5E5E5">even a single thing</font><font color="#CCCCCC"> I just have to</font>

411
00:22:25,169 --> 00:22:31,020
connect it<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> torrefied</font><font color="#CCCCCC"> Network and</font>

412
00:22:27,419 --> 00:22:34,640
all<font color="#E5E5E5"> of my traffic naturally just goes</font>

413
00:22:31,020 --> 00:22:49,860
through tor<font color="#E5E5E5"> so I'm</font><font color="#CCCCCC"> going to try to</font>

414
00:22:34,640 --> 00:22:52,190
mirror my screens here let's see if<font color="#E5E5E5"> this</font>

415
00:22:49,860 --> 00:22:52,189
works

416
00:22:53,179 --> 00:23:02,850
all right now we're going<font color="#CCCCCC"> to bump up the</font>

417
00:22:59,549 --> 00:23:16,980
font<font color="#E5E5E5"> can you guys see that in the in the</font>

418
00:23:02,850 --> 00:23:21,230
back<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> perfect all right I'm going</font><font color="#CCCCCC"> to</font>

419
00:23:16,980 --> 00:23:21,230
do this and<font color="#CCCCCC"> actually</font>

420
00:23:33,270 --> 00:23:39,520
<font color="#E5E5E5">all right so we can see that when I curl</font>

421
00:23:36,550 --> 00:23:41,490
for my IP address<font color="#E5E5E5"> it took a while</font>

422
00:23:39,520 --> 00:23:46,300
<font color="#E5E5E5">because it's going through</font><font color="#CCCCCC"> tor</font>

423
00:23:41,490 --> 00:23:50,260
<font color="#E5E5E5">automatically now we see that</font><font color="#CCCCCC"> 185 our</font><font color="#E5E5E5"> IP</font>

424
00:23:46,300 --> 00:23:53,169
address<font color="#CCCCCC"> is 185 to 20.1 o1h</font><font color="#E5E5E5"> 8 which</font><font color="#CCCCCC"> is</font>

425
00:23:50,260 --> 00:24:09,240
not the hotel's IP address<font color="#E5E5E5"> it is the</font><font color="#CCCCCC"> Tor</font>

426
00:23:53,170 --> 00:24:15,400
<font color="#CCCCCC">exit node I'm</font><font color="#E5E5E5"> going to stop tour oops</font>

427
00:24:09,240 --> 00:24:17,680
there we<font color="#E5E5E5"> go and then what I'm going to</font>

428
00:24:15,400 --> 00:24:30,070
do is I'm<font color="#CCCCCC"> going to start start tour</font>

429
00:24:17,680 --> 00:24:36,690
again but as my<font color="#E5E5E5"> local user</font><font color="#CCCCCC"> alright so we</font>

430
00:24:30,070 --> 00:24:36,689
see that<font color="#E5E5E5"> tor is running as paid 1793</font>

431
00:24:37,350 --> 00:24:45,399
<font color="#E5E5E5">we're going to take a look at the memory</font>

432
00:24:40,750 --> 00:24:52,570
mappings for 1783<font color="#CCCCCC"> which is</font><font color="#E5E5E5"> tor</font><font color="#CCCCCC"> and we'll</font>

433
00:24:45,400 --> 00:24:56,940
see that<font color="#CCCCCC"> ASLR</font><font color="#E5E5E5"> is not applied now if</font><font color="#CCCCCC"> I</font>

434
00:24:52,570 --> 00:25:00,189
grep for evil because<font color="#CCCCCC"> that's what my</font>

435
00:24:56,940 --> 00:25:04,960
evil shared object is<font color="#E5E5E5"> name is live evil</font>

436
00:25:00,190 --> 00:25:17,140
SOS<font color="#CCCCCC"> oh we can see that the evil shared</font>

437
00:25:04,960 --> 00:25:20,310
object is not loaded<font color="#E5E5E5"> but what we're</font>

438
00:25:17,140 --> 00:25:25,120
<font color="#CCCCCC">going to do is we are going</font><font color="#E5E5E5"> to hijack</font>

439
00:25:20,310 --> 00:25:29,980
<font color="#E5E5E5">we're going to inject the Takei option</font>

440
00:25:25,120 --> 00:25:34,439
says inject a deal open<font color="#CCCCCC"> shelke shell</font>

441
00:25:29,980 --> 00:25:38,800
code that is assembly code that has<font color="#E5E5E5"> been</font>

442
00:25:34,440 --> 00:25:44,020
pre-compiled or<font color="#CCCCCC"> preassembled that</font>

443
00:25:38,800 --> 00:25:48,820
<font color="#CCCCCC">shellcode</font><font color="#E5E5E5"> is going to load a special lib</font>

444
00:25:44,020 --> 00:25:52,330
evil<font color="#E5E5E5"> shared object and that's</font><font color="#CCCCCC"> the tack s</font>

445
00:25:48,820 --> 00:25:56,590
option<font color="#CCCCCC"> the attack F option specifies</font>

446
00:25:52,330 --> 00:26:00,129
which function<font color="#E5E5E5"> it's going to hook in the</font>

447
00:25:56,590 --> 00:26:05,889
runtime<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> in the PLT</font><font color="#CCCCCC"> G ot</font><font color="#E5E5E5"> so we're</font>

448
00:26:00,130 --> 00:26:08,590
gonna<font color="#E5E5E5"> hook the receive function it takes</font>

449
00:26:05,890 --> 00:26:13,150
<font color="#CCCCCC">a few seconds</font><font color="#E5E5E5"> because P trace the</font>

450
00:26:08,590 --> 00:26:19,929
<font color="#E5E5E5">debugging facility is a slow debugging</font>

451
00:26:13,150 --> 00:26:22,260
facility so we<font color="#E5E5E5"> see down</font><font color="#CCCCCC"> below</font><font color="#E5E5E5"> if sorry</font>

452
00:26:19,930 --> 00:26:25,240
some heads might need to be chopped off

453
00:26:22,260 --> 00:26:31,660
<font color="#CCCCCC">you'll see a special string evil SL</font>

454
00:26:25,240 --> 00:26:36,310
loaded so if I do proc stat again<font color="#E5E5E5"> and I</font>

455
00:26:31,660 --> 00:26:43,710
grep for evil we see now that live<font color="#E5E5E5"> evil</font>

456
00:26:36,310 --> 00:26:48,190
<font color="#E5E5E5">s</font><font color="#CCCCCC"> o</font><font color="#E5E5E5"> is loaded now for a bit more fun</font>

457
00:26:43,710 --> 00:26:52,920
we're gonna run<font color="#E5E5E5"> the Bitcoin demon we're</font>

458
00:26:48,190 --> 00:26:52,920
gonna<font color="#E5E5E5"> just</font><font color="#CCCCCC"> sync the Bitcoin block ledger</font>

459
00:26:58,680 --> 00:27:09,540
and on my laptop<font color="#CCCCCC"> I want to grab the kid</font>

460
00:27:11,010 --> 00:27:23,650
on my<font color="#CCCCCC"> laptop</font><font color="#E5E5E5"> I'm going to I'm</font><font color="#CCCCCC"> going to</font>

461
00:27:19,870 --> 00:27:26,500
connect to<font color="#E5E5E5"> FreeBSD org</font><font color="#CCCCCC"> I'm gonna use net</font>

462
00:27:23,650 --> 00:27:29,740
cats<font color="#E5E5E5"> to connect to FreeBSD org on port</font>

463
00:27:26,500 --> 00:27:33,190
80<font color="#CCCCCC"> and I'm gonna</font><font color="#E5E5E5"> send it a special</font>

464
00:27:29,740 --> 00:27:37,660
<font color="#E5E5E5">stream this special string now instructs</font>

465
00:27:33,190 --> 00:27:39,880
the now infected<font color="#CCCCCC"> tour process to go and</font>

466
00:27:37,660 --> 00:27:43,000
infect another process so I'm going to

467
00:27:39,880 --> 00:27:46,060
<font color="#CCCCCC">use an</font><font color="#E5E5E5"> infected process to pivot and</font>

468
00:27:43,000 --> 00:27:48,990
infect yet another one<font color="#E5E5E5"> which in this</font>

469
00:27:46,060 --> 00:27:48,990
case is Bitcoin

470
00:27:51,840 --> 00:28:02,760
we see that<font color="#CCCCCC"> tor is now running the</font>

471
00:27:57,850 --> 00:28:05,169
infect command<font color="#E5E5E5"> and it outputted some</font>

472
00:28:02,760 --> 00:28:08,620
<font color="#E5E5E5">debugging messages and if I go over</font><font color="#CCCCCC"> to</font>

473
00:28:05,170 --> 00:28:19,390
Bitcoin D we see that<font color="#E5E5E5"> Lib evil has been</font>

474
00:28:08,620 --> 00:28:22,239
<font color="#CCCCCC">loaded so if I prep for evil in the pit</font>

475
00:28:19,390 --> 00:28:25,809
we see that evil s<font color="#CCCCCC"> o is loaded so we</font>

476
00:28:22,240 --> 00:28:32,169
pivoted from<font color="#E5E5E5"> one process to</font><font color="#CCCCCC"> another we</font>

477
00:28:25,809 --> 00:28:35,620
can use we can<font color="#E5E5E5"> inject Lib hijack into a</font>

478
00:28:32,169 --> 00:28:40,570
prot into a victim process and use that

479
00:28:35,620 --> 00:28:43,659
to pivot<font color="#E5E5E5"> and infect another now Bitcoin</font>

480
00:28:40,570 --> 00:28:46,570
block letters about<font color="#E5E5E5"> 150 gigs in size and</font>

481
00:28:43,660 --> 00:28:48,610
this<font color="#CCCCCC"> hard drive</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> has 15 gig</font><font color="#E5E5E5"> fifteen</font>

482
00:28:46,570 --> 00:28:54,220
gigs free so I'm going to go ahead<font color="#E5E5E5"> and</font>

483
00:28:48,610 --> 00:28:56,699
control<font color="#E5E5E5"> C that and in fact I'm going</font><font color="#CCCCCC"> to</font>

484
00:28:54,220 --> 00:29:05,500
do that<font color="#E5E5E5"> too</font>

485
00:28:56,700 --> 00:29:09,760
all right what's that<font color="#E5E5E5"> alright so that</font>

486
00:29:05,500 --> 00:29:12,330
<font color="#CCCCCC">was</font><font color="#E5E5E5"> a non capsicum eyes</font><font color="#CCCCCC"> tour process</font>

487
00:29:09,760 --> 00:29:21,400
that's just regular<font color="#CCCCCC"> straight-up</font><font color="#E5E5E5"> tour and</font>

488
00:29:12,330 --> 00:29:24,730
what I'm going<font color="#CCCCCC"> to do now is in fact a</font>

489
00:29:21,400 --> 00:29:29,530
capsicum eyes<font color="#CCCCCC"> tour process now</font><font color="#E5E5E5"> you see</font>

490
00:29:24,730 --> 00:29:33,220
that<font color="#E5E5E5"> underneath that log notice file</font>

491
00:29:29,530 --> 00:29:36,850
line you'll<font color="#E5E5E5"> see that sandbox</font><font color="#CCCCCC"> one is set</font>

492
00:29:33,220 --> 00:29:42,040
that means<font color="#E5E5E5"> enable the sandbox enable</font>

493
00:29:36,850 --> 00:29:48,879
capsicum mode so when I run the capsicum

494
00:29:42,040 --> 00:29:51,879
<font color="#E5E5E5">eyes</font><font color="#CCCCCC"> tour we now see that</font><font color="#E5E5E5"> there's two</font>

495
00:29:48,880 --> 00:29:54,970
<font color="#E5E5E5">pits a child's</font><font color="#CCCCCC"> process and a parent</font>

496
00:29:51,880 --> 00:29:59,070
<font color="#CCCCCC">process and of course the parent process</font>

497
00:29:54,970 --> 00:30:01,220
is paid<font color="#CCCCCC"> 1877</font><font color="#E5E5E5"> and the child processes</font>

498
00:29:59,070 --> 00:30:03,080
1878 because<font color="#CCCCCC"> freebie</font>

499
00:30:01,220 --> 00:30:14,840
<font color="#E5E5E5">Estie does not to randomize their pits</font>

500
00:30:03,080 --> 00:30:18,110
<font color="#E5E5E5">and so the pits are sequential</font><font color="#CCCCCC"> alright</font>

501
00:30:14,840 --> 00:30:21,230
so now what we're going<font color="#CCCCCC"> to do is we're</font>

502
00:30:18,110 --> 00:30:23,840
going<font color="#CCCCCC"> to inject</font><font color="#E5E5E5"> the same type</font><font color="#CCCCCC"> of thing</font>

503
00:30:21,230 --> 00:30:28,700
we're gonna inject in an evil shared

504
00:30:23,840 --> 00:30:31,610
object into a capsicum eyes<font color="#E5E5E5"> - tor now</font>

505
00:30:28,700 --> 00:30:34,789
<font color="#E5E5E5">because we're capsicum eyes we are</font>

506
00:30:31,610 --> 00:30:38,689
<font color="#CCCCCC">limited</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> what we can do</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this isn't</font>

507
00:30:34,789 --> 00:30:42,320
<font color="#E5E5E5">the same evil shared object it's a</font>

508
00:30:38,690 --> 00:30:45,500
miniaturized version<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> a very</font>

509
00:30:42,320 --> 00:30:49,189
limited version of the original<font color="#E5E5E5"> evil</font>

510
00:30:45,500 --> 00:30:55,220
<font color="#E5E5E5">shared object if we're gonna go</font><font color="#CCCCCC"> ahead</font>

511
00:30:49,190 --> 00:31:05,780
<font color="#CCCCCC">and hook receive again</font><font color="#E5E5E5"> we see many evil</font>

512
00:30:55,220 --> 00:31:14,020
loaded<font color="#CCCCCC"> all right so now</font><font color="#E5E5E5"> I think that's</font>

513
00:31:05,780 --> 00:31:14,020
it for<font color="#E5E5E5"> loop hijack back to the slides</font>

514
00:31:21,820 --> 00:31:26,629
<font color="#CCCCCC">all right the Mac framework mandatory</font>

515
00:31:24,710 --> 00:31:28,220
access control framework<font color="#E5E5E5"> Oh before</font><font color="#CCCCCC"> I</font>

516
00:31:26,630 --> 00:31:32,230
move on does anyone have any<font color="#CCCCCC"> questions</font>

517
00:31:28,220 --> 00:31:38,000
<font color="#E5E5E5">about what I just</font><font color="#CCCCCC"> demonstrated I</font>

518
00:31:32,230 --> 00:31:41,090
demonstrated using<font color="#CCCCCC"> Lib hijack to infect</font>

519
00:31:38,000 --> 00:31:43,640
<font color="#E5E5E5">a non capsicum</font><font color="#CCCCCC"> IIST process and we were</font>

520
00:31:41,090 --> 00:31:46,699
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> use that to pivot to another</font>

521
00:31:43,640 --> 00:31:49,700
process to<font color="#E5E5E5"> infect to use one infected</font>

522
00:31:46,700 --> 00:31:53,330
process to infect<font color="#CCCCCC"> another we also</font>

523
00:31:49,700 --> 00:31:56,120
<font color="#CCCCCC">demonstrated an arbitrary code execution</font>

524
00:31:53,330 --> 00:32:01,580
<font color="#E5E5E5">gaining arbitrary code execution in a</font>

525
00:31:56,120 --> 00:32:04,000
capsicum eyes<font color="#CCCCCC"> tour process so intro to</font>

526
00:32:01,580 --> 00:32:06,620
the Mac framework the Mac framework

527
00:32:04,000 --> 00:32:10,190
<font color="#E5E5E5">really</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> hooks in various parts of</font>

528
00:32:06,620 --> 00:32:13,110
<font color="#E5E5E5">the kernel so whenever you open</font><font color="#CCCCCC"> a file</font>

529
00:32:10,190 --> 00:32:17,040
or delete a file or even<font color="#E5E5E5"> call stat</font>

530
00:32:13,110 --> 00:32:18,928
file whenever<font color="#CCCCCC"> you execute a binary there</font>

531
00:32:17,040 --> 00:32:25,260
are hooks for<font color="#E5E5E5"> those things in the kernel</font>

532
00:32:18,929 --> 00:32:27,900
<font color="#CCCCCC">and so by implementing by utilizing</font>

533
00:32:25,260 --> 00:32:30,059
<font color="#E5E5E5">those hooks we can implement security</font>

534
00:32:27,900 --> 00:32:33,059
measures<font color="#E5E5E5"> within the kernel and</font><font color="#CCCCCC"> in fact</font>

535
00:32:30,059 --> 00:32:36,928
<font color="#E5E5E5">OS 10 and juniper do that</font>

536
00:32:33,059 --> 00:32:39,540
OS 10 actually<font color="#CCCCCC"> uh helped develop the Mac</font>

537
00:32:36,929 --> 00:32:41,340
framework in<font color="#CCCCCC"> FreeBSD</font><font color="#E5E5E5"> you think</font><font color="#CCCCCC"> Apple</font>

538
00:32:39,540 --> 00:32:44,280
doesn't<font color="#E5E5E5"> really a lot of people think</font>

539
00:32:41,340 --> 00:32:47,070
<font color="#CCCCCC">Apple doesn't</font><font color="#E5E5E5"> really contribute to open</font>

540
00:32:44,280 --> 00:32:49,080
source<font color="#E5E5E5"> but that's not the case</font>

541
00:32:47,070 --> 00:32:52,980
Apple contributes a lot<font color="#CCCCCC"> to open</font><font color="#E5E5E5"> source</font>

542
00:32:49,080 --> 00:32:57,360
<font color="#E5E5E5">in conjunction with DARPA</font><font color="#CCCCCC"> and the</font>

543
00:32:52,980 --> 00:32:59,940
University Cambridge in England<font color="#CCCCCC"> Apple</font>

544
00:32:57,360 --> 00:33:03,149
helped<font color="#CCCCCC"> in</font><font color="#E5E5E5"> help to develop the Mac</font>

545
00:32:59,940 --> 00:33:05,250
framework<font color="#E5E5E5"> and they use it along with</font>

546
00:33:03,150 --> 00:33:10,380
juniper for executable signing so they

547
00:33:05,250 --> 00:33:12,570
sign all of<font color="#E5E5E5"> their executables</font><font color="#CCCCCC"> hardened</font>

548
00:33:10,380 --> 00:33:14,760
<font color="#E5E5E5">BSD uses it to toggle exploit</font>

549
00:33:12,570 --> 00:33:17,820
mitigations on a per<font color="#E5E5E5"> application and per</font>

550
00:33:14,760 --> 00:33:20,580
<font color="#E5E5E5">jail basis in</font><font color="#CCCCCC"> FreeBSD there's something</font>

551
00:33:17,820 --> 00:33:23,129
called you<font color="#CCCCCC"> GFW which is a</font><font color="#E5E5E5"> user space</font>

552
00:33:20,580 --> 00:33:28,439
<font color="#CCCCCC">filesystem</font><font color="#E5E5E5"> firewall so you can use the</font>

553
00:33:23,130 --> 00:33:30,929
Mac framework to say these users or

554
00:33:28,440 --> 00:33:33,750
groups should<font color="#CCCCCC"> be able to access</font><font color="#E5E5E5"> only</font>

555
00:33:30,929 --> 00:33:37,110
<font color="#E5E5E5">these parts of the file</font><font color="#CCCCCC"> system in this</font>

556
00:33:33,750 --> 00:33:41,160
way<font color="#E5E5E5"> you can implement a discretionary</font>

557
00:33:37,110 --> 00:33:42,750
access control<font color="#E5E5E5"> with Mac</font><font color="#CCCCCC"> bita so if you</font>

558
00:33:41,160 --> 00:33:45,540
want<font color="#E5E5E5"> to experience pain go ahead and</font>

559
00:33:42,750 --> 00:33:50,820
port<font color="#CCCCCC"> SELinux the</font><font color="#E5E5E5"> Mac framework really is</font>

560
00:33:45,540 --> 00:33:54,000
is is complete enough for<font color="#E5E5E5"> that you</font>

561
00:33:50,820 --> 00:33:56,730
<font color="#E5E5E5">probably wouldn't want</font><font color="#CCCCCC"> to write rootkits</font>

562
00:33:54,000 --> 00:34:00,510
using the Mac framework<font color="#E5E5E5"> in in production</font>

563
00:33:56,730 --> 00:34:04,770
in the real world<font color="#CCCCCC"> because there's an</font>

564
00:34:00,510 --> 00:34:07,520
<font color="#CCCCCC">audit trail you can use the Mac rootkits</font>

565
00:34:04,770 --> 00:34:10,440
<font color="#E5E5E5">to give you ideas of</font><font color="#CCCCCC"> what you can do in</font>

566
00:34:07,520 --> 00:34:12,810
in<font color="#E5E5E5"> the kernel though you can break</font><font color="#CCCCCC"> out</font>

567
00:34:10,440 --> 00:34:15,929
use<font color="#E5E5E5"> mat</font><font color="#CCCCCC"> Mac</font><font color="#E5E5E5"> root kits to break out of</font>

568
00:34:12,810 --> 00:34:19,440
<font color="#E5E5E5">jail</font><font color="#CCCCCC"> you can break out of capabilities</font>

569
00:34:15,929 --> 00:34:21,300
mode<font color="#E5E5E5"> you can perform trove traditional</font>

570
00:34:19,440 --> 00:34:24,210
privilege escalation attacks and

571
00:34:21,300 --> 00:34:26,520
<font color="#CCCCCC">overwrite other hooks of</font><font color="#E5E5E5"> the Mac modules</font>

572
00:34:24,210 --> 00:34:30,418
one of the things that<font color="#E5E5E5"> windows taught us</font>

573
00:34:26,520 --> 00:34:35,040
though is that<font color="#E5E5E5"> if you need if you want</font>

574
00:34:30,418 --> 00:34:40,739
if you need to have a gain trust<font color="#E5E5E5"> in a</font>

575
00:34:35,040 --> 00:34:43,980
system<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know just name your</font><font color="#E5E5E5"> objects</font>

576
00:34:40,739 --> 00:34:48,299
<font color="#E5E5E5">something trustworthy like ntdll sec dll</font>

577
00:34:43,980 --> 00:34:52,649
<font color="#E5E5E5">and</font><font color="#CCCCCC"> so if you wanted to</font><font color="#E5E5E5"> if you did want</font>

578
00:34:48,300 --> 00:34:56,099
to use the<font color="#E5E5E5"> Mac framework and for writing</font>

579
00:34:52,649 --> 00:34:59,250
<font color="#CCCCCC">root kits</font><font color="#E5E5E5"> you know</font><font color="#CCCCCC"> use a</font><font color="#E5E5E5"> trusted</font>

580
00:34:56,099 --> 00:35:07,020
trustworthy name like super secure

581
00:34:59,250 --> 00:35:09,809
awesome Mac thing<font color="#CCCCCC"> so because that that</font>

582
00:35:07,020 --> 00:35:15,300
that name gets outputted into<font color="#E5E5E5"> D message</font>

583
00:35:09,809 --> 00:35:18,020
so it gets its auditable so what we're

584
00:35:15,300 --> 00:35:21,240
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> do is we're</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> dem do a demo of</font>

585
00:35:18,020 --> 00:35:23,910
three things<font color="#E5E5E5"> we're gonna do a jailbreak</font>

586
00:35:21,240 --> 00:35:27,109
<font color="#CCCCCC">a lot</font><font color="#E5E5E5"> of people think oh hey</font><font color="#CCCCCC"> Linux has</font>

587
00:35:23,910 --> 00:35:29,308
docker<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> awesome that's a new thing</font>

588
00:35:27,109 --> 00:35:31,578
<font color="#E5E5E5">containerization is great</font><font color="#CCCCCC"> it's new it's</font>

589
00:35:29,309 --> 00:35:33,690
wonderful<font color="#E5E5E5"> well</font><font color="#CCCCCC"> freebsd</font><font color="#E5E5E5"> has had</font>

590
00:35:31,579 --> 00:35:38,299
<font color="#E5E5E5">containerization for almost twenty years</font>

591
00:35:33,690 --> 00:35:40,890
now<font color="#CCCCCC"> through its</font><font color="#E5E5E5"> jail-jail framework</font><font color="#CCCCCC"> and</font>

592
00:35:38,299 --> 00:35:43,619
so what we're gonna do is we're gonna

593
00:35:40,890 --> 00:35:47,220
<font color="#E5E5E5">break out of out</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the jail using a Mac</font>

594
00:35:43,619 --> 00:35:50,549
<font color="#E5E5E5">rootkit then what we're gonna do is</font>

595
00:35:47,220 --> 00:35:54,240
we're gonna force all<font color="#CCCCCC"> Network</font><font color="#E5E5E5"> daemons to</font>

596
00:35:50,549 --> 00:35:58,259
bind on all interfaces regardless of how

597
00:35:54,240 --> 00:36:00,359
<font color="#E5E5E5">that demon is configured even if it's</font>

598
00:35:58,260 --> 00:36:05,599
configured<font color="#CCCCCC"> to listen on localhost so</font>

599
00:36:00,359 --> 00:36:10,920
127.0.0.1<font color="#CCCCCC"> we will force that</font><font color="#E5E5E5"> demon</font><font color="#CCCCCC"> to</font>

600
00:36:05,599 --> 00:36:13,859
<font color="#E5E5E5">bind to all interfaces</font><font color="#CCCCCC"> and the third</font>

601
00:36:10,920 --> 00:36:17,150
demo for the<font color="#E5E5E5"> Mac</font><font color="#CCCCCC"> rootkits</font><font color="#E5E5E5"> is to disable</font>

602
00:36:13,859 --> 00:36:17,150
capability this mode

603
00:36:23,619 --> 00:36:33,969
all right so I have I have an existing

604
00:36:31,269 --> 00:36:35,738
jail called jail -<font color="#CCCCCC"> and zero one it's</font>

605
00:36:33,969 --> 00:36:41,259
<font color="#E5E5E5">already booted up</font><font color="#CCCCCC"> and it's already</font>

606
00:36:35,739 --> 00:36:47,799
<font color="#CCCCCC">running in the</font><font color="#E5E5E5"> host environment</font><font color="#CCCCCC"> if I</font>

607
00:36:41,259 --> 00:36:50,259
look to see<font color="#CCCCCC"> if I'm jailed that zero</font>

608
00:36:47,799 --> 00:36:53,670
means<font color="#E5E5E5"> that I'm not jailed so I'm looking</font>

609
00:36:50,259 --> 00:36:57,160
to<font color="#E5E5E5"> see sis CTL security jail jailed</font>

610
00:36:53,670 --> 00:37:00,999
checks to see if I am in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> jailed or in</font>

611
00:36:57,160 --> 00:37:06,538
a containerized environment so if I run

612
00:37:00,999 --> 00:37:06,538
that<font color="#E5E5E5"> same command within the container</font>

613
00:37:17,430 --> 00:37:29,469
that'll show me that by<font color="#E5E5E5"> returning one</font>

614
00:37:20,969 --> 00:37:46,690
<font color="#E5E5E5">that I am jailed so what I'm gonna do is</font>

615
00:37:29,469 --> 00:37:49,989
I'm gonna load the jailbreak rootkit and

616
00:37:46,690 --> 00:37:55,509
I'm going to<font color="#E5E5E5"> go ahead and check to</font><font color="#CCCCCC"> see</font>

617
00:37:49,989 --> 00:37:58,719
if within<font color="#E5E5E5"> that jail I'm jailed so I just</font>

618
00:37:55,509 --> 00:38:03,239
<font color="#CCCCCC">round J exact space the name</font><font color="#E5E5E5"> of the jail</font>

619
00:37:58,719 --> 00:38:07,329
<font color="#E5E5E5">which in this case is</font><font color="#CCCCCC"> JLo</font><font color="#E5E5E5"> one sis CTL</font>

620
00:38:03,239 --> 00:38:11,229
security<font color="#CCCCCC"> jail jailed</font><font color="#E5E5E5"> and that shows a</font>

621
00:38:07,329 --> 00:38:14,920
now a value of<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> because the Mac</font>

622
00:38:11,229 --> 00:38:21,038
rootkit is going through<font color="#E5E5E5"> all the jails</font>

623
00:38:14,920 --> 00:38:23,650
and and setting the jailed property<font color="#CCCCCC"> or</font>

624
00:38:21,039 --> 00:38:30,369
<font color="#E5E5E5">the prison property to be the the the</font>

625
00:38:23,650 --> 00:38:35,250
host<font color="#E5E5E5"> so if I go ahead and unload the</font>

626
00:38:30,369 --> 00:38:39,690
jailbreak module and rerun

627
00:38:35,250 --> 00:38:45,810
that to check to see<font color="#CCCCCC"> if we're jailed</font><font color="#E5E5E5"> we</font>

628
00:38:39,690 --> 00:38:50,310
now see<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we're jailed again now this</font>

629
00:38:45,810 --> 00:38:53,610
<font color="#E5E5E5">I have it I</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a test application for</font>

630
00:38:50,310 --> 00:38:57,180
capsicum it accepts one argument<font color="#E5E5E5"> and</font>

631
00:38:53,610 --> 00:39:00,810
<font color="#CCCCCC">that argument is an application that</font>

632
00:38:57,180 --> 00:39:04,589
it's going<font color="#CCCCCC"> to execute so what I do is I</font>

633
00:39:00,810 --> 00:39:07,560
open that<font color="#E5E5E5"> application then I enter</font>

634
00:39:04,590 --> 00:39:11,510
capabilities mode<font color="#E5E5E5"> and then I execute</font>

635
00:39:07,560 --> 00:39:17,820
that application under normal

636
00:39:11,510 --> 00:39:20,730
<font color="#E5E5E5">circumstances that fails because once I</font>

637
00:39:17,820 --> 00:39:22,410
once I enter capabilities mode<font color="#CCCCCC"> I no</font>

638
00:39:20,730 --> 00:39:25,260
<font color="#E5E5E5">longer have access</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the global</font>

639
00:39:22,410 --> 00:39:28,259
<font color="#E5E5E5">namespace</font><font color="#CCCCCC"> which means I cannot</font><font color="#E5E5E5"> open any</font>

640
00:39:25,260 --> 00:39:34,020
<font color="#CCCCCC">new files when the operating system</font>

641
00:39:28,260 --> 00:39:36,900
attempts to run<font color="#E5E5E5"> bin LS it cannot load it</font>

642
00:39:34,020 --> 00:39:54,300
cannot open<font color="#E5E5E5"> the runtime linker which is</font>

643
00:39:36,900 --> 00:40:01,820
Lib exec<font color="#CCCCCC"> ldlt so dot</font><font color="#E5E5E5"> one so now</font><font color="#CCCCCC"> I've</font>

644
00:39:54,300 --> 00:40:05,430
loaded<font color="#E5E5E5"> the rootkit that uncap</font><font color="#CCCCCC"> suka</font><font color="#E5E5E5"> mises</font>

645
00:40:01,820 --> 00:40:07,380
applications<font color="#E5E5E5"> so now when I run the</font>

646
00:40:05,430 --> 00:40:09,390
capsicum eyes<font color="#E5E5E5"> dap location and try</font><font color="#CCCCCC"> to</font>

647
00:40:07,380 --> 00:40:16,040
run bin LS within it

648
00:40:09,390 --> 00:40:21,240
I now can so<font color="#E5E5E5"> let's go ahead and unload</font>

649
00:40:16,040 --> 00:40:25,860
the rootkit<font color="#E5E5E5"> and retry running our</font>

650
00:40:21,240 --> 00:40:30,660
application again<font color="#CCCCCC"> and we get an abort</font><font color="#E5E5E5"> we</font>

651
00:40:25,860 --> 00:40:36,930
can no longer<font color="#E5E5E5"> execute</font><font color="#CCCCCC"> open access the</font>

652
00:40:30,660 --> 00:40:39,560
<font color="#CCCCCC">global namespace so now remember that</font>

653
00:40:36,930 --> 00:40:41,330
capsicum eyes<font color="#CCCCCC"> dat or take another</font><font color="#E5E5E5"> shot</font>

654
00:40:39,560 --> 00:40:44,389
in

655
00:40:41,330 --> 00:40:44,389
[Music]

656
00:40:45,100 --> 00:40:58,950
have it configured to<font color="#CCCCCC"> listen on a sock</font>

657
00:40:51,970 --> 00:41:07,859
sport on 127.0.0.1<font color="#E5E5E5"> pork</font><font color="#CCCCCC"> 9050 so if I run</font>

658
00:40:58,950 --> 00:41:09,759
<font color="#CCCCCC">tor then</font><font color="#E5E5E5"> I see that</font><font color="#CCCCCC"> tor is listening</font><font color="#E5E5E5"> on</font>

659
00:41:07,860 --> 00:41:20,070
127.0.0.1

660
00:41:09,760 --> 00:41:20,070
<font color="#CCCCCC">9050</font><font color="#E5E5E5"> now if</font><font color="#CCCCCC"> I load</font><font color="#E5E5E5"> the bind all rootkit</font>

661
00:41:25,770 --> 00:41:31,259
and rerun tor

662
00:41:32,370 --> 00:41:48,430
now we see that<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> listening on all</font>

663
00:41:35,280 --> 00:41:51,460
interfaces<font color="#CCCCCC"> port 9050 so we're gonna run</font>

664
00:41:48,430 --> 00:41:55,779
<font color="#CCCCCC">i just unloaded the bind</font><font color="#E5E5E5"> all rootkit</font>

665
00:41:51,460 --> 00:42:13,840
<font color="#E5E5E5">we're gonna run tour again and we see</font>

666
00:41:55,780 --> 00:42:16,750
that still now<font color="#CCCCCC"> localhost</font><font color="#E5E5E5"> so there's more</font>

667
00:42:13,840 --> 00:42:19,480
stuff to do with<font color="#CCCCCC"> the Matt Mac</font><font color="#E5E5E5"> rootkit</font><font color="#CCCCCC"> I</font>

668
00:42:16,750 --> 00:42:24,520
want to add more templates<font color="#E5E5E5"> there's more</font>

669
00:42:19,480 --> 00:42:28,450
more in<font color="#E5E5E5"> the repo the the rootkit repos</font>

670
00:42:24,520 --> 00:42:30,759
public it's on soldier X's github and I

671
00:42:28,450 --> 00:42:33,250
need to add in<font color="#E5E5E5"> rootkit templates and tie</font>

672
00:42:30,760 --> 00:42:35,350
them all into one<font color="#E5E5E5"> all-inclusive module</font>

673
00:42:33,250 --> 00:42:41,710
to show what you<font color="#CCCCCC"> can do with those root</font>

674
00:42:35,350 --> 00:42:44,200
kits with<font color="#E5E5E5"> Lib hijack</font><font color="#CCCCCC"> I need to write</font>

675
00:42:41,710 --> 00:42:46,720
<font color="#CCCCCC">that remote runtime linker</font><font color="#E5E5E5"> that is a</font>

676
00:42:44,200 --> 00:42:52,569
really<font color="#E5E5E5"> tough thing</font><font color="#CCCCCC"> to do to load shared</font>

677
00:42:46,720 --> 00:42:55,899
objects in a remote process<font color="#E5E5E5"> over P trace</font>

678
00:42:52,570 --> 00:42:58,180
that's<font color="#E5E5E5"> not an easy task</font><font color="#CCCCCC"> and I took a</font>

679
00:42:55,900 --> 00:43:03,130
stab at it<font color="#E5E5E5"> once around</font>

680
00:42:58,180 --> 00:43:07,810
around<font color="#E5E5E5"> 2013-2014</font><font color="#CCCCCC"> and it took</font><font color="#E5E5E5"> me six</font>

681
00:43:03,130 --> 00:43:09,329
months<font color="#E5E5E5"> and I gave up so I'm currently</font>

682
00:43:07,810 --> 00:43:13,299
still doing more<font color="#CCCCCC"> research in that</font><font color="#E5E5E5"> area</font>

683
00:43:09,329 --> 00:43:16,060
<font color="#E5E5E5">so that we can inject anonymously those</font>

684
00:43:13,300 --> 00:43:19,930
shared objects<font color="#CCCCCC"> I'd like to port</font><font color="#E5E5E5"> to more</font>

685
00:43:16,060 --> 00:43:22,180
architectures like 32-bit Intel arm

686
00:43:19,930 --> 00:43:26,649
could be<font color="#E5E5E5"> done</font><font color="#CCCCCC"> RISC</font><font color="#E5E5E5"> five would be fun</font>

687
00:43:22,180 --> 00:43:30,730
<font color="#CCCCCC">there</font><font color="#E5E5E5"> power</font><font color="#CCCCCC"> 9 power</font><font color="#E5E5E5"> 9 would be cool</font><font color="#CCCCCC"> and</font>

688
00:43:26,650 --> 00:43:34,810
power<font color="#CCCCCC"> 8</font><font color="#E5E5E5"> is there a power 9 board out yet</font>

689
00:43:30,730 --> 00:43:38,050
dev<font color="#E5E5E5"> board</font><font color="#CCCCCC"> I think that is</font><font color="#E5E5E5"> the Raptor</font><font color="#CCCCCC"> to</font>

690
00:43:34,810 --> 00:43:44,230
I think<font color="#CCCCCC"> might be a might be out that</font>

691
00:43:38,050 --> 00:43:46,480
could be power<font color="#CCCCCC"> 8 though risk 5 would</font><font color="#E5E5E5"> be</font>

692
00:43:44,230 --> 00:43:49,540
<font color="#E5E5E5">really fun for</font><font color="#CCCCCC"> loop hijack</font><font color="#E5E5E5"> there's now a</font>

693
00:43:46,480 --> 00:43:54,069
risk<font color="#E5E5E5"> 5 dev board that</font><font color="#CCCCCC"> costs 1,200 bucks</font>

694
00:43:49,540 --> 00:43:55,960
<font color="#CCCCCC">and I'm having a little bit of trouble</font>

695
00:43:54,069 --> 00:43:59,800
<font color="#CCCCCC">right now convincing my wife to give me</font>

696
00:43:55,960 --> 00:44:03,250
a<font color="#CCCCCC"> $1,200 toy I don't blame her at all</font>

697
00:43:59,800 --> 00:44:08,710
but<font color="#CCCCCC"> that would</font><font color="#E5E5E5"> be a lot of fun to port</font>

698
00:44:03,250 --> 00:44:12,460
it<font color="#CCCCCC"> to risk</font><font color="#E5E5E5"> 5 64-bit yep</font><font color="#CCCCCC"> FreeBSD on risk</font>

699
00:44:08,710 --> 00:44:16,540
5 though<font color="#E5E5E5"> only supports a 39 bit address</font>

700
00:44:12,460 --> 00:44:20,079
space<font color="#CCCCCC"> which is weird they actually</font><font color="#E5E5E5"> they</font>

701
00:44:16,540 --> 00:44:23,770
<font color="#E5E5E5">tree</font><font color="#CCCCCC"> BSD first supported 32-bit risc</font><font color="#E5E5E5"> 5</font>

702
00:44:20,079 --> 00:44:30,010
<font color="#E5E5E5">then they went to 64-bit then they went</font>

703
00:44:23,770 --> 00:44:31,869
<font color="#E5E5E5">back down to 39 bit I don't know why so</font>

704
00:44:30,010 --> 00:44:33,849
if someone wants to<font color="#E5E5E5"> bring back</font><font color="#CCCCCC"> Linux</font>

705
00:44:31,869 --> 00:44:37,329
<font color="#CCCCCC">support that'd be cool</font>

706
00:44:33,849 --> 00:44:40,990
<font color="#CCCCCC">I I don't really run Linux so I'm not</font>

707
00:44:37,329 --> 00:44:43,300
<font color="#E5E5E5">really all too interested in it so we've</font>

708
00:44:40,990 --> 00:44:45,430
showed that<font color="#E5E5E5"> lib hijack is an effective</font>

709
00:44:43,300 --> 00:44:48,900
post exploitation tool that<font color="#E5E5E5"> can even be</font>

710
00:44:45,430 --> 00:44:51,910
<font color="#E5E5E5">used to emulate to control flow hijacks</font>

711
00:44:48,900 --> 00:44:54,730
<font color="#CCCCCC">the Mac framework could</font><font color="#E5E5E5"> be can be abused</font>

712
00:44:51,910 --> 00:44:56,470
but really it's it's<font color="#E5E5E5"> fun and it shows</font>

713
00:44:54,730 --> 00:44:59,079
you<font color="#CCCCCC"> what you</font><font color="#E5E5E5"> can do when writing a</font>

714
00:44:56,470 --> 00:45:01,810
rootkit<font color="#E5E5E5"> some powerful</font><font color="#CCCCCC"> things and it</font>

715
00:44:59,079 --> 00:45:06,940
makes writing bits and pieces of your

716
00:45:01,810 --> 00:45:10,150
rootkit<font color="#E5E5E5"> pretty easy to do but really I</font>

717
00:45:06,940 --> 00:45:14,049
mean shouldn't<font color="#E5E5E5"> really do that in</font>

718
00:45:10,150 --> 00:45:16,509
in the real<font color="#E5E5E5"> world to mitigate lib hijack</font>

719
00:45:14,049 --> 00:45:21,069
disabled unprivileged about debugging

720
00:45:16,509 --> 00:45:24,329
<font color="#CCCCCC">and that means that users can only debug</font>

721
00:45:21,069 --> 00:45:28,660
processes<font color="#E5E5E5"> that they themselves fork so</font>

722
00:45:24,329 --> 00:45:31,859
like gdb and<font color="#CCCCCC"> LDB can only attach to</font>

723
00:45:28,660 --> 00:45:34,480
processes that they themselves<font color="#E5E5E5"> fork</font>

724
00:45:31,859 --> 00:45:37,089
implement<font color="#E5E5E5"> implementing</font><font color="#CCCCCC"> PACs no exact</font>

725
00:45:34,480 --> 00:45:42,210
would be an additional help because then

726
00:45:37,089 --> 00:45:46,839
with PACs no exact<font color="#E5E5E5"> you cannot write to</font>

727
00:45:42,210 --> 00:45:50,339
non<font color="#E5E5E5"> writable memory allocations PACs no</font>

728
00:45:46,839 --> 00:45:52,990
<font color="#CCCCCC">exec applies to the P trace boundary</font>

729
00:45:50,339 --> 00:45:57,880
implementing PACs<font color="#E5E5E5"> a SLR would mean that</font>

730
00:45:52,990 --> 00:46:00,758
you need<font color="#E5E5E5"> to make your your payloads</font>

731
00:45:57,880 --> 00:46:02,339
dynamic and it just adds another<font color="#E5E5E5"> layer</font>

732
00:46:00,759 --> 00:46:04,720
of<font color="#E5E5E5"> complexity</font>

733
00:46:02,339 --> 00:46:09,578
you know<font color="#CCCCCC"> harden BSD has all of</font><font color="#E5E5E5"> this</font>

734
00:46:04,720 --> 00:46:11,709
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> so maybe just</font><font color="#E5E5E5"> run that to mitigate</font>

735
00:46:09,579 --> 00:46:14,650
<font color="#E5E5E5">Mac rootkits you could disable Mac and</font>

736
00:46:11,710 --> 00:46:17,529
the kernel<font color="#E5E5E5"> and you could disable the</font>

737
00:46:14,650 --> 00:46:21,430
kernel interface entirely<font color="#E5E5E5"> kernel module</font>

738
00:46:17,529 --> 00:46:24,150
loading interface entirely so on

739
00:46:21,430 --> 00:46:28,390
the code is on github<font color="#E5E5E5"> so if you go to</font>

740
00:46:24,150 --> 00:46:34,299
soldier X's github<font color="#E5E5E5"> you'll find both</font><font color="#CCCCCC"> Lib</font>

741
00:46:28,390 --> 00:46:55,089
hijack and the macro kiss and<font color="#E5E5E5"> any</font>

742
00:46:34,299 --> 00:47:05,009
questions comments<font color="#E5E5E5"> heckling right there</font>

743
00:46:55,089 --> 00:47:06,308
is so<font color="#E5E5E5"> you can you can hook the the</font><font color="#CCCCCC"> I</font>

744
00:47:05,009 --> 00:47:09,640
<font color="#CCCCCC">octaves</font>

745
00:47:06,309 --> 00:47:12,309
I believe those are<font color="#E5E5E5"> grabbed via I</font>

746
00:47:09,640 --> 00:47:16,839
<font color="#CCCCCC">octaves</font><font color="#E5E5E5"> when you create</font><font color="#CCCCCC"> it you create a</font>

747
00:47:12,309 --> 00:47:20,600
special routing socket that will

748
00:47:16,840 --> 00:47:23,180
that will tell<font color="#E5E5E5"> you you can get</font>

749
00:47:20,600 --> 00:47:25,279
information about the<font color="#E5E5E5"> routes and</font><font color="#CCCCCC"> melvin</font>

750
00:47:23,180 --> 00:47:29,299
you know netstat<font color="#E5E5E5"> under the hood uses i</font>

751
00:47:25,280 --> 00:47:36,470
octaves with routing sockets so you can

752
00:47:29,300 --> 00:47:42,010
hook those<font color="#E5E5E5"> interfaces and mock the right</font>

753
00:47:36,470 --> 00:47:44,390
<font color="#CCCCCC">output any other questions alright so</font>

754
00:47:42,010 --> 00:47:47,210
<font color="#E5E5E5">because time was limited</font><font color="#CCCCCC"> i didn't</font><font color="#E5E5E5"> really</font>

755
00:47:44,390 --> 00:47:50,779
<font color="#E5E5E5">have much time to go dive into the code</font>

756
00:47:47,210 --> 00:47:52,310
<font color="#E5E5E5">so if anyone</font><font color="#CCCCCC"> wants to sit through and go</font>

757
00:47:50,780 --> 00:47:56,930
<font color="#CCCCCC">through the code with me i'm here</font><font color="#E5E5E5"> all</font>

758
00:47:52,310 --> 00:47:59,900
weekend and<font color="#CCCCCC"> i'd love</font><font color="#E5E5E5"> to show you how</font>

759
00:47:56,930 --> 00:48:03,200
everything<font color="#CCCCCC"> works</font><font color="#E5E5E5"> under the hood</font><font color="#CCCCCC"> i can be</font>

760
00:47:59,900 --> 00:48:07,690
<font color="#E5E5E5">reached on twitter</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> mastodons and a</font>

761
00:48:03,200 --> 00:48:10,899
torrefied signal so that's a lot of fun

762
00:48:07,690 --> 00:48:14,320
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much</font>

763
00:48:10,900 --> 00:48:14,320
[Applause]

