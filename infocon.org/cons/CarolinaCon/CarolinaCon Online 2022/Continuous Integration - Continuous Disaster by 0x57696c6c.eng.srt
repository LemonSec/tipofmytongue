1
00:00:02,639 --> 00:00:05,359
hello everyone i'm will alexander and

2
00:00:05,359 --> 00:00:06,879
thanks for having interest in my first

3
00:00:06,879 --> 00:00:09,840
ever con talk here at carolinacon

4
00:00:09,840 --> 00:00:11,679
i'm currently a red team engineer at

5
00:00:11,679 --> 00:00:14,320
palo alto networks

6
00:00:14,320 --> 00:00:16,239
i've got some defensive experience with

7
00:00:16,239 --> 00:00:17,600
some sock work

8
00:00:17,600 --> 00:00:20,880
incident response and threat hunting

9
00:00:20,880 --> 00:00:22,960
i moved over to the red side because i

10
00:00:22,960 --> 00:00:25,519
really enjoy abusing technology so for

11
00:00:25,519 --> 00:00:27,439
the last few years i've been advancing

12
00:00:27,439 --> 00:00:29,039
my tradecraft to become a better

13
00:00:29,039 --> 00:00:30,720
operator

14
00:00:30,720 --> 00:00:32,320
my wife and i are expecting our first

15
00:00:32,320 --> 00:00:34,160
child in september and i'm elated to

16
00:00:34,160 --> 00:00:36,239
start that chapter of my life

17
00:00:36,239 --> 00:00:38,079
and finally feel free to reach out to me

18
00:00:38,079 --> 00:00:41,120
on twitter or discord

19
00:00:43,040 --> 00:00:44,559
during this presentation

20
00:00:44,559 --> 00:00:46,879
i'd like to cover the ins and outs of

21
00:00:46,879 --> 00:00:50,160
cicd and discuss some notable real-world

22
00:00:50,160 --> 00:00:53,600
supply chain attacks to set the tone

23
00:00:53,600 --> 00:00:55,360
then i'd like to discuss some techniques

24
00:00:55,360 --> 00:00:58,399
my team and i used to abuse cicd in a

25
00:00:58,399 --> 00:01:00,640
red team engagement which enabled us to

26
00:01:00,640 --> 00:01:02,559
moonwalk through my organization's cloud

27
00:01:02,559 --> 00:01:04,319
environment

28
00:01:04,319 --> 00:01:05,280
finally

29
00:01:05,280 --> 00:01:07,200
i'll close out the talk with some devops

30
00:01:07,200 --> 00:01:09,119
and security considerations being

31
00:01:09,119 --> 00:01:11,360
implemented at palo alto networks and

32
00:01:11,360 --> 00:01:15,040
general supply chain mitigations

33
00:01:16,799 --> 00:01:19,920
cicd is a devops methodology used to

34
00:01:19,920 --> 00:01:22,479
frequently deliver apps to customers by

35
00:01:22,479 --> 00:01:24,159
automating stages of the software

36
00:01:24,159 --> 00:01:26,640
development lifecycle

37
00:01:26,640 --> 00:01:28,960
continuous integration is the process

38
00:01:28,960 --> 00:01:31,040
that occurs after a developer checks

39
00:01:31,040 --> 00:01:33,520
code into a repository like gitlab or

40
00:01:33,520 --> 00:01:35,520
bitbucket

41
00:01:35,520 --> 00:01:37,840
after making changes the code is merged

42
00:01:37,840 --> 00:01:39,920
into the master branch which kicks off a

43
00:01:39,920 --> 00:01:42,240
build process

44
00:01:42,240 --> 00:01:44,159
the build process creates the needed

45
00:01:44,159 --> 00:01:47,040
artifacts and the code is run and tested

46
00:01:47,040 --> 00:01:49,040
with feedback automatically provided to

47
00:01:49,040 --> 00:01:51,200
the developer so they can know if their

48
00:01:51,200 --> 00:01:53,680
changes broke anything

49
00:01:53,680 --> 00:01:56,399
this process is repeated continuously as

50
00:01:56,399 --> 00:01:58,399
all developers work on code for the

51
00:01:58,399 --> 00:02:00,240
project

52
00:02:00,240 --> 00:02:02,399
the build and test process is typically

53
00:02:02,399 --> 00:02:05,600
executed on a ci cd runner

54
00:02:05,600 --> 00:02:08,080
in gitlab the runner is flexible and

55
00:02:08,080 --> 00:02:10,959
open source and is written in go

56
00:02:10,959 --> 00:02:13,280
it can be deployed to bare metal virtual

57
00:02:13,280 --> 00:02:14,400
machines

58
00:02:14,400 --> 00:02:16,480
docker containers or kubernetes

59
00:02:16,480 --> 00:02:19,840
depending on the needs of the developers

60
00:02:19,840 --> 00:02:21,840
the runners are typically ephemeral and

61
00:02:21,840 --> 00:02:24,239
short-lived devices that spin up and

62
00:02:24,239 --> 00:02:26,640
down only when a build process is

63
00:02:26,640 --> 00:02:27,920
executed

64
00:02:27,920 --> 00:02:31,120
i'll talk more about these runners soon

65
00:02:31,120 --> 00:02:33,519
continuous delivery is the process of

66
00:02:33,519 --> 00:02:35,760
packaging the created software artifacts

67
00:02:35,760 --> 00:02:38,160
from the ci process and preparing them

68
00:02:38,160 --> 00:02:40,959
to be delivered to environments like qa

69
00:02:40,959 --> 00:02:43,680
uat or production

70
00:02:43,680 --> 00:02:46,560
and lastly cd could also refer to

71
00:02:46,560 --> 00:02:48,959
continuous deployment where the process

72
00:02:48,959 --> 00:02:50,640
of deploying to the aforementioned

73
00:02:50,640 --> 00:02:52,640
environments requires no human

74
00:02:52,640 --> 00:02:54,319
intervention

75
00:02:54,319 --> 00:02:56,000
for the remainder of this talk my focus

76
00:02:56,000 --> 00:02:58,000
will be on continuous integration and

77
00:02:58,000 --> 00:03:00,879
continuous delivery

78
00:03:00,879 --> 00:03:01,920
summed up

79
00:03:01,920 --> 00:03:04,400
the entire ci cd workflow is meant to

80
00:03:04,400 --> 00:03:07,120
automate and speed up dev devops while

81
00:03:07,120 --> 00:03:11,760
making developers aware of bugs earlier

82
00:03:13,440 --> 00:03:15,840
so there's tons of ci cd platforms and

83
00:03:15,840 --> 00:03:17,120
tool sets

84
00:03:17,120 --> 00:03:19,200
free and paid services in both open

85
00:03:19,200 --> 00:03:21,360
source and closed source

86
00:03:21,360 --> 00:03:23,680
and ci cd is said to have all of these

87
00:03:23,680 --> 00:03:25,760
benefits like faster developer

88
00:03:25,760 --> 00:03:28,080
iterations and efficiency

89
00:03:28,080 --> 00:03:29,840
higher release quality

90
00:03:29,840 --> 00:03:32,720
and more consistent build processes

91
00:03:32,720 --> 00:03:34,400
some of these products even claim to

92
00:03:34,400 --> 00:03:36,319
lower the risk of security incident by

93
00:03:36,319 --> 00:03:38,480
misconfiguration

94
00:03:38,480 --> 00:03:42,480
well that sounds like a challenge to me

95
00:03:42,799 --> 00:03:45,120
well it sounds like less of a challenge

96
00:03:45,120 --> 00:03:47,760
as soon as you introduce a weak link

97
00:03:47,760 --> 00:03:49,440
the human

98
00:03:49,440 --> 00:03:51,680
the threat landscape becomes wide once

99
00:03:51,680 --> 00:03:54,080
developers begin introducing unvetted

100
00:03:54,080 --> 00:03:56,159
third-party codependencies

101
00:03:56,159 --> 00:03:58,959
or public container images or even just

102
00:03:58,959 --> 00:03:59,920
using

103
00:03:59,920 --> 00:04:03,439
extensions for various ides

104
00:04:03,439 --> 00:04:06,319
developers may even be hard-coding keys

105
00:04:06,319 --> 00:04:09,040
credentials and secrets within projects

106
00:04:09,040 --> 00:04:11,200
that could lead to attackers being

107
00:04:11,200 --> 00:04:14,159
handed the keys to the kingdom

108
00:04:14,159 --> 00:04:16,079
this doesn't even touch on standard

109
00:04:16,079 --> 00:04:18,560
security misconfigurations like overly

110
00:04:18,560 --> 00:04:20,798
permissive accounts or faulty firewall

111
00:04:20,798 --> 00:04:21,839
rule sets

112
00:04:21,839 --> 00:04:23,919
that could play a role in limiting a ci

113
00:04:23,919 --> 00:04:27,240
cd compromise

114
00:04:29,440 --> 00:04:31,360
the solarwinds breach affected so many

115
00:04:31,360 --> 00:04:33,280
organizations because the actors were

116
00:04:33,280 --> 00:04:35,759
able to modify code for software updates

117
00:04:35,759 --> 00:04:38,479
within the cicd pipeline

118
00:04:38,479 --> 00:04:40,560
the orion source code was modified to

119
00:04:40,560 --> 00:04:42,080
include a back door

120
00:04:42,080 --> 00:04:45,199
the ci cd build process was executed

121
00:04:45,199 --> 00:04:46,800
and the software was distributed to

122
00:04:46,800 --> 00:04:49,040
clients

123
00:04:49,040 --> 00:04:51,360
hundreds of malicious npm packages are

124
00:04:51,360 --> 00:04:53,360
being discovered in the wild

125
00:04:53,360 --> 00:04:56,000
the user agent parser javascript library

126
00:04:56,000 --> 00:04:57,600
was recently compromised with three

127
00:04:57,600 --> 00:05:00,080
malicious versions and at the time this

128
00:05:00,080 --> 00:05:02,080
library had roughly seven million weekly

129
00:05:02,080 --> 00:05:04,400
downloads

130
00:05:04,400 --> 00:05:06,080
attackers operated in the puriform

131
00:05:06,080 --> 00:05:07,520
network for months preparing their

132
00:05:07,520 --> 00:05:09,759
malicious version of ccleaner

133
00:05:09,759 --> 00:05:11,600
it was hosted on the official website

134
00:05:11,600 --> 00:05:13,360
and distributed to millions of users

135
00:05:13,360 --> 00:05:14,880
over the course of about a month and a

136
00:05:14,880 --> 00:05:17,199
half before the company was made aware

137
00:05:17,199 --> 00:05:20,720
and removed the malicious version

138
00:05:22,960 --> 00:05:24,880
my team set out to determine the breadth

139
00:05:24,880 --> 00:05:27,120
of compromise starting from three assume

140
00:05:27,120 --> 00:05:29,039
breach scenarios

141
00:05:29,039 --> 00:05:32,320
a single ci cd pipeline compromise

142
00:05:32,320 --> 00:05:34,560
a developer installing a malicious vs

143
00:05:34,560 --> 00:05:36,000
code extension

144
00:05:36,000 --> 00:05:39,840
and a multi-pipeline compromise

145
00:05:42,560 --> 00:05:44,800
in the first attack scenario we worked

146
00:05:44,800 --> 00:05:47,120
to simulate a scenario wherein

147
00:05:47,120 --> 00:05:49,440
developers are including unvetted

148
00:05:49,440 --> 00:05:51,600
third-party dependencies within their ci

149
00:05:51,600 --> 00:05:54,240
cd build process

150
00:05:54,240 --> 00:05:56,560
we backdoored a simple debian package

151
00:05:56,560 --> 00:05:58,400
and worked with a developer to modify

152
00:05:58,400 --> 00:06:00,720
his code so that the build process would

153
00:06:00,720 --> 00:06:02,639
download and install the malicious

154
00:06:02,639 --> 00:06:07,000
package from an arbitrary site

155
00:06:08,000 --> 00:06:09,280
we've rolled out our attacking

156
00:06:09,280 --> 00:06:11,360
infrastructure which included a payload

157
00:06:11,360 --> 00:06:13,039
server and command and control

158
00:06:13,039 --> 00:06:15,199
infrastructure in our own google cloud

159
00:06:15,199 --> 00:06:17,360
environment external to palo alto

160
00:06:17,360 --> 00:06:19,280
networks

161
00:06:19,280 --> 00:06:21,600
the developer kicked off the gitlab ci

162
00:06:21,600 --> 00:06:24,880
pipeline and the build process began

163
00:06:24,880 --> 00:06:27,440
a gitlab runner was spun up it installed

164
00:06:27,440 --> 00:06:29,199
our malicious package and c2 was

165
00:06:29,199 --> 00:06:31,039
established

166
00:06:31,039 --> 00:06:32,800
because of the short life span of these

167
00:06:32,800 --> 00:06:34,720
runners we opted to background our

168
00:06:34,720 --> 00:06:36,479
malicious process in order to keep the

169
00:06:36,479 --> 00:06:37,840
runner up

170
00:06:37,840 --> 00:06:39,919
it should be noted that developers may

171
00:06:39,919 --> 00:06:43,199
notice hung cicd jobs as this process

172
00:06:43,199 --> 00:06:46,560
typically takes less than five minutes

173
00:06:46,560 --> 00:06:48,639
the runner was deployed in kubernetes

174
00:06:48,639 --> 00:06:50,560
so when we landed a shell we were in a

175
00:06:50,560 --> 00:06:52,160
pod

176
00:06:52,160 --> 00:06:54,080
going into this engagement we researched

177
00:06:54,080 --> 00:06:56,000
methods of pot escapes and privilege

178
00:06:56,000 --> 00:06:58,160
escalation in preparation

179
00:06:58,160 --> 00:07:02,520
turns out we were over prepared

180
00:07:03,599 --> 00:07:06,080
cicd variables are a type of environment

181
00:07:06,080 --> 00:07:07,599
variables that are meant to help

182
00:07:07,599 --> 00:07:09,120
developers

183
00:07:09,120 --> 00:07:11,360
these variables can be used to control

184
00:07:11,360 --> 00:07:13,919
the behavior of jobs and pipelines

185
00:07:13,919 --> 00:07:16,400
store values for reuse and avoid hard

186
00:07:16,400 --> 00:07:18,800
coding values in code

187
00:07:18,800 --> 00:07:20,880
to an attacker the runner environment

188
00:07:20,880 --> 00:07:22,160
variables provide a wealth of

189
00:07:22,160 --> 00:07:24,319
information

190
00:07:24,319 --> 00:07:26,319
there's a number of predefined variables

191
00:07:26,319 --> 00:07:28,479
that include important details about the

192
00:07:28,479 --> 00:07:31,120
runner and gitlab resources

193
00:07:31,120 --> 00:07:32,720
one specific variable that we found

194
00:07:32,720 --> 00:07:35,919
valuable was the ci job token which can

195
00:07:35,919 --> 00:07:37,919
be used as a form of single factor

196
00:07:37,919 --> 00:07:40,240
authentication to query the gitlab

197
00:07:40,240 --> 00:07:43,120
server api endpoints

198
00:07:43,120 --> 00:07:46,319
any requests made using this job token

199
00:07:46,319 --> 00:07:48,080
run with the permissions of the pipeline

200
00:07:48,080 --> 00:07:50,080
owner which is the developer in most

201
00:07:50,080 --> 00:07:51,759
cases

202
00:07:51,759 --> 00:07:53,680
this token is not local to the project

203
00:07:53,680 --> 00:07:55,840
being worked in whatever the developer

204
00:07:55,840 --> 00:07:57,840
has access to the token can be used to

205
00:07:57,840 --> 00:07:59,680
access it

206
00:07:59,680 --> 00:08:01,680
it's important to note that this token

207
00:08:01,680 --> 00:08:03,680
is only valid as long as the job is

208
00:08:03,680 --> 00:08:04,639
running

209
00:08:04,639 --> 00:08:06,560
but since we hung the pipeline we had

210
00:08:06,560 --> 00:08:09,919
some additional time to use it

211
00:08:11,680 --> 00:08:13,759
and so we set out to determine what the

212
00:08:13,759 --> 00:08:16,000
developer had access to

213
00:08:16,000 --> 00:08:18,560
the gitlab api document documentation

214
00:08:18,560 --> 00:08:20,879
became handy very quick

215
00:08:20,879 --> 00:08:22,400
we began by listing out which

216
00:08:22,400 --> 00:08:25,599
repositories the developer had access to

217
00:08:25,599 --> 00:08:27,680
then use git to clone each of them to

218
00:08:27,680 --> 00:08:30,879
the runner then move them locally

219
00:08:30,879 --> 00:08:32,958
just as a proof of concept we automated

220
00:08:32,958 --> 00:08:35,120
this process with a tool we dubbed git

221
00:08:35,120 --> 00:08:38,679
labrador retriever

222
00:08:40,479 --> 00:08:42,240
we successfully exfiltrated more than

223
00:08:42,240 --> 00:08:44,480
400 projects in minutes

224
00:08:44,480 --> 00:08:46,560
compressed down it was just over four

225
00:08:46,560 --> 00:08:48,480
and a half gigs

226
00:08:48,480 --> 00:08:50,000
the developer must have been very busy

227
00:08:50,000 --> 00:08:53,360
to work in 400 projects at the same time

228
00:08:53,360 --> 00:08:55,440
or this is just a typical case of an

229
00:08:55,440 --> 00:08:58,560
overly permissive developer account

230
00:08:58,560 --> 00:09:01,519
funny enough we crashed our c2 server on

231
00:09:01,519 --> 00:09:03,279
the first x-fil attempt because the data

232
00:09:03,279 --> 00:09:05,360
was too large

233
00:09:05,360 --> 00:09:07,760
from there we opted to use updog as our

234
00:09:07,760 --> 00:09:10,560
exfil server

235
00:09:12,880 --> 00:09:14,640
we began perusing through the source

236
00:09:14,640 --> 00:09:17,040
code offline to further our attack

237
00:09:17,040 --> 00:09:18,800
and it wasn't long before we found

238
00:09:18,800 --> 00:09:20,720
hard-coded credentials for an active

239
00:09:20,720 --> 00:09:22,640
directory service account without

240
00:09:22,640 --> 00:09:26,080
multi-factor authentication in place

241
00:09:26,080 --> 00:09:27,920
we used this account to access the

242
00:09:27,920 --> 00:09:29,440
internal jira server and scrape

243
00:09:29,440 --> 00:09:31,279
thousands of tickets from our foothold

244
00:09:31,279 --> 00:09:33,440
on the runner

245
00:09:33,440 --> 00:09:36,320
after that we authenticated to gcp and

246
00:09:36,320 --> 00:09:38,800
aws where we had read and write

247
00:09:38,800 --> 00:09:41,920
permissions to numerous projects

248
00:09:41,920 --> 00:09:43,600
at this point we were happy with our

249
00:09:43,600 --> 00:09:45,600
level of access so we moved on to phase

250
00:09:45,600 --> 00:09:49,000
two of the operation

251
00:09:50,560 --> 00:09:52,560
in this scenario we modified a

252
00:09:52,560 --> 00:09:55,200
legitimate vs code plugin to include

253
00:09:55,200 --> 00:09:57,760
another binary that would establish c2

254
00:09:57,760 --> 00:10:00,240
when the plugin is installed

255
00:10:00,240 --> 00:10:02,480
during our research we found that it was

256
00:10:02,480 --> 00:10:04,320
trivial to craft an identical looking

257
00:10:04,320 --> 00:10:05,680
extension

258
00:10:05,680 --> 00:10:07,279
the screenshot on the left is the

259
00:10:07,279 --> 00:10:08,880
legitimate extension while the

260
00:10:08,880 --> 00:10:10,640
screenshot on the right is the malicious

261
00:10:10,640 --> 00:10:11,920
one

262
00:10:11,920 --> 00:10:13,360
and as a bonus

263
00:10:13,360 --> 00:10:15,600
vs code extensions are a great form of

264
00:10:15,600 --> 00:10:18,320
persistence since each time vs code is

265
00:10:18,320 --> 00:10:21,920
started it kicks off our payload

266
00:10:23,920 --> 00:10:25,680
we worked with a different developer to

267
00:10:25,680 --> 00:10:27,360
install this plugin so there wasn't a

268
00:10:27,360 --> 00:10:29,279
ton of overlap with the first attack

269
00:10:29,279 --> 00:10:31,200
scenario

270
00:10:31,200 --> 00:10:33,120
once the foothold was established and

271
00:10:33,120 --> 00:10:35,279
after some initial reconnaissance we

272
00:10:35,279 --> 00:10:36,959
discovered the developer was using the

273
00:10:36,959 --> 00:10:40,640
gitlab workflow vs code extension

274
00:10:40,640 --> 00:10:42,160
with this plugin

275
00:10:42,160 --> 00:10:44,560
devs can browse repositories create

276
00:10:44,560 --> 00:10:46,720
merge requests and manage ci cd

277
00:10:46,720 --> 00:10:49,440
pipelines all from vs code

278
00:10:49,440 --> 00:10:51,360
but to do any of this the plugin

279
00:10:51,360 --> 00:10:53,920
requires a gitlab personal access token

280
00:10:53,920 --> 00:10:56,000
which is stored in a database file on

281
00:10:56,000 --> 00:10:58,399
disk

282
00:10:59,519 --> 00:11:02,480
on mac os the vs code database file is

283
00:11:02,480 --> 00:11:04,720
stored in the application support

284
00:11:04,720 --> 00:11:08,399
code user global storage directory

285
00:11:08,399 --> 00:11:10,959
we oink the database file and use sqlite

286
00:11:10,959 --> 00:11:14,599
to carve out the token

287
00:11:17,200 --> 00:11:19,440
we then use the personal access token to

288
00:11:19,440 --> 00:11:21,440
query gitlab for group and project

289
00:11:21,440 --> 00:11:23,040
variables that the developer could

290
00:11:23,040 --> 00:11:24,720
access

291
00:11:24,720 --> 00:11:26,640
group and project variables are custom

292
00:11:26,640 --> 00:11:28,800
variables that get passed to runners

293
00:11:28,800 --> 00:11:32,399
during the ci build process

294
00:11:32,399 --> 00:11:34,480
as expected we found numerous

295
00:11:34,480 --> 00:11:36,959
credentials secrets and tokens for a

296
00:11:36,959 --> 00:11:39,360
number of other cicd applications

297
00:11:39,360 --> 00:11:43,839
including an artifactory service account

298
00:11:45,279 --> 00:11:47,360
at this point we had rights to upload

299
00:11:47,360 --> 00:11:49,760
packages to the internal artifactory

300
00:11:49,760 --> 00:11:50,880
that could be used for further

301
00:11:50,880 --> 00:11:52,800
compromise

302
00:11:52,800 --> 00:11:54,639
we also had permissions to modify

303
00:11:54,639 --> 00:11:56,560
existing dependencies for further

304
00:11:56,560 --> 00:11:59,439
pipeline abuse

305
00:12:01,440 --> 00:12:03,440
stepping away from artifactory

306
00:12:03,440 --> 00:12:05,360
we returned our focus to the gitlab

307
00:12:05,360 --> 00:12:07,760
personal access token

308
00:12:07,760 --> 00:12:09,920
again armed with the api documentation

309
00:12:09,920 --> 00:12:11,680
we were able to commit changes to an

310
00:12:11,680 --> 00:12:15,440
existing repository and execute ci cd

311
00:12:15,440 --> 00:12:17,920
execute the ci cd pipeline which landed

312
00:12:17,920 --> 00:12:20,880
us another foothold on a gitlab runner

313
00:12:20,880 --> 00:12:25,079
rinse repeat the first attack scenario

314
00:12:27,360 --> 00:12:29,760
back on the developers host we began

315
00:12:29,760 --> 00:12:32,399
exfiltrating gcp credential database

316
00:12:32,399 --> 00:12:35,279
files some of which belonged to cicd

317
00:12:35,279 --> 00:12:37,839
service accounts

318
00:12:37,839 --> 00:12:40,160
the gcloud command line utility we

319
00:12:40,160 --> 00:12:42,880
authenticated with the stolen tokens and

320
00:12:42,880 --> 00:12:45,200
found we could access numerous gcp

321
00:12:45,200 --> 00:12:47,440
projects storage buckets and kubernetes

322
00:12:47,440 --> 00:12:49,839
clusters

323
00:12:50,800 --> 00:12:52,720
google has this great feature called

324
00:12:52,720 --> 00:12:55,600
metadata managed ssh which creates a

325
00:12:55,600 --> 00:12:58,079
public key and attempts to add it to any

326
00:12:58,079 --> 00:13:00,880
compute instance you try to connect to

327
00:13:00,880 --> 00:13:02,959
so with the right permissions we began

328
00:13:02,959 --> 00:13:05,279
spreading into numerous vms that are not

329
00:13:05,279 --> 00:13:07,600
internet accessible by using the gcloud

330
00:13:07,600 --> 00:13:11,440
compute ssh functionality

331
00:13:13,519 --> 00:13:15,440
we didn't really execute groundbreaking

332
00:13:15,440 --> 00:13:18,240
techniques for gcp post-exploitation

333
00:13:18,240 --> 00:13:20,160
but we did lean heavily on a blog post

334
00:13:20,160 --> 00:13:22,160
from gitlab's red team which is a great

335
00:13:22,160 --> 00:13:24,079
resource for privilege escalation and

336
00:13:24,079 --> 00:13:26,240
lateral movement

337
00:13:26,240 --> 00:13:28,639
our typical process was to authenticate

338
00:13:28,639 --> 00:13:30,560
with a set of credentials

339
00:13:30,560 --> 00:13:32,959
list accessible projects then enumerate

340
00:13:32,959 --> 00:13:35,040
and document accessible services and

341
00:13:35,040 --> 00:13:36,959
service accounts

342
00:13:36,959 --> 00:13:38,639
enumerate the permissions of other

343
00:13:38,639 --> 00:13:40,399
service accounts

344
00:13:40,399 --> 00:13:42,639
ssh to compute instances

345
00:13:42,639 --> 00:13:46,639
seal more tokens and repeat the process

346
00:13:46,639 --> 00:13:48,399
by the time we exhausted all of the

347
00:13:48,399 --> 00:13:49,600
surface accounts that we could

348
00:13:49,600 --> 00:13:51,760
authenticate with we had access to

349
00:13:51,760 --> 00:13:55,439
hundreds of gcp projects

350
00:13:58,240 --> 00:13:59,440
at this point

351
00:13:59,440 --> 00:14:01,199
we wanted to use our beachheads within

352
00:14:01,199 --> 00:14:04,720
gcp to proxy traffic internally

353
00:14:04,720 --> 00:14:07,040
we crafted a custom docker image which

354
00:14:07,040 --> 00:14:10,720
used stunnel to mask ssh traffic as tls

355
00:14:10,720 --> 00:14:14,160
in order to evade firewall detections

356
00:14:14,160 --> 00:14:16,399
this container was deployed to a few vm

357
00:14:16,399 --> 00:14:18,959
instances and was used as an ephemeral

358
00:14:18,959 --> 00:14:21,279
space to run scripts and interact with

359
00:14:21,279 --> 00:14:24,480
internal web interfaces

360
00:14:24,480 --> 00:14:27,440
eventually we found a free ipa ldap

361
00:14:27,440 --> 00:14:30,320
server deployed in gcp that allowed us

362
00:14:30,320 --> 00:14:32,079
to dump a couple thousand active

363
00:14:32,079 --> 00:14:35,120
directory usernames in groups

364
00:14:35,120 --> 00:14:37,199
we also used this ldap server to further

365
00:14:37,199 --> 00:14:39,600
validate credentials found during past

366
00:14:39,600 --> 00:14:42,720
past exfiltration

367
00:14:42,720 --> 00:14:44,399
before calling an end to this attack

368
00:14:44,399 --> 00:14:47,839
scenario we returned to the ct seats who

369
00:14:47,839 --> 00:14:50,079
from the developers machine to try to

370
00:14:50,079 --> 00:14:53,360
steal his octa-session token

371
00:14:53,360 --> 00:14:55,199
we restarted his google chrome session

372
00:14:55,199 --> 00:14:57,040
in debugging mode and queried the

373
00:14:57,040 --> 00:14:59,120
debugging port

374
00:14:59,120 --> 00:15:01,519
we were able to obtain the octa token

375
00:15:01,519 --> 00:15:04,240
which was then replayed using burp suite

376
00:15:04,240 --> 00:15:07,120
which bypassed mfa and dropped us to the

377
00:15:07,120 --> 00:15:11,399
developers application dashboard

378
00:15:13,600 --> 00:15:15,839
for the final attack scenario we worked

379
00:15:15,839 --> 00:15:18,880
with a developer to modify a ci template

380
00:15:18,880 --> 00:15:20,720
so that it would include a custom linux

381
00:15:20,720 --> 00:15:23,199
binary that we wrote

382
00:15:23,199 --> 00:15:25,199
ci templates allow developers to

383
00:15:25,199 --> 00:15:26,800
incorporate their favorite programming

384
00:15:26,800 --> 00:15:30,000
language or framework into pipelines

385
00:15:30,000 --> 00:15:31,440
instead of building pipelines from

386
00:15:31,440 --> 00:15:34,000
scratch these templates simplify the

387
00:15:34,000 --> 00:15:38,000
process by having parameters built in

388
00:15:38,000 --> 00:15:39,519
the template was used as a way to

389
00:15:39,519 --> 00:15:41,920
simulate multiple developers using a

390
00:15:41,920 --> 00:15:45,519
single compromise dependency

391
00:15:48,000 --> 00:15:50,320
when the pipeline started our binary was

392
00:15:50,320 --> 00:15:52,880
downloaded and executed

393
00:15:52,880 --> 00:15:55,120
because of our previous attack scenarios

394
00:15:55,120 --> 00:15:56,880
we knew the runner environment variables

395
00:15:56,880 --> 00:15:59,120
were a trove of loot

396
00:15:59,120 --> 00:16:00,880
our payload simply exfiltrated

397
00:16:00,880 --> 00:16:02,800
environment variables to an external web

398
00:16:02,800 --> 00:16:05,279
server via https

399
00:16:05,279 --> 00:16:06,720
and before long

400
00:16:06,720 --> 00:16:09,040
we were sitting on hundreds of keys api

401
00:16:09,040 --> 00:16:10,959
tokens and active directory service

402
00:16:10,959 --> 00:16:13,120
account credentials

403
00:16:13,120 --> 00:16:15,680
without much effort we gained control of

404
00:16:15,680 --> 00:16:17,440
more than four thousand projects within

405
00:16:17,440 --> 00:16:19,839
gcp which likely would have turned into

406
00:16:19,839 --> 00:16:22,399
a full organization compromise given the

407
00:16:22,399 --> 00:16:23,920
time for reconnaissance and lateral

408
00:16:23,920 --> 00:16:26,319
movement

409
00:16:28,160 --> 00:16:30,160
instead we turned our attention to other

410
00:16:30,160 --> 00:16:31,600
credentials

411
00:16:31,600 --> 00:16:33,839
one of which was an old gitlab bot

412
00:16:33,839 --> 00:16:35,279
account with single factor

413
00:16:35,279 --> 00:16:37,279
authentication

414
00:16:37,279 --> 00:16:39,199
we logged in and we found that bot was a

415
00:16:39,199 --> 00:16:41,040
gitlab admin

416
00:16:41,040 --> 00:16:43,279
although being an admin the bot didn't

417
00:16:43,279 --> 00:16:44,800
have a ton of access to do

418
00:16:44,800 --> 00:16:46,959
non-destructive activity there were no

419
00:16:46,959 --> 00:16:48,720
permissions to view or modify

420
00:16:48,720 --> 00:16:50,240
repositories

421
00:16:50,240 --> 00:16:52,480
so we use the api to determine the user

422
00:16:52,480 --> 00:16:55,360
with the most privileges

423
00:16:55,360 --> 00:16:57,839
the api has an admin only impersonation

424
00:16:57,839 --> 00:16:59,680
function that essentially crafts a

425
00:16:59,680 --> 00:17:02,000
personal access token of other users

426
00:17:02,000 --> 00:17:04,720
without alerting said user

427
00:17:04,720 --> 00:17:06,160
so that's what we did

428
00:17:06,160 --> 00:17:07,439
and that's how we owned the entire

429
00:17:07,439 --> 00:17:09,439
gitlab instance

430
00:17:09,439 --> 00:17:11,199
although this was likely the largest

431
00:17:11,199 --> 00:17:15,520
attack it was relatively uninvolved

432
00:17:17,599 --> 00:17:19,439
hopefully these attack scenarios have

433
00:17:19,439 --> 00:17:21,520
emphasized some possible outcomes of

434
00:17:21,520 --> 00:17:24,000
supply chain compromises

435
00:17:24,000 --> 00:17:25,760
but these breaches don't stem from a

436
00:17:25,760 --> 00:17:28,160
single failure and defenses there are a

437
00:17:28,160 --> 00:17:30,320
number of mitigating factors that we as

438
00:17:30,320 --> 00:17:32,080
a red team believe could have prevented

439
00:17:32,080 --> 00:17:34,960
the wide scale compromises

440
00:17:34,960 --> 00:17:36,720
here are some of the recommendations we

441
00:17:36,720 --> 00:17:39,200
made after concluding the engagement

442
00:17:39,200 --> 00:17:41,039
generally speaking the top of the list

443
00:17:41,039 --> 00:17:42,320
is more upstream and would have

444
00:17:42,320 --> 00:17:44,640
disrupted operations while the bottom is

445
00:17:44,640 --> 00:17:46,720
more low fidelity but still could slow

446
00:17:46,720 --> 00:17:49,200
attackers down

447
00:17:49,200 --> 00:17:51,679
in most cases get lab runners should not

448
00:17:51,679 --> 00:17:53,520
be making outbound connections

449
00:17:53,520 --> 00:17:55,600
especially to health and finance domains

450
00:17:55,600 --> 00:17:58,160
that attackers commonly use to avoid ssl

451
00:17:58,160 --> 00:18:00,559
stripping

452
00:18:00,559 --> 00:18:01,840
secrets should not be stored in

453
00:18:01,840 --> 00:18:04,320
environment variables glab supports

454
00:18:04,320 --> 00:18:06,640
hashicorp vault as an external secrets

455
00:18:06,640 --> 00:18:07,760
engine

456
00:18:07,760 --> 00:18:09,600
these secret managers should be secured

457
00:18:09,600 --> 00:18:12,960
and regularly audited

458
00:18:12,960 --> 00:18:14,880
don't allow developers to have access to

459
00:18:14,880 --> 00:18:18,559
hundreds of repositories simultaneously

460
00:18:18,559 --> 00:18:20,240
prevent developers from including

461
00:18:20,240 --> 00:18:22,240
arbitrary third-party dependencies that

462
00:18:22,240 --> 00:18:23,840
have not gone through a code review

463
00:18:23,840 --> 00:18:24,960
process

464
00:18:24,960 --> 00:18:26,000
instead

465
00:18:26,000 --> 00:18:28,000
force devs to use a central artifact

466
00:18:28,000 --> 00:18:31,440
repository like artifactory

467
00:18:31,440 --> 00:18:33,840
watch for one or a few accounts cloning

468
00:18:33,840 --> 00:18:37,440
down numerous projects at once

469
00:18:37,440 --> 00:18:39,280
monitor highly permissive accounts like

470
00:18:39,280 --> 00:18:42,960
gitlab admins conducting impersonation

471
00:18:42,960 --> 00:18:44,400
and there are a few others like checking

472
00:18:44,400 --> 00:18:46,799
for octa replays keeping an eye on weird

473
00:18:46,799 --> 00:18:49,440
cloud ssh events and regular artifact

474
00:18:49,440 --> 00:18:50,720
scanning

475
00:18:50,720 --> 00:18:52,480
but these recommendations may only work

476
00:18:52,480 --> 00:18:53,600
in a bubble

477
00:18:53,600 --> 00:18:55,120
different organizations obviously have

478
00:18:55,120 --> 00:18:58,799
different requirements and use cases

479
00:19:00,799 --> 00:19:03,200
the cicd pipeline was conceptualized

480
00:19:03,200 --> 00:19:05,760
with a developer first mindset

481
00:19:05,760 --> 00:19:07,760
speed and convenience are the primary

482
00:19:07,760 --> 00:19:09,679
goals therefore it's important for

483
00:19:09,679 --> 00:19:12,080
developers and security practitioners to

484
00:19:12,080 --> 00:19:14,160
evaluate the threats associated with

485
00:19:14,160 --> 00:19:16,720
devops

486
00:19:16,799 --> 00:19:18,720
this engagement was my first foray into

487
00:19:18,720 --> 00:19:21,120
ci cd and cloud red teaming and i really

488
00:19:21,120 --> 00:19:22,960
enjoyed it so i plan to continue

489
00:19:22,960 --> 00:19:26,160
research into ci cd abuse

490
00:19:26,160 --> 00:19:28,240
earlier this year the ncc group

491
00:19:28,240 --> 00:19:30,480
published a blog with 10 ci cd attack

492
00:19:30,480 --> 00:19:32,240
scenarios

493
00:19:32,240 --> 00:19:34,160
some of what we executed is covered in

494
00:19:34,160 --> 00:19:36,000
their post and my team is planning to

495
00:19:36,000 --> 00:19:37,760
conduct another engagement related to

496
00:19:37,760 --> 00:19:40,799
the remaining relevant topics

497
00:19:40,799 --> 00:19:42,559
hopefully this talk sparked enough

498
00:19:42,559 --> 00:19:44,480
interest to have more folks in the

499
00:19:44,480 --> 00:19:47,039
industry review their own cicd

500
00:19:47,039 --> 00:19:48,559
environment

501
00:19:48,559 --> 00:19:50,720
and lastly i'd love to chat about your

502
00:19:50,720 --> 00:19:52,960
experiences with ci cd

503
00:19:52,960 --> 00:19:55,120
if you've conducted an engagement went

504
00:19:55,120 --> 00:19:57,120
through a security review process or

505
00:19:57,120 --> 00:19:58,559
just want to discuss more about my

506
00:19:58,559 --> 00:20:02,559
presentation feel free to reach out

507
00:20:04,559 --> 00:20:06,320
and i just wanted to give a few quick

508
00:20:06,320 --> 00:20:08,880
shout outs thanks again to carolinacon

509
00:20:08,880 --> 00:20:10,960
for hosting and accepting my first ever

510
00:20:10,960 --> 00:20:12,640
con talk

511
00:20:12,640 --> 00:20:14,559
shout out to the 49 security division at

512
00:20:14,559 --> 00:20:16,880
unc charlotte they're a great cyber

513
00:20:16,880 --> 00:20:18,480
security club that i was a part of while

514
00:20:18,480 --> 00:20:19,919
i was still in school definitely want to

515
00:20:19,919 --> 00:20:21,760
show them some love

516
00:20:21,760 --> 00:20:24,240
shout out to josiah peterkiel who is our

517
00:20:24,240 --> 00:20:26,159
red team intern during this engagement

518
00:20:26,159 --> 00:20:27,919
he's a genius and we refer to him as

519
00:20:27,919 --> 00:20:29,200
bigbrain

520
00:20:29,200 --> 00:20:30,720
and finally shout out to richard

521
00:20:30,720 --> 00:20:32,480
penshorn who joined us for two weeks

522
00:20:32,480 --> 00:20:34,159
during the engagement and taught us a

523
00:20:34,159 --> 00:20:36,480
lot about cloud lateral movement

524
00:20:36,480 --> 00:20:39,480
thanks

