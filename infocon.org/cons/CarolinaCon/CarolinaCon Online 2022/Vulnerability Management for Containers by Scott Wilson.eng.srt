1
00:00:00,080 --> 00:00:02,080
hey everyone this is scott wilson coming

2
00:00:02,080 --> 00:00:05,200
to you live from raleigh north carolina

3
00:00:05,200 --> 00:00:06,799
i'm so grateful to be here with you

4
00:00:06,799 --> 00:00:08,000
today

5
00:00:08,000 --> 00:00:10,320
major major shout outs to the 49th

6
00:00:10,320 --> 00:00:12,639
security division and unc charlotte for

7
00:00:12,639 --> 00:00:14,480
putting on this conference

8
00:00:14,480 --> 00:00:16,320
if you get an opportunity to thank one

9
00:00:16,320 --> 00:00:18,160
of our conference organizers today

10
00:00:18,160 --> 00:00:19,920
please drop them a little love in the

11
00:00:19,920 --> 00:00:22,240
discord or matrix channels um they've

12
00:00:22,240 --> 00:00:23,359
worked really hard to put this

13
00:00:23,359 --> 00:00:25,039
conference together

14
00:00:25,039 --> 00:00:28,640
um i am part of the x-force red team at

15
00:00:28,640 --> 00:00:31,199
ibm security we're the offensive

16
00:00:31,199 --> 00:00:34,079
security group so my team is essentially

17
00:00:34,079 --> 00:00:36,880
a group of hackers red teamers purple

18
00:00:36,880 --> 00:00:39,120
teamers and vulnerability management

19
00:00:39,120 --> 00:00:41,120
professionals and we

20
00:00:41,120 --> 00:00:43,040
do exactly what it sounds like we get

21
00:00:43,040 --> 00:00:45,200
paid to break into companies to help

22
00:00:45,200 --> 00:00:47,920
them identify their vulnerabilities and

23
00:00:47,920 --> 00:00:50,079
put together an action plan with them to

24
00:00:50,079 --> 00:00:51,840
resolve those items to reduce their

25
00:00:51,840 --> 00:00:53,039
risks

26
00:00:53,039 --> 00:00:54,719
a lot of what i do focus is on

27
00:00:54,719 --> 00:00:57,360
vulnerability management and

28
00:00:57,360 --> 00:00:59,760
i've prepared a talk free today

29
00:00:59,760 --> 00:01:02,079
related to vulnerability management for

30
00:01:02,079 --> 00:01:04,559
containers um and so i don't need to

31
00:01:04,559 --> 00:01:07,200
tell you all that cloud security is kind

32
00:01:07,200 --> 00:01:09,280
of the new hotness and and has been for

33
00:01:09,280 --> 00:01:11,360
a while and will be for the foreseeable

34
00:01:11,360 --> 00:01:13,439
future and more and more applications

35
00:01:13,439 --> 00:01:15,600
are moving to a containerized business

36
00:01:15,600 --> 00:01:18,240
model and that has a big impact on the

37
00:01:18,240 --> 00:01:20,320
vulnerability landscape the attack

38
00:01:20,320 --> 00:01:22,799
surface of your organization and how you

39
00:01:22,799 --> 00:01:24,840
need to go about addressing those

40
00:01:24,840 --> 00:01:26,640
vulnerabilities so i'm going to talk to

41
00:01:26,640 --> 00:01:28,080
you today

42
00:01:28,080 --> 00:01:30,000
about a couple of things so specifically

43
00:01:30,000 --> 00:01:31,759
i'm going to share some terminology and

44
00:01:31,759 --> 00:01:33,920
some concepts to basically make sure

45
00:01:33,920 --> 00:01:36,240
we're on the same page with respect to

46
00:01:36,240 --> 00:01:38,479
what we're here to talk about today then

47
00:01:38,479 --> 00:01:40,000
i'm going to share a little bit about

48
00:01:40,000 --> 00:01:42,000
the development pipeline what does that

49
00:01:42,000 --> 00:01:43,119
look like

50
00:01:43,119 --> 00:01:44,720
if you listened to will's talk earlier

51
00:01:44,720 --> 00:01:46,799
today you got some good insight into the

52
00:01:46,799 --> 00:01:49,759
cicd pipeline what that is

53
00:01:49,759 --> 00:01:51,759
what kind of attacks are commonplace for

54
00:01:51,759 --> 00:01:53,439
that type of setup

55
00:01:53,439 --> 00:01:54,880
and i'll speak a little bit more about

56
00:01:54,880 --> 00:01:57,360
that as it pertains to containers and

57
00:01:57,360 --> 00:01:58,880
the deployment of containers and of

58
00:01:58,880 --> 00:02:01,439
course keeping those containers secure

59
00:02:01,439 --> 00:02:02,960
and safe

60
00:02:02,960 --> 00:02:04,240
then we'll go into some different

61
00:02:04,240 --> 00:02:06,719
vulnerability scanning strategies

62
00:02:06,719 --> 00:02:08,160
it's a little more complex than the

63
00:02:08,160 --> 00:02:10,318
traditional host-based vulnerability

64
00:02:10,318 --> 00:02:12,239
scanning methodologies that companies

65
00:02:12,239 --> 00:02:14,160
have used for 20 years and i'll

66
00:02:14,160 --> 00:02:15,840
highlight some of those differences and

67
00:02:15,840 --> 00:02:17,520
then we'll move into

68
00:02:17,520 --> 00:02:19,360
talk about what kind of products are

69
00:02:19,360 --> 00:02:21,200
available on the marketplace what are

70
00:02:21,200 --> 00:02:23,280
their strengths and weaknesses and how

71
00:02:23,280 --> 00:02:25,520
do you go about making a cohesive

72
00:02:25,520 --> 00:02:28,000
decision about which tool to use and

73
00:02:28,000 --> 00:02:30,239
under what circumstances

74
00:02:30,239 --> 00:02:31,920
it would be difficult to talk about

75
00:02:31,920 --> 00:02:33,599
cyber security and vulnerability

76
00:02:33,599 --> 00:02:35,760
management without at least touching on

77
00:02:35,760 --> 00:02:37,440
compliance and so i've got a few

78
00:02:37,440 --> 00:02:39,200
important points about

79
00:02:39,200 --> 00:02:41,519
compliance management in the container

80
00:02:41,519 --> 00:02:43,599
space as it relates to vulnerability

81
00:02:43,599 --> 00:02:45,360
scanning and management

82
00:02:45,360 --> 00:02:46,720
and then i'll sum up with a couple of

83
00:02:46,720 --> 00:02:48,879
conclusions and i've got a few takeaways

84
00:02:48,879 --> 00:02:50,160
that you can bring back to your

85
00:02:50,160 --> 00:02:51,680
organization

86
00:02:51,680 --> 00:02:53,599
to speak intelligently with your team

87
00:02:53,599 --> 00:02:54,480
about

88
00:02:54,480 --> 00:02:56,400
how to keep containers secure how to do

89
00:02:56,400 --> 00:02:59,040
vulnerability management in that space

90
00:02:59,040 --> 00:03:00,159
so

91
00:03:00,159 --> 00:03:01,680
first off though let me get a couple of

92
00:03:01,680 --> 00:03:03,760
things out of the way this talk is not

93
00:03:03,760 --> 00:03:07,360
really a containers best practices talk

94
00:03:07,360 --> 00:03:09,680
that is really another topic altogether

95
00:03:09,680 --> 00:03:11,120
there are a lot of things that you can

96
00:03:11,120 --> 00:03:14,239
do from a best practices standpoint such

97
00:03:14,239 --> 00:03:15,200
as

98
00:03:15,200 --> 00:03:17,920
putting in a process to sign containers

99
00:03:17,920 --> 00:03:20,080
making sure you don't use root access

100
00:03:20,080 --> 00:03:21,840
layering the

101
00:03:21,840 --> 00:03:23,760
images properly to optimize the

102
00:03:23,760 --> 00:03:25,680
deployment and runtime activities

103
00:03:25,680 --> 00:03:27,360
related to container that's not what i'm

104
00:03:27,360 --> 00:03:29,519
here to talk about

105
00:03:29,519 --> 00:03:30,640
really we're going to focus on the

106
00:03:30,640 --> 00:03:32,720
vulnerability scanning how vulnerability

107
00:03:32,720 --> 00:03:34,560
scanning needs to be set up for

108
00:03:34,560 --> 00:03:36,560
containers

109
00:03:36,560 --> 00:03:38,319
likewise i'm not really going to talk a

110
00:03:38,319 --> 00:03:40,319
lot about orchestration

111
00:03:40,319 --> 00:03:42,080
you can't really talk about containers

112
00:03:42,080 --> 00:03:43,360
without at least mentioning

113
00:03:43,360 --> 00:03:46,560
orchestration and kubernetes and tools

114
00:03:46,560 --> 00:03:49,440
like it are critical for the successful

115
00:03:49,440 --> 00:03:51,599
operation of container environments i'm

116
00:03:51,599 --> 00:03:53,360
going to talk a little bit about

117
00:03:53,360 --> 00:03:55,840
kubernetes admission controllers what

118
00:03:55,840 --> 00:03:57,760
they are and how they can help within

119
00:03:57,760 --> 00:03:59,360
the pipeline but i'm not going to dig

120
00:03:59,360 --> 00:04:02,080
like super deeply into that topic

121
00:04:02,080 --> 00:04:03,840
and then finally i'm not here to make a

122
00:04:03,840 --> 00:04:04,959
sale

123
00:04:04,959 --> 00:04:07,120
yes i work for ibm

124
00:04:07,120 --> 00:04:10,159
yes x-force red does have relationships

125
00:04:10,159 --> 00:04:12,799
with a couple of vendors in this space

126
00:04:12,799 --> 00:04:14,480
but i'm not here to promote any one

127
00:04:14,480 --> 00:04:16,399
particular product

128
00:04:16,399 --> 00:04:18,798
and i'm not here to get you to buy ibm

129
00:04:18,798 --> 00:04:22,240
services or anything like that

130
00:04:22,240 --> 00:04:24,800
so let's hit on a few terminology topics

131
00:04:24,800 --> 00:04:27,120
a few concepts just to level the playing

132
00:04:27,120 --> 00:04:28,720
field make sure we're saying the same

133
00:04:28,720 --> 00:04:31,280
things what is what is a container well

134
00:04:31,280 --> 00:04:35,199
it's a lightweight independent isolated

135
00:04:35,199 --> 00:04:37,440
computing runtime that hosts an

136
00:04:37,440 --> 00:04:38,800
application

137
00:04:38,800 --> 00:04:41,120
containers were conceived to be highly

138
00:04:41,120 --> 00:04:43,919
portable and and sort of like java when

139
00:04:43,919 --> 00:04:45,680
it was under its early development the

140
00:04:45,680 --> 00:04:48,560
concept was hey what if we could write a

141
00:04:48,560 --> 00:04:50,400
small contained application that is

142
00:04:50,400 --> 00:04:52,720
highly portable that could run anywhere

143
00:04:52,720 --> 00:04:55,199
with you know no regard for what kind of

144
00:04:55,199 --> 00:04:56,960
infrastructure the underlying hosting

145
00:04:56,960 --> 00:04:58,479
system is

146
00:04:58,479 --> 00:04:59,919
and that's what a container really is

147
00:04:59,919 --> 00:05:02,639
all about a container image

148
00:05:02,639 --> 00:05:05,520
is simply a recipe for what is built

149
00:05:05,520 --> 00:05:07,520
into that container and so the concept

150
00:05:07,520 --> 00:05:10,320
here is you create a container image you

151
00:05:10,320 --> 00:05:13,280
build that immutable unit of software

152
00:05:13,280 --> 00:05:14,880
and then you deploy

153
00:05:14,880 --> 00:05:16,639
instances of that into your production

154
00:05:16,639 --> 00:05:17,919
environment

155
00:05:17,919 --> 00:05:20,400
in addition to portability one major

156
00:05:20,400 --> 00:05:22,240
thing containers can provide is

157
00:05:22,240 --> 00:05:24,880
scalability so you have an application

158
00:05:24,880 --> 00:05:26,880
it needs some more horsepower well all

159
00:05:26,880 --> 00:05:28,400
you have to do is spin up a few

160
00:05:28,400 --> 00:05:30,000
additional copies or a few hundred

161
00:05:30,000 --> 00:05:31,680
additional copies of that container

162
00:05:31,680 --> 00:05:33,759
image and you've increased your

163
00:05:33,759 --> 00:05:36,160
capability to deliver services to an

164
00:05:36,160 --> 00:05:38,639
application or to a service

165
00:05:38,639 --> 00:05:40,560
now when looking at

166
00:05:40,560 --> 00:05:43,039
how containers are set up and and how

167
00:05:43,039 --> 00:05:44,800
they work compared to traditional

168
00:05:44,800 --> 00:05:46,880
virtual machine environments you can see

169
00:05:46,880 --> 00:05:49,039
in my picture on the right here

170
00:05:49,039 --> 00:05:51,520
virtual machines are essentially a way

171
00:05:51,520 --> 00:05:52,639
to share

172
00:05:52,639 --> 00:05:55,360
components of hardware across multiple

173
00:05:55,360 --> 00:05:57,520
operating system instances and so you

174
00:05:57,520 --> 00:05:59,440
you've got your infrastructure there's a

175
00:05:59,440 --> 00:06:01,520
hypervisor layer that is really the the

176
00:06:01,520 --> 00:06:03,759
meat and potatoes of what virtualization

177
00:06:03,759 --> 00:06:04,880
is all about

178
00:06:04,880 --> 00:06:06,479
and that hypervisor

179
00:06:06,479 --> 00:06:08,720
allows multiple guest operating systems

180
00:06:08,720 --> 00:06:11,039
to share resources on a physical

181
00:06:11,039 --> 00:06:12,479
computing unit

182
00:06:12,479 --> 00:06:13,919
and that's great

183
00:06:13,919 --> 00:06:15,199
containers is a little bit of a

184
00:06:15,199 --> 00:06:16,479
different animal because there really

185
00:06:16,479 --> 00:06:19,120
isn't a hypervisor instead you've got

186
00:06:19,120 --> 00:06:21,280
some kind of a run time most folks are

187
00:06:21,280 --> 00:06:23,919
familiar with docker as a popular

188
00:06:23,919 --> 00:06:27,280
runtime environment and the docker

189
00:06:27,280 --> 00:06:29,440
layer allows you to run multiple

190
00:06:29,440 --> 00:06:32,160
container instances on top directly of a

191
00:06:32,160 --> 00:06:34,560
host operating system and that's very

192
00:06:34,560 --> 00:06:35,919
powerful because you've been able to

193
00:06:35,919 --> 00:06:38,080
eliminate some of the components

194
00:06:38,080 --> 00:06:40,240
that cause a lot of churn and angst in

195
00:06:40,240 --> 00:06:42,720
the in the it management space more

196
00:06:42,720 --> 00:06:44,240
specifically

197
00:06:44,240 --> 00:06:46,319
the guest operating systems themselves

198
00:06:46,319 --> 00:06:47,759
can be huge

199
00:06:47,759 --> 00:06:50,319
typically many gigabytes in size and so

200
00:06:50,319 --> 00:06:52,319
each virtual machine that you're running

201
00:06:52,319 --> 00:06:54,960
to support an application has a full

202
00:06:54,960 --> 00:06:56,800
copy of the operating system and guess

203
00:06:56,800 --> 00:06:59,120
what that os has to be maintained has to

204
00:06:59,120 --> 00:07:01,199
be patched it has to be backed up

205
00:07:01,199 --> 00:07:03,360
it's not something that you can truly

206
00:07:03,360 --> 00:07:04,639
ignore

207
00:07:04,639 --> 00:07:07,520
and by contrast in the container space

208
00:07:07,520 --> 00:07:09,599
the runtime environment is what provides

209
00:07:09,599 --> 00:07:12,319
the abstraction layer so engines like

210
00:07:12,319 --> 00:07:16,000
docker container d lxc run c creo these

211
00:07:16,000 --> 00:07:18,000
are all very popular runtime engines

212
00:07:18,000 --> 00:07:20,800
that serve the same purpose which is to

213
00:07:20,800 --> 00:07:22,800
share the underlying host os's

214
00:07:22,800 --> 00:07:25,840
capabilities with multiple instances of

215
00:07:25,840 --> 00:07:27,520
your container

216
00:07:27,520 --> 00:07:29,840
so a container itself has tons of

217
00:07:29,840 --> 00:07:31,280
different layers

218
00:07:31,280 --> 00:07:33,039
at the bottom you've typically got a

219
00:07:33,039 --> 00:07:35,039
booting bootable file system or a kernel

220
00:07:35,039 --> 00:07:36,000
layer

221
00:07:36,000 --> 00:07:37,840
on top of that there's typically a

222
00:07:37,840 --> 00:07:40,800
parent image and that can be a full

223
00:07:40,800 --> 00:07:43,440
operating system traditionally linux or

224
00:07:43,440 --> 00:07:45,360
it can be a very slimmed downed and

225
00:07:45,360 --> 00:07:48,800
bespoke custom created operating system

226
00:07:48,800 --> 00:07:50,080
and then on top of that there's an

227
00:07:50,080 --> 00:07:51,440
application layer and this is where

228
00:07:51,440 --> 00:07:53,440
you'll find things like your mysql

229
00:07:53,440 --> 00:07:55,840
database or your nginx web server and

230
00:07:55,840 --> 00:07:57,759
code like that

231
00:07:57,759 --> 00:07:59,759
and then on the very top there's often a

232
00:07:59,759 --> 00:08:02,400
writable file system for things like

233
00:08:02,400 --> 00:08:05,360
logs access control information

234
00:08:05,360 --> 00:08:07,520
temp files and things like that and the

235
00:08:07,520 --> 00:08:10,000
bootable writable file system usually is

236
00:08:10,000 --> 00:08:11,680
destroyed once the container is

237
00:08:11,680 --> 00:08:13,280
destroyed

238
00:08:13,280 --> 00:08:15,039
so you've got many layers kind of

239
00:08:15,039 --> 00:08:17,360
working together in concert

240
00:08:17,360 --> 00:08:19,520
this colorful picture here represents

241
00:08:19,520 --> 00:08:21,680
kind of the 4cs model of container

242
00:08:21,680 --> 00:08:23,680
security so you've got the cloud

243
00:08:23,680 --> 00:08:25,840
environment on the external layer

244
00:08:25,840 --> 00:08:28,160
meaning what's the security of your data

245
00:08:28,160 --> 00:08:30,000
center like what does that

246
00:08:30,000 --> 00:08:32,159
look like to you and then within that

247
00:08:32,159 --> 00:08:33,919
you've typically got a cluster which is

248
00:08:33,919 --> 00:08:35,679
a family of computing resources to

249
00:08:35,679 --> 00:08:38,000
support the container environment inside

250
00:08:38,000 --> 00:08:40,479
that you have the container itself

251
00:08:40,479 --> 00:08:42,640
and then of course your code running

252
00:08:42,640 --> 00:08:44,800
down at the bottom there

253
00:08:44,800 --> 00:08:46,720
and this presents a lot of challenges

254
00:08:46,720 --> 00:08:48,560
because the attack surface can actually

255
00:08:48,560 --> 00:08:50,800
be very large if these containers are

256
00:08:50,800 --> 00:08:52,640
not managed properly if they're not put

257
00:08:52,640 --> 00:08:54,560
together in a cohesive way

258
00:08:54,560 --> 00:08:57,680
or if the underlying cloud and container

259
00:08:57,680 --> 00:09:00,640
infrastructure is not properly secure so

260
00:09:00,640 --> 00:09:02,000
there's a lot of things that can be done

261
00:09:02,000 --> 00:09:04,560
here to look at the attack surface to to

262
00:09:04,560 --> 00:09:06,560
minimize that and we'll talk about that

263
00:09:06,560 --> 00:09:08,399
in a minute

264
00:09:08,399 --> 00:09:10,399
i just got done saying i wasn't going to

265
00:09:10,399 --> 00:09:12,480
talk about orchestration but just so

266
00:09:12,480 --> 00:09:13,920
that we know what we're talking about

267
00:09:13,920 --> 00:09:15,279
here

268
00:09:15,279 --> 00:09:17,680
orchestration is the capability to

269
00:09:17,680 --> 00:09:20,959
manage multiple container resources

270
00:09:20,959 --> 00:09:23,120
and kubernetes is the easiest example to

271
00:09:23,120 --> 00:09:24,720
talk about but there are other tools out

272
00:09:24,720 --> 00:09:27,760
there like docker swarm apache mesos

273
00:09:27,760 --> 00:09:29,839
there are a lot of different platforms

274
00:09:29,839 --> 00:09:31,680
although i would say kubernetes probably

275
00:09:31,680 --> 00:09:33,600
gets the most attention in terms of its

276
00:09:33,600 --> 00:09:35,920
popularity and the purpose of

277
00:09:35,920 --> 00:09:37,760
orchestration is to provide a couple of

278
00:09:37,760 --> 00:09:40,240
different functions um certainly service

279
00:09:40,240 --> 00:09:41,440
discovery

280
00:09:41,440 --> 00:09:43,360
discovery and load balancing is a key

281
00:09:43,360 --> 00:09:44,560
component

282
00:09:44,560 --> 00:09:46,640
the orchestration of different storage

283
00:09:46,640 --> 00:09:48,160
components i mean these containers have

284
00:09:48,160 --> 00:09:50,240
to be written to disk at some point and

285
00:09:50,240 --> 00:09:52,560
so kubernetes and tools like it help

286
00:09:52,560 --> 00:09:54,720
manage where these devices are where

287
00:09:54,720 --> 00:09:57,279
these containers are stored and how

288
00:09:57,279 --> 00:09:58,640
quickly they get pulled in now

289
00:09:58,640 --> 00:10:00,080
production

290
00:10:00,080 --> 00:10:02,560
things like automated roll outs and

291
00:10:02,560 --> 00:10:04,560
destruction of containers once their

292
00:10:04,560 --> 00:10:07,200
life cycle is over is important

293
00:10:07,200 --> 00:10:09,279
automatic deployment is a key feature of

294
00:10:09,279 --> 00:10:12,000
orchestration tools because the idea is

295
00:10:12,000 --> 00:10:14,640
to kind of ramp up or bring down the

296
00:10:14,640 --> 00:10:17,600
number of containers as demand increases

297
00:10:17,600 --> 00:10:20,000
or decreases for your application

298
00:10:20,000 --> 00:10:22,480
kubernetes and engines like it also have

299
00:10:22,480 --> 00:10:24,320
the ability i call it like a

300
00:10:24,320 --> 00:10:27,120
self-healing capability so if there is a

301
00:10:27,120 --> 00:10:29,040
container that for whatever reason isn't

302
00:10:29,040 --> 00:10:32,399
performing correctly or if it crashes

303
00:10:32,399 --> 00:10:34,800
engines like kubernetes have the ability

304
00:10:34,800 --> 00:10:36,000
to take that container out of

305
00:10:36,000 --> 00:10:37,839
circulation and replace it with a fresh

306
00:10:37,839 --> 00:10:40,560
copy and the idea here is to maximize up

307
00:10:40,560 --> 00:10:41,680
time

308
00:10:41,680 --> 00:10:43,600
maximize service availability and to

309
00:10:43,600 --> 00:10:44,800
generally

310
00:10:44,800 --> 00:10:47,040
take people's hands off the keyboard

311
00:10:47,040 --> 00:10:49,279
with respect to the minute to minute

312
00:10:49,279 --> 00:10:51,200
maintenance of running containers in the

313
00:10:51,200 --> 00:10:53,839
production environment

314
00:10:53,839 --> 00:10:55,440
let me talk a little bit about the

315
00:10:55,440 --> 00:10:57,279
development pipeline so will gave us

316
00:10:57,279 --> 00:10:59,360
some good information about that this

317
00:10:59,360 --> 00:11:00,480
morning and

318
00:11:00,480 --> 00:11:02,160
what i'm going to say might differ a

319
00:11:02,160 --> 00:11:04,720
little bit remember this is just a model

320
00:11:04,720 --> 00:11:07,440
so the continuous improvement continuous

321
00:11:07,440 --> 00:11:09,200
delivery pipeline

322
00:11:09,200 --> 00:11:10,079
is

323
00:11:10,079 --> 00:11:11,839
a good model that most development

324
00:11:11,839 --> 00:11:15,200
organizations use related to planning

325
00:11:15,200 --> 00:11:18,720
building deploying managing testing

326
00:11:18,720 --> 00:11:20,399
and operating their containers out in

327
00:11:20,399 --> 00:11:22,480
the real world so the

328
00:11:22,480 --> 00:11:25,839
the planning phase of this is more about

329
00:11:25,839 --> 00:11:28,160
defining requirements identifying what

330
00:11:28,160 --> 00:11:30,000
your scope is going to be figuring out

331
00:11:30,000 --> 00:11:32,160
which software libraries frameworks

332
00:11:32,160 --> 00:11:33,600
components are going to go into your

333
00:11:33,600 --> 00:11:35,200
software product

334
00:11:35,200 --> 00:11:37,120
coding is pretty straightforward

335
00:11:37,120 --> 00:11:39,519
throughout the build test and release

336
00:11:39,519 --> 00:11:41,120
cycle you're you're incrementing

337
00:11:41,120 --> 00:11:43,279
releases um you're putting together

338
00:11:43,279 --> 00:11:45,279
different use cases and test models and

339
00:11:45,279 --> 00:11:47,680
things like that maybe going through uat

340
00:11:47,680 --> 00:11:49,519
and other unit testing

341
00:11:49,519 --> 00:11:51,680
and then eventually you get into release

342
00:11:51,680 --> 00:11:53,920
deploy operate which is hey here's my

343
00:11:53,920 --> 00:11:55,680
code it's ready for the world let me put

344
00:11:55,680 --> 00:11:58,160
this out into the production setup let's

345
00:11:58,160 --> 00:11:59,839
make sure it gets there and let's

346
00:11:59,839 --> 00:12:02,079
operate it over time making sure that

347
00:12:02,079 --> 00:12:04,399
the life cycle of that software

348
00:12:04,399 --> 00:12:06,639
is appropriate so nothing you haven't

349
00:12:06,639 --> 00:12:08,160
heard before

350
00:12:08,160 --> 00:12:09,519
i'm going to draw a little bit of a

351
00:12:09,519 --> 00:12:11,360
different picture of that to talk

352
00:12:11,360 --> 00:12:13,040
specifically about the container

353
00:12:13,040 --> 00:12:14,800
management pipeline so i've i've

354
00:12:14,800 --> 00:12:17,519
simplified this cicd model a little bit

355
00:12:17,519 --> 00:12:20,160
into four blocks if you will so there's

356
00:12:20,160 --> 00:12:22,160
the development stage which is a lot of

357
00:12:22,160 --> 00:12:25,200
the ci cd stuff i just spoke about

358
00:12:25,200 --> 00:12:27,760
the registry or the second phase is a

359
00:12:27,760 --> 00:12:29,839
really crucial concept to understand

360
00:12:29,839 --> 00:12:32,959
with respect to vulnerability management

361
00:12:32,959 --> 00:12:35,440
the registry is sort of like a

362
00:12:35,440 --> 00:12:38,560
repository for your published code it

363
00:12:38,560 --> 00:12:40,399
exists in a space that is before

364
00:12:40,399 --> 00:12:42,880
production occurs and this is from where

365
00:12:42,880 --> 00:12:44,639
your orchestration engine is going to

366
00:12:44,639 --> 00:12:47,360
draw copies of your image to create and

367
00:12:47,360 --> 00:12:49,440
build and deploy and running instance of

368
00:12:49,440 --> 00:12:51,360
that container

369
00:12:51,360 --> 00:12:53,600
run time as i've said already is kind of

370
00:12:53,600 --> 00:12:55,440
where the action happens the runtime

371
00:12:55,440 --> 00:12:57,680
engine is what is responsible for

372
00:12:57,680 --> 00:12:59,519
maintaining that container keeping it

373
00:12:59,519 --> 00:13:01,360
active ensuring that it functions

374
00:13:01,360 --> 00:13:02,560
correctly

375
00:13:02,560 --> 00:13:04,959
and then at the end you've got um your

376
00:13:04,959 --> 00:13:07,600
master node the host on top of which all

377
00:13:07,600 --> 00:13:10,079
of this stuff runs and it's important to

378
00:13:10,079 --> 00:13:11,839
not forget about that phase because you

379
00:13:11,839 --> 00:13:13,519
still have to consider

380
00:13:13,519 --> 00:13:15,279
traditional vulnerability scanning

381
00:13:15,279 --> 00:13:17,120
vulnerability management and all the fun

382
00:13:17,120 --> 00:13:19,279
stuff associated with patching and

383
00:13:19,279 --> 00:13:20,959
backups and compliance and all that good

384
00:13:20,959 --> 00:13:22,639
stuff

385
00:13:22,639 --> 00:13:25,120
i kind of think of the development phase

386
00:13:25,120 --> 00:13:27,200
and the registry component as more of

387
00:13:27,200 --> 00:13:29,600
the pre-production environment whereas

388
00:13:29,600 --> 00:13:31,519
the runtime and the the cloud

389
00:13:31,519 --> 00:13:33,279
environment your master ho

390
00:13:33,279 --> 00:13:35,360
nodes and hosts and things that's really

391
00:13:35,360 --> 00:13:37,519
like the production setup and there are

392
00:13:37,519 --> 00:13:39,440
a lot of tools that are used throughout

393
00:13:39,440 --> 00:13:40,320
this

394
00:13:40,320 --> 00:13:42,880
four step phase so you've got tools like

395
00:13:42,880 --> 00:13:45,040
jenkins bamboo and git lab in the

396
00:13:45,040 --> 00:13:47,120
development space

397
00:13:47,120 --> 00:13:49,760
registry tools include things like jfrog

398
00:13:49,760 --> 00:13:52,800
artifactory red hat quay amazon's

399
00:13:52,800 --> 00:13:55,600
elastic compute services docker registry

400
00:13:55,600 --> 00:13:57,040
things like that

401
00:13:57,040 --> 00:13:59,120
um and then the runtime setup you know i

402
00:13:59,120 --> 00:14:02,000
mentioned creo container d rocket lxc

403
00:14:02,000 --> 00:14:04,079
there are a ton of different runtime

404
00:14:04,079 --> 00:14:05,839
capabilities that help you manage

405
00:14:05,839 --> 00:14:07,199
containers

406
00:14:07,199 --> 00:14:09,040
that's not an exhaustive list by any

407
00:14:09,040 --> 00:14:11,199
stretch of the imagination the last time

408
00:14:11,199 --> 00:14:13,519
i looked there were some 30 or 40

409
00:14:13,519 --> 00:14:15,600
different tools just available in the

410
00:14:15,600 --> 00:14:17,760
commercial space and that doesn't even

411
00:14:17,760 --> 00:14:18,720
include

412
00:14:18,720 --> 00:14:23,360
things such as open source technologies

413
00:14:24,000 --> 00:14:25,839
so let me enhance this picture just a

414
00:14:25,839 --> 00:14:28,240
little bit i've at the top i'm sort of

415
00:14:28,240 --> 00:14:29,680
showing you once again the difference

416
00:14:29,680 --> 00:14:31,440
between development activities and

417
00:14:31,440 --> 00:14:33,279
production activities

418
00:14:33,279 --> 00:14:35,040
but along the bottom i've sort of

419
00:14:35,040 --> 00:14:37,279
feathered in here this concept of devops

420
00:14:37,279 --> 00:14:40,079
or devsecops that's really the process

421
00:14:40,079 --> 00:14:42,880
associated with moving software from the

422
00:14:42,880 --> 00:14:45,360
ci cd pipeline into the registry and

423
00:14:45,360 --> 00:14:47,920
ultimately into runtime and it happens

424
00:14:47,920 --> 00:14:50,880
in a circular fashion orchestration

425
00:14:50,880 --> 00:14:53,680
again some of these tools like

426
00:14:53,680 --> 00:14:56,480
azure kubernetes service apache meso

427
00:14:56,480 --> 00:14:58,720
stock or swarm

428
00:14:58,720 --> 00:15:01,120
all of those tools have the ability to

429
00:15:01,120 --> 00:15:03,120
reach deeply into the registry to pull

430
00:15:03,120 --> 00:15:04,560
images out to get them ready for

431
00:15:04,560 --> 00:15:07,040
deployment and they talk to the master

432
00:15:07,040 --> 00:15:09,440
node to ensure that resources are spread

433
00:15:09,440 --> 00:15:10,240
out

434
00:15:10,240 --> 00:15:11,519
properly here

435
00:15:11,519 --> 00:15:13,760
and so what i want to say to you here is

436
00:15:13,760 --> 00:15:16,560
that all of these four pipeline phases

437
00:15:16,560 --> 00:15:19,440
introduce an opportunity to scan for and

438
00:15:19,440 --> 00:15:21,839
identify security vulnerabilities and

439
00:15:21,839 --> 00:15:24,160
there are tools that fit into each of

440
00:15:24,160 --> 00:15:26,399
those puzzle pieces so when you think

441
00:15:26,399 --> 00:15:28,639
about vulnerability scanning within that

442
00:15:28,639 --> 00:15:30,800
pipeline it's important to understand

443
00:15:30,800 --> 00:15:32,720
well what tools and systems does our

444
00:15:32,720 --> 00:15:34,959
organization use today

445
00:15:34,959 --> 00:15:36,959
a very important component of that is

446
00:15:36,959 --> 00:15:40,320
what ci and cd tools are you using now

447
00:15:40,320 --> 00:15:42,240
what system do you have

448
00:15:42,240 --> 00:15:44,639
in use as a registry today do we have

449
00:15:44,639 --> 00:15:47,279
the capacity for a staging registry i'll

450
00:15:47,279 --> 00:15:49,759
come back to that topic in a minute but

451
00:15:49,759 --> 00:15:52,639
a staging registry is essentially a copy

452
00:15:52,639 --> 00:15:55,120
of the traditional registry system that

453
00:15:55,120 --> 00:15:56,800
allows you to separate kind of a

454
00:15:56,800 --> 00:15:59,440
pre-production workspace for creating

455
00:15:59,440 --> 00:16:02,880
and posting images compared to like a

456
00:16:02,880 --> 00:16:06,000
final production ready registry that has

457
00:16:06,000 --> 00:16:08,240
the completed and supposedly secured

458
00:16:08,240 --> 00:16:10,800
images that you have built

459
00:16:10,800 --> 00:16:12,560
and knowing all of that is critical to

460
00:16:12,560 --> 00:16:14,720
figure out what vulnerability scanning

461
00:16:14,720 --> 00:16:16,959
tool you need and will work in your

462
00:16:16,959 --> 00:16:18,399
environment

463
00:16:18,399 --> 00:16:21,040
many organizations put a premium on open

464
00:16:21,040 --> 00:16:22,480
source technology and they want to

465
00:16:22,480 --> 00:16:24,399
ensure that they're using an open source

466
00:16:24,399 --> 00:16:26,320
software product but then again there

467
00:16:26,320 --> 00:16:28,079
are a lot of powerful commercial tools

468
00:16:28,079 --> 00:16:29,440
out there as well

469
00:16:29,440 --> 00:16:31,040
budget obviously is going to come into

470
00:16:31,040 --> 00:16:33,199
play associated with that and it's

471
00:16:33,199 --> 00:16:35,519
critical to know well at what phase of

472
00:16:35,519 --> 00:16:38,240
this container development pipeline do i

473
00:16:38,240 --> 00:16:40,240
really want to focus my security efforts

474
00:16:40,240 --> 00:16:42,480
on that's going to have an impact on the

475
00:16:42,480 --> 00:16:44,000
tool and the methodology and the

476
00:16:44,000 --> 00:16:46,800
strategy that you ultimately select

477
00:16:46,800 --> 00:16:48,639
i like to tell organizations to think

478
00:16:48,639 --> 00:16:51,199
about shifting left that's not a term i

479
00:16:51,199 --> 00:16:53,600
made up but what that means is kind of

480
00:16:53,600 --> 00:16:56,240
moving your security efforts further to

481
00:16:56,240 --> 00:16:58,560
the left of the model that i shared

482
00:16:58,560 --> 00:17:00,399
meaning if you can get as close as

483
00:17:00,399 --> 00:17:02,720
humanly possible to

484
00:17:02,720 --> 00:17:05,280
the the development and coding aspect of

485
00:17:05,280 --> 00:17:07,280
your process the better off you're going

486
00:17:07,280 --> 00:17:10,480
to be if you wait until you have code in

487
00:17:10,480 --> 00:17:12,480
production to do vulnerability scanning

488
00:17:12,480 --> 00:17:14,079
and to try to apply security

489
00:17:14,079 --> 00:17:15,839
fundamentals

490
00:17:15,839 --> 00:17:17,439
ultimately that's going to cost you more

491
00:17:17,439 --> 00:17:19,439
and take more time and effort to fix

492
00:17:19,439 --> 00:17:22,400
those items if you can nip it in the bud

493
00:17:22,400 --> 00:17:23,760
perhaps at the beginning of your

494
00:17:23,760 --> 00:17:26,000
development process you have a much

495
00:17:26,000 --> 00:17:28,720
better opportunity to make corrections

496
00:17:28,720 --> 00:17:30,559
more cheaply and more rapidly which will

497
00:17:30,559 --> 00:17:33,840
benefit your organization

498
00:17:34,400 --> 00:17:36,240
so now let's talk a little bit about the

499
00:17:36,240 --> 00:17:37,760
different vulnerability scanning

500
00:17:37,760 --> 00:17:39,280
strategies that you might want to

501
00:17:39,280 --> 00:17:41,039
consider

502
00:17:41,039 --> 00:17:42,799
really the first thing that is important

503
00:17:42,799 --> 00:17:44,880
to talk about related to vulnerability

504
00:17:44,880 --> 00:17:47,200
scanning strategies is reducing your

505
00:17:47,200 --> 00:17:48,880
attack surface

506
00:17:48,880 --> 00:17:50,480
what does that mean well your attack

507
00:17:50,480 --> 00:17:52,799
surface is simply the set of points on

508
00:17:52,799 --> 00:17:54,240
the boundary between all of these

509
00:17:54,240 --> 00:17:56,720
interconnected software components

510
00:17:56,720 --> 00:17:58,960
and they represent points during which

511
00:17:58,960 --> 00:18:01,360
an attacker might be able to probe and

512
00:18:01,360 --> 00:18:03,520
pride and find a weakness and exploit

513
00:18:03,520 --> 00:18:05,520
your application or access your data or

514
00:18:05,520 --> 00:18:08,960
cause uh unanticipated consequences and

515
00:18:08,960 --> 00:18:10,960
so it's really crucial to remember that

516
00:18:10,960 --> 00:18:12,799
you're responsible for everything you

517
00:18:12,799 --> 00:18:14,640
deploy out into the cloud

518
00:18:14,640 --> 00:18:16,640
and so you want to try to minimize your

519
00:18:16,640 --> 00:18:18,880
attack surface which means making your

520
00:18:18,880 --> 00:18:21,600
container images as small as possible

521
00:18:21,600 --> 00:18:23,760
using the minimum number of management

522
00:18:23,760 --> 00:18:26,080
tools and software libraries and

523
00:18:26,080 --> 00:18:28,400
resources that you possibly can to

524
00:18:28,400 --> 00:18:30,640
ensure that the number of uh problem

525
00:18:30,640 --> 00:18:33,600
areas is minimized so the idea here is

526
00:18:33,600 --> 00:18:35,280
if you can put out single purpose

527
00:18:35,280 --> 00:18:37,440
containers can if you can get rid of

528
00:18:37,440 --> 00:18:38,880
some of the default binaries and

529
00:18:38,880 --> 00:18:41,200
packages that come with your software

530
00:18:41,200 --> 00:18:43,440
that libraries that you're using that's

531
00:18:43,440 --> 00:18:44,880
better for you

532
00:18:44,880 --> 00:18:46,559
you may want to take advantage of

533
00:18:46,559 --> 00:18:49,039
distro-less images it's very common

534
00:18:49,039 --> 00:18:51,440
today in the container development space

535
00:18:51,440 --> 00:18:53,840
to use what's called a distro-less image

536
00:18:53,840 --> 00:18:55,760
which is essentially a stripped-down

537
00:18:55,760 --> 00:18:58,000
operating system that doesn't have any

538
00:18:58,000 --> 00:19:00,320
of the typical management tools

539
00:19:00,320 --> 00:19:02,480
and components that you might expect on

540
00:19:02,480 --> 00:19:04,559
a full-blown operating system

541
00:19:04,559 --> 00:19:06,640
many times that means actually removing

542
00:19:06,640 --> 00:19:09,280
things like a user shell or a package

543
00:19:09,280 --> 00:19:11,520
manager and i'm going to touch on why

544
00:19:11,520 --> 00:19:13,840
that might not be a great idea in just a

545
00:19:13,840 --> 00:19:15,200
few minutes

546
00:19:15,200 --> 00:19:17,440
but the idea here in terms of reducing

547
00:19:17,440 --> 00:19:20,160
the attack surface is making containers

548
00:19:20,160 --> 00:19:22,480
as small as they possibly can be which

549
00:19:22,480 --> 00:19:24,799
will result in fewer vulnerabilities and

550
00:19:24,799 --> 00:19:27,200
ultimately you'll have a smaller attack

551
00:19:27,200 --> 00:19:29,280
surface and that's a good thing

552
00:19:29,280 --> 00:19:32,400
um i love the miter attack framework if

553
00:19:32,400 --> 00:19:34,320
you're not familiar with that on my

554
00:19:34,320 --> 00:19:36,640
slide here at the bottom i've got a link

555
00:19:36,640 --> 00:19:39,280
that will take you to a live version of

556
00:19:39,280 --> 00:19:43,120
the mitre attack matrix for containers

557
00:19:43,120 --> 00:19:45,360
mitre attack is simply a common

558
00:19:45,360 --> 00:19:48,080
vocabulary that is used to describe and

559
00:19:48,080 --> 00:19:50,640
explain different techniques tactics and

560
00:19:50,640 --> 00:19:51,919
procedures

561
00:19:51,919 --> 00:19:53,840
that malicious actors will use in in

562
00:19:53,840 --> 00:19:55,120
terms of attacking different

563
00:19:55,120 --> 00:19:57,039
infrastructure components

564
00:19:57,039 --> 00:19:59,039
miter started with this a few years ago

565
00:19:59,039 --> 00:20:01,760
by by putting together ttps for common

566
00:20:01,760 --> 00:20:03,760
operating systems and they've quickly

567
00:20:03,760 --> 00:20:05,760
evolved into more specialized areas and

568
00:20:05,760 --> 00:20:08,320
i i love this containers matrix because

569
00:20:08,320 --> 00:20:10,480
it can highlight for you as a security

570
00:20:10,480 --> 00:20:13,360
professional where are the likely points

571
00:20:13,360 --> 00:20:15,760
of attack for a containerized

572
00:20:15,760 --> 00:20:17,679
development environment this can help

573
00:20:17,679 --> 00:20:20,640
you kind of plan for the minimization of

574
00:20:20,640 --> 00:20:22,240
different security vulnerabilities

575
00:20:22,240 --> 00:20:24,480
conceptually so that you can pivot into

576
00:20:24,480 --> 00:20:26,480
using tools to help you identify some of

577
00:20:26,480 --> 00:20:28,480
these weak spots again check out the

578
00:20:28,480 --> 00:20:30,240
link at the bottom here it's really

579
00:20:30,240 --> 00:20:31,760
great information

580
00:20:31,760 --> 00:20:33,760
if you've not visited the mitre attack

581
00:20:33,760 --> 00:20:35,760
website the cool thing is that this

582
00:20:35,760 --> 00:20:38,240
little matrix is kind of like a live

583
00:20:38,240 --> 00:20:40,159
action thing so you can click on

584
00:20:40,159 --> 00:20:42,559
different concepts related to execution

585
00:20:42,559 --> 00:20:44,880
or persistence or credential access and

586
00:20:44,880 --> 00:20:46,480
that will explode into a different view

587
00:20:46,480 --> 00:20:48,000
that gives you a lot more information

588
00:20:48,000 --> 00:20:50,159
about what you're reading

589
00:20:50,159 --> 00:20:52,559
so what what are the hey scott what are

590
00:20:52,559 --> 00:20:54,240
the vulnerability scanning strategies

591
00:20:54,240 --> 00:20:56,320
that i need to understand well there are

592
00:20:56,320 --> 00:20:57,520
a couple of different ways that you can

593
00:20:57,520 --> 00:20:59,360
go about doing this the first

594
00:20:59,360 --> 00:21:02,720
strategy is to scan software within the

595
00:21:02,720 --> 00:21:05,440
development or build time cycle and so

596
00:21:05,440 --> 00:21:07,280
as i mentioned before shifting left or

597
00:21:07,280 --> 00:21:09,600
pushing as close to your actual

598
00:21:09,600 --> 00:21:12,159
development work as possible is your

599
00:21:12,159 --> 00:21:14,799
best option in terms of identifying

600
00:21:14,799 --> 00:21:17,120
security vulnerabilities early

601
00:21:17,120 --> 00:21:19,679
so move towards the cicd pipeline as

602
00:21:19,679 --> 00:21:21,039
best you can

603
00:21:21,039 --> 00:21:23,440
the idea here is to scan your software

604
00:21:23,440 --> 00:21:25,919
for vulnerabilities and

605
00:21:25,919 --> 00:21:27,760
ensure that you're only putting clean

606
00:21:27,760 --> 00:21:29,760
software into your registry that's an

607
00:21:29,760 --> 00:21:31,520
important step you don't want to deploy

608
00:21:31,520 --> 00:21:33,600
junk to be out in production

609
00:21:33,600 --> 00:21:35,440
the bad news about this particular

610
00:21:35,440 --> 00:21:37,360
scanning strategy is that it interrupts

611
00:21:37,360 --> 00:21:39,120
the workflow so think about that for a

612
00:21:39,120 --> 00:21:41,360
minute you've got your software coders

613
00:21:41,360 --> 00:21:42,720
they're putting together software

614
00:21:42,720 --> 00:21:43,760
they're they're building they're

615
00:21:43,760 --> 00:21:45,440
committing they're they're taking steps

616
00:21:45,440 --> 00:21:47,679
to get their code ready for deployment

617
00:21:47,679 --> 00:21:49,360
you're going to call a timeout on that

618
00:21:49,360 --> 00:21:50,880
and say well hold on a minute i want to

619
00:21:50,880 --> 00:21:52,640
scan your software for vulnerabilities

620
00:21:52,640 --> 00:21:54,159
let's make sure it's clean and oh by the

621
00:21:54,159 --> 00:21:56,240
way wait for me to generate that report

622
00:21:56,240 --> 00:21:58,240
and i may be getting back to you with

623
00:21:58,240 --> 00:22:00,159
some things you need to fix

624
00:22:00,159 --> 00:22:02,159
not bad but it's going to interrupt the

625
00:22:02,159 --> 00:22:04,000
workflow and so there is a cost

626
00:22:04,000 --> 00:22:06,400
associated with that in terms of your

627
00:22:06,400 --> 00:22:08,159
development life cycle and the time it

628
00:22:08,159 --> 00:22:11,120
takes to get code ready for deployment

629
00:22:11,120 --> 00:22:14,080
the second scenario though is absolutely

630
00:22:14,080 --> 00:22:16,480
by a long shot the most popular strategy

631
00:22:16,480 --> 00:22:18,159
that i'll share with you and that is

632
00:22:18,159 --> 00:22:20,720
scanning in the registry um so if you

633
00:22:20,720 --> 00:22:22,480
remember what i said about container

634
00:22:22,480 --> 00:22:25,840
registries these are basically

635
00:22:25,840 --> 00:22:28,880
holding systems holding cells for your

636
00:22:28,880 --> 00:22:31,440
finished container images as they are

637
00:22:31,440 --> 00:22:33,840
ready to be pushed out into deployment

638
00:22:33,840 --> 00:22:35,840
so your orchestration engine will talk

639
00:22:35,840 --> 00:22:37,440
to the registry and say hey i need a

640
00:22:37,440 --> 00:22:39,360
copy of a web server okay give me that

641
00:22:39,360 --> 00:22:41,679
container image and i'll make copies of

642
00:22:41,679 --> 00:22:44,080
it and roll it out so your registry is

643
00:22:44,080 --> 00:22:46,559
really a great opportunity to scan for

644
00:22:46,559 --> 00:22:50,000
vulnerabilities for a couple of reasons

645
00:22:50,000 --> 00:22:52,320
you can do those scans kind of any time

646
00:22:52,320 --> 00:22:55,039
so it's an asynchronous capability which

647
00:22:55,039 --> 00:22:57,200
doesn't interrupt your development shop

648
00:22:57,200 --> 00:22:59,280
it allows you to kind of scan as often

649
00:22:59,280 --> 00:23:02,000
as and as frequently as you want to

650
00:23:02,000 --> 00:23:04,320
and you can rescan images as new

651
00:23:04,320 --> 00:23:06,000
vulnerabilities are identified and

652
00:23:06,000 --> 00:23:08,400
introduced which is great

653
00:23:08,400 --> 00:23:11,200
because this is such a popular strategy

654
00:23:11,200 --> 00:23:12,880
you're going to see in a few minutes a

655
00:23:12,880 --> 00:23:14,720
few minutes that it has the best tool

656
00:23:14,720 --> 00:23:17,360
coverage so almost every

657
00:23:17,360 --> 00:23:19,679
container scanning tool that i'll share

658
00:23:19,679 --> 00:23:21,360
with you today has the ability to

659
00:23:21,360 --> 00:23:23,600
integrate with the systems registry and

660
00:23:23,600 --> 00:23:25,760
it's because it's such a valid place to

661
00:23:25,760 --> 00:23:27,120
do that work

662
00:23:27,120 --> 00:23:29,360
i mentioned a bit ago about staging

663
00:23:29,360 --> 00:23:31,360
registries um this is something that

664
00:23:31,360 --> 00:23:33,440
we're starting to see much more common

665
00:23:33,440 --> 00:23:35,760
out in the uh in the real world and so

666
00:23:35,760 --> 00:23:37,600
the idea here is that you take your

667
00:23:37,600 --> 00:23:40,080
registry system and you basically have a

668
00:23:40,080 --> 00:23:42,960
copy of it so there's a staging registry

669
00:23:42,960 --> 00:23:45,360
and a production registry and the idea

670
00:23:45,360 --> 00:23:47,840
here is you want to put all of your

671
00:23:47,840 --> 00:23:50,000
candidates for container images into the

672
00:23:50,000 --> 00:23:51,760
staging registry

673
00:23:51,760 --> 00:23:53,919
scan the heck out of them like crazy in

674
00:23:53,919 --> 00:23:55,520
a repeat fashion

675
00:23:55,520 --> 00:23:58,159
and then only once you are

676
00:23:58,159 --> 00:24:00,400
confirmed to have a good image you feel

677
00:24:00,400 --> 00:24:02,000
comfortable that you've eliminated all

678
00:24:02,000 --> 00:24:04,320
of the security vulnerabilities then you

679
00:24:04,320 --> 00:24:06,480
can copy that container image into your

680
00:24:06,480 --> 00:24:08,320
production registry and from that

681
00:24:08,320 --> 00:24:10,640
production registry either manually or

682
00:24:10,640 --> 00:24:12,000
through orchestration you're ready to

683
00:24:12,000 --> 00:24:13,600
deploy that out into the production

684
00:24:13,600 --> 00:24:15,520
world and this gives you a distinct

685
00:24:15,520 --> 00:24:17,840
capability to kind of separate some of

686
00:24:17,840 --> 00:24:19,279
the security and management

687
00:24:19,279 --> 00:24:21,039
functionality from the deploy and

688
00:24:21,039 --> 00:24:22,799
operate capability that i've described

689
00:24:22,799 --> 00:24:25,600
before so we're seeing it become more

690
00:24:25,600 --> 00:24:27,039
and more popular

691
00:24:27,039 --> 00:24:29,200
as you might expect larger organizations

692
00:24:29,200 --> 00:24:31,039
are adopting that model first but i

693
00:24:31,039 --> 00:24:33,440
predict that it's going to become much

694
00:24:33,440 --> 00:24:36,880
more pervasive as the years go on

695
00:24:36,880 --> 00:24:38,720
the third scanning strategy i'll talk

696
00:24:38,720 --> 00:24:39,760
about is

697
00:24:39,760 --> 00:24:41,760
runtime scanning which is something you

698
00:24:41,760 --> 00:24:43,679
can probably anticipate

699
00:24:43,679 --> 00:24:46,080
very clearly what that is so that just

700
00:24:46,080 --> 00:24:47,760
means scanning your running containers

701
00:24:47,760 --> 00:24:49,600
and there are a lot of tools available

702
00:24:49,600 --> 00:24:51,600
to do that

703
00:24:51,600 --> 00:24:53,840
one advantage of scanning your runtime

704
00:24:53,840 --> 00:24:56,159
environment is it actually gives you the

705
00:24:56,159 --> 00:24:58,080
best visibility into hey what

706
00:24:58,080 --> 00:25:00,640
vulnerabilities do i have right now that

707
00:25:00,640 --> 00:25:02,320
i need to care about what is in my

708
00:25:02,320 --> 00:25:04,080
production environment that could

709
00:25:04,080 --> 00:25:06,480
represent a risk

710
00:25:06,480 --> 00:25:09,039
it's also a good strategy to employ if

711
00:25:09,039 --> 00:25:10,960
you're concerned about

712
00:25:10,960 --> 00:25:13,520
container drift or rogue copies of

713
00:25:13,520 --> 00:25:15,679
containers you know one of the

714
00:25:15,679 --> 00:25:18,080
principles of containers is that they

715
00:25:18,080 --> 00:25:19,760
are immutable meaning that they're

716
00:25:19,760 --> 00:25:21,520
unchanging images

717
00:25:21,520 --> 00:25:23,200
but as i described for you several

718
00:25:23,200 --> 00:25:25,440
minutes ago almost every container in

719
00:25:25,440 --> 00:25:27,840
use these days has kind of a writable

720
00:25:27,840 --> 00:25:30,559
layer is for no other reason to serve as

721
00:25:30,559 --> 00:25:33,279
a scratch area for things like logs and

722
00:25:33,279 --> 00:25:35,520
temp files and stuff so they're not

723
00:25:35,520 --> 00:25:37,200
really 100

724
00:25:37,200 --> 00:25:40,080
unchanging and as a result of that we've

725
00:25:40,080 --> 00:25:43,200
seen some organizations at ibm

726
00:25:43,200 --> 00:25:45,120
patch running containers or try to

727
00:25:45,120 --> 00:25:47,600
update packages on running containers

728
00:25:47,600 --> 00:25:49,279
and what happens there is you start to

729
00:25:49,279 --> 00:25:51,279
get different copies of the same

730
00:25:51,279 --> 00:25:53,520
container but they're not all the same

731
00:25:53,520 --> 00:25:56,000
and that introduces a level of risk so

732
00:25:56,000 --> 00:25:58,159
by scanning your containers in the run

733
00:25:58,159 --> 00:26:00,080
time environment you're getting the best

734
00:26:00,080 --> 00:26:02,720
view into well what what vulnerabilities

735
00:26:02,720 --> 00:26:04,400
are here right now that i need to be

736
00:26:04,400 --> 00:26:06,559
concerned about

737
00:26:06,559 --> 00:26:08,240
a challenge associated with this

738
00:26:08,240 --> 00:26:10,799
strategy is that each organization has

739
00:26:10,799 --> 00:26:13,120
to figure out well what what exactly is

740
00:26:13,120 --> 00:26:14,880
my threshold what you know when when do

741
00:26:14,880 --> 00:26:17,760
i need to act when do i need to not act

742
00:26:17,760 --> 00:26:19,919
for example you might say to yourself

743
00:26:19,919 --> 00:26:22,159
well i where where we're going to draw

744
00:26:22,159 --> 00:26:23,440
the line is

745
00:26:23,440 --> 00:26:25,279
we want to make sure we have no critical

746
00:26:25,279 --> 00:26:27,200
and high vulnerabilities and that might

747
00:26:27,200 --> 00:26:30,320
be good enough some organizations

748
00:26:30,320 --> 00:26:32,240
specifically if they are under heavy

749
00:26:32,240 --> 00:26:33,840
compliance regulation or if they're a

750
00:26:33,840 --> 00:26:35,760
government entity they may say hey you

751
00:26:35,760 --> 00:26:37,760
know what no vulnerabilities are

752
00:26:37,760 --> 00:26:39,440
acceptable to us we need to make sure

753
00:26:39,440 --> 00:26:42,240
that we can't identify any weaknesses in

754
00:26:42,240 --> 00:26:44,640
these containers so in terms of

755
00:26:44,640 --> 00:26:47,120
prosecuting vulnerabilities your group

756
00:26:47,120 --> 00:26:49,120
your company your org has to decide well

757
00:26:49,120 --> 00:26:52,240
where are we going to draw that line

758
00:26:52,240 --> 00:26:54,880
and then finally an advanced strategy is

759
00:26:54,880 --> 00:26:57,039
to use something like kubernetes

760
00:26:57,039 --> 00:26:58,799
admission controllers

761
00:26:58,799 --> 00:27:00,640
admission controllers are a topic that

762
00:27:00,640 --> 00:27:02,559
i'm hoping to do a lot more research on

763
00:27:02,559 --> 00:27:03,919
in the future

764
00:27:03,919 --> 00:27:06,400
but kubernetes basically provides

765
00:27:06,400 --> 00:27:09,919
a very powerful api driven interface to

766
00:27:09,919 --> 00:27:12,799
your container space that lets you apply

767
00:27:12,799 --> 00:27:15,440
certain decisions and logic to

768
00:27:15,440 --> 00:27:17,039
what's happening with your containers

769
00:27:17,039 --> 00:27:19,120
and and what i mean by that is you can

770
00:27:19,120 --> 00:27:21,200
write a kubernetes admission controller

771
00:27:21,200 --> 00:27:22,159
that says

772
00:27:22,159 --> 00:27:24,480
if i detect a running container that has

773
00:27:24,480 --> 00:27:26,320
x number of vulnerabilities we'll pull

774
00:27:26,320 --> 00:27:29,039
that out of circulation or destroy it

775
00:27:29,039 --> 00:27:30,480
you might also

776
00:27:30,480 --> 00:27:32,080
configure your admission controller to

777
00:27:32,080 --> 00:27:34,480
say hey i'm only going to pull an image

778
00:27:34,480 --> 00:27:37,039
from the production registry once i can

779
00:27:37,039 --> 00:27:38,799
validate that there is an acceptable

780
00:27:38,799 --> 00:27:40,320
vulnerability scan that has been

781
00:27:40,320 --> 00:27:42,399
completed and that gives you some

782
00:27:42,399 --> 00:27:45,039
powerful tools to kind of automate some

783
00:27:45,039 --> 00:27:46,559
of the security with respect to

784
00:27:46,559 --> 00:27:48,320
deploying your containers that's a

785
00:27:48,320 --> 00:27:50,080
really powerful powerful thing to have

786
00:27:50,080 --> 00:27:52,159
in your toolkit

787
00:27:52,159 --> 00:27:54,240
it can be sort of complex

788
00:27:54,240 --> 00:27:56,320
some of the larger organizations that

789
00:27:56,320 --> 00:27:58,480
then dev shops in the container space

790
00:27:58,480 --> 00:28:00,559
already use admission controllers for

791
00:28:00,559 --> 00:28:03,520
other criteria but we haven't seen a lot

792
00:28:03,520 --> 00:28:05,679
of activity related to

793
00:28:05,679 --> 00:28:07,520
admission controller technology

794
00:28:07,520 --> 00:28:09,760
specifically for security

795
00:28:09,760 --> 00:28:11,279
again i think that's something that is

796
00:28:11,279 --> 00:28:13,760
is absolutely going to change over time

797
00:28:13,760 --> 00:28:14,480
so

798
00:28:14,480 --> 00:28:15,919
let's go back to the registry for a

799
00:28:15,919 --> 00:28:17,760
minute i mentioned this before but the

800
00:28:17,760 --> 00:28:19,360
the registry

801
00:28:19,360 --> 00:28:22,000
segment of this process is where

802
00:28:22,000 --> 00:28:24,799
99 of folks doing vulnerability scanning

803
00:28:24,799 --> 00:28:27,279
are operating um you know if you've got

804
00:28:27,279 --> 00:28:30,799
a tool like jfrog artifactory red hat

805
00:28:30,799 --> 00:28:33,039
quay or docker registry 2

806
00:28:33,039 --> 00:28:35,200
all of the tools that we see out there

807
00:28:35,200 --> 00:28:37,520
common in the marketplace can talk to

808
00:28:37,520 --> 00:28:39,200
those registry systems and what that

809
00:28:39,200 --> 00:28:41,360
means is they can actually intersect

810
00:28:41,360 --> 00:28:43,760
with the registry they can scan images

811
00:28:43,760 --> 00:28:45,840
that have been published there and give

812
00:28:45,840 --> 00:28:47,520
you a report back on hey what

813
00:28:47,520 --> 00:28:48,880
vulnerabilities do i need to be

814
00:28:48,880 --> 00:28:50,320
concerned about

815
00:28:50,320 --> 00:28:52,559
and typically you can get that in in the

816
00:28:52,559 --> 00:28:55,200
form of some kind of a live dashboard my

817
00:28:55,200 --> 00:28:58,159
screenshot here is showing a view into

818
00:28:58,159 --> 00:29:01,120
qualis's container security tool and so

819
00:29:01,120 --> 00:29:02,480
you can look at all the different

820
00:29:02,480 --> 00:29:05,279
registries and the images within there

821
00:29:05,279 --> 00:29:07,279
and produce many different reports

822
00:29:07,279 --> 00:29:08,880
showing hey where do we have the highest

823
00:29:08,880 --> 00:29:10,399
number of vulnerabilities and what are

824
00:29:10,399 --> 00:29:12,720
their severity levels and what things do

825
00:29:12,720 --> 00:29:14,559
we need to take action on so it's a

826
00:29:14,559 --> 00:29:16,960
really powerful capability again as i

827
00:29:16,960 --> 00:29:19,200
said um a lot of organizations are doing

828
00:29:19,200 --> 00:29:21,360
this whole staging versus production

829
00:29:21,360 --> 00:29:22,640
registry

830
00:29:22,640 --> 00:29:24,399
and i highly recommend that

831
00:29:24,399 --> 00:29:25,840
you adopt that model if your

832
00:29:25,840 --> 00:29:28,399
organization can do so

833
00:29:28,399 --> 00:29:29,919
one thing that's kind of interesting to

834
00:29:29,919 --> 00:29:32,159
me about containers is you know when the

835
00:29:32,159 --> 00:29:34,559
container technology was first becoming

836
00:29:34,559 --> 00:29:36,000
popular

837
00:29:36,000 --> 00:29:37,760
there was this assumption that

838
00:29:37,760 --> 00:29:40,080
containers only existed for a matter of

839
00:29:40,080 --> 00:29:41,919
minutes or hours that they were always

840
00:29:41,919 --> 00:29:44,559
coming and going and becoming

841
00:29:44,559 --> 00:29:46,960
destroyed and repopulated based on

842
00:29:46,960 --> 00:29:48,880
supply and demand and actions in the

843
00:29:48,880 --> 00:29:49,919
cloud

844
00:29:49,919 --> 00:29:51,520
and that isn't really as true as i

845
00:29:51,520 --> 00:29:53,960
initially thought that it was in fact a

846
00:29:53,960 --> 00:29:57,440
2019 study from cystix showed that half

847
00:29:57,440 --> 00:29:59,200
of containers out in the production

848
00:29:59,200 --> 00:30:00,399
environment

849
00:30:00,399 --> 00:30:04,159
are only updated you know weekly or less

850
00:30:04,159 --> 00:30:06,080
which means that there is a continued

851
00:30:06,080 --> 00:30:08,080
opportunity for vulnerabilities to be

852
00:30:08,080 --> 00:30:09,520
introduced

853
00:30:09,520 --> 00:30:10,960
if you've ever done anything with

854
00:30:10,960 --> 00:30:13,120
vulnerability management you'll know

855
00:30:13,120 --> 00:30:16,080
that new weaponized attacks proofs of

856
00:30:16,080 --> 00:30:18,240
concept and vulnerability exploits are

857
00:30:18,240 --> 00:30:20,640
published every single day in some cases

858
00:30:20,640 --> 00:30:23,360
thousands of times per day and so if you

859
00:30:23,360 --> 00:30:25,440
think about it a week is a pretty long

860
00:30:25,440 --> 00:30:27,360
time on the internet and there are many

861
00:30:27,360 --> 00:30:29,279
opportunities for new vulnerabilities to

862
00:30:29,279 --> 00:30:31,760
be introduced and therefore resident in

863
00:30:31,760 --> 00:30:33,919
your running container space without

864
00:30:33,919 --> 00:30:35,279
your knowledge and that's why it's

865
00:30:35,279 --> 00:30:37,840
really crucial to understand

866
00:30:37,840 --> 00:30:40,240
where are the opportunities that i can

867
00:30:40,240 --> 00:30:42,159
look for these vulnerabilities detect

868
00:30:42,159 --> 00:30:43,919
what they are and make a plan to get

869
00:30:43,919 --> 00:30:45,520
them fixed

870
00:30:45,520 --> 00:30:47,440
so the idea in the grand scheme of

871
00:30:47,440 --> 00:30:49,919
things here is to scan throughout the

872
00:30:49,919 --> 00:30:52,559
container life cycle so you want to try

873
00:30:52,559 --> 00:30:55,600
to shift left to try to scan systems

874
00:30:55,600 --> 00:30:58,720
within your ci cd build process so that

875
00:30:58,720 --> 00:31:00,799
you're catching vulnerabilities early

876
00:31:00,799 --> 00:31:02,480
before they get published into the

877
00:31:02,480 --> 00:31:04,640
registry but you also want to scan

878
00:31:04,640 --> 00:31:06,960
images in your registry remember these

879
00:31:06,960 --> 00:31:08,720
are candidates for deployment so you

880
00:31:08,720 --> 00:31:10,799
want to make sure that the systems that

881
00:31:10,799 --> 00:31:13,279
the software packages in your registry

882
00:31:13,279 --> 00:31:16,720
are as secure as they possibly can be

883
00:31:16,720 --> 00:31:19,679
there's no reason to also not scan your

884
00:31:19,679 --> 00:31:21,120
running containers like i mentioned

885
00:31:21,120 --> 00:31:23,919
before things like container drift the

886
00:31:23,919 --> 00:31:26,159
population of road containers that you

887
00:31:26,159 --> 00:31:28,799
maybe didn't think about managing can

888
00:31:28,799 --> 00:31:30,640
all happen to you and so it's critical

889
00:31:30,640 --> 00:31:33,120
to understand what vulnerabilities do i

890
00:31:33,120 --> 00:31:34,480
have in my running production

891
00:31:34,480 --> 00:31:37,200
environment at any moment in time

892
00:31:37,200 --> 00:31:39,279
definitely make use of kubernetes

893
00:31:39,279 --> 00:31:41,600
emission controllers if you possibly can

894
00:31:41,600 --> 00:31:42,960
there's a lot of great research out

895
00:31:42,960 --> 00:31:44,640
there that i'll point you to in a little

896
00:31:44,640 --> 00:31:45,919
bit

897
00:31:45,919 --> 00:31:48,000
that can tell you more about how to set

898
00:31:48,000 --> 00:31:50,240
up a container admission controller

899
00:31:50,240 --> 00:31:52,480
kubernetes admission controller and how

900
00:31:52,480 --> 00:31:54,480
to properly manage that

901
00:31:54,480 --> 00:31:56,080
and then last but not least the final

902
00:31:56,080 --> 00:31:59,519
phase continue scanning your hosts

903
00:31:59,519 --> 00:32:01,279
everything that i've said today about

904
00:32:01,279 --> 00:32:03,200
vulnerability scanning strategies for

905
00:32:03,200 --> 00:32:05,200
containers is important

906
00:32:05,200 --> 00:32:06,720
but you can't ignore the host

907
00:32:06,720 --> 00:32:08,720
infrastructure as well all of your cloud

908
00:32:08,720 --> 00:32:11,039
systems your infrastructure components

909
00:32:11,039 --> 00:32:13,039
they can have vulnerabilities as well

910
00:32:13,039 --> 00:32:15,519
and so the traditional vulnerable

911
00:32:15,519 --> 00:32:17,120
vulnerability management tools in the

912
00:32:17,120 --> 00:32:18,880
marketplace today can help you in that

913
00:32:18,880 --> 00:32:22,240
space and you should continue to do that

914
00:32:22,240 --> 00:32:24,399
so the message here is test early and

915
00:32:24,399 --> 00:32:27,360
test often to the best of your ability

916
00:32:27,360 --> 00:32:29,120
deploy these different strategies that

917
00:32:29,120 --> 00:32:31,200
i've outlined at every phase if you

918
00:32:31,200 --> 00:32:33,279
possibly can sometimes that's going to

919
00:32:33,279 --> 00:32:35,200
be cost prohibitive and again each

920
00:32:35,200 --> 00:32:36,960
organization needs to decide you know

921
00:32:36,960 --> 00:32:38,320
what's our threshold what does our

922
00:32:38,320 --> 00:32:39,760
budget look like

923
00:32:39,760 --> 00:32:41,600
some of the things i talked about before

924
00:32:41,600 --> 00:32:43,600
what tools have we already invested in

925
00:32:43,600 --> 00:32:45,600
and does that have an impact on what

926
00:32:45,600 --> 00:32:48,080
container scanning tools that we pick

927
00:32:48,080 --> 00:32:49,279
there are a lot of great open source

928
00:32:49,279 --> 00:32:51,279
choices out there that might augment

929
00:32:51,279 --> 00:32:54,080
some investments you've already made

930
00:32:54,080 --> 00:32:54,799
so

931
00:32:54,799 --> 00:32:56,880
let's get into some product comparison

932
00:32:56,880 --> 00:32:58,399
and i want to make a few notes about

933
00:32:58,399 --> 00:33:00,640
that before we dive into the individual

934
00:33:00,640 --> 00:33:02,480
tools these are really important things

935
00:33:02,480 --> 00:33:04,720
to consider not all of these products

936
00:33:04,720 --> 00:33:06,159
are equal

937
00:33:06,159 --> 00:33:07,679
what i mean by that is they have

938
00:33:07,679 --> 00:33:09,519
different capabilities so

939
00:33:09,519 --> 00:33:11,440
just to give you an example qualis one

940
00:33:11,440 --> 00:33:13,279
of the tools that my team works quite a

941
00:33:13,279 --> 00:33:15,519
bit with is actually delivered as a

942
00:33:15,519 --> 00:33:17,360
docker image so if you're not using

943
00:33:17,360 --> 00:33:19,519
docker well guess what qualis is not

944
00:33:19,519 --> 00:33:21,760
going to be a great choice for you

945
00:33:21,760 --> 00:33:23,600
the tenable product which is a really

946
00:33:23,600 --> 00:33:25,120
really popular and powerful

947
00:33:25,120 --> 00:33:27,360
vulnerability scanning tool can only

948
00:33:27,360 --> 00:33:29,760
scan registry images now i suspect

949
00:33:29,760 --> 00:33:31,600
that's going to change because in fact

950
00:33:31,600 --> 00:33:32,799
tenable's starting to make some

951
00:33:32,799 --> 00:33:34,640
acquisitions in this space to enhance

952
00:33:34,640 --> 00:33:36,880
their capability but right now

953
00:33:36,880 --> 00:33:38,960
they're only able to scan registry

954
00:33:38,960 --> 00:33:41,679
images and so if scanning your running

955
00:33:41,679 --> 00:33:43,840
containers is a crucial aspect for your

956
00:33:43,840 --> 00:33:45,840
organization well then maybe tenable

957
00:33:45,840 --> 00:33:48,480
might not be the best choice for that

958
00:33:48,480 --> 00:33:50,000
a lot of different products that i'll

959
00:33:50,000 --> 00:33:51,519
share with you have

960
00:33:51,519 --> 00:33:53,919
open source equivalents but also

961
00:33:53,919 --> 00:33:56,880
commercial flavors of those tools and so

962
00:33:56,880 --> 00:33:58,399
what you will see is

963
00:33:58,399 --> 00:34:00,559
the tools that fall into that space

964
00:34:00,559 --> 00:34:02,320
maybe have some different capabilities

965
00:34:02,320 --> 00:34:04,159
for their commercial product compared

966
00:34:04,159 --> 00:34:06,399
with the open source system on which

967
00:34:06,399 --> 00:34:08,719
they are based

968
00:34:08,719 --> 00:34:10,639
and remember that some of these products

969
00:34:10,639 --> 00:34:12,480
aren't necessarily compatible with all

970
00:34:12,480 --> 00:34:14,000
linux containers

971
00:34:14,000 --> 00:34:15,839
i've seen a couple of products that seem

972
00:34:15,839 --> 00:34:18,560
to be sort of like azure or google cloud

973
00:34:18,560 --> 00:34:20,879
specific but that's really not a huge

974
00:34:20,879 --> 00:34:23,119
huge consideration but it's not a zero

975
00:34:23,119 --> 00:34:25,280
consideration

976
00:34:25,280 --> 00:34:27,440
and then my second important note is

977
00:34:27,440 --> 00:34:29,040
some of these scanners in fact the

978
00:34:29,040 --> 00:34:31,520
majority of them actually have trouble

979
00:34:31,520 --> 00:34:33,918
with distro list containers now i just

980
00:34:33,918 --> 00:34:36,480
got done saying 20 minutes ago that you

981
00:34:36,480 --> 00:34:38,719
might want to consider a distro-less

982
00:34:38,719 --> 00:34:40,480
container image

983
00:34:40,480 --> 00:34:42,879
as part of your build process and again

984
00:34:42,879 --> 00:34:44,960
what that means is you're talking about

985
00:34:44,960 --> 00:34:47,359
a container based on a super slim

986
00:34:47,359 --> 00:34:49,520
operating system that may have a lot of

987
00:34:49,520 --> 00:34:52,079
the traditional os components removed

988
00:34:52,079 --> 00:34:54,159
and the reason that that's a problem is

989
00:34:54,159 --> 00:34:56,320
many of the vulnerability scanner tools

990
00:34:56,320 --> 00:34:57,599
i'm going to share with you in just a

991
00:34:57,599 --> 00:34:58,880
second

992
00:34:58,880 --> 00:35:00,880
they depend on things like the package

993
00:35:00,880 --> 00:35:03,440
manager to be able to enumerate the

994
00:35:03,440 --> 00:35:05,680
different versions of software libraries

995
00:35:05,680 --> 00:35:07,680
and code and stuff that is actually in

996
00:35:07,680 --> 00:35:09,599
your container image and so if you take

997
00:35:09,599 --> 00:35:11,599
that out all of a sudden you've lost a

998
00:35:11,599 --> 00:35:13,599
lot of capability so

999
00:35:13,599 --> 00:35:15,119
keep that in mind as we look at what

1000
00:35:15,119 --> 00:35:16,880
some of these products are and what they

1001
00:35:16,880 --> 00:35:18,079
can do

1002
00:35:18,079 --> 00:35:19,760
so i've put together

1003
00:35:19,760 --> 00:35:22,800
a matrix of some of the most popular

1004
00:35:22,800 --> 00:35:24,640
vulnerability scanning products for

1005
00:35:24,640 --> 00:35:27,119
containers this is not a fully exhausted

1006
00:35:27,119 --> 00:35:28,079
list i

1007
00:35:28,079 --> 00:35:29,920
have to put together 10 slides to show

1008
00:35:29,920 --> 00:35:32,160
every single product in the marketplace

1009
00:35:32,160 --> 00:35:34,079
uh these are the ones that i've

1010
00:35:34,079 --> 00:35:36,160
researched as being the the most popular

1011
00:35:36,160 --> 00:35:39,119
the most common um the most capable and

1012
00:35:39,119 --> 00:35:41,839
i've tried to identify which ones have

1013
00:35:41,839 --> 00:35:44,400
an open source component versus a

1014
00:35:44,400 --> 00:35:46,400
commercial component so

1015
00:35:46,400 --> 00:35:48,880
in my little chart here if you see a red

1016
00:35:48,880 --> 00:35:51,599
dot that means yes this tool can do that

1017
00:35:51,599 --> 00:35:54,000
so across the first line here and core

1018
00:35:54,000 --> 00:35:56,880
is a very popular tool it can scan your

1019
00:35:56,880 --> 00:35:59,200
ci cd pipeline what that means is you

1020
00:35:59,200 --> 00:36:01,839
can actually integrate that with jfrog

1021
00:36:01,839 --> 00:36:04,400
or with jenkins to scan code before it

1022
00:36:04,400 --> 00:36:06,960
gets published as a container image it

1023
00:36:06,960 --> 00:36:09,440
can scan the registry but it can't scan

1024
00:36:09,440 --> 00:36:11,520
running containers and it can't scan

1025
00:36:11,520 --> 00:36:13,760
hosts and so you'll see the varying

1026
00:36:13,760 --> 00:36:15,599
capabilities of some of these tools

1027
00:36:15,599 --> 00:36:17,839
they're not all exactly the same

1028
00:36:17,839 --> 00:36:20,000
but as i mentioned before you can see

1029
00:36:20,000 --> 00:36:21,839
that i've put a red dot for every

1030
00:36:21,839 --> 00:36:24,320
product under scans registry all of

1031
00:36:24,320 --> 00:36:26,240
these tools ancore

1032
00:36:26,240 --> 00:36:29,920
trivi atomic cli clear they all can

1033
00:36:29,920 --> 00:36:31,520
intersect with your registry and help

1034
00:36:31,520 --> 00:36:34,079
you detect and identify vulnerabilities

1035
00:36:34,079 --> 00:36:36,880
uh within that space so that's good

1036
00:36:36,880 --> 00:36:38,640
the little circle that's like half gray

1037
00:36:38,640 --> 00:36:41,200
half red what that means is

1038
00:36:41,200 --> 00:36:43,440
there is a component that can do that

1039
00:36:43,440 --> 00:36:45,760
capability but it might either be the

1040
00:36:45,760 --> 00:36:47,440
open source piece or it might be the

1041
00:36:47,440 --> 00:36:49,599
commercial component so that's a really

1042
00:36:49,599 --> 00:36:51,599
critical consideration when you think

1043
00:36:51,599 --> 00:36:54,880
about selecting some of these products

1044
00:36:54,880 --> 00:36:56,480
i am going to make this presentation

1045
00:36:56,480 --> 00:36:58,320
available to everyone after of course

1046
00:36:58,320 --> 00:37:00,160
there's going to be a replay thanks to

1047
00:37:00,160 --> 00:37:02,560
the carolinacon folks so don't worry if

1048
00:37:02,560 --> 00:37:04,240
you haven't been able to take screen cap

1049
00:37:04,240 --> 00:37:06,000
of this i'll make it available to you

1050
00:37:06,000 --> 00:37:07,760
later

1051
00:37:07,760 --> 00:37:09,839
let's talk um just briefly about

1052
00:37:09,839 --> 00:37:11,119
compliance

1053
00:37:11,119 --> 00:37:12,720
you know anytime you're talking about

1054
00:37:12,720 --> 00:37:14,240
looking for vulnerabilities it's

1055
00:37:14,240 --> 00:37:16,240
important to consider are there any

1056
00:37:16,240 --> 00:37:18,400
compulsory things that i need to worry

1057
00:37:18,400 --> 00:37:20,079
about from a security compliance

1058
00:37:20,079 --> 00:37:22,320
viewpoint and the answer is yes yes

1059
00:37:22,320 --> 00:37:23,520
there is

1060
00:37:23,520 --> 00:37:25,280
there are several different container

1061
00:37:25,280 --> 00:37:27,280
related compliance frameworks that are

1062
00:37:27,280 --> 00:37:30,240
available today some of them are merely

1063
00:37:30,240 --> 00:37:32,000
helpful in terms of advice and best

1064
00:37:32,000 --> 00:37:34,240
practices some of them are absolutely

1065
00:37:34,240 --> 00:37:35,440
required

1066
00:37:35,440 --> 00:37:37,680
i really really like nist special

1067
00:37:37,680 --> 00:37:40,240
publication 800-190

1068
00:37:40,240 --> 00:37:42,880
which is titled application container

1069
00:37:42,880 --> 00:37:44,160
security

1070
00:37:44,160 --> 00:37:46,160
it's a great nist document that can give

1071
00:37:46,160 --> 00:37:48,640
you insight into how do i go about

1072
00:37:48,640 --> 00:37:50,880
securing my container environment and my

1073
00:37:50,880 --> 00:37:52,880
development shop and it talks

1074
00:37:52,880 --> 00:37:54,960
specifically about managing your uh

1075
00:37:54,960 --> 00:37:57,440
container images it specifically talks

1076
00:37:57,440 --> 00:38:00,320
about scanning those images for malware

1077
00:38:00,320 --> 00:38:02,160
and and other things but it definitely

1078
00:38:02,160 --> 00:38:04,560
focuses on minimizing the attack surface

1079
00:38:04,560 --> 00:38:07,440
which we talked about a few minutes ago

1080
00:38:07,440 --> 00:38:08,960
one of the kind of interesting things

1081
00:38:08,960 --> 00:38:11,119
about the nist document is it gives

1082
00:38:11,119 --> 00:38:14,320
equal weight to scanning systems in the

1083
00:38:14,320 --> 00:38:17,040
registry and monitoring your runtime

1084
00:38:17,040 --> 00:38:19,200
vulnerability load as well and i thought

1085
00:38:19,200 --> 00:38:20,640
that was kind of interesting they're

1086
00:38:20,640 --> 00:38:22,560
leaning towards you know the model that

1087
00:38:22,560 --> 00:38:24,800
i put forward which is to scan in every

1088
00:38:24,800 --> 00:38:27,280
phase of that cycle if you can

1089
00:38:27,280 --> 00:38:28,960
some of the other compliance frameworks

1090
00:38:28,960 --> 00:38:33,280
like pci and fedramp and even the gdpr

1091
00:38:33,280 --> 00:38:36,000
for considerations for european data

1092
00:38:36,000 --> 00:38:37,359
processing

1093
00:38:37,359 --> 00:38:38,560
they all talk about different

1094
00:38:38,560 --> 00:38:40,320
requirements associated with

1095
00:38:40,320 --> 00:38:42,880
specifically scanning containers

1096
00:38:42,880 --> 00:38:44,320
one of the things that i thought was

1097
00:38:44,320 --> 00:38:46,160
really interesting is fedramp

1098
00:38:46,160 --> 00:38:48,800
specifically talks about inventorying

1099
00:38:48,800 --> 00:38:51,119
all of your containers and scanning all

1100
00:38:51,119 --> 00:38:53,359
of the registries on a monthly basis

1101
00:38:53,359 --> 00:38:54,800
frankly i would say you need to do it a

1102
00:38:54,800 --> 00:38:56,640
heck of a lot more frequently with that

1103
00:38:56,640 --> 00:38:57,760
than that

1104
00:38:57,760 --> 00:38:59,520
but just keep in mind that one of these

1105
00:38:59,520 --> 00:39:01,920
compliance frameworks may very well

1106
00:39:01,920 --> 00:39:03,599
apply to your organization and it's

1107
00:39:03,599 --> 00:39:05,200
important to be familiar with what they

1108
00:39:05,200 --> 00:39:07,598
require

1109
00:39:07,680 --> 00:39:09,920
so in summary a couple of conclusions

1110
00:39:09,920 --> 00:39:12,240
for you containers although they're

1111
00:39:12,240 --> 00:39:14,160
supposed to be unchanging actually are

1112
00:39:14,160 --> 00:39:16,720
made up of multiple complex layers and

1113
00:39:16,720 --> 00:39:18,560
each of those layers can have potential

1114
00:39:18,560 --> 00:39:20,160
vulnerabilities and that's why it's

1115
00:39:20,160 --> 00:39:22,560
critical to extend your vulnerability

1116
00:39:22,560 --> 00:39:24,960
management program into the container

1117
00:39:24,960 --> 00:39:26,640
space

1118
00:39:26,640 --> 00:39:28,640
vulnerability management for containers

1119
00:39:28,640 --> 00:39:31,040
really requires you to shift left to

1120
00:39:31,040 --> 00:39:33,359
push as close to your co-development

1121
00:39:33,359 --> 00:39:35,760
cycle as humanly possible so that you

1122
00:39:35,760 --> 00:39:38,480
can fix vulnerabilities cheaply and more

1123
00:39:38,480 --> 00:39:40,320
rapidly than you would do in a

1124
00:39:40,320 --> 00:39:42,480
production environment uh there are lots

1125
00:39:42,480 --> 00:39:44,720
of opportunities as i've described for

1126
00:39:44,720 --> 00:39:46,240
scanning sort of throughout the

1127
00:39:46,240 --> 00:39:48,480
container pipeline and that's important

1128
00:39:48,480 --> 00:39:50,480
to find system weaknesses and eliminate

1129
00:39:50,480 --> 00:39:51,280
them

1130
00:39:51,280 --> 00:39:53,920
before you get bit in the fannie

1131
00:39:53,920 --> 00:39:55,839
the marketplace that i shared a minute

1132
00:39:55,839 --> 00:39:58,960
ago has a pretty decent blend of both

1133
00:39:58,960 --> 00:40:01,200
open source and commercial software

1134
00:40:01,200 --> 00:40:03,200
tools that really can almost work in any

1135
00:40:03,200 --> 00:40:05,200
environment there's a lot of choices to

1136
00:40:05,200 --> 00:40:07,599
be made on what tools right for your

1137
00:40:07,599 --> 00:40:08,960
organization

1138
00:40:08,960 --> 00:40:10,400
but i hope i've armed you with enough

1139
00:40:10,400 --> 00:40:12,160
information that you can begin that

1140
00:40:12,160 --> 00:40:13,760
investigation

1141
00:40:13,760 --> 00:40:15,200
um and then finally

1142
00:40:15,200 --> 00:40:17,839
compliance and demonstrable controls

1143
00:40:17,839 --> 00:40:19,760
that's never going out of style right we

1144
00:40:19,760 --> 00:40:22,000
always live under the framework or the

1145
00:40:22,000 --> 00:40:24,400
the umbrella of security compliance and

1146
00:40:24,400 --> 00:40:26,240
the container space is no different so

1147
00:40:26,240 --> 00:40:28,240
make sure that you understand what

1148
00:40:28,240 --> 00:40:31,040
regulations what requirements apply to

1149
00:40:31,040 --> 00:40:34,560
your company or your organization

1150
00:40:34,560 --> 00:40:37,040
a couple of takeaways for you here um

1151
00:40:37,040 --> 00:40:39,839
my advice build minimal base images if

1152
00:40:39,839 --> 00:40:41,920
you can use a distro-less image and

1153
00:40:41,920 --> 00:40:44,079
still successfully scan that image for

1154
00:40:44,079 --> 00:40:46,800
vulnerabilities do that use trusted

1155
00:40:46,800 --> 00:40:49,200
software sources be cognizant of the

1156
00:40:49,200 --> 00:40:51,119
limitations of the choices that you're

1157
00:40:51,119 --> 00:40:52,400
making

1158
00:40:52,400 --> 00:40:54,319
second maintain all of the tools

1159
00:40:54,319 --> 00:40:56,079
packages and libraries that you put in

1160
00:40:56,079 --> 00:40:58,240
images let me tell you anything you put

1161
00:40:58,240 --> 00:41:00,000
in a container image that's your baby

1162
00:41:00,000 --> 00:41:01,520
and you have to take care of it you got

1163
00:41:01,520 --> 00:41:03,359
to feed it change its diaper make sure

1164
00:41:03,359 --> 00:41:06,240
it grows up to a successful adult one

1165
00:41:06,240 --> 00:41:07,599
thing that's actually kind of new in

1166
00:41:07,599 --> 00:41:10,319
terms of maintaining container images is

1167
00:41:10,319 --> 00:41:12,319
this concept of software bills of

1168
00:41:12,319 --> 00:41:15,040
material so about a year ago president

1169
00:41:15,040 --> 00:41:17,599
biden issued a presidential executive

1170
00:41:17,599 --> 00:41:20,400
order that is requiring federal

1171
00:41:20,400 --> 00:41:22,880
government organizations and entities to

1172
00:41:22,880 --> 00:41:25,119
maintain a software bill of materials

1173
00:41:25,119 --> 00:41:27,280
that is basically a listing of all the

1174
00:41:27,280 --> 00:41:30,319
different components and their sources

1175
00:41:30,319 --> 00:41:32,480
that's going into your software package

1176
00:41:32,480 --> 00:41:33,920
this was something that came out of the

1177
00:41:33,920 --> 00:41:35,839
solar winds breach a little more than a

1178
00:41:35,839 --> 00:41:37,040
year ago

1179
00:41:37,040 --> 00:41:38,960
solarwinds perhaps didn't have a

1180
00:41:38,960 --> 00:41:40,720
complete understanding of where they

1181
00:41:40,720 --> 00:41:42,240
were getting their different packages

1182
00:41:42,240 --> 00:41:43,680
that they were compiling into their

1183
00:41:43,680 --> 00:41:46,160
software products and so as a result of

1184
00:41:46,160 --> 00:41:47,520
that it's becoming more and more

1185
00:41:47,520 --> 00:41:49,920
important to focus on software builds of

1186
00:41:49,920 --> 00:41:51,359
material

1187
00:41:51,359 --> 00:41:54,400
there's a tool from anchor called sift

1188
00:41:54,400 --> 00:41:56,079
and another tool that you may have heard

1189
00:41:56,079 --> 00:41:57,920
of called trivi that's made by aqua

1190
00:41:57,920 --> 00:41:59,760
security well commercially supported by

1191
00:41:59,760 --> 00:42:00,880
aqua

1192
00:42:00,880 --> 00:42:02,880
and those tools now have the ability to

1193
00:42:02,880 --> 00:42:05,520
index your container image and basically

1194
00:42:05,520 --> 00:42:07,599
barf out a software bill of materials

1195
00:42:07,599 --> 00:42:09,440
and so that's a really important factor

1196
00:42:09,440 --> 00:42:11,520
you may want to consider especially if

1197
00:42:11,520 --> 00:42:13,040
you're obligated to follow that

1198
00:42:13,040 --> 00:42:16,240
presidential executive order

1199
00:42:16,240 --> 00:42:18,319
third takeaway make sure you carefully

1200
00:42:18,319 --> 00:42:20,319
select a vulnerability scanning tool

1201
00:42:20,319 --> 00:42:22,240
that matches what your organization is

1202
00:42:22,240 --> 00:42:23,599
doing today

1203
00:42:23,599 --> 00:42:24,960
if you are

1204
00:42:24,960 --> 00:42:26,720
specifically focused on open source

1205
00:42:26,720 --> 00:42:28,880
software you may not want to choose a

1206
00:42:28,880 --> 00:42:30,720
commercial product especially if you

1207
00:42:30,720 --> 00:42:33,040
have sort of a tight budget but if

1208
00:42:33,040 --> 00:42:34,960
you've already invested in a commercial

1209
00:42:34,960 --> 00:42:36,880
product for traditional infrastructure

1210
00:42:36,880 --> 00:42:38,960
vulnerability scanning it might make

1211
00:42:38,960 --> 00:42:41,359
sense to use that same company's product

1212
00:42:41,359 --> 00:42:43,760
for container management

1213
00:42:43,760 --> 00:42:45,760
make sure that you're planning to

1214
00:42:45,760 --> 00:42:47,599
implement vulnerability scanning at

1215
00:42:47,599 --> 00:42:49,839
every phase of the software development

1216
00:42:49,839 --> 00:42:52,720
life cycle or the ci cd pipeline all of

1217
00:42:52,720 --> 00:42:54,720
those points along the process

1218
00:42:54,720 --> 00:42:56,160
introduced opportunities for

1219
00:42:56,160 --> 00:42:58,400
vulnerabilities to be attacked and it's

1220
00:42:58,400 --> 00:43:00,960
crucial that you apply as much oversight

1221
00:43:00,960 --> 00:43:03,599
to those points as humanly possible

1222
00:43:03,599 --> 00:43:05,280
and then finally uh consider some

1223
00:43:05,280 --> 00:43:07,040
additional controls i talked a little

1224
00:43:07,040 --> 00:43:09,440
bit about staging registries

1225
00:43:09,440 --> 00:43:11,040
i mentioned kubernetes admission

1226
00:43:11,040 --> 00:43:13,040
controllers we're starting to see more

1227
00:43:13,040 --> 00:43:15,599
and more capabilities added to

1228
00:43:15,599 --> 00:43:17,280
development shops that give them a

1229
00:43:17,280 --> 00:43:19,599
better mechanism for control of their

1230
00:43:19,599 --> 00:43:21,680
containers and for detecting security

1231
00:43:21,680 --> 00:43:24,240
vulnerabilities so keep an eye on this

1232
00:43:24,240 --> 00:43:25,200
space

1233
00:43:25,200 --> 00:43:27,119
make sure you're staying up to date with

1234
00:43:27,119 --> 00:43:30,720
what these tools can bring to your team

1235
00:43:30,800 --> 00:43:32,960
that's all i have for you today friends

1236
00:43:32,960 --> 00:43:35,599
in terms of references as i put this

1237
00:43:35,599 --> 00:43:37,839
presentation together i came across

1238
00:43:37,839 --> 00:43:40,079
across dozens of really great resources

1239
00:43:40,079 --> 00:43:41,040
and so

1240
00:43:41,040 --> 00:43:43,599
i i have published this presentation to

1241
00:43:43,599 --> 00:43:46,800
my github repo and in that same repo you

1242
00:43:46,800 --> 00:43:48,880
will find a bibliography document that

1243
00:43:48,880 --> 00:43:51,119
has like i said dozens of links that'll

1244
00:43:51,119 --> 00:43:53,440
give you a ton more information so if

1245
00:43:53,440 --> 00:43:55,200
you're interested in this topic if you

1246
00:43:55,200 --> 00:43:56,960
want to read more about it definitely

1247
00:43:56,960 --> 00:43:58,880
check out my bibliography to get some

1248
00:43:58,880 --> 00:44:01,599
more information

1249
00:44:01,599 --> 00:44:03,760
thank you so much i i again really

1250
00:44:03,760 --> 00:44:06,000
really am appreciative of the 49th

1251
00:44:06,000 --> 00:44:07,839
security division and the carolinacon

1252
00:44:07,839 --> 00:44:10,480
organizer organizers thanks a ton for

1253
00:44:10,480 --> 00:44:14,920
having me today thank you

