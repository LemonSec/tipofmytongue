1
00:00:11,679 --> 00:00:13,759
thank you carolinacon for having me i'm

2
00:00:13,759 --> 00:00:15,599
super excited to be here

3
00:00:15,599 --> 00:00:18,000
i'm cedric ons and i'll be talking about

4
00:00:18,000 --> 00:00:18,960
practical

5
00:00:18,960 --> 00:00:21,199
infrastructure automation so some tools

6
00:00:21,199 --> 00:00:22,320
techniques you can use

7
00:00:22,320 --> 00:00:26,000
at a practical level for red teams

8
00:00:26,000 --> 00:00:27,279
so a little bit of background

9
00:00:27,279 --> 00:00:30,000
information on myself currently the red

10
00:00:30,000 --> 00:00:32,719
team lead at twilio i've been on the red

11
00:00:32,719 --> 00:00:34,559
team side now for the past

12
00:00:34,559 --> 00:00:37,120
four years and prior to that time i was

13
00:00:37,120 --> 00:00:37,680
actually

14
00:00:37,680 --> 00:00:39,040
on the blue team side doing threat

15
00:00:39,040 --> 00:00:41,840
detection incident response etc

16
00:00:41,840 --> 00:00:44,640
so even on the red team side i do enjoy

17
00:00:44,640 --> 00:00:46,559
working closely with

18
00:00:46,559 --> 00:00:49,039
blue team members and ensuring that we

19
00:00:49,039 --> 00:00:50,640
improve each other's trade crafts and

20
00:00:50,640 --> 00:00:52,239
improve the security

21
00:00:52,239 --> 00:00:54,480
posture of the company going forward i

22
00:00:54,480 --> 00:00:55,920
am a husband and

23
00:00:55,920 --> 00:00:59,359
father to wonderful wife and kids we're

24
00:00:59,359 --> 00:01:01,120
from north carolina but we've been here

25
00:01:01,120 --> 00:01:02,960
in austin for the past three and a half

26
00:01:02,960 --> 00:01:04,479
years

27
00:01:04,479 --> 00:01:06,159
personally when it comes to side

28
00:01:06,159 --> 00:01:07,600
projects i enjoy

29
00:01:07,600 --> 00:01:09,360
mac os post exploitation and

30
00:01:09,360 --> 00:01:11,200
infrastructure automation so

31
00:01:11,200 --> 00:01:13,840
anytime i do have time to work on the

32
00:01:13,840 --> 00:01:15,680
side project

33
00:01:15,680 --> 00:01:18,240
it's usually in one of those two buckets

34
00:01:18,240 --> 00:01:19,360
i also enjoy

35
00:01:19,360 --> 00:01:21,840
80s and 90s nostalgia as you can see

36
00:01:21,840 --> 00:01:23,200
here on the photo

37
00:01:23,200 --> 00:01:25,439
just takes me back to my childhood and

38
00:01:25,439 --> 00:01:26,479
reminds me

39
00:01:26,479 --> 00:01:29,040
a lot of the things the culture of the

40
00:01:29,040 --> 00:01:31,439
80s and 90s that i loved growing up

41
00:01:31,439 --> 00:01:33,840
and the last item which is the most

42
00:01:33,840 --> 00:01:35,759
important thing i'll say for this whole

43
00:01:35,759 --> 00:01:37,680
talk which is north carolina has the

44
00:01:37,680 --> 00:01:38,960
best barbecue

45
00:01:38,960 --> 00:01:40,799
i mean texas has some awesome brisket

46
00:01:40,799 --> 00:01:42,640
but it's about that north carolina

47
00:01:42,640 --> 00:01:43,439
barbecue

48
00:01:43,439 --> 00:01:45,119
and um i know i've probably gotten

49
00:01:45,119 --> 00:01:46,720
myself in trouble here and as soon as my

50
00:01:46,720 --> 00:01:48,799
talk's over i'll probably be escorted

51
00:01:48,799 --> 00:01:50,560
out of the state of texas but

52
00:01:50,560 --> 00:01:54,399
hey you gotta you gotta state the facts

53
00:01:54,399 --> 00:01:56,880
so uh my plan to talk about today is a

54
00:01:56,880 --> 00:01:57,920
brief look at

55
00:01:57,920 --> 00:02:00,079
kind of what red teams deal with in

56
00:02:00,079 --> 00:02:02,479
terms of their responsibilities and

57
00:02:02,479 --> 00:02:04,159
considerations things that they have to

58
00:02:04,159 --> 00:02:06,320
be prepared for and then

59
00:02:06,320 --> 00:02:08,318
why there are opportunities for

60
00:02:08,318 --> 00:02:10,399
automation what those are

61
00:02:10,399 --> 00:02:13,440
examples of automation

62
00:02:13,440 --> 00:02:15,520
and then some lessons learned that i

63
00:02:15,520 --> 00:02:17,280
have experienced in my career

64
00:02:17,280 --> 00:02:20,400
doing um red team automation

65
00:02:20,400 --> 00:02:23,520
so overview of red teams today

66
00:02:23,520 --> 00:02:26,400
uh in a nutshell our plate looks a lot

67
00:02:26,400 --> 00:02:27,599
like what you see here

68
00:02:27,599 --> 00:02:29,599
like it's so much that that's piled on

69
00:02:29,599 --> 00:02:31,680
like examples include

70
00:02:31,680 --> 00:02:33,920
program planning so figuring out how

71
00:02:33,920 --> 00:02:34,959
your red team

72
00:02:34,959 --> 00:02:38,319
function fits into the larger security

73
00:02:38,319 --> 00:02:38,959
team

74
00:02:38,959 --> 00:02:41,280
uh at a company with changing missions

75
00:02:41,280 --> 00:02:43,200
changing objectives

76
00:02:43,200 --> 00:02:45,200
um as fast you know quick growing

77
00:02:45,200 --> 00:02:46,720
companies etc

78
00:02:46,720 --> 00:02:50,000
uh planning effective operations so

79
00:02:50,000 --> 00:02:52,239
thinking in advance about what type of

80
00:02:52,239 --> 00:02:53,840
renting exercises are options you're

81
00:02:53,840 --> 00:02:55,040
going to run

82
00:02:55,040 --> 00:02:57,680
and ensuring that they're as effective

83
00:02:57,680 --> 00:02:59,519
as they can be for identifying

84
00:02:59,519 --> 00:03:01,760
issues systemic issues in the

85
00:03:01,760 --> 00:03:03,680
organization and getting those fixed

86
00:03:03,680 --> 00:03:06,080
as well as helping up level your blue

87
00:03:06,080 --> 00:03:07,200
team

88
00:03:07,200 --> 00:03:09,840
uh research mainly because the field of

89
00:03:09,840 --> 00:03:12,239
security is constantly changing so

90
00:03:12,239 --> 00:03:14,319
making sure that we as a red team are

91
00:03:14,319 --> 00:03:16,959
aware of the threat landscape and that

92
00:03:16,959 --> 00:03:18,800
we're taking that into account as we

93
00:03:18,800 --> 00:03:20,400
plan our operations

94
00:03:20,400 --> 00:03:22,560
uh tool development customization just

95
00:03:22,560 --> 00:03:24,319
because for our environments

96
00:03:24,319 --> 00:03:26,879
right um a lot of times we need custom

97
00:03:26,879 --> 00:03:28,720
things or stuff that's on github may not

98
00:03:28,720 --> 00:03:30,560
apply or might need some tweaking

99
00:03:30,560 --> 00:03:33,680
so we have to allocate cycles for that

100
00:03:33,680 --> 00:03:35,760
infrastructure management just because

101
00:03:35,760 --> 00:03:37,519
every exercise

102
00:03:37,519 --> 00:03:39,840
um just about every exercise our

103
00:03:39,840 --> 00:03:41,680
operation that we run from a red team

104
00:03:41,680 --> 00:03:42,879
perspective we're going to need some

105
00:03:42,879 --> 00:03:45,200
form of infrastructure for things like

106
00:03:45,200 --> 00:03:46,879
phishing or command and control et

107
00:03:46,879 --> 00:03:49,440
cetera the ability to actually

108
00:03:49,440 --> 00:03:51,920
execute the operations so understanding

109
00:03:51,920 --> 00:03:53,360
your environment well enough to know

110
00:03:53,360 --> 00:03:55,120
that what techniques

111
00:03:55,120 --> 00:03:56,640
would actually work to allow you to

112
00:03:56,640 --> 00:03:58,799
pivot and privilege escalate and meet

113
00:03:58,799 --> 00:03:59,120
your

114
00:03:59,120 --> 00:04:01,920
your mission objectives of course then

115
00:04:01,920 --> 00:04:02,720
being able to

116
00:04:02,720 --> 00:04:04,000
communicate the things that you're

117
00:04:04,000 --> 00:04:06,239
seeing and finding on your operations

118
00:04:06,239 --> 00:04:08,080
with executives in a way that resonates

119
00:04:08,080 --> 00:04:09,280
with them and states

120
00:04:09,280 --> 00:04:11,040
what the risk is to the business and why

121
00:04:11,040 --> 00:04:12,319
they should care

122
00:04:12,319 --> 00:04:15,599
and of course blue team collaboration so

123
00:04:15,599 --> 00:04:17,519
being able to work effectively with blue

124
00:04:17,519 --> 00:04:18,639
in order to

125
00:04:18,639 --> 00:04:20,720
validate their procedures and tooling

126
00:04:20,720 --> 00:04:22,880
and also help uplift it

127
00:04:22,880 --> 00:04:24,560
and this is just a small slice of the

128
00:04:24,560 --> 00:04:26,240
pie right there's other aspects that i

129
00:04:26,240 --> 00:04:27,680
didn't even include on the slide

130
00:04:27,680 --> 00:04:30,800
so again there's just so much that is on

131
00:04:30,800 --> 00:04:32,400
the red team plate

132
00:04:32,400 --> 00:04:34,320
um for corporate internal corporate red

133
00:04:34,320 --> 00:04:35,520
teams today so

134
00:04:35,520 --> 00:04:37,759
uh time management in my opinion is

135
00:04:37,759 --> 00:04:39,680
essential if you want to be effectively

136
00:04:39,680 --> 00:04:43,120
red team and so adding

137
00:04:43,120 --> 00:04:45,759
to that internal corporate teams are

138
00:04:45,759 --> 00:04:47,919
often one of the smaller teams within

139
00:04:47,919 --> 00:04:49,919
security within the larger security

140
00:04:49,919 --> 00:04:51,440
organization

141
00:04:51,440 --> 00:04:53,759
and so you look at a large plate you

142
00:04:53,759 --> 00:04:56,479
look at being small in size

143
00:04:56,479 --> 00:04:58,639
and there's always more work to do than

144
00:04:58,639 --> 00:05:00,479
you have available cycles right there's

145
00:05:00,479 --> 00:05:02,240
always some

146
00:05:02,240 --> 00:05:04,880
part of your environment or some process

147
00:05:04,880 --> 00:05:07,199
that needs to be tested

148
00:05:07,199 --> 00:05:08,639
so there's always more work to do when

149
00:05:08,639 --> 00:05:11,199
you have available cycles so again

150
00:05:11,199 --> 00:05:13,759
in my mind maximizing time becomes your

151
00:05:13,759 --> 00:05:14,560
key

152
00:05:14,560 --> 00:05:16,160
in order to make sure you're spending

153
00:05:16,160 --> 00:05:17,680
your time effectively and

154
00:05:17,680 --> 00:05:19,520
in my opinion that's where automation

155
00:05:19,520 --> 00:05:21,759
comes in because you can take some of

156
00:05:21,759 --> 00:05:22,240
your

157
00:05:22,240 --> 00:05:23,919
tasks that are repetitive and

158
00:05:23,919 --> 00:05:25,759
predictable that you know you will need

159
00:05:25,759 --> 00:05:27,440
or you'll need in a certain manner

160
00:05:27,440 --> 00:05:29,759
you can take those and automate them so

161
00:05:29,759 --> 00:05:31,039
you don't have to do those things

162
00:05:31,039 --> 00:05:33,440
manually

163
00:05:33,440 --> 00:05:36,080
and so next we're going to look at some

164
00:05:36,080 --> 00:05:36,960
examples of

165
00:05:36,960 --> 00:05:40,000
automation um i picked infrastructure

166
00:05:40,000 --> 00:05:41,120
because in my mind

167
00:05:41,120 --> 00:05:44,800
infrastructure is one of those areas

168
00:05:44,800 --> 00:05:47,039
or roles or things that you're going to

169
00:05:47,039 --> 00:05:49,039
have to take care of on a red team that

170
00:05:49,039 --> 00:05:49,360
is

171
00:05:49,360 --> 00:05:52,720
relatively predictable and

172
00:05:52,720 --> 00:05:54,880
since it's predictable and it's needed

173
00:05:54,880 --> 00:05:56,880
so often in my mind it becomes a great

174
00:05:56,880 --> 00:05:58,240
candidate for it for

175
00:05:58,240 --> 00:06:01,600
automation so some of the core needs

176
00:06:01,600 --> 00:06:03,919
for infrastructure for red teams include

177
00:06:03,919 --> 00:06:05,199
that it'd be secure

178
00:06:05,199 --> 00:06:06,880
because again like that's one of the

179
00:06:06,880 --> 00:06:08,800
worst things you'll want is

180
00:06:08,800 --> 00:06:10,319
that you're running an assessment for

181
00:06:10,319 --> 00:06:11,840
your company you have your

182
00:06:11,840 --> 00:06:13,199
infrastructure up and it's

183
00:06:13,199 --> 00:06:15,360
insecure somebody compromises your red

184
00:06:15,360 --> 00:06:16,560
team infrastructure

185
00:06:16,560 --> 00:06:18,080
and now you've put your whole company at

186
00:06:18,080 --> 00:06:20,080
risk right so that would be a terrible

187
00:06:20,080 --> 00:06:22,960
outcome so it's got to be secure um has

188
00:06:22,960 --> 00:06:24,000
to be realistic

189
00:06:24,000 --> 00:06:27,520
so that when blue team is um

190
00:06:27,520 --> 00:06:29,680
is basically basically when they detect

191
00:06:29,680 --> 00:06:31,039
your infrastructure

192
00:06:31,039 --> 00:06:32,639
and they start their analysis it needs

193
00:06:32,639 --> 00:06:34,240
to look as much as possible

194
00:06:34,240 --> 00:06:36,400
like a realistic adversary so that blue

195
00:06:36,400 --> 00:06:38,720
team will be able to invoke their

196
00:06:38,720 --> 00:06:41,840
incident response procedures

197
00:06:41,840 --> 00:06:43,759
and go down that path it needs to be

198
00:06:43,759 --> 00:06:45,919
scalable so that you can

199
00:06:45,919 --> 00:06:48,080
pretty easily grow your infrastructure

200
00:06:48,080 --> 00:06:49,919
as you you know depending on your needs

201
00:06:49,919 --> 00:06:50,560
for the

202
00:06:50,560 --> 00:06:52,800
specific red team operation and it also

203
00:06:52,800 --> 00:06:54,560
needs to be flexible

204
00:06:54,560 --> 00:06:57,120
so that uh once your domain gets burned

205
00:06:57,120 --> 00:06:59,680
or other aspects of your infrastructure

206
00:06:59,680 --> 00:07:02,000
by blue team you can make the necessary

207
00:07:02,000 --> 00:07:03,199
changes and keep your

208
00:07:03,199 --> 00:07:05,039
operation going forward without being

209
00:07:05,039 --> 00:07:08,080
down for hours or days etcetera

210
00:07:08,080 --> 00:07:10,479
um of course infrastructure is needed

211
00:07:10,479 --> 00:07:11,840
for various reasons

212
00:07:11,840 --> 00:07:14,000
when it comes to ranting exercises like

213
00:07:14,000 --> 00:07:15,039
you gonna need

214
00:07:15,039 --> 00:07:18,000
phishing servers command control servers

215
00:07:18,000 --> 00:07:18,479
um

216
00:07:18,479 --> 00:07:20,000
that you're gonna use to control hosts

217
00:07:20,000 --> 00:07:22,880
you get access to uh data exfiltration

218
00:07:22,880 --> 00:07:24,880
so you may have servers that you stage

219
00:07:24,880 --> 00:07:26,880
just for that purpose when you

220
00:07:26,880 --> 00:07:29,199
exfiltrate files to

221
00:07:29,199 --> 00:07:33,039
file hosting services or servers so that

222
00:07:33,039 --> 00:07:35,120
as you gain access to files on the

223
00:07:35,120 --> 00:07:37,120
environment you send them there

224
00:07:37,120 --> 00:07:39,919
of course redirectors to protect your

225
00:07:39,919 --> 00:07:41,680
command control servers

226
00:07:41,680 --> 00:07:43,919
so when you look at all these aspects

227
00:07:43,919 --> 00:07:44,800
again i think

228
00:07:44,800 --> 00:07:46,800
infrastructure becomes a very good

229
00:07:46,800 --> 00:07:47,840
candidate for

230
00:07:47,840 --> 00:07:51,280
for red team automation so

231
00:07:51,280 --> 00:07:53,199
here's an example from a fishing

232
00:07:53,199 --> 00:07:54,639
perspective

233
00:07:54,639 --> 00:07:57,919
of a common use case for phishing

234
00:07:57,919 --> 00:07:59,120
infrastructure

235
00:07:59,120 --> 00:08:02,319
so to start usually the phishing server

236
00:08:02,319 --> 00:08:04,400
some type of linux based server will be

237
00:08:04,400 --> 00:08:05,919
stood up in the cloud

238
00:08:05,919 --> 00:08:08,720
and once that server stood up usually go

239
00:08:08,720 --> 00:08:10,879
fish is often used as the phishing

240
00:08:10,879 --> 00:08:12,319
software um

241
00:08:12,319 --> 00:08:15,039
that to go on that server and inside of

242
00:08:15,039 --> 00:08:17,520
go fish you'll build your email template

243
00:08:17,520 --> 00:08:19,199
you'll build your target list of who you

244
00:08:19,199 --> 00:08:21,120
want the fish to go to

245
00:08:21,120 --> 00:08:24,080
uh you even add a sending template or

246
00:08:24,080 --> 00:08:25,360
sending profile

247
00:08:25,360 --> 00:08:27,039
where you provide credentials to

248
00:08:27,039 --> 00:08:28,400
whatever email

249
00:08:28,400 --> 00:08:30,319
account and provider that you want go

250
00:08:30,319 --> 00:08:31,599
fish to log into

251
00:08:31,599 --> 00:08:33,519
in order to send your phishing emails to

252
00:08:33,519 --> 00:08:35,839
the targets that you provided

253
00:08:35,839 --> 00:08:37,519
so all that's set up right there in a

254
00:08:37,519 --> 00:08:39,760
phishing server in a cloud provider like

255
00:08:39,760 --> 00:08:41,519
digitalocean or aws

256
00:08:41,519 --> 00:08:45,200
etc on the phishing server itself

257
00:08:45,200 --> 00:08:48,800
usually the web ports you'll have expose

258
00:08:48,800 --> 00:08:53,120
usually 80 or 443 so that you can do

259
00:08:53,120 --> 00:08:55,120
or if you care about this during the app

260
00:08:55,120 --> 00:08:56,480
you can allow

261
00:08:56,480 --> 00:08:59,839
um pixel trackers to use the web ports

262
00:08:59,839 --> 00:09:02,000
so that when people open the emails you

263
00:09:02,000 --> 00:09:03,200
sent you can track

264
00:09:03,200 --> 00:09:05,120
the whole progression of like viewing

265
00:09:05,120 --> 00:09:07,440
email to clicking the link to

266
00:09:07,440 --> 00:09:10,959
compromise etc so those so usually the

267
00:09:10,959 --> 00:09:12,000
web port is

268
00:09:12,000 --> 00:09:14,480
exposed publicly for that reason and

269
00:09:14,480 --> 00:09:16,800
then when it comes to admin access so

270
00:09:16,800 --> 00:09:20,320
port 22 access to the server or admin

271
00:09:20,320 --> 00:09:22,800
port access to go fish since go fish has

272
00:09:22,800 --> 00:09:23,360
its own

273
00:09:23,360 --> 00:09:26,240
admin port with a gui that you can use

274
00:09:26,240 --> 00:09:27,760
to log in

275
00:09:27,760 --> 00:09:30,560
usually those ports any admin ports are

276
00:09:30,560 --> 00:09:32,720
going to be restricted to red team ip

277
00:09:32,720 --> 00:09:33,680
operator space

278
00:09:33,680 --> 00:09:37,519
so that they're not publicly exposed and

279
00:09:37,519 --> 00:09:40,000
as a way to protect your phishing server

280
00:09:40,000 --> 00:09:42,080
so this is a high level typically of

281
00:09:42,080 --> 00:09:44,800
how fishing is done at a very generic

282
00:09:44,800 --> 00:09:45,200
level

283
00:09:45,200 --> 00:09:48,720
across different red team ops

284
00:09:48,720 --> 00:09:51,760
another look here for kind of a similar

285
00:09:51,760 --> 00:09:54,800
view but for redirectors so uh

286
00:09:54,800 --> 00:09:56,959
typically the way we use redirectors on

287
00:09:56,959 --> 00:09:58,560
our red team apps is we'll have our

288
00:09:58,560 --> 00:09:59,200
backend

289
00:09:59,200 --> 00:10:01,360
command control server this is the

290
00:10:01,360 --> 00:10:03,360
server that we're using to

291
00:10:03,360 --> 00:10:05,760
uh once we gain access in an environment

292
00:10:05,760 --> 00:10:07,360
you know to control those hosts so it

293
00:10:07,360 --> 00:10:09,920
can be anything from cobalt strike to

294
00:10:09,920 --> 00:10:13,600
mythic to a myriad of other c2 servers

295
00:10:13,600 --> 00:10:15,279
or c2 frameworks

296
00:10:15,279 --> 00:10:17,600
and essentially our backend c2 server

297
00:10:17,600 --> 00:10:19,680
we're protecting it so that

298
00:10:19,680 --> 00:10:22,959
remote access into the c2 server via ssh

299
00:10:22,959 --> 00:10:24,399
that's only

300
00:10:24,399 --> 00:10:27,440
restricted to red team operator ip space

301
00:10:27,440 --> 00:10:31,600
and the access to the ports whatever

302
00:10:31,600 --> 00:10:32,800
services you're using

303
00:10:32,800 --> 00:10:34,959
for your payloads for your c2 payloads

304
00:10:34,959 --> 00:10:36,800
so in this case let's say if your c2

305
00:10:36,800 --> 00:10:38,399
payloads are using

306
00:10:38,399 --> 00:10:42,079
ssl so any in this case any access to

307
00:10:42,079 --> 00:10:45,600
ssl on the backend c2 server is only

308
00:10:45,600 --> 00:10:46,480
allowed through

309
00:10:46,480 --> 00:10:49,200
a redirector so what that does is it

310
00:10:49,200 --> 00:10:51,600
protects your c2 server so that

311
00:10:51,600 --> 00:10:53,839
the web ports and admin ports are not

312
00:10:53,839 --> 00:10:55,440
even reachable publicly

313
00:10:55,440 --> 00:10:58,560
and so what happens the general flow

314
00:10:58,560 --> 00:11:00,800
here is you have your your redirector

315
00:11:00,800 --> 00:11:02,560
publicly exposed

316
00:11:02,560 --> 00:11:04,800
and as requests from the internet come

317
00:11:04,800 --> 00:11:05,600
into your

318
00:11:05,600 --> 00:11:07,839
redirector in this case i'm using apache

319
00:11:07,839 --> 00:11:08,959
mod rewrite as

320
00:11:08,959 --> 00:11:11,760
the redirector itself and as web

321
00:11:11,760 --> 00:11:12,480
requests come

322
00:11:12,480 --> 00:11:15,360
in then mod rewrite has conditions what

323
00:11:15,360 --> 00:11:16,959
they call rewrite conditions

324
00:11:16,959 --> 00:11:20,320
and it checks every request the header

325
00:11:20,320 --> 00:11:22,560
values of those requests and then it

326
00:11:22,560 --> 00:11:24,480
makes decisions based on the rewrite

327
00:11:24,480 --> 00:11:26,720
conditions so in this case

328
00:11:26,720 --> 00:11:28,320
as requests from the internet come into

329
00:11:28,320 --> 00:11:31,600
your redirector if those requests

330
00:11:31,600 --> 00:11:34,320
match whatever conditions you set that

331
00:11:34,320 --> 00:11:34,880
your

332
00:11:34,880 --> 00:11:37,440
c2 payload has so if your c2 payload has

333
00:11:37,440 --> 00:11:39,600
a unique user agent string

334
00:11:39,600 --> 00:11:42,880
or has a token or something unique to it

335
00:11:42,880 --> 00:11:45,120
then it checks those requests and if it

336
00:11:45,120 --> 00:11:47,040
finds those unique values

337
00:11:47,040 --> 00:11:49,519
only then will the redirector allow the

338
00:11:49,519 --> 00:11:51,519
traffic to the backend c2 server

339
00:11:51,519 --> 00:11:52,639
where it essentially will be a

340
00:11:52,639 --> 00:11:54,959
transparent proxy

341
00:11:54,959 --> 00:11:57,600
but if those if the traffic does not

342
00:11:57,600 --> 00:12:00,320
meet those rewrite conditions then a 404

343
00:12:00,320 --> 00:12:03,200
not found is returned so essentially

344
00:12:03,200 --> 00:12:05,440
like scanners or blue teams poking

345
00:12:05,440 --> 00:12:07,120
around or someone in general is poking

346
00:12:07,120 --> 00:12:10,160
around they're going to get 404s

347
00:12:10,160 --> 00:12:12,079
for your server unless they're using the

348
00:12:12,079 --> 00:12:14,320
exact strings that your payload is using

349
00:12:14,320 --> 00:12:15,839
so in this case it's important that your

350
00:12:15,839 --> 00:12:16,480
payload

351
00:12:16,480 --> 00:12:20,240
have very unique at least one unique

352
00:12:20,240 --> 00:12:22,800
header value preferably more than one

353
00:12:22,800 --> 00:12:23,279
and you

354
00:12:23,279 --> 00:12:25,760
in this example you put your domains on

355
00:12:25,760 --> 00:12:26,720
the redirector

356
00:12:26,720 --> 00:12:28,959
so again if domains are burned you just

357
00:12:28,959 --> 00:12:30,720
spin up a new redirector

358
00:12:30,720 --> 00:12:32,720
uh point it to the c2 server you're back

359
00:12:32,720 --> 00:12:34,320
up and running versus

360
00:12:34,320 --> 00:12:36,160
putting your domains on the c2 server

361
00:12:36,160 --> 00:12:37,360
when it gets burned you've got to

362
00:12:37,360 --> 00:12:40,880
rebuild everything all over again

363
00:12:41,680 --> 00:12:43,440
so here's another view of what i

364
00:12:43,440 --> 00:12:45,440
mentioned before how you're back in c2

365
00:12:45,440 --> 00:12:46,240
server only

366
00:12:46,240 --> 00:12:49,360
red team operator ipspace has ssh

367
00:12:49,360 --> 00:12:52,399
access and only the redirector

368
00:12:52,399 --> 00:12:55,600
has access to whatever c2 ports you're

369
00:12:55,600 --> 00:12:57,360
using on a backend server

370
00:12:57,360 --> 00:13:00,720
so again uh red team operator ipspace is

371
00:13:00,720 --> 00:13:02,000
able to ssh

372
00:13:02,000 --> 00:13:05,120
in to the redirector but the redirector

373
00:13:05,120 --> 00:13:06,079
itself

374
00:13:06,079 --> 00:13:08,560
is publicly exposed when it comes to web

375
00:13:08,560 --> 00:13:09,440
ports

376
00:13:09,440 --> 00:13:11,920
and it's it's by that way it's basically

377
00:13:11,920 --> 00:13:13,760
that way by design so that as requests

378
00:13:13,760 --> 00:13:15,440
come in it can check the headers

379
00:13:15,440 --> 00:13:18,240
filter either 404 if rewrite conditions

380
00:13:18,240 --> 00:13:19,200
are not met

381
00:13:19,200 --> 00:13:21,519
or be a transparent proxy to the backend

382
00:13:21,519 --> 00:13:22,399
c2 server

383
00:13:22,399 --> 00:13:24,959
if like the conditions are met or in

384
00:13:24,959 --> 00:13:27,200
other words if it looks like the payload

385
00:13:27,200 --> 00:13:30,480
is the one making the request

386
00:13:30,560 --> 00:13:33,440
so next let's jump into some automation

387
00:13:33,440 --> 00:13:35,200
examples now we've sort of talked

388
00:13:35,200 --> 00:13:37,200
conceptually about how

389
00:13:37,200 --> 00:13:39,120
a few different scenarios for red team

390
00:13:39,120 --> 00:13:40,639
ops work

391
00:13:40,639 --> 00:13:41,839
i will say there are different

392
00:13:41,839 --> 00:13:43,760
approaches and tools so you do not have

393
00:13:43,760 --> 00:13:44,480
to use

394
00:13:44,480 --> 00:13:46,399
the the tools or approaches that i

395
00:13:46,399 --> 00:13:48,399
mentioned mentioning here

396
00:13:48,399 --> 00:13:50,480
these are just things that i'd like

397
00:13:50,480 --> 00:13:52,240
basically things that i have used and

398
00:13:52,240 --> 00:13:54,240
that i've found to be very useful

399
00:13:54,240 --> 00:13:56,720
personally but it doesn't really matter

400
00:13:56,720 --> 00:13:58,240
as long as you pick something that works

401
00:13:58,240 --> 00:13:59,040
for you

402
00:13:59,040 --> 00:14:01,760
and so i just wanted to call that out so

403
00:14:01,760 --> 00:14:03,920
an approach that i like i like using

404
00:14:03,920 --> 00:14:05,600
shell scripts for the purpose of

405
00:14:05,600 --> 00:14:07,920
capturing configuration info from the

406
00:14:07,920 --> 00:14:09,040
operator

407
00:14:09,040 --> 00:14:10,639
and then the shell script takes

408
00:14:10,639 --> 00:14:12,079
basically takes that data

409
00:14:12,079 --> 00:14:14,160
and form of variables it does variable

410
00:14:14,160 --> 00:14:16,320
replacements in your terraform scripts

411
00:14:16,320 --> 00:14:18,639
and then it actually launches terraform

412
00:14:18,639 --> 00:14:20,480
and of course terraform will then spin

413
00:14:20,480 --> 00:14:22,079
up your infrastructure in the cloud

414
00:14:22,079 --> 00:14:22,720
provider

415
00:14:22,720 --> 00:14:26,160
that um basically whatever cloud

416
00:14:26,160 --> 00:14:27,040
provider you've

417
00:14:27,040 --> 00:14:30,240
configured and so the nice thing about

418
00:14:30,240 --> 00:14:32,160
this approach is you can use this across

419
00:14:32,160 --> 00:14:35,040
various cloud providers like lenode

420
00:14:35,040 --> 00:14:36,000
digitalocean

421
00:14:36,000 --> 00:14:39,040
aws etc essentially

422
00:14:39,040 --> 00:14:40,480
all it requires is that your cloud

423
00:14:40,480 --> 00:14:42,399
provider have an api

424
00:14:42,399 --> 00:14:46,560
and that terraform have a method

425
00:14:46,560 --> 00:14:48,880
of reaching that like a library of

426
00:14:48,880 --> 00:14:50,800
reaching those apis and pretty

427
00:14:50,800 --> 00:14:52,320
entire form can pretty much talk to any

428
00:14:52,320 --> 00:14:54,240
cloud provider so that's

429
00:14:54,240 --> 00:14:57,760
usually pretty flexible in that regard

430
00:14:57,760 --> 00:14:59,199
so let's take a look going back to the

431
00:14:59,199 --> 00:15:01,040
phishing server example

432
00:15:01,040 --> 00:15:03,360
um so again i'm mentioning that in this

433
00:15:03,360 --> 00:15:05,440
example that digital ocean is used

434
00:15:05,440 --> 00:15:08,000
and go fish is being used as the fishing

435
00:15:08,000 --> 00:15:09,920
server itself

436
00:15:09,920 --> 00:15:12,399
so within digital uh first what you'll

437
00:15:12,399 --> 00:15:14,560
need to do is set up an api key

438
00:15:14,560 --> 00:15:17,040
in the admin panel and you'll also need

439
00:15:17,040 --> 00:15:18,480
to load a

440
00:15:18,480 --> 00:15:20,720
ssh key so essentially you'll generate

441
00:15:20,720 --> 00:15:22,079
an ssh key pair

442
00:15:22,079 --> 00:15:24,480
locally and then you'll load the public

443
00:15:24,480 --> 00:15:25,120
key of that

444
00:15:25,120 --> 00:15:28,560
into your digital ocean admin panel

445
00:15:28,560 --> 00:15:30,639
um so those will be the two pre to uh

446
00:15:30,639 --> 00:15:32,880
prereqs and then

447
00:15:32,880 --> 00:15:35,120
the shell script again once run will

448
00:15:35,120 --> 00:15:37,440
gather configuration information

449
00:15:37,440 --> 00:15:39,839
based on questions that it answers and

450
00:15:39,839 --> 00:15:42,240
the operator provides answers to that

451
00:15:42,240 --> 00:15:44,639
and shell script takes those those

452
00:15:44,639 --> 00:15:45,440
answers

453
00:15:45,440 --> 00:15:47,199
uh does variable replacements and

454
00:15:47,199 --> 00:15:49,040
terraform files

455
00:15:49,040 --> 00:15:51,440
runs terraform and the terraform spins

456
00:15:51,440 --> 00:15:52,959
up the goldfish

457
00:15:52,959 --> 00:15:55,920
server for you so let's look at an

458
00:15:55,920 --> 00:15:56,800
example of

459
00:15:56,800 --> 00:15:59,680
the shell script itself so first section

460
00:15:59,680 --> 00:16:00,720
in red

461
00:16:00,720 --> 00:16:04,079
is ensuring that terraform is installed

462
00:16:04,079 --> 00:16:04,800
and if not

463
00:16:04,800 --> 00:16:07,279
it will install it for you in this case

464
00:16:07,279 --> 00:16:08,959
is just doing two checks it's looking

465
00:16:08,959 --> 00:16:10,560
for either linux or mac os

466
00:16:10,560 --> 00:16:12,639
and if it's one of those two operating

467
00:16:12,639 --> 00:16:14,240
systems it will

468
00:16:14,240 --> 00:16:17,759
ensure that terraform is installed

469
00:16:17,759 --> 00:16:21,199
i will note that for mac os

470
00:16:21,199 --> 00:16:23,920
the mac os install the only prereq there

471
00:16:23,920 --> 00:16:24,959
is that you have

472
00:16:24,959 --> 00:16:28,079
brew home brew installed on your mac uh

473
00:16:28,079 --> 00:16:30,160
second section for configuration

474
00:16:30,160 --> 00:16:31,600
information

475
00:16:31,600 --> 00:16:33,839
this is where i mentioned the operator

476
00:16:33,839 --> 00:16:34,959
puts values

477
00:16:34,959 --> 00:16:38,560
in to configure the infrastructure that

478
00:16:38,560 --> 00:16:40,000
you're standing up so we can walk

479
00:16:40,000 --> 00:16:41,120
through the different

480
00:16:41,120 --> 00:16:43,839
configuration values here one being the

481
00:16:43,839 --> 00:16:44,320
name

482
00:16:44,320 --> 00:16:45,680
of your droplet so when you're in

483
00:16:45,680 --> 00:16:47,759
digitalocean what what name do you want

484
00:16:47,759 --> 00:16:50,240
your dropper to be called

485
00:16:50,240 --> 00:16:52,480
uh let's see uh the name that you want

486
00:16:52,480 --> 00:16:54,000
to call your firewall role so in this

487
00:16:54,000 --> 00:16:55,920
case you're using the digital ocean

488
00:16:55,920 --> 00:16:58,800
cloud firewall you could also use like a

489
00:16:58,800 --> 00:17:00,240
host-based firewall like

490
00:17:00,240 --> 00:17:02,720
ufw or ip tables but in this example

491
00:17:02,720 --> 00:17:04,160
we're going to use the digital ocean

492
00:17:04,160 --> 00:17:05,520
cloud firewall so you're going to give a

493
00:17:05,520 --> 00:17:07,039
name to that of what you'll see

494
00:17:07,039 --> 00:17:09,679
in your digital ocean admin panel uh the

495
00:17:09,679 --> 00:17:12,000
source ip that you log into your c2

496
00:17:12,000 --> 00:17:13,439
infrastructure from

497
00:17:13,439 --> 00:17:14,880
so in this case since this is

498
00:17:14,880 --> 00:17:16,559
specifically for phishing server this

499
00:17:16,559 --> 00:17:18,480
will be for ssh access

500
00:17:18,480 --> 00:17:20,959
and for the admin port access for go

501
00:17:20,959 --> 00:17:21,599
fish

502
00:17:21,599 --> 00:17:24,720
you're restricting those only to the red

503
00:17:24,720 --> 00:17:27,039
team operator ip space that's provided

504
00:17:27,039 --> 00:17:28,880
here so it can be an ip or

505
00:17:28,880 --> 00:17:32,000
or ip range next you'll enter your

506
00:17:32,000 --> 00:17:34,400
digital ocean api key which will be used

507
00:17:34,400 --> 00:17:35,520
by terraform

508
00:17:35,520 --> 00:17:37,919
in order to access digitalocean on your

509
00:17:37,919 --> 00:17:38,960
behalf

510
00:17:38,960 --> 00:17:41,200
and then you'll enter the name of the

511
00:17:41,200 --> 00:17:42,640
digitalocean ssh

512
00:17:42,640 --> 00:17:44,640
key so that's the key you've already

513
00:17:44,640 --> 00:17:46,880
loaded into your admin panel

514
00:17:46,880 --> 00:17:49,840
and you also add the path to the private

515
00:17:49,840 --> 00:17:50,559
key that

516
00:17:50,559 --> 00:17:53,039
pairs with that public key so again it's

517
00:17:53,039 --> 00:17:54,400
gathering all the

518
00:17:54,400 --> 00:17:56,640
configuration information here then

519
00:17:56,640 --> 00:17:57,520
you're going to

520
00:17:57,520 --> 00:17:59,600
to the next section you're going to do

521
00:17:59,600 --> 00:18:01,600
variable replacements so now that you've

522
00:18:01,600 --> 00:18:03,120
gathered this information

523
00:18:03,120 --> 00:18:04,799
you're going to do variable replacements

524
00:18:04,799 --> 00:18:06,160
in the terraform scripts

525
00:18:06,160 --> 00:18:08,160
so things like you're going to take the

526
00:18:08,160 --> 00:18:09,840
droplet name and put that in there and a

527
00:18:09,840 --> 00:18:11,520
firewall name

528
00:18:11,520 --> 00:18:14,480
the name of your public key your admin

529
00:18:14,480 --> 00:18:15,919
ip your

530
00:18:15,919 --> 00:18:18,880
admin ip range all that information

531
00:18:18,880 --> 00:18:20,720
you're doing variable replacements now

532
00:18:20,720 --> 00:18:21,840
so that

533
00:18:21,840 --> 00:18:23,600
the configurations are specific to what

534
00:18:23,600 --> 00:18:25,360
you put in in terraform

535
00:18:25,360 --> 00:18:27,280
uh next section you're actually running

536
00:18:27,280 --> 00:18:28,799
terraform so you're doing

537
00:18:28,799 --> 00:18:31,919
an init a plan and then apply

538
00:18:31,919 --> 00:18:34,240
and once you hit yes it will spawn

539
00:18:34,240 --> 00:18:35,280
basically spawn off

540
00:18:35,280 --> 00:18:38,000
and terraform runs basically is off to

541
00:18:38,000 --> 00:18:39,280
the races and it's spinning up your

542
00:18:39,280 --> 00:18:40,400
infrastructure

543
00:18:40,400 --> 00:18:42,240
and then at the end you're doing an

544
00:18:42,240 --> 00:18:44,080
initialization where

545
00:18:44,080 --> 00:18:47,039
you're ensuring that the files the

546
00:18:47,039 --> 00:18:49,520
template files are back to the original

547
00:18:49,520 --> 00:18:51,840
uh template format because again we did

548
00:18:51,840 --> 00:18:53,840
variable replacements earlier so

549
00:18:53,840 --> 00:18:56,160
we're just cleaning things up at the end

550
00:18:56,160 --> 00:18:59,760
so that you're ready for your next run

551
00:18:59,760 --> 00:19:01,280
so now that we looked at the shell

552
00:19:01,280 --> 00:19:02,799
script for fishing

553
00:19:02,799 --> 00:19:04,720
now let's look at the terraform script

554
00:19:04,720 --> 00:19:05,840
for fishing

555
00:19:05,840 --> 00:19:07,280
so at the top you've just got your

556
00:19:07,280 --> 00:19:09,039
droplet information such as

557
00:19:09,039 --> 00:19:11,520
uh what operating system inversion like

558
00:19:11,520 --> 00:19:13,760
in this case ubuntu 20

559
00:19:13,760 --> 00:19:16,960
the name myc2-1 that's a placeholder in

560
00:19:16,960 --> 00:19:18,720
my script where i just replace that with

561
00:19:18,720 --> 00:19:19,200
whatever

562
00:19:19,200 --> 00:19:23,200
the operator wants to name it region etc

563
00:19:23,200 --> 00:19:25,440
next section is setting up for your

564
00:19:25,440 --> 00:19:26,720
droplets so

565
00:19:26,720 --> 00:19:29,600
what uh account that terraform will use

566
00:19:29,600 --> 00:19:30,000
to

567
00:19:30,000 --> 00:19:33,360
log into your droplet um and next

568
00:19:33,360 --> 00:19:33,840
section

569
00:19:33,840 --> 00:19:35,679
is commands that we're gonna run so

570
00:19:35,679 --> 00:19:37,440
these are the remote exec

571
00:19:37,440 --> 00:19:39,200
provisioners and these are inline

572
00:19:39,200 --> 00:19:41,280
commands that once the host is stood up

573
00:19:41,280 --> 00:19:42,960
in this case once our our phishing

574
00:19:42,960 --> 00:19:44,720
server stood up these are the commands

575
00:19:44,720 --> 00:19:46,559
that terraform is going to run

576
00:19:46,559 --> 00:19:49,039
it's going to do an uh apt-get update

577
00:19:49,039 --> 00:19:52,640
it's going to pull curl docker um

578
00:19:52,640 --> 00:19:54,240
it's also going to pull docker comp

579
00:19:54,240 --> 00:19:55,840
docker compose down

580
00:19:55,840 --> 00:19:57,520
it's going to set the executable flag

581
00:19:57,520 --> 00:19:59,919
for that it's going to install git

582
00:19:59,919 --> 00:20:02,480
and it's going to also install go link

583
00:20:02,480 --> 00:20:04,320
and after doing that it's going to pull

584
00:20:04,320 --> 00:20:04,720
down

585
00:20:04,720 --> 00:20:07,200
go fish which is written and go and it's

586
00:20:07,200 --> 00:20:09,039
going to build it so essentially

587
00:20:09,039 --> 00:20:11,679
it does all that for you and once the

588
00:20:11,679 --> 00:20:12,400
server is up

589
00:20:12,400 --> 00:20:16,960
all the operator has to do is ssh in

590
00:20:16,960 --> 00:20:19,200
cd to the directory and then dot slash

591
00:20:19,200 --> 00:20:21,039
go fish so go fish is

592
00:20:21,039 --> 00:20:24,400
basically ready to be executed um

593
00:20:24,400 --> 00:20:27,280
next section is the firewall config and

594
00:20:27,280 --> 00:20:28,320
this is where

595
00:20:28,320 --> 00:20:30,159
i mentioned earlier you're gonna use the

596
00:20:30,159 --> 00:20:32,480
digital ocean cloud firewall as opposed

597
00:20:32,480 --> 00:20:33,360
to

598
00:20:33,360 --> 00:20:35,679
an on host firewall even though you

599
00:20:35,679 --> 00:20:38,240
totally can do that as well

600
00:20:38,240 --> 00:20:40,559
and these are the rules and that you're

601
00:20:40,559 --> 00:20:41,280
setting up

602
00:20:41,280 --> 00:20:44,000
in your terraform script and this also

603
00:20:44,000 --> 00:20:47,360
includes placeholders so the 127.001 for

604
00:20:47,360 --> 00:20:48,559
example

605
00:20:48,559 --> 00:20:51,039
that includes or that will be replaced

606
00:20:51,039 --> 00:20:53,280
by the red team ip operator space

607
00:20:53,280 --> 00:20:55,760
so in other words only the ip or range

608
00:20:55,760 --> 00:20:57,039
provided by the

609
00:20:57,039 --> 00:20:59,919
admin will be able to have ssh access to

610
00:20:59,919 --> 00:21:01,440
this host

611
00:21:01,440 --> 00:21:04,159
uh 80 and 443 again publicly exposed

612
00:21:04,159 --> 00:21:04,720
because

613
00:21:04,720 --> 00:21:06,480
we expect that that's what we're using

614
00:21:06,480 --> 00:21:08,720
our trackers for

615
00:21:08,720 --> 00:21:11,039
and then down at the bottom there's um

616
00:21:11,039 --> 00:21:13,120
another rule that you can't see but

617
00:21:13,120 --> 00:21:16,240
that's the rule for the uh

618
00:21:16,240 --> 00:21:19,440
the goldfish admin port and that will

619
00:21:19,440 --> 00:21:22,640
also have a placeholder of 127.001 which

620
00:21:22,640 --> 00:21:24,240
is replaced by

621
00:21:24,240 --> 00:21:27,280
the red team operator ip

622
00:21:27,280 --> 00:21:30,559
or ip range

623
00:21:30,559 --> 00:21:33,840
and so once this is run the phishing

624
00:21:33,840 --> 00:21:34,480
server

625
00:21:34,480 --> 00:21:36,480
is stood up and it's protected behind

626
00:21:36,480 --> 00:21:38,000
firewall rules again

627
00:21:38,000 --> 00:21:40,480
only the red team operator ipspace can

628
00:21:40,480 --> 00:21:41,760
hit the admin ports

629
00:21:41,760 --> 00:21:45,440
which is what you want and you can ssh

630
00:21:45,440 --> 00:21:48,480
directly into the host and

631
00:21:48,480 --> 00:21:50,640
basically just do dot slash go fish and

632
00:21:50,640 --> 00:21:52,080
it's up and running everything else has

633
00:21:52,080 --> 00:21:53,760
already been set up for you

634
00:21:53,760 --> 00:21:55,919
so in this case it's much quicker and

635
00:21:55,919 --> 00:21:57,120
it's very flexible

636
00:21:57,120 --> 00:21:58,799
these are just screenshots here showing

637
00:21:58,799 --> 00:22:00,559
how the droplet was created

638
00:22:00,559 --> 00:22:02,880
and the droplet was put behind a digital

639
00:22:02,880 --> 00:22:04,240
ocean firewall

640
00:22:04,240 --> 00:22:06,559
with all the rules we mentioned or kind

641
00:22:06,559 --> 00:22:10,240
of stepped through in the previous slide

642
00:22:10,799 --> 00:22:13,600
so uh automation example next one is

643
00:22:13,600 --> 00:22:14,960
going to be for redirectors

644
00:22:14,960 --> 00:22:17,440
so again just conceptually we put

645
00:22:17,440 --> 00:22:20,400
redirectors in front of our c2 servers

646
00:22:20,400 --> 00:22:22,559
uh we put domains themselves on the

647
00:22:22,559 --> 00:22:24,799
redirectors not on our c2 servers so

648
00:22:24,799 --> 00:22:25,360
that

649
00:22:25,360 --> 00:22:26,880
they're burned we just spin up a new

650
00:22:26,880 --> 00:22:28,640
redirector

651
00:22:28,640 --> 00:22:30,799
and we only allow traffic from our

652
00:22:30,799 --> 00:22:32,080
implant to go

653
00:22:32,080 --> 00:22:35,120
to our backend c2 server so you have to

654
00:22:35,120 --> 00:22:37,280
have some specific string hopefully more

655
00:22:37,280 --> 00:22:38,799
than one string

656
00:22:38,799 --> 00:22:41,440
that is very unique in a request header

657
00:22:41,440 --> 00:22:43,200
for your c2 payload and that's what you

658
00:22:43,200 --> 00:22:44,400
use for your redirector

659
00:22:44,400 --> 00:22:47,120
to make a decision and all other traffic

660
00:22:47,120 --> 00:22:48,559
will get the 404

661
00:22:48,559 --> 00:22:51,120
not found so in this example we're going

662
00:22:51,120 --> 00:22:52,400
to use apache mod

663
00:22:52,400 --> 00:22:55,919
rewrite i personally like mod rewrite

664
00:22:55,919 --> 00:22:58,080
for redirectors because it gives you

665
00:22:58,080 --> 00:23:00,080
the option to be very specific in what

666
00:23:00,080 --> 00:23:01,840
you want to redirect

667
00:23:01,840 --> 00:23:05,520
other redirectors like socat are also

668
00:23:05,520 --> 00:23:08,480
candidates for use but typically socad i

669
00:23:08,480 --> 00:23:09,840
use when i just want to redirect

670
00:23:09,840 --> 00:23:10,559
everything

671
00:23:10,559 --> 00:23:12,480
so i like mod rewrite when i want to

672
00:23:12,480 --> 00:23:14,159
make specific decisions on what to

673
00:23:14,159 --> 00:23:15,280
redirect

674
00:23:15,280 --> 00:23:16,720
and in this case we're going to use the

675
00:23:16,720 --> 00:23:18,960
lenode provider whereas we used

676
00:23:18,960 --> 00:23:20,799
used digitalocean earlier we're going to

677
00:23:20,799 --> 00:23:22,799
use the node in this example

678
00:23:22,799 --> 00:23:25,039
so uh the prereqs inside of the node

679
00:23:25,039 --> 00:23:26,159
first you're going to set up your

680
00:23:26,159 --> 00:23:27,840
personal access token

681
00:23:27,840 --> 00:23:30,240
and then on your host you're going to

682
00:23:30,240 --> 00:23:31,600
generate an ssh

683
00:23:31,600 --> 00:23:34,880
key pair and essentially the personal

684
00:23:34,880 --> 00:23:36,320
access token

685
00:23:36,320 --> 00:23:38,080
and the ssh key pair that's what's going

686
00:23:38,080 --> 00:23:40,960
to be used by terraform in order to log

687
00:23:40,960 --> 00:23:42,880
in and start provisioning your host

688
00:23:42,880 --> 00:23:45,760
after it's stood up

689
00:23:46,320 --> 00:23:49,279
so here's the example for an http

690
00:23:49,279 --> 00:23:50,000
redirector

691
00:23:50,000 --> 00:23:52,000
so essentially in this case your your

692
00:23:52,000 --> 00:23:54,480
redirector's http and your backup c2

693
00:23:54,480 --> 00:23:55,120
server

694
00:23:55,120 --> 00:23:57,600
is http uh later we'll look at an

695
00:23:57,600 --> 00:23:59,279
example for ssl

696
00:23:59,279 --> 00:24:00,880
and kind of see what the differences are

697
00:24:00,880 --> 00:24:03,039
in your configurations so first i won't

698
00:24:03,039 --> 00:24:03,440
speak

699
00:24:03,440 --> 00:24:04,880
a lot about the top section because we

700
00:24:04,880 --> 00:24:06,559
already looked at that's installing

701
00:24:06,559 --> 00:24:09,440
terraform if it's not there next section

702
00:24:09,440 --> 00:24:10,080
you're getting

703
00:24:10,080 --> 00:24:12,400
uh configuration information again and

704
00:24:12,400 --> 00:24:13,679
i'm gonna focus on the bottom part

705
00:24:13,679 --> 00:24:16,080
that's specific to redirectors

706
00:24:16,080 --> 00:24:18,000
so you're entering the domain name for

707
00:24:18,000 --> 00:24:19,120
your redirector

708
00:24:19,120 --> 00:24:20,720
so as i mentioned we're putting domains

709
00:24:20,720 --> 00:24:22,240
on the redirector

710
00:24:22,240 --> 00:24:25,440
um and usually what happens is for me

711
00:24:25,440 --> 00:24:27,120
personally as soon as this spins up

712
00:24:27,120 --> 00:24:27,600
because

713
00:24:27,600 --> 00:24:29,039
at this stage we don't know what the ip

714
00:24:29,039 --> 00:24:31,360
address is going to be so as soon as

715
00:24:31,360 --> 00:24:33,600
i run this i kind of watch the provider

716
00:24:33,600 --> 00:24:35,840
and as soon as an ips assigned

717
00:24:35,840 --> 00:24:38,640
i go and make sure i have dns records

718
00:24:38,640 --> 00:24:40,640
set up for that ip address

719
00:24:40,640 --> 00:24:43,679
um and then in this example you can

720
00:24:43,679 --> 00:24:46,400
enter a user agent string that will be

721
00:24:46,400 --> 00:24:48,159
very specific to your c2

722
00:24:48,159 --> 00:24:50,880
payload so something unique there and

723
00:24:50,880 --> 00:24:52,480
then another example

724
00:24:52,480 --> 00:24:54,640
of a secondary item you could add an

725
00:24:54,640 --> 00:24:56,720
authorization token like a bearer token

726
00:24:56,720 --> 00:24:58,640
into your payload as well

727
00:24:58,640 --> 00:25:00,400
so then you'll have the user agent

728
00:25:00,400 --> 00:25:02,640
string and this bearer token that would

729
00:25:02,640 --> 00:25:04,080
be very unique

730
00:25:04,080 --> 00:25:07,200
uh to your c2 payload which then makes

731
00:25:07,200 --> 00:25:10,720
um makes for two high fidelity

732
00:25:10,720 --> 00:25:12,080
conditions where

733
00:25:12,080 --> 00:25:14,000
your redirector will look for both and

734
00:25:14,000 --> 00:25:16,080
if the traffic making requests to the

735
00:25:16,080 --> 00:25:16,799
redirector

736
00:25:16,799 --> 00:25:19,120
don't have both of these then 404 is

737
00:25:19,120 --> 00:25:20,159
going to be found

738
00:25:20,159 --> 00:25:22,320
uh a 404 is going to be return i mean to

739
00:25:22,320 --> 00:25:24,159
the to the requester

740
00:25:24,159 --> 00:25:27,039
um so gathers that information and then

741
00:25:27,039 --> 00:25:28,559
the next section you're doing

742
00:25:28,559 --> 00:25:31,279
variable replacements again so you're

743
00:25:31,279 --> 00:25:32,159
replacing

744
00:25:32,159 --> 00:25:34,880
um in your terraform files and this time

745
00:25:34,880 --> 00:25:36,240
we're also replacing

746
00:25:36,240 --> 00:25:41,039
in three or i'll say i have three unique

747
00:25:41,039 --> 00:25:44,080
files also that are being uh

748
00:25:44,080 --> 00:25:47,200
kept locally so in this case like apache

749
00:25:47,200 --> 00:25:49,360
itself i'm keeping the config files a

750
00:25:49,360 --> 00:25:51,679
conversion of the config files locally

751
00:25:51,679 --> 00:25:54,080
and i'm edit editing them locally and

752
00:25:54,080 --> 00:25:55,840
then when terraform runs it's going to

753
00:25:55,840 --> 00:25:58,320
move them over to the new instance

754
00:25:58,320 --> 00:26:00,080
i personally found that to be one of the

755
00:26:00,080 --> 00:26:02,000
easier ways of trying to

756
00:26:02,000 --> 00:26:04,640
on the fly configure apache servers with

757
00:26:04,640 --> 00:26:05,760
mod rewrite

758
00:26:05,760 --> 00:26:07,919
so i just have a templated version of

759
00:26:07,919 --> 00:26:09,440
these three files

760
00:26:09,440 --> 00:26:12,320
i do variable replacements in the files

761
00:26:12,320 --> 00:26:14,320
based on what i'm trying to stand up

762
00:26:14,320 --> 00:26:16,559
and the values of the operator and then

763
00:26:16,559 --> 00:26:18,320
when terraform runs it moves them over

764
00:26:18,320 --> 00:26:19,840
to the new instance

765
00:26:19,840 --> 00:26:22,159
so you'll see some examples of that in

766
00:26:22,159 --> 00:26:23,279
the next slide

767
00:26:23,279 --> 00:26:25,919
then you of course you run terraform and

768
00:26:25,919 --> 00:26:27,919
and initialize so let's look at these

769
00:26:27,919 --> 00:26:28,960
examples of

770
00:26:28,960 --> 00:26:32,240
the uh apache files so the files that i

771
00:26:32,240 --> 00:26:33,120
use

772
00:26:33,120 --> 00:26:36,840
um in this example here you have

773
00:26:36,840 --> 00:26:38,559
000default.com.h

774
00:26:38,559 --> 00:26:41,520
and then a local copy of apache2.com uh

775
00:26:41,520 --> 00:26:43,440
the reason again i kept all these these

776
00:26:43,440 --> 00:26:45,120
are a lot of these are mainly the three

777
00:26:45,120 --> 00:26:47,039
key files that you'll need on the apache

778
00:26:47,039 --> 00:26:49,120
server in order to

779
00:26:49,120 --> 00:26:51,520
have mod rewrite set up and and running

780
00:26:51,520 --> 00:26:52,320
for you

781
00:26:52,320 --> 00:26:54,240
so first you have your zero zero zero

782
00:26:54,240 --> 00:26:55,440
default.com

783
00:26:55,440 --> 00:26:57,360
and here of course as i mentioned

784
00:26:57,360 --> 00:26:58,880
there's going to be some placeholder

785
00:26:58,880 --> 00:27:00,480
values that

786
00:27:00,480 --> 00:27:01,600
your shell script is going to do

787
00:27:01,600 --> 00:27:04,200
replacements on so for instance the

788
00:27:04,200 --> 00:27:06,559
www.domain here that's going to be

789
00:27:06,559 --> 00:27:08,880
replaced by the domain entered by the

790
00:27:08,880 --> 00:27:10,240
operator

791
00:27:10,240 --> 00:27:12,240
your rewrite engine is on so that's

792
00:27:12,240 --> 00:27:13,840
enabling mod rewrite

793
00:27:13,840 --> 00:27:15,840
you have two rewrite conditions here one

794
00:27:15,840 --> 00:27:17,200
being the user agent

795
00:27:17,200 --> 00:27:19,600
the user agent here is another

796
00:27:19,600 --> 00:27:20,960
placeholder that's going to be

797
00:27:20,960 --> 00:27:23,360
replaced by the user agent value that

798
00:27:23,360 --> 00:27:25,039
the operator inserts so

799
00:27:25,039 --> 00:27:26,720
whatever that unique user agent string

800
00:27:26,720 --> 00:27:28,159
is for your payload

801
00:27:28,159 --> 00:27:29,919
uh the rewrite condition the second

802
00:27:29,919 --> 00:27:31,120
rewrite condition here is the

803
00:27:31,120 --> 00:27:34,000
authorization string or the bearer token

804
00:27:34,000 --> 00:27:36,399
for your payload and that start of all

805
00:27:36,399 --> 00:27:37,840
string that's going to be

806
00:27:37,840 --> 00:27:40,240
that's a placeholder as well that's uh

807
00:27:40,240 --> 00:27:41,520
shell script is going to replace that

808
00:27:41,520 --> 00:27:42,960
value with what the

809
00:27:42,960 --> 00:27:45,200
operator entered and then your rewrite

810
00:27:45,200 --> 00:27:46,000
rule

811
00:27:46,000 --> 00:27:48,720
so if those two conditions are met um

812
00:27:48,720 --> 00:27:50,000
send traffic here

813
00:27:50,000 --> 00:27:51,600
in this way and essentially what it's

814
00:27:51,600 --> 00:27:54,240
doing is it's sending the traffic along

815
00:27:54,240 --> 00:27:55,279
with the uri

816
00:27:55,279 --> 00:27:58,640
to the backend c2 server so that c2 ip

817
00:27:58,640 --> 00:28:00,159
here is a placeholder that's going to be

818
00:28:00,159 --> 00:28:02,480
replaced with the

819
00:28:02,480 --> 00:28:04,799
the ip address of the c2 server provided

820
00:28:04,799 --> 00:28:06,159
by the operator

821
00:28:06,159 --> 00:28:08,799
and the p along with the proxy pass

822
00:28:08,799 --> 00:28:10,320
reverse in the next line

823
00:28:10,320 --> 00:28:12,320
that allows mod rewrite to be a

824
00:28:12,320 --> 00:28:14,000
transparent proxy

825
00:28:14,000 --> 00:28:16,720
and essentially proxy the traffic to the

826
00:28:16,720 --> 00:28:18,720
backend c2 server

827
00:28:18,720 --> 00:28:20,720
uh the rewrite rule at the bottom if the

828
00:28:20,720 --> 00:28:22,000
conditions are not met

829
00:28:22,000 --> 00:28:25,440
return a 404 so that's sort of stepping

830
00:28:25,440 --> 00:28:26,000
through to

831
00:28:26,000 --> 00:28:29,520
zero zero zero default.com got hc access

832
00:28:29,520 --> 00:28:32,799
very similar um to the zero zero zero

833
00:28:32,799 --> 00:28:34,399
default.com it just has a little bit

834
00:28:34,399 --> 00:28:36,080
less but you can still see the same

835
00:28:36,080 --> 00:28:36,640
logic

836
00:28:36,640 --> 00:28:40,080
for um your mod rewrite with enabling it

837
00:28:40,080 --> 00:28:41,279
the rewrite conditions

838
00:28:41,279 --> 00:28:44,559
the rules the proxy pass reverse etc

839
00:28:44,559 --> 00:28:47,840
and uh last item the apache2.conf i did

840
00:28:47,840 --> 00:28:49,600
not show the whole file here because

841
00:28:49,600 --> 00:28:50,880
obviously it's for both

842
00:28:50,880 --> 00:28:52,559
but honestly the only thing i'm changing

843
00:28:52,559 --> 00:28:55,039
is just this this tag here this section

844
00:28:55,039 --> 00:28:55,399
of

845
00:28:55,399 --> 00:28:59,440
apache2.com your your var www directory

846
00:28:59,440 --> 00:29:00,720
so ensuring that

847
00:29:00,720 --> 00:29:03,679
allow override is set to all and you

848
00:29:03,679 --> 00:29:04,159
take

849
00:29:04,159 --> 00:29:06,520
um so i had the full copy of

850
00:29:06,520 --> 00:29:08,480
apache2.conf locally

851
00:29:08,480 --> 00:29:11,440
zero zero zero default conf locally and

852
00:29:11,440 --> 00:29:12,159
access

853
00:29:12,159 --> 00:29:13,919
the variable replacements are done and

854
00:29:13,919 --> 00:29:15,440
you'll see in the next slide

855
00:29:15,440 --> 00:29:18,880
once terraform starts running

856
00:29:18,880 --> 00:29:21,840
it uses a file provisioner to then move

857
00:29:21,840 --> 00:29:23,679
these files and put them on a server

858
00:29:23,679 --> 00:29:24,320
after

859
00:29:24,320 --> 00:29:27,760
we ensure that apache is installed

860
00:29:27,760 --> 00:29:30,799
so here's the terraform script for again

861
00:29:30,799 --> 00:29:32,880
http redirectors

862
00:29:32,880 --> 00:29:34,960
so here's the file provisioner that i

863
00:29:34,960 --> 00:29:36,720
mentioned for each of the three files we

864
00:29:36,720 --> 00:29:37,600
looked at

865
00:29:37,600 --> 00:29:40,240
so the source is where it is locally on

866
00:29:40,240 --> 00:29:40,880
your host

867
00:29:40,880 --> 00:29:42,480
and then destination is where we're

868
00:29:42,480 --> 00:29:44,720
going to move it to on the new host

869
00:29:44,720 --> 00:29:46,399
that we just stood up so in this case

870
00:29:46,399 --> 00:29:47,919
the new redirector

871
00:29:47,919 --> 00:29:50,000
so you can see that zero zero zero

872
00:29:50,000 --> 00:29:52,000
default.conf is being moved to the root

873
00:29:52,000 --> 00:29:52,880
directory

874
00:29:52,880 --> 00:29:55,919
actually apache.2.com and htaccess

875
00:29:55,919 --> 00:29:57,360
they're all being moved to the root

876
00:29:57,360 --> 00:29:58,240
directory

877
00:29:58,240 --> 00:30:00,720
and htaccess is being renamed to dot

878
00:30:00,720 --> 00:30:02,720
htaccess which is how it is on the

879
00:30:02,720 --> 00:30:04,960
apache server

880
00:30:04,960 --> 00:30:06,559
and then at the bottom you have your

881
00:30:06,559 --> 00:30:08,799
remote exact provisioners

882
00:30:08,799 --> 00:30:11,440
and these are the commands that are run

883
00:30:11,440 --> 00:30:12,240
in line

884
00:30:12,240 --> 00:30:14,000
and the section in yellow i'll just

885
00:30:14,000 --> 00:30:15,840
focus on these being specific to

886
00:30:15,840 --> 00:30:18,720
mod rewrite so you're enabling mod

887
00:30:18,720 --> 00:30:20,399
rewrite and some of the modules that

888
00:30:20,399 --> 00:30:22,320
you'll need and then you're performing a

889
00:30:22,320 --> 00:30:23,279
move

890
00:30:23,279 --> 00:30:25,679
of these files from the root directory

891
00:30:25,679 --> 00:30:26,559
to the proper

892
00:30:26,559 --> 00:30:29,039
directories that apache expects these

893
00:30:29,039 --> 00:30:30,399
files to be in

894
00:30:30,399 --> 00:30:33,200
so you basically uh you did you took the

895
00:30:33,200 --> 00:30:34,399
cop the blank

896
00:30:34,399 --> 00:30:36,559
template copies locally you made the

897
00:30:36,559 --> 00:30:37,440
changes

898
00:30:37,440 --> 00:30:40,399
you move them to attempt directory for a

899
00:30:40,399 --> 00:30:41,840
short period of time while the host is

900
00:30:41,840 --> 00:30:42,880
being stood up

901
00:30:42,880 --> 00:30:44,720
then after it's stood up you move it on

902
00:30:44,720 --> 00:30:45,919
over

903
00:30:45,919 --> 00:30:47,679
to the expected directory so i found it

904
00:30:47,679 --> 00:30:49,279
to be a pretty

905
00:30:49,279 --> 00:30:52,640
nifty way of getting or managing apache

906
00:30:52,640 --> 00:30:53,360
remotely

907
00:30:53,360 --> 00:30:55,200
without even having the server stood up

908
00:30:55,200 --> 00:30:57,679
yet using terraform

909
00:30:57,679 --> 00:30:59,519
then of course at the bottom you restart

910
00:30:59,519 --> 00:31:02,080
apache and once you do that

911
00:31:02,080 --> 00:31:04,480
the server is actually up and running um

912
00:31:04,480 --> 00:31:06,399
and that's the part that i like about it

913
00:31:06,399 --> 00:31:08,320
is just through running these scripts

914
00:31:08,320 --> 00:31:11,120
in a matter of a very short period of

915
00:31:11,120 --> 00:31:11,679
time

916
00:31:11,679 --> 00:31:14,000
your redirector is up and it's the

917
00:31:14,000 --> 00:31:15,600
rewrite conditions are in place

918
00:31:15,600 --> 00:31:17,039
and it's already in front of your

919
00:31:17,039 --> 00:31:18,960
backend c2 server

920
00:31:18,960 --> 00:31:20,720
i didn't show it here but i also have

921
00:31:20,720 --> 00:31:22,880
scripts in place for the back-end c2

922
00:31:22,880 --> 00:31:23,760
server

923
00:31:23,760 --> 00:31:26,559
and those scripts sort of walk you

924
00:31:26,559 --> 00:31:28,559
through a very similar process where

925
00:31:28,559 --> 00:31:30,799
this time it allows you to input the

926
00:31:30,799 --> 00:31:32,559
name of or

927
00:31:32,559 --> 00:31:34,320
hostname or ip address of your

928
00:31:34,320 --> 00:31:36,799
redirector and then it sets up firewall

929
00:31:36,799 --> 00:31:39,039
rules so that only the redirector can

930
00:31:39,039 --> 00:31:39,919
access

931
00:31:39,919 --> 00:31:42,480
whatever payload ports you're using and

932
00:31:42,480 --> 00:31:44,320
it also prompts you for your red team

933
00:31:44,320 --> 00:31:46,559
operator ip ipspace so that only

934
00:31:46,559 --> 00:31:48,799
the space you provided can ssh in so i

935
00:31:48,799 --> 00:31:50,240
have scripts for that

936
00:31:50,240 --> 00:31:52,559
got your mod rewrite scripts and you run

937
00:31:52,559 --> 00:31:54,399
both of those and you're really uh

938
00:31:54,399 --> 00:31:56,399
it's just i personally enjoy it just

939
00:31:56,399 --> 00:31:58,159
having the infrastructure stood up for

940
00:31:58,159 --> 00:31:58,799
you

941
00:31:58,799 --> 00:32:01,760
where now as requests come into the mod

942
00:32:01,760 --> 00:32:02,960
rewrite server

943
00:32:02,960 --> 00:32:04,799
the conditions and logic you specified

944
00:32:04,799 --> 00:32:06,799
are in place and if it looks like your

945
00:32:06,799 --> 00:32:08,640
payload or those conditions check out

946
00:32:08,640 --> 00:32:09,600
then

947
00:32:09,600 --> 00:32:11,440
the payload is transparently proxied

948
00:32:11,440 --> 00:32:15,840
everything else is given 404.

949
00:32:15,840 --> 00:32:19,200
so for ssl it's pretty similar

950
00:32:19,200 --> 00:32:21,039
we just have some new lines so i'm going

951
00:32:21,039 --> 00:32:22,880
to speak to those the new lines are in

952
00:32:22,880 --> 00:32:23,440
orange

953
00:32:23,440 --> 00:32:26,240
here uh in the files so you can see

954
00:32:26,240 --> 00:32:27,279
things like ssl

955
00:32:27,279 --> 00:32:30,720
engine on ssl proxy engine on

956
00:32:30,720 --> 00:32:33,519
it's just turning on the ssl modules for

957
00:32:33,519 --> 00:32:35,360
mod rewrite

958
00:32:35,360 --> 00:32:37,919
and we don't care about verifying the

959
00:32:37,919 --> 00:32:39,039
the prcn

960
00:32:39,039 --> 00:32:41,600
or checking the pure name any of that

961
00:32:41,600 --> 00:32:42,799
stuff we're just setting it up

962
00:32:42,799 --> 00:32:44,480
specifically for

963
00:32:44,480 --> 00:32:48,000
enabling ssl modules and using ssl as a

964
00:32:48,000 --> 00:32:50,000
transparent proxy

965
00:32:50,000 --> 00:32:52,320
and you'll see here we also have the ssl

966
00:32:52,320 --> 00:32:53,760
certificate file and

967
00:32:53,760 --> 00:32:56,799
ssl certificate key file so you can see

968
00:32:56,799 --> 00:32:57,200
here

969
00:32:57,200 --> 00:32:59,360
it's it's uh using a let's encrypt

970
00:32:59,360 --> 00:33:00,480
directory path

971
00:33:00,480 --> 00:33:03,519
so on a slide or two from now you'll

972
00:33:03,519 --> 00:33:07,440
i'll show you how the terraform commands

973
00:33:07,440 --> 00:33:09,760
are taken care of that's encrypt for you

974
00:33:09,760 --> 00:33:11,760
for your redirector it's standing up the

975
00:33:11,760 --> 00:33:12,640
domain

976
00:33:12,640 --> 00:33:14,399
that you provide so it takes care of all

977
00:33:14,399 --> 00:33:16,399
that for you which is pretty nice

978
00:33:16,399 --> 00:33:18,240
and it still has some placeholders here

979
00:33:18,240 --> 00:33:20,799
like www.domainhere

980
00:33:20,799 --> 00:33:22,799
for the certificate lines both of those

981
00:33:22,799 --> 00:33:24,080
get replaced by the

982
00:33:24,080 --> 00:33:27,039
domain that the operator enters when the

983
00:33:27,039 --> 00:33:28,559
shell script prompts it

984
00:33:28,559 --> 00:33:30,240
um then of course at the bottom like

985
00:33:30,240 --> 00:33:32,559
your https

986
00:33:32,559 --> 00:33:34,399
or your ac the lines that were previous

987
00:33:34,399 --> 00:33:37,919
http you're changing it now to https um

988
00:33:37,919 --> 00:33:40,159
since you're back in c2 server is

989
00:33:40,159 --> 00:33:43,200
https and of course the same variable

990
00:33:43,200 --> 00:33:44,880
replacements we talked about before like

991
00:33:44,880 --> 00:33:46,080
the user agent here

992
00:33:46,080 --> 00:33:48,559
startup offstring c2ip here all that's

993
00:33:48,559 --> 00:33:49,919
going to get replaced

994
00:33:49,919 --> 00:33:52,799
by the values entered by the operator uh

995
00:33:52,799 --> 00:33:54,240
for your zero zero zero

996
00:33:54,240 --> 00:33:58,000
default.com uh same thing here um

997
00:33:58,000 --> 00:33:59,519
it's pretty much the same lines in

998
00:33:59,519 --> 00:34:02,240
orange that we discussed in htaccess

999
00:34:02,240 --> 00:34:05,279
and apache2.com really nothing changes

1000
00:34:05,279 --> 00:34:06,640
here it's the same

1001
00:34:06,640 --> 00:34:10,000
as before you're just keeping a local

1002
00:34:10,000 --> 00:34:11,839
copy because we're ensuring that allow

1003
00:34:11,839 --> 00:34:13,839
override is set to all

1004
00:34:13,839 --> 00:34:16,639
so uh you have your three files here for

1005
00:34:16,639 --> 00:34:18,960
ssl redirectors

1006
00:34:18,960 --> 00:34:21,839
and here's your terraform script i'm

1007
00:34:21,839 --> 00:34:23,119
just going to focus on the

1008
00:34:23,119 --> 00:34:25,839
yellow section specific for ssl mod

1009
00:34:25,839 --> 00:34:27,839
rewrite so again you're enabling

1010
00:34:27,839 --> 00:34:30,480
mod rewrite modules the ones you'll need

1011
00:34:30,480 --> 00:34:32,079
such as the ssl module

1012
00:34:32,079 --> 00:34:35,119
the proxy module etc

1013
00:34:35,119 --> 00:34:37,599
uh you're enabling mod rewrite and then

1014
00:34:37,599 --> 00:34:38,399
you're also

1015
00:34:38,399 --> 00:34:41,040
installing or you're setting up the

1016
00:34:41,040 --> 00:34:42,879
software properties common

1017
00:34:42,879 --> 00:34:46,480
repo um and the universe

1018
00:34:46,480 --> 00:34:50,079
the apt repository universe

1019
00:34:50,079 --> 00:34:51,760
and then from that you're installing

1020
00:34:51,760 --> 00:34:54,079
certbot and you're installing certbot

1021
00:34:54,079 --> 00:34:56,719
or python 3 surfboard apache so once

1022
00:34:56,719 --> 00:34:58,400
those are installed

1023
00:34:58,400 --> 00:35:00,480
this is the next line at the bottom the

1024
00:35:00,480 --> 00:35:03,040
last line in the yellow square

1025
00:35:03,040 --> 00:35:05,760
that's the line that takes care of your

1026
00:35:05,760 --> 00:35:06,800
ssl

1027
00:35:06,800 --> 00:35:09,520
your let's encrypt ssl cert for your ssl

1028
00:35:09,520 --> 00:35:10,480
redirector

1029
00:35:10,480 --> 00:35:12,560
so in this case you're running certbot

1030
00:35:12,560 --> 00:35:14,079
and you have a couple placeholders

1031
00:35:14,079 --> 00:35:15,040
domain here

1032
00:35:15,040 --> 00:35:19,440
in www.www.domain here so those are

1033
00:35:19,440 --> 00:35:22,079
placeholder values that get replaced and

1034
00:35:22,079 --> 00:35:23,040
it's registering

1035
00:35:23,040 --> 00:35:25,680
unsafely without email agreeing to turns

1036
00:35:25,680 --> 00:35:27,599
of service and no redirect those are put

1037
00:35:27,599 --> 00:35:28,480
in there so that

1038
00:35:28,480 --> 00:35:30,480
essentially this one line will take care

1039
00:35:30,480 --> 00:35:32,160
of installing cert

1040
00:35:32,160 --> 00:35:34,400
the cert for you on the new host without

1041
00:35:34,400 --> 00:35:35,440
having to

1042
00:35:35,440 --> 00:35:37,599
pause and wait for the for the operator

1043
00:35:37,599 --> 00:35:40,160
to respond to prompts it just does it in

1044
00:35:40,160 --> 00:35:41,440
one command

1045
00:35:41,440 --> 00:35:44,000
and essentially sets up your ssl cert

1046
00:35:44,000 --> 00:35:46,400
for you

1047
00:35:46,480 --> 00:35:48,720
so things i like about it like about

1048
00:35:48,720 --> 00:35:50,320
this approach with

1049
00:35:50,320 --> 00:35:52,640
on the ssl side is it takes the pain out

1050
00:35:52,640 --> 00:35:53,440
of

1051
00:35:53,440 --> 00:35:56,160
manual mod rewrite configurations a lot

1052
00:35:56,160 --> 00:35:57,359
of times what happened is

1053
00:35:57,359 --> 00:35:58,960
for us on the red team side is we'll

1054
00:35:58,960 --> 00:36:00,640
stand it up manually

1055
00:36:00,640 --> 00:36:03,359
have a lot of steps that we're using and

1056
00:36:03,359 --> 00:36:05,200
even some tricks that we've learned

1057
00:36:05,200 --> 00:36:07,760
and won't document it we'll step away

1058
00:36:07,760 --> 00:36:09,359
for a month or two doing something

1059
00:36:09,359 --> 00:36:09,839
different

1060
00:36:09,839 --> 00:36:12,160
come back and kind of waste time trying

1061
00:36:12,160 --> 00:36:13,839
to think of what those shortcuts were

1062
00:36:13,839 --> 00:36:15,200
that we used

1063
00:36:15,200 --> 00:36:17,119
um couldn't remember you know some of

1064
00:36:17,119 --> 00:36:18,800
the pitfalls or mistakes we made before

1065
00:36:18,800 --> 00:36:20,640
etc so the nice thing here with

1066
00:36:20,640 --> 00:36:21,440
automating it

1067
00:36:21,440 --> 00:36:24,480
is you now have a clean flow of the

1068
00:36:24,480 --> 00:36:25,440
steps to take

1069
00:36:25,440 --> 00:36:27,280
what worked what didn't work you've

1070
00:36:27,280 --> 00:36:28,960
already worked that out and

1071
00:36:28,960 --> 00:36:30,320
it takes the pain out of doing it

1072
00:36:30,320 --> 00:36:32,720
manually because now it's all run

1073
00:36:32,720 --> 00:36:34,720
um and taken care of via your shell

1074
00:36:34,720 --> 00:36:37,040
script and terraform

1075
00:36:37,040 --> 00:36:39,119
um again it takes care of the ssl cert

1076
00:36:39,119 --> 00:36:40,480
for the new redirector

1077
00:36:40,480 --> 00:36:42,720
so that part is really nice you just

1078
00:36:42,720 --> 00:36:43,839
provided a domain

1079
00:36:43,839 --> 00:36:46,960
and it it goes on from there the

1080
00:36:46,960 --> 00:36:48,000
redirectors are

1081
00:36:48,000 --> 00:36:50,400
c2 agnostic so it doesn't really matter

1082
00:36:50,400 --> 00:36:52,240
if it's cobalt strike

1083
00:36:52,240 --> 00:36:54,960
if it's uh empire if it's mythic really

1084
00:36:54,960 --> 00:36:55,920
doesn't matter

1085
00:36:55,920 --> 00:36:57,760
because essentially the redirections are

1086
00:36:57,760 --> 00:36:59,599
checking for header values

1087
00:36:59,599 --> 00:37:02,160
from your payload so it really doesn't

1088
00:37:02,160 --> 00:37:03,599
matter you can put it in front of any

1089
00:37:03,599 --> 00:37:06,240
command and control which is really nice

1090
00:37:06,240 --> 00:37:08,560
um the thing i like personally again

1091
00:37:08,560 --> 00:37:10,079
about my rewrite is you get more

1092
00:37:10,079 --> 00:37:11,040
granularity

1093
00:37:11,040 --> 00:37:12,800
on how you want to filter so you can

1094
00:37:12,800 --> 00:37:14,720
have specific rewrite conditions

1095
00:37:14,720 --> 00:37:17,599
on certain values uh the examples i

1096
00:37:17,599 --> 00:37:18,560
showed or just

1097
00:37:18,560 --> 00:37:20,560
uh like scratching the surface you can

1098
00:37:20,560 --> 00:37:22,160
do other things

1099
00:37:22,160 --> 00:37:24,240
based on other conditions such as uri

1100
00:37:24,240 --> 00:37:25,520
paths

1101
00:37:25,520 --> 00:37:28,400
that you can filter on um and again this

1102
00:37:28,400 --> 00:37:29,359
approach makes

1103
00:37:29,359 --> 00:37:31,760
your your team more resilient so that

1104
00:37:31,760 --> 00:37:33,359
when your domain gets burned

1105
00:37:33,359 --> 00:37:35,040
you're just losing a redirect or you

1106
00:37:35,040 --> 00:37:37,200
stand up a new one point it to your c2

1107
00:37:37,200 --> 00:37:37,760
server

1108
00:37:37,760 --> 00:37:40,720
you're all good to go so it keeps your

1109
00:37:40,720 --> 00:37:42,079
back-end c2

1110
00:37:42,079 --> 00:37:45,280
infrastructure protected and not exposed

1111
00:37:45,280 --> 00:37:47,839
which is what you want from a secure

1112
00:37:47,839 --> 00:37:49,520
security perspective for your red team

1113
00:37:49,520 --> 00:37:51,520
member

1114
00:37:51,520 --> 00:37:54,320
so uh just some lessons learned just to

1115
00:37:54,320 --> 00:37:55,839
reiterate here

1116
00:37:55,839 --> 00:37:58,640
um i do think automation can be very

1117
00:37:58,640 --> 00:37:59,599
helpful for

1118
00:37:59,599 --> 00:38:02,000
red teams in general it really helps

1119
00:38:02,000 --> 00:38:03,520
like we looked at that stacked plate

1120
00:38:03,520 --> 00:38:04,079
early on

1121
00:38:04,079 --> 00:38:07,200
it helps um read through

1122
00:38:07,200 --> 00:38:09,040
where you want to spend your time and

1123
00:38:09,040 --> 00:38:11,040
what you can automate and have terraform

1124
00:38:11,040 --> 00:38:13,200
do some heavy lifting for you

1125
00:38:13,200 --> 00:38:14,720
i've been a part of one person read to

1126
00:38:14,720 --> 00:38:16,320
use and i've often joked

1127
00:38:16,320 --> 00:38:19,440
that um i'm a like the times where i've

1128
00:38:19,440 --> 00:38:20,720
been on one person red team i've

1129
00:38:20,720 --> 00:38:21,599
mentioned

1130
00:38:21,599 --> 00:38:23,599
i'm actually a red team of two myself

1131
00:38:23,599 --> 00:38:25,760
and terraform and terraform does

1132
00:38:25,760 --> 00:38:28,240
most of the work it's been my joke just

1133
00:38:28,240 --> 00:38:29,839
because i really love leveraging

1134
00:38:29,839 --> 00:38:31,359
terraform and having it do

1135
00:38:31,359 --> 00:38:34,640
as much of the heavy lifting as possible

1136
00:38:34,640 --> 00:38:35,680
again there's lots of different

1137
00:38:35,680 --> 00:38:37,280
approaches and tools you can use for

1138
00:38:37,280 --> 00:38:39,040
automation i didn't even scratch

1139
00:38:39,040 --> 00:38:41,760
or touch in on ansible because you can

1140
00:38:41,760 --> 00:38:44,320
use ansible playbooks

1141
00:38:44,320 --> 00:38:45,680
there's all sorts of different

1142
00:38:45,680 --> 00:38:47,359
approaches you can even write your own

1143
00:38:47,359 --> 00:38:48,160
scripts that

1144
00:38:48,160 --> 00:38:50,000
interact with the apis of cloud

1145
00:38:50,000 --> 00:38:51,839
providers so you're totally not

1146
00:38:51,839 --> 00:38:52,720
restricted here

1147
00:38:52,720 --> 00:38:54,640
i just think that the main point is we

1148
00:38:54,640 --> 00:38:56,960
should be using automation in some form

1149
00:38:56,960 --> 00:38:59,359
so however you choose to do that it's up

1150
00:38:59,359 --> 00:39:00,480
to you but just make sure you're

1151
00:39:00,480 --> 00:39:01,920
comfortable with whatever approach

1152
00:39:01,920 --> 00:39:05,200
you use and that is scalable secure and

1153
00:39:05,200 --> 00:39:06,720
flexible

1154
00:39:06,720 --> 00:39:08,880
um again i recommend automating as much

1155
00:39:08,880 --> 00:39:10,960
infrastructure management as possible

1156
00:39:10,960 --> 00:39:13,680
and along the way as you're automating

1157
00:39:13,680 --> 00:39:14,880
just make sure you have good

1158
00:39:14,880 --> 00:39:17,200
documentation on your setup so that

1159
00:39:17,200 --> 00:39:20,000
as you add new members to your team or

1160
00:39:20,000 --> 00:39:21,839
if you depart from the team one day like

1161
00:39:21,839 --> 00:39:22,560
there's a good

1162
00:39:22,560 --> 00:39:24,800
trail of documentation so that everyone

1163
00:39:24,800 --> 00:39:26,160
knows like how

1164
00:39:26,160 --> 00:39:28,320
we manage red team uh how we manage

1165
00:39:28,320 --> 00:39:30,560
infrastructure on our red team

1166
00:39:30,560 --> 00:39:33,440
um and that there's no down time trying

1167
00:39:33,440 --> 00:39:34,320
to figure out

1168
00:39:34,320 --> 00:39:37,760
what do we have and etc um

1169
00:39:37,760 --> 00:39:40,640
i also think it's ideal if possible like

1170
00:39:40,640 --> 00:39:42,160
in this these slides here we talked

1171
00:39:42,160 --> 00:39:43,680
about an external infrastructure

1172
00:39:43,680 --> 00:39:44,720
environment

1173
00:39:44,720 --> 00:39:46,640
uh i use lenod and digitalocean as

1174
00:39:46,640 --> 00:39:48,480
examples but here

1175
00:39:48,480 --> 00:39:50,720
um i think it's also important if if

1176
00:39:50,720 --> 00:39:52,720
possible to have an

1177
00:39:52,720 --> 00:39:54,320
internal infrastructure environment as

1178
00:39:54,320 --> 00:39:56,000
well that may be

1179
00:39:56,000 --> 00:39:58,960
uh part of your organization's like

1180
00:39:58,960 --> 00:39:59,599
managed

1181
00:39:59,599 --> 00:40:03,280
service but it's not like part of

1182
00:40:03,280 --> 00:40:06,880
the general security groups um

1183
00:40:06,880 --> 00:40:09,599
internal infrastructure if you will so

1184
00:40:09,599 --> 00:40:10,880
in other words like having

1185
00:40:10,880 --> 00:40:12,640
infrastructure internal that you can

1186
00:40:12,640 --> 00:40:14,800
leverage as part of uh

1187
00:40:14,800 --> 00:40:16,800
unique exercises internally and kind of

1188
00:40:16,800 --> 00:40:18,960
help validate sort of where the

1189
00:40:18,960 --> 00:40:22,000
visibility gaps are it may even be

1190
00:40:22,000 --> 00:40:22,800
helpful

1191
00:40:22,800 --> 00:40:25,040
for some exercises to have internal

1192
00:40:25,040 --> 00:40:27,119
infrastructure that is visible

1193
00:40:27,119 --> 00:40:31,280
and is part of the securities overall

1194
00:40:31,280 --> 00:40:33,599
like internal infrastructure environment

1195
00:40:33,599 --> 00:40:35,520
just to test visibility there so i think

1196
00:40:35,520 --> 00:40:36,000
it's

1197
00:40:36,000 --> 00:40:37,359
long story short i think it's good to

1198
00:40:37,359 --> 00:40:39,200
have infrastructure in multiple

1199
00:40:39,200 --> 00:40:39,920
environments

1200
00:40:39,920 --> 00:40:42,560
externally but also internally so that

1201
00:40:42,560 --> 00:40:44,400
um you can test visibility

1202
00:40:44,400 --> 00:40:46,560
and detection at different layers and

1203
00:40:46,560 --> 00:40:49,520
with different scenarios

1204
00:40:49,520 --> 00:40:52,079
so some references that support a lot of

1205
00:40:52,079 --> 00:40:54,400
the data here i have a blog on red team

1206
00:40:54,400 --> 00:40:57,280
and for automation that has more details

1207
00:40:57,280 --> 00:41:00,800
i also included links here to my lenode

1208
00:41:00,800 --> 00:41:02,880
and digital ocean terraform scripts and

1209
00:41:02,880 --> 00:41:03,920
these scripts handle

1210
00:41:03,920 --> 00:41:06,560
standing up phishing servers evil jinx 2

1211
00:41:06,560 --> 00:41:07,599
servers

1212
00:41:07,599 --> 00:41:11,119
and c2 servers i also included a link to

1213
00:41:11,119 --> 00:41:13,599
my mod rewrite automation scripts

1214
00:41:13,599 --> 00:41:16,880
for digitalocean and lenode also helpful

1215
00:41:16,880 --> 00:41:17,760
reading i thought

1216
00:41:17,760 --> 00:41:19,520
would be tim malcolmbetter's blog on

1217
00:41:19,520 --> 00:41:21,200
safe red team infrastructure

1218
00:41:21,200 --> 00:41:23,839
and blue screen of jeff he also has a

1219
00:41:23,839 --> 00:41:27,520
good wiki on red team infrastructure so

1220
00:41:27,520 --> 00:41:29,440
definitely recommend checking those out

1221
00:41:29,440 --> 00:41:31,359
as well

1222
00:41:31,359 --> 00:41:34,160
so i thank you all for having me and

1223
00:41:34,160 --> 00:41:36,160
feel free to reach out if you all have

1224
00:41:36,160 --> 00:41:38,720
any questions

1225
00:41:42,839 --> 00:41:45,839
thanks

