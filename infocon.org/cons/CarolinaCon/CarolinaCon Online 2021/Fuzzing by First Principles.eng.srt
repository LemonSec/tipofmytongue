1
00:00:11,120 --> 00:00:13,679
welcome to my presentation

2
00:00:13,679 --> 00:00:16,960
fuzzing by first principles by

3
00:00:16,960 --> 00:00:22,400
mike curno aka taco the boss

4
00:00:24,080 --> 00:00:27,599
a few assumptions to kind of get out of

5
00:00:27,599 --> 00:00:28,800
the way before we start

6
00:00:28,800 --> 00:00:31,679
uh one that this isn't this isn't uh uh

7
00:00:31,679 --> 00:00:33,440
really a technical

8
00:00:33,440 --> 00:00:36,719
uh talk it's uh it's really more

9
00:00:36,719 --> 00:00:40,719
procedural and uh you know more about

10
00:00:40,719 --> 00:00:43,920
some methods and whatnot um typically

11
00:00:43,920 --> 00:00:45,760
the talks i do have a lot of

12
00:00:45,760 --> 00:00:48,640
you know beeps and boops and bits and

13
00:00:48,640 --> 00:00:52,559
bobs and flashy things to show people

14
00:00:53,039 --> 00:00:56,079
and applying uh

15
00:00:56,079 --> 00:00:59,520
you know cool practice uh all right so

16
00:00:59,520 --> 00:01:01,359
to kind of level set and get some

17
00:01:01,359 --> 00:01:03,520
assumptions out of the way here

18
00:01:03,520 --> 00:01:06,560
um not a mind reader so i might talk

19
00:01:06,560 --> 00:01:08,000
about some things that you might already

20
00:01:08,000 --> 00:01:08,640
know

21
00:01:08,640 --> 00:01:11,280
some things that you don't um and if

22
00:01:11,280 --> 00:01:12,640
you're one of those types that

23
00:01:12,640 --> 00:01:13,920
that kind of gets annoyed when people

24
00:01:13,920 --> 00:01:15,200
talk about what you know sorry about

25
00:01:15,200 --> 00:01:16,000
that

26
00:01:16,000 --> 00:01:18,400
uh but stay tuned because i i think i'll

27
00:01:18,400 --> 00:01:20,080
talk about some interesting things here

28
00:01:20,080 --> 00:01:22,720
um the next assumption i'm gonna make is

29
00:01:22,720 --> 00:01:23,360
that

30
00:01:23,360 --> 00:01:26,159
the entire audience will not all know

31
00:01:26,159 --> 00:01:27,439
what fuzz testing is

32
00:01:27,439 --> 00:01:29,520
or you know the depth of knowledge may

33
00:01:29,520 --> 00:01:30,479
vary

34
00:01:30,479 --> 00:01:33,840
uh and also that the audience will not

35
00:01:33,840 --> 00:01:38,000
know what first principles thinking is

36
00:01:38,079 --> 00:01:41,119
and i feel based on what i see on

37
00:01:41,119 --> 00:01:43,040
linkedin this is the case

38
00:01:43,040 --> 00:01:46,320
just in general um and then i will make

39
00:01:46,320 --> 00:01:47,600
the assumption that the audience does

40
00:01:47,600 --> 00:01:49,520
have some knowledge of cyber security

41
00:01:49,520 --> 00:01:50,320
and programming

42
00:01:50,320 --> 00:01:52,840
that's why we're all here at uh

43
00:01:52,840 --> 00:01:54,159
carolinacon

44
00:01:54,159 --> 00:01:58,159
all right so to get started here

45
00:01:58,159 --> 00:02:02,159
over the uh the agenda or the

46
00:02:02,159 --> 00:02:05,920
agenda as they say in canada i think

47
00:02:05,920 --> 00:02:08,878
um a quick intro about me going to talk

48
00:02:08,878 --> 00:02:10,080
about fuzz testing

49
00:02:10,080 --> 00:02:12,319
um covering what it is why you would do

50
00:02:12,319 --> 00:02:13,520
it you know

51
00:02:13,520 --> 00:02:16,400
uh first principle thinking kind of a

52
00:02:16,400 --> 00:02:17,920
crash course intro to that

53
00:02:17,920 --> 00:02:20,239
at a very high level uh just enough to

54
00:02:20,239 --> 00:02:22,080
kind of consume what it is

55
00:02:22,080 --> 00:02:25,040
um do some story time about where i

56
00:02:25,040 --> 00:02:25,760
applied

57
00:02:25,760 --> 00:02:28,000
ftp you know model of framework of

58
00:02:28,000 --> 00:02:29,520
thinking to fuzzing and then i'll talk

59
00:02:29,520 --> 00:02:29,920
about

60
00:02:29,920 --> 00:02:32,239
a paper i wrote that contains a

61
00:02:32,239 --> 00:02:33,519
framework that hopefully

62
00:02:33,519 --> 00:02:36,560
helps you all to do the same

63
00:02:36,560 --> 00:02:39,680
okay um first off uh

64
00:02:39,680 --> 00:02:42,319
about me uh i'm the chief executive

65
00:02:42,319 --> 00:02:44,959
officer for a secure networking provider

66
00:02:44,959 --> 00:02:48,080
um i've uh uh

67
00:02:48,080 --> 00:02:50,400
saturated my career with many different

68
00:02:50,400 --> 00:02:51,280
roles

69
00:02:51,280 --> 00:02:54,000
and responsibilities to cover red blue

70
00:02:54,000 --> 00:02:55,680
purple team

71
00:02:55,680 --> 00:02:57,440
zoom purple team before that was i think

72
00:02:57,440 --> 00:02:59,120
really quite a thing i think that's more

73
00:02:59,120 --> 00:03:00,720
of a recent thing but

74
00:03:00,720 --> 00:03:04,400
um and then you can just google or go to

75
00:03:04,400 --> 00:03:05,200
my website

76
00:03:05,200 --> 00:03:08,480
um i've done enough talks to where i've

77
00:03:08,480 --> 00:03:09,920
gotten kind of tired of putting this

78
00:03:09,920 --> 00:03:12,159
huge slide about myself so

79
00:03:12,159 --> 00:03:14,640
just uh check my website out and uh you

80
00:03:14,640 --> 00:03:15,200
know

81
00:03:15,200 --> 00:03:19,200
go from there um

82
00:03:19,200 --> 00:03:22,879
what is fuzz testing so fuzz testing

83
00:03:22,879 --> 00:03:26,319
generally put uh it's discovering bugs

84
00:03:26,319 --> 00:03:30,560
in software utilities by providing uh

85
00:03:30,560 --> 00:03:32,799
random or unexpected inputs into the

86
00:03:32,799 --> 00:03:34,400
programs

87
00:03:34,400 --> 00:03:37,120
that you're testing to find test cases

88
00:03:37,120 --> 00:03:37,760
that will

89
00:03:37,760 --> 00:03:41,200
cause a crash

90
00:03:41,440 --> 00:03:43,599
there are a lot of different definitions

91
00:03:43,599 --> 00:03:45,360
out there

92
00:03:45,360 --> 00:03:46,879
and i mean that more from a kind of

93
00:03:46,879 --> 00:03:49,040
marketing perspective

94
00:03:49,040 --> 00:03:52,080
i've seen many organizations uh

95
00:03:52,080 --> 00:03:53,760
claim to do fuss testing and maybe they

96
00:03:53,760 --> 00:03:55,920
do a facet of it or their definition of

97
00:03:55,920 --> 00:03:57,439
fuss testing

98
00:03:57,439 --> 00:04:01,360
is something a good bit different

99
00:04:01,360 --> 00:04:05,280
um then uh what you would you know get

100
00:04:05,280 --> 00:04:06,000
from

101
00:04:06,000 --> 00:04:07,519
barton miller's paper which we'll talk

102
00:04:07,519 --> 00:04:10,159
about in a in a few minutes here

103
00:04:10,159 --> 00:04:12,159
um so i've got a couple of definitions

104
00:04:12,159 --> 00:04:14,000
here i've got the

105
00:04:14,000 --> 00:04:19,040
one from ieee which is um

106
00:04:19,358 --> 00:04:21,600
the degree to which a system or

107
00:04:21,600 --> 00:04:22,960
component can function

108
00:04:22,960 --> 00:04:25,199
correctly in the presence of invalid

109
00:04:25,199 --> 00:04:27,280
inputs or stressful environmental

110
00:04:27,280 --> 00:04:29,120
conditions

111
00:04:29,120 --> 00:04:32,400
i like that definition now the one thing

112
00:04:32,400 --> 00:04:33,759
i i do want to say

113
00:04:33,759 --> 00:04:36,320
which is a personal preference is fuss

114
00:04:36,320 --> 00:04:39,280
testing is often

115
00:04:40,000 --> 00:04:41,440
one of the things about it is that

116
00:04:41,440 --> 00:04:43,520
people say you can determine

117
00:04:43,520 --> 00:04:45,280
you know kind of like a stress testing

118
00:04:45,280 --> 00:04:46,800
how what's the threshold of load that

119
00:04:46,800 --> 00:04:48,479
your utility or program can run until it

120
00:04:48,479 --> 00:04:49,680
crashes

121
00:04:49,680 --> 00:04:53,040
um i actually like to handle the uh

122
00:04:53,040 --> 00:04:56,320
stress testing separately uh

123
00:04:56,320 --> 00:04:59,520
typically before actually doing the

124
00:04:59,520 --> 00:05:02,800
quote-unquote fuzzing um and that's just

125
00:05:02,800 --> 00:05:05,199
so that i know what my threshold is

126
00:05:05,199 --> 00:05:07,440
so like if i send something like you

127
00:05:07,440 --> 00:05:08,720
know uh

128
00:05:08,720 --> 00:05:11,120
2000 packets a second and it crashes in

129
00:05:11,120 --> 00:05:12,400
two seconds

130
00:05:12,400 --> 00:05:14,560
i've got a pretty good left to right

131
00:05:14,560 --> 00:05:16,400
limit of what i can stuff into

132
00:05:16,400 --> 00:05:20,560
my um uh iterations as far as like fuzz

133
00:05:20,560 --> 00:05:21,520
runs and whatnot

134
00:05:21,520 --> 00:05:24,560
anyways um a bit of a tangent but uh yes

135
00:05:24,560 --> 00:05:25,840
in the next one

136
00:05:25,840 --> 00:05:28,639
um fuzz testing is varying levels both

137
00:05:28,639 --> 00:05:30,479
the science and art i truly do believe

138
00:05:30,479 --> 00:05:32,240
that that's why i quoted it

139
00:05:32,240 --> 00:05:34,400
uh essentially it's the act of producing

140
00:05:34,400 --> 00:05:35,919
unexpected outputs

141
00:05:35,919 --> 00:05:38,400
by providing unexpected inputs and

142
00:05:38,400 --> 00:05:38,960
everything

143
00:05:38,960 --> 00:05:41,280
else from there is situational and

144
00:05:41,280 --> 00:05:42,960
that's by me and that's my definition

145
00:05:42,960 --> 00:05:44,320
you can quote me on that

146
00:05:44,320 --> 00:05:47,600
um and the that last sentence is very

147
00:05:47,600 --> 00:05:48,240
important

148
00:05:48,240 --> 00:05:50,320
everything else is situational or

149
00:05:50,320 --> 00:05:52,080
everything else from there situational

150
00:05:52,080 --> 00:05:55,280
um fuss testing it's an art in the fact

151
00:05:55,280 --> 00:05:56,000
that you've got

152
00:05:56,000 --> 00:05:58,479
to kind of be artistic in the way that

153
00:05:58,479 --> 00:06:00,240
you apply it to

154
00:06:00,240 --> 00:06:01,840
varying targets and systems that you

155
00:06:01,840 --> 00:06:03,680
might be testing um

156
00:06:03,680 --> 00:06:05,600
and hence the situational portion of

157
00:06:05,600 --> 00:06:08,400
that um

158
00:06:08,400 --> 00:06:12,560
moving on purpose is to find bugs

159
00:06:12,560 --> 00:06:16,479
assertion failures memory leaks

160
00:06:16,479 --> 00:06:20,000
trying to make a target

161
00:06:20,000 --> 00:06:23,600
crash or uh being able to

162
00:06:23,600 --> 00:06:27,039
uh uh

163
00:06:27,039 --> 00:06:30,080
identify any invalid inputs that you can

164
00:06:30,080 --> 00:06:30,560
actually

165
00:06:30,560 --> 00:06:32,639
enter and the invalid input part is

166
00:06:32,639 --> 00:06:34,319
pretty important because

167
00:06:34,319 --> 00:06:38,080
um certain systems might be

168
00:06:38,080 --> 00:06:39,120
certain systems that you might be

169
00:06:39,120 --> 00:06:41,600
testing might be vulnerable to something

170
00:06:41,600 --> 00:06:43,039
like remote command injection or

171
00:06:43,039 --> 00:06:44,560
something remote command execution that

172
00:06:44,560 --> 00:06:46,800
kind of

173
00:06:47,199 --> 00:06:49,280
it prevents certain things from

174
00:06:49,280 --> 00:06:50,479
happening

175
00:06:50,479 --> 00:06:54,080
um and yeah crashes is a is a big one

176
00:06:54,080 --> 00:06:55,440
too because

177
00:06:55,440 --> 00:06:57,440
sometimes you can provide input to a

178
00:06:57,440 --> 00:06:58,639
program or utility

179
00:06:58,639 --> 00:07:02,000
and it's not expecting that format

180
00:07:02,000 --> 00:07:05,919
and it will just it'll just hang

181
00:07:06,560 --> 00:07:09,840
all right so moving on

182
00:07:10,080 --> 00:07:14,319
so uh still on what is fuss testing

183
00:07:14,319 --> 00:07:17,599
i'm just kind of in a nutshell

184
00:07:17,599 --> 00:07:20,560
generate random inputs uh having a a

185
00:07:20,560 --> 00:07:22,400
program or a way to interact with that

186
00:07:22,400 --> 00:07:23,759
device under test

187
00:07:23,759 --> 00:07:26,160
so however you're crafting your session

188
00:07:26,160 --> 00:07:27,199
um

189
00:07:27,199 --> 00:07:28,960
be a browser could be a script could be

190
00:07:28,960 --> 00:07:30,479
an api you know

191
00:07:30,479 --> 00:07:33,280
uh and identifying the strings of what

192
00:07:33,280 --> 00:07:34,080
is

193
00:07:34,080 --> 00:07:37,440
uh causing your device to crash or hang

194
00:07:37,440 --> 00:07:42,840
or generate uh kind of the unexpected

195
00:07:42,840 --> 00:07:44,479
output

196
00:07:44,479 --> 00:07:48,479
who created this method so

197
00:07:49,520 --> 00:07:53,120
in in late 80s here uh barton miller

198
00:07:53,120 --> 00:07:55,039
was a programmer and professor at

199
00:07:55,039 --> 00:07:57,039
university of wisconsin

200
00:07:57,039 --> 00:08:00,560
and he had this kind of interesting uh

201
00:08:00,560 --> 00:08:03,919
revelation where i say i say revelation

202
00:08:03,919 --> 00:08:05,680
uh you say at the time you know you

203
00:08:05,680 --> 00:08:07,199
wouldn't classify that but now

204
00:08:07,199 --> 00:08:09,280
as someone who's tested a lot say it's

205
00:08:09,280 --> 00:08:12,800
very important discovery um

206
00:08:12,800 --> 00:08:15,280
while he was working on the terminal on

207
00:08:15,280 --> 00:08:17,199
his workstation which was connected to a

208
00:08:17,199 --> 00:08:18,240
dial-up modem

209
00:08:18,240 --> 00:08:21,520
during a a rainstorm uh

210
00:08:21,520 --> 00:08:23,440
every now and again he was getting kind

211
00:08:23,440 --> 00:08:24,560
of uh

212
00:08:24,560 --> 00:08:26,560
you know garbled gibberish stuff on his

213
00:08:26,560 --> 00:08:28,720
command line while he was typing

214
00:08:28,720 --> 00:08:31,599
and um it kind of became this game of

215
00:08:31,599 --> 00:08:32,719
trying to

216
00:08:32,719 --> 00:08:36,640
input and uh run coherent commands

217
00:08:36,640 --> 00:08:39,200
before these random strings would render

218
00:08:39,200 --> 00:08:40,320
his commands

219
00:08:40,320 --> 00:08:44,159
uh you know incoherent

220
00:08:44,159 --> 00:08:47,120
and so the kind of light bulb went off

221
00:08:47,120 --> 00:08:47,760
there

222
00:08:47,760 --> 00:08:51,200
um that you know

223
00:08:51,200 --> 00:08:52,959
these things are causing his utilities

224
00:08:52,959 --> 00:08:54,320
and his programs to crash that he was

225
00:08:54,320 --> 00:08:55,839
working on

226
00:08:55,839 --> 00:08:57,600
and that was kind of a light bulb that

227
00:08:57,600 --> 00:08:59,839
that that kind of drove him to work on

228
00:08:59,839 --> 00:09:02,080
this paper called an empirical study

229
00:09:02,080 --> 00:09:04,000
of the reliability of linux or sorry

230
00:09:04,000 --> 00:09:06,320
unix utilities

231
00:09:06,320 --> 00:09:08,080
google that it's really good you can

232
00:09:08,080 --> 00:09:10,160
find the pdf pretty pretty easily

233
00:09:10,160 --> 00:09:12,560
uh so yeah basically this programmer was

234
00:09:12,560 --> 00:09:14,080
sitting down and realized that random

235
00:09:14,080 --> 00:09:15,440
characters were happening during a

236
00:09:15,440 --> 00:09:16,240
rainstorm

237
00:09:16,240 --> 00:09:19,200
and the incoherent inputs were making

238
00:09:19,200 --> 00:09:23,839
his utilities fail

239
00:09:24,560 --> 00:09:27,040
okay why would you fuzz test uh whenever

240
00:09:27,040 --> 00:09:27,680
you have

241
00:09:27,680 --> 00:09:30,800
anything that has interfaces to the

242
00:09:30,800 --> 00:09:32,640
world or two users or whatever

243
00:09:32,640 --> 00:09:35,200
you're expanding your attack surface

244
00:09:35,200 --> 00:09:35,680
right

245
00:09:35,680 --> 00:09:36,800
so if you're looking at it from a threat

246
00:09:36,800 --> 00:09:38,480
modeling perspective and you're looking

247
00:09:38,480 --> 00:09:40,000
at a web application

248
00:09:40,000 --> 00:09:43,200
you you know very very uh

249
00:09:43,200 --> 00:09:44,800
high level here it's like hey i've got a

250
00:09:44,800 --> 00:09:47,120
web app i'm running web sockets i've got

251
00:09:47,120 --> 00:09:49,279
api and i've got an input form right

252
00:09:49,279 --> 00:09:52,880
it's super simple um so

253
00:09:52,880 --> 00:09:56,560
you fuzz test uh whenever you have

254
00:09:56,560 --> 00:09:58,880
or why to fuzz test is that anything

255
00:09:58,880 --> 00:10:02,000
that has inputs

256
00:10:02,079 --> 00:10:03,200
there's a potential it could be

257
00:10:03,200 --> 00:10:05,839
compromised um maybe you didn't properly

258
00:10:05,839 --> 00:10:07,360
do input validation on the backend or

259
00:10:07,360 --> 00:10:08,880
maybe you only did it on the front end

260
00:10:08,880 --> 00:10:10,480
storing front-end values where on the

261
00:10:10,480 --> 00:10:12,079
back end it just processes whatever the

262
00:10:12,079 --> 00:10:14,000
front-end sends it you know

263
00:10:14,000 --> 00:10:17,519
um it's a way to understand

264
00:10:17,519 --> 00:10:19,519
all the unknown things and and faults in

265
00:10:19,519 --> 00:10:22,079
your attack surface that's

266
00:10:22,079 --> 00:10:23,279
pretty much it that's why i want to do

267
00:10:23,279 --> 00:10:24,399
it if you want to test these things and

268
00:10:24,399 --> 00:10:26,000
you'd want to test these things

269
00:10:26,000 --> 00:10:27,360
if you have any inputs if you have any

270
00:10:27,360 --> 00:10:29,920
way to interface with the outside world

271
00:10:29,920 --> 00:10:33,920
you can interact with it um

272
00:10:33,920 --> 00:10:36,959
uh when to fuzz test uh i say early

273
00:10:36,959 --> 00:10:38,320
often and a lot

274
00:10:38,320 --> 00:10:41,920
do it as much as you can um

275
00:10:41,920 --> 00:10:45,680
at previous positions i would manage

276
00:10:45,680 --> 00:10:48,240
some vulnerability management practices

277
00:10:48,240 --> 00:10:48,880
for

278
00:10:48,880 --> 00:10:52,880
uh automotive oems and they would uh

279
00:10:52,880 --> 00:10:54,800
essentially have these fuzz tests

280
00:10:54,800 --> 00:10:56,800
running on their diagnostics

281
00:10:56,800 --> 00:11:01,680
their diagnostic tools um every day

282
00:11:01,680 --> 00:11:04,000
every day and they'd have uh every time

283
00:11:04,000 --> 00:11:05,680
a change was made to that code there'd

284
00:11:05,680 --> 00:11:07,839
be more testing etc etc

285
00:11:07,839 --> 00:11:09,920
uh so i'd say build it into your devops

286
00:11:09,920 --> 00:11:12,240
practices and i put the term devsecops

287
00:11:12,240 --> 00:11:14,399
in there which is a bit of a cringe term

288
00:11:14,399 --> 00:11:17,760
um because uh well at least

289
00:11:17,760 --> 00:11:20,880
in in my opinion it should be just

290
00:11:20,880 --> 00:11:22,560
devops you're just adding a new piece to

291
00:11:22,560 --> 00:11:24,560
devops um

292
00:11:24,560 --> 00:11:26,160
and there's a whole separate tangent

293
00:11:26,160 --> 00:11:28,240
that we can go on regarding devsecops

294
00:11:28,240 --> 00:11:29,279
and all that stuff and what you should

295
00:11:29,279 --> 00:11:30,880
be putting in devops but

296
00:11:30,880 --> 00:11:33,600
um you know fuzz testing it really

297
00:11:33,600 --> 00:11:35,279
should be something that's done a lot

298
00:11:35,279 --> 00:11:38,160
but uh maybe having situational changes

299
00:11:38,160 --> 00:11:39,200
based on whatever

300
00:11:39,200 --> 00:11:41,200
you know gates or milestones in your

301
00:11:41,200 --> 00:11:43,519
devops cycle

302
00:11:43,519 --> 00:11:45,200
if you're a tester then you want to test

303
00:11:45,200 --> 00:11:46,959
it

304
00:11:46,959 --> 00:11:48,880
pretty much it's just like i said uh if

305
00:11:48,880 --> 00:11:50,560
you have a target that accepts inputs

306
00:11:50,560 --> 00:11:52,959
and that can be informational uh

307
00:11:52,959 --> 00:11:54,079
programmatic

308
00:11:54,079 --> 00:11:57,360
i put um sorry i just realized this

309
00:11:57,360 --> 00:11:59,040
mouse is in the center of the screen

310
00:11:59,040 --> 00:12:02,079
uh i put um

311
00:12:02,079 --> 00:12:05,200
etc at the la as the last items here

312
00:12:05,200 --> 00:12:06,720
because uh there are gonna be things

313
00:12:06,720 --> 00:12:09,279
that i miss that as this isn't a super

314
00:12:09,279 --> 00:12:10,560
technical discussion

315
00:12:10,560 --> 00:12:12,880
i don't really care about that so um if

316
00:12:12,880 --> 00:12:14,320
i'm missing something just put it under

317
00:12:14,320 --> 00:12:18,480
etc so i can't be chastised for it

318
00:12:20,079 --> 00:12:22,480
how to fuzz test uh it's gonna come up

319
00:12:22,480 --> 00:12:25,200
later but

320
00:12:27,040 --> 00:12:29,839
yeah let's carry on here all right so

321
00:12:29,839 --> 00:12:31,519
moving on to first principles thinking

322
00:12:31,519 --> 00:12:32,880
uh it's probably a term

323
00:12:32,880 --> 00:12:36,560
that's been

324
00:12:36,560 --> 00:12:38,880
a lot more prevalent on people's minds

325
00:12:38,880 --> 00:12:42,000
the past few years at least

326
00:12:42,079 --> 00:12:44,000
with like many entrepreneurs telling

327
00:12:44,000 --> 00:12:45,200
their super

328
00:12:45,200 --> 00:12:48,480
secret sauce business acumen secrets and

329
00:12:48,480 --> 00:12:49,519
stuff but

330
00:12:49,519 --> 00:12:52,639
um yeah so first principles thinking

331
00:12:52,639 --> 00:12:54,720
also known by reasoning uh as reasoning

332
00:12:54,720 --> 00:12:55,839
by first principles

333
00:12:55,839 --> 00:12:58,959
and it's really a thought model that

334
00:12:58,959 --> 00:13:02,720
you when you're faced with uh

335
00:13:02,720 --> 00:13:04,800
problems of varying complexities the

336
00:13:04,800 --> 00:13:06,160
idea is that you just

337
00:13:06,160 --> 00:13:07,920
break the problems down into the very

338
00:13:07,920 --> 00:13:10,639
core constituents to the core truths

339
00:13:10,639 --> 00:13:13,600
and then you re make them from the

340
00:13:13,600 --> 00:13:14,320
ground up

341
00:13:14,320 --> 00:13:16,240
that way you're building an

342
00:13:16,240 --> 00:13:18,399
understanding of each piece and layer

343
00:13:18,399 --> 00:13:20,000
that you're building up

344
00:13:20,000 --> 00:13:21,680
uh so when you do that that kind of

345
00:13:21,680 --> 00:13:24,800
allows you to uh

346
00:13:24,800 --> 00:13:26,399
build your own personal knowledge base

347
00:13:26,399 --> 00:13:27,839
and understanding

348
00:13:27,839 --> 00:13:31,040
allowing you to kind of uh create the

349
00:13:31,040 --> 00:13:32,839
most

350
00:13:32,839 --> 00:13:35,519
uh

351
00:13:35,519 --> 00:13:39,199
be the best built for purpose solution

352
00:13:39,199 --> 00:13:41,680
uh meaning you if you employ this kind

353
00:13:41,680 --> 00:13:43,839
of framework when faced with something

354
00:13:43,839 --> 00:13:47,519
you know complicated you're likely to

355
00:13:47,519 --> 00:13:50,160
uh produce a very built for purpose

356
00:13:50,160 --> 00:13:51,120
purpose-built

357
00:13:51,120 --> 00:13:54,639
uh solution for it and that's opposed to

358
00:13:54,639 --> 00:13:59,120
uh reasoning by analogy which um

359
00:13:59,279 --> 00:14:03,040
uh this is my it's a low resolution way

360
00:14:03,040 --> 00:14:04,720
of thinking that limits you to building

361
00:14:04,720 --> 00:14:06,720
knowledge bases and solutions based on

362
00:14:06,720 --> 00:14:08,639
prior assumptions beliefs and widely

363
00:14:08,639 --> 00:14:10,639
held quote unquote best practices

364
00:14:10,639 --> 00:14:13,120
approved by a majority of people

365
00:14:13,120 --> 00:14:16,160
um i typically do not uh

366
00:14:16,160 --> 00:14:18,320
subscribe to or condone this way of

367
00:14:18,320 --> 00:14:20,000
thinking however if you do

368
00:14:20,000 --> 00:14:23,199
work in spaces where uh

369
00:14:23,199 --> 00:14:26,720
you're beholden to uh regulations

370
00:14:26,720 --> 00:14:28,639
because you work with like the dod and

371
00:14:28,639 --> 00:14:29,360
they need you to be

372
00:14:29,360 --> 00:14:32,000
cmmc compliant by the end of i don't

373
00:14:32,000 --> 00:14:34,560
know 2024 or 25 or whatever

374
00:14:34,560 --> 00:14:37,600
or you're working in uh power and you've

375
00:14:37,600 --> 00:14:38,480
got to be

376
00:14:38,480 --> 00:14:43,600
nerc sip or if you've got a

377
00:14:43,600 --> 00:14:45,360
automotive oems and you have to adhere

378
00:14:45,360 --> 00:14:47,120
to tsax and unec

379
00:14:47,120 --> 00:14:50,720
wp29 those are fine because the client

380
00:14:50,720 --> 00:14:52,720
is saying that hey you've got to adhere

381
00:14:52,720 --> 00:14:54,480
to this or the government or whatever

382
00:14:54,480 --> 00:14:54,959
i'm not

383
00:14:54,959 --> 00:14:57,440
talking about that because there will be

384
00:14:57,440 --> 00:14:58,880
problem sets

385
00:14:58,880 --> 00:15:01,199
within that that will be complex and

386
00:15:01,199 --> 00:15:04,000
require creative problem solving

387
00:15:04,000 --> 00:15:07,920
um but uh i i say this because it's

388
00:15:07,920 --> 00:15:10,560
very typical for us to just google a way

389
00:15:10,560 --> 00:15:11,600
of doing something a little bit

390
00:15:11,600 --> 00:15:12,639
differently and then

391
00:15:12,639 --> 00:15:14,160
consume it and then change it barely

392
00:15:14,160 --> 00:15:16,160
without understanding

393
00:15:16,160 --> 00:15:18,720
um the constituents of that thing that

394
00:15:18,720 --> 00:15:20,240
we're copying

395
00:15:20,240 --> 00:15:23,120
so yeah i'm not a fan of that way of

396
00:15:23,120 --> 00:15:24,320
thinking

397
00:15:24,320 --> 00:15:26,000
but it's something that we all do in

398
00:15:26,000 --> 00:15:28,160
different ways and uh

399
00:15:28,160 --> 00:15:31,199
here is an illustration of the latter

400
00:15:31,199 --> 00:15:33,360
reasoning by analogy and uh the caption

401
00:15:33,360 --> 00:15:34,399
at the bottom says

402
00:15:34,399 --> 00:15:36,959
i don't know where i'm going but since

403
00:15:36,959 --> 00:15:39,680
everyone's here it's got to be good

404
00:15:39,680 --> 00:15:42,639
that's kind of playing a bit more on um

405
00:15:42,639 --> 00:15:43,519
chaldini's

406
00:15:43,519 --> 00:15:46,959
influential principle of uh

407
00:15:46,959 --> 00:15:49,600
uh what is it called a uh public proof

408
00:15:49,600 --> 00:15:50,240
or whatever

409
00:15:50,240 --> 00:15:53,120
um everybody else does it i'm gonna do

410
00:15:53,120 --> 00:15:54,160
it too it's like uh

411
00:15:54,160 --> 00:15:56,240
it's like a combination of social proof

412
00:15:56,240 --> 00:15:59,040
and the newest seventh principle of

413
00:15:59,040 --> 00:16:02,639
uh consensus uh anyways it's very easy

414
00:16:02,639 --> 00:16:03,839
to slip into

415
00:16:03,839 --> 00:16:07,040
so i put that here to illustrate that

416
00:16:07,040 --> 00:16:08,639
not everyone's walking off a cliff but

417
00:16:08,639 --> 00:16:10,240
it was kind of a funny image to

418
00:16:10,240 --> 00:16:12,800
not include

419
00:16:13,360 --> 00:16:16,560
uh and i

420
00:16:16,560 --> 00:16:19,680
for the purposes of kind of making it

421
00:16:19,680 --> 00:16:22,800
rather uh simple and and

422
00:16:22,800 --> 00:16:24,880
so that everyone can generally grasp it

423
00:16:24,880 --> 00:16:27,199
i i liked elon musk's take because he

424
00:16:27,199 --> 00:16:29,440
was asked this on an interview

425
00:16:29,440 --> 00:16:32,000
and he was able to give a very boiled

426
00:16:32,000 --> 00:16:33,279
down

427
00:16:33,279 --> 00:16:36,959
uh you know three steps on how he

428
00:16:36,959 --> 00:16:41,600
reasons by first principles and um

429
00:16:41,600 --> 00:16:44,399
uh so the three steps are identify and

430
00:16:44,399 --> 00:16:46,399
define your current assumptions

431
00:16:46,399 --> 00:16:48,800
uh so like that would be if i'm at the

432
00:16:48,800 --> 00:16:50,160
bottom of a staircase

433
00:16:50,160 --> 00:16:53,199
and i'm playing a game in which uh there

434
00:16:53,199 --> 00:16:55,279
are 10 stairs on the staircase

435
00:16:55,279 --> 00:16:57,680
and i'm only given five steps well then

436
00:16:57,680 --> 00:16:59,680
the assumption is i can only

437
00:16:59,680 --> 00:17:02,079
step five steps right break down the

438
00:17:02,079 --> 00:17:04,000
problem into its fundamental principles

439
00:17:04,000 --> 00:17:05,679
and you get into this weird

440
00:17:05,679 --> 00:17:07,359
tangential rabbit hole about how you

441
00:17:07,359 --> 00:17:08,959
walk on stairs and yada yada and you

442
00:17:08,959 --> 00:17:10,720
create new solutions from scratch would

443
00:17:10,720 --> 00:17:12,799
which would be just skip every stair

444
00:17:12,799 --> 00:17:15,839
that's a stupefied

445
00:17:15,839 --> 00:17:18,720
uh example of it but hopefully that kind

446
00:17:18,720 --> 00:17:19,119
of

447
00:17:19,119 --> 00:17:22,719
gets you to to where this will bring you

448
00:17:22,799 --> 00:17:26,000
so i'm gonna tell a story

449
00:17:26,000 --> 00:17:32,080
of how i applied this kind of uh

450
00:17:32,080 --> 00:17:35,280
mindset recently

451
00:17:35,600 --> 00:17:38,400
somewhat recently uh recently enough for

452
00:17:38,400 --> 00:17:39,280
me to

453
00:17:39,280 --> 00:17:41,280
uh write things about it and want to

454
00:17:41,280 --> 00:17:43,600
share it with everyone so

455
00:17:43,600 --> 00:17:46,000
um which means i have two bad reason

456
00:17:46,000 --> 00:17:47,360
enough in memory at least

457
00:17:47,360 --> 00:17:50,480
so uh

458
00:17:50,480 --> 00:17:53,520
last year i was leading

459
00:17:53,520 --> 00:17:57,120
a pen test

460
00:17:57,120 --> 00:18:00,320
for an industrial

461
00:18:00,320 --> 00:18:03,919
site and this industrial site had a few

462
00:18:03,919 --> 00:18:05,679
components to it

463
00:18:05,679 --> 00:18:08,640
um just to kind of keep things uh high

464
00:18:08,640 --> 00:18:10,160
level here i've got a

465
00:18:10,160 --> 00:18:14,000
simple diagram of uh there's engineering

466
00:18:14,000 --> 00:18:16,720
stations up here uh there so for those

467
00:18:16,720 --> 00:18:18,400
of you that don't know this is uh

468
00:18:18,400 --> 00:18:19,840
kind of like an industrial site and

469
00:18:19,840 --> 00:18:21,919
industrial sites have somewhat different

470
00:18:21,919 --> 00:18:22,720
technology

471
00:18:22,720 --> 00:18:24,880
it's called uh ics or industrial control

472
00:18:24,880 --> 00:18:26,000
systems

473
00:18:26,000 --> 00:18:30,240
which are basically uh

474
00:18:30,240 --> 00:18:31,440
a lot of these little ruggedized

475
00:18:31,440 --> 00:18:34,880
computers uh that dictate the action and

476
00:18:34,880 --> 00:18:36,880
flow of like physical things in the real

477
00:18:36,880 --> 00:18:38,400
world so

478
00:18:38,400 --> 00:18:42,400
like water power transportation um

479
00:18:42,400 --> 00:18:45,360
traffic lights uh trains planes

480
00:18:45,360 --> 00:18:46,640
automobiles even

481
00:18:46,640 --> 00:18:48,559
well it's a little bit different in cars

482
00:18:48,559 --> 00:18:49,760
but uh

483
00:18:49,760 --> 00:18:51,440
manufacturing pharmaceutical

484
00:18:51,440 --> 00:18:53,280
manufacturing uh

485
00:18:53,280 --> 00:18:55,120
you know power plants well whatever you

486
00:18:55,120 --> 00:18:56,559
name it um anything that's got a

487
00:18:56,559 --> 00:18:58,320
physical reaction the real world

488
00:18:58,320 --> 00:19:01,200
has some sort of controller that has

489
00:19:01,200 --> 00:19:02,240
agency over that

490
00:19:02,240 --> 00:19:05,520
real world device and so i was

491
00:19:05,520 --> 00:19:08,880
uh doing some testing for something like

492
00:19:08,880 --> 00:19:10,080
this uh

493
00:19:10,080 --> 00:19:12,799
and it was for these uh kind of like

494
00:19:12,799 --> 00:19:14,080
street cars right

495
00:19:14,080 --> 00:19:16,480
um you might have i'm sure everybody

496
00:19:16,480 --> 00:19:18,160
knows what a street car is but for those

497
00:19:18,160 --> 00:19:19,200
that don't it's like public

498
00:19:19,200 --> 00:19:20,880
transportation system that's uh

499
00:19:20,880 --> 00:19:24,480
on the ground level for the most part um

500
00:19:24,480 --> 00:19:28,480
and so the uh the target plc

501
00:19:28,480 --> 00:19:30,640
uh was actually an rtu which is a remote

502
00:19:30,640 --> 00:19:32,400
terminal unit which is uh

503
00:19:32,400 --> 00:19:34,000
if you've got like a remote engineering

504
00:19:34,000 --> 00:19:36,640
station and you have these things out in

505
00:19:36,640 --> 00:19:37,280
the field

506
00:19:37,280 --> 00:19:39,039
these things receive commands from the

507
00:19:39,039 --> 00:19:40,799
engineers and whatnot and then

508
00:19:40,799 --> 00:19:44,320
these and relay all the different uh

509
00:19:44,320 --> 00:19:46,880
commands down to the different plc's

510
00:19:46,880 --> 00:19:47,520
that have

511
00:19:47,520 --> 00:19:50,000
agency over devices in the real world so

512
00:19:50,000 --> 00:19:52,640
our target was this to see in what ways

513
00:19:52,640 --> 00:19:53,840
this can get with

514
00:19:53,840 --> 00:19:56,880
and then you know do a pet do a

515
00:19:56,880 --> 00:20:01,120
 pen test uh so

516
00:20:01,120 --> 00:20:03,919
now getting a little bit deeper into it

517
00:20:03,919 --> 00:20:04,720
um

518
00:20:04,720 --> 00:20:08,080
this uh this particular plc was

519
00:20:08,080 --> 00:20:11,919
uh uh made is

520
00:20:11,919 --> 00:20:13,440
this isn't a vendor bash or anything

521
00:20:13,440 --> 00:20:15,600
this is just a case study here

522
00:20:15,600 --> 00:20:18,080
um this was uh i say that because

523
00:20:18,080 --> 00:20:18,960
whenever people

524
00:20:18,960 --> 00:20:20,559
say names of companies that can be

525
00:20:20,559 --> 00:20:22,159
misconstrued or misunderstood in

526
00:20:22,159 --> 00:20:25,360
a variety of ways this plc

527
00:20:25,360 --> 00:20:28,640
the rtu uh whoops

528
00:20:28,640 --> 00:20:32,080
uh was made by uh ge and the reason i'm

529
00:20:32,080 --> 00:20:33,240
just saying it's because i have port

530
00:20:33,240 --> 00:20:35,120
18245 here which you can just google

531
00:20:35,120 --> 00:20:36,559
that and see what it is

532
00:20:36,559 --> 00:20:39,600
um but uh yeah they make they make uh

533
00:20:39,600 --> 00:20:41,840
plcs uh ge stands for general electric

534
00:20:41,840 --> 00:20:42,720
for those that you

535
00:20:42,720 --> 00:20:46,400
don't know um and in the initial stages

536
00:20:46,400 --> 00:20:50,320
of the pen test uh we were

537
00:20:50,320 --> 00:20:53,200
uh scoping the fuzzing and very lightly

538
00:20:53,200 --> 00:20:53,600
put

539
00:20:53,600 --> 00:20:56,320
uh we already knew that port 502 was

540
00:20:56,320 --> 00:20:57,520
going to be their inactive which is the

541
00:20:57,520 --> 00:20:59,679
modbus protocol which is

542
00:20:59,679 --> 00:21:02,640
it's an industrial protocol um that a

543
00:21:02,640 --> 00:21:06,080
lot of plc's talk with

544
00:21:07,200 --> 00:21:09,520
talk over uh so we knew that was there

545
00:21:09,520 --> 00:21:11,280
that was accounted for we had a nice

546
00:21:11,280 --> 00:21:12,559
great big

547
00:21:12,559 --> 00:21:16,320
you know super shiny plan for that

548
00:21:16,320 --> 00:21:18,799
but when i got on site what i didn't

549
00:21:18,799 --> 00:21:19,679
know

550
00:21:19,679 --> 00:21:23,520
was that this

551
00:21:23,520 --> 00:21:26,559
was going to be active and would be

552
00:21:26,559 --> 00:21:27,039
running

553
00:21:27,039 --> 00:21:30,000
a proprietary protocol which we knew

554
00:21:30,000 --> 00:21:30,960
nothing about

555
00:21:30,960 --> 00:21:34,960
um and that 18245

556
00:21:34,960 --> 00:21:38,240
that is gesrtp or ge

557
00:21:38,240 --> 00:21:41,120
service real-time transport protocol and

558
00:21:41,120 --> 00:21:41,919
that is how

559
00:21:41,919 --> 00:21:47,440
engineering software so the people

560
00:21:48,799 --> 00:21:53,200
the people in here and the hmi

561
00:21:53,200 --> 00:21:54,880
which is stands for human machine

562
00:21:54,880 --> 00:21:56,559
interface which is this little flat

563
00:21:56,559 --> 00:21:58,480
screen that sits in front of a cabinet

564
00:21:58,480 --> 00:21:59,440
that you

565
00:21:59,440 --> 00:22:01,760
interface with this to tell your your

566
00:22:01,760 --> 00:22:02,480
target feels

567
00:22:02,480 --> 00:22:06,080
is what to do um

568
00:22:06,159 --> 00:22:09,440
gesotp is how these devices did that

569
00:22:09,440 --> 00:22:12,720
and um well

570
00:22:12,720 --> 00:22:16,480
that expanded um that expanded the scope

571
00:22:16,480 --> 00:22:17,039
that

572
00:22:17,039 --> 00:22:19,039
that you know expand the threat model

573
00:22:19,039 --> 00:22:20,480
there so we redid the threat model

574
00:22:20,480 --> 00:22:22,559
we looked at the scope for fuzzing now

575
00:22:22,559 --> 00:22:24,320
uh the srtp protocol

576
00:22:24,320 --> 00:22:29,200
is not public it's not well documented

577
00:22:29,280 --> 00:22:31,520
it's all proprietary so i had no idea

578
00:22:31,520 --> 00:22:32,720
what the hell i was doing

579
00:22:32,720 --> 00:22:36,080
uh at all with it which is exactly the

580
00:22:36,080 --> 00:22:36,960
place that i

581
00:22:36,960 --> 00:22:38,960
i like to be in it's not knowing what

582
00:22:38,960 --> 00:22:40,240
the hell i'm doing because

583
00:22:40,240 --> 00:22:42,720
uh i can you know start from zero and

584
00:22:42,720 --> 00:22:44,400
reason up from there

585
00:22:44,400 --> 00:22:48,880
so um what i did from there

586
00:22:48,880 --> 00:22:52,000
was uh i i used a lot of a framework

587
00:22:52,000 --> 00:22:54,400
called fluff that i wrote

588
00:22:54,400 --> 00:22:57,919
um which i will show here real quick

589
00:22:57,919 --> 00:23:00,720
okay so we're sticking a pin in this um

590
00:23:00,720 --> 00:23:02,240
i'm going to move over

591
00:23:02,240 --> 00:23:05,600
to the fluff documentation

592
00:23:05,600 --> 00:23:09,039
so i was working on a couple of fest uh

593
00:23:09,039 --> 00:23:11,360
uh fuss tests uh simultaneously and i

594
00:23:11,360 --> 00:23:13,039
realized there was a lot of similarities

595
00:23:13,039 --> 00:23:14,960
between them but i couldn't really find

596
00:23:14,960 --> 00:23:18,400
any industrial specific frameworks that

597
00:23:18,400 --> 00:23:19,919
would work with what i was trying to do

598
00:23:19,919 --> 00:23:22,320
but then i realized that hey this uh web

599
00:23:22,320 --> 00:23:24,240
application that i was doing websocket

600
00:23:24,240 --> 00:23:25,600
sub protocol fuzzing with

601
00:23:25,600 --> 00:23:28,000
uh i'm actually following some very

602
00:23:28,000 --> 00:23:28,640
similar

603
00:23:28,640 --> 00:23:30,400
high-end methodologies that i'm doing

604
00:23:30,400 --> 00:23:33,760
with this industrial control site here

605
00:23:33,760 --> 00:23:36,640
um so i wrote this framework called uh

606
00:23:36,640 --> 00:23:38,320
friendly and lightweight unified fuzzing

607
00:23:38,320 --> 00:23:39,120
framework

608
00:23:39,120 --> 00:23:40,960
uh you can get on my website i'll show

609
00:23:40,960 --> 00:23:42,799
you how in a bit

610
00:23:42,799 --> 00:23:46,159
um essentially what this is

611
00:23:46,159 --> 00:23:51,120
is uh it serves as kind of like um

612
00:23:51,120 --> 00:23:54,559
a stencil that i can take and i can just

613
00:23:54,559 --> 00:23:55,440
kind of just

614
00:23:55,440 --> 00:23:58,000
slap on whatever the hell i'm doing and

615
00:23:58,000 --> 00:24:00,559
i ought to be able to

616
00:24:00,559 --> 00:24:04,080
um rectify the situation and come up

617
00:24:04,080 --> 00:24:04,400
with

618
00:24:04,400 --> 00:24:07,520
a plan based on this um and

619
00:24:07,520 --> 00:24:10,000
the first principles thinking is kind of

620
00:24:10,000 --> 00:24:11,360
what brought me here

621
00:24:11,360 --> 00:24:15,039
uh so i used my own framework

622
00:24:15,039 --> 00:24:19,279
uh to uh solve this problem here

623
00:24:19,279 --> 00:24:23,120
so i had to do this from scratch

624
00:24:23,120 --> 00:24:25,039
uh i'll i'll go through through this

625
00:24:25,039 --> 00:24:27,440
real quick um

626
00:24:27,440 --> 00:24:30,799
so yeah again fuzz fluff

627
00:24:30,799 --> 00:24:33,520
it's a high-level framework on how to do

628
00:24:33,520 --> 00:24:34,799
fuzz testing if you don't know what the

629
00:24:34,799 --> 00:24:36,080
hell you're doing

630
00:24:36,080 --> 00:24:39,360
um which is me in a lot of cases uh then

631
00:24:39,360 --> 00:24:42,158
i talk about how

632
00:24:42,240 --> 00:24:44,960
here we go uh what fuzz testing is i

633
00:24:44,960 --> 00:24:46,799
talk about how fuzz testing is a pain in

634
00:24:46,799 --> 00:24:48,000
the ass

635
00:24:48,000 --> 00:24:49,679
um let's talk about the framework

636
00:24:49,679 --> 00:24:51,039
architecture

637
00:24:51,039 --> 00:24:54,320
so uh yeah so your session starting with

638
00:24:54,320 --> 00:24:55,679
session that that's how you

639
00:24:55,679 --> 00:24:58,799
interact with the uh

640
00:24:58,799 --> 00:25:01,039
uh with the target you're you're uh

641
00:25:01,039 --> 00:25:02,799
trying to fuzz

642
00:25:02,799 --> 00:25:05,919
um you want to have that situated so if

643
00:25:05,919 --> 00:25:07,600
it's a browser or an ide an app a

644
00:25:07,600 --> 00:25:10,559
uh function script whatever um actually

645
00:25:10,559 --> 00:25:12,480
let me scroll down here because i have a

646
00:25:12,480 --> 00:25:15,440
more flexible here we go so you can

647
00:25:15,440 --> 00:25:17,039
extend it just add whatever you want to

648
00:25:17,039 --> 00:25:17,360
it

649
00:25:17,360 --> 00:25:19,760
uh how you're collecting it whether it's

650
00:25:19,760 --> 00:25:20,559
uh you know

651
00:25:20,559 --> 00:25:23,600
you're collecting session captures um so

652
00:25:23,600 --> 00:25:25,039
you're proxying through something or if

653
00:25:25,039 --> 00:25:25,760
you're

654
00:25:25,760 --> 00:25:28,799
uh capturing actual packets

655
00:25:28,799 --> 00:25:32,400
and uh analyzing the data sent in those

656
00:25:32,400 --> 00:25:33,440
packets

657
00:25:33,440 --> 00:25:35,679
uh so you collect it you analyze it then

658
00:25:35,679 --> 00:25:37,679
you craft and then crafting can be a

659
00:25:37,679 --> 00:25:40,159
request packet input then you get into

660
00:25:40,159 --> 00:25:42,080
things like generational mutational

661
00:25:42,080 --> 00:25:44,000
block which i'll get into later

662
00:25:44,000 --> 00:25:45,600
and then you actually run the fuzz and

663
00:25:45,600 --> 00:25:47,440
monitor simultaneously

664
00:25:47,440 --> 00:25:51,440
uh and then you report so

665
00:25:51,440 --> 00:25:55,120
using this uh i realized that i

666
00:25:55,120 --> 00:25:56,559
i didn't because i didn't know what i

667
00:25:56,559 --> 00:25:58,320
was doing this is a protocol that was

668
00:25:58,320 --> 00:25:59,679
really undocumented didn't have any

669
00:25:59,679 --> 00:26:02,159
public documentation from the vendor

670
00:26:02,159 --> 00:26:04,320
um we'd have to get a bit creative and

671
00:26:04,320 --> 00:26:06,720
so uh

672
00:26:06,720 --> 00:26:08,240
we didn't have the session figured out

673
00:26:08,240 --> 00:26:10,000
just yet but we did have some engineers

674
00:26:10,000 --> 00:26:12,000
on site do some packet captures and we

675
00:26:12,000 --> 00:26:14,480
understood some things in the data

676
00:26:14,480 --> 00:26:18,559
um that allowed us to uh start

677
00:26:18,559 --> 00:26:22,159
generating uh test fuzz cases

678
00:26:22,159 --> 00:26:24,320
from there and then then i kind of

679
00:26:24,320 --> 00:26:25,279
stepped back into

680
00:26:25,279 --> 00:26:27,200
session and realized hey it might be a

681
00:26:27,200 --> 00:26:28,480
little bit easier if we make some kind

682
00:26:28,480 --> 00:26:30,480
of python automation to do this

683
00:26:30,480 --> 00:26:32,000
so we collected we analyzed and went

684
00:26:32,000 --> 00:26:33,919
back to session then i went to craft

685
00:26:33,919 --> 00:26:35,919
then i went to fuzz and and monitor and

686
00:26:35,919 --> 00:26:37,039
report

687
00:26:37,039 --> 00:26:39,279
and

688
00:26:41,039 --> 00:26:44,400
back to here uh so once

689
00:26:44,400 --> 00:26:47,600
we had all that stuff uh figured out um

690
00:26:47,600 --> 00:26:50,799
i ended up writing a a fuzzer that

691
00:26:50,799 --> 00:26:51,679
allowed

692
00:26:51,679 --> 00:26:54,799
me to fuzz gesrtp

693
00:26:54,799 --> 00:26:57,840
because it's uh because it's

694
00:26:57,840 --> 00:27:01,840
it's didn't exist so i've got the first

695
00:27:01,840 --> 00:27:05,120
uh the first of its kind gesrtp input

696
00:27:05,120 --> 00:27:06,240
fuzzer

697
00:27:06,240 --> 00:27:09,279
um which uh yeah so like after the fact

698
00:27:09,279 --> 00:27:10,159
we did actually

699
00:27:10,159 --> 00:27:14,000
end up finding uh some research

700
00:27:14,000 --> 00:27:17,440
um someone did do some

701
00:27:17,440 --> 00:27:20,240
like uh wireshark uh like pcapp and

702
00:27:20,240 --> 00:27:22,240
wireshark and then

703
00:27:22,240 --> 00:27:24,960
kind of uh identify based on different

704
00:27:24,960 --> 00:27:26,320
kinds of communications

705
00:27:26,320 --> 00:27:30,399
uh which bytes are the ones that change

706
00:27:30,399 --> 00:27:31,120
for

707
00:27:31,120 --> 00:27:35,039
for what uh and basically to to build

708
00:27:35,039 --> 00:27:36,080
out the commands

709
00:27:36,080 --> 00:27:38,559
and so i was able to take that and the

710
00:27:38,559 --> 00:27:39,840
research that we gathered from the

711
00:27:39,840 --> 00:27:41,600
engineers on site doing the pcaps that

712
00:27:41,600 --> 00:27:43,200
we were able to break down

713
00:27:43,200 --> 00:27:45,520
uh in combination with this to help us

714
00:27:45,520 --> 00:27:46,840
understand

715
00:27:46,840 --> 00:27:50,080
uh which bytes need to be changed to

716
00:27:50,080 --> 00:27:52,000
you know denote a certain type of

717
00:27:52,000 --> 00:27:53,279
command or

718
00:27:53,279 --> 00:27:56,080
information or whatever and then uh

719
00:27:56,080 --> 00:27:57,279
create a fuzzer in which

720
00:27:57,279 --> 00:28:00,799
really the input just look like this

721
00:28:01,600 --> 00:28:03,679
and so when you're talking srtp you've

722
00:28:03,679 --> 00:28:05,840
got to send it data that looks like this

723
00:28:05,840 --> 00:28:09,440
and then based on um the different uh

724
00:28:09,440 --> 00:28:11,200
bytes that change based off of the

725
00:28:11,200 --> 00:28:12,480
research here

726
00:28:12,480 --> 00:28:15,520
and what we're able to identify um

727
00:28:15,520 --> 00:28:17,760
we were able to do dumb fuzzing smart

728
00:28:17,760 --> 00:28:18,559
fuzzing

729
00:28:18,559 --> 00:28:20,640
uh so basically generational mutational

730
00:28:20,640 --> 00:28:21,600
and block based

731
00:28:21,600 --> 00:28:23,039
and then we've got some run put in here

732
00:28:23,039 --> 00:28:24,720
that lets you actually send it actual

733
00:28:24,720 --> 00:28:27,200
commands

734
00:28:27,840 --> 00:28:30,159
and there's some idiosyncrasies with it

735
00:28:30,159 --> 00:28:31,679
as well where you have to send it an

736
00:28:31,679 --> 00:28:33,120
initiator

737
00:28:33,120 --> 00:28:36,240
message before you send a command

738
00:28:36,240 --> 00:28:38,000
which isn't addressed in the research or

739
00:28:38,000 --> 00:28:40,960
anything other publicly so

740
00:28:40,960 --> 00:28:43,840
uh yeah so that's kind of it uh it's

741
00:28:43,840 --> 00:28:44,640
kind of it for

742
00:28:44,640 --> 00:28:46,720
for that and so the first principle is

743
00:28:46,720 --> 00:28:48,559
thinking and how it applies to this

744
00:28:48,559 --> 00:28:52,320
we'll visit that here um

745
00:28:52,320 --> 00:28:53,600
yeah i hope all that made sense if

746
00:28:53,600 --> 00:28:54,960
anybody has any questions please feel

747
00:28:54,960 --> 00:28:56,000
free to ask

748
00:28:56,000 --> 00:28:59,840
after um

749
00:29:00,080 --> 00:29:03,120
okay so first principles uh step one and

750
00:29:03,120 --> 00:29:03,440
the

751
00:29:03,440 --> 00:29:06,480
the the musk model if you will

752
00:29:06,480 --> 00:29:07,919
identify and define your current

753
00:29:07,919 --> 00:29:10,799
assumptions um

754
00:29:10,799 --> 00:29:14,000
in this scenario the assumption is

755
00:29:14,000 --> 00:29:17,760
i cannot fuzz this plc's srtp protocol

756
00:29:17,760 --> 00:29:19,520
since there are no fuzzing tools or

757
00:29:19,520 --> 00:29:21,760
documentation for it

758
00:29:21,760 --> 00:29:25,679
um i kinda went off on this one but i

759
00:29:25,679 --> 00:29:26,240
really don't

760
00:29:26,240 --> 00:29:28,240
i really don't like this this kind of uh

761
00:29:28,240 --> 00:29:30,320
um thought path here

762
00:29:30,320 --> 00:29:32,799
uh it's lazy low resolution cowardly

763
00:29:32,799 --> 00:29:33,600
subscription

764
00:29:33,600 --> 00:29:34,880
that standard and typical thinking will

765
00:29:34,880 --> 00:29:37,520
lead you to uh this assumption encases a

766
00:29:37,520 --> 00:29:38,960
certain sense of surrender that you

767
00:29:38,960 --> 00:29:40,559
should not have is the quote unquote

768
00:29:40,559 --> 00:29:42,080
hacker pen tester charged with the

769
00:29:42,080 --> 00:29:43,919
responsibility of testing systems with

770
00:29:43,919 --> 00:29:45,360
potentially life-threatening physical

771
00:29:45,360 --> 00:29:46,399
impact

772
00:29:46,399 --> 00:29:47,919
you don't want to stop there uh so we

773
00:29:47,919 --> 00:29:49,120
got to think our way around this but

774
00:29:49,120 --> 00:29:50,640
we've identified our assumption and

775
00:29:50,640 --> 00:29:51,919
that's the thing that has

776
00:29:51,919 --> 00:29:53,520
that's the brick wall in front of us

777
00:29:53,520 --> 00:29:55,279
that you you know

778
00:29:55,279 --> 00:29:58,159
you think you can't get through next

779
00:29:58,159 --> 00:30:00,080
break down the problem into its

780
00:30:00,080 --> 00:30:02,320
fundamental principles

781
00:30:02,320 --> 00:30:05,200
can't spell fundamental without fun and

782
00:30:05,200 --> 00:30:06,559
fun it is

783
00:30:06,559 --> 00:30:08,799
uh what would i need in order to fuzz

784
00:30:08,799 --> 00:30:10,399
this unknown protocol

785
00:30:10,399 --> 00:30:13,600
so basically taking our assumption um

786
00:30:13,600 --> 00:30:15,200
you can break it down to a series of

787
00:30:15,200 --> 00:30:16,960
questions or in this case i just flipped

788
00:30:16,960 --> 00:30:18,240
it on its head and said okay what would

789
00:30:18,240 --> 00:30:20,000
i need to do in order to do this

790
00:30:20,000 --> 00:30:22,000
uh you need to build understanding the

791
00:30:22,000 --> 00:30:23,200
protocol itself

792
00:30:23,200 --> 00:30:25,840
and then craft a way to actually act on

793
00:30:25,840 --> 00:30:26,240
our

794
00:30:26,240 --> 00:30:29,440
newfound understanding uh read research

795
00:30:29,440 --> 00:30:30,720
papers or articles

796
00:30:30,720 --> 00:30:33,520
i did that there was no formal uh no

797
00:30:33,520 --> 00:30:35,120
formal or vendor documentation that

798
00:30:35,120 --> 00:30:36,559
existed but there was that one paper

799
00:30:36,559 --> 00:30:37,600
that i found

800
00:30:37,600 --> 00:30:39,760
kind of later on which did help in

801
00:30:39,760 --> 00:30:41,840
retrospect for me to go back and

802
00:30:41,840 --> 00:30:45,200
um fix some stuff but and then do the

803
00:30:45,200 --> 00:30:46,240
technical research

804
00:30:46,240 --> 00:30:48,640
uh do your session and pcap analysis and

805
00:30:48,640 --> 00:30:49,919
have you know

806
00:30:49,919 --> 00:30:51,760
if you don't know something yourself

807
00:30:51,760 --> 00:30:53,440
have somebody on site there or someone

808
00:30:53,440 --> 00:30:54,799
that knows the application or test or

809
00:30:54,799 --> 00:30:55,679
device

810
00:30:55,679 --> 00:30:57,519
help you out do the session capture for

811
00:30:57,519 --> 00:30:59,360
you walk you through

812
00:30:59,360 --> 00:31:01,679
some of the processes in in this case it

813
00:31:01,679 --> 00:31:02,480
was basically

814
00:31:02,480 --> 00:31:05,519
just uh recording you know

815
00:31:05,519 --> 00:31:08,559
um which uh which bytes were

816
00:31:08,559 --> 00:31:10,000
moving as we were doing simple things

817
00:31:10,000 --> 00:31:12,159
like turn this on turn this off

818
00:31:12,159 --> 00:31:14,880
to change this to this you're trying to

819
00:31:14,880 --> 00:31:16,480
kind of feel your way around it kind of

820
00:31:16,480 --> 00:31:17,120
like you're

821
00:31:17,120 --> 00:31:19,039
in a dark room and there's a chair there

822
00:31:19,039 --> 00:31:20,159
but you don't know it's a chair so

823
00:31:20,159 --> 00:31:21,279
you're just kind of feeling around it to

824
00:31:21,279 --> 00:31:22,640
see what it is

825
00:31:22,640 --> 00:31:24,159
um and then craft a way to fuzz the

826
00:31:24,159 --> 00:31:26,320
protocol itself uh so you need

827
00:31:26,320 --> 00:31:28,320
an ability to craft varying fuzzing

828
00:31:28,320 --> 00:31:29,760
types

829
00:31:29,760 --> 00:31:33,600
um so there are three

830
00:31:33,600 --> 00:31:36,559
uh known ways of fuzzing there's

831
00:31:36,559 --> 00:31:38,000
probably some more that i'm missing here

832
00:31:38,000 --> 00:31:40,799
i forgot to put an etc in there

833
00:31:40,799 --> 00:31:44,080
but um there's a generation based which

834
00:31:44,080 --> 00:31:46,320
is a brand new input from scratch but

835
00:31:46,320 --> 00:31:48,080
based on a format

836
00:31:48,080 --> 00:31:52,080
um so like for example uh

837
00:31:52,640 --> 00:31:55,919
if you're if you've got a protocol

838
00:31:55,919 --> 00:31:59,279
that is uh you know the data you send it

839
00:31:59,279 --> 00:32:00,880
it's like 10 characters long it's in a

840
00:32:00,880 --> 00:32:02,000
certain format

841
00:32:02,000 --> 00:32:04,399
it's got certain kinds of characters you

842
00:32:04,399 --> 00:32:06,640
build that in but you randomize the

843
00:32:06,640 --> 00:32:08,320
things that change about it

844
00:32:08,320 --> 00:32:11,679
so the alphanumerics of it and uh maybe

845
00:32:11,679 --> 00:32:12,320
even

846
00:32:12,320 --> 00:32:14,480
uh some strange characters in there

847
00:32:14,480 --> 00:32:17,039
right then you have mutation based

848
00:32:17,039 --> 00:32:20,320
which is uh bit flipping but it's really

849
00:32:20,320 --> 00:32:23,279
it's really randomization uh taking in

850
00:32:23,279 --> 00:32:25,039
an input that was originally

851
00:32:25,039 --> 00:32:27,200
valid and then bastardizing into some

852
00:32:27,200 --> 00:32:28,960
weird perverted version of itself maybe

853
00:32:28,960 --> 00:32:30,240
with some uh

854
00:32:30,240 --> 00:32:32,399
some chinese or arabic characters in

855
00:32:32,399 --> 00:32:34,399
there or something right

856
00:32:34,399 --> 00:32:36,559
and there's block based which is uh

857
00:32:36,559 --> 00:32:38,000
identifying the parts

858
00:32:38,000 --> 00:32:41,840
of the uh taking a valve input

859
00:32:41,840 --> 00:32:43,840
knowing it does require some knowledge

860
00:32:43,840 --> 00:32:45,279
of the protocol because you're

861
00:32:45,279 --> 00:32:48,559
uh taking the inputs and i with knowing

862
00:32:48,559 --> 00:32:50,559
the protocol and knowing what changes in

863
00:32:50,559 --> 00:32:51,440
it

864
00:32:51,440 --> 00:32:54,559
um you're only doing fuzzing based on

865
00:32:54,559 --> 00:32:56,000
those particular sections that

866
00:32:56,000 --> 00:32:58,000
changed so like block buzz black based

867
00:32:58,000 --> 00:33:00,640
fuzzing was built into the srtp fuzzer

868
00:33:00,640 --> 00:33:02,320
uh because as we built to understand the

869
00:33:02,320 --> 00:33:03,679
protocol we were able to

870
00:33:03,679 --> 00:33:06,880
identify what parts changed and

871
00:33:06,880 --> 00:33:10,240
you know just go from there um

872
00:33:10,240 --> 00:33:13,440
then you need an ability to deliver that

873
00:33:13,440 --> 00:33:15,360
fuzz or apparently the ability to

874
00:33:15,360 --> 00:33:17,519
delivery which was a typo

875
00:33:17,519 --> 00:33:19,679
um but you you need a way to do that

876
00:33:19,679 --> 00:33:21,519
because nobody wants to hit enter on a

877
00:33:21,519 --> 00:33:23,440
keyboard like three million

878
00:33:23,440 --> 00:33:24,399
times that's

879
00:33:24,399 --> 00:33:28,080
not fun so you know automate that

880
00:33:28,399 --> 00:33:31,919
and step three create new solutions from

881
00:33:31,919 --> 00:33:32,799
scratch

882
00:33:32,799 --> 00:33:34,640
which is uh what i did with the fuzzing

883
00:33:34,640 --> 00:33:36,880
tool

884
00:33:36,880 --> 00:33:39,600
i said hey i'm really good in python i

885
00:33:39,600 --> 00:33:40,799
can do this

886
00:33:40,799 --> 00:33:44,559
 pretty quickly um

887
00:33:45,919 --> 00:33:49,360
most of the g e s rtp fuzzer like maybe

888
00:33:49,360 --> 00:33:51,360
more than two-thirds of it i actually

889
00:33:51,360 --> 00:33:53,760
programmed on site

890
00:33:53,760 --> 00:33:57,120
i programmed and tested on site and then

891
00:33:57,120 --> 00:34:00,720
other parts were like crafting a library

892
00:34:00,720 --> 00:34:02,640
for uh the different bytes and the

893
00:34:02,640 --> 00:34:04,559
inputs

894
00:34:04,559 --> 00:34:05,919
and making the classes for those and

895
00:34:05,919 --> 00:34:08,000
whatnot um

896
00:34:08,000 --> 00:34:11,440
and then i uh you know made sure that

897
00:34:11,440 --> 00:34:13,119
that python script was able to

898
00:34:13,119 --> 00:34:14,239
accommodate the

899
00:34:14,239 --> 00:34:15,520
you know some of the varying types of

900
00:34:15,520 --> 00:34:16,800
fuzzing that we would need in this

901
00:34:16,800 --> 00:34:18,399
scenario which would be generational

902
00:34:18,399 --> 00:34:21,839
mutational and block-based fuzzing

903
00:34:31,119 --> 00:34:35,359
um hold on here

904
00:34:35,359 --> 00:34:39,918
yeah so that is um uh

905
00:34:41,199 --> 00:34:44,239
that's uh pretty pretty much

906
00:34:44,239 --> 00:34:47,918
uh the the size of it uh

907
00:34:47,918 --> 00:34:51,520
so i and when i first worked on this i

908
00:34:51,520 --> 00:34:54,000
initially planned on going a bit more

909
00:34:54,000 --> 00:34:57,839
in depth into the fluff itself

910
00:34:57,839 --> 00:35:00,960
um i can do that again real quick um

911
00:35:00,960 --> 00:35:03,760
so going from top to bottom uh we've got

912
00:35:03,760 --> 00:35:05,440
session which is the means that you will

913
00:35:05,440 --> 00:35:06,320
communicate

914
00:35:06,320 --> 00:35:08,880
with it uh we've got collection so a way

915
00:35:08,880 --> 00:35:10,960
to generate session traffic that you can

916
00:35:10,960 --> 00:35:12,960
you know build cases against and then

917
00:35:12,960 --> 00:35:14,560
analyze it

918
00:35:14,560 --> 00:35:16,960
uh to understand what parts like here

919
00:35:16,960 --> 00:35:18,720
right here is just like uh

920
00:35:18,720 --> 00:35:21,599
a quick little um session capture from

921
00:35:21,599 --> 00:35:22,880
owasp's uh

922
00:35:22,880 --> 00:35:26,160
zap proxy uh which i use prolifically

923
00:35:26,160 --> 00:35:27,920
i typically always start with it just

924
00:35:27,920 --> 00:35:29,040
because i've been using it for a long

925
00:35:29,040 --> 00:35:31,520
time and it's second nature to me now

926
00:35:31,520 --> 00:35:34,320
uh and then crafting which is um i've

927
00:35:34,320 --> 00:35:36,160
got a quick little python script here

928
00:35:36,160 --> 00:35:38,960
python function here just a super simple

929
00:35:38,960 --> 00:35:39,839
you know

930
00:35:39,839 --> 00:35:41,280
i was i think i was trying to build this

931
00:35:41,280 --> 00:35:43,920
to show someone how to use verdamza um

932
00:35:43,920 --> 00:35:45,119
but if you ever want to work on

933
00:35:45,119 --> 00:35:46,720
mutational fuzzing

934
00:35:46,720 --> 00:35:48,400
radamsa is a really good way to go

935
00:35:48,400 --> 00:35:50,079
because it's it's a mutate it's

936
00:35:50,079 --> 00:35:52,079
basically an input mutation engine

937
00:35:52,079 --> 00:35:55,040
um just google radamza and um there's

938
00:35:55,040 --> 00:35:56,079
also python

939
00:35:56,079 --> 00:36:01,040
uh library two um pyra damso py radamsa

940
00:36:01,040 --> 00:36:02,960
uh and then fuzz and monitor at the same

941
00:36:02,960 --> 00:36:04,800
time so while you're executing your

942
00:36:04,800 --> 00:36:05,520
fuzzing

943
00:36:05,520 --> 00:36:07,760
it's good to uh have some kind of

944
00:36:07,760 --> 00:36:08,880
monitoring in place

945
00:36:08,880 --> 00:36:12,000
um so you can like here i've got the

946
00:36:12,000 --> 00:36:13,599
same script and i've got some very

947
00:36:13,599 --> 00:36:15,520
stupid simple monitoring which is not

948
00:36:15,520 --> 00:36:16,800
very good but just enough to kind of

949
00:36:16,800 --> 00:36:17,920
show that hey

950
00:36:17,920 --> 00:36:22,320
we're looking for you know uh

951
00:36:22,560 --> 00:36:25,599
like good uh valid requests

952
00:36:25,599 --> 00:36:28,480
versus not but um you typically want to

953
00:36:28,480 --> 00:36:30,160
go a bit deeper with this if you can

954
00:36:30,160 --> 00:36:32,160
uh if there's no way like if you're

955
00:36:32,160 --> 00:36:33,920
doing this kind of thing black box

956
00:36:33,920 --> 00:36:35,440
and you have the device in front of you

957
00:36:35,440 --> 00:36:36,880
and you don't have any way of actually

958
00:36:36,880 --> 00:36:38,800
accessing it to get any kind of feed to

959
00:36:38,800 --> 00:36:41,200
monitor from

960
00:36:41,200 --> 00:36:43,599
an oscilloscope is maybe not a bad way

961
00:36:43,599 --> 00:36:45,119
to go because

962
00:36:45,119 --> 00:36:47,280
you just kind of touch the contacts of

963
00:36:47,280 --> 00:36:48,320
the device or

964
00:36:48,320 --> 00:36:49,839
device or devices and you're just

965
00:36:49,839 --> 00:36:51,760
looking at the voltage amplitude

966
00:36:51,760 --> 00:36:54,800
so you know um if

967
00:36:54,800 --> 00:36:58,320
you're uh uh

968
00:36:58,320 --> 00:36:59,760
if the inputs you're doing are causing

969
00:36:59,760 --> 00:37:02,960
your device to use more processing power

970
00:37:02,960 --> 00:37:06,000
then the woo whoops we'll go crazy and

971
00:37:06,000 --> 00:37:07,680
if it's just kind of running like normal

972
00:37:07,680 --> 00:37:09,920
you have to identify what normal is too

973
00:37:09,920 --> 00:37:12,160
just based on building a baseline but

974
00:37:12,160 --> 00:37:15,280
yeah um a simple way of doing it if you

975
00:37:15,280 --> 00:37:16,880
don't have an oscilloscope there's a

976
00:37:16,880 --> 00:37:18,240
cool linux tool called

977
00:37:18,240 --> 00:37:21,680
exoscope which uses your audio input as

978
00:37:21,680 --> 00:37:22,720
a way to

979
00:37:22,720 --> 00:37:25,280
measure you know changes in voltage

980
00:37:25,280 --> 00:37:27,760
amplitude

981
00:37:28,320 --> 00:37:30,400
which you need a cable to contact with

982
00:37:30,400 --> 00:37:32,400
but it's a good it's a good solution for

983
00:37:32,400 --> 00:37:34,720
what it is i think and then reporting

984
00:37:34,720 --> 00:37:35,760
and that's gonna be

985
00:37:35,760 --> 00:37:39,280
different uh depending on what your

986
00:37:39,280 --> 00:37:42,000
uh use case is but uh typically you

987
00:37:42,000 --> 00:37:42,480
wanna

988
00:37:42,480 --> 00:37:45,680
see uh uh you wanna report on the

989
00:37:45,680 --> 00:37:47,359
robustness of the

990
00:37:47,359 --> 00:37:49,599
uh device under test do you want to look

991
00:37:49,599 --> 00:37:51,839
at the input validations

992
00:37:51,839 --> 00:37:54,560
and then you want to look at timeouts if

993
00:37:54,560 --> 00:37:54,960
you're

994
00:37:54,960 --> 00:37:58,720
you know doing uh like stress testing or

995
00:37:58,720 --> 00:38:00,400
whatever

996
00:38:00,400 --> 00:38:02,640
and then how to manipulate any logic

997
00:38:02,640 --> 00:38:04,800
this was written mainly for

998
00:38:04,800 --> 00:38:07,839
using the overarching case of uh

999
00:38:07,839 --> 00:38:09,359
industrial control systems and then

1000
00:38:09,359 --> 00:38:11,040
we've got uh

1001
00:38:11,040 --> 00:38:13,119
i've got a few example use cases on how

1002
00:38:13,119 --> 00:38:14,880
you'd you know probably go through this

1003
00:38:14,880 --> 00:38:15,440
here

1004
00:38:15,440 --> 00:38:18,480
uh at least how i would and this is the

1005
00:38:18,480 --> 00:38:20,240
idea it's just like a nice little

1006
00:38:20,240 --> 00:38:21,520
way a nice little thing that you can

1007
00:38:21,520 --> 00:38:23,359
take and slap on what you're doing and

1008
00:38:23,359 --> 00:38:24,000
it should

1009
00:38:24,000 --> 00:38:27,440
kind of give you a place to start from

1010
00:38:27,440 --> 00:38:29,680
um but yeah so i applied this to what i

1011
00:38:29,680 --> 00:38:30,800
was doing

1012
00:38:30,800 --> 00:38:33,920
it's a kind of circuitous

1013
00:38:33,920 --> 00:38:36,720
because i made updates to it i made some

1014
00:38:36,720 --> 00:38:38,000
recent updates to it

1015
00:38:38,000 --> 00:38:41,520
based on some things that i learned from

1016
00:38:41,520 --> 00:38:46,400
the engagement that i was using it for

1017
00:38:46,400 --> 00:38:49,920
um but yeah so uh conclusion uh fuzzing

1018
00:38:49,920 --> 00:38:51,520
is leveraging unexpected inputs to

1019
00:38:51,520 --> 00:38:53,359
produce unexpected outputs so really is

1020
00:38:53,359 --> 00:38:54,160
trying to learn

1021
00:38:54,160 --> 00:38:56,400
the unexpected things in your

1022
00:38:56,400 --> 00:38:58,400
applications interfaces

1023
00:38:58,400 --> 00:39:00,480
and anything that you identify and is

1024
00:39:00,480 --> 00:39:02,480
the quote-unquote attack surface

1025
00:39:02,480 --> 00:39:05,680
um first principles thinking is uh

1026
00:39:05,680 --> 00:39:07,520
chapping things down to the core truths

1027
00:39:07,520 --> 00:39:09,119
and then building it back up from there

1028
00:39:09,119 --> 00:39:11,119
and then applying fuzz testing sorry

1029
00:39:11,119 --> 00:39:13,280
applying first principles to your

1030
00:39:13,280 --> 00:39:14,800
uh first principles thinking to your

1031
00:39:14,800 --> 00:39:16,320
fuzz testing engagements will

1032
00:39:16,320 --> 00:39:19,599
build a more holistic built for purpose

1033
00:39:19,599 --> 00:39:20,720
solution

1034
00:39:20,720 --> 00:39:24,480
so in this scenario there was a lot of

1035
00:39:24,480 --> 00:39:26,160
drilling down and microscopic and you

1036
00:39:26,160 --> 00:39:28,240
know kind of surgery going on regarding

1037
00:39:28,240 --> 00:39:29,119
breaking down this protocol

1038
00:39:29,119 --> 00:39:30,880
understanding how it worked

1039
00:39:30,880 --> 00:39:34,000
um and then now

1040
00:39:34,000 --> 00:39:36,400
i've got a solution that uh anytime that

1041
00:39:36,400 --> 00:39:38,480
i ever have to test the same kind of

1042
00:39:38,480 --> 00:39:39,040
family

1043
00:39:39,040 --> 00:39:41,359
of plcs in order to use and whatnot i've

1044
00:39:41,359 --> 00:39:42,800
got something locked and loaded i can

1045
00:39:42,800 --> 00:39:44,480
run with

1046
00:39:44,480 --> 00:39:47,760
so um

1047
00:39:47,839 --> 00:39:51,760
yeah that is that uh i've got contact

1048
00:39:51,760 --> 00:39:52,320
info

1049
00:39:52,320 --> 00:39:56,079
in here um

1050
00:39:56,079 --> 00:39:58,560
really if you just uh search taco

1051
00:39:58,560 --> 00:40:00,640
underscore the underscore boss and

1052
00:40:00,640 --> 00:40:03,280
whatever i should probably be in there

1053
00:40:03,280 --> 00:40:04,240
um

1054
00:40:04,240 --> 00:40:06,720
i've tried to make sure that name was uh

1055
00:40:06,720 --> 00:40:10,480
taken throughout my social media stuff

1056
00:40:10,800 --> 00:40:14,319
but uh yeah that's uh it's pretty

1057
00:40:14,319 --> 00:40:24,480
pretty much it here

1058
00:40:24,480 --> 00:40:38,640
uh let's see was there any questions

1059
00:40:38,640 --> 00:40:41,119
yeah that was pretty funny agenda i

1060
00:40:41,119 --> 00:40:42,560
don't really know if the canadians say

1061
00:40:42,560 --> 00:40:44,000
agenda i just kind of made that up on

1062
00:40:44,000 --> 00:40:45,920
the spot because it sounded funny

1063
00:40:45,920 --> 00:40:49,680
oh anywhose

1064
00:40:49,680 --> 00:40:54,000
um yeah that's uh that's it for me here

1065
00:40:54,000 --> 00:40:56,400
thank you very much for uh uh tuning in

1066
00:40:56,400 --> 00:40:57,760
and if you didn't then i guess this will

1067
00:40:57,760 --> 00:40:58,800
be on video soon

1068
00:40:58,800 --> 00:41:00,000
so yeah if you have any questions on

1069
00:41:00,000 --> 00:41:01,680
fuzz testing uh hit me up at taco

1070
00:41:01,680 --> 00:41:02,240
underscore

1071
00:41:02,240 --> 00:41:05,359
the underscore boss at protonmail.com uh

1072
00:41:05,359 --> 00:41:07,119
or anywhere else that has talked with

1073
00:41:07,119 --> 00:41:08,720
the boss there so

1074
00:41:08,720 --> 00:41:11,520
all right

