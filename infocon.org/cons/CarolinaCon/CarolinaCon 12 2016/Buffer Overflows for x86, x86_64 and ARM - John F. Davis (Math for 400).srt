1
00:00:00,000 --> 00:00:03,000
displayed

2
00:00:13,740 --> 00:00:21,890
begin to say look this is a conference
you know you come here to learn and so

3
00:00:21,890 --> 00:00:27,330
this way to learn is do something that
you don't know about it so in this case

4
00:00:27,330 --> 00:00:33,690
I knew something about buffer overflows
on x86 been around for a while didn't

5
00:00:33,690 --> 00:00:40,260
know anything about x86 64 and my arm
assembly was like this big so is like

6
00:00:40,260 --> 00:00:44,449
back in December I was like I want to do
a presentation this year

7
00:00:45,070 --> 00:00:50,910
want to do this song before overflows on
these three architectures and because I

8
00:00:50,910 --> 00:01:04,319
have all this time management skills do
my work and my two classes all the

9
00:01:04,319 --> 00:01:08,699
presentations just like to kind of walk
you through it all the code is on my get

10
00:01:08,700 --> 00:01:15,299
home and basically whatever done as a
set up in testing lab so to speak

11
00:01:16,119 --> 00:01:21,100
where you have all the files that will
start up the BM's and all the codes it's

12
00:01:21,100 --> 00:01:27,759
going to be shown here so we kind of
talked about a little bit of an intro

13
00:01:27,759 --> 00:01:33,759
and i wanna talk about the demo of a
buffer overflow because you know some

14
00:01:33,759 --> 00:01:38,030
people may write on here some people may
have perlman don't know what they are

15
00:01:38,030 --> 00:01:41,030
and this is going to start at that level

16
00:01:41,869 --> 00:01:49,030
give you a little bit of background on
the architecture and some techniques and

17
00:01:49,030 --> 00:01:53,280
tools and then I want to go over the
three papers for these three

18
00:01:53,280 --> 00:02:03,200
architecture so you know what is above
or below you hear about on the slide in

19
00:02:05,260 --> 00:02:19,430
you know it was like the hot topic at
the time you get here so here like it's

20
00:02:19,430 --> 00:02:23,840
not you can read that but it's not
obvious there but that's the one we're

21
00:02:23,840 --> 00:02:29,750
going to look at but here you know right
here in the circle and then there's the

22
00:02:29,750 --> 00:02:39,750
one that was highlighted and you find
out inside yes indeed it is I would just

23
00:02:39,750 --> 00:02:48,520
jump in here just kind of show you
something in the network was working now

24
00:02:49,110 --> 00:02:54,180
ok whatever we won't do that basically
they're selling like there how they

25
00:02:54,180 --> 00:02:58,150
publish right there

26
00:02:58,150 --> 00:03:03,540
disclosure and you look inside and
you'll see like gdb you'll see some of

27
00:03:03,540 --> 00:03:09,070
the commands are gonna be running later
so it's right into where you're trying

28
00:03:09,070 --> 00:03:12,510
to get

29
00:03:12,510 --> 00:03:22,649
writes the first one I want to do and
when to do which came from a lot of

30
00:03:22,650 --> 00:03:28,640
classes and Forcier and EDX and they had
one from the University of Maryland

31
00:03:28,640 --> 00:03:34,298
which was like a security class and one
of the first assignments was like

32
00:03:34,299 --> 00:03:40,609
exploit 101 it was take a program that
does something and make the change the

33
00:03:40,609 --> 00:03:46,620
program execution flow since it was kind
of setup that way was it was not an

34
00:03:46,620 --> 00:03:53,400
assignment get a shell was like hey
let's get a shill alright so we're going

35
00:03:53,400 --> 00:03:58,819
to use that assignment to kind of demo
and that kind of gives you an

36
00:03:58,819 --> 00:04:03,319
understanding of saying like you know
here's a program that does this and then

37
00:04:03,319 --> 00:04:06,319
we're going to exploit it and get a
shell

38
00:04:08,329 --> 00:04:15,489
kinda goes as a good intro and it also
has a read buffer vulnerability rather

39
00:04:15,489 --> 00:04:23,530
than a string copy so you can pass in
something has bases or no characters in

40
00:04:23,530 --> 00:04:28,710
it and you'll see more about that later
and it also has a built-in function

41
00:04:28,710 --> 00:04:40,340
pointers was really easy to this is for
everyone who doesn't have a clue and

42
00:04:40,340 --> 00:04:43,820
hopefully we can

43
00:05:33,420 --> 00:05:41,670
earlier and earlier

44
00:05:53,160 --> 00:05:59,840
wifi so embarrassing

45
00:05:59,840 --> 00:06:07,320
all of my your YouTube videos and
earlier the we had a network and I don't

46
00:06:07,320 --> 00:06:10,320
have my phone to tether

47
00:07:54,529 --> 00:08:02,119
arising

48
00:08:06,870 --> 00:08:15,580
during their screen is blank

49
00:10:31,769 --> 00:10:40,019
earlier that was one of the things I
want to test but it's not working now

50
00:10:40,019 --> 00:10:49,019
and I can't do the sludge so do you want
to punt for a second and let me go get

51
00:10:49,019 --> 00:10:54,559
my phone and I can just tell them I'm so
sorry about that I just said it worked

52
00:10:54,559 --> 00:11:00,410
on the hilton before we had so many
people in here I'm going to sort of this

53
00:11:00,410 --> 00:11:07,059
is the first one this is the demo just
gonna give you a field before we go into

54
00:11:07,059 --> 00:11:16,879
certain looking at four screens with
Sarita ball to just the guys in the

55
00:11:16,879 --> 00:11:32,720
front row some kind of function you
enter some wisdom and then you can

56
00:11:32,720 --> 00:11:42,529
receive wisdom and it's using a function
corner to determine what thing to do and

57
00:11:42,529 --> 00:11:49,129
we're gonna formed input malformed input
is that selection text there and it will

58
00:11:49,129 --> 00:11:56,679
then give us a shill that is a buffer
overflow showing you how to change your

59
00:11:56,679 --> 00:12:08,009
input here is this I'm running it with
this run been program is to take those /

60
00:12:08,009 --> 00:12:12,670
characters and convert them free
printable ASCII over to actually buy

61
00:12:12,670 --> 00:12:21,410
near the very first number which is in
plain ASCII is where we're overflowing

62
00:12:21,410 --> 00:12:28,019
the index into this buffer the next
thing you see zeros you can do 0 zip is

63
00:12:28,019 --> 00:12:33,660
a string copy but with a read you can as
the zeros will terminate the string the

64
00:12:33,660 --> 00:12:36,660
A's and B's or

65
00:12:37,590 --> 00:12:45,200
just spacers so the actual code is over
there starting with the ex BB and in

66
00:12:45,200 --> 00:12:57,680
there is a string see the 262 269 that
is the / been as a so this is the GB GB

67
00:12:57,680 --> 00:13:06,770
and I'm just showing where I'm gonna
break where the file is this is in the

68
00:13:06,770 --> 00:13:14,880
386 directory structure of that project
so this is running on Archlinux i three

69
00:13:14,880 --> 00:13:29,720
to 630 bit architecture p.m. showing you
how GB actually runs a little bit of it

70
00:13:29,720 --> 00:13:36,890
was just the video editing custom frames
and I think at this point it might be

71
00:13:36,890 --> 00:13:51,760
towards the end was just see so it's
like recent can give you an idea of how

72
00:13:51,760 --> 00:13:55,500
this works and don't worry about it this
is not real clear this is just an intro

73
00:13:55,500 --> 00:14:02,510
gonna look at it more on the 386 code
portion and they were gonna do it again

74
00:14:02,510 --> 00:14:08,800
or 64 bits are going to a crawl so here
I am running it with that run been so

75
00:14:08,800 --> 00:14:17,439
it's running that I want to switch
screens and control EP and go run GB at

76
00:14:17,440 --> 00:14:21,670
the break and went there is my input and
I'm passing in and we'll kind of see how

77
00:14:21,670 --> 00:14:27,569
it changes in the code so

78
00:14:28,120 --> 00:14:34,480
there is inside of the kid in the break
point he's like a city has a read he's

79
00:14:34,480 --> 00:14:38,110
going to convert the first thing that he
reads into an integer use that integer

80
00:14:38,110 --> 00:14:44,110
as a as an index into that pointers and
then he's gonna call that function that

81
00:14:44,110 --> 00:14:51,470
he's index tend to leave a scroll up and
I'll show you the that's just showing

82
00:14:51,470 --> 00:14:54,890
you the buffer so that's the buffer
coming in so if you remember there was

83
00:14:54,890 --> 00:15:02,430
like three first part there at nine
there's your 39 who are you not see it

84
00:15:02,430 --> 00:15:05,430
again right there

85
00:15:15,760 --> 00:15:24,569
buffer in trying to get the address so
there is the address at the bottom it's

86
00:15:24,570 --> 00:15:30,940
be at the 3:30 and then this is the
stack pointer so you want to go in the

87
00:15:30,940 --> 00:15:36,470
stack pointer from that buffer to get to
where your return address is going to be

88
00:15:36,470 --> 00:15:45,830
a corner brain pointer us if there's no
parameters function to the next so there

89
00:15:45,830 --> 00:16:00,640
again I'm showing you where is your
brain pointer eSP is respect to weird

90
00:16:00,640 --> 00:16:04,870
about this and were even the next thing
I want to show you more in debt and just

91
00:16:04,870 --> 00:16:13,960
kind of showing you the flow here so
once again I mean GB with you I syntax

92
00:16:13,960 --> 00:16:16,980
there's the pointers array that was
talking about

93
00:16:16,980 --> 00:16:24,600
0121 would be to get wisdom call would
be to put with them call that number

94
00:16:24,600 --> 00:16:31,690
that we've calculated there is going to
go way past that and it's gonna go to

95
00:16:31,690 --> 00:16:42,230
the stack this is in the data portion of
the kurds actually here is actually the

96
00:16:42,230 --> 00:16:50,010
man or what the address that times for
us because you're not a pointer to buy

97
00:16:50,010 --> 00:16:54,439
three-pointer to addresses so it's for
by

98
00:16:58,899 --> 00:17:23,589
373 50 thats the index the next part of
the 68 69 / in a ski show you all the

99
00:17:23,589 --> 00:17:36,710
pieces before we jump into that buffer
going to show you the disassembled of

100
00:17:36,710 --> 00:17:47,279
that address so what's at 350 there is
so this is the classic do a system

101
00:17:47,279 --> 00:17:52,260
called in to exact a pointer to your
stream your pointer to the pointer to

102
00:17:52,260 --> 00:18:02,320
that string setting up a zero is your
next parameters doing in 83 86 is the

103
00:18:02,320 --> 00:18:04,740
way you do your system call what's

104
00:18:04,740 --> 00:18:10,660
and number which corresponds to the
don't worry about that

105
00:18:10,660 --> 00:18:26,760
more about that just came to get
acclimated to his right before going to

106
00:18:26,760 --> 00:18:32,950
call what's remembered that he could it
was the flu in parentheses that's

107
00:18:32,950 --> 00:18:35,950
calling your function winner

108
00:18:56,190 --> 00:19:01,100
showing you that your second parameter
are part of your first friend words EBS

109
00:19:01,100 --> 00:19:08,279
we dump it you can see the two errors
last 20 there are highlighting that is

110
00:19:08,279 --> 00:19:21,259
your / Ben / sa address right after it
which is the fault of the ECX as your

111
00:19:21,259 --> 00:19:25,139
second or even as you point your pointer
and that you noticed was the address

112
00:19:25,139 --> 00:19:31,729
that we were looking at the four points
value 374 so now we're Intersil I'm

113
00:19:31,730 --> 00:19:37,620
getting ready to do the int 80 which
does the system call again based upon

114
00:19:37,620 --> 00:19:48,758
what their parameters and their or
waiting I'm just going to come out here

115
00:19:48,759 --> 00:19:52,759
another way we're going to continue here
in us

116
00:20:00,060 --> 00:20:07,010
this presentation is online if you watch
it on your personal computer

117
00:20:07,940 --> 00:20:11,200
you don't have to make it full screen to
be this big so everybody who may not

118
00:20:11,200 --> 00:20:14,200
have that before going there

119
00:20:30,250 --> 00:20:35,670
so you had a printed out and as a
pointer and there you literally see the

120
00:20:35,670 --> 00:20:44,960
/ fantasy here is the man page for
system call and I'll show you for the

121
00:20:44,960 --> 00:20:49,690
different architectures how you do that
and you'll see this multiple times its

122
00:20:49,690 --> 00:20:53,870
presentation could really do all three
but there is for i three eighty six

123
00:20:53,870 --> 00:21:01,399
system call is an int 80 parameter is
your number and there is another page

124
00:21:01,400 --> 00:21:07,430
down below that was showing you where
your function called parameters which

125
00:21:07,430 --> 00:21:13,050
registers it differs by architecture
once again I'm just showing you my

126
00:21:13,050 --> 00:21:16,050
studio like five pounds

127
00:21:23,730 --> 00:21:44,060
actual parameters and how do you how do
you know what those numbers or relay the

128
00:21:44,060 --> 00:21:51,500
what you put into your system call
number for the site 360 you looking for

129
00:21:51,500 --> 00:21:54,500
Linux headers we know we're on 386

130
00:21:56,360 --> 00:22:02,290
include file will be in decibel

131
00:22:32,190 --> 00:23:00,100
and now the system Cornell look at your
path is at the beginning with and in the

132
00:23:00,100 --> 00:23:05,230
environment in this case for his using
an old environment so the goal down to

133
00:23:05,230 --> 00:23:06,159
the end

134
00:23:06,159 --> 00:23:25,250
scroll up show you the example usage a
little clearer example there is

135
00:26:17,260 --> 00:27:10,120
without so much detail so many know UPS
shellcode in your buffer Edris

136
00:27:11,190 --> 00:27:18,730
basically this is that if you don't know
where it is this gives you many

137
00:27:18,730 --> 00:27:28,060
possibilities to find out where the
buffer is alright so this is a demo

138
00:27:28,060 --> 00:27:33,409
where I'm going to take a just a string
copy which is exactly what he was doing

139
00:27:33,410 --> 00:27:40,940
with a just copy and were

140
00:28:11,570 --> 00:28:28,790
so there's your initial start to jump to
the call the Kraken label in there to be

141
00:28:28,790 --> 00:28:33,409
some other labels just so you can see a
little better in the object done but

142
00:28:33,410 --> 00:28:38,200
gotta work use finest code sometimes
release the Kraken I thought I'd own

143
00:28:38,200 --> 00:28:45,250
room but so this earlier book for your
gonna jump to the poll which is down

144
00:28:45,250 --> 00:28:54,920
here that's that doesn't put anything on
the staff call the Kraken and right

145
00:28:54,920 --> 00:29:01,660
after the actual the call is your this
label for the string which the comes

146
00:29:01,660 --> 00:29:02,720
back up

147
00:29:02,720 --> 00:29:10,240
would address on the staff which you
didn't park you're not gonna pop it to

148
00:29:10,240 --> 00:29:20,870
do a return or popping it to get the
address and just move along once again

149
00:29:20,870 --> 00:29:23,560
I'm trying to do here is this is our
goal

150
00:29:23,560 --> 00:29:30,320
so we wanted to do that system call
number 12 string for reporters string or

151
00:29:30,320 --> 00:29:39,720
null pointer and you wanted memory wanna
know there if you were to run this right

152
00:29:39,720 --> 00:29:47,420
before you get here you want to make
sure this looks like so this is not that

153
00:29:47,420 --> 00:30:01,730
difficult but there's like contents so
running that area code with the

154
00:30:20,730 --> 00:30:35,690
running in our two had no walks in front
of it until I find out where it is and

155
00:30:35,690 --> 00:30:42,490
then I can do my OS some taken that Koo
but at the top of the buffer with no

156
00:30:42,490 --> 00:30:47,250
option at the top of it one at a time
until I slide that down over the return

157
00:30:47,250 --> 00:30:52,940
address and this is Justin batch codes
no big deal I'm not putting a post pics

158
00:30:52,940 --> 00:30:59,690
of the the actual address to come back
to cause I think I'm writing there in

159
00:30:59,690 --> 00:31:09,900
the actual string this is the code is
very similar to what he was showing I'm

160
00:31:09,900 --> 00:31:17,169
not really worried about the vulnerable
part actually I am the border report is

161
00:31:17,169 --> 00:31:20,169
the call comes back up

162
00:31:21,639 --> 00:31:30,389
now in this case but this is different
from the next one and I will show you

163
00:31:30,389 --> 00:31:32,089
that one as well

164
00:31:32,089 --> 00:31:37,779
the buffer is big enough that she'll
could could fit inside it

165
00:31:57,070 --> 00:32:03,490
buffer is too small to put all your
moods you're going to find where it

166
00:32:03,490 --> 00:32:12,389
comes into the entry point based upon
the barber size of the program that I

167
00:32:12,389 --> 00:32:18,408
was running I was sitting in the middle
of this code so I just added the

168
00:32:18,409 --> 00:32:23,559
addresses for the return address in the
middle and then the jump

169
00:32:23,559 --> 00:32:29,250
jumps over it and I had to put some no
up to make it a wine but jumped to

170
00:32:29,250 --> 00:32:32,840
resume here which goes down and then
continues over

171
00:33:01,870 --> 00:33:30,969
for the paper was using for this was the
sky uncle or you'll co-director thinking

172
00:33:30,970 --> 00:33:35,900
it's uncle coder I think ull is like
some kind of like language description

173
00:33:35,900 --> 00:33:43,240
for trying to understand computer
speaker linguistics or something but the

174
00:33:43,240 --> 00:33:48,980
joke area is sounding kind of European
and I just saw this guy with this post

175
00:33:48,980 --> 00:34:01,080
about Microsoft thought it was like a
sad interests lie for him so they were

176
00:34:01,080 --> 00:34:07,580
two papers and once again there was one
in 2009 and then this guy Unicode Rhino

177
00:34:07,580 --> 00:34:17,949
used his body was pretty clear and easy
basically just 64 bit and 32 bit more

178
00:34:17,949 --> 00:34:26,080
registered got larger registers or SP vs
ESP leads are different ABI the largest

179
00:34:26,080 --> 00:34:34,560
userspace memory addresses 27 bits just
means if you put a seven you're not

180
00:34:34,560 --> 00:34:41,149
gonna get 27 you're going to get all of
those at all it will expand for you

181
00:34:45,239 --> 00:34:49,810
and I'm just kind of space in these off
because I know that I have an officer

182
00:34:49,810 --> 00:34:55,330
and three of the three

183
00:35:29,820 --> 00:35:37,000
I'm taking off

184
00:35:38,340 --> 00:35:46,100
protection which are there I'm turning
off a lasso are randomized in your

185
00:35:46,100 --> 00:35:51,110
addresses I'm turning all new stack
protector and I'm making my stack

186
00:35:51,110 --> 00:35:56,040
executable goal is just to show you how
it works and then you can get more

187
00:35:56,040 --> 00:36:02,380
complex I'm also making these buffers a
little smaller so I can find a little

188
00:36:02,380 --> 00:36:11,950
faster my cell 250 by the proper size of
64 so that means I need a minimum of 14

189
00:36:11,950 --> 00:36:18,040
by to pass before I can start putting
the other stuff in there this is the

190
00:36:18,040 --> 00:36:28,590
assembly and there's a kind of problem
with Nazem in San tastic but way too

191
00:36:28,590 --> 00:36:37,940
soon now you see this portion here your
system call number is in re X and Y or

192
00:36:37,940 --> 00:36:52,370
are there in the RTI or a side order yet
sensitive like xpx and CX one thing I

193
00:36:52,370 --> 00:37:00,250
liked about what he was doing and I'm
using using their models and a little

194
00:37:00,250 --> 00:37:04,280
bit to get onto my style for what I want
to do in his example he was just doing a

195
00:37:04,280 --> 00:37:09,690
cat of its a password I really want to
sell but the thing I did like is right

196
00:37:09,690 --> 00:37:10,700
there at the top

197
00:37:10,700 --> 00:37:18,669
doing the XOR of the 41 so at the bottom
the actual / been a sage their show

198
00:37:18,670 --> 00:37:26,860
decisiveness age had a 41 at the end so
it's nice and easy to get your 0 at the

199
00:37:26,860 --> 00:37:32,160
end of that string but you can't put it
in there there it'll truncate the buffer

200
00:37:32,160 --> 00:37:38,879
just x soaring 41 with it and there I'm
just sayin run that program

201
00:37:39,410 --> 00:37:43,980
POF which is a C program passing in a
string that's within the buffer and you

202
00:37:43,980 --> 00:37:56,069
can see it goes to it I do a lot of
these way GB changing parameters around

203
00:37:56,069 --> 00:38:05,690
and then I'll make patch files so I
kinda like pecan pope on things and what

204
00:38:05,690 --> 00:38:17,910
I get it there I'll move it over to the
to rewrite my assembly we're running the

205
00:38:17,910 --> 00:38:26,759
EOF program we're passing it till we're
going to run down there were at the

206
00:38:26,760 --> 00:38:33,250
string copy when we're doing next we're
going like over instructions we do is

207
00:38:33,250 --> 00:38:37,849
step we're stepping into a but if you're
in a simple you want to use the step I

208
00:38:37,849 --> 00:38:43,869
to do just the right there is the leaves
so after we've done the coal industry

209
00:38:43,869 --> 00:38:51,670
copy which we did you leave the stack
pointer is set up at your return frame

210
00:38:51,670 --> 00:38:56,180
so you're gonna have a frame address and
then you have your return address so I'm

211
00:38:56,180 --> 00:39:01,578
going to print the RSPCA which is your
stack pointer that's the top of it and

212
00:39:01,579 --> 00:39:04,200
then there is

213
00:39:04,200 --> 00:39:09,169
what we're looking at 44 a.m. and return
address

214
00:39:18,660 --> 00:39:21,660
so

215
00:39:22,800 --> 00:39:28,790
change the layout next call when you're
into you I do the disassembled you got

216
00:39:28,790 --> 00:39:36,790
the assembly up it doesn't always scroll
this will work now now to put in the

217
00:39:36,790 --> 00:39:44,080
command window so you can see there's
our job all the way down in calls back

218
00:39:44,080 --> 00:39:48,670
up here and then you do your part you X
or there's the forty one that I was

219
00:39:48,670 --> 00:39:53,500
explored it at offset seven to get rid
of my 41 at the end give me 10

220
00:40:06,619 --> 00:40:19,289
so now we're in the thirty I believe so
there's a recall calling down at the

221
00:40:19,289 --> 00:40:28,849
bottom and now we're gonna park and come
back to

222
00:40:30,360 --> 00:40:38,500
still going so now we thought we had the
address and then right now doing an

223
00:40:38,500 --> 00:40:49,430
entity is 12 assists call sort of using
a B 23 B what are all of those guys have

224
00:40:49,430 --> 00:40:55,000
to be set up so I'm just showing you
what the info for the registers or and

225
00:40:55,000 --> 00:40:59,510
then I'll print out the content just to
make sure everything is in the proper

226
00:40:59,510 --> 00:41:12,370
place using the GV syntax when I'm 64
bit we're going to see just 32 bit words

227
00:41:12,370 --> 00:41:24,680
and there is the strain was again is
your / you're trailing zero and we're

228
00:41:24,680 --> 00:41:28,600
going to skip continue and so they are
you got a shell prompt you can ask

229
00:41:28,600 --> 00:41:40,089
around and I'll have to exit that come
back and it seemed a lot cooler when I

230
00:41:40,090 --> 00:41:51,390
was doing it was like really boring so
they're all very good once again like I

231
00:41:51,390 --> 00:41:55,259
said the code is up there there's a lot
of notes and links

232
00:41:56,320 --> 00:42:00,720
and you know they're like my own but you
know you can kind of read like was he

233
00:42:00,720 --> 00:42:06,299
trying to do here and I try to calm in
the GB files as I'm doing I'm just so I

234
00:42:06,300 --> 00:42:13,380
can keep track of where I'm trying to
get things were and sources there any

235
00:42:13,380 --> 00:42:22,880
way you can get you can get all you need
for x86 32 bit you don't need to be in

236
00:42:22,880 --> 00:42:27,530
for 64 bit chances are good running on
that already and then with QEMU you can

237
00:42:27,530 --> 00:42:31,100
run an arm and that's something you
can't do that I don't think so I don't

238
00:42:31,100 --> 00:42:36,110
think you can do that with VirtualBox
running arm without it

239
00:42:36,110 --> 00:42:47,050
think we run out I'm so I'm gonna skip
this these are just some tools like how

240
00:42:47,050 --> 00:42:53,610
to take an object by stirring and all
the card I made it for you

241
00:42:56,060 --> 00:43:05,060
groups all rights and now this is where
the fun begins so don't don't stop but

242
00:43:05,060 --> 00:43:13,670
there's so when you get to arm on
Tuesday I was like man I'm running out

243
00:43:13,670 --> 00:43:17,620
of time to do this presentation and I
really don't know or I'm at all and I'm

244
00:43:17,620 --> 00:43:20,700
either going to end up in one of these
two states I'm either going to be like

245
00:43:20,700 --> 00:43:25,759
you know Ghadir I don't know what the
hell I'm doing and I kind of leaning

246
00:43:25,760 --> 00:43:31,870
like I'm really on that right hand
column I know but there was another one

247
00:43:31,870 --> 00:43:37,460
like hey you know right and code like
this you're picking up stuff and you're

248
00:43:37,460 --> 00:43:47,280
putting it together like a wizard like
to summon a demon women are and then I

249
00:43:47,280 --> 00:43:50,410
saw this post this morning when I was
actually doing this

250
00:43:50,950 --> 00:43:57,680
finish this presentation that guy who
would write here give him credit he

251
00:43:57,680 --> 00:43:59,180
rocks the role

252
00:43:59,180 --> 00:44:11,149
all I need this book so a line for this
way back when I was like old what I'm

253
00:44:11,150 --> 00:44:12,230
going to do

254
00:44:12,230 --> 00:44:22,319
latest one and do that one guy and then
I was like well when you know the return

255
00:44:22,319 --> 00:44:26,029
to PSU hard as kind of invariant from 1
I'm been doing so far

256
00:44:27,849 --> 00:44:31,200
supposedly when I'm doing so far as I'm
gonna work will its but maybe we can

257
00:44:31,200 --> 00:44:35,828
brute force and get it or they went back
and I found some other papers and I

258
00:44:35,829 --> 00:44:47,960
found this 2009 paper and because these
three guys they wrote the role for real

259
00:44:47,960 --> 00:44:55,540
so once again its kind in the style of
the smashing the stack but basically

260
00:44:55,540 --> 00:45:00,829
what he's going to say is let's look at
all of the arm and instructions cause

261
00:45:00,829 --> 00:45:07,510
harm has two different modes and let's
look and see like how we can fix

262
00:45:07,510 --> 00:45:12,740
alphanumeric white spacing so remember
us talking about in the other guys I

263
00:45:12,740 --> 00:45:20,669
can't put a zero in my buffer 50 mile
buffer buffer gets truncated we also

264
00:45:20,670 --> 00:45:25,059
can't put like to hex 20 which is a
space because then you would have to

265
00:45:25,059 --> 00:45:33,809
arguments and it wouldn't read the rest
of that string like the way it is these

266
00:45:33,809 --> 00:45:36,980
guys winning and said was look at all

267
00:45:36,980 --> 00:45:43,800
possible instructions and then let's
come up with a table of what possible

268
00:45:43,800 --> 00:45:48,520
instructions we can use the column on
the ride is like why you can't do

269
00:45:48,520 --> 00:45:53,880
something or or if you can how you have
to limit your parameters for that

270
00:45:53,880 --> 00:45:58,650
instruction then he went into the
instructions which are the sixteen-bit

271
00:45:58,650 --> 00:46:05,510
ones and he came up with his list of
possible instructions that he could use

272
00:46:05,510 --> 00:46:15,730
so you know you can do like a move or 00
in it so I tried this and I was like to

273
00:46:15,730 --> 00:46:19,390
Skype in like this is just exactly I
don't know what this thing does but i

274
00:46:19,390 --> 00:46:23,850
wanna try and I can step through it and
get it working this is his shellcode in

275
00:46:23,850 --> 00:46:30,410
a simply which is in the mode this is
this is the code to get the shell five

276
00:46:30,410 --> 00:46:38,850
minutes wrapping up a rapid up that much
I was like that was incredible and only

277
00:46:38,850 --> 00:46:48,609
when I was doing it it failed somewhere
along that store multiple I was like

278
00:46:48,609 --> 00:47:07,580
hats off to do so long I was pretty
clean and i like real quick look at five

279
00:47:07,580 --> 00:47:08,140
minutes

280
00:47:08,140 --> 00:47:14,160
push so basically what he's gonna do

281
00:47:18,289 --> 00:47:25,539
army 32 bit Xanadu this bit of the very
beginning to switch the thumb mode by

282
00:47:25,539 --> 00:47:31,079
changing the addressed so you gonna jump
to the PC plus one that he that address

283
00:47:31,079 --> 00:47:40,469
is odd but you'd added 12 it goes down
where he does the ad or 0 to 10 he's

284
00:47:40,469 --> 00:47:43,469
literally counting

285
00:47:48,559 --> 00:47:59,059
the addresses and then he's doing the
same thing you want to do the exact with

286
00:47:59,059 --> 00:48:06,689
a system call its decimal 11420 above
the pointer to the pointer

287
00:48:19,509 --> 00:48:31,549
first thing I did was I was like can I
get that there's just one thing here he

288
00:48:31,549 --> 00:48:35,869
has an SEC 1 you look back at the man
page and a bad time I would show you

289
00:48:35,869 --> 00:48:45,199
it's really an SEC 0 so which once again
you can't put a zero in your buffer so I

290
00:48:45,199 --> 00:48:49,279
think he was gonna say like I'm going to
write this out and then went to self

291
00:48:49,279 --> 00:48:56,529
modify the code to put a zero in that
location so basically falling demos I do

292
00:48:56,529 --> 00:49:02,039
those kind of things with patch in it so
as it's running up Pacha Majidi be so I

293
00:49:02,039 --> 00:49:07,539
can get this guy to get a shell to
execute shell statements are doing

294
00:49:07,539 --> 00:49:14,289
exactly what I tried to put that code
into other code didn't work and I think

295
00:49:14,289 --> 00:49:20,029
part of the problem is you're in his
later armed UCC results you're already

296
00:49:20,029 --> 00:49:25,679
in some mode and in trying to switch
over and I played games with don't do

297
00:49:25,679 --> 00:49:29,289
this which I mean you can see the videos

298
00:49:29,890 --> 00:49:42,489
changing the addresses from odd even
what I was doing the call take one is

299
00:49:42,489 --> 00:49:47,539
like taking one of a million but it was
a good stopping point take two and in

300
00:49:47,539 --> 00:49:50,489
these are just the critics and
references and then the takeaway for the

301
00:49:50,489 --> 00:49:58,339
last thing for him to say what do you
take away from this to a simplified

302
00:49:58,339 --> 00:50:00,460
methods I was disabling

303
00:50:00,460 --> 00:50:04,660
things so to prevent like the easy
hacker exploits guy coming into your

304
00:50:04,660 --> 00:50:08,170
code and that's the whole point learn
how to do it so you can prevent it we

305
00:50:08,170 --> 00:50:12,290
gonna do you know of course you're not
going to disable the ASL or so they will

306
00:50:12,290 --> 00:50:18,430
not have the same address each time they
run it to try and find it put in EXEC

307
00:50:18,430 --> 00:50:25,129
shield prevents execution employee like
a find exacts defining the executable

308
00:50:25,130 --> 00:50:29,240
flying in your file system that are
executable one of those videos I'll show

309
00:50:29,240 --> 00:50:34,979
you how to use read else to do that I'll
sue when the very first when I was doing

310
00:50:34,980 --> 00:50:39,070
a gdb attached so Mike running the
program and then attached in gdb to it

311
00:50:39,070 --> 00:50:45,970
you can disable some of the stuff after
this so she had a stripper executables

312
00:50:45,970 --> 00:50:53,310
four stab streams and symbols for the
actual what you're calling like like you

313
00:50:53,310 --> 00:50:58,359
won't see main validate length of all
your book as an Olympus worse than

314
00:50:58,359 --> 00:51:06,700
anything this coming in being you need
to validate is a good thing in employee

315
00:51:06,700 --> 00:51:10,569
like your strength stirring coffees
stirred sprintf all that stuff

316
00:51:11,180 --> 00:51:17,020
secondaries make sure your link to the
greater than what you're going through a

317
00:51:17,020 --> 00:51:21,450
buffer is used that filter you know make
sure if you're like taking text they

318
00:51:21,450 --> 00:51:26,169
only send texts to be sending you know
digits 0 through 9 white space that

319
00:51:26,170 --> 00:51:31,320
avoid running as root cause once you get
the shell to that program that's running

320
00:51:31,320 --> 00:51:39,570
it runs with that process IDs if you're
running as root there is no point in

321
00:51:39,570 --> 00:51:43,580
arguing here is a psych layer defenses
you just put a one two blocks to get him

322
00:51:43,580 --> 00:51:45,348
to stop time is up

323
00:51:45,349 --> 00:51:46,849
thank you folks I enjoyed it

