1
00:00:03,140 --> 00:00:03,760
human

2
00:00:03,760 --> 00:00:10,030
here that's okay hmmm I want to thank
you guys for invite me to the

3
00:00:10,030 --> 00:00:13,790
the cargo pants and the messenger bag me
know

4
00:00:13,790 --> 00:00:17,580
i doing today

5
00:00:17,580 --> 00:00:22,990
its so the talk about reverse
engineering execute bowls

6
00:00:22,990 --> 00:00:27,160
and I'm wanna try n talk to an audience
of people who

7
00:00:27,160 --> 00:00:31,580
no something about computers and some
people who may not know so much about

8
00:00:31,580 --> 00:00:32,460
code

9
00:00:32,460 --> 00:00:35,769
in computers as well I'll so just

10
00:00:35,769 --> 00:00:42,769
their women think you'll enjoy this the
gym hope for the example code is

11
00:00:43,949 --> 00:00:48,659
upper I and the nice thing about this is
this presentation is a

12
00:00:48,659 --> 00:00:53,039
available for share so anything that we
do here in the videos they're on you too

13
00:00:53,039 --> 00:00:56,469
you can all get to and from here the the
first page

14
00:00:56,469 --> 00:00:59,609
has the the actual presentation

15
00:00:59,609 --> 00:01:02,940
so companies that I wanna come to start
out with

16
00:01:02,940 --> 00:01:07,310
how things work from a high-level view

17
00:01:07,310 --> 00:01:11,950
and then what will go on from there I'm
a developer by trade

18
00:01:11,950 --> 00:01:15,030
so I write code

19
00:01:15,030 --> 00:01:18,060
you know from ways right from the source
code

20
00:01:18,060 --> 00:01:24,289
you inexcusable I'll when people use
executed with a mean I know how that the

21
00:01:24,289 --> 00:01:28,310
written I think it's helpful if your
gonna reverse engineering to know

22
00:01:28,310 --> 00:01:31,530
how to write them right you can see what
they're doing

23
00:01:31,530 --> 00:01:37,490
and so basically you know program right
source code a high-level language

24
00:01:37,490 --> 00:01:40,960
you the compiler generates an Execute
will you will see next

25
00:01:40,960 --> 00:01:45,509
fuel and what is the executors Melissa
file is a special type of file which is

26
00:01:45,509 --> 00:01:47,100
a sequence of instructions

27
00:01:47,100 --> 00:01:52,090
then and the level set

28
00:01:52,090 --> 00:01:57,240
I to you here's an example we're going
to use this example

29
00:01:57,240 --> 00:02:01,710
a couple different ways and my goal is
to say like source wise

30
00:02:01,710 --> 00:02:05,829
this is what it looks like a debugging
it

31
00:02:05,829 --> 00:02:09,299
with symbols this is what it looks like
then

32
00:02:09,299 --> 00:02:13,299
debugging it without symbols and
assembly and UN

33
00:02:13,299 --> 00:02:16,480
you can kinda see from doing this is
going to be difficult

34
00:02:16,480 --> 00:02:19,680
so water other ways that you can get
ideas

35
00:02:19,680 --> 00:02:23,819
about how code works there it's not just
seven to go to this important figure it

36
00:02:23,819 --> 00:02:24,220
out

37
00:02:24,220 --> 00:02:27,500
and will have sums

38
00:02:27,500 --> 00:02:34,189
stuff there about presentation with
static and dynamic analysis so

39
00:02:34,189 --> 00:02:37,790
way this is a a C code when I say this
to a friend of mine here he was like I

40
00:02:37,790 --> 00:02:39,090
don't even know what this is

41
00:02:39,090 --> 00:02:43,180
and and I you know and I thought maybe
everybody would you may not

42
00:02:43,180 --> 00:02:46,400
this is this is a very simple there's a
routine here

43
00:02:46,400 --> 00:02:50,930
its main it has a variable decoration
for three variables

44
00:02:50,930 --> 00:02:55,280
are you have a I equals 1 Jake was 2 for
initialization

45
00:02:55,280 --> 00:03:00,310
you have a song which is a the third
variable to take the resolve a function

46
00:03:00,310 --> 00:03:01,709
that has two parameters

47
00:03:01,709 --> 00:03:04,930
and the UN a print that song and

48
00:03:04,930 --> 00:03:08,310
this shows a very simple program but
with this

49
00:03:08,310 --> 00:03:11,390
through the debugger you can kinda see
what's going on

50
00:03:11,390 --> 00:03:14,420
and I I encourage you to if you want to
learn

51
00:03:14,420 --> 00:03:17,900
llama something that's very small and
simple so that you can expand

52
00:03:17,900 --> 00:03:20,970
Roman so we're gonna show this a couple
times

53
00:03:20,970 --> 00:03:25,079
but this is a one thing you hear me say
is talking about

54
00:03:25,079 --> 00:03:29,000
strains and format specifiers this is a
strange

55
00:03:29,000 --> 00:03:33,489
the person D is a format specifier the
prenup is a

56
00:03:33,489 --> 00:03:38,209
live recall to send something to the
screen islands was gonna that literally

57
00:03:38,209 --> 00:03:39,209
say some

58
00:03:39,209 --> 00:03:43,640
equals I we're gonna replace the actual
some variable

59
00:03:43,640 --> 00:03:48,719
with this wanna so you know

60
00:03:48,719 --> 00:03:53,530
the big picture you have instructions
functions registered

61
00:03:53,530 --> 00:03:56,840
machine stay memory programming
constructs

62
00:03:56,840 --> 00:04:00,760
a when will talk about

63
00:04:00,760 --> 00:04:05,650
registers and when I was showing this to
my friend who's a and leave in a way the

64
00:04:05,650 --> 00:04:07,000
register -ism

65
00:04:07,000 --> 00:04:11,739
thing as the registers you know in
memory is right memory is like a big

66
00:04:11,739 --> 00:04:16,550
address space you can has a COLLADA
locations you have an address you have

67
00:04:16,550 --> 00:04:18,440
this place you can store variables

68
00:04:18,440 --> 00:04:22,680
in its all board the CPU the CPU itself

69
00:04:22,680 --> 00:04:25,970
has the same kind of thing that memory
storage locations

70
00:04:25,970 --> 00:04:28,990
but they're much smaller because they're
much more you don't actually have to

71
00:04:28,990 --> 00:04:30,950
have a big address to register

72
00:04:30,950 --> 00:04:35,190
you can have a name for that read

73
00:04:35,190 --> 00:04:38,420
so that

74
00:04:38,420 --> 00:04:42,020
so and we talked about instruction
sequences

75
00:04:42,020 --> 00:04:47,100
so here at the lowest level this isn't
simple instructions

76
00:04:47,100 --> 00:04:50,380
move long you have a constant

77
00:04:50,380 --> 00:04:53,390
and where you're going to be moving into
this is a

78
00:04:53,390 --> 00:04:56,710
a base pointer this is a registered
within the CPU

79
00:04:56,710 --> 00:05:00,040
that contains the address and we're
gonna put something within

80
00:05:00,040 --> 00:05:03,680
with an adjustment outside a

81
00:05:03,680 --> 00:05:06,840
so if you know if you look at that
execute a bill that text fire

82
00:05:06,840 --> 00:05:10,060
that that execute will file which is the
file right

83
00:05:10,060 --> 00:05:13,260
you can use an awful not program on it
and you can then

84
00:05:13,260 --> 00:05:16,970
Shea hey I want to to see

85
00:05:16,970 --> 00:05:20,860
this this is the file name by the way
what that thing looks like

86
00:05:20,860 --> 00:05:23,880
and sure enough you're going to see
these two

87
00:05:23,880 --> 00:05:29,880
and search instructions corresponding to
the SOP

88
00:05:29,880 --> 00:05:33,800
however that's kinda difficult like you
know the computer has to use

89
00:05:33,800 --> 00:05:37,730
you know a probe if if you're actually
in the computer is doing it

90
00:05:37,730 --> 00:05:40,740
trying to do the D codes based on one's
gonna do

91
00:05:40,740 --> 00:05:44,910
if you're in a diss does debugger for me
or a disassembler

92
00:05:44,910 --> 00:05:49,010
it has programs as wanna used tables the
lookup

93
00:05:49,010 --> 00:05:52,300
how to build these if you're doing it by
hand you know you but you can flip

94
00:05:52,300 --> 00:05:54,670
through an actual instructions that
manual

95
00:05:54,670 --> 00:05:59,490
you can say okay with this this by and
this by Dan I'm gonna be doing this of

96
00:05:59,490 --> 00:05:59,880
the

97
00:05:59,880 --> 00:06:03,540
you can actually do with him but it's
typical you don't don't really have to

98
00:06:03,540 --> 00:06:09,270
worry about that because you can use
tools

99
00:06:09,270 --> 00:06:12,890
so this is a slide it might my friend
was

100
00:06:12,890 --> 00:06:16,970
saying thought was will

101
00:06:16,970 --> 00:06:21,170
obtuse these are the names the summer
the registers

102
00:06:21,170 --> 00:06:24,250
and they have there's a whole bunch of
them

103
00:06:24,250 --> 00:06:27,890
I don't I never no dollar them sometimes
I would like to know what to do but it's

104
00:06:27,890 --> 00:06:29,840
nice to be able to recognize

105
00:06:29,840 --> 00:06:33,200
the base ones what their use for

106
00:06:33,200 --> 00:06:36,940
really the most key thing here is the AX
register

107
00:06:36,940 --> 00:06:41,170
your ex and intend Intel it's simply is
your accumulate register there's a lot

108
00:06:41,170 --> 00:06:42,330
of instructions the

109
00:06:42,330 --> 00:06:45,690
use it as a result function call

110
00:06:45,690 --> 00:06:52,690
typically san the result there

111
00:06:54,790 --> 00:06:59,240
continuing these more the registers are
here I think the most important thing is

112
00:06:59,240 --> 00:07:01,650
the base pointer in the stack pointer

113
00:07:01,650 --> 00:07:04,910
the these two registers are used
primarily

114
00:07:04,910 --> 00:07:08,730
that handle how you go from one function
to the next

115
00:07:08,730 --> 00:07:14,380
and we're in which using a stack frame
maybe her that crashing the stack

116
00:07:14,380 --> 00:07:21,380
one-woman show that

117
00:07:21,580 --> 00:07:26,580
so I think this is a key point to
understand

118
00:07:26,580 --> 00:07:31,550
a function call is performing the caller
pushes function parameters on the stand

119
00:07:31,550 --> 00:07:34,740
and then you executed that

120
00:07:34,740 --> 00:07:38,330
instructions and you get back the for
and the base pointer

121
00:07:38,330 --> 00:07:45,330
is was actually maintaining the prime

122
00:07:45,680 --> 00:07:48,880
so here's the stack train remember

123
00:07:48,880 --> 00:07:53,830
the base porn on the stack pointer those
are instruction registers

124
00:07:53,830 --> 00:07:57,150
arm its did call to have your memory

125
00:07:57,150 --> 00:08:01,080
access from high memory low memory

126
00:08:01,080 --> 00:08:04,800
your base pointer is morning to your
year old base pointer

127
00:08:04,800 --> 00:08:08,240
so that you know like if we were to take
this and put back in the baseball winter

128
00:08:08,240 --> 00:08:10,930
would be down here some

129
00:08:10,930 --> 00:08:15,670
are the return address is what you call
a function this is we're gonna return to

130
00:08:15,670 --> 00:08:18,750
I the function arguments are like you're
going to put

131
00:08:18,750 --> 00:08:22,860
these things on the stand and return
address

132
00:08:22,860 --> 00:08:27,610
and the frame Warner resurfacing in
getting into the function

133
00:08:27,610 --> 00:08:30,970
in the function will start putting the
local variables which will maintain the

134
00:08:30,970 --> 00:08:33,819
ads

135
00:08:33,819 --> 00:08:37,329
and don't worry on trade issues here is
like I like the big picture

136
00:08:37,329 --> 00:08:43,229
because I've got some next slides which
are kinda cool and I think you'll enjoy

137
00:08:43,229 --> 00:08:48,389
the by the way that was for x86 32 bit
which you can get a 32 bit machine

138
00:08:48,389 --> 00:08:52,300
anymore for x86 64bits a little
different

139
00:08:52,300 --> 00:08:57,060
on some show you that there because they
have a lot of registers that were

140
00:08:57,060 --> 00:08:58,720
registers and 64-bit

141
00:08:58,720 --> 00:09:03,129
they can do things differently

142
00:09:03,129 --> 00:09:06,899
stack frame exit let me call a function

143
00:09:06,899 --> 00:09:10,620
minutes ago he acts register contains
rooms all

144
00:09:10,620 --> 00:09:13,850
are this is kinda what you're gonna look
at

145
00:09:13,850 --> 00:09:17,720
think that thing my memory low memory

146
00:09:17,720 --> 00:09:22,259
once again local variables or above your
bass player

147
00:09:22,259 --> 00:09:26,360
return dresses are below

148
00:09:26,360 --> 00:09:29,490
I everybody wants to

149
00:09:29,490 --> 00:09:33,139
do reverse engineering for Windows

150
00:09:33,139 --> 00:09:36,920
I but i wanna do it someone to do this
at first in Linux

151
00:09:36,920 --> 00:09:40,490
I for it it's a little bit easier

152
00:09:40,490 --> 00:09:43,620
it has a little bit about syntax
difference

153
00:09:43,620 --> 00:09:48,930
namely you know when it was system 5
that was from AT&T so the

154
00:09:48,930 --> 00:09:55,529
system by simply notation versus Windows
is going to use Intel

155
00:09:55,529 --> 00:09:59,410
my thing about this is this is

156
00:09:59,410 --> 00:10:03,160
your source and destination and they
have ordered syntax

157
00:10:03,160 --> 00:10:06,620
percentages meaning your register with
all this before

158
00:10:06,620 --> 00:10:13,620
a dollar signs a constant and brackets
me an address

159
00:10:17,910 --> 00:10:22,580
on I'm gonna use a thing called the GB
GB is that the new debugger

160
00:10:22,580 --> 00:10:27,540
if you set up in it file when you
started up

161
00:10:27,540 --> 00:10:31,140
it will do these things but you can also
if you're so inclined

162
00:10:31,140 --> 00:10:35,840
you can set the disassembly to in till
incident like looking at is

163
00:10:35,840 --> 00:10:39,290
system by the way and then

164
00:10:39,290 --> 00:10:44,060
here is just something very simple and
showing you that GB in the program files

165
00:10:44,060 --> 00:10:47,240
I'm gonna set the arms the executors
ball and

166
00:10:47,240 --> 00:10:54,240
particular addresses on a break and then

167
00:10:55,380 --> 00:10:59,070
here's how you would start up a debugger
for a program on

168
00:10:59,070 --> 00:11:03,600
going to use the text you are option so
that I can see the source

169
00:11:03,600 --> 00:11:08,380
and the registers at the same time were
possibly

170
00:11:08,380 --> 00:11:11,390
the assembly and register

171
00:11:11,390 --> 00:11:16,509
hate every time you see someone but

172
00:11:16,509 --> 00:11:18,949
GB they they simply show you a bunch of

173
00:11:18,949 --> 00:11:23,519
command hate to do this to you too but
if you're trying to pick it up for the

174
00:11:23,519 --> 00:11:24,529
first time

175
00:11:24,529 --> 00:11:28,229
if you can know these instructions got a
pretty good

176
00:11:28,229 --> 00:11:32,429
experience what's going on disassemble

177
00:11:32,429 --> 00:11:35,999
actually does that that's assembles and
disassembles from an address

178
00:11:35,999 --> 00:11:39,199
so here is this

179
00:11:39,199 --> 00:11:43,079
%ah what

180
00:11:43,079 --> 00:11:49,629
all yeah well I think the slide to the
best

181
00:11:49,629 --> 00:11:55,429
for this particular topic their animated
its ability mother time in

182
00:11:55,429 --> 00:12:00,669
I know basically one on one train show
you if you remember that code before

183
00:12:00,669 --> 00:12:04,629
you're inside the very simple we're
gonna have

184
00:12:04,629 --> 00:12:09,019
a 3 a variables were gonna have a i

185
00:12:09,019 --> 00:12:12,789
was one i close to we're going to do an
assignment the function

186
00:12:12,789 --> 00:12:15,849
and we're gonna come back out with them
printed now

187
00:12:15,849 --> 00:12:19,099
I'm so this

188
00:12:19,099 --> 00:12:22,709
it's like the trying to show you what

189
00:12:22,709 --> 00:12:25,829
the code looks like from this simply
level

190
00:12:25,829 --> 00:12:29,819
and and what the framework slowing

191
00:12:29,819 --> 00:12:33,139
so this is the frame

192
00:12:33,139 --> 00:12:38,419
if you remember we show the slides
before this is your instruction sequence

193
00:12:38,419 --> 00:12:43,089
so this is the a line of code

194
00:12:43,089 --> 00:12:47,389
and this is an address I don't have the
actual

195
00:12:47,389 --> 00:12:51,889
opcodes being shown that's not important
to me

196
00:12:51,889 --> 00:12:56,439
what's important is what's the assembly
line and then

197
00:12:56,439 --> 00:13:00,699
down here I'm going to set up the
periodically on with %uh

198
00:13:00,699 --> 00:13:05,919
look at the base pointer which is member
the frame and one of said it by 32

199
00:13:05,919 --> 00:13:09,069
the reason I'm doing like 32 that you
know in reverse

200
00:13:09,069 --> 00:13:13,279
because I wanna see as is putting stuff
on need to remember

201
00:13:13,279 --> 00:13:17,589
the high and low memory addresses so
this gives me a good range

202
00:13:17,589 --> 00:13:21,949
I'm gonna cut it showed on here that the
bottom

203
00:13:21,949 --> 00:13:25,679
the results for the registers were
arrested like EXE BX

204
00:13:25,679 --> 00:13:30,279
these registers with in the CPU so

205
00:13:30,279 --> 00:13:36,629
see what happens here so

206
00:13:36,629 --> 00:13:40,959
will start of this is your instruction
pointer this is your stack pointer

207
00:13:40,959 --> 00:13:46,559
this is your bass player this particular
instruction

208
00:13:46,559 --> 00:13:51,639
he's going to just see

209
00:13:51,639 --> 00:13:55,609
I think these were I NJ variables

210
00:13:55,609 --> 00:13:59,829
he resign J we're going to initialized

211
00:13:59,829 --> 00:14:03,589
said he BP is here minus

212
00:14:03,589 --> 00:14:07,609
hex see is -12 through an account up

213
00:14:07,609 --> 00:14:12,079
will to get to him 10 is

214
00:14:12,079 --> 00:14:16,049
and a small 16 you're gonna go up sixty

215
00:14:16,049 --> 00:14:19,569
so from here wind

216
00:14:19,569 --> 00:14:22,569
for four times for sixty

217
00:14:22,569 --> 00:14:28,389
so

218
00:14:28,389 --> 00:14:31,549
from there's the first instruction going
to

219
00:14:31,549 --> 00:14:35,769
just that you see the constant one is in
your prime

220
00:14:35,769 --> 00:14:39,439
the next one now we're gonna

221
00:14:39,439 --> 00:14:42,439
you're ready for call that functions

222
00:14:42,439 --> 00:14:46,869
song were actually thinking with my a

223
00:14:46,869 --> 00:14:52,459
putting it up we should see

224
00:14:52,459 --> 00:14:56,319
the that's putting the the first
variable

225
00:14:56,319 --> 00:15:01,459
up there within the next call it a
combination interruption

226
00:15:01,459 --> 00:15:04,720
it so those are the parameters the
function by the way

227
00:15:04,720 --> 00:15:07,970
the caller's account a combination it's
going to

228
00:15:07,970 --> 00:15:14,970
do a jump to was and now

229
00:15:16,489 --> 00:15:20,159
this is the routine that it's gonna go
to

230
00:15:20,159 --> 00:15:25,629
so this is the actual summer and

231
00:15:25,629 --> 00:15:30,159
you can see here this call wanna go to
this address

232
00:15:30,159 --> 00:15:37,159
at this address is the very beginning so
now

233
00:15:37,879 --> 00:15:44,809
your actually in the call once again

234
00:15:44,809 --> 00:15:49,889
your you changed your Henry changer
frame

235
00:15:49,889 --> 00:15:54,289
doesn't really care where the stack
pointer is here but it's just moving

236
00:15:54,289 --> 00:15:55,179
into a

237
00:15:55,179 --> 00:16:02,179
so that you can have space to put this
murder

238
00:16:06,500 --> 00:16:10,720
okay so now we've actually done our
calculation you can see that our

239
00:16:10,720 --> 00:16:15,710
our local variables 3 right that was the
thing that we put upon a star so now

240
00:16:15,710 --> 00:16:20,710
when we do our leave we're gonna put
that in the AX

241
00:16:20,710 --> 00:16:24,710
so believe your ex already

242
00:16:24,710 --> 00:16:27,930
yes so pulling at all the stack

243
00:16:27,930 --> 00:16:30,990
putting your your ex register and that
was once known as the update

244
00:16:30,990 --> 00:16:34,430
return

245
00:16:34,430 --> 00:16:41,430
is going to walk back down this

246
00:16:43,800 --> 00:16:47,110
and once again that we're back in the
Maynard team whereas we were in this

247
00:16:47,110 --> 00:16:48,100
routine here

248
00:16:48,100 --> 00:16:51,410
and

249
00:16:51,410 --> 00:16:56,090
then this is like we're gonna be doing
the push outside

250
00:16:56,090 --> 00:16:59,860
for the the actual

251
00:16:59,860 --> 00:17:03,870
pushing the live recall and what I was
wanting to show you here is

252
00:17:03,870 --> 00:17:08,520
the difference between doing the call
that was inside routine purse is doing a

253
00:17:08,520 --> 00:17:09,370
call to the

254
00:17:09,370 --> 00:17:13,040
library call but it's the same kind of
thing

255
00:17:13,040 --> 00:17:18,490
you know you're going to put stuff on
the stand uniform all

256
00:17:18,490 --> 00:17:25,490
and

257
00:17:31,190 --> 00:17:34,600
wanna get it down yes

258
00:17:34,600 --> 00:17:39,000
this address here this is the address
for

259
00:17:39,000 --> 00:17:42,720
print specifier if you remember when you
so the prana

260
00:17:42,720 --> 00:17:47,410
it had the address riches me had the
thing sing-song

261
00:17:47,410 --> 00:17:51,679
equals percent the that's a string
that's in memory that's

262
00:17:51,679 --> 00:17:56,250
that's too big a bad thing to say in or
register so has to go outside

263
00:17:56,250 --> 00:17:59,260
so

264
00:17:59,260 --> 00:18:02,630
and then once they're

265
00:18:02,630 --> 00:18:05,840
its takin as print at that function

266
00:18:05,840 --> 00:18:09,360
falling off what it's going to print and
then what

267
00:18:09,360 --> 00:18:13,370
the values from the the

268
00:18:13,370 --> 00:18:17,580
so

269
00:18:17,580 --> 00:18:21,290
if we do the the dop at that address

270
00:18:21,290 --> 00:18:24,700
you can see that you remember that song
people's person

271
00:18:24,700 --> 00:18:28,169
you do the ad

272
00:18:28,169 --> 00:18:35,169
comes back its own how many bytes and

273
00:18:36,620 --> 00:18:38,810
the that it would quit

274
00:18:38,810 --> 00:18:42,780
it's just like the return from the
actual main routine

275
00:18:42,780 --> 00:18:47,100
so just before we do like a Linux demo
here's what they once again

276
00:18:47,100 --> 00:18:50,980
power takes a source build a sequence of
opcodes I

277
00:18:50,980 --> 00:18:56,860
simply coz most primitive you're gonna
be able to

278
00:18:56,860 --> 00:19:00,130
you special constructs because like you
know when you have

279
00:19:00,130 --> 00:19:06,420
coding you're saying I'm going to doing
is conditioner awhile condition

280
00:19:06,420 --> 00:19:09,610
those all they all look the same always
the same

281
00:19:09,610 --> 00:19:13,610
you know it's not like random how was
gonna determine what you simply should

282
00:19:13,610 --> 00:19:14,090
be

283
00:19:14,090 --> 00:19:21,080
doesn't look with Const the

284
00:19:21,080 --> 00:19:25,480
so I think you're just showing you how
to sue the GCC

285
00:19:25,480 --> 00:19:28,590
you nice thing is that

286
00:19:28,590 --> 00:19:32,720
by default this old-style

287
00:19:32,720 --> 00:19:36,220
putting stuff in the stack frames in the
registers it

288
00:19:36,220 --> 00:19:40,740
doesn't do that anymore now it'll kind
short-circuit the

289
00:19:40,740 --> 00:19:45,280
but you can set the compiler options to
go back to the style

290
00:19:45,280 --> 00:19:48,990
its what i'm saying is

291
00:19:48,990 --> 00:19:53,110
the number your parameters it may not
put all the parameters on the stack some

292
00:19:53,110 --> 00:19:54,260
a movie in the Reg

293
00:19:54,260 --> 00:19:59,040
I hand and using your layout to see a
mix

294
00:19:59,040 --> 00:20:02,140
assembly and

295
00:20:02,140 --> 00:20:05,620
how I'm going to be using screenshots

296
00:20:05,620 --> 00:20:10,940
I love my GV session so that I can play
things back in time

297
00:20:10,940 --> 00:20:14,270
you know when you when you're writing
code in you're going through the booger

298
00:20:14,270 --> 00:20:18,020
its kinda easy to get lost when it's the

299
00:20:18,020 --> 00:20:21,730
following something but you want to be
able to back it up

300
00:20:21,730 --> 00:20:24,580
and sometimes it's hard to back up
because when the backup things have

301
00:20:24,580 --> 00:20:25,240
changed no

302
00:20:25,240 --> 00:20:28,440
you for reading written to that to that
memory location

303
00:20:28,440 --> 00:20:32,860
right but if you're taking if you're
getting snapshots

304
00:20:32,860 --> 00:20:36,850
you can go back and you can look at it
you said to have make sure you take all

305
00:20:36,850 --> 00:20:38,940
the snapshots to see all the things

306
00:20:38,940 --> 00:20:42,840
that you might want to look at backwards
and timeline

307
00:20:42,840 --> 00:20:47,960
so

308
00:20:47,960 --> 00:20:52,440
so basically this D but this is like
using GB

309
00:20:52,440 --> 00:20:56,970
I am using like set term to take the
screenshots

310
00:20:56,970 --> 00:21:02,510
and I'm going to show you how that I put
together those snaps of us to make those

311
00:21:02,510 --> 00:21:09,510
presentations did before my says

312
00:21:10,180 --> 00:21:14,250
so I think there I was showing you how
to do this is a terrible it's a small

313
00:21:14,250 --> 00:21:21,040
but the showing you what the setup looks
like I think

314
00:21:21,040 --> 00:21:25,830
should she do how the set term is being
shown and then

315
00:21:25,830 --> 00:21:29,990
how I'm just going back and forth this
is GB is not running here

316
00:21:29,990 --> 00:21:33,970
I'm just looking at what I did the
snapshots with GV

317
00:21:33,970 --> 00:21:39,680
think a bit as well you can do this with
a text editor verses like

318
00:21:39,680 --> 00:21:46,680
all use it. a pro you can do that

319
00:22:01,859 --> 00:22:05,119
once again I realize you can see that
will back in the back

320
00:22:05,119 --> 00:22:09,019
but I I really I think you wanted to be
able to look at this online

321
00:22:09,019 --> 00:22:12,519
and then you could play and replay it
works fine if you're

322
00:22:12,519 --> 00:22:16,229
San so so now we're gonna sit back a bit

323
00:22:16,229 --> 00:22:20,419
gonna look at Windows and one other
things I wanna show is

324
00:22:20,419 --> 00:22:23,499
how do you kinda look at it from

325
00:22:23,499 --> 00:22:26,729
a different perspective it would take
forever

326
00:22:26,729 --> 00:22:30,109
if you're trying to do something like
this find out what some code does

327
00:22:30,109 --> 00:22:33,820
and and it's not absolutely necessary

328
00:22:33,820 --> 00:22:38,129
you know you can't find a lot of ideas
about how a particular code works

329
00:22:38,129 --> 00:22:41,570
by looking at its behavior or

330
00:22:41,570 --> 00:22:44,859
looking at how it works in the system

331
00:22:44,859 --> 00:22:50,320
what routines in like the lil za use so

332
00:22:50,320 --> 00:22:53,389
here we're going to wicket

333
00:22:53,389 --> 00:22:56,460
a formal executed more file formats with
the face

334
00:22:56,460 --> 00:23:00,019
online I in Z is

335
00:23:00,019 --> 00:23:03,399
in the signatures MZ is

336
00:23:03,399 --> 00:23:07,259
the author to came up with the
specification

337
00:23:07,259 --> 00:23:11,219
and it's a certain by look at it was

338
00:23:11,219 --> 00:23:14,779
a hex editor were listed viewer

339
00:23:14,779 --> 00:23:18,909
the depends trying to hide its back
we've seen

340
00:23:18,909 --> 00:23:22,099
and all this is part two

341
00:23:22,099 --> 00:23:26,190
static analysis self-analysis I guess if
you're in

342
00:23:26,190 --> 00:23:30,530
analysis for doing contest singer

343
00:23:30,530 --> 00:23:34,760
Mauer XQ the basically it's like

344
00:23:34,760 --> 00:23:38,070
looking at a piece a code without
running

345
00:23:38,070 --> 00:23:41,370
and trying to understand what it's doing
at a high level

346
00:23:41,370 --> 00:23:46,250
looking at the dependencies determining
whether or not it has linked I'm a

347
00:23:46,250 --> 00:23:50,030
runtime dependencies looking at the
strings and resources using

348
00:23:50,030 --> 00:23:55,190
and looking at the hash you so

349
00:23:55,190 --> 00:23:59,290
has an example the hassle saw a guy
yesterday talking about

350
00:23:59,290 --> 00:24:02,580
virustotal much for everyone knows about
bars

351
00:24:02,580 --> 00:24:06,600
though here's an example base for your

352
00:24:06,600 --> 00:24:12,280
taken execute a ball go to this website
enter the name if you're executing

353
00:24:12,280 --> 00:24:16,330
all and it's going to look up in this
case someone had already analyzes

354
00:24:16,330 --> 00:24:19,670
mostly older sex you is law

355
00:24:19,670 --> 00:24:23,000
no I don't know if they will look at

356
00:24:23,000 --> 00:24:27,190
the entire it's a beautiful and compute
the hash or if they looked just like the

357
00:24:27,190 --> 00:24:28,550
runtime section

358
00:24:28,550 --> 00:24:32,820
but it's a good thing too

359
00:24:32,820 --> 00:24:36,820
just to play with if you have an excuse
you don't know gives you an idea

360
00:24:36,820 --> 00:24:43,820
doesn't cost anything

361
00:24:44,970 --> 00:24:49,200
and this is just a slight saying OK way

362
00:24:49,200 --> 00:24:52,580
you know why would you would care about
looking at an executed more

363
00:24:52,580 --> 00:24:55,990
with a tool well i mean here's an
example

364
00:24:55,990 --> 00:25:02,300
and Windows I have inexcusable it looks
to me like it's a bitmap

365
00:25:02,300 --> 00:25:06,590
right but when I run when I click on it
I don't get them you know it doesn't

366
00:25:06,590 --> 00:25:07,360
show me

367
00:25:07,360 --> 00:25:12,320
but I get a command prompt you know and
I brand

368
00:25:12,320 --> 00:25:17,640
actually try to run the program sure
enough something happen

369
00:25:17,640 --> 00:25:21,980
in this case I think it was just right
run like no

370
00:25:21,980 --> 00:25:25,160
with what that is re popping

371
00:25:25,160 --> 00:25:29,500
copy the file change the extension
through

372
00:25:29,500 --> 00:25:32,750
but you could tell

373
00:25:32,750 --> 00:25:37,900
by doing some static analysis you know
by looking at

374
00:25:37,900 --> 00:25:42,440
the execute a wall in with a hex editor

375
00:25:42,440 --> 00:25:45,590
see all this is not a

376
00:25:45,590 --> 00:25:48,940
this is not a

377
00:25:48,940 --> 00:25:53,280
bitmap it has a in ze at the very
beginning you see the PE

378
00:25:53,280 --> 00:25:58,240
you see the stub their reveals static
analysis

379
00:25:58,240 --> 00:26:04,110
you can look at it actually with PE view
it'll decoder the matter with the name

380
00:26:04,110 --> 00:26:04,650
is

381
00:26:04,650 --> 00:26:11,650
same you can look at it with the Pens
wanna talk about the pins later and I

382
00:26:12,020 --> 00:26:13,520
think that's a good slide

383
00:26:13,520 --> 00:26:20,190
what depends is a program that'll say
local for a particular execute a wall

384
00:26:20,190 --> 00:26:25,220
the mysterious foo execute a ball water
all the modules that it uses

385
00:26:25,220 --> 00:26:29,180
at the first pass and no and when we saw
the prisoner

386
00:26:29,180 --> 00:26:32,920
now that Lynn ex-demo that comes from
standard library

387
00:26:32,920 --> 00:26:36,960
that would be if this was landings you
would have Lipsy

388
00:26:36,960 --> 00:26:42,750
there and then for a particular or

389
00:26:42,750 --> 00:26:45,810
library its then gonna show you

390
00:26:45,810 --> 00:26:49,520
in that library Rd lil water the
routines

391
00:26:49,520 --> 00:26:53,510
there that are definitely by this level
it's you will be in use

392
00:26:53,510 --> 00:26:57,370
and then for that library

393
00:26:57,370 --> 00:27:02,430
water all the possible entry points and
then

394
00:27:02,430 --> 00:27:07,390
I think this is just a list of all the
modules I mostly women I'm interested in

395
00:27:07,390 --> 00:27:08,030
this one

396
00:27:08,030 --> 00:27:12,050
and say look if you were to do an
expansion you can say like okay

397
00:27:12,050 --> 00:27:15,820
this guy uses another one and that one

398
00:27:15,820 --> 00:27:19,300
uses more routines as you can to get a a
feel for

399
00:27:19,300 --> 00:27:22,900
and based upon these

400
00:27:22,900 --> 00:27:26,980
you can hook by or no or you can do by

401
00:27:26,980 --> 00:27:31,620
name this is kind of key because

402
00:27:31,620 --> 00:27:36,050
you can use these addresses to know
where I'm going to cook something

403
00:27:36,050 --> 00:27:42,080
it

404
00:27:42,080 --> 00:27:46,780
this is static this is looking at the
poor will execute files

405
00:27:46,780 --> 00:27:50,540
by the sections and its okay he

406
00:27:50,540 --> 00:27:54,130
here is importing this library is in the
import sections

407
00:27:54,130 --> 00:27:58,550
the so you don't have to you know so you
have this food I X you don't actually

408
00:27:58,550 --> 00:28:02,350
have to run at this point and that's the
whole thing about the static analysis

409
00:28:02,350 --> 00:28:09,350
so

410
00:28:09,590 --> 00:28:15,820
on Windows if your gonna determine the
capabilities

411
00:28:15,820 --> 00:28:19,190
based upon just the DNL the deals
included

412
00:28:19,190 --> 00:28:22,980
if you see this one you have a good idea
that it's going to be.

413
00:28:22,980 --> 00:28:28,750
registry were you're seeing this one
some people in process memory file

414
00:28:28,750 --> 00:28:32,890
if you see any bearing in some this MSVC
runtime:

415
00:28:32,890 --> 00:28:36,710
I ima see run time with the number

416
00:28:36,710 --> 00:28:40,030
or CPP it's like this Lipsy

417
00:28:40,030 --> 00:28:44,090
one standard libraries the CPP is just
saying issues in the sepals plus

418
00:28:44,090 --> 00:28:48,380
versions the sea you Burzum your ENT

419
00:28:48,380 --> 00:28:51,910
neier 10 times xD wheels are going to
use those directly

420
00:28:51,910 --> 00:28:55,120
other deals use them but there are some
things there

421
00:28:55,120 --> 00:28:59,290
will use miss the criminal if you if you
see an execute a ball has a dependency

422
00:28:59,290 --> 00:28:59,910
on

423
00:28:59,910 --> 00:29:03,770
she'll 32 means the chance is gonna be
getting an ex

424
00:29:03,770 --> 00:29:08,080
chill wrong man Paul or executing

425
00:29:08,080 --> 00:29:13,360
I user32 may not be really be there
interested it's the Windows user

426
00:29:13,360 --> 00:29:15,160
interface but from that

427
00:29:15,160 --> 00:29:18,840
you can then cook things to get you back
Inc

428
00:29:18,840 --> 00:29:23,780
and i guess im like the way back when I
was looking an excusable

429
00:29:23,780 --> 00:29:27,540
not so much to determine what it did

430
00:29:27,540 --> 00:29:31,950
but reverse engineering it to change
what it's doing

431
00:29:31,950 --> 00:29:35,850
we go by whatever I O there is and if
it's a user interface

432
00:29:35,850 --> 00:29:39,520
pop-up you a message box but not in time

433
00:29:39,520 --> 00:29:43,880
switcher you're gonna go from there okay
you've got this message

434
00:29:43,880 --> 00:29:46,910
how did you get that message what was
the sequence

435
00:29:46,910 --> 00:29:51,540
to generate

436
00:29:51,540 --> 00:29:56,720
a you'll see when I know that this
high-level networking persons

437
00:29:56,720 --> 00:30:00,110
one saw so this will be things like

438
00:30:00,110 --> 00:30:06,580
HTTP this would be things like opening
saw

439
00:30:06,580 --> 00:30:09,890
to dynamic analysis when you're running
GB

440
00:30:09,890 --> 00:30:13,060
you're at the most lowest level with
dynamic analysis we actually

441
00:30:13,060 --> 00:30:16,630
running but you know you probably do
dynamic now

442
00:30:16,630 --> 00:30:20,940
now so what i'm looking i probably
around like a registry monitor

443
00:30:20,940 --> 00:30:27,210
or you branic file monitor I want to
install this program in C with

444
00:30:27,210 --> 00:30:31,400
and so in this particular case you're
gonna run the execute a ball but you're

445
00:30:31,400 --> 00:30:32,260
going to

446
00:30:32,260 --> 00:30:35,330
what with the XQ does

447
00:30:35,330 --> 00:30:42,330
in these particular type

448
00:30:42,779 --> 00:30:43,249
so

449
00:30:43,249 --> 00:30:46,679
in order to run something special person
XQ wouldn't you don't really know what

450
00:30:46,679 --> 00:30:47,279
it is

451
00:30:47,279 --> 00:30:50,499
you don't wanna take your development
machine

452
00:30:50,499 --> 00:30:53,940
work on all the time and run some
mystery execute alright

453
00:30:53,940 --> 00:30:57,470
it's very threatening so you wanna

454
00:30:57,470 --> 00:31:00,539
try and use it in a VMware and VMware
now great

455
00:31:00,539 --> 00:31:04,389
and the nice thing about the M's is

456
00:31:04,389 --> 00:31:08,679
you take a snapshot you would say okay
I'm gonna sit at my little Windows XP VM

457
00:31:08,679 --> 00:31:11,710
I wanna configure it so the I have

458
00:31:11,710 --> 00:31:14,850
I networking from this VM to the same

459
00:31:14,850 --> 00:31:19,259
another VM on the same box networking is
only gonna go between the two

460
00:31:19,259 --> 00:31:22,489
I'm gonna run it here I'll see

461
00:31:22,489 --> 00:31:25,749
the communications between the the two
machines

462
00:31:25,749 --> 00:31:29,419
I have networking I can't see only he's
opening up or always going to

463
00:31:29,419 --> 00:31:32,820
HTTP always trying to finish this URL

464
00:31:32,820 --> 00:31:36,710
what's going on and if it downloads

465
00:31:36,710 --> 00:31:40,259
or tries to do something dangerous its
effects that

466
00:31:40,259 --> 00:31:43,889
p.m. and it's a snapshot in this role at
bat

467
00:31:43,889 --> 00:31:48,509
repairs I all I missed it the first time
will be destroyed by the snap saw

468
00:31:48,509 --> 00:31:55,509
Sigma tools up a little differently and
do it again so

469
00:31:57,859 --> 00:32:00,859
problem on is a

470
00:32:00,859 --> 00:32:07,049
a tool for its dynamic analysis on
Windows

471
00:32:07,049 --> 00:32:13,470
don't think I have the

472
00:32:13,470 --> 00:32:16,720
on this one don't wise going with

473
00:32:16,720 --> 00:32:21,090
that's a very small one

474
00:32:21,090 --> 00:32:27,649
but what I'm trying to show here is I
deserve a simple batch file

475
00:32:27,649 --> 00:32:31,239
and with this batch file I am

476
00:32:31,239 --> 00:32:36,570
going to execute believers it's a Python
program which is accessing

477
00:32:36,570 --> 00:32:41,600
this within problem on I'm saying based
upon all

478
00:32:41,600 --> 00:32:45,549
processes I want to search for

479
00:32:45,549 --> 00:32:49,049
this particular process in this command
prompt that's running into Lou

480
00:32:49,049 --> 00:32:52,049
and I want to its then filter

481
00:32:52,049 --> 00:32:55,590
by file i/o so I could see

482
00:32:55,590 --> 00:32:59,009
all this particular program is accessing

483
00:32:59,009 --> 00:33:03,799
these files on files and its kinda
helpful right

484
00:33:03,799 --> 00:33:07,429
I run this program is busy YZ touching

485
00:33:07,429 --> 00:33:11,619
something in the Windows directory
wasn't doing the right

486
00:33:11,619 --> 00:33:18,619
particular you can filter it down for a
reason right this is a dependency

487
00:33:19,950 --> 00:33:21,059
example

488
00:33:21,059 --> 00:33:24,509
and I think we're gonna do is when I use
the same

489
00:33:24,509 --> 00:33:27,529
code again which is

490
00:33:27,529 --> 00:33:30,940
it's kinda hard to see but the

491
00:33:30,940 --> 00:33:34,409
the program that I took and when it's

492
00:33:34,409 --> 00:33:37,529
which was this simple add we're gonna
run in Windows

493
00:33:37,529 --> 00:33:41,840
and what i'm showing here is this is the
debugger

494
00:33:41,840 --> 00:33:45,809
I is showing the sea lines

495
00:33:45,809 --> 00:33:51,220
in the debugger that's the bold lines
the stuff in between is the assembly

496
00:33:51,220 --> 00:33:54,570
and then that particular execute a wall

497
00:33:54,570 --> 00:33:57,710
he doesn't have very many deal will
seize using

498
00:33:57,710 --> 00:34:01,279
and for that one particular the lil I

499
00:34:01,279 --> 00:34:07,129
this routine here very best apology San
Fran

500
00:34:07,129 --> 00:34:10,649
see it with the key is we're gonna look
at this

501
00:34:10,649 --> 00:34:17,649
that program in Windows I

502
00:34:19,549 --> 00:34:23,889
this is a different one and I think this
one is more interesting

503
00:34:23,889 --> 00:34:27,089
and others I want to show this before
when on because

504
00:34:27,089 --> 00:34:31,329
this particular program one that I wrote
uses

505
00:34:31,329 --> 00:34:35,569
dynamic linking so when you run this
dependency

506
00:34:35,569 --> 00:34:40,399
discover gets back to the question you
said don't but you have to run something

507
00:34:40,399 --> 00:34:43,899
you can set it up so that you have load
time linking

508
00:34:43,899 --> 00:34:46,970
so this executed well when he starts up

509
00:34:46,970 --> 00:34:50,649
at low time these are all the deals and
I'm gonna use

510
00:34:50,649 --> 00:34:55,369
but you can also have it setup so that
this program when he starts up

511
00:34:55,369 --> 00:34:59,250
he's going to try to Ron

512
00:34:59,250 --> 00:35:02,799
runtime: find a deal by name

513
00:35:02,799 --> 00:35:06,940
based upon that name is then going to
use functions within it

514
00:35:06,940 --> 00:35:12,279
so you wouldn't see it appear now one of
the things that you can keep keep in

515
00:35:12,279 --> 00:35:13,400
mind on a piece a

516
00:35:13,400 --> 00:35:16,829
malware something trying to hide
something is

517
00:35:16,829 --> 00:35:20,799
if if you don't have a lot to deal entry
points being used

518
00:35:20,799 --> 00:35:24,170
at statically you think wire--the

519
00:35:24,170 --> 00:35:28,299
they doing that and there could be some
key

520
00:35:28,299 --> 00:35:32,680
but it does have to use particular
routines like

521
00:35:32,680 --> 00:35:36,880
load library and get Prock instance to
do it

522
00:35:36,880 --> 00:35:40,849
those also if you if you don't even have
their

523
00:35:40,849 --> 00:35:43,990
a it's a packed execute always

524
00:35:43,990 --> 00:35:47,390
got some kinda compression its gonna
have to its gonna

525
00:35:47,390 --> 00:35:54,059
Ron this one decompress and memory and
that is why do it Mon

526
00:35:54,059 --> 00:35:59,170
on

527
00:35:59,170 --> 00:36:06,170
wins this this is so

528
00:36:06,829 --> 00:36:10,960
the simple I think in this particular
case

529
00:36:10,960 --> 00:36:14,369
what does lawyer that's exactly what I'm
showing here is

530
00:36:14,369 --> 00:36:19,079
this is all the code that it takes to

531
00:36:19,079 --> 00:36:23,490
load a deal and then based upon the lab
for me

532
00:36:23,490 --> 00:36:27,140
here's the below to the deal well with
the sample the OL

533
00:36:27,140 --> 00:36:31,190
and then here's how I am when I get the
function pointer to a particular

534
00:36:31,190 --> 00:36:33,279
function in there

535
00:36:33,279 --> 00:36:39,170
and from thats we can look at that as
well

536
00:36:39,170 --> 00:36:43,430
not the complex

537
00:36:43,430 --> 00:36:47,150
I strings is another example

538
00:36:47,150 --> 00:36:51,240
something that you can do I realize now
that should have been in the

539
00:36:51,240 --> 00:36:55,660
static analysis section just running the
strings in a program seeing the strings

540
00:36:55,660 --> 00:36:57,079
are there that if you see a

541
00:36:57,079 --> 00:37:03,609
a URL in a really good idea that he's
doing something

542
00:37:03,609 --> 00:37:07,770
but they can also be used as how you're
going to work for

543
00:37:07,770 --> 00:37:10,839
those function calls like wears a
function call that

544
00:37:10,839 --> 00:37:16,230
references stir

545
00:37:16,230 --> 00:37:19,940
yeah

546
00:37:19,940 --> 00:37:23,420
I just use the strings program I think I

547
00:37:23,420 --> 00:37:27,400
all I did there was use the like a new
version

548
00:37:27,400 --> 00:37:31,440
a to something about strings

549
00:37:31,440 --> 00:37:35,920
sons were on their you're awesome her
work on some code

550
00:37:35,920 --> 00:37:40,340
where a me this is it was more an
exercise a

551
00:37:40,340 --> 00:37:43,849
just in all of this all this if you're
trying to

552
00:37:43,849 --> 00:37:47,730
to find on them our guys what they're
doing it's basically

553
00:37:47,730 --> 00:37:51,410
it's just layers and layers and layers
up different

554
00:37:51,410 --> 00:37:55,349
protection because eventually you but
you could figure it out

555
00:37:55,349 --> 00:37:58,520
and there's a way to do

556
00:37:58,520 --> 00:38:02,010
obfuscation to the strings select you
would few

557
00:38:02,010 --> 00:38:05,020
looked you would recognize any the
strains

558
00:38:05,020 --> 00:38:08,190
basically its I'm going to

559
00:38:08,190 --> 00:38:11,359
scramble my Spurs strings at
compile-time

560
00:38:11,359 --> 00:38:14,560
and then runtime: I want to use the
Ripper

561
00:38:14,560 --> 00:38:18,050
right before I do that function call I'm
then moyer

562
00:38:18,050 --> 00:38:21,170
the crypt that string use it

563
00:38:21,170 --> 00:38:24,970
and then that buffer in memory I will
encrypt by

564
00:38:24,970 --> 00:38:30,050
and that way and statically

565
00:38:30,050 --> 00:38:34,160
you would never see the strings in there
that say fits your lil

566
00:38:34,160 --> 00:38:38,589
blah blah blah but you would be using a
string eventually

567
00:38:38,589 --> 00:38:41,790
so

568
00:38:41,790 --> 00:38:45,560
here was gonna use that same program
we're gonna

569
00:38:45,560 --> 00:38:50,390
work at it was symbols that is not
reverse engineering this is just

570
00:38:50,390 --> 00:38:51,170
debugging

571
00:38:51,170 --> 00:38:54,640
but i wanna get you can in the feel for
how it works

572
00:38:54,640 --> 00:39:01,640
so that then we're gonna go to mix mood
in Ventura going no symbols

573
00:39:06,160 --> 00:39:12,569
so this isn't a VM on landing spots and
issues in the free 2000

574
00:39:12,569 --> 00:39:15,680
attacks to a program

575
00:39:15,680 --> 00:39:18,690
because I'm attached to it by the way it
knows where it is

576
00:39:18,690 --> 00:39:24,109
I think in this case what I wanna do is
someone to hook

577
00:39:24,109 --> 00:39:27,499
on actual

578
00:39:27,499 --> 00:39:31,299
starting up a program in getting the the
dialogue

579
00:39:31,299 --> 00:39:31,880
and

580
00:39:31,880 --> 00:39:35,099
and base upon that I can

581
00:39:35,099 --> 00:39:41,500
go to the when this message

582
00:39:41,500 --> 00:39:42,780
this is the switch

583
00:39:42,780 --> 00:39:48,950
there's the dialog box this is a a call
stack

584
00:39:48,950 --> 00:39:52,570
so that's that frame that we saw on the
right hand side but since we have

585
00:39:52,570 --> 00:39:53,280
symbols

586
00:39:53,280 --> 00:39:58,230
take until what's going on these are
some variables

587
00:39:58,230 --> 00:40:01,280
and I just wanna like trivially sample
how

588
00:40:01,280 --> 00:40:04,300
10 look for that

589
00:40:04,300 --> 00:40:08,070
OK or cancel and what it's going to do

590
00:40:08,070 --> 00:40:13,080
with the we

591
00:40:13,080 --> 00:40:20,080
wall

592
00:40:22,640 --> 00:40:25,880
I'm changin okay here I'm changing the
year X

593
00:40:25,880 --> 00:40:29,310
their also that's what's coming back and
I think

594
00:40:29,310 --> 00:40:36,310
I was getting the resort

595
00:40:41,830 --> 00:40:48,830
that's

596
00:40:51,790 --> 00:40:58,790
this is one with mix see an assembly

597
00:40:59,330 --> 00:41:06,330
got smaller

598
00:41:15,860 --> 00:41:18,940
so in this case I took that some program

599
00:41:18,940 --> 00:41:22,450
and I've had it so it was had a loop

600
00:41:22,450 --> 00:41:25,560
so that's the same thing and I just said
okay we're gonna do like

601
00:41:25,560 --> 00:41:29,460
as friend we're going to get about you
and now we're just gonna do this over

602
00:41:29,460 --> 00:41:30,360
and over

603
00:41:30,360 --> 00:41:35,110
and we're gonna change I NJ that some
system calls

604
00:41:35,110 --> 00:41:38,290
additional will make sure I NJ your

605
00:41:38,290 --> 00:41:43,430
some values here and we're just gonna
run this and this is so that you can

606
00:41:43,430 --> 00:41:46,960
yeah the executors boiling you can palsy
you can jump into

607
00:41:46,960 --> 00:41:52,650
clear screen I'm storing it up

608
00:41:52,650 --> 00:41:57,760
although there is a fucking the strains

609
00:41:57,760 --> 00:42:01,470
so i'm looking for. that specifier in
memory

610
00:42:01,470 --> 00:42:08,220
so that we know the address

611
00:42:08,220 --> 00:42:10,080
so we're going to be looking for this

612
00:42:10,080 --> 00:42:14,490
this is what we want to get straining

613
00:42:14,490 --> 00:42:19,130
is there is a particular offset we look
and see we're at all

614
00:42:19,130 --> 00:42:23,480
so we're running

615
00:42:23,480 --> 00:42:27,500
never gonna go back up to yes to you.
attached to that process

616
00:42:27,500 --> 00:42:32,240
that was the ad Dixie program saw and

617
00:42:32,240 --> 00:42:36,970
this is my stack frames agree here I'm
in ideal well that's not the actual

618
00:42:36,970 --> 00:42:39,860
executed right you know one

619
00:42:39,860 --> 00:42:43,560
resold dependency goes down the chain
call something

620
00:42:43,560 --> 00:42:48,390
and as I'm watching TV doing this this
clicking okay okay okay

621
00:42:48,390 --> 00:42:52,090
to IC this show up

622
00:42:52,090 --> 00:42:55,450
as at and I think I even miss this once

623
00:42:55,450 --> 00:42:58,560
but this was a staggering this is only
thing I'm really looking

624
00:42:58,560 --> 00:43:01,870
I'm not looking at the register just
look in the sea

625
00:43:01,870 --> 00:43:05,560
as I you know I Paul's the program

626
00:43:05,560 --> 00:43:09,980
let it return from functions and stare
until I get

627
00:43:09,980 --> 00:43:16,980
in time

628
00:43:20,740 --> 00:43:23,930
okay so now I'm in the ad now i'm
looking

629
00:43:23,930 --> 00:43:29,300
based upon these addresses there's an
address

630
00:43:29,300 --> 00:43:32,540
I'm going to set up my basically appear

631
00:43:32,540 --> 00:43:36,150
I'm looking at the the the whole frame

632
00:43:36,150 --> 00:43:39,770
down here i'm looking at stack for a
particular portion

633
00:43:39,770 --> 00:43:43,060
I think I've got like the VP -1 28

634
00:43:43,060 --> 00:43:47,690
sewn Windows is gotta love the bigger
frame so I'm making

635
00:43:47,690 --> 00:43:52,400
bigger that way i can. see the X is
showing up

636
00:43:52,400 --> 00:43:55,760
I'm looking for that address as well as
highlighting

637
00:43:55,760 --> 00:44:02,760
there

638
00:44:05,609 --> 00:44:08,160
think this is the address was there

639
00:44:08,160 --> 00:44:15,160
there was our

640
00:44:15,450 --> 00:44:18,370
those numbers yeah x3 or

641
00:44:18,370 --> 00:44:23,480
here so we're gonna kinda hats this a
little bit just to make you change

642
00:44:23,480 --> 00:44:27,450
become one Obama

643
00:44:27,450 --> 00:44:34,450
with up to 11

644
00:44:34,900 --> 00:44:38,900
it certainly this is like looking for
the string itself there it is

645
00:44:38,900 --> 00:44:42,140
so now

646
00:44:42,140 --> 00:44:45,660
that 3 wanna be 11 which is actually

647
00:44:45,660 --> 00:44:49,800
11 X the 17

648
00:44:49,800 --> 00:44:53,500
and

649
00:44:53,500 --> 00:44:57,610
now should concert scene

650
00:44:57,610 --> 00:45:04,610
re the 11 RK some stepping

651
00:45:07,070 --> 00:45:14,070
just to show you adjusting it a little
at a time

652
00:45:19,790 --> 00:45:20,190
are

653
00:45:20,190 --> 00:45:24,510
okay I remember when I did this this is
a I actually had an error here

654
00:45:24,510 --> 00:45:28,190
I A step too much fluoride I changed
long

655
00:45:28,190 --> 00:45:35,190
but it's gonna come back ones

656
00:45:55,680 --> 00:45:58,819
once again the key is making sure you're
in the right

657
00:45:58,819 --> 00:46:02,089
the lil are right frame

658
00:46:02,089 --> 00:46:05,309
so you don't want to be in these deals
that you don't have source code and

659
00:46:05,309 --> 00:46:08,349
and they your

660
00:46:08,349 --> 00:46:12,759
not the program you're not gonna be
changing the

661
00:46:12,759 --> 00:46:19,759
reaching the program

662
00:46:34,480 --> 00:46:37,510
in there's 3

663
00:46:37,510 --> 00:46:44,510
there were

664
00:46:44,940 --> 00:46:49,369
do in the u.p nyse: planes much wanna
see the

665
00:46:49,369 --> 00:46:56,369
make chain this is pushing them

666
00:46:57,970 --> 00:47:04,970
cool call

667
00:47:08,880 --> 00:47:15,010
this

668
00:47:15,010 --> 00:47:17,980
so there's still once again this is
that's not

669
00:47:17,980 --> 00:47:22,460
like rocket scientist or anything
basically I'm just trying to show you

670
00:47:22,460 --> 00:47:23,270
how

671
00:47:23,270 --> 00:47:26,570
you can use the debugger within Windows

672
00:47:26,570 --> 00:47:31,080
that's free and

673
00:47:31,080 --> 00:47:37,360
and I was trying to that

674
00:47:37,360 --> 00:47:41,970
without how you go about with how the
the source code

675
00:47:41,970 --> 00:47:45,430
looking up the address is that's coming
from that strain

676
00:47:45,430 --> 00:47:48,990
knowing where 09 I'll

677
00:47:48,990 --> 00:47:52,510
so want to see that again we'll show you
this

678
00:47:52,510 --> 00:47:56,880
so like I said all this stuff is kind of
hard you don't really need

679
00:47:56,880 --> 00:48:00,140
me we reverse engineering something
you're never gonna know with a 100

680
00:48:00,140 --> 00:48:01,990
percent certainty what it's doing

681
00:48:01,990 --> 00:48:05,070
because some guy was working with source

682
00:48:05,070 --> 00:48:08,180
you're working to spawn what the
machines doing

683
00:48:08,180 --> 00:48:12,010
but you can get a good idea of what it's
doing but looking at it from different

684
00:48:12,010 --> 00:48:12,800
angles

685
00:48:12,800 --> 00:48:16,780
and one of the things that I think I'm
in school year is this

686
00:48:16,780 --> 00:48:20,280
using the two VM's using the idea that
Sen

687
00:48:20,280 --> 00:48:24,460
to Rana WinXP and telling them

688
00:48:24,460 --> 00:48:29,580
the Windows VM what web sites their DNS

689
00:48:29,580 --> 00:48:32,740
resolve to all he's trying to Iran

690
00:48:32,740 --> 00:48:37,190
I'll the trying to fetch a web page
let's see what web pages

691
00:48:37,190 --> 00:48:40,730
so this is just kind of showing you to
be in

692
00:48:40,730 --> 00:48:47,730
running side by side minutes

693
00:48:53,620 --> 00:48:56,220
this is showing you the eye and its in
config file

694
00:48:56,220 --> 00:48:59,910
focus comes in

695
00:48:59,910 --> 00:49:03,880
here what's going on and I think I'm
just showing

696
00:49:03,880 --> 00:49:06,970
what the was

697
00:49:06,970 --> 00:49:10,750
this is just I I think this is a

698
00:49:10,750 --> 00:49:15,590
net SH for it showing how I want to set
up the IP addresses

699
00:49:15,590 --> 00:49:19,060
on the the windows versus the winnings

700
00:49:19,060 --> 00:49:26,060
those to be insults going and then

701
00:49:28,289 --> 00:49:30,730
use which I think I did a PM

702
00:49:30,730 --> 00:49:37,730
replay

703
00:49:38,930 --> 00:49:43,330
were coming to an end so

704
00:49:43,330 --> 00:49:45,940
your opinion

705
00:49:45,940 --> 00:49:49,940
so to the here's something I just wanna
say about this and that is

706
00:49:49,940 --> 00:49:53,590
you show all these things like all this
is like 32-bit

707
00:49:53,590 --> 00:49:57,600
my only thirty don't 264 than you know
people have

708
00:49:57,600 --> 00:50:01,140
all kinds of techniques are going to use
to prevent you

709
00:50:01,140 --> 00:50:07,150
from finding out what they're doing for
example on this very last thing we saw

710
00:50:07,150 --> 00:50:07,640
all

711
00:50:07,640 --> 00:50:10,840
you have code in there they could say
all

712
00:50:10,840 --> 00:50:14,080
if I'm on a BN like the BM we just saw
all

713
00:50:14,080 --> 00:50:18,240
I'm gonna behave differently right well

714
00:50:18,240 --> 00:50:21,640
thing is that they have that in their
you can look for

715
00:50:21,640 --> 00:50:25,690
you can patch that I'll I'll

716
00:50:25,690 --> 00:50:29,530
they have things like to anti the buzzer
alarm in the debugger

717
00:50:29,530 --> 00:50:33,010
110 star use the in 13 because I like

718
00:50:33,010 --> 00:50:37,160
screw up their life to make it difficult
for them whether in the barroom wanna

719
00:50:37,160 --> 00:50:38,120
I'm gonna be sons

720
00:50:38,120 --> 00:50:43,340
no you know if I'm in a burger and you
just wanna let something rippin' like we

721
00:50:43,340 --> 00:50:46,080
were in the frames and relaxing and Ron
Ron Ron

722
00:50:46,080 --> 00:50:49,550
you know or return at a function return
a function

723
00:50:49,550 --> 00:50:53,650
as we're watching those frames well that
takes time

724
00:50:53,650 --> 00:50:56,950
right if you are running at computer
time you know it was

725
00:50:56,950 --> 00:51:00,700
running with outside the debugger it
would be by real quick

726
00:51:00,700 --> 00:51:04,650
you could have routines in there that
would say all I know how long it's gonna

727
00:51:04,650 --> 00:51:05,140
take

728
00:51:05,140 --> 00:51:08,360
clock ticks or whatever wall time who
knows

729
00:51:08,360 --> 00:51:14,000
between these two bits of code but Obama
did a bugger somebody's playing around

730
00:51:14,000 --> 00:51:15,300
with a single step in it

731
00:51:15,300 --> 00:51:19,160
and the actual click take count goes off
the wall

732
00:51:19,160 --> 00:51:23,890
on on a minute the bugger so I'm not
going to do the secret things that I

733
00:51:23,890 --> 00:51:30,890
want to do

734
00:51:35,439 --> 00:51:40,289
I I would do I'm wearing too late with
the burgers wanna do

735
00:51:40,289 --> 00:51:44,789
so yep it's the problem is if you can
use the debugger to pull out the

736
00:51:44,789 --> 00:51:45,809
debugging stuff

737
00:51:45,809 --> 00:51:51,079
you're going to use possibly December
then you can run into the problem the

738
00:51:51,079 --> 00:51:55,489
all they put an anti disassembling type
stuff so you know you

739
00:51:55,489 --> 00:51:59,829
the they had their case my ex you have
to go back to

740
00:51:59,829 --> 00:52:05,619
let's go to an editor X just like you're
saying what you can do in

741
00:52:05,619 --> 00:52:09,910
nynex per you goin' based upon an offset

742
00:52:09,910 --> 00:52:13,660
something just week make in nineteen

743
00:52:13,660 --> 00:52:18,579
to question

744
00:52:18,579 --> 00:52:21,589
the the timing

745
00:52:21,589 --> 00:52:25,670
is a debugger attached a and I

746
00:52:25,670 --> 00:52:29,259
one of those demos when the reasons why
people up there was you could actually

747
00:52:29,259 --> 00:52:30,130
see

748
00:52:30,130 --> 00:52:34,819
there's Microsoft and their deals will
have the ability to say

749
00:52:34,819 --> 00:52:38,140
am i under control over the booger and
you could see the

750
00:52:38,140 --> 00:52:41,189
the system call actually up there was

751
00:52:41,189 --> 00:52:44,369
would have paid attention but it was on
the slide

752
00:52:44,369 --> 00:52:47,499
I you can also check out the

753
00:52:47,499 --> 00:52:50,640
if you're the test with a player but
looking at

754
00:52:50,640 --> 00:52:53,650
things horrible execution law or you

755
00:52:53,650 --> 00:52:56,769
the law it's like this

756
00:52:56,769 --> 00:53:01,219
is like the system component that all
executions have that

757
00:53:01,219 --> 00:53:04,219
the Microsoft when this is going to
maintain

758
00:53:04,219 --> 00:53:11,219
you can do something this is true bill
is the output debug message:

759
00:53:11,359 --> 00:53:15,130
the some people like to when they write
code

760
00:53:15,130 --> 00:53:20,189
and so do I print aa to standard al

761
00:53:20,189 --> 00:53:23,640
they would do this output debug message:
to

762
00:53:23,640 --> 00:53:27,339
a special are output log

763
00:53:27,339 --> 00:53:30,979
and then you can look at the login you
can get your results

764
00:53:30,979 --> 00:53:34,469
for messaging well

765
00:53:34,469 --> 00:53:38,959
the the code that doesn't want the to
know the center debug control

766
00:53:38,959 --> 00:53:43,539
could write to the an effing returns
back without exception

767
00:53:43,539 --> 00:53:47,609
it's running right mindset for you a

768
00:53:47,609 --> 00:53:51,160
anti December I don't insure the

769
00:53:51,160 --> 00:53:54,229
disassembly stuff here ID a pro

770
00:53:54,229 --> 00:53:59,499
Raleigh the book but I

771
00:53:59,499 --> 00:54:04,479
there're more like you know you're going
to analyze the code

772
00:54:04,479 --> 00:54:07,859
and you're going to look at it you can
try and Tracy and

773
00:54:07,859 --> 00:54:10,869
and that's that's free coolness

774
00:54:10,869 --> 00:54:14,699
difficult it's not something I do I
wanna run into the booger

775
00:54:14,699 --> 00:54:17,859
so I can see you as to when you're just
too much stuff going on

776
00:54:17,859 --> 00:54:23,289
but what they will do to prevent you
from being able to Ron

777
00:54:23,289 --> 00:54:26,609
and at this are being able to look at it
with the disassembler

778
00:54:26,609 --> 00:54:29,969
and you can disassemble with hand the
debugger

779
00:54:29,969 --> 00:54:34,130
is though the concept with your versus
flow when you're saying

780
00:54:34,130 --> 00:54:38,670
okay it was will written code in its not
written to me

781
00:54:38,670 --> 00:54:41,999
obfuscated or you know prevent tampering

782
00:54:41,999 --> 00:54:45,829
like the code that i'm gonna by you're
gonna say

783
00:54:45,829 --> 00:54:49,650
this is the story of my texts my
executors will goes

784
00:54:49,650 --> 00:54:53,249
and now its tort disassembling

785
00:54:53,249 --> 00:54:58,059
at this address you go down yet on you
you everything goes linear

786
00:54:58,059 --> 00:55:02,400
flow actually says

787
00:55:02,400 --> 00:55:05,660
kinda as executing if it was executing

788
00:55:05,660 --> 00:55:10,929
what would it do what would the look
like sooner than what's the difference

789
00:55:10,929 --> 00:55:13,959
well you could in a linear one

790
00:55:13,959 --> 00:55:17,079
you could confuse the December which say

791
00:55:17,079 --> 00:55:20,869
I'm going to take the code that was
written

792
00:55:20,869 --> 00:55:24,459
by the compiler which would which would
work normally

793
00:55:24,459 --> 00:55:27,920
right and then I'm going to hand patch
in

794
00:55:27,920 --> 00:55:31,650
a jumper dress that's going to job

795
00:55:31,650 --> 00:55:34,699
into the middle up an instruction

796
00:55:34,699 --> 00:55:38,910
that would normally happen it was
completely your so early

797
00:55:38,910 --> 00:55:42,329
you know its gonna job a

798
00:55:42,329 --> 00:55:46,719
Satan the third are the the second
optical

799
00:55:46,719 --> 00:55:51,279
before Oct instruction well after that

800
00:55:51,279 --> 00:55:55,909
you're all going to be. completely off
by one by

801
00:55:55,909 --> 00:56:00,439
from their own now so the linear would
miss the flow one

802
00:56:00,439 --> 00:56:04,969
which is actually happen runtime: would
pick that up however

803
00:56:04,969 --> 00:56:09,509
you can set up games have like if you're
going to do flow is going to be the flow

804
00:56:09,509 --> 00:56:10,289
going

805
00:56:10,289 --> 00:56:13,849
through a branch this way you're a
flow-through branch this way

806
00:56:13,849 --> 00:56:18,099
no as far as the December goes is not
keeping track of what's happening at

807
00:56:18,099 --> 00:56:20,949
runtime so he would have to make both
branches

808
00:56:20,949 --> 00:56:24,949
but the actual code the way it's perform
would always at one time

809
00:56:24,949 --> 00:56:29,509
take this brand

810
00:56:29,509 --> 00:56:33,089
I like I said the virtual machines you
know if if you're running

811
00:56:33,089 --> 00:56:36,119
you know two VM's you're going back and
forth

812
00:56:36,119 --> 00:56:39,359
and you're able to run Netcare

813
00:56:39,359 --> 00:56:44,689
or PCP dark to see what actual traffic
this morning

814
00:56:44,689 --> 00:56:48,909
will than one watchin we'll do that they
wanna make you have you hooked up to a

815
00:56:48,909 --> 00:56:50,140
live network

816
00:56:50,140 --> 00:56:54,599
it would look for those blogs
obfuscation is things like

817
00:56:54,599 --> 00:56:58,229
string hiding to mention very earlier
went all

818
00:56:58,229 --> 00:57:01,909
but is also a virtual machines I mean
Mike

819
00:57:01,909 --> 00:57:05,599
Evan I'm not an expert by any stretch of
imagination

820
00:57:05,599 --> 00:57:10,400
but I will be comparable with like
Windows and Linux at sea level

821
00:57:10,400 --> 00:57:15,209
but if you were to go to ask you like
hey man what can you do with this java

822
00:57:15,209 --> 00:57:19,420
for the job is gonna be running on top
of the virtual machine on top of that

823
00:57:19,420 --> 00:57:22,729
I would say well when I want to do is a
must say

824
00:57:22,729 --> 00:57:26,119
I don't know what it's doing in Java but
be actually

825
00:57:26,119 --> 00:57:30,349
has to get to the sea routines I'll look
at their

826
00:57:30,349 --> 00:57:34,979
but who knows maybe the setting up
something in memory within that virtual

827
00:57:34,979 --> 00:57:36,489
machine instructions

828
00:57:36,489 --> 00:57:42,909
that would be awkward to find Wonderland
see

829
00:57:42,909 --> 00:57:49,030
then

830
00:57:49,030 --> 00:57:52,630
haha

831
00:57:52,630 --> 00:57:55,490
yeah I mean that's that's it me if you
saw

832
00:57:55,490 --> 00:57:58,530
you know would soon go back to the other

833
00:57:58,530 --> 00:58:03,420
we do this skip to the the DLL if you
saw the deal had new

834
00:58:03,420 --> 00:58:07,300
a very few imports or

835
00:58:07,300 --> 00:58:11,440
its size on disk was much different from
its size and memory

836
00:58:11,440 --> 00:58:15,100
or in it had you could like looked
through it

837
00:58:15,100 --> 00:58:18,210
newfound in 13 instructions in the
disassembly

838
00:58:18,210 --> 00:58:22,640
or when you did your disassembly you so
like a warning light

839
00:58:22,640 --> 00:58:26,410
hey this is like inside another
instruction

840
00:58:26,410 --> 00:58:30,740
a I think I D a proble

841
00:58:30,740 --> 00:58:34,000
recognize that the IAEA pro-free

842
00:58:34,000 --> 00:58:38,860
will recognize that immediately and use
all things like it's like looking for is

843
00:58:38,860 --> 00:58:41,030
debugger attached in the AM

844
00:58:41,030 --> 00:58:45,440
artifacts like you saw something about
the VMware

845
00:58:45,440 --> 00:58:49,070
network or buckle my god this is like
the

846
00:58:49,070 --> 00:58:53,070
heavy-duty NSA some

847
00:58:53,070 --> 00:58:59,380
they pay money to write this Mauer so

848
00:58:59,380 --> 00:59:03,870
anyway we're about done I think we like
three slides were

849
00:59:03,870 --> 00:59:07,720
are so

850
00:59:07,720 --> 00:59:12,350
live patching I did one were recently
which I thought was cool

851
00:59:12,350 --> 00:59:15,460
film fears bottles

852
00:59:15,460 --> 00:59:18,750
but basically

853
00:59:18,750 --> 00:59:24,300
Nini is a no law and the job with these
two things you can pastor

854
00:59:24,300 --> 00:59:28,230
you can say okay I'm running this code
in doing this

855
00:59:28,230 --> 00:59:31,600
you know compare compare compare based
on this compare my do something

856
00:59:31,600 --> 00:59:36,440
why I don't want to do that compare
right but I don't want to have to every

857
00:59:36,440 --> 00:59:37,570
time a run this in the

858
00:59:37,570 --> 00:59:43,000
you know in the debugger you know tweak
that value to make that change

859
00:59:43,000 --> 00:59:46,320
so I could just the

860
00:59:46,320 --> 00:59:50,700
jumper with the 9 the ninety makes that
no wall

861
00:59:50,700 --> 00:59:54,840
or II I've got something that I actually
want to

862
00:59:54,840 --> 00:59:59,000
to rear on or I wanted you know I want
to keep the code there but

863
00:59:59,000 --> 01:00:04,500
I know that I don't have this results
and I don't know exactly what it is but

864
01:00:04,500 --> 01:00:06,170
I want to skip over this stuff

865
01:00:06,170 --> 01:00:10,720
to a job and then the

866
01:00:10,720 --> 01:00:14,240
all the debug always showing

867
01:00:14,240 --> 01:00:17,460
like how you could do so runtime:

868
01:00:17,460 --> 01:00:20,660
using the same things GB is really where
my

869
01:00:20,660 --> 01:00:26,560
I do by free porn and then

870
01:00:26,560 --> 01:00:31,310
soothe references and as one put this up
and come up with this

871
01:00:31,310 --> 01:00:36,490
myself back in the early 90's over to
the company had soft ice we use it for

872
01:00:36,490 --> 01:00:38,110
Windows device drivers

873
01:00:38,110 --> 01:00:42,720
I don't know is like looking for a light
soft ice instruction me

874
01:00:42,720 --> 01:00:45,730
or something I came upon this I I was
like

875
01:00:45,730 --> 01:00:49,390
what is this guy only is insane

876
01:00:49,390 --> 01:00:52,390
but he had something really good
tutorials

877
01:00:52,390 --> 01:00:57,100
that I mean you couldn't you can do a
tutorial because the executors bowls

878
01:00:57,100 --> 01:00:57,770
that he's

879
01:00:57,770 --> 01:01:01,380
showing you how to reverse engineer you
can even get the copy of them

880
01:01:01,380 --> 01:01:06,060
but in that case he was like power this
is in Windows very

881
01:01:06,060 --> 01:01:10,910
you have a baseball's down to its set
went to text a

882
01:01:10,910 --> 01:01:14,400
all lookin softer ice and go from there

883
01:01:14,400 --> 01:01:17,820
and then

884
01:01:17,820 --> 01:01:22,270
the not I guess last summer I got a copy
of this book

885
01:01:22,270 --> 01:01:25,720
and I thought this is a great book when
I was reading it

886
01:01:25,720 --> 01:01:31,860
was like I know you in like here

887
01:01:31,860 --> 01:01:34,960
that admits be flattered that you're
here I'll

888
01:01:34,960 --> 01:01:40,360
but the this is a

889
01:01:40,360 --> 01:01:44,220
this is a ver the book these guys I
think they're from for me

890
01:01:44,220 --> 01:01:49,070
preacher are okay

891
01:01:49,070 --> 01:01:53,460
the the thing I like about it is he is
showing you how

892
01:01:53,460 --> 01:01:58,010
to do stuff a very you talked with the
static analysis to now

893
01:01:58,010 --> 01:02:01,080
else and even know there was a two-term
other was just one run and a booger

894
01:02:01,080 --> 01:02:05,540
into and he has labs and you can follow
along

895
01:02:05,540 --> 01:02:09,110
nose ring I was like you know nothing do
a book report

896
01:02:09,110 --> 01:02:13,350
but their stuff here that would be good
to get by the Carolina con

897
01:02:13,350 --> 01:02:18,070
because I've learned some stuff here as
well as price so

898
01:02:18,070 --> 01:02:22,020
with by this guy's book and look at this
he has a kebab

899
01:02:22,020 --> 01:02:29,020
martini up there my how are we doing on
time that's it

900
01:02:31,350 --> 01:02:35,280
for time's up

901
01:02:35,280 --> 01:02:40,599
okay very good

902
01:02:40,599 --> 01:02:45,920
I'll yet to wasn't

903
01:02:45,920 --> 01:02:49,330
I was still up there okay

904
01:02:49,330 --> 01:02:56,330
Jackson

905
01:02:57,470 --> 01:03:01,570
the year in trying to get through 45

906
01:03:01,570 --> 01:03:05,330
illustrated 345

907
01:03:05,330 --> 01:03:11,099
slide up

908
01:03:11,099 --> 01:03:18,099
up

909
01:03:21,300 --> 01:03:25,660
that's the presentation

910
01:03:25,660 --> 01:03:28,230
its if you need to be there risking dunn
et

911
01:03:28,230 --> 01:03:31,750
you can look at Nets game a

912
01:03:31,750 --> 01:03:34,950
and I think don't a to say this

913
01:03:34,950 --> 01:03:39,140
not all the stuff is up there the best
thing to do is to go to the the piece

914
01:03:39,140 --> 01:03:39,650
King

915
01:03:39,650 --> 01:03:44,340
dotnet SK I think a little lizard look
for presentations

916
01:03:44,340 --> 01:03:47,340
and it would be

917
01:03:47,340 --> 01:03:54,340
she's will be better it's the

918
01:03:56,350 --> 01:04:01,420
his es KR NK like right here and look
for presentations

919
01:04:01,420 --> 01:04:04,480
the presentation is there sup injured
the

920
01:04:04,480 --> 01:04:07,960
I was updating that and in a car along
the way I was like I need to get the

921
01:04:07,960 --> 01:04:08,920
presentation now

922
01:04:08,920 --> 01:04:14,280
I bet I have updated but a few my emails
there to see some you 1 I'll talk about

923
01:04:14,280 --> 01:04:19,780
forget the source I'll make sure to
update it up think it's a good chance

924
01:04:19,780 --> 01:04:21,700
and roads were talking to you I'm

925
01:04:21,700 --> 01:04:26,830
the really enjoyed it and like I said
I'm happy to be here at the

926
01:04:26,830 --> 01:04:32,610
cargo pants and mister back neither you

