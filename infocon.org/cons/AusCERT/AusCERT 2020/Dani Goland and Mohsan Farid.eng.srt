1
00:00:02,960 --> 00:00:07,838
all righty i think we are

2
00:00:04,560 --> 00:00:09,440
live howdy hat folks so we've got around

3
00:00:07,839 --> 00:00:11,280
47 people in the

4
00:00:09,440 --> 00:00:13,280
in the stream which is cool so we're

5
00:00:11,280 --> 00:00:14,000
probably still uh going to have a few

6
00:00:13,280 --> 00:00:15,759
people

7
00:00:14,000 --> 00:00:17,600
coming in and finding their virtual

8
00:00:15,759 --> 00:00:20,480
chairs oh 48 now

9
00:00:17,600 --> 00:00:22,000
so a few a few housekeeping things

10
00:00:20,480 --> 00:00:24,800
before we get into

11
00:00:22,000 --> 00:00:25,920
the presentation uh there's a qa session

12
00:00:24,800 --> 00:00:28,080
there's a q a

13
00:00:25,920 --> 00:00:29,679
uh screen on the right hand side if you

14
00:00:28,080 --> 00:00:30,799
don't see it just put one of the little

15
00:00:29,679 --> 00:00:31,519
the arrow buttons will kind of bring

16
00:00:30,800 --> 00:00:33,280
that out

17
00:00:31,519 --> 00:00:34,719
in there you have chat participants and

18
00:00:33,280 --> 00:00:36,800
q a so if you do have any questions

19
00:00:34,719 --> 00:00:39,520
please do ask them you can upload them

20
00:00:36,800 --> 00:00:40,640
as well so i'll be having a look at um

21
00:00:39,520 --> 00:00:44,239
at those

22
00:00:40,640 --> 00:00:45,200
uh towards the end and there is a raised

23
00:00:44,239 --> 00:00:47,279
hand function

24
00:00:45,200 --> 00:00:48,879
if you do have any technical issues or

25
00:00:47,280 --> 00:00:50,320
anything but also if you do have a

26
00:00:48,879 --> 00:00:51,440
question and you want to jump a video

27
00:00:50,320 --> 00:00:52,960
and audio and ask it

28
00:00:51,440 --> 00:00:55,280
there is a raised hand as well so we can

29
00:00:52,960 --> 00:00:58,320
bring it up to the virtual stage

30
00:00:55,280 --> 00:00:58,879
and you can ask your question um and if

31
00:00:58,320 --> 00:01:00,559
you

32
00:00:58,879 --> 00:01:02,320
and if you want to go back to the foyer

33
00:01:00,559 --> 00:01:05,840
during the presentation use the link

34
00:01:02,320 --> 00:01:06,479
in the general chat so without further

35
00:01:05,840 --> 00:01:09,040
ado

36
00:01:06,479 --> 00:01:09,920
we'll introduce uh two speakers we've

37
00:01:09,040 --> 00:01:12,159
got coming up

38
00:01:09,920 --> 00:01:13,600
so we've got mo and we've got danny so

39
00:01:12,159 --> 00:01:16,080
moe's from bludgerops

40
00:01:13,600 --> 00:01:18,720
so he's uh he's running the gameth of

41
00:01:16,080 --> 00:01:20,880
cyber security space

42
00:01:18,720 --> 00:01:22,640
from penetration testing for rapid seven

43
00:01:20,880 --> 00:01:23,679
as a consultant penetration testing

44
00:01:22,640 --> 00:01:25,439
numerous

45
00:01:23,680 --> 00:01:27,119
federal agencies taking mobile

46
00:01:25,439 --> 00:01:28,080
applications for hp contributing

47
00:01:27,119 --> 00:01:29,600
exploits

48
00:01:28,080 --> 00:01:31,600
to the motorsport framework thank you

49
00:01:29,600 --> 00:01:33,199
very much for those contributions though

50
00:01:31,600 --> 00:01:35,759
we're definitely going to be using

51
00:01:33,200 --> 00:01:37,439
a lot of those um and then we have jenny

52
00:01:35,759 --> 00:01:40,479
as well so he's from netapp

53
00:01:37,439 --> 00:01:42,639
financial systems and at age 20

54
00:01:40,479 --> 00:01:44,159
danny founded his own boutique company

55
00:01:42,640 --> 00:01:45,280
for innovative software and hardware

56
00:01:44,159 --> 00:01:48,240
solutions

57
00:01:45,280 --> 00:01:48,799
and these two very handsome gentlemen

58
00:01:48,240 --> 00:01:52,000
will be

59
00:01:48,799 --> 00:01:54,320
talking through their presentation

60
00:01:52,000 --> 00:01:55,920
from the ground from the cloud to the

61
00:01:54,320 --> 00:01:57,360
ground right now so i'm actually really

62
00:01:55,920 --> 00:01:59,680
interested to hear

63
00:01:57,360 --> 00:02:00,560
the uh the technical aspect of these

64
00:01:59,680 --> 00:02:02,479
things so

65
00:02:00,560 --> 00:02:04,159
without further ado i'll hand it over to

66
00:02:02,479 --> 00:02:05,840
you guys and um

67
00:02:04,159 --> 00:02:09,440
let you guys share your screens for the

68
00:02:05,840 --> 00:02:11,679
presentation and there we go

69
00:02:09,440 --> 00:02:11,679
cool

70
00:02:12,879 --> 00:02:25,440
thank you for having us yeah

71
00:02:23,040 --> 00:02:25,440
all right

72
00:02:26,080 --> 00:02:32,640
so um like uh we're introduced

73
00:02:29,599 --> 00:02:34,000
i'm danny um cto of net alpha financial

74
00:02:32,640 --> 00:02:38,480
systems

75
00:02:34,000 --> 00:02:41,519
this is mo um co-founder elijah ops

76
00:02:38,480 --> 00:02:42,879
so quick review of what we're going to

77
00:02:41,519 --> 00:02:46,239
talk about today

78
00:02:42,879 --> 00:02:48,160
we came to this idea for this talk um

79
00:02:46,239 --> 00:02:50,080
i came from more of a development and

80
00:02:48,160 --> 00:02:51,840
cloud architecture and some cloud pen

81
00:02:50,080 --> 00:02:55,840
testing background

82
00:02:51,840 --> 00:02:57,440
modes more from the internal pen testing

83
00:02:55,840 --> 00:02:59,440
and we want to see how we can join

84
00:02:57,440 --> 00:03:01,200
forces and get a

85
00:02:59,440 --> 00:03:03,120
really nice chill chain from the cloud

86
00:03:01,200 --> 00:03:04,640
to the ground and that's what we're

87
00:03:03,120 --> 00:03:06,080
gonna present today we're gonna present

88
00:03:04,640 --> 00:03:09,279
a few techniques

89
00:03:06,080 --> 00:03:11,760
um that we saw both for um

90
00:03:09,280 --> 00:03:13,519
attacking clouds also a little bit of

91
00:03:11,760 --> 00:03:16,319
blue a bit of defensive

92
00:03:13,519 --> 00:03:17,440
and then from there we're gonna get go

93
00:03:16,319 --> 00:03:20,958
into the

94
00:03:17,440 --> 00:03:24,400
internal through a couple of ways

95
00:03:20,959 --> 00:03:27,920
uh ad proxy and

96
00:03:24,400 --> 00:03:29,440
um vpc peering and just show how we jump

97
00:03:27,920 --> 00:03:30,159
from the cloud into the internal and

98
00:03:29,440 --> 00:03:33,200
then

99
00:03:30,159 --> 00:03:35,200
we get full ownage um

100
00:03:33,200 --> 00:03:36,560
so for people who don't know about the

101
00:03:35,200 --> 00:03:39,200
shared responsibility model

102
00:03:36,560 --> 00:03:40,720
of the cloud we have a couple of

103
00:03:39,200 --> 00:03:42,238
different ways we can use the cloud

104
00:03:40,720 --> 00:03:44,720
we can use it as infrastructure as a

105
00:03:42,239 --> 00:03:45,519
service which is basically you manage

106
00:03:44,720 --> 00:03:47,920
your own

107
00:03:45,519 --> 00:03:48,959
virtual machines you do not touch the

108
00:03:47,920 --> 00:03:52,159
physical networks

109
00:03:48,959 --> 00:03:53,360
the servers the hypervisors but you do

110
00:03:52,159 --> 00:03:56,560
have to manage the

111
00:03:53,360 --> 00:03:59,360
virtual networks the os your apps so

112
00:03:56,560 --> 00:04:00,319
there's a lot more things to um to patch

113
00:03:59,360 --> 00:04:03,599
and to look

114
00:04:00,319 --> 00:04:06,640
out for then we go into the pass

115
00:04:03,599 --> 00:04:08,720
um that's something let's say you can

116
00:04:06,640 --> 00:04:11,119
use fargate which is a docker right

117
00:04:08,720 --> 00:04:12,720
uh dockerized pass so you just basically

118
00:04:11,120 --> 00:04:14,720
get your docker containers but you do

119
00:04:12,720 --> 00:04:16,000
not touch the os you don't touch the

120
00:04:14,720 --> 00:04:18,560
networks

121
00:04:16,000 --> 00:04:19,358
and then there is the sas or in the

122
00:04:18,560 --> 00:04:21,839
cloud it's

123
00:04:19,358 --> 00:04:23,680
a lot of times serverless functions so

124
00:04:21,839 --> 00:04:26,080
you basically just provide the code and

125
00:04:23,680 --> 00:04:26,080
the data

126
00:04:26,400 --> 00:04:30,799
so for clouds um a few techniques to get

127
00:04:29,440 --> 00:04:33,600
the initial foothold

128
00:04:30,800 --> 00:04:34,400
we always have the exploits and exposed

129
00:04:33,600 --> 00:04:36,560
machines

130
00:04:34,400 --> 00:04:37,919
different uh vulnerabilities and web

131
00:04:36,560 --> 00:04:40,560
apps

132
00:04:37,919 --> 00:04:43,198
and was pretty common still pretty

133
00:04:40,560 --> 00:04:44,880
common cloud as an ssrf and then

134
00:04:43,199 --> 00:04:49,280
dragging credentials from the metadata

135
00:04:44,880 --> 00:04:52,000
server so aws actually released

136
00:04:49,280 --> 00:04:53,280
the insystem metadata server version 2

137
00:04:52,000 --> 00:04:56,320
which

138
00:04:53,280 --> 00:04:57,359
mitigates a lot of these ssrf and

139
00:04:56,320 --> 00:04:59,280
different other

140
00:04:57,360 --> 00:05:01,039
ways to exploit and get the the

141
00:04:59,280 --> 00:05:05,119
credentials

142
00:05:01,039 --> 00:05:10,719
so if you're not using the version 2

143
00:05:05,120 --> 00:05:12,960
look for that and try to migrate to it

144
00:05:10,720 --> 00:05:15,199
so um we're going to get a initial

145
00:05:12,960 --> 00:05:17,599
foothold pretty easily with the

146
00:05:15,199 --> 00:05:21,199
pickle bomb um which is a

147
00:05:17,600 --> 00:05:21,199
deserialization attack for python

148
00:05:21,360 --> 00:05:25,600
and we're going to do this on salary

149
00:05:23,039 --> 00:05:28,639
workers we're going to get a

150
00:05:25,600 --> 00:05:31,840
put a new message in a queue in a

151
00:05:28,639 --> 00:05:33,600
register for an exposed radius and

152
00:05:31,840 --> 00:05:35,440
when one of the solid workers will grab

153
00:05:33,600 --> 00:05:39,840
it we'll

154
00:05:35,440 --> 00:05:39,840
get a shell

155
00:05:42,720 --> 00:05:50,400
so we pushed our message into the queue

156
00:05:47,759 --> 00:05:50,960
and then on the right we can see that we

157
00:05:50,400 --> 00:05:54,000
have

158
00:05:50,960 --> 00:05:54,000
the chat running and

159
00:05:54,400 --> 00:05:57,919
let's get some data from the metadata

160
00:05:56,319 --> 00:06:00,000
server

161
00:05:57,919 --> 00:06:01,280
so we get the user data which is a

162
00:06:00,000 --> 00:06:03,840
startup script

163
00:06:01,280 --> 00:06:05,280
a lot of times people leave keys in

164
00:06:03,840 --> 00:06:07,599
there

165
00:06:05,280 --> 00:06:09,599
to grab data from other services

166
00:06:07,600 --> 00:06:11,840
sometimes choose for github to

167
00:06:09,600 --> 00:06:14,400
drop the latest version of the software

168
00:06:11,840 --> 00:06:17,599
supposed to run

169
00:06:14,400 --> 00:06:20,239
and we're gonna get some credentials so

170
00:06:17,600 --> 00:06:21,039
first we got the role which is the ec2

171
00:06:20,240 --> 00:06:23,280
instance roll

172
00:06:21,039 --> 00:06:23,280
so

173
00:06:24,160 --> 00:06:28,080
and now we're going to get a fresh set

174
00:06:26,240 --> 00:06:30,160
of credentials which we can

175
00:06:28,080 --> 00:06:32,318
actually drop them and use them from our

176
00:06:30,160 --> 00:06:34,880
local machine and

177
00:06:32,319 --> 00:06:37,759
basically impersonate that machine with

178
00:06:34,880 --> 00:06:42,000
aws services

179
00:06:37,759 --> 00:06:46,479
this is the small script i wrote to

180
00:06:42,000 --> 00:06:46,479
um do this attack it's pretty simple

181
00:06:47,039 --> 00:06:50,479
second thing we'll go through is service

182
00:06:48,800 --> 00:06:54,000
mesh poisoning so we're going to be

183
00:06:50,479 --> 00:06:57,758
using new technologies for old tricks

184
00:06:54,000 --> 00:07:00,479
and like any poisoning trick

185
00:06:57,759 --> 00:07:01,360
here i'm going to focus on hashicorp

186
00:07:00,479 --> 00:07:04,400
console

187
00:07:01,360 --> 00:07:06,160
which is a it's a great service mesh and

188
00:07:04,400 --> 00:07:07,840
service discovery framework

189
00:07:06,160 --> 00:07:10,400
i've been using it for a while it has a

190
00:07:07,840 --> 00:07:13,520
great community

191
00:07:10,400 --> 00:07:15,599
so um server discovery

192
00:07:13,520 --> 00:07:17,359
when we worked in a microservice

193
00:07:15,599 --> 00:07:20,400
oriented architecture

194
00:07:17,360 --> 00:07:21,199
our services need to know which services

195
00:07:20,400 --> 00:07:23,919
are available

196
00:07:21,199 --> 00:07:24,479
how to contact them um get their ip

197
00:07:23,919 --> 00:07:26,799
address

198
00:07:24,479 --> 00:07:28,318
get different versions so that's what

199
00:07:26,800 --> 00:07:30,639
service discovery

200
00:07:28,319 --> 00:07:31,759
basically does we register a service it

201
00:07:30,639 --> 00:07:34,960
goes into

202
00:07:31,759 --> 00:07:38,080
this um it's a decentralized

203
00:07:34,960 --> 00:07:40,479
um distributed uh

204
00:07:38,080 --> 00:07:41,758
data storage value store that has stores

205
00:07:40,479 --> 00:07:44,960
all our services

206
00:07:41,759 --> 00:07:46,639
metadata some tags and then we also get

207
00:07:44,960 --> 00:07:49,680
a service mesh capability

208
00:07:46,639 --> 00:07:53,360
so we get identity-based authorization

209
00:07:49,680 --> 00:07:56,840
we get l7 traffic management um

210
00:07:53,360 --> 00:07:59,120
easy way to do siter proxies with tls

211
00:07:56,840 --> 00:08:01,039
encryption

212
00:07:59,120 --> 00:08:03,199
so this is what it looks like in the

213
00:08:01,039 --> 00:08:04,560
console we can see we have two console

214
00:08:03,199 --> 00:08:07,759
servers

215
00:08:04,560 --> 00:08:08,479
two posters servers one sentry two

216
00:08:07,759 --> 00:08:12,080
sentry

217
00:08:08,479 --> 00:08:15,199
and four vaults

218
00:08:12,080 --> 00:08:15,840
and we can either query the console

219
00:08:15,199 --> 00:08:17,759
agent

220
00:08:15,840 --> 00:08:19,359
like the first line which is console

221
00:08:17,759 --> 00:08:23,680
catalog services

222
00:08:19,360 --> 00:08:26,800
or we can um do a did request

223
00:08:23,680 --> 00:08:29,199
and do postgres.services console and we

224
00:08:26,800 --> 00:08:31,759
can see we get two ips returned to us

225
00:08:29,199 --> 00:08:35,200
so those are the two postdress services

226
00:08:31,759 --> 00:08:35,200
that are running in our network

227
00:08:35,440 --> 00:08:39,680
so let's see how we can do the poisoning

228
00:08:37,919 --> 00:08:42,640
we're going to impersonate

229
00:08:39,679 --> 00:08:43,838
a service on a compromise machine so

230
00:08:42,640 --> 00:08:47,600
when we have a machine

231
00:08:43,839 --> 00:08:49,680
that runs let's say a python web server

232
00:08:47,600 --> 00:08:52,720
service and it registers it

233
00:08:49,680 --> 00:08:56,160
if the if

234
00:08:52,720 --> 00:08:59,839
the um the setup does not have proper

235
00:08:56,160 --> 00:09:02,160
or very good identity management um

236
00:08:59,839 --> 00:09:04,640
and access controls then we can

237
00:09:02,160 --> 00:09:06,399
basically register another service

238
00:09:04,640 --> 00:09:08,560
it doesn't check if it's actually a

239
00:09:06,399 --> 00:09:11,839
postdress server running

240
00:09:08,560 --> 00:09:14,079
or whatever you're trying to run so

241
00:09:11,839 --> 00:09:16,080
you basically just give it a name and if

242
00:09:14,080 --> 00:09:18,480
the name already exists

243
00:09:16,080 --> 00:09:19,600
in console it'll route some of the

244
00:09:18,480 --> 00:09:23,200
traffic

245
00:09:19,600 --> 00:09:26,880
to your service as well

246
00:09:23,200 --> 00:09:31,200
so this is a json format in an hcl file

247
00:09:26,880 --> 00:09:33,360
hcl is the hashicorp um language

248
00:09:31,200 --> 00:09:34,880
it's pretty so it's pretty easy to use

249
00:09:33,360 --> 00:09:39,519
so we have the id

250
00:09:34,880 --> 00:09:39,519
we have the name the port

251
00:09:39,920 --> 00:09:42,959
and then last thing that we can also

252
00:09:41,920 --> 00:09:44,719
exploit is

253
00:09:42,959 --> 00:09:46,880
the health checks can be arbitrary

254
00:09:44,720 --> 00:09:50,480
command so this has been dash

255
00:09:46,880 --> 00:09:53,839
and user imagination every

256
00:09:50,480 --> 00:09:56,080
every minute so we're going to move the

257
00:09:53,839 --> 00:09:58,720
file into the console folder and do a

258
00:09:56,080 --> 00:09:58,720
hot reload

259
00:09:59,279 --> 00:10:05,839
another way of doing this since a lot of

260
00:10:03,200 --> 00:10:07,920
services are docker containers so

261
00:10:05,839 --> 00:10:10,079
there's this tool called registrator

262
00:10:07,920 --> 00:10:11,760
so it automatically registers and

263
00:10:10,079 --> 00:10:14,319
de-registers services

264
00:10:11,760 --> 00:10:15,680
for any docker container so it basically

265
00:10:14,320 --> 00:10:18,560
sits in your docker

266
00:10:15,680 --> 00:10:20,000
as a container in the same host and it

267
00:10:18,560 --> 00:10:22,560
will

268
00:10:20,000 --> 00:10:24,320
periodically scan to see if any new

269
00:10:22,560 --> 00:10:26,079
containers came up and any other

270
00:10:24,320 --> 00:10:29,279
containers came down and

271
00:10:26,079 --> 00:10:32,319
update that update your

272
00:10:29,279 --> 00:10:35,839
service mesh based on that

273
00:10:32,320 --> 00:10:36,480
so this is even riskier even if we do

274
00:10:35,839 --> 00:10:39,120
have

275
00:10:36,480 --> 00:10:40,480
good controls and access controls

276
00:10:39,120 --> 00:10:43,440
registry will still

277
00:10:40,480 --> 00:10:44,480
have a token so if we are able to run a

278
00:10:43,440 --> 00:10:46,079
docker container

279
00:10:44,480 --> 00:10:48,160
it will register it because it has the

280
00:10:46,079 --> 00:10:50,079
permission to do it

281
00:10:48,160 --> 00:10:52,640
so what we're going to do is we'll start

282
00:10:50,079 --> 00:10:55,120
a new container called postdress

283
00:10:52,640 --> 00:10:56,640
and it'll register as a poser service

284
00:10:55,120 --> 00:11:00,160
and some of the traffic will be

285
00:10:56,640 --> 00:11:03,600
routed to us

286
00:11:00,160 --> 00:11:06,959
so um by utilizing

287
00:11:03,600 --> 00:11:08,160
a feature and authentication feature in

288
00:11:06,959 --> 00:11:10,239
post address we can

289
00:11:08,160 --> 00:11:11,199
if we can manage the middle it we can

290
00:11:10,240 --> 00:11:13,120
ask the host

291
00:11:11,200 --> 00:11:15,040
the the client to send us the

292
00:11:13,120 --> 00:11:17,920
credentials and plain text

293
00:11:15,040 --> 00:11:17,920
and basically

294
00:11:18,399 --> 00:11:22,640
pat like make a hash from it like the

295
00:11:20,959 --> 00:11:25,920
real server would do

296
00:11:22,640 --> 00:11:27,920
and send it to the um to a database

297
00:11:25,920 --> 00:11:30,160
so it's transparent database think it's

298
00:11:27,920 --> 00:11:32,880
doing a proper authentication

299
00:11:30,160 --> 00:11:33,920
but our man the middle server is able to

300
00:11:32,880 --> 00:11:35,680
request

301
00:11:33,920 --> 00:11:37,519
the credentials and plain text from the

302
00:11:35,680 --> 00:11:39,359
client and it will give it to them

303
00:11:37,519 --> 00:11:40,640
so we're going to utilize this by

304
00:11:39,360 --> 00:11:43,839
registering

305
00:11:40,640 --> 00:11:44,480
a new puzzle service with our proxy in

306
00:11:43,839 --> 00:11:47,680
there

307
00:11:44,480 --> 00:11:48,640
so we'll get that running on the right

308
00:11:47,680 --> 00:11:52,319
side

309
00:11:48,640 --> 00:11:52,319
which is python proxy pi

310
00:11:55,519 --> 00:11:58,959
and then on the left side we're just

311
00:11:57,680 --> 00:12:00,719
gonna

312
00:11:58,959 --> 00:12:02,479
make free connection attempts to the

313
00:12:00,720 --> 00:12:04,240
real uh to the

314
00:12:02,480 --> 00:12:07,519
to one of the postgres servers so we're

315
00:12:04,240 --> 00:12:07,519
using in the host we're using

316
00:12:08,839 --> 00:12:11,680
postdress.service.console as you can see

317
00:12:10,480 --> 00:12:15,279
on the right side

318
00:12:11,680 --> 00:12:18,239
we drop the username we have the

319
00:12:15,279 --> 00:12:19,040
the password we have the salt and here

320
00:12:18,240 --> 00:12:20,959
is the hash

321
00:12:19,040 --> 00:12:22,959
password with the salt so we can forward

322
00:12:20,959 --> 00:12:26,399
that to the real database

323
00:12:22,959 --> 00:12:30,079
and establish a connection and we just

324
00:12:26,399 --> 00:12:30,720
stole credentials no need to track

325
00:12:30,079 --> 00:12:39,839
anything

326
00:12:30,720 --> 00:12:39,839
we have plain text username and password

327
00:12:47,360 --> 00:12:53,600
so after we're already in the cloud

328
00:12:50,399 --> 00:12:57,279
we drop some credentials um

329
00:12:53,600 --> 00:12:59,920
how do we stay there how do we hide and

330
00:12:57,279 --> 00:13:00,399
make ourselves persistent and be able to

331
00:12:59,920 --> 00:13:03,199
grab

332
00:13:00,399 --> 00:13:03,920
a first set of credentials because even

333
00:13:03,200 --> 00:13:06,320
if

334
00:13:03,920 --> 00:13:07,360
one of the attacks was detected usually

335
00:13:06,320 --> 00:13:09,839
the first thing to do

336
00:13:07,360 --> 00:13:10,399
is to revoke the credentials from the

337
00:13:09,839 --> 00:13:13,920
machine

338
00:13:10,399 --> 00:13:16,000
so um we need to find a way

339
00:13:13,920 --> 00:13:19,120
to get a first set of credentials and

340
00:13:16,000 --> 00:13:22,560
basically hide in plain sight

341
00:13:19,120 --> 00:13:26,079
so lambda layers um lambda functions

342
00:13:22,560 --> 00:13:30,239
so um they're serverless functions

343
00:13:26,079 --> 00:13:32,479
and what we can do with them is um

344
00:13:30,240 --> 00:13:33,519
we can get a lambda layers so lambda

345
00:13:32,480 --> 00:13:35,760
layers basically

346
00:13:33,519 --> 00:13:37,440
give us the ability to package a lot of

347
00:13:35,760 --> 00:13:40,240
the dependencies we use in

348
00:13:37,440 --> 00:13:42,079
different functions and put them in a

349
00:13:40,240 --> 00:13:43,839
layer and then reuse this layer

350
00:13:42,079 --> 00:13:46,880
in different functions so if you have an

351
00:13:43,839 --> 00:13:48,959
api or a big

352
00:13:46,880 --> 00:13:50,079
database a big folder with database

353
00:13:48,959 --> 00:13:52,479
models that

354
00:13:50,079 --> 00:13:54,880
you reuse them it's pretty common to use

355
00:13:52,480 --> 00:13:57,120
lambda layers

356
00:13:54,880 --> 00:13:58,639
so and lambda layers are packaged

357
00:13:57,120 --> 00:14:01,199
depends on

358
00:13:58,639 --> 00:14:02,480
uh if you're using ojs python java

359
00:14:01,199 --> 00:14:06,240
they'll basically

360
00:14:02,480 --> 00:14:09,440
um all be packaged into the

361
00:14:06,240 --> 00:14:12,000
libraries so either like the npm

362
00:14:09,440 --> 00:14:13,360
the mk modules or in python the lib

363
00:14:12,000 --> 00:14:16,560
folder

364
00:14:13,360 --> 00:14:20,320
and we can override like known libraries

365
00:14:16,560 --> 00:14:20,319
so this is what i'm i'm gonna show

366
00:14:21,120 --> 00:14:24,720
i'm gonna i fork the python request

367
00:14:24,079 --> 00:14:28,160
module

368
00:14:24,720 --> 00:14:28,959
which a lot of i mean it's really used

369
00:14:28,160 --> 00:14:32,000
so

370
00:14:28,959 --> 00:14:35,199
um we can assume that a lot of functions

371
00:14:32,000 --> 00:14:38,320
might use that so i

372
00:14:35,199 --> 00:14:41,599
over i got into the request function

373
00:14:38,320 --> 00:14:42,959
and basically added another line to it

374
00:14:41,600 --> 00:14:45,279
that will

375
00:14:42,959 --> 00:14:46,000
take all the environmental variables and

376
00:14:45,279 --> 00:14:48,800
send them

377
00:14:46,000 --> 00:14:51,199
to my server every time there's a

378
00:14:48,800 --> 00:14:51,199
request

379
00:14:54,959 --> 00:15:00,239
and this is my listener on my server

380
00:14:58,399 --> 00:15:02,959
it will take those environmental

381
00:15:00,240 --> 00:15:04,959
variables and give me the access key

382
00:15:02,959 --> 00:15:06,880
the secret key session token security

383
00:15:04,959 --> 00:15:10,239
token

384
00:15:06,880 --> 00:15:13,360
and also the data um that was sent

385
00:15:10,240 --> 00:15:15,279
to that lambda function

386
00:15:13,360 --> 00:15:16,800
and in the lamina function once the

387
00:15:15,279 --> 00:15:20,000
layer is loaded

388
00:15:16,800 --> 00:15:24,479
just doing import requests regular

389
00:15:20,000 --> 00:15:27,839
thing to do and do a regular get request

390
00:15:24,480 --> 00:15:27,839
and let's see how that works

391
00:15:28,000 --> 00:15:31,199
so we're going to invoke the lambda

392
00:15:29,440 --> 00:15:32,160
function that's on the right with the

393
00:15:31,199 --> 00:15:35,199
curl

394
00:15:32,160 --> 00:15:40,639
and we're going to have our listener

395
00:15:35,199 --> 00:15:43,920
on the left

396
00:15:40,639 --> 00:15:47,839
so there we go we've got a fresh set

397
00:15:43,920 --> 00:15:47,839
of credentials with the session token

398
00:15:47,920 --> 00:15:54,959
and if we do this again we'll get

399
00:15:51,680 --> 00:15:58,560
another set don't try to use it

400
00:15:54,959 --> 00:16:00,079
they're evoked yeah we can get a

401
00:15:58,560 --> 00:16:03,359
constant flow

402
00:16:00,079 --> 00:16:06,399
of credentials so

403
00:16:03,360 --> 00:16:07,279
i've done it it was not detected i will

404
00:16:06,399 --> 00:16:09,519
talk about

405
00:16:07,279 --> 00:16:11,120
infrastructure as code which actually

406
00:16:09,519 --> 00:16:15,839
helps detect

407
00:16:11,120 --> 00:16:18,959
things like this but a lot of times

408
00:16:15,839 --> 00:16:18,959
what happens is that

409
00:16:19,199 --> 00:16:23,120
since there are so many layers it's

410
00:16:22,240 --> 00:16:25,600
pretty easy to add

411
00:16:23,120 --> 00:16:26,320
a new version for a layer so we can pull

412
00:16:25,600 --> 00:16:29,519
a layer that

413
00:16:26,320 --> 00:16:32,560
exists see what's in it

414
00:16:29,519 --> 00:16:34,639
take it basically duplicate it

415
00:16:32,560 --> 00:16:36,399
and make our changes and upload that as

416
00:16:34,639 --> 00:16:39,920
the new version of later

417
00:16:36,399 --> 00:16:41,680
and when infrastructures code is not

418
00:16:39,920 --> 00:16:43,680
implemented it's very hard to see those

419
00:16:41,680 --> 00:16:51,839
subtle changes

420
00:16:43,680 --> 00:16:51,839
so i'm going to hand this over to mo now

421
00:17:10,880 --> 00:17:19,839
you need to admit yourself there though

422
00:17:24,400 --> 00:17:33,840
thank you

423
00:17:40,080 --> 00:17:47,439
so we're going to do a quick uh ad101

424
00:17:44,000 --> 00:17:49,760
so after the used uh by majority of

425
00:17:47,440 --> 00:17:50,960
organizations to manage uh you know

426
00:17:49,760 --> 00:17:53,039
their systems and

427
00:17:50,960 --> 00:17:54,000
enterprise environments running windows

428
00:17:53,039 --> 00:17:55,679
um and

429
00:17:54,000 --> 00:17:57,280
effectively it's a directory service

430
00:17:55,679 --> 00:18:00,480
database and

431
00:17:57,280 --> 00:18:02,080
ldap is the primary protocol that's used

432
00:18:00,480 --> 00:18:04,320
to communicate with um

433
00:18:02,080 --> 00:18:06,240
active directory um the vulnerability

434
00:18:04,320 --> 00:18:08,480
that we're actually gonna

435
00:18:06,240 --> 00:18:10,080
leverage for for pivoting from the

436
00:18:08,480 --> 00:18:13,360
external to the internal

437
00:18:10,080 --> 00:18:14,399
um is uh something that was identified

438
00:18:13,360 --> 00:18:17,520
by the by the

439
00:18:14,400 --> 00:18:19,520
uh fine team over at preempt great

440
00:18:17,520 --> 00:18:21,200
research that they do

441
00:18:19,520 --> 00:18:23,120
they've done incredible things in the

442
00:18:21,200 --> 00:18:25,600
past couple of years and

443
00:18:23,120 --> 00:18:27,520
hats off to them they've identified a

444
00:18:25,600 --> 00:18:30,719
vulnerability

445
00:18:27,520 --> 00:18:32,160
within adfs um which adfs for those

446
00:18:30,720 --> 00:18:34,000
don't know it's a single sign-on

447
00:18:32,160 --> 00:18:37,200
solution created by microsoft

448
00:18:34,000 --> 00:18:40,640
um it's effectively an adfs proxy host

449
00:18:37,200 --> 00:18:43,919
is tip is a host that will allow

450
00:18:40,640 --> 00:18:48,240
a you know let's say systems that you

451
00:18:43,919 --> 00:18:50,640
want um to communicate on the outside

452
00:18:48,240 --> 00:18:52,160
um externally to communicate with

453
00:18:50,640 --> 00:18:53,919
systems internally without being

454
00:18:52,160 --> 00:18:54,640
communicated uh without being connected

455
00:18:53,919 --> 00:18:58,240
to them

456
00:18:54,640 --> 00:18:59,200
so it allows those services um to to

457
00:18:58,240 --> 00:19:01,200
communicate

458
00:18:59,200 --> 00:19:03,360
um without a direct connection to your

459
00:19:01,200 --> 00:19:06,080
organization's internal network which is

460
00:19:03,360 --> 00:19:07,039
um ideal this is you know good good job

461
00:19:06,080 --> 00:19:10,159
microsoft

462
00:19:07,039 --> 00:19:13,679
now the problem here

463
00:19:10,160 --> 00:19:17,600
is that adfs supports windows integrated

464
00:19:13,679 --> 00:19:19,360
authentication and this

465
00:19:17,600 --> 00:19:21,520
unfortunately due to this vulnerability

466
00:19:19,360 --> 00:19:24,719
that was identified

467
00:19:21,520 --> 00:19:28,160
it was wia was now protected correctly

468
00:19:24,720 --> 00:19:30,880
and it allowed protocols to be abused

469
00:19:28,160 --> 00:19:33,440
from externally so effectively an

470
00:19:30,880 --> 00:19:36,799
attacker can launch a brute force attack

471
00:19:33,440 --> 00:19:39,760
and the way this

472
00:19:36,799 --> 00:19:40,720
was implemented allowed the attacker to

473
00:19:39,760 --> 00:19:43,840
circumvent

474
00:19:40,720 --> 00:19:46,799
an extranet's lockout policy so

475
00:19:43,840 --> 00:19:47,199
either it was fail open or fail lock

476
00:19:46,799 --> 00:19:49,760
where

477
00:19:47,200 --> 00:19:50,960
all the accounts would be locked out so

478
00:19:49,760 --> 00:19:53,039
um you do

479
00:19:50,960 --> 00:19:54,720
you know some simple reconnaissance you

480
00:19:53,039 --> 00:19:57,440
find out an organization's

481
00:19:54,720 --> 00:19:58,160
um email first initial last name or

482
00:19:57,440 --> 00:20:01,440
first

483
00:19:58,160 --> 00:20:04,000
um first name last uh initial whatever

484
00:20:01,440 --> 00:20:06,400
that policy uh that naming convention is

485
00:20:04,000 --> 00:20:07,679
um and you now have a list of usernames

486
00:20:06,400 --> 00:20:10,799
and you can start

487
00:20:07,679 --> 00:20:13,039
um you know effectively just running

488
00:20:10,799 --> 00:20:15,440
massive dictionary tax without ever

489
00:20:13,039 --> 00:20:18,240
locking uh without without ever

490
00:20:15,440 --> 00:20:18,960
locking the user account or you're going

491
00:20:18,240 --> 00:20:21,600
to

492
00:20:18,960 --> 00:20:22,960
lock out all the accounts but it was one

493
00:20:21,600 --> 00:20:26,000
or the other

494
00:20:22,960 --> 00:20:30,000
as a result of this you know

495
00:20:26,000 --> 00:20:30,480
flaw that was identified so as a result

496
00:20:30,000 --> 00:20:33,200
you're

497
00:20:30,480 --> 00:20:34,799
you know as an attacker you you know

498
00:20:33,200 --> 00:20:36,480
let's say an organization has an eight

499
00:20:34,799 --> 00:20:39,520
character password policy

500
00:20:36,480 --> 00:20:41,840
um doing countless

501
00:20:39,520 --> 00:20:42,559
um internal pen tests in my you know

502
00:20:41,840 --> 00:20:44,959
career

503
00:20:42,559 --> 00:20:45,840
um even with a strong password policy in

504
00:20:44,960 --> 00:20:48,559
place you're

505
00:20:45,840 --> 00:20:48,959
you know the best i've seen is um you

506
00:20:48,559 --> 00:20:50,960
know

507
00:20:48,960 --> 00:20:52,640
a lot of organizations are there their

508
00:20:50,960 --> 00:20:55,280
people are using elite speak

509
00:20:52,640 --> 00:20:56,240
uh so lead speak dictionaries are for

510
00:20:55,280 --> 00:20:59,520
the win

511
00:20:56,240 --> 00:21:02,480
uh so you know we we now have our um

512
00:20:59,520 --> 00:21:03,039
we've compromised an account and we are

513
00:21:02,480 --> 00:21:06,240
able to

514
00:21:03,039 --> 00:21:08,000
sleep with one life get in um

515
00:21:06,240 --> 00:21:09,120
and we'll share this slide uh with

516
00:21:08,000 --> 00:21:09,679
everyone because i don't think the video

517
00:21:09,120 --> 00:21:12,479
is gonna

518
00:21:09,679 --> 00:21:17,840
render correctly but we now have uh an

519
00:21:12,480 --> 00:21:17,840
account and a foothold

520
00:21:18,400 --> 00:21:24,960
so um you know adfs proxy in this

521
00:21:22,559 --> 00:21:27,039
environment was used for um you know

522
00:21:24,960 --> 00:21:27,840
what typically used for sharepoint or

523
00:21:27,039 --> 00:21:30,879
exchange

524
00:21:27,840 --> 00:21:32,959
um and you know as i mentioned we

525
00:21:30,880 --> 00:21:34,159
we basically used it to circumvent the

526
00:21:32,960 --> 00:21:37,520
lockout policy

527
00:21:34,159 --> 00:21:40,960
and um the end result um

528
00:21:37,520 --> 00:21:43,360
danny basically was able to

529
00:21:40,960 --> 00:21:44,400
before microsoft released the patch he

530
00:21:43,360 --> 00:21:48,158
implemented a quick

531
00:21:44,400 --> 00:21:53,039
fix that would essentially

532
00:21:48,159 --> 00:21:55,600
put rate limiting so

533
00:21:53,039 --> 00:21:55,600
ladder there

534
00:21:57,679 --> 00:22:00,880
so we have our foothold uh we we have

535
00:22:00,080 --> 00:22:03,039
our

536
00:22:00,880 --> 00:22:04,720
account um let's say we you know

537
00:22:03,039 --> 00:22:07,280
identify a vpn

538
00:22:04,720 --> 00:22:07,840
um or citrix gateway whatever that may

539
00:22:07,280 --> 00:22:11,280
be

540
00:22:07,840 --> 00:22:12,720
we we're logged into um in in

541
00:22:11,280 --> 00:22:14,399
we have access to your internal

542
00:22:12,720 --> 00:22:17,440
organization let's say

543
00:22:14,400 --> 00:22:20,559
uh we're using vpn and

544
00:22:17,440 --> 00:22:23,760
we're logged in um so

545
00:22:20,559 --> 00:22:24,840
a quick run rundown um a whole bunch of

546
00:22:23,760 --> 00:22:27,679
different ways to

547
00:22:24,840 --> 00:22:28,559
to destroy an organization's internal

548
00:22:27,679 --> 00:22:31,039
environment

549
00:22:28,559 --> 00:22:32,158
before you finish your coffee one of the

550
00:22:31,039 --> 00:22:34,559
items that i'm going to discuss

551
00:22:32,159 --> 00:22:35,280
is you know something that i've been

552
00:22:34,559 --> 00:22:37,440
constantly

553
00:22:35,280 --> 00:22:39,039
battling um with throughout my career

554
00:22:37,440 --> 00:22:42,159
has just been

555
00:22:39,039 --> 00:22:43,760
how much trust is implement is based on

556
00:22:42,159 --> 00:22:44,640
what vulnerability scanners are telling

557
00:22:43,760 --> 00:22:46,320
people

558
00:22:44,640 --> 00:22:49,280
um all the vulnerabilities that we're

559
00:22:46,320 --> 00:22:53,840
going to identify that we're leveraging

560
00:22:49,280 --> 00:22:55,120
are of the info low and medium variety

561
00:22:53,840 --> 00:22:56,879
there's been a lot of talk about

562
00:22:55,120 --> 00:22:59,600
powershell being dead

563
00:22:56,880 --> 00:23:00,480
um it's been resurrected as of late uh

564
00:22:59,600 --> 00:23:03,840
the

565
00:23:00,480 --> 00:23:04,799
empire project has gotten a you know it

566
00:23:03,840 --> 00:23:07,439
has been revived

567
00:23:04,799 --> 00:23:09,039
um but i like to perform i like to kind

568
00:23:07,440 --> 00:23:12,080
of use the new stuff so

569
00:23:09,039 --> 00:23:14,400
i'm a big fan of using um you know

570
00:23:12,080 --> 00:23:15,520
net install shield we're going to just

571
00:23:14,400 --> 00:23:17,919
discuss different

572
00:23:15,520 --> 00:23:19,360
undetectable payloads different c2s and

573
00:23:17,919 --> 00:23:22,640
c3s

574
00:23:19,360 --> 00:23:25,520
bypassing ntlm relay mitigations um

575
00:23:22,640 --> 00:23:25,919
you know we're we don't need shells um

576
00:23:25,520 --> 00:23:30,240
but

577
00:23:25,919 --> 00:23:33,120
they're you know they're way more fun so

578
00:23:30,240 --> 00:23:34,640
hopping in internally just a quick scan

579
00:23:33,120 --> 00:23:36,239
um

580
00:23:34,640 --> 00:23:38,000
and you know we're just going to doing a

581
00:23:36,240 --> 00:23:40,240
quick enumeration for null sessions

582
00:23:38,000 --> 00:23:41,360
um null sessions are great because this

583
00:23:40,240 --> 00:23:44,400
allows us to

584
00:23:41,360 --> 00:23:44,799
basically enumerate a d um in this case

585
00:23:44,400 --> 00:23:47,200
we

586
00:23:44,799 --> 00:23:48,240
we have credentials because so we can

587
00:23:47,200 --> 00:23:50,080
actually enumerate

588
00:23:48,240 --> 00:23:52,159
what's in active directory we're going

589
00:23:50,080 --> 00:23:55,360
to look for s p signing disabled

590
00:23:52,159 --> 00:23:57,520
um sme signing disabled is is a is a

591
00:23:55,360 --> 00:23:58,879
you know allows us to perform relay

592
00:23:57,520 --> 00:24:00,480
attacks it's uh

593
00:23:58,880 --> 00:24:02,480
it's only been around for about 12 years

594
00:24:00,480 --> 00:24:03,120
or so but they're typically categorized

595
00:24:02,480 --> 00:24:04,720
as medium

596
00:24:03,120 --> 00:24:07,199
findings but they're highly effective

597
00:24:04,720 --> 00:24:08,880
because when you do exploit a system

598
00:24:07,200 --> 00:24:10,640
using relay attacks you do have system

599
00:24:08,880 --> 00:24:12,320
privileges we're going to look for

600
00:24:10,640 --> 00:24:14,320
anonymous shares

601
00:24:12,320 --> 00:24:15,678
anonymous shares are besides the obvious

602
00:24:14,320 --> 00:24:17,918
of accessing what's

603
00:24:15,679 --> 00:24:18,799
on the share you can also upload

604
00:24:17,919 --> 00:24:21,200
malicious

605
00:24:18,799 --> 00:24:22,080
scf files which then you can combine

606
00:24:21,200 --> 00:24:25,360
with uh

607
00:24:22,080 --> 00:24:28,879
responder to obtain that ntlm hashes

608
00:24:25,360 --> 00:24:30,559
of users who just automatically

609
00:24:28,880 --> 00:24:32,320
who every time they go to that share

610
00:24:30,559 --> 00:24:34,480
they're automatically going to

611
00:24:32,320 --> 00:24:36,158
authenticate to you and as a result

612
00:24:34,480 --> 00:24:36,799
you'll get their net ntlm hash which

613
00:24:36,159 --> 00:24:40,320
then you can

614
00:24:36,799 --> 00:24:41,120
actually crack um and the our scan is

615
00:24:40,320 --> 00:24:44,000
going to look for

616
00:24:41,120 --> 00:24:44,959
effectively those items and for uh you

617
00:24:44,000 --> 00:24:48,080
know system that

618
00:24:44,960 --> 00:24:48,559
that is uh listening on for on ldap

619
00:24:48,080 --> 00:24:51,199
which

620
00:24:48,559 --> 00:24:51,918
is going to you know tell us okay here's

621
00:24:51,200 --> 00:24:54,159
here's a

622
00:24:51,919 --> 00:24:55,279
the main controller uh majority of the

623
00:24:54,159 --> 00:24:58,320
time

624
00:24:55,279 --> 00:24:59,520
so a quick rundown of the smb relay

625
00:24:58,320 --> 00:25:00,799
attack

626
00:24:59,520 --> 00:25:02,879
and you know this is kind of like the

627
00:25:00,799 --> 00:25:03,360
quick 101s um and we're going to get

628
00:25:02,880 --> 00:25:04,880
into

629
00:25:03,360 --> 00:25:07,918
a little bit more of the juicier stuff

630
00:25:04,880 --> 00:25:09,600
later but um

631
00:25:07,919 --> 00:25:11,600
just a quick diagram because everybody

632
00:25:09,600 --> 00:25:14,879
loves diagram um

633
00:25:11,600 --> 00:25:16,158
and we're going to uh you know enable

634
00:25:14,880 --> 00:25:20,320
wpad spoofing

635
00:25:16,159 --> 00:25:23,440
and um and relay authentication requests

636
00:25:20,320 --> 00:25:29,279
um that when you couple with responder

637
00:25:23,440 --> 00:25:33,279
or mit m6 you can basically relay

638
00:25:29,279 --> 00:25:36,080
let's say user a attempts to tar

639
00:25:33,279 --> 00:25:36,480
to authenticate to user b or they were

640
00:25:36,080 --> 00:25:38,720
to

641
00:25:36,480 --> 00:25:40,159
attempt to access a website on your

642
00:25:38,720 --> 00:25:43,200
internal

643
00:25:40,159 --> 00:25:46,400
then what you're effectively getting is

644
00:25:43,200 --> 00:25:49,919
um their authentication attempt is

645
00:25:46,400 --> 00:25:52,320
going to be relayed to a list of

646
00:25:49,919 --> 00:25:52,960
targets that have smb signing disabled

647
00:25:52,320 --> 00:25:55,840
um

648
00:25:52,960 --> 00:25:56,559
and that's what i'm going to be doing in

649
00:25:55,840 --> 00:25:57,760
that attack

650
00:25:56,559 --> 00:26:00,000
is i'm going to be you know

651
00:25:57,760 --> 00:26:02,320
authenticating to every system that has

652
00:26:00,000 --> 00:26:03,279
smb signing disabled and the moment that

653
00:26:02,320 --> 00:26:05,760
that system

654
00:26:03,279 --> 00:26:06,960
that that user has um admin privileges

655
00:26:05,760 --> 00:26:09,200
on any of those boxes

656
00:26:06,960 --> 00:26:10,000
then i'm going to run secret stump um

657
00:26:09,200 --> 00:26:11,919
and you know

658
00:26:10,000 --> 00:26:13,840
look for clear text grab their hashes

659
00:26:11,919 --> 00:26:15,600
all the good stuff

660
00:26:13,840 --> 00:26:17,279
so you know you may ask yourself what if

661
00:26:15,600 --> 00:26:19,600
mitigation such as sme signing is

662
00:26:17,279 --> 00:26:22,840
enabled or they have epa

663
00:26:19,600 --> 00:26:24,918
well there's a vulnerability in that as

664
00:26:22,840 --> 00:26:27,918
well so

665
00:26:24,919 --> 00:26:29,520
2019-1040 allows you to bypass message

666
00:26:27,919 --> 00:26:32,000
integrity controls and

667
00:26:29,520 --> 00:26:33,279
tlm authentication so if you fire up

668
00:26:32,000 --> 00:26:36,240
ntlm relay x

669
00:26:33,279 --> 00:26:37,279
and use the remove mic flag that'll

670
00:26:36,240 --> 00:26:39,760
allow you to exploit

671
00:26:37,279 --> 00:26:41,600
that particular vulnerability so um you

672
00:26:39,760 --> 00:26:42,720
know even if the system has smb signing

673
00:26:41,600 --> 00:26:45,918
enabled you're still

674
00:26:42,720 --> 00:26:49,520
going to compromise that system

675
00:26:45,919 --> 00:26:51,200
um assuming that patch isn't installed

676
00:26:49,520 --> 00:26:53,279
so as i mentioned the remote code

677
00:26:51,200 --> 00:26:56,480
execution results with system privileges

678
00:26:53,279 --> 00:26:58,720
which is you know everything

679
00:26:56,480 --> 00:27:00,480
um and uh you know your typical

680
00:26:58,720 --> 00:27:03,279
post-exploitation routine

681
00:27:00,480 --> 00:27:04,000
um you know which we really won't cover

682
00:27:03,279 --> 00:27:06,320
because that's

683
00:27:04,000 --> 00:27:07,600
a whole nother talk um will allow you to

684
00:27:06,320 --> 00:27:11,120
get to

685
00:27:07,600 --> 00:27:12,799
you know domain admin privileges um

686
00:27:11,120 --> 00:27:14,239
if you were to couple this attack with a

687
00:27:12,799 --> 00:27:17,039
priv exchange attack you

688
00:27:14,240 --> 00:27:18,520
you have you'll have instant um domain

689
00:27:17,039 --> 00:27:21,440
admin

690
00:27:18,520 --> 00:27:24,399
well um so

691
00:27:21,440 --> 00:27:25,760
another cool uh attack vector that was

692
00:27:24,399 --> 00:27:29,199
identified by dirk

693
00:27:25,760 --> 00:27:30,720
um dirk john he's uh exceptional

694
00:27:29,200 --> 00:27:34,080
security researcher hats off to

695
00:27:30,720 --> 00:27:34,559
to dirk um he was able to identify you

696
00:27:34,080 --> 00:27:36,799
know

697
00:27:34,559 --> 00:27:38,399
part of this vulnerability was that you

698
00:27:36,799 --> 00:27:41,679
know you

699
00:27:38,399 --> 00:27:44,158
can take uh any type of uh

700
00:27:41,679 --> 00:27:44,799
ntlm authentication and typically in a

701
00:27:44,159 --> 00:27:48,000
normal

702
00:27:44,799 --> 00:27:49,520
um and what you know the way that it's

703
00:27:48,000 --> 00:27:51,760
designed is you're not supposed to be

704
00:27:49,520 --> 00:27:54,879
able to modify um

705
00:27:51,760 --> 00:27:57,840
you know cross protocol authentication

706
00:27:54,880 --> 00:27:59,760
but um the vulnerability that he

707
00:27:57,840 --> 00:28:03,760
identified would allow you to

708
00:27:59,760 --> 00:28:07,120
relay let's say smb to ldap

709
00:28:03,760 --> 00:28:09,120
so a couple bugs re resulted

710
00:28:07,120 --> 00:28:12,320
um as a result of that and even patches

711
00:28:09,120 --> 00:28:14,639
that were implemented by microsoft were

712
00:28:12,320 --> 00:28:15,840
were found to be flawed um and you know

713
00:28:14,640 --> 00:28:18,480
the team at preempt

714
00:28:15,840 --> 00:28:19,199
also found um two to three different

715
00:28:18,480 --> 00:28:21,360
additional

716
00:28:19,200 --> 00:28:23,679
uh vulnerabilities as a result of those

717
00:28:21,360 --> 00:28:25,760
patches being released so

718
00:28:23,679 --> 00:28:27,039
um definitely look into that it's very

719
00:28:25,760 --> 00:28:29,760
very interesting

720
00:28:27,039 --> 00:28:31,200
uh and so you know another attack

721
00:28:29,760 --> 00:28:31,840
scenario that we're we're going to look

722
00:28:31,200 --> 00:28:34,880
at would

723
00:28:31,840 --> 00:28:38,240
be to to get hosts to authenticate

724
00:28:34,880 --> 00:28:39,760
um to us um in order to relay their

725
00:28:38,240 --> 00:28:42,799
authentication attempts

726
00:28:39,760 --> 00:28:44,320
so using any active directory account

727
00:28:42,799 --> 00:28:46,639
you could just effectively connect

728
00:28:44,320 --> 00:28:47,360
by smb to an exchange server and you

729
00:28:46,640 --> 00:28:51,200
trigger the

730
00:28:47,360 --> 00:28:54,240
spool service bug for exchange server

731
00:28:51,200 --> 00:28:56,480
what will connects back to us

732
00:28:54,240 --> 00:28:58,480
via smb and then we relay that

733
00:28:56,480 --> 00:29:02,159
authentication attempt to ldap

734
00:28:58,480 --> 00:29:05,120
um and we're using relay authentication

735
00:29:02,159 --> 00:29:07,679
to grant vc sync and we're dumping all

736
00:29:05,120 --> 00:29:10,799
the hashes

737
00:29:07,679 --> 00:29:13,279
so um you know

738
00:29:10,799 --> 00:29:14,399
this this also works in kerberos as well

739
00:29:13,279 --> 00:29:16,399
um you really

740
00:29:14,399 --> 00:29:17,840
you're relaying ldap over tls to create

741
00:29:16,399 --> 00:29:20,719
a machine account

742
00:29:17,840 --> 00:29:22,320
um and you're running the printer bugs

743
00:29:20,720 --> 00:29:24,880
um

744
00:29:22,320 --> 00:29:26,399
against another domain controller and

745
00:29:24,880 --> 00:29:27,840
that results in relayed connections

746
00:29:26,399 --> 00:29:29,840
creating a computer account

747
00:29:27,840 --> 00:29:31,360
which then we can use in person id

748
00:29:29,840 --> 00:29:35,199
account we can also pillage

749
00:29:31,360 --> 00:29:36,799
ad um and using that impersonated ticket

750
00:29:35,200 --> 00:29:38,559
we're gonna run secret stuff

751
00:29:36,799 --> 00:29:41,039
um against the domain controller so

752
00:29:38,559 --> 00:29:43,360
that's another attack vector

753
00:29:41,039 --> 00:29:44,320
um so you're going to ask yourself okay

754
00:29:43,360 --> 00:29:46,879
what if we're

755
00:29:44,320 --> 00:29:49,760
testing an organization that has um you

756
00:29:46,880 --> 00:29:52,559
know lmnr mbt mdns

757
00:29:49,760 --> 00:29:53,760
you know protection from from you know

758
00:29:52,559 --> 00:29:57,760
layer two attacks

759
00:29:53,760 --> 00:29:59,279
well the you know

760
00:29:57,760 --> 00:30:01,200
and they even have let's say s b signing

761
00:29:59,279 --> 00:30:02,080
enabled um with the latest packet

762
00:30:01,200 --> 00:30:03,840
patches we'll

763
00:30:02,080 --> 00:30:05,439
then we're going to have to go after

764
00:30:03,840 --> 00:30:08,080
ipv6 so

765
00:30:05,440 --> 00:30:08,960
mit m6 is a tool that's released by

766
00:30:08,080 --> 00:30:11,120
foxit

767
00:30:08,960 --> 00:30:12,880
and it can be used to perform the same

768
00:30:11,120 --> 00:30:15,678
type of relay attack

769
00:30:12,880 --> 00:30:17,600
and the best part is is that it's you

770
00:30:15,679 --> 00:30:19,520
know going after dns-6

771
00:30:17,600 --> 00:30:21,279
which a lot of organizations aren't

772
00:30:19,520 --> 00:30:23,760
really even monitoring

773
00:30:21,279 --> 00:30:24,399
ipv6 even to this day they're still not

774
00:30:23,760 --> 00:30:26,320
monitoring

775
00:30:24,399 --> 00:30:27,520
and a lot of products aren't monitoring

776
00:30:26,320 --> 00:30:30,720
ipv6

777
00:30:27,520 --> 00:30:34,000
so you're you're effectively

778
00:30:30,720 --> 00:30:37,120
you know gaining the same type of

779
00:30:34,000 --> 00:30:38,000
uh you know attack vector as a responder

780
00:30:37,120 --> 00:30:40,239
attack would

781
00:30:38,000 --> 00:30:41,360
and it goes unnoted uh notice in a lot

782
00:30:40,240 --> 00:30:44,399
of organizations

783
00:30:41,360 --> 00:30:45,520
so um you know one of the attack vectors

784
00:30:44,399 --> 00:30:48,799
right here you'll see

785
00:30:45,520 --> 00:30:51,440
um is how we can leverage mit m6 to pop

786
00:30:48,799 --> 00:30:54,158
a domain controller

787
00:30:51,440 --> 00:30:54,880
and then you run secret slump one of my

788
00:30:54,159 --> 00:30:58,159
favorite tools

789
00:30:54,880 --> 00:31:00,240
uh thank you in packet and uh

790
00:30:58,159 --> 00:31:01,679
this is a new vulnerability that was i

791
00:31:00,240 --> 00:31:04,720
released uh

792
00:31:01,679 --> 00:31:07,039
four days ago so uh noted

793
00:31:04,720 --> 00:31:08,559
known as zero login so you get instant

794
00:31:07,039 --> 00:31:12,080
domain access by

795
00:31:08,559 --> 00:31:16,080
subverting um net login cryptography

796
00:31:12,080 --> 00:31:16,639
so um effectively the vulnerability lies

797
00:31:16,080 --> 00:31:20,158
in

798
00:31:16,640 --> 00:31:23,120
um you know net login sets the

799
00:31:20,159 --> 00:31:24,640
initial initialization vector to a fixed

800
00:31:23,120 --> 00:31:28,320
value of 16 bits

801
00:31:24,640 --> 00:31:31,840
so we can actually um

802
00:31:28,320 --> 00:31:34,879
typically in around 256

803
00:31:31,840 --> 00:31:36,240
iterations are able to identify the the

804
00:31:34,880 --> 00:31:39,200
value that we need to

805
00:31:36,240 --> 00:31:40,720
to impersonate any computer including

806
00:31:39,200 --> 00:31:41,600
the domain controller and then we're

807
00:31:40,720 --> 00:31:44,320
executing

808
00:31:41,600 --> 00:31:45,279
and remoting rpc calls on on their

809
00:31:44,320 --> 00:31:48,240
behalf

810
00:31:45,279 --> 00:31:49,519
so once we do that we're going to change

811
00:31:48,240 --> 00:31:51,760
the machine account

812
00:31:49,519 --> 00:31:52,880
on that domain controller to password

813
00:31:51,760 --> 00:31:55,200
that's a null

814
00:31:52,880 --> 00:31:56,240
and then we run dc sync plus secret

815
00:31:55,200 --> 00:31:59,519
dumps and

816
00:31:56,240 --> 00:32:02,000
now we just pop the dc

817
00:31:59,519 --> 00:32:02,799
and this is um i mean this is very very

818
00:32:02,000 --> 00:32:05,760
critical

819
00:32:02,799 --> 00:32:06,240
i wouldn't recommend doing this on a pen

820
00:32:05,760 --> 00:32:08,480
test

821
00:32:06,240 --> 00:32:09,600
as of right now because it does cause

822
00:32:08,480 --> 00:32:12,720
the dc to go

823
00:32:09,600 --> 00:32:14,480
offline as it as a result of the

824
00:32:12,720 --> 00:32:16,559
password being changed and it's not able

825
00:32:14,480 --> 00:32:19,840
to communicate with other dc's

826
00:32:16,559 --> 00:32:21,918
now there is a new poc out that does

827
00:32:19,840 --> 00:32:24,959
revert

828
00:32:21,919 --> 00:32:27,760
the password of the dc back so that's

829
00:32:24,960 --> 00:32:28,480
that's helpful but since this is fairly

830
00:32:27,760 --> 00:32:31,679
this is only

831
00:32:28,480 --> 00:32:35,279
you know four or five days old um

832
00:32:31,679 --> 00:32:37,360
it's you know i would i would keep this

833
00:32:35,279 --> 00:32:40,000
in your back pocket um unless you're

834
00:32:37,360 --> 00:32:44,639
testing an environment that's um

835
00:32:40,000 --> 00:32:47,039
very very redundant so

836
00:32:44,640 --> 00:32:49,120
moving on um this is kind of one of my

837
00:32:47,039 --> 00:32:51,519
little weapons of mass destruction

838
00:32:49,120 --> 00:32:52,158
um that i like to call it where i would

839
00:32:51,519 --> 00:32:54,240
fire

840
00:32:52,159 --> 00:32:56,159
off um and you know these are smash and

841
00:32:54,240 --> 00:32:58,559
grab pen tests these are not

842
00:32:56,159 --> 00:32:59,919
you know month-long red teaming

843
00:32:58,559 --> 00:33:02,879
engagements or two-month-old

844
00:32:59,919 --> 00:33:04,320
red team engagements so um here we're

845
00:33:02,880 --> 00:33:07,360
coupling responder with

846
00:33:04,320 --> 00:33:10,639
mit m6 with ntlm really x

847
00:33:07,360 --> 00:33:13,120
we're pointing it at a list of hosts

848
00:33:10,640 --> 00:33:16,559
that have smb sign disabled

849
00:33:13,120 --> 00:33:17,120
and we're going to um the moment that we

850
00:33:16,559 --> 00:33:21,678
have

851
00:33:17,120 --> 00:33:24,639
uh code execution we're going to launch

852
00:33:21,679 --> 00:33:27,440
instructions to to the systems that um

853
00:33:24,640 --> 00:33:28,780
to pull our stager

854
00:33:27,440 --> 00:33:31,930
which is very dangerous

855
00:33:28,780 --> 00:33:31,930
[Music]

856
00:33:33,279 --> 00:33:39,840
this is

857
00:33:40,220 --> 00:33:44,720
[Music]

858
00:33:41,760 --> 00:33:46,240
so here we're spinning up our listeners

859
00:33:44,720 --> 00:33:49,760
um

860
00:33:46,240 --> 00:33:52,480
and we're using https listener and

861
00:33:49,760 --> 00:33:53,440
we're going to use ms build as our

862
00:33:52,480 --> 00:33:55,279
stager

863
00:33:53,440 --> 00:33:56,799
the reason why i'm doing ms build is

864
00:33:55,279 --> 00:34:00,240
because it allows us to

865
00:33:56,799 --> 00:34:03,760
to com effectively

866
00:34:00,240 --> 00:34:06,640
doing in on like a in memory

867
00:34:03,760 --> 00:34:07,679
compilation of our payload and then it's

868
00:34:06,640 --> 00:34:11,040
executed

869
00:34:07,679 --> 00:34:14,079
so nothing touches disk and

870
00:34:11,040 --> 00:34:17,599
in fact it wasn't until recently that

871
00:34:14,079 --> 00:34:20,639
we uh microsoft started actually using

872
00:34:17,599 --> 00:34:21,200
amc to look for for these types of

873
00:34:20,639 --> 00:34:22,960
attacks

874
00:34:21,199 --> 00:34:24,319
and there's a lot of different amps you

875
00:34:22,960 --> 00:34:28,399
bypasses but

876
00:34:24,320 --> 00:34:32,079
um we're generating a builder um

877
00:34:28,399 --> 00:34:34,960
for using ms build and what you'll see

878
00:34:32,079 --> 00:34:36,240
here in our attack scenario is we've got

879
00:34:34,960 --> 00:34:40,480
ntlm relays

880
00:34:36,239 --> 00:34:44,560
six um nti and tlm really x running

881
00:34:40,480 --> 00:34:46,960
um v6 uh coupled with mit m6

882
00:34:44,560 --> 00:34:48,078
and responder and we're effectively

883
00:34:46,960 --> 00:34:51,119
instructing

884
00:34:48,079 --> 00:34:54,800
a system to use

885
00:34:51,119 --> 00:34:58,000
ms build to connect to this smb shared

886
00:34:54,800 --> 00:35:01,200
and grab our stager and then compile

887
00:34:58,000 --> 00:35:02,800
and execute it and as you can see we're

888
00:35:01,200 --> 00:35:06,160
attacking

889
00:35:02,800 --> 00:35:08,480
you know every single target um on our

890
00:35:06,160 --> 00:35:10,720
on our internal network that has smb

891
00:35:08,480 --> 00:35:13,839
signing disabled and the moment

892
00:35:10,720 --> 00:35:16,000
a user has admin privileges um

893
00:35:13,839 --> 00:35:17,839
they're going to be ex they're going to

894
00:35:16,000 --> 00:35:20,000
download our stager compile it and

895
00:35:17,839 --> 00:35:23,200
execute it and we're getting shells

896
00:35:20,000 --> 00:35:25,280
with system privileges and

897
00:35:23,200 --> 00:35:26,319
as you can see from the time stamps here

898
00:35:25,280 --> 00:35:28,560
um

899
00:35:26,320 --> 00:35:30,000
this is you know on this this internal

900
00:35:28,560 --> 00:35:33,200
pen test i was able to pull

901
00:35:30,000 --> 00:35:35,280
up 50 60 shells within

902
00:35:33,200 --> 00:35:37,598
three seconds it was an absolute

903
00:35:35,280 --> 00:35:40,480
bloodbath so

904
00:35:37,599 --> 00:35:40,480
it's a great success

905
00:35:41,280 --> 00:35:46,400
so once we get our shells um

906
00:35:44,480 --> 00:35:47,920
you know i'm a big fan of of silent

907
00:35:46,400 --> 00:35:51,119
trinity um

908
00:35:47,920 --> 00:35:52,640
shout out to vipe leader um great tools

909
00:35:51,119 --> 00:35:54,400
that he produces um

910
00:35:52,640 --> 00:35:55,920
crack mac of the crack map exec is

911
00:35:54,400 --> 00:35:57,520
another one of my great tools

912
00:35:55,920 --> 00:35:59,839
one of his one of his great tools that

913
00:35:57,520 --> 00:36:04,560
i'd love to use on my on my tests

914
00:35:59,839 --> 00:36:05,839
um but over here we've got a amc bypass

915
00:36:04,560 --> 00:36:08,799
and what we're effectively doing is

916
00:36:05,839 --> 00:36:11,520
we're suspending defender

917
00:36:08,800 --> 00:36:12,960
um momentarily so that way we can run

918
00:36:11,520 --> 00:36:15,680
minicats

919
00:36:12,960 --> 00:36:16,720
and obtain clear text credentials and

920
00:36:15,680 --> 00:36:17,919
then

921
00:36:16,720 --> 00:36:20,720
and you can see in the screenshot we're

922
00:36:17,920 --> 00:36:23,920
running on a 2012 server and then

923
00:36:20,720 --> 00:36:25,279
once we obtain the credentials we're

924
00:36:23,920 --> 00:36:28,480
going to

925
00:36:25,280 --> 00:36:31,839
enable the amc

926
00:36:28,480 --> 00:36:34,000
service so um highly highly effective

927
00:36:31,839 --> 00:36:34,880
and you're making even cast great again

928
00:36:34,000 --> 00:36:38,240
there's

929
00:36:34,880 --> 00:36:41,280
alternative methods as well um donut

930
00:36:38,240 --> 00:36:44,319
you can you know use

931
00:36:41,280 --> 00:36:46,720
uh el sassy uh proc dump

932
00:36:44,320 --> 00:36:50,480
anything really but uh just one of one

933
00:36:46,720 --> 00:36:50,480
of the quick fun easy ways of doing it

934
00:36:52,400 --> 00:36:58,560
you mean the sound yes

935
00:36:55,520 --> 00:37:00,720
but i haven't used it once made sun for

936
00:36:58,560 --> 00:37:01,759
thousands of years now it's time my

937
00:37:00,720 --> 00:37:09,839
friend

938
00:37:01,760 --> 00:37:09,839
so danny i make the sound

939
00:37:13,200 --> 00:37:20,799
all right so we have two minutes left um

940
00:37:17,280 --> 00:37:24,400
i'm gonna do as much as i can from

941
00:37:20,800 --> 00:37:25,760
the defensive side um and we will post

942
00:37:24,400 --> 00:37:29,040
the slides so

943
00:37:25,760 --> 00:37:31,520
um yeah check

944
00:37:29,040 --> 00:37:32,320
uh i'm trying to check more um so first

945
00:37:31,520 --> 00:37:34,960
thing

946
00:37:32,320 --> 00:37:37,680
infrastructure is code um hashicorp

947
00:37:34,960 --> 00:37:40,720
terraform or aws platformation

948
00:37:37,680 --> 00:37:41,440
um terraforms on the left cloudformation

949
00:37:40,720 --> 00:37:44,560
on the right

950
00:37:41,440 --> 00:37:45,359
um the biggest advantage that i see from

951
00:37:44,560 --> 00:37:47,200
that is

952
00:37:45,359 --> 00:37:48,400
especially if you do daily scans or

953
00:37:47,200 --> 00:37:50,960
daily updates

954
00:37:48,400 --> 00:37:51,920
you can see when things change if

955
00:37:50,960 --> 00:37:55,040
they're not in code

956
00:37:51,920 --> 00:37:55,760
and they changed either someone changed

957
00:37:55,040 --> 00:37:57,599
it

958
00:37:55,760 --> 00:38:00,079
manually a developer which he shouldn't

959
00:37:57,599 --> 00:38:04,240
be able to do in terms of permissions

960
00:38:00,079 --> 00:38:07,440
but it's very

961
00:38:04,240 --> 00:38:10,720
um immutable infrastructure um hashicorp

962
00:38:07,440 --> 00:38:11,599
packer can bake amis and not start

963
00:38:10,720 --> 00:38:14,319
patching things

964
00:38:11,599 --> 00:38:15,680
so you make a new ami every time a new

965
00:38:14,320 --> 00:38:18,640
update or patch comes out

966
00:38:15,680 --> 00:38:21,118
and you deploy um across your

967
00:38:18,640 --> 00:38:23,598
infrastructure

968
00:38:21,119 --> 00:38:26,000
um duplicating your cloud trail buckets

969
00:38:23,599 --> 00:38:28,240
to another account with a one-way sync

970
00:38:26,000 --> 00:38:29,119
um great medium article that shows how

971
00:38:28,240 --> 00:38:31,839
to do this

972
00:38:29,119 --> 00:38:32,480
um even if someone gets rude access to

973
00:38:31,839 --> 00:38:34,960
your account

974
00:38:32,480 --> 00:38:36,560
he won't be able to delete it because it

975
00:38:34,960 --> 00:38:38,640
has the right only

976
00:38:36,560 --> 00:38:41,279
permission to write it to a bucket in a

977
00:38:38,640 --> 00:38:41,279
different account

978
00:38:41,440 --> 00:38:45,280
secret management highly encouraged to

979
00:38:43,200 --> 00:38:46,640
use it don't hard code

980
00:38:45,280 --> 00:38:48,640
don't put things in environmental

981
00:38:46,640 --> 00:38:52,078
variables

982
00:38:48,640 --> 00:38:53,200
i use hashicorp vault but aws ssm

983
00:38:52,079 --> 00:38:56,079
parameter store is

984
00:38:53,200 --> 00:38:57,279
also great for that i like hashicorp

985
00:38:56,079 --> 00:38:59,520
vault because

986
00:38:57,280 --> 00:39:01,280
it does generate short-lived db

987
00:38:59,520 --> 00:39:05,040
credentials

988
00:39:01,280 --> 00:39:08,240
and i think we're out of time so

989
00:39:05,040 --> 00:39:11,279
check out this list of open source tools

990
00:39:08,240 --> 00:39:13,439
highly recommend using them and those

991
00:39:11,280 --> 00:39:16,800
two aws services

992
00:39:13,440 --> 00:39:19,920
and if we have time for questions we can

993
00:39:16,800 --> 00:39:19,920
take a question

994
00:39:20,079 --> 00:39:23,200
right uh we're out of time because we're

995
00:39:22,720 --> 00:39:25,839
kind of

996
00:39:23,200 --> 00:39:26,799
a little bit a couple of minutes behind

997
00:39:25,839 --> 00:39:28,560
but um

998
00:39:26,800 --> 00:39:30,400
well be taking a two minute break

999
00:39:28,560 --> 00:39:31,040
between sessions but if you do have any

1000
00:39:30,400 --> 00:39:33,200
questions

1001
00:39:31,040 --> 00:39:34,560
um if then you know if you want me to

1002
00:39:33,200 --> 00:39:36,560
jump on the table

1003
00:39:34,560 --> 00:39:37,920
um and then people can find you and ask

1004
00:39:36,560 --> 00:39:40,160
any questions directly

1005
00:39:37,920 --> 00:39:40,960
within the two minute break or if you

1006
00:39:40,160 --> 00:39:42,799
guys are

1007
00:39:40,960 --> 00:39:43,920
around uh for the rest of the day

1008
00:39:42,800 --> 00:39:45,200
that'll be great as well if you want to

1009
00:39:43,920 --> 00:39:46,720
take any questions or

1010
00:39:45,200 --> 00:39:48,078
talk through it wasn't a question around

1011
00:39:46,720 --> 00:39:49,520
the slides which you answered danny's

1012
00:39:48,079 --> 00:39:50,960
that's fantastic i think a lot of people

1013
00:39:49,520 --> 00:39:53,359
are very interested in uh

1014
00:39:50,960 --> 00:39:55,119
in having a look at those and i think

1015
00:39:53,359 --> 00:39:56,400
that was pretty much it for the

1016
00:39:55,119 --> 00:39:58,880
for the questions anyway but if you do

1017
00:39:56,400 --> 00:40:00,240
have any uh these guys will

1018
00:39:58,880 --> 00:40:02,160
will hopefully be around for the next

1019
00:40:00,240 --> 00:40:04,720
little bit so thank you very much

1020
00:40:02,160 --> 00:40:05,839
uh i quite enjoyed it and the more zohan

1021
00:40:04,720 --> 00:40:09,118
referenced is the better

1022
00:40:05,839 --> 00:40:11,040
in my opinion in any presentation so

1023
00:40:09,119 --> 00:40:12,400
very very cool research and very very

1024
00:40:11,040 --> 00:40:13,200
cool hacking as well it's always really

1025
00:40:12,400 --> 00:40:15,119
nice to see

1026
00:40:13,200 --> 00:40:16,399
and i'll definitely appreciate live live

1027
00:40:15,119 --> 00:40:19,520
hacking in their live demo

1028
00:40:16,400 --> 00:40:19,520
because it never goes well

1029
00:40:19,680 --> 00:40:25,839
thank you very much thank you

