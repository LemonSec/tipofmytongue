1
00:00:01,760 --> 00:00:06,319
hey everyone welcome back

2
00:00:03,919 --> 00:00:06,960
um for the last afternoon of the oscar

3
00:00:06,319 --> 00:00:08,879
conference

4
00:00:06,960 --> 00:00:10,000
um so just a reminder you've all

5
00:00:08,880 --> 00:00:12,400
probably heard it before

6
00:00:10,000 --> 00:00:13,360
uh chrome is the recommended browser to

7
00:00:12,400 --> 00:00:15,360
use

8
00:00:13,360 --> 00:00:17,359
it seems to be the most stable and if

9
00:00:15,360 --> 00:00:19,359
you do have any issues guys um

10
00:00:17,359 --> 00:00:20,640
just you know refresh the page or reload

11
00:00:19,359 --> 00:00:23,840
the page seems to

12
00:00:20,640 --> 00:00:24,560
be the the way to get most problems

13
00:00:23,840 --> 00:00:29,039
resolved

14
00:00:24,560 --> 00:00:30,080
um so the last two presentations we have

15
00:00:29,039 --> 00:00:33,440
today are actually

16
00:00:30,080 --> 00:00:35,920
pre-recorded and the presenters

17
00:00:33,440 --> 00:00:38,800
uh for this next coming presentation are

18
00:00:35,920 --> 00:00:40,719
not uh able are not around to

19
00:00:38,800 --> 00:00:42,718
share any kind of questions and answers

20
00:00:40,719 --> 00:00:45,039
so unfortunately um

21
00:00:42,719 --> 00:00:46,960
we'll be taking no questions for for

22
00:00:45,039 --> 00:00:50,160
this next presentation

23
00:00:46,960 --> 00:00:53,440
um so without further ado i'm going to

24
00:00:50,160 --> 00:00:56,718
pass it to almond saggy and willam

25
00:00:53,440 --> 00:00:59,440
melton on their presentation

26
00:00:56,719 --> 00:01:00,480
orchestrated containers and how to hack

27
00:00:59,440 --> 00:01:03,199
them

28
00:01:00,480 --> 00:01:03,199
thanks very much

29
00:01:04,400 --> 00:01:07,680
everybody welcome to our talk

30
00:01:05,760 --> 00:01:08,159
orchestrated containers and how to hack

31
00:01:07,680 --> 00:01:11,600
them

32
00:01:08,159 --> 00:01:11,600
and a little bit of securing them

33
00:01:11,680 --> 00:01:15,840
my name is william matson i'm here with

34
00:01:13,439 --> 00:01:18,960
my colleague ayman sagi we are both

35
00:01:15,840 --> 00:01:20,960
uh security consultants at cyber cx

36
00:01:18,960 --> 00:01:23,280
we previously were with censor security

37
00:01:20,960 --> 00:01:24,720
before joining the scientist cx group

38
00:01:23,280 --> 00:01:26,240
um the most important thing that you

39
00:01:24,720 --> 00:01:26,960
need to know about the two of us is that

40
00:01:26,240 --> 00:01:30,000
we really

41
00:01:26,960 --> 00:01:30,240
enjoy any form of technology and most of

42
00:01:30,000 --> 00:01:32,799
all

43
00:01:30,240 --> 00:01:35,119
how to break and misuse it for nefarious

44
00:01:32,799 --> 00:01:38,479
purposes

45
00:01:35,119 --> 00:01:40,320
so why this talk well it's pretty simple

46
00:01:38,479 --> 00:01:41,200
containers and orchestration is gaining

47
00:01:40,320 --> 00:01:44,158
really

48
00:01:41,200 --> 00:01:45,200
in popularity uh these various

49
00:01:44,159 --> 00:01:47,280
implementations across

50
00:01:45,200 --> 00:01:48,960
all major cloud providers as well as the

51
00:01:47,280 --> 00:01:51,200
you know the the smaller

52
00:01:48,960 --> 00:01:52,880
smaller players um it's available

53
00:01:51,200 --> 00:01:54,479
virtually on all platforms

54
00:01:52,880 --> 00:01:56,079
you can even get your own communities on

55
00:01:54,479 --> 00:01:58,399
your raspberry pi which i found

56
00:01:56,079 --> 00:01:59,279
you know to be really really interesting

57
00:01:58,399 --> 00:02:01,040
um

58
00:01:59,280 --> 00:02:02,320
you know we get you we started running

59
00:02:01,040 --> 00:02:05,040
across this more and more

60
00:02:02,320 --> 00:02:06,798
on our pen chest engagements um so we

61
00:02:05,040 --> 00:02:08,800
started to dig a little bit deeper

62
00:02:06,799 --> 00:02:10,319
obviously you know we started we started

63
00:02:08,800 --> 00:02:12,080
to like it and

64
00:02:10,318 --> 00:02:13,920
we thought we'd share some of that some

65
00:02:12,080 --> 00:02:16,800
of that with you

66
00:02:13,920 --> 00:02:17,280
um the big thing with uh with containers

67
00:02:16,800 --> 00:02:18,959
and

68
00:02:17,280 --> 00:02:20,560
and orchestration specifically

69
00:02:18,959 --> 00:02:23,040
kubernetes for example

70
00:02:20,560 --> 00:02:24,319
is that implementations tend to become

71
00:02:23,040 --> 00:02:26,079
quite complex

72
00:02:24,319 --> 00:02:28,000
and i'm talking now about personal

73
00:02:26,080 --> 00:02:29,360
experience there's uh there's a bit of a

74
00:02:28,000 --> 00:02:31,280
learning curve

75
00:02:29,360 --> 00:02:34,080
in getting it to grips with everything

76
00:02:31,280 --> 00:02:36,560
uh to do to do with it

77
00:02:34,080 --> 00:02:38,400
so you know if you know uh this is not a

78
00:02:36,560 --> 00:02:39,840
talk about you know the intricacies of

79
00:02:38,400 --> 00:02:41,680
containers in kubernetes

80
00:02:39,840 --> 00:02:43,280
but it's probably useful to have a you

81
00:02:41,680 --> 00:02:44,640
know five minutes or less than five

82
00:02:43,280 --> 00:02:46,480
minutes um background

83
00:02:44,640 --> 00:02:48,238
you know on on the different components

84
00:02:46,480 --> 00:02:49,840
that we might be looking at today

85
00:02:48,239 --> 00:02:51,440
i'm going to start with containers and

86
00:02:49,840 --> 00:02:53,360
that little meme down at the

87
00:02:51,440 --> 00:02:54,640
at the right says about everything if

88
00:02:53,360 --> 00:02:56,319
you're a developer if you've ever

89
00:02:54,640 --> 00:02:58,238
written a piece of code um

90
00:02:56,319 --> 00:03:00,238
and had to explain to people that yes it

91
00:02:58,239 --> 00:03:01,680
does work on my machine and not you know

92
00:03:00,239 --> 00:03:03,599
and i can't understand why it's not

93
00:03:01,680 --> 00:03:04,640
working on this then you would really

94
00:03:03,599 --> 00:03:07,200
appreciate

95
00:03:04,640 --> 00:03:08,319
containers now we've got a little

96
00:03:07,200 --> 00:03:09,879
picture of docker here

97
00:03:08,319 --> 00:03:12,560
docker is certainly not the only

98
00:03:09,879 --> 00:03:14,879
containerization technology out there

99
00:03:12,560 --> 00:03:15,599
uh there's there's quite quite a variety

100
00:03:14,879 --> 00:03:18,959
of them

101
00:03:15,599 --> 00:03:20,560
um but you know we predominantly work

102
00:03:18,959 --> 00:03:20,959
with docker and play around with docker

103
00:03:20,560 --> 00:03:22,560
and

104
00:03:20,959 --> 00:03:24,799
uh so far during the course of our

105
00:03:22,560 --> 00:03:25,360
assessments we've been predominantly

106
00:03:24,799 --> 00:03:26,640
faced

107
00:03:25,360 --> 00:03:28,720
you know with with docker as a

108
00:03:26,640 --> 00:03:32,319
technology um so

109
00:03:28,720 --> 00:03:34,159
in the spirit of in the spirit of docker

110
00:03:32,319 --> 00:03:36,238
we took this little definition straight

111
00:03:34,159 --> 00:03:36,959
from their resources and it basically

112
00:03:36,239 --> 00:03:38,319
goes along

113
00:03:36,959 --> 00:03:40,080
the lines of a container as a

114
00:03:38,319 --> 00:03:42,399
standardized unit of software

115
00:03:40,080 --> 00:03:43,599
that is packaged up in code and all

116
00:03:42,400 --> 00:03:45,040
those dependencies

117
00:03:43,599 --> 00:03:46,879
so that the application could run

118
00:03:45,040 --> 00:03:48,159
quickly reliably from one computing

119
00:03:46,879 --> 00:03:49,599
environment to another

120
00:03:48,159 --> 00:03:51,599
and that is the cool that is a really

121
00:03:49,599 --> 00:03:53,839
cool part with docker right

122
00:03:51,599 --> 00:03:54,798
if you've ever had a comp you know an

123
00:03:53,840 --> 00:03:56,080
application

124
00:03:54,799 --> 00:03:57,680
let's take for example a ruby

125
00:03:56,080 --> 00:03:59,120
application with all this dependency

126
00:03:57,680 --> 00:04:01,200
held on on linux

127
00:03:59,120 --> 00:04:02,400
docker really makes your life really

128
00:04:01,200 --> 00:04:06,319
easy

129
00:04:02,400 --> 00:04:07,439
okay um so that's just a little bit of a

130
00:04:06,319 --> 00:04:09,119
quick overview of the

131
00:04:07,439 --> 00:04:11,120
the base docker infrastructure but it

132
00:04:09,120 --> 00:04:12,879
it's pretty much similar across

133
00:04:11,120 --> 00:04:15,040
most of you know most content

134
00:04:12,879 --> 00:04:16,798
generalization technologies

135
00:04:15,040 --> 00:04:18,238
you've got your your bare metal your

136
00:04:16,798 --> 00:04:19,279
infrastructure that is running on your

137
00:04:18,238 --> 00:04:20,880
operating system

138
00:04:19,279 --> 00:04:22,960
the docker daemon which basically

139
00:04:20,880 --> 00:04:24,320
controls the controls the content that

140
00:04:22,960 --> 00:04:25,919
running controlling containers

141
00:04:24,320 --> 00:04:27,840
and then you've got your individual

142
00:04:25,919 --> 00:04:29,120
containers which is the applications

143
00:04:27,840 --> 00:04:30,960
that were containerized

144
00:04:29,120 --> 00:04:32,160
running on top of the running on top of

145
00:04:30,960 --> 00:04:35,680
the daemon

146
00:04:32,160 --> 00:04:37,120
um a lot of people initially you know

147
00:04:35,680 --> 00:04:38,720
when you when you first see

148
00:04:37,120 --> 00:04:40,720
you know containers you might you know

149
00:04:38,720 --> 00:04:42,400
think it's a it's nothing more than a

150
00:04:40,720 --> 00:04:44,639
you know a lightweight virtual machine

151
00:04:42,400 --> 00:04:47,039
but that's not exactly the case

152
00:04:44,639 --> 00:04:48,639
uh most of the you know virtualization

153
00:04:47,040 --> 00:04:51,759
happens in user space

154
00:04:48,639 --> 00:04:54,400
um it's pretty much exclusively you know

155
00:04:51,759 --> 00:04:55,199
linux orientated you can run docker on

156
00:04:54,400 --> 00:04:56,799
on on

157
00:04:55,199 --> 00:04:58,639
other operating systems the daemons or

158
00:04:56,800 --> 00:04:59,360
the containerization on other operating

159
00:04:58,639 --> 00:05:02,560
systems

160
00:04:59,360 --> 00:05:05,360
but you know we've mostly only seen

161
00:05:02,560 --> 00:05:06,800
linux applications be you know

162
00:05:05,360 --> 00:05:09,199
containerized

163
00:05:06,800 --> 00:05:10,479
it's extremely you know handy like i

164
00:05:09,199 --> 00:05:11,680
mentioned in the previous slide you know

165
00:05:10,479 --> 00:05:13,840
to be able to wrap your

166
00:05:11,680 --> 00:05:15,039
application in the digital bubble um and

167
00:05:13,840 --> 00:05:16,000
you know it makes it really easy for

168
00:05:15,039 --> 00:05:17,520
distribution

169
00:05:16,000 --> 00:05:19,919
the other the really cool thing about it

170
00:05:17,520 --> 00:05:21,198
is that there's multiple online sources

171
00:05:19,919 --> 00:05:23,120
like we said this is

172
00:05:21,199 --> 00:05:24,880
has been gaining in popularity you know

173
00:05:23,120 --> 00:05:27,039
you know you know quite fast

174
00:05:24,880 --> 00:05:28,320
um there's a lot of uh official and

175
00:05:27,039 --> 00:05:30,400
unofficial sources

176
00:05:28,320 --> 00:05:32,000
um you know on actually downloading and

177
00:05:30,400 --> 00:05:34,799
installing pre-built

178
00:05:32,000 --> 00:05:36,000
pre-baked docker images uh docker hub

179
00:05:34,800 --> 00:05:37,440
comes to mind

180
00:05:36,000 --> 00:05:39,360
and you know while that is super

181
00:05:37,440 --> 00:05:40,800
convenient it does come with quite a

182
00:05:39,360 --> 00:05:42,800
couple of drawbacks

183
00:05:40,800 --> 00:05:44,160
um i just mentioned images can be baked

184
00:05:42,800 --> 00:05:46,240
and reused that is

185
00:05:44,160 --> 00:05:48,080
really that's a really awesome feature

186
00:05:46,240 --> 00:05:49,120
specifically if you're in an agile

187
00:05:48,080 --> 00:05:51,359
environment

188
00:05:49,120 --> 00:05:52,960
and you know you want to you want to

189
00:05:51,360 --> 00:05:56,000
have dynamic deployments and

190
00:05:52,960 --> 00:05:58,479
and all of that it is it is pretty much

191
00:05:56,000 --> 00:05:59,039
awesome um also the other the other

192
00:05:58,479 --> 00:06:00,479
really

193
00:05:59,039 --> 00:06:02,560
really cool thing about containers is

194
00:06:00,479 --> 00:06:04,080
they you know they're non-persistent you

195
00:06:02,560 --> 00:06:07,120
know if something goes wrong you just

196
00:06:04,080 --> 00:06:08,479
wipe it and you just boot up a new one

197
00:06:07,120 --> 00:06:10,160
now with all of the cool things there's

198
00:06:08,479 --> 00:06:11,599
a couple of security considerations that

199
00:06:10,160 --> 00:06:15,280
need to be taken with these

200
00:06:11,600 --> 00:06:16,720
um and some of them or maybe you know

201
00:06:15,280 --> 00:06:18,559
when we say them it sounds like it's

202
00:06:16,720 --> 00:06:20,400
obvious but you do see that you know

203
00:06:18,560 --> 00:06:22,639
people tend to forget about that

204
00:06:20,400 --> 00:06:24,400
um as a traditional security-based

205
00:06:22,639 --> 00:06:26,720
practices we always hop on about you

206
00:06:24,400 --> 00:06:28,799
know patching and configuration issues

207
00:06:26,720 --> 00:06:30,240
uh that holds true for docker as well or

208
00:06:28,800 --> 00:06:32,080
for containers as well

209
00:06:30,240 --> 00:06:33,600
um but not just the containers

210
00:06:32,080 --> 00:06:35,280
themselves you know you've got to you

211
00:06:33,600 --> 00:06:36,800
you've got to keep your host your host

212
00:06:35,280 --> 00:06:38,799
operating system up to date

213
00:06:36,800 --> 00:06:40,240
the actual containerization demons the

214
00:06:38,800 --> 00:06:42,319
deals with your containers

215
00:06:40,240 --> 00:06:43,520
um but don't forget the actual

216
00:06:42,319 --> 00:06:46,240
containers themselves

217
00:06:43,520 --> 00:06:49,120
right yes you can you can you can pin to

218
00:06:46,240 --> 00:06:52,000
latest tags and things like that

219
00:06:49,120 --> 00:06:53,039
but a lot of people just you know pull

220
00:06:52,000 --> 00:06:56,240
down a base image

221
00:06:53,039 --> 00:06:58,080
build a you know of a specific version

222
00:06:56,240 --> 00:07:00,080
build on top of it and then then they

223
00:06:58,080 --> 00:07:01,680
reuse that the problem is is that just

224
00:07:00,080 --> 00:07:03,120
like a normal operating system

225
00:07:01,680 --> 00:07:04,960
your docker operating system for your

226
00:07:03,120 --> 00:07:06,800
specific container um

227
00:07:04,960 --> 00:07:08,080
you know can become out of date and

228
00:07:06,800 --> 00:07:09,919
contain you know

229
00:07:08,080 --> 00:07:12,080
contain security vulnerabilities right

230
00:07:09,919 --> 00:07:12,719
so you need to keep a keep a good eye on

231
00:07:12,080 --> 00:07:14,800
that

232
00:07:12,720 --> 00:07:16,400
also sensitive data can you know can be

233
00:07:14,800 --> 00:07:17,759
left on you know on these containers

234
00:07:16,400 --> 00:07:19,120
people also tend to forget that a

235
00:07:17,759 --> 00:07:22,000
container is still

236
00:07:19,120 --> 00:07:22,880
you know a little um you know operating

237
00:07:22,000 --> 00:07:25,039
system and

238
00:07:22,880 --> 00:07:27,120
and it can be and it can be breached and

239
00:07:25,039 --> 00:07:28,800
in you know any data that's stored in

240
00:07:27,120 --> 00:07:30,880
there is not necessarily inherently

241
00:07:28,800 --> 00:07:34,400
secured just because it's in a container

242
00:07:30,880 --> 00:07:37,520
uh you need to just like in normal in in

243
00:07:34,400 --> 00:07:38,400
traditional security you need to watch

244
00:07:37,520 --> 00:07:40,719
out for

245
00:07:38,400 --> 00:07:42,000
overly permissive permissions we do find

246
00:07:40,720 --> 00:07:44,080
that a lot of containers

247
00:07:42,000 --> 00:07:46,000
actually you know run their applications

248
00:07:44,080 --> 00:07:49,680
as root within the container

249
00:07:46,000 --> 00:07:52,160
um also you know remove any unneeded

250
00:07:49,680 --> 00:07:54,000
you know executables or functionality uh

251
00:07:52,160 --> 00:07:54,560
it's always a good idea to build off the

252
00:07:54,000 --> 00:07:56,840
base

253
00:07:54,560 --> 00:07:59,039
the the bare bones um you know base

254
00:07:56,840 --> 00:08:00,960
images uh but we do find that

255
00:07:59,039 --> 00:08:03,599
for convenience sec people tend to build

256
00:08:00,960 --> 00:08:06,960
a a lot of containers off of

257
00:08:03,599 --> 00:08:07,520
you know fairly bulky uh base images for

258
00:08:06,960 --> 00:08:10,479
example

259
00:08:07,520 --> 00:08:11,120
a straight up ubuntu image and that

260
00:08:10,479 --> 00:08:12,719
allows

261
00:08:11,120 --> 00:08:14,319
you know an attacker that that

262
00:08:12,720 --> 00:08:16,319
potentially compromises those those

263
00:08:14,319 --> 00:08:17,759
containers with the ability to quickly

264
00:08:16,319 --> 00:08:19,759
load whatever tools they need on their

265
00:08:17,759 --> 00:08:22,000
oil it actually comes pre and pre-baked

266
00:08:19,759 --> 00:08:23,280
with with quite a lot of um you know

267
00:08:22,000 --> 00:08:26,400
useful tools

268
00:08:23,280 --> 00:08:28,719
also um you need to con you need to

269
00:08:26,400 --> 00:08:30,560
uh you know keep ahead of what are you

270
00:08:28,720 --> 00:08:32,959
exposing with these containers

271
00:08:30,560 --> 00:08:34,559
um you know again traditional network

272
00:08:32,958 --> 00:08:36,079
security does apply you know you only

273
00:08:34,559 --> 00:08:36,958
need to expose what you know what is

274
00:08:36,080 --> 00:08:39,680
required

275
00:08:36,958 --> 00:08:40,159
and uh again people we do see that

276
00:08:39,679 --> 00:08:42,000
people

277
00:08:40,159 --> 00:08:43,200
tend to forget that because it's it's

278
00:08:42,000 --> 00:08:45,440
it's a container

279
00:08:43,200 --> 00:08:46,399
and they see it as something different

280
00:08:45,440 --> 00:08:48,000
from you know

281
00:08:46,399 --> 00:08:49,440
you know the traditional security you

282
00:08:48,000 --> 00:08:51,120
know controls

283
00:08:49,440 --> 00:08:52,959
so this is just a quick little

284
00:08:51,120 --> 00:08:54,480
screenshot to show that we you know uh

285
00:08:52,959 --> 00:08:56,160
in the last couple years there has been

286
00:08:54,480 --> 00:08:59,200
some some some quite uh

287
00:08:56,160 --> 00:09:03,600
severe vulnerabilities in docker itself

288
00:08:59,200 --> 00:09:07,200
it's just an fyi um next kubernetes now

289
00:09:03,600 --> 00:09:09,600
you know if if if a container is is

290
00:09:07,200 --> 00:09:11,519
a really nice way of packaging it you

291
00:09:09,600 --> 00:09:13,200
know applications kubernetes is a really

292
00:09:11,519 --> 00:09:14,160
nice way of actually orchestrating and

293
00:09:13,200 --> 00:09:17,360
maintaining

294
00:09:14,160 --> 00:09:19,279
and getting a grip on on on on on a

295
00:09:17,360 --> 00:09:21,600
fleet of these containers

296
00:09:19,279 --> 00:09:23,360
right um it's essentially at its core

297
00:09:21,600 --> 00:09:26,480
it's a really big state machine

298
00:09:23,360 --> 00:09:28,640
to manage deploy you know keep track of

299
00:09:26,480 --> 00:09:30,480
kill and restart uh different

300
00:09:28,640 --> 00:09:32,480
containerized applications

301
00:09:30,480 --> 00:09:35,680
uh it basically consists of five major

302
00:09:32,480 --> 00:09:39,360
moving parts your nodes pods

303
00:09:35,680 --> 00:09:41,439
services uh deployments and

304
00:09:39,360 --> 00:09:43,040
ingresses now your nodes are basically

305
00:09:41,440 --> 00:09:44,480
the the host servers that

306
00:09:43,040 --> 00:09:46,160
you know that run every that run

307
00:09:44,480 --> 00:09:48,080
everything um

308
00:09:46,160 --> 00:09:49,439
the pods are group of one or more

309
00:09:48,080 --> 00:09:52,160
containers and

310
00:09:49,440 --> 00:09:54,320
specifications for how to run them um

311
00:09:52,160 --> 00:09:56,560
they all run within the shared context

312
00:09:54,320 --> 00:09:57,360
it's you know it's it's basically the

313
00:09:56,560 --> 00:10:00,000
building blocks

314
00:09:57,360 --> 00:10:01,600
you know for your kubernetes uh you know

315
00:10:00,000 --> 00:10:03,680
application deployments

316
00:10:01,600 --> 00:10:05,360
the deployments itself is basically a

317
00:10:03,680 --> 00:10:06,479
description of the desired state of the

318
00:10:05,360 --> 00:10:09,600
application

319
00:10:06,480 --> 00:10:11,680
um and kubernetes takes care you know

320
00:10:09,600 --> 00:10:12,720
takes the the desired state and makes

321
00:10:11,680 --> 00:10:14,640
sure that it happens

322
00:10:12,720 --> 00:10:16,079
right it keeps it he keeps it the way it

323
00:10:14,640 --> 00:10:17,680
should that's almost

324
00:10:16,079 --> 00:10:19,519
you know like the old playbooks that we

325
00:10:17,680 --> 00:10:20,959
used to use you know for example puppet

326
00:10:19,519 --> 00:10:22,959
chef or ansible

327
00:10:20,959 --> 00:10:24,319
services is just the way of extracting

328
00:10:22,959 --> 00:10:25,199
you know the application or you know and

329
00:10:24,320 --> 00:10:26,959
exposing them on

330
00:10:25,200 --> 00:10:28,320
as a network service you know you can

331
00:10:26,959 --> 00:10:29,518
think of it as plumbing you know

332
00:10:28,320 --> 00:10:31,680
the communication between pods

333
00:10:29,519 --> 00:10:34,000
themselves back in front end

334
00:10:31,680 --> 00:10:36,079
as well as to the outside you know using

335
00:10:34,000 --> 00:10:37,360
ingresses into and out of the kubernetes

336
00:10:36,079 --> 00:10:39,680
cluster

337
00:10:37,360 --> 00:10:41,519
and then i just mentioned ingresses

338
00:10:39,680 --> 00:10:42,719
increases is a simple way to

339
00:10:41,519 --> 00:10:45,040
you need to manage access to your

340
00:10:42,720 --> 00:10:46,640
servers it can provide load balancing

341
00:10:45,040 --> 00:10:47,360
ssl termination and a host of other

342
00:10:46,640 --> 00:10:50,399
features

343
00:10:47,360 --> 00:10:53,519
um it's almost like firewall rules

344
00:10:50,399 --> 00:10:56,160
uh almost like aws security groups but

345
00:10:53,519 --> 00:10:56,959
it's you know it's it's useful you know

346
00:10:56,160 --> 00:11:00,000
to

347
00:10:56,959 --> 00:11:02,479
to keep an eye on these suckers

348
00:11:00,000 --> 00:11:03,920
right so just again just with as with

349
00:11:02,480 --> 00:11:05,760
containers there's a couple of security

350
00:11:03,920 --> 00:11:07,839
considerations to take into account

351
00:11:05,760 --> 00:11:09,600
right again security vulnerabilities

352
00:11:07,839 --> 00:11:11,120
patches and most configurations now you

353
00:11:09,600 --> 00:11:11,600
need to make sure again that you keep

354
00:11:11,120 --> 00:11:13,200
your

355
00:11:11,600 --> 00:11:15,200
you know your orchestration services up

356
00:11:13,200 --> 00:11:16,880
to date as well as any plugins or

357
00:11:15,200 --> 00:11:18,640
additions that you've installed in them

358
00:11:16,880 --> 00:11:20,399
same with the with with the operating

359
00:11:18,640 --> 00:11:23,040
systems that you run them on

360
00:11:20,399 --> 00:11:23,440
um overly permissive access rights you

361
00:11:23,040 --> 00:11:25,920
know

362
00:11:23,440 --> 00:11:26,640
do tend to sneak in quite a bit inside

363
00:11:25,920 --> 00:11:28,719
you know

364
00:11:26,640 --> 00:11:29,760
inside these deployments just like i

365
00:11:28,720 --> 00:11:31,760
mentioned

366
00:11:29,760 --> 00:11:34,000
there's a bit of a learning curve it can

367
00:11:31,760 --> 00:11:36,560
be become quite complex

368
00:11:34,000 --> 00:11:38,480
so we do see a lot of uh access right

369
00:11:36,560 --> 00:11:39,439
issues and authentication issues with

370
00:11:38,480 --> 00:11:41,680
within

371
00:11:39,440 --> 00:11:44,240
you know these kubernetes deployments um

372
00:11:41,680 --> 00:11:46,319
also exposed administrative interfaces

373
00:11:44,240 --> 00:11:47,760
and i don't just mean to the internet in

374
00:11:46,320 --> 00:11:49,600
itself uh you can see

375
00:11:47,760 --> 00:11:51,600
in in the demo a bit later on you know

376
00:11:49,600 --> 00:11:53,839
how some of these can be abused

377
00:11:51,600 --> 00:11:55,519
um and then also network exposure you

378
00:11:53,839 --> 00:11:58,480
know internal external

379
00:11:55,519 --> 00:11:59,279
uh to the internet it's it's something

380
00:11:58,480 --> 00:12:00,560
to really keep

381
00:11:59,279 --> 00:12:02,079
you know you know to wrap your head

382
00:12:00,560 --> 00:12:04,880
around what you're exposing when you're

383
00:12:02,079 --> 00:12:06,880
exposing it and how you're exposing it

384
00:12:04,880 --> 00:12:08,560
you know again this is just a little fyi

385
00:12:06,880 --> 00:12:09,680
to show that you know even kubernetes

386
00:12:08,560 --> 00:12:11,760
you know does suffer from some

387
00:12:09,680 --> 00:12:13,279
vulnerabilities maybe not as red as the

388
00:12:11,760 --> 00:12:15,600
as the the previous ones we've seen from

389
00:12:13,279 --> 00:12:17,600
docker now with that

390
00:12:15,600 --> 00:12:19,279
i hand you over to my brilliant

391
00:12:17,600 --> 00:12:20,480
colleague mr amen and he's going to take

392
00:12:19,279 --> 00:12:22,240
you through some

393
00:12:20,480 --> 00:12:25,440
some hacks that we've that we've been

394
00:12:22,240 --> 00:12:28,880
playing with on some of our assessments

395
00:12:25,440 --> 00:12:30,639
with you aiming all right

396
00:12:28,880 --> 00:12:33,439
you've heard enough let's see some

397
00:12:30,639 --> 00:12:35,839
action i'm gonna show you a simulation

398
00:12:33,440 --> 00:12:38,079
of an attack against kubernetes where

399
00:12:35,839 --> 00:12:39,600
the attacker will start attacking a

400
00:12:38,079 --> 00:12:41,359
container in a pod

401
00:12:39,600 --> 00:12:44,720
and move their way to compromise the

402
00:12:41,360 --> 00:12:44,720
host node and cluster

403
00:12:46,399 --> 00:12:50,160
let's first have a look at our

404
00:12:47,839 --> 00:12:51,120
architecture we have here a mini cube

405
00:12:50,160 --> 00:12:53,680
cluster

406
00:12:51,120 --> 00:12:55,760
and mini cube is a lightweight single

407
00:12:53,680 --> 00:12:57,920
node kubernetes cluster that can be

408
00:12:55,760 --> 00:13:00,160
installed in a simple vm

409
00:12:57,920 --> 00:13:02,160
in the mini cube cluster we have a pod

410
00:13:00,160 --> 00:13:04,480
that is running a container

411
00:13:02,160 --> 00:13:06,000
and the container exposes a web service

412
00:13:04,480 --> 00:13:08,079
which is running a vulnerable

413
00:13:06,000 --> 00:13:11,360
web application that the attacker will

414
00:13:08,079 --> 00:13:13,279
exploit to gain initial foothold

415
00:13:11,360 --> 00:13:14,720
okay let's get straight to the demo and

416
00:13:13,279 --> 00:13:20,240
hopefully it will not break

417
00:13:14,720 --> 00:13:22,560
let me just switch screen here

418
00:13:20,240 --> 00:13:24,880
here we have the attacker view and they

419
00:13:22,560 --> 00:13:27,839
are trying to attack a website

420
00:13:24,880 --> 00:13:29,360
let's say the oscert website not the

421
00:13:27,839 --> 00:13:31,680
real one of course i'm not saying that

422
00:13:29,360 --> 00:13:33,279
the offsite website is vulnerable

423
00:13:31,680 --> 00:13:35,760
well i can't say for sure because i have

424
00:13:33,279 --> 00:13:37,760
not tested it but that's the assumption

425
00:13:35,760 --> 00:13:39,120
maybe some foreign attackers tried to

426
00:13:37,760 --> 00:13:40,240
break in and hopefully they are not

427
00:13:39,120 --> 00:13:42,959
successful

428
00:13:40,240 --> 00:13:44,639
this is just a local copy of the clone

429
00:13:42,959 --> 00:13:46,319
of the assert website that i created for

430
00:13:44,639 --> 00:13:48,720
the purpose of this demo

431
00:13:46,320 --> 00:13:50,320
and perhaps to reuse it in future social

432
00:13:48,720 --> 00:13:53,360
engineering but with a more

433
00:13:50,320 --> 00:13:55,600
subtle and elegant url than this anyways

434
00:13:53,360 --> 00:13:57,519
jokes aside i added a vulnerable php

435
00:13:55,600 --> 00:13:59,360
code to that local copy of the website

436
00:13:57,519 --> 00:14:03,279
and now the attacker is going to

437
00:13:59,360 --> 00:14:06,000
exploit it to gain remote code execution

438
00:14:03,279 --> 00:14:06,000
as you see here

439
00:14:06,320 --> 00:14:12,000
the attacker runs arbitrary php code on

440
00:14:10,000 --> 00:14:13,760
the website and gets a shell

441
00:14:12,000 --> 00:14:15,360
and they get a shell in the kubernetes

442
00:14:13,760 --> 00:14:16,880
container but they don't know that yet

443
00:14:15,360 --> 00:14:18,720
all the attacker knows is that they got

444
00:14:16,880 --> 00:14:20,959
a shell on some web server

445
00:14:18,720 --> 00:14:22,880
so they start doing some enumeration to

446
00:14:20,959 --> 00:14:25,518
get understanding on

447
00:14:22,880 --> 00:14:26,959
on that web server they look at the

448
00:14:25,519 --> 00:14:29,120
hostname

449
00:14:26,959 --> 00:14:30,479
notice that the host name is minicube

450
00:14:29,120 --> 00:14:34,160
which suggests

451
00:14:30,480 --> 00:14:35,839
a mini cube cluster

452
00:14:34,160 --> 00:14:38,399
the attacker drops in a shell for

453
00:14:35,839 --> 00:14:41,519
further enumeration they look at the

454
00:14:38,399 --> 00:14:44,959
host's ip addresses and see

455
00:14:41,519 --> 00:14:46,480
some local net addresses which also

456
00:14:44,959 --> 00:14:49,920
aligns on what we see

457
00:14:46,480 --> 00:14:51,120
on what we have in minicube the attacker

458
00:14:49,920 --> 00:14:53,199
looks at

459
00:14:51,120 --> 00:14:55,760
what services are running on the local

460
00:14:53,199 --> 00:14:58,800
addresses they see a bunch of them

461
00:14:55,760 --> 00:15:00,240
some things running on port 8443 which

462
00:14:58,800 --> 00:15:02,560
could be listening as we will see in a

463
00:15:00,240 --> 00:15:02,560
moment

464
00:15:02,959 --> 00:15:06,319
the attacker looks at the mount points

465
00:15:04,800 --> 00:15:09,279
and finds a

466
00:15:06,320 --> 00:15:11,199
kubernetes volume which will contain the

467
00:15:09,279 --> 00:15:12,880
service account token that is used

468
00:15:11,199 --> 00:15:15,519
by the pod to interact with the

469
00:15:12,880 --> 00:15:17,760
kubernetes api server

470
00:15:15,519 --> 00:15:19,440
if we if we look at this file here let's

471
00:15:17,760 --> 00:15:22,079
have a look at this volume first we see

472
00:15:19,440 --> 00:15:25,680
there is a token and a certificate and

473
00:15:22,079 --> 00:15:30,399
namespace file this token

474
00:15:25,680 --> 00:15:30,399
hold a json json token gwt right here

475
00:15:30,959 --> 00:15:35,518
the attacker takes a look at the locally

476
00:15:33,360 --> 00:15:38,800
running services like that one on port

477
00:15:35,519 --> 00:15:41,279
843 we've seen before

478
00:15:38,800 --> 00:15:43,758
issues an http request with curl and

479
00:15:41,279 --> 00:15:47,759
they get a json response that looks like

480
00:15:43,759 --> 00:15:47,759
from kubernetes api server

481
00:15:48,720 --> 00:15:52,880
and it says we don't have access because

482
00:15:51,360 --> 00:15:54,399
we are running this

483
00:15:52,880 --> 00:15:58,560
the attacker can try to authenticate

484
00:15:54,399 --> 00:16:02,480
using the jwt token they just found

485
00:15:58,560 --> 00:16:05,599
so the attacker uploads

486
00:16:02,480 --> 00:16:06,800
the cube control utility the attacker

487
00:16:05,600 --> 00:16:08,399
has now identified

488
00:16:06,800 --> 00:16:09,920
which we will discuss now the attacker

489
00:16:08,399 --> 00:16:11,600
has now identified that they are running

490
00:16:09,920 --> 00:16:12,560
in some container and discovered the

491
00:16:11,600 --> 00:16:16,320
kubernetes

492
00:16:12,560 --> 00:16:19,119
api server location on the port 8443

493
00:16:16,320 --> 00:16:21,440
they also found a jwt token for the

494
00:16:19,120 --> 00:16:23,199
service account that runs the container

495
00:16:21,440 --> 00:16:24,639
armed with this information the attacker

496
00:16:23,199 --> 00:16:26,880
can start

497
00:16:24,639 --> 00:16:27,680
attempting to query the kubernetes api

498
00:16:26,880 --> 00:16:30,720
server for

499
00:16:27,680 --> 00:16:32,479
further elimination of the cluster and

500
00:16:30,720 --> 00:16:34,320
for the attacker's convenience

501
00:16:32,480 --> 00:16:36,800
they upload the cube control utility

502
00:16:34,320 --> 00:16:39,440
which is a standard kubernetes tool

503
00:16:36,800 --> 00:16:41,599
that can query or perform various

504
00:16:39,440 --> 00:16:43,680
administrative functions

505
00:16:41,600 --> 00:16:46,320
and there we go it's uploaded now the

506
00:16:43,680 --> 00:16:50,160
attacker drops back in the shell

507
00:16:46,320 --> 00:16:53,440
and runs the

508
00:16:50,160 --> 00:16:53,439
the cube control utility

509
00:16:56,000 --> 00:17:00,320
so now the attacker can pass that jwt

510
00:16:58,959 --> 00:17:03,599
token to cube control

511
00:17:00,320 --> 00:17:05,439
and url of the api server to perform

512
00:17:03,600 --> 00:17:08,640
some basic enumeration

513
00:17:05,439 --> 00:17:11,760
on the cluster for example

514
00:17:08,640 --> 00:17:12,400
the attacker tries to get the running

515
00:17:11,760 --> 00:17:16,000
pods on the

516
00:17:12,400 --> 00:17:17,520
pods on the cluster it doesn't work

517
00:17:16,000 --> 00:17:20,240
the api server says you don't have

518
00:17:17,520 --> 00:17:22,000
permission and we can see that our

519
00:17:20,240 --> 00:17:25,760
service account is called

520
00:17:22,000 --> 00:17:26,400
sa demo so the attacker tries something

521
00:17:25,760 --> 00:17:28,640
else

522
00:17:26,400 --> 00:17:29,840
for example enumerate cluster

523
00:17:28,640 --> 00:17:31,919
information

524
00:17:29,840 --> 00:17:33,439
instead of get pods we see cluster info

525
00:17:31,919 --> 00:17:35,440
here

526
00:17:33,440 --> 00:17:37,520
also no access it doesn't work as well

527
00:17:35,440 --> 00:17:38,320
so our service account is not fully

528
00:17:37,520 --> 00:17:39,679
privileged

529
00:17:38,320 --> 00:17:42,080
it does not have permission to do

530
00:17:39,679 --> 00:17:42,799
everything but there was one dangerous

531
00:17:42,080 --> 00:17:44,480
permission

532
00:17:42,799 --> 00:17:46,320
granted to that account which is the

533
00:17:44,480 --> 00:17:49,919
ability to get

534
00:17:46,320 --> 00:17:51,678
secrets as we see here the attacker

535
00:17:49,919 --> 00:17:53,840
tries to get secrets

536
00:17:51,679 --> 00:17:56,240
and secrets is like a vault in

537
00:17:53,840 --> 00:17:58,399
kubernetes cluster that stores

538
00:17:56,240 --> 00:17:59,360
secrets which can be username password

539
00:17:58,400 --> 00:18:01,520
credentials

540
00:17:59,360 --> 00:18:03,120
keys or any other sensitive information

541
00:18:01,520 --> 00:18:05,440
the attacker discovers that there's a

542
00:18:03,120 --> 00:18:08,719
secret called cube admin

543
00:18:05,440 --> 00:18:12,840
and they try to dump the

544
00:18:08,720 --> 00:18:14,799
secret details by outputting it in yaml

545
00:18:12,840 --> 00:18:16,720
format

546
00:18:14,799 --> 00:18:17,918
and we see here we get a username and

547
00:18:16,720 --> 00:18:21,280
password

548
00:18:17,919 --> 00:18:22,559
in base64 encoding

549
00:18:21,280 --> 00:18:24,879
actually that's not the one i wanted to

550
00:18:22,559 --> 00:18:24,879
show you

551
00:18:26,720 --> 00:18:32,160
we wanted to dump the cube admin secret

552
00:18:34,880 --> 00:18:39,120
so we get here a username and password

553
00:18:36,960 --> 00:18:42,000
in base64 encoding

554
00:18:39,120 --> 00:18:57,840
the attacker decodes back the username

555
00:18:42,000 --> 00:18:57,840
and the password

556
00:19:01,039 --> 00:19:04,480
the attacker gets a username called

557
00:19:03,280 --> 00:19:07,200
docker user

558
00:19:04,480 --> 00:19:08,559
and a fairly good password with upper

559
00:19:07,200 --> 00:19:11,600
lower cases

560
00:19:08,559 --> 00:19:13,360
alphabets and some numbers as well the

561
00:19:11,600 --> 00:19:14,399
attacker can then attempt to log in with

562
00:19:13,360 --> 00:19:17,120
these credentials

563
00:19:14,400 --> 00:19:18,080
or spray the password elsewhere so they

564
00:19:17,120 --> 00:19:22,000
try to login

565
00:19:18,080 --> 00:19:22,000
for example through the exposed sh

566
00:19:22,840 --> 00:19:27,918
interface

567
00:19:25,200 --> 00:19:29,679
in a new shell the attacker tries to sh

568
00:19:27,919 --> 00:19:33,520
using that docker user

569
00:19:29,679 --> 00:19:33,520
and the password they just decoded

570
00:19:36,080 --> 00:19:40,000
and they successfully log into the mini

571
00:19:38,000 --> 00:19:42,080
cube node the attacker is now in the

572
00:19:40,000 --> 00:19:44,000
cluster node itself that is running the

573
00:19:42,080 --> 00:19:48,320
pod not the container

574
00:19:44,000 --> 00:19:50,080
from from this shell so they can try to

575
00:19:48,320 --> 00:19:52,399
again enumerate all the info

576
00:19:50,080 --> 00:19:53,918
information that they couldn't do before

577
00:19:52,400 --> 00:19:56,080
we see here that we have

578
00:19:53,919 --> 00:19:57,679
keep control utility as because this is

579
00:19:56,080 --> 00:20:01,199
the node it's part of the container

580
00:19:57,679 --> 00:20:04,000
and it's installed as part of the

581
00:20:01,200 --> 00:20:06,559
kubernetes installation the attacker

582
00:20:04,000 --> 00:20:08,320
tries to look at

583
00:20:06,559 --> 00:20:12,080
lists the learning pause you see there's

584
00:20:08,320 --> 00:20:15,760
a port called oscar demo pod

585
00:20:12,080 --> 00:20:20,559
let's try to list pods in all namespaces

586
00:20:15,760 --> 00:20:22,400
see a bunch of them

587
00:20:20,559 --> 00:20:24,799
enumerate cluster information for

588
00:20:22,400 --> 00:20:24,799
example

589
00:20:26,640 --> 00:20:30,960
and we see here kubernetes services

590
00:20:29,760 --> 00:20:34,640
running on the

591
00:20:30,960 --> 00:20:37,679
local interface the attacker looks at

592
00:20:34,640 --> 00:20:39,679
the deployments this covers a kubernetes

593
00:20:37,679 --> 00:20:41,840
dashboard deployment

594
00:20:39,679 --> 00:20:42,960
and the keyboard is kubernetes dashboard

595
00:20:41,840 --> 00:20:44,879
is a web

596
00:20:42,960 --> 00:20:46,720
uh gui to interact with the cluster

597
00:20:44,880 --> 00:20:50,400
instead of running all these cube

598
00:20:46,720 --> 00:20:50,400
control commands in the command line

599
00:20:50,720 --> 00:20:54,080
the attacker takes a look at what

600
00:20:52,480 --> 00:20:57,760
services are running here

601
00:20:54,080 --> 00:20:59,520
we see something kubernetes process on

602
00:20:57,760 --> 00:21:03,360
port 8001 which is probably the

603
00:20:59,520 --> 00:21:05,520
kubernetes dashboard

604
00:21:03,360 --> 00:21:07,039
the attacker gets something else from

605
00:21:05,520 --> 00:21:09,918
the secrets gets the

606
00:21:07,039 --> 00:21:11,840
jwt token used to log into the

607
00:21:09,919 --> 00:21:13,840
kubernetes dashboard and notice that

608
00:21:11,840 --> 00:21:15,120
we are now enumerating secrets in a

609
00:21:13,840 --> 00:21:17,120
different

610
00:21:15,120 --> 00:21:18,879
deployment the kubernetes dashboard not

611
00:21:17,120 --> 00:21:21,678
the oscill demo

612
00:21:18,880 --> 00:21:22,159
so this was not um this would have not

613
00:21:21,679 --> 00:21:25,600
worked

614
00:21:22,159 --> 00:21:31,840
in the previous shell that we've that we

615
00:21:25,600 --> 00:21:31,840
that we were just in

616
00:21:32,480 --> 00:21:35,679
so the kubernetes dashboard is running

617
00:21:34,400 --> 00:21:37,440
on the local host

618
00:21:35,679 --> 00:21:39,600
which is not remotely accessible to the

619
00:21:37,440 --> 00:21:43,360
attacker what the attacker can do

620
00:21:39,600 --> 00:21:45,039
is they can set up an ssh tunnel

621
00:21:43,360 --> 00:21:47,439
using the same credentials that they

622
00:21:45,039 --> 00:21:49,840
discovered the ssh credentials

623
00:21:47,440 --> 00:21:50,480
the attacker will forward the traffic

624
00:21:49,840 --> 00:21:52,959
from

625
00:21:50,480 --> 00:21:54,640
their machine to their to the local host

626
00:21:52,960 --> 00:21:56,400
of the remote machine

627
00:21:54,640 --> 00:21:59,840
we again use the same credentials here

628
00:21:56,400 --> 00:21:59,840
to set up the tunnel

629
00:22:02,640 --> 00:22:06,960
now the attacker can try to access their

630
00:22:05,600 --> 00:22:09,678
own

631
00:22:06,960 --> 00:22:11,280
local 8001 port and it gets forwarded

632
00:22:09,679 --> 00:22:12,880
through the tunnel to the remote machine

633
00:22:11,280 --> 00:22:15,039
the localhost interface of the remote

634
00:22:12,880 --> 00:22:17,360
machine and we see indeed that we can

635
00:22:15,039 --> 00:22:20,480
access the kubernetes api

636
00:22:17,360 --> 00:22:23,678
the attacker tries to access the

637
00:22:20,480 --> 00:22:26,400
full url of the kubernetes dashboard

638
00:22:23,679 --> 00:22:28,240
and they are presented to login we can

639
00:22:26,400 --> 00:22:31,520
now log in with that jwt token that

640
00:22:28,240 --> 00:22:31,520
we've just extracted

641
00:22:37,280 --> 00:22:42,158
and the attacker gets in

642
00:22:40,480 --> 00:22:43,919
to the kubernetes dashboard they can see

643
00:22:42,159 --> 00:22:45,760
all the cluster information that we've

644
00:22:43,919 --> 00:22:48,320
previously seen

645
00:22:45,760 --> 00:22:50,640
and yeah that's it let's get back to the

646
00:22:48,320 --> 00:22:50,639
slides

647
00:22:51,919 --> 00:22:56,159
so what was wrong with this setup we had

648
00:22:54,159 --> 00:22:58,559
a vulnerable web application

649
00:22:56,159 --> 00:22:59,600
we had some misconfiguration in

650
00:22:58,559 --> 00:23:01,200
kubernetes

651
00:22:59,600 --> 00:23:02,799
where we assigned the dangerous

652
00:23:01,200 --> 00:23:03,760
permission to the service account that

653
00:23:02,799 --> 00:23:05,120
runs the pod

654
00:23:03,760 --> 00:23:07,360
there is also an increased attack

655
00:23:05,120 --> 00:23:10,320
surface with the ssh

656
00:23:07,360 --> 00:23:11,840
interface being exposed these are the

657
00:23:10,320 --> 00:23:13,678
commands that i use to create this

658
00:23:11,840 --> 00:23:14,158
vulnerable setup the first one here we

659
00:23:13,679 --> 00:23:16,559
see

660
00:23:14,159 --> 00:23:18,000
creates a role that has the ability to

661
00:23:16,559 --> 00:23:20,000
read the secrets

662
00:23:18,000 --> 00:23:21,679
and the second one the second one

663
00:23:20,000 --> 00:23:23,919
creates a role binding which

664
00:23:21,679 --> 00:23:26,320
effectively applies that role to a

665
00:23:23,919 --> 00:23:29,600
certain account which is the sa demo

666
00:23:26,320 --> 00:23:31,280
service account and here is diamond

667
00:23:29,600 --> 00:23:33,678
configuration of the pod

668
00:23:31,280 --> 00:23:34,480
we can see that it runs under the

669
00:23:33,679 --> 00:23:39,120
service account

670
00:23:34,480 --> 00:23:39,120
sa demo which had which has that role

671
00:23:39,200 --> 00:23:42,960
other permissions to watch for could be

672
00:23:41,039 --> 00:23:44,799
the ability to create pods

673
00:23:42,960 --> 00:23:46,240
if the attacker can create pods in your

674
00:23:44,799 --> 00:23:48,000
cluster they may provision

675
00:23:46,240 --> 00:23:49,520
crypto mining pods and waste your

676
00:23:48,000 --> 00:23:52,080
resources

677
00:23:49,520 --> 00:23:54,000
wildcard can give permissions to all

678
00:23:52,080 --> 00:23:55,199
verbs and resources so for example you

679
00:23:54,000 --> 00:23:57,600
can

680
00:23:55,200 --> 00:23:59,200
give give you can create a role that has

681
00:23:57,600 --> 00:24:03,360
the ability to

682
00:23:59,200 --> 00:24:06,720
list everything the verbs can be

683
00:24:03,360 --> 00:24:09,199
things like get or create or delete

684
00:24:06,720 --> 00:24:11,679
and resources can be pods deployments

685
00:24:09,200 --> 00:24:11,679
secrets

686
00:24:12,320 --> 00:24:17,120
so hardening should be an essential

687
00:24:14,960 --> 00:24:20,480
essential part of your build standard

688
00:24:17,120 --> 00:24:22,399
there are cis benchmarks for kubernetes

689
00:24:20,480 --> 00:24:24,559
and there are tools that can help you

690
00:24:22,400 --> 00:24:25,360
check and apply these benchmarks as we

691
00:24:24,559 --> 00:24:28,639
will see

692
00:24:25,360 --> 00:24:29,120
shortly some brief points to note about

693
00:24:28,640 --> 00:24:31,200
the

694
00:24:29,120 --> 00:24:32,879
pod isolation this will make it harder

695
00:24:31,200 --> 00:24:35,200
for the attacker to break out of the

696
00:24:32,880 --> 00:24:37,440
container to the host node

697
00:24:35,200 --> 00:24:39,279
uh if you set privilege to false a

698
00:24:37,440 --> 00:24:40,799
privileged spot has access to all

699
00:24:39,279 --> 00:24:43,200
devices on the host

700
00:24:40,799 --> 00:24:44,639
and similar to any process running on

701
00:24:43,200 --> 00:24:46,240
that host rather than being in a

702
00:24:44,640 --> 00:24:47,919
restricted container

703
00:24:46,240 --> 00:24:50,159
allowing host network will share the

704
00:24:47,919 --> 00:24:52,159
host network with the pod giving it

705
00:24:50,159 --> 00:24:52,960
access to the loopback interface and any

706
00:24:52,159 --> 00:24:56,159
services

707
00:24:52,960 --> 00:24:58,880
listening on the localhost hostpath

708
00:24:56,159 --> 00:24:59,600
lets you mount a path on the host inside

709
00:24:58,880 --> 00:25:01,279
the pod

710
00:24:59,600 --> 00:25:02,639
so again this could be something where

711
00:25:01,279 --> 00:25:04,559
the attacker can

712
00:25:02,640 --> 00:25:05,760
escape out of the container and access

713
00:25:04,559 --> 00:25:09,200
resources on

714
00:25:05,760 --> 00:25:09,919
on the node itself allow privilege

715
00:25:09,200 --> 00:25:12,000
escalation

716
00:25:09,919 --> 00:25:13,360
will prevent changing the effective user

717
00:25:12,000 --> 00:25:16,320
id this will

718
00:25:13,360 --> 00:25:17,279
break any suid binaries so if if you if

719
00:25:16,320 --> 00:25:19,120
you have some

720
00:25:17,279 --> 00:25:21,360
a container that needs to run so id

721
00:25:19,120 --> 00:25:22,879
binaries be careful with that

722
00:25:21,360 --> 00:25:24,719
read only file system will mount the

723
00:25:22,880 --> 00:25:26,880
container file system as read only which

724
00:25:24,720 --> 00:25:27,360
will prevent the attacker from uploading

725
00:25:26,880 --> 00:25:30,960
tools

726
00:25:27,360 --> 00:25:32,799
as we as we saw in the demo run as

727
00:25:30,960 --> 00:25:34,799
can let you run the container as an

728
00:25:32,799 --> 00:25:36,559
unroot user

729
00:25:34,799 --> 00:25:38,400
some additional hardenings to further

730
00:25:36,559 --> 00:25:41,279
look down the container and make it

731
00:25:38,400 --> 00:25:42,080
more difficult to escape out could be

732
00:25:41,279 --> 00:25:44,799
configured as

733
00:25:42,080 --> 00:25:45,520
a labels as linux labels or app armor

734
00:25:44,799 --> 00:25:48,000
profiles

735
00:25:45,520 --> 00:25:48,799
for your containers you can also filter

736
00:25:48,000 --> 00:25:51,200
or restrict the

737
00:25:48,799 --> 00:25:52,400
system calls a container can make using

738
00:25:51,200 --> 00:25:54,640
second

739
00:25:52,400 --> 00:25:57,840
and you can refer to this resource for

740
00:25:54,640 --> 00:25:57,840
additional information

741
00:25:59,440 --> 00:26:04,400
okay let's have another demo to see

742
00:26:01,360 --> 00:26:04,399
those tools in action

743
00:26:06,000 --> 00:26:10,640
okay the first tool i'd like to show you

744
00:26:08,159 --> 00:26:12,960
is kubernetes are back audit

745
00:26:10,640 --> 00:26:14,640
which can help you identify such

746
00:26:12,960 --> 00:26:17,600
dangerous permissions that are

747
00:26:14,640 --> 00:26:18,559
provisioned in your cluster and it works

748
00:26:17,600 --> 00:26:21,279
by

749
00:26:18,559 --> 00:26:22,399
simply exporting the current roles and

750
00:26:21,279 --> 00:26:25,600
permissions

751
00:26:22,400 --> 00:26:28,799
in json format and then running

752
00:26:25,600 --> 00:26:29,600
a python script against those json files

753
00:26:28,799 --> 00:26:32,639
which will

754
00:26:29,600 --> 00:26:34,480
perform its analysis and flag out any

755
00:26:32,640 --> 00:26:37,200
permissions as you see here it says

756
00:26:34,480 --> 00:26:39,600
that there's a role called secret reader

757
00:26:37,200 --> 00:26:42,880
that has the permission to list secrets

758
00:26:39,600 --> 00:26:44,320
and this role is bound to the sa demo

759
00:26:42,880 --> 00:26:46,240
service account

760
00:26:44,320 --> 00:26:48,480
as we've seen in the in the demo in the

761
00:26:46,240 --> 00:26:48,480
lab

762
00:26:48,799 --> 00:26:53,279
so this can help you identifying such

763
00:26:51,440 --> 00:26:54,400
permissions simply and acting

764
00:26:53,279 --> 00:26:56,159
accordingly

765
00:26:54,400 --> 00:26:57,919
the next thing the next thing i would

766
00:26:56,159 --> 00:27:00,240
like to show you is cubesack

767
00:26:57,919 --> 00:27:01,919
which is a security analysis for

768
00:27:00,240 --> 00:27:03,520
kubernetes resources

769
00:27:01,919 --> 00:27:05,200
it can be installed installed in

770
00:27:03,520 --> 00:27:07,520
multiple ways i have it here

771
00:27:05,200 --> 00:27:09,760
as a plug-in to cube control so keep

772
00:27:07,520 --> 00:27:14,240
control has a plug-in management called

773
00:27:09,760 --> 00:27:15,520
crew k-r-e-w and i have it installed as

774
00:27:14,240 --> 00:27:17,279
a plug-in to

775
00:27:15,520 --> 00:27:19,918
cube control where i can run it against

776
00:27:17,279 --> 00:27:23,600
a certain port for example let's try to

777
00:27:19,919 --> 00:27:23,600
scan the author demo pod

778
00:27:24,880 --> 00:27:29,520
running it like that cubesex can and

779
00:27:27,200 --> 00:27:31,840
then give it the pod

780
00:27:29,520 --> 00:27:34,080
it scans the pod and gives us a finding

781
00:27:31,840 --> 00:27:36,240
about sharing the host network

782
00:27:34,080 --> 00:27:37,600
it says processes in the pod can

783
00:27:36,240 --> 00:27:40,559
communicate with the host's

784
00:27:37,600 --> 00:27:40,559
loopback adapter

785
00:27:40,640 --> 00:27:44,480
very straightforward the other tool is

786
00:27:43,120 --> 00:27:47,360
cubebench

787
00:27:44,480 --> 00:27:48,000
and you can simply run this to perform

788
00:27:47,360 --> 00:27:50,639
the cis

789
00:27:48,000 --> 00:27:50,640
benchmarks

790
00:27:54,159 --> 00:27:58,799
cubebench runs the cis benchmarks and

791
00:27:57,120 --> 00:28:00,639
reports back the findings

792
00:27:58,799 --> 00:28:02,000
as we said before these should be these

793
00:28:00,640 --> 00:28:05,360
hardenings should be standard

794
00:28:02,000 --> 00:28:06,960
part of your build procedure

795
00:28:05,360 --> 00:28:08,399
and hopefully that was very

796
00:28:06,960 --> 00:28:11,120
straightforward and simple let's get

797
00:28:08,399 --> 00:28:11,120
back to the slides

798
00:28:14,640 --> 00:28:17,679
a couple of other relevant talks by our

799
00:28:17,039 --> 00:28:19,840
ceo

800
00:28:17,679 --> 00:28:20,880
mario goldschmidt i'll hand it over to

801
00:28:19,840 --> 00:28:23,760
willem here to

802
00:28:20,880 --> 00:28:23,760
tell you more about this

803
00:28:27,120 --> 00:28:30,639
um like you mentioned uh you know

804
00:28:29,279 --> 00:28:32,399
there's a couple of talks by one of our

805
00:28:30,640 --> 00:28:35,679
colleagues named mary goldschmidt

806
00:28:32,399 --> 00:28:37,840
now securing containers and um

807
00:28:35,679 --> 00:28:39,679
you know servers and and orchestration

808
00:28:37,840 --> 00:28:41,678
is quite a difficult task

809
00:28:39,679 --> 00:28:43,360
um yes the cis benchmarks and some of

810
00:28:41,679 --> 00:28:45,200
the tools that they showed you show this

811
00:28:43,360 --> 00:28:46,559
now is a really good start but it is

812
00:28:45,200 --> 00:28:48,399
only just to start

813
00:28:46,559 --> 00:28:50,480
um there's a whole lot more that you can

814
00:28:48,399 --> 00:28:52,080
do in in terms of runtime security

815
00:28:50,480 --> 00:28:53,919
in terms of vulnerability scanning of

816
00:28:52,080 --> 00:28:55,360
the actual containers themselves

817
00:28:53,919 --> 00:28:57,200
so if you want to if you want to dig

818
00:28:55,360 --> 00:28:58,959
deep into that i suggest you know

819
00:28:57,200 --> 00:29:00,320
to look up some of murray goldsmith's

820
00:28:58,960 --> 00:29:03,600
talks that he did at rsa

821
00:29:00,320 --> 00:29:05,760
uh in san francisco in 2010 2019

822
00:29:03,600 --> 00:29:07,199
it could be it could be really useful uh

823
00:29:05,760 --> 00:29:09,919
to you

824
00:29:07,200 --> 00:29:10,880
that said we're almost at the end um and

825
00:29:09,919 --> 00:29:13,120
just before we go

826
00:29:10,880 --> 00:29:14,559
i just wanted to remind you um you know

827
00:29:13,120 --> 00:29:16,399
you know a couple of key highlights that

828
00:29:14,559 --> 00:29:19,279
you need to take into account when

829
00:29:16,399 --> 00:29:20,399
if you're running uh docker or uh or

830
00:29:19,279 --> 00:29:23,039
container or

831
00:29:20,399 --> 00:29:23,760
uh communities clusters uh just gonna

832
00:29:23,039 --> 00:29:24,960
reiterate

833
00:29:23,760 --> 00:29:27,039
just when you make sure that you

834
00:29:24,960 --> 00:29:28,559
maintain your your patch levels both for

835
00:29:27,039 --> 00:29:30,399
you know for hosts services and

836
00:29:28,559 --> 00:29:31,760
containers um what are your

837
00:29:30,399 --> 00:29:34,000
configurations and permit

838
00:29:31,760 --> 00:29:35,520
you know and permissions quite regularly

839
00:29:34,000 --> 00:29:37,200
uh remember that

840
00:29:35,520 --> 00:29:39,279
in the end you know with uh

841
00:29:37,200 --> 00:29:41,039
containerization and orchestration it's

842
00:29:39,279 --> 00:29:43,360
primarily everything is software

843
00:29:41,039 --> 00:29:45,440
and as with any software is pieces of

844
00:29:43,360 --> 00:29:46,719
software bugs and misconfigurations do

845
00:29:45,440 --> 00:29:49,840
tend to creep in

846
00:29:46,720 --> 00:29:51,600
so keep a continuous eye on that and

847
00:29:49,840 --> 00:29:53,439
then don't forget about ingress

848
00:29:51,600 --> 00:29:54,879
and egress we've spoken about ingress

849
00:29:53,440 --> 00:29:56,000
but a lot of people also forget about

850
00:29:54,880 --> 00:29:58,240
egress

851
00:29:56,000 --> 00:29:59,679
in eamonn's demo he wouldn't have been

852
00:29:58,240 --> 00:30:00,559
able to connect back out from the

853
00:29:59,679 --> 00:30:02,799
compromised

854
00:30:00,559 --> 00:30:04,000
container if property egress controls

855
00:30:02,799 --> 00:30:06,240
were in place

856
00:30:04,000 --> 00:30:07,120
so with that i would like to say thank

857
00:30:06,240 --> 00:30:09,600
you for watching

858
00:30:07,120 --> 00:30:11,678
um and if there's any time feel free to

859
00:30:09,600 --> 00:30:12,959
to ask us questions

860
00:30:11,679 --> 00:30:14,399
if you don't want to ask us questions

861
00:30:12,960 --> 00:30:15,200
right now if you've got any questions

862
00:30:14,399 --> 00:30:17,360
please

863
00:30:15,200 --> 00:30:19,679
look at our look us up our email

864
00:30:17,360 --> 00:30:22,000
addresses is up at the top

865
00:30:19,679 --> 00:30:23,039
we love interacting with everybody so if

866
00:30:22,000 --> 00:30:31,520
you've got any questions

867
00:30:23,039 --> 00:30:31,520
feel free to ask thank you so much

