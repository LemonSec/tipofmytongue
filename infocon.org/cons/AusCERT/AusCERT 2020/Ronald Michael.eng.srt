1
00:00:02,800 --> 00:00:07,838
morning everyone welcome to

2
00:00:04,640 --> 00:00:09,040
uh oscar 2020 day two so for those of

3
00:00:07,839 --> 00:00:09,599
you who weren't here yesterday my name

4
00:00:09,040 --> 00:00:11,919
is john

5
00:00:09,599 --> 00:00:13,599
and i'll be hosting uh string4 for the

6
00:00:11,920 --> 00:00:15,360
rest of the day

7
00:00:13,599 --> 00:00:16,560
uh before we get started with our first

8
00:00:15,360 --> 00:00:17,198
speaker i just wanted to get through

9
00:00:16,560 --> 00:00:20,799
some

10
00:00:17,199 --> 00:00:23,119
housekeeping things so if you guys are

11
00:00:20,800 --> 00:00:24,000
using any browser try to use chrome and

12
00:00:23,119 --> 00:00:26,080
if anything

13
00:00:24,000 --> 00:00:27,119
crashes just refresh the browser and it

14
00:00:26,080 --> 00:00:28,720
should be good to go

15
00:00:27,119 --> 00:00:31,759
don't have too many tabs open at the

16
00:00:28,720 --> 00:00:33,519
same time we have some q a functionality

17
00:00:31,760 --> 00:00:34,719
on that right hand panel

18
00:00:33,520 --> 00:00:35,920
there that you can see so if you have

19
00:00:34,719 --> 00:00:37,360
any questions just put it there and i

20
00:00:35,920 --> 00:00:38,559
think people have the ability to vote it

21
00:00:37,360 --> 00:00:40,640
up

22
00:00:38,559 --> 00:00:42,559
which is good there's also a raise hand

23
00:00:40,640 --> 00:00:44,480
function at the bottom of your screen so

24
00:00:42,559 --> 00:00:46,079
if you want to ask a question live or

25
00:00:44,480 --> 00:00:48,078
have any issues just hit that

26
00:00:46,079 --> 00:00:49,760
and one of the guys will get to you as

27
00:00:48,079 --> 00:00:51,280
soon as they can and if you guys want to

28
00:00:49,760 --> 00:00:52,879
go back to the foyer during the

29
00:00:51,280 --> 00:00:53,600
presentation the link is in the general

30
00:00:52,879 --> 00:00:57,199
chat

31
00:00:53,600 --> 00:00:58,559
um window there so our first speaker for

32
00:00:57,199 --> 00:01:01,199
today is ronald michael

33
00:00:58,559 --> 00:01:02,959
from synopsis so ronald is a senior

34
00:01:01,199 --> 00:01:04,798
application engineer

35
00:01:02,960 --> 00:01:06,960
within their software integrity group

36
00:01:04,799 --> 00:01:08,240
and he specializes in devops automation

37
00:01:06,960 --> 00:01:10,559
and cloud security

38
00:01:08,240 --> 00:01:14,320
so his topic will be a modern approach

39
00:01:10,560 --> 00:01:14,320
to application security testing

40
00:01:14,400 --> 00:01:17,759
so go ahead ronald

41
00:01:21,600 --> 00:01:24,960
good morning to all the listeners today

42
00:01:23,600 --> 00:01:26,880
my name is ronald michael

43
00:01:24,960 --> 00:01:28,798
and i'm a senior application security

44
00:01:26,880 --> 00:01:31,600
engineer with synopsis

45
00:01:28,799 --> 00:01:34,560
i hope you are staying healthy and safe

46
00:01:31,600 --> 00:01:37,439
during these unprecedented times

47
00:01:34,560 --> 00:01:38,159
although it's exciting to be a part of

48
00:01:37,439 --> 00:01:41,839
this new

49
00:01:38,159 --> 00:01:44,799
virtual format most of us entered 2020

50
00:01:41,840 --> 00:01:47,200
expecting a very different reality than

51
00:01:44,799 --> 00:01:49,360
the one we currently live in

52
00:01:47,200 --> 00:01:50,320
but what's great to see is how we are

53
00:01:49,360 --> 00:01:53,600
navigating

54
00:01:50,320 --> 00:01:55,039
and adapting to this new world speaking

55
00:01:53,600 --> 00:01:58,158
of new

56
00:01:55,040 --> 00:02:00,320
the presentation i have for you is

57
00:01:58,159 --> 00:02:01,360
going to touch on a new innovative

58
00:02:00,320 --> 00:02:04,240
technology

59
00:02:01,360 --> 00:02:05,840
in the application security space i

60
00:02:04,240 --> 00:02:09,280
would like to thank you

61
00:02:05,840 --> 00:02:12,319
for joining and i hope i can add value

62
00:02:09,280 --> 00:02:14,879
to you in this session so let's get

63
00:02:12,319 --> 00:02:14,879
started

64
00:02:20,319 --> 00:02:27,200
here's the agenda for this session

65
00:02:24,319 --> 00:02:28,799
you'll get a background of why would any

66
00:02:27,200 --> 00:02:31,040
organization consider i

67
00:02:28,800 --> 00:02:32,400
asked in the first place by

68
00:02:31,040 --> 00:02:35,440
understanding the latest

69
00:02:32,400 --> 00:02:36,000
application security trends then we will

70
00:02:35,440 --> 00:02:39,040
see what

71
00:02:36,000 --> 00:02:41,840
eyes is all about and dive deeper

72
00:02:39,040 --> 00:02:43,840
into the inner workings of our ass and

73
00:02:41,840 --> 00:02:46,720
its different flavors

74
00:02:43,840 --> 00:02:50,879
and try to make sense on how it fits

75
00:02:46,720 --> 00:02:54,239
into the devsecops environment finally

76
00:02:50,879 --> 00:02:54,799
we will look at in what cases it makes

77
00:02:54,239 --> 00:02:57,159
sense

78
00:02:54,800 --> 00:03:00,480
to use i asked for different

79
00:02:57,159 --> 00:03:00,480
organizational needs

80
00:03:01,519 --> 00:03:06,239
so before we jump into the main topic

81
00:03:03,840 --> 00:03:08,720
let's try and understand the need

82
00:03:06,239 --> 00:03:11,040
for application security testing and

83
00:03:08,720 --> 00:03:14,080
focus on what's the problem

84
00:03:11,040 --> 00:03:15,280
in application security and why would

85
00:03:14,080 --> 00:03:19,760
organizations

86
00:03:15,280 --> 00:03:22,640
care about this most organizations

87
00:03:19,760 --> 00:03:24,640
are looking to adopt some level of

88
00:03:22,640 --> 00:03:27,679
devsecops practices

89
00:03:24,640 --> 00:03:29,279
into the development process for reasons

90
00:03:27,680 --> 00:03:32,159
of improved speed

91
00:03:29,280 --> 00:03:32,879
cost better development flow and improve

92
00:03:32,159 --> 00:03:36,239
quality

93
00:03:32,879 --> 00:03:36,239
through continuous feedback

94
00:03:36,560 --> 00:03:39,680
this is especially true for

95
00:03:38,640 --> 00:03:42,798
organizations

96
00:03:39,680 --> 00:03:46,319
building web-based applications

97
00:03:42,799 --> 00:03:49,680
gartner predicts 60 percent devsecops

98
00:03:46,319 --> 00:03:52,480
adoption by 2021 and you don't want to

99
00:03:49,680 --> 00:03:52,480
be left behind

100
00:03:53,920 --> 00:03:59,119
the problem is that this move towards

101
00:03:57,040 --> 00:04:02,400
devsecops practices

102
00:03:59,120 --> 00:04:03,360
makes application security testing more

103
00:04:02,400 --> 00:04:08,159
difficult than

104
00:04:03,360 --> 00:04:10,480
ever gartner research has determined

105
00:04:08,159 --> 00:04:11,760
that the traditional dast and pen

106
00:04:10,480 --> 00:04:13,679
testing tools

107
00:04:11,760 --> 00:04:16,159
which are commonly used to test

108
00:04:13,680 --> 00:04:19,680
web-based applications

109
00:04:16,160 --> 00:04:21,120
will struggle in these more automated

110
00:04:19,680 --> 00:04:23,680
devops oriented

111
00:04:21,120 --> 00:04:23,680
environments

112
00:04:24,560 --> 00:04:28,320
for sure everyone knows of cyber

113
00:04:26,800 --> 00:04:30,320
security attacks

114
00:04:28,320 --> 00:04:32,240
many organizations have significant

115
00:04:30,320 --> 00:04:36,400
network security in place

116
00:04:32,240 --> 00:04:37,759
but it's not enough as 84 percent of all

117
00:04:36,400 --> 00:04:42,638
cyber attacks

118
00:04:37,759 --> 00:04:45,199
are happening on the application layer

119
00:04:42,639 --> 00:04:46,320
this graph gives you a breakdown of

120
00:04:45,199 --> 00:04:48,960
attacks

121
00:04:46,320 --> 00:04:50,000
happening on different categories of

122
00:04:48,960 --> 00:04:52,479
applications

123
00:04:50,000 --> 00:04:53,680
and you will notice that microservices

124
00:04:52,479 --> 00:04:56,960
and web-based

125
00:04:53,680 --> 00:05:00,000
are on top of the list from this

126
00:04:56,960 --> 00:05:01,758
we can understand why application layer

127
00:05:00,000 --> 00:05:05,680
is the number one

128
00:05:01,759 --> 00:05:05,680
attack surface for hackers

129
00:05:08,160 --> 00:05:12,639
when we dig deeper into the state of

130
00:05:10,479 --> 00:05:16,159
automation used today

131
00:05:12,639 --> 00:05:18,479
the bulk of automation is still in

132
00:05:16,160 --> 00:05:19,759
the early part of software development

133
00:05:18,479 --> 00:05:22,719
lifecycle

134
00:05:19,759 --> 00:05:24,000
that is mostly when developers commit

135
00:05:22,720 --> 00:05:27,600
they code

136
00:05:24,000 --> 00:05:29,600
and build the code

137
00:05:27,600 --> 00:05:31,280
as you can see from the graph the

138
00:05:29,600 --> 00:05:34,639
automation level

139
00:05:31,280 --> 00:05:36,880
starts to drop from test to production

140
00:05:34,639 --> 00:05:39,280
phase

141
00:05:36,880 --> 00:05:40,080
nearly half of the development teams

142
00:05:39,280 --> 00:05:44,638
still run

143
00:05:40,080 --> 00:05:48,000
tests manually in test production phases

144
00:05:44,639 --> 00:05:49,919
and guess what most of the security

145
00:05:48,000 --> 00:05:53,600
vulnerabilities only show up

146
00:05:49,919 --> 00:05:56,080
during the test phases

147
00:05:53,600 --> 00:05:57,600
and all of this really compounds the

148
00:05:56,080 --> 00:06:00,639
time and effort

149
00:05:57,600 --> 00:06:04,560
that's needed to test troubleshoot

150
00:06:00,639 --> 00:06:07,039
and configure the ci cd pipeline

151
00:06:04,560 --> 00:06:10,479
not just for non-security bugs but

152
00:06:07,039 --> 00:06:10,479
security bugs as well

153
00:06:13,039 --> 00:06:16,400
this was another study performed by

154
00:06:15,120 --> 00:06:19,520
google last year

155
00:06:16,400 --> 00:06:22,799
on the state of devops we see that

156
00:06:19,520 --> 00:06:23,440
elite organizations automate and

157
00:06:22,800 --> 00:06:26,240
integrate

158
00:06:23,440 --> 00:06:26,960
tools more frequently into their tool

159
00:06:26,240 --> 00:06:29,600
chains

160
00:06:26,960 --> 00:06:30,719
on almost all dimensions all the

161
00:06:29,600 --> 00:06:35,520
automation may

162
00:06:30,720 --> 00:06:39,680
be seen as too expensive to implement

163
00:06:35,520 --> 00:06:41,840
automation is truly a sound investment

164
00:06:39,680 --> 00:06:43,520
it allows engineers to spend less time

165
00:06:41,840 --> 00:06:46,479
on manual work

166
00:06:43,520 --> 00:06:46,799
thereby freeing up the time to spend on

167
00:06:46,479 --> 00:06:50,639
the

168
00:06:46,800 --> 00:06:53,680
more important activities as you can see

169
00:06:50,639 --> 00:06:54,160
from this table security test automation

170
00:06:53,680 --> 00:06:57,280
lags

171
00:06:54,160 --> 00:06:57,280
across the board

172
00:06:59,759 --> 00:07:06,080
with all the recent attacks and breaches

173
00:07:02,800 --> 00:07:09,039
developers are definitely aware and no

174
00:07:06,080 --> 00:07:11,680
security is important but they don't

175
00:07:09,039 --> 00:07:14,639
have the time to spend on it

176
00:07:11,680 --> 00:07:16,720
developers don't focus on security

177
00:07:14,639 --> 00:07:19,680
because they are builders

178
00:07:16,720 --> 00:07:19,680
not breakers

179
00:07:20,160 --> 00:07:24,800
software development is more a creative

180
00:07:23,840 --> 00:07:27,919
endeavor

181
00:07:24,800 --> 00:07:30,400
than it's a rigorous engineering process

182
00:07:27,919 --> 00:07:31,280
developers primary job is to create

183
00:07:30,400 --> 00:07:34,799
features that

184
00:07:31,280 --> 00:07:36,080
work not to worry about what might go

185
00:07:34,800 --> 00:07:38,560
wrong

186
00:07:36,080 --> 00:07:39,680
and also they haven't been trained to do

187
00:07:38,560 --> 00:07:42,479
so

188
00:07:39,680 --> 00:07:46,240
hence you might find some of these

189
00:07:42,479 --> 00:07:49,520
questions on the slide fairly common

190
00:07:46,240 --> 00:07:52,160
but instead of making them

191
00:07:49,520 --> 00:07:53,520
change their methods and processes

192
00:07:52,160 --> 00:07:56,840
application security

193
00:07:53,520 --> 00:08:02,159
must align and adapt to the development

194
00:07:56,840 --> 00:08:02,159
workflows and that's a better approach

195
00:08:04,639 --> 00:08:09,680
as one of the endless number of acronyms

196
00:08:07,360 --> 00:08:12,319
in software security industry

197
00:08:09,680 --> 00:08:13,120
i asked doesn't have much going on for

198
00:08:12,319 --> 00:08:15,520
it

199
00:08:13,120 --> 00:08:18,160
it's awkward to pronounce and it's hard

200
00:08:15,520 --> 00:08:21,280
to guess what it stands for

201
00:08:18,160 --> 00:08:22,240
but what is important of course is what

202
00:08:21,280 --> 00:08:25,840
a string of

203
00:08:22,240 --> 00:08:28,560
letters does stand for and in that case

204
00:08:25,840 --> 00:08:30,080
interactive application security testing

205
00:08:28,560 --> 00:08:33,120
has a lot

206
00:08:30,080 --> 00:08:33,120
going on for it

207
00:08:36,559 --> 00:08:41,518
it is a tool that is remarkably

208
00:08:39,200 --> 00:08:43,120
effective at rooting out potentially

209
00:08:41,519 --> 00:08:46,880
catastrophic bugs

210
00:08:43,120 --> 00:08:50,880
in web based applications during

211
00:08:46,880 --> 00:08:50,880
software development life cycle

212
00:08:53,279 --> 00:08:59,439
so what is i asked please observe the

213
00:08:56,240 --> 00:08:59,440
keywords on the slide

214
00:09:01,920 --> 00:09:05,599
while there are a variety of testing

215
00:09:03,920 --> 00:09:07,760
tools and techniques

216
00:09:05,600 --> 00:09:08,959
each useful at different times and in

217
00:09:07,760 --> 00:09:11,920
different ways

218
00:09:08,959 --> 00:09:12,880
one of the most effective is iest a

219
00:09:11,920 --> 00:09:16,160
technique

220
00:09:12,880 --> 00:09:19,439
that does its analysis from within

221
00:09:16,160 --> 00:09:22,480
the application it does so

222
00:09:19,440 --> 00:09:24,560
by using software instrumentation by

223
00:09:22,480 --> 00:09:28,560
deploying agents

224
00:09:24,560 --> 00:09:32,160
and merely observing the interactions

225
00:09:28,560 --> 00:09:37,199
to identify the vulnerabilities in real

226
00:09:32,160 --> 00:09:40,079
time while the apps are running

227
00:09:37,200 --> 00:09:42,080
instrumentation is nothing new it's

228
00:09:40,080 --> 00:09:44,560
already being used in performance

229
00:09:42,080 --> 00:09:45,440
monitoring apps like new relic dyna

230
00:09:44,560 --> 00:09:48,160
trees

231
00:09:45,440 --> 00:09:49,440
app dynamics some of you must have heard

232
00:09:48,160 --> 00:09:53,439
of them

233
00:09:49,440 --> 00:09:56,640
you can think of it like a car dashboard

234
00:09:53,440 --> 00:09:57,760
with its instrumentation it displays all

235
00:09:56,640 --> 00:10:01,439
this information

236
00:09:57,760 --> 00:10:04,480
in real time while the car is running

237
00:10:01,440 --> 00:10:08,959
without impacting the performance

238
00:10:04,480 --> 00:10:08,959
this way it's non-intrusive

239
00:10:17,200 --> 00:10:22,800
but before we dive deeper into i asked

240
00:10:20,399 --> 00:10:23,440
let's look at some of the other tools we

241
00:10:22,800 --> 00:10:27,279
have

242
00:10:23,440 --> 00:10:32,560
and the differences other tools

243
00:10:27,279 --> 00:10:35,519
yes that means even more acronyms

244
00:10:32,560 --> 00:10:36,959
which include sas static application

245
00:10:35,519 --> 00:10:40,079
security testing

246
00:10:36,959 --> 00:10:43,119
das dynamic application security testing

247
00:10:40,079 --> 00:10:44,959
and rast runtime application security

248
00:10:43,120 --> 00:10:48,399
testing

249
00:10:44,959 --> 00:10:49,680
sast is the grand daddy of application

250
00:10:48,399 --> 00:10:52,800
security testing

251
00:10:49,680 --> 00:10:56,079
and having been in developers toolbox

252
00:10:52,800 --> 00:10:56,079
more than a decade

253
00:10:56,480 --> 00:10:59,600
it helps developers analyze an

254
00:10:58,560 --> 00:11:02,079
application's

255
00:10:59,600 --> 00:11:04,480
source code to determine whether the

256
00:11:02,079 --> 00:11:06,719
security vulnerabilities exist

257
00:11:04,480 --> 00:11:08,240
and to ensure conformance with the

258
00:11:06,720 --> 00:11:11,440
internal coding

259
00:11:08,240 --> 00:11:15,600
guidelines das

260
00:11:11,440 --> 00:11:18,079
technologies are designed to detect

261
00:11:15,600 --> 00:11:18,959
conditions that indicate a security

262
00:11:18,079 --> 00:11:22,160
vulnerability

263
00:11:18,959 --> 00:11:24,959
in running applications note

264
00:11:22,160 --> 00:11:26,000
the difference from sas which tests

265
00:11:24,959 --> 00:11:31,279
applications as

266
00:11:26,000 --> 00:11:31,279
code not while it's running

267
00:11:31,600 --> 00:11:35,360
the ios technology combines and enhances

268
00:11:34,320 --> 00:11:39,519
benefits of

269
00:11:35,360 --> 00:11:43,200
sassed and dust the accuracy of an ios

270
00:11:39,519 --> 00:11:46,240
vastly improves that of sassed and dast

271
00:11:43,200 --> 00:11:49,600
because it benefits from the static and

272
00:11:46,240 --> 00:11:50,480
runtime points of view while it's not a

273
00:11:49,600 --> 00:11:53,680
complete

274
00:11:50,480 --> 00:11:54,800
replacement for dust or pen testing it

275
00:11:53,680 --> 00:11:58,160
is superior to

276
00:11:54,800 --> 00:12:00,079
both for finding vulnerabilities earlier

277
00:11:58,160 --> 00:12:03,360
in the sdlc

278
00:12:00,079 --> 00:12:06,800
with when it is easier faster

279
00:12:03,360 --> 00:12:06,800
and cheaper to fix them

280
00:12:07,120 --> 00:12:10,480
rasp integrates with an application to

281
00:12:09,839 --> 00:12:15,600
prevent

282
00:12:10,480 --> 00:12:19,040
attacks at runtime by analyzing traffic

283
00:12:15,600 --> 00:12:21,920
and end user behavior

284
00:12:19,040 --> 00:12:22,240
these tools should complement rather

285
00:12:21,920 --> 00:12:25,680
than

286
00:12:22,240 --> 00:12:29,519
replace your testing strategy each

287
00:12:25,680 --> 00:12:32,239
apsec tool have distinct advantages

288
00:12:29,519 --> 00:12:39,839
but you'll get the best results when you

289
00:12:32,240 --> 00:12:39,839
use them together

290
00:12:40,000 --> 00:12:43,680
you must be curious this sounds like a

291
00:12:42,480 --> 00:12:47,440
great tool

292
00:12:43,680 --> 00:12:47,439
but how does it really work

293
00:12:48,000 --> 00:12:54,959
well at its core it's based on runtime

294
00:12:52,320 --> 00:12:57,920
analysis technology

295
00:12:54,959 --> 00:12:59,040
it means we are able to look at the code

296
00:12:57,920 --> 00:13:02,560
as it's running

297
00:12:59,040 --> 00:13:03,279
as though we were a debugger debugger

298
00:13:02,560 --> 00:13:05,760
can stop

299
00:13:03,279 --> 00:13:07,120
every line of code in memory and look at

300
00:13:05,760 --> 00:13:10,319
things that are happening

301
00:13:07,120 --> 00:13:10,320
on the server side

302
00:13:12,639 --> 00:13:16,480
so in i asked the agent is doing all the

303
00:13:15,839 --> 00:13:19,120
magic

304
00:13:16,480 --> 00:13:20,160
through software instrumentation but

305
00:13:19,120 --> 00:13:24,320
what does it really

306
00:13:20,160 --> 00:13:27,680
see though the agent is able to monitor

307
00:13:24,320 --> 00:13:28,720
pretty much everything http requests and

308
00:13:27,680 --> 00:13:32,000
responses

309
00:13:28,720 --> 00:13:34,639
calls to the database the data flows and

310
00:13:32,000 --> 00:13:36,800
configuration information the tool then

311
00:13:34,639 --> 00:13:37,120
shows the reflection of the source code

312
00:13:36,800 --> 00:13:38,639
and

313
00:13:37,120 --> 00:13:40,399
points out the location of

314
00:13:38,639 --> 00:13:43,440
vulnerabilities for

315
00:13:40,399 --> 00:13:44,240
developers since they are running from

316
00:13:43,440 --> 00:13:47,360
within

317
00:13:44,240 --> 00:13:51,279
the application as tools detect

318
00:13:47,360 --> 00:13:53,680
vulnerabilities in the running code

319
00:13:51,279 --> 00:13:54,480
whether be it custom code third-party

320
00:13:53,680 --> 00:13:59,760
libraries

321
00:13:54,480 --> 00:13:59,760
or even code generated on the fly by the

322
00:14:00,839 --> 00:14:04,639
framework

323
00:14:02,480 --> 00:14:06,000
let's look at it in action in this

324
00:14:04,639 --> 00:14:08,480
animation

325
00:14:06,000 --> 00:14:10,000
the two steps here happen before the

326
00:14:08,480 --> 00:14:12,639
user gets a response

327
00:14:10,000 --> 00:14:13,760
back from the server that is immediate

328
00:14:12,639 --> 00:14:17,360
results

329
00:14:13,760 --> 00:14:19,519
as you can see once the agent

330
00:14:17,360 --> 00:14:21,040
analyzes the code and memory through

331
00:14:19,519 --> 00:14:25,040
software instrumentation

332
00:14:21,040 --> 00:14:25,040
with a key focus on security

333
00:14:25,519 --> 00:14:33,040
many of the is tools stop at this step

334
00:14:29,600 --> 00:14:36,160
however some advanced

335
00:14:33,040 --> 00:14:38,480
ir solutions can go a step further and

336
00:14:36,160 --> 00:14:41,600
replay the original http

337
00:14:38,480 --> 00:14:45,279
or https request with a malicious

338
00:14:41,600 --> 00:14:48,240
parameter value and verify that this

339
00:14:45,279 --> 00:14:51,920
vulnerability can be exploited

340
00:14:48,240 --> 00:14:58,320
this helps reducing the false positives

341
00:14:51,920 --> 00:15:01,360
to nearly zero

342
00:14:58,320 --> 00:15:02,800
if i were to zoom in on the magic that

343
00:15:01,360 --> 00:15:06,320
agent performs

344
00:15:02,800 --> 00:15:08,079
here's what it looks like at its core

345
00:15:06,320 --> 00:15:10,399
it uses instrumentation which is

346
00:15:08,079 --> 00:15:13,279
basically injecting code into the

347
00:15:10,399 --> 00:15:14,800
running application without modifying

348
00:15:13,279 --> 00:15:17,519
the binaries

349
00:15:14,800 --> 00:15:18,560
on the right you can see the original

350
00:15:17,519 --> 00:15:21,040
code flow

351
00:15:18,560 --> 00:15:21,599
and further right you can see these

352
00:15:21,040 --> 00:15:25,120
little

353
00:15:21,600 --> 00:15:27,440
orange blocks these are nothing but

354
00:15:25,120 --> 00:15:28,240
segments of instrumentation code

355
00:15:27,440 --> 00:15:32,000
inserted

356
00:15:28,240 --> 00:15:32,000
during the instrumentation process

357
00:15:33,199 --> 00:15:37,839
languages like java.net have an

358
00:15:36,160 --> 00:15:41,120
instrumentation api

359
00:15:37,839 --> 00:15:46,399
that makes this possible to put

360
00:15:41,120 --> 00:15:46,399
these orange code in place

361
00:15:46,959 --> 00:15:52,000
so what we put there are the things that

362
00:15:50,320 --> 00:15:54,480
we want to look at

363
00:15:52,000 --> 00:15:56,560
and access variables and memories and

364
00:15:54,480 --> 00:15:58,639
see what's going on

365
00:15:56,560 --> 00:16:00,399
it's transparent and doesn't have

366
00:15:58,639 --> 00:16:04,800
influence on the process

367
00:16:00,399 --> 00:16:04,800
and this way it's non-intrusive

368
00:16:06,720 --> 00:16:09,839
there are actually two types of highest

369
00:16:08,720 --> 00:16:13,440
approaches

370
00:16:09,839 --> 00:16:14,000
active and passive both approaches rely

371
00:16:13,440 --> 00:16:16,320
on an

372
00:16:14,000 --> 00:16:17,839
agent instrumented within the

373
00:16:16,320 --> 00:16:23,120
application

374
00:16:17,839 --> 00:16:26,000
let's have a look at the two methods

375
00:16:23,120 --> 00:16:27,040
the active iest approach combines a web

376
00:16:26,000 --> 00:16:31,920
scanner

377
00:16:27,040 --> 00:16:34,560
such as dast also known as inducer

378
00:16:31,920 --> 00:16:36,079
with an agent that sits inside the

379
00:16:34,560 --> 00:16:38,560
application server

380
00:16:36,079 --> 00:16:40,560
as you can see in the image two

381
00:16:38,560 --> 00:16:42,079
different components are required to

382
00:16:40,560 --> 00:16:44,638
perform the security

383
00:16:42,079 --> 00:16:46,239
analysis the attack component and the

384
00:16:44,639 --> 00:16:49,920
detect component

385
00:16:46,240 --> 00:16:50,880
the attack component scans the urls of

386
00:16:49,920 --> 00:16:53,279
the application

387
00:16:50,880 --> 00:16:55,759
by sending a list of known attack

388
00:16:53,279 --> 00:16:58,800
payloads

389
00:16:55,759 --> 00:16:59,759
this process can be considerably time

390
00:16:58,800 --> 00:17:01,758
consuming

391
00:16:59,759 --> 00:17:03,040
and depending on the size of the target

392
00:17:01,759 --> 00:17:06,000
application

393
00:17:03,040 --> 00:17:07,280
and the number of attack payloads the

394
00:17:06,000 --> 00:17:10,480
detect component

395
00:17:07,280 --> 00:17:13,119
which is ios provides additional context

396
00:17:10,480 --> 00:17:13,919
thanks to its visibility of the internal

397
00:17:13,119 --> 00:17:16,799
response

398
00:17:13,919 --> 00:17:18,000
of the application to the traffic that

399
00:17:16,799 --> 00:17:21,119
is generated by the

400
00:17:18,000 --> 00:17:24,240
attack component which is test

401
00:17:21,119 --> 00:17:28,000
active ios does not suit

402
00:17:24,240 --> 00:17:31,840
fast-paced development environments

403
00:17:28,000 --> 00:17:34,880
since das requires full compilation

404
00:17:31,840 --> 00:17:35,360
upon every code change and can only be

405
00:17:34,880 --> 00:17:39,440
used

406
00:17:35,360 --> 00:17:39,439
towards the end of the sdlc

407
00:17:43,600 --> 00:17:47,120
whereas on the other hand passive i

408
00:17:46,320 --> 00:17:49,280
asked

409
00:17:47,120 --> 00:17:51,760
implementations do not require a

410
00:17:49,280 --> 00:17:55,120
secondary inducer

411
00:17:51,760 --> 00:17:56,879
to attack because any kind of legitimate

412
00:17:55,120 --> 00:17:59,120
traffic is enough to perform the

413
00:17:56,880 --> 00:18:01,120
security analysis

414
00:17:59,120 --> 00:18:02,639
any sort of testing performed on the

415
00:18:01,120 --> 00:18:05,760
application where the

416
00:18:02,640 --> 00:18:07,280
automatic or manual will be leveraged to

417
00:18:05,760 --> 00:18:10,400
collect and deliver

418
00:18:07,280 --> 00:18:13,678
security issues on the running code

419
00:18:10,400 --> 00:18:17,440
in real time that is why

420
00:18:13,679 --> 00:18:20,720
passive ios is also known as full

421
00:18:17,440 --> 00:18:23,760
and activist is known as partial

422
00:18:20,720 --> 00:18:25,840
or light it does not perform

423
00:18:23,760 --> 00:18:27,200
attacks and scans to detect

424
00:18:25,840 --> 00:18:30,559
vulnerabilities

425
00:18:27,200 --> 00:18:31,760
so active doesn't necessarily equate to

426
00:18:30,559 --> 00:18:34,480
better here

427
00:18:31,760 --> 00:18:34,480
in this case

428
00:18:37,440 --> 00:18:43,280
ios bridges the gaps between sas dast

429
00:18:40,480 --> 00:18:46,559
and pen testing you could even say

430
00:18:43,280 --> 00:18:50,080
that the ios was made

431
00:18:46,559 --> 00:18:53,918
for devsecops and closely allied

432
00:18:50,080 --> 00:18:57,760
sdlc concepts of agile and ci cd

433
00:18:53,919 --> 00:19:01,440
let's find out how

434
00:18:57,760 --> 00:19:02,320
both traditional static and dynamic

435
00:19:01,440 --> 00:19:04,880
testing

436
00:19:02,320 --> 00:19:05,840
have limitations that leave a security

437
00:19:04,880 --> 00:19:09,280
testing gap

438
00:19:05,840 --> 00:19:12,480
in the sdlc especially for teams

439
00:19:09,280 --> 00:19:16,399
adopting ci cd and devops

440
00:19:12,480 --> 00:19:18,960
while sast can be used early in the sdlc

441
00:19:16,400 --> 00:19:20,320
it doesn't detect many of the real

442
00:19:18,960 --> 00:19:23,280
vulnerabilities

443
00:19:20,320 --> 00:19:25,760
that only show up during the running of

444
00:19:23,280 --> 00:19:28,799
the application

445
00:19:25,760 --> 00:19:29,200
dust and pen testing are complex and

446
00:19:28,799 --> 00:19:32,000
used

447
00:19:29,200 --> 00:19:32,880
late in the sdlc and don't integrate

448
00:19:32,000 --> 00:19:35,600
very well

449
00:19:32,880 --> 00:19:36,320
into the workflow of ci cd pipelines

450
00:19:35,600 --> 00:19:38,959
making it

451
00:19:36,320 --> 00:19:42,559
costly and time consuming to fix

452
00:19:38,960 --> 00:19:42,559
vulnerabilities that are found

453
00:19:43,120 --> 00:19:46,320
there is a obvious gap with the

454
00:19:45,600 --> 00:19:50,639
traditional

455
00:19:46,320 --> 00:19:53,678
tools and they have their own limitation

456
00:19:50,640 --> 00:19:54,640
ias addresses this gap by providing a

457
00:19:53,679 --> 00:19:57,520
solution

458
00:19:54,640 --> 00:19:59,360
that allows for automated testing of web

459
00:19:57,520 --> 00:20:02,559
application

460
00:19:59,360 --> 00:20:04,719
with the ability to provide development

461
00:20:02,559 --> 00:20:08,399
with the specific location of

462
00:20:04,720 --> 00:20:08,400
vulnerabilities in the code

463
00:20:09,760 --> 00:20:17,039
ios can be used in all stages of sdlc

464
00:20:13,600 --> 00:20:19,918
but it has most profound impact

465
00:20:17,039 --> 00:20:20,960
and return on investment in the

466
00:20:19,919 --> 00:20:24,640
development

467
00:20:20,960 --> 00:20:26,640
testing and qa phases

468
00:20:24,640 --> 00:20:28,400
any sort of testing performed on the

469
00:20:26,640 --> 00:20:31,360
application whether

470
00:20:28,400 --> 00:20:32,559
automatic or manual functional or

471
00:20:31,360 --> 00:20:35,039
non-functional

472
00:20:32,559 --> 00:20:36,399
will be leveraged to collect and deliver

473
00:20:35,039 --> 00:20:39,120
security issues

474
00:20:36,400 --> 00:20:40,480
on the running code in real time that's

475
00:20:39,120 --> 00:20:44,959
the beauty of it

476
00:20:40,480 --> 00:20:44,960
no additional config or setup

477
00:20:45,360 --> 00:20:51,280
after all the primary goal of devsecops

478
00:20:48,559 --> 00:20:53,760
is to have security practices baked into

479
00:20:51,280 --> 00:20:57,280
the agile development process

480
00:20:53,760 --> 00:21:03,840
rather than delaying testing until

481
00:20:57,280 --> 00:21:03,840
just before release

482
00:21:05,600 --> 00:21:09,840
in order to better appreciate the value

483
00:21:08,080 --> 00:21:12,158
of ios

484
00:21:09,840 --> 00:21:13,120
that it brings to the table let's have a

485
00:21:12,159 --> 00:21:15,520
look at some

486
00:21:13,120 --> 00:21:16,158
use cases and understand the many

487
00:21:15,520 --> 00:21:19,120
distinct

488
00:21:16,159 --> 00:21:20,400
advantages over traditional solutions

489
00:21:19,120 --> 00:21:23,360
and why it's poised

490
00:21:20,400 --> 00:21:25,280
to be the next big thing in the security

491
00:21:23,360 --> 00:21:28,959
industry

492
00:21:25,280 --> 00:21:31,760
we have some customers with few problems

493
00:21:28,960 --> 00:21:35,039
and they're hoping to resolve let's see

494
00:21:31,760 --> 00:21:39,120
how eyes can help them

495
00:21:35,039 --> 00:21:41,840
well michael scott self-proclaimed

496
00:21:39,120 --> 00:21:43,520
world's best boss wants to really help

497
00:21:41,840 --> 00:21:46,720
his organization

498
00:21:43,520 --> 00:21:50,158
his organization like many others

499
00:21:46,720 --> 00:21:50,960
rely exclusively on an external security

500
00:21:50,159 --> 00:21:54,400
consultant

501
00:21:50,960 --> 00:21:57,919
to perform manual pen testing post

502
00:21:54,400 --> 00:21:59,200
production the challenge for pen testers

503
00:21:57,919 --> 00:22:02,240
is that they have

504
00:21:59,200 --> 00:22:07,200
only a brief window to test what

505
00:22:02,240 --> 00:22:10,840
is new in any new given release

506
00:22:07,200 --> 00:22:12,240
however this would result in up to two

507
00:22:10,840 --> 00:22:14,720
weeks

508
00:22:12,240 --> 00:22:16,559
of work for developers and testers to

509
00:22:14,720 --> 00:22:19,280
remediate the vulnerabilities

510
00:22:16,559 --> 00:22:21,840
increasing the cost for remediation and

511
00:22:19,280 --> 00:22:24,840
slowing down the time to market

512
00:22:21,840 --> 00:22:26,320
this makes the process slow and

513
00:22:24,840 --> 00:22:29,039
expensive

514
00:22:26,320 --> 00:22:29,918
with i asked the developers within the

515
00:22:29,039 --> 00:22:33,120
organization

516
00:22:29,919 --> 00:22:36,400
can test while they develop

517
00:22:33,120 --> 00:22:37,360
ios gives a comprehensive look at the

518
00:22:36,400 --> 00:22:41,039
entire

519
00:22:37,360 --> 00:22:44,879
application and its components once

520
00:22:41,039 --> 00:22:47,120
any modification is made ios can be run

521
00:22:44,880 --> 00:22:48,480
on demand so testing is no longer

522
00:22:47,120 --> 00:22:52,399
constrained to a brief

523
00:22:48,480 --> 00:22:55,520
window before go live it enables

524
00:22:52,400 --> 00:23:00,000
substantial productivity gains versus

525
00:22:55,520 --> 00:23:00,000
manual verification by security teams

526
00:23:00,080 --> 00:23:06,840
this results in saving time and money

527
00:23:03,120 --> 00:23:09,918
and reduces the reliance on an external

528
00:23:06,840 --> 00:23:12,320
security consultant it's almost like

529
00:23:09,919 --> 00:23:13,760
having an automated virtual team of pen

530
00:23:12,320 --> 00:23:16,320
testers

531
00:23:13,760 --> 00:23:19,200
to identify common security

532
00:23:16,320 --> 00:23:19,200
vulnerabilities

533
00:23:20,720 --> 00:23:25,440
dwight schrute from the same company has

534
00:23:23,840 --> 00:23:28,720
a different focus

535
00:23:25,440 --> 00:23:32,159
the last thing a security or a dev team

536
00:23:28,720 --> 00:23:35,120
need is a massive list of

537
00:23:32,159 --> 00:23:36,559
potential vulnerabilities that require a

538
00:23:35,120 --> 00:23:39,760
lengthy tedious

539
00:23:36,559 --> 00:23:41,360
manual review and triaging in addition

540
00:23:39,760 --> 00:23:43,760
to being accurate

541
00:23:41,360 --> 00:23:45,520
your developers need detailed and

542
00:23:43,760 --> 00:23:47,919
contextual information

543
00:23:45,520 --> 00:23:49,279
about vulnerabilities and where they are

544
00:23:47,919 --> 00:23:52,159
located in the code

545
00:23:49,279 --> 00:23:53,200
and how to remediate them the best irish

546
00:23:52,159 --> 00:23:56,159
solutions can

547
00:23:53,200 --> 00:23:58,240
also automatically verify whether the

548
00:23:56,159 --> 00:24:01,520
vulnerabilities

549
00:23:58,240 --> 00:24:04,480
they find are exploitable so developers

550
00:24:01,520 --> 00:24:06,720
are less likely to investigate a bug

551
00:24:04,480 --> 00:24:07,919
only to come to the irritating

552
00:24:06,720 --> 00:24:10,240
conclusion

553
00:24:07,919 --> 00:24:12,080
that it is nothing more than a false

554
00:24:10,240 --> 00:24:14,799
positive

555
00:24:12,080 --> 00:24:16,080
this saves wasted time resolving false

556
00:24:14,799 --> 00:24:19,120
positives

557
00:24:16,080 --> 00:24:20,399
so helps the team focus on real critical

558
00:24:19,120 --> 00:24:23,439
vulnerabilities that

559
00:24:20,400 --> 00:24:23,440
matter the most

560
00:24:23,760 --> 00:24:30,080
morris who is the apsec head

561
00:24:26,960 --> 00:24:32,640
is worried about the open source risk

562
00:24:30,080 --> 00:24:34,240
with the prevalence of open source code

563
00:24:32,640 --> 00:24:36,880
in today's software

564
00:24:34,240 --> 00:24:39,039
effective ios tools need to be aware of

565
00:24:36,880 --> 00:24:42,320
the open source composition

566
00:24:39,039 --> 00:24:45,039
of the applications being tested

567
00:24:42,320 --> 00:24:46,000
some ios solutions have this feature

568
00:24:45,039 --> 00:24:49,200
giving teams

569
00:24:46,000 --> 00:24:51,520
additional insight into vulnerabilities

570
00:24:49,200 --> 00:24:53,039
license type version numbers of open

571
00:24:51,520 --> 00:24:55,440
source components

572
00:24:53,039 --> 00:24:57,760
libraries and frameworks used in the

573
00:24:55,440 --> 00:24:57,760
code

574
00:24:58,480 --> 00:25:03,520
security auditor dinesh is keen on

575
00:25:01,679 --> 00:25:05,679
ensuring they are compliant with the

576
00:25:03,520 --> 00:25:08,799
standards that are important to

577
00:25:05,679 --> 00:25:11,520
his organization this technology

578
00:25:08,799 --> 00:25:12,158
identifies vulnerabilities that pose a

579
00:25:11,520 --> 00:25:14,960
real

580
00:25:12,159 --> 00:25:16,559
threat to critical data including

581
00:25:14,960 --> 00:25:19,600
complex vulnerabilities

582
00:25:16,559 --> 00:25:21,200
and logical flaws no other technology

583
00:25:19,600 --> 00:25:24,240
can detect

584
00:25:21,200 --> 00:25:27,440
stealing sensitive data is often

585
00:25:24,240 --> 00:25:30,480
the objective of malicious attacks

586
00:25:27,440 --> 00:25:32,799
ios is a data centric solution

587
00:25:30,480 --> 00:25:34,159
that is continuously tracking the flow

588
00:25:32,799 --> 00:25:37,760
of data across

589
00:25:34,159 --> 00:25:39,679
all application tiers and components

590
00:25:37,760 --> 00:25:42,480
it identifies whether the data is

591
00:25:39,679 --> 00:25:45,279
mishandled or insecurely stored

592
00:25:42,480 --> 00:25:46,080
and exposes potential data leaks before

593
00:25:45,279 --> 00:25:49,039
they become a

594
00:25:46,080 --> 00:25:49,760
business risk for organizations this

595
00:25:49,039 --> 00:25:52,799
enables

596
00:25:49,760 --> 00:25:56,000
sensitive data to be automatically

597
00:25:52,799 --> 00:25:59,679
tracked anytime they are

598
00:25:56,000 --> 00:26:04,240
saved unencrypted in a log database

599
00:25:59,679 --> 00:26:05,600
or file sensitive data tracking helps

600
00:26:04,240 --> 00:26:10,080
organization achieve

601
00:26:05,600 --> 00:26:14,080
compliance like pci dss standard or gdpr

602
00:26:10,080 --> 00:26:17,439
etc gen baba

603
00:26:14,080 --> 00:26:20,480
wants to make sure

604
00:26:17,440 --> 00:26:23,919
this doesn't disrupt the existing

605
00:26:20,480 --> 00:26:26,480
process developers or devops engineers

606
00:26:23,919 --> 00:26:29,520
don't have to be security experts

607
00:26:26,480 --> 00:26:30,480
or change the normal workflow no special

608
00:26:29,520 --> 00:26:33,200
scans

609
00:26:30,480 --> 00:26:34,240
no extra work required it's easy to

610
00:26:33,200 --> 00:26:36,960
integrate ios

611
00:26:34,240 --> 00:26:38,159
in ci cd workflows custom enterprise

612
00:26:36,960 --> 00:26:41,440
specific tools

613
00:26:38,159 --> 00:26:42,320
and developer tools it works with

614
00:26:41,440 --> 00:26:45,200
virtually

615
00:26:42,320 --> 00:26:46,320
any type of test method existing

616
00:26:45,200 --> 00:26:48,960
automation tests

617
00:26:46,320 --> 00:26:51,678
automated web crawler and a range of

618
00:26:48,960 --> 00:26:54,080
pre-production testing from manual test

619
00:26:51,679 --> 00:26:54,799
functional integrated regression and

620
00:26:54,080 --> 00:26:58,320
user

621
00:26:54,799 --> 00:26:59,760
acceptance test plus it has a flexible

622
00:26:58,320 --> 00:27:03,840
deployment model

623
00:26:59,760 --> 00:27:07,200
fully automated docker based or manual

624
00:27:03,840 --> 00:27:09,439
can be deployed on-prem or in the cloud

625
00:27:07,200 --> 00:27:10,240
different types of applications are also

626
00:27:09,440 --> 00:27:13,520
supported

627
00:27:10,240 --> 00:27:16,240
like microsoft services cloud-based or

628
00:27:13,520 --> 00:27:16,240
even standard

629
00:27:18,840 --> 00:27:24,320
architecture

630
00:27:20,640 --> 00:27:27,600
so here are the key takeaways

631
00:27:24,320 --> 00:27:28,559
iost has seamless integration it's easy

632
00:27:27,600 --> 00:27:32,080
to integrate and

633
00:27:28,559 --> 00:27:35,360
automate in the ci cd pipeline and even

634
00:27:32,080 --> 00:27:38,639
easier to deploy and configure

635
00:27:35,360 --> 00:27:41,918
plus it's optimized for security

636
00:27:38,640 --> 00:27:44,880
development and devops teams

637
00:27:41,919 --> 00:27:47,279
when it comes to privacy and compliance

638
00:27:44,880 --> 00:27:51,039
is the only abstract testing tool

639
00:27:47,279 --> 00:27:53,440
with complete sensitive data tracking

640
00:27:51,039 --> 00:27:55,440
it's it also has the benefit of

641
00:27:53,440 --> 00:27:59,520
integrated software composition

642
00:27:55,440 --> 00:28:02,799
analysis for open source dependencies

643
00:27:59,520 --> 00:28:05,918
ios ability of accurate findings

644
00:28:02,799 --> 00:28:09,360
with real time verification

645
00:28:05,919 --> 00:28:13,120
helps prioritize remediation and in turn

646
00:28:09,360 --> 00:28:13,120
helps to empower developers

647
00:28:14,000 --> 00:28:20,320
lastly is designed to scale it

648
00:28:17,600 --> 00:28:23,039
supports large-scale modern application

649
00:28:20,320 --> 00:28:23,039
deployments

650
00:28:26,240 --> 00:28:30,320
keeping all this in mind iost is the

651
00:28:29,039 --> 00:28:33,520
only

652
00:28:30,320 --> 00:28:36,960
one element of modern

653
00:28:33,520 --> 00:28:39,840
application security program we need a

654
00:28:36,960 --> 00:28:43,840
combination of modern solutions

655
00:28:39,840 --> 00:28:44,320
such as ios and traditional apps tools

656
00:28:43,840 --> 00:28:48,639
like

657
00:28:44,320 --> 00:28:51,918
sas das sca pen testing managed services

658
00:28:48,640 --> 00:28:52,799
and what have you to create secure

659
00:28:51,919 --> 00:28:56,840
software

660
00:28:52,799 --> 00:28:58,559
in today's complex development

661
00:28:56,840 --> 00:29:01,360
environments

662
00:28:58,559 --> 00:29:02,158
at the end of the day the simple answer

663
00:29:01,360 --> 00:29:05,678
is

664
00:29:02,159 --> 00:29:07,200
there is no silver bullet no single

665
00:29:05,679 --> 00:29:09,360
technology or solution

666
00:29:07,200 --> 00:29:11,520
can solve the wide variety of

667
00:29:09,360 --> 00:29:15,199
application security risks

668
00:29:11,520 --> 00:29:17,520
you need to deal with in today's world

669
00:29:15,200 --> 00:29:18,960
to succeed you need to take a

670
00:29:17,520 --> 00:29:21,200
multi-layered approach

671
00:29:18,960 --> 00:29:23,120
that combines a mix of application

672
00:29:21,200 --> 00:29:26,240
security strategy

673
00:29:23,120 --> 00:29:28,320
and programs with in-house and outsource

674
00:29:26,240 --> 00:29:31,440
testing

675
00:29:28,320 --> 00:29:33,120
if you already have that in place that's

676
00:29:31,440 --> 00:29:36,159
great

677
00:29:33,120 --> 00:29:38,719
but for those of you who don't synopsis

678
00:29:36,159 --> 00:29:42,720
offers the tools and services to help

679
00:29:38,720 --> 00:29:42,720
strengthen your security posture

680
00:29:43,039 --> 00:29:49,360
investing in automation tools

681
00:29:46,640 --> 00:29:50,080
and services from a trusted leader in

682
00:29:49,360 --> 00:29:52,719
the apsec

683
00:29:50,080 --> 00:29:53,279
environment could make the difference

684
00:29:52,720 --> 00:29:57,200
between

685
00:29:53,279 --> 00:29:57,200
success and disaster

686
00:29:59,120 --> 00:30:06,479
with that we have come to the end i hope

687
00:30:02,720 --> 00:30:07,200
i was able to add value and hope you

688
00:30:06,480 --> 00:30:10,000
found this

689
00:30:07,200 --> 00:30:10,480
session useful and i would like to thank

690
00:30:10,000 --> 00:30:13,760
you

691
00:30:10,480 --> 00:30:14,960
for listening and tuning in if you have

692
00:30:13,760 --> 00:30:19,679
any questions

693
00:30:14,960 --> 00:30:22,720
please feel free to ask them now

694
00:30:19,679 --> 00:30:26,159
hey guys yeah i think i just

695
00:30:22,720 --> 00:30:29,600
saw a couple of questions in the q a um

696
00:30:26,159 --> 00:30:32,720
i'll just answer one that uh

697
00:30:29,600 --> 00:30:35,439
that just came up um so in terms of

698
00:30:32,720 --> 00:30:38,880
maturity right it really depends

699
00:30:35,440 --> 00:30:39,760
on your objective or what type of

700
00:30:38,880 --> 00:30:42,080
software

701
00:30:39,760 --> 00:30:44,158
development and delivery framework you

702
00:30:42,080 --> 00:30:45,760
have in place

703
00:30:44,159 --> 00:30:47,279
if you're just starting out with

704
00:30:45,760 --> 00:30:49,919
application security in your

705
00:30:47,279 --> 00:30:51,600
organization even if you're starting on

706
00:30:49,919 --> 00:30:55,360
a small scale

707
00:30:51,600 --> 00:30:57,360
ios can give you a lot of value

708
00:30:55,360 --> 00:30:59,678
and can give you the best bang for your

709
00:30:57,360 --> 00:31:00,799
buck because it has these additional

710
00:30:59,679 --> 00:31:02,880
capabilities

711
00:31:00,799 --> 00:31:04,480
of detecting open source software as

712
00:31:02,880 --> 00:31:07,360
well and

713
00:31:04,480 --> 00:31:09,200
the value that you have seen right based

714
00:31:07,360 --> 00:31:13,360
on the case studies

715
00:31:09,200 --> 00:31:16,080
apart from that i see another question

716
00:31:13,360 --> 00:31:18,240
come in which is

717
00:31:16,080 --> 00:31:19,120
employer rasp solution that we have i

718
00:31:18,240 --> 00:31:21,200
asked

719
00:31:19,120 --> 00:31:22,158
um if you want to follow a more

720
00:31:21,200 --> 00:31:23,840
proactive

721
00:31:22,159 --> 00:31:25,279
defensive approach where you want to

722
00:31:23,840 --> 00:31:28,799
block those attacks

723
00:31:25,279 --> 00:31:31,360
then possibly you might want to um but

724
00:31:28,799 --> 00:31:33,519
really depends on what approach you want

725
00:31:31,360 --> 00:31:36,719
to go for whether you just want

726
00:31:33,519 --> 00:31:38,720
to detect the attacks or really

727
00:31:36,720 --> 00:31:40,399
go full force and block them now that's

728
00:31:38,720 --> 00:31:42,559
prone to false positive as well

729
00:31:40,399 --> 00:31:44,879
and rasp also has certain performance

730
00:31:42,559 --> 00:31:48,000
issues so you might want to take that

731
00:31:44,880 --> 00:31:51,120
into account and factor that in

732
00:31:48,000 --> 00:31:55,360
as well um

733
00:31:51,120 --> 00:31:55,760
yeah so do i have any stats around the

734
00:31:55,360 --> 00:31:58,559
time

735
00:31:55,760 --> 00:32:00,000
added during the development um that is

736
00:31:58,559 --> 00:32:02,960
something that which we can

737
00:32:00,000 --> 00:32:03,440
provide to you we uh might uh have that

738
00:32:02,960 --> 00:32:05,200
for you

739
00:32:03,440 --> 00:32:06,880
i don't have it on top of my head right

740
00:32:05,200 --> 00:32:08,480
now um

741
00:32:06,880 --> 00:32:10,880
but definitely you can visit our booth

742
00:32:08,480 --> 00:32:14,320
as well um at the synopsis booth that's

743
00:32:10,880 --> 00:32:15,840
sponsored level one and we i can take

744
00:32:14,320 --> 00:32:19,840
that question up there

745
00:32:15,840 --> 00:32:22,080
um also for the slides uh yes

746
00:32:19,840 --> 00:32:23,279
feel free to again visit our booth or

747
00:32:22,080 --> 00:32:25,840
even simon

748
00:32:23,279 --> 00:32:28,000
has just dropped in his email and you

749
00:32:25,840 --> 00:32:32,158
can even email him and he should be

750
00:32:28,000 --> 00:32:34,320
able to provide that to you um

751
00:32:32,159 --> 00:32:36,320
guess those are the questions that have

752
00:32:34,320 --> 00:32:38,399
just come in but

753
00:32:36,320 --> 00:32:39,678
thanks for joining i hope you enjoyed

754
00:32:38,399 --> 00:32:41,279
the session and

755
00:32:39,679 --> 00:32:44,399
if you think of anything else and you're

756
00:32:41,279 --> 00:32:47,840
curious please feel free

757
00:32:44,399 --> 00:32:49,840
to come to the booth or even chat on

758
00:32:47,840 --> 00:32:57,519
this option here

759
00:32:49,840 --> 00:32:59,600
thanks for your time guys

760
00:32:57,519 --> 00:33:01,440
thank you very much for that ronald uh

761
00:32:59,600 --> 00:33:03,519
next up we've got barry mcmahon from

762
00:33:01,440 --> 00:33:05,760
lobbying talking about the value

763
00:33:03,519 --> 00:33:07,279
of identity in the digital environment

764
00:33:05,760 --> 00:33:11,840
uh so that should start in a couple of

765
00:33:07,279 --> 00:33:11,840
minutes time we'll see you all then

