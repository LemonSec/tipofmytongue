1
00:00:00,000 --> 00:00:03,389
<font color="#CCCCCC">hi my name is Ashley Dougal I am the IT</font>

2
00:00:02,250 --> 00:00:06,330
security manager from Griffith

3
00:00:03,389 --> 00:00:07,439
University<font color="#CCCCCC"> if you need anything or have</font>

4
00:00:06,330 --> 00:00:09,840
<font color="#CCCCCC">any questions</font><font color="#E5E5E5"> about what's going on</font>

5
00:00:07,440 --> 00:00:11,309
<font color="#CCCCCC">today come and ask me please</font>

6
00:00:09,840 --> 00:00:13,139
I'll also be<font color="#CCCCCC"> a part of</font><font color="#E5E5E5"> the speed debate</font>

7
00:00:11,309 --> 00:00:15,030
panel this afternoon<font color="#CCCCCC"> and I am sure to</font>

8
00:00:13,139 --> 00:00:15,690
make a fool of myself so don't<font color="#E5E5E5"> hold that</font>

9
00:00:15,030 --> 00:00:20,100
against me

10
00:00:15,690 --> 00:00:22,730
our next<font color="#CCCCCC"> presenter is</font><font color="#E5E5E5"> Michael generic</font>

11
00:00:20,100 --> 00:00:24,210
Asst<font color="#CCCCCC"> I told him I'd</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> a mess of that</font>

12
00:00:22,730 --> 00:00:25,949
<font color="#CCCCCC">but thank you</font>

13
00:00:24,210 --> 00:00:28,470
Michael is<font color="#E5E5E5"> the director of Trustwave</font>

14
00:00:25,949 --> 00:00:30,900
<font color="#E5E5E5">spider labs in</font><font color="#CCCCCC"> age-specific</font><font color="#E5E5E5"> he's going</font>

15
00:00:28,470 --> 00:00:32,579
to talk today on developing secure iOS

16
00:00:30,900 --> 00:00:40,140
<font color="#CCCCCC">applications so</font><font color="#E5E5E5"> please make Michael</font>

17
00:00:32,579 --> 00:00:42,480
welcome<font color="#CCCCCC"> okay all right so I've</font><font color="#E5E5E5"> got a lot</font>

18
00:00:40,140 --> 00:00:44,640
<font color="#CCCCCC">of slides</font><font color="#E5E5E5"> I literally finished them this</font>

19
00:00:42,480 --> 00:00:46,828
morning<font color="#E5E5E5"> so hopefully we get through it</font>

20
00:00:44,640 --> 00:00:48,539
we'll see how the pacing goes but just

21
00:00:46,829 --> 00:00:51,090
quickly<font color="#E5E5E5"> a bit about me as I</font><font color="#CCCCCC"> said I'm the</font>

22
00:00:48,539 --> 00:00:52,140
director of Trustwave<font color="#E5E5E5"> spider labs for</font>

23
00:00:51,090 --> 00:00:54,960
<font color="#E5E5E5">the Asia Pacific region</font>

24
00:00:52,140 --> 00:00:56,520
<font color="#CCCCCC">I also one of the organizers of SEK</font>

25
00:00:54,960 --> 00:00:58,350
talks<font color="#E5E5E5"> in Brisbane if you are local</font>

26
00:00:56,520 --> 00:01:00,809
<font color="#E5E5E5">definitely check it out it's a cool</font>

27
00:00:58,350 --> 00:01:02,670
<font color="#CCCCCC">Meetup</font><font color="#E5E5E5"> we do you know talk CTF things</font>

28
00:01:00,809 --> 00:01:05,939
like that<font color="#E5E5E5"> and for those playing along</font>

29
00:01:02,670 --> 00:01:07,439
<font color="#E5E5E5">flat</font><font color="#CCCCCC"> bugs all right</font><font color="#E5E5E5"> so this presentation</font>

30
00:01:05,939 --> 00:01:10,350
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> name's to give you a good overview</font>

31
00:01:07,439 --> 00:01:11,789
<font color="#E5E5E5">of how to design iOS applications or</font>

32
00:01:10,350 --> 00:01:13,890
secure iOS applications

33
00:01:11,790 --> 00:01:16,080
it focuses on<font color="#E5E5E5"> key security issues that</font>

34
00:01:13,890 --> 00:01:18,600
<font color="#CCCCCC">you know we commonly find</font><font color="#E5E5E5"> in iOS</font>

35
00:01:16,080 --> 00:01:20,490
<font color="#E5E5E5">applications it's not a guide to hacking</font>

36
00:01:18,600 --> 00:01:22,080
iOS applications I've done you<font color="#E5E5E5"> know</font>

37
00:01:20,490 --> 00:01:23,729
quite a few presentations on that topic

38
00:01:22,080 --> 00:01:25,140
if you want you<font color="#E5E5E5"> can you can check it out</font>

39
00:01:23,729 --> 00:01:26,700
online there's a lot of material<font color="#E5E5E5"> but</font>

40
00:01:25,140 --> 00:01:29,159
<font color="#CCCCCC">really wanted to focus</font><font color="#E5E5E5"> a little bit</font><font color="#CCCCCC"> more</font>

41
00:01:26,700 --> 00:01:31,890
on the secure dev<font color="#CCCCCC"> side for this this</font>

42
00:01:29,159 --> 00:01:33,530
<font color="#E5E5E5">topic so we just quickly go over an</font>

43
00:01:31,890 --> 00:01:36,930
overview<font color="#CCCCCC"> of the iOS attack surface</font>

44
00:01:33,530 --> 00:01:39,360
<font color="#CCCCCC">common iOS security issues some secure</font>

45
00:01:36,930 --> 00:01:41,970
design principles for<font color="#E5E5E5"> iOS applications</font>

46
00:01:39,360 --> 00:01:46,590
and secure development approaches for

47
00:01:41,970 --> 00:01:48,600
you know key iOS security issues so the

48
00:01:46,590 --> 00:01:52,409
TAC surface<font color="#E5E5E5"> so this is like a really</font>

49
00:01:48,600 --> 00:01:53,548
<font color="#E5E5E5">really basic threat model of of an iOS</font>

50
00:01:52,409 --> 00:01:55,680
application<font color="#CCCCCC"> right you've got your</font>

51
00:01:53,549 --> 00:01:57,799
application<font color="#E5E5E5"> and it communicates</font>

52
00:01:55,680 --> 00:02:00,649
<font color="#CCCCCC">typically</font><font color="#E5E5E5"> most applications communicate</font>

53
00:01:57,799 --> 00:02:02,880
<font color="#E5E5E5">with a back-end over a network</font>

54
00:02:00,649 --> 00:02:04,950
<font color="#CCCCCC">potentially even third-party</font><font color="#E5E5E5"> services</font>

55
00:02:02,880 --> 00:02:07,110
Twitter Facebook<font color="#E5E5E5"> you know things like</font>

56
00:02:04,950 --> 00:02:10,679
<font color="#CCCCCC">that but obviously it</font><font color="#E5E5E5"> runs on an iOS</font>

57
00:02:07,110 --> 00:02:13,180
<font color="#CCCCCC">device and it can also communicate with</font>

58
00:02:10,679 --> 00:02:16,180
<font color="#E5E5E5">other</font><font color="#CCCCCC"> applications on the device</font>

59
00:02:13,180 --> 00:02:19,269
<font color="#CCCCCC">to ipce</font><font color="#E5E5E5"> extensions you know from iOS a</font>

60
00:02:16,180 --> 00:02:21,599
and things like<font color="#E5E5E5"> that so</font><font color="#CCCCCC"> where</font><font color="#E5E5E5"> are the</font>

61
00:02:19,269 --> 00:02:24,099
where the issues in this right so

62
00:02:21,599 --> 00:02:25,929
<font color="#CCCCCC">obviously the network can be compromised</font>

63
00:02:24,099 --> 00:02:28,209
<font color="#CCCCCC">rights</font><font color="#E5E5E5"> amendment middle attacks and then</font>

64
00:02:25,930 --> 00:02:30,040
pretty<font color="#E5E5E5"> straightforward</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> back end</font>

65
00:02:28,209 --> 00:02:32,200
potentially could<font color="#CCCCCC"> be compromised</font>

66
00:02:30,040 --> 00:02:34,090
so you know serve a<font color="#E5E5E5"> compromised web</font>

67
00:02:32,200 --> 00:02:36,209
attacks against<font color="#E5E5E5"> a</font><font color="#CCCCCC"> nice</font><font color="#E5E5E5"> or web services</font>

68
00:02:34,090 --> 00:02:38,709
<font color="#CCCCCC">that are supporting the application</font>

69
00:02:36,209 --> 00:02:42,159
<font color="#E5E5E5">third-party services also potentially</font>

70
00:02:38,709 --> 00:02:45,790
able<font color="#CCCCCC"> to be compromised the iOS device</font>

71
00:02:42,159 --> 00:02:47,620
can be<font color="#CCCCCC"> jailbroken or compromised</font><font color="#E5E5E5"> as well</font>

72
00:02:45,790 --> 00:02:50,620
as other apps can be malicious obviously

73
00:02:47,620 --> 00:02:53,560
it's less of a less<font color="#CCCCCC"> of an</font><font color="#E5E5E5"> issue in iOS</font>

74
00:02:50,620 --> 00:02:55,239
<font color="#CCCCCC">they've got pretty stringent entry</font>

75
00:02:53,560 --> 00:02:58,599
<font color="#CCCCCC">criteria into</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> App Store but</font><font color="#E5E5E5"> you know</font>

76
00:02:55,239 --> 00:03:01,359
<font color="#E5E5E5">that's also a potential vector</font><font color="#CCCCCC"> and then</font>

77
00:02:58,599 --> 00:03:04,358
your app I suppose<font color="#E5E5E5"> as well obviously</font>

78
00:03:01,359 --> 00:03:06,099
<font color="#CCCCCC">less less prevalent</font><font color="#E5E5E5"> on iOS and the App</font>

79
00:03:04,359 --> 00:03:09,189
<font color="#E5E5E5">Store but certainly a big issue on on</font>

80
00:03:06,099 --> 00:03:10,599
<font color="#E5E5E5">Android so understanding the risk</font>

81
00:03:09,189 --> 00:03:12,340
profile<font color="#CCCCCC"> of</font><font color="#E5E5E5"> your app so</font><font color="#CCCCCC"> this is an</font>

82
00:03:10,599 --> 00:03:14,918
important step that's often overlooked

83
00:03:12,340 --> 00:03:17,470
<font color="#E5E5E5">but it really should drive the security</font>

84
00:03:14,919 --> 00:03:19,329
design of<font color="#CCCCCC"> your application so when</font>

85
00:03:17,470 --> 00:03:20,590
you're thinking<font color="#CCCCCC"> about the risk</font><font color="#E5E5E5"> profile</font>

86
00:03:19,329 --> 00:03:23,109
<font color="#E5E5E5">you're doing sort of your basics of</font>

87
00:03:20,590 --> 00:03:24,370
threat modeling so to speak<font color="#CCCCCC"> some of the</font>

88
00:03:23,109 --> 00:03:26,349
key<font color="#CCCCCC"> considerations that you should go</font>

89
00:03:24,370 --> 00:03:28,810
over<font color="#E5E5E5"> what information is</font><font color="#CCCCCC"> in the app and</font>

90
00:03:26,349 --> 00:03:31,000
<font color="#CCCCCC">how</font><font color="#E5E5E5"> sensitive or valuable is it to your</font>

91
00:03:28,810 --> 00:03:32,319
organization who are<font color="#E5E5E5"> the likely threat</font>

92
00:03:31,000 --> 00:03:35,949
actors and you<font color="#CCCCCC"> know what are they</font>

93
00:03:32,319 --> 00:03:37,208
capable of<font color="#E5E5E5"> what are the likely tax</font>

94
00:03:35,949 --> 00:03:39,519
scenarios<font color="#E5E5E5"> that each threat actor is</font>

95
00:03:37,209 --> 00:03:41,829
<font color="#E5E5E5">going to you know attempt against your</font>

96
00:03:39,519 --> 00:03:44,409
application what's your tolerance<font color="#CCCCCC"> for</font>

97
00:03:41,829 --> 00:03:46,180
risk<font color="#CCCCCC"> both</font><font color="#E5E5E5"> in the context of the</font>

98
00:03:44,409 --> 00:03:48,698
application<font color="#E5E5E5"> and organizationally that</font>

99
00:03:46,180 --> 00:03:50,709
that's<font color="#E5E5E5"> also a factor</font><font color="#CCCCCC"> and you know do you</font>

100
00:03:48,699 --> 00:03:54,849
<font color="#CCCCCC">have any</font><font color="#E5E5E5"> regulatory requirements PCI</font>

101
00:03:50,709 --> 00:03:58,650
HIPAA<font color="#CCCCCC"> I mean whatever</font><font color="#E5E5E5"> you know cool so</font>

102
00:03:54,849 --> 00:04:02,108
common iOS application security<font color="#E5E5E5"> issues</font>

103
00:03:58,650 --> 00:04:04,000
<font color="#CCCCCC">so these common issues are just based on</font>

104
00:04:02,109 --> 00:04:05,829
my<font color="#E5E5E5"> experience</font><font color="#CCCCCC"> I've done a lot of pen</font>

105
00:04:04,000 --> 00:04:07,560
testing<font color="#E5E5E5"> I run a team that does a lot</font><font color="#CCCCCC"> of</font>

106
00:04:05,829 --> 00:04:09,759
pen testing<font color="#E5E5E5"> and mobile applications and</font>

107
00:04:07,560 --> 00:04:11,889
you know working with range of<font color="#E5E5E5"> companies</font>

108
00:04:09,759 --> 00:04:13,839
<font color="#E5E5E5">across all kinds of apps like mobile</font>

109
00:04:11,889 --> 00:04:15,909
banking apps and trading apps you know

110
00:04:13,840 --> 00:04:18,220
the high<font color="#CCCCCC"> security like</font><font color="#E5E5E5"> board paper apps</font>

111
00:04:15,909 --> 00:04:22,000
<font color="#CCCCCC">all down to like internal business</font><font color="#E5E5E5"> apps</font>

112
00:04:18,220 --> 00:04:24,190
retail apps<font color="#E5E5E5"> games even and so so this is</font>

113
00:04:22,000 --> 00:04:26,470
<font color="#E5E5E5">based on the common issues</font><font color="#CCCCCC"> that I find</font>

114
00:04:24,190 --> 00:04:29,980
<font color="#CCCCCC">on those on</font>

115
00:04:26,470 --> 00:04:33,730
on these sort of apps binary and<font color="#CCCCCC"> runtime</font>

116
00:04:29,980 --> 00:04:35,290
security issues are big<font color="#CCCCCC"> transport</font><font color="#E5E5E5"> layer</font>

117
00:04:33,730 --> 00:04:38,680
security issues so<font color="#E5E5E5"> you know pretty</font>

118
00:04:35,290 --> 00:04:40,240
pretty<font color="#CCCCCC"> well</font><font color="#E5E5E5"> known issues and data</font>

119
00:04:38,680 --> 00:04:42,310
security<font color="#CCCCCC"> issues obviously particularly</font>

120
00:04:40,240 --> 00:04:44,380
<font color="#E5E5E5">with mobile devices right and you know</font>

121
00:04:42,310 --> 00:04:46,810
anybody<font color="#E5E5E5"> can</font><font color="#CCCCCC"> can pick it up and walk away</font>

122
00:04:44,380 --> 00:04:48,850
<font color="#E5E5E5">with it easily</font><font color="#CCCCCC"> so those are the three</font>

123
00:04:46,810 --> 00:04:50,860
perhaps<font color="#E5E5E5"> most common issues</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> these are</font>

124
00:04:48,850 --> 00:04:52,900
the three issues<font color="#CCCCCC"> that we'll be targeting</font>

125
00:04:50,860 --> 00:04:55,630
<font color="#E5E5E5">because</font><font color="#CCCCCC"> if you get these right</font><font color="#E5E5E5"> you're</font>

126
00:04:52,900 --> 00:04:57,039
ahead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> pack</font><font color="#CCCCCC"> already right so you</font>

127
00:04:55,630 --> 00:04:59,350
know there's<font color="#CCCCCC"> obviously a lot more to</font>

128
00:04:57,040 --> 00:05:01,660
consider<font color="#E5E5E5"> when it comes to you know the</font>

129
00:04:59,350 --> 00:05:03,460
security<font color="#CCCCCC"> of</font><font color="#E5E5E5"> of your applications like</font>

130
00:05:01,660 --> 00:05:05,170
back-end security and the web services

131
00:05:03,460 --> 00:05:06,580
that<font color="#E5E5E5"> support it and things like</font><font color="#CCCCCC"> that but</font>

132
00:05:05,170 --> 00:05:09,010
I<font color="#E5E5E5"> mean if</font><font color="#CCCCCC"> you if we're looking</font><font color="#E5E5E5"> at the</font>

133
00:05:06,580 --> 00:05:10,719
<font color="#E5E5E5">client specifically</font><font color="#CCCCCC"> you know get those</font>

134
00:05:09,010 --> 00:05:14,590
three right and you're well<font color="#CCCCCC"> and truly</font>

135
00:05:10,720 --> 00:05:17,700
ahead<font color="#E5E5E5"> of the pack so before I get into</font>

136
00:05:14,590 --> 00:05:19,450
<font color="#E5E5E5">the detail around some you know secure</font>

137
00:05:17,700 --> 00:05:21,010
fixing some of<font color="#CCCCCC"> those issues</font><font color="#E5E5E5"> and</font>

138
00:05:19,450 --> 00:05:22,990
exploring<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the common issues</font>

139
00:05:21,010 --> 00:05:25,570
there<font color="#E5E5E5"> I wanted to touch on some secure</font>

140
00:05:22,990 --> 00:05:27,250
iOS design principles<font color="#CCCCCC"> so you should just</font>

141
00:05:25,570 --> 00:05:29,200
<font color="#E5E5E5">be you know keeping these in mind and if</font>

142
00:05:27,250 --> 00:05:31,090
you if you understand<font color="#E5E5E5"> these and and take</font>

143
00:05:29,200 --> 00:05:32,560
these<font color="#E5E5E5"> into your design when you're</font>

144
00:05:31,090 --> 00:05:34,450
<font color="#CCCCCC">designing an application and you're</font>

145
00:05:32,560 --> 00:05:36,040
developing an application<font color="#E5E5E5"> even if it's</font>

146
00:05:34,450 --> 00:05:37,659
<font color="#E5E5E5">not something of I've kind of covered</font>

147
00:05:36,040 --> 00:05:39,700
here<font color="#E5E5E5"> if you've got these in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> back</font><font color="#CCCCCC"> of</font>

148
00:05:37,660 --> 00:05:42,100
your<font color="#E5E5E5"> mind you know you'll be thinking in</font>

149
00:05:39,700 --> 00:05:45,430
the<font color="#CCCCCC"> right way from a secure development</font>

150
00:05:42,100 --> 00:05:47,800
perspective<font color="#CCCCCC"> so don't trust the client</font><font color="#E5E5E5"> or</font>

151
00:05:45,430 --> 00:05:50,140
<font color="#CCCCCC">the runtime</font><font color="#E5E5E5"> environment</font><font color="#CCCCCC"> right so in</font><font color="#E5E5E5"> on</font>

152
00:05:47,800 --> 00:05:52,240
mobile applications<font color="#CCCCCC"> it's very easy</font><font color="#E5E5E5"> to be</font>

153
00:05:50,140 --> 00:05:54,340
for the attacker<font color="#CCCCCC"> to control the</font>

154
00:05:52,240 --> 00:05:57,040
execution<font color="#E5E5E5"> environment so you want to</font>

155
00:05:54,340 --> 00:05:58,960
make sure<font color="#E5E5E5"> that you your</font><font color="#CCCCCC"> captor</font><font color="#E5E5E5"> that and</font>

156
00:05:57,040 --> 00:06:02,440
<font color="#E5E5E5">and definitely don't trust the client</font><font color="#CCCCCC"> I</font>

157
00:05:58,960 --> 00:06:04,030
mean that's<font color="#CCCCCC"> age-old advice right users</font>

158
00:06:02,440 --> 00:06:05,110
will connect<font color="#CCCCCC"> to untrusted networks and</font>

159
00:06:04,030 --> 00:06:06,520
we've seen that they'll connect

160
00:06:05,110 --> 00:06:08,680
untrusted networks and they will click

161
00:06:06,520 --> 00:06:11,440
<font color="#E5E5E5">on stuff right so</font><font color="#CCCCCC"> no they'll click on</font>

162
00:06:08,680 --> 00:06:13,600
any warnings and and<font color="#CCCCCC"> whatnot so keep</font>

163
00:06:11,440 --> 00:06:15,430
that<font color="#E5E5E5"> in</font><font color="#CCCCCC"> mind and don't store anything</font>

164
00:06:13,600 --> 00:06:17,380
sensitive<font color="#E5E5E5"> on</font><font color="#CCCCCC"> the device if you can't</font>

165
00:06:15,430 --> 00:06:19,479
obviously you know there might<font color="#CCCCCC"> be a</font>

166
00:06:17,380 --> 00:06:21,070
<font color="#E5E5E5">business case or a use case</font><font color="#CCCCCC"> to do it</font>

167
00:06:19,479 --> 00:06:23,109
<font color="#CCCCCC">more discuss you know some</font><font color="#E5E5E5"> of the things</font>

168
00:06:21,070 --> 00:06:25,300
<font color="#E5E5E5">that you can take into account when</font>

169
00:06:23,110 --> 00:06:26,919
you're doing that but as a rule try and

170
00:06:25,300 --> 00:06:28,720
limit<font color="#CCCCCC"> you know what</font><font color="#E5E5E5"> you're storing on</font>

171
00:06:26,919 --> 00:06:32,320
the device you know if it's if<font color="#CCCCCC"> it's</font>

172
00:06:28,720 --> 00:06:36,280
sensitive<font color="#CCCCCC"> so going into binary</font><font color="#E5E5E5"> and</font>

173
00:06:32,320 --> 00:06:38,050
<font color="#E5E5E5">runtime security so as a reflective</font>

174
00:06:36,280 --> 00:06:39,289
language objective-c can observe and

175
00:06:38,050 --> 00:06:41,119
modify its own behavior

176
00:06:39,289 --> 00:06:42,949
time which can be<font color="#E5E5E5"> great from</font><font color="#CCCCCC"> the</font>

177
00:06:41,119 --> 00:06:44,509
development<font color="#E5E5E5"> perspective you can do you</font>

178
00:06:42,949 --> 00:06:46,879
know swing and some<font color="#E5E5E5"> interesting stuff</font>

179
00:06:44,509 --> 00:06:49,819
there<font color="#CCCCCC"> but you know from a security</font>

180
00:06:46,879 --> 00:06:52,129
perspective<font color="#E5E5E5"> it presents some</font><font color="#CCCCCC"> problems so</font>

181
00:06:49,819 --> 00:06:54,889
you<font color="#CCCCCC"> know gives you</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ability to</font><font color="#E5E5E5"> create</font>

182
00:06:52,129 --> 00:06:56,960
and call<font color="#CCCCCC"> ad-hoc classes and methods and</font>

183
00:06:54,889 --> 00:06:58,580
manipulate<font color="#CCCCCC"> and abuse the runtime of</font><font color="#E5E5E5"> the</font>

184
00:06:56,960 --> 00:07:01,399
application so<font color="#E5E5E5"> it's really great</font><font color="#CCCCCC"> for</font>

185
00:06:58,580 --> 00:07:03,800
<font color="#E5E5E5">bypassing security locks breaking logic</font>

186
00:07:01,399 --> 00:07:06,229
checks<font color="#CCCCCC"> escalating privilege</font><font color="#E5E5E5"> within an</font>

187
00:07:03,800 --> 00:07:09,499
<font color="#CCCCCC">application and stealing information</font>

188
00:07:06,229 --> 00:07:11,149
<font color="#E5E5E5">from memory</font><font color="#CCCCCC"> implementing</font><font color="#E5E5E5"> runtime</font>

189
00:07:09,499 --> 00:07:12,589
security checks<font color="#E5E5E5"> can significantly</font>

190
00:07:11,149 --> 00:07:15,199
<font color="#E5E5E5">increase the security of your</font>

191
00:07:12,589 --> 00:07:19,339
application make it harder to exploit

192
00:07:15,199 --> 00:07:20,659
any issues<font color="#CCCCCC"> so you should and going back</font>

193
00:07:19,339 --> 00:07:22,279
to<font color="#CCCCCC"> the design principles you should</font>

194
00:07:20,659 --> 00:07:23,869
always assume<font color="#CCCCCC"> that your application will</font>

195
00:07:22,279 --> 00:07:26,719
run on a compromised device if<font color="#CCCCCC"> you come</font>

196
00:07:23,869 --> 00:07:29,389
from<font color="#CCCCCC"> that design standpoint you know</font>

197
00:07:26,719 --> 00:07:32,689
you'll be you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> you'll design</font><font color="#E5E5E5"> your</font>

198
00:07:29,389 --> 00:07:35,180
application accordingly<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> also I want</font>

199
00:07:32,689 --> 00:07:37,459
<font color="#E5E5E5">to put a little bit in about Swift</font>

200
00:07:35,180 --> 00:07:40,789
obviously<font color="#E5E5E5"> Swift is Apple's new language</font>

201
00:07:37,459 --> 00:07:43,490
<font color="#E5E5E5">eventually we'll replace objective-c</font><font color="#CCCCCC"> we</font>

202
00:07:40,789 --> 00:07:45,050
<font color="#E5E5E5">won't be for some</font><font color="#CCCCCC"> time yet and I've done</font>

203
00:07:43,490 --> 00:07:46,939
quite<font color="#CCCCCC"> a few talks on like attacking</font>

204
00:07:45,050 --> 00:07:48,529
Swift applications reverse engineering

205
00:07:46,939 --> 00:07:50,180
<font color="#E5E5E5">service applications if you're into</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> I</font>

206
00:07:48,529 --> 00:07:53,779
<font color="#E5E5E5">won't go into that level of depth</font><font color="#CCCCCC"> here</font>

207
00:07:50,180 --> 00:07:55,490
<font color="#CCCCCC">but just</font><font color="#E5E5E5"> as a few key takeaways it's</font>

208
00:07:53,779 --> 00:07:57,349
less dynamic<font color="#CCCCCC"> than</font><font color="#E5E5E5"> objective-c so when I</font>

209
00:07:55,490 --> 00:07:59,149
spoke<font color="#E5E5E5"> about like the dynamic you</font><font color="#CCCCCC"> know</font>

210
00:07:57,349 --> 00:08:00,680
reflective nature<font color="#E5E5E5"> of objective-c and the</font>

211
00:07:59,149 --> 00:08:02,779
stuff it allows you<font color="#E5E5E5"> to do</font><font color="#CCCCCC"> it's a bit</font>

212
00:08:00,680 --> 00:08:04,569
harder to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> in Swift and it's less</font>

213
00:08:02,779 --> 00:08:06,709
flexible and<font color="#E5E5E5"> objective-c in some areas</font>

214
00:08:04,569 --> 00:08:09,649
<font color="#CCCCCC">but even though it's harder to perform</font>

215
00:08:06,709 --> 00:08:11,719
<font color="#E5E5E5">the dynamic techniques that I just</font>

216
00:08:09,649 --> 00:08:14,360
mentioned<font color="#E5E5E5"> it's still possible</font><font color="#CCCCCC"> um</font>

217
00:08:11,719 --> 00:08:16,248
particularly<font color="#E5E5E5"> a</font><font color="#CCCCCC"> mix runtimes app so so</font>

218
00:08:14,360 --> 00:08:17,749
you know where you've got objective-c

219
00:08:16,249 --> 00:08:19,490
code mixed in with Swift Co which is

220
00:08:17,749 --> 00:08:22,039
<font color="#E5E5E5">pretty common</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so people that are</font>

221
00:08:19,490 --> 00:08:24,139
maintaining applications<font color="#E5E5E5"> that already</font>

222
00:08:22,039 --> 00:08:25,669
<font color="#CCCCCC">exist</font><font color="#E5E5E5"> in Objective C applications and</font>

223
00:08:24,139 --> 00:08:28,039
what they'll start to do<font color="#E5E5E5"> United</font><font color="#CCCCCC"> Stated</font>

224
00:08:25,669 --> 00:08:31,099
transition to Swift is<font color="#E5E5E5"> throw in you know</font>

225
00:08:28,039 --> 00:08:32,809
<font color="#CCCCCC">discreet</font><font color="#E5E5E5"> pockets of Swift and and you</font>

226
00:08:31,099 --> 00:08:35,389
know creative<font color="#CCCCCC"> abridge runtime that</font><font color="#E5E5E5"> has</font>

227
00:08:32,809 --> 00:08:36,828
both and that allows you know a lot<font color="#E5E5E5"> of</font>

228
00:08:35,389 --> 00:08:40,279
more a lot<font color="#E5E5E5"> more of those dynamic</font>

229
00:08:36,828 --> 00:08:43,098
features to come into<font color="#E5E5E5"> it as well</font><font color="#CCCCCC"> the</font>

230
00:08:40,279 --> 00:08:44,720
Swift team<font color="#E5E5E5"> is planning on introducing</font>

231
00:08:43,099 --> 00:08:47,060
some<font color="#CCCCCC"> of the dynamic features of</font>

232
00:08:44,720 --> 00:08:48,500
<font color="#E5E5E5">objective-c just just so you know</font>

233
00:08:47,060 --> 00:08:50,779
developers can use<font color="#E5E5E5"> some of the patterns</font>

234
00:08:48,500 --> 00:08:53,150
<font color="#CCCCCC">that</font><font color="#E5E5E5"> they used to</font><font color="#CCCCCC"> I think they'll</font>

235
00:08:50,779 --> 00:08:55,550
probably<font color="#E5E5E5"> do it in a safe away but</font>

236
00:08:53,150 --> 00:08:58,100
you know still it has the element<font color="#CCCCCC"> of</font>

237
00:08:55,550 --> 00:09:01,280
this of these issues that<font color="#CCCCCC"> we're going to</font>

238
00:08:58,100 --> 00:09:03,170
discuss<font color="#E5E5E5"> so just a quick aside before I</font>

239
00:09:01,280 --> 00:09:06,800
go into<font color="#E5E5E5"> the detail</font><font color="#CCCCCC"> I want to talk about</font>

240
00:09:03,170 --> 00:09:08,510
compromised<font color="#E5E5E5"> devices right so generally</font>

241
00:09:06,800 --> 00:09:11,240
<font color="#CCCCCC">speaking</font><font color="#E5E5E5"> iOS is one of the most secure</font>

242
00:09:08,510 --> 00:09:13,340
<font color="#CCCCCC">operating systems available one of the</font>

243
00:09:11,240 --> 00:09:15,500
defining security features<font color="#E5E5E5"> of</font><font color="#CCCCCC"> iOS is the</font>

244
00:09:13,340 --> 00:09:17,120
chain<font color="#E5E5E5"> of trust every bit</font><font color="#CCCCCC"> of code from</font>

245
00:09:15,500 --> 00:09:19,070
<font color="#E5E5E5">the bootloader right up to third-party</font>

246
00:09:17,120 --> 00:09:21,080
<font color="#E5E5E5">applications is all signed and approved</font>

247
00:09:19,070 --> 00:09:22,670
by Apple<font color="#CCCCCC"> but as</font><font color="#E5E5E5"> soon as you break that</font>

248
00:09:21,080 --> 00:09:24,050
<font color="#CCCCCC">trust all bets are off</font><font color="#E5E5E5"> and you can</font>

249
00:09:22,670 --> 00:09:27,170
defeat<font color="#CCCCCC"> all the security controls</font><font color="#E5E5E5"> that</font>

250
00:09:24,050 --> 00:09:29,540
<font color="#CCCCCC">are</font><font color="#E5E5E5"> baked in</font><font color="#CCCCCC"> so some of the security</font>

251
00:09:27,170 --> 00:09:31,130
<font color="#CCCCCC">issues discussed will require a</font>

252
00:09:29,540 --> 00:09:33,680
<font color="#CCCCCC">compromised device in</font><font color="#E5E5E5"> terms of</font>

253
00:09:31,130 --> 00:09:34,939
exploitation<font color="#CCCCCC"> but as I said you should</font>

254
00:09:33,680 --> 00:09:36,050
<font color="#E5E5E5">always assume</font><font color="#CCCCCC"> that that's</font><font color="#E5E5E5"> the case if</font>

255
00:09:34,940 --> 00:09:39,020
<font color="#E5E5E5">you're trying to</font><font color="#CCCCCC"> develop a secure</font>

256
00:09:36,050 --> 00:09:40,819
application<font color="#CCCCCC"> but this usually</font><font color="#E5E5E5"> causes</font><font color="#CCCCCC"> a</font>

257
00:09:39,020 --> 00:09:42,890
lot of misunderstanding<font color="#E5E5E5"> and confusion</font>

258
00:09:40,820 --> 00:09:44,630
when it comes to<font color="#E5E5E5"> discussing the impact</font>

259
00:09:42,890 --> 00:09:46,189
of some of these<font color="#CCCCCC"> issues I'm you know so</font>

260
00:09:44,630 --> 00:09:48,500
like when<font color="#CCCCCC"> we have client conversations</font>

261
00:09:46,190 --> 00:09:51,080
and whatnot and<font color="#CCCCCC"> you know understanding</font>

262
00:09:48,500 --> 00:09:53,480
what what we should fix and how how far

263
00:09:51,080 --> 00:09:55,610
we should<font color="#E5E5E5"> go down this path</font><font color="#CCCCCC"> so it's one</font>

264
00:09:53,480 --> 00:09:57,440
of the bust a few myths right<font color="#E5E5E5"> so myth</font>

265
00:09:55,610 --> 00:09:59,780
one public<font color="#E5E5E5"> jail breaks are the only jail</font>

266
00:09:57,440 --> 00:10:01,760
breaks I hear this a lot<font color="#E5E5E5"> writer here but</font>

267
00:09:59,780 --> 00:10:04,670
there's no jailbreak<font color="#E5E5E5"> for version X</font><font color="#CCCCCC"> dot X</font>

268
00:10:01,760 --> 00:10:06,700
<font color="#E5E5E5">whatever yet so we're safe right but</font><font color="#CCCCCC"> a</font>

269
00:10:04,670 --> 00:10:09,079
<font color="#E5E5E5">few facts in public jail breaks have</font>

270
00:10:06,700 --> 00:10:11,330
been released for every you<font color="#E5E5E5"> know at</font>

271
00:10:09,080 --> 00:10:13,460
<font color="#E5E5E5">least every point release of major point</font>

272
00:10:11,330 --> 00:10:14,930
release of iOS so far and there's a few

273
00:10:13,460 --> 00:10:16,550
ones where they've skipped<font color="#E5E5E5"> over but it's</font>

274
00:10:14,930 --> 00:10:19,640
<font color="#E5E5E5">generally speaking there's there's a</font>

275
00:10:16,550 --> 00:10:21,290
public jailbreak<font color="#CCCCCC"> not all</font><font color="#E5E5E5"> users</font><font color="#CCCCCC"> update to</font>

276
00:10:19,640 --> 00:10:22,910
the<font color="#CCCCCC"> latest firmware</font><font color="#E5E5E5"> it is certainly</font>

277
00:10:21,290 --> 00:10:26,120
<font color="#CCCCCC">better than</font><font color="#E5E5E5"> the Android ecosystem but</font>

278
00:10:22,910 --> 00:10:28,670
<font color="#E5E5E5">still it exists particularly on</font><font color="#CCCCCC"> iPad we</font>

279
00:10:26,120 --> 00:10:30,860
see we see iPad users hold<font color="#CCCCCC"> on to their</font>

280
00:10:28,670 --> 00:10:33,079
devices longer and then they hit

281
00:10:30,860 --> 00:10:37,430
ceilings in terms of firmware support

282
00:10:33,080 --> 00:10:38,990
<font color="#CCCCCC">and iOS vulnerabilities are extremely</font>

283
00:10:37,430 --> 00:10:40,819
<font color="#E5E5E5">valuable there are many more exploits</font>

284
00:10:38,990 --> 00:10:42,800
than just those that are<font color="#E5E5E5"> given out by</font>

285
00:10:40,820 --> 00:10:44,780
people<font color="#E5E5E5"> for free on the</font><font color="#CCCCCC"> internet right so</font>

286
00:10:42,800 --> 00:10:47,300
jail breaks<font color="#CCCCCC"> you know incredibly</font>

287
00:10:44,780 --> 00:10:49,329
<font color="#E5E5E5">sophisticated in a lot of cases and you</font>

288
00:10:47,300 --> 00:10:51,229
know a chain of<font color="#E5E5E5"> like complex</font>

289
00:10:49,330 --> 00:10:52,820
<font color="#E5E5E5">vulnerabilities</font><font color="#CCCCCC"> they're very very</font>

290
00:10:51,230 --> 00:10:54,200
<font color="#E5E5E5">valuable even</font><font color="#CCCCCC"> Apple with their bug</font>

291
00:10:52,820 --> 00:10:56,780
bounty program pays hundreds of

292
00:10:54,200 --> 00:10:58,610
thousands of dollars<font color="#E5E5E5"> for them</font><font color="#CCCCCC"> so you</font>

293
00:10:56,780 --> 00:11:00,579
know just<font color="#E5E5E5"> because they're not publicly</font>

294
00:10:58,610 --> 00:11:03,860
released doesn't mean they don't exist

295
00:11:00,580 --> 00:11:06,540
<font color="#CCCCCC">miss to jail</font><font color="#E5E5E5"> breaks require physical</font>

296
00:11:03,860 --> 00:11:08,700
<font color="#E5E5E5">access to the</font><font color="#CCCCCC"> device</font>

297
00:11:06,540 --> 00:11:10,170
and so you hear this well someone would

298
00:11:08,700 --> 00:11:11,130
need to<font color="#E5E5E5"> steal the device to compromise</font>

299
00:11:10,170 --> 00:11:13,050
it

300
00:11:11,130 --> 00:11:14,519
not all exploits required physical

301
00:11:13,050 --> 00:11:16,229
<font color="#E5E5E5">access so some</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> are a little</font><font color="#CCCCCC"> bit</font>

302
00:11:14,519 --> 00:11:17,640
old but<font color="#E5E5E5"> there's some</font><font color="#CCCCCC"> new ones there so</font>

303
00:11:16,230 --> 00:11:19,200
you got<font color="#CCCCCC"> you know historically you've got</font>

304
00:11:17,640 --> 00:11:21,439
the<font color="#CCCCCC"> jailbreak for me right the classic</font>

305
00:11:19,200 --> 00:11:24,810
one which is<font color="#E5E5E5"> visited a website and bam</font>

306
00:11:21,440 --> 00:11:28,230
<font color="#CCCCCC">remote code execution via SMS</font><font color="#E5E5E5"> found</font><font color="#CCCCCC"> by</font>

307
00:11:24,810 --> 00:11:31,349
Charlie Miller<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know a night true jet</font>

308
00:11:28,230 --> 00:11:33,630
<font color="#CCCCCC">vulnerability says JavaScript engine</font>

309
00:11:31,350 --> 00:11:36,360
vulnerability also by Charlie Miller

310
00:11:33,630 --> 00:11:40,019
<font color="#CCCCCC">don't</font><font color="#E5E5E5"> let him near your iPhone home and</font>

311
00:11:36,360 --> 00:11:43,380
then more<font color="#CCCCCC"> recently</font><font color="#E5E5E5"> Matt's</font><font color="#CCCCCC"> Olmec</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Mark</font>

312
00:11:40,019 --> 00:11:45,750
<font color="#CCCCCC">van</font><font color="#E5E5E5"> shell did so did a talk on attacking</font>

313
00:11:43,380 --> 00:11:47,610
<font color="#E5E5E5">the baseband control protocols that are</font>

314
00:11:45,750 --> 00:11:50,190
<font color="#E5E5E5">mandated by carriers to get full</font>

315
00:11:47,610 --> 00:11:51,769
over-the-air code execution on an

316
00:11:50,190 --> 00:11:55,350
unpatched<font color="#CCCCCC"> device</font><font color="#E5E5E5"> at least at the time</font>

317
00:11:51,769 --> 00:11:59,550
and you're those guys are notorious<font color="#CCCCCC"> for</font>

318
00:11:55,350 --> 00:12:00,870
not patching their stuff<font color="#E5E5E5"> and yeah and</font><font color="#CCCCCC"> I</font>

319
00:11:59,550 --> 00:12:02,399
guess the<font color="#E5E5E5"> other point is well going</font><font color="#CCCCCC"> to</font>

320
00:12:00,870 --> 00:12:05,190
the previous in some of the previous

321
00:12:02,399 --> 00:12:07,769
points I made remote exploits<font color="#E5E5E5"> are very</font>

322
00:12:05,190 --> 00:12:09,750
very<font color="#CCCCCC"> valuable</font><font color="#E5E5E5"> so most of the time</font>

323
00:12:07,769 --> 00:12:12,260
jailbreak authors and like the public

324
00:12:09,750 --> 00:12:14,850
jailbreak horses will<font color="#CCCCCC"> not release those</font>

325
00:12:12,260 --> 00:12:17,069
<font color="#E5E5E5">not only</font><font color="#CCCCCC"> because they're valuable</font><font color="#E5E5E5"> but</font>

326
00:12:14,850 --> 00:12:18,750
also because they tend to<font color="#E5E5E5"> get patched</font>

327
00:12:17,070 --> 00:12:20,160
quicker because<font color="#E5E5E5"> they're more serious so</font>

328
00:12:18,750 --> 00:12:21,600
you know if you're if you're<font color="#E5E5E5"> trying to</font>

329
00:12:20,160 --> 00:12:23,339
<font color="#E5E5E5">release a public jailbreak that's going</font>

330
00:12:21,600 --> 00:12:26,100
to persist as long as<font color="#E5E5E5"> it can you're not</font>

331
00:12:23,339 --> 00:12:30,449
going<font color="#E5E5E5"> to burn you</font><font color="#CCCCCC"> know remote exploit</font>

332
00:12:26,100 --> 00:12:31,980
<font color="#E5E5E5">but they do exist</font><font color="#CCCCCC"> jail breaks are always</font>

333
00:12:30,449 --> 00:12:34,410
obvious to<font color="#CCCCCC"> the user right so</font><font color="#E5E5E5"> everybody</font>

334
00:12:31,980 --> 00:12:36,510
<font color="#E5E5E5">thinks that you know if</font><font color="#CCCCCC"> City is on</font><font color="#E5E5E5"> the</font>

335
00:12:34,410 --> 00:12:38,670
device<font color="#CCCCCC"> you know if it's not</font><font color="#E5E5E5"> on the</font>

336
00:12:36,510 --> 00:12:40,170
device and it's not jailbroken because

337
00:12:38,670 --> 00:12:42,360
that's videos for those who don't know

338
00:12:40,170 --> 00:12:44,750
it's<font color="#CCCCCC"> just a common app store that</font><font color="#E5E5E5"> gets</font>

339
00:12:42,360 --> 00:12:47,880
<font color="#E5E5E5">installed when you jailbreak your device</font>

340
00:12:44,750 --> 00:12:49,110
<font color="#CCCCCC">but if you're if you're coming in</font><font color="#E5E5E5"> a you</font>

341
00:12:47,880 --> 00:12:51,390
<font color="#E5E5E5">know as a hostile attacker</font>

342
00:12:49,110 --> 00:12:53,550
<font color="#CCCCCC">I'm not going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> want to compromise</font><font color="#E5E5E5"> your</font>

343
00:12:51,390 --> 00:12:54,810
device or I want to compromise<font color="#E5E5E5"> a series</font>

344
00:12:53,550 --> 00:12:57,689
of devices<font color="#CCCCCC"> I'm not going to</font><font color="#E5E5E5"> make it</font>

345
00:12:54,810 --> 00:13:00,750
obvious<font color="#E5E5E5"> right</font><font color="#CCCCCC"> so you know that logic is</font>

346
00:12:57,690 --> 00:13:02,670
kind of flawed<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you know if you</font><font color="#CCCCCC"> are</font>

347
00:13:00,750 --> 00:13:04,190
being targeted<font color="#E5E5E5"> or if you if you do</font><font color="#CCCCCC"> have</font>

348
00:13:02,670 --> 00:13:06,660
an exploit<font color="#CCCCCC"> that you want to run wild</font>

349
00:13:04,190 --> 00:13:08,820
<font color="#CCCCCC">you're not going to do something as</font>

350
00:13:06,660 --> 00:13:10,500
obvious<font color="#E5E5E5"> as have an icon pop up to say</font>

351
00:13:08,820 --> 00:13:13,500
hey<font color="#E5E5E5"> you're jailbroken right or</font><font color="#CCCCCC"> odds I've</font>

352
00:13:10,500 --> 00:13:14,790
compromised your device<font color="#CCCCCC"> miss</font><font color="#E5E5E5"> Vaughn</font><font color="#CCCCCC"> is</font>

353
00:13:13,500 --> 00:13:16,890
an interesting<font color="#E5E5E5"> one jailbreaking is</font>

354
00:13:14,790 --> 00:13:19,589
<font color="#CCCCCC">Apple's problem I get this a lot but I</font>

355
00:13:16,890 --> 00:13:22,110
<font color="#CCCCCC">think and this this applies more</font>

356
00:13:19,590 --> 00:13:24,300
<font color="#CCCCCC">just I Oh s applications but the</font>

357
00:13:22,110 --> 00:13:27,090
<font color="#CCCCCC">security of</font><font color="#E5E5E5"> your app and your data and</font>

358
00:13:24,300 --> 00:13:29,579
your users<font color="#E5E5E5"> data is your responsibility</font>

359
00:13:27,090 --> 00:13:32,070
<font color="#E5E5E5">right as a developer as an organization</font>

360
00:13:29,580 --> 00:13:33,810
<font color="#CCCCCC">the security</font><font color="#E5E5E5"> risks your organization is</font>

361
00:13:32,070 --> 00:13:35,280
your responsibility<font color="#E5E5E5"> you will be the one</font>

362
00:13:33,810 --> 00:13:37,109
<font color="#E5E5E5">that</font><font color="#CCCCCC"> suffers the impact if your app is</font>

363
00:13:35,280 --> 00:13:39,180
compromised<font color="#E5E5E5"> and you should be actively</font>

364
00:13:37,110 --> 00:13:41,760
managing the risk you can't outsource

365
00:13:39,180 --> 00:13:44,819
your risk<font color="#E5E5E5"> right</font><font color="#CCCCCC"> and Apple won't secure</font>

366
00:13:41,760 --> 00:13:46,950
your app for<font color="#E5E5E5"> you so Apple does a lot of</font>

367
00:13:44,820 --> 00:13:48,270
<font color="#E5E5E5">great work around platform</font><font color="#CCCCCC"> security</font>

368
00:13:46,950 --> 00:13:50,760
there's a lot of great work around

369
00:13:48,270 --> 00:13:54,240
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to force solid security practices</font>

370
00:13:50,760 --> 00:13:56,660
<font color="#CCCCCC">onto onto</font><font color="#E5E5E5"> app</font><font color="#CCCCCC"> developers but you know</font>

371
00:13:54,240 --> 00:13:58,920
they<font color="#E5E5E5"> won't secure your app for you and</font>

372
00:13:56,660 --> 00:14:01,650
miss lives and<font color="#E5E5E5"> this is an interesting</font>

373
00:13:58,920 --> 00:14:03,000
one you can't completely<font color="#E5E5E5"> you can</font>

374
00:14:01,650 --> 00:14:05,310
completely protect against jailbreaking

375
00:14:03,000 --> 00:14:07,380
right so unfortunately you'll never be

376
00:14:05,310 --> 00:14:08,819
able to<font color="#E5E5E5"> completely secure an application</font>

377
00:14:07,380 --> 00:14:11,010
this<font color="#E5E5E5"> is true for any application not</font>

378
00:14:08,820 --> 00:14:12,930
<font color="#E5E5E5">just</font><font color="#CCCCCC"> mobile applications but the idea is</font>

379
00:14:11,010 --> 00:14:15,060
<font color="#E5E5E5">you need</font><font color="#CCCCCC"> to raise the bar</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

380
00:14:12,930 --> 00:14:17,219
security of<font color="#CCCCCC"> your app so that it becomes</font>

381
00:14:15,060 --> 00:14:18,390
too<font color="#CCCCCC"> difficult or costly to attack</font><font color="#E5E5E5"> right</font>

382
00:14:17,220 --> 00:14:20,070
so that's that's<font color="#E5E5E5"> really</font><font color="#CCCCCC"> what you're</font>

383
00:14:18,390 --> 00:14:22,020
<font color="#E5E5E5">trying</font><font color="#CCCCCC"> to achieve here you don't</font><font color="#E5E5E5"> need</font>

384
00:14:20,070 --> 00:14:23,670
perfect<font color="#CCCCCC"> security is a myth</font><font color="#E5E5E5"> you're not</font>

385
00:14:22,020 --> 00:14:26,310
going<font color="#E5E5E5"> to achieve it</font><font color="#CCCCCC"> you just need to</font>

386
00:14:23,670 --> 00:14:29,010
<font color="#E5E5E5">raise the</font><font color="#CCCCCC"> bar</font><font color="#E5E5E5"> and that's the end of my</font>

387
00:14:26,310 --> 00:14:31,949
rant cool<font color="#E5E5E5"> so going into some of</font><font color="#CCCCCC"> the</font>

388
00:14:29,010 --> 00:14:34,980
protections<font color="#E5E5E5"> now against you know what</font>

389
00:14:31,950 --> 00:14:37,620
you can do to protect against a hostile

390
00:14:34,980 --> 00:14:39,390
runtime environment so<font color="#E5E5E5"> one</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> and</font>

391
00:14:37,620 --> 00:14:41,040
effective method of securing<font color="#E5E5E5"> the runtime</font>

392
00:14:39,390 --> 00:14:45,240
is to<font color="#CCCCCC"> implement an anti debug in control</font>

393
00:14:41,040 --> 00:14:46,740
<font color="#E5E5E5">so there may be reasons that you might</font>

394
00:14:45,240 --> 00:14:48,240
<font color="#CCCCCC">choose to allow your app to run on a</font>

395
00:14:46,740 --> 00:14:50,040
jailbroken device and we'll talk about

396
00:14:48,240 --> 00:14:51,330
job write checks in a second but there

397
00:14:50,040 --> 00:14:53,280
<font color="#E5E5E5">should be no legitimate reasons for</font>

398
00:14:51,330 --> 00:14:55,140
<font color="#E5E5E5">allowing debugging of your production</font>

399
00:14:53,280 --> 00:14:58,199
<font color="#CCCCCC">application right it doesn't make sense</font>

400
00:14:55,140 --> 00:15:00,420
<font color="#CCCCCC">so can be influenced using a couple of</font>

401
00:14:58,200 --> 00:15:02,010
<font color="#E5E5E5">techniques so periodically monitoring</font>

402
00:15:00,420 --> 00:15:04,050
the<font color="#E5E5E5"> process state flag to determine if</font>

403
00:15:02,010 --> 00:15:06,960
the process<font color="#CCCCCC"> is being traced</font>

404
00:15:04,050 --> 00:15:10,560
and then terminating the process<font color="#CCCCCC"> there's</font>

405
00:15:06,960 --> 00:15:11,820
a<font color="#CCCCCC"> pee</font><font color="#E5E5E5"> trace request</font><font color="#CCCCCC"> PT denied hatch</font><font color="#E5E5E5"> that</font>

406
00:15:10,560 --> 00:15:12,719
would<font color="#E5E5E5"> prevent future tracing</font><font color="#CCCCCC"> in the</font>

407
00:15:11,820 --> 00:15:16,410
process as well

408
00:15:12,720 --> 00:15:20,880
and that function called pee trace 31000

409
00:15:16,410 --> 00:15:22,469
<font color="#E5E5E5">is how you is how you do that and then</font>

410
00:15:20,880 --> 00:15:23,850
<font color="#E5E5E5">these techniques should be used</font><font color="#CCCCCC"> in</font>

411
00:15:22,470 --> 00:15:25,440
<font color="#CCCCCC">conjunction with</font><font color="#E5E5E5"> each other to</font><font color="#CCCCCC"> provide a</font>

412
00:15:23,850 --> 00:15:26,670
<font color="#E5E5E5">more robust anti debugging control so</font>

413
00:15:25,440 --> 00:15:30,120
you<font color="#E5E5E5"> don't do one or the other</font><font color="#CCCCCC"> right so</font>

414
00:15:26,670 --> 00:15:31,599
<font color="#CCCCCC">you know you have the PT deny attach but</font>

415
00:15:30,120 --> 00:15:33,819
you're still monitoring<font color="#E5E5E5"> the</font>

416
00:15:31,600 --> 00:15:37,779
<font color="#CCCCCC">our state flag to see if it's</font><font color="#E5E5E5"> being</font>

417
00:15:33,819 --> 00:15:39,219
tracked<font color="#CCCCCC"> jailbreak detection so jailbreak</font>

418
00:15:37,779 --> 00:15:41,380
detection is a common security

419
00:15:39,220 --> 00:15:43,269
protection<font color="#CCCCCC"> there are</font><font color="#E5E5E5"> multiple ways to</font>

420
00:15:41,380 --> 00:15:45,430
<font color="#E5E5E5">implement jailbreak detection</font><font color="#CCCCCC"> like the</font>

421
00:15:43,269 --> 00:15:47,350
two most most common methods are a<font color="#E5E5E5"> file</font>

422
00:15:45,430 --> 00:15:51,040
<font color="#E5E5E5">system check and a sandbox integrity</font>

423
00:15:47,350 --> 00:15:52,360
check so file system checks<font color="#CCCCCC"> test for the</font>

424
00:15:51,040 --> 00:15:53,860
presence of files that are typically

425
00:15:52,360 --> 00:15:56,410
<font color="#CCCCCC">found on jailbroken devices</font>

426
00:15:53,860 --> 00:15:58,360
some examples are mobile substrate which

427
00:15:56,410 --> 00:16:04,480
<font color="#CCCCCC">is a hooking library allows you</font><font color="#E5E5E5"> to write</font>

428
00:15:58,360 --> 00:16:07,300
patches<font color="#CCCCCC"> bash SSH things like that</font><font color="#E5E5E5"> you</font>

429
00:16:04,480 --> 00:16:10,449
know you check for<font color="#E5E5E5"> those sorts of files</font>

430
00:16:07,300 --> 00:16:13,029
<font color="#E5E5E5">and then one of the things to consider</font>

431
00:16:10,449 --> 00:16:14,529
from secure design perspective<font color="#CCCCCC"> is you</font>

432
00:16:13,029 --> 00:16:16,029
should ensure you use<font color="#E5E5E5"> you check for</font>

433
00:16:14,529 --> 00:16:17,829
<font color="#CCCCCC">multiple files so you</font><font color="#E5E5E5"> don't just do a</font>

434
00:16:16,029 --> 00:16:20,740
basic<font color="#E5E5E5"> one like a common one we see is</font>

435
00:16:17,829 --> 00:16:22,329
you just check for<font color="#E5E5E5"> Cydia app right so</font>

436
00:16:20,740 --> 00:16:24,850
what happens if I delete city<font color="#E5E5E5"> adult app</font>

437
00:16:22,329 --> 00:16:27,819
I'm still jailbroken<font color="#E5E5E5"> right or I rename</font>

438
00:16:24,850 --> 00:16:30,759
<font color="#E5E5E5">it or</font><font color="#CCCCCC"> i patch out the you know the</font>

439
00:16:27,819 --> 00:16:32,589
string in<font color="#E5E5E5"> the in the binary you know</font>

440
00:16:30,759 --> 00:16:33,790
happen<font color="#E5E5E5"> how do you how do you check</font><font color="#CCCCCC"> for</font>

441
00:16:32,589 --> 00:16:34,870
<font color="#CCCCCC">this you</font><font color="#E5E5E5"> should always check</font><font color="#CCCCCC"> for</font>

442
00:16:33,790 --> 00:16:37,180
<font color="#E5E5E5">multiple files</font>

443
00:16:34,870 --> 00:16:38,920
ideally checking for files<font color="#E5E5E5"> that are you</font>

444
00:16:37,180 --> 00:16:40,989
know going to<font color="#E5E5E5"> break a jailbreak</font>

445
00:16:38,920 --> 00:16:43,360
environment if<font color="#E5E5E5"> you can use different</font>

446
00:16:40,990 --> 00:16:46,750
methods<font color="#E5E5E5"> so a common one is followed this</font>

447
00:16:43,360 --> 00:16:49,380
<font color="#E5E5E5">a path which</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> as it suggests checks</font>

448
00:16:46,750 --> 00:16:52,060
with<font color="#E5E5E5"> a file exists and returns yes or no</font>

449
00:16:49,380 --> 00:16:53,800
<font color="#CCCCCC">or is readable</font><font color="#E5E5E5"> at file path so if you're</font>

450
00:16:52,060 --> 00:16:56,170
using multiple ones that can<font color="#E5E5E5"> protect you</font>

451
00:16:53,800 --> 00:16:58,630
against just patching<font color="#E5E5E5"> out file exists a</font>

452
00:16:56,170 --> 00:17:02,290
path to return<font color="#CCCCCC"> know every time</font><font color="#E5E5E5"> we return</font>

453
00:16:58,630 --> 00:17:04,209
<font color="#E5E5E5">false</font><font color="#CCCCCC"> so you know if you're making it</font>

454
00:17:02,290 --> 00:17:07,688
helps to make a more robust<font color="#E5E5E5"> file system</font>

455
00:17:04,209 --> 00:17:09,610
check<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sandbox integrity check as the</font>

456
00:17:07,689 --> 00:17:11,860
name suggests<font color="#E5E5E5"> test the integrity</font><font color="#CCCCCC"> of the</font>

457
00:17:09,609 --> 00:17:13,869
<font color="#E5E5E5">sandbox</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> making sure that the</font>

458
00:17:11,859 --> 00:17:15,280
<font color="#CCCCCC">application is</font><font color="#E5E5E5"> running</font><font color="#CCCCCC"> inside it it</font>

459
00:17:13,869 --> 00:17:16,899
works by attempting<font color="#CCCCCC"> to perform an</font>

460
00:17:15,280 --> 00:17:20,079
<font color="#CCCCCC">operation that</font><font color="#E5E5E5"> would not typically be</font>

461
00:17:16,900 --> 00:17:21,640
allowed on<font color="#CCCCCC"> a device that has not been</font>

462
00:17:20,079 --> 00:17:24,280
jailbroken in the sandbox<font color="#E5E5E5"> is still</font>

463
00:17:21,640 --> 00:17:25,809
intact<font color="#CCCCCC"> so common test is to attempt to</font>

464
00:17:24,280 --> 00:17:28,209
<font color="#E5E5E5">use the fork function to spawn a new</font>

465
00:17:25,809 --> 00:17:30,280
<font color="#E5E5E5">child process but you can try access</font>

466
00:17:28,209 --> 00:17:32,110
files outside<font color="#E5E5E5"> of the sandbox or whatever</font>

467
00:17:30,280 --> 00:17:34,600
else would come<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with that</font><font color="#E5E5E5"> sort of</font>

468
00:17:32,110 --> 00:17:36,760
logic<font color="#E5E5E5"> of yes I'm successful or no I'm</font>

469
00:17:34,600 --> 00:17:39,959
not<font color="#CCCCCC"> and if it works</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> it's</font>

470
00:17:36,760 --> 00:17:44,049
compromised<font color="#E5E5E5"> if not then it's all good</font>

471
00:17:39,960 --> 00:17:45,190
<font color="#CCCCCC">check out our wasp has a project</font><font color="#E5E5E5"> called</font>

472
00:17:44,049 --> 00:17:46,750
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> ass</font><font color="#CCCCCC"> and they</font>

473
00:17:45,190 --> 00:17:49,750
a bunch<font color="#E5E5E5"> of security modules that you can</font>

474
00:17:46,750 --> 00:17:51,340
<font color="#CCCCCC">drop in to your application jailbreak</font>

475
00:17:49,750 --> 00:17:53,050
<font color="#CCCCCC">check</font><font color="#E5E5E5"> in the debug checker are pretty</font>

476
00:17:51,340 --> 00:17:55,629
good<font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> little bit old now but</font><font color="#E5E5E5"> the</font>

477
00:17:53,050 --> 00:17:57,460
code<font color="#CCCCCC"> is still</font><font color="#E5E5E5"> relevant so definitely</font>

478
00:17:55,630 --> 00:17:59,590
check<font color="#CCCCCC"> it</font><font color="#E5E5E5"> out if you don't want to roll</font>

479
00:17:57,460 --> 00:18:01,180
<font color="#CCCCCC">your</font><font color="#E5E5E5"> own and you can you</font><font color="#CCCCCC"> can really</font><font color="#E5E5E5"> go</font>

480
00:17:59,590 --> 00:18:02,409
<font color="#E5E5E5">down a rabbit hole with this and as I</font>

481
00:18:01,180 --> 00:18:04,030
said<font color="#E5E5E5"> it goes back to the sort of threat</font>

482
00:18:02,410 --> 00:18:05,710
modeling right you know maybe you just

483
00:18:04,030 --> 00:18:07,930
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> do a basic</font><font color="#CCCCCC"> version of this</font><font color="#E5E5E5"> right</font>

484
00:18:05,710 --> 00:18:09,910
just to just<font color="#E5E5E5"> to kill like some of the</font>

485
00:18:07,930 --> 00:18:11,590
low-hanging fruit<font color="#CCCCCC"> like</font><font color="#E5E5E5"> if it's if it's</font>

486
00:18:09,910 --> 00:18:14,080
an<font color="#CCCCCC"> application where I was able to</font>

487
00:18:11,590 --> 00:18:15,280
develop a patch and if that<font color="#E5E5E5"> got easily</font>

488
00:18:14,080 --> 00:18:17,230
spread around the<font color="#E5E5E5"> internet</font><font color="#CCCCCC"> you know</font>

489
00:18:15,280 --> 00:18:20,320
<font color="#CCCCCC">people downloaded it you know to get</font>

490
00:18:17,230 --> 00:18:22,270
I'll give some<font color="#CCCCCC"> examples we had a very</font>

491
00:18:20,320 --> 00:18:24,370
large<font color="#E5E5E5"> fast food chain that</font><font color="#CCCCCC"> we do work</font>

492
00:18:22,270 --> 00:18:25,629
for<font color="#E5E5E5"> a global fast food chain and they</font>

493
00:18:24,370 --> 00:18:27,850
had an application<font color="#CCCCCC"> that allowed you to</font>

494
00:18:25,630 --> 00:18:30,040
<font color="#E5E5E5">get free coffees right after a</font><font color="#CCCCCC"> certain</font>

495
00:18:27,850 --> 00:18:32,199
<font color="#E5E5E5">number</font><font color="#CCCCCC"> of you know promotions or</font>

496
00:18:30,040 --> 00:18:34,300
whatever and you could easily patch that

497
00:18:32,200 --> 00:18:36,100
out to just give you<font color="#CCCCCC"> a free coffee in</font>

498
00:18:34,300 --> 00:18:38,350
the app and say yep<font color="#E5E5E5"> I'm eligible for a</font>

499
00:18:36,100 --> 00:18:39,520
<font color="#E5E5E5">free coffee and you know you could put</font>

500
00:18:38,350 --> 00:18:41,080
that patch up on the<font color="#CCCCCC"> Internet and</font>

501
00:18:39,520 --> 00:18:42,639
<font color="#E5E5E5">anybody</font><font color="#CCCCCC"> that's got a jailbroken</font><font color="#E5E5E5"> phone</font>

502
00:18:41,080 --> 00:18:44,649
can download and get free<font color="#CCCCCC"> confidence now</font>

503
00:18:42,640 --> 00:18:45,700
<font color="#E5E5E5">this organization is huge and they don't</font>

504
00:18:44,650 --> 00:18:48,400
<font color="#E5E5E5">care about that</font><font color="#CCCCCC"> right they don't</font><font color="#E5E5E5"> give a</font>

505
00:18:45,700 --> 00:18:51,550
<font color="#CCCCCC"> so but another</font><font color="#E5E5E5"> example was actually</font>

506
00:18:48,400 --> 00:18:54,040
<font color="#CCCCCC">a local company</font><font color="#E5E5E5"> and they had an</font>

507
00:18:51,550 --> 00:18:57,600
application<font color="#CCCCCC"> I was for insurance</font><font color="#E5E5E5"> that</font>

508
00:18:54,040 --> 00:19:00,550
uses all<font color="#E5E5E5"> the sensors on</font><font color="#CCCCCC"> your device</font><font color="#E5E5E5"> to</font>

509
00:18:57,600 --> 00:19:02,320
to<font color="#E5E5E5"> determine how</font><font color="#CCCCCC"> good of a driver</font><font color="#E5E5E5"> you</font>

510
00:19:00,550 --> 00:19:04,360
<font color="#CCCCCC">are and that has impacts on like whether</font>

511
00:19:02,320 --> 00:19:06,100
you've you<font color="#E5E5E5"> know you can get a reduction</font>

512
00:19:04,360 --> 00:19:07,600
in<font color="#E5E5E5"> your premium or other other benefits</font>

513
00:19:06,100 --> 00:19:09,459
<font color="#E5E5E5">and because it's all being done on the</font>

514
00:19:07,600 --> 00:19:11,169
<font color="#CCCCCC">client</font><font color="#E5E5E5"> if it's on a jailbroken device</font>

515
00:19:09,460 --> 00:19:13,120
you can mess with<font color="#E5E5E5"> that completely so</font>

516
00:19:11,170 --> 00:19:15,610
<font color="#E5E5E5">that has a real business impact so that</font>

517
00:19:13,120 --> 00:19:16,840
<font color="#CCCCCC">might be</font><font color="#E5E5E5"> a case where you want to invest</font>

518
00:19:15,610 --> 00:19:19,090
a little<font color="#E5E5E5"> bit more in these runtime</font>

519
00:19:16,840 --> 00:19:20,530
protections<font color="#E5E5E5"> just because it has has that</font>

520
00:19:19,090 --> 00:19:24,220
business impact so again it<font color="#E5E5E5"> goes</font><font color="#CCCCCC"> back</font><font color="#E5E5E5"> to</font>

521
00:19:20,530 --> 00:19:25,990
the modeling<font color="#CCCCCC"> in</font><font color="#E5E5E5"> learning functions so</font>

522
00:19:24,220 --> 00:19:28,090
any tension of sensitive functions such

523
00:19:25,990 --> 00:19:30,550
as<font color="#E5E5E5"> security checks should be compiled as</font>

524
00:19:28,090 --> 00:19:32,679
<font color="#E5E5E5">inline functions</font><font color="#CCCCCC"> in lining functions</font>

525
00:19:30,550 --> 00:19:34,300
complicates the attacks and<font color="#CCCCCC"> that</font>

526
00:19:32,680 --> 00:19:36,220
involves<font color="#E5E5E5"> so for those</font><font color="#CCCCCC"> who</font><font color="#E5E5E5"> don't know</font>

527
00:19:34,300 --> 00:19:38,050
when you in line<font color="#E5E5E5"> and function it's</font>

528
00:19:36,220 --> 00:19:39,670
essentially the compiler essentially

529
00:19:38,050 --> 00:19:42,639
copies and<font color="#E5E5E5"> pastes it anywhere</font><font color="#CCCCCC"> that it's</font>

530
00:19:39,670 --> 00:19:44,320
called<font color="#E5E5E5"> right so rather than rather than</font>

531
00:19:42,640 --> 00:19:46,050
<font color="#E5E5E5">just having it you know it exists once</font>

532
00:19:44,320 --> 00:19:49,450
in the code and and it gets called

533
00:19:46,050 --> 00:19:51,430
<font color="#E5E5E5">basically in</font><font color="#CCCCCC"> lining functions will</font>

534
00:19:49,450 --> 00:19:52,720
complicate attacks because you need if

535
00:19:51,430 --> 00:19:54,490
you<font color="#E5E5E5"> want to patch something out you want</font>

536
00:19:52,720 --> 00:19:56,380
to<font color="#E5E5E5"> patch a check out like a like a</font>

537
00:19:54,490 --> 00:19:58,350
jailbreak check or a debug check we have

538
00:19:56,380 --> 00:20:00,270
<font color="#CCCCCC">to find</font><font color="#E5E5E5"> every instance that</font><font color="#CCCCCC"> has been</font>

539
00:19:58,350 --> 00:20:02,100
in mind in the code and patch that out

540
00:20:00,270 --> 00:20:04,860
so<font color="#E5E5E5"> so it can complicate and just make</font><font color="#CCCCCC"> it</font>

541
00:20:02,100 --> 00:20:07,740
a lot<font color="#E5E5E5"> harder to do and so to do</font><font color="#CCCCCC"> that</font>

542
00:20:04,860 --> 00:20:09,389
there's the attribute<font color="#CCCCCC"> you're always</font><font color="#E5E5E5"> in</font>

543
00:20:07,740 --> 00:20:11,760
line to<font color="#E5E5E5"> compile a directive that you can</font>

544
00:20:09,390 --> 00:20:14,070
use<font color="#CCCCCC"> to in - functions</font><font color="#E5E5E5"> there are some</font>

545
00:20:11,760 --> 00:20:16,940
<font color="#E5E5E5">some nuances to that right so may not</font>

546
00:20:14,070 --> 00:20:19,830
<font color="#CCCCCC">always be honored so you know if you are</font>

547
00:20:16,940 --> 00:20:21,630
<font color="#CCCCCC">if you are doing</font><font color="#E5E5E5"> that you need to think</font>

548
00:20:19,830 --> 00:20:23,939
<font color="#CCCCCC">about some</font><font color="#E5E5E5"> of the other flags so</font><font color="#CCCCCC"> setting</font>

549
00:20:21,630 --> 00:20:25,500
the<font color="#E5E5E5"> inline limit compiler flag high</font>

550
00:20:23,940 --> 00:20:28,890
enough to<font color="#E5E5E5"> allow for</font><font color="#CCCCCC"> the inlining of your</font>

551
00:20:25,500 --> 00:20:30,659
code<font color="#CCCCCC"> inlining is usually</font><font color="#E5E5E5"> ignored if you</font>

552
00:20:28,890 --> 00:20:32,990
don't have any optimization level set

553
00:20:30,659 --> 00:20:36,600
<font color="#E5E5E5">because it is considered</font><font color="#CCCCCC"> an optimization</font>

554
00:20:32,990 --> 00:20:37,740
<font color="#CCCCCC">and don't use unit at a time which is</font>

555
00:20:36,600 --> 00:20:40,649
automatically<font color="#E5E5E5"> set if you use</font>

556
00:20:37,740 --> 00:20:42,210
optimization<font color="#CCCCCC"> 3 and above and don't</font><font color="#E5E5E5"> use</font>

557
00:20:40,650 --> 00:20:45,659
keep in mind functions<font color="#E5E5E5"> if your</font><font color="#CCCCCC"> function</font>

558
00:20:42,210 --> 00:20:48,570
this day another more complicated<font color="#E5E5E5"> but</font>

559
00:20:45,659 --> 00:20:51,870
also very effective method of<font color="#E5E5E5"> protecting</font>

560
00:20:48,570 --> 00:20:53,820
against your runtime attacks<font color="#E5E5E5"> is address</font>

561
00:20:51,870 --> 00:20:55,289
space validation so anytime malicious

562
00:20:53,820 --> 00:20:56,490
code is injected to<font color="#E5E5E5"> your application it</font>

563
00:20:55,289 --> 00:20:58,710
must be<font color="#E5E5E5"> loaded into an address space</font>

564
00:20:56,490 --> 00:21:01,830
<font color="#E5E5E5">obviously validating that address space</font>

565
00:20:58,710 --> 00:21:05,549
as complexity to the attacker because<font color="#E5E5E5"> it</font>

566
00:21:01,830 --> 00:21:07,350
forces<font color="#E5E5E5"> them to</font><font color="#CCCCCC"> you mid like trying to</font>

567
00:21:05,549 --> 00:21:09,780
inject malicious code into<font color="#CCCCCC"> the existing</font>

568
00:21:07,350 --> 00:21:12,240
address space<font color="#CCCCCC"> which is valid</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> valid</font>

569
00:21:09,780 --> 00:21:14,789
code or attacking<font color="#E5E5E5"> the dynamic linker</font>

570
00:21:12,240 --> 00:21:17,429
which is which<font color="#CCCCCC"> is hard right so there's</font>

571
00:21:14,789 --> 00:21:19,500
a dynamic linker library function deal

572
00:21:17,429 --> 00:21:20,970
address and that returns information

573
00:21:19,500 --> 00:21:23,640
about the address<font color="#E5E5E5"> space</font><font color="#CCCCCC"> of a particular</font>

574
00:21:20,970 --> 00:21:26,490
that a<font color="#E5E5E5"> particular function belongs to so</font>

575
00:21:23,640 --> 00:21:28,200
passing a function<font color="#CCCCCC"> pointer of the</font>

576
00:21:26,490 --> 00:21:31,559
<font color="#E5E5E5">classes method implementation that you</font>

577
00:21:28,200 --> 00:21:33,870
want to that<font color="#E5E5E5"> you want to validate</font><font color="#CCCCCC"> into</font>

578
00:21:31,559 --> 00:21:36,389
that function<font color="#CCCCCC"> will basically</font><font color="#E5E5E5"> return</font>

579
00:21:33,870 --> 00:21:38,070
whether it's came from your app one<font color="#CCCCCC"> of</font>

580
00:21:36,390 --> 00:21:39,900
<font color="#CCCCCC">Apple's framework or you know some sort</font>

581
00:21:38,070 --> 00:21:43,918
<font color="#CCCCCC">of unknown source which is probably</font>

582
00:21:39,900 --> 00:21:46,950
malicious<font color="#E5E5E5"> another going back to a little</font>

583
00:21:43,919 --> 00:21:49,350
<font color="#CCCCCC">bit more of a</font><font color="#E5E5E5"> design focus simple logic</font>

584
00:21:46,950 --> 00:21:51,750
checks<font color="#CCCCCC"> and this is this</font><font color="#E5E5E5"> is a big one</font>

585
00:21:49,350 --> 00:21:53,250
right<font color="#E5E5E5"> so simple logic checks for</font>

586
00:21:51,750 --> 00:21:55,230
security functions and business logics

587
00:21:53,250 --> 00:21:56,760
are easily<font color="#CCCCCC"> susceptible to manipulation</font>

588
00:21:55,230 --> 00:21:59,070
so these are<font color="#E5E5E5"> just some of the</font><font color="#CCCCCC"> examples</font>

589
00:21:56,760 --> 00:22:00,720
that<font color="#E5E5E5"> we see all the</font><font color="#CCCCCC"> time right I don't</font>

590
00:21:59,070 --> 00:22:03,899
know if any<font color="#E5E5E5"> of you guys objective-c</font>

591
00:22:00,720 --> 00:22:05,820
developers or developers<font color="#E5E5E5"> but this is</font>

592
00:22:03,900 --> 00:22:07,770
just<font color="#E5E5E5"> sort of a function signature called</font>

593
00:22:05,820 --> 00:22:10,080
is logged in and it's returning<font color="#CCCCCC"> you know</font>

594
00:22:07,770 --> 00:22:12,299
true or false<font color="#CCCCCC"> right so if I can patch</font>

595
00:22:10,080 --> 00:22:12,830
that to always return<font color="#E5E5E5"> true have I</font><font color="#CCCCCC"> gotten</font>

596
00:22:12,299 --> 00:22:15,680
<font color="#CCCCCC">north</font>

597
00:22:12,830 --> 00:22:17,960
right<font color="#E5E5E5"> is jailbroken</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> right that's a</font>

598
00:22:15,680 --> 00:22:20,060
variable<font color="#CCCCCC"> I</font><font color="#E5E5E5"> can easily change</font><font color="#CCCCCC"> that on a</font>

599
00:22:17,960 --> 00:22:22,850
<font color="#E5E5E5">compromised device so if you're relying</font>

600
00:22:20,060 --> 00:22:25,580
on<font color="#E5E5E5"> the value of</font><font color="#CCCCCC"> that variable you know</font>

601
00:22:22,850 --> 00:22:28,010
to be to be<font color="#E5E5E5"> you know yes or no you can</font>

602
00:22:25,580 --> 00:22:31,010
easily<font color="#CCCCCC"> reflect that</font><font color="#E5E5E5"> set debug flag just</font>

603
00:22:28,010 --> 00:22:32,930
<font color="#E5E5E5">another</font><font color="#CCCCCC"> example so here's an example</font><font color="#E5E5E5"> for</font>

604
00:22:31,010 --> 00:22:34,160
a mobile banking application Australia

605
00:22:32,930 --> 00:22:36,200
<font color="#E5E5E5">from one of the big four banks I'm not</font>

606
00:22:34,160 --> 00:22:37,610
going to tell you who it<font color="#E5E5E5"> is</font><font color="#CCCCCC"> and</font>

607
00:22:36,200 --> 00:22:41,390
<font color="#E5E5E5">basically they've got a jailbreak</font>

608
00:22:37,610 --> 00:22:43,639
detector<font color="#E5E5E5"> our function and basically</font>

609
00:22:41,390 --> 00:22:44,840
<font color="#E5E5E5">they're doing some file system checks</font>

610
00:22:43,640 --> 00:22:46,940
that are<font color="#E5E5E5"> checking for</font><font color="#CCCCCC"> the existence of</font>

611
00:22:44,840 --> 00:22:49,129
<font color="#E5E5E5">jailbreak files or symbolic linking</font>

612
00:22:46,940 --> 00:22:51,980
that's<font color="#E5E5E5"> symbolic links that are typically</font>

613
00:22:49,130 --> 00:22:55,390
created<font color="#E5E5E5"> when you jailbreak and sandbox</font>

614
00:22:51,980 --> 00:22:58,130
integrity and basically<font color="#E5E5E5"> you've</font><font color="#CCCCCC"> got here</font>

615
00:22:55,390 --> 00:22:59,530
<font color="#CCCCCC">you know basically</font><font color="#E5E5E5"> those first three</font>

616
00:22:58,130 --> 00:23:01,670
lines<font color="#E5E5E5"> of me</font>

617
00:22:59,530 --> 00:23:05,210
messing with the<font color="#E5E5E5"> runtime to make it</font>

618
00:23:01,670 --> 00:23:06,650
return<font color="#E5E5E5"> false on all the checks and</font><font color="#CCCCCC"> then</font>

619
00:23:05,210 --> 00:23:09,440
when you run them they're returning<font color="#E5E5E5"> zero</font>

620
00:23:06,650 --> 00:23:10,910
<font color="#CCCCCC">which is which is</font><font color="#E5E5E5"> false</font><font color="#CCCCCC"> right and then</font>

621
00:23:09,440 --> 00:23:12,200
<font color="#E5E5E5">you there's another way in terms of the</font>

622
00:23:10,910 --> 00:23:13,820
logic<font color="#E5E5E5"> like thinking through the logic</font>

623
00:23:12,200 --> 00:23:16,610
<font color="#E5E5E5">the way that they did the</font><font color="#CCCCCC"> filesystem</font>

624
00:23:13,820 --> 00:23:19,490
<font color="#CCCCCC">checks were just to have an array of</font>

625
00:23:16,610 --> 00:23:21,169
<font color="#E5E5E5">strings</font><font color="#CCCCCC"> I could just change</font><font color="#E5E5E5"> those to an</font>

626
00:23:19,490 --> 00:23:24,680
empty<font color="#E5E5E5"> array and it also breaks the check</font>

627
00:23:21,170 --> 00:23:27,290
<font color="#E5E5E5">right</font><font color="#CCCCCC"> so again thinking about</font><font color="#E5E5E5"> the logic</font>

628
00:23:24,680 --> 00:23:30,500
and and and how you can and how you can

629
00:23:27,290 --> 00:23:32,570
you know<font color="#E5E5E5"> avoid you know simple logic and</font>

630
00:23:30,500 --> 00:23:35,630
it's also<font color="#E5E5E5"> very common</font><font color="#CCCCCC"> they're getting</font>

631
00:23:32,570 --> 00:23:37,220
checks it's<font color="#E5E5E5"> also very</font><font color="#CCCCCC"> common in in iOS</font>

632
00:23:35,630 --> 00:23:39,950
applications just<font color="#E5E5E5"> the way that</font><font color="#CCCCCC"> they're</font>

633
00:23:37,220 --> 00:23:41,450
architected<font color="#CCCCCC"> to have multiple stages of a</font>

634
00:23:39,950 --> 00:23:42,830
workflow right so if you've<font color="#E5E5E5"> got multiple</font>

635
00:23:41,450 --> 00:23:44,870
stages of workflow<font color="#CCCCCC"> we've got one</font>

636
00:23:42,830 --> 00:23:46,580
function that<font color="#E5E5E5"> does this passes it off to</font>

637
00:23:44,870 --> 00:23:48,260
<font color="#CCCCCC">another function to check it passes it</font>

638
00:23:46,580 --> 00:23:50,389
off to<font color="#CCCCCC"> another function to</font><font color="#E5E5E5"> log you in or</font>

639
00:23:48,260 --> 00:23:52,550
<font color="#E5E5E5">whatever you know you have to think</font>

640
00:23:50,390 --> 00:23:54,740
about people<font color="#E5E5E5"> being able to bypass you</font>

641
00:23:52,550 --> 00:23:56,720
know that step right<font color="#E5E5E5"> so all of this</font>

642
00:23:54,740 --> 00:23:58,580
should<font color="#E5E5E5"> get you thinking</font><font color="#CCCCCC"> that securing</font>

643
00:23:56,720 --> 00:23:59,750
client-side functionality<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be hard so</font>

644
00:23:58,580 --> 00:24:01,550
if you've<font color="#E5E5E5"> got anything sensitive and</font>

645
00:23:59,750 --> 00:24:03,620
client-side functionality that's not a

646
00:24:01,550 --> 00:24:05,840
<font color="#E5E5E5">business imperative</font><font color="#CCCCCC"> you should try and</font>

647
00:24:03,620 --> 00:24:07,699
shift it to the<font color="#E5E5E5"> server if you can</font>

648
00:24:05,840 --> 00:24:10,220
securing<font color="#CCCCCC"> memories for</font><font color="#E5E5E5"> instance variable</font>

649
00:24:07,700 --> 00:24:11,480
<font color="#CCCCCC">stored and</font><font color="#E5E5E5"> Objective C objects can be</font>

650
00:24:10,220 --> 00:24:14,000
easily mapped inside the objective-c

651
00:24:11,480 --> 00:24:15,710
runtime<font color="#CCCCCC"> never</font><font color="#E5E5E5"> store anything in memory</font>

652
00:24:14,000 --> 00:24:17,660
<font color="#E5E5E5">until the user has</font><font color="#CCCCCC"> authenticated the</font>

653
00:24:15,710 --> 00:24:19,010
data and the<font color="#CCCCCC"> data has been decrypted</font>

654
00:24:17,660 --> 00:24:21,590
obviously because then you're<font color="#E5E5E5"> not really</font>

655
00:24:19,010 --> 00:24:23,180
encrypting it manually allocate memory

656
00:24:21,590 --> 00:24:25,429
for<font color="#E5E5E5"> sensitive data rather than storing</font>

657
00:24:23,180 --> 00:24:26,269
it<font color="#CCCCCC"> showing the data or pointers to the</font>

658
00:24:25,430 --> 00:24:28,099
data

659
00:24:26,269 --> 00:24:29,659
objective-c instance variables<font color="#E5E5E5"> and</font><font color="#CCCCCC"> wipe</font>

660
00:24:28,099 --> 00:24:32,450
sensitive data<font color="#E5E5E5"> from</font><font color="#CCCCCC"> memory when it's not</font>

661
00:24:29,659 --> 00:24:34,869
needed<font color="#CCCCCC"> C is an example of another same</font>

662
00:24:32,450 --> 00:24:37,969
<font color="#E5E5E5">banking app</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> I've got the pin up there</font>

663
00:24:34,869 --> 00:24:39,908
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> tokens your mobile number</font>

664
00:24:37,969 --> 00:24:42,859
<font color="#CCCCCC">that's actually my real mobile number</font>

665
00:24:39,909 --> 00:24:45,709
<font color="#CCCCCC">call me anytime you know all this other</font>

666
00:24:42,859 --> 00:24:47,689
stuff account name<font color="#E5E5E5"> account numbers you</font>

667
00:24:45,709 --> 00:24:49,070
know all that<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of stuff so it's</font>

668
00:24:47,690 --> 00:24:50,719
actually<font color="#E5E5E5"> really hard to protect against</font>

669
00:24:49,070 --> 00:24:52,700
but just think about you<font color="#E5E5E5"> know the</font>

670
00:24:50,719 --> 00:24:53,629
<font color="#CCCCCC">lifecycle of these things and</font><font color="#E5E5E5"> and you</font>

671
00:24:52,700 --> 00:24:55,729
<font color="#E5E5E5">know making</font><font color="#CCCCCC"> sure that they're not</font>

672
00:24:53,629 --> 00:25:00,139
<font color="#E5E5E5">staying in memory for as long as</font><font color="#CCCCCC"> it</font>

673
00:24:55,729 --> 00:25:01,789
<font color="#CCCCCC">needs to</font><font color="#E5E5E5"> transport</font><font color="#CCCCCC"> layer security I've</font>

674
00:25:00,139 --> 00:25:04,369
got a lot<font color="#E5E5E5"> to go but running out of time</font>

675
00:25:01,789 --> 00:25:06,169
<font color="#E5E5E5">so we'll keep going</font><font color="#CCCCCC"> so users will</font>

676
00:25:04,369 --> 00:25:06,889
<font color="#E5E5E5">connect their devices to untrusted</font>

677
00:25:06,169 --> 00:25:08,690
networks great

678
00:25:06,889 --> 00:25:09,949
so<font color="#E5E5E5"> the</font><font color="#CCCCCC"> apps handle sensitive data should</font>

679
00:25:08,690 --> 00:25:11,389
be encrypting all the traffic between

680
00:25:09,950 --> 00:25:14,479
<font color="#E5E5E5">the app in the</font><font color="#CCCCCC"> backend pretty</font>

681
00:25:11,389 --> 00:25:17,299
<font color="#E5E5E5">straightforward right Apple and since</font>

682
00:25:14,479 --> 00:25:20,809
iOS 9 has implemented<font color="#E5E5E5"> app</font><font color="#CCCCCC"> transport</font>

683
00:25:17,299 --> 00:25:23,389
<font color="#CCCCCC">security and it requires it basically</font>

684
00:25:20,809 --> 00:25:27,168
forces<font color="#CCCCCC"> all applications to use HTTPS to</font>

685
00:25:23,389 --> 00:25:28,789
secure all networking connections<font color="#CCCCCC"> and it</font>

686
00:25:27,169 --> 00:25:33,200
<font color="#E5E5E5">forces all</font><font color="#CCCCCC"> the latest protocol versions</font>

687
00:25:28,789 --> 00:25:35,509
like<font color="#E5E5E5"> TLS be 1.2 they had mandated it or</font>

688
00:25:33,200 --> 00:25:38,179
had intended<font color="#CCCCCC"> to mandate</font><font color="#E5E5E5"> it from the end</font>

689
00:25:35,509 --> 00:25:39,979
<font color="#E5E5E5">of last year</font><font color="#CCCCCC"> but it was extended</font><font color="#E5E5E5"> because</font>

690
00:25:38,179 --> 00:25:41,719
<font color="#E5E5E5">developers were having issues</font><font color="#CCCCCC"> with it</font>

691
00:25:39,979 --> 00:25:42,799
and lots lots of issues<font color="#CCCCCC"> with this as</font><font color="#E5E5E5"> you</font>

692
00:25:41,719 --> 00:25:45,799
<font color="#CCCCCC">can</font><font color="#E5E5E5"> imagine come from third-party</font>

693
00:25:42,799 --> 00:25:47,359
<font color="#E5E5E5">services right so there's some fine</font>

694
00:25:45,799 --> 00:25:48,799
grained control that's<font color="#CCCCCC"> available to</font>

695
00:25:47,359 --> 00:25:51,678
developers<font color="#CCCCCC"> so you can set per domain</font>

696
00:25:48,799 --> 00:25:54,168
exceptions in the info.plist file<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font>

697
00:25:51,679 --> 00:25:56,899
<font color="#E5E5E5">can include like certain subdomains</font><font color="#CCCCCC"> your</font>

698
00:25:54,169 --> 00:25:59,359
temporary access<font color="#E5E5E5"> to loading HTTP</font>

699
00:25:56,899 --> 00:26:01,518
resources if it makes<font color="#E5E5E5"> sense right</font><font color="#CCCCCC"> so you</font>

700
00:25:59,359 --> 00:26:03,079
get some fun between controls but it's

701
00:26:01,519 --> 00:26:05,659
also possible<font color="#E5E5E5"> with those controls to</font>

702
00:26:03,079 --> 00:26:07,339
completely<font color="#CCCCCC"> bypass it don't do that I</font>

703
00:26:05,659 --> 00:26:08,779
<font color="#E5E5E5">don't know if it's actually once it</font>

704
00:26:07,339 --> 00:26:10,099
comes in and there's a<font color="#CCCCCC"> deadline whether</font>

705
00:26:08,779 --> 00:26:11,509
this will get you in trouble and<font color="#E5E5E5"> you</font>

706
00:26:10,099 --> 00:26:12,468
<font color="#CCCCCC">might</font><font color="#E5E5E5"> get accepted into the App Store</font>

707
00:26:11,509 --> 00:26:14,599
<font color="#E5E5E5">maybe not</font>

708
00:26:12,469 --> 00:26:16,669
but even even<font color="#CCCCCC"> if it does you shouldn't</font>

709
00:26:14,599 --> 00:26:20,899
<font color="#E5E5E5">just allow allow all right defeating</font>

710
00:26:16,669 --> 00:26:22,759
<font color="#E5E5E5">what's a pretty good</font><font color="#CCCCCC"> security control so</font>

711
00:26:20,899 --> 00:26:25,099
cipher<font color="#E5E5E5"> suites you know anybody</font><font color="#CCCCCC"> that's</font>

712
00:26:22,759 --> 00:26:27,289
got a pen test background or is procured

713
00:26:25,099 --> 00:26:29,450
a pen test report<font color="#E5E5E5"> will probably no doubt</font>

714
00:26:27,289 --> 00:26:31,669
<font color="#E5E5E5">have seen</font><font color="#CCCCCC"> 100 issues on like you know</font>

715
00:26:29,450 --> 00:26:33,229
<font color="#CCCCCC">insecure</font><font color="#E5E5E5"> cipher suites as you should</font><font color="#CCCCCC"> you</font>

716
00:26:31,669 --> 00:26:35,299
<font color="#CCCCCC">know pretty standard stuff disabled</font>

717
00:26:33,229 --> 00:26:37,369
support for<font color="#CCCCCC"> low medium</font><font color="#E5E5E5"> strength size of</font>

718
00:26:35,299 --> 00:26:38,749
<font color="#CCCCCC">suites on the server you can</font><font color="#E5E5E5"> also</font>

719
00:26:37,369 --> 00:26:39,889
control this on the client<font color="#E5E5E5"> to some</font>

720
00:26:38,749 --> 00:26:42,170
degree so for you

721
00:26:39,890 --> 00:26:44,870
<font color="#CCCCCC">they'll session</font><font color="#E5E5E5"> you can specify the</font>

722
00:26:42,170 --> 00:26:46,550
minimum supported TLS protocol using TLS

723
00:26:44,870 --> 00:26:49,760
minimum<font color="#CCCCCC"> support a protocol property in</font>

724
00:26:46,550 --> 00:26:51,770
the<font color="#E5E5E5"> NS oral session configuration but</font>

725
00:26:49,760 --> 00:26:53,960
you know it's probably a bit redundant

726
00:26:51,770 --> 00:26:56,810
once you use you know<font color="#CCCCCC"> 80s</font><font color="#E5E5E5"> rate once it</font>

727
00:26:53,960 --> 00:26:58,820
becomes mandatory<font color="#CCCCCC"> you know if you're</font>

728
00:26:56,810 --> 00:27:01,490
using<font color="#E5E5E5"> an azure connection there's no API</font>

729
00:26:58,820 --> 00:27:03,710
<font color="#E5E5E5">to set the minimum protocol but there's</font>

730
00:27:01,490 --> 00:27:05,390
<font color="#E5E5E5">lower level C functions in the older</font>

731
00:27:03,710 --> 00:27:08,350
core foundation<font color="#CCCCCC"> framework but it's</font><font color="#E5E5E5"> not</font>

732
00:27:05,390 --> 00:27:10,550
worth it<font color="#E5E5E5"> especially with a</font><font color="#CCCCCC"> TA 80s</font>

733
00:27:08,350 --> 00:27:12,439
cert validation you should always

734
00:27:10,550 --> 00:27:15,350
perform serve<font color="#E5E5E5"> ala</font><font color="#CCCCCC"> Dacian checks going</font>

735
00:27:12,440 --> 00:27:16,850
you know always<font color="#E5E5E5"> even if even in dev you</font>

736
00:27:15,350 --> 00:27:18,590
should really<font color="#E5E5E5"> do it</font><font color="#CCCCCC"> you get</font><font color="#E5E5E5"> three free</font>

737
00:27:16,850 --> 00:27:22,129
certs it's super easy

738
00:27:18,590 --> 00:27:25,010
so when apples with when<font color="#CCCCCC"> you using</font>

739
00:27:22,130 --> 00:27:27,110
<font color="#CCCCCC">apples frameworks it will</font><font color="#E5E5E5"> accept a</font>

740
00:27:25,010 --> 00:27:28,879
certificate if<font color="#CCCCCC"> it</font><font color="#E5E5E5"> signs by CA that's in</font>

741
00:27:27,110 --> 00:27:32,240
<font color="#E5E5E5">this in the trust all right</font>

742
00:27:28,880 --> 00:27:34,160
and so certificate validation checks are

743
00:27:32,240 --> 00:27:35,420
often overridden in development to avoid

744
00:27:34,160 --> 00:27:36,530
issues<font color="#E5E5E5"> with cell phone service because</font>

745
00:27:35,420 --> 00:27:38,380
people want<font color="#E5E5E5"> it don't want to deal</font><font color="#CCCCCC"> with</font>

746
00:27:36,530 --> 00:27:40,430
you know creating<font color="#CCCCCC"> certs</font><font color="#E5E5E5"> and development</font>

747
00:27:38,380 --> 00:27:42,470
<font color="#E5E5E5">typically this is encapsulated</font><font color="#CCCCCC"> and</font>

748
00:27:40,430 --> 00:27:43,850
<font color="#E5E5E5">variable somewhere or some other simple</font>

749
00:27:42,470 --> 00:27:45,830
logic which as we've seen<font color="#CCCCCC"> before can</font>

750
00:27:43,850 --> 00:27:47,149
easily be subverted<font color="#CCCCCC"> this is again in a</font>

751
00:27:45,830 --> 00:27:49,550
<font color="#E5E5E5">mobile banking out from on the big four</font>

752
00:27:47,150 --> 00:27:52,100
<font color="#E5E5E5">apps</font><font color="#CCCCCC"> big four banks</font><font color="#E5E5E5"> and you can see</font>

753
00:27:49,550 --> 00:27:54,169
<font color="#E5E5E5">there what I've highlighted is allow</font>

754
00:27:52,100 --> 00:27:57,439
<font color="#CCCCCC">untrusted significant as certificate is</font>

755
00:27:54,170 --> 00:27:59,390
a yes or<font color="#E5E5E5"> no</font><font color="#CCCCCC"> flap</font><font color="#E5E5E5"> right so and you can</font>

756
00:27:57,440 --> 00:28:00,920
easily<font color="#E5E5E5"> you can easily</font><font color="#CCCCCC"> bypass that</font><font color="#E5E5E5"> and</font>

757
00:27:59,390 --> 00:28:04,220
<font color="#E5E5E5">even the methods that check for it</font>

758
00:28:00,920 --> 00:28:07,370
allows allows<font color="#CCCCCC"> this and insecure</font>

759
00:28:04,220 --> 00:28:09,350
transporter untrusted certificate again

760
00:28:07,370 --> 00:28:14,030
as a<font color="#CCCCCC"> yes/no check right so</font><font color="#E5E5E5"> very easy to</font>

761
00:28:09,350 --> 00:28:15,409
<font color="#E5E5E5">patch up</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> avoid</font><font color="#CCCCCC"> having</font><font color="#E5E5E5"> to do this use</font>

762
00:28:14,030 --> 00:28:16,760
valid certs and development you know

763
00:28:15,410 --> 00:28:19,280
just get some free certs let's encrypt

764
00:28:16,760 --> 00:28:20,930
whatever<font color="#CCCCCC"> if you do need</font><font color="#E5E5E5"> to disable</font>

765
00:28:19,280 --> 00:28:22,670
validation<font color="#E5E5E5"> ensure that the production</font>

766
00:28:20,930 --> 00:28:25,400
builds essentially hard code the

767
00:28:22,670 --> 00:28:27,770
<font color="#E5E5E5">validation so don't have those sort of</font>

768
00:28:25,400 --> 00:28:30,020
switches in<font color="#CCCCCC"> your code</font><font color="#E5E5E5"> and consider</font>

769
00:28:27,770 --> 00:28:31,879
certificate pinning which is my<font color="#E5E5E5"> next</font>

770
00:28:30,020 --> 00:28:33,770
topic<font color="#E5E5E5"> so they're great mobile apps</font><font color="#CCCCCC"> of</font>

771
00:28:31,880 --> 00:28:35,270
<font color="#E5E5E5">great candidates for cert pinning</font><font color="#CCCCCC"> as</font>

772
00:28:33,770 --> 00:28:36,889
they only need<font color="#E5E5E5"> to communicate with a</font>

773
00:28:35,270 --> 00:28:39,080
small clearly defined<font color="#E5E5E5"> set of servers</font>

774
00:28:36,890 --> 00:28:41,000
<font color="#E5E5E5">certificates and printing greatly</font>

775
00:28:39,080 --> 00:28:42,500
improves security<font color="#E5E5E5"> by removing the need</font>

776
00:28:41,000 --> 00:28:44,440
<font color="#CCCCCC">to trust the certificate authorities</font>

777
00:28:42,500 --> 00:28:48,320
which as we've<font color="#CCCCCC"> seen many</font><font color="#E5E5E5"> times</font><font color="#CCCCCC"> before is</font>

778
00:28:44,440 --> 00:28:50,120
you<font color="#E5E5E5"> know not a good thing</font><font color="#CCCCCC"> I said condors</font>

779
00:28:48,320 --> 00:28:51,560
have a great library for implementing

780
00:28:50,120 --> 00:28:53,479
pinning so you don't<font color="#E5E5E5"> have to roll</font><font color="#CCCCCC"> your</font>

781
00:28:51,560 --> 00:28:56,360
<font color="#E5E5E5">own it's at the</font>

782
00:28:53,480 --> 00:28:57,350
<font color="#CCCCCC">CEL conservator on the github page it's</font>

783
00:28:56,360 --> 00:28:58,610
important<font color="#E5E5E5"> to remember</font><font color="#CCCCCC"> though when you're</font>

784
00:28:57,350 --> 00:29:00,350
putting<font color="#E5E5E5"> a certificate that</font><font color="#CCCCCC"> if you need</font>

785
00:28:58,610 --> 00:29:02,270
<font color="#E5E5E5">to revoke the certificate it will mean</font>

786
00:29:00,350 --> 00:29:03,709
an app update so you<font color="#E5E5E5"> have to be careful</font>

787
00:29:02,270 --> 00:29:05,540
with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and that can get you into</font>

788
00:29:03,710 --> 00:29:06,830
<font color="#CCCCCC">trouble if</font><font color="#E5E5E5"> you don't plan</font><font color="#CCCCCC"> for it</font><font color="#E5E5E5"> does</font>

789
00:29:05,540 --> 00:29:08,540
<font color="#E5E5E5">security</font><font color="#CCCCCC"> you're going to have to</font><font color="#E5E5E5"> burn</font>

790
00:29:06,830 --> 00:29:10,370
through<font color="#E5E5E5"> this pretty quickly but I think</font>

791
00:29:08,540 --> 00:29:12,710
we're good um so there are two types of

792
00:29:10,370 --> 00:29:15,199
<font color="#E5E5E5">data security</font><font color="#CCCCCC"> issues sensitive data that</font>

793
00:29:12,710 --> 00:29:17,570
<font color="#E5E5E5">store on device by the application that</font>

794
00:29:15,200 --> 00:29:20,330
was not<font color="#CCCCCC"> secured as secured appropriately</font>

795
00:29:17,570 --> 00:29:22,100
by the developer and unintended data

796
00:29:20,330 --> 00:29:23,928
leakage via system functionalities or

797
00:29:22,100 --> 00:29:25,879
cases and things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that so insecure</font>

798
00:29:23,929 --> 00:29:27,740
<font color="#CCCCCC">data storage</font><font color="#E5E5E5"> common to find sensitive</font>

799
00:29:25,880 --> 00:29:29,450
data stored in securely on the device<font color="#E5E5E5"> as</font>

800
00:29:27,740 --> 00:29:31,220
a general rule sensitive information

801
00:29:29,450 --> 00:29:33,230
should<font color="#E5E5E5"> not</font><font color="#CCCCCC"> be saw on the device at</font><font color="#E5E5E5"> all</font>

802
00:29:31,220 --> 00:29:35,000
if you can<font color="#CCCCCC"> help</font><font color="#E5E5E5"> it um so you should</font>

803
00:29:33,230 --> 00:29:36,260
really<font color="#E5E5E5"> need to consider the need to</font>

804
00:29:35,000 --> 00:29:38,720
source sensitive information on<font color="#E5E5E5"> the</font>

805
00:29:36,260 --> 00:29:40,309
device<font color="#CCCCCC"> generally it's functionally and</font>

806
00:29:38,720 --> 00:29:41,809
<font color="#E5E5E5">technically possible to</font><font color="#CCCCCC"> not store the</font>

807
00:29:40,309 --> 00:29:44,899
data at all<font color="#E5E5E5"> you store on the server and</font>

808
00:29:41,809 --> 00:29:48,440
you<font color="#E5E5E5"> can just like a web application get</font>

809
00:29:44,900 --> 00:29:50,360
it get it when you need<font color="#E5E5E5"> it</font><font color="#CCCCCC"> probably list</font>

810
00:29:48,440 --> 00:29:52,940
file<font color="#E5E5E5"> so don't source sensitive</font>

811
00:29:50,360 --> 00:29:55,280
information using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> user</font><font color="#E5E5E5"> default which</font>

812
00:29:52,940 --> 00:29:57,530
creates plist files and<font color="#CCCCCC"> the unencrypted</font>

813
00:29:55,280 --> 00:30:00,410
an easily bereaved<font color="#E5E5E5"> from the device or</font>

814
00:29:57,530 --> 00:30:02,059
backups so<font color="#E5E5E5"> I find all sorts of sensitive</font>

815
00:30:00,410 --> 00:30:04,640
things in the clear in properties files

816
00:30:02,059 --> 00:30:06,500
passwords session tokens<font color="#E5E5E5"> sensitive</font>

817
00:30:04,640 --> 00:30:09,320
configuration items PII is<font color="#E5E5E5"> that</font>

818
00:30:06,500 --> 00:30:11,299
something you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to protect against</font><font color="#E5E5E5"> so</font>

819
00:30:09,320 --> 00:30:13,730
you know definitely<font color="#E5E5E5"> be careful what</font>

820
00:30:11,299 --> 00:30:14,990
you're storing see provide data bases<font color="#CCCCCC"> so</font>

821
00:30:13,730 --> 00:30:17,150
avoid storing<font color="#E5E5E5"> sensitive information</font>

822
00:30:14,990 --> 00:30:19,250
<font color="#CCCCCC">sequel light databases</font><font color="#E5E5E5"> if at all</font>

823
00:30:17,150 --> 00:30:22,010
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> if you need to store sensitive</font>

824
00:30:19,250 --> 00:30:24,770
<font color="#CCCCCC">information encrypted</font><font color="#E5E5E5"> database using</font>

825
00:30:22,010 --> 00:30:27,679
sequel cipher I think sequel cipher<font color="#E5E5E5"> may</font>

826
00:30:24,770 --> 00:30:29,168
have<font color="#E5E5E5"> been on a vegan</font><font color="#CCCCCC"> cryptid</font><font color="#E5E5E5"> core data</font>

827
00:30:27,679 --> 00:30:31,460
as well<font color="#E5E5E5"> so if you are using Core Data</font>

828
00:30:29,169 --> 00:30:32,840
which sequel<font color="#E5E5E5"> cites for at least when I</font>

829
00:30:31,460 --> 00:30:35,480
wrote this didn't<font color="#E5E5E5"> support or know if it</font>

830
00:30:32,840 --> 00:30:37,520
does<font color="#CCCCCC"> um</font><font color="#E5E5E5"> the ims project that</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> was</font>

831
00:30:35,480 --> 00:30:40,160
project<font color="#CCCCCC"> I mentioned before</font><font color="#E5E5E5"> leverages</font>

832
00:30:37,520 --> 00:30:42,710
sequel<font color="#E5E5E5"> ciphers and</font><font color="#CCCCCC"> it works with Cortado</font>

833
00:30:40,160 --> 00:30:45,080
if you're using<font color="#E5E5E5"> that so</font><font color="#CCCCCC"> there on the</font>

834
00:30:42,710 --> 00:30:46,820
github page<font color="#E5E5E5"> to have bunch of modules the</font>

835
00:30:45,080 --> 00:30:47,990
data<font color="#E5E5E5"> protection API so if you need to</font>

836
00:30:46,820 --> 00:30:50,418
<font color="#E5E5E5">write files with sensitive information</font>

837
00:30:47,990 --> 00:30:52,610
<font color="#E5E5E5">to the device not credentials definitely</font>

838
00:30:50,419 --> 00:30:55,070
do don't write credentials<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the flat</font>

839
00:30:52,610 --> 00:30:57,668
file write files with<font color="#CCCCCC"> the appropriate</font>

840
00:30:55,070 --> 00:30:59,928
<font color="#E5E5E5">data protection attributes so you've got</font>

841
00:30:57,669 --> 00:31:01,520
if you don't<font color="#E5E5E5"> need to access the file on</font>

842
00:30:59,929 --> 00:31:03,530
<font color="#E5E5E5">the background so while the while the</font>

843
00:31:01,520 --> 00:31:05,460
device is sort<font color="#E5E5E5"> of you know</font><font color="#CCCCCC"> you know</font>

844
00:31:03,530 --> 00:31:06,779
<font color="#E5E5E5">locked</font><font color="#CCCCCC"> or in the</font><font color="#E5E5E5"> background</font><font color="#CCCCCC"> um</font>

845
00:31:05,460 --> 00:31:08,279
and<font color="#CCCCCC"> it's file protection complete if</font>

846
00:31:06,779 --> 00:31:09,929
you're using an install manager<font color="#E5E5E5"> and NS</font>

847
00:31:08,279 --> 00:31:14,250
data writing file complete<font color="#E5E5E5"> for NS data</font>

848
00:31:09,929 --> 00:31:15,990
<font color="#E5E5E5">is the attribution</font><font color="#CCCCCC"> eater</font><font color="#E5E5E5"> set with that</font>

849
00:31:14,250 --> 00:31:17,789
attribute set the file is encrypted on

850
00:31:15,990 --> 00:31:20,490
<font color="#E5E5E5">the</font><font color="#CCCCCC"> filesystem</font><font color="#E5E5E5"> and inaccessible when the</font>

851
00:31:17,789 --> 00:31:22,260
device is locked<font color="#E5E5E5"> if you do need to</font>

852
00:31:20,490 --> 00:31:24,059
access the file<font color="#E5E5E5"> in background use NS</font>

853
00:31:22,260 --> 00:31:26,279
file protection complete unless open and

854
00:31:24,059 --> 00:31:28,770
data writing file protection complete<font color="#E5E5E5"> or</font>

855
00:31:26,279 --> 00:31:30,059
<font color="#E5E5E5">less open</font><font color="#CCCCCC"> finish data the files</font>

856
00:31:28,770 --> 00:31:33,720
encrypted on the<font color="#CCCCCC"> filesystem and</font>

857
00:31:30,059 --> 00:31:35,639
inaccessible when closed<font color="#CCCCCC"> what like when</font>

858
00:31:33,720 --> 00:31:37,289
the file<font color="#E5E5E5"> is closed but when the device</font>

859
00:31:35,640 --> 00:31:38,700
<font color="#CCCCCC">is unlocked an app can maintain an open</font>

860
00:31:37,289 --> 00:31:40,350
handle to the file<font color="#CCCCCC"> even after it's</font>

861
00:31:38,700 --> 00:31:41,820
subsequently<font color="#E5E5E5"> locked however during this</font>

862
00:31:40,350 --> 00:31:43,969
time it will<font color="#E5E5E5"> not</font><font color="#CCCCCC"> be encrypted so you</font>

863
00:31:41,820 --> 00:31:46,500
just<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to you know</font><font color="#E5E5E5"> pick the right one</font>

864
00:31:43,970 --> 00:31:48,179
unintended data leakage so sensitive

865
00:31:46,500 --> 00:31:50,159
data captions<font color="#CCCCCC"> sort automatically by the</font>

866
00:31:48,179 --> 00:31:52,110
operating<font color="#E5E5E5"> system often developers aren't</font>

867
00:31:50,159 --> 00:31:54,360
<font color="#E5E5E5">aware that</font><font color="#CCCCCC"> our the OSS storing this</font>

868
00:31:52,110 --> 00:31:56,459
information<font color="#E5E5E5"> so there's a lot of you know</font>

869
00:31:54,360 --> 00:31:58,110
<font color="#E5E5E5">Donna leakage that occurs background</font>

870
00:31:56,460 --> 00:31:59,700
<font color="#E5E5E5">screenshot every time an application</font>

871
00:31:58,110 --> 00:32:01,500
suspended in the background<font color="#CCCCCC"> a snapshot</font>

872
00:31:59,700 --> 00:32:03,779
<font color="#E5E5E5">is taken to facilitate just a little</font>

873
00:32:01,500 --> 00:32:05,610
animation<font color="#E5E5E5"> at that pops up</font><font color="#CCCCCC"> it's sort</font>

874
00:32:03,779 --> 00:32:07,020
unencrypted in the app container and

875
00:32:05,610 --> 00:32:09,240
also<font color="#CCCCCC"> a few other locations in</font><font color="#E5E5E5"> the file</font>

876
00:32:07,020 --> 00:32:10,529
system<font color="#CCCCCC"> this</font><font color="#E5E5E5"> allows attackers to view the</font>

877
00:32:09,240 --> 00:32:12,029
last thing that the user<font color="#E5E5E5"> was looking at</font>

878
00:32:10,529 --> 00:32:14,730
when the application<font color="#CCCCCC"> was back rounded</font>

879
00:32:12,029 --> 00:32:16,649
<font color="#E5E5E5">and people sort of say well isn't this a</font>

880
00:32:14,730 --> 00:32:18,120
bit<font color="#E5E5E5"> of a</font><font color="#CCCCCC"> point-in-time</font><font color="#E5E5E5"> thing but if I've</font>

881
00:32:16,649 --> 00:32:19,408
got persistent access to your device I

882
00:32:18,120 --> 00:32:21,570
<font color="#E5E5E5">can just monitor that file and see the</font>

883
00:32:19,409 --> 00:32:23,010
changes and<font color="#CCCCCC"> get it and so you know over</font>

884
00:32:21,570 --> 00:32:24,330
time as you use the<font color="#CCCCCC"> app and</font><font color="#E5E5E5"> you your</font>

885
00:32:23,010 --> 00:32:26,429
back rounding it or you<font color="#E5E5E5"> get it you get a</font>

886
00:32:24,330 --> 00:32:27,889
call<font color="#CCCCCC"> or</font><font color="#E5E5E5"> something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you can</font>

887
00:32:26,429 --> 00:32:29,460
generally find sensitive information

888
00:32:27,890 --> 00:32:32,070
<font color="#E5E5E5">here's an example</font>

889
00:32:29,460 --> 00:32:34,500
<font color="#E5E5E5">that's Evernote that's the screenshot</font>

890
00:32:32,070 --> 00:32:36,360
that's captured that's not an<font color="#E5E5E5"> actual</font>

891
00:32:34,500 --> 00:32:39,210
device<font color="#E5E5E5"> screen shot that</font><font color="#CCCCCC"> I took and this</font>

892
00:32:36,360 --> 00:32:40,740
is a banking app as old old version<font color="#E5E5E5"> I</font>

893
00:32:39,210 --> 00:32:42,090
thought I<font color="#E5E5E5"> put that</font><font color="#CCCCCC"> up there instead of</font>

894
00:32:40,740 --> 00:32:45,950
<font color="#E5E5E5">my banking app because I don't have that</font>

895
00:32:42,090 --> 00:32:49,529
much money<font color="#CCCCCC"> in my back so so yeah</font><font color="#E5E5E5"> is that</font>

896
00:32:45,950 --> 00:32:50,880
<font color="#E5E5E5">so to fix that to address that price</font>

897
00:32:49,529 --> 00:32:52,350
content clearing code in the

898
00:32:50,880 --> 00:32:53,159
<font color="#CCCCCC">state-transition method so there's been</font>

899
00:32:52,350 --> 00:32:54,510
transmission

900
00:32:53,159 --> 00:32:56,309
transition methods that are called<font color="#E5E5E5"> when</font>

901
00:32:54,510 --> 00:32:58,039
<font color="#CCCCCC">your app</font><font color="#E5E5E5"> gets back rounded so</font>

902
00:32:56,309 --> 00:33:00,059
application did enter background

903
00:32:58,039 --> 00:33:01,830
<font color="#E5E5E5">application will resign active that's</font>

904
00:33:00,059 --> 00:33:03,510
when you get<font color="#CCCCCC"> a call</font><font color="#E5E5E5"> the simplest way to</font>

905
00:33:01,830 --> 00:33:04,980
clear the<font color="#E5E5E5"> screen contents is just to set</font>

906
00:33:03,510 --> 00:33:06,809
the<font color="#E5E5E5"> key windows</font><font color="#CCCCCC"> hidden property to yes</font>

907
00:33:04,980 --> 00:33:08,419
<font color="#E5E5E5">there's some sample code</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> that</font>

908
00:33:06,809 --> 00:33:10,678
<font color="#E5E5E5">pretty straightforward</font>

909
00:33:08,419 --> 00:33:12,179
<font color="#CCCCCC">be careful if there are other</font><font color="#E5E5E5"> views</font>

910
00:33:10,679 --> 00:33:13,950
behind the current<font color="#E5E5E5"> views though because</font>

911
00:33:12,179 --> 00:33:16,080
<font color="#E5E5E5">they may become visible</font><font color="#CCCCCC"> when the key</font>

912
00:33:13,950 --> 00:33:17,549
window<font color="#E5E5E5"> is hidden I'm sorry</font>

913
00:33:16,080 --> 00:33:18,310
you manually clearing sensitive info

914
00:33:17,549 --> 00:33:20,410
from the<font color="#E5E5E5"> current view</font>

915
00:33:18,310 --> 00:33:22,780
pain in the<font color="#CCCCCC"> ass</font><font color="#E5E5E5"> I wouldn't recommend it</font>

916
00:33:20,410 --> 00:33:24,370
placing the launching launch image in

917
00:33:22,780 --> 00:33:25,690
the foreground<font color="#CCCCCC"> so there's a launch image</font>

918
00:33:24,370 --> 00:33:27,159
that's<font color="#CCCCCC"> the first thing that</font><font color="#E5E5E5"> gets shown</font>

919
00:33:25,690 --> 00:33:29,020
<font color="#E5E5E5">up when the app is loading for the first</font>

920
00:33:27,160 --> 00:33:30,880
time<font color="#E5E5E5"> it hasn't been back rounded that's</font>

921
00:33:29,020 --> 00:33:34,120
very common and<font color="#CCCCCC"> that works well</font>

922
00:33:30,880 --> 00:33:36,520
a quick note the ignore snapshot<font color="#CCCCCC"> on next</font>

923
00:33:34,120 --> 00:33:37,929
application<font color="#E5E5E5"> launch will not prevent the</font>

924
00:33:36,520 --> 00:33:40,629
<font color="#E5E5E5">screenshot</font><font color="#CCCCCC"> from being taken a lot</font><font color="#E5E5E5"> of</font>

925
00:33:37,930 --> 00:33:43,120
developers mistakenly think<font color="#CCCCCC"> that but</font>

926
00:33:40,630 --> 00:33:44,410
yeah so URL catching so iOS

927
00:33:43,120 --> 00:33:45,820
automatically<font color="#CCCCCC"> caches requests and</font>

928
00:33:44,410 --> 00:33:48,070
responses for protocol<font color="#E5E5E5"> that's a poor</font>

929
00:33:45,820 --> 00:33:50,230
caching HTTP<font color="#CCCCCC"> HTTP and</font><font color="#E5E5E5"> sort some</font>

930
00:33:48,070 --> 00:33:51,970
unencrypted in a sequel<font color="#E5E5E5"> I'd database so</font>

931
00:33:50,230 --> 00:33:53,530
make sure you configure the<font color="#E5E5E5"> server to to</font>

932
00:33:51,970 --> 00:33:54,730
you know send the appropriate<font color="#CCCCCC"> case</font>

933
00:33:53,530 --> 00:33:57,550
control headers<font color="#CCCCCC"> because that's how it</font>

934
00:33:54,730 --> 00:33:59,470
works<font color="#CCCCCC"> you can also</font><font color="#E5E5E5"> control crashing on</font>

935
00:33:57,550 --> 00:34:01,030
the client if you want so finish<font color="#CCCCCC"> your L</font>

936
00:33:59,470 --> 00:34:03,970
connection you implement the connection

937
00:34:01,030 --> 00:34:05,680
<font color="#CCCCCC">will case response</font><font color="#E5E5E5"> delegate method</font><font color="#CCCCCC"> code</font>

938
00:34:03,970 --> 00:34:08,679
there that's off<font color="#CCCCCC"> Apple's documentation</font>

939
00:34:05,680 --> 00:34:10,060
so it's<font color="#CCCCCC"> available and then financial Rio</font>

940
00:34:08,679 --> 00:34:13,089
<font color="#CCCCCC">L session you said that URL catch</font>

941
00:34:10,060 --> 00:34:15,159
property<font color="#E5E5E5"> to</font><font color="#CCCCCC"> know logging less</font><font color="#E5E5E5"> of an</font>

942
00:34:13,090 --> 00:34:17,410
issue since<font color="#E5E5E5"> iOS</font><font color="#CCCCCC"> seven pre iOS</font><font color="#E5E5E5"> seven any</font>

943
00:34:15,159 --> 00:34:21,699
app had access to<font color="#E5E5E5"> the device logs</font><font color="#CCCCCC"> I've</font>

944
00:34:17,409 --> 00:34:24,279
and<font color="#CCCCCC"> review any any data</font><font color="#E5E5E5"> from other that</font>

945
00:34:21,699 --> 00:34:25,810
was logged<font color="#E5E5E5"> from other applications even</font>

946
00:34:24,280 --> 00:34:27,820
though it's<font color="#E5E5E5"> been fixed since iOS 7 which</font>

947
00:34:25,810 --> 00:34:29,139
<font color="#E5E5E5">is quite a while ago so a good</font><font color="#CCCCCC"> idea to</font>

948
00:34:27,820 --> 00:34:31,660
make<font color="#CCCCCC"> sure nothing sensitive is logged</font>

949
00:34:29,139 --> 00:34:34,120
you<font color="#CCCCCC"> must if you have to</font><font color="#E5E5E5"> log sensitive</font>

950
00:34:31,659 --> 00:34:36,040
information<font color="#E5E5E5"> dev for debug purposes or</font>

951
00:34:34,120 --> 00:34:38,259
whatever<font color="#E5E5E5"> just</font><font color="#CCCCCC"> make sure it's not push to</font>

952
00:34:36,040 --> 00:34:40,810
production<font color="#E5E5E5"> so maybe define</font><font color="#CCCCCC"> a pre process</font>

953
00:34:38,260 --> 00:34:43,180
<font color="#CCCCCC">and that grows</font><font color="#E5E5E5"> very slow or</font><font color="#CCCCCC"> whatever</font><font color="#E5E5E5"> the</font>

954
00:34:40,810 --> 00:34:45,549
<font color="#CCCCCC">pasteboard</font><font color="#E5E5E5"> we're getting there so</font><font color="#CCCCCC"> can</font>

955
00:34:43,179 --> 00:34:46,899
<font color="#E5E5E5">copy of</font><font color="#CCCCCC"> bus</font><font color="#E5E5E5"> patterns are tapped</font><font color="#CCCCCC"> you know</font>

956
00:34:45,550 --> 00:34:48,340
<font color="#E5E5E5">a cache copy of that data is stored in</font>

957
00:34:46,900 --> 00:34:50,200
the<font color="#E5E5E5"> devices clipboard</font><font color="#CCCCCC"> which is</font>

958
00:34:48,340 --> 00:34:54,550
accessible<font color="#E5E5E5"> from every other</font><font color="#CCCCCC"> application</font>

959
00:34:50,199 --> 00:34:56,020
in the in the on the phone and so if you

960
00:34:54,550 --> 00:34:57,850
have<font color="#CCCCCC"> sensitive data</font><font color="#E5E5E5"> you know you should</font>

961
00:34:56,020 --> 00:34:59,770
<font color="#CCCCCC">probably think about maybe disabling the</font>

962
00:34:57,850 --> 00:35:01,240
<font color="#CCCCCC">copy/paste functionality for sensitive</font>

963
00:34:59,770 --> 00:35:03,820
text fields note that it's<font color="#E5E5E5"> already done</font>

964
00:35:01,240 --> 00:35:06,009
by default<font color="#CCCCCC"> the password text</font><font color="#E5E5E5"> field</font><font color="#CCCCCC"> so</font>

965
00:35:03,820 --> 00:35:09,310
basically<font color="#E5E5E5"> to do that you</font>

966
00:35:06,010 --> 00:35:10,720
subclass uitextview and override<font color="#CCCCCC"> the can</font>

967
00:35:09,310 --> 00:35:12,400
perform action with sender methods<font color="#E5E5E5"> to</font>

968
00:35:10,720 --> 00:35:13,930
return no for any actions<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you don't</font>

969
00:35:12,400 --> 00:35:14,950
appear so when you when you copy and

970
00:35:13,930 --> 00:35:17,830
paste something<font color="#E5E5E5"> you see the little menu</font>

971
00:35:14,950 --> 00:35:19,629
<font color="#CCCCCC">that pops up doing this</font><font color="#E5E5E5"> for any</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> for</font>

972
00:35:17,830 --> 00:35:21,580
any action will just you<font color="#E5E5E5"> know take it</font>

973
00:35:19,630 --> 00:35:24,090
out of<font color="#E5E5E5"> that menu and</font><font color="#CCCCCC"> that code will</font>

974
00:35:21,580 --> 00:35:27,160
actually<font color="#CCCCCC"> just disable that entirely</font>

975
00:35:24,090 --> 00:35:29,020
<font color="#CCCCCC">autocorrect page or to facilitate</font>

976
00:35:27,160 --> 00:35:30,640
autocorrect it keeps a binary keyboard

977
00:35:29,020 --> 00:35:32,109
<font color="#CCCCCC">cache containing ordered phrases of text</font>

978
00:35:30,640 --> 00:35:34,480
<font color="#E5E5E5">into by the user</font>

979
00:35:32,109 --> 00:35:36,489
should turn autocorrect off in text

980
00:35:34,480 --> 00:35:38,980
fields whose input<font color="#E5E5E5"> your remain private</font>

981
00:35:36,489 --> 00:35:40,989
<font color="#E5E5E5">and you do that by setting</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> text</font>

982
00:35:38,980 --> 00:35:42,759
field<font color="#E5E5E5"> order correction type to</font><font color="#CCCCCC"> UI</font><font color="#E5E5E5"> text</font>

983
00:35:40,989 --> 00:35:45,400
or the correction type<font color="#E5E5E5"> no for sensitive</font>

984
00:35:42,759 --> 00:35:47,499
<font color="#E5E5E5">tax</font><font color="#CCCCCC"> cells</font><font color="#E5E5E5"> crypto getting cryptography</font>

985
00:35:45,400 --> 00:35:49,509
right<font color="#E5E5E5"> in mobile apps is difficult the</font>

986
00:35:47,499 --> 00:35:51,249
primary challenge is key management<font color="#E5E5E5"> most</font>

987
00:35:49,509 --> 00:35:53,440
apps fall prey to storing the key with

988
00:35:51,249 --> 00:35:55,538
the lock<font color="#CCCCCC"> you need to use a key</font>

989
00:35:53,440 --> 00:35:57,640
derivation function<font color="#E5E5E5"> if you want</font><font color="#CCCCCC"> to do</font>

990
00:35:55,539 --> 00:35:59,109
that<font color="#E5E5E5"> don't hard-code an encryption key</font>

991
00:35:57,640 --> 00:36:01,598
in the binary it's going to be<font color="#E5E5E5"> easily</font>

992
00:35:59,109 --> 00:36:03,400
retrieved by running strings or you know

993
00:36:01,599 --> 00:36:04,690
if it's stored<font color="#E5E5E5"> in a variable</font><font color="#CCCCCC"> you know do</font>

994
00:36:03,400 --> 00:36:06,819
the runtime techniques I showed you

995
00:36:04,690 --> 00:36:08,799
before<font color="#CCCCCC"> I'm storing encryption key</font><font color="#E5E5E5"> in the</font>

996
00:36:06,819 --> 00:36:10,839
key<font color="#CCCCCC"> chain is</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> secured</font><font color="#E5E5E5"> on compromised</font>

997
00:36:08,799 --> 00:36:12,038
devices<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> shouldn't</font><font color="#E5E5E5"> do that</font><font color="#CCCCCC"> you can</font>

998
00:36:10,839 --> 00:36:13,900
access<font color="#E5E5E5"> the</font><font color="#CCCCCC"> keychain</font><font color="#E5E5E5"> quite easily on</font>

999
00:36:12,039 --> 00:36:16,569
compromised<font color="#CCCCCC"> devices on compromised</font>

1000
00:36:13,900 --> 00:36:17,950
device<font color="#CCCCCC"> they can also be retrieve from</font>

1001
00:36:16,569 --> 00:36:19,930
memory I mentioned as mentioned if<font color="#E5E5E5"> you</font>

1002
00:36:17,950 --> 00:36:21,939
store them<font color="#E5E5E5"> in variables white key from</font>

1003
00:36:19,930 --> 00:36:24,190
memory were not<font color="#E5E5E5"> needed obviously I'm</font>

1004
00:36:21,940 --> 00:36:25,989
using<font color="#E5E5E5"> key derivation function to derive</font>

1005
00:36:24,190 --> 00:36:27,940
the key to use to<font color="#E5E5E5"> encrypt the master key</font>

1006
00:36:25,989 --> 00:36:29,769
should<font color="#E5E5E5"> be based on secret inputs such as</font>

1007
00:36:27,940 --> 00:36:32,470
<font color="#E5E5E5">the user's password don't use a</font>

1008
00:36:29,769 --> 00:36:34,089
<font color="#E5E5E5">cryptographic hash of the</font><font color="#CCCCCC"> key like don't</font>

1009
00:36:32,470 --> 00:36:36,430
just use a<font color="#E5E5E5"> cryptographic hash to the key</font>

1010
00:36:34,089 --> 00:36:38,499
<font color="#CCCCCC">use a sensible salt as</font><font color="#E5E5E5"> well such as</font>

1011
00:36:36,430 --> 00:36:41,919
<font color="#CCCCCC">identify offender which is like a unique</font>

1012
00:36:38,499 --> 00:36:43,269
UID for your app and<font color="#CCCCCC"> please I've got a</font>

1013
00:36:41,920 --> 00:36:44,680
couple minutes<font color="#E5E5E5"> so I think I might</font><font color="#CCCCCC"> make</font>

1014
00:36:43,269 --> 00:36:45,910
it<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> it shouldn't have to tell</font>

1015
00:36:44,680 --> 00:36:48,098
<font color="#E5E5E5">this group but don't use any of those</font>

1016
00:36:45,910 --> 00:36:50,348
insecure algorithms<font color="#E5E5E5"> for anything</font><font color="#CCCCCC"> really</font>

1017
00:36:48,099 --> 00:36:52,329
<font color="#CCCCCC">I mean</font><font color="#E5E5E5"> other than you know stuff</font><font color="#CCCCCC"> that's</font>

1018
00:36:50,349 --> 00:36:54,609
<font color="#E5E5E5">not related to sensitive information</font><font color="#CCCCCC"> and</font>

1019
00:36:52,329 --> 00:36:56,650
custom encryption algorithms don't<font color="#E5E5E5"> do it</font>

1020
00:36:54,609 --> 00:36:59,049
<font color="#CCCCCC">I mean that's a jewelled advice like</font>

1021
00:36:56,650 --> 00:37:01,180
seriously<font color="#CCCCCC"> thing don't</font><font color="#E5E5E5"> do it</font>

1022
00:36:59,049 --> 00:37:04,509
cool so I've got a couple of<font color="#E5E5E5"> minutes so</font>

1023
00:37:01,180 --> 00:37:06,549
<font color="#CCCCCC">I do have time for</font><font color="#E5E5E5"> QA that's my</font><font color="#CCCCCC"> twitter</font>

1024
00:37:04,509 --> 00:37:08,230
handle if you want to tweet at<font color="#CCCCCC"> me</font><font color="#E5E5E5"> and I</font>

1025
00:37:06,549 --> 00:37:09,489
do have a<font color="#E5E5E5"> blog that I haven't updated in</font>

1026
00:37:08,230 --> 00:37:11,019
years so I don't<font color="#CCCCCC"> know why I bother</font>

1027
00:37:09,489 --> 00:37:14,259
putting up there but if anybody has any

1028
00:37:11,019 --> 00:37:19,109
<font color="#E5E5E5">questions I'm</font><font color="#CCCCCC"> available got like one</font>

1029
00:37:14,259 --> 00:37:21,130
<font color="#CCCCCC">minute I think is everyone's brain fried</font>

1030
00:37:19,109 --> 00:37:22,538
<font color="#E5E5E5">I'll try to put these</font><font color="#CCCCCC"> slides up</font>

1031
00:37:21,130 --> 00:37:25,059
somewhere because<font color="#E5E5E5"> I know I went</font><font color="#CCCCCC"> through</font>

1032
00:37:22,539 --> 00:37:28,180
them pretty<font color="#E5E5E5"> quickly</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if anybody's</font>

1033
00:37:25,059 --> 00:37:31,040
interested<font color="#E5E5E5"> yeah can we please thank</font>

1034
00:37:28,180 --> 00:37:34,319
Michael awesome

1035
00:37:31,040 --> 00:37:34,320
[Applause]

