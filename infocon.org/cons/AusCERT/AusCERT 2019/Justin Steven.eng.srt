1
00:00:00,030 --> 00:00:06,470
so can we give Justin a round of

2
00:00:01,740 --> 00:00:08,459
applause please thank you very much Luke

3
00:00:06,470 --> 00:00:10,110
so I'm really excited to share with you

4
00:00:08,460 --> 00:00:12,599
today some thoughts and feelings I have

5
00:00:10,110 --> 00:00:15,509
on the security of software development

6
00:00:12,599 --> 00:00:17,460
software so a little bit about me I'm an

7
00:00:15,509 --> 00:00:19,980
application security dude so I work with

8
00:00:17,460 --> 00:00:21,990
doing source code review static and

9
00:00:19,980 --> 00:00:23,369
dynamic applications security assessment

10
00:00:21,990 --> 00:00:25,830
things to do with bugs and

11
00:00:23,369 --> 00:00:28,230
vulnerabilities and exploits in my spare

12
00:00:25,830 --> 00:00:30,330
time I enjoy playing CTF finding bugs

13
00:00:28,230 --> 00:00:32,850
and attempting to occasionally write

14
00:00:30,330 --> 00:00:35,339
exploits and these days very seldomly

15
00:00:32,850 --> 00:00:37,110
do I stream on Twitch but what I do it's

16
00:00:35,340 --> 00:00:40,260
a lot of fun i stream kind of the live

17
00:00:37,110 --> 00:00:43,019
solution of CTF challenges and binary

18
00:00:40,260 --> 00:00:44,370
exploitation stuff it's a lot of fun I'd

19
00:00:43,020 --> 00:00:47,070
like to stress that I'm not a developer

20
00:00:44,370 --> 00:00:49,379
nor buy Everdeen nor am I an operating

21
00:00:47,070 --> 00:00:51,480
adversary a pen tester or a red teamer

22
00:00:49,379 --> 00:00:53,789
so I do have some thoughts to share on

23
00:00:51,480 --> 00:00:56,218
both of these worlds things like how a

24
00:00:53,789 --> 00:00:58,289
software development soft software dart

25
00:00:56,219 --> 00:01:00,420
and software sometimes insecure or

26
00:00:58,289 --> 00:01:01,980
vulnerable and I've got some thoughts on

27
00:01:00,420 --> 00:01:04,650
how this might be used to harm or

28
00:01:01,980 --> 00:01:06,570
compromise a company but I don't kind of

29
00:01:04,650 --> 00:01:08,880
have the experience from there this all

30
00:01:06,570 --> 00:01:11,820
comes from the more application security

31
00:01:08,880 --> 00:01:13,649
background also this is not like a sec

32
00:01:11,820 --> 00:01:16,020
DevOps talk this is not how to secure

33
00:01:13,650 --> 00:01:17,970
your organization's software it's more

34
00:01:16,020 --> 00:01:19,679
about bugs in tools they're used to

35
00:01:17,970 --> 00:01:23,070
build software so maybe you'll be happy

36
00:01:19,680 --> 00:01:25,619
about that maybe not well it's kind of

37
00:01:23,070 --> 00:01:27,298
cut off and sucks but it's me I look

38
00:01:25,619 --> 00:01:29,280
there's really bad habit of breaking my

39
00:01:27,299 --> 00:01:30,840
own tools so I'll be doing work and I'll

40
00:01:29,280 --> 00:01:32,970
get kind of bored and think about how

41
00:01:30,840 --> 00:01:34,590
can i exploit the software that's used

42
00:01:32,970 --> 00:01:35,850
in my own tool chain and if you're

43
00:01:34,590 --> 00:01:37,829
getting started with vulnerability

44
00:01:35,850 --> 00:01:38,908
discovery and bug hunting I'd encourage

45
00:01:37,829 --> 00:01:40,408
you to start with the tools you are

46
00:01:38,909 --> 00:01:41,310
familiar with all the tools that are

47
00:01:40,409 --> 00:01:43,320
used in your industry

48
00:01:41,310 --> 00:01:45,030
you kind of get that home home team

49
00:01:43,320 --> 00:01:46,740
advantage you know the software already

50
00:01:45,030 --> 00:01:48,840
and also it helps you reason about the

51
00:01:46,740 --> 00:01:50,309
attack surface of you your colleagues or

52
00:01:48,840 --> 00:01:54,509
industry so it's a really good place to

53
00:01:50,310 --> 00:01:56,100
get started so what will we cover today

54
00:01:54,509 --> 00:01:58,140
we'll start off with what do I mean when

55
00:01:56,100 --> 00:01:59,490
I say software development software I'll

56
00:01:58,140 --> 00:02:01,320
have a quick chat about why I think

57
00:01:59,490 --> 00:02:03,479
people who use this software are

58
00:02:01,320 --> 00:02:05,100
particularly interesting targets will

59
00:02:03,479 --> 00:02:07,110
then walk through the discovery and

60
00:02:05,100 --> 00:02:08,878
exploitation of vulnerabilities in two

61
00:02:07,110 --> 00:02:10,500
different pieces of software and we'll

62
00:02:08,878 --> 00:02:12,179
close with you know is this a risk and

63
00:02:10,500 --> 00:02:12,990
if so what sort of things can we do

64
00:02:12,180 --> 00:02:17,670
about it

65
00:02:12,990 --> 00:02:20,550
I just realized my slides are super cut

66
00:02:17,670 --> 00:02:22,019
off this is going to be fun so when I

67
00:02:20,550 --> 00:02:22,980
say software development software what

68
00:02:22,020 --> 00:02:24,720
I'm talking about

69
00:02:22,980 --> 00:02:27,209
other tools used to build software the

70
00:02:24,720 --> 00:02:30,450
tools used to write compile and deliver

71
00:02:27,210 --> 00:02:33,000
software this is super cut off that's

72
00:02:30,450 --> 00:02:34,200
awesome so the first set of tools I

73
00:02:33,000 --> 00:02:36,750
think about when I think of this type of

74
00:02:34,200 --> 00:02:41,609
software is your IDE or your integrated

75
00:02:36,750 --> 00:02:43,970
development environment what can I do to

76
00:02:41,610 --> 00:02:43,970
fix this

77
00:02:48,260 --> 00:02:51,160
oh come on

78
00:02:54,910 --> 00:03:00,160
that'll do so your IDE it's kinda like a

79
00:02:58,180 --> 00:03:02,020
fancy text editor it's a it's a source

80
00:03:00,160 --> 00:03:04,570
code editor with syntax highlighting and

81
00:03:02,020 --> 00:03:05,830
other quality of life aspects to it but

82
00:03:04,570 --> 00:03:07,209
then there's also a bunch of helper

83
00:03:05,830 --> 00:03:08,620
tools and these are the little bits and

84
00:03:07,210 --> 00:03:10,120
pieces that kind of support your

85
00:03:08,620 --> 00:03:12,820
software development activities such as

86
00:03:10,120 --> 00:03:14,620
running your tests pulling in

87
00:03:12,820 --> 00:03:16,090
third-party dependencies pushing your

88
00:03:14,620 --> 00:03:17,770
source codes that shared source code

89
00:03:16,090 --> 00:03:20,020
control all those little bits and pieces

90
00:03:17,770 --> 00:03:22,210
in your tool chain and then there's the

91
00:03:20,020 --> 00:03:23,890
the CI CD software or the build pipeline

92
00:03:22,210 --> 00:03:25,720
software that runs on a centralized

93
00:03:23,890 --> 00:03:27,790
server test the software builds of

94
00:03:25,720 --> 00:03:30,970
software and often these days deploys it

95
00:03:27,790 --> 00:03:32,410
to production so in an organization this

96
00:03:30,970 --> 00:03:34,390
is kind of what that looks like for

97
00:03:32,410 --> 00:03:36,250
those who may not be familiar up the top

98
00:03:34,390 --> 00:03:37,899
we have our developer workstation our

99
00:03:36,250 --> 00:03:40,270
developer the bread-and-butter tool is

100
00:03:37,900 --> 00:03:43,750
an IDE in which code is developed and

101
00:03:40,270 --> 00:03:45,580
pushed into a git repository the code

102
00:03:43,750 --> 00:03:48,160
then flows to the build pipeline or it's

103
00:03:45,580 --> 00:03:49,720
built tested and then in many cases

104
00:03:48,160 --> 00:03:51,760
these days shipped straight to

105
00:03:49,720 --> 00:03:53,530
production and there's also this cheap

106
00:03:51,760 --> 00:03:54,940
little back-channel as well going from

107
00:03:53,530 --> 00:03:56,890
the developer workstation straight to

108
00:03:54,940 --> 00:04:00,160
prod and we'll talk more about that in a

109
00:03:56,890 --> 00:04:02,140
moment so today I'm choosing to focus on

110
00:04:00,160 --> 00:04:04,030
the developer workstation and thinking

111
00:04:02,140 --> 00:04:06,070
how could an external adversary

112
00:04:04,030 --> 00:04:08,200
compromise a developer's workstation

113
00:04:06,070 --> 00:04:12,070
based on vulnerabilities in developer

114
00:04:08,200 --> 00:04:13,450
tools and what can happen from there so

115
00:04:12,070 --> 00:04:15,190
if we think of these tools in kind of

116
00:04:13,450 --> 00:04:16,329
this sort of flow this is something that

117
00:04:15,190 --> 00:04:18,399
many people here are probably familiar

118
00:04:16,329 --> 00:04:20,620
with where you pull down some source

119
00:04:18,399 --> 00:04:23,229
code off the internet you CD into that

120
00:04:20,620 --> 00:04:25,510
directory you read the code hopefully

121
00:04:23,230 --> 00:04:28,360
you read the code build the code and run

122
00:04:25,510 --> 00:04:29,500
the code and if we think about the ways

123
00:04:28,360 --> 00:04:31,330
in which this can go wrong for us

124
00:04:29,500 --> 00:04:33,160
there's a pretty clear way in which

125
00:04:31,330 --> 00:04:34,840
something could go bad and that's when

126
00:04:33,160 --> 00:04:37,330
you run the code if you've just pulled

127
00:04:34,840 --> 00:04:39,429
any old nonsense off its github built it

128
00:04:37,330 --> 00:04:41,320
and run it that's a chance that there's

129
00:04:39,430 --> 00:04:43,000
malware in the code or some sort of

130
00:04:41,320 --> 00:04:45,250
malicious activity that will compromise

131
00:04:43,000 --> 00:04:46,660
your workstation but if we start to step

132
00:04:45,250 --> 00:04:48,550
back through this process and look at

133
00:04:46,660 --> 00:04:51,010
the tools involved at each step there

134
00:04:48,550 --> 00:04:53,500
are other surprising attack surfaces for

135
00:04:51,010 --> 00:04:54,820
example building software maybe you were

136
00:04:53,500 --> 00:04:56,170
considering building the software but

137
00:04:54,820 --> 00:04:59,260
not running in and thinking that was

138
00:04:56,170 --> 00:05:00,940
safe well in many cases the build script

139
00:04:59,260 --> 00:05:03,669
or the build manifest such as a make

140
00:05:00,940 --> 00:05:05,740
file can actually have malware embedded

141
00:05:03,669 --> 00:05:07,299
the innit I mean a make file is just a

142
00:05:05,740 --> 00:05:08,800
fancy shell script change my mind

143
00:05:07,300 --> 00:05:10,569
so there could be kind of anything in

144
00:05:08,800 --> 00:05:12,819
there that'll just download and run some

145
00:05:10,569 --> 00:05:15,400
sort of payload so it's not necessarily

146
00:05:12,819 --> 00:05:17,289
a safe action what about reading the

147
00:05:15,400 --> 00:05:20,650
code well mean we've never had bugs in

148
00:05:17,289 --> 00:05:23,080
document viewers right so surely viewing

149
00:05:20,650 --> 00:05:24,758
text files in an IDE is safe well we'll

150
00:05:23,080 --> 00:05:27,849
dig into this a little bit shortly and

151
00:05:24,759 --> 00:05:29,860
how about seeding into a directory like

152
00:05:27,849 --> 00:05:32,529
in a shell like Shirley's CD is pretty

153
00:05:29,860 --> 00:05:36,159
safe well some developer tools actually

154
00:05:32,529 --> 00:05:38,650
cook in to your CD and do things based

155
00:05:36,159 --> 00:05:40,289
on the directory your CD into and we'll

156
00:05:38,650 --> 00:05:42,969
dig into one of these as well and

157
00:05:40,289 --> 00:05:44,529
finally the git clone there's been a

158
00:05:42,969 --> 00:05:47,199
history of vulnerabilities in the git

159
00:05:44,529 --> 00:05:51,490
client itself so that can be enough to

160
00:05:47,199 --> 00:05:52,779
get you owned as I said will be kind of

161
00:05:51,490 --> 00:05:54,819
drilling into these two steps in

162
00:05:52,779 --> 00:05:56,409
particular today but there's a lot of

163
00:05:54,819 --> 00:05:57,759
kind of surprising attack surface when

164
00:05:56,409 --> 00:05:59,529
you start to pull together the tools

165
00:05:57,759 --> 00:06:02,770
involved in something that might be

166
00:05:59,529 --> 00:06:04,210
fairly routine to you so we've covered

167
00:06:02,770 --> 00:06:05,680
what do I mean when I say software

168
00:06:04,210 --> 00:06:07,060
development software it's taking a

169
00:06:05,680 --> 00:06:09,310
minute to think about why would we want

170
00:06:07,060 --> 00:06:13,689
to target someone who uses software

171
00:06:09,310 --> 00:06:15,550
development tooling there's the kind of

172
00:06:13,689 --> 00:06:17,259
obvious case to me of intellectual

173
00:06:15,550 --> 00:06:19,300
property theft and the confidentiality

174
00:06:17,259 --> 00:06:21,580
of source code but what might be

175
00:06:19,300 --> 00:06:24,129
surprising to some is that in at least

176
00:06:21,580 --> 00:06:26,919
some if not many organizations there's a

177
00:06:24,129 --> 00:06:29,050
kind of culture of openness among the

178
00:06:26,919 --> 00:06:30,520
staff so there's discrete development

179
00:06:29,050 --> 00:06:32,620
teams but it's often the case that

180
00:06:30,520 --> 00:06:34,719
anyone development team has at least

181
00:06:32,620 --> 00:06:36,520
read-only access to the entire company's

182
00:06:34,719 --> 00:06:38,620
source code or at least a large chunk of

183
00:06:36,520 --> 00:06:40,180
it so if you're able to add as an

184
00:06:38,620 --> 00:06:41,979
adversary compromised one software

185
00:06:40,180 --> 00:06:43,870
developer you can at least get read

186
00:06:41,979 --> 00:06:45,639
access to all the source code pull it

187
00:06:43,870 --> 00:06:47,860
down that could be what you're after

188
00:06:45,639 --> 00:06:50,050
kind of an economic or intellectual

189
00:06:47,860 --> 00:06:51,759
property impact but you could also then

190
00:06:50,050 --> 00:06:53,289
start to read the code and look for bugs

191
00:06:51,759 --> 00:06:54,969
and then move across and attack

192
00:06:53,289 --> 00:06:56,680
production systems so the

193
00:06:54,969 --> 00:06:59,979
confidentiality of code is one reason to

194
00:06:56,680 --> 00:07:02,919
target developers see if we're going to

195
00:06:59,979 --> 00:07:04,839
realign these slides there we go

196
00:07:02,919 --> 00:07:06,399
how about the global supply chain right

197
00:07:04,839 --> 00:07:07,800
this has been pretty hot the last couple

198
00:07:06,399 --> 00:07:10,300
of years it's only going to get hotter

199
00:07:07,800 --> 00:07:12,219
but if you can compromise a developer at

200
00:07:10,300 --> 00:07:15,360
an organization there's the integrity

201
00:07:12,219 --> 00:07:17,039
aspect you know can you modify the code

202
00:07:15,360 --> 00:07:19,110
introduce malicious functionality or

203
00:07:17,039 --> 00:07:21,090
introduce mourner abilities or could you

204
00:07:19,110 --> 00:07:23,129
modify the build process in the build

205
00:07:21,090 --> 00:07:27,169
infrastructure to start to kind of at

206
00:07:23,129 --> 00:07:29,250
compile time put malware in the bills in

207
00:07:27,169 --> 00:07:31,500
an era of DevOps

208
00:07:29,250 --> 00:07:33,419
it's often the case that developers are

209
00:07:31,500 --> 00:07:34,860
systems administrators at least for the

210
00:07:33,419 --> 00:07:37,318
systems that support the software that

211
00:07:34,860 --> 00:07:39,120
they arrive so if you find yourself on a

212
00:07:37,319 --> 00:07:40,020
developer machine there's a lot of

213
00:07:39,120 --> 00:07:41,759
things I think you would find

214
00:07:40,020 --> 00:07:44,580
interesting but take for example the

215
00:07:41,759 --> 00:07:47,669
shell history SSH key and the AWS

216
00:07:44,580 --> 00:07:49,469
credentials this could be enough to be

217
00:07:47,669 --> 00:07:51,840
starting to give that organization some

218
00:07:49,469 --> 00:07:52,889
heartache in a pretty bad day so it's

219
00:07:51,840 --> 00:07:54,929
often the case that developers have

220
00:07:52,889 --> 00:07:56,759
access to production infrastructure so

221
00:07:54,930 --> 00:07:58,949
they can support the deployment and

222
00:07:56,759 --> 00:08:01,580
operation of their software and that

223
00:07:58,949 --> 00:08:03,900
makes them pretty good targets as well

224
00:08:01,580 --> 00:08:05,609
so that's what what do I mean when I say

225
00:08:03,900 --> 00:08:07,109
software development software and why

226
00:08:05,610 --> 00:08:09,240
are some of the users of this software

227
00:08:07,110 --> 00:08:10,830
particularly interesting targets so I

228
00:08:09,240 --> 00:08:12,659
now really like to walk you through how

229
00:08:10,830 --> 00:08:15,000
I stumbled across some vulnerabilities

230
00:08:12,659 --> 00:08:16,740
in software development software and the

231
00:08:15,000 --> 00:08:18,180
process by which I understood the

232
00:08:16,740 --> 00:08:20,669
vulnerability and produced a

233
00:08:18,180 --> 00:08:23,539
proof-of-concept exploit for them it

234
00:08:20,669 --> 00:08:27,109
will start off with Ruby version manager

235
00:08:23,539 --> 00:08:30,150
so ruby version manager is first of all

236
00:08:27,110 --> 00:08:32,940
it's not part of the core ruby product

237
00:08:30,150 --> 00:08:35,250
it's the third-party kind of in the Ruby

238
00:08:32,940 --> 00:08:37,649
ecosystem tool but it's a very popular

239
00:08:35,250 --> 00:08:39,510
tool and what it's used to do is it's

240
00:08:37,649 --> 00:08:44,179
used to support multiple versions of

241
00:08:39,510 --> 00:08:45,870
Ruby on a developer's workstation and

242
00:08:44,179 --> 00:08:48,329
funnily enough the Metasploit

243
00:08:45,870 --> 00:08:50,430
development environment setup guide

244
00:08:48,329 --> 00:08:54,000
recommends it users or developers

245
00:08:50,430 --> 00:08:56,339
install either our VM or our BN they're

246
00:08:54,000 --> 00:08:57,810
both a very similar tool so there's a

247
00:08:56,339 --> 00:08:59,640
lot of exploit developers out there in

248
00:08:57,810 --> 00:09:01,560
the world with potentially our VM on

249
00:08:59,640 --> 00:09:04,350
their machines which i think is kind of

250
00:09:01,560 --> 00:09:07,140
interesting and how does our VM work

251
00:09:04,350 --> 00:09:09,570
when you install our VM it pokes itself

252
00:09:07,140 --> 00:09:10,980
into your shell profile so that every

253
00:09:09,570 --> 00:09:13,860
single time you launch a term and a lot

254
00:09:10,980 --> 00:09:17,490
launch a shell our VM is loaded into

255
00:09:13,860 --> 00:09:19,920
that shell and from then on when you CD

256
00:09:17,490 --> 00:09:22,050
into a directory that is a ruby project

257
00:09:19,920 --> 00:09:23,670
a VM kind of pokes its head out and says

258
00:09:22,050 --> 00:09:25,109
hey looks like you're seeing into a ruby

259
00:09:23,670 --> 00:09:26,550
project do you want to install the

260
00:09:25,110 --> 00:09:27,660
version of Ruby that this project

261
00:09:26,550 --> 00:09:29,069
requires

262
00:09:27,660 --> 00:09:31,230
kind of like the clipping of the Ruby

263
00:09:29,070 --> 00:09:32,520
world and it helps you install that

264
00:09:31,230 --> 00:09:36,000
version of Ruby to your home directory

265
00:09:32,520 --> 00:09:39,390
and from then on every time you CD into

266
00:09:36,000 --> 00:09:42,000
a ruby project kind of magically and

267
00:09:39,390 --> 00:09:43,980
behind the scenes a VM will like stitch

268
00:09:42,000 --> 00:09:46,590
up your environment so that you're using

269
00:09:43,980 --> 00:09:49,380
a different version of Ruby in your

270
00:09:46,590 --> 00:09:51,540
dollar path and it's kind of magic how

271
00:09:49,380 --> 00:09:54,660
it does this and magic things can

272
00:09:51,540 --> 00:09:56,640
sometimes be interesting so for a while

273
00:09:54,660 --> 00:09:59,430
us thinking to myself I wonder how our

274
00:09:56,640 --> 00:10:01,920
VM does this how does our VM know when

275
00:09:59,430 --> 00:10:03,900
I'm seeding into a ruby project and how

276
00:10:01,920 --> 00:10:06,060
is it kind of juggling things in my

277
00:10:03,900 --> 00:10:08,819
shell to change the version of Ruby that

278
00:10:06,060 --> 00:10:10,199
I'll be running and then I proceeded to

279
00:10:08,820 --> 00:10:12,630
not look into it for quite a while until

280
00:10:10,200 --> 00:10:14,910
one day I was doing some shell scripting

281
00:10:12,630 --> 00:10:17,970
and I had turned on the set minus X

282
00:10:14,910 --> 00:10:19,500
option in my shell and the set minus X

283
00:10:17,970 --> 00:10:21,390
option what it does is every time your

284
00:10:19,500 --> 00:10:23,640
shell does something it kind of prints a

285
00:10:21,390 --> 00:10:26,340
line it's a trace of every single thing

286
00:10:23,640 --> 00:10:30,689
happening inside bash in the course of

287
00:10:26,340 --> 00:10:32,220
processing that thing so I did CD to

288
00:10:30,690 --> 00:10:33,840
some directory and normally you know a

289
00:10:32,220 --> 00:10:36,390
set minus X would show one thing I'm

290
00:10:33,840 --> 00:10:39,180
doing a CD but on this day it like

291
00:10:36,390 --> 00:10:42,380
pooped out a whole bunch of stuff picked

292
00:10:39,180 --> 00:10:45,329
out a whole bunch of internal RVM stuff

293
00:10:42,380 --> 00:10:47,570
at first I was kind of a bit shocked and

294
00:10:45,330 --> 00:10:50,880
and I was a bit happy about this I

295
00:10:47,570 --> 00:10:53,280
realized that our VM was hooking CD and

296
00:10:50,880 --> 00:10:55,380
every time I ran CD in my shell which I

297
00:10:53,280 --> 00:10:56,730
do quite often because I think they

298
00:10:55,380 --> 00:10:59,550
think the terminal makes you faster it

299
00:10:56,730 --> 00:11:01,920
probably doesn't but anyway every time I

300
00:10:59,550 --> 00:11:03,870
was running CD our VM was behind the

301
00:11:01,920 --> 00:11:06,060
scenes going where are you going what

302
00:11:03,870 --> 00:11:10,050
are you doing is this a ruby project can

303
00:11:06,060 --> 00:11:11,609
I help you with this so I started

304
00:11:10,050 --> 00:11:14,670
digging through the code so I grabbed

305
00:11:11,610 --> 00:11:16,260
for kind of like dot Ruby - version

306
00:11:14,670 --> 00:11:19,260
which is I know one of the metadata

307
00:11:16,260 --> 00:11:21,930
files that that Ruby uses to specify for

308
00:11:19,260 --> 00:11:24,569
our Ruby project users to specify which

309
00:11:21,930 --> 00:11:25,979
version of Ruby is looking for and I

310
00:11:24,570 --> 00:11:27,630
came across this chunk of code and

311
00:11:25,980 --> 00:11:29,490
hopefully that's readable if not all

312
00:11:27,630 --> 00:11:33,030
these slides already online so don't

313
00:11:29,490 --> 00:11:36,840
stress too much and in the handling of

314
00:11:33,030 --> 00:11:38,370
the versions can't file I noticed there

315
00:11:36,840 --> 00:11:40,340
was some some sort of section that was

316
00:11:38,370 --> 00:11:42,530
dealing with environment variables

317
00:11:40,340 --> 00:11:45,950
so I thought to myself okay if

318
00:11:42,530 --> 00:11:48,650
inversions dot-com file can specify

319
00:11:45,950 --> 00:11:50,480
environment variables can I like poke

320
00:11:48,650 --> 00:11:53,000
random stuff into someone's environment

321
00:11:50,480 --> 00:11:57,140
if they CD into a directory with this

322
00:11:53,000 --> 00:12:00,080
file in it then I kind of like sprinkled

323
00:11:57,140 --> 00:12:01,699
like you know fairy dust all through the

324
00:12:00,080 --> 00:12:03,050
code all these like little debug print

325
00:12:01,700 --> 00:12:04,940
statements so that I could follow the

326
00:12:03,050 --> 00:12:06,319
bouncing ball and make sure I was kind

327
00:12:04,940 --> 00:12:08,210
of tracking through the code and looking

328
00:12:06,320 --> 00:12:09,590
at the right thing this is really good

329
00:12:08,210 --> 00:12:11,690
if you like me and don't know how to use

330
00:12:09,590 --> 00:12:13,580
a debugger just like print I'm here all

331
00:12:11,690 --> 00:12:16,760
through the code and follow the bouncing

332
00:12:13,580 --> 00:12:18,350
ball and I ended up in this region of

333
00:12:16,760 --> 00:12:20,920
code that was actually handling the

334
00:12:18,350 --> 00:12:23,000
contents of the dot versions confer file

335
00:12:20,920 --> 00:12:25,490
and I saw down the bottom there that

336
00:12:23,000 --> 00:12:27,170
there was a export something equals

337
00:12:25,490 --> 00:12:29,360
something which suggested that yes

338
00:12:27,170 --> 00:12:32,000
indeed I did have the ability based on

339
00:12:29,360 --> 00:12:34,850
the versions file to put arbitrary stuff

340
00:12:32,000 --> 00:12:37,340
into the environment of the process that

341
00:12:34,850 --> 00:12:39,980
the shell was running in and I also

342
00:12:37,340 --> 00:12:41,870
thought eval that's kind of interesting

343
00:12:39,980 --> 00:12:44,120
because if I could get a back tick or a

344
00:12:41,870 --> 00:12:44,960
dollar bracket into the string that was

345
00:12:44,120 --> 00:12:49,250
getting eval

346
00:12:44,960 --> 00:12:51,110
I'd have two vulnerabilities and earlier

347
00:12:49,250 --> 00:12:52,550
in the bouncing ball of the code there

348
00:12:51,110 --> 00:12:55,280
was a line that was attempting to

349
00:12:52,550 --> 00:12:57,589
sanitize the contents of the versions

350
00:12:55,280 --> 00:12:59,270
dot can't file what I was doing was I

351
00:12:57,590 --> 00:13:01,400
was looking for back ticks or dollar

352
00:12:59,270 --> 00:13:04,400
bracket and it was dropping a backslash

353
00:13:01,400 --> 00:13:06,199
in front of it to escape it but what it

354
00:13:04,400 --> 00:13:08,000
wasn't doing was it wasn't putting back

355
00:13:06,200 --> 00:13:10,760
slashes in front of any of my back

356
00:13:08,000 --> 00:13:12,860
slashes which meant that if I put my own

357
00:13:10,760 --> 00:13:15,110
backslash in front of the dollar bracket

358
00:13:12,860 --> 00:13:16,760
then our VM would put a backslash in

359
00:13:15,110 --> 00:13:18,470
front of the dollar bracket and the two

360
00:13:16,760 --> 00:13:20,450
backslashes we cancel each other out

361
00:13:18,470 --> 00:13:22,130
this is a classic vulnerability for

362
00:13:20,450 --> 00:13:24,470
anyone who's dealt with exploiting

363
00:13:22,130 --> 00:13:27,830
sequel injection bugs that have a poor

364
00:13:24,470 --> 00:13:29,030
escaping engine put in front of them so

365
00:13:27,830 --> 00:13:30,770
let's quickly have a look at these two

366
00:13:29,030 --> 00:13:33,199
vulnerabilities and what they actually

367
00:13:30,770 --> 00:13:34,910
look like when you're kind of exploring

368
00:13:33,200 --> 00:13:37,220
the concept and then exploiting the

369
00:13:34,910 --> 00:13:39,380
vulnerability so if here you got a

370
00:13:37,220 --> 00:13:44,270
docker container running an old version

371
00:13:39,380 --> 00:13:47,260
of RDM we'll just make a POC directory

372
00:13:44,270 --> 00:13:47,260
and pop into it

373
00:13:47,900 --> 00:13:55,040
and then create a dot versions confiar

374
00:13:51,110 --> 00:13:57,650
and set the ruby version to be system so

375
00:13:55,040 --> 00:14:01,779
our vm doesn't complain and if we then

376
00:13:57,650 --> 00:14:06,500
do environment you know foo equals bar

377
00:14:01,779 --> 00:14:09,260
save that nope save that and if we then

378
00:14:06,500 --> 00:14:12,680
CD actually will just quickly nothing up

379
00:14:09,260 --> 00:14:14,210
the sleeve echo dollar food the food

380
00:14:12,680 --> 00:14:16,550
environment variables currently not set

381
00:14:14,210 --> 00:14:20,360
if we just CD into the directory we're

382
00:14:16,550 --> 00:14:22,550
already in it will trigger our vm dollar

383
00:14:20,360 --> 00:14:24,200
food we can put whatever we want in the

384
00:14:22,550 --> 00:14:25,910
food environment variables so this is

385
00:14:24,200 --> 00:14:28,100
that but number one where we get

386
00:14:25,910 --> 00:14:29,660
arbitrary environment control so from

387
00:14:28,100 --> 00:14:31,670
here i know there's at least a few ways

388
00:14:29,660 --> 00:14:34,550
to go from environment control to code

389
00:14:31,670 --> 00:14:39,110
execution and the avenue down which i

390
00:14:34,550 --> 00:14:43,819
went was to set the ps1 environment

391
00:14:39,110 --> 00:14:45,620
variable ps1 is normally kind of like

392
00:14:43,820 --> 00:14:47,240
this format string that specifies what

393
00:14:45,620 --> 00:14:48,680
the user's prompt should look like so

394
00:14:47,240 --> 00:14:50,390
they can put the time they can put the

395
00:14:48,680 --> 00:14:53,540
date they can put their user name and

396
00:14:50,390 --> 00:14:54,980
you can customize your own prompt so if

397
00:14:53,540 --> 00:14:58,370
we set someone's environment variable

398
00:14:54,980 --> 00:15:02,300
ps1 to be the old value of PS 1 followed

399
00:14:58,370 --> 00:15:02,959
by dollar bracket ID we will run the ID

400
00:15:02,300 --> 00:15:04,579
command

401
00:15:02,959 --> 00:15:06,410
now our vm is going to come along and

402
00:15:04,580 --> 00:15:07,490
sanitize this as i said it'll put a

403
00:15:06,410 --> 00:15:09,199
backslash in front of that dollar

404
00:15:07,490 --> 00:15:12,860
bracket but that doesn't matter because

405
00:15:09,200 --> 00:15:14,480
when - evaluates its ps1 environment

406
00:15:12,860 --> 00:15:17,120
variable it will do a second layer of

407
00:15:14,480 --> 00:15:19,130
shell interpolation and even though that

408
00:15:17,120 --> 00:15:23,660
backslash will be there it'll still pop

409
00:15:19,130 --> 00:15:26,720
anyway so if we save that file CD out of

410
00:15:23,660 --> 00:15:28,339
the directory CD back in you can see we

411
00:15:26,720 --> 00:15:32,660
can run arbitrary commands as soon as

412
00:15:28,339 --> 00:15:35,450
someone's CDs into our directory so the

413
00:15:32,660 --> 00:15:37,160
second bug the backslash is if we go

414
00:15:35,450 --> 00:15:39,830
back to I'm just commenting these out by

415
00:15:37,160 --> 00:15:42,650
the way forget back to the food case

416
00:15:39,830 --> 00:15:47,810
there we go you know ba dollar bracket

417
00:15:42,650 --> 00:15:49,250
ID our VM is gonna put a backslash in

418
00:15:47,810 --> 00:15:51,199
front of it and that will result in it

419
00:15:49,250 --> 00:15:54,020
being escaped so if we have a quick look

420
00:15:51,200 --> 00:15:56,900
at what this would look like CD dot

421
00:15:54,020 --> 00:15:59,600
echoed dollar foo then it's literally

422
00:15:56,900 --> 00:16:01,370
dollar bracket ID you know we don't get

423
00:15:59,600 --> 00:16:03,980
that eval injection will

424
00:16:01,370 --> 00:16:05,720
looking for because our VM is putting

425
00:16:03,980 --> 00:16:08,210
that backslash there but if we put our

426
00:16:05,720 --> 00:16:10,220
own backslash there first when our VM

427
00:16:08,210 --> 00:16:11,720
puts another one there the two

428
00:16:10,220 --> 00:16:13,490
backslashes the first one will escape

429
00:16:11,720 --> 00:16:16,040
the second one and the dollar bracket

430
00:16:13,490 --> 00:16:19,839
will survive so let's just leave one of

431
00:16:16,040 --> 00:16:22,760
those backslash in save the file

432
00:16:19,839 --> 00:16:24,920
echo dollar foo and we've got another

433
00:16:22,760 --> 00:16:26,839
opportunity to inject arbitrary commands

434
00:16:24,920 --> 00:16:29,089
as soon as someone's CDs into the

435
00:16:26,839 --> 00:16:31,040
directory and the person the user

436
00:16:29,089 --> 00:16:33,080
doesn't need to actually echo foo for

437
00:16:31,040 --> 00:16:36,680
this to pop up if we just go and shove

438
00:16:33,080 --> 00:16:39,680
this in to standard error CD out of the

439
00:16:36,680 --> 00:16:42,109
directory and CD into it we can run

440
00:16:39,680 --> 00:16:49,310
after equalizes as soon as a CD into the

441
00:16:42,110 --> 00:16:51,170
directory so a quick recap kind of

442
00:16:49,310 --> 00:16:52,459
started off with a bit of a hunch and a

443
00:16:51,170 --> 00:16:54,709
bit of you know breaking my own tools

444
00:16:52,460 --> 00:16:58,070
and thinking how does our VM actually

445
00:16:54,710 --> 00:16:59,839
achieve this rewiring of the Rubies on

446
00:16:58,070 --> 00:17:02,690
the fly based on me

447
00:16:59,839 --> 00:17:04,550
seeding around my filesystem and I was

448
00:17:02,690 --> 00:17:05,030
like oh wow there's a lot of set minus X

449
00:17:04,550 --> 00:17:07,040
output

450
00:17:05,030 --> 00:17:09,649
it's obviously cooking CD and doing a

451
00:17:07,040 --> 00:17:11,000
lot of things behind the scenes so I

452
00:17:09,650 --> 00:17:13,189
gripped the code to find where it was

453
00:17:11,000 --> 00:17:14,510
passing these files and then followed

454
00:17:13,189 --> 00:17:16,699
the bouncing ball through the code to

455
00:17:14,510 --> 00:17:18,530
find the eval injection and the

456
00:17:16,699 --> 00:17:23,089
arbitrary control of the environment

457
00:17:18,530 --> 00:17:28,339
variables so I'm moving on to Visual

458
00:17:23,089 --> 00:17:30,470
Studio code Visual Studio code is an IDE

459
00:17:28,339 --> 00:17:32,780
it's a really really fancy text editor

460
00:17:30,470 --> 00:17:34,429
syntax highlighting it has integration

461
00:17:32,780 --> 00:17:36,290
with a debugger but I should probably

462
00:17:34,429 --> 00:17:38,120
learn how to use it's got integration

463
00:17:36,290 --> 00:17:40,399
with a compiler and it's got all these

464
00:17:38,120 --> 00:17:44,199
nice things that make cutting code much

465
00:17:40,400 --> 00:17:44,200
more pleasant than just using notepad so

466
00:17:44,830 --> 00:17:50,689
one day I was reading the vs code

467
00:17:47,570 --> 00:17:53,178
documentation as I do I don't get out

468
00:17:50,690 --> 00:17:55,130
much and I saw that vs code had a

469
00:17:53,179 --> 00:17:57,500
feature called workspace settings and

470
00:17:55,130 --> 00:17:59,900
the workspace settings allowed a

471
00:17:57,500 --> 00:18:02,210
development team to all agree on tabs

472
00:17:59,900 --> 00:18:04,400
versus spaces through a configuration

473
00:18:02,210 --> 00:18:07,340
file that they checked into their code

474
00:18:04,400 --> 00:18:11,510
project so that every time anyone opened

475
00:18:07,340 --> 00:18:12,889
up that code project in vs code some

476
00:18:11,510 --> 00:18:14,240
settings would be applied automatically

477
00:18:12,890 --> 00:18:18,980
so everyone was on this

478
00:18:14,240 --> 00:18:21,830
and page in this remind me of a bug that

479
00:18:18,980 --> 00:18:25,370
was a little bit before my time in vim

480
00:18:21,830 --> 00:18:27,290
so vim has this thing called mode lines

481
00:18:25,370 --> 00:18:30,469
that I think are disabled by default now

482
00:18:27,290 --> 00:18:33,770
because of stuff like this there was the

483
00:18:30,470 --> 00:18:35,720
ability to put special comments into a

484
00:18:33,770 --> 00:18:39,050
text file or a source code file and

485
00:18:35,720 --> 00:18:41,510
whenever you open that file up in vim it

486
00:18:39,050 --> 00:18:43,190
would help the team agree on tabs versus

487
00:18:41,510 --> 00:18:47,120
spaces and so on it would reconfigure

488
00:18:43,190 --> 00:18:49,400
parts of vim for that file and then some

489
00:18:47,120 --> 00:18:51,439
people found out or that there was the

490
00:18:49,400 --> 00:18:52,910
ability to run arbitrary code when you

491
00:18:51,440 --> 00:18:55,400
just opened up a text file in of them

492
00:18:52,910 --> 00:18:57,620
which is awesome and so I think it's got

493
00:18:55,400 --> 00:19:00,800
disabled by default and this bug I'm

494
00:18:57,620 --> 00:19:04,429
sure they attached but I thought to

495
00:19:00,800 --> 00:19:07,940
myself if vim had this error up until

496
00:19:04,430 --> 00:19:09,080
2002 or so what about vs code there's a

497
00:19:07,940 --> 00:19:10,970
lot of attack surface in the

498
00:19:09,080 --> 00:19:14,060
reconfiguration of an application based

499
00:19:10,970 --> 00:19:16,010
on a text file in a code project I

500
00:19:14,060 --> 00:19:20,450
wonder if there's any dangerous knobs or

501
00:19:16,010 --> 00:19:21,920
dials I could turn based on that file so

502
00:19:20,450 --> 00:19:23,570
how to look through these settings that

503
00:19:21,920 --> 00:19:25,640
you could reconfigure based on the

504
00:19:23,570 --> 00:19:27,620
workspace settings within a code project

505
00:19:25,640 --> 00:19:30,530
and I saw that there was the ability to

506
00:19:27,620 --> 00:19:33,860
reconfigure the path to the get binary

507
00:19:30,530 --> 00:19:36,230
and get is the the the client software

508
00:19:33,860 --> 00:19:38,750
that helps you push and pull code from

509
00:19:36,230 --> 00:19:41,720
code repositories and I knew that vs Co

510
00:19:38,750 --> 00:19:43,670
heavily relied on git it would actually

511
00:19:41,720 --> 00:19:46,340
run git every time I opened up a code

512
00:19:43,670 --> 00:19:49,610
project because if I opened up a git

513
00:19:46,340 --> 00:19:51,649
based project in vs code I got all these

514
00:19:49,610 --> 00:19:54,379
decorations and history markings and

515
00:19:51,650 --> 00:19:56,120
stuff and I knew that git was being run

516
00:19:54,380 --> 00:19:59,270
by code I thought this was a pretty

517
00:19:56,120 --> 00:20:01,610
interesting Avenue to explore so I

518
00:19:59,270 --> 00:20:03,650
started off by reconfiguring the get

519
00:20:01,610 --> 00:20:07,189
path to be the string Zed Zed Zed Zed

520
00:20:03,650 --> 00:20:09,050
and then Iran s tres sorry I ran vs code

521
00:20:07,190 --> 00:20:10,990
under s tres to look at all the system

522
00:20:09,050 --> 00:20:13,220
calls that were being made by BS code

523
00:20:10,990 --> 00:20:14,630
and it's allowed me to see all of the

524
00:20:13,220 --> 00:20:17,810
child processes that were being kicked

525
00:20:14,630 --> 00:20:18,770
off and I saw that vs code was trying to

526
00:20:17,810 --> 00:20:22,870
run the program

527
00:20:18,770 --> 00:20:22,870
Zed Zed Zed Zed in my path

528
00:20:23,500 --> 00:20:27,730
I then through a whole bunch of spaces

529
00:20:25,330 --> 00:20:29,260
and meta-characters and semicolons and

530
00:20:27,730 --> 00:20:30,820
dollar brackets thinking can I just like

531
00:20:29,260 --> 00:20:32,940
straight up with like a shell one-liner

532
00:20:30,820 --> 00:20:36,129
in here and just execute whatever I want

533
00:20:32,940 --> 00:20:38,710
but s tres was showing me that no my

534
00:20:36,130 --> 00:20:40,780
path was being walked to try and find a

535
00:20:38,710 --> 00:20:42,850
binary literally called this mess of

536
00:20:40,780 --> 00:20:46,000
characters so I wasn't reaching like a

537
00:20:42,850 --> 00:20:47,980
system style think I was reaching an

538
00:20:46,000 --> 00:20:49,960
exec style sinker and this was really

539
00:20:47,980 --> 00:20:52,539
important to notice because otherwise I

540
00:20:49,960 --> 00:20:54,970
risked just jamming a shell Don liner in

541
00:20:52,539 --> 00:20:56,830
there popping BS code going at didn't

542
00:20:54,970 --> 00:20:59,320
work and moving on to play fortnight or

543
00:20:56,830 --> 00:21:00,820
something but by understanding the

544
00:20:59,320 --> 00:21:02,350
primitive I was working with I knew that

545
00:21:00,820 --> 00:21:04,240
the reason why nothing would be

546
00:21:02,350 --> 00:21:05,860
happening was not because there wasn't a

547
00:21:04,240 --> 00:21:10,539
bug but because I wasn't holding it

548
00:21:05,860 --> 00:21:12,850
properly so I set the get path to be

549
00:21:10,539 --> 00:21:16,150
true which according to the man pages

550
00:21:12,850 --> 00:21:18,370
does nothing successfully and I saw that

551
00:21:16,150 --> 00:21:22,659
vs code was running true - - version

552
00:21:18,370 --> 00:21:25,090
true Rev paths true status so on and so

553
00:21:22,659 --> 00:21:27,250
forth these are all get sub commands

554
00:21:25,090 --> 00:21:30,490
that you'd normally do like and get rev

555
00:21:27,250 --> 00:21:33,280
pars get status and instead the s code

556
00:21:30,490 --> 00:21:35,710
was using the true binary and when I set

557
00:21:33,280 --> 00:21:37,000
the get path to be false which according

558
00:21:35,710 --> 00:21:40,030
to the man page does nothing

559
00:21:37,000 --> 00:21:42,549
unsuccessfully it was only doing false -

560
00:21:40,030 --> 00:21:46,510
- version and giving up so I could see

561
00:21:42,549 --> 00:21:49,360
that if any of the attempts by V s code

562
00:21:46,510 --> 00:21:52,059
to run and get using the path I told it

563
00:21:49,360 --> 00:21:54,969
to any of those attempts fail and it got

564
00:21:52,059 --> 00:21:56,200
like a nonzero exit status back it would

565
00:21:54,970 --> 00:22:00,909
it would give up and go I'm not going to

566
00:21:56,200 --> 00:22:03,070
try and run get any more and the last

567
00:22:00,909 --> 00:22:05,590
thing I did was wrote a small terrible

568
00:22:03,070 --> 00:22:09,070
shell script that whenever it was run it

569
00:22:05,590 --> 00:22:11,260
would log to a file how it was run it

570
00:22:09,070 --> 00:22:14,070
would log the arguments given to it and

571
00:22:11,260 --> 00:22:17,799
it would log the directory from which

572
00:22:14,070 --> 00:22:22,570
the process was executing it or the CWD

573
00:22:17,799 --> 00:22:24,190
or PWD and I saw that the - - version

574
00:22:22,570 --> 00:22:25,840
was just being done from wherever the

575
00:22:24,190 --> 00:22:29,620
user was sitting in their shell at the

576
00:22:25,840 --> 00:22:31,899
time but the the Rev paths argument and

577
00:22:29,620 --> 00:22:33,639
only the Rev passed argument was being

578
00:22:31,899 --> 00:22:36,830
done from the directory that the source

579
00:22:33,640 --> 00:22:39,019
code tree was in so that was also

580
00:22:36,830 --> 00:22:43,039
interesting so this is what I was

581
00:22:39,019 --> 00:22:45,140
working with vs code was doing something

582
00:22:43,039 --> 00:22:47,950
- - version where I can control the

583
00:22:45,140 --> 00:22:51,350
something based on this config file and

584
00:22:47,950 --> 00:22:54,230
if that's succeeded it would then do a

585
00:22:51,350 --> 00:22:56,750
CD of chuder into that directory and

586
00:22:54,230 --> 00:22:59,539
then it would do my something rev pars

587
00:22:56,750 --> 00:23:03,590
did it succeed if so keep going down the

588
00:22:59,539 --> 00:23:04,820
rabbit hole if not give up so I wanted

589
00:23:03,590 --> 00:23:06,529
to do two things I wanted to do

590
00:23:04,820 --> 00:23:09,799
something naughty and I wanted to do

591
00:23:06,529 --> 00:23:11,630
something naughty before a nonzero exit

592
00:23:09,799 --> 00:23:13,668
code was returned by the sub process

593
00:23:11,630 --> 00:23:16,639
attempt otherwise the chain breaks and I

594
00:23:13,669 --> 00:23:20,380
can't do my naughty stuff and I thought

595
00:23:16,639 --> 00:23:23,120
what if I set the get path to be bash

596
00:23:20,380 --> 00:23:26,870
because then vs code will do bash - -

597
00:23:23,120 --> 00:23:29,840
version ruled out succeed turns out yeah

598
00:23:26,870 --> 00:23:33,350
bash - - version returns zero - thumbs

599
00:23:29,840 --> 00:23:36,590
up because then vs code would do bash

600
00:23:33,350 --> 00:23:38,658
rev pars from inside the directory with

601
00:23:36,590 --> 00:23:39,918
all the source code in it at which point

602
00:23:38,659 --> 00:23:42,260
if I've got a shell script they're

603
00:23:39,919 --> 00:23:44,419
called rev pars - will be used to

604
00:23:42,260 --> 00:23:46,129
interpret that shell script and then I

605
00:23:44,419 --> 00:23:48,980
can run whatever shell commands I want

606
00:23:46,130 --> 00:23:51,529
and drop a Bitcoin miner or or what have

607
00:23:48,980 --> 00:23:54,500
you so let's have a quick look at what

608
00:23:51,529 --> 00:23:55,789
this looks like so here I've got another

609
00:23:54,500 --> 00:23:57,649
doctor container and running an old

610
00:23:55,789 --> 00:23:59,629
version on vs code by the way those are

611
00:23:57,649 --> 00:24:02,658
VM bugs got patched and this has also

612
00:23:59,630 --> 00:24:06,830
been patched so an old version of vs

613
00:24:02,659 --> 00:24:11,210
code will make our pocket directory CD

614
00:24:06,830 --> 00:24:12,949
in - it will make our BS code directory

615
00:24:11,210 --> 00:24:15,970
which is the directory within which the

616
00:24:12,950 --> 00:24:15,970
settings file has to be

617
00:24:17,600 --> 00:24:21,860
and we'll edit the settings on JSON file

618
00:24:20,330 --> 00:24:29,449
inside that directory which is these

619
00:24:21,860 --> 00:24:35,629
workspace settings will set the get path

620
00:24:29,450 --> 00:24:37,790
to be - and we'll create that Rev path

621
00:24:35,630 --> 00:24:44,000
file and that Rev path file is the file

622
00:24:37,790 --> 00:24:47,000
that will be run within bash so we'll do

623
00:24:44,000 --> 00:24:49,160
the classic open up a calculator and

624
00:24:47,000 --> 00:24:57,790
then we'll echo you know code execution

625
00:24:49,160 --> 00:25:00,950
as the user to a file called win and

626
00:24:57,790 --> 00:25:03,230
then we'll exit one if we exit one that

627
00:25:00,950 --> 00:25:08,450
will break that chain of es code trying

628
00:25:03,230 --> 00:25:11,810
to use bash instead of get so what have

629
00:25:08,450 --> 00:25:13,640
we got we got this settings file that

630
00:25:11,810 --> 00:25:18,110
says hey vias code don't bother using

631
00:25:13,640 --> 00:25:20,540
get use bash instead and then we have

632
00:25:18,110 --> 00:25:23,300
this Rev pass file which will be run by

633
00:25:20,540 --> 00:25:28,820
- when vs code is attempting to use bash

634
00:25:23,300 --> 00:25:31,430
instead of give so if we open this this

635
00:25:28,820 --> 00:25:39,320
code tree or this this directory up in

636
00:25:31,430 --> 00:25:41,300
vs code we get the calculator and we get

637
00:25:39,320 --> 00:25:44,060
a file on disk I should have checked if

638
00:25:41,300 --> 00:25:49,270
it existed before I promise you it

639
00:25:44,060 --> 00:25:53,360
didn't code so we deleted the file

640
00:25:49,270 --> 00:25:54,650
calculator pops up and our temple in the

641
00:25:53,360 --> 00:25:56,240
file is there to show that we can

642
00:25:54,650 --> 00:26:02,210
execute whatever we want at this point

643
00:25:56,240 --> 00:26:03,890
in time so another quick recap what did

644
00:26:02,210 --> 00:26:05,690
we do it's kind of started off with a

645
00:26:03,890 --> 00:26:06,860
hunch you know reading the documentation

646
00:26:05,690 --> 00:26:08,810
which by the way is actually a really

647
00:26:06,860 --> 00:26:10,100
good way to find bugs a lot of the bugs

648
00:26:08,810 --> 00:26:12,280
in the world aren't actually bugs if

649
00:26:10,100 --> 00:26:14,389
their features just used interestingly

650
00:26:12,280 --> 00:26:15,680
so I started by reading the manual on

651
00:26:14,390 --> 00:26:17,480
saying wait a minute one of these

652
00:26:15,680 --> 00:26:19,760
workspace settings didn't vim have a

653
00:26:17,480 --> 00:26:21,350
problem with this a while ago and then

654
00:26:19,760 --> 00:26:22,790
understanding the primitive and using s

655
00:26:21,350 --> 00:26:24,830
trace to kind of have a peek at what's

656
00:26:22,790 --> 00:26:26,899
going on under the hood when v/s code

657
00:26:24,830 --> 00:26:28,399
tries to run get and then kind of

658
00:26:26,900 --> 00:26:28,790
understand that primitive more and more

659
00:26:28,400 --> 00:26:31,640
and more

660
00:26:28,790 --> 00:26:33,470
and then mapping out the flow and

661
00:26:31,640 --> 00:26:35,799
thinking what could I set the get path

662
00:26:33,470 --> 00:26:38,750
to to achieve arbitrary code execution

663
00:26:35,799 --> 00:26:40,820
my solution ended up being bash it's

664
00:26:38,750 --> 00:26:43,010
probably others and this is all done on

665
00:26:40,820 --> 00:26:45,470
Linux by the way because again I'm

666
00:26:43,010 --> 00:26:49,280
annoying and break my own toys and I use

667
00:26:45,470 --> 00:26:51,830
Linux like a crazy person so putting it

668
00:26:49,280 --> 00:26:53,450
all together these two bugs you know the

669
00:26:51,830 --> 00:26:55,250
little proof of concept of editing a

670
00:26:53,450 --> 00:26:58,100
text file and seeing and seeing stuff

671
00:26:55,250 --> 00:27:01,030
pop up is I think interesting but what

672
00:26:58,100 --> 00:27:03,500
what a more real-world attack look like

673
00:27:01,030 --> 00:27:05,540
you know could we convince some victim

674
00:27:03,500 --> 00:27:09,340
to obtain some source code maybe we say

675
00:27:05,540 --> 00:27:12,020
hey you should climb this using git and

676
00:27:09,340 --> 00:27:13,730
then expect that they'll CD into that

677
00:27:12,020 --> 00:27:15,799
source code tree and then maybe use

678
00:27:13,730 --> 00:27:19,520
Visual Studio code to read the code that

679
00:27:15,799 --> 00:27:21,379
we've just suggested that they clone so

680
00:27:19,520 --> 00:27:26,600
we've got one last demo to show what

681
00:27:21,380 --> 00:27:30,380
this might look like so now we've got

682
00:27:26,600 --> 00:27:32,299
two docker containers on the right hand

683
00:27:30,380 --> 00:27:34,790
side we've got the attacker container

684
00:27:32,299 --> 00:27:38,629
with four different windows open on the

685
00:27:34,790 --> 00:27:40,220
Left we have a victim container the

686
00:27:38,630 --> 00:27:41,360
attack is running three different netcat

687
00:27:40,220 --> 00:27:43,940
listeners because we're hacking like

688
00:27:41,360 --> 00:27:45,678
it's the 90s and just one little Python

689
00:27:43,940 --> 00:27:49,360
web server to serve up the source code

690
00:27:45,679 --> 00:27:52,720
and the victim received an email

691
00:27:49,360 --> 00:27:56,418
suggesting that the victim clones a

692
00:27:52,720 --> 00:28:00,100
source code project using git so let's

693
00:27:56,419 --> 00:28:02,750
say the victim clones out using the git

694
00:28:00,100 --> 00:28:05,719
and we get some sweet ASCII yards it

695
00:28:02,750 --> 00:28:07,910
gets cut off there we go this is not my

696
00:28:05,720 --> 00:28:10,700
bug this is a git vulnerability from

697
00:28:07,910 --> 00:28:12,919
last year in which if you get cloned

698
00:28:10,700 --> 00:28:14,720
stuff recursively a vulnerable version

699
00:28:12,919 --> 00:28:17,030
of git will just straight up in some

700
00:28:14,720 --> 00:28:19,490
cases run arbitrary code based on like a

701
00:28:17,030 --> 00:28:21,440
crafted git repository up the top right

702
00:28:19,490 --> 00:28:25,010
here the attack has received the first

703
00:28:21,440 --> 00:28:27,140
of three reverse shells then the victim

704
00:28:25,010 --> 00:28:29,059
goes to CD into the directory of code

705
00:28:27,140 --> 00:28:30,950
they just cloned totally not malicious

706
00:28:29,059 --> 00:28:33,918
and if we watch this netcat listener

707
00:28:30,950 --> 00:28:37,010
here we get another shell and that was

708
00:28:33,919 --> 00:28:39,310
just our VM hooking CD and there being a

709
00:28:37,010 --> 00:28:42,910
malicious file in that directory

710
00:28:39,310 --> 00:28:45,190
and finally the victim then launches

711
00:28:42,910 --> 00:28:48,340
Visual Studio code against that

712
00:28:45,190 --> 00:28:51,660
directory of source code and the

713
00:28:48,340 --> 00:28:53,679
attacker gets the third and final shell

714
00:28:51,660 --> 00:28:54,910
and these don't have to be shells they

715
00:28:53,680 --> 00:28:56,470
could be you know dropping some sort of

716
00:28:54,910 --> 00:28:58,480
rat or dropping some sort of payload or

717
00:28:56,470 --> 00:29:00,310
dropping as I said before a Bitcoin

718
00:28:58,480 --> 00:29:02,890
miner but it's an opportunity through

719
00:29:00,310 --> 00:29:04,510
which an attacker can convince or try to

720
00:29:02,890 --> 00:29:06,220
convince the victim user running this

721
00:29:04,510 --> 00:29:08,530
vulnerable these vulnerable versions of

722
00:29:06,220 --> 00:29:10,360
software to clone some code and then

723
00:29:08,530 --> 00:29:11,530
just operate with it in seemingly

724
00:29:10,360 --> 00:29:13,120
innocent ways you know you're just

725
00:29:11,530 --> 00:29:15,129
seeding into a directory you're just

726
00:29:13,120 --> 00:29:17,350
opening it up in an IDE but these

727
00:29:15,130 --> 00:29:18,970
actually have in some cases surprising

728
00:29:17,350 --> 00:29:23,560
attack surfaces and hence

729
00:29:18,970 --> 00:29:26,110
vulnerabilities so after you closing

730
00:29:23,560 --> 00:29:28,919
thoughts how am i for time look ten

731
00:29:26,110 --> 00:29:33,219
minutes awesome a few closing thoughts

732
00:29:28,920 --> 00:29:34,840
it's actually a risk I think so I don't

733
00:29:33,220 --> 00:29:36,880
think my trash bugs are really done much

734
00:29:34,840 --> 00:29:39,340
of a risk I think they're cool bugs but

735
00:29:36,880 --> 00:29:41,170
they're pretty noisy attacks and you're

736
00:29:39,340 --> 00:29:44,020
relying on the victim actually having a

737
00:29:41,170 --> 00:29:46,330
vulnerable RVM I don't think my bugs

738
00:29:44,020 --> 00:29:47,860
would be used in any sort of attack but

739
00:29:46,330 --> 00:29:49,510
I think attacks of this nature are

740
00:29:47,860 --> 00:29:52,330
certainly possible and they're actually

741
00:29:49,510 --> 00:29:54,670
happening last year proof sorry force

742
00:29:52,330 --> 00:29:57,730
point did some research and saw that

743
00:29:54,670 --> 00:30:00,670
there were malicious AutoCAD files being

744
00:29:57,730 --> 00:30:02,410
sent to some industrial designers for

745
00:30:00,670 --> 00:30:04,090
the purpose of stealing more AutoCAD

746
00:30:02,410 --> 00:30:07,740
files to put malware in to send other

747
00:30:04,090 --> 00:30:10,389
victims so there's already instances of

748
00:30:07,740 --> 00:30:12,190
industry vertical software or vertical

749
00:30:10,390 --> 00:30:15,040
specific software and bugs in that

750
00:30:12,190 --> 00:30:20,980
software being used in campaigns to

751
00:30:15,040 --> 00:30:22,750
attack industry earlier this year we had

752
00:30:20,980 --> 00:30:26,590
the delight of finding out about shadow

753
00:30:22,750 --> 00:30:28,660
hammer and Kaspersky showing that Zeus

754
00:30:26,590 --> 00:30:30,370
had been compromised and was sending out

755
00:30:28,660 --> 00:30:33,660
malicious firmware update not firmware

756
00:30:30,370 --> 00:30:36,639
malicious updates for Windows software

757
00:30:33,660 --> 00:30:39,730
this was kind of cool what I thought was

758
00:30:36,640 --> 00:30:42,370
super interesting was something we found

759
00:30:39,730 --> 00:30:47,050
out about just last month in which the

760
00:30:42,370 --> 00:30:49,179
same crew are suspected or Kaspersky is

761
00:30:47,050 --> 00:30:51,250
saying that they have either compromised

762
00:30:49,180 --> 00:30:52,740
a few games companies all those games

763
00:30:51,250 --> 00:30:54,570
companies downloaded a cracked

764
00:30:52,740 --> 00:30:57,390
Visual Studio put out by the shadow

765
00:30:54,570 --> 00:30:59,610
hammer are eight us that has a

766
00:30:57,390 --> 00:31:01,770
compromised compiler like this is the

767
00:30:59,610 --> 00:31:04,110
old Ken Thompson attack and this

768
00:31:01,770 --> 00:31:06,300
compromised compiler on the developer

769
00:31:04,110 --> 00:31:08,790
workstation when they built the

770
00:31:06,300 --> 00:31:12,510
videogame to then publish to to gamers

771
00:31:08,790 --> 00:31:13,980
at build time it included malware and I

772
00:31:12,510 --> 00:31:15,870
just think this is really interesting it

773
00:31:13,980 --> 00:31:17,550
it's it's a real-world case just last

774
00:31:15,870 --> 00:31:20,159
month of software developers being

775
00:31:17,550 --> 00:31:23,850
attacked as part of a very targeted

776
00:31:20,160 --> 00:31:26,490
supply chain style campaign I just think

777
00:31:23,850 --> 00:31:29,010
backdoored compilers are awesome so what

778
00:31:26,490 --> 00:31:30,750
can we do about this what can we do in

779
00:31:29,010 --> 00:31:32,460
particular about vulnerabilities in

780
00:31:30,750 --> 00:31:33,600
software development software if we

781
00:31:32,460 --> 00:31:35,640
think it's something to be concerned

782
00:31:33,600 --> 00:31:37,080
about I think the most important first

783
00:31:35,640 --> 00:31:38,730
thing is especially for developers to

784
00:31:37,080 --> 00:31:41,550
understand the tools that are in your

785
00:31:38,730 --> 00:31:44,220
personal pipeline understand how

786
00:31:41,550 --> 00:31:46,740
Internet data might be exposed to these

787
00:31:44,220 --> 00:31:49,740
bits and pieces in your data processing

788
00:31:46,740 --> 00:31:51,929
flow have a think about you know ideas

789
00:31:49,740 --> 00:31:53,670
they're very very powerful tools while

790
00:31:51,929 --> 00:31:56,309
perhaps wouldn't use one to look at code

791
00:31:53,670 --> 00:31:58,590
I did not trust because ideas have built

792
00:31:56,309 --> 00:32:00,510
in debuggers and compilers and they're

793
00:31:58,590 --> 00:32:02,699
only one click away from running code

794
00:32:00,510 --> 00:32:04,559
but there might be some attack service

795
00:32:02,700 --> 00:32:07,559
in there that leverages that sort of

796
00:32:04,559 --> 00:32:12,178
power to run malicious code on your

797
00:32:07,559 --> 00:32:13,410
machine and of course patch it's super

798
00:32:12,179 --> 00:32:15,630
important to patch all the little bits

799
00:32:13,410 --> 00:32:18,390
and pieces and bits and bobs in your

800
00:32:15,630 --> 00:32:20,550
software development tool cane you know

801
00:32:18,390 --> 00:32:22,260
consider rpm I don't think rpm has

802
00:32:20,550 --> 00:32:24,059
automatic updates so in any Ruby

803
00:32:22,260 --> 00:32:27,809
developers who have an updated rpm for a

804
00:32:24,059 --> 00:32:29,520
few years have these sweet CD bugs still

805
00:32:27,809 --> 00:32:31,170
in their environment so make sure you're

806
00:32:29,520 --> 00:32:33,750
on top of patching of all the bits and

807
00:32:31,170 --> 00:32:36,030
pieces in your tool chain and I think

808
00:32:33,750 --> 00:32:39,840
there's a case to be made for some sort

809
00:32:36,030 --> 00:32:41,820
of containerization or sandboxing of our

810
00:32:39,840 --> 00:32:43,770
workflows you know let's say you're

811
00:32:41,820 --> 00:32:46,080
doing let's say for example I'm doing a

812
00:32:43,770 --> 00:32:47,610
secure code review and sure I probably

813
00:32:46,080 --> 00:32:49,379
trust the code I'm reading but I kind of

814
00:32:47,610 --> 00:32:51,330
also having found a bug like that one in

815
00:32:49,380 --> 00:32:54,510
vs code I don't want to open things in

816
00:32:51,330 --> 00:32:56,730
vs code on my workstation it's like the

817
00:32:54,510 --> 00:33:00,540
crazy person I am I run the visual

818
00:32:56,730 --> 00:33:03,330
studio code inside docker and doc is not

819
00:33:00,540 --> 00:33:05,100
necessarily a full security story but if

820
00:33:03,330 --> 00:33:06,119
you're interested in giving it a go and

821
00:33:05,100 --> 00:33:07,379
running your two

822
00:33:06,119 --> 00:33:09,599
in dhaka I think it's a really

823
00:33:07,379 --> 00:33:11,158
interesting way to provide isolation of

824
00:33:09,599 --> 00:33:14,009
your different work context it's kind of

825
00:33:11,159 --> 00:33:15,779
like a lightweight cubes OS which is

826
00:33:14,009 --> 00:33:18,269
also something I should probably look

827
00:33:15,779 --> 00:33:19,919
into one day but it just kind of helps

828
00:33:18,269 --> 00:33:21,149
you know have an ephemeral working

829
00:33:19,919 --> 00:33:22,949
environment you know you open something

830
00:33:21,149 --> 00:33:25,829
up in something like BS code then when

831
00:33:22,949 --> 00:33:27,239
you close it down it's gone and the next

832
00:33:25,829 --> 00:33:29,759
time you open up the S code it's done

833
00:33:27,239 --> 00:33:33,749
fresh from a docker image and it

834
00:33:29,759 --> 00:33:34,799
prevents persistence across days you

835
00:33:33,749 --> 00:33:37,109
know it's kind of like wiping your

836
00:33:34,799 --> 00:33:41,969
machine at the end of the day there are

837
00:33:37,109 --> 00:33:44,369
caveats to using docker for security

838
00:33:41,969 --> 00:33:46,379
I mean docker doesn't really I think

839
00:33:44,369 --> 00:33:48,029
claim to be having a full security story

840
00:33:46,379 --> 00:33:50,549
and there's always going to be docker

841
00:33:48,029 --> 00:33:52,199
escapes but I think it is markedly

842
00:33:50,549 --> 00:33:53,999
better than running it directly on your

843
00:33:52,199 --> 00:33:56,909
hosts as long as you're not running it

844
00:33:53,999 --> 00:33:58,739
in root in the container but there's

845
00:33:56,909 --> 00:34:00,089
this one really annoying thing when

846
00:33:58,739 --> 00:34:01,079
you're running docker on Linux or

847
00:34:00,089 --> 00:34:02,549
there's a lot of annoying things about

848
00:34:01,079 --> 00:34:04,289
running docker on Linux but one in

849
00:34:02,549 --> 00:34:05,879
particular is to get graphical

850
00:34:04,289 --> 00:34:08,099
applications to work you have to expose

851
00:34:05,879 --> 00:34:10,440
your X socket into the container and

852
00:34:08,099 --> 00:34:13,259
there's some really novel ways to crawl

853
00:34:10,440 --> 00:34:15,359
back up through an X exposure to the

854
00:34:13,259 --> 00:34:17,399
host if you want to know more about that

855
00:34:15,359 --> 00:34:20,248
metal storm has an awesome video on

856
00:34:17,399 --> 00:34:21,989
YouTube with that and tons of other unix

857
00:34:20,248 --> 00:34:25,319
party tricks that is is well worth of

858
00:34:21,989 --> 00:34:27,119
watch the traditional advice applies you

859
00:34:25,319 --> 00:34:28,409
know security monitoring make sure your

860
00:34:27,119 --> 00:34:30,749
developer workstations are being

861
00:34:28,409 --> 00:34:33,059
monitored and patched and all that good

862
00:34:30,748 --> 00:34:34,408
stuff two-factor authentication make

863
00:34:33,059 --> 00:34:38,099
sure developers when they're hopping

864
00:34:34,409 --> 00:34:39,629
around by SSH or using Amazon keys that

865
00:34:38,099 --> 00:34:41,909
they're required to kinda touch base

866
00:34:39,629 --> 00:34:44,998
with a to FA system occasionally to have

867
00:34:41,909 --> 00:34:47,129
those keys operate all the kind of good

868
00:34:44,998 --> 00:34:48,449
standard stuff but that the monitoring

869
00:34:47,129 --> 00:34:51,268
can be a little bit tricky with with

870
00:34:48,449 --> 00:34:52,710
developers developers love to BYOD and

871
00:34:51,268 --> 00:34:54,899
have full control over their machines

872
00:34:52,710 --> 00:34:57,269
and they hate using IT machines and

873
00:34:54,899 --> 00:34:59,749
bogged down with security agents but it

874
00:34:57,269 --> 00:35:04,439
is really important to kind of make sure

875
00:34:59,749 --> 00:35:06,299
you are monitoring in some capacity your

876
00:35:04,440 --> 00:35:08,069
developer workstations and have a

877
00:35:06,299 --> 00:35:11,190
conversation with the development teams

878
00:35:08,069 --> 00:35:12,900
say hey help us to understand what would

879
00:35:11,190 --> 00:35:15,210
be the impact to the organization if

880
00:35:12,900 --> 00:35:16,890
your workstations got popped put it this

881
00:35:15,210 --> 00:35:19,450
way if you were to turn rogue

882
00:35:16,890 --> 00:35:21,940
based on the credentials in the access

883
00:35:19,450 --> 00:35:24,009
that you have what damage could you do

884
00:35:21,940 --> 00:35:25,330
and don't go into this looking to strip

885
00:35:24,010 --> 00:35:27,490
permissions away from developers they

886
00:35:25,330 --> 00:35:29,590
have jobs to do but go into it to

887
00:35:27,490 --> 00:35:31,899
understand you know exactly what could

888
00:35:29,590 --> 00:35:34,300
the impact be if your workstations are

889
00:35:31,900 --> 00:35:35,740
breached and finally I think it'd be

890
00:35:34,300 --> 00:35:37,900
really interesting to do some sort of

891
00:35:35,740 --> 00:35:39,279
Red Team engagement where you like drop

892
00:35:37,900 --> 00:35:41,710
the red team onto a developer

893
00:35:39,280 --> 00:35:43,300
workstation or a replica of a developer

894
00:35:41,710 --> 00:35:45,340
workstation and say to the red team hey

895
00:35:43,300 --> 00:35:47,950
how far into the environment can you get

896
00:35:45,340 --> 00:35:51,130
from here what sort of exposure are we

897
00:35:47,950 --> 00:35:52,810
are from our developer workstations and

898
00:35:51,130 --> 00:35:55,360
if you think this is a bit scary if you

899
00:35:52,810 --> 00:35:57,160
think there's no way I could really give

900
00:35:55,360 --> 00:35:58,750
the red team such a head start and

901
00:35:57,160 --> 00:36:00,850
there's no way they might break

902
00:35:58,750 --> 00:36:02,980
something that probably says everything

903
00:36:00,850 --> 00:36:04,630
you need to know about how important the

904
00:36:02,980 --> 00:36:07,000
security of your developer workstations

905
00:36:04,630 --> 00:36:08,980
is that's what I have to share today

906
00:36:07,000 --> 00:36:10,570
thank you very much if you want to add

907
00:36:08,980 --> 00:36:11,740
me on Twitter you can if you want to

908
00:36:10,570 --> 00:36:14,380
watch me live on the internet when I

909
00:36:11,740 --> 00:36:16,330
never stream you can the slides from

910
00:36:14,380 --> 00:36:17,950
today up on my github and there's a few

911
00:36:16,330 --> 00:36:20,440
more RPM bugs I didn't have a chance to

912
00:36:17,950 --> 00:36:23,890
show in my advisories repo so if you're

913
00:36:20,440 --> 00:36:31,420
curious check those out and questions I

914
00:36:23,890 --> 00:36:34,540
suppose house fantastic thank you it is

915
00:36:31,420 --> 00:36:40,390
scary stuff honestly does anyone have

916
00:36:34,540 --> 00:36:42,310
any questions I reckon this will work in

917
00:36:40,390 --> 00:36:45,640
Windows as well how have you tested it

918
00:36:42,310 --> 00:36:50,140
out no all right I'll have a chat yeah

919
00:36:45,640 --> 00:36:51,339
can't do Windows family so so if there

920
00:36:50,140 --> 00:36:54,220
aren't any other questions we might just

921
00:36:51,340 --> 00:36:55,480
call it call it there easy right yeah

922
00:36:54,220 --> 00:37:01,990
thank you very much Justin think the

923
00:36:55,480 --> 00:37:05,830
round of applause please and you get the

924
00:37:01,990 --> 00:37:08,009
best speaker prize ever thank you very

925
00:37:05,830 --> 00:37:08,009
much

