1
00:00:00,060 --> 00:00:04,258
so afternoon in this last session we've

2
00:00:01,560 --> 00:00:05,310
got one Binet from Argentina who is

3
00:00:04,259 --> 00:00:06,870
currently living in the Netherlands

4
00:00:05,310 --> 00:00:14,009
talking about how to build ro and wife

5
00:00:06,870 --> 00:00:16,289
so please welcome one hi thank you so

6
00:00:14,009 --> 00:00:17,850
yes yeah my name is one burner these

7
00:00:16,289 --> 00:00:19,130
talk is building your own waffle service

8
00:00:17,850 --> 00:00:22,260
and forgetting about false positives

9
00:00:19,130 --> 00:00:23,970
please have it about me so I am lead

10
00:00:22,260 --> 00:00:26,789
security upper a building I become I

11
00:00:23,970 --> 00:00:28,560
work mostly in this kind of solutions

12
00:00:26,789 --> 00:00:31,529
architect role for both application

13
00:00:28,560 --> 00:00:34,019
security and infrastructure so security

14
00:00:31,529 --> 00:00:36,300
data pipelines and in this case solving

15
00:00:34,020 --> 00:00:40,079
application security problems like well

16
00:00:36,300 --> 00:00:42,599
Application Firewall so to have a quick

17
00:00:40,079 --> 00:00:45,000
overview we'll look into what Hawass is

18
00:00:42,600 --> 00:00:46,710
and the deployment modes then the

19
00:00:45,000 --> 00:00:48,719
concept of how wofe as a service and

20
00:00:46,710 --> 00:00:51,270
what changes from your usual web set up

21
00:00:48,719 --> 00:00:53,579
then about how can we block attacks

22
00:00:51,270 --> 00:00:56,129
without false positives or adding

23
00:00:53,579 --> 00:01:00,210
latency to customers and finally if we

24
00:00:56,129 --> 00:01:02,519
have some time Adam so just to have a

25
00:01:00,210 --> 00:01:04,799
small summary of what our office

26
00:01:02,520 --> 00:01:06,299
it's a Web Application Firewall so

27
00:01:04,799 --> 00:01:09,060
focused on layer seventh of the

28
00:01:06,299 --> 00:01:10,979
application itself and it looks into

29
00:01:09,060 --> 00:01:16,409
application attacks like SQL injection

30
00:01:10,979 --> 00:01:18,150
remote code execution and basically so

31
00:01:16,409 --> 00:01:20,580
to go a bit into a different deployment

32
00:01:18,150 --> 00:01:23,369
modes that we often have one of them is

33
00:01:20,580 --> 00:01:25,200
in line mode so the benefit is that you

34
00:01:23,369 --> 00:01:27,240
can actually block attacks when you have

35
00:01:25,200 --> 00:01:28,530
this deployment mode as you can see the

36
00:01:27,240 --> 00:01:31,229
graph is in the middle of the customer

37
00:01:28,530 --> 00:01:33,299
and the web server and it's transparent

38
00:01:31,229 --> 00:01:34,829
for web servers but the downside is that

39
00:01:33,299 --> 00:01:37,920
now you have an extra point of failure

40
00:01:34,829 --> 00:01:39,449
you have added latency and of course the

41
00:01:37,920 --> 00:01:41,850
network placement can be very tricky

42
00:01:39,450 --> 00:01:44,729
especially on large organizations which

43
00:01:41,850 --> 00:01:47,399
might be across the globe then you have

44
00:01:44,729 --> 00:01:49,530
out of an outer band means that the RAF

45
00:01:47,399 --> 00:01:51,840
is inspecting the traffic maybe for

46
00:01:49,530 --> 00:01:54,149
example we are tap a network tap but

47
00:01:51,840 --> 00:01:56,369
it's not able to block because it's no

48
00:01:54,149 --> 00:01:58,799
longer in the military traffic you don't

49
00:01:56,369 --> 00:02:00,240
have latency but of course you can only

50
00:01:58,799 --> 00:02:02,159
know that attacks are happening you

51
00:02:00,240 --> 00:02:03,750
cannot do much about it and of course

52
00:02:02,159 --> 00:02:05,579
when you have things like perfect for

53
00:02:03,750 --> 00:02:10,080
secrecy you can bring come very tricky

54
00:02:05,579 --> 00:02:11,940
to this kind of inspection then an early

55
00:02:10,080 --> 00:02:13,650
deployment mode has been the agent mode

56
00:02:11,940 --> 00:02:15,900
which means that for example

57
00:02:13,650 --> 00:02:18,330
our web server might have an agent in

58
00:02:15,900 --> 00:02:21,480
the same post and it's very easy to

59
00:02:18,330 --> 00:02:23,640
place and simple to scale you just scale

60
00:02:21,480 --> 00:02:26,099
it with your web servers for example but

61
00:02:23,640 --> 00:02:28,410
the downside is that now it can be a lot

62
00:02:26,099 --> 00:02:30,209
more invasive and can make the resource

63
00:02:28,410 --> 00:02:32,549
allocation feature or less efficient

64
00:02:30,209 --> 00:02:34,410
just imagine that if your web server is

65
00:02:32,549 --> 00:02:36,510
using 1g right of RAM and yours in

66
00:02:34,410 --> 00:02:39,090
containers suddenly every single

67
00:02:36,510 --> 00:02:41,670
container has to have its own graph a

68
00:02:39,090 --> 00:02:45,390
container in its pod which might be

69
00:02:41,670 --> 00:02:47,458
using three gigabytes of RAM and finally

70
00:02:45,390 --> 00:02:51,119
cloud so you might know a lot of code

71
00:02:47,459 --> 00:02:53,220
providers and it can be quite convenient

72
00:02:51,120 --> 00:02:57,810
if you are using a chloral and you just

73
00:02:53,220 --> 00:03:00,540
place use their worth services but of

74
00:02:57,810 --> 00:03:03,030
course if you are not in the cloud it's

75
00:03:00,540 --> 00:03:06,090
out of your control it's added risk and

76
00:03:03,030 --> 00:03:07,530
and the latency can be pretty

77
00:03:06,090 --> 00:03:10,349
substantial to the point that you might

78
00:03:07,530 --> 00:03:12,360
not be able to use it so what are the

79
00:03:10,349 --> 00:03:14,220
usual problems with these kind of what

80
00:03:12,360 --> 00:03:16,140
solutions so don't work placement I

81
00:03:14,220 --> 00:03:17,700
mentioned it they availability and

82
00:03:16,140 --> 00:03:20,518
performance concerns especially from the

83
00:03:17,700 --> 00:03:23,459
developers who might see the earth as an

84
00:03:20,519 --> 00:03:25,730
obstacle to the readability or at least

85
00:03:23,459 --> 00:03:28,769
a black box they might be afraid of and

86
00:03:25,730 --> 00:03:30,720
the false positive rate so how many of

87
00:03:28,769 --> 00:03:33,329
your actual customers is they worth

88
00:03:30,720 --> 00:03:35,579
blocking which unless you're tuning

89
00:03:33,329 --> 00:03:37,620
constantly especially on very dynamic

90
00:03:35,579 --> 00:03:41,700
environments can become a reason not to

91
00:03:37,620 --> 00:03:43,950
be able to use a wife at all so how do

92
00:03:41,700 --> 00:03:47,910
you end up with this kind of problem

93
00:03:43,950 --> 00:03:49,290
so at booking we worked in a very

94
00:03:47,910 --> 00:03:51,359
challenging environment so it's a very

95
00:03:49,290 --> 00:03:53,370
dynamic environment there was no

96
00:03:51,359 --> 00:03:56,400
acceptance for false positives our

97
00:03:53,370 --> 00:03:57,630
reluctance towards black boxes and we

98
00:03:56,400 --> 00:03:59,130
wanted the blocking to happen through an

99
00:03:57,630 --> 00:04:00,720
application which okay a lot of laps

100
00:03:59,130 --> 00:04:01,980
allowed you to add the data on the

101
00:04:00,720 --> 00:04:04,859
headers and then the application can

102
00:04:01,980 --> 00:04:07,319
block it but the other latency that all

103
00:04:04,859 --> 00:04:09,389
this in line graphs have would not be

104
00:04:07,319 --> 00:04:11,040
acceptable so basically we need to be

105
00:04:09,389 --> 00:04:13,200
able to block attacks without any

106
00:04:11,040 --> 00:04:16,978
latency Ally to users and no false

107
00:04:13,200 --> 00:04:19,829
positives so simple problem so here to

108
00:04:16,978 --> 00:04:22,919
cow I end up with this architecture so

109
00:04:19,829 --> 00:04:24,750
having a web service so it's going to

110
00:04:22,919 --> 00:04:26,440
remove false positives I understand the

111
00:04:24,750 --> 00:04:28,600
context of the request not just

112
00:04:26,440 --> 00:04:30,310
quest itself there's no need for an

113
00:04:28,600 --> 00:04:32,440
appliance so any application can just

114
00:04:30,310 --> 00:04:34,150
add an API call if they need to to

115
00:04:32,440 --> 00:04:35,680
quickly bootstrap something which

116
00:04:34,150 --> 00:04:38,409
developers are very used to I'm very

117
00:04:35,680 --> 00:04:41,680
comfortable with and of course the block

118
00:04:38,410 --> 00:04:43,810
the application has a lot of power to

119
00:04:41,680 --> 00:04:46,870
decide how the work is going to react

120
00:04:43,810 --> 00:04:48,520
and it also allows to avoid the latency

121
00:04:46,870 --> 00:04:51,700
of the users something that I will

122
00:04:48,520 --> 00:04:55,630
explain later how so just just some

123
00:04:51,700 --> 00:05:00,099
stats on this architecture we blog about

124
00:04:55,630 --> 00:05:01,719
Emil 11 million requests per month 7,000

125
00:05:00,100 --> 00:05:03,460
listing fingerprints I will spray a bit

126
00:05:01,720 --> 00:05:06,550
more what a fingerprint means afterwards

127
00:05:03,460 --> 00:05:08,739
and know as latency for regular users

128
00:05:06,550 --> 00:05:12,580
and no known impact of false positives

129
00:05:08,740 --> 00:05:16,390
so this talk is out how could you build

130
00:05:12,580 --> 00:05:19,419
one so this is all based on open source

131
00:05:16,390 --> 00:05:20,830
components so nothing proprietary you

132
00:05:19,420 --> 00:05:22,780
will need to have a lot processing

133
00:05:20,830 --> 00:05:24,669
pipeline if you don't have one by lock

134
00:05:22,780 --> 00:05:27,280
processing I mean that you are consuming

135
00:05:24,670 --> 00:05:30,730
events or logs from your web servers and

136
00:05:27,280 --> 00:05:32,460
then doing something with them is very

137
00:05:30,730 --> 00:05:35,830
simple approach would be if you were

138
00:05:32,460 --> 00:05:38,260
visualizing some stats on the on the

139
00:05:35,830 --> 00:05:40,390
locks of your web servers having above

140
00:05:38,260 --> 00:05:41,680
as an API so no longer just a box that

141
00:05:40,390 --> 00:05:44,110
you place in the middle of the traffic

142
00:05:41,680 --> 00:05:46,930
but an API that can be called and can

143
00:05:44,110 --> 00:05:49,540
answer information and might use

144
00:05:46,930 --> 00:05:51,250
something like a library to having these

145
00:05:49,540 --> 00:05:54,880
blocks sent by the web application or

146
00:05:51,250 --> 00:05:57,610
calling the API itself so for this talk

147
00:05:54,880 --> 00:05:59,560
to explain this I will echo the case

148
00:05:57,610 --> 00:06:00,760
study of a web application so in this

149
00:05:59,560 --> 00:06:03,160
case we will have a simple web

150
00:06:00,760 --> 00:06:05,140
application which I'm using a flask all

151
00:06:03,160 --> 00:06:07,330
this code of all the things I'm talking

152
00:06:05,140 --> 00:06:08,740
about is in github and also a demo so

153
00:06:07,330 --> 00:06:10,539
when I'm doing the demo and just running

154
00:06:08,740 --> 00:06:13,360
a Tara from script to build an

155
00:06:10,540 --> 00:06:15,370
infrastructure in Google Cloud based on

156
00:06:13,360 --> 00:06:17,650
the calling github and show it so you

157
00:06:15,370 --> 00:06:22,750
can do it yourself afterwards if you

158
00:06:17,650 --> 00:06:26,169
want so how do we get this male ground

159
00:06:22,750 --> 00:06:28,750
of having out-of-band the capabilities

160
00:06:26,169 --> 00:06:30,549
of not affecting latency having inline

161
00:06:28,750 --> 00:06:32,590
capabilities of being able to block and

162
00:06:30,550 --> 00:06:34,870
of course getting the best of both

163
00:06:32,590 --> 00:06:37,900
worlds without false positives that's

164
00:06:34,870 --> 00:06:39,460
what this talk is about so I'm going to

165
00:06:37,900 --> 00:06:40,270
go first all over the whole architecture

166
00:06:39,460 --> 00:06:43,479
of this

167
00:06:40,270 --> 00:06:44,948
so you have their application I will go

168
00:06:43,479 --> 00:06:46,900
into each component but just to give you

169
00:06:44,949 --> 00:06:49,630
an idea at the bottom you have the outer

170
00:06:46,900 --> 00:06:51,099
pan capabilities or components so this

171
00:06:49,630 --> 00:06:53,440
is something that's reading the logs and

172
00:06:51,100 --> 00:06:55,750
doing something with the logs while not

173
00:06:53,440 --> 00:06:58,509
a adding time to our application itself

174
00:06:55,750 --> 00:07:00,430
and at the top you have they they take

175
00:06:58,509 --> 00:07:02,560
in line world so the web application

176
00:07:00,430 --> 00:07:05,889
talking with the woth which is now an

177
00:07:02,560 --> 00:07:10,300
API and deciding if they want to block

178
00:07:05,889 --> 00:07:12,610
or not based on the response so I

179
00:07:10,300 --> 00:07:14,949
mentioned the application component you

180
00:07:12,610 --> 00:07:20,169
can think as any web application that

181
00:07:14,949 --> 00:07:23,680
you might have so a Python or Java then

182
00:07:20,169 --> 00:07:25,180
the agent the agent is going to be the

183
00:07:23,680 --> 00:07:27,280
one that actually talking with your

184
00:07:25,180 --> 00:07:29,440
application so there for example there

185
00:07:27,280 --> 00:07:31,150
it's a very slim agent so it's not it

186
00:07:29,440 --> 00:07:32,530
doesn't have rough capabilities it

187
00:07:31,150 --> 00:07:34,840
doesn't understand if something is an

188
00:07:32,530 --> 00:07:37,419
attack or not but they want to resize it

189
00:07:34,840 --> 00:07:40,388
should call the earth and get

190
00:07:37,419 --> 00:07:42,190
information as an API it's very simple

191
00:07:40,389 --> 00:07:45,039
to set up but of course you have the

192
00:07:42,190 --> 00:07:46,419
issues I mentioned about a agent

193
00:07:45,039 --> 00:07:47,770
implementations although if it's a

194
00:07:46,419 --> 00:07:50,590
minimal agent you're not going to have

195
00:07:47,770 --> 00:07:52,240
the efficiency problems a simple

196
00:07:50,590 --> 00:07:54,159
approach might be a library so you just

197
00:07:52,240 --> 00:07:56,409
imagine that you like you have any a

198
00:07:54,159 --> 00:07:58,150
library which does API calls to a

199
00:07:56,409 --> 00:08:00,280
service this would be a simple library

200
00:07:58,150 --> 00:08:02,739
and application that can do an API call

201
00:08:00,280 --> 00:08:04,780
to the web service at the beginning of

202
00:08:02,740 --> 00:08:07,150
the request for example or after looking

203
00:08:04,780 --> 00:08:09,130
at the content during current risk with

204
00:08:07,150 --> 00:08:10,810
this approach while it's very simple for

205
00:08:09,130 --> 00:08:13,000
any developer to just bootstrap your

206
00:08:10,810 --> 00:08:15,039
application what can happen with this is

207
00:08:13,000 --> 00:08:17,710
that you are no longer the wolf is no

208
00:08:15,039 --> 00:08:20,409
longer protecting their a application

209
00:08:17,710 --> 00:08:22,359
framework itself so if you have applique

210
00:08:20,409 --> 00:08:24,430
venality on the web application

211
00:08:22,360 --> 00:08:26,020
framework they take on flask how it

212
00:08:24,430 --> 00:08:28,389
process our request is going to be too

213
00:08:26,020 --> 00:08:30,008
light already but depending on your risk

214
00:08:28,389 --> 00:08:33,729
acceptance this might be a very simple

215
00:08:30,009 --> 00:08:37,870
way for you to start getting this 99% of

216
00:08:33,729 --> 00:08:41,589
coverage on these attacks now the web

217
00:08:37,870 --> 00:08:43,959
service this will be the servers or the

218
00:08:41,589 --> 00:08:45,670
API that's going to receive a request

219
00:08:43,958 --> 00:08:48,579
with information of what happened or

220
00:08:45,670 --> 00:08:49,540
what their application is getting so

221
00:08:48,579 --> 00:08:51,910
it's going to have a pluggable

222
00:08:49,540 --> 00:08:53,520
architecture and which means that you

223
00:08:51,910 --> 00:08:56,100
can have multiple components which

224
00:08:53,520 --> 00:08:57,720
working parallel and it will return to

225
00:08:56,100 --> 00:08:58,950
the epic it's not going to block it's

226
00:08:57,720 --> 00:09:00,710
just going to return a recommendation

227
00:08:58,950 --> 00:09:03,540
for example you should block an attack

228
00:09:00,710 --> 00:09:05,850
so these components can be of three

229
00:09:03,540 --> 00:09:08,370
types one is open source components so

230
00:09:05,850 --> 00:09:10,490
not security or not see I'm using mod

231
00:09:08,370 --> 00:09:13,590
security for this talk and for the code

232
00:09:10,490 --> 00:09:15,270
and other components might be

233
00:09:13,590 --> 00:09:17,460
preparatory so let's say that you are

234
00:09:15,270 --> 00:09:21,569
using mod security but you want to test

235
00:09:17,460 --> 00:09:24,240
a commercial appliance and it's a simple

236
00:09:21,570 --> 00:09:25,980
way of evaluation because you could now

237
00:09:24,240 --> 00:09:27,510
have the web service return the

238
00:09:25,980 --> 00:09:29,340
recommendation of mod security of the

239
00:09:27,510 --> 00:09:31,710
appliance and afterwards you can just

240
00:09:29,340 --> 00:09:33,270
compare in what cases is much security

241
00:09:31,710 --> 00:09:35,400
better than plans or what case it

242
00:09:33,270 --> 00:09:38,220
applies dispatcher and MOT security if

243
00:09:35,400 --> 00:09:39,870
anybody has done a rough comparison it

244
00:09:38,220 --> 00:09:41,610
can be very tricky to do these kind of

245
00:09:39,870 --> 00:09:43,350
implementations most of the time you do

246
00:09:41,610 --> 00:09:45,780
it out of an but getting the coverage

247
00:09:43,350 --> 00:09:49,980
just for a POC can be a daunting task

248
00:09:45,780 --> 00:09:53,160
and the other option is custom modules

249
00:09:49,980 --> 00:09:55,590
so for example for this job I bailed two

250
00:09:53,160 --> 00:09:56,880
modules with one which would be rate

251
00:09:55,590 --> 00:09:59,070
limiting and they are one which is a

252
00:09:56,880 --> 00:10:00,870
very simple rule engine but you can

253
00:09:59,070 --> 00:10:02,640
imagine that there are from the

254
00:10:00,870 --> 00:10:04,800
application side in modules you might

255
00:10:02,640 --> 00:10:06,780
want to create custom for your

256
00:10:04,800 --> 00:10:09,599
environment or for example if you want

257
00:10:06,780 --> 00:10:11,640
to use machine learning models because

258
00:10:09,600 --> 00:10:13,520
you have some fraud situations and you

259
00:10:11,640 --> 00:10:18,120
want to learn a bit of your customers or

260
00:10:13,520 --> 00:10:19,829
custom business logic so now this is how

261
00:10:18,120 --> 00:10:22,110
they watch service they would look like

262
00:10:19,830 --> 00:10:24,480
it's basically this API which would have

263
00:10:22,110 --> 00:10:28,680
it roll components called and give back

264
00:10:24,480 --> 00:10:30,420
a recommendation now the lot processing

265
00:10:28,680 --> 00:10:32,849
component will be the one that's getting

266
00:10:30,420 --> 00:10:35,520
the logs from the web application which

267
00:10:32,850 --> 00:10:37,800
would have encrypted data of the request

268
00:10:35,520 --> 00:10:41,130
and will be able to replay the request

269
00:10:37,800 --> 00:10:42,359
to the web service so out of and if they

270
00:10:41,130 --> 00:10:44,100
were sir is taking a hundred

271
00:10:42,360 --> 00:10:45,600
milliseconds during this course which

272
00:10:44,100 --> 00:10:48,360
will take a hundred seconds and then

273
00:10:45,600 --> 00:10:51,030
enrich the logs with this information so

274
00:10:48,360 --> 00:10:54,240
now if the application has not gone

275
00:10:51,030 --> 00:10:56,670
through what a service as an API and not

276
00:10:54,240 --> 00:11:00,200
a latency it's going to find out about

277
00:10:56,670 --> 00:11:02,729
it afterwards so in this outer panel and

278
00:11:00,200 --> 00:11:04,320
in this case I'm using data flow which

279
00:11:02,730 --> 00:11:07,500
is a power person form of with Apache

280
00:11:04,320 --> 00:11:09,210
beam just so I can use the capacity of

281
00:11:07,500 --> 00:11:11,520
working with windows of times and doing

282
00:11:09,210 --> 00:11:12,740
very naive score calculations based on

283
00:11:11,520 --> 00:11:16,620
it

284
00:11:12,740 --> 00:11:19,590
and finally detection so if the

285
00:11:16,620 --> 00:11:21,030
out-of-band process detects that sees in

286
00:11:19,590 --> 00:11:23,370
a window of time something that consists

287
00:11:21,030 --> 00:11:25,050
discourage a high enough it will send it

288
00:11:23,370 --> 00:11:28,970
in this case through a queue to a

289
00:11:25,050 --> 00:11:31,829
detection service which is going to use

290
00:11:28,970 --> 00:11:33,960
use the information received and other

291
00:11:31,830 --> 00:11:35,850
information to make a decision based on

292
00:11:33,960 --> 00:11:39,530
it to say if something is wrong or not

293
00:11:35,850 --> 00:11:43,050
and this information we'll use would be

294
00:11:39,530 --> 00:11:44,910
about business value patterns of

295
00:11:43,050 --> 00:11:46,650
behavior and history that's why I use a

296
00:11:44,910 --> 00:11:49,020
Google bigquery you can have petabytes

297
00:11:46,650 --> 00:11:51,930
of information and in seconds getting

298
00:11:49,020 --> 00:11:55,860
response about a particular let's say

299
00:11:51,930 --> 00:11:59,219
endpoint and how common are there a

300
00:11:55,860 --> 00:12:01,770
false positives for some messages which

301
00:11:59,220 --> 00:12:04,140
might be more common on an application

302
00:12:01,770 --> 00:12:05,460
which is getting chat messages than on

303
00:12:04,140 --> 00:12:08,490
an endpoint that is just getting the

304
00:12:05,460 --> 00:12:10,350
same values all the time and finally the

305
00:12:08,490 --> 00:12:13,110
state store so a place where we're going

306
00:12:10,350 --> 00:12:17,100
to stay a store some data which should

307
00:12:13,110 --> 00:12:20,730
be quite fast to retrieve and ideally

308
00:12:17,100 --> 00:12:21,690
you should be able to cache and one more

309
00:12:20,730 --> 00:12:24,720
component will be of course

310
00:12:21,690 --> 00:12:27,030
visualization so you want to be able to

311
00:12:24,720 --> 00:12:28,680
visualize the information I'm using your

312
00:12:27,030 --> 00:12:31,020
case or elasticsearch log stash and

313
00:12:28,680 --> 00:12:32,579
cavana and usually allow you to

314
00:12:31,020 --> 00:12:35,579
understand the activity of what's going

315
00:12:32,580 --> 00:12:37,890
on both in line and out of and have some

316
00:12:35,580 --> 00:12:40,320
metrics on the time that's taking

317
00:12:37,890 --> 00:12:42,960
especially for the in line so how much

318
00:12:40,320 --> 00:12:44,700
time is it adding or latency and they

319
00:12:42,960 --> 00:12:49,380
basically on the tax who is attacking

320
00:12:44,700 --> 00:12:51,270
for example so these are just sample -

321
00:12:49,380 --> 00:12:53,490
words that you might create in this case

322
00:12:51,270 --> 00:12:56,010
for example there are three different

323
00:12:53,490 --> 00:12:57,570
components and only modsecurity thinks

324
00:12:56,010 --> 00:12:59,430
it's an attack there are two components

325
00:12:57,570 --> 00:13:02,510
say this is not an attack so the

326
00:12:59,430 --> 00:13:05,160
recommendation is we should block it and

327
00:13:02,510 --> 00:13:07,439
one more component I built just for this

328
00:13:05,160 --> 00:13:09,750
chalk which is a management a command

329
00:13:07,440 --> 00:13:13,290
line tool so that you can compute this

330
00:13:09,750 --> 00:13:14,970
I've noticed it on the demo so now that

331
00:13:13,290 --> 00:13:16,800
we have covered how this architecture

332
00:13:14,970 --> 00:13:19,530
looks like then the question is how do

333
00:13:16,800 --> 00:13:20,899
we block because we I mentioned we don't

334
00:13:19,530 --> 00:13:22,670
want to have false positives so we do

335
00:13:20,899 --> 00:13:26,119
to block but the same time I did mention

336
00:13:22,670 --> 00:13:28,878
about false positives so that's why it

337
00:13:26,119 --> 00:13:31,490
can be a bit tricky to understand in

338
00:13:28,879 --> 00:13:33,740
particular that there are two types of

339
00:13:31,490 --> 00:13:35,720
false positives so detection on false

340
00:13:33,740 --> 00:13:37,459
positives I'm not in false positives but

341
00:13:35,720 --> 00:13:40,339
first on how do we decide something to

342
00:13:37,459 --> 00:13:42,888
be blocked there are three ways I

343
00:13:40,339 --> 00:13:45,379
mentioned so one is fingerprint-based

344
00:13:42,889 --> 00:13:47,119
routing at one point I mentioned 7,000

345
00:13:45,379 --> 00:13:49,790
fingerprints by fingerprint

346
00:13:47,119 --> 00:13:51,619
I mean ways to segment the traffic so

347
00:13:49,790 --> 00:13:53,748
you can imagine the normal thing of an

348
00:13:51,619 --> 00:13:55,999
IP address is your agent you would want

349
00:13:53,749 --> 00:13:58,399
to be a more advanced than that so

350
00:13:55,999 --> 00:14:01,189
ideally you will go to a step where you

351
00:13:58,399 --> 00:14:03,649
are basically looking at what looks like

352
00:14:01,189 --> 00:14:06,410
suspicious traffic and finding the way

353
00:14:03,649 --> 00:14:08,119
to cluster the traffic in the in the

354
00:14:06,410 --> 00:14:10,339
manual that affects only the suspicious

355
00:14:08,119 --> 00:14:11,990
traffic and then you will be able to say

356
00:14:10,339 --> 00:14:14,660
okay this suspicious traffic I want to

357
00:14:11,990 --> 00:14:17,209
actually may place it in line so in this

358
00:14:14,660 --> 00:14:19,040
way you don't have either outbound or in

359
00:14:17,209 --> 00:14:21,800
line mode you actually have both

360
00:14:19,040 --> 00:14:25,370
depending on the suspiciousness of

361
00:14:21,800 --> 00:14:27,949
different fingerprints and our option is

362
00:14:25,370 --> 00:14:30,199
by their net blocks so you could say for

363
00:14:27,949 --> 00:14:33,139
example hosting providers part where

364
00:14:30,199 --> 00:14:35,179
each piece proxies or two exit nodes you

365
00:14:33,139 --> 00:14:37,089
don't want to block all the traffic but

366
00:14:35,179 --> 00:14:40,040
you might be able to say okay based on

367
00:14:37,089 --> 00:14:42,470
my history and how many people actually

368
00:14:40,040 --> 00:14:45,319
use my service from this endpoint or I

369
00:14:42,470 --> 00:14:47,749
mean from these IP addresses I want to

370
00:14:45,319 --> 00:14:49,339
add the relent agency so have extra

371
00:14:47,749 --> 00:14:53,480
latency and have them always in an

372
00:14:49,339 --> 00:14:55,670
inline mode or virtual patching so there

373
00:14:53,480 --> 00:14:57,379
might be you get a call at 3:00 a.m. and

374
00:14:55,670 --> 00:14:59,329
there's an endpoint that you know that a

375
00:14:57,379 --> 00:15:01,370
particular parameter we have discovered

376
00:14:59,329 --> 00:15:03,469
its Pune rule so you might say okay for

377
00:15:01,370 --> 00:15:04,610
this particular endpoint any request

378
00:15:03,470 --> 00:15:07,100
that's going therefore with this

379
00:15:04,610 --> 00:15:10,600
parameter I want it always in an energy

380
00:15:07,100 --> 00:15:13,579
mode so always adding latency for this

381
00:15:10,600 --> 00:15:15,620
now back into that's how we actually

382
00:15:13,579 --> 00:15:18,199
segmented traffic to a site which what

383
00:15:15,620 --> 00:15:20,660
was in line and we can block but how do

384
00:15:18,199 --> 00:15:22,459
we manage the false positives because

385
00:15:20,660 --> 00:15:24,350
that's the problem like not security if

386
00:15:22,459 --> 00:15:26,029
you aren't tuning it constantly

387
00:15:24,350 --> 00:15:27,199
especially in an environment where

388
00:15:26,029 --> 00:15:28,429
people are responding different

389
00:15:27,199 --> 00:15:30,319
applications all the time

390
00:15:28,429 --> 00:15:32,240
can have a lot of different false

391
00:15:30,319 --> 00:15:33,920
positives so here's where I

392
00:15:32,240 --> 00:15:34,700
differentiate I differentiate between

393
00:15:33,920 --> 00:15:36,709
detection

394
00:15:34,700 --> 00:15:38,450
positives unblocking false positives so

395
00:15:36,710 --> 00:15:39,680
detection false positive I mean

396
00:15:38,450 --> 00:15:41,810
something like on securities is a

397
00:15:39,680 --> 00:15:44,180
request and says okay this might look

398
00:15:41,810 --> 00:15:45,680
like an SQL injection login false

399
00:15:44,180 --> 00:15:47,270
positives I mean we have actually

400
00:15:45,680 --> 00:15:49,849
blocked a request from our customer

401
00:15:47,270 --> 00:15:53,000
which we thought was dangerous but

402
00:15:49,850 --> 00:15:55,340
wasn't so this manages to remove the

403
00:15:53,000 --> 00:15:59,300
blocking false positives and how does it

404
00:15:55,340 --> 00:16:02,150
do it by looking at the context so what

405
00:15:59,300 --> 00:16:04,160
we check we check business logic so how

406
00:16:02,150 --> 00:16:05,959
does where feels I use an IP that goes

407
00:16:04,160 --> 00:16:07,420
back into the storage like bigquery

408
00:16:05,960 --> 00:16:09,830
where you would have this information

409
00:16:07,420 --> 00:16:12,910
business activity from the endpoint and

410
00:16:09,830 --> 00:16:15,620
what would be the impact to block it

411
00:16:12,910 --> 00:16:17,689
historical analysis right on this like

412
00:16:15,620 --> 00:16:20,330
for example if were in an endpoint that

413
00:16:17,690 --> 00:16:22,820
has a lot of detection for positive from

414
00:16:20,330 --> 00:16:24,170
what security you might not want to say

415
00:16:22,820 --> 00:16:26,180
that something suspicious if you see a

416
00:16:24,170 --> 00:16:27,650
single SQL injection that might actually

417
00:16:26,180 --> 00:16:30,199
affect the score for you to decide at a

418
00:16:27,650 --> 00:16:33,319
particular seventh of the traffic is

419
00:16:30,200 --> 00:16:36,380
suspicious or not and of course the

420
00:16:33,320 --> 00:16:38,990
context so in this case if somebody is

421
00:16:36,380 --> 00:16:41,210
doing has three or five detection of

422
00:16:38,990 --> 00:16:43,940
false positives in the same 30 seconds

423
00:16:41,210 --> 00:16:45,800
or in the same minute then that context

424
00:16:43,940 --> 00:16:48,620
changes a lot I'd miss that this is

425
00:16:45,800 --> 00:16:50,359
probably an attack so to you an example

426
00:16:48,620 --> 00:16:52,730
of what I mean by this change of the

427
00:16:50,360 --> 00:16:54,800
context let's do an example with the

428
00:16:52,730 --> 00:16:56,630
sweep if you have this kind of message I

429
00:16:54,800 --> 00:16:57,979
will sleep for one three days much a

430
00:16:56,630 --> 00:16:59,960
good is going to think this is an attack

431
00:16:57,980 --> 00:17:01,760
right you might want to chew it and say

432
00:16:59,960 --> 00:17:03,980
this particular endpoint when you see

433
00:17:01,760 --> 00:17:05,839
this / you want to increase the this

434
00:17:03,980 --> 00:17:08,270
score or decrease the anomaly score

435
00:17:05,839 --> 00:17:10,040
formal security but in the end this

436
00:17:08,270 --> 00:17:11,750
might change too fast for you to it and

437
00:17:10,040 --> 00:17:12,560
you will find out because people are

438
00:17:11,750 --> 00:17:15,500
complaining that you are actually

439
00:17:12,560 --> 00:17:17,389
blocking real customers now if you say

440
00:17:15,500 --> 00:17:21,470
that for example SQL injections with not

441
00:17:17,390 --> 00:17:24,230
security have 0.1% of false positive

442
00:17:21,470 --> 00:17:26,060
rate that's pretty high but if you will

443
00:17:24,230 --> 00:17:29,830
go with a very naive approach and we say

444
00:17:26,060 --> 00:17:32,210
we actually want to get to 0.001 percent

445
00:17:29,830 --> 00:17:34,610
which is going to be close to nothing

446
00:17:32,210 --> 00:17:36,620
from your perspective then you will say

447
00:17:34,610 --> 00:17:39,409
okay I just need a score five since

448
00:17:36,620 --> 00:17:41,629
these are independent probabilities that

449
00:17:39,410 --> 00:17:42,950
means that the that becomes that this is

450
00:17:41,630 --> 00:17:45,860
the probability of a user actually

451
00:17:42,950 --> 00:17:48,150
creating these five possible ask

452
00:17:45,860 --> 00:17:49,559
injections which are not as well

453
00:17:48,150 --> 00:17:52,500
Jaxon's you're actually the current

454
00:17:49,559 --> 00:17:53,399
customer and when you add this to all

455
00:17:52,500 --> 00:17:55,620
the information you have from the

456
00:17:53,400 --> 00:17:59,160
context and history at the endpoint it

457
00:17:55,620 --> 00:18:01,530
basically becomes zero the practical

458
00:17:59,160 --> 00:18:02,880
zero The Prodigy of getting any blocking

459
00:18:01,530 --> 00:18:05,639
force possible or at Estoril

460
00:18:02,880 --> 00:18:07,559
actually getting blocked of course this

461
00:18:05,640 --> 00:18:09,780
aims at attacks that need volume like

462
00:18:07,559 --> 00:18:11,220
for example SQL injections if you're

463
00:18:09,780 --> 00:18:13,170
worried about things like a zero-day

464
00:18:11,220 --> 00:18:14,970
that you know okay this particular

465
00:18:13,170 --> 00:18:17,460
request is going to immediately create a

466
00:18:14,970 --> 00:18:19,110
remote code execution at that point you

467
00:18:17,460 --> 00:18:21,480
would want to have this kind of

468
00:18:19,110 --> 00:18:23,010
fingerprints in the cache or if it's an

469
00:18:21,480 --> 00:18:25,500
endpoint like you are working with

470
00:18:23,010 --> 00:18:27,360
versus if the endpoint on a bank you

471
00:18:25,500 --> 00:18:31,380
might be able to say okay I can't accept

472
00:18:27,360 --> 00:18:33,120
any risk but this is geared towards the

473
00:18:31,380 --> 00:18:35,460
places where you might want to accept

474
00:18:33,120 --> 00:18:38,250
some risk like one request or two on you

475
00:18:35,460 --> 00:18:40,320
finding out afterwards and removing all

476
00:18:38,250 --> 00:18:44,670
the false positive impact and all the

477
00:18:40,320 --> 00:18:48,240
latency concerns so this is basically

478
00:18:44,670 --> 00:18:51,420
how the hybrid mode would work so to the

479
00:18:48,240 --> 00:18:53,520
benefit I mentioned or that the wife

480
00:18:51,420 --> 00:18:56,520
does not add agency for good users

481
00:18:53,520 --> 00:18:58,440
because once you turn this into in

482
00:18:56,520 --> 00:19:00,300
practice the traffic that you're routing

483
00:18:58,440 --> 00:19:01,920
through the earth is just the traffic

484
00:19:00,300 --> 00:19:03,840
that you have detected suspicious and

485
00:19:01,920 --> 00:19:05,760
this can be in a couple of seconds

486
00:19:03,840 --> 00:19:09,629
depending on how you are creating your

487
00:19:05,760 --> 00:19:11,220
out-of-band you're out of planned

488
00:19:09,630 --> 00:19:14,850
components depending what you use right

489
00:19:11,220 --> 00:19:16,890
and of course what you want and that has

490
00:19:14,850 --> 00:19:19,020
a lot of flexibility because now you can

491
00:19:16,890 --> 00:19:20,700
add as many components that you want so

492
00:19:19,020 --> 00:19:22,950
it's no longer the what mod security

493
00:19:20,700 --> 00:19:25,710
it's the what any component that you

494
00:19:22,950 --> 00:19:27,510
want to have all in parallel making the

495
00:19:25,710 --> 00:19:28,800
slowest of your component the the

496
00:19:27,510 --> 00:19:30,900
slowest response you're going to get

497
00:19:28,800 --> 00:19:32,610
from the earth so you might want to have

498
00:19:30,900 --> 00:19:34,620
your own body tection solution or

499
00:19:32,610 --> 00:19:37,620
something that analysis Google reCAPTCHA

500
00:19:34,620 --> 00:19:39,330
and all this information will be able to

501
00:19:37,620 --> 00:19:42,000
allow you to decide if you want to route

502
00:19:39,330 --> 00:19:44,340
traffic and block or not and of course

503
00:19:42,000 --> 00:19:46,410
this removes the false positives because

504
00:19:44,340 --> 00:19:47,879
you are now looking at a context we are

505
00:19:46,410 --> 00:19:49,080
no longer looking at single request

506
00:19:47,880 --> 00:19:51,510
might which might have a false positive

507
00:19:49,080 --> 00:19:53,070
you're looking at a context with some

508
00:19:51,510 --> 00:19:54,809
historical information which will allow

509
00:19:53,070 --> 00:19:58,980
you to decide if something should be

510
00:19:54,809 --> 00:20:00,570
blocked or not and the caveats the

511
00:19:58,980 --> 00:20:01,920
delayed response time might be

512
00:20:00,570 --> 00:20:04,530
prohibitive

513
00:20:01,920 --> 00:20:07,470
for some endpoint depending on your risk

514
00:20:04,530 --> 00:20:09,870
so for if you can't have like one second

515
00:20:07,470 --> 00:20:12,450
or two seconds of requests which are not

516
00:20:09,870 --> 00:20:14,219
going in in a line mode and it increased

517
00:20:12,450 --> 00:20:16,140
complexity which if you already have

518
00:20:14,220 --> 00:20:18,810
your log processing pipeline because you

519
00:20:16,140 --> 00:20:20,400
are getting access logs from nginx and

520
00:20:18,810 --> 00:20:21,810
then doing something with that it might

521
00:20:20,400 --> 00:20:23,850
not be a lot more but if you don't have

522
00:20:21,810 --> 00:20:29,909
anything of that it might mean having

523
00:20:23,850 --> 00:20:32,070
more components so yeah so this is it I

524
00:20:29,910 --> 00:20:36,980
will try now to do a demo if everything

525
00:20:32,070 --> 00:20:36,980
works yes

526
00:20:39,440 --> 00:20:47,790
so first let me show you for this demo I

527
00:20:44,640 --> 00:20:52,830
have everything on Google Cloud using

528
00:20:47,790 --> 00:20:55,460
the cornices engine so it's sticking a

529
00:20:52,830 --> 00:20:55,460
bit come on

530
00:20:57,590 --> 00:21:04,020
so here we have the demo work which is a

531
00:21:00,930 --> 00:21:05,400
flask website elastic search given our

532
00:21:04,020 --> 00:21:16,650
log stash which will give the

533
00:21:05,400 --> 00:21:18,510
visualization so yeah then you have

534
00:21:16,650 --> 00:21:20,280
rails which is the storage I just

535
00:21:18,510 --> 00:21:22,980
created this container which is Canada

536
00:21:20,280 --> 00:21:25,920
which is doing every one hour of 30

537
00:21:22,980 --> 00:21:28,050
minutes SQL map and some more scans and

538
00:21:25,920 --> 00:21:29,640
the web service which is nearly

539
00:21:28,050 --> 00:21:31,139
important one and then of course the

540
00:21:29,640 --> 00:21:31,830
larger which is the one that's detecting

541
00:21:31,140 --> 00:21:33,180
and deciding okay

542
00:21:31,830 --> 00:21:37,949
this traffic should be routed through

543
00:21:33,180 --> 00:21:42,450
one so let me see if the proxy there now

544
00:21:37,950 --> 00:21:46,520
let's do a test

545
00:21:42,450 --> 00:21:50,840
so first I'm now in the in the web

546
00:21:46,520 --> 00:21:50,840
service where have a command line tool

547
00:21:52,010 --> 00:21:57,780
so here I have the configuration so I

548
00:21:55,260 --> 00:22:00,090
have the request stage which means when

549
00:21:57,780 --> 00:22:02,879
the website gets a request disabled so

550
00:22:00,090 --> 00:22:05,040
nothing going on no traffic will go in

551
00:22:02,880 --> 00:22:07,020
line this is probably the IP of the

552
00:22:05,040 --> 00:22:09,840
letter of the scanner so this was

553
00:22:07,020 --> 00:22:12,060
detected automatically and what I'm

554
00:22:09,840 --> 00:22:15,240
going to do now is just go to the

555
00:22:12,060 --> 00:22:19,559
website I have

556
00:22:15,240 --> 00:22:22,170
here so this should load works fine now

557
00:22:19,559 --> 00:22:24,690
I will try for example to do an SQL

558
00:22:22,170 --> 00:22:27,840
injection which should be picked up by

559
00:22:24,690 --> 00:22:30,809
Mott security so this is working because

560
00:22:27,840 --> 00:22:33,178
there's no node it enabled so the graph

561
00:22:30,809 --> 00:22:36,450
is basically disabled so the first thing

562
00:22:33,179 --> 00:22:38,550
I will do is I will configure this to

563
00:22:36,450 --> 00:22:41,370
block every single so everything goes in

564
00:22:38,550 --> 00:22:43,050
line so we want all the traffic to all

565
00:22:41,370 --> 00:22:45,000
in line which is what usually happens

566
00:22:43,050 --> 00:22:46,889
with our earth but of course every

567
00:22:45,000 --> 00:22:49,800
request is adding latency so you can see

568
00:22:46,890 --> 00:22:52,410
it took a lot longer and now ok it's

569
00:22:49,800 --> 00:22:55,320
blocked this is great

570
00:22:52,410 --> 00:22:57,450
but we actually care about latency in

571
00:22:55,320 --> 00:23:01,559
this case so what I will do is I will

572
00:22:57,450 --> 00:23:05,420
change in the mode so that now we see

573
00:23:01,559 --> 00:23:08,870
that it's configured as identifier mode

574
00:23:05,420 --> 00:23:12,570
this means that when I do this request

575
00:23:08,870 --> 00:23:16,229
it knows that it should not go through a

576
00:23:12,570 --> 00:23:17,490
graph because it has seen that only a

577
00:23:16,230 --> 00:23:19,020
single class happens there's no

578
00:23:17,490 --> 00:23:19,760
information the state saying that this

579
00:23:19,020 --> 00:23:24,720
is bad

580
00:23:19,760 --> 00:23:28,610
so what should happen now is that behind

581
00:23:24,720 --> 00:23:30,960
the scenes the the outer pant

582
00:23:28,610 --> 00:23:32,850
architecture or data flow is leaking all

583
00:23:30,960 --> 00:23:34,380
these requests I just made see that

584
00:23:32,850 --> 00:23:36,980
there's an attack going on and decides

585
00:23:34,380 --> 00:23:38,880
to take a fingerprint so the IP address

586
00:23:36,980 --> 00:23:41,730
something that should draw the traffic

587
00:23:38,880 --> 00:23:43,350
so if I check now the config you can see

588
00:23:41,730 --> 00:23:45,960
that now this IP address has appeared

589
00:23:43,350 --> 00:23:49,980
which should be my IP address so if i

590
00:23:45,960 --> 00:23:51,600
refresh now this are now in run mode so

591
00:23:49,980 --> 00:23:53,280
what happens basically a couple of

592
00:23:51,600 --> 00:23:55,080
requests happened the out of hand

593
00:23:53,280 --> 00:23:59,160
process look at this request actually we

594
00:23:55,080 --> 00:24:02,189
can see this in elasticsearch they saw

595
00:23:59,160 --> 00:24:04,950
that traffic and so this is the traffic

596
00:24:02,190 --> 00:24:07,140
that was generated let me see if I see

597
00:24:04,950 --> 00:24:09,960
more IP addresses besides mine so it's

598
00:24:07,140 --> 00:24:11,340
just my IP address now what happened

599
00:24:09,960 --> 00:24:13,320
here is that most of the traffic

600
00:24:11,340 --> 00:24:15,750
happened on replay which means that

601
00:24:13,320 --> 00:24:18,149
there is happen in doubt of one node at

602
00:24:15,750 --> 00:24:21,150
some point out of man mode sent to the

603
00:24:18,150 --> 00:24:23,490
alert or component or detection

604
00:24:21,150 --> 00:24:25,679
component hey I see this we our traffic

605
00:24:23,490 --> 00:24:28,260
the JSON component I did a query to

606
00:24:25,679 --> 00:24:28,990
bigquery and checked ok is the context

607
00:24:28,260 --> 00:24:31,059
of this something

608
00:24:28,990 --> 00:24:32,559
should use for my scoring and decided

609
00:24:31,059 --> 00:24:35,500
this is traffic I should draw it because

610
00:24:32,559 --> 00:24:39,580
it looked suspicious and afterwards with

611
00:24:35,500 --> 00:24:42,940
the the wife got in there because were

612
00:24:39,580 --> 00:24:45,668
in line mode and in the request stage so

613
00:24:42,940 --> 00:24:49,809
if we just look at the time of the

614
00:24:45,669 --> 00:24:53,440
request we can see that this request for

615
00:24:49,809 --> 00:24:56,470
example let's just look at the will was

616
00:24:53,440 --> 00:24:58,690
on the replay stage the wife review but

617
00:24:56,470 --> 00:25:00,429
afterwards it went on the request stage

618
00:24:58,690 --> 00:25:04,750
because at that point the cache was

619
00:25:00,429 --> 00:25:10,299
updated so now let's do another example

620
00:25:04,750 --> 00:25:13,059
I will just delete this identifier and

621
00:25:10,299 --> 00:25:15,270
let's say that we have a for example an

622
00:25:13,059 --> 00:25:15,270
endpoint

623
00:25:21,380 --> 00:25:26,390
so we have a ping endpoint and in this

624
00:25:24,440 --> 00:25:28,820
case again it's not going inland because

625
00:25:26,390 --> 00:25:30,320
I just delete it from the cache so if I

626
00:25:28,820 --> 00:25:32,418
do a couple of more requests it will go

627
00:25:30,320 --> 00:25:33,950
back inland of course in this case you

628
00:25:32,419 --> 00:25:35,690
delete the cache the cache would be stay

629
00:25:33,950 --> 00:25:38,630
and depending on what you want

630
00:25:35,690 --> 00:25:40,640
but what we can do in these cases is

631
00:25:38,630 --> 00:25:42,470
have the flexibility to say okay we

632
00:25:40,640 --> 00:25:43,760
actually want to be jewelley patch this

633
00:25:42,470 --> 00:25:46,760
endpoint because there we know there's a

634
00:25:43,760 --> 00:25:49,520
big narrative on the ping endpoint so

635
00:25:46,760 --> 00:25:51,110
now this should be locked because now

636
00:25:49,520 --> 00:25:53,389
this particular endpoint or particular

637
00:25:51,110 --> 00:25:55,158
endpoint and parameters were saying that

638
00:25:53,390 --> 00:25:57,110
we want it in line so in a way we are

639
00:25:55,159 --> 00:25:58,909
basically deciding depending on

640
00:25:57,110 --> 00:26:00,918
automatic detection or manual

641
00:25:58,909 --> 00:26:03,350
interaction how we will route all

642
00:26:00,919 --> 00:26:05,390
traffic if we want it to go in and on or

643
00:26:03,350 --> 00:26:07,730
out of and so not based on a particular

644
00:26:05,390 --> 00:26:10,159
application but particular traffic

645
00:26:07,730 --> 00:26:12,140
itself based on how you detect it so

646
00:26:10,159 --> 00:26:14,240
first ask question a you basically just

647
00:26:12,140 --> 00:26:18,159
passed your bot security rules to

648
00:26:14,240 --> 00:26:21,169
actually do it in line no no so maybe

649
00:26:18,159 --> 00:26:27,020
the I can explain that so let's go to

650
00:26:21,169 --> 00:26:28,669
the next slide so let's go through what

651
00:26:27,020 --> 00:26:31,639
happened right because it you can look

652
00:26:28,669 --> 00:26:33,559
of it it can be hard to explain so first

653
00:26:31,640 --> 00:26:35,840
your stick we have the first request we

654
00:26:33,559 --> 00:26:38,539
want to observer right so application

655
00:26:35,840 --> 00:26:40,399
and return the author plot now what

656
00:26:38,539 --> 00:26:43,010
happened behind the scenes is that the

657
00:26:40,400 --> 00:26:45,110
application has a cache of the storage

658
00:26:43,010 --> 00:26:46,970
which check is there anything from this

659
00:26:45,110 --> 00:26:49,428
request like the IP address user agent

660
00:26:46,970 --> 00:26:51,650
or whatever combination you have which I

661
00:26:49,429 --> 00:26:53,270
think it should go in an in read mode

662
00:26:51,650 --> 00:26:56,659
there was nothing because we just

663
00:26:53,270 --> 00:26:59,750
started and that means that after it

664
00:26:56,659 --> 00:27:02,150
responded to us did creating a log so

665
00:26:59,750 --> 00:27:04,159
that will that a log had information of

666
00:27:02,150 --> 00:27:06,860
the request which didn't go in in line

667
00:27:04,159 --> 00:27:08,120
mode got into out of an processing

668
00:27:06,860 --> 00:27:10,789
component which is better flow and

669
00:27:08,120 --> 00:27:14,719
letter flow say okay this request I will

670
00:27:10,789 --> 00:27:16,400
do a request to a graph API and I just

671
00:27:14,720 --> 00:27:20,000
leave it there a request to a graph API

672
00:27:16,400 --> 00:27:21,620
and got a response not a if modsecurity

673
00:27:20,000 --> 00:27:23,750
should block it or well not just not

674
00:27:21,620 --> 00:27:25,520
security but the rate limiter mode

675
00:27:23,750 --> 00:27:27,289
security and the other component what

676
00:27:25,520 --> 00:27:30,429
they've thought about it so do you think

677
00:27:27,289 --> 00:27:33,140
it's correct or is it an attack or not

678
00:27:30,429 --> 00:27:34,940
then after a period of time because I

679
00:27:33,140 --> 00:27:36,799
did like a couple of requests

680
00:27:34,940 --> 00:27:39,619
that's a salsa okay in a window 30

681
00:27:36,799 --> 00:27:40,279
seconds I saw five requests which look

682
00:27:39,619 --> 00:27:43,580
suspicious

683
00:27:40,279 --> 00:27:46,279
let's send update to a detection module

684
00:27:43,580 --> 00:27:49,158
saying okay this particular fingerprint

685
00:27:46,279 --> 00:27:51,649
I just detected look suspicious where

686
00:27:49,159 --> 00:27:52,820
you now you still should not say okay I

687
00:27:51,649 --> 00:27:54,678
should block it this is your opportunity

688
00:27:52,820 --> 00:27:56,809
because you know how the one segment

689
00:27:54,679 --> 00:27:58,999
just wants to say okay actually that's

690
00:27:56,809 --> 00:28:01,070
poor information I having databases I

691
00:27:58,999 --> 00:28:02,749
might have on my history to get more

692
00:28:01,070 --> 00:28:04,879
context on this because maybe this an

693
00:28:02,749 --> 00:28:08,059
end point where I want to not just say

694
00:28:04,879 --> 00:28:09,559
five SQL injections are bad maybe in

695
00:28:08,059 --> 00:28:11,960
this end point based on the historical

696
00:28:09,559 --> 00:28:13,580
score I want to think that ten because

697
00:28:11,960 --> 00:28:16,220
of everything is considered because mod

698
00:28:13,580 --> 00:28:19,309
security is not tuned for example at

699
00:28:16,220 --> 00:28:20,869
that point the starch was updated with

700
00:28:19,309 --> 00:28:23,509
this fingerprint in this case this IP

701
00:28:20,869 --> 00:28:25,488
address so the next request that a casa

702
00:28:23,509 --> 00:28:28,849
idea and well to our application

703
00:28:25,489 --> 00:28:30,739
check this storage and since the cache a

704
00:28:28,849 --> 00:28:32,599
had been updated and now it has an IP

705
00:28:30,739 --> 00:28:33,889
address and since this is an update on a

706
00:28:32,599 --> 00:28:35,629
cache that means that it's not like

707
00:28:33,889 --> 00:28:38,059
everything we request adding like five

708
00:28:35,629 --> 00:28:40,639
milliseconds to Redis this happened once

709
00:28:38,059 --> 00:28:43,820
or a different thread depending on your

710
00:28:40,639 --> 00:28:46,070
language and then since we had that

711
00:28:43,820 --> 00:28:50,149
fingerprint this traffic was now routed

712
00:28:46,070 --> 00:28:52,428
so only that request when it could see

713
00:28:50,149 --> 00:28:54,518
the fingerprints on the cash became an

714
00:28:52,429 --> 00:28:57,799
inline request adding the latency and

715
00:28:54,519 --> 00:29:00,470
since we have some context to say that

716
00:28:57,799 --> 00:29:02,330
we should rather traffic they we and we

717
00:29:00,470 --> 00:29:04,669
are pretty confident this is malicious

718
00:29:02,330 --> 00:29:07,279
then it's no longer affecting with false

719
00:29:04,669 --> 00:29:09,590
positives because at this point it's the

720
00:29:07,279 --> 00:29:11,119
probability of we thinking our

721
00:29:09,590 --> 00:29:13,939
fingerprints these malicious is very

722
00:29:11,119 --> 00:29:15,470
small of course one thing that could

723
00:29:13,940 --> 00:29:17,599
happen here is if you have a very naive

724
00:29:15,470 --> 00:29:20,599
where your fingerprinting like just ap

725
00:29:17,599 --> 00:29:21,080
address or or worse an ISP that would be

726
00:29:20,599 --> 00:29:22,668
terrible

727
00:29:21,080 --> 00:29:26,059
so you you know want to go with

728
00:29:22,669 --> 00:29:28,129
something like that so I have supposed

729
00:29:26,059 --> 00:29:28,999
to collect that projected amount if I

730
00:29:28,129 --> 00:29:31,639
was to ask the questions are basically

731
00:29:28,999 --> 00:29:34,399
initially everything does it in parallel

732
00:29:31,639 --> 00:29:36,918
processing then you get the flag set in

733
00:29:34,399 --> 00:29:38,689
your storage database that says we now

734
00:29:36,919 --> 00:29:40,399
do it in line at some point does that

735
00:29:38,690 --> 00:29:41,629
get updated and say we now set that to

736
00:29:40,399 --> 00:29:44,029
blocking mode that doesn't even do it in

737
00:29:41,629 --> 00:29:46,580
line it just drops it straight away so

738
00:29:44,029 --> 00:29:48,620
your question is that instead of going

739
00:29:46,580 --> 00:29:50,530
to your wife

740
00:29:48,620 --> 00:29:53,689
itself before asking what just blocks it

741
00:29:50,530 --> 00:29:57,950
so the idea would be no because you

742
00:29:53,690 --> 00:29:59,630
don't want to add this logic to the so

743
00:29:57,950 --> 00:30:01,640
there's two things one is you don't want

744
00:29:59,630 --> 00:30:03,110
the logic to the application so you want

745
00:30:01,640 --> 00:30:04,820
to or the agent or the library you want

746
00:30:03,110 --> 00:30:06,500
to keep it as thin as possible the

747
00:30:04,820 --> 00:30:08,360
second one is as I mentioned before if

748
00:30:06,500 --> 00:30:12,080
you have a fingerprint which is not

749
00:30:08,360 --> 00:30:14,209
completely unique for dementia sector in

750
00:30:12,080 --> 00:30:16,250
this case the normal users in the

751
00:30:14,210 --> 00:30:18,140
similar speed would still be working

752
00:30:16,250 --> 00:30:20,270
just that they would have extra latency

753
00:30:18,140 --> 00:30:21,440
and affected by the false positive rate

754
00:30:20,270 --> 00:30:24,260
of detection

755
00:30:21,440 --> 00:30:26,300
so let me said if you have a very naive

756
00:30:24,260 --> 00:30:28,280
approach you put a whole ISP and some

757
00:30:26,300 --> 00:30:30,620
people are using a proxy in Google cloud

758
00:30:28,280 --> 00:30:32,210
then you're adding them a bit more

759
00:30:30,620 --> 00:30:33,530
latency but you're not just blocking all

760
00:30:32,210 --> 00:30:35,840
the traffic you're just blocking

761
00:30:33,530 --> 00:30:38,830
whatever it looks like attack for MOT

762
00:30:35,840 --> 00:30:51,590
security or for any of your component

763
00:30:38,830 --> 00:30:53,149
yes yes so that's a part of okay so the

764
00:30:51,590 --> 00:30:55,399
question is what happens if the first

765
00:30:53,150 --> 00:30:57,530
request is malicious here is the tricky

766
00:30:55,400 --> 00:31:00,050
part which I mentioned in the caveat if

767
00:30:57,530 --> 00:31:01,879
you know that if you know that for

768
00:31:00,050 --> 00:31:03,530
example some particular fingerprints

769
00:31:01,880 --> 00:31:05,840
allow you to understand this is a

770
00:31:03,530 --> 00:31:07,490
zero-day you would want to have them on

771
00:31:05,840 --> 00:31:09,080
the cache but let's say that you don't

772
00:31:07,490 --> 00:31:10,280
know about this and somebody just got

773
00:31:09,080 --> 00:31:12,889
the perfect

774
00:31:10,280 --> 00:31:14,360
SQL injection which is not blind so it

775
00:31:12,890 --> 00:31:16,490
actually just dumped all the database

776
00:31:14,360 --> 00:31:18,500
with a single request or a single remote

777
00:31:16,490 --> 00:31:21,500
code execution that means that the first

778
00:31:18,500 --> 00:31:23,600
request would pass by but then a it

779
00:31:21,500 --> 00:31:25,370
would still detect it afterwards should

780
00:31:23,600 --> 00:31:28,250
be so your analyst would know about it

781
00:31:25,370 --> 00:31:30,139
but then of course if they continue with

782
00:31:28,250 --> 00:31:32,300
more requests it would can start going

783
00:31:30,140 --> 00:31:35,030
in line but that's the basically the

784
00:31:32,300 --> 00:31:37,040
risk if you think that a single request

785
00:31:35,030 --> 00:31:40,040
is going to basically drop your entire

786
00:31:37,040 --> 00:31:41,510
website then that are a risk where you

787
00:31:40,040 --> 00:31:44,030
might want to have everything in line or

788
00:31:41,510 --> 00:31:45,800
even yet be depending on some endpoints

789
00:31:44,030 --> 00:31:47,720
and their criticality you might want the

790
00:31:45,800 --> 00:31:50,419
whole some endpoint to be in line so

791
00:31:47,720 --> 00:31:52,220
some part you URL paths for example and

792
00:31:50,420 --> 00:31:54,590
that's what am i color questo to ask is

793
00:31:52,220 --> 00:31:56,420
have you done any profile to see how

794
00:31:54,590 --> 00:31:58,928
many requests somebody might actually do

795
00:31:56,420 --> 00:32:01,100
as a targeted free profile attacker

796
00:31:58,929 --> 00:32:01,970
potentially being able to compromise

797
00:32:01,100 --> 00:32:03,649
your database

798
00:32:01,970 --> 00:32:06,710
once they realize you've got this

799
00:32:03,650 --> 00:32:09,130
structure in place before your parallel

800
00:32:06,710 --> 00:32:12,770
processing actually can drop that

801
00:32:09,130 --> 00:32:15,610
indicator that input so I do have data

802
00:32:12,770 --> 00:32:18,350
to support this my only analysis is that

803
00:32:15,610 --> 00:32:20,959
for sure this can happen in two cases

804
00:32:18,350 --> 00:32:22,790
one word something like a CoA or some

805
00:32:20,960 --> 00:32:24,770
kind of gravity which is well known and

806
00:32:22,790 --> 00:32:26,720
unpatched so there are a couple of ones

807
00:32:24,770 --> 00:32:28,400
which you know a single request at which

808
00:32:26,720 --> 00:32:31,790
point you would at least the state

809
00:32:28,400 --> 00:32:35,000
search or if for example either an

810
00:32:31,790 --> 00:32:37,550
internal entire threat or somebody who

811
00:32:35,000 --> 00:32:39,290
has has access to your code is able to

812
00:32:37,550 --> 00:32:40,940
for example do the thousands of requests

813
00:32:39,290 --> 00:32:43,370
you need to finance conjecture or remote

814
00:32:40,940 --> 00:32:44,900
code execution finds that one in the ti

815
00:32:43,370 --> 00:32:47,090
parallel environment and then uses that

816
00:32:44,900 --> 00:32:48,680
request so those are the risk to take

817
00:32:47,090 --> 00:32:50,120
into account and depending on your

818
00:32:48,680 --> 00:32:51,710
application it might might be a risk

819
00:32:50,120 --> 00:32:53,030
that you can accept or you cannot accept

820
00:32:51,710 --> 00:32:54,950
because you're still finding out about

821
00:32:53,030 --> 00:32:57,230
it afterwards but I mean you haven't

822
00:32:54,950 --> 00:32:58,850
blocked this single first request for

823
00:32:57,230 --> 00:33:00,980
example for a party or a fingerprint of

824
00:32:58,850 --> 00:33:03,439
traffic that's why I also mentioned they

825
00:33:00,980 --> 00:33:05,660
saying for example some part where net

826
00:33:03,440 --> 00:33:07,910
networks you might want to always have

827
00:33:05,660 --> 00:33:10,400
them in line because you are reducing

828
00:33:07,910 --> 00:33:12,290
the risk and E you might be able to

829
00:33:10,400 --> 00:33:17,380
afford adding the latency for those

830
00:33:12,290 --> 00:33:17,379
particular segments of the network yes

831
00:33:20,470 --> 00:33:25,160
hey I'm interested in your protocol any

832
00:33:23,570 --> 00:33:28,189
different fingerprints do you notice

833
00:33:25,160 --> 00:33:30,680
that most of those fingerprinted attack

834
00:33:28,190 --> 00:33:34,430
patterns come from generic web browsers

835
00:33:30,680 --> 00:33:37,910
and not from your pre-configured apps

836
00:33:34,430 --> 00:33:39,950
like if well I'm just looking at apps in

837
00:33:37,910 --> 00:33:41,900
an app store for your like booking com I

838
00:33:39,950 --> 00:33:43,340
think is essentially back to a fat

839
00:33:41,900 --> 00:33:45,680
client where you've got better control

840
00:33:43,340 --> 00:33:54,260
over the character is characteristics of

841
00:33:45,680 --> 00:33:58,520
how that app behaves right thank you yes

842
00:33:54,260 --> 00:34:00,590
so on purpose I'm not describing how the

843
00:33:58,520 --> 00:34:02,000
booking will come solution is but how a

844
00:34:00,590 --> 00:34:04,820
scene architecture can be implemented

845
00:34:02,000 --> 00:34:06,770
what I can say from fingerprints is user

846
00:34:04,820 --> 00:34:08,659
agents are not a good fingerprint it's

847
00:34:06,770 --> 00:34:10,699
very easy to fake and most people

848
00:34:08,659 --> 00:34:13,759
already have headless browsers which are

849
00:34:10,699 --> 00:34:15,799
using like regular user agents but

850
00:34:13,760 --> 00:34:18,500
something that always surprised me is

851
00:34:15,800 --> 00:34:19,730
how good I P addresses are as a

852
00:34:18,500 --> 00:34:21,350
fingerprint just by themselves you

853
00:34:19,730 --> 00:34:23,300
shouldn't just use one but they are

854
00:34:21,350 --> 00:34:25,610
better than you would expect a lot you

855
00:34:23,300 --> 00:34:27,380
always want to do combinations of them

856
00:34:25,610 --> 00:34:29,960
because it's very hard to fake all the

857
00:34:27,380 --> 00:34:31,910
combinations and even then you if

858
00:34:29,960 --> 00:34:32,990
somebody has a mass component and it's

859
00:34:31,909 --> 00:34:36,770
doing everything right

860
00:34:32,989 --> 00:34:38,959
worst case at this huge attack charlie

861
00:34:36,770 --> 00:34:41,230
percentage of your traffic now has added

862
00:34:38,960 --> 00:34:44,720
latency oh yeah you're just dropping it

863
00:34:41,230 --> 00:34:46,520
yes so I will have more question

864
00:34:44,719 --> 00:34:49,370
afterwards but just to go through a

865
00:34:46,520 --> 00:34:51,920
summary as I mentioned the benefits are

866
00:34:49,370 --> 00:34:53,750
you have the reduce customer impact so

867
00:34:51,920 --> 00:34:56,330
you only add the latency to a malicious

868
00:34:53,750 --> 00:34:58,430
actors by doing this you also stop the

869
00:34:56,330 --> 00:34:59,750
post positives because only them are

870
00:34:58,430 --> 00:35:02,060
suffering from the false positive rate

871
00:34:59,750 --> 00:35:04,640
and you can specially different

872
00:35:02,060 --> 00:35:08,390
behaviors based on the applications risk

873
00:35:04,640 --> 00:35:09,710
and by their third model and how they

874
00:35:08,390 --> 00:35:13,400
actually work on what do you care about

875
00:35:09,710 --> 00:35:15,380
them and their point here having the

876
00:35:13,400 --> 00:35:17,390
service now adds a lot of flexibility

877
00:35:15,380 --> 00:35:19,490
not just because you can add any

878
00:35:17,390 --> 00:35:22,250
components you want so you can call your

879
00:35:19,490 --> 00:35:23,930
own or plug a different solutions so you

880
00:35:22,250 --> 00:35:26,360
just you don't have to assign between

881
00:35:23,930 --> 00:35:29,180
modsecurity and Maxie you just can use

882
00:35:26,360 --> 00:35:32,030
both and then have an in-sample decision

883
00:35:29,180 --> 00:35:34,490
whatever you want and it allows to enter

884
00:35:32,030 --> 00:35:36,140
it very rapidly so you could just say if

885
00:35:34,490 --> 00:35:38,060
you've gone with the agent or the

886
00:35:36,140 --> 00:35:39,799
library mode it's very thin especially

887
00:35:38,060 --> 00:35:42,920
with the library developers are very

888
00:35:39,800 --> 00:35:44,570
used to using API calls so you can just

889
00:35:42,920 --> 00:35:46,010
tell them to an API call with this

890
00:35:44,570 --> 00:35:47,870
information or you give them this

891
00:35:46,010 --> 00:35:50,180
library and it's a very easy way to

892
00:35:47,870 --> 00:35:52,100
boost wrap them and to give them an idea

893
00:35:50,180 --> 00:35:53,720
and they feel a lot of power because

894
00:35:52,100 --> 00:35:55,790
they it's they're very used to this they

895
00:35:53,720 --> 00:36:01,009
can use their code around it if they

896
00:35:55,790 --> 00:36:02,840
want so yeah this is on github so for

897
00:36:01,010 --> 00:36:04,550
this case you can just use terror from

898
00:36:02,840 --> 00:36:06,530
to set up the same thing and it will

899
00:36:04,550 --> 00:36:08,960
just run on your Google Cloud project

900
00:36:06,530 --> 00:36:11,990
and now if you have any additional

901
00:36:08,960 --> 00:36:13,580
questions we have three minutes if

902
00:36:11,990 --> 00:36:15,680
there's anybody else with questions this

903
00:36:13,580 --> 00:36:16,910
has been an absolutely brilliant talk

904
00:36:15,680 --> 00:36:18,740
I've worked in this sort of space and

905
00:36:16,910 --> 00:36:20,000
built my own stuff but my dream was to

906
00:36:18,740 --> 00:36:22,430
do something similar so I can actually

907
00:36:20,000 --> 00:36:24,980
do some detection monitoring how to band

908
00:36:22,430 --> 00:36:26,149
as well as doing the whitelisting and

909
00:36:24,980 --> 00:36:28,010
inspection at the front end for the

910
00:36:26,150 --> 00:36:29,630
stuff that we know we need to protect so

911
00:36:28,010 --> 00:36:33,250
this looks fantastic thank you

912
00:36:29,630 --> 00:36:33,250
than the case it be also any questions I

913
00:36:34,090 --> 00:36:39,110
think everybody stopped yeah no my next

914
00:36:37,550 --> 00:36:40,670
question is going to be is this is there

915
00:36:39,110 --> 00:36:42,050
an open source project around this that

916
00:36:40,670 --> 00:36:43,760
we can actually use a framework to

917
00:36:42,050 --> 00:36:45,320
actually bootstrap the same sort of

918
00:36:43,760 --> 00:36:48,410
solution so this is absolutely fantastic

919
00:36:45,320 --> 00:36:50,690
thank you so from my point I don't see

920
00:36:48,410 --> 00:36:53,390
that it's I feed more than architecture

921
00:36:50,690 --> 00:36:55,400
than so that's why the whole code is

922
00:36:53,390 --> 00:36:56,720
there in github so you can look at all

923
00:36:55,400 --> 00:36:58,220
the different services are used for the

924
00:36:56,720 --> 00:36:59,839
talk if you run the script you will

925
00:36:58,220 --> 00:37:01,910
create your own corn it is engine with

926
00:36:59,840 --> 00:37:03,290
all the different pods and then you can

927
00:37:01,910 --> 00:37:04,700
just play with it as much as you want

928
00:37:03,290 --> 00:37:07,610
that is fantastic

929
00:37:04,700 --> 00:37:09,839
Oh can everybody else help me thanks so

930
00:37:07,610 --> 00:37:12,979
this is Ashley thank you very much

931
00:37:09,840 --> 00:37:12,979
[Applause]

