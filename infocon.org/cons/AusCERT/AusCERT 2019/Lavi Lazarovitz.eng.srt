1
00:00:00,149 --> 00:00:06,870
it's my pleasure to introduce la vie la

2
00:00:02,100 --> 00:00:08,730
Zarate I kinda got there nearly here la

3
00:00:06,870 --> 00:00:11,550
vie is the group research manager at

4
00:00:08,730 --> 00:00:13,230
cyber-ark he leads a group of security

5
00:00:11,550 --> 00:00:15,210
researchers in vulnerability research

6
00:00:13,230 --> 00:00:16,770
and writing about information security

7
00:00:15,210 --> 00:00:19,289
which you may have seen in some

8
00:00:16,770 --> 00:00:21,420
magazines and blogs around the world la

9
00:00:19,289 --> 00:00:24,119
vie is also into researching and coding

10
00:00:21,420 --> 00:00:26,220
prototypes and Persis concepts working

11
00:00:24,119 --> 00:00:27,960
alongside a dedicated team he studies

12
00:00:26,220 --> 00:00:30,179
the methods and tactics employed by

13
00:00:27,960 --> 00:00:33,090
hackers to penetrate and move laterally

14
00:00:30,179 --> 00:00:36,059
across an organization's network he's

15
00:00:33,090 --> 00:00:38,280
responsible for devising effective

16
00:00:36,059 --> 00:00:41,218
detection and mitigation techniques to

17
00:00:38,280 --> 00:00:49,379
Swart cyber attacks if you could please

18
00:00:41,219 --> 00:00:51,270
welcome ravi to the stage alright so

19
00:00:49,379 --> 00:00:53,309
first of all good morning and I'd like

20
00:00:51,270 --> 00:00:56,460
to start by complimenting you by making

21
00:00:53,309 --> 00:01:00,620
a great choice this morning to see this

22
00:00:56,460 --> 00:01:00,620
talk I'm sure it will be different

23
00:01:01,160 --> 00:01:09,000
usually this these conversations tend to

24
00:01:05,970 --> 00:01:11,369
be a little bit best practices a little

25
00:01:09,000 --> 00:01:14,729
bit strategy I'll try to deep dive into

26
00:01:11,369 --> 00:01:19,590
the details without making it boring as

27
00:01:14,729 --> 00:01:24,570
hell I'll try to do that so allow me to

28
00:01:19,590 --> 00:01:26,880
start a few a few years ago many digital

29
00:01:24,570 --> 00:01:30,960
business businesses get a new shiny

30
00:01:26,880 --> 00:01:33,030
block about 11 years ago if we talk

31
00:01:30,960 --> 00:01:36,298
about Linux containers and about six

32
00:01:33,030 --> 00:01:41,060
years ago if we talk about docker now if

33
00:01:36,299 --> 00:01:44,790
you are securing containers in the

34
00:01:41,060 --> 00:01:46,799
organization's you are coming from or if

35
00:01:44,790 --> 00:01:48,240
you were dealing with containers then I

36
00:01:46,799 --> 00:01:50,340
have a couple of insights to share with

37
00:01:48,240 --> 00:01:54,649
you today that are usually not talked

38
00:01:50,340 --> 00:01:58,320
about a lot so this is the plan

39
00:01:54,649 --> 00:02:01,560
and I also I also should say that this

40
00:01:58,320 --> 00:02:04,279
session is based upon research that we

41
00:02:01,560 --> 00:02:06,560
attract labs

42
00:02:04,280 --> 00:02:08,390
worked on and I'm really proud to be

43
00:02:06,560 --> 00:02:16,280
part of the part of that group

44
00:02:08,389 --> 00:02:17,839
my name is La Vie la tsarevets and I are

45
00:02:16,280 --> 00:02:20,480
really proud to lead one of cyber art

46
00:02:17,840 --> 00:02:23,240
clubs groups that focus on the security

47
00:02:20,480 --> 00:02:25,850
of emerging technologies emerging

48
00:02:23,240 --> 00:02:28,040
technologies like cloud platforms like

49
00:02:25,850 --> 00:02:30,890
automation tools DevOps tools and so on

50
00:02:28,040 --> 00:02:35,000
so our recent research focused on the

51
00:02:30,890 --> 00:02:37,730
security of our AWS and also jenkins

52
00:02:35,000 --> 00:02:41,360
kubernetes and of course containers now

53
00:02:37,730 --> 00:02:44,720
I should say that this session is based

54
00:02:41,360 --> 00:02:47,320
upon a research there is full of tunnel

55
00:02:44,720 --> 00:02:51,440
details related to Linux kernel and

56
00:02:47,320 --> 00:02:55,130
Cisco's and kernel stuff sieve a very

57
00:02:51,440 --> 00:02:58,430
ugly C code so it was a tough challenge

58
00:02:55,130 --> 00:03:03,320
making this session interesting or

59
00:02:58,430 --> 00:03:06,080
bearable especially if you consider that

60
00:03:03,320 --> 00:03:08,570
this what you see here on the bottom of

61
00:03:06,080 --> 00:03:10,549
the screen is the climax of the research

62
00:03:08,570 --> 00:03:12,620
in this session but this is how it looks

63
00:03:10,549 --> 00:03:16,730
like and I'll return to that later and

64
00:03:12,620 --> 00:03:18,560
I'll explain a bit about that so to make

65
00:03:16,730 --> 00:03:22,250
things a little bit more interesting or

66
00:03:18,560 --> 00:03:24,170
bearable as you may I just to tell the

67
00:03:22,250 --> 00:03:27,100
story of the great Houdini the great

68
00:03:24,170 --> 00:03:29,780
Houdini was famous for escaping

69
00:03:27,100 --> 00:03:34,370
handcuffs and straightjacket and of

70
00:03:29,780 --> 00:03:40,730
course containers so a perfect fit for

71
00:03:34,370 --> 00:03:43,700
the story and so this session called you

72
00:03:40,730 --> 00:03:45,798
see here the Great Escape is actually

73
00:03:43,700 --> 00:03:48,518
about challenging Houdini to escape a

74
00:03:45,799 --> 00:03:52,820
new type of container using new trick

75
00:03:48,519 --> 00:03:56,209
and so this is what this session will be

76
00:03:52,820 --> 00:04:00,350
about and just to get in the mood I have

77
00:03:56,209 --> 00:04:04,720
a little video for you showing Houdini

78
00:04:00,350 --> 00:04:04,720
doing is sensational escape what's about

79
00:04:06,220 --> 00:04:10,470
[Music]

80
00:04:13,300 --> 00:04:31,500
[Music]

81
00:04:40,240 --> 00:04:55,660
[Music]

82
00:04:58,870 --> 00:05:26,990
[Music]

83
00:05:29,170 --> 00:05:53,429
[Music]

84
00:06:05,580 --> 00:06:13,389
all right now we're in the in the right

85
00:06:08,949 --> 00:06:16,870
mood so there's another reason I show

86
00:06:13,389 --> 00:06:20,259
you this this little little clip and the

87
00:06:16,870 --> 00:06:22,930
reason is that the straightjacket that

88
00:06:20,259 --> 00:06:24,520
Houdini were was limiting his ability to

89
00:06:22,930 --> 00:06:27,940
move his hands and the fact that he was

90
00:06:24,520 --> 00:06:30,130
hanging hung in midair isolated in

91
00:06:27,940 --> 00:06:32,469
somewhat controlled environment same

92
00:06:30,130 --> 00:06:34,600
works of course for containers that

93
00:06:32,470 --> 00:06:36,639
limit a process ability to interact with

94
00:06:34,600 --> 00:06:38,289
the host system to interact with the

95
00:06:36,639 --> 00:06:41,500
filesystem to interact with the network

96
00:06:38,289 --> 00:06:45,880
stack the IP tables the the firewall

97
00:06:41,500 --> 00:06:51,639
rules other processes this is how it

98
00:06:45,880 --> 00:06:53,860
works and and to show you how precise

99
00:06:51,639 --> 00:06:56,650
isolation looks like in a row Linux

100
00:06:53,860 --> 00:06:58,419
command this is how it looks like what

101
00:06:56,650 --> 00:07:02,099
you see here is the essence of process

102
00:06:58,419 --> 00:07:05,560
isolation we call today container and

103
00:07:02,099 --> 00:07:08,740
the unshared Commodore Cisco that is you

104
00:07:05,560 --> 00:07:10,900
see here this associated part of the

105
00:07:08,740 --> 00:07:13,599
process execution context now let me

106
00:07:10,900 --> 00:07:16,750
explain this what does it mean so the

107
00:07:13,599 --> 00:07:18,880
rolling of schematic you see here Forks

108
00:07:16,750 --> 00:07:21,280
a new batch process create a new batch

109
00:07:18,880 --> 00:07:22,930
process a new command line and then

110
00:07:21,280 --> 00:07:25,989
start building a walls around it which

111
00:07:22,930 --> 00:07:28,750
will be our container so it's separate

112
00:07:25,990 --> 00:07:31,150
our process or new process with a new

113
00:07:28,750 --> 00:07:32,889
process ID namespace with process name

114
00:07:31,150 --> 00:07:34,120
names so our process our new batch

115
00:07:32,889 --> 00:07:38,740
process won't be able to see other

116
00:07:34,120 --> 00:07:40,810
processes it builds a network isolation

117
00:07:38,740 --> 00:07:42,789
or network name namespace meaning that

118
00:07:40,810 --> 00:07:46,030
our new process won't be able to rely on

119
00:07:42,789 --> 00:07:48,400
the hosts IP tables routing

120
00:07:46,030 --> 00:07:50,679
configurations and so on inter process

121
00:07:48,400 --> 00:07:52,210
communication namespace meaning that our

122
00:07:50,680 --> 00:07:54,190
process our new batch process won't be

123
00:07:52,210 --> 00:08:00,370
able to communicate or pipe into other

124
00:07:54,190 --> 00:08:03,880
processes UTS namespace unique time

125
00:08:00,370 --> 00:08:08,169
sharing which allows us to name our new

126
00:08:03,880 --> 00:08:10,539
environment and hanging our processing

127
00:08:08,169 --> 00:08:12,909
media which is isolating it from the

128
00:08:10,539 --> 00:08:15,729
rest of the file system this command

129
00:08:12,909 --> 00:08:17,860
that you see here is how containers are

130
00:08:15,729 --> 00:08:21,070
born these walls that you see

131
00:08:17,860 --> 00:08:22,930
are the very same walls that are used by

132
00:08:21,070 --> 00:08:25,870
both open source and commercial

133
00:08:22,930 --> 00:08:27,760
containers to isolated and secured in a

134
00:08:25,870 --> 00:08:29,740
controlled environment this is how it

135
00:08:27,760 --> 00:08:32,830
looks like now I should also say that

136
00:08:29,740 --> 00:08:35,760
the container the pretty basic container

137
00:08:32,830 --> 00:08:38,170
that we built here is absolutely useless

138
00:08:35,760 --> 00:08:40,569
you can't do nothing with it it's

139
00:08:38,169 --> 00:08:44,349
completely isolated so it's not really

140
00:08:40,570 --> 00:08:46,420
fair with rudy' nee to ask him to escape

141
00:08:44,350 --> 00:08:49,840
this and it's not really usable so to

142
00:08:46,420 --> 00:08:54,339
make things a little bit more functional

143
00:08:49,840 --> 00:08:55,900
and usable I have this list of commands

144
00:08:54,340 --> 00:09:00,370
here I'll explain I'll explain in a

145
00:08:55,900 --> 00:09:03,970
moment to allow our new batch process

146
00:09:00,370 --> 00:09:07,780
some basic functionality and to allow

147
00:09:03,970 --> 00:09:10,450
our Houdini or attacker to breathe

148
00:09:07,780 --> 00:09:13,660
within that container we need to poke a

149
00:09:10,450 --> 00:09:15,940
few little holes in our new in a new

150
00:09:13,660 --> 00:09:18,520
isolated process to allowed to allow us

151
00:09:15,940 --> 00:09:23,350
to use it and what you see here on the

152
00:09:18,520 --> 00:09:26,550
screen is actually two shells one on the

153
00:09:23,350 --> 00:09:29,800
host a little bit cotton here and

154
00:09:26,550 --> 00:09:31,390
another shell which we also start on the

155
00:09:29,800 --> 00:09:33,880
house so we have two separate shells on

156
00:09:31,390 --> 00:09:36,189
the same host one will end up as a

157
00:09:33,880 --> 00:09:38,830
usable container and the other one would

158
00:09:36,190 --> 00:09:43,830
just stay shell shell on the house and

159
00:09:38,830 --> 00:09:46,120
this is how it looks like we start with

160
00:09:43,830 --> 00:09:53,620
the unsure command that I mentioned

161
00:09:46,120 --> 00:09:56,470
before see it there we go the unsure

162
00:09:53,620 --> 00:09:58,600
command we build the walls then we start

163
00:09:56,470 --> 00:10:01,420
poking holes the first hole that we poke

164
00:09:58,600 --> 00:10:03,850
in this environment is the hole in the

165
00:10:01,420 --> 00:10:06,520
network namespace what we are actually

166
00:10:03,850 --> 00:10:08,560
creating on the container side we are

167
00:10:06,520 --> 00:10:10,870
creating a virtual virtual interface or

168
00:10:08,560 --> 00:10:15,369
we're setting it up and on the con on

169
00:10:10,870 --> 00:10:17,410
the host side we tell the hosts to to

170
00:10:15,370 --> 00:10:20,320
attach to this new interface the new

171
00:10:17,410 --> 00:10:22,930
left one virtual interface one and we

172
00:10:20,320 --> 00:10:25,390
also tell it to forward incoming and

173
00:10:22,930 --> 00:10:26,890
outgoing packets so this is the first

174
00:10:25,390 --> 00:10:29,110
hole that we've broken in this

175
00:10:26,890 --> 00:10:31,540
environment the other hold of epoch is

176
00:10:29,110 --> 00:10:35,470
the around file system ISIL

177
00:10:31,540 --> 00:10:37,959
we mount basic directories and files The

178
00:10:35,470 --> 00:10:40,060
Temper Fest is a fest and so on to allow

179
00:10:37,960 --> 00:10:46,480
our new process to have some basic

180
00:10:40,060 --> 00:10:49,900
functionality we also name our new

181
00:10:46,480 --> 00:10:53,410
container Houdini's container we change

182
00:10:49,900 --> 00:10:55,390
directory into it and we truth the door

183
00:10:53,410 --> 00:10:59,709
behind us meaning we jail ourself into

184
00:10:55,390 --> 00:11:02,110
new file structure system now we have a

185
00:10:59,710 --> 00:11:03,970
more functional more functional

186
00:11:02,110 --> 00:11:06,340
container we have walls and we have

187
00:11:03,970 --> 00:11:08,380
little holes in it to allow us basic

188
00:11:06,340 --> 00:11:11,140
functionality and communications now

189
00:11:08,380 --> 00:11:13,330
this is a more fair case with Houdini

190
00:11:11,140 --> 00:11:17,199
and on the other hand this is a more

191
00:11:13,330 --> 00:11:20,140
operational raw Linux container this is

192
00:11:17,200 --> 00:11:21,640
how how it looks like now that we've

193
00:11:20,140 --> 00:11:24,220
seen the walls and they are the

194
00:11:21,640 --> 00:11:27,699
namespaces and walls of containers we

195
00:11:24,220 --> 00:11:33,460
can play with it a bit and I want to

196
00:11:27,700 --> 00:11:36,070
first run a quick nut sauce and not so

197
00:11:33,460 --> 00:11:39,010
sensational escape using a POC called

198
00:11:36,070 --> 00:11:42,460
chakra that was developed back in 2014

199
00:11:39,010 --> 00:11:44,760
this is not cyber-ark labs work this is

200
00:11:42,460 --> 00:11:48,940
partly why this is not so sensational

201
00:11:44,760 --> 00:11:51,580
but after running the Shocker will have

202
00:11:48,940 --> 00:11:55,210
access will have read access to any file

203
00:11:51,580 --> 00:11:56,320
on the host system any file let me show

204
00:11:55,210 --> 00:11:59,520
you how it works and then we'll discuss

205
00:11:56,320 --> 00:11:59,520
what's going on

206
00:12:07,060 --> 00:12:10,060
No

207
00:12:13,260 --> 00:12:18,720
okay so our starting point is within

208
00:12:17,100 --> 00:12:23,730
already within the container

209
00:12:18,720 --> 00:12:26,370
now just for from the attacker

210
00:12:23,730 --> 00:12:27,870
perspective it's not always obvious that

211
00:12:26,370 --> 00:12:29,820
we are within the container so one of

212
00:12:27,870 --> 00:12:32,960
the first things that the attacker will

213
00:12:29,820 --> 00:12:36,540
do is try to sense the environment and

214
00:12:32,960 --> 00:12:38,670
looking into the file system there are

215
00:12:36,540 --> 00:12:41,240
some indicators with and these

216
00:12:38,670 --> 00:12:44,729
indicators our file system is very very

217
00:12:41,240 --> 00:12:46,140
lean and not many files or not not many

218
00:12:44,730 --> 00:12:48,000
processes that are running in the

219
00:12:46,140 --> 00:12:50,430
background this is a pretty significant

220
00:12:48,000 --> 00:12:52,200
indicator another indicator that we are

221
00:12:50,430 --> 00:12:55,920
running within a container besides the

222
00:12:52,200 --> 00:13:00,330
fact that we have the container ID here

223
00:12:55,920 --> 00:13:13,050
which won't always be here is looking at

224
00:13:00,330 --> 00:13:15,990
the cgroups so I think I have it here so

225
00:13:13,050 --> 00:13:18,930
looking at a see group we see that the

226
00:13:15,990 --> 00:13:20,760
linux control groups assigned a specific

227
00:13:18,930 --> 00:13:24,800
control group for our container which

228
00:13:20,760 --> 00:13:28,910
means that our container ID here is

229
00:13:24,800 --> 00:13:31,229
limited with the resources it will be

230
00:13:28,910 --> 00:13:32,969
allowed to use so this is another

231
00:13:31,230 --> 00:13:35,400
significant indicator that within the

232
00:13:32,970 --> 00:13:38,190
container now let's try to break out of

233
00:13:35,400 --> 00:13:40,500
the walls that we just the docker built

234
00:13:38,190 --> 00:13:47,340
around us if we try simple stuff like

235
00:13:40,500 --> 00:13:51,960
trying to go to to the root filesystem

236
00:13:47,340 --> 00:13:54,570
of the host will obviously be denied

237
00:13:51,960 --> 00:13:58,110
okay this is an obvious a very naive

238
00:13:54,570 --> 00:14:01,700
attempt now let's use shocker and

239
00:13:58,110 --> 00:14:04,230
discuss what it does to enumerate a

240
00:14:01,700 --> 00:14:06,150
specific file in the file system which

241
00:14:04,230 --> 00:14:08,790
is the EPC password where the user names

242
00:14:06,150 --> 00:14:12,060
and in some cases hashed passwords are

243
00:14:08,790 --> 00:14:14,189
stored so let's have a look and I'll

244
00:14:12,060 --> 00:14:17,369
discuss what's going on so this is the

245
00:14:14,190 --> 00:14:19,680
output of the of the e.t.c password file

246
00:14:17,370 --> 00:14:22,410
system on the host which are not i

247
00:14:19,680 --> 00:14:24,739
shouldn't have access to let me explain

248
00:14:22,410 --> 00:14:24,740
how it works

249
00:14:24,779 --> 00:14:31,689
okay so when running shocker it is

250
00:14:28,690 --> 00:14:34,209
targeting the e.t.c shadow file okay

251
00:14:31,690 --> 00:14:37,300
this is a embedded within the code now

252
00:14:34,209 --> 00:14:40,388
what I didn't tell you is that in the

253
00:14:37,300 --> 00:14:43,779
container that Houdini is in at the

254
00:14:40,389 --> 00:14:45,279
moment there is a special mount meaning

255
00:14:43,779 --> 00:14:48,339
within the container

256
00:14:45,279 --> 00:14:51,010
Houdini can reach a specific file this

257
00:14:48,339 --> 00:14:53,889
file is resolved calm but it could be

258
00:14:51,010 --> 00:14:57,519
any file the ability to access this file

259
00:14:53,889 --> 00:14:59,800
allows Houdini to retrieve a structure

260
00:14:57,519 --> 00:15:02,170
called a file descriptor which is the

261
00:14:59,800 --> 00:15:05,199
metadata of the file and file system

262
00:15:02,170 --> 00:15:09,969
within this structure there is a special

263
00:15:05,199 --> 00:15:11,349
field called inode which is a bottom

264
00:15:09,970 --> 00:15:13,990
lines and is a number that represents

265
00:15:11,350 --> 00:15:16,480
the file in the file system

266
00:15:13,990 --> 00:15:20,110
now what Chalker is able to do is take

267
00:15:16,480 --> 00:15:23,430
this number east inode and just rotate

268
00:15:20,110 --> 00:15:28,240
it just look for insert another number

269
00:15:23,430 --> 00:15:30,550
in it and this is what you see here

270
00:15:28,240 --> 00:15:32,380
shocker just enumerate the number the

271
00:15:30,550 --> 00:15:33,969
inode and it find the home directory the

272
00:15:32,380 --> 00:15:36,339
serve directory the bin directory and so

273
00:15:33,970 --> 00:15:40,779
on till it finds the e.t.c directory

274
00:15:36,339 --> 00:15:43,540
which is on our path to the target so

275
00:15:40,779 --> 00:15:46,720
after finding the relevant inode it fine

276
00:15:43,540 --> 00:15:48,579
it found the etc' directory and then it

277
00:15:46,720 --> 00:15:50,980
started doing the same for the shadow

278
00:15:48,579 --> 00:15:53,439
file and this is what you see here there

279
00:15:50,980 --> 00:15:57,100
is another thing going on here requiring

280
00:15:53,440 --> 00:16:00,040
chakra to do 32-bit brute force I won't

281
00:15:57,100 --> 00:16:02,019
get into it but it's nothing serious and

282
00:16:00,040 --> 00:16:02,649
as you as you see here it happened

283
00:16:02,019 --> 00:16:05,290
really quickly

284
00:16:02,649 --> 00:16:07,600
so after enumerated all the AI nodes for

285
00:16:05,290 --> 00:16:10,870
the shadowfied it eventually found the

286
00:16:07,600 --> 00:16:13,180
relevant inode and after getting this

287
00:16:10,870 --> 00:16:15,670
inode what chakra is able to do is

288
00:16:13,180 --> 00:16:17,079
insert this inode within the file

289
00:16:15,670 --> 00:16:20,920
structure that it had for the result

290
00:16:17,079 --> 00:16:24,010
conf and ask from the system from the

291
00:16:20,920 --> 00:16:25,599
kernel to read that file and so this is

292
00:16:24,010 --> 00:16:29,680
what you see here this is the output of

293
00:16:25,600 --> 00:16:32,350
the dtc password within the host file so

294
00:16:29,680 --> 00:16:38,569
this is how chakra works it allows only

295
00:16:32,350 --> 00:16:40,990
read access so it is pretty limited

296
00:16:38,570 --> 00:16:44,390
but you see that we broke out of the

297
00:16:40,990 --> 00:16:48,410
fire world or not firewall but the file

298
00:16:44,390 --> 00:16:52,689
system isolation so this is the first

299
00:16:48,410 --> 00:16:55,699
thing that I wanted to show you second

300
00:16:52,690 --> 00:17:00,170
sensational escape is one that we worked

301
00:16:55,700 --> 00:17:01,790
on inside rock labs and this escape is a

302
00:17:00,170 --> 00:17:04,940
little bit more complicated I have a

303
00:17:01,790 --> 00:17:07,879
video demo here with me and I'll show

304
00:17:04,940 --> 00:17:09,740
you in a moment this escape allow

305
00:17:07,880 --> 00:17:13,579
Houdini or the attacker on the other

306
00:17:09,740 --> 00:17:16,430
hand to compromise the host when certain

307
00:17:13,579 --> 00:17:18,740
conditions are met let me show you how

308
00:17:16,430 --> 00:17:25,579
it works and then we'll discuss what's

309
00:17:18,740 --> 00:17:27,290
going on behind this thing okay so as

310
00:17:25,579 --> 00:17:29,750
before we start already within the

311
00:17:27,290 --> 00:17:32,210
container what you see here is we

312
00:17:29,750 --> 00:17:34,010
downloaded a special kernel module I'll

313
00:17:32,210 --> 00:17:37,160
discuss this in a moment to the

314
00:17:34,010 --> 00:17:39,020
Container and we also enumerated the

315
00:17:37,160 --> 00:17:42,110
processes running at the moment in

316
00:17:39,020 --> 00:17:45,020
within the container again though those

317
00:17:42,110 --> 00:17:46,669
are pretty limited and it is a pretty

318
00:17:45,020 --> 00:17:48,800
significant indicator of it that we are

319
00:17:46,670 --> 00:17:51,440
within a container and we also see that

320
00:17:48,800 --> 00:17:53,870
there is a docker container the process

321
00:17:51,440 --> 00:17:56,900
running which means there is a docker

322
00:17:53,870 --> 00:17:58,699
within a docker situation here which is

323
00:17:56,900 --> 00:18:01,030
a very significant indicator of

324
00:17:58,700 --> 00:18:04,630
something I'll discuss it in a moment

325
00:18:01,030 --> 00:18:07,670
all right so first thing that we do once

326
00:18:04,630 --> 00:18:10,250
within the container is enumerate in the

327
00:18:07,670 --> 00:18:11,480
namespaces the IDs that you see here are

328
00:18:10,250 --> 00:18:14,030
the ideas of the different namespaces

329
00:18:11,480 --> 00:18:16,580
assigned to our container these are the

330
00:18:14,030 --> 00:18:19,190
walls that I discussed before these

331
00:18:16,580 --> 00:18:22,429
namespaces will be our target we try to

332
00:18:19,190 --> 00:18:25,180
escape those from those namespaces now

333
00:18:22,430 --> 00:18:28,310
if we try to use the NS enter command

334
00:18:25,180 --> 00:18:30,890
which allows us to change namespaces

335
00:18:28,310 --> 00:18:33,290
enter another namespace and what we try

336
00:18:30,890 --> 00:18:35,030
to do here is change our namespace to

337
00:18:33,290 --> 00:18:37,399
the system namespace the host system

338
00:18:35,030 --> 00:18:40,190
namespace now obviously if we can do

339
00:18:37,400 --> 00:18:42,500
that we can change the context of our

340
00:18:40,190 --> 00:18:45,380
process to the system context meaning we

341
00:18:42,500 --> 00:18:50,540
own the host but obviously we got an

342
00:18:45,380 --> 00:18:52,639
error docker prevents us doing so so we

343
00:18:50,540 --> 00:18:55,639
are going to bypass that

344
00:18:52,639 --> 00:18:57,769
we are we're gonna use here the Anna

345
00:18:55,639 --> 00:19:00,229
sticks that you see here is actually a

346
00:18:57,769 --> 00:19:04,519
special kernel module now let me quickly

347
00:19:00,230 --> 00:19:06,529
explain explain kernel modules are an

348
00:19:04,519 --> 00:19:09,559
extension of Linux kernel it allows us

349
00:19:06,529 --> 00:19:11,629
to load any functionality to the kernel

350
00:19:09,559 --> 00:19:13,158
without rebooting the machine so for

351
00:19:11,629 --> 00:19:14,809
example if you plug in a new hardware

352
00:19:13,159 --> 00:19:16,850
into into a linux server or machine

353
00:19:14,809 --> 00:19:19,039
instead of having to reboot the machine

354
00:19:16,850 --> 00:19:21,049
a Linux kernel might below it and allow

355
00:19:19,039 --> 00:19:22,429
us to use this new hardware so this is

356
00:19:21,049 --> 00:19:23,720
what we are going to do here we're going

357
00:19:22,429 --> 00:19:30,309
to load a new kernel that will

358
00:19:23,720 --> 00:19:30,309
manipulate the NS enter control

359
00:19:39,010 --> 00:19:47,450
this is a great question I'll answer

360
00:19:41,540 --> 00:19:49,070
your question okay

361
00:19:47,450 --> 00:19:51,650
so again we're in numerating in the

362
00:19:49,070 --> 00:19:53,899
namespaces the idea is that we are

363
00:19:51,650 --> 00:19:58,280
targeting will be simply changed we're

364
00:19:53,900 --> 00:20:01,550
using in small insert module to the to

365
00:19:58,280 --> 00:20:10,970
the current kernel module to the current

366
00:20:01,550 --> 00:20:13,580
kernel no error so same successful now

367
00:20:10,970 --> 00:20:16,400
we are enumerated the namespace IDs

368
00:20:13,580 --> 00:20:19,250
again within the container and we find

369
00:20:16,400 --> 00:20:21,500
something interesting the IDS of the

370
00:20:19,250 --> 00:20:27,230
mount and the network namespaces has

371
00:20:21,500 --> 00:20:29,780
changed so this is a good indicator that

372
00:20:27,230 --> 00:20:31,820
something good has happened for Houdini

373
00:20:29,780 --> 00:20:33,260
at least we are still within the

374
00:20:31,820 --> 00:20:35,179
container this is the process the list

375
00:20:33,260 --> 00:20:37,910
of processes that you see here but now

376
00:20:35,180 --> 00:20:39,920
if will try to use NS enter again and

377
00:20:37,910 --> 00:20:43,730
change the context to the system context

378
00:20:39,920 --> 00:20:47,240
system namespace you'll see something

379
00:20:43,730 --> 00:20:51,350
funny the kernel returns with TTY name

380
00:20:47,240 --> 00:20:56,150
failed success so the kernel is a bit

381
00:20:51,350 --> 00:20:58,060
confused whether we fail to load the

382
00:20:56,150 --> 00:21:00,790
kernel and change the namespace or

383
00:20:58,060 --> 00:21:04,550
succeeded in doing that TTY name is a

384
00:21:00,790 --> 00:21:07,430
typewriter which basically means that we

385
00:21:04,550 --> 00:21:10,149
just connected our input and output to

386
00:21:07,430 --> 00:21:14,540
the system context this is what TTY

387
00:21:10,150 --> 00:21:17,690
stands for so now if we try to enumerate

388
00:21:14,540 --> 00:21:20,330
again what processes are running we have

389
00:21:17,690 --> 00:21:23,450
a completely different picture and also

390
00:21:20,330 --> 00:21:30,230
if we look at the file system we'll see

391
00:21:23,450 --> 00:21:32,930
that we have the host file system so we

392
00:21:30,230 --> 00:21:34,520
broke out of the file system

393
00:21:32,930 --> 00:21:37,310
installation we broke out of process

394
00:21:34,520 --> 00:21:38,990
isolation using this type of attack we

395
00:21:37,310 --> 00:21:41,810
can compromise the host completely not

396
00:21:38,990 --> 00:21:44,690
just having a read access to it now

397
00:21:41,810 --> 00:21:46,940
let's demystify the mystify the attack

398
00:21:44,690 --> 00:21:49,790
and answer to answer your question so

399
00:21:46,940 --> 00:21:54,290
will allow us to

400
00:21:49,790 --> 00:21:57,649
for the shocker in numerate inodes

401
00:21:54,290 --> 00:22:00,320
and in read file that we shouldn't have

402
00:21:57,650 --> 00:22:01,910
and what allow us to load a new kernel

403
00:22:00,320 --> 00:22:04,189
module this is something called

404
00:22:01,910 --> 00:22:08,420
capability or capabilities these

405
00:22:04,190 --> 00:22:11,360
capabilities are essentially against a

406
00:22:08,420 --> 00:22:15,050
distinct permissions that were broken

407
00:22:11,360 --> 00:22:18,169
out of the root user in the Linux root

408
00:22:15,050 --> 00:22:24,440
user meaning that instead of having user

409
00:22:18,170 --> 00:22:27,530
or processes in Linux instead of

410
00:22:24,440 --> 00:22:29,240
granting users and processes full root

411
00:22:27,530 --> 00:22:33,920
permissions you can we can assign them

412
00:22:29,240 --> 00:22:37,310
specific capabilities for further tasks

413
00:22:33,920 --> 00:22:39,970
or processes to run so it is actually a

414
00:22:37,310 --> 00:22:45,800
pretty good list privileged

415
00:22:39,970 --> 00:22:47,690
implementation and same applies for

416
00:22:45,800 --> 00:22:50,389
containers containers also can be

417
00:22:47,690 --> 00:22:53,750
assigned specific capabilities and it is

418
00:22:50,390 --> 00:22:55,610
needed in in many cases it is needed

419
00:22:53,750 --> 00:22:59,060
when running container within a

420
00:22:55,610 --> 00:23:02,870
container to do that the containers Nick

421
00:22:59,060 --> 00:23:05,780
needs to have certain capabilities to

422
00:23:02,870 --> 00:23:10,189
run this virtualization one inside the

423
00:23:05,780 --> 00:23:13,220
another also containers that run a file

424
00:23:10,190 --> 00:23:14,720
system jobs that run configuration

425
00:23:13,220 --> 00:23:16,850
management jobs also require

426
00:23:14,720 --> 00:23:18,200
capabilities kubernetes if you have

427
00:23:16,850 --> 00:23:21,310
kubernetes within the within your

428
00:23:18,200 --> 00:23:24,110
environment many of the management

429
00:23:21,310 --> 00:23:27,679
containers that come default with with

430
00:23:24,110 --> 00:23:30,459
kubernetes running run as privileged

431
00:23:27,680 --> 00:23:32,960
containers with with capabilities so

432
00:23:30,460 --> 00:23:33,350
what capabilities were used here for the

433
00:23:32,960 --> 00:23:36,170
Shocker

434
00:23:33,350 --> 00:23:38,959
for the Shocker case the chakra needed a

435
00:23:36,170 --> 00:23:40,880
special capability called Cape duck read

436
00:23:38,960 --> 00:23:42,350
search the read search allowed the

437
00:23:40,880 --> 00:23:45,380
container to enumerate the file

438
00:23:42,350 --> 00:23:47,179
descriptor to change the I nodes and the

439
00:23:45,380 --> 00:23:49,460
duck which stands for discretionary

440
00:23:47,180 --> 00:23:51,890
access control allowed our container or

441
00:23:49,460 --> 00:23:55,990
Houdini within the container to read any

442
00:23:51,890 --> 00:23:58,010
file on the system while ignoring the

443
00:23:55,990 --> 00:24:01,779
discretionary access control on the file

444
00:23:58,010 --> 00:24:03,519
so we could easily enumerate any file on

445
00:24:01,779 --> 00:24:08,409
host file system this is the capability

446
00:24:03,519 --> 00:24:10,989
required by by shocker for our escape we

447
00:24:08,409 --> 00:24:13,479
use two capabilities one is cap C's

448
00:24:10,989 --> 00:24:15,969
module and this is answers your question

449
00:24:13,479 --> 00:24:18,099
which allows us to load new kernel moly

450
00:24:15,969 --> 00:24:19,929
modules into the kernel and the other

451
00:24:18,099 --> 00:24:22,658
one is cap sea slug which allows us to

452
00:24:19,929 --> 00:24:26,409
read information from the kernel and I

453
00:24:22,659 --> 00:24:29,440
should say here that writing new kernel

454
00:24:26,409 --> 00:24:35,469
modules is very painful because you have

455
00:24:29,440 --> 00:24:38,289
to you have to make sure that the

456
00:24:35,469 --> 00:24:41,229
version of the kernel module complies

457
00:24:38,289 --> 00:24:48,879
with the current kernel version at the

458
00:24:41,229 --> 00:24:50,589
CRC and the Mac's are are equivalent to

459
00:24:48,879 --> 00:24:52,689
the current kernel modules there are a

460
00:24:50,589 --> 00:24:54,339
lot of stuff going on there this is why

461
00:24:52,690 --> 00:24:56,710
we needed the cap syslog to read some

462
00:24:54,339 --> 00:24:58,658
information and get the idea of what

463
00:24:56,710 --> 00:25:02,589
they can expect from from our new kernel

464
00:24:58,659 --> 00:25:05,950
module so capability is where the trick

465
00:25:02,589 --> 00:25:09,309
here and containers that are assigned

466
00:25:05,950 --> 00:25:11,139
capabilities are actually called

467
00:25:09,309 --> 00:25:13,029
privileged container now I should say

468
00:25:11,139 --> 00:25:15,879
here that this is not something that we

469
00:25:13,029 --> 00:25:18,399
coined or invented this is something

470
00:25:15,879 --> 00:25:19,570
that was known when containers laners

471
00:25:18,399 --> 00:25:22,168
containers were developed and then

472
00:25:19,570 --> 00:25:24,639
docker containers were developed but our

473
00:25:22,169 --> 00:25:27,669
contribution to it was to see how

474
00:25:24,639 --> 00:25:29,049
attackers or in our case Houdini might

475
00:25:27,669 --> 00:25:32,409
be able to leverage those capabilities

476
00:25:29,049 --> 00:25:35,979
to escape the containers this was our

477
00:25:32,409 --> 00:25:39,580
our our contribution here and we

478
00:25:35,979 --> 00:25:41,440
extended a bit definition of privet

479
00:25:39,580 --> 00:25:43,330
container saying that a privileged

480
00:25:41,440 --> 00:25:44,979
container is the container providing an

481
00:25:43,330 --> 00:25:47,619
attacker with a direct or indirect

482
00:25:44,979 --> 00:25:49,719
access to the underlying hosts this is

483
00:25:47,619 --> 00:25:52,629
what we've seen here and capabilities

484
00:25:49,719 --> 00:25:55,359
are just one example of privileged or

485
00:25:52,629 --> 00:25:56,738
just one example of how a container can

486
00:25:55,359 --> 00:25:59,859
be turned into a privat container but

487
00:25:56,739 --> 00:26:03,129
there are other ways to make a container

488
00:25:59,859 --> 00:26:04,928
of private containers container and and

489
00:26:03,129 --> 00:26:09,218
so today we talked about capabilities

490
00:26:04,929 --> 00:26:12,279
but mounds can also make a container of

491
00:26:09,219 --> 00:26:14,850
each container so for example one of the

492
00:26:12,279 --> 00:26:19,210
most I guess

493
00:26:14,850 --> 00:26:22,510
weird or uncommon use-cases is creating

494
00:26:19,210 --> 00:26:25,360
a container that mount the whole whole

495
00:26:22,510 --> 00:26:27,850
host file system so we have a container

496
00:26:25,360 --> 00:26:30,070
that just owns the whole host file

497
00:26:27,850 --> 00:26:33,939
system so this is obviously a privileged

498
00:26:30,070 --> 00:26:38,560
container another example of it would be

499
00:26:33,940 --> 00:26:40,330
ii know ii know a parma now linux has a

500
00:26:38,560 --> 00:26:40,800
very effective and efficient security

501
00:26:40,330 --> 00:26:43,770
controls

502
00:26:40,800 --> 00:26:46,870
Sekhmet armor that implemented

503
00:26:43,770 --> 00:26:51,510
defense-in-depth in Linux

504
00:26:46,870 --> 00:26:58,060
so those security controls allow us to

505
00:26:51,510 --> 00:27:01,890
restrict access to access or execution

506
00:26:58,060 --> 00:27:06,310
of processes even if those processes

507
00:27:01,890 --> 00:27:09,670
have certain capabilities so even if our

508
00:27:06,310 --> 00:27:11,620
container have those capabilities I

509
00:27:09,670 --> 00:27:14,890
mentioned before with the right second

510
00:27:11,620 --> 00:27:17,469
profile or app app fr more profile the

511
00:27:14,890 --> 00:27:20,530
process and the container will be pretty

512
00:27:17,470 --> 00:27:22,840
restricted so container without those

513
00:27:20,530 --> 00:27:26,889
security controls should be considered

514
00:27:22,840 --> 00:27:28,959
privileged container last but not least

515
00:27:26,890 --> 00:27:31,390
we have the docker stock I didn't cover

516
00:27:28,960 --> 00:27:34,180
it today but I still thought it worth

517
00:27:31,390 --> 00:27:38,410
mentioning doctor stock is a special

518
00:27:34,180 --> 00:27:41,320
file that allows the CLI dr. CLI to

519
00:27:38,410 --> 00:27:45,040
communicate with the doctor demon now

520
00:27:41,320 --> 00:27:48,399
any user or process that have access to

521
00:27:45,040 --> 00:27:51,610
the docker stock file can control the

522
00:27:48,400 --> 00:27:56,860
dr. diamond dr. diamond runs as route so

523
00:27:51,610 --> 00:28:00,370
this is an obvious privilege escalation

524
00:27:56,860 --> 00:28:02,050
or escape or in our case when you talk

525
00:28:00,370 --> 00:28:04,659
about provision container if a container

526
00:28:02,050 --> 00:28:07,570
have access to the docker sock on the

527
00:28:04,660 --> 00:28:10,270
host it should be certainly considered

528
00:28:07,570 --> 00:28:12,129
privileged container so bridge

529
00:28:10,270 --> 00:28:12,670
containers were the trick and what is

530
00:28:12,130 --> 00:28:14,380
the risk

531
00:28:12,670 --> 00:28:15,760
I'll just recap what is your the risk of

532
00:28:14,380 --> 00:28:17,200
having privileged container within the

533
00:28:15,760 --> 00:28:20,620
environment there are a couple of things

534
00:28:17,200 --> 00:28:23,410
to consider for those of you who are

535
00:28:20,620 --> 00:28:26,530
computer science enthusiasts I have here

536
00:28:23,410 --> 00:28:27,900
a reference to P and NP I hope you

537
00:28:26,530 --> 00:28:30,270
appreciate it

538
00:28:27,900 --> 00:28:33,660
so there's a couple of couple of risk

539
00:28:30,270 --> 00:28:35,780
that that we should consider first is of

540
00:28:33,660 --> 00:28:37,770
course escaping we just discussed this

541
00:28:35,780 --> 00:28:40,680
provision Tainos can be used to escape

542
00:28:37,770 --> 00:28:43,410
but of course this is this doesn't stop

543
00:28:40,680 --> 00:28:45,660
here as soon as our attacker or Deena

544
00:28:43,410 --> 00:28:47,730
gets into the host system any other

545
00:28:45,660 --> 00:28:50,700
container will be obviously compromised

546
00:28:47,730 --> 00:28:53,640
any sensitive data that are stored in

547
00:28:50,700 --> 00:28:56,700
their credentials and so on there's

548
00:28:53,640 --> 00:28:58,200
another vector which leverages

549
00:28:56,700 --> 00:29:00,330
privileged containers to escalate

550
00:28:58,200 --> 00:29:03,210
privileges so imagine this you have a

551
00:29:00,330 --> 00:29:05,429
DevOps engineer in your in your company

552
00:29:03,210 --> 00:29:09,270
in your organization and he has access

553
00:29:05,430 --> 00:29:14,810
to an on route access to a container

554
00:29:09,270 --> 00:29:17,430
host now with his access he does able to

555
00:29:14,810 --> 00:29:20,010
launch or deploy new privileged

556
00:29:17,430 --> 00:29:21,390
container if you can do that you could

557
00:29:20,010 --> 00:29:23,970
just launch a new privileged container

558
00:29:21,390 --> 00:29:26,970
access it and then escape it as route on

559
00:29:23,970 --> 00:29:30,570
the host this is another vector or

560
00:29:26,970 --> 00:29:32,250
another risk we should consider when we

561
00:29:30,570 --> 00:29:34,230
have privileged container or the

562
00:29:32,250 --> 00:29:37,250
permissions of the ability to launch new

563
00:29:34,230 --> 00:29:40,170
provision containers this is the risks

564
00:29:37,250 --> 00:29:42,410
what about mitigations so there are a

565
00:29:40,170 --> 00:29:45,870
couple of things you should consider

566
00:29:42,410 --> 00:29:47,460
when thinking about provision containers

567
00:29:45,870 --> 00:29:49,590
or the risk about privat containers

568
00:29:47,460 --> 00:29:52,440
first and foremost is the privileged

569
00:29:49,590 --> 00:29:54,959
access to the container host any user

570
00:29:52,440 --> 00:29:58,160
any developer any DevOps engineer with

571
00:29:54,960 --> 00:30:01,350
privileged access to a container host

572
00:29:58,160 --> 00:30:03,180
can inflate the attack surface of the

573
00:30:01,350 --> 00:30:04,980
image of the environment dramatically by

574
00:30:03,180 --> 00:30:06,990
deploying privileged containers to their

575
00:30:04,980 --> 00:30:09,270
need so controlling privileged access

576
00:30:06,990 --> 00:30:13,260
could be route or can can be any user

577
00:30:09,270 --> 00:30:15,930
under the docker group is critical to

578
00:30:13,260 --> 00:30:17,670
limit the ability or to limit the attack

579
00:30:15,930 --> 00:30:20,460
surface of the whole environment this is

580
00:30:17,670 --> 00:30:22,110
the first thing to consider second thing

581
00:30:20,460 --> 00:30:23,970
to consider we talked a lot about

582
00:30:22,110 --> 00:30:26,100
privileged containers and capabilities

583
00:30:23,970 --> 00:30:27,810
and so on so limiting the ability to

584
00:30:26,100 --> 00:30:30,990
deploy new privileged container is

585
00:30:27,810 --> 00:30:34,409
obviously a good way to limit the attack

586
00:30:30,990 --> 00:30:36,050
surface of the environment so the CLI

587
00:30:34,410 --> 00:30:39,330
the syntax that you see here docker run

588
00:30:36,050 --> 00:30:42,080
- - privilege is one way to

589
00:30:39,330 --> 00:30:44,699
to deploy a container with the whole

590
00:30:42,080 --> 00:30:46,770
whole nine yards the whole set of of

591
00:30:44,700 --> 00:30:49,680
previous container the whole set of

592
00:30:46,770 --> 00:30:52,470
capabilities excuse me I think there are

593
00:30:49,680 --> 00:30:54,930
13 39 different capabilities at the

594
00:30:52,470 --> 00:30:58,110
moment and this is still under

595
00:30:54,930 --> 00:30:59,910
development and so docker run - -

596
00:30:58,110 --> 00:31:02,939
privilege is one thing that you want to

597
00:30:59,910 --> 00:31:04,860
prevent when running when allowing user

598
00:31:02,940 --> 00:31:09,150
to run containers in your environment

599
00:31:04,860 --> 00:31:12,990
and last but not least we should also

600
00:31:09,150 --> 00:31:16,950
talk about secrets containers obviously

601
00:31:12,990 --> 00:31:19,080
are used in a multi-tenant platform it

602
00:31:16,950 --> 00:31:22,370
allow us the flexibility to run multiple

603
00:31:19,080 --> 00:31:25,530
sessions on the same host which is great

604
00:31:22,370 --> 00:31:28,739
the other side of it is that different

605
00:31:25,530 --> 00:31:32,639
session might be associated with

606
00:31:28,740 --> 00:31:39,390
different sensitive data different set

607
00:31:32,640 --> 00:31:41,730
of Secrets different set of users and so

608
00:31:39,390 --> 00:31:43,980
limiting the exposure of credentials in

609
00:31:41,730 --> 00:31:46,260
such environment is super critical

610
00:31:43,980 --> 00:31:47,550
because if you have one privilege

611
00:31:46,260 --> 00:31:50,580
container within the environment and it

612
00:31:47,550 --> 00:31:52,649
is compromised all the other containers

613
00:31:50,580 --> 00:31:54,780
are obviously will obviously be

614
00:31:52,650 --> 00:31:59,010
compromised all the secrets and data and

615
00:31:54,780 --> 00:32:01,649
so on this is why secrets is in actually

616
00:31:59,010 --> 00:32:03,120
any other environment the exposure of

617
00:32:01,650 --> 00:32:06,480
Secrets should be minimized to the bare

618
00:32:03,120 --> 00:32:10,639
minimum all right so let's talk about

619
00:32:06,480 --> 00:32:13,040
key takeaways and here's the thing

620
00:32:10,640 --> 00:32:16,470
although everything I said here today

621
00:32:13,040 --> 00:32:19,740
containers can be a good security

622
00:32:16,470 --> 00:32:22,740
boundary with a little asterisk we've

623
00:32:19,740 --> 00:32:29,300
seen that when we launch a raw Linux

624
00:32:22,740 --> 00:32:32,070
container completely isolated it will be

625
00:32:29,300 --> 00:32:35,520
very efficient in limiting the ability

626
00:32:32,070 --> 00:32:39,960
of the attacker to escape from escape

627
00:32:35,520 --> 00:32:42,090
from the container to the host but in

628
00:32:39,960 --> 00:32:44,340
many cases operation or reality dictate

629
00:32:42,090 --> 00:32:44,909
dictates differently and requires us to

630
00:32:44,340 --> 00:32:47,820
pokes

631
00:32:44,910 --> 00:32:52,289
to poke a new holes into into the

632
00:32:47,820 --> 00:32:55,590
environment and these holes

633
00:32:52,289 --> 00:32:57,960
inflate the risk that that we need to we

634
00:32:55,590 --> 00:33:00,090
need to deal with so what kind of things

635
00:32:57,960 --> 00:33:01,320
we should consider what risk you should

636
00:33:00,090 --> 00:33:03,149
consider if you have container

637
00:33:01,320 --> 00:33:04,950
environment within New York within your

638
00:33:03,149 --> 00:33:08,129
organization first one is privileged

639
00:33:04,950 --> 00:33:09,529
access to the host this privilege exists

640
00:33:08,130 --> 00:33:12,840
as I mentioned before will allow

641
00:33:09,529 --> 00:33:14,220
developers DevOps engineers to learn

642
00:33:12,840 --> 00:33:16,500
through this container and extend the

643
00:33:14,220 --> 00:33:20,039
attack surface privileged containers are

644
00:33:16,500 --> 00:33:22,950
obviously a risk and attack surface and

645
00:33:20,039 --> 00:33:24,899
secrets that I just mentioned this is

646
00:33:22,950 --> 00:33:28,470
the the things I would recommend and I

647
00:33:24,899 --> 00:33:31,799
know that many security DevOps security

648
00:33:28,470 --> 00:33:36,830
vendors and service providers usually

649
00:33:31,799 --> 00:33:40,408
focus on the application layer on the

650
00:33:36,830 --> 00:33:43,710
behavioral layer of the containers but

651
00:33:40,409 --> 00:33:45,990
there are rare cases where I see or I've

652
00:33:43,710 --> 00:33:47,700
seen in the wild people that focus on

653
00:33:45,990 --> 00:33:49,980
containers themselves and how they are

654
00:33:47,700 --> 00:33:53,519
configured and what permissions or

655
00:33:49,980 --> 00:33:55,169
capabilities and what kind of boundaries

656
00:33:53,519 --> 00:33:57,659
or how the boundaries of the containers

657
00:33:55,169 --> 00:34:03,299
look like so this is one thing to

658
00:33:57,659 --> 00:34:06,169
consider and I didn't have much time to

659
00:34:03,299 --> 00:34:09,210
discuss all the details so I'd like to

660
00:34:06,169 --> 00:34:11,730
I'd like to suggest two things first of

661
00:34:09,210 --> 00:34:14,690
all you can have a look at our threat

662
00:34:11,730 --> 00:34:17,520
resource block cyber-ark lab we'll find

663
00:34:14,690 --> 00:34:19,470
the research the discussion is based

664
00:34:17,520 --> 00:34:22,469
upon with all the details that I

665
00:34:19,469 --> 00:34:24,299
mentioned before this is the first thing

666
00:34:22,469 --> 00:34:27,000
second thing I'd like to suggest that

667
00:34:24,300 --> 00:34:29,369
you come at our booth at Ciroc Ciroc

668
00:34:27,000 --> 00:34:32,969
booth right over here where you'll find

669
00:34:29,369 --> 00:34:37,129
me I'll either be there or in the Lego

670
00:34:32,969 --> 00:34:37,129
station trying to break the record there

671
00:34:37,369 --> 00:34:41,540
that's it thank you very much

672
00:34:41,770 --> 00:35:02,109
[Applause]

673
00:34:44,879 --> 00:35:05,230
any questions yeah mm-hmm okay that's a

674
00:35:02,109 --> 00:35:07,328
good question so the question was here I

675
00:35:05,230 --> 00:35:09,640
show the scale based on capabilities are

676
00:35:07,329 --> 00:35:13,480
there any other ways to break out of

677
00:35:09,640 --> 00:35:18,339
containers and the answer is is yes as I

678
00:35:13,480 --> 00:35:20,920
mentioned containers that have pretty

679
00:35:18,339 --> 00:35:24,130
weird mounts for example there are

680
00:35:20,920 --> 00:35:27,220
several containers that are run run as

681
00:35:24,130 --> 00:35:31,329
side course in many in in kubernetes

682
00:35:27,220 --> 00:35:34,868
environments that wrap or simplify the

683
00:35:31,329 --> 00:35:36,880
work with with the docker demon and to

684
00:35:34,869 --> 00:35:40,619
do that those containers mount the

685
00:35:36,880 --> 00:35:44,230
docker stock file that I mentioned so

686
00:35:40,619 --> 00:35:45,940
this allows the any user or process

687
00:35:44,230 --> 00:35:48,579
within this container to completely

688
00:35:45,940 --> 00:35:50,680
control the doctor environment so this

689
00:35:48,579 --> 00:35:56,230
would be one thing one I think one thing

690
00:35:50,680 --> 00:35:57,790
to look for there are other there's

691
00:35:56,230 --> 00:36:00,760
other things that I didn't mention here

692
00:35:57,790 --> 00:36:03,160
today which is exploiting kernel

693
00:36:00,760 --> 00:36:06,520
vulnerabilities now it's not it's not a

694
00:36:03,160 --> 00:36:09,390
straightforward thing to do even pretty

695
00:36:06,520 --> 00:36:12,400
simple vulnerabilities or exploits like

696
00:36:09,390 --> 00:36:13,808
dirty cow can be exploited

697
00:36:12,400 --> 00:36:16,210
straightforward within the container you

698
00:36:13,809 --> 00:36:18,670
have to adjust it we have done some work

699
00:36:16,210 --> 00:36:21,430
around it and you can find you can find

700
00:36:18,670 --> 00:36:23,770
a piece in the threat research blog but

701
00:36:21,430 --> 00:36:30,930
kernel exploit would be one way one way

702
00:36:23,770 --> 00:36:30,930
to go thank you very much guys

703
00:36:31,020 --> 00:36:34,940
[Applause]

