1
00:00:00,060 --> 00:00:04,670
okay guys we're gonna continue with our

2
00:00:01,800 --> 00:00:07,560
next presentation we have David grace

3
00:00:04,670 --> 00:00:09,480
with mailing container security in

4
00:00:07,560 --> 00:00:14,518
highly regulated industries if you can

5
00:00:09,480 --> 00:00:20,039
all get my welcome applause guys thank

6
00:00:14,519 --> 00:00:23,910
you very much so hi everyone my name is

7
00:00:20,039 --> 00:00:26,130
Dave I work at ANZ my role is a security

8
00:00:23,910 --> 00:00:27,720
partner it's probably best way to frame

9
00:00:26,130 --> 00:00:31,009
that would be think of a security

10
00:00:27,720 --> 00:00:33,390
architect think of dev SEC ops and the

11
00:00:31,009 --> 00:00:35,460
sliding scale that is in between those

12
00:00:33,390 --> 00:00:37,290
two so that's the world I'm living in at

13
00:00:35,460 --> 00:00:40,250
the moment I'm working with a team that

14
00:00:37,290 --> 00:00:42,930
are actually putting out some of this

15
00:00:40,250 --> 00:00:45,629
container based workload into production

16
00:00:42,930 --> 00:00:47,039
so I'm speaking not only as a from a

17
00:00:45,629 --> 00:00:50,039
theoretical perspective it also has some

18
00:00:47,039 --> 00:00:52,079
practical application of this and if you

19
00:00:50,039 --> 00:00:53,699
really like motorbikes I'm also the man

20
00:00:52,079 --> 00:00:55,770
to talk about it

21
00:00:53,699 --> 00:00:59,070
all right starting out with an overview

22
00:00:55,770 --> 00:01:01,129
so we're all on the same page hands up

23
00:00:59,070 --> 00:01:03,719
who's running containers in your

24
00:01:01,129 --> 00:01:06,179
environment in okay cool

25
00:01:03,719 --> 00:01:07,770
how much put your hands up if you will

26
00:01:06,180 --> 00:01:10,890
be running more containers in the next

27
00:01:07,770 --> 00:01:12,929
12 months yeah okay so it's definitely a

28
00:01:10,890 --> 00:01:16,250
growing trend hands up if you really

29
00:01:12,930 --> 00:01:16,250
like audience participation

30
00:01:17,700 --> 00:01:24,570
so docker was version one in 2014 and

31
00:01:22,380 --> 00:01:26,548
you can read as much tech meteor as you

32
00:01:24,570 --> 00:01:29,309
want but roughly the numbers I see are

33
00:01:26,549 --> 00:01:31,590
about 35% compound annual growth rate so

34
00:01:29,310 --> 00:01:34,979
these things flying right kubernetes

35
00:01:31,590 --> 00:01:39,170
which we'll touch on as well is went

36
00:01:34,979 --> 00:01:41,610
version one in 2015 so that's the

37
00:01:39,170 --> 00:01:44,640
orchestration layer and you know tech

38
00:01:41,610 --> 00:01:46,770
media have been calling 2019 kubernetes

39
00:01:44,640 --> 00:01:48,720
the year of the enterprise so and

40
00:01:46,770 --> 00:01:52,380
there's some compelling reasons why

41
00:01:48,720 --> 00:01:54,899
you'd want to do this you get platform

42
00:01:52,380 --> 00:01:57,539
independence you get resource efficiency

43
00:01:54,899 --> 00:02:01,290
and density you get when implemented

44
00:01:57,540 --> 00:02:04,040
correctly effective isolation you get

45
00:02:01,290 --> 00:02:08,119
speed scaling smooth

46
00:02:04,040 --> 00:02:10,280
smooth scaling and key for a lot of us

47
00:02:08,119 --> 00:02:13,090
will be developer productivity and

48
00:02:10,280 --> 00:02:15,740
integration into valinor pipelines so

49
00:02:13,090 --> 00:02:17,450
it's understandable that our app teams

50
00:02:15,740 --> 00:02:21,620
are coming to us and saying we want to

51
00:02:17,450 --> 00:02:23,450
run containers and let's be honest cloud

52
00:02:21,620 --> 00:02:25,460
VMS weren't really you know cutting it

53
00:02:23,450 --> 00:02:26,810
for a lot of dev teams they really want

54
00:02:25,460 --> 00:02:32,120
to get on to this next iteration of

55
00:02:26,810 --> 00:02:34,420
technology so and aren't they beautiful

56
00:02:32,120 --> 00:02:36,140
like I look at containers and I think

57
00:02:34,420 --> 00:02:37,640
that's lovely

58
00:02:36,140 --> 00:02:43,369
I want all containers to look like that

59
00:02:37,640 --> 00:02:45,230
but they don't so we were given the

60
00:02:43,370 --> 00:02:49,670
challenge insecurity of going well how

61
00:02:45,230 --> 00:02:54,230
can we secure these things it became

62
00:02:49,670 --> 00:02:56,750
abundantly apparent to me that the tools

63
00:02:54,230 --> 00:02:58,340
we have today to manage on-prem

64
00:02:56,750 --> 00:03:00,620
infrastructure are not going to be the

65
00:02:58,340 --> 00:03:05,930
tools we need in our arsenal to secure a

66
00:03:00,620 --> 00:03:08,000
cloud native computing so put your hands

67
00:03:05,930 --> 00:03:10,250
up again if you roughly have a fear

68
00:03:08,000 --> 00:03:14,450
handle on what intrusion detection bold

69
00:03:10,250 --> 00:03:18,530
scanning a navy is good most of us

70
00:03:14,450 --> 00:03:20,929
excellent now let me ask you this if you

71
00:03:18,530 --> 00:03:23,900
are asked to run app armor install an

72
00:03:20,930 --> 00:03:26,060
instance of claire and then integrate

73
00:03:23,900 --> 00:03:27,530
notary into your CEO CD pipeline

74
00:03:26,060 --> 00:03:31,340
how many of you would feel the same

75
00:03:27,530 --> 00:03:34,040
level of confidence exactly no one it's

76
00:03:31,340 --> 00:03:36,920
very different tooling so tooling is

77
00:03:34,040 --> 00:03:39,980
changing and where the industry also

78
00:03:36,920 --> 00:03:43,700
needs to change also the stuffs being

79
00:03:39,980 --> 00:03:45,679
built in code so becoming securing the

80
00:03:43,700 --> 00:03:49,160
pipeline all of a sudden doesn't become

81
00:03:45,680 --> 00:03:51,049
a nice to have it to need to have one

82
00:03:49,160 --> 00:03:53,450
other observation I'm seeing as well is

83
00:03:51,049 --> 00:03:56,630
we're seeing a significant shift in

84
00:03:53,450 --> 00:03:59,540
control ownership so I have an app team

85
00:03:56,630 --> 00:04:01,519
I have a network team app team needs

86
00:03:59,540 --> 00:04:03,500
internet access for their application

87
00:04:01,519 --> 00:04:06,230
they go to the network team and request

88
00:04:03,500 --> 00:04:08,299
a firewall rule well guess what

89
00:04:06,230 --> 00:04:09,920
infrastructure is now code that's just

90
00:04:08,299 --> 00:04:11,330
one team operating that control you no

91
00:04:09,920 --> 00:04:13,638
longer have this segregation of duties

92
00:04:11,330 --> 00:04:14,690
so auditors are freaking out of it as

93
00:04:13,639 --> 00:04:16,519
well

94
00:04:14,690 --> 00:04:19,040
and we've also then got the challenge of

95
00:04:16,519 --> 00:04:20,870
the fact that containerized workload is

96
00:04:19,040 --> 00:04:22,550
ephemeral it's moving up and down so you

97
00:04:20,870 --> 00:04:25,880
know we get two days is the average

98
00:04:22,550 --> 00:04:27,740
lifespan of a container so how does it

99
00:04:25,880 --> 00:04:30,040
financially you know highly regulated

100
00:04:27,740 --> 00:04:33,290
financial institution such as ours

101
00:04:30,040 --> 00:04:35,210
manage all of the forensics requirements

102
00:04:33,290 --> 00:04:38,750
on that workload that's coming and going

103
00:04:35,210 --> 00:04:41,210
so I'll just go through a typical

104
00:04:38,750 --> 00:04:44,630
anatomy of what a container stack looks

105
00:04:41,210 --> 00:04:45,890
like spoiler alert there's not a not not

106
00:04:44,630 --> 00:04:47,690
a lot in you at the physical server

107
00:04:45,890 --> 00:04:52,099
layer other than it might be hosted by

108
00:04:47,690 --> 00:04:53,960
Amazon Google or Microsoft host OS

109
00:04:52,100 --> 00:04:55,220
you've still got your typical linux

110
00:04:53,960 --> 00:04:56,120
kernel's this is where it gets a bit

111
00:04:55,220 --> 00:04:58,910
interesting so you've got your

112
00:04:56,120 --> 00:05:00,830
namespaces cgroups and security and it's

113
00:04:58,910 --> 00:05:03,770
the reason I call these out is namespace

114
00:05:00,830 --> 00:05:05,000
is that essential container component

115
00:05:03,770 --> 00:05:07,549
that we're talking about when we talk

116
00:05:05,000 --> 00:05:11,330
about containers namespaces that real

117
00:05:07,550 --> 00:05:13,760
isolation boundary cgroups provide

118
00:05:11,330 --> 00:05:17,240
control over the resources that those

119
00:05:13,760 --> 00:05:20,120
namespaces consume CPU memory IO etc and

120
00:05:17,240 --> 00:05:21,890
security is the mandatory access control

121
00:05:20,120 --> 00:05:23,300
things like app armour and SC Linux

122
00:05:21,890 --> 00:05:25,580
which we're also going to talk more

123
00:05:23,300 --> 00:05:28,600
about sitting on top of that is your

124
00:05:25,580 --> 00:05:34,039
docker engine now dock is cool

125
00:05:28,600 --> 00:05:36,890
it's a client-server app it has a daemon

126
00:05:34,040 --> 00:05:39,230
which is your docker D command it has a

127
00:05:36,890 --> 00:05:43,900
CLI that you can interface with and it

128
00:05:39,230 --> 00:05:46,669
also has a REST API interface and then

129
00:05:43,900 --> 00:05:49,299
in comes your applications that you

130
00:05:46,669 --> 00:05:51,590
bring along with it so you bundle in

131
00:05:49,300 --> 00:05:53,990
application binaries and libraries you

132
00:05:51,590 --> 00:05:58,869
need that aren't in the underlying host

133
00:05:53,990 --> 00:06:02,060
OS now at this point you might be

134
00:05:58,870 --> 00:06:03,830
realizing that doesn't look like a

135
00:06:02,060 --> 00:06:07,880
traditional VM architecture where I've

136
00:06:03,830 --> 00:06:09,500
got a very tight definition and boundary

137
00:06:07,880 --> 00:06:12,469
between the underlying hypervisor layer

138
00:06:09,500 --> 00:06:15,290
and the application running on it the

139
00:06:12,470 --> 00:06:19,040
application is sharing the underlying

140
00:06:15,290 --> 00:06:21,260
kernel resources don't let that point

141
00:06:19,040 --> 00:06:24,229
escape you as you work through this talk

142
00:06:21,260 --> 00:06:25,760
because it's a very key component to why

143
00:06:24,229 --> 00:06:26,590
we need to have multiple layers of

144
00:06:25,760 --> 00:06:29,050
Defense

145
00:06:26,590 --> 00:06:31,000
and then on top of all that is

146
00:06:29,050 --> 00:06:32,440
kubernetes now I've chosen kubernetes

147
00:06:31,000 --> 00:06:34,660
because I think it's going to win the

148
00:06:32,440 --> 00:06:36,360
race in terms of orchestration but there

149
00:06:34,660 --> 00:06:38,980
are other technologies out there and

150
00:06:36,360 --> 00:06:40,570
what kubernetes is doing is it's

151
00:06:38,980 --> 00:06:44,350
bringing together the orchestration

152
00:06:40,570 --> 00:06:45,880
spinning up spinning down starting

153
00:06:44,350 --> 00:06:48,419
stopping grouping things into clusters

154
00:06:45,880 --> 00:06:50,590
across multiple hosts so if you've got

155
00:06:48,419 --> 00:06:52,270
you know you want to run a highly

156
00:06:50,590 --> 00:06:53,950
resilient application across multiple

157
00:06:52,270 --> 00:06:57,609
data centers you would use something

158
00:06:53,950 --> 00:06:59,860
like kubernetes to do that so that host

159
00:06:57,610 --> 00:07:01,450
OS we're going to talk about more as

160
00:06:59,860 --> 00:07:03,160
well because it's important that it's

161
00:07:01,450 --> 00:07:07,810
not just the same like a generic linux

162
00:07:03,160 --> 00:07:09,700
host OS now our anatomy from within

163
00:07:07,810 --> 00:07:14,020
kubernetes so we're looking kubernetes

164
00:07:09,700 --> 00:07:16,810
top down you get these new naming

165
00:07:14,020 --> 00:07:19,210
standards of things that may not mean

166
00:07:16,810 --> 00:07:21,940
much yet so what you've got is a

167
00:07:19,210 --> 00:07:24,280
container that's the innermost component

168
00:07:21,940 --> 00:07:26,500
that sits with inside a pod that shares

169
00:07:24,280 --> 00:07:28,830
a namespace that sits in a node that

170
00:07:26,500 --> 00:07:32,740
sits in a cluster that sits in a project

171
00:07:28,830 --> 00:07:34,659
now that project would be Amazon account

172
00:07:32,740 --> 00:07:37,030
if it was done in Amazon this is taken

173
00:07:34,660 --> 00:07:38,289
from the Google Blog I think the two

174
00:07:37,030 --> 00:07:41,349
things you need to know here are

175
00:07:38,289 --> 00:07:43,360
containers themselves do not provide

176
00:07:41,350 --> 00:07:45,430
enough isolation on their own they need

177
00:07:43,360 --> 00:07:48,070
more and I'm quoting Google when I say

178
00:07:45,430 --> 00:07:49,479
that who invented a lot of this stuff or

179
00:07:48,070 --> 00:07:54,010
really was the first to use this in an

180
00:07:49,479 --> 00:07:55,870
NGO and I think each boundary here now

181
00:07:54,010 --> 00:08:01,090
becomes an opportunity to do security

182
00:07:55,870 --> 00:08:02,680
right or wrong and the risks are real

183
00:08:01,090 --> 00:08:05,830
this is my fear uncertainty and doubt

184
00:08:02,680 --> 00:08:08,260
page FUD I won't dwell on it we all know

185
00:08:05,830 --> 00:08:10,000
how to explain this but it's a Linux

186
00:08:08,260 --> 00:08:11,710
kernel at the end of the day you inherit

187
00:08:10,000 --> 00:08:14,919
a lot of the lovely Linux kernel

188
00:08:11,710 --> 00:08:16,510
vulnerabilities and publicly

189
00:08:14,919 --> 00:08:17,680
people of using this have got themselves

190
00:08:16,510 --> 00:08:20,020
caught in a bit of a mess

191
00:08:17,680 --> 00:08:24,039
Tesla WeightWatchers and Aviva the good

192
00:08:20,020 --> 00:08:27,580
news with those ones are but well good

193
00:08:24,039 --> 00:08:29,800
news what got them was miss

194
00:08:27,580 --> 00:08:31,930
configuration of implementation not

195
00:08:29,800 --> 00:08:34,240
necessarily zero-day vulnerabilities

196
00:08:31,930 --> 00:08:36,100
with a kubernetes environment or a

197
00:08:34,240 --> 00:08:39,190
docker environment

198
00:08:36,100 --> 00:08:42,580
and the defaults have changed since

199
00:08:39,190 --> 00:08:44,860
early versions of this in technology and

200
00:08:42,580 --> 00:08:47,170
their rapidly changing so now that a lot

201
00:08:44,860 --> 00:08:48,580
of the same things wouldn't be affecting

202
00:08:47,170 --> 00:08:50,670
your organization if you were to deploy

203
00:08:48,580 --> 00:08:54,970
a new instance of kubernetes and

204
00:08:50,670 --> 00:08:57,370
containerized workload tomorrow but the

205
00:08:54,970 --> 00:09:00,520
Bell has been rung and can no longer be

206
00:08:57,370 --> 00:09:03,400
unrung so the bell was rung December

207
00:09:00,520 --> 00:09:07,510
2018 when we saw the first API or server

208
00:09:03,400 --> 00:09:10,510
bypass thankfully that was responsibly

209
00:09:07,510 --> 00:09:12,990
disclosed by a and identified by a

210
00:09:10,510 --> 00:09:17,970
contributor to the kubernetes project

211
00:09:12,990 --> 00:09:21,280
run C in February was a container host

212
00:09:17,970 --> 00:09:23,230
breakout from from host to root so this

213
00:09:21,280 --> 00:09:24,490
is the this is the the worrying thing

214
00:09:23,230 --> 00:09:26,560
that we've always worried about with

215
00:09:24,490 --> 00:09:28,000
clapper visors of a guest host break out

216
00:09:26,560 --> 00:09:30,339
the exact thing we worried about

217
00:09:28,000 --> 00:09:33,190
containers happened and was disclosed in

218
00:09:30,340 --> 00:09:34,720
February 9 2019 the good news is as well

219
00:09:33,190 --> 00:09:36,070
I'm gonna tell you how that wasn't a

220
00:09:34,720 --> 00:09:38,950
problem for us in the way we've

221
00:09:36,070 --> 00:09:42,210
configured our workload because of some

222
00:09:38,950 --> 00:09:44,590
of the settings in the kubernetes stack

223
00:09:42,210 --> 00:09:46,330
so that harmless little request from

224
00:09:44,590 --> 00:09:49,290
application teams to go Dave we want to

225
00:09:46,330 --> 00:09:53,800
run containers help us to do it safely

226
00:09:49,290 --> 00:09:56,319
has become now a complete audit of these

227
00:09:53,800 --> 00:09:59,250
seven items so the underlying CI CD

228
00:09:56,320 --> 00:10:01,390
pipeline underlying OS security

229
00:09:59,250 --> 00:10:03,310
container image runtime security

230
00:10:01,390 --> 00:10:05,680
orchestrations network logging and

231
00:10:03,310 --> 00:10:08,410
auditing now none of that's new but it's

232
00:10:05,680 --> 00:10:10,270
also all new because it's being done in

233
00:10:08,410 --> 00:10:12,130
the context of a container so some of

234
00:10:10,270 --> 00:10:13,870
the approaches than the way we've solved

235
00:10:12,130 --> 00:10:18,640
these problems traditionally now need to

236
00:10:13,870 --> 00:10:20,470
be revisited so at this point let's just

237
00:10:18,640 --> 00:10:25,810
pause and consider what we know we've

238
00:10:20,470 --> 00:10:27,730
got firstly you know mmm maturing

239
00:10:25,810 --> 00:10:31,449
technology but critically one that's not

240
00:10:27,730 --> 00:10:32,890
yet mature we've got technology that's

241
00:10:31,450 --> 00:10:36,670
unfamiliar for a lot of technical

242
00:10:32,890 --> 00:10:37,540
security teams we've got evidence that

243
00:10:36,670 --> 00:10:39,520
the risks are real

244
00:10:37,540 --> 00:10:40,839
we've got statements from Google on

245
00:10:39,520 --> 00:10:43,689
their blog that containers are not

246
00:10:40,840 --> 00:10:45,100
enough isolation on their own and yet

247
00:10:43,690 --> 00:10:48,190
despite all that we've got an insatiable

248
00:10:45,100 --> 00:10:49,600
adoption rate for this technology

249
00:10:48,190 --> 00:10:53,410
so it probably should be a little

250
00:10:49,600 --> 00:10:55,600
concerned but just like containers allow

251
00:10:53,410 --> 00:10:57,189
you to segment portions of your

252
00:10:55,600 --> 00:10:59,589
application and break your problems down

253
00:10:57,190 --> 00:11:03,579
we can break our security problems down

254
00:10:59,589 --> 00:11:07,360
as well all right so this is the meat

255
00:11:03,579 --> 00:11:10,120
and potatoes of the talk I was inspired

256
00:11:07,360 --> 00:11:14,019
but I talked I saw you a few years ago

257
00:11:10,120 --> 00:11:16,199
that just went into quite a lot of debt

258
00:11:14,019 --> 00:11:19,779
so I'm going to fly through these slides

259
00:11:16,199 --> 00:11:20,889
but it's important you know we'll go

260
00:11:19,779 --> 00:11:25,029
through certain questions at the end if

261
00:11:20,889 --> 00:11:26,529
you've got any so starting off the build

262
00:11:25,029 --> 00:11:28,509
environment what are our problems are

263
00:11:26,529 --> 00:11:31,660
trying to solve well we've got malicious

264
00:11:28,509 --> 00:11:33,819
or sub-optimal source code alterations

265
00:11:31,660 --> 00:11:35,019
to our build policies config scripts

266
00:11:33,819 --> 00:11:37,420
with errors or ones that expose

267
00:11:35,019 --> 00:11:40,959
credentials supply chain provenance

268
00:11:37,420 --> 00:11:43,149
insecure libraries iron down revisions

269
00:11:40,959 --> 00:11:45,910
of existing code now at this point

270
00:11:43,149 --> 00:11:47,860
you're thinking oh Davey you're gonna go

271
00:11:45,910 --> 00:11:50,350
into war and peace about telling us to

272
00:11:47,860 --> 00:11:51,699
do how things we already know well kind

273
00:11:50,350 --> 00:11:53,050
of and also the other thing you're

274
00:11:51,699 --> 00:11:54,279
thinking is you really like bullet

275
00:11:53,050 --> 00:11:57,370
points and yes I do

276
00:11:54,279 --> 00:11:58,600
bullet points everywhere I won't spend a

277
00:11:57,370 --> 00:12:01,029
lot of time because hopefully you know

278
00:11:58,600 --> 00:12:03,100
how to solve your source code from and

279
00:12:01,029 --> 00:12:05,709
securing your your build pipeline but

280
00:12:03,100 --> 00:12:07,420
we'll just fly through this protect your

281
00:12:05,709 --> 00:12:09,660
environment like your app have

282
00:12:07,420 --> 00:12:11,920
governance over your code changes

283
00:12:09,660 --> 00:12:13,839
principles of least privilege apply here

284
00:12:11,920 --> 00:12:16,899
most importantly so who has access to

285
00:12:13,839 --> 00:12:18,250
your code who has access to deploy and

286
00:12:16,899 --> 00:12:20,980
when we talk about protections you know

287
00:12:18,250 --> 00:12:22,750
have to FA turned on on you know major

288
00:12:20,980 --> 00:12:27,069
administrative activities in your source

289
00:12:22,750 --> 00:12:29,259
code and build pipelines so I think

290
00:12:27,069 --> 00:12:33,069
that's a key like you know to a phase

291
00:12:29,259 --> 00:12:35,230
key here the other thing is as you start

292
00:12:33,069 --> 00:12:38,139
to get more savvy in the way you build

293
00:12:35,230 --> 00:12:40,389
your code you can start shifting left in

294
00:12:38,139 --> 00:12:43,540
you know you know buzzword but shifting

295
00:12:40,389 --> 00:12:45,279
left with your IDE as well so you

296
00:12:43,540 --> 00:12:47,110
actually got plugins that sit in the IDE

297
00:12:45,279 --> 00:12:49,870
that are identifying any source code

298
00:12:47,110 --> 00:12:51,579
vulnerabilities as codes been cut that's

299
00:12:49,870 --> 00:12:53,439
a great thing because they will then

300
00:12:51,579 --> 00:12:55,329
integrate with your SAS tooling nicely

301
00:12:53,439 --> 00:12:58,990
so if you've got a sassed to also secure

302
00:12:55,329 --> 00:13:00,550
our static analysis tool they often have

303
00:12:58,990 --> 00:13:03,370
an ID a plug-in that you can use

304
00:13:00,550 --> 00:13:05,170
so do that you also want to implement

305
00:13:03,370 --> 00:13:06,820
policies to prevent bad code so it's

306
00:13:05,170 --> 00:13:08,140
great that you found some bad code

307
00:13:06,820 --> 00:13:10,300
are you still letting that bad code out

308
00:13:08,140 --> 00:13:14,080
to production so just have a think about

309
00:13:10,300 --> 00:13:16,990
that and have a pattern of pre-agreed

310
00:13:14,080 --> 00:13:17,860
safe libraries cashing your binaries is

311
00:13:16,990 --> 00:13:20,829
pretty good as well

312
00:13:17,860 --> 00:13:22,630
is this the code I'm expecting and so

313
00:13:20,829 --> 00:13:24,189
rather than more talking this is a

314
00:13:22,630 --> 00:13:26,589
picture of kind of what it could look

315
00:13:24,190 --> 00:13:28,329
like if it was all hanging together on

316
00:13:26,589 --> 00:13:30,339
the Left you've got your source code

317
00:13:28,329 --> 00:13:32,260
docker file test code all going into

318
00:13:30,339 --> 00:13:34,329
your git repo hopefully you've got your

319
00:13:32,260 --> 00:13:35,920
ID a plug-in checking as it's going in

320
00:13:34,329 --> 00:13:39,750
you should then kick off a code scan

321
00:13:35,920 --> 00:13:41,769
from your git that's your SAS tooling

322
00:13:39,750 --> 00:13:43,810
you then we might want to have a

323
00:13:41,769 --> 00:13:47,380
security unit test so what's a security

324
00:13:43,810 --> 00:13:50,199
unit test they are kind of mini tests it

325
00:13:47,380 --> 00:13:52,140
sorry it whoops to detect secret

326
00:13:50,200 --> 00:13:54,040
cross-site scripting or sequel injection

327
00:13:52,140 --> 00:13:55,720
without having to build your full app

328
00:13:54,040 --> 00:13:58,449
you can just build parts of your app and

329
00:13:55,720 --> 00:14:01,209
run these tests against it and then the

330
00:13:58,450 --> 00:14:03,339
composition analysis so in today's

331
00:14:01,209 --> 00:14:06,550
modern apps we're building so much code

332
00:14:03,339 --> 00:14:08,709
from other people's code but all that

333
00:14:06,550 --> 00:14:10,930
code you've imported into your app safe

334
00:14:08,709 --> 00:14:13,180
and secure composition analysis will

335
00:14:10,930 --> 00:14:15,010
allow us to go and work out that are we

336
00:14:13,180 --> 00:14:18,520
using some vulnerable open source

337
00:14:15,010 --> 00:14:20,410
library better go fix that as you push

338
00:14:18,520 --> 00:14:24,010
and pull stuff through your registry in

339
00:14:20,410 --> 00:14:25,870
your building you want to use slave

340
00:14:24,010 --> 00:14:28,149
accounts so it's again principle of

341
00:14:25,870 --> 00:14:29,980
least privilege you then want some sort

342
00:14:28,149 --> 00:14:32,890
of validation check that yes this is the

343
00:14:29,980 --> 00:14:36,810
container I'm expecting and a go/no-go

344
00:14:32,890 --> 00:14:40,600
stage-gate before you go into product

345
00:14:36,810 --> 00:14:42,609
all right host underlie the underlying

346
00:14:40,600 --> 00:14:44,199
host operating system so what are we

347
00:14:42,610 --> 00:14:46,480
worried about same things we worried

348
00:14:44,199 --> 00:14:48,250
about now underline kernel vulns but we

349
00:14:46,480 --> 00:14:49,899
get the benefit the containers are

350
00:14:48,250 --> 00:14:52,930
sharing these operating system resources

351
00:14:49,899 --> 00:14:55,180
so yay so we will also want to

352
00:14:52,930 --> 00:14:57,579
quarantine containers from each other

353
00:14:55,180 --> 00:14:59,800
and we also want to stop any container

354
00:14:57,579 --> 00:15:01,449
breakout so again that's the guest to

355
00:14:59,800 --> 00:15:04,750
host breakout in a traditional VM

356
00:15:01,449 --> 00:15:07,029
environment so how do we stop that patch

357
00:15:04,750 --> 00:15:10,510
often this is where containers get

358
00:15:07,029 --> 00:15:12,430
really cool you do not have to wait like

359
00:15:10,510 --> 00:15:13,209
you have to patch a hypervisor to take

360
00:15:12,430 --> 00:15:15,099
down a house

361
00:15:13,209 --> 00:15:16,899
infrastructure you can just patch this

362
00:15:15,100 --> 00:15:18,610
stuff so patching your underlying host

363
00:15:16,899 --> 00:15:20,290
actually is a lot easier in container

364
00:15:18,610 --> 00:15:24,189
workload because stuff can spin up and

365
00:15:20,290 --> 00:15:27,610
spin down so that's cool you want to run

366
00:15:24,189 --> 00:15:30,368
a specific container os though and the

367
00:15:27,610 --> 00:15:31,929
reason you do that is because it forces

368
00:15:30,369 --> 00:15:35,110
you to only run containers in that

369
00:15:31,929 --> 00:15:36,790
workload so that you can you don't end

370
00:15:35,110 --> 00:15:38,889
up basically putting things in the wrong

371
00:15:36,790 --> 00:15:43,118
places and the attack surface for

372
00:15:38,889 --> 00:15:44,709
attackers is very small G vizor so we're

373
00:15:43,119 --> 00:15:46,179
going to talk a lot about how do you

374
00:15:44,709 --> 00:15:48,189
protect the containers that are living

375
00:15:46,179 --> 00:15:52,209
in user land but how do you protect the

376
00:15:48,189 --> 00:15:54,998
kernel itself from any illicit acts so G

377
00:15:52,209 --> 00:15:56,618
visors a great open source tool that is

378
00:15:54,999 --> 00:15:58,990
freely available

379
00:15:56,619 --> 00:16:01,269
it essentially sandboxes the calls

380
00:15:58,990 --> 00:16:05,350
between the containers down to the

381
00:16:01,269 --> 00:16:07,959
underlying kernel and only a let's safe

382
00:16:05,350 --> 00:16:10,179
code go through so it's a great little

383
00:16:07,959 --> 00:16:12,399
tool you didn't also want to look at

384
00:16:10,179 --> 00:16:14,619
who's got access control on those

385
00:16:12,399 --> 00:16:17,769
underlying OSS and then of course you

386
00:16:14,619 --> 00:16:20,709
can drop the ops altogether although

387
00:16:17,769 --> 00:16:22,089
we're highly regulated at A&Z you know

388
00:16:20,709 --> 00:16:24,339
it doesn't preclude us from running

389
00:16:22,089 --> 00:16:26,110
workload in the cloud that said we've

390
00:16:24,339 --> 00:16:27,999
got infrastructure that does

391
00:16:26,110 --> 00:16:29,499
containerize workload both on Prem and

392
00:16:27,999 --> 00:16:33,429
in the cloud so we've got the kind of

393
00:16:29,499 --> 00:16:35,049
best of both worlds but you know you can

394
00:16:33,429 --> 00:16:39,160
use cloud tooling to manage that

395
00:16:35,049 --> 00:16:42,699
underlying OS as well all right so then

396
00:16:39,160 --> 00:16:44,980
we've got our container image what's the

397
00:16:42,699 --> 00:16:48,490
problems there well images need

398
00:16:44,980 --> 00:16:51,490
hardening defaults are not exhaustive

399
00:16:48,490 --> 00:16:53,049
and then provenance over supply chain

400
00:16:51,490 --> 00:16:54,339
I'm probably missing one there actually

401
00:16:53,049 --> 00:16:57,990
and that is where are you getting the

402
00:16:54,339 --> 00:17:00,160
images from is it docker community hub

403
00:16:57,990 --> 00:17:02,079
so how do we how do we solve those

404
00:17:00,160 --> 00:17:03,910
problems well most of you would have

405
00:17:02,079 --> 00:17:08,198
heard the CIS benchmarks if you haven't

406
00:17:03,910 --> 00:17:09,639
get onto it it's great however CIS

407
00:17:08,199 --> 00:17:11,380
benchmarks what they do is they tell you

408
00:17:09,640 --> 00:17:13,539
how you should harden your images how

409
00:17:11,380 --> 00:17:16,240
you should harden your use of our

410
00:17:13,539 --> 00:17:18,099
technology docker bench security is a

411
00:17:16,240 --> 00:17:20,169
bit of a hand in glove relationship in

412
00:17:18,099 --> 00:17:22,829
that regard what docker bench is doing

413
00:17:20,169 --> 00:17:25,120
is it's taking the CAS benchmarks and

414
00:17:22,829 --> 00:17:26,480
running it against your workload and

415
00:17:25,119 --> 00:17:28,069
giving you an output

416
00:17:26,480 --> 00:17:31,820
so you can actually build that into your

417
00:17:28,069 --> 00:17:34,100
pipeline and go do not pass go to prod

418
00:17:31,820 --> 00:17:38,960
unless you pass the CIS benchmarks

419
00:17:34,100 --> 00:17:41,449
hardening standard so notary does a lot

420
00:17:38,960 --> 00:17:43,639
of the container signing and chain of

421
00:17:41,450 --> 00:17:45,529
custody so it allows you to go is this

422
00:17:43,639 --> 00:17:49,309
container I'm expecting as it goes

423
00:17:45,529 --> 00:17:51,620
through your supply chain I mean make it

424
00:17:49,309 --> 00:17:53,779
hard for attackers right remove unneeded

425
00:17:51,620 --> 00:17:57,590
modules and packages so they can't live

426
00:17:53,779 --> 00:18:00,590
off the land do you need SSH in your

427
00:17:57,590 --> 00:18:03,590
containerized workload I would argue you

428
00:18:00,590 --> 00:18:05,240
don't and you may want to leave it

429
00:18:03,590 --> 00:18:08,059
hanging around in dev but you certainly

430
00:18:05,240 --> 00:18:10,100
don't need it in prod so get it off your

431
00:18:08,059 --> 00:18:11,570
environment if you're going to make a

432
00:18:10,100 --> 00:18:15,529
change you go back to your build

433
00:18:11,570 --> 00:18:17,178
pipeline and you build it again you can

434
00:18:15,529 --> 00:18:20,269
do your app to get updates as you're

435
00:18:17,179 --> 00:18:25,220
building so you're not running around

436
00:18:20,269 --> 00:18:26,720
with style images and the next problem

437
00:18:25,220 --> 00:18:31,130
you've got to solve is runtime security

438
00:18:26,720 --> 00:18:32,990
now I won't pretend to go into this in

439
00:18:31,130 --> 00:18:35,149
detail you can all go read The MITRE

440
00:18:32,990 --> 00:18:36,950
attack framework in your spare time if

441
00:18:35,149 --> 00:18:37,850
you want but they're the things we're

442
00:18:36,950 --> 00:18:40,279
worried about they're the things we've

443
00:18:37,850 --> 00:18:41,629
always been worried about but we need to

444
00:18:40,279 --> 00:18:45,019
solve them in a different way in our

445
00:18:41,630 --> 00:18:46,340
containerized workloads so the first

446
00:18:45,019 --> 00:18:49,700
thing really want to talk about here is

447
00:18:46,340 --> 00:18:51,320
mandatory access control so a farmer or

448
00:18:49,700 --> 00:18:53,269
SELinux may may have heard of those

449
00:18:51,320 --> 00:18:55,850
technologies they've been around for

450
00:18:53,269 --> 00:18:57,580
actually ages but they've never been

451
00:18:55,850 --> 00:19:01,178
really able to be implemented with anger

452
00:18:57,580 --> 00:19:05,240
until I would argue now because a

453
00:19:01,179 --> 00:19:07,549
traditional bloated operating system

454
00:19:05,240 --> 00:19:09,470
would have too many moving parts that

455
00:19:07,549 --> 00:19:12,139
you could never just whitelist only run

456
00:19:09,470 --> 00:19:14,539
this or not it wasn't as easy back then

457
00:19:12,139 --> 00:19:16,699
now we're putting our applications into

458
00:19:14,539 --> 00:19:19,039
micro services so each application is

459
00:19:16,700 --> 00:19:21,350
broken down into very defined chunks and

460
00:19:19,039 --> 00:19:23,210
those very defined chunks can have very

461
00:19:21,350 --> 00:19:24,889
defined whitelist rules around them so

462
00:19:23,210 --> 00:19:29,120
this technology is now having a bit of a

463
00:19:24,889 --> 00:19:33,709
resurgence and there's some great open

464
00:19:29,120 --> 00:19:36,500
source stuff from a guy who's Aussie guy

465
00:19:33,710 --> 00:19:37,639
on the OWASP chapter who's named Osama

466
00:19:36,500 --> 00:19:39,840
el-naggar

467
00:19:37,639 --> 00:19:42,059
and he's got us

468
00:19:39,840 --> 00:19:45,350
the guard as well as is a great tool to

469
00:19:42,059 --> 00:19:48,960
help make this process easier

470
00:19:45,350 --> 00:19:51,149
you want to also separate process ID

471
00:19:48,960 --> 00:19:53,340
namespaces per tenant so they're not

472
00:19:51,150 --> 00:19:55,919
shared now if you're running kubernetes

473
00:19:53,340 --> 00:19:57,330
this is by default but if you're not and

474
00:19:55,919 --> 00:20:00,240
you're just running a docker instance be

475
00:19:57,330 --> 00:20:04,980
mindful of that we talked about SSH

476
00:20:00,240 --> 00:20:06,450
earlier and why maybe you store your

477
00:20:04,980 --> 00:20:08,460
state somewhere else so your dot your

478
00:20:06,450 --> 00:20:11,240
containers can run in a non persistent

479
00:20:08,460 --> 00:20:11,240
and read-only mode

480
00:20:13,700 --> 00:20:18,720
docker itself has a second comp profile

481
00:20:16,919 --> 00:20:21,210
that you want to turn on just running it

482
00:20:18,720 --> 00:20:22,710
in default is fine it blocks a lot of

483
00:20:21,210 --> 00:20:25,230
nasty stuff

484
00:20:22,710 --> 00:20:28,159
those nasty stuff things like add key

485
00:20:25,230 --> 00:20:30,240
key control request key clone unshare

486
00:20:28,159 --> 00:20:31,740
those are the things you want to

487
00:20:30,240 --> 00:20:33,360
typically stop and if you go back to

488
00:20:31,740 --> 00:20:35,309
that fear uncertainty and doubt page

489
00:20:33,360 --> 00:20:38,070
with all the vulnerabilities and

490
00:20:35,309 --> 00:20:39,840
exploits those are the words you keep

491
00:20:38,070 --> 00:20:42,960
seeing appear as well so docker set

492
00:20:39,840 --> 00:20:44,760
profile turn it on defaults good

493
00:20:42,960 --> 00:20:47,429
it is now anyway it wasn't always but it

494
00:20:44,760 --> 00:20:48,899
is good now enforce some time to live

495
00:20:47,429 --> 00:20:51,029
thresholds so how often do you want to

496
00:20:48,899 --> 00:20:52,379
rebuild your workload given

497
00:20:51,029 --> 00:20:54,450
vulnerabilities are coming out every day

498
00:20:52,380 --> 00:20:57,330
and given your pipe wall and does a

499
00:20:54,450 --> 00:20:59,520
volunteer as it goes maybe you only need

500
00:20:57,330 --> 00:21:03,029
this stuff you know live for seven days

501
00:20:59,520 --> 00:21:04,620
and then you rebuild it and then

502
00:21:03,029 --> 00:21:06,299
continue to violence again against

503
00:21:04,620 --> 00:21:09,320
running instances as well so don't just

504
00:21:06,299 --> 00:21:13,020
think oh I volunteered during my build

505
00:21:09,320 --> 00:21:13,590
job done will I think you need to keep

506
00:21:13,020 --> 00:21:17,970
scanning

507
00:21:13,590 --> 00:21:19,830
as you go through runtime all right now

508
00:21:17,970 --> 00:21:22,590
orchestration this is kubernetes this is

509
00:21:19,830 --> 00:21:27,320
a big area where we want to we want to

510
00:21:22,590 --> 00:21:30,299
talk about because it's it's a lot of

511
00:21:27,320 --> 00:21:31,379
opportunity here for attackers so what

512
00:21:30,299 --> 00:21:33,929
are we worried about well we're worried

513
00:21:31,380 --> 00:21:39,090
about stealing secrets service account

514
00:21:33,929 --> 00:21:41,340
accesses to the API layer metadata api's

515
00:21:39,090 --> 00:21:45,350
in your cloud provider so if you're in

516
00:21:41,340 --> 00:21:50,370
Amazon and you go to 169.254 dot blah

517
00:21:45,350 --> 00:21:51,928
you're gonna get a very awesome if

518
00:21:50,370 --> 00:21:53,169
you're an attacker list of running

519
00:21:51,929 --> 00:21:55,690
workload

520
00:21:53,170 --> 00:21:57,670
so it just as easy to enumerate you're

521
00:21:55,690 --> 00:21:59,110
running workload now although that's

522
00:21:57,670 --> 00:22:00,670
nothing to do with containers you're

523
00:21:59,110 --> 00:22:01,959
trying to make it hard for them so we've

524
00:22:00,670 --> 00:22:03,730
got to look at addressing that and

525
00:22:01,960 --> 00:22:06,280
that's an attack vector that is in use

526
00:22:03,730 --> 00:22:07,900
in the wild right now we've got

527
00:22:06,280 --> 00:22:10,840
enumeration that's coming from that

528
00:22:07,900 --> 00:22:12,400
we've got the token replays we've got a

529
00:22:10,840 --> 00:22:16,389
man in the middle we've got container

530
00:22:12,400 --> 00:22:18,940
breakouts exerting cetera so again just

531
00:22:16,390 --> 00:22:21,280
like docker had the CIS benchmarks and

532
00:22:18,940 --> 00:22:23,230
docker bench security kubernetes has got

533
00:22:21,280 --> 00:22:26,440
the same CAS benchmark so kubernetes

534
00:22:23,230 --> 00:22:29,740
kubernetes a bench security use them

535
00:22:26,440 --> 00:22:31,540
they're awesome more recent versions of

536
00:22:29,740 --> 00:22:34,270
kubernetes introduced this concept of

537
00:22:31,540 --> 00:22:36,010
our back and cluster roll binding hasn't

538
00:22:34,270 --> 00:22:38,230
always been the case but now the more

539
00:22:36,010 --> 00:22:40,030
recent versions do have this and even

540
00:22:38,230 --> 00:22:43,510
more recent versions have now moved to a

541
00:22:40,030 --> 00:22:46,110
state where no privileges are granted by

542
00:22:43,510 --> 00:22:49,180
default you have to in wrote invoke them

543
00:22:46,110 --> 00:22:50,709
which is also good you want to disable

544
00:22:49,180 --> 00:22:52,690
the mounting of any service account

545
00:22:50,710 --> 00:22:57,160
tokens you want to restrict access to

546
00:22:52,690 --> 00:22:59,290
the kubernetes api not every pod in your

547
00:22:57,160 --> 00:23:01,210
kubernetes workload needs access to the

548
00:22:59,290 --> 00:23:05,500
kubernetes api so restrict it where you

549
00:23:01,210 --> 00:23:08,590
can enable pod security policies this is

550
00:23:05,500 --> 00:23:11,230
a big one if you do one thing today do

551
00:23:08,590 --> 00:23:13,360
that so the run c vulnerability that I

552
00:23:11,230 --> 00:23:15,310
talked about before wasn't a problem for

553
00:23:13,360 --> 00:23:17,409
us because we had pod security van der

554
00:23:15,310 --> 00:23:20,260
pol security policy turned on to run as

555
00:23:17,410 --> 00:23:22,840
non-root so any workload that was

556
00:23:20,260 --> 00:23:25,060
running in our kubernetes stack was not

557
00:23:22,840 --> 00:23:26,169
given root privilege so the ability to

558
00:23:25,060 --> 00:23:28,950
then break out the hosts

559
00:23:26,170 --> 00:23:35,170
wasn't it wasn't an option in that run C

560
00:23:28,950 --> 00:23:37,510
scenario now the Tesla weight watchers

561
00:23:35,170 --> 00:23:39,280
one that got compromised earlier they

562
00:23:37,510 --> 00:23:41,980
got compromised because the web UI

563
00:23:39,280 --> 00:23:44,320
dashboard was on by default it's no

564
00:23:41,980 --> 00:23:46,210
longer on and I would argue if you're

565
00:23:44,320 --> 00:23:49,149
doing this in the cloud you probably

566
00:23:46,210 --> 00:23:50,830
don't even need it at all because a lot

567
00:23:49,150 --> 00:23:52,660
of the telemetry you would get from that

568
00:23:50,830 --> 00:23:54,879
service you get yous going to be

569
00:23:52,660 --> 00:23:56,230
provided by your console you see in your

570
00:23:54,880 --> 00:24:00,100
cloud providers

571
00:23:56,230 --> 00:24:01,780
service also implement a network policy

572
00:24:00,100 --> 00:24:03,370
using pod labels this is layer for

573
00:24:01,780 --> 00:24:05,470
networking but of course it's not IP

574
00:24:03,370 --> 00:24:07,629
addresses anymore it's tags

575
00:24:05,470 --> 00:24:09,909
but do essentially something akin to a

576
00:24:07,630 --> 00:24:12,130
lair for network policy that only pot a

577
00:24:09,909 --> 00:24:16,900
can talk to pod B but they can't talk to

578
00:24:12,130 --> 00:24:22,799
pod C encrypting your kubernetes secrets

579
00:24:16,900 --> 00:24:25,539
so your Etsy shadow file in in your

580
00:24:22,799 --> 00:24:27,850
master node that's managed by your cloud

581
00:24:25,539 --> 00:24:29,500
provider they may solve this for you I

582
00:24:27,850 --> 00:24:32,289
know Google who are more familiar with

583
00:24:29,500 --> 00:24:35,200
do this but a default instance of

584
00:24:32,289 --> 00:24:37,629
kubernetes does not so just be mindful

585
00:24:35,200 --> 00:24:39,460
of that restrict your Cubitt permissions

586
00:24:37,630 --> 00:24:40,840
so you can only see the pods that are on

587
00:24:39,460 --> 00:24:44,020
each node so should a pod get

588
00:24:40,840 --> 00:24:45,939
compromised it's making it harder to

589
00:24:44,020 --> 00:24:49,570
reach out and let a really move for an

590
00:24:45,940 --> 00:24:52,870
attacker sto service mesh we're going to

591
00:24:49,570 --> 00:24:57,639
talk about this but essentially layer 7

592
00:24:52,870 --> 00:25:00,399
controls as well add a proxy around that

593
00:24:57,640 --> 00:25:02,980
metadata for the API you want to log

594
00:25:00,400 --> 00:25:05,289
everything outside the cluster because

595
00:25:02,980 --> 00:25:07,690
guess what Tucker gets on box attacker

596
00:25:05,289 --> 00:25:11,230
turns off logs make it hard for them log

597
00:25:07,690 --> 00:25:14,919
outside the cluster rotate your

598
00:25:11,230 --> 00:25:17,679
certificates and as I said the latest

599
00:25:14,919 --> 00:25:20,710
and greatest version is 1.3 but is

600
00:25:17,679 --> 00:25:22,510
version 1.1 three but version 1.8 is the

601
00:25:20,710 --> 00:25:25,390
real milestone version where a lot of

602
00:25:22,510 --> 00:25:29,379
these feature sets changed to very sane

603
00:25:25,390 --> 00:25:32,580
and security sensible defaults and so

604
00:25:29,380 --> 00:25:34,600
this picture is just to avoid you

605
00:25:32,580 --> 00:25:38,139
listening watching more bought points go

606
00:25:34,600 --> 00:25:38,889
past your eyes and just to really talk

607
00:25:38,140 --> 00:25:40,870
about the difference between

608
00:25:38,890 --> 00:25:42,610
self-managed and cloud managed so on the

609
00:25:40,870 --> 00:25:43,918
Left obviously that whole stacks your

610
00:25:42,610 --> 00:25:45,760
responsibility if you're running it

611
00:25:43,919 --> 00:25:47,830
yourself if you're running it in the

612
00:25:45,760 --> 00:25:50,200
cloud you generally would consume a

613
00:25:47,830 --> 00:25:52,210
service providers offering and so they

614
00:25:50,200 --> 00:25:55,480
manage the masternode in the ED CD which

615
00:25:52,210 --> 00:25:57,700
is nice of them but some of the security

616
00:25:55,480 --> 00:25:59,440
settings you want to invoke depend on

617
00:25:57,700 --> 00:26:01,630
the underlying version that's being

618
00:25:59,440 --> 00:26:03,700
provided so just understand that

619
00:26:01,630 --> 00:26:07,659
distinction if you're trying to turn on

620
00:26:03,700 --> 00:26:09,730
pod security policies and you're trying

621
00:26:07,659 --> 00:26:11,860
to turn on your docker set comp profile

622
00:26:09,730 --> 00:26:13,270
and things like that you'd kind of need

623
00:26:11,860 --> 00:26:14,320
to understand the versions of the stuff

624
00:26:13,270 --> 00:26:16,040
that's running underneath the hood as

625
00:26:14,320 --> 00:26:18,200
well so

626
00:26:16,040 --> 00:26:19,550
just watch that obviously if you're

627
00:26:18,200 --> 00:26:22,810
keeping it current and you're keeping it

628
00:26:19,550 --> 00:26:22,810
fresh these problems go away

629
00:26:23,660 --> 00:26:29,510
networking security is next now you

630
00:26:28,250 --> 00:26:31,760
might argue that there's more surface

631
00:26:29,510 --> 00:26:33,860
area because you've essentially got

632
00:26:31,760 --> 00:26:34,970
rather than one big monolith application

633
00:26:33,860 --> 00:26:36,679
you've got all these distributed

634
00:26:34,970 --> 00:26:38,630
services and so you can get in the

635
00:26:36,680 --> 00:26:41,240
middle of that traffic and there's more

636
00:26:38,630 --> 00:26:44,120
surface area we also want to isolate

637
00:26:41,240 --> 00:26:47,210
discrete workloads and restrict traffic

638
00:26:44,120 --> 00:26:48,350
to unintended services we really really

639
00:26:47,210 --> 00:26:50,090
want to prevent egress the internet

640
00:26:48,350 --> 00:26:53,510
unless it's intended and then we also

641
00:26:50,090 --> 00:26:57,139
want to and here's one okay so you were

642
00:26:53,510 --> 00:26:58,700
meant to have you know hard isolation

643
00:26:57,140 --> 00:27:00,620
between a demilitarized zone in our

644
00:26:58,700 --> 00:27:03,620
trusted workloads so I'm off to work

645
00:27:00,620 --> 00:27:05,840
late in the DMZ orth workload in you

646
00:27:03,620 --> 00:27:09,050
know behind the scenes but guess what

647
00:27:05,840 --> 00:27:11,780
one master the kubernetes that's serving

648
00:27:09,050 --> 00:27:13,129
the DMZ is also the DMZ is also the

649
00:27:11,780 --> 00:27:15,800
kubernetes api that's serving the

650
00:27:13,130 --> 00:27:18,710
trusted workload if one gets comped how

651
00:27:15,800 --> 00:27:20,710
do you prevent the other side did the

652
00:27:18,710 --> 00:27:23,120
trusted work like getting compromised

653
00:27:20,710 --> 00:27:26,810
sto is going to help us with that

654
00:27:23,120 --> 00:27:28,370
so concepts are largely the same in that

655
00:27:26,810 --> 00:27:30,169
it is network security so although we

656
00:27:28,370 --> 00:27:33,830
might use tags rather than IP addresses

657
00:27:30,170 --> 00:27:36,680
the same concepts largely apply using an

658
00:27:33,830 --> 00:27:38,510
sto service mesh over the top of your

659
00:27:36,680 --> 00:27:42,340
layer for networking is a really really

660
00:27:38,510 --> 00:27:44,480
good idea and I'll explain why so

661
00:27:42,340 --> 00:27:48,560
imagine this scenario right you've got

662
00:27:44,480 --> 00:27:50,510
kubernetes operating at layer 4 and the

663
00:27:48,560 --> 00:27:53,270
Calico plugin is what's doing that

664
00:27:50,510 --> 00:27:55,750
network policy that says pod a can talk

665
00:27:53,270 --> 00:27:59,570
to top pod be but not talk to pod C

666
00:27:55,750 --> 00:28:01,220
but given the kubernetes is also what's

667
00:27:59,570 --> 00:28:03,320
hosting the workload it's feasible to

668
00:28:01,220 --> 00:28:05,120
think that if a pod got compromised and

669
00:28:03,320 --> 00:28:06,620
someone got root on a pod and someone

670
00:28:05,120 --> 00:28:10,610
could expose that kubernetes api they

671
00:28:06,620 --> 00:28:13,790
could break down that layer for control

672
00:28:10,610 --> 00:28:17,629
so in comes Sto and over the top is a

673
00:28:13,790 --> 00:28:19,700
layer 7 mutual TLS proxy that will

674
00:28:17,630 --> 00:28:21,860
essentially inject the same rules you

675
00:28:19,700 --> 00:28:23,540
can talk to B but not to C but it will

676
00:28:21,860 --> 00:28:25,399
also take that traffic and encrypt it as

677
00:28:23,540 --> 00:28:26,960
it flows through and it's a separate

678
00:28:25,400 --> 00:28:28,280
control plane in reinforcing it so

679
00:28:26,960 --> 00:28:29,940
kubernetes got compromised

680
00:28:28,280 --> 00:28:32,549
you've got sto reinforcing that

681
00:28:29,940 --> 00:28:34,440
the top and so you get something akin to

682
00:28:32,549 --> 00:28:36,658
two-factor off on your network traffic

683
00:28:34,440 --> 00:28:39,720
you must come from the right layer for

684
00:28:36,659 --> 00:28:41,370
IP address or network tag and you must

685
00:28:39,720 --> 00:28:43,259
have the right kubernetes cryptographic

686
00:28:41,370 --> 00:28:45,059
secrets in order for you to talk and

687
00:28:43,259 --> 00:28:47,009
it's when you get both of those in

688
00:28:45,059 --> 00:28:49,950
concert with each other you really start

689
00:28:47,009 --> 00:28:52,320
to see why actually it's possible that

690
00:28:49,950 --> 00:28:59,250
we could be more secure using this type

691
00:28:52,320 --> 00:29:00,658
of technology than less we can't escape

692
00:28:59,250 --> 00:29:02,129
the fact though that a lot of people are

693
00:29:00,659 --> 00:29:05,700
going to do this in a cloud environment

694
00:29:02,129 --> 00:29:07,289
and so we all know that you know we can

695
00:29:05,700 --> 00:29:09,750
get ourselves tripped up and self harm

696
00:29:07,289 --> 00:29:13,649
with misconfigured s3 buckets and the

697
00:29:09,750 --> 00:29:16,080
like so good practice here is obviously

698
00:29:13,649 --> 00:29:18,989
too hard in your cloud accounts the key

699
00:29:16,080 --> 00:29:21,779
takeaways are you know separate separate

700
00:29:18,990 --> 00:29:25,350
your accounts or resources or VP C's you

701
00:29:21,779 --> 00:29:27,330
know avoid the 5-0 side arrangers limit

702
00:29:25,350 --> 00:29:30,269
privilege and maybe introduced a

703
00:29:27,330 --> 00:29:32,639
segregation of duties so inbound and

704
00:29:30,269 --> 00:29:34,500
outbound IP address changes have to come

705
00:29:32,639 --> 00:29:36,299
from your cloud services team the app

706
00:29:34,500 --> 00:29:39,169
team that's running the workload has to

707
00:29:36,299 --> 00:29:42,690
do a separate ticket to request that

708
00:29:39,169 --> 00:29:45,299
also run regular checks back against

709
00:29:42,690 --> 00:29:47,250
your workload to confirm you're running

710
00:29:45,299 --> 00:29:49,590
in a known good state don't just assume

711
00:29:47,250 --> 00:29:51,539
that because my terraform script is

712
00:29:49,590 --> 00:29:52,889
built perfectly that someone hasn't

713
00:29:51,539 --> 00:29:55,679
actually gone into the dev environment

714
00:29:52,889 --> 00:29:58,139
and done some mucking around and they've

715
00:29:55,679 --> 00:30:00,210
compromised the config go and run those

716
00:29:58,139 --> 00:30:03,360
checks against what known good looks

717
00:30:00,210 --> 00:30:07,200
like and you know key tenants are log

718
00:30:03,360 --> 00:30:09,269
and limit your blast radius so just a

719
00:30:07,200 --> 00:30:13,259
bit on logging we're very close to the

720
00:30:09,269 --> 00:30:14,700
end so you know we get in there you want

721
00:30:13,259 --> 00:30:16,289
to meet your operational requirements

722
00:30:14,700 --> 00:30:18,509
that's important you also want to make

723
00:30:16,289 --> 00:30:21,360
sure though that you know we've got to

724
00:30:18,509 --> 00:30:22,559
be careful that the application logging

725
00:30:21,360 --> 00:30:24,059
on its own is not enough we've got

726
00:30:22,559 --> 00:30:26,029
layers of the stack we need to think of

727
00:30:24,059 --> 00:30:29,100
now we've got the app we've got

728
00:30:26,029 --> 00:30:30,960
kubernetes we've got the cloud

729
00:30:29,100 --> 00:30:32,100
infrastructure if you're running in the

730
00:30:30,960 --> 00:30:34,139
cloud you know there's a lot of stuff to

731
00:30:32,100 --> 00:30:36,090
consider now so logging needs to

732
00:30:34,139 --> 00:30:37,709
consider that also the fact that this

733
00:30:36,090 --> 00:30:39,389
stuff's moving around a transient and

734
00:30:37,710 --> 00:30:41,809
then you've got the forensic

735
00:30:39,389 --> 00:30:43,550
requirements like your pods being

736
00:30:41,809 --> 00:30:46,460
compromised

737
00:30:43,550 --> 00:30:47,960
how do what was running at the time and

738
00:30:46,460 --> 00:30:48,890
then of cause of all that you've got

739
00:30:47,960 --> 00:30:54,730
over them worried about signal-to-noise

740
00:30:48,890 --> 00:30:56,990
ratio so how do we solve these problems

741
00:30:54,730 --> 00:30:59,210
small and simple if you've got a small

742
00:30:56,990 --> 00:31:01,370
application maybe just consider a

743
00:30:59,210 --> 00:31:03,440
dedicated login container if you've got

744
00:31:01,370 --> 00:31:06,469
a big and complex one you might want to

745
00:31:03,440 --> 00:31:07,850
consider a sidecar approach but just

746
00:31:06,470 --> 00:31:11,210
make sure you practice end-to-end

747
00:31:07,850 --> 00:31:14,780
logging and don't forget that it all

748
00:31:11,210 --> 00:31:17,840
needs to go somewhere the OWASP cheat

749
00:31:14,780 --> 00:31:20,750
sheet is great as a takeaway in terms of

750
00:31:17,840 --> 00:31:23,179
things you need to focus on try and log

751
00:31:20,750 --> 00:31:25,610
to a separate store under a dedicated

752
00:31:23,180 --> 00:31:27,470
cloud account so don't make the cloud

753
00:31:25,610 --> 00:31:28,850
account with the workloads running the

754
00:31:27,470 --> 00:31:31,130
only account where your logs are kept

755
00:31:28,850 --> 00:31:34,669
sync it to another service account

756
00:31:31,130 --> 00:31:37,120
that's isolated and then the big one is

757
00:31:34,670 --> 00:31:40,430
alert and alarm when logs don't arrive

758
00:31:37,120 --> 00:31:41,360
you know that's that's often one that

759
00:31:40,430 --> 00:31:44,590
gets easily forgotten

760
00:31:41,360 --> 00:31:46,760
I'd like to shout out to assistive Falco

761
00:31:44,590 --> 00:31:48,709
in terms of addressing the

762
00:31:46,760 --> 00:31:50,240
signal-to-noise ratio so again all the

763
00:31:48,710 --> 00:31:53,630
technologies are mentioning so far all

764
00:31:50,240 --> 00:31:56,300
open source but sis dig Falco is a great

765
00:31:53,630 --> 00:31:57,440
one in terms of identifying the key ones

766
00:31:56,300 --> 00:32:01,040
you want to worry about in a

767
00:31:57,440 --> 00:32:04,400
signal-to-noise ratio so you know a

768
00:32:01,040 --> 00:32:06,409
shell is run in a container or there's a

769
00:32:04,400 --> 00:32:10,010
server as a server process that's

770
00:32:06,410 --> 00:32:11,900
spawning child processes or my LS is now

771
00:32:10,010 --> 00:32:13,970
making outbound connections like percent

772
00:32:11,900 --> 00:32:16,850
about you know sis dig will help you

773
00:32:13,970 --> 00:32:18,680
with that sort of stuff and then just

774
00:32:16,850 --> 00:32:23,719
have processes to monitor change in your

775
00:32:18,680 --> 00:32:26,870
cloud services all right that's the bulk

776
00:32:23,720 --> 00:32:30,080
of the talk over and done with so rather

777
00:32:26,870 --> 00:32:32,810
than I think expect everyone to

778
00:32:30,080 --> 00:32:34,460
implement all of that there are some

779
00:32:32,810 --> 00:32:38,870
essential ingredients that I think make

780
00:32:34,460 --> 00:32:44,390
up a secure stack and they are running a

781
00:32:38,870 --> 00:32:47,570
minimal operating system with no SSH you

782
00:32:44,390 --> 00:32:49,250
don't need a big OS for your container

783
00:32:47,570 --> 00:32:50,689
and docker images they can be quite

784
00:32:49,250 --> 00:32:53,030
small

785
00:32:50,690 --> 00:32:55,640
you know 400 Meg would be a large one in

786
00:32:53,030 --> 00:32:57,230
my opinion you want a restrictive

787
00:32:55,640 --> 00:32:59,360
network policy so it's layer 4

788
00:32:57,230 --> 00:33:02,030
you want to obviously do all your cloud

789
00:32:59,360 --> 00:33:05,600
account hardening you want to do your

790
00:33:02,030 --> 00:33:08,299
configuration assessments as you go

791
00:33:05,600 --> 00:33:10,340
through your build pipeline and when

792
00:33:08,299 --> 00:33:11,960
you're doing your docker bench and Kubb

793
00:33:10,340 --> 00:33:14,199
bench securities make sure your our back

794
00:33:11,960 --> 00:33:16,309
is set to principles of least privilege

795
00:33:14,200 --> 00:33:18,770
you want to have a look at some runtime

796
00:33:16,309 --> 00:33:20,360
protection there are some commercial

797
00:33:18,770 --> 00:33:22,820
solutions that are around that can help

798
00:33:20,360 --> 00:33:26,000
with that and string a few of these

799
00:33:22,820 --> 00:33:28,340
controls together you want to protect

800
00:33:26,000 --> 00:33:31,190
your build environment like your app and

801
00:33:28,340 --> 00:33:40,070
then you want to do pod security policy

802
00:33:31,190 --> 00:33:42,950
run as non-root so just to wrap up the

803
00:33:40,070 --> 00:33:47,750
defaults are better now

804
00:33:42,950 --> 00:33:49,190
haven't always been you want a shift

805
00:33:47,750 --> 00:33:52,190
left so if you're running a security

806
00:33:49,190 --> 00:33:54,290
function you need to get down in the

807
00:33:52,190 --> 00:33:57,500
weeds with the dev ops teams that are

808
00:33:54,290 --> 00:33:59,059
running this stuff and help them you

809
00:33:57,500 --> 00:34:01,820
might also be having to review and

810
00:33:59,059 --> 00:34:03,379
commit code yourself and that's I'm

811
00:34:01,820 --> 00:34:04,909
sympathetic to a lot of security teams

812
00:34:03,380 --> 00:34:08,000
they may not have the resources that do

813
00:34:04,910 --> 00:34:10,220
all that so definitely something that we

814
00:34:08,000 --> 00:34:11,480
need to adapt into and the other thing

815
00:34:10,219 --> 00:34:13,609
I've talked about I haven't really

816
00:34:11,480 --> 00:34:15,918
talked about yet is enforcement so what

817
00:34:13,609 --> 00:34:18,168
we've talked about is the what what do

818
00:34:15,918 --> 00:34:20,449
you need to do to secure your kubernetes

819
00:34:18,168 --> 00:34:22,730
and container workload the how you

820
00:34:20,449 --> 00:34:25,689
enforce that there's some work happening

821
00:34:22,730 --> 00:34:28,010
at the moment with open policy agent and

822
00:34:25,690 --> 00:34:29,960
your cloud services will also have a

823
00:34:28,010 --> 00:34:31,639
range of organizational controls that

824
00:34:29,960 --> 00:34:34,250
you can set and enforce and guardrails

825
00:34:31,639 --> 00:34:36,320
there's some probably another talk due

826
00:34:34,250 --> 00:34:38,510
by me actually on how you enforce some

827
00:34:36,320 --> 00:34:43,159
of this stuff so but just think about

828
00:34:38,510 --> 00:34:47,090
that that can't be ignored and that is

829
00:34:43,159 --> 00:34:49,750
my talk thank you excellent thank you

830
00:34:47,090 --> 00:34:52,070
very much Dave

831
00:34:49,750 --> 00:34:56,320
running perfectly on time so we have

832
00:34:52,070 --> 00:34:56,320
time for questions we do down the back

833
00:34:59,170 --> 00:35:05,570
actually have two questions

834
00:35:01,400 --> 00:35:09,589
have you used nomads and what do you

835
00:35:05,570 --> 00:35:15,560
think of it I know I haven't used nomads

836
00:35:09,589 --> 00:35:17,810
what does nomads do it's similar to

837
00:35:15,560 --> 00:35:22,670
Cuban Aires in that you've run Dockers

838
00:35:17,810 --> 00:35:24,560
and stuff and okay it's like what it

839
00:35:22,670 --> 00:35:27,680
does it's a an orchestration and yeah

840
00:35:24,560 --> 00:35:31,099
okay listen is there's a few

841
00:35:27,680 --> 00:35:34,759
technologies mesos docker swarm as well

842
00:35:31,099 --> 00:35:37,250
that are spinning around but I think

843
00:35:34,760 --> 00:35:42,020
we've chosen kubernetes largely because

844
00:35:37,250 --> 00:35:44,390
of the fact that on Prem there's some

845
00:35:42,020 --> 00:35:46,369
commercial offerings from Red Hat that

846
00:35:44,390 --> 00:35:48,379
were more appropriate for a highly

847
00:35:46,369 --> 00:35:49,910
regulated entity to run and then we also

848
00:35:48,380 --> 00:35:52,130
wanted the best support from a cloud

849
00:35:49,910 --> 00:35:55,520
provider as well so we've chosen

850
00:35:52,130 --> 00:35:57,319
kubernetes for those reasons and the

851
00:35:55,520 --> 00:36:03,109
second question was what vulnerability

852
00:35:57,319 --> 00:36:06,009
scanning did you use so there are a

853
00:36:03,109 --> 00:36:09,109
number of choices we've gone down a

854
00:36:06,010 --> 00:36:11,810
commercial path to string together a few

855
00:36:09,109 --> 00:36:15,680
controls so we use a product called

856
00:36:11,810 --> 00:36:17,328
twist lock to do the runtime protection

857
00:36:15,680 --> 00:36:19,520
but it's also doing vulnerability

858
00:36:17,329 --> 00:36:25,630
scanning and it's also doing config

859
00:36:19,520 --> 00:36:27,890
drift for us any other questions

860
00:36:25,630 --> 00:36:31,390
okay excellent if you could all give

861
00:36:27,890 --> 00:36:31,390
David another round of applause

