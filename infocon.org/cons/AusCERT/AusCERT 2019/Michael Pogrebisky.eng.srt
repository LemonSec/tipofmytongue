1
00:00:00,030 --> 00:00:05,640
okay guys we'll kick it away on time um

2
00:00:03,230 --> 00:00:07,439
I'm gonna horribly butcher is her name

3
00:00:05,640 --> 00:00:09,899
please apologize Michael but yeah

4
00:00:07,440 --> 00:00:12,420
Michael Paul Grabowski and he's doing a

5
00:00:09,900 --> 00:00:15,059
presentation on that service infections

6
00:00:12,420 --> 00:00:17,869
malware just found you home if you can

7
00:00:15,059 --> 00:00:22,320
all give a big round of applause guys

8
00:00:17,869 --> 00:00:25,710
yeah thank you thank you so much so with

9
00:00:22,320 --> 00:00:27,480
afternoon everyone I understand this

10
00:00:25,710 --> 00:00:30,500
session is after launch so it's a bit

11
00:00:27,480 --> 00:00:34,920
tricky one so I'll try to make you guys

12
00:00:30,500 --> 00:00:37,800
awake and interested hopefully it is a

13
00:00:34,920 --> 00:00:40,850
pretty interesting and exciting subject

14
00:00:37,800 --> 00:00:43,589
okay so what we have on the agenda today

15
00:00:40,850 --> 00:00:46,559
so first of all we're going to talk a

16
00:00:43,590 --> 00:00:51,600
little bit about what service is it's a

17
00:00:46,559 --> 00:00:53,760
new concept so it does need some intro

18
00:00:51,600 --> 00:00:56,219
and maybe refreshment for someone who

19
00:00:53,760 --> 00:00:58,649
hasn't who has already some information

20
00:00:56,219 --> 00:01:01,949
about it then we'll talk about

21
00:00:58,649 --> 00:01:04,610
specifically AWS lambda which is the

22
00:01:01,949 --> 00:01:09,720
most popular platform for service today

23
00:01:04,610 --> 00:01:15,170
then we will actually try to do some

24
00:01:09,720 --> 00:01:18,539
nasty stuff with lambda and it's fun

25
00:01:15,170 --> 00:01:21,600
then we'll talk more about lambda

26
00:01:18,540 --> 00:01:25,770
security and how what you're gonna see

27
00:01:21,600 --> 00:01:30,539
can be prevented with what AWS provide

28
00:01:25,770 --> 00:01:35,189
today and we'll also talk about some key

29
00:01:30,540 --> 00:01:38,700
takeaways and that's it so first of all

30
00:01:35,189 --> 00:01:42,360
by the show of hands how many here have

31
00:01:38,700 --> 00:01:44,880
used or heard or done anything with

32
00:01:42,360 --> 00:01:49,170
service Wow

33
00:01:44,880 --> 00:01:52,949
a lot just for games or for anything

34
00:01:49,170 --> 00:01:54,869
real like can someone show their hand if

35
00:01:52,950 --> 00:01:57,649
they have done something for real like

36
00:01:54,869 --> 00:02:02,130
you know real application development

37
00:01:57,649 --> 00:02:05,490
okay just just one person so lots of -

38
00:02:02,130 --> 00:02:07,829
so lots of people heard about it but not

39
00:02:05,490 --> 00:02:09,690
not many have already started using it

40
00:02:07,829 --> 00:02:11,959
and it's understandable because it's a

41
00:02:09,690 --> 00:02:14,000
new paradigm and it's

42
00:02:11,960 --> 00:02:17,510
very different one and we'll see in

43
00:02:14,000 --> 00:02:21,410
which ways it's different just one thing

44
00:02:17,510 --> 00:02:23,359
to mention before we proceed cloud is

45
00:02:21,410 --> 00:02:25,549
not a thing of its own you know at the

46
00:02:23,360 --> 00:02:27,470
end of the day when you run some code it

47
00:02:25,550 --> 00:02:29,300
runs in the computer and you know if

48
00:02:27,470 --> 00:02:31,130
it's in the cloud it still runs in the

49
00:02:29,300 --> 00:02:32,230
computer let's just keep it at the back

50
00:02:31,130 --> 00:02:35,660
of our mind

51
00:02:32,230 --> 00:02:39,049
ok so evolution from the evolution

52
00:02:35,660 --> 00:02:42,500
standpoint how did things progress the

53
00:02:39,050 --> 00:02:45,410
way we are with serverless so in the

54
00:02:42,500 --> 00:02:47,750
past not so distant past we used to have

55
00:02:45,410 --> 00:02:50,290
data centers and in data centers you had

56
00:02:47,750 --> 00:02:54,260
service he had storage you had network

57
00:02:50,290 --> 00:02:57,470
and organizations had to manage it and

58
00:02:54,260 --> 00:03:01,010
there was lots of overhead related to it

59
00:02:57,470 --> 00:03:03,950
and lots of cost associated with it now

60
00:03:01,010 --> 00:03:06,230
virtualization started developing around

61
00:03:03,950 --> 00:03:08,179
that time and you could run virtual

62
00:03:06,230 --> 00:03:12,230
machines and physical hardware and you

63
00:03:08,180 --> 00:03:14,780
know play with this stuff and you know

64
00:03:12,230 --> 00:03:17,179
utilize it in a flexible way to an

65
00:03:14,780 --> 00:03:20,470
extent but you still had to manage the

66
00:03:17,180 --> 00:03:23,930
hardware the next stage is the

67
00:03:20,470 --> 00:03:27,700
transition to infrastructure as a

68
00:03:23,930 --> 00:03:34,100
service which is what we know today is

69
00:03:27,700 --> 00:03:36,799
Amazon ec2 or we do cloud and Google and

70
00:03:34,100 --> 00:03:40,609
others and basically here what you what

71
00:03:36,800 --> 00:03:43,490
you have you have you still have to deal

72
00:03:40,610 --> 00:03:46,370
with instances of operating systems so

73
00:03:43,490 --> 00:03:48,800
you need to bring up a Linux box or a

74
00:03:46,370 --> 00:03:51,800
Windows box but you do it on someone

75
00:03:48,800 --> 00:03:54,550
else's infrastructure so basically you

76
00:03:51,800 --> 00:03:57,320
go to a cloud provider they give you

77
00:03:54,550 --> 00:03:59,180
infrastructure and you still need to

78
00:03:57,320 --> 00:04:01,700
architect your system is still need to

79
00:03:59,180 --> 00:04:03,650
decide I need this amount of Linux boxes

80
00:04:01,700 --> 00:04:05,720
and this amount of Windows boxes and

81
00:04:03,650 --> 00:04:07,130
they you are install this part of the

82
00:04:05,720 --> 00:04:08,600
software here and that part of the

83
00:04:07,130 --> 00:04:10,670
software here the specs should be this

84
00:04:08,600 --> 00:04:14,720
and that and they communicate in a

85
00:04:10,670 --> 00:04:18,260
certain way the next stage or not

86
00:04:14,720 --> 00:04:20,209
necessarily next stage but some some of

87
00:04:18,260 --> 00:04:23,440
the software products that people use

88
00:04:20,209 --> 00:04:25,799
today are consumed as platforms

89
00:04:23,440 --> 00:04:31,120
this some good examples too these are

90
00:04:25,800 --> 00:04:33,460
office 365 or Salesforce so basically

91
00:04:31,120 --> 00:04:36,280
from your perspective as an end-user you

92
00:04:33,460 --> 00:04:38,799
have an application and this application

93
00:04:36,280 --> 00:04:40,719
can be provided by a third party or you

94
00:04:38,800 --> 00:04:43,000
can create an application that is

95
00:04:40,720 --> 00:04:45,130
provided within the organization but you

96
00:04:43,000 --> 00:04:48,280
still treat it as an application from

97
00:04:45,130 --> 00:04:49,930
the user and perspective and someone

98
00:04:48,280 --> 00:04:54,299
else is dealing with all the particulars

99
00:04:49,930 --> 00:04:56,680
of deploying it and managing it and

100
00:04:54,300 --> 00:04:58,780
migrating it maybe to the new version

101
00:04:56,680 --> 00:04:59,950
and maybe to different architecture and

102
00:04:58,780 --> 00:05:03,840
stuff like that you don't care about

103
00:04:59,950 --> 00:05:07,390
this all you care about as a user is

104
00:05:03,840 --> 00:05:09,429
doing the business functions that are

105
00:05:07,390 --> 00:05:11,080
enabled with this application and maybe

106
00:05:09,430 --> 00:05:12,790
doing some administrative functions

107
00:05:11,080 --> 00:05:15,690
related to this application such as

108
00:05:12,790 --> 00:05:18,940
creating users and stuff like that and

109
00:05:15,690 --> 00:05:21,730
now we have service so what is service

110
00:05:18,940 --> 00:05:23,740
basically function is a unit it's not

111
00:05:21,730 --> 00:05:26,620
even an application now we have single

112
00:05:23,740 --> 00:05:29,290
functions that you can deploy and they

113
00:05:26,620 --> 00:05:33,190
can scale and everything else is taken

114
00:05:29,290 --> 00:05:36,250
care of by the platform provider okay so

115
00:05:33,190 --> 00:05:39,550
it's it's a significant paradigm shift

116
00:05:36,250 --> 00:05:41,890
now you don't deal with anything related

117
00:05:39,550 --> 00:05:44,680
to either hardware or operating system

118
00:05:41,890 --> 00:05:48,250
or application server of this of that

119
00:05:44,680 --> 00:05:50,040
kind you just write a bunch of code you

120
00:05:48,250 --> 00:05:52,480
send it over to the service

121
00:05:50,040 --> 00:05:58,570
infrastructure provider and it's out

122
00:05:52,480 --> 00:06:01,450
there ready to run okay in terms of the

123
00:05:58,570 --> 00:06:04,990
lifespan of these things that we've

124
00:06:01,450 --> 00:06:07,390
spoken about so for data centers they

125
00:06:04,990 --> 00:06:10,390
used to be deployed in months and lived

126
00:06:07,390 --> 00:06:12,550
for years virtualized cloud deploy in

127
00:06:10,390 --> 00:06:14,820
minutes and live for weeks roughly you

128
00:06:12,550 --> 00:06:17,200
know could be weeks could be months

129
00:06:14,820 --> 00:06:19,990
containers it's like the next logical

130
00:06:17,200 --> 00:06:21,820
step you don't even care about operating

131
00:06:19,990 --> 00:06:23,919
system you just have a container which

132
00:06:21,820 --> 00:06:26,050
you can deploy really quickly in seconds

133
00:06:23,919 --> 00:06:30,520
and they can live for hours maybe days

134
00:06:26,050 --> 00:06:32,830
maybe months with server lists when you

135
00:06:30,520 --> 00:06:34,810
deploy a function it is deployed on

136
00:06:32,830 --> 00:06:37,570
demand so basically it's not even

137
00:06:34,810 --> 00:06:40,540
deployed before you

138
00:06:37,570 --> 00:06:43,210
in some way and then when it's deployed

139
00:06:40,540 --> 00:06:44,470
it leaves for whatever amount of time it

140
00:06:43,210 --> 00:06:46,539
needs to leave but usually it's very

141
00:06:44,470 --> 00:06:48,100
short so it mainly four seconds

142
00:06:46,540 --> 00:06:51,970
sometimes it may leave for longer and

143
00:06:48,100 --> 00:06:53,830
when it's not needed its disposed off so

144
00:06:51,970 --> 00:06:59,440
basically it's a very very low very

145
00:06:53,830 --> 00:07:01,990
short time span now this is how you work

146
00:06:59,440 --> 00:07:04,240
with these lambda functions so obviously

147
00:07:01,990 --> 00:07:06,220
you need to develop it so that's you

148
00:07:04,240 --> 00:07:09,000
know regular development work writing

149
00:07:06,220 --> 00:07:12,790
some code in an IDE or stuff like that

150
00:07:09,000 --> 00:07:15,760
then you push it to the infrastructure

151
00:07:12,790 --> 00:07:21,720
provider in this case it's AWS and it

152
00:07:15,760 --> 00:07:24,580
since there is a passive instance and

153
00:07:21,720 --> 00:07:27,700
basically until it's use it's not even

154
00:07:24,580 --> 00:07:30,190
deployed so only when something triggers

155
00:07:27,700 --> 00:07:32,159
that particular function only then it's

156
00:07:30,190 --> 00:07:36,940
deployed within a disposable container

157
00:07:32,160 --> 00:07:39,460
very quickly then it's used and then

158
00:07:36,940 --> 00:07:43,120
it's cleaned up okay so it's a very

159
00:07:39,460 --> 00:07:46,120
different kind of life cycle especially

160
00:07:43,120 --> 00:07:48,130
from the deployment perspective from any

161
00:07:46,120 --> 00:07:52,690
other paradigm we've been dealing with

162
00:07:48,130 --> 00:07:56,469
so far so benefits there are some

163
00:07:52,690 --> 00:07:58,690
obvious benefits of using serverless so

164
00:07:56,470 --> 00:08:01,720
first of all it's very very scalable and

165
00:07:58,690 --> 00:08:04,480
scalable not only in a way that it can

166
00:08:01,720 --> 00:08:06,940
scale because you know even today with

167
00:08:04,480 --> 00:08:10,390
ec2 you can stand up as many services

168
00:08:06,940 --> 00:08:12,250
you need and stuff like that but in with

169
00:08:10,390 --> 00:08:14,320
ec2 you have to actually do it

170
00:08:12,250 --> 00:08:16,420
proactively so if you realize that you

171
00:08:14,320 --> 00:08:20,860
need more computing capacity you need to

172
00:08:16,420 --> 00:08:23,530
bring up and you alw server and you need

173
00:08:20,860 --> 00:08:26,080
to be aware of this it's it's an action

174
00:08:23,530 --> 00:08:28,659
that you need to do with service you

175
00:08:26,080 --> 00:08:31,510
deploy the function and then whatever

176
00:08:28,660 --> 00:08:33,250
needs to be deployed for this in terms

177
00:08:31,510 --> 00:08:36,189
of provisioning hardware and operating

178
00:08:33,250 --> 00:08:38,200
system etc it's all happening behind the

179
00:08:36,190 --> 00:08:41,350
scenes and it scales to whatever

180
00:08:38,200 --> 00:08:44,290
capacity you need without you even being

181
00:08:41,350 --> 00:08:48,520
aware of this so it's a huge advantage

182
00:08:44,290 --> 00:08:49,250
in terms of scalability from operations

183
00:08:48,520 --> 00:08:51,410
perspective

184
00:08:49,250 --> 00:08:53,150
again you don't need to take care of

185
00:08:51,410 --> 00:08:55,040
these deployments you know to these box

186
00:08:53,150 --> 00:08:56,930
of that box it's all done automatically

187
00:08:55,040 --> 00:08:58,790
for you you don't even care you don't

188
00:08:56,930 --> 00:09:00,920
know where this is happening from the

189
00:08:58,790 --> 00:09:03,439
geographical perspective from the data

190
00:09:00,920 --> 00:09:06,650
center perspective it all happens

191
00:09:03,440 --> 00:09:08,660
automatically for you and so from the

192
00:09:06,650 --> 00:09:10,400
deployment perspective the only thing

193
00:09:08,660 --> 00:09:12,319
that you need to do is when you need to

194
00:09:10,400 --> 00:09:14,240
update the function you just push the

195
00:09:12,320 --> 00:09:19,400
new version of the function and that's

196
00:09:14,240 --> 00:09:21,620
it and it's ready to use and because of

197
00:09:19,400 --> 00:09:23,990
the nature of the flexible nature of it

198
00:09:21,620 --> 00:09:29,090
it can drive your cost down if you think

199
00:09:23,990 --> 00:09:33,680
about how the costing of an ec2 solution

200
00:09:29,090 --> 00:09:35,240
works is you spin up a machine it's up

201
00:09:33,680 --> 00:09:37,579
and running you already paying for it

202
00:09:35,240 --> 00:09:39,350
even before you even install your

203
00:09:37,580 --> 00:09:42,560
application and deploy your application

204
00:09:39,350 --> 00:09:47,230
you're paying for in ec2 instance for as

205
00:09:42,560 --> 00:09:50,119
long as it's up and running here the

206
00:09:47,230 --> 00:09:52,190
deployment the actual deployment of the

207
00:09:50,120 --> 00:09:55,040
container is happening automatically

208
00:09:52,190 --> 00:09:57,530
when it's triggered and then it's the

209
00:09:55,040 --> 00:09:59,180
it's cleaned up and that's it you only

210
00:09:57,530 --> 00:10:01,400
pay for the time when it's up and

211
00:09:59,180 --> 00:10:02,839
running so from the economical

212
00:10:01,400 --> 00:10:05,750
standpoint it's very very beneficial

213
00:10:02,839 --> 00:10:10,820
because it really is using the computing

214
00:10:05,750 --> 00:10:13,580
resources only when needed now there are

215
00:10:10,820 --> 00:10:16,850
also some downsides so first of all it's

216
00:10:13,580 --> 00:10:19,390
a new paradigm so as any new paradigm it

217
00:10:16,850 --> 00:10:24,050
takes time for the community to

218
00:10:19,390 --> 00:10:27,830
basically work out how to how to utilize

219
00:10:24,050 --> 00:10:29,900
it it's it's probably not suitable for

220
00:10:27,830 --> 00:10:32,600
every kind of application you can think

221
00:10:29,900 --> 00:10:36,290
of if this is an application it has to

222
00:10:32,600 --> 00:10:37,910
be up and running and run long workloads

223
00:10:36,290 --> 00:10:41,839
and stuff like that it's probably not

224
00:10:37,910 --> 00:10:45,469
not the most ideal paradigm not in the

225
00:10:41,839 --> 00:10:47,570
most ideal environment to utilize okay

226
00:10:45,470 --> 00:10:50,960
so there are some things that make sense

227
00:10:47,570 --> 00:10:55,370
or are better fit for it and some others

228
00:10:50,960 --> 00:10:57,770
that are less of a feat it is a bit

229
00:10:55,370 --> 00:10:59,780
slower when it comes to the actual

230
00:10:57,770 --> 00:11:01,770
invocation of the function because if

231
00:10:59,780 --> 00:11:04,140
you think about how it works

232
00:11:01,770 --> 00:11:06,900
I mentioned it previously the function

233
00:11:04,140 --> 00:11:09,330
is deployed in a disposable container on

234
00:11:06,900 --> 00:11:12,630
the trigger so it actually does take

235
00:11:09,330 --> 00:11:16,230
some time for this container to be

236
00:11:12,630 --> 00:11:20,460
deployed and run and obviously the

237
00:11:16,230 --> 00:11:22,080
provider Amazon in this case do provide

238
00:11:20,460 --> 00:11:24,900
some means of caching and you know

239
00:11:22,080 --> 00:11:27,510
speeding up these processes but you will

240
00:11:24,900 --> 00:11:29,490
actually see in the demo when something

241
00:11:27,510 --> 00:11:30,990
changes any new version needs to be

242
00:11:29,490 --> 00:11:32,430
deployed and it's all happening

243
00:11:30,990 --> 00:11:34,860
automatically you don't need to do

244
00:11:32,430 --> 00:11:37,469
anything proactive for that but it does

245
00:11:34,860 --> 00:11:42,290
translate into some slowdown in the

246
00:11:37,470 --> 00:11:44,760
execution okay so some what it is slower

247
00:11:42,290 --> 00:11:47,880
there is a big problem with monitoring

248
00:11:44,760 --> 00:11:52,170
now probably it's a current problem

249
00:11:47,880 --> 00:11:54,300
because I imagine that Amazon and others

250
00:11:52,170 --> 00:11:55,890
will need to come up with solutions for

251
00:11:54,300 --> 00:11:57,540
that because you know what happened

252
00:11:55,890 --> 00:12:00,510
what's happening today is that it's

253
00:11:57,540 --> 00:12:03,089
really difficult to understand how much

254
00:12:00,510 --> 00:12:04,710
workload is actually being experienced

255
00:12:03,090 --> 00:12:06,600
on the server side and you know the

256
00:12:04,710 --> 00:12:09,210
exact cost implications and stuff like

257
00:12:06,600 --> 00:12:11,790
that simply because you don't have any

258
00:12:09,210 --> 00:12:14,850
reliable means of monitoring what's

259
00:12:11,790 --> 00:12:18,180
happening because everything is behind

260
00:12:14,850 --> 00:12:20,010
the scenes so again I imagine at some

261
00:12:18,180 --> 00:12:22,650
stage the provider will come up with

262
00:12:20,010 --> 00:12:24,140
suitable means of monitoring but they're

263
00:12:22,650 --> 00:12:27,720
not there yet

264
00:12:24,140 --> 00:12:29,699
and the last one it's flat from

265
00:12:27,720 --> 00:12:33,030
dependence so I already I kept

266
00:12:29,700 --> 00:12:36,690
mentioning AWS and I will mention others

267
00:12:33,030 --> 00:12:38,850
in in in a minute but when you create a

268
00:12:36,690 --> 00:12:41,910
server less function you create it for

269
00:12:38,850 --> 00:12:44,040
certain provider basically you can't

270
00:12:41,910 --> 00:12:45,689
just take this very same function and

271
00:12:44,040 --> 00:12:48,449
easily port it to another provider

272
00:12:45,690 --> 00:12:50,010
because they have a different way of

273
00:12:48,450 --> 00:12:51,890
deploying style they have different

274
00:12:50,010 --> 00:12:55,260
functions different triggers different

275
00:12:51,890 --> 00:12:57,660
means of interacting with storage and

276
00:12:55,260 --> 00:12:59,700
stuff like that so lots and lots of

277
00:12:57,660 --> 00:13:01,650
things are different so when you create

278
00:12:59,700 --> 00:13:04,110
an application like that it is created

279
00:13:01,650 --> 00:13:06,689
for a certain platform and then you're

280
00:13:04,110 --> 00:13:08,820
kind of locked into that platform okay

281
00:13:06,690 --> 00:13:10,500
it's not like when you create a java

282
00:13:08,820 --> 00:13:12,870
application and now you can run it

283
00:13:10,500 --> 00:13:14,070
anywhere and if you're not satisfied

284
00:13:12,870 --> 00:13:16,640
with em

285
00:13:14,070 --> 00:13:21,890
you can switch to zoo tomorrow with no

286
00:13:16,640 --> 00:13:26,220
hassles this is not the case here okay

287
00:13:21,890 --> 00:13:28,380
now what kind of players do we have in

288
00:13:26,220 --> 00:13:31,830
the field today so we have some

289
00:13:28,380 --> 00:13:34,050
commercial platforms I mentioned AWS

290
00:13:31,830 --> 00:13:36,690
lambda there is also one by Google

291
00:13:34,050 --> 00:13:39,120
called Google cloud platform there is

292
00:13:36,690 --> 00:13:42,390
also dual functions and IBM cloud

293
00:13:39,120 --> 00:13:44,460
functions I was surprised to see that

294
00:13:42,390 --> 00:13:47,790
there are some open source players here

295
00:13:44,460 --> 00:13:52,770
as well but yeah you can use them you

296
00:13:47,790 --> 00:13:56,430
know to play with stuff basically let's

297
00:13:52,770 --> 00:13:58,620
do a quick comparison of the big ones so

298
00:13:56,430 --> 00:14:02,400
obviously a double is lambda is there

299
00:13:58,620 --> 00:14:09,060
for the longest it's the most mature one

300
00:14:02,400 --> 00:14:12,390
since 2014 it has lots and lots of hooks

301
00:14:09,060 --> 00:14:12,839
that and we'll talk about this in a

302
00:14:12,390 --> 00:14:16,920
minute

303
00:14:12,840 --> 00:14:19,950
into their existing offering it has wide

304
00:14:16,920 --> 00:14:23,550
language coverage and the demo that I'm

305
00:14:19,950 --> 00:14:28,350
going to show you is based on it Google

306
00:14:23,550 --> 00:14:31,560
and zero are much less mature they only

307
00:14:28,350 --> 00:14:33,720
started appearing in 2016 so about three

308
00:14:31,560 --> 00:14:36,359
years ago and there are still more or

309
00:14:33,720 --> 00:14:39,480
less in beta stage they do add more and

310
00:14:36,360 --> 00:14:42,360
more capabilities so for example later

311
00:14:39,480 --> 00:14:45,810
in this presentation I'll compare some

312
00:14:42,360 --> 00:14:48,780
security aspects of these and one of the

313
00:14:45,810 --> 00:14:52,079
security aspects is related to making

314
00:14:48,780 --> 00:14:53,850
modifications to the code by an API so

315
00:14:52,080 --> 00:14:55,590
when this presentation was written a

316
00:14:53,850 --> 00:14:57,300
couple of months ago there was no

317
00:14:55,590 --> 00:14:59,070
capability like that but I just checked

318
00:14:57,300 --> 00:15:04,109
there is already a capability like that

319
00:14:59,070 --> 00:15:09,120
so they keep evolving and it's limited

320
00:15:04,110 --> 00:15:13,890
to JavaScript only over no js' and as

321
00:15:09,120 --> 00:15:15,960
your is also quite new it's probably the

322
00:15:13,890 --> 00:15:18,530
biggest advantage is that it's really

323
00:15:15,960 --> 00:15:21,930
well integrated into Microsoft DevOps

324
00:15:18,530 --> 00:15:27,630
tools that you know TFS Visual Studio

325
00:15:21,930 --> 00:15:31,609
etc okay more about a SS lambda

326
00:15:27,630 --> 00:15:37,439
so as I said introduced in 2014 has

327
00:15:31,610 --> 00:15:40,440
useful and widely used runtimes that are

328
00:15:37,440 --> 00:15:43,319
available so we seen OGS fight on Java

329
00:15:40,440 --> 00:15:46,350
go dotnet core now you can see from here

330
00:15:43,319 --> 00:15:49,259
and this already kind of hinted that it

331
00:15:46,350 --> 00:15:52,560
all runs in Linux containers okay and

332
00:15:49,259 --> 00:15:54,079
this has implications on the security

333
00:15:52,560 --> 00:15:58,170
stuff that we're going to have a look at

334
00:15:54,079 --> 00:16:03,120
soon so Linux container is the base the

335
00:15:58,170 --> 00:16:04,949
basic runnable unit with AWS service and

336
00:16:03,120 --> 00:16:07,709
in terms of triggers there are many

337
00:16:04,949 --> 00:16:10,800
triggers that can be used to trigger a

338
00:16:07,709 --> 00:16:13,439
function so you can use it you can

339
00:16:10,800 --> 00:16:16,769
trigger it via a REST API gateway you

340
00:16:13,440 --> 00:16:19,170
can trigger it with a three update IOT

341
00:16:16,769 --> 00:16:23,519
button etc so it is really well

342
00:16:19,170 --> 00:16:29,579
integrated into the AWS toolset as you

343
00:16:23,519 --> 00:16:31,230
see it here okay some common use cases

344
00:16:29,579 --> 00:16:34,170
for a double is Lamba so I mentioned

345
00:16:31,230 --> 00:16:37,050
previously so it's not suitable for any

346
00:16:34,170 --> 00:16:40,050
application or every application but

347
00:16:37,050 --> 00:16:43,319
here are some really prominent use cases

348
00:16:40,050 --> 00:16:44,849
so mobile functionality is back-end i

349
00:16:43,319 --> 00:16:48,540
wouldíve boards

350
00:16:44,850 --> 00:16:50,670
chairs sorry bots and and chat boards

351
00:16:48,540 --> 00:16:53,430
and stuff like that so things that

352
00:16:50,670 --> 00:16:56,519
really need to be deployed and interact

353
00:16:53,430 --> 00:16:59,219
with with some front-end on you know at

354
00:16:56,519 --> 00:17:02,819
all more or less ad-hoc basis that's

355
00:16:59,220 --> 00:17:06,299
that's a common use case in terms of

356
00:17:02,819 --> 00:17:09,119
harnessing the scalability you can think

357
00:17:06,299 --> 00:17:13,168
of scenarios where you use it for things

358
00:17:09,119 --> 00:17:15,329
like image processing or even brute

359
00:17:13,169 --> 00:17:17,520
forcing in the security context so you

360
00:17:15,329 --> 00:17:20,668
could potentially harness you could

361
00:17:17,520 --> 00:17:22,319
potentially write a you know brute force

362
00:17:20,669 --> 00:17:24,569
function and deploy it as a service

363
00:17:22,319 --> 00:17:27,569
function and then end up with a huge

364
00:17:24,569 --> 00:17:29,850
bill from AWS because it was deployed on

365
00:17:27,569 --> 00:17:31,590
a thousand of computers and you didn't

366
00:17:29,850 --> 00:17:32,709
even realize this is this is going to

367
00:17:31,590 --> 00:17:37,350
happen

368
00:17:32,710 --> 00:17:41,830
and then also Alexa skills Alexa is the

369
00:17:37,350 --> 00:17:43,360
personal assistant from from Amazon so

370
00:17:41,830 --> 00:17:46,809
you can also develop some so-called

371
00:17:43,360 --> 00:17:48,820
skills which is in extension and the

372
00:17:46,809 --> 00:17:52,928
backend of it can be deployed as a

373
00:17:48,820 --> 00:17:55,960
service function okay so it's great

374
00:17:52,929 --> 00:17:58,360
right it sounds like brave new world out

375
00:17:55,960 --> 00:18:02,860
there and what else could we ask for

376
00:17:58,360 --> 00:18:06,370
what are we here for security right we

377
00:18:02,860 --> 00:18:08,469
haven't spoken about this one yet okay

378
00:18:06,370 --> 00:18:12,070
so what what's happening there from the

379
00:18:08,470 --> 00:18:15,840
security standpoint so first of all good

380
00:18:12,070 --> 00:18:18,070
stuff so it is running its own isolated

381
00:18:15,840 --> 00:18:18,789
environment so it means that the damage

382
00:18:18,070 --> 00:18:23,710
is limited

383
00:18:18,789 --> 00:18:27,850
yeah well potentially we'll see for

384
00:18:23,710 --> 00:18:30,850
presumably the environment is disposal

385
00:18:27,850 --> 00:18:32,850
after the disposed of after the run so

386
00:18:30,850 --> 00:18:36,399
no store persistent damage again

387
00:18:32,850 --> 00:18:41,500
presumably we'll see that this can also

388
00:18:36,399 --> 00:18:46,510
be worked around okay so our research

389
00:18:41,500 --> 00:18:50,860
team decided to take up on a challenge

390
00:18:46,510 --> 00:18:54,519
which is create a code injection in a

391
00:18:50,860 --> 00:18:59,740
lambda function and exploit it and do it

392
00:18:54,519 --> 00:19:04,000
in a persistent viral way okay so this

393
00:18:59,740 --> 00:19:06,240
guy over - Romi Ashima ashkenazi he is

394
00:19:04,000 --> 00:19:08,850
one of our research

395
00:19:06,240 --> 00:19:12,240
research developers from the research

396
00:19:08,850 --> 00:19:14,100
team and he is the one who created the

397
00:19:12,240 --> 00:19:17,490
all these demo applications I'm going to

398
00:19:14,100 --> 00:19:19,500
show you and he is the one deserving the

399
00:19:17,490 --> 00:19:22,409
credit for those okay

400
00:19:19,500 --> 00:19:24,600
some of these are based on a paper were

401
00:19:22,409 --> 00:19:25,889
rich Jones one of the prominent security

402
00:19:24,600 --> 00:19:29,219
guys in the States

403
00:19:25,889 --> 00:19:31,500
so basically they took our guys took his

404
00:19:29,220 --> 00:19:36,000
ideas and kind of built on top of them

405
00:19:31,500 --> 00:19:38,759
so this is our application there is a

406
00:19:36,000 --> 00:19:41,279
main function and then there are two

407
00:19:38,759 --> 00:19:45,809
functions that are called from within it

408
00:19:41,279 --> 00:19:48,139
either uses or cards so this is from the

409
00:19:45,809 --> 00:19:52,110
architecture standpoint so we have three

410
00:19:48,139 --> 00:19:54,990
three functions here and this is how the

411
00:19:52,110 --> 00:20:00,090
application looks like here the UI Sox

412
00:19:54,990 --> 00:20:03,679
I know but basically what happens here

413
00:20:00,090 --> 00:20:10,590
is that the outside frame is the main

414
00:20:03,679 --> 00:20:13,409
and this visitors this thing is provided

415
00:20:10,590 --> 00:20:15,928
by the main but then this piece of

416
00:20:13,409 --> 00:20:20,370
information here is provided by either

417
00:20:15,929 --> 00:20:23,269
cars or users so it could be either

418
00:20:20,370 --> 00:20:26,008
coming from cars or from the users and

419
00:20:23,269 --> 00:20:28,259
the function itself is the part of the

420
00:20:26,009 --> 00:20:32,309
URL and then the parameter on the URL is

421
00:20:28,259 --> 00:20:36,019
actually the number of either car users

422
00:20:32,309 --> 00:20:39,600
so this way you can go from one use it

423
00:20:36,019 --> 00:20:42,029
use it to another so basically here what

424
00:20:39,600 --> 00:20:44,340
we're doing were trying it with

425
00:20:42,029 --> 00:20:47,429
different parameters so we just loaded

426
00:20:44,340 --> 00:20:49,860
user number 1 and user number 2 and as

427
00:20:47,429 --> 00:20:52,230
you can see it has different profile

428
00:20:49,860 --> 00:20:57,168
picture and now we're going to the car

429
00:20:52,230 --> 00:20:59,940
and then again this is car number 1 and

430
00:20:57,169 --> 00:21:03,600
that's that's how it looks like okay

431
00:20:59,940 --> 00:21:05,340
it's pretty simple okay so what we're

432
00:21:03,600 --> 00:21:08,399
trying to do here we're trying to

433
00:21:05,340 --> 00:21:09,689
exploit code ejections so I guess most

434
00:21:08,399 --> 00:21:13,320
of the people here are very familiar

435
00:21:09,690 --> 00:21:16,139
with what code ejection is but just in

436
00:21:13,320 --> 00:21:18,050
in a nutshell it's an ability to inject

437
00:21:16,139 --> 00:21:21,199
some code

438
00:21:18,050 --> 00:21:23,629
when the application is built in such a

439
00:21:21,200 --> 00:21:27,590
way that a code can be injected from

440
00:21:23,630 --> 00:21:28,940
input from user input and be executed by

441
00:21:27,590 --> 00:21:34,550
the application without proper

442
00:21:28,940 --> 00:21:38,210
sanitization okay okay so this is the

443
00:21:34,550 --> 00:21:40,190
application I imagine that you probably

444
00:21:38,210 --> 00:21:42,290
are not really able to see what's in

445
00:21:40,190 --> 00:21:44,240
there you can probably see that there

446
00:21:42,290 --> 00:21:45,889
are some problematic things there but

447
00:21:44,240 --> 00:21:49,090
let me just highlight the most

448
00:21:45,890 --> 00:21:52,130
problematic part of it as you can see

449
00:21:49,090 --> 00:21:54,110
there is some code that is built by the

450
00:21:52,130 --> 00:21:57,400
application and then it's just thrown

451
00:21:54,110 --> 00:22:00,469
into eval so obviously there are some

452
00:21:57,400 --> 00:22:03,920
things coming from the input this one

453
00:22:00,470 --> 00:22:06,860
and this one and obviously they can be

454
00:22:03,920 --> 00:22:11,060
manipulated and there is no sanitization

455
00:22:06,860 --> 00:22:16,399
so there is a place for code injection

456
00:22:11,060 --> 00:22:18,919
here now what can we get from AWS lambda

457
00:22:16,400 --> 00:22:21,680
itself so it comes with lots and lots of

458
00:22:18,920 --> 00:22:23,360
useful information and when you just

459
00:22:21,680 --> 00:22:25,820
browse the documentation you will find

460
00:22:23,360 --> 00:22:28,129
some really interesting things there for

461
00:22:25,820 --> 00:22:29,720
example one of these things that you can

462
00:22:28,130 --> 00:22:32,060
find there is that there is an

463
00:22:29,720 --> 00:22:35,270
environment variable defined which

464
00:22:32,060 --> 00:22:39,919
basically tells you where R is the

465
00:22:35,270 --> 00:22:42,500
current application code where does it

466
00:22:39,920 --> 00:22:44,860
reside on the file system in the

467
00:22:42,500 --> 00:22:47,090
container while it's running okay

468
00:22:44,860 --> 00:22:48,590
because you know the application is

469
00:22:47,090 --> 00:22:50,240
deployed as a part of the container the

470
00:22:48,590 --> 00:22:52,699
container has to have the code of the

471
00:22:50,240 --> 00:22:57,110
application and this variable contains

472
00:22:52,700 --> 00:23:00,860
the path to the code okay so let's try

473
00:22:57,110 --> 00:23:04,850
and see what's the value of this so this

474
00:23:00,860 --> 00:23:07,729
is the URL that we constructed and using

475
00:23:04,850 --> 00:23:09,740
the code injection so because because we

476
00:23:07,730 --> 00:23:11,780
have called injection we are able to run

477
00:23:09,740 --> 00:23:14,780
some code within the context of the

478
00:23:11,780 --> 00:23:18,530
application and this is the URL encoded

479
00:23:14,780 --> 00:23:22,970
URL and now when we run this we can get

480
00:23:18,530 --> 00:23:26,840
the result which is the path of

481
00:23:22,970 --> 00:23:29,900
the application so it's under law tasks

482
00:23:26,840 --> 00:23:31,939
okay now we actually didn't have to do

483
00:23:29,900 --> 00:23:33,860
this because it's already documented and

484
00:23:31,940 --> 00:23:37,309
this is the default path for it stored

485
00:23:33,860 --> 00:23:40,760
but you know just to verify okay so

486
00:23:37,309 --> 00:23:43,010
let's do the first exercise here let's

487
00:23:40,760 --> 00:23:45,140
try and accelerate the code of the

488
00:23:43,010 --> 00:23:49,539
application basically extract the code

489
00:23:45,140 --> 00:23:52,159
of the application okay so this is our

490
00:23:49,539 --> 00:23:54,980
application developed a story and

491
00:23:52,159 --> 00:23:57,049
deployed in the container and this is

492
00:23:54,980 --> 00:24:00,740
where we want to copy it into so this is

493
00:23:57,049 --> 00:24:03,139
our hacker instance and what we are

494
00:24:00,740 --> 00:24:08,809
going to try to do is just copy the code

495
00:24:03,140 --> 00:24:11,390
from there to here so this is our URL

496
00:24:08,809 --> 00:24:13,250
here basically what we are doing is in

497
00:24:11,390 --> 00:24:15,440
again remember we're running in the

498
00:24:13,250 --> 00:24:18,230
context of the application so we have

499
00:24:15,440 --> 00:24:20,539
access to everything so we are running

500
00:24:18,230 --> 00:24:23,360
this document which basically creates a

501
00:24:20,539 --> 00:24:25,280
package of all the code of the

502
00:24:23,360 --> 00:24:30,260
application and we know exactly where it

503
00:24:25,280 --> 00:24:35,809
is and then we use see URL to send it to

504
00:24:30,260 --> 00:24:37,879
our C exact ddns dotnet okay now you

505
00:24:35,809 --> 00:24:40,820
might think pause for a second and think

506
00:24:37,880 --> 00:24:43,190
wait why does it even allow me to

507
00:24:40,820 --> 00:24:48,230
connect to some external application

508
00:24:43,190 --> 00:24:51,020
well it does it just does it's because

509
00:24:48,230 --> 00:24:56,270
by default there is no V PC so basically

510
00:24:51,020 --> 00:24:59,350
you can connect anyway okay so this is

511
00:24:56,270 --> 00:25:03,200
my hacker server it's empty right now

512
00:24:59,350 --> 00:25:06,379
now I'm running the malicious code the

513
00:25:03,200 --> 00:25:08,570
acceleration code it's finished running

514
00:25:06,380 --> 00:25:11,000
nothing interesting here and now I'm

515
00:25:08,570 --> 00:25:15,799
going back to my hacker server and voila

516
00:25:11,000 --> 00:25:17,960
I have the tar file okay and now I can

517
00:25:15,799 --> 00:25:22,820
open it and see the actual code of the

518
00:25:17,960 --> 00:25:26,030
application and I can see that there is

519
00:25:22,820 --> 00:25:29,620
some data there that I really don't want

520
00:25:26,030 --> 00:25:32,389
to be exposed like API keys for example

521
00:25:29,620 --> 00:25:35,860
yeah you don't need to take a picture of

522
00:25:32,390 --> 00:25:39,230
this they have already been changed

523
00:25:35,860 --> 00:25:41,500
so anyway that's that's already

524
00:25:39,230 --> 00:25:43,760
something okay so we we managed to

525
00:25:41,500 --> 00:25:49,100
accelerate the code of the application

526
00:25:43,760 --> 00:25:50,300
without without working too much okay so

527
00:25:49,100 --> 00:25:55,909
what else we could do

528
00:25:50,300 --> 00:25:58,730
so AWS provide an SDK which basically

529
00:25:55,910 --> 00:26:00,770
allows you to do lots and lots of useful

530
00:25:58,730 --> 00:26:03,200
things on your application

531
00:26:00,770 --> 00:26:05,870
programmatically okay so it allows you

532
00:26:03,200 --> 00:26:07,820
to manipulate your application program

533
00:26:05,870 --> 00:26:10,429
program programmatically you can list a

534
00:26:07,820 --> 00:26:13,820
function deploy new ones update existing

535
00:26:10,430 --> 00:26:17,440
and invoke by code okay so this is all

536
00:26:13,820 --> 00:26:22,250
very very handy but as you might imagine

537
00:26:17,440 --> 00:26:24,980
could be dangerous now the role

538
00:26:22,250 --> 00:26:28,550
permission is authenticated by your AWS

539
00:26:24,980 --> 00:26:30,680
profile but within the context of the

540
00:26:28,550 --> 00:26:32,899
function and we are running within the

541
00:26:30,680 --> 00:26:37,220
context of the function it's already

542
00:26:32,900 --> 00:26:40,280
authenticated so if you invoke the SDK

543
00:26:37,220 --> 00:26:42,950
API is you already authenticated and

544
00:26:40,280 --> 00:26:44,660
whatever the API allows you to do you

545
00:26:42,950 --> 00:26:48,740
are able to do when you are in the

546
00:26:44,660 --> 00:26:51,280
context of the application okay so this

547
00:26:48,740 --> 00:26:54,290
is my new function and what it does it

548
00:26:51,280 --> 00:26:59,800
overrides the existing function by

549
00:26:54,290 --> 00:26:59,800
appending some additional stuff day ok

550
00:27:00,640 --> 00:27:07,760
so here is what we are doing we

551
00:27:03,830 --> 00:27:11,659
basically this is this is our cars now

552
00:27:07,760 --> 00:27:14,840
we executed the updating code and now

553
00:27:11,660 --> 00:27:17,030
you can see it's taking a little not now

554
00:27:14,840 --> 00:27:18,770
when were you reloading this page it's

555
00:27:17,030 --> 00:27:20,450
taking a little bit longer and this is

556
00:27:18,770 --> 00:27:23,379
because the application has already been

557
00:27:20,450 --> 00:27:27,770
modified and you can see how now we

558
00:27:23,380 --> 00:27:31,400
injected some cold day ok it wasn't

559
00:27:27,770 --> 00:27:34,870
there it wasn't there from in the first

560
00:27:31,400 --> 00:27:39,260
place ok so we we actually modified both

561
00:27:34,870 --> 00:27:42,320
because and the main ok and this is the

562
00:27:39,260 --> 00:27:46,020
actual code that is doing it and you can

563
00:27:42,320 --> 00:27:49,290
see what what we've done here

564
00:27:46,020 --> 00:27:51,840
and you can see that we appended some

565
00:27:49,290 --> 00:27:59,428
text here and this this is how we ended

566
00:27:51,840 --> 00:28:01,590
up with this result okay okay but this

567
00:27:59,429 --> 00:28:03,900
was just a one-time infection so let's

568
00:28:01,590 --> 00:28:05,699
say that someone has done this your

569
00:28:03,900 --> 00:28:07,650
DevOps people discovered this they

570
00:28:05,700 --> 00:28:12,929
restored the function and everything is

571
00:28:07,650 --> 00:28:14,640
good right okay so this actually shows

572
00:28:12,929 --> 00:28:16,710
you how you can do it so let's say that

573
00:28:14,640 --> 00:28:21,120
you have this reset function defined you

574
00:28:16,710 --> 00:28:27,720
reseted it and now it's it's gone back

575
00:28:21,120 --> 00:28:30,600
to the initial State okay so the cars

576
00:28:27,720 --> 00:28:34,620
has been restored the main has not been

577
00:28:30,600 --> 00:28:38,490
restored yet though okay now let's try

578
00:28:34,620 --> 00:28:40,770
to do some persistent infection plus

579
00:28:38,490 --> 00:28:42,960
viral contamination because what we

580
00:28:40,770 --> 00:28:45,600
actually want to do we want not just to

581
00:28:42,960 --> 00:28:48,690
infect it one time but we want to infect

582
00:28:45,600 --> 00:28:52,020
all the functions and make sure that if

583
00:28:48,690 --> 00:28:54,740
you restore some of them when the ones

584
00:28:52,020 --> 00:28:58,020
that you haven't restored is involved it

585
00:28:54,740 --> 00:29:01,820
contaminates again in facts again the

586
00:28:58,020 --> 00:29:06,030
functions that have been restored okay

587
00:29:01,820 --> 00:29:08,730
so let's say we had this situation we

588
00:29:06,030 --> 00:29:12,480
managed to infect the users it will then

589
00:29:08,730 --> 00:29:15,140
go and in fact both cars in main and

590
00:29:12,480 --> 00:29:18,210
let's say that if afterwards you

591
00:29:15,140 --> 00:29:21,870
develops people understood I realized

592
00:29:18,210 --> 00:29:23,910
that there was a breach they cleaned out

593
00:29:21,870 --> 00:29:27,178
the main and the users but the cause has

594
00:29:23,910 --> 00:29:33,990
still remained infected when it's

595
00:29:27,179 --> 00:29:37,380
invoked again it will go and again in

596
00:29:33,990 --> 00:29:39,540
fact the users on the main okay so this

597
00:29:37,380 --> 00:29:41,190
is exactly the exercise that you can see

598
00:29:39,540 --> 00:29:43,170
here so we're starting from the clean

599
00:29:41,190 --> 00:29:46,080
slate so as you can see the application

600
00:29:43,170 --> 00:29:47,670
is clean nothing changed there we are

601
00:29:46,080 --> 00:29:51,240
now running the function and basically

602
00:29:47,670 --> 00:29:53,540
in fact all of them by looping through

603
00:29:51,240 --> 00:29:54,920
them so now when we reload we see that

604
00:29:53,540 --> 00:29:56,120
both may

605
00:29:54,920 --> 00:30:01,230
[Music]

606
00:29:56,120 --> 00:30:04,620
both sorry we only did it for the users

607
00:30:01,230 --> 00:30:06,660
so now the cars was not contaminated now

608
00:30:04,620 --> 00:30:10,379
we're learning the users against taking

609
00:30:06,660 --> 00:30:12,360
longer so now the users is infected now

610
00:30:10,380 --> 00:30:13,950
we're going back to cause and again you

611
00:30:12,360 --> 00:30:16,800
can see there is slight delay because

612
00:30:13,950 --> 00:30:20,220
the function has been overridden and now

613
00:30:16,800 --> 00:30:24,030
it's already infected as well as well as

614
00:30:20,220 --> 00:30:31,260
the main now we're cleaning it up we're

615
00:30:24,030 --> 00:30:32,280
cleaning the main and so you can see the

616
00:30:31,260 --> 00:30:35,520
main was restored

617
00:30:32,280 --> 00:30:38,310
what cleaning the users the users are

618
00:30:35,520 --> 00:30:41,430
restored and then we're going back to

619
00:30:38,310 --> 00:30:43,740
users you can see that uses now will

620
00:30:41,430 --> 00:30:47,270
appear and again there is this delay the

621
00:30:43,740 --> 00:30:49,770
users now appear ok but we forgot to

622
00:30:47,270 --> 00:30:53,190
clean the car so we're going back to

623
00:30:49,770 --> 00:30:57,570
cars you will see that cars is now still

624
00:30:53,190 --> 00:30:59,670
hacked but when we go again to users you

625
00:30:57,570 --> 00:31:02,730
will see that users become infected

626
00:30:59,670 --> 00:31:12,150
again because we fail to clean up

627
00:31:02,730 --> 00:31:14,640
everything ok so that was fun we

628
00:31:12,150 --> 00:31:16,590
basically manage to do persistent cold

629
00:31:14,640 --> 00:31:21,090
contamination in a non persistent

630
00:31:16,590 --> 00:31:22,649
environment right so there was an

631
00:31:21,090 --> 00:31:25,620
environment someone created an

632
00:31:22,650 --> 00:31:28,170
application we managed to contaminate it

633
00:31:25,620 --> 00:31:30,810
and without going and cleaning up

634
00:31:28,170 --> 00:31:33,360
everything every single function there

635
00:31:30,810 --> 00:31:35,340
is still the potential of re infecting

636
00:31:33,360 --> 00:31:39,540
rhe contaminating the rest of the

637
00:31:35,340 --> 00:31:41,820
applications ok so how it was all

638
00:31:39,540 --> 00:31:44,370
possible so there are a few things here

639
00:31:41,820 --> 00:31:46,439
that kind of assisted us with this

640
00:31:44,370 --> 00:31:48,750
hacking exercise aside of the code of

641
00:31:46,440 --> 00:31:51,110
the application obviously and we'll will

642
00:31:48,750 --> 00:31:54,750
touch upon this a little bit later but

643
00:31:51,110 --> 00:31:57,030
there is this execution role which is

644
00:31:54,750 --> 00:31:59,370
what the function is allowed to do and

645
00:31:57,030 --> 00:32:01,889
by default it is quite limited so by

646
00:31:59,370 --> 00:32:02,909
default you cannot for example invoke

647
00:32:01,890 --> 00:32:06,930
the SDK

648
00:32:02,910 --> 00:32:08,640
right and another thing is limiting the

649
00:32:06,930 --> 00:32:10,830
communication so the extra

650
00:32:08,640 --> 00:32:13,830
an exercise that we've done as the first

651
00:32:10,830 --> 00:32:15,689
step is possible because the VPC was not

652
00:32:13,830 --> 00:32:17,070
defined but obviously if you did define

653
00:32:15,690 --> 00:32:18,870
the VPC and you limited the

654
00:32:17,070 --> 00:32:21,780
communications only to the channels that

655
00:32:18,870 --> 00:32:27,719
are allowed whitelisted then it would

656
00:32:21,780 --> 00:32:30,120
have not been possible okay now so we

657
00:32:27,720 --> 00:32:32,730
you know I just mentioned that by

658
00:32:30,120 --> 00:32:35,689
default this permission of running

659
00:32:32,730 --> 00:32:41,100
functions like update and stuff are not

660
00:32:35,690 --> 00:32:43,290
granted but what about using some

661
00:32:41,100 --> 00:32:45,120
third-party packages so one of the

662
00:32:43,290 --> 00:32:49,350
packages that a lot of people use today

663
00:32:45,120 --> 00:32:52,590
with lambda is this claudia GS so it's

664
00:32:49,350 --> 00:32:57,480
basically a package that allows you to

665
00:32:52,590 --> 00:33:00,449
deploy nodejs projects easily and this

666
00:32:57,480 --> 00:33:02,910
is its title and then it also says here

667
00:33:00,450 --> 00:33:07,320
that it does require full access you

668
00:33:02,910 --> 00:33:09,450
know in the small print okay so if you

669
00:33:07,320 --> 00:33:11,070
decided to use this as a package as a

670
00:33:09,450 --> 00:33:13,340
part of your application one of the

671
00:33:11,070 --> 00:33:17,909
things that you have to do is granted

672
00:33:13,340 --> 00:33:20,780
full access it may not look like a big

673
00:33:17,910 --> 00:33:23,730
thing but it is as we've already seen

674
00:33:20,780 --> 00:33:24,980
okay so you can say okay this is you

675
00:33:23,730 --> 00:33:27,930
know third party

676
00:33:24,980 --> 00:33:31,500
let's not trust the third party this is

677
00:33:27,930 --> 00:33:39,050
Amazon themselves this is aw slabs

678
00:33:31,500 --> 00:33:42,900
github and here they also require using

679
00:33:39,050 --> 00:33:49,320
full access in the samples they provide

680
00:33:42,900 --> 00:33:52,410
themselves okay now we actually reached

681
00:33:49,320 --> 00:33:55,740
out to a SS to speak about this stuff

682
00:33:52,410 --> 00:33:57,540
and and other things such as V PC and

683
00:33:55,740 --> 00:33:59,430
they acknowledge that something has to

684
00:33:57,540 --> 00:34:01,200
be done about it at least it they

685
00:33:59,430 --> 00:34:03,840
acknowledge that they should fix the

686
00:34:01,200 --> 00:34:08,399
github examples well last time we

687
00:34:03,840 --> 00:34:12,418
checked there was still there okay now

688
00:34:08,399 --> 00:34:16,109
regarding V PC so again they made a

689
00:34:12,418 --> 00:34:18,509
decision to leave it open to the public

690
00:34:16,110 --> 00:34:20,740
now whether it survived a wise decision

691
00:34:18,510 --> 00:34:23,139
or not so wise decision

692
00:34:20,739 --> 00:34:25,060
time will tell but they apparently

693
00:34:23,139 --> 00:34:27,879
they're trying to make it as easy for

694
00:34:25,060 --> 00:34:30,699
the users to consume but obviously it

695
00:34:27,879 --> 00:34:36,790
has some implications from the security

696
00:34:30,699 --> 00:34:39,668
standpoint okay so if you take aways

697
00:34:36,790 --> 00:34:41,379
here so first of all remember that when

698
00:34:39,668 --> 00:34:43,569
you run a service there are still at

699
00:34:41,379 --> 00:34:46,359
least two servers involved here one

700
00:34:43,570 --> 00:34:49,149
which hosts the container and the other

701
00:34:46,359 --> 00:34:51,159
one which was the source code okay so

702
00:34:49,149 --> 00:34:52,839
server less environment still has

703
00:34:51,159 --> 00:34:57,160
service behind it and let's remember

704
00:34:52,839 --> 00:35:00,910
that we shouldn't forget about security

705
00:34:57,160 --> 00:35:03,250
so let's talk about sensitive data as

706
00:35:00,910 --> 00:35:05,379
well as talk about role permissions and

707
00:35:03,250 --> 00:35:08,470
communications we should keep all this

708
00:35:05,380 --> 00:35:09,730
in mind and above all we still should

709
00:35:08,470 --> 00:35:13,390
care about the basic application

710
00:35:09,730 --> 00:35:16,420
security so if someone had scanned their

711
00:35:13,390 --> 00:35:18,490
code for application security using one

712
00:35:16,420 --> 00:35:20,380
of the tools including our own check

713
00:35:18,490 --> 00:35:22,569
marks static application security

714
00:35:20,380 --> 00:35:29,349
testing they would have found this code

715
00:35:22,570 --> 00:35:31,960
injection anyway right okay so this is

716
00:35:29,349 --> 00:35:34,780
just quickly showing you how this can be

717
00:35:31,960 --> 00:35:38,050
scanned with what our product with check

718
00:35:34,780 --> 00:35:39,820
marks assess you see this these projects

719
00:35:38,050 --> 00:35:41,619
are really very small they're very tiny

720
00:35:39,820 --> 00:35:43,839
so it doesn't take very long to scan

721
00:35:41,619 --> 00:35:47,500
them will probably take just a few

722
00:35:43,839 --> 00:35:50,400
seconds to get the result here but at

723
00:35:47,500 --> 00:35:52,990
the end of the day you will you will get

724
00:35:50,400 --> 00:35:55,630
your attack vector and you will see that

725
00:35:52,990 --> 00:35:57,609
you actually have a vulnerability and it

726
00:35:55,630 --> 00:35:59,880
just needs to be fixed regardless of

727
00:35:57,609 --> 00:36:07,060
whether it's a service function or not

728
00:35:59,880 --> 00:36:09,190
so we're just going to see the result so

729
00:36:07,060 --> 00:36:13,810
this is the vulnerability that was found

730
00:36:09,190 --> 00:36:16,540
there and you can traverse the flow and

731
00:36:13,810 --> 00:36:20,080
you will see that there is some flow

732
00:36:16,540 --> 00:36:22,420
here from user input into code execution

733
00:36:20,080 --> 00:36:23,920
without proper sanitization which is

734
00:36:22,420 --> 00:36:26,430
what caused all these problems in the

735
00:36:23,920 --> 00:36:26,430
first place

736
00:36:26,840 --> 00:36:33,770
okay so just a quick comparison of these

737
00:36:31,790 --> 00:36:36,110
platforms I won't spend much time on

738
00:36:33,770 --> 00:36:38,360
this because again things are changing

739
00:36:36,110 --> 00:36:41,750
very quickly here but you can see that

740
00:36:38,360 --> 00:36:44,270
there are some things that really need

741
00:36:41,750 --> 00:36:46,340
to be taken into consideration here and

742
00:36:44,270 --> 00:36:48,860
the fact for example that there was no

743
00:36:46,340 --> 00:36:52,100
SDK for modifying the code when this

744
00:36:48,860 --> 00:36:54,140
presentation was written the situation

745
00:36:52,100 --> 00:36:56,900
is not the same today so things are

746
00:36:54,140 --> 00:36:58,850
changing very very quickly but you don't

747
00:36:56,900 --> 00:37:00,980
need to keep in mind that the platform

748
00:36:58,850 --> 00:37:02,720
because it is so powerful you know as

749
00:37:00,980 --> 00:37:05,720
they say with great power comes great

750
00:37:02,720 --> 00:37:08,089
responsibility because there is so much

751
00:37:05,720 --> 00:37:12,890
power you also need to be very cautious

752
00:37:08,090 --> 00:37:20,480
when you enable things so that's it in

753
00:37:12,890 --> 00:37:26,870
terms of several s questions they don't

754
00:37:20,480 --> 00:37:28,520
have any questions yes so I guess maybe

755
00:37:26,870 --> 00:37:30,470
the most interesting part is the

756
00:37:28,520 --> 00:37:32,330
exfiltration bit there and now you did

757
00:37:30,470 --> 00:37:34,069
sort of address it in the VPC part which

758
00:37:32,330 --> 00:37:35,990
is you know it's good practice to lock

759
00:37:34,070 --> 00:37:37,160
down that Network layer but I found it

760
00:37:35,990 --> 00:37:40,279
really interesting that you're able to

761
00:37:37,160 --> 00:37:41,930
invoke the tar binary from me actual I

762
00:37:40,280 --> 00:37:42,980
assume it's Amazon Linux that these

763
00:37:41,930 --> 00:37:45,319
things melanda

764
00:37:42,980 --> 00:37:47,480
you know there's probably an unweighted

765
00:37:45,320 --> 00:37:49,190
number of binaries baked into that OS

766
00:37:47,480 --> 00:37:52,700
distribution are they all able to be

767
00:37:49,190 --> 00:37:54,830
invoked from any lambda function so this

768
00:37:52,700 --> 00:37:57,680
goes back to another thing that I

769
00:37:54,830 --> 00:37:59,600
mentioned which is the elevator

770
00:37:57,680 --> 00:38:01,759
you know the elevated permissions that

771
00:37:59,600 --> 00:38:03,860
you gave to the lambda function by

772
00:38:01,760 --> 00:38:04,970
default it's not able to invoke

773
00:38:03,860 --> 00:38:07,910
executables

774
00:38:04,970 --> 00:38:10,189
but here it was manipulated to be given

775
00:38:07,910 --> 00:38:11,870
full access now again by default you're

776
00:38:10,190 --> 00:38:14,840
not supposed to give it full access

777
00:38:11,870 --> 00:38:17,960
but those examples that I gave basically

778
00:38:14,840 --> 00:38:19,640
kind of push you and gently without you

779
00:38:17,960 --> 00:38:21,410
maybe even fully realizing that

780
00:38:19,640 --> 00:38:23,120
sometimes you do need to give this full

781
00:38:21,410 --> 00:38:25,100
access because you're using some

782
00:38:23,120 --> 00:38:28,490
third-party components or following some

783
00:38:25,100 --> 00:38:32,450
Amazon provided code thank you okay and

784
00:38:28,490 --> 00:38:35,259
just it is as I mentioned at the

785
00:38:32,450 --> 00:38:43,149
beginning somewhere it is running a link

786
00:38:35,260 --> 00:38:44,890
container so okay anyone else well I

787
00:38:43,150 --> 00:38:46,180
hope that was excellent that was awesome

788
00:38:44,890 --> 00:38:47,250
thank you very much market everybody

789
00:38:46,180 --> 00:38:50,658
give me a bad way

790
00:38:47,250 --> 00:38:50,659
[Applause]

