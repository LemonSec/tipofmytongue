1
00:00:00,870 --> 00:00:05,220
I'll probably introduce Adele he's going

2
00:00:04,080 --> 00:00:07,290
to be going through his presentation

3
00:00:05,220 --> 00:00:07,979
around our profiling clustering

4
00:00:07,290 --> 00:00:14,009
internet-wide

5
00:00:07,980 --> 00:00:16,440
scans with fat it's a fact what fact so

6
00:00:14,009 --> 00:00:19,050
I'll hand it over to Adele if you want

7
00:00:16,440 --> 00:00:29,550
to make your way up can we give him a

8
00:00:19,050 --> 00:00:31,969
very warm welcome things hello everyone

9
00:00:29,550 --> 00:00:34,829
and thanks for joining us today I'm

10
00:00:31,969 --> 00:00:36,989
going to present my latest research

11
00:00:34,829 --> 00:00:40,320
about the profiling and clustering the

12
00:00:36,989 --> 00:00:42,140
internet voice cast with a new tool I

13
00:00:40,320 --> 00:00:46,440
released a couple of days ago

14
00:00:42,140 --> 00:00:48,120
so let's first introduce myself I'm an

15
00:00:46,440 --> 00:00:50,610
elite security engineer at Salesforce in

16
00:00:48,120 --> 00:00:53,120
detection team and also a member of the

17
00:00:50,610 --> 00:00:55,710
unit project for about 10 years now

18
00:00:53,120 --> 00:00:58,108
co-developer of hash profiling method

19
00:00:55,710 --> 00:01:03,570
which is a profiling method for SSH I'm

20
00:00:58,109 --> 00:01:05,369
going to get in a few minutes and been

21
00:01:03,570 --> 00:01:13,310
working on a couple more open-source

22
00:01:05,369 --> 00:01:16,500
projects you can find in my github so

23
00:01:13,310 --> 00:01:20,509
I'm going through some basics about the

24
00:01:16,500 --> 00:01:23,820
fingerprinting and different protocols

25
00:01:20,509 --> 00:01:28,110
then jumping in to how I monitor

26
00:01:23,820 --> 00:01:34,320
internet wide the scans and how could we

27
00:01:28,110 --> 00:01:37,799
improve doing that and then introduce my

28
00:01:34,320 --> 00:01:39,298
new tool fat and then the most

29
00:01:37,799 --> 00:01:45,149
interesting part of the talks which is

30
00:01:39,299 --> 00:01:47,939
the observations so these are the main a

31
00:01:45,149 --> 00:01:52,579
questions I'm trying to answer through

32
00:01:47,939 --> 00:01:52,579
the presentation so could we actually

33
00:01:53,000 --> 00:01:59,759
profile the attackers using the network

34
00:01:55,950 --> 00:02:05,070
relator and fingerprints could we

35
00:01:59,759 --> 00:02:07,439
identify their tools and maybe

36
00:02:05,070 --> 00:02:09,389
discovering new connections hidden

37
00:02:07,439 --> 00:02:11,849
connections which we couldn't find

38
00:02:09,389 --> 00:02:13,649
before having network validator and

39
00:02:11,849 --> 00:02:19,709
fingerprints which is like

40
00:02:13,650 --> 00:02:22,500
a bit of more context and possibly maybe

41
00:02:19,709 --> 00:02:25,620
we can detect new evasion techniques as

42
00:02:22,500 --> 00:02:30,470
well so I had these questions in my mind

43
00:02:25,620 --> 00:02:34,019
before starting doing this research and

44
00:02:30,470 --> 00:02:37,349
now I'm going through some background

45
00:02:34,019 --> 00:02:39,390
stuff and then present the main research

46
00:02:37,349 --> 00:02:41,599
and we will see the answers to these

47
00:02:39,390 --> 00:02:41,599
questions

48
00:02:42,769 --> 00:02:48,200
so before we start we need to know a bit

49
00:02:45,959 --> 00:02:51,269
more about fingerprinting techniques

50
00:02:48,200 --> 00:02:54,510
there are lots of them with different

51
00:02:51,269 --> 00:02:59,810
use cases for example you all know about

52
00:02:54,510 --> 00:03:02,129
always finger painting or tcp/ip stack

53
00:02:59,810 --> 00:03:06,030
fingerprinting which for example you can

54
00:03:02,129 --> 00:03:09,780
do using nmap or POF passive always

55
00:03:06,030 --> 00:03:11,190
finger painting there are other types of

56
00:03:09,780 --> 00:03:13,260
finger paintings as well for example

57
00:03:11,190 --> 00:03:15,390
browser fingerprinting you can

58
00:03:13,260 --> 00:03:19,138
fingerprint the browsers and even the

59
00:03:15,390 --> 00:03:23,298
users itself by having a look at things

60
00:03:19,139 --> 00:03:27,989
and features like systems phones

61
00:03:23,299 --> 00:03:30,720
languages and stuff like that but drawer

62
00:03:27,989 --> 00:03:33,750
another type of fingerprints which is

63
00:03:30,720 --> 00:03:35,609
focused on identifying the clients and

64
00:03:33,750 --> 00:03:39,180
applications for different protocols

65
00:03:35,609 --> 00:03:43,590
mainly cryptographic protocols like SSL

66
00:03:39,180 --> 00:03:46,949
SSH and RDP for example I guess you've

67
00:03:43,590 --> 00:03:51,000
heard about jaw 3 or fingerprint TLS and

68
00:03:46,949 --> 00:03:53,340
hash these are actually based on the

69
00:03:51,000 --> 00:03:55,400
fact that cryptographic protocols need

70
00:03:53,340 --> 00:03:57,720
to negotiate some protocol some

71
00:03:55,400 --> 00:04:00,780
parameters in clear-text

72
00:03:57,720 --> 00:04:04,349
so it doesn't matter which cryptographic

73
00:04:00,780 --> 00:04:08,760
protocol you use SSH or DP TLS they have

74
00:04:04,349 --> 00:04:11,578
to negotiate some parameters at first so

75
00:04:08,760 --> 00:04:15,120
let's see how could we fingerprint the

76
00:04:11,579 --> 00:04:18,810
connections using these parameters we

77
00:04:15,120 --> 00:04:21,298
have in clear-text I'll start with TLS

78
00:04:18,810 --> 00:04:25,530
because my main focus in this research

79
00:04:21,298 --> 00:04:30,128
was on TLS and then I

80
00:04:25,530 --> 00:04:34,330
expanded to RDP and other protocols as

81
00:04:30,129 --> 00:04:37,960
well but we have with more details here

82
00:04:34,330 --> 00:04:40,389
about TLS so for TLS the interesting

83
00:04:37,960 --> 00:04:41,190
packet at a message for us is the client

84
00:04:40,389 --> 00:04:45,669
hello

85
00:04:41,190 --> 00:04:48,639
you can see here is a sample it's

86
00:04:45,669 --> 00:04:52,419
actually a simplified version of message

87
00:04:48,639 --> 00:04:54,520
flow for TLS handshake and the first

88
00:04:52,419 --> 00:04:58,150
packet you see here is client hello

89
00:04:54,520 --> 00:05:00,849
which is important for us we currently

90
00:04:58,150 --> 00:05:02,679
don't care about the rest of messages

91
00:05:00,849 --> 00:05:07,090
here but basically how it works is a

92
00:05:02,680 --> 00:05:08,949
client send the algorithms like the

93
00:05:07,090 --> 00:05:13,539
cryptographic algorithm in crypto

94
00:05:08,949 --> 00:05:16,569
algorithm compression and extensions it

95
00:05:13,539 --> 00:05:19,360
supports and everything else using the

96
00:05:16,569 --> 00:05:21,940
client hello to server server responds

97
00:05:19,360 --> 00:05:26,379
back with server hello and select one of

98
00:05:21,940 --> 00:05:29,199
these algorithms and then the rest of

99
00:05:26,379 --> 00:05:31,240
negotiation happens which is the key

100
00:05:29,199 --> 00:05:33,569
exchange certificate exchange and stuff

101
00:05:31,240 --> 00:05:33,569
like that

102
00:05:33,870 --> 00:05:40,960
this is a structure of client hello

103
00:05:37,060 --> 00:05:44,819
based on the RFC which I linked under

104
00:05:40,960 --> 00:05:48,989
the page so what you can see here is

105
00:05:44,819 --> 00:05:52,060
this protocol version a random string

106
00:05:48,990 --> 00:05:54,310
session ID cipher Suites compression

107
00:05:52,060 --> 00:05:58,150
metals and extensions but things which

108
00:05:54,310 --> 00:06:00,580
are interesting for us are these four

109
00:05:58,150 --> 00:06:02,229
fields we don't care about the random

110
00:06:00,580 --> 00:06:04,599
string we don't care about the session

111
00:06:02,229 --> 00:06:07,150
ID because these these are the things

112
00:06:04,599 --> 00:06:09,759
which can be changed during the session

113
00:06:07,150 --> 00:06:11,739
or depending on different clients and

114
00:06:09,759 --> 00:06:18,219
connections so we can't really use those

115
00:06:11,740 --> 00:06:23,110
for fingerprinting so the thing is the

116
00:06:18,219 --> 00:06:26,219
cipher suite list and the supper suite

117
00:06:23,110 --> 00:06:28,960
list we have in client hello message is

118
00:06:26,219 --> 00:06:32,409
actually built in order of clients

119
00:06:28,960 --> 00:06:35,710
preference so each client application

120
00:06:32,409 --> 00:06:38,139
may have different preferences and

121
00:06:35,710 --> 00:06:44,138
different combination of these

122
00:06:38,139 --> 00:06:46,810
with supported extensions compression

123
00:06:44,139 --> 00:06:49,840
algorithm and if other parameters in the

124
00:06:46,810 --> 00:06:52,930
client Euler can helps us having some

125
00:06:49,840 --> 00:06:56,818
kind of fingerprints so terrifically we

126
00:06:52,930 --> 00:07:02,139
can have some unique fingerprints for

127
00:06:56,819 --> 00:07:05,199
applications but when you look at it in

128
00:07:02,139 --> 00:07:07,419
real life the thing is there are many

129
00:07:05,199 --> 00:07:11,409
applications using the same version of

130
00:07:07,419 --> 00:07:15,969
the same for example TLS library opened

131
00:07:11,409 --> 00:07:18,069
open SSL or something like that and as a

132
00:07:15,969 --> 00:07:21,430
result they have the same jatri

133
00:07:18,069 --> 00:07:27,069
so you may see different applications

134
00:07:21,430 --> 00:07:29,650
with the same draw 3 which is fine so a

135
00:07:27,069 --> 00:07:32,069
bit of history on this TLS

136
00:07:29,650 --> 00:07:38,289
fingerprinting think the first thing

137
00:07:32,069 --> 00:07:42,550
actually I found was a work by Yvonne

138
00:07:38,289 --> 00:07:47,349
ristic from SSL labs and it was actually

139
00:07:42,550 --> 00:07:49,810
an Apache module for just debugging

140
00:07:47,349 --> 00:07:54,729
purposes which was logging the initial

141
00:07:49,810 --> 00:07:58,240
SSL handshakes and just focused on the

142
00:07:54,729 --> 00:08:02,800
software Suites nothing else and it was

143
00:07:58,240 --> 00:08:05,199
extracting and logging death so one of

144
00:08:02,800 --> 00:08:08,110
the use cases as I said was for

145
00:08:05,199 --> 00:08:10,389
debugging but an arduous case was for

146
00:08:08,110 --> 00:08:16,650
cross-checking the supported software

147
00:08:10,389 --> 00:08:20,620
Suites with HTTP client user agents so

148
00:08:16,650 --> 00:08:25,299
the purpose was to find if there's any

149
00:08:20,620 --> 00:08:28,259
bot or scanner or two trying to fake the

150
00:08:25,300 --> 00:08:31,029
user agent and then if we check that

151
00:08:28,259 --> 00:08:34,140
using the support supported ciphers -

152
00:08:31,029 --> 00:08:37,149
it's the kind of fingerprint we can

153
00:08:34,140 --> 00:08:40,120
actually detect that so this was the

154
00:08:37,149 --> 00:08:44,560
main purpose of creating this mode SSL

155
00:08:40,120 --> 00:08:48,579
half after that I founded the one

156
00:08:44,560 --> 00:08:50,790
official module for POS which you can

157
00:08:48,579 --> 00:08:53,459
see here is a sample of the finger

158
00:08:50,790 --> 00:08:57,060
they have this a bit ugly but better

159
00:08:53,460 --> 00:08:58,950
than the previous one because it's not

160
00:08:57,060 --> 00:09:01,079
just based on the software Suites it

161
00:08:58,950 --> 00:09:03,270
includes other parameters in the client

162
00:09:01,080 --> 00:09:05,550
flow as well but this is just an

163
00:09:03,270 --> 00:09:11,370
unofficial one which isn't merged with

164
00:09:05,550 --> 00:09:14,250
the main POF codebase the next major

165
00:09:11,370 --> 00:09:19,230
thing was in 2015

166
00:09:14,250 --> 00:09:22,080
done by Libra Roger stone which he

167
00:09:19,230 --> 00:09:24,870
created a couple scripts and tools for

168
00:09:22,080 --> 00:09:28,280
matching creating and exporting of TLS

169
00:09:24,870 --> 00:09:32,210
fingerprints you can see here is the

170
00:09:28,280 --> 00:09:35,970
composition he used for creating his own

171
00:09:32,210 --> 00:09:38,190
fingerprint which includes different

172
00:09:35,970 --> 00:09:40,320
things not just this cipher suite it

173
00:09:38,190 --> 00:09:47,010
includes the TLS version and compression

174
00:09:40,320 --> 00:09:50,760
and elliptic curve as well so the thing

175
00:09:47,010 --> 00:09:53,670
is he actually uses a binary format for

176
00:09:50,760 --> 00:09:57,840
the database and what you can see here

177
00:09:53,670 --> 00:10:03,300
is a the export of that database into

178
00:09:57,840 --> 00:10:06,060
JSON format it's really good better than

179
00:10:03,300 --> 00:10:09,300
the previous works but again it's a bit

180
00:10:06,060 --> 00:10:12,359
hard to share these fingerprints with

181
00:10:09,300 --> 00:10:16,069
the community and have some kind of

182
00:10:12,360 --> 00:10:20,010
detections based on that so that's why

183
00:10:16,070 --> 00:10:22,560
two of our god is from our team in

184
00:10:20,010 --> 00:10:26,880
Salesforce started working on geo 3

185
00:10:22,560 --> 00:10:31,199
which is currently the most common SSL

186
00:10:26,880 --> 00:10:34,410
fingerprinting method the composition of

187
00:10:31,200 --> 00:10:36,690
the parameters were used for fingerprint

188
00:10:34,410 --> 00:10:42,150
is almost the same as the fingerprint

189
00:10:36,690 --> 00:10:45,510
Els and the thing is we put all these

190
00:10:42,150 --> 00:10:49,890
things together and hash it with md5 so

191
00:10:45,510 --> 00:10:51,600
it's easier to share and implement it on

192
00:10:49,890 --> 00:10:54,780
different devices and tools and

193
00:10:51,600 --> 00:10:57,930
currently many tools in the community

194
00:10:54,780 --> 00:11:02,329
started adopting these like soo ricotta

195
00:10:57,930 --> 00:11:04,510
bro ideas and many other tools even

196
00:11:02,330 --> 00:11:08,490
packet beat

197
00:11:04,510 --> 00:11:15,279
and many different tools out there

198
00:11:08,490 --> 00:11:21,279
started supporting this so let's move on

199
00:11:15,279 --> 00:11:25,810
to the next protocol SSH and then we go

200
00:11:21,279 --> 00:11:28,750
back to the TLS again so for SSH we

201
00:11:25,810 --> 00:11:31,420
actually have a message called SSH

202
00:11:28,750 --> 00:11:35,589
message checks in it which is a key

203
00:11:31,420 --> 00:11:37,390
exchange initiation and as you can see

204
00:11:35,589 --> 00:11:40,510
here in the screen shot your song feels

205
00:11:37,390 --> 00:11:43,120
like algorithms exchange algorithms

206
00:11:40,510 --> 00:11:46,480
encryption Mac compression and language

207
00:11:43,120 --> 00:11:48,070
which potentially can be used for

208
00:11:46,480 --> 00:11:50,950
fingerprinting we actually started

209
00:11:48,070 --> 00:11:56,730
working on this several months ago it

210
00:11:50,950 --> 00:11:59,950
was late 2018 been reading and me

211
00:11:56,730 --> 00:12:01,870
started working on this and had an

212
00:11:59,950 --> 00:12:03,190
initial composition and tested on death

213
00:12:01,870 --> 00:12:07,930
on our honey pots and different

214
00:12:03,190 --> 00:12:10,779
scenarios and removed some parameters

215
00:12:07,930 --> 00:12:13,479
from the final composition because they

216
00:12:10,779 --> 00:12:17,470
were we dynamic we couldn't use those

217
00:12:13,480 --> 00:12:20,140
for fingerprinting and then the final

218
00:12:17,470 --> 00:12:23,410
composition is what you can see here key

219
00:12:20,140 --> 00:12:28,000
exchange algorithm encryption algorithms

220
00:12:23,410 --> 00:12:30,510
Mac and compression we put all these

221
00:12:28,000 --> 00:12:33,880
things together and hash it in md5

222
00:12:30,510 --> 00:12:39,060
almost the same way as we do it in Jory

223
00:12:33,880 --> 00:12:44,380
for TLS and then we have hash for client

224
00:12:39,060 --> 00:12:52,329
ssh applications and hash server for SSH

225
00:12:44,380 --> 00:12:54,850
servers just another point here before

226
00:12:52,330 --> 00:13:00,040
these checks in it message you can see

227
00:12:54,850 --> 00:13:02,529
there is an order negotiation called

228
00:13:00,040 --> 00:13:04,510
save server identification string and

229
00:13:02,529 --> 00:13:06,670
client identification as string this is

230
00:13:04,510 --> 00:13:10,089
actually something which you can easily

231
00:13:06,670 --> 00:13:13,260
change but by default if you have a look

232
00:13:10,089 --> 00:13:17,140
at like the open SSH clients or servers

233
00:13:13,260 --> 00:13:20,680
they have a specific string here

234
00:13:17,140 --> 00:13:24,760
for example you can see here let me use

235
00:13:20,680 --> 00:13:28,380
the magnifier so this is for example for

236
00:13:24,760 --> 00:13:30,939
a specific version of SSH on Ubuntu and

237
00:13:28,380 --> 00:13:34,740
you can easily change this for example

238
00:13:30,940 --> 00:13:37,149
if you have used the nmap the SSH

239
00:13:34,740 --> 00:13:41,040
scanning module in nmap you can easily

240
00:13:37,149 --> 00:13:44,050
change that but most of the times no one

241
00:13:41,040 --> 00:13:47,380
changed that but I will show you

242
00:13:44,050 --> 00:13:51,790
even if someone trying to change that we

243
00:13:47,380 --> 00:13:58,180
can still detect what the actual client

244
00:13:51,790 --> 00:14:02,110
or server was so here are a couple

245
00:13:58,180 --> 00:14:06,339
examples and useless is of these SSH

246
00:14:02,110 --> 00:14:10,420
fingerprinting technique you can see the

247
00:14:06,339 --> 00:14:14,410
first one is in crack so in n crack you

248
00:14:10,420 --> 00:14:16,860
can customize the ssh identification the

249
00:14:14,410 --> 00:14:20,110
string that I told you just right now

250
00:14:16,860 --> 00:14:23,019
but it doesn't matter if you change it

251
00:14:20,110 --> 00:14:26,709
to open as a search or anything else you

252
00:14:23,019 --> 00:14:31,390
always have this specific hash because

253
00:14:26,709 --> 00:14:34,739
of the order of encryption algorithms

254
00:14:31,390 --> 00:14:37,660
and everything in n crack library

255
00:14:34,740 --> 00:14:39,670
another interesting thing which I found

256
00:14:37,660 --> 00:14:43,600
several months ago was that cobalt

257
00:14:39,670 --> 00:14:46,660
strike also has a SSH client built in

258
00:14:43,600 --> 00:14:50,620
and there's no way you can change that

259
00:14:46,660 --> 00:14:56,250
built in SSH client so I had a look at

260
00:14:50,620 --> 00:15:01,480
that and apparently it has Anna specifc

261
00:14:56,250 --> 00:15:03,730
SSH fingerprints so if you search for

262
00:15:01,480 --> 00:15:07,060
this SSH fingerprint inside your network

263
00:15:03,730 --> 00:15:11,350
from windows systems to Linux systems

264
00:15:07,060 --> 00:15:14,079
that's like certainly something like

265
00:15:11,350 --> 00:15:15,910
cobalt strike I actually tested that and

266
00:15:14,079 --> 00:15:19,420
it actually doesn't have any false

267
00:15:15,910 --> 00:15:22,500
positive and then the last one here in

268
00:15:19,420 --> 00:15:25,360
the examples is the Kerry honeypot so

269
00:15:22,500 --> 00:15:28,770
you know that in honey pots we try to

270
00:15:25,360 --> 00:15:32,200
fake specific

271
00:15:28,770 --> 00:15:35,500
protocol or survey or something and here

272
00:15:32,200 --> 00:15:39,730
in calorie which is a SSH honeypot you

273
00:15:35,500 --> 00:15:41,890
can customize that a string which tells

274
00:15:39,730 --> 00:15:45,010
the ethic here for example I'm OpenSSH

275
00:15:41,890 --> 00:15:48,100
or something but if you have a look at

276
00:15:45,010 --> 00:15:52,569
the hash it actually uses a static list

277
00:15:48,100 --> 00:15:56,590
of encryption algorithms and compression

278
00:15:52,570 --> 00:16:00,790
and takes all those stuff and that

279
00:15:56,590 --> 00:16:03,250
actually results in a unique hash if you

280
00:16:00,790 --> 00:16:06,370
start searching this in census or

281
00:16:03,250 --> 00:16:08,680
shoulder you can find many SSH honey

282
00:16:06,370 --> 00:16:12,700
pots out there and it's kind of

283
00:16:08,680 --> 00:16:14,469
interesting and the last thing about the

284
00:16:12,700 --> 00:16:17,140
Association you're printing thing here

285
00:16:14,470 --> 00:16:20,500
is a simple tool I created called the

286
00:16:17,140 --> 00:16:24,670
hash gene because the problem with TLS

287
00:16:20,500 --> 00:16:26,880
was for Jory I know many people and

288
00:16:24,670 --> 00:16:30,339
companies out there was looking for it

289
00:16:26,880 --> 00:16:34,090
database of Jory fingerprints to use for

290
00:16:30,340 --> 00:16:35,980
detection or baseline ink but it's a bit

291
00:16:34,090 --> 00:16:37,870
hard to automate creating that so I

292
00:16:35,980 --> 00:16:39,910
created this hash then actually there is

293
00:16:37,870 --> 00:16:43,150
another version for a Joey as well which

294
00:16:39,910 --> 00:16:46,360
I haven't released yet I probably do do

295
00:16:43,150 --> 00:16:48,730
its own so what Hatchin does is it's

296
00:16:46,360 --> 00:16:51,190
actually a simple Python script and also

297
00:16:48,730 --> 00:16:53,830
a docker file which will be modified by

298
00:16:51,190 --> 00:16:57,430
the Python script dynamically so it

299
00:16:53,830 --> 00:17:00,190
starts changing the docker file and

300
00:16:57,430 --> 00:17:04,149
using different operating systems with

301
00:17:00,190 --> 00:17:06,310
different open SSL versions and then

302
00:17:04,150 --> 00:17:08,709
tries to initiate a connection and

303
00:17:06,310 --> 00:17:10,839
captures the hash value so here you can

304
00:17:08,709 --> 00:17:15,880
automate the creation of this database

305
00:17:10,839 --> 00:17:18,280
for yourself ok let's move on to another

306
00:17:15,880 --> 00:17:22,360
interesting protocol here which is the

307
00:17:18,280 --> 00:17:24,849
RDP there's been a lot of discussions

308
00:17:22,359 --> 00:17:28,270
around it during the past couple days so

309
00:17:24,849 --> 00:17:30,399
I thought why not including that in this

310
00:17:28,270 --> 00:17:34,060
presentation so I've been working on

311
00:17:30,400 --> 00:17:39,940
catching the RDP traffic on my honey

312
00:17:34,060 --> 00:17:41,450
pots from several months ago but started

313
00:17:39,940 --> 00:17:44,710
looking at that

314
00:17:41,450 --> 00:17:46,580
more closely from a couple days ago so

315
00:17:44,710 --> 00:17:50,510
let's see how we can actually

316
00:17:46,580 --> 00:17:53,300
fingerprint the RDP connections before

317
00:17:50,510 --> 00:17:55,370
we start doing that we need to learn

318
00:17:53,300 --> 00:18:00,139
more about the RDP itself we need you

319
00:17:55,370 --> 00:18:04,250
know how RDP works and is it using TLS

320
00:18:00,140 --> 00:18:08,110
or is it like using something else so it

321
00:18:04,250 --> 00:18:11,150
actually uses TLS and also another

322
00:18:08,110 --> 00:18:14,419
protocol which is the RDP standard

323
00:18:11,150 --> 00:18:16,730
security protocol so I will show you in

324
00:18:14,420 --> 00:18:18,770
the next couple of slides how we can

325
00:18:16,730 --> 00:18:21,890
fingerprint the RDP connections

326
00:18:18,770 --> 00:18:24,560
so the first RDP connection we have is

327
00:18:21,890 --> 00:18:27,620
the negotiation request it doesn't

328
00:18:24,560 --> 00:18:31,300
matter if you use TLS or standard RDP

329
00:18:27,620 --> 00:18:33,439
security protocol you always have this

330
00:18:31,300 --> 00:18:35,570
negotiation request and in the

331
00:18:33,440 --> 00:18:38,690
negotiation request there is a requested

332
00:18:35,570 --> 00:18:45,500
protocols field and here you can see

333
00:18:38,690 --> 00:18:48,740
that the protocols here is set by the

334
00:18:45,500 --> 00:18:52,810
client what we have here in this

335
00:18:48,740 --> 00:18:58,400
screenshot is TLS credits SP and EUI dua

336
00:18:52,810 --> 00:19:00,740
so client actually tells the server that

337
00:18:58,400 --> 00:19:03,230
i support these protocols then the

338
00:19:00,740 --> 00:19:09,110
server selects one and continues the

339
00:19:03,230 --> 00:19:11,600
connection so the thing is if the client

340
00:19:09,110 --> 00:19:17,959
uses client the server uses the enhanced

341
00:19:11,600 --> 00:19:23,929
RDP security which can be TLS 1.0 1.1

342
00:19:17,960 --> 00:19:27,110
1.2 credits SP or RDS TLS they actually

343
00:19:23,930 --> 00:19:30,640
use TLS and that's good so we can still

344
00:19:27,110 --> 00:19:33,860
fingerprint these connections using jory

345
00:19:30,640 --> 00:19:36,680
but if it uses the standard or DP

346
00:19:33,860 --> 00:19:41,469
security it's actually even better

347
00:19:36,680 --> 00:19:43,820
because then we have our list of

348
00:19:41,470 --> 00:19:48,230
parameters we can use for fingerprinting

349
00:19:43,820 --> 00:19:49,850
so I will show you here an experimental

350
00:19:48,230 --> 00:19:53,780
fingerprint method I created for

351
00:19:49,850 --> 00:19:55,129
standard RDP security again I say this

352
00:19:53,780 --> 00:19:58,460
is not perfect it

353
00:19:55,130 --> 00:20:02,350
it's just for my use case I will

354
00:19:58,460 --> 00:20:05,780
probably work on completing that and

355
00:20:02,350 --> 00:20:08,990
finalizing that in the coming weeks what

356
00:20:05,780 --> 00:20:12,080
the current composition is the major

357
00:20:08,990 --> 00:20:15,049
version minor version a cluster Flags

358
00:20:12,080 --> 00:20:20,600
encryption methods X encryption metals

359
00:20:15,049 --> 00:20:22,250
and channel def so the thing is here you

360
00:20:20,600 --> 00:20:24,230
can see in the screenshot that if we use

361
00:20:22,250 --> 00:20:27,559
our deepest under security we have

362
00:20:24,230 --> 00:20:31,220
another message which is a client data

363
00:20:27,559 --> 00:20:33,590
so after that initial negotiation we

364
00:20:31,220 --> 00:20:38,120
have the client data and in client data

365
00:20:33,590 --> 00:20:43,100
we have many interesting fields which

366
00:20:38,120 --> 00:20:48,500
shows what RDP client is used for this

367
00:20:43,100 --> 00:20:49,908
connection so I will go back to that in

368
00:20:48,500 --> 00:20:53,690
the observation section of this

369
00:20:49,909 --> 00:20:56,000
presentation but now let's have a look

370
00:20:53,690 --> 00:20:58,039
at other protocols and see if we can

371
00:20:56,000 --> 00:21:01,370
start the fingerprinting those as well

372
00:20:58,039 --> 00:21:07,090
so for HTTP actually there is a great

373
00:21:01,370 --> 00:21:10,250
work by Nestle Square guys back in 2003

374
00:21:07,090 --> 00:21:12,530
this is actually for fingerprinting HTTP

375
00:21:10,250 --> 00:21:14,840
servers but the same approach can be

376
00:21:12,530 --> 00:21:17,690
applied to HTTP clients as well draw

377
00:21:14,840 --> 00:21:20,330
several teams you can use but the most

378
00:21:17,690 --> 00:21:23,510
interesting one is the order of HTTP

379
00:21:20,330 --> 00:21:26,658
headers so this is something for HTTP

380
00:21:23,510 --> 00:21:31,309
then the recent work I started doing is

381
00:21:26,659 --> 00:21:34,429
on quic protocol which actually has the

382
00:21:31,309 --> 00:21:39,649
two main versions Google quick and IETF

383
00:21:34,429 --> 00:21:43,370
version so recently I started creating

384
00:21:39,650 --> 00:21:47,679
it go based library for quick for

385
00:21:43,370 --> 00:21:50,629
extracting the quick client hellos and

386
00:21:47,679 --> 00:21:56,240
you can see here is a sample screenshot

387
00:21:50,630 --> 00:22:00,860
of that I'm continuing working on that

388
00:21:56,240 --> 00:22:03,020
to support IETF version as well but what

389
00:22:00,860 --> 00:22:06,229
other protocols can be fingerprinted

390
00:22:03,020 --> 00:22:07,820
this way basically any cryptographic

391
00:22:06,230 --> 00:22:14,090
protocols

392
00:22:07,820 --> 00:22:18,049
having a clear text negotiation and even

393
00:22:14,090 --> 00:22:21,228
non cryptographic protocols like HTTP as

394
00:22:18,049 --> 00:22:23,179
I told you the order of headers or some

395
00:22:21,229 --> 00:22:26,840
other features can be used for

396
00:22:23,179 --> 00:22:30,289
fingerprinting so why we should do that

397
00:22:26,840 --> 00:22:33,228
how these fingerprinting metadata can

398
00:22:30,289 --> 00:22:38,450
help us identifying the attackers tools

399
00:22:33,229 --> 00:22:41,659
and profiling them so the problem is the

400
00:22:38,450 --> 00:22:44,289
current honeypot has a limited network

401
00:22:41,659 --> 00:22:47,470
logging and they usually lock just

402
00:22:44,289 --> 00:22:49,970
general network information and some

403
00:22:47,470 --> 00:22:53,739
application level data like for example

404
00:22:49,970 --> 00:22:57,499
in Carrie you have SSH commands you have

405
00:22:53,739 --> 00:23:00,950
some authentication related logs and

406
00:22:57,499 --> 00:23:02,720
stuff like that the same thing for RDP

407
00:23:00,950 --> 00:23:06,109
honey pots and other honey costs out

408
00:23:02,720 --> 00:23:11,059
there but giorno network metadata and

409
00:23:06,109 --> 00:23:14,658
handshake logging so and actually that's

410
00:23:11,059 --> 00:23:16,999
the reason why all the research we see

411
00:23:14,659 --> 00:23:18,799
almost all the research we see out there

412
00:23:16,999 --> 00:23:21,049
about the honey pots they're mostly

413
00:23:18,799 --> 00:23:24,379
about like the number of connections to

414
00:23:21,049 --> 00:23:26,690
different ports and the scanning trends

415
00:23:24,379 --> 00:23:29,478
and stuff like that but naughty nothing

416
00:23:26,690 --> 00:23:34,190
interesting other than that so my main

417
00:23:29,479 --> 00:23:36,229
question was if we lock handshakes and

418
00:23:34,190 --> 00:23:39,320
network mediator could we find anything

419
00:23:36,229 --> 00:23:41,779
else some other interesting stuff which

420
00:23:39,320 --> 00:23:44,960
I told you at the beginning of my

421
00:23:41,779 --> 00:23:48,590
presentation so let's have a look what

422
00:23:44,960 --> 00:23:51,830
what are our options for logging the

423
00:23:48,590 --> 00:23:53,658
network mediator so bro or Zeke is one

424
00:23:51,830 --> 00:23:57,399
of the best things we can use for that

425
00:23:53,659 --> 00:23:59,960
it's actually a pretty mature tool and

426
00:23:57,399 --> 00:24:02,469
it's really flexible but the problem

427
00:23:59,960 --> 00:24:06,739
with bro is if you want to add a new

428
00:24:02,470 --> 00:24:09,109
protocol like for example quick or if

429
00:24:06,739 --> 00:24:13,299
you want to extract new fields from RDP

430
00:24:09,109 --> 00:24:13,299
it's a bit hard like I went to that

431
00:24:16,080 --> 00:24:22,050
another one is surely cata so circuitry

432
00:24:18,570 --> 00:24:24,720
is a bit easier for expanding and adding

433
00:24:22,050 --> 00:24:30,620
new protocols but currently supports

434
00:24:24,720 --> 00:24:32,490
HTTP DNS and TLS it's good for

435
00:24:30,620 --> 00:24:34,350
collecting Network metadata in

436
00:24:32,490 --> 00:24:38,160
production but it doesn't work for much

437
00:24:34,350 --> 00:24:40,790
my use case and then there's tea shark

438
00:24:38,160 --> 00:24:44,360
which is actually what I used because

439
00:24:40,790 --> 00:24:47,480
maybe it's a bit weird because like

440
00:24:44,360 --> 00:24:51,659
t-shirt t-shirt isn't good for like

441
00:24:47,480 --> 00:24:54,570
collecting network logs in production

442
00:24:51,660 --> 00:24:57,210
but it actually works for my use case I

443
00:24:54,570 --> 00:24:59,730
will show you and then there's another

444
00:24:57,210 --> 00:25:03,750
tool which is released recently which is

445
00:24:59,730 --> 00:25:04,080
based on go and it's actually pretty

446
00:25:03,750 --> 00:25:06,030
good

447
00:25:04,080 --> 00:25:10,620
I haven't tested it but it's one of the

448
00:25:06,030 --> 00:25:12,360
best tools out there which is net cap so

449
00:25:10,620 --> 00:25:14,159
this is actually the first version of my

450
00:25:12,360 --> 00:25:17,399
research which I presented last year in

451
00:25:14,160 --> 00:25:22,740
the high net project it was mainly

452
00:25:17,400 --> 00:25:27,920
focused on TLS so what I used there for

453
00:25:22,740 --> 00:25:30,900
monitoring was brew and JavaScript and

454
00:25:27,920 --> 00:25:34,020
for the honeypot I just used an engine

455
00:25:30,900 --> 00:25:38,570
eeks nothing special just nginx with

456
00:25:34,020 --> 00:25:45,330
some open TLS ports and then I joined

457
00:25:38,570 --> 00:25:49,500
that nginx Logs with brew logs and like

458
00:25:45,330 --> 00:25:52,620
credit this dashboard and some context

459
00:25:49,500 --> 00:25:55,440
around the connections I was seeing so

460
00:25:52,620 --> 00:25:57,780
this year I changed data bits instead of

461
00:25:55,440 --> 00:26:00,270
the bro I started using my own tool

462
00:25:57,780 --> 00:26:03,330
which released a couple days ago called

463
00:26:00,270 --> 00:26:05,430
fat fingerprinting all the things so

464
00:26:03,330 --> 00:26:12,060
it's actually based on T shark it uses

465
00:26:05,430 --> 00:26:14,070
the pythons wrapper for T shark and the

466
00:26:12,060 --> 00:26:16,620
reason I actually used that was because

467
00:26:14,070 --> 00:26:21,360
I wanted to load different new protocols

468
00:26:16,620 --> 00:26:25,760
like quick or DP and I wanted to have a

469
00:26:21,360 --> 00:26:27,370
way to quickly create an experimental

470
00:26:25,760 --> 00:26:31,120
finger-painting

471
00:26:27,370 --> 00:26:35,439
the same thing as I showed you for our

472
00:26:31,120 --> 00:26:37,178
DP or DFP so this was I guess the best

473
00:26:35,440 --> 00:26:40,690
choice for that and for the honeypot

474
00:26:37,179 --> 00:26:44,019
part I used again nginx for TLS than

475
00:26:40,690 --> 00:26:49,690
HTTP ports or the PI for our DP and

476
00:26:44,019 --> 00:26:51,999
caddy which is a web server for quick so

477
00:26:49,690 --> 00:26:54,759
then I collected the logs using fluent

478
00:26:51,999 --> 00:26:57,340
the MongoDB and meta base it doesn't

479
00:26:54,759 --> 00:27:04,419
matter what you use this is just what I

480
00:26:57,340 --> 00:27:06,789
wanted to share so let's have a look at

481
00:27:04,419 --> 00:27:10,450
this new tool and see how we can use

482
00:27:06,789 --> 00:27:12,990
that for our research so this is

483
00:27:10,450 --> 00:27:16,659
actually if you want to this is the link

484
00:27:12,990 --> 00:27:20,860
you can use and if you scan this QR code

485
00:27:16,659 --> 00:27:24,159
you go to the github page as I told you

486
00:27:20,860 --> 00:27:25,869
is the Polish art based script for

487
00:27:24,159 --> 00:27:29,169
extracting Network metadata and

488
00:27:25,869 --> 00:27:34,080
fingerprints for currently it just

489
00:27:29,169 --> 00:27:37,869
supports TLS SSH RDP HTTP and G quick

490
00:27:34,080 --> 00:27:42,039
I'm adding a IETF version of quick my

491
00:27:37,869 --> 00:27:44,918
sequel mssql as well so my main use case

492
00:27:42,039 --> 00:27:46,929
is was for monitoring honey pots and

493
00:27:44,919 --> 00:27:49,779
network forensic but yeah it's up to you

494
00:27:46,929 --> 00:27:52,200
you can use it for different things easy

495
00:27:49,779 --> 00:27:56,919
to add new protocols the JSON output is

496
00:27:52,200 --> 00:27:59,549
good you can just import it into your

497
00:27:56,919 --> 00:28:03,429
plank or any other tools we used for

498
00:27:59,549 --> 00:28:05,168
block management analysis and maybe the

499
00:28:03,429 --> 00:28:07,059
whole downside is the performance

500
00:28:05,169 --> 00:28:11,259
because it's based on T shark so it's

501
00:28:07,059 --> 00:28:14,110
not really like high performance and

502
00:28:11,259 --> 00:28:17,169
that's the reason I started a creating a

503
00:28:14,110 --> 00:28:20,789
version in go using the go packet as

504
00:28:17,169 --> 00:28:26,409
well so that's still under development

505
00:28:20,789 --> 00:28:31,600
so here's the sample log from fat and as

506
00:28:26,409 --> 00:28:34,690
you can see here this is listening to

507
00:28:31,600 --> 00:28:38,619
network connections live mode and just

508
00:28:34,690 --> 00:28:41,019
print some summarized version of the

509
00:28:38,619 --> 00:28:45,668
connections and also log that into a

510
00:28:41,019 --> 00:28:48,399
JSON file so now the most interesting at

511
00:28:45,669 --> 00:28:50,200
least I think it's the most important

512
00:28:48,399 --> 00:28:54,428
part of the talk which is the

513
00:28:50,200 --> 00:28:57,909
observations now let's see what we can

514
00:28:54,429 --> 00:28:59,740
understand about the attackers and tools

515
00:28:57,909 --> 00:29:04,139
using these metadata and the

516
00:28:59,740 --> 00:29:07,330
fingerprints so this is just just that

517
00:29:04,139 --> 00:29:09,100
simple diagram we can see here the

518
00:29:07,330 --> 00:29:12,639
interesting thing here is that you can

519
00:29:09,100 --> 00:29:17,320
see an actual started scanning

520
00:29:12,639 --> 00:29:19,990
some TLS ports like 9 9 2 4 4 3 and

521
00:29:17,320 --> 00:29:23,649
other ports and the interesting thing

522
00:29:19,990 --> 00:29:29,200
here is he or she actually scanned all

523
00:29:23,649 --> 00:29:32,830
these pores 54 times like you can see

524
00:29:29,200 --> 00:29:36,639
the graph is really cool and it shows

525
00:29:32,830 --> 00:29:38,559
that a specific actor but this is a

526
00:29:36,639 --> 00:29:42,340
simple thing you can see in other

527
00:29:38,559 --> 00:29:44,619
honeypot research as well but let's see

528
00:29:42,340 --> 00:29:49,509
what other things we can have so I

529
00:29:44,619 --> 00:29:54,789
started visualizing the logs and I used

530
00:29:49,509 --> 00:29:58,029
I P source as the as one node and

531
00:29:54,789 --> 00:30:01,658
Joffrey as the other and connected these

532
00:29:58,029 --> 00:30:05,230
two together so this is what I saw I

533
00:30:01,659 --> 00:30:08,889
didn't really expect to see these so if

534
00:30:05,230 --> 00:30:12,850
you look closer let me just zoom into

535
00:30:08,889 --> 00:30:14,889
that so here you can see some

536
00:30:12,850 --> 00:30:20,789
interesting stuff like this is something

537
00:30:14,889 --> 00:30:23,320
we actually expect to see different IPS

538
00:30:20,789 --> 00:30:26,649
connecting to one specific Joffrey

539
00:30:23,320 --> 00:30:29,649
that's normal because they use the same

540
00:30:26,649 --> 00:30:33,129
tool like Google Chrome or nmap or

541
00:30:29,649 --> 00:30:35,979
something and this is kind of normal

542
00:30:33,129 --> 00:30:43,529
things we should see but have a look at

543
00:30:35,980 --> 00:30:43,529
this or this one here or this one

544
00:30:45,759 --> 00:30:51,880
so these are the normal things I showed

545
00:30:48,889 --> 00:30:55,189
you I'll skip that and go to the

546
00:30:51,880 --> 00:30:58,880
interesting one so what you see here is

547
00:30:55,190 --> 00:31:04,580
that there are like 10 IP addresses with

548
00:30:58,880 --> 00:31:07,490
more than 500 different geo trees this

549
00:31:04,580 --> 00:31:10,009
is a bit weird I actually selected one

550
00:31:07,490 --> 00:31:13,370
of the IPS and you can see just one of

551
00:31:10,009 --> 00:31:17,330
these IPS has about the 500 Jo 3 values

552
00:31:13,370 --> 00:31:20,779
so let's look at it a bit closer and see

553
00:31:17,330 --> 00:31:22,970
what's the reason for that so this is

554
00:31:20,779 --> 00:31:24,950
actually an attempt to avoid SSL

555
00:31:22,970 --> 00:31:29,120
fingerprinting by randomizing client

556
00:31:24,950 --> 00:31:33,620
flow he client hello fields I first

557
00:31:29,120 --> 00:31:37,850
actually identified this at late 2017

558
00:31:33,620 --> 00:31:42,258
and reported in July 2018 last year in

559
00:31:37,850 --> 00:31:44,330
the high net project but recently some

560
00:31:42,259 --> 00:31:46,879
researchers from akame also started

561
00:31:44,330 --> 00:31:52,460
observing these and reported that

562
00:31:46,879 --> 00:31:55,820
actually several days ago and yeah this

563
00:31:52,460 --> 00:32:02,470
is just the pointer to that just for

564
00:31:55,820 --> 00:32:07,279
record so that's not look at that so

565
00:32:02,470 --> 00:32:09,379
here's one of the tails fingerprinting

566
00:32:07,279 --> 00:32:11,980
evasion attempts you can see here the

567
00:32:09,379 --> 00:32:22,519
jatri field is a bit weird

568
00:32:11,980 --> 00:32:24,549
it's too short this is the same like let

569
00:32:22,519 --> 00:32:28,709
me

570
00:32:24,549 --> 00:32:31,809
so can you see here the Joe cheese

571
00:32:28,709 --> 00:32:35,559
judges are the same IP sources are

572
00:32:31,809 --> 00:32:38,129
different and geographies are a bit

573
00:32:35,559 --> 00:32:38,129
weird

574
00:32:39,119 --> 00:32:45,728
you can see that here again so if you

575
00:32:43,179 --> 00:32:49,929
look closer you see that these numbers

576
00:32:45,729 --> 00:32:52,239
are changing actually if you sort that

577
00:32:49,929 --> 00:32:55,919
you can see that it's taught from one

578
00:32:52,239 --> 00:33:03,519
going to two three four five and

579
00:32:55,919 --> 00:33:05,529
increases this is another one which you

580
00:33:03,519 --> 00:33:12,759
can see here there's an IP source again

581
00:33:05,529 --> 00:33:15,369
with lots of Geoffrey's and again when

582
00:33:12,759 --> 00:33:17,229
we look closer here is actually more

583
00:33:15,369 --> 00:33:19,769
interesting pattern can you see the

584
00:33:17,229 --> 00:33:19,769
pattern here

585
00:33:25,450 --> 00:33:31,690
this is another one from the same actor

586
00:33:28,259 --> 00:33:35,559
so if you have a look at this pattern

587
00:33:31,690 --> 00:33:38,019
like these numbers are highlighted will

588
00:33:35,559 --> 00:33:41,079
be removed in the next packet like have

589
00:33:38,019 --> 00:33:43,659
a look at this one sixty one will be

590
00:33:41,079 --> 00:33:44,950
removed in the next one fifty three will

591
00:33:43,659 --> 00:33:48,309
be removed in the next one

592
00:33:44,950 --> 00:33:52,119
one five six and sixty from the next one

593
00:33:48,309 --> 00:33:56,729
so the pattern is like so obvious when

594
00:33:52,119 --> 00:33:56,728
you have a look at that Jo three fields

595
00:33:57,929 --> 00:34:08,309
these are two other samples here which

596
00:34:02,139 --> 00:34:11,319
you can see again from the same actor so

597
00:34:08,309 --> 00:34:13,029
this one is actually my favorite one

598
00:34:11,319 --> 00:34:15,839
it's actually kind of interesting you

599
00:34:13,029 --> 00:34:18,399
can see four different clusters here and

600
00:34:15,839 --> 00:34:22,808
they are all connected together with

601
00:34:18,399 --> 00:34:23,799
some links here so the IPS are

602
00:34:22,809 --> 00:34:25,389
completely different

603
00:34:23,799 --> 00:34:28,139
Joffrey is different what because of

604
00:34:25,389 --> 00:34:30,009
these nodes here we can connect these

605
00:34:28,139 --> 00:34:33,789
four clusters together

606
00:34:30,009 --> 00:34:35,769
which is interesting so the pattern in

607
00:34:33,789 --> 00:34:38,619
this one is even more interesting than

608
00:34:35,768 --> 00:34:41,469
the before the previous one so here you

609
00:34:38,619 --> 00:34:46,779
can see the the green box there's

610
00:34:41,469 --> 00:34:51,189
something then something else then again

611
00:34:46,779 --> 00:34:53,409
the first one repeated five or six times

612
00:34:51,190 --> 00:34:59,109
and then in a small one which is

613
00:34:53,409 --> 00:35:02,470
actually a invalid cypher and then a

614
00:34:59,109 --> 00:35:04,509
wall of text so this actually happens

615
00:35:02,470 --> 00:35:06,669
every time for the same actor I've

616
00:35:04,509 --> 00:35:08,559
observed and the interesting thing is

617
00:35:06,670 --> 00:35:11,019
when you have a look at these values

618
00:35:08,559 --> 00:35:13,450
it's actually different every time but

619
00:35:11,019 --> 00:35:16,269
the pattern is the same like I'm looking

620
00:35:13,450 --> 00:35:18,308
at the next one the values are

621
00:35:16,269 --> 00:35:20,649
completely different this time but the

622
00:35:18,309 --> 00:35:23,319
pattern is the same something then

623
00:35:20,650 --> 00:35:25,930
something else then the first thing

624
00:35:23,319 --> 00:35:28,029
happened five or six times then that

625
00:35:25,930 --> 00:35:30,399
invalid thing and then the wall of text

626
00:35:28,029 --> 00:35:33,099
so it's actually interesting we cannot

627
00:35:30,400 --> 00:35:37,930
identify that Hector always using this

628
00:35:33,099 --> 00:35:42,259
pattern just a few other things and the

629
00:35:37,930 --> 00:35:44,509
I'll show you something on RDP so for

630
00:35:42,259 --> 00:35:46,670
profiling the tools and actors you can

631
00:35:44,509 --> 00:35:50,089
see here because of some links between

632
00:35:46,670 --> 00:35:53,000
these graphs you can profile the tools

633
00:35:50,089 --> 00:35:56,328
and actors actually you can understand

634
00:35:53,000 --> 00:35:59,089
that this is the same actor using the

635
00:35:56,329 --> 00:36:01,819
same tools because for example in this

636
00:35:59,089 --> 00:36:05,150
example here you see like the IPS are

637
00:36:01,819 --> 00:36:07,160
different but just because of this jatri

638
00:36:05,150 --> 00:36:13,130
here we can connect these two IPS

639
00:36:07,160 --> 00:36:15,558
together there's also an tor exit node

640
00:36:13,130 --> 00:36:18,500
mulching as well which you can see these

641
00:36:15,559 --> 00:36:20,660
IPS here are completely different but

642
00:36:18,500 --> 00:36:22,849
the jaw tree is here can connect these

643
00:36:20,660 --> 00:36:27,890
IPS together which means that this is

644
00:36:22,849 --> 00:36:29,990
the same actor using the same tool let's

645
00:36:27,890 --> 00:36:33,440
have a look at some observations on RDP

646
00:36:29,990 --> 00:36:35,899
so in RDP I've started saying these

647
00:36:33,440 --> 00:36:39,710
connections which shows some randomized

648
00:36:35,900 --> 00:36:43,509
kookiest drink another interesting thing

649
00:36:39,710 --> 00:36:48,859
here is the requested protocols is empty

650
00:36:43,509 --> 00:36:51,950
which isn't a normal tank and then here

651
00:36:48,859 --> 00:36:56,450
the fingerprint which I told you is an

652
00:36:51,950 --> 00:37:02,990
experimental fingerprint shows that all

653
00:36:56,450 --> 00:37:06,259
these random cookie streams has four

654
00:37:02,990 --> 00:37:09,649
specific fingerprints each time and this

655
00:37:06,259 --> 00:37:16,130
is because the actor started changing

656
00:37:09,650 --> 00:37:18,170
the encryption algorithm is uses this is

657
00:37:16,130 --> 00:37:20,150
another one which you can see you

658
00:37:18,170 --> 00:37:26,900
actually can see the source IPS but the

659
00:37:20,150 --> 00:37:29,900
source IPS are different jawed or DFP or

660
00:37:26,900 --> 00:37:34,009
fingerprint is the same and here the

661
00:37:29,900 --> 00:37:38,619
cookie is like something like a brute

662
00:37:34,009 --> 00:37:41,660
force and the last thing in the RDP is

663
00:37:38,619 --> 00:37:44,630
the judge view of or DPS carriers so the

664
00:37:41,660 --> 00:37:46,460
previous thing I showed you was actually

665
00:37:44,630 --> 00:37:49,280
the scales using the standard or the

666
00:37:46,460 --> 00:37:52,670
free security protocol but this is the

667
00:37:49,280 --> 00:37:55,430
ones which are using the TLS and this is

668
00:37:52,670 --> 00:37:57,470
the jaw three of those things I wish I

669
00:37:55,430 --> 00:38:01,279
had like more time to go through these

670
00:37:57,470 --> 00:38:04,609
there was lots of diagrams and stuff to

671
00:38:01,280 --> 00:38:08,420
show you but I will finish that with

672
00:38:04,610 --> 00:38:10,850
another observation from SSH the same

673
00:38:08,420 --> 00:38:15,530
thing happens here in SSH as well you

674
00:38:10,850 --> 00:38:18,890
can see here there are different client

675
00:38:15,530 --> 00:38:21,230
strings which is randomized but all has

676
00:38:18,890 --> 00:38:24,830
the same hash value which is the hashed

677
00:38:21,230 --> 00:38:30,740
value of golang the ssh library which is

678
00:38:24,830 --> 00:38:33,380
actually for a malware using go this is

679
00:38:30,740 --> 00:38:37,160
actually just the only current thing

680
00:38:33,380 --> 00:38:40,010
that I see in quick which is just one

681
00:38:37,160 --> 00:38:42,770
actor scanning my quick hi pot every day

682
00:38:40,010 --> 00:38:48,850
with this user agent which isn't a valid

683
00:38:42,770 --> 00:38:53,300
user agent for Google Chrome I probably

684
00:38:48,850 --> 00:38:55,730
provide more details and graphs and I'm

685
00:38:53,300 --> 00:38:57,640
also going to release the data set if

686
00:38:55,730 --> 00:39:02,030
you're interested

687
00:38:57,640 --> 00:39:05,000
soon after the talk but just to conclude

688
00:39:02,030 --> 00:39:07,400
the talk you saw that with capturing

689
00:39:05,000 --> 00:39:09,680
Network metadata and fingerprints we can

690
00:39:07,400 --> 00:39:11,690
identify different actors and tools and

691
00:39:09,680 --> 00:39:13,250
profile them discover new connections

692
00:39:11,690 --> 00:39:15,260
between the actors which we couldn't

693
00:39:13,250 --> 00:39:17,390
find before using metadata and

694
00:39:15,260 --> 00:39:20,090
fingerprint and finally detecting

695
00:39:17,390 --> 00:39:24,230
evasion evasion techniques that you saw

696
00:39:20,090 --> 00:39:26,090
in the talk so I guess I don't have

697
00:39:24,230 --> 00:39:31,010
enough time anymore if you have any

698
00:39:26,090 --> 00:39:33,800
questions that was absolutely fantastic

699
00:39:31,010 --> 00:39:35,240
I love listening to people speak that

700
00:39:33,800 --> 00:39:37,600
are highly passionate about what they do

701
00:39:35,240 --> 00:39:39,770
and that's a really really good tool

702
00:39:37,600 --> 00:39:41,240
we're just talking about it before and

703
00:39:39,770 --> 00:39:43,870
it says I can talk about this for hours

704
00:39:41,240 --> 00:39:48,009
so if you do have any questions please

705
00:39:43,870 --> 00:39:50,699
meet him outside but let's thank Adele

706
00:39:48,010 --> 00:39:50,699
[Applause]

