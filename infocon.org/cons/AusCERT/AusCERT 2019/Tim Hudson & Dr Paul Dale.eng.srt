1
00:00:00,030 --> 00:00:06,480
I'm gonna introduce we have Tim Hudson

2
00:00:02,639 --> 00:00:08,820
and dr. Paul Dale giving their

3
00:00:06,480 --> 00:00:10,710
presentation on open SSL 3.0

4
00:00:08,820 --> 00:00:13,570
accelerating forwards if you can give

5
00:00:10,710 --> 00:00:18,510
them a big warm welcome applause guys I

6
00:00:13,570 --> 00:00:18,510
[Applause]

7
00:00:22,490 --> 00:00:29,189
get the clicker to start with great

8
00:00:25,590 --> 00:00:30,900
cancer you think so what we're actually

9
00:00:29,189 --> 00:00:32,399
going to do and I'm not gonna bother to

10
00:00:30,900 --> 00:00:34,320
read out our abstracts you've got an

11
00:00:32,399 --> 00:00:36,450
idea of what we're talking about in

12
00:00:34,320 --> 00:00:39,390
essence is a whole pile of the changes

13
00:00:36,450 --> 00:00:42,510
that have happened in open SSL over the

14
00:00:39,390 --> 00:00:45,570
last 12 12 14 months or so so I'm just

15
00:00:42,510 --> 00:00:47,699
going to launch straight into it and one

16
00:00:45,570 --> 00:00:50,910
of the things that we we always feel is

17
00:00:47,700 --> 00:00:53,670
a good thing to to reflect on is where

18
00:00:50,910 --> 00:00:55,489
did open SSL come from and it's it's a

19
00:00:53,670 --> 00:00:58,410
history that a lot of folks here

20
00:00:55,489 --> 00:01:00,510
probably are aware of but when we we

21
00:00:58,410 --> 00:01:03,510
talk about open SSL overseas very few

22
00:01:00,510 --> 00:01:05,610
people seem to realize that it

23
00:01:03,510 --> 00:01:09,600
originally came from something fairly

24
00:01:05,610 --> 00:01:13,350
local to here so the origins of open SSL

25
00:01:09,600 --> 00:01:15,570
actually were in 1996 up in Brisbane and

26
00:01:13,350 --> 00:01:16,710
it was just two people and between the

27
00:01:15,570 --> 00:01:19,258
manager produced about a hundred

28
00:01:16,710 --> 00:01:24,720
thousand lines of code if you're forward

29
00:01:19,259 --> 00:01:27,210
fast about 23 years open SSL is now 17

30
00:01:24,720 --> 00:01:29,220
people and about 400,000 lines of code

31
00:01:27,210 --> 00:01:31,169
so it's gone from you know two people

32
00:01:29,220 --> 00:01:33,960
working on something to a group that's

33
00:01:31,170 --> 00:01:36,900
distributed all over the place and we

34
00:01:33,960 --> 00:01:39,689
recently celebrated the official 20th

35
00:01:36,900 --> 00:01:41,520
anniversary of open SSL that was in late

36
00:01:39,689 --> 00:01:43,529
December last year and that's what the

37
00:01:41,520 --> 00:01:46,048
project itself existing so it's been

38
00:01:43,530 --> 00:01:47,759
around for quite a while there's a whole

39
00:01:46,049 --> 00:01:50,549
new generation of people who have just

40
00:01:47,759 --> 00:01:52,110
sort of never known the concept of not

41
00:01:50,549 --> 00:01:53,850
being able to have access to full

42
00:01:52,110 --> 00:01:56,189
strength cryptographic toolkit worldwide

43
00:01:53,850 --> 00:01:57,839
so that's something that we're pretty

44
00:01:56,189 --> 00:02:01,139
focused on in terms of being able to

45
00:01:57,840 --> 00:02:03,180
provide if you have a look up here on

46
00:02:01,140 --> 00:02:05,880
this slide this is the current set of

47
00:02:03,180 --> 00:02:08,310
open SSL management committee and open

48
00:02:05,880 --> 00:02:10,679
SSL committees so in essence this is the

49
00:02:08,310 --> 00:02:12,690
project governance team and those who

50
00:02:10,679 --> 00:02:13,870
are responsible for checking code into

51
00:02:12,690 --> 00:02:17,170
the repository

52
00:02:13,870 --> 00:02:18,910
and in OpenSSL terms we we separate the

53
00:02:17,170 --> 00:02:20,829
two concepts out so those who are

54
00:02:18,910 --> 00:02:23,170
interested in supporting the longevity

55
00:02:20,830 --> 00:02:25,000
of the project and making sure it's

56
00:02:23,170 --> 00:02:27,609
maintained over time looking at things

57
00:02:25,000 --> 00:02:28,780
like funding direction etc we form a

58
00:02:27,610 --> 00:02:31,390
management committee and there's a

59
00:02:28,780 --> 00:02:34,390
number of us involved in that the

60
00:02:31,390 --> 00:02:35,529
project itself has formal bylaws but the

61
00:02:34,390 --> 00:02:37,679
more important thing that we've done

62
00:02:35,530 --> 00:02:39,940
over the last four years or so is

63
00:02:37,680 --> 00:02:42,250
broaden the number of people who have

64
00:02:39,940 --> 00:02:45,550
the ability to review and commit code

65
00:02:42,250 --> 00:02:47,350
into the OpenSSL repository and I've

66
00:02:45,550 --> 00:02:48,430
done a little break down the bottom

67
00:02:47,350 --> 00:02:52,049
there so you can get an idea that

68
00:02:48,430 --> 00:02:54,489
there's no one country that dominates

69
00:02:52,049 --> 00:02:55,630
OpenSSL in terms of contributions we've

70
00:02:54,489 --> 00:02:58,930
got people from all around the world

71
00:02:55,630 --> 00:03:00,880
contributing and when you have a look at

72
00:02:58,930 --> 00:03:03,610
the geographical regions sure there's

73
00:03:00,880 --> 00:03:05,739
still a whole focus in in Europe and

74
00:03:03,610 --> 00:03:07,450
that's simply a reflection of the the

75
00:03:05,739 --> 00:03:11,130
times and the history behind the project

76
00:03:07,450 --> 00:03:13,298
and the fact that there's a lot more

77
00:03:11,130 --> 00:03:15,849
concentration on the importance of

78
00:03:13,299 --> 00:03:17,829
privacy protection and the underlying

79
00:03:15,849 --> 00:03:19,720
cryptographic algorithms and routines

80
00:03:17,829 --> 00:03:22,239
that are need necessary to protect that

81
00:03:19,720 --> 00:03:25,269
so from that perspective we're feeling

82
00:03:22,239 --> 00:03:27,160
fairly reasonably resourced in terms of

83
00:03:25,269 --> 00:03:29,260
the number of people and the locations

84
00:03:27,160 --> 00:03:33,340
and what would be able to do with that

85
00:03:29,260 --> 00:03:35,019
side of things and the other thing is

86
00:03:33,340 --> 00:03:36,549
because we're sitting out on github we

87
00:03:35,019 --> 00:03:38,620
don't have to go and produce statistics

88
00:03:36,549 --> 00:03:41,230
ourselves we simply click on the little

89
00:03:38,620 --> 00:03:43,630
little icons and and we can see what our

90
00:03:41,230 --> 00:03:45,880
project history is so the top line there

91
00:03:43,630 --> 00:03:47,920
is is basically the commit frequency

92
00:03:45,880 --> 00:03:50,069
over time and you're able to see that

93
00:03:47,920 --> 00:03:52,958
effectively when the project began

94
00:03:50,069 --> 00:03:55,358
there's a bit of activity and then kind

95
00:03:52,959 --> 00:03:57,730
of a quiet period relatively speaking in

96
00:03:55,359 --> 00:03:59,650
terms of contributions there's a 10-year

97
00:03:57,730 --> 00:04:02,319
period in the middle there where not an

98
00:03:59,650 --> 00:04:05,139
awful lot was going on and then in 2014

99
00:04:02,319 --> 00:04:07,149
we started to reinvigorate the project

100
00:04:05,139 --> 00:04:09,370
get more people involved take on more

101
00:04:07,150 --> 00:04:11,530
work more people means you could do more

102
00:04:09,370 --> 00:04:14,560
things do more things means you can

103
00:04:11,530 --> 00:04:16,180
support more concepts you're adding

104
00:04:14,560 --> 00:04:18,430
additional capabilities and things along

105
00:04:16,180 --> 00:04:20,950
those lines and if we have a look at the

106
00:04:18,430 --> 00:04:23,440
most recent 12 months of the history of

107
00:04:20,950 --> 00:04:25,510
the project which is the lovely little

108
00:04:23,440 --> 00:04:28,090
orange bars at the bottom there you can

109
00:04:25,510 --> 00:04:29,500
see that and this is on a weekly

110
00:04:28,090 --> 00:04:31,330
you can see that in essence we're

111
00:04:29,500 --> 00:04:34,630
looking at some between 25 and 45

112
00:04:31,330 --> 00:04:36,550
commits per week so 0 5 to 8 commits per

113
00:04:34,630 --> 00:04:38,560
day and that's that's the sign of a

114
00:04:36,550 --> 00:04:40,330
reasonably healthy project so there's a

115
00:04:38,560 --> 00:04:43,210
lot of folks contributing we're not

116
00:04:40,330 --> 00:04:45,550
sitting in a state we don't feel the job

117
00:04:43,210 --> 00:04:47,190
is done a whole pile of additional works

118
00:04:45,550 --> 00:04:50,470
going in and we've got a very active

119
00:04:47,190 --> 00:04:52,180
community participating in it the other

120
00:04:50,470 --> 00:04:53,830
thing you could notice is the project

121
00:04:52,180 --> 00:04:55,990
team we do actually take a break over

122
00:04:53,830 --> 00:04:58,090
Christmas there's a couple of days there

123
00:04:55,990 --> 00:04:59,740
where the the commit rate drops down but

124
00:04:58,090 --> 00:05:01,150
it doesn't go to zero there's still

125
00:04:59,740 --> 00:05:04,150
people who work through the Christmas

126
00:05:01,150 --> 00:05:05,830
period and the big blip you can see in

127
00:05:04,150 --> 00:05:08,049
the middle there that's when we changed

128
00:05:05,830 --> 00:05:09,909
across to the Apache 2-0 license and

129
00:05:08,050 --> 00:05:13,720
that hit a whole pile of parts of the

130
00:05:09,910 --> 00:05:16,120
code and then if we turn around and look

131
00:05:13,720 --> 00:05:18,610
at the project activity over time so

132
00:05:16,120 --> 00:05:21,430
those first two graphs were showing the

133
00:05:18,610 --> 00:05:23,370
commits into the project itself how do

134
00:05:21,430 --> 00:05:26,140
we go about measuring how people use

135
00:05:23,370 --> 00:05:27,940
OpenSSL so who's not actually

136
00:05:26,140 --> 00:05:29,469
contributing code but working with it

137
00:05:27,940 --> 00:05:31,270
and there's a couple of additional

138
00:05:29,470 --> 00:05:33,010
graphs you can get out of github and

139
00:05:31,270 --> 00:05:34,930
that's looking at the the number of

140
00:05:33,010 --> 00:05:36,969
clones how many people have cloned the

141
00:05:34,930 --> 00:05:39,490
repository how many of those clones are

142
00:05:36,970 --> 00:05:41,770
active over time and having a look at

143
00:05:39,490 --> 00:05:43,780
those sorts of statistics gives us a

144
00:05:41,770 --> 00:05:46,330
sense of what people are doing and what

145
00:05:43,780 --> 00:05:49,419
people are working with and if you have

146
00:05:46,330 --> 00:05:52,300
a look at it we can also get visitors

147
00:05:49,420 --> 00:05:54,520
statistics so github lets us see how

148
00:05:52,300 --> 00:05:57,180
many people are coming to look at open

149
00:05:54,520 --> 00:05:59,289
SSL on github so looking at the code as

150
00:05:57,180 --> 00:06:00,760
distinct from looking at the project

151
00:05:59,290 --> 00:06:02,680
website where we talk about

152
00:06:00,760 --> 00:06:05,230
documentation and things what are people

153
00:06:02,680 --> 00:06:07,000
doing with the code itself and those

154
00:06:05,230 --> 00:06:08,500
stats on the bottom give us an idea of

155
00:06:07,000 --> 00:06:09,520
how people are looking at things and

156
00:06:08,500 --> 00:06:11,580
there's just over the last couple of

157
00:06:09,520 --> 00:06:11,580
weeks

158
00:06:15,009 --> 00:06:20,780
okay so now you know the people who are

159
00:06:18,259 --> 00:06:24,740
involved some idea of what the

160
00:06:20,780 --> 00:06:27,440
management's about we'll get on to what

161
00:06:24,740 --> 00:06:34,970
the project is what's current status is

162
00:06:27,440 --> 00:06:37,460
the main focus at the moment is on is on

163
00:06:34,970 --> 00:06:40,120
transparency we're trying to do all our

164
00:06:37,460 --> 00:06:43,849
development out in the open we're

165
00:06:40,120 --> 00:06:46,069
attempting to CC much of the decisions

166
00:06:43,849 --> 00:06:48,650
that are being made so get external

167
00:06:46,069 --> 00:07:00,979
visibility open the project up to the

168
00:06:48,650 --> 00:07:03,080
world yeah anyway there are some points

169
00:07:00,979 --> 00:07:05,599
we have a Phipps project there's five

170
00:07:03,080 --> 00:07:08,780
sponsors we have an architecture

171
00:07:05,599 --> 00:07:10,550
document that's where we want to be we

172
00:07:08,780 --> 00:07:12,409
actually have a plan if this is where

173
00:07:10,550 --> 00:07:15,979
we're going to get to I think team

174
00:07:12,409 --> 00:07:19,330
covers that a bit later we've got a

175
00:07:15,979 --> 00:07:22,818
design for the three that I release

176
00:07:19,330 --> 00:07:25,550
which that thinks in this but your bits

177
00:07:22,819 --> 00:07:27,440
of it will sort of flow through and we

178
00:07:25,550 --> 00:07:29,259
have a very large number of pool

179
00:07:27,440 --> 00:07:32,060
requests that are just coming through

180
00:07:29,259 --> 00:07:36,440
continuously we're sitting at someone

181
00:07:32,060 --> 00:07:39,759
over 200 at the moment and no number

182
00:07:36,440 --> 00:07:39,759
seems to be increasing not decreasing

183
00:07:40,630 --> 00:07:50,719
now that the next version of OpenSSL is

184
00:07:45,460 --> 00:07:54,349
going to be three not not so the current

185
00:07:50,719 --> 00:07:56,449
version is 1.1.1 we are jumping to three

186
00:07:54,349 --> 00:07:58,669
there's there there was a long

187
00:07:56,449 --> 00:08:01,400
discussion about this and it really came

188
00:07:58,669 --> 00:08:04,609
down to we have a fits to dato module

189
00:08:01,400 --> 00:08:06,590
already we don't want to do an open ssl

190
00:08:04,610 --> 00:08:09,590
to do module that won't work with it so

191
00:08:06,590 --> 00:08:12,739
we'll just jump to three as part of this

192
00:08:09,590 --> 00:08:15,258
we're also taking on almost semantic

193
00:08:12,740 --> 00:08:17,990
versioning where there's a couple of

194
00:08:15,259 --> 00:08:19,909
complexities in the way we support old

195
00:08:17,990 --> 00:08:21,159
releases that mean we can't do precisely

196
00:08:19,909 --> 00:08:25,330
semantic version

197
00:08:21,159 --> 00:08:28,688
but it will be very close and as Tim

198
00:08:25,330 --> 00:08:31,359
mentioned the factory license will apply

199
00:08:28,689 --> 00:08:40,060
from three ATO and Wolf and future

200
00:08:31,360 --> 00:08:42,519
releases still the three day project our

201
00:08:40,059 --> 00:08:46,119
goal is code complete by the end of this

202
00:08:42,519 --> 00:08:51,220
year so that would be a beta beta level

203
00:08:46,120 --> 00:08:56,079
code submission to the fit chips labs in

204
00:08:51,220 --> 00:08:57,910
early q2 2020 maybe a bit fuzzy on that

205
00:08:56,079 --> 00:09:01,149
date but but that will also correspond

206
00:08:57,910 --> 00:09:07,329
with the official openness to cell 3.0

207
00:09:01,149 --> 00:09:09,850
release date and pips validation six to

208
00:09:07,329 --> 00:09:12,599
nine months after is normal so if you're

209
00:09:09,850 --> 00:09:17,680
interested in flips there's a gap until

210
00:09:12,600 --> 00:09:19,630
2021 basically but otherwise that's the

211
00:09:17,680 --> 00:09:25,750
timeline it's looking good so far it's

212
00:09:19,630 --> 00:09:27,820
probably these things up well you have

213
00:09:25,750 --> 00:09:29,800
to have aspirations you have to have a

214
00:09:27,820 --> 00:09:31,690
goal and one of the things we were also

215
00:09:29,800 --> 00:09:34,569
trying to improve in the project is is

216
00:09:31,690 --> 00:09:37,300
to let people know what we're working on

217
00:09:34,570 --> 00:09:39,279
before we start working on it and it's

218
00:09:37,300 --> 00:09:41,170
quite a change in how we've operated in

219
00:09:39,279 --> 00:09:43,600
the past yeah you found out what was

220
00:09:41,170 --> 00:09:45,579
going to happen in OpenSSL after the

221
00:09:43,600 --> 00:09:47,290
code had already gone in now we're

222
00:09:45,579 --> 00:09:49,569
discussing the sorts of changes we're

223
00:09:47,290 --> 00:09:51,630
looking at what we think needs to change

224
00:09:49,570 --> 00:09:53,350
within the the actual code base itself

225
00:09:51,630 --> 00:09:55,449
discussing it in a much broader

226
00:09:53,350 --> 00:09:57,730
community seeking a wider set of views

227
00:09:55,449 --> 00:10:00,040
and having the discussions of the pros

228
00:09:57,730 --> 00:10:02,260
and cons out in the open and we found

229
00:10:00,040 --> 00:10:04,930
that that that gets your community much

230
00:10:02,260 --> 00:10:07,120
more engaged but it also leads to better

231
00:10:04,930 --> 00:10:08,380
decision-making in general and that's

232
00:10:07,120 --> 00:10:10,390
something that we've been working on

233
00:10:08,380 --> 00:10:12,760
improving and from the governance side

234
00:10:10,390 --> 00:10:15,550
of things within the project so what our

235
00:10:12,760 --> 00:10:17,980
drivers in terms of what we're working

236
00:10:15,550 --> 00:10:20,890
on for this release and the important

237
00:10:17,980 --> 00:10:24,370
thing that we're looking at is whenever

238
00:10:20,890 --> 00:10:27,279
we change something we break things for

239
00:10:24,370 --> 00:10:29,290
our users and breaking things for you

240
00:10:27,279 --> 00:10:32,019
use is a great way to get some really

241
00:10:29,290 --> 00:10:34,329
positive feedback from your user base if

242
00:10:32,019 --> 00:10:36,370
you break something people will tell you

243
00:10:34,330 --> 00:10:37,990
so one of the things we looked at is

244
00:10:36,370 --> 00:10:39,970
what was causing the breakage what's

245
00:10:37,990 --> 00:10:41,860
causing the pain what's causing us all

246
00:10:39,970 --> 00:10:44,440
of these issues and we sat down I

247
00:10:41,860 --> 00:10:47,770
figured out that we simply had to make a

248
00:10:44,440 --> 00:10:50,680
transition where we got the applications

249
00:10:47,770 --> 00:10:51,970
using open SSL out of the internals we

250
00:10:50,680 --> 00:10:54,130
had to turn around and basically get

251
00:10:51,970 --> 00:10:56,140
that separation and that was a big major

252
00:10:54,130 --> 00:10:58,510
change we made in going from the 1-0

253
00:10:56,140 --> 00:11:00,640
series to the 1-1 zeroes we made the

254
00:10:58,510 --> 00:11:03,100
majority of the data structures opaque

255
00:11:00,640 --> 00:11:04,630
and what that meant is we then become

256
00:11:03,100 --> 00:11:07,720
free to change the internal

257
00:11:04,630 --> 00:11:09,490
implementation structure we noticed the

258
00:11:07,720 --> 00:11:11,290
hot pile of error handling is somewhat

259
00:11:09,490 --> 00:11:12,730
inconsistent and it's inconsistent

260
00:11:11,290 --> 00:11:14,860
because we've never documented the

261
00:11:12,730 --> 00:11:16,630
policies of you know api's need to

262
00:11:14,860 --> 00:11:18,550
return errors in this manner it was

263
00:11:16,630 --> 00:11:20,200
simply the person working on a section

264
00:11:18,550 --> 00:11:22,240
of code did the error handling that they

265
00:11:20,200 --> 00:11:23,980
thought made sense so it's a lots of

266
00:11:22,240 --> 00:11:26,560
little inconsistencies that were tidying

267
00:11:23,980 --> 00:11:28,090
up over time and things about you know

268
00:11:26,560 --> 00:11:29,439
who owned the memory you know did the

269
00:11:28,090 --> 00:11:30,940
library allocate the memory did the

270
00:11:29,440 --> 00:11:33,010
application allocate the memory who's

271
00:11:30,940 --> 00:11:34,270
responsible for freeing it we had to

272
00:11:33,010 --> 00:11:36,340
turn around and look at all of these

273
00:11:34,270 --> 00:11:39,130
things and in essence these are the

274
00:11:36,340 --> 00:11:41,110
major areas that break applications and

275
00:11:39,130 --> 00:11:43,290
we think we can do a better job going

276
00:11:41,110 --> 00:11:48,520
forward and in terms of handling that

277
00:11:43,290 --> 00:11:51,610
so in essence by making everything

278
00:11:48,520 --> 00:11:54,490
opaque and there's one exception to that

279
00:11:51,610 --> 00:11:56,440
the ASM one handling routines remain non

280
00:11:54,490 --> 00:11:58,990
opaque simply because it was too big a

281
00:11:56,440 --> 00:12:01,120
chunk of code to to tackle and adding

282
00:11:58,990 --> 00:12:02,920
more documentation and approving the

283
00:12:01,120 --> 00:12:04,660
testing we should be able to get to the

284
00:12:02,920 --> 00:12:07,930
state where we make different mistakes

285
00:12:04,660 --> 00:12:09,579
in the future so you know the definition

286
00:12:07,930 --> 00:12:10,900
of stupidity keep doing the same thing

287
00:12:09,580 --> 00:12:12,670
expecting a different result

288
00:12:10,900 --> 00:12:16,480
but we want a different result we want

289
00:12:12,670 --> 00:12:18,910
less pain in the user base of OpenSSL

290
00:12:16,480 --> 00:12:21,090
so we're trying to tackle things in a

291
00:12:18,910 --> 00:12:23,829
slightly different manner going forward

292
00:12:21,090 --> 00:12:25,900
so the other thing that we did is is we

293
00:12:23,830 --> 00:12:28,060
didn't go and take a silly approach of

294
00:12:25,900 --> 00:12:29,530
looking okay I've got the structure it's

295
00:12:28,060 --> 00:12:30,910
got twelve fields I need to put an

296
00:12:29,530 --> 00:12:33,730
accessor function in for all twelve

297
00:12:30,910 --> 00:12:35,500
fields we actually made a value judgment

298
00:12:33,730 --> 00:12:37,360
on what they thought made sense for

299
00:12:35,500 --> 00:12:39,030
people to access we didn't want to

300
00:12:37,360 --> 00:12:41,680
provide complete access to everything

301
00:12:39,030 --> 00:12:43,930
because our plans were to change the

302
00:12:41,680 --> 00:12:45,130
internal structure so if the internal

303
00:12:43,930 --> 00:12:47,170
structures are changing and we've

304
00:12:45,130 --> 00:12:49,749
created an accessor for every field

305
00:12:47,170 --> 00:12:51,519
we haven't solved any problem so turn

306
00:12:49,749 --> 00:12:52,389
around and basic said this is a subset

307
00:12:51,519 --> 00:12:54,759
of what we think makes sense

308
00:12:52,389 --> 00:12:57,279
conceptually independent of the

309
00:12:54,759 --> 00:12:59,230
implementation which meant we knew we

310
00:12:57,279 --> 00:13:00,639
were leaving gaps we knew that we're

311
00:12:59,230 --> 00:13:02,619
going to see some people say hey I'm

312
00:13:00,639 --> 00:13:05,109
using that field I need that field but

313
00:13:02,619 --> 00:13:07,389
we made a conscious choice to do less

314
00:13:05,109 --> 00:13:09,069
than everything up front to get the

315
00:13:07,389 --> 00:13:10,869
feedback from the vendor community and

316
00:13:09,069 --> 00:13:19,149
this is the pain and the transition of

317
00:13:10,869 --> 00:13:22,540
going through one one okay not not all

318
00:13:19,149 --> 00:13:26,259
OpenSSL users use the api's at the same

319
00:13:22,540 --> 00:13:28,839
level we have low-level api is where you

320
00:13:26,259 --> 00:13:30,309
just call the raw crypto function and do

321
00:13:28,839 --> 00:13:33,369
all the rest of the management yourself

322
00:13:30,309 --> 00:13:35,439
we have higher lever level api's where a

323
00:13:33,369 --> 00:13:37,269
lot of that's taken away in it it sort

324
00:13:35,439 --> 00:13:41,679
of it's a black box that does this piece

325
00:13:37,269 --> 00:13:44,499
of crypto some capabilities are only

326
00:13:41,679 --> 00:13:46,299
available at the higher level API some

327
00:13:44,499 --> 00:13:49,029
around the eye level available at the

328
00:13:46,299 --> 00:13:53,079
low level API so there's a real mix and

329
00:13:49,029 --> 00:13:54,669
match of of where things are done and

330
00:13:53,079 --> 00:13:56,888
how they can be done sometimes you can

331
00:13:54,669 --> 00:14:01,839
do it low sometimes you have to do it

332
00:13:56,889 --> 00:14:09,220
with the low-level API so you know we

333
00:14:01,839 --> 00:14:12,149
have a mess in in the api's okay so how

334
00:14:09,220 --> 00:14:15,429
are we addressing that we're changing to

335
00:14:12,149 --> 00:14:18,220
only using higher-level api's that the

336
00:14:15,429 --> 00:14:20,829
low-level api is over time will

337
00:14:18,220 --> 00:14:23,860
disappear the higher-level api's will

338
00:14:20,829 --> 00:14:27,790
gain the functionality they need to do

339
00:14:23,860 --> 00:14:29,139
what what the low levels did before the

340
00:14:27,790 --> 00:14:30,579
higher-level api's will have a

341
00:14:29,139 --> 00:14:32,559
consistent error handling because

342
00:14:30,579 --> 00:14:35,349
they're new we can we can define this

343
00:14:32,559 --> 00:14:38,230
some other low-level api's return a void

344
00:14:35,350 --> 00:14:42,999
you don't know if it worked or not it

345
00:14:38,230 --> 00:14:44,249
just rang so yeah consistent error

346
00:14:42,999 --> 00:14:47,259
handling

347
00:14:44,249 --> 00:14:51,369
likewise consists of consistent use of

348
00:14:47,259 --> 00:14:53,589
our memory allocation the thing that I

349
00:14:51,369 --> 00:14:55,269
allocates the lump of memory is going to

350
00:14:53,589 --> 00:14:58,769
be the thing that that frees it it's not

351
00:14:55,269 --> 00:15:03,459
going to be deferred somewhere else and

352
00:14:58,769 --> 00:15:05,529
the last one checking error returns it's

353
00:15:03,459 --> 00:15:13,449
a surprising number of cases where that

354
00:15:05,529 --> 00:15:15,759
doesn't happen okay to do this there's a

355
00:15:13,449 --> 00:15:19,508
number of challenges open SSL has a lot

356
00:15:15,759 --> 00:15:22,929
of old code it supports a lot of old

357
00:15:19,509 --> 00:15:28,779
platforms it supports more platforms

358
00:15:22,929 --> 00:15:31,720
than we really know about you know does

359
00:15:28,779 --> 00:15:34,959
anybody use pa-risc any so Affairs yeah

360
00:15:31,720 --> 00:15:38,769
I knew there'd be one there always is

361
00:15:34,959 --> 00:15:40,768
okay that was pa-risc was a stock

362
00:15:38,769 --> 00:15:44,889
manufacturers support what 20 years ago

363
00:15:40,769 --> 00:15:46,110
and it's still an open SSL it's still

364
00:15:44,889 --> 00:15:49,239
there

365
00:15:46,110 --> 00:15:53,439
we want to we want to be able to get rid

366
00:15:49,239 --> 00:15:55,809
of all of this old code but we can't get

367
00:15:53,439 --> 00:15:58,629
rid of it because people still use it so

368
00:15:55,809 --> 00:16:00,899
we were in a sort of a bit of a quandary

369
00:15:58,629 --> 00:16:00,899
there

370
00:16:05,880 --> 00:16:11,250
okay we hit the same problem for

371
00:16:09,509 --> 00:16:13,920
platforms that we do for architectures

372
00:16:11,250 --> 00:16:17,480
at least in this case we have got a

373
00:16:13,920 --> 00:16:20,790
policy we have we have a multi-tiered

374
00:16:17,480 --> 00:16:23,550
list the primary tier is the machines

375
00:16:20,790 --> 00:16:27,329
people who work on open SSL use

376
00:16:23,550 --> 00:16:29,130
personally typically Linux if there's a

377
00:16:27,329 --> 00:16:34,529
breakage in that it will be discovered

378
00:16:29,130 --> 00:16:35,939
within minutes the secondary is the

379
00:16:34,529 --> 00:16:40,860
platforms especially officially

380
00:16:35,940 --> 00:16:42,779
supported by the open SSL team that's

381
00:16:40,860 --> 00:16:50,220
quite a larger list it includes windows

382
00:16:42,779 --> 00:16:53,180
it includes AIX it includes hp-ux VMs so

383
00:16:50,220 --> 00:16:56,819
it's quite a quite a quite a wide list

384
00:16:53,180 --> 00:16:58,439
the expectation there is if there's a

385
00:16:56,819 --> 00:17:00,420
problem introduced into that tree it

386
00:16:58,440 --> 00:17:02,759
will be found you know within a few days

387
00:17:00,420 --> 00:17:06,569
to a week and certainly would be found

388
00:17:02,759 --> 00:17:08,760
before a release the next teardown is

389
00:17:06,569 --> 00:17:12,030
community platforms which is other

390
00:17:08,760 --> 00:17:13,919
people's have weird machines and they'll

391
00:17:12,030 --> 00:17:15,990
file bug reports you know we do try to

392
00:17:13,919 --> 00:17:17,939
fix them but again there are lower

393
00:17:15,990 --> 00:17:18,679
priority thing because testing them is

394
00:17:17,939 --> 00:17:21,750
really hard

395
00:17:18,679 --> 00:17:23,880
and finally the largest group but the

396
00:17:21,750 --> 00:17:25,559
ones we don't know about there was

397
00:17:23,880 --> 00:17:30,240
definitely more machines we don't know

398
00:17:25,559 --> 00:17:37,320
about than we do which is yeah makes

399
00:17:30,240 --> 00:17:39,000
something is pretty difficult so as Paul

400
00:17:37,320 --> 00:17:40,860
mentioned the the largest group of

401
00:17:39,000 --> 00:17:42,450
platforms is the unknowns and it's not

402
00:17:40,860 --> 00:17:44,699
that we don't know that it doesn't work

403
00:17:42,450 --> 00:17:46,559
it's that we don't have anybody that's

404
00:17:44,700 --> 00:17:48,120
willing to turn around and say if a

405
00:17:46,559 --> 00:17:51,360
problem comes up I can help you work

406
00:17:48,120 --> 00:17:53,010
through the issue so we're being a lot

407
00:17:51,360 --> 00:17:55,229
more transparent about the things we

408
00:17:53,010 --> 00:17:57,059
know this as the things we don't know so

409
00:17:55,230 --> 00:17:58,799
people can make their own value judgment

410
00:17:57,059 --> 00:18:00,690
and we found that if we tell somebody

411
00:17:58,799 --> 00:18:02,280
hey you're in the unknown category

412
00:18:00,690 --> 00:18:04,740
occasionally a vendor will come along

413
00:18:02,280 --> 00:18:06,510
and say how do we turn around and get us

414
00:18:04,740 --> 00:18:08,039
into the supported list and they

415
00:18:06,510 --> 00:18:09,510
generally involves you know provide us

416
00:18:08,039 --> 00:18:11,520
an environment which we can add into our

417
00:18:09,510 --> 00:18:12,900
testing so if we could test it will

418
00:18:11,520 --> 00:18:14,760
detect it we'll be able to have access

419
00:18:12,900 --> 00:18:16,409
to the platform we'll be able to fix it

420
00:18:14,760 --> 00:18:18,629
but if we don't have access to the

421
00:18:16,409 --> 00:18:19,620
platform we simply don't know how it's

422
00:18:18,630 --> 00:18:23,010
going to turn

423
00:18:19,620 --> 00:18:25,739
so one of the things that we've we've

424
00:18:23,010 --> 00:18:28,500
noticed when we sat down and analyzed

425
00:18:25,740 --> 00:18:30,630
the entire code base is the biggest

426
00:18:28,500 --> 00:18:33,900
problem that we actually have is how do

427
00:18:30,630 --> 00:18:35,880
we go from I'd like to perform this

428
00:18:33,900 --> 00:18:38,400
algorithm through to finding what its

429
00:18:35,880 --> 00:18:39,780
implementation it is and we turn around

430
00:18:38,400 --> 00:18:41,670
and analyze through the code base to

431
00:18:39,780 --> 00:18:44,190
have a look at the number of different

432
00:18:41,670 --> 00:18:46,170
ways we do it now the answer is actually

433
00:18:44,190 --> 00:18:48,050
eight there are eight different ways in

434
00:18:46,170 --> 00:18:54,030
which we can perform algorithm selection

435
00:18:48,050 --> 00:18:55,200
which is probably six too many and we've

436
00:18:54,030 --> 00:18:56,730
we've turned around and how to look

437
00:18:55,200 --> 00:18:58,230
through that and looked at all of the

438
00:18:56,730 --> 00:19:00,660
different approaches of how we can

439
00:18:58,230 --> 00:19:03,810
switch code and one of the reasons is

440
00:19:00,660 --> 00:19:05,610
why we we focused on this because code

441
00:19:03,810 --> 00:19:07,440
switching and the ability to get to

442
00:19:05,610 --> 00:19:09,570
algorithm is pretty critical in the in

443
00:19:07,440 --> 00:19:11,520
the library itself and when we've got

444
00:19:09,570 --> 00:19:13,740
multiple ways of handling the same

445
00:19:11,520 --> 00:19:15,629
underlying concept it's an opportunity

446
00:19:13,740 --> 00:19:19,020
for us to introduce different behaviors

447
00:19:15,630 --> 00:19:23,130
different bugs different outcomes for

448
00:19:19,020 --> 00:19:25,050
the user so it's also the place where

449
00:19:23,130 --> 00:19:27,150
people want to be able to extend things

450
00:19:25,050 --> 00:19:29,970
I want to be able to turn around and say

451
00:19:27,150 --> 00:19:31,590
hey I'd like to add an algorithm so if

452
00:19:29,970 --> 00:19:33,920
you want to get yourself a series of

453
00:19:31,590 --> 00:19:36,720
pain try and add a new algorithm into

454
00:19:33,920 --> 00:19:38,850
OpenSSL you have to touch a whole pile

455
00:19:36,720 --> 00:19:41,730
of code and a whole pile of places it

456
00:19:38,850 --> 00:19:43,800
shouldn't be that hard but it is that

457
00:19:41,730 --> 00:19:46,470
hard simply because we never designed to

458
00:19:43,800 --> 00:19:49,050
make this easy and if you don't design

459
00:19:46,470 --> 00:19:50,610
to make something easy you'll get the

460
00:19:49,050 --> 00:19:53,250
outcome that we currently have

461
00:19:50,610 --> 00:19:54,889
so basically we're not operating as a

462
00:19:53,250 --> 00:19:57,090
framework we don't see ourselves

463
00:19:54,890 --> 00:19:58,770
previously as a cryptographic framework

464
00:19:57,090 --> 00:20:00,649
environment we saw selves as an

465
00:19:58,770 --> 00:20:03,629
implementation of a set of routines and

466
00:20:00,650 --> 00:20:04,980
extensibility wasn't an objective we

467
00:20:03,630 --> 00:20:05,880
also don't have the concept of dynamic

468
00:20:04,980 --> 00:20:08,190
discovery

469
00:20:05,880 --> 00:20:10,380
so when OpenSSL starts up it knows

470
00:20:08,190 --> 00:20:11,730
everything that exists there's no

471
00:20:10,380 --> 00:20:13,500
concept that somebody could plug some

472
00:20:11,730 --> 00:20:15,540
hardware in with additional capability

473
00:20:13,500 --> 00:20:19,470
the api's and the architecture just

474
00:20:15,540 --> 00:20:23,250
aren't designed to handle that so what

475
00:20:19,470 --> 00:20:25,500
do we do we've got all of this code that

476
00:20:23,250 --> 00:20:27,060
does similar things simple solution

477
00:20:25,500 --> 00:20:29,220
would be delete some of it you know get

478
00:20:27,060 --> 00:20:31,110
rid of the code if we delete it we have

479
00:20:29,220 --> 00:20:32,140
less code to maintain it must be more

480
00:20:31,110 --> 00:20:34,300
secure because there's less

481
00:20:32,140 --> 00:20:36,520
code and believe you me that's been a

482
00:20:34,300 --> 00:20:39,010
consistent argument within the the

483
00:20:36,520 --> 00:20:42,010
actual community itself I personally

484
00:20:39,010 --> 00:20:44,170
don't use the VMS platform so why are we

485
00:20:42,010 --> 00:20:45,970
carrying around VMs code let's get rid

486
00:20:44,170 --> 00:20:47,890
of it I'll feel safer and the

487
00:20:45,970 --> 00:20:50,710
counter-argument is well you're not

488
00:20:47,890 --> 00:20:52,270
using VMs so if there's bugs in the VMS

489
00:20:50,710 --> 00:20:54,220
code you don't really care anyway

490
00:20:52,270 --> 00:20:56,020
some other people are and when you've

491
00:20:54,220 --> 00:20:58,270
got a community that's got such diverse

492
00:20:56,020 --> 00:21:00,490
interests and diverse requirements it's

493
00:20:58,270 --> 00:21:03,160
really hard to actually make the

494
00:21:00,490 --> 00:21:04,810
decision to drop something so what we

495
00:21:03,160 --> 00:21:06,430
turned around and looked at is maybe we

496
00:21:04,810 --> 00:21:07,840
could push some of the unusual code out

497
00:21:06,430 --> 00:21:10,840
of the repository get somebody else to

498
00:21:07,840 --> 00:21:12,310
maintain it is it feasible to do that

499
00:21:10,840 --> 00:21:14,050
and when we figured out that if you push

500
00:21:12,310 --> 00:21:16,540
code out of the repository because of

501
00:21:14,050 --> 00:21:18,399
OpenSSL internal structures you still

502
00:21:16,540 --> 00:21:20,830
need to leave knowledge of that codes

503
00:21:18,400 --> 00:21:22,480
existence behind for things to work and

504
00:21:20,830 --> 00:21:24,100
that's not a particularly good

505
00:21:22,480 --> 00:21:25,630
environment and then we turned around

506
00:21:24,100 --> 00:21:27,969
and had a look at how we'd handled fit

507
00:21:25,630 --> 00:21:29,200
and how we handled engines and we turned

508
00:21:27,970 --> 00:21:34,470
around and had a look at those I thought

509
00:21:29,200 --> 00:21:40,570
hmm maybe we can do a better job okay

510
00:21:34,470 --> 00:21:44,110
FIPS 140 brings fear into the heart of

511
00:21:40,570 --> 00:21:48,700
parts of programs if you don't know it's

512
00:21:44,110 --> 00:21:51,370
a standard of well over 10,000 pages who

513
00:21:48,700 --> 00:21:52,150
have documentation it's not internally

514
00:21:51,370 --> 00:21:54,340
consistent

515
00:21:52,150 --> 00:21:56,170
there's arbitrary rulings that just go

516
00:21:54,340 --> 00:21:58,179
why did they do that that doesn't make

517
00:21:56,170 --> 00:22:05,950
sense and you're expected to follow a

518
00:21:58,180 --> 00:22:09,400
little it's fun in the old OpenSSL so

519
00:22:05,950 --> 00:22:12,430
1.0 it had two ways of linking the FIPS

520
00:22:09,400 --> 00:22:14,890
module this is the static way so it

521
00:22:12,430 --> 00:22:19,150
built a Phipps canister which is then

522
00:22:14,890 --> 00:22:22,720
linked into the application and it's all

523
00:22:19,150 --> 00:22:24,640
sort of one one blob the shared dot

524
00:22:22,720 --> 00:22:27,490
library way you still built the fever's

525
00:22:24,640 --> 00:22:31,030
canister but you linked it into a shared

526
00:22:27,490 --> 00:22:33,280
Lib crypto which the applicate Wiltjer

527
00:22:31,030 --> 00:22:36,619
multiple applications could could then

528
00:22:33,280 --> 00:22:39,239
share because it's a shared library

529
00:22:36,619 --> 00:22:41,668
that the current project is not

530
00:22:39,239 --> 00:22:43,649
following either of these paths we're

531
00:22:41,669 --> 00:22:45,059
still using the shared libraries because

532
00:22:43,649 --> 00:22:47,518
because it's the more common commonly

533
00:22:45,059 --> 00:22:49,949
used version we're having a separate

534
00:22:47,519 --> 00:22:52,349
shared library that is the FIPS module

535
00:22:49,949 --> 00:22:54,479
and then lib crypto we'll load it and

536
00:22:52,349 --> 00:22:56,899
then that application will load live

537
00:22:54,479 --> 00:22:56,899
Krypton

538
00:22:58,879 --> 00:23:10,049
now still in version one that I Phipps

539
00:23:04,379 --> 00:23:12,748
was invasive but there's almost 200

540
00:23:10,049 --> 00:23:15,329
hooks this isn't the FIPS model this is

541
00:23:12,749 --> 00:23:18,059
the mainline OpenSSL source code these

542
00:23:15,329 --> 00:23:22,639
are the changes that were necessary to

543
00:23:18,059 --> 00:23:25,469
work with the old form so it's 200 hooks

544
00:23:22,639 --> 00:23:27,329
almost 700 symbols they've had to rename

545
00:23:25,469 --> 00:23:31,289
symbols so you didn't get the symbol

546
00:23:27,329 --> 00:23:35,999
name clashes have to change function

547
00:23:31,289 --> 00:23:37,709
names anyway and the the whole Phipps

548
00:23:35,999 --> 00:23:39,389
canister had to be self-contained so you

549
00:23:37,709 --> 00:23:42,269
ended up with lots of duplicate code

550
00:23:39,389 --> 00:23:44,539
where our Phipps needs to do this let's

551
00:23:42,269 --> 00:23:49,440
pull that into the canister etc etc

552
00:23:44,539 --> 00:23:54,739
basically a horrible to have to maintain

553
00:23:49,440 --> 00:23:57,929
a mess I think that sums it up now

554
00:23:54,739 --> 00:24:01,229
beyond the library open SSL ships with

555
00:23:57,929 --> 00:24:03,079
some applications they needed to change

556
00:24:01,229 --> 00:24:05,639
as well

557
00:24:03,079 --> 00:24:07,319
the main application check in an

558
00:24:05,639 --> 00:24:09,119
environment variable to say yeah my own

559
00:24:07,319 --> 00:24:13,408
FIPS mode that's perfectly reasonable

560
00:24:09,119 --> 00:24:16,009
I'm happy with that change a pkcs12 app

561
00:24:13,409 --> 00:24:21,049
needing to change because of Phipps

562
00:24:16,009 --> 00:24:24,629
that's just ships doesn't do pkcs12

563
00:24:21,049 --> 00:24:28,289
and if you especially note the old time

564
00:24:24,629 --> 00:24:34,439
the old cipher it was using nice export

565
00:24:28,289 --> 00:24:36,449
quality RC to everybody's favorite so

566
00:24:34,440 --> 00:24:39,269
and all the low-level crypto routines

567
00:24:36,449 --> 00:24:40,799
they needed to be patched because you

568
00:24:39,269 --> 00:24:44,789
could still call the low-level routines

569
00:24:40,799 --> 00:24:46,859
they had to either but they just had to

570
00:24:44,789 --> 00:24:48,290
return an error basically but every

571
00:24:46,859 --> 00:24:51,179
single one had to compare

572
00:24:48,290 --> 00:24:53,220
even the EVP retains which is there a

573
00:24:51,180 --> 00:25:05,280
nice interface had to be patched to

574
00:24:53,220 --> 00:25:08,970
support Phipps it was also in the in the

575
00:25:05,280 --> 00:25:11,510
library different components again panel

576
00:25:08,970 --> 00:25:14,640
why do you need Fitz changes impairment

577
00:25:11,510 --> 00:25:19,470
why do you need Fitz changes and pkcs12

578
00:25:14,640 --> 00:25:20,670
it's just doesn't go there the R and I

579
00:25:19,470 --> 00:25:24,990
can understand Phipps does talk about

580
00:25:20,670 --> 00:25:28,140
random number generators so these

581
00:25:24,990 --> 00:25:31,590
changes are just huge and unwise spread

582
00:25:28,140 --> 00:25:33,330
and Tim will actually runs through some

583
00:25:31,590 --> 00:25:35,699
code just to show you how enjoyable it

584
00:25:33,330 --> 00:25:37,169
is so yeah there's meant to be a

585
00:25:35,700 --> 00:25:39,420
technical presentation which obligates

586
00:25:37,170 --> 00:25:41,300
us to show code I believe that's a

587
00:25:39,420 --> 00:25:44,520
requirements the AUSA program committee

588
00:25:41,300 --> 00:25:47,100
so one of the things we did recently we

589
00:25:44,520 --> 00:25:49,710
actually got together as a as a group to

590
00:25:47,100 --> 00:25:51,689
wander through in essence the mistakes

591
00:25:49,710 --> 00:25:53,730
of the past that's what I like to refer

592
00:25:51,690 --> 00:25:55,620
to them is what did we do to get where

593
00:25:53,730 --> 00:25:57,900
we were and we turned around and had a

594
00:25:55,620 --> 00:26:00,209
look and we basically said how does all

595
00:25:57,900 --> 00:26:03,290
the FIPS code work and we wandered

596
00:26:00,210 --> 00:26:07,680
through and looked at every single place

597
00:26:03,290 --> 00:26:09,300
where we had to make code changes and we

598
00:26:07,680 --> 00:26:10,560
started the beginning saying hey how

599
00:26:09,300 --> 00:26:12,450
many people in the group think you know

600
00:26:10,560 --> 00:26:14,159
the FIPS code is invasive and people

601
00:26:12,450 --> 00:26:16,290
thought yeah it's ugly but it's not

602
00:26:14,160 --> 00:26:18,570
invasive but when we sat down and did

603
00:26:16,290 --> 00:26:21,149
the analysis nobody was happy with the

604
00:26:18,570 --> 00:26:23,159
approach that had been taken so when if

605
00:26:21,150 --> 00:26:25,050
you have a look at the current code base

606
00:26:23,160 --> 00:26:28,850
so if you look at the 1-1 code base and

607
00:26:25,050 --> 00:26:28,850
all of this codes gone

608
00:26:30,430 --> 00:26:39,430
okay back to the the other secret in the

609
00:26:36,970 --> 00:26:42,040
whole twice to keep buried the engines

610
00:26:39,430 --> 00:26:43,900
the engines are very good idea if I have

611
00:26:42,040 --> 00:26:46,240
a piece of hardware which I want to plug

612
00:26:43,900 --> 00:26:48,070
into my machine and have OpenSSL use

613
00:26:46,240 --> 00:26:49,810
that hardware for something the way to

614
00:26:48,070 --> 00:26:53,500
do with issues an engine that's what

615
00:26:49,810 --> 00:26:57,129
they were designed for again this

616
00:26:53,500 --> 00:26:59,020
requires the ability to dispatch because

617
00:26:57,130 --> 00:27:00,850
you've got a interceptor dispatched

618
00:26:59,020 --> 00:27:05,680
normally and and redirect it to an

619
00:27:00,850 --> 00:27:07,899
engine again it's not as invasive as the

620
00:27:05,680 --> 00:27:10,390
the Phipps changes there's a lot less

621
00:27:07,900 --> 00:27:13,120
often but they are in all sorts of

622
00:27:10,390 --> 00:27:15,510
places they shouldn't be if you look at

623
00:27:13,120 --> 00:27:19,239
the list of the engine interfaces there

624
00:27:15,510 --> 00:27:21,460
it's in the EVP peaking methods which is

625
00:27:19,240 --> 00:27:24,340
all the public key crypto but it's also

626
00:27:21,460 --> 00:27:27,810
in the low-level RSA methods so it's

627
00:27:24,340 --> 00:27:34,389
actually got two points of dispatch and

628
00:27:27,810 --> 00:27:35,889
they both actually are important and if

629
00:27:34,390 --> 00:27:38,560
we have a look at it you can see the

630
00:27:35,890 --> 00:27:40,480
code changes again they're in lots of

631
00:27:38,560 --> 00:27:42,610
different places they wander through

632
00:27:40,480 --> 00:27:45,280
lots of parts of the code now this code

633
00:27:42,610 --> 00:27:47,979
is still in the current master it's

634
00:27:45,280 --> 00:27:49,899
still in the 1:1 release and the the

635
00:27:47,980 --> 00:27:52,270
hooks are kind of all over the place and

636
00:27:49,900 --> 00:27:53,740
we think we should be able to sit down

637
00:27:52,270 --> 00:27:54,129
and figure out a different way of doing

638
00:27:53,740 --> 00:27:57,490
it

639
00:27:54,130 --> 00:28:01,750
we shouldn't have to mechanisms for

640
00:27:57,490 --> 00:28:03,820
handling the same issue yeah so what we

641
00:28:01,750 --> 00:28:07,060
had we have two mechanisms that are both

642
00:28:03,820 --> 00:28:09,040
attempting to dispatch in different ways

643
00:28:07,060 --> 00:28:12,070
the engine is sort of talking to

644
00:28:09,040 --> 00:28:13,240
hardware the FIPS is talking to you know

645
00:28:12,070 --> 00:28:15,070
talking to algorithms but also

646
00:28:13,240 --> 00:28:17,370
preventing you using algorithms you're

647
00:28:15,070 --> 00:28:19,899
not allowed to

648
00:28:17,370 --> 00:28:21,669
they're both dispatchers then they were

649
00:28:19,900 --> 00:28:24,880
both sort of just hacked into the code

650
00:28:21,670 --> 00:28:28,560
base in different ways and they interact

651
00:28:24,880 --> 00:28:28,560
and there is quite a mess there

652
00:28:29,480 --> 00:28:36,800
okay so the challenge we had was we

653
00:28:33,930 --> 00:28:40,830
needed to we need something different

654
00:28:36,800 --> 00:28:42,720
something that is extensible so if

655
00:28:40,830 --> 00:28:44,129
somebody has a new algorithm they can

656
00:28:42,720 --> 00:28:46,590
add it without touching the main code

657
00:28:44,130 --> 00:28:47,970
bus it has to be something that switches

658
00:28:46,590 --> 00:28:51,120
implementations because that's what

659
00:28:47,970 --> 00:28:53,790
we're replacing it really needs to be a

660
00:28:51,120 --> 00:28:55,860
superset of what the FIPS and engines

661
00:28:53,790 --> 00:29:08,360
can support so we can get rid of both of

662
00:28:55,860 --> 00:29:08,360
them yeah so the solutions yeah

663
00:29:12,110 --> 00:29:16,139
step one admit there's a problem okay

664
00:29:15,030 --> 00:29:17,280
yep step one admit there's a problem

665
00:29:16,140 --> 00:29:19,200
step 2

666
00:29:17,280 --> 00:29:22,770
try to find the problem we've admitted

667
00:29:19,200 --> 00:29:26,130
there's a problem now we've got to work

668
00:29:22,770 --> 00:29:28,950
out well we have to work out what we can

669
00:29:26,130 --> 00:29:32,820
do do about this we need something that

670
00:29:28,950 --> 00:29:35,570
replaces both FIPS an engine we need

671
00:29:32,820 --> 00:29:42,870
again the extensible the switchable

672
00:29:35,570 --> 00:29:45,000
superset so at this stage what we sat

673
00:29:42,870 --> 00:29:46,290
down and did is figure out and we've

674
00:29:45,000 --> 00:29:48,090
still got a whole pile of slides to go

675
00:29:46,290 --> 00:29:50,820
so we will speed up on some of the

676
00:29:48,090 --> 00:29:53,129
material here is we need to design a new

677
00:29:50,820 --> 00:29:54,809
selection mechanism so we've got to be

678
00:29:53,130 --> 00:29:56,450
able to do it and the approach we've

679
00:29:54,809 --> 00:29:59,160
done if you looked at the earlier slides

680
00:29:56,450 --> 00:30:00,980
there's what we affectionately referred

681
00:29:59,160 --> 00:30:03,840
to as pink nirvana

682
00:30:00,980 --> 00:30:06,360
one of the guys chose to draw the

683
00:30:03,840 --> 00:30:08,669
diagram in pink for no reason that I

684
00:30:06,360 --> 00:30:10,169
could found them but in essence we're

685
00:30:08,670 --> 00:30:12,929
going to reorganize everything so you

686
00:30:10,170 --> 00:30:14,700
see down on the bottom core section

687
00:30:12,929 --> 00:30:16,710
sitting in the middle and sitting on the

688
00:30:14,700 --> 00:30:18,570
right-hand side you can see a set of

689
00:30:16,710 --> 00:30:20,700
providers so in essence we're going to

690
00:30:18,570 --> 00:30:22,919
gather the implementations into

691
00:30:20,700 --> 00:30:24,150
providers and then change the mainline

692
00:30:22,920 --> 00:30:26,100
code to be able to find the

693
00:30:24,150 --> 00:30:29,280
implementations through a consistent

694
00:30:26,100 --> 00:30:31,290
mechanism and a consistent meme and the

695
00:30:29,280 --> 00:30:34,320
idea is we're going to do this without

696
00:30:31,290 --> 00:30:36,570
irritating our user base it should be as

697
00:30:34,320 --> 00:30:38,730
simple as when you get the 30.0

698
00:30:36,570 --> 00:30:40,230
distribution you take a code you type

699
00:30:38,730 --> 00:30:43,020
make you're done it's finished one

700
00:30:40,230 --> 00:30:45,000
recompile and nothing breaks

701
00:30:43,020 --> 00:30:47,550
yeah that's assuming you've made it up

702
00:30:45,000 --> 00:30:49,860
to the one:1 release so as long as

703
00:30:47,550 --> 00:30:52,139
you've made it to 1:1 the 1 1 2 3 0

704
00:30:49,860 --> 00:30:58,110
transition we're aiming for it to be

705
00:30:52,140 --> 00:31:00,360
painless and internally our switching

706
00:30:58,110 --> 00:31:02,939
logic is kind of a bit like this and

707
00:31:00,360 --> 00:31:05,969
that evolves over time as we're sitting

708
00:31:02,940 --> 00:31:09,240
at about five minutes to go I will do

709
00:31:05,970 --> 00:31:10,740
properties really quickly okay that the

710
00:31:09,240 --> 00:31:13,490
fundamental switching mechanism we're

711
00:31:10,740 --> 00:31:16,710
using are called properties they are

712
00:31:13,490 --> 00:31:20,300
human readable comma-separated ASCII

713
00:31:16,710 --> 00:31:22,500
streams they're designed to be simple

714
00:31:20,300 --> 00:31:23,820
flexible so they've got to be able to do

715
00:31:22,500 --> 00:31:24,900
everything we need and they have to be

716
00:31:23,820 --> 00:31:27,689
efficient because we're going to be

717
00:31:24,900 --> 00:31:30,270
doing a lot of this so a property

718
00:31:27,690 --> 00:31:33,660
definition is a comma separated list of

719
00:31:30,270 --> 00:31:34,350
name equals very appears names out case

720
00:31:33,660 --> 00:31:36,540
sensitive

721
00:31:34,350 --> 00:31:44,639
although we're going to set a guideline

722
00:31:36,540 --> 00:31:46,770
user lowercase so in the current live

723
00:31:44,640 --> 00:31:48,780
crypto all the algorithms will fall into

724
00:31:46,770 --> 00:31:50,700
one of two categories they will over

725
00:31:48,780 --> 00:31:52,230
either have a property default equals

726
00:31:50,700 --> 00:31:54,150
yes which means they're from the default

727
00:31:52,230 --> 00:31:57,090
provider or they will have a property

728
00:31:54,150 --> 00:31:59,490
legacy equals yes meaning it's an older

729
00:31:57,090 --> 00:32:02,250
weaker algorithm and this gives you the

730
00:31:59,490 --> 00:32:04,110
ability to just say I don't want any all

731
00:32:02,250 --> 00:32:07,290
the weaker algorithms by saying legacy

732
00:32:04,110 --> 00:32:11,389
was known and the fips fips provider

733
00:32:07,290 --> 00:32:13,740
will also have its own setting

734
00:32:11,390 --> 00:32:16,620
third-party developers are allowed to

735
00:32:13,740 --> 00:32:18,090
define their own properties the only

736
00:32:16,620 --> 00:32:21,389
thing is we've reserved all the names

737
00:32:18,090 --> 00:32:23,250
that don't have a dotting them so the

738
00:32:21,390 --> 00:32:26,940
third-party name must have a dot which

739
00:32:23,250 --> 00:32:28,980
gives you a it gives you a a naming

740
00:32:26,940 --> 00:32:31,770
hierarchy essentially so you could say

741
00:32:28,980 --> 00:32:36,120
int L dot blah and that's an Intel

742
00:32:31,770 --> 00:32:37,860
property couple of examples the top one

743
00:32:36,120 --> 00:32:41,610
saying I want Phipps I want whatever

744
00:32:37,860 --> 00:32:43,050
that XE x86 dot optimized is the second

745
00:32:41,610 --> 00:32:45,540
line is actually saying the same thing

746
00:32:43,050 --> 00:32:47,460
because if you leave out the equals yes

747
00:32:45,540 --> 00:32:49,110
and just have a name the equals that yes

748
00:32:47,460 --> 00:32:53,470
is assumed so we've got a shortcut for

749
00:32:49,110 --> 00:32:55,908
saying I wanted no shortcut for saying

750
00:32:53,470 --> 00:32:59,960
queries against rings

751
00:32:55,909 --> 00:33:02,059
comma-separated they are either equality

752
00:32:59,960 --> 00:33:03,409
or inequality tests and they can have a

753
00:33:02,059 --> 00:33:07,158
leading question mark which means

754
00:33:03,409 --> 00:33:10,840
optional or preferable so again some

755
00:33:07,159 --> 00:33:13,789
queries there's an optional there we'll

756
00:33:10,840 --> 00:33:16,730
skip over there I've got some railroad

757
00:33:13,789 --> 00:33:18,679
diagrams at the syntax which I probably

758
00:33:16,730 --> 00:33:20,450
don't have time to talk to so we'll just

759
00:33:18,679 --> 00:33:22,270
skip through them they'll they'll be in

760
00:33:20,450 --> 00:33:26,539
the UM the minutes when we're done

761
00:33:22,270 --> 00:33:28,370
changes fall so we've got a whole pile

762
00:33:26,539 --> 00:33:30,860
of changes have already gone into three

763
00:33:28,370 --> 00:33:32,629
zero three zero is not something that's

764
00:33:30,860 --> 00:33:34,428
you know we're talking about doing

765
00:33:32,630 --> 00:33:35,690
something maybe in the future we're

766
00:33:34,429 --> 00:33:37,460
actually about probably about halfway

767
00:33:35,690 --> 00:33:40,580
through the the engineering work

768
00:33:37,460 --> 00:33:44,090
involved in the release itself so this

769
00:33:40,580 --> 00:33:46,520
is just a pretty simple straightforward

770
00:33:44,090 --> 00:33:49,250
summary out of what's sitting in the the

771
00:33:46,520 --> 00:33:53,149
changes file as it currently sits we've

772
00:33:49,250 --> 00:33:55,010
added a new API for max so you know see

773
00:33:53,149 --> 00:33:56,899
make G mark and H mark were all driven

774
00:33:55,010 --> 00:33:59,929
differently so we've now got a new API

775
00:33:56,899 --> 00:34:02,239
for it and it kind of looks like this so

776
00:33:59,929 --> 00:34:03,919
this is us driving C Mac if we flip

777
00:34:02,240 --> 00:34:07,190
through to what H Mac looks like you

778
00:34:03,919 --> 00:34:09,349
notice basically two lines changed so

779
00:34:07,190 --> 00:34:11,540
c-max got a cipher underneath it H max

780
00:34:09,349 --> 00:34:13,040
got a digest but the users main line

781
00:34:11,540 --> 00:34:15,739
code remains the same that's not

782
00:34:13,040 --> 00:34:17,599
currently true in the 1-1 codebase but

783
00:34:15,739 --> 00:34:21,138
four three zero you've got a much nicer

784
00:34:17,599 --> 00:34:24,109
API same things for KDF there wasn't a

785
00:34:21,139 --> 00:34:26,540
key derivation function API so H KDF

786
00:34:24,109 --> 00:34:28,790
pbkdf2 s crip TLS PRF they're all

787
00:34:26,540 --> 00:34:31,070
handled differently well now they all

788
00:34:28,790 --> 00:34:32,570
pretty much look the same the parameters

789
00:34:31,070 --> 00:34:34,399
may be different they go into setting up

790
00:34:32,570 --> 00:34:38,720
the functions but the way you drive it

791
00:34:34,399 --> 00:34:42,080
is equivalent okay here just to show

792
00:34:38,719 --> 00:34:43,668
we've got some activity it's really pull

793
00:34:42,080 --> 00:34:46,659
requests are basically revolving around

794
00:34:43,668 --> 00:34:50,330
this project all the red ones are the

795
00:34:46,659 --> 00:34:53,540
react attempting redesign work so we've

796
00:34:50,330 --> 00:34:57,380
got I think quite a lot of them most of

797
00:34:53,540 --> 00:35:02,060
them not red ones afips work so

798
00:34:57,380 --> 00:35:04,730
okay so we're reacting we're getting wet

799
00:35:02,060 --> 00:35:07,250
with the anticipated benefits are that

800
00:35:04,730 --> 00:35:09,560
you know we'll be able to pull crypto in

801
00:35:07,250 --> 00:35:10,850
from anywhere people can write their own

802
00:35:09,560 --> 00:35:13,759
crypto and we can use it just

803
00:35:10,850 --> 00:35:15,500
transparently internally we own it we

804
00:35:13,760 --> 00:35:16,550
will only have one switching mechanism

805
00:35:15,500 --> 00:35:19,550
so it'll be cleaner and more

806
00:35:16,550 --> 00:35:22,280
maintainable national algorithms like

807
00:35:19,550 --> 00:35:24,170
the Russian Gauss suite or the Chinese

808
00:35:22,280 --> 00:35:26,840
they seem sweet they can do their own

809
00:35:24,170 --> 00:35:31,700
provider and just plug it in so it gives

810
00:35:26,840 --> 00:35:36,410
us that yeah and in the future pkcs 11

811
00:35:31,700 --> 00:35:38,660
is on the kurds target dates intending

812
00:35:36,410 --> 00:35:42,410
to be code complete by the end of this

813
00:35:38,660 --> 00:35:45,440
year release early to mid next year and

814
00:35:42,410 --> 00:35:47,299
the key thing is most applications will

815
00:35:45,440 --> 00:35:54,040
not have to change a line of code to get

816
00:35:47,300 --> 00:35:54,040
the benefits questions if we've got time

817
00:36:03,420 --> 00:36:08,530
so with the third-party providers that

818
00:36:06,700 --> 00:36:10,540
you mentioned for example the Chinese

819
00:36:08,530 --> 00:36:13,960
version of encryption would there be

820
00:36:10,540 --> 00:36:16,330
opaque as well they can do whatever they

821
00:36:13,960 --> 00:36:18,520
like inside so it's not the code

822
00:36:16,330 --> 00:36:22,720
wouldn't be visible in India open SSL

823
00:36:18,520 --> 00:36:24,220
would it in terms of what would you make

824
00:36:22,720 --> 00:36:28,359
it opaque or it's just totally

825
00:36:24,220 --> 00:36:30,069
transparent so every third-party

826
00:36:28,360 --> 00:36:31,510
implementer of a provider will be able

827
00:36:30,070 --> 00:36:33,430
to make the choice as to whether or not

828
00:36:31,510 --> 00:36:35,920
they publish their code so we're

829
00:36:33,430 --> 00:36:37,930
providing effectively an ABI into the

830
00:36:35,920 --> 00:36:39,610
providers which will enable third

831
00:36:37,930 --> 00:36:42,490
parties to other and open-source

832
00:36:39,610 --> 00:36:44,890
component Ori or not we're not making a

833
00:36:42,490 --> 00:36:46,479
policy decision on that ourselves but of

834
00:36:44,890 --> 00:36:50,370
course everything that open ssl ships

835
00:36:46,480 --> 00:36:50,370
with is always an open source forum

836
00:36:53,820 --> 00:36:57,940
all right guys we'll end up there if you

837
00:36:55,870 --> 00:36:58,819
can get the mail a big thank you

838
00:36:57,940 --> 00:37:03,189
applause

839
00:36:58,820 --> 00:37:03,189
[Applause]

