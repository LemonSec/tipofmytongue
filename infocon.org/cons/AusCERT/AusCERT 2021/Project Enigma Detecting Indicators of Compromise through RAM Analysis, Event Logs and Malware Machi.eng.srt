1
00:00:18,720 --> 00:00:20,160
just in case anybody's wondering we've

2
00:00:20,160 --> 00:00:21,760
just got a few technical issues with um

3
00:00:21,760 --> 00:00:23,920
the next speaker so we'll be um going

4
00:00:23,920 --> 00:00:25,039
live in a couple of minutes when we've

5
00:00:25,039 --> 00:00:28,359
got that sorted

6
00:00:50,800 --> 00:00:52,640
good afternoon everybody and uh welcome

7
00:00:52,640 --> 00:00:56,000
to the first afternoon at ulcer 2021

8
00:00:56,000 --> 00:00:58,160
i've been remiss in the past um so i

9
00:00:58,160 --> 00:00:59,840
better introduce myself as opposed to

10
00:00:59,840 --> 00:01:01,600
that guy in the pants my name is

11
00:01:01,600 --> 00:01:03,600
valdemar jacobson and i work for a small

12
00:01:03,600 --> 00:01:04,959
consultancy in brisbane called brook

13
00:01:04,959 --> 00:01:06,000
security

14
00:01:06,000 --> 00:01:08,080
so for our first highly technical

15
00:01:08,080 --> 00:01:10,640
session in this stream this year we've

16
00:01:10,640 --> 00:01:13,280
got um dr weihangol kevin tan and

17
00:01:13,280 --> 00:01:14,960
patrick kang

18
00:01:14,960 --> 00:01:16,560
from project enigma talking about

19
00:01:16,560 --> 00:01:18,000
detecting indicators of compromise

20
00:01:18,000 --> 00:01:20,320
through ram analysis event logs and

21
00:01:20,320 --> 00:01:22,159
malware machine learning

22
00:01:22,159 --> 00:01:24,000
and this is our first stream in this

23
00:01:24,000 --> 00:01:25,040
session

24
00:01:25,040 --> 00:01:26,960
that's completely virtual and we've got

25
00:01:26,960 --> 00:01:28,159
three different speakers on three

26
00:01:28,159 --> 00:01:30,400
different virtual streams so hopefully

27
00:01:30,400 --> 00:01:31,840
everybody remotely and locally can

28
00:01:31,840 --> 00:01:35,280
welcome the next speaker

29
00:01:39,280 --> 00:01:42,159
hi good day to everybody

30
00:01:42,159 --> 00:01:43,920
hi my name is kevin

31
00:01:43,920 --> 00:01:45,600
and today i'll be presenting to you

32
00:01:45,600 --> 00:01:47,200
project anima

33
00:01:47,200 --> 00:01:49,040
an innovation that the team has been

34
00:01:49,040 --> 00:01:50,320
working on

35
00:01:50,320 --> 00:01:52,960
to streamlining and automating some dfir

36
00:01:52,960 --> 00:01:55,680
processor

37
00:01:55,680 --> 00:01:58,719
oh sorry i think i'm hearing double

38
00:01:58,719 --> 00:02:01,719
sound

39
00:02:08,560 --> 00:02:10,720
okay nevermind um

40
00:02:10,720 --> 00:02:12,239
so okay so this presentation will

41
00:02:12,239 --> 00:02:15,120
actually cover the technical aspects of

42
00:02:15,120 --> 00:02:16,239
the tool

43
00:02:16,239 --> 00:02:18,080
as well as a demonstration on how the

44
00:02:18,080 --> 00:02:19,520
usage

45
00:02:19,520 --> 00:02:21,520
is being conducted

46
00:02:21,520 --> 00:02:22,640
okay so

47
00:02:22,640 --> 00:02:25,359
next slide please

48
00:02:26,640 --> 00:02:28,720
so just a brief

49
00:02:28,720 --> 00:02:32,000
in introduction of the presenting team

50
00:02:32,000 --> 00:02:33,680
the first member of the team

51
00:02:33,680 --> 00:02:35,200
which is myself

52
00:02:35,200 --> 00:02:37,360
i'm a second year student

53
00:02:37,360 --> 00:02:39,680
in singapore institute of technology

54
00:02:39,680 --> 00:02:42,800
majoring in information security

55
00:02:42,800 --> 00:02:45,200
secondly we have patrick khan

56
00:02:45,200 --> 00:02:47,200
who is also a second year student

57
00:02:47,200 --> 00:02:49,599
in singapore institute of technology

58
00:02:49,599 --> 00:02:53,360
majoring in information security

59
00:02:53,360 --> 00:02:55,920
next we have assistant professor dr gol

60
00:02:55,920 --> 00:02:57,840
weihan who is also teaching in the

61
00:02:57,840 --> 00:03:00,640
faculty of infocomm technology

62
00:03:00,640 --> 00:03:04,599
everyone next slide

63
00:03:06,000 --> 00:03:08,239
okay uh so here's a brief outline of the

64
00:03:08,239 --> 00:03:10,239
presentation where we will talk about

65
00:03:10,239 --> 00:03:12,879
some of the challenges in dfir

66
00:03:12,879 --> 00:03:15,200
brief landscaping of the ifr tools in

67
00:03:15,200 --> 00:03:16,800
the industry

68
00:03:16,800 --> 00:03:19,760
our integrated solution to this problem

69
00:03:19,760 --> 00:03:22,480
uh pro description and demonstration to

70
00:03:22,480 --> 00:03:25,200
the solution and the road ahead

71
00:03:25,200 --> 00:03:28,159
uh next slide please

72
00:03:28,720 --> 00:03:31,360
okay um so one of the reasons why this

73
00:03:31,360 --> 00:03:33,680
project was actually created is actually

74
00:03:33,680 --> 00:03:34,560
to

75
00:03:34,560 --> 00:03:37,360
uh target two distinct issues faced in

76
00:03:37,360 --> 00:03:39,280
the journal foreign

77
00:03:39,280 --> 00:03:41,200
so firstly we have actually a lack of

78
00:03:41,200 --> 00:03:43,519
integrated uh analysis solution where

79
00:03:43,519 --> 00:03:46,000
there was no automated software for ram

80
00:03:46,000 --> 00:03:47,200
analysis

81
00:03:47,200 --> 00:03:49,360
so even if the use of tools like

82
00:03:49,360 --> 00:03:52,080
volatility uh forensic analyst has to

83
00:03:52,080 --> 00:03:53,599
actually manually type in commands and

84
00:03:53,599 --> 00:03:54,879
actually check

85
00:03:54,879 --> 00:03:56,400
files that are actually being extracted

86
00:03:56,400 --> 00:03:59,040
from volatility manually

87
00:03:59,040 --> 00:04:01,200
so uh secondly there's actually a lag in

88
00:04:01,200 --> 00:04:04,159
data triage hardware so i like uh i like

89
00:04:04,159 --> 00:04:06,560
uh software uh sorry i like hardware

90
00:04:06,560 --> 00:04:08,799
duplicators uh for example duplicators

91
00:04:08,799 --> 00:04:11,280
necessary then she isn't a plug-and-play

92
00:04:11,280 --> 00:04:13,680
data triage hardware solution

93
00:04:13,680 --> 00:04:16,639
currently in the market and

94
00:04:16,639 --> 00:04:18,639
currently geofurizing analysts actually

95
00:04:18,639 --> 00:04:21,759
resorts to using software

96
00:04:21,759 --> 00:04:24,560
data trader solutions

97
00:04:24,560 --> 00:04:28,040
next slide please

98
00:04:28,560 --> 00:04:31,600
okay uh so uh in the dfir community uh

99
00:04:31,600 --> 00:04:33,440
there are actually many tools to serve

100
00:04:33,440 --> 00:04:35,919
their individual purpose very well uh so

101
00:04:35,919 --> 00:04:38,400
we have like volatility and uh

102
00:04:38,400 --> 00:04:41,759
individual tools out there to do certain

103
00:04:41,759 --> 00:04:44,080
tasks for dfir

104
00:04:44,080 --> 00:04:45,919
and each of these tools actually require

105
00:04:45,919 --> 00:04:48,000
a lot of manual work like such as typing

106
00:04:48,000 --> 00:04:50,400
in commands and knowing all the syntax

107
00:04:50,400 --> 00:04:52,160
for each and every com each and every

108
00:04:52,160 --> 00:04:53,360
two

109
00:04:53,360 --> 00:04:55,120
so

110
00:04:55,120 --> 00:04:57,280
in dfir uh some of this work is actually

111
00:04:57,280 --> 00:04:58,960
quite difficult to automate as you

112
00:04:58,960 --> 00:05:00,639
actually requires uh professionals to

113
00:05:00,639 --> 00:05:02,160
actually look at these results and

114
00:05:02,160 --> 00:05:04,240
actually interpret the data to make sure

115
00:05:04,240 --> 00:05:06,080
that uh

116
00:05:06,080 --> 00:05:08,400
the data is actually uh correct and what

117
00:05:08,400 --> 00:05:10,720
it actually makes sense already

118
00:05:10,720 --> 00:05:12,479
so uh here's actually how we come into

119
00:05:12,479 --> 00:05:14,880
the picture so uh we are actually aiming

120
00:05:14,880 --> 00:05:16,960
to provide uh automation for some

121
00:05:16,960 --> 00:05:19,600
processors within the dfir framework so

122
00:05:19,600 --> 00:05:21,280
that we can actually reduce the amount

123
00:05:21,280 --> 00:05:24,320
of manual labor needed

124
00:05:24,320 --> 00:05:27,039
next time please

125
00:05:28,400 --> 00:05:30,240
okay so our team actually has come up

126
00:05:30,240 --> 00:05:31,919
with a solution to actually provide

127
00:05:31,919 --> 00:05:34,240
automation of random analysis malware

128
00:05:34,240 --> 00:05:36,800
analysis and event loss correlation

129
00:05:36,800 --> 00:05:39,039
so this solution will actually consist

130
00:05:39,039 --> 00:05:41,280
of a combination

131
00:05:41,280 --> 00:05:43,919
of a hardware and a software which we

132
00:05:43,919 --> 00:05:46,639
will go in depth in the next few slides

133
00:05:46,639 --> 00:05:48,160
based on the current development of the

134
00:05:48,160 --> 00:05:49,600
project it's only

135
00:05:49,600 --> 00:05:51,759
windows supported at the moment

136
00:05:51,759 --> 00:05:53,199
and this solution can actually be

137
00:05:53,199 --> 00:05:54,720
installed on the host machine or

138
00:05:54,720 --> 00:05:56,000
actually can be placed in the thumb

139
00:05:56,000 --> 00:05:58,240
drive and can be used as a portable

140
00:05:58,240 --> 00:05:59,759
version

141
00:05:59,759 --> 00:06:02,560
next slide please

142
00:06:02,880 --> 00:06:05,120
okay so this is actually the general

143
00:06:05,120 --> 00:06:08,080
architecture of the whole solution

144
00:06:08,080 --> 00:06:10,400
we will use a scenario to describe the

145
00:06:10,400 --> 00:06:12,319
full flow of the solution

146
00:06:12,319 --> 00:06:15,039
so firstly the batch money will actually

147
00:06:15,039 --> 00:06:17,280
be used to collect data

148
00:06:17,280 --> 00:06:19,840
such as random and event logs from the

149
00:06:19,840 --> 00:06:22,160
compromised computer

150
00:06:22,160 --> 00:06:23,919
the forensic analysts will then collect

151
00:06:23,919 --> 00:06:25,680
the data and then pass it through our

152
00:06:25,680 --> 00:06:27,680
software solution

153
00:06:27,680 --> 00:06:29,120
the software will

154
00:06:29,120 --> 00:06:30,960
first execute

155
00:06:30,960 --> 00:06:34,560
automated volatility commands to dump

156
00:06:34,560 --> 00:06:37,840
off the random and extract relevant data

157
00:06:37,840 --> 00:06:39,680
from it

158
00:06:39,680 --> 00:06:40,800
after that

159
00:06:40,800 --> 00:06:42,479
the software will actually

160
00:06:42,479 --> 00:06:45,520
then use an inbuilt portable executable

161
00:06:45,520 --> 00:06:47,520
analyzer

162
00:06:47,520 --> 00:06:49,919
and to actually uh

163
00:06:49,919 --> 00:06:51,680
analyze the pe files that are actually

164
00:06:51,680 --> 00:06:53,759
found within the random

165
00:06:53,759 --> 00:06:57,199
and also to uh and also we have an event

166
00:06:57,199 --> 00:06:59,360
loss correlator module where we'll

167
00:06:59,360 --> 00:07:01,599
further analyze

168
00:07:01,599 --> 00:07:03,759
the event log file and actually

169
00:07:03,759 --> 00:07:07,520
correlate certain activities within the

170
00:07:07,520 --> 00:07:10,400
evtx file

171
00:07:10,800 --> 00:07:12,560
so after the whole analysis is actually

172
00:07:12,560 --> 00:07:13,759
completed

173
00:07:13,759 --> 00:07:15,840
the program will actually generate a

174
00:07:15,840 --> 00:07:18,000
report and

175
00:07:18,000 --> 00:07:20,240
it can be presented to the analyst

176
00:07:20,240 --> 00:07:21,280
itself

177
00:07:21,280 --> 00:07:24,720
so uh next slide please

178
00:07:24,720 --> 00:07:27,039
so i think some of you might ask like

179
00:07:27,039 --> 00:07:29,360
what is the batch money so a batch money

180
00:07:29,360 --> 00:07:31,360
is actually a linux computer built into

181
00:07:31,360 --> 00:07:32,960
a usb drive

182
00:07:32,960 --> 00:07:34,800
and to use it you have to arm it with

183
00:07:34,800 --> 00:07:38,160
script and you automatically execute

184
00:07:38,160 --> 00:07:39,759
the scripts when the flash bunny is

185
00:07:39,759 --> 00:07:42,080
actually plugged into the computer

186
00:07:42,080 --> 00:07:44,319
so the general use of the bash bunny is

187
00:07:44,319 --> 00:07:47,039
actually for retaining purposes however

188
00:07:47,039 --> 00:07:49,280
the team actually utilizes the pros of

189
00:07:49,280 --> 00:07:51,360
the cache funny and tweaked it to use

190
00:07:51,360 --> 00:07:54,080
for blue teaming purposes

191
00:07:54,080 --> 00:07:57,719
next slide please

192
00:07:58,000 --> 00:08:00,879
uh so to talk more on the hardware

193
00:08:00,879 --> 00:08:03,280
configurations uh we actually configured

194
00:08:03,280 --> 00:08:05,599
the batch money to perform uh two sets

195
00:08:05,599 --> 00:08:06,960
of instructions

196
00:08:06,960 --> 00:08:09,120
uh for the first switch uh we actually

197
00:08:09,120 --> 00:08:10,879
developed the powershell script to

198
00:08:10,879 --> 00:08:13,039
actually uh to extract security event

199
00:08:13,039 --> 00:08:13,919
locks

200
00:08:13,919 --> 00:08:16,800
from the computer utilizing robocopy at

201
00:08:16,800 --> 00:08:20,080
the back end to perform data extraction

202
00:08:20,080 --> 00:08:21,039
and

203
00:08:21,039 --> 00:08:23,280
also hashing of the files and

204
00:08:23,280 --> 00:08:25,599
to maintain the data integrity

205
00:08:25,599 --> 00:08:28,479
as as it goes along uh a lot will also

206
00:08:28,479 --> 00:08:30,720
be generated after the extraction is

207
00:08:30,720 --> 00:08:32,719
completed and

208
00:08:32,719 --> 00:08:35,599
for the purpose of audit trail

209
00:08:35,599 --> 00:08:37,120
for the second switch

210
00:08:37,120 --> 00:08:39,599
we use the powershell script to call

211
00:08:39,599 --> 00:08:42,159
upon an open source ram acquisition tool

212
00:08:42,159 --> 00:08:44,159
called dumpbit

213
00:08:44,159 --> 00:08:46,560
due to internal memory of the batch

214
00:08:46,560 --> 00:08:47,440
money

215
00:08:47,440 --> 00:08:49,360
the batch money only has

216
00:08:49,360 --> 00:08:52,480
eight gigabytes of

217
00:08:52,560 --> 00:08:54,720
internal storage uh it's not able to

218
00:08:54,720 --> 00:08:57,600
store ram data above four gigabytes uh

219
00:08:57,600 --> 00:08:59,839
ram down so we will actually use an

220
00:08:59,839 --> 00:09:01,120
external drive

221
00:09:01,120 --> 00:09:03,360
uh to complement this

222
00:09:03,360 --> 00:09:05,600
so uh

223
00:09:05,600 --> 00:09:07,360
the user will actually have to plug in

224
00:09:07,360 --> 00:09:09,040
an external hard disk and plug in the

225
00:09:09,040 --> 00:09:11,519
batch panel and you will perform a ram

226
00:09:11,519 --> 00:09:13,519
acquisition and the output will actually

227
00:09:13,519 --> 00:09:18,160
be placed into the external drive itself

228
00:09:18,240 --> 00:09:21,040
next slide please

229
00:09:21,040 --> 00:09:23,360
so uh to to picture the bash money in

230
00:09:23,360 --> 00:09:25,360
action i actually prepared a simple uh

231
00:09:25,360 --> 00:09:26,959
use case on how

232
00:09:26,959 --> 00:09:29,279
uh the batch running can

233
00:09:29,279 --> 00:09:31,760
stand out from the crop yeah so

234
00:09:31,760 --> 00:09:33,920
uh the current workflow is that

235
00:09:33,920 --> 00:09:35,760
necessary responders will actually use

236
00:09:35,760 --> 00:09:37,680
uh software acquisition tools to

237
00:09:37,680 --> 00:09:39,040
actually extract

238
00:09:39,040 --> 00:09:40,480
data from

239
00:09:40,480 --> 00:09:42,720
each computer and there's there also

240
00:09:42,720 --> 00:09:44,880
might be a risk of human errors

241
00:09:44,880 --> 00:09:46,640
during this process

242
00:09:46,640 --> 00:09:48,560
so by using the best bunny we can

243
00:09:48,560 --> 00:09:50,800
actually just plug in the batch money

244
00:09:50,800 --> 00:09:52,880
into the compromised computer and you

245
00:09:52,880 --> 00:09:55,120
automatically collect the data that is

246
00:09:55,120 --> 00:09:56,800
needed once it's done it will have a

247
00:09:56,800 --> 00:09:58,000
green light and then you can just pull

248
00:09:58,000 --> 00:09:59,600
it out from the computer and then you

249
00:09:59,600 --> 00:10:01,360
can move on to the next computer and so

250
00:10:01,360 --> 00:10:04,160
and so so on and so forth

251
00:10:04,160 --> 00:10:06,640
next slide please

252
00:10:06,640 --> 00:10:08,560
okay so now i'll be talking a bit about

253
00:10:08,560 --> 00:10:10,800
the software uh component of this

254
00:10:10,800 --> 00:10:13,600
project so there are actually a

255
00:10:13,600 --> 00:10:15,519
few key functionalities that we will

256
00:10:15,519 --> 00:10:17,519
have and we'll go into

257
00:10:17,519 --> 00:10:20,079
more details as we go on to the goal in

258
00:10:20,079 --> 00:10:21,600
the presentation

259
00:10:21,600 --> 00:10:25,680
so uh next time please

260
00:10:25,839 --> 00:10:27,760
okay so first we have the automation of

261
00:10:27,760 --> 00:10:30,800
ram analysis with the aid of volatility

262
00:10:30,800 --> 00:10:32,720
so how this works is actually we used uh

263
00:10:32,720 --> 00:10:35,680
python to automate volatility processing

264
00:10:35,680 --> 00:10:36,480
by

265
00:10:36,480 --> 00:10:37,920
implementing

266
00:10:37,920 --> 00:10:40,399
a set of built in volatility commands

267
00:10:40,399 --> 00:10:43,120
which are commonly used for ram analysis

268
00:10:43,120 --> 00:10:45,920
so these inbuilt commands are actually

269
00:10:45,920 --> 00:10:48,800
sorry next slightly

270
00:10:48,880 --> 00:10:50,480
uh so some of the imbue commands are

271
00:10:50,480 --> 00:10:53,920
actually dll dump process dump process 3

272
00:10:53,920 --> 00:10:55,040
and net scan

273
00:10:55,040 --> 00:10:56,560
so

274
00:10:56,560 --> 00:11:00,000
for dll dom and process dom we actually

275
00:11:00,000 --> 00:11:01,440
use these two commands to actually

276
00:11:01,440 --> 00:11:03,600
extract dll files and

277
00:11:03,600 --> 00:11:05,920
uh portable executables which will

278
00:11:05,920 --> 00:11:08,320
actually then be used in the next few

279
00:11:08,320 --> 00:11:09,600
modules

280
00:11:09,600 --> 00:11:11,760
that we have actually developed which is

281
00:11:11,760 --> 00:11:14,079
the key static analyzer to actually look

282
00:11:14,079 --> 00:11:15,839
for indicators to show that it's

283
00:11:15,839 --> 00:11:18,000
actually a malicious program that is

284
00:11:18,000 --> 00:11:19,920
actually running within

285
00:11:19,920 --> 00:11:21,600
the computer

286
00:11:21,600 --> 00:11:22,320
so

287
00:11:22,320 --> 00:11:25,120
next slide please

288
00:11:25,200 --> 00:11:27,360
okay so next we actually have a security

289
00:11:27,360 --> 00:11:28,880
event lots correlated within the

290
00:11:28,880 --> 00:11:30,480
solution

291
00:11:30,480 --> 00:11:32,399
the program will actually take in a

292
00:11:32,399 --> 00:11:34,720
security ebtx file and then it's being

293
00:11:34,720 --> 00:11:37,680
passed through a rule set which is

294
00:11:37,680 --> 00:11:39,440
that we have collateral based on event

295
00:11:39,440 --> 00:11:43,519
ids so how this correlation work is that

296
00:11:43,519 --> 00:11:46,000
it will detect uh event ids within the

297
00:11:46,000 --> 00:11:48,320
ebtx file and look for a sequence of

298
00:11:48,320 --> 00:11:51,040
event ids or or even individual event

299
00:11:51,040 --> 00:11:53,120
ids and alert possible events that might

300
00:11:53,120 --> 00:11:55,360
have taken place

301
00:11:55,360 --> 00:11:56,720
in the computer

302
00:11:56,720 --> 00:12:00,000
so uh next time please

303
00:12:00,000 --> 00:12:02,320
okay so this is just a

304
00:12:02,320 --> 00:12:04,160
a short

305
00:12:04,160 --> 00:12:06,959
list of what uh correlation rule sets

306
00:12:06,959 --> 00:12:09,920
that we have we have in in this program

307
00:12:09,920 --> 00:12:11,279
but we have the more notable

308
00:12:11,279 --> 00:12:13,440
correlations uh such as potential

309
00:12:13,440 --> 00:12:16,000
privilege escalation uh lateral movement

310
00:12:16,000 --> 00:12:18,560
and a lot on brute force

311
00:12:18,560 --> 00:12:19,440
yeah

312
00:12:19,440 --> 00:12:22,639
i'll go into more detail for one of the

313
00:12:22,639 --> 00:12:24,480
for one of the rulesets that we have in

314
00:12:24,480 --> 00:12:26,320
the next slide

315
00:12:26,320 --> 00:12:28,079
uh next time please

316
00:12:28,079 --> 00:12:31,040
thank you uh so over here we have an

317
00:12:31,040 --> 00:12:32,639
example of

318
00:12:32,639 --> 00:12:35,200
correlation by event id or detecting

319
00:12:35,200 --> 00:12:38,000
privilege escalation so first we will

320
00:12:38,000 --> 00:12:40,160
detect it in the event in a sequence

321
00:12:40,160 --> 00:12:43,519
show order of for example six four six

322
00:12:43,519 --> 00:12:45,760
four four six two four or four six four

323
00:12:45,760 --> 00:12:46,480
eight

324
00:12:46,480 --> 00:12:49,200
followed by four six seven two

325
00:12:49,200 --> 00:12:51,519
uh like privilege uh special privilege

326
00:12:51,519 --> 00:12:53,600
assigned to a new log on

327
00:12:53,600 --> 00:12:56,800
four seven zero four uh user rights

328
00:12:56,800 --> 00:13:00,000
assigned and lastly 468 new process is

329
00:13:00,000 --> 00:13:02,959
created so when we see a sequence of

330
00:13:02,959 --> 00:13:05,200
such events we might we will actually

331
00:13:05,200 --> 00:13:08,079
correlate this uh event id

332
00:13:08,079 --> 00:13:11,200
to be a possible privilege escalation

333
00:13:11,200 --> 00:13:12,959
but of course uh the analyst will

334
00:13:12,959 --> 00:13:15,040
actually have to answer uh double check

335
00:13:15,040 --> 00:13:17,440
this on the event log itself

336
00:13:17,440 --> 00:13:18,399
yep

337
00:13:18,399 --> 00:13:21,600
uh next slide please

338
00:13:21,600 --> 00:13:23,519
okay uh now i'll hand my time over to

339
00:13:23,519 --> 00:13:25,680
patrick uh who will be talking about the

340
00:13:25,680 --> 00:13:28,000
other parts of the software component

341
00:13:28,000 --> 00:13:30,639
patrick please

342
00:13:31,440 --> 00:13:32,399
hello

343
00:13:32,399 --> 00:13:35,360
thank you kevin uh can you hear me can

344
00:13:35,360 --> 00:13:36,720
we

345
00:13:36,720 --> 00:13:38,320
yeah i can hear you

346
00:13:38,320 --> 00:13:40,959
okay so now i'll be talking about our p

347
00:13:40,959 --> 00:13:43,760
static analyzer module and how it works

348
00:13:43,760 --> 00:13:46,320
so all dlls and processors previously

349
00:13:46,320 --> 00:13:49,440
extracted by our ram analysis module

350
00:13:49,440 --> 00:13:52,320
will be passed into this module for

351
00:13:52,320 --> 00:13:54,880
feature extraction and analysis

352
00:13:54,880 --> 00:13:57,360
next slide

353
00:13:59,519 --> 00:14:00,240
so

354
00:14:00,240 --> 00:14:01,600
there are two main reasons why we

355
00:14:01,600 --> 00:14:03,519
decided to use only heuristics to

356
00:14:03,519 --> 00:14:06,480
conduct static analysis instead of using

357
00:14:06,480 --> 00:14:08,880
traditional signature based approaches

358
00:14:08,880 --> 00:14:11,199
so firstly singular-based detection can

359
00:14:11,199 --> 00:14:13,920
be easily bypassed as a single change in

360
00:14:13,920 --> 00:14:16,240
string value or variable name will

361
00:14:16,240 --> 00:14:18,399
change the whole hash of the file

362
00:14:18,399 --> 00:14:20,399
and making it ineffective against

363
00:14:20,399 --> 00:14:21,920
zero-day attacks

364
00:14:21,920 --> 00:14:23,680
and the second main reason will be that

365
00:14:23,680 --> 00:14:24,880
our tool

366
00:14:24,880 --> 00:14:27,839
was developed to be tailored for

367
00:14:27,839 --> 00:14:29,839
triage which is part of the incidence

368
00:14:29,839 --> 00:14:31,360
response

369
00:14:31,360 --> 00:14:32,480
framework

370
00:14:32,480 --> 00:14:35,839
in the event where data breach

371
00:14:35,839 --> 00:14:37,920
is uh has occurred time is of the

372
00:14:37,920 --> 00:14:39,360
essence

373
00:14:39,360 --> 00:14:40,720
and therefore we did not include

374
00:14:40,720 --> 00:14:43,120
computational heavy techniques such as

375
00:14:43,120 --> 00:14:44,959
like pattern matching against a

376
00:14:44,959 --> 00:14:48,160
compilation of non-malicious strings as

377
00:14:48,160 --> 00:14:50,000
it will require substantially longer

378
00:14:50,000 --> 00:14:52,800
amount of time to execute

379
00:14:52,800 --> 00:14:55,360
so the pe analysis model works by saving

380
00:14:55,360 --> 00:14:57,199
through files of interest

381
00:14:57,199 --> 00:14:59,519
for investigators and highlighting set

382
00:14:59,519 --> 00:15:01,680
files with high number of

383
00:15:01,680 --> 00:15:04,399
anomalies or suspicious properties

384
00:15:04,399 --> 00:15:06,959
based on several heuristic rule sets

385
00:15:06,959 --> 00:15:09,120
which we have implemented

386
00:15:09,120 --> 00:15:12,760
so next slide please

387
00:15:13,360 --> 00:15:15,040
so over here are several notable

388
00:15:15,040 --> 00:15:17,600
heuristic rule sets we have incorporated

389
00:15:17,600 --> 00:15:18,880
into our

390
00:15:18,880 --> 00:15:21,120
static analysis module

391
00:15:21,120 --> 00:15:23,920
so for example

392
00:15:24,399 --> 00:15:26,639
having inconsistent checksum

393
00:15:26,639 --> 00:15:28,160
size of code

394
00:15:28,160 --> 00:15:30,560
and detecting file having multiple b

395
00:15:30,560 --> 00:15:33,279
headers so when a file is flagged for

396
00:15:33,279 --> 00:15:35,600
having inconsistent checksum

397
00:15:35,600 --> 00:15:37,759
is an indication that a particular file

398
00:15:37,759 --> 00:15:39,600
has been either tampered

399
00:15:39,600 --> 00:15:41,920
or potentially injected with code

400
00:15:41,920 --> 00:15:43,680
without rebuilding the checksum value of

401
00:15:43,680 --> 00:15:45,759
the optional header

402
00:15:45,759 --> 00:15:47,920
a file having multiple p haters is also

403
00:15:47,920 --> 00:15:49,440
a sign that

404
00:15:49,440 --> 00:15:51,839
it has been it has been embedded with

405
00:15:51,839 --> 00:15:54,399
another executable into it

406
00:15:54,399 --> 00:15:56,320
which is also indicated that the program

407
00:15:56,320 --> 00:15:58,480
author had an intent to hide malicious

408
00:15:58,480 --> 00:16:00,160
payloads

409
00:16:00,160 --> 00:16:03,040
so moving on next

410
00:16:06,880 --> 00:16:09,279
apart from heuristics our solutions also

411
00:16:09,279 --> 00:16:12,160
incorporates entropy analysis

412
00:16:12,160 --> 00:16:14,320
where it is being used to evaluate if a

413
00:16:14,320 --> 00:16:16,399
particular file has been either packed

414
00:16:16,399 --> 00:16:18,639
encrypted or obfuscated

415
00:16:18,639 --> 00:16:20,480
knowing if a file is being packed or

416
00:16:20,480 --> 00:16:22,959
encrypted is essential as

417
00:16:22,959 --> 00:16:24,560
it is a common approach for malware

418
00:16:24,560 --> 00:16:26,560
authors to consume their malicious code

419
00:16:26,560 --> 00:16:29,680
by using packers such as upx

420
00:16:29,680 --> 00:16:32,480
dermida and so forth

421
00:16:32,480 --> 00:16:36,199
so moving on next

422
00:16:37,440 --> 00:16:40,240
so how our to evaluate if a particular

423
00:16:40,240 --> 00:16:42,079
file

424
00:16:42,079 --> 00:16:43,759
is being encrypted and so forth are

425
00:16:43,759 --> 00:16:45,680
based on all these values so based on

426
00:16:45,680 --> 00:16:48,079
the entropy value of the executable our

427
00:16:48,079 --> 00:16:50,079
solution will classify each of them to

428
00:16:50,079 --> 00:16:53,839
be either encrypted packed or normal

429
00:16:53,839 --> 00:16:56,079
if if it has an entropy value of more

430
00:16:56,079 --> 00:16:57,839
than 6.926

431
00:16:57,839 --> 00:17:01,199
you'll be classified as encrypted

432
00:17:01,199 --> 00:17:03,680
files with entropy value lesson of 5.25

433
00:17:03,680 --> 00:17:05,760
will be considered to be normal or

434
00:17:05,760 --> 00:17:08,480
rather native and plain text

435
00:17:08,480 --> 00:17:10,559
and for anything between the value of

436
00:17:10,559 --> 00:17:13,919
6.926 and 5.259

437
00:17:13,919 --> 00:17:17,119
you'll be classified as pac

438
00:17:17,119 --> 00:17:20,239
so uh next slide please

439
00:17:22,000 --> 00:17:23,679
so our solution will also be able to

440
00:17:23,679 --> 00:17:27,039
identify the functionality of

441
00:17:27,039 --> 00:17:30,000
of the malware by looking into what win

442
00:17:30,000 --> 00:17:32,160
api functions are being imported and

443
00:17:32,160 --> 00:17:34,080
then classifying them into these

444
00:17:34,080 --> 00:17:35,840
categories as shown here

445
00:17:35,840 --> 00:17:37,520
so the categories shown here are just

446
00:17:37,520 --> 00:17:39,120
some of the categories they are not the

447
00:17:39,120 --> 00:17:40,960
full list

448
00:17:40,960 --> 00:17:43,200
so how do we know if the file has a

449
00:17:43,200 --> 00:17:46,320
function of a keylogger and so forth

450
00:17:46,320 --> 00:17:48,320
let's look at it it's like

451
00:17:48,320 --> 00:17:51,039
looks like this

452
00:17:56,400 --> 00:17:57,919
so over here are three examples of

453
00:17:57,919 --> 00:18:00,160
identify what functions an executable

454
00:18:00,160 --> 00:18:02,240
has based on its imports

455
00:18:02,240 --> 00:18:05,280
so if we find that

456
00:18:05,280 --> 00:18:06,720
if the file

457
00:18:06,720 --> 00:18:08,559
the file will be indicated to have

458
00:18:08,559 --> 00:18:10,799
keylogger capabilities if it contains a

459
00:18:10,799 --> 00:18:13,520
series of win api functions like for

460
00:18:13,520 --> 00:18:14,720
example

461
00:18:14,720 --> 00:18:16,080
get key state

462
00:18:16,080 --> 00:18:18,400
get async key state get focus window and

463
00:18:18,400 --> 00:18:19,919
so forth

464
00:18:19,919 --> 00:18:21,200
as for checking whether it has

465
00:18:21,200 --> 00:18:23,039
anti-debugging capabilities you will

466
00:18:23,039 --> 00:18:24,960
check for functions like

467
00:18:24,960 --> 00:18:28,000
grade create 2 help 32 snapshot and

468
00:18:28,000 --> 00:18:30,480
check remote debugger present

469
00:18:30,480 --> 00:18:32,400
so moving on to the next functionality

470
00:18:32,400 --> 00:18:35,440
of our software component

471
00:18:35,440 --> 00:18:36,880
so now let's talk about how do we

472
00:18:36,880 --> 00:18:39,919
predict if a file a p file is

473
00:18:39,919 --> 00:18:42,240
a is my line burning with the help of

474
00:18:42,240 --> 00:18:45,440
neural networks so we have gone over

475
00:18:45,440 --> 00:18:47,520
heuristics entropy

476
00:18:47,520 --> 00:18:49,679
and imports analysis the next thing we

477
00:18:49,679 --> 00:18:51,919
can do is to predict if a key file is

478
00:18:51,919 --> 00:18:53,760
maligned or benign with help of our

479
00:18:53,760 --> 00:18:58,799
automated neural network module so next

480
00:19:00,160 --> 00:19:02,880
so before we are b we are able to change

481
00:19:02,880 --> 00:19:05,520
our model to predict the file we will

482
00:19:05,520 --> 00:19:08,480
first need to collect data

483
00:19:08,480 --> 00:19:10,960
so for the nine files we have manually

484
00:19:10,960 --> 00:19:12,640
extracted them

485
00:19:12,640 --> 00:19:14,000
from various

486
00:19:14,000 --> 00:19:16,160
multiple clean installation of windows

487
00:19:16,160 --> 00:19:18,960
operating system ranging from xp all the

488
00:19:18,960 --> 00:19:21,919
way to the latest windows 10.

489
00:19:21,919 --> 00:19:24,559
as for malign samples we downloaded them

490
00:19:24,559 --> 00:19:25,440
from

491
00:19:25,440 --> 00:19:27,520
various sources like

492
00:19:27,520 --> 00:19:30,160
such as various total maldivia and other

493
00:19:30,160 --> 00:19:32,799
malware repositories

494
00:19:32,799 --> 00:19:35,760
so next slide please

495
00:19:37,679 --> 00:19:40,320
after the collection process we can then

496
00:19:40,320 --> 00:19:42,240
proceed with extracting features using

497
00:19:42,240 --> 00:19:44,880
our pa static analyzer

498
00:19:44,880 --> 00:19:47,280
and an entropy analyzer and imports

499
00:19:47,280 --> 00:19:49,440
analyzer modules and saving those

500
00:19:49,440 --> 00:19:51,440
features into a csv file

501
00:19:51,440 --> 00:19:53,600
we then proceed with pre-processing the

502
00:19:53,600 --> 00:19:55,600
data and normalizing it before feeding

503
00:19:55,600 --> 00:19:58,799
it into a neural network for training

504
00:19:58,799 --> 00:20:00,400
so after the training process we

505
00:20:00,400 --> 00:20:02,880
evaluate each model's accuracy by using

506
00:20:02,880 --> 00:20:05,600
a t20 chain test split

507
00:20:05,600 --> 00:20:08,000
and currently the best model accuracy we

508
00:20:08,000 --> 00:20:09,440
have is

509
00:20:09,440 --> 00:20:11,360
90 if not

510
00:20:11,360 --> 00:20:12,640
however

511
00:20:12,640 --> 00:20:14,880
we have only trained it against 14 000

512
00:20:14,880 --> 00:20:17,360
samples

513
00:20:17,840 --> 00:20:21,120
so uh next slide please

514
00:20:21,120 --> 00:20:23,440
so after the pre-training phase we can

515
00:20:23,440 --> 00:20:25,760
then use the model with with the highest

516
00:20:25,760 --> 00:20:28,159
accuracy

517
00:20:28,159 --> 00:20:30,159
by integrating it into our portable

518
00:20:30,159 --> 00:20:32,880
software solution to braiding malware to

519
00:20:32,880 --> 00:20:36,559
predict if p files are 9 or burning

520
00:20:36,559 --> 00:20:38,000
and the output of

521
00:20:38,000 --> 00:20:40,240
the output will be a number of between 0

522
00:20:40,240 --> 00:20:42,799
to 1 with 1 being malicious and 0 not

523
00:20:42,799 --> 00:20:44,480
being malicious

524
00:20:44,480 --> 00:20:47,200
for files with a score above 0.5 our two

525
00:20:47,200 --> 00:20:49,280
will flag it out for the investigator to

526
00:20:49,280 --> 00:20:51,440
look into

527
00:20:51,440 --> 00:20:53,919
and now let's look at the neural network

528
00:20:53,919 --> 00:20:57,120
architecture that was used for training

529
00:20:57,120 --> 00:21:01,719
upon com next slide is

530
00:21:06,559 --> 00:21:08,080
so where is the architecture of the

531
00:21:08,080 --> 00:21:10,640
neural network so the input is a vector

532
00:21:10,640 --> 00:21:12,799
of 73 numbers

533
00:21:12,799 --> 00:21:15,200
and is normalized to the range of zero

534
00:21:15,200 --> 00:21:16,559
to one

535
00:21:16,559 --> 00:21:18,320
we then passed it into a shallow neural

536
00:21:18,320 --> 00:21:21,440
network as the data is not super complex

537
00:21:21,440 --> 00:21:24,640
with large dimensions

538
00:21:25,679 --> 00:21:27,600
so we don't need a complicated neural

539
00:21:27,600 --> 00:21:30,320
network with too many layers if not the

540
00:21:30,320 --> 00:21:32,640
model will be over fit

541
00:21:32,640 --> 00:21:35,200
so we drop out we use dropout to prevent

542
00:21:35,200 --> 00:21:37,360
overfitting and we keep it simple with

543
00:21:37,360 --> 00:21:39,360
using sigma activation function for each

544
00:21:39,360 --> 00:21:42,080
of the hidden layers

545
00:21:42,080 --> 00:21:43,760
so moving on to the last component of

546
00:21:43,760 --> 00:21:47,840
our software module next slide please

547
00:21:47,840 --> 00:21:49,919
our software solution has various total

548
00:21:49,919 --> 00:21:53,440
api integrated into it whereby pe files

549
00:21:53,440 --> 00:21:55,760
will automatically be submitted to check

550
00:21:55,760 --> 00:21:57,760
if it has been previously detected or

551
00:21:57,760 --> 00:21:59,360
flagged

552
00:21:59,360 --> 00:22:02,320
an api will be required for this and for

553
00:22:02,320 --> 00:22:04,240
our case sbr students

554
00:22:04,240 --> 00:22:06,880
we requested for an api academic key

555
00:22:06,880 --> 00:22:09,039
where it grants us access to

556
00:22:09,039 --> 00:22:13,600
up to 600 000 requests per month

557
00:22:13,600 --> 00:22:15,120
up from the usual

558
00:22:15,120 --> 00:22:18,559
30 000 requests from normal api keys

559
00:22:18,559 --> 00:22:19,520
so

560
00:22:19,520 --> 00:22:21,520
you have the flexibility of

561
00:22:21,520 --> 00:22:24,000
changing the api key to

562
00:22:24,000 --> 00:22:27,520
your own api keys if you needed

563
00:22:27,520 --> 00:22:28,720
so uh

564
00:22:28,720 --> 00:22:29,840
next slide

565
00:22:29,840 --> 00:22:32,158
please

566
00:22:32,799 --> 00:22:35,039
now we will have a short demo on how our

567
00:22:35,039 --> 00:22:39,080
software solution works

568
00:22:47,200 --> 00:22:49,440
okay so i'll bring a voice

569
00:22:49,440 --> 00:22:50,799
over for this

570
00:22:50,799 --> 00:22:53,120
so this is the bash bunny so when it's

571
00:22:53,120 --> 00:22:54,799
actually plugged into the computer you

572
00:22:54,799 --> 00:22:57,840
will actually see a purple light so it

573
00:22:57,840 --> 00:22:59,919
will show that it's actually starting up

574
00:22:59,919 --> 00:23:01,840
uh then after it will change to a yellow

575
00:23:01,840 --> 00:23:03,679
light a yellow light is actually to show

576
00:23:03,679 --> 00:23:04,960
that the

577
00:23:04,960 --> 00:23:07,280
the screen is actually running

578
00:23:07,280 --> 00:23:10,240
and after it's done it will turn green

579
00:23:10,240 --> 00:23:12,960
so uh this is what will happen on the

580
00:23:12,960 --> 00:23:14,559
screen when the batch money is actually

581
00:23:14,559 --> 00:23:15,919
plugged into

582
00:23:15,919 --> 00:23:17,360
the computer

583
00:23:17,360 --> 00:23:20,080
so it will actually prompt

584
00:23:20,080 --> 00:23:20,840
this

585
00:23:20,840 --> 00:23:23,280
cmd and you can actually see the whole

586
00:23:23,280 --> 00:23:24,559
process

587
00:23:24,559 --> 00:23:27,679
uh but for the purpose of demonstration

588
00:23:27,679 --> 00:23:28,559
uh

589
00:23:28,559 --> 00:23:31,919
i enabled the cmd to be in this way

590
00:23:31,919 --> 00:23:33,840
but actually uh you in the script you

591
00:23:33,840 --> 00:23:35,520
can actually edit

592
00:23:35,520 --> 00:23:38,080
and change it to hide the cmd in the

593
00:23:38,080 --> 00:23:39,440
background

594
00:23:39,440 --> 00:23:41,679
so currently it's actually

595
00:23:41,679 --> 00:23:44,320
collecting window event logs

596
00:23:44,320 --> 00:23:48,720
from the computer using robocopy

597
00:23:48,960 --> 00:23:50,559
and after it's done

598
00:23:50,559 --> 00:23:52,799
so now this is the ram

599
00:23:52,799 --> 00:23:55,520
uh acquisition portion so

600
00:23:55,520 --> 00:23:57,840
as i mentioned just now there's actually

601
00:23:57,840 --> 00:23:59,440
two switch

602
00:23:59,440 --> 00:24:01,919
uh to the batch money so one switch will

603
00:24:01,919 --> 00:24:04,880
actually be used for even locks

604
00:24:04,880 --> 00:24:07,039
dumping and the other one will be used

605
00:24:07,039 --> 00:24:09,120
for ram dumping

606
00:24:09,120 --> 00:24:11,279
so currently now it's actually dumping

607
00:24:11,279 --> 00:24:12,640
the

608
00:24:12,640 --> 00:24:17,159
ram into an external drive

609
00:24:19,440 --> 00:24:21,200
yeah so

610
00:24:21,200 --> 00:24:23,039
now we'll watch the video

611
00:24:23,039 --> 00:24:26,400
for the software demonstration

612
00:24:26,400 --> 00:24:28,400
software solution

613
00:24:28,400 --> 00:24:31,279
so over here the forensic investigator

614
00:24:31,279 --> 00:24:33,440
can see all the functions which are

615
00:24:33,440 --> 00:24:35,440
provided by our solution

616
00:24:35,440 --> 00:24:37,760
so for cage generation you will pass all

617
00:24:37,760 --> 00:24:39,760
the case artifacts which were being

618
00:24:39,760 --> 00:24:42,080
retrieved previously by the bash bunny

619
00:24:42,080 --> 00:24:44,240
and triage analysis

620
00:24:44,240 --> 00:24:46,720
will conduct a full analysis of all the

621
00:24:46,720 --> 00:24:48,159
artifacts

622
00:24:48,159 --> 00:24:50,880
and then provide a report

623
00:24:50,880 --> 00:24:53,200
and in the event where the investigator

624
00:24:53,200 --> 00:24:55,039
doesn't actually want to conduct the

625
00:24:55,039 --> 00:24:57,200
full analysis and use the individual

626
00:24:57,200 --> 00:24:59,600
modules we actually listed them over

627
00:24:59,600 --> 00:25:00,960
here

628
00:25:00,960 --> 00:25:04,720
yeah the investigator can actually

629
00:25:04,720 --> 00:25:08,080
analyze their own files if they want

630
00:25:08,080 --> 00:25:10,400
and on their own secret windows event

631
00:25:10,400 --> 00:25:12,240
locks up

632
00:25:12,240 --> 00:25:15,679
so let me show so now i will be

633
00:25:15,679 --> 00:25:17,760
first i will be passing all the case

634
00:25:17,760 --> 00:25:20,640
artifacts which were previously

635
00:25:20,640 --> 00:25:22,320
extracted by the benchmark

636
00:25:22,320 --> 00:25:24,880
to generate a case so over here we will

637
00:25:24,880 --> 00:25:28,360
keep our name

638
00:25:28,799 --> 00:25:31,200
okay so our then browse to the ram file

639
00:25:31,200 --> 00:25:33,760
which was retrieved by the batch party

640
00:25:33,760 --> 00:25:35,919
which is this

641
00:25:35,919 --> 00:25:39,440
and then just click execute them

642
00:25:39,840 --> 00:25:41,440
and just wait

643
00:25:41,440 --> 00:25:43,440
the time duration will scale depending

644
00:25:43,440 --> 00:25:46,720
on how large the file is

645
00:25:49,120 --> 00:25:50,880
okay well once it's done there will be a

646
00:25:50,880 --> 00:25:52,799
notification popping out the top right

647
00:25:52,799 --> 00:25:55,200
corner to tell you that it's finished

648
00:25:55,200 --> 00:25:57,200
and now the investigator can actually

649
00:25:57,200 --> 00:26:01,679
proceed with the future triage analysis

650
00:26:01,679 --> 00:26:03,279
so when they click on the site tab or

651
00:26:03,279 --> 00:26:04,960
form they can access those functions

652
00:26:04,960 --> 00:26:07,279
from the home page or the site tab it's

653
00:26:07,279 --> 00:26:08,880
the same

654
00:26:08,880 --> 00:26:11,279
so when they click they can just follow

655
00:26:11,279 --> 00:26:12,880
the instructions if it's their first

656
00:26:12,880 --> 00:26:14,400
time using

657
00:26:14,400 --> 00:26:16,000
so over here

658
00:26:16,000 --> 00:26:17,840
is a brief summary of what kind of

659
00:26:17,840 --> 00:26:19,760
functionality it provides what kind of

660
00:26:19,760 --> 00:26:22,240
thing process processes and what kind of

661
00:26:22,240 --> 00:26:24,400
analysis it conducts

662
00:26:24,400 --> 00:26:25,760
so we will

663
00:26:25,760 --> 00:26:26,960
carry it out

664
00:26:26,960 --> 00:26:29,200
so right after generating a case we also

665
00:26:29,200 --> 00:26:31,520
have to

666
00:26:32,720 --> 00:26:34,640
we have to dump two extra files which

667
00:26:34,640 --> 00:26:36,159
will also retrieve by the batch money

668
00:26:36,159 --> 00:26:37,440
mainly the

669
00:26:37,440 --> 00:26:39,760
event loss and some computer metadata

670
00:26:39,760 --> 00:26:41,600
info

671
00:26:41,600 --> 00:26:44,000
so we will be copying

672
00:26:44,000 --> 00:26:46,640
over to our

673
00:26:46,640 --> 00:26:49,360
okay as you can see here this

674
00:26:49,360 --> 00:26:51,520
folder was generated after generating

675
00:26:51,520 --> 00:26:52,640
the keys

676
00:26:52,640 --> 00:26:56,240
so we just have to paste them here

677
00:26:57,520 --> 00:26:58,799
and once we place that here we can

678
00:26:58,799 --> 00:27:01,760
proceed with the full charge analysis

679
00:27:01,760 --> 00:27:03,919
so

680
00:27:05,200 --> 00:27:08,640
okay we browse to the folder

681
00:27:08,640 --> 00:27:11,440
and select it and just click execute

682
00:27:11,440 --> 00:27:13,919
analysis and just wait

683
00:27:13,919 --> 00:27:15,360
this will also

684
00:27:15,360 --> 00:27:17,360
the time duration was scaled based on

685
00:27:17,360 --> 00:27:19,039
how complex or rather how many files

686
00:27:19,039 --> 00:27:20,640
will be extracted also

687
00:27:20,640 --> 00:27:23,919
so yeah let's wait let's see

688
00:27:25,120 --> 00:27:26,880
here once it finishes there'll also be a

689
00:27:26,880 --> 00:27:28,559
notification popping out the top right

690
00:27:28,559 --> 00:27:29,919
corner

691
00:27:29,919 --> 00:27:33,520
and once the results are being passed

692
00:27:33,520 --> 00:27:34,880
when you scroll down to the bottom you

693
00:27:34,880 --> 00:27:37,360
will be able to see this results tab

694
00:27:37,360 --> 00:27:38,080
and

695
00:27:38,080 --> 00:27:40,399
over here all the metadata of the whole

696
00:27:40,399 --> 00:27:42,799
species will also be

697
00:27:42,799 --> 00:27:44,000
installed here

698
00:27:44,000 --> 00:27:46,080
so some interesting thing like what kind

699
00:27:46,080 --> 00:27:47,760
of manufacturer

700
00:27:47,760 --> 00:27:50,159
and model of the compost bc

701
00:27:50,159 --> 00:27:51,840
and the number of processes that was

702
00:27:51,840 --> 00:27:54,080
running at the point of extraction

703
00:27:54,080 --> 00:27:58,000
and how many domains and ips were found

704
00:27:58,000 --> 00:28:00,840
and the summarized number of all the

705
00:28:00,840 --> 00:28:03,919
potential suspicious and malicious files

706
00:28:03,919 --> 00:28:05,840
that have been flagged by our

707
00:28:05,840 --> 00:28:08,799
our individual models

708
00:28:08,799 --> 00:28:10,799
and the flex events are how many

709
00:28:10,799 --> 00:28:12,960
suspicious events that were being

710
00:28:12,960 --> 00:28:14,880
flagged by our windows event logs

711
00:28:14,880 --> 00:28:16,559
correlator

712
00:28:16,559 --> 00:28:19,760
so over here the first table shows what

713
00:28:19,760 --> 00:28:21,919
processors were running

714
00:28:21,919 --> 00:28:23,919
at a point of time

715
00:28:23,919 --> 00:28:25,520
the users can actually search what they

716
00:28:25,520 --> 00:28:28,240
want here also

717
00:28:29,520 --> 00:28:30,480
so

718
00:28:30,480 --> 00:28:32,880
at this the next table we will also

719
00:28:32,880 --> 00:28:34,960
highlight what kind of ip addresses were

720
00:28:34,960 --> 00:28:37,760
being flagged out

721
00:28:37,760 --> 00:28:40,240
now as you can see

722
00:28:40,240 --> 00:28:42,240
there are three suspicious ip callbacks

723
00:28:42,240 --> 00:28:44,799
that were found

724
00:28:44,799 --> 00:28:46,159
all these

725
00:28:46,159 --> 00:28:49,600
they are pointing to united states

726
00:28:49,600 --> 00:28:52,640
and okay uh the next table will

727
00:28:52,640 --> 00:28:54,320
show all the executables that are being

728
00:28:54,320 --> 00:28:57,039
extracted and all the executables will

729
00:28:57,039 --> 00:29:00,720
be passed to our malware analysis module

730
00:29:00,720 --> 00:29:01,450
whereby we

731
00:29:01,450 --> 00:29:02,559
[Music]

732
00:29:02,559 --> 00:29:03,760
were done

733
00:29:03,760 --> 00:29:05,760
we will conduct a hash lookup using

734
00:29:05,760 --> 00:29:07,200
virustotal

735
00:29:07,200 --> 00:29:08,159
and

736
00:29:08,159 --> 00:29:12,000
using our pe analyzer we will extract

737
00:29:12,000 --> 00:29:13,600
any heuristics

738
00:29:13,600 --> 00:29:15,600
okay we will provide a heuristics

739
00:29:15,600 --> 00:29:17,120
indicator score to indicate how

740
00:29:17,120 --> 00:29:19,600
malicious

741
00:29:20,159 --> 00:29:22,720
and for our tens the class field which

742
00:29:22,720 --> 00:29:25,600
is the tensorflow model will indicate

743
00:29:25,600 --> 00:29:27,200
the prediction

744
00:29:27,200 --> 00:29:30,000
that was done by our pre-trade neural

745
00:29:30,000 --> 00:29:30,960
network

746
00:29:30,960 --> 00:29:34,159
so as you can see 1.798

747
00:29:34,159 --> 00:29:36,880
1.79 is actually a very high value with

748
00:29:36,880 --> 00:29:38,960
one being the most

749
00:29:38,960 --> 00:29:40,799
one being suspicious and zero being the

750
00:29:40,799 --> 00:29:42,880
least past subspecies

751
00:29:42,880 --> 00:29:44,960
so we can actually sort it

752
00:29:44,960 --> 00:29:46,399
descending order

753
00:29:46,399 --> 00:29:48,880
see what are the files of interest to

754
00:29:48,880 --> 00:29:50,640
look at

755
00:29:50,640 --> 00:29:52,159
so you can see this this first

756
00:29:52,159 --> 00:29:54,720
executable is actually quite suspicious

757
00:29:54,720 --> 00:29:55,840
he has been

758
00:29:55,840 --> 00:29:57,840
detected he has a very slotted detection

759
00:29:57,840 --> 00:30:00,799
score 42 69 and he has hit eight

760
00:30:00,799 --> 00:30:03,600
heuristics indicators

761
00:30:03,600 --> 00:30:06,399
and the score that was detected by our

762
00:30:06,399 --> 00:30:10,080
new network was actually quite higher

763
00:30:10,799 --> 00:30:13,039
and aside from all the executables we

764
00:30:13,039 --> 00:30:15,600
also analyzed all the dlls

765
00:30:15,600 --> 00:30:17,200
and sometimes malware can be also

766
00:30:17,200 --> 00:30:20,600
injected inside

767
00:30:24,720 --> 00:30:27,600
uh okay as for the last small table

768
00:30:27,600 --> 00:30:30,399
which will display all the events log

769
00:30:30,399 --> 00:30:32,159
all the suspicious events that are being

770
00:30:32,159 --> 00:30:34,480
flagged out by our correlator

771
00:30:34,480 --> 00:30:37,120
so you can see there are actually signs

772
00:30:37,120 --> 00:30:38,080
of

773
00:30:38,080 --> 00:30:39,919
privilege escalation

774
00:30:39,919 --> 00:30:41,760
based on all the event ids and time

775
00:30:41,760 --> 00:30:44,240
stamps

776
00:30:49,520 --> 00:30:51,520
uh yeah and there's actually a calm

777
00:30:51,520 --> 00:30:54,240
brute force that was potentially

778
00:30:54,240 --> 00:30:57,520
they found instances of

779
00:30:57,679 --> 00:31:00,720
brute force attempts

780
00:31:01,600 --> 00:31:04,960
yeah and that's pretty much it and

781
00:31:04,960 --> 00:31:06,960
the investigator can actually save the

782
00:31:06,960 --> 00:31:09,600
results to

783
00:31:10,240 --> 00:31:12,480
look back at a later point of time

784
00:31:12,480 --> 00:31:14,159
the event where they want to view the

785
00:31:14,159 --> 00:31:17,760
resource later and process another case

786
00:31:17,760 --> 00:31:19,760
it will be able to save it as a json

787
00:31:19,760 --> 00:31:22,080
file

788
00:31:29,519 --> 00:31:33,679
they can save in as any extension

789
00:31:33,679 --> 00:31:35,120
okay

790
00:31:35,120 --> 00:31:36,720
once they save it

791
00:31:36,720 --> 00:31:39,679
there'll be a notification

792
00:31:39,679 --> 00:31:41,360
and they can actually review their past

793
00:31:41,360 --> 00:31:43,039
results from their homepage after all

794
00:31:43,039 --> 00:31:45,919
the site

795
00:31:53,279 --> 00:31:56,159
this is the case that was

796
00:31:56,159 --> 00:31:58,799
the demonstration case

797
00:31:58,799 --> 00:32:02,960
yup that pretty much sums up my solvent

798
00:32:11,279 --> 00:32:12,080
now

799
00:32:12,080 --> 00:32:13,039
between

800
00:32:13,039 --> 00:32:16,159
what this tool is we've seen uh that is

801
00:32:16,159 --> 00:32:17,760
actually a combination of a hardware and

802
00:32:17,760 --> 00:32:20,880
software solution if if you look at the

803
00:32:20,880 --> 00:32:22,880
hardware itself uh we talked about batch

804
00:32:22,880 --> 00:32:24,960
money um now batch money like what kevin

805
00:32:24,960 --> 00:32:26,240
have talked about just now is a tool

806
00:32:26,240 --> 00:32:28,960
that's typically used for um

807
00:32:28,960 --> 00:32:32,480
reptiving for attack orchestration um

808
00:32:32,480 --> 00:32:35,200
the scripts are run by the bash money

809
00:32:35,200 --> 00:32:37,360
emulating hrd keyboard and so on so it's

810
00:32:37,360 --> 00:32:39,279
actually a tool that's meant more for

811
00:32:39,279 --> 00:32:42,399
for the attacker's side now

812
00:32:42,399 --> 00:32:44,399
the road ahead for a project like this

813
00:32:44,399 --> 00:32:48,000
for this project essentially is um one

814
00:32:48,000 --> 00:32:49,200
one thing that we've

815
00:32:49,200 --> 00:32:50,640
been thinking about or we've been

816
00:32:50,640 --> 00:32:53,039
looking at is basically how can we

817
00:32:53,039 --> 00:32:54,720
create a purpose-specific device to

818
00:32:54,720 --> 00:32:58,159
replace batch money right because um

819
00:32:58,159 --> 00:33:00,240
we know we by now we know what batch

820
00:33:00,240 --> 00:33:03,200
money is we know what it can do um

821
00:33:03,200 --> 00:33:05,919
it lacks certain features that are

822
00:33:05,919 --> 00:33:07,600
desirable for forensics for example you

823
00:33:07,600 --> 00:33:09,120
know

824
00:33:09,120 --> 00:33:10,880
you you can use a batch money but you

825
00:33:10,880 --> 00:33:13,600
may not know whether it's uh you know

826
00:33:13,600 --> 00:33:15,840
you you can put in the scripts and

827
00:33:15,840 --> 00:33:17,600
everything like that and ensure that

828
00:33:17,600 --> 00:33:19,120
things are for example

829
00:33:19,120 --> 00:33:21,519
um forensically sound on your end but uh

830
00:33:21,519 --> 00:33:23,440
is there a way for example to make

831
00:33:23,440 --> 00:33:24,880
it more

832
00:33:24,880 --> 00:33:27,120
obvious to at least the people who are

833
00:33:27,120 --> 00:33:28,240
you know

834
00:33:28,240 --> 00:33:30,799
who may look at you using this tool

835
00:33:30,799 --> 00:33:33,279
right so things like for example um

836
00:33:33,279 --> 00:33:35,039
log internal logging

837
00:33:35,039 --> 00:33:36,640
um

838
00:33:36,640 --> 00:33:39,679
read-only uh components um you know

839
00:33:39,679 --> 00:33:42,320
right on toggle and so on so could the

840
00:33:42,320 --> 00:33:43,760
road ahead one of them is to actually

841
00:33:43,760 --> 00:33:45,360
build purpose-specific device for this

842
00:33:45,360 --> 00:33:47,440
we have actually had a few ideas on how

843
00:33:47,440 --> 00:33:48,640
to do this um

844
00:33:48,640 --> 00:33:50,399
so far so we're still an explorer three

845
00:33:50,399 --> 00:33:53,120
stage um for example using raspberry pi

846
00:33:53,120 --> 00:33:55,600
uh w and you know with the

847
00:33:55,600 --> 00:33:57,200
with some custom software is built on

848
00:33:57,200 --> 00:33:58,880
top of it right together maybe some

849
00:33:58,880 --> 00:34:00,640
measurement architecture that will

850
00:34:00,640 --> 00:34:02,000
measure everything that's being executed

851
00:34:02,000 --> 00:34:04,159
on the back on the support raspberry pi

852
00:34:04,159 --> 00:34:07,679
itself right um the next uh two things

853
00:34:07,679 --> 00:34:08,639
or next

854
00:34:08,639 --> 00:34:10,399
the other things that we can do um now

855
00:34:10,399 --> 00:34:12,639
if you look at the break as it is right

856
00:34:12,639 --> 00:34:15,440
now um it's still pretty

857
00:34:15,440 --> 00:34:16,639
i would say

858
00:34:16,639 --> 00:34:18,879
it does things but we can improve in

859
00:34:18,879 --> 00:34:20,800
terms of what it can do so like for

860
00:34:20,800 --> 00:34:23,440
example um currently uh we only process

861
00:34:23,440 --> 00:34:25,918
uh the security event logs or i.e you

862
00:34:25,918 --> 00:34:29,599
know the security.evtx um

863
00:34:29,599 --> 00:34:31,520
we can look at um

864
00:34:31,520 --> 00:34:33,280
for example expanding it to support more

865
00:34:33,280 --> 00:34:35,520
kind of events event logs more kind of

866
00:34:35,520 --> 00:34:37,359
logs and correlate

867
00:34:37,359 --> 00:34:39,040
between those kind of logs to see you

868
00:34:39,040 --> 00:34:40,800
know whether certain things actually

869
00:34:40,800 --> 00:34:43,040
happening or not um the third thing that

870
00:34:43,040 --> 00:34:44,560
we can look at is of course to use a

871
00:34:44,560 --> 00:34:46,320
larger data set to train our

872
00:34:46,320 --> 00:34:48,480
neural networks um currently

873
00:34:48,480 --> 00:34:50,320
uh because this is a you know this is a

874
00:34:50,320 --> 00:34:52,239
project that's meant to be exploratory

875
00:34:52,239 --> 00:34:53,040
the

876
00:34:53,040 --> 00:34:55,599
data set that we use um is

877
00:34:55,599 --> 00:34:57,200
i would say sufficient for the purpose

878
00:34:57,200 --> 00:34:58,640
of demonstrating the capability of the

879
00:34:58,640 --> 00:34:59,359
two

880
00:34:59,359 --> 00:35:01,520
but of course with more data

881
00:35:01,520 --> 00:35:03,599
results will definitely be better in

882
00:35:03,599 --> 00:35:06,079
this case right um so these are some

883
00:35:06,079 --> 00:35:07,040
things that we see that we can

884
00:35:07,040 --> 00:35:08,320
potentially do

885
00:35:08,320 --> 00:35:11,040
next slide please

886
00:35:11,119 --> 00:35:11,920
and

887
00:35:11,920 --> 00:35:14,240
the source code for all this has

888
00:35:14,240 --> 00:35:15,920
actually been released all right um the

889
00:35:15,920 --> 00:35:18,640
github repository can be owned with a

890
00:35:18,640 --> 00:35:20,560
documentation available online so if you

891
00:35:20,560 --> 00:35:21,520
want to try it out you can actually go

892
00:35:21,520 --> 00:35:23,599
and try it out right um but more

893
00:35:23,599 --> 00:35:24,720
importantly we're also looking at how to

894
00:35:24,720 --> 00:35:26,160
actually improve this tool how to

895
00:35:26,160 --> 00:35:28,320
actually add in more features uh one of

896
00:35:28,320 --> 00:35:30,079
the things that we can actually do uh

897
00:35:30,079 --> 00:35:31,520
what we mentioned just now for example a

898
00:35:31,520 --> 00:35:32,320
new

899
00:35:32,320 --> 00:35:34,160
hardware that uh

900
00:35:34,160 --> 00:35:35,440
that pairs well with the software like

901
00:35:35,440 --> 00:35:38,400
this and so on so it has to allow same

902
00:35:38,400 --> 00:35:39,760
the same seamless plug and play but at

903
00:35:39,760 --> 00:35:41,440
the same time on more

904
00:35:41,440 --> 00:35:43,119
or more

905
00:35:43,119 --> 00:35:45,280
forensics kind of platform right so uh

906
00:35:45,280 --> 00:35:46,800
if you have any questions you have any

907
00:35:46,800 --> 00:35:48,400
um you know

908
00:35:48,400 --> 00:35:49,760
you have any ideas or which

909
00:35:49,760 --> 00:35:51,520
collaborators are in terms of this feel

910
00:35:51,520 --> 00:35:53,520
free to drop us an email um kevin the

911
00:35:53,520 --> 00:35:55,440
patrick's email

912
00:35:55,440 --> 00:35:58,079
are there right um my set up we have a

913
00:35:58,079 --> 00:36:00,640
go at singapore.edu the sg right so feel

914
00:36:00,640 --> 00:36:02,079
free to drop us an email uh discuss

915
00:36:02,079 --> 00:36:04,320
about project i mean we are open to hear

916
00:36:04,320 --> 00:36:06,800
ideas see where we can what we can work

917
00:36:06,800 --> 00:36:08,560
on what we can improve

918
00:36:08,560 --> 00:36:10,720
and so on right so uh thank you for

919
00:36:10,720 --> 00:36:12,320
listening um there's qr code there if

920
00:36:12,320 --> 00:36:13,200
you want to take a look at the video

921
00:36:13,200 --> 00:36:14,640
demonstration again you can scan it you

922
00:36:14,640 --> 00:36:17,599
can uh you can take a look at it um

923
00:36:17,599 --> 00:36:19,040
or you can just distribute it to you

924
00:36:19,040 --> 00:36:20,480
know to whoever you think might be

925
00:36:20,480 --> 00:36:22,000
actually interesting in a project like

926
00:36:22,000 --> 00:36:24,480
this right so um yeah thank you everyone

927
00:36:24,480 --> 00:36:25,599
um we

928
00:36:25,599 --> 00:36:28,480
open the questions uh

929
00:36:28,640 --> 00:36:29,920
we're pretty much out of time

930
00:36:29,920 --> 00:36:31,599
unfortunately but there are a couple of

931
00:36:31,599 --> 00:36:33,119
questions here i'll try and rip through

932
00:36:33,119 --> 00:36:34,880
them extremely quickly in the last

933
00:36:34,880 --> 00:36:36,960
minute um is there a capability for the

934
00:36:36,960 --> 00:36:39,119
investigator to compromise the event log

935
00:36:39,119 --> 00:36:41,440
correlation and change the thresholds of

936
00:36:41,440 --> 00:36:43,920
the models

937
00:36:44,400 --> 00:36:46,079
um okay so

938
00:36:46,079 --> 00:36:47,359
this one

939
00:36:47,359 --> 00:36:48,800
um there are two ways of looking at it

940
00:36:48,800 --> 00:36:50,640
one is they compromise the event logs

941
00:36:50,640 --> 00:36:52,640
itself if they compromise

942
00:36:52,640 --> 00:36:54,879
i was

943
00:36:59,680 --> 00:37:02,400
customize the event logs that's correct

944
00:37:02,400 --> 00:37:04,160
all right um we're looking at expanding

945
00:37:04,160 --> 00:37:05,920
the capability of the tool right like

946
00:37:05,920 --> 00:37:07,359
what we mentioned just now whether we

947
00:37:07,359 --> 00:37:09,680
can you know include more kind of event

948
00:37:09,680 --> 00:37:11,520
logs um so that we have you know a

949
00:37:11,520 --> 00:37:13,440
better picture of the whole system that

950
00:37:13,440 --> 00:37:16,079
we're actually looking at

951
00:37:16,079 --> 00:37:17,839
and the other really quick one for you

952
00:37:17,839 --> 00:37:19,200
to answer is there any plans to allow

953
00:37:19,200 --> 00:37:20,640
for a remote collection without using

954
00:37:20,640 --> 00:37:22,720
the bash money

955
00:37:22,720 --> 00:37:25,520
um remarkable remote collection without

956
00:37:25,520 --> 00:37:27,920
using without use of batch money um

957
00:37:27,920 --> 00:37:30,079
all right so the the premise of using

958
00:37:30,079 --> 00:37:32,400
batch money is uh is because well a lot

959
00:37:32,400 --> 00:37:33,520
of the work that

960
00:37:33,520 --> 00:37:35,599
goes with collection is typically done

961
00:37:35,599 --> 00:37:37,680
manually right in stock and everything

962
00:37:37,680 --> 00:37:39,440
like that um so the idea is if you have

963
00:37:39,440 --> 00:37:41,280
a batch money loaded with scripts and

964
00:37:41,280 --> 00:37:43,599
this emulates what uh

965
00:37:43,599 --> 00:37:45,040
an analyst would do

966
00:37:45,040 --> 00:37:46,880
right um yeah that that pretty much

967
00:37:46,880 --> 00:37:48,720
automates the whole process um if you

968
00:37:48,720 --> 00:37:51,280
talk about cloud uh collecting

969
00:37:51,280 --> 00:37:52,720
through the clouds

970
00:37:52,720 --> 00:37:53,599
um

971
00:37:53,599 --> 00:37:54,720
if i understand questions correctly

972
00:37:54,720 --> 00:37:56,400
collecting all this data through the

973
00:37:56,400 --> 00:37:59,440
cloud um there

974
00:37:59,440 --> 00:38:00,480
we need to look at it from different

975
00:38:00,480 --> 00:38:02,000
perspectives it may not be a hardware

976
00:38:02,000 --> 00:38:04,480
anymore software module of sorts either

977
00:38:04,480 --> 00:38:06,880
that or it could be for example a remote

978
00:38:06,880 --> 00:38:09,119
uh you know some some kind of a linux

979
00:38:09,119 --> 00:38:10,800
distribution or something like that

980
00:38:10,800 --> 00:38:12,400
the device where we plug it in perhaps

981
00:38:12,400 --> 00:38:13,760
using the same concept of smash you know

982
00:38:13,760 --> 00:38:16,320
this mesh money company plug it in and

983
00:38:16,320 --> 00:38:18,240
this device then establish a connection

984
00:38:18,240 --> 00:38:20,560
over the internet of sorts and somebody

985
00:38:20,560 --> 00:38:22,079
can control it at a remote and to

986
00:38:22,079 --> 00:38:24,160
actually retrieve this data a more

987
00:38:24,160 --> 00:38:25,839
simpler approach will be well plug in

988
00:38:25,839 --> 00:38:28,000
this device data is collected data gets

989
00:38:28,000 --> 00:38:29,680
automatically sent to the cloud which is

990
00:38:29,680 --> 00:38:31,520
something that we actually thought of

991
00:38:31,520 --> 00:38:33,760
as well which and this is actually a

992
00:38:33,760 --> 00:38:35,359
more

993
00:38:35,359 --> 00:38:36,640
quite i would say very straightforward

994
00:38:36,640 --> 00:38:38,400
approach if you

995
00:38:38,400 --> 00:38:40,160
really implement this

996
00:38:40,160 --> 00:38:41,839
great thank you very much very

997
00:38:41,839 --> 00:38:43,280
informative talk

998
00:38:43,280 --> 00:38:45,440
all right thank you

999
00:38:45,440 --> 00:38:46,800
okay we've only got a couple of minutes

1000
00:38:46,800 --> 00:38:48,160
everybody so we just need to move

1001
00:38:48,160 --> 00:38:50,079
quickly to the next session

1002
00:38:50,079 --> 00:38:51,599
um we've got three minutes if you wish

1003
00:38:51,599 --> 00:38:54,920
to change rooms

1004
00:39:02,800 --> 00:39:04,880
you

