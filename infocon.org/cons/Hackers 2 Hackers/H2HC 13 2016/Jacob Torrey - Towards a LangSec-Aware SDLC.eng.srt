1
00:00:00,000 --> 00:00:03,990
<font color="#E5E5E5">all right as you</font><font color="#CCCCCC"> can tell there are two</font>

2
00:00:02,040 --> 00:00:06,089
names on the slides and<font color="#E5E5E5"> there's only one</font>

3
00:00:03,990 --> 00:00:08,970
<font color="#E5E5E5">person up here unless you want</font><font color="#CCCCCC"> to be</font>

4
00:00:06,089 --> 00:00:11,309
<font color="#E5E5E5">Sergey</font><font color="#CCCCCC"> Broadus for the afternoon</font><font color="#E5E5E5"> yeah</font>

5
00:00:08,970 --> 00:00:12,000
<font color="#E5E5E5">all right you can do this all right</font>

6
00:00:11,309 --> 00:00:15,059
<font color="#E5E5E5">perfect</font>

7
00:00:12,000 --> 00:00:17,520
so and if you may have<font color="#E5E5E5"> guessed</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> name</font>

8
00:00:15,059 --> 00:00:20,220
is<font color="#CCCCCC"> Jakob Torre</font><font color="#E5E5E5"> and I'll be talking</font><font color="#CCCCCC"> about</font>

9
00:00:17,520 --> 00:00:22,170
going<font color="#E5E5E5"> from theory to practice</font><font color="#CCCCCC"> and back</font>

10
00:00:20,220 --> 00:00:25,410
<font color="#E5E5E5">again with memes and gifts along the way</font>

11
00:00:22,170 --> 00:00:28,320
and inducting you<font color="#E5E5E5"> all into the cult of</font>

12
00:00:25,410 --> 00:00:31,619
<font color="#CCCCCC">lang sec</font><font color="#E5E5E5"> so thank you</font><font color="#CCCCCC"> all very much for</font>

13
00:00:28,320 --> 00:00:33,180
<font color="#E5E5E5">coming</font><font color="#CCCCCC"> as theorists</font><font color="#E5E5E5"> and academics we get</font>

14
00:00:31,619 --> 00:00:36,750
to be snide and kind of condescending

15
00:00:33,180 --> 00:00:39,600
<font color="#E5E5E5">from our ivory tower so exploits will be</font>

16
00:00:36,750 --> 00:00:42,360
patched but<font color="#CCCCCC"> lang SEC is forever</font><font color="#E5E5E5"> real</font>

17
00:00:39,600 --> 00:00:43,770
quick who are we or Who am I<font color="#CCCCCC"> I live in</font>

18
00:00:42,360 --> 00:00:45,960
<font color="#E5E5E5">Denver Colorado</font>

19
00:00:43,770 --> 00:00:47,640
I like cat pictures and I usually<font color="#CCCCCC"> do</font>

20
00:00:45,960 --> 00:00:52,170
<font color="#CCCCCC">low-level security research</font><font color="#E5E5E5"> so</font>

21
00:00:47,640 --> 00:00:53,940
hypervisor<font color="#E5E5E5"> EFI BIOS type security</font><font color="#CCCCCC"> Sergey</font>

22
00:00:52,170 --> 00:00:56,309
is a<font color="#E5E5E5"> professor at Dartmouth</font><font color="#CCCCCC"> College and</font>

23
00:00:53,940 --> 00:01:00,989
we're both co-conspirators<font color="#CCCCCC"> in this cult</font>

24
00:00:56,309 --> 00:01:03,629
of<font color="#CCCCCC"> Lang SEC we have an outline so</font>

25
00:01:00,989 --> 00:01:05,880
<font color="#E5E5E5">problem so because there's a lack of</font>

26
00:01:03,629 --> 00:01:07,679
<font color="#E5E5E5">objective and comprehensive metrics and</font>

27
00:01:05,880 --> 00:01:10,380
security and software development

28
00:01:07,680 --> 00:01:12,990
<font color="#E5E5E5">practices</font><font color="#CCCCCC"> ad hoc or cult-like</font>

29
00:01:10,380 --> 00:01:15,000
development practices have occurred<font color="#E5E5E5"> so</font>

30
00:01:12,990 --> 00:01:16,740
there's development based on tradition

31
00:01:15,000 --> 00:01:18,509
like this is how the person when I

32
00:01:16,740 --> 00:01:20,670
started<font color="#CCCCCC"> at</font><font color="#E5E5E5"> a company told me how to do</font>

33
00:01:18,509 --> 00:01:22,890
<font color="#CCCCCC">it or this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> how my professor</font><font color="#E5E5E5"> told me</font>

34
00:01:20,670 --> 00:01:24,960
<font color="#E5E5E5">how to do it</font><font color="#CCCCCC"> and there's a</font><font color="#E5E5E5"> very little</font>

35
00:01:22,890 --> 00:01:27,119
<font color="#E5E5E5">way for us to kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> question that and</font>

36
00:01:24,960 --> 00:01:28,649
figure out objectively is this way

37
00:01:27,119 --> 00:01:31,890
better than<font color="#E5E5E5"> another way that someone</font>

38
00:01:28,650 --> 00:01:33,689
<font color="#E5E5E5">else has told us and you know</font><font color="#CCCCCC"> you can</font>

39
00:01:31,890 --> 00:01:36,240
kind<font color="#CCCCCC"> of get into</font><font color="#E5E5E5"> these little cult</font><font color="#CCCCCC"> Wars</font>

40
00:01:33,689 --> 00:01:37,919
if someone says VI is better than Emacs

41
00:01:36,240 --> 00:01:40,170
<font color="#CCCCCC">I think you guys</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> know that</font>

42
00:01:37,920 --> 00:01:42,390
objectively Emacs is better<font color="#E5E5E5"> but the VI</font>

43
00:01:40,170 --> 00:01:43,710
people are<font color="#E5E5E5"> just kind of slow to get that</font>

44
00:01:42,390 --> 00:01:45,930
right<font color="#E5E5E5"> and so that's what we need is we</font>

45
00:01:43,710 --> 00:01:48,479
need metrics to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to understand</font>

46
00:01:45,930 --> 00:01:51,750
that<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the current issues</font>

47
00:01:48,479 --> 00:01:53,100
of<font color="#CCCCCC"> today I have issue of highlighted</font>

48
00:01:51,750 --> 00:01:55,740
especially as of yesterday<font color="#E5E5E5"> when</font>

49
00:01:53,100 --> 00:01:58,969
<font color="#CCCCCC">basically the u.s. decided it didn't</font>

50
00:01:55,740 --> 00:02:01,589
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to do Twitter or github or the news</font>

51
00:01:58,969 --> 00:02:05,009
<font color="#CCCCCC">basically the status quo is not doing</font>

52
00:02:01,590 --> 00:02:07,229
too<font color="#CCCCCC"> great more software</font><font color="#E5E5E5"> is being written</font>

53
00:02:05,009 --> 00:02:10,080
<font color="#E5E5E5">than ever before by a more diverse</font><font color="#CCCCCC"> group</font>

54
00:02:07,229 --> 00:02:12,430
<font color="#CCCCCC">and</font><font color="#E5E5E5"> secure composition of all these</font>

55
00:02:10,080 --> 00:02:14,500
components<font color="#E5E5E5"> and libraries is very hard so</font>

56
00:02:12,430 --> 00:02:16,540
I'm sure in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> future</font><font color="#E5E5E5"> you know we have</font>

57
00:02:14,500 --> 00:02:19,689
pwned<font color="#E5E5E5"> by cloud-enabled light bulb now</font>

58
00:02:16,540 --> 00:02:21,909
it's a cloud enabled computer<font color="#E5E5E5"> video</font>

59
00:02:19,689 --> 00:02:23,370
<font color="#E5E5E5">camera so that's kind of where we're at</font>

60
00:02:21,909 --> 00:02:27,189
<font color="#CCCCCC">right now</font>

61
00:02:23,370 --> 00:02:29,290
so<font color="#CCCCCC"> keno last year at troopers by Sergei</font>

62
00:02:27,189 --> 00:02:31,900
<font color="#CCCCCC">talks</font><font color="#E5E5E5"> about the theoretical</font>

63
00:02:29,290 --> 00:02:33,519
underpinnings<font color="#E5E5E5"> of cyber insecurity it's a</font>

64
00:02:31,900 --> 00:02:35,799
great talk it's on<font color="#CCCCCC"> YouTube check it out</font>

65
00:02:33,519 --> 00:02:39,060
it's<font color="#CCCCCC"> called my favorite things the field</font>

66
00:02:35,799 --> 00:02:41,769
of<font color="#CCCCCC"> Lang SEC</font><font color="#E5E5E5"> basically uses computational</font>

67
00:02:39,060 --> 00:02:45,069
<font color="#E5E5E5">complexity theory to argue about the</font>

68
00:02:41,769 --> 00:02:48,069
root<font color="#CCCCCC"> causes of vulnerabilities and why</font>

69
00:02:45,069 --> 00:02:51,159
exploits exist<font color="#E5E5E5"> so exploits are basically</font>

70
00:02:48,069 --> 00:02:53,918
<font color="#E5E5E5">these weird machines where data is the</font>

71
00:02:51,159 --> 00:02:57,250
code that<font color="#CCCCCC"> the program is the interpreter</font>

72
00:02:53,919 --> 00:03:01,719
for<font color="#E5E5E5"> so exploits are proofs of insecurity</font>

73
00:02:57,250 --> 00:03:04,750
<font color="#E5E5E5">and they are just basically</font><font color="#CCCCCC"> Rika siding</font>

74
00:03:01,719 --> 00:03:07,209
how the program should<font color="#CCCCCC"> run outside of</font>

75
00:03:04,750 --> 00:03:08,980
the intention of the developer so we

76
00:03:07,209 --> 00:03:11,950
also need a software development<font color="#E5E5E5"> life</font>

77
00:03:08,980 --> 00:03:13,480
cycle SDLC<font color="#CCCCCC"> in order to take</font><font color="#E5E5E5"> Lang</font><font color="#CCCCCC"> SEC and</font>

78
00:03:11,950 --> 00:03:15,638
put it into practice<font color="#E5E5E5"> and that's what</font>

79
00:03:13,480 --> 00:03:18,518
we're<font color="#E5E5E5"> gonna try to talk about today</font><font color="#CCCCCC"> so</font>

80
00:03:15,639 --> 00:03:20,349
<font color="#CCCCCC">hopefully after this talk I'm people</font>

81
00:03:18,519 --> 00:03:22,599
<font color="#E5E5E5">will understand what Lang</font><font color="#CCCCCC"> stack is how</font>

82
00:03:20,349 --> 00:03:25,599
it has a<font color="#E5E5E5"> crucial impact to building</font>

83
00:03:22,599 --> 00:03:27,399
secure software<font color="#E5E5E5"> have a framework to</font>

84
00:03:25,599 --> 00:03:29,379
transition that into<font color="#E5E5E5"> practice and into</font>

85
00:03:27,400 --> 00:03:30,549
their development practice for those of

86
00:03:29,379 --> 00:03:32,228
you in the<font color="#CCCCCC"> room who are developers who</font>

87
00:03:30,549 --> 00:03:34,150
<font color="#CCCCCC">are developers</font><font color="#E5E5E5"> or write software raise</font>

88
00:03:32,229 --> 00:03:36,909
your hand<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right</font>

89
00:03:34,150 --> 00:03:39,099
like three people<font color="#CCCCCC"> great</font><font color="#E5E5E5"> so for those of</font>

90
00:03:36,909 --> 00:03:41,470
you you'll be able to recognize

91
00:03:39,099 --> 00:03:43,569
dangerous constructs and avoid some of

92
00:03:41,470 --> 00:03:45,129
these defect prone semantics<font color="#E5E5E5"> and I'm</font>

93
00:03:43,569 --> 00:03:46,899
assuming<font color="#CCCCCC"> that</font><font color="#E5E5E5"> everyone else is a program</font>

94
00:03:45,129 --> 00:03:49,659
<font color="#CCCCCC">manager right everyone else is a manager</font>

95
00:03:46,900 --> 00:03:51,790
no technical skills<font color="#E5E5E5"> perfect you're gonna</font>

96
00:03:49,659 --> 00:03:54,129
get to audit these five people<font color="#CCCCCC"> upfront</font>

97
00:03:51,790 --> 00:03:56,620
<font color="#CCCCCC">who are developers and so you can</font><font color="#E5E5E5"> then</font>

98
00:03:54,129 --> 00:03:58,720
<font color="#E5E5E5">use this</font><font color="#CCCCCC"> to sell the the underpinnings</font>

99
00:03:56,620 --> 00:04:00,400
and the theory to increase your

100
00:03:58,720 --> 00:04:02,259
corporate buy-in and get a bigger budget

101
00:04:00,400 --> 00:04:04,239
to go travel to conferences around<font color="#E5E5E5"> the</font>

102
00:04:02,259 --> 00:04:07,509
<font color="#E5E5E5">world so</font><font color="#CCCCCC"> all in all this should be a</font>

103
00:04:04,239 --> 00:04:10,659
<font color="#E5E5E5">great talk for everyone so I think as</font>

104
00:04:07,509 --> 00:04:13,988
we've seen for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> last 15 years</font><font color="#CCCCCC"> bugs</font>

105
00:04:10,659 --> 00:04:15,939
will happen<font color="#E5E5E5"> how you structure your</font><font color="#CCCCCC"> SDLC</font>

106
00:04:13,989 --> 00:04:18,009
basically dictates where in the process

107
00:04:15,939 --> 00:04:19,988
<font color="#CCCCCC">that will that finding process will</font>

108
00:04:18,009 --> 00:04:22,150
happen<font color="#CCCCCC"> right the sooner you find the</font>

109
00:04:19,988 --> 00:04:23,830
bugs the<font color="#E5E5E5"> happer you are because the cost</font>

110
00:04:22,150 --> 00:04:25,530
goes down<font color="#E5E5E5"> and the impact to your bottom</font>

111
00:04:23,830 --> 00:04:31,359
<font color="#CCCCCC">line</font>

112
00:04:25,530 --> 00:04:35,369
we've also seen<font color="#CCCCCC"> I think I have 10%</font>

113
00:04:31,360 --> 00:04:36,639
battery life someone whose staff or

114
00:04:35,370 --> 00:04:42,879
excuse me

115
00:04:36,639 --> 00:04:47,919
staff<font color="#E5E5E5"> I have 10% battery life so I can</font>

116
00:04:42,879 --> 00:04:54,449
<font color="#CCCCCC">go really</font><font color="#E5E5E5"> quick I have another like 70</font>

117
00:04:47,919 --> 00:04:54,448
slides<font color="#E5E5E5"> oh yeah</font>

118
00:04:56,990 --> 00:05:03,120
fantastic so<font color="#E5E5E5"> a lot of</font><font color="#CCCCCC"> organizations have</font>

119
00:05:01,560 --> 00:05:05,520
kind<font color="#E5E5E5"> of arrived at these theoretical</font>

120
00:05:03,120 --> 00:05:06,719
underpinnings<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of by happenstance</font>

121
00:05:05,520 --> 00:05:08,400
<font color="#E5E5E5">and so we want to make sure they don't</font>

122
00:05:06,719 --> 00:05:10,560
<font color="#E5E5E5">just happen to move away from them</font>

123
00:05:08,400 --> 00:05:12,419
somewhere<font color="#E5E5E5"> else</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> talking about finding</font>

124
00:05:10,560 --> 00:05:14,550
<font color="#E5E5E5">bugs right see how happy all these</font>

125
00:05:12,419 --> 00:05:15,930
people are they found<font color="#E5E5E5"> a bug during a</font>

126
00:05:14,550 --> 00:05:17,400
meeting<font color="#E5E5E5"> and they're also in a stock</font>

127
00:05:15,930 --> 00:05:19,710
photo so that's why they're<font color="#E5E5E5"> being paid</font>

128
00:05:17,400 --> 00:05:21,448
to<font color="#E5E5E5"> be happy right</font><font color="#CCCCCC"> but they all</font><font color="#E5E5E5"> found</font>

129
00:05:19,710 --> 00:05:23,460
this bug<font color="#E5E5E5"> at the design and</font><font color="#CCCCCC"> architecture</font>

130
00:05:21,449 --> 00:05:24,810
<font color="#E5E5E5">review so they haven't even written a</font>

131
00:05:23,460 --> 00:05:28,020
<font color="#E5E5E5">single line</font><font color="#CCCCCC"> of code and they've already</font>

132
00:05:24,810 --> 00:05:30,180
fixed a bug right this guy<font color="#E5E5E5"> I mean look</font>

133
00:05:28,020 --> 00:05:32,250
at him he is<font color="#E5E5E5"> thrilled because his</font>

134
00:05:30,180 --> 00:05:34,379
compiler told him he made a mistake<font color="#E5E5E5"> and</font>

135
00:05:32,250 --> 00:05:36,840
he was able<font color="#CCCCCC"> to fix it now rather than</font>

136
00:05:34,379 --> 00:05:37,979
<font color="#CCCCCC">having to get</font><font color="#E5E5E5"> a bug report and a QA guy</font>

137
00:05:36,840 --> 00:05:40,080
calling<font color="#E5E5E5"> him at 2:00</font><font color="#CCCCCC"> in the morning</font>

138
00:05:37,979 --> 00:05:41,969
<font color="#CCCCCC">because production is down</font><font color="#E5E5E5"> and at Google</font>

139
00:05:40,080 --> 00:05:44,128
<font color="#CCCCCC">they're losing</font><font color="#E5E5E5"> a million dollars a</font>

140
00:05:41,969 --> 00:05:45,569
minute<font color="#CCCCCC"> because their ad system is down I</font>

141
00:05:44,129 --> 00:05:46,800
<font color="#E5E5E5">think that's well I have a friend that</font>

142
00:05:45,569 --> 00:05:48,810
worked at<font color="#CCCCCC"> Google and he said you're not</font>

143
00:05:46,800 --> 00:05:51,080
a real Googler until you've cost the

144
00:05:48,810 --> 00:05:53,340
company<font color="#CCCCCC"> at least</font><font color="#E5E5E5"> a million</font><font color="#CCCCCC"> dollars so</font>

145
00:05:51,080 --> 00:05:57,240
this<font color="#CCCCCC"> guy is happy because</font><font color="#E5E5E5"> he's not a</font>

146
00:05:53,340 --> 00:05:59,758
Googler right this guy's in dynamic

147
00:05:57,240 --> 00:06:01,560
testing and QA Quality Assurance and you

148
00:05:59,759 --> 00:06:02,819
know he's hoping<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the QA guys</font><font color="#E5E5E5"> are</font>

149
00:06:01,560 --> 00:06:04,379
good and that<font color="#CCCCCC"> you know his dynamic</font>

150
00:06:02,819 --> 00:06:06,839
<font color="#E5E5E5">testing is going</font><font color="#CCCCCC"> to get to some of those</font>

151
00:06:04,379 --> 00:06:10,860
code paths that are a little sketchy<font color="#E5E5E5"> but</font>

152
00:06:06,839 --> 00:06:12,900
<font color="#CCCCCC">he's not so bad</font><font color="#E5E5E5"> this is not as good</font>

153
00:06:10,860 --> 00:06:14,699
<font color="#CCCCCC">right when Liam Nilsson calls you and</font>

154
00:06:12,900 --> 00:06:16,919
<font color="#E5E5E5">says I have a bug and I'm going</font><font color="#CCCCCC"> to find</font>

155
00:06:14,699 --> 00:06:19,409
it<font color="#CCCCCC"> and basically pown you that's not</font>

156
00:06:16,919 --> 00:06:21,180
<font color="#CCCCCC">your</font><font color="#E5E5E5"> ideal situation and certainly you</font>

157
00:06:19,409 --> 00:06:22,740
know bug bounties are good in that<font color="#E5E5E5"> sense</font>

158
00:06:21,180 --> 00:06:24,240
that<font color="#CCCCCC"> now they're going</font><font color="#E5E5E5"> to least tell you</font>

159
00:06:22,740 --> 00:06:25,860
but you still<font color="#E5E5E5"> need to</font><font color="#CCCCCC"> get that</font><font color="#E5E5E5"> early</font>

160
00:06:24,240 --> 00:06:27,839
phone call and have to deal<font color="#E5E5E5"> with it</font>

161
00:06:25,860 --> 00:06:30,300
figure it<font color="#E5E5E5"> out and scramble resources and</font>

162
00:06:27,839 --> 00:06:31,580
then there's the<font color="#E5E5E5"> last case so this is I</font>

163
00:06:30,300 --> 00:06:34,169
don't<font color="#E5E5E5"> know for you</font><font color="#CCCCCC"> guys who</font><font color="#E5E5E5"> don't know</font>

164
00:06:31,580 --> 00:06:36,479
<font color="#E5E5E5">recently in the</font><font color="#CCCCCC"> u.s. the OPM which</font>

165
00:06:34,169 --> 00:06:39,330
basically handles everyone's clearances

166
00:06:36,479 --> 00:06:40,770
they got massively owned<font color="#CCCCCC"> and this was</font>

167
00:06:39,330 --> 00:06:43,948
the director getting hauled in front of

168
00:06:40,770 --> 00:06:45,659
<font color="#E5E5E5">Congress trying to explain why even</font>

169
00:06:43,949 --> 00:06:47,009
<font color="#E5E5E5">after the Attorney General told her to</font>

170
00:06:45,659 --> 00:06:48,779
shut everything down<font color="#E5E5E5"> because it was</font>

171
00:06:47,009 --> 00:06:50,759
insecure<font color="#CCCCCC"> she ignored the Attorney</font>

172
00:06:48,779 --> 00:06:52,409
General and just kept doing<font color="#E5E5E5"> it so she's</font>

173
00:06:50,759 --> 00:06:54,900
not the happiest person in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> room</font>

174
00:06:52,409 --> 00:06:56,069
right<font color="#E5E5E5"> now</font><font color="#CCCCCC"> you also don't want to be</font>

175
00:06:54,900 --> 00:06:59,159
<font color="#E5E5E5">hauled in front of the US Congress</font>

176
00:06:56,069 --> 00:07:02,219
<font color="#CCCCCC">probably all right</font><font color="#E5E5E5"> so now</font><font color="#CCCCCC"> that we have</font>

177
00:06:59,159 --> 00:07:04,409
<font color="#E5E5E5">kind of the overall frame of how we want</font>

178
00:07:02,219 --> 00:07:06,630
to<font color="#E5E5E5"> do this let's take a very</font><font color="#CCCCCC"> concrete</font>

179
00:07:04,409 --> 00:07:09,449
<font color="#CCCCCC">example so</font><font color="#E5E5E5"> dnp3</font>

180
00:07:06,630 --> 00:07:11,639
is a protocol<font color="#E5E5E5"> used</font>

181
00:07:09,449 --> 00:07:14,059
<font color="#CCCCCC">a lot of in like industrial systems and</font>

182
00:07:11,639 --> 00:07:17,909
power control systems<font color="#CCCCCC"> and so my</font>

183
00:07:14,059 --> 00:07:19,889
co-presenter<font color="#CCCCCC"> right here worked</font><font color="#E5E5E5"> with a</font>

184
00:07:17,909 --> 00:07:21,150
few<font color="#E5E5E5"> other folks he had an academic</font><font color="#CCCCCC"> he</font>

185
00:07:19,889 --> 00:07:23,610
had an industry guy and then kind of

186
00:07:21,150 --> 00:07:25,739
like<font color="#E5E5E5"> government folk to be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> see</font>

187
00:07:23,610 --> 00:07:28,860
what we could look at if<font color="#CCCCCC"> we design a</font>

188
00:07:25,740 --> 00:07:30,930
<font color="#E5E5E5">dnp3 parser from the ground up with the</font>

189
00:07:28,860 --> 00:07:34,499
<font color="#CCCCCC">Lang SEC processes so what is</font><font color="#E5E5E5"> Lang</font><font color="#CCCCCC"> SEC</font>

190
00:07:30,930 --> 00:07:36,930
so Lang SEC posits the security issues

191
00:07:34,499 --> 00:07:40,589
stem<font color="#CCCCCC"> from a lack of recognition</font><font color="#E5E5E5"> of the</font>

192
00:07:36,930 --> 00:07:43,860
language and so an exploit is basically

193
00:07:40,589 --> 00:07:46,860
allowing<font color="#E5E5E5"> bad input to come in and take</font>

194
00:07:43,860 --> 00:07:48,629
over<font color="#E5E5E5"> that process</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the question is</font>

195
00:07:46,860 --> 00:07:50,939
is what<font color="#CCCCCC"> do</font><font color="#E5E5E5"> you accept what is expected</font>

196
00:07:48,629 --> 00:07:53,339
in what is<font color="#E5E5E5"> valid</font><font color="#CCCCCC"> so our a great</font><font color="#E5E5E5"> example</font>

197
00:07:50,939 --> 00:07:56,039
<font color="#CCCCCC">of this is return oriented programming</font>

198
00:07:53,339 --> 00:07:58,139
basically you're allowing<font color="#E5E5E5"> the attacker</font>

199
00:07:56,039 --> 00:08:00,080
<font color="#E5E5E5">to give you an assembly</font><font color="#CCCCCC"> language</font><font color="#E5E5E5"> or</font>

200
00:07:58,139 --> 00:08:02,460
return addresses<font color="#E5E5E5"> that then is</font>

201
00:08:00,080 --> 00:08:04,979
<font color="#E5E5E5">reorganizing the execution flow through</font>

202
00:08:02,460 --> 00:08:07,138
<font color="#E5E5E5">your binary and so technically you've</font>

203
00:08:04,979 --> 00:08:09,568
allowed them to<font color="#E5E5E5"> do that</font><font color="#CCCCCC"> because you've</font>

204
00:08:07,139 --> 00:08:12,240
created<font color="#E5E5E5"> a weird machine or a almost like</font>

205
00:08:09,569 --> 00:08:13,830
an ad hoc virtual machine that<font color="#CCCCCC"> is now</font>

206
00:08:12,240 --> 00:08:18,659
running<font color="#E5E5E5"> that return on to</font><font color="#CCCCCC"> programing</font>

207
00:08:13,830 --> 00:08:21,029
exploit so we see a lot of this stuff<font color="#CCCCCC"> a</font>

208
00:08:18,659 --> 00:08:22,469
lot of fails and then if you look at

209
00:08:21,029 --> 00:08:23,819
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of the things</font><font color="#E5E5E5"> like heartbleed which</font>

210
00:08:22,469 --> 00:08:25,979
<font color="#CCCCCC">we'll talk</font><font color="#E5E5E5"> about a little bit later</font><font color="#CCCCCC"> you</font>

211
00:08:23,819 --> 00:08:27,449
<font color="#CCCCCC">know</font><font color="#E5E5E5"> if you look at the complexities</font><font color="#CCCCCC"> of</font>

212
00:08:25,979 --> 00:08:30,539
some of this code that's<font color="#E5E5E5"> getting owned</font>

213
00:08:27,449 --> 00:08:32,250
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> basically it's getting way out</font>

214
00:08:30,539 --> 00:08:34,169
of<font color="#CCCCCC"> whack in terms of how complex it</font>

215
00:08:32,250 --> 00:08:36,839
needs to be and we'll see with<font color="#E5E5E5"> dnp3 some</font>

216
00:08:34,169 --> 00:08:38,880
really concrete examples of<font color="#E5E5E5"> that some of</font>

217
00:08:36,839 --> 00:08:41,039
which we're gonna call<font color="#CCCCCC"> poison so anytime</font>

218
00:08:38,880 --> 00:08:42,539
you<font color="#CCCCCC"> have a nested length field</font><font color="#E5E5E5"> fields</font>

219
00:08:41,039 --> 00:08:45,120
that have to agree<font color="#CCCCCC"> that might have</font>

220
00:08:42,539 --> 00:08:46,560
happened out of<font color="#E5E5E5"> order etc you get into</font>

221
00:08:45,120 --> 00:08:47,880
some weird situations where you're

222
00:08:46,560 --> 00:08:49,439
<font color="#CCCCCC">trying</font><font color="#E5E5E5"> to figure</font><font color="#CCCCCC"> out if</font><font color="#E5E5E5"> this input is</font>

223
00:08:47,880 --> 00:08:53,310
valid or you should reject it because

224
00:08:49,440 --> 00:08:55,589
<font color="#E5E5E5">it's possibly some form of exploit fun</font>

225
00:08:53,310 --> 00:08:58,109
facts of the<font color="#E5E5E5"> PDF spec you can actually</font>

226
00:08:55,589 --> 00:08:59,910
<font color="#E5E5E5">have the length of an object</font><font color="#CCCCCC"> point to</font>

227
00:08:58,110 --> 00:09:01,380
<font color="#E5E5E5">another length and then that one can</font>

228
00:08:59,910 --> 00:09:02,969
<font color="#E5E5E5">point back</font><font color="#CCCCCC"> so you could basically make a</font>

229
00:09:01,380 --> 00:09:04,769
circle<font color="#E5E5E5"> and you can make the Adobe</font><font color="#CCCCCC"> Reader</font>

230
00:09:02,970 --> 00:09:07,529
go in a circle<font color="#CCCCCC"> for</font><font color="#E5E5E5"> a long long long long</font>

231
00:09:04,769 --> 00:09:10,410
<font color="#CCCCCC">time</font><font color="#E5E5E5"> so that's kind of an</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> of</font>

232
00:09:07,529 --> 00:09:12,870
maybe some syntactical poison so a

233
00:09:10,410 --> 00:09:15,810
<font color="#E5E5E5">couple cool quotes right data format is</font>

234
00:09:12,870 --> 00:09:18,660
codes destiny<font color="#CCCCCC"> and then the other one is</font>

235
00:09:15,810 --> 00:09:20,640
<font color="#E5E5E5">basically the complex specifications</font>

236
00:09:18,660 --> 00:09:23,130
that<font color="#E5E5E5"> managers are creating and then</font>

237
00:09:20,640 --> 00:09:24,630
forcing<font color="#E5E5E5"> software developers to</font><font color="#CCCCCC"> use</font>

238
00:09:23,130 --> 00:09:27,420
<font color="#E5E5E5">are complicated enough</font><font color="#CCCCCC"> that they should</font>

239
00:09:24,630 --> 00:09:29,790
<font color="#CCCCCC">be verified using formal methods or some</font>

240
00:09:27,420 --> 00:09:32,300
other form of automated techniques but

241
00:09:29,790 --> 00:09:35,969
basically<font color="#E5E5E5"> because they're so complicated</font>

242
00:09:32,300 --> 00:09:37,890
<font color="#CCCCCC">the algorithms needed to</font><font color="#E5E5E5"> verify them or</font>

243
00:09:35,970 --> 00:09:40,050
undecidable which means they'll<font color="#E5E5E5"> either</font>

244
00:09:37,890 --> 00:09:42,180
say yes<font color="#CCCCCC"> this software</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> a bug in it or</font>

245
00:09:40,050 --> 00:09:43,560
I don't<font color="#E5E5E5"> know and I'll take until the</font>

246
00:09:42,180 --> 00:09:45,660
heat death of the universe for<font color="#E5E5E5"> me to</font>

247
00:09:43,560 --> 00:09:48,030
tell you<font color="#CCCCCC"> so that's what</font><font color="#E5E5E5"> we're trying to</font>

248
00:09:45,660 --> 00:09:50,130
<font color="#CCCCCC">address so here we go we're gonna start</font>

249
00:09:48,030 --> 00:09:52,020
<font color="#E5E5E5">with a grammar so this is basically what</font>

250
00:09:50,130 --> 00:09:54,540
we<font color="#E5E5E5"> want DNP to be able</font><font color="#CCCCCC"> to communicate</font>

251
00:09:52,020 --> 00:09:56,490
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> format for that if we don't know</font>

252
00:09:54,540 --> 00:09:58,980
what<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is to start with how on earth</font>

253
00:09:56,490 --> 00:10:00,810
are we<font color="#CCCCCC"> going to expect that</font><font color="#E5E5E5"> anyone can</font>

254
00:09:58,980 --> 00:10:04,050
write software<font color="#CCCCCC"> for a protocol we don't</font>

255
00:10:00,810 --> 00:10:05,550
<font color="#E5E5E5">even know yeah so then also if the</font>

256
00:10:04,050 --> 00:10:06,120
protocol comes without a grammar you're

257
00:10:05,550 --> 00:10:08,939
in big<font color="#CCCCCC"> trouble</font>

258
00:10:06,120 --> 00:10:10,680
<font color="#E5E5E5">and then once you have</font><font color="#CCCCCC"> that grammar then</font>

259
00:10:08,940 --> 00:10:13,140
you can<font color="#E5E5E5"> basically start</font><font color="#CCCCCC"> from the very</font>

260
00:10:10,680 --> 00:10:15,719
<font color="#CCCCCC">bottom of</font><font color="#E5E5E5"> these kind of you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> little</font>

261
00:10:13,140 --> 00:10:17,370
pieces of<font color="#E5E5E5"> it and build it up in kind of</font>

262
00:10:15,720 --> 00:10:19,860
a<font color="#E5E5E5"> very iterative way that you can test</font>

263
00:10:17,370 --> 00:10:21,810
in each increment<font color="#CCCCCC"> that way you don't</font>

264
00:10:19,860 --> 00:10:23,190
<font color="#CCCCCC">have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> have the whole testing</font>

265
00:10:21,810 --> 00:10:26,130
<font color="#E5E5E5">everything when it's done you can test</font>

266
00:10:23,190 --> 00:10:29,370
<font color="#E5E5E5">each part so what do we do to do that</font>

267
00:10:26,130 --> 00:10:31,560
<font color="#E5E5E5">parser</font><font color="#CCCCCC"> combinators so basically we can</font>

268
00:10:29,370 --> 00:10:33,450
<font color="#E5E5E5">start with a really small unit of data</font>

269
00:10:31,560 --> 00:10:35,609
and then<font color="#E5E5E5"> we can build them up</font><font color="#CCCCCC"> to make</font>

270
00:10:33,450 --> 00:10:38,310
<font color="#E5E5E5">bigger units imagine like a structure</font>

271
00:10:35,610 --> 00:10:40,470
I'll talk a<font color="#CCCCCC"> little bit later about a way</font>

272
00:10:38,310 --> 00:10:42,689
you can do this<font color="#E5E5E5"> so you can handle very</font>

273
00:10:40,470 --> 00:10:44,130
complex data<font color="#CCCCCC"> structures and I'll talk a</font>

274
00:10:42,690 --> 00:10:45,570
<font color="#E5E5E5">little bit about hammer so Meredith</font>

275
00:10:44,130 --> 00:10:47,040
Patterson was supposed to come<font color="#E5E5E5"> and</font>

276
00:10:45,570 --> 00:10:48,900
<font color="#CCCCCC">present but she couldn't the last minute</font>

277
00:10:47,040 --> 00:10:50,730
<font color="#E5E5E5">she</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> gonna present</font><font color="#CCCCCC"> her work which is</font>

278
00:10:48,900 --> 00:10:52,140
is<font color="#CCCCCC"> actually hammer</font><font color="#E5E5E5"> and I'll have a</font>

279
00:10:50,730 --> 00:10:53,880
<font color="#E5E5E5">couple slides in there so for those</font><font color="#CCCCCC"> of</font>

280
00:10:52,140 --> 00:10:55,050
<font color="#CCCCCC">you who really interested I'll you can</font>

281
00:10:53,880 --> 00:10:58,790
<font color="#E5E5E5">at least tell you what it is</font><font color="#CCCCCC"> and then</font>

282
00:10:55,050 --> 00:11:01,979
you<font color="#CCCCCC"> can reach out to her so back to dnp3</font>

283
00:10:58,790 --> 00:11:06,060
<font color="#E5E5E5">it does have</font><font color="#CCCCCC"> issues</font><font color="#E5E5E5"> if you want to count</font>

284
00:11:01,980 --> 00:11:07,980
<font color="#E5E5E5">CVEs there are some of them</font><font color="#CCCCCC"> they tested</font>

285
00:11:06,060 --> 00:11:10,890
about dozens of implantation<font color="#E5E5E5"> and very</font>

286
00:11:07,980 --> 00:11:13,410
very few had no problems they also had a

287
00:11:10,890 --> 00:11:14,850
set up a special buzzer for these

288
00:11:13,410 --> 00:11:17,969
implementations and<font color="#E5E5E5"> they're able to find</font>

289
00:11:14,850 --> 00:11:22,220
<font color="#E5E5E5">more crashes</font><font color="#CCCCCC"> those that had the fewest</font>

290
00:11:17,970 --> 00:11:24,030
<font color="#E5E5E5">defects basically chose a subset of dnp3</font>

291
00:11:22,220 --> 00:11:26,910
so what happens<font color="#E5E5E5"> when you have</font><font color="#CCCCCC"> a bad</font>

292
00:11:24,030 --> 00:11:29,069
specification so<font color="#CCCCCC"> OpenSSL if you looked</font>

293
00:11:26,910 --> 00:11:31,500
<font color="#E5E5E5">at their parsing it's as Sergei says</font>

294
00:11:29,070 --> 00:11:32,880
pointer salad<font color="#E5E5E5"> basically you're trying to</font>

295
00:11:31,500 --> 00:11:35,250
figure<font color="#CCCCCC"> out</font><font color="#E5E5E5"> what it was doing and you</font>

296
00:11:32,880 --> 00:11:37,080
<font color="#CCCCCC">have no</font><font color="#E5E5E5"> idea and so in the</font><font color="#CCCCCC"> next</font><font color="#E5E5E5"> slide</font>

297
00:11:35,250 --> 00:11:39,120
I'll<font color="#CCCCCC"> show you the heartbleed bug</font>

298
00:11:37,080 --> 00:11:40,560
and then the fix for<font color="#CCCCCC"> it and then</font>

299
00:11:39,120 --> 00:11:42,630
basically for<font color="#E5E5E5"> those of you three</font>

300
00:11:40,560 --> 00:11:43,680
developers or five developers<font color="#E5E5E5"> raise your</font>

301
00:11:42,630 --> 00:11:45,300
hand when you understand what<font color="#CCCCCC"> the</font>

302
00:11:43,680 --> 00:11:46,770
<font color="#CCCCCC">underlying issue was and then you can</font>

303
00:11:45,300 --> 00:11:48,240
come<font color="#CCCCCC"> up on stage and describe it to</font>

304
00:11:46,770 --> 00:11:50,640
everyone all right

305
00:11:48,240 --> 00:11:52,200
another issue<font color="#E5E5E5"> is for asn.1 parsers which</font>

306
00:11:50,640 --> 00:11:55,220
are used in<font color="#E5E5E5"> a whole bunch of</font><font color="#CCCCCC"> encryptions</font>

307
00:11:52,200 --> 00:11:57,990
<font color="#CCCCCC">already developers go</font>

308
00:11:55,220 --> 00:12:00,960
so it's something<font color="#CCCCCC"> in</font><font color="#E5E5E5"> that one plus two</font>

309
00:11:57,990 --> 00:12:04,020
<font color="#CCCCCC">plus</font><font color="#E5E5E5"> payload plus 16 is greater than ask</font>

310
00:12:00,960 --> 00:12:07,740
<font color="#E5E5E5">to s3 to rrx so clearly that's defined</font>

311
00:12:04,020 --> 00:12:09,870
in some RFC<font color="#E5E5E5"> 65 20</font><font color="#CCCCCC"> section four so I mean</font>

312
00:12:07,740 --> 00:12:12,330
well<font color="#E5E5E5"> that's pretty obvious</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> these are</font>

313
00:12:09,870 --> 00:12:14,520
will be called shotgun parsers<font color="#E5E5E5"> basically</font>

314
00:12:12,330 --> 00:12:17,130
it's like someone took<font color="#CCCCCC"> a gun with loaded</font>

315
00:12:14,520 --> 00:12:18,930
with a bullet<font color="#E5E5E5"> or I guess a shell with</font>

316
00:12:17,130 --> 00:12:20,610
parsers<font color="#CCCCCC"> and they screwed it</font><font color="#E5E5E5"> all over</font>

317
00:12:18,930 --> 00:12:21,989
their code so it's like spaghetti<font color="#E5E5E5"> but</font>

318
00:12:20,610 --> 00:12:27,830
it's not just tasty and it's full<font color="#CCCCCC"> of</font>

319
00:12:21,990 --> 00:12:27,830
<font color="#E5E5E5">lead and will kill you so another thing</font>

320
00:12:28,220 --> 00:12:31,410
<font color="#E5E5E5">complexity is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> grown uniformly they</font>

321
00:12:30,420 --> 00:12:34,050
have something known<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the Chomsky</font>

322
00:12:31,410 --> 00:12:35,610
<font color="#E5E5E5">hierarchy which describes how different</font>

323
00:12:34,050 --> 00:12:37,500
languages get more and<font color="#CCCCCC"> more complicated</font>

324
00:12:35,610 --> 00:12:39,930
<font color="#E5E5E5">and they can handle more and more</font>

325
00:12:37,500 --> 00:12:41,220
<font color="#CCCCCC">powerful inputs</font><font color="#E5E5E5"> like regular expression</font>

326
00:12:39,930 --> 00:12:45,060
is a lot less powerful than<font color="#E5E5E5"> like a</font>

327
00:12:41,220 --> 00:12:47,670
Python<font color="#E5E5E5"> interpreter</font><font color="#CCCCCC"> fortunately once you</font>

328
00:12:45,060 --> 00:12:48,989
hit a certain<font color="#CCCCCC"> level on that as</font><font color="#E5E5E5"> a Turing</font>

329
00:12:47,670 --> 00:12:50,670
completeness you've fallen off<font color="#E5E5E5"> the</font>

330
00:12:48,990 --> 00:12:53,100
verification cliff<font color="#E5E5E5"> and you can no</font><font color="#CCCCCC"> longer</font>

331
00:12:50,670 --> 00:12:55,890
<font color="#E5E5E5">make kind of very complicated reasonings</font>

332
00:12:53,100 --> 00:12:58,860
about software<font color="#E5E5E5"> in any kind of useful</font>

333
00:12:55,890 --> 00:13:00,990
amount of time so basically<font color="#E5E5E5"> you've hit</font>

334
00:12:58,860 --> 00:13:03,810
this cliff<font color="#E5E5E5"> and now you've fallen off and</font>

335
00:13:00,990 --> 00:13:08,220
<font color="#E5E5E5">now you're</font><font color="#CCCCCC"> very sad</font><font color="#E5E5E5"> let's take a look at</font>

336
00:13:03,810 --> 00:13:11,089
<font color="#E5E5E5">dnp3</font><font color="#CCCCCC"> so it has multiple layers just</font><font color="#E5E5E5"> like</font>

337
00:13:08,220 --> 00:13:13,950
<font color="#E5E5E5">you know all of our favorite protocols</font>

338
00:13:11,090 --> 00:13:15,630
is it complex<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you have you</font><font color="#E5E5E5"> have some</font>

339
00:13:13,950 --> 00:13:17,280
<font color="#E5E5E5">fragments in there and some objects so</font>

340
00:13:15,630 --> 00:13:19,530
far we're looking pretty<font color="#E5E5E5"> good this seems</font>

341
00:13:17,280 --> 00:13:22,020
like<font color="#E5E5E5"> most everything we've seen and then</font>

342
00:13:19,530 --> 00:13:23,670
what wait a second what what is<font color="#E5E5E5"> going on</font>

343
00:13:22,020 --> 00:13:26,340
here and<font color="#E5E5E5"> now</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> it's getting very</font>

344
00:13:23,670 --> 00:13:27,719
<font color="#CCCCCC">complicated and that's just even parsing</font>

345
00:13:26,340 --> 00:13:29,790
the syntax now let's look<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

346
00:13:27,720 --> 00:13:32,280
semantics<font color="#E5E5E5"> I don't know if you can read</font>

347
00:13:29,790 --> 00:13:34,410
this but basically<font color="#E5E5E5"> there's like a time</font>

348
00:13:32,280 --> 00:13:36,720
thing that you can add another object

349
00:13:34,410 --> 00:13:38,400
<font color="#CCCCCC">after</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> this says oh that</font><font color="#E5E5E5"> previous</font>

350
00:13:36,720 --> 00:13:39,780
object that<font color="#E5E5E5"> I wanted</font><font color="#CCCCCC"> to read into</font><font color="#E5E5E5"> is</font>

351
00:13:38,400 --> 00:13:42,720
<font color="#E5E5E5">actually a right so now it will change</font>

352
00:13:39,780 --> 00:13:43,740
your behavior of that<font color="#CCCCCC"> in the past so</font>

353
00:13:42,720 --> 00:13:46,560
that's not<font color="#E5E5E5"> so great</font>

354
00:13:43,740 --> 00:13:49,410
<font color="#E5E5E5">another one is is the date you</font><font color="#CCCCCC"> could</font>

355
00:13:46,560 --> 00:13:51,209
have a time object or I guess a time of

356
00:13:49,410 --> 00:13:53,429
occurrence<font color="#E5E5E5"> which is usually the</font>

357
00:13:51,209 --> 00:13:54,689
absolute time<font color="#E5E5E5"> but then later on</font><font color="#CCCCCC"> you</font>

358
00:13:53,429 --> 00:13:56,730
<font color="#E5E5E5">could get an</font><font color="#CCCCCC"> object that</font><font color="#E5E5E5"> says oh by the</font>

359
00:13:54,689 --> 00:13:58,319
way that object you<font color="#CCCCCC"> received previously</font>

360
00:13:56,730 --> 00:14:00,360
that<font color="#E5E5E5"> was</font><font color="#CCCCCC"> a relative time to another</font>

361
00:13:58,319 --> 00:14:01,920
object<font color="#CCCCCC"> which you</font><font color="#E5E5E5"> may already</font><font color="#CCCCCC"> have or may</font>

362
00:14:00,360 --> 00:14:03,839
not be we have<font color="#E5E5E5"> to look back and find it</font>

363
00:14:01,920 --> 00:14:05,998
so basically<font color="#E5E5E5"> you're just kind of</font>

364
00:14:03,839 --> 00:14:07,769
<font color="#CCCCCC">constantly trying to</font><font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out</font>

365
00:14:05,999 --> 00:14:11,579
<font color="#E5E5E5">something and it's a really kind of</font>

366
00:14:07,769 --> 00:14:13,949
awful situation<font color="#E5E5E5"> so when we tried to</font>

367
00:14:11,579 --> 00:14:16,979
<font color="#CCCCCC">develop this</font><font color="#E5E5E5"> dnp3</font><font color="#CCCCCC"> we wanted to try to</font>

368
00:14:13,949 --> 00:14:18,929
<font color="#E5E5E5">make the control flow graph as close to</font>

369
00:14:16,980 --> 00:14:20,790
as possible as what the specification

370
00:14:18,929 --> 00:14:23,309
says<font color="#E5E5E5"> we wanted to</font><font color="#CCCCCC"> obviously avoid</font>

371
00:14:20,790 --> 00:14:25,589
duplication<font color="#E5E5E5"> and abstract and we wanted</font>

372
00:14:23,309 --> 00:14:27,899
the code for parsing the data<font color="#CCCCCC"> only in</font>

373
00:14:25,589 --> 00:14:29,910
the parser none of that shotgunning<font color="#E5E5E5"> so</font>

374
00:14:27,899 --> 00:14:32,429
also<font color="#E5E5E5"> when we did this we could capture</font>

375
00:14:29,910 --> 00:14:33,899
the true syntax of<font color="#E5E5E5"> DMV</font><font color="#CCCCCC"> three because if</font>

376
00:14:32,429 --> 00:14:36,209
you read<font color="#CCCCCC"> the specification there's a lot</font>

377
00:14:33,899 --> 00:14:38,519
of very vague words<font color="#E5E5E5"> this way we can</font>

378
00:14:36,209 --> 00:14:40,829
actually<font color="#CCCCCC"> understand and</font><font color="#E5E5E5"> by going through</font>

379
00:14:38,519 --> 00:14:42,809
this<font color="#CCCCCC"> process it can actually force us as</font>

380
00:14:40,829 --> 00:14:44,849
<font color="#CCCCCC">developers to understand what the</font>

381
00:14:42,809 --> 00:14:46,589
specification should say or does say and

382
00:14:44,850 --> 00:14:50,519
be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> ask those</font><font color="#CCCCCC"> questions before</font>

383
00:14:46,589 --> 00:14:52,110
<font color="#E5E5E5">we're hold in front of Congress so a</font>

384
00:14:50,519 --> 00:14:54,329
parser<font color="#CCCCCC"> Combinator's this is an example</font>

385
00:14:52,110 --> 00:14:56,490
<font color="#E5E5E5">using hammer so basically you can get a</font>

386
00:14:54,329 --> 00:14:58,859
sequence number<font color="#E5E5E5"> and a bit so you</font><font color="#CCCCCC"> have</font>

387
00:14:56,490 --> 00:15:01,860
some number of<font color="#E5E5E5"> bits set out there you</font>

388
00:14:58,860 --> 00:15:03,809
have choices<font color="#E5E5E5"> or many or many plus or at</font>

389
00:15:01,860 --> 00:15:06,149
least one or more<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can define</font>

390
00:15:03,809 --> 00:15:08,219
<font color="#CCCCCC">your</font><font color="#E5E5E5"> own combinations thereof so here if</font>

391
00:15:06,149 --> 00:15:09,569
<font color="#E5E5E5">you have you know a fragment header with</font>

392
00:15:08,220 --> 00:15:11,040
all the<font color="#E5E5E5"> flags in it you can pretty</font>

393
00:15:09,569 --> 00:15:13,769
<font color="#CCCCCC">easily</font><font color="#E5E5E5"> kind of build them up with some</font>

394
00:15:11,040 --> 00:15:15,839
<font color="#E5E5E5">sequences higher and higher and</font><font color="#CCCCCC"> then</font>

395
00:15:13,769 --> 00:15:17,759
combine them<font color="#E5E5E5"> all together another</font>

396
00:15:15,839 --> 00:15:25,129
<font color="#E5E5E5">example is this</font><font color="#CCCCCC"> crop object and you can</font>

397
00:15:17,759 --> 00:15:25,129
see the kind of code related to<font color="#CCCCCC"> that no</font>

398
00:15:25,399 --> 00:15:30,689
more<font color="#E5E5E5"> of that so one of the interesting</font>

399
00:15:28,470 --> 00:15:35,519
<font color="#CCCCCC">things</font><font color="#E5E5E5"> actually the only kind of crash</font>

400
00:15:30,689 --> 00:15:39,240
<font color="#E5E5E5">in our</font><font color="#CCCCCC"> with parser was</font><font color="#E5E5E5"> when you had a</font>

401
00:15:35,519 --> 00:15:40,379
stream<font color="#CCCCCC"> that had no objects</font><font color="#E5E5E5"> and we got to</font>

402
00:15:39,240 --> 00:15:42,929
the point<font color="#E5E5E5"> where we were trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> think</font>

403
00:15:40,379 --> 00:15:44,040
should this be many or many plus<font color="#E5E5E5"> one or</font>

404
00:15:42,929 --> 00:15:45,569
<font color="#E5E5E5">whatever and we kind of made that</font>

405
00:15:44,040 --> 00:15:48,599
assumption but<font color="#CCCCCC"> we had to actually</font><font color="#E5E5E5"> ask</font>

406
00:15:45,569 --> 00:15:49,860
that question and so we were<font color="#CCCCCC"> able to</font>

407
00:15:48,600 --> 00:15:52,410
<font color="#E5E5E5">kind of come</font><font color="#CCCCCC"> up with that and figure</font>

408
00:15:49,860 --> 00:15:55,559
that<font color="#E5E5E5"> out</font><font color="#CCCCCC"> during development</font><font color="#E5E5E5"> time so we</font>

409
00:15:52,410 --> 00:15:59,969
were<font color="#E5E5E5"> like that kid</font><font color="#CCCCCC"> yay rather than the</font>

410
00:15:55,559 --> 00:16:01,469
<font color="#E5E5E5">sadder person so anyway so this all was</font>

411
00:15:59,970 --> 00:16:03,209
really<font color="#E5E5E5"> great in the sense that we were</font>

412
00:16:01,470 --> 00:16:04,650
able<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> this discipline</font><font color="#CCCCCC"> roadmap</font><font color="#E5E5E5"> to</font>

413
00:16:03,209 --> 00:16:06,630
develop it

414
00:16:04,650 --> 00:16:08,490
we<font color="#E5E5E5"> wanted to continue testing it just</font>

415
00:16:06,630 --> 00:16:10,530
like we usually do<font color="#E5E5E5"> but it's a lot easier</font>

416
00:16:08,490 --> 00:16:12,450
<font color="#E5E5E5">to test as well because we can</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> each</font>

417
00:16:10,530 --> 00:16:15,420
<font color="#E5E5E5">kind of individual chunk and then build</font>

418
00:16:12,450 --> 00:16:17,910
them all up on<font color="#CCCCCC"> top of that so then what</font>

419
00:16:15,420 --> 00:16:19,589
do<font color="#CCCCCC"> we do</font><font color="#E5E5E5"> then we had basically two</font>

420
00:16:17,910 --> 00:16:22,020
devices<font color="#E5E5E5"> that were communicating over</font>

421
00:16:19,590 --> 00:16:23,580
<font color="#E5E5E5">dnp3 and we were</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> kind of you</font>

422
00:16:22,020 --> 00:16:26,040
know break them out<font color="#E5E5E5"> and parse them and</font>

423
00:16:23,580 --> 00:16:27,870
then we would fuzz them and basically

424
00:16:26,040 --> 00:16:30,110
<font color="#CCCCCC">observe only</font><font color="#E5E5E5"> mode and kind of see what</font>

425
00:16:27,870 --> 00:16:32,820
would happen<font color="#E5E5E5"> and then we were also using</font>

426
00:16:30,110 --> 00:16:33,810
<font color="#CCCCCC">AFL which you guys if you have our turn</font>

427
00:16:32,820 --> 00:16:35,790
<font color="#E5E5E5">of fuzz stuff and you don't</font><font color="#CCCCCC"> know a</font>

428
00:16:33,810 --> 00:16:38,250
<font color="#CCCCCC">fella's you should grab it it's really</font>

429
00:16:35,790 --> 00:16:40,740
nice so basically we were<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> fuzz</font>

430
00:16:38,250 --> 00:16:42,720
both with a<font color="#CCCCCC"> model-based fuzz or for</font><font color="#E5E5E5"> dnp3</font>

431
00:16:40,740 --> 00:16:46,830
<font color="#E5E5E5">as well as more of a generic kind of</font>

432
00:16:42,720 --> 00:16:48,510
coverage guided<font color="#E5E5E5"> fuzzer so our parser</font>

433
00:16:46,830 --> 00:16:50,370
only had that one<font color="#E5E5E5"> bug for the most part</font>

434
00:16:48,510 --> 00:16:52,319
as far as we<font color="#E5E5E5"> can tell we were able to</font>

435
00:16:50,370 --> 00:16:53,940
<font color="#E5E5E5">get really high test coverage and by</font>

436
00:16:52,320 --> 00:16:56,160
doing<font color="#E5E5E5"> it from a specification first</font>

437
00:16:53,940 --> 00:16:57,780
rather than<font color="#E5E5E5"> this</font><font color="#CCCCCC"> ad-hoc parser where we</font>

438
00:16:56,160 --> 00:16:59,850
kind of think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> what we think the</font>

439
00:16:57,780 --> 00:17:02,400
attacker is going<font color="#E5E5E5"> to do and that's the</font>

440
00:16:59,850 --> 00:17:04,290
only state we can encapsulate<font color="#E5E5E5"> we're able</font>

441
00:17:02,400 --> 00:17:06,300
<font color="#E5E5E5">to do it in a much more</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of focused</font>

442
00:17:04,290 --> 00:17:09,750
way that helps us ask these<font color="#CCCCCC"> questions as</font>

443
00:17:06,300 --> 00:17:12,210
we<font color="#CCCCCC"> go</font><font color="#E5E5E5"> along</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> dnp3 was</font><font color="#CCCCCC"> well-intentioned</font>

444
00:17:09,750 --> 00:17:14,250
<font color="#CCCCCC">and it wanted to be</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> then he</font>

445
00:17:12,210 --> 00:17:16,319
got really<font color="#E5E5E5"> complicated</font><font color="#CCCCCC"> when you had like</font>

446
00:17:14,250 --> 00:17:19,260
objects<font color="#E5E5E5"> in the future that can change</font>

447
00:17:16,319 --> 00:17:21,990
the objects in the past<font color="#E5E5E5"> so that's a</font>

448
00:17:19,260 --> 00:17:24,390
<font color="#E5E5E5">problem but it could be there so</font>

449
00:17:21,990 --> 00:17:26,130
verification basically<font color="#CCCCCC"> as I said before</font>

450
00:17:24,390 --> 00:17:27,510
developers are not available<font color="#E5E5E5"> not</font>

451
00:17:26,130 --> 00:17:29,580
perfectly we really shouldn't<font color="#E5E5E5"> expect</font>

452
00:17:27,510 --> 00:17:32,340
them to be<font color="#E5E5E5"> so there's a I think</font>

453
00:17:29,580 --> 00:17:35,129
<font color="#E5E5E5">originally a Russian saying trust but</font>

454
00:17:32,340 --> 00:17:36,540
verify<font color="#CCCCCC"> so you can use static analysis to</font>

455
00:17:35,130 --> 00:17:38,370
look<font color="#E5E5E5"> for the bugs which we just had a</font>

456
00:17:36,540 --> 00:17:41,879
whole<font color="#E5E5E5"> talk about looking for using</font>

457
00:17:38,370 --> 00:17:43,560
<font color="#E5E5E5">static they also look for malware</font>

458
00:17:41,880 --> 00:17:45,480
samples<font color="#E5E5E5"> but unfortunately certain</font>

459
00:17:43,560 --> 00:17:47,070
runtime semantics are lost like if you

460
00:17:45,480 --> 00:17:48,930
have<font color="#E5E5E5"> kind of dynamic function pointers</font>

461
00:17:47,070 --> 00:17:52,200
or whatever<font color="#E5E5E5"> those usually kind of get</font>

462
00:17:48,930 --> 00:17:53,730
lost<font color="#CCCCCC"> dynamic analysis runs</font><font color="#E5E5E5"> the program</font>

463
00:17:52,200 --> 00:17:55,590
as is looking<font color="#E5E5E5"> through it but you have a</font>

464
00:17:53,730 --> 00:17:59,550
challenge of coverage and also<font color="#E5E5E5"> it takes</font>

465
00:17:55,590 --> 00:18:01,379
a lot longer<font color="#CCCCCC"> so we had an</font><font color="#E5E5E5"> interesting</font>

466
00:17:59,550 --> 00:18:04,530
<font color="#E5E5E5">challenge in the program verification</font>

467
00:18:01,380 --> 00:18:06,480
automatic exploit generation<font color="#E5E5E5"> area so</font>

468
00:18:04,530 --> 00:18:10,379
there was a bug<font color="#CCCCCC"> that marked out found I</font>

469
00:18:06,480 --> 00:18:12,240
<font color="#CCCCCC">think in like</font><font color="#E5E5E5"> 2003 2005 in</font><font color="#CCCCCC"> send mail</font>

470
00:18:10,380 --> 00:18:15,030
base it<font color="#E5E5E5"> was called the crack at her bug</font>

471
00:18:12,240 --> 00:18:16,740
<font color="#E5E5E5">it was a while loop that was expanding</font>

472
00:18:15,030 --> 00:18:18,149
email addresses and then<font color="#CCCCCC"> matched</font><font color="#E5E5E5"> to</font>

473
00:18:16,740 --> 00:18:20,400
making sure<font color="#CCCCCC"> that</font><font color="#E5E5E5"> it was matched</font>

474
00:18:18,150 --> 00:18:24,180
in terms of braces<font color="#CCCCCC"> and</font><font color="#E5E5E5"> parentheses and</font>

475
00:18:20,400 --> 00:18:26,010
the semantics were very abstracted it's

476
00:18:24,180 --> 00:18:30,420
still saying my battery<font color="#E5E5E5"> is now down to</font>

477
00:18:26,010 --> 00:18:32,870
seven<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> basically that they found out</font>

478
00:18:30,420 --> 00:18:32,870
is<font color="#E5E5E5"> that</font>

479
00:18:47,750 --> 00:18:55,820
I'll just go fast<font color="#CCCCCC"> I</font><font color="#E5E5E5"> only went down</font><font color="#CCCCCC"> 3%</font>

480
00:18:53,690 --> 00:18:59,899
<font color="#CCCCCC">and I only have half more slides so I</font>

481
00:18:55,820 --> 00:19:01,970
think<font color="#E5E5E5"> I should be good so</font><font color="#CCCCCC"> dynamic</font>

482
00:18:59,899 --> 00:19:04,459
analysis then requires an<font color="#CCCCCC"> np-complete</font>

483
00:19:01,970 --> 00:19:06,110
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> to be solved so unfortunately as</font>

484
00:19:04,460 --> 00:19:07,700
the<font color="#CCCCCC"> software</font><font color="#E5E5E5"> code base grows it becomes</font>

485
00:19:06,110 --> 00:19:09,979
<font color="#CCCCCC">very</font><font color="#E5E5E5"> challenging so crack at her</font>

486
00:19:07,700 --> 00:19:11,509
basically it was proposed as a hard

487
00:19:09,980 --> 00:19:13,250
problem<font color="#E5E5E5"> for verification could you</font>

488
00:19:11,509 --> 00:19:15,379
either develop software<font color="#E5E5E5"> that could find</font>

489
00:19:13,250 --> 00:19:17,149
this bug and<font color="#E5E5E5"> automatically exploit it or</font>

490
00:19:15,379 --> 00:19:19,250
find this bug and<font color="#E5E5E5"> automatically tell a</font>

491
00:19:17,149 --> 00:19:21,199
developer to fix it it was very very

492
00:19:19,250 --> 00:19:23,509
<font color="#CCCCCC">challenging and only recently</font><font color="#E5E5E5"> has</font>

493
00:19:21,200 --> 00:19:24,710
someone been able<font color="#E5E5E5"> to actually find it</font>

494
00:19:23,509 --> 00:19:27,350
but<font color="#E5E5E5"> they kind</font><font color="#CCCCCC"> of had to know what they</font>

495
00:19:24,710 --> 00:19:28,759
were looking<font color="#E5E5E5"> for</font><font color="#CCCCCC"> and it's very very hard</font>

496
00:19:27,350 --> 00:19:31,449
in<font color="#CCCCCC"> practice and in general just</font><font color="#E5E5E5"> give it</font>

497
00:19:28,759 --> 00:19:33,710
all<font color="#CCCCCC"> of sendmail and say find that book</font>

498
00:19:31,450 --> 00:19:35,629
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> already talked about parsing</font>

499
00:19:33,710 --> 00:19:37,009
basically where you know you want to

500
00:19:35,629 --> 00:19:38,990
<font color="#E5E5E5">make sure that there's a boundary</font>

501
00:19:37,009 --> 00:19:41,149
between<font color="#E5E5E5"> the program input and then the</font>

502
00:19:38,990 --> 00:19:43,370
ones it's actually finished parsing then

503
00:19:41,149 --> 00:19:45,049
you can start executing on<font color="#CCCCCC"> it and that's</font>

504
00:19:43,370 --> 00:19:48,110
comes from all sorts of things reading

505
00:19:45,049 --> 00:19:49,759
user input<font color="#E5E5E5"> RPC etc etc you want to start</font>

506
00:19:48,110 --> 00:19:51,408
<font color="#E5E5E5">with the specification and then if it's</font>

507
00:19:49,759 --> 00:19:53,210
not<font color="#E5E5E5"> compliant</font><font color="#CCCCCC"> you want to actually</font>

508
00:19:51,409 --> 00:19:54,710
<font color="#E5E5E5">reject it like see how happy she</font><font color="#CCCCCC"> is that</font>

509
00:19:53,210 --> 00:19:56,629
<font color="#CCCCCC">she was rejected because</font><font color="#E5E5E5"> it was an</font>

510
00:19:54,710 --> 00:19:59,659
invalid parser like she's<font color="#E5E5E5"> trying to kiss</font>

511
00:19:56,629 --> 00:20:00,949
the cat and<font color="#CCCCCC"> know right</font><font color="#E5E5E5"> why do you want</font>

512
00:19:59,659 --> 00:20:03,259
<font color="#E5E5E5">to do this because there's a lot of</font>

513
00:20:00,950 --> 00:20:05,509
<font color="#CCCCCC">issues</font><font color="#E5E5E5"> with parsers as they get more</font><font color="#CCCCCC"> and</font>

514
00:20:03,259 --> 00:20:07,340
<font color="#CCCCCC">more complicated so there's a term</font>

515
00:20:05,509 --> 00:20:09,169
called<font color="#E5E5E5"> parser differential where</font>

516
00:20:07,340 --> 00:20:11,539
basically<font color="#E5E5E5"> once your parsers get really</font>

517
00:20:09,169 --> 00:20:14,299
complicated<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> almost impossibly to</font>

518
00:20:11,539 --> 00:20:15,950
figure out if the<font color="#E5E5E5"> two parsers</font><font color="#CCCCCC"> that</font>

519
00:20:14,299 --> 00:20:18,529
should parse things<font color="#E5E5E5"> the same are doing</font>

520
00:20:15,950 --> 00:20:21,649
that or<font color="#E5E5E5"> not so one example is</font><font color="#CCCCCC"> a Bitcoin</font>

521
00:20:18,529 --> 00:20:23,990
<font color="#E5E5E5">was using the asn.1 spec and actually</font>

522
00:20:21,649 --> 00:20:27,018
you could<font color="#E5E5E5"> generate a specific</font>

523
00:20:23,990 --> 00:20:28,370
transaction<font color="#E5E5E5"> that</font><font color="#CCCCCC"> 32-bit systems would</font>

524
00:20:27,019 --> 00:20:30,679
agree and say yes<font color="#E5E5E5"> that's a valid</font>

525
00:20:28,370 --> 00:20:32,989
transaction<font color="#CCCCCC"> and</font><font color="#E5E5E5"> 64-bit systems would not</font>

526
00:20:30,679 --> 00:20:35,059
and you could actually fork the Bitcoin

527
00:20:32,990 --> 00:20:37,190
pool after<font color="#E5E5E5"> this so they had to fix it</font>

528
00:20:35,059 --> 00:20:38,570
<font color="#E5E5E5">and then wait over a year before they</font>

529
00:20:37,190 --> 00:20:40,039
<font color="#E5E5E5">were</font><font color="#CCCCCC"> allowed to release it because</font>

530
00:20:38,570 --> 00:20:42,649
otherwise they could<font color="#E5E5E5"> basically break the</font>

531
00:20:40,039 --> 00:20:46,460
blockchain<font color="#CCCCCC"> another</font><font color="#E5E5E5"> really good one is</font>

532
00:20:42,649 --> 00:20:48,590
<font color="#E5E5E5">SSL certificate parsing on Firefox when</font>

533
00:20:46,460 --> 00:20:51,200
you go and you register and you get an

534
00:20:48,590 --> 00:20:53,178
<font color="#E5E5E5">SSL certificate</font><font color="#CCCCCC"> for a</font><font color="#E5E5E5"> website the</font>

535
00:20:51,200 --> 00:20:54,620
certificate uses<font color="#CCCCCC"> Pascal strings which</font>

536
00:20:53,179 --> 00:20:56,980
has the length of the string and then

537
00:20:54,620 --> 00:21:00,529
<font color="#E5E5E5">the string</font><font color="#CCCCCC"> and so I could go and</font>

538
00:20:56,980 --> 00:21:01,070
register<font color="#E5E5E5"> paypal.com</font>

539
00:21:00,529 --> 00:21:05,210
<font color="#CCCCCC">know</font>

540
00:21:01,070 --> 00:21:07,309
<font color="#CCCCCC">terminator</font><font color="#E5E5E5"> attacker</font><font color="#CCCCCC"> site.com and as long</font>

541
00:21:05,210 --> 00:21:09,259
as<font color="#CCCCCC"> that was correct</font><font color="#E5E5E5"> there would be no</font>

542
00:21:07,309 --> 00:21:11,450
problems<font color="#E5E5E5"> in the sense that I was</font>

543
00:21:09,259 --> 00:21:14,419
<font color="#CCCCCC">actually asking for a certificate</font><font color="#E5E5E5"> for a</font>

544
00:21:11,450 --> 00:21:17,450
sub<font color="#E5E5E5"> domain of attacker comm and most</font>

545
00:21:14,419 --> 00:21:19,639
browsers<font color="#E5E5E5"> would detect that that was not</font>

546
00:21:17,450 --> 00:21:20,480
<font color="#E5E5E5">valid for actually</font><font color="#CCCCCC"> PayPal com so if</font>

547
00:21:19,639 --> 00:21:21,799
you're trying<font color="#CCCCCC"> to man in the</font><font color="#E5E5E5"> middle</font>

548
00:21:20,480 --> 00:21:24,620
someone that would work

549
00:21:21,799 --> 00:21:27,408
however<font color="#E5E5E5"> in Mozilla Firefox they would</font>

550
00:21:24,620 --> 00:21:29,239
assume that that<font color="#E5E5E5"> certificate</font><font color="#CCCCCC"> was</font><font color="#E5E5E5"> using C</font>

551
00:21:27,409 --> 00:21:31,039
strings and so it would read the name of

552
00:21:29,240 --> 00:21:32,330
the site and it<font color="#E5E5E5"> would stop at that null</font>

553
00:21:31,039 --> 00:21:34,100
<font color="#CCCCCC">terminator and then it would say yes</font>

554
00:21:32,330 --> 00:21:36,049
this is<font color="#CCCCCC"> a valid certificate that chains</font>

555
00:21:34,100 --> 00:21:39,350
all the way back<font color="#CCCCCC"> up to</font><font color="#E5E5E5"> Verisign or</font><font color="#CCCCCC"> some</font>

556
00:21:36,049 --> 00:21:41,000
other<font color="#CCCCCC"> roots authority for PayPal com you</font>

557
00:21:39,350 --> 00:21:43,428
can<font color="#E5E5E5"> enter</font><font color="#CCCCCC"> your login</font><font color="#E5E5E5"> and made a pastor</font>

558
00:21:41,000 --> 00:21:55,220
so again<font color="#E5E5E5"> we're sitting in our house and</font>

559
00:21:43,429 --> 00:21:56,360
<font color="#E5E5E5">it's on fire</font><font color="#CCCCCC"> and it's all great so</font>

560
00:21:55,220 --> 00:21:58,159
there's a lot of<font color="#CCCCCC"> conventions</font><font color="#E5E5E5"> out there</font>

561
00:21:56,360 --> 00:22:01,279
trying to make<font color="#E5E5E5"> software more safe so</font>

562
00:21:58,159 --> 00:22:04,220
<font color="#CCCCCC">Misra C</font><font color="#E5E5E5"> is like industry and safety for</font>

563
00:22:01,279 --> 00:22:05,809
cars<font color="#E5E5E5"> and they know that there's a lot</font><font color="#CCCCCC"> of</font>

564
00:22:04,220 --> 00:22:07,909
<font color="#E5E5E5">safety critical stuff in cars and so</font>

565
00:22:05,809 --> 00:22:11,299
they actually<font color="#E5E5E5"> have built a whole bunch</font>

566
00:22:07,909 --> 00:22:12,919
of<font color="#E5E5E5"> tools and code</font><font color="#CCCCCC"> examples for how you</font>

567
00:22:11,299 --> 00:22:14,899
should<font color="#E5E5E5"> validate your code bases to make</font>

568
00:22:12,919 --> 00:22:20,179
<font color="#E5E5E5">them safe and if you want to go even</font>

569
00:22:14,899 --> 00:22:25,000
<font color="#E5E5E5">further you can</font><font color="#CCCCCC"> go to space right hey</font>

570
00:22:20,179 --> 00:22:25,000
something happened<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> okay</font>

571
00:22:26,000 --> 00:22:32,720
who'd have<font color="#E5E5E5"> thought plugging it in huh so</font>

572
00:22:29,500 --> 00:22:34,580
<font color="#E5E5E5">NASA's Jet Propulsion Laboratory</font><font color="#CCCCCC"> they</font>

573
00:22:32,720 --> 00:22:37,490
have to write<font color="#CCCCCC"> code</font><font color="#E5E5E5"> that runs in space</font>

574
00:22:34,580 --> 00:22:39,259
and it's very very<font color="#E5E5E5"> challenging</font><font color="#CCCCCC"> to really</font>

575
00:22:37,490 --> 00:22:41,929
go up<font color="#E5E5E5"> there and push the</font><font color="#CCCCCC"> restart button</font>

576
00:22:39,259 --> 00:22:43,100
<font color="#E5E5E5">once it's crashed</font><font color="#CCCCCC"> I actually have a</font>

577
00:22:41,929 --> 00:22:45,559
friend<font color="#E5E5E5"> that had to disclose</font><font color="#CCCCCC"> a</font>

578
00:22:43,100 --> 00:22:47,209
vulnerability<font color="#E5E5E5"> on the Mars rover and that</font>

579
00:22:45,559 --> 00:22:49,399
was quite the coordinated disclosure

580
00:22:47,210 --> 00:22:51,320
because<font color="#E5E5E5"> you're talking</font><font color="#CCCCCC"> like 40-minute</font>

581
00:22:49,399 --> 00:22:54,350
<font color="#E5E5E5">round-trip time for radio signals to go</font>

582
00:22:51,320 --> 00:22:56,000
back and<font color="#E5E5E5"> forth so they really want to</font>

583
00:22:54,350 --> 00:22:56,689
<font color="#E5E5E5">make</font><font color="#CCCCCC"> sure their code is as safe as</font>

584
00:22:56,000 --> 00:22:59,029
possible

585
00:22:56,690 --> 00:23:01,159
before they ship it out<font color="#E5E5E5"> thousands of</font>

586
00:22:59,029 --> 00:23:02,899
miles away<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so they developed a</font>

587
00:23:01,159 --> 00:23:05,269
basically<font color="#E5E5E5"> a top ten list for safety</font>

588
00:23:02,899 --> 00:23:06,979
<font color="#CCCCCC">critical code and their goals were you</font>

589
00:23:05,269 --> 00:23:08,809
know reduce the defects make

590
00:23:06,980 --> 00:23:10,519
verification easier<font color="#E5E5E5"> because again they</font>

591
00:23:08,809 --> 00:23:11,840
trust their developers are good but

592
00:23:10,519 --> 00:23:14,120
they're not<font color="#E5E5E5"> a</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> percent and</font>

593
00:23:11,840 --> 00:23:15,980
failable<font color="#E5E5E5"> and really when we looked at</font>

594
00:23:14,120 --> 00:23:17,658
these<font color="#E5E5E5"> it</font><font color="#CCCCCC"> just kind of happened that they</font>

595
00:23:15,980 --> 00:23:19,100
map very nicely<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Lange psych</font>

596
00:23:17,659 --> 00:23:21,049
<font color="#CCCCCC">principles so the stuff that</font><font color="#E5E5E5"> was</font>

597
00:23:19,100 --> 00:23:23,959
developed<font color="#CCCCCC"> to run in very weird</font>

598
00:23:21,049 --> 00:23:25,340
environments in space mapped very nicely

599
00:23:23,960 --> 00:23:28,610
and<font color="#E5E5E5"> so we're gonna talk about some</font><font color="#CCCCCC"> of</font>

600
00:23:25,340 --> 00:23:30,799
those so some<font color="#CCCCCC"> of the top ten so reduce</font>

601
00:23:28,610 --> 00:23:31,519
the control flow complexity as much as

602
00:23:30,799 --> 00:23:33,408
<font color="#CCCCCC">possible</font>

603
00:23:31,519 --> 00:23:36,500
don't use go<font color="#E5E5E5"> to like</font><font color="#CCCCCC"> remember maybe</font>

604
00:23:33,409 --> 00:23:37,970
Apple<font color="#CCCCCC"> had the go-to fail bug long jumps</font>

605
00:23:36,500 --> 00:23:40,429
<font color="#CCCCCC">and recursion because</font><font color="#E5E5E5"> that makes your</font>

606
00:23:37,970 --> 00:23:42,769
control flow graph<font color="#E5E5E5"> in two cycles which</font>

607
00:23:40,429 --> 00:23:44,330
is much harder<font color="#E5E5E5"> to verify if you get rid</font>

608
00:23:42,769 --> 00:23:46,009
of recursion<font color="#CCCCCC"> you might have an acyclic</font>

609
00:23:44,330 --> 00:23:48,320
graph which you can<font color="#E5E5E5"> analyze and then</font>

610
00:23:46,009 --> 00:23:49,669
<font color="#CCCCCC">also it makes their programmers</font><font color="#E5E5E5"> think a</font>

611
00:23:48,320 --> 00:23:51,860
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> harder about what they're</font>

612
00:23:49,669 --> 00:23:53,690
trying<font color="#CCCCCC"> to get</font><font color="#E5E5E5"> done and that might mean</font>

613
00:23:51,860 --> 00:23:56,330
that they put more intent into the

614
00:23:53,690 --> 00:23:58,220
<font color="#E5E5E5">software specifically number rule number</font>

615
00:23:56,330 --> 00:24:00,379
two all loops should<font color="#E5E5E5"> have upper bounds</font>

616
00:23:58,220 --> 00:24:01,789
and iterations<font color="#E5E5E5"> basically you want the</font>

617
00:24:00,379 --> 00:24:04,129
<font color="#CCCCCC">analyzer to</font><font color="#E5E5E5"> be able to determine</font>

618
00:24:01,789 --> 00:24:05,779
termination obviously some loops are non

619
00:24:04,129 --> 00:24:07,490
terminating it would be<font color="#E5E5E5"> really silly if</font>

620
00:24:05,779 --> 00:24:09,409
they made a scheduling loop for the<font color="#E5E5E5"> Mars</font>

621
00:24:07,490 --> 00:24:10,940
rover<font color="#CCCCCC"> that only had a thousand</font>

622
00:24:09,409 --> 00:24:12,919
iterations<font color="#CCCCCC"> before it just</font><font color="#E5E5E5"> quit that</font>

623
00:24:10,940 --> 00:24:15,289
<font color="#CCCCCC">would be kind of a</font><font color="#E5E5E5"> waste</font>

624
00:24:12,919 --> 00:24:18,470
so those loops that you<font color="#E5E5E5"> should prove why</font>

625
00:24:15,289 --> 00:24:20,629
they need to<font color="#CCCCCC"> be non terminating another</font>

626
00:24:18,470 --> 00:24:22,429
good one<font color="#E5E5E5"> rule</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> basically do</font><font color="#CCCCCC"> all of</font>

627
00:24:20,629 --> 00:24:26,000
<font color="#E5E5E5">your memory allocation and memory</font>

628
00:24:22,429 --> 00:24:27,649
<font color="#CCCCCC">changes before your business logic that</font>

629
00:24:26,000 --> 00:24:30,200
way you can analyze<font color="#E5E5E5"> the memory map much</font>

630
00:24:27,649 --> 00:24:31,758
easier<font color="#E5E5E5"> and also you can guarantee</font><font color="#CCCCCC"> that</font>

631
00:24:30,200 --> 00:24:33,500
<font color="#E5E5E5">your</font><font color="#CCCCCC"> business logic is not</font><font color="#E5E5E5"> going to</font>

632
00:24:31,759 --> 00:24:35,119
start<font color="#E5E5E5"> until all of your allocations</font><font color="#CCCCCC"> have</font>

633
00:24:33,500 --> 00:24:37,009
succeeded<font color="#E5E5E5"> and you're not getting</font><font color="#CCCCCC"> into a</font>

634
00:24:35,119 --> 00:24:39,199
weird<font color="#CCCCCC"> situation where</font><font color="#E5E5E5"> you've kind of</font>

635
00:24:37,009 --> 00:24:39,710
already<font color="#CCCCCC"> allocated half of some structure</font>

636
00:24:39,200 --> 00:24:41,419
and

637
00:24:39,710 --> 00:24:42,770
you realize you<font color="#E5E5E5"> have no more memory and</font>

638
00:24:41,419 --> 00:24:44,510
now what do<font color="#E5E5E5"> you do do you start</font>

639
00:24:42,770 --> 00:24:46,039
deallocating and you've already sent an

640
00:24:44,510 --> 00:24:47,270
<font color="#CCCCCC">acknowledgment package so they're gonna</font>

641
00:24:46,039 --> 00:24:50,090
start<font color="#CCCCCC"> sending the next</font><font color="#E5E5E5"> one so what do</font>

642
00:24:47,270 --> 00:24:52,700
you do<font color="#CCCCCC"> also it's really</font><font color="#E5E5E5"> nice if you can</font>

643
00:24:50,090 --> 00:24:54,289
you<font color="#E5E5E5"> can use LD preload or valgrind</font><font color="#CCCCCC"> and</font>

644
00:24:52,700 --> 00:24:55,880
basically create<font color="#CCCCCC"> malloc this fails</font>

645
00:24:54,289 --> 00:24:58,669
randomly to see how your program can

646
00:24:55,880 --> 00:25:00,649
handle it again for those<font color="#CCCCCC"> 95%</font><font color="#E5E5E5"> of you</font>

647
00:24:58,669 --> 00:25:02,390
that are managers<font color="#E5E5E5"> if you're looking for</font>

648
00:25:00,649 --> 00:25:03,709
a devious trick that might be something

649
00:25:02,390 --> 00:25:06,770
<font color="#E5E5E5">fun to put in your continuous</font>

650
00:25:03,710 --> 00:25:07,940
<font color="#E5E5E5">integration suite rule</font><font color="#CCCCCC"> seven so</font><font color="#E5E5E5"> this is</font>

651
00:25:06,770 --> 00:25:09,289
a<font color="#E5E5E5"> really interesting one you want to</font>

652
00:25:07,940 --> 00:25:11,539
check all the parameters in<font color="#E5E5E5"> each</font>

653
00:25:09,289 --> 00:25:13,340
function much<font color="#CCCCCC"> like the network</font><font color="#E5E5E5"> has been</font>

654
00:25:11,539 --> 00:25:16,010
<font color="#E5E5E5">designed where you have a nice soft</font>

655
00:25:13,340 --> 00:25:18,620
gooey interior and then a soft gooey

656
00:25:16,010 --> 00:25:22,039
exterior I mean<font color="#E5E5E5"> very hard and defended</font>

657
00:25:18,620 --> 00:25:24,080
exterior<font color="#CCCCCC"> you want to make sure</font><font color="#E5E5E5"> that a</font>

658
00:25:22,039 --> 00:25:26,270
parser bug doesn't propagate through

659
00:25:24,080 --> 00:25:28,668
where<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that some</font>

660
00:25:26,270 --> 00:25:30,080
function that's<font color="#CCCCCC"> in your</font><font color="#E5E5E5"> input and then</font>

661
00:25:28,669 --> 00:25:32,600
after that it's just<font color="#CCCCCC"> deemed trusted</font>

662
00:25:30,080 --> 00:25:34,158
<font color="#E5E5E5">because</font><font color="#CCCCCC"> what's gonna happen is is down</font>

663
00:25:32,600 --> 00:25:35,899
the road<font color="#E5E5E5"> you're gonna leave your company</font>

664
00:25:34,159 --> 00:25:37,279
<font color="#E5E5E5">someone else is gonna start and they're</font>

665
00:25:35,899 --> 00:25:39,199
like oh you<font color="#E5E5E5"> already wrote a function</font><font color="#CCCCCC"> for</font>

666
00:25:37,279 --> 00:25:41,840
this great<font color="#E5E5E5"> I'm just</font><font color="#CCCCCC"> gonna put</font><font color="#E5E5E5"> it out as</font>

667
00:25:39,200 --> 00:25:42,350
a Web API<font color="#CCCCCC"> and everything's gonna be</font>

668
00:25:41,840 --> 00:25:44,750
perfect

669
00:25:42,350 --> 00:25:46,039
<font color="#E5E5E5">and so that's kind</font><font color="#CCCCCC"> of a challenge and</font>

670
00:25:44,750 --> 00:25:47,990
one way you<font color="#E5E5E5"> can do</font><font color="#CCCCCC"> that is by fuzz</font>

671
00:25:46,039 --> 00:25:50,210
testing and<font color="#E5E5E5"> doing unit tests with</font>

672
00:25:47,990 --> 00:25:51,740
fuzzers in your<font color="#E5E5E5"> QA step and that way is</font>

673
00:25:50,210 --> 00:25:54,140
you<font color="#E5E5E5"> can make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that your internal</font>

674
00:25:51,740 --> 00:25:57,049
fuzzy or your internal functions are a

675
00:25:54,140 --> 00:25:58,669
little bit more resistant<font color="#E5E5E5"> another one is</font>

676
00:25:57,049 --> 00:25:59,990
is listing your use of<font color="#E5E5E5"> pointers</font><font color="#CCCCCC"> you</font>

677
00:25:58,669 --> 00:26:02,360
<font color="#CCCCCC">don't want that pointer</font><font color="#E5E5E5"> Sal like we</font>

678
00:25:59,990 --> 00:26:04,610
talked about<font color="#E5E5E5"> earlier</font><font color="#CCCCCC"> so they basically</font>

679
00:26:02,360 --> 00:26:06,260
shift problems from compile time to run

680
00:26:04,610 --> 00:26:08,320
time which<font color="#E5E5E5"> makes static analysis less</font>

681
00:26:06,260 --> 00:26:10,908
powerful and then<font color="#E5E5E5"> forces you to do more</font>

682
00:26:08,320 --> 00:26:12,408
dynamic analysis and I<font color="#E5E5E5"> already talked</font>

683
00:26:10,909 --> 00:26:14,419
about the PDF specification where you

684
00:26:12,409 --> 00:26:18,559
can have recursive pointers so not so

685
00:26:14,419 --> 00:26:21,679
good either<font color="#E5E5E5"> so</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> like hammer the</font>

686
00:26:18,559 --> 00:26:24,250
<font color="#CCCCCC">gabble</font><font color="#E5E5E5"> on this strict parsing input data</font>

687
00:26:21,679 --> 00:26:26,450
you should scrutinize it<font color="#E5E5E5"> as much as a</font>

688
00:26:24,250 --> 00:26:28,700
compiler looks at the code when it's

689
00:26:26,450 --> 00:26:30,409
trying<font color="#CCCCCC"> to compile your code</font><font color="#E5E5E5"> and as those</font>

690
00:26:28,700 --> 00:26:32,270
of you<font color="#E5E5E5"> who are the programmers appear</font>

691
00:26:30,409 --> 00:26:34,309
you know that if you forget a semicolon

692
00:26:32,270 --> 00:26:35,840
<font color="#CCCCCC">the compiler doesn't be like yeah</font><font color="#E5E5E5"> that's</font>

693
00:26:34,309 --> 00:26:37,610
<font color="#CCCCCC">ok you probably</font><font color="#E5E5E5"> meant to put a semicolon</font>

694
00:26:35,840 --> 00:26:39,129
<font color="#CCCCCC">there</font><font color="#E5E5E5"> and I'll talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> a more</font>

695
00:26:37,610 --> 00:26:42,229
specific example a little<font color="#CCCCCC"> bit later</font>

696
00:26:39,130 --> 00:26:44,270
<font color="#E5E5E5">invalid input must be</font><font color="#CCCCCC"> rejected and never</font>

697
00:26:42,230 --> 00:26:46,070
rewrite<font color="#E5E5E5"> that input trying to guess</font><font color="#CCCCCC"> with</font>

698
00:26:44,270 --> 00:26:48,049
<font color="#E5E5E5">their intent is because that means the</font>

699
00:26:46,070 --> 00:26:50,960
attacker<font color="#E5E5E5"> can try to trick you</font><font color="#CCCCCC"> into</font>

700
00:26:48,049 --> 00:26:53,639
thinking<font color="#E5E5E5"> what their intent is so that</font>

701
00:26:50,960 --> 00:26:56,969
guy right there<font color="#CCCCCC"> is the guy who</font><font color="#E5E5E5"> made an</font>

702
00:26:53,639 --> 00:26:58,619
<font color="#CCCCCC">son and</font><font color="#E5E5E5"> basically he had this mandate</font>

703
00:26:56,969 --> 00:27:00,559
and I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> think you can probably read</font>

704
00:26:58,619 --> 00:27:02,779
<font color="#E5E5E5">it unless you're in</font><font color="#CCCCCC"> the front row</font><font color="#E5E5E5"> oh</font>

705
00:27:00,559 --> 00:27:05,219
<font color="#E5E5E5">geez okay</font>

706
00:27:02,779 --> 00:27:06,809
he made this mandate so apparently he's

707
00:27:05,219 --> 00:27:08,070
like known for micromanaging and<font color="#CCCCCC"> he just</font>

708
00:27:06,809 --> 00:27:10,379
<font color="#E5E5E5">sent</font><font color="#CCCCCC"> this email</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> to everyone</font>

709
00:27:08,070 --> 00:27:13,139
basically<font color="#E5E5E5"> saying all your data and</font>

710
00:27:10,379 --> 00:27:14,699
<font color="#E5E5E5">functionality must be a service teams</font>

711
00:27:13,139 --> 00:27:17,458
must communicate<font color="#E5E5E5"> only through these</font>

712
00:27:14,700 --> 00:27:19,559
interfaces<font color="#E5E5E5"> no direct linking reading of</font>

713
00:27:17,459 --> 00:27:21,989
other<font color="#CCCCCC"> teams</font><font color="#E5E5E5"> data store everything has to</font>

714
00:27:19,559 --> 00:27:24,119
be a service it doesn't<font color="#E5E5E5"> matter if you're</font>

715
00:27:21,989 --> 00:27:26,849
using HTTP core bro<font color="#E5E5E5"> whatever these</font>

716
00:27:24,119 --> 00:27:29,158
things<font color="#CCCCCC"> doesn't matter and then</font><font color="#E5E5E5"> basically</font>

717
00:27:26,849 --> 00:27:31,829
all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> these in services should</font><font color="#CCCCCC"> be</font>

718
00:27:29,159 --> 00:27:33,479
designed to<font color="#E5E5E5"> be public facing anyone who</font>

719
00:27:31,829 --> 00:27:34,379
<font color="#E5E5E5">doesn't do this will be fired thank you</font>

720
00:27:33,479 --> 00:27:36,479
and have a<font color="#E5E5E5"> nice day</font>

721
00:27:34,379 --> 00:27:39,089
<font color="#CCCCCC">Mme I guess the Amazon employee who</font>

722
00:27:36,479 --> 00:27:40,919
posted this said<font color="#CCCCCC"> haha those</font><font color="#E5E5E5"> who worked</font>

723
00:27:39,089 --> 00:27:42,479
at Amazon folks would of course realize

724
00:27:40,919 --> 00:27:44,009
that number<font color="#E5E5E5"> seven was a joke because</font>

725
00:27:42,479 --> 00:27:47,279
<font color="#CCCCCC">besos most definitely does not give a</font>

726
00:27:44,009 --> 00:27:49,320
<font color="#CCCCCC"> about your day but there's actually</font>

727
00:27:47,279 --> 00:27:51,929
<font color="#E5E5E5">very interesting things here</font><font color="#CCCCCC"> because by</font>

728
00:27:49,320 --> 00:27:53,369
<font color="#CCCCCC">doing this</font><font color="#E5E5E5"> he was able</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> Amazon to</font>

729
00:27:51,929 --> 00:27:55,619
the point where<font color="#CCCCCC"> he</font><font color="#E5E5E5"> can become a services</font>

730
00:27:53,369 --> 00:27:57,449
company<font color="#CCCCCC"> and now you see</font><font color="#E5E5E5"> how empower</font><font color="#CCCCCC"> 'fl</font>

731
00:27:55,619 --> 00:27:59,428
their web services platform<font color="#E5E5E5"> is because</font>

732
00:27:57,450 --> 00:28:02,190
he<font color="#E5E5E5"> got all of</font><font color="#CCCCCC"> his developers</font><font color="#E5E5E5"> basically</font>

733
00:27:59,429 --> 00:28:04,409
gone threat of being fired<font color="#E5E5E5"> to focus on</font>

734
00:28:02,190 --> 00:28:06,259
<font color="#E5E5E5">making everything a public service and</font>

735
00:28:04,409 --> 00:28:08,279
<font color="#CCCCCC">had</font><font color="#E5E5E5"> to think about their data format and</font>

736
00:28:06,259 --> 00:28:11,129
basically<font color="#E5E5E5"> put it out there for</font><font color="#CCCCCC"> other</font>

737
00:28:08,279 --> 00:28:13,259
<font color="#CCCCCC">people</font><font color="#E5E5E5"> to attack that's what I like to</font>

738
00:28:11,129 --> 00:28:14,339
<font color="#CCCCCC">call a verification oriented paradigm</font>

739
00:28:13,259 --> 00:28:18,479
<font color="#CCCCCC">you</font><font color="#E5E5E5"> heard of functional programming</font>

740
00:28:14,339 --> 00:28:20,219
<font color="#CCCCCC">you've heard of you know object-oriented</font>

741
00:28:18,479 --> 00:28:21,749
paradigm now you have another<font color="#E5E5E5"> one it's</font>

742
00:28:20,219 --> 00:28:23,669
<font color="#E5E5E5">basically a meta development paradigm</font>

743
00:28:21,749 --> 00:28:25,229
<font color="#CCCCCC">how can you</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> your developers or if</font>

744
00:28:23,669 --> 00:28:26,879
you are a developer<font color="#E5E5E5"> how can you expose</font>

745
00:28:25,229 --> 00:28:28,679
as much of intent about<font color="#E5E5E5"> what you're</font>

746
00:28:26,879 --> 00:28:30,539
trying<font color="#E5E5E5"> to do to the compiler</font><font color="#CCCCCC"> and</font>

747
00:28:28,679 --> 00:28:32,609
verification tools so they<font color="#CCCCCC"> can help you</font>

748
00:28:30,539 --> 00:28:34,799
do your job<font color="#CCCCCC"> so a quick example if you're</font>

749
00:28:32,609 --> 00:28:36,149
looping<font color="#E5E5E5"> aim for the induction variable</font>

750
00:28:34,799 --> 00:28:38,190
basically the variables<font color="#E5E5E5"> that change to</font>

751
00:28:36,149 --> 00:28:40,049
be really<font color="#CCCCCC"> easily identifiable</font><font color="#E5E5E5"> then the</font>

752
00:28:38,190 --> 00:28:41,219
<font color="#E5E5E5">compiler can do a loop unrolling because</font>

753
00:28:40,049 --> 00:28:43,619
<font color="#E5E5E5">you can actually figure that out and you</font>

754
00:28:41,219 --> 00:28:45,149
<font color="#CCCCCC">can make</font><font color="#E5E5E5"> your code faster</font><font color="#CCCCCC"> you don't want</font>

755
00:28:43,619 --> 00:28:46,559
to overload<font color="#E5E5E5"> types because again</font><font color="#CCCCCC"> that</font>

756
00:28:45,149 --> 00:28:48,859
<font color="#E5E5E5">means there's more</font><font color="#CCCCCC"> ambiguity about</font>

757
00:28:46,559 --> 00:28:51,629
<font color="#E5E5E5">certain things</font>

758
00:28:48,859 --> 00:28:53,849
so some certain benefits kind<font color="#E5E5E5"> of got all</font>

759
00:28:51,629 --> 00:28:56,070
this stuff<font color="#E5E5E5"> here's a graph from some</font>

760
00:28:53,849 --> 00:28:58,259
software engineering book<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> if</font>

761
00:28:56,070 --> 00:29:00,239
<font color="#E5E5E5">you are fixing a bug really early</font><font color="#CCCCCC"> on</font>

762
00:28:58,259 --> 00:29:01,829
it's really<font color="#E5E5E5"> cheap if you're fixing a bug</font>

763
00:29:00,239 --> 00:29:03,959
in production or operation<font color="#E5E5E5"> it's really</font>

764
00:29:01,829 --> 00:29:05,459
expensive<font color="#E5E5E5"> you want to be doing it sooner</font>

765
00:29:03,959 --> 00:29:07,230
<font color="#CCCCCC">because it's a better business thing so</font>

766
00:29:05,459 --> 00:29:09,540
all<font color="#CCCCCC"> of you program managers you</font>

767
00:29:07,230 --> 00:29:11,190
a good example<font color="#CCCCCC"> so for those of you</font>

768
00:29:09,540 --> 00:29:13,139
programmers who maybe want an example

769
00:29:11,190 --> 00:29:15,900
<font color="#CCCCCC">like a little bit more concrete this is</font>

770
00:29:13,140 --> 00:29:17,820
a really simple<font color="#E5E5E5"> development trick that</font>

771
00:29:15,900 --> 00:29:20,370
<font color="#E5E5E5">allows you to push a what could be a</font>

772
00:29:17,820 --> 00:29:23,370
runtime bug<font color="#E5E5E5"> into</font><font color="#CCCCCC"> compile time so this</font><font color="#E5E5E5"> is</font>

773
00:29:20,370 --> 00:29:24,689
C code not really<font color="#E5E5E5"> but basically if you</font>

774
00:29:23,370 --> 00:29:28,320
have a<font color="#E5E5E5"> variable and you're checking</font>

775
00:29:24,690 --> 00:29:30,030
against a constant<font color="#CCCCCC"> the first one and the</font>

776
00:29:28,320 --> 00:29:31,439
second<font color="#CCCCCC"> one are slightly different but</font>

777
00:29:30,030 --> 00:29:33,000
semantically equivalent right you're

778
00:29:31,440 --> 00:29:34,860
<font color="#CCCCCC">there checking</font><font color="#E5E5E5"> if the variable a is</font>

779
00:29:33,000 --> 00:29:37,590
equal<font color="#CCCCCC"> to</font><font color="#E5E5E5"> 10 or</font><font color="#CCCCCC"> if you're checking</font><font color="#E5E5E5"> if 10</font>

780
00:29:34,860 --> 00:29:38,790
is<font color="#CCCCCC"> equal</font><font color="#E5E5E5"> to a no big problem so as long</font>

781
00:29:37,590 --> 00:29:41,340
as<font color="#E5E5E5"> you implement them correctly</font><font color="#CCCCCC"> you're</font>

782
00:29:38,790 --> 00:29:43,799
all good<font color="#CCCCCC"> if you fat-finger and forget</font>

783
00:29:41,340 --> 00:29:45,959
about<font color="#E5E5E5"> that second equal sign the first</font>

784
00:29:43,799 --> 00:29:48,750
<font color="#E5E5E5">one will compile and now basically</font>

785
00:29:45,960 --> 00:29:50,669
<font color="#E5E5E5">you're doing</font><font color="#CCCCCC"> if a is</font><font color="#E5E5E5"> assigned to 10 and</font>

786
00:29:48,750 --> 00:29:53,010
that means it's<font color="#E5E5E5"> going to be a runtime</font>

787
00:29:50,669 --> 00:29:55,140
error<font color="#E5E5E5"> or some semantic ambiguity the</font>

788
00:29:53,010 --> 00:29:56,520
second one will fail to<font color="#E5E5E5"> compile which</font>

789
00:29:55,140 --> 00:29:59,910
means you're like oh I forgot<font color="#CCCCCC"> that</font>

790
00:29:56,520 --> 00:30:01,760
extra equal sign no problem<font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> a</font>

791
00:29:59,910 --> 00:30:04,110
<font color="#E5E5E5">really small example I think</font><font color="#CCCCCC"> actually I</font>

792
00:30:01,760 --> 00:30:05,520
from the<font color="#CCCCCC"> keynote today another one</font><font color="#E5E5E5"> is</font>

793
00:30:04,110 --> 00:30:08,250
<font color="#E5E5E5">just if you do if and then a variable</font>

794
00:30:05,520 --> 00:30:10,590
<font color="#E5E5E5">you're basically assigning anything</font>

795
00:30:08,250 --> 00:30:12,360
that's not<font color="#CCCCCC"> 0 to B ok</font><font color="#E5E5E5"> and as we saw</font>

796
00:30:10,590 --> 00:30:14,879
before<font color="#CCCCCC"> that means someone that can</font>

797
00:30:12,360 --> 00:30:18,418
corrupt even encrypted data can<font color="#E5E5E5"> then set</font>

798
00:30:14,880 --> 00:30:19,860
it to<font color="#E5E5E5"> not</font><font color="#CCCCCC"> zero so reducing complexity</font><font color="#E5E5E5"> we</font>

799
00:30:18,419 --> 00:30:21,299
try to implement<font color="#E5E5E5"> the least</font><font color="#CCCCCC"> privileged</font>

800
00:30:19,860 --> 00:30:23,428
principle<font color="#E5E5E5"> in the network you don't give</font>

801
00:30:21,299 --> 00:30:25,200
<font color="#E5E5E5">everyone root if any one of you guys</font>

802
00:30:23,429 --> 00:30:27,330
connect to IRC<font color="#E5E5E5"> and your username is root</font>

803
00:30:25,200 --> 00:30:27,750
at whatever means you're logged in as

804
00:30:27,330 --> 00:30:29,010
<font color="#CCCCCC">root</font>

805
00:30:27,750 --> 00:30:30,600
you'll get laughed out<font color="#CCCCCC"> of</font><font color="#E5E5E5"> pretty much</font>

806
00:30:29,010 --> 00:30:33,360
any security<font color="#CCCCCC"> channel</font><font color="#E5E5E5"> so don't do that</font>

807
00:30:30,600 --> 00:30:35,010
<font color="#E5E5E5">but</font><font color="#CCCCCC"> I like</font><font color="#E5E5E5"> to argue that computational</font>

808
00:30:33,360 --> 00:30:36,299
power in and<font color="#E5E5E5"> of itself is another form</font>

809
00:30:35,010 --> 00:30:38,549
of<font color="#CCCCCC"> privilege</font><font color="#E5E5E5"> and we're pretty much</font>

810
00:30:36,299 --> 00:30:40,530
<font color="#E5E5E5">running everything</font><font color="#CCCCCC"> as root so AV usually</font>

811
00:30:38,549 --> 00:30:41,340
relies on<font color="#E5E5E5"> having more privilege thank</font>

812
00:30:40,530 --> 00:30:43,740
you

813
00:30:41,340 --> 00:30:45,780
then malware and it doesn't work if

814
00:30:43,740 --> 00:30:48,000
we're all<font color="#E5E5E5"> running in the same level</font><font color="#CCCCCC"> of</font>

815
00:30:45,780 --> 00:30:49,830
computational<font color="#E5E5E5"> power</font><font color="#CCCCCC"> so here's an HR that</font>

816
00:30:48,000 --> 00:30:52,049
shows you that<font color="#E5E5E5"> basically there's the</font>

817
00:30:49,830 --> 00:30:54,299
Chomsky<font color="#E5E5E5"> hierarchy on the bottom and then</font>

818
00:30:52,049 --> 00:30:56,520
your more traditional privilege of user

819
00:30:54,299 --> 00:30:58,530
and admin and then ring<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> in the kernel</font>

820
00:30:56,520 --> 00:30:59,820
<font color="#E5E5E5">and hypervisors and you look at a whole</font>

821
00:30:58,530 --> 00:31:01,799
bunch<font color="#CCCCCC"> of different data points</font><font color="#E5E5E5"> and</font>

822
00:30:59,820 --> 00:31:05,580
almost<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> is running</font><font color="#E5E5E5"> in the more</font>

823
00:31:01,799 --> 00:31:07,799
powerful<font color="#E5E5E5"> side more complex problems lead</font>

824
00:31:05,580 --> 00:31:09,659
to more complex bugs<font color="#CCCCCC"> more chances</font><font color="#E5E5E5"> of</font>

825
00:31:07,799 --> 00:31:11,490
error<font color="#E5E5E5"> less chance of detection and</font><font color="#CCCCCC"> then</font>

826
00:31:09,660 --> 00:31:13,770
getting<font color="#E5E5E5"> hauled in front of Congress so</font>

827
00:31:11,490 --> 00:31:15,659
the rule to limit looping will restrict

828
00:31:13,770 --> 00:31:17,400
<font color="#CCCCCC">your growth and it improves</font>

829
00:31:15,659 --> 00:31:19,320
verifications I have an<font color="#E5E5E5"> I Triple E paper</font>

830
00:31:17,400 --> 00:31:21,030
where I wrote a compiler that<font color="#E5E5E5"> is</font>

831
00:31:19,320 --> 00:31:23,429
provably sub Turing so you can't

832
00:31:21,030 --> 00:31:25,770
right a non terminating program in it

833
00:31:23,430 --> 00:31:27,600
<font color="#E5E5E5">and we found that</font><font color="#CCCCCC"> a very few</font>

834
00:31:25,770 --> 00:31:29,340
computations actually need that<font color="#CCCCCC"> or if</font>

835
00:31:27,600 --> 00:31:31,889
you design your application<font color="#E5E5E5"> properly so</font>

836
00:31:29,340 --> 00:31:33,659
you have a<font color="#E5E5E5"> PDF reader the actual parsing</font>

837
00:31:31,890 --> 00:31:35,610
<font color="#E5E5E5">of a PDF file should never take an</font>

838
00:31:33,660 --> 00:31:38,220
<font color="#CCCCCC">indeterminant</font><font color="#E5E5E5"> long amount of</font><font color="#CCCCCC"> time</font><font color="#E5E5E5"> it</font>

839
00:31:35,610 --> 00:31:40,800
should<font color="#E5E5E5"> be some polynomial function over</font>

840
00:31:38,220 --> 00:31:42,210
the size of the file and then your UI

841
00:31:40,800 --> 00:31:43,590
loop that can go<font color="#E5E5E5"> forever because you</font>

842
00:31:42,210 --> 00:31:47,430
<font color="#E5E5E5">have no idea if the users walked away to</font>

843
00:31:43,590 --> 00:31:48,750
get<font color="#E5E5E5"> a coffee or is dead right</font><font color="#CCCCCC"> so very</font>

844
00:31:47,430 --> 00:31:50,340
few computations need that<font color="#E5E5E5"> if you</font>

845
00:31:48,750 --> 00:31:52,560
<font color="#CCCCCC">isolate things out and then we also</font>

846
00:31:50,340 --> 00:31:54,629
showed like pretty good<font color="#E5E5E5"> verification</font><font color="#CCCCCC"> and</font>

847
00:31:52,560 --> 00:31:56,909
security benefits from that<font color="#E5E5E5"> and that</font><font color="#CCCCCC"> was</font>

848
00:31:54,630 --> 00:31:58,230
also done manually<font color="#E5E5E5"> on the SCL</font><font color="#CCCCCC"> 4 which is</font>

849
00:31:56,910 --> 00:32:00,120
the you<font color="#E5E5E5"> I think the only formally</font>

850
00:31:58,230 --> 00:32:01,890
verified microkernel in existence out

851
00:32:00,120 --> 00:32:04,409
there it's<font color="#CCCCCC"> open source it's pretty cool</font>

852
00:32:01,890 --> 00:32:05,940
<font color="#CCCCCC">but</font><font color="#E5E5E5"> they did that by segregating bounded</font>

853
00:32:04,410 --> 00:32:09,300
and unbounded code<font color="#CCCCCC"> manually and then</font>

854
00:32:05,940 --> 00:32:10,890
doing<font color="#E5E5E5"> a lot of verification work so</font>

855
00:32:09,300 --> 00:32:12,780
tools<font color="#E5E5E5"> for enforcement it's really nice</font>

856
00:32:10,890 --> 00:32:14,340
to<font color="#CCCCCC"> know all this</font><font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> but if you're</font>

857
00:32:12,780 --> 00:32:15,990
like me and you're lazy

858
00:32:14,340 --> 00:32:17,370
you're not gonna do<font color="#E5E5E5"> them unless someone</font>

859
00:32:15,990 --> 00:32:19,410
is<font color="#CCCCCC"> telling you or beating you</font><font color="#E5E5E5"> at the</font>

860
00:32:17,370 --> 00:32:20,790
stick<font color="#CCCCCC"> right</font><font color="#E5E5E5"> you know morale will improve</font>

861
00:32:19,410 --> 00:32:22,770
or<font color="#E5E5E5"> the beatings will continue until</font>

862
00:32:20,790 --> 00:32:24,330
morale improves right<font color="#E5E5E5"> so how do you do</font>

863
00:32:22,770 --> 00:32:27,270
<font color="#E5E5E5">this how do you encode this into your</font>

864
00:32:24,330 --> 00:32:30,720
development<font color="#CCCCCC"> process SDLC so code reviews</font>

865
00:32:27,270 --> 00:32:32,129
function testing QA etc etc<font color="#E5E5E5"> obviously</font>

866
00:32:30,720 --> 00:32:33,510
you want to<font color="#E5E5E5"> scale for effort right it's</font>

867
00:32:32,130 --> 00:32:34,920
just like technical debt you want to

868
00:32:33,510 --> 00:32:36,960
figure<font color="#E5E5E5"> out where you're comfortable</font><font color="#CCCCCC"> and</font>

869
00:32:34,920 --> 00:32:38,040
<font color="#E5E5E5">where your</font><font color="#CCCCCC"> organization should</font><font color="#E5E5E5"> sit you</font>

870
00:32:36,960 --> 00:32:40,260
<font color="#E5E5E5">know you want to spend</font><font color="#CCCCCC"> the most amount</font>

871
00:32:38,040 --> 00:32:42,690
of<font color="#E5E5E5"> time and figuring out where you're</font>

872
00:32:40,260 --> 00:32:45,240
<font color="#E5E5E5">gonna</font><font color="#CCCCCC"> be in your</font><font color="#E5E5E5"> specification because</font>

873
00:32:42,690 --> 00:32:46,560
<font color="#E5E5E5">again data's format is</font><font color="#CCCCCC"> codes destiny so</font>

874
00:32:45,240 --> 00:32:47,940
if you can figure<font color="#E5E5E5"> that</font><font color="#CCCCCC"> out you're gonna</font>

875
00:32:46,560 --> 00:32:49,470
save<font color="#CCCCCC"> yourself a big headache</font><font color="#E5E5E5"> down the</font>

876
00:32:47,940 --> 00:32:51,480
road and then doing<font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> of</font>

877
00:32:49,470 --> 00:32:52,830
<font color="#E5E5E5">dynamic analysis fuzzing unit tests and</font>

878
00:32:51,480 --> 00:32:56,760
<font color="#E5E5E5">then you don't want to get on the front</font>

879
00:32:52,830 --> 00:32:58,919
page<font color="#CCCCCC"> there's some</font><font color="#E5E5E5"> tools out there cool</font>

880
00:32:56,760 --> 00:33:00,270
<font color="#E5E5E5">crema I talked about</font><font color="#CCCCCC"> it's open source if</font>

881
00:32:58,920 --> 00:33:02,670
you're curious is<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> it's</font>

882
00:33:00,270 --> 00:33:04,200
embeddable<font color="#E5E5E5"> domain-specific language that</font>

883
00:33:02,670 --> 00:33:08,190
you can<font color="#CCCCCC"> use for parsing</font><font color="#E5E5E5"> it's got a</font>

884
00:33:04,200 --> 00:33:10,650
familiar<font color="#CCCCCC"> syntax you</font><font color="#E5E5E5"> can use form of</font>

885
00:33:08,190 --> 00:33:12,570
partial generators but a hammer and<font color="#CCCCCC"> Nam</font>

886
00:33:10,650 --> 00:33:14,610
are ones<font color="#E5E5E5"> that Meredith is going to talk</font>

887
00:33:12,570 --> 00:33:17,490
<font color="#E5E5E5">about they're designed for complex data</font>

888
00:33:14,610 --> 00:33:18,990
parsing and so basically<font color="#E5E5E5"> you can plan</font>

889
00:33:17,490 --> 00:33:22,050
your<font color="#E5E5E5"> specification and you can implement</font>

890
00:33:18,990 --> 00:33:24,660
<font color="#E5E5E5">that one example of fail on</font><font color="#CCCCCC"> that is the</font>

891
00:33:22,050 --> 00:33:26,520
IP version<font color="#E5E5E5"> 6 fragmentation you can</font>

892
00:33:24,660 --> 00:33:28,710
actually scramble the packets up so<font color="#E5E5E5"> long</font>

893
00:33:26,520 --> 00:33:30,480
<font color="#E5E5E5">that it takes a laugh or some kind of</font>

894
00:33:28,710 --> 00:33:32,070
firewall so long to recompile<font color="#E5E5E5"> it that it</font>

895
00:33:30,480 --> 00:33:33,600
just<font color="#E5E5E5"> has to pass the packet through in</font>

896
00:33:32,070 --> 00:33:34,679
<font color="#E5E5E5">order to deal with</font><font color="#CCCCCC"> the quality</font><font color="#E5E5E5"> of</font>

897
00:33:33,600 --> 00:33:35,939
service guidelines<font color="#E5E5E5"> and then</font>

898
00:33:34,680 --> 00:33:38,580
can pass things<font color="#E5E5E5"> through so there was</font><font color="#CCCCCC"> a</font>

899
00:33:35,940 --> 00:33:40,440
<font color="#E5E5E5">talk by some</font><font color="#CCCCCC"> Iran W guys a couple years</font>

900
00:33:38,580 --> 00:33:42,480
ago<font color="#CCCCCC"> where they would just send a simple</font>

901
00:33:40,440 --> 00:33:43,680
<font color="#E5E5E5">SQL injection that should</font><font color="#CCCCCC"> have been</font>

902
00:33:42,480 --> 00:33:45,030
<font color="#CCCCCC">caught by</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> laughs and they</font><font color="#E5E5E5"> just</font>

903
00:33:43,680 --> 00:33:48,540
reordered the packets and then<font color="#E5E5E5"> the thing</font>

904
00:33:45,030 --> 00:33:50,280
went and right through<font color="#CCCCCC"> nail</font><font color="#E5E5E5"> was</font>

905
00:33:48,540 --> 00:33:51,720
something built on top of hammer<font color="#E5E5E5"> that</font>

906
00:33:50,280 --> 00:33:53,070
<font color="#E5E5E5">basically allows you to write a data</font>

907
00:33:51,720 --> 00:33:54,810
structure<font color="#E5E5E5"> and then it will automatically</font>

908
00:33:53,070 --> 00:33:57,389
<font color="#CCCCCC">generate parsers and generators for that</font>

909
00:33:54,810 --> 00:33:58,860
while rejecting<font color="#CCCCCC"> anything invalid</font><font color="#E5E5E5"> so here</font>

910
00:33:57,390 --> 00:34:01,260
we have a<font color="#E5E5E5"> really simple</font><font color="#CCCCCC"> example I'm</font>

911
00:33:58,860 --> 00:34:01,699
going very<font color="#E5E5E5"> quickly because we're on the</font>

912
00:34:01,260 --> 00:34:05,010
<font color="#E5E5E5">clock</font>

913
00:34:01,700 --> 00:34:07,290
<font color="#E5E5E5">basically you have</font><font color="#CCCCCC"> an employee database</font>

914
00:34:05,010 --> 00:34:09,510
which has<font color="#CCCCCC"> an employee</font><font color="#E5E5E5"> name and etc</font><font color="#CCCCCC"> you</font>

915
00:34:07,290 --> 00:34:12,000
<font color="#CCCCCC">basically create this</font><font color="#E5E5E5"> little structure</font>

916
00:34:09,510 --> 00:34:14,070
<font color="#E5E5E5">right here of a person that</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> database</font>

917
00:34:12,000 --> 00:34:16,590
is basically comma separated many people

918
00:34:14,070 --> 00:34:18,630
and<font color="#E5E5E5"> that will automatically</font><font color="#CCCCCC"> generate a</font>

919
00:34:16,590 --> 00:34:20,070
parse person and a<font color="#E5E5E5"> parse database and</font>

920
00:34:18,630 --> 00:34:21,480
then a generate person<font color="#E5E5E5"> of generate</font>

921
00:34:20,070 --> 00:34:23,610
database and all the structures you<font color="#E5E5E5"> need</font>

922
00:34:21,480 --> 00:34:24,929
and looking at<font color="#E5E5E5"> this code makes a lot</font>

923
00:34:23,610 --> 00:34:28,590
more sense than looking<font color="#E5E5E5"> at something</font>

924
00:34:24,929 --> 00:34:30,419
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> open SSL code another cool</font>

925
00:34:28,590 --> 00:34:33,090
tool is<font color="#CCCCCC"> Cle which is a symbolic</font>

926
00:34:30,420 --> 00:34:35,250
<font color="#E5E5E5">execution engine you can gain really</font>

927
00:34:33,090 --> 00:34:37,350
<font color="#E5E5E5">high coverage of code and</font><font color="#CCCCCC"> you can find</font>

928
00:34:35,250 --> 00:34:39,120
crash<font color="#CCCCCC"> cases or verify semantic</font>

929
00:34:37,350 --> 00:34:40,350
differences in between<font color="#E5E5E5"> certain areas</font>

930
00:34:39,120 --> 00:34:42,480
<font color="#CCCCCC">like</font><font color="#E5E5E5"> let's checking for partial</font>

931
00:34:40,350 --> 00:34:44,670
differentials<font color="#E5E5E5"> so what is symbolic</font>

932
00:34:42,480 --> 00:34:46,170
execution<font color="#CCCCCC"> basically when you're running</font>

933
00:34:44,670 --> 00:34:48,659
your software whenever you reach a

934
00:34:46,170 --> 00:34:50,909
branch<font color="#E5E5E5"> you execute both paths of them</font>

935
00:34:48,659 --> 00:34:52,679
and you maintain<font color="#E5E5E5"> the constraints on</font><font color="#CCCCCC"> how</font>

936
00:34:50,909 --> 00:34:55,440
you would<font color="#E5E5E5"> have gotten there so you start</font>

937
00:34:52,679 --> 00:34:57,299
off with you<font color="#E5E5E5"> know x equals x and you go</font>

938
00:34:55,440 --> 00:34:59,040
down there<font color="#E5E5E5"> and then basically there's an</font>

939
00:34:57,300 --> 00:35:00,990
a conditional statement<font color="#CCCCCC"> and</font><font color="#E5E5E5"> used to</font>

940
00:34:59,040 --> 00:35:03,150
assume okay<font color="#E5E5E5"> the constraints on the</font>

941
00:35:00,990 --> 00:35:05,520
program is<font color="#E5E5E5"> that X is less than Y for the</font>

942
00:35:03,150 --> 00:35:07,230
left<font color="#E5E5E5"> and X is greater than or</font><font color="#CCCCCC"> equal</font><font color="#E5E5E5"> to Y</font>

943
00:35:05,520 --> 00:35:09,060
for that and say if that false case

944
00:35:07,230 --> 00:35:10,620
crashes you can then solve the

945
00:35:09,060 --> 00:35:13,680
constraints on that<font color="#E5E5E5"> and get</font><font color="#CCCCCC"> a real input</font>

946
00:35:10,620 --> 00:35:14,940
that<font color="#E5E5E5"> will crash</font><font color="#CCCCCC"> your program</font><font color="#E5E5E5"> so there's</font>

947
00:35:13,680 --> 00:35:16,950
a quick tool I'm<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to show you</font><font color="#CCCCCC"> about</font>

948
00:35:14,940 --> 00:35:18,960
<font color="#CCCCCC">that</font><font color="#E5E5E5"> and then I'll get out</font><font color="#CCCCCC"> of here and I</font>

949
00:35:16,950 --> 00:35:20,250
think<font color="#CCCCCC"> it's break time so the</font><font color="#E5E5E5"> Pope came</font>

950
00:35:18,960 --> 00:35:21,570
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> US</font><font color="#E5E5E5"> and it's pretty cool he</font>

951
00:35:20,250 --> 00:35:23,700
performed a<font color="#CCCCCC"> miracle I'm not sure if you</font>

952
00:35:21,570 --> 00:35:24,990
guys<font color="#E5E5E5"> heard about this it's really neat</font>

953
00:35:23,700 --> 00:35:29,600
and<font color="#CCCCCC"> I just threw this in there because I</font>

954
00:35:24,990 --> 00:35:29,600
thought<font color="#E5E5E5"> it was</font><font color="#CCCCCC"> a funny gift</font><font color="#E5E5E5"> Wow</font>

955
00:35:30,810 --> 00:35:34,770
<font color="#E5E5E5">all right so I made a quick open-source</font>

956
00:35:33,150 --> 00:35:37,110
little<font color="#CCCCCC"> toolkit</font><font color="#E5E5E5"> that I'm</font><font color="#CCCCCC"> building right</font>

957
00:35:34,770 --> 00:35:39,270
now to do this<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of this so</font><font color="#E5E5E5"> you could</font>

958
00:35:37,110 --> 00:35:41,250
add this if you're masochistic or

959
00:35:39,270 --> 00:35:42,509
sadistic program manager you<font color="#E5E5E5"> could add</font>

960
00:35:41,250 --> 00:35:45,270
this into<font color="#CCCCCC"> your continuous integration</font>

961
00:35:42,510 --> 00:35:46,950
stuff<font color="#CCCCCC"> basically there's some memory</font>

962
00:35:45,270 --> 00:35:47,340
<font color="#E5E5E5">management failures you can cause random</font>

963
00:35:46,950 --> 00:35:50,520
fail

964
00:35:47,340 --> 00:35:52,260
<font color="#E5E5E5">of your memory allocation</font><font color="#CCCCCC"> you could have</font>

965
00:35:50,520 --> 00:35:55,140
a header file that<font color="#E5E5E5"> can poison certain</font>

966
00:35:52,260 --> 00:35:56,610
bad things like get<font color="#E5E5E5"> s or some of those</font>

967
00:35:55,140 --> 00:35:58,230
<font color="#E5E5E5">ones that are known to cause</font><font color="#CCCCCC"> problems</font>

968
00:35:56,610 --> 00:36:01,020
<font color="#CCCCCC">and then the one I'm going to talk</font>

969
00:35:58,230 --> 00:36:02,790
<font color="#CCCCCC">mostly about is automatic symbolic</font>

970
00:36:01,020 --> 00:36:04,440
testing for parameter variation every

971
00:36:02,790 --> 00:36:07,940
function so basically automatic unit

972
00:36:04,440 --> 00:36:07,940
test<font color="#E5E5E5"> generation using symbolic execution</font>

973
00:36:08,000 --> 00:36:10,860
<font color="#E5E5E5">this one pretty easy that one's pretty</font>

974
00:36:10,470 --> 00:36:12,450
<font color="#CCCCCC">easy</font>

975
00:36:10,860 --> 00:36:17,490
<font color="#CCCCCC">alright so clue unit is the name for</font>

976
00:36:12,450 --> 00:36:21,689
that little 90s I know so<font color="#E5E5E5"> CLE when you</font>

977
00:36:17,490 --> 00:36:23,339
give it a whole<font color="#E5E5E5"> program it takes rarely</font>

978
00:36:21,690 --> 00:36:24,990
will it find every single<font color="#CCCCCC"> bug and it</font>

979
00:36:23,340 --> 00:36:27,570
requires a<font color="#E5E5E5"> lot of computation we did</font>

980
00:36:24,990 --> 00:36:29,759
this on<font color="#E5E5E5"> some programs and you end up</font>

981
00:36:27,570 --> 00:36:31,830
running<font color="#CCCCCC"> into</font><font color="#E5E5E5"> an np-complete</font><font color="#CCCCCC"> problem for</font>

982
00:36:29,760 --> 00:36:33,570
<font color="#E5E5E5">solving those constraints and those take</font>

983
00:36:31,830 --> 00:36:35,490
longer<font color="#E5E5E5"> and longer and longer like on the</font>

984
00:36:33,570 --> 00:36:38,070
order<font color="#E5E5E5"> of you know hours and hours and</font>

985
00:36:35,490 --> 00:36:39,959
hours<font color="#CCCCCC"> to solve a whole program and that</font>

986
00:36:38,070 --> 00:36:41,730
can find really interesting bugs where

987
00:36:39,960 --> 00:36:43,560
if you have some state<font color="#CCCCCC"> and program over</font>

988
00:36:41,730 --> 00:36:45,330
here<font color="#E5E5E5"> that interacts in a weird way with</font>

989
00:36:43,560 --> 00:36:46,680
program over here<font color="#CCCCCC"> and that's something</font>

990
00:36:45,330 --> 00:36:48,450
<font color="#E5E5E5">that's going to only be found through</font>

991
00:36:46,680 --> 00:36:51,060
like functional testing or really kind

992
00:36:48,450 --> 00:36:53,339
<font color="#CCCCCC">of guided fuzzing what I was</font><font color="#E5E5E5"> thinking</font>

993
00:36:51,060 --> 00:36:55,380
<font color="#E5E5E5">about doing is I hate writing unit tests</font>

994
00:36:53,340 --> 00:36:57,120
<font color="#E5E5E5">and they're so silly for</font><font color="#CCCCCC"> a small</font>

995
00:36:55,380 --> 00:36:58,740
<font color="#CCCCCC">function is there a way that I could</font>

996
00:36:57,120 --> 00:37:01,170
speed that up<font color="#CCCCCC"> and</font><font color="#E5E5E5"> so basically what I</font>

997
00:36:58,740 --> 00:37:03,120
<font color="#E5E5E5">wrote is is a</font><font color="#CCCCCC"> C parser that for each</font>

998
00:37:01,170 --> 00:37:05,310
function<font color="#E5E5E5"> in your program it generates</font>

999
00:37:03,120 --> 00:37:07,740
symbolic values that are<font color="#E5E5E5"> passed to that</font>

1000
00:37:05,310 --> 00:37:09,029
function<font color="#CCCCCC"> they execute every branch in</font>

1001
00:37:07,740 --> 00:37:11,220
that little function so you're not<font color="#E5E5E5"> going</font>

1002
00:37:09,030 --> 00:37:13,500
to find<font color="#E5E5E5"> in secure composition you're</font>

1003
00:37:11,220 --> 00:37:15,180
gonna find just little kind of flaws<font color="#CCCCCC"> I</font>

1004
00:37:13,500 --> 00:37:17,970
have a demo<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I can show you guys</font>

1005
00:37:15,180 --> 00:37:20,970
<font color="#E5E5E5">later</font><font color="#CCCCCC"> offline as I'm</font><font color="#E5E5E5"> running low on time</font>

1006
00:37:17,970 --> 00:37:24,839
<font color="#E5E5E5">but basically I wrote a program that has</font>

1007
00:37:20,970 --> 00:37:26,459
a slight<font color="#CCCCCC"> / 0 error in some cases</font><font color="#E5E5E5"> and I'm</font>

1008
00:37:24,840 --> 00:37:28,590
able<font color="#CCCCCC"> to automatically</font><font color="#E5E5E5"> find it and point</font>

1009
00:37:26,460 --> 00:37:31,470
out to where I need<font color="#E5E5E5"> to fix it</font><font color="#CCCCCC"> without</font>

1010
00:37:28,590 --> 00:37:33,540
<font color="#E5E5E5">having to write a single unit test so</font>

1011
00:37:31,470 --> 00:37:35,370
that's something cool it's available<font color="#E5E5E5"> on</font>

1012
00:37:33,540 --> 00:37:36,810
github and it still needs<font color="#CCCCCC"> to some</font><font color="#E5E5E5"> work</font>

1013
00:37:35,370 --> 00:37:38,549
<font color="#CCCCCC">but I'm kind of nice</font>

1014
00:37:36,810 --> 00:37:45,540
so in conclusion<font color="#E5E5E5"> as we're down to</font><font color="#CCCCCC"> our</font>

1015
00:37:38,550 --> 00:37:47,610
few minutes<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> yeah these slides</font>

1016
00:37:45,540 --> 00:37:49,560
will all be posted<font color="#CCCCCC"> online I don't know</font>

1017
00:37:47,610 --> 00:37:51,210
why everyone takes take pictures of

1018
00:37:49,560 --> 00:37:52,890
slides but they're all come out crap I

1019
00:37:51,210 --> 00:37:54,930
don't know<font color="#E5E5E5"> I was at sissy and there was</font>

1020
00:37:52,890 --> 00:37:56,339
like 15 Chinese people with big SLR

1021
00:37:54,930 --> 00:37:58,259
cameras taking a picture<font color="#E5E5E5"> of every slide</font>

1022
00:37:56,340 --> 00:37:59,230
<font color="#E5E5E5">and I told them the slides were gonna be</font>

1023
00:37:58,260 --> 00:38:02,560
posted online

1024
00:37:59,230 --> 00:38:04,480
anyway so the perimeter<font color="#E5E5E5"> grows weaker</font>

1025
00:38:02,560 --> 00:38:06,490
<font color="#CCCCCC">Network defenses must shift to</font><font color="#E5E5E5"> more</font>

1026
00:38:04,480 --> 00:38:08,290
<font color="#E5E5E5">hardened applications so Alex Thomas has</font>

1027
00:38:06,490 --> 00:38:10,750
a great talk at on<font color="#E5E5E5"> YouTube called app</font>

1028
00:38:08,290 --> 00:38:13,810
<font color="#CCCCCC">sec is eating security one of the most</font>

1029
00:38:10,750 --> 00:38:15,430
pivotal lines in it is the time that<font color="#CCCCCC"> a</font>

1030
00:38:13,810 --> 00:38:17,200
firewall<font color="#E5E5E5"> has to make a determination</font>

1031
00:38:15,430 --> 00:38:18,848
about whether<font color="#E5E5E5"> or</font><font color="#CCCCCC"> not a packet is</font>

1032
00:38:17,200 --> 00:38:20,770
malicious<font color="#CCCCCC"> or not and whether to drop</font><font color="#E5E5E5"> it</font>

1033
00:38:18,849 --> 00:38:23,140
or not<font color="#E5E5E5"> it's the same amount</font><font color="#CCCCCC"> of time as a</font>

1034
00:38:20,770 --> 00:38:26,800
photon<font color="#E5E5E5"> does when it bounces off my</font>

1035
00:38:23,140 --> 00:38:28,359
toenail and into my eye<font color="#E5E5E5"> and as we move</font>

1036
00:38:26,800 --> 00:38:30,400
towards you know<font color="#CCCCCC"> forty and hundred</font>

1037
00:38:28,359 --> 00:38:32,440
gigabit systems<font color="#E5E5E5"> that's gonna get even</font>

1038
00:38:30,400 --> 00:38:34,450
even shorter<font color="#CCCCCC"> so I'm you know in the</font>

1039
00:38:32,440 --> 00:38:36,339
average height<font color="#E5E5E5"> but now</font><font color="#CCCCCC"> imagine a much</font>

1040
00:38:34,450 --> 00:38:37,720
smaller person<font color="#E5E5E5"> that gets incrementally</font>

1041
00:38:36,339 --> 00:38:40,359
more difficult and<font color="#E5E5E5"> so we have to harden</font>

1042
00:38:37,720 --> 00:38:43,390
our applications so my prediction

1043
00:38:40,359 --> 00:38:45,759
<font color="#E5E5E5">Nostradamus</font><font color="#CCCCCC"> Jakob says lang</font><font color="#E5E5E5"> SEC is</font>

1044
00:38:43,390 --> 00:38:47,140
eating<font color="#CCCCCC"> AB sec I think Google's</font><font color="#E5E5E5"> beyond</font>

1045
00:38:45,760 --> 00:38:48,790
<font color="#E5E5E5">Corp initiative showed that the</font>

1046
00:38:47,140 --> 00:38:50,890
perimeter<font color="#E5E5E5"> leads to that false sense of</font>

1047
00:38:48,790 --> 00:38:52,300
security thinking that oh I<font color="#CCCCCC"> get so K to</font>

1048
00:38:50,890 --> 00:38:54,490
do something really<font color="#E5E5E5"> silly because I'm</font>

1049
00:38:52,300 --> 00:38:56,260
inside my network<font color="#E5E5E5"> and that is an</font><font color="#CCCCCC"> issue</font>

1050
00:38:54,490 --> 00:38:59,078
that<font color="#CCCCCC"> also comes up with an application</font>

1051
00:38:56,260 --> 00:39:00,430
security<font color="#CCCCCC"> a quote I made up to err is</font>

1052
00:38:59,079 --> 00:39:07,210
human<font color="#E5E5E5"> to be caught at compile time</font>

1053
00:39:00,430 --> 00:39:08,828
<font color="#E5E5E5">divine secondly you're trying to do your</font>

1054
00:39:07,210 --> 00:39:10,660
tooling and your organization trying<font color="#E5E5E5"> to</font>

1055
00:39:08,829 --> 00:39:12,520
add some<font color="#CCCCCC"> of this stuff into</font><font color="#E5E5E5"> your</font><font color="#CCCCCC"> SDLC</font>

1056
00:39:10,660 --> 00:39:14,348
will hopefully improve<font color="#E5E5E5"> the semantic</font>

1057
00:39:12,520 --> 00:39:16,060
quality of<font color="#E5E5E5"> your applications and the</font>

1058
00:39:14,349 --> 00:39:18,430
verification<font color="#CCCCCC"> of that allow you to trust</font>

1059
00:39:16,060 --> 00:39:20,200
<font color="#CCCCCC">but verify and also for those</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> you</font>

1060
00:39:18,430 --> 00:39:22,720
program managers out there<font color="#E5E5E5"> it's not just</font>

1061
00:39:20,200 --> 00:39:24,700
<font color="#CCCCCC">for security</font><font color="#E5E5E5"> it's less expensive because</font>

1062
00:39:22,720 --> 00:39:26,169
<font color="#E5E5E5">now you're</font><font color="#CCCCCC"> spending less time</font><font color="#E5E5E5"> in QA and</font>

1063
00:39:24,700 --> 00:39:28,240
less time dealing with bug reports

1064
00:39:26,170 --> 00:39:30,460
because<font color="#E5E5E5"> you're</font><font color="#CCCCCC"> reducing bugs in the long</font>

1065
00:39:28,240 --> 00:39:32,410
term<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> also you can</font><font color="#E5E5E5"> sometimes get</font>

1066
00:39:30,460 --> 00:39:34,089
some faster code because the semantics

1067
00:39:32,410 --> 00:39:36,940
are<font color="#E5E5E5"> more easily understandable by</font>

1068
00:39:34,089 --> 00:39:38,650
compilers<font color="#CCCCCC"> and currently</font><font color="#E5E5E5"> I would say the</font>

1069
00:39:36,940 --> 00:39:40,780
state<font color="#CCCCCC"> of</font><font color="#E5E5E5"> software's quality highlights</font>

1070
00:39:38,650 --> 00:39:42,190
the need<font color="#CCCCCC"> for us</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> adjust strategy</font><font color="#E5E5E5"> so</font>

1071
00:39:40,780 --> 00:39:48,510
with that I'll open<font color="#E5E5E5"> up for some</font>

1072
00:39:42,190 --> 00:39:51,920
<font color="#CCCCCC">questions</font><font color="#E5E5E5"> Wow</font><font color="#CCCCCC"> okay</font>

1073
00:39:48,510 --> 00:39:51,920
and my god

1074
00:39:52,049 --> 00:39:56,020
you write some code in Python and

1075
00:39:54,609 --> 00:40:02,020
everything's great<font color="#CCCCCC"> and then like three</font>

1076
00:39:56,020 --> 00:40:03,099
<font color="#E5E5E5">days later it crashes okay if you want</font>

1077
00:40:02,020 --> 00:40:05,500
to take some<font color="#E5E5E5"> more</font><font color="#CCCCCC"> pictures I have more</font>

1078
00:40:03,099 --> 00:40:07,329
<font color="#E5E5E5">links if you</font><font color="#CCCCCC"> want to take a picture that</font>

1079
00:40:05,500 --> 00:40:09,549
youtube link<font color="#CCCCCC"> and then type in manually</font>

1080
00:40:07,329 --> 00:40:15,910
that that hash I have some more<font color="#CCCCCC"> -</font>

1081
00:40:09,549 --> 00:40:17,049
<font color="#CCCCCC">they're even longer all</font><font color="#E5E5E5"> right well</font>

1082
00:40:15,910 --> 00:40:19,629
there's no more<font color="#E5E5E5"> questions I think it's</font>

1083
00:40:17,049 --> 00:40:24,170
break time<font color="#CCCCCC"> and thank you all very</font><font color="#E5E5E5"> much</font>

1084
00:40:19,630 --> 00:40:29,249
<font color="#E5E5E5">and enjoy your</font><font color="#CCCCCC"> coffee and</font><font color="#E5E5E5"> free</font><font color="#CCCCCC"> alcohol</font>

1085
00:40:24,170 --> 00:40:29,249
[Applause]

