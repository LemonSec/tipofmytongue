1
00:00:00,030 --> 00:00:05,460
hello<font color="#E5E5E5"> good afternoon</font><font color="#CCCCCC"> I was just gonna</font>

2
00:00:03,319 --> 00:00:06,629
say thanks for introduction I didn't

3
00:00:05,460 --> 00:00:08,700
understand the<font color="#E5E5E5"> word but I hope it was</font>

4
00:00:06,629 --> 00:00:10,049
nice<font color="#CCCCCC"> what he said</font><font color="#E5E5E5"> about me my name</font><font color="#CCCCCC"> is</font>

5
00:00:08,700 --> 00:00:13,530
<font color="#CCCCCC">Mariana</font><font color="#E5E5E5"> I will be speaking about rock</font>

6
00:00:10,050 --> 00:00:15,890
behavior detection<font color="#E5E5E5"> this project deals</font>

7
00:00:13,530 --> 00:00:18,060
with malicious binaries and

8
00:00:15,890 --> 00:00:20,789
opportunities in static analysis that

9
00:00:18,060 --> 00:00:23,460
help the reverse engineer<font color="#E5E5E5"> the idea of</font>

10
00:00:20,789 --> 00:00:25,619
the project<font color="#CCCCCC"> actually came up yet</font><font color="#E5E5E5"> Madrid</font>

11
00:00:23,460 --> 00:00:27,330
<font color="#E5E5E5">of</font><font color="#CCCCCC"> sandboxes</font><font color="#E5E5E5"> because I was told to use</font>

12
00:00:25,619 --> 00:00:29,220
sandboxes and binaries where the sandbox

13
00:00:27,330 --> 00:00:31,439
wouldn't help<font color="#E5E5E5"> me anything</font><font color="#CCCCCC"> so I put all</font>

14
00:00:29,220 --> 00:00:33,870
my anger into<font color="#E5E5E5"> this project and I hope</font>

15
00:00:31,439 --> 00:00:36,719
you enjoy the<font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> just</font>

16
00:00:33,870 --> 00:00:38,430
introduced my name<font color="#CCCCCC"> is Marian a malware</font>

17
00:00:36,719 --> 00:00:43,500
analysts<font color="#CCCCCC"> working</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> GData</font><font color="#E5E5E5"> advanced</font>

18
00:00:38,430 --> 00:00:45,840
analytics in<font color="#E5E5E5"> Germany and yeah today I'll</font>

19
00:00:43,500 --> 00:00:48,090
be<font color="#E5E5E5"> speaking about my project in</font>

20
00:00:45,840 --> 00:00:50,610
analyzing behavior of binaries

21
00:00:48,090 --> 00:00:52,739
statically without actually executing

22
00:00:50,610 --> 00:00:56,039
the binary<font color="#E5E5E5"> with the help of</font><font color="#CCCCCC"> rod re2 and</font>

23
00:00:52,739 --> 00:00:58,108
graphs<font color="#CCCCCC"> all right let me start Melo</font>

24
00:00:56,039 --> 00:01:00,090
analysts are special creatures we have a

25
00:00:58,109 --> 00:01:03,570
lot of<font color="#E5E5E5"> issues our managers are will</font>

26
00:01:00,090 --> 00:01:05,850
relay Z where we hate repetitive work

27
00:01:03,570 --> 00:01:07,890
<font color="#E5E5E5">and that we're pretty expensive</font><font color="#CCCCCC"> that's</font>

28
00:01:05,850 --> 00:01:10,289
<font color="#E5E5E5">mainly a problem of our empires but they</font>

29
00:01:07,890 --> 00:01:13,409
sure as<font color="#CCCCCC"> hell want to help us in</font><font color="#E5E5E5"> our work</font>

30
00:01:10,290 --> 00:01:16,170
and want<font color="#CCCCCC"> to eight automation</font><font color="#E5E5E5"> in our work</font>

31
00:01:13,409 --> 00:01:19,409
because<font color="#E5E5E5"> human</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> usually not the</font><font color="#CCCCCC"> best</font>

32
00:01:16,170 --> 00:01:23,100
option<font color="#CCCCCC"> to do binary</font><font color="#E5E5E5"> analysis in the</font>

33
00:01:19,409 --> 00:01:25,320
first place on the<font color="#CCCCCC"> other</font><font color="#E5E5E5"> side we</font><font color="#CCCCCC"> have a</font>

34
00:01:23,100 --> 00:01:30,630
lot<font color="#CCCCCC"> of issues with the</font><font color="#E5E5E5"> automation of</font>

35
00:01:25,320 --> 00:01:36,389
Melbourne analysis as well<font color="#E5E5E5"> the analysis</font>

36
00:01:30,630 --> 00:01:38,880
itself<font color="#E5E5E5"> is usually</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> very exhausting task</font>

37
00:01:36,390 --> 00:01:39,750
to<font color="#E5E5E5"> reverse engineer</font><font color="#CCCCCC"> and enter</font><font color="#E5E5E5"> binary but</font>

38
00:01:38,880 --> 00:01:42,360
<font color="#CCCCCC">on the other</font><font color="#E5E5E5"> side the binaries</font>

39
00:01:39,750 --> 00:01:45,119
themselves are<font color="#E5E5E5"> not that sophisticated</font>

40
00:01:42,360 --> 00:01:48,360
not that interesting there<font color="#E5E5E5"> is a lot of</font><font color="#CCCCCC"> a</font>

41
00:01:45,119 --> 00:01:50,280
lot<font color="#CCCCCC"> of media fuss about the challenges</font>

42
00:01:48,360 --> 00:01:53,130
of malware general but I'm telling<font color="#E5E5E5"> you</font>

43
00:01:50,280 --> 00:01:56,159
they're<font color="#CCCCCC"> not always</font><font color="#E5E5E5"> true so in more</font>

44
00:01:53,130 --> 00:01:59,399
binaries you find a lot of<font color="#CCCCCC"> repetitive</font>

45
00:01:56,159 --> 00:02:01,259
code<font color="#E5E5E5"> you find a lot of badly written</font>

46
00:01:59,399 --> 00:02:03,750
code because<font color="#E5E5E5"> Melbourne</font><font color="#CCCCCC"> otters aren't</font>

47
00:02:01,259 --> 00:02:05,909
usually<font color="#E5E5E5"> professionally told software</font>

48
00:02:03,750 --> 00:02:08,160
developers<font color="#E5E5E5"> but there are people who are</font>

49
00:02:05,909 --> 00:02:11,390
frequently so thought this is how<font color="#E5E5E5"> the</font>

50
00:02:08,160 --> 00:02:13,579
code<font color="#E5E5E5"> usually looks like also Melbourne</font>

51
00:02:11,390 --> 00:02:16,220
frequently has limited interests<font color="#E5E5E5"> like</font>

52
00:02:13,580 --> 00:02:18,620
there's a limited set of functionalities

53
00:02:16,220 --> 00:02:21,080
<font color="#CCCCCC">that you will find in 90%</font><font color="#E5E5E5"> of all the</font>

54
00:02:18,620 --> 00:02:23,600
malicious binaries malware might try to

55
00:02:21,080 --> 00:02:25,340
steal key strokes malware might try to

56
00:02:23,600 --> 00:02:27,440
<font color="#E5E5E5">download other binaries from the</font>

57
00:02:25,340 --> 00:02:29,150
internet and and execute them<font color="#E5E5E5"> malware</font>

58
00:02:27,440 --> 00:02:33,280
might try to search the file system for

59
00:02:29,150 --> 00:02:36,710
interesting documents<font color="#CCCCCC"> Mel watt very</font><font color="#E5E5E5"> very</font>

60
00:02:33,280 --> 00:02:39,080
seldomly<font color="#CCCCCC"> users for example GUI or</font>

61
00:02:36,710 --> 00:02:40,280
graphical applications there's a lot of

62
00:02:39,080 --> 00:02:43,580
other<font color="#E5E5E5"> things that malware frequently</font>

63
00:02:40,280 --> 00:02:45,800
does not do<font color="#E5E5E5"> so we have rather simple</font>

64
00:02:43,580 --> 00:02:48,850
binaries that<font color="#E5E5E5"> aim</font><font color="#CCCCCC"> to make it very</font>

65
00:02:45,800 --> 00:02:52,700
difficult to be analyzed

66
00:02:48,850 --> 00:02:54,500
so given this situation having boring

67
00:02:52,700 --> 00:02:56,329
binaries having lazy and expensive

68
00:02:54,500 --> 00:02:58,220
analysts and having limited interests<font color="#E5E5E5"> it</font>

69
00:02:56,330 --> 00:03:00,950
<font color="#E5E5E5">would be very very neat to have tools to</font>

70
00:02:58,220 --> 00:03:03,020
<font color="#E5E5E5">just analyze</font><font color="#CCCCCC"> the binary for you and show</font>

71
00:03:00,950 --> 00:03:06,440
<font color="#CCCCCC">you at one glance</font><font color="#E5E5E5"> what the malicious</font>

72
00:03:03,020 --> 00:03:08,690
software is<font color="#E5E5E5"> intended to do</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it gives</font>

73
00:03:06,440 --> 00:03:10,280
<font color="#E5E5E5">us a set of problems automated malware</font>

74
00:03:08,690 --> 00:03:14,180
analysis is<font color="#E5E5E5"> still an unsolved</font><font color="#CCCCCC"> problem</font>

75
00:03:10,280 --> 00:03:16,519
that people<font color="#E5E5E5"> nowadays usually tackle with</font>

76
00:03:14,180 --> 00:03:19,280
<font color="#CCCCCC">widths and boxes with dynamic analysis</font>

77
00:03:16,519 --> 00:03:21,709
for executing<font color="#E5E5E5"> the</font><font color="#CCCCCC"> binary</font><font color="#E5E5E5"> and gathering</font>

78
00:03:19,280 --> 00:03:23,900
forensic information<font color="#E5E5E5"> from the sandbox</font>

79
00:03:21,709 --> 00:03:27,019
system itself<font color="#CCCCCC"> the other hand we have the</font>

80
00:03:23,900 --> 00:03:29,269
static<font color="#E5E5E5"> side that for</font><font color="#CCCCCC"> automation is</font>

81
00:03:27,019 --> 00:03:31,130
frequently<font color="#CCCCCC"> not feasible</font><font color="#E5E5E5"> or a couple of</font>

82
00:03:29,269 --> 00:03:34,420
reasons<font color="#CCCCCC"> actually there is a lot more</font>

83
00:03:31,130 --> 00:03:37,400
reasons than<font color="#CCCCCC"> the listed here but</font>

84
00:03:34,420 --> 00:03:38,809
summarizing them<font color="#CCCCCC"> we usually have to deal</font>

85
00:03:37,400 --> 00:03:40,220
<font color="#CCCCCC">with runtime Packers with code</font>

86
00:03:38,810 --> 00:03:40,940
obfuscation<font color="#CCCCCC"> that make the code</font>

87
00:03:40,220 --> 00:03:43,519
unreadable

88
00:03:40,940 --> 00:03:46,790
at first glance we have self-modifying

89
00:03:43,519 --> 00:03:50,330
code which changes<font color="#E5E5E5"> its behavior or its</font>

90
00:03:46,790 --> 00:03:52,730
structure<font color="#E5E5E5"> at runtime we have virtual</font>

91
00:03:50,330 --> 00:03:53,959
<font color="#CCCCCC">machines that parse byte code which is</font>

92
00:03:52,730 --> 00:03:57,709
usually<font color="#CCCCCC"> not that</font><font color="#E5E5E5"> easy to</font><font color="#CCCCCC"> analyze</font>

93
00:03:53,959 --> 00:03:59,900
<font color="#E5E5E5">statically or very cost intensive we</font>

94
00:03:57,709 --> 00:04:01,880
have dynamic<font color="#E5E5E5"> API loading which hides the</font>

95
00:03:59,900 --> 00:04:05,840
API is<font color="#CCCCCC"> the malicious binary it would use</font>

96
00:04:01,880 --> 00:04:07,730
and<font color="#E5E5E5"> ice</font><font color="#CCCCCC"> its its functionality</font><font color="#E5E5E5"> from a</font>

97
00:04:05,840 --> 00:04:10,130
static perspective we have a<font color="#E5E5E5"> synchronous</font>

98
00:04:07,730 --> 00:04:12,859
code which statically is usually

99
00:04:10,130 --> 00:04:15,440
different<font color="#CCCCCC"> to difficult to put in context</font>

100
00:04:12,860 --> 00:04:16,790
without<font color="#E5E5E5"> executing the binary and</font><font color="#CCCCCC"> we have</font>

101
00:04:15,440 --> 00:04:20,269
<font color="#E5E5E5">object-oriented</font><font color="#CCCCCC"> code which by its nature</font>

102
00:04:16,790 --> 00:04:22,870
<font color="#E5E5E5">is hard to analyze I do personally think</font>

103
00:04:20,269 --> 00:04:24,109
<font color="#CCCCCC">that these</font><font color="#E5E5E5"> are challenges that we can</font>

104
00:04:22,870 --> 00:04:27,889
overcome

105
00:04:24,110 --> 00:04:30,469
<font color="#E5E5E5">annoys or</font><font color="#CCCCCC"> aid with dynamic analysis and</font>

106
00:04:27,889 --> 00:04:32,930
primarily should focus on the static

107
00:04:30,469 --> 00:04:35,960
analysis of malicious binaries because

108
00:04:32,930 --> 00:04:39,050
under the name<font color="#E5E5E5"> excite we have just</font>

109
00:04:35,960 --> 00:04:42,049
<font color="#E5E5E5">nearly as many issues to</font><font color="#CCCCCC"> overcome</font><font color="#E5E5E5"> and a</font>

110
00:04:39,050 --> 00:04:45,500
lot of<font color="#E5E5E5"> them are</font><font color="#CCCCCC"> actually my belief very</font>

111
00:04:42,050 --> 00:04:46,819
much more<font color="#E5E5E5"> difficult</font><font color="#CCCCCC"> to to</font><font color="#E5E5E5"> solve first</font><font color="#CCCCCC"> of</font>

112
00:04:45,500 --> 00:04:47,990
<font color="#E5E5E5">all of course we have sandbox detection</font>

113
00:04:46,819 --> 00:04:51,020
which is something that sandbox

114
00:04:47,990 --> 00:04:53,689
developers primarily focus on but what

115
00:04:51,020 --> 00:04:56,090
usually still nowadays<font color="#E5E5E5"> are not able to</font>

116
00:04:53,689 --> 00:04:58,520
to overcome<font color="#E5E5E5"> is for example missing</font>

117
00:04:56,090 --> 00:05:00,560
dependencies if you have a binary which

118
00:04:58,520 --> 00:05:03,049
depends<font color="#E5E5E5"> on a second binary or maybe a</font>

119
00:05:00,560 --> 00:05:04,669
whole framework of wineries<font color="#CCCCCC"> around there</font>

120
00:05:03,050 --> 00:05:06,770
these<font color="#CCCCCC"> sandbox will not be able to</font>

121
00:05:04,669 --> 00:05:10,008
<font color="#CCCCCC">analyze the binary</font><font color="#E5E5E5"> because the</font><font color="#CCCCCC"> rest of</font>

122
00:05:06,770 --> 00:05:12,340
the dependencies are just missing<font color="#E5E5E5"> this</font>

123
00:05:10,009 --> 00:05:15,289
<font color="#CCCCCC">is</font><font color="#E5E5E5"> very common with nowadays malware</font>

124
00:05:12,340 --> 00:05:18,169
<font color="#CCCCCC">plug-in systems and frameworks are</font>

125
00:05:15,289 --> 00:05:21,050
frequently seen and an antivirus company

126
00:05:18,169 --> 00:05:22,370
or or a sandbox<font color="#E5E5E5"> company might just have</font>

127
00:05:21,050 --> 00:05:24,310
like one<font color="#E5E5E5"> little piece</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the bigger</font>

128
00:05:22,370 --> 00:05:27,710
puzzle<font color="#E5E5E5"> and it's not able to analyze it</font>

129
00:05:24,310 --> 00:05:30,589
<font color="#E5E5E5">this is frequently seen with yes for</font>

130
00:05:27,710 --> 00:05:34,310
example<font color="#E5E5E5"> that might even be able to</font><font color="#CCCCCC"> run</font>

131
00:05:30,589 --> 00:05:36,889
in<font color="#E5E5E5"> a standalone context but due to their</font>

132
00:05:34,310 --> 00:05:39,259
structure<font color="#E5E5E5"> it is hard to find this one</font>

133
00:05:36,889 --> 00:05:40,789
dedicated<font color="#E5E5E5"> execution</font><font color="#CCCCCC"> pod or this one</font>

134
00:05:39,259 --> 00:05:43,849
dedicated export that would actually

135
00:05:40,789 --> 00:05:45,169
trigger<font color="#CCCCCC"> the malicious functionality also</font>

136
00:05:43,849 --> 00:05:47,419
some wineries<font color="#E5E5E5"> show a need for</font>

137
00:05:45,169 --> 00:05:49,370
interaction<font color="#CCCCCC"> user interaction or</font>

138
00:05:47,419 --> 00:05:50,960
interaction with the remote server<font color="#E5E5E5"> for</font>

139
00:05:49,370 --> 00:05:53,680
example<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> put the binary into a</font>

140
00:05:50,960 --> 00:05:55,818
sandbox<font color="#E5E5E5"> which first of all these actions</font>

141
00:05:53,680 --> 00:05:57,770
<font color="#CCCCCC">wants</font><font color="#E5E5E5"> to get input</font><font color="#CCCCCC"> from</font><font color="#E5E5E5"> the remote</font>

142
00:05:55,819 --> 00:06:00,439
<font color="#CCCCCC">server which might be offline</font><font color="#E5E5E5"> or might</font>

143
00:05:57,770 --> 00:06:02,438
not<font color="#E5E5E5"> be rich at all from the sandbox the</font>

144
00:06:00,439 --> 00:06:06,039
<font color="#CCCCCC">malicious binary might decide not to</font>

145
00:06:02,439 --> 00:06:07,819
execute<font color="#E5E5E5"> and enjoy its full potential</font>

146
00:06:06,039 --> 00:06:10,150
<font color="#CCCCCC">also</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> time-based</font>

147
00:06:07,819 --> 00:06:12,710
evasion and missing input values and and

148
00:06:10,150 --> 00:06:14,388
incompatibilities<font color="#E5E5E5"> but</font><font color="#CCCCCC"> what I</font><font color="#E5E5E5"> personally</font>

149
00:06:12,710 --> 00:06:17,299
think<font color="#E5E5E5"> is the biggest</font><font color="#CCCCCC"> problem that</font><font color="#E5E5E5"> we</font>

150
00:06:14,389 --> 00:06:19,189
<font color="#E5E5E5">have with modern sandboxes which I</font>

151
00:06:17,300 --> 00:06:23,190
<font color="#E5E5E5">haven't seen</font><font color="#CCCCCC"> solved in the past is</font>

152
00:06:19,189 --> 00:06:27,090
multiple execution paths<font color="#E5E5E5"> usually a</font>

153
00:06:23,190 --> 00:06:29,700
<font color="#CCCCCC">a simple malware binary will potentially</font>

154
00:06:27,090 --> 00:06:31,590
<font color="#E5E5E5">show you it's it's all functionality</font>

155
00:06:29,700 --> 00:06:33,000
because<font color="#E5E5E5"> there's one</font><font color="#CCCCCC"> single execution</font>

156
00:06:31,590 --> 00:06:34,229
<font color="#E5E5E5">path from beginning to end</font>

157
00:06:33,000 --> 00:06:35,760
see<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example taking malicious</font>

158
00:06:34,230 --> 00:06:37,980
downloader and put it in the sandbox

159
00:06:35,760 --> 00:06:40,349
<font color="#CCCCCC">well</font><font color="#E5E5E5"> execute from beginning to end</font><font color="#CCCCCC"> then</font>

160
00:06:37,980 --> 00:06:41,970
download the<font color="#E5E5E5"> second stage malware and</font>

161
00:06:40,350 --> 00:06:46,980
you've seen everything<font color="#E5E5E5"> this binary can</font>

162
00:06:41,970 --> 00:06:49,620
do this<font color="#E5E5E5"> could look</font><font color="#CCCCCC"> like the following</font>

163
00:06:46,980 --> 00:06:51,090
<font color="#CCCCCC">graphics so for example we have the</font>

164
00:06:49,620 --> 00:06:53,100
malicious binary which pushed

165
00:06:51,090 --> 00:06:55,049
unpacks itself and and<font color="#E5E5E5"> chose</font><font color="#CCCCCC"> its evasion</font>

166
00:06:53,100 --> 00:06:58,530
<font color="#E5E5E5">and tries</font><font color="#CCCCCC"> to detect the sandbox or</font>

167
00:06:55,050 --> 00:07:00,750
however<font color="#CCCCCC"> it's protected</font><font color="#E5E5E5"> and after the</font>

168
00:06:58,530 --> 00:07:03,450
stage it<font color="#E5E5E5"> starts</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> setup then after</font>

169
00:07:00,750 --> 00:07:05,220
that stage it might call<font color="#E5E5E5"> its its remote</font>

170
00:07:03,450 --> 00:07:07,740
server don't notify<font color="#E5E5E5"> the binaries and</font>

171
00:07:05,220 --> 00:07:11,370
then things go sideways<font color="#CCCCCC"> so this is</font>

172
00:07:07,740 --> 00:07:13,530
usually the modern problem of sandbox is

173
00:07:11,370 --> 00:07:16,430
that the<font color="#CCCCCC"> first three</font><font color="#E5E5E5"> stages of this</font>

174
00:07:13,530 --> 00:07:20,309
process<font color="#CCCCCC"> however</font><font color="#E5E5E5"> they're structured are</font>

175
00:07:16,430 --> 00:07:22,740
easy to simulate then the last stage

176
00:07:20,310 --> 00:07:25,080
<font color="#CCCCCC">where the final functionality should</font><font color="#E5E5E5"> be</font>

177
00:07:22,740 --> 00:07:26,490
triggered it's very hard<font color="#E5E5E5"> to simulate</font><font color="#CCCCCC"> if</font>

178
00:07:25,080 --> 00:07:30,419
you think for<font color="#E5E5E5"> example about the common</font>

179
00:07:26,490 --> 00:07:32,310
rat a common remote access<font color="#CCCCCC"> trojan</font><font color="#E5E5E5"> you</font>

180
00:07:30,419 --> 00:07:34,530
see the<font color="#E5E5E5"> first three stages and then the</font>

181
00:07:32,310 --> 00:07:36,990
detergent<font color="#E5E5E5"> expects input from its remote</font>

182
00:07:34,530 --> 00:07:39,830
server it expects<font color="#CCCCCC"> the controller of</font><font color="#E5E5E5"> the</font>

183
00:07:36,990 --> 00:07:42,630
<font color="#CCCCCC">bot</font><font color="#E5E5E5"> to send commands to be parsed and to</font>

184
00:07:39,830 --> 00:07:44,580
actually trigger functionality this<font color="#E5E5E5"> is</font>

185
00:07:42,630 --> 00:07:46,320
very difficult<font color="#CCCCCC"> present boxes</font><font color="#E5E5E5"> to to</font>

186
00:07:44,580 --> 00:07:48,419
<font color="#E5E5E5">analyze because sandbox is usually are</font>

187
00:07:46,320 --> 00:07:50,550
not<font color="#CCCCCC"> that smart to determine which</font>

188
00:07:48,419 --> 00:07:52,169
different<font color="#E5E5E5"> paths</font><font color="#CCCCCC"> the malware</font><font color="#E5E5E5"> can take so</font>

189
00:07:50,550 --> 00:07:54,990
<font color="#E5E5E5">all you see there in the</font><font color="#CCCCCC"> sandbox it's an</font>

190
00:07:52,169 --> 00:07:57,390
the the<font color="#CCCCCC"> trojan waiting for input and</font>

191
00:07:54,990 --> 00:07:59,340
<font color="#E5E5E5">sandbox is just like most other analysis</font>

192
00:07:57,390 --> 00:08:00,990
systems have time constraint<font color="#CCCCCC"> which means</font>

193
00:07:59,340 --> 00:08:04,109
you<font color="#E5E5E5"> can just wait for two weeks until</font>

194
00:08:00,990 --> 00:08:08,450
the operator<font color="#E5E5E5"> decided to send all the</font>

195
00:08:04,110 --> 00:08:12,300
possible commands to your rear torsion

196
00:08:08,450 --> 00:08:15,599
on the<font color="#E5E5E5"> other hand this</font><font color="#CCCCCC"> is especially</font>

197
00:08:12,300 --> 00:08:18,620
true<font color="#E5E5E5"> for p9 binaries like</font><font color="#CCCCCC"> well on</font>

198
00:08:15,600 --> 00:08:20,970
malicious binaries you might still<font color="#E5E5E5"> have</font>

199
00:08:18,620 --> 00:08:22,169
<font color="#E5E5E5">programs that</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> execute from</font>

200
00:08:20,970 --> 00:08:24,390
beginning to end and<font color="#E5E5E5"> show everything</font>

201
00:08:22,169 --> 00:08:26,280
<font color="#E5E5E5">they can do now in binaries just never</font>

202
00:08:24,390 --> 00:08:28,110
do this there's very little benign

203
00:08:26,280 --> 00:08:30,510
binaries<font color="#E5E5E5"> that actually do not require</font>

204
00:08:28,110 --> 00:08:32,400
<font color="#E5E5E5">user interaction like someone clicking</font>

205
00:08:30,510 --> 00:08:35,490
in the GUI<font color="#CCCCCC"> or writing text or clicking</font>

206
00:08:32,400 --> 00:08:36,659
the<font color="#E5E5E5"> Save button or interacting with with</font>

207
00:08:35,490 --> 00:08:37,089
the application<font color="#E5E5E5"> because that's usually</font>

208
00:08:36,659 --> 00:08:39,389
<font color="#E5E5E5">what</font>

209
00:08:37,089 --> 00:08:44,110
programs are<font color="#CCCCCC"> written to</font><font color="#E5E5E5"> do especially</font>

210
00:08:39,389 --> 00:08:47,769
<font color="#E5E5E5">modern desktop operating systems so this</font>

211
00:08:44,110 --> 00:08:50,529
<font color="#E5E5E5">is a point where sandboxes</font><font color="#CCCCCC"> in most cases</font>

212
00:08:47,769 --> 00:08:52,990
<font color="#E5E5E5">actually fail completely</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> other</font>

213
00:08:50,529 --> 00:08:55,660
hand<font color="#E5E5E5"> also many</font><font color="#CCCCCC"> sandboxes</font><font color="#E5E5E5"> today rely on</font>

214
00:08:52,990 --> 00:08:58,569
API hooking which technically<font color="#E5E5E5"> means</font>

215
00:08:55,660 --> 00:09:00,579
someone monitors<font color="#E5E5E5"> all potentially</font>

216
00:08:58,569 --> 00:09:02,769
interesting<font color="#E5E5E5"> API is that an application</font>

217
00:09:00,579 --> 00:09:04,349
<font color="#E5E5E5">can show this is usually</font><font color="#CCCCCC"> limited</font><font color="#E5E5E5"> because</font>

218
00:09:02,769 --> 00:09:06,759
this is cost intensive<font color="#E5E5E5"> and usually</font>

219
00:09:04,350 --> 00:09:09,850
<font color="#CCCCCC">sandboxes see</font><font color="#E5E5E5"> to only hook into</font>

220
00:09:06,759 --> 00:09:13,079
<font color="#E5E5E5">interesting API is that they consider</font>

221
00:09:09,850 --> 00:09:14,860
potentially malicious<font color="#E5E5E5"> but for</font><font color="#CCCCCC"> example</font>

222
00:09:13,079 --> 00:09:16,809
<font color="#E5E5E5">user interface</font>

223
00:09:14,860 --> 00:09:18,790
<font color="#CCCCCC">yeah the user interface or</font><font color="#E5E5E5"> general user</font>

224
00:09:16,809 --> 00:09:19,360
interaction API<font color="#CCCCCC"> is are not considered</font>

225
00:09:18,790 --> 00:09:21,129
interesting

226
00:09:19,360 --> 00:09:24,550
thus the sandbox actually miss this

227
00:09:21,129 --> 00:09:27,550
context<font color="#E5E5E5"> completely</font><font color="#CCCCCC"> okay so here will be</font>

228
00:09:24,550 --> 00:09:28,930
the need<font color="#CCCCCC"> for my wicked plan</font><font color="#E5E5E5"> what I</font>

229
00:09:27,550 --> 00:09:31,300
actually tried to do<font color="#E5E5E5"> with my project</font><font color="#CCCCCC"> was</font>

230
00:09:28,930 --> 00:09:32,739
look at all<font color="#E5E5E5"> areas of a binary and the</font>

231
00:09:31,300 --> 00:09:35,019
simple as it<font color="#E5E5E5"> sounds this is something</font>

232
00:09:32,740 --> 00:09:37,600
<font color="#CCCCCC">that very little analysis systems</font>

233
00:09:35,019 --> 00:09:39,579
nowadays<font color="#CCCCCC"> managed to do if you do a</font>

234
00:09:37,600 --> 00:09:41,769
purely<font color="#E5E5E5"> static approach you</font><font color="#CCCCCC"> might be</font><font color="#E5E5E5"> high</font>

235
00:09:39,579 --> 00:09:44,199
nerd by packed and obfuscated binaries

236
00:09:41,769 --> 00:09:45,970
<font color="#E5E5E5">if you do a purely dynamic approach you</font>

237
00:09:44,199 --> 00:09:47,378
might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> high nerd</font><font color="#E5E5E5"> by the problem of</font>

238
00:09:45,970 --> 00:09:49,480
multiple execution paths<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that you</font>

239
00:09:47,379 --> 00:09:52,870
can<font color="#E5E5E5"> just see everything that the</font>

240
00:09:49,480 --> 00:09:55,449
malicious<font color="#CCCCCC"> software was</font><font color="#E5E5E5"> capable to do so</font>

241
00:09:52,870 --> 00:09:58,149
I<font color="#E5E5E5"> came</font><font color="#CCCCCC"> up with</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> idea which right now</font><font color="#E5E5E5"> I</font>

242
00:09:55,449 --> 00:10:00,550
admit<font color="#E5E5E5"> is still limited by these</font>

243
00:09:58,149 --> 00:10:03,160
constraints<font color="#E5E5E5"> but in the future should</font>

244
00:10:00,550 --> 00:10:06,490
potentially<font color="#E5E5E5"> help analysis systems to</font>

245
00:10:03,160 --> 00:10:08,980
improve<font color="#E5E5E5"> on their capabilities so I wrote</font>

246
00:10:06,490 --> 00:10:11,050
a<font color="#E5E5E5"> tool which helps me look at API</font><font color="#CCCCCC"> calls</font>

247
00:10:08,980 --> 00:10:12,970
strings and the general structure<font color="#CCCCCC"> of a</font>

248
00:10:11,050 --> 00:10:15,279
binary<font color="#E5E5E5"> to find out more about its</font>

249
00:10:12,970 --> 00:10:16,929
intentions<font color="#E5E5E5"> or potentially</font><font color="#CCCCCC"> also determine</font>

250
00:10:15,279 --> 00:10:18,610
whether it<font color="#E5E5E5"> is packets or a binary that</font>

251
00:10:16,929 --> 00:10:20,079
tries<font color="#CCCCCC"> to hide its functionality which is</font>

252
00:10:18,610 --> 00:10:23,230
something<font color="#E5E5E5"> I consider suspicious</font>

253
00:10:20,079 --> 00:10:26,019
I did this<font color="#E5E5E5"> with use of graphs and the</font>

254
00:10:23,230 --> 00:10:27,459
use<font color="#CCCCCC"> of radar a</font><font color="#E5E5E5"> to whether it to is a</font>

255
00:10:26,019 --> 00:10:29,019
disassembly framework<font color="#E5E5E5"> I'm gonna be</font>

256
00:10:27,459 --> 00:10:32,079
explaining<font color="#CCCCCC"> a bit more</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> that later</font>

257
00:10:29,019 --> 00:10:35,889
<font color="#E5E5E5">and graphs are a an interesting data</font>

258
00:10:32,079 --> 00:10:38,170
<font color="#E5E5E5">structure that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> very helpful</font><font color="#CCCCCC"> in in</font>

259
00:10:35,889 --> 00:10:39,939
terms<font color="#CCCCCC"> of determining</font><font color="#E5E5E5"> context and</font>

260
00:10:38,170 --> 00:10:41,498
interestingly when<font color="#CCCCCC"> I say graphs a lot of</font>

261
00:10:39,939 --> 00:10:44,309
people think about<font color="#E5E5E5"> something like this</font>

262
00:10:41,499 --> 00:10:46,449
so now I did not paint graphs<font color="#E5E5E5"> with</font>

263
00:10:44,309 --> 00:10:49,139
Microsoft Excel<font color="#E5E5E5"> but I was actually</font>

264
00:10:46,449 --> 00:10:51,109
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about real graph structures</font>

265
00:10:49,139 --> 00:10:54,710
graphs are interesting

266
00:10:51,110 --> 00:10:58,190
binary analysis because binaries

267
00:10:54,710 --> 00:11:00,380
<font color="#E5E5E5">naturally are graphs</font><font color="#CCCCCC"> a binary has for</font>

268
00:10:58,190 --> 00:11:01,910
example<font color="#E5E5E5"> what</font><font color="#CCCCCC"> I used the function</font><font color="#E5E5E5"> call</font>

269
00:11:00,380 --> 00:11:03,230
graph<font color="#E5E5E5"> so one function calls another</font>

270
00:11:01,910 --> 00:11:04,790
function because<font color="#E5E5E5"> another function calls</font>

271
00:11:03,230 --> 00:11:06,860
five other functions and so on<font color="#CCCCCC"> and so</font>

272
00:11:04,790 --> 00:11:09,170
forth<font color="#E5E5E5"> so wineries are nationally</font>

273
00:11:06,860 --> 00:11:10,820
structured like like graphs<font color="#E5E5E5"> and graphs</font>

274
00:11:09,170 --> 00:11:16,250
of graphs<font color="#E5E5E5"> because within the function</font>

275
00:11:10,820 --> 00:11:18,020
<font color="#CCCCCC">you</font><font color="#E5E5E5"> have the the control flow graph G C</font>

276
00:11:16,250 --> 00:11:19,430
F<font color="#CCCCCC"> G with basic blocks where one basic</font>

277
00:11:18,020 --> 00:11:21,949
block refers to another basic block<font color="#CCCCCC"> and</font>

278
00:11:19,430 --> 00:11:24,410
so on<font color="#E5E5E5"> and</font><font color="#CCCCCC"> so forth</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you see the</font>

279
00:11:21,950 --> 00:11:27,500
binaries<font color="#CCCCCC"> actually are perfectly suited</font>

280
00:11:24,410 --> 00:11:29,209
for analysis with graph structures<font color="#E5E5E5"> also</font>

281
00:11:27,500 --> 00:11:30,470
graphs are pretty great for

282
00:11:29,210 --> 00:11:32,810
<font color="#CCCCCC">visualization as you can see on the</font>

283
00:11:30,470 --> 00:11:35,150
screen<font color="#CCCCCC"> there that's a graph</font>

284
00:11:32,810 --> 00:11:37,130
visualization which in its current

285
00:11:35,150 --> 00:11:38,630
context isn't<font color="#E5E5E5"> very helpful by</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it's</font>

286
00:11:37,130 --> 00:11:41,330
super<font color="#E5E5E5"> pretty</font>

287
00:11:38,630 --> 00:11:43,040
also graphs are really interesting<font color="#E5E5E5"> data</font>

288
00:11:41,330 --> 00:11:44,870
structures<font color="#E5E5E5"> from a mathematical point of</font>

289
00:11:43,040 --> 00:11:45,860
<font color="#CCCCCC">view</font><font color="#E5E5E5"> but let me say that from the</font>

290
00:11:44,870 --> 00:11:48,560
<font color="#CCCCCC">beginning and other mathematicians</font>

291
00:11:45,860 --> 00:11:51,170
<font color="#CCCCCC">they'll don't expect big formulas but I</font>

292
00:11:48,560 --> 00:11:54,560
might have<font color="#E5E5E5"> some numbers to show in the</font>

293
00:11:51,170 --> 00:11:56,660
<font color="#CCCCCC">Indians so yeah</font><font color="#E5E5E5"> I use these graphs that</font>

294
00:11:54,560 --> 00:11:58,760
<font color="#CCCCCC">that you can</font><font color="#E5E5E5"> extract from from binaries</font>

295
00:11:56,660 --> 00:12:01,719
<font color="#E5E5E5">and try to fit them with strings and</font>

296
00:11:58,760 --> 00:12:04,490
<font color="#E5E5E5">api's that would find within binaries</font>

297
00:12:01,720 --> 00:12:07,220
and now<font color="#E5E5E5"> again why does</font><font color="#CCCCCC"> this make sense</font>

298
00:12:04,490 --> 00:12:11,230
and listen in my head<font color="#CCCCCC"> it would make</font>

299
00:12:07,220 --> 00:12:14,210
sense<font color="#CCCCCC"> for the following reason so</font>

300
00:12:11,230 --> 00:12:15,680
earlier this<font color="#E5E5E5"> year I worked on the</font>

301
00:12:14,210 --> 00:12:17,360
project<font color="#E5E5E5"> with a colleague of</font><font color="#CCCCCC"> mine who</font>

302
00:12:15,680 --> 00:12:20,270
works in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> in cell</font><font color="#E5E5E5"> response on a set</font>

303
00:12:17,360 --> 00:12:22,940
or a larger set of<font color="#E5E5E5"> targeted binaries and</font>

304
00:12:20,270 --> 00:12:24,230
within that set<font color="#E5E5E5"> we found that most of</font>

305
00:12:22,940 --> 00:12:25,760
these targeted binaries or<font color="#E5E5E5"> that they're</font>

306
00:12:24,230 --> 00:12:27,980
being used<font color="#E5E5E5"> in the context of targeted</font>

307
00:12:25,760 --> 00:12:30,439
attacks are not actually packed or

308
00:12:27,980 --> 00:12:31,700
obfuscated this is something that<font color="#CCCCCC"> intern</font>

309
00:12:30,440 --> 00:12:34,070
responders have known for a<font color="#E5E5E5"> long time</font>

310
00:12:31,700 --> 00:12:36,170
now which we<font color="#CCCCCC"> tried</font><font color="#E5E5E5"> to prove with actual</font>

311
00:12:34,070 --> 00:12:38,690
statistics and if you look at<font color="#E5E5E5"> that slide</font>

312
00:12:36,170 --> 00:12:40,910
<font color="#CCCCCC">there is three groups of samples</font><font color="#E5E5E5"> being</font>

313
00:12:38,690 --> 00:12:44,620
<font color="#E5E5E5">described there's on top a set of</font><font color="#CCCCCC"> p9</font>

314
00:12:40,910 --> 00:12:47,480
binaries the total number of the p9 set

315
00:12:44,620 --> 00:12:49,430
<font color="#E5E5E5">so like yeah the numbers are hard to</font>

316
00:12:47,480 --> 00:12:50,510
read<font color="#E5E5E5"> him for me the total numbers of all</font>

317
00:12:49,430 --> 00:12:53,180
three set were about six to seven

318
00:12:50,510 --> 00:12:56,120
<font color="#E5E5E5">thousand my limited to the sets to</font><font color="#CCCCCC"> make</font>

319
00:12:53,180 --> 00:12:58,339
<font color="#CCCCCC">them</font><font color="#E5E5E5"> comparable and the</font><font color="#CCCCCC"> nine binaries on</font>

320
00:12:56,120 --> 00:13:01,400
their stem<font color="#E5E5E5"> from real applications</font><font color="#CCCCCC"> like</font>

321
00:12:58,340 --> 00:13:02,870
<font color="#E5E5E5">Firefox or from Microsoft Word and so on</font>

322
00:13:01,400 --> 00:13:04,640
suppose someone<font color="#E5E5E5"> in my company has a</font>

323
00:13:02,870 --> 00:13:08,420
<font color="#E5E5E5">hobby and collects like all the</font><font color="#CCCCCC"> p9</font>

324
00:13:04,640 --> 00:13:10,910
<font color="#CCCCCC">for the</font><font color="#E5E5E5"> four signatures to test and I</font>

325
00:13:08,420 --> 00:13:12,860
just grabbed their binaries<font color="#E5E5E5"> from them</font>

326
00:13:10,910 --> 00:13:14,779
<font color="#E5E5E5">the other side we have</font><font color="#CCCCCC"> the target set</font>

327
00:13:12,860 --> 00:13:19,760
that we collected and<font color="#E5E5E5"> then we used a</font>

328
00:13:14,779 --> 00:13:22,610
randomly chosen<font color="#E5E5E5"> set from the malware</font>

329
00:13:19,760 --> 00:13:25,370
<font color="#E5E5E5">from</font><font color="#CCCCCC"> rimmel repository where</font><font color="#E5E5E5"> this was</font>

330
00:13:22,610 --> 00:13:27,680
like really<font color="#E5E5E5"> random my my solution</font><font color="#CCCCCC"> for</font>

331
00:13:25,370 --> 00:13:31,130
picking random malware says from big

332
00:13:27,680 --> 00:13:32,839
sets is to sort them by file hash then

333
00:13:31,130 --> 00:13:35,029
this is the<font color="#CCCCCC"> only attribute that</font><font color="#E5E5E5"> you can</font>

334
00:13:32,839 --> 00:13:36,890
<font color="#E5E5E5">gather from a malicious binary that's</font>

335
00:13:35,029 --> 00:13:38,810
<font color="#E5E5E5">really a assures you that you have a</font>

336
00:13:36,890 --> 00:13:40,279
<font color="#CCCCCC">random set lots of people just</font><font color="#E5E5E5"> go to</font>

337
00:13:38,810 --> 00:13:42,410
virustotal and and downloads the latest

338
00:13:40,279 --> 00:13:44,720
uploads and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> they wonder</font><font color="#CCCCCC"> why they</font>

339
00:13:42,410 --> 00:13:46,490
have like two<font color="#CCCCCC"> different kinds of malware</font>

340
00:13:44,720 --> 00:13:48,709
in there<font color="#E5E5E5"> that's not the right</font><font color="#CCCCCC"> approach</font>

341
00:13:46,490 --> 00:13:50,959
to<font color="#E5E5E5"> go for</font><font color="#CCCCCC"> Pecha detection we used to</font>

342
00:13:48,709 --> 00:13:52,819
sort<font color="#E5E5E5"> of attributes that I listened that</font>

343
00:13:50,959 --> 00:13:55,250
<font color="#E5E5E5">the screen that might or might not</font><font color="#CCCCCC"> be</font>

344
00:13:52,820 --> 00:13:57,290
real<font color="#CCCCCC"> indicated</font><font color="#E5E5E5"> Packers</font><font color="#CCCCCC"> I found them</font>

345
00:13:55,250 --> 00:13:59,170
useful<font color="#CCCCCC"> but when</font><font color="#E5E5E5"> we would</font><font color="#CCCCCC"> have to try</font>

346
00:13:57,290 --> 00:14:01,459
that<font color="#CCCCCC"> himself</font>

347
00:13:59,170 --> 00:14:03,680
my proof<font color="#E5E5E5"> of that in the end was that we</font>

348
00:14:01,459 --> 00:14:07,910
got the following statistics<font color="#CCCCCC"> that are</font>

349
00:14:03,680 --> 00:14:09,979
<font color="#E5E5E5">listed there these screenshots might not</font>

350
00:14:07,910 --> 00:14:12,699
look<font color="#CCCCCC"> that different</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> first but one has</font>

351
00:14:09,980 --> 00:14:15,140
<font color="#CCCCCC">to consider</font><font color="#E5E5E5"> the numbering on the</font><font color="#CCCCCC"> site</font>

352
00:14:12,699 --> 00:14:17,599
which<font color="#E5E5E5"> actually for the random set the</font>

353
00:14:15,140 --> 00:14:20,870
numbers are a lot lower<font color="#CCCCCC"> than for the</font>

354
00:14:17,600 --> 00:14:23,810
should be lower than for the behind the

355
00:14:20,870 --> 00:14:25,940
targeted set which means that on the far

356
00:14:23,810 --> 00:14:28,040
left<font color="#E5E5E5"> side of the statistics you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> the</font>

357
00:14:25,940 --> 00:14:31,970
<font color="#E5E5E5">zero column</font><font color="#CCCCCC"> weather</font><font color="#E5E5E5"> zero indicators</font>

358
00:14:28,040 --> 00:14:33,829
found and for the histogram pardoned on

359
00:14:31,970 --> 00:14:36,320
the right side there is indicators being

360
00:14:33,829 --> 00:14:37,969
found<font color="#E5E5E5"> so within the benign set you have</font>

361
00:14:36,320 --> 00:14:39,290
this big bar on the left for<font color="#CCCCCC"> the</font>

362
00:14:37,970 --> 00:14:40,399
<font color="#E5E5E5">targeted set you have this big bar and</font>

363
00:14:39,290 --> 00:14:42,649
<font color="#E5E5E5">for the random set the bar is a lot</font>

364
00:14:40,399 --> 00:14:44,290
lower<font color="#CCCCCC"> with zero indicators and the other</font>

365
00:14:42,649 --> 00:14:46,490
parts with indicators are a lot higher

366
00:14:44,290 --> 00:14:48,110
actually these<font color="#E5E5E5"> two</font><font color="#CCCCCC"> outliers</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can</font>

367
00:14:46,490 --> 00:14:49,970
see in the benign and the target set<font color="#CCCCCC"> I</font>

368
00:14:48,110 --> 00:14:51,380
don't know if you can like especially

369
00:14:49,970 --> 00:14:53,630
for<font color="#E5E5E5"> benign you see two bars</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are</font>

370
00:14:51,380 --> 00:14:56,600
higher that's upx in different

371
00:14:53,630 --> 00:14:58,820
<font color="#CCCCCC">combinations</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> checked that</font><font color="#E5E5E5"> so you can</font>

372
00:14:56,600 --> 00:14:59,990
see<font color="#CCCCCC"> that benign is usually not at that</font>

373
00:14:58,820 --> 00:15:02,570
packed

374
00:14:59,990 --> 00:15:04,940
<font color="#CCCCCC">target at is sometimes a little bit</font>

375
00:15:02,570 --> 00:15:07,010
packed and the the<font color="#CCCCCC"> random set shows a</font>

376
00:15:04,940 --> 00:15:10,070
lot more indicators for actual<font color="#E5E5E5"> Packers</font>

377
00:15:07,010 --> 00:15:11,269
<font color="#CCCCCC">that's just numbers we tried like we</font>

378
00:15:10,070 --> 00:15:12,770
looked<font color="#E5E5E5"> into the</font><font color="#CCCCCC"> binary stem cells and</font>

379
00:15:11,269 --> 00:15:15,319
found that the numbers are pretty

380
00:15:12,770 --> 00:15:17,149
<font color="#E5E5E5">accurate</font><font color="#CCCCCC"> so that's why I started</font><font color="#E5E5E5"> the</font>

381
00:15:15,319 --> 00:15:19,229
tool but why did I actually want to

382
00:15:17,149 --> 00:15:21,149
write<font color="#CCCCCC"> it</font>

383
00:15:19,230 --> 00:15:23,250
about that<font color="#E5E5E5"> graphics try to go to</font><font color="#CCCCCC"> google</font>

384
00:15:21,149 --> 00:15:25,320
<font color="#CCCCCC">and search</font><font color="#E5E5E5"> for a useful picture about</font>

385
00:15:23,250 --> 00:15:27,690
<font color="#CCCCCC">the</font><font color="#E5E5E5"> word</font><font color="#CCCCCC"> why and this</font><font color="#E5E5E5"> is the first thing</font>

386
00:15:25,320 --> 00:15:29,490
<font color="#CCCCCC">that pops up with you search for it</font><font color="#E5E5E5"> not</font>

387
00:15:27,690 --> 00:15:32,130
<font color="#CCCCCC">like</font><font color="#E5E5E5"> the toilet</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> so why did I try</font>

388
00:15:29,490 --> 00:15:35,190
<font color="#CCCCCC">that so I wanted to have a tool which</font>

389
00:15:32,130 --> 00:15:37,980
<font color="#CCCCCC">helps me in static analysis for small to</font>

390
00:15:35,190 --> 00:15:40,050
medium sized sample sets<font color="#E5E5E5"> well the one</font>

391
00:15:37,980 --> 00:15:43,470
<font color="#E5E5E5">that was like a tool that helps me look</font>

392
00:15:40,050 --> 00:15:45,709
at<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 228 maybe 50 samples and</font><font color="#E5E5E5"> then</font>

393
00:15:43,470 --> 00:15:47,790
help me get<font color="#E5E5E5"> there at one shot</font>

394
00:15:45,709 --> 00:15:49,349
<font color="#E5E5E5">information whether they are packed or</font>

395
00:15:47,790 --> 00:15:52,079
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> not packed or they look</font>

396
00:15:49,350 --> 00:15:53,699
<font color="#E5E5E5">suspicious and try to hide api's and try</font>

397
00:15:52,079 --> 00:15:55,319
to write strings or whether they

398
00:15:53,699 --> 00:15:57,510
actually<font color="#E5E5E5"> look like totally normal</font>

399
00:15:55,320 --> 00:16:00,240
whether they contain<font color="#E5E5E5"> a</font><font color="#CCCCCC"> pea</font><font color="#E5E5E5"> ice that are</font>

400
00:15:57,510 --> 00:16:03,120
used for<font color="#E5E5E5"> GUI applications of graphical</font>

401
00:16:00,240 --> 00:16:05,730
purposes this<font color="#E5E5E5"> is why I start to</font><font color="#CCCCCC"> write</font>

402
00:16:03,120 --> 00:16:07,260
<font color="#CCCCCC">the tool they told</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> created is</font>

403
00:16:05,730 --> 00:16:08,910
supposed to be easy<font color="#E5E5E5"> to handle and</font>

404
00:16:07,260 --> 00:16:11,790
extendable<font color="#CCCCCC"> I still have to work on the</font>

405
00:16:08,910 --> 00:16:14,219
code<font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> bit more but it's only four</font>

406
00:16:11,790 --> 00:16:17,089
sets of Python scripts<font color="#CCCCCC"> that interact</font>

407
00:16:14,220 --> 00:16:21,209
with<font color="#CCCCCC"> rod re2 I'll be talking more</font><font color="#E5E5E5"> about</font>

408
00:16:17,089 --> 00:16:24,089
the tool<font color="#E5E5E5"> later so yeah I had</font><font color="#CCCCCC"> the tool</font>

409
00:16:21,209 --> 00:16:26,790
and try to extract metrics<font color="#E5E5E5"> and behavior</font>

410
00:16:24,089 --> 00:16:28,319
indicators but what did I actually not

411
00:16:26,790 --> 00:16:30,569
try<font color="#CCCCCC"> to do so I've been talking about</font>

412
00:16:28,319 --> 00:16:31,740
people about this<font color="#E5E5E5"> presentation</font><font color="#CCCCCC"> before</font>

413
00:16:30,569 --> 00:16:34,199
and they were like all about data

414
00:16:31,740 --> 00:16:37,620
analysis and<font color="#E5E5E5"> big data and and automation</font>

415
00:16:34,199 --> 00:16:38,849
and<font color="#E5E5E5"> big data and</font><font color="#CCCCCC"> the big</font><font color="#E5E5E5"> bigger data and</font>

416
00:16:37,620 --> 00:16:41,069
<font color="#CCCCCC">I actually</font><font color="#E5E5E5"> didn't try to collect a</font><font color="#CCCCCC"> lot</font>

417
00:16:38,850 --> 00:16:44,850
of data<font color="#E5E5E5"> so I</font><font color="#CCCCCC"> try to</font><font color="#E5E5E5"> focus on get</font>

418
00:16:41,069 --> 00:16:47,219
accurate<font color="#E5E5E5"> grass and get the visualization</font>

419
00:16:44,850 --> 00:16:49,079
and<font color="#CCCCCC"> the output</font><font color="#E5E5E5"> data in a correct way</font><font color="#CCCCCC"> and</font>

420
00:16:47,220 --> 00:16:50,790
<font color="#E5E5E5">did not intend</font><font color="#CCCCCC"> to do clustering the data</font>

421
00:16:49,079 --> 00:16:53,040
that I extract and some<font color="#E5E5E5"> of the features</font>

422
00:16:50,790 --> 00:16:55,380
<font color="#E5E5E5">can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> used for clustering if someone is</font>

423
00:16:53,040 --> 00:16:58,260
<font color="#E5E5E5">interested in</font><font color="#CCCCCC"> that I'm happy to share</font>

424
00:16:55,380 --> 00:17:00,029
all my data but<font color="#CCCCCC"> that was</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> my goal I</font>

425
00:16:58,260 --> 00:17:02,010
also didn't<font color="#E5E5E5"> try to do a binary</font><font color="#CCCCCC"> dipping I</font>

426
00:17:00,029 --> 00:17:04,829
know a grass has been<font color="#E5E5E5"> used for dipping</font>

427
00:17:02,010 --> 00:17:10,099
before and that's<font color="#E5E5E5"> really a good</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> to</font>

428
00:17:04,829 --> 00:17:12,480
do but as it is not that not that<font color="#E5E5E5"> easy</font>

429
00:17:10,099 --> 00:17:13,889
<font color="#E5E5E5">with</font><font color="#CCCCCC"> a usual</font><font color="#E5E5E5"> notebook to do a</font>

430
00:17:12,480 --> 00:17:16,589
<font color="#CCCCCC">large-scale the</font><font color="#E5E5E5"> thing I didn't make that</font>

431
00:17:13,890 --> 00:17:18,030
my primary goal and<font color="#E5E5E5"> for sure I did not</font>

432
00:17:16,589 --> 00:17:19,139
want to do machine<font color="#E5E5E5"> learning</font><font color="#CCCCCC"> I found a</font>

433
00:17:18,030 --> 00:17:21,569
<font color="#E5E5E5">very nice quote on machine learning</font>

434
00:17:19,140 --> 00:17:23,610
recently on<font color="#CCCCCC"> Twitter which says I need</font><font color="#E5E5E5"> a</font>

435
00:17:21,569 --> 00:17:25,530
<font color="#CCCCCC">ball labeled ml so I can throw machine</font>

436
00:17:23,609 --> 00:17:26,819
learning<font color="#CCCCCC"> and things I'm really</font><font color="#E5E5E5"> not the</font>

437
00:17:25,530 --> 00:17:27,770
biggest fan of machine learning with

438
00:17:26,819 --> 00:17:31,370
with binaries

439
00:17:27,770 --> 00:17:32,900
<font color="#E5E5E5">itself because I do</font><font color="#CCCCCC"> believe that</font><font color="#E5E5E5"> for</font>

440
00:17:31,370 --> 00:17:34,939
proper machine learning one needs a

441
00:17:32,900 --> 00:17:36,590
reliable set of features<font color="#E5E5E5"> and if there's</font>

442
00:17:34,940 --> 00:17:38,240
<font color="#CCCCCC">one</font><font color="#E5E5E5"> thing that malicious binaries</font>

443
00:17:36,590 --> 00:17:40,879
usually do<font color="#CCCCCC"> not</font><font color="#E5E5E5"> want to give away</font><font color="#CCCCCC"> its</font>

444
00:17:38,240 --> 00:17:42,890
reliable features so it is<font color="#E5E5E5"> very hard to</font>

445
00:17:40,880 --> 00:17:44,210
<font color="#E5E5E5">create</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> large feature set for</font><font color="#CCCCCC"> a large</font>

446
00:17:42,890 --> 00:17:47,540
group<font color="#CCCCCC"> of binaries that</font><font color="#E5E5E5"> is not like</font>

447
00:17:44,210 --> 00:17:49,370
inconsistent<font color="#E5E5E5"> one or</font><font color="#CCCCCC"> another</font><font color="#E5E5E5"> way all</font>

448
00:17:47,540 --> 00:17:54,320
<font color="#E5E5E5">right so what what did I do</font>

449
00:17:49,370 --> 00:17:56,840
<font color="#E5E5E5">I painted graphs you can maybe see</font><font color="#CCCCCC"> the</font>

450
00:17:54,320 --> 00:17:59,570
lines between these blobs<font color="#CCCCCC"> I cannot hear</font>

451
00:17:56,840 --> 00:18:00,709
<font color="#CCCCCC">but this is a graph that my</font><font color="#E5E5E5"> tool has</font>

452
00:17:59,570 --> 00:18:02,030
output<font color="#CCCCCC"> in</font><font color="#E5E5E5"> one of the one of the</font>

453
00:18:00,710 --> 00:18:04,910
<font color="#E5E5E5">prettiest because it's nice</font><font color="#CCCCCC"> and</font>

454
00:18:02,030 --> 00:18:08,930
structure than it's actually<font color="#E5E5E5"> small but</font>

455
00:18:04,910 --> 00:18:11,420
you<font color="#E5E5E5"> can see there is a a rat a backdoor</font>

456
00:18:08,930 --> 00:18:13,370
Trojan which gathers information about

457
00:18:11,420 --> 00:18:15,350
<font color="#E5E5E5">the infected machine and gathers</font>

458
00:18:13,370 --> 00:18:17,419
information<font color="#E5E5E5"> about the user on there and</font>

459
00:18:15,350 --> 00:18:19,179
connects to<font color="#CCCCCC"> a remote</font><font color="#E5E5E5"> server and download</font>

460
00:18:17,420 --> 00:18:22,640
the<font color="#E5E5E5"> binary ink and can execute</font><font color="#CCCCCC"> binaries</font>

461
00:18:19,180 --> 00:18:25,130
it's just a very simple<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> malware</font>

462
00:18:22,640 --> 00:18:27,380
<font color="#E5E5E5">but you can see there are the blue notes</font>

463
00:18:25,130 --> 00:18:28,730
or<font color="#CCCCCC"> the exports so this is a</font><font color="#E5E5E5"> DLL and the</font>

464
00:18:27,380 --> 00:18:31,760
marked exports in blue and<font color="#E5E5E5"> the green</font>

465
00:18:28,730 --> 00:18:33,410
<font color="#E5E5E5">nodes are callback functions or handler</font>

466
00:18:31,760 --> 00:18:36,050
functions for example<font color="#CCCCCC"> for create thread</font>

467
00:18:33,410 --> 00:18:38,720
or for<font color="#CCCCCC"> Hokie functions and all the pink</font>

468
00:18:36,050 --> 00:18:42,620
nodes are normal function<font color="#CCCCCC"> drive</font><font color="#E5E5E5"> function</font>

469
00:18:38,720 --> 00:18:45,470
<font color="#E5E5E5">notes so the</font><font color="#CCCCCC"> notes always</font><font color="#E5E5E5"> comply with</font>

470
00:18:42,620 --> 00:18:49,489
with<font color="#E5E5E5"> the function within the binary the</font>

471
00:18:45,470 --> 00:18:51,500
edges are function calls<font color="#E5E5E5"> among the local</font>

472
00:18:49,490 --> 00:18:54,530
functions within the<font color="#E5E5E5"> code section of the</font>

473
00:18:51,500 --> 00:18:56,650
binary<font color="#CCCCCC"> and also what's not visible there</font>

474
00:18:54,530 --> 00:18:59,149
there is white<font color="#E5E5E5"> nodes white nodes are</font>

475
00:18:56,650 --> 00:19:02,090
functions<font color="#CCCCCC"> that do not show any API call</font>

476
00:18:59,150 --> 00:19:06,020
or any string<font color="#E5E5E5"> so just colored nodes that</font>

477
00:19:02,090 --> 00:19:06,590
contain actual content<font color="#E5E5E5"> okay how did I do</font>

478
00:19:06,020 --> 00:19:09,590
<font color="#E5E5E5">this</font>

479
00:19:06,590 --> 00:19:13,220
I used<font color="#E5E5E5"> rotary - you wouldn't</font><font color="#CCCCCC"> believe how</font>

480
00:19:09,590 --> 00:19:15,439
much teaching you get in the<font color="#E5E5E5"> re</font>

481
00:19:13,220 --> 00:19:19,910
community for not using either<font color="#E5E5E5"> probe</font>

482
00:19:15,440 --> 00:19:22,370
basically I<font color="#CCCCCC"> transferred</font><font color="#E5E5E5"> re - it's a</font>

483
00:19:19,910 --> 00:19:24,560
disassembly framework that's based<font color="#E5E5E5"> on</font>

484
00:19:22,370 --> 00:19:26,060
the on the command line<font color="#CCCCCC"> it's best to</font><font color="#E5E5E5"> run</font>

485
00:19:24,560 --> 00:19:28,639
on Linux<font color="#E5E5E5"> although there is a version</font>

486
00:19:26,060 --> 00:19:30,290
that<font color="#CCCCCC"> runs on Windows - it can be</font>

487
00:19:28,640 --> 00:19:32,720
scripted from<font color="#E5E5E5"> Python which is very nice</font>

488
00:19:30,290 --> 00:19:35,720
the feature set Aphrodite<font color="#CCCCCC"> -</font><font color="#E5E5E5"> is very big</font>

489
00:19:32,720 --> 00:19:37,520
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can disassemble all sorts of</font>

490
00:19:35,720 --> 00:19:38,990
<font color="#CCCCCC">platforms with it and disassemble all</font>

491
00:19:37,520 --> 00:19:39,570
sorts of binaries as much as you want

492
00:19:38,990 --> 00:19:42,450
<font color="#E5E5E5">and then look at</font>

493
00:19:39,570 --> 00:19:44,040
code on the command line<font color="#E5E5E5"> which is I</font>

494
00:19:42,450 --> 00:19:46,920
think what<font color="#E5E5E5"> keeps most people from using</font>

495
00:19:44,040 --> 00:19:48,330
it what keeps most researchers<font color="#E5E5E5"> from</font>

496
00:19:46,920 --> 00:19:49,800
<font color="#CCCCCC">using it is</font><font color="#E5E5E5"> that there's still</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of</font>

497
00:19:48,330 --> 00:19:52,020
<font color="#E5E5E5">bugs in there that are being</font>

498
00:19:49,800 --> 00:19:54,270
continuously fixed and there's being new

499
00:19:52,020 --> 00:19:56,610
parts<font color="#E5E5E5"> produced every day I think as well</font>

500
00:19:54,270 --> 00:19:58,770
<font color="#E5E5E5">but what I found is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the retiree</font>

501
00:19:56,610 --> 00:20:00,419
team is actually<font color="#CCCCCC"> very helpful and</font>

502
00:19:58,770 --> 00:20:02,160
willing to<font color="#E5E5E5"> fix all the bugs in their</font>

503
00:20:00,420 --> 00:20:05,610
tool which is not the case with either

504
00:20:02,160 --> 00:20:08,790
<font color="#CCCCCC">Pro</font><font color="#E5E5E5"> anyway so that's not actually the</font>

505
00:20:05,610 --> 00:20:10,979
reasons why I used<font color="#E5E5E5"> rotary a little bit</font>

506
00:20:08,790 --> 00:20:12,570
more<font color="#E5E5E5"> about my use of rotary soon but the</font>

507
00:20:10,980 --> 00:20:15,120
<font color="#E5E5E5">red</font><font color="#CCCCCC"> re is actually pretty</font><font color="#E5E5E5"> nice yesterday</font>

508
00:20:12,570 --> 00:20:16,710
<font color="#CCCCCC">I talked to the radar developer and he</font>

509
00:20:15,120 --> 00:20:20,540
was like no<font color="#CCCCCC"> stop telling me</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> grass</font>

510
00:20:16,710 --> 00:20:23,970
I actually<font color="#E5E5E5"> I improved the</font><font color="#CCCCCC"> user interface</font>

511
00:20:20,540 --> 00:20:25,320
<font color="#CCCCCC">we now have like a</font><font color="#E5E5E5"> continuous pixel line</font>

512
00:20:23,970 --> 00:20:29,370
in the visual mode so<font color="#CCCCCC"> you have a visual</font>

513
00:20:25,320 --> 00:20:32,970
<font color="#E5E5E5">mode and they fix stuff on that all the</font>

514
00:20:29,370 --> 00:20:35,310
<font color="#CCCCCC">time</font><font color="#E5E5E5"> and they also implemented modules</font>

515
00:20:32,970 --> 00:20:38,460
<font color="#E5E5E5">to to disassemble all</font><font color="#CCCCCC"> sorts of machinery</font>

516
00:20:35,310 --> 00:20:41,490
with<font color="#CCCCCC"> Tamagotchis and</font><font color="#E5E5E5"> processors on the</font>

517
00:20:38,460 --> 00:20:43,080
Apollo 11 platform and whatnot so this

518
00:20:41,490 --> 00:20:43,680
is still<font color="#E5E5E5"> cool but what's my reason why I</font>

519
00:20:43,080 --> 00:20:46,740
<font color="#CCCCCC">used Rodari</font>

520
00:20:43,680 --> 00:20:48,570
<font color="#E5E5E5">so I just used</font><font color="#CCCCCC"> rotary because I have so</font>

521
00:20:46,740 --> 00:20:50,820
much<font color="#E5E5E5"> fun working</font><font color="#CCCCCC"> with these crazy</font>

522
00:20:48,570 --> 00:20:52,800
disassembler of people and because it's

523
00:20:50,820 --> 00:20:54,689
scalable<font color="#E5E5E5"> so there is</font><font color="#CCCCCC"> open-source it's</font>

524
00:20:52,800 --> 00:20:56,370
free you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> download it you can</font><font color="#E5E5E5"> deploy</font>

525
00:20:54,690 --> 00:20:59,430
<font color="#E5E5E5">it on one</font><font color="#CCCCCC"> machine you</font><font color="#E5E5E5"> can deploy it on</font>

526
00:20:56,370 --> 00:21:01,409
<font color="#CCCCCC">200</font><font color="#E5E5E5"> machines it doesn't matter it's the</font>

527
00:20:59,430 --> 00:21:05,070
<font color="#E5E5E5">question whether it runs continuously</font>

528
00:21:01,410 --> 00:21:06,900
there but you can use<font color="#E5E5E5"> it and that's cool</font>

529
00:21:05,070 --> 00:21:09,929
you can script a ball you can script<font color="#E5E5E5"> it</font>

530
00:21:06,900 --> 00:21:11,640
<font color="#E5E5E5">which I did using Python it's</font><font color="#CCCCCC"> squid free</font>

531
00:21:09,930 --> 00:21:13,740
so when<font color="#CCCCCC"> you're automated and scripted</font>

532
00:21:11,640 --> 00:21:16,200
<font color="#CCCCCC">you don't have the either propping up</font>

533
00:21:13,740 --> 00:21:18,930
and then all the<font color="#E5E5E5"> time which kept me kind</font>

534
00:21:16,200 --> 00:21:21,270
<font color="#E5E5E5">of kind of nervous every time</font><font color="#CCCCCC"> I scripted</font>

535
00:21:18,930 --> 00:21:23,010
<font color="#E5E5E5">either</font><font color="#CCCCCC"> Pro and you have</font><font color="#E5E5E5"> crate support so</font>

536
00:21:21,270 --> 00:21:24,990
<font color="#E5E5E5">people are really really interested in</font>

537
00:21:23,010 --> 00:21:26,700
having others use their tool and

538
00:21:24,990 --> 00:21:30,680
actually<font color="#E5E5E5"> are interested in helping them</font>

539
00:21:26,700 --> 00:21:33,840
to<font color="#CCCCCC"> get their head around Rodari and</font>

540
00:21:30,680 --> 00:21:36,150
finally what did I<font color="#E5E5E5"> need from</font><font color="#CCCCCC"> rod re so</font>

541
00:21:33,840 --> 00:21:37,860
rod re<font color="#E5E5E5"> like Ida Pro has the capability</font>

542
00:21:36,150 --> 00:21:39,600
of analyzing inter binaries and

543
00:21:37,860 --> 00:21:40,979
detecting functions in there and what I

544
00:21:39,600 --> 00:21:42,810
wanted were the<font color="#E5E5E5"> functions and their</font>

545
00:21:40,980 --> 00:21:44,610
cross references<font color="#E5E5E5"> so one of the function</font>

546
00:21:42,810 --> 00:21:46,740
which<font color="#E5E5E5"> caused another function to have my</font>

547
00:21:44,610 --> 00:21:48,600
edges<font color="#E5E5E5"> I wanted</font><font color="#CCCCCC"> the cross references on</font>

548
00:21:46,740 --> 00:21:49,920
symbols that were<font color="#CCCCCC"> referenced within</font><font color="#E5E5E5"> the</font>

549
00:21:48,600 --> 00:21:52,110
functions and<font color="#E5E5E5"> cross references on</font>

550
00:21:49,920 --> 00:21:52,530
strings this is the data<font color="#E5E5E5"> that I consider</font>

551
00:21:52,110 --> 00:21:56,100
most you

552
00:21:52,530 --> 00:21:59,250
<font color="#E5E5E5">full in the analysis in the quick</font>

553
00:21:56,100 --> 00:22:00,870
analysis process of a binary<font color="#CCCCCC"> nose it</font>

554
00:21:59,250 --> 00:22:04,110
gives you basic<font color="#CCCCCC"> P</font><font color="#E5E5E5"> information that I</font><font color="#CCCCCC"> can</font>

555
00:22:00,870 --> 00:22:05,820
fit into my graphs to make them<font color="#E5E5E5"> more to</font>

556
00:22:04,110 --> 00:22:08,010
make identification<font color="#CCCCCC"> of the grass better</font>

557
00:22:05,820 --> 00:22:10,139
<font color="#E5E5E5">that's a cool feature every time you</font>

558
00:22:08,010 --> 00:22:13,890
start<font color="#CCCCCC"> red</font><font color="#E5E5E5"> re you get the quote of the</font>

559
00:22:10,140 --> 00:22:18,840
day which<font color="#CCCCCC"> is usually</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> very serious</font>

560
00:22:13,890 --> 00:22:21,630
<font color="#E5E5E5">and what I found is</font><font color="#CCCCCC"> you can also pump</font>

561
00:22:18,840 --> 00:22:23,429
retiree through the<font color="#CCCCCC"> low cat script</font><font color="#E5E5E5"> and</font>

562
00:22:21,630 --> 00:22:25,890
<font color="#E5E5E5">Linux and get</font><font color="#CCCCCC"> a rainbow-colored</font>

563
00:22:23,430 --> 00:22:27,660
disassembly I was super<font color="#E5E5E5"> happy and I</font>

564
00:22:25,890 --> 00:22:32,340
really<font color="#CCCCCC"> liked to</font><font color="#E5E5E5"> work on that this is a</font>

565
00:22:27,660 --> 00:22:35,340
way anyway so vector<font color="#E5E5E5"> a by writing</font><font color="#CCCCCC"> Rodari</font>

566
00:22:32,340 --> 00:22:38,010
in a scripted way is fairly<font color="#E5E5E5"> simple you</font>

567
00:22:35,340 --> 00:22:40,649
<font color="#CCCCCC">have modules for example</font><font color="#E5E5E5"> for Python you</font>

568
00:22:38,010 --> 00:22:44,250
<font color="#CCCCCC">can download the radar module and then</font>

569
00:22:40,650 --> 00:22:46,290
just get a handle on a<font color="#E5E5E5"> radar a process</font>

570
00:22:44,250 --> 00:22:50,160
that started by your Python script<font color="#E5E5E5"> which</font>

571
00:22:46,290 --> 00:22:53,850
means you open up your input file with

572
00:22:50,160 --> 00:22:57,120
<font color="#CCCCCC">our two pipe and this gives you a handle</font>

573
00:22:53,850 --> 00:22:59,639
to pump<font color="#E5E5E5"> commands to your</font><font color="#CCCCCC"> radar process</font>

574
00:22:57,120 --> 00:23:01,699
you<font color="#E5E5E5"> don't have to deal with</font><font color="#CCCCCC"> C which I</font>

575
00:22:59,640 --> 00:23:06,120
can do but I prefer Python actually<font color="#E5E5E5"> and</font>

576
00:23:01,700 --> 00:23:09,180
then you can just execute commands the

577
00:23:06,120 --> 00:23:11,340
commands<font color="#E5E5E5"> are I admit one of the bigger</font>

578
00:23:09,180 --> 00:23:13,560
<font color="#CCCCCC">issues of</font><font color="#E5E5E5"> Rodari because they're really</font>

579
00:23:11,340 --> 00:23:15,300
<font color="#E5E5E5">not easy to understand so listed all</font><font color="#CCCCCC"> of</font>

580
00:23:13,560 --> 00:23:17,190
<font color="#CCCCCC">the other commands are used</font><font color="#E5E5E5"> on that</font>

581
00:23:15,300 --> 00:23:18,360
slide if someone wants to get to<font color="#CCCCCC"> sail</font>

582
00:23:17,190 --> 00:23:18,780
<font color="#E5E5E5">around with</font><font color="#CCCCCC"> already here is a</font><font color="#E5E5E5"> little</font>

583
00:23:18,360 --> 00:23:21,179
help

584
00:23:18,780 --> 00:23:23,060
no not<font color="#E5E5E5"> going into details</font><font color="#CCCCCC"> about this</font>

585
00:23:21,180 --> 00:23:26,070
command<font color="#E5E5E5"> right now</font>

586
00:23:23,060 --> 00:23:27,510
at this point<font color="#E5E5E5"> I also want to say thanks</font>

587
00:23:26,070 --> 00:23:30,240
<font color="#CCCCCC">to our development</font><font color="#E5E5E5"> team because they</font>

588
00:23:27,510 --> 00:23:31,710
wrote half my tool by feeding<font color="#E5E5E5"> me all of</font>

589
00:23:30,240 --> 00:23:33,420
these<font color="#E5E5E5"> commands</font><font color="#CCCCCC"> basically in there</font>

590
00:23:31,710 --> 00:23:35,280
telegram channel usually<font color="#E5E5E5"> when you start</font>

591
00:23:33,420 --> 00:23:37,230
<font color="#E5E5E5">on radar you post a question there and</font>

592
00:23:35,280 --> 00:23:39,000
someone sends<font color="#E5E5E5"> you back command lines and</font>

593
00:23:37,230 --> 00:23:43,200
then<font color="#E5E5E5"> you just use these command lines</font>

594
00:23:39,000 --> 00:23:45,300
that was my way to learn<font color="#CCCCCC"> Rodari okay</font><font color="#E5E5E5"> how</font>

595
00:23:43,200 --> 00:23:47,430
does the tool look like so<font color="#E5E5E5"> I did not</font>

596
00:23:45,300 --> 00:23:49,830
only<font color="#E5E5E5"> rely on radar a and</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> two pipe</font>

597
00:23:47,430 --> 00:23:54,420
but also<font color="#E5E5E5"> use</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> X to create the</font>

598
00:23:49,830 --> 00:23:57,960
graphs<font color="#E5E5E5"> so I got all the functions and</font>

599
00:23:54,420 --> 00:24:00,000
<font color="#E5E5E5">their cross references out of red pipe</font>

600
00:23:57,960 --> 00:24:02,850
the data on into<font color="#CCCCCC"> Network</font><font color="#E5E5E5"> X which is</font>

601
00:24:00,000 --> 00:24:04,800
fairly simple<font color="#E5E5E5"> by six lines and fighting</font>

602
00:24:02,850 --> 00:24:05,939
<font color="#E5E5E5">to just create a</font><font color="#CCCCCC"> growl</font>

603
00:24:04,800 --> 00:24:07,139
<font color="#E5E5E5">you have to create all the notes and</font>

604
00:24:05,940 --> 00:24:09,180
<font color="#CCCCCC">then you add</font><font color="#E5E5E5"> all the edges</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then you</font>

605
00:24:07,140 --> 00:24:11,640
<font color="#E5E5E5">have a grab structure it's super simple</font>

606
00:24:09,180 --> 00:24:14,520
also the plotting<font color="#E5E5E5"> turned out to be super</font>

607
00:24:11,640 --> 00:24:16,050
simple<font color="#E5E5E5"> if you refer to PI plot there is</font>

608
00:24:14,520 --> 00:24:18,000
a lot of<font color="#CCCCCC"> libraries to help you plot</font>

609
00:24:16,050 --> 00:24:20,639
<font color="#E5E5E5">networks graphs</font><font color="#CCCCCC"> pie pod is the one</font>

610
00:24:18,000 --> 00:24:22,230
<font color="#E5E5E5">that's easiest to access and actually</font>

611
00:24:20,640 --> 00:24:25,680
the one<font color="#E5E5E5"> that helps you even get note</font>

612
00:24:22,230 --> 00:24:27,360
data into the notes<font color="#E5E5E5"> what was my problem</font>

613
00:24:25,680 --> 00:24:28,350
<font color="#E5E5E5">with graph structures in Python is that</font>

614
00:24:27,360 --> 00:24:30,439
<font color="#E5E5E5">that's usually used by mathematicians</font>

615
00:24:28,350 --> 00:24:33,719
<font color="#E5E5E5">and mathematicians like nodes and edges</font>

616
00:24:30,440 --> 00:24:35,250
<font color="#E5E5E5">but they don't really like data within</font>

617
00:24:33,720 --> 00:24:36,930
their notes<font color="#E5E5E5"> what was</font><font color="#CCCCCC"> interesting for me</font>

618
00:24:35,250 --> 00:24:38,580
<font color="#E5E5E5">it was data within the note so I wanted</font>

619
00:24:36,930 --> 00:24:40,470
the API calls and<font color="#E5E5E5"> strings and actually</font>

620
00:24:38,580 --> 00:24:42,449
also<font color="#E5E5E5"> wanted to</font><font color="#CCCCCC"> visualize them that's</font>

621
00:24:40,470 --> 00:24:44,610
something<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> fairly difficult to</font>

622
00:24:42,450 --> 00:24:48,060
arrange<font color="#E5E5E5"> with</font><font color="#CCCCCC"> networks solution for that</font>

623
00:24:44,610 --> 00:24:50,459
is<font color="#E5E5E5"> to use PI</font><font color="#CCCCCC"> plot and assign the strings</font>

624
00:24:48,060 --> 00:24:53,190
and<font color="#E5E5E5"> what you want to see within the</font>

625
00:24:50,460 --> 00:24:54,690
<font color="#CCCCCC">nodes as labels to the action node</font><font color="#E5E5E5"> then</font>

626
00:24:53,190 --> 00:24:56,730
you can read what<font color="#CCCCCC"> you're not</font><font color="#E5E5E5"> actually</font>

627
00:24:54,690 --> 00:25:00,960
<font color="#E5E5E5">contains which is a bit of a workaround</font>

628
00:24:56,730 --> 00:25:03,000
<font color="#E5E5E5">but it works more or less for static PE</font>

629
00:25:00,960 --> 00:25:05,310
<font color="#E5E5E5">file information</font><font color="#CCCCCC"> I didn't do</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> Rodari</font>

630
00:25:03,000 --> 00:25:06,930
<font color="#E5E5E5">I use</font><font color="#CCCCCC"> P file which is written</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> arrow</font>

631
00:25:05,310 --> 00:25:08,280
<font color="#CCCCCC">carrara was also a guy</font><font color="#E5E5E5"> who</font><font color="#CCCCCC"> like</font>

632
00:25:06,930 --> 00:25:09,270
contributed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> most of my projects</font>

633
00:25:08,280 --> 00:25:11,960
<font color="#E5E5E5">without knowing about it</font>

634
00:25:09,270 --> 00:25:15,000
<font color="#E5E5E5">and I'm</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> grateful about his work and</font>

635
00:25:11,960 --> 00:25:17,130
neo4j<font color="#E5E5E5"> is currently my solution for</font><font color="#CCCCCC"> a</font>

636
00:25:15,000 --> 00:25:20,760
back-end<font color="#E5E5E5"> neo4j</font><font color="#CCCCCC"> is a graph database we</font>

637
00:25:17,130 --> 00:25:22,200
can just like<font color="#E5E5E5"> port your graph into the</font>

638
00:25:20,760 --> 00:25:23,760
database<font color="#CCCCCC"> and then you</font><font color="#E5E5E5"> have the graph</font>

639
00:25:22,200 --> 00:25:25,710
<font color="#E5E5E5">structure there you can also do a lot</font>

640
00:25:23,760 --> 00:25:29,420
more magic with graph databases<font color="#E5E5E5"> but I</font>

641
00:25:25,710 --> 00:25:31,950
also didn't go all<font color="#CCCCCC"> the way there so</font>

642
00:25:29,420 --> 00:25:33,780
<font color="#E5E5E5">space for a future</font><font color="#CCCCCC"> project actually</font>

643
00:25:31,950 --> 00:25:38,700
<font color="#CCCCCC">working</font><font color="#E5E5E5"> with that graph database because</font>

644
00:25:33,780 --> 00:25:40,560
in<font color="#E5E5E5"> theory you can represent a set of</font>

645
00:25:38,700 --> 00:25:41,970
binaries within the graph database and

646
00:25:40,560 --> 00:25:44,399
then see whether you<font color="#E5E5E5"> can find links in</font>

647
00:25:41,970 --> 00:25:47,270
<font color="#E5E5E5">there</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> be talking a bit more</font><font color="#CCCCCC"> about</font>

648
00:25:44,400 --> 00:25:49,440
<font color="#CCCCCC">that</font><font color="#E5E5E5"> in the end</font><font color="#CCCCCC"> of the talk</font><font color="#E5E5E5"> the project</font>

649
00:25:47,270 --> 00:25:52,170
will be published<font color="#CCCCCC"> sooner</font><font color="#E5E5E5"> actually</font>

650
00:25:49,440 --> 00:25:53,640
there's also already<font color="#E5E5E5"> code on my</font><font color="#CCCCCC"> github</font>

651
00:25:52,170 --> 00:25:56,010
profile if you<font color="#E5E5E5"> want to check it out but</font>

652
00:25:53,640 --> 00:25:58,440
<font color="#CCCCCC">I warn you that's still proof of concept</font>

653
00:25:56,010 --> 00:26:00,360
<font color="#CCCCCC">I went the</font><font color="#E5E5E5"> usual software developer way</font>

654
00:25:58,440 --> 00:26:01,950
with that<font color="#E5E5E5"> project</font><font color="#CCCCCC"> I did not really</font>

655
00:26:00,360 --> 00:26:04,199
design<font color="#E5E5E5"> anything it's just</font><font color="#CCCCCC"> stack</font>

656
00:26:01,950 --> 00:26:05,760
functionality on top<font color="#CCCCCC"> of each other so</font>

657
00:26:04,200 --> 00:26:07,020
there might be some<font color="#CCCCCC"> packs in there</font><font color="#E5E5E5"> and</font>

658
00:26:05,760 --> 00:26:07,800
it<font color="#E5E5E5"> might not</font><font color="#CCCCCC"> work without boundaries</font><font color="#E5E5E5"> but</font>

659
00:26:07,020 --> 00:26:12,750
it's<font color="#E5E5E5"> um</font>

660
00:26:07,800 --> 00:26:15,389
it's already<font color="#CCCCCC"> public okay what did</font><font color="#E5E5E5"> I do a</font>

661
00:26:12,750 --> 00:26:17,580
binary art project<font color="#E5E5E5"> you saw the grass</font>

662
00:26:15,390 --> 00:26:18,300
before<font color="#E5E5E5"> you saw that most of the graph is</font>

663
00:26:17,580 --> 00:26:19,860
pink that's

664
00:26:18,300 --> 00:26:21,450
not because<font color="#CCCCCC"> I like pink so much but</font>

665
00:26:19,860 --> 00:26:24,439
<font color="#E5E5E5">actually because I'd like to annoy</font>

666
00:26:21,450 --> 00:26:27,300
people<font color="#E5E5E5"> that's why I paint things pink</font>

667
00:26:24,440 --> 00:26:32,240
but we can see a lot more<font color="#E5E5E5"> pink</font><font color="#CCCCCC"> rats</font>

668
00:26:27,300 --> 00:26:34,649
soon how did the graph generation work

669
00:26:32,240 --> 00:26:36,780
<font color="#E5E5E5">as I mentioned I used functions as my</font>

670
00:26:34,650 --> 00:26:38,190
nodes and function calls<font color="#E5E5E5"> as my edges</font>

671
00:26:36,780 --> 00:26:39,360
<font color="#CCCCCC">well that's not all that</font><font color="#E5E5E5"> simple as it</font>

672
00:26:38,190 --> 00:26:41,040
sounds<font color="#E5E5E5"> like because there's a lot of</font>

673
00:26:39,360 --> 00:26:43,350
calls of different types within<font color="#E5E5E5"> the</font>

674
00:26:41,040 --> 00:26:47,100
binary<font color="#E5E5E5"> and all that I was interested in</font>

675
00:26:43,350 --> 00:26:48,810
for the graph generation were local

676
00:26:47,100 --> 00:26:51,149
calls from functions within the<font color="#CCCCCC"> code</font>

677
00:26:48,810 --> 00:26:53,820
section but not<font color="#E5E5E5"> actually calls to api's</font>

678
00:26:51,150 --> 00:26:55,310
<font color="#E5E5E5">and so on and so forth also</font><font color="#CCCCCC"> with most</font>

679
00:26:53,820 --> 00:26:58,679
<font color="#E5E5E5">boundaries you have the problem of</font>

680
00:26:55,310 --> 00:27:01,770
indirect calls<font color="#E5E5E5"> especially in in C++</font><font color="#CCCCCC"> you</font>

681
00:26:58,680 --> 00:27:03,660
find a lot<font color="#E5E5E5"> of calls to go to</font><font color="#CCCCCC"> member</font>

682
00:27:01,770 --> 00:27:05,660
functions<font color="#CCCCCC"> or</font><font color="#E5E5E5"> actually call</font><font color="#CCCCCC"> into some</font>

683
00:27:03,660 --> 00:27:08,670
offset within<font color="#E5E5E5"> some object</font><font color="#CCCCCC"> which</font>

684
00:27:05,660 --> 00:27:10,260
<font color="#E5E5E5">statically is very hard to to parse it's</font>

685
00:27:08,670 --> 00:27:12,300
also<font color="#E5E5E5"> still open</font><font color="#CCCCCC"> for a</font><font color="#E5E5E5"> future</font><font color="#CCCCCC"> project so</font>

686
00:27:10,260 --> 00:27:14,940
I didn't I didn't primarily deal with

687
00:27:12,300 --> 00:27:20,010
C++ binaries<font color="#E5E5E5"> because of all the indirect</font>

688
00:27:14,940 --> 00:27:23,280
calls<font color="#CCCCCC"> that cannot resolve within the</font>

689
00:27:20,010 --> 00:27:25,890
grass I identified three different<font color="#E5E5E5"> kinds</font>

690
00:27:23,280 --> 00:27:27,960
of calls<font color="#CCCCCC"> or three different</font><font color="#E5E5E5"> kinds of</font>

691
00:27:25,890 --> 00:27:30,000
cross references which of course were

692
00:27:27,960 --> 00:27:32,700
references to<font color="#E5E5E5"> other functions which were</font>

693
00:27:30,000 --> 00:27:34,500
<font color="#E5E5E5">the component of the graph but there's</font>

694
00:27:32,700 --> 00:27:36,690
also references to code<font color="#E5E5E5"> that Doolin's</font>

695
00:27:34,500 --> 00:27:38,460
<font color="#CCCCCC">referred to a</font><font color="#E5E5E5"> specific function this</font><font color="#CCCCCC"> is</font>

696
00:27:36,690 --> 00:27:40,680
something primarily happens with<font color="#E5E5E5"> packed</font>

697
00:27:38,460 --> 00:27:42,300
binaries so<font color="#E5E5E5"> when radar is not able to</font>

698
00:27:40,680 --> 00:27:44,010
<font color="#CCCCCC">detect</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> the functions it will</font><font color="#E5E5E5"> show</font>

699
00:27:42,300 --> 00:27:47,490
you calls that<font color="#CCCCCC"> go like somewhere</font><font color="#E5E5E5"> in the</font>

700
00:27:44,010 --> 00:27:49,970
code but do not refer to<font color="#E5E5E5"> a function this</font>

701
00:27:47,490 --> 00:27:52,470
<font color="#CCCCCC">is also implicit an indicator</font><font color="#E5E5E5"> for</font>

702
00:27:49,970 --> 00:27:55,920
<font color="#CCCCCC">whether the function parsing works or</font>

703
00:27:52,470 --> 00:27:57,810
not<font color="#E5E5E5"> and funny enough throughout my</font>

704
00:27:55,920 --> 00:28:01,380
project<font color="#CCCCCC"> I saw a lot of improvement on</font>

705
00:27:57,810 --> 00:28:03,060
this this parameter so in the<font color="#CCCCCC"> beginning</font>

706
00:28:01,380 --> 00:28:04,740
when I ran the parser<font color="#E5E5E5"> I saw a lot</font><font color="#CCCCCC"> of</font>

707
00:28:03,060 --> 00:28:06,870
references<font color="#E5E5E5"> that were going to</font><font color="#CCCCCC"> nowhere</font>

708
00:28:04,740 --> 00:28:08,580
<font color="#CCCCCC">and in the end after a I submitted</font><font color="#E5E5E5"> all</font>

709
00:28:06,870 --> 00:28:10,169
my box<font color="#CCCCCC"> I saw a lot of</font><font color="#E5E5E5"> calls that all of</font>

710
00:28:08,580 --> 00:28:12,120
a sudden found<font color="#E5E5E5"> the function that</font><font color="#CCCCCC"> was</font>

711
00:28:10,170 --> 00:28:14,790
super funny to watch<font color="#CCCCCC"> although</font>

712
00:28:12,120 --> 00:28:16,530
<font color="#E5E5E5">occasionally you find calls to go</font>

713
00:28:14,790 --> 00:28:18,659
outside the executable section which is

714
00:28:16,530 --> 00:28:21,420
something<font color="#E5E5E5"> very</font><font color="#CCCCCC"> curious because I found</font>

715
00:28:18,660 --> 00:28:24,330
<font color="#E5E5E5">out this usually when the function call</font>

716
00:28:21,420 --> 00:28:26,130
<font color="#CCCCCC">refers to a global variable which is</font>

717
00:28:24,330 --> 00:28:28,169
located<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> at the executors of</font>

718
00:28:26,130 --> 00:28:31,320
section and this for<font color="#E5E5E5"> me</font><font color="#CCCCCC"> is an indicator</font>

719
00:28:28,170 --> 00:28:31,879
for<font color="#E5E5E5"> dynamic API loading this is not not</font>

720
00:28:31,320 --> 00:28:34,009
always

721
00:28:31,879 --> 00:28:35,809
<font color="#E5E5E5">dynamically</font><font color="#CCCCCC"> api's are stored in global</font>

722
00:28:34,009 --> 00:28:38,089
variables but this is something<font color="#CCCCCC"> I saw in</font>

723
00:28:35,809 --> 00:28:40,009
the past with with lots of especially

724
00:28:38,089 --> 00:28:42,440
targeted Melbourne it's for me an

725
00:28:40,009 --> 00:28:47,809
indicator that<font color="#E5E5E5"> as mentioned API is are</font>

726
00:28:42,440 --> 00:28:49,749
called<font color="#E5E5E5"> are loaded dynamically so right</font>

727
00:28:47,809 --> 00:28:54,259
if the notes or functions<font color="#E5E5E5"> the edges are</font>

728
00:28:49,749 --> 00:28:57,999
calls<font color="#E5E5E5"> and also handler functions so in a</font>

729
00:28:54,259 --> 00:28:59,690
limited approach to try to identify

730
00:28:57,999 --> 00:29:03,069
callbacks or handler functions

731
00:28:59,690 --> 00:29:06,679
especially<font color="#CCCCCC"> for create threat</font><font color="#E5E5E5"> and for</font>

732
00:29:03,069 --> 00:29:09,168
Windows<font color="#E5E5E5"> hooking to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> identify</font>

733
00:29:06,679 --> 00:29:12,049
whether some special note that didn't

734
00:29:09,169 --> 00:29:15,079
have any references<font color="#E5E5E5"> would used as a as a</font>

735
00:29:12,049 --> 00:29:15,979
threat function<font color="#E5E5E5"> by create thread I'll be</font>

736
00:29:15,079 --> 00:29:18,259
<font color="#CCCCCC">talking</font><font color="#E5E5E5"> about it soon</font>

737
00:29:15,979 --> 00:29:22,579
and here again<font color="#E5E5E5"> an example for a very</font>

738
00:29:18,259 --> 00:29:25,549
small<font color="#E5E5E5"> and</font><font color="#CCCCCC"> very pretty graphic strings so</font>

739
00:29:22,579 --> 00:29:27,678
the first thing that well I personally

740
00:29:25,549 --> 00:29:29,569
<font color="#CCCCCC">tried</font><font color="#E5E5E5"> to find in a binary that I want to</font>

741
00:29:27,679 --> 00:29:31,609
<font color="#E5E5E5">analyze the strings why because they're</font>

742
00:29:29,569 --> 00:29:33,559
super<font color="#CCCCCC"> easy to to find they're super easy</font>

743
00:29:31,609 --> 00:29:35,539
<font color="#E5E5E5">to parse and usually you have a lot</font><font color="#CCCCCC"> of</font>

744
00:29:33,559 --> 00:29:37,519
information<font color="#CCCCCC"> all the information that's</font>

745
00:29:35,539 --> 00:29:38,869
possibly contextualized<font color="#E5E5E5"> so it's</font>

746
00:29:37,519 --> 00:29:40,909
something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the human mind can read</font>

747
00:29:38,869 --> 00:29:44,779
and understand<font color="#E5E5E5"> there's a couple of</font>

748
00:29:40,909 --> 00:29:47,329
issues in collecting all the strings so

749
00:29:44,779 --> 00:29:49,729
string parsing in in<font color="#CCCCCC"> radar</font><font color="#E5E5E5"> works the way</font>

750
00:29:47,329 --> 00:29:52,489
<font color="#CCCCCC">that the either</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> section or the</font>

751
00:29:49,729 --> 00:29:54,440
entire<font color="#E5E5E5"> binary is searched for something</font>

752
00:29:52,489 --> 00:29:56,599
<font color="#E5E5E5">that looks like a string and afterwards</font>

753
00:29:54,440 --> 00:29:59,989
you still have to parse for<font color="#CCCCCC"> a C</font>

754
00:29:56,599 --> 00:30:03,198
compatible strings which reduces the<font color="#E5E5E5"> fan</font>

755
00:29:59,989 --> 00:30:03,829
string set considerably and then it's

756
00:30:03,199 --> 00:30:05,690
<font color="#E5E5E5">mentioned before there's</font>

757
00:30:03,829 --> 00:30:07,369
<font color="#E5E5E5">cross-references source of strings you</font>

758
00:30:05,690 --> 00:30:08,989
<font color="#E5E5E5">just have to find the cross-reference of</font>

759
00:30:07,369 --> 00:30:11,448
a string within<font color="#CCCCCC"> the</font><font color="#E5E5E5"> function and then</font>

760
00:30:08,989 --> 00:30:13,429
you can create<font color="#E5E5E5"> the</font><font color="#CCCCCC"> link between strings</font>

761
00:30:11,449 --> 00:30:15,549
and<font color="#CCCCCC"> they're their respective functions</font>

762
00:30:13,429 --> 00:30:18,559
<font color="#E5E5E5">yeah and the on the slide you can see</font>

763
00:30:15,549 --> 00:30:21,889
<font color="#E5E5E5">the string listing from a common rat</font>

764
00:30:18,559 --> 00:30:23,719
from<font color="#CCCCCC"> read sip right hip I forgot the</font>

765
00:30:21,889 --> 00:30:26,149
name<font color="#E5E5E5"> I'll be also talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that a</font>

766
00:30:23,719 --> 00:30:27,709
little<font color="#E5E5E5"> bit later but this is a wonderful</font>

767
00:30:26,149 --> 00:30:30,408
example<font color="#E5E5E5"> of how</font><font color="#CCCCCC"> our targeted knowledge</font>

768
00:30:27,709 --> 00:30:34,519
just shows all<font color="#CCCCCC"> of its string content in</font>

769
00:30:30,409 --> 00:30:37,459
<font color="#E5E5E5">clear text if you just analyze it one</font>

770
00:30:34,519 --> 00:30:39,649
might<font color="#E5E5E5"> wonder so I</font><font color="#CCCCCC"> got a common question</font>

771
00:30:37,459 --> 00:30:42,199
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I have to deal with</font><font color="#CCCCCC"> why why is this</font>

772
00:30:39,649 --> 00:30:44,409
still why is this happening

773
00:30:42,199 --> 00:30:46,870
malicious software

774
00:30:44,410 --> 00:30:49,390
so security software<font color="#E5E5E5"> is strictly based</font>

775
00:30:46,870 --> 00:30:50,919
on an<font color="#E5E5E5"> ecosystem or their intelligence is</font>

776
00:30:49,390 --> 00:30:53,320
based on ecosystems<font color="#E5E5E5"> or when something</font>

777
00:30:50,920 --> 00:30:56,140
<font color="#E5E5E5">malicious is found a lot of times it is</font>

778
00:30:53,320 --> 00:30:58,120
<font color="#E5E5E5">that's pretty surely</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> to the databases</font>

779
00:30:56,140 --> 00:31:01,390
<font color="#E5E5E5">of antivirus vendors but this system</font>

780
00:30:58,120 --> 00:31:03,790
only applies to as I call it mass

781
00:31:01,390 --> 00:31:05,620
malware or software<font color="#CCCCCC"> or malware</font><font color="#E5E5E5"> that's</font>

782
00:31:03,790 --> 00:31:07,840
used in in<font color="#E5E5E5"> different contexts</font><font color="#CCCCCC"> if you</font>

783
00:31:05,620 --> 00:31:10,239
have<font color="#E5E5E5"> targeted malware which is used in</font>

784
00:31:07,840 --> 00:31:11,860
very little contexts<font color="#E5E5E5"> and usually on</font>

785
00:31:10,240 --> 00:31:13,540
targets with different antivirus<font color="#E5E5E5"> engines</font>

786
00:31:11,860 --> 00:31:15,250
they have very little chance to<font color="#CCCCCC"> actually</font>

787
00:31:13,540 --> 00:31:18,250
catch these binaries<font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> unlikely</font>

788
00:31:15,250 --> 00:31:19,630
that<font color="#E5E5E5"> someone will create a signature for</font>

789
00:31:18,250 --> 00:31:21,340
<font color="#E5E5E5">these binaries although I would be super</font>

790
00:31:19,630 --> 00:31:24,910
<font color="#CCCCCC">simple to create a signature for for</font>

791
00:31:21,340 --> 00:31:29,230
example<font color="#CCCCCC"> the command</font><font color="#E5E5E5"> the commands that</font>

792
00:31:24,910 --> 00:31:30,970
are listed<font color="#E5E5E5"> within the binaries</font><font color="#CCCCCC"> I also</font>

793
00:31:29,230 --> 00:31:33,190
implemented<font color="#E5E5E5"> a string list detection</font>

794
00:31:30,970 --> 00:31:34,720
<font color="#E5E5E5">because</font><font color="#CCCCCC"> I found</font><font color="#E5E5E5"> very frequently that</font>

795
00:31:33,190 --> 00:31:37,450
functions would work with lists of

796
00:31:34,720 --> 00:31:42,550
strings<font color="#CCCCCC"> that were seen in the binary as</font>

797
00:31:37,450 --> 00:31:43,750
a continuous list of addresses<font color="#E5E5E5"> but in</font>

798
00:31:42,550 --> 00:31:45,220
the graph<font color="#E5E5E5"> I had the problem that I</font><font color="#CCCCCC"> would</font>

799
00:31:43,750 --> 00:31:47,880
<font color="#CCCCCC">only see the first item so</font>

800
00:31:45,220 --> 00:31:51,070
<font color="#CCCCCC">cross-reference</font><font color="#E5E5E5"> always links to memory</font>

801
00:31:47,880 --> 00:31:53,170
<font color="#E5E5E5">to an address and</font><font color="#CCCCCC"> you can link that</font>

802
00:31:51,070 --> 00:31:55,210
address to a graph<font color="#E5E5E5"> but if it's like an</font>

803
00:31:53,170 --> 00:31:57,220
offset<font color="#E5E5E5"> for a list you will miss the rest</font>

804
00:31:55,210 --> 00:31:59,500
of the strings<font color="#E5E5E5"> that comes afterwards so</font>

805
00:31:57,220 --> 00:32:01,810
I try<font color="#CCCCCC"> to parse these lists and</font><font color="#E5E5E5"> now fit</font>

806
00:31:59,500 --> 00:32:04,300
lists into<font color="#CCCCCC"> Intergraph nodes which</font>

807
00:32:01,810 --> 00:32:08,409
occasionally makes the notes<font color="#E5E5E5"> very large</font>

808
00:32:04,300 --> 00:32:09,850
like very<font color="#E5E5E5"> long and then you have two</font>

809
00:32:08,410 --> 00:32:12,100
<font color="#E5E5E5">strings in there yeah what's the</font>

810
00:32:09,850 --> 00:32:13,510
information<font color="#CCCCCC"> one can gain</font><font color="#E5E5E5"> from strings as</font>

811
00:32:12,100 --> 00:32:15,490
you can see you can read them you can

812
00:32:13,510 --> 00:32:16,870
<font color="#E5E5E5">think about them and you can come to a</font>

813
00:32:15,490 --> 00:32:18,610
<font color="#E5E5E5">conclusion but there's</font><font color="#CCCCCC"> lots more</font>

814
00:32:16,870 --> 00:32:20,050
<font color="#E5E5E5">information</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can get out</font><font color="#CCCCCC"> of there you</font>

815
00:32:18,610 --> 00:32:22,300
can see for example that one string is

816
00:32:20,050 --> 00:32:24,600
<font color="#CCCCCC">used</font><font color="#E5E5E5"> in a lot of</font><font color="#CCCCCC"> different notes you can</font>

817
00:32:22,300 --> 00:32:27,790
<font color="#E5E5E5">see that one string</font><font color="#CCCCCC"> is very</font><font color="#E5E5E5"> long</font>

818
00:32:24,600 --> 00:32:31,689
<font color="#E5E5E5">potentially not used in any</font><font color="#CCCCCC"> node</font><font color="#E5E5E5"> you can</font>

819
00:32:27,790 --> 00:32:33,850
<font color="#CCCCCC">see that these strings have a certain</font>

820
00:32:31,690 --> 00:32:35,470
<font color="#CCCCCC">language so for example English</font><font color="#E5E5E5"> or not</font>

821
00:32:33,850 --> 00:32:38,919
<font color="#E5E5E5">English or Chinese or whatever and</font>

822
00:32:35,470 --> 00:32:41,800
<font color="#E5E5E5">sometimes you can even get</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> bugs</font>

823
00:32:38,920 --> 00:32:43,900
from strings<font color="#E5E5E5"> so it has</font><font color="#CCCCCC"> happened in the</font>

824
00:32:41,800 --> 00:32:45,970
<font color="#E5E5E5">past that</font><font color="#CCCCCC"> I saw strings within binaries</font>

825
00:32:43,900 --> 00:32:48,250
that<font color="#E5E5E5"> were written the wrong way and this</font>

826
00:32:45,970 --> 00:32:52,690
<font color="#E5E5E5">is something something rather curious</font>

827
00:32:48,250 --> 00:32:54,430
<font color="#CCCCCC">because if you</font><font color="#E5E5E5"> copy paste code you might</font>

828
00:32:52,690 --> 00:32:56,970
<font color="#CCCCCC">also paste strings if you copy paste</font>

829
00:32:54,430 --> 00:32:59,090
code within your<font color="#CCCCCC"> your</font><font color="#E5E5E5"> different</font>

830
00:32:56,970 --> 00:33:01,530
<font color="#CCCCCC">a shion's</font><font color="#E5E5E5"> within different</font><font color="#CCCCCC"> Russians</font>

831
00:32:59,090 --> 00:33:04,439
you're very likely<font color="#E5E5E5"> doesn't fix the box</font>

832
00:33:01,530 --> 00:33:06,780
in<font color="#CCCCCC"> are the mistakes</font><font color="#E5E5E5"> within the the</font>

833
00:33:04,440 --> 00:33:09,900
strings<font color="#E5E5E5"> and this is something something</font>

834
00:33:06,780 --> 00:33:10,350
<font color="#CCCCCC">very indicated for continuous use of</font>

835
00:33:09,900 --> 00:33:13,440
code

836
00:33:10,350 --> 00:33:15,178
someone might might copy from from Stack

837
00:33:13,440 --> 00:33:20,010
Overflow or<font color="#CCCCCC"> might copy from from</font>

838
00:33:15,179 --> 00:33:22,320
repositories and but the the users<font color="#E5E5E5"> of</font>

839
00:33:20,010 --> 00:33:24,210
wrong<font color="#E5E5E5"> language within binaries it's</font>

840
00:33:22,320 --> 00:33:26,010
usually something that<font color="#E5E5E5"> one doesn't</font><font color="#CCCCCC"> do</font>

841
00:33:24,210 --> 00:33:27,870
twice if someone makes a type or<font color="#E5E5E5"> a</font>

842
00:33:26,010 --> 00:33:30,059
mistake within<font color="#E5E5E5"> the string he doesn't</font>

843
00:33:27,870 --> 00:33:34,229
always do that<font color="#E5E5E5"> usually makes</font><font color="#CCCCCC"> these</font>

844
00:33:30,059 --> 00:33:35,970
mistakes<font color="#E5E5E5"> in different forms so typos</font>

845
00:33:34,230 --> 00:33:38,730
within strings help you to actually<font color="#E5E5E5"> link</font>

846
00:33:35,970 --> 00:33:41,429
code repositories<font color="#CCCCCC"> or you reuse code</font>

847
00:33:38,730 --> 00:33:44,789
within binaries<font color="#E5E5E5"> a lot better than</font><font color="#CCCCCC"> normal</font>

848
00:33:41,429 --> 00:33:46,950
strings the other side the API is I'm

849
00:33:44,789 --> 00:33:47,220
not<font color="#CCCCCC"> sure you</font><font color="#E5E5E5"> can read that I don't think</font>

850
00:33:46,950 --> 00:33:48,840
so

851
00:33:47,220 --> 00:33:50,640
anyway<font color="#E5E5E5"> that's a list of symbols that</font>

852
00:33:48,840 --> 00:33:53,689
<font color="#CCCCCC">Rodari parsed</font><font color="#E5E5E5"> out of one of the binaries</font>

853
00:33:50,640 --> 00:33:56,880
so<font color="#E5E5E5"> you can see here on the right side</font>

854
00:33:53,690 --> 00:33:59,280
<font color="#E5E5E5">for example the name of the DLLs or</font><font color="#CCCCCC"> the</font>

855
00:33:56,880 --> 00:34:03,000
libraries<font color="#E5E5E5"> that contain the symbol and</font>

856
00:33:59,280 --> 00:34:05,100
the<font color="#CCCCCC"> actual symbol</font><font color="#E5E5E5"> name</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> my project</font><font color="#CCCCCC"> I</font>

857
00:34:03,000 --> 00:34:06,809
only used the<font color="#CCCCCC"> symbol name</font><font color="#E5E5E5"> but I planned</font>

858
00:34:05,100 --> 00:34:09,509
in the<font color="#CCCCCC"> future to also use</font><font color="#E5E5E5"> the library</font>

859
00:34:06,809 --> 00:34:10,918
name to try gather statistics about

860
00:34:09,510 --> 00:34:13,619
libraries that are<font color="#E5E5E5"> being used within</font>

861
00:34:10,918 --> 00:34:15,929
binaries<font color="#E5E5E5"> and the actual symbols being</font>

862
00:34:13,619 --> 00:34:18,450
referenced like how much usage I can

863
00:34:15,929 --> 00:34:21,780
find a<font color="#CCCCCC"> specific library</font><font color="#E5E5E5"> and so on and so</font>

864
00:34:18,449 --> 00:34:24,138
forth<font color="#E5E5E5"> but here on the right side you</font><font color="#CCCCCC"> can</font>

865
00:34:21,780 --> 00:34:26,820
see<font color="#E5E5E5"> the addresses that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> used for</font>

866
00:34:24,139 --> 00:34:29,580
putting<font color="#CCCCCC"> these cross-references into</font>

867
00:34:26,820 --> 00:34:32,060
context<font color="#E5E5E5"> with nodes a problem here</font><font color="#CCCCCC"> as</font>

868
00:34:29,580 --> 00:34:36,060
mentioned before<font color="#CCCCCC"> indirect calls</font>

869
00:34:32,060 --> 00:34:37,739
thankfully<font color="#CCCCCC"> radar it finds symbols also</font>

870
00:34:36,060 --> 00:34:39,779
<font color="#E5E5E5">when they were used as a data reference</font>

871
00:34:37,739 --> 00:34:43,109
<font color="#E5E5E5">when there are for example loaded into a</font>

872
00:34:39,780 --> 00:34:44,609
a register to<font color="#CCCCCC"> be used later</font><font color="#E5E5E5"> on and I</font>

873
00:34:43,109 --> 00:34:47,129
still<font color="#E5E5E5"> had to</font><font color="#CCCCCC"> go on and follow these</font>

874
00:34:44,609 --> 00:34:50,250
these registers within<font color="#E5E5E5"> the functions to</font>

875
00:34:47,129 --> 00:34:52,830
find<font color="#E5E5E5"> references to be specific symbols</font>

876
00:34:50,250 --> 00:34:56,639
that<font color="#E5E5E5"> I was searching for</font><font color="#CCCCCC"> that wasn't all</font>

877
00:34:52,830 --> 00:35:00,930
that<font color="#E5E5E5"> simple in the end what I also did</font>

878
00:34:56,639 --> 00:35:02,400
<font color="#CCCCCC">was tank pruning</font><font color="#E5E5E5"> which refers to thanks</font>

879
00:35:00,930 --> 00:35:04,859
<font color="#CCCCCC">to their frequently generated by</font>

880
00:35:02,400 --> 00:35:06,359
compilers<font color="#E5E5E5"> which I do admit that</font>

881
00:35:04,859 --> 00:35:08,259
<font color="#E5E5E5">something</font><font color="#CCCCCC"> that either</font><font color="#E5E5E5"> Pro is fairly good</font>

882
00:35:06,359 --> 00:35:12,210
in<font color="#E5E5E5"> doing so if you open a binary</font>

883
00:35:08,260 --> 00:35:15,100
with an Ida Pro you will<font color="#E5E5E5"> see marked</font>

884
00:35:12,210 --> 00:35:17,410
references to<font color="#E5E5E5"> to imported symbols which</font>

885
00:35:15,100 --> 00:35:19,120
<font color="#E5E5E5">are actually</font><font color="#CCCCCC"> thunks which in this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> M</font>

886
00:35:17,410 --> 00:35:20,470
you<font color="#E5E5E5"> can see is very small functions that</font>

887
00:35:19,120 --> 00:35:23,049
have<font color="#E5E5E5"> nothing but the jump to a specific</font>

888
00:35:20,470 --> 00:35:24,790
import<font color="#E5E5E5"> and this is something that</font><font color="#CCCCCC"> rather</font>

889
00:35:23,050 --> 00:35:26,950
<font color="#E5E5E5">I didn't do itself but that was also</font>

890
00:35:24,790 --> 00:35:28,779
<font color="#E5E5E5">very interesting project to fix these</font>

891
00:35:26,950 --> 00:35:30,640
<font color="#CCCCCC">thanks and I would</font><font color="#E5E5E5"> recommend</font><font color="#CCCCCC"> you're</font>

892
00:35:28,780 --> 00:35:32,980
looking into<font color="#E5E5E5"> compilers it is a very</font>

893
00:35:30,640 --> 00:35:34,980
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> topic</font><font color="#E5E5E5"> and how thanks get</font>

894
00:35:32,980 --> 00:35:38,050
into binaries and how they are used from

895
00:35:34,980 --> 00:35:40,000
<font color="#E5E5E5">compiled binaries and also as mentioned</font>

896
00:35:38,050 --> 00:35:42,390
<font color="#E5E5E5">before dynamic loading is a process</font><font color="#CCCCCC"> a</font>

897
00:35:40,000 --> 00:35:45,760
problem<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> something I haven't</font>

898
00:35:42,390 --> 00:35:46,990
haven't<font color="#CCCCCC"> even nearly</font><font color="#E5E5E5"> fixed now when API</font>

899
00:35:45,760 --> 00:35:48,730
is a<font color="#CCCCCC"> law that dynamically</font><font color="#E5E5E5"> you usually</font>

900
00:35:46,990 --> 00:35:51,189
see a call to<font color="#E5E5E5"> get proc</font><font color="#CCCCCC"> address or maybe</font>

901
00:35:48,730 --> 00:35:52,960
not<font color="#E5E5E5"> even that</font><font color="#CCCCCC"> and afterwards the offset</font>

902
00:35:51,190 --> 00:35:54,430
of<font color="#CCCCCC"> the API</font><font color="#E5E5E5"> that's loaded dynamically is</font>

903
00:35:52,960 --> 00:35:56,590
stored within the binary<font color="#CCCCCC"> and can be</font>

904
00:35:54,430 --> 00:36:00,069
referenced<font color="#CCCCCC"> multiple times so for example</font>

905
00:35:56,590 --> 00:36:01,900
you could dynamically load your crypto

906
00:36:00,070 --> 00:36:04,450
API functions<font color="#E5E5E5"> and then use them within</font>

907
00:36:01,900 --> 00:36:07,270
<font color="#E5E5E5">the binary and I would not automatically</font>

908
00:36:04,450 --> 00:36:10,180
be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to follow these calls but</font><font color="#CCCCCC"> I'm</font>

909
00:36:07,270 --> 00:36:11,500
still<font color="#E5E5E5"> working on that because as you saw</font>

910
00:36:10,180 --> 00:36:14,350
before there's lots of strings within

911
00:36:11,500 --> 00:36:17,530
binaries and if I can<font color="#E5E5E5"> manage</font><font color="#CCCCCC"> to find</font>

912
00:36:14,350 --> 00:36:20,230
strings<font color="#CCCCCC"> being used within the get proc</font>

913
00:36:17,530 --> 00:36:23,470
address calls<font color="#E5E5E5"> within the binary</font><font color="#CCCCCC"> I might</font>

914
00:36:20,230 --> 00:36:26,500
be able<font color="#E5E5E5"> to link the the</font><font color="#CCCCCC"> output of</font><font color="#E5E5E5"> that</font>

915
00:36:23,470 --> 00:36:28,089
of these API is later<font color="#E5E5E5"> on either</font><font color="#CCCCCC"> to</font>

916
00:36:26,500 --> 00:36:30,820
global variables or to memory structures

917
00:36:28,090 --> 00:36:32,380
that<font color="#E5E5E5"> I can possibly link to function</font>

918
00:36:30,820 --> 00:36:35,740
<font color="#CCCCCC">notes so this is</font><font color="#E5E5E5"> something I'm still</font>

919
00:36:32,380 --> 00:36:38,530
<font color="#E5E5E5">working on</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> mentioned before callbacks</font>

920
00:36:35,740 --> 00:36:41,879
and<font color="#CCCCCC"> header functions</font><font color="#E5E5E5"> that's a problem</font>

921
00:36:38,530 --> 00:36:44,710
that<font color="#CCCCCC"> I started to deal with already</font>

922
00:36:41,880 --> 00:36:47,350
<font color="#E5E5E5">there's two approaches to find handler</font>

923
00:36:44,710 --> 00:36:48,970
functions<font color="#E5E5E5"> I primarily did this for</font>

924
00:36:47,350 --> 00:36:50,920
create thread and<font color="#E5E5E5"> set</font><font color="#CCCCCC"> Windows hoecakes</font>

925
00:36:48,970 --> 00:36:52,779
because<font color="#E5E5E5"> that's the the functions that</font>

926
00:36:50,920 --> 00:36:55,660
<font color="#CCCCCC">interest</font><font color="#E5E5E5"> me most in the context of</font>

927
00:36:52,780 --> 00:36:57,970
<font color="#CCCCCC">malware</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> there I</font><font color="#E5E5E5"> just check whether I</font>

928
00:36:55,660 --> 00:37:01,140
<font color="#E5E5E5">can find a push instruction</font><font color="#CCCCCC"> before these</font>

929
00:36:57,970 --> 00:37:04,930
API is<font color="#CCCCCC"> that references</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> a function</font>

930
00:37:01,140 --> 00:37:08,109
this<font color="#CCCCCC"> is a little bit tricky to to get</font>

931
00:37:04,930 --> 00:37:10,330
the<font color="#E5E5E5"> actual API is for specific functions</font>

932
00:37:08,110 --> 00:37:11,860
my luck there<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> most windows</font><font color="#CCCCCC"> api</font>

933
00:37:10,330 --> 00:37:13,810
is follow the same calling declaration

934
00:37:11,860 --> 00:37:16,030
so it's rather<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> find the push</font>

935
00:37:13,810 --> 00:37:19,060
instructions but the problem in<font color="#CCCCCC"> finding</font>

936
00:37:16,030 --> 00:37:21,330
all the other arguments<font color="#CCCCCC"> being used</font>

937
00:37:19,060 --> 00:37:24,720
within one specific API is that<font color="#CCCCCC"> the</font>

938
00:37:21,330 --> 00:37:27,240
<font color="#E5E5E5">the function calls</font><font color="#CCCCCC"> right in</font><font color="#E5E5E5"> between the</font>

939
00:37:24,720 --> 00:37:30,209
pushing operations<font color="#CCCCCC"> it</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> see fairly</font>

940
00:37:27,240 --> 00:37:32,009
<font color="#E5E5E5">often if for example a</font><font color="#CCCCCC"> window handle to</font>

941
00:37:30,210 --> 00:37:34,440
the to the current<font color="#CCCCCC"> process or something</font>

942
00:37:32,010 --> 00:37:39,270
<font color="#E5E5E5">similar is used by the final</font><font color="#CCCCCC"> API</font><font color="#E5E5E5"> that</font>

943
00:37:34,440 --> 00:37:41,430
<font color="#E5E5E5">you see the function</font><font color="#CCCCCC"> call to to the API</font>

944
00:37:39,270 --> 00:37:45,810
that<font color="#E5E5E5"> retrieves the tunnel within the</font>

945
00:37:41,430 --> 00:37:49,140
push operations<font color="#CCCCCC"> before your API so given</font>

946
00:37:45,810 --> 00:37:51,660
a problem<font color="#E5E5E5"> I cannot just get all the all</font>

947
00:37:49,140 --> 00:37:53,400
the parameters but it went<font color="#CCCCCC"> away to</font>

948
00:37:51,660 --> 00:37:55,140
search for Porsche instructions with

949
00:37:53,400 --> 00:37:58,170
function references<font color="#E5E5E5"> that's a little bit</font>

950
00:37:55,140 --> 00:38:00,660
of a workaround<font color="#CCCCCC"> on the other side what</font>

951
00:37:58,170 --> 00:38:02,280
that<font color="#E5E5E5"> child was searching for notes</font>

952
00:38:00,660 --> 00:38:04,170
within<font color="#E5E5E5"> my graphs that didn't have any</font>

953
00:38:02,280 --> 00:38:08,310
incoming connection like any<font color="#E5E5E5"> incoming</font>

954
00:38:04,170 --> 00:38:10,710
edge<font color="#E5E5E5"> and consider these notes handler</font>

955
00:38:08,310 --> 00:38:12,390
functions or<font color="#E5E5E5"> offsets are being dealt</font>

956
00:38:10,710 --> 00:38:14,070
<font color="#CCCCCC">with</font><font color="#E5E5E5"> in different parts of the binaries</font>

957
00:38:12,390 --> 00:38:16,500
<font color="#E5E5E5">then I just went to search for cross</font>

958
00:38:14,070 --> 00:38:18,420
references<font color="#E5E5E5"> like put them up from the</font>

959
00:38:16,500 --> 00:38:20,790
<font color="#E5E5E5">node up to see whether these offsets</font>

960
00:38:18,420 --> 00:38:24,540
were referenced within<font color="#E5E5E5"> the binary and</font>

961
00:38:20,790 --> 00:38:28,170
then could add this to my graph<font color="#E5E5E5"> this is</font>

962
00:38:24,540 --> 00:38:29,340
all a bit<font color="#E5E5E5"> a bit</font><font color="#CCCCCC"> of an approximation to</font>

963
00:38:28,170 --> 00:38:31,830
actually get these<font color="#CCCCCC"> nodes this</font><font color="#E5E5E5"> is</font>

964
00:38:29,340 --> 00:38:34,620
certainly<font color="#E5E5E5"> not</font><font color="#CCCCCC"> the most complete</font>

965
00:38:31,830 --> 00:38:37,620
technique to find to fit callbacks or

966
00:38:34,620 --> 00:38:40,710
handler functions into my graph but for

967
00:38:37,620 --> 00:38:42,750
the for the<font color="#CCCCCC"> purposes that I did for the</font>

968
00:38:40,710 --> 00:38:46,650
<font color="#CCCCCC">tests that I ran it worked considerably</font>

969
00:38:42,750 --> 00:38:48,300
well and the last<font color="#E5E5E5"> problem that I wanted</font>

970
00:38:46,650 --> 00:38:52,140
to<font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about or</font><font color="#E5E5E5"> actually not a problem</font>

971
00:38:48,300 --> 00:38:55,350
<font color="#CCCCCC">but</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of a feature is that compiler</font>

972
00:38:52,140 --> 00:38:57,060
settings and optimizer optimizer magic

973
00:38:55,350 --> 00:39:00,120
within binaries<font color="#CCCCCC"> it's something</font><font color="#E5E5E5"> that does</font>

974
00:38:57,060 --> 00:39:02,340
not really<font color="#E5E5E5"> does not really affect my my</font>

975
00:39:00,120 --> 00:39:04,200
work<font color="#E5E5E5"> so with the with the graphs I</font>

976
00:39:02,340 --> 00:39:06,060
created I follow the objectives that<font color="#CCCCCC"> I</font>

977
00:39:04,200 --> 00:39:08,370
did not want much data<font color="#E5E5E5"> I wanted like</font>

978
00:39:06,060 --> 00:39:09,630
small data<font color="#CCCCCC"> I wanted</font><font color="#E5E5E5"> to collect as little</font>

979
00:39:08,370 --> 00:39:11,910
data as<font color="#CCCCCC"> possible with as much</font>

980
00:39:09,630 --> 00:39:14,460
information<font color="#E5E5E5"> as possible that's why I</font>

981
00:39:11,910 --> 00:39:16,980
only picked API sand and strings as the

982
00:39:14,460 --> 00:39:18,900
the objects to extract because<font color="#E5E5E5"> these for</font>

983
00:39:16,980 --> 00:39:20,460
me contain<font color="#E5E5E5"> a lot of information are easy</font>

984
00:39:18,900 --> 00:39:25,890
to<font color="#CCCCCC"> extract and there are</font><font color="#E5E5E5"> little data to</font>

985
00:39:20,460 --> 00:39:27,060
to<font color="#CCCCCC"> store then I mentioned that the</font>

986
00:39:25,890 --> 00:39:30,779
problem<font color="#CCCCCC"> - a friend of</font><font color="#E5E5E5"> mine</font><font color="#CCCCCC"> whose</font>

987
00:39:27,060 --> 00:39:34,620
developer and he was<font color="#E5E5E5"> offended to create</font>

988
00:39:30,780 --> 00:39:36,510
some some binaries<font color="#CCCCCC"> for</font><font color="#E5E5E5"> me so we used an</font>

989
00:39:34,620 --> 00:39:39,230
example code from a mustiness compiled

990
00:39:36,510 --> 00:39:44,640
it in different<font color="#E5E5E5"> ways and here is the</font>

991
00:39:39,230 --> 00:39:46,380
<font color="#E5E5E5">output from the graph analysis tool so</font>

992
00:39:44,640 --> 00:39:48,839
suddenly<font color="#CCCCCC"> yes certainly</font><font color="#E5E5E5"> not he sent the</font>

993
00:39:46,380 --> 00:39:51,270
binaries to me and gave them specific

994
00:39:48,840 --> 00:39:55,140
names but I have absolutely<font color="#E5E5E5"> no idea what</font>

995
00:39:51,270 --> 00:39:57,900
<font color="#CCCCCC">the exact settings of his compilers were</font>

996
00:39:55,140 --> 00:39:59,730
<font color="#E5E5E5">so one was tech default which I guess is</font>

997
00:39:57,900 --> 00:40:02,540
just<font color="#E5E5E5"> when you do nothing on the most</font>

998
00:39:59,730 --> 00:40:06,540
modern visual<font color="#E5E5E5"> studio version this is the</font>

999
00:40:02,540 --> 00:40:08,040
top left graph<font color="#CCCCCC"> graphic and the others</font>

1000
00:40:06,540 --> 00:40:09,720
are either<font color="#E5E5E5"> fully optimized site</font>

1001
00:40:08,040 --> 00:40:12,450
optimized or created with different

1002
00:40:09,720 --> 00:40:16,350
<font color="#CCCCCC">versions officials to you the one</font><font color="#E5E5E5"> from</font>

1003
00:40:12,450 --> 00:40:17,759
2012 2013 and 2015<font color="#E5E5E5"> in debug</font><font color="#CCCCCC"> mode if</font><font color="#E5E5E5"> you</font>

1004
00:40:16,350 --> 00:40:19,410
look at<font color="#E5E5E5"> these graphs you</font><font color="#CCCCCC"> can always find</font>

1005
00:40:17,760 --> 00:40:21,450
this big graph with like a lot of

1006
00:40:19,410 --> 00:40:23,160
content which is somewhere somewhere

1007
00:40:21,450 --> 00:40:24,509
<font color="#E5E5E5">central and that's the actual function</font>

1008
00:40:23,160 --> 00:40:26,460
that<font color="#E5E5E5"> you compiled so it's really just</font>

1009
00:40:24,510 --> 00:40:28,830
<font color="#E5E5E5">one function</font><font color="#CCCCCC"> that collects data</font><font color="#E5E5E5"> about</font>

1010
00:40:26,460 --> 00:40:31,080
the system<font color="#CCCCCC"> and printed that on the on</font>

1011
00:40:28,830 --> 00:40:33,299
the command line<font color="#E5E5E5"> that's the thing</font><font color="#CCCCCC"> that I</font>

1012
00:40:31,080 --> 00:40:35,130
<font color="#CCCCCC">would be</font><font color="#E5E5E5"> interested in if I would if I</font>

1013
00:40:33,300 --> 00:40:36,360
would<font color="#E5E5E5"> want to analyze malware like the</font>

1014
00:40:35,130 --> 00:40:38,480
biggest nodes with<font color="#E5E5E5"> the most connections</font>

1015
00:40:36,360 --> 00:40:40,950
<font color="#E5E5E5">that contains the</font><font color="#CCCCCC"> most information</font>

1016
00:40:38,480 --> 00:40:43,260
<font color="#E5E5E5">interestingly the other nodes they</font>

1017
00:40:40,950 --> 00:40:45,180
consider are actually compiled generated

1018
00:40:43,260 --> 00:40:49,140
<font color="#E5E5E5">until it really adds information to the</font>

1019
00:40:45,180 --> 00:40:53,520
analysis process<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> the whole point</font>

1020
00:40:49,140 --> 00:40:55,500
of the<font color="#CCCCCC"> project</font><font color="#E5E5E5"> I I think in the future</font>

1021
00:40:53,520 --> 00:40:59,190
<font color="#E5E5E5">about</font><font color="#CCCCCC"> reducing the graphs that I</font>

1022
00:40:55,500 --> 00:41:01,470
produced<font color="#E5E5E5"> to only show the nodes or the</font>

1023
00:40:59,190 --> 00:41:05,240
<font color="#E5E5E5">the items within the graph</font><font color="#CCCCCC"> that I</font>

1024
00:41:01,470 --> 00:41:08,339
consider holding<font color="#CCCCCC"> the most</font><font color="#E5E5E5"> information</font>

1025
00:41:05,240 --> 00:41:11,910
<font color="#E5E5E5">all</font><font color="#CCCCCC"> right this much</font><font color="#E5E5E5"> about the graphs</font>

1026
00:41:08,340 --> 00:41:13,740
<font color="#CCCCCC">where</font><font color="#E5E5E5"> is the actual stuff</font><font color="#CCCCCC"> so as you've</font>

1027
00:41:11,910 --> 00:41:17,640
seen<font color="#E5E5E5"> what I tried to produce for graph</font>

1028
00:41:13,740 --> 00:41:18,930
visualizations<font color="#E5E5E5"> but you you might</font>

1029
00:41:17,640 --> 00:41:20,520
understand that<font color="#CCCCCC"> this is not always</font><font color="#E5E5E5"> the</font>

1030
00:41:18,930 --> 00:41:22,350
right way to go<font color="#CCCCCC"> like there</font><font color="#E5E5E5"> is complex</font>

1031
00:41:20,520 --> 00:41:24,509
binaries there's big binaries<font color="#E5E5E5"> and they</font>

1032
00:41:22,350 --> 00:41:26,279
create ugly graphs<font color="#E5E5E5"> so there needed to be</font>

1033
00:41:24,510 --> 00:41:28,560
<font color="#E5E5E5">different ways to gather information</font>

1034
00:41:26,280 --> 00:41:31,200
<font color="#E5E5E5">about</font><font color="#CCCCCC"> the actual binary</font><font color="#E5E5E5"> that is human</font>

1035
00:41:28,560 --> 00:41:32,520
readable<font color="#CCCCCC"> and understandable</font><font color="#E5E5E5"> so I started</font>

1036
00:41:31,200 --> 00:41:34,859
thinking<font color="#E5E5E5"> about extracting behavior</font>

1037
00:41:32,520 --> 00:41:37,050
indicators from binaries<font color="#E5E5E5"> which for me I</font>

1038
00:41:34,860 --> 00:41:38,610
worked<font color="#CCCCCC"> before the antivirus and</font>

1039
00:41:37,050 --> 00:41:40,950
extracting indicators<font color="#CCCCCC"> from binaries</font>

1040
00:41:38,610 --> 00:41:42,270
sounds like like magic stuff that

1041
00:41:40,950 --> 00:41:44,700
doesn't<font color="#E5E5E5"> work on half</font>

1042
00:41:42,270 --> 00:41:46,350
<font color="#CCCCCC">de binary's but I'll explain more about</font>

1043
00:41:44,700 --> 00:41:48,029
<font color="#E5E5E5">that in a bit</font>

1044
00:41:46,350 --> 00:41:50,430
<font color="#E5E5E5">what I also tried was extracting</font><font color="#CCCCCC"> metrics</font>

1045
00:41:48,030 --> 00:41:52,020
<font color="#CCCCCC">I said before</font><font color="#E5E5E5"> I do not want to do</font>

1046
00:41:50,430 --> 00:41:54,839
machine learning<font color="#CCCCCC"> I don't want to get any</font>

1047
00:41:52,020 --> 00:41:56,520
<font color="#CCCCCC">colors but I wanted numeric values that</font>

1048
00:41:54,840 --> 00:41:59,130
<font color="#E5E5E5">I could easily store that would help me</font>

1049
00:41:56,520 --> 00:42:02,610
evaluate the<font color="#CCCCCC"> the binary in front of me</font>

1050
00:41:59,130 --> 00:42:04,830
there's a<font color="#E5E5E5"> couple of of indicators that</font>

1051
00:42:02,610 --> 00:42:07,140
<font color="#E5E5E5">you can can extract</font><font color="#CCCCCC"> from the graphs</font>

1052
00:42:04,830 --> 00:42:08,850
today<font color="#E5E5E5"> that I created</font><font color="#CCCCCC"> and I</font><font color="#E5E5E5"> will show you</font>

1053
00:42:07,140 --> 00:42:11,310
<font color="#E5E5E5">how these are useful through</font><font color="#CCCCCC"> for example</font>

1054
00:42:08,850 --> 00:42:15,210
<font color="#CCCCCC">find</font><font color="#E5E5E5"> Packers or find dynamic API loading</font>

1055
00:42:11,310 --> 00:42:18,900
or find binaries<font color="#CCCCCC"> that are too too</font>

1056
00:42:15,210 --> 00:42:20,760
abnormal to be good and<font color="#CCCCCC"> then Deanna</font><font color="#E5E5E5"> will</font>

1057
00:42:18,900 --> 00:42:22,020
be<font color="#E5E5E5"> talking about a bit graph database</font>

1058
00:42:20,760 --> 00:42:25,980
<font color="#CCCCCC">that I mentioned before</font>

1059
00:42:22,020 --> 00:42:27,750
so again let's get back to the<font color="#CCCCCC"> Melbourne</font>

1060
00:42:25,980 --> 00:42:28,200
<font color="#E5E5E5">or to the graph that I talked about</font>

1061
00:42:27,750 --> 00:42:31,230
<font color="#E5E5E5">before</font>

1062
00:42:28,200 --> 00:42:32,609
<font color="#E5E5E5">his name is</font><font color="#CCCCCC"> wintry -</font><font color="#E5E5E5"> red zip or actually</font>

1063
00:42:31,230 --> 00:42:34,680
I<font color="#CCCCCC"> don't really know what its name is but</font>

1064
00:42:32,610 --> 00:42:36,240
that's what Microsoft calls<font color="#E5E5E5"> it it's a</font>

1065
00:42:34,680 --> 00:42:38,129
piece of targeted malware<font color="#E5E5E5"> it comes</font>

1066
00:42:36,240 --> 00:42:40,109
unpacked<font color="#E5E5E5"> and</font><font color="#CCCCCC"> strings are</font><font color="#E5E5E5"> all in</font>

1067
00:42:38,130 --> 00:42:44,280
<font color="#CCCCCC">clear-text</font><font color="#E5E5E5"> it does not do dynamic API</font>

1068
00:42:40,110 --> 00:42:47,100
loading and the binary itself<font color="#CCCCCC"> I grabbed</font>

1069
00:42:44,280 --> 00:42:49,830
from<font color="#E5E5E5"> a repository of targeted malware</font>

1070
00:42:47,100 --> 00:42:53,220
<font color="#E5E5E5">this repository is hosted by citizen lab</font>

1071
00:42:49,830 --> 00:42:55,259
they created<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> a list</font><font color="#E5E5E5"> of file</font>

1072
00:42:53,220 --> 00:42:58,439
indicators which contains a long list of

1073
00:42:55,260 --> 00:43:00,920
file hashes<font color="#CCCCCC"> which all refer</font><font color="#E5E5E5"> to binaries</font>

1074
00:42:58,440 --> 00:43:03,570
<font color="#CCCCCC">that he found within targeted attacks</font>

1075
00:43:00,920 --> 00:43:05,130
this<font color="#E5E5E5"> is a very interesting repository as</font>

1076
00:43:03,570 --> 00:43:07,200
you have the<font color="#E5E5E5"> guarantee that all of the</font>

1077
00:43:05,130 --> 00:43:12,270
binaries are targeted or have been used

1078
00:43:07,200 --> 00:43:13,980
in targeted<font color="#E5E5E5"> context about</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> dataset</font>

1079
00:43:12,270 --> 00:43:15,540
<font color="#E5E5E5">itself would</font><font color="#CCCCCC"> have found out</font><font color="#E5E5E5"> is that a</font>

1080
00:43:13,980 --> 00:43:17,820
<font color="#E5E5E5">lot of the binaries</font><font color="#CCCCCC"> in there are</font><font color="#E5E5E5"> rather</font>

1081
00:43:15,540 --> 00:43:19,500
<font color="#E5E5E5">small and a lot of</font><font color="#CCCCCC"> them have the</font>

1082
00:43:17,820 --> 00:43:21,720
intention<font color="#CCCCCC"> to download second-stage</font>

1083
00:43:19,500 --> 00:43:24,990
malware which is fairly common<font color="#CCCCCC"> in apt</font>

1084
00:43:21,720 --> 00:43:26,759
contexts and<font color="#E5E5E5"> it doesn't actually help in</font>

1085
00:43:24,990 --> 00:43:28,109
analysis<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> out that your binary is</font>

1086
00:43:26,760 --> 00:43:30,510
actually not the thing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you wanted</font>

1087
00:43:28,110 --> 00:43:31,650
to see but<font color="#E5E5E5"> still from my purpose they</font>

1088
00:43:30,510 --> 00:43:34,260
were perfect because they were rather

1089
00:43:31,650 --> 00:43:36,150
small that might also not surprise you

1090
00:43:34,260 --> 00:43:38,750
that this approach<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I went has a</font>

1091
00:43:36,150 --> 00:43:43,200
problem with fairly<font color="#E5E5E5"> large binaries so</font>

1092
00:43:38,750 --> 00:43:44,910
binaries that<font color="#CCCCCC"> are bigger than 500 or</font><font color="#E5E5E5"> say</font>

1093
00:43:43,200 --> 00:43:47,759
binaries<font color="#CCCCCC"> that are bigger than 900</font>

1094
00:43:44,910 --> 00:43:49,589
kilobytes or binaries that<font color="#CCCCCC"> are highly</font>

1095
00:43:47,760 --> 00:43:51,540
interconnected like that have very

1096
00:43:49,590 --> 00:43:54,000
complex<font color="#E5E5E5"> graph structures take a long</font>

1097
00:43:51,540 --> 00:43:54,509
time<font color="#E5E5E5"> to parse with a year project</font><font color="#CCCCCC"> Rendy</font>

1098
00:43:54,000 --> 00:43:56,400
have

1099
00:43:54,510 --> 00:43:58,470
well they do<font color="#CCCCCC"> also have</font><font color="#E5E5E5"> the plan to make</font>

1100
00:43:56,400 --> 00:44:00,450
the code more performant and to fix

1101
00:43:58,470 --> 00:44:01,830
things and<font color="#E5E5E5"> then you know at some</font><font color="#CCCCCC"> point</font>

1102
00:44:00,450 --> 00:44:05,759
<font color="#E5E5E5">in the future it will be really useful</font>

1103
00:44:01,830 --> 00:44:08,400
<font color="#E5E5E5">tool anyway let's look a bit closer at</font>

1104
00:44:05,760 --> 00:44:12,570
the graph<font color="#E5E5E5"> so um again not</font><font color="#CCCCCC"> sure you can</font>

1105
00:44:08,400 --> 00:44:15,780
read that I might be able to<font color="#E5E5E5"> help you</font>

1106
00:44:12,570 --> 00:44:18,330
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is a attacted</font><font color="#E5E5E5"> callback it's</font>

1107
00:44:15,780 --> 00:44:20,070
actually a thread handler function which

1108
00:44:18,330 --> 00:44:22,020
if you<font color="#E5E5E5"> look at the graph is the big</font>

1109
00:44:20,070 --> 00:44:24,180
orange<font color="#E5E5E5"> node or the big green node on the</font>

1110
00:44:22,020 --> 00:44:26,400
<font color="#E5E5E5">left side this is one of the handler</font>

1111
00:44:24,180 --> 00:44:29,730
functions<font color="#E5E5E5"> which as you can see contains</font>

1112
00:44:26,400 --> 00:44:32,100
<font color="#E5E5E5">a lot of CNC commands</font><font color="#CCCCCC"> you for example</font>

1113
00:44:29,730 --> 00:44:34,980
have<font color="#CCCCCC"> C and E enum directory and cyndi</font>

1114
00:44:32,100 --> 00:44:38,100
file upload and<font color="#CCCCCC"> cyndi file delete and so</font>

1115
00:44:34,980 --> 00:44:40,680
on and so forth<font color="#E5E5E5"> so this is probably the</font>

1116
00:44:38,100 --> 00:44:42,420
the parsing functions<font color="#E5E5E5"> pricing function</font>

1117
00:44:40,680 --> 00:44:45,410
of<font color="#CCCCCC"> C and C commands one could consider</font>

1118
00:44:42,420 --> 00:44:47,660
that<font color="#CCCCCC"> before that the</font><font color="#E5E5E5"> binary was</font>

1119
00:44:45,410 --> 00:44:49,410
communicating<font color="#E5E5E5"> to the CNC server and</font>

1120
00:44:47,660 --> 00:44:52,440
receiving commands and this is the

1121
00:44:49,410 --> 00:44:53,839
<font color="#E5E5E5">function to parse the commands well as</font>

1122
00:44:52,440 --> 00:44:57,780
<font color="#E5E5E5">we can see in there is</font><font color="#CCCCCC"> this function</font>

1123
00:44:53,840 --> 00:45:00,150
<font color="#E5E5E5">it's one of the function</font><font color="#CCCCCC"> led</font><font color="#E5E5E5"> notes which</font>

1124
00:44:57,780 --> 00:45:02,250
collects information about<font color="#E5E5E5"> the infected</font>

1125
00:45:00,150 --> 00:45:03,990
machine like for<font color="#CCCCCC"> example the</font><font color="#E5E5E5"> computer</font>

1126
00:45:02,250 --> 00:45:06,870
<font color="#CCCCCC">named the installed operating</font><font color="#E5E5E5"> system</font>

1127
00:45:03,990 --> 00:45:12,089
version<font color="#CCCCCC"> D Drive</font><font color="#E5E5E5"> type the free disk space</font>

1128
00:45:06,870 --> 00:45:13,650
<font color="#CCCCCC">the description for the local central</font>

1129
00:45:12,090 --> 00:45:15,780
processor like you can see a lot of

1130
00:45:13,650 --> 00:45:19,890
<font color="#E5E5E5">information</font><font color="#CCCCCC"> that refers to the machine</font>

1131
00:45:15,780 --> 00:45:22,770
<font color="#E5E5E5">that was infected this is also one of</font>

1132
00:45:19,890 --> 00:45:24,779
<font color="#E5E5E5">the graphs the big graph on the right</font>

1133
00:45:22,770 --> 00:45:28,020
<font color="#E5E5E5">side on the right</font><font color="#CCCCCC"> bottom side which</font>

1134
00:45:24,780 --> 00:45:30,810
<font color="#E5E5E5">looks like an egg so these two</font><font color="#CCCCCC"> nodes are</font>

1135
00:45:28,020 --> 00:45:34,050
just an<font color="#E5E5E5"> example as for one what one</font>

1136
00:45:30,810 --> 00:45:36,060
could<font color="#E5E5E5"> see</font><font color="#CCCCCC"> within these these</font><font color="#E5E5E5"> bigger</font>

1137
00:45:34,050 --> 00:45:38,520
graphs<font color="#CCCCCC"> I have some more like for example</font>

1138
00:45:36,060 --> 00:45:43,200
<font color="#E5E5E5">one feature that aims to download the</font>

1139
00:45:38,520 --> 00:45:46,170
system<font color="#E5E5E5"> so the process tries to retrieve</font>

1140
00:45:43,200 --> 00:45:49,500
<font color="#E5E5E5">the shutdown privilege and then exit</font>

1141
00:45:46,170 --> 00:45:52,200
<font color="#CCCCCC">windows</font><font color="#E5E5E5"> we have</font><font color="#CCCCCC"> one function that</font><font color="#E5E5E5"> tries</font>

1142
00:45:49,500 --> 00:45:54,210
through<font color="#CCCCCC"> write to a log file block file</font>

1143
00:45:52,200 --> 00:45:58,049
is<font color="#CCCCCC"> located at C and scotlock todd lock</font>

1144
00:45:54,210 --> 00:46:00,480
like very<font color="#E5E5E5"> very stealthy and we have one</font>

1145
00:45:58,050 --> 00:46:03,330
<font color="#E5E5E5">node that shows domain that is</font><font color="#CCCCCC"> properly</font>

1146
00:46:00,480 --> 00:46:04,980
used<font color="#E5E5E5"> for a communication</font><font color="#CCCCCC"> to the c2</font>

1147
00:46:03,330 --> 00:46:06,180
server like you see<font color="#CCCCCC"> there's a lot</font><font color="#E5E5E5"> of</font>

1148
00:46:04,980 --> 00:46:07,860
<font color="#E5E5E5">notes actually contain a lot of</font>

1149
00:46:06,180 --> 00:46:09,690
<font color="#E5E5E5">information actually that help</font>

1150
00:46:07,860 --> 00:46:11,720
understanding<font color="#CCCCCC"> the binary but this is not</font>

1151
00:46:09,690 --> 00:46:15,810
really what I created the graph for

1152
00:46:11,720 --> 00:46:18,209
here's another<font color="#E5E5E5"> example which shows a bit</font>

1153
00:46:15,810 --> 00:46:21,540
better<font color="#E5E5E5"> of what</font><font color="#CCCCCC"> I intended to</font><font color="#E5E5E5"> do if you</font>

1154
00:46:18,210 --> 00:46:23,640
can maybe read that<font color="#CCCCCC"> here</font><font color="#E5E5E5"> it's an API</font>

1155
00:46:21,540 --> 00:46:28,259
it's called next<font color="#E5E5E5"> hook what the picture</font>

1156
00:46:23,640 --> 00:46:30,270
<font color="#CCCCCC">doesn't contain</font><font color="#E5E5E5"> further up there is said</font>

1157
00:46:28,260 --> 00:46:32,060
<font color="#E5E5E5">windows hook function which installs a</font>

1158
00:46:30,270 --> 00:46:34,740
hook on<font color="#E5E5E5"> the on the system and</font>

1159
00:46:32,060 --> 00:46:38,040
potentially installs a global hook which

1160
00:46:34,740 --> 00:46:39,919
<font color="#CCCCCC">is able</font><font color="#E5E5E5"> to control all the processes</font>

1161
00:46:38,040 --> 00:46:45,450
that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> running on the current desktop</font>

1162
00:46:39,920 --> 00:46:46,920
<font color="#E5E5E5">and with this it might try to lock</font>

1163
00:46:45,450 --> 00:46:49,200
keystrokes you can see they get key

1164
00:46:46,920 --> 00:46:51,900
<font color="#E5E5E5">state API and you can see more</font><font color="#CCCCCC"> of it so</font>

1165
00:46:49,200 --> 00:46:54,299
<font color="#CCCCCC">these functions that</font><font color="#E5E5E5"> are visibly</font>

1166
00:46:51,900 --> 00:46:56,160
connected<font color="#E5E5E5"> are probably part</font><font color="#CCCCCC"> of a</font><font color="#E5E5E5"> key</font>

1167
00:46:54,300 --> 00:46:57,690
<font color="#E5E5E5">logger component that</font><font color="#CCCCCC"> is hidden</font><font color="#E5E5E5"> within</font>

1168
00:46:56,160 --> 00:47:00,569
the binary<font color="#E5E5E5"> and tries</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> steal key locks</font>

1169
00:46:57,690 --> 00:47:04,050
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the application</font><font color="#E5E5E5"> applications that</font>

1170
00:47:00,570 --> 00:47:07,410
the user runs<font color="#E5E5E5"> I'm not sure</font><font color="#CCCCCC"> if that if</font>

1171
00:47:04,050 --> 00:47:10,200
you can read<font color="#E5E5E5"> that there's a other API</font>

1172
00:47:07,410 --> 00:47:13,370
<font color="#E5E5E5">somewhere in that graph which</font><font color="#CCCCCC"> retrieved</font>

1173
00:47:10,200 --> 00:47:16,710
the name of the desktop<font color="#E5E5E5"> window that is</font>

1174
00:47:13,370 --> 00:47:19,890
that<font color="#E5E5E5"> isn't the</font><font color="#CCCCCC"> focus so probably</font><font color="#E5E5E5"> this</font>

1175
00:47:16,710 --> 00:47:21,810
name is used<font color="#CCCCCC"> for structuring the the key</font>

1176
00:47:19,890 --> 00:47:26,640
<font color="#CCCCCC">log file where the</font><font color="#E5E5E5"> key locks are being</font>

1177
00:47:21,810 --> 00:47:28,950
stored<font color="#CCCCCC"> here is another example</font><font color="#E5E5E5"> of a</font>

1178
00:47:26,640 --> 00:47:31,410
graph which doesn't do a lot<font color="#E5E5E5"> but tries</font>

1179
00:47:28,950 --> 00:47:33,480
to find install antivirus software on

1180
00:47:31,410 --> 00:47:35,190
the machine<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can for example see a</font>

1181
00:47:33,480 --> 00:47:36,540
reference<font color="#CCCCCC"> to string</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> set the</font><font color="#E5E5E5"> reference</font>

1182
00:47:35,190 --> 00:47:39,060
to Kaspersky Lab<font color="#E5E5E5"> and right in the bottom</font>

1183
00:47:36,540 --> 00:47:42,480
<font color="#E5E5E5">you</font><font color="#CCCCCC"> find the reference to G data</font>

1184
00:47:39,060 --> 00:47:45,330
<font color="#CCCCCC">I was already happy to find out and one</font>

1185
00:47:42,480 --> 00:47:47,820
would<font color="#E5E5E5"> consider that this function the</font>

1186
00:47:45,330 --> 00:47:51,569
the big<font color="#E5E5E5"> egg and the left top left bottom</font>

1187
00:47:47,820 --> 00:47:53,250
of the graph<font color="#CCCCCC"> is used for for a function</font>

1188
00:47:51,570 --> 00:47:56,670
<font color="#CCCCCC">that tries to detect security software</font>

1189
00:47:53,250 --> 00:47:59,310
on the machine<font color="#E5E5E5"> so these are things that</font>

1190
00:47:56,670 --> 00:48:01,470
a human analysts can gather from<font color="#E5E5E5"> these</font>

1191
00:47:59,310 --> 00:48:03,330
graphs but looking at it<font color="#E5E5E5"> and paying</font>

1192
00:48:01,470 --> 00:48:04,919
close<font color="#CCCCCC"> attention to API since strings are</font>

1193
00:48:03,330 --> 00:48:07,710
being<font color="#E5E5E5"> called and by putting them in</font>

1194
00:48:04,920 --> 00:48:09,990
context<font color="#E5E5E5"> himself one thing</font><font color="#CCCCCC"> that I'm not</font>

1195
00:48:07,710 --> 00:48:12,510
<font color="#E5E5E5">able to do with these graphs is actually</font>

1196
00:48:09,990 --> 00:48:14,339
reconstruct<font color="#E5E5E5"> the structure of the</font>

1197
00:48:12,510 --> 00:48:16,020
<font color="#CCCCCC">function so I did not consider</font><font color="#E5E5E5"> basic</font>

1198
00:48:14,340 --> 00:48:17,850
blocks<font color="#E5E5E5"> and I did not consider</font><font color="#CCCCCC"> the actual</font>

1199
00:48:16,020 --> 00:48:19,740
content<font color="#E5E5E5"> of the function itself or the</font>

1200
00:48:17,850 --> 00:48:23,100
order in<font color="#CCCCCC"> which the API is are supposed</font>

1201
00:48:19,740 --> 00:48:25,560
to<font color="#E5E5E5"> be called this I left out because it</font>

1202
00:48:23,100 --> 00:48:28,190
would<font color="#E5E5E5"> be a lot</font><font color="#CCCCCC"> of data together and a</font>

1203
00:48:25,560 --> 00:48:32,299
lot bigger graphs<font color="#CCCCCC"> create which would</font>

1204
00:48:28,190 --> 00:48:35,340
deny me<font color="#CCCCCC"> the possibility of</font><font color="#E5E5E5"> visualization</font>

1205
00:48:32,300 --> 00:48:38,220
<font color="#CCCCCC">in practice I found it very useful to</font>

1206
00:48:35,340 --> 00:48:41,760
<font color="#CCCCCC">have the API is just listed and use my</font>

1207
00:48:38,220 --> 00:48:43,799
personal<font color="#E5E5E5"> knowledge to to gain in</font>

1208
00:48:41,760 --> 00:48:48,120
behaviors from<font color="#E5E5E5"> the lists that I found</font>

1209
00:48:43,800 --> 00:48:50,520
within these nodes in another approach

1210
00:48:48,120 --> 00:48:51,569
later<font color="#E5E5E5"> I try to automate exactly this to</font>

1211
00:48:50,520 --> 00:48:55,950
<font color="#E5E5E5">help in behavior</font>

1212
00:48:51,570 --> 00:48:58,710
extraction but here's a another<font color="#E5E5E5"> graph</font>

1213
00:48:55,950 --> 00:49:01,020
which does<font color="#E5E5E5"> not show all that much</font>

1214
00:48:58,710 --> 00:49:03,930
information<font color="#E5E5E5"> which is to visualize</font>

1215
00:49:01,020 --> 00:49:07,920
another<font color="#CCCCCC"> another</font><font color="#E5E5E5"> application</font><font color="#CCCCCC"> that the</font>

1216
00:49:03,930 --> 00:49:10,410
tool could<font color="#E5E5E5"> be</font><font color="#CCCCCC"> useful</font><font color="#E5E5E5"> to find binaries</font>

1217
00:49:07,920 --> 00:49:12,270
<font color="#CCCCCC">that look suspicious or look</font><font color="#E5E5E5"> runtime</font>

1218
00:49:10,410 --> 00:49:16,049
packed this binary for example contains

1219
00:49:12,270 --> 00:49:19,020
API is to download download<font color="#E5E5E5"> content from</font>

1220
00:49:16,050 --> 00:49:21,930
<font color="#E5E5E5">a remote</font><font color="#CCCCCC"> server and to</font><font color="#E5E5E5"> execute a binary</font>

1221
00:49:19,020 --> 00:49:24,060
which<font color="#E5E5E5"> although the graph doesn't show</font>

1222
00:49:21,930 --> 00:49:26,520
any connection with between a human

1223
00:49:24,060 --> 00:49:28,320
analyst could deduce<font color="#E5E5E5"> that this which</font>

1224
00:49:26,520 --> 00:49:32,880
<font color="#E5E5E5">also tries to download and execute the</font>

1225
00:49:28,320 --> 00:49:35,190
binary but as<font color="#E5E5E5"> mentioned these graphs</font>

1226
00:49:32,880 --> 00:49:37,170
potentially provide a holistic<font color="#E5E5E5"> view of</font>

1227
00:49:35,190 --> 00:49:39,390
the<font color="#CCCCCC"> the binary content but they still</font>

1228
00:49:37,170 --> 00:49:42,570
need a<font color="#E5E5E5"> human to actually understand what</font>

1229
00:49:39,390 --> 00:49:43,770
what is being shown<font color="#CCCCCC"> within</font><font color="#E5E5E5"> the graph and</font>

1230
00:49:42,570 --> 00:49:46,170
also<font color="#CCCCCC"> they are</font><font color="#E5E5E5"> not always feasible</font>

1231
00:49:43,770 --> 00:49:49,460
because<font color="#E5E5E5"> if you put like a serious</font>

1232
00:49:46,170 --> 00:49:53,670
application into this<font color="#E5E5E5"> graph algorithm</font>

1233
00:49:49,460 --> 00:49:55,230
<font color="#E5E5E5">with</font><font color="#CCCCCC"> dedicated</font><font color="#E5E5E5"> software developers</font><font color="#CCCCCC"> who</font>

1234
00:49:53,670 --> 00:49:57,630
knew how<font color="#E5E5E5"> to structure code you get</font>

1235
00:49:55,230 --> 00:49:58,980
graphs like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> um you probably</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see</font>

1236
00:49:57,630 --> 00:50:00,720
much there there's a lot of notes in

1237
00:49:58,980 --> 00:50:02,490
there you can still scroll in there and

1238
00:50:00,720 --> 00:50:04,799
see what what<font color="#E5E5E5"> they did the notes contain</font>

1239
00:50:02,490 --> 00:50:06,990
<font color="#E5E5E5">but human analyst has very big</font>

1240
00:50:04,800 --> 00:50:08,760
<font color="#E5E5E5">difficulties in finding the connections</font>

1241
00:50:06,990 --> 00:50:11,640
between the<font color="#CCCCCC"> node and see how</font><font color="#E5E5E5"> they're</font>

1242
00:50:08,760 --> 00:50:16,440
they're interconnected<font color="#CCCCCC"> so in the first</font>

1243
00:50:11,640 --> 00:50:18,330
approach<font color="#E5E5E5"> I tried with text it's possible</font>

1244
00:50:16,440 --> 00:50:21,270
with with the tool to output the entire

1245
00:50:18,330 --> 00:50:23,549
graph as text<font color="#E5E5E5"> and then just go searching</font>

1246
00:50:21,270 --> 00:50:25,560
through<font color="#E5E5E5"> the text but this is also</font><font color="#CCCCCC"> not</font>

1247
00:50:23,550 --> 00:50:27,180
<font color="#E5E5E5">very useful in terms of edges so you</font>

1248
00:50:25,560 --> 00:50:29,130
still can<font color="#E5E5E5"> see a connection</font><font color="#CCCCCC"> between the</font>

1249
00:50:27,180 --> 00:50:32,190
<font color="#E5E5E5">notes and see how the functionality is</font>

1250
00:50:29,130 --> 00:50:33,339
distributed throughout<font color="#CCCCCC"> nodes</font><font color="#E5E5E5"> so I came</font>

1251
00:50:32,190 --> 00:50:37,119
<font color="#CCCCCC">up with a different</font>

1252
00:50:33,339 --> 00:50:39,400
idea<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> rock</font><font color="#E5E5E5"> behavior detection so</font>

1253
00:50:37,119 --> 00:50:41,079
what I try to do is use the graph and

1254
00:50:39,400 --> 00:50:42,700
the data that<font color="#CCCCCC"> is contained within</font><font color="#E5E5E5"> the</font>

1255
00:50:41,079 --> 00:50:45,640
<font color="#E5E5E5">notes to gather information about the</font>

1256
00:50:42,700 --> 00:50:47,979
<font color="#CCCCCC">behavior therefore I defined a set of</font>

1257
00:50:45,640 --> 00:50:49,569
<font color="#E5E5E5">API call gadgets which for me as a</font><font color="#CCCCCC"> human</font>

1258
00:50:47,979 --> 00:50:51,868
<font color="#E5E5E5">analysts would be functionality that I</font>

1259
00:50:49,569 --> 00:50:54,219
would expect<font color="#E5E5E5"> within Melbourne or within</font>

1260
00:50:51,869 --> 00:50:55,960
these targeted binaries<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I was</font>

1261
00:50:54,219 --> 00:50:58,329
<font color="#E5E5E5">looking at let's try to do pattern</font>

1262
00:50:55,960 --> 00:50:59,710
matching of<font color="#E5E5E5"> API so again I come from an</font>

1263
00:50:58,329 --> 00:51:01,930
<font color="#CCCCCC">antivirus world and</font><font color="#E5E5E5"> their pattern</font>

1264
00:50:59,710 --> 00:51:04,059
matching is like what they did<font color="#E5E5E5"> for</font><font color="#CCCCCC"> 20 30</font>

1265
00:51:01,930 --> 00:51:07,979
years<font color="#CCCCCC"> and we're</font><font color="#E5E5E5"> supposed to be really</font>

1266
00:51:04,059 --> 00:51:11,049
really<font color="#CCCCCC"> good at data so what I did was</font>

1267
00:51:07,979 --> 00:51:13,390
iterate through the<font color="#CCCCCC"> data contained</font>

1268
00:51:11,049 --> 00:51:15,130
<font color="#E5E5E5">within the notes and search for API</font>

1269
00:51:13,390 --> 00:51:18,009
patterns<font color="#E5E5E5"> and therefore I actually had to</font>

1270
00:51:15,130 --> 00:51:20,259
mill the the API names a bit<font color="#E5E5E5"> to just</font>

1271
00:51:18,009 --> 00:51:22,900
<font color="#CCCCCC">contain the</font><font color="#E5E5E5"> most important part of the</font>

1272
00:51:20,259 --> 00:51:26,229
API name<font color="#E5E5E5"> and from there</font><font color="#CCCCCC"> I would search</font>

1273
00:51:22,900 --> 00:51:29,229
for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> first API call within my my code</font>

1274
00:51:26,229 --> 00:51:31,299
patterns to find what I call anchor

1275
00:51:29,229 --> 00:51:34,359
<font color="#CCCCCC">nodes like primary nodes from where I</font>

1276
00:51:31,299 --> 00:51:37,089
start searching<font color="#E5E5E5"> for the remaining</font>

1277
00:51:34,359 --> 00:51:38,769
patterns to see whether in<font color="#E5E5E5"> this area</font>

1278
00:51:37,089 --> 00:51:40,479
<font color="#E5E5E5">around</font><font color="#CCCCCC"> that specific</font><font color="#E5E5E5"> node I could find</font>

1279
00:51:38,769 --> 00:51:40,890
my functionality that<font color="#E5E5E5"> I was searching</font>

1280
00:51:40,479 --> 00:51:44,109
<font color="#E5E5E5">for</font>

1281
00:51:40,890 --> 00:51:45,430
<font color="#E5E5E5">of course again there are problems as</font>

1282
00:51:44,109 --> 00:51:47,229
mentioned<font color="#CCCCCC"> before we have indirect</font>

1283
00:51:45,430 --> 00:51:50,259
function<font color="#E5E5E5"> calls</font><font color="#CCCCCC"> which with this approach</font>

1284
00:51:47,229 --> 00:51:53,739
<font color="#CCCCCC">I cannot find and</font><font color="#E5E5E5"> also I figure out if I</font>

1285
00:51:50,259 --> 00:51:56,229
use bigger call gadgets<font color="#E5E5E5"> which might find</font>

1286
00:51:53,739 --> 00:51:58,359
specific functionality very well how it

1287
00:51:56,229 --> 00:52:01,299
<font color="#CCCCCC">is implemented</font><font color="#E5E5E5"> in one binary I learned</font>

1288
00:51:58,359 --> 00:52:03,219
that<font color="#CCCCCC"> malware authors</font><font color="#E5E5E5"> just like any other</font>

1289
00:52:01,299 --> 00:52:05,529
<font color="#E5E5E5">human have different ways of</font>

1290
00:52:03,219 --> 00:52:08,170
implementing<font color="#E5E5E5"> things this was a big</font>

1291
00:52:05,529 --> 00:52:10,509
problem<font color="#E5E5E5"> as I found for</font><font color="#CCCCCC"> example to find a</font>

1292
00:52:08,170 --> 00:52:12,430
pattern for iterating the file system

1293
00:52:10,509 --> 00:52:14,739
where<font color="#E5E5E5"> you have like fine first file</font><font color="#CCCCCC"> fine</font>

1294
00:52:12,430 --> 00:52:16,180
<font color="#E5E5E5">next file then the</font><font color="#CCCCCC"> end you have you</font>

1295
00:52:14,739 --> 00:52:18,400
<font color="#CCCCCC">would have a fine close to close the</font>

1296
00:52:16,180 --> 00:52:20,049
handle<font color="#E5E5E5"> right but actually you wouldn't</font>

1297
00:52:18,400 --> 00:52:22,569
<font color="#E5E5E5">think like a lot</font><font color="#CCCCCC"> of malware authors do</font>

1298
00:52:20,049 --> 00:52:25,359
not close their handles so I found out

1299
00:52:22,569 --> 00:52:27,190
that I would rather<font color="#E5E5E5"> have to keep my</font>

1300
00:52:25,359 --> 00:52:29,650
gadgets as small as<font color="#CCCCCC"> possible which comes</font>

1301
00:52:27,190 --> 00:52:32,680
with<font color="#E5E5E5"> different</font><font color="#CCCCCC"> issues</font><font color="#E5E5E5"> again but you will</font>

1302
00:52:29,650 --> 00:52:34,150
<font color="#CCCCCC">see in a bit</font><font color="#E5E5E5"> and in the end of course</font>

1303
00:52:32,680 --> 00:52:38,109
this<font color="#E5E5E5"> approach still needs someone to</font>

1304
00:52:34,150 --> 00:52:39,729
interpret<font color="#E5E5E5"> so far</font><font color="#CCCCCC"> I do</font><font color="#E5E5E5"> not have an</font>

1305
00:52:38,109 --> 00:52:41,469
<font color="#CCCCCC">algorithm to</font><font color="#E5E5E5"> automatically draw</font>

1306
00:52:39,729 --> 00:52:42,999
conclusions<font color="#E5E5E5"> which is also something I do</font>

1307
00:52:41,469 --> 00:52:44,739
<font color="#E5E5E5">not want because as I mentioned in the</font>

1308
00:52:42,999 --> 00:52:45,879
<font color="#E5E5E5">beginning I just</font><font color="#CCCCCC"> found the tool to help</font>

1309
00:52:44,739 --> 00:52:48,280
and I was

1310
00:52:45,880 --> 00:52:52,030
<font color="#E5E5E5">is not a hundred percent automation</font>

1311
00:52:48,280 --> 00:52:53,560
approach this would be the<font color="#E5E5E5"> coal gadgets</font>

1312
00:52:52,030 --> 00:52:55,960
again I don't<font color="#E5E5E5"> think</font><font color="#CCCCCC"> you can read that</font>

1313
00:52:53,560 --> 00:52:57,850
<font color="#E5E5E5">very well</font><font color="#CCCCCC"> this is basically</font><font color="#E5E5E5"> list of API</font>

1314
00:52:55,960 --> 00:52:59,980
calls<font color="#CCCCCC"> that I</font><font color="#E5E5E5"> consider functionality the</font>

1315
00:52:57,850 --> 00:53:02,140
for<font color="#CCCCCC"> example we have a pattern that's</font>

1316
00:52:59,980 --> 00:53:04,690
called<font color="#CCCCCC"> write file</font><font color="#E5E5E5"> so someone would have</font>

1317
00:53:02,140 --> 00:53:06,430
to create a file and<font color="#E5E5E5"> write the file</font><font color="#CCCCCC"> we</font>

1318
00:53:04,690 --> 00:53:07,900
have<font color="#E5E5E5"> read query which means someone</font>

1319
00:53:06,430 --> 00:53:10,540
would have to open<font color="#CCCCCC"> a key and</font><font color="#E5E5E5"> create a</font>

1320
00:53:07,900 --> 00:53:12,880
value we have<font color="#E5E5E5"> create remote thread which</font>

1321
00:53:10,540 --> 00:53:15,190
means create thread<font color="#E5E5E5"> right closest memory</font>

1322
00:53:12,880 --> 00:53:16,690
<font color="#CCCCCC">rich</font><font color="#E5E5E5"> processor</font><font color="#CCCCCC"> etc</font><font color="#E5E5E5"> recent</font><font color="#CCCCCC"> thread these</font>

1323
00:53:15,190 --> 00:53:20,080
<font color="#E5E5E5">are like gadgets</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I saw in the past</font>

1324
00:53:16,690 --> 00:53:25,870
and I considered<font color="#E5E5E5"> useful</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> would be</font>

1325
00:53:20,080 --> 00:53:27,759
one example<font color="#E5E5E5"> output in this</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> there</font>

1326
00:53:25,870 --> 00:53:30,580
are the specific functionalities<font color="#E5E5E5"> and the</font>

1327
00:53:27,760 --> 00:53:33,340
<font color="#E5E5E5">referring nodes being saved in which I</font>

1328
00:53:30,580 --> 00:53:35,350
found these patterns as you<font color="#E5E5E5"> can see the</font>

1329
00:53:33,340 --> 00:53:36,970
list is<font color="#E5E5E5"> still very long and from before</font>

1330
00:53:35,350 --> 00:53:37,630
the functionality itself doesn't<font color="#CCCCCC"> really</font>

1331
00:53:36,970 --> 00:53:41,950
say anything

1332
00:53:37,630 --> 00:53:45,040
so from this output<font color="#E5E5E5"> I cannot detect that</font>

1333
00:53:41,950 --> 00:53:46,330
a<font color="#CCCCCC"> lock file was being</font><font color="#E5E5E5"> created and it was</font>

1334
00:53:45,040 --> 00:53:48,100
being written into<font color="#CCCCCC"> that log file and</font>

1335
00:53:46,330 --> 00:53:50,230
<font color="#CCCCCC">that</font><font color="#E5E5E5"> log file was being sent to the</font>

1336
00:53:48,100 --> 00:53:52,060
remote server<font color="#E5E5E5"> this is information</font><font color="#CCCCCC"> i</font>

1337
00:53:50,230 --> 00:53:53,320
cannot gain from this output<font color="#E5E5E5"> but</font><font color="#CCCCCC"> i would</font>

1338
00:53:52,060 --> 00:53:57,070
need to<font color="#CCCCCC"> have a look at the graph or at</font>

1339
00:53:53,320 --> 00:53:59,860
the binary<font color="#E5E5E5"> itself this information only</font>

1340
00:53:57,070 --> 00:54:01,600
<font color="#E5E5E5">helps in a quick analysis of which kind</font>

1341
00:53:59,860 --> 00:54:03,280
<font color="#CCCCCC">of functionality could be hidden in</font><font color="#E5E5E5"> a</font>

1342
00:54:01,600 --> 00:54:06,130
binary<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> analysts still</font><font color="#E5E5E5"> have to</font>

1343
00:54:03,280 --> 00:54:07,540
find has to draw his own conclusion<font color="#E5E5E5"> but</font>

1344
00:54:06,130 --> 00:54:09,670
<font color="#E5E5E5">what he thinks is hidden behind there</font>

1345
00:54:07,540 --> 00:54:12,360
also<font color="#E5E5E5"> this output does not</font><font color="#CCCCCC"> help in</font>

1346
00:54:09,670 --> 00:54:15,580
<font color="#CCCCCC">determining whether application was</font>

1347
00:54:12,360 --> 00:54:20,200
benign<font color="#E5E5E5"> or malicious it just shows</font>

1348
00:54:15,580 --> 00:54:22,360
indicators here<font color="#E5E5E5"> is two more</font><font color="#CCCCCC"> examples the</font>

1349
00:54:20,200 --> 00:54:24,790
first<font color="#E5E5E5"> one I consider rather complete</font>

1350
00:54:22,360 --> 00:54:27,070
<font color="#E5E5E5">it's a chopper file I found</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> my</font>

1351
00:54:24,790 --> 00:54:29,460
sample set where for<font color="#CCCCCC"> example you can see</font>

1352
00:54:27,070 --> 00:54:31,900
<font color="#E5E5E5">that the registry key is being modified</font>

1353
00:54:29,460 --> 00:54:34,810
<font color="#CCCCCC">there's two</font><font color="#E5E5E5"> notes which potentially</font>

1354
00:54:31,900 --> 00:54:38,380
<font color="#E5E5E5">creates processes and then there is the</font>

1355
00:54:34,810 --> 00:54:42,040
functionality<font color="#E5E5E5"> to write a specific file</font>

1356
00:54:38,380 --> 00:54:43,480
and to<font color="#E5E5E5"> execute a file this is indeed a</font>

1357
00:54:42,040 --> 00:54:44,410
dropper<font color="#CCCCCC"> and from</font><font color="#E5E5E5"> that functionality is</font>

1358
00:54:43,480 --> 00:54:46,840
<font color="#E5E5E5">listed there</font>

1359
00:54:44,410 --> 00:54:50,859
<font color="#CCCCCC">I could conclude that</font><font color="#E5E5E5"> this malicious</font>

1360
00:54:46,840 --> 00:54:53,950
binary actually tries to<font color="#E5E5E5"> execute a a</font>

1361
00:54:50,860 --> 00:54:56,950
binary then the bottom you see also an

1362
00:54:53,950 --> 00:54:58,200
interesting outputs this was a rather

1363
00:54:56,950 --> 00:55:00,689
big binary<font color="#E5E5E5"> this</font>

1364
00:54:58,200 --> 00:55:02,098
the<font color="#E5E5E5"> binary of about 300 kilobytes</font><font color="#CCCCCC"> or you</font>

1365
00:55:00,690 --> 00:55:04,680
would<font color="#E5E5E5"> expect some functionality in there</font>

1366
00:55:02,099 --> 00:55:06,060
the graph of that<font color="#E5E5E5"> binary also showed</font>

1367
00:55:04,680 --> 00:55:07,680
that<font color="#E5E5E5"> there is a lot of</font><font color="#CCCCCC"> function so there</font>

1368
00:55:06,060 --> 00:55:09,089
should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> something happening</font><font color="#E5E5E5"> and the</font>

1369
00:55:07,680 --> 00:55:11,069
<font color="#E5E5E5">only API is I could find was load</font>

1370
00:55:09,089 --> 00:55:13,140
library<font color="#CCCCCC"> and get Proctor's which is a</font>

1371
00:55:11,070 --> 00:55:16,079
clear indicator<font color="#CCCCCC"> that api's are being</font>

1372
00:55:13,140 --> 00:55:17,578
loaded dynamically<font color="#CCCCCC"> on the other hand of</font>

1373
00:55:16,079 --> 00:55:19,680
course<font color="#CCCCCC"> you have packed and obfuscated</font>

1374
00:55:17,579 --> 00:55:22,020
binaries which do not<font color="#E5E5E5"> show</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> clear graph</font>

1375
00:55:19,680 --> 00:55:24,029
<font color="#E5E5E5">this is one of</font><font color="#CCCCCC"> the examples and</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> I</font>

1376
00:55:22,020 --> 00:55:27,390
have a lot more<font color="#CCCCCC"> examples which usually</font>

1377
00:55:24,030 --> 00:55:29,820
<font color="#E5E5E5">are vertical or horizontal lines of</font>

1378
00:55:27,390 --> 00:55:31,410
functions or<font color="#CCCCCC"> either no references could</font>

1379
00:55:29,820 --> 00:55:33,480
be found or actually no references<font color="#E5E5E5"> are</font>

1380
00:55:31,410 --> 00:55:35,460
being<font color="#E5E5E5"> present</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is my favorite</font>

1381
00:55:33,480 --> 00:55:36,869
<font color="#CCCCCC">binary this was actually not I took</font>

1382
00:55:35,460 --> 00:55:41,089
<font color="#E5E5E5">kilobyte binary but a rather quite big</font>

1383
00:55:36,869 --> 00:55:44,760
binary where only one function was found

1384
00:55:41,089 --> 00:55:47,040
but then again<font color="#E5E5E5"> as mentioned in targeted</font>

1385
00:55:44,760 --> 00:55:48,780
binaries there's very very little the

1386
00:55:47,040 --> 00:55:51,589
<font color="#E5E5E5">runtime Packers being used but usually</font>

1387
00:55:48,780 --> 00:55:54,329
these binaries<font color="#E5E5E5"> try to hide something so</font>

1388
00:55:51,589 --> 00:55:57,210
the simpler versions<font color="#E5E5E5"> for example that</font>

1389
00:55:54,329 --> 00:55:59,730
dropper<font color="#CCCCCC"> you saw before</font><font color="#E5E5E5"> they show about</font>

1390
00:55:57,210 --> 00:56:02,730
<font color="#CCCCCC">everything all</font><font color="#E5E5E5"> the functionality</font><font color="#CCCCCC"> that</font>

1391
00:55:59,730 --> 00:56:06,060
they contained but<font color="#E5E5E5"> a lot of wineries</font>

1392
00:56:02,730 --> 00:56:10,440
<font color="#E5E5E5">like</font><font color="#CCCCCC"> that graph you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see on top try</font>

1393
00:56:06,060 --> 00:56:12,359
to try<font color="#E5E5E5"> to hide parts or all of their API</font>

1394
00:56:10,440 --> 00:56:15,720
<font color="#CCCCCC">s and</font><font color="#E5E5E5"> their strings from the human</font>

1395
00:56:12,359 --> 00:56:17,490
analyst so<font color="#E5E5E5"> therefore I wanted to find</font>

1396
00:56:15,720 --> 00:56:19,140
metrics which<font color="#E5E5E5"> help me evaluate these</font>

1397
00:56:17,490 --> 00:56:22,229
graphs and whether there's something

1398
00:56:19,140 --> 00:56:24,029
<font color="#CCCCCC">being hidden within</font><font color="#E5E5E5"> that graphs that's</font>

1399
00:56:22,230 --> 00:56:25,680
why I<font color="#CCCCCC"> came up with</font><font color="#E5E5E5"> a bunch of metrics</font>

1400
00:56:24,030 --> 00:56:27,599
you actually wouldn't believe how easy

1401
00:56:25,680 --> 00:56:29,098
it is to extract metrics from graphs

1402
00:56:27,599 --> 00:56:31,440
there are so many<font color="#CCCCCC"> numbers and so many</font>

1403
00:56:29,099 --> 00:56:33,240
possibilities<font color="#E5E5E5"> to describe graphs but my</font>

1404
00:56:31,440 --> 00:56:36,089
<font color="#E5E5E5">goal</font><font color="#CCCCCC"> was to find</font><font color="#E5E5E5"> useful metrics to help</font>

1405
00:56:33,240 --> 00:56:38,040
<font color="#E5E5E5">me describe the amount of information</font>

1406
00:56:36,089 --> 00:56:39,810
<font color="#E5E5E5">that was contained within my</font><font color="#CCCCCC"> notes and</font>

1407
00:56:38,040 --> 00:56:42,509
the amount of information that<font color="#E5E5E5"> was</font>

1408
00:56:39,810 --> 00:56:44,759
contained<font color="#E5E5E5"> within the graph structure now</font>

1409
00:56:42,510 --> 00:56:46,740
why would I<font color="#E5E5E5"> need metrics measuring</font>

1410
00:56:44,760 --> 00:56:50,280
things<font color="#CCCCCC"> as fun I'm having</font><font color="#E5E5E5"> a very good</font>

1411
00:56:46,740 --> 00:56:53,779
time<font color="#E5E5E5"> in measuring my binaries and</font>

1412
00:56:50,280 --> 00:56:57,060
actually so<font color="#CCCCCC"> far analysts do not have a</font>

1413
00:56:53,780 --> 00:56:59,250
standardized metric or standardized way

1414
00:56:57,060 --> 00:57:00,690
of<font color="#E5E5E5"> measuring sophistication</font><font color="#CCCCCC"> a lot of</font>

1415
00:56:59,250 --> 00:57:03,420
binaries are being being said to be

1416
00:57:00,690 --> 00:57:05,010
sophisticated<font color="#E5E5E5"> for me is calling</font>

1417
00:57:03,420 --> 00:57:06,180
something<font color="#E5E5E5"> sophisticated means just the</font>

1418
00:57:05,010 --> 00:57:07,710
person who analyzed it doesn't<font color="#E5E5E5"> really</font>

1419
00:57:06,180 --> 00:57:10,290
understand what it's about<font color="#E5E5E5"> that's our</font>

1420
00:57:07,710 --> 00:57:11,940
modern sophistication<font color="#E5E5E5"> also there is very</font>

1421
00:57:10,290 --> 00:57:13,440
little metrics for<font color="#E5E5E5"> actual complex</font>

1422
00:57:11,940 --> 00:57:15,240
of binaries there's big binaries or

1423
00:57:13,440 --> 00:57:17,190
<font color="#E5E5E5">small binaries there's complex graphs as</font>

1424
00:57:15,240 --> 00:57:18,808
<font color="#CCCCCC">let's compile exports</font><font color="#E5E5E5"> but there is no</font>

1425
00:57:17,190 --> 00:57:21,030
measurement<font color="#E5E5E5"> to say how difficult it</font>

1426
00:57:18,809 --> 00:57:23,190
actually<font color="#E5E5E5"> is to analyze the binary this</font>

1427
00:57:21,030 --> 00:57:25,770
<font color="#E5E5E5">is a problem if you like certain</font>

1428
00:57:23,190 --> 00:57:27,690
<font color="#E5E5E5">companies actually try to sell analysis</font>

1429
00:57:25,770 --> 00:57:29,819
services because you can measure that in

1430
00:57:27,690 --> 00:57:31,589
hours but you<font color="#E5E5E5"> cannot at one gland say</font><font color="#CCCCCC"> oh</font>

1431
00:57:29,819 --> 00:57:32,880
my<font color="#CCCCCC"> god we're gonna need</font><font color="#E5E5E5"> one week we're</font>

1432
00:57:31,589 --> 00:57:35,130
gonna<font color="#E5E5E5"> need two days we're gonna need a</font>

1433
00:57:32,880 --> 00:57:37,559
month<font color="#E5E5E5"> to analyze a specific set of</font>

1434
00:57:35,130 --> 00:57:39,660
binaries<font color="#CCCCCC"> also a problem</font><font color="#E5E5E5"> that we have</font>

1435
00:57:37,559 --> 00:57:40,380
<font color="#CCCCCC">biases</font><font color="#E5E5E5"> sucks</font><font color="#CCCCCC"> I might have mentioned</font><font color="#E5E5E5"> that</font>

1436
00:57:39,660 --> 00:57:44,970
<font color="#E5E5E5">before</font>

1437
00:57:40,380 --> 00:57:49,049
<font color="#E5E5E5">and again there's little measurements or</font>

1438
00:57:44,970 --> 00:57:52,288
little possibility to measure binary

1439
00:57:49,049 --> 00:57:54,960
attributes so again I went back<font color="#E5E5E5"> to my</font>

1440
00:57:52,289 --> 00:57:56,940
preferred<font color="#CCCCCC"> red sub binary here is some</font>

1441
00:57:54,960 --> 00:57:58,289
random information<font color="#CCCCCC"> that the tool</font><font color="#E5E5E5"> spits</font>

1442
00:57:56,940 --> 00:57:59,880
out which can be used for<font color="#CCCCCC"> identification</font>

1443
00:57:58,289 --> 00:58:02,309
and so on<font color="#E5E5E5"> things about putting</font><font color="#CCCCCC"> the data</font>

1444
00:57:59,880 --> 00:58:06,059
<font color="#E5E5E5">into a database for</font><font color="#CCCCCC"> example I did not do</font>

1445
00:58:02,309 --> 00:58:08,369
that<font color="#CCCCCC"> but the more interesting things are</font>

1446
00:58:06,059 --> 00:58:11,609
measurements<font color="#E5E5E5"> that you can grab from</font><font color="#CCCCCC"> the</font>

1447
00:58:08,369 --> 00:58:14,789
graph structure<font color="#E5E5E5"> itself here for example</font>

1448
00:58:11,609 --> 00:58:17,670
are<font color="#E5E5E5"> the statistics</font><font color="#CCCCCC"> that I gather</font><font color="#E5E5E5"> during</font>

1449
00:58:14,789 --> 00:58:19,260
<font color="#E5E5E5">the graph parsing</font><font color="#CCCCCC"> process so it's for</font>

1450
00:58:17,670 --> 00:58:21,089
<font color="#E5E5E5">example interesting how many</font><font color="#CCCCCC"> nodes are</font>

1451
00:58:19,260 --> 00:58:24,329
<font color="#E5E5E5">contained</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> the binary as compared</font>

1452
00:58:21,089 --> 00:58:26,279
to<font color="#CCCCCC"> how many edges</font><font color="#E5E5E5"> are there other</font><font color="#CCCCCC"> large</font>

1453
00:58:24,329 --> 00:58:30,450
<font color="#E5E5E5">number of nodes</font><font color="#CCCCCC"> and vary the number of</font>

1454
00:58:26,279 --> 00:58:32,010
<font color="#E5E5E5">edges</font><font color="#CCCCCC"> or are there for</font><font color="#E5E5E5"> example very</font>

1455
00:58:30,450 --> 00:58:34,160
little API is actually<font color="#CCCCCC"> being referenced</font>

1456
00:58:32,010 --> 00:58:38,010
within<font color="#CCCCCC"> functions are there a lot of</font>

1457
00:58:34,160 --> 00:58:40,049
calls<font color="#CCCCCC"> that refer to two locations</font>

1458
00:58:38,010 --> 00:58:43,109
<font color="#CCCCCC">without it</font><font color="#E5E5E5"> outside</font><font color="#CCCCCC"> of the code section</font>

1459
00:58:40,049 --> 00:58:45,450
<font color="#E5E5E5">or are there a lot of strings that are</font>

1460
00:58:43,109 --> 00:58:46,920
actually having references to code but

1461
00:58:45,450 --> 00:58:48,750
<font color="#E5E5E5">are not referenced within a</font><font color="#CCCCCC"> certain</font>

1462
00:58:46,920 --> 00:58:51,029
function<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> information that helps</font>

1463
00:58:48,750 --> 00:58:54,720
you evaluate<font color="#E5E5E5"> the the binary you're</font>

1464
00:58:51,029 --> 00:58:59,160
looking at<font color="#E5E5E5"> I was very example be weird</font>

1465
00:58:54,720 --> 00:59:01,980
<font color="#CCCCCC">if this big</font><font color="#E5E5E5"> binary which has 70</font>

1466
00:58:59,160 --> 00:59:03,990
kilobytes<font color="#E5E5E5"> does only have a very small</font>

1467
00:59:01,980 --> 00:59:06,119
<font color="#CCCCCC">set of API</font><font color="#E5E5E5"> is being referenced within</font>

1468
00:59:03,990 --> 00:59:08,399
<font color="#E5E5E5">functions so this way these numbers</font><font color="#CCCCCC"> help</font>

1469
00:59:06,119 --> 00:59:10,260
evaluate how much<font color="#CCCCCC"> information is</font>

1470
00:59:08,400 --> 00:59:13,500
contained<font color="#E5E5E5"> within the within the nodes of</font>

1471
00:59:10,260 --> 00:59:16,109
<font color="#CCCCCC">the actual functions</font><font color="#E5E5E5"> and whether the</font>

1472
00:59:13,500 --> 00:59:19,619
binary<font color="#E5E5E5"> you might try</font><font color="#CCCCCC"> to hide for example</font>

1473
00:59:16,109 --> 00:59:23,430
api's or strings also<font color="#CCCCCC"> the numbers help</font>

1474
00:59:19,619 --> 00:59:24,530
comparing<font color="#E5E5E5"> I did not do try to compare</font>

1475
00:59:23,430 --> 00:59:26,540
binaries but the

1476
00:59:24,530 --> 00:59:28,400
could be useful in seeing how for

1477
00:59:26,540 --> 00:59:30,350
<font color="#CCCCCC">example</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> versions of</font><font color="#E5E5E5"> one</font>

1478
00:59:28,400 --> 00:59:32,330
specific<font color="#CCCCCC"> Trojan</font><font color="#E5E5E5"> compared to each other</font>

1479
00:59:30,350 --> 00:59:34,130
<font color="#CCCCCC">whether functionality was added</font><font color="#E5E5E5"> whether</font>

1480
00:59:32,330 --> 00:59:36,350
<font color="#E5E5E5">a different</font><font color="#CCCCCC"> optimization step in the</font>

1481
00:59:34,130 --> 00:59:38,240
compiler<font color="#E5E5E5"> a different optimization option</font>

1482
00:59:36,350 --> 00:59:40,160
in the compiler<font color="#E5E5E5"> was used whether the</font>

1483
00:59:38,240 --> 00:59:42,589
<font color="#CCCCCC">author's changed anything</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> binary</font>

1484
00:59:40,160 --> 00:59:44,899
that was significant or whether some

1485
00:59:42,590 --> 00:59:47,450
numbers changed<font color="#E5E5E5"> so that could be an</font>

1486
00:59:44,900 --> 00:59:51,290
indicator for<font color="#E5E5E5"> improvement on the actual</font>

1487
00:59:47,450 --> 00:59:53,359
binary then I<font color="#CCCCCC"> got a metric which</font><font color="#E5E5E5"> I call</font>

1488
00:59:51,290 --> 00:59:55,000
<font color="#E5E5E5">fat no detection</font><font color="#CCCCCC"> and at some</font><font color="#E5E5E5"> point I</font>

1489
00:59:53,360 --> 00:59:58,640
<font color="#CCCCCC">also call it</font><font color="#E5E5E5"> spaghetti code metric</font>

1490
00:59:55,000 --> 01:00:01,460
because it helps<font color="#CCCCCC"> me find the major nodes</font>

1491
00:59:58,640 --> 01:00:02,720
within<font color="#E5E5E5"> the graph that are very well</font>

1492
01:00:01,460 --> 01:00:04,580
interconnected within the graph

1493
01:00:02,720 --> 01:00:08,000
<font color="#E5E5E5">structure and contain a lot of API eyes</font>

1494
01:00:04,580 --> 01:00:09,500
and strings<font color="#E5E5E5"> this is usually the</font><font color="#CCCCCC"> case if</font>

1495
01:00:08,000 --> 01:00:11,540
you have<font color="#CCCCCC"> like</font><font color="#E5E5E5"> one central node which</font>

1496
01:00:09,500 --> 01:00:13,370
performs most of<font color="#CCCCCC"> the functional idea of</font>

1497
01:00:11,540 --> 01:00:15,020
the<font color="#E5E5E5"> binary then you find this the</font>

1498
01:00:13,370 --> 01:00:19,520
spaghetti code when<font color="#CCCCCC"> you have like these</font>

1499
01:00:15,020 --> 01:00:21,050
weak monsters these<font color="#E5E5E5"> are usually the ones</font>

1500
01:00:19,520 --> 01:00:22,400
<font color="#E5E5E5">I consider interesting and then</font>

1501
01:00:21,050 --> 01:00:24,620
<font color="#CCCCCC">occasionally there are some that</font><font color="#E5E5E5"> I</font>

1502
01:00:22,400 --> 01:00:26,390
consider awkward<font color="#CCCCCC"> what</font><font color="#E5E5E5"> I found out during</font>

1503
01:00:24,620 --> 01:00:28,759
this<font color="#E5E5E5"> project what actually makes</font><font color="#CCCCCC"> sense</font>

1504
01:00:26,390 --> 01:00:31,069
is that<font color="#CCCCCC"> there's usually some kind</font><font color="#E5E5E5"> of</font>

1505
01:00:28,760 --> 01:00:32,420
equality between<font color="#CCCCCC"> the number of</font><font color="#E5E5E5"> strings</font>

1506
01:00:31,070 --> 01:00:34,570
<font color="#E5E5E5">and the number of</font><font color="#CCCCCC"> aps are being</font>

1507
01:00:32,420 --> 01:00:36,830
referenced<font color="#CCCCCC"> because one would think that</font>

1508
01:00:34,570 --> 01:00:39,200
<font color="#E5E5E5">strings in binaries are actually being</font>

1509
01:00:36,830 --> 01:00:42,410
<font color="#E5E5E5">used by API so by functions that process</font>

1510
01:00:39,200 --> 01:00:45,950
them so as you can see<font color="#E5E5E5"> on this list the</font>

1511
01:00:42,410 --> 01:00:49,940
numbers usually<font color="#E5E5E5"> are in equal ranges you</font>

1512
01:00:45,950 --> 01:00:52,069
have 23<font color="#E5E5E5"> in 29 you have 3</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> 3 you have</font>

1513
01:00:49,940 --> 01:00:53,690
<font color="#E5E5E5">6</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> 6 you have 1</font><font color="#CCCCCC"> and 1</font><font color="#E5E5E5"> so this for me</font>

1514
01:00:52,070 --> 01:00:55,820
indicates that<font color="#E5E5E5"> API is are using strings</font>

1515
01:00:53,690 --> 01:00:58,640
<font color="#CCCCCC">but</font><font color="#E5E5E5"> if you have like one</font><font color="#CCCCCC"> node that</font>

1516
01:00:55,820 --> 01:01:00,140
contains<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> string references and</font>

1517
01:00:58,640 --> 01:01:03,529
not a single<font color="#CCCCCC"> API is something's weird</font>

1518
01:01:00,140 --> 01:01:06,140
<font color="#CCCCCC">they're usually</font><font color="#E5E5E5"> that identifies</font><font color="#CCCCCC"> nodes</font>

1519
01:01:03,530 --> 01:01:07,430
<font color="#E5E5E5">word string parsing went wrong then you</font>

1520
01:01:06,140 --> 01:01:08,569
can<font color="#CCCCCC"> look for the reason why the string</font>

1521
01:01:07,430 --> 01:01:10,040
parsing went wrong maybe<font color="#E5E5E5"> there's</font>

1522
01:01:08,570 --> 01:01:12,200
obfuscated strings or maybe<font color="#CCCCCC"> there's</font>

1523
01:01:10,040 --> 01:01:15,470
obfuscated code that was wrongly

1524
01:01:12,200 --> 01:01:18,859
identified as strings<font color="#E5E5E5"> this is certainly</font>

1525
01:01:15,470 --> 01:01:20,299
interesting indicators also of<font color="#E5E5E5"> course I</font>

1526
01:01:18,860 --> 01:01:22,520
<font color="#CCCCCC">used more math on the graphs like</font>

1527
01:01:20,300 --> 01:01:25,280
mathematicians<font color="#E5E5E5"> law of graphs</font><font color="#CCCCCC"> i I do not</font>

1528
01:01:22,520 --> 01:01:27,620
love math and<font color="#E5E5E5"> mathematicians but the</font>

1529
01:01:25,280 --> 01:01:31,040
numbers are<font color="#E5E5E5"> actually useful in</font><font color="#CCCCCC"> certain</font>

1530
01:01:27,620 --> 01:01:33,140
contexts<font color="#E5E5E5"> that the networks</font><font color="#CCCCCC"> that will</font>

1531
01:01:31,040 --> 01:01:36,620
spit out for example<font color="#CCCCCC"> we had the average</font>

1532
01:01:33,140 --> 01:01:37,390
<font color="#CCCCCC">snot connectivity per degree which</font><font color="#E5E5E5"> is</font>

1533
01:01:36,620 --> 01:01:40,960
interesting<font color="#E5E5E5"> to see</font>

1534
01:01:37,390 --> 01:01:42,400
how many<font color="#CCCCCC"> different degrees</font><font color="#E5E5E5"> are contained</font>

1535
01:01:40,960 --> 01:01:44,710
<font color="#CCCCCC">within the graphs</font><font color="#E5E5E5"> like how many</font>

1536
01:01:42,400 --> 01:01:46,840
<font color="#E5E5E5">different numbers</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> outgoing or</font>

1537
01:01:44,710 --> 01:01:49,360
incoming connections the different

1538
01:01:46,840 --> 01:01:54,220
graphs have and how well they are

1539
01:01:49,360 --> 01:01:56,500
connected<font color="#E5E5E5"> on average this usually is</font>

1540
01:01:54,220 --> 01:01:58,180
useful to see whether the<font color="#E5E5E5"> list is</font><font color="#CCCCCC"> longer</font>

1541
01:01:56,500 --> 01:01:59,860
and<font color="#CCCCCC"> the numbers are higher or the</font>

1542
01:01:58,180 --> 01:02:01,000
numbers are lower because<font color="#CCCCCC"> packet planner</font>

1543
01:01:59,860 --> 01:02:03,100
is usually the natural high

1544
01:02:01,000 --> 01:02:05,920
interconnectivity<font color="#CCCCCC"> PAC</font><font color="#E5E5E5"> binaries usually</font>

1545
01:02:03,100 --> 01:02:08,680
have very<font color="#E5E5E5"> low</font><font color="#CCCCCC"> case very low degrees</font><font color="#E5E5E5"> and</font>

1546
01:02:05,920 --> 01:02:11,730
these are badly interconnected so this

1547
01:02:08,680 --> 01:02:15,000
way you<font color="#E5E5E5"> can find out whether lecture is</font>

1548
01:02:11,730 --> 01:02:18,760
abnormal as compared to<font color="#CCCCCC"> normal binaries</font>

1549
01:02:15,000 --> 01:02:20,860
also I graded<font color="#E5E5E5"> the histogram of the out</font>

1550
01:02:18,760 --> 01:02:22,420
degree<font color="#E5E5E5"> centrality not sure if you can</font>

1551
01:02:20,860 --> 01:02:24,400
<font color="#E5E5E5">see that</font><font color="#CCCCCC"> down there like</font><font color="#E5E5E5"> the second line</font>

1552
01:02:22,420 --> 01:02:27,310
<font color="#CCCCCC">of numbers that's</font><font color="#E5E5E5"> my histogram that's</font>

1553
01:02:24,400 --> 01:02:29,860
how the<font color="#CCCCCC"> RTK</font><font color="#E5E5E5"> are degrees of the specific</font>

1554
01:02:27,310 --> 01:02:31,480
<font color="#CCCCCC">nodes</font><font color="#E5E5E5"> are distributed our degrees are</font>

1555
01:02:29,860 --> 01:02:33,070
for<font color="#CCCCCC"> example if one function calls</font>

1556
01:02:31,480 --> 01:02:35,680
another<font color="#E5E5E5"> that's considered an out an</font>

1557
01:02:33,070 --> 01:02:38,020
outgoing<font color="#E5E5E5"> node an outgoing edge within</font>

1558
01:02:35,680 --> 01:02:41,440
within the graph and<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> interesting of</font>

1559
01:02:38,020 --> 01:02:44,530
how which nodes call the most sub

1560
01:02:41,440 --> 01:02:46,420
functions this histogram usually it's

1561
01:02:44,530 --> 01:02:48,160
<font color="#E5E5E5">distributed somewhere in the middle</font>

1562
01:02:46,420 --> 01:02:50,680
there's always some<font color="#E5E5E5"> notes that do not</font>

1563
01:02:48,160 --> 01:02:53,080
have any any connections that<font color="#E5E5E5"> are code</font>

1564
01:02:50,680 --> 01:02:54,960
that is<font color="#E5E5E5"> not connected within the graph</font>

1565
01:02:53,080 --> 01:02:58,720
that's the the number on the very left

1566
01:02:54,960 --> 01:03:00,670
there is<font color="#CCCCCC"> am usually uh that's the</font><font color="#E5E5E5"> next</font>

1567
01:02:58,720 --> 01:03:03,189
metric actually there's always<font color="#E5E5E5"> about</font>

1568
01:03:00,670 --> 01:03:05,140
<font color="#E5E5E5">between 20 and 50%</font><font color="#CCCCCC"> of the graph that</font><font color="#E5E5E5"> is</font>

1569
01:03:03,190 --> 01:03:07,500
connected<font color="#E5E5E5"> with</font><font color="#CCCCCC"> C++ is usually higher</font>

1570
01:03:05,140 --> 01:03:09,819
<font color="#E5E5E5">because I'm not able to match manage</font>

1571
01:03:07,500 --> 01:03:12,430
<font color="#E5E5E5">member functions with with other nodes</font>

1572
01:03:09,820 --> 01:03:14,320
<font color="#E5E5E5">in the graph but with usual</font><font color="#CCCCCC"> C binaries</font>

1573
01:03:12,430 --> 01:03:16,299
that's about 20%<font color="#CCCCCC"> of nodes</font><font color="#E5E5E5"> that are</font>

1574
01:03:14,320 --> 01:03:18,340
unconnected<font color="#CCCCCC"> if this number</font><font color="#E5E5E5"> is really</font>

1575
01:03:16,300 --> 01:03:20,200
<font color="#E5E5E5">high like if you have 70 80 or</font><font color="#CCCCCC"> 90</font>

1576
01:03:18,340 --> 01:03:23,020
<font color="#CCCCCC">percent off your graph that is being</font>

1577
01:03:20,200 --> 01:03:25,270
disconnected something is wrong<font color="#E5E5E5"> and this</font>

1578
01:03:23,020 --> 01:03:27,400
<font color="#E5E5E5">is Sukhram in the bottom helps if</font><font color="#CCCCCC"> I</font>

1579
01:03:25,270 --> 01:03:29,200
reading this<font color="#E5E5E5"> like if the histogram</font>

1580
01:03:27,400 --> 01:03:32,050
shifts more to the left<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have a</font>

1581
01:03:29,200 --> 01:03:34,419
highly<font color="#E5E5E5"> highly connected graph with a</font>

1582
01:03:32,050 --> 01:03:35,920
high number<font color="#E5E5E5"> of disconnected nodes if it</font>

1583
01:03:34,420 --> 01:03:37,570
shifts<font color="#CCCCCC"> to the right</font><font color="#E5E5E5"> you have a highly</font>

1584
01:03:35,920 --> 01:03:41,760
connected graph<font color="#E5E5E5"> without</font><font color="#CCCCCC"> the high number</font>

1585
01:03:37,570 --> 01:03:45,010
of disconnected nodes these numbers help

1586
01:03:41,760 --> 01:03:48,460
<font color="#E5E5E5">evaluate the graph with the help of</font>

1587
01:03:45,010 --> 01:03:51,190
numbers also<font color="#CCCCCC"> I</font><font color="#E5E5E5"> find it interesting to</font>

1588
01:03:48,460 --> 01:03:52,540
<font color="#CCCCCC">search for the average</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> of eight</font>

1589
01:03:51,190 --> 01:03:54,460
<font color="#CCCCCC">she is</font><font color="#E5E5E5"> per kilobyte and the average</font>

1590
01:03:52,540 --> 01:03:56,050
<font color="#CCCCCC">number of strings per kilobyte</font><font color="#E5E5E5"> this is a</font>

1591
01:03:54,460 --> 01:03:58,359
metric<font color="#CCCCCC"> that helps finding out whether</font>

1592
01:03:56,050 --> 01:04:02,740
strings or<font color="#E5E5E5"> IP is are being hidden</font><font color="#CCCCCC"> from</font>

1593
01:03:58,359 --> 01:04:04,480
the parser and of course there's<font color="#E5E5E5"> more</font>

1594
01:04:02,740 --> 01:04:05,740
metrics<font color="#E5E5E5"> that I plan to implement and a</font>

1595
01:04:04,480 --> 01:04:07,060
lot more numbers still plan to<font color="#E5E5E5"> create</font>

1596
01:04:05,740 --> 01:04:08,979
<font color="#CCCCCC">because there's a lot more</font><font color="#E5E5E5"> information</font>

1597
01:04:07,060 --> 01:04:11,440
<font color="#E5E5E5">that's actually being contained within</font>

1598
01:04:08,980 --> 01:04:14,440
the grass like<font color="#E5E5E5"> the use of specific</font>

1599
01:04:11,440 --> 01:04:15,790
<font color="#E5E5E5">libraries the</font><font color="#CCCCCC"> varieties of API star</font>

1600
01:04:14,440 --> 01:04:17,589
being used like<font color="#CCCCCC"> for example there's</font>

1601
01:04:15,790 --> 01:04:19,540
<font color="#E5E5E5">runtime</font><font color="#CCCCCC"> Packers which try to look like</font>

1602
01:04:17,589 --> 01:04:22,029
normal applications<font color="#E5E5E5"> and they will just</font>

1603
01:04:19,540 --> 01:04:24,759
show random api's<font color="#E5E5E5"> I've seen that a</font><font color="#CCCCCC"> lot</font>

1604
01:04:22,030 --> 01:04:26,619
in the in the in<font color="#E5E5E5"> the past when I think</font>

1605
01:04:24,760 --> 01:04:28,690
was called<font color="#E5E5E5"> P first one malware did that</font>

1606
01:04:26,619 --> 01:04:30,040
<font color="#CCCCCC">a lot and showed a lot of api's</font>

1607
01:04:28,690 --> 01:04:32,290
now if you're on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> usual static</font>

1608
01:04:30,040 --> 01:04:34,050
analyzer through the binary it will find

1609
01:04:32,290 --> 01:04:40,540
a lot of<font color="#E5E5E5"> I don't know functionality</font>

1610
01:04:34,050 --> 01:04:42,810
which in fact is<font color="#E5E5E5"> in my opinion highly</font>

1611
01:04:40,540 --> 01:04:46,240
<font color="#E5E5E5">highly Brian because they usually don't</font>

1612
01:04:42,810 --> 01:04:48,910
consider the API is to be in context<font color="#E5E5E5"> but</font>

1613
01:04:46,240 --> 01:04:51,220
just put random<font color="#CCCCCC"> api's in there with the</font>

1614
01:04:48,910 --> 01:04:53,589
<font color="#CCCCCC">variants of API spin used I would</font><font color="#E5E5E5"> guess</font>

1615
01:04:51,220 --> 01:04:56,500
one could detected<font color="#E5E5E5"> and of course data</font>

1616
01:04:53,589 --> 01:04:58,690
<font color="#E5E5E5">cross references are also the</font>

1617
01:04:56,500 --> 01:05:02,200
interesting<font color="#E5E5E5"> metric to add to the graph</font>

1618
01:04:58,690 --> 01:05:04,119
structures now finally I'm almost done

1619
01:05:02,200 --> 01:05:06,669
<font color="#CCCCCC">I</font><font color="#E5E5E5"> used new for J as a</font><font color="#CCCCCC"> back-end</font><font color="#E5E5E5"> to</font>

1620
01:05:04,119 --> 01:05:08,079
persist<font color="#E5E5E5"> the graphs that I created what I</font>

1621
01:05:06,670 --> 01:05:10,480
still<font color="#E5E5E5"> have to do is find out whether</font>

1622
01:05:08,079 --> 01:05:12,670
this graph database can help me in

1623
01:05:10,480 --> 01:05:14,890
finding<font color="#CCCCCC"> connections or correlations</font>

1624
01:05:12,670 --> 01:05:18,400
between<font color="#E5E5E5"> binaries themselves when they're</font>

1625
01:05:14,890 --> 01:05:20,339
stored<font color="#E5E5E5"> there</font><font color="#CCCCCC"> and do it less useful</font>

1626
01:05:18,400 --> 01:05:22,960
actually<font color="#CCCCCC"> in the Opera J</font><font color="#E5E5E5"> also outputs</font>

1627
01:05:20,339 --> 01:05:26,140
<font color="#E5E5E5">visualization as if I didn't have</font><font color="#CCCCCC"> you</font>

1628
01:05:22,960 --> 01:05:29,560
not<font color="#E5E5E5"> visualization yet what is</font>

1629
01:05:26,140 --> 01:05:31,359
<font color="#E5E5E5">interesting in</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> project you</font><font color="#CCCCCC"> can well</font>

1630
01:05:29,560 --> 01:05:34,450
in any graph database you can<font color="#E5E5E5"> store any</font>

1631
01:05:31,359 --> 01:05:36,819
<font color="#CCCCCC">kind of attribute</font><font color="#E5E5E5"> of a binary as a</font>

1632
01:05:34,450 --> 01:05:38,950
specific node<font color="#E5E5E5"> then you can of course</font>

1633
01:05:36,819 --> 01:05:40,900
again store references<font color="#CCCCCC"> to that node so I</font>

1634
01:05:38,950 --> 01:05:43,000
want a way to<font color="#E5E5E5"> store my strings an API is</font>

1635
01:05:40,900 --> 01:05:46,000
as dedicated<font color="#E5E5E5"> nodes in there and not</font><font color="#CCCCCC"> only</font>

1636
01:05:43,000 --> 01:05:49,270
the functions<font color="#E5E5E5"> and</font><font color="#CCCCCC"> thoughts so later on I</font>

1637
01:05:46,000 --> 01:05:51,640
<font color="#E5E5E5">can extract binaries which reference the</font>

1638
01:05:49,270 --> 01:05:53,079
same<font color="#CCCCCC"> API is and evaluate</font><font color="#E5E5E5"> how many API is</font>

1639
01:05:51,640 --> 01:05:56,560
<font color="#E5E5E5">in strings they share and whether</font>

1640
01:05:53,079 --> 01:05:59,319
there's indicators that<font color="#E5E5E5"> binaries have in</font>

1641
01:05:56,560 --> 01:06:01,328
common<font color="#E5E5E5"> in an automated way which is nice</font>

1642
01:05:59,319 --> 01:06:02,890
<font color="#E5E5E5">all</font><font color="#CCCCCC"> right I'm actually almost finished</font>

1643
01:06:01,329 --> 01:06:05,799
what I plan to do now

1644
01:06:02,890 --> 01:06:07,450
<font color="#E5E5E5">as I said the tool</font><font color="#CCCCCC"> is still in the</font>

1645
01:06:05,799 --> 01:06:09,369
process<font color="#CCCCCC"> it's a proof-of-concept</font><font color="#E5E5E5"> it</font>

1646
01:06:07,450 --> 01:06:11,980
barely<font color="#E5E5E5"> ever crashes I promise I did a</font>

1647
01:06:09,369 --> 01:06:14,140
lot<font color="#CCCCCC"> of checking it doesn't work</font><font color="#E5E5E5"> so well</font>

1648
01:06:11,980 --> 01:06:16,480
<font color="#E5E5E5">yet with</font><font color="#CCCCCC"> C++ as mentioned before I'm</font>

1649
01:06:14,140 --> 01:06:18,069
having trouble matching<font color="#E5E5E5"> the member</font>

1650
01:06:16,480 --> 01:06:19,269
functions with<font color="#CCCCCC"> the with the actual</font>

1651
01:06:18,069 --> 01:06:22,900
<font color="#CCCCCC">occasions where they're being called</font><font color="#E5E5E5"> and</font>

1652
01:06:19,269 --> 01:06:23,769
<font color="#CCCCCC">Delfy is a big issue how many people in</font>

1653
01:06:22,900 --> 01:06:29,410
the room<font color="#E5E5E5"> are actually reverse</font>

1654
01:06:23,769 --> 01:06:34,439
engineering malware some how many people

1655
01:06:29,410 --> 01:06:37,180
don't to do<font color="#CCCCCC"> that do not hate Delfy yeah</font>

1656
01:06:34,440 --> 01:06:41,109
okay so delphi's issue for<font color="#E5E5E5"> for all of us</font>

1657
01:06:37,180 --> 01:06:43,509
<font color="#E5E5E5">and in</font><font color="#CCCCCC"> cases that i</font><font color="#E5E5E5"> haven't tested yet</font>

1658
01:06:41,109 --> 01:06:45,490
<font color="#CCCCCC">is</font><font color="#E5E5E5"> anything that goes outside of</font><font color="#CCCCCC"> wintry</font>

1659
01:06:43,510 --> 01:06:47,380
to see<font color="#E5E5E5"> binary so with a</font><font color="#CCCCCC"> 64-bit that</font>

1660
01:06:45,490 --> 01:06:49,660
should it<font color="#CCCCCC"> should work that will works</font>

1661
01:06:47,380 --> 01:06:54,849
and not<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> if the data is accurate the</font>

1662
01:06:49,660 --> 01:06:55,990
same works for drivers<font color="#E5E5E5"> okay this was</font>

1663
01:06:54,849 --> 01:06:58,059
actually<font color="#E5E5E5"> it for myself</font><font color="#CCCCCC"> i thank you very</font>

1664
01:06:55,990 --> 01:07:02,720
<font color="#E5E5E5">much for your attention</font><font color="#CCCCCC"> and if you have</font>

1665
01:06:58,059 --> 01:07:05,850
any questions<font color="#CCCCCC"> here to answer thank</font><font color="#E5E5E5"> you</font>

1666
01:07:02,720 --> 01:07:05,850
[Applause]

1667
01:07:18,610 --> 01:07:21,610
please

1668
01:07:26,760 --> 01:07:47,130
I can throw yeah thank you<font color="#CCCCCC"> so</font><font color="#E5E5E5"> about the</font>

1669
01:07:42,960 --> 01:07:50,550
<font color="#CCCCCC">Pickers the tectum do you</font><font color="#E5E5E5"> have some you</font>

1670
01:07:47,130 --> 01:07:54,630
<font color="#E5E5E5">know we have so a lot of kind of Pickers</font>

1671
01:07:50,550 --> 01:07:57,119
<font color="#E5E5E5">the</font><font color="#CCCCCC"> media upx a lot of Pickers but you</font>

1672
01:07:54,630 --> 01:08:01,170
<font color="#CCCCCC">talk about some generic ways to see if</font>

1673
01:07:57,119 --> 01:08:05,310
the binaries are actually<font color="#CCCCCC"> Pickett you</font>

1674
01:08:01,170 --> 01:08:08,730
know<font color="#E5E5E5"> my question</font><font color="#CCCCCC"> is the trixie you</font>

1675
01:08:05,310 --> 01:08:10,920
<font color="#CCCCCC">showed</font><font color="#E5E5E5"> to us is</font><font color="#CCCCCC"> to Sam any kind of</font>

1676
01:08:08,730 --> 01:08:15,900
Pickers or some specific<font color="#E5E5E5"> Baker's</font>

1677
01:08:10,920 --> 01:08:17,190
detections<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> a lot of directions</font>

1678
01:08:15,900 --> 01:08:21,359
<font color="#E5E5E5">one could go I thought about that</font>

1679
01:08:17,189 --> 01:08:22,679
actually<font color="#CCCCCC"> but I think this works that you</font>

1680
01:08:21,359 --> 01:08:25,589
could see a difference between<font color="#E5E5E5"> Packers</font>

1681
01:08:22,680 --> 01:08:27,509
as well but as you saw the graphs<font color="#E5E5E5"> didn't</font>

1682
01:08:25,589 --> 01:08:28,830
really contain a lot of information<font color="#E5E5E5"> of</font>

1683
01:08:27,509 --> 01:08:31,470
<font color="#CCCCCC">course you could try use these features</font>

1684
01:08:28,830 --> 01:08:33,180
to<font color="#E5E5E5"> differ between different Packers but</font>

1685
01:08:31,470 --> 01:08:35,069
as they contain<font color="#E5E5E5"> very little features</font>

1686
01:08:33,180 --> 01:08:38,069
that<font color="#E5E5E5"> might be</font><font color="#CCCCCC"> difficult but</font><font color="#E5E5E5"> the graphs</font>

1687
01:08:35,069 --> 01:08:40,670
have so many or the whole tool spits out

1688
01:08:38,069 --> 01:08:47,089
<font color="#E5E5E5">so much information</font><font color="#CCCCCC"> so one</font><font color="#E5E5E5"> would have to</font>

1689
01:08:40,670 --> 01:08:47,089
evaluate whether<font color="#CCCCCC"> it is</font><font color="#E5E5E5"> whether</font><font color="#CCCCCC"> you could</font>

1690
01:08:49,779 --> 01:08:58,540
<font color="#CCCCCC">the mitral</font><font color="#E5E5E5"> microphones</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right I'll</font>

1691
01:08:57,500 --> 01:09:06,380
stick<font color="#CCCCCC"> with</font><font color="#E5E5E5"> that one</font>

1692
01:08:58,540 --> 01:09:12,649
any other questions hi<font color="#E5E5E5"> how did</font><font color="#CCCCCC"> you do</font>

1693
01:09:06,380 --> 01:09:14,630
with all<font color="#CCCCCC"> the garbage</font><font color="#E5E5E5"> involvement getting</font>

1694
01:09:12,649 --> 01:09:19,670
<font color="#E5E5E5">on</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> this stuff that you really</font>

1695
01:09:14,630 --> 01:09:22,100
<font color="#E5E5E5">wanted for the</font><font color="#CCCCCC"> nodes I've imagined</font>

1696
01:09:19,670 --> 01:09:25,790
you've<font color="#CCCCCC"> got a lot of</font><font color="#E5E5E5"> garbage</font><font color="#CCCCCC"> between the</font>

1697
01:09:22,100 --> 01:09:27,620
coach<font color="#E5E5E5"> not really wasn't naughty so I</font>

1698
01:09:25,790 --> 01:09:32,120
<font color="#CCCCCC">went the minimalistic approach I mean</font>

1699
01:09:27,620 --> 01:09:34,519
<font color="#CCCCCC">radar is fairly it's</font><font color="#E5E5E5"> pretty great and</font>

1700
01:09:32,120 --> 01:09:36,710
<font color="#E5E5E5">just spitting out exactly the</font><font color="#CCCCCC"> data that</font>

1701
01:09:34,520 --> 01:09:38,270
you<font color="#E5E5E5"> want so would give me a list of</font>

1702
01:09:36,710 --> 01:09:39,920
functions<font color="#CCCCCC"> it</font><font color="#E5E5E5"> would give me a list of</font>

1703
01:09:38,270 --> 01:09:41,330
<font color="#E5E5E5">stringers references</font><font color="#CCCCCC"> they</font><font color="#E5E5E5"> will give me</font><font color="#CCCCCC"> a</font>

1704
01:09:39,920 --> 01:09:42,770
list<font color="#E5E5E5"> of function cross references it</font>

1705
01:09:41,330 --> 01:09:44,990
will give me a list of symbol cross

1706
01:09:42,770 --> 01:09:46,580
references with these lists it was

1707
01:09:44,990 --> 01:09:49,219
really easy to<font color="#E5E5E5"> just</font><font color="#CCCCCC"> put the graphs</font>

1708
01:09:46,580 --> 01:09:50,960
together<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> there's a lot of that</font>

1709
01:09:49,220 --> 01:09:53,120
went a lot of time into<font color="#CCCCCC"> in the bug</font>

1710
01:09:50,960 --> 01:09:55,730
fixing and<font color="#E5E5E5"> in the bug fixing of radar a</font>

1711
01:09:53,120 --> 01:09:58,370
and into parsing the data<font color="#E5E5E5"> that were that</font>

1712
01:09:55,730 --> 01:10:02,330
it puts<font color="#E5E5E5"> out but in theory like it's all</font>

1713
01:09:58,370 --> 01:10:04,040
super simplistic<font color="#CCCCCC"> I could imagine that</font>

1714
01:10:02,330 --> 01:10:05,840
<font color="#E5E5E5">there's a lot</font><font color="#CCCCCC"> of problems</font><font color="#E5E5E5"> coming up if I</font>

1715
01:10:04,040 --> 01:10:07,460
try to<font color="#E5E5E5"> add</font><font color="#CCCCCC"> more information</font><font color="#E5E5E5"> about the</font>

1716
01:10:05,840 --> 01:10:08,990
actual binary<font color="#E5E5E5"> structure and about</font>

1717
01:10:07,460 --> 01:10:11,420
callbacks in<font color="#E5E5E5"> C++ and whatnot</font>

1718
01:10:08,990 --> 01:10:18,370
but that's<font color="#E5E5E5"> that hasn't been a problem so</font>

1719
01:10:11,420 --> 01:10:27,489
far<font color="#E5E5E5"> back there</font>

1720
01:10:18,370 --> 01:10:32,719
[Music]

1721
01:10:27,489 --> 01:10:34,820
hi<font color="#E5E5E5"> do you keep any kind</font><font color="#CCCCCC"> of control</font><font color="#E5E5E5"> flow</font>

1722
01:10:32,719 --> 01:10:36,710
graph information in your graphs like

1723
01:10:34,820 --> 01:10:38,900
for example<font color="#E5E5E5"> you saw the different nodes</font>

1724
01:10:36,710 --> 01:10:40,760
it would be<font color="#E5E5E5"> very useful</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you had like</font>

1725
01:10:38,900 --> 01:10:43,219
<font color="#CCCCCC">the order in</font><font color="#E5E5E5"> which they were executed</font>

1726
01:10:40,760 --> 01:10:45,230
<font color="#E5E5E5">when you when you try to get a high</font>

1727
01:10:43,219 --> 01:10:47,540
<font color="#E5E5E5">level</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> you've got the binary does</font>

1728
01:10:45,230 --> 01:10:48,888
<font color="#E5E5E5">right</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> all these nodes of the</font>

1729
01:10:47,540 --> 01:10:51,380
different functionality with<font color="#CCCCCC"> the api's</font>

1730
01:10:48,889 --> 01:10:53,090
and strings but do you keep the order in

1731
01:10:51,380 --> 01:10:57,530
which<font color="#CCCCCC"> they're they're visited by the</font>

1732
01:10:53,090 --> 01:10:59,210
execution flow to find out the execution

1733
01:10:57,530 --> 01:11:01,610
flow there<font color="#E5E5E5"> will be a lot more</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> to be</font>

1734
01:10:59,210 --> 01:11:03,349
put in there<font color="#E5E5E5"> but but even statically you</font>

1735
01:11:01,610 --> 01:11:05,150
you do have<font color="#CCCCCC"> some indication</font><font color="#E5E5E5"> of how this</font>

1736
01:11:03,349 --> 01:11:06,860
<font color="#E5E5E5">goes that will give the entry point of</font>

1737
01:11:05,150 --> 01:11:10,400
the<font color="#E5E5E5"> could you put the microphones it</font>

1738
01:11:06,860 --> 01:11:11,900
yeah so thank you but but but<font color="#E5E5E5"> even if</font>

1739
01:11:10,400 --> 01:11:13,219
it's<font color="#E5E5E5"> not until you still have a lot</font><font color="#CCCCCC"> of</font>

1740
01:11:11,900 --> 01:11:16,009
information<font color="#E5E5E5"> that will get the entry</font>

1741
01:11:13,219 --> 01:11:21,619
point of the<font color="#CCCCCC"> binary and</font><font color="#E5E5E5"> you can walk</font>

1742
01:11:16,010 --> 01:11:24,020
through<font color="#CCCCCC"> the different</font><font color="#E5E5E5"> nodes right I mean</font>

1743
01:11:21,619 --> 01:11:25,579
you have to keep the order as you go

1744
01:11:24,020 --> 01:11:27,110
through the control flow<font color="#CCCCCC"> graph and great</font>

1745
01:11:25,579 --> 01:11:29,239
your<font color="#CCCCCC"> nodes with the</font><font color="#E5E5E5"> strings and the</font>

1746
01:11:27,110 --> 01:11:32,570
api's but but this information<font color="#E5E5E5"> is there</font>

1747
01:11:29,239 --> 01:11:34,699
so because we're doing something so

1748
01:11:32,570 --> 01:11:37,429
risky<font color="#CCCCCC"> do reverse engineering</font><font color="#E5E5E5"> for for</font>

1749
01:11:34,699 --> 01:11:39,290
auditing<font color="#E5E5E5"> and we don't do exactly</font><font color="#CCCCCC"> that</font>

1750
01:11:37,429 --> 01:11:40,880
but<font color="#CCCCCC"> we do something similar</font><font color="#E5E5E5"> in order to</font>

1751
01:11:39,290 --> 01:11:42,860
give<font color="#E5E5E5"> us like a very high level view</font><font color="#CCCCCC"> of</font>

1752
01:11:40,880 --> 01:11:48,650
the like a file<font color="#E5E5E5"> parse or something like</font>

1753
01:11:42,860 --> 01:11:50,750
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so having the order with the nodes</font>

1754
01:11:48,650 --> 01:11:52,400
<font color="#E5E5E5">the different nodes are</font><font color="#CCCCCC"> visited it is</font>

1755
01:11:50,750 --> 01:11:55,190
very<font color="#CCCCCC"> helpfully like getting like</font><font color="#E5E5E5"> a</font>

1756
01:11:52,400 --> 01:11:57,070
<font color="#CCCCCC">high-level</font><font color="#E5E5E5"> overview of the parser so I</font>

1757
01:11:55,190 --> 01:11:58,450
think<font color="#E5E5E5"> it would help you as well</font>

1758
01:11:57,070 --> 01:11:59,980
without analysis<font color="#CCCCCC"> if you if you were</font>

1759
01:11:58,450 --> 01:12:04,690
<font color="#CCCCCC">given</font><font color="#E5E5E5"> the order in</font><font color="#CCCCCC"> which the nodes are</font>

1760
01:11:59,980 --> 01:12:08,410
<font color="#E5E5E5">visited yes in my in</font><font color="#CCCCCC"> my dream</font><font color="#E5E5E5"> world</font><font color="#CCCCCC"> this</font>

1761
01:12:04,690 --> 01:12:10,629
is actually not a standalone tool but I

1762
01:12:08,410 --> 01:12:13,630
would love<font color="#E5E5E5"> to see this integrated with</font>

1763
01:12:10,630 --> 01:12:15,880
the<font color="#E5E5E5"> sandbox for example in the future so</font>

1764
01:12:13,630 --> 01:12:18,430
I could<font color="#E5E5E5"> think I mean there have been</font>

1765
01:12:15,880 --> 01:12:20,350
<font color="#E5E5E5">approaches about</font><font color="#CCCCCC"> multi-part execution</font>

1766
01:12:18,430 --> 01:12:22,030
with<font color="#E5E5E5"> inside boxes I know that but I</font>

1767
01:12:20,350 --> 01:12:23,860
could<font color="#CCCCCC"> think that</font><font color="#E5E5E5"> the static analysis</font>

1768
01:12:22,030 --> 01:12:28,030
component<font color="#E5E5E5"> within the sandbox</font><font color="#CCCCCC"> would</font>

1769
01:12:23,860 --> 01:12:30,280
actually be the the most productive

1770
01:12:28,030 --> 01:12:31,750
solution to work with I know that here

1771
01:12:30,280 --> 01:12:34,480
<font color="#CCCCCC">I'm liking a lot of</font><font color="#E5E5E5"> information to the</font>

1772
01:12:31,750 --> 01:12:36,370
sandbox can get but<font color="#E5E5E5"> I'm having a lot of</font>

1773
01:12:34,480 --> 01:12:38,799
visibility<font color="#CCCCCC"> that the sandbox can never</font>

1774
01:12:36,370 --> 01:12:41,019
have so I would believe that<font color="#E5E5E5"> putting</font>

1775
01:12:38,800 --> 01:12:44,590
<font color="#E5E5E5">these two approaches together would</font>

1776
01:12:41,020 --> 01:12:48,430
finally make<font color="#E5E5E5"> a near to complete picture</font>

1777
01:12:44,590 --> 01:12:56,800
of the<font color="#E5E5E5"> binary but that's like far in the</font>

1778
01:12:48,430 --> 01:12:59,550
future<font color="#E5E5E5"> from for now</font><font color="#CCCCCC"> well thank</font><font color="#E5E5E5"> you also</font>

1779
01:12:56,800 --> 01:12:59,550
thank you<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the questions</font>

1780
01:13:00,840 --> 01:13:03,140
[Applause]

