1
00:00:00,500 --> 00:00:12,389
<font color="#E5E5E5">Mangia the rest is English but there</font>

2
00:00:07,500 --> 00:00:15,570
will<font color="#E5E5E5"> be some</font><font color="#CCCCCC"> surprises so our agenda</font>

3
00:00:12,389 --> 00:00:18,680
today would come be<font color="#CCCCCC"> consist</font><font color="#E5E5E5"> of two parts</font>

4
00:00:15,570 --> 00:00:22,109
<font color="#CCCCCC">the first part I'm going to talk about</font>

5
00:00:18,680 --> 00:00:25,740
authenticated encryption<font color="#CCCCCC"> in some new</font>

6
00:00:22,109 --> 00:00:31,050
features and pitfalls<font color="#E5E5E5"> and I'll connect</font>

7
00:00:25,740 --> 00:00:32,910
this to the recent a wpa2 attack that

8
00:00:31,050 --> 00:00:35,329
has just been<font color="#CCCCCC"> released a few days ago</font>

9
00:00:32,910 --> 00:00:42,390
<font color="#CCCCCC">you will see how</font><font color="#E5E5E5"> this is connected</font><font color="#CCCCCC"> and</font>

10
00:00:35,329 --> 00:00:44,579
<font color="#E5E5E5">the second part would be don't encrypt</font>

11
00:00:42,390 --> 00:00:47,850
without authentication<font color="#CCCCCC"> I've been going</font>

12
00:00:44,579 --> 00:00:50,629
around<font color="#CCCCCC"> in</font><font color="#E5E5E5"> saying these</font><font color="#CCCCCC"> things but people</font>

13
00:00:47,850 --> 00:00:53,760
<font color="#E5E5E5">keep thinking</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> encryption is also</font>

14
00:00:50,629 --> 00:00:56,550
safe<font color="#E5E5E5"> when you have an adversary</font><font color="#CCCCCC"> can</font>

15
00:00:53,760 --> 00:01:00,210
change the<font color="#CCCCCC"> ciphertext so the answer is</font>

16
00:00:56,550 --> 00:01:06,408
<font color="#CCCCCC">known and</font><font color="#E5E5E5"> we will see this</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so</font>

17
00:01:00,210 --> 00:01:11,450
<font color="#E5E5E5">I go</font><font color="#CCCCCC"> on now feller a</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> do a detector to</font>

18
00:01:06,409 --> 00:01:13,650
<font color="#E5E5E5">open - so</font><font color="#CCCCCC"> first part</font><font color="#E5E5E5"> would be</font>

19
00:01:11,450 --> 00:01:15,689
authenticated<font color="#E5E5E5"> encryption I'll talk about</font>

20
00:01:13,650 --> 00:01:20,310
<font color="#E5E5E5">the rise of AES GCM I'll give some</font>

21
00:01:15,689 --> 00:01:23,699
historical account<font color="#E5E5E5"> and I'll talk about</font>

22
00:01:20,310 --> 00:01:27,150
the brittleness<font color="#E5E5E5"> how dangerous this mode</font>

23
00:01:23,700 --> 00:01:30,090
is if you ever repeat<font color="#E5E5E5"> the norms sounds</font>

24
00:01:27,150 --> 00:01:33,900
<font color="#E5E5E5">familiar</font><font color="#CCCCCC"> from the last few</font><font color="#E5E5E5"> days of</font>

25
00:01:30,090 --> 00:01:35,939
attacks<font color="#E5E5E5"> and I will talk about how you</font>

26
00:01:33,900 --> 00:01:37,890
can change<font color="#CCCCCC"> the mode</font><font color="#E5E5E5"> and propose a</font>

27
00:01:35,939 --> 00:01:41,039
different<font color="#CCCCCC"> mode that</font><font color="#E5E5E5"> would be nonce</font>

28
00:01:37,890 --> 00:01:42,750
misuse<font color="#E5E5E5"> resist resistant in a sense that</font>

29
00:01:41,040 --> 00:01:46,350
<font color="#E5E5E5">you</font><font color="#CCCCCC"> can repeat nonsense and nothing</font>

30
00:01:42,750 --> 00:01:51,000
would<font color="#E5E5E5"> happen</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is the AES GCM</font>

31
00:01:46,350 --> 00:01:56,899
sieve sieve is for synthetic<font color="#CCCCCC"> IV</font><font color="#E5E5E5"> and it's</font>

32
00:01:51,000 --> 00:02:00,509
efficient instantiation<font color="#E5E5E5"> all right so</font>

33
00:01:56,899 --> 00:02:02,009
let's<font color="#E5E5E5"> start so first of all it is very</font>

34
00:02:00,509 --> 00:02:05,070
important<font color="#CCCCCC"> to have an efficient</font>

35
00:02:02,009 --> 00:02:07,439
authenticated<font color="#CCCCCC"> encryption scheme for</font>

36
00:02:05,070 --> 00:02:10,949
<font color="#CCCCCC">example the most prominent</font><font color="#E5E5E5"> example is</font>

37
00:02:07,439 --> 00:02:12,959
the<font color="#CCCCCC"> client-server TLS communications so</font>

38
00:02:10,949 --> 00:02:13,200
every time you open<font color="#E5E5E5"> your browser and you</font>

39
00:02:12,959 --> 00:02:17,550
can

40
00:02:13,200 --> 00:02:23,609
<font color="#E5E5E5">to a server you hopefully are initiating</font>

41
00:02:17,550 --> 00:02:27,900
TLS session<font color="#E5E5E5"> and with some authenticated</font>

42
00:02:23,610 --> 00:02:30,980
encryption<font color="#E5E5E5"> and by now</font><font color="#CCCCCC"> a yes GCM so a</font><font color="#E5E5E5"> is</font>

43
00:02:27,900 --> 00:02:34,709
the encryption<font color="#CCCCCC"> and GCM stands</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> Galois</font>

44
00:02:30,980 --> 00:02:36,510
counter mode is already the<font color="#E5E5E5"> de facto</font>

45
00:02:34,709 --> 00:02:38,790
mode of operation that<font color="#CCCCCC"> is</font><font color="#E5E5E5"> used</font>

46
00:02:36,510 --> 00:02:42,329
everywhere for authenticated encryption

47
00:02:38,790 --> 00:02:48,120
<font color="#CCCCCC">it is already</font><font color="#E5E5E5"> today part of the</font><font color="#CCCCCC"> current</font>

48
00:02:42,330 --> 00:02:51,690
TLS version 1.2<font color="#E5E5E5"> it is planned to be one</font>

49
00:02:48,120 --> 00:02:56,340
of the only<font color="#E5E5E5"> two supported AED schemes in</font>

50
00:02:51,690 --> 00:02:58,680
TLS 1.3 that is coming soon<font color="#CCCCCC"> so a is</font><font color="#E5E5E5"> the</font>

51
00:02:56,340 --> 00:03:03,030
authenticated encryption with<font color="#E5E5E5"> edition</font>

52
00:02:58,680 --> 00:03:05,250
<font color="#CCCCCC">Edition authenticated data and it</font><font color="#E5E5E5"> is the</font>

53
00:03:03,030 --> 00:03:09,000
preferred server<font color="#E5E5E5"> preferred server and</font>

54
00:03:05,250 --> 00:03:14,730
client choice for leading servers and

55
00:03:09,000 --> 00:03:16,829
browsers especially for the client the

56
00:03:14,730 --> 00:03:18,709
server always prefers the AES GCM

57
00:03:16,829 --> 00:03:22,260
because all servers<font color="#CCCCCC"> already have</font>

58
00:03:18,709 --> 00:03:25,739
hardware support for<font color="#E5E5E5"> both the galois</font>

59
00:03:22,260 --> 00:03:30,269
counter mode<font color="#E5E5E5"> NBA es by</font><font color="#CCCCCC"> two instructions</font>

60
00:03:25,739 --> 00:03:32,700
and clients the<font color="#E5E5E5"> 64-bit clients already</font>

61
00:03:30,269 --> 00:03:35,010
<font color="#E5E5E5">have these instructions or similar</font>

62
00:03:32,700 --> 00:03:39,358
instructions so they would also choose

63
00:03:35,010 --> 00:03:41,519
as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> first preference</font><font color="#CCCCCC"> AES GCM the</font>

64
00:03:39,359 --> 00:03:45,420
advantages<font color="#E5E5E5"> of this mode first of all it</font>

65
00:03:41,519 --> 00:03:48,600
came<font color="#E5E5E5"> it started in 2006 around 2006 it</font>

66
00:03:45,420 --> 00:03:51,798
came out with the security proof<font color="#E5E5E5"> and</font>

67
00:03:48,600 --> 00:03:54,930
this<font color="#E5E5E5"> was a novelty and it has excellent</font>

68
00:03:51,799 --> 00:03:56,400
performance<font color="#E5E5E5"> on modern CPUs with AES</font>

69
00:03:54,930 --> 00:04:00,180
instructions and carry less

70
00:03:56,400 --> 00:04:03,650
multiplication this<font color="#E5E5E5"> PCL</font><font color="#CCCCCC"> Mulk</font><font color="#E5E5E5"> udq this is</font>

71
00:04:00,180 --> 00:04:09,980
the instruction that that speeds up

72
00:04:03,650 --> 00:04:15,260
polynomial multiplications<font color="#CCCCCC"> so let's see</font>

73
00:04:09,980 --> 00:04:20,579
how did<font color="#E5E5E5"> it get so attractive so if we go</font>

74
00:04:15,260 --> 00:04:26,880
to 2009<font color="#CCCCCC"> up to 2009 the</font><font color="#E5E5E5"> dominant ciphers</font>

75
00:04:20,579 --> 00:04:31,020
were AES in CBC mode<font color="#CCCCCC"> rc4 in h mac</font><font color="#E5E5E5"> sha-1</font>

76
00:04:26,880 --> 00:04:36,230
these were dominant<font color="#E5E5E5"> so</font><font color="#CCCCCC"> 90%</font><font color="#E5E5E5"> of the</font>

77
00:04:31,020 --> 00:04:40,950
traffic was with one<font color="#E5E5E5"> of these two</font>

78
00:04:36,230 --> 00:04:46,790
<font color="#E5E5E5">combinations and AES GCM did not even</font>

79
00:04:40,950 --> 00:04:50,330
exist<font color="#E5E5E5"> in any practical sense</font><font color="#CCCCCC"> all right</font>

80
00:04:46,790 --> 00:04:55,710
so let me<font color="#E5E5E5"> give you some account of</font>

81
00:04:50,330 --> 00:04:58,349
performance<font color="#E5E5E5"> so rc4 for the cypher in</font><font color="#CCCCCC"> h</font>

82
00:04:55,710 --> 00:05:00,539
moksha one for the authentication<font color="#E5E5E5"> had</font>

83
00:04:58,350 --> 00:05:04,380
performance of two and a half cycles per

84
00:05:00,540 --> 00:05:09,900
<font color="#E5E5E5">byte on a server CPU so lower is better</font>

85
00:05:04,380 --> 00:05:13,140
<font color="#CCCCCC">a yes</font><font color="#E5E5E5"> and H moksha one was approximately</font>

86
00:05:09,900 --> 00:05:17,429
<font color="#CCCCCC">23 an Aes GCM is a pro head</font>

87
00:05:13,140 --> 00:05:19,469
<font color="#E5E5E5">approximately 22 cycles per byte so of</font>

88
00:05:17,430 --> 00:05:22,860
course if you want<font color="#E5E5E5"> to choose</font><font color="#CCCCCC"> the best</font>

89
00:05:19,470 --> 00:05:26,370
performing mode<font color="#E5E5E5"> you would go for our</font><font color="#CCCCCC"> C</font><font color="#E5E5E5"> 4</font>

90
00:05:22,860 --> 00:05:30,290
and H<font color="#E5E5E5"> moksha</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> and this was the dominant</font>

91
00:05:26,370 --> 00:05:32,820
<font color="#E5E5E5">mode but there were starting to see</font>

92
00:05:30,290 --> 00:05:37,860
<font color="#E5E5E5">problems with the</font><font color="#CCCCCC"> security of this</font><font color="#E5E5E5"> mode</font>

93
00:05:32,820 --> 00:05:41,159
<font color="#CCCCCC">so then the ecosystem moved to choose</font>

94
00:05:37,860 --> 00:05:44,670
<font color="#E5E5E5">AES and H</font><font color="#CCCCCC"> Mac sha-1 and then there was</font>

95
00:05:41,160 --> 00:05:48,150
some problem with<font color="#CCCCCC"> the CBC</font><font color="#E5E5E5"> mode so back</font>

96
00:05:44,670 --> 00:05:51,270
and<font color="#E5E5E5"> forth</font><font color="#CCCCCC"> in AES GCM really didn't show</font>

97
00:05:48,150 --> 00:05:54,150
<font color="#CCCCCC">any performance advantage right</font><font color="#E5E5E5"> so</font>

98
00:05:51,270 --> 00:05:57,390
nobody would try<font color="#CCCCCC"> to push the ecosystem</font>

99
00:05:54,150 --> 00:06:02,280
<font color="#CCCCCC">to change the preferred cipher suite</font><font color="#E5E5E5"> for</font>

100
00:05:57,390 --> 00:06:07,909
no<font color="#E5E5E5"> reason for</font><font color="#CCCCCC"> no performance reason so</font>

101
00:06:02,280 --> 00:06:11,669
this was the situation<font color="#E5E5E5"> up until 2009</font><font color="#CCCCCC"> and</font>

102
00:06:07,910 --> 00:06:14,700
then<font color="#E5E5E5"> around 2009 Intel announced and by</font>

103
00:06:11,670 --> 00:06:18,920
2010 there were already<font color="#E5E5E5"> CPUs with these</font>

104
00:06:14,700 --> 00:06:22,950
instructions<font color="#CCCCCC"> so AES and</font><font color="#E5E5E5"> I these were</font><font color="#CCCCCC"> the</font>

105
00:06:18,920 --> 00:06:25,500
instructions<font color="#E5E5E5"> to encrypt faster with AES</font>

106
00:06:22,950 --> 00:06:28,260
and a<font color="#CCCCCC"> 64 bit polynomial multiplication</font>

107
00:06:25,500 --> 00:06:32,610
it is the careless multiplication and

108
00:06:28,260 --> 00:06:34,979
this was built for many purposes<font color="#E5E5E5"> but one</font>

109
00:06:32,610 --> 00:06:36,750
of<font color="#E5E5E5"> them was to speed up the AES GCM</font>

110
00:06:34,979 --> 00:06:40,110
because it is built on polynomial

111
00:06:36,750 --> 00:06:42,970
multiplication not<font color="#CCCCCC"> 64-bit polynomials</font>

112
00:06:40,110 --> 00:06:44,620
128 bit polynomials but<font color="#E5E5E5"> if you have this</font>

113
00:06:42,970 --> 00:06:48,280
<font color="#E5E5E5">component you can write a piece of</font>

114
00:06:44,620 --> 00:06:52,750
<font color="#CCCCCC">software that would</font><font color="#E5E5E5"> do a wide polynomial</font>

115
00:06:48,280 --> 00:06:56,080
multiplication for you top of this<font color="#E5E5E5"> since</font>

116
00:06:52,750 --> 00:06:58,810
2009<font color="#E5E5E5"> there</font><font color="#CCCCCC"> has been continuous</font><font color="#E5E5E5"> software</font>

117
00:06:56,080 --> 00:07:02,070
and algorithmic<font color="#E5E5E5"> optimizations</font><font color="#CCCCCC"> for</font>

118
00:06:58,810 --> 00:07:06,160
implementing<font color="#E5E5E5"> AES GCM better and better</font>

119
00:07:02,070 --> 00:07:08,380
and<font color="#E5E5E5"> also after the architecture</font><font color="#CCCCCC"> of this</font>

120
00:07:06,160 --> 00:07:13,389
in these<font color="#E5E5E5"> instructions were announced</font>

121
00:07:08,380 --> 00:07:15,550
then the microarchitectures have been

122
00:07:13,389 --> 00:07:19,240
improving so the<font color="#E5E5E5"> AES improved the</font>

123
00:07:15,550 --> 00:07:23,979
latency<font color="#CCCCCC"> and the throughput</font><font color="#E5E5E5"> and also the</font>

124
00:07:19,240 --> 00:07:26,940
careless multiplication so with<font color="#E5E5E5"> this</font>

125
00:07:23,979 --> 00:07:26,940
<font color="#E5E5E5">process</font>

126
00:07:27,300 --> 00:07:38,350
shall we where<font color="#E5E5E5"> we are today</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is</font>

127
00:07:35,410 --> 00:07:40,900
the<font color="#E5E5E5"> 22 cycles per by this was before</font>

128
00:07:38,350 --> 00:07:45,160
<font color="#CCCCCC">there were hardware instructions to</font>

129
00:07:40,900 --> 00:07:48,070
speed up<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> GCM so it's not even</font>

130
00:07:45,160 --> 00:07:50,050
<font color="#E5E5E5">reaching the 22 just the 22 is up there</font>

131
00:07:48,070 --> 00:07:55,390
but that's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> of the of the graph</font>

132
00:07:50,050 --> 00:07:58,900
<font color="#E5E5E5">so in 2010 this</font><font color="#CCCCCC"> was the first generation</font>

133
00:07:55,390 --> 00:08:04,210
<font color="#E5E5E5">of processors with this instruction so</font>

134
00:07:58,900 --> 00:08:07,239
from 22 it dropped to 3<font color="#E5E5E5"> around 3 cycles</font>

135
00:08:04,210 --> 00:08:12,310
per byte<font color="#CCCCCC"> so this was already a very good</font>

136
00:08:07,240 --> 00:08:16,419
<font color="#E5E5E5">reason</font><font color="#CCCCCC"> to start moving</font><font color="#E5E5E5"> servers and</font>

137
00:08:12,310 --> 00:08:19,150
clients to<font color="#E5E5E5"> use AES GCM the next</font>

138
00:08:16,419 --> 00:08:22,120
iteration was<font color="#E5E5E5"> 2 years</font><font color="#CCCCCC"> after</font><font color="#E5E5E5"> the Sandy</font>

139
00:08:19,150 --> 00:08:24,190
<font color="#CCCCCC">Bridge processor in 2012 it dropped a</font>

140
00:08:22,120 --> 00:08:26,530
<font color="#E5E5E5">little</font><font color="#CCCCCC"> bit to 2.75</font>

141
00:08:24,190 --> 00:08:30,930
what happened was that the throughput of

142
00:08:26,530 --> 00:08:33,159
<font color="#E5E5E5">the AES was improved but</font><font color="#CCCCCC"> still the</font>

143
00:08:30,930 --> 00:08:36,610
authentication the Galois counter mode

144
00:08:33,159 --> 00:08:38,529
computations<font color="#E5E5E5"> we were not sped up because</font>

145
00:08:36,610 --> 00:08:41,169
the careless multiplication remained the

146
00:08:38,529 --> 00:08:45,130
same<font color="#E5E5E5"> so there was a modest improvement</font>

147
00:08:41,169 --> 00:08:49,240
<font color="#CCCCCC">and then we see a drop a beautiful drop</font>

148
00:08:45,130 --> 00:08:51,339
<font color="#E5E5E5">right so what happened in 2013 the</font>

149
00:08:49,240 --> 00:08:53,209
careless multiplication was also

150
00:08:51,339 --> 00:08:55,699
<font color="#E5E5E5">improved so it's like</font><font color="#CCCCCC"> 2</font>

151
00:08:53,209 --> 00:08:57,290
<font color="#E5E5E5">competing elements</font><font color="#CCCCCC"> of the mode so you</font>

152
00:08:55,699 --> 00:09:00,679
improve a yes then

153
00:08:57,290 --> 00:09:03,139
then the careless multiplication remains

154
00:09:00,679 --> 00:09:06,980
the tallest<font color="#E5E5E5"> pole in the tent and then</font>

155
00:09:03,139 --> 00:09:11,059
<font color="#E5E5E5">you improve this so so in 2013</font><font color="#CCCCCC"> it was</font>

156
00:09:06,980 --> 00:09:13,490
dropped already<font color="#E5E5E5"> to one cycle provide the</font>

157
00:09:11,059 --> 00:09:20,959
year<font color="#CCCCCC"> after the shrink the Broadwell cpu</font>

158
00:09:13,490 --> 00:09:25,249
point<font color="#E5E5E5"> 76 and now start in 2015</font><font color="#CCCCCC"> and on</font>

159
00:09:20,959 --> 00:09:28,989
<font color="#CCCCCC">skylake and they're already</font><font color="#E5E5E5"> newer</font><font color="#CCCCCC"> CPUs</font>

160
00:09:25,249 --> 00:09:31,879
<font color="#E5E5E5">it dropped the performance is point 65</font>

161
00:09:28,990 --> 00:09:35,629
cycles per<font color="#E5E5E5"> byte so remember we started</font>

162
00:09:31,879 --> 00:09:38,480
the<font color="#CCCCCC"> journey from 22 and here we are</font><font color="#E5E5E5"> at</font>

163
00:09:35,629 --> 00:09:45,379
point 65 but what is so<font color="#E5E5E5"> special about</font>

164
00:09:38,480 --> 00:09:47,600
point 65<font color="#E5E5E5"> this number so this the</font>

165
00:09:45,379 --> 00:09:50,389
<font color="#E5E5E5">performance of only the counter mode</font>

166
00:09:47,600 --> 00:09:54,339
<font color="#E5E5E5">only the encryption is also around point</font>

167
00:09:50,389 --> 00:09:59,110
65 cycles per byte so this processor in

168
00:09:54,339 --> 00:10:05,509
2015 is<font color="#E5E5E5"> the first generation where</font>

169
00:09:59,110 --> 00:10:08,149
authentication<font color="#CCCCCC"> and</font><font color="#E5E5E5"> encryption is at the</font>

170
00:10:05,509 --> 00:10:10,730
same cost of only the encryption in

171
00:10:08,149 --> 00:10:12,860
other words this is<font color="#CCCCCC"> the top performance</font>

172
00:10:10,730 --> 00:10:15,740
possible<font color="#E5E5E5"> on this type of CPUs you cannot</font>

173
00:10:12,860 --> 00:10:17,299
ask<font color="#CCCCCC"> for more</font><font color="#E5E5E5"> you cannot get less</font><font color="#CCCCCC"> than</font>

174
00:10:15,740 --> 00:10:19,429
the encryption if you are<font color="#E5E5E5"> doing</font>

175
00:10:17,299 --> 00:10:20,749
encryption<font color="#E5E5E5"> and authentication</font><font color="#CCCCCC"> but now</font>

176
00:10:19,429 --> 00:10:22,759
you are<font color="#CCCCCC"> getting encryption and</font>

177
00:10:20,749 --> 00:10:24,759
authentication for the same cost of only

178
00:10:22,759 --> 00:10:27,679
encryption<font color="#E5E5E5"> so this was the ultimate</font>

179
00:10:24,759 --> 00:10:32,509
target<font color="#CCCCCC"> so now if you compare</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> and</font>

180
00:10:27,679 --> 00:10:41,499
yes<font color="#E5E5E5"> you see a big reason why move to a</font>

181
00:10:32,509 --> 00:10:47,420
yes<font color="#CCCCCC"> sir GCM</font><font color="#E5E5E5"> and indeed what happened so</font>

182
00:10:41,499 --> 00:10:52,759
I'll show<font color="#CCCCCC"> some evolution so in 2012 TLS</font>

183
00:10:47,420 --> 00:10:55,910
1.2 was announced and this was the first

184
00:10:52,759 --> 00:10:58,369
time where<font color="#E5E5E5"> AES GCM was officially part</font>

185
00:10:55,910 --> 00:11:00,120
of<font color="#E5E5E5"> the cipher suites</font><font color="#CCCCCC"> that the server and</font>

186
00:10:58,369 --> 00:11:07,830
clients could could

187
00:11:00,120 --> 00:11:11,670
choose but there was a very<font color="#CCCCCC"> slow</font>

188
00:11:07,830 --> 00:11:14,160
proliferation so only<font color="#CCCCCC"> maybe 1.2 percent</font>

189
00:11:11,670 --> 00:11:19,380
<font color="#E5E5E5">or</font><font color="#CCCCCC"> 3 percent or something</font><font color="#E5E5E5"> like this of</font>

190
00:11:14,160 --> 00:11:21,810
the traffic<font color="#E5E5E5"> really used TLS 1.2 right so</font>

191
00:11:19,380 --> 00:11:24,089
you have to use TLS 1.2 if you want to

192
00:11:21,810 --> 00:11:27,029
use the AES GCM<font color="#E5E5E5"> so this was</font>

193
00:11:24,089 --> 00:11:30,540
proliferating very slowly the majority

194
00:11:27,029 --> 00:11:33,450
of the TLS was 1.0 which was<font color="#CCCCCC"> broken</font><font color="#E5E5E5"> and</font>

195
00:11:30,540 --> 00:11:37,140
then what there<font color="#E5E5E5"> was a strong push</font><font color="#CCCCCC"> to</font>

196
00:11:33,450 --> 00:11:40,740
upgrade this to TLS 1.1<font color="#E5E5E5"> so most of the</font>

197
00:11:37,140 --> 00:11:44,970
effort was invested towards the first

198
00:11:40,740 --> 00:11:47,370
update<font color="#E5E5E5"> of day of the protocol and I told</font>

199
00:11:44,970 --> 00:11:51,270
you<font color="#CCCCCC"> before</font><font color="#E5E5E5"> 90 percent</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> traffic was</font>

200
00:11:47,370 --> 00:11:55,890
with the old good old or maybe<font color="#E5E5E5"> I should</font>

201
00:11:51,270 --> 00:11:59,520
say bed old AES CBC or<font color="#CCCCCC"> RC 4 with H</font><font color="#E5E5E5"> max</font>

202
00:11:55,890 --> 00:12:01,490
<font color="#E5E5E5">sha-1 now let's see what happened</font><font color="#CCCCCC"> in</font>

203
00:11:59,520 --> 00:12:04,110
<font color="#E5E5E5">three</font><font color="#CCCCCC"> years</font>

204
00:12:01,490 --> 00:12:09,000
the instructions were introduced there

205
00:12:04,110 --> 00:12:12,060
<font color="#CCCCCC">was already one generation next</font>

206
00:12:09,000 --> 00:12:16,230
generation of<font color="#CCCCCC"> improvements</font><font color="#E5E5E5"> the AES GCM</font>

207
00:12:12,060 --> 00:12:22,290
in<font color="#E5E5E5"> December 9 2015</font><font color="#CCCCCC"> I was tracking I was</font>

208
00:12:16,230 --> 00:12:27,990
tracking<font color="#E5E5E5"> this so</font><font color="#CCCCCC"> 55%</font><font color="#E5E5E5"> of the traffic was</font>

209
00:12:22,290 --> 00:12:30,449
a yes GCM<font color="#E5E5E5"> 30% was a CBC and there was</font>

210
00:12:27,990 --> 00:12:35,209
another one<font color="#E5E5E5"> cha-cha</font><font color="#CCCCCC"> and Pali which is a</font>

211
00:12:30,450 --> 00:12:39,570
third<font color="#E5E5E5"> a cipher</font><font color="#CCCCCC"> that emerged and it was</font>

212
00:12:35,209 --> 00:12:43,380
designed<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> low-end CPUs the 32-bit</font>

213
00:12:39,570 --> 00:12:46,680
CPUs<font color="#CCCCCC"> that do not</font><font color="#E5E5E5"> have the hardware</font>

214
00:12:43,380 --> 00:12:50,820
support for AES and for the GCM<font color="#E5E5E5"> so for</font>

215
00:12:46,680 --> 00:13:00,810
these processors this is a faster<font color="#CCCCCC"> a</font>

216
00:12:50,820 --> 00:13:04,200
faster mode<font color="#E5E5E5"> of operation and 2016 we see</font>

217
00:13:00,810 --> 00:13:08,699
this picture<font color="#E5E5E5"> already so 64 percent of</font>

218
00:13:04,200 --> 00:13:12,120
the<font color="#E5E5E5"> traffic is AES GCM and a CBC dropped</font>

219
00:13:08,700 --> 00:13:12,980
to<font color="#CCCCCC"> 20 percent remember it was around 90</font>

220
00:13:12,120 --> 00:13:16,070
<font color="#CCCCCC">percent</font>

221
00:13:12,980 --> 00:13:20,030
and<font color="#E5E5E5"> cha-cha</font><font color="#CCCCCC"> Paulie stabilized</font><font color="#E5E5E5"> to 15%</font>

222
00:13:16,070 --> 00:13:23,270
<font color="#CCCCCC">more</font><font color="#E5E5E5"> or less this is the</font><font color="#CCCCCC"> share of</font><font color="#E5E5E5"> the</font>

223
00:13:20,030 --> 00:13:25,370
<font color="#CCCCCC">low-end CPUs the phones let's say more</font>

224
00:13:23,270 --> 00:13:34,490
or less so<font color="#E5E5E5"> this is why it stabilizes on</font>

225
00:13:25,370 --> 00:13:39,620
this on this value<font color="#E5E5E5"> and the trend is</font>

226
00:13:34,490 --> 00:13:41,450
<font color="#E5E5E5">going is</font><font color="#CCCCCC"> going on so basically we can</font>

227
00:13:39,620 --> 00:13:45,080
<font color="#E5E5E5">see the</font><font color="#CCCCCC"> evolution that most of the</font>

228
00:13:41,450 --> 00:13:49,150
traffic has already<font color="#E5E5E5"> be to grind server</font>

229
00:13:45,080 --> 00:13:53,390
traffic<font color="#E5E5E5"> has already moved to the modern</font>

230
00:13:49,150 --> 00:13:58,970
<font color="#E5E5E5">cipher authenticated encryption and is</font>

231
00:13:53,390 --> 00:14:02,000
enjoying performance and<font color="#E5E5E5"> security so if</font>

232
00:13:58,970 --> 00:14:04,400
it's so wonderful why am<font color="#CCCCCC"> i giving this</font>

233
00:14:02,000 --> 00:14:05,570
talk here you can sense that<font color="#CCCCCC"> there is a</font>

234
00:14:04,400 --> 00:14:08,270
but coming

235
00:14:05,570 --> 00:14:18,370
<font color="#CCCCCC">so what happened</font><font color="#E5E5E5"> what happens if</font>

236
00:14:08,270 --> 00:14:21,350
something<font color="#E5E5E5"> goes wrong so the AES GCM</font>

237
00:14:18,370 --> 00:14:22,760
needs to have an IV initialization

238
00:14:21,350 --> 00:14:26,660
vector or we call<font color="#E5E5E5"> it</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

239
00:14:22,760 --> 00:14:30,080
cryptographic language and nonce<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

240
00:14:26,660 --> 00:14:35,000
most important thing is<font color="#CCCCCC"> to never repeat</font>

241
00:14:30,080 --> 00:14:39,020
a nonce<font color="#E5E5E5"> so this is if you want</font><font color="#CCCCCC"> to use</font>

242
00:14:35,000 --> 00:14:41,480
this mode securely never we use a nonce

243
00:14:39,020 --> 00:14:43,520
<font color="#CCCCCC">of course with the same key</font><font color="#E5E5E5"> so it sounds</font>

244
00:14:41,480 --> 00:14:47,390
<font color="#E5E5E5">very simple so what happens what</font><font color="#CCCCCC"> happens</font>

245
00:14:43,520 --> 00:14:52,430
if you repeat the nonce by mistake<font color="#E5E5E5"> so</font>

246
00:14:47,390 --> 00:14:56,030
the counter mode<font color="#E5E5E5"> the privacy party of</font>

247
00:14:52,430 --> 00:14:59,750
the encryption<font color="#CCCCCC"> is gone with you</font><font color="#E5E5E5"> and you</font>

248
00:14:56,030 --> 00:15:02,930
lost<font color="#E5E5E5"> these two messages</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> encrypt</font>

249
00:14:59,750 --> 00:15:06,830
it with<font color="#E5E5E5"> the same notes but</font><font color="#CCCCCC"> this is a</font>

250
00:15:02,930 --> 00:15:09,890
small<font color="#E5E5E5"> disaster an even worse disaster is</font>

251
00:15:06,830 --> 00:15:12,650
<font color="#E5E5E5">that the integrity is completely broken</font>

252
00:15:09,890 --> 00:15:15,890
<font color="#CCCCCC">it's not only</font><font color="#E5E5E5"> these two</font><font color="#CCCCCC"> messages because</font>

253
00:15:12,650 --> 00:15:17,840
<font color="#CCCCCC">if you repeated</font><font color="#E5E5E5"> their nonce twice then</font>

254
00:15:15,890 --> 00:15:20,890
there<font color="#E5E5E5"> is some computation</font><font color="#CCCCCC"> that can be</font>

255
00:15:17,840 --> 00:15:24,250
done offline<font color="#CCCCCC"> it it will reveal the</font>

256
00:15:20,890 --> 00:15:26,860
<font color="#CCCCCC">authentication key of the AES GCM</font>

257
00:15:24,250 --> 00:15:29,350
so from that<font color="#E5E5E5"> point on</font><font color="#CCCCCC"> an adversary can</font>

258
00:15:26,860 --> 00:15:30,880
<font color="#CCCCCC">forge</font><font color="#E5E5E5"> any message not just these two</font>

259
00:15:29,350 --> 00:15:34,030
<font color="#CCCCCC">messages that were compromised because</font>

260
00:15:30,880 --> 00:15:36,430
<font color="#E5E5E5">you repeated a nonce twice so you lost</font>

261
00:15:34,030 --> 00:15:37,750
the integrity<font color="#E5E5E5"> so you really should not</font>

262
00:15:36,430 --> 00:15:41,920
repeat

263
00:15:37,750 --> 00:15:47,320
<font color="#E5E5E5">Ananse and you ask yourself if there is</font>

264
00:15:41,920 --> 00:15:54,880
such a<font color="#CCCCCC"> crisps warning</font><font color="#E5E5E5"> why would an IV</font>

265
00:15:47,320 --> 00:15:57,250
repeat<font color="#E5E5E5"> right so I will tell you so</font><font color="#CCCCCC"> so</font>

266
00:15:54,880 --> 00:16:00,010
let me give you a<font color="#E5E5E5"> brief history of</font><font color="#CCCCCC"> plate</font>

267
00:15:57,250 --> 00:16:04,470
randomness<font color="#E5E5E5"> so first of all it is very</font>

268
00:16:00,010 --> 00:16:09,430
<font color="#CCCCCC">difficult</font><font color="#E5E5E5"> to get real good randomness</font>

269
00:16:04,470 --> 00:16:12,250
and for this for<font color="#E5E5E5"> example there is</font>

270
00:16:09,430 --> 00:16:14,949
nowadays<font color="#E5E5E5"> a new instruction by Intel and</font>

271
00:16:12,250 --> 00:16:17,530
<font color="#CCCCCC">it's also already</font><font color="#E5E5E5"> in other processors -</font>

272
00:16:14,950 --> 00:16:19,060
by<font color="#E5E5E5"> now it's our dear and and our DC</font>

273
00:16:17,530 --> 00:16:22,900
these<font color="#E5E5E5"> are two instructions that can</font>

274
00:16:19,060 --> 00:16:25,239
<font color="#CCCCCC">actually give you entropy</font><font color="#E5E5E5"> from an</font>

275
00:16:22,900 --> 00:16:31,750
entropy source that is built into the

276
00:16:25,240 --> 00:16:33,760
processor hardware<font color="#CCCCCC"> ok but until there</font>

277
00:16:31,750 --> 00:16:37,270
was this instruction it was very

278
00:16:33,760 --> 00:16:41,590
difficult<font color="#E5E5E5"> to actually do this but then</font>

279
00:16:37,270 --> 00:16:44,170
there<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> conspiracy theory you have</font>

280
00:16:41,590 --> 00:16:49,420
this wonderful instruction but there

281
00:16:44,170 --> 00:16:52,750
were many who refused to<font color="#CCCCCC"> use it we</font>

282
00:16:49,420 --> 00:16:56,110
cannot trust Intel maybe they<font color="#CCCCCC"> plant at</font>

283
00:16:52,750 --> 00:17:03,330
<font color="#CCCCCC">the back door and and the entropy</font><font color="#E5E5E5"> is not</font>

284
00:16:56,110 --> 00:17:06,280
good<font color="#CCCCCC"> so although there was a good</font>

285
00:17:03,330 --> 00:17:10,120
instruction<font color="#E5E5E5"> it was still not used by</font>

286
00:17:06,280 --> 00:17:16,420
<font color="#E5E5E5">everything and people libraries still</font>

287
00:17:10,119 --> 00:17:18,699
used<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Linux dev random that</font><font color="#E5E5E5"> is just</font>

288
00:17:16,420 --> 00:17:21,750
<font color="#CCCCCC">collecting some randomness</font><font color="#E5E5E5"> from the</font>

289
00:17:18,700 --> 00:17:26,860
system but this is not really pure

290
00:17:21,750 --> 00:17:29,800
entropy coming from from<font color="#E5E5E5"> a real physical</font>

291
00:17:26,859 --> 00:17:31,899
entropy sauce well eventually by now I

292
00:17:29,800 --> 00:17:36,320
think<font color="#CCCCCC"> that the eco system</font><font color="#E5E5E5"> is already</font>

293
00:17:31,900 --> 00:17:40,100
<font color="#E5E5E5">agreed to</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> novel idea if you have</font>

294
00:17:36,320 --> 00:17:43,309
<font color="#E5E5E5">a source of entropy and you added to</font>

295
00:17:40,100 --> 00:17:45,620
this there<font color="#E5E5E5"> is no damage right so you</font>

296
00:17:43,309 --> 00:17:49,250
enjoy both both worlds so<font color="#E5E5E5"> today there is</font>

297
00:17:45,620 --> 00:17:57,049
a collection of<font color="#E5E5E5"> entropy from multiple</font>

298
00:17:49,250 --> 00:17:59,000
sources<font color="#E5E5E5"> including</font><font color="#CCCCCC"> the Rd</font><font color="#E5E5E5"> rent</font><font color="#CCCCCC"> and I'm</font>

299
00:17:57,049 --> 00:18:03,769
just<font color="#E5E5E5"> giving</font><font color="#CCCCCC"> some history so there</font><font color="#E5E5E5"> was</font>

300
00:17:59,000 --> 00:18:09,019
the famous bug in 2008 the Debian Ling

301
00:18:03,769 --> 00:18:12,559
Linux in the<font color="#CCCCCC"> R&G receiving</font><font color="#E5E5E5"> so it turned</font>

302
00:18:09,019 --> 00:18:17,860
out<font color="#CCCCCC"> that many random</font><font color="#E5E5E5"> generators were</font>

303
00:18:12,559 --> 00:18:23,059
actually predictable<font color="#E5E5E5"> and in the 2010</font><font color="#CCCCCC"> the</font>

304
00:18:17,860 --> 00:18:25,899
<font color="#E5E5E5">PlayStation 3 right the private key was</font>

305
00:18:23,059 --> 00:18:29,029
recovered because<font color="#E5E5E5"> there was no new</font>

306
00:18:25,899 --> 00:18:32,449
generated random source for<font color="#CCCCCC"> each</font>

307
00:18:29,029 --> 00:18:38,990
signature<font color="#CCCCCC"> so you can see that</font><font color="#E5E5E5"> getting a</font>

308
00:18:32,450 --> 00:18:40,580
random<font color="#E5E5E5"> a random random IV</font><font color="#CCCCCC"> it's not it's</font>

309
00:18:38,990 --> 00:18:43,460
not trivial<font color="#E5E5E5"> there are many mistakes that</font>

310
00:18:40,580 --> 00:18:46,389
happen with this here is a nice story

311
00:18:43,460 --> 00:18:49,340
<font color="#E5E5E5">it's a it's a paper by</font><font color="#CCCCCC"> Lenz Ryan</font><font color="#E5E5E5"> other</font>

312
00:18:46,389 --> 00:18:52,279
<font color="#E5E5E5">authors in 2012 they collected they</font>

313
00:18:49,340 --> 00:18:55,668
collected<font color="#E5E5E5"> six and a half let's say six</font>

314
00:18:52,279 --> 00:18:57,620
and a half million RSA public<font color="#CCCCCC"> keys so</font>

315
00:18:55,669 --> 00:19:00,080
everyone can<font color="#E5E5E5"> harvest it's just a matter</font>

316
00:18:57,620 --> 00:19:02,389
of<font color="#E5E5E5"> time</font><font color="#CCCCCC"> and to write the crawler that</font>

317
00:19:00,080 --> 00:19:10,570
<font color="#E5E5E5">would grab the public keys from any</font>

318
00:19:02,389 --> 00:19:16,070
servers and this is what they found

319
00:19:10,570 --> 00:19:19,399
the<font color="#E5E5E5"> 71 thousand keys were used more than</font>

320
00:19:16,070 --> 00:19:21,590
once<font color="#CCCCCC"> by</font><font color="#E5E5E5"> different servers right so if</font>

321
00:19:19,399 --> 00:19:23,479
two servers<font color="#E5E5E5"> have the same public key it</font>

322
00:19:21,590 --> 00:19:26,209
means that they also have<font color="#E5E5E5"> the same</font>

323
00:19:23,480 --> 00:19:28,820
<font color="#CCCCCC">private key and</font><font color="#E5E5E5"> it means</font><font color="#CCCCCC"> that one can</font>

324
00:19:26,210 --> 00:19:31,039
<font color="#E5E5E5">compromise the other and vice versa</font><font color="#CCCCCC"> and</font>

325
00:19:28,820 --> 00:19:34,750
you ask<font color="#E5E5E5"> yourself how</font><font color="#CCCCCC"> is it possible that</font>

326
00:19:31,039 --> 00:19:39,529
<font color="#E5E5E5">somebody generated let's say 2000 bit</font>

327
00:19:34,750 --> 00:19:41,269
key<font color="#E5E5E5"> and got the same public well the</font>

328
00:19:39,529 --> 00:19:47,559
answer is bad randomness

329
00:19:41,269 --> 00:19:47,559
they didn't choose the<font color="#CCCCCC"> Prime's</font><font color="#E5E5E5"> correctly</font>

330
00:19:49,240 --> 00:19:54,380
another interesting<font color="#CCCCCC"> thing so this</font><font color="#E5E5E5"> is 71</font>

331
00:19:52,220 --> 00:19:57,740
so 71<font color="#E5E5E5"> thousand were just you know</font>

332
00:19:54,380 --> 00:20:02,000
negligent generation of<font color="#E5E5E5"> a</font><font color="#CCCCCC"> private-public</font>

333
00:19:57,740 --> 00:20:05,090
keeper<font color="#E5E5E5"> and around 13,000 had a common</font>

334
00:20:02,000 --> 00:20:08,360
factor<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> amazing</font><font color="#CCCCCC"> you take</font>

335
00:20:05,090 --> 00:20:11,059
<font color="#CCCCCC">two</font><font color="#E5E5E5"> public keys that</font><font color="#CCCCCC"> are completely</font>

336
00:20:08,360 --> 00:20:14,389
<font color="#CCCCCC">different from different</font><font color="#E5E5E5"> servers you</font>

337
00:20:11,059 --> 00:20:16,610
compute the GCD<font color="#E5E5E5"> the greatest common</font>

338
00:20:14,390 --> 00:20:18,410
denominator<font color="#E5E5E5"> of and you get something</font>

339
00:20:16,610 --> 00:20:24,409
<font color="#CCCCCC">that is greater</font><font color="#E5E5E5"> than one</font>

340
00:20:18,410 --> 00:20:31,340
<font color="#CCCCCC">voila so you have</font><font color="#E5E5E5"> factorized both keys</font>

341
00:20:24,410 --> 00:20:34,520
<font color="#E5E5E5">so both of these servers are hacked with</font>

342
00:20:31,340 --> 00:20:37,100
this so this was a big deal<font color="#CCCCCC"> to take so</font>

343
00:20:34,520 --> 00:20:39,230
many million public<font color="#E5E5E5"> keys and go over all</font>

344
00:20:37,100 --> 00:20:40,760
<font color="#CCCCCC">the</font><font color="#E5E5E5"> pairs so they did a special</font>

345
00:20:39,230 --> 00:20:42,820
technique<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually do this in</font>

346
00:20:40,760 --> 00:20:46,610
<font color="#E5E5E5">feasible time but that's</font><font color="#CCCCCC"> a fact</font>

347
00:20:42,820 --> 00:20:48,919
so you think again how is it possible I

348
00:20:46,610 --> 00:20:52,370
mean how do you how do<font color="#E5E5E5"> you generate in</font>

349
00:20:48,920 --> 00:20:57,380
our<font color="#CCCCCC"> n RSA private key</font><font color="#E5E5E5"> you just get two</font>

350
00:20:52,370 --> 00:20:59,419
random<font color="#E5E5E5"> primes right now if your source</font>

351
00:20:57,380 --> 00:21:01,670
of randomness<font color="#E5E5E5"> or the way that</font><font color="#CCCCCC"> you apply</font>

352
00:20:59,420 --> 00:21:04,490
it or the way<font color="#E5E5E5"> that you use it is</font><font color="#CCCCCC"> not</font>

353
00:21:01,670 --> 00:21:10,970
perfect<font color="#E5E5E5"> then you're most likely to have</font>

354
00:21:04,490 --> 00:21:13,760
not really random<font color="#CCCCCC"> Prime's</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> not all of</font>

355
00:21:10,970 --> 00:21:17,900
<font color="#CCCCCC">them so if both</font><font color="#E5E5E5"> Prime's are common then</font>

356
00:21:13,760 --> 00:21:21,020
<font color="#E5E5E5">you're here in the</font><font color="#CCCCCC"> 71,000</font><font color="#E5E5E5"> cases very bad</font>

357
00:21:17,900 --> 00:21:21,860
<font color="#E5E5E5">cases but this is a very bad case as</font>

358
00:21:21,020 --> 00:21:24,670
well<font color="#E5E5E5"> right</font>

359
00:21:21,860 --> 00:21:28,340
so<font color="#E5E5E5"> so we can</font><font color="#CCCCCC"> see actually that that</font>

360
00:21:24,670 --> 00:21:31,780
<font color="#E5E5E5">getting random</font><font color="#CCCCCC"> Ivy's and random Keys and</font>

361
00:21:28,340 --> 00:21:34,909
random seeds<font color="#E5E5E5"> it is a difficult task</font><font color="#CCCCCC"> and</font>

362
00:21:31,780 --> 00:21:38,059
there are failures again and again it is

363
00:21:34,910 --> 00:21:43,850
just<font color="#E5E5E5"> interesting</font><font color="#CCCCCC"> to say I'll just show</font>

364
00:21:38,059 --> 00:21:48,320
some some<font color="#E5E5E5"> computations it is interesting</font>

365
00:21:43,850 --> 00:21:50,990
to<font color="#CCCCCC"> actually to</font><font color="#E5E5E5"> look at these data 6.4</font>

366
00:21:48,320 --> 00:21:55,360
million keys and 71 thousand were

367
00:21:50,990 --> 00:21:59,600
compromised<font color="#E5E5E5"> plus</font><font color="#CCCCCC"> 13,000</font><font color="#E5E5E5"> and do some</font>

368
00:21:55,360 --> 00:22:00,500
computations<font color="#E5E5E5"> of how much entropy is in</font>

369
00:21:59,600 --> 00:22:03,469
this

370
00:22:00,500 --> 00:22:06,620
key in the public key<font color="#E5E5E5"> so we did some</font>

371
00:22:03,470 --> 00:22:13,460
computations<font color="#E5E5E5"> and it turned out that the</font>

372
00:22:06,620 --> 00:22:17,000
average RSA key has only 32 32 33 bits

373
00:22:13,460 --> 00:22:19,310
of entropy this<font color="#CCCCCC"> this is the the abstract</font>

374
00:22:17,000 --> 00:22:23,600
conclusion from this experiment right

375
00:22:19,310 --> 00:22:27,320
<font color="#E5E5E5">now</font><font color="#CCCCCC"> 32 bits of entropy is not very much</font>

376
00:22:23,600 --> 00:22:30,320
<font color="#E5E5E5">right it can easily today be brute force</font>

377
00:22:27,320 --> 00:22:37,820
<font color="#E5E5E5">and we will see later</font><font color="#CCCCCC"> how easily</font><font color="#E5E5E5"> you can</font>

378
00:22:30,320 --> 00:22:43,010
brute force a<font color="#E5E5E5"> 32 bit entropy source so</font>

379
00:22:37,820 --> 00:22:49,840
again<font color="#E5E5E5"> and now in May 2006 16 there was</font>

380
00:22:43,010 --> 00:22:52,610
another paper<font color="#E5E5E5"> by these gentlemen</font><font color="#CCCCCC"> nonce</font>

381
00:22:49,840 --> 00:22:55,550
disrespecting adversaries practical

382
00:22:52,610 --> 00:22:59,060
forgery attacks on<font color="#E5E5E5"> GS GCM in TLS and I</font>

383
00:22:55,550 --> 00:23:01,690
just this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> from the abstract</font><font color="#E5E5E5"> we</font>

384
00:22:59,060 --> 00:23:07,040
identified<font color="#E5E5E5"> the hundred and</font><font color="#CCCCCC"> eighty-four</font>

385
00:23:01,690 --> 00:23:09,860
HTTP servers repeating<font color="#E5E5E5"> nonces</font><font color="#CCCCCC"> ok and I</font>

386
00:23:07,040 --> 00:23:12,200
explained<font color="#CCCCCC"> there the worst</font><font color="#E5E5E5"> nightmare when</font>

387
00:23:09,860 --> 00:23:14,120
<font color="#E5E5E5">you're doing a use GCM for privacy and</font>

388
00:23:12,200 --> 00:23:17,210
authentication<font color="#E5E5E5"> is that you repeated a</font>

389
00:23:14,120 --> 00:23:19,370
nonce<font color="#E5E5E5"> so you lost the privacy of these</font>

390
00:23:17,210 --> 00:23:20,120
two<font color="#E5E5E5"> messages and the authentication</font><font color="#CCCCCC"> of</font>

391
00:23:19,370 --> 00:23:30,290
everything

392
00:23:20,120 --> 00:23:32,330
so just so<font color="#E5E5E5"> 184 cases where we're not</font>

393
00:23:30,290 --> 00:23:38,409
<font color="#E5E5E5">really</font><font color="#CCCCCC"> we're repeating nonsense and also</font>

394
00:23:32,330 --> 00:23:42,570
they discovered<font color="#E5E5E5"> over</font><font color="#CCCCCC"> 70,000 cases or</font>

395
00:23:38,410 --> 00:23:46,580
HTTP servers where

396
00:23:42,570 --> 00:23:49,769
where there is<font color="#E5E5E5"> a large risk of repeating</font>

397
00:23:46,580 --> 00:23:52,769
repeating<font color="#CCCCCC"> denounces</font><font color="#E5E5E5"> so see again and</font>

398
00:23:49,769 --> 00:23:55,139
again<font color="#CCCCCC"> this</font><font color="#E5E5E5"> problem of randomness is</font>

399
00:23:52,769 --> 00:23:57,210
appearing failures<font color="#E5E5E5"> with randomness</font>

400
00:23:55,139 --> 00:24:00,539
appear again and again<font color="#E5E5E5"> and especially in</font>

401
00:23:57,210 --> 00:24:04,909
the AES GCM case<font color="#E5E5E5"> were the worst thing</font>

402
00:24:00,539 --> 00:24:09,269
you can<font color="#E5E5E5"> do is repeat</font><font color="#CCCCCC"> the nonce</font><font color="#E5E5E5"> all right</font>

403
00:24:04,909 --> 00:24:11,519
so the conclusion is that randomness can

404
00:24:09,269 --> 00:24:14,909
repeat and<font color="#E5E5E5"> it does repeat so what can we</font>

405
00:24:11,519 --> 00:24:17,909
<font color="#CCCCCC">do this is</font><font color="#E5E5E5"> the this</font><font color="#CCCCCC"> is a s</font><font color="#E5E5E5"> GCM it is now</font>

406
00:24:14,909 --> 00:24:21,149
used<font color="#E5E5E5"> everywhere there is dedicated the</font>

407
00:24:17,909 --> 00:24:23,340
hardware instructions and devices<font color="#CCCCCC"> that</font>

408
00:24:21,149 --> 00:24:25,889
have<font color="#CCCCCC"> dedicated hardware to speed this up</font>

409
00:24:23,340 --> 00:24:28,199
everyone is using this and it is by far

410
00:24:25,889 --> 00:24:29,969
<font color="#CCCCCC">the best mode if</font><font color="#E5E5E5"> you use it correctly</font>

411
00:24:28,200 --> 00:24:37,200
<font color="#E5E5E5">it's the best mode compared to</font>

412
00:24:29,970 --> 00:24:42,210
everything else<font color="#E5E5E5"> so can we find</font><font color="#CCCCCC"> a scheme</font>

413
00:24:37,200 --> 00:24:44,429
<font color="#E5E5E5">that would be resistant to nonce misuse</font>

414
00:24:42,210 --> 00:24:48,600
nothing happens if you repeat repeat<font color="#E5E5E5"> the</font>

415
00:24:44,429 --> 00:24:51,629
<font color="#CCCCCC">nonce you want the same performance</font>

416
00:24:48,600 --> 00:24:55,740
benefits of the AES<font color="#CCCCCC"> DCM so you want the</font>

417
00:24:51,629 --> 00:24:58,620
security<font color="#CCCCCC"> you</font><font color="#E5E5E5"> want the performance you</font>

418
00:24:55,740 --> 00:25:01,139
want<font color="#E5E5E5"> it to be a small change compared to</font>

419
00:24:58,620 --> 00:25:03,508
a<font color="#CCCCCC"> yes GCM because all the libraries and</font>

420
00:25:01,139 --> 00:25:06,600
<font color="#E5E5E5">so much hardware and devices and</font>

421
00:25:03,509 --> 00:25:10,980
protocols<font color="#E5E5E5"> are already using a s GCM</font><font color="#CCCCCC"> so</font>

422
00:25:06,600 --> 00:25:13,500
there<font color="#E5E5E5"> are highly tuned assembly routines</font>

423
00:25:10,980 --> 00:25:17,070
<font color="#CCCCCC">that do implementations and Java code</font>

424
00:25:13,500 --> 00:25:18,659
and<font color="#CCCCCC"> whatever so if we can</font><font color="#E5E5E5"> find something</font>

425
00:25:17,070 --> 00:25:22,370
like<font color="#E5E5E5"> this that would use the same</font>

426
00:25:18,659 --> 00:25:26,970
<font color="#E5E5E5">building</font><font color="#CCCCCC"> blocks we can at least reuse</font>

427
00:25:22,370 --> 00:25:29,340
reuse components so deployment would be

428
00:25:26,970 --> 00:25:31,320
easy<font color="#E5E5E5"> and it would be very efficient so</font>

429
00:25:29,340 --> 00:25:33,779
<font color="#CCCCCC">we can we find something</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> has</font>

430
00:25:31,320 --> 00:25:38,250
<font color="#CCCCCC">security performance easily deployable</font>

431
00:25:33,779 --> 00:25:41,129
<font color="#CCCCCC">and very efficient with reuse so</font>

432
00:25:38,250 --> 00:25:42,269
<font color="#E5E5E5">wouldn't it be excellent if we can find</font>

433
00:25:41,129 --> 00:25:46,110
<font color="#CCCCCC">something like</font><font color="#E5E5E5"> this</font>

434
00:25:42,269 --> 00:25:49,409
so yes there<font color="#E5E5E5"> is there</font><font color="#CCCCCC"> is something</font><font color="#E5E5E5"> like</font>

435
00:25:46,110 --> 00:25:55,149
this<font color="#E5E5E5"> int</font><font color="#CCCCCC"> so we can have the cake and</font><font color="#E5E5E5"> eat</font>

436
00:25:49,409 --> 00:26:04,420
it so this<font color="#E5E5E5"> is what I'm going</font><font color="#CCCCCC"> to explain</font>

437
00:25:55,150 --> 00:26:08,520
and I will just just just<font color="#E5E5E5"> go in and</font>

438
00:26:04,420 --> 00:26:12,280
explain something<font color="#CCCCCC"> about the SIV</font>

439
00:26:08,520 --> 00:26:17,980
<font color="#E5E5E5">encryption it's it is actually a general</font>

440
00:26:12,280 --> 00:26:20,470
<font color="#E5E5E5">concept</font><font color="#CCCCCC"> SIV stands for synthetic ivy it</font>

441
00:26:17,980 --> 00:26:22,870
is from a<font color="#E5E5E5"> paper by a</font><font color="#CCCCCC"> rug away and</font>

442
00:26:20,470 --> 00:26:27,280
<font color="#E5E5E5">Shrimpton they had some proofs about</font>

443
00:26:22,870 --> 00:26:28,899
<font color="#E5E5E5">this and they are saying</font><font color="#CCCCCC"> you have two</font>

444
00:26:27,280 --> 00:26:30,910
keys one<font color="#CCCCCC"> of them is going to be</font><font color="#E5E5E5"> the</font>

445
00:26:28,900 --> 00:26:34,210
encryption<font color="#E5E5E5"> key</font><font color="#CCCCCC"> and one of them is going</font>

446
00:26:30,910 --> 00:26:36,880
to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> the authentication key and you</font>

447
00:26:34,210 --> 00:26:39,070
have a<font color="#E5E5E5"> message and unknowns and the</font>

448
00:26:36,880 --> 00:26:41,230
first step you take some PRF some

449
00:26:39,070 --> 00:26:43,629
pseudo-random function whatever you want

450
00:26:41,230 --> 00:26:47,110
that uses the<font color="#CCCCCC"> first key okay</font><font color="#E5E5E5"> the first</font>

451
00:26:43,630 --> 00:26:50,410
<font color="#E5E5E5">key is the authentication a key and you</font>

452
00:26:47,110 --> 00:26:54,820
compute the result<font color="#E5E5E5"> let's say that the</font>

453
00:26:50,410 --> 00:26:58,360
result is T and in<font color="#CCCCCC"> the step</font><font color="#E5E5E5"> the second</font>

454
00:26:54,820 --> 00:27:01,090
step<font color="#E5E5E5"> you encrypt the message m using the</font>

455
00:26:58,360 --> 00:27:04,300
second key the encryption key and<font color="#E5E5E5"> the</font>

456
00:27:01,090 --> 00:27:06,550
nonce<font color="#E5E5E5"> T as the</font><font color="#CCCCCC"> nomes</font><font color="#E5E5E5"> and then you get</font>

457
00:27:04,300 --> 00:27:07,840
the result this is the<font color="#CCCCCC"> ciphertext and</font><font color="#E5E5E5"> of</font>

458
00:27:06,550 --> 00:27:12,700
course decryption is the other way

459
00:27:07,840 --> 00:27:16,840
<font color="#CCCCCC">around so the trick is actually</font><font color="#E5E5E5"> that the</font>

460
00:27:12,700 --> 00:27:20,250
nonce<font color="#CCCCCC"> that you chose</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the beginning</font><font color="#E5E5E5"> is</font>

461
00:27:16,840 --> 00:27:22,510
not the nonce that goes into<font color="#E5E5E5"> the actual</font>

462
00:27:20,250 --> 00:27:24,880
<font color="#E5E5E5">encryption because what goes into the</font>

463
00:27:22,510 --> 00:27:29,950
actual<font color="#CCCCCC"> encryption is the result of the</font>

464
00:27:24,880 --> 00:27:34,330
nonce<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the message and the first key</font>

465
00:27:29,950 --> 00:27:36,820
so so the the<font color="#E5E5E5"> IV or the nonce that is</font>

466
00:27:34,330 --> 00:27:39,428
used for<font color="#CCCCCC"> the encryption</font><font color="#E5E5E5"> is synthetic in</font>

467
00:27:36,820 --> 00:27:41,950
a sense it's not<font color="#E5E5E5"> the one that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> chose</font>

468
00:27:39,429 --> 00:27:46,900
<font color="#CCCCCC">for the</font><font color="#E5E5E5"> encryption it depends both on</font>

469
00:27:41,950 --> 00:27:51,010
the nonce and the message so so if you

470
00:27:46,900 --> 00:27:54,640
repeat the nonce<font color="#CCCCCC"> and you have a</font>

471
00:27:51,010 --> 00:27:56,379
different message<font color="#CCCCCC"> then then then the IV</font>

472
00:27:54,640 --> 00:27:58,150
<font color="#E5E5E5">that is at the IV that is going to be</font>

473
00:27:56,380 --> 00:28:02,530
used for<font color="#E5E5E5"> the encryption is going to be</font>

474
00:27:58,150 --> 00:28:05,620
different so<font color="#CCCCCC"> we all if you repeat both</font>

475
00:28:02,530 --> 00:28:07,720
the nonce<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the message you'll get the</font>

476
00:28:05,620 --> 00:28:08,590
same<font color="#E5E5E5"> T but</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and the same</font><font color="#CCCCCC"> encryption</font>

477
00:28:07,720 --> 00:28:11,700
but this is not

478
00:28:08,590 --> 00:28:13,600
<font color="#E5E5E5">surprise right because this mode of</font>

479
00:28:11,700 --> 00:28:15,429
<font color="#E5E5E5">encryption and authentication is</font>

480
00:28:13,600 --> 00:28:16,719
<font color="#E5E5E5">deterministic of course if you use</font><font color="#CCCCCC"> the</font>

481
00:28:15,429 --> 00:28:18,940
same nonce and<font color="#E5E5E5"> the same message you'll</font>

482
00:28:16,720 --> 00:28:20,980
get the same result<font color="#CCCCCC"> there</font><font color="#E5E5E5"> is no security</font>

483
00:28:18,940 --> 00:28:23,710
leak from that except<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the fact that</font>

484
00:28:20,980 --> 00:28:25,980
the<font color="#E5E5E5"> message is the same message</font><font color="#CCCCCC"> but this</font>

485
00:28:23,710 --> 00:28:29,289
is inevitable<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is part of of</font>

486
00:28:25,980 --> 00:28:33,909
<font color="#E5E5E5">deterministic of over deterministic came</font>

487
00:28:29,289 --> 00:28:35,350
out so the<font color="#CCCCCC"> problem with that paper was</font>

488
00:28:33,909 --> 00:28:38,590
<font color="#CCCCCC">that there was no efficient</font>

489
00:28:35,350 --> 00:28:40,330
instantiation<font color="#CCCCCC"> to to actually do</font><font color="#E5E5E5"> this it</font>

490
00:28:38,590 --> 00:28:42,600
was just<font color="#E5E5E5"> something theoretical and</font>

491
00:28:40,330 --> 00:28:45,340
whatever was proposed was actually

492
00:28:42,600 --> 00:28:48,158
performing at the level of the<font color="#E5E5E5"> CBC</font>

493
00:28:45,340 --> 00:28:53,879
encryption which we wanted to<font color="#E5E5E5"> abandon as</font>

494
00:28:48,159 --> 00:28:58,750
you saw previously<font color="#CCCCCC"> so in this is work</font>

495
00:28:53,880 --> 00:29:00,850
<font color="#E5E5E5">that that I've been doing</font><font color="#CCCCCC"> in 2015 with</font>

496
00:28:58,750 --> 00:29:02,770
you<font color="#CCCCCC"> the Lindell from bar-ilan university</font>

497
00:29:00,850 --> 00:29:07,110
who actually<font color="#E5E5E5"> wrote a paper with we</font>

498
00:29:02,770 --> 00:29:10,779
<font color="#E5E5E5">called it nonce misuse resistant mode</font>

499
00:29:07,110 --> 00:29:15,309
for less than<font color="#CCCCCC"> a</font><font color="#E5E5E5"> cycle per byte so you</font>

500
00:29:10,779 --> 00:29:19,690
can and and this<font color="#E5E5E5"> this was published in</font>

501
00:29:15,309 --> 00:29:22,809
2015<font color="#E5E5E5"> and in 2016 we teamed up with Adam</font>

502
00:29:19,690 --> 00:29:25,090
Langley from from Google and we had an

503
00:29:22,809 --> 00:29:29,799
<font color="#E5E5E5">improved version and it was submitted</font><font color="#CCCCCC"> to</font>

504
00:29:25,090 --> 00:29:33,399
<font color="#CCCCCC">the IETF</font><font color="#E5E5E5"> as a proposal for a mode this</font>

505
00:29:29,799 --> 00:29:36,820
was already in 2016 beginning of 2016

506
00:29:33,399 --> 00:29:39,549
now we are in 2017 it has gone through

507
00:29:36,820 --> 00:29:43,480
<font color="#E5E5E5">several revisions and I guess that it</font>

508
00:29:39,549 --> 00:29:49,080
would become an RFC<font color="#E5E5E5"> very soon so in the</font>

509
00:29:43,480 --> 00:29:53,409
<font color="#E5E5E5">next meeting or so so it's</font><font color="#CCCCCC"> underway</font><font color="#E5E5E5"> so</font>

510
00:29:49,080 --> 00:29:56,740
what what<font color="#E5E5E5"> is this wonderful mode so</font><font color="#CCCCCC"> you</font>

511
00:29:53,409 --> 00:29:59,380
can think about it<font color="#E5E5E5"> for</font><font color="#CCCCCC"> simplicity it's</font>

512
00:29:56,740 --> 00:30:03,880
like doing a yes GCM<font color="#E5E5E5"> but in reversed</font>

513
00:29:59,380 --> 00:30:07,960
order<font color="#E5E5E5"> so in a yes in</font><font color="#CCCCCC"> a yes GCM you take</font>

514
00:30:03,880 --> 00:30:09,909
the message you take the nonce<font color="#CCCCCC"> you have</font>

515
00:30:07,960 --> 00:30:13,000
the key<font color="#CCCCCC"> you first</font><font color="#E5E5E5"> encrypt the message</font>

516
00:30:09,909 --> 00:30:16,480
and then<font color="#E5E5E5"> you apply the authentication on</font>

517
00:30:13,000 --> 00:30:19,510
the ciphertext<font color="#CCCCCC"> that's the definition and</font>

518
00:30:16,480 --> 00:30:22,429
then it<font color="#E5E5E5"> means that if</font><font color="#CCCCCC"> you repeated</font><font color="#E5E5E5"> the</font>

519
00:30:19,510 --> 00:30:25,549
nonce twice<font color="#E5E5E5"> you're lost both of</font><font color="#CCCCCC"> them</font>

520
00:30:22,429 --> 00:30:27,980
<font color="#CCCCCC">vacation and integrity but</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> AES GCM</font>

521
00:30:25,549 --> 00:30:30,590
save the<font color="#E5E5E5"> synthetic</font><font color="#CCCCCC"> ivy we just do</font><font color="#E5E5E5"> this</font>

522
00:30:27,980 --> 00:30:32,509
the other<font color="#E5E5E5"> way</font><font color="#CCCCCC"> around</font><font color="#E5E5E5"> we take the G hash</font>

523
00:30:30,590 --> 00:30:34,490
and this is the component<font color="#E5E5E5"> the hash</font>

524
00:30:32,509 --> 00:30:38,299
function<font color="#CCCCCC"> that</font><font color="#E5E5E5"> goes over the message and</font>

525
00:30:34,490 --> 00:30:40,639
the nonce<font color="#CCCCCC"> and we apply some universal</font>

526
00:30:38,299 --> 00:30:43,309
hash function on this<font color="#E5E5E5"> with some good</font>

527
00:30:40,639 --> 00:30:47,570
properties I'll skip this so we<font color="#E5E5E5"> have a</font>

528
00:30:43,309 --> 00:30:49,840
value<font color="#E5E5E5"> T that depends on the message</font><font color="#CCCCCC"> and</font>

529
00:30:47,570 --> 00:30:54,499
the nonce<font color="#E5E5E5"> and actually also on the</font><font color="#CCCCCC"> aad</font>

530
00:30:49,840 --> 00:30:56,990
<font color="#E5E5E5">and this is being used or 96 bits out of</font>

531
00:30:54,499 --> 00:30:59,720
this so<font color="#E5E5E5"> technically actually 95 beats</font>

532
00:30:56,990 --> 00:31:02,840
<font color="#E5E5E5">out of</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> because we want one bit to</font>

533
00:30:59,720 --> 00:31:06,559
differentiate blocks<font color="#E5E5E5"> for encryption and</font>

534
00:31:02,840 --> 00:31:09,740
blocks for authentication<font color="#CCCCCC"> so 95 bits are</font>

535
00:31:06,559 --> 00:31:11,360
<font color="#CCCCCC">used as a randomized synthetic</font><font color="#E5E5E5"> IV for</font>

536
00:31:09,740 --> 00:31:13,730
the counter mode and then we<font color="#CCCCCC"> just</font>

537
00:31:11,360 --> 00:31:16,508
encrypt so you can think<font color="#E5E5E5"> about it it has</font>

538
00:31:13,730 --> 00:31:23,710
the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> properties or the same</font>

539
00:31:16,509 --> 00:31:28,999
<font color="#CCCCCC">underlying elements of a</font><font color="#E5E5E5"> a s GCM but</font>

540
00:31:23,710 --> 00:31:32,629
nothing happens<font color="#E5E5E5"> if you misuse an</font><font color="#CCCCCC"> unsafe</font>

541
00:31:28,999 --> 00:31:34,970
use and on<font color="#CCCCCC"> spice unless you are</font><font color="#E5E5E5"> using</font>

542
00:31:32,629 --> 00:31:38,570
<font color="#E5E5E5">the same message twice and the same</font>

543
00:31:34,970 --> 00:31:40,039
<font color="#CCCCCC">knowns and then ok somebody who is</font>

544
00:31:38,570 --> 00:31:41,928
<font color="#E5E5E5">looking at this traffic would know okay</font>

545
00:31:40,039 --> 00:31:45,860
<font color="#CCCCCC">you've done twice the same thing that's</font>

546
00:31:41,929 --> 00:31:49,779
<font color="#E5E5E5">all the clicks out the improper</font>

547
00:31:45,860 --> 00:31:53,090
<font color="#E5E5E5">important properties that</font><font color="#CCCCCC"> the underlying</font>

548
00:31:49,779 --> 00:31:55,279
elements are identical<font color="#CCCCCC"> to the existing</font>

549
00:31:53,090 --> 00:31:59,029
<font color="#CCCCCC">hdzm</font><font color="#E5E5E5"> it means that we can take the same</font>

550
00:31:55,279 --> 00:32:02,029
<font color="#E5E5E5">we found some you can take the same</font>

551
00:31:59,029 --> 00:32:04,820
library<font color="#E5E5E5"> like</font><font color="#CCCCCC"> open SSL library</font><font color="#E5E5E5"> and call</font>

552
00:32:02,029 --> 00:32:09,350
the same primitives<font color="#E5E5E5"> and get this this</font>

553
00:32:04,820 --> 00:32:14,090
encryption<font color="#E5E5E5"> another element is that</font><font color="#CCCCCC"> was</font>

554
00:32:09,350 --> 00:32:17,330
added to that<font color="#CCCCCC"> was added to this is a</font>

555
00:32:14,090 --> 00:32:19,789
derived key the right key mode and this

556
00:32:17,330 --> 00:32:22,789
<font color="#E5E5E5">is to extend the lifetime of a key</font>

557
00:32:19,789 --> 00:32:25,970
because<font color="#CCCCCC"> this is now becoming yet another</font>

558
00:32:22,789 --> 00:32:28,940
<font color="#E5E5E5">problem</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to use you want</font><font color="#CCCCCC"> the</font>

559
00:32:25,970 --> 00:32:33,940
server to<font color="#E5E5E5"> have a key</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> would last for</font>

560
00:32:28,940 --> 00:32:35,410
<font color="#E5E5E5">a long time and with high volume</font>

561
00:32:33,940 --> 00:32:39,520
encryptions

562
00:32:35,410 --> 00:32:43,120
nowadays and so<font color="#CCCCCC"> much data the kids are</font>

563
00:32:39,520 --> 00:32:46,680
wearing<font color="#E5E5E5"> out quite quickly</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> for example</font>

564
00:32:43,120 --> 00:32:50,139
if you are<font color="#E5E5E5"> using with AES GCM or with</font>

565
00:32:46,680 --> 00:32:53,710
<font color="#CCCCCC">with the GCM sieve</font><font color="#E5E5E5"> you're using a random</font>

566
00:32:50,140 --> 00:32:57,910
nonce<font color="#E5E5E5"> or a synthetically random nonce</font>

567
00:32:53,710 --> 00:33:01,810
<font color="#E5E5E5">and it has only 95 bits or 96 bits it</font>

568
00:32:57,910 --> 00:33:06,010
means that after<font color="#CCCCCC"> 2 to</font><font color="#E5E5E5"> the 48 times you</font>

569
00:33:01,810 --> 00:33:09,190
will repeat the nonce<font color="#E5E5E5"> and you're back in</font>

570
00:33:06,010 --> 00:33:11,290
<font color="#CCCCCC">employing problems</font><font color="#E5E5E5"> you might say</font><font color="#CCCCCC"> 2 to</font>

571
00:33:09,190 --> 00:33:14,680
the 48 is not a problem but<font color="#E5E5E5"> it is a</font>

572
00:33:11,290 --> 00:33:18,850
<font color="#E5E5E5">problem especially</font><font color="#CCCCCC"> as the specifications</font>

573
00:33:14,680 --> 00:33:21,460
of of NIST<font color="#E5E5E5"> require that the probability</font>

574
00:33:18,850 --> 00:33:23,709
of repeating<font color="#CCCCCC"> unknowns</font><font color="#E5E5E5"> in a randomized IV</font>

575
00:33:21,460 --> 00:33:26,680
implementation should<font color="#E5E5E5"> not be more</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> 2</font>

576
00:33:23,710 --> 00:33:29,710
to them<font color="#E5E5E5"> -</font><font color="#CCCCCC"> 32</font><font color="#E5E5E5"> that's the requirement so</font>

577
00:33:26,680 --> 00:33:33,970
<font color="#CCCCCC">this means actually that you cannot use</font>

578
00:33:29,710 --> 00:33:36,580
AES GCM and also GCM sieve<font color="#E5E5E5"> you cannot</font>

579
00:33:33,970 --> 00:33:40,450
use it<font color="#E5E5E5"> more than</font><font color="#CCCCCC"> 2 to the</font><font color="#E5E5E5"> 32 times</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> to</font>

580
00:33:36,580 --> 00:33:43,149
<font color="#E5E5E5">the 32 times are exhausted quite fast</font>

581
00:33:40,450 --> 00:33:47,380
<font color="#CCCCCC">right you can imagine we'll see later I</font>

582
00:33:43,150 --> 00:33:50,580
build up some some tension for for the 2

583
00:33:47,380 --> 00:33:52,090
to<font color="#E5E5E5"> the 32</font><font color="#CCCCCC"> so what we did in the AES GCM</font>

584
00:33:50,580 --> 00:33:55,300
<font color="#E5E5E5">sieve</font>

585
00:33:52,090 --> 00:33:58,689
we also added a key derivation<font color="#E5E5E5"> so this</font>

586
00:33:55,300 --> 00:34:01,600
is just<font color="#CCCCCC"> a scheme that</font><font color="#E5E5E5"> is saying the</font>

587
00:33:58,690 --> 00:34:03,970
following<font color="#E5E5E5"> you have a nonce you have</font>

588
00:34:01,600 --> 00:34:06,340
added date and you have<font color="#CCCCCC"> a message and</font>

589
00:34:03,970 --> 00:34:10,080
<font color="#E5E5E5">instead of going</font><font color="#CCCCCC"> and using</font><font color="#E5E5E5"> the</font>

590
00:34:06,340 --> 00:34:13,299
cryptographic schemes<font color="#E5E5E5"> ECMC</font><font color="#CCCCCC"> or whatever</font>

591
00:34:10,080 --> 00:34:15,460
you first pass<font color="#CCCCCC"> the nonce</font>

592
00:34:13,300 --> 00:34:17,710
through a key derivation function some

593
00:34:15,460 --> 00:34:20,110
pseudo-random function and the

594
00:34:17,710 --> 00:34:23,409
<font color="#E5E5E5">pseudo-random function would spit out a</font>

595
00:34:20,110 --> 00:34:25,900
key that would be used<font color="#CCCCCC"> for that</font><font color="#E5E5E5"> nonce</font>

596
00:34:23,409 --> 00:34:28,500
<font color="#CCCCCC">and then you continue</font><font color="#E5E5E5"> as usual so</font>

597
00:34:25,900 --> 00:34:33,130
basically you can apply to<font color="#E5E5E5"> any</font>

598
00:34:28,500 --> 00:34:35,650
<font color="#E5E5E5">encryption scheme you just prepend</font><font color="#CCCCCC"> a key</font>

599
00:34:33,130 --> 00:34:37,780
derivation function<font color="#E5E5E5"> before with the</font>

600
00:34:35,650 --> 00:34:40,570
encryption<font color="#CCCCCC"> of course you need to do the</font>

601
00:34:37,780 --> 00:34:44,010
same for<font color="#E5E5E5"> for decryption right and this</font>

602
00:34:40,570 --> 00:34:46,510
extends the lifetime of the key so just

603
00:34:44,010 --> 00:34:48,230
without getting<font color="#E5E5E5"> to too</font><font color="#CCCCCC"> many technical</font>

604
00:34:46,510 --> 00:34:52,129
<font color="#E5E5E5">details</font>

605
00:34:48,230 --> 00:34:54,530
<font color="#E5E5E5">a s GCM sieve that uses this</font><font color="#CCCCCC"> mold or</font>

606
00:34:52,129 --> 00:35:00,650
this trick<font color="#E5E5E5"> can encrypt up to</font><font color="#CCCCCC"> two to the</font>

607
00:34:54,530 --> 00:35:01,910
64 messages there is some<font color="#E5E5E5"> restriction</font>

608
00:35:00,650 --> 00:35:04,460
they cannot be too long

609
00:35:01,910 --> 00:35:07,339
you cannot<font color="#E5E5E5"> encrypt to to the 64 messages</font>

610
00:35:04,460 --> 00:35:11,000
each one of them is of length<font color="#CCCCCC"> 2 to the</font>

611
00:35:07,339 --> 00:35:13,400
32 blocks<font color="#E5E5E5"> but nobody really wants to do</font>

612
00:35:11,000 --> 00:35:15,980
to encrypt so much data I mean<font color="#E5E5E5"> typical</font>

613
00:35:13,400 --> 00:35:19,369
messages are much shorter<font color="#CCCCCC"> so for short</font>

614
00:35:15,980 --> 00:35:22,700
<font color="#CCCCCC">messages you can encrypt</font><font color="#E5E5E5"> up to 2 to the</font>

615
00:35:19,369 --> 00:35:26,410
64 this is basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> limit of of of</font>

616
00:35:22,700 --> 00:35:29,589
encryption<font color="#CCCCCC"> in general with 128 block</font>

617
00:35:26,410 --> 00:35:34,250
bits a block and<font color="#E5E5E5"> this is what we use for</font>

618
00:35:29,589 --> 00:35:38,960
AES so bottom line

619
00:35:34,250 --> 00:35:44,900
<font color="#CCCCCC">okay</font><font color="#E5E5E5"> so this is the compact the</font>

620
00:35:38,960 --> 00:35:49,579
comparison<font color="#CCCCCC"> oh there is some line here</font>

621
00:35:44,900 --> 00:35:52,520
that<font color="#E5E5E5"> doesn't show</font><font color="#CCCCCC"> on so this</font><font color="#E5E5E5"> is the GCM</font>

622
00:35:49,579 --> 00:35:58,250
sieve the encryption and the decryption

623
00:35:52,520 --> 00:36:02,810
<font color="#E5E5E5">and you have on</font><font color="#CCCCCC"> three CPUs but what we</font>

624
00:35:58,250 --> 00:36:06,380
<font color="#CCCCCC">are</font><font color="#E5E5E5"> interested in nowadays</font><font color="#CCCCCC"> in 2017 is</font>

625
00:36:02,810 --> 00:36:13,009
the<font color="#CCCCCC"> skylake and processors and and</font>

626
00:36:06,380 --> 00:36:16,310
further<font color="#E5E5E5"> where</font><font color="#CCCCCC"> a es GCM is at point</font><font color="#E5E5E5"> 65</font>

627
00:36:13,010 --> 00:36:18,260
and as I<font color="#E5E5E5"> told you this is where you get</font>

628
00:36:16,310 --> 00:36:20,328
<font color="#E5E5E5">authenticated encryption at the same</font>

629
00:36:18,260 --> 00:36:22,190
performance<font color="#E5E5E5"> cost of only the encryption</font>

630
00:36:20,329 --> 00:36:26,060
so you cannot get<font color="#E5E5E5"> better than that</font>

631
00:36:22,190 --> 00:36:29,089
<font color="#E5E5E5">and we can see that the encryption is</font>

632
00:36:26,060 --> 00:36:33,020
point<font color="#E5E5E5"> 94 so the promise was less than a</font>

633
00:36:29,089 --> 00:36:38,000
cycle per byte and magically decryption

634
00:36:33,020 --> 00:36:40,640
is also<font color="#E5E5E5"> a point 65 so for decryption you</font>

635
00:36:38,000 --> 00:36:42,829
can decrypt at the same cost of of the

636
00:36:40,640 --> 00:36:45,770
corruption<font color="#E5E5E5"> and check the authentication</font>

637
00:36:42,829 --> 00:36:47,540
the reason<font color="#CCCCCC"> the surprising reason why</font>

638
00:36:45,770 --> 00:36:49,520
there<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> difference between encryption</font>

639
00:36:47,540 --> 00:36:52,540
and decryption<font color="#CCCCCC"> is the mode</font><font color="#E5E5E5"> in itself</font>

640
00:36:49,520 --> 00:36:54,800
because when you<font color="#CCCCCC"> are encrypting</font>

641
00:36:52,540 --> 00:36:57,710
theoretically you cannot do<font color="#E5E5E5"> better than</font>

642
00:36:54,800 --> 00:37:02,030
first pass over the whole message<font color="#E5E5E5"> and</font>

643
00:36:57,710 --> 00:37:05,450
compute<font color="#CCCCCC"> the hash function</font><font color="#E5E5E5"> and then start</font>

644
00:37:02,030 --> 00:37:08,380
so there is built-in serialization in

645
00:37:05,450 --> 00:37:11,629
the mode itself<font color="#E5E5E5"> whereas when you are</font>

646
00:37:08,380 --> 00:37:13,760
decrypting<font color="#CCCCCC"> you can interleave these</font>

647
00:37:11,630 --> 00:37:17,360
operations and<font color="#E5E5E5"> and do the same trick as</font>

648
00:37:13,760 --> 00:37:19,490
in<font color="#CCCCCC"> AES GCM so this is the reason why</font>

649
00:37:17,360 --> 00:37:28,730
encryption and decryption are different

650
00:37:19,490 --> 00:37:31,790
<font color="#E5E5E5">so in summary in summary a nonce misuse</font>

651
00:37:28,730 --> 00:37:34,910
resistant authenticated encryption at

652
00:37:31,790 --> 00:37:37,310
extremely low<font color="#E5E5E5"> cost almost as the AES say</font>

653
00:37:34,910 --> 00:37:38,779
GCM this is something of value<font color="#E5E5E5"> because</font>

654
00:37:37,310 --> 00:37:41,180
<font color="#CCCCCC">we saw that</font><font color="#E5E5E5"> there again and again</font>

655
00:37:38,780 --> 00:37:45,260
problems with generating entropy and

656
00:37:41,180 --> 00:37:48,680
with making<font color="#CCCCCC"> sure that IVs don't repeat</font>

657
00:37:45,260 --> 00:37:50,540
and we<font color="#E5E5E5"> have a proof of security it's</font>

658
00:37:48,680 --> 00:37:55,100
easily deployable because you can<font color="#E5E5E5"> just</font>

659
00:37:50,540 --> 00:37:57,050
<font color="#E5E5E5">use the same libraries and and it is</font>

660
00:37:55,100 --> 00:37:59,000
<font color="#CCCCCC">already ok here it's soon to be</font>

661
00:37:57,050 --> 00:38:04,040
integrated<font color="#CCCCCC"> but Google is already</font><font color="#E5E5E5"> using</font>

662
00:37:59,000 --> 00:38:07,130
this mode in in boring SSL this is their

663
00:38:04,040 --> 00:38:11,660
own their own<font color="#E5E5E5"> version of open</font><font color="#CCCCCC"> SSL and</font>

664
00:38:07,130 --> 00:38:13,700
<font color="#E5E5E5">they are using this this mode and they</font>

665
00:38:11,660 --> 00:38:21,859
are<font color="#E5E5E5"> reducing it for for a certain</font>

666
00:38:13,700 --> 00:38:31,060
<font color="#CCCCCC">application today so this concludes the</font>

667
00:38:21,860 --> 00:38:34,040
<font color="#CCCCCC">first part in the second</font><font color="#E5E5E5"> part is is the</font>

668
00:38:31,060 --> 00:38:38,650
<font color="#E5E5E5">the part where we are going to see how</font>

669
00:38:34,040 --> 00:38:43,180
<font color="#E5E5E5">easy it is to</font><font color="#CCCCCC"> brute force 2 to the</font><font color="#E5E5E5"> 32</font>

670
00:38:38,650 --> 00:38:45,680
<font color="#E5E5E5">bit entropy let me just see how much</font>

671
00:38:43,180 --> 00:38:50,660
time<font color="#E5E5E5"> you might have how much time do I</font>

672
00:38:45,680 --> 00:38:53,859
have what is the how much time do I

673
00:38:50,660 --> 00:38:53,859
still have for this

674
00:38:56,920 --> 00:39:03,860
<font color="#CCCCCC">all right well keep</font><font color="#E5E5E5"> going until you you</font>

675
00:39:01,070 --> 00:39:07,460
throw stones<font color="#E5E5E5"> at me all right so okay</font>

676
00:39:03,860 --> 00:39:09,590
part o is don't encrypt without

677
00:39:07,460 --> 00:39:14,360
authentication<font color="#CCCCCC"> for the audience I even</font>

678
00:39:09,590 --> 00:39:18,050
wrote this in in Portuguese<font color="#E5E5E5"> so that if</font>

679
00:39:14,360 --> 00:39:21,490
you if you<font color="#E5E5E5"> remember anything</font><font color="#CCCCCC"> from this</font>

680
00:39:18,050 --> 00:39:25,660
is<font color="#CCCCCC"> don't do this</font><font color="#E5E5E5"> and keep seeing</font>

681
00:39:21,490 --> 00:39:29,720
technologies that come up with

682
00:39:25,660 --> 00:39:33,319
encryption<font color="#E5E5E5"> so I'll just give</font><font color="#CCCCCC"> you a short</font>

683
00:39:29,720 --> 00:39:38,959
<font color="#E5E5E5">a brief account a historical account</font><font color="#CCCCCC"> of</font>

684
00:39:33,320 --> 00:39:43,640
some progress<font color="#CCCCCC"> in this say in this</font><font color="#E5E5E5"> so in</font>

685
00:39:38,960 --> 00:39:47,300
this<font color="#E5E5E5"> work that I've been doing</font><font color="#CCCCCC"> for some</font>

686
00:39:43,640 --> 00:39:48,470
years<font color="#CCCCCC"> already with what we go is there I</font>

687
00:39:47,300 --> 00:39:50,510
guess

688
00:39:48,470 --> 00:39:52,279
because he's going<font color="#E5E5E5"> to explain there</font><font color="#CCCCCC"> is a</font>

689
00:39:50,510 --> 00:39:58,640
<font color="#E5E5E5">video</font><font color="#CCCCCC"> and I wanted</font><font color="#E5E5E5"> him to explain the</font>

690
00:39:52,280 --> 00:40:00,650
<font color="#E5E5E5">video in</font><font color="#CCCCCC"> Portuguese so so</font><font color="#E5E5E5"> it we call it</font>

691
00:39:58,640 --> 00:40:04,490
the blind at random corruption attacks

692
00:40:00,650 --> 00:40:07,220
<font color="#CCCCCC">so what we were demonstrating is that if</font>

693
00:40:04,490 --> 00:40:09,319
you have memory or you know let's say a

694
00:40:07,220 --> 00:40:11,899
let's take memory this was was<font color="#CCCCCC"> the</font>

695
00:40:09,320 --> 00:40:15,080
attack<font color="#CCCCCC"> and the memory is encrypted</font><font color="#E5E5E5"> but</font>

696
00:40:11,900 --> 00:40:17,360
there is no authentication<font color="#CCCCCC"> and you are</font>

697
00:40:15,080 --> 00:40:20,150
the attacker so you can read and write

698
00:40:17,360 --> 00:40:21,830
the memory that's<font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can read</font>

699
00:40:20,150 --> 00:40:23,630
there if you can read<font color="#E5E5E5"> it you</font><font color="#CCCCCC"> can also</font>

700
00:40:21,830 --> 00:40:25,160
write<font color="#CCCCCC"> it and the reason why it was</font>

701
00:40:23,630 --> 00:40:27,320
encrypted<font color="#CCCCCC"> to begin with was the</font>

702
00:40:25,160 --> 00:40:30,379
assumption that there is an attacker who

703
00:40:27,320 --> 00:40:33,200
can read the memory<font color="#E5E5E5"> and we want to</font>

704
00:40:30,380 --> 00:40:33,970
prevent<font color="#E5E5E5"> you know the</font><font color="#CCCCCC"> protect protect the</font>

705
00:40:33,200 --> 00:40:39,259
privacy

706
00:40:33,970 --> 00:40:42,290
so although the attacker cannot decrypt

707
00:40:39,260 --> 00:40:44,780
the<font color="#CCCCCC"> ciphertext</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> is reading it can</font>

708
00:40:42,290 --> 00:40:48,050
still<font color="#E5E5E5"> make modifications and the</font>

709
00:40:44,780 --> 00:40:51,410
modifications would cause something<font color="#E5E5E5"> to</font>

710
00:40:48,050 --> 00:40:54,710
change in<font color="#E5E5E5"> some unpredictable way and</font>

711
00:40:51,410 --> 00:40:58,100
there<font color="#E5E5E5"> is a like a belief a naive belief</font>

712
00:40:54,710 --> 00:41:02,360
that since this<font color="#E5E5E5"> is so unpredictable and</font>

713
00:40:58,100 --> 00:41:04,569
so so<font color="#E5E5E5"> much not</font><font color="#CCCCCC"> controlled but by the</font>

714
00:41:02,360 --> 00:41:07,430
adversary<font color="#CCCCCC"> that maybe this is good enough</font>

715
00:41:04,570 --> 00:41:09,090
so we already know<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is not good</font>

716
00:41:07,430 --> 00:41:11,490
enough<font color="#CCCCCC"> if</font><font color="#E5E5E5"> your hero nasty</font>

717
00:41:09,090 --> 00:41:15,120
make we made the demonstration<font color="#E5E5E5"> that</font>

718
00:41:11,490 --> 00:41:19,069
<font color="#CCCCCC">showed that we can log into</font><font color="#E5E5E5"> a locked</font>

719
00:41:15,120 --> 00:41:23,700
system with the overriding the memory<font color="#E5E5E5"> in</font>

720
00:41:19,070 --> 00:41:27,420
I'll<font color="#E5E5E5"> just remind the this type of of</font>

721
00:41:23,700 --> 00:41:32,629
attack<font color="#CCCCCC"> and</font><font color="#E5E5E5"> in the principle it was based</font>

722
00:41:27,420 --> 00:41:35,370
on and there<font color="#E5E5E5"> was also another another</font>

723
00:41:32,630 --> 00:41:38,160
paper<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I published with a different</font>

724
00:41:35,370 --> 00:41:41,549
team<font color="#E5E5E5"> that we actually injected fault</font>

725
00:41:38,160 --> 00:41:43,049
<font color="#E5E5E5">attacks</font><font color="#CCCCCC"> okay this is a fault attack you</font>

726
00:41:41,550 --> 00:41:44,760
<font color="#E5E5E5">changed something in the memory if you</font>

727
00:41:43,050 --> 00:41:46,860
just do<font color="#E5E5E5"> it</font><font color="#CCCCCC"> in the right place and you</font>

728
00:41:44,760 --> 00:41:49,410
attack the right code and the code was

729
00:41:46,860 --> 00:41:53,160
really negligent enough not to check

730
00:41:49,410 --> 00:41:57,080
then then you can<font color="#E5E5E5"> make the fault attack</font>

731
00:41:53,160 --> 00:42:01,770
on<font color="#E5E5E5"> on RSA and we were actually able to</font>

732
00:41:57,080 --> 00:42:03,990
grab out<font color="#E5E5E5"> encryption the private enable</font>

733
00:42:01,770 --> 00:42:08,630
<font color="#E5E5E5">the private key of of RSA from an</font>

734
00:42:03,990 --> 00:42:14,910
implementation from<font color="#E5E5E5"> some some library so</font>

735
00:42:08,630 --> 00:42:18,560
<font color="#CCCCCC">ok I will skip this I just want to to go</font>

736
00:42:14,910 --> 00:42:23,460
and<font color="#CCCCCC"> okay I explained this I</font><font color="#E5E5E5"> just want to</font>

737
00:42:18,560 --> 00:42:26,279
just to<font color="#E5E5E5"> show how this was able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> how we</font>

738
00:42:23,460 --> 00:42:28,680
can be a<font color="#CCCCCC"> root</font><font color="#E5E5E5"> on a locked system with</font>

739
00:42:26,280 --> 00:42:30,810
the blind<font color="#CCCCCC"> that random block corruption</font>

740
00:42:28,680 --> 00:42:32,879
attack so if you change if everything is

741
00:42:30,810 --> 00:42:35,190
encrypted<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a block cipher and you</font>

742
00:42:32,880 --> 00:42:39,210
modify a single bit somewhere it is

743
00:42:35,190 --> 00:42:41,490
<font color="#CCCCCC">going to corrupt a whole block</font><font color="#E5E5E5"> of 128</font>

744
00:42:39,210 --> 00:42:46,830
bits<font color="#E5E5E5"> with something that is</font>

745
00:42:41,490 --> 00:42:50,459
unpredictable<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we looked at the the</font>

746
00:42:46,830 --> 00:42:55,620
way<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> login</font><font color="#E5E5E5"> probe program of Fame</font>

747
00:42:50,460 --> 00:42:59,090
of Linux was working and actually<font color="#E5E5E5"> if you</font>

748
00:42:55,620 --> 00:43:04,230
<font color="#CCCCCC">look at this</font><font color="#E5E5E5"> there is some</font><font color="#CCCCCC"> free</font>

749
00:42:59,090 --> 00:43:05,880
authentication flag<font color="#E5E5E5"> that if it is set it</font>

750
00:43:04,230 --> 00:43:08,520
would not ask you<font color="#CCCCCC"> for the password</font>

751
00:43:05,880 --> 00:43:10,800
anymore<font color="#E5E5E5"> because this is built for cases</font>

752
00:43:08,520 --> 00:43:12,570
were you<font color="#CCCCCC"> already authenticated yourself</font>

753
00:43:10,800 --> 00:43:15,150
<font color="#E5E5E5">you just</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> repeat something so</font>

754
00:43:12,570 --> 00:43:20,130
<font color="#CCCCCC">that that's the way it really</font><font color="#E5E5E5"> works</font><font color="#CCCCCC"> so</font>

755
00:43:15,150 --> 00:43:21,910
what we see<font color="#E5E5E5"> that if we can just go</font><font color="#CCCCCC"> over</font>

756
00:43:20,130 --> 00:43:26,050
this

757
00:43:21,910 --> 00:43:30,600
<font color="#CCCCCC">pree authenticated flag or the region in</font>

758
00:43:26,050 --> 00:43:33,120
memory<font color="#E5E5E5"> where this where this</font>

759
00:43:30,600 --> 00:43:36,069
authentication<font color="#CCCCCC"> 10th occasion</font><font color="#E5E5E5"> flag</font>

760
00:43:33,120 --> 00:43:39,970
resides in memory<font color="#E5E5E5"> and we can just hit it</font>

761
00:43:36,070 --> 00:43:44,710
randomly<font color="#E5E5E5"> we are with probability of 50%</font>

762
00:43:39,970 --> 00:43:47,620
<font color="#CCCCCC">all right going</font><font color="#E5E5E5"> to be able to flip it to</font>

763
00:43:44,710 --> 00:43:53,350
yes<font color="#E5E5E5"> all right</font>

764
00:43:47,620 --> 00:43:56,670
<font color="#E5E5E5">so within one</font><font color="#CCCCCC"> or two</font><font color="#E5E5E5"> such experiments we</font>

765
00:43:53,350 --> 00:43:59,740
will<font color="#E5E5E5"> be able to log in to a machine</font>

766
00:43:56,670 --> 00:44:02,620
<font color="#E5E5E5">without having the password so you're</font>

767
00:43:59,740 --> 00:44:08,859
saying<font color="#CCCCCC"> ok who cares we have a</font><font color="#E5E5E5"> machine it</font>

768
00:44:02,620 --> 00:44:11,049
is<font color="#E5E5E5"> locked</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> you can maybe maybe maybe</font>

769
00:44:08,860 --> 00:44:14,410
it's a machine maybe<font color="#E5E5E5"> it's like a small</font>

770
00:44:11,050 --> 00:44:17,890
phone it's a soldier than so forth and

771
00:44:14,410 --> 00:44:23,490
so<font color="#CCCCCC"> forth</font><font color="#E5E5E5"> then they but the actual threat</font>

772
00:44:17,890 --> 00:44:27,100
if we want to<font color="#E5E5E5"> look at this is the is the</font>

773
00:44:23,490 --> 00:44:30,209
cloud<font color="#E5E5E5"> situation the cloud situation</font>

774
00:44:27,100 --> 00:44:36,490
where you have a hypervisor and the

775
00:44:30,210 --> 00:44:41,890
hypervisor<font color="#E5E5E5"> controls the VMS of the users</font>

776
00:44:36,490 --> 00:44:45,100
and the hypervisor<font color="#CCCCCC"> can</font><font color="#E5E5E5"> enter a VM into a</font>

777
00:44:41,890 --> 00:44:48,759
debug mode<font color="#CCCCCC"> that's a privilege of</font><font color="#E5E5E5"> the</font>

778
00:44:45,100 --> 00:44:51,610
<font color="#E5E5E5">hypervisor so even with the</font><font color="#CCCCCC"> technology</font>

779
00:44:48,760 --> 00:44:53,080
that<font color="#CCCCCC"> has been</font><font color="#E5E5E5"> recently proposed by AMD</font>

780
00:44:51,610 --> 00:44:57,220
they were saying we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> encrypt</font>

781
00:44:53,080 --> 00:45:01,509
the whole memory you can still do the

782
00:44:57,220 --> 00:45:04,859
same thing because<font color="#E5E5E5"> because the because</font>

783
00:45:01,510 --> 00:45:10,150
<font color="#CCCCCC">the hi the hypervisor can put the victim</font>

784
00:45:04,860 --> 00:45:13,600
<font color="#E5E5E5">VM into a debug mode and the same login</font>

785
00:45:10,150 --> 00:45:16,570
<font color="#CCCCCC">program is running</font><font color="#E5E5E5"> in the background the</font>

786
00:45:13,600 --> 00:45:21,390
user doesn't<font color="#CCCCCC"> login with this</font><font color="#E5E5E5"> the user</font>

787
00:45:16,570 --> 00:45:23,890
would typically<font color="#E5E5E5"> login with with an SSH</font>

788
00:45:21,390 --> 00:45:26,230
application but the login<font color="#CCCCCC"> program is</font>

789
00:45:23,890 --> 00:45:30,549
running<font color="#E5E5E5"> in the background so</font><font color="#CCCCCC"> the</font>

790
00:45:26,230 --> 00:45:34,120
hypervisor<font color="#CCCCCC"> that can identify where in</font>

791
00:45:30,550 --> 00:45:35,680
memory<font color="#E5E5E5"> these very precious variables are</font>

792
00:45:34,120 --> 00:45:37,660
residing

793
00:45:35,680 --> 00:45:40,419
<font color="#E5E5E5">enter a debug mode and can write</font>

794
00:45:37,660 --> 00:45:44,589
something<font color="#E5E5E5"> so again the hypervisor can</font>

795
00:45:40,420 --> 00:45:46,930
<font color="#E5E5E5">read the memory but since it since every</font>

796
00:45:44,589 --> 00:45:51,040
VM<font color="#CCCCCC"> with this</font><font color="#E5E5E5"> technology is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

797
00:45:46,930 --> 00:45:52,480
<font color="#E5E5E5">encrypted with a different key it is not</font>

798
00:45:51,040 --> 00:45:54,849
going to<font color="#CCCCCC"> be useful because the</font>

799
00:45:52,480 --> 00:45:57,430
hypervisor would read with its own key

800
00:45:54,849 --> 00:46:00,760
<font color="#E5E5E5">so there would be a decryption with the</font>

801
00:45:57,430 --> 00:46:03,790
hypervisor key of something that was

802
00:46:00,760 --> 00:46:06,309
encrypted<font color="#E5E5E5"> with a different key of the of</font>

803
00:46:03,790 --> 00:46:10,058
the<font color="#E5E5E5"> VM of the guest VM so it's not going</font>

804
00:46:06,309 --> 00:46:12,220
to help the hyper-v hypervisor is<font color="#E5E5E5"> going</font>

805
00:46:10,059 --> 00:46:15,309
to see garbage<font color="#E5E5E5"> and this is the this is</font>

806
00:46:12,220 --> 00:46:17,680
<font color="#E5E5E5">the promise of this technology but the</font>

807
00:46:15,309 --> 00:46:19,720
hypervisor can<font color="#E5E5E5"> overwrite</font><font color="#CCCCCC"> and if the same</font>

808
00:46:17,680 --> 00:46:21,328
<font color="#CCCCCC">login program</font><font color="#E5E5E5"> is running in the</font>

809
00:46:19,720 --> 00:46:25,058
background

810
00:46:21,329 --> 00:46:28,390
well the hypervisor can<font color="#CCCCCC"> login</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> root</font>

811
00:46:25,059 --> 00:46:30,790
<font color="#E5E5E5">into the guest VM</font><font color="#CCCCCC"> and then if the</font>

812
00:46:28,390 --> 00:46:32,529
hypervisor<font color="#CCCCCC"> is root it can just copy</font>

813
00:46:30,790 --> 00:46:34,420
everything<font color="#CCCCCC"> it doesn't need to go through</font>

814
00:46:32,530 --> 00:46:36,819
<font color="#CCCCCC">memory so all of the memory the</font>

815
00:46:34,420 --> 00:46:37,720
<font color="#E5E5E5">encryption of</font><font color="#CCCCCC"> the memory</font><font color="#E5E5E5"> is no not</font>

816
00:46:36,819 --> 00:46:43,140
useful<font color="#E5E5E5"> anymore</font>

817
00:46:37,720 --> 00:46:43,140
so again as<font color="#CCCCCC"> we see this</font><font color="#E5E5E5"> is the result of</font>

818
00:46:44,339 --> 00:46:57,609
encryption with no<font color="#E5E5E5"> authentication so the</font>

819
00:46:52,180 --> 00:47:00,910
old<font color="#E5E5E5"> video I'm going to Rodrigo we are</font>

820
00:46:57,609 --> 00:47:03,400
going to show a to videos so one is the

821
00:47:00,910 --> 00:47:05,379
previous<font color="#E5E5E5"> attack and the new attack and I</font>

822
00:47:03,400 --> 00:47:07,000
<font color="#CCCCCC">am going</font><font color="#E5E5E5"> so so we'll go we're going to</font>

823
00:47:05,380 --> 00:47:09,910
<font color="#E5E5E5">show the videos and first I'm not</font><font color="#CCCCCC"> just</font>

824
00:47:07,000 --> 00:47:16,540
going<font color="#E5E5E5"> to show the</font><font color="#CCCCCC"> new so what is new</font><font color="#E5E5E5"> so</font>

825
00:47:09,910 --> 00:47:19,680
what is new<font color="#CCCCCC"> week</font><font color="#E5E5E5"> we call it a single bit</font>

826
00:47:16,540 --> 00:47:22,000
flip<font color="#E5E5E5"> right</font><font color="#CCCCCC"> we were able to attack a</font>

827
00:47:19,680 --> 00:47:26,529
conditional<font color="#E5E5E5"> that happens to</font><font color="#CCCCCC"> be a</font>

828
00:47:22,000 --> 00:47:28,750
critical and just flip from<font color="#CCCCCC"> one from</font>

829
00:47:26,530 --> 00:47:30,730
<font color="#CCCCCC">zero to one</font><font color="#E5E5E5"> actually something from zero</font>

830
00:47:28,750 --> 00:47:34,140
to<font color="#E5E5E5"> one and this happens with very high</font>

831
00:47:30,730 --> 00:47:36,760
probability so after one<font color="#CCCCCC"> two three</font>

832
00:47:34,140 --> 00:47:39,279
attempts<font color="#CCCCCC"> you you'll get</font><font color="#E5E5E5"> what you what</font>

833
00:47:36,760 --> 00:47:41,980
you want<font color="#E5E5E5"> so in a sense one could say</font>

834
00:47:39,280 --> 00:47:45,040
<font color="#CCCCCC">that although</font><font color="#E5E5E5"> these are frequent and we</font>

835
00:47:41,980 --> 00:47:49,230
were able<font color="#CCCCCC"> to demonstrate it's a weak</font>

836
00:47:45,040 --> 00:47:52,170
attack<font color="#E5E5E5"> in a sense because it</font>

837
00:47:49,230 --> 00:47:54,690
only be applied<font color="#CCCCCC"> to a conditional to a</font>

838
00:47:52,170 --> 00:47:59,760
conditional<font color="#E5E5E5"> bit that happens to be</font>

839
00:47:54,690 --> 00:48:03,090
critical<font color="#E5E5E5"> okay so guess what I have this</font>

840
00:47:59,760 --> 00:48:06,780
now watch this this<font color="#E5E5E5"> but we will show</font>

841
00:48:03,090 --> 00:48:09,720
<font color="#E5E5E5">that we</font><font color="#CCCCCC"> will show them the video later</font>

842
00:48:06,780 --> 00:48:14,280
<font color="#CCCCCC">so what we are going to show right</font><font color="#E5E5E5"> now</font>

843
00:48:09,720 --> 00:48:16,859
is<font color="#CCCCCC"> actually that there are ways to do</font>

844
00:48:14,280 --> 00:48:20,970
more<font color="#E5E5E5"> not</font><font color="#CCCCCC"> only on a</font><font color="#E5E5E5"> single conditional</font>

845
00:48:16,859 --> 00:48:23,460
bit<font color="#E5E5E5"> so here you can see a memory and we</font>

846
00:48:20,970 --> 00:48:26,279
just look at the<font color="#E5E5E5"> memory addresses and we</font>

847
00:48:23,460 --> 00:48:30,600
count 128<font color="#E5E5E5"> bit blocks because that's the</font>

848
00:48:26,280 --> 00:48:33,810
standard encryption<font color="#CCCCCC"> and we just view it</font>

849
00:48:30,600 --> 00:48:36,569
this way and so just<font color="#CCCCCC"> imagine that</font>

850
00:48:33,810 --> 00:48:38,460
<font color="#E5E5E5">everything that</font><font color="#CCCCCC"> goes out to memory</font><font color="#E5E5E5"> is</font>

851
00:48:36,570 --> 00:48:42,270
encrypted<font color="#E5E5E5"> and when it goes back it is</font>

852
00:48:38,460 --> 00:48:47,250
decrypted but every VM<font color="#E5E5E5"> has its its own</font>

853
00:48:42,270 --> 00:48:49,619
<font color="#E5E5E5">different key so what what happens is</font>

854
00:48:47,250 --> 00:48:52,650
<font color="#E5E5E5">that we can look</font><font color="#CCCCCC"> here we can see many</font>

855
00:48:49,619 --> 00:48:55,440
variables so we<font color="#E5E5E5"> take three examples a</font>

856
00:48:52,650 --> 00:48:57,810
variable<font color="#E5E5E5"> that is a nine unsigned the</font>

857
00:48:55,440 --> 00:49:01,430
character<font color="#E5E5E5"> character so it's a byte it's</font>

858
00:48:57,810 --> 00:49:03,750
a it's an<font color="#CCCCCC"> 8-bit so another variable is</font>

859
00:49:01,430 --> 00:49:06,810
<font color="#CCCCCC">sixteen bits and another type of</font>

860
00:49:03,750 --> 00:49:09,660
variable is an unsigned integer<font color="#E5E5E5"> 32 bit</font>

861
00:49:06,810 --> 00:49:13,880
right so you can guess where<font color="#E5E5E5"> I am</font>

862
00:49:09,660 --> 00:49:16,649
<font color="#E5E5E5">getting it instead of just looking</font>

863
00:49:13,880 --> 00:49:18,960
<font color="#E5E5E5">instead of just looking</font><font color="#CCCCCC"> at the</font>

864
00:49:16,650 --> 00:49:21,900
possibility of flipping a single

865
00:49:18,960 --> 00:49:27,810
critical<font color="#E5E5E5"> bit we can allow ourselves to</font>

866
00:49:21,900 --> 00:49:31,020
<font color="#E5E5E5">go further so to find some some place</font>

867
00:49:27,810 --> 00:49:34,710
where<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can brute-force</font><font color="#E5E5E5"> a block that</font><font color="#CCCCCC"> we</font>

868
00:49:31,020 --> 00:49:38,240
will just change a value<font color="#CCCCCC"> of an integer a</font>

869
00:49:34,710 --> 00:49:41,940
32-bit<font color="#E5E5E5"> integer to something that we want</font>

870
00:49:38,240 --> 00:49:44,430
with many attempts and assuming that<font color="#E5E5E5"> the</font>

871
00:49:41,940 --> 00:49:47,190
<font color="#E5E5E5">rest of the</font><font color="#CCCCCC"> bits will not affect</font><font color="#E5E5E5"> the</font>

872
00:49:44,430 --> 00:49:49,350
rest<font color="#E5E5E5"> of the computations and if we can</font>

873
00:49:47,190 --> 00:49:51,840
untie identify something<font color="#E5E5E5"> like this then</font>

874
00:49:49,350 --> 00:49:57,240
we<font color="#CCCCCC"> are able to attack much more than a</font>

875
00:49:51,840 --> 00:49:59,840
single bit so just here so<font color="#E5E5E5"> this is just</font>

876
00:49:57,240 --> 00:50:02,379
<font color="#E5E5E5">a now there will be this</font>

877
00:49:59,840 --> 00:50:04,910
the famous<font color="#E5E5E5"> so it sounds</font><font color="#CCCCCC"> okay I'm</font>

878
00:50:02,380 --> 00:50:07,910
unbelievable right<font color="#E5E5E5"> but if you look at</font>

879
00:50:04,910 --> 00:50:13,129
the way that the Linux<font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> is built</font>

880
00:50:07,910 --> 00:50:17,089
so so then we see<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> structure of</font>

881
00:50:13,130 --> 00:50:23,150
<font color="#E5E5E5">tasks has different ideas different IDs</font>

882
00:50:17,090 --> 00:50:27,530
and guess what<font color="#E5E5E5"> the effective UID right</font>

883
00:50:23,150 --> 00:50:30,560
<font color="#E5E5E5">is a 32-bit value so wouldn't it</font><font color="#CCCCCC"> be</font>

884
00:50:27,530 --> 00:50:31,280
wonderful if we<font color="#E5E5E5"> could take the effective</font>

885
00:50:30,560 --> 00:50:36,110
UID

886
00:50:31,280 --> 00:50:41,330
of a guest VM and change it and<font color="#CCCCCC"> change</font>

887
00:50:36,110 --> 00:50:44,510
it<font color="#E5E5E5"> to the hypervisors ID right so in</font>

888
00:50:41,330 --> 00:50:50,259
<font color="#E5E5E5">that case you can just escalate escalate</font>

889
00:50:44,510 --> 00:50:54,170
the the privilege of<font color="#E5E5E5"> the process and</font>

890
00:50:50,260 --> 00:50:57,890
<font color="#E5E5E5">okay so</font><font color="#CCCCCC"> okay I'll just skip here so did</font>

891
00:50:54,170 --> 00:51:01,430
we find a winner candidate<font color="#E5E5E5"> so yes and</font>

892
00:50:57,890 --> 00:51:03,560
<font color="#E5E5E5">will now show that that it works</font><font color="#CCCCCC"> so you</font>

893
00:51:01,430 --> 00:51:08,299
have<font color="#E5E5E5"> many data elements with different</font>

894
00:51:03,560 --> 00:51:10,040
sizes<font color="#E5E5E5"> yes this isn't in the kernel can</font>

895
00:51:08,300 --> 00:51:13,010
we find something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> fully</font>

896
00:51:10,040 --> 00:51:15,440
<font color="#CCCCCC">brute-force something that is a 32-bit</font>

897
00:51:13,010 --> 00:51:19,160
<font color="#CCCCCC">integer how long do you think it</font><font color="#E5E5E5"> takes</font>

898
00:51:15,440 --> 00:51:21,680
you to just do<font color="#CCCCCC"> two to the 32</font><font color="#E5E5E5"> attempts</font>

899
00:51:19,160 --> 00:51:26,120
<font color="#E5E5E5">until you succeed not too long we will</font>

900
00:51:21,680 --> 00:51:36,319
<font color="#E5E5E5">we will see it</font><font color="#CCCCCC"> right now</font><font color="#E5E5E5"> so yes the</font>

901
00:51:26,120 --> 00:51:38,120
effective UID<font color="#E5E5E5"> and you can if you the</font>

902
00:51:36,320 --> 00:51:42,350
successful attack<font color="#E5E5E5"> would elevate the</font>

903
00:51:38,120 --> 00:51:45,380
privileges<font color="#CCCCCC"> and what happens if others</font>

904
00:51:42,350 --> 00:51:50,600
other<font color="#E5E5E5"> variables are changed okay we</font>

905
00:51:45,380 --> 00:51:54,890
<font color="#E5E5E5">don't care and and is it going to</font>

906
00:51:50,600 --> 00:51:58,310
succeed<font color="#E5E5E5"> so I will just</font><font color="#CCCCCC"> skip</font><font color="#E5E5E5"> the</font>

907
00:51:54,890 --> 00:52:01,339
limitations<font color="#E5E5E5"> and now ask</font><font color="#CCCCCC"> Audrey go to</font>

908
00:51:58,310 --> 00:52:04,660
show the wonderful<font color="#CCCCCC"> video</font><font color="#E5E5E5"> with this</font>

909
00:52:01,340 --> 00:52:10,790
attack on 32 bits and it would<font color="#E5E5E5"> explain</font>

910
00:52:04,660 --> 00:52:13,000
this in<font color="#E5E5E5"> Portuguese it would be easier</font><font color="#CCCCCC"> to</font>

911
00:52:10,790 --> 00:52:13,000
follow

912
00:52:13,930 --> 00:52:25,399
all right where<font color="#CCCCCC"> is it is running in the</font>

913
00:52:19,520 --> 00:52:28,690
background<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> one of</font><font color="#E5E5E5"> these yes okay</font>

914
00:52:25,400 --> 00:52:28,690
so we'll show this

915
00:52:38,170 --> 00:52:47,450
<font color="#E5E5E5">okay okay so let let me try to explain</font>

916
00:52:44,540 --> 00:52:50,300
<font color="#E5E5E5">what are we actually doing here so we</font>

917
00:52:47,450 --> 00:52:53,060
have two VMs<font color="#CCCCCC"> when one of the VMs is the</font>

918
00:52:50,300 --> 00:52:56,359
attacker VM<font color="#E5E5E5"> the other VM is the victim</font>

919
00:52:53,060 --> 00:52:58,759
<font color="#E5E5E5">VM what we weren't is in the victim we</font>

920
00:52:56,359 --> 00:53:01,190
have a<font color="#E5E5E5"> process that will</font><font color="#CCCCCC"> be running</font><font color="#E5E5E5"> that</font>

921
00:52:58,760 --> 00:53:03,619
process has no privileges<font color="#E5E5E5"> it's just a</font>

922
00:53:01,190 --> 00:53:05,750
<font color="#E5E5E5">normal user the</font><font color="#CCCCCC"> way that we show it</font><font color="#E5E5E5"> we</font>

923
00:53:03,619 --> 00:53:07,790
show the<font color="#CCCCCC"> output</font><font color="#E5E5E5"> or the ID commands to</font>

924
00:53:05,750 --> 00:53:10,460
show that the user has no privileges<font color="#CCCCCC"> and</font>

925
00:53:07,790 --> 00:53:13,160
we try to read a secret<font color="#CCCCCC"> and</font><font color="#E5E5E5"> basically we</font>

926
00:53:10,460 --> 00:53:15,200
<font color="#E5E5E5">don't manage</font><font color="#CCCCCC"> to do it</font><font color="#E5E5E5"> then in the</font>

927
00:53:13,160 --> 00:53:17,899
attacker<font color="#CCCCCC"> what we do is like we connect</font>

928
00:53:15,200 --> 00:53:20,210
to this debug mode for the VM<font color="#E5E5E5"> and we</font>

929
00:53:17,900 --> 00:53:23,329
start brute-forcing<font color="#E5E5E5"> you see that in the</font>

930
00:53:20,210 --> 00:53:27,190
<font color="#E5E5E5">output it will show a</font><font color="#CCCCCC"> new value</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

931
00:53:23,329 --> 00:53:30,020
effective user ID<font color="#CCCCCC"> every like 10 seconds</font>

932
00:53:27,190 --> 00:53:31,849
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> that's millions of tries okay</font>

933
00:53:30,020 --> 00:53:34,640
like in those<font color="#E5E5E5"> ten seconds but we only</font>

934
00:53:31,849 --> 00:53:38,089
<font color="#E5E5E5">print every</font><font color="#CCCCCC"> 10 seconds</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you will see</font>

935
00:53:34,640 --> 00:53:39,890
that at some point<font color="#CCCCCC"> that process will hit</font>

936
00:53:38,089 --> 00:53:42,020
zero which is the<font color="#E5E5E5"> value for</font><font color="#CCCCCC"> the</font>

937
00:53:39,890 --> 00:53:44,390
effective user ID of the administrator

938
00:53:42,020 --> 00:53:46,339
in<font color="#E5E5E5"> Linux and then basically it stops</font>

939
00:53:44,390 --> 00:53:49,310
brute-forcing<font color="#E5E5E5"> and just like keeps the</font>

940
00:53:46,339 --> 00:53:51,319
<font color="#E5E5E5">privilege so the cool thing</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> like</font>

941
00:53:49,310 --> 00:53:53,180
it's<font color="#CCCCCC"> just one process</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> we need on</font>

942
00:53:51,319 --> 00:53:55,220
the victim but<font color="#E5E5E5"> that process has no</font>

943
00:53:53,180 --> 00:53:58,609
privileges<font color="#CCCCCC"> you will see that in the</font><font color="#E5E5E5"> very</font>

944
00:53:55,220 --> 00:54:01,339
beginning what this process does besides

945
00:53:58,609 --> 00:54:04,098
being like wanting to<font color="#CCCCCC"> be elevated it's</font>

946
00:54:01,339 --> 00:54:06,920
actually<font color="#E5E5E5"> it spawning multiple processes</font>

947
00:54:04,099 --> 00:54:10,130
and the idea to do<font color="#E5E5E5"> that is so we can</font>

948
00:54:06,920 --> 00:54:12,200
<font color="#E5E5E5">locate wearing memory is our victim</font>

949
00:54:10,130 --> 00:54:14,690
<font color="#CCCCCC">right because the memory</font><font color="#E5E5E5"> is encrypted as</font>

950
00:54:12,200 --> 00:54:16,310
an attacker<font color="#E5E5E5"> we know that we could brute</font>

951
00:54:14,690 --> 00:54:18,380
force<font color="#CCCCCC"> and bits but</font><font color="#E5E5E5"> we don't know where</font>

952
00:54:16,310 --> 00:54:21,259
they are<font color="#E5E5E5"> so what we do is like this</font>

953
00:54:18,380 --> 00:54:23,480
<font color="#E5E5E5">process is</font><font color="#CCCCCC"> spawn multiple process that</font>

954
00:54:21,260 --> 00:54:26,420
basically forces the memory allocator in

955
00:54:23,480 --> 00:54:28,880
<font color="#E5E5E5">linux to be in a certain behavior</font><font color="#CCCCCC"> then</font>

956
00:54:26,420 --> 00:54:29,569
we<font color="#E5E5E5"> start killing processes and creating</font>

957
00:54:28,880 --> 00:54:32,780
new<font color="#CCCCCC"> ones</font>

958
00:54:29,569 --> 00:54:35,750
so finally we created a gap in the

959
00:54:32,780 --> 00:54:38,510
memory<font color="#CCCCCC"> location we know our</font><font color="#E5E5E5"> this child</font>

960
00:54:35,750 --> 00:54:39,950
<font color="#E5E5E5">process are adjacent in memory so we</font>

961
00:54:38,510 --> 00:54:42,470
know that<font color="#E5E5E5"> when we're hitting we're</font>

962
00:54:39,950 --> 00:54:45,078
hitting<font color="#E5E5E5"> our process that's why even when</font>

963
00:54:42,470 --> 00:54:47,000
we fail we actually just give the wrong

964
00:54:45,079 --> 00:54:49,250
privilege to the software so

965
00:54:47,000 --> 00:54:51,620
you see when the program<font color="#E5E5E5"> is running and</font>

966
00:54:49,250 --> 00:54:54,710
printing<font color="#E5E5E5"> it will start printing many</font>

967
00:54:51,620 --> 00:54:58,870
different user<font color="#E5E5E5"> IDs</font><font color="#CCCCCC"> and it only stops</font>

968
00:54:54,710 --> 00:54:58,870
when it<font color="#CCCCCC"> actually succeeds and</font><font color="#E5E5E5"> gets zero</font>

969
00:55:02,080 --> 00:55:06,230
<font color="#CCCCCC">you wanted me to say that in Portuguese</font>

970
00:55:04,610 --> 00:55:10,580
well whether there is some English

971
00:55:06,230 --> 00:55:12,350
speakers in<font color="#E5E5E5"> the audience so it is</font>

972
00:55:10,580 --> 00:55:14,390
running<font color="#E5E5E5"> as you can see this is the</font>

973
00:55:12,350 --> 00:55:21,370
victim so the process just wants to be

974
00:55:14,390 --> 00:55:21,370
<font color="#CCCCCC">elevated it's gonna be</font><font color="#E5E5E5"> very hard to see</font>

975
00:55:24,790 --> 00:55:35,140
it's very<font color="#E5E5E5"> hard to see right yeah well</font>

976
00:55:31,550 --> 00:55:35,140
it's gonna<font color="#CCCCCC"> be hard to</font><font color="#E5E5E5"> see I'm sorry</font>

977
00:55:53,049 --> 00:55:55,679
oops

978
00:55:57,510 --> 00:56:04,550
<font color="#E5E5E5">okay a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> better so I will share</font>

979
00:56:02,490 --> 00:56:06,779
the video<font color="#CCCCCC"> later as well</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so</font>

980
00:56:04,550 --> 00:56:08,850
<font color="#E5E5E5">essentially here I just</font><font color="#CCCCCC"> run the</font><font color="#E5E5E5"> command</font>

981
00:56:06,780 --> 00:56:11,160
<font color="#CCCCCC">I will basically</font><font color="#E5E5E5"> read what is going on</font>

982
00:56:08,850 --> 00:56:13,799
on the video then<font color="#E5E5E5"> so here I just run</font><font color="#CCCCCC"> the</font>

983
00:56:11,160 --> 00:56:17,069
<font color="#E5E5E5">command ID so it shows</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> our user is</font>

984
00:56:13,800 --> 00:56:19,770
BS<font color="#E5E5E5"> demon with like a user ID is a</font>

985
00:56:17,070 --> 00:56:21,630
thousand<font color="#E5E5E5"> one right so that's what we</font>

986
00:56:19,770 --> 00:56:25,200
<font color="#E5E5E5">want to basically choose somehow change</font>

987
00:56:21,630 --> 00:56:27,720
right<font color="#CCCCCC"> so when this user tries to read a</font>

988
00:56:25,200 --> 00:56:30,509
secret it's just a fire in the<font color="#CCCCCC"> EGC</font>

989
00:56:27,720 --> 00:56:33,480
<font color="#CCCCCC">directory</font><font color="#E5E5E5"> and it has no permissions even</font>

990
00:56:30,510 --> 00:56:35,010
though nobody's seen believe me<font color="#E5E5E5"> so or if</font>

991
00:56:33,480 --> 00:56:37,830
you want you can come closer to<font color="#E5E5E5"> this</font>

992
00:56:35,010 --> 00:56:39,869
screen okay<font color="#CCCCCC"> I'm sorry for that so the</font>

993
00:56:37,830 --> 00:56:42,150
user don't<font color="#E5E5E5"> have enough permissions so</font>

994
00:56:39,869 --> 00:56:44,130
it's basically didn't like a I<font color="#E5E5E5"> just</font>

995
00:56:42,150 --> 00:56:46,560
listed the<font color="#CCCCCC"> directories so you see that</font>

996
00:56:44,130 --> 00:56:48,540
this<font color="#CCCCCC"> process that</font><font color="#E5E5E5"> we executing is not</font>

997
00:56:46,560 --> 00:56:50,609
sweet<font color="#CCCCCC"> root or anything is just a user</font>

998
00:56:48,540 --> 00:56:54,150
process something<font color="#E5E5E5"> that</font><font color="#CCCCCC"> the user can just</font>

999
00:56:50,609 --> 00:56:55,740
<font color="#E5E5E5">run on the machine when you run it the</font>

1000
00:56:54,150 --> 00:56:57,990
very<font color="#E5E5E5"> first thing that happens</font><font color="#CCCCCC"> is all</font>

1001
00:56:55,740 --> 00:57:00,149
this<font color="#E5E5E5"> Forks that I mentioned so the</font>

1002
00:56:57,990 --> 00:57:02,250
<font color="#CCCCCC">processes</font><font color="#E5E5E5"> are creating a lot of childs</font>

1003
00:57:00,150 --> 00:57:04,260
to basically make the memory in a

1004
00:57:02,250 --> 00:57:06,119
certain way<font color="#E5E5E5"> and for us to</font><font color="#CCCCCC"> be able to</font>

1005
00:57:04,260 --> 00:57:08,880
<font color="#E5E5E5">identify where it is even in the</font>

1006
00:57:06,119 --> 00:57:11,340
encrypted<font color="#E5E5E5"> memory as you can see each</font><font color="#CCCCCC"> of</font>

1007
00:57:08,880 --> 00:57:13,920
this child process is to keep the same

1008
00:57:11,340 --> 00:57:17,220
effective user ID which<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> original</font>

1009
00:57:13,920 --> 00:57:21,720
user so a thousand one<font color="#E5E5E5"> so when the brute</font>

1010
00:57:17,220 --> 00:57:23,910
force<font color="#E5E5E5"> starts</font><font color="#CCCCCC"> so you say like I changed</font>

1011
00:57:21,720 --> 00:57:26,660
the terminals so I start doing the brute

1012
00:57:23,910 --> 00:57:29,129
force<font color="#CCCCCC"> so when the brute force starts</font>

1013
00:57:26,660 --> 00:57:30,960
essentially what happens is like<font color="#CCCCCC"> up you</font>

1014
00:57:29,130 --> 00:57:34,020
see the<font color="#CCCCCC"> regional effective user</font><font color="#E5E5E5"> ID is a</font>

1015
00:57:30,960 --> 00:57:36,450
thousand one so after<font color="#CCCCCC"> some seconds we</font>

1016
00:57:34,020 --> 00:57:39,330
print again<font color="#E5E5E5"> right just like to see what</font>

1017
00:57:36,450 --> 00:57:42,149
is the new<font color="#CCCCCC"> value</font><font color="#E5E5E5"> but now it</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> like it</font>

1018
00:57:39,330 --> 00:57:43,830
it's showing like a big integer<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> we</font>

1019
00:57:42,150 --> 00:57:46,020
printing as sign<font color="#E5E5E5"> of the integer so</font>

1020
00:57:43,830 --> 00:57:48,299
showing<font color="#E5E5E5"> negative but it's a no</font><font color="#CCCCCC"> silent</font>

1021
00:57:46,020 --> 00:57:50,850
value actually<font color="#E5E5E5"> so it is a big integer</font>

1022
00:57:48,300 --> 00:57:53,550
<font color="#E5E5E5">then again another one and it's all</font>

1023
00:57:50,850 --> 00:57:56,520
random<font color="#E5E5E5"> values you</font><font color="#CCCCCC"> see like or</font><font color="#E5E5E5"> or process</font>

1024
00:57:53,550 --> 00:57:59,070
is<font color="#E5E5E5"> becoming users that don't even exist</font>

1025
00:57:56,520 --> 00:58:01,259
from that machine<font color="#E5E5E5"> but in the way that</font>

1026
00:57:59,070 --> 00:58:02,850
<font color="#CCCCCC">this system works if there you don't</font>

1027
00:58:01,260 --> 00:58:05,760
<font color="#E5E5E5">that process don't try to do anything</font>

1028
00:58:02,850 --> 00:58:07,859
that<font color="#CCCCCC"> requires privileges</font><font color="#E5E5E5"> it's all fine</font>

1029
00:58:05,760 --> 00:58:09,359
this isn't keeps running right<font color="#CCCCCC"> there is</font>

1030
00:58:07,859 --> 00:58:11,520
no crash there is no nothing

1031
00:58:09,359 --> 00:58:12,580
we<font color="#CCCCCC"> brute-forcing</font><font color="#E5E5E5"> a data structure in the</font>

1032
00:58:11,520 --> 00:58:14,440
kernel<font color="#E5E5E5"> and</font>

1033
00:58:12,580 --> 00:58:16,810
<font color="#E5E5E5">actually putting random values in that</font>

1034
00:58:14,440 --> 00:58:18,880
<font color="#E5E5E5">data structure and the system continues</font>

1035
00:58:16,810 --> 00:58:20,830
running<font color="#E5E5E5"> as if nothing's</font><font color="#CCCCCC"> happened and</font>

1036
00:58:18,880 --> 00:58:23,410
<font color="#E5E5E5">then</font><font color="#CCCCCC"> they're like</font><font color="#E5E5E5"> you see like</font><font color="#CCCCCC"> now it's</font>

1037
00:58:20,830 --> 00:58:26,590
getting like<font color="#CCCCCC"> more values more values and</font>

1038
00:58:23,410 --> 00:58:28,120
<font color="#E5E5E5">again millions of tries are going on on</font>

1039
00:58:26,590 --> 00:58:31,450
the background<font color="#CCCCCC"> we're printing</font><font color="#E5E5E5"> just every</font>

1040
00:58:28,120 --> 00:58:34,390
like 10<font color="#E5E5E5"> seconds or so the matter is it's</font>

1041
00:58:31,450 --> 00:58:36,040
a 32 bits<font color="#E5E5E5"> it's random values each of the</font>

1042
00:58:34,390 --> 00:58:38,080
<font color="#E5E5E5">bits are random independently because</font>

1043
00:58:36,040 --> 00:58:40,570
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> through random property that</font>

1044
00:58:38,080 --> 00:58:43,180
encryption gives<font color="#E5E5E5"> to you</font><font color="#CCCCCC"> so in a 32 bits</font>

1045
00:58:40,570 --> 00:58:45,580
at some point it will reach<font color="#CCCCCC"> 0 that's</font>

1046
00:58:43,180 --> 00:58:47,560
what we went when it reached 0 the

1047
00:58:45,580 --> 00:58:50,049
process<font color="#E5E5E5"> tells the brute-force</font><font color="#CCCCCC"> search</font><font color="#E5E5E5"> we</font>

1048
00:58:47,560 --> 00:58:51,700
<font color="#CCCCCC">stopped and essentially it just keeps</font>

1049
00:58:50,050 --> 00:59:06,490
with that<font color="#E5E5E5"> privilege that it's just</font>

1050
00:58:51,700 --> 00:59:14,040
<font color="#E5E5E5">gained it's it's going eventually you</font>

1051
00:59:06,490 --> 00:59:18,310
will see<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> end up with with</font><font color="#E5E5E5"> root</font>

1052
00:59:14,040 --> 00:59:22,740
so so now while we<font color="#E5E5E5"> are waiting when</font>

1053
00:59:18,310 --> 00:59:31,320
<font color="#CCCCCC">deceits will that's it</font>

1054
00:59:22,740 --> 00:59:36,040
hello<font color="#E5E5E5"> root so</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> so again what is the</font>

1055
00:59:31,320 --> 00:59:44,110
the<font color="#E5E5E5"> lesson taken all right so no canny</font>

1056
00:59:36,040 --> 00:59:47,890
we can get<font color="#CCCCCC"> you</font><font color="#E5E5E5"> see like once it's got</font>

1057
00:59:44,110 --> 00:59:49,750
<font color="#CCCCCC">you</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> 0 which is root the process</font>

1058
00:59:47,890 --> 00:59:51,850
just called the shell because now that

1059
00:59:49,750 --> 00:59:53,650
<font color="#CCCCCC">share is root and now you can</font><font color="#E5E5E5"> basically</font>

1060
00:59:51,850 --> 00:59:55,930
read<font color="#E5E5E5"> secrets you can do whatever you</font>

1061
00:59:53,650 --> 00:59:57,850
want in that<font color="#E5E5E5"> machine right it's a simple</font>

1062
00:59:55,930 --> 01:00:01,980
brute force<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fact that the memories</font>

1063
00:59:57,850 --> 01:00:01,980
encrypted made very little<font color="#E5E5E5"> difference</font>

1064
01:00:04,300 --> 01:00:11,430
<font color="#E5E5E5">all right so so what we saw actually is</font>

1065
01:00:07,090 --> 01:00:14,920
is an upgrade<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the same type of</font><font color="#E5E5E5"> attack</font>

1066
01:00:11,430 --> 01:00:18,279
over<font color="#E5E5E5"> encrypted memory we don't know what</font>

1067
01:00:14,920 --> 01:00:20,320
the values that we are<font color="#E5E5E5"> reading are</font><font color="#CCCCCC"> we</font>

1068
01:00:18,280 --> 01:00:22,720
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> going to be</font>

1069
01:00:20,320 --> 01:00:26,800
changed<font color="#E5E5E5"> by some</font><font color="#CCCCCC"> change in the</font><font color="#E5E5E5"> encrypted</font>

1070
01:00:22,720 --> 01:00:29,319
memory<font color="#E5E5E5"> but yet we can identify</font><font color="#CCCCCC"> places</font>

1071
01:00:26,800 --> 01:00:31,420
like in the<font color="#E5E5E5"> first time it was</font><font color="#CCCCCC"> a single</font>

1072
01:00:29,320 --> 01:00:34,120
bit where a single bit was critical to

1073
01:00:31,420 --> 01:00:36,040
to flip from<font color="#CCCCCC"> authentic a pre</font>

1074
01:00:34,120 --> 01:00:39,370
authenticated or<font color="#E5E5E5"> not pre authenticated</font>

1075
01:00:36,040 --> 01:00:42,910
and allowed<font color="#E5E5E5"> the the program to get a</font>

1076
01:00:39,370 --> 01:00:45,930
<font color="#E5E5E5">login as root and</font><font color="#CCCCCC"> this time it's more</font>

1077
01:00:42,910 --> 01:00:48,370
it's not<font color="#E5E5E5"> so so this type of attack</font><font color="#CCCCCC"> of</font>

1078
01:00:45,930 --> 01:00:50,500
unencrypted memory is not only<font color="#E5E5E5"> on a</font>

1079
01:00:48,370 --> 01:00:53,920
single<font color="#E5E5E5"> bit you can apply this to other</font>

1080
01:00:50,500 --> 01:00:57,030
things and you<font color="#CCCCCC"> can just imagine that</font>

1081
01:00:53,920 --> 01:01:00,850
<font color="#E5E5E5">this process ends after</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> to the 32</font>

1082
01:00:57,030 --> 01:01:04,450
<font color="#E5E5E5">attempts on average of course the</font>

1083
01:01:00,850 --> 01:01:07,000
sequence here was only showing<font color="#E5E5E5"> after</font><font color="#CCCCCC"> 10</font>

1084
01:01:04,450 --> 01:01:10,509
seconds but this is absolutely<font color="#E5E5E5"> doable</font>

1085
01:01:07,000 --> 01:01:13,000
<font color="#CCCCCC">and in reality we see many many short</font>

1086
01:01:10,510 --> 01:01:19,450
variables<font color="#E5E5E5"> like 32 bits and</font><font color="#CCCCCC"> which we find</font>

1087
01:01:13,000 --> 01:01:23,200
<font color="#E5E5E5">smaller it's it's even</font><font color="#CCCCCC"> better and right</font>

1088
01:01:19,450 --> 01:01:26,859
<font color="#E5E5E5">so again again again</font>

1089
01:01:23,200 --> 01:01:31,509
<font color="#E5E5E5">don't try to encrypt without</font>

1090
01:01:26,860 --> 01:01:35,200
authentication<font color="#CCCCCC"> unless you are absolutely</font>

1091
01:01:31,510 --> 01:01:39,690
sure<font color="#E5E5E5"> that the attacker cannot overwrite</font>

1092
01:01:35,200 --> 01:01:42,730
and overwrite<font color="#CCCCCC"> your memory or your</font>

1093
01:01:39,690 --> 01:01:46,990
<font color="#CCCCCC">ciphertext but this is very</font><font color="#E5E5E5"> difficult to</font>

1094
01:01:42,730 --> 01:01:49,990
to promise<font color="#E5E5E5"> something like this because</font>

1095
01:01:46,990 --> 01:01:52,330
to begin<font color="#E5E5E5"> with you encrypted your memory</font>

1096
01:01:49,990 --> 01:01:56,169
<font color="#E5E5E5">because there is some adversary who can</font>

1097
01:01:52,330 --> 01:01:58,600
read that memory so in<font color="#E5E5E5"> most</font><font color="#CCCCCC"> cases you</font>

1098
01:01:56,170 --> 01:02:01,600
can think of<font color="#E5E5E5"> if an adversary</font><font color="#CCCCCC"> can read</font>

1099
01:01:58,600 --> 01:02:03,790
the memory<font color="#E5E5E5"> there</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> no reason why</font><font color="#CCCCCC"> he</font>

1100
01:02:01,600 --> 01:02:06,150
could not<font color="#CCCCCC"> also overwrite the memory and</font>

1101
01:02:03,790 --> 01:02:09,340
this means that<font color="#E5E5E5"> you really</font><font color="#CCCCCC"> need some</font>

1102
01:02:06,150 --> 01:02:12,960
means of authentication<font color="#CCCCCC"> even if it is</font>

1103
01:02:09,340 --> 01:02:15,940
<font color="#E5E5E5">not a full proof</font><font color="#CCCCCC"> a cryptographic</font>

1104
01:02:12,960 --> 01:02:17,680
authentication even<font color="#CCCCCC"> something that would</font>

1105
01:02:15,940 --> 01:02:21,010
fail the<font color="#CCCCCC"> system and</font>

1106
01:02:17,680 --> 01:02:24,819
frustrate an attacker<font color="#E5E5E5"> just imagine that</font>

1107
01:02:21,010 --> 01:02:28,000
<font color="#CCCCCC">somebody</font><font color="#E5E5E5"> wants to do this hack over 32</font>

1108
01:02:24,819 --> 01:02:31,119
bits and there is some some kind<font color="#E5E5E5"> of</font>

1109
01:02:28,000 --> 01:02:33,579
authentication<font color="#CCCCCC"> that gives you another 32</font>

1110
01:02:31,119 --> 01:02:35,349
bits of authentication<font color="#E5E5E5"> or even 16 bits</font>

1111
01:02:33,579 --> 01:02:38,020
of authentication something very<font color="#E5E5E5"> very</font>

1112
01:02:35,349 --> 01:02:40,450
<font color="#E5E5E5">simple now something that took a</font><font color="#CCCCCC"> few</font>

1113
01:02:38,020 --> 01:02:41,800
<font color="#E5E5E5">minutes is going to take a very long</font>

1114
01:02:40,450 --> 01:02:48,609
<font color="#CCCCCC">time</font>

1115
01:02:41,800 --> 01:02:51,520
so<font color="#E5E5E5"> I would say</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> that's it and thank</font>

1116
01:02:48,609 --> 01:02:55,340
you<font color="#E5E5E5"> for your for</font><font color="#CCCCCC"> your time</font>

1117
01:02:51,520 --> 01:03:01,389
and I'm done with<font color="#CCCCCC"> this</font>

1118
01:02:55,340 --> 01:03:01,389
[Applause]

