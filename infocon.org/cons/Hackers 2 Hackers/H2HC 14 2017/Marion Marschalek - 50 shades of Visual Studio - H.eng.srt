1
00:00:00,000 --> 00:00:06,089
50<font color="#CCCCCC"> shades of</font><font color="#E5E5E5"> Visual Studio I'll be</font>

2
00:00:03,540 --> 00:00:09,540
speaking<font color="#CCCCCC"> about an experimental</font><font color="#E5E5E5"> project</font>

3
00:00:06,089 --> 00:00:11,610
of mine to visualize differences in in

4
00:00:09,540 --> 00:00:14,669
binary story introduced by<font color="#E5E5E5"> budget studio</font>

5
00:00:11,610 --> 00:00:18,720
optimization settings let's talk is a

6
00:00:14,670 --> 00:00:22,948
mix of analysis of optimization settings

7
00:00:18,720 --> 00:00:25,650
of<font color="#E5E5E5"> visualization techniques of binary</font>

8
00:00:22,949 --> 00:00:28,500
<font color="#E5E5E5">core graphs of core graph visualization</font>

9
00:00:25,650 --> 00:00:30,359
<font color="#CCCCCC">of thread attractions</font><font color="#E5E5E5"> of metrics</font>

10
00:00:28,500 --> 00:00:33,660
<font color="#E5E5E5">engineering so it's a it's a</font><font color="#CCCCCC"> very</font>

11
00:00:30,359 --> 00:00:35,880
<font color="#CCCCCC">colorful mix</font><font color="#E5E5E5"> of different topics throw</font>

12
00:00:33,660 --> 00:00:37,828
<font color="#CCCCCC">that the slides there's a lot of</font><font color="#E5E5E5"> numbers</font>

13
00:00:35,880 --> 00:00:39,840
and that occasionally might be very

14
00:00:37,829 --> 00:00:42,809
confusing<font color="#E5E5E5"> and I know that confusing</font>

15
00:00:39,840 --> 00:00:44,760
things tend to<font color="#CCCCCC"> be boring so I put a lot</font>

16
00:00:42,809 --> 00:00:48,260
of<font color="#CCCCCC"> tried</font><font color="#E5E5E5"> to put a lot of funny pictures</font>

17
00:00:44,760 --> 00:00:52,739
<font color="#CCCCCC">of the slides to keep people awake</font><font color="#E5E5E5"> from</font>

18
00:00:48,260 --> 00:00:56,730
passing<font color="#E5E5E5"> out of my numbers</font><font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all</font>

19
00:00:52,739 --> 00:00:58,980
starting<font color="#CCCCCC"> a talk with a disclaimer that</font>

20
00:00:56,730 --> 00:01:01,169
just disappeared this<font color="#CCCCCC"> is possibly the</font>

21
00:00:58,980 --> 00:01:03,390
most the<font color="#CCCCCC"> the ugliest slide I've ever put</font>

22
00:01:01,170 --> 00:01:05,430
on any of my<font color="#E5E5E5"> PowerPoint decks to be</font>

23
00:01:03,390 --> 00:01:07,409
honest<font color="#E5E5E5"> like copy paste the slide from</font><font color="#CCCCCC"> my</font>

24
00:01:05,430 --> 00:01:09,540
manager<font color="#E5E5E5"> I recently started work for</font>

25
00:01:07,409 --> 00:01:12,000
Intel<font color="#E5E5E5"> I know work on Rodriguez team and</font>

26
00:01:09,540 --> 00:01:14,310
<font color="#E5E5E5">Rodrigo told me to just copy</font><font color="#CCCCCC"> paste this</font>

27
00:01:12,000 --> 00:01:16,229
disclaimer<font color="#E5E5E5"> here so here it is</font><font color="#CCCCCC"> I don't</font>

28
00:01:14,310 --> 00:01:18,060
speak from<font color="#E5E5E5"> my employer do all the</font>

29
00:01:16,229 --> 00:01:20,340
opinions<font color="#CCCCCC"> and information</font><font color="#E5E5E5"> presented here</font>

30
00:01:18,060 --> 00:01:21,780
are my<font color="#CCCCCC"> responsibilities and obviously I</font>

31
00:01:20,340 --> 00:01:25,320
do not<font color="#E5E5E5"> work for</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> internal security</font>

32
00:01:21,780 --> 00:01:27,240
group or McAfee<font color="#CCCCCC"> alright</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> that</font>

33
00:01:25,320 --> 00:01:28,889
<font color="#CCCCCC">let's go on with the</font><font color="#E5E5E5"> actual</font><font color="#CCCCCC"> topic so my</font>

34
00:01:27,240 --> 00:01:30,720
name is just introduced it's very much

35
00:01:28,890 --> 00:01:33,420
like<font color="#E5E5E5"> I spent most of my professional</font>

36
00:01:30,720 --> 00:01:36,420
<font color="#CCCCCC">career in</font><font color="#E5E5E5"> threat detection I worked in</font>

37
00:01:33,420 --> 00:01:38,460
antivirus<font color="#CCCCCC"> I</font><font color="#E5E5E5"> worked for an advanced</font>

38
00:01:36,420 --> 00:01:40,920
threat detection company I worked in

39
00:01:38,460 --> 00:01:44,548
<font color="#CCCCCC">Israel response</font><font color="#E5E5E5"> so I did it all and just</font>

40
00:01:40,920 --> 00:01:47,030
about eight weeks<font color="#CCCCCC"> ago I left</font><font color="#E5E5E5"> that field</font>

41
00:01:44,549 --> 00:01:51,439
to<font color="#E5E5E5"> start work on the level</font><font color="#CCCCCC"> of security I</font>

42
00:01:47,030 --> 00:01:53,970
just mentioned for Intel in<font color="#E5E5E5"> Portland</font><font color="#CCCCCC"> and</font>

43
00:01:51,439 --> 00:01:56,158
if Intel<font color="#E5E5E5"> ever happens</font><font color="#CCCCCC"> to give me</font>

44
00:01:53,970 --> 00:01:58,619
<font color="#E5E5E5">business cards I will ask them</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> put my</font>

45
00:01:56,159 --> 00:02:00,180
job title as<font color="#E5E5E5"> graph</font><font color="#CCCCCC"> Dracula</font><font color="#E5E5E5"> because just</font>

46
00:01:58,619 --> 00:02:03,710
last<font color="#E5E5E5"> year I fell madly in love with</font>

47
00:02:00,180 --> 00:02:06,240
binary<font color="#CCCCCC"> code reps</font><font color="#E5E5E5"> and this is what this</font>

48
00:02:03,710 --> 00:02:09,769
current project of mine is<font color="#E5E5E5"> also based on</font>

49
00:02:06,240 --> 00:02:09,769
on binary<font color="#CCCCCC"> car graphs</font>

50
00:02:09,870 --> 00:02:14,650
<font color="#CCCCCC">where does this come from though so over</font>

51
00:02:13,180 --> 00:02:18,820
the<font color="#E5E5E5"> past year I've</font><font color="#CCCCCC"> been working on</font>

52
00:02:14,650 --> 00:02:20,320
IOC<font color="#E5E5E5"> engineering IOC s are used for</font>

53
00:02:18,820 --> 00:02:22,989
threat detection<font color="#E5E5E5"> is e stands for</font>

54
00:02:20,320 --> 00:02:24,910
indicator of compromise<font color="#E5E5E5"> and if</font><font color="#CCCCCC"> you have</font>

55
00:02:22,990 --> 00:02:26,470
ever worked with<font color="#CCCCCC"> threat intelligence</font>

56
00:02:24,910 --> 00:02:28,359
data you'll find out<font color="#E5E5E5"> that most of the</font>

57
00:02:26,470 --> 00:02:32,200
<font color="#E5E5E5">IOC</font><font color="#CCCCCC"> so are currently</font><font color="#E5E5E5"> shared for threat</font>

58
00:02:28,360 --> 00:02:35,080
detection<font color="#E5E5E5"> our md5 hashes and sha-256</font>

59
00:02:32,200 --> 00:02:37,060
hashes<font color="#E5E5E5"> which is possibly like the most</font>

60
00:02:35,080 --> 00:02:41,710
stupid way<font color="#CCCCCC"> to try to detect malware on</font>

61
00:02:37,060 --> 00:02:43,510
an<font color="#E5E5E5"> infected system I think classical</font>

62
00:02:41,710 --> 00:02:47,800
antivirus has stopped using md5<font color="#CCCCCC"> threat</font>

63
00:02:43,510 --> 00:02:49,329
detection but in 95<font color="#CCCCCC"> to 98 and now with</font>

64
00:02:47,800 --> 00:02:51,340
<font color="#E5E5E5">threat intelligence we go back to the</font>

65
00:02:49,330 --> 00:02:54,370
stage where we<font color="#E5E5E5"> came from and I use</font><font color="#CCCCCC"> five</font>

66
00:02:51,340 --> 00:02:57,400
<font color="#E5E5E5">hushes again so I've been</font><font color="#CCCCCC"> working on</font>

67
00:02:54,370 --> 00:03:00,400
<font color="#E5E5E5">several projects one in cooperation</font><font color="#CCCCCC"> with</font>

68
00:02:57,400 --> 00:03:02,200
<font color="#E5E5E5">the National surgeon Luxembourg the</font>

69
00:03:00,400 --> 00:03:03,940
<font color="#E5E5E5">National certain Luxembourg is operating</font>

70
00:03:02,200 --> 00:03:07,000
a threat intelligence<font color="#E5E5E5"> sharing platform</font>

71
00:03:03,940 --> 00:03:09,310
<font color="#E5E5E5">called</font><font color="#CCCCCC"> Miss</font><font color="#E5E5E5"> Melbourne information</font>

72
00:03:07,000 --> 00:03:11,170
sharing<font color="#E5E5E5"> platform something something and</font>

73
00:03:09,310 --> 00:03:13,900
we have tried to come up<font color="#E5E5E5"> with new ideas</font>

74
00:03:11,170 --> 00:03:16,690
<font color="#E5E5E5">of how to develop indicators</font><font color="#CCCCCC"> that are</font>

75
00:03:13,900 --> 00:03:18,310
<font color="#E5E5E5">more resilient to change in binaries</font>

76
00:03:16,690 --> 00:03:20,609
<font color="#CCCCCC">that are cheaper and easier to produce</font>

77
00:03:18,310 --> 00:03:24,670
than indicators<font color="#CCCCCC"> that we currently use</font>

78
00:03:20,610 --> 00:03:27,190
<font color="#E5E5E5">there was one other project to integrate</font>

79
00:03:24,670 --> 00:03:29,500
the graph analysis tool that<font color="#CCCCCC"> actually</font>

80
00:03:27,190 --> 00:03:32,770
presented<font color="#E5E5E5"> about here last year</font><font color="#CCCCCC"> into the</font>

81
00:03:29,500 --> 00:03:36,070
<font color="#CCCCCC">threat intelligence platform to be</font><font color="#E5E5E5"> able</font>

82
00:03:32,770 --> 00:03:39,280
<font color="#E5E5E5">to create more resilient indicators in a</font>

83
00:03:36,070 --> 00:03:41,109
second project<font color="#E5E5E5"> I worked with a</font>

84
00:03:39,280 --> 00:03:44,290
researcher from<font color="#CCCCCC"> University of Cambridge</font>

85
00:03:41,110 --> 00:03:46,450
we<font color="#CCCCCC"> tried to measure the resilience and</font>

86
00:03:44,290 --> 00:03:50,739
<font color="#E5E5E5">the cost-effectiveness of indicate</font>

87
00:03:46,450 --> 00:03:54,310
equation and now in<font color="#E5E5E5"> this talk today</font><font color="#CCCCCC"> I</font>

88
00:03:50,740 --> 00:03:57,070
want to explore how how resilient<font color="#E5E5E5"> threat</font>

89
00:03:54,310 --> 00:03:58,840
indicators are if different<font color="#E5E5E5"> compiler</font>

90
00:03:57,070 --> 00:04:00,850
settings are<font color="#E5E5E5"> used in binaries it sounds</font>

91
00:03:58,840 --> 00:04:03,730
a<font color="#CCCCCC"> bit odd</font><font color="#E5E5E5"> but in fact they can be very</font>

92
00:04:00,850 --> 00:04:06,730
<font color="#E5E5E5">helpful to</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to use the same kind</font>

93
00:04:03,730 --> 00:04:08,410
<font color="#CCCCCC">of indicator for</font><font color="#E5E5E5"> the same kind of source</font>

94
00:04:06,730 --> 00:04:10,690
<font color="#E5E5E5">space that has been compiled into</font>

95
00:04:08,410 --> 00:04:12,430
<font color="#E5E5E5">different projects if you ever looked</font>

96
00:04:10,690 --> 00:04:15,340
into<font color="#CCCCCC"> your optimization</font><font color="#E5E5E5"> settings if you</font>

97
00:04:12,430 --> 00:04:19,060
<font color="#E5E5E5">use the same source code in context of</font>

98
00:04:15,340 --> 00:04:20,440
<font color="#E5E5E5">different source projects search code</font>

99
00:04:19,060 --> 00:04:22,700
mind up<font color="#E5E5E5"> might end up</font><font color="#CCCCCC"> looking different</font>

100
00:04:20,440 --> 00:04:24,980
<font color="#CCCCCC">in the compiled binary</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font>

101
00:04:22,700 --> 00:04:27,039
which<font color="#E5E5E5"> for our detection is a problem if</font>

102
00:04:24,980 --> 00:04:29,660
you use metrics<font color="#E5E5E5"> that match for exactly</font>

103
00:04:27,040 --> 00:04:34,370
<font color="#CCCCCC">the piece of pioneering</font><font color="#E5E5E5"> piece of code</font>

104
00:04:29,660 --> 00:04:36,020
<font color="#E5E5E5">did you try to detect all right so yeah</font>

105
00:04:34,370 --> 00:04:38,120
what we're actually working<font color="#E5E5E5"> on is we try</font>

106
00:04:36,020 --> 00:04:39,560
<font color="#CCCCCC">to</font><font color="#E5E5E5"> create more indicators</font><font color="#CCCCCC"> because we're</font>

107
00:04:38,120 --> 00:04:42,440
<font color="#E5E5E5">not satisfied with all the</font><font color="#CCCCCC"> hey that we</font>

108
00:04:39,560 --> 00:04:45,920
already<font color="#E5E5E5"> have so we need more</font><font color="#CCCCCC"> hey hey</font>

109
00:04:42,440 --> 00:04:46,910
look<font color="#CCCCCC"> like most</font><font color="#E5E5E5"> of most of</font><font color="#CCCCCC"> my</font>

110
00:04:45,920 --> 00:04:48,080
<font color="#E5E5E5">professional career as</font><font color="#CCCCCC"> mentioned I</font>

111
00:04:46,910 --> 00:04:51,350
<font color="#CCCCCC">worked in threat detection that's a</font>

112
00:04:48,080 --> 00:04:54,530
rather frustrating<font color="#E5E5E5"> field because threat</font>

113
00:04:51,350 --> 00:04:56,210
detection is<font color="#E5E5E5"> suffering from one</font><font color="#CCCCCC"> in the</font>

114
00:04:54,530 --> 00:04:58,780
same problem<font color="#CCCCCC"> since basically the</font>

115
00:04:56,210 --> 00:05:01,370
<font color="#E5E5E5">creation of threats and threat detection</font>

116
00:04:58,780 --> 00:05:04,580
<font color="#E5E5E5">ready to action in basic means it's</font>

117
00:05:01,370 --> 00:05:06,650
either file hashes or file fragments or

118
00:05:04,580 --> 00:05:08,659
behavior<font color="#CCCCCC"> or other properties of fast</font><font color="#E5E5E5"> so</font>

119
00:05:06,650 --> 00:05:10,520
<font color="#E5E5E5">we can use its system behavior or</font>

120
00:05:08,660 --> 00:05:13,580
<font color="#E5E5E5">network patterns to research for</font><font color="#CCCCCC"> its</font>

121
00:05:10,520 --> 00:05:16,820
anomalies<font color="#E5E5E5"> it's known bad and on good and</font>

122
00:05:13,580 --> 00:05:20,539
unknown bad and whatever whatever<font color="#CCCCCC"> so</font>

123
00:05:16,820 --> 00:05:22,430
it's all data<font color="#E5E5E5"> that basically suffers</font>

124
00:05:20,540 --> 00:05:24,740
from from one<font color="#E5E5E5"> in the same problem</font><font color="#CCCCCC"> which</font>

125
00:05:22,430 --> 00:05:26,780
<font color="#E5E5E5">would be that it's all heavily building</font>

126
00:05:24,740 --> 00:05:28,850
unknown known fragments<font color="#E5E5E5"> so we need a</font>

127
00:05:26,780 --> 00:05:30,859
file to<font color="#CCCCCC"> create that file</font><font color="#E5E5E5"> hash to detect</font>

128
00:05:28,850 --> 00:05:33,530
that file<font color="#E5E5E5"> or we need the actual behavior</font>

129
00:05:30,860 --> 00:05:34,820
<font color="#E5E5E5">to search for</font><font color="#CCCCCC"> on our system or or in the</font>

130
00:05:33,530 --> 00:05:40,190
in<font color="#E5E5E5"> the network screener were scanning</font>

131
00:05:34,820 --> 00:05:41,300
and this all tries<font color="#E5E5E5"> to find largely</font>

132
00:05:40,190 --> 00:05:43,730
unknown<font color="#E5E5E5"> pieces</font>

133
00:05:41,300 --> 00:05:46,100
it's sure<font color="#CCCCCC"> that threats or threat actors</font>

134
00:05:43,730 --> 00:05:49,430
reuse code and they reuse techniques but

135
00:05:46,100 --> 00:05:53,260
in the end the<font color="#CCCCCC"> maths mower market as I</font>

136
00:05:49,430 --> 00:05:56,000
call it relies on changing patterns

137
00:05:53,260 --> 00:05:59,990
consistently<font color="#E5E5E5"> to evade detection which is</font>

138
00:05:56,000 --> 00:06:02,960
based<font color="#E5E5E5"> on repetitive fragments and this</font>

139
00:05:59,990 --> 00:06:06,080
in<font color="#CCCCCC"> my opinion is</font><font color="#E5E5E5"> mostly the problem that</font>

140
00:06:02,960 --> 00:06:08,710
the metrics<font color="#CCCCCC"> that were using</font><font color="#E5E5E5"> aren't smart</font>

141
00:06:06,080 --> 00:06:14,359
enough<font color="#CCCCCC"> to actually adapt to the changing</font>

142
00:06:08,710 --> 00:06:17,479
<font color="#E5E5E5">binary surface that we try to detect so</font>

143
00:06:14,360 --> 00:06:19,520
<font color="#CCCCCC">we</font><font color="#E5E5E5"> tried to come up</font><font color="#CCCCCC"> with was smarter</font>

144
00:06:17,480 --> 00:06:21,620
indicators as I said that were more

145
00:06:19,520 --> 00:06:24,349
resilient<font color="#CCCCCC"> to little changes</font><font color="#E5E5E5"> in fast and</font>

146
00:06:21,620 --> 00:06:26,660
the<font color="#E5E5E5"> were more adaptive to how threats</font>

147
00:06:24,350 --> 00:06:28,220
<font color="#CCCCCC">would change over time and</font><font color="#E5E5E5"> we built</font>

148
00:06:26,660 --> 00:06:31,040
metrics out<font color="#E5E5E5"> of the file geometry the</font>

149
00:06:28,220 --> 00:06:33,530
graph geometry we try<font color="#E5E5E5"> to engineer</font>

150
00:06:31,040 --> 00:06:34,970
metrics out of API spawn in binary sort

151
00:06:33,530 --> 00:06:36,260
of behavior gadgets<font color="#CCCCCC"> that were found</font>

152
00:06:34,970 --> 00:06:39,470
within the

153
00:06:36,260 --> 00:06:41,060
<font color="#E5E5E5">API structure of of a binary and we also</font>

154
00:06:39,470 --> 00:06:43,250
<font color="#E5E5E5">put metrics around strings</font><font color="#CCCCCC"> found in</font>

155
00:06:41,060 --> 00:06:45,560
<font color="#E5E5E5">binary so this is all</font><font color="#CCCCCC"> former research</font>

156
00:06:43,250 --> 00:06:46,790
<font color="#E5E5E5">it's been</font><font color="#CCCCCC"> published</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> half a year</font>

157
00:06:45,560 --> 00:06:49,180
<font color="#CCCCCC">ago I can look</font><font color="#E5E5E5"> that up and make it</font><font color="#CCCCCC"> up</font>

158
00:06:46,790 --> 00:06:51,530
<font color="#E5E5E5">the latter and in the end it will all</font><font color="#CCCCCC"> be</font>

159
00:06:49,180 --> 00:06:56,000
hopefully sooner or later incorporated

160
00:06:51,530 --> 00:06:58,489
into<font color="#E5E5E5"> the Mizpah sharing platform</font><font color="#CCCCCC"> and</font>

161
00:06:56,000 --> 00:07:00,920
what<font color="#CCCCCC"> i've</font><font color="#E5E5E5"> been working on for</font><font color="#CCCCCC"> four</font>

162
00:06:58,490 --> 00:07:02,870
presentation here<font color="#CCCCCC"> today as the</font><font color="#E5E5E5"> site was</font>

163
00:07:00,920 --> 00:07:05,120
<font color="#E5E5E5">try to look how these indicators changed</font>

164
00:07:02,870 --> 00:07:09,860
<font color="#E5E5E5">if i recompile binaries with different</font>

165
00:07:05,120 --> 00:07:11,500
optimization settings the tool that<font color="#E5E5E5"> I've</font>

166
00:07:09,860 --> 00:07:14,810
been using that<font color="#CCCCCC"> I've</font><font color="#E5E5E5"> been speaking about</font>

167
00:07:11,500 --> 00:07:17,930
<font color="#E5E5E5">for for a long time now is</font><font color="#CCCCCC"> r2</font><font color="#E5E5E5"> graffiti</font>

168
00:07:14,810 --> 00:07:20,210
it's based<font color="#E5E5E5"> on radar - it's a binary</font>

169
00:07:17,930 --> 00:07:22,550
parser which creates the<font color="#CCCCCC"> coal graph out</font>

170
00:07:20,210 --> 00:07:23,989
of compiled binary the<font color="#E5E5E5"> call</font><font color="#CCCCCC"> graph would</font>

171
00:07:22,550 --> 00:07:25,760
<font color="#E5E5E5">be all of</font><font color="#CCCCCC"> the functions of</font><font color="#E5E5E5"> the binary</font>

172
00:07:23,990 --> 00:07:29,270
<font color="#CCCCCC">and how they interconnect with with</font>

173
00:07:25,760 --> 00:07:31,460
calls and<font color="#CCCCCC"> jumps the most important</font>

174
00:07:29,270 --> 00:07:33,799
components in<font color="#E5E5E5"> these curves are</font><font color="#CCCCCC"> the</font>

175
00:07:31,460 --> 00:07:36,440
function notes and the function edges of

176
00:07:33,800 --> 00:07:38,720
course<font color="#E5E5E5"> and over time this graph</font>

177
00:07:36,440 --> 00:07:41,090
structure has<font color="#CCCCCC"> been fitted</font><font color="#E5E5E5"> with lots of</font>

178
00:07:38,720 --> 00:07:43,670
other<font color="#E5E5E5"> attributes by now the graphs are</font>

179
00:07:41,090 --> 00:07:45,320
humongous<font color="#CCCCCC"> so there isn't</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> all</font>

180
00:07:43,670 --> 00:07:47,030
<font color="#E5E5E5">the information about those graphs on</font>

181
00:07:45,320 --> 00:07:48,740
the slide again<font color="#E5E5E5"> I would</font><font color="#CCCCCC"> recommend to</font>

182
00:07:47,030 --> 00:07:50,450
<font color="#E5E5E5">look up former presentations where I</font>

183
00:07:48,740 --> 00:07:51,680
spoke<font color="#E5E5E5"> in more detail</font><font color="#CCCCCC"> about how the</font>

184
00:07:50,450 --> 00:07:54,650
graphs<font color="#CCCCCC"> actually looked like</font><font color="#E5E5E5"> and which</font>

185
00:07:51,680 --> 00:07:55,780
<font color="#E5E5E5">information</font><font color="#CCCCCC"> they they provide I'll be</font>

186
00:07:54,650 --> 00:07:57,799
speaking<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit more about</font>

187
00:07:55,780 --> 00:07:59,840
attributes of these graphs that were

188
00:07:57,800 --> 00:08:02,270
used<font color="#CCCCCC"> for</font><font color="#E5E5E5"> the compiler settings</font>

189
00:07:59,840 --> 00:08:05,840
optimization<font color="#E5E5E5"> a little bit later</font><font color="#CCCCCC"> on</font>

190
00:08:02,270 --> 00:08:08,810
<font color="#E5E5E5">during</font><font color="#CCCCCC"> this presentation again</font><font color="#E5E5E5"> yes I</font>

191
00:08:05,840 --> 00:08:10,669
still use<font color="#CCCCCC"> rotary - I still</font><font color="#E5E5E5"> have lengthy</font>

192
00:08:08,810 --> 00:08:11,960
conversations about why<font color="#E5E5E5"> actually you sir</font>

193
00:08:10,670 --> 00:08:14,150
there are<font color="#CCCCCC"> - if</font><font color="#E5E5E5"> you ever tried using it</font>

194
00:08:11,960 --> 00:08:17,150
you probably<font color="#E5E5E5"> found some frustration in</font>

195
00:08:14,150 --> 00:08:19,940
it's difficult to use<font color="#CCCCCC"> and the commands</font>

196
00:08:17,150 --> 00:08:24,049
<font color="#E5E5E5">are hard to figure out and Rodari</font><font color="#CCCCCC"> - is</font>

197
00:08:19,940 --> 00:08:25,460
<font color="#E5E5E5">still full of bugs</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> admit that but the</font>

198
00:08:24,050 --> 00:08:28,280
benefit<font color="#CCCCCC"> that I found</font><font color="#E5E5E5"> and using the tool</font>

199
00:08:25,460 --> 00:08:30,020
was that<font color="#E5E5E5"> it's open source I can scale it</font>

200
00:08:28,280 --> 00:08:31,729
I can<font color="#E5E5E5"> run one instance of it I can run</font>

201
00:08:30,020 --> 00:08:34,189
<font color="#E5E5E5">20 instances a bit and it's - I don't</font>

202
00:08:31,730 --> 00:08:35,720
<font color="#E5E5E5">have to pay money</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the second point</font>

203
00:08:34,190 --> 00:08:38,330
<font color="#E5E5E5">would be that it's actually a really</font>

204
00:08:35,720 --> 00:08:39,050
elaborate framework around<font color="#E5E5E5"> a good this</font>

205
00:08:38,330 --> 00:08:41,000
<font color="#E5E5E5">is semi engine</font>

206
00:08:39,049 --> 00:08:42,469
so<font color="#E5E5E5"> right there it - I'm pretty sure</font>

207
00:08:41,000 --> 00:08:45,410
right now he's<font color="#E5E5E5"> using the capstan - this</font>

208
00:08:42,470 --> 00:08:49,430
is<font color="#CCCCCC"> only</font><font color="#E5E5E5"> framework or the decision</font><font color="#CCCCCC"> B tool</font>

209
00:08:45,410 --> 00:08:51,020
and the framework is put on top<font color="#CCCCCC"> of it</font>

210
00:08:49,430 --> 00:08:53,839
it's the most<font color="#E5E5E5"> elaborate that I could</font>

211
00:08:51,020 --> 00:08:57,110
find in any open<font color="#E5E5E5"> source or really</font>

212
00:08:53,839 --> 00:08:59,029
available<font color="#CCCCCC"> disassembly tool</font><font color="#E5E5E5"> so that's why</font>

213
00:08:57,110 --> 00:09:01,970
I'm also still<font color="#CCCCCC"> working with a</font><font color="#E5E5E5"> radar team</font>

214
00:08:59,029 --> 00:09:05,330
to try to fix their<font color="#E5E5E5"> bugs and I'm fixing</font>

215
00:09:01,970 --> 00:09:09,040
my<font color="#E5E5E5"> bags and we're having a happy</font><font color="#CCCCCC"> very</font>

216
00:09:05,330 --> 00:09:11,720
fruitful cooperation there<font color="#E5E5E5"> I would mean</font>

217
00:09:09,040 --> 00:09:14,029
<font color="#CCCCCC">also</font><font color="#E5E5E5"> stills that</font><font color="#CCCCCC"> you can answer</font><font color="#E5E5E5"> the king</font>

218
00:09:11,720 --> 00:09:16,550
<font color="#CCCCCC">or in my</font><font color="#E5E5E5"> case where the princess why am</font>

219
00:09:14,029 --> 00:09:17,900
i living<font color="#E5E5E5"> and static analysis I've also</font>

220
00:09:16,550 --> 00:09:19,819
had<font color="#E5E5E5"> lengthy discussions about this I</font>

221
00:09:17,900 --> 00:09:21,949
don't<font color="#CCCCCC"> believe in sandboxes just to say</font>

222
00:09:19,820 --> 00:09:23,510
that because<font color="#E5E5E5"> just imagine whenever you</font>

223
00:09:21,950 --> 00:09:25,310
put the file into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> sandbox</font><font color="#CCCCCC"> it means</font>

224
00:09:23,510 --> 00:09:26,660
that there<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> virtual user doing a</font>

225
00:09:25,310 --> 00:09:29,209
virtual<font color="#CCCCCC"> double-click on</font><font color="#E5E5E5"> that file</font><font color="#CCCCCC"> and</font>

226
00:09:26,660 --> 00:09:31,550
that file is expected to at any point in

227
00:09:29,210 --> 00:09:34,010
time in<font color="#E5E5E5"> their show all of</font><font color="#CCCCCC"> its behavior</font>

228
00:09:31,550 --> 00:09:35,689
<font color="#E5E5E5">which is never gonna happen</font><font color="#CCCCCC"> this is why</font>

229
00:09:34,010 --> 00:09:37,310
I<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> then see when enter industry is</font>

230
00:09:35,690 --> 00:09:39,170
<font color="#E5E5E5">working on</font><font color="#CCCCCC"> sand boxes and</font><font color="#E5E5E5"> then sandbox</font>

231
00:09:37,310 --> 00:09:40,969
behavior feature extraction<font color="#E5E5E5"> machine</font>

232
00:09:39,170 --> 00:09:43,339
learning<font color="#E5E5E5"> and whatnot because I think</font>

233
00:09:40,970 --> 00:09:45,050
it's<font color="#CCCCCC"> just not not</font><font color="#E5E5E5"> working properly which</font>

234
00:09:43,339 --> 00:09:47,330
<font color="#E5E5E5">is why we go static what I mean</font><font color="#CCCCCC"> with</font>

235
00:09:45,050 --> 00:09:48,949
static the tool that<font color="#E5E5E5"> I that I worked on</font>

236
00:09:47,330 --> 00:09:52,550
basically<font color="#CCCCCC"> this assembles</font><font color="#E5E5E5"> the whole</font>

237
00:09:48,950 --> 00:09:54,020
<font color="#E5E5E5">binary file that's what I was doing</font><font color="#CCCCCC"> this</font>

238
00:09:52,550 --> 00:09:55,609
is<font color="#E5E5E5"> something the file trying to detect</font>

239
00:09:54,020 --> 00:09:58,279
functions and then translating these

240
00:09:55,610 --> 00:10:00,230
these functions into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> core graph so</font>

241
00:09:58,279 --> 00:10:01,850
every function becomes a<font color="#CCCCCC"> node and</font><font color="#E5E5E5"> the</font>

242
00:10:00,230 --> 00:10:03,350
recall becomes an edge<font color="#E5E5E5"> and this is how</font>

243
00:10:01,850 --> 00:10:04,700
we get a graph<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> a beautiful thing</font>

244
00:10:03,350 --> 00:10:06,950
about binaries there are naturally call

245
00:10:04,700 --> 00:10:08,650
crops<font color="#E5E5E5"> they're bound to be</font><font color="#CCCCCC"> Congress</font>

246
00:10:06,950 --> 00:10:15,320
because this is how they're structured

247
00:10:08,650 --> 00:10:18,199
<font color="#E5E5E5">by nature coops yeah the beautiful</font><font color="#CCCCCC"> thing</font>

248
00:10:15,320 --> 00:10:19,850
about looking<font color="#CCCCCC"> at a call graph</font><font color="#E5E5E5"> is that in</font>

249
00:10:18,200 --> 00:10:21,529
the ideal call<font color="#CCCCCC"> graph</font><font color="#E5E5E5"> the given</font><font color="#CCCCCC"> that</font>

250
00:10:19,850 --> 00:10:23,480
<font color="#CCCCCC">Rodari does its thing right and given it</font>

251
00:10:21,529 --> 00:10:25,459
the art to<font color="#E5E5E5"> graph it it all does its</font>

252
00:10:23,480 --> 00:10:27,020
thing right<font color="#E5E5E5"> we have the coverage of</font>

253
00:10:25,459 --> 00:10:28,550
<font color="#E5E5E5">hundred percent of the file so we</font><font color="#CCCCCC"> can</font>

254
00:10:27,020 --> 00:10:30,170
see all<font color="#CCCCCC"> the</font><font color="#E5E5E5"> functions and and see how</font>

255
00:10:28,550 --> 00:10:33,229
the<font color="#E5E5E5"> interleave this of course has</font>

256
00:10:30,170 --> 00:10:35,599
limitations because function detections

257
00:10:33,230 --> 00:10:37,520
function detection in binaries<font color="#E5E5E5"> in this</font>

258
00:10:35,600 --> 00:10:40,160
<font color="#CCCCCC">assembly framework is still a hard</font>

259
00:10:37,520 --> 00:10:44,120
problem<font color="#E5E5E5"> and doesn't</font><font color="#CCCCCC"> always work so</font><font color="#E5E5E5"> well</font>

260
00:10:40,160 --> 00:10:46,189
<font color="#E5E5E5">and also other issues</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> C++ or</font>

261
00:10:44,120 --> 00:10:47,900
indirect function<font color="#E5E5E5"> calls etcetera it's</font>

262
00:10:46,190 --> 00:10:50,089
giving us a challenge<font color="#E5E5E5"> but the basic</font>

263
00:10:47,900 --> 00:10:51,350
chance of getting higher courage<font color="#E5E5E5"> with</font>

264
00:10:50,089 --> 00:10:54,110
static analysis is a lot<font color="#E5E5E5"> bigger than</font>

265
00:10:51,350 --> 00:10:57,800
with dynamic analysis also<font color="#E5E5E5"> these graphs</font>

266
00:10:54,110 --> 00:10:59,329
are<font color="#E5E5E5"> a lot more resilient well the</font>

267
00:10:57,800 --> 00:11:01,160
problem the other side is the parsing

268
00:10:59,329 --> 00:11:03,260
complexity executing a foul<font color="#CCCCCC"> on</font><font color="#E5E5E5"> sandbox</font>

269
00:11:01,160 --> 00:11:05,110
is a lot<font color="#E5E5E5"> faster</font><font color="#CCCCCC"> than trying to</font><font color="#E5E5E5"> create</font>

270
00:11:03,260 --> 00:11:07,670
the proper call graph of the binary

271
00:11:05,110 --> 00:11:10,280
house is working<font color="#E5E5E5"> the whole tool is based</font>

272
00:11:07,670 --> 00:11:12,380
on Python<font color="#E5E5E5"> 3 it's using</font><font color="#CCCCCC"> retiree to now to</font>

273
00:11:10,280 --> 00:11:15,829
pipe for this<font color="#E5E5E5"> assembly is using</font><font color="#CCCCCC"> Network</font>

274
00:11:12,380 --> 00:11:18,320
<font color="#CCCCCC">X for creating the actual graphs and</font><font color="#E5E5E5"> PFR</font>

275
00:11:15,830 --> 00:11:20,780
<font color="#E5E5E5">and</font><font color="#CCCCCC"> pi deep and numpy for generating</font>

276
00:11:18,320 --> 00:11:23,390
<font color="#CCCCCC">metadata</font><font color="#E5E5E5"> and calculating the metrics out</font>

277
00:11:20,780 --> 00:11:25,939
<font color="#E5E5E5">of file also there is a rather in</font>

278
00:11:23,390 --> 00:11:27,860
functional connector for neo4j so in

279
00:11:25,940 --> 00:11:29,990
theory the whole binary graph can<font color="#CCCCCC"> be</font>

280
00:11:27,860 --> 00:11:33,080
translated<font color="#E5E5E5"> into a database</font><font color="#CCCCCC"> and can</font><font color="#E5E5E5"> then</font>

281
00:11:29,990 --> 00:11:35,390
be<font color="#E5E5E5"> created in there but therefore neo4j</font>

282
00:11:33,080 --> 00:11:36,530
has to be set<font color="#CCCCCC"> up</font><font color="#E5E5E5"> on a proper machine and</font>

283
00:11:35,390 --> 00:11:38,480
maintained properly and they eventually

284
00:11:36,530 --> 00:11:42,380
give up developing the branch<font color="#E5E5E5"> because</font>

285
00:11:38,480 --> 00:11:46,040
new purchases so upsetting however we

286
00:11:42,380 --> 00:11:48,680
<font color="#E5E5E5">still have the co-op's let's mention me</font>

287
00:11:46,040 --> 00:11:51,560
for function detection in this<font color="#CCCCCC"> assembly</font>

288
00:11:48,680 --> 00:11:53,810
frameworks is a hard problem<font color="#E5E5E5"> this is</font>

289
00:11:51,560 --> 00:11:55,550
something that<font color="#E5E5E5"> as of today I learned of</font>

290
00:11:53,810 --> 00:11:58,430
discussion with with other engineers

291
00:11:55,550 --> 00:12:01,250
<font color="#E5E5E5">isn't an unsolved problem and even</font>

292
00:11:58,430 --> 00:12:03,859
<font color="#E5E5E5">elaborate tools such as</font><font color="#CCCCCC"> ida pro have</font>

293
00:12:01,250 --> 00:12:05,120
their problems<font color="#E5E5E5"> with it also there is a</font>

294
00:12:03,860 --> 00:12:07,840
little<font color="#E5E5E5"> agreed on method to verify</font>

295
00:12:05,120 --> 00:12:09,980
whether a detected function in a

296
00:12:07,840 --> 00:12:12,620
disassembled binary is actually true

297
00:12:09,980 --> 00:12:14,000
positive or a false positive<font color="#E5E5E5"> if you look</font>

298
00:12:12,620 --> 00:12:16,370
at either pro either pro is very good in

299
00:12:14,000 --> 00:12:19,430
function detection<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> the other</font><font color="#E5E5E5"> pro</font>

300
00:12:16,370 --> 00:12:21,710
developers also spent significant time

301
00:12:19,430 --> 00:12:24,760
and<font color="#E5E5E5"> significant resources in improving</font>

302
00:12:21,710 --> 00:12:28,180
their this<font color="#CCCCCC"> december I'll give them that</font>

303
00:12:24,760 --> 00:12:31,100
but occasionally<font color="#CCCCCC"> we will still see how a</font>

304
00:12:28,180 --> 00:12:33,589
jump table<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example is disassembled</font>

305
00:12:31,100 --> 00:12:35,720
into<font color="#E5E5E5"> bytecode or how strings are</font>

306
00:12:33,590 --> 00:12:37,700
interpreted as<font color="#E5E5E5"> executable code or how</font>

307
00:12:35,720 --> 00:12:40,730
executable code is interpreted<font color="#CCCCCC"> strings</font>

308
00:12:37,700 --> 00:12:44,060
and so<font color="#E5E5E5"> on support so this</font><font color="#CCCCCC"> is not</font>

309
00:12:40,730 --> 00:12:45,800
<font color="#CCCCCC">actually an easy challenge on this slide</font>

310
00:12:44,060 --> 00:12:48,050
you<font color="#E5E5E5"> see a</font><font color="#CCCCCC"> comparison between our two and</font>

311
00:12:45,800 --> 00:12:50,359
<font color="#E5E5E5">the just mentioned other function count</font>

312
00:12:48,050 --> 00:12:52,430
<font color="#CCCCCC">turns out if you poke the are two people</font>

313
00:12:50,360 --> 00:12:56,950
<font color="#CCCCCC">about</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> they compared to</font><font color="#E5E5E5"> other</font><font color="#CCCCCC"> Pro to</font>

314
00:12:52,430 --> 00:13:00,319
get rather rather tipsy but that I

315
00:12:56,950 --> 00:13:02,620
called<font color="#E5E5E5"> the other tool just the other</font>

316
00:13:00,320 --> 00:13:05,870
tool and comparing the function<font color="#E5E5E5"> count</font>

317
00:13:02,620 --> 00:13:07,430
<font color="#CCCCCC">one can see that</font><font color="#E5E5E5"> rather</font><font color="#CCCCCC"> a two</font><font color="#E5E5E5"> and some</font>

318
00:13:05,870 --> 00:13:10,610
occasions finds a lot more functions

319
00:13:07,430 --> 00:13:13,120
<font color="#CCCCCC">than either Pro</font><font color="#E5E5E5"> which in most cases of</font>

320
00:13:10,610 --> 00:13:15,950
<font color="#CCCCCC">the find out were false positives I</font>

321
00:13:13,120 --> 00:13:17,720
might want to mention<font color="#CCCCCC"> though if you look</font>

322
00:13:15,950 --> 00:13:20,209
<font color="#E5E5E5">at the code wrapper</font>

323
00:13:17,720 --> 00:13:21,709
a wrongly detected function will<font color="#CCCCCC"> not</font>

324
00:13:20,209 --> 00:13:23,508
<font color="#E5E5E5">actually appear as a part of the graph</font>

325
00:13:21,709 --> 00:13:24,979
<font color="#CCCCCC">but</font><font color="#E5E5E5"> there's a part of a disconnected</font>

326
00:13:23,509 --> 00:13:27,050
function because it's<font color="#E5E5E5"> never cold because</font>

327
00:13:24,980 --> 00:13:28,939
<font color="#E5E5E5">it's not an actual function so in the</font>

328
00:13:27,050 --> 00:13:31,490
case<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> chorus</font><font color="#E5E5E5"> finding too many</font>

329
00:13:28,939 --> 00:13:34,579
functions isn't so much of an issue<font color="#E5E5E5"> as</font>

330
00:13:31,490 --> 00:13:37,220
<font color="#E5E5E5">finding too few functions which is why I</font>

331
00:13:34,579 --> 00:13:39,859
can still say to use<font color="#CCCCCC"> what IRA - for my</font>

332
00:13:37,220 --> 00:13:44,170
<font color="#CCCCCC">call graph project I tried this</font>

333
00:13:39,860 --> 00:13:47,660
comparison<font color="#CCCCCC"> yeah and first</font><font color="#E5E5E5"> on Windows 8</font>

334
00:13:44,170 --> 00:13:50,290
system<font color="#CCCCCC"> fast</font><font color="#E5E5E5"> benign</font><font color="#CCCCCC"> pass and another</font><font color="#E5E5E5"> set</font>

335
00:13:47,660 --> 00:13:52,610
of malicious files<font color="#E5E5E5"> and it turns out</font>

336
00:13:50,290 --> 00:13:54,649
<font color="#CCCCCC">malicious binaries are a lot more</font>

337
00:13:52,610 --> 00:13:58,220
homogeneous in how they look<font color="#E5E5E5"> in</font><font color="#CCCCCC"> their</font>

338
00:13:54,649 --> 00:14:01,610
<font color="#E5E5E5">binary structure than benign files which</font>

339
00:13:58,220 --> 00:14:04,790
got<font color="#CCCCCC"> me interested in why why this is so</font>

340
00:14:01,610 --> 00:14:06,470
as a<font color="#CCCCCC"> reverse-engineer of malware after a</font>

341
00:14:04,790 --> 00:14:07,969
few years of<font color="#CCCCCC"> looking at binaries you'll</font>

342
00:14:06,470 --> 00:14:10,220
find out<font color="#CCCCCC"> that you keep</font><font color="#E5E5E5"> seeing the</font><font color="#CCCCCC"> same</font>

343
00:14:07,970 --> 00:14:12,550
things all<font color="#CCCCCC"> over again</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> again</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that</font>

344
00:14:10,220 --> 00:14:14,750
they all looked the<font color="#CCCCCC"> same</font><font color="#E5E5E5"> all over</font><font color="#CCCCCC"> again</font>

345
00:14:12,550 --> 00:14:16,939
<font color="#E5E5E5">which in my opinion is may need you that</font>

346
00:14:14,750 --> 00:14:19,819
<font color="#CCCCCC">mullah Raptors</font><font color="#E5E5E5"> well first of all most</font>

347
00:14:16,939 --> 00:14:22,040
<font color="#E5E5E5">time use Visual Studio this is this is</font>

348
00:14:19,819 --> 00:14:24,378
fairly clear<font color="#E5E5E5"> so I'm I'm a reverse</font>

349
00:14:22,040 --> 00:14:26,059
engineer of<font color="#CCCCCC"> Windows Melbourne</font><font color="#E5E5E5"> which is</font>

350
00:14:24,379 --> 00:14:28,309
<font color="#E5E5E5">very accustomed to Visual Studio and</font>

351
00:14:26,059 --> 00:14:31,689
<font color="#E5E5E5">whenever I see a GCC compiled binary I</font>

352
00:14:28,309 --> 00:14:36,439
get I get<font color="#E5E5E5"> nervous because it looks</font><font color="#CCCCCC"> so</font>

353
00:14:31,689 --> 00:14:38,839
awkward so<font color="#CCCCCC"> there's this one</font><font color="#E5E5E5"> part and the</font>

354
00:14:36,439 --> 00:14:40,550
other part would<font color="#E5E5E5"> be that Mel brothers in</font>

355
00:14:38,839 --> 00:14:42,819
my opinion use very<font color="#E5E5E5"> little of what</font>

356
00:14:40,550 --> 00:14:44,959
visuals<font color="#CCCCCC"> do</font><font color="#E5E5E5"> yeah so offering optimization</font>

357
00:14:42,819 --> 00:14:46,969
<font color="#E5E5E5">so most of the binary is really just</font>

358
00:14:44,959 --> 00:14:48,529
look<font color="#E5E5E5"> structured the same stack is built</font>

359
00:14:46,970 --> 00:14:50,720
the same<font color="#CCCCCC"> way variables are assigned the</font>

360
00:14:48,529 --> 00:14:54,399
<font color="#CCCCCC">same way registers are used the same way</font>

361
00:14:50,720 --> 00:14:56,540
<font color="#E5E5E5">so over time as</font><font color="#CCCCCC"> a person you get very</font>

362
00:14:54,399 --> 00:14:58,579
accustomed to that and then if you start

363
00:14:56,540 --> 00:15:00,769
<font color="#E5E5E5">looking into compiler optimization</font>

364
00:14:58,579 --> 00:15:02,239
settings<font color="#E5E5E5"> you get some horrible</font>

365
00:15:00,769 --> 00:15:04,550
experiences and how binaries can

366
00:15:02,240 --> 00:15:07,490
actually look<font color="#CCCCCC"> like if the optimizer did</font>

367
00:15:04,550 --> 00:15:09,559
its<font color="#CCCCCC"> thing</font><font color="#E5E5E5"> on the binary code so this is</font>

368
00:15:07,490 --> 00:15:11,480
how<font color="#E5E5E5"> they start the whole tool I might</font>

369
00:15:09,559 --> 00:15:13,969
also mention<font color="#E5E5E5"> that the parser has</font><font color="#CCCCCC"> its</font>

370
00:15:11,480 --> 00:15:17,629
corner<font color="#E5E5E5"> cases in issues as every open</font>

371
00:15:13,970 --> 00:15:20,209
source tool<font color="#E5E5E5"> I would think for one there</font>

372
00:15:17,629 --> 00:15:22,009
is a problem with C++<font color="#E5E5E5"> because C++ has</font><font color="#CCCCCC"> a</font>

373
00:15:20,209 --> 00:15:23,180
lot<font color="#CCCCCC"> of interactive called functions that</font>

374
00:15:22,009 --> 00:15:24,980
aren't<font color="#E5E5E5"> easily parsed</font>

375
00:15:23,180 --> 00:15:28,939
<font color="#E5E5E5">because they aren't necessarily called</font>

376
00:15:24,980 --> 00:15:31,510
by their<font color="#E5E5E5"> opposite but well indirectly by</font>

377
00:15:28,939 --> 00:15:33,160
calculated of

378
00:15:31,510 --> 00:15:36,610
I also have a big problem<font color="#E5E5E5"> Visual Basic</font>

379
00:15:33,160 --> 00:15:39,160
and dotnet<font color="#CCCCCC"> but then again who doesn't</font>

380
00:15:36,610 --> 00:15:41,650
Delfy<font color="#CCCCCC"> is also</font><font color="#E5E5E5"> still an issue</font><font color="#CCCCCC"> I also</font>

381
00:15:39,160 --> 00:15:44,920
still hate<font color="#CCCCCC"> Delfy like the</font><font color="#E5E5E5"> piste and</font>

382
00:15:41,650 --> 00:15:49,180
other exotic<font color="#E5E5E5"> compilers yeah</font><font color="#CCCCCC"> ah again</font><font color="#E5E5E5"> and</font>

383
00:15:44,920 --> 00:15:51,760
again large binaries are an issue<font color="#CCCCCC"> if you</font>

384
00:15:49,180 --> 00:15:53,500
like me run the parser on an Ubuntu

385
00:15:51,760 --> 00:15:57,520
virtual machine with limited memory<font color="#E5E5E5"> and</font>

386
00:15:53,500 --> 00:15:59,290
limited capabilities<font color="#CCCCCC"> overall and of</font>

387
00:15:57,520 --> 00:16:01,870
course I was loops and inner programming

388
00:15:59,290 --> 00:16:03,880
of logic of binaries are<font color="#E5E5E5"> an issue</font>

389
00:16:01,870 --> 00:16:06,730
because if you look at the code<font color="#CCCCCC"> review</font>

390
00:16:03,880 --> 00:16:11,890
can't<font color="#E5E5E5"> actually easily look at the</font><font color="#CCCCCC"> inner</font>

391
00:16:06,730 --> 00:16:13,630
logic of of the function itself<font color="#CCCCCC"> alright</font>

392
00:16:11,890 --> 00:16:15,490
now what do I<font color="#E5E5E5"> mean with with those</font>

393
00:16:13,630 --> 00:16:19,570
<font color="#CCCCCC">optimization settings that</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> promise</font><font color="#E5E5E5"> to</font>

394
00:16:15,490 --> 00:16:21,130
speak about if you've seen my talk<font color="#CCCCCC"> from</font>

395
00:16:19,570 --> 00:16:24,460
<font color="#CCCCCC">last year you might remember that</font><font color="#E5E5E5"> slide</font>

396
00:16:21,130 --> 00:16:26,260
where I poked at a very simple<font color="#CCCCCC"> source</font>

397
00:16:24,460 --> 00:16:27,760
<font color="#E5E5E5">space compared with different versions</font>

398
00:16:26,260 --> 00:16:29,650
<font color="#E5E5E5">of Visual Studio and different compiler</font>

399
00:16:27,760 --> 00:16:32,290
settings<font color="#E5E5E5"> then I realized when I</font>

400
00:16:29,650 --> 00:16:32,920
visualized out those graphs<font color="#E5E5E5"> they look</font>

401
00:16:32,290 --> 00:16:35,439
different

402
00:16:32,920 --> 00:16:39,400
naturally because<font color="#E5E5E5"> an optimizer on the</font>

403
00:16:35,440 --> 00:16:41,680
binary code<font color="#E5E5E5"> RAF does terrible things as</font>

404
00:16:39,400 --> 00:16:44,589
<font color="#CCCCCC">mention before which is why we end</font><font color="#E5E5E5"> up</font>

405
00:16:41,680 --> 00:16:46,930
with these different<font color="#CCCCCC"> choruses shown here</font>

406
00:16:44,589 --> 00:16:48,150
in the slide the problem there is<font color="#CCCCCC"> as</font>

407
00:16:46,930 --> 00:16:52,060
mentioned<font color="#CCCCCC"> before if you could generate</font>

408
00:16:48,150 --> 00:16:53,680
30 section metrics that rely on a

409
00:16:52,060 --> 00:16:56,439
<font color="#E5E5E5">certain representation of the source</font>

410
00:16:53,680 --> 00:16:58,359
code we might<font color="#E5E5E5"> end up only detecting one</font>

411
00:16:56,440 --> 00:17:00,820
compiled version of that same source

412
00:16:58,360 --> 00:17:03,220
<font color="#E5E5E5">base it's not that common that</font><font color="#CCCCCC"> malware</font>

413
00:17:00,820 --> 00:17:05,050
authors<font color="#CCCCCC"> realized that their optimization</font>

414
00:17:03,220 --> 00:17:08,319
settings<font color="#CCCCCC"> are optimizations I think that</font>

415
00:17:05,050 --> 00:17:10,119
<font color="#CCCCCC">they use actually</font><font color="#E5E5E5"> alter or actually</font>

416
00:17:08,319 --> 00:17:11,709
<font color="#E5E5E5">hindering threat detection but it is</font>

417
00:17:10,119 --> 00:17:14,020
<font color="#E5E5E5">very common that source bases are copy</font>

418
00:17:11,709 --> 00:17:17,050
pasted<font color="#E5E5E5"> and we've sampled my favorite</font>

419
00:17:14,020 --> 00:17:19,329
<font color="#E5E5E5">cases</font><font color="#CCCCCC"> seuss</font><font color="#E5E5E5"> which is probably still copy</font>

420
00:17:17,050 --> 00:17:22,030
pasted into new versions of banking

421
00:17:19,329 --> 00:17:23,678
Trojans and I<font color="#E5E5E5"> seen this</font><font color="#CCCCCC"> cause copy</font>

422
00:17:22,030 --> 00:17:27,428
<font color="#E5E5E5">pasted in a different context in a</font>

423
00:17:23,679 --> 00:17:29,980
<font color="#CCCCCC">different source project it will most</font>

424
00:17:27,429 --> 00:17:32,350
<font color="#CCCCCC">likely change</font><font color="#E5E5E5"> its representation</font><font color="#CCCCCC"> on the</font>

425
00:17:29,980 --> 00:17:34,240
<font color="#CCCCCC">binary level</font><font color="#E5E5E5"> just because the optimizer</font>

426
00:17:32,350 --> 00:17:36,340
runs its algorithms and reorders and

427
00:17:34,240 --> 00:17:39,700
restructures instructions functions<font color="#CCCCCC"> and</font>

428
00:17:36,340 --> 00:17:41,620
basic box<font color="#E5E5E5"> so how can we how can we build</font>

429
00:17:39,700 --> 00:17:44,820
<font color="#E5E5E5">metrics that work its way</font><font color="#CCCCCC"> around these</font>

430
00:17:41,620 --> 00:17:44,820
these optimization settings

431
00:17:45,640 --> 00:17:50,960
let me clarify<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> talk also I'm</font><font color="#E5E5E5"> not</font>

432
00:17:48,740 --> 00:17:52,400
a specialist<font color="#E5E5E5"> on compilers</font><font color="#CCCCCC"> I skipped</font><font color="#E5E5E5"> that</font>

433
00:17:50,960 --> 00:17:55,280
class at<font color="#E5E5E5"> university because I thought</font>

434
00:17:52,400 --> 00:17:57,880
it's pouring that was one of<font color="#E5E5E5"> the biggest</font>

435
00:17:55,280 --> 00:18:00,080
<font color="#E5E5E5">mistakes I did in my life I'll admit</font>

436
00:17:57,880 --> 00:18:02,150
<font color="#E5E5E5">optimization by itself is a huge topic</font>

437
00:18:00,080 --> 00:18:04,100
<font color="#E5E5E5">that you could probably speak about for</font>

438
00:18:02,150 --> 00:18:06,170
an<font color="#E5E5E5"> hour or more</font><font color="#CCCCCC"> just by itself so I kept</font>

439
00:18:04,100 --> 00:18:08,629
the chapter rather short<font color="#E5E5E5"> and will refer</font>

440
00:18:06,170 --> 00:18:10,160
you to a very nice book that I found

441
00:18:08,630 --> 00:18:12,200
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> engineering a compiler a</font>

442
00:18:10,160 --> 00:18:13,580
second<font color="#E5E5E5"> edition</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> Cooper Anderson</font><font color="#CCCCCC"> when</font>

443
00:18:12,200 --> 00:18:15,940
you have an entire<font color="#CCCCCC"> chapter of about</font><font color="#E5E5E5"> a</font>

444
00:18:13,580 --> 00:18:18,530
hundred<font color="#CCCCCC"> pages</font><font color="#E5E5E5"> of how optimization works</font>

445
00:18:15,940 --> 00:18:20,600
<font color="#E5E5E5">important to know about optimization is</font>

446
00:18:18,530 --> 00:18:24,080
that<font color="#CCCCCC"> it has different</font><font color="#E5E5E5"> scopes</font><font color="#CCCCCC"> so an</font>

447
00:18:20,600 --> 00:18:25,730
optimizer of a compiler will look at the

448
00:18:24,080 --> 00:18:27,740
instruction level<font color="#E5E5E5"> within basic blocks</font>

449
00:18:25,730 --> 00:18:29,960
<font color="#CCCCCC">and</font><font color="#E5E5E5"> will look at regions with</font>

450
00:18:27,740 --> 00:18:32,390
instructions which usually is loops or

451
00:18:29,960 --> 00:18:35,000
specific parts of a function it will

452
00:18:32,390 --> 00:18:36,410
look at the<font color="#E5E5E5"> global function this</font><font color="#CCCCCC"> is the</font>

453
00:18:35,000 --> 00:18:37,940
most<font color="#E5E5E5"> confusing scope because it's called</font>

454
00:18:36,410 --> 00:18:41,980
<font color="#E5E5E5">global but it only looks at the function</font>

455
00:18:37,940 --> 00:18:44,690
<font color="#E5E5E5">and it will look at interprocedural</font>

456
00:18:41,980 --> 00:18:45,920
dependencies which means how functions

457
00:18:44,690 --> 00:18:48,470
interact with each other<font color="#E5E5E5"> and how they</font>

458
00:18:45,920 --> 00:18:50,930
should<font color="#E5E5E5"> be laid out</font><font color="#CCCCCC"> in the binary what an</font>

459
00:18:48,470 --> 00:18:54,410
optimizer basically tries to do is make

460
00:18:50,930 --> 00:18:56,720
assembly more intelligent<font color="#E5E5E5"> if you look at</font>

461
00:18:54,410 --> 00:18:58,310
the<font color="#CCCCCC"> binary that's</font><font color="#E5E5E5"> compiled without any</font>

462
00:18:56,720 --> 00:19:03,620
optimization settings you will<font color="#E5E5E5"> see</font>

463
00:18:58,310 --> 00:19:07,310
<font color="#CCCCCC">things like calls to API is like string</font>

464
00:19:03,620 --> 00:19:08,689
length<font color="#E5E5E5"> twice in a row where the result</font>

465
00:19:07,310 --> 00:19:10,250
is then stored<font color="#CCCCCC"> into register and then</font>

466
00:19:08,690 --> 00:19:12,260
used<font color="#E5E5E5"> for an operation and then string</font>

467
00:19:10,250 --> 00:19:14,210
and it's called again that same<font color="#E5E5E5"> body is</font>

468
00:19:12,260 --> 00:19:15,950
being<font color="#CCCCCC"> stored in the same register</font><font color="#E5E5E5"> and</font>

469
00:19:14,210 --> 00:19:17,810
being used again<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is something</font>

470
00:19:15,950 --> 00:19:19,070
that the optimizer tries to find<font color="#E5E5E5"> and</font>

471
00:19:17,810 --> 00:19:21,010
eliminate<font color="#E5E5E5"> because it's useless to</font>

472
00:19:19,070 --> 00:19:24,230
generate or to<font color="#E5E5E5"> calculate the value twice</font>

473
00:19:21,010 --> 00:19:27,440
in a row if you could just<font color="#E5E5E5"> store it in a</font>

474
00:19:24,230 --> 00:19:29,390
register<font color="#CCCCCC"> or a</font><font color="#E5E5E5"> local variable</font><font color="#CCCCCC"> so reuse of</font>

475
00:19:27,440 --> 00:19:31,490
<font color="#E5E5E5">previously computed values is a big</font>

476
00:19:29,390 --> 00:19:34,340
point<font color="#E5E5E5"> but also the ordering of</font>

477
00:19:31,490 --> 00:19:36,580
instructions within basic blocks<font color="#E5E5E5"> to</font>

478
00:19:34,340 --> 00:19:39,409
<font color="#E5E5E5">enable instruction level parallelism</font>

479
00:19:36,580 --> 00:19:42,470
<font color="#E5E5E5">parallelism to help the CPU execute</font>

480
00:19:39,410 --> 00:19:44,540
faster<font color="#E5E5E5"> loop unrolling</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> loop</font><font color="#CCCCCC"> is only</font>

481
00:19:42,470 --> 00:19:46,460
called a couple<font color="#CCCCCC"> of times and</font><font color="#E5E5E5"> not like</font>

482
00:19:44,540 --> 00:19:50,770
hundreds of<font color="#E5E5E5"> times</font><font color="#CCCCCC"> it makes sense to just</font>

483
00:19:46,460 --> 00:19:54,440
copy the loop body<font color="#E5E5E5"> several times after</font>

484
00:19:50,770 --> 00:19:55,940
<font color="#E5E5E5">each other in in the binary to enable</font>

485
00:19:54,440 --> 00:19:57,980
faster execution

486
00:19:55,940 --> 00:20:00,260
the order of basic blocks<font color="#CCCCCC"> and the order</font>

487
00:19:57,980 --> 00:20:02,480
of functions within<font color="#E5E5E5"> the binary is</font>

488
00:20:00,260 --> 00:20:03,950
relevant for faster execution<font color="#E5E5E5"> because</font>

489
00:20:02,480 --> 00:20:06,260
there's things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> jumps</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> calls that</font>

490
00:20:03,950 --> 00:20:08,690
<font color="#CCCCCC">eat up a lot of</font><font color="#E5E5E5"> resources at runtime</font><font color="#CCCCCC"> so</font>

491
00:20:06,260 --> 00:20:10,400
<font color="#CCCCCC">as much Thompson causes the optimizer</font>

492
00:20:08,690 --> 00:20:13,880
can say it's<font color="#E5E5E5"> a faster the binary will</font>

493
00:20:10,400 --> 00:20:17,360
execute<font color="#E5E5E5"> and of course</font><font color="#CCCCCC"> in mind</font>

494
00:20:13,880 --> 00:20:19,340
substitution of functions is interesting

495
00:20:17,360 --> 00:20:21,169
if we<font color="#E5E5E5"> talk about very small functions we</font>

496
00:20:19,340 --> 00:20:24,290
can<font color="#E5E5E5"> eliminate a lot of calls but just</font>

497
00:20:21,170 --> 00:20:27,140
copy pasting<font color="#E5E5E5"> the actual executable code</font>

498
00:20:24,290 --> 00:20:29,480
of a function<font color="#E5E5E5"> into the binary</font><font color="#CCCCCC"> code to</font>

499
00:20:27,140 --> 00:20:30,980
save time<font color="#E5E5E5"> on the call and this as</font>

500
00:20:29,480 --> 00:20:34,100
mentioned<font color="#CCCCCC"> just a very</font><font color="#E5E5E5"> short summary of</font>

501
00:20:30,980 --> 00:20:35,210
what optimizers can do<font color="#E5E5E5"> again I</font><font color="#CCCCCC"> recommend</font>

502
00:20:34,100 --> 00:20:38,600
reading the book<font color="#E5E5E5"> it's very interesting</font>

503
00:20:35,210 --> 00:20:42,200
and this<font color="#E5E5E5"> is about everything that</font><font color="#CCCCCC"> I ever</font>

504
00:20:38,600 --> 00:20:43,219
know about optimization settings<font color="#E5E5E5"> the</font>

505
00:20:42,200 --> 00:20:44,900
same thing by the<font color="#E5E5E5"> way</font><font color="#CCCCCC"> cuz</font><font color="#E5E5E5"> for the</font>

506
00:20:43,220 --> 00:20:46,760
visualization<font color="#CCCCCC"> I like to play with</font>

507
00:20:44,900 --> 00:20:49,640
<font color="#CCCCCC">visualization but I'm</font><font color="#E5E5E5"> not an actual</font>

508
00:20:46,760 --> 00:20:52,040
expert<font color="#CCCCCC"> in it</font><font color="#E5E5E5"> but what I do know as a</font>

509
00:20:49,640 --> 00:20:53,660
<font color="#E5E5E5">panelist is that optimization settings</font>

510
00:20:52,040 --> 00:20:55,730
can do terrible<font color="#CCCCCC"> things to binary code</font>

511
00:20:53,660 --> 00:20:57,920
<font color="#E5E5E5">which makes it sometimes more readable</font>

512
00:20:55,730 --> 00:21:00,200
<font color="#E5E5E5">and sometimes a lot less readable</font><font color="#CCCCCC"> most</font>

513
00:20:57,920 --> 00:21:02,900
of all the different settings<font color="#CCCCCC"> also the</font>

514
00:21:00,200 --> 00:21:05,320
code in a way that it<font color="#E5E5E5"> doesn't appear in</font>

515
00:21:02,900 --> 00:21:07,540
<font color="#E5E5E5">the</font><font color="#CCCCCC"> same binary representation</font><font color="#E5E5E5"> anymore</font>

516
00:21:05,320 --> 00:21:10,610
this<font color="#E5E5E5"> is just one example that</font><font color="#CCCCCC"> I</font>

517
00:21:07,540 --> 00:21:14,149
screenshot that<font color="#E5E5E5"> out of one of the case</font>

518
00:21:10,610 --> 00:21:17,090
studies<font color="#E5E5E5"> today that I used on the right</font>

519
00:21:14,150 --> 00:21:19,700
side of the screen<font color="#E5E5E5"> you can see the very</font>

520
00:21:17,090 --> 00:21:21,439
optimized version<font color="#E5E5E5"> of the binary so here</font>

521
00:21:19,700 --> 00:21:23,060
<font color="#CCCCCC">I applied all</font><font color="#E5E5E5"> the optimization settings</font>

522
00:21:21,440 --> 00:21:24,590
<font color="#E5E5E5">and on the left side you</font><font color="#CCCCCC"> can see</font><font color="#E5E5E5"> the</font>

523
00:21:23,060 --> 00:21:27,169
version without any optimization

524
00:21:24,590 --> 00:21:28,909
settings<font color="#CCCCCC"> in that</font><font color="#E5E5E5"> zoom in that I put</font><font color="#CCCCCC"> on</font>

525
00:21:27,170 --> 00:21:30,620
the slide<font color="#E5E5E5"> you can see that there's a lot</font>

526
00:21:28,910 --> 00:21:32,240
<font color="#E5E5E5">of interaction with</font><font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> local</font>

527
00:21:30,620 --> 00:21:35,090
variables here are<font color="#E5E5E5"> used for storing</font><font color="#CCCCCC"> and</font>

528
00:21:32,240 --> 00:21:36,290
<font color="#E5E5E5">loading values again and turns out this</font>

529
00:21:35,090 --> 00:21:39,379
is a<font color="#CCCCCC"> very</font><font color="#E5E5E5"> slow operation</font><font color="#CCCCCC"> so the</font>

530
00:21:36,290 --> 00:21:42,110
optimizer<font color="#E5E5E5"> decided to use registers just</font>

531
00:21:39,380 --> 00:21:45,590
instead<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> stack variables this is</font><font color="#CCCCCC"> a</font>

532
00:21:42,110 --> 00:21:47,000
very simple form of optimization others

533
00:21:45,590 --> 00:21:49,340
<font color="#E5E5E5">would look a lot more complicated</font>

534
00:21:47,000 --> 00:21:52,450
<font color="#CCCCCC">especially if we talk</font><font color="#E5E5E5"> about arithmetics</font>

535
00:21:49,340 --> 00:21:52,449
and numeric calculations

536
00:21:52,700 --> 00:21:56,870
my<font color="#E5E5E5"> favorite case of optimization</font>

537
00:21:54,980 --> 00:21:58,640
<font color="#E5E5E5">settings that freaked me out in the</font><font color="#CCCCCC"> past</font>

538
00:21:56,870 --> 00:22:00,830
was a piece<font color="#E5E5E5"> of malware that</font><font color="#CCCCCC"> was used</font>

539
00:21:58,640 --> 00:22:02,180
that<font color="#CCCCCC"> was composed use up as much space</font>

540
00:22:00,830 --> 00:22:05,179
as<font color="#CCCCCC"> possible</font>

541
00:22:02,180 --> 00:22:07,540
this helps for faster<font color="#E5E5E5"> execution at</font><font color="#CCCCCC"> run</font>

542
00:22:05,180 --> 00:22:09,390
<font color="#CCCCCC">time but also it blows up the binary</font>

543
00:22:07,540 --> 00:22:11,879
incredibly

544
00:22:09,390 --> 00:22:14,130
so in this binary<font color="#CCCCCC"> a lot of functions</font>

545
00:22:11,880 --> 00:22:16,620
would<font color="#CCCCCC"> be in line which means</font><font color="#E5E5E5"> a given</font>

546
00:22:14,130 --> 00:22:19,049
function<font color="#E5E5E5"> would grow in size because sub</font>

547
00:22:16,620 --> 00:22:20,939
functions would<font color="#CCCCCC"> be in mind and as an</font>

548
00:22:19,049 --> 00:22:24,210
analyst<font color="#E5E5E5"> you don't end up analyzing that</font>

549
00:22:20,940 --> 00:22:25,679
same code over<font color="#CCCCCC"> and over again</font><font color="#E5E5E5"> because</font>

550
00:22:24,210 --> 00:22:26,940
<font color="#CCCCCC">you</font><font color="#E5E5E5"> don't have one function to analyze</font>

551
00:22:25,679 --> 00:22:29,100
<font color="#CCCCCC">that you can rename but you see that</font>

552
00:22:26,940 --> 00:22:30,570
same function in<font color="#E5E5E5"> mind</font><font color="#CCCCCC"> in the actual</font>

553
00:22:29,100 --> 00:22:33,270
executable code and have to analyze<font color="#CCCCCC"> it</font>

554
00:22:30,570 --> 00:22:36,600
again and<font color="#E5E5E5"> again and again this much</font>

555
00:22:33,270 --> 00:22:38,490
about the reverse<font color="#E5E5E5"> engineering plane so</font>

556
00:22:36,600 --> 00:22:43,439
what did I actually do to<font color="#E5E5E5"> visualize</font>

557
00:22:38,490 --> 00:22:44,850
those<font color="#CCCCCC"> optimizations I think for my</font>

558
00:22:43,440 --> 00:22:46,500
experiments I used three different case

559
00:22:44,850 --> 00:22:49,620
studies<font color="#E5E5E5"> which are listed on this slide</font>

560
00:22:46,500 --> 00:22:51,240
one of<font color="#E5E5E5"> them is continent</font><font color="#CCCCCC"> wind 32 window</font>

561
00:22:49,620 --> 00:22:53,040
it's a simple<font color="#CCCCCC"> wintery two window</font>

562
00:22:51,240 --> 00:22:54,840
application<font color="#E5E5E5"> all of the case studies are</font>

563
00:22:53,040 --> 00:22:57,990
rather rather small<font color="#CCCCCC"> so the source space</font>

564
00:22:54,840 --> 00:22:59,070
is approximately the same size<font color="#E5E5E5"> which</font>

565
00:22:57,990 --> 00:23:01,590
doesn't mean<font color="#E5E5E5"> that the binaries that</font>

566
00:22:59,070 --> 00:23:03,510
<font color="#E5E5E5">turned out were about the same size</font><font color="#CCCCCC"> but</font>

567
00:23:01,590 --> 00:23:06,809
<font color="#E5E5E5">anyway so the code names are wind 32</font>

568
00:23:03,510 --> 00:23:09,270
window random<font color="#E5E5E5"> and G which is a</font><font color="#CCCCCC"> sea-based</font>

569
00:23:06,809 --> 00:23:12,360
<font color="#E5E5E5">random number generator and long prime</font>

570
00:23:09,270 --> 00:23:14,820
sieve which is a<font color="#E5E5E5"> C++ based prime number</font>

571
00:23:12,360 --> 00:23:16,290
generator these are just random source

572
00:23:14,820 --> 00:23:19,439
projects that<font color="#CCCCCC"> I downloaded</font><font color="#E5E5E5"> from the</font>

573
00:23:16,290 --> 00:23:21,030
Microsoft website<font color="#E5E5E5"> I went to download</font>

574
00:23:19,440 --> 00:23:22,740
<font color="#E5E5E5">stuff from the Microsoft</font><font color="#CCCCCC"> website because</font>

575
00:23:21,030 --> 00:23:24,000
turns out<font color="#CCCCCC"> if you take those projects</font><font color="#E5E5E5"> and</font>

576
00:23:22,740 --> 00:23:26,580
let them into Visual Studio they will

577
00:23:24,000 --> 00:23:29,429
just compile without any issues<font color="#CCCCCC"> I tried</font>

578
00:23:26,580 --> 00:23:31,799
the<font color="#E5E5E5"> same thing with</font><font color="#CCCCCC"> Miller</font>

579
00:23:29,429 --> 00:23:33,150
so with<font color="#CCCCCC"> Lichtman resource card</font><font color="#E5E5E5"> and turns</font>

580
00:23:31,799 --> 00:23:35,990
<font color="#E5E5E5">out they aren't that easily compiled</font>

581
00:23:33,150 --> 00:23:38,400
because whenever you find the<font color="#E5E5E5"> wrong</font>

582
00:23:35,990 --> 00:23:42,150
version<font color="#E5E5E5"> of</font><font color="#CCCCCC"> facial studio that was</font><font color="#E5E5E5"> not</font>

583
00:23:38,400 --> 00:23:43,620
used<font color="#E5E5E5"> for</font><font color="#CCCCCC"> writing this code</font><font color="#E5E5E5"> well I</font><font color="#CCCCCC"> will</font>

584
00:23:42,150 --> 00:23:45,360
<font color="#E5E5E5">just put malware authors aren't actually</font>

585
00:23:43,620 --> 00:23:48,570
that<font color="#E5E5E5"> good in aligning their code with</font>

586
00:23:45,360 --> 00:23:50,370
different<font color="#CCCCCC"> versions of compilers for the</font>

587
00:23:48,570 --> 00:23:51,780
experiment I used only<font color="#CCCCCC"> one</font><font color="#E5E5E5"> version of</font>

588
00:23:50,370 --> 00:23:54,059
<font color="#E5E5E5">facial</font><font color="#CCCCCC"> studio which was</font><font color="#E5E5E5"> vicious</font><font color="#CCCCCC"> till</font>

589
00:23:51,780 --> 00:23:58,139
year 2015 and I listed the<font color="#CCCCCC"> different</font>

590
00:23:54,059 --> 00:24:02,910
<font color="#E5E5E5">settings</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I used on this slide as I</font>

591
00:23:58,140 --> 00:24:05,580
mean settings these different binaries

592
00:24:02,910 --> 00:24:07,830
that<font color="#CCCCCC"> I produced I</font><font color="#E5E5E5"> only ever used one of</font>

593
00:24:05,580 --> 00:24:09,960
<font color="#E5E5E5">those optimization</font><font color="#CCCCCC"> settings services</font><font color="#E5E5E5"> in</font>

594
00:24:07,830 --> 00:24:14,010
<font color="#E5E5E5">slide so I codenamed them in their</font>

595
00:24:09,960 --> 00:24:16,770
respective compiler flag and one version

596
00:24:14,010 --> 00:24:18,600
<font color="#CCCCCC">of each</font><font color="#E5E5E5"> respective binary was compiled</font>

597
00:24:16,770 --> 00:24:20,340
with all of those settings together<font color="#E5E5E5"> it's</font>

598
00:24:18,600 --> 00:24:24,679
like<font color="#CCCCCC"> the most extreme form of</font>

599
00:24:20,340 --> 00:24:27,449
optimization optimization that uses is

600
00:24:24,680 --> 00:24:28,740
hilariously<font color="#E5E5E5"> under documented so if you</font>

601
00:24:27,450 --> 00:24:31,560
go to a<font color="#CCCCCC"> miss Tian and look up those</font>

602
00:24:28,740 --> 00:24:33,420
optimization settings<font color="#CCCCCC"> a miss Tian will</font>

603
00:24:31,560 --> 00:24:35,310
explain to<font color="#E5E5E5"> you what</font><font color="#CCCCCC"> the terms mean that</font>

604
00:24:33,420 --> 00:24:35,970
the name<font color="#E5E5E5"> of the setting contains but</font>

605
00:24:35,310 --> 00:24:38,250
nothing more

606
00:24:35,970 --> 00:24:40,680
so there<font color="#E5E5E5"> isn't actually so much to find</font>

607
00:24:38,250 --> 00:24:44,790
out about<font color="#CCCCCC"> the studies optimization</font>

608
00:24:40,680 --> 00:24:48,630
<font color="#CCCCCC">settings just</font><font color="#E5E5E5"> from the documentation the</font>

609
00:24:44,790 --> 00:24:51,090
basic objectives that the compiler can

610
00:24:48,630 --> 00:24:52,980
<font color="#CCCCCC">follow in terms of optimization will one</font>

611
00:24:51,090 --> 00:24:55,199
be<font color="#CCCCCC"> size we can</font><font color="#E5E5E5"> produce very small</font>

612
00:24:52,980 --> 00:24:57,450
boundaries would<font color="#E5E5E5"> be speed we can produce</font>

613
00:24:55,200 --> 00:25:00,750
<font color="#CCCCCC">very fast binaries which generally</font>

614
00:24:57,450 --> 00:25:03,210
results<font color="#E5E5E5"> in a bigger cut pace and we can</font>

615
00:25:00,750 --> 00:25:05,330
use we<font color="#CCCCCC"> can produce code that uses</font><font color="#E5E5E5"> as</font>

616
00:25:03,210 --> 00:25:07,710
little<font color="#E5E5E5"> resources as</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> which</font>

617
00:25:05,330 --> 00:25:12,210
resources would mean either memory or<font color="#E5E5E5"> or</font>

618
00:25:07,710 --> 00:25:16,770
registers<font color="#CCCCCC"> which then results also in</font>

619
00:25:12,210 --> 00:25:18,720
rather big<font color="#E5E5E5"> and bloated binarism now</font>

620
00:25:16,770 --> 00:25:20,700
dance my case studies<font color="#E5E5E5"> dance what are we</font>

621
00:25:18,720 --> 00:25:22,350
looking for<font color="#E5E5E5"> if we look at compiler</font>

622
00:25:20,700 --> 00:25:23,880
optimization settings<font color="#E5E5E5"> in</font><font color="#CCCCCC"> terms of call</font>

623
00:25:22,350 --> 00:25:25,919
graphs so from the data structure that<font color="#CCCCCC"> I</font>

624
00:25:23,880 --> 00:25:28,230
generated<font color="#E5E5E5"> out of</font><font color="#CCCCCC"> the I</font><font color="#E5E5E5"> took graffiti</font>

625
00:25:25,920 --> 00:25:31,830
tools or we can<font color="#E5E5E5"> look for is for example</font>

626
00:25:28,230 --> 00:25:33,690
<font color="#CCCCCC">node counts and edge counts the size of</font>

627
00:25:31,830 --> 00:25:35,550
the graphs will change as we use

628
00:25:33,690 --> 00:25:37,620
different<font color="#E5E5E5"> optimization settings the</font>

629
00:25:35,550 --> 00:25:39,930
number of jumps<font color="#E5E5E5"> and calls and numbers of</font>

630
00:25:37,620 --> 00:25:42,689
<font color="#CCCCCC">different other instructions or like the</font>

631
00:25:39,930 --> 00:25:45,600
count of generally yeast instructions

632
00:25:42,690 --> 00:25:48,210
will vary the<font color="#E5E5E5"> variance of instructions</font>

633
00:25:45,600 --> 00:25:50,310
within within<font color="#E5E5E5"> the basic</font><font color="#CCCCCC"> block and within</font>

634
00:25:48,210 --> 00:25:52,740
an actual function will<font color="#CCCCCC"> change as if you</font>

635
00:25:50,310 --> 00:25:56,190
think<font color="#CCCCCC"> for example in loop unrolling a</font>

636
00:25:52,740 --> 00:25:59,490
function inlining<font color="#E5E5E5"> if you copy pastes the</font>

637
00:25:56,190 --> 00:26:02,070
same source code<font color="#E5E5E5"> a lot in a given</font>

638
00:25:59,490 --> 00:26:04,010
function<font color="#CCCCCC"> e general brian's of</font>

639
00:26:02,070 --> 00:26:07,800
instructions<font color="#E5E5E5"> within</font><font color="#CCCCCC"> that function</font><font color="#E5E5E5"> will</font>

640
00:26:04,010 --> 00:26:09,450
go down and we can also<font color="#E5E5E5"> look at data</font>

641
00:26:07,800 --> 00:26:11,970
references and memory references and

642
00:26:09,450 --> 00:26:15,510
instructions<font color="#E5E5E5"> that perform these</font>

643
00:26:11,970 --> 00:26:18,210
references<font color="#E5E5E5"> within the</font><font color="#CCCCCC"> function and</font>

644
00:26:15,510 --> 00:26:19,860
finally how do we look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> that so this</font>

645
00:26:18,210 --> 00:26:22,230
<font color="#E5E5E5">was the experiment that</font><font color="#CCCCCC"> I conducted I</font>

646
00:26:19,860 --> 00:26:25,169
<font color="#E5E5E5">try to visualize this changes within the</font>

647
00:26:22,230 --> 00:26:27,270
binaries and as it turns out I've done

648
00:26:25,170 --> 00:26:30,330
binary visualization before

649
00:26:27,270 --> 00:26:33,540
binary visualization by itself can

650
00:26:30,330 --> 00:26:34,139
<font color="#CCCCCC">sometimes be pretty but it's not</font><font color="#E5E5E5"> always</font>

651
00:26:33,540 --> 00:26:38,428
<font color="#E5E5E5">that</font>

652
00:26:34,140 --> 00:26:40,260
useful<font color="#E5E5E5"> binaries can be visualized in</font><font color="#CCCCCC"> a</font>

653
00:26:38,429 --> 00:26:42,630
lot<font color="#E5E5E5"> of different ways but</font><font color="#CCCCCC"> if you try to</font>

654
00:26:40,260 --> 00:26:44,879
visualize the binary code<font color="#E5E5E5"> you should</font>

655
00:26:42,630 --> 00:26:47,160
<font color="#CCCCCC">need to know what you want to see in the</font>

656
00:26:44,880 --> 00:26:50,670
visualization<font color="#E5E5E5"> beforehand otherwise</font><font color="#CCCCCC"> it</font>

657
00:26:47,160 --> 00:26:52,410
<font color="#E5E5E5">turns out to be pretty useless this is a</font>

658
00:26:50,670 --> 00:26:53,790
dot graph of a rather<font color="#E5E5E5"> large binary and</font>

659
00:26:52,410 --> 00:26:56,429
as you can<font color="#CCCCCC"> see if you visualize</font><font color="#E5E5E5"> this</font>

660
00:26:53,790 --> 00:26:57,360
graph<font color="#E5E5E5"> in a dot version it's not helpful</font>

661
00:26:56,429 --> 00:26:59,370
at all

662
00:26:57,360 --> 00:27:03,389
so how<font color="#CCCCCC"> can we</font><font color="#E5E5E5"> make the visualization</font>

663
00:26:59,370 --> 00:27:06,059
more useful first of all if you start

664
00:27:03,390 --> 00:27:08,669
visualizing don't think about<font color="#CCCCCC"> it</font><font color="#E5E5E5"> doesn't</font>

665
00:27:06,059 --> 00:27:10,530
<font color="#E5E5E5">as an application of artificial</font>

666
00:27:08,669 --> 00:27:12,750
intelligence<font color="#CCCCCC"> because the</font><font color="#E5E5E5"> visualization</font>

667
00:27:10,530 --> 00:27:14,190
will highlight the things that you want

668
00:27:12,750 --> 00:27:15,690
<font color="#E5E5E5">to find it the data but</font><font color="#CCCCCC"> you need to be</font>

669
00:27:14,190 --> 00:27:18,570
aware of<font color="#E5E5E5"> what you want to find before</font>

670
00:27:15,690 --> 00:27:20,580
<font color="#E5E5E5">that it's also always helpful to reduce</font>

671
00:27:18,570 --> 00:27:22,290
<font color="#E5E5E5">the data to the actual part that you</font>

672
00:27:20,580 --> 00:27:24,330
want<font color="#CCCCCC"> to visualize and to</font><font color="#E5E5E5"> simplify the</font>

673
00:27:22,290 --> 00:27:26,159
<font color="#E5E5E5">data because otherwise as mentioned you</font>

674
00:27:24,330 --> 00:27:28,949
<font color="#CCCCCC">end up with</font><font color="#E5E5E5"> crops like this like huge</font>

675
00:27:26,160 --> 00:27:30,809
and<font color="#CCCCCC"> humongous how to pick the features</font>

676
00:27:28,950 --> 00:27:32,580
for visualization<font color="#CCCCCC"> first of all you know</font>

677
00:27:30,809 --> 00:27:35,040
<font color="#E5E5E5">you need to know what your tool can</font>

678
00:27:32,580 --> 00:27:37,409
produce you can't visualize<font color="#CCCCCC"> things that</font>

679
00:27:35,040 --> 00:27:38,850
aren't actually<font color="#CCCCCC"> present in your data you</font>

680
00:27:37,410 --> 00:27:40,350
need<font color="#CCCCCC"> to know what your algorithms</font>

681
00:27:38,850 --> 00:27:42,540
support like which<font color="#CCCCCC"> augur them to use for</font>

682
00:27:40,350 --> 00:27:45,860
<font color="#CCCCCC">pro</font><font color="#E5E5E5"> visualization which sauce and what</font>

683
00:27:42,540 --> 00:27:49,290
your data can provide<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you and</font>

684
00:27:45,860 --> 00:27:50,729
finally what I found<font color="#E5E5E5"> out</font><font color="#CCCCCC"> about binary</font>

685
00:27:49,290 --> 00:27:52,590
<font color="#CCCCCC">call graphs is that of course graphs are</font>

686
00:27:50,730 --> 00:27:53,760
beautiful for visualization<font color="#E5E5E5"> because in</font>

687
00:27:52,590 --> 00:27:56,730
their national<font color="#E5E5E5"> structure they are</font>

688
00:27:53,760 --> 00:27:58,919
actually already something<font color="#E5E5E5"> that looks</font>

689
00:27:56,730 --> 00:27:59,120
pretty if you<font color="#E5E5E5"> put it</font><font color="#CCCCCC"> onto a PowerPoint</font>

690
00:27:58,919 --> 00:28:02,240
slide

691
00:27:59,120 --> 00:28:05,760
therefore I used<font color="#CCCCCC"> the eat autographs</font><font color="#E5E5E5"> that</font>

692
00:28:02,240 --> 00:28:08,520
<font color="#E5E5E5">I talked</font><font color="#CCCCCC"> about last year and</font><font color="#E5E5E5"> first</font>

693
00:28:05,760 --> 00:28:12,840
directed graphs which is a more visually

694
00:28:08,520 --> 00:28:15,360
appealing<font color="#CCCCCC"> visualization technique for</font>

695
00:28:12,840 --> 00:28:16,678
<font color="#CCCCCC">for graphs I used heat maps for</font>

696
00:28:15,360 --> 00:28:18,600
highlighting<font color="#E5E5E5"> data and differences</font><font color="#CCCCCC"> in</font>

697
00:28:16,679 --> 00:28:22,049
data used histograms and diagrams<font color="#E5E5E5"> and</font>

698
00:28:18,600 --> 00:28:25,799
distributions showing the changes in the

699
00:28:22,049 --> 00:28:29,010
data<font color="#E5E5E5"> now which attributes other ones</font>

700
00:28:25,799 --> 00:28:30,600
that<font color="#E5E5E5"> I added to the graph structure in</font>

701
00:28:29,010 --> 00:28:36,030
order<font color="#E5E5E5"> to visualize common compiler</font>

702
00:28:30,600 --> 00:28:38,850
settings<font color="#CCCCCC"> for once the total appearance</font>

703
00:28:36,030 --> 00:28:39,299
of different types of mnemonics within

704
00:28:38,850 --> 00:28:41,490
the binary

705
00:28:39,299 --> 00:28:43,230
<font color="#E5E5E5">were a super interesting thing to</font><font color="#CCCCCC"> look</font>

706
00:28:41,490 --> 00:28:46,320
<font color="#E5E5E5">at others mentioned</font><font color="#CCCCCC"> the variants of</font>

707
00:28:43,230 --> 00:28:47,100
mnemonics<font color="#CCCCCC"> in dedicated functions</font><font color="#E5E5E5"> the</font>

708
00:28:46,320 --> 00:28:48,629
press

709
00:28:47,100 --> 00:28:51,299
of different instruction families and

710
00:28:48,630 --> 00:28:54,030
how this presence<font color="#E5E5E5"> would change when</font>

711
00:28:51,299 --> 00:28:55,379
applying<font color="#E5E5E5"> optimization as mentioned the</font>

712
00:28:54,030 --> 00:28:57,510
<font color="#E5E5E5">graph node</font><font color="#CCCCCC"> and the edge now</font><font color="#E5E5E5"> because</font>

713
00:28:55,380 --> 00:28:59,789
naturally graphs would change<font color="#E5E5E5"> with</font>

714
00:28:57,510 --> 00:29:02,820
different<font color="#E5E5E5"> settings</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> total</font><font color="#CCCCCC"> api count</font>

715
00:28:59,789 --> 00:29:05,940
<font color="#E5E5E5">and maybe even the total count of string</font>

716
00:29:02,820 --> 00:29:10,159
constants<font color="#CCCCCC"> little</font><font color="#E5E5E5"> amount of data</font>

717
00:29:05,940 --> 00:29:10,160
references<font color="#E5E5E5"> within the binary and</font>

718
00:29:10,610 --> 00:29:17,760
calculated metrics<font color="#E5E5E5"> like ratios that</font>

719
00:29:14,539 --> 00:29:21,179
<font color="#CCCCCC">abstract the total count</font><font color="#E5E5E5"> of a given item</font>

720
00:29:17,760 --> 00:29:23,400
<font color="#E5E5E5">by the size of the code section of the</font>

721
00:29:21,179 --> 00:29:25,590
<font color="#E5E5E5">binary and also variance and standard</font>

722
00:29:23,400 --> 00:29:29,850
deviation<font color="#E5E5E5"> of</font><font color="#CCCCCC"> dimension attributes to see</font>

723
00:29:25,590 --> 00:29:34,470
how<font color="#E5E5E5"> much the binaries would change in</font>

724
00:29:29,850 --> 00:29:35,610
total now finally the<font color="#E5E5E5"> data</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> promised</font>

725
00:29:34,470 --> 00:29:37,429
you there<font color="#CCCCCC"> would be a lot of</font><font color="#E5E5E5"> slides with</font>

726
00:29:35,610 --> 00:29:40,678
numbers and<font color="#E5E5E5"> then we get to those numbers</font>

727
00:29:37,429 --> 00:29:43,860
<font color="#E5E5E5">on this</font><font color="#CCCCCC"> slide you see an example of the</font>

728
00:29:40,679 --> 00:29:45,750
total<font color="#E5E5E5"> meant the total count of mnemonic</font>

729
00:29:43,860 --> 00:29:48,178
types within<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of the case studies</font>

730
00:29:45,750 --> 00:29:52,230
<font color="#E5E5E5">which would be the prime number</font>

731
00:29:48,179 --> 00:29:53,909
generator<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if you look at that you</font>

732
00:29:52,230 --> 00:29:57,750
will see that this is<font color="#E5E5E5"> not actually very</font>

733
00:29:53,909 --> 00:29:58,950
<font color="#E5E5E5">helpful</font><font color="#CCCCCC"> so this lists</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> total kind of</font>

734
00:29:57,750 --> 00:30:00,570
<font color="#E5E5E5">appearance of different types of</font>

735
00:29:58,950 --> 00:30:02,400
instructions<font color="#E5E5E5"> within the different</font>

736
00:30:00,570 --> 00:30:05,490
binaries as you can see them<font color="#CCCCCC"> listed here</font>

737
00:30:02,400 --> 00:30:08,460
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the top line of this data</font><font color="#E5E5E5"> this is</font>

738
00:30:05,490 --> 00:30:11,520
actually hard<font color="#CCCCCC"> to read yeah don't try to</font>

739
00:30:08,460 --> 00:30:14,400
read the numbers<font color="#E5E5E5"> and the top line is</font><font color="#CCCCCC"> the</font>

740
00:30:11,520 --> 00:30:15,900
most optimized version<font color="#CCCCCC"> of the binary in</font>

741
00:30:14,400 --> 00:30:17,880
<font color="#CCCCCC">that the</font><font color="#E5E5E5"> bottom is the least optimized</font>

742
00:30:15,900 --> 00:30:19,470
version<font color="#E5E5E5"> of the binary</font><font color="#CCCCCC"> and you can see</font>

743
00:30:17,880 --> 00:30:21,030
that the<font color="#CCCCCC"> Chamber's some of the numbers</font>

744
00:30:19,470 --> 00:30:23,780
some of the columns<font color="#CCCCCC"> change a lot</font><font color="#E5E5E5"> and</font>

745
00:30:21,030 --> 00:30:27,389
some<font color="#E5E5E5"> of the columns change</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> and</font>

746
00:30:23,780 --> 00:30:32,158
this is easiest be seen<font color="#E5E5E5"> when applying</font>

747
00:30:27,390 --> 00:30:36,590
heat maps you cannot read<font color="#E5E5E5"> the numbers</font>

748
00:30:32,159 --> 00:30:38,789
again<font color="#CCCCCC"> but look at the</font><font color="#E5E5E5"> beautiful colors</font>

749
00:30:36,590 --> 00:30:40,770
these<font color="#E5E5E5"> are</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> three case</font><font color="#CCCCCC"> studies as</font>

750
00:30:38,789 --> 00:30:42,990
compared<font color="#CCCCCC"> to each other like each of the</font>

751
00:30:40,770 --> 00:30:45,690
of the<font color="#E5E5E5"> colored columns is a different</font>

752
00:30:42,990 --> 00:30:47,039
family<font color="#CCCCCC"> of instructions and you</font><font color="#E5E5E5"> can see</font>

753
00:30:45,690 --> 00:30:48,900
that some<font color="#CCCCCC"> of those</font><font color="#E5E5E5"> columns are</font><font color="#CCCCCC"> very</font>

754
00:30:47,039 --> 00:30:51,030
homogeneous<font color="#E5E5E5"> so these</font><font color="#CCCCCC"> numbers don't</font>

755
00:30:48,900 --> 00:30:52,860
<font color="#CCCCCC">change a lot</font><font color="#E5E5E5"> as different compiler</font>

756
00:30:51,030 --> 00:30:54,840
settings are<font color="#CCCCCC"> applied and some of the</font>

757
00:30:52,860 --> 00:30:58,260
some<font color="#CCCCCC"> of the columns show different</font>

758
00:30:54,840 --> 00:30:59,830
colors which means they change when

759
00:30:58,260 --> 00:31:02,110
<font color="#E5E5E5">applying different settings</font>

760
00:30:59,830 --> 00:31:03,639
<font color="#E5E5E5">that were actually</font><font color="#CCCCCC"> interested</font><font color="#E5E5E5"> in for</font>

761
00:31:02,110 --> 00:31:07,840
having a<font color="#CCCCCC"> close to</font><font color="#E5E5E5"> look at why they</font>

762
00:31:03,640 --> 00:31:12,309
change and also comparing different

763
00:31:07,840 --> 00:31:14,110
<font color="#E5E5E5">source pieces when we realize that the</font><font color="#CCCCCC"> C</font>

764
00:31:12,309 --> 00:31:16,360
version<font color="#E5E5E5"> or the</font><font color="#CCCCCC"> random</font><font color="#E5E5E5"> number generator</font>

765
00:31:14,110 --> 00:31:19,719
written in C shows different changes

766
00:31:16,360 --> 00:31:23,408
than the C++<font color="#E5E5E5"> binary or the window</font>

767
00:31:19,720 --> 00:31:25,000
application some of the<font color="#E5E5E5"> interesting</font>

768
00:31:23,409 --> 00:31:27,070
instructions that I picked out for

769
00:31:25,000 --> 00:31:29,820
visualizations<font color="#E5E5E5"> with other techniques</font>

770
00:31:27,070 --> 00:31:33,760
<font color="#E5E5E5">later would be call and jump of course</font>

771
00:31:29,820 --> 00:31:35,908
<font color="#E5E5E5">any kind of conditional instruction the</font>

772
00:31:33,760 --> 00:31:40,169
conditional jumps or conditional moves

773
00:31:35,909 --> 00:31:42,460
the compare instruction anything that

774
00:31:40,169 --> 00:31:44,830
anything that has<font color="#CCCCCC"> to deal with function</font>

775
00:31:42,460 --> 00:31:46,330
stack management<font color="#CCCCCC"> or function management</font>

776
00:31:44,830 --> 00:31:50,949
like the return<font color="#CCCCCC"> instruction the push</font>

777
00:31:46,330 --> 00:31:52,510
instruction<font color="#E5E5E5"> and the pop instruction so</font>

778
00:31:50,950 --> 00:31:53,950
these were the the columns that<font color="#CCCCCC"> share</font>

779
00:31:52,510 --> 00:31:56,110
the<font color="#E5E5E5"> most differences in numbers which is</font>

780
00:31:53,950 --> 00:31:58,299
logical if you have a lot of<font color="#E5E5E5"> function</font>

781
00:31:56,110 --> 00:32:00,340
inlining for example a lot of pushes and

782
00:31:58,299 --> 00:32:02,500
pops and returns will be optimized<font color="#CCCCCC"> out</font>

783
00:32:00,340 --> 00:32:05,590
of the binary<font color="#CCCCCC"> and will not</font><font color="#E5E5E5"> appear in the</font>

784
00:32:02,500 --> 00:32:07,809
heat map<font color="#E5E5E5"> anymore</font><font color="#CCCCCC"> a different way of</font>

785
00:32:05,590 --> 00:32:10,029
optimizing<font color="#CCCCCC"> or visualizing this would be</font>

786
00:32:07,809 --> 00:32:12,879
to<font color="#E5E5E5"> look at</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> given case study and look</font>

787
00:32:10,029 --> 00:32:14,799
at the number series that were produced

788
00:32:12,880 --> 00:32:16,809
for<font color="#E5E5E5"> the different instructions so</font><font color="#CCCCCC"> you</font>

789
00:32:14,799 --> 00:32:18,700
<font color="#CCCCCC">ever</font><font color="#E5E5E5"> get a lot of different differently</font>

790
00:32:16,809 --> 00:32:20,710
<font color="#CCCCCC">colored lines which represent different</font>

791
00:32:18,700 --> 00:32:22,929
<font color="#E5E5E5">families of instructions</font><font color="#CCCCCC"> that are</font>

792
00:32:20,710 --> 00:32:26,350
visualized and you will see one

793
00:32:22,929 --> 00:32:27,940
<font color="#E5E5E5">particular instruction that is a total</font>

794
00:32:26,350 --> 00:32:30,279
outlier in this data set which would<font color="#E5E5E5"> be</font>

795
00:32:27,940 --> 00:32:32,519
<font color="#E5E5E5">this red line that thousand steps up and</font>

796
00:32:30,279 --> 00:32:34,600
down there which is the move instruction

797
00:32:32,519 --> 00:32:36,789
<font color="#E5E5E5">so apparently for the random number</font>

798
00:32:34,600 --> 00:32:39,490
generator<font color="#CCCCCC"> when</font><font color="#E5E5E5"> applying different</font>

799
00:32:36,789 --> 00:32:44,139
<font color="#CCCCCC">optimization settings it makes sense to</font>

800
00:32:39,490 --> 00:32:48,179
use lot<font color="#CCCCCC"> more move instructions</font><font color="#E5E5E5"> which in</font>

801
00:32:44,139 --> 00:32:53,010
the end will probably<font color="#E5E5E5"> save calculations</font>

802
00:32:48,179 --> 00:32:53,010
also<font color="#E5E5E5"> but</font><font color="#CCCCCC"> this interesting of course the</font>

803
00:32:53,460 --> 00:33:02,889
did<font color="#CCCCCC"> solve the version</font><font color="#E5E5E5"> of the binary that</font>

804
00:32:59,760 --> 00:33:04,960
was applied<font color="#E5E5E5"> with all of the optimization</font>

805
00:33:02,889 --> 00:33:08,979
settings<font color="#E5E5E5"> of course shows the lowest</font>

806
00:33:04,960 --> 00:33:12,320
numbers and this in<font color="#E5E5E5"> the scrap and the</font>

807
00:33:08,980 --> 00:33:14,360
version<font color="#E5E5E5"> of the binary with</font>

808
00:33:12,320 --> 00:33:16,520
least optimization settings<font color="#E5E5E5"> of course</font>

809
00:33:14,360 --> 00:33:19,760
<font color="#E5E5E5">was the highest amount of instructions</font>

810
00:33:16,520 --> 00:33:21,230
in total<font color="#E5E5E5"> a different firm to look at</font>

811
00:33:19,760 --> 00:33:23,059
this<font color="#CCCCCC"> as</font><font color="#E5E5E5"> mentioned</font><font color="#CCCCCC"> before if you look at</font>

812
00:33:21,230 --> 00:33:24,679
the<font color="#E5E5E5"> heat map and pick the instructions</font>

813
00:33:23,059 --> 00:33:26,149
to show<font color="#E5E5E5"> the most differences you can</font>

814
00:33:24,679 --> 00:33:29,150
look at those<font color="#CCCCCC"> instruction families in</font>

815
00:33:26,150 --> 00:33:31,190
more detail where histograms<font color="#CCCCCC"> are very</font>

816
00:33:29,150 --> 00:33:33,530
<font color="#E5E5E5">helpful and</font><font color="#CCCCCC"> cystogram you'll see that</font>

817
00:33:31,190 --> 00:33:35,179
the conditional jump and the

818
00:33:33,530 --> 00:33:37,010
construction<font color="#E5E5E5"> were the ones that were</font>

819
00:33:35,179 --> 00:33:39,650
<font color="#E5E5E5">most used within the binary and they'll</font>

820
00:33:37,010 --> 00:33:44,960
also show<font color="#E5E5E5"> the most</font><font color="#CCCCCC"> Ryan's or applying</font>

821
00:33:39,650 --> 00:33:48,920
the optimization settings well this is

822
00:33:44,960 --> 00:33:52,970
nice to<font color="#CCCCCC"> look at and interesting in the</font>

823
00:33:48,920 --> 00:33:55,370
end it's not actually that<font color="#CCCCCC"> helpful for</font>

824
00:33:52,970 --> 00:33:57,590
binary visualization or<font color="#E5E5E5"> for the</font>

825
00:33:55,370 --> 00:34:00,580
visualization<font color="#CCCCCC"> of changes within</font><font color="#E5E5E5"> the</font>

826
00:33:57,590 --> 00:34:03,500
<font color="#E5E5E5">binary I'm still a big fan of using</font>

827
00:34:00,580 --> 00:34:04,610
<font color="#E5E5E5">directed call graphs for the</font>

828
00:34:03,500 --> 00:34:07,700
<font color="#E5E5E5">visualization of the overall graph</font>

829
00:34:04,610 --> 00:34:10,520
structure<font color="#E5E5E5"> in this graph structure we see</font>

830
00:34:07,700 --> 00:34:12,710
highlights for the jump instructions as

831
00:34:10,520 --> 00:34:14,570
<font color="#CCCCCC">this instruction family turned out to be</font>

832
00:34:12,710 --> 00:34:19,760
the one<font color="#E5E5E5"> that showed the most changes</font>

833
00:34:14,570 --> 00:34:23,000
throughout<font color="#CCCCCC"> the experiment</font><font color="#E5E5E5"> and I try to</font>

834
00:34:19,760 --> 00:34:25,280
highlight<font color="#E5E5E5"> this with yellow so the more</font>

835
00:34:23,000 --> 00:34:27,290
yellow<font color="#E5E5E5"> I thought is the more jump</font>

836
00:34:25,280 --> 00:34:30,010
instructions it shows and I see that<font color="#E5E5E5"> the</font>

837
00:34:27,290 --> 00:34:33,980
Beamer is eating up those colors as well

838
00:34:30,010 --> 00:34:36,350
but have a<font color="#CCCCCC"> shot</font><font color="#E5E5E5"> look at the sub graph</font>

839
00:34:33,980 --> 00:34:39,080
that<font color="#E5E5E5"> the gray arrow on the right side</font><font color="#CCCCCC"> is</font>

840
00:34:36,350 --> 00:34:42,350
highlighting this<font color="#E5E5E5"> is a sub graph that</font>

841
00:34:39,080 --> 00:34:44,330
appears in the binary with the least

842
00:34:42,350 --> 00:34:45,319
<font color="#CCCCCC">optimization settings and you can see</font>

843
00:34:44,330 --> 00:34:47,299
<font color="#E5E5E5">how in the binary with the most</font>

844
00:34:45,320 --> 00:34:48,649
optimization<font color="#CCCCCC"> settings this sub graph is</font>

845
00:34:47,300 --> 00:34:51,879
just<font color="#E5E5E5"> disappearing it's being</font>

846
00:34:48,649 --> 00:34:54,290
incorporated into the larger graph pace

847
00:34:51,879 --> 00:34:55,790
<font color="#E5E5E5">one issue that</font><font color="#CCCCCC"> I've faced with the case</font>

848
00:34:54,290 --> 00:34:58,580
studies depict is that the grass rather

849
00:34:55,790 --> 00:35:01,850
small and the smaller<font color="#E5E5E5"> the</font><font color="#CCCCCC"> codpiece</font><font color="#E5E5E5"> the</font>

850
00:34:58,580 --> 00:35:05,779
least changes the optimizer will apply

851
00:35:01,850 --> 00:35:08,690
naturally so the visualizations don't

852
00:35:05,780 --> 00:35:11,300
show massive differences between the

853
00:35:08,690 --> 00:35:13,190
optimization settings<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can also do in</font>

854
00:35:11,300 --> 00:35:15,530
this<font color="#E5E5E5"> visualization</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> is to look at the</font>

855
00:35:13,190 --> 00:35:18,140
action<font color="#E5E5E5"> numbers if</font><font color="#CCCCCC"> you look at the</font>

856
00:35:15,530 --> 00:35:20,570
numbers of jump instructions<font color="#E5E5E5"> within that</font>

857
00:35:18,140 --> 00:35:23,330
code<font color="#E5E5E5"> you will see that there</font><font color="#CCCCCC"> is a kind</font>

858
00:35:20,570 --> 00:35:24,440
<font color="#E5E5E5">of a major node or a master net in the</font>

859
00:35:23,330 --> 00:35:26,080
<font color="#E5E5E5">version</font><font color="#CCCCCC"> of the binary</font><font color="#E5E5E5"> with list</font>

860
00:35:24,440 --> 00:35:30,650
optimization settings

861
00:35:26,080 --> 00:35:32,900
sorry the<font color="#CCCCCC"> Maynard shows a total of 20</font>

862
00:35:30,650 --> 00:35:37,100
appearances<font color="#CCCCCC"> of the champion structions</font>

863
00:35:32,900 --> 00:35:39,440
and this note<font color="#E5E5E5"> or this this number is</font>

864
00:35:37,100 --> 00:35:45,770
<font color="#E5E5E5">just disappearing</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> different kinds</font>

865
00:35:39,440 --> 00:35:48,110
<font color="#E5E5E5">of optimizations furthermore a side</font>

866
00:35:45,770 --> 00:35:50,450
experiment that I performed when looking

867
00:35:48,110 --> 00:35:54,680
at instruction<font color="#CCCCCC"> counts was trying to look</font>

868
00:35:50,450 --> 00:35:57,740
<font color="#E5E5E5">for algorithms</font><font color="#CCCCCC"> within the binary this</font>

869
00:35:54,680 --> 00:36:00,259
kind<font color="#E5E5E5"> of lies at hand if you look at at</font>

870
00:35:57,740 --> 00:36:01,370
the random number generator project<font color="#E5E5E5"> you</font>

871
00:36:00,260 --> 00:36:03,860
will see that there<font color="#CCCCCC"> is lot more</font>

872
00:36:01,370 --> 00:36:06,339
arithmetic<font color="#E5E5E5"> instructions showing up in</font>

873
00:36:03,860 --> 00:36:09,140
this<font color="#E5E5E5"> source space which is logical</font><font color="#CCCCCC"> and</font>

874
00:36:06,340 --> 00:36:13,160
if you use<font color="#E5E5E5"> that information try to</font>

875
00:36:09,140 --> 00:36:14,540
<font color="#E5E5E5">highlight the use</font><font color="#CCCCCC"> of such such</font>

876
00:36:13,160 --> 00:36:16,640
instruction families in bigger<font color="#E5E5E5"> search</font>

877
00:36:14,540 --> 00:36:18,529
spaces<font color="#CCCCCC"> you end up with something that</font>

878
00:36:16,640 --> 00:36:21,650
<font color="#E5E5E5">pretty much works as an algorithm</font>

879
00:36:18,530 --> 00:36:24,710
<font color="#E5E5E5">detection this was just a side</font><font color="#CCCCCC"> project</font>

880
00:36:21,650 --> 00:36:26,000
where I tried<font color="#E5E5E5"> to find the compression</font>

881
00:36:24,710 --> 00:36:28,670
algorithm that<font color="#E5E5E5"> has been incorporated</font>

882
00:36:26,000 --> 00:36:30,410
<font color="#CCCCCC">into a piece</font><font color="#E5E5E5"> of malware named Babar so</font>

883
00:36:28,670 --> 00:36:32,030
if he tried<font color="#E5E5E5"> to look at our automatic</font>

884
00:36:30,410 --> 00:36:35,560
<font color="#E5E5E5">instructions try to highlight those</font><font color="#CCCCCC"> in</font>

885
00:36:32,030 --> 00:36:38,090
<font color="#CCCCCC">cobras</font><font color="#E5E5E5"> you can actually be able</font><font color="#CCCCCC"> to spot</font>

886
00:36:35,560 --> 00:36:39,860
<font color="#E5E5E5">numeric calculations in this case the</font>

887
00:36:38,090 --> 00:36:43,880
compression algorithm that was<font color="#E5E5E5"> copy</font>

888
00:36:39,860 --> 00:36:45,350
pasted into that malware well this has

889
00:36:43,880 --> 00:36:48,910
nothing to do<font color="#CCCCCC"> with optimization sighs I</font>

890
00:36:45,350 --> 00:36:48,910
just<font color="#CCCCCC"> thought that the graph was</font><font color="#E5E5E5"> pretty</font>

891
00:36:49,180 --> 00:36:54,740
but you can further do when looking<font color="#CCCCCC"> at</font>

892
00:36:51,800 --> 00:36:57,590
<font color="#E5E5E5">the</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of instruction families in</font>

893
00:36:54,740 --> 00:37:01,310
binaries is try to<font color="#E5E5E5"> make it more</font>

894
00:36:57,590 --> 00:37:04,580
comparable by abstracting<font color="#E5E5E5"> it to a</font>

895
00:37:01,310 --> 00:37:06,200
distribution<font color="#E5E5E5"> of varieties of given</font>

896
00:37:04,580 --> 00:37:10,370
instruction families within<font color="#CCCCCC"> the</font>

897
00:37:06,200 --> 00:37:13,430
functions so I tried to generate<font color="#CCCCCC"> a</font>

898
00:37:10,370 --> 00:37:15,140
distribution<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> variance of</font>

899
00:37:13,430 --> 00:37:19,069
instruction families<font color="#E5E5E5"> within functions</font>

900
00:37:15,140 --> 00:37:21,920
<font color="#CCCCCC">and it turns out there</font><font color="#E5E5E5"> is differences to</font>

901
00:37:19,070 --> 00:37:24,710
see between<font color="#E5E5E5"> the different</font><font color="#CCCCCC"> composition</font>

902
00:37:21,920 --> 00:37:27,650
settings<font color="#E5E5E5"> for looking at the Bryan's one</font>

903
00:37:24,710 --> 00:37:29,990
has defined<font color="#E5E5E5"> packet sizes for the given</font>

904
00:37:27,650 --> 00:37:31,720
<font color="#E5E5E5">branch numbers to be able to make the</font>

905
00:37:29,990 --> 00:37:34,729
numbers<font color="#E5E5E5"> comparable among the different</font>

906
00:37:31,720 --> 00:37:36,129
<font color="#E5E5E5">binaries what's nice about these</font>

907
00:37:34,730 --> 00:37:38,289
distributions<font color="#CCCCCC"> is that they're actually</font>

908
00:37:36,130 --> 00:37:40,029
resilient<font color="#E5E5E5"> to little changes so</font>

909
00:37:38,289 --> 00:37:41,619
our source code changes the

910
00:37:40,029 --> 00:37:43,239
<font color="#E5E5E5">representation of the numbers does not</font>

911
00:37:41,619 --> 00:37:45,189
because we<font color="#CCCCCC"> still have the same amount of</font>

912
00:37:43,239 --> 00:37:48,279
packets<font color="#E5E5E5"> in the same amount of numbers</font>

913
00:37:45,189 --> 00:37:50,169
that we<font color="#CCCCCC"> put</font><font color="#E5E5E5"> into those packets this</font>

914
00:37:48,279 --> 00:37:53,529
would be the data and how<font color="#CCCCCC"> it looks</font><font color="#E5E5E5"> like</font>

915
00:37:50,169 --> 00:37:55,150
<font color="#E5E5E5">again</font><font color="#CCCCCC"> don't try</font><font color="#E5E5E5"> to look at at the</font>

916
00:37:53,529 --> 00:37:58,029
numbers<font color="#CCCCCC"> but try</font><font color="#E5E5E5"> to look at the</font>

917
00:37:55,150 --> 00:38:01,989
visualization<font color="#E5E5E5"> of those numbers let's</font>

918
00:37:58,029 --> 00:38:03,759
look<font color="#E5E5E5"> at a couple of distributions again</font>

919
00:38:01,989 --> 00:38:09,519
this is like the base set of numbers

920
00:38:03,759 --> 00:38:12,279
<font color="#E5E5E5">that I produced in in this case again</font>

921
00:38:09,519 --> 00:38:14,348
<font color="#E5E5E5">for the prime number generator the</font>

922
00:38:12,279 --> 00:38:15,609
<font color="#E5E5E5">packet sizes are bringing because it</font>

923
00:38:14,349 --> 00:38:18,719
turns out the numbers or<font color="#E5E5E5"> the</font>

924
00:38:15,609 --> 00:38:21,219
distribution<font color="#CCCCCC"> isn't actually as equal as</font>

925
00:38:18,719 --> 00:38:23,229
what people<font color="#E5E5E5"> beneficial for visualization</font>

926
00:38:21,219 --> 00:38:25,119
<font color="#CCCCCC">so I really find</font><font color="#E5E5E5"> the packet sizes and</font>

927
00:38:23,229 --> 00:38:27,399
<font color="#E5E5E5">went in in smaller steps in the</font>

928
00:38:25,119 --> 00:38:32,289
beginning from<font color="#E5E5E5"> X 0 to 5 to 10 to 50 to</font>

929
00:38:27,400 --> 00:38:37,179
100<font color="#E5E5E5"> to 250</font><font color="#CCCCCC"> and then scaling that</font><font color="#E5E5E5"> up to</font>

930
00:38:32,289 --> 00:38:39,279
an amount<font color="#E5E5E5"> of 10,000 as you can see the</font>

931
00:38:37,179 --> 00:38:43,390
smaller the<font color="#CCCCCC"> smaller</font><font color="#E5E5E5"> buckets on the left</font>

932
00:38:39,279 --> 00:38:45,479
side<font color="#E5E5E5"> show a high number of functions</font>

933
00:38:43,390 --> 00:38:47,739
<font color="#CCCCCC">that are present within those buckets</font>

934
00:38:45,479 --> 00:38:49,569
which generally<font color="#CCCCCC"> gives us an</font><font color="#E5E5E5"> idea</font><font color="#CCCCCC"> that</font>

935
00:38:47,739 --> 00:38:52,599
the<font color="#E5E5E5"> overall variance of instructions</font>

936
00:38:49,569 --> 00:38:54,400
<font color="#E5E5E5">within a given</font><font color="#CCCCCC"> function is rather low</font><font color="#E5E5E5"> at</font>

937
00:38:52,599 --> 00:38:57,249
least when using<font color="#CCCCCC"> visual</font><font color="#E5E5E5"> studio you will</font>

938
00:38:54,400 --> 00:38:58,989
<font color="#E5E5E5">see that the total</font><font color="#CCCCCC"> amount of different</font>

939
00:38:57,249 --> 00:39:01,089
instructions within<font color="#E5E5E5"> the binary isn't all</font>

940
00:38:58,989 --> 00:39:02,289
that high you can probably count<font color="#CCCCCC"> if you</font>

941
00:39:01,089 --> 00:39:03,788
can't<font color="#E5E5E5"> different types of instructions</font>

942
00:39:02,289 --> 00:39:05,979
you<font color="#E5E5E5"> will end up</font><font color="#CCCCCC"> with like 30</font><font color="#E5E5E5"> or 40</font>

943
00:39:03,789 --> 00:39:08,199
<font color="#E5E5E5">different instructions and if you've</font>

944
00:39:05,979 --> 00:39:09,939
<font color="#E5E5E5">ever seen the Intel manual and the</font>

945
00:39:08,199 --> 00:39:13,479
amount instructions that<font color="#CCCCCC"> are documented</font>

946
00:39:09,939 --> 00:39:15,658
in there you will feel rather stupid

947
00:39:13,479 --> 00:39:18,308
just knowing<font color="#E5E5E5"> 30 different instructions</font>

948
00:39:15,659 --> 00:39:20,259
<font color="#E5E5E5">that's just as a sighted but yes so the</font>

949
00:39:18,309 --> 00:39:24,549
<font color="#CCCCCC">aural bryan's</font><font color="#E5E5E5"> of instructions within</font>

950
00:39:20,259 --> 00:39:27,699
<font color="#E5E5E5">functions</font><font color="#CCCCCC"> isn't all that high</font><font color="#E5E5E5"> these kind</font>

951
00:39:24,549 --> 00:39:31,029
<font color="#E5E5E5">of</font><font color="#CCCCCC"> numbers series can be there just</font>

952
00:39:27,699 --> 00:39:33,489
<font color="#E5E5E5">visualized again in the diagram as shown</font>

953
00:39:31,029 --> 00:39:36,669
<font color="#E5E5E5">here and what</font><font color="#CCCCCC"> we'll see that for the</font>

954
00:39:33,489 --> 00:39:40,239
prime number generator the varieties

955
00:39:36,669 --> 00:39:42,279
aren't actually<font color="#CCCCCC"> that far off so</font><font color="#E5E5E5"> the the</font>

956
00:39:40,239 --> 00:39:45,939
numbers don't change<font color="#E5E5E5"> all that much we</font>

957
00:39:42,279 --> 00:39:49,179
see<font color="#E5E5E5"> caps as big as about 20 functions</font>

958
00:39:45,939 --> 00:39:51,640
<font color="#CCCCCC">endowed to</font><font color="#E5E5E5"> change within the packets if</font>

959
00:39:49,179 --> 00:39:53,140
we look at the different series<font color="#E5E5E5"> though</font>

960
00:39:51,640 --> 00:39:55,390
we see that for<font color="#E5E5E5"> the random number</font>

961
00:39:53,140 --> 00:39:57,970
generator<font color="#CCCCCC"> those differences are a lot</font>

962
00:39:55,390 --> 00:39:59,620
higher<font color="#E5E5E5"> or a lot more visible especially</font>

963
00:39:57,970 --> 00:40:01,750
<font color="#CCCCCC">in the packet number two and packet</font>

964
00:39:59,620 --> 00:40:02,859
number<font color="#E5E5E5"> four and finally</font><font color="#CCCCCC"> if we look</font><font color="#E5E5E5"> at</font>

965
00:40:01,750 --> 00:40:06,520
the<font color="#E5E5E5"> last series in the visualization</font>

966
00:40:02,860 --> 00:40:08,590
<font color="#E5E5E5">after win32 window we can again</font><font color="#CCCCCC"> see that</font>

967
00:40:06,520 --> 00:40:10,330
the<font color="#E5E5E5"> packet number</font><font color="#CCCCCC"> four is the one with</font>

968
00:40:08,590 --> 00:40:14,710
<font color="#E5E5E5">the highest peak which for me means that</font>

969
00:40:10,330 --> 00:40:19,529
the packet number<font color="#CCCCCC"> four which I think was</font>

970
00:40:14,710 --> 00:40:23,590
<font color="#E5E5E5">between 200 and 250 or something is the</font>

971
00:40:19,530 --> 00:40:27,250
<font color="#E5E5E5">the amount of</font><font color="#CCCCCC"> orion's most present in</font>

972
00:40:23,590 --> 00:40:29,170
compiled<font color="#E5E5E5"> binaries overall</font><font color="#CCCCCC"> well it's also</font>

973
00:40:27,250 --> 00:40:31,210
<font color="#E5E5E5">quite visible is that the window</font>

974
00:40:29,170 --> 00:40:33,220
application doesn't<font color="#E5E5E5"> show so much</font>

975
00:40:31,210 --> 00:40:34,690
difference at<font color="#CCCCCC"> all when applied with</font>

976
00:40:33,220 --> 00:40:36,790
different compilation compilation

977
00:40:34,690 --> 00:40:39,610
settings<font color="#E5E5E5"> you will see that most of those</font>

978
00:40:36,790 --> 00:40:42,340
lines<font color="#CCCCCC"> align with each</font><font color="#E5E5E5"> other and there</font>

979
00:40:39,610 --> 00:40:44,860
<font color="#E5E5E5">isn't actual spikes of differences</font>

980
00:40:42,340 --> 00:40:48,520
<font color="#E5E5E5">between the settings which I would</font>

981
00:40:44,860 --> 00:40:51,160
conclude<font color="#CCCCCC"> that an</font><font color="#E5E5E5"> application that's</font>

982
00:40:48,520 --> 00:40:55,030
heavily relying on the or in<font color="#E5E5E5"> this case</font>

983
00:40:51,160 --> 00:40:57,810
on the<font color="#CCCCCC"> window system of of Windows</font><font color="#E5E5E5"> or</font>

984
00:40:55,030 --> 00:41:00,730
<font color="#CCCCCC">like of</font><font color="#E5E5E5"> the windows API or in general</font>

985
00:40:57,810 --> 00:41:03,960
<font color="#CCCCCC">relying very much on the API</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> Windows</font>

986
00:41:00,730 --> 00:41:06,820
for any kind of purpose shows less

987
00:41:03,960 --> 00:41:08,800
success or less changes in optimizations

988
00:41:06,820 --> 00:41:12,940
when programs that<font color="#E5E5E5"> don't use</font><font color="#CCCCCC"> the API all</font>

989
00:41:08,800 --> 00:41:15,160
that much this is because larger windows

990
00:41:12,940 --> 00:41:17,260
API calls<font color="#CCCCCC"> are actually very</font><font color="#E5E5E5"> hard to</font>

991
00:41:15,160 --> 00:41:19,390
optimize<font color="#CCCCCC"> out of the binary</font><font color="#E5E5E5"> if you use</font>

992
00:41:17,260 --> 00:41:21,760
the<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> a lot this can be can be</font>

993
00:41:19,390 --> 00:41:25,629
<font color="#E5E5E5">worked on by the optimizer but the</font>

994
00:41:21,760 --> 00:41:28,090
actual API calls to<font color="#E5E5E5"> the windows</font><font color="#CCCCCC"> API are</font>

995
00:41:25,630 --> 00:41:29,230
very different in their<font color="#E5E5E5"> appearance in</font>

996
00:41:28,090 --> 00:41:31,960
<font color="#E5E5E5">the binary</font><font color="#CCCCCC"> and very difficult</font><font color="#E5E5E5"> to</font>

997
00:41:29,230 --> 00:41:34,540
optimize<font color="#E5E5E5"> optimize away from from the</font>

998
00:41:31,960 --> 00:41:36,910
<font color="#CCCCCC">actual source code so this</font><font color="#E5E5E5"> would be why</font>

999
00:41:34,540 --> 00:41:44,190
we see<font color="#E5E5E5"> some little changes in this case</font>

1000
00:41:36,910 --> 00:41:48,009
<font color="#E5E5E5">study numbers the visualizations are</font>

1001
00:41:44,190 --> 00:41:50,230
interesting to look at<font color="#CCCCCC"> I like</font><font color="#E5E5E5"> to stare</font>

1002
00:41:48,010 --> 00:41:51,940
data<font color="#E5E5E5"> I like to stare at the visuals but</font>

1003
00:41:50,230 --> 00:41:53,620
you will see<font color="#E5E5E5"> that with those graphs you</font>

1004
00:41:51,940 --> 00:41:57,130
<font color="#E5E5E5">can make your your conclusions but they</font>

1005
00:41:53,620 --> 00:42:01,359
aren't<font color="#E5E5E5"> actually feasible to use for</font>

1006
00:41:57,130 --> 00:42:03,340
finally<font color="#E5E5E5"> giving use case</font><font color="#CCCCCC"> I started up the</font>

1007
00:42:01,360 --> 00:42:04,140
project because I was curious<font color="#E5E5E5"> I'll admit</font>

1008
00:42:03,340 --> 00:42:06,270
that

1009
00:42:04,140 --> 00:42:09,240
and I found<font color="#E5E5E5"> the use case for</font><font color="#CCCCCC"> that</font>

1010
00:42:06,270 --> 00:42:13,020
project<font color="#CCCCCC"> a little later on and now here</font>

1011
00:42:09,240 --> 00:42:14,549
<font color="#E5E5E5">comes the actual use case so all</font><font color="#CCCCCC"> the</font>

1012
00:42:13,020 --> 00:42:16,230
visualizations are based on numbers

1013
00:42:14,550 --> 00:42:18,540
extracted from the different binaries

1014
00:42:16,230 --> 00:42:20,880
and<font color="#E5E5E5"> these</font><font color="#CCCCCC"> numbers tell us</font><font color="#E5E5E5"> things it</font><font color="#CCCCCC"> tell</font>

1015
00:42:18,540 --> 00:42:24,300
<font color="#CCCCCC">us</font><font color="#E5E5E5"> how the binaries change they also</font>

1016
00:42:20,880 --> 00:42:28,200
tell us<font color="#E5E5E5"> in how abstract we would have to</font>

1017
00:42:24,300 --> 00:42:29,940
<font color="#E5E5E5">generate our credit action metrics to be</font>

1018
00:42:28,200 --> 00:42:31,649
able<font color="#E5E5E5"> to still detect code that has been</font>

1019
00:42:29,940 --> 00:42:33,690
recompiled with different<font color="#E5E5E5"> settings</font><font color="#CCCCCC"> and</font>

1020
00:42:31,650 --> 00:42:35,990
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is where we're</font><font color="#CCCCCC"> actually wanted to</font>

1021
00:42:33,690 --> 00:42:35,990
<font color="#E5E5E5">get it</font>

1022
00:42:38,390 --> 00:42:43,290
comparing the different optimization

1023
00:42:41,370 --> 00:42:45,480
<font color="#CCCCCC">settings in terms of numbers does only</font>

1024
00:42:43,290 --> 00:42:49,860
makes sense<font color="#E5E5E5"> if those numbers aren't</font>

1025
00:42:45,480 --> 00:42:52,770
bound to different source spaces<font color="#E5E5E5"> so in</font>

1026
00:42:49,860 --> 00:42:55,110
order<font color="#E5E5E5"> to find deviations of of the</font>

1027
00:42:52,770 --> 00:42:56,460
optimization<font color="#E5E5E5"> settings we</font><font color="#CCCCCC"> have to look</font><font color="#E5E5E5"> at</font>

1028
00:42:55,110 --> 00:42:59,340
the same source<font color="#E5E5E5"> piece which</font><font color="#CCCCCC"> is kind of</font>

1029
00:42:56,460 --> 00:43:01,230
<font color="#E5E5E5">logical also as I keep being asked as I</font>

1030
00:42:59,340 --> 00:43:03,030
work on binary<font color="#E5E5E5"> code grass no I still</font>

1031
00:43:01,230 --> 00:43:06,990
don't<font color="#CCCCCC"> diff binaries I just like to</font>

1032
00:43:03,030 --> 00:43:09,000
compare numbers<font color="#CCCCCC"> I</font><font color="#E5E5E5"> was on the slide</font>

1033
00:43:06,990 --> 00:43:12,180
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> a long list of attributes are</font>

1034
00:43:09,000 --> 00:43:14,700
<font color="#CCCCCC">used for the comparisons</font><font color="#E5E5E5"> that I will be</font>

1035
00:43:12,180 --> 00:43:16,350
speaking<font color="#CCCCCC"> about in the next</font><font color="#E5E5E5"> slide which</font>

1036
00:43:14,700 --> 00:43:17,779
would for example<font color="#E5E5E5"> be the file size or</font>

1037
00:43:16,350 --> 00:43:20,370
the<font color="#E5E5E5"> code section size and see how these</font>

1038
00:43:17,780 --> 00:43:22,620
change with the different<font color="#CCCCCC"> settings the</font>

1039
00:43:20,370 --> 00:43:24,210
total amount of local references within

1040
00:43:22,620 --> 00:43:26,670
the binary the total amount<font color="#E5E5E5"> of API calls</font>

1041
00:43:24,210 --> 00:43:30,000
<font color="#CCCCCC">within the binary the total amount of</font>

1042
00:43:26,670 --> 00:43:33,450
data reference counts and<font color="#E5E5E5"> ratios</font>

1043
00:43:30,000 --> 00:43:36,510
<font color="#E5E5E5">calculated with function sizes and the</font>

1044
00:43:33,450 --> 00:43:38,160
amount of API<font color="#CCCCCC"> calls and then</font><font color="#E5E5E5"> three</font>

1045
00:43:36,510 --> 00:43:41,220
different attributes<font color="#CCCCCC"> that count</font>

1046
00:43:38,160 --> 00:43:43,620
particular calls to given API is<font color="#CCCCCC"> that</font>

1047
00:43:41,220 --> 00:43:47,720
appear very<font color="#CCCCCC"> frequently</font><font color="#E5E5E5"> within</font><font color="#CCCCCC"> Windows</font>

1048
00:43:43,620 --> 00:43:53,100
binaries the idea here is<font color="#CCCCCC"> to look at</font><font color="#E5E5E5"> how</font>

1049
00:43:47,720 --> 00:43:56,819
these these attributes change when

1050
00:43:53,100 --> 00:43:57,890
looking at<font color="#E5E5E5"> one given saw space and that</font>

1051
00:43:56,820 --> 00:44:00,900
wouldn't<font color="#E5E5E5"> look like that</font>

1052
00:43:57,890 --> 00:44:04,080
very pretty again lots of<font color="#CCCCCC"> numbers that</font>

1053
00:44:00,900 --> 00:44:05,790
<font color="#CCCCCC">you</font><font color="#E5E5E5"> probably again can't read</font><font color="#CCCCCC"> well so</font>

1054
00:44:04,080 --> 00:44:08,610
what I<font color="#CCCCCC"> try to</font><font color="#E5E5E5"> do is look</font><font color="#CCCCCC"> at all these</font>

1055
00:44:05,790 --> 00:44:10,259
different<font color="#E5E5E5"> metrics and see how much they</font>

1056
00:44:08,610 --> 00:44:12,030
change when<font color="#CCCCCC"> I apply different settings</font>

1057
00:44:10,260 --> 00:44:14,040
in<font color="#E5E5E5"> order to be able to tell whether</font>

1058
00:44:12,030 --> 00:44:16,500
<font color="#E5E5E5">these attributes serve as proper metrics</font>

1059
00:44:14,040 --> 00:44:17,890
<font color="#E5E5E5">to detect threats that happen or to</font>

1060
00:44:16,500 --> 00:44:20,950
detect<font color="#E5E5E5"> malware that has been read</font>

1061
00:44:17,890 --> 00:44:23,259
with<font color="#E5E5E5"> different settings so</font><font color="#CCCCCC"> the idea was</font>

1062
00:44:20,950 --> 00:44:25,089
<font color="#CCCCCC">to find out</font><font color="#E5E5E5"> how much these attributes</font>

1063
00:44:23,260 --> 00:44:29,560
vary<font color="#E5E5E5"> when applied with different</font>

1064
00:44:25,090 --> 00:44:32,890
optimization settings the source space

1065
00:44:29,560 --> 00:44:34,770
where these attributes varied most was

1066
00:44:32,890 --> 00:44:37,180
again the random number generator<font color="#CCCCCC"> in C</font><font color="#E5E5E5"> I</font>

1067
00:44:34,770 --> 00:44:39,070
would<font color="#CCCCCC"> suspect because</font><font color="#E5E5E5"> there is very</font>

1068
00:44:37,180 --> 00:44:40,720
<font color="#CCCCCC">little API</font><font color="#E5E5E5"> isn't very little strings</font>

1069
00:44:39,070 --> 00:44:43,420
appearing in this binary<font color="#E5E5E5"> and a lot of</font>

1070
00:44:40,720 --> 00:44:46,919
<font color="#E5E5E5">arithmetic calculation this is</font><font color="#CCCCCC"> my theory</font>

1071
00:44:43,420 --> 00:44:50,530
<font color="#E5E5E5">and this is why this source</font><font color="#CCCCCC"> space or</font><font color="#E5E5E5"> de</font>

1072
00:44:46,920 --> 00:44:51,970
the metrics for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> source space within</font>

1073
00:44:50,530 --> 00:44:55,150
<font color="#E5E5E5">the space of the compiled binaries that</font>

1074
00:44:51,970 --> 00:44:58,359
<font color="#E5E5E5">I looked at change to the pad</font><font color="#CCCCCC"> 30% on</font>

1075
00:44:55,150 --> 00:45:01,840
average<font color="#E5E5E5"> so between 5 and</font><font color="#CCCCCC"> 30</font><font color="#E5E5E5"> percent well</font>

1076
00:44:58,360 --> 00:45:03,940
when looking at<font color="#E5E5E5"> the window application</font>

1077
00:45:01,840 --> 00:45:06,730
or as mentioned a lot of<font color="#CCCCCC"> windows</font><font color="#E5E5E5"> API</font>

1078
00:45:03,940 --> 00:45:09,970
calls are<font color="#CCCCCC"> being used the changes would</font>

1079
00:45:06,730 --> 00:45:12,550
<font color="#CCCCCC">not</font><font color="#E5E5E5"> be any higher than 4% so we look at</font>

1080
00:45:09,970 --> 00:45:15,759
changes<font color="#CCCCCC"> of 30% versus 4%</font><font color="#E5E5E5"> when looking at</font>

1081
00:45:12,550 --> 00:45:17,410
these different source places<font color="#E5E5E5"> the prime</font>

1082
00:45:15,760 --> 00:45:20,320
number generator should change this off

1083
00:45:17,410 --> 00:45:22,779
about<font color="#E5E5E5"> like 10 to 15% for these metrics</font>

1084
00:45:20,320 --> 00:45:24,790
for me in<font color="#CCCCCC"> edit action</font><font color="#E5E5E5"> that would mean if</font>

1085
00:45:22,780 --> 00:45:27,780
I use these attributes for<font color="#E5E5E5"> generating my</font>

1086
00:45:24,790 --> 00:45:33,160
indicators of<font color="#E5E5E5"> compromise I would have to</font>

1087
00:45:27,780 --> 00:45:35,770
<font color="#E5E5E5">acknowledge for a deviation of my</font>

1088
00:45:33,160 --> 00:45:37,569
metrics from<font color="#E5E5E5"> about between 5 and</font><font color="#CCCCCC"> 30</font>

1089
00:45:35,770 --> 00:45:39,270
percent to<font color="#E5E5E5"> be able to still detect the</font>

1090
00:45:37,570 --> 00:45:44,200
same source<font color="#CCCCCC"> space with</font><font color="#E5E5E5"> this kind of</font>

1091
00:45:39,270 --> 00:45:46,180
indicators<font color="#E5E5E5"> the numbers</font><font color="#CCCCCC"> represented on</font>

1092
00:45:44,200 --> 00:45:46,750
this<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> are aren't always to be</font>

1093
00:45:46,180 --> 00:45:49,569
trusted

1094
00:45:46,750 --> 00:45:52,240
I also found data<font color="#E5E5E5"> because there's one</font>

1095
00:45:49,570 --> 00:45:55,000
that shows a standard deviation<font color="#E5E5E5"> of three</font>

1096
00:45:52,240 --> 00:45:56,859
hundred<font color="#E5E5E5"> forty six percent which is only</font>

1097
00:45:55,000 --> 00:46:00,490
the<font color="#E5E5E5"> reason because</font><font color="#CCCCCC"> it changes only</font><font color="#E5E5E5"> by</font>

1098
00:45:56,860 --> 00:46:01,870
one bit<font color="#CCCCCC"> so the largest</font><font color="#E5E5E5"> amount of this</font>

1099
00:46:00,490 --> 00:46:04,089
<font color="#E5E5E5">metric</font><font color="#CCCCCC"> will be 1</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> smallest one</font>

1100
00:46:01,870 --> 00:46:08,140
<font color="#E5E5E5">will be</font><font color="#CCCCCC"> 0 which is like</font><font color="#E5E5E5"> a huge change of</font>

1101
00:46:04,090 --> 00:46:09,460
<font color="#CCCCCC">100% which in reality isn't</font><font color="#E5E5E5"> actually the</font>

1102
00:46:08,140 --> 00:46:18,279
case so these<font color="#CCCCCC"> numbers have to be taken</font>

1103
00:46:09,460 --> 00:46:19,840
with concern why why did<font color="#E5E5E5"> this whole</font>

1104
00:46:18,280 --> 00:46:21,990
project<font color="#CCCCCC"> why did I try to build</font><font color="#E5E5E5"> those</font>

1105
00:46:19,840 --> 00:46:24,460
metrics what's the whole point<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> I</font>

1106
00:46:21,990 --> 00:46:26,799
did you see my talk last<font color="#E5E5E5"> year you might</font>

1107
00:46:24,460 --> 00:46:28,630
<font color="#CCCCCC">as I have seen this slide</font><font color="#E5E5E5"> I've decided</font>

1108
00:46:26,800 --> 00:46:30,700
to make<font color="#E5E5E5"> this my standard conclusion</font>

1109
00:46:28,630 --> 00:46:31,840
slide for every kind<font color="#E5E5E5"> of talk that I'm</font>

1110
00:46:30,700 --> 00:46:34,480
giving

1111
00:46:31,840 --> 00:46:36,610
30 section metrics why why is this whole

1112
00:46:34,480 --> 00:46:38,320
project useful<font color="#CCCCCC"> I've been</font><font color="#E5E5E5"> talking a lot</font>

1113
00:46:36,610 --> 00:46:40,600
about<font color="#E5E5E5"> about metrics let me get back</font><font color="#CCCCCC"> to</font>

1114
00:46:38,320 --> 00:46:42,760
the to<font color="#E5E5E5"> the metrics first of all one of</font>

1115
00:46:40,600 --> 00:46:45,279
<font color="#E5E5E5">the points that I figured would make</font>

1116
00:46:42,760 --> 00:46:47,740
sense to<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at optimization</font><font color="#CCCCCC"> settings</font>

1117
00:46:45,280 --> 00:46:51,220
<font color="#E5E5E5">is because with the the metrics</font>

1118
00:46:47,740 --> 00:46:53,680
extracted<font color="#CCCCCC"> on the one side</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can try to</font>

1119
00:46:51,220 --> 00:46:56,770
detect which optimization setting was

1120
00:46:53,680 --> 00:46:58,509
used for<font color="#E5E5E5"> a given source space and on the</font>

1121
00:46:56,770 --> 00:47:00,820
opposite side<font color="#E5E5E5"> as mentioned</font><font color="#CCCCCC"> we can</font>

1122
00:46:58,510 --> 00:47:02,590
<font color="#E5E5E5">generate metrics that are oblivious</font><font color="#CCCCCC"> to</font>

1123
00:47:00,820 --> 00:47:04,380
those changes<font color="#CCCCCC"> so once first if</font><font color="#E5E5E5"> we look</font>

1124
00:47:02,590 --> 00:47:07,030
at the changes<font color="#E5E5E5"> that actually appear</font>

1125
00:47:04,380 --> 00:47:09,820
within<font color="#E5E5E5"> our metrics we could potentially</font>

1126
00:47:07,030 --> 00:47:12,370
be able<font color="#E5E5E5"> to detect which setting a binary</font>

1127
00:47:09,820 --> 00:47:15,880
was with which setting a<font color="#E5E5E5"> binary was</font>

1128
00:47:12,370 --> 00:47:17,290
compatible again here's a<font color="#E5E5E5"> large stash of</font>

1129
00:47:15,880 --> 00:47:19,270
numbers again you will<font color="#CCCCCC"> probably</font><font color="#E5E5E5"> not be</font>

1130
00:47:17,290 --> 00:47:20,560
able<font color="#CCCCCC"> to read those numbers</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> just</font>

1131
00:47:19,270 --> 00:47:22,870
consider if you look at the different

1132
00:47:20,560 --> 00:47:26,910
<font color="#CCCCCC">attribute surveillance light like for</font>

1133
00:47:22,870 --> 00:47:30,310
example<font color="#E5E5E5"> the total kind of functions</font>

1134
00:47:26,910 --> 00:47:32,980
<font color="#CCCCCC">divided by the</font><font color="#E5E5E5"> size of the code section</font>

1135
00:47:30,310 --> 00:47:34,690
or the total<font color="#E5E5E5"> amount of jump instructions</font>

1136
00:47:32,980 --> 00:47:38,500
divided by the code section or the total

1137
00:47:34,690 --> 00:47:40,960
<font color="#E5E5E5">amount</font><font color="#CCCCCC"> of calls to get proc addressed</font>

1138
00:47:38,500 --> 00:47:43,210
divided by the size<font color="#E5E5E5"> of the code section</font>

1139
00:47:40,960 --> 00:47:47,080
we get indicators that help<font color="#E5E5E5"> us compare</font>

1140
00:47:43,210 --> 00:47:48,970
different source<font color="#CCCCCC"> bases</font><font color="#E5E5E5"> and there are</font>

1141
00:47:47,080 --> 00:47:51,009
different and<font color="#CCCCCC"> there optimization</font>

1142
00:47:48,970 --> 00:47:53,589
settings so here we're looking<font color="#E5E5E5"> for</font>

1143
00:47:51,010 --> 00:47:56,350
numbers that<font color="#E5E5E5"> differ a lot between</font>

1144
00:47:53,590 --> 00:47:58,930
<font color="#CCCCCC">different optimization settings</font><font color="#E5E5E5"> and we</font>

1145
00:47:56,350 --> 00:48:01,150
can use this Delta<font color="#CCCCCC"> between the</font>

1146
00:47:58,930 --> 00:48:02,649
indicators to try to define which

1147
00:48:01,150 --> 00:48:07,150
optimizations I think was used for a

1148
00:48:02,650 --> 00:48:09,010
given<font color="#E5E5E5"> source page this is probably more</font>

1149
00:48:07,150 --> 00:48:10,870
useful<font color="#E5E5E5"> in the future project because the</font>

1150
00:48:09,010 --> 00:48:12,340
source<font color="#E5E5E5"> pieces that I had were only</font><font color="#CCCCCC"> three</font>

1151
00:48:10,870 --> 00:48:14,589
<font color="#CCCCCC">and I would probably</font><font color="#E5E5E5"> need a couple of</font>

1152
00:48:12,340 --> 00:48:17,350
hundreds<font color="#E5E5E5"> to be able to derive proper</font>

1153
00:48:14,590 --> 00:48:20,230
indicators so this is still future

1154
00:48:17,350 --> 00:48:22,330
research to be done<font color="#CCCCCC"> on the other side</font><font color="#E5E5E5"> if</font>

1155
00:48:20,230 --> 00:48:24,820
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> not interested</font><font color="#CCCCCC"> on changes we can</font>

1156
00:48:22,330 --> 00:48:27,190
look at the similarities where comes my

1157
00:48:24,820 --> 00:48:30,610
<font color="#E5E5E5">last case study</font><font color="#CCCCCC"> I'll be talking</font><font color="#E5E5E5"> about</font>

1158
00:48:27,190 --> 00:48:33,360
<font color="#E5E5E5">today</font><font color="#CCCCCC"> if we look at a</font><font color="#E5E5E5"> different set of</font>

1159
00:48:30,610 --> 00:48:35,890
<font color="#E5E5E5">source</font><font color="#CCCCCC"> bases namely actual malware code</font>

1160
00:48:33,360 --> 00:48:37,990
compiled with different optimization

1161
00:48:35,890 --> 00:48:39,940
settings<font color="#CCCCCC"> we could try</font><font color="#E5E5E5"> to see how much</font>

1162
00:48:37,990 --> 00:48:41,529
<font color="#CCCCCC">our indicators had to defer to be able</font>

1163
00:48:39,940 --> 00:48:43,880
<font color="#CCCCCC">to</font><font color="#E5E5E5"> still catch the same</font><font color="#CCCCCC"> malware</font>

1164
00:48:41,530 --> 00:48:46,610
another thing<font color="#E5E5E5"> I've</font><font color="#CCCCCC"> been</font>

1165
00:48:43,880 --> 00:48:49,130
talking a lot now<font color="#CCCCCC"> and for a long time I</font>

1166
00:48:46,610 --> 00:48:50,990
<font color="#CCCCCC">did</font><font color="#E5E5E5"> this very quickly so I</font><font color="#CCCCCC"> went to</font><font color="#E5E5E5"> to</font>

1167
00:48:49,130 --> 00:48:53,990
<font color="#E5E5E5">get up repository which is listed</font><font color="#CCCCCC"> on the</font>

1168
00:48:50,990 --> 00:48:54,560
<font color="#E5E5E5">screens</font><font color="#CCCCCC"> hosted</font><font color="#E5E5E5"> by a user called</font><font color="#CCCCCC"> fdisk</font>

1169
00:48:53,990 --> 00:48:56,839
<font color="#CCCCCC">you</font>

1170
00:48:54,560 --> 00:48:58,970
whatever that means and he keeps

1171
00:48:56,840 --> 00:49:00,860
collecting malware sources if you ever

1172
00:48:58,970 --> 00:49:02,390
want to do compiler research on

1173
00:49:00,860 --> 00:49:03,860
different<font color="#CCCCCC"> mal</font><font color="#E5E5E5"> reserved spaces this is</font>

1174
00:49:02,390 --> 00:49:05,629
<font color="#E5E5E5">the website to</font><font color="#CCCCCC"> go to</font><font color="#E5E5E5"> what the github</font>

1175
00:49:03,860 --> 00:49:07,130
<font color="#E5E5E5">account to go to and from there I</font>

1176
00:49:05,630 --> 00:49:10,700
downloaded three different source<font color="#CCCCCC"> spaces</font>

1177
00:49:07,130 --> 00:49:12,320
that I compared with Visual Studio 2017

1178
00:49:10,700 --> 00:49:14,029
<font color="#E5E5E5">again I use pretty much the same</font>

1179
00:49:12,320 --> 00:49:15,680
optimization settings<font color="#E5E5E5"> to generate</font>

1180
00:49:14,030 --> 00:49:18,110
different binaries from these source

1181
00:49:15,680 --> 00:49:18,560
<font color="#E5E5E5">paces and again I can say dance my</font>

1182
00:49:18,110 --> 00:49:21,320
<font color="#E5E5E5">chance</font>

1183
00:49:18,560 --> 00:49:26,360
case studies<font color="#CCCCCC"> dance</font><font color="#E5E5E5"> so let's see how</font><font color="#CCCCCC"> this</font>

1184
00:49:21,320 --> 00:49:28,310
<font color="#E5E5E5">pieces of malware change</font><font color="#CCCCCC"> there are gonna</font>

1185
00:49:26,360 --> 00:49:30,080
<font color="#E5E5E5">be</font><font color="#CCCCCC"> a lot of slides with a lot of</font><font color="#E5E5E5"> numbers</font>

1186
00:49:28,310 --> 00:49:31,700
<font color="#CCCCCC">on there I can try to look</font><font color="#E5E5E5"> at the</font>

1187
00:49:30,080 --> 00:49:33,170
numbers I<font color="#E5E5E5"> just wanted to mention I</font>

1188
00:49:31,700 --> 00:49:35,960
looked at<font color="#E5E5E5"> these three</font><font color="#CCCCCC"> different pieces</font>

1189
00:49:33,170 --> 00:49:38,120
<font color="#E5E5E5">of malware at their file geometry which</font>

1190
00:49:35,960 --> 00:49:39,830
would be attributes like the file size

1191
00:49:38,120 --> 00:49:41,960
or the<font color="#E5E5E5"> code section size or the</font>

1192
00:49:39,830 --> 00:49:44,120
different sizes of all<font color="#E5E5E5"> the sections in</font>

1193
00:49:41,960 --> 00:49:45,770
the binary<font color="#E5E5E5"> or the entropies of those</font>

1194
00:49:44,120 --> 00:49:50,630
sections like static data that you can

1195
00:49:45,770 --> 00:49:53,480
generate<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> binary geometry for</font>

1196
00:49:50,630 --> 00:49:55,310
the three different case studies<font color="#E5E5E5"> then</font>

1197
00:49:53,480 --> 00:49:56,870
the second category<font color="#E5E5E5"> would be the graph</font>

1198
00:49:55,310 --> 00:49:58,250
geometry<font color="#E5E5E5"> where we look at the</font><font color="#CCCCCC"> binary</font>

1199
00:49:56,870 --> 00:49:59,990
code craft and look at the function

1200
00:49:58,250 --> 00:50:02,600
count and the edge count and the country

1201
00:49:59,990 --> 00:50:04,459
different<font color="#E5E5E5"> API calls and the Misses and</font>

1202
00:50:02,600 --> 00:50:06,020
API calls<font color="#E5E5E5"> and there are strings of the</font>

1203
00:50:04,460 --> 00:50:09,290
reference<font color="#E5E5E5"> and different ratios that are</font>

1204
00:50:06,020 --> 00:50:11,630
<font color="#CCCCCC">calculated and try to compare those</font><font color="#E5E5E5"> for</font>

1205
00:50:09,290 --> 00:50:14,150
the three case studies<font color="#E5E5E5"> and finally API</font>

1206
00:50:11,630 --> 00:50:16,010
level indicators which would mean how

1207
00:50:14,150 --> 00:50:18,380
<font color="#E5E5E5">many calls are</font><font color="#CCCCCC"> to get pocketed so</font><font color="#E5E5E5"> many</font>

1208
00:50:16,010 --> 00:50:21,170
calls<font color="#E5E5E5"> there are to create thread how</font>

1209
00:50:18,380 --> 00:50:22,940
large<font color="#E5E5E5"> are callback functions within the</font>

1210
00:50:21,170 --> 00:50:25,640
binary how much do thread handlers

1211
00:50:22,940 --> 00:50:27,830
change within the binary what's the

1212
00:50:25,640 --> 00:50:29,660
average path length within<font color="#E5E5E5"> the graph</font>

1213
00:50:27,830 --> 00:50:31,940
what's the<font color="#E5E5E5"> shortest path length like if</font>

1214
00:50:29,660 --> 00:50:34,160
you look<font color="#E5E5E5"> at at networks it offers a lot</font>

1215
00:50:31,940 --> 00:50:35,600
of<font color="#E5E5E5"> algorithms to extract features that</font>

1216
00:50:34,160 --> 00:50:38,000
describe<font color="#CCCCCC"> the graph which in our case</font>

1217
00:50:35,600 --> 00:50:44,120
<font color="#CCCCCC">here could be variable threat detection</font>

1218
00:50:38,000 --> 00:50:45,350
<font color="#CCCCCC">metrics finally for</font><font color="#E5E5E5"> the metrics I also</font>

1219
00:50:44,120 --> 00:50:48,200
looked<font color="#E5E5E5"> at the strings</font><font color="#CCCCCC"> contained in the</font>

1220
00:50:45,350 --> 00:50:49,670
binary you can<font color="#E5E5E5"> evaluate strings by how</font>

1221
00:50:48,200 --> 00:50:52,580
<font color="#E5E5E5">often certain characters appear within</font>

1222
00:50:49,670 --> 00:50:54,920
<font color="#CCCCCC">that string and evaluate</font><font color="#E5E5E5"> how meaningful</font>

1223
00:50:52,580 --> 00:50:56,670
<font color="#E5E5E5">or how much</font><font color="#CCCCCC"> information is contained</font>

1224
00:50:54,920 --> 00:50:59,700
within<font color="#CCCCCC"> a given string</font><font color="#E5E5E5"> and I can</font>

1225
00:50:56,670 --> 00:51:02,780
serve as a threat detection metric for

1226
00:50:59,700 --> 00:51:06,180
all these numbers<font color="#E5E5E5"> again I calculated the</font>

1227
00:51:02,780 --> 00:51:09,150
standard<font color="#E5E5E5"> deviation to measure how much</font>

1228
00:51:06,180 --> 00:51:11,279
<font color="#E5E5E5">these indicators change when different</font>

1229
00:51:09,150 --> 00:51:13,619
optimization<font color="#CCCCCC"> settings are applied</font><font color="#E5E5E5"> to the</font>

1230
00:51:11,280 --> 00:51:17,490
<font color="#E5E5E5">source space and the findings in this</font>

1231
00:51:13,619 --> 00:51:19,530
<font color="#E5E5E5">experiment were that for malware</font><font color="#CCCCCC"> source</font>

1232
00:51:17,490 --> 00:51:22,140
spaces like the<font color="#CCCCCC"> Eric</font><font color="#E5E5E5"> Melbourne</font>

1233
00:51:19,530 --> 00:51:24,660
that's not heavily relying on<font color="#CCCCCC"> Windows</font>

1234
00:51:22,140 --> 00:51:26,848
<font color="#CCCCCC">API is because there is</font><font color="#E5E5E5"> no</font><font color="#CCCCCC"> we being</font>

1235
00:51:24,660 --> 00:51:30,540
created there<font color="#CCCCCC"> is</font><font color="#E5E5E5"> no heavy network stack</font>

1236
00:51:26,849 --> 00:51:31,980
<font color="#CCCCCC">there is no massive interaction</font><font color="#E5E5E5"> with the</font>

1237
00:51:30,540 --> 00:51:36,420
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system as you could see in a</font>

1238
00:51:31,980 --> 00:51:38,670
benign file we see an average<font color="#E5E5E5"> deviation</font>

1239
00:51:36,420 --> 00:51:41,150
of about<font color="#CCCCCC"> 15 percent</font><font color="#E5E5E5"> so if you look at</font>

1240
00:51:38,670 --> 00:51:43,770
those indicators presented and

1241
00:51:41,150 --> 00:51:46,530
<font color="#E5E5E5">obstructing by 15 percent</font><font color="#CCCCCC"> of their</font><font color="#E5E5E5"> total</font>

1242
00:51:43,770 --> 00:51:48,839
value we can have indicators that<font color="#E5E5E5"> are</font>

1243
00:51:46,530 --> 00:51:52,549
<font color="#E5E5E5">able to detect the same malware compiled</font>

1244
00:51:48,839 --> 00:51:56,400
with different optimization settings

1245
00:51:52,549 --> 00:51:58,950
<font color="#E5E5E5">finally yes this project is supposed to</font>

1246
00:51:56,400 --> 00:52:01,500
be<font color="#E5E5E5"> productive it's supposed to be</font>

1247
00:51:58,950 --> 00:52:03,509
integrated with<font color="#CCCCCC"> the malware information</font>

1248
00:52:01,500 --> 00:52:06,000
sharing platform to<font color="#CCCCCC"> serve</font><font color="#E5E5E5"> Luxemburg this</font>

1249
00:52:03,510 --> 00:52:08,790
is an ongoing approach as I recently

1250
00:52:06,000 --> 00:52:12,359
started<font color="#E5E5E5"> a new job the approach is going</font>

1251
00:52:08,790 --> 00:52:15,170
very slow right now<font color="#CCCCCC"> but in the end what</font>

1252
00:52:12,359 --> 00:52:17,819
we what we<font color="#E5E5E5"> want to achieve is to</font>

1253
00:52:15,170 --> 00:52:20,160
<font color="#E5E5E5">generate threat detection metrics that</font>

1254
00:52:17,819 --> 00:52:22,650
are cheap<font color="#CCCCCC"> to produce</font><font color="#E5E5E5"> we won the short</font>

1255
00:52:20,160 --> 00:52:25,020
parsing time we want a simple parser we

1256
00:52:22,650 --> 00:52:27,540
want the<font color="#E5E5E5"> matrix to be easy</font><font color="#CCCCCC"> to deploy and</font>

1257
00:52:25,020 --> 00:52:29,130
<font color="#CCCCCC">we want the cost of the</font><font color="#E5E5E5"> matrix to</font><font color="#CCCCCC"> be the</font>

1258
00:52:27,540 --> 00:52:30,569
minimum<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> have commercial</font>

1259
00:52:29,130 --> 00:52:34,230
tools to extract<font color="#E5E5E5"> them but only open</font>

1260
00:52:30,569 --> 00:52:36,150
source and simple setups we want<font color="#E5E5E5"> the</font>

1261
00:52:34,230 --> 00:52:38,609
metrics<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> scalable so we want the</font>

1262
00:52:36,150 --> 00:52:41,190
features to be easy<font color="#E5E5E5"> to</font><font color="#CCCCCC"> extract and to to</font>

1263
00:52:38,609 --> 00:52:43,170
be easily<font color="#CCCCCC"> adapted to new challenges</font><font color="#E5E5E5"> in</font>

1264
00:52:41,190 --> 00:52:45,000
malware we want them to<font color="#E5E5E5"> be resilient</font>

1265
00:52:43,170 --> 00:52:47,400
<font color="#E5E5E5">against doodle changes in the</font><font color="#CCCCCC"> binary as</font>

1266
00:52:45,000 --> 00:52:50,400
for<font color="#CCCCCC"> example would</font><font color="#E5E5E5"> be changing compiler</font>

1267
00:52:47,400 --> 00:52:52,319
settings<font color="#E5E5E5"> and we want them</font><font color="#CCCCCC"> to be reliable</font>

1268
00:52:50,400 --> 00:52:54,359
<font color="#E5E5E5">which is currently the</font><font color="#CCCCCC"> biggest project</font>

1269
00:52:52,319 --> 00:52:59,009
the<font color="#E5E5E5"> biggest problem as mentioned before</font>

1270
00:52:54,359 --> 00:53:02,520
<font color="#CCCCCC">rod re2 is mmm</font><font color="#E5E5E5"> well get getting along</font>

1271
00:52:59,010 --> 00:53:04,619
<font color="#CCCCCC">let's put it like that</font><font color="#E5E5E5"> the parser</font><font color="#CCCCCC"> that I</font>

1272
00:53:02,520 --> 00:53:07,710
wrote<font color="#E5E5E5"> on top of it was written by me and</font>

1273
00:53:04,619 --> 00:53:09,550
<font color="#CCCCCC">not by a software developer so</font><font color="#E5E5E5"> Russ is</font>

1274
00:53:07,710 --> 00:53:12,490
<font color="#CCCCCC">still trying to fix bugs in there</font>

1275
00:53:09,550 --> 00:53:13,990
and as soon<font color="#E5E5E5"> as we have the whole parsing</font>

1276
00:53:12,490 --> 00:53:16,149
system<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> level where</font><font color="#E5E5E5"> you can say we</font>

1277
00:53:13,990 --> 00:53:20,370
have<font color="#E5E5E5"> reliable</font><font color="#CCCCCC"> data we can finally start</font>

1278
00:53:16,150 --> 00:53:23,140
<font color="#E5E5E5">extracting meaningful</font><font color="#CCCCCC"> detection metrics</font>

1279
00:53:20,370 --> 00:53:26,650
because<font color="#E5E5E5"> we really don't like the</font>

1280
00:53:23,140 --> 00:53:28,690
classical threat detection<font color="#E5E5E5"> all right</font>

1281
00:53:26,650 --> 00:53:32,910
<font color="#E5E5E5">that was about my talk</font><font color="#CCCCCC"> thank you very</font>

1282
00:53:28,690 --> 00:53:32,910
<font color="#E5E5E5">much for</font><font color="#CCCCCC"> your patience and your</font>

1283
00:53:33,000 --> 00:53:37,480
<font color="#E5E5E5">willingness</font><font color="#CCCCCC"> to look at a lot of</font><font color="#E5E5E5"> data</font>

1284
00:53:35,290 --> 00:53:39,370
with me if you have any questions I'm

1285
00:53:37,480 --> 00:53:40,300
happy to answer<font color="#CCCCCC"> them now</font><font color="#E5E5E5"> otherwise thank</font>

1286
00:53:39,370 --> 00:53:43,140
you very much for<font color="#E5E5E5"> your attention</font><font color="#CCCCCC"> and</font>

1287
00:53:40,300 --> 00:53:51,610
have<font color="#CCCCCC"> a happy break thank you</font>

1288
00:53:43,140 --> 00:53:51,609
[Applause]

1289
00:53:56,600 --> 00:53:58,660
you

