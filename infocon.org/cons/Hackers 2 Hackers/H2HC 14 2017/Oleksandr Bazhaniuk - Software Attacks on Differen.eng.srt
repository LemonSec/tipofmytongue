1
00:00:00,030 --> 00:00:04,770
<font color="#CCCCCC">miss Alex</font><font color="#E5E5E5"> and I'm here to present</font>

2
00:00:02,460 --> 00:00:08,400
software<font color="#CCCCCC"> tax</font><font color="#E5E5E5"> on different type of system</font>

3
00:00:04,770 --> 00:00:10,559
<font color="#CCCCCC">former x86 and arm</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> I will start I</font>

4
00:00:08,400 --> 00:00:14,660
want<font color="#E5E5E5"> to say thank</font><font color="#CCCCCC"> you organizers</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> HTC</font>

5
00:00:10,559 --> 00:00:18,390
to having me here<font color="#E5E5E5"> it my first time here</font>

6
00:00:14,660 --> 00:00:21,689
<font color="#CCCCCC">to some</font><font color="#E5E5E5"> of you who may track what kind</font>

7
00:00:18,390 --> 00:00:23,789
of research<font color="#CCCCCC"> we published last years you</font>

8
00:00:21,689 --> 00:00:26,970
may<font color="#E5E5E5"> notice that all of them most most</font>

9
00:00:23,789 --> 00:00:30,480
all of<font color="#E5E5E5"> them was x86 research related to</font>

10
00:00:26,970 --> 00:00:34,860
<font color="#CCCCCC">the virtualization or from any 36</font><font color="#E5E5E5"> and</font>

11
00:00:30,480 --> 00:00:38,430
then this year<font color="#E5E5E5"> we published</font><font color="#CCCCCC"> first time</font>

12
00:00:34,860 --> 00:00:40,079
some research<font color="#CCCCCC"> an arm and hypervisor</font>

13
00:00:38,430 --> 00:00:43,769
exploitation<font color="#E5E5E5"> for the arm for some</font>

14
00:00:40,079 --> 00:00:46,500
specific<font color="#CCCCCC"> associates and then there was</font>

15
00:00:43,770 --> 00:00:48,809
some before we will make that research

16
00:00:46,500 --> 00:00:51,379
we were thinking<font color="#E5E5E5"> about how we can</font><font color="#CCCCCC"> apply</font>

17
00:00:48,809 --> 00:00:54,480
vectors which we<font color="#E5E5E5"> know from</font><font color="#CCCCCC"> Exedy six</font>

18
00:00:51,379 --> 00:00:57,120
systems to our system<font color="#E5E5E5"> because we read</font>

19
00:00:54,480 --> 00:00:59,370
about different<font color="#E5E5E5"> attacks and we see</font>

20
00:00:57,120 --> 00:01:01,320
<font color="#CCCCCC">similarities so that's</font><font color="#E5E5E5"> supposed to be</font><font color="#CCCCCC"> a</font>

21
00:00:59,370 --> 00:01:02,820
<font color="#E5E5E5">multiple different attacks which can be</font>

22
00:01:01,320 --> 00:01:05,850
applicable for<font color="#E5E5E5"> different architectures</font>

23
00:01:02,820 --> 00:01:07,380
<font color="#E5E5E5">and that was the motivation for this</font>

24
00:01:05,850 --> 00:01:10,158
presentation basically<font color="#CCCCCC"> after we</font>

25
00:01:07,380 --> 00:01:12,960
published<font color="#E5E5E5"> a bunch of research for x86</font>

26
00:01:10,159 --> 00:01:16,110
<font color="#CCCCCC">firmer attacks</font><font color="#E5E5E5"> then we'll be making</font>

27
00:01:12,960 --> 00:01:18,689
<font color="#E5E5E5">investigation for</font><font color="#CCCCCC"> arm from and</font>

28
00:01:16,110 --> 00:01:21,030
hypervisor attacks<font color="#E5E5E5"> we was thinking about</font>

29
00:01:18,689 --> 00:01:24,179
let's combine<font color="#E5E5E5"> this the one presentation</font>

30
00:01:21,030 --> 00:01:25,860
<font color="#E5E5E5">and see like where is</font><font color="#CCCCCC"> there similar</font>

31
00:01:24,180 --> 00:01:27,840
methods what what kind<font color="#CCCCCC"> of vector</font>

32
00:01:25,860 --> 00:01:30,720
<font color="#E5E5E5">applicable just</font><font color="#CCCCCC"> week city</font><font color="#E5E5E5"> six what kind</font>

33
00:01:27,840 --> 00:01:32,729
<font color="#E5E5E5">of method applicable</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> for arm and so</font>

34
00:01:30,720 --> 00:01:36,658
on so during<font color="#E5E5E5"> the presentation I will</font>

35
00:01:32,729 --> 00:01:38,490
<font color="#E5E5E5">switch from x86 to</font><font color="#CCCCCC"> our multiple times it</font>

36
00:01:36,659 --> 00:01:40,770
will<font color="#E5E5E5"> be confusion I will try</font><font color="#CCCCCC"> to make it</font>

37
00:01:38,490 --> 00:01:43,949
less<font color="#E5E5E5"> confusion but basically the idea</font><font color="#CCCCCC"> is</font>

38
00:01:40,770 --> 00:01:46,170
it<font color="#CCCCCC"> will be like blocks of x86</font><font color="#E5E5E5"> and then</font>

39
00:01:43,950 --> 00:01:48,479
blocks for arm<font color="#E5E5E5"> and then back</font><font color="#CCCCCC"> and forth</font>

40
00:01:46,170 --> 00:01:51,810
<font color="#E5E5E5">multiple times depends on the area which</font>

41
00:01:48,479 --> 00:01:54,630
I will explain<font color="#E5E5E5"> so I will start</font><font color="#CCCCCC"> just with</font>

42
00:01:51,810 --> 00:01:56,909
introduction<font color="#E5E5E5"> really brief result details</font>

43
00:01:54,630 --> 00:02:00,179
just<font color="#E5E5E5"> to making sure</font><font color="#CCCCCC"> that we are in the</font>

44
00:01:56,909 --> 00:02:02,130
same page of the terminology<font color="#CCCCCC"> then I will</font>

45
00:02:00,180 --> 00:02:04,680
go<font color="#E5E5E5"> through some of the details</font><font color="#CCCCCC"> about</font>

46
00:02:02,130 --> 00:02:06,719
hardware configuration<font color="#CCCCCC"> and how it done</font>

47
00:02:04,680 --> 00:02:09,030
in different platform<font color="#CCCCCC"> and then it will</font>

48
00:02:06,719 --> 00:02:11,008
be a<font color="#E5E5E5"> bit about reverse engineering</font><font color="#CCCCCC"> and</font>

49
00:02:09,030 --> 00:02:13,300
that part was<font color="#CCCCCC"> interesting specific</font>

50
00:02:11,008 --> 00:02:14,859
because before they have the

51
00:02:13,300 --> 00:02:18,760
research in arm<font color="#E5E5E5"> it didn't have</font>

52
00:02:14,860 --> 00:02:21,940
experience<font color="#E5E5E5"> with arm at all and this</font><font color="#CCCCCC"> is</font>

53
00:02:18,760 --> 00:02:24,429
sort of will give you the idea<font color="#CCCCCC"> how to</font>

54
00:02:21,940 --> 00:02:27,100
start investigating<font color="#E5E5E5"> new system which you</font>

55
00:02:24,430 --> 00:02:29,410
never have investigated previously some

56
00:02:27,100 --> 00:02:31,329
<font color="#CCCCCC">new york attack sure where to start what</font>

57
00:02:29,410 --> 00:02:34,570
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> matter</font><font color="#E5E5E5"> to use and so</font><font color="#CCCCCC"> on so may</font>

58
00:02:31,330 --> 00:02:36,250
<font color="#CCCCCC">may be</font><font color="#E5E5E5"> useful then attack vectors again</font>

59
00:02:34,570 --> 00:02:39,489
which one or click<font color="#E5E5E5"> above a different</font>

60
00:02:36,250 --> 00:02:43,090
system<font color="#E5E5E5"> with some examples so it will be</font>

61
00:02:39,490 --> 00:02:45,490
example for execs bypass<font color="#CCCCCC"> windows 10</font><font color="#E5E5E5"> vs m</font>

62
00:02:43,090 --> 00:02:48,190
technology using some<font color="#CCCCCC"> of the hardware</font>

63
00:02:45,490 --> 00:02:49,930
interfaces<font color="#E5E5E5"> and forearm the the the</font>

64
00:02:48,190 --> 00:02:52,359
result which is to be published<font color="#CCCCCC"> in</font>

65
00:02:49,930 --> 00:02:58,620
<font color="#CCCCCC">blackhat about exploitation hypervisor</font>

66
00:02:52,360 --> 00:03:01,810
in some specific<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> see so x86</font>

67
00:02:58,620 --> 00:03:04,770
<font color="#E5E5E5">typical system we have user mode we have</font>

68
00:03:01,810 --> 00:03:07,300
<font color="#CCCCCC">keno</font><font color="#E5E5E5"> and then there is a hypervisor</font>

69
00:03:04,770 --> 00:03:09,390
important point is<font color="#E5E5E5"> that in x86</font>

70
00:03:07,300 --> 00:03:13,180
hypervisor<font color="#E5E5E5"> is context</font><font color="#CCCCCC"> switch technology</font>

71
00:03:09,390 --> 00:03:15,640
<font color="#E5E5E5">meaning that inside the hypervisor it</font>

72
00:03:13,180 --> 00:03:18,070
also has the privileges level and every

73
00:03:15,640 --> 00:03:20,350
time when<font color="#CCCCCC"> you go in</font><font color="#E5E5E5"> to the guest and</font>

74
00:03:18,070 --> 00:03:23,440
coming back to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> hypervisor you switch</font>

75
00:03:20,350 --> 00:03:26,260
in the context of entire CPU and every

76
00:03:23,440 --> 00:03:28,770
gas has the<font color="#E5E5E5"> structure which is contained</font>

77
00:03:26,260 --> 00:03:32,500
all<font color="#E5E5E5"> the necessary data to date switch</font>

78
00:03:28,770 --> 00:03:34,360
<font color="#E5E5E5">why it is important because this allow</font>

79
00:03:32,500 --> 00:03:36,940
much more flexibility<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the hypervisor</font>

80
00:03:34,360 --> 00:03:38,980
technology<font color="#CCCCCC"> allowing</font><font color="#E5E5E5"> the software use</font>

81
00:03:36,940 --> 00:03:41,950
hyper visor for many different purposes

82
00:03:38,980 --> 00:03:45,130
<font color="#CCCCCC">pepper</font><font color="#E5E5E5"> visor privilege level or</font>

83
00:03:41,950 --> 00:03:48,399
technology so then we have the SMM and

84
00:03:45,130 --> 00:03:50,019
<font color="#E5E5E5">bios</font><font color="#CCCCCC"> come SMM is basically</font><font color="#E5E5E5"> a system</font>

85
00:03:48,400 --> 00:03:52,810
management mode is and the most

86
00:03:50,020 --> 00:03:55,330
<font color="#E5E5E5">privileged code in the system which is</font>

87
00:03:52,810 --> 00:03:59,020
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> runtime part of the bias so</font><font color="#CCCCCC"> in</font>

88
00:03:55,330 --> 00:04:01,660
x86 system the bias has<font color="#CCCCCC"> to part their</font>

89
00:03:59,020 --> 00:04:04,600
boot the boot time part and<font color="#E5E5E5"> runtime part</font>

90
00:04:01,660 --> 00:04:07,299
boot time part is basically the code

91
00:04:04,600 --> 00:04:10,420
which is<font color="#CCCCCC"> running really beginning after</font>

92
00:04:07,300 --> 00:04:12,220
<font color="#CCCCCC">the system is on and the runtime part of</font>

93
00:04:10,420 --> 00:04:14,530
the bias is<font color="#CCCCCC"> the part which is</font><font color="#E5E5E5"> basically</font>

94
00:04:12,220 --> 00:04:16,870
supporting some functionality during the

95
00:04:14,530 --> 00:04:19,570
runtime<font color="#E5E5E5"> if there is any issue with the</font>

96
00:04:16,870 --> 00:04:22,240
<font color="#CCCCCC">system it's supposed to go</font><font color="#E5E5E5"> and drop even</font>

97
00:04:19,570 --> 00:04:25,659
<font color="#E5E5E5">to the SMM and then</font><font color="#CCCCCC"> SRAM should handle</font>

98
00:04:22,240 --> 00:04:27,900
isms<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> because the</font><font color="#CCCCCC"> cpu peripheral</font>

99
00:04:25,660 --> 00:04:27,900
and

100
00:04:28,870 --> 00:04:36,070
<font color="#CCCCCC">CPU peripheral</font><font color="#E5E5E5"> PCIe</font><font color="#CCCCCC"> bosses</font><font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> in</font>

101
00:04:34,120 --> 00:04:38,380
<font color="#E5E5E5">this presentation that will be attack</font>

102
00:04:36,070 --> 00:04:42,640
related to the<font color="#E5E5E5"> hypervisor and attack</font>

103
00:04:38,380 --> 00:04:44,860
related to the SMM and a bias then I

104
00:04:42,640 --> 00:04:46,840
already<font color="#E5E5E5"> mentioned there is a boot time</font>

105
00:04:44,860 --> 00:04:49,270
of the BIOS<font color="#E5E5E5"> well what this mean is so</font>

106
00:04:46,840 --> 00:04:51,310
when the system<font color="#CCCCCC"> is powering</font><font color="#E5E5E5"> on the first</font>

107
00:04:49,270 --> 00:04:54,130
<font color="#E5E5E5">instruction which is fetching</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> reset</font>

108
00:04:51,310 --> 00:04:56,500
vector and<font color="#CCCCCC"> the way how does</font><font color="#E5E5E5"> it fetch</font>

109
00:04:54,130 --> 00:04:58,180
<font color="#E5E5E5">work is pretty interesting because at</font>

110
00:04:56,500 --> 00:05:00,730
the moment when<font color="#E5E5E5"> this instruction</font><font color="#CCCCCC"> is</font>

111
00:04:58,180 --> 00:05:02,410
<font color="#E5E5E5">evasion there is no memory no caches</font>

112
00:05:00,730 --> 00:05:04,419
nothing<font color="#E5E5E5"> but you need to somehow</font>

113
00:05:02,410 --> 00:05:08,230
executive<font color="#CCCCCC"> first instruction so what</font>

114
00:05:04,419 --> 00:05:10,690
<font color="#CCCCCC">happen</font><font color="#E5E5E5"> is that when the</font><font color="#CCCCCC"> vendee cpu</font><font color="#E5E5E5"> tried</font>

115
00:05:08,230 --> 00:05:12,970
<font color="#E5E5E5">to fetch the the there is a</font><font color="#CCCCCC"> tractor is a</font>

116
00:05:10,690 --> 00:05:16,419
tractor always in a constant address and

117
00:05:12,970 --> 00:05:17,940
then that that transaction go into the

118
00:05:16,419 --> 00:05:20,590
memory<font color="#CCCCCC"> controller</font><font color="#E5E5E5"> and memory controller</font>

119
00:05:17,940 --> 00:05:22,630
<font color="#E5E5E5">see the undressing and knew</font><font color="#CCCCCC"> that this</font><font color="#E5E5E5"> is</font>

120
00:05:20,590 --> 00:05:25,659
<font color="#CCCCCC">andres of the rosette vector and it's</font>

121
00:05:22,630 --> 00:05:27,370
<font color="#CCCCCC">send transaction to the PCH PCH receive</font>

122
00:05:25,660 --> 00:05:29,710
the transaction and see<font color="#CCCCCC"> okay this is the</font>

123
00:05:27,370 --> 00:05:32,080
there<font color="#E5E5E5"> is that vector and it redirected</font>

124
00:05:29,710 --> 00:05:34,150
<font color="#CCCCCC">to the spy controller</font><font color="#E5E5E5"> that's the way how</font>

125
00:05:32,080 --> 00:05:36,550
does<font color="#CCCCCC"> there is a tractor work</font>

126
00:05:34,150 --> 00:05:38,440
when you when you have the<font color="#E5E5E5"> instruction</font>

127
00:05:36,550 --> 00:05:40,390
which is<font color="#E5E5E5"> executing even without memory</font>

128
00:05:38,440 --> 00:05:43,050
without caches without<font color="#CCCCCC"> match then what</font>

129
00:05:40,390 --> 00:05:46,810
<font color="#CCCCCC">happen next</font><font color="#E5E5E5"> there is</font><font color="#CCCCCC"> a sec phase or</font>

130
00:05:43,050 --> 00:05:48,970
first sort of first code which is

131
00:05:46,810 --> 00:05:51,070
basically<font color="#CCCCCC"> run in the system which</font><font color="#E5E5E5"> is</font>

132
00:05:48,970 --> 00:05:53,620
makes some basic initialization for

133
00:05:51,070 --> 00:05:57,909
example in<font color="#E5E5E5"> insulation of the TPM</font>

134
00:05:53,620 --> 00:06:01,120
initialization of cash making cash using

135
00:05:57,910 --> 00:06:05,800
as memory copy some<font color="#CCCCCC"> sum as a part of the</font>

136
00:06:01,120 --> 00:06:08,080
boot part of the<font color="#CCCCCC"> buyers part of the code</font>

137
00:06:05,800 --> 00:06:10,419
to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cache and start executing the</font>

138
00:06:08,080 --> 00:06:12,909
cache and then<font color="#CCCCCC"> it's redirection to</font><font color="#E5E5E5"> P I</font>

139
00:06:10,419 --> 00:06:16,000
face<font color="#CCCCCC"> VI faces bicycle pre-installation</font>

140
00:06:12,910 --> 00:06:20,169
face<font color="#E5E5E5"> this face</font><font color="#CCCCCC"> is responsible for and</font>

141
00:06:16,000 --> 00:06:22,570
it's always<font color="#CCCCCC"> necessary</font><font color="#E5E5E5"> Hardware tomb to</font>

142
00:06:20,169 --> 00:06:25,270
set that to set the proper<font color="#CCCCCC"> configuration</font>

143
00:06:22,570 --> 00:06:28,120
of the security features<font color="#CCCCCC"> and all of the</font>

144
00:06:25,270 --> 00:06:31,090
necessary features which is supposed to

145
00:06:28,120 --> 00:06:34,090
be<font color="#CCCCCC"> initialized for for system Putin</font>

146
00:06:31,090 --> 00:06:35,830
<font color="#E5E5E5">correctly so then it go into</font><font color="#CCCCCC"> the Dixie</font>

147
00:06:34,090 --> 00:06:39,390
<font color="#CCCCCC">face Dixie</font><font color="#E5E5E5"> face</font><font color="#CCCCCC"> is one of the</font><font color="#E5E5E5"> biggest</font>

148
00:06:35,830 --> 00:06:41,580
face in<font color="#CCCCCC"> this 86</font>

149
00:06:39,390 --> 00:06:43,469
during the boot time<font color="#E5E5E5"> that face is</font>

150
00:06:41,580 --> 00:06:45,570
responsible for<font color="#E5E5E5"> initializing all of the</font>

151
00:06:43,470 --> 00:06:48,030
<font color="#E5E5E5">protocols</font><font color="#CCCCCC"> all of the necessary</font>

152
00:06:45,570 --> 00:06:50,820
components<font color="#E5E5E5"> to support operation system</font>

153
00:06:48,030 --> 00:06:52,590
services because<font color="#CCCCCC"> buyers provided some of</font>

154
00:06:50,820 --> 00:06:53,969
<font color="#CCCCCC">the</font><font color="#E5E5E5"> services to the person system which</font>

155
00:06:52,590 --> 00:06:56,760
is basically<font color="#CCCCCC"> an</font><font color="#E5E5E5"> installation in this</font>

156
00:06:53,970 --> 00:06:59,700
<font color="#E5E5E5">phase and then I'll go into the</font><font color="#CCCCCC"> goal</font><font color="#E5E5E5"> of</font>

157
00:06:56,760 --> 00:07:01,500
going<font color="#E5E5E5"> and calling them loader of the</font>

158
00:06:59,700 --> 00:07:03,719
operation system<font color="#CCCCCC"> and then the</font><font color="#E5E5E5"> purchase</font>

159
00:07:01,500 --> 00:07:07,080
<font color="#E5E5E5">system is large and</font><font color="#CCCCCC"> the interesting part</font>

160
00:07:03,720 --> 00:07:09,330
<font color="#E5E5E5">in the before the</font><font color="#CCCCCC"> after</font><font color="#E5E5E5"> Dixon before</font>

161
00:07:07,080 --> 00:07:11,969
person system is exit<font color="#CCCCCC"> with services that</font>

162
00:07:09,330 --> 00:07:14,370
<font color="#CCCCCC">special</font><font color="#E5E5E5"> event which is indicating that</font>

163
00:07:11,970 --> 00:07:16,620
the boot part of the bias is done and

164
00:07:14,370 --> 00:07:19,380
now<font color="#CCCCCC"> the runtime the buyer is supposed to</font>

165
00:07:16,620 --> 00:07:22,680
be use it and and boot boot part of the

166
00:07:19,380 --> 00:07:25,290
bias is not<font color="#E5E5E5"> available anymore like boot</font>

167
00:07:22,680 --> 00:07:27,630
variables not<font color="#CCCCCC"> available boot service is</font>

168
00:07:25,290 --> 00:07:29,670
<font color="#E5E5E5">not</font><font color="#CCCCCC"> available and so on</font><font color="#E5E5E5"> that sort of</font>

169
00:07:27,630 --> 00:07:31,890
speech man all of<font color="#CCCCCC"> the security</font>

170
00:07:29,670 --> 00:07:35,100
<font color="#CCCCCC">configuration should be set but by the</font>

171
00:07:31,890 --> 00:07:38,520
before<font color="#CCCCCC"> you the BIOS called exit put</font>

172
00:07:35,100 --> 00:07:40,320
services<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> army it's a little bit</font>

173
00:07:38,520 --> 00:07:42,090
<font color="#E5E5E5">different in in perspective of the</font>

174
00:07:40,320 --> 00:07:44,250
privileges level and in perspective<font color="#E5E5E5"> of</font>

175
00:07:42,090 --> 00:07:47,729
the boot flow so in perspective the

176
00:07:44,250 --> 00:07:50,040
privileges level we have classical user

177
00:07:47,730 --> 00:07:51,420
modern<font color="#CCCCCC"> colonel but then when we</font><font color="#E5E5E5"> come to</font>

178
00:07:50,040 --> 00:07:53,670
the hypervisor there is<font color="#E5E5E5"> already</font>

179
00:07:51,420 --> 00:07:56,160
different because hypervisor in arm

180
00:07:53,670 --> 00:07:58,230
implemented as as exception level or

181
00:07:56,160 --> 00:08:01,230
privilege level<font color="#E5E5E5"> so it's not a context</font>

182
00:07:58,230 --> 00:08:03,390
switch technology<font color="#E5E5E5"> it doesn't have inside</font>

183
00:08:01,230 --> 00:08:06,000
the hypervisor<font color="#E5E5E5"> any other privileges</font>

184
00:08:03,390 --> 00:08:07,950
level<font color="#CCCCCC"> just a privilege level</font><font color="#E5E5E5"> and it has</font>

185
00:08:06,000 --> 00:08:10,290
the instruction which<font color="#CCCCCC"> is triggering</font><font color="#E5E5E5"> the</font>

186
00:08:07,950 --> 00:08:14,789
code from<font color="#CCCCCC"> the hypervisor so</font><font color="#E5E5E5"> meaning</font><font color="#CCCCCC"> that</font>

187
00:08:10,290 --> 00:08:17,900
hypervisor is<font color="#E5E5E5"> less flexible but in other</font>

188
00:08:14,790 --> 00:08:20,520
hand it can be more is related and

189
00:08:17,900 --> 00:08:22,070
configure<font color="#CCCCCC"> it better</font><font color="#E5E5E5"> in security purposes</font>

190
00:08:20,520 --> 00:08:24,930
<font color="#E5E5E5">because you don't need to care about</font>

191
00:08:22,070 --> 00:08:27,599
<font color="#E5E5E5">about that much stuff</font><font color="#CCCCCC"> than in the 66</font>

192
00:08:24,930 --> 00:08:29,070
<font color="#E5E5E5">there is no VM CS national</font><font color="#CCCCCC"> reaches rely</font>

193
00:08:27,600 --> 00:08:32,430
<font color="#CCCCCC">on context switch</font><font color="#E5E5E5"> there</font><font color="#CCCCCC"> is just a</font>

194
00:08:29,070 --> 00:08:34,349
privilege level but as you as you

195
00:08:32,429 --> 00:08:36,929
remember in<font color="#E5E5E5"> exodus if there was</font><font color="#CCCCCC"> SMM</font>

196
00:08:34,349 --> 00:08:38,820
<font color="#CCCCCC">which was as a privilege level in arm</font>

197
00:08:36,929 --> 00:08:40,679
there<font color="#E5E5E5"> is at resident and trans</font><font color="#CCCCCC"> long has</font>

198
00:08:38,820 --> 00:08:43,140
a bunch of privileges level inside so

199
00:08:40,679 --> 00:08:47,160
basically there is<font color="#CCCCCC"> a trust list which is</font>

200
00:08:43,140 --> 00:08:50,069
running in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> l0 exception level</font><font color="#CCCCCC"> 0 for</font>

201
00:08:47,160 --> 00:08:51,990
further inside<font color="#CCCCCC"> the</font><font color="#E5E5E5"> secure world inside</font>

202
00:08:50,070 --> 00:08:55,140
the transient world<font color="#E5E5E5"> there is</font>

203
00:08:51,990 --> 00:08:57,029
<font color="#E5E5E5">the secure</font><font color="#CCCCCC"> canal which is</font><font color="#E5E5E5"> running inside</font>

204
00:08:55,140 --> 00:09:00,360
<font color="#E5E5E5">the trans old world and there is</font><font color="#CCCCCC"> secured</font>

205
00:08:57,029 --> 00:09:03,209
monitor<font color="#E5E5E5"> so basically in the</font><font color="#CCCCCC"> perspective</font>

206
00:09:00,360 --> 00:09:06,630
of flexibility they secure world much

207
00:09:03,209 --> 00:09:11,130
more<font color="#E5E5E5"> flexible and has much much better</font>

208
00:09:06,630 --> 00:09:14,100
capabilities then<font color="#CCCCCC"> SMM and</font><font color="#E5E5E5"> how does</font><font color="#CCCCCC"> this</font>

209
00:09:11,130 --> 00:09:16,560
boundaries work<font color="#E5E5E5"> the boundary work works</font>

210
00:09:14,100 --> 00:09:18,899
and<font color="#E5E5E5"> two things</font><font color="#CCCCCC"> is relation boundaries</font>

211
00:09:16,560 --> 00:09:19,500
<font color="#E5E5E5">there is one is</font><font color="#CCCCCC"> memories relation which</font>

212
00:09:18,899 --> 00:09:21,390
is<font color="#CCCCCC"> done</font>

213
00:09:19,500 --> 00:09:23,250
<font color="#CCCCCC">in</font><font color="#E5E5E5"> the memory</font><font color="#CCCCCC"> controller so every time</font>

214
00:09:21,390 --> 00:09:24,779
when transaction going<font color="#E5E5E5"> from the normal</font>

215
00:09:23,250 --> 00:09:27,000
world to secure<font color="#E5E5E5"> world overall from</font>

216
00:09:24,779 --> 00:09:29,250
<font color="#E5E5E5">security</font><font color="#CCCCCC"> secure role</font><font color="#E5E5E5"> it has the bit</font>

217
00:09:27,000 --> 00:09:32,730
<font color="#E5E5E5">source and bit destination and depends</font>

218
00:09:29,250 --> 00:09:34,709
<font color="#E5E5E5">on the the source of the transaction it</font>

219
00:09:32,730 --> 00:09:36,240
go press or<font color="#E5E5E5"> not for</font><font color="#CCCCCC"> example if the</font>

220
00:09:34,709 --> 00:09:37,949
transaction going from normal<font color="#CCCCCC"> mode</font><font color="#E5E5E5"> to</font>

221
00:09:36,240 --> 00:09:41,250
secure<font color="#E5E5E5"> boat the trans actually bill</font>

222
00:09:37,950 --> 00:09:43,860
dropped so and this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the way how</font><font color="#CCCCCC"> does</font>

223
00:09:41,250 --> 00:09:46,470
the isolation and memory level<font color="#CCCCCC"> work for</font>

224
00:09:43,860 --> 00:09:48,330
the for the transient<font color="#E5E5E5"> world for there</font>

225
00:09:46,470 --> 00:09:51,480
and also<font color="#CCCCCC"> there is a card reservation</font>

226
00:09:48,330 --> 00:09:53,550
meaning that the interrupts working in a

227
00:09:51,480 --> 00:09:55,170
way that all<font color="#CCCCCC"> of the interrupts form the</font>

228
00:09:53,550 --> 00:09:57,209
normal world can be delivered<font color="#E5E5E5"> by</font>

229
00:09:55,170 --> 00:09:59,550
specific way<font color="#E5E5E5"> to the secure world there</font>

230
00:09:57,209 --> 00:10:02,040
is no mechanism<font color="#E5E5E5"> how the normal</font><font color="#CCCCCC"> world can</font>

231
00:09:59,550 --> 00:10:05,399
trigger any other code except<font color="#CCCCCC"> their</font>

232
00:10:02,040 --> 00:10:06,260
specific exception vectors<font color="#E5E5E5"> we shall</font>

233
00:10:05,399 --> 00:10:10,170
explain later

234
00:10:06,260 --> 00:10:13,260
so compared to x86<font color="#E5E5E5"> and the difference is</font>

235
00:10:10,170 --> 00:10:16,020
<font color="#CCCCCC">that hypervisor</font><font color="#E5E5E5"> is working as a as a</font>

236
00:10:13,260 --> 00:10:19,020
privilege level and the transient<font color="#E5E5E5"> world</font>

237
00:10:16,020 --> 00:10:22,199
<font color="#E5E5E5">working as entire technology</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> has a</font>

238
00:10:19,020 --> 00:10:26,520
bunch<font color="#E5E5E5"> of privileges level inside so if</font>

239
00:10:22,200 --> 00:10:30,180
we will have<font color="#CCCCCC"> the slides for</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I will</font>

240
00:10:26,520 --> 00:10:33,120
<font color="#E5E5E5">come back to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so now if you don't</font>

241
00:10:30,180 --> 00:10:35,339
talk a bit about<font color="#E5E5E5"> boot flow in in</font><font color="#CCCCCC"> Arma</font>

242
00:10:33,120 --> 00:10:38,310
<font color="#CCCCCC">sources</font><font color="#E5E5E5"> so first of all</font><font color="#CCCCCC"> for our message</font>

243
00:10:35,339 --> 00:10:40,410
<font color="#CCCCCC">caesar</font><font color="#E5E5E5"> is all specific for specific as I</font>

244
00:10:38,310 --> 00:10:44,010
<font color="#E5E5E5">seen so it's not like a standard way</font>

245
00:10:40,410 --> 00:10:46,380
which is always working this way<font color="#CCCCCC"> because</font>

246
00:10:44,010 --> 00:10:51,930
<font color="#E5E5E5">every vendor may implement them own way</font>

247
00:10:46,380 --> 00:10:55,439
to put<font color="#E5E5E5"> the</font><font color="#CCCCCC"> sse because</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> machine it is</font>

248
00:10:51,930 --> 00:10:58,229
<font color="#E5E5E5">more</font><font color="#CCCCCC"> insulated system because you you</font>

249
00:10:55,440 --> 00:11:02,160
<font color="#CCCCCC">have the</font><font color="#E5E5E5"> system is title specific</font>

250
00:10:58,230 --> 00:11:04,380
operation system and there is sort<font color="#E5E5E5"> of</font>

251
00:11:02,160 --> 00:11:07,290
all the devices<font color="#CCCCCC"> ill is</font>

252
00:11:04,380 --> 00:11:09,689
directly<font color="#CCCCCC"> to the to them</font><font color="#E5E5E5"> physical</font><font color="#CCCCCC"> on your</font>

253
00:11:07,290 --> 00:11:11,910
<font color="#E5E5E5">spaces there's less flexibility and</font>

254
00:11:09,690 --> 00:11:14,430
because<font color="#CCCCCC"> of that the booth flow can be</font>

255
00:11:11,910 --> 00:11:16,980
<font color="#CCCCCC">defined by</font><font color="#E5E5E5"> vendor differently and this</font>

256
00:11:14,430 --> 00:11:18,150
is one is for Snapdragon 810<font color="#E5E5E5"> so it can</font>

257
00:11:16,980 --> 00:11:21,570
be different<font color="#CCCCCC"> for some</font><font color="#E5E5E5"> song for example</font>

258
00:11:18,150 --> 00:11:24,959
<font color="#CCCCCC">or</font><font color="#E5E5E5"> for iPhones</font><font color="#CCCCCC"> so everything starts from</font>

259
00:11:21,570 --> 00:11:28,770
<font color="#E5E5E5">air</font><font color="#CCCCCC"> PM</font><font color="#E5E5E5"> there's power management unit so</font>

260
00:11:24,960 --> 00:11:32,310
that<font color="#CCCCCC"> Union basically</font><font color="#E5E5E5"> running even</font><font color="#CCCCCC"> before</font>

261
00:11:28,770 --> 00:11:34,530
the main CPU starts so then the<font color="#CCCCCC"> RPM</font><font color="#E5E5E5"> is</font>

262
00:11:32,310 --> 00:11:37,260
initializing<font color="#E5E5E5"> the main CPU main</font>

263
00:11:34,530 --> 00:11:40,020
application CPU and triggering<font color="#E5E5E5"> the code</font>

264
00:11:37,260 --> 00:11:43,590
from the<font color="#E5E5E5"> wrong part of them of the main</font>

265
00:11:40,020 --> 00:11:47,970
CPU<font color="#E5E5E5"> which is basically and then the</font>

266
00:11:43,590 --> 00:11:49,800
memory into into the CPU or on somewhere

267
00:11:47,970 --> 00:11:51,570
so it's not accessible for<font color="#E5E5E5"> software at</font>

268
00:11:49,800 --> 00:11:53,550
all<font color="#E5E5E5"> you cannot read it you cannot dump</font>

269
00:11:51,570 --> 00:11:55,740
it you<font color="#CCCCCC"> cannot verify how does it work</font>

270
00:11:53,550 --> 00:11:58,020
<font color="#CCCCCC">there's just there and it doing some</font>

271
00:11:55,740 --> 00:12:00,630
things<font color="#E5E5E5"> for initialize the hardware and</font>

272
00:11:58,020 --> 00:12:03,390
for<font color="#CCCCCC"> verifying</font><font color="#E5E5E5"> next step of the boot flow</font>

273
00:12:00,630 --> 00:12:06,150
and next step of the boot flow is<font color="#CCCCCC"> SBL</font>

274
00:12:03,390 --> 00:12:08,640
secondary bootloader<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is basically</font>

275
00:12:06,150 --> 00:12:11,310
<font color="#E5E5E5">first part of their code which is</font>

276
00:12:08,640 --> 00:12:15,410
accessible from<font color="#E5E5E5"> the software this is</font>

277
00:12:11,310 --> 00:12:19,949
basically<font color="#CCCCCC"> the code which</font><font color="#E5E5E5"> is making them</font>

278
00:12:15,410 --> 00:12:22,110
in<font color="#E5E5E5"> each initialization of the first</font>

279
00:12:19,950 --> 00:12:25,230
<font color="#E5E5E5">trans</font><font color="#CCCCCC"> and monitor privilege level and</font>

280
00:12:22,110 --> 00:12:27,630
some of the memory<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> so if you</font>

281
00:12:25,230 --> 00:12:30,240
will<font color="#E5E5E5"> see that the left side is just</font>

282
00:12:27,630 --> 00:12:32,730
<font color="#E5E5E5">read-only memory meaning that any</font>

283
00:12:30,240 --> 00:12:34,560
vulnerability in that part will be not

284
00:12:32,730 --> 00:12:37,320
really<font color="#CCCCCC"> easy to</font><font color="#E5E5E5"> fix because that memory</font>

285
00:12:34,560 --> 00:12:40,109
is controlled by vendor and<font color="#CCCCCC"> it's not</font>

286
00:12:37,320 --> 00:12:42,090
<font color="#E5E5E5">accessible for software all any part any</font>

287
00:12:40,110 --> 00:12:44,430
vulnerability in<font color="#E5E5E5"> a readwrite part can be</font>

288
00:12:42,090 --> 00:12:47,280
<font color="#E5E5E5">updatable and when update will be</font>

289
00:12:44,430 --> 00:12:49,829
delivered<font color="#E5E5E5"> them</font><font color="#CCCCCC"> they're a read-only</font>

290
00:12:47,280 --> 00:12:51,420
memory verify readwrite memory and<font color="#CCCCCC"> and</font>

291
00:12:49,830 --> 00:12:53,580
<font color="#CCCCCC">checking the signature readwrite memory</font>

292
00:12:51,420 --> 00:12:54,209
before<font color="#E5E5E5"> it trigger</font><font color="#CCCCCC"> that code in the</font>

293
00:12:53,580 --> 00:12:58,770
readwrite memory

294
00:12:54,210 --> 00:13:01,710
<font color="#E5E5E5">so then</font><font color="#CCCCCC"> SPL you will</font><font color="#E5E5E5"> continue :</font><font color="#CCCCCC"> the</font>

295
00:12:58,770 --> 00:13:03,720
<font color="#E5E5E5">trust on monitor which</font><font color="#CCCCCC"> is responsible</font><font color="#E5E5E5"> to</font>

296
00:13:01,710 --> 00:13:06,150
initialize and and set all<font color="#CCCCCC"> of the</font>

297
00:13:03,720 --> 00:13:07,950
<font color="#E5E5E5">protections</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> trans own so after</font>

298
00:13:06,150 --> 00:13:09,870
this point after<font color="#E5E5E5"> the transient</font>

299
00:13:07,950 --> 00:13:13,140
monitoring<font color="#E5E5E5"> installation kernel and</font>

300
00:13:09,870 --> 00:13:15,690
applications<font color="#E5E5E5"> that</font><font color="#CCCCCC"> razón is locked and</font>

301
00:13:13,140 --> 00:13:18,189
not modifiable<font color="#E5E5E5"> so if there was any</font>

302
00:13:15,690 --> 00:13:20,290
possibility to<font color="#CCCCCC"> create a DMA attack</font>

303
00:13:18,190 --> 00:13:22,870
during the boot time<font color="#CCCCCC"> it's supposed to be</font>

304
00:13:20,290 --> 00:13:25,569
done during the<font color="#E5E5E5"> SPL or</font><font color="#CCCCCC"> transdermal</font>

305
00:13:22,870 --> 00:13:28,750
<font color="#CCCCCC">interface</font><font color="#E5E5E5"> and then after</font><font color="#CCCCCC"> TransAm Colonel</font>

306
00:13:25,570 --> 00:13:30,310
there is<font color="#E5E5E5"> there's</font><font color="#CCCCCC"> low chances that they</font>

307
00:13:28,750 --> 00:13:33,640
secure the configuration will not be

308
00:13:30,310 --> 00:13:35,650
<font color="#CCCCCC">sent so and then this is all done</font><font color="#E5E5E5"> in for</font>

309
00:13:33,640 --> 00:13:37,980
initializing secure water<font color="#CCCCCC"> president and</font>

310
00:13:35,650 --> 00:13:39,970
then<font color="#E5E5E5"> the first chord which is</font><font color="#CCCCCC"> an</font>

311
00:13:37,980 --> 00:13:42,850
<font color="#E5E5E5">untrusted code which is running</font><font color="#CCCCCC"> the</font>

312
00:13:39,970 --> 00:13:44,980
<font color="#E5E5E5">system is the hypervisor</font><font color="#CCCCCC"> so basically</font>

313
00:13:42,850 --> 00:13:47,500
the trans don't<font color="#CCCCCC"> kill the president</font>

314
00:13:44,980 --> 00:13:50,500
monitor<font color="#CCCCCC"> actuators</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> Colonel will</font>

315
00:13:47,500 --> 00:13:51,910
trigger them and the<font color="#E5E5E5"> hypervisor code to</font>

316
00:13:50,500 --> 00:13:53,800
continue the boot flow and then the

317
00:13:51,910 --> 00:13:55,439
hypervisor will initialize<font color="#CCCCCC"> the operation</font>

318
00:13:53,800 --> 00:13:58,390
system<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> on so forth</font>

319
00:13:55,440 --> 00:14:02,320
that's the boot<font color="#E5E5E5"> sequence for their arm</font>

320
00:13:58,390 --> 00:14:05,319
<font color="#E5E5E5">as you can see it's look</font><font color="#CCCCCC"> like they have</font>

321
00:14:02,320 --> 00:14:08,890
<font color="#E5E5E5">more faces than x86 but in reality there</font>

322
00:14:05,320 --> 00:14:10,750
is less faces they are<font color="#E5E5E5"> more straight and</font>

323
00:14:08,890 --> 00:14:12,819
because<font color="#E5E5E5"> they're the platform itself</font>

324
00:14:10,750 --> 00:14:16,990
<font color="#E5E5E5">doesn't need that much initialization</font>

325
00:14:12,820 --> 00:14:19,330
because in answer<font color="#CCCCCC"> C compared to the core</font>

326
00:14:16,990 --> 00:14:21,610
technology there<font color="#E5E5E5"> is a bunch of stuff</font>

327
00:14:19,330 --> 00:14:23,410
which is<font color="#E5E5E5"> constant and you don't need</font><font color="#CCCCCC"> to</font>

328
00:14:21,610 --> 00:14:26,140
configure<font color="#E5E5E5"> them that's why there is</font>

329
00:14:23,410 --> 00:14:28,780
<font color="#E5E5E5">basically I would</font><font color="#CCCCCC"> say two phases</font><font color="#E5E5E5"> one is</font>

330
00:14:26,140 --> 00:14:30,610
read-only<font color="#E5E5E5"> which is some code which is</font>

331
00:14:28,780 --> 00:14:33,220
very fine<font color="#CCCCCC"> I read white part</font><font color="#E5E5E5"> and there is</font>

332
00:14:30,610 --> 00:14:35,260
<font color="#E5E5E5">just couple faces in</font><font color="#CCCCCC"> the readwrite which</font>

333
00:14:33,220 --> 00:14:39,790
is much<font color="#CCCCCC"> much simpler</font><font color="#E5E5E5"> than the x86</font><font color="#CCCCCC"> and I</font>

334
00:14:35,260 --> 00:14:41,290
will have example<font color="#CCCCCC"> Y so anyway we start</font>

335
00:14:39,790 --> 00:14:43,209
talking<font color="#CCCCCC"> about different racket action</font>

336
00:14:41,290 --> 00:14:44,589
<font color="#E5E5E5">there is sort of summary what I was</font>

337
00:14:43,210 --> 00:14:46,480
mentioning from the beginning of the

338
00:14:44,590 --> 00:14:49,810
presentation<font color="#CCCCCC"> so first of</font><font color="#E5E5E5"> all the</font><font color="#CCCCCC"> route</font>

339
00:14:46,480 --> 00:14:53,050
of<font color="#E5E5E5"> trust as I mentioned</font><font color="#CCCCCC"> their route of</font>

340
00:14:49,810 --> 00:14:56,189
<font color="#CCCCCC">trust</font><font color="#E5E5E5"> for arm is prettiest pretty</font>

341
00:14:53,050 --> 00:14:59,170
restricted and rely on the OEM

342
00:14:56,190 --> 00:15:02,080
configuration Orion fuses<font color="#E5E5E5"> so if the OEM</font>

343
00:14:59,170 --> 00:15:04,689
want to lock the phones or any arm

344
00:15:02,080 --> 00:15:07,390
system<font color="#E5E5E5"> they just program the fuses and</font>

345
00:15:04,690 --> 00:15:09,610
then the system will will just<font color="#E5E5E5"> support</font>

346
00:15:07,390 --> 00:15:11,530
the<font color="#CCCCCC"> boot flow from that</font><font color="#E5E5E5"> from their</font>

347
00:15:09,610 --> 00:15:14,440
read-only memory to the<font color="#CCCCCC"> person</font><font color="#E5E5E5"> system</font>

348
00:15:11,530 --> 00:15:17,189
<font color="#CCCCCC">this specific vendor signature so there</font>

349
00:15:14,440 --> 00:15:21,040
is no one can just<font color="#E5E5E5"> put the</font><font color="#CCCCCC"> binary there</font>

350
00:15:17,190 --> 00:15:23,470
during<font color="#E5E5E5"> the boot phone if the vendor is</font>

351
00:15:21,040 --> 00:15:25,930
<font color="#CCCCCC">not locking</font><font color="#E5E5E5"> the phone then meaning that</font>

352
00:15:23,470 --> 00:15:27,730
<font color="#E5E5E5">you can reset the</font><font color="#CCCCCC"> defuses</font><font color="#E5E5E5"> and after some</font>

353
00:15:25,930 --> 00:15:30,670
<font color="#E5E5E5">point you can load your own a person</font>

354
00:15:27,730 --> 00:15:31,930
system root your phone and run test

355
00:15:30,670 --> 00:15:34,420
button which

356
00:15:31,930 --> 00:15:37,359
but that's supposed to<font color="#CCCCCC"> be is supported</font>

357
00:15:34,420 --> 00:15:39,640
by a me<font color="#CCCCCC"> not supported this then there is</font>

358
00:15:37,360 --> 00:15:41,830
one way<font color="#CCCCCC"> to do that is find vulnerability</font>

359
00:15:39,640 --> 00:15:43,600
in trans own<font color="#CCCCCC"> Trussell has accesses to</font>

360
00:15:41,830 --> 00:15:46,330
<font color="#E5E5E5">the fuse you and then you override the</font>

361
00:15:43,600 --> 00:15:48,970
<font color="#E5E5E5">fuses that's the way how does jailbreak</font>

362
00:15:46,330 --> 00:15:53,770
works and unlock your cellphones is

363
00:15:48,970 --> 00:15:55,240
working so 486<font color="#E5E5E5"> a root of trust was more</font>

364
00:15:53,770 --> 00:15:58,420
flexible<font color="#CCCCCC"> because you can</font><font color="#E5E5E5"> learn any</font>

365
00:15:55,240 --> 00:16:00,820
operation system<font color="#E5E5E5"> you can run a bunch a</font>

366
00:15:58,420 --> 00:16:02,589
bunch<font color="#E5E5E5"> of different software and there</font>

367
00:16:00,820 --> 00:16:06,030
was no really<font color="#CCCCCC"> root of traffic except</font>

368
00:16:02,590 --> 00:16:10,060
secure boot but secure boot was sort<font color="#E5E5E5"> of</font>

369
00:16:06,030 --> 00:16:12,670
software<font color="#E5E5E5"> way which is</font><font color="#CCCCCC"> relying on</font>

370
00:16:10,060 --> 00:16:14,979
<font color="#E5E5E5">integrity</font><font color="#CCCCCC"> of the BIOS</font><font color="#E5E5E5"> so the bias was</font>

371
00:16:12,670 --> 00:16:17,500
compromised<font color="#E5E5E5"> and then the you can bypass</font>

372
00:16:14,980 --> 00:16:19,870
secure boot and the rest of the boot

373
00:16:17,500 --> 00:16:22,630
flow<font color="#E5E5E5"> there was a new technology from</font>

374
00:16:19,870 --> 00:16:25,330
<font color="#CCCCCC">Havel</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> a boot guard we just make</font>

375
00:16:22,630 --> 00:16:28,210
it much more badass<font color="#CCCCCC"> on it it is close to</font>

376
00:16:25,330 --> 00:16:30,880
what arm is doing<font color="#E5E5E5"> because the root of</font>

377
00:16:28,210 --> 00:16:34,180
trust<font color="#E5E5E5"> is in a room in</font><font color="#CCCCCC"> our own memory</font>

378
00:16:30,880 --> 00:16:38,890
<font color="#CCCCCC">which is</font><font color="#E5E5E5"> controlled by the platform</font>

379
00:16:34,180 --> 00:16:41,560
<font color="#E5E5E5">vendor meaning Intel and but that</font><font color="#CCCCCC"> money</font>

380
00:16:38,890 --> 00:16:42,850
required that<font color="#E5E5E5"> om who is using the</font>

381
00:16:41,560 --> 00:16:44,859
technology<font color="#E5E5E5"> is supposed</font><font color="#CCCCCC"> to use this</font>

382
00:16:42,850 --> 00:16:46,060
technology correctly<font color="#E5E5E5"> meaning</font><font color="#CCCCCC"> that they</font>

383
00:16:44,860 --> 00:16:48,370
need to<font color="#E5E5E5"> program</font>

384
00:16:46,060 --> 00:16:50,079
<font color="#E5E5E5">fusers need to log the technology</font><font color="#CCCCCC"> if</font>

385
00:16:48,370 --> 00:16:52,180
<font color="#E5E5E5">there is just enable technology and not</font>

386
00:16:50,080 --> 00:16:54,490
<font color="#CCCCCC">lock-in the technology or enabling it</font>

387
00:16:52,180 --> 00:16:57,790
not<font color="#E5E5E5"> properly then it is</font><font color="#CCCCCC"> definitely an</font>

388
00:16:54,490 --> 00:17:02,080
issue and can be used to bypass them the

389
00:16:57,790 --> 00:17:04,750
entire boot flow and compromise<font color="#E5E5E5"> the root</font>

390
00:17:02,080 --> 00:17:06,430
of<font color="#CCCCCC"> trust and the process of the boot</font><font color="#E5E5E5"> and</font>

391
00:17:04,750 --> 00:17:12,579
like all<font color="#E5E5E5"> of the technology which is</font>

392
00:17:06,430 --> 00:17:15,910
<font color="#CCCCCC">reminded so about</font><font color="#E5E5E5"> gene transit execution</font>

393
00:17:12,579 --> 00:17:18,698
environment<font color="#CCCCCC"> as I already mentioned the</font>

394
00:17:15,910 --> 00:17:21,640
arm has really good flexibility<font color="#E5E5E5"> in a</font>

395
00:17:18,699 --> 00:17:24,010
there is a<font color="#CCCCCC"> privileges level which is I</font>

396
00:17:21,640 --> 00:17:25,839
would<font color="#E5E5E5"> say in the perspective of</font>

397
00:17:24,010 --> 00:17:29,650
<font color="#E5E5E5">technology similar what is a retro</font>

398
00:17:25,839 --> 00:17:31,629
ization<font color="#E5E5E5"> in x86 doing and because it's 86</font>

399
00:17:29,650 --> 00:17:33,430
<font color="#CCCCCC">civilization also has privileges level</font>

400
00:17:31,630 --> 00:17:36,420
and separation between them

401
00:17:33,430 --> 00:17:39,240
so<font color="#E5E5E5"> that's why in Windows 10 there</font><font color="#CCCCCC"> the</font>

402
00:17:36,420 --> 00:17:42,280
<font color="#E5E5E5">VSM vectorization</font><font color="#CCCCCC"> basic technology</font>

403
00:17:39,240 --> 00:17:44,410
<font color="#CCCCCC">what-what was built at base it on</font>

404
00:17:42,280 --> 00:17:44,860
virtualization<font color="#E5E5E5"> not basic for example on</font>

405
00:17:44,410 --> 00:17:47,590
<font color="#CCCCCC">sm</font>

406
00:17:44,860 --> 00:17:49,299
or something else<font color="#CCCCCC"> because there was</font>

407
00:17:47,590 --> 00:17:52,330
enough flexibility<font color="#CCCCCC"> to build a technology</font>

408
00:17:49,299 --> 00:17:53,918
<font color="#E5E5E5">on the top of utilization and you cannot</font>

409
00:17:52,330 --> 00:17:57,820
do that<font color="#E5E5E5"> an arm because an arm there is</font><font color="#CCCCCC"> a</font>

410
00:17:53,919 --> 00:18:01,450
there's working as a privilege level so

411
00:17:57,820 --> 00:18:04,750
that's sort of<font color="#CCCCCC"> the brief idea</font><font color="#E5E5E5"> why this</font>

412
00:18:01,450 --> 00:18:07,750
is important at all<font color="#CCCCCC"> when we built our</font>

413
00:18:04,750 --> 00:18:09,789
<font color="#CCCCCC">attack for x86 will we will use the that</font>

414
00:18:07,750 --> 00:18:13,269
flexibility which is<font color="#E5E5E5"> vectorization</font>

415
00:18:09,789 --> 00:18:17,408
technology provide to compromise the

416
00:18:13,269 --> 00:18:19,630
hypervisor<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the Windows 10 and for arm</font>

417
00:18:17,409 --> 00:18:21,519
<font color="#E5E5E5">there is a bunch of vectors which is</font>

418
00:18:19,630 --> 00:18:22,929
really similar will be for<font color="#CCCCCC"> their trust</font>

419
00:18:21,519 --> 00:18:24,600
<font color="#CCCCCC">own which will apply to the</font>

420
00:18:22,929 --> 00:18:27,399
<font color="#CCCCCC">vectorization</font>

421
00:18:24,600 --> 00:18:30,370
anyway let's go and<font color="#E5E5E5"> talk a bit about the</font>

422
00:18:27,399 --> 00:18:33,158
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> interfaces so</font><font color="#CCCCCC"> for each 66</font>

423
00:18:30,370 --> 00:18:36,129
<font color="#E5E5E5">hardware interfaces</font><font color="#CCCCCC"> I splitted it for</font>

424
00:18:33,159 --> 00:18:38,380
<font color="#E5E5E5">two categories is CPU interfaces and SSE</font>

425
00:18:36,130 --> 00:18:40,809
interfaces in the<font color="#E5E5E5"> CPU perspective there</font>

426
00:18:38,380 --> 00:18:42,610
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> obviously some general</font>

427
00:18:40,809 --> 00:18:44,379
<font color="#E5E5E5">purpose registers and other stuff</font><font color="#CCCCCC"> and</font>

428
00:18:42,610 --> 00:18:47,918
there is also a mess<font color="#CCCCCC"> are a model</font>

429
00:18:44,380 --> 00:18:49,779
specific register is basically some

430
00:18:47,919 --> 00:18:52,929
register which is<font color="#E5E5E5"> storing configuration</font>

431
00:18:49,779 --> 00:18:56,740
in x86 system<font color="#E5E5E5"> and sometimes it's even</font>

432
00:18:52,929 --> 00:18:58,630
working<font color="#E5E5E5"> as as a control registers when</font>

433
00:18:56,740 --> 00:19:03,399
you write<font color="#E5E5E5"> something and you trigger some</font>

434
00:18:58,630 --> 00:19:05,590
action<font color="#CCCCCC"> that basically</font><font color="#E5E5E5"> allowing the the</font>

435
00:19:03,399 --> 00:19:07,449
vendor creating a bunch<font color="#E5E5E5"> of features and</font>

436
00:19:05,590 --> 00:19:10,269
communication to that features using

437
00:19:07,450 --> 00:19:12,190
that registers and the software<font color="#E5E5E5"> has</font><font color="#CCCCCC"> the</font>

438
00:19:10,269 --> 00:19:14,409
instruction<font color="#E5E5E5"> to access the</font><font color="#CCCCCC"> transistors or</font>

439
00:19:12,190 --> 00:19:16,690
even write<font color="#CCCCCC"> to that registers</font><font color="#E5E5E5"> in the</font>

440
00:19:14,409 --> 00:19:20,440
<font color="#E5E5E5">perspective officer see there is a bunch</font>

441
00:19:16,690 --> 00:19:22,450
<font color="#E5E5E5">interfaces</font><font color="#CCCCCC"> I your PC</font><font color="#E5E5E5"> and so on the one</font>

442
00:19:20,440 --> 00:19:26,470
<font color="#E5E5E5">of the interesting for us for today will</font>

443
00:19:22,450 --> 00:19:28,630
<font color="#CCCCCC">be a memory mapped i/o</font><font color="#E5E5E5"> memory map MMI</font>

444
00:19:26,470 --> 00:19:30,370
your interface<font color="#E5E5E5"> it basically and the</font>

445
00:19:28,630 --> 00:19:32,980
interface which is<font color="#CCCCCC"> allowing to talk to</font>

446
00:19:30,370 --> 00:19:35,199
the PC<font color="#E5E5E5"> devices through memory so every</font>

447
00:19:32,980 --> 00:19:37,110
<font color="#E5E5E5">transaction to the MMI your of the</font>

448
00:19:35,200 --> 00:19:41,919
device will go in directly<font color="#E5E5E5"> to the device</font>

449
00:19:37,110 --> 00:19:45,789
through the<font color="#E5E5E5"> memory controller and</font><font color="#CCCCCC"> PCH so</font>

450
00:19:41,919 --> 00:19:48,519
it will run there<font color="#CCCCCC"> if you will enumerate</font>

451
00:19:45,789 --> 00:19:50,590
all of<font color="#E5E5E5"> them on</font><font color="#CCCCCC"> my your bars</font><font color="#E5E5E5"> a moment a</font>

452
00:19:48,519 --> 00:19:53,200
bar<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> and the register which is</font>

453
00:19:50,590 --> 00:19:55,959
<font color="#E5E5E5">defining a memory</font><font color="#CCCCCC"> arrange we will find a</font>

454
00:19:53,200 --> 00:19:58,950
<font color="#E5E5E5">bunch of</font><font color="#CCCCCC"> edges a bunch of ranges that</font>

455
00:19:55,960 --> 00:20:01,870
register<font color="#CCCCCC"> rate</font><font color="#E5E5E5"> ranges is</font>

456
00:19:58,950 --> 00:20:06,310
represent some of the device in in the

457
00:20:01,870 --> 00:20:07,510
system<font color="#CCCCCC"> bill we created that</font><font color="#E5E5E5"> the tool</font>

458
00:20:06,310 --> 00:20:09,669
which is basically doing<font color="#CCCCCC"> this</font>

459
00:20:07,510 --> 00:20:12,430
enumeration so you can under this tool

460
00:20:09,670 --> 00:20:15,000
which i will<font color="#E5E5E5"> use basically all</font><font color="#CCCCCC"> over this</font>

461
00:20:12,430 --> 00:20:18,280
presentation<font color="#CCCCCC"> this tool</font><font color="#E5E5E5"> is basically</font>

462
00:20:15,000 --> 00:20:20,500
doing<font color="#E5E5E5"> a lot of accesses to the card</font><font color="#CCCCCC"> when</font>

463
00:20:18,280 --> 00:20:24,820
inclusion and the<font color="#E5E5E5"> accesses to the a</font>

464
00:20:20,500 --> 00:20:27,760
memory of the devices<font color="#E5E5E5"> and as we will see</font>

465
00:20:24,820 --> 00:20:30,100
<font color="#CCCCCC">later there will be a different in</font>

466
00:20:27,760 --> 00:20:33,850
<font color="#E5E5E5">implementation of them my offer arm and</font>

467
00:20:30,100 --> 00:20:37,350
x86 and<font color="#E5E5E5"> one of one of them will be used</font>

468
00:20:33,850 --> 00:20:40,240
<font color="#E5E5E5">for attack</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the attack scenarios</font>

469
00:20:37,350 --> 00:20:44,050
so you know in arm there is<font color="#CCCCCC"> a little bit</font>

470
00:20:40,240 --> 00:20:45,670
different so you have<font color="#E5E5E5"> them</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> general</font>

471
00:20:44,050 --> 00:20:49,050
purpose registers and some of the

472
00:20:45,670 --> 00:20:52,630
special control registers<font color="#E5E5E5"> also you have</font>

473
00:20:49,050 --> 00:20:54,639
the registers inside the core processors

474
00:20:52,630 --> 00:20:56,770
and that registers<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> accessible</font>

475
00:20:54,640 --> 00:20:58,660
through the<font color="#E5E5E5"> specific instruction it</font>

476
00:20:56,770 --> 00:21:02,830
really similar to<font color="#E5E5E5"> what is a massage</font>

477
00:20:58,660 --> 00:21:05,200
<font color="#CCCCCC">Ismene for x86</font><font color="#E5E5E5"> except this interface is</font>

478
00:21:02,830 --> 00:21:07,570
covering much more registers from much

479
00:21:05,200 --> 00:21:10,480
more different units so I would say<font color="#E5E5E5"> that</font>

480
00:21:07,570 --> 00:21:13,600
all of<font color="#CCCCCC"> them necessary</font><font color="#E5E5E5"> core interfaces</font>

481
00:21:10,480 --> 00:21:16,630
accessible through that interface in the

482
00:21:13,600 --> 00:21:20,350
perspective<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> associa there is</font><font color="#E5E5E5"> also</font>

483
00:21:16,630 --> 00:21:24,280
less interfaces than x86 because<font color="#CCCCCC"> MMA yo</font>

484
00:21:20,350 --> 00:21:27,459
in arm is<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a constant constant</font>

485
00:21:24,280 --> 00:21:29,590
addresses list because in<font color="#CCCCCC"> sse you don't</font>

486
00:21:27,460 --> 00:21:32,800
need to have relocatable<font color="#CCCCCC"> a</font><font color="#E5E5E5"> memory</font>

487
00:21:29,590 --> 00:21:35,709
arranges because<font color="#CCCCCC"> in associate</font><font color="#E5E5E5"> the</font>

488
00:21:32,800 --> 00:21:37,570
purpose<font color="#CCCCCC"> vs e is make everything on chip</font>

489
00:21:35,710 --> 00:21:41,200
which is<font color="#E5E5E5"> meaning</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> everything will be</font>

490
00:21:37,570 --> 00:21:44,439
<font color="#CCCCCC">on</font><font color="#E5E5E5"> one die or in one chip and in this</font>

491
00:21:41,200 --> 00:21:47,170
case or if there is<font color="#E5E5E5"> device that device</font>

492
00:21:44,440 --> 00:21:49,930
has<font color="#CCCCCC"> the</font><font color="#E5E5E5"> the MMO</font><font color="#CCCCCC"> artisan that are</font><font color="#E5E5E5"> just</font>

493
00:21:47,170 --> 00:21:52,180
always constant and even if there is an

494
00:21:49,930 --> 00:21:54,190
any<font color="#CCCCCC"> PCI device which is implemented in</font>

495
00:21:52,180 --> 00:21:56,710
arm<font color="#E5E5E5"> they will be implemented remember</font>

496
00:21:54,190 --> 00:21:59,440
<font color="#E5E5E5">you're basically there will be the PCI</font>

497
00:21:56,710 --> 00:22:04,060
controller which<font color="#CCCCCC"> will have the constant</font>

498
00:21:59,440 --> 00:22:06,160
address and then there will be<font color="#CCCCCC"> then MMA</font>

499
00:22:04,060 --> 00:22:07,960
or all<font color="#E5E5E5"> that we say device which will be</font>

500
00:22:06,160 --> 00:22:10,230
<font color="#E5E5E5">define it and that we say controller</font>

501
00:22:07,960 --> 00:22:13,950
<font color="#CCCCCC">after omame on</font>

502
00:22:10,230 --> 00:22:19,080
anyway<font color="#CCCCCC"> then</font><font color="#E5E5E5"> the main idea is in arm</font>

503
00:22:13,950 --> 00:22:20,909
<font color="#CCCCCC">there is there</font><font color="#E5E5E5"> is less there</font><font color="#CCCCCC"> is less</font>

504
00:22:19,080 --> 00:22:23,009
flexibility because<font color="#E5E5E5"> the SS you don't</font>

505
00:22:20,909 --> 00:22:26,759
need<font color="#E5E5E5"> a flexibility</font><font color="#CCCCCC"> and because of that</font>

506
00:22:23,009 --> 00:22:28,950
there<font color="#CCCCCC"> is less attack vectors so</font><font color="#E5E5E5"> that is</font>

507
00:22:26,759 --> 00:22:31,679
the example<font color="#CCCCCC"> or what's</font><font color="#E5E5E5"> going on exactly</font>

508
00:22:28,950 --> 00:22:35,730
<font color="#CCCCCC">so that's in in the right</font><font color="#E5E5E5"> side we see</font>

509
00:22:31,679 --> 00:22:37,950
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> a list of the MMA on</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> mama</font>

510
00:22:35,730 --> 00:22:40,440
arranges for<font color="#E5E5E5"> the devices and that list</font>

511
00:22:37,950 --> 00:22:43,739
<font color="#E5E5E5">is always the same so if you reboot the</font>

512
00:22:40,440 --> 00:22:45,389
system<font color="#E5E5E5"> if you take another as I see this</font>

513
00:22:43,739 --> 00:22:48,480
specific<font color="#E5E5E5"> this specific associate you</font>

514
00:22:45,389 --> 00:22:50,699
will see always<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same always the same</font>

515
00:22:48,480 --> 00:22:52,980
list<font color="#E5E5E5"> of the addresses for all of the</font>

516
00:22:50,700 --> 00:22:55,649
devices<font color="#E5E5E5"> what this mean that they are not</font>

517
00:22:52,980 --> 00:22:58,019
relocatable<font color="#CCCCCC"> they all they all constant</font>

518
00:22:55,649 --> 00:23:00,029
and and<font color="#E5E5E5"> basically because they are not</font>

519
00:22:58,019 --> 00:23:04,799
relocatable<font color="#E5E5E5"> there is no source for</font>

520
00:23:00,029 --> 00:23:06,809
attack<font color="#E5E5E5"> and then what what will what</font><font color="#CCCCCC"> will</font>

521
00:23:04,799 --> 00:23:09,450
what we like to<font color="#CCCCCC"> do with this MMA</font>

522
00:23:06,809 --> 00:23:12,480
arranges so we want to investigate and

523
00:23:09,450 --> 00:23:15,869
see<font color="#E5E5E5"> how many of this register</font><font color="#CCCCCC"> is</font>

524
00:23:12,480 --> 00:23:19,019
<font color="#E5E5E5">accessible</font><font color="#CCCCCC"> so we may just</font><font color="#E5E5E5"> create a</font>

525
00:23:15,869 --> 00:23:21,658
<font color="#E5E5E5">simple tool which will just read and</font>

526
00:23:19,019 --> 00:23:23,519
write<font color="#CCCCCC"> this registers and depends on</font><font color="#E5E5E5"> that</font>

527
00:23:21,659 --> 00:23:26,279
<font color="#E5E5E5">we</font><font color="#CCCCCC"> can we may figure out multiple</font>

528
00:23:23,519 --> 00:23:28,499
different<font color="#E5E5E5"> things for example if we read</font>

529
00:23:26,279 --> 00:23:30,570
<font color="#E5E5E5">it from</font><font color="#CCCCCC"> the different</font><font color="#E5E5E5"> time stamp like</font>

530
00:23:28,499 --> 00:23:33,149
<font color="#E5E5E5">after the system just boot it</font><font color="#CCCCCC"> and then</font>

531
00:23:30,570 --> 00:23:35,340
later on<font color="#E5E5E5"> we'll figure out that there are</font>

532
00:23:33,149 --> 00:23:37,439
some registers may be accessible<font color="#E5E5E5"> right</font>

533
00:23:35,340 --> 00:23:41,009
after boot but not accessible in a<font color="#E5E5E5"> run</font>

534
00:23:37,440 --> 00:23:43,259
<font color="#E5E5E5">time what what is talent was that and</font>

535
00:23:41,009 --> 00:23:45,509
that there is a two<font color="#E5E5E5"> different phases for</font>

536
00:23:43,259 --> 00:23:47,909
<font color="#E5E5E5">for</font><font color="#CCCCCC"> SSE tobu there</font><font color="#E5E5E5"> is a boot time face</font>

537
00:23:45,509 --> 00:23:51,139
and<font color="#CCCCCC"> runtime</font><font color="#E5E5E5"> face really similar for x86</font>

538
00:23:47,909 --> 00:23:54,029
<font color="#E5E5E5">but the</font><font color="#CCCCCC"> differences is not</font><font color="#E5E5E5"> documented so</font>

539
00:23:51,139 --> 00:23:56,008
we don't know how<font color="#E5E5E5"> does exactly this work</font>

540
00:23:54,029 --> 00:23:58,169
<font color="#E5E5E5">because there is no documentation which</font>

541
00:23:56,009 --> 00:23:59,960
explaining these two phases we just by

542
00:23:58,169 --> 00:24:03,119
experiment can figure out<font color="#E5E5E5"> this and</font>

543
00:23:59,960 --> 00:24:05,159
another<font color="#CCCCCC"> interesting part</font><font color="#E5E5E5"> is it can</font><font color="#CCCCCC"> be</font>

544
00:24:03,119 --> 00:24:07,559
<font color="#E5E5E5">used for attack because if there</font><font color="#CCCCCC"> is any</font>

545
00:24:05,159 --> 00:24:09,690
register<font color="#E5E5E5"> is supposed</font><font color="#CCCCCC"> to be locked but</font>

546
00:24:07,559 --> 00:24:12,389
<font color="#CCCCCC">its</font><font color="#E5E5E5"> accessible after the system is boot</font>

547
00:24:09,690 --> 00:24:14,279
<font color="#E5E5E5">it may be</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> to some of the attack</font>

548
00:24:12,389 --> 00:24:16,049
<font color="#E5E5E5">scenario when</font><font color="#CCCCCC"> you for example this</font>

549
00:24:14,279 --> 00:24:18,359
register is contained the address<font color="#E5E5E5"> and</font>

550
00:24:16,049 --> 00:24:22,769
then<font color="#E5E5E5"> we you use this underst overlap</font>

551
00:24:18,359 --> 00:24:24,039
with more<font color="#CCCCCC"> privileged</font><font color="#E5E5E5"> code</font><font color="#CCCCCC"> so that is one</font>

552
00:24:22,769 --> 00:24:26,409
thing another<font color="#CCCCCC"> thing is you</font>

553
00:24:24,039 --> 00:24:28,119
<font color="#E5E5E5">may read their register from different</font>

554
00:24:26,409 --> 00:24:30,519
privileges<font color="#E5E5E5"> more to say from hypervisor</font>

555
00:24:28,119 --> 00:24:32,590
and<font color="#CCCCCC"> from the</font><font color="#E5E5E5"> kernel and see how</font><font color="#CCCCCC"> many of</font>

556
00:24:30,519 --> 00:24:34,619
them will<font color="#CCCCCC"> be accessible</font><font color="#E5E5E5"> anyway you can</font>

557
00:24:32,590 --> 00:24:37,090
you can<font color="#CCCCCC"> make a bunch</font><font color="#E5E5E5"> of different things</font>

558
00:24:34,619 --> 00:24:38,949
<font color="#CCCCCC">to understand how doesn't that remember</font>

559
00:24:37,090 --> 00:24:40,689
your work and in some case<font color="#CCCCCC"> you</font><font color="#E5E5E5"> may</font>

560
00:24:38,950 --> 00:24:42,639
figure<font color="#E5E5E5"> out that there</font><font color="#CCCCCC"> is some security</font>

561
00:24:40,690 --> 00:24:44,830
<font color="#E5E5E5">issues for</font><font color="#CCCCCC"> example if you figure out</font>

562
00:24:42,639 --> 00:24:46,748
<font color="#CCCCCC">that one of</font><font color="#E5E5E5"> the device supposed to be</font>

563
00:24:44,830 --> 00:24:48,668
trusted<font color="#E5E5E5"> minion just accessible from</font><font color="#CCCCCC"> the</font>

564
00:24:46,749 --> 00:24:50,919
trans<font color="#CCCCCC"> owned but</font><font color="#E5E5E5"> it's accessible from the</font>

565
00:24:48,669 --> 00:24:53,440
<font color="#E5E5E5">normal world that's sort of issue which</font>

566
00:24:50,919 --> 00:24:56,619
may<font color="#CCCCCC"> cause</font><font color="#E5E5E5"> some problem for the system</font>

567
00:24:53,440 --> 00:24:58,269
<font color="#E5E5E5">and the interesting</font><font color="#CCCCCC"> part</font><font color="#E5E5E5"> is that it's</font>

568
00:24:56,619 --> 00:25:00,728
not<font color="#E5E5E5"> really easy to</font><font color="#CCCCCC"> find the commentation</font>

569
00:24:58,269 --> 00:25:04,710
from the SOC<font color="#E5E5E5"> and from all of them and</font>

570
00:25:00,729 --> 00:25:07,149
<font color="#E5E5E5">other devices if you think</font><font color="#CCCCCC"> about that</font>

571
00:25:04,710 --> 00:25:08,710
the arm<font color="#E5E5E5"> is not providing the in</font>

572
00:25:07,149 --> 00:25:11,498
<font color="#E5E5E5">description of the all of</font><font color="#CCCCCC"> this I see</font>

573
00:25:08,710 --> 00:25:13,179
<font color="#E5E5E5">because it's it is vendor specific but</font>

574
00:25:11,499 --> 00:25:16,210
vendor<font color="#E5E5E5"> doesn't provide this as well</font><font color="#CCCCCC"> so</font>

575
00:25:13,179 --> 00:25:18,609
<font color="#CCCCCC">in some of that so</font><font color="#E5E5E5"> to find that the</font>

576
00:25:16,210 --> 00:25:20,739
<font color="#CCCCCC">commentation you may want there's one</font>

577
00:25:18,609 --> 00:25:23,408
way<font color="#E5E5E5"> you</font><font color="#CCCCCC"> need to</font><font color="#E5E5E5"> send for program which</font>

578
00:25:20,739 --> 00:25:24,999
will which<font color="#CCCCCC"> will ship to you that</font>

579
00:25:23,409 --> 00:25:26,590
developer boards<font color="#E5E5E5"> and when you gather</font>

580
00:25:24,999 --> 00:25:28,809
developer boards you will figure out

581
00:25:26,590 --> 00:25:30,939
<font color="#E5E5E5">that</font><font color="#CCCCCC"> that developer boss has also</font>

582
00:25:28,809 --> 00:25:34,418
documentation<font color="#E5E5E5"> with the description</font><font color="#CCCCCC"> of</font>

583
00:25:30,940 --> 00:25:36,460
the registers and<font color="#CCCCCC"> then you can map the</font>

584
00:25:34,419 --> 00:25:39,279
which of<font color="#CCCCCC"> the developer boards represent</font>

585
00:25:36,460 --> 00:25:42,759
which of them<font color="#E5E5E5"> SSE for the for the phones</font>

586
00:25:39,279 --> 00:25:45,759
for example from I've bought from Nexus

587
00:25:42,759 --> 00:25:48,070
5x and 6p developer boards and then when

588
00:25:45,759 --> 00:25:50,139
I figure out<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> Emma may</font><font color="#CCCCCC"> often</font>

589
00:25:48,070 --> 00:25:51,908
<font color="#E5E5E5">that devices but interestingly that it's</font>

590
00:25:50,139 --> 00:25:53,830
not really<font color="#E5E5E5"> accessible so you cannot</font><font color="#CCCCCC"> just</font>

591
00:25:51,909 --> 00:25:56,139
google<font color="#E5E5E5"> it and find the</font><font color="#CCCCCC"> description of</font>

592
00:25:53,830 --> 00:25:58,149
this the consequences of<font color="#CCCCCC"> that it can be</font>

593
00:25:56,139 --> 00:26:00,428
two things<font color="#E5E5E5"> first of all we cannot</font><font color="#CCCCCC"> verify</font>

594
00:25:58,149 --> 00:26:03,369
<font color="#CCCCCC">it</font><font color="#E5E5E5"> configure it properly or</font><font color="#CCCCCC"> not</font>

595
00:26:00,429 --> 00:26:06,609
and second is<font color="#E5E5E5"> we don't know</font><font color="#CCCCCC"> exactly what</font>

596
00:26:03,369 --> 00:26:08,678
is<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on in the system so say when I</font>

597
00:26:06,609 --> 00:26:10,720
make investigation and the<font color="#E5E5E5"> Google pixel</font>

598
00:26:08,679 --> 00:26:13,509
<font color="#E5E5E5">I figure out that the system has more</font>

599
00:26:10,720 --> 00:26:16,119
than<font color="#CCCCCC"> ten different farmers</font><font color="#E5E5E5"> and in the</font>

600
00:26:13,509 --> 00:26:18,190
interfaces for<font color="#E5E5E5"> the farmers is different</font>

601
00:26:16,119 --> 00:26:20,728
some of them<font color="#E5E5E5"> spy some of them</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> to see</font>

602
00:26:18,190 --> 00:26:23,349
and so on<font color="#E5E5E5"> but there is no documentation</font>

603
00:26:20,729 --> 00:26:24,759
<font color="#CCCCCC">so</font><font color="#E5E5E5"> ever when you can find all of the</font>

604
00:26:23,349 --> 00:26:28,239
exponent<font color="#E5E5E5"> in description for that</font>

605
00:26:24,759 --> 00:26:30,519
<font color="#E5E5E5">interfaces how does they work registers</font>

606
00:26:28,239 --> 00:26:33,429
and<font color="#E5E5E5"> so on that was sort of interesting</font>

607
00:26:30,519 --> 00:26:35,499
<font color="#CCCCCC">point and</font><font color="#E5E5E5"> experimenting with them a</font>

608
00:26:33,429 --> 00:26:38,420
memory of the devices may give you some

609
00:26:35,499 --> 00:26:42,330
<font color="#E5E5E5">ideas about what the device is doing</font>

610
00:26:38,420 --> 00:26:45,660
anyway let's come back to x86<font color="#E5E5E5"> we already</font>

611
00:26:42,330 --> 00:26:47,370
got<font color="#CCCCCC"> the idea</font><font color="#E5E5E5"> that x86 has much more</font>

612
00:26:45,660 --> 00:26:50,130
complicated boot process<font color="#E5E5E5"> because it</font>

613
00:26:47,370 --> 00:26:53,760
<font color="#CCCCCC">allowed</font><font color="#E5E5E5"> better flexibility and so on so</font>

614
00:26:50,130 --> 00:26:55,380
because<font color="#E5E5E5"> of that x86 is reconfigurable</font>

615
00:26:53,760 --> 00:26:57,780
minion that<font color="#E5E5E5"> there is a bunch of things</font>

616
00:26:55,380 --> 00:27:00,750
<font color="#CCCCCC">can</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> configured differently</font><font color="#E5E5E5"> including</font>

617
00:26:57,780 --> 00:27:02,399
<font color="#CCCCCC">security configuration and over the</font>

618
00:27:00,750 --> 00:27:04,860
years we<font color="#CCCCCC"> collect in different when their</font>

619
00:27:02,400 --> 00:27:07,830
abilities<font color="#E5E5E5"> found by different</font><font color="#CCCCCC"> people</font>

620
00:27:04,860 --> 00:27:09,600
including<font color="#E5E5E5"> us in a different interfaces</font>

621
00:27:07,830 --> 00:27:11,879
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> firm including configuration of</font>

622
00:27:09,600 --> 00:27:14,730
the<font color="#CCCCCC"> firmware</font><font color="#E5E5E5"> and this is the list of all</font>

623
00:27:11,880 --> 00:27:18,960
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the vulnerability which we found by</font>

624
00:27:14,730 --> 00:27:21,240
2015<font color="#CCCCCC"> in x86 from in the most of them is</font>

625
00:27:18,960 --> 00:27:23,610
configuration<font color="#CCCCCC"> like some</font><font color="#E5E5E5"> of the registers</font>

626
00:27:21,240 --> 00:27:25,950
<font color="#E5E5E5">supposed to be locked by they not locked</font>

627
00:27:23,610 --> 00:27:28,199
<font color="#E5E5E5">and because they're not logged there is</font>

628
00:27:25,950 --> 00:27:31,320
some accesses to<font color="#CCCCCC"> some of the region</font>

629
00:27:28,200 --> 00:27:32,700
which is<font color="#E5E5E5"> not supposed to be and if you</font>

630
00:27:31,320 --> 00:27:35,309
think about<font color="#E5E5E5"> that there is like more than</font>

631
00:27:32,700 --> 00:27:36,929
<font color="#E5E5E5">like 15 of them different</font>

632
00:27:35,309 --> 00:27:39,928
<font color="#CCCCCC">vulnerabilities which were found it's</font>

633
00:27:36,929 --> 00:27:42,600
fine<font color="#CCCCCC"> it is fine because the system is</font>

634
00:27:39,929 --> 00:27:44,640
super<font color="#E5E5E5"> flexible and allowing you a lot of</font>

635
00:27:42,600 --> 00:27:46,678
reconfiguration<font color="#E5E5E5"> the vendor</font><font color="#CCCCCC"> just need to</font>

636
00:27:44,640 --> 00:27:48,630
<font color="#E5E5E5">take care of all</font><font color="#CCCCCC"> of this and</font><font color="#E5E5E5"> making sure</font>

637
00:27:46,679 --> 00:27:51,480
that the<font color="#CCCCCC"> configuration is set that</font><font color="#E5E5E5"> was</font>

638
00:27:48,630 --> 00:27:55,049
supposed to be done then four years

639
00:27:51,480 --> 00:27:57,059
<font color="#E5E5E5">later in 2017 we maintain our system to</font>

640
00:27:55,049 --> 00:28:01,350
check one of<font color="#E5E5E5"> that vulnerability which we</font>

641
00:27:57,059 --> 00:28:03,059
<font color="#CCCCCC">disclosed that in 2013 how many how many</font>

642
00:28:01,350 --> 00:28:05,100
systems still<font color="#E5E5E5"> when arrival to this</font>

643
00:28:03,059 --> 00:28:07,980
vulnerability<font color="#CCCCCC"> and we were surprised that</font>

644
00:28:05,100 --> 00:28:10,020
even<font color="#E5E5E5"> in 2017 for some of the really</font>

645
00:28:07,980 --> 00:28:12,299
<font color="#E5E5E5">common type</font><font color="#CCCCCC"> of an ability</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

646
00:28:10,020 --> 00:28:15,210
allowing<font color="#E5E5E5"> you direct</font><font color="#CCCCCC"> access to the bias</font>

647
00:28:12,299 --> 00:28:17,309
region<font color="#E5E5E5"> in a spy controller there is 500</font>

648
00:28:15,210 --> 00:28:20,250
different<font color="#E5E5E5"> modulus laptops and desktops</font>

649
00:28:17,309 --> 00:28:21,750
<font color="#E5E5E5">still</font><font color="#CCCCCC"> variable to this reliability</font><font color="#E5E5E5"> so we</font>

650
00:28:20,250 --> 00:28:25,410
started the talking<font color="#E5E5E5"> about this from our</font>

651
00:28:21,750 --> 00:28:27,600
built in 2013<font color="#CCCCCC"> and then even</font><font color="#E5E5E5"> in this year</font>

652
00:28:25,410 --> 00:28:32,040
<font color="#E5E5E5">we still have a bunch of system which is</font>

653
00:28:27,600 --> 00:28:34,678
venerable there's the vendors<font color="#E5E5E5"> is coming</font>

654
00:28:32,040 --> 00:28:36,990
a little<font color="#E5E5E5"> bit better because some</font><font color="#CCCCCC"> of the</font>

655
00:28:34,679 --> 00:28:39,750
vendors<font color="#E5E5E5"> is making progress if you will</font>

656
00:28:36,990 --> 00:28:41,910
see like<font color="#E5E5E5"> Dell they have just 11 system</font>

657
00:28:39,750 --> 00:28:43,460
which still variable which is<font color="#CCCCCC"> not bad</font>

658
00:28:41,910 --> 00:28:46,110
<font color="#CCCCCC">because they have a thousands of systems</font>

659
00:28:43,460 --> 00:28:48,330
<font color="#E5E5E5">and they may not just update</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> 11</font>

660
00:28:46,110 --> 00:28:50,760
<font color="#E5E5E5">because there was legacy or old system</font>

661
00:28:48,330 --> 00:28:52,678
<font color="#E5E5E5">so they are making really good progress</font>

662
00:28:50,760 --> 00:28:56,400
but some of the<font color="#E5E5E5"> vendors still have a</font>

663
00:28:52,679 --> 00:29:00,679
bunch<font color="#E5E5E5"> of system even even modern system</font>

664
00:28:56,400 --> 00:29:03,480
<font color="#E5E5E5">I've bought recently some</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> Lenovo</font>

665
00:29:00,679 --> 00:29:05,429
<font color="#CCCCCC">I don't</font><font color="#E5E5E5"> remember</font><font color="#CCCCCC"> issues that I know</font>

666
00:29:03,480 --> 00:29:07,380
<font color="#CCCCCC">about latest ones from</font><font color="#E5E5E5"> this year</font><font color="#CCCCCC"> brought</font>

667
00:29:05,429 --> 00:29:09,240
<font color="#CCCCCC">valve on and</font><font color="#E5E5E5"> that's still vulnerable to</font>

668
00:29:07,380 --> 00:29:11,040
the classical vulnerability which is

669
00:29:09,240 --> 00:29:14,280
allowing<font color="#CCCCCC"> to get the access to the frame</font>

670
00:29:11,040 --> 00:29:17,970
<font color="#CCCCCC">so that's sort of things which we need</font>

671
00:29:14,280 --> 00:29:19,379
to<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> so in arm there is</font><font color="#CCCCCC"> a</font>

672
00:29:17,970 --> 00:29:20,970
little<font color="#CCCCCC"> bit different story as</font><font color="#E5E5E5"> already</font>

673
00:29:19,380 --> 00:29:23,250
<font color="#E5E5E5">mentioned first of all as I see is not</font>

674
00:29:20,970 --> 00:29:25,049
<font color="#E5E5E5">documented so we don't know really</font>

675
00:29:23,250 --> 00:29:26,880
what's<font color="#CCCCCC"> supposed</font><font color="#E5E5E5"> to be set what</font><font color="#CCCCCC"> the</font>

676
00:29:25,049 --> 00:29:28,710
security configuration<font color="#CCCCCC"> need to be</font><font color="#E5E5E5"> set we</font>

677
00:29:26,880 --> 00:29:31,380
<font color="#E5E5E5">don't know how to check it we know that</font>

678
00:29:28,710 --> 00:29:34,530
some things<font color="#E5E5E5"> we</font><font color="#CCCCCC"> known likes a bootloader</font>

679
00:29:31,380 --> 00:29:36,690
supposed to Lord just silent binary<font color="#CCCCCC"> we</font>

680
00:29:34,530 --> 00:29:38,970
know like basic stuff for the boot flow

681
00:29:36,690 --> 00:29:41,400
<font color="#E5E5E5">and one of the basic</font><font color="#CCCCCC"> stuff is the fuses</font>

682
00:29:38,970 --> 00:29:42,900
<font color="#E5E5E5">so we definitely need to check that the</font>

683
00:29:41,400 --> 00:29:44,640
fuses is program it and<font color="#E5E5E5"> lock</font><font color="#CCCCCC"> it</font>

684
00:29:42,900 --> 00:29:46,770
correctly<font color="#CCCCCC"> this assumption which we</font><font color="#E5E5E5"> know</font>

685
00:29:44,640 --> 00:29:48,600
about the boot flow and the security

686
00:29:46,770 --> 00:29:49,950
protection of the boot flow<font color="#E5E5E5"> also</font><font color="#CCCCCC"> you</font>

687
00:29:48,600 --> 00:29:51,870
know that<font color="#CCCCCC"> when the trazadone</font>

688
00:29:49,950 --> 00:29:53,370
initialization<font color="#E5E5E5"> going there is some</font>

689
00:29:51,870 --> 00:29:55,139
register which<font color="#E5E5E5"> is supposed to be set</font><font color="#CCCCCC"> in</font>

690
00:29:53,370 --> 00:29:56,459
<font color="#CCCCCC">the corporate</font><font color="#E5E5E5"> specter that</font><font color="#CCCCCC"> something</font>

691
00:29:55,140 --> 00:29:58,080
which you also know but we don't<font color="#E5E5E5"> know</font>

692
00:29:56,460 --> 00:30:00,840
what exactly<font color="#E5E5E5"> in perspective of</font>

693
00:29:58,080 --> 00:30:03,030
<font color="#E5E5E5">Association supposed to be said to</font><font color="#CCCCCC"> lock</font>

694
00:30:00,840 --> 00:30:05,428
the firmware<font color="#CCCCCC"> accesses to the</font><font color="#E5E5E5"> to the</font>

695
00:30:03,030 --> 00:30:08,639
interfaces of the from different<font color="#E5E5E5"> from us</font>

696
00:30:05,429 --> 00:30:10,559
<font color="#CCCCCC">and what I noticed this when I when I</font>

697
00:30:08,640 --> 00:30:13,470
bought<font color="#E5E5E5"> that developer board and</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> had</font>

698
00:30:10,559 --> 00:30:15,780
that<font color="#E5E5E5"> spec from like many a thousand</font>

699
00:30:13,470 --> 00:30:18,330
pages<font color="#CCCCCC"> I start to read register from that</font>

700
00:30:15,780 --> 00:30:21,299
pages<font color="#E5E5E5"> and I figure out</font><font color="#CCCCCC"> that a</font><font color="#E5E5E5"> bunch of</font>

701
00:30:18,330 --> 00:30:25,260
that<font color="#CCCCCC"> register</font><font color="#E5E5E5"> has some</font><font color="#CCCCCC"> hiden</font>

702
00:30:21,299 --> 00:30:27,210
sort of<font color="#CCCCCC"> lock configuration</font><font color="#E5E5E5"> basically the</font>

703
00:30:25,260 --> 00:30:29,280
register is telling<font color="#CCCCCC"> that this register</font>

704
00:30:27,210 --> 00:30:31,770
is relying on<font color="#E5E5E5"> lock to</font><font color="#CCCCCC"> known as a</font>

705
00:30:29,280 --> 00:30:34,410
register and then as a register is rely

706
00:30:31,770 --> 00:30:38,549
on some other<font color="#E5E5E5"> locks and what this mean</font>

707
00:30:34,410 --> 00:30:40,380
is the domain this mean is that in

708
00:30:38,549 --> 00:30:42,570
<font color="#CCCCCC">associa there is also a bunch</font><font color="#E5E5E5"> of</font>

709
00:30:40,380 --> 00:30:45,059
register<font color="#E5E5E5"> which supposed to be</font><font color="#CCCCCC"> set to</font>

710
00:30:42,570 --> 00:30:47,909
<font color="#CCCCCC">make the platform fully protected and</font>

711
00:30:45,059 --> 00:30:50,668
locked but the point is this data is<font color="#CCCCCC"> not</font>

712
00:30:47,910 --> 00:30:52,470
really<font color="#E5E5E5"> accessible easier because to find</font>

713
00:30:50,669 --> 00:30:54,150
<font color="#E5E5E5">is</font><font color="#CCCCCC"> that it's not publicly</font><font color="#E5E5E5"> available</font><font color="#CCCCCC"> you</font>

714
00:30:52,470 --> 00:30:57,059
<font color="#CCCCCC">just need to go</font><font color="#E5E5E5"> through them special</font>

715
00:30:54,150 --> 00:30:59,130
process and what this means<font color="#E5E5E5"> for</font><font color="#CCCCCC"> us its</font>

716
00:30:57,059 --> 00:31:01,590
meaning<font color="#E5E5E5"> that we buy a system we buy our</font>

717
00:30:59,130 --> 00:31:03,170
phones and<font color="#E5E5E5"> other devices arm-based</font>

718
00:31:01,590 --> 00:31:04,879
devices<font color="#CCCCCC"> and we</font>

719
00:31:03,170 --> 00:31:07,520
no does they<font color="#E5E5E5"> properly set it or not</font>

720
00:31:04,880 --> 00:31:09,830
<font color="#E5E5E5">because we don't have the good test</font><font color="#CCCCCC"> for</font>

721
00:31:07,520 --> 00:31:11,629
these registers<font color="#E5E5E5"> we don't have the</font>

722
00:31:09,830 --> 00:31:13,939
<font color="#CCCCCC">information</font><font color="#E5E5E5"> about this at all</font><font color="#CCCCCC"> so we need</font>

723
00:31:11,630 --> 00:31:16,370
to just<font color="#CCCCCC"> sort of trust vendor that</font><font color="#E5E5E5"> vendor</font>

724
00:31:13,940 --> 00:31:18,560
is doing the<font color="#CCCCCC"> job well</font><font color="#E5E5E5"> if you're not</font>

725
00:31:16,370 --> 00:31:21,169
<font color="#E5E5E5">trust vendor then there is not easy way</font>

726
00:31:18,560 --> 00:31:23,870
to I've tried to do that<font color="#CCCCCC"> but I figure</font>

727
00:31:21,170 --> 00:31:24,980
out there are so many registers to which

728
00:31:23,870 --> 00:31:27,949
I need<font color="#E5E5E5"> to</font><font color="#CCCCCC"> count</font>

729
00:31:24,980 --> 00:31:30,260
so I finally didn't manage how make it

730
00:31:27,950 --> 00:31:31,610
automatically<font color="#E5E5E5"> to check all of</font><font color="#CCCCCC"> that</font>

731
00:31:30,260 --> 00:31:34,129
registers in<font color="#CCCCCC"> the system</font>

732
00:31:31,610 --> 00:31:36,020
and the one thing was<font color="#E5E5E5"> really important</font>

733
00:31:34,130 --> 00:31:37,880
<font color="#CCCCCC">that some of the register I found that</font>

734
00:31:36,020 --> 00:31:39,620
they<font color="#CCCCCC"> are not locked</font><font color="#E5E5E5"> so they're</font><font color="#CCCCCC"> supposed</font>

735
00:31:37,880 --> 00:31:41,900
to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> locked</font><font color="#E5E5E5"> they're not locked</font><font color="#CCCCCC"> I didn't</font>

736
00:31:39,620 --> 00:31:44,449
find figure out the security impact of

737
00:31:41,900 --> 00:31:46,250
that registers but the register which<font color="#CCCCCC"> is</font>

738
00:31:44,450 --> 00:31:47,750
supposed to<font color="#E5E5E5"> be locked by the spec is not</font>

739
00:31:46,250 --> 00:31:50,480
locked it's not really a big<font color="#E5E5E5"> problem</font>

740
00:31:47,750 --> 00:31:54,580
<font color="#E5E5E5">unless there is impact of this and for</font>

741
00:31:50,480 --> 00:31:58,850
<font color="#CCCCCC">some registers maybe impact of that so</font>

742
00:31:54,580 --> 00:32:00,439
how we how we can start<font color="#E5E5E5"> reverse engineer</font>

743
00:31:58,850 --> 00:32:02,570
<font color="#CCCCCC">con</font><font color="#E5E5E5"> the former</font><font color="#CCCCCC"> because we already</font><font color="#E5E5E5"> talked</font>

744
00:32:00,440 --> 00:32:04,880
a bit about interfaces about<font color="#CCCCCC"> boot flow</font>

745
00:32:02,570 --> 00:32:08,179
about the configuration<font color="#E5E5E5"> so on but we</font>

746
00:32:04,880 --> 00:32:11,060
want<font color="#E5E5E5"> to go on deep and see what is what</font>

747
00:32:08,180 --> 00:32:13,340
<font color="#CCCCCC">is inside</font><font color="#E5E5E5"> the from the inner city six</font>

748
00:32:11,060 --> 00:32:16,280
there is<font color="#E5E5E5"> pretty easy</font><font color="#CCCCCC"> to dump the from</font>

749
00:32:13,340 --> 00:32:18,470
our interface<font color="#CCCCCC"> dump the froma through the</font>

750
00:32:16,280 --> 00:32:19,790
spy interface<font color="#E5E5E5"> and there is a comment</font><font color="#CCCCCC"> in</font>

751
00:32:18,470 --> 00:32:21,320
<font color="#E5E5E5">ship</font><font color="#CCCCCC"> SEC you can just call ship</font>

752
00:32:19,790 --> 00:32:23,600
<font color="#CCCCCC">security'll spy dump</font><font color="#E5E5E5"> and you down the</font>

753
00:32:21,320 --> 00:32:24,980
<font color="#E5E5E5">firm then you can decode the from an</font>

754
00:32:23,600 --> 00:32:27,560
extract<font color="#E5E5E5"> all of the</font><font color="#CCCCCC"> compressor</font><font color="#E5E5E5"> on the</font>

755
00:32:24,980 --> 00:32:29,570
<font color="#CCCCCC">promo and then you can</font><font color="#E5E5E5"> analyze every of</font>

756
00:32:27,560 --> 00:32:31,429
that components one<font color="#CCCCCC"> by one</font>

757
00:32:29,570 --> 00:32:34,970
during the either or<font color="#CCCCCC"> make some</font>

758
00:32:31,430 --> 00:32:38,150
<font color="#E5E5E5">automation using the some of</font><font color="#CCCCCC"> the ufi</font>

759
00:32:34,970 --> 00:32:40,970
<font color="#E5E5E5">runner tools there is a</font><font color="#CCCCCC"> bunch of</font>

760
00:32:38,150 --> 00:32:43,610
research done right now<font color="#CCCCCC"> about how how</font>

761
00:32:40,970 --> 00:32:45,800
<font color="#CCCCCC">does it how does it</font><font color="#E5E5E5"> work from meteor</font>

762
00:32:43,610 --> 00:32:48,770
Aleksic from other people from snail<font color="#E5E5E5"> a</font>

763
00:32:45,800 --> 00:32:51,379
snare<font color="#CCCCCC"> I will not stop too much here but</font>

764
00:32:48,770 --> 00:32:53,570
basically<font color="#E5E5E5"> if you want</font><font color="#CCCCCC"> to start analysis</font>

765
00:32:51,380 --> 00:32:55,580
of the<font color="#E5E5E5"> system from an x86 system you</font>

766
00:32:53,570 --> 00:32:57,379
just<font color="#CCCCCC"> need to Don them decode and analyze</font>

767
00:32:55,580 --> 00:32:58,970
the binaries which you find and the

768
00:32:57,380 --> 00:33:03,080
<font color="#E5E5E5">binary which you find</font><font color="#CCCCCC"> it will be just</font><font color="#E5E5E5"> a</font>

769
00:32:58,970 --> 00:33:06,260
<font color="#E5E5E5">regular</font><font color="#CCCCCC"> ECG 6bi</font><font color="#E5E5E5"> files so an analysis of</font>

770
00:33:03,080 --> 00:33:09,500
the<font color="#E5E5E5"> bias in x86 from it's really similar</font>

771
00:33:06,260 --> 00:33:13,129
just<font color="#E5E5E5"> for analysis any other binary ntdll</font>

772
00:33:09,500 --> 00:33:15,470
or whatever<font color="#E5E5E5"> binary you want so I will</font>

773
00:33:13,130 --> 00:33:19,460
focus here a bit<font color="#E5E5E5"> on</font>

774
00:33:15,470 --> 00:33:21,260
how can you build<font color="#CCCCCC"> how can you start</font>

775
00:33:19,460 --> 00:33:23,570
reverse engineering and analyzing<font color="#CCCCCC"> armed</font>

776
00:33:21,260 --> 00:33:26,570
systems<font color="#E5E5E5"> first</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> all because it was</font>

777
00:33:23,570 --> 00:33:31,639
<font color="#E5E5E5">pretty interesting when we did this and</font>

778
00:33:26,570 --> 00:33:35,450
another is<font color="#E5E5E5"> it's it's sort of one</font><font color="#CCCCCC"> of the</font>

779
00:33:31,640 --> 00:33:37,820
first presentation for the 64-bit<font color="#CCCCCC"> razón</font>

780
00:33:35,450 --> 00:33:40,970
analysis so it may<font color="#E5E5E5"> be interesting</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> a</font>

781
00:33:37,820 --> 00:33:43,189
<font color="#E5E5E5">methodology and as a result as well</font><font color="#CCCCCC"> so</font>

782
00:33:40,970 --> 00:33:44,870
to start<font color="#E5E5E5"> analysis of the trans own you</font>

783
00:33:43,190 --> 00:33:47,750
need to find the binaries and there is

784
00:33:44,870 --> 00:33:49,789
two ways<font color="#E5E5E5"> to do that one was to dump them</font>

785
00:33:47,750 --> 00:33:52,760
from<font color="#E5E5E5"> her from the system but the point</font>

786
00:33:49,789 --> 00:33:55,100
is<font color="#CCCCCC"> again</font><font color="#E5E5E5"> there is there</font><font color="#CCCCCC"> is one interface</font>

787
00:33:52,760 --> 00:33:59,900
which is<font color="#E5E5E5"> accessible and that interface</font>

788
00:33:55,100 --> 00:34:01,730
was working until until recently and

789
00:33:59,900 --> 00:34:03,380
<font color="#E5E5E5">that</font><font color="#CCCCCC"> interface is</font><font color="#E5E5E5"> allowing you to dump</font>

790
00:34:01,730 --> 00:34:05,270
the<font color="#E5E5E5"> firmware from the system but then</font>

791
00:34:03,380 --> 00:34:06,830
later<font color="#E5E5E5"> on that that interface was</font>

792
00:34:05,270 --> 00:34:10,699
disabled so<font color="#E5E5E5"> you cannot do this anymore</font>

793
00:34:06,830 --> 00:34:11,659
<font color="#CCCCCC">so but how</font><font color="#E5E5E5"> can you how can you find the</font>

794
00:34:10,699 --> 00:34:13,699
firmware

795
00:34:11,659 --> 00:34:16,460
another way<font color="#E5E5E5"> to do that is find the</font>

796
00:34:13,699 --> 00:34:18,319
factory image<font color="#E5E5E5"> from the vendor basically</font>

797
00:34:16,460 --> 00:34:20,540
images which<font color="#E5E5E5"> is using to restore the</font>

798
00:34:18,320 --> 00:34:22,510
<font color="#E5E5E5">system for the from the original</font>

799
00:34:20,540 --> 00:34:25,250
<font color="#E5E5E5">container state from the state</font><font color="#CCCCCC"> which was</font>

800
00:34:22,510 --> 00:34:27,260
supposed to<font color="#E5E5E5"> build after manufacturing</font>

801
00:34:25,250 --> 00:34:29,330
and then<font color="#E5E5E5"> in the factory image you can</font>

802
00:34:27,260 --> 00:34:31,550
extract the<font color="#CCCCCC"> bootloader which</font><font color="#E5E5E5"> will</font>

803
00:34:29,330 --> 00:34:33,259
contain<font color="#E5E5E5"> all of the binaries including</font>

804
00:34:31,550 --> 00:34:36,710
trans non-binary including hypervisor

805
00:34:33,260 --> 00:34:38,510
binary including some of the<font color="#CCCCCC"> s BL a</font>

806
00:34:36,710 --> 00:34:41,149
secondary bootloader binary and you can

807
00:34:38,510 --> 00:34:42,830
start going<font color="#CCCCCC"> analyze</font><font color="#E5E5E5"> that damn for</font>

808
00:34:41,149 --> 00:34:44,690
example if you want<font color="#CCCCCC"> on OS hypervisor and</font>

809
00:34:42,830 --> 00:34:47,000
<font color="#E5E5E5">see how the hypervisor work and so</font><font color="#CCCCCC"> on</font>

810
00:34:44,690 --> 00:34:52,490
<font color="#E5E5E5">one another important thing is the</font>

811
00:34:47,000 --> 00:34:56,449
hypervisor<font color="#E5E5E5"> in that specific</font><font color="#CCCCCC"> SSC was</font>

812
00:34:52,489 --> 00:34:59,180
enabled like recently<font color="#E5E5E5"> from from</font>

813
00:34:56,449 --> 00:35:03,230
generation of<font color="#CCCCCC"> snapdragon 808 it is</font>

814
00:34:59,180 --> 00:35:05,779
basically<font color="#E5E5E5"> the time of a nexus</font><font color="#CCCCCC"> 5x</font><font color="#E5E5E5"> so</font>

815
00:35:03,230 --> 00:35:07,849
anyway you take<font color="#CCCCCC"> the</font><font color="#E5E5E5"> trans non-binary you</font>

816
00:35:05,780 --> 00:35:09,859
load that<font color="#CCCCCC"> in HIDA</font><font color="#E5E5E5"> and you will see</font>

817
00:35:07,849 --> 00:35:12,050
there's a<font color="#E5E5E5"> bunch of section some of them</font>

818
00:35:09,859 --> 00:35:13,670
is represent tourism<font color="#E5E5E5"> kernels some of</font>

819
00:35:12,050 --> 00:35:15,260
them is<font color="#E5E5E5"> represent</font><font color="#CCCCCC"> as a monitor so</font>

820
00:35:13,670 --> 00:35:17,300
basically you have entire code of

821
00:35:15,260 --> 00:35:19,040
tourism<font color="#CCCCCC"> Kino transom monitor from</font><font color="#E5E5E5"> here</font>

822
00:35:17,300 --> 00:35:21,470
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can start reverse engineer now</font>

823
00:35:19,040 --> 00:35:22,810
<font color="#CCCCCC">analyzing the functions</font><font color="#E5E5E5"> the entry points</font>

824
00:35:21,470 --> 00:35:25,040
and<font color="#E5E5E5"> so</font><font color="#CCCCCC"> on</font>

825
00:35:22,810 --> 00:35:26,599
also you want to<font color="#CCCCCC"> have the dynamic</font>

826
00:35:25,040 --> 00:35:28,790
environment to run the<font color="#CCCCCC"> test and</font>

827
00:35:26,599 --> 00:35:30,410
especially<font color="#E5E5E5"> if you have a phone</font><font color="#CCCCCC"> for</font>

828
00:35:28,790 --> 00:35:32,900
<font color="#E5E5E5">Nemec environment there is you need to</font>

829
00:35:30,410 --> 00:35:35,720
<font color="#CCCCCC">route your</font><font color="#E5E5E5"> phone and rebuild the kernel</font>

830
00:35:32,900 --> 00:35:37,880
to<font color="#CCCCCC"> allowing the Lord</font><font color="#E5E5E5"> drivers and then</font>

831
00:35:35,720 --> 00:35:40,040
with that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can load any drivers to</font>

832
00:35:37,880 --> 00:35:42,410
read physical memory<font color="#E5E5E5"> to read the memory</font>

833
00:35:40,040 --> 00:35:43,820
of the devices and<font color="#E5E5E5"> so</font><font color="#CCCCCC"> on so forth</font>

834
00:35:42,410 --> 00:35:46,129
<font color="#CCCCCC">there is a bunch</font><font color="#E5E5E5"> of tools</font><font color="#CCCCCC"> be she's</font>

835
00:35:43,820 --> 00:35:48,980
already doing<font color="#CCCCCC"> this so there is a matter</font>

836
00:35:46,130 --> 00:35:50,750
<font color="#E5E5E5">of time just to compile the kernel and</font>

837
00:35:48,980 --> 00:35:54,380
the<font color="#CCCCCC"> compilers tools and then from here</font>

838
00:35:50,750 --> 00:36:00,080
<font color="#CCCCCC">you can</font><font color="#E5E5E5"> run there's an</font><font color="#CCCCCC"> analyze the</font>

839
00:35:54,380 --> 00:36:02,780
system so now after you load the

840
00:36:00,080 --> 00:36:04,220
binaries the the<font color="#CCCCCC"> transient binaries to</font>

841
00:36:02,780 --> 00:36:06,260
<font color="#E5E5E5">either and you have the dynamic</font>

842
00:36:04,220 --> 00:36:08,720
<font color="#E5E5E5">environment</font><font color="#CCCCCC"> you need to start looking at</font>

843
00:36:06,260 --> 00:36:10,820
interfaces<font color="#E5E5E5"> where is the entry point how</font>

844
00:36:08,720 --> 00:36:12,200
does<font color="#CCCCCC"> the colon convention working how</font>

845
00:36:10,820 --> 00:36:14,840
does the argument patient from the

846
00:36:12,200 --> 00:36:16,549
normal world<font color="#E5E5E5"> to transient world</font><font color="#CCCCCC"> one of</font>

847
00:36:14,840 --> 00:36:19,070
<font color="#CCCCCC">the thing which you can</font><font color="#E5E5E5"> go and</font><font color="#CCCCCC"> take a</font>

848
00:36:16,550 --> 00:36:21,110
look is open source implementation of

849
00:36:19,070 --> 00:36:23,510
the trans own<font color="#E5E5E5"> it will give you a lot</font><font color="#CCCCCC"> of</font>

850
00:36:21,110 --> 00:36:25,340
<font color="#CCCCCC">information about how does handler works</font>

851
00:36:23,510 --> 00:36:28,580
<font color="#E5E5E5">what is what the security</font><font color="#CCCCCC"> configuration</font>

852
00:36:25,340 --> 00:36:30,640
<font color="#CCCCCC">is supposed to</font><font color="#E5E5E5"> be said and where is the</font>

853
00:36:28,580 --> 00:36:33,340
sanity checks for different conditions

854
00:36:30,640 --> 00:36:36,379
<font color="#CCCCCC">that was really useful to understand</font>

855
00:36:33,340 --> 00:36:40,130
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> one thing we witches was an</font>

856
00:36:36,380 --> 00:36:42,620
entry point<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the vector table which is</font>

857
00:36:40,130 --> 00:36:44,990
<font color="#E5E5E5">basically the main code which is running</font>

858
00:36:42,620 --> 00:36:48,710
whenever any exception<font color="#E5E5E5"> happened and more</font>

859
00:36:44,990 --> 00:36:51,410
<font color="#E5E5E5">local digit code so</font><font color="#CCCCCC"> that was</font><font color="#E5E5E5"> I was</font>

860
00:36:48,710 --> 00:36:53,450
mentioned right<font color="#E5E5E5"> now that vector table so</font>

861
00:36:51,410 --> 00:36:55,759
first of all how we can find the<font color="#E5E5E5"> vector</font>

862
00:36:53,450 --> 00:36:59,000
<font color="#E5E5E5">table the pointer to the</font><font color="#CCCCCC"> vector</font><font color="#E5E5E5"> table</font>

863
00:36:55,760 --> 00:37:01,400
should<font color="#CCCCCC"> be stored</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> V</font><font color="#CCCCCC"> Bar el34 the</font>

864
00:36:59,000 --> 00:37:03,110
<font color="#E5E5E5">secure monitor so if you find somewhere</font>

865
00:37:01,400 --> 00:37:05,000
<font color="#E5E5E5">in the code</font><font color="#CCCCCC"> that someone set or read</font>

866
00:37:03,110 --> 00:37:07,130
<font color="#E5E5E5">that register and you will find the</font>

867
00:37:05,000 --> 00:37:09,500
constant of<font color="#E5E5E5"> the address of</font><font color="#CCCCCC"> the table</font>

868
00:37:07,130 --> 00:37:11,720
then from here you know the entry point

869
00:37:09,500 --> 00:37:14,870
of<font color="#E5E5E5"> this privileges level so from here</font>

870
00:37:11,720 --> 00:37:17,060
you can<font color="#CCCCCC"> find all of the handle from</font><font color="#E5E5E5"> smc</font>

871
00:37:14,870 --> 00:37:19,220
<font color="#E5E5E5">and some</font><font color="#CCCCCC"> C is</font><font color="#E5E5E5"> the event which is going</font>

872
00:37:17,060 --> 00:37:21,410
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the normal water</font><font color="#CCCCCC"> seeker</font><font color="#E5E5E5"> world</font><font color="#CCCCCC"> and</font>

873
00:37:19,220 --> 00:37:24,950
from there you can<font color="#CCCCCC"> analyze the</font><font color="#E5E5E5"> entire</font>

874
00:37:21,410 --> 00:37:28,310
flow and find<font color="#E5E5E5"> various the input input</font>

875
00:37:24,950 --> 00:37:31,390
<font color="#CCCCCC">buffer handlers set how</font><font color="#E5E5E5"> does it work and</font>

876
00:37:28,310 --> 00:37:34,220
find some software vulnerabilities there

877
00:37:31,390 --> 00:37:39,109
<font color="#E5E5E5">so here here is the example of</font><font color="#CCCCCC"> that</font>

878
00:37:34,220 --> 00:37:41,120
<font color="#CCCCCC">vector table and here is them SMC can</font>

879
00:37:39,110 --> 00:37:42,530
learn<font color="#CCCCCC"> as</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> Sikandar is basically one</font>

880
00:37:41,120 --> 00:37:45,980
of the main interface

881
00:37:42,530 --> 00:37:47,540
<font color="#CCCCCC">to that</font><font color="#E5E5E5"> razón and this interfaces often</font>

882
00:37:45,980 --> 00:37:52,310
use them to compromise the<font color="#CCCCCC"> trance on</font>

883
00:37:47,540 --> 00:37:54,650
itself form then they secure in the

884
00:37:52,310 --> 00:37:56,830
<font color="#CCCCCC">secure monitor in at razón</font><font color="#E5E5E5"> it's doing</font>

885
00:37:54,650 --> 00:37:59,120
just<font color="#CCCCCC"> one thing it's with written request</font>

886
00:37:56,830 --> 00:38:02,420
from the normal world to secure world

887
00:37:59,120 --> 00:38:05,240
and<font color="#E5E5E5"> for and then someone need to handle</font>

888
00:38:02,420 --> 00:38:07,370
<font color="#E5E5E5">that request and there is this the</font>

889
00:38:05,240 --> 00:38:09,649
transom<font color="#CCCCCC"> colonel doing this</font><font color="#E5E5E5"> so transom</font>

890
00:38:07,370 --> 00:38:11,960
<font color="#CCCCCC">Kimmel has something which is called SMC</font>

891
00:38:09,650 --> 00:38:13,700
<font color="#E5E5E5">services which is</font><font color="#CCCCCC"> handling their</font>

892
00:38:11,960 --> 00:38:16,070
specific<font color="#CCCCCC"> requests from</font><font color="#E5E5E5"> the normal world</font>

893
00:38:13,700 --> 00:38:18,020
and when<font color="#E5E5E5"> when the normal world trigger</font>

894
00:38:16,070 --> 00:38:19,280
this requested go into<font color="#E5E5E5"> secure monitor</font>

895
00:38:18,020 --> 00:38:21,680
and then secure monitor know where

896
00:38:19,280 --> 00:38:23,330
exactly<font color="#E5E5E5"> to call secure canal and it will</font>

897
00:38:21,680 --> 00:38:25,700
call secure<font color="#E5E5E5"> canal and</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> secure canal</font>

898
00:38:23,330 --> 00:38:29,420
will handle it<font color="#E5E5E5"> will figure out which of</font>

899
00:38:25,700 --> 00:38:33,290
the SMC<font color="#E5E5E5"> handler it want to call and then</font>

900
00:38:29,420 --> 00:38:35,780
call them<font color="#E5E5E5"> so they're supposed to be a</font>

901
00:38:33,290 --> 00:38:37,430
<font color="#CCCCCC">common convention between their security</font>

902
00:38:35,780 --> 00:38:39,410
that between<font color="#E5E5E5"> the normal one and secure</font>

903
00:38:37,430 --> 00:38:42,129
<font color="#E5E5E5">world because if there's any services in</font>

904
00:38:39,410 --> 00:38:45,020
<font color="#CCCCCC">trazadone like say you want to</font><font color="#E5E5E5"> get a</font>

905
00:38:42,130 --> 00:38:47,300
<font color="#E5E5E5">random</font><font color="#CCCCCC"> number</font><font color="#E5E5E5"> from random random number</font>

906
00:38:45,020 --> 00:38:49,030
generator<font color="#E5E5E5"> in an enormous machine it's</font>

907
00:38:47,300 --> 00:38:51,050
<font color="#E5E5E5">not that tree well there is no</font>

908
00:38:49,030 --> 00:38:53,180
instruction<font color="#E5E5E5"> which</font><font color="#CCCCCC"> has given you this</font>

909
00:38:51,050 --> 00:38:56,540
<font color="#E5E5E5">there is a random number</font><font color="#CCCCCC"> generator</font>

910
00:38:53,180 --> 00:38:58,279
<font color="#E5E5E5">device</font><font color="#CCCCCC"> but that device accessible just</font>

911
00:38:56,540 --> 00:38:59,840
<font color="#E5E5E5">from</font><font color="#CCCCCC"> trust</font><font color="#E5E5E5"> on so if you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get the</font>

912
00:38:58,280 --> 00:39:01,580
random number you<font color="#E5E5E5"> need to send a</font><font color="#CCCCCC"> request</font>

913
00:38:59,840 --> 00:39:03,290
<font color="#E5E5E5">to the trans</font><font color="#CCCCCC"> own that</font><font color="#E5E5E5"> ransom will talk</font>

914
00:39:01,580 --> 00:39:05,509
to the device and<font color="#CCCCCC"> you'll</font><font color="#E5E5E5"> provide you</font>

915
00:39:03,290 --> 00:39:07,580
that<font color="#CCCCCC"> number back</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the normal world</font><font color="#E5E5E5"> but</font>

916
00:39:05,510 --> 00:39:09,020
you need to know<font color="#CCCCCC"> the</font><font color="#E5E5E5"> column convention</font>

917
00:39:07,580 --> 00:39:11,360
between<font color="#CCCCCC"> normal boat and</font><font color="#E5E5E5"> secure</font><font color="#CCCCCC"> role</font>

918
00:39:09,020 --> 00:39:13,700
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> two ways to</font><font color="#CCCCCC"> do that you may want</font>

919
00:39:11,360 --> 00:39:15,740
to make a reverse engineering and figure

920
00:39:13,700 --> 00:39:17,359
<font color="#CCCCCC">out how does</font><font color="#E5E5E5"> the arguments is passing or</font>

921
00:39:15,740 --> 00:39:19,100
you can<font color="#E5E5E5"> just take a look an</font><font color="#CCCCCC"> open-source</font>

922
00:39:17,360 --> 00:39:20,990
<font color="#CCCCCC">implementation of the transom</font><font color="#E5E5E5"> drivers</font>

923
00:39:19,100 --> 00:39:23,120
which is<font color="#E5E5E5"> basically implementing this</font>

924
00:39:20,990 --> 00:39:26,569
interface and<font color="#CCCCCC"> you will see how does the</font>

925
00:39:23,120 --> 00:39:28,880
<font color="#CCCCCC">arguments pass on them and</font><font color="#E5E5E5"> they're :</font>

926
00:39:26,570 --> 00:39:30,770
convention working like this<font color="#E5E5E5"> if you have</font>

927
00:39:28,880 --> 00:39:32,360
less than<font color="#CCCCCC"> five</font><font color="#E5E5E5"> argument they will pass</font>

928
00:39:30,770 --> 00:39:34,190
<font color="#CCCCCC">on from their</font><font color="#E5E5E5"> general</font><font color="#CCCCCC"> purpose register</font>

929
00:39:32,360 --> 00:39:35,390
if you<font color="#E5E5E5"> have more than five argument they</font>

930
00:39:34,190 --> 00:39:39,110
are passing through general purpose

931
00:39:35,390 --> 00:39:41,509
register and the buffer<font color="#E5E5E5"> why it is</font>

932
00:39:39,110 --> 00:39:43,520
important because<font color="#E5E5E5"> we need to understand</font>

933
00:39:41,510 --> 00:39:45,620
we need<font color="#E5E5E5"> to understand how</font><font color="#CCCCCC"> does it work</font>

934
00:39:43,520 --> 00:39:47,270
for their attack purposes because<font color="#E5E5E5"> we</font>

935
00:39:45,620 --> 00:39:48,950
want to<font color="#E5E5E5"> build</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> pfizer we want to fast</font>

936
00:39:47,270 --> 00:39:51,860
this interface<font color="#CCCCCC"> and find the software</font><font color="#E5E5E5"> and</font>

937
00:39:48,950 --> 00:39:54,319
<font color="#E5E5E5">abilities</font><font color="#CCCCCC"> inside the SMC handlers</font><font color="#E5E5E5"> so</font>

938
00:39:51,860 --> 00:39:56,310
this is the SMC default handler which is

939
00:39:54,320 --> 00:40:00,300
basically chicken<font color="#E5E5E5"> the argument</font>

940
00:39:56,310 --> 00:40:04,320
and call in<font color="#E5E5E5"> the specific SMC handler</font><font color="#CCCCCC"> to</font>

941
00:40:00,300 --> 00:40:07,080
to manage the services the interest in

942
00:40:04,320 --> 00:40:10,500
part how does it work<font color="#CCCCCC"> that SMC default</font>

943
00:40:07,080 --> 00:40:12,450
handler has a bunch of sanity checks and

944
00:40:10,500 --> 00:40:14,460
one of the checks is basically<font color="#E5E5E5"> checking</font>

945
00:40:12,450 --> 00:40:16,080
that the arguments which<font color="#E5E5E5"> a person is</font><font color="#CCCCCC"> not</font>

946
00:40:14,460 --> 00:40:18,890
other sizes which is overlapping with

947
00:40:16,080 --> 00:40:21,540
<font color="#CCCCCC">stress on so basically it assuming that</font>

948
00:40:18,890 --> 00:40:24,180
first<font color="#E5E5E5"> argument is</font><font color="#CCCCCC"> address and second</font>

949
00:40:21,540 --> 00:40:25,920
argument is size and<font color="#CCCCCC"> it in this slicing</font>

950
00:40:24,180 --> 00:40:27,660
through arguments to making sure<font color="#E5E5E5"> that</font>

951
00:40:25,920 --> 00:40:29,940
<font color="#E5E5E5">they</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> not overlapping with</font><font color="#CCCCCC"> stress on</font>

952
00:40:27,660 --> 00:40:33,029
<font color="#E5E5E5">memory that is really smart</font><font color="#CCCCCC"> check</font>

953
00:40:29,940 --> 00:40:36,000
because<font color="#CCCCCC"> if we will compare</font><font color="#E5E5E5"> with x86 in</font>

954
00:40:33,030 --> 00:40:38,100
<font color="#CCCCCC">SMM implementation</font><font color="#E5E5E5"> there the default is</font>

955
00:40:36,000 --> 00:40:39,780
<font color="#CCCCCC">assume</font><font color="#E5E5E5"> handler doesn't have any send you</font>

956
00:40:38,100 --> 00:40:41,520
checks at all<font color="#E5E5E5"> so we just passing</font>

957
00:40:39,780 --> 00:40:45,630
arguments to specification<font color="#CCCCCC"> see handler</font>

958
00:40:41,520 --> 00:40:47,550
which is<font color="#E5E5E5"> making code less secure but in</font>

959
00:40:45,630 --> 00:40:49,590
enormous machine<font color="#E5E5E5"> specifically in</font>

960
00:40:47,550 --> 00:40:51,570
Qualcomm implementation<font color="#CCCCCC"> or</font><font color="#E5E5E5"> threads on</font>

961
00:40:49,590 --> 00:40:54,450
this<font color="#E5E5E5"> and this entry checks is pretty</font>

962
00:40:51,570 --> 00:40:56,910
smart<font color="#E5E5E5"> so then I already mentioned there</font>

963
00:40:54,450 --> 00:40:59,549
is SMC services which is<font color="#E5E5E5"> a normal</font><font color="#CCCCCC"> what</font>

964
00:40:56,910 --> 00:41:02,310
can call that SMC<font color="#CCCCCC"> service is</font><font color="#E5E5E5"> stored in a</font>

965
00:40:59,550 --> 00:41:04,080
<font color="#CCCCCC">table and you can find a table</font><font color="#E5E5E5"> in in the</font>

966
00:41:02,310 --> 00:41:06,360
binary<font color="#CCCCCC"> and then from there you can</font>

967
00:41:04,080 --> 00:41:08,580
<font color="#CCCCCC">reverse engineer every of the services</font>

968
00:41:06,360 --> 00:41:10,980
one by one and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the example</font><font color="#E5E5E5"> of</font>

969
00:41:08,580 --> 00:41:15,090
one<font color="#CCCCCC"> of the services the interesting part</font>

970
00:41:10,980 --> 00:41:18,240
of this<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> if there will be no</font><font color="#CCCCCC"> that</font>

971
00:41:15,090 --> 00:41:21,360
checks<font color="#E5E5E5"> there is a write primitive so</font>

972
00:41:18,240 --> 00:41:24,299
this handler<font color="#E5E5E5"> takes three arguments it</font>

973
00:41:21,360 --> 00:41:27,510
<font color="#CCCCCC">callin subroutine and subroutine</font><font color="#E5E5E5"> making</font>

974
00:41:24,300 --> 00:41:29,910
a right to one of<font color="#E5E5E5"> that arguments so in</font>

975
00:41:27,510 --> 00:41:32,010
the case if<font color="#E5E5E5"> there if their system</font>

976
00:41:29,910 --> 00:41:34,290
doesn't<font color="#CCCCCC"> hit that</font><font color="#E5E5E5"> checks which</font><font color="#CCCCCC"> I've shown</font>

977
00:41:32,010 --> 00:41:36,690
<font color="#CCCCCC">previously it will be a definite</font>

978
00:41:34,290 --> 00:41:39,000
<font color="#CCCCCC">venerability</font><font color="#E5E5E5"> but because they have that</font>

979
00:41:36,690 --> 00:41:41,790
<font color="#E5E5E5">really good sanity checks in the</font>

980
00:41:39,000 --> 00:41:44,220
beginning of the SMC flow that this code

981
00:41:41,790 --> 00:41:46,320
<font color="#E5E5E5">is</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> vulnerable it working fully</font>

982
00:41:44,220 --> 00:41:47,970
without any problems but<font color="#CCCCCC"> they still have</font>

983
00:41:46,320 --> 00:41:49,770
a<font color="#CCCCCC"> right primitive you just can override</font>

984
00:41:47,970 --> 00:41:51,600
<font color="#E5E5E5">anything outside the all the trays on</font>

985
00:41:49,770 --> 00:41:54,840
everything which is<font color="#E5E5E5"> not protected you</font>

986
00:41:51,600 --> 00:41:56,460
can<font color="#E5E5E5"> override by using this</font><font color="#CCCCCC"> and this is</font>

987
00:41:54,840 --> 00:41:59,910
<font color="#CCCCCC">MC</font><font color="#E5E5E5"> handler which we'll use later to</font>

988
00:41:56,460 --> 00:42:01,470
<font color="#CCCCCC">compromise hypervisor and as a really</font>

989
00:41:59,910 --> 00:42:05,220
interesting part and<font color="#CCCCCC"> a really important</font>

990
00:42:01,470 --> 00:42:07,290
trick is SLA dimension the SE C is the

991
00:42:05,220 --> 00:42:09,240
constant address and a memory of the

992
00:42:07,290 --> 00:42:09,650
devices is<font color="#CCCCCC"> the constant addresses in the</font>

993
00:42:09,240 --> 00:42:12,078
arm

994
00:42:09,650 --> 00:42:15,170
see<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that you can find the</font>

995
00:42:12,079 --> 00:42:17,809
<font color="#E5E5E5">addresses of the specific device and</font>

996
00:42:15,170 --> 00:42:19,640
then you can restore<font color="#E5E5E5"> what exactly this</font>

997
00:42:17,809 --> 00:42:21,740
<font color="#E5E5E5">is MC handler is doing based on</font>

998
00:42:19,640 --> 00:42:25,430
information from<font color="#E5E5E5"> the device so you kind</font>

999
00:42:21,740 --> 00:42:27,470
<font color="#E5E5E5">of increase your knowledge based on</font>

1000
00:42:25,430 --> 00:42:29,419
understanding of the addresses<font color="#E5E5E5"> which is</font>

1001
00:42:27,470 --> 00:42:33,049
using as a constant<font color="#E5E5E5"> inside the SMC</font>

1002
00:42:29,420 --> 00:42:35,210
handlers another another important trick

1003
00:42:33,049 --> 00:42:38,509
which<font color="#CCCCCC"> may</font><font color="#E5E5E5"> help you to build analysis in</font>

1004
00:42:35,210 --> 00:42:40,400
at<font color="#CCCCCC"> razón is error code so different flow</font>

1005
00:42:38,510 --> 00:42:43,430
has different error code<font color="#E5E5E5"> and when you</font>

1006
00:42:40,400 --> 00:42:45,049
send input to the SMC handler you can

1007
00:42:43,430 --> 00:42:47,029
basically<font color="#E5E5E5"> depends on the error code</font>

1008
00:42:45,049 --> 00:42:49,309
figure out what kind of flow you execute

1009
00:42:47,029 --> 00:42:51,440
and depends<font color="#E5E5E5"> on</font><font color="#CCCCCC"> that you may see the</font>

1010
00:42:49,309 --> 00:42:53,270
<font color="#E5E5E5">coverage you may adjust your input you</font>

1011
00:42:51,440 --> 00:42:56,020
can<font color="#E5E5E5"> find</font><font color="#CCCCCC"> the bad coverage</font>

1012
00:42:53,270 --> 00:42:59,180
unfortunately there is not there<font color="#CCCCCC"> is not</font>

1013
00:42:56,020 --> 00:43:01,460
unique error code for each flow so some

1014
00:42:59,180 --> 00:43:04,000
flow has the unique<font color="#CCCCCC"> records some of</font><font color="#E5E5E5"> them</font>

1015
00:43:01,460 --> 00:43:06,980
is not but it's still useful information

1016
00:43:04,000 --> 00:43:10,910
anyway and the last point when the last

1017
00:43:06,980 --> 00:43:14,180
<font color="#E5E5E5">point which will help us to to run tests</font>

1018
00:43:10,910 --> 00:43:16,759
Pfizer's and analyze the<font color="#CCCCCC"> system is the</font>

1019
00:43:14,180 --> 00:43:18,589
reverse<font color="#CCCCCC"> engineering</font><font color="#E5E5E5"> of the hypervisor</font>

1020
00:43:16,760 --> 00:43:20,809
<font color="#E5E5E5">the idea is</font><font color="#CCCCCC"> pretty much the same we need</font>

1021
00:43:18,589 --> 00:43:23,690
to find<font color="#CCCCCC"> a result vector</font><font color="#E5E5E5"> and we need to</font>

1022
00:43:20,809 --> 00:43:26,089
find a vector table<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> need to find</font>

1023
00:43:23,690 --> 00:43:28,130
a<font color="#E5E5E5"> configuration of the hypervisor</font><font color="#CCCCCC"> in a</font>

1024
00:43:26,089 --> 00:43:30,670
binary after we find this we can restore

1025
00:43:28,130 --> 00:43:33,079
<font color="#E5E5E5">that configure what what exactly</font>

1026
00:43:30,670 --> 00:43:36,260
hypervisor said what<font color="#E5E5E5"> paging</font><font color="#CCCCCC"> could use</font>

1027
00:43:33,079 --> 00:43:39,829
what kind<font color="#CCCCCC"> of translation and so on</font><font color="#E5E5E5"> that</font>

1028
00:43:36,260 --> 00:43:42,799
<font color="#E5E5E5">is example for example</font><font color="#CCCCCC"> a GT BR l l1</font><font color="#E5E5E5"> is</font>

1029
00:43:39,829 --> 00:43:46,369
the register which is showing<font color="#E5E5E5"> us then</font>

1030
00:43:42,799 --> 00:43:48,319
stage<font color="#CCCCCC"> one translation</font><font color="#E5E5E5"> table entry from</font>

1031
00:43:46,369 --> 00:43:50,900
here we can<font color="#E5E5E5"> restore all</font><font color="#CCCCCC"> of the stage one</font>

1032
00:43:48,319 --> 00:43:54,049
<font color="#E5E5E5">translation stage one it's like similar</font>

1033
00:43:50,900 --> 00:43:56,930
tomb in the<font color="#E5E5E5"> x86 we have two level of</font>

1034
00:43:54,049 --> 00:43:58,520
translation<font color="#E5E5E5"> from the guest</font><font color="#CCCCCC"> virtual</font>

1035
00:43:56,930 --> 00:44:00,529
address<font color="#CCCCCC"> to the guest physical address</font>

1036
00:43:58,520 --> 00:44:02,538
and<font color="#E5E5E5"> from</font><font color="#CCCCCC"> guest</font><font color="#E5E5E5"> physicalist to the host</font>

1037
00:44:00,529 --> 00:44:03,859
physical address<font color="#E5E5E5"> here the same but</font><font color="#CCCCCC"> it</font>

1038
00:44:02,539 --> 00:44:06,410
just call in stage one and stage two

1039
00:44:03,859 --> 00:44:08,240
stage one is from the guest<font color="#CCCCCC"> virtual</font>

1040
00:44:06,410 --> 00:44:10,520
address<font color="#CCCCCC"> two they</font><font color="#E5E5E5"> call intermediate</font>

1041
00:44:08,240 --> 00:44:12,348
<font color="#E5E5E5">physical address and then from</font>

1042
00:44:10,520 --> 00:44:17,329
intermediate regardless to<font color="#E5E5E5"> the host</font>

1043
00:44:12,349 --> 00:44:19,670
physical<font color="#CCCCCC"> is a</font><font color="#E5E5E5"> stage two so anyway we</font>

1044
00:44:17,329 --> 00:44:20,660
already<font color="#E5E5E5"> know details about something</font>

1045
00:44:19,670 --> 00:44:22,970
about hypervisor

1046
00:44:20,660 --> 00:44:25,069
<font color="#E5E5E5">something about razón but</font>

1047
00:44:22,970 --> 00:44:27,709
we need to go and take<font color="#E5E5E5"> a look G player</font>

1048
00:44:25,069 --> 00:44:31,670
on the attack vectors<font color="#E5E5E5"> and we start with</font>

1049
00:44:27,710 --> 00:44:34,819
<font color="#E5E5E5">zigzag</font><font color="#CCCCCC"> ec2</font><font color="#E5E5E5"> six run time attack vectors</font>

1050
00:44:31,670 --> 00:44:37,700
is pretty pretty<font color="#E5E5E5"> straightforward</font><font color="#CCCCCC"> you</font>

1051
00:44:34,819 --> 00:44:39,920
want to compromise<font color="#E5E5E5"> the SMM code from the</font>

1052
00:44:37,700 --> 00:44:42,290
from the hypervisor<font color="#CCCCCC"> or from the kernel</font>

1053
00:44:39,920 --> 00:44:43,730
<font color="#E5E5E5">or you want to compromise here now we</font>

1054
00:44:42,290 --> 00:44:44,300
want to compromise hypervisor from the

1055
00:44:43,730 --> 00:44:46,190
kernel

1056
00:44:44,300 --> 00:44:49,010
oh you want<font color="#E5E5E5"> to compromise from the</font>

1057
00:44:46,190 --> 00:44:52,540
kernel<font color="#CCCCCC"> SMM and then redirect</font><font color="#E5E5E5"> the attack</font>

1058
00:44:49,010 --> 00:44:55,190
to<font color="#CCCCCC"> the hypervisor so there is two main</font>

1059
00:44:52,540 --> 00:44:57,980
two main classes of the attack surface

1060
00:44:55,190 --> 00:44:59,720
<font color="#E5E5E5">one is</font><font color="#CCCCCC"> Carter configuration I remember</font>

1061
00:44:57,980 --> 00:45:01,250
when I show you<font color="#CCCCCC"> there 15 different when</font>

1062
00:44:59,720 --> 00:45:02,868
<font color="#CCCCCC">your abilities</font><font color="#E5E5E5"> which was spawned</font>

1063
00:45:01,250 --> 00:45:04,490
<font color="#E5E5E5">previously I called hardware</font>

1064
00:45:02,869 --> 00:45:08,150
configuration<font color="#E5E5E5"> because it's basically set</font>

1065
00:45:04,490 --> 00:45:10,009
in some registers<font color="#E5E5E5"> and another one is SMI</font>

1066
00:45:08,150 --> 00:45:11,780
handlers SMI handlers<font color="#E5E5E5"> it's really</font>

1067
00:45:10,010 --> 00:45:14,089
similar what is SMC handler in the

1068
00:45:11,780 --> 00:45:16,430
Army's it<font color="#CCCCCC"> Jacek aliy supporting some</font>

1069
00:45:14,089 --> 00:45:20,779
services which is necessary to<font color="#CCCCCC"> have</font><font color="#E5E5E5"> in a</font>

1070
00:45:16,430 --> 00:45:22,910
platform<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we will see an arm</font><font color="#E5E5E5"> there is</font>

1071
00:45:20,780 --> 00:45:24,589
<font color="#CCCCCC">a little</font><font color="#E5E5E5"> bit different story because arm</font>

1072
00:45:22,910 --> 00:45:26,868
has<font color="#CCCCCC"> more privileges level in a secure</font>

1073
00:45:24,589 --> 00:45:31,099
world<font color="#E5E5E5"> there is much more vectors attack</font>

1074
00:45:26,869 --> 00:45:33,050
is here<font color="#CCCCCC"> one of and because it Allah it</font>

1075
00:45:31,099 --> 00:45:35,089
creates a<font color="#E5E5E5"> lot of flexibility also</font>

1076
00:45:33,050 --> 00:45:39,230
<font color="#E5E5E5">creating new vectors of attack for</font>

1077
00:45:35,089 --> 00:45:41,089
<font color="#CCCCCC">example</font><font color="#E5E5E5"> translates translates is the</font>

1078
00:45:39,230 --> 00:45:45,170
transit application which<font color="#CCCCCC"> so which</font><font color="#E5E5E5"> is</font>

1079
00:45:41,089 --> 00:45:46,819
part<font color="#E5E5E5"> of the entire secure world so if</font>

1080
00:45:45,170 --> 00:45:48,440
somehow<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> compromise</font><font color="#CCCCCC"> translates</font>

1081
00:45:46,819 --> 00:45:50,810
then you can<font color="#CCCCCC"> build attack inside the</font>

1082
00:45:48,440 --> 00:45:53,210
<font color="#E5E5E5">secure world which is completely arm</font>

1083
00:45:50,810 --> 00:45:55,460
specific use cases there is no<font color="#E5E5E5"> analogy</font>

1084
00:45:53,210 --> 00:45:57,349
in x86<font color="#E5E5E5"> and that was interesting research</font>

1085
00:45:55,460 --> 00:45:59,180
published this year<font color="#E5E5E5"> which basically</font>

1086
00:45:57,349 --> 00:46:01,670
allowing<font color="#E5E5E5"> you to load the</font><font color="#CCCCCC"> vulnerable</font>

1087
00:45:59,180 --> 00:46:04,060
<font color="#E5E5E5">translate inside the secure world what</font>

1088
00:46:01,670 --> 00:46:07,310
this<font color="#E5E5E5"> allows you</font><font color="#CCCCCC"> to do as an attacker you</font>

1089
00:46:04,060 --> 00:46:09,740
want to release the update for<font color="#E5E5E5"> the</font>

1090
00:46:07,310 --> 00:46:11,420
<font color="#E5E5E5">translator</font><font color="#CCCCCC"> you take this update for the</font>

1091
00:46:09,740 --> 00:46:14,720
<font color="#CCCCCC">Translate you lower you</font>

1092
00:46:11,420 --> 00:46:17,750
you take them vulnerable translate you

1093
00:46:14,720 --> 00:46:19,399
load the<font color="#CCCCCC"> Venerable translate to the to</font>

1094
00:46:17,750 --> 00:46:21,829
the secure<font color="#E5E5E5"> world and then you can</font>

1095
00:46:19,400 --> 00:46:23,660
compromise now that<font color="#CCCCCC"> variable translate</font>

1096
00:46:21,829 --> 00:46:26,359
from<font color="#E5E5E5"> the normal world and then you can</font>

1097
00:46:23,660 --> 00:46:28,879
build the attack from<font color="#E5E5E5"> the translate to</font>

1098
00:46:26,359 --> 00:46:32,450
the to<font color="#E5E5E5"> compromise entire secure world</font>

1099
00:46:28,880 --> 00:46:35,960
<font color="#CCCCCC">and interestingly</font><font color="#E5E5E5"> that these attacks is</font>

1100
00:46:32,450 --> 00:46:38,330
<font color="#CCCCCC">not really</font><font color="#E5E5E5"> well investigated because</font>

1101
00:46:35,960 --> 00:46:41,180
<font color="#E5E5E5">no good methods how you can make an</font>

1102
00:46:38,330 --> 00:46:44,029
investigation<font color="#E5E5E5"> of the secure world if you</font>

1103
00:46:41,180 --> 00:46:45,919
compromise already translate what I mean

1104
00:46:44,030 --> 00:46:50,420
<font color="#CCCCCC">about that</font><font color="#E5E5E5"> if you analyze</font><font color="#CCCCCC"> security</font>

1105
00:46:45,920 --> 00:46:52,790
<font color="#CCCCCC">arnelle</font><font color="#E5E5E5"> mostly they try to make a checks</font>

1106
00:46:50,420 --> 00:46:55,480
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> input which is coming from the</font>

1107
00:46:52,790 --> 00:46:57,680
normal world<font color="#E5E5E5"> but there is not well</font>

1108
00:46:55,480 --> 00:47:00,320
<font color="#CCCCCC">well-tested the interface from the</font>

1109
00:46:57,680 --> 00:47:03,890
translate to the<font color="#E5E5E5"> secure canal and even</font>

1110
00:47:00,320 --> 00:47:05,990
<font color="#CCCCCC">in either this simple analysis you can</font>

1111
00:47:03,890 --> 00:47:08,089
find the buffer<font color="#E5E5E5"> of our vulnerabilities</font>

1112
00:47:05,990 --> 00:47:09,830
from translate to secure<font color="#E5E5E5"> canal and</font>

1113
00:47:08,089 --> 00:47:12,349
interestingly<font color="#E5E5E5"> that if you compromise</font>

1114
00:47:09,830 --> 00:47:14,480
<font color="#CCCCCC">secure there is no need</font><font color="#E5E5E5"> to compromise</font>

1115
00:47:12,349 --> 00:47:16,160
<font color="#E5E5E5">secure monitor because secure canal</font>

1116
00:47:14,480 --> 00:47:18,619
already have<font color="#CCCCCC"> access to all of</font><font color="#E5E5E5"> the</font>

1117
00:47:16,160 --> 00:47:20,930
<font color="#E5E5E5">devices so basically even with all of</font>

1118
00:47:18,619 --> 00:47:24,140
this flexibility<font color="#CCCCCC"> it still has a bunch of</font>

1119
00:47:20,930 --> 00:47:26,660
<font color="#CCCCCC">issues related to them architecture</font><font color="#E5E5E5"> and</font>

1120
00:47:24,140 --> 00:47:30,200
specifically because<font color="#E5E5E5"> there is not too</font>

1121
00:47:26,660 --> 00:47:33,819
<font color="#E5E5E5">many tools to validate the</font><font color="#CCCCCC"> 4 interface</font>

1122
00:47:30,200 --> 00:47:39,410
between<font color="#E5E5E5"> trust translate and secure</font><font color="#CCCCCC"> canal</font>

1123
00:47:33,820 --> 00:47:41,830
really interesting to research<font color="#E5E5E5"> so one</font><font color="#CCCCCC"> of</font>

1124
00:47:39,410 --> 00:47:43,790
the attack which I will fly really fast

1125
00:47:41,830 --> 00:47:46,700
which<font color="#E5E5E5"> is applicable for</font><font color="#CCCCCC"> both</font>

1126
00:47:43,790 --> 00:47:48,589
<font color="#CCCCCC">architectures DMA attack</font><font color="#E5E5E5"> pre-boot attack</font>

1127
00:47:46,700 --> 00:47:50,118
when you inject some of the boot

1128
00:47:48,589 --> 00:47:51,470
component during<font color="#E5E5E5"> the boot and you can</font>

1129
00:47:50,119 --> 00:47:53,330
own the<font color="#E5E5E5"> system</font>

1130
00:47:51,470 --> 00:47:58,490
this attack is applicable for<font color="#CCCCCC"> both</font>

1131
00:47:53,330 --> 00:47:59,990
systems<font color="#CCCCCC"> and in x86 there is a couple</font>

1132
00:47:58,490 --> 00:48:02,330
different<font color="#CCCCCC"> scenarios for</font><font color="#E5E5E5"> this attack as</font>

1133
00:47:59,990 --> 00:48:04,879
well<font color="#E5E5E5"> one of them is if you want to use</font>

1134
00:48:02,330 --> 00:48:08,089
the DMA attack<font color="#E5E5E5"> without any external</font>

1135
00:48:04,880 --> 00:48:10,070
device there is<font color="#E5E5E5"> also integrated graphic</font>

1136
00:48:08,089 --> 00:48:11,839
device which has DMA capability so if

1137
00:48:10,070 --> 00:48:14,359
you build<font color="#E5E5E5"> in the attack and</font><font color="#CCCCCC"> you need GMA</font>

1138
00:48:11,839 --> 00:48:18,589
capability you<font color="#E5E5E5"> can use just the graphic</font>

1139
00:48:14,359 --> 00:48:21,470
GMA<font color="#CCCCCC"> 2 to run it and for armed is</font>

1140
00:48:18,589 --> 00:48:25,040
basically<font color="#E5E5E5"> completely the same but for</font>

1141
00:48:21,470 --> 00:48:27,439
<font color="#E5E5E5">armed I didn't find any integrated GMA</font>

1142
00:48:25,040 --> 00:48:31,150
capability so if you want to<font color="#CCCCCC"> run DMA</font>

1143
00:48:27,440 --> 00:48:31,150
attack you need<font color="#E5E5E5"> to have external device</font>

1144
00:48:31,570 --> 00:48:39,080
now<font color="#E5E5E5"> poison pointer box we call it like</font>

1145
00:48:35,480 --> 00:48:42,680
this the vector is applicable for<font color="#CCCCCC"> both</font>

1146
00:48:39,080 --> 00:48:45,098
architectures<font color="#CCCCCC"> the vector is applicable</font>

1147
00:48:42,680 --> 00:48:48,250
for<font color="#CCCCCC"> both architectures the</font><font color="#E5E5E5"> main idea is</font>

1148
00:48:45,099 --> 00:48:50,020
you pass untrusted

1149
00:48:48,250 --> 00:48:52,480
buffer from<font color="#E5E5E5"> low privilege level for high</font>

1150
00:48:50,020 --> 00:48:56,790
<font color="#CCCCCC">privilege level and you pass the address</font>

1151
00:48:52,480 --> 00:49:01,030
of the high privilege level and then and

1152
00:48:56,790 --> 00:49:03,029
then if this<font color="#CCCCCC"> is can</font><font color="#E5E5E5"> you do have any</font>

1153
00:49:01,030 --> 00:49:10,240
question<font color="#E5E5E5"> excuse me</font>

1154
00:49:03,030 --> 00:49:11,920
<font color="#E5E5E5">do have any question okay</font><font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so in</font>

1155
00:49:10,240 --> 00:49:14,680
ecstasy<font color="#E5E5E5"> six system that</font><font color="#CCCCCC"> vector was</font>

1156
00:49:11,920 --> 00:49:16,690
investigated a lot and in<font color="#CCCCCC"> a</font><font color="#E5E5E5"> decade</font><font color="#CCCCCC"> too</font>

1157
00:49:14,680 --> 00:49:19,089
<font color="#CCCCCC">there is a</font><font color="#E5E5E5"> comb buffer which is</font>

1158
00:49:16,690 --> 00:49:21,280
<font color="#E5E5E5">interface to the SMM code and there is</font>

1159
00:49:19,090 --> 00:49:25,090
an<font color="#E5E5E5"> e TK one general purpose register is</font>

1160
00:49:21,280 --> 00:49:27,100
interfaced to the SMM code was a bunch

1161
00:49:25,090 --> 00:49:29,020
<font color="#E5E5E5">of research</font><font color="#CCCCCC"> about that</font><font color="#E5E5E5"> the main idea is</font>

1162
00:49:27,100 --> 00:49:31,450
<font color="#E5E5E5">if the attacker control in the address</font>

1163
00:49:29,020 --> 00:49:33,460
<font color="#E5E5E5">just overlapping with the decimal code</font>

1164
00:49:31,450 --> 00:49:35,290
and it<font color="#CCCCCC"> will allow to have a</font><font color="#E5E5E5"> right</font>

1165
00:49:33,460 --> 00:49:37,060
primitive which is basically in many

1166
00:49:35,290 --> 00:49:39,880
cases making privilege escalation to the

1167
00:49:37,060 --> 00:49:43,320
SMM<font color="#E5E5E5"> there is a reference to the work who</font>

1168
00:49:39,880 --> 00:49:45,400
if someone want to get<font color="#CCCCCC"> at more</font><font color="#E5E5E5"> deeply</font>

1169
00:49:43,320 --> 00:49:48,880
<font color="#E5E5E5">what what happened next</font>

1170
00:49:45,400 --> 00:49:52,330
if there is if<font color="#CCCCCC"> their hypervisor if there</font>

1171
00:49:48,880 --> 00:49:54,970
is<font color="#CCCCCC"> SMM call this vendor of making the</font>

1172
00:49:52,330 --> 00:49:57,069
fix which will check<font color="#CCCCCC"> that the pointer is</font>

1173
00:49:54,970 --> 00:49:59,200
not overlapping with<font color="#E5E5E5"> SMM</font><font color="#CCCCCC"> it's still not</font>

1174
00:49:57,070 --> 00:50:02,440
fixed<font color="#E5E5E5"> and fully the problem because in</font>

1175
00:49:59,200 --> 00:50:06,910
this case attacker can find<font color="#CCCCCC"> samsung else</font>

1176
00:50:02,440 --> 00:50:09,490
<font color="#E5E5E5">and point the pointer to that sensitive</font>

1177
00:50:06,910 --> 00:50:12,490
piece of<font color="#E5E5E5"> thin and making the right</font>

1178
00:50:09,490 --> 00:50:14,379
primitive to<font color="#E5E5E5"> there and you may ask what</font>

1179
00:50:12,490 --> 00:50:17,020
<font color="#CCCCCC">their scent is sensors</font><font color="#E5E5E5"> your thing is and</font>

1180
00:50:14,380 --> 00:50:20,170
in the x86 it can be hypervisor for

1181
00:50:17,020 --> 00:50:22,060
example because<font color="#CCCCCC"> SMM khan doesn't know</font>

1182
00:50:20,170 --> 00:50:24,280
the layout<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> hypervisor and</font><font color="#CCCCCC"> guest</font>

1183
00:50:22,060 --> 00:50:27,520
<font color="#E5E5E5">and in this case if you point in the</font>

1184
00:50:24,280 --> 00:50:29,260
pointer<font color="#E5E5E5"> of the hyper if you point in the</font>

1185
00:50:27,520 --> 00:50:31,210
address<font color="#E5E5E5"> of the hypervisor to</font><font color="#CCCCCC"> their samam</font>

1186
00:50:29,260 --> 00:50:33,540
<font color="#CCCCCC">SMM</font><font color="#E5E5E5"> doesn't check it it just write it</font>

1187
00:50:31,210 --> 00:50:37,180
there so in this case if there<font color="#E5E5E5"> is any</font>

1188
00:50:33,540 --> 00:50:40,720
guest has access to the SMI interface

1189
00:50:37,180 --> 00:50:43,960
can trigger SMI<font color="#CCCCCC"> SMI event it may</font>

1190
00:50:40,720 --> 00:50:47,799
override the hypervisor without even

1191
00:50:43,960 --> 00:50:52,390
having any issue in the in the firm

1192
00:50:47,800 --> 00:50:55,150
itself<font color="#E5E5E5"> so</font><font color="#CCCCCC"> initiative six there was a</font>

1193
00:50:52,390 --> 00:50:57,580
really<font color="#E5E5E5"> good investigated vector and then</font>

1194
00:50:55,150 --> 00:51:00,130
in<font color="#E5E5E5"> arm there is really similar vector</font>

1195
00:50:57,580 --> 00:51:02,049
for the<font color="#CCCCCC"> trans</font><font color="#E5E5E5"> on a runtime interface</font><font color="#CCCCCC"> smc</font>

1196
00:51:00,130 --> 00:51:04,240
so as some CSS<font color="#CCCCCC"> elements</font>

1197
00:51:02,050 --> 00:51:07,000
has also<font color="#E5E5E5"> interfaces a general purpose</font>

1198
00:51:04,240 --> 00:51:08,979
<font color="#E5E5E5">register when you pass arguments through</font>

1199
00:51:07,000 --> 00:51:10,630
that and for<font color="#E5E5E5"> example if there's some</font>

1200
00:51:08,980 --> 00:51:12,370
<font color="#CCCCCC">sick and are</font><font color="#E5E5E5"> supposed to write output</font>

1201
00:51:10,630 --> 00:51:14,170
buffer<font color="#E5E5E5"> you pass the</font><font color="#CCCCCC"> address of that</font>

1202
00:51:12,370 --> 00:51:16,900
output<font color="#E5E5E5"> buffer to general purpose</font>

1203
00:51:14,170 --> 00:51:20,260
register<font color="#E5E5E5"> exactly the same scenario</font><font color="#CCCCCC"> as in</font>

1204
00:51:16,900 --> 00:51:22,360
x86<font color="#E5E5E5"> one and there was bugs which found</font>

1205
00:51:20,260 --> 00:51:27,970
previously<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this in this specific</font>

1206
00:51:22,360 --> 00:51:29,350
vector<font color="#E5E5E5"> couple times in 2014 and 15</font><font color="#CCCCCC"> we</font>

1207
00:51:27,970 --> 00:51:32,049
create<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Pfizer to</font><font color="#E5E5E5"> check this</font><font color="#CCCCCC"> when</font>

1208
00:51:29,350 --> 00:51:35,200
this<font color="#E5E5E5"> vulnerability and in</font><font color="#CCCCCC"> Nexus 5 fixed</font>

1209
00:51:32,050 --> 00:51:37,420
<font color="#E5E5E5">6p and pixel there there there is really</font>

1210
00:51:35,200 --> 00:51:40,620
good sanity<font color="#CCCCCC"> check so that that vector is</font>

1211
00:51:37,420 --> 00:51:43,950
<font color="#E5E5E5">not really easy to find vulnerability in</font>

1212
00:51:40,620 --> 00:51:47,200
<font color="#E5E5E5">then another vector in arm was the</font>

1213
00:51:43,950 --> 00:51:51,160
<font color="#E5E5E5">double fetch or race condition so if you</font>

1214
00:51:47,200 --> 00:51:53,410
pass in<font color="#CCCCCC"> there big buffer Essen as an</font>

1215
00:51:51,160 --> 00:51:56,109
argument<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the SMC Handler and</font><font color="#E5E5E5"> is this</font>

1216
00:51:53,410 --> 00:51:58,779
buffer store it in the memory<font color="#E5E5E5"> then there</font>

1217
00:51:56,110 --> 00:52:01,840
is there can<font color="#CCCCCC"> be a case when this buffer</font>

1218
00:51:58,780 --> 00:52:03,490
can<font color="#CCCCCC"> be modified by</font><font color="#E5E5E5"> another CPU</font><font color="#CCCCCC"> and this</font>

1219
00:52:01,840 --> 00:52:06,100
is<font color="#E5E5E5"> really interesting vector because in</font>

1220
00:52:03,490 --> 00:52:09,370
in x86 this vector is not applicable at

1221
00:52:06,100 --> 00:52:12,730
all<font color="#E5E5E5"> because</font><font color="#CCCCCC"> when you call in the SMI</font><font color="#E5E5E5"> in</font>

1222
00:52:09,370 --> 00:52:14,290
x86 system the SMI is waiting until<font color="#E5E5E5"> all</font>

1223
00:52:12,730 --> 00:52:16,750
<font color="#E5E5E5">of the course will go in and</font><font color="#CCCCCC"> twist some</font>

1224
00:52:14,290 --> 00:52:19,300
<font color="#CCCCCC">M</font><font color="#E5E5E5"> so this vector is almost not</font>

1225
00:52:16,750 --> 00:52:21,310
applicable<font color="#CCCCCC"> to 86</font><font color="#E5E5E5"> but in army that's</font>

1226
00:52:19,300 --> 00:52:24,100
really a really good<font color="#E5E5E5"> vector because you</font>

1227
00:52:21,310 --> 00:52:26,259
can find you can<font color="#CCCCCC"> find by static analysis</font>

1228
00:52:24,100 --> 00:52:28,210
<font color="#CCCCCC">there buffer which is</font><font color="#E5E5E5"> passing from the</font>

1229
00:52:26,260 --> 00:52:32,650
normal<font color="#E5E5E5"> world to secure world and figure</font>

1230
00:52:28,210 --> 00:52:34,480
out is there any window<font color="#E5E5E5"> between using</font>

1231
00:52:32,650 --> 00:52:38,350
and check between<font color="#E5E5E5"> chicken and using that</font>

1232
00:52:34,480 --> 00:52:41,290
buffer<font color="#E5E5E5"> another vector</font><font color="#CCCCCC"> which is also</font>

1233
00:52:38,350 --> 00:52:43,810
applicable just<font color="#E5E5E5"> for arm is confused</font>

1234
00:52:41,290 --> 00:52:47,920
deputy attack when you pass and the

1235
00:52:43,810 --> 00:52:51,190
address of the trusted device<font color="#CCCCCC"> as in the</font>

1236
00:52:47,920 --> 00:52:52,600
<font color="#E5E5E5">general purpose register as</font><font color="#CCCCCC"> already</font>

1237
00:52:51,190 --> 00:52:54,670
<font color="#CCCCCC">mentioned there is two type of</font><font color="#E5E5E5"> device</font>

1238
00:52:52,600 --> 00:52:56,650
transit<font color="#CCCCCC"> an untrusted</font><font color="#E5E5E5"> trusted devices</font>

1239
00:52:54,670 --> 00:52:58,720
device which is just<font color="#E5E5E5"> accessible for the</font>

1240
00:52:56,650 --> 00:53:00,730
secure water fortress on<font color="#CCCCCC"> there</font><font color="#E5E5E5"> not</font>

1241
00:52:58,720 --> 00:53:02,770
<font color="#E5E5E5">accessible for the normal world but what</font>

1242
00:53:00,730 --> 00:53:05,290
attacker can do<font color="#E5E5E5"> because</font><font color="#CCCCCC"> attack</font><font color="#E5E5E5"> you know</font>

1243
00:53:02,770 --> 00:53:07,330
the address<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that secure device</font><font color="#CCCCCC"> it can</font>

1244
00:53:05,290 --> 00:53:08,770
pass the address<font color="#E5E5E5"> of the device as an</font>

1245
00:53:07,330 --> 00:53:12,279
argument<font color="#CCCCCC"> and ask</font>

1246
00:53:08,770 --> 00:53:14,590
<font color="#E5E5E5">smc handler to</font><font color="#CCCCCC"> override to make a right</font>

1247
00:53:12,280 --> 00:53:15,320
to that device<font color="#CCCCCC"> a really interesting</font>

1248
00:53:14,590 --> 00:53:17,120
vector

1249
00:53:15,320 --> 00:53:19,040
but unfortunately<font color="#E5E5E5"> we are on the Pfizer</font>

1250
00:53:17,120 --> 00:53:20,089
and<font color="#E5E5E5"> they have</font><font color="#CCCCCC"> Santa checks</font><font color="#E5E5E5"> for this as</font>

1251
00:53:19,040 --> 00:53:22,340
well

1252
00:53:20,090 --> 00:53:25,520
<font color="#CCCCCC">Google pixel actually has really good</font>

1253
00:53:22,340 --> 00:53:27,290
<font color="#E5E5E5">from that's why this vector is not</font>

1254
00:53:25,520 --> 00:53:28,730
applicable as well<font color="#E5E5E5"> but really</font><font color="#CCCCCC"> good</font>

1255
00:53:27,290 --> 00:53:32,770
<font color="#CCCCCC">vector may be applicable</font><font color="#E5E5E5"> for different</font>

1256
00:53:28,730 --> 00:53:36,020
as Isis and different<font color="#E5E5E5"> different system</font>

1257
00:53:32,770 --> 00:53:37,880
<font color="#E5E5E5">another vector which is really</font>

1258
00:53:36,020 --> 00:53:42,970
<font color="#CCCCCC">interesting but it more</font><font color="#E5E5E5"> applicable for</font>

1259
00:53:37,880 --> 00:53:42,970
the x86<font color="#E5E5E5"> and so that you mentioned about</font>

1260
00:53:43,030 --> 00:53:48,290
<font color="#CCCCCC">MMA you have different</font><font color="#E5E5E5"> devices and the</font>

1261
00:53:45,350 --> 00:53:50,390
difference between x86 and arm<font color="#E5E5E5"> so one</font>

1262
00:53:48,290 --> 00:53:53,330
more quick recap<font color="#E5E5E5"> you have a member your</font>

1263
00:53:50,390 --> 00:53:55,040
<font color="#E5E5E5">range which</font><font color="#CCCCCC"> is basically a transaction</font>

1264
00:53:53,330 --> 00:53:57,440
to<font color="#E5E5E5"> that range will go</font><font color="#CCCCCC"> directly</font><font color="#E5E5E5"> to the</font>

1265
00:53:55,040 --> 00:53:58,910
device and every time an operation

1266
00:53:57,440 --> 00:54:00,170
system<font color="#CCCCCC"> on</font><font color="#E5E5E5"> someone else want to talk to</font>

1267
00:53:58,910 --> 00:54:03,080
<font color="#E5E5E5">that device they talking through them</font>

1268
00:54:00,170 --> 00:54:06,020
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> arranged but in x86</font><font color="#CCCCCC"> MMA arranges</font>

1269
00:54:03,080 --> 00:54:08,569
for PC devices is relocatable<font color="#CCCCCC"> and the</font>

1270
00:54:06,020 --> 00:54:11,420
address phone for<font color="#E5E5E5"> this range is</font><font color="#CCCCCC"> storied</font>

1271
00:54:08,570 --> 00:54:14,440
in<font color="#CCCCCC"> MMA</font><font color="#E5E5E5"> your bar inside the piece a</font>

1272
00:54:11,420 --> 00:54:17,690
config space of this device so basically

1273
00:54:14,440 --> 00:54:19,520
operation system has capability or any

1274
00:54:17,690 --> 00:54:21,620
malicious driver has capability to

1275
00:54:19,520 --> 00:54:24,290
overlap<font color="#CCCCCC"> MMA arranged to any other</font>

1276
00:54:21,620 --> 00:54:26,509
location<font color="#CCCCCC"> in the memory</font><font color="#E5E5E5"> if this is if the</font>

1277
00:54:24,290 --> 00:54:28,460
MMA your bar is not locked<font color="#CCCCCC"> but in many</font>

1278
00:54:26,510 --> 00:54:30,350
cases<font color="#CCCCCC"> a Mario bar is</font><font color="#E5E5E5"> not locked</font><font color="#CCCCCC"> because</font>

1279
00:54:28,460 --> 00:54:32,900
they allow<font color="#CCCCCC"> an operation system</font><font color="#E5E5E5"> are</font>

1280
00:54:30,350 --> 00:54:34,790
<font color="#E5E5E5">located</font><font color="#CCCCCC"> in the bars</font><font color="#E5E5E5"> full for increase</font>

1281
00:54:32,900 --> 00:54:36,620
the flexibility of<font color="#E5E5E5"> the system because</font>

1282
00:54:34,790 --> 00:54:38,980
it's not<font color="#E5E5E5"> as</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> see and as</font><font color="#CCCCCC"> I see</font><font color="#E5E5E5"> you need</font>

1283
00:54:36,620 --> 00:54:41,779
to have a constant<font color="#CCCCCC"> but here you don't</font>

1284
00:54:38,980 --> 00:54:45,610
anyway because<font color="#E5E5E5"> of this attacker may</font>

1285
00:54:41,780 --> 00:54:48,710
overlap this MMA your bar with the SMM

1286
00:54:45,610 --> 00:54:51,740
and<font color="#E5E5E5"> billet built attack on and built</font>

1287
00:54:48,710 --> 00:54:53,600
attack on<font color="#E5E5E5"> top of this so when the</font>

1288
00:54:51,740 --> 00:54:55,580
transaction<font color="#CCCCCC"> going from the device</font><font color="#E5E5E5"> or to</font>

1289
00:54:53,600 --> 00:54:58,310
the device in this<font color="#E5E5E5"> case it will</font><font color="#CCCCCC"> not pass</font>

1290
00:54:55,580 --> 00:55:01,430
through<font color="#E5E5E5"> because</font><font color="#CCCCCC"> of the T SEC protection</font>

1291
00:54:58,310 --> 00:55:03,170
but<font color="#E5E5E5"> as</font><font color="#CCCCCC"> Sam M itself</font><font color="#E5E5E5"> has a bunch of</font>

1292
00:55:01,430 --> 00:55:05,419
<font color="#CCCCCC">right-handers which is region and right</font>

1293
00:55:03,170 --> 00:55:08,990
into<font color="#CCCCCC"> the devices and because of that</font>

1294
00:55:05,420 --> 00:55:12,710
when you overlap the MMA your bar<font color="#CCCCCC"> visit</font>

1295
00:55:08,990 --> 00:55:15,350
them<font color="#CCCCCC"> a</font><font color="#E5E5E5"> mama</font><font color="#CCCCCC"> your range with the SMM</font><font color="#E5E5E5"> and</font>

1296
00:55:12,710 --> 00:55:19,790
trigger a<font color="#CCCCCC"> surmise some of the semis may</font>

1297
00:55:15,350 --> 00:55:21,080
read or write to - the<font color="#E5E5E5"> to them s</font><font color="#CCCCCC"> mmm so</font>

1298
00:55:19,790 --> 00:55:23,509
basically you have sort<font color="#E5E5E5"> of right</font>

1299
00:55:21,080 --> 00:55:26,420
primitive<font color="#E5E5E5"> to</font><font color="#CCCCCC"> SMM</font><font color="#E5E5E5"> really interesting</font>

1300
00:55:23,510 --> 00:55:28,520
attack for<font color="#E5E5E5"> two reasons one</font><font color="#CCCCCC"> is this the</font>

1301
00:55:26,420 --> 00:55:29,090
concept is<font color="#E5E5E5"> really applicable to anywhere</font>

1302
00:55:28,520 --> 00:55:30,440
so every

1303
00:55:29,090 --> 00:55:32,120
time when you see the register which

1304
00:55:30,440 --> 00:55:33,800
<font color="#CCCCCC">contained the</font><font color="#E5E5E5"> address you always can</font>

1305
00:55:32,120 --> 00:55:35,150
<font color="#E5E5E5">overlap it</font><font color="#CCCCCC"> with more privileges level</font>

1306
00:55:33,800 --> 00:55:37,870
and see how<font color="#CCCCCC"> this memory</font><font color="#E5E5E5"> controller</font>

1307
00:55:35,150 --> 00:55:42,290
<font color="#CCCCCC">handles tracked this transaction</font><font color="#E5E5E5"> another</font>

1308
00:55:37,870 --> 00:55:43,910
interesting part of another interesting

1309
00:55:42,290 --> 00:55:45,950
part<font color="#E5E5E5"> of this attack because</font><font color="#CCCCCC"> in x86</font>

1310
00:55:43,910 --> 00:55:48,770
system it can<font color="#E5E5E5"> be really applicable for</font>

1311
00:55:45,950 --> 00:55:51,649
example<font color="#CCCCCC"> a spy bar which is relocatable</font>

1312
00:55:48,770 --> 00:55:54,080
spy and<font color="#CCCCCC"> not lockable</font><font color="#E5E5E5"> you have really</font>

1313
00:55:51,650 --> 00:55:55,610
good control of this bar and you have

1314
00:55:54,080 --> 00:55:57,620
<font color="#E5E5E5">really</font><font color="#CCCCCC"> good control of</font><font color="#E5E5E5"> the data which</font><font color="#CCCCCC"> is</font>

1315
00:55:55,610 --> 00:55:59,510
using to this bar<font color="#E5E5E5"> so with this bar you</font>

1316
00:55:57,620 --> 00:56:00,770
have really great<font color="#E5E5E5"> right payment</font><font color="#CCCCCC"> tree</font>

1317
00:55:59,510 --> 00:56:05,690
which<font color="#E5E5E5"> you can use to</font><font color="#CCCCCC"> make a</font><font color="#E5E5E5"> pretty much</font>

1318
00:56:00,770 --> 00:56:07,520
<font color="#E5E5E5">escalation to the SMM code and in arm we</font>

1319
00:56:05,690 --> 00:56:10,070
<font color="#CCCCCC">can try</font><font color="#E5E5E5"> to apply the same attitude ology</font>

1320
00:56:07,520 --> 00:56:12,110
we can try to<font color="#E5E5E5"> find the registers overlap</font>

1321
00:56:10,070 --> 00:56:14,810
with<font color="#CCCCCC"> resume</font><font color="#E5E5E5"> memory and see how does the</font>

1322
00:56:12,110 --> 00:56:16,730
<font color="#E5E5E5">memory controller handle it</font><font color="#CCCCCC"> but because</font>

1323
00:56:14,810 --> 00:56:18,259
<font color="#E5E5E5">we don't know all of the register which</font>

1324
00:56:16,730 --> 00:56:21,200
contain the addresses because<font color="#E5E5E5"> we don't</font>

1325
00:56:18,260 --> 00:56:23,620
know all of the layout of the SSE<font color="#E5E5E5"> it's</font>

1326
00:56:21,200 --> 00:56:25,850
not really easy<font color="#E5E5E5"> to apply</font><font color="#CCCCCC"> this vector</font>

1327
00:56:23,620 --> 00:56:30,319
with all of the variation of<font color="#E5E5E5"> this vector</font>

1328
00:56:25,850 --> 00:56:33,650
<font color="#E5E5E5">to the arm system now</font><font color="#CCCCCC"> we come</font><font color="#E5E5E5"> into the</font>

1329
00:56:30,320 --> 00:56:39,620
first<font color="#CCCCCC"> two</font><font color="#E5E5E5"> the first sort of attack which</font>

1330
00:56:33,650 --> 00:56:42,230
was done in x86 system to the Windows<font color="#CCCCCC"> 10</font>

1331
00:56:39,620 --> 00:56:45,080
so Windows 10 has the<font color="#E5E5E5"> technology VBS</font>

1332
00:56:42,230 --> 00:56:48,850
<font color="#E5E5E5">realization basic</font><font color="#CCCCCC"> security or VBS is</font>

1333
00:56:45,080 --> 00:56:53,420
<font color="#E5E5E5">also sometimes called</font><font color="#CCCCCC"> VSM retardation</font>

1334
00:56:48,850 --> 00:56:56,480
<font color="#E5E5E5">security</font><font color="#CCCCCC"> some something so the idea of</font>

1335
00:56:53,420 --> 00:56:58,670
that technology<font color="#E5E5E5"> is Windows 10</font><font color="#CCCCCC"> you can</font>

1336
00:56:56,480 --> 00:57:01,970
enable the hypervisor<font color="#E5E5E5"> and the hypervisor</font>

1337
00:56:58,670 --> 00:57:04,940
will create the<font color="#E5E5E5"> secure VM which is</font>

1338
00:57:01,970 --> 00:57:06,770
<font color="#E5E5E5">really trusted small VM and inside</font><font color="#CCCCCC"> that</font>

1339
00:57:04,940 --> 00:57:08,600
secure VM there will be some secrets

1340
00:57:06,770 --> 00:57:12,080
like credentials<font color="#E5E5E5"> of the domain or</font>

1341
00:57:08,600 --> 00:57:13,850
something like this<font color="#E5E5E5"> and the idea is if</font>

1342
00:57:12,080 --> 00:57:15,650
the attacker<font color="#E5E5E5"> will compromise normal</font>

1343
00:57:13,850 --> 00:57:20,690
world<font color="#E5E5E5"> and compromise justice system</font>

1344
00:57:15,650 --> 00:57:22,820
<font color="#E5E5E5">which user use then it will not find</font>

1345
00:57:20,690 --> 00:57:24,650
that that credentials it will not find

1346
00:57:22,820 --> 00:57:28,430
the domain credentials<font color="#E5E5E5"> the idea is</font>

1347
00:57:24,650 --> 00:57:29,750
really awesome<font color="#E5E5E5"> and the way how they</font>

1348
00:57:28,430 --> 00:57:31,460
think<font color="#E5E5E5"> about this technology</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> really</font>

1349
00:57:29,750 --> 00:57:33,020
great because<font color="#CCCCCC"> you have the retinas</font><font color="#E5E5E5"> Asian</font>

1350
00:57:31,460 --> 00:57:35,600
technology<font color="#E5E5E5"> why not use this technology</font>

1351
00:57:33,020 --> 00:57:36,410
to<font color="#CCCCCC"> make an insulated container</font><font color="#E5E5E5"> the idea</font>

1352
00:57:35,600 --> 00:57:39,110
is really great

1353
00:57:36,410 --> 00:57:41,060
the issue is implementation<font color="#E5E5E5"> because the</font>

1354
00:57:39,110 --> 00:57:42,770
normal world has all of the excesses to

1355
00:57:41,060 --> 00:57:45,049
the<font color="#E5E5E5"> former interfaces</font><font color="#CCCCCC"> it</font>

1356
00:57:42,770 --> 00:57:47,690
<font color="#CCCCCC">access</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the MMA of bars</font><font color="#E5E5E5"> it has access</font>

1357
00:57:45,050 --> 00:57:49,970
to the<font color="#E5E5E5"> SMI handlers it has accesses to a</font>

1358
00:57:47,690 --> 00:57:52,700
<font color="#CCCCCC">triple</font><font color="#E5E5E5"> screen so any attack through the</font>

1359
00:57:49,970 --> 00:57:54,980
through the<font color="#E5E5E5"> through the</font><font color="#CCCCCC"> framework</font><font color="#E5E5E5"> can't</font>

1360
00:57:52,700 --> 00:57:58,129
compromise hypervisor and<font color="#E5E5E5"> the secure VM</font>

1361
00:57:54,980 --> 00:57:59,870
and especially the one which I've

1362
00:57:58,130 --> 00:58:02,720
explained it<font color="#E5E5E5"> previously</font><font color="#CCCCCC"> that's my</font>

1363
00:57:59,870 --> 00:58:05,000
pointer then<font color="#E5E5E5"> damn mio bar overlap all of</font>

1364
00:58:02,720 --> 00:58:07,609
them is<font color="#E5E5E5"> applicable but even if there is</font>

1365
00:58:05,000 --> 00:58:10,460
no issue<font color="#CCCCCC"> in the firmware itself there</font>

1366
00:58:07,610 --> 00:58:12,650
still can<font color="#E5E5E5"> be the framer can be used as a</font>

1367
00:58:10,460 --> 00:58:14,540
confused deputy attack<font color="#E5E5E5"> to the</font>

1368
00:58:12,650 --> 00:58:16,000
<font color="#CCCCCC">compromised hypervisor because again I</font>

1369
00:58:14,540 --> 00:58:18,500
<font color="#E5E5E5">said what you mentioned</font><font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> times</font>

1370
00:58:16,000 --> 00:58:20,810
<font color="#CCCCCC">SMM doesn't know the layout</font><font color="#E5E5E5"> of the</font>

1371
00:58:18,500 --> 00:58:22,940
<font color="#E5E5E5">hypervisor and the VMS and if you have</font>

1372
00:58:20,810 --> 00:58:25,549
<font color="#E5E5E5">access to that so my handler interface</font>

1373
00:58:22,940 --> 00:58:28,940
and the normal world has<font color="#CCCCCC"> Dax's to that</font>

1374
00:58:25,550 --> 00:58:31,040
<font color="#E5E5E5">interface then you can trigger the SMI</font>

1375
00:58:28,940 --> 00:58:33,250
with the<font color="#E5E5E5"> address of the hypervisor</font><font color="#CCCCCC"> and</font>

1376
00:58:31,040 --> 00:58:35,779
<font color="#E5E5E5">over and over at</font><font color="#CCCCCC"> the hypervisor and</font>

1377
00:58:33,250 --> 00:58:38,420
<font color="#CCCCCC">there was an attack demonstrated in a</font>

1378
00:58:35,780 --> 00:58:41,090
couple<font color="#CCCCCC"> years ago the interestingly</font><font color="#E5E5E5"> is</font>

1379
00:58:38,420 --> 00:58:43,580
<font color="#CCCCCC">that Microsoft</font><font color="#E5E5E5"> related update what</font>

1380
00:58:41,090 --> 00:58:45,290
dimension is they created a CPI table

1381
00:58:43,580 --> 00:58:48,620
<font color="#E5E5E5">which is basically having</font><font color="#CCCCCC"> their</font>

1382
00:58:45,290 --> 00:58:50,870
configure<font color="#E5E5E5"> storage that this table is</font>

1383
00:58:48,620 --> 00:58:53,330
represent where is the buffer supposed

1384
00:58:50,870 --> 00:58:55,759
to be for<font color="#E5E5E5"> the output for the SMI</font>

1385
00:58:53,330 --> 00:58:58,100
handlers<font color="#E5E5E5"> what this mean</font><font color="#CCCCCC"> is that this</font>

1386
00:58:55,760 --> 00:58:59,690
table<font color="#E5E5E5"> is</font><font color="#CCCCCC"> basically a sort of colon</font>

1387
00:58:58,100 --> 00:59:02,060
convention between<font color="#E5E5E5"> the operation system</font>

1388
00:58:59,690 --> 00:59:04,100
<font color="#CCCCCC">the hypervisor and</font><font color="#E5E5E5"> the firmware</font><font color="#CCCCCC"> where's</font>

1389
00:59:02,060 --> 00:59:06,020
<font color="#E5E5E5">the buffer supposed to be and this is</font>

1390
00:59:04,100 --> 00:59:08,330
<font color="#E5E5E5">really good it prevents in the assumed</font>

1391
00:59:06,020 --> 00:59:09,820
I'd poison pointer attacks<font color="#E5E5E5"> but it's not</font>

1392
00:59:08,330 --> 00:59:12,230
<font color="#E5E5E5">preventing as attacks for example</font>

1393
00:59:09,820 --> 00:59:14,420
<font color="#E5E5E5">attacks when you can overlap them</font><font color="#CCCCCC"> Emma</font>

1394
00:59:12,230 --> 00:59:17,630
your bar<font color="#E5E5E5"> this one is not preventing so</font>

1395
00:59:14,420 --> 00:59:20,720
<font color="#CCCCCC">there</font><font color="#E5E5E5"> just as a partial fix and another</font>

1396
00:59:17,630 --> 00:59:22,670
<font color="#E5E5E5">point is this is just a</font><font color="#CCCCCC"> spec</font><font color="#E5E5E5"> now all of</font>

1397
00:59:20,720 --> 00:59:25,100
the<font color="#CCCCCC"> vendors all of the</font><font color="#E5E5E5"> BIOS vendor need</font>

1398
00:59:22,670 --> 00:59:27,080
to apply this<font color="#E5E5E5"> fix and deliver the</font><font color="#CCCCCC"> buyers</font>

1399
00:59:25,100 --> 00:59:29,930
updates to all of the system and then<font color="#E5E5E5"> it</font>

1400
00:59:27,080 --> 00:59:31,549
will be it will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> fixed it but the spec</font>

1401
00:59:29,930 --> 00:59:34,580
is just explaining how it's supposed to

1402
00:59:31,550 --> 00:59:37,370
<font color="#E5E5E5">be</font><font color="#CCCCCC"> fix it now let's</font><font color="#E5E5E5"> come in back to the</font>

1403
00:59:34,580 --> 00:59:41,299
<font color="#E5E5E5">arm so we</font><font color="#CCCCCC"> got a lot of</font><font color="#E5E5E5"> knowledge about</font>

1404
00:59:37,370 --> 00:59:43,100
x86 about flexibility<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> harder'</font>

1405
00:59:41,300 --> 00:59:46,700
<font color="#E5E5E5">configuration different attack</font><font color="#CCCCCC"> vector so</font>

1406
00:59:43,100 --> 00:59:49,069
on and as I mentioned and not<font color="#CCCCCC"> all of</font>

1407
00:59:46,700 --> 00:59:51,680
<font color="#CCCCCC">them almost all of</font><font color="#E5E5E5"> the vectors which we</font>

1408
00:59:49,070 --> 00:59:53,870
<font color="#E5E5E5">tested previously not applicable to arm</font>

1409
00:59:51,680 --> 00:59:56,419
<font color="#CCCCCC">for some reason because they have sent</font>

1410
00:59:53,870 --> 00:59:58,578
each<font color="#E5E5E5"> X or architecture is not</font>

1411
00:59:56,420 --> 01:00:00,859
or something like<font color="#E5E5E5"> this then we start</font>

1412
00:59:58,579 --> 01:00:05,180
thinking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> okay</font>

1413
01:00:00,859 --> 01:00:07,400
we we want<font color="#E5E5E5"> to investigate a little bit</font>

1414
01:00:05,180 --> 01:00:09,890
<font color="#E5E5E5">the hypervisor</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that was really</font>

1415
01:00:07,400 --> 01:00:11,599
<font color="#E5E5E5">interesting because we want okay let's</font>

1416
01:00:09,890 --> 01:00:14,500
find the hypervisor in the memory in

1417
01:00:11,599 --> 01:00:20,390
arm-in-arm system there was<font color="#E5E5E5"> a Snapdragon</font>

1418
01:00:14,500 --> 01:00:23,029
<font color="#E5E5E5">808</font><font color="#CCCCCC"> 10 it</font><font color="#E5E5E5"> basically Google Nexus 6p then</font>

1419
01:00:20,390 --> 01:00:24,740
we find<font color="#CCCCCC"> the hypervisor</font><font color="#E5E5E5"> in memory we get</font>

1420
01:00:23,029 --> 01:00:26,480
the<font color="#E5E5E5"> address of the hypervisor we used</font>

1421
01:00:24,740 --> 01:00:29,299
the address in assam chief handler<font color="#E5E5E5"> and</font>

1422
01:00:26,480 --> 01:00:33,049
then<font color="#E5E5E5"> we override them the hypervisor</font>

1423
01:00:29,299 --> 01:00:36,288
<font color="#E5E5E5">using this and it was asking why why</font><font color="#CCCCCC"> it</font>

1424
01:00:33,049 --> 01:00:38,509
<font color="#CCCCCC">happened in</font><font color="#E5E5E5"> the first</font><font color="#CCCCCC"> place and then we</font>

1425
01:00:36,289 --> 01:00:41,869
start<font color="#CCCCCC"> thinking</font><font color="#E5E5E5"> about this more and one</font>

1426
01:00:38,510 --> 01:00:43,730
of the one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the things which which we</font>

1427
01:00:41,869 --> 01:00:45,950
<font color="#E5E5E5">asked ourselves why we even find the</font>

1428
01:00:43,730 --> 01:00:48,140
hypervisor<font color="#CCCCCC"> in</font><font color="#E5E5E5"> a memory because if you</font>

1429
01:00:45,950 --> 01:00:50,269
think<font color="#CCCCCC"> about that we run in our tool from</font>

1430
01:00:48,140 --> 01:00:52,549
the kernel and care no not supposed to

1431
01:00:50,269 --> 01:00:54,439
have the<font color="#E5E5E5"> access to the</font><font color="#CCCCCC"> hypervisor and he</font>

1432
01:00:52,549 --> 01:00:58,788
was<font color="#CCCCCC"> thinking</font><font color="#E5E5E5"> ok</font><font color="#CCCCCC"> maybe this is some old</font>

1433
01:00:54,440 --> 01:01:01,970
<font color="#E5E5E5">copy some some legacy copy of the</font>

1434
01:00:58,789 --> 01:01:03,529
hypervisor<font color="#CCCCCC"> which is was</font><font color="#E5E5E5"> not real</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> then</font>

1435
01:01:01,970 --> 01:01:05,209
we write to<font color="#E5E5E5"> the hypervisor</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> the</font>

1436
01:01:03,529 --> 01:01:11,150
system was rebooting so that was really

1437
01:01:05,210 --> 01:01:14,839
hypervisor<font color="#E5E5E5"> so</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> in Snapdragon 88 and a</font>

1438
01:01:11,150 --> 01:01:17,869
10 SOC s the hypervisor<font color="#E5E5E5"> is accessible</font>

1439
01:01:14,839 --> 01:01:19,819
from<font color="#CCCCCC"> the kernel</font><font color="#E5E5E5"> and this mean is all of</font>

1440
01:01:17,869 --> 01:01:22,759
the phone with generation of this like

1441
01:01:19,819 --> 01:01:25,009
<font color="#CCCCCC">Nexus</font><font color="#E5E5E5"> 5x and 6p</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> variable to this</font>

1442
01:01:22,759 --> 01:01:27,740
vulnerability<font color="#E5E5E5"> what this vulnerability</font>

1443
01:01:25,009 --> 01:01:29,599
allow us to do so because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have the</font>

1444
01:01:27,740 --> 01:01:31,160
read read read<font color="#E5E5E5"> write primitive to the</font>

1445
01:01:29,599 --> 01:01:33,440
hypervisor<font color="#CCCCCC"> we can make a</font><font color="#E5E5E5"> privilege</font>

1446
01:01:31,160 --> 01:01:36,710
<font color="#E5E5E5">escalation which will demonstrate</font><font color="#CCCCCC"> in</font>

1447
01:01:33,440 --> 01:01:39,920
later and and also we were thinking

1448
01:01:36,710 --> 01:01:41,539
<font color="#E5E5E5">about why in the first place when we</font>

1449
01:01:39,920 --> 01:01:43,309
read<font color="#E5E5E5"> the hypervisor from the original</font>

1450
01:01:41,539 --> 01:01:45,799
address we read the real hypervisor

1451
01:01:43,309 --> 01:01:47,750
because if there<font color="#E5E5E5"> will be a second level</font>

1452
01:01:45,799 --> 01:01:50,000
<font color="#CCCCCC">of translation</font><font color="#E5E5E5"> the other is supposed to</font>

1453
01:01:47,750 --> 01:01:52,630
<font color="#E5E5E5">be different</font><font color="#CCCCCC"> and we make an assumption</font>

1454
01:01:50,000 --> 01:01:55,250
that<font color="#E5E5E5"> the second of the second this</font>

1455
01:01:52,630 --> 01:01:57,789
second stage of the translation is

1456
01:01:55,250 --> 01:02:00,619
disabled and then we confirm it<font color="#CCCCCC"> at later</font>

1457
01:01:57,789 --> 01:02:02,569
<font color="#CCCCCC">so then we build</font><font color="#E5E5E5"> the attack scenario</font>

1458
01:02:00,619 --> 01:02:04,549
like<font color="#CCCCCC"> this</font><font color="#E5E5E5"> so from the from the malicious</font>

1459
01:02:02,569 --> 01:02:07,069
<font color="#E5E5E5">keyer know from the malicious driver we</font>

1460
01:02:04,549 --> 01:02:09,259
<font color="#CCCCCC">compromised the hypervisor</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> look down</font>

1461
01:02:07,069 --> 01:02:10,299
hypervisor so<font color="#E5E5E5"> now the hypervisor</font><font color="#CCCCCC"> is not</font>

1462
01:02:09,259 --> 01:02:13,150
accessible

1463
01:02:10,299 --> 01:02:15,400
was and then<font color="#CCCCCC"> be a backdoor hypervisor in</font>

1464
01:02:13,150 --> 01:02:17,079
a way that malicious application can

1465
01:02:15,400 --> 01:02:22,569
talk to the<font color="#E5E5E5"> hypervisor through memory</font>

1466
01:02:17,079 --> 01:02:27,729
and<font color="#E5E5E5"> ask accesses to</font><font color="#CCCCCC"> the kernel from</font><font color="#E5E5E5"> that</font>

1467
01:02:22,569 --> 01:02:30,099
<font color="#E5E5E5">interface to doing this we need to</font>

1468
01:02:27,729 --> 01:02:31,660
somehow<font color="#E5E5E5"> patch the hypervisor because we</font>

1469
01:02:30,099 --> 01:02:34,209
have a<font color="#CCCCCC"> writ primitive but it's not code</font>

1470
01:02:31,660 --> 01:02:36,249
execution<font color="#CCCCCC"> but remember when I</font><font color="#E5E5E5"> mentioned</font>

1471
01:02:34,209 --> 01:02:39,519
that<font color="#E5E5E5"> vector table is the entry</font><font color="#CCCCCC"> point to</font>

1472
01:02:36,249 --> 01:02:41,890
all<font color="#E5E5E5"> of them exception coming from low</font>

1473
01:02:39,519 --> 01:02:44,229
privileges level so in<font color="#E5E5E5"> vector table</font>

1474
01:02:41,890 --> 01:02:46,390
there<font color="#CCCCCC"> is some entry which is calling</font>

1475
01:02:44,229 --> 01:02:48,578
periodically like<font color="#CCCCCC"> periodically every</font>

1476
01:02:46,390 --> 01:02:51,069
couple seconds this interface will call

1477
01:02:48,579 --> 01:02:52,929
this<font color="#E5E5E5"> handler</font><font color="#CCCCCC"> and we</font><font color="#E5E5E5"> just find</font><font color="#CCCCCC"> this</font>

1478
01:02:51,069 --> 01:02:55,269
<font color="#E5E5E5">handler and</font><font color="#CCCCCC"> we'll patch the handle with</font>

1479
01:02:52,929 --> 01:02:58,359
our<font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> so we put our shellcode</font>

1480
01:02:55,269 --> 01:03:00,848
<font color="#E5E5E5">right to the right in the end of the</font>

1481
01:02:58,359 --> 01:03:04,058
<font color="#CCCCCC">function of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> older handler which is</font>

1482
01:03:00,849 --> 01:03:05,799
periodically<font color="#E5E5E5"> calling then what we what</font>

1483
01:03:04,059 --> 01:03:07,779
we<font color="#E5E5E5"> do what we design it we design it</font>

1484
01:03:05,799 --> 01:03:09,729
protocol<font color="#E5E5E5"> between application of</font>

1485
01:03:07,779 --> 01:03:11,890
hypervisor<font color="#E5E5E5"> so if application will store</font>

1486
01:03:09,729 --> 01:03:13,328
some magic number<font color="#CCCCCC"> then we know that</font>

1487
01:03:11,890 --> 01:03:14,859
after<font color="#E5E5E5"> this magic number there is a</font>

1488
01:03:13,329 --> 01:03:18,999
comment which<font color="#CCCCCC"> isn't supposed to</font><font color="#E5E5E5"> be</font>

1489
01:03:14,859 --> 01:03:21,459
<font color="#CCCCCC">running in the hypervisor so now we are</font>

1490
01:03:18,999 --> 01:03:24,038
<font color="#E5E5E5">in exploit exploit basically find that</font>

1491
01:03:21,459 --> 01:03:27,669
hypervisor<font color="#E5E5E5"> is open from the kernel it</font>

1492
01:03:24,039 --> 01:03:29,890
patch in the the<font color="#E5E5E5"> vector table then it is</font>

1493
01:03:27,670 --> 01:03:32,469
<font color="#E5E5E5">checking that the shellcode is stored</font>

1494
01:03:29,890 --> 01:03:35,828
there and then it<font color="#E5E5E5"> just leaving like</font><font color="#CCCCCC"> as</font>

1495
01:03:32,469 --> 01:03:37,449
<font color="#CCCCCC">is then we run our application and</font>

1496
01:03:35,829 --> 01:03:39,849
application basically<font color="#E5E5E5"> storing the</font>

1497
01:03:37,449 --> 01:03:44,949
comment which<font color="#CCCCCC"> wishes which basically</font>

1498
01:03:39,849 --> 01:03:49,660
asking to read the kernel memory from

1499
01:03:44,949 --> 01:03:51,699
<font color="#CCCCCC">that common common buffer</font><font color="#E5E5E5"> and then the</font>

1500
01:03:49,660 --> 01:03:54,029
hypervisor<font color="#E5E5E5"> scan in memory periodically</font>

1501
01:03:51,699 --> 01:03:57,279
<font color="#E5E5E5">because it</font><font color="#CCCCCC"> callin periodically because</font>

1502
01:03:54,029 --> 01:03:59,799
the the patch<font color="#E5E5E5"> itself is</font><font color="#CCCCCC"> calling couple</font>

1503
01:03:57,279 --> 01:04:02,229
times in a second and then it find this

1504
01:03:59,799 --> 01:04:03,788
magic<font color="#CCCCCC"> number and</font><font color="#E5E5E5"> know that them after</font>

1505
01:04:02,229 --> 01:04:07,718
the<font color="#E5E5E5"> magic number I have a comment and</font>

1506
01:04:03,789 --> 01:04:11,229
then<font color="#CCCCCC"> we execute</font><font color="#E5E5E5"> the comment but what is</font>

1507
01:04:07,719 --> 01:04:14,949
<font color="#E5E5E5">what this demo is about then you can</font>

1508
01:04:11,229 --> 01:04:17,468
<font color="#CCCCCC">purge the</font><font color="#E5E5E5"> hypervisor</font><font color="#CCCCCC"> and runtime</font><font color="#E5E5E5"> you can</font>

1509
01:04:14,949 --> 01:04:19,749
lock that<font color="#CCCCCC"> and backdoor it in in</font><font color="#E5E5E5"> the way</font>

1510
01:04:17,469 --> 01:04:22,509
you want in in the to specific

1511
01:04:19,749 --> 01:04:23,939
generation of a<font color="#CCCCCC"> shiva Snapdragon a zero</font>

1512
01:04:22,509 --> 01:04:27,430
eight and<font color="#E5E5E5"> eight</font>

1513
01:04:23,940 --> 01:04:29,620
so then we reported this back<font color="#E5E5E5"> and then</font>

1514
01:04:27,430 --> 01:04:32,319
as a result<font color="#E5E5E5"> we got the respondent this</font>

1515
01:04:29,620 --> 01:04:34,540
is this<font color="#E5E5E5"> behavior it's not exist anymore</font>

1516
01:04:32,320 --> 01:04:38,350
<font color="#E5E5E5">in next generation</font><font color="#CCCCCC"> so if you got</font><font color="#E5E5E5"> the</font>

1517
01:04:34,540 --> 01:04:40,810
next<font color="#E5E5E5"> of them</font><font color="#CCCCCC"> a Snapdragon 820</font><font color="#E5E5E5"> one which</font>

1518
01:04:38,350 --> 01:04:44,350
is<font color="#E5E5E5"> basically a Google pixel and that</font>

1519
01:04:40,810 --> 01:04:46,840
behavior<font color="#CCCCCC"> is not there</font><font color="#E5E5E5"> so meaning</font><font color="#CCCCCC"> that in</font>

1520
01:04:44,350 --> 01:04:48,730
a<font color="#E5E5E5"> Google pixel they</font><font color="#CCCCCC"> am making super good</font>

1521
01:04:46,840 --> 01:04:51,790
separation level between the<font color="#E5E5E5"> kernel and</font>

1522
01:04:48,730 --> 01:04:54,160
the<font color="#E5E5E5"> hypervisor</font><font color="#CCCCCC"> and then this vector</font><font color="#E5E5E5"> is</font>

1523
01:04:51,790 --> 01:04:56,350
not<font color="#E5E5E5"> applicable anymore</font><font color="#CCCCCC"> and then it's not</font>

1524
01:04:54,160 --> 01:04:58,660
applicable<font color="#E5E5E5"> through SMI handlers through</font>

1525
01:04:56,350 --> 01:05:01,569
SMC handlers as well<font color="#E5E5E5"> so if you pass the</font>

1526
01:04:58,660 --> 01:05:04,660
address<font color="#E5E5E5"> of them</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the hypervisor</font><font color="#CCCCCC"> to</font>

1527
01:05:01,570 --> 01:05:08,320
the SMC handler it will have the proper

1528
01:05:04,660 --> 01:05:09,759
check<font color="#E5E5E5"> as a result there is still two</font>

1529
01:05:08,320 --> 01:05:11,530
generation of the phone which is

1530
01:05:09,760 --> 01:05:14,320
<font color="#CCCCCC">vulnerable to</font><font color="#E5E5E5"> this vulnerability which</font>

1531
01:05:11,530 --> 01:05:16,390
is not<font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> that at all and and the fix</font>

1532
01:05:14,320 --> 01:05:21,010
was just in the<font color="#E5E5E5"> next</font><font color="#CCCCCC"> release they just</font>

1533
01:05:16,390 --> 01:05:23,589
<font color="#E5E5E5">change architecture anyway conclusion so</font>

1534
01:05:21,010 --> 01:05:25,120
<font color="#CCCCCC">increased awareness about architecture</font>

1535
01:05:23,590 --> 01:05:27,930
and<font color="#E5E5E5"> different issues which was not</font>

1536
01:05:25,120 --> 01:05:30,790
budget<font color="#E5E5E5"> or partial badly</font>

1537
01:05:27,930 --> 01:05:32,890
another is sort of supposed<font color="#E5E5E5"> to use</font>

1538
01:05:30,790 --> 01:05:35,170
<font color="#E5E5E5">hardware really properly meaning that we</font>

1539
01:05:32,890 --> 01:05:36,879
need to have<font color="#CCCCCC"> a</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> guidelines for</font>

1540
01:05:35,170 --> 01:05:39,190
the BIOS configuration for there's a<font color="#E5E5E5"> C</font>

1541
01:05:36,880 --> 01:05:41,200
configuration<font color="#CCCCCC"> to making sure</font><font color="#E5E5E5"> that all of</font>

1542
01:05:39,190 --> 01:05:42,820
<font color="#E5E5E5">the configuration set properly</font><font color="#CCCCCC"> and have</font>

1543
01:05:41,200 --> 01:05:47,410
the mechanism to check that

1544
01:05:42,820 --> 01:05:50,200
configuration<font color="#E5E5E5"> and x86 and arm has a lot</font>

1545
01:05:47,410 --> 01:05:52,899
of similar vectors<font color="#E5E5E5"> and architecture</font>

1546
01:05:50,200 --> 01:05:55,330
contingent architectures<font color="#E5E5E5"> can teach</font><font color="#CCCCCC"> each</font>

1547
01:05:52,900 --> 01:05:59,010
other<font color="#E5E5E5"> to understand how to make security</font>

1548
01:05:55,330 --> 01:05:59,009
<font color="#E5E5E5">better with this</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> done</font>

1549
01:06:00,900 --> 01:06:06,010
[Applause]

