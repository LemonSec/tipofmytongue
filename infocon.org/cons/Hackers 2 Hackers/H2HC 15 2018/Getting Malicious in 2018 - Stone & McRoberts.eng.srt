1
00:00:02,790 --> 00:00:08,570
[Music]

2
00:00:11,870 --> 00:00:17,580
hello my name is Maddie stone and this

3
00:00:15,120 --> 00:00:20,340
is Kylee McRoberts thank you all for

4
00:00:17,580 --> 00:00:22,349
making it back from lunch and so

5
00:00:20,340 --> 00:00:25,410
hopefully it's exciting keep you awake

6
00:00:22,350 --> 00:00:28,380
post lunch and we will dive into the

7
00:00:25,410 --> 00:00:31,560
trends that we've seen of Android mobile

8
00:00:28,380 --> 00:00:33,839
malware in the first half of 2018 and

9
00:00:31,560 --> 00:00:36,120
then really deep dive into four of the

10
00:00:33,840 --> 00:00:38,670
most impactful families what do they do

11
00:00:36,120 --> 00:00:41,690
why are they impactful what techniques

12
00:00:38,670 --> 00:00:44,700
do they use and things like that

13
00:00:41,690 --> 00:00:47,579
so first up as I said my name is Maddie

14
00:00:44,700 --> 00:00:49,559
stone I am a reverse engineer on Google

15
00:00:47,579 --> 00:00:51,390
Play protect or the Android security

16
00:00:49,559 --> 00:00:53,820
team at Google and I have about five

17
00:00:51,390 --> 00:01:00,660
years of experience before that doing

18
00:00:53,820 --> 00:01:03,120
hardware and firmware exploitation hi

19
00:01:00,660 --> 00:01:05,128
and I'm Kylie McRoberts so I'm a program

20
00:01:03,120 --> 00:01:07,560
manager on Google Play protect under

21
00:01:05,129 --> 00:01:09,630
Android security team and essentially if

22
00:01:07,560 --> 00:01:10,560
you think my accent sounds weird for an

23
00:01:09,630 --> 00:01:15,869
American it's because I'm actually

24
00:01:10,560 --> 00:01:17,340
Australian so let's not confuse that all

25
00:01:15,869 --> 00:01:18,659
right so as many said we're gonna be

26
00:01:17,340 --> 00:01:21,270
diving into some of the trends that

27
00:01:18,659 --> 00:01:22,740
we've seen in the first half of 2017 and

28
00:01:21,270 --> 00:01:24,270
then we're going to be looking at some

29
00:01:22,740 --> 00:01:26,399
of the technical details of some of the

30
00:01:24,270 --> 00:01:28,470
key families that we've seen impacting

31
00:01:26,400 --> 00:01:29,700
those trends but before we do I'm just

32
00:01:28,470 --> 00:01:30,900
going to take one or two minutes just to

33
00:01:29,700 --> 00:01:32,280
quickly tell you where that data is

34
00:01:30,900 --> 00:01:34,500
coming from so we're all on the same

35
00:01:32,280 --> 00:01:36,180
page and it's from Google Play protects

36
00:01:34,500 --> 00:01:39,900
so we'll quickly run over what it is and

37
00:01:36,180 --> 00:01:41,340
what the scope is firstly we're going to

38
00:01:39,900 --> 00:01:44,759
be referring a lot to potentially

39
00:01:41,340 --> 00:01:47,790
harmful applications or PHA so for us

40
00:01:44,759 --> 00:01:50,130
PHA is defined isn't up that could put

41
00:01:47,790 --> 00:01:53,159
the user their data or their device at

42
00:01:50,130 --> 00:01:55,380
risk so in many ways our definition of

43
00:01:53,159 --> 00:01:57,060
PHA is is fairly in line with sort of

44
00:01:55,380 --> 00:01:59,490
the traditional definitions of mobile

45
00:01:57,060 --> 00:02:02,250
malware that most people use a key

46
00:01:59,490 --> 00:02:04,320
difference is that for us PHA is defined

47
00:02:02,250 --> 00:02:06,000
by specific categories and I'll go into

48
00:02:04,320 --> 00:02:08,250
what they are later but the main

49
00:02:06,000 --> 00:02:10,410
takeaway for you guys is that those

50
00:02:08,250 --> 00:02:12,000
categories define the scope of the type

51
00:02:10,410 --> 00:02:12,650
of PHA or malware that we'll be

52
00:02:12,000 --> 00:02:17,120
discussing

53
00:02:12,650 --> 00:02:18,829
the trends so as I said where do we get

54
00:02:17,120 --> 00:02:21,379
that data from it comes from Google Play

55
00:02:18,829 --> 00:02:23,000
protect this slice adds lots of things

56
00:02:21,379 --> 00:02:25,280
but the main thing you guys need to know

57
00:02:23,000 --> 00:02:28,519
is that Google Play protect essentially

58
00:02:25,280 --> 00:02:30,290
scans devices which have it enabled and

59
00:02:28,519 --> 00:02:34,040
what we're doing is looking for evidence

60
00:02:30,290 --> 00:02:36,260
of paj so where we find PHA we show a

61
00:02:34,040 --> 00:02:38,420
user a warning to let them know that

62
00:02:36,260 --> 00:02:41,720
that exists on their device or in the

63
00:02:38,420 --> 00:02:43,458
cases of particularly harmful PHAs we

64
00:02:41,720 --> 00:02:48,139
can actually automatically block or

65
00:02:43,459 --> 00:02:51,260
uninstall that up for the user now

66
00:02:48,139 --> 00:02:53,359
because GPP or Google Play protect is

67
00:02:51,260 --> 00:02:55,489
covering over 2 billion devices in the

68
00:02:53,359 --> 00:02:58,970
ecosystem this really helps us to get

69
00:02:55,489 --> 00:03:01,700
some good insights into PHA trends over

70
00:02:58,970 --> 00:03:03,650
the years and it's that device base

71
00:03:01,700 --> 00:03:08,599
which we're going to be using today to

72
00:03:03,650 --> 00:03:11,000
pull out the trends so I mentioned for

73
00:03:08,599 --> 00:03:12,980
us PHA is defined by specific categories

74
00:03:11,000 --> 00:03:15,019
and those categories are listed here on

75
00:03:12,980 --> 00:03:16,668
the slide so if you're interested in the

76
00:03:15,019 --> 00:03:18,709
definitions of each one they are

77
00:03:16,669 --> 00:03:21,199
publicly available you can google them

78
00:03:18,709 --> 00:03:23,750
ironically and have a look at what we

79
00:03:21,199 --> 00:03:24,650
what we define for each category but as

80
00:03:23,750 --> 00:03:27,109
you can see some of them are fairly

81
00:03:24,650 --> 00:03:31,340
common and be familiar to everyone like

82
00:03:27,109 --> 00:03:32,810
ransomware phishing and Trojans one set

83
00:03:31,340 --> 00:03:34,849
of categories that I call out that might

84
00:03:32,810 --> 00:03:37,310
be less familiar are related to mobile

85
00:03:34,849 --> 00:03:40,608
billing fraud so essentially those

86
00:03:37,310 --> 00:03:42,590
applications that charge the user in an

87
00:03:40,609 --> 00:03:44,329
intentionally misleading way basically

88
00:03:42,590 --> 00:03:47,690
tricking the user into having charges

89
00:03:44,329 --> 00:03:49,639
against them and we divide those that

90
00:03:47,690 --> 00:03:51,440
particular category into three so you

91
00:03:49,639 --> 00:03:54,799
can see them listed here is SMS fraud

92
00:03:51,440 --> 00:03:57,519
toll fraud and call fraud we also have

93
00:03:54,799 --> 00:04:00,590
some categories up here which

94
00:03:57,519 --> 00:04:02,510
essentially can either modify or disable

95
00:04:00,590 --> 00:04:05,329
the inbuilt security features in Android

96
00:04:02,510 --> 00:04:07,970
and for that reason we define them at

97
00:04:05,329 --> 00:04:10,400
Google as PHA now we do understand that

98
00:04:07,970 --> 00:04:12,169
for some users those particular apps

99
00:04:10,400 --> 00:04:13,669
perform functions that they actually

100
00:04:12,169 --> 00:04:16,250
want and they actually want the

101
00:04:13,669 --> 00:04:18,199
applications but nonetheless we define

102
00:04:16,250 --> 00:04:20,599
it as PHA so that we can then show a

103
00:04:18,199 --> 00:04:22,490
warning to users particularly non power

104
00:04:20,599 --> 00:04:24,560
users who may not understand the risks

105
00:04:22,490 --> 00:04:25,850
but people can click through them so

106
00:04:24,560 --> 00:04:28,790
that's why you see those category

107
00:04:25,850 --> 00:04:31,370
is up here the last category that I'd

108
00:04:28,790 --> 00:04:33,260
just call out is hostile downloaders so

109
00:04:31,370 --> 00:04:35,870
for us that's defined as an application

110
00:04:33,260 --> 00:04:38,270
that basically downloads other PHA

111
00:04:35,870 --> 00:04:40,310
categories so these categories are

112
00:04:38,270 --> 00:04:41,390
basically the scope of the trends and

113
00:04:40,310 --> 00:04:44,690
the case studies that we're going to be

114
00:04:41,390 --> 00:04:46,370
looking at today so with that background

115
00:04:44,690 --> 00:04:49,700
in mind let's dive into some of the

116
00:04:46,370 --> 00:04:51,530
high-level trends to get us started so

117
00:04:49,700 --> 00:04:55,010
this is starting very broadly the slide

118
00:04:51,530 --> 00:04:57,859
shows the percentage of devices that are

119
00:04:55,010 --> 00:04:59,659
seen with one or more PHA on them in the

120
00:04:57,860 --> 00:05:02,600
ecosystem so we kind of defined this as

121
00:04:59,660 --> 00:05:04,700
the Android healthiness of the ecosystem

122
00:05:02,600 --> 00:05:06,470
and it's divided into two sections you

123
00:05:04,700 --> 00:05:08,539
can see the healthiness for Google Play

124
00:05:06,470 --> 00:05:11,030
specifically and then the yellow bar

125
00:05:08,540 --> 00:05:13,910
will show you the healthiness across the

126
00:05:11,030 --> 00:05:15,500
entire Android ecosystem so looking at

127
00:05:13,910 --> 00:05:18,950
the trends for the first half of this

128
00:05:15,500 --> 00:05:23,360
year compared to last year in 2017 we

129
00:05:18,950 --> 00:05:25,880
saw an average 0.82% of devices had one

130
00:05:23,360 --> 00:05:28,940
or more PHA in the entire ecosystem and

131
00:05:25,880 --> 00:05:31,550
then in the first half of 2018 we've

132
00:05:28,940 --> 00:05:34,730
seen that come down a little bit to 0.72

133
00:05:31,550 --> 00:05:36,350
percent in terms of the trend for Google

134
00:05:34,730 --> 00:05:39,110
Play as you can see it's pretty similar

135
00:05:36,350 --> 00:05:41,420
to what we saw last year bottom line

136
00:05:39,110 --> 00:05:43,220
being if you download apps exclusively

137
00:05:41,420 --> 00:05:45,950
from Google Play you're basically nine

138
00:05:43,220 --> 00:05:48,110
times less likely to have PHA put on

139
00:05:45,950 --> 00:05:52,820
your device compared to if you download

140
00:05:48,110 --> 00:05:55,310
apps from other sources still keeping it

141
00:05:52,820 --> 00:05:58,340
a really high level although the overall

142
00:05:55,310 --> 00:06:00,410
trend for 2018 so far is good we've seen

143
00:05:58,340 --> 00:06:03,409
the ecosystem become a little bit safer

144
00:06:00,410 --> 00:06:05,390
it does vary by country under the device

145
00:06:03,410 --> 00:06:06,890
is in so we've just pulled out ten

146
00:06:05,390 --> 00:06:09,740
different countries to give you a bit of

147
00:06:06,890 --> 00:06:11,990
an idea of that variance so for example

148
00:06:09,740 --> 00:06:14,330
you can see the top two the blue and the

149
00:06:11,990 --> 00:06:17,780
yellow line there indicate that for

150
00:06:14,330 --> 00:06:20,840
India and Indonesia you're more likely

151
00:06:17,780 --> 00:06:23,119
to get PHA on your device and they're

152
00:06:20,840 --> 00:06:25,669
above the global average compared to the

153
00:06:23,120 --> 00:06:26,930
bottom line in orange there indicates

154
00:06:25,670 --> 00:06:29,300
that in Japan

155
00:06:26,930 --> 00:06:34,280
you're less likely and it's lower lower

156
00:06:29,300 --> 00:06:36,919
than the global average all right so

157
00:06:34,280 --> 00:06:38,469
centering in on Google Play what did we

158
00:06:36,919 --> 00:06:39,969
see is the top ten PA

159
00:06:38,470 --> 00:06:42,340
categories for the first half of this

160
00:06:39,970 --> 00:06:44,980
year they're listed here in order of

161
00:06:42,340 --> 00:06:47,080
prevalence so in other words the most

162
00:06:44,980 --> 00:06:48,640
prevalent PHA category that we found on

163
00:06:47,080 --> 00:06:51,669
Google place so far this year was

164
00:06:48,640 --> 00:06:53,830
click-fraud and I'll go into that in a

165
00:06:51,670 --> 00:06:56,710
little bit more detail in a second

166
00:06:53,830 --> 00:06:58,870
following click-fraud with spyware and

167
00:06:56,710 --> 00:07:00,609
then SMS fraud which was one of those

168
00:06:58,870 --> 00:07:05,410
categories of mobile billing fraud that

169
00:07:00,610 --> 00:07:07,240
I mentioned earlier this is a similar

170
00:07:05,410 --> 00:07:10,090
slide but now we're showing the top ten

171
00:07:07,240 --> 00:07:11,590
categories outside of Google Play so as

172
00:07:10,090 --> 00:07:13,570
you can see it's a bit different in

173
00:07:11,590 --> 00:07:15,760
terms of the dominance of different PHA

174
00:07:13,570 --> 00:07:17,770
categories so this time for the first

175
00:07:15,760 --> 00:07:20,680
half of the year we saw back doors as

176
00:07:17,770 --> 00:07:22,390
the prevalent PHA category are followed

177
00:07:20,680 --> 00:07:28,000
by hostile downloaders and then

178
00:07:22,390 --> 00:07:30,310
privilege escalation all right I won't

179
00:07:28,000 --> 00:07:32,200
to go into for specific trends with you

180
00:07:30,310 --> 00:07:34,330
today and that we found interesting and

181
00:07:32,200 --> 00:07:38,020
that hopefully you will too and the

182
00:07:34,330 --> 00:07:39,550
first one of those is SMS fraud as you

183
00:07:38,020 --> 00:07:42,159
can see this slide actually goes back to

184
00:07:39,550 --> 00:07:44,320
2017 just to give you a bit of context

185
00:07:42,160 --> 00:07:47,440
for where we were heading into the year

186
00:07:44,320 --> 00:07:49,870
so essentially at the start of 2018 we

187
00:07:47,440 --> 00:07:51,910
were already at a spike in SMS fraud

188
00:07:49,870 --> 00:07:54,820
activity so it's really been a big focus

189
00:07:51,910 --> 00:07:58,750
for Google Play protect so far this year

190
00:07:54,820 --> 00:08:00,550
in particular we've seen PHA families in

191
00:07:58,750 --> 00:08:02,470
this category impacting the Southeast

192
00:08:00,550 --> 00:08:04,540
Asian region and that is actually going

193
00:08:02,470 --> 00:08:06,220
to give you the technical details for

194
00:08:04,540 --> 00:08:10,270
one of the primary families in that

195
00:08:06,220 --> 00:08:12,100
regard which is Brad SMS as well as run

196
00:08:10,270 --> 00:08:18,250
through Shinhwa which has some of these

197
00:08:12,100 --> 00:08:20,140
SMS fraud related behaviors as well the

198
00:08:18,250 --> 00:08:22,720
second trend that I wanted to go through

199
00:08:20,140 --> 00:08:24,640
was hostile downloaders so what was

200
00:08:22,720 --> 00:08:26,890
interesting is towards the end of last

201
00:08:24,640 --> 00:08:29,969
year we'd luckily seen a nice big drop

202
00:08:26,890 --> 00:08:32,140
in the prevalence of hostile downloaders

203
00:08:29,970 --> 00:08:33,580
that's it and that has been maintained

204
00:08:32,140 --> 00:08:35,799
throughout the first half of this year

205
00:08:33,580 --> 00:08:37,630
which is great but despite the fact that

206
00:08:35,799 --> 00:08:40,689
it's less prevalent is still a primary

207
00:08:37,630 --> 00:08:43,150
PHA category outside of play and so for

208
00:08:40,690 --> 00:08:44,830
that reason we keep you know continuing

209
00:08:43,150 --> 00:08:48,370
to put resources into trying to counter

210
00:08:44,830 --> 00:08:50,740
this particular PHA category in terms of

211
00:08:48,370 --> 00:08:52,180
why we think that drop has happened and

212
00:08:50,740 --> 00:08:54,339
how it's been maintained there's a

213
00:08:52,180 --> 00:08:56,859
couple of factors that we think are

214
00:08:54,339 --> 00:08:58,690
impacting it some of those include the

215
00:08:56,860 --> 00:09:01,120
fact that when our disallowing any kind

216
00:08:58,690 --> 00:09:03,760
of dynamic code download we've also

217
00:09:01,120 --> 00:09:06,700
improved the a sop detection support in

218
00:09:03,760 --> 00:09:08,170
both Android P and O and then lastly

219
00:09:06,700 --> 00:09:09,820
we've also removed the ability of

220
00:09:08,170 --> 00:09:13,089
hostile downloaders to install other

221
00:09:09,820 --> 00:09:15,490
apps so in general if there's a PHA on a

222
00:09:13,089 --> 00:09:17,560
device and it tries to install another

223
00:09:15,490 --> 00:09:20,140
app we'll show the user a warning

224
00:09:17,560 --> 00:09:21,369
regardless on that up to try and warn

225
00:09:20,140 --> 00:09:23,290
them of the fact that we know this is

226
00:09:21,370 --> 00:09:26,140
coming from a PHA you may want to be

227
00:09:23,290 --> 00:09:28,180
extra careful about what this is but in

228
00:09:26,140 --> 00:09:30,130
the case of a known hostile download on

229
00:09:28,180 --> 00:09:32,349
we actually automatically block that

230
00:09:30,130 --> 00:09:34,360
download to try and stop the spread of

231
00:09:32,350 --> 00:09:35,680
this particular category so we think

232
00:09:34,360 --> 00:09:37,779
those are the kind of factors which are

233
00:09:35,680 --> 00:09:39,399
leading into this trend but if anyone

234
00:09:37,779 --> 00:09:43,470
else is looking into this area and has

235
00:09:39,399 --> 00:09:43,470
any other insights and we'd love to chat

236
00:09:43,950 --> 00:09:48,640
the third trend we wanted to talk about

237
00:09:46,060 --> 00:09:50,739
was click-fraud now the data for here

238
00:09:48,640 --> 00:09:52,959
only goes back until December last year

239
00:09:50,740 --> 00:09:54,670
and obviously looking at the slide the

240
00:09:52,959 --> 00:09:56,260
trend looks pretty awful for the first

241
00:09:54,670 --> 00:09:58,689
half of the year but that's actually

242
00:09:56,260 --> 00:10:00,850
mainly because we only began enforcement

243
00:09:58,690 --> 00:10:02,740
against click-fraud in March of this

244
00:10:00,850 --> 00:10:06,100
year so hence you see that big lovely

245
00:10:02,740 --> 00:10:08,020
spike going on there in originally we

246
00:10:06,100 --> 00:10:09,760
didn't consider a clique fraud to be PHA

247
00:10:08,020 --> 00:10:12,250
and the main reason behind that is

248
00:10:09,760 --> 00:10:13,930
because of the actual limited user harm

249
00:10:12,250 --> 00:10:16,270
and when I mentioned that definition at

250
00:10:13,930 --> 00:10:19,300
the beginning usually our PHA categories

251
00:10:16,270 --> 00:10:21,760
focus in on that user harm aspect but it

252
00:10:19,300 --> 00:10:24,010
become increasingly apparent that while

253
00:10:21,760 --> 00:10:25,930
click-fraud may have limited user impact

254
00:10:24,010 --> 00:10:28,390
it was having a really significant

255
00:10:25,930 --> 00:10:30,219
impact on advertising networks and then

256
00:10:28,390 --> 00:10:32,290
by extension all the businesses and

257
00:10:30,220 --> 00:10:33,580
companies that they represent right so

258
00:10:32,290 --> 00:10:36,400
we're having significant harm to a

259
00:10:33,580 --> 00:10:38,650
different type of group and we decided

260
00:10:36,400 --> 00:10:41,319
that we couldn't keep ignoring that in

261
00:10:38,650 --> 00:10:43,600
our PHA categories and when we did start

262
00:10:41,320 --> 00:10:45,700
enforcement in March as you can see from

263
00:10:43,600 --> 00:10:50,040
that spike click-fraud really quickly

264
00:10:45,700 --> 00:10:52,060
became our top PHA category on play i

265
00:10:50,040 --> 00:10:54,579
think Maddie's going to be going into

266
00:10:52,060 --> 00:10:55,449
view SDK as a bit of an example of one

267
00:10:54,579 --> 00:10:59,500
of the families

268
00:10:55,450 --> 00:11:01,060
leading to this trend the last trend

269
00:10:59,500 --> 00:11:02,740
that I want to highlight before I let

270
00:11:01,060 --> 00:11:05,319
Maddie delve into some of the actual

271
00:11:02,740 --> 00:11:06,220
technical details of families impacting

272
00:11:05,320 --> 00:11:08,110
these trends is fish

273
00:11:06,220 --> 00:11:09,910
I think fishing is a really interesting

274
00:11:08,110 --> 00:11:12,790
one right it's a really high impact

275
00:11:09,910 --> 00:11:14,949
threat and so just serve idli so it's

276
00:11:12,790 --> 00:11:17,170
received a lot of press attention both

277
00:11:14,950 --> 00:11:19,990
last year and that's continued into the

278
00:11:17,170 --> 00:11:21,250
first half of this year but compared to

279
00:11:19,990 --> 00:11:23,170
the amount of press attention it gets

280
00:11:21,250 --> 00:11:25,300
it's actually a really small threat on

281
00:11:23,170 --> 00:11:27,760
Google Play you can see that last year

282
00:11:25,300 --> 00:11:29,260
obviously we had a lot of spikes but for

283
00:11:27,760 --> 00:11:30,819
the you know pretty much continuously

284
00:11:29,260 --> 00:11:33,939
throughout the first half of the year

285
00:11:30,820 --> 00:11:35,890
it's remained low the interesting story

286
00:11:33,940 --> 00:11:37,780
for us about this is why we've managed

287
00:11:35,890 --> 00:11:40,569
to bring the prevalence of fishing down

288
00:11:37,780 --> 00:11:43,150
there are still active fishing threats

289
00:11:40,570 --> 00:11:44,680
ongoing and one example is a fishing

290
00:11:43,150 --> 00:11:46,720
family that's actually trying to

291
00:11:44,680 --> 00:11:49,449
penetrate Google Play that targets

292
00:11:46,720 --> 00:11:50,860
Turkish banks so this is a good takeaway

293
00:11:49,450 --> 00:11:52,300
for us that when we're looking at these

294
00:11:50,860 --> 00:11:54,430
trends and deciding where to put

295
00:11:52,300 --> 00:11:57,010
resources and where to try and you know

296
00:11:54,430 --> 00:11:58,420
focus our efforts in fighting PHA that

297
00:11:57,010 --> 00:12:00,610
it's important not to take our eye off

298
00:11:58,420 --> 00:12:02,500
categories just because we've managed to

299
00:12:00,610 --> 00:12:04,150
decrease their prevalence you know

300
00:12:02,500 --> 00:12:05,980
malware authors are continuously trying

301
00:12:04,150 --> 00:12:08,370
to improve and trying to evade those

302
00:12:05,980 --> 00:12:11,110
detection efforts and this particular

303
00:12:08,370 --> 00:12:12,940
family that's typing Turkish banks is a

304
00:12:11,110 --> 00:12:15,580
good example of that we need to keep an

305
00:12:12,940 --> 00:12:17,710
eye out and keep trying to catch them

306
00:12:15,580 --> 00:12:20,260
before we see those trends spike up

307
00:12:17,710 --> 00:12:22,240
again so with that kind of context in

308
00:12:20,260 --> 00:12:25,840
mind I'll hand it over to Maddie to chat

309
00:12:22,240 --> 00:12:28,030
us through some of the examples thanks

310
00:12:25,840 --> 00:12:30,580
Kylie so now that we sort of understand

311
00:12:28,030 --> 00:12:32,620
what's the most current data of impact

312
00:12:30,580 --> 00:12:34,420
happening in the ecosystem let's talk

313
00:12:32,620 --> 00:12:36,880
into some of the most current techniques

314
00:12:34,420 --> 00:12:40,630
that the biggest families are using in

315
00:12:36,880 --> 00:12:41,830
order to have that big impact so the

316
00:12:40,630 --> 00:12:44,500
first family we're going to talk about

317
00:12:41,830 --> 00:12:49,030
is called Shinhwa Shinhwa is a botnet

318
00:12:44,500 --> 00:12:51,640
that is pretty complicated complex and

319
00:12:49,030 --> 00:12:54,400
its whole purpose is to do different

320
00:12:51,640 --> 00:12:56,310
types of ad fraud premium SMS fraud or

321
00:12:54,400 --> 00:13:00,730
install fraud

322
00:12:56,310 --> 00:13:03,280
so when kylie told us that for 2018 so

323
00:13:00,730 --> 00:13:05,500
far the biggest PHA category in the

324
00:13:03,280 --> 00:13:08,140
off-market space is backdoor that is

325
00:13:05,500 --> 00:13:12,880
largely because of the Shama botnet and

326
00:13:08,140 --> 00:13:14,680
so prior to March 2017 Shinhwa

327
00:13:12,880 --> 00:13:16,730
really pushed and tried to infiltrate

328
00:13:14,680 --> 00:13:18,829
Google Play

329
00:13:16,730 --> 00:13:20,930
after a lot of different defenses that

330
00:13:18,829 --> 00:13:23,769
we put in place and things like that

331
00:13:20,930 --> 00:13:26,930
they moved off of google play and then

332
00:13:23,769 --> 00:13:28,940
reevaluated re-strategize and decided to

333
00:13:26,930 --> 00:13:31,310
try and penetrate the side loaded off

334
00:13:28,940 --> 00:13:33,769
market area of android

335
00:13:31,310 --> 00:13:36,589
so we began detecting chinois in

336
00:13:33,769 --> 00:13:39,560
mid-2016 at that point as i said it was

337
00:13:36,589 --> 00:13:41,980
Google Play and it's still ongoing but

338
00:13:39,560 --> 00:13:44,630
now it's completely off of Google Play

339
00:13:41,980 --> 00:13:47,000
so for all of these families we go into

340
00:13:44,630 --> 00:13:49,579
I will give you a sample of the family

341
00:13:47,000 --> 00:13:52,130
via the sha-256 digests and I went ahead

342
00:13:49,579 --> 00:13:54,199
and put a short URL to the virustotal

343
00:13:52,130 --> 00:13:59,240
link in case you're trying to follow

344
00:13:54,199 --> 00:14:02,029
along so here's a first overview of what

345
00:13:59,240 --> 00:14:05,060
Shinhwa is so this image came from a

346
00:14:02,029 --> 00:14:07,370
blog post we did on Shinhwa back in 2017

347
00:14:05,060 --> 00:14:09,229
so this was when we had just a first

348
00:14:07,370 --> 00:14:11,779
couple of variants and we had worked to

349
00:14:09,230 --> 00:14:14,269
push it off of Google Play it still is

350
00:14:11,779 --> 00:14:17,779
overall the same though Shinhwa is four

351
00:14:14,269 --> 00:14:20,959
stages the first being the apk the last

352
00:14:17,779 --> 00:14:23,480
being a jar of the payloads so across

353
00:14:20,959 --> 00:14:25,219
that the different variants we're gonna

354
00:14:23,480 --> 00:14:28,220
go into today and how they continue to

355
00:14:25,220 --> 00:14:30,019
evolve is how they get or where they do

356
00:14:28,220 --> 00:14:32,360
each of these different stages and the

357
00:14:30,019 --> 00:14:34,220
functionality but overall the

358
00:14:32,360 --> 00:14:37,550
functionality for each of these stages

359
00:14:34,220 --> 00:14:40,970
has stayed the same so we see the apk

360
00:14:37,550 --> 00:14:44,120
that dynamically drops and unpacks Stage

361
00:14:40,970 --> 00:14:47,600
two which is a jar stage two's purpose

362
00:14:44,120 --> 00:14:49,699
is to decrypt and drop stage three which

363
00:14:47,600 --> 00:14:52,060
is an elf or native code within the

364
00:14:49,699 --> 00:14:54,949
Android application then stage three

365
00:14:52,060 --> 00:14:59,449
unpacks the final payload and drops that

366
00:14:54,949 --> 00:15:02,779
and starts it running so the very first

367
00:14:59,449 --> 00:15:05,630
variant we saw in late 2016 sort of goes

368
00:15:02,779 --> 00:15:10,490
along what I stated before of those four

369
00:15:05,630 --> 00:15:13,160
stages so first we saw this last three

370
00:15:10,490 --> 00:15:16,459
stages stages two through stages four

371
00:15:13,160 --> 00:15:18,469
we're all packed in encrypted in

372
00:15:16,459 --> 00:15:21,888
different files in the assets folder of

373
00:15:18,470 --> 00:15:24,920
the apk so Stage one starts runs general

374
00:15:21,889 --> 00:15:27,750
Java code which unpacks drops the jar

375
00:15:24,920 --> 00:15:30,910
each of these

376
00:15:27,750 --> 00:15:33,460
final or final three files all had

377
00:15:30,910 --> 00:15:38,079
dynamically generated file names so for

378
00:15:33,460 --> 00:15:40,570
example stage two was always assets / 32

379
00:15:38,080 --> 00:15:43,210
either lowercase or numerical characters

380
00:15:40,570 --> 00:15:46,180
so I have the regex listed of what their

381
00:15:43,210 --> 00:15:48,700
common file names were for variant 1 so

382
00:15:46,180 --> 00:15:50,770
variant ones first payload what they

383
00:15:48,700 --> 00:15:54,220
attempted to do was add general add

384
00:15:50,770 --> 00:15:56,439
fraud and install fraud what I mean by

385
00:15:54,220 --> 00:15:58,360
install fraud is if you think of a

386
00:15:56,440 --> 00:16:00,820
payload for this type of botnet their

387
00:15:58,360 --> 00:16:01,840
whole purpose is monetization so they're

388
00:16:00,820 --> 00:16:04,390
cut trying to come up with different

389
00:16:01,840 --> 00:16:06,430
ways to monetize the fact that they're

390
00:16:04,390 --> 00:16:08,080
on all these different devices so ad

391
00:16:06,430 --> 00:16:09,819
fraud is pretty general we hear about it

392
00:16:08,080 --> 00:16:12,400
a lot just different ways to defraud

393
00:16:09,820 --> 00:16:14,650
advertising networks but install fraud

394
00:16:12,400 --> 00:16:16,689
means hey we're going we're willing to

395
00:16:14,650 --> 00:16:18,550
sell you the fact that we're installed

396
00:16:16,690 --> 00:16:21,430
on all these devices and we'll install

397
00:16:18,550 --> 00:16:23,380
your applications as a developer also on

398
00:16:21,430 --> 00:16:26,079
these phones so that ties into sort of

399
00:16:23,380 --> 00:16:27,820
that hostile download or care category

400
00:16:26,080 --> 00:16:32,530
that Kylie was talking about before as

401
00:16:27,820 --> 00:16:35,440
well so variant one had an interesting

402
00:16:32,530 --> 00:16:38,470
but simple string obfuscation technique

403
00:16:35,440 --> 00:16:41,950
so it was used in both stage one and the

404
00:16:38,470 --> 00:16:43,930
stage two jar that we saw for variant

405
00:16:41,950 --> 00:16:46,420
one and so what you would see is there

406
00:16:43,930 --> 00:16:48,400
was one class within both stage 1 and

407
00:16:46,420 --> 00:16:51,760
stage 2 that just had these what looks

408
00:16:48,400 --> 00:16:54,880
like an integer array in there and but

409
00:16:51,760 --> 00:16:58,330
there were no strings at all in the in

410
00:16:54,880 --> 00:17:00,820
the classes and then you would see that

411
00:16:58,330 --> 00:17:04,420
this integer array was used in this one

412
00:17:00,820 --> 00:17:07,449
function so the next thing you would see

413
00:17:04,420 --> 00:17:08,740
is how was this function called and it

414
00:17:07,449 --> 00:17:11,230
was pretty simple they would call this

415
00:17:08,740 --> 00:17:13,209
function with two integers the intro

416
00:17:11,230 --> 00:17:15,670
first integer when you take a quick look

417
00:17:13,209 --> 00:17:18,670
at that function is the index of the

418
00:17:15,670 --> 00:17:20,650
value to start at in the rip array then

419
00:17:18,670 --> 00:17:22,810
the next integer is the length a number

420
00:17:20,650 --> 00:17:25,990
of values from the array to read so in

421
00:17:22,810 --> 00:17:30,700
this case a 29 comma 8 would give us

422
00:17:25,990 --> 00:17:33,940
these eight integer values 111 110 67

423
00:17:30,700 --> 00:17:36,250
and then it was as simple as that is the

424
00:17:33,940 --> 00:17:38,500
decimal representation of the ASCII

425
00:17:36,250 --> 00:17:39,910
value for the string so this string was

426
00:17:38,500 --> 00:17:41,680
simply on create

427
00:17:39,910 --> 00:17:43,720
so probably one of the simplest

428
00:17:41,680 --> 00:17:45,670
obfuscation methods that most of us in

429
00:17:43,720 --> 00:17:48,130
this room can think of but it was

430
00:17:45,670 --> 00:17:50,350
successful in that you can no longer

431
00:17:48,130 --> 00:17:52,840
just scan the apk looking for strings

432
00:17:50,350 --> 00:17:54,699
you had to write a tool in order to find

433
00:17:52,840 --> 00:18:00,429
those strings and be able to put it in

434
00:17:54,700 --> 00:18:02,500
your automated detection systems then we

435
00:18:00,430 --> 00:18:04,480
moved into stage 2 in the later half of

436
00:18:02,500 --> 00:18:09,130
20 our very intuitive

437
00:18:04,480 --> 00:18:11,890
in the later half of 2016 for variate 2

438
00:18:09,130 --> 00:18:14,380
all of the stages stayed exactly the

439
00:18:11,890 --> 00:18:17,530
same they still used those three

440
00:18:14,380 --> 00:18:19,990
different files that were stored in the

441
00:18:17,530 --> 00:18:21,970
apks assets folder they would drop them

442
00:18:19,990 --> 00:18:23,530
dynamically use the same unpacking and

443
00:18:21,970 --> 00:18:27,220
decryption for each of the different

444
00:18:23,530 --> 00:18:28,960
stages but we saw the payload change now

445
00:18:27,220 --> 00:18:31,560
instead of just doing ad fraud and

446
00:18:28,960 --> 00:18:34,480
install fraud they came up with a new

447
00:18:31,560 --> 00:18:37,720
monetization mechanism so this time it

448
00:18:34,480 --> 00:18:40,540
was premium SMS fraud so to take a step

449
00:18:37,720 --> 00:18:43,480
back premium SMS fraud in Western Europe

450
00:18:40,540 --> 00:18:46,480
and the US for those people who are here

451
00:18:43,480 --> 00:18:49,990
it's not as common of a way to pay but

452
00:18:46,480 --> 00:18:52,540
what it means is that if you send a text

453
00:18:49,990 --> 00:18:55,150
message to this short code number like

454
00:18:52,540 --> 00:18:59,050
five five five five it will charge your

455
00:18:55,150 --> 00:19:01,810
mobile bill a specified amount so you're

456
00:18:59,050 --> 00:19:03,730
allowed to send premium SMS messages but

457
00:19:01,810 --> 00:19:05,860
you're not allowed to do it without user

458
00:19:03,730 --> 00:19:09,040
consent so that's what makes it fraud

459
00:19:05,860 --> 00:19:14,409
and so her role or chinois would do this

460
00:19:09,040 --> 00:19:16,020
in that they would do this in behind the

461
00:19:14,410 --> 00:19:18,940
scenes send all these premium SMS

462
00:19:16,020 --> 00:19:21,129
messages and then have it discharged to

463
00:19:18,940 --> 00:19:23,860
the users build and so they did it in a

464
00:19:21,130 --> 00:19:26,020
sophisticated way because the Google

465
00:19:23,860 --> 00:19:27,370
Play protect Android security team had

466
00:19:26,020 --> 00:19:29,050
already been building in a lot of

467
00:19:27,370 --> 00:19:31,719
different mechanisms to protect users

468
00:19:29,050 --> 00:19:34,960
from premium SMS fraud such as requiring

469
00:19:31,720 --> 00:19:38,170
a specific permission and also whenever

470
00:19:34,960 --> 00:19:41,110
the phone detected that a app was trying

471
00:19:38,170 --> 00:19:42,970
to send an SMS message to a short code

472
00:19:41,110 --> 00:19:46,510
number that was likely premium it would

473
00:19:42,970 --> 00:19:49,480
pop up a dialog so what Shinhwa did was

474
00:19:46,510 --> 00:19:50,800
it tried to find rooted phones in on

475
00:19:49,480 --> 00:19:52,690
those rooted phones it would try to

476
00:19:50,800 --> 00:19:53,299
install itself so that it could run as

477
00:19:52,690 --> 00:19:56,090
this

478
00:19:53,299 --> 00:19:59,450
stem user or the phone user ID both of

479
00:19:56,090 --> 00:20:02,059
those on Android are privileged user IDs

480
00:19:59,450 --> 00:20:03,619
and so once it did that then it would

481
00:20:02,059 --> 00:20:05,720
different type do different types of

482
00:20:03,619 --> 00:20:09,830
bypasses to make the phone believe it

483
00:20:05,720 --> 00:20:11,989
had the the SMS permission and also oh

484
00:20:09,830 --> 00:20:13,730
no the user has told us that we don't

485
00:20:11,989 --> 00:20:16,159
want to show the dialogues for premium

486
00:20:13,730 --> 00:20:19,669
SMS messages so that was the interesting

487
00:20:16,159 --> 00:20:22,249
changes for variant to that was that one

488
00:20:19,669 --> 00:20:24,739
basically was eradicated in march 2017

489
00:20:22,249 --> 00:20:27,859
if you look up google chinois you'll see

490
00:20:24,739 --> 00:20:31,669
a blog post about it that also goes into

491
00:20:27,859 --> 00:20:32,418
more details then they went dormant for

492
00:20:31,669 --> 00:20:34,129
a few months

493
00:20:32,419 --> 00:20:35,840
because this was after we had pushed

494
00:20:34,129 --> 00:20:37,549
them off of play before that we hadn't

495
00:20:35,840 --> 00:20:40,999
seen them in the off market at much it

496
00:20:37,549 --> 00:20:44,899
was a constant battle to just push them

497
00:20:40,999 --> 00:20:46,639
off play so then in November 2017 we see

498
00:20:44,899 --> 00:20:49,100
them start to come back but they've

499
00:20:46,639 --> 00:20:51,918
changed quite a bit and so this time

500
00:20:49,100 --> 00:20:55,129
they are purely targeting the off market

501
00:20:51,919 --> 00:20:57,320
or so side loaded ecosystem part of

502
00:20:55,129 --> 00:21:00,199
Android so not even attempting to get

503
00:20:57,320 --> 00:21:02,350
back on play so what we see as the

504
00:21:00,200 --> 00:21:04,519
stages go and why this was not

505
00:21:02,350 --> 00:21:07,158
immediately clear to us that it was

506
00:21:04,519 --> 00:21:10,669
related to show moi off the bat was that

507
00:21:07,159 --> 00:21:12,409
yes Stage one was an apk but this time

508
00:21:10,669 --> 00:21:14,960
we didn't see the same assets files

509
00:21:12,409 --> 00:21:17,119
stored in the apk as we had seen

510
00:21:14,960 --> 00:21:19,070
previously those random generated

511
00:21:17,119 --> 00:21:21,350
characters under assets had been pretty

512
00:21:19,070 --> 00:21:22,359
clear and obvious thing that something

513
00:21:21,350 --> 00:21:25,549
was out of the ordinary

514
00:21:22,359 --> 00:21:27,769
instead they moved stage two instead of

515
00:21:25,549 --> 00:21:30,080
dropping it as a jar they just included

516
00:21:27,769 --> 00:21:32,859
that Java code in the apk but it was

517
00:21:30,080 --> 00:21:35,439
highly obfuscated with lots of random

518
00:21:32,859 --> 00:21:41,720
class name strings and things like that

519
00:21:35,440 --> 00:21:44,080
so what that Oscar now stage 3 which is

520
00:21:41,720 --> 00:21:46,549
where a lot of sort of the meat of this

521
00:21:44,080 --> 00:21:49,369
variant came in was now no longer

522
00:21:46,549 --> 00:21:51,889
dropped what was included as a static

523
00:21:49,369 --> 00:21:54,668
elf within the apk if you haven't

524
00:21:51,889 --> 00:21:58,508
analyzed many Android apps thus far

525
00:21:54,669 --> 00:22:01,970
developers can choose to include

526
00:21:58,509 --> 00:22:04,159
compiled C or C++ code in their

527
00:22:01,970 --> 00:22:06,659
applications even though we generally

528
00:22:04,159 --> 00:22:09,479
think of them usually written in Java or

529
00:22:06,659 --> 00:22:11,849
hotland as applications so they included

530
00:22:09,479 --> 00:22:15,269
this elf it usually lived in the path

531
00:22:11,849 --> 00:22:18,269
lib slash whatever CPU at it had been

532
00:22:15,269 --> 00:22:20,639
compiled for usually army ABI which is

533
00:22:18,269 --> 00:22:23,340
the Android sort of keyword term for a

534
00:22:20,639 --> 00:22:27,389
generic arm but we also saw it for arm

535
00:22:23,340 --> 00:22:29,158
v7 and arm 64 as well as x86 and then it

536
00:22:27,389 --> 00:22:31,168
had a randomly generated name which was

537
00:22:29,159 --> 00:22:34,529
usually Lib and then five to eight

538
00:22:31,169 --> 00:22:36,299
lowercase letters dot SL so I'm gonna

539
00:22:34,529 --> 00:22:38,309
take a step back to talk about these

540
00:22:36,299 --> 00:22:39,960
randomly generated characters I think

541
00:22:38,309 --> 00:22:42,809
it's important that whenever you see

542
00:22:39,960 --> 00:22:44,940
lots of samples of a similar family if

543
00:22:42,809 --> 00:22:47,369
they're able to generate all these

544
00:22:44,940 --> 00:22:49,440
random file names and random strings and

545
00:22:47,369 --> 00:22:50,820
class names that's a really strong

546
00:22:49,440 --> 00:22:53,190
signal that it's either being

547
00:22:50,820 --> 00:22:55,830
distributed to people in the form of

548
00:22:53,190 --> 00:22:58,379
source code or the malware developers

549
00:22:55,830 --> 00:23:00,928
have a lots of resources and have

550
00:22:58,379 --> 00:23:02,668
created an automated pipeline that

551
00:23:00,929 --> 00:23:04,710
generates all these different samples

552
00:23:02,669 --> 00:23:08,340
and thus obviously are not generating

553
00:23:04,710 --> 00:23:10,979
all the random names by hand so the key

554
00:23:08,340 --> 00:23:13,529
aspect of this elf which required quite

555
00:23:10,979 --> 00:23:14,849
a bit of reverse engineering was that it

556
00:23:13,529 --> 00:23:18,419
didn't look the same as the previous

557
00:23:14,849 --> 00:23:21,450
else instead there was a lot of anti

558
00:23:18,419 --> 00:23:23,429
analysis anti debugging and decryption

559
00:23:21,450 --> 00:23:26,009
around it so that it didn't look right

560
00:23:23,429 --> 00:23:29,489
when you first analyzed it and so what

561
00:23:26,009 --> 00:23:31,379
this was is a anti analysis native

562
00:23:29,489 --> 00:23:32,039
library and Android that I have named

563
00:23:31,379 --> 00:23:34,709
wedding-cake

564
00:23:32,039 --> 00:23:36,690
which was one of the most complex native

565
00:23:34,710 --> 00:23:38,399
libraries or complex

566
00:23:36,690 --> 00:23:41,159
anti analysis native libraries we've

567
00:23:38,399 --> 00:23:43,349
seen because of the variety of different

568
00:23:41,159 --> 00:23:45,479
techniques they used if you're

569
00:23:43,349 --> 00:23:47,369
interested in that I did a black hat

570
00:23:45,479 --> 00:23:49,559
talk this year as well as wrote a paper

571
00:23:47,369 --> 00:23:52,349
for virus bulletins that was published a

572
00:23:49,559 --> 00:23:54,629
few weeks ago so if you're interested in

573
00:23:52,349 --> 00:23:56,849
the types of andr anti analysis

574
00:23:54,629 --> 00:23:57,899
techniques being used today for android

575
00:23:56,849 --> 00:24:00,269
go ahead and check that out

576
00:23:57,899 --> 00:24:02,399
so once I got through all of those

577
00:24:00,269 --> 00:24:04,739
layers of anti analysis that I hadn't

578
00:24:02,399 --> 00:24:07,439
seen before the way that I knew it was

579
00:24:04,739 --> 00:24:10,289
finally chinois was that it had the

580
00:24:07,440 --> 00:24:12,809
exact same functionality hiding under

581
00:24:10,289 --> 00:24:15,570
those layers of wedding-cake as the

582
00:24:12,809 --> 00:24:18,089
previous stage three first unwanted so

583
00:24:15,570 --> 00:24:18,710
again now we found that its whole

584
00:24:18,089 --> 00:24:22,700
function

585
00:24:18,710 --> 00:24:24,200
was to drop stage for the payload this

586
00:24:22,700 --> 00:24:26,420
wasn't working though in any of the

587
00:24:24,200 --> 00:24:28,790
dynamic analysis pipelines and why it

588
00:24:26,420 --> 00:24:30,950
was tougher to figure out and required

589
00:24:28,790 --> 00:24:33,320
this reverse engineering is because they

590
00:24:30,950 --> 00:24:35,300
now included all of these anti analysis

591
00:24:33,320 --> 00:24:38,990
and obfuscation techniques but

592
00:24:35,300 --> 00:24:41,450
ultimately it drops the payload as well

593
00:24:38,990 --> 00:24:44,060
which they sort of backed off from the

594
00:24:41,450 --> 00:24:46,190
SMS fraud payload and moved back into

595
00:24:44,060 --> 00:24:52,310
more different types of ad fraud and

596
00:24:46,190 --> 00:24:56,450
install fraud so I published I built

597
00:24:52,310 --> 00:25:00,230
first I from about February to June 2018

598
00:24:56,450 --> 00:25:02,450
built all these detections for wedding

599
00:25:00,230 --> 00:25:04,160
take wedding cake Prevention's different

600
00:25:02,450 --> 00:25:06,200
things like that for this new variant

601
00:25:04,160 --> 00:25:08,870
and I started putting out information

602
00:25:06,200 --> 00:25:10,820
about wedding cake then I presented at

603
00:25:08,870 --> 00:25:13,790
blackhat and we saw a variant for come

604
00:25:10,820 --> 00:25:16,340
out after talking about it and so what

605
00:25:13,790 --> 00:25:18,740
they changed here was they left stage

606
00:25:16,340 --> 00:25:20,780
one into the same they generally left

607
00:25:18,740 --> 00:25:23,360
stage for their payload the same but

608
00:25:20,780 --> 00:25:25,220
they targeted stage 3 where wedding cake

609
00:25:23,360 --> 00:25:27,830
had lived so what was interesting

610
00:25:25,220 --> 00:25:30,410
leading up to what I would say the true

611
00:25:27,830 --> 00:25:33,560
boundary with variant 4 was we were able

612
00:25:30,410 --> 00:25:36,110
to watch all the different versions of

613
00:25:33,560 --> 00:25:37,700
Shinhwa apps coming in and what I could

614
00:25:36,110 --> 00:25:39,620
see first is that it seemed that the

615
00:25:37,700 --> 00:25:41,570
malware developers were trying to test

616
00:25:39,620 --> 00:25:43,429
if we had yarra rules in place or how

617
00:25:41,570 --> 00:25:46,429
are we catching them so we could watch

618
00:25:43,430 --> 00:25:48,140
in both the java code as the yarra how

619
00:25:46,430 --> 00:25:50,180
their they were trying to move different

620
00:25:48,140 --> 00:25:52,970
things around put constants in different

621
00:25:50,180 --> 00:25:55,300
places probably trying to test for those

622
00:25:52,970 --> 00:25:58,100
exact types of signatures for detection

623
00:25:55,300 --> 00:26:00,740
so instead they decided to pull the elf

624
00:25:58,100 --> 00:26:03,649
completely out of the apk for variant 4

625
00:26:00,740 --> 00:26:06,650
so what they did now is they put they

626
00:26:03,650 --> 00:26:10,730
base64 encoded the entirety of the elf

627
00:26:06,650 --> 00:26:14,180
and then put those base64 encoded

628
00:26:10,730 --> 00:26:16,880
strings in the apk the java code of

629
00:26:14,180 --> 00:26:18,590
stage 2 then decodes each of those

630
00:26:16,880 --> 00:26:20,570
strings that are a portion of the elf

631
00:26:18,590 --> 00:26:23,120
and then concatenates them all together

632
00:26:20,570 --> 00:26:26,210
writes them to the file to then drop the

633
00:26:23,120 --> 00:26:29,060
elf so what that looks like is a little

634
00:26:26,210 --> 00:26:31,330
like this the new version of chinois we

635
00:26:29,060 --> 00:26:33,820
saw all of these base64

636
00:26:31,330 --> 00:26:36,730
encoded strings in an array here I just

637
00:26:33,820 --> 00:26:38,860
happen to pull out you know value 56 but

638
00:26:36,730 --> 00:26:42,340
they often have hundreds of them and so

639
00:26:38,860 --> 00:26:44,679
then they just had simple code that

640
00:26:42,340 --> 00:26:46,449
concatenates them all together one of

641
00:26:44,680 --> 00:26:48,870
the interesting parts here is where they

642
00:26:46,450 --> 00:26:52,240
build the path to drop it it's again

643
00:26:48,870 --> 00:26:54,189
randomly generated strings for the

644
00:26:52,240 --> 00:26:56,740
directory and then the actual file where

645
00:26:54,190 --> 00:26:58,600
they would like to drop the elf but

646
00:26:56,740 --> 00:27:03,000
what's interesting is they do append a

647
00:26:58,600 --> 00:27:06,490
period before the folder name of Katie

648
00:27:03,000 --> 00:27:10,870
u.s. IP to make that a hidden folder if

649
00:27:06,490 --> 00:27:14,050
you are looking at it so that was

650
00:27:10,870 --> 00:27:15,969
Shinhwa one of the biggest botnets we've

651
00:27:14,050 --> 00:27:17,860
seen in the Android ecosystem and the

652
00:27:15,970 --> 00:27:19,750
big contributing factor in the off

653
00:27:17,860 --> 00:27:22,209
market or side-loaded space to that

654
00:27:19,750 --> 00:27:22,840
backdoor category so now let's switch to

655
00:27:22,210 --> 00:27:25,720
play

656
00:27:22,840 --> 00:27:29,560
what are we tackling fighting preventing

657
00:27:25,720 --> 00:27:32,650
on google play and that's this SMS fraud

658
00:27:29,560 --> 00:27:37,570
family as Kylie alluded to we call it

659
00:27:32,650 --> 00:27:41,110
read SMS because it sends SMS so it did

660
00:27:37,570 --> 00:27:42,970
originally start as SMS but then as we

661
00:27:41,110 --> 00:27:44,860
were getting you know stronger and

662
00:27:42,970 --> 00:27:48,370
stronger detections in place prevention

663
00:27:44,860 --> 00:27:50,649
they weren't having the same surface

664
00:27:48,370 --> 00:27:52,989
area or you know they weren't being able

665
00:27:50,650 --> 00:27:55,210
to distribute themselves as effectively

666
00:27:52,990 --> 00:27:58,240
they decided to innovate and do some

667
00:27:55,210 --> 00:28:01,330
toll fraud as well so this has been

668
00:27:58,240 --> 00:28:06,460
about 2016 to present and again here's a

669
00:28:01,330 --> 00:28:08,800
sample and a virus total link but one of

670
00:28:06,460 --> 00:28:10,510
the key aspects of bread SMS that is

671
00:28:08,800 --> 00:28:13,720
fascinating and sort of similar to

672
00:28:10,510 --> 00:28:15,640
Shinhwa is how resourced it is because

673
00:28:13,720 --> 00:28:17,470
it is rapidly evolving with many

674
00:28:15,640 --> 00:28:19,360
variants so that means you have to be

675
00:28:17,470 --> 00:28:22,150
very deliberate with how you use

676
00:28:19,360 --> 00:28:24,760
analysis resources how you use detection

677
00:28:22,150 --> 00:28:26,200
and prevention resources because you

678
00:28:24,760 --> 00:28:28,240
know that their wealth resource didn't

679
00:28:26,200 --> 00:28:29,320
able to find so many variants so I'm not

680
00:28:28,240 --> 00:28:31,360
going to be able to go through all of

681
00:28:29,320 --> 00:28:33,810
them today but I'm going to touch on

682
00:28:31,360 --> 00:28:36,189
some of the most interesting SMS fraud

683
00:28:33,810 --> 00:28:38,159
techniques that their variants have used

684
00:28:36,190 --> 00:28:40,890
and so when you think about it

685
00:28:38,160 --> 00:28:43,000
SMS fraud is just sending a text message

686
00:28:40,890 --> 00:28:45,240
sending a text message there's only

687
00:28:43,000 --> 00:28:47,730
three or four Android API

688
00:28:45,240 --> 00:28:50,580
that allow you to do that shouldn't that

689
00:28:47,730 --> 00:28:53,210
be pretty easy to detect because they

690
00:28:50,580 --> 00:28:55,730
have to do it in one of these four ways

691
00:28:53,210 --> 00:28:58,620
however that's where sort of the

692
00:28:55,730 --> 00:29:00,840
creativity and where us as defenders

693
00:28:58,620 --> 00:29:03,060
really have to work and where malware

694
00:29:00,840 --> 00:29:04,560
authors are constantly trying to evolve

695
00:29:03,060 --> 00:29:08,370
is because you're trying to come up with

696
00:29:04,560 --> 00:29:11,070
new ways to send the SMS and ultimately

697
00:29:08,370 --> 00:29:13,979
call that API call without being

698
00:29:11,070 --> 00:29:16,980
detected so one of the first way these

699
00:29:13,980 --> 00:29:19,560
do that is with a simple splash screen

700
00:29:16,980 --> 00:29:22,800
so their goal of their splash screen is

701
00:29:19,560 --> 00:29:26,070
one to prevent the automated dynamic

702
00:29:22,800 --> 00:29:28,620
analysis catching them too they try and

703
00:29:26,070 --> 00:29:30,270
fake policy compliance it's super small

704
00:29:28,620 --> 00:29:32,939
on their screen shot as probably

705
00:29:30,270 --> 00:29:37,020
intended but they have in English at the

706
00:29:32,940 --> 00:29:40,530
top terms and conditions and then some

707
00:29:37,020 --> 00:29:42,780
tie underneath it so what I mean by fake

708
00:29:40,530 --> 00:29:45,420
policy compliance is you're allowed to

709
00:29:42,780 --> 00:29:47,850
send premium SMS messages on Android as

710
00:29:45,420 --> 00:29:49,800
long as it's fully disclosed the price

711
00:29:47,850 --> 00:29:53,429
and the number to the user and the user

712
00:29:49,800 --> 00:29:55,620
consents so this is probably their

713
00:29:53,430 --> 00:29:57,600
attempt to make us think of something in

714
00:29:55,620 --> 00:29:59,850
Thai they're probably disclosing this

715
00:29:57,600 --> 00:30:02,219
but the other aspect of this was is that

716
00:29:59,850 --> 00:30:05,189
they dynamically update the content in

717
00:30:02,220 --> 00:30:07,590
their terms and conditions based on the

718
00:30:05,190 --> 00:30:09,660
c2 and where you're checking in so this

719
00:30:07,590 --> 00:30:12,209
is a form of the cloaking they use that

720
00:30:09,660 --> 00:30:13,740
we'll get into so sometimes it says hey

721
00:30:12,210 --> 00:30:16,350
click the button if you want to continue

722
00:30:13,740 --> 00:30:18,690
to the app in other times they have a

723
00:30:16,350 --> 00:30:21,000
real disclosure when they think it's

724
00:30:18,690 --> 00:30:23,180
probably us who are trying to review the

725
00:30:21,000 --> 00:30:23,180
apps

726
00:30:23,930 --> 00:30:30,690
so the key cloaking that they began to

727
00:30:27,660 --> 00:30:33,090
use is only sending or performing the

728
00:30:30,690 --> 00:30:34,830
fraudulent behavior of sending the SMS

729
00:30:33,090 --> 00:30:37,590
message when you're on a certain mobile

730
00:30:34,830 --> 00:30:41,340
carrier because based on how SMS fraud

731
00:30:37,590 --> 00:30:45,209
works you when you send the SMS message

732
00:30:41,340 --> 00:30:47,310
that sort of provider of the premium SMS

733
00:30:45,210 --> 00:30:49,140
number has to have the relationship with

734
00:30:47,310 --> 00:30:52,200
your carrier to be able to charge your

735
00:30:49,140 --> 00:30:55,140
carriers bill bread SMS targets

736
00:30:52,200 --> 00:30:57,430
exclusively Southeast Asia and almost

737
00:30:55,140 --> 00:30:59,650
predominantly Thailand so it's

738
00:30:57,430 --> 00:31:02,110
not really worth it to them to try and

739
00:30:59,650 --> 00:31:04,900
to accidentally be detected if they're

740
00:31:02,110 --> 00:31:07,959
running on let's say a u.s. Western

741
00:31:04,900 --> 00:31:09,160
Europe or Brazilians phone because

742
00:31:07,960 --> 00:31:10,140
they're not actually going to be able to

743
00:31:09,160 --> 00:31:12,430
make money that way

744
00:31:10,140 --> 00:31:15,370
so we'll talk a little bit about how

745
00:31:12,430 --> 00:31:18,340
they do that check so they send a

746
00:31:15,370 --> 00:31:21,879
command-and-control request that says

747
00:31:18,340 --> 00:31:23,980
hey only perform the fraudulent as I'm

748
00:31:21,880 --> 00:31:26,350
sending the fraudulent SMS message if

749
00:31:23,980 --> 00:31:29,620
the phone is on one of these carriers

750
00:31:26,350 --> 00:31:31,810
otherwise that button will now just

751
00:31:29,620 --> 00:31:36,459
start the main activity and it won't do

752
00:31:31,810 --> 00:31:41,440
any of the sending so what that actually

753
00:31:36,460 --> 00:31:44,920
looks like is we'll see the example

754
00:31:41,440 --> 00:31:47,590
see to command and control request URL

755
00:31:44,920 --> 00:31:49,990
up here on the top left and then the

756
00:31:47,590 --> 00:31:52,419
response that the app received is the

757
00:31:49,990 --> 00:31:54,370
JSON on the bottom left and on the right

758
00:31:52,420 --> 00:31:57,670
here is the code which we'll go through

759
00:31:54,370 --> 00:32:01,570
and make larger so the very first thing

760
00:31:57,670 --> 00:32:04,150
they happen is they get the users SIM

761
00:32:01,570 --> 00:32:07,270
operator or their mobile carrier using

762
00:32:04,150 --> 00:32:10,240
that code that is then passed to the

763
00:32:07,270 --> 00:32:12,550
HTTP request that is sent to the command

764
00:32:10,240 --> 00:32:15,580
and control serval server you see that

765
00:32:12,550 --> 00:32:19,060
as in this example code equals three one

766
00:32:15,580 --> 00:32:25,240
zero two six the app then receives back

767
00:32:19,060 --> 00:32:29,530
the JSON response and parses that so

768
00:32:25,240 --> 00:32:31,450
based on that they've now set than they

769
00:32:29,530 --> 00:32:34,060
first get the contents that are supposed

770
00:32:31,450 --> 00:32:36,040
to be set in that splash screens text so

771
00:32:34,060 --> 00:32:37,210
in this case they're gonna say here are

772
00:32:36,040 --> 00:32:39,399
all the pictures you need about

773
00:32:37,210 --> 00:32:41,230
happiness beauty beauty etc with our

774
00:32:39,400 --> 00:32:44,800
most sincere service to provide you with

775
00:32:41,230 --> 00:32:46,930
the most robust resources so that's

776
00:32:44,800 --> 00:32:49,419
where I mean they change those terms and

777
00:32:46,930 --> 00:32:54,010
conditions based on whatever the service

778
00:32:49,420 --> 00:32:56,110
tells them to say the next thing they do

779
00:32:54,010 --> 00:32:58,960
is they also set what the button text is

780
00:32:56,110 --> 00:33:01,179
going to say here it's that content and

781
00:32:58,960 --> 00:33:03,670
now they check what were the IME eyes

782
00:33:01,180 --> 00:33:05,890
what they're not actually I am the eyes

783
00:33:03,670 --> 00:33:08,050
but what is the carrier send back in the

784
00:33:05,890 --> 00:33:09,500
response it's here under the variable

785
00:33:08,050 --> 00:33:12,799
they use IMEI

786
00:33:09,500 --> 00:33:17,659
so they get all of those and if the

787
00:33:12,799 --> 00:33:19,879
users carrier was in those values so for

788
00:33:17,659 --> 00:33:22,309
us it was not if you look at three one

789
00:33:19,880 --> 00:33:24,559
zero two six is not included in these

790
00:33:22,309 --> 00:33:31,280
three carrier codes that were sent back

791
00:33:24,559 --> 00:33:33,379
from the server then and only when the

792
00:33:31,280 --> 00:33:37,309
value is in there do they actually send

793
00:33:33,380 --> 00:33:39,080
the SMS otherwise they do this top if

794
00:33:37,309 --> 00:33:40,908
statement of just starting the main

795
00:33:39,080 --> 00:33:51,649
activity and not trying to send the

796
00:33:40,909 --> 00:33:53,929
premium SMS so the next variant is all

797
00:33:51,650 --> 00:33:55,940
of that code before for variant one was

798
00:33:53,929 --> 00:33:59,030
included in the application so we could

799
00:33:55,940 --> 00:34:03,289
still see the HTML spend all of the code

800
00:33:59,030 --> 00:34:05,600
to portray the splash screen now they

801
00:34:03,289 --> 00:34:07,760
moved into a webview the reason behind

802
00:34:05,600 --> 00:34:09,830
that is now the only code you have to

803
00:34:07,760 --> 00:34:11,690
have in the application is what the

804
00:34:09,830 --> 00:34:14,540
application wants to do to interact with

805
00:34:11,690 --> 00:34:17,359
the webview page and so they can

806
00:34:14,540 --> 00:34:19,849
dynamically generate allocate everything

807
00:34:17,359 --> 00:34:25,190
within the webview otherwise so for

808
00:34:19,849 --> 00:34:26,179
example we have this HTTP request URL

809
00:34:25,190 --> 00:34:28,820
that goes to the command-and-control

810
00:34:26,179 --> 00:34:32,179
server you see an operated code the name

811
00:34:28,820 --> 00:34:35,899
of the app and some device ID which we

812
00:34:32,179 --> 00:34:38,300
dead beefed out then you receive this

813
00:34:35,899 --> 00:34:40,909
response so the very first thing you see

814
00:34:38,300 --> 00:34:43,730
is the on click and it says we're gonna

815
00:34:40,909 --> 00:34:46,460
run sub you see that the sub is if

816
00:34:43,730 --> 00:34:48,379
JavaScript down here at the bottom but

817
00:34:46,460 --> 00:34:50,359
first let's talk through what each of

818
00:34:48,379 --> 00:34:53,868
these variables are because they've

819
00:34:50,359 --> 00:34:56,839
hidden the premium SMS code arguments in

820
00:34:53,869 --> 00:34:58,910
the HTML these are you know set as

821
00:34:56,839 --> 00:35:00,950
variables but not actually displayed to

822
00:34:58,910 --> 00:35:03,770
the user it's just saying short code

823
00:35:00,950 --> 00:35:08,210
equals this phone number and key word is

824
00:35:03,770 --> 00:35:11,000
this content the next thing we see is

825
00:35:08,210 --> 00:35:13,099
some references to Android API is to

826
00:35:11,000 --> 00:35:15,770
send a text message if you've ever used

827
00:35:13,099 --> 00:35:19,430
Java and heard of reflection that's

828
00:35:15,770 --> 00:35:22,530
another way to call Java or Android API

829
00:35:19,430 --> 00:35:24,930
s without having to call the function

830
00:35:22,530 --> 00:35:28,560
instead you send the strings that then

831
00:35:24,930 --> 00:35:31,020
tell the virtual machine hey you're

832
00:35:28,560 --> 00:35:32,910
going to find this method and run it so

833
00:35:31,020 --> 00:35:37,350
that's all the arguments they need here

834
00:35:32,910 --> 00:35:40,290
to do that for send text message so

835
00:35:37,350 --> 00:35:42,569
therefore now we saw at the top that

836
00:35:40,290 --> 00:35:45,240
this HTML said when the button is

837
00:35:42,570 --> 00:35:48,480
pressed run this script we can see what

838
00:35:45,240 --> 00:35:51,209
the scripts values were the first lines

839
00:35:48,480 --> 00:35:53,550
of code were all to load those variables

840
00:35:51,210 --> 00:35:55,170
we just talked about and now here we see

841
00:35:53,550 --> 00:35:58,140
that they're actually calling a function

842
00:35:55,170 --> 00:36:02,970
to send that SMS message by having these

843
00:35:58,140 --> 00:36:05,009
hidden values encoded in the HTML and so

844
00:36:02,970 --> 00:36:07,020
finally what that looks like there's all

845
00:36:05,010 --> 00:36:09,810
the variables for you they're going to

846
00:36:07,020 --> 00:36:12,390
call the Android API method send text

847
00:36:09,810 --> 00:36:14,670
message with the arguments of this phone

848
00:36:12,390 --> 00:36:16,470
number in that contents of the text

849
00:36:14,670 --> 00:36:20,400
message which would ultimately charge

850
00:36:16,470 --> 00:36:24,600
the user so that wasn't enough we then

851
00:36:20,400 --> 00:36:27,870
saw them QWOP rotate to a new variant

852
00:36:24,600 --> 00:36:29,940
quickly again and this time trying to

853
00:36:27,870 --> 00:36:32,400
come up with a new way to call send text

854
00:36:29,940 --> 00:36:34,320
message without being detected so we've

855
00:36:32,400 --> 00:36:36,600
seen it where they do it straight and

856
00:36:34,320 --> 00:36:40,140
they Android API calls we've seen it

857
00:36:36,600 --> 00:36:41,940
through calling from JavaScript in a web

858
00:36:40,140 --> 00:36:47,850
view and now they move to that native

859
00:36:41,940 --> 00:36:50,730
code so what we saw in the java code of

860
00:36:47,850 --> 00:36:53,100
the APK is they declared this native

861
00:36:50,730 --> 00:36:55,950
method saying hey this is actually going

862
00:36:53,100 --> 00:36:59,069
to run and c or c++ and compiled code

863
00:36:55,950 --> 00:37:01,680
they left it still named quite well for

864
00:36:59,070 --> 00:37:03,480
us so that was helpful so we have this

865
00:37:01,680 --> 00:37:05,549
native send method which takes two

866
00:37:03,480 --> 00:37:07,740
strings that's declared and then we see

867
00:37:05,550 --> 00:37:11,850
that it's called in the APK as this

868
00:37:07,740 --> 00:37:14,129
bottom line here I know it's a little

869
00:37:11,850 --> 00:37:15,900
small but hopefully you can still read

870
00:37:14,130 --> 00:37:18,960
and get the gist of it this is a

871
00:37:15,900 --> 00:37:20,790
screenshot of the Ida of the live native

872
00:37:18,960 --> 00:37:25,380
library that was included in the apk

873
00:37:20,790 --> 00:37:27,750
what we see is they then call send text

874
00:37:25,380 --> 00:37:30,420
message in the way that the J and I our

875
00:37:27,750 --> 00:37:32,839
Java native interface how you interact

876
00:37:30,420 --> 00:37:35,599
between Java

877
00:37:32,839 --> 00:37:37,819
native code they call send text message

878
00:37:35,599 --> 00:37:41,569
with the two arguments of the shortcode

879
00:37:37,819 --> 00:37:44,509
and the contents so that was a whirlwind

880
00:37:41,569 --> 00:37:47,239
deep dive into three of the variants of

881
00:37:44,509 --> 00:37:49,099
one of the most impactful families on

882
00:37:47,239 --> 00:37:51,710
Google Play and one of the large

883
00:37:49,099 --> 00:37:54,079
contributors to the SMS fraud pH a

884
00:37:51,710 --> 00:37:56,809
category that we're seeing in in the

885
00:37:54,079 --> 00:37:59,029
first half of 2018 so now that we've

886
00:37:56,809 --> 00:38:01,430
talked about off-market side-loaded apps

887
00:37:59,029 --> 00:38:03,049
Google Play now we're going to get into

888
00:38:01,430 --> 00:38:05,749
something a little different the

889
00:38:03,049 --> 00:38:08,359
preinstalled problem not the first one

890
00:38:05,749 --> 00:38:11,509
to come up here and say that's the thing

891
00:38:08,359 --> 00:38:16,609
so Casa loon is one of those that has

892
00:38:11,509 --> 00:38:18,920
been pre-installed on before so it is a

893
00:38:16,609 --> 00:38:21,380
hostile downloader so that category that

894
00:38:18,920 --> 00:38:25,190
Kylie was talking about earlier it is

895
00:38:21,380 --> 00:38:27,349
not really off market side loaded or or

896
00:38:25,190 --> 00:38:29,269
so it is considered off market or side

897
00:38:27,349 --> 00:38:31,729
loaded because it's not Google Play but

898
00:38:29,269 --> 00:38:35,089
its distribution method mechanism is

899
00:38:31,729 --> 00:38:39,259
pre-installed so it was detected in

900
00:38:35,089 --> 00:38:41,989
November 2017 and basically sort of fell

901
00:38:39,259 --> 00:38:44,450
off in March 2018 largely because of an

902
00:38:41,989 --> 00:38:46,729
analysis in collaboration we did with

903
00:38:44,450 --> 00:38:48,680
Avast in a vast published a nice blog

904
00:38:46,729 --> 00:38:50,089
post about that if you're interested in

905
00:38:48,680 --> 00:38:56,359
reading more specifically about this

906
00:38:50,089 --> 00:38:59,349
family so overview Casa loon it's two

907
00:38:56,359 --> 00:39:01,969
stages first stage is pre-installed on

908
00:38:59,349 --> 00:39:05,450
generally low end or non certified

909
00:39:01,969 --> 00:39:07,009
Android devices so that stage one can

910
00:39:05,450 --> 00:39:09,769
come in two different types of variants

911
00:39:07,009 --> 00:39:12,109
one is just a pre-installed application

912
00:39:09,769 --> 00:39:14,419
on the system partition just general

913
00:39:12,109 --> 00:39:17,348
bloat where that you can see on some of

914
00:39:14,420 --> 00:39:21,049
the lower end or non-certified devices

915
00:39:17,349 --> 00:39:23,569
variant two is there is a package or

916
00:39:21,049 --> 00:39:26,479
application that is critical to the

917
00:39:23,569 --> 00:39:28,880
android platform it's in a OSP the

918
00:39:26,479 --> 00:39:31,819
Android Open Source project and it's

919
00:39:28,880 --> 00:39:34,369
called system UI doing as the name

920
00:39:31,819 --> 00:39:38,299
suggests a lot of the UI for this system

921
00:39:34,369 --> 00:39:41,450
of Android and so what they did there is

922
00:39:38,299 --> 00:39:43,700
they actually modified system UI to be

923
00:39:41,450 --> 00:39:44,730
this stage one dropper for some of this

924
00:39:43,700 --> 00:39:47,310
hostile downloading

925
00:39:44,730 --> 00:39:49,530
and networks so well they both have the

926
00:39:47,310 --> 00:39:51,660
same exact functionality just the way it

927
00:39:49,530 --> 00:39:54,630
was packaged and distributed is slightly

928
00:39:51,660 --> 00:39:58,140
different then stage two which is

929
00:39:54,630 --> 00:40:02,670
dropped by stage one ultimately displays

930
00:39:58,140 --> 00:40:04,828
ads and installs other applications and

931
00:40:02,670 --> 00:40:11,010
that's how it gets the PHA category of

932
00:40:04,829 --> 00:40:12,869
hostal downloader so as we said it's

933
00:40:11,010 --> 00:40:14,970
pre-installed for Stage one that means

934
00:40:12,869 --> 00:40:17,579
it's on the system partition or in this

935
00:40:14,970 --> 00:40:20,069
modified system UI which is also on the

936
00:40:17,579 --> 00:40:22,410
system partition both of these stage

937
00:40:20,070 --> 00:40:25,290
ones register a Wi-Fi state change

938
00:40:22,410 --> 00:40:28,140
receiver meaning that anytime you either

939
00:40:25,290 --> 00:40:30,300
connect or disconnect from Wi-Fi an

940
00:40:28,140 --> 00:40:33,779
action is sent to these applications

941
00:40:30,300 --> 00:40:35,310
that allows them to execute most of the

942
00:40:33,780 --> 00:40:38,790
key behavior that we're going to talk

943
00:40:35,310 --> 00:40:42,089
about is in two classes that they have

944
00:40:38,790 --> 00:40:44,220
named Wi-Fi broad or keyguard broad

945
00:40:42,089 --> 00:40:47,009
these have nothing to do with the

946
00:40:44,220 --> 00:40:49,259
normally included Wi-Fi our key guard

947
00:40:47,010 --> 00:40:51,000
applications they chose to name them

948
00:40:49,260 --> 00:40:54,900
that could probably not raise a lot of

949
00:40:51,000 --> 00:40:57,060
suspicion so the key here though is that

950
00:40:54,900 --> 00:40:58,829
was interesting is the behavior that's

951
00:40:57,060 --> 00:41:00,660
in here and ultimately leads to the

952
00:40:58,829 --> 00:41:03,060
fraudulent behavior of dropping stage

953
00:41:00,660 --> 00:41:06,359
two only occurs if you are not in China

954
00:41:03,060 --> 00:41:08,310
it does this check of code right here to

955
00:41:06,359 --> 00:41:10,740
get your locale and make sure you're

956
00:41:08,310 --> 00:41:13,020
connected and but if you are have a

957
00:41:10,740 --> 00:41:16,589
locale of China they do not execute and

958
00:41:13,020 --> 00:41:18,270
they go dormant on the phone so once

959
00:41:16,589 --> 00:41:20,099
they've done that check they've decided

960
00:41:18,270 --> 00:41:22,380
you're connected to the Internet and you

961
00:41:20,099 --> 00:41:25,079
are not in China they run this code

962
00:41:22,380 --> 00:41:28,770
that's called check update check update

963
00:41:25,079 --> 00:41:32,670
then connects to a subdomain or the

964
00:41:28,770 --> 00:41:35,130
domain of Casa lucam and downloads a XML

965
00:41:32,670 --> 00:41:37,349
file this XML file gives all of the

966
00:41:35,130 --> 00:41:40,530
configuration settings necessary for

967
00:41:37,349 --> 00:41:43,050
stage two in the payload to operate so

968
00:41:40,530 --> 00:41:44,849
the version number changes for the XML

969
00:41:43,050 --> 00:41:48,540
file over different versions as well as

970
00:41:44,849 --> 00:41:51,510
the subdomain of Casa loon so this is

971
00:41:48,540 --> 00:41:54,480
what the response to the call to get

972
00:41:51,510 --> 00:41:55,869
that version dot XML file looks like so

973
00:41:54,480 --> 00:41:59,140
some of the key aspects

974
00:41:55,869 --> 00:42:00,970
here is one the version this is saying

975
00:41:59,140 --> 00:42:02,890
hey this is the version of the config

976
00:42:00,970 --> 00:42:06,038
file so the app will actually only

977
00:42:02,890 --> 00:42:10,450
update the values that it knows as its

978
00:42:06,039 --> 00:42:12,220
configuration settings if if this is a

979
00:42:10,450 --> 00:42:17,950
later version than a version it seemed

980
00:42:12,220 --> 00:42:19,930
previously this is now the URL where

981
00:42:17,950 --> 00:42:21,970
they download the stage-two application

982
00:42:19,930 --> 00:42:23,828
from so they download it since they're

983
00:42:21,970 --> 00:42:27,730
running a system they were able to call

984
00:42:23,829 --> 00:42:31,630
p.m. install - our command to do the

985
00:42:27,730 --> 00:42:35,559
install of stage 2 apk package is

986
00:42:31,630 --> 00:42:38,259
usually the name of that stage 2 apk as

987
00:42:35,559 --> 00:42:40,930
well these startup values were

988
00:42:38,259 --> 00:42:42,190
interesting so what these startup values

989
00:42:40,930 --> 00:42:44,078
are is they are going to set a

990
00:42:42,190 --> 00:42:47,470
preference within the stage 1

991
00:42:44,079 --> 00:42:49,269
application it says every time the phone

992
00:42:47,470 --> 00:42:51,879
boots up you're gonna start these

993
00:42:49,269 --> 00:42:54,399
services these services are usually

994
00:42:51,880 --> 00:42:57,210
living in the stage 2 application so

995
00:42:54,400 --> 00:42:59,950
it's the way that that stage 1 system

996
00:42:57,210 --> 00:43:02,170
pre-installed application is able to

997
00:42:59,950 --> 00:43:04,269
ensure the longevity and the lifeline of

998
00:43:02,170 --> 00:43:06,869
the stage 2 application that gets

999
00:43:04,269 --> 00:43:06,868
installed

1000
00:43:07,230 --> 00:43:13,180
lastly they do a couple of different

1001
00:43:09,789 --> 00:43:15,819
types of whitelisting so if they they

1002
00:43:13,180 --> 00:43:19,739
have the ability to send board device

1003
00:43:15,819 --> 00:43:24,670
and model values back in this reject

1004
00:43:19,739 --> 00:43:26,920
variable value and if the phone's values

1005
00:43:24,670 --> 00:43:30,819
matches the ones of rejects they also

1006
00:43:26,920 --> 00:43:34,869
will not run the final interesting check

1007
00:43:30,819 --> 00:43:39,099
they do is they send an HTTP request to

1008
00:43:34,869 --> 00:43:43,539
these CD ends that are at get IP ya get

1009
00:43:39,099 --> 00:43:46,299
IP dot PHP this returns an IP as well as

1010
00:43:43,539 --> 00:43:48,369
a timestamp what it looks like is that

1011
00:43:46,299 --> 00:43:50,650
this is a second localization check

1012
00:43:48,369 --> 00:43:51,910
because it's a CDN that means you know

1013
00:43:50,650 --> 00:43:53,319
the server is gonna be based in

1014
00:43:51,910 --> 00:43:55,569
different parts of the world and respond

1015
00:43:53,319 --> 00:43:57,759
to you based on where you're trying to

1016
00:43:55,569 --> 00:44:00,460
connect from and so they use that to

1017
00:43:57,759 --> 00:44:06,130
check hey is this a place we still want

1018
00:44:00,460 --> 00:44:07,869
to run from so now that we've gone

1019
00:44:06,130 --> 00:44:12,220
through stage one we passed all

1020
00:44:07,869 --> 00:44:14,529
chess yay us we download stage two so

1021
00:44:12,220 --> 00:44:16,359
stage two almost always had these

1022
00:44:14,529 --> 00:44:18,130
different package names trying to

1023
00:44:16,359 --> 00:44:20,319
pretend to be Google products saying a

1024
00:44:18,130 --> 00:44:22,480
music service a play service sometimes

1025
00:44:20,319 --> 00:44:25,319
adding some integers in there and every

1026
00:44:22,480 --> 00:44:28,539
once in a while spelling google wrong

1027
00:44:25,319 --> 00:44:31,119
and this was much more obfuscated than

1028
00:44:28,539 --> 00:44:33,309
stage one generally stage 1 was not

1029
00:44:31,119 --> 00:44:36,220
obfuscated at all all of the strings

1030
00:44:33,309 --> 00:44:37,420
were included in one class and then they

1031
00:44:36,220 --> 00:44:39,788
had just about all of their

1032
00:44:37,420 --> 00:44:45,339
functionality in a single service called

1033
00:44:39,789 --> 00:44:48,940
back service so what they do is this is

1034
00:44:45,339 --> 00:44:50,740
the service that ultimately the stage

1035
00:44:48,940 --> 00:44:54,609
one was trying to start up with those

1036
00:44:50,740 --> 00:44:57,459
start up values and once it's started it

1037
00:44:54,609 --> 00:45:01,029
uses a screen observer object from

1038
00:44:57,460 --> 00:45:03,670
Android API s to start and stop the

1039
00:45:01,029 --> 00:45:06,819
service based on when the screen is on

1040
00:45:03,670 --> 00:45:09,339
this is used to show ads and sort of a

1041
00:45:06,819 --> 00:45:11,470
see we're only showing ads when the

1042
00:45:09,339 --> 00:45:15,660
screen is on and thus you should pay us

1043
00:45:11,470 --> 00:45:15,660
more for their monetization ad fraud

1044
00:45:15,989 --> 00:45:25,119
lastly it does drop a jar that's the ad

1045
00:45:19,089 --> 00:45:27,220
library yeah so the final family we're

1046
00:45:25,119 --> 00:45:29,769
gonna go into is one of these new

1047
00:45:27,220 --> 00:45:31,660
examples of click fraud as Kylie

1048
00:45:29,769 --> 00:45:33,879
mentioned we only started enforcing

1049
00:45:31,660 --> 00:45:36,670
detecting preventing on click fraud in

1050
00:45:33,880 --> 00:45:38,349
March 2019 so this was one of the first

1051
00:45:36,670 --> 00:45:40,450
families and one of the families that

1052
00:45:38,349 --> 00:45:42,400
sort of pushed that decision to start

1053
00:45:40,450 --> 00:45:46,749
enforcing and so we're gonna talk about

1054
00:45:42,400 --> 00:45:49,390
how they do that so we detected it

1055
00:45:46,749 --> 00:45:52,509
before we started enforcing on it

1056
00:45:49,390 --> 00:45:54,129
back in February 2018 it's only on side

1057
00:45:52,509 --> 00:46:00,249
loaded we haven't found this one on

1058
00:45:54,130 --> 00:46:03,819
Google Play so the way it works is you

1059
00:46:00,249 --> 00:46:06,399
have an APK an APK then drops the jar as

1060
00:46:03,819 --> 00:46:09,670
it's running and this jar contains the

1061
00:46:06,400 --> 00:46:11,980
class comm w sdk hence the name we gave

1062
00:46:09,670 --> 00:46:15,789
it dots star usually something that's

1063
00:46:11,980 --> 00:46:19,869
pro guarded so single letter the jar is

1064
00:46:15,789 --> 00:46:21,349
usually named nine digits jar so the way

1065
00:46:19,869 --> 00:46:24,799
that it does click fraud

1066
00:46:21,349 --> 00:46:27,920
is it creates an invisible webview that

1067
00:46:24,799 --> 00:46:29,809
show ads so the user can't see them

1068
00:46:27,920 --> 00:46:31,699
can't be annoyed can't report them can't

1069
00:46:29,809 --> 00:46:34,729
delete the app but then it uses

1070
00:46:31,699 --> 00:46:36,049
JavaScript to inject clicks on it so

1071
00:46:34,729 --> 00:46:37,848
that makes it look like to the ad

1072
00:46:36,049 --> 00:46:41,329
networks but you know a human is

1073
00:46:37,849 --> 00:46:43,009
interacting with your the ads you're

1074
00:46:41,329 --> 00:46:46,430
showing in thus they should pay the

1075
00:46:43,009 --> 00:46:48,499
person that has that advertising ID so

1076
00:46:46,430 --> 00:46:50,868
the way this works is that in the

1077
00:46:48,499 --> 00:46:54,169
webview client the invisible one where

1078
00:46:50,869 --> 00:46:57,680
they're showing all of the ads in the on

1079
00:46:54,170 --> 00:47:00,680
page finished function which is as it

1080
00:46:57,680 --> 00:47:02,779
describes an Android API for webview

1081
00:47:00,680 --> 00:47:06,069
that runs whenever the page is finished

1082
00:47:02,779 --> 00:47:09,049
loading it downloads javascript that

1083
00:47:06,069 --> 00:47:12,259
javascript is then run so it usually was

1084
00:47:09,049 --> 00:47:14,119
downloaded from this link what that

1085
00:47:12,259 --> 00:47:17,869
JavaScript that's downloaded looks like

1086
00:47:14,119 --> 00:47:22,039
was this really hidden name click j/s ad

1087
00:47:17,869 --> 00:47:24,440
so it comes through the webview or that

1088
00:47:22,039 --> 00:47:26,749
web page looking for any items that are

1089
00:47:24,440 --> 00:47:31,039
in the web page that have the element

1090
00:47:26,749 --> 00:47:33,169
named ad area it then tries to calculate

1091
00:47:31,039 --> 00:47:35,690
with a little random wiggle room to

1092
00:47:33,170 --> 00:47:38,660
hopefully not trigger different types of

1093
00:47:35,690 --> 00:47:41,420
click fraud detection mechanisms where

1094
00:47:38,660 --> 00:47:43,848
it wants to click once it does that it

1095
00:47:41,420 --> 00:47:49,489
then calls this foreign SDK dot ads

1096
00:47:43,849 --> 00:47:51,499
click function foreign SDK is the Nate

1097
00:47:49,489 --> 00:47:52,910
what they gave the name of the

1098
00:47:51,499 --> 00:47:55,189
JavaScript interface when they were

1099
00:47:52,910 --> 00:47:57,379
creating this webview so if you haven't

1100
00:47:55,190 --> 00:47:59,420
interacted with web views that often you

1101
00:47:57,380 --> 00:48:02,119
might be looking around for a class name

1102
00:47:59,420 --> 00:48:07,219
or an SDK but it's actually this other

1103
00:48:02,119 --> 00:48:10,160
class come view SDK 80a that they happen

1104
00:48:07,219 --> 00:48:13,549
to name for an SDK so then you can take

1105
00:48:10,160 --> 00:48:17,209
a look there and ultimately what that

1106
00:48:13,549 --> 00:48:19,579
function does is it checks the proposed

1107
00:48:17,209 --> 00:48:21,558
X Y click values that that function sent

1108
00:48:19,579 --> 00:48:23,660
in against the screen size and the

1109
00:48:21,559 --> 00:48:26,059
density it then checks the other

1110
00:48:23,660 --> 00:48:28,069
configuration settings such as how

1111
00:48:26,059 --> 00:48:30,109
quickly am i clicking I don't how many

1112
00:48:28,069 --> 00:48:32,239
times have I clicked and that's ways

1113
00:48:30,109 --> 00:48:33,910
that they try to hide themselves from

1114
00:48:32,239 --> 00:48:35,740
advertising networks

1115
00:48:33,910 --> 00:48:38,770
trying to detect fraud as well and

1116
00:48:35,740 --> 00:48:44,979
ultimately it uses the API call dispatch

1117
00:48:38,770 --> 00:48:47,230
attachement to do the click so with that

1118
00:48:44,980 --> 00:48:49,839
I hope it was interesting we went

1119
00:48:47,230 --> 00:48:52,660
through all of the malware trends or PHA

1120
00:48:49,839 --> 00:48:54,339
trends for the first half of 2018 and

1121
00:48:52,660 --> 00:48:57,038
then tried to really do a deep dive into

1122
00:48:54,339 --> 00:48:59,710
the most modern or current techniques

1123
00:48:57,039 --> 00:49:01,990
that malware authors are using to become

1124
00:48:59,710 --> 00:49:05,559
impactful to become prevalent and how

1125
00:49:01,990 --> 00:49:10,149
they evolve and sort of vary their

1126
00:49:05,559 --> 00:49:12,579
techniques as well so a couple of key

1127
00:49:10,150 --> 00:49:14,920
takeaways well I guess two more broad

1128
00:49:12,579 --> 00:49:16,450
ones is I've now discovered that even if

1129
00:49:14,920 --> 00:49:18,880
you lock that door it doesn't stay

1130
00:49:16,450 --> 00:49:20,589
closed by the way and my second key

1131
00:49:18,880 --> 00:49:22,329
takeaway for you for general life is

1132
00:49:20,589 --> 00:49:24,308
apparently weeks after having a cold you

1133
00:49:22,329 --> 00:49:26,740
can still call Ike crazy so sorry about

1134
00:49:24,309 --> 00:49:28,930
that but in terms of actual malware

1135
00:49:26,740 --> 00:49:30,879
detection one of our key takeaways we've

1136
00:49:28,930 --> 00:49:33,399
really kind of honed in on over the last

1137
00:49:30,880 --> 00:49:35,140
six months at Google is that focus

1138
00:49:33,400 --> 00:49:37,660
detection efforts can really have a big

1139
00:49:35,140 --> 00:49:39,160
impact on PHA and I think one of the

1140
00:49:37,660 --> 00:49:41,288
categories where we've seen that is

1141
00:49:39,160 --> 00:49:43,450
hostile downloaders and the work that

1142
00:49:41,289 --> 00:49:44,890
was done last year and by highlighting

1143
00:49:43,450 --> 00:49:46,689
some of the categories that we see as

1144
00:49:44,890 --> 00:49:49,629
being the most prominent and prevalent

1145
00:49:46,690 --> 00:49:51,250
in the Android ecosystem we're hoping

1146
00:49:49,630 --> 00:49:53,079
that we can really encourage others that

1147
00:49:51,250 --> 00:49:54,670
if you're seeing similar trends you know

1148
00:49:53,079 --> 00:49:56,559
please come to us come work with us

1149
00:49:54,670 --> 00:49:58,480
let's collaborate you know when we all

1150
00:49:56,559 --> 00:50:01,450
focus in on these categories is when we

1151
00:49:58,480 --> 00:50:03,520
can have the best impact the second one

1152
00:50:01,450 --> 00:50:05,348
is the fact that we you know always need

1153
00:50:03,520 --> 00:50:07,630
to suspect cloaking and obfuscation

1154
00:50:05,349 --> 00:50:10,510
luckily mati is a little cynical and

1155
00:50:07,630 --> 00:50:12,069
already does that by trade but I think

1156
00:50:10,510 --> 00:50:14,109
all the examples that she's shown today

1157
00:50:12,069 --> 00:50:16,690
really highlight that right all the

1158
00:50:14,109 --> 00:50:18,670
impactful malware families that we see

1159
00:50:16,690 --> 00:50:20,410
tend to use combinations of those

1160
00:50:18,670 --> 00:50:22,390
techniques to try and evade detection x'

1161
00:50:20,410 --> 00:50:24,460
and they're constantly changing the way

1162
00:50:22,390 --> 00:50:25,770
they use those techniques so we need to

1163
00:50:24,460 --> 00:50:28,569
keep on the lookout for that

1164
00:50:25,770 --> 00:50:31,270
the last lessons learned from us is

1165
00:50:28,569 --> 00:50:33,579
don't be complacent always consider a

1166
00:50:31,270 --> 00:50:35,770
missing variant when we've been looking

1167
00:50:33,579 --> 00:50:37,059
at these impactful families we see that

1168
00:50:35,770 --> 00:50:38,920
most of them are really well resourced

1169
00:50:37,059 --> 00:50:41,500
and that means that they actually have

1170
00:50:38,920 --> 00:50:43,480
the capability to evolve rapidly change

1171
00:50:41,500 --> 00:50:45,520
things I think bread SMS is a really

1172
00:50:43,480 --> 00:50:47,170
good example of that with the money

1173
00:50:45,520 --> 00:50:47,950
they're bringing in they can hire more

1174
00:50:47,170 --> 00:50:50,110
and more engineer

1175
00:50:47,950 --> 00:50:52,299
to change the code more quickly every

1176
00:50:50,110 --> 00:50:54,130
time we put in detection mechanisms they

1177
00:50:52,300 --> 00:50:56,620
try and work them out they try and evade

1178
00:50:54,130 --> 00:50:58,390
them so for us as a community I think

1179
00:50:56,620 --> 00:51:00,279
that means we need to constantly suspect

1180
00:50:58,390 --> 00:51:01,600
that there's a variant we're missing so

1181
00:51:00,280 --> 00:51:03,520
whenever you think that you have a

1182
00:51:01,600 --> 00:51:06,009
family sold that you have at the right

1183
00:51:03,520 --> 00:51:08,830
detection mechanism go and broaden your

1184
00:51:06,010 --> 00:51:10,570
search look a little bit different for

1185
00:51:08,830 --> 00:51:14,950
new slightly different samples and see

1186
00:51:10,570 --> 00:51:18,070
if there's something we're missing just

1187
00:51:14,950 --> 00:51:19,779
saying you know we think fighting PHA is

1188
00:51:18,070 --> 00:51:22,990
brilliant if you think it's brilliant to

1189
00:51:19,780 --> 00:51:24,910
come chat and here's some more resources

1190
00:51:22,990 --> 00:51:26,919
so as I said those PHA definitions are

1191
00:51:24,910 --> 00:51:30,129
available online and we also have last

1192
00:51:26,920 --> 00:51:31,900
year's Android urine review report and

1193
00:51:30,130 --> 00:51:34,660
in general if you see something that you

1194
00:51:31,900 --> 00:51:35,980
suspect is PHA here's my email please

1195
00:51:34,660 --> 00:51:40,540
feel free to get in touch we'd love to

1196
00:51:35,980 --> 00:51:45,640
hear from you and so thank you all for

1197
00:51:40,540 --> 00:51:47,830
oh yeah yeah so thank you all for coming

1198
00:51:45,640 --> 00:51:49,720
coming after lunch the two of us are the

1199
00:51:47,830 --> 00:51:51,759
ones up here presenting but all of this

1200
00:51:49,720 --> 00:51:53,350
work really has been as always a

1201
00:51:51,760 --> 00:51:56,170
collaboration there's many different

1202
00:51:53,350 --> 00:51:59,170
people behind the scenes that help us

1203
00:51:56,170 --> 00:52:03,270
obviously analyze calculate all these

1204
00:51:59,170 --> 00:52:03,270
different things so yeah thank you

1205
00:52:09,210 --> 00:52:16,750
Russians basalt Amazon sink we know

1206
00:52:15,220 --> 00:52:20,790
Chin's are apparent estar

1207
00:52:16,750 --> 00:52:20,790
I think it's a xi amo

1208
00:52:22,300 --> 00:52:28,380
you told that some hours are constantly

1209
00:52:24,970 --> 00:52:31,089
checking where you are right now right

1210
00:52:28,380 --> 00:52:35,020
why is that why do you think that they

1211
00:52:31,090 --> 00:52:38,940
don't they don't attack on China's soil

1212
00:52:35,020 --> 00:52:41,320
for example so I think one you need to

1213
00:52:38,940 --> 00:52:44,590
so I'm not a lawyer and I'm also

1214
00:52:41,320 --> 00:52:46,870
obviously making some guesses of what I

1215
00:52:44,590 --> 00:52:48,610
think the answer is but I think based on

1216
00:52:46,870 --> 00:52:51,069
where the developers are in the world

1217
00:52:48,610 --> 00:52:53,680
and where they may be they may not want

1218
00:52:51,070 --> 00:52:57,940
to target their own people there's also

1219
00:52:53,680 --> 00:53:02,230
the checking as in red SMS that you

1220
00:52:57,940 --> 00:53:04,570
don't want to it's not worth executing

1221
00:53:02,230 --> 00:53:06,520
the bad behavior if the person is not in

1222
00:53:04,570 --> 00:53:09,700
the area of the world where you can make

1223
00:53:06,520 --> 00:53:11,440
money I think there's also depending you

1224
00:53:09,700 --> 00:53:13,689
may choose if you're a malware developer

1225
00:53:11,440 --> 00:53:15,310
to execute bad stuff in areas where you

1226
00:53:13,690 --> 00:53:17,170
don't think it's as likely that if

1227
00:53:15,310 --> 00:53:19,360
you're found you will be prosecuted or

1228
00:53:17,170 --> 00:53:23,200
put in jail so I think all of these sort

1229
00:53:19,360 --> 00:53:26,920
of come into the cost risk or the risk

1230
00:53:23,200 --> 00:53:28,930
benefit decision for malware authors and

1231
00:53:26,920 --> 00:53:32,260
you know the world is pretty hook

1232
00:53:28,930 --> 00:53:36,399
dispersed in how we treat find and able

1233
00:53:32,260 --> 00:53:37,870
to detect our fight malware I think the

1234
00:53:36,400 --> 00:53:39,370
only thing I'd add to that is there are

1235
00:53:37,870 --> 00:53:40,569
obviously some types of PHA that

1236
00:53:39,370 --> 00:53:42,520
deliberately try and target specific

1237
00:53:40,570 --> 00:53:44,140
groups right so I think fishing is

1238
00:53:42,520 --> 00:53:46,450
something that comes to mind that can

1239
00:53:44,140 --> 00:53:48,069
often be more targeted and in that case

1240
00:53:46,450 --> 00:53:49,810
it doesn't really make sense to broadly

1241
00:53:48,070 --> 00:53:53,070
target everybody when there's really a

1242
00:53:49,810 --> 00:53:53,070
select group that you're going after

1243
00:54:00,579 --> 00:54:07,010
can you talk about the tools you use to

1244
00:54:03,589 --> 00:54:08,930
do this kind of analysis so we can't

1245
00:54:07,010 --> 00:54:11,270
talk about the proprietary tools that

1246
00:54:08,930 --> 00:54:13,520
you Google use this to detect but for

1247
00:54:11,270 --> 00:54:15,710
most of my reverse engineering

1248
00:54:13,520 --> 00:54:18,440
I still use ida pro or the jeb

1249
00:54:15,710 --> 00:54:21,740
decompiler as well as then internal

1250
00:54:18,440 --> 00:54:24,320
tools we've developed so yeah if you are

1251
00:54:21,740 --> 00:54:27,020
a reverse er have used Ida or binary

1252
00:54:24,320 --> 00:54:31,160
ninja or any other disassembler I

1253
00:54:27,020 --> 00:54:33,440
started with object dump and then before

1254
00:54:31,160 --> 00:54:34,609
I could get a job to pay for a Jeb

1255
00:54:33,440 --> 00:54:37,760
decompiler license

1256
00:54:34,609 --> 00:54:39,770
I used the Jade X D compiler for Java

1257
00:54:37,760 --> 00:54:43,780
code or Android applications which is

1258
00:54:39,770 --> 00:54:43,780
also free thank you

1259
00:54:49,870 --> 00:54:56,890
hi congratulations for the presentation

1260
00:54:52,540 --> 00:55:01,840
two questions first you guys try to work

1261
00:54:56,890 --> 00:55:06,220
with law enforcement angels in parallel

1262
00:55:01,840 --> 00:55:07,990
to try to find these guys and the second

1263
00:55:06,220 --> 00:55:12,779
questions what are the strategies

1264
00:55:07,990 --> 00:55:15,220
against side-loaded PJ because you guys

1265
00:55:12,780 --> 00:55:17,440
can't drop it from the google play

1266
00:55:15,220 --> 00:55:20,709
because it's not there so how can you

1267
00:55:17,440 --> 00:55:23,020
mitigate those threats so I will take

1268
00:55:20,710 --> 00:55:26,740
the side loaded question first

1269
00:55:23,020 --> 00:55:29,830
so side loaded so google play protect is

1270
00:55:26,740 --> 00:55:32,709
built into Android operating system and

1271
00:55:29,830 --> 00:55:35,020
if a user consents then our goal is to

1272
00:55:32,710 --> 00:55:36,370
still protect those users even if

1273
00:55:35,020 --> 00:55:37,900
they're choosing not to download their

1274
00:55:36,370 --> 00:55:40,690
applications from play because they've

1275
00:55:37,900 --> 00:55:42,040
said we want GPP protection and so I

1276
00:55:40,690 --> 00:55:45,790
think that's especially important

1277
00:55:42,040 --> 00:55:49,600
because the accessibility to Google Play

1278
00:55:45,790 --> 00:55:50,890
also and helmet is dependent across the

1279
00:55:49,600 --> 00:55:51,670
world based on what is your

1280
00:55:50,890 --> 00:55:53,710
infrastructure

1281
00:55:51,670 --> 00:55:56,830
how much does downloading an app cost

1282
00:55:53,710 --> 00:56:00,220
cost you and things like that and so I

1283
00:55:56,830 --> 00:56:02,440
think I personally care and I work

1284
00:56:00,220 --> 00:56:04,629
almost exclusively on the non Google

1285
00:56:02,440 --> 00:56:06,730
Play problem is because there are so

1286
00:56:04,630 --> 00:56:08,700
many other people around the world who

1287
00:56:06,730 --> 00:56:11,020
they have a lot of reasons that mean

1288
00:56:08,700 --> 00:56:12,549
maybe disadvantaged in different ways

1289
00:56:11,020 --> 00:56:16,470
that make it side loading a better

1290
00:56:12,550 --> 00:56:21,640
option for them for downloading apps I

1291
00:56:16,470 --> 00:56:23,169
get the first question so I guess I'd

1292
00:56:21,640 --> 00:56:25,180
say more broadly you know at Google Play

1293
00:56:23,170 --> 00:56:28,240
protect we're obviously focused on what

1294
00:56:25,180 --> 00:56:29,919
we can impact right and so for us one of

1295
00:56:28,240 --> 00:56:32,379
the primary mechanisms we use to protect

1296
00:56:29,920 --> 00:56:34,090
users is to show them a warning so the

1297
00:56:32,380 --> 00:56:35,980
whole idea is we're not trying to be the

1298
00:56:34,090 --> 00:56:37,420
gatekeepers to what people can and can't

1299
00:56:35,980 --> 00:56:38,860
have on their device you know I

1300
00:56:37,420 --> 00:56:40,840
mentioned earlier at the cyber

1301
00:56:38,860 --> 00:56:44,770
presentation about categories we have

1302
00:56:40,840 --> 00:56:47,080
related to apps that can modify security

1303
00:56:44,770 --> 00:56:48,820
settings right and there are cases where

1304
00:56:47,080 --> 00:56:50,560
we think that's PHA because in general

1305
00:56:48,820 --> 00:56:53,800
it's risky but there are some users who

1306
00:56:50,560 --> 00:56:55,390
want it so when we show warnings usually

1307
00:56:53,800 --> 00:56:58,270
users can click through them if they

1308
00:56:55,390 --> 00:57:00,520
choose to so step one is that that is

1309
00:56:58,270 --> 00:57:03,130
our primary mechanism that we use to try

1310
00:57:00,520 --> 00:57:03,640
and detect and protect users obviously

1311
00:57:03,130 --> 00:57:06,460
is good

1312
00:57:03,640 --> 00:57:08,950
if we receive a legal request for

1313
00:57:06,460 --> 00:57:10,630
information and it complies with the

1314
00:57:08,950 --> 00:57:12,009
legal requirements of that country then

1315
00:57:10,630 --> 00:57:15,460
obviously we're under a lawful

1316
00:57:12,010 --> 00:57:17,250
obligation to provide it and as I said

1317
00:57:15,460 --> 00:57:19,900
before we're always open to

1318
00:57:17,250 --> 00:57:22,480
collaboration with the industry when it

1319
00:57:19,900 --> 00:57:24,580
comes to trying to fight PHA but our

1320
00:57:22,480 --> 00:57:26,590
first focus is on thinking about how we

1321
00:57:24,580 --> 00:57:30,779
can protect it in the ecosystem we

1322
00:57:26,590 --> 00:57:30,780
control and that is through warnings

