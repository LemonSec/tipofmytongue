1
00:00:02,790 --> 00:00:17,160
[Music]

2
00:00:14,549 --> 00:00:19,640
I'm Brazilian and but I will speak in

3
00:00:17,160 --> 00:00:22,920
English because I have to speak to so

4
00:00:19,640 --> 00:00:25,920
I'm here to talk about Linux kernel

5
00:00:22,920 --> 00:00:28,980
rootkit this is my friend easier I bring

6
00:00:25,920 --> 00:00:33,989
him from Russia to talk about that

7
00:00:28,980 --> 00:00:42,290
haha and we'll I hope you guys enjoyed

8
00:00:33,989 --> 00:00:45,660
this talk so is it working so hello guys

9
00:00:42,290 --> 00:00:48,780
nice to visit this place I would like

10
00:00:45,660 --> 00:00:53,699
Brazil I'm here first time yeah and

11
00:00:48,780 --> 00:00:58,140
today we yeah thank you thank you they

12
00:00:53,699 --> 00:01:00,599
will explain something about little kids

13
00:00:58,140 --> 00:01:02,910
tell you something about names kind of

14
00:01:00,600 --> 00:01:09,950
what kids have you have any one of our

15
00:01:02,910 --> 00:01:13,798
few guys tried to write any rootkit no

16
00:01:09,950 --> 00:01:16,220
no one okay because auntie I think that

17
00:01:13,799 --> 00:01:18,740
every programmer have to write a

18
00:01:16,220 --> 00:01:22,890
cryptographically Bria and the rootkit

19
00:01:18,740 --> 00:01:24,839
yeah okay so let's let's write a start

20
00:01:22,890 --> 00:01:31,409
so yeah I'm from Russia my name is ilya

21
00:01:24,840 --> 00:01:34,560
melikhov I didn't I haven't present me

22
00:01:31,409 --> 00:01:38,130
so I'm eager I know by forbidden that's

23
00:01:34,560 --> 00:01:39,540
my nickname some guys who work at least

24
00:01:38,130 --> 00:01:44,670
will know him

25
00:01:39,540 --> 00:01:46,740
so we are talking about rootkit

26
00:01:44,670 --> 00:01:51,780
programming but we want talk about

27
00:01:46,740 --> 00:01:59,658
malware and exploitation you guys all

28
00:01:51,780 --> 00:02:04,560
you know what is a root kit yeah or not

29
00:01:59,659 --> 00:02:06,330
a root kit the this introduction

30
00:02:04,560 --> 00:02:08,699
and we are talking about this now right

31
00:02:06,330 --> 00:02:12,090
now yeah okay a rootkit

32
00:02:08,699 --> 00:02:16,980
this is the the hacker definition of a

33
00:02:12,090 --> 00:02:19,410
rootkit so this is a toolkit that will

34
00:02:16,980 --> 00:02:22,769
be on the root of the system so why

35
00:02:19,410 --> 00:02:25,170
rootkit is a kind of software designed

36
00:02:22,770 --> 00:02:29,840
to provide continued privilege

37
00:02:25,170 --> 00:02:37,410
so continued privilege is go in fact

38
00:02:29,840 --> 00:02:43,620
forever that the main the main thought

39
00:02:37,410 --> 00:02:47,760
about rootkit so rootkit is a apt that

40
00:02:43,620 --> 00:02:49,739
try to effect that the really reason to

41
00:02:47,760 --> 00:02:53,100
write a retreat is in fact something

42
00:02:49,739 --> 00:03:00,300
computers service Mart fond of stuff all

43
00:02:53,100 --> 00:03:03,269
technology stuff in fact something we

44
00:03:00,300 --> 00:03:08,489
can classify rootkit just a overview

45
00:03:03,269 --> 00:03:11,820
here about user mod rootkit LD preload

46
00:03:08,489 --> 00:03:16,320
basis I specific technique to write a

47
00:03:11,820 --> 00:03:17,549
user mod rootkit kernel-mode rootkit

48
00:03:16,320 --> 00:03:18,690
that we are going to talk about

49
00:03:17,549 --> 00:03:21,959
kernel-mode

50
00:03:18,690 --> 00:03:23,250
we are going to talk about lkm base I

51
00:03:21,959 --> 00:03:29,209
will explain later

52
00:03:23,250 --> 00:03:30,810
so femur base rootkit UEFI is a hybrid

53
00:03:29,209 --> 00:03:34,079
rootkit called

54
00:03:30,810 --> 00:03:37,590
something know about boot kids I

55
00:03:34,079 --> 00:03:43,620
provides a rootkit is in VM level so I

56
00:03:37,590 --> 00:03:46,230
per visor is a onion of software between

57
00:03:43,620 --> 00:03:51,690
the kernel and the hardware that

58
00:03:46,230 --> 00:03:54,048
provides VM so there's a some ways to

59
00:03:51,690 --> 00:03:57,510
hook in hypervisor and as ways to write

60
00:03:54,049 --> 00:04:02,480
rootkit for advisor and hybrid I've I

61
00:03:57,510 --> 00:04:07,980
wrote kids that is mixed techniques so

62
00:04:02,480 --> 00:04:10,858
why yeah why - why - write another one

63
00:04:07,980 --> 00:04:14,630
kernel based rootkit why not

64
00:04:10,859 --> 00:04:17,940
yeah but the memory

65
00:04:14,630 --> 00:04:20,040
the main reason is that inside from

66
00:04:17,940 --> 00:04:22,469
inside the kennel you can out of how the

67
00:04:20,040 --> 00:04:24,240
system behave or more precisely more

68
00:04:22,470 --> 00:04:27,660
better than from exam for example from

69
00:04:24,240 --> 00:04:29,790
user mode and also it is extremely hard

70
00:04:27,660 --> 00:04:32,760
to detect such kind of rootkits from the

71
00:04:29,790 --> 00:04:36,240
user space because if you if you have

72
00:04:32,760 --> 00:04:39,750
properly written a rootkit it's totally

73
00:04:36,240 --> 00:04:41,419
invisible for user space and overall

74
00:04:39,750 --> 00:04:44,910
it's it's a great challenge here if you

75
00:04:41,419 --> 00:04:46,889
trying to understand how to make kernel

76
00:04:44,910 --> 00:04:48,930
mode programming or kit it's a good it's

77
00:04:46,889 --> 00:04:51,840
a good starting point for do this yeah

78
00:04:48,930 --> 00:04:54,150
and which are the challenges for for

79
00:04:51,840 --> 00:04:56,880
writing a kernel a good kernel-mode

80
00:04:54,150 --> 00:05:00,750
rootkits first of all camera mode

81
00:04:56,880 --> 00:05:04,020
programming requires deep knowledge of

82
00:05:00,750 --> 00:05:06,630
how operating system works how it

83
00:05:04,020 --> 00:05:09,780
interacts with hard way and like this

84
00:05:06,630 --> 00:05:12,120
and if you have some bug in your code

85
00:05:09,780 --> 00:05:16,380
for sure it back will crash the system

86
00:05:12,120 --> 00:05:18,510
so sooner or later yeah and to write a

87
00:05:16,380 --> 00:05:21,060
good rootkit you have to define a scope

88
00:05:18,510 --> 00:05:23,430
of work before starting to do this drug

89
00:05:21,060 --> 00:05:27,500
because if you don't know what you want

90
00:05:23,430 --> 00:05:30,210
to achieve you will get nothing yeah and

91
00:05:27,500 --> 00:05:32,970
one more thing about Linux kernel kids

92
00:05:30,210 --> 00:05:38,159
because programming for Linux Linux

93
00:05:32,970 --> 00:05:40,950
kernel it's it's kind of art especially

94
00:05:38,160 --> 00:05:43,200
if you want to write a code that will

95
00:05:40,950 --> 00:05:45,389
that can work for all the variations of

96
00:05:43,200 --> 00:05:47,610
kernels and that is the one of the

97
00:05:45,389 --> 00:05:49,740
changes because for example I have

98
00:05:47,610 --> 00:05:52,560
example here you know Red Hat and they

99
00:05:49,740 --> 00:05:55,940
have a CentOS free system

100
00:05:52,560 --> 00:06:00,479
yeah and they have a can let's say to

101
00:05:55,940 --> 00:06:01,380
6:32 but it's actually not to 6:32 but

102
00:06:00,479 --> 00:06:05,760
it's there

103
00:06:01,380 --> 00:06:07,610
based on two 6:32 kernel with some

104
00:06:05,760 --> 00:06:09,780
backporting feature so they are

105
00:06:07,610 --> 00:06:15,139
developing this kernel maybe I don't

106
00:06:09,780 --> 00:06:20,638
know about maybe five or seven years but

107
00:06:15,139 --> 00:06:24,419
the the main difficult to write rootkit

108
00:06:20,639 --> 00:06:27,430
is take the code generic as possible to

109
00:06:24,419 --> 00:06:31,240
all kernel versions so this is the

110
00:06:27,430 --> 00:06:34,150
the hardest part so I will talk about

111
00:06:31,240 --> 00:06:37,030
some techniques about rootkit and we'll

112
00:06:34,150 --> 00:06:40,900
talk about some how to take the code

113
00:06:37,030 --> 00:06:42,700
more generic okay yeah and there are

114
00:06:40,900 --> 00:06:46,599
some constraints if you are in kernel

115
00:06:42,700 --> 00:06:48,099
because it's not user space so there are

116
00:06:46,600 --> 00:06:51,810
some constraint and the first constraint

117
00:06:48,100 --> 00:06:54,490
is that a candle has API and this API

118
00:06:51,810 --> 00:06:59,410
it's quite it's quite it's not so big

119
00:06:54,490 --> 00:07:02,080
and it it changes quite quite often so

120
00:06:59,410 --> 00:07:04,120
it's hard to manage all possible

121
00:07:02,080 --> 00:07:07,659
versions of kernel because at a changes

122
00:07:04,120 --> 00:07:11,110
from version to version also in general

123
00:07:07,660 --> 00:07:14,440
if you have a lkm based rocket lkm may

124
00:07:11,110 --> 00:07:17,170
stands for Linux kernel model model so

125
00:07:14,440 --> 00:07:19,060
if you if you want to develop this kind

126
00:07:17,170 --> 00:07:23,140
of rootkit based on the candle model you

127
00:07:19,060 --> 00:07:25,270
have to build rebuild for each kernel

128
00:07:23,140 --> 00:07:27,460
you want to you want to have a key do

129
00:07:25,270 --> 00:07:30,330
you have to rebuild this root kit from

130
00:07:27,460 --> 00:07:33,729
sources for almost every version of the

131
00:07:30,330 --> 00:07:36,219
other kernel so it's impossible to have

132
00:07:33,730 --> 00:07:39,610
just only one binary four rootkit to

133
00:07:36,220 --> 00:07:44,950
work on each on every target you want

134
00:07:39,610 --> 00:07:47,170
yeah and there one thing more is that

135
00:07:44,950 --> 00:07:49,810
this rootkit probably will not survive

136
00:07:47,170 --> 00:07:51,880
between kennel update because if you if

137
00:07:49,810 --> 00:07:55,780
I can on version change it after they

138
00:07:51,880 --> 00:07:57,760
update this work it will this work it

139
00:07:55,780 --> 00:08:01,440
will not work yeah and also if you are

140
00:07:57,760 --> 00:08:04,870
in Colonel you have restricted set of

141
00:08:01,440 --> 00:08:07,510
methods of functions you can you can

142
00:08:04,870 --> 00:08:10,090
call so you cannot do everything that

143
00:08:07,510 --> 00:08:14,110
you can do from user mode let's say

144
00:08:10,090 --> 00:08:15,969
let's try to download file and unzip

145
00:08:14,110 --> 00:08:20,220
this file from HTTP from inside the

146
00:08:15,970 --> 00:08:20,220
kernel it's quite complex complex tasks

147
00:08:21,840 --> 00:08:31,119
some this is some features that a word

148
00:08:26,530 --> 00:08:34,689
kid have to not have to have but it's

149
00:08:31,120 --> 00:08:37,710
very nice to have these features be able

150
00:08:34,690 --> 00:08:40,800
to survive a reboot and update kernel so

151
00:08:37,710 --> 00:08:43,229
this feature is very hard to do but

152
00:08:40,799 --> 00:08:47,370
is the best feature that I would kid can

153
00:08:43,229 --> 00:08:49,500
be because if you sort of if you survive

154
00:08:47,370 --> 00:08:52,680
the reboot and survive the kind of

155
00:08:49,500 --> 00:08:56,640
updates you can stay personal so this is

156
00:08:52,680 --> 00:09:03,479
the main feature that I wrote kids can

157
00:08:56,640 --> 00:09:07,170
have so be able to change the whole

158
00:09:03,480 --> 00:09:11,930
system behavior yeah we will write a

159
00:09:07,170 --> 00:09:18,709
software in our that will do something

160
00:09:11,930 --> 00:09:22,949
do malicious something and normally will

161
00:09:18,709 --> 00:09:26,819
change the system behavior this is this

162
00:09:22,950 --> 00:09:29,940
is what we were going to do so we have

163
00:09:26,820 --> 00:09:32,100
to be able to hide files to hide folders

164
00:09:29,940 --> 00:09:36,600
to hide process network connections

165
00:09:32,100 --> 00:09:40,709
users and what you want the main feature

166
00:09:36,600 --> 00:09:45,720
that rootkit that can be is hide

167
00:09:40,709 --> 00:09:49,829
something high just hide so we are being

168
00:09:45,720 --> 00:09:53,670
able to evade against detection because

169
00:09:49,829 --> 00:10:00,000
there's a lot of protections actually in

170
00:09:53,670 --> 00:10:03,149
a lot of the detection ways to get a

171
00:10:00,000 --> 00:10:05,730
mower inside the system so we have to

172
00:10:03,149 --> 00:10:08,100
evade these techniques of detection we

173
00:10:05,730 --> 00:10:12,029
have to stay stealth the root gives

174
00:10:08,100 --> 00:10:14,910
proper sustained stealth so and we have

175
00:10:12,029 --> 00:10:17,810
to be able to provide a pillow execution

176
00:10:14,910 --> 00:10:21,569
actually a vector or a keylogger

177
00:10:17,810 --> 00:10:24,020
whatever we have to get some of this

178
00:10:21,570 --> 00:10:26,630
equation may be remotely maybe not but

179
00:10:24,020 --> 00:10:30,300
inject something inside the kernel

180
00:10:26,630 --> 00:10:33,660
stealthy so next time unfortunately we

181
00:10:30,300 --> 00:10:37,949
cannot fit all these topics today yeah

182
00:10:33,660 --> 00:10:44,100
but let's let's continue you let's start

183
00:10:37,949 --> 00:10:47,609
with basic yeah we start with the basic

184
00:10:44,100 --> 00:10:49,709
tech kernel techniques because we have

185
00:10:47,610 --> 00:10:54,290
to stack the beginning so the beginning

186
00:10:49,709 --> 00:10:56,900
is hook Cisco Rukh Cisco Cisco is

187
00:10:54,290 --> 00:11:00,620
a function that provides a communication

188
00:10:56,900 --> 00:11:06,050
of user lien and Caroline so if we hook

189
00:11:00,620 --> 00:11:09,220
is called hook just put a hook this is

190
00:11:06,050 --> 00:11:14,420
cause we can change the behavior between

191
00:11:09,220 --> 00:11:18,230
userland and Caroline so in Linux we

192
00:11:14,420 --> 00:11:22,630
have I structure at least called Cisco

193
00:11:18,230 --> 00:11:28,420
table a table yeah and when in

194
00:11:22,630 --> 00:11:32,660
architecture x86 for 64-bit we have a

195
00:11:28,420 --> 00:11:34,939
instruction of processor that you just

196
00:11:32,660 --> 00:11:37,880
do Cisco and this is true if you will

197
00:11:34,940 --> 00:11:41,090
point to the cisco hinder is cisco Henry

198
00:11:37,880 --> 00:11:43,820
is in a entry point of the processor

199
00:11:41,090 --> 00:11:47,770
that when your system boots the colonel

200
00:11:43,820 --> 00:11:53,120
put the code there and when you do Cisco

201
00:11:47,770 --> 00:11:56,240
Cisco Henry is launched and you try to

202
00:11:53,120 --> 00:12:02,780
find a searching by ID

203
00:11:56,240 --> 00:12:05,930
what is cow it has to execute so here

204
00:12:02,780 --> 00:12:09,980
we'll find this is cow on Siskel table

205
00:12:05,930 --> 00:12:12,170
find some address and make a function

206
00:12:09,980 --> 00:12:16,270
call we have talked about symbol here

207
00:12:12,170 --> 00:12:20,530
because symbol is the best way and the

208
00:12:16,270 --> 00:12:23,270
the easiest way to find a Cisco table

209
00:12:20,530 --> 00:12:26,120
address base address we have to find a

210
00:12:23,270 --> 00:12:27,829
dress we are going to change to find a

211
00:12:26,120 --> 00:12:31,220
dress you are going to change well we

212
00:12:27,830 --> 00:12:33,020
can find that uses symbols there is lots

213
00:12:31,220 --> 00:12:36,730
of techniques that can find Cisco table

214
00:12:33,020 --> 00:12:43,760
but uses symbols is more easier and

215
00:12:36,730 --> 00:12:50,180
better and stealthier so we can use this

216
00:12:43,760 --> 00:12:54,830
function if you grab this file / Brock /

217
00:12:50,180 --> 00:12:59,750
calcium's file you can grab a dress from

218
00:12:54,830 --> 00:13:02,210
Cisco's just doing CAD / Brock /

219
00:12:59,750 --> 00:13:06,110
calcium's grep

220
00:13:02,210 --> 00:13:08,970
it says call whatever you want it's it

221
00:13:06,110 --> 00:13:11,460
what you want and you will find the

222
00:13:08,970 --> 00:13:15,420
address of the dysfunction and the skull

223
00:13:11,460 --> 00:13:18,810
table because it's met so you can find

224
00:13:15,420 --> 00:13:21,360
in a do it in a kernel module just call

225
00:13:18,810 --> 00:13:22,439
a calling dysfunctions housing to cut

226
00:13:21,360 --> 00:13:25,290
name

227
00:13:22,440 --> 00:13:28,250
Pasi a string with a name and this

228
00:13:25,290 --> 00:13:31,140
future will find the address of the

229
00:13:28,250 --> 00:13:34,790
function and you can put this address

230
00:13:31,140 --> 00:13:39,960
inside a pointer a function to is a good

231
00:13:34,790 --> 00:13:42,380
later right and you can use calcium's on

232
00:13:39,960 --> 00:13:47,940
each symbols is another matter to get

233
00:13:42,380 --> 00:13:50,100
address of a specific function every

234
00:13:47,940 --> 00:13:54,750
function but we are talking about here

235
00:13:50,100 --> 00:13:59,450
of skulls and to put in a pointer from a

236
00:13:54,750 --> 00:13:59,450
full pointer and try to execute it later

237
00:14:00,680 --> 00:14:08,099
okay yeah when you are inside the kennel

238
00:14:06,060 --> 00:14:12,540
and you want to modify something that is

239
00:14:08,100 --> 00:14:14,160
a protection basically text section of

240
00:14:12,540 --> 00:14:16,349
kernel text section means the section

241
00:14:14,160 --> 00:14:18,719
that has the code it usually it is

242
00:14:16,350 --> 00:14:23,340
protected from there from to be written

243
00:14:18,720 --> 00:14:25,790
from everywhere so basically to modify

244
00:14:23,340 --> 00:14:28,520
the kernel you have to find a way to

245
00:14:25,790 --> 00:14:33,360
write to write protected regions and

246
00:14:28,520 --> 00:14:35,730
usually it is this protection it is

247
00:14:33,360 --> 00:14:37,650
implemented inside the inside the CPU

248
00:14:35,730 --> 00:14:41,220
and this protection can be disabled by

249
00:14:37,650 --> 00:14:44,520
just removing one flag from one register

250
00:14:41,220 --> 00:14:46,380
and this is this way it's used widely

251
00:14:44,520 --> 00:14:49,829
but it's not correct it's not correct to

252
00:14:46,380 --> 00:14:52,800
use this way because write protection is

253
00:14:49,830 --> 00:14:56,060
the system mechanism that is used by the

254
00:14:52,800 --> 00:15:00,390
operating system to implement think like

255
00:14:56,060 --> 00:15:04,170
copy-on-write coa and if you're disabled

256
00:15:00,390 --> 00:15:07,560
for a while this copy protection the

257
00:15:04,170 --> 00:15:10,880
kennel will behave unpredictably so it's

258
00:15:07,560 --> 00:15:14,369
but it's better to find other way how to

259
00:15:10,880 --> 00:15:14,800
modify the read on him done the memory

260
00:15:14,370 --> 00:15:18,189
of the

261
00:15:14,800 --> 00:15:20,139
and the other way is to to make a

262
00:15:18,189 --> 00:15:22,050
temporary mapping cover the same region

263
00:15:20,139 --> 00:15:26,019
or it only region but but with different

264
00:15:22,050 --> 00:15:30,729
with different type so basically if you

265
00:15:26,019 --> 00:15:32,769
if you know how CPU works CP works in

266
00:15:30,730 --> 00:15:35,519
this way that you have for example one

267
00:15:32,769 --> 00:15:38,679
page of memory and this page may have

268
00:15:35,519 --> 00:15:41,439
two different virtual addresses inside

269
00:15:38,679 --> 00:15:44,199
the other space of kernel or user mode

270
00:15:41,439 --> 00:15:47,469
process whatever yeah and each of these

271
00:15:44,199 --> 00:15:50,910
addresses can be accessed in different

272
00:15:47,470 --> 00:15:54,249
way which one of these addresses can be

273
00:15:50,910 --> 00:15:57,959
can be connected through using one of

274
00:15:54,249 --> 00:15:59,889
these addresses you can use you can

275
00:15:57,959 --> 00:16:01,809
refer to this memory as there are

276
00:15:59,889 --> 00:16:03,899
read-only memory but for example if you

277
00:16:01,809 --> 00:16:06,999
have different mapping and this mapping

278
00:16:03,899 --> 00:16:09,160
Maps this memory memory as a as a right

279
00:16:06,999 --> 00:16:11,679
enabled memory so using different

280
00:16:09,160 --> 00:16:14,429
address you can write to the read-only

281
00:16:11,679 --> 00:16:19,420
protected memory in easy way so

282
00:16:14,429 --> 00:16:20,529
basically this is the first but I don't

283
00:16:19,420 --> 00:16:22,118
think that you are interested in

284
00:16:20,529 --> 00:16:24,970
functions now this is how it can be

285
00:16:22,119 --> 00:16:26,860
implemented and see yeah and this is for

286
00:16:24,970 --> 00:16:29,829
example if you want to modify his call

287
00:16:26,860 --> 00:16:32,709
table as his call table you can just

288
00:16:29,829 --> 00:16:35,649
disable protection I will write item

289
00:16:32,709 --> 00:16:38,368
inside the skull table but say my sees

290
00:16:35,649 --> 00:16:40,569
open my eyes open means my see my cisco

291
00:16:38,369 --> 00:16:44,259
opens his complementation yeah and you

292
00:16:40,569 --> 00:16:47,110
can a map temporary memory and after

293
00:16:44,259 --> 00:16:47,589
this you you have the she's call table

294
00:16:47,110 --> 00:16:57,399
overwritten

295
00:16:47,589 --> 00:17:02,319
oh so let's talk about yeah yeah yeah as

296
00:16:57,399 --> 00:17:04,510
I said we will hook some Cisco's but we

297
00:17:02,319 --> 00:17:07,000
don't have to actually we don't have to

298
00:17:04,510 --> 00:17:09,908
hook only skulls who can see skulls is

299
00:17:07,000 --> 00:17:14,980
nice to change the kernel behavior about

300
00:17:09,909 --> 00:17:18,809
usually and stuff but there's some ways

301
00:17:14,980 --> 00:17:21,970
to hook Cisco's I have told about that

302
00:17:18,809 --> 00:17:25,609
we just will replace the pointer on

303
00:17:21,970 --> 00:17:32,640
Siskel table I told it before and

304
00:17:25,609 --> 00:17:35,479
we have to hook this cows but not only

305
00:17:32,640 --> 00:17:37,980
hook this skulls not who only sees cause

306
00:17:35,480 --> 00:17:42,360
we can hook another function Sankar know

307
00:17:37,980 --> 00:17:44,610
is the purpose of the Nexus life

308
00:17:42,360 --> 00:17:48,780
yeah yeah kay hook is a framework of

309
00:17:44,610 --> 00:17:51,780
hooking that search of symbols of the

310
00:17:48,780 --> 00:17:54,389
functions and try to hook the function

311
00:17:51,780 --> 00:17:56,399
in the product of the function right can

312
00:17:54,390 --> 00:17:58,770
explain and you can find it on github

313
00:17:56,400 --> 00:18:01,710
with you if you're interested

314
00:17:58,770 --> 00:18:03,840
yeah and cook it's a tiny tiny framework

315
00:18:01,710 --> 00:18:06,360
that allows you to hook some function

316
00:18:03,840 --> 00:18:10,049
inside the kernel whatever whatever the

317
00:18:06,360 --> 00:18:13,469
function and it it implements some set

318
00:18:10,049 --> 00:18:15,840
of macro size you can use them like yeah

319
00:18:13,470 --> 00:18:18,270
is very easy to use because you just

320
00:18:15,840 --> 00:18:21,770
declare the function do you are hooking

321
00:18:18,270 --> 00:18:31,168
declare the function the evil function

322
00:18:21,770 --> 00:18:36,809
below and use this macros to just do the

323
00:18:31,169 --> 00:18:40,980
hook do the the the Fork of the flu to

324
00:18:36,809 --> 00:18:42,658
change the flow yeah and this is how the

325
00:18:40,980 --> 00:18:45,750
engine can be used this engine can be

326
00:18:42,659 --> 00:18:48,289
used easily but by edging two lines off

327
00:18:45,750 --> 00:18:52,590
include include files and just modifying

328
00:18:48,289 --> 00:18:56,039
LD flux flux of the linker yeah and so

329
00:18:52,590 --> 00:18:58,799
this is the example in see how least

330
00:18:56,039 --> 00:19:01,440
libera can be used and this example

331
00:18:58,799 --> 00:19:03,150
shows how to hook I not permission

332
00:19:01,440 --> 00:19:04,500
function I know permission factions the

333
00:19:03,150 --> 00:19:06,570
factions had the kernel so it's

334
00:19:04,500 --> 00:19:10,440
essentially the function that we are

335
00:19:06,570 --> 00:19:13,918
hooking and just doing that declaration

336
00:19:10,440 --> 00:19:19,110
up there so you declare your function

337
00:19:13,919 --> 00:19:22,230
that we use a good and these macros just

338
00:19:19,110 --> 00:19:24,629
do that and you can is a good why we

339
00:19:22,230 --> 00:19:28,440
want and is equal to original function

340
00:19:24,630 --> 00:19:29,950
yeah it's and it's it's all hidden under

341
00:19:28,440 --> 00:19:33,560
the hood under

342
00:19:29,950 --> 00:19:38,870
framework hood so you have not to know

343
00:19:33,560 --> 00:19:41,899
even how these framework works yeah now

344
00:19:38,870 --> 00:19:43,909
we are going to tell your about some

345
00:19:41,900 --> 00:19:47,380
techniques that are commonly used in

346
00:19:43,910 --> 00:19:51,410
rootkits like hiding cough processes and

347
00:19:47,380 --> 00:19:54,470
hiding cough files and directories yeah

348
00:19:51,410 --> 00:19:56,360
so I didn't go processes it it's a

349
00:19:54,470 --> 00:19:58,430
hiding of processes and and this is the

350
00:19:56,360 --> 00:20:00,560
one of the most important features of

351
00:19:58,430 --> 00:20:03,140
old kits or every rootkit wants to have

352
00:20:00,560 --> 00:20:05,300
this this feature and this isn't it's

353
00:20:03,140 --> 00:20:07,280
not so complex to implement it but you

354
00:20:05,300 --> 00:20:11,780
have to know how kernel works how can

355
00:20:07,280 --> 00:20:14,060
you manage the processes and to do

356
00:20:11,780 --> 00:20:16,550
process kind you have to do three things

357
00:20:14,060 --> 00:20:18,649
but basically the first one is to be

358
00:20:16,550 --> 00:20:21,409
able to alter the manage the process

359
00:20:18,650 --> 00:20:23,540
lifecycle you have to be able to attach

360
00:20:21,410 --> 00:20:28,280
or detach some information to processes

361
00:20:23,540 --> 00:20:32,360
well what starts or while it ends and

362
00:20:28,280 --> 00:20:37,310
also you need to you need to filter some

363
00:20:32,360 --> 00:20:39,709
in from some output off of the kernel

364
00:20:37,310 --> 00:20:41,149
that cannot provide to user space for

365
00:20:39,710 --> 00:20:44,450
example there is a proc file system

366
00:20:41,150 --> 00:20:47,360
maybe someone over all of you and also

367
00:20:44,450 --> 00:20:49,760
bottle it and through this file system

368
00:20:47,360 --> 00:20:52,250
you can't examine examine you can see

369
00:20:49,760 --> 00:20:54,590
all processes inside the system you can

370
00:20:52,250 --> 00:20:56,450
see bits of processing and linked

371
00:20:54,590 --> 00:20:58,760
informations of these processes and also

372
00:20:56,450 --> 00:21:00,890
if you are hiding some processes you

373
00:20:58,760 --> 00:21:03,379
also probably want to hide some CPU

374
00:21:00,890 --> 00:21:05,360
usage of this process because this

375
00:21:03,380 --> 00:21:09,530
process can be hidden but still can

376
00:21:05,360 --> 00:21:12,260
affect the CPU usage yeah so about the

377
00:21:09,530 --> 00:21:16,280
life cycle if you want to be able to

378
00:21:12,260 --> 00:21:17,990
hide process you have to hook two

379
00:21:16,280 --> 00:21:20,540
functions and the first function is

380
00:21:17,990 --> 00:21:26,150
called create function it and it's

381
00:21:20,540 --> 00:21:28,879
executed when when the process it's when

382
00:21:26,150 --> 00:21:31,520
the process is created so in language

383
00:21:28,880 --> 00:21:33,950
Colonel create creation call process it

384
00:21:31,520 --> 00:21:37,040
it is implemented through fork so at

385
00:21:33,950 --> 00:21:39,080
each fork you have you are the kernel

386
00:21:37,040 --> 00:21:41,840
creates a copy of process for you and

387
00:21:39,080 --> 00:21:43,220
copy press function it is executed so

388
00:21:41,840 --> 00:21:47,149
it's a good place to

389
00:21:43,220 --> 00:21:49,970
to hook to be able to to get control

390
00:21:47,150 --> 00:21:51,860
when the process start and the other

391
00:21:49,970 --> 00:21:54,080
fashion is a exit creates factions

392
00:21:51,860 --> 00:21:56,360
function and it is executive when the

393
00:21:54,080 --> 00:21:58,570
process dies so it is the fashion when

394
00:21:56,360 --> 00:22:03,459
you can do some cleanup job like this

395
00:21:58,570 --> 00:22:07,820
and this is this is the picture of of

396
00:22:03,460 --> 00:22:10,010
process 3 when you want to hide some

397
00:22:07,820 --> 00:22:12,200
process it means that you don't want to

398
00:22:10,010 --> 00:22:14,360
hide the exact process but you want to

399
00:22:12,200 --> 00:22:17,030
hide probably I want to hide all the

400
00:22:14,360 --> 00:22:18,800
subtrees of all these processes so let's

401
00:22:17,030 --> 00:22:22,270
say you want to hide this batch process

402
00:22:18,800 --> 00:22:25,550
it means that you want to hide any

403
00:22:22,270 --> 00:22:30,010
children of this process also I'll show

404
00:22:25,550 --> 00:22:34,280
you later how how it works in demo yeah

405
00:22:30,010 --> 00:22:36,320
when you try to hide process you have to

406
00:22:34,280 --> 00:22:39,649
hide tragedy ensue process and this

407
00:22:36,320 --> 00:22:43,490
thread of soup process so in Caroline

408
00:22:39,650 --> 00:22:46,790
process and threads and another things

409
00:22:43,490 --> 00:22:49,580
is declared by a task istrict these

410
00:22:46,790 --> 00:22:52,760
tracks can be flagged you can flag

411
00:22:49,580 --> 00:22:55,090
distress circuit because when I hook a

412
00:22:52,760 --> 00:23:02,570
function that will deal with this this

413
00:22:55,090 --> 00:23:06,320
test struct you can know what process

414
00:23:02,570 --> 00:23:08,060
you are to a you are managing and what

415
00:23:06,320 --> 00:23:12,560
you you will have to do with this

416
00:23:08,060 --> 00:23:18,260
process yeah and there's a lot of

417
00:23:12,560 --> 00:23:22,870
functions that you can hook and to hide

418
00:23:18,260 --> 00:23:26,810
some process and then the main line is I

419
00:23:22,870 --> 00:23:29,959
have to flag process threads super

420
00:23:26,810 --> 00:23:33,399
process and threads of super process and

421
00:23:29,960 --> 00:23:33,400
try to hide out this and

422
00:23:33,430 --> 00:23:39,670
but just houki some function or and

423
00:23:37,180 --> 00:23:44,440
there is an example if you hook this

424
00:23:39,670 --> 00:23:47,590
function you can hide a process and if

425
00:23:44,440 --> 00:23:53,080
you hook this call get dance is a Cisco

426
00:23:47,590 --> 00:23:58,169
you can hide a process so this is call

427
00:23:53,080 --> 00:23:58,169
you can hide that but there is a lot of

428
00:23:58,440 --> 00:24:03,760
promise a lot of things you have to do

429
00:24:01,690 --> 00:24:07,480
hooking a get dance so it's better hook

430
00:24:03,760 --> 00:24:11,940
that another function that is showed

431
00:24:07,480 --> 00:24:15,309
right there and this function to to get

432
00:24:11,940 --> 00:24:21,190
all process hiding and don't get caught

433
00:24:15,309 --> 00:24:24,639
about forensics tools yeah one of the

434
00:24:21,190 --> 00:24:28,090
greatest for instance tools that I met

435
00:24:24,640 --> 00:24:30,220
it's a unhide utility and it's written

436
00:24:28,090 --> 00:24:34,780
maybe I know five years ago and it is

437
00:24:30,220 --> 00:24:39,400
written and it is not developed now but

438
00:24:34,780 --> 00:24:41,649
still it it can it can show many hide

439
00:24:39,400 --> 00:24:43,450
hidden things of a grading system and it

440
00:24:41,650 --> 00:24:46,870
if you want to hide that some process

441
00:24:43,450 --> 00:24:49,390
you you probably want to run this this

442
00:24:46,870 --> 00:24:54,250
utility to see is it working or not

443
00:24:49,390 --> 00:24:58,440
yeah about the CPU utilization CPU

444
00:24:54,250 --> 00:25:01,710
utilization is a nice tool for height

445
00:24:58,440 --> 00:25:04,540
and a nice technique to hide miners

446
00:25:01,710 --> 00:25:05,250
because there's a lot of miners yeah I

447
00:25:04,540 --> 00:25:11,678
know

448
00:25:05,250 --> 00:25:15,490
no so if you can run a process in your

449
00:25:11,679 --> 00:25:17,860
system stealthy you have to hide a

450
00:25:15,490 --> 00:25:21,460
process but you have to hide a what this

451
00:25:17,860 --> 00:25:24,639
process are doing to and when you have a

452
00:25:21,460 --> 00:25:28,179
miner this miner will consume your CPU

453
00:25:24,640 --> 00:25:30,970
right and you have to hide that so if

454
00:25:28,179 --> 00:25:36,040
you just hook this function of kernel

455
00:25:30,970 --> 00:25:40,150
and I can't process stick you can hide a

456
00:25:36,040 --> 00:25:43,149
CPU usage so just with the same

457
00:25:40,150 --> 00:25:46,420
technique we are hide process reflect

458
00:25:43,150 --> 00:25:49,150
this process this test strokes

459
00:25:46,420 --> 00:25:52,990
all treads also process also be all

460
00:25:49,150 --> 00:25:55,420
treads of Ceuta process and hoop

461
00:25:52,990 --> 00:25:59,140
dysfunction and when this function is

462
00:25:55,420 --> 00:26:05,620
called he at this phone and my hook our

463
00:25:59,140 --> 00:26:10,420
hook will read the what task struct is

464
00:26:05,620 --> 00:26:16,149
and try to return zero and try to don't

465
00:26:10,420 --> 00:26:17,860
count time and hide cpu use asian that's

466
00:26:16,150 --> 00:26:20,050
the next technique it's the technique

467
00:26:17,860 --> 00:26:22,179
about hiding cough process of files and

468
00:26:20,050 --> 00:26:25,240
directories also one of the most

469
00:26:22,180 --> 00:26:28,450
required features of work it because it

470
00:26:25,240 --> 00:26:29,770
allows one to hide the stuff on file

471
00:26:28,450 --> 00:26:33,940
system yeah

472
00:26:29,770 --> 00:26:38,590
and basically it can be implemented

473
00:26:33,940 --> 00:26:41,440
using few approaches like the first

474
00:26:38,590 --> 00:26:45,909
approach is to filter out the access to

475
00:26:41,440 --> 00:26:48,310
files by their full passes it means that

476
00:26:45,910 --> 00:26:50,440
when you want to open some file you have

477
00:26:48,310 --> 00:26:52,870
to provide the full probably the full

478
00:26:50,440 --> 00:26:56,560
path to this file and that is the one

479
00:26:52,870 --> 00:26:58,389
point of from inside the kernel at which

480
00:26:56,560 --> 00:27:01,710
you you are filtering something by a

481
00:26:58,390 --> 00:27:05,440
full path path name and the other one is

482
00:27:01,710 --> 00:27:07,840
it's the set of so called fuel dealer

483
00:27:05,440 --> 00:27:09,490
functions those functions they will be

484
00:27:07,840 --> 00:27:11,350
called when you're listening directors

485
00:27:09,490 --> 00:27:13,030
and they are implement inside the file

486
00:27:11,350 --> 00:27:16,810
system and side the file system driver

487
00:27:13,030 --> 00:27:19,720
and using these functions and hooking

488
00:27:16,810 --> 00:27:22,750
those functions you can filter out the

489
00:27:19,720 --> 00:27:25,210
content of directories yeah and for the

490
00:27:22,750 --> 00:27:27,790
first approach for the first step you

491
00:27:25,210 --> 00:27:31,330
have to hook those files three functions

492
00:27:27,790 --> 00:27:35,170
and at any of these functions you have a

493
00:27:31,330 --> 00:27:38,010
full path to the file and you can filter

494
00:27:35,170 --> 00:27:40,420
out it's based on the file path

495
00:27:38,010 --> 00:27:44,260
comparation or I don't know whatever and

496
00:27:40,420 --> 00:27:46,390
for other for hiding your stuff from

497
00:27:44,260 --> 00:27:48,550
being listed you have to you have to

498
00:27:46,390 --> 00:27:51,730
hook other set of functions like I feel

499
00:27:48,550 --> 00:27:55,750
filled your set of functions yeah so

500
00:27:51,730 --> 00:27:59,200
yeah we are close to them you know I am

501
00:27:55,750 --> 00:27:59,779
a creator of reptile is a rootkit that I

502
00:27:59,200 --> 00:28:02,359
have

503
00:27:59,779 --> 00:28:06,019
which debt in this address of my github

504
00:28:02,359 --> 00:28:09,049
and I would illustrate to you how it

505
00:28:06,019 --> 00:28:12,200
works but not the old version I will

506
00:28:09,049 --> 00:28:14,960
demonstrate it newest version 2.0 major

507
00:28:12,200 --> 00:28:20,139
version so I will publish that in my

508
00:28:14,960 --> 00:28:22,849
github soon ok sorry we had lots of

509
00:28:20,139 --> 00:28:25,218
techniques a problem of technical

510
00:28:22,849 --> 00:28:28,218
problem with the projector I will try to

511
00:28:25,219 --> 00:28:34,399
show here in this shell because the only

512
00:28:28,219 --> 00:28:37,479
way so keep talking I will do some

513
00:28:34,399 --> 00:28:40,478
preparation here and I will do this demo

514
00:28:37,479 --> 00:28:40,479
son

515
00:28:50,200 --> 00:29:18,559
there we go so I will show a few part of

516
00:28:58,520 --> 00:29:24,920
the code firstly so here is my routine

517
00:29:18,559 --> 00:29:29,389
of start so I'm just doing that height

518
00:29:24,920 --> 00:29:33,950
function that this is a height this

519
00:29:29,390 --> 00:29:35,780
module from the LS module so because

520
00:29:33,950 --> 00:29:38,570
when you load the module to the kernel

521
00:29:35,780 --> 00:29:41,960
you add the module this is a driver

522
00:29:38,570 --> 00:29:44,840
right so you have to hide that so that

523
00:29:41,960 --> 00:29:49,670
function due to that I won't show you

524
00:29:44,840 --> 00:29:54,830
but you you will be able to see that in

525
00:29:49,670 --> 00:29:58,610
my github and you can after that I just

526
00:29:54,830 --> 00:30:00,678
make a hook on an edge filter to get

527
00:29:58,610 --> 00:30:04,070
some magic packs that will show this

528
00:30:00,679 --> 00:30:12,080
feature and get a vector and get a shell

529
00:30:04,070 --> 00:30:16,879
and try to execute down there the eye

530
00:30:12,080 --> 00:30:19,780
script are initializing script so I am

531
00:30:16,880 --> 00:30:25,160
hooking lots of functions yeah you know

532
00:30:19,780 --> 00:30:27,590
the communication of the rootkit with

533
00:30:25,160 --> 00:30:30,200
user land and kernel and I change

534
00:30:27,590 --> 00:30:33,620
because I was using the cable Cisco so

535
00:30:30,200 --> 00:30:36,020
now I am using input input output

536
00:30:33,620 --> 00:30:40,428
control I net input it's good control is

537
00:30:36,020 --> 00:30:44,179
a way to communicate user land and

538
00:30:40,429 --> 00:30:46,760
kernel and just with a socket so I am

539
00:30:44,179 --> 00:30:48,710
communicating with this hook hooking

540
00:30:46,760 --> 00:30:54,370
input output control and add

541
00:30:48,710 --> 00:30:59,789
manipulating sockets so luckily yeah and

542
00:30:54,370 --> 00:31:06,029
this hook is a hook of the read

543
00:30:59,789 --> 00:31:09,059
hook just hide five content also a file

544
00:31:06,029 --> 00:31:11,220
contain tampering and this is very

545
00:31:09,059 --> 00:31:13,379
important for my rootkit because the

546
00:31:11,220 --> 00:31:16,080
persistent I'm installing a driver doing

547
00:31:13,379 --> 00:31:17,699
some configuration userland and the fire

548
00:31:16,080 --> 00:31:21,059
that to that does that this

549
00:31:17,700 --> 00:31:24,749
configuration there will be I contained

550
00:31:21,059 --> 00:31:29,668
a configuration and we have to hide that

551
00:31:24,749 --> 00:31:35,210
when the system is not booted is not the

552
00:31:29,669 --> 00:31:39,599
modules not loaded this file will be

553
00:31:35,210 --> 00:31:42,389
nice will be configurated to load my

554
00:31:39,599 --> 00:31:46,070
module and when my module load my module

555
00:31:42,389 --> 00:31:48,748
hide this for this content of the file

556
00:31:46,070 --> 00:31:50,700
but you can hide another context but I

557
00:31:48,749 --> 00:31:55,019
mean use it to do that to do that my the

558
00:31:50,700 --> 00:31:58,619
hiding of my persistence so i'm Hokie

559
00:31:55,019 --> 00:32:03,859
get dance to hide folders process and

560
00:31:58,619 --> 00:32:06,899
files because all in we know in Linux is

561
00:32:03,859 --> 00:32:08,970
files so if you can hide files you can

562
00:32:06,899 --> 00:32:13,399
hide process too and this is an old

563
00:32:08,970 --> 00:32:18,960
method that a rootkit called Heron does

564
00:32:13,399 --> 00:32:22,859
later a guy called Manoj ring Pamir

565
00:32:18,960 --> 00:32:25,649
implemented this hook in the diamorphine

566
00:32:22,859 --> 00:32:26,908
rootkit and i am are implemented to but

567
00:32:25,649 --> 00:32:28,529
there is another way than other better

568
00:32:26,909 --> 00:32:33,450
ways it's just blood which is just for

569
00:32:28,529 --> 00:32:35,999
publish yeah and so I won't show my

570
00:32:33,450 --> 00:32:38,039
decoding more because we are lost in

571
00:32:35,999 --> 00:32:41,419
time we have lots of things to show I

572
00:32:38,039 --> 00:32:44,369
will show this route kids running okay

573
00:32:41,419 --> 00:32:46,970
because we are guarding some problems of

574
00:32:44,369 --> 00:32:46,970
connection here

575
00:32:56,530 --> 00:33:03,820
to install a rootkit is just run this

576
00:32:58,870 --> 00:33:06,129
command this will run a script to is

577
00:33:03,820 --> 00:33:08,669
that you compile configure compile

578
00:33:06,130 --> 00:33:08,670
install

579
00:33:21,270 --> 00:33:36,310
yeah I'm gonna do that with the full

580
00:33:25,480 --> 00:33:39,550
configuration compiled installed now my

581
00:33:36,310 --> 00:33:49,950
script will create a folder called

582
00:33:39,550 --> 00:33:49,950
reptile in the route if you'll sorry

583
00:33:51,480 --> 00:34:00,520
there's not reptile there but if you get

584
00:33:55,120 --> 00:34:03,060
inside there's a folder right there and

585
00:34:00,520 --> 00:34:05,650
if you

586
00:34:03,060 --> 00:34:09,190
there's nothing but there is something

587
00:34:05,650 --> 00:34:12,580
so because there's a lot of binaries

588
00:34:09,190 --> 00:34:17,590
here hidden that my rootkit will use and

589
00:34:12,580 --> 00:34:21,899
we'll try to do something right so I'm

590
00:34:17,590 --> 00:34:21,899
gonna show you the show is the best part

591
00:34:31,820 --> 00:34:46,140
to compile a client you have to just do

592
00:34:37,380 --> 00:34:56,120
the this common and it's compiled just

593
00:34:46,139 --> 00:35:01,140
run the client and we got a shell like

594
00:34:56,120 --> 00:35:04,170
Metasploit okay just like a method splat

595
00:35:01,140 --> 00:35:06,930
you can configuration what this client

596
00:35:04,170 --> 00:35:11,400
will do this client actually will do

597
00:35:06,930 --> 00:35:14,399
will send a mage packet that can be tcp

598
00:35:11,400 --> 00:35:17,940
UDP icmp magic packet and my rootkit

599
00:35:14,400 --> 00:35:18,570
will catch that and return a shell so I

600
00:35:17,940 --> 00:35:21,619
will show you

601
00:35:18,570 --> 00:35:21,619
[Music]

602
00:35:38,950 --> 00:35:48,470
as RC host is a source host of the

603
00:35:44,390 --> 00:36:01,660
packet that will be saying so you can

604
00:35:48,470 --> 00:36:01,660
spoof that I rose is the target

605
00:36:09,780 --> 00:36:30,720
I will use i ice Impe protocol to send

606
00:36:15,690 --> 00:36:33,780
this packet and how as I'm using ICMP I

607
00:36:30,720 --> 00:36:40,609
don't need to set up ports right just I

608
00:36:33,780 --> 00:36:40,610
will set up just run of

609
00:36:55,570 --> 00:36:59,939
sorry

610
00:36:56,880 --> 00:36:59,939
[Music]

611
00:37:22,210 --> 00:37:29,130
I was luckily because we have a problem

612
00:37:26,500 --> 00:37:29,130
of connection

613
00:37:47,300 --> 00:37:57,770
and there we go we got a shell just type

614
00:37:52,190 --> 00:38:00,350
my password and we got a reptile shell

615
00:37:57,770 --> 00:38:04,040
this reptile shell is like a manipulator

616
00:38:00,350 --> 00:38:06,560
so if you type help you will see the

617
00:38:04,040 --> 00:38:11,570
commands you can do you can upload and

618
00:38:06,560 --> 00:38:15,259
download files you can got a ATT Y shell

619
00:38:11,570 --> 00:38:19,280
and you can set up a delay that this

620
00:38:15,260 --> 00:38:26,650
show is gonna connecting back in each

621
00:38:19,280 --> 00:38:32,980
time you want so we've got a shell okay

622
00:38:26,650 --> 00:38:37,520
in the a reptile shell with a TTY and

623
00:38:32,980 --> 00:38:40,940
you can if you can see all process of

624
00:38:37,520 --> 00:38:53,440
the shell is hidden all connections

625
00:38:40,940 --> 00:38:53,440
hitting I will see you nothing

626
00:38:54,980 --> 00:39:08,540
nothing and I use for for connection you

627
00:39:06,230 --> 00:39:11,150
will see the connection of the reversal

628
00:39:08,540 --> 00:39:14,090
won't see but the connection of the

629
00:39:11,150 --> 00:39:17,900
client will see because this is the

630
00:39:14,090 --> 00:39:21,980
client is in the attacker machine and I

631
00:39:17,900 --> 00:39:24,890
am using it locally so you will see just

632
00:39:21,980 --> 00:39:26,900
the connection of the local of the

633
00:39:24,890 --> 00:39:30,049
client but the connection of the river

634
00:39:26,900 --> 00:39:32,750
you want to yeah you know you you have

635
00:39:30,050 --> 00:39:36,350
to see two connections here one of

636
00:39:32,750 --> 00:39:40,010
connections that get out or another that

637
00:39:36,350 --> 00:39:42,529
is receiving so the connection of

638
00:39:40,010 --> 00:39:47,530
reversal is hidden but the connection of

639
00:39:42,530 --> 00:39:47,530
the client you you is showing so

640
00:39:59,760 --> 00:40:11,010
nothing my mother's hitting to the

641
00:40:01,950 --> 00:40:12,689
kernel mode is hidden and nothing all

642
00:40:11,010 --> 00:40:15,869
hidden we have got a shell

643
00:40:12,690 --> 00:40:20,570
we sent a package we we got a atti shell

644
00:40:15,869 --> 00:40:25,109
and all process all stuff is hidden and

645
00:40:20,570 --> 00:40:27,960
there's another feature that you can cut

646
00:40:25,109 --> 00:40:31,859
with this red tile but we have a

647
00:40:27,960 --> 00:40:35,850
limitation of time so I will pass the

648
00:40:31,859 --> 00:40:40,140
dead talk to easier to keep to do the

649
00:40:35,850 --> 00:40:41,609
next part of our talk okay yeah okay let

650
00:40:40,140 --> 00:40:49,650
me continue about some advanced

651
00:40:41,609 --> 00:40:51,359
techniques so you know what that the

652
00:40:49,650 --> 00:40:53,670
camera has a lead subsystem and our did

653
00:40:51,359 --> 00:40:55,859
subsystem it allows to monitor some

654
00:40:53,670 --> 00:40:59,940
process activity blah blah blah so

655
00:40:55,859 --> 00:41:03,750
basically my audio subsystem can be but

656
00:40:59,940 --> 00:41:05,940
bypassed easily just by design when you

657
00:41:03,750 --> 00:41:09,030
are inside the kernel mode you can just

658
00:41:05,940 --> 00:41:10,710
hide the you can just hook a function

659
00:41:09,030 --> 00:41:12,990
out get a load function and this

660
00:41:10,710 --> 00:41:15,240
function it is called on each process

661
00:41:12,990 --> 00:41:18,990
start so basically this fashion

662
00:41:15,240 --> 00:41:23,879
allocates out it context and in this

663
00:41:18,990 --> 00:41:28,140
function you can just remove one flag

664
00:41:23,880 --> 00:41:30,450
from so-called threat information thread

665
00:41:28,140 --> 00:41:32,879
information flags so you can just remove

666
00:41:30,450 --> 00:41:36,509
this flag and the camera will not out

667
00:41:32,880 --> 00:41:39,180
get those processes so it's easier yeah

668
00:41:36,510 --> 00:41:41,640
this is the code but it is not so

669
00:41:39,180 --> 00:41:44,368
interested yeah the other technique is

670
00:41:41,640 --> 00:41:46,410
to to filter out Colonel Locke so can

671
00:41:44,369 --> 00:41:49,619
look it's something that you can observe

672
00:41:46,410 --> 00:41:51,930
using the most common and this this is

673
00:41:49,619 --> 00:41:54,720
the buffer inside the kernel in which

674
00:41:51,930 --> 00:41:57,720
Colonel prints some messages by using

675
00:41:54,720 --> 00:42:01,290
print key or like this so basically when

676
00:41:57,720 --> 00:42:03,390
it can be useful it can be useful in

677
00:42:01,290 --> 00:42:05,580
situations when you want to hide some

678
00:42:03,390 --> 00:42:09,680
activity of kernel module or something

679
00:42:05,580 --> 00:42:13,230
other from the from being observed by

680
00:42:09,680 --> 00:42:13,799
utilities like the mask and his lock

681
00:42:13,230 --> 00:42:17,220
yeah

682
00:42:13,800 --> 00:42:19,110
and when you are loading the candle

683
00:42:17,220 --> 00:42:21,029
model without the signature there will

684
00:42:19,110 --> 00:42:23,390
be a message you always there will be a

685
00:42:21,030 --> 00:42:27,390
message inside the catalog that

686
00:42:23,390 --> 00:42:29,370
verification fail at because of missing

687
00:42:27,390 --> 00:42:31,140
signature yeah and by using this

688
00:42:29,370 --> 00:42:34,259
technique you can just filter out those

689
00:42:31,140 --> 00:42:37,200
messages and there are two ways to get

690
00:42:34,260 --> 00:42:39,480
information from the catalog the first

691
00:42:37,200 --> 00:42:41,939
one is the his local school and other

692
00:42:39,480 --> 00:42:43,640
one is Brock kms again the first one

693
00:42:41,940 --> 00:42:47,250
says look it's quite old mechanism but

694
00:42:43,640 --> 00:42:49,200
the other one it's quite new and finally

695
00:42:47,250 --> 00:42:51,480
inside the kernel there is just two

696
00:42:49,200 --> 00:42:54,270
functions that you have to hook to be

697
00:42:51,480 --> 00:42:57,050
able to filter out those messages those

698
00:42:54,270 --> 00:43:01,370
messages they have different types of

699
00:42:57,050 --> 00:43:05,040
formats but basically this is the row

700
00:43:01,370 --> 00:43:08,100
null-terminated a slash n terminate new

701
00:43:05,040 --> 00:43:11,790
line terminated based messages so the

702
00:43:08,100 --> 00:43:14,460
algorithm of filtering out this message

703
00:43:11,790 --> 00:43:17,040
from Kenalog is to hook those functions

704
00:43:14,460 --> 00:43:19,470
do syslog fashion and def kind secure it

705
00:43:17,040 --> 00:43:21,300
function let them do their job by

706
00:43:19,470 --> 00:43:23,750
putting information from the kernel to

707
00:43:21,300 --> 00:43:26,670
the user space and after this operation

708
00:43:23,750 --> 00:43:28,620
inside the hook you have to get this

709
00:43:26,670 --> 00:43:30,180
information from user space filter it

710
00:43:28,620 --> 00:43:36,240
out inside the kernel space it put it

711
00:43:30,180 --> 00:43:38,339
back maybe probably probably altering

712
00:43:36,240 --> 00:43:39,930
the final final length so the length

713
00:43:38,340 --> 00:43:43,200
will be output if you if you're trying

714
00:43:39,930 --> 00:43:45,299
to filter out some some messages and

715
00:43:43,200 --> 00:43:48,149
other technique here I want to tell you

716
00:43:45,300 --> 00:43:50,040
about yeah is so-called Matroska

717
00:43:48,150 --> 00:43:51,930
technique do you notice this this door

718
00:43:50,040 --> 00:43:56,029
right you know what you're clear and

719
00:43:51,930 --> 00:43:58,470
this is something that allows you to

720
00:43:56,030 --> 00:44:01,460
break the signature because when you are

721
00:43:58,470 --> 00:44:05,339
writing some kind of special software

722
00:44:01,460 --> 00:44:08,970
probably you don't want to have a static

723
00:44:05,340 --> 00:44:13,410
signature so this technique basically

724
00:44:08,970 --> 00:44:15,750
based on two models you are writing your

725
00:44:13,410 --> 00:44:17,850
payload inside the first model and you

726
00:44:15,750 --> 00:44:19,560
are using the second model loader just

727
00:44:17,850 --> 00:44:22,290
to load the first model from inside the

728
00:44:19,560 --> 00:44:24,720
kernel and there the original model it's

729
00:44:22,290 --> 00:44:26,250
stored inside the loader in cryptid form

730
00:44:24,720 --> 00:44:30,899
so it's

731
00:44:26,250 --> 00:44:32,640
easy and it allows you to to get the

732
00:44:30,900 --> 00:44:35,610
found result let's say I have two models

733
00:44:32,640 --> 00:44:37,620
and the first model I call it parasite

734
00:44:35,610 --> 00:44:41,280
and the second one it's parasite loader

735
00:44:37,620 --> 00:44:44,870
it's yeah and in inside the first model

736
00:44:41,280 --> 00:44:48,420
I have the static strength like h2 HC

737
00:44:44,870 --> 00:44:51,420
2018 confidence wah blah and I can grab

738
00:44:48,420 --> 00:44:54,030
this this signature of just using grab

739
00:44:51,420 --> 00:44:57,630
and when I'm trying to grab the same

740
00:44:54,030 --> 00:45:00,090
structure from the loader I cannot see

741
00:44:57,630 --> 00:45:01,950
this structure but after this law a

742
00:45:00,090 --> 00:45:04,620
lottery being loaded inside the kennel

743
00:45:01,950 --> 00:45:07,560
you will see that first of all parasite

744
00:45:04,620 --> 00:45:10,140
loader starts and after this they

745
00:45:07,560 --> 00:45:13,259
embedded model starts so this is the

746
00:45:10,140 --> 00:45:16,140
basic technique but it allows you to not

747
00:45:13,260 --> 00:45:19,200
to have static signature and also there

748
00:45:16,140 --> 00:45:23,790
is a one technique to obfuscate ceased

749
00:45:19,200 --> 00:45:26,250
sees things from inside the C code so

750
00:45:23,790 --> 00:45:29,100
basically the problem of C strings is

751
00:45:26,250 --> 00:45:32,340
the is that the binary can easily be

752
00:45:29,100 --> 00:45:34,140
easily fingerprinted by using different

753
00:45:32,340 --> 00:45:37,140
kind of C strings inside embedded inside

754
00:45:34,140 --> 00:45:39,750
the binary and you can use this simple

755
00:45:37,140 --> 00:45:42,450
technique it is working it works only

756
00:45:39,750 --> 00:45:45,360
for GCC compiler but basically what it

757
00:45:42,450 --> 00:45:49,319
does it just changed the static string

758
00:45:45,360 --> 00:45:55,350
in form of quota hello world it changed

759
00:45:49,320 --> 00:45:57,870
it to allocating some on stick storage

760
00:45:55,350 --> 00:45:59,970
and fill this storage with some values

761
00:45:57,870 --> 00:46:05,250
and basically this is the hello world

762
00:45:59,970 --> 00:46:14,490
but in hex form now I can show some demo

763
00:46:05,250 --> 00:46:19,740
if we have some time okay okay so I want

764
00:46:14,490 --> 00:46:22,890
I want to I want to show you two things

765
00:46:19,740 --> 00:46:26,790
the first thing do you know what L K

766
00:46:22,890 --> 00:46:29,190
Aaron GLG this is a Linux kernel or an

767
00:46:26,790 --> 00:46:32,550
untimed word project this project is

768
00:46:29,190 --> 00:46:34,820
intended to help to detect malware from

769
00:46:32,550 --> 00:46:37,290
inside the kernel so basically it

770
00:46:34,820 --> 00:46:40,140
implements integrity chicken can stuff

771
00:46:37,290 --> 00:46:43,890
like this so to bypass this I

772
00:46:40,140 --> 00:46:51,720
I will show you how to bypass this this

773
00:46:43,890 --> 00:46:59,930
checker so mmm this is I'm trying to

774
00:46:51,720 --> 00:46:59,930
remember what to load first okay

775
00:47:00,020 --> 00:47:04,970
I'm loading now I'm loading

776
00:47:12,390 --> 00:47:18,640
I'm molding the protection models inside

777
00:47:16,600 --> 00:47:28,299
the kernel and you can see that this

778
00:47:18,640 --> 00:47:34,900
model is loaded and you can see yeah you

779
00:47:28,300 --> 00:47:37,750
can see that this model you can see that

780
00:47:34,900 --> 00:47:40,120
this model it's printed some stuff on

781
00:47:37,750 --> 00:47:43,870
the catalog that ok the system is clean

782
00:47:40,120 --> 00:47:48,900
now I I want to insert the model that is

783
00:47:43,870 --> 00:47:48,900
hooking some some function so

784
00:47:53,570 --> 00:47:59,060
yeah this function the function hooked

785
00:47:56,870 --> 00:48:01,910
is the load elf binary function and this

786
00:47:59,060 --> 00:48:05,029
function is called on any binary started

787
00:48:01,910 --> 00:48:10,160
for example I can start sleep here and

788
00:48:05,030 --> 00:48:13,450
you can see that the that hook is called

789
00:48:10,160 --> 00:48:16,790
and you can see also that Linux kernel

790
00:48:13,450 --> 00:48:19,069
runtime guard it it shows shows us that

791
00:48:16,790 --> 00:48:23,330
the sealed system have been compromised

792
00:48:19,070 --> 00:48:26,990
like this so now I show you how I can

793
00:48:23,330 --> 00:48:31,360
bypass this by logic other model which

794
00:48:26,990 --> 00:48:31,359
embeds the bypassing mechanism

795
00:48:50,780 --> 00:49:00,110
yeah no I'm starting again to load l KL

796
00:48:56,180 --> 00:49:03,759
g it is loaded and now I'm loading I'm

797
00:49:00,110 --> 00:49:03,760
rolling the other model

798
00:49:12,740 --> 00:49:21,890
yeah and we can see now that lk energy

799
00:49:17,990 --> 00:49:25,879
started but we can see that it prints no

800
00:49:21,890 --> 00:49:28,730
messages to the system work so we can

801
00:49:25,880 --> 00:49:33,920
call many times this Fang this binary we

802
00:49:28,730 --> 00:49:36,740
can see we can see this this that this

803
00:49:33,920 --> 00:49:39,619
function is hooked but kernel protection

804
00:49:36,740 --> 00:49:42,470
model it's not printing anything so it

805
00:49:39,619 --> 00:49:44,630
is bypassed it it can be it can be done

806
00:49:42,470 --> 00:49:46,848
because you cannot build a good

807
00:49:44,630 --> 00:49:49,450
protection on the same level you are

808
00:49:46,849 --> 00:49:49,450
attacking in

809
00:50:00,310 --> 00:50:06,670
yeah and now I'll show you how to use

810
00:50:03,490 --> 00:50:18,189
the process hiding how to how it works

811
00:50:06,670 --> 00:50:20,740
so basically I have I have rootkit

812
00:50:18,190 --> 00:50:23,020
installed now and it is now inside the

813
00:50:20,740 --> 00:50:28,000
allows it inside the system and I have

814
00:50:23,020 --> 00:50:32,350
the controlling script that allows me to

815
00:50:28,000 --> 00:50:36,430
pound something with in hidden it in

816
00:50:32,350 --> 00:50:39,690
hidden way let's say it will be bash -

817
00:50:36,430 --> 00:50:42,700
you so now I'm inside the other inside

818
00:50:39,690 --> 00:50:47,010
other bash and I can run sleep hundred

819
00:50:42,700 --> 00:50:53,080
and from the other terminal I can I can

820
00:50:47,010 --> 00:50:57,370
do piece three to see sleep for example

821
00:50:53,080 --> 00:50:59,920
and you have you see that there is no

822
00:50:57,370 --> 00:51:03,549
sleep process but it is it is it is

823
00:50:59,920 --> 00:51:08,140
around here and it is a run in hidden

824
00:51:03,550 --> 00:51:11,560
mode so it hides this the sleep process

825
00:51:08,140 --> 00:51:17,410
because it it was executive will started

826
00:51:11,560 --> 00:51:21,540
with some flag yeah and I can also show

827
00:51:17,410 --> 00:51:28,600
you how the CPU utilization can can be

828
00:51:21,540 --> 00:51:34,630
hidden also this is the yeah this is

829
00:51:28,600 --> 00:51:38,710
kind of mind but so what it does what

830
00:51:34,630 --> 00:51:45,690
this clip does it just takes zero memory

831
00:51:38,710 --> 00:51:45,690
and puts it to no device yeah but it it

832
00:51:45,930 --> 00:51:52,450
it produced some load but you cannot see

833
00:51:48,760 --> 00:51:56,290
this load CPU load on this edge top and

834
00:51:52,450 --> 00:51:59,770
you also cannot see this in the list of

835
00:51:56,290 --> 00:52:04,390
processes it's hidden yeah that's it so

836
00:51:59,770 --> 00:52:06,210
guys thank you for watching has any

837
00:52:04,390 --> 00:52:08,270
questions

838
00:52:06,210 --> 00:52:08,270
you

