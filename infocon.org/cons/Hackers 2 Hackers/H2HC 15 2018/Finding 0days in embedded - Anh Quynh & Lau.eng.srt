1
00:00:02,790 --> 00:00:08,570
[Music]

2
00:00:11,540 --> 00:00:16,948
okay so we're happy to be here today

3
00:00:14,219 --> 00:00:21,810
first time ever in South America for me

4
00:00:16,949 --> 00:00:23,279
so I'm very excited this target is just

5
00:00:21,810 --> 00:00:27,390
a team with two people

6
00:00:23,279 --> 00:00:29,519
me and my co-speaker but unfortunately

7
00:00:27,390 --> 00:00:32,840
he's not coming because he's too busy so

8
00:00:29,519 --> 00:00:35,219
I'm here to reap to represent the team

9
00:00:32,840 --> 00:00:37,800
okay so this talks about fighting the

10
00:00:35,219 --> 00:00:41,640
others in immediate system using the

11
00:00:37,800 --> 00:00:46,160
latest advanced fuzzing technology named

12
00:00:41,640 --> 00:00:46,160
court coverage coverage Qaeda father

13
00:00:46,219 --> 00:00:51,809
okay so a bit myself I'm working in

14
00:00:49,530 --> 00:00:56,850
Nanyang Technological University in

15
00:00:51,809 --> 00:00:59,339
Singapore and I mostly do my research in

16
00:00:56,850 --> 00:01:01,590
a low-level system stuff like opening

17
00:00:59,340 --> 00:01:06,479
system virtual machine binary analysis

18
00:01:01,590 --> 00:01:10,070
and so on and I happen to be the author

19
00:01:06,479 --> 00:01:13,229
and maintain a few reversing projects

20
00:01:10,070 --> 00:01:18,359
capstone disassembler in Econ inverter

21
00:01:13,229 --> 00:01:23,520
and Keystone assembler okay so my

22
00:01:18,360 --> 00:01:27,479
co-speaker guys on his he's looking

23
00:01:23,520 --> 00:01:31,289
inside II wonder because in commotion

24
00:01:27,479 --> 00:01:34,289
company in China he's an expert on

25
00:01:31,290 --> 00:01:39,750
Hardware reversing IOT security and

26
00:01:34,290 --> 00:01:43,470
blockchain research okay it's so a bit

27
00:01:39,750 --> 00:01:46,049
about what we presented a force on we

28
00:01:43,470 --> 00:01:50,399
take a look it in some background on

29
00:01:46,049 --> 00:01:51,930
Caffrey's guided fatha and the idea is

30
00:01:50,399 --> 00:01:54,899
that we want to bring this technique to

31
00:01:51,930 --> 00:01:59,600
embedded system so you want to build a

32
00:01:54,899 --> 00:02:02,520
bit further using this guided faceting X

33
00:01:59,600 --> 00:02:04,500
and to do this we need to show many

34
00:02:02,520 --> 00:02:06,990
problems one of them is that how to

35
00:02:04,500 --> 00:02:10,860
emulate a firmware so we can use a

36
00:02:06,990 --> 00:02:13,840
father and an insider and we need some

37
00:02:10,860 --> 00:02:19,000
new dynamic energy accommodation so

38
00:02:13,840 --> 00:02:21,519
we can first own cap CPUs and next we'll

39
00:02:19,000 --> 00:02:24,610
show you how we build our ready father

40
00:02:21,519 --> 00:02:27,099
and after that you have a pair sometimes

41
00:02:24,610 --> 00:02:29,230
some have some simple demo a quick demo

42
00:02:27,099 --> 00:02:31,018
okay first of all what's the what's the

43
00:02:29,230 --> 00:02:34,869
first thing the ideas fishing pond

44
00:02:31,019 --> 00:02:38,790
fasting is the automated testing

45
00:02:34,870 --> 00:02:43,090
technique to five bucks so the idea that

46
00:02:38,790 --> 00:02:44,530
we fit some craft input eight to two

47
00:02:43,090 --> 00:02:46,690
programs that we want to test the

48
00:02:44,530 --> 00:02:49,390
parameter on to five bucks inside and

49
00:02:46,690 --> 00:02:52,810
you can see he's a loop we have a loop

50
00:02:49,390 --> 00:02:53,980
here so he sends a craft input later to

51
00:02:52,810 --> 00:02:56,319
the program that went to five bucks

52
00:02:53,980 --> 00:02:59,170
inside and when the program run will

53
00:02:56,319 --> 00:03:03,970
monitor the program to detect the

54
00:02:59,170 --> 00:03:06,760
violation and okay you can easily

55
00:03:03,970 --> 00:03:09,970
multiple bucks like errors like crash or

56
00:03:06,760 --> 00:03:13,569
hang or memory leaking and if we focus

57
00:03:09,970 --> 00:03:15,160
on export export upon box like memory

58
00:03:13,569 --> 00:03:17,130
corruption or information the King we

59
00:03:15,160 --> 00:03:23,019
can fire funder abilities

60
00:03:17,130 --> 00:03:24,340
so the idea is a on the faster because

61
00:03:23,019 --> 00:03:26,799
the program you want to fight back

62
00:03:24,340 --> 00:03:30,340
inside usually has a very big very huge

63
00:03:26,799 --> 00:03:34,239
code space right so the idea is that we

64
00:03:30,340 --> 00:03:38,980
want to generate the good input so when

65
00:03:34,239 --> 00:03:43,150
the faster run the father can fire as

66
00:03:38,980 --> 00:03:45,099
much code as possible or in the in in in

67
00:03:43,150 --> 00:03:47,290
the other word we want to maximize the

68
00:03:45,099 --> 00:03:51,209
cocoa fees to file to have a better

69
00:03:47,290 --> 00:03:54,069
chance to five bucks so a few type has a

70
00:03:51,209 --> 00:03:57,700
black box passing and white box passing

71
00:03:54,069 --> 00:04:00,069
as a first to type so max black prophecy

72
00:03:57,700 --> 00:04:02,230
is Karen Schimpf own damn father so the

73
00:04:00,069 --> 00:04:04,810
idea that we fit input into some random

74
00:04:02,230 --> 00:04:07,179
input into the father and the father ran

75
00:04:04,810 --> 00:04:09,639
the program and the father doesn't know

76
00:04:07,180 --> 00:04:13,030
how the prom work inside just send

77
00:04:09,639 --> 00:04:15,819
random input and hopefully it cross so

78
00:04:13,030 --> 00:04:19,269
backbone fasting is very easy to be very

79
00:04:15,819 --> 00:04:20,589
easy to program to to maintain but it's

80
00:04:19,269 --> 00:04:22,780
kept done because it doesn't know

81
00:04:20,589 --> 00:04:25,960
hardware inside so it doesn't know how

82
00:04:22,780 --> 00:04:27,270
to delete the whole input to SSI a lot

83
00:04:25,960 --> 00:04:30,270
of code inside the program

84
00:04:27,270 --> 00:04:31,680
so since the next type father is kawaii

85
00:04:30,270 --> 00:04:35,719
box father

86
00:04:31,680 --> 00:04:40,410
so this one is unlike by Professor

87
00:04:35,720 --> 00:04:43,259
y-buffers a before the reason in poofles

88
00:04:40,410 --> 00:04:45,660
program each child to analyze the

89
00:04:43,259 --> 00:04:48,330
program to understand it how it works

90
00:04:45,660 --> 00:04:53,250
inside how is the structure so we can

91
00:04:48,330 --> 00:04:56,520
say this a better input so Italy the

92
00:04:53,250 --> 00:04:58,919
idea why box water is very nice it

93
00:04:56,520 --> 00:05:00,359
should be if we do this we should have

94
00:04:58,919 --> 00:05:05,580
face methods all right

95
00:05:00,360 --> 00:05:08,610
but Italy the story but in reality it

96
00:05:05,580 --> 00:05:11,630
doesn't really work because hypothesis

97
00:05:08,610 --> 00:05:15,870
they use some very complicated and heavy

98
00:05:11,630 --> 00:05:18,930
program analysis technique so in fact

99
00:05:15,870 --> 00:05:23,159
why box mother is French law pretty slow

100
00:05:18,930 --> 00:05:25,470
so it doesn't work well so we come to

101
00:05:23,159 --> 00:05:27,870
the next the third time father is very

102
00:05:25,470 --> 00:05:33,719
box fetish something in bitching

103
00:05:27,870 --> 00:05:36,659
bitching why and black and the the other

104
00:05:33,719 --> 00:05:38,599
neighbour box father is is a carries

105
00:05:36,659 --> 00:05:42,389
qaeda father

106
00:05:38,599 --> 00:05:45,419
so yeah this guy father is they use the

107
00:05:42,389 --> 00:05:48,030
same concept but you can see that when

108
00:05:45,419 --> 00:05:52,198
the father runs the program it is human

109
00:05:48,030 --> 00:05:54,719
it so thanks thanks to the

110
00:05:52,199 --> 00:05:57,360
instrumentation the father know what's

111
00:05:54,719 --> 00:06:00,330
going on which code is already exercised

112
00:05:57,360 --> 00:06:03,509
so in turn you can generate a better

113
00:06:00,330 --> 00:06:08,430
input so you can see that this catheter

114
00:06:03,509 --> 00:06:10,500
is much smarter than the black go faster

115
00:06:08,430 --> 00:06:12,810
because it know how it was house program

116
00:06:10,500 --> 00:06:16,349
works inside but it doesn't you heavy

117
00:06:12,810 --> 00:06:18,780
and very complicated program and a sis

118
00:06:16,349 --> 00:06:23,130
technique like white box father so you

119
00:06:18,780 --> 00:06:26,429
can see that is true to be very

120
00:06:23,130 --> 00:06:28,770
effective this way if it's because ready

121
00:06:26,430 --> 00:06:31,639
faster is very easy to use and very easy

122
00:06:28,770 --> 00:06:35,549
to setup and actually it fall out a box

123
00:06:31,639 --> 00:06:38,639
and daddy father becomes chanting in

124
00:06:35,550 --> 00:06:41,879
phasing technology and one type

125
00:06:38,639 --> 00:06:45,599
of this catheter is American fuzzy loop

126
00:06:41,879 --> 00:06:53,370
or AFL and in the last few years ffs are

127
00:06:45,599 --> 00:06:55,590
a lot of box okay so the idea is that in

128
00:06:53,370 --> 00:07:01,500
the last two years I've used some credit

129
00:06:55,590 --> 00:07:06,409
as a place on AFL but that kinda Tata I

130
00:07:01,500 --> 00:07:10,409
was only for our phone system for PC now

131
00:07:06,409 --> 00:07:12,629
if we want to bring this further to run

132
00:07:10,409 --> 00:07:14,370
on the imperial system which is very

133
00:07:12,629 --> 00:07:18,120
different from the power phone system

134
00:07:14,370 --> 00:07:20,189
like PC so to know that we have many

135
00:07:18,120 --> 00:07:21,750
issue we want to bring this puzzle to

136
00:07:20,189 --> 00:07:27,210
run on an embedded system

137
00:07:21,750 --> 00:07:30,180
the first one is ratcheted the embrace

138
00:07:27,210 --> 00:07:32,159
system they are all very restricted the

139
00:07:30,180 --> 00:07:35,639
second issue that they are very close

140
00:07:32,159 --> 00:07:37,319
and the last one is we do not have a lot

141
00:07:35,639 --> 00:07:40,520
of support for embrace system when you

142
00:07:37,319 --> 00:07:40,520
build us this catheter

143
00:07:41,750 --> 00:07:48,419
okay source of health issues register

144
00:07:45,000 --> 00:07:51,830
system so you can see that in every

145
00:07:48,419 --> 00:07:54,659
system line router or IP camera or so on

146
00:07:51,830 --> 00:07:57,448
they do not provide you the view in

147
00:07:54,659 --> 00:08:00,659
exercise they do not give you access to

148
00:07:57,449 --> 00:08:03,029
the to the to the English system so that

149
00:08:00,659 --> 00:08:06,360
mean you cannot come into the imposition

150
00:08:03,029 --> 00:08:09,689
and view your own tunes to be your own

151
00:08:06,360 --> 00:08:11,339
father so it's very clear because inside

152
00:08:09,689 --> 00:08:13,680
on the English system they do not

153
00:08:11,339 --> 00:08:16,439
provide user compilers or any like

154
00:08:13,680 --> 00:08:19,460
development tools like debugger only an

155
00:08:16,439 --> 00:08:23,610
assistant so that's the first issue

156
00:08:19,460 --> 00:08:27,029
you cannot easy easily put your father

157
00:08:23,610 --> 00:08:33,209
or any development tools in to impress

158
00:08:27,029 --> 00:08:36,479
system the second issue is a closed

159
00:08:33,208 --> 00:08:39,689
system so you can see that in many

160
00:08:36,479 --> 00:08:41,729
emitter system they do not provide a

161
00:08:39,690 --> 00:08:45,240
source code so we do not have a source

162
00:08:41,729 --> 00:08:47,339
code so what we have only is that we had

163
00:08:45,240 --> 00:08:50,000
binary only the firmware is our initial

164
00:08:47,339 --> 00:08:50,000
score on

165
00:08:50,090 --> 00:08:58,170
so this is a big issue because all or

166
00:08:54,990 --> 00:09:01,890
most of the public gyda faster you can

167
00:08:58,170 --> 00:09:03,900
find in the public nowadays they rely on

168
00:09:01,890 --> 00:09:06,360
the source code you need to source code

169
00:09:03,900 --> 00:09:10,680
and you compile the source code using

170
00:09:06,360 --> 00:09:12,720
sunlight special compiler and this this

171
00:09:10,680 --> 00:09:16,069
special capillary instrument program and

172
00:09:12,720 --> 00:09:18,560
the further in turn around this

173
00:09:16,070 --> 00:09:21,330
instrumented program inside the father

174
00:09:18,560 --> 00:09:24,959
so you see that we need to source code

175
00:09:21,330 --> 00:09:28,350
to compile warm right actually to be

176
00:09:24,960 --> 00:09:30,810
fair there are some techniques to to

177
00:09:28,350 --> 00:09:34,260
faster binary only froze upon AFL the

178
00:09:30,810 --> 00:09:37,229
support chemo mode so you can emulate

179
00:09:34,260 --> 00:09:40,439
the program in in qumu mode and run

180
00:09:37,230 --> 00:09:43,530
inside FL but actually this technique is

181
00:09:40,440 --> 00:09:45,330
very slow and just many limitation many

182
00:09:43,530 --> 00:09:50,189
programs that you cannot run in cue mode

183
00:09:45,330 --> 00:09:53,130
in inside FL so the last issue is that

184
00:09:50,190 --> 00:09:56,310
most faster they appear for Intel chip

185
00:09:53,130 --> 00:09:59,670
only so the reason is that once here the

186
00:09:56,310 --> 00:10:01,859
program has a source code right do you

187
00:09:59,670 --> 00:10:04,709
want to build this program to run on the

188
00:10:01,860 --> 00:10:08,250
imposition no because empiricism are

189
00:10:04,710 --> 00:10:10,800
very very poor in terms of performance

190
00:10:08,250 --> 00:10:12,540
so usually you have source code you can

191
00:10:10,800 --> 00:10:14,819
position to run on power phone system

192
00:10:12,540 --> 00:10:17,730
which is PC right which has a lot of

193
00:10:14,820 --> 00:10:20,760
memory a lot of stories and has very

194
00:10:17,730 --> 00:10:23,280
fast bishop cpu so you can see that most

195
00:10:20,760 --> 00:10:26,819
puzzles they are before entirely but not

196
00:10:23,280 --> 00:10:29,850
for every system not for chips running

197
00:10:26,820 --> 00:10:34,950
on a map City for miss and PowerPC and

198
00:10:29,850 --> 00:10:37,980
so on so one clear example is that if we

199
00:10:34,950 --> 00:10:40,650
use some dynamic instrumentation to

200
00:10:37,980 --> 00:10:44,400
build a faster we rely on some Republic

201
00:10:40,650 --> 00:10:48,180
dpi like Peno dino Morea right but pin

202
00:10:44,400 --> 00:10:51,150
wash upon pin come from india it support

203
00:10:48,180 --> 00:10:55,739
cpu on x86 cheap only it doesn't support

204
00:10:51,150 --> 00:11:00,420
as a cpu so no more no support for am am

205
00:10:55,740 --> 00:11:03,390
64 MIPS or policy for pin and it's the

206
00:11:00,420 --> 00:11:06,280
same thing for dynamo do

207
00:11:03,390 --> 00:11:09,189
okay so we see that you have many issues

208
00:11:06,280 --> 00:11:15,040
we want to bring the qaeda facile to

209
00:11:09,190 --> 00:11:19,620
embrace system okay so we need to show

210
00:11:15,040 --> 00:11:23,380
many issue the first one is how to view

211
00:11:19,620 --> 00:11:26,500
our father to run on a PA system so it

212
00:11:23,380 --> 00:11:31,240
came up with one solution is just to

213
00:11:26,500 --> 00:11:35,170
emulate the from one so one thing you

214
00:11:31,240 --> 00:11:38,680
can see that coming from PC we go to in

215
00:11:35,170 --> 00:11:42,490
the system everything is kowtow CPUs

216
00:11:38,680 --> 00:11:44,229
much slower you have much less memory we

217
00:11:42,490 --> 00:11:46,690
don't have like gigabyte memory on in

218
00:11:44,230 --> 00:11:51,550
the system but only typically you have

219
00:11:46,690 --> 00:11:53,920
like 16 or 32 mega by and of course

220
00:11:51,550 --> 00:11:58,689
storage is much much less we don't have

221
00:11:53,920 --> 00:12:05,530
a terroristic better by Hadees on the

222
00:11:58,690 --> 00:12:09,010
eBay system so okay you can see that the

223
00:12:05,530 --> 00:12:11,439
idea is that a very obvious the ideas I

224
00:12:09,010 --> 00:12:14,140
want to fight back inside this in the

225
00:12:11,440 --> 00:12:20,590
system I buy the device right and we try

226
00:12:14,140 --> 00:12:22,830
to somehow inject our father or any any

227
00:12:20,590 --> 00:12:26,050
analysis tool inside that in the system

228
00:12:22,830 --> 00:12:29,500
and actually initially we bought some

229
00:12:26,050 --> 00:12:32,140
device like that on like like that MDK

230
00:12:29,500 --> 00:12:35,470
but on on the screen but it turned out

231
00:12:32,140 --> 00:12:37,990
even if somehow we try to you can try to

232
00:12:35,470 --> 00:12:40,900
inject our father into Windows a device

233
00:12:37,990 --> 00:12:47,550
it's very slow you can run the father

234
00:12:40,900 --> 00:12:52,240
base very slow so what's the solution

235
00:12:47,550 --> 00:12:56,890
the idea is that now we want to 5 bucks

236
00:12:52,240 --> 00:12:58,900
inside this device we come up with an

237
00:12:56,890 --> 00:13:01,890
association we try to create a firmware

238
00:12:58,900 --> 00:13:04,720
the device and bring this firmware to a

239
00:13:01,890 --> 00:13:06,460
better performance system and try to

240
00:13:04,720 --> 00:13:09,580
fight back in that but we do not fight

241
00:13:06,460 --> 00:13:12,580
back in the original device so the first

242
00:13:09,580 --> 00:13:14,020
issues are how to get the firmware so

243
00:13:12,580 --> 00:13:14,930
there are many way to get from iPhones

244
00:13:14,020 --> 00:13:18,020
report

245
00:13:14,930 --> 00:13:20,810
you can take out a fast memory from the

246
00:13:18,020 --> 00:13:23,589
device and extract from my duty from the

247
00:13:20,810 --> 00:13:26,420
flash memory and you get from where I

248
00:13:23,589 --> 00:13:28,580
the other way that we can somehow I

249
00:13:26,420 --> 00:13:31,310
check the firmware from some IP k some

250
00:13:28,580 --> 00:13:34,610
Android a patient for some reason they

251
00:13:31,310 --> 00:13:39,819
have format inside or you can snip the

252
00:13:34,610 --> 00:13:43,220
traffic when the device is updated the

253
00:13:39,820 --> 00:13:46,910
last solution is that many vendors they

254
00:13:43,220 --> 00:13:51,100
provide the firmware on the eruption so

255
00:13:46,910 --> 00:13:55,130
people can get it uploaded and operated

256
00:13:51,100 --> 00:13:59,050
so yeah you can have many ways to get

257
00:13:55,130 --> 00:14:02,600
from web to device we want to fiber 3

258
00:13:59,050 --> 00:14:05,329
the easy way that with the firmware we

259
00:14:02,600 --> 00:14:07,160
try to find a real device the support

260
00:14:05,330 --> 00:14:11,839
the CPUs for saponin

261
00:14:07,160 --> 00:14:14,209
you get a form of the MIPS MIPS device

262
00:14:11,839 --> 00:14:17,870
with the ibless system we try to fire

263
00:14:14,209 --> 00:14:21,109
hood bot of meat and we bring this from

264
00:14:17,870 --> 00:14:25,459
where to run on the device right for the

265
00:14:21,110 --> 00:14:28,790
am from where you can buy Raspberry Pi

266
00:14:25,459 --> 00:14:32,540
device and try to run this firmware on

267
00:14:28,790 --> 00:14:35,380
that raspberry P same thing for am 64

268
00:14:32,540 --> 00:14:39,949
you can you can buy raspberry Petri and

269
00:14:35,380 --> 00:14:44,270
render for my on that however we found

270
00:14:39,950 --> 00:14:47,870
that this cap solution is not very good

271
00:14:44,270 --> 00:14:49,189
so on observe is an is that autumn al

272
00:14:47,870 --> 00:14:52,070
team has two people right

273
00:14:49,190 --> 00:14:55,730
we actually don't remotely we are not in

274
00:14:52,070 --> 00:14:58,910
the same place so we do not want to buy

275
00:14:55,730 --> 00:15:03,680
the same device and back-end for between

276
00:14:58,910 --> 00:15:07,550
us to work together so you came up with

277
00:15:03,680 --> 00:15:10,550
another solution how about we get a

278
00:15:07,550 --> 00:15:13,339
firmware but we do not run on the real

279
00:15:10,550 --> 00:15:16,310
device we do we do not need to buy any

280
00:15:13,339 --> 00:15:18,829
device but we try to emulate that into

281
00:15:16,310 --> 00:15:22,010
into some virtual machine right

282
00:15:18,829 --> 00:15:24,819
so in this case we do not need any

283
00:15:22,010 --> 00:15:24,819
device alone

284
00:15:24,990 --> 00:15:30,480
so there's many a fantasy if we have the

285
00:15:27,870 --> 00:15:34,410
firmware you can emulate that in in some

286
00:15:30,480 --> 00:15:36,750
virtual machine you can it because the

287
00:15:34,410 --> 00:15:39,630
virtual machine is at its own bow shock

288
00:15:36,750 --> 00:15:42,090
really should wear emulator so when you

289
00:15:39,630 --> 00:15:44,820
can it as many call as you want you

290
00:15:42,090 --> 00:15:47,490
could put one core to call Chico for

291
00:15:44,820 --> 00:15:51,330
call into that virtual machine which we

292
00:15:47,490 --> 00:15:53,460
do not have in your device you can eat a

293
00:15:51,330 --> 00:15:57,660
lot of more Rams compared to the

294
00:15:53,460 --> 00:16:00,360
original device so first point for for

295
00:15:57,660 --> 00:16:03,209
Em's in the system you can put up two

296
00:16:00,360 --> 00:16:06,030
line happy iPad memory into the virtual

297
00:16:03,210 --> 00:16:09,860
machine and of course you can put a lot

298
00:16:06,030 --> 00:16:09,860
more stories into the virtual machine

299
00:16:10,070 --> 00:16:16,890
one more advantage is that you can scale

300
00:16:13,620 --> 00:16:19,140
up so if we fire on two fibers in on in

301
00:16:16,890 --> 00:16:21,330
this form where you can run many many

302
00:16:19,140 --> 00:16:23,189
virtual machine of this form way at the

303
00:16:21,330 --> 00:16:27,410
same time and you can do a parallel

304
00:16:23,190 --> 00:16:30,240
father so there are many many effort is

305
00:16:27,410 --> 00:16:36,030
so it decided to go this way

306
00:16:30,240 --> 00:16:38,400
so ok when we did this we look into the

307
00:16:36,030 --> 00:16:41,790
past and to see how people chose this

308
00:16:38,400 --> 00:16:45,180
program so some people came up with some

309
00:16:41,790 --> 00:16:48,240
way so even the firmware they can they

310
00:16:45,180 --> 00:16:51,890
can put this firmware into like youmu

311
00:16:48,240 --> 00:16:54,570
pushing machine right remover later and

312
00:16:51,890 --> 00:16:56,970
there's some how they try to conflicts a

313
00:16:54,570 --> 00:16:58,500
premium little to run this from way so

314
00:16:56,970 --> 00:17:01,070
she can put it up and done everything

315
00:16:58,500 --> 00:17:05,160
inside the remove virtual machine

316
00:17:01,070 --> 00:17:07,920
however we found that this doesn't work

317
00:17:05,160 --> 00:17:10,050
very well because we have many cap in

318
00:17:07,920 --> 00:17:14,370
the system right and each english system

319
00:17:10,050 --> 00:17:19,169
had different different hardware now we

320
00:17:14,369 --> 00:17:21,719
want to bring this firmware into

321
00:17:19,170 --> 00:17:24,900
qmo Kumu need to be able to support own

322
00:17:21,720 --> 00:17:27,150
cap hardware's available in all those in

323
00:17:24,900 --> 00:17:30,050
the system and I should actually cream

324
00:17:27,150 --> 00:17:33,450
with other support medical device so

325
00:17:30,050 --> 00:17:36,080
this cap solution doesn't work doesn't

326
00:17:33,450 --> 00:17:36,080
work our own

327
00:17:36,510 --> 00:17:41,600
so what did we do

328
00:17:43,610 --> 00:17:49,530
so now we tested we decided that we have

329
00:17:47,340 --> 00:17:52,379
from where we try to emulate that into

330
00:17:49,530 --> 00:17:54,149
the in the virtual machine right but

331
00:17:52,380 --> 00:17:58,890
virtual machine does a support uncap my

332
00:17:54,150 --> 00:18:01,320
firmware so result and we had some ideas

333
00:17:58,890 --> 00:18:05,360
usually when we've tried to fire box

334
00:18:01,320 --> 00:18:07,950
inside firmware we try to attack

335
00:18:05,360 --> 00:18:11,459
something that has big attack surface

336
00:18:07,950 --> 00:18:13,530
all right and usually from where the

337
00:18:11,460 --> 00:18:16,559
biggest attack suffice in in the form is

338
00:18:13,530 --> 00:18:17,970
that some service some internet some

339
00:18:16,559 --> 00:18:21,570
network service that expose to the

340
00:18:17,970 --> 00:18:24,000
network for support on the in the system

341
00:18:21,570 --> 00:18:26,700
that we try to attack has worse server

342
00:18:24,000 --> 00:18:30,480
running inside right so the idea is that

343
00:18:26,700 --> 00:18:33,179
we do not want to yourself on the

344
00:18:30,480 --> 00:18:35,250
firmware but we just want to emulate

345
00:18:33,179 --> 00:18:36,600
that processor quad or really try to

346
00:18:35,250 --> 00:18:39,330
five bucks inside right

347
00:18:36,600 --> 00:18:41,428
so is this guy force upon e1 to fight

348
00:18:39,330 --> 00:18:44,340
back inside this firmware which has web

349
00:18:41,429 --> 00:18:47,580
server we just child to immolate the

350
00:18:44,340 --> 00:18:50,189
workshop only so the idea is that once

351
00:18:47,580 --> 00:18:53,129
we got the firmware from somewhere we

352
00:18:50,190 --> 00:18:56,100
extract the packet binary force upon a

353
00:18:53,130 --> 00:18:58,890
TT p d-- program forms up from where we

354
00:18:56,100 --> 00:19:02,719
get it out and bring and bring this

355
00:18:58,890 --> 00:19:06,720
packet finally to our virtual machine

356
00:19:02,720 --> 00:19:08,640
and we try to emulate sup program in our

357
00:19:06,720 --> 00:19:10,640
virtual machine and we attack it as i

358
00:19:08,640 --> 00:19:15,240
see that's what the whole idea behind

359
00:19:10,640 --> 00:19:17,190
this so okay we check out the binary

360
00:19:15,240 --> 00:19:21,330
form the firmware we bring that to

361
00:19:17,190 --> 00:19:23,850
sunlight standard distribution running

362
00:19:21,330 --> 00:19:26,250
on our virtual machine for support Linux

363
00:19:23,850 --> 00:19:28,949
form is Linux forum Linda's forums

364
00:19:26,250 --> 00:19:30,960
before we copy force upon ATT PD from

365
00:19:28,950 --> 00:19:35,100
from where to our virtual machine and

366
00:19:30,960 --> 00:19:38,400
try to run it so on easy way that we run

367
00:19:35,100 --> 00:19:42,540
this documentary in size inside chroot

368
00:19:38,400 --> 00:19:47,820
on our virtual machine right so however

369
00:19:42,540 --> 00:19:49,740
we found that this one is not very it's

370
00:19:47,820 --> 00:19:52,918
not a very good way because

371
00:19:49,740 --> 00:19:54,929
we run the process inside the CSU we

372
00:19:52,919 --> 00:19:58,140
need to deal with her medical issues

373
00:19:54,929 --> 00:20:01,830
first upon we need to run debugger then

374
00:19:58,140 --> 00:20:03,390
debugger need to handle like on on

375
00:20:01,830 --> 00:20:07,350
capital account copy the things inside

376
00:20:03,390 --> 00:20:10,649
CSU so we decided that we want to avoid

377
00:20:07,350 --> 00:20:13,289
issues and you want to run everything as

378
00:20:10,649 --> 00:20:15,449
natively as possible we decided that you

379
00:20:13,289 --> 00:20:17,940
copy the target binary to the virtual

380
00:20:15,450 --> 00:20:21,779
machine around it so first issues that

381
00:20:17,940 --> 00:20:23,100
find out foul we could not run it so you

382
00:20:21,779 --> 00:20:26,520
can see that on streets on the

383
00:20:23,100 --> 00:20:29,760
screenshot you can see that it it cannot

384
00:20:26,520 --> 00:20:32,580
fight being bashed right actually being

385
00:20:29,760 --> 00:20:34,020
bad is always there but you can see here

386
00:20:32,580 --> 00:20:37,830
inside that it cannot fight the bin pass

387
00:20:34,020 --> 00:20:39,929
so if our that we're on fire on this bin

388
00:20:37,830 --> 00:20:43,110
bus in front of that this one depends on

389
00:20:39,929 --> 00:20:46,890
one shared leg file which doesn't exist

390
00:20:43,110 --> 00:20:49,020
inside our virtual machine so to sow

391
00:20:46,890 --> 00:20:52,740
seeds to sow this program is just copy

392
00:20:49,020 --> 00:20:55,710
this one this far from the firmware to

393
00:20:52,740 --> 00:20:59,610
over to our virtual machine so the first

394
00:20:55,710 --> 00:21:01,559
issue is not done yet because once you

395
00:20:59,610 --> 00:21:03,840
copy the original binary to our virtual

396
00:21:01,559 --> 00:21:07,529
machine we miss many many dependencies

397
00:21:03,840 --> 00:21:16,590
many many standard program for support

398
00:21:07,529 --> 00:21:20,520
here you can see that we miss some some

399
00:21:16,590 --> 00:21:23,549
standard pushes like PS or some many

400
00:21:20,520 --> 00:21:27,840
many share play files so what it is that

401
00:21:23,549 --> 00:21:29,820
is a copy the missing dependency from

402
00:21:27,840 --> 00:21:33,928
the firmware to our system always

403
00:21:29,820 --> 00:21:37,340
shopping the existing share objectify

404
00:21:33,929 --> 00:21:40,679
from our virtual machine to the

405
00:21:37,340 --> 00:21:43,320
dependencies that this battery is is

406
00:21:40,679 --> 00:21:46,529
missing yeah so after that we try to run

407
00:21:43,320 --> 00:21:48,840
okay in this guy ATT PD and the program

408
00:21:46,529 --> 00:21:49,770
doesn't complain anything but it just

409
00:21:48,840 --> 00:21:53,428
crashed

410
00:21:49,770 --> 00:21:56,179
so we went on to investigate and we

411
00:21:53,429 --> 00:21:58,799
found from SJ that is to miss some

412
00:21:56,179 --> 00:22:01,840
dependency even it doesn't complain at

413
00:21:58,799 --> 00:22:05,280
all so we're an ashtray on this

414
00:22:01,840 --> 00:22:08,520
and if I owned a foul on the missing

415
00:22:05,280 --> 00:22:12,040
dependency and we are gonna be shortly

416
00:22:08,520 --> 00:22:12,460
the existing dependency to the right

417
00:22:12,040 --> 00:22:15,340
place

418
00:22:12,460 --> 00:22:17,590
the next issue is that environ so after

419
00:22:15,340 --> 00:22:21,280
we fix on the missing dependency it

420
00:22:17,590 --> 00:22:25,540
worked but after that it stopped

421
00:22:21,280 --> 00:22:27,250
somewhere so the reason is that usually

422
00:22:25,540 --> 00:22:30,850
the target binary he's a binary one to

423
00:22:27,250 --> 00:22:33,310
attack each Iran Iran is try to fire as

424
00:22:30,850 --> 00:22:35,590
a configuration for super 80 DB right

425
00:22:33,310 --> 00:22:38,260
try to find some configuration for our

426
00:22:35,590 --> 00:22:42,550
server from the original firmware which

427
00:22:38,260 --> 00:22:44,640
we do not have on our virtual machine so

428
00:22:42,550 --> 00:22:47,500
the reason is that this packet binary

429
00:22:44,640 --> 00:22:50,290
usually try to fire the configuration

430
00:22:47,500 --> 00:22:54,430
into the NVRAM device which is a device

431
00:22:50,290 --> 00:23:00,629
to star on the confusion of the target

432
00:22:54,430 --> 00:23:04,030
binary so we try to show this problem by

433
00:23:00,630 --> 00:23:07,500
first only try to emulate NVRAM device

434
00:23:04,030 --> 00:23:11,560
on a virtual machine to fix this problem

435
00:23:07,500 --> 00:23:14,790
however it was not easy because and the

436
00:23:11,560 --> 00:23:17,950
RAM divides the they are different

437
00:23:14,790 --> 00:23:21,129
different English system had different

438
00:23:17,950 --> 00:23:24,220
cap and vram device and every nvm device

439
00:23:21,130 --> 00:23:28,690
they do not have standard and usually

440
00:23:24,220 --> 00:23:31,030
they are even undocumented so we came up

441
00:23:28,690 --> 00:23:35,230
with this solution and we need to fire

442
00:23:31,030 --> 00:23:37,330
something else so you know that the

443
00:23:35,230 --> 00:23:39,730
target binary easily they do not quickly

444
00:23:37,330 --> 00:23:41,980
contact the NVRAM device but it contact

445
00:23:39,730 --> 00:23:45,070
another process which is NVRAM process

446
00:23:41,980 --> 00:23:48,070
and it sends information requests to

447
00:23:45,070 --> 00:23:50,230
this and vram process and the nvm

448
00:23:48,070 --> 00:23:52,750
process intern contacts and veeram

449
00:23:50,230 --> 00:23:56,290
device to get information that this the

450
00:23:52,750 --> 00:23:59,980
kept binary want so the idea that we do

451
00:23:56,290 --> 00:24:05,399
not emulator and vm device but emulator

452
00:23:59,980 --> 00:24:05,400
NVRAM process which is much easier

453
00:24:06,770 --> 00:24:10,480
so how we did that so easily is a tacit

454
00:24:10,010 --> 00:24:13,670
binary

455
00:24:10,480 --> 00:24:16,880
they connect to the NVRAM process via

456
00:24:13,670 --> 00:24:19,820
two main socket metal do miss bloom a

457
00:24:16,880 --> 00:24:22,490
circuit so we do our own NVRAM process

458
00:24:19,820 --> 00:24:26,510
by writing something new from scratch

459
00:24:22,490 --> 00:24:27,950
and this program by two the two main

460
00:24:26,510 --> 00:24:30,890
circuit that this packet burn really

461
00:24:27,950 --> 00:24:33,140
want and listen for the request pons

462
00:24:30,890 --> 00:24:35,240
tacit memory and send back and forward

463
00:24:33,140 --> 00:24:39,070
the function does this tuck and Maria

464
00:24:35,240 --> 00:24:42,410
want so it works pretty well

465
00:24:39,070 --> 00:24:46,370
another issue that some wireless in this

466
00:24:42,410 --> 00:24:49,220
system there has some issues so first up

467
00:24:46,370 --> 00:24:51,800
on any we're on ATT PD from some narrow

468
00:24:49,220 --> 00:24:54,290
router on our virtual machine it

469
00:24:51,800 --> 00:24:58,370
complains because it tried to configure

470
00:24:54,290 --> 00:25:00,770
the w w bland so I let's learn the

471
00:24:58,370 --> 00:25:03,830
device but you cannot fight that because

472
00:25:00,770 --> 00:25:08,780
our virtual machine has no wireless

473
00:25:03,830 --> 00:25:13,699
device so how to solve this one with our

474
00:25:08,780 --> 00:25:19,220
chick we rename the standard e88

475
00:25:13,700 --> 00:25:21,020
Ethernet 0 2 WN 0 and it works so that

476
00:25:19,220 --> 00:25:23,140
was very nice trick and it works very

477
00:25:21,020 --> 00:25:23,139
well

478
00:25:23,830 --> 00:25:33,110
ok finally if all those solution fell

479
00:25:28,730 --> 00:25:36,290
what to do the last one is that you get

480
00:25:33,110 --> 00:25:40,250
attack a binary we pass it in case

481
00:25:36,290 --> 00:25:43,580
everything else fell so we pass it so

482
00:25:40,250 --> 00:25:47,330
that the taxpayer can walk in the in our

483
00:25:43,580 --> 00:25:50,600
virtual machine but rarely we need to do

484
00:25:47,330 --> 00:25:54,439
this ok so we show the first problem we

485
00:25:50,600 --> 00:25:56,360
can copy the firmware you can copies the

486
00:25:54,440 --> 00:25:59,270
capillary and you can emulate that in

487
00:25:56,360 --> 00:26:04,149
our pretty good pretty powerful virtual

488
00:25:59,270 --> 00:26:08,900
machine so what to do next how to fuzzy

489
00:26:04,150 --> 00:26:11,840
so the idea is that because god has a

490
00:26:08,900 --> 00:26:13,820
depend on instrumentation right but we

491
00:26:11,840 --> 00:26:15,889
do not have the program you do not I

492
00:26:13,820 --> 00:26:18,350
mean you do not have so SCOTUS attack a

493
00:26:15,890 --> 00:26:20,450
binary we you only have attack a binary

494
00:26:18,350 --> 00:26:24,080
to facet so

495
00:26:20,450 --> 00:26:27,080
need a special dynamic instrumentation

496
00:26:24,080 --> 00:26:30,020
program framework to do so we can do the

497
00:26:27,080 --> 00:26:34,129
instrumentation but unfortunately on

498
00:26:30,020 --> 00:26:36,440
those public PPI you can found doesn't

499
00:26:34,130 --> 00:26:41,470
work very well on a system it has a walk

500
00:26:36,440 --> 00:26:46,070
on em absolutely for miss or per PC so

501
00:26:41,470 --> 00:26:48,770
we've had to be our own dpi so we can do

502
00:26:46,070 --> 00:26:51,679
proper instrumentation for our Father

503
00:26:48,770 --> 00:26:54,290
so the concept behind the API is very

504
00:26:51,680 --> 00:26:56,600
simple dynamic binary instrumentation is

505
00:26:54,290 --> 00:26:59,510
a method of analyzing a binary at

506
00:26:56,600 --> 00:27:01,730
runtime by injecting extra

507
00:26:59,510 --> 00:27:05,540
instrumentation code into the program at

508
00:27:01,730 --> 00:27:08,720
runtime so this extra code or

509
00:27:05,540 --> 00:27:11,690
instrumentation court excluded as a part

510
00:27:08,720 --> 00:27:14,510
about the original code and one thing we

511
00:27:11,690 --> 00:27:18,230
need to be careful in that when the

512
00:27:14,510 --> 00:27:20,960
instrument program our extra code ran

513
00:27:18,230 --> 00:27:23,120
inside that program right but we try

514
00:27:20,960 --> 00:27:25,580
best not to change the behaviors

515
00:27:23,120 --> 00:27:34,449
approver otherwise you can purchase

516
00:27:25,580 --> 00:27:34,449
program okay so here's a simple in

517
00:27:34,780 --> 00:27:42,050
diagram so you can see how the deep I

518
00:27:37,490 --> 00:27:44,660
was so original code here by some code

519
00:27:42,050 --> 00:27:48,860
one two three four now we want to issue

520
00:27:44,660 --> 00:27:51,880
men after one and after after three

521
00:27:48,860 --> 00:27:54,740
right so the idea that we can inject our

522
00:27:51,880 --> 00:27:58,220
instrumentation code be high so coat you

523
00:27:54,740 --> 00:28:00,770
want to assume and so when we so

524
00:27:58,220 --> 00:28:02,810
original we run one two three four now

525
00:28:00,770 --> 00:28:06,080
absol of the accommodation we run one

526
00:28:02,810 --> 00:28:08,120
and our each repetition code and two and

527
00:28:06,080 --> 00:28:11,570
three and P which is another

528
00:28:08,120 --> 00:28:14,959
interpretation and four so but remember

529
00:28:11,570 --> 00:28:19,970
here that a and B should not change the

530
00:28:14,960 --> 00:28:26,060
behavior as a program okay so the

531
00:28:19,970 --> 00:28:29,210
TrueType DPI techniques the first one is

532
00:28:26,060 --> 00:28:32,429
a symptom translation the idea that we

533
00:28:29,210 --> 00:28:34,440
transform the code the original code

534
00:28:32,430 --> 00:28:38,190
something else and it puts this

535
00:28:34,440 --> 00:28:41,720
transformation code into a into a

536
00:28:38,190 --> 00:28:44,070
temporary buffer and we to own the

537
00:28:41,720 --> 00:28:47,250
transformation here and you ran from the

538
00:28:44,070 --> 00:28:48,179
buffer but not from the from the origin

539
00:28:47,250 --> 00:28:52,770
original place

540
00:28:48,180 --> 00:28:55,440
so this JIT transformation works very

541
00:28:52,770 --> 00:29:00,600
well it gives a very good control on the

542
00:28:55,440 --> 00:29:03,390
court USQ however this cap DPI is very

543
00:29:00,600 --> 00:29:07,080
heavy and very complicated to design

544
00:29:03,390 --> 00:29:10,080
implement so we look at another

545
00:29:07,080 --> 00:29:13,230
technique which is con hoping hoping is

546
00:29:10,080 --> 00:29:17,669
a very lightweight and very simple way

547
00:29:13,230 --> 00:29:20,580
to do accommodation so it's much easier

548
00:29:17,670 --> 00:29:24,840
to design implement hoping mechanism for

549
00:29:20,580 --> 00:29:28,110
DBA on down shop hoping is that you have

550
00:29:24,840 --> 00:29:30,149
less control on court executed because

551
00:29:28,110 --> 00:29:34,949
we need to know in advance where to

552
00:29:30,150 --> 00:29:36,929
instrument yeah so is there some this

553
00:29:34,950 --> 00:29:38,970
event is that was hooking in mechanism

554
00:29:36,929 --> 00:29:44,370
but you decide to focus on hooking

555
00:29:38,970 --> 00:29:46,620
mechanism so that you type hoping

556
00:29:44,370 --> 00:29:50,250
techniques the first one fishing pond is

557
00:29:46,620 --> 00:29:52,409
in lie hoping so the idea is that you

558
00:29:50,250 --> 00:29:55,650
want to instrument this original code

559
00:29:52,410 --> 00:29:58,110
you want to run something after one run

560
00:29:55,650 --> 00:30:01,740
something after two right so the idea

561
00:29:58,110 --> 00:30:06,449
that we dig Li put the code in life

562
00:30:01,740 --> 00:30:12,030
after 1 & 3 and when you run you run

563
00:30:06,450 --> 00:30:15,240
everything so the idea is that this in

564
00:30:12,030 --> 00:30:18,110
lie hoping allow you to instrument

565
00:30:15,240 --> 00:30:21,600
anywhere there's no limitation however

566
00:30:18,110 --> 00:30:23,939
you can see that one is still at the

567
00:30:21,600 --> 00:30:26,820
same place right but true we need to

568
00:30:23,940 --> 00:30:28,380
move it it's not at the original place

569
00:30:26,820 --> 00:30:31,439
anymore because it need to be

570
00:30:28,380 --> 00:30:35,730
after I now right and the same thing

571
00:30:31,440 --> 00:30:39,150
she is move forest move so all the code

572
00:30:35,730 --> 00:30:42,030
behind intermittent score is move and

573
00:30:39,150 --> 00:30:43,950
you see that this in lie imitation is

574
00:30:42,030 --> 00:30:45,620
actually very complicated because we

575
00:30:43,950 --> 00:30:51,350
need to rewrite all the code after

576
00:30:45,620 --> 00:30:56,689
imitation so he says that we do not go

577
00:30:51,350 --> 00:30:59,090
with this coping mechanism so you look

578
00:30:56,690 --> 00:31:02,540
at another technique which is going D to

579
00:30:59,090 --> 00:31:07,459
a hokey so this one you can see that we

580
00:31:02,540 --> 00:31:09,710
do not really put our code behind the

581
00:31:07,460 --> 00:31:13,820
price you have to each you man but we

582
00:31:09,710 --> 00:31:16,309
put it in another place and the court

583
00:31:13,820 --> 00:31:20,240
you want to issue man you just jump to

584
00:31:16,309 --> 00:31:22,280
our our instrumentation code but we do

585
00:31:20,240 --> 00:31:25,160
not like politically after the code you

586
00:31:22,280 --> 00:31:28,879
want to instrument so the idea that you

587
00:31:25,160 --> 00:31:33,640
see we branch to the instrumentation

588
00:31:28,880 --> 00:31:38,240
code and actually in our framework we

589
00:31:33,640 --> 00:31:41,179
use redefine some come back some come

590
00:31:38,240 --> 00:31:44,090
back which will be executed when we

591
00:31:41,179 --> 00:31:48,140
reach here and you come back will be run

592
00:31:44,090 --> 00:31:51,980
as a each repetition code and this T to

593
00:31:48,140 --> 00:31:54,830
a technique we need to use some

594
00:31:51,980 --> 00:31:58,330
intermediate some temporary buffer to

595
00:31:54,830 --> 00:32:01,040
put our our instrumented code inside so

596
00:31:58,330 --> 00:32:05,449
this Kappa Phi is called Champlin

597
00:32:01,040 --> 00:32:07,909
memory buffer so compared to us in lie

598
00:32:05,450 --> 00:32:10,250
detection technique the detour technique

599
00:32:07,910 --> 00:32:12,200
is limited because there are some places

600
00:32:10,250 --> 00:32:14,840
you cannot instrument using this

601
00:32:12,200 --> 00:32:17,120
technique for support if the basic block

602
00:32:14,840 --> 00:32:18,559
code is too small you cannot authorize

603
00:32:17,120 --> 00:32:20,439
that basic block because you can

604
00:32:18,559 --> 00:32:23,480
override to the next basic block right

605
00:32:20,440 --> 00:32:28,370
however this dito hoping is very easy it

606
00:32:23,480 --> 00:32:30,590
will be very easy to design so we

607
00:32:28,370 --> 00:32:36,409
decided to go with a detour hoping the

608
00:32:30,590 --> 00:32:41,449
next for our dpi so yeah so I will

609
00:32:36,410 --> 00:32:43,790
quickly introduce on the detour hoping

610
00:32:41,450 --> 00:32:46,250
mechanic mechanism here so the idea that

611
00:32:43,790 --> 00:32:50,059
we branch from the original injection to

612
00:32:46,250 --> 00:32:54,650
our comeback right but turn out that

613
00:32:50,059 --> 00:32:55,240
there are many ways to do that so first

614
00:32:54,650 --> 00:32:58,750
one

615
00:32:55,240 --> 00:33:00,610
you can zoom dunes Champlin so here on

616
00:32:58,750 --> 00:33:04,390
the left side you have the original code

617
00:33:00,610 --> 00:33:07,030
now we want to instrument here so what

618
00:33:04,390 --> 00:33:11,470
you do is that you allocate our champion

619
00:33:07,030 --> 00:33:14,560
buffer and we override this code with

620
00:33:11,470 --> 00:33:16,960
some code first one we saw the contacts

621
00:33:14,560 --> 00:33:20,139
because because of Dom can change the

622
00:33:16,960 --> 00:33:23,500
contact in some CPU and then employ

623
00:33:20,140 --> 00:33:26,800
anjuman session here and a runtime is

624
00:33:23,500 --> 00:33:30,160
jump to our champion buffer and first of

625
00:33:26,800 --> 00:33:32,800
all we restore the context after we jump

626
00:33:30,160 --> 00:33:37,210
so we will come back to the original

627
00:33:32,800 --> 00:33:40,450
context and we need to make a cone to

628
00:33:37,210 --> 00:33:42,370
our comeback right so before that which

629
00:33:40,450 --> 00:33:44,560
saves the context because cone to cone

630
00:33:42,370 --> 00:33:46,780
back can change the context so we need

631
00:33:44,560 --> 00:33:49,480
to save the context here and it makes

632
00:33:46,780 --> 00:33:52,030
the cone to the cone back and after that

633
00:33:49,480 --> 00:33:54,610
when you return we store the contact we

634
00:33:52,030 --> 00:33:57,850
restore the context which can be changed

635
00:33:54,610 --> 00:34:00,219
here and after that we remember that we

636
00:33:57,850 --> 00:34:03,669
still need to run the original injection

637
00:34:00,220 --> 00:34:07,230
right so the idea that we can copy this

638
00:34:03,670 --> 00:34:10,360
injection here and exq it after that

639
00:34:07,230 --> 00:34:12,610
however in fact it doesn't always work

640
00:34:10,360 --> 00:34:14,500
because some injection for sure want

641
00:34:12,610 --> 00:34:16,930
some real a tip injection they are very

642
00:34:14,500 --> 00:34:21,010
sensitive due to the to the position in

643
00:34:16,929 --> 00:34:22,480
the memory so when you copy those type

644
00:34:21,010 --> 00:34:25,750
each action from here to here it doesn't

645
00:34:22,480 --> 00:34:28,150
work anymore so that means sometimes we

646
00:34:25,750 --> 00:34:30,130
need to relocate the injection not

647
00:34:28,150 --> 00:34:32,680
always it was some time before you can

648
00:34:30,130 --> 00:34:37,680
put it here oppresses we jump back to

649
00:34:32,679 --> 00:34:40,629
the next next code here so we see that

650
00:34:37,679 --> 00:34:44,529
instead of running the original code we

651
00:34:40,630 --> 00:34:46,810
run this home block and we do our best

652
00:34:44,530 --> 00:34:49,270
not to change anything in the context of

653
00:34:46,810 --> 00:34:51,670
the CPU so this on the Belgium to

654
00:34:49,270 --> 00:34:53,290
Champlain the second one is that we do

655
00:34:51,670 --> 00:34:55,840
not jump to Chapel a blue jump to come

656
00:34:53,290 --> 00:34:58,960
back so you see that this mechanism we

657
00:34:55,840 --> 00:35:02,200
do not use any champion buffer so here

658
00:34:58,960 --> 00:35:04,450
again you say the context over right

659
00:35:02,200 --> 00:35:06,730
here right and is jammed agree to the

660
00:35:04,450 --> 00:35:07,850
contact and inside the comeback we

661
00:35:06,730 --> 00:35:10,190
restore the context

662
00:35:07,850 --> 00:35:12,770
and we asked you to relocate instruction

663
00:35:10,190 --> 00:35:18,110
and do something inside to come back and

664
00:35:12,770 --> 00:35:20,090
you returned to here all right so this

665
00:35:18,110 --> 00:35:22,120
technique it doesn't we do not use any

666
00:35:20,090 --> 00:35:26,900
chaplain before our own

667
00:35:22,120 --> 00:35:31,220
so some to Chamberlain

668
00:35:26,900 --> 00:35:34,340
jump to contact but just another way to

669
00:35:31,220 --> 00:35:36,700
branch which is spoon so here you have

670
00:35:34,340 --> 00:35:39,440
another day you just come to Champlain

671
00:35:36,700 --> 00:35:43,549
so we see here you can see here that

672
00:35:39,440 --> 00:35:45,650
instead of jump you do cone we come to

673
00:35:43,550 --> 00:35:46,690
the champion buffer and everything else

674
00:35:45,650 --> 00:35:52,640
is the same

675
00:35:46,690 --> 00:35:56,960
so he is going to branch not John same

676
00:35:52,640 --> 00:35:58,790
thing you can call quickly really going

677
00:35:56,960 --> 00:36:04,450
to come back and here in this case again

678
00:35:58,790 --> 00:36:08,690
we do not use any champion buffer on so

679
00:36:04,450 --> 00:36:11,480
yeah looking at on those existing deep I

680
00:36:08,690 --> 00:36:15,590
when you idiots is this research we

681
00:36:11,480 --> 00:36:18,830
found that existing the die so it works

682
00:36:15,590 --> 00:36:21,290
well but they are not very suitable for

683
00:36:18,830 --> 00:36:23,960
our our projects because they are very

684
00:36:21,290 --> 00:36:28,910
limited on platforms so the idea is that

685
00:36:23,960 --> 00:36:31,570
actually for this dpi I do not want to

686
00:36:28,910 --> 00:36:34,339
limit my shell to if this system

687
00:36:31,570 --> 00:36:36,590
implemented platforms but I want to have

688
00:36:34,340 --> 00:36:40,130
this dpi to work on own cut platforms I

689
00:36:36,590 --> 00:36:44,000
only work for Windows Mac Linux and

690
00:36:40,130 --> 00:36:46,550
everything else but those existing DPI

691
00:36:44,000 --> 00:36:51,200
has some limitation for japon fern green

692
00:36:46,550 --> 00:36:54,890
doesn't work on Windows pin and dynamo

693
00:36:51,200 --> 00:36:57,950
do they do not work on macros upon the

694
00:36:54,890 --> 00:37:01,129
second issue is that the limited on our

695
00:36:57,950 --> 00:37:04,399
teacher supported right pin doesn't work

696
00:37:01,130 --> 00:37:05,150
on anything but Intel CPU same thing for

697
00:37:04,400 --> 00:37:08,960
dino Morea

698
00:37:05,150 --> 00:37:10,610
but for our research we want to have

699
00:37:08,960 --> 00:37:14,830
deep eyes that work on on the English

700
00:37:10,610 --> 00:37:18,200
system which is can be am 64 or miss or

701
00:37:14,830 --> 00:37:20,480
PowerPC and of course you want to

702
00:37:18,200 --> 00:37:23,368
support international

703
00:37:20,480 --> 00:37:26,160
just issues that all those existing

704
00:37:23,369 --> 00:37:29,220
DPI's they provide some very easy and

705
00:37:26,160 --> 00:37:32,339
nicely framework so people just use it

706
00:37:29,220 --> 00:37:36,029
to program their tunes on top knows dpi

707
00:37:32,339 --> 00:37:38,279
however they high many many things

708
00:37:36,029 --> 00:37:41,880
inside so we cannot customize it

709
00:37:38,279 --> 00:37:44,999
possible on just DB as I dunno support

710
00:37:41,880 --> 00:37:48,690
on the for hooking mechanism mechanism I

711
00:37:44,999 --> 00:37:51,019
assume it I introduced before the last

712
00:37:48,690 --> 00:37:56,489
issue that because it high many details

713
00:37:51,019 --> 00:37:58,939
they unjustly be at a limit on the

714
00:37:56,489 --> 00:38:01,529
possibility to customize and and

715
00:37:58,940 --> 00:38:08,130
optimize your your tools on top of a

716
00:38:01,529 --> 00:38:08,910
book on top of dpi so I came up with

717
00:38:08,130 --> 00:38:12,059
something myself

718
00:38:08,910 --> 00:38:15,269
I do our own framework name as copy or

719
00:38:12,059 --> 00:38:17,099
and he has many features it's kept lowly

720
00:38:15,269 --> 00:38:21,299
for from work so you can view your tunes

721
00:38:17,099 --> 00:38:23,430
on top of this from work scope low is

722
00:38:21,299 --> 00:38:26,130
cross-platform it works on on the

723
00:38:23,430 --> 00:38:29,160
performs on the operating system that I

724
00:38:26,130 --> 00:38:33,150
can try on and it support many CPUs it

725
00:38:29,160 --> 00:38:36,450
support Intel am city for miss pop PC

726
00:38:33,150 --> 00:38:38,609
and spa and so on I did there's all the

727
00:38:36,450 --> 00:38:41,399
for cap accommodation I introduced

728
00:38:38,609 --> 00:38:43,710
before so you can choose whatever type

729
00:38:41,400 --> 00:38:46,739
interpreters when you want to do and

730
00:38:43,710 --> 00:38:50,269
unlike many existing DPI you can find on

731
00:38:46,739 --> 00:38:53,609
the internet you can find that those vbi

732
00:38:50,269 --> 00:38:57,180
many of them only allow you to each

733
00:38:53,609 --> 00:39:00,119
human at the function and cheese but not

734
00:38:57,180 --> 00:39:01,558
anyway after that the scope you allow

735
00:39:00,119 --> 00:39:04,470
you to each main anywhere in the program

736
00:39:01,559 --> 00:39:09,089
it doesn't limit on the function and

737
00:39:04,470 --> 00:39:11,609
cheese okay scope less desire to be easy

738
00:39:09,089 --> 00:39:16,078
to use but support on cap optimization

739
00:39:11,609 --> 00:39:18,089
and in some special cases you can design

740
00:39:16,079 --> 00:39:23,630
very fast tune which can be a hundred

741
00:39:18,089 --> 00:39:28,349
times faster than exist existing deeper

742
00:39:23,630 --> 00:39:29,700
which is important for the Vitara yeah

743
00:39:28,349 --> 00:39:34,349
yes our Harbor user

744
00:39:29,700 --> 00:39:37,980
so I do some I'm shocked layer to high

745
00:39:34,349 --> 00:39:41,280
while on the details on the platform on

746
00:39:37,980 --> 00:39:43,500
the CPUs and older platforms and on the

747
00:39:41,280 --> 00:39:46,500
spew come in the Fillmore gas attack

748
00:39:43,500 --> 00:39:50,339
plugin so support old cap operating

749
00:39:46,500 --> 00:39:54,390
system and all caps apiece yeah yeah a

750
00:39:50,339 --> 00:39:56,609
few things we need to cap out when we

751
00:39:54,390 --> 00:40:00,210
build this on firstly we're talking

752
00:39:56,609 --> 00:40:02,098
about cross-platform right for course

753
00:40:00,210 --> 00:40:05,910
before we need to think about how to

754
00:40:02,099 --> 00:40:09,210
deal with memory so because different OS

755
00:40:05,910 --> 00:40:11,058
support different captain interface to

756
00:40:09,210 --> 00:40:13,260
the handle memory access

757
00:40:11,059 --> 00:40:16,670
so one thing we need to do that we need

758
00:40:13,260 --> 00:40:18,809
to allocate champion buffer right and

759
00:40:16,670 --> 00:40:21,690
allocate Champlin buffer we have

760
00:40:18,809 --> 00:40:23,670
different API on different OS to

761
00:40:21,690 --> 00:40:26,069
allocate memory for sapone on on the

762
00:40:23,670 --> 00:40:29,220
unique system we use monologue but on

763
00:40:26,069 --> 00:40:31,740
Windows you version below next thing we

764
00:40:29,220 --> 00:40:34,109
need to do is that we need to allocate

765
00:40:31,740 --> 00:40:36,750
Chamblee buffer to be grid quiet

766
00:40:34,109 --> 00:40:38,970
executable and different OS a different

767
00:40:36,750 --> 00:40:41,730
way to to set a permission as a memory

768
00:40:38,970 --> 00:40:44,730
so first open UNIX they use em protect

769
00:40:41,730 --> 00:40:49,020
Windows it will show unlock so I need to

770
00:40:44,730 --> 00:40:51,599
take everything like that next thing we

771
00:40:49,020 --> 00:40:54,270
need to do is that we need to who I to

772
00:40:51,599 --> 00:40:56,430
the memory to patch the code right to

773
00:40:54,270 --> 00:40:59,730
patch or completely into the memory and

774
00:40:56,430 --> 00:41:02,490
that depends on the OSS so first so we

775
00:40:59,730 --> 00:41:05,819
need to unprotected memory right to that

776
00:41:02,490 --> 00:41:08,609
and we protect again and you can see

777
00:41:05,819 --> 00:41:11,490
that is different on different OS so

778
00:41:08,609 --> 00:41:14,700
first up on on Unix Linux Mac they use

779
00:41:11,490 --> 00:41:19,160
em protect function on Windows user

780
00:41:14,700 --> 00:41:22,140
virtual protect for for UNPO Tech and

781
00:41:19,160 --> 00:41:25,078
reported memory ok remember that we need

782
00:41:22,140 --> 00:41:28,470
to say in read restart context when we

783
00:41:25,079 --> 00:41:31,260
do our accommodation right and this one

784
00:41:28,470 --> 00:41:33,629
is not cross platform but course

785
00:41:31,260 --> 00:41:36,690
architecture because each tab spew has

786
00:41:33,630 --> 00:41:38,640
different way to save memory to say

787
00:41:36,690 --> 00:41:41,030
restore and restore me very restore

788
00:41:38,640 --> 00:41:41,029
Esther

789
00:41:41,170 --> 00:41:46,950
that we try to keep the course after

790
00:41:44,740 --> 00:41:50,770
interpretation as small as possible so

791
00:41:46,950 --> 00:41:55,930
for example on the Intel participate you

792
00:41:50,770 --> 00:41:59,380
can use pushed 82 to say on the resistor

793
00:41:55,930 --> 00:42:02,680
into the stack memory and after that we

794
00:41:59,380 --> 00:42:08,290
pop idea and we have as an instruction

795
00:42:02,680 --> 00:42:10,200
to to say the if flex resistance for as

796
00:42:08,290 --> 00:42:15,130
a cache CPU is not that easy because

797
00:42:10,200 --> 00:42:19,328
even Intel city puppy or m/c for miss a

798
00:42:15,130 --> 00:42:23,049
PC just no such simple injection to say

799
00:42:19,329 --> 00:42:24,880
on the distance so we we did mainly cap

800
00:42:23,049 --> 00:42:27,040
optimization here to keep the course

801
00:42:24,880 --> 00:42:32,589
small as possible and only save the

802
00:42:27,040 --> 00:42:34,839
restore that we really need to save yeah

803
00:42:32,589 --> 00:42:37,779
and it's different it depend on :

804
00:42:34,839 --> 00:42:40,420
convention okay we need to we need only

805
00:42:37,780 --> 00:42:42,730
in our instrumentation we need to call

806
00:42:40,420 --> 00:42:44,710
the comeback right when you come back

807
00:42:42,730 --> 00:42:47,109
you need to pass the occupant to the

808
00:42:44,710 --> 00:42:49,180
combine and it depends the passing

809
00:42:47,109 --> 00:42:52,000
altman to the comeback depend on the cpu

810
00:42:49,180 --> 00:42:54,328
in depends on architecture so there are

811
00:42:52,000 --> 00:42:56,980
many details we need to take depends on

812
00:42:54,329 --> 00:42:58,900
things you want to support yes some some

813
00:42:56,980 --> 00:43:01,059
of the details and I think I so skip now

814
00:42:58,900 --> 00:43:05,559
if it I do not have much time

815
00:43:01,059 --> 00:43:07,990
disclosure is the preamble that we need

816
00:43:05,559 --> 00:43:10,869
to branch from the origin and place to

817
00:43:07,990 --> 00:43:14,140
the comeback all all to the champion

818
00:43:10,869 --> 00:43:16,359
áfourá however many CPUs they do not

819
00:43:14,140 --> 00:43:19,089
allow you to branch to the indirect

820
00:43:16,359 --> 00:43:22,869
occur in the memory so as all I need to

821
00:43:19,089 --> 00:43:26,170
have some temporary resistor - French -

822
00:43:22,869 --> 00:43:29,500
Mysti but not to branch to the memory so

823
00:43:26,170 --> 00:43:34,260
we have some we need to use some squash

824
00:43:29,500 --> 00:43:34,260
resistor to calculate the branch target

825
00:43:34,589 --> 00:43:41,410
yeah and it again depends on the CPUs

826
00:43:39,180 --> 00:43:44,109
one more things you need to do is that

827
00:43:41,410 --> 00:43:45,040
when you write to the memory we override

828
00:43:44,109 --> 00:43:50,078
the code in the memory

829
00:43:45,040 --> 00:43:53,230
we need to fast the insertion catch so

830
00:43:50,079 --> 00:43:54,349
the CPU can can be aware of the new

831
00:43:53,230 --> 00:43:57,199
quarter

832
00:43:54,349 --> 00:43:58,999
so again here it depend on the CPUs for

833
00:43:57,199 --> 00:44:01,789
Intel we do not need to do anything to

834
00:43:58,999 --> 00:44:03,799
flatter the insertion cache but for

835
00:44:01,789 --> 00:44:08,289
other CPU we need to do that and again

836
00:44:03,799 --> 00:44:08,288
it depend on the CPU depends on us

837
00:44:09,640 --> 00:44:13,519
yeah

838
00:44:10,789 --> 00:44:17,059
so how if you scope your scope is pew on

839
00:44:13,519 --> 00:44:21,258
top of qu other famous of what my it

840
00:44:17,059 --> 00:44:23,479
depend on capstone to extract the code

841
00:44:21,259 --> 00:44:27,019
from the origin place so it knows about

842
00:44:23,479 --> 00:44:30,078
a way to override to and remember that

843
00:44:27,019 --> 00:44:32,839
we need to realize the code right so I

844
00:44:30,079 --> 00:44:37,759
use another framework which is Keystone

845
00:44:32,839 --> 00:44:41,509
here to revise a new code to the to

846
00:44:37,759 --> 00:44:44,059
relocate a code so because a capstone

847
00:44:41,509 --> 00:44:47,660
and Keystone they are cross-platform

848
00:44:44,059 --> 00:44:50,390
across our teacher so that's why scope

849
00:44:47,660 --> 00:44:58,089
you on top size is also cross-platform

850
00:44:50,390 --> 00:45:01,759
and cause architecture yeah so actually

851
00:44:58,089 --> 00:45:03,709
this frame was kept complicated because

852
00:45:01,759 --> 00:45:09,829
we want to support many thing we want to

853
00:45:03,709 --> 00:45:12,229
do own cab optimization okay so we had a

854
00:45:09,829 --> 00:45:17,229
deeper so you can start to view our

855
00:45:12,229 --> 00:45:20,749
Father so how to do that so our Father

856
00:45:17,229 --> 00:45:23,118
we do our for the on top of our Father

857
00:45:20,749 --> 00:45:24,339
which is very good father for ready

858
00:45:23,119 --> 00:45:27,589
father

859
00:45:24,339 --> 00:45:31,219
so two feature is that unlike I fell we

860
00:45:27,589 --> 00:45:35,749
support binary only when the binary

861
00:45:31,219 --> 00:45:38,269
binary only together so to do that we

862
00:45:35,749 --> 00:45:39,680
use copy oh because contour deep I allow

863
00:45:38,269 --> 00:45:42,229
you to each human anywhere in the

864
00:45:39,680 --> 00:45:44,538
program and it's our own car CPU so you

865
00:45:42,229 --> 00:45:48,198
can you can do our further running on

866
00:45:44,539 --> 00:45:50,749
own caps appear we suppose selected

867
00:45:48,199 --> 00:45:53,779
binary forcing which means that so

868
00:45:50,749 --> 00:45:54,468
unlike many and I as a DB I like pin or

869
00:45:53,779 --> 00:45:57,859
dino Morea

870
00:45:54,469 --> 00:46:00,140
when you use P not anymore Pro to each

871
00:45:57,859 --> 00:46:04,308
human your program it's human program

872
00:46:00,140 --> 00:46:06,129
from stuff right there's no choice but

873
00:46:04,309 --> 00:46:09,670
always accommodation

874
00:46:06,130 --> 00:46:11,769
but because scope o is using hooking

875
00:46:09,670 --> 00:46:15,569
medicated mechanism so you can choose

876
00:46:11,769 --> 00:46:17,799
where to each human so he only true to

877
00:46:15,569 --> 00:46:20,038
instrument somewhere that we care about

878
00:46:17,799 --> 00:46:23,589
for our Father

879
00:46:20,039 --> 00:46:27,729
so our own so suppose persistent mode in

880
00:46:23,589 --> 00:46:31,538
a FL and besides that it support many as

881
00:46:27,729 --> 00:46:35,558
a advanced techniques for to make self

882
00:46:31,539 --> 00:46:37,390
as a sniper like simple execution we

883
00:46:35,559 --> 00:46:44,589
compiled many static analysis technique

884
00:46:37,390 --> 00:46:48,519
to to make our faster better okay so

885
00:46:44,589 --> 00:46:51,700
this is that alpha is pure shockwave ice

886
00:46:48,519 --> 00:46:55,508
we do not use any features from the CPU

887
00:46:51,700 --> 00:46:58,689
to to build this one so it works

888
00:46:55,509 --> 00:47:01,029
everywhere you don't have CPU you know

889
00:46:58,690 --> 00:47:04,210
lab environment so because we do not

890
00:47:01,029 --> 00:47:07,569
rely on the actual hard way I have a

891
00:47:04,210 --> 00:47:10,930
features it woke on on the CPU on the

892
00:47:07,569 --> 00:47:14,769
our teachers native compile on the

893
00:47:10,930 --> 00:47:21,549
emitter system support binary fast and

894
00:47:14,769 --> 00:47:27,189
quite stable so how about the

895
00:47:21,549 --> 00:47:29,650
implementation so as I said we reuse a

896
00:47:27,190 --> 00:47:32,829
professor we do not change anything in

897
00:47:29,650 --> 00:47:34,749
the court FL so remember that the

898
00:47:32,829 --> 00:47:38,109
program when you want to fight this one

899
00:47:34,749 --> 00:47:40,089
in FL it comprises the source code and

900
00:47:38,109 --> 00:47:42,308
the compiler the special table

901
00:47:40,089 --> 00:47:44,769
instrument this program for you right so

902
00:47:42,309 --> 00:47:47,950
now we do not have the source code how

903
00:47:44,769 --> 00:47:52,328
we can still run on airfare so the idea

904
00:47:47,950 --> 00:47:55,390
is that we just follow the mechanism of

905
00:47:52,329 --> 00:47:58,989
the accomodation in the case you have a

906
00:47:55,390 --> 00:48:02,259
source code so you scope the compiler

907
00:47:58,989 --> 00:48:04,660
instrumental program and we copy

908
00:48:02,259 --> 00:48:06,849
actually the same thing we ensure meant

909
00:48:04,660 --> 00:48:10,450
that target binary in the same way and

910
00:48:06,849 --> 00:48:13,380
we use the same mechanism so once our

911
00:48:10,450 --> 00:48:15,788
program is submitted at runtime it

912
00:48:13,380 --> 00:48:19,509
connect to the Fatah in the same way

913
00:48:15,789 --> 00:48:20,470
exactly the same way so in the easiest

914
00:48:19,509 --> 00:48:23,230
what

915
00:48:20,470 --> 00:48:24,788
our Father is compatible with iPhone so

916
00:48:23,230 --> 00:48:29,500
we do not change anything in the court

917
00:48:24,789 --> 00:48:31,930
anything our own so what we had to do is

918
00:48:29,500 --> 00:48:33,910
that we perform static analysis on the

919
00:48:31,930 --> 00:48:36,910
target binary before we reboot the

920
00:48:33,910 --> 00:48:40,598
father so we locate where you want to

921
00:48:36,910 --> 00:48:43,690
focus fasting on fresh upon usually you

922
00:48:40,599 --> 00:48:45,460
just focus on the pasture court right so

923
00:48:43,690 --> 00:48:48,339
we reverse the program first and

924
00:48:45,460 --> 00:48:51,960
relocated we locate the boxer and we

925
00:48:48,339 --> 00:48:55,299
focus on in shoumaine only those area

926
00:48:51,960 --> 00:48:59,890
and we of course we use compute to hook

927
00:48:55,299 --> 00:49:03,579
into the program at runtime and as a

928
00:48:59,890 --> 00:49:07,328
result of our photo is very fast run the

929
00:49:03,579 --> 00:49:12,099
native speed yeah here's one example how

930
00:49:07,329 --> 00:49:16,029
we build the faster for the network

931
00:49:12,099 --> 00:49:19,390
network program like a TTP my where

932
00:49:16,029 --> 00:49:21,160
shovel so here's how it works you run

933
00:49:19,390 --> 00:49:24,910
the packet binary as a fastened together

934
00:49:21,160 --> 00:49:26,558
like normal right and we only issue mint

935
00:49:24,910 --> 00:49:29,170
the code handling the input from the

936
00:49:26,559 --> 00:49:30,910
client so here you have client and

937
00:49:29,170 --> 00:49:34,930
server right you run the server in

938
00:49:30,910 --> 00:49:37,509
insider inside I fell and issue may know

939
00:49:34,930 --> 00:49:40,720
the code up handle to input sending from

940
00:49:37,510 --> 00:49:42,910
the client regarding the calendar we put

941
00:49:40,720 --> 00:49:47,439
the color code inside the Fox of Aluva

942
00:49:42,910 --> 00:49:49,779
level and in turn the client when it run

943
00:49:47,440 --> 00:49:52,240
it initialized the client socket and

944
00:49:49,779 --> 00:49:55,180
connect to the server and Center input

945
00:49:52,240 --> 00:49:57,910
that is generated by a file to the

946
00:49:55,180 --> 00:50:06,460
server and it is connect up to that and

947
00:49:57,910 --> 00:50:08,200
repeat on the loop demo you are not sure

948
00:50:06,460 --> 00:50:12,069
I have time for them all but it's one

949
00:50:08,200 --> 00:50:14,470
screenshot so will be our Father and we

950
00:50:12,069 --> 00:50:18,430
try that on many in the system you can

951
00:50:14,470 --> 00:50:20,558
far and yeah we found many many bugs and

952
00:50:18,430 --> 00:50:22,558
some of them are very interesting so lie

953
00:50:20,559 --> 00:50:28,299
on this screenshot you can see that this

954
00:50:22,559 --> 00:50:32,340
is a bug from some network router or if

955
00:50:28,299 --> 00:50:38,110
our in China and this cap this part

956
00:50:32,340 --> 00:50:40,360
this device is very popular in China so

957
00:50:38,110 --> 00:50:44,140
the pack we found here actually impacted

958
00:50:40,360 --> 00:50:46,600
I think like millions users in China so

959
00:50:44,140 --> 00:50:49,210
sorry the screenshot is not very clear

960
00:50:46,600 --> 00:50:54,130
but you can see that here we try to

961
00:50:49,210 --> 00:50:55,690
connect to the device with tonette well

962
00:50:54,130 --> 00:50:58,240
of course this device has no they're not

963
00:50:55,690 --> 00:51:01,390
open to the network right and then after

964
00:50:58,240 --> 00:51:03,009
that we run our exploitation and the

965
00:51:01,390 --> 00:51:05,920
expression connect to the web server

966
00:51:03,010 --> 00:51:08,830
running on this device and it exploit

967
00:51:05,920 --> 00:51:10,750
and turn on Teutonia and after that we

968
00:51:08,830 --> 00:51:12,549
could like to turn it server again on

969
00:51:10,750 --> 00:51:15,490
this device and you can look in as a

970
00:51:12,550 --> 00:51:17,230
route ok conclusion and if you have time

971
00:51:15,490 --> 00:51:21,669
you have some demo some pretty quickly

972
00:51:17,230 --> 00:51:25,000
more okay so we here do our Smurfs as a

973
00:51:21,670 --> 00:51:28,000
smart idea that the for embedded system

974
00:51:25,000 --> 00:51:28,480
we picked up by emulating the for my

975
00:51:28,000 --> 00:51:31,600
efforts

976
00:51:28,480 --> 00:51:33,670
and will be faster so it really cost

977
00:51:31,600 --> 00:51:36,880
pala form cause architecture we support

978
00:51:33,670 --> 00:51:40,720
binary only as fast and step on it felt

979
00:51:36,880 --> 00:51:46,120
really really impactful box in the

980
00:51:40,720 --> 00:51:47,740
summary of your device questions but

981
00:51:46,120 --> 00:51:54,910
before that I think I have few minutes

982
00:51:47,740 --> 00:51:57,959
can you run the video ok so we be

983
00:51:54,910 --> 00:52:00,580
officer you can really fast on binary

984
00:51:57,960 --> 00:52:03,490
but because of the limited time I cannot

985
00:52:00,580 --> 00:52:06,700
have run this faster on the this demo

986
00:52:03,490 --> 00:52:10,720
for you on the real attp device but here

987
00:52:06,700 --> 00:52:14,649
I run the faster on some some simple

988
00:52:10,720 --> 00:52:19,180
packet binary on beeps so I see here

989
00:52:14,650 --> 00:52:23,200
that we try to you run our binary faster

990
00:52:19,180 --> 00:52:25,899
on Linux mix right and this packet is

991
00:52:23,200 --> 00:52:28,299
best to which is very simple memory just

992
00:52:25,900 --> 00:52:32,260
for demo and test to run with some input

993
00:52:28,300 --> 00:52:35,790
and normally do something but in some

994
00:52:32,260 --> 00:52:39,700
special input we can cross pass through

995
00:52:35,790 --> 00:52:42,850
so now I run this father we test to on

996
00:52:39,700 --> 00:52:44,620
MIT and I try to fight it boot again

997
00:52:42,850 --> 00:52:46,630
cross this one

998
00:52:44,620 --> 00:52:50,109
so remember that we do not have a source

999
00:52:46,630 --> 00:52:52,900
code for test true so what you can see

1000
00:52:50,110 --> 00:52:56,860
here is that we run the father on MIPS

1001
00:52:52,900 --> 00:52:59,910
virtual machine and we do not have

1002
00:52:56,860 --> 00:52:59,910
source code for test two

1003
00:53:25,049 --> 00:53:34,679
yeah so we see that after like one

1004
00:53:27,899 --> 00:53:37,769
minute if our one crash so let's try to

1005
00:53:34,679 --> 00:53:46,859
see if this cross can really cross the

1006
00:53:37,769 --> 00:53:50,939
target binary test true or not yeah so

1007
00:53:46,859 --> 00:53:53,098
we are fuzzify okay one impure now try

1008
00:53:50,939 --> 00:53:55,459
to run tests to ities input and see what

1009
00:53:53,099 --> 00:53:55,459
happen

1010
00:54:01,640 --> 00:54:09,740
you see segmentation fool at the end so

1011
00:54:04,340 --> 00:54:12,350
yeah so I put that uh Oh father of how

1012
00:54:09,740 --> 00:54:15,439
can really cross the binary and yeah

1013
00:54:12,350 --> 00:54:18,080
this aphasia poor memory but our Father

1014
00:54:15,440 --> 00:54:20,930
that can fast the real target like

1015
00:54:18,080 --> 00:54:22,490
eighty TV run exactly the same way when

1016
00:54:20,930 --> 00:54:25,899
it took a lot more time so I cannot show

1017
00:54:22,490 --> 00:54:25,899
it here okay so thank you

