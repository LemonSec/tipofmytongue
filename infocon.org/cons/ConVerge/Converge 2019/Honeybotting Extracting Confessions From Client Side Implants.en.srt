1
00:00:08,760 --> 00:00:14,869
[Applause]

2
00:00:56,120 --> 00:01:05,039
all right can your alright sweets cool

3
00:01:01,469 --> 00:01:08,280
well welcome to converge tonight 2019

4
00:01:05,040 --> 00:01:10,950
I'm really excited to be here I grew up

5
00:01:08,280 --> 00:01:14,840
in Toronto and I've never made it down

6
00:01:10,950 --> 00:01:17,729
or up it's kind of confusing around here

7
00:01:14,840 --> 00:01:19,380
so my name is a today we're gonna talk

8
00:01:17,729 --> 00:01:21,479
about honey bahding

9
00:01:19,380 --> 00:01:22,798
people are familiar with honey pots and

10
00:01:21,479 --> 00:01:24,720
all the kind of cool things you can do

11
00:01:22,799 --> 00:01:26,880
but we're going to talk about some of

12
00:01:24,720 --> 00:01:32,340
the power that you have when you have

13
00:01:26,880 --> 00:01:35,699
control over a client side impact so I'm

14
00:01:32,340 --> 00:01:37,950
Lea Holmes I'm the author of the windows

15
00:01:35,700 --> 00:01:41,250
powershell cookbook original member of

16
00:01:37,950 --> 00:01:43,590
the PowerShell team and I am the lead

17
00:01:41,250 --> 00:01:46,140
security architect for Azure storage and

18
00:01:43,590 --> 00:01:49,020
media and cloud edge at Microsoft so a

19
00:01:46,140 --> 00:01:51,860
bunch of cool cloudy stuff and we care

20
00:01:49,020 --> 00:01:54,600
very very much about security

21
00:01:51,860 --> 00:01:58,319
anybody here involved with kind of

22
00:01:54,600 --> 00:02:01,410
protecting clients or endpoints all

23
00:01:58,319 --> 00:02:03,660
right cool Bunch yeah you may have had a

24
00:02:01,410 --> 00:02:07,200
situation like this in the past where

25
00:02:03,660 --> 00:02:10,859
you're digging around in some suspicious

26
00:02:07,200 --> 00:02:13,950
registry keys and you think I need to

27
00:02:10,860 --> 00:02:15,720
figure out what this thing is doing you

28
00:02:13,950 --> 00:02:21,959
punch it into your search engine of

29
00:02:15,720 --> 00:02:24,329
choice and bad news if you see the thing

30
00:02:21,959 --> 00:02:27,150
in your registry showing up as an empire

31
00:02:24,330 --> 00:02:28,800
agent you're not going to be having a

32
00:02:27,150 --> 00:02:32,489
good day

33
00:02:28,800 --> 00:02:34,470
the thing is Empire is not one of those

34
00:02:32,489 --> 00:02:37,650
things you're not just a hapless victim

35
00:02:34,470 --> 00:02:40,319
in a botnet there is an operator they've

36
00:02:37,650 --> 00:02:43,800
put code onto your machine and they're

37
00:02:40,319 --> 00:02:45,988
likely interested in your network so

38
00:02:43,800 --> 00:02:47,790
what are they doing why are they trying

39
00:02:45,989 --> 00:02:49,260
to access your network what do they want

40
00:02:47,790 --> 00:02:51,420
to do when they're actually in there and

41
00:02:49,260 --> 00:02:57,149
this is the kind of question that we can

42
00:02:51,420 --> 00:02:59,220
answer so PowerShell the first thing

43
00:02:57,150 --> 00:03:01,080
that Empire does is it launches

44
00:02:59,220 --> 00:03:03,120
PowerShell with this encoded command

45
00:03:01,080 --> 00:03:04,950
argument and so in the beginning we can

46
00:03:03,120 --> 00:03:08,370
see there that we can decode a bit of

47
00:03:04,950 --> 00:03:09,750
that encoded base64 that gives you just

48
00:03:08,370 --> 00:03:12,240
regular code that you can

49
00:03:09,750 --> 00:03:14,220
to experiment put it into notepad and

50
00:03:12,240 --> 00:03:16,020
stuff one of the things I'll point out

51
00:03:14,220 --> 00:03:17,820
here that's really really not common

52
00:03:16,020 --> 00:03:20,580
knowledge in the security community is

53
00:03:17,820 --> 00:03:24,450
in the powershell gallery there is a

54
00:03:20,580 --> 00:03:25,560
module called the PS script analyzer you

55
00:03:24,450 --> 00:03:28,260
see that in the middle that I'm just

56
00:03:25,560 --> 00:03:30,300
installing it but it has a function in

57
00:03:28,260 --> 00:03:32,220
it called in vork invoked formatter and

58
00:03:30,300 --> 00:03:34,470
you can run most code through that and

59
00:03:32,220 --> 00:03:37,170
start to get a bit of a pretty printed

60
00:03:34,470 --> 00:03:38,850
view of what some code is doing so it's

61
00:03:37,170 --> 00:03:42,480
a lot easier than looking at just like a

62
00:03:38,850 --> 00:03:45,030
bunch of characters in your face has

63
00:03:42,480 --> 00:03:47,010
anybody here seen the PowerShell hearts

64
00:03:45,030 --> 00:03:49,170
the blue team the blog posts and stuff

65
00:03:47,010 --> 00:03:53,519
we put out about detecting PowerShell

66
00:03:49,170 --> 00:03:56,640
attacks a couple of you it is crazy if

67
00:03:53,520 --> 00:03:58,320
if you're not yet enabling PowerShell

68
00:03:56,640 --> 00:04:00,480
logging and PowerShell security

69
00:03:58,320 --> 00:04:01,859
transparency in your network that should

70
00:04:00,480 --> 00:04:02,609
be the first thing you do when you get

71
00:04:01,860 --> 00:04:04,980
back home

72
00:04:02,610 --> 00:04:06,959
it completely enlightens what's

73
00:04:04,980 --> 00:04:08,549
happening on your network every single

74
00:04:06,959 --> 00:04:10,950
time that PowerShell avalue is

75
00:04:08,550 --> 00:04:13,230
everything anything it goes into your

76
00:04:10,950 --> 00:04:15,119
event log you can forward those things

77
00:04:13,230 --> 00:04:18,959
and see everything that's happening it's

78
00:04:15,120 --> 00:04:21,269
just amazing I like to quote John

79
00:04:18,959 --> 00:04:22,890
Lambert he's a very very smart guy at

80
00:04:21,269 --> 00:04:25,140
Microsoft he's a distinguished engineer

81
00:04:22,890 --> 00:04:26,490
and one of the reasons that I think he's

82
00:04:25,140 --> 00:04:32,039
so smart is that he quotes

83
00:04:26,490 --> 00:04:33,690
smart people so this is an example of

84
00:04:32,040 --> 00:04:37,290
one of the opportunities that you have

85
00:04:33,690 --> 00:04:39,450
just an uneven just enable PowerShell

86
00:04:37,290 --> 00:04:41,340
logging run whatever was going to happen

87
00:04:39,450 --> 00:04:43,440
on that machine and you're gonna get to

88
00:04:41,340 --> 00:04:45,929
see in those event logs every single

89
00:04:43,440 --> 00:04:49,890
thing that happened and Bob's your uncle

90
00:04:45,930 --> 00:04:52,260
you're done but perhaps you don't want

91
00:04:49,890 --> 00:04:55,169
to like have your first experience with

92
00:04:52,260 --> 00:04:58,409
PowerShell empire be just running it

93
00:04:55,169 --> 00:05:00,419
unconstrained and in a VM so maybe

94
00:04:58,410 --> 00:05:04,050
you're not ready for commitment just yet

95
00:05:00,419 --> 00:05:06,990
it's fine no problems so there is a way

96
00:05:04,050 --> 00:05:11,640
in PowerShell to start to analyze code

97
00:05:06,990 --> 00:05:15,090
without just running it and that's the

98
00:05:11,640 --> 00:05:17,550
PowerShell debugger so you've got some

99
00:05:15,090 --> 00:05:18,960
code on your endpoint and you want to

100
00:05:17,550 --> 00:05:21,450
start to understand what it's going to

101
00:05:18,960 --> 00:05:22,479
do in a bit more of a stepwise and

102
00:05:21,450 --> 00:05:25,000
careful

103
00:05:22,480 --> 00:05:28,080
then you might otherwise see if you're

104
00:05:25,000 --> 00:05:28,080
just running it directly

105
00:05:34,909 --> 00:05:40,199
okay so this is an example of the

106
00:05:37,500 --> 00:05:43,469
PowerShell ISE this is the partial

107
00:05:40,199 --> 00:05:45,960
development environment PowerShell ISE

108
00:05:43,469 --> 00:05:48,569
does support really easy interactive

109
00:05:45,960 --> 00:05:52,109
debugging of scripts so I can set a

110
00:05:48,569 --> 00:05:54,240
breakpoint here I can launch my script

111
00:05:52,110 --> 00:05:57,090
and like many other programming

112
00:05:54,240 --> 00:05:58,710
languages I can f10 step through it

113
00:05:57,090 --> 00:06:00,750
stepped over the function because that

114
00:05:58,710 --> 00:06:03,870
was just defining the function there I

115
00:06:00,750 --> 00:06:06,659
can step in see that hello was written

116
00:06:03,870 --> 00:06:10,379
so that just ran a little function I can

117
00:06:06,659 --> 00:06:13,770
continue past that I can step into the

118
00:06:10,379 --> 00:06:17,569
functions I can do things like examine

119
00:06:13,770 --> 00:06:17,568
what the value of a variable is here

120
00:06:19,310 --> 00:06:23,400
continue through and one of the other

121
00:06:21,150 --> 00:06:24,750
cool things that you can do is I can now

122
00:06:23,400 --> 00:06:33,539
change stuff from the command line

123
00:06:24,750 --> 00:06:36,000
itself so that's cool I was able to

124
00:06:33,539 --> 00:06:38,460
change the value of of the counter

125
00:06:36,000 --> 00:06:43,289
variable continue on and when it's done

126
00:06:38,460 --> 00:06:45,419
writing I can I can continue here and I

127
00:06:43,289 --> 00:06:49,378
can see that counter changed and went up

128
00:06:45,419 --> 00:06:50,940
and so where you'll see it eventually so

129
00:06:49,379 --> 00:06:52,949
we can see that the counter changed and

130
00:06:50,940 --> 00:06:55,080
that's the basic example of how you can

131
00:06:52,949 --> 00:06:57,210
start to interact with powershell

132
00:06:55,080 --> 00:07:00,270
scripts in a secure environment and

133
00:06:57,210 --> 00:07:05,669
slowly modify and evaluate code as it's

134
00:07:00,270 --> 00:07:07,859
running that's pretty fun one of the

135
00:07:05,669 --> 00:07:12,419
other things that I love about about

136
00:07:07,860 --> 00:07:15,509
debugging is what I can do here is we're

137
00:07:12,419 --> 00:07:18,020
gonna use as a little punching bag let's

138
00:07:15,509 --> 00:07:18,020
open up

139
00:07:21,530 --> 00:07:27,260
so this is a version of the stager that

140
00:07:24,590 --> 00:07:29,119
when Empire infects a machine it runs

141
00:07:27,260 --> 00:07:30,770
this bit of PowerShell and it doesn't

142
00:07:29,120 --> 00:07:35,780
run this exactly this was the stuff that

143
00:07:30,770 --> 00:07:38,260
was base64 encoded but you see here at

144
00:07:35,780 --> 00:07:42,770
the at the bottom it's reaching out to a

145
00:07:38,260 --> 00:07:45,650
URL and connecting so what we're gonna

146
00:07:42,770 --> 00:07:48,229
do here this is Empire we're gonna hear

147
00:07:45,650 --> 00:07:50,210
a lot from Empire today and we're gonna

148
00:07:48,230 --> 00:07:53,090
run this stager and see what kind of

149
00:07:50,210 --> 00:07:56,380
insight we can have when this agent is

150
00:07:53,090 --> 00:07:56,380
now connecting back to Empire

151
00:08:06,130 --> 00:08:16,630
so what what Empire does in its initial

152
00:08:09,400 --> 00:08:23,190
launcher it does start PowerShell window

153
00:08:16,630 --> 00:08:26,020
style hidden command stage right up ps1

154
00:08:23,190 --> 00:08:29,190
so it really does this with a base64 in

155
00:08:26,020 --> 00:08:31,150
trunk of encoded content but just for

156
00:08:29,190 --> 00:08:37,270
experimentation purposes we're gonna run

157
00:08:31,150 --> 00:08:39,728
it from this file powershell windows

158
00:08:37,270 --> 00:08:41,978
flashes is not necessarily the best

159
00:08:39,729 --> 00:08:46,780
thing that's happened today for you know

160
00:08:41,979 --> 00:08:50,020
so let's find out so I'm using get

161
00:08:46,780 --> 00:08:52,300
process star power these are all the

162
00:08:50,020 --> 00:08:53,860
power things running on my system I've

163
00:08:52,300 --> 00:08:56,170
got the PowerShell today I see that I'm

164
00:08:53,860 --> 00:08:58,420
in right now but you also see us I've

165
00:08:56,170 --> 00:09:00,160
got forty to forty eight it's an

166
00:08:58,420 --> 00:09:02,709
instance of PowerShell that I can't see

167
00:09:00,160 --> 00:09:10,959
anymore that's running probably

168
00:09:02,710 --> 00:09:12,400
something bad well we just popped a

169
00:09:10,960 --> 00:09:16,060
yeah

170
00:09:12,400 --> 00:09:17,800
here is an empire launched that Windows

171
00:09:16,060 --> 00:09:23,310
machine connected back up to it and we

172
00:09:17,800 --> 00:09:23,310
can now see that so I can see agents I

173
00:09:24,420 --> 00:09:32,199
can interact with one of them when I can

174
00:09:30,070 --> 00:09:33,100
run simple commands this is now task to

175
00:09:32,200 --> 00:09:35,770
run Who am I

176
00:09:33,100 --> 00:09:39,460
it returns back the the user that just

177
00:09:35,770 --> 00:09:42,640
got compromised so that's a fun little

178
00:09:39,460 --> 00:09:45,100
introduction to PowerShell debugging and

179
00:09:42,640 --> 00:09:46,780
the kind of things that you can do but

180
00:09:45,100 --> 00:09:49,630
one of the things that's awesome

181
00:09:46,780 --> 00:09:52,390
so the PowerShell instance that's

182
00:09:49,630 --> 00:09:55,270
running the Empire stager is forty to

183
00:09:52,390 --> 00:09:57,850
forty eight so one of the incredibly

184
00:09:55,270 --> 00:10:00,220
powerful things that PowerShell supports

185
00:09:57,850 --> 00:10:04,060
is attaching to another process in

186
00:10:00,220 --> 00:10:06,700
debugging that so I can get PS host

187
00:10:04,060 --> 00:10:10,150
process info there is that forty to

188
00:10:06,700 --> 00:10:14,260
forty eight powershell that that we knew

189
00:10:10,150 --> 00:10:17,010
is now compromised with empire so i can

190
00:10:14,260 --> 00:10:17,010
enter a

191
00:10:20,360 --> 00:10:25,050
so from that that powershell i was able

192
00:10:23,010 --> 00:10:26,100
to enter this version of powershell and

193
00:10:25,050 --> 00:10:29,219
what i can do

194
00:10:26,100 --> 00:10:39,620
PowerShell runs all code inside of run

195
00:10:29,220 --> 00:10:42,209
spaces so i can debug the run space and

196
00:10:39,620 --> 00:10:45,089
now powershell is broken into the

197
00:10:42,209 --> 00:10:47,250
debugger inside that agent that was

198
00:10:45,089 --> 00:10:49,529
compromising this machine so i can do

199
00:10:47,250 --> 00:10:52,140
things like l to list the code that's

200
00:10:49,529 --> 00:10:54,720
running in there this is literally the

201
00:10:52,140 --> 00:10:57,510
empire stager that's now accepting and

202
00:10:54,720 --> 00:11:03,600
invoking commands i could do things like

203
00:10:57,510 --> 00:11:05,640
i can do things like let you see this so

204
00:11:03,600 --> 00:11:11,010
i can take a look at the different

205
00:11:05,640 --> 00:11:13,890
variables so this is all of the the

206
00:11:11,010 --> 00:11:18,689
sensitive internal state of that agent i

207
00:11:13,890 --> 00:11:20,550
can look at the functions and these are

208
00:11:18,690 --> 00:11:23,040
the functions that the Empire stager has

209
00:11:20,550 --> 00:11:25,790
defined and there's one kind of thing

210
00:11:23,040 --> 00:11:28,620
that's kind of interesting up here

211
00:11:25,790 --> 00:11:30,540
invoke shell command so when you take a

212
00:11:28,620 --> 00:11:32,550
look at what Empire does on a system

213
00:11:30,540 --> 00:11:36,630
invoke shell command is the command that

214
00:11:32,550 --> 00:11:38,640
it actually runs when the Empire c2

215
00:11:36,630 --> 00:11:40,350
server is asking your script to do

216
00:11:38,640 --> 00:11:42,560
something so I can set a breakpoint on

217
00:11:40,350 --> 00:11:42,560
that

218
00:11:49,820 --> 00:11:56,270
and I can continue so now I've got a

219
00:11:53,960 --> 00:11:58,430
breakpoint on this agent and Empire

220
00:11:56,270 --> 00:12:05,420
isn't any of the wiser so I can come

221
00:11:58,430 --> 00:12:11,060
over here and I can run Who am I for

222
00:12:05,420 --> 00:12:13,610
example this one's not coming back so

223
00:12:11,060 --> 00:12:15,349
fast and that's because it's now

224
00:12:13,610 --> 00:12:18,110
PowerShell is now stopped at a

225
00:12:15,350 --> 00:12:20,090
breakpoint and I can see the code where

226
00:12:18,110 --> 00:12:22,070
I'm at and I can see that I'm just about

227
00:12:20,090 --> 00:12:24,230
to hit the invoke shell command function

228
00:12:22,070 --> 00:12:26,210
I can take a look at what I was being

229
00:12:24,230 --> 00:12:29,180
asked there's a variable there on line

230
00:12:26,210 --> 00:12:30,530
151 I can see that I'm being asked to

231
00:12:29,180 --> 00:12:33,800
run the who my command

232
00:12:30,530 --> 00:12:36,290
I can use the PowerShell syntax to step

233
00:12:33,800 --> 00:12:38,120
over commands and I can just step

234
00:12:36,290 --> 00:12:44,240
through this script and see everything

235
00:12:38,120 --> 00:12:47,450
that is about to happen so you see here

236
00:12:44,240 --> 00:12:49,670
it stepped into the part to evaluate Who

237
00:12:47,450 --> 00:12:52,910
am I and it's just about to assign some

238
00:12:49,670 --> 00:12:55,810
output based on some dotnet code so this

239
00:12:52,910 --> 00:13:03,920
is the output that it's about to return

240
00:12:55,810 --> 00:13:06,859
but we can change that what if this guy

241
00:13:03,920 --> 00:13:09,939
thinks that he just interacted with the

242
00:13:06,860 --> 00:13:09,940
director of the FBI

243
00:13:11,920 --> 00:13:16,219
boom Empire has just been totally

244
00:13:14,690 --> 00:13:18,410
tricked if you're an attacker

245
00:13:16,220 --> 00:13:20,660
compromising this machine you have

246
00:13:18,410 --> 00:13:25,089
complete control over what the attacker

247
00:13:20,660 --> 00:13:27,860
sees and you can lie in any way you want

248
00:13:25,090 --> 00:13:34,550
now lying is bad so don't do that in

249
00:13:27,860 --> 00:13:37,210
curve so we can kind of extend this a

250
00:13:34,550 --> 00:13:37,209
little bit and

251
00:13:42,850 --> 00:13:48,680
now one of the things is now we've got

252
00:13:45,650 --> 00:13:50,420
ourselves an agent that the attacker

253
00:13:48,680 --> 00:13:53,839
thinks is under their control but it's

254
00:13:50,420 --> 00:13:55,699
really under our control now we're gonna

255
00:13:53,840 --> 00:13:57,560
start talking about the security and the

256
00:13:55,700 --> 00:13:58,940
kind of things that you can do against

257
00:13:57,560 --> 00:14:01,280
these implants in a couple different

258
00:13:58,940 --> 00:14:03,920
levels so first we're gonna talk about

259
00:14:01,280 --> 00:14:05,030
the kind of the UI level then we're

260
00:14:03,920 --> 00:14:07,640
going to talk about some of the

261
00:14:05,030 --> 00:14:09,980
communication levels between the between

262
00:14:07,640 --> 00:14:11,000
the agents and their c2 server and then

263
00:14:09,980 --> 00:14:15,410
we're going to talk about some of the

264
00:14:11,000 --> 00:14:17,960
really rock foundational stuff so when

265
00:14:15,410 --> 00:14:20,300
you talk about the UI level in Empire

266
00:14:17,960 --> 00:14:22,250
and many of these c2 frameworks

267
00:14:20,300 --> 00:14:24,859
there's been an issue in the past in the

268
00:14:22,250 --> 00:14:27,770
last couple of years where for example

269
00:14:24,860 --> 00:14:31,460
when an empire control server was asking

270
00:14:27,770 --> 00:14:33,650
an agent to over download some files the

271
00:14:31,460 --> 00:14:36,230
agent could respond with a specially

272
00:14:33,650 --> 00:14:38,900
crafted path and then actually overwrite

273
00:14:36,230 --> 00:14:41,080
files on the attacker machine so those

274
00:14:38,900 --> 00:14:43,250
are the kind of dangers that you can do

275
00:14:41,080 --> 00:14:46,300
now let's take a look at another one

276
00:14:43,250 --> 00:14:46,300
that might be kind of fun

277
00:14:51,140 --> 00:14:55,470
so we've got complete control of this

278
00:14:53,520 --> 00:14:58,410
thing right we've got a breakpoint on on

279
00:14:55,470 --> 00:15:03,810
the invoke shell command it returned

280
00:14:58,410 --> 00:15:06,870
fine but what happens if there's my

281
00:15:03,810 --> 00:15:09,959
cursor now it was like this is great I

282
00:15:06,870 --> 00:15:11,940
just got into the FBI I got I'm on the

283
00:15:09,960 --> 00:15:13,580
machine of the director what if I run

284
00:15:11,940 --> 00:15:16,020
Who am I again

285
00:15:13,580 --> 00:15:23,100
it's tasked we're still in the

286
00:15:16,020 --> 00:15:25,650
breakpoint all right I'm in the

287
00:15:23,100 --> 00:15:28,140
breakpoint and I can continue like I did

288
00:15:25,650 --> 00:15:32,060
before I can step over get back to where

289
00:15:28,140 --> 00:15:32,060
we're going with the Who am I command

290
00:15:32,810 --> 00:15:39,869
and now this is the output that it

291
00:15:36,450 --> 00:15:41,970
wanted to send but what happens if I can

292
00:15:39,870 --> 00:15:45,450
send some very very specially crafted

293
00:15:41,970 --> 00:15:48,360
data back to the empire c2 server and

294
00:15:45,450 --> 00:15:52,640
completely completely control what the

295
00:15:48,360 --> 00:15:52,640
attacker sees but if

296
00:15:57,680 --> 00:16:10,640
I do that hold on a second this is a

297
00:16:05,089 --> 00:16:11,740
secure network right so my Empire got

298
00:16:10,640 --> 00:16:15,439
suspended

299
00:16:11,740 --> 00:16:19,550
they exfiltrated my bash history and now

300
00:16:15,440 --> 00:16:22,130
I am the curl was piped in to bash that

301
00:16:19,550 --> 00:16:25,609
does not seem good if I was to come back

302
00:16:22,130 --> 00:16:27,920
to a machine fYI I'm not compromised if

303
00:16:25,610 --> 00:16:30,470
I was to come back to a machine and see

304
00:16:27,920 --> 00:16:32,689
this screenshot I would burn it to the

305
00:16:30,470 --> 00:16:35,260
ground right you see that somebody has

306
00:16:32,690 --> 00:16:37,820
been looking around in your directories

307
00:16:35,260 --> 00:16:40,819
this is crazy like you have so much

308
00:16:37,820 --> 00:16:44,450
control this is a UI redressing

309
00:16:40,820 --> 00:16:46,550
vulnerability in Empire what Empire will

310
00:16:44,450 --> 00:16:48,890
do is it displays everything that you

311
00:16:46,550 --> 00:16:51,920
send to it that includes of course

312
00:16:48,890 --> 00:16:56,540
regular usernames but here I was able to

313
00:16:51,920 --> 00:16:59,390
upload arbitrary vt100 escape sequences

314
00:16:56,540 --> 00:17:02,449
like I've even taken control of the

315
00:16:59,390 --> 00:17:07,449
window title pwned by fbi.gov right so

316
00:17:02,450 --> 00:17:07,449
like this is bad bad news

317
00:17:19,560 --> 00:17:25,659
so Empire has a pretty pretty hefty UI

318
00:17:23,170 --> 00:17:27,960
redressing issue anything you want to

319
00:17:25,660 --> 00:17:31,000
send it is fair game

320
00:17:27,960 --> 00:17:34,720
HD mujer did a bunch of analysis of this

321
00:17:31,000 --> 00:17:37,180
in 2003 and he demonstrated for example

322
00:17:34,720 --> 00:17:40,210
that taking a look at certain log files

323
00:17:37,180 --> 00:17:45,280
if they were able to display an see in

324
00:17:40,210 --> 00:17:47,500
vt100 escape sequences back then the the

325
00:17:45,280 --> 00:17:49,510
vt100 escape sequences are the way that

326
00:17:47,500 --> 00:17:52,050
UNIX terminals in some Windows terminals

327
00:17:49,510 --> 00:17:55,750
used to show colorization and moving

328
00:17:52,050 --> 00:17:58,120
cursors around and stuff and so the the

329
00:17:55,750 --> 00:18:00,070
issue here is there used to be very very

330
00:17:58,120 --> 00:18:02,409
popular escape sequences that would do

331
00:18:00,070 --> 00:18:04,389
things like set the window title to

332
00:18:02,410 --> 00:18:05,800
whatever you want or a set the window

333
00:18:04,390 --> 00:18:09,100
contents to whatever you want or

334
00:18:05,800 --> 00:18:11,280
retrieve the window contents one of the

335
00:18:09,100 --> 00:18:14,770
things he found was you could actually

336
00:18:11,280 --> 00:18:17,560
take the window contents and dump them

337
00:18:14,770 --> 00:18:20,020
into a log file of your choosing so you

338
00:18:17,560 --> 00:18:23,740
could imagine change the window contents

339
00:18:20,020 --> 00:18:26,350
to malicious input run the escape

340
00:18:23,740 --> 00:18:28,240
sequence to dump that into a file maybe

341
00:18:26,350 --> 00:18:31,209
is your Etsy password or something like

342
00:18:28,240 --> 00:18:35,380
that and then again have an AR ste based

343
00:18:31,210 --> 00:18:37,830
on displaying malicious vt100 alone and

344
00:18:35,380 --> 00:18:42,220
the old BBS days did anyone ever

345
00:18:37,830 --> 00:18:44,710
experience an ansi bomb a couple people

346
00:18:42,220 --> 00:18:46,330
so back when people were first still

347
00:18:44,710 --> 00:18:49,870
figuring out that computers could be

348
00:18:46,330 --> 00:18:52,389
used for evil there used to be escape

349
00:18:49,870 --> 00:18:55,719
sequences that would remap your keyboard

350
00:18:52,390 --> 00:18:59,350
so you display a file and it remaps your

351
00:18:55,720 --> 00:19:04,810
Enter key to escape format C colon and

352
00:18:59,350 --> 00:19:08,260
then enter bad situations so displaying

353
00:19:04,810 --> 00:19:13,030
untrusted vt100 from untrusted clients

354
00:19:08,260 --> 00:19:15,520
leads to many many bad things as part of

355
00:19:13,030 --> 00:19:18,780
this research I did a very deep audit of

356
00:19:15,520 --> 00:19:21,460
the vt100 subsystem in Kali and

357
00:19:18,780 --> 00:19:23,440
fortunately they've moved past the days

358
00:19:21,460 --> 00:19:25,900
of the stuff that HD mer was pointing

359
00:19:23,440 --> 00:19:27,550
out here are some examples of them kind

360
00:19:25,900 --> 00:19:30,550
of neutering a bunch of the very

361
00:19:27,550 --> 00:19:32,020
dangerous ones but one of the things

362
00:19:30,550 --> 00:19:37,559
that really really stands out to me

363
00:19:32,020 --> 00:19:40,720
what I'm showing here is a snapshot of

364
00:19:37,559 --> 00:19:43,389
some of the vt100 parsing that happens

365
00:19:40,720 --> 00:19:46,240
in that engine like this is all done in

366
00:19:43,390 --> 00:19:48,640
native code and see this is a lot of

367
00:19:46,240 --> 00:19:52,600
code to be exposing to untrusted input

368
00:19:48,640 --> 00:19:55,300
the amount of data that could be subject

369
00:19:52,600 --> 00:19:57,159
to buffer overflows or integer overflows

370
00:19:55,300 --> 00:20:00,220
just any of that memory corruption

371
00:19:57,160 --> 00:20:03,790
memory safety stuff this is a huge huge

372
00:20:00,220 --> 00:20:06,330
attack surface and so you find a memory

373
00:20:03,790 --> 00:20:09,399
corruption issue in any of this parser

374
00:20:06,330 --> 00:20:12,699
now by just displaying untrusted input

375
00:20:09,400 --> 00:20:17,160
into the Empire of c2 you've now taken

376
00:20:12,700 --> 00:20:19,660
control over that over the Empire server

377
00:20:17,160 --> 00:20:21,820
so that's kind of sketchy that's kind of

378
00:20:19,660 --> 00:20:26,020
talking through like the UI layer of all

379
00:20:21,820 --> 00:20:27,939
this kind of stuff but you know what do

380
00:20:26,020 --> 00:20:30,550
we start talking about when we're

381
00:20:27,940 --> 00:20:31,990
analyzing that was the UI layer but we

382
00:20:30,550 --> 00:20:34,960
also want to figure out we're

383
00:20:31,990 --> 00:20:37,270
communicating between the clients and

384
00:20:34,960 --> 00:20:39,760
the Empire c2 server so what are the

385
00:20:37,270 --> 00:20:44,170
some of the things that you might do if

386
00:20:39,760 --> 00:20:48,820
you were analyzing that c2 communication

387
00:20:44,170 --> 00:20:51,010
framework so here's one of the things

388
00:20:48,820 --> 00:20:52,570
that pops out to you kind of initially

389
00:20:51,010 --> 00:20:56,250
when you start taking a look at that is

390
00:20:52,570 --> 00:21:01,059
that when when Empire is connected to a

391
00:20:56,250 --> 00:21:04,240
Python agent that data by default is

392
00:21:01,059 --> 00:21:06,490
compressed and so when when Empire

393
00:21:04,240 --> 00:21:10,350
retrieves that packet it will decompress

394
00:21:06,490 --> 00:21:13,870
whatever the agent sent but the thing is

395
00:21:10,350 --> 00:21:16,409
compression on malicious input is very

396
00:21:13,870 --> 00:21:20,409
very effective like a thousand to one

397
00:21:16,410 --> 00:21:23,140
effective and so if I was a malicious

398
00:21:20,410 --> 00:21:26,110
agent trying to do bad stuff to an

399
00:21:23,140 --> 00:21:28,660
empire c2 server well what I could just

400
00:21:26,110 --> 00:21:31,928
do is send it a hundred megabytes of

401
00:21:28,660 --> 00:21:33,429
compressed malicious content and what

402
00:21:31,929 --> 00:21:36,550
Empire will do is decompress that

403
00:21:33,429 --> 00:21:39,040
faithfully and that becomes a hundred

404
00:21:36,550 --> 00:21:41,980
gigabytes of memory usage on that c2

405
00:21:39,040 --> 00:21:43,960
server nothing is going to survive that

406
00:21:41,980 --> 00:21:45,460
you're not going to be sitting on

407
00:21:43,960 --> 00:21:47,740
hey this is fun attack and I've got a

408
00:21:45,460 --> 00:21:49,900
hundred gigs of memory free so that

409
00:21:47,740 --> 00:21:52,540
thing is gonna get knocked off the face

410
00:21:49,900 --> 00:21:55,570
of the earth but that's just the start

411
00:21:52,540 --> 00:21:57,550
of this thing Empire is written in

412
00:21:55,570 --> 00:21:59,379
Python and one of the things that you

413
00:21:57,550 --> 00:22:02,139
start to play with as you're

414
00:21:59,380 --> 00:22:04,930
experimenting with Python it seems that

415
00:22:02,140 --> 00:22:09,670
every single of c-2 framework out there

416
00:22:04,930 --> 00:22:13,060
that's written in Python loves JSON JSON

417
00:22:09,670 --> 00:22:16,090
is a data structure format here's an

418
00:22:13,060 --> 00:22:21,070
example of one of Empires modules the

419
00:22:16,090 --> 00:22:24,820
Etsy d crawler does a json.parse the

420
00:22:21,070 --> 00:22:27,970
social media c2 does this the RAS c2 Co

421
00:22:24,820 --> 00:22:29,590
addict c2 g-dog c2 like every single

422
00:22:27,970 --> 00:22:33,790
vine like literally every single one

423
00:22:29,590 --> 00:22:38,500
that I could find python c2 parses JSON

424
00:22:33,790 --> 00:22:42,399
from untrusted clients straight up so

425
00:22:38,500 --> 00:22:45,490
why do these people love JSON so much

426
00:22:42,400 --> 00:22:47,620
and that's because python does such a

427
00:22:45,490 --> 00:22:50,020
good job of putting these things into

428
00:22:47,620 --> 00:22:52,659
dictionaries the Python dictionary

429
00:22:50,020 --> 00:22:55,510
object is kind of magic you give it a

430
00:22:52,660 --> 00:22:58,600
string and a value an aim value pair I

431
00:22:55,510 --> 00:23:00,490
say remember that like Jack's phone

432
00:22:58,600 --> 00:23:03,100
number is this and remember that Lee's

433
00:23:00,490 --> 00:23:04,900
phone number is this and then I can just

434
00:23:03,100 --> 00:23:07,750
I can literally put in millions of

435
00:23:04,900 --> 00:23:10,200
things into here and when I later when I

436
00:23:07,750 --> 00:23:12,870
say what was Jack's phone number almost

437
00:23:10,200 --> 00:23:15,790
instantaneously it can retrieve it I

438
00:23:12,870 --> 00:23:17,290
don't have to remember array indexes I

439
00:23:15,790 --> 00:23:19,600
don't need to do complicated data

440
00:23:17,290 --> 00:23:21,850
structures it is the closest thing to

441
00:23:19,600 --> 00:23:25,600
magic that computer science is offered

442
00:23:21,850 --> 00:23:28,810
in a long long time it's very fast and

443
00:23:25,600 --> 00:23:31,480
what happens is this is all based off of

444
00:23:28,810 --> 00:23:33,610
hash tables now this is like the

445
00:23:31,480 --> 00:23:37,840
underlying data structure behind the

446
00:23:33,610 --> 00:23:39,699
JSON and the Python dictionaries and so

447
00:23:37,840 --> 00:23:41,949
hash tables are magic because what

448
00:23:39,700 --> 00:23:45,730
they've done is they've given you that

449
00:23:41,950 --> 00:23:47,220
that almost immediate access to even

450
00:23:45,730 --> 00:23:49,900
with millions and millions of keys

451
00:23:47,220 --> 00:23:54,820
almost immediate access to the data

452
00:23:49,900 --> 00:23:56,290
that's stored in them now to get a bit

453
00:23:54,820 --> 00:23:57,490
of a better understanding about hash

454
00:23:56,290 --> 00:24:00,340
tables let's talk about

455
00:23:57,490 --> 00:24:01,899
how they work so you know if you have

456
00:24:00,340 --> 00:24:04,629
millions of millions of keys in a hash

457
00:24:01,899 --> 00:24:07,299
table you're not gonna have like

458
00:24:04,630 --> 00:24:09,640
millions and millions of buckets so the

459
00:24:07,299 --> 00:24:11,350
idea with the hash table is you have

460
00:24:09,640 --> 00:24:13,179
these keys and in this case they're

461
00:24:11,350 --> 00:24:15,428
strings and you're gonna send them

462
00:24:13,179 --> 00:24:17,860
through a mathematical function just

463
00:24:15,429 --> 00:24:21,610
consider it magic for now and that's

464
00:24:17,860 --> 00:24:23,770
gonna return a number and that bet as

465
00:24:21,610 --> 00:24:25,330
long as that's stable I can say well I'm

466
00:24:23,770 --> 00:24:27,760
gonna have these buckets for all of

467
00:24:25,330 --> 00:24:30,340
these keys and when I keep when I get a

468
00:24:27,760 --> 00:24:32,529
string send it through this magic I get

469
00:24:30,340 --> 00:24:34,389
a number and I just know that the key is

470
00:24:32,529 --> 00:24:37,659
going to be in bucket number 14 or

471
00:24:34,390 --> 00:24:40,260
bucket number 12 so it's a super super

472
00:24:37,659 --> 00:24:44,710
fast way with that that magical function

473
00:24:40,260 --> 00:24:47,379
to figure out where data is stored so in

474
00:24:44,710 --> 00:24:49,539
in Python the the function that does

475
00:24:47,380 --> 00:24:51,640
that that magical math is literally

476
00:24:49,539 --> 00:24:53,590
called hash hash of a string it'll

477
00:24:51,640 --> 00:24:56,620
return you a number and that's the way

478
00:24:53,590 --> 00:24:58,480
it works when you have fewer buckets

479
00:24:56,620 --> 00:25:00,250
then that number returns it kind of like

480
00:24:58,480 --> 00:25:04,720
loops around and does the modulus

481
00:25:00,250 --> 00:25:06,909
operation now one of the things is that

482
00:25:04,720 --> 00:25:10,149
these buckets can sometimes have

483
00:25:06,909 --> 00:25:12,700
collisions you know is when you have the

484
00:25:10,149 --> 00:25:15,189
world at your fingertips of strings that

485
00:25:12,700 --> 00:25:17,740
hash into things you can sometimes have

486
00:25:15,190 --> 00:25:20,620
it where two strings will hash to that

487
00:25:17,740 --> 00:25:23,320
same number that's gonna happen life

488
00:25:20,620 --> 00:25:26,168
happens comes at you fast and so what

489
00:25:23,320 --> 00:25:29,500
the hash table needs to have is a way of

490
00:25:26,169 --> 00:25:31,960
conflict resolution and so when you have

491
00:25:29,500 --> 00:25:34,419
two strings that hash to the same number

492
00:25:31,960 --> 00:25:37,299
well what it does is it just puts them

493
00:25:34,419 --> 00:25:38,710
kind of into the same bucket and it

494
00:25:37,299 --> 00:25:40,299
doesn't have like another little hash

495
00:25:38,710 --> 00:25:42,220
table in there they're just in the same

496
00:25:40,299 --> 00:25:45,129
bucket and it will start to look through

497
00:25:42,220 --> 00:25:47,230
a list of the items that were in there

498
00:25:45,130 --> 00:25:49,210
so if I'm looking for let say the value

499
00:25:47,230 --> 00:25:51,820
lead and that's colliding with something

500
00:25:49,210 --> 00:25:54,370
else I can then start iterating through

501
00:25:51,820 --> 00:25:58,928
the numbers that are colliding looking

502
00:25:54,370 --> 00:26:00,908
for the thing that was lean so this this

503
00:25:58,929 --> 00:26:04,390
kind of view here of the way that the

504
00:26:00,909 --> 00:26:06,429
lists are laid out some hash tables put

505
00:26:04,390 --> 00:26:09,460
those aside and like a separate area of

506
00:26:06,429 --> 00:26:10,680
memory the way that Python does this is

507
00:26:09,460 --> 00:26:12,780
through open address

508
00:26:10,680 --> 00:26:16,050
and so that's where I've got this big

509
00:26:12,780 --> 00:26:18,270
old list of hash table buckets and when

510
00:26:16,050 --> 00:26:20,040
I have two colliding entries it will

511
00:26:18,270 --> 00:26:22,170
just start looking into like the next

512
00:26:20,040 --> 00:26:26,820
bucket to see if it can find the one

513
00:26:22,170 --> 00:26:30,540
that might have had it so the amazing

514
00:26:26,820 --> 00:26:32,790
thing about this is that with with the

515
00:26:30,540 --> 00:26:34,800
openness of everything today we can

516
00:26:32,790 --> 00:26:37,470
actually take a look this is the example

517
00:26:34,800 --> 00:26:40,139
of the implementation of like literally

518
00:26:37,470 --> 00:26:43,800
putting a key into a hash table in

519
00:26:40,140 --> 00:26:45,770
c-sharp this is the implementation of

520
00:26:43,800 --> 00:26:49,800
the exact exact same thing in Python

521
00:26:45,770 --> 00:26:51,810
it's pretty cool stuff and the main

522
00:26:49,800 --> 00:26:54,840
thing oh by the way like check this oh

523
00:26:51,810 --> 00:26:58,350
this is what I love about reading like

524
00:26:54,840 --> 00:27:02,639
high quality professional code when it

525
00:26:58,350 --> 00:27:05,310
comes to Python its line 227 before any

526
00:27:02,640 --> 00:27:07,320
code is written they spend the beginning

527
00:27:05,310 --> 00:27:09,030
of the file talking about the reasons

528
00:27:07,320 --> 00:27:11,550
why they've made certain algorithm

529
00:27:09,030 --> 00:27:13,710
choices some of like does it use open

530
00:27:11,550 --> 00:27:15,600
addressing versus closed addressing like

531
00:27:13,710 --> 00:27:17,490
it's just amazing to really get a

532
00:27:15,600 --> 00:27:23,459
perspective into what drives people to

533
00:27:17,490 --> 00:27:25,380
do some of these complicated things so

534
00:27:23,460 --> 00:27:27,150
what I've talked about is hash tables

535
00:27:25,380 --> 00:27:30,090
are amazing they have this like super

536
00:27:27,150 --> 00:27:32,340
super quick access but one of the issues

537
00:27:30,090 --> 00:27:35,250
that every single algorithm in computer

538
00:27:32,340 --> 00:27:38,159
science has is this idea that well there

539
00:27:35,250 --> 00:27:40,170
is the best-case like the performance of

540
00:27:38,160 --> 00:27:42,390
inserting a key there is the best case

541
00:27:40,170 --> 00:27:45,120
there's the average case like when I

542
00:27:42,390 --> 00:27:47,640
just feed it random stuff on average how

543
00:27:45,120 --> 00:27:50,820
is it gonna perform hash tables are

544
00:27:47,640 --> 00:27:52,470
amazing there but you start to get

545
00:27:50,820 --> 00:27:54,860
interesting in the world of security

546
00:27:52,470 --> 00:27:58,140
when you start talking about worst case

547
00:27:54,860 --> 00:28:01,560
so the worst case is a thing that people

548
00:27:58,140 --> 00:28:04,440
have started exploring and so also in

549
00:28:01,560 --> 00:28:07,260
2003 Crosby and Wallach did some

550
00:28:04,440 --> 00:28:09,390
research and they found that a lot of

551
00:28:07,260 --> 00:28:12,810
data structures in popular programming

552
00:28:09,390 --> 00:28:16,440
languages and operating system data

553
00:28:12,810 --> 00:28:18,720
structures if you fed them specially

554
00:28:16,440 --> 00:28:21,559
crafted malicious input would start to

555
00:28:18,720 --> 00:28:24,230
exhibit some of this worst-case behavior

556
00:28:21,559 --> 00:28:26,809
so you saw that example where I was

557
00:28:24,230 --> 00:28:29,100
showing some collisions in a hash table

558
00:28:26,809 --> 00:28:31,740
what happens if you made everything

559
00:28:29,100 --> 00:28:34,439
intentionally collide then you get away

560
00:28:31,740 --> 00:28:36,090
from that amazing like number turning

561
00:28:34,440 --> 00:28:37,740
into buckets turning into wet over and

562
00:28:36,090 --> 00:28:40,439
then you just get into this point where

563
00:28:37,740 --> 00:28:43,350
I've got I'm just looking through a huge

564
00:28:40,440 --> 00:28:47,460
list that's no longer a hash table that

565
00:28:43,350 --> 00:28:48,870
is now iterating like just so slowly

566
00:28:47,460 --> 00:28:53,210
through a list like this is like

567
00:28:48,870 --> 00:28:56,580
millions of years in like CPU time in

568
00:28:53,210 --> 00:28:59,370
2011 some people did some additional

569
00:28:56,580 --> 00:29:00,899
analysis and demonstrated these attacks

570
00:28:59,370 --> 00:29:03,000
against a bunch of web application

571
00:29:00,900 --> 00:29:08,309
frameworks they showed it against

572
00:29:03,000 --> 00:29:11,400
asp.net and Perl Python all of these

573
00:29:08,309 --> 00:29:14,039
things were vulnerable to to intentional

574
00:29:11,400 --> 00:29:16,919
hash table collisions one of the things

575
00:29:14,039 --> 00:29:19,379
though is that so this was disclosed

576
00:29:16,919 --> 00:29:21,840
Python fixed it you know like that was

577
00:29:19,380 --> 00:29:25,770
nine years ago so like time has moved on

578
00:29:21,840 --> 00:29:27,780
but it's the interesting example of what

579
00:29:25,770 --> 00:29:31,039
you can do if you really deeply analyzed

580
00:29:27,780 --> 00:29:34,379
something and so we're gonna do that

581
00:29:31,039 --> 00:29:36,450
there is an even more efficient way to

582
00:29:34,380 --> 00:29:40,740
attack the Python hash table function

583
00:29:36,450 --> 00:29:43,830
then I've ever seen so what I've got on

584
00:29:40,740 --> 00:29:46,950
the right hand side is a see re

585
00:29:43,830 --> 00:29:49,740
implementation of what Python 2:7 uses

586
00:29:46,950 --> 00:29:52,440
for hashing and it's like it's not

587
00:29:49,740 --> 00:29:54,120
simple but it's shockingly brief when

588
00:29:52,440 --> 00:29:55,409
you talk about it it's really like 15

589
00:29:54,120 --> 00:29:56,428
lines of code and we're gonna step

590
00:29:55,409 --> 00:29:59,340
through it and you're gonna understand

591
00:29:56,429 --> 00:30:02,100
this there's an example there on the

592
00:29:59,340 --> 00:30:05,189
Left where I take a string hash it with

593
00:30:02,100 --> 00:30:06,418
this re-implementation hash it with

594
00:30:05,190 --> 00:30:09,450
Python and you can see that they're

595
00:30:06,419 --> 00:30:13,890
exactly the same thing unsolo says it's

596
00:30:09,450 --> 00:30:17,490
good so we're gonna keep on going so a

597
00:30:13,890 --> 00:30:20,400
hash table and a Python hash is just a

598
00:30:17,490 --> 00:30:22,980
number so the first stage of this

599
00:30:20,400 --> 00:30:25,230
algorithm I'm gonna be hatching the

600
00:30:22,980 --> 00:30:28,200
wordly so as the first stage of this

601
00:30:25,230 --> 00:30:30,299
algorithm X is the number that's holding

602
00:30:28,200 --> 00:30:33,030
that hash so in the first stage we're

603
00:30:30,299 --> 00:30:34,620
just initializing that to 0 and that

604
00:30:33,030 --> 00:30:37,550
little demo app show

605
00:30:34,620 --> 00:30:42,659
that's the current state is all zeros

606
00:30:37,550 --> 00:30:48,889
make sense so far it's good so the next

607
00:30:42,660 --> 00:30:51,330
stage what we do that the that P

608
00:30:48,890 --> 00:30:53,760
represents the current letter that we're

609
00:30:51,330 --> 00:30:56,460
processing so the star P means the

610
00:30:53,760 --> 00:30:58,530
current value of that letter so we're

611
00:30:56,460 --> 00:31:02,760
going to take the first letter that

612
00:30:58,530 --> 00:31:05,340
we're processing and those two left less

613
00:31:02,760 --> 00:31:10,440
than signs means shift all the bits in

614
00:31:05,340 --> 00:31:12,330
that letter left by 7 places so you see

615
00:31:10,440 --> 00:31:14,820
here where the arrow points out the

616
00:31:12,330 --> 00:31:18,570
letter L the binary for that is the 1 0

617
00:31:14,820 --> 00:31:20,790
0 1 1 0 0 so you see the first line

618
00:31:18,570 --> 00:31:26,010
there is where those have been shifted

619
00:31:20,790 --> 00:31:27,990
shifted left by 7 places so that's cool

620
00:31:26,010 --> 00:31:30,720
and then this is where we get into like

621
00:31:27,990 --> 00:31:33,960
the real like hard working part of the

622
00:31:30,720 --> 00:31:35,520
loop and so we're going through here

623
00:31:33,960 --> 00:31:36,870
through all the letters and this is

624
00:31:35,520 --> 00:31:40,980
where we kind of start again from

625
00:31:36,870 --> 00:31:43,350
scratch so for every we take the current

626
00:31:40,980 --> 00:31:46,230
hash table we multiply that by a million

627
00:31:43,350 --> 00:31:48,209
in three that million in three thing as

628
00:31:46,230 --> 00:31:50,760
a lot of randomization to all this

629
00:31:48,210 --> 00:31:53,630
things so that's why it's there and then

630
00:31:50,760 --> 00:31:56,879
we add in again you see that dollar

631
00:31:53,630 --> 00:32:00,540
Asterix P we add in again the current

632
00:31:56,880 --> 00:32:01,920
letter that we're processing one of the

633
00:32:00,540 --> 00:32:04,050
things I'll point out is that

634
00:32:01,920 --> 00:32:06,540
multiplication by a million in three

635
00:32:04,050 --> 00:32:09,629
gives us like what I'm highlighting here

636
00:32:06,540 --> 00:32:11,700
is this bit blender because once any of

637
00:32:09,630 --> 00:32:13,770
the bits of our input get into that area

638
00:32:11,700 --> 00:32:16,170
they're kind of lost for good we don't

639
00:32:13,770 --> 00:32:18,660
really have any control over the data in

640
00:32:16,170 --> 00:32:20,910
there what we have control over are

641
00:32:18,660 --> 00:32:22,740
those eight bits on the right-hand side

642
00:32:20,910 --> 00:32:25,320
when we're processing character by

643
00:32:22,740 --> 00:32:29,520
character so we don't really have a lot

644
00:32:25,320 --> 00:32:32,550
of control there and so we that's just

645
00:32:29,520 --> 00:32:36,690
kind of a fact of this algorithm we

646
00:32:32,550 --> 00:32:39,149
process the next e the next e in the

647
00:32:36,690 --> 00:32:41,550
last stage of what we do what python

648
00:32:39,150 --> 00:32:43,440
does is it'll take the length of the

649
00:32:41,550 --> 00:32:44,450
current string that you've got and it

650
00:32:43,440 --> 00:32:47,990
then

651
00:32:44,450 --> 00:32:51,260
does an exclusive or at the end with the

652
00:32:47,990 --> 00:32:54,470
current value so you see at the top here

653
00:32:51,260 --> 00:32:57,010
the last bite is that one zero one we

654
00:32:54,470 --> 00:32:59,840
can see that I XOR that by three and

655
00:32:57,010 --> 00:33:02,390
then that string at the bottom you can

656
00:32:59,840 --> 00:33:05,000
see that is the value that's the current

657
00:33:02,390 --> 00:33:07,970
thing and when I finally take that

658
00:33:05,000 --> 00:33:09,830
binary value at the top and I convert

659
00:33:07,970 --> 00:33:13,190
that to an integer you see here that

660
00:33:09,830 --> 00:33:15,050
number is like negative 118 something

661
00:33:13,190 --> 00:33:17,110
and that's basically that that's the

662
00:33:15,050 --> 00:33:19,580
same number that's being returned by our

663
00:33:17,110 --> 00:33:23,750
Python reimplementation of the Python

664
00:33:19,580 --> 00:33:26,439
function so now that you understand the

665
00:33:23,750 --> 00:33:29,150
way roughly that the algorithm works

666
00:33:26,440 --> 00:33:32,330
let's talk about the way that they

667
00:33:29,150 --> 00:33:35,990
attacked this nine years ago so one of

668
00:33:32,330 --> 00:33:39,800
the most best ways the idea of an attack

669
00:33:35,990 --> 00:33:42,440
is I'm looking for like a you know ten

670
00:33:39,800 --> 00:33:44,870
thousand strings that all hash to the

671
00:33:42,440 --> 00:33:46,670
same value but the issue is we were

672
00:33:44,870 --> 00:33:49,520
spending all this time like blending in

673
00:33:46,670 --> 00:33:52,160
random data so what they did is they

674
00:33:49,520 --> 00:33:54,770
said I'm just gonna start doing random

675
00:33:52,160 --> 00:33:57,410
strings and keeping track of that value

676
00:33:54,770 --> 00:34:00,410
of x so I know that after processing a

677
00:33:57,410 --> 00:34:03,320
here's the value of x after processing a

678
00:34:00,410 --> 00:34:05,840
be here's a different value of x so you

679
00:34:03,320 --> 00:34:08,659
keep a huge list of numbers that you've

680
00:34:05,840 --> 00:34:12,080
been able to get to and the the content

681
00:34:08,659 --> 00:34:15,110
that got you there now what you can also

682
00:34:12,080 --> 00:34:16,969
do is if I want to find a thing with a

683
00:34:15,110 --> 00:34:19,820
hash value of like one two three four

684
00:34:16,969 --> 00:34:21,620
this algorithm kind of works in Reverse

685
00:34:19,820 --> 00:34:25,070
a little bit so you can start to step

686
00:34:21,620 --> 00:34:27,710
backwards until you find one that you

687
00:34:25,070 --> 00:34:30,050
got to it from all of your random stuff

688
00:34:27,710 --> 00:34:32,480
before so you've got a hash you know

689
00:34:30,050 --> 00:34:34,159
you've got strings that you know and

690
00:34:32,480 --> 00:34:36,530
eventually they'll meet somewhere in the

691
00:34:34,159 --> 00:34:39,950
middle with a hash code that you know

692
00:34:36,530 --> 00:34:41,450
that you can go kind of both ways now so

693
00:34:39,949 --> 00:34:44,449
that's a way that they started to

694
00:34:41,449 --> 00:34:47,629
explore the attacking Python

695
00:34:44,449 --> 00:34:50,230
denial-of-service there's been some more

696
00:34:47,630 --> 00:34:53,330
research on that in the way of of this

697
00:34:50,230 --> 00:34:55,840
robert Grasse did some this is a hugely

698
00:34:53,330 --> 00:34:57,920
expensive process he did this against

699
00:34:55,840 --> 00:35:02,150
64-bit Python in it

700
00:34:57,920 --> 00:35:05,450
71 hours to start to get some things but

701
00:35:02,150 --> 00:35:08,000
there's a critical weakness in in this

702
00:35:05,450 --> 00:35:11,779
algorithm and it's because it's based on

703
00:35:08,000 --> 00:35:14,540
multiplication so if that hash ever gets

704
00:35:11,780 --> 00:35:16,640
to zero just whatever it ever gets to

705
00:35:14,540 --> 00:35:18,410
zero you know that that multiplication

706
00:35:16,640 --> 00:35:20,598
by a million in three is gonna do

707
00:35:18,410 --> 00:35:23,569
nothing because a million in three times

708
00:35:20,599 --> 00:35:26,089
zero is still zero so there's a lot of

709
00:35:23,569 --> 00:35:27,980
weakness there especially if the values

710
00:35:26,089 --> 00:35:30,290
of your characters are also zero a

711
00:35:27,980 --> 00:35:34,280
million in three times zero is zero and

712
00:35:30,290 --> 00:35:36,079
if you add in a zero it's zero so you do

713
00:35:34,280 --> 00:35:38,750
have a way with this critical weakness

714
00:35:36,079 --> 00:35:42,609
of zeros to start to generate more and

715
00:35:38,750 --> 00:35:45,140
more input with the exact same hash code

716
00:35:42,609 --> 00:35:47,480
so we can do this here's an example on

717
00:35:45,140 --> 00:35:50,750
the left where we can just literally

718
00:35:47,480 --> 00:35:52,430
brute-force a bunch of strings you see

719
00:35:50,750 --> 00:35:55,549
on the bottom there it's just looking

720
00:35:52,430 --> 00:35:57,379
for points where that hash ever gets to

721
00:35:55,549 --> 00:35:59,960
zero that's the critical weakness that

722
00:35:57,380 --> 00:36:02,299
we're trying to exploit this is almost

723
00:35:59,960 --> 00:36:04,400
in real time I subtracted some time

724
00:36:02,299 --> 00:36:06,619
between steps one and two but you know

725
00:36:04,400 --> 00:36:10,010
two minutes or so you've got yourself

726
00:36:06,619 --> 00:36:14,839
five or six situations where the hash at

727
00:36:10,010 --> 00:36:16,040
some point gets to zero so here's an

728
00:36:14,839 --> 00:36:18,710
example of running it through that

729
00:36:16,040 --> 00:36:20,869
Python simulator tool that I was talking

730
00:36:18,710 --> 00:36:23,359
about where you can see like near the

731
00:36:20,869 --> 00:36:26,660
bottom there it actually gets to zero

732
00:36:23,359 --> 00:36:29,299
and what I can do then is just kind of

733
00:36:26,660 --> 00:36:30,828
remove the string length from that and

734
00:36:29,299 --> 00:36:34,730
then I can actually have a hash that's

735
00:36:30,829 --> 00:36:37,069
actually zero so you see here I by doing

736
00:36:34,730 --> 00:36:39,619
that that attack when it hits zero and

737
00:36:37,069 --> 00:36:42,950
just adding in more and more zeros I now

738
00:36:39,619 --> 00:36:47,119
have four things that are hashing to the

739
00:36:42,950 --> 00:36:49,848
hash code is zero so what I can do is

740
00:36:47,119 --> 00:36:51,589
with a couple of hours of brute forcing

741
00:36:49,849 --> 00:36:54,819
to find these things with zeros and

742
00:36:51,589 --> 00:36:57,980
adding in more zeros I can get like

743
00:36:54,819 --> 00:37:03,109
10,000 collisions into exactly the same

744
00:36:57,980 --> 00:37:05,930
bucket the problem is 10,000 is pretty

745
00:37:03,109 --> 00:37:07,848
amazing but the problem is that thing

746
00:37:05,930 --> 00:37:09,618
for one thing this is amazing we just

747
00:37:07,849 --> 00:37:11,180
did something that was way better than

748
00:37:09,619 --> 00:37:13,910
72 hours of compute

749
00:37:11,180 --> 00:37:16,160
work but the problem is we we can't like

750
00:37:13,910 --> 00:37:18,170
take those sequences and just duplicate

751
00:37:16,160 --> 00:37:19,700
them because that that remember that

752
00:37:18,170 --> 00:37:21,920
part in the beginning where we just took

753
00:37:19,700 --> 00:37:24,500
the first character and shifted it over

754
00:37:21,920 --> 00:37:28,240
left by seven into that bit blender we

755
00:37:24,500 --> 00:37:28,240
never get control of that bit blender

756
00:37:29,020 --> 00:37:34,730
hold on there's something here I told

757
00:37:32,720 --> 00:37:36,799
you that that stuff on the right the

758
00:37:34,730 --> 00:37:38,900
stuff in green that's the stuff that we

759
00:37:36,800 --> 00:37:40,819
have complete control of and the thing

760
00:37:38,900 --> 00:37:43,400
that we were worried about was this this

761
00:37:40,819 --> 00:37:45,589
bit blender part here where our initial

762
00:37:43,400 --> 00:37:47,540
character got shifted over seven and

763
00:37:45,589 --> 00:37:50,000
then some bytes actually made it into

764
00:37:47,540 --> 00:37:55,369
that blender that we never have control

765
00:37:50,000 --> 00:37:58,730
over so what if we instead turns out

766
00:37:55,369 --> 00:38:01,010
that we're only shifting over seven but

767
00:37:58,730 --> 00:38:03,380
we have eight characters of control so

768
00:38:01,010 --> 00:38:06,349
there is one value for that very first

769
00:38:03,380 --> 00:38:11,030
character that never escapes the bit

770
00:38:06,349 --> 00:38:13,730
blender you see here if I start with the

771
00:38:11,030 --> 00:38:15,680
value the binary value of one as the

772
00:38:13,730 --> 00:38:18,410
first character of a string that I'm

773
00:38:15,680 --> 00:38:21,230
hashing it never escapes the bit blender

774
00:38:18,410 --> 00:38:23,930
and because of that when I find one of

775
00:38:21,230 --> 00:38:27,940
these zeros when I find one of these

776
00:38:23,930 --> 00:38:31,098
zeros here you can see that I can now

777
00:38:27,940 --> 00:38:34,010
bring in the value that got shifted over

778
00:38:31,099 --> 00:38:36,650
by seven and start to reroute through

779
00:38:34,010 --> 00:38:38,809
that exact same sequence and because

780
00:38:36,650 --> 00:38:42,650
this is a reproducible thing I'm able to

781
00:38:38,809 --> 00:38:44,960
copy this you know take my sequence put

782
00:38:42,650 --> 00:38:47,119
that special character and then start

783
00:38:44,960 --> 00:38:51,770
copying my sequence again and again and

784
00:38:47,119 --> 00:38:53,930
again and with this with some brute

785
00:38:51,770 --> 00:38:56,359
forcing kind of the same strategy that

786
00:38:53,930 --> 00:38:58,549
we used before with brute forcing we

787
00:38:56,359 --> 00:39:01,790
were able I was able to find easily

788
00:38:58,549 --> 00:39:04,250
sixteen examples of these little code

789
00:39:01,790 --> 00:39:07,970
islands these null points that let me

790
00:39:04,250 --> 00:39:11,839
start to mix and match them and so by by

791
00:39:07,970 --> 00:39:13,160
taking just eight of these and mixing

792
00:39:11,839 --> 00:39:17,210
and matching them in different orders

793
00:39:13,160 --> 00:39:18,890
you can get four billion collisions into

794
00:39:17,210 --> 00:39:21,050
a single bucket in a hash tape

795
00:39:18,890 --> 00:39:24,230
you can be like just hash to the exact

796
00:39:21,050 --> 00:39:26,360
same thing four billion times and this

797
00:39:24,230 --> 00:39:28,490
works literally as fast as your computer

798
00:39:26,360 --> 00:39:31,010
can work if I wanted to I could make

799
00:39:28,490 --> 00:39:33,370
this 17 18 I could generate these

800
00:39:31,010 --> 00:39:35,750
collisions at will

801
00:39:33,370 --> 00:39:38,000
this is what it looks like in the

802
00:39:35,750 --> 00:39:40,940
beginning on the left hand side that's

803
00:39:38,000 --> 00:39:43,070
Python with just regular average case

804
00:39:40,940 --> 00:39:46,340
input and on the right hand side that's

805
00:39:43,070 --> 00:39:47,900
stuff with collisions so when the hash

806
00:39:46,340 --> 00:39:50,390
tables are small it's kind of pretty

807
00:39:47,900 --> 00:39:52,580
close this pretty similar but as you see

808
00:39:50,390 --> 00:39:54,470
as the hash table gets bigger you start

809
00:39:52,580 --> 00:39:57,170
to see that the stuff with collisions is

810
00:39:54,470 --> 00:39:58,819
barely moving it's crawling while the

811
00:39:57,170 --> 00:40:01,820
one without collisions is able to keep

812
00:39:58,820 --> 00:40:04,280
on going and keep on going this gets

813
00:40:01,820 --> 00:40:07,460
worse this gets so much worse this is a

814
00:40:04,280 --> 00:40:10,930
graph that shows on the bottom this dots

815
00:40:07,460 --> 00:40:14,870
in blue that's the average insertion

816
00:40:10,930 --> 00:40:17,779
time for just random input and you see

817
00:40:14,870 --> 00:40:21,200
the one that rises that's with malicious

818
00:40:17,780 --> 00:40:25,070
input and so with only 50,000 Keys

819
00:40:21,200 --> 00:40:27,410
you're able to consume minutes of CPU

820
00:40:25,070 --> 00:40:30,470
usage and that's not even getting

821
00:40:27,410 --> 00:40:33,589
started we have easily four billion keys

822
00:40:30,470 --> 00:40:36,259
that we can send to a server you can

823
00:40:33,590 --> 00:40:38,420
absolutely using a couple packets take a

824
00:40:36,260 --> 00:40:40,790
machine down and have it just like I'm

825
00:40:38,420 --> 00:40:42,620
sorry I'm processing JSON and this is

826
00:40:40,790 --> 00:40:44,930
the thing that underlies the

827
00:40:42,620 --> 00:40:47,810
communication protocols of almost

828
00:40:44,930 --> 00:40:51,500
everything every Python seats you out

829
00:40:47,810 --> 00:40:54,170
there but like you know honestly Python

830
00:40:51,500 --> 00:40:57,770
fix this nine years ago we can't fault

831
00:40:54,170 --> 00:40:59,780
them for it this is research but like

832
00:40:57,770 --> 00:41:05,630
honestly anyone here have not yet gotten

833
00:40:59,780 --> 00:41:08,270
around to moving on to Python 3 3 you're

834
00:41:05,630 --> 00:41:10,460
not the only one Empire literally does

835
00:41:08,270 --> 00:41:13,550
not run under a modern version of Python

836
00:41:10,460 --> 00:41:16,100
you can only run python version version

837
00:41:13,550 --> 00:41:19,520
to seven you can absolutely take down

838
00:41:16,100 --> 00:41:21,170
Python with one of these things take

839
00:41:19,520 --> 00:41:25,060
down Empire with one of these attacks it

840
00:41:21,170 --> 00:41:27,290
is like so fast and so efficient so

841
00:41:25,060 --> 00:41:29,570
that's the protocol layer but let's talk

842
00:41:27,290 --> 00:41:32,330
about that the platform weakness is like

843
00:41:29,570 --> 00:41:34,670
what if rewrote completely

844
00:41:32,330 --> 00:41:37,610
empire you can have some things like

845
00:41:34,670 --> 00:41:39,920
ever launched an empire listener and see

846
00:41:37,610 --> 00:41:43,090
this little bit on the bottom left talks

847
00:41:39,920 --> 00:41:47,120
about flask or something like that

848
00:41:43,090 --> 00:41:49,550
well Empire does all of its HTTP

849
00:41:47,120 --> 00:41:52,130
analysis all of its HT to be hosting and

850
00:41:49,550 --> 00:41:55,450
this popular runtime called flask it's

851
00:41:52,130 --> 00:42:00,290
an extremely popular lightweight Python

852
00:41:55,450 --> 00:42:02,779
HTTP hosting engine there is a huge

853
00:42:00,290 --> 00:42:08,720
security vulnerability on their home

854
00:42:02,780 --> 00:42:17,510
page four lines of code it's huge

855
00:42:08,720 --> 00:42:19,009
let's show what it might be so let's

856
00:42:17,510 --> 00:42:22,480
just make sure my Empire listener is

857
00:42:19,010 --> 00:42:22,480
still doing good still doing good

858
00:42:27,270 --> 00:42:32,369
now one of the first things you might

859
00:42:29,220 --> 00:42:34,740
want to do in testing a you know web

860
00:42:32,369 --> 00:42:36,210
hosting framework is I might want to say

861
00:42:34,740 --> 00:42:38,040
like I'm gonna connect up to an endpoint

862
00:42:36,210 --> 00:42:41,940
and I'm just gonna forget to disconnect

863
00:42:38,040 --> 00:42:43,470
what happens if I do that so in this

864
00:42:41,940 --> 00:42:48,590
example I've got a bit of a PowerShell

865
00:42:43,470 --> 00:42:48,589
script that's you've seen nothing

866
00:42:55,570 --> 00:42:59,530
well that's good because I didn't want

867
00:42:57,850 --> 00:43:01,360
you to see that anyways so I've got a

868
00:42:59,530 --> 00:43:04,420
PowerShell script and I'm just going to

869
00:43:01,360 --> 00:43:08,140
start connecting to that Python listener

870
00:43:04,420 --> 00:43:10,480
and not disconnect like website should

871
00:43:08,140 --> 00:43:14,379
be able to do something like that right

872
00:43:10,480 --> 00:43:20,580
so I can go back to using my Empire and

873
00:43:14,380 --> 00:43:23,500
I can see what agents I've got maybe not

874
00:43:20,580 --> 00:43:25,560
Empire is completely wedged I can't

875
00:43:23,500 --> 00:43:28,300
break out of it

876
00:43:25,560 --> 00:43:30,810
any client trying to connect to this

877
00:43:28,300 --> 00:43:34,180
Empire listener not going to happen

878
00:43:30,810 --> 00:43:39,910
maybe he tries to figure out who I am

879
00:43:34,180 --> 00:43:42,399
see he's this whole instance of the Oh F

880
00:43:39,910 --> 00:43:44,020
is broken you cannot launch any

881
00:43:42,400 --> 00:43:48,490
processes programs

882
00:43:44,020 --> 00:43:52,300
nobody can connect ridiculous this is

883
00:43:48,490 --> 00:43:57,069
with one powershell instance on one

884
00:43:52,300 --> 00:43:59,490
machine in web not even a minute couple

885
00:43:57,070 --> 00:43:59,490
seconds

886
00:44:05,710 --> 00:44:11,410
and this is not a new vulnerability

887
00:44:09,190 --> 00:44:15,190
people have been pointing out issues in

888
00:44:11,410 --> 00:44:18,160
flasks for years now but the issue is

889
00:44:15,190 --> 00:44:20,770
flask says we're not a development HTTP

890
00:44:18,160 --> 00:44:22,480
server we're not gonna fix denial of

891
00:44:20,770 --> 00:44:25,810
service vulnerabilities against flask

892
00:44:22,480 --> 00:44:29,380
because use of real production HTTP

893
00:44:25,810 --> 00:44:33,279
server and not us they're emphatically

894
00:44:29,380 --> 00:44:36,010
against fixing these things by the way

895
00:44:33,280 --> 00:44:39,040
the flask instance now what it does is

896
00:44:36,010 --> 00:44:40,620
it parses all JSON by default whether

897
00:44:39,040 --> 00:44:43,480
you ask for it or not

898
00:44:40,620 --> 00:44:45,940
flask is being hosted your you're

899
00:44:43,480 --> 00:44:48,160
vulnerable to any of this dis JSON

900
00:44:45,940 --> 00:44:53,610
denial of service straight-up IP

901
00:44:48,160 --> 00:44:57,250
connectivity so warning about don't use

902
00:44:53,610 --> 00:44:59,040
flask when a server you care about how's

903
00:44:57,250 --> 00:45:01,270
that going

904
00:44:59,040 --> 00:45:03,670
no tenable has done some interesting

905
00:45:01,270 --> 00:45:07,020
research recently about detecting

906
00:45:03,670 --> 00:45:11,080
Believe It or Not attackers will put up

907
00:45:07,020 --> 00:45:13,180
Empire stagers see two instances on the

908
00:45:11,080 --> 00:45:15,460
Internet host of services Amazon

909
00:45:13,180 --> 00:45:17,470
whatever Azure and they'll put them up

910
00:45:15,460 --> 00:45:19,420
there and tenable has done some research

911
00:45:17,470 --> 00:45:22,180
with shodhan and things like that of

912
00:45:19,420 --> 00:45:25,840
being able to find all Empire listeners

913
00:45:22,180 --> 00:45:27,220
on the internet turns out you know when

914
00:45:25,840 --> 00:45:30,910
they did this research there was there's

915
00:45:27,220 --> 00:45:34,569
hundreds of them and when I just checked

916
00:45:30,910 --> 00:45:37,690
recently there is 21 unauthenticated

917
00:45:34,570 --> 00:45:40,840
client right here get literally take

918
00:45:37,690 --> 00:45:44,350
down every single Empire listener on the

919
00:45:40,840 --> 00:45:47,890
entire internet absolutely I'm not

920
00:45:44,350 --> 00:45:52,360
saying to do it I'm not saying it hasn't

921
00:45:47,890 --> 00:45:54,609
been done and the thing is we're at a

922
00:45:52,360 --> 00:45:56,410
point now we've we've this isn't about

923
00:45:54,610 --> 00:45:58,750
bashing on Empire this has been like a

924
00:45:56,410 --> 00:46:01,450
really fun trip up and down the stack

925
00:45:58,750 --> 00:46:03,130
but today we're talking about what can

926
00:46:01,450 --> 00:46:05,410
we do with this information right we

927
00:46:03,130 --> 00:46:06,670
know about honey pots we know that

928
00:46:05,410 --> 00:46:09,850
there's been a bunch of good research on

929
00:46:06,670 --> 00:46:12,850
honey pots but honey BOTS now we have

930
00:46:09,850 --> 00:46:18,040
some the ability to start to dynamically

931
00:46:12,850 --> 00:46:19,140
make our code respond to to what an

932
00:46:18,040 --> 00:46:21,900
attacker might

933
00:46:19,140 --> 00:46:24,839
might not want and so let's take a look

934
00:46:21,900 --> 00:46:26,700
at one really quick demo that we could

935
00:46:24,840 --> 00:46:29,700
do to start to extract things from these

936
00:46:26,700 --> 00:46:31,169
these clients so I showed you here that

937
00:46:29,700 --> 00:46:33,689
we could put the stager into the

938
00:46:31,170 --> 00:46:37,380
PowerShell ISE we could absolutely put a

939
00:46:33,690 --> 00:46:39,480
breakpoint there and see hmm what it's

940
00:46:37,380 --> 00:46:41,130
about to do but the problem is at the

941
00:46:39,480 --> 00:46:43,080
very end it pipes in to invoke

942
00:46:41,130 --> 00:46:46,560
expression and that's a PowerShell

943
00:46:43,080 --> 00:46:48,270
command but once it gets into a parish

944
00:46:46,560 --> 00:46:52,320
shell command we no longer have

945
00:46:48,270 --> 00:46:55,259
debugging ability but we can redefine

946
00:46:52,320 --> 00:46:56,670
the invoke expression command lit we can

947
00:46:55,260 --> 00:46:59,130
write a new function in powershell

948
00:46:56,670 --> 00:47:00,360
called invoke expression and this is

949
00:46:59,130 --> 00:47:02,430
where we can start to apply some

950
00:47:00,360 --> 00:47:04,860
additional intelligence in this example

951
00:47:02,430 --> 00:47:07,230
I can take that dynamic content mm-hmm

952
00:47:04,860 --> 00:47:09,750
and I can write it to a disk into a file

953
00:47:07,230 --> 00:47:12,450
I can evaluate that file decide whether

954
00:47:09,750 --> 00:47:14,340
I want it to run or not and then this

955
00:47:12,450 --> 00:47:17,759
version of invoke expression runs the

956
00:47:14,340 --> 00:47:20,640
file I can do things like dynamic

957
00:47:17,760 --> 00:47:22,410
content modification we're given

958
00:47:20,640 --> 00:47:23,670
attacker input I can change it to

959
00:47:22,410 --> 00:47:26,730
something that suits me better

960
00:47:23,670 --> 00:47:29,070
one thing that I've done in experiments

961
00:47:26,730 --> 00:47:31,710
like this is that some of these stagers

962
00:47:29,070 --> 00:47:35,130
will disable PowerShell logging well you

963
00:47:31,710 --> 00:47:36,390
can just eliminate that part the thing

964
00:47:35,130 --> 00:47:39,240
that I think is really amazing though is

965
00:47:36,390 --> 00:47:40,500
dynamic debugging I showed you the

966
00:47:39,240 --> 00:47:43,470
debugging that we were doing with

967
00:47:40,500 --> 00:47:45,720
PowerShell and it supports commands I

968
00:47:43,470 --> 00:47:48,359
can set PS breakpoint and all this kind

969
00:47:45,720 --> 00:47:51,240
of stuff well here's an example where I

970
00:47:48,360 --> 00:47:54,060
can say it went the first script that I

971
00:47:51,240 --> 00:47:56,069
hit so that little one there set these

972
00:47:54,060 --> 00:47:58,890
breakpoints the second scripts that I

973
00:47:56,070 --> 00:48:00,270
hit set these breakpoints and I can be

974
00:47:58,890 --> 00:48:02,700
setting breakpoints into the invoke

975
00:48:00,270 --> 00:48:05,940
shell command changing content as I want

976
00:48:02,700 --> 00:48:12,029
and so let's give a little quick demo of

977
00:48:05,940 --> 00:48:14,940
that so I wrote this super lame module

978
00:48:12,030 --> 00:48:16,140
called a Paramecium

979
00:48:14,940 --> 00:48:18,210
I've even forget what it's called I was

980
00:48:16,140 --> 00:48:20,100
like oh that's a fun name there's like

981
00:48:18,210 --> 00:48:23,750
Harry Potter has a spell for making

982
00:48:20,100 --> 00:48:23,750
things appear so that's what I called it

983
00:48:24,050 --> 00:48:28,140
so this is the same thing that we did

984
00:48:26,220 --> 00:48:31,529
before and we're gonna run this now

985
00:48:28,140 --> 00:48:38,558
under right

986
00:48:31,529 --> 00:48:40,690
again with the computer is it was boring

987
00:48:38,559 --> 00:48:43,420
typing anyways okay so this is I'm gonna

988
00:48:40,690 --> 00:48:45,609
about to run it now what this does is it

989
00:48:43,420 --> 00:48:46,930
sets a bunch of breakpoints this is the

990
00:48:45,609 --> 00:48:48,759
break point where it's just about to

991
00:48:46,930 --> 00:48:53,499
invoke content I'm good with that so

992
00:48:48,759 --> 00:48:55,299
I'll continue this is a part in Empire

993
00:48:53,499 --> 00:48:57,669
where it sets the initial agent

994
00:48:55,299 --> 00:49:00,009
information back so I can take a look at

995
00:48:57,670 --> 00:49:03,099
this dollar sign I this is the data

996
00:49:00,009 --> 00:49:06,359
structure that Empire uses to know what

997
00:49:03,099 --> 00:49:06,359
the agent is but I can say

998
00:49:16,500 --> 00:49:21,460
maybe this isn't Windows 10 this is like

999
00:49:19,060 --> 00:49:28,360
Windows Linux on the desktop and the one

1000
00:49:21,460 --> 00:49:37,600
thing that it does also is it also puts

1001
00:49:28,360 --> 00:49:45,820
into bytes and I can continue run that

1002
00:49:37,600 --> 00:49:46,810
guy now I can see here another agent

1003
00:49:45,820 --> 00:49:50,320
checked in and that's the one that I

1004
00:49:46,810 --> 00:49:52,450
just ran so I can interact with this

1005
00:49:50,320 --> 00:49:54,940
thing and I can check out the info and

1006
00:49:52,450 --> 00:49:59,259
you see here now it thinks that I'm

1007
00:49:54,940 --> 00:50:01,660
running Linux on the desktop 2019 not

1008
00:49:59,260 --> 00:50:13,690
bad what if I'm wondering is this

1009
00:50:01,660 --> 00:50:15,750
another guy from the FBI so this is

1010
00:50:13,690 --> 00:50:18,130
awesome we can absolutely control

1011
00:50:15,750 --> 00:50:19,630
anything the thing to remember here is

1012
00:50:18,130 --> 00:50:22,150
that agents when they get onto your

1013
00:50:19,630 --> 00:50:23,950
machine they're under your control

1014
00:50:22,150 --> 00:50:26,800
you're the defenders you have the

1015
00:50:23,950 --> 00:50:29,230
capability to do whatever you want maybe

1016
00:50:26,800 --> 00:50:31,390
you want to start sending back output

1017
00:50:29,230 --> 00:50:32,880
that looks like you know what's an

1018
00:50:31,390 --> 00:50:35,770
attack you're gonna do when they see IP

1019
00:50:32,880 --> 00:50:38,710
versus Financial based filenames are

1020
00:50:35,770 --> 00:50:41,620
they after finances are they after IP so

1021
00:50:38,710 --> 00:50:46,740
it's the world is your oyster with with

1022
00:50:41,620 --> 00:50:46,740
debugging and honey budding thank you

1023
00:50:49,880 --> 00:50:51,940
you

