1
00:21:29,090 --> 00:21:35,928
your handy dandy PowerShell ISE open and

2
00:21:33,080 --> 00:21:38,539
what I'm gonna be demoing to you now is

3
00:21:35,929 --> 00:21:40,480
how many okay so how many of you are

4
00:21:38,539 --> 00:21:42,850
familiar with internal monologue

5
00:21:40,480 --> 00:21:46,129
okay so internal monologue is

6
00:21:42,850 --> 00:21:49,908
essentially a offensive tool that allows

7
00:21:46,129 --> 00:21:53,689
you to get the current users net ntlm B

8
00:21:49,909 --> 00:21:55,700
to hash from doing an RPC call to LSS

9
00:21:53,690 --> 00:21:57,889
that's the very I butchered that

10
00:21:55,700 --> 00:21:59,929
explanation you should probably take a

11
00:21:57,889 --> 00:22:01,070
look at the github rep oh that explains

12
00:21:59,929 --> 00:22:04,429
it in detail

13
00:22:01,070 --> 00:22:06,168
Elad Shamir did an awesome write-up on

14
00:22:04,429 --> 00:22:07,279
how this actually works so you should

15
00:22:06,169 --> 00:22:08,419
probably take a look at that as well so

16
00:22:07,279 --> 00:22:10,669
what I'm gonna be doing and I'm

17
00:22:08,419 --> 00:22:14,330
embedding the internal monologue DLL

18
00:22:10,669 --> 00:22:17,360
which is a dotnet assembly okay in iron

19
00:22:14,330 --> 00:22:19,668
in iron Python script okay I'm then

20
00:22:17,360 --> 00:22:22,969
taking that iron Python script embedding

21
00:22:19,669 --> 00:22:25,249
that into PowerShell and then I'm

22
00:22:22,970 --> 00:22:27,619
invoking ironpython from PowerShell and

23
00:22:25,249 --> 00:22:28,999
executing the Iron Python script so

24
00:22:27,619 --> 00:22:30,470
that's that's exactly what I'm going to

25
00:22:28,999 --> 00:22:33,499
be showing you and again this is all

26
00:22:30,470 --> 00:22:35,059
possible because all of these all of

27
00:22:33,499 --> 00:22:37,759
these languages and all of these

28
00:22:35,059 --> 00:22:40,460
techniques are based based upon C sharp

29
00:22:37,759 --> 00:22:41,480
and the.net so they're all interoperable

30
00:22:40,460 --> 00:22:44,210
with each other so it doesn't matter

31
00:22:41,480 --> 00:22:45,950
what language you choose as long as it's

32
00:22:44,210 --> 00:22:47,450
a dotnet language you can embed it

33
00:22:45,950 --> 00:22:49,519
within PowerShell you can embed it at

34
00:22:47,450 --> 00:22:51,799
anything you want okay so this is the

35
00:22:49,519 --> 00:22:53,480
internal monologue DLL this is just some

36
00:22:51,799 --> 00:22:57,830
really badly written code that

37
00:22:53,480 --> 00:23:00,769
decompresses the DLL and on base64 is it

38
00:22:57,830 --> 00:23:02,299
we then call assembly that load which is

39
00:23:00,769 --> 00:23:03,710
that magic function that I just talked

40
00:23:02,299 --> 00:23:06,559
to you about which loads it directly

41
00:23:03,710 --> 00:23:09,080
into memory and then we literally just

42
00:23:06,559 --> 00:23:10,999
take we can literally from then on just

43
00:23:09,080 --> 00:23:14,210
call the namespaces that we defined

44
00:23:10,999 --> 00:23:16,759
within that internal monologue DLL and

45
00:23:14,210 --> 00:23:19,580
then execute the actual internal

46
00:23:16,759 --> 00:23:21,710
monologue attack okay and these are the

47
00:23:19,580 --> 00:23:24,049
four deals that I just told you about so

48
00:23:21,710 --> 00:23:26,149
we got the ironpython DLL the microsoft

49
00:23:24,049 --> 00:23:27,830
scripting Microsoft dynamic I'm Python

50
00:23:26,149 --> 00:23:30,168
those get automatically loaded when

51
00:23:27,830 --> 00:23:32,540
PowerShell executed the script and then

52
00:23:30,169 --> 00:23:35,810
down here

53
00:23:32,540 --> 00:23:37,460
we do engine that executes which takes

54
00:23:35,810 --> 00:23:39,860
that ironpython code that I just showed

55
00:23:37,460 --> 00:23:43,550
you and actually executes sit through

56
00:23:39,860 --> 00:23:44,840
powershell europe you're all with me so

57
00:23:43,550 --> 00:23:49,820
far okay

58
00:23:44,840 --> 00:23:50,679
sweet so you execute this and there you

59
00:23:49,820 --> 00:23:56,480
go

60
00:23:50,680 --> 00:23:58,970
so we've executed the powershell script

61
00:23:56,480 --> 00:24:01,730
would then executed ironpython which

62
00:23:58,970 --> 00:24:07,910
then executed the internal monologue dll

63
00:24:01,730 --> 00:24:10,400
and this is my current users net and net

64
00:24:07,910 --> 00:24:12,440
until mb to hash one thing to note about

65
00:24:10,400 --> 00:24:15,080
this particular attack if you were admin

66
00:24:12,440 --> 00:24:17,120
I can actually downgrade it can perform

67
00:24:15,080 --> 00:24:18,740
like a downgrade attack so if I were

68
00:24:17,120 --> 00:24:21,530
admin here and I executed this I would

69
00:24:18,740 --> 00:24:23,030
have gotten in at ntlm v 1 hash which I

70
00:24:21,530 --> 00:24:25,190
can then submit like to services like

71
00:24:23,030 --> 00:24:27,710
cracked SH which basically have created

72
00:24:25,190 --> 00:24:29,570
like every rainbow tables for DES and

73
00:24:27,710 --> 00:24:31,910
you'll automatically instantly get the

74
00:24:29,570 --> 00:24:35,360
clear text password for that hash which

75
00:24:31,910 --> 00:24:39,560
i think is really really cool alright so

76
00:24:35,360 --> 00:24:41,240
that's just one example of and yeah and

77
00:24:39,560 --> 00:24:47,659
just bear with me because it's gonna get

78
00:24:41,240 --> 00:24:49,490
weirder that's just one example of like

79
00:24:47,660 --> 00:24:52,690
embedding payloads within one another

80
00:24:49,490 --> 00:24:54,680
right so let's talk about pooling now

81
00:24:52,690 --> 00:24:57,380
because by far

82
00:24:54,680 --> 00:24:59,960
boo Lang in my opinion is the most

83
00:24:57,380 --> 00:25:02,660
useful of these languages for offensive

84
00:24:59,960 --> 00:25:05,170
purposes for a mostly a couple of

85
00:25:02,660 --> 00:25:08,030
reasons one their documentation is

86
00:25:05,170 --> 00:25:08,720
awesome which is very rare to find in

87
00:25:08,030 --> 00:25:11,660
these languages

88
00:25:08,720 --> 00:25:13,610
ironpython is not as well-documented as

89
00:25:11,660 --> 00:25:14,900
bullying and considering nobody has ever

90
00:25:13,610 --> 00:25:18,530
heard about bullying before that is

91
00:25:14,900 --> 00:25:22,430
amazing you can find it at that at that

92
00:25:18,530 --> 00:25:24,350
link at github and the reason why I like

93
00:25:22,430 --> 00:25:26,960
it so much too is because it's basically

94
00:25:24,350 --> 00:25:29,330
like if Python and c-sharp had a baby

95
00:25:26,960 --> 00:25:31,340
and that's boo lang

96
00:25:29,330 --> 00:25:35,300
so it's heavily inspired by Python

97
00:25:31,340 --> 00:25:38,750
syntax and you can do basically it you

98
00:25:35,300 --> 00:25:41,290
can just call c-sharp net api's directly

99
00:25:38,750 --> 00:25:43,400
through lang and this is an example code

100
00:25:41,290 --> 00:25:45,020
hopefully you can all read that if not

101
00:25:43,400 --> 00:25:45,560
i'll be showing it to you bigger in the

102
00:25:45,020 --> 00:25:49,100
demo

103
00:25:45,560 --> 00:25:50,629
got so hopefully you'll read that but in

104
00:25:49,100 --> 00:25:51,949
this example code what we're doing is

105
00:25:50,630 --> 00:25:54,680
we're calling the mini dump right dump

106
00:25:51,950 --> 00:25:56,210
function which allows us to dump memory

107
00:25:54,680 --> 00:25:58,310
and specifically we're dumping the elf

108
00:25:56,210 --> 00:26:00,110
SAS process here so we're manually

109
00:25:58,310 --> 00:26:01,730
dumping memory of the alsace process

110
00:26:00,110 --> 00:26:04,370
through the mini dump right thumb

111
00:26:01,730 --> 00:26:06,980
function which is a native function that

112
00:26:04,370 --> 00:26:08,479
you can use to dump memory and then you

113
00:26:06,980 --> 00:26:10,310
can take that dump file and then parse

114
00:26:08,480 --> 00:26:12,230
it offline with me me cats to get clear

115
00:26:10,310 --> 00:26:13,550
text credentials from that okay so this

116
00:26:12,230 --> 00:26:16,060
is a perfect example of like how to

117
00:26:13,550 --> 00:26:18,980
weaponize this stuff the best part about

118
00:26:16,060 --> 00:26:21,139
Lu Lang and this is a really really big

119
00:26:18,980 --> 00:26:24,260
deal is that it can call native

120
00:26:21,140 --> 00:26:27,950
functions but those native functions are

121
00:26:24,260 --> 00:26:29,690
all truly in-memory okay so like for

122
00:26:27,950 --> 00:26:31,730
example if you called add type in

123
00:26:29,690 --> 00:26:34,640
PowerShell it will leave artifacts on

124
00:26:31,730 --> 00:26:35,960
disks not with bool and if you call

125
00:26:34,640 --> 00:26:37,490
native function with blank

126
00:26:35,960 --> 00:26:39,380
everything is done in memory everything

127
00:26:37,490 --> 00:26:40,880
is truly in memory and you can still

128
00:26:39,380 --> 00:26:43,160
call native function so this is the

129
00:26:40,880 --> 00:26:44,900
equivalent of basically compiling

130
00:26:43,160 --> 00:26:45,560
c-sharp through Roselyn if you're

131
00:26:44,900 --> 00:26:48,080
familiar with that

132
00:26:45,560 --> 00:26:50,480
Roselyn is a way of dynamically

133
00:26:48,080 --> 00:26:52,399
compiling c-sharp and accessing it on

134
00:26:50,480 --> 00:26:53,840
the fly this is a the equivalent of

135
00:26:52,400 --> 00:26:57,230
doing it with rosin only that it's in

136
00:26:53,840 --> 00:26:59,620
Python and well somewhat Python so like

137
00:26:57,230 --> 00:27:02,330
a hybrid and it's a scripting language

138
00:26:59,620 --> 00:27:05,090
which is in my mind it's a sort of a big

139
00:27:02,330 --> 00:27:07,460
deal so again these you can get these

140
00:27:05,090 --> 00:27:09,919
examples some of the demos I'm about to

141
00:27:07,460 --> 00:27:11,750
show you from that and one repo under

142
00:27:09,920 --> 00:27:13,190
run bouth that's CS which is the c-sharp

143
00:27:11,750 --> 00:27:14,990
version so we're embedding bula and

144
00:27:13,190 --> 00:27:16,670
c-sharp in that one and then invoke

145
00:27:14,990 --> 00:27:18,560
jump-scare that ps1 I thought that was

146
00:27:16,670 --> 00:27:23,000
kind of cute because you know boo VOC

147
00:27:18,560 --> 00:27:25,610
jump-scare okay only me I guess okay so

148
00:27:23,000 --> 00:27:27,590
and then we're embedding boo in into

149
00:27:25,610 --> 00:27:28,820
PowerShell and then we're gonna in this

150
00:27:27,590 --> 00:27:29,840
particular case that I'm gonna die in

151
00:27:28,820 --> 00:27:32,030
this demo I'm going to show you now

152
00:27:29,840 --> 00:27:34,220
we're injecting shell code through boo

153
00:27:32,030 --> 00:27:41,960
to pop calc because we all got a pop cow

154
00:27:34,220 --> 00:27:43,700
and also okay boo requires three dotnet

155
00:27:41,960 --> 00:27:45,470
assemblies to run so you got boo lying

156
00:27:43,700 --> 00:27:47,570
that DLL blue line that compiler that

157
00:27:45,470 --> 00:27:50,260
DLL blowing that parser that DLL so this

158
00:27:47,570 --> 00:27:52,879
is this is again this is like where my

159
00:27:50,260 --> 00:27:53,990
knowledge of this is a part of this I

160
00:27:52,880 --> 00:27:57,410
still don't completely understand how

161
00:27:53,990 --> 00:27:59,330
this is possible but technically boolong

162
00:27:57,410 --> 00:28:00,920
that the boo Lang requires those three

163
00:27:59,330 --> 00:28:02,929
Assemblies but when you compile it

164
00:28:00,920 --> 00:28:04,430
through the actual compiler which I'm

165
00:28:02,930 --> 00:28:04,940
gonna be talking to you in about in a

166
00:28:04,430 --> 00:28:06,920
second

167
00:28:04,940 --> 00:28:10,370
it doesn't need those I'm not exactly

168
00:28:06,920 --> 00:28:12,860
sure why but if you embed it it does

169
00:28:10,370 --> 00:28:15,409
require those if you compile it it

170
00:28:12,860 --> 00:28:16,729
doesn't and it doesn't embed the DLL and

171
00:28:15,410 --> 00:28:18,350
to do anything like that because I

172
00:28:16,730 --> 00:28:21,110
disassembled it I'm not exactly sure why

173
00:28:18,350 --> 00:28:23,750
this works but that's just something to

174
00:28:21,110 --> 00:28:25,490
know and it's a very important thing to

175
00:28:23,750 --> 00:28:26,690
note because there's other implications

176
00:28:25,490 --> 00:28:28,580
to that whatever been talking about in a

177
00:28:26,690 --> 00:28:30,380
second so in PowerShell

178
00:28:28,580 --> 00:28:32,840
you literally just call assembly that

179
00:28:30,380 --> 00:28:34,640
load on those three dll's and that's all

180
00:28:32,840 --> 00:28:36,560
you really need to do to embed boolong

181
00:28:34,640 --> 00:28:37,790
and PowerShell and in c-sharp you could

182
00:28:36,560 --> 00:28:39,590
just hook the assembly that resolve

183
00:28:37,790 --> 00:28:42,050
event and then at that point your worlds

184
00:28:39,590 --> 00:28:48,699
your world's your oyster so I'm gonna be

185
00:28:42,050 --> 00:28:48,700
downloading a pulang payload right now

186
00:28:52,780 --> 00:29:08,379
let's see here okay so okay fine I'm

187
00:29:02,750 --> 00:29:12,080
gonna go over here go into here

188
00:29:08,380 --> 00:29:22,840
PowerShell window oh boy

189
00:29:12,080 --> 00:29:22,840
okay make this huge okay so I got my

190
00:29:23,680 --> 00:29:29,150
invoke jump-scare script here I'm gonna

191
00:29:26,630 --> 00:29:31,190
import that into my powershell session

192
00:29:29,150 --> 00:29:32,660
and actually it let's before I do that

193
00:29:31,190 --> 00:29:34,730
let's take a look at the code here so

194
00:29:32,660 --> 00:29:37,090
we're completely understanding what I'm

195
00:29:34,730 --> 00:29:37,090
doing

196
00:29:40,220 --> 00:29:47,620
and though jump-scare okay so we got our

197
00:29:46,549 --> 00:29:51,080
three dll's

198
00:29:47,620 --> 00:29:53,539
tubulin dll's this is just shellcode

199
00:29:51,080 --> 00:29:57,710
that I got from MSM venom which pops

200
00:29:53,539 --> 00:30:00,830
calc it's pretty straightforward once we

201
00:29:57,710 --> 00:30:04,879
load those three dll's we then have

202
00:30:00,830 --> 00:30:07,908
access to the bulan compiler it's it

203
00:30:04,879 --> 00:30:09,709
does compile stuff in like it's an

204
00:30:07,909 --> 00:30:13,039
engine but they call it bullet and

205
00:30:09,710 --> 00:30:14,570
compiler so that's just yeah you'll find

206
00:30:13,039 --> 00:30:16,700
that - like the terminology varies from

207
00:30:14,570 --> 00:30:19,399
language to language so in this

208
00:30:16,700 --> 00:30:21,379
particular case I am executing blue line

209
00:30:19,399 --> 00:30:23,000
code from a separate file on this right

210
00:30:21,379 --> 00:30:24,709
but you don't even need to do that you

211
00:30:23,000 --> 00:30:25,909
can actually embed like the arm Python

212
00:30:24,710 --> 00:30:27,940
example that I just showed you the blue

213
00:30:25,909 --> 00:30:31,639
line code within powershell itself and

214
00:30:27,940 --> 00:30:32,960
then you just a couple of statements

215
00:30:31,639 --> 00:30:34,789
here that just says hey i want to

216
00:30:32,960 --> 00:30:36,769
compile it in memory don't eat don't do

217
00:30:34,789 --> 00:30:39,320
anything on disk and then you run the

218
00:30:36,769 --> 00:30:41,779
assembly and then you call the main

219
00:30:39,320 --> 00:30:44,320
function of the blue line code which

220
00:30:41,779 --> 00:30:48,820
executes s-- the actual shell code okay

221
00:30:44,320 --> 00:30:51,918
so let's do that real quick invokes

222
00:30:48,820 --> 00:30:58,519
jump-scare and then you should pass it

223
00:30:51,919 --> 00:31:02,259
if I recall correctly the just nothing

224
00:30:58,519 --> 00:31:02,259
okay let's just try let's just try that

225
00:31:06,800 --> 00:31:10,940
compiling executing and then there's

226
00:31:09,920 --> 00:31:14,330
countdown here

227
00:31:10,940 --> 00:31:16,670
and there you go so you can see from the

228
00:31:14,330 --> 00:31:18,409
output here like it took the blank

229
00:31:16,670 --> 00:31:20,270
source code compiled that executed it

230
00:31:18,410 --> 00:31:22,280
injected it in memory using one of the

231
00:31:20,270 --> 00:31:23,810
it there's like three method in shell

232
00:31:22,280 --> 00:31:25,430
code injection methods in that one blue

233
00:31:23,810 --> 00:31:28,429
line file which we can actually take a

234
00:31:25,430 --> 00:31:31,220
look at real quick so you can see that

235
00:31:28,430 --> 00:31:38,500
it's actually pretty pretty similar to

236
00:31:31,220 --> 00:31:38,500
what you'd expect from Python quick

237
00:31:39,970 --> 00:31:44,150
there you go so we just defined a class

238
00:31:42,350 --> 00:31:46,820
this is all blue line a blue line class

239
00:31:44,150 --> 00:31:48,410
we import all of the native methods that

240
00:31:46,820 --> 00:31:50,600
we need to inject shell code this isn't

241
00:31:48,410 --> 00:31:51,740
using it like the cue user EPC if you're

242
00:31:50,600 --> 00:31:52,939
familiar with a that's one method of

243
00:31:51,740 --> 00:31:54,290
injecting shell code they make up the

244
00:31:52,940 --> 00:31:56,600
inject self and then we got the inject

245
00:31:54,290 --> 00:31:57,740
remote so depending on what method you

246
00:31:56,600 --> 00:31:59,240
want to inject you can choose one of

247
00:31:57,740 --> 00:32:00,290
those and again like you don't need to

248
00:31:59,240 --> 00:32:01,430
have this on a separate file you can

249
00:32:00,290 --> 00:32:04,520
just embed it in the PowerShell script

250
00:32:01,430 --> 00:32:13,340
itself so I think that's pretty cool and

251
00:32:04,520 --> 00:32:14,900
it's also really weird and again let's

252
00:32:13,340 --> 00:32:16,459
just there's a reminder the reason why

253
00:32:14,900 --> 00:32:19,250
we're doing this in the first place is

254
00:32:16,460 --> 00:32:20,900
because there is no insight into the

255
00:32:19,250 --> 00:32:23,090
dotnet framework right there's no way of

256
00:32:20,900 --> 00:32:25,520
hooking into with like exception of a

257
00:32:23,090 --> 00:32:27,590
couple of things like etw hooking into

258
00:32:25,520 --> 00:32:29,629
the dotnet framework to view all of

259
00:32:27,590 --> 00:32:33,500
these all of this dynamic code that's

260
00:32:29,630 --> 00:32:35,630
being run okay so you can take the power

261
00:32:33,500 --> 00:32:37,340
of powershell embed it with another

262
00:32:35,630 --> 00:32:40,280
language and just get around all that

263
00:32:37,340 --> 00:32:41,780
usually it should be it's just it really

264
00:32:40,280 --> 00:32:45,200
is as straightforward as that as of

265
00:32:41,780 --> 00:32:46,550
right now at least so clear script clear

266
00:32:45,200 --> 00:32:49,520
script there's a fun one actually

267
00:32:46,550 --> 00:32:51,649
discovered this last month and it's an

268
00:32:49,520 --> 00:32:53,360
official Microsoft project so clear

269
00:32:51,650 --> 00:32:55,720
script is literally made from the

270
00:32:53,360 --> 00:32:58,189
description it literally is made to add

271
00:32:55,720 --> 00:32:59,660
scripting capabilities to your dotnet

272
00:32:58,190 --> 00:33:02,840
program okay

273
00:32:59,660 --> 00:33:06,380
so what's very very interesting about

274
00:33:02,840 --> 00:33:10,550
this though is that you can call J

275
00:33:06,380 --> 00:33:14,390
script and VB script from clear script

276
00:33:10,550 --> 00:33:16,310
if that makes sense so by default on

277
00:33:14,390 --> 00:33:17,720
Windows you can access J script and V

278
00:33:16,310 --> 00:33:19,370
script from powershell you can do it

279
00:33:17,720 --> 00:33:20,130
through windows script host thing but

280
00:33:19,370 --> 00:33:24,000
using

281
00:33:20,130 --> 00:33:25,830
script for some reason it seems like

282
00:33:24,000 --> 00:33:27,990
it's not doing any of that and uses its

283
00:33:25,830 --> 00:33:30,149
own runtime to parse jscript and

284
00:33:27,990 --> 00:33:32,850
vbscript what that means is that Windows

285
00:33:30,150 --> 00:33:34,470
Defender for example at least from what

286
00:33:32,850 --> 00:33:37,980
I understand about it as of right now

287
00:33:34,470 --> 00:33:41,130
and from what I've seen is not able to

288
00:33:37,980 --> 00:33:42,720
detect like the squiggly - if doobly-doo

289
00:33:41,130 --> 00:33:44,669
attack if you're familiar with that sub

290
00:33:42,720 --> 00:33:47,820
T's work basically you're downloading an

291
00:33:44,669 --> 00:33:49,200
SCT file using jscript it is not able to

292
00:33:47,820 --> 00:33:53,070
detect any of that because there are no

293
00:33:49,200 --> 00:33:55,409
cooks in place right now in order for AM

294
00:33:53,070 --> 00:33:57,270
Z to actually get in there and inspect

295
00:33:55,409 --> 00:34:00,690
what you're doing through embedded

296
00:33:57,270 --> 00:34:03,330
jscript to clear scripts okay it also

297
00:34:00,690 --> 00:34:04,799
supports the v8 high-performance

298
00:34:03,330 --> 00:34:06,960
JavaScript engine which is also really

299
00:34:04,799 --> 00:34:10,259
interesting but he needs a lot more

300
00:34:06,960 --> 00:34:12,869
simplest for that and this is like an

301
00:34:10,260 --> 00:34:15,030
example of some c-sharp code that you

302
00:34:12,869 --> 00:34:17,280
can use to embed clear script within

303
00:34:15,030 --> 00:34:19,109
c-sharp and we're just calling like W

304
00:34:17,280 --> 00:34:21,590
script shell ActiveX objects W scripts

305
00:34:19,109 --> 00:34:25,609
shoulder which will execute a command

306
00:34:21,590 --> 00:34:28,830
and I'm gonna be demoing a clear script

307
00:34:25,609 --> 00:34:30,750
PowerShell payload right now that

308
00:34:28,830 --> 00:34:36,000
basically downloads a squiggly-doo

309
00:34:30,750 --> 00:34:38,310
squiggly-doo file a CT file ok and loads

310
00:34:36,000 --> 00:34:39,929
that in memory and pops notepad so that

311
00:34:38,310 --> 00:34:42,389
you get an you get an idea of like the

312
00:34:39,929 --> 00:34:47,668
capabilities of this thing what's really

313
00:34:42,389 --> 00:34:51,000
interesting though is that you can

314
00:34:47,668 --> 00:34:53,969
expose the entire CLR to jscript

315
00:34:51,000 --> 00:34:56,550
using this way so what that means is

316
00:34:53,969 --> 00:34:59,549
that you can now call native functions

317
00:34:56,550 --> 00:35:01,650
from G script through clear scripts if

318
00:34:59,550 --> 00:35:04,950
that makes sense and there's a lot of

319
00:35:01,650 --> 00:35:06,600
power from if I do get that working one

320
00:35:04,950 --> 00:35:07,890
day there's a lot of power there because

321
00:35:06,600 --> 00:35:10,830
that would be as if you had like a

322
00:35:07,890 --> 00:35:12,779
dotnet to js4 any of the red teamers and

323
00:35:10,830 --> 00:35:15,869
I know what that meant to Jas is it's

324
00:35:12,780 --> 00:35:18,450
basically a way of calling c-sharp from

325
00:35:15,869 --> 00:35:20,970
J script and usually we use something

326
00:35:18,450 --> 00:35:22,799
from the James Forshaw which implemented

327
00:35:20,970 --> 00:35:24,720
this tool that allows you to do that but

328
00:35:22,800 --> 00:35:26,609
with this method you would be using like

329
00:35:24,720 --> 00:35:28,230
a Microsoft utility to go about doing

330
00:35:26,609 --> 00:35:31,230
that which would sort of be I think a

331
00:35:28,230 --> 00:35:33,450
big deal I'm not exactly sure if like if

332
00:35:31,230 --> 00:35:35,490
I'm thinking about this right but

333
00:35:33,450 --> 00:35:36,808
it's still an interesting way of going

334
00:35:35,490 --> 00:35:44,368
about it so I'm just gonna demo that

335
00:35:36,809 --> 00:35:47,160
real quick wrong one but okay hold on

336
00:35:44,369 --> 00:35:51,890
alright so I got my little HTTP server

337
00:35:47,160 --> 00:35:56,308
up here I'm going to go back to my

338
00:35:51,890 --> 00:35:58,379
PowerShell ISE script go to invoke clear

339
00:35:56,309 --> 00:35:59,640
scripts so we're embedding you download

340
00:35:58,380 --> 00:36:01,260
clear script again this is all open

341
00:35:59,640 --> 00:36:06,509
source downloads true could compile it

342
00:36:01,260 --> 00:36:07,829
embed it load the assembly and then you

343
00:36:06,510 --> 00:36:10,079
have access to this clear script engine

344
00:36:07,829 --> 00:36:11,900
you can also call VB script from kinship

345
00:36:10,079 --> 00:36:15,559
in this case I'm just using J script

346
00:36:11,900 --> 00:36:19,980
yeah the words are flying I know and

347
00:36:15,559 --> 00:36:21,809
we're calling get object which allows us

348
00:36:19,980 --> 00:36:25,309
to download that payload which I'm

349
00:36:21,809 --> 00:36:33,260
hosting on a HTTP server and this

350
00:36:25,309 --> 00:36:33,260
hopefully won't trigger MZ

351
00:36:35,640 --> 00:36:40,980
and there you go pop notepad and just to

352
00:36:39,240 --> 00:36:43,080
give you an idea so like okay so that's

353
00:36:40,980 --> 00:36:44,940
doing it this way right what happens if

354
00:36:43,080 --> 00:36:50,480
I try doing that just straight up with

355
00:36:44,940 --> 00:36:52,860
PowerShell what would happen then I am

356
00:36:50,480 --> 00:36:55,710
there's no way I'm typing that out live

357
00:36:52,860 --> 00:36:57,300
so I copy pasting this and there you go

358
00:36:55,710 --> 00:37:01,530
malicious script has been blocked by

359
00:36:57,300 --> 00:37:03,300
your antivirus software so by going like

360
00:37:01,530 --> 00:37:08,430
sort of by embedding clear script within

361
00:37:03,300 --> 00:37:10,230
PowerShell we get around AM Z but if we

362
00:37:08,430 --> 00:37:12,509
just straight-up called a script from

363
00:37:10,230 --> 00:37:14,610
PowerShell and downloaded that file it

364
00:37:12,510 --> 00:37:15,750
gets blocked by the AV so this is this

365
00:37:14,610 --> 00:37:18,030
is where I'm trying to go with this

366
00:37:15,750 --> 00:37:19,440
right so we're sort of operational we're

367
00:37:18,030 --> 00:37:21,420
trying to get around like the

368
00:37:19,440 --> 00:37:23,730
operational downsides of using C sharp

369
00:37:21,420 --> 00:37:27,840
tradecraft and going back to using

370
00:37:23,730 --> 00:37:30,330
PowerShell only not executing our

371
00:37:27,840 --> 00:37:34,400
malicious code with PowerShell but with

372
00:37:30,330 --> 00:37:34,400
an embedded language if that makes sense

373
00:37:34,940 --> 00:37:41,270
let's go back to the presentation and

374
00:37:37,170 --> 00:37:41,270
also how much time do I have left

375
00:37:42,680 --> 00:37:49,529
okay all right I'm gonna try to go

376
00:37:45,740 --> 00:37:51,839
somewhat fast okay so these are all of

377
00:37:49,530 --> 00:37:53,850
the dotnet languages third party thought

378
00:37:51,840 --> 00:37:55,290
new languages that I am aware of as of

379
00:37:53,850 --> 00:37:56,759
right now and there's some really

380
00:37:55,290 --> 00:37:59,730
interesting ones so if you like coding

381
00:37:56,760 --> 00:38:01,590
in Lua for example moon sharp and and

382
00:37:59,730 --> 00:38:03,900
Lua or your friend because you can embed

383
00:38:01,590 --> 00:38:06,140
the Lua programming language within

384
00:38:03,900 --> 00:38:10,260
powershell for example if you wanted to

385
00:38:06,140 --> 00:38:11,460
jint is another github project that

386
00:38:10,260 --> 00:38:13,080
allows you to bet JavaScript within

387
00:38:11,460 --> 00:38:14,490
powershell well it's really interesting

388
00:38:13,080 --> 00:38:15,630
this is something I'm not experimented

389
00:38:14,490 --> 00:38:17,459
with yet so I'll leave this as an

390
00:38:15,630 --> 00:38:19,200
exercise to you because I don't know

391
00:38:17,460 --> 00:38:21,150
what will happen I'm assuming it won't

392
00:38:19,200 --> 00:38:22,710
work but it would be really interesting

393
00:38:21,150 --> 00:38:26,550
to see what would happen if you threw a

394
00:38:22,710 --> 00:38:29,010
beef hook at an embedded JavaScript

395
00:38:26,550 --> 00:38:30,360
runtime and PowerShell I'm assuming it

396
00:38:29,010 --> 00:38:32,400
would break because it's not a browser

397
00:38:30,360 --> 00:38:33,720
but it still would be interesting it

398
00:38:32,400 --> 00:38:36,020
would be interesting to experiment with

399
00:38:33,720 --> 00:38:38,879
like the concept of beefing endpoints I

400
00:38:36,020 --> 00:38:40,470
think it's interesting dotnet web

401
00:38:38,880 --> 00:38:42,690
assembly this is something I'm gonna be

402
00:38:40,470 --> 00:38:46,799
keeping a close eye on allows you to

403
00:38:42,690 --> 00:38:49,110
execute web assemblies in memory through

404
00:38:46,800 --> 00:38:51,420
net how crazy is that

405
00:38:49,110 --> 00:38:54,330
I yeah don't even ask how this works

406
00:38:51,420 --> 00:38:55,860
because I have no clue and yeah what was

407
00:38:54,330 --> 00:38:57,360
similes in general I think is gonna be

408
00:38:55,860 --> 00:39:01,320
an interesting thing going forward from

409
00:38:57,360 --> 00:39:03,180
a red team perspective because I still

410
00:39:01,320 --> 00:39:05,820
have to read up on it and how everything

411
00:39:03,180 --> 00:39:07,109
works there but I think it's gonna be

412
00:39:05,820 --> 00:39:08,280
there's a lot of shenanigans that you

413
00:39:07,110 --> 00:39:10,680
could probably pull it with some web

414
00:39:08,280 --> 00:39:12,030
assemblies clear script jscript bb's tip

415
00:39:10,680 --> 00:39:13,410
in JavaScript so if you want to embed

416
00:39:12,030 --> 00:39:15,690
those languages clear script is also

417
00:39:13,410 --> 00:39:18,420
something that you can use ironpython to

418
00:39:15,690 --> 00:39:19,890
python - there's arm Python 3 which is

419
00:39:18,420 --> 00:39:21,660
still being worked on do not use it yet

420
00:39:19,890 --> 00:39:23,700
because it's not stable at all but

421
00:39:21,660 --> 00:39:25,740
Python that you can embed Python 3

422
00:39:23,700 --> 00:39:28,319
once that gets stable in net there's

423
00:39:25,740 --> 00:39:30,689
also Ruby whatever one embed Ruby there

424
00:39:28,320 --> 00:39:32,610
you go and then boola-boola is my farm

425
00:39:30,690 --> 00:39:36,720
though I think the most useful out of

426
00:39:32,610 --> 00:39:37,920
all of these as of right now so here's

427
00:39:36,720 --> 00:39:41,759
something I've never talked about before

428
00:39:37,920 --> 00:39:48,090
publicly these languages come built in

429
00:39:41,760 --> 00:39:49,140
with a compiler so every so usually all

430
00:39:48,090 --> 00:39:51,660
these languages have a standalone

431
00:39:49,140 --> 00:39:55,049
compiler what that means is that you can

432
00:39:51,660 --> 00:39:56,759
take any script and just compile it

433
00:39:55,050 --> 00:39:59,420
directly through the compiler they

434
00:39:56,760 --> 00:40:01,830
provide and then you can take that

435
00:39:59,420 --> 00:40:03,180
compiled code like compile executable

436
00:40:01,830 --> 00:40:05,040
and run it everywhere and it doesn't

437
00:40:03,180 --> 00:40:07,290
matter what dotnet version is installed

438
00:40:05,040 --> 00:40:08,880
it'll just run everywhere because it

439
00:40:07,290 --> 00:40:11,490
compiles it in intermediate language

440
00:40:08,880 --> 00:40:14,490
code which means it'll just run dotnet

441
00:40:11,490 --> 00:40:19,370
to.net 4.0 it'll just run everywhere so

442
00:40:14,490 --> 00:40:24,000
this is by far the easiest way to

443
00:40:19,370 --> 00:40:25,410
compile and run your dotnet code and i

444
00:40:24,000 --> 00:40:29,880
have okay i'm gonna demo this for you

445
00:40:25,410 --> 00:40:33,839
real quick so like if you don't want to

446
00:40:29,880 --> 00:40:36,420
embed stuff and just want to weaponize a

447
00:40:33,840 --> 00:40:38,640
real like a real quick blank script that

448
00:40:36,420 --> 00:40:40,050
you wrote this is the way to do it this

449
00:40:38,640 --> 00:40:42,060
is probably the way to do it because you

450
00:40:40,050 --> 00:40:43,560
don't have to you don't have to deal

451
00:40:42,060 --> 00:40:45,840
with the dll's you don't have to deal

452
00:40:43,560 --> 00:40:49,009
with embedding it with the resolving the

453
00:40:45,840 --> 00:40:54,360
dll's at runtime it's just pretty simple

454
00:40:49,010 --> 00:40:57,630
so I have my mini dump code here which I

455
00:40:54,360 --> 00:41:00,090
showed you before okay and this dumps

456
00:40:57,630 --> 00:41:02,760
else asks memory ok straight up just

457
00:41:00,090 --> 00:41:05,820
calls mini dump right up and just dull

458
00:41:02,760 --> 00:41:08,730
and just dumps else has memory to a file

459
00:41:05,820 --> 00:41:10,170
on disk right so what I want to be doing

460
00:41:08,730 --> 00:41:12,900
real quick is I'm gonna be modifying

461
00:41:10,170 --> 00:41:15,660
this in order to get it to compile so

462
00:41:12,900 --> 00:41:17,820
I'm going to make this a static function

463
00:41:15,660 --> 00:41:19,350
in order and that's going to be the

464
00:41:17,820 --> 00:41:21,750
compilers entry point because that's

465
00:41:19,350 --> 00:41:23,220
just how bullying works I also have to

466
00:41:21,750 --> 00:41:26,850
actually call that function somewhere

467
00:41:23,220 --> 00:41:27,959
and I'm gonna give it the arguments that

468
00:41:26,850 --> 00:41:33,060
we pass on the command line

469
00:41:27,960 --> 00:41:35,130
right so when this gets executed it'll

470
00:41:33,060 --> 00:41:36,090
go into the main function it's gonna the

471
00:41:35,130 --> 00:41:38,600
main functions going to receive the

472
00:41:36,090 --> 00:41:43,890
arguments that we pass through it and

473
00:41:38,600 --> 00:41:48,990
over here I am just going to say hey the

474
00:41:43,890 --> 00:41:50,790
main function needs to accept the

475
00:41:48,990 --> 00:41:55,020
arguments as a string array

476
00:41:50,790 --> 00:41:58,140
pretty simple and then down here I'm

477
00:41:55,020 --> 00:42:03,570
gonna say hey I want you to take the

478
00:41:58,140 --> 00:42:06,240
first argument and use that as the dump

479
00:42:03,570 --> 00:42:12,600
file name it's pretty simple right so we

480
00:42:06,240 --> 00:42:18,149
now have our code let's go over to the

481
00:42:12,600 --> 00:42:20,569
folder where I have gulang I'm gonna

482
00:42:18,150 --> 00:42:22,440
open the PowerShell window here and it's

483
00:42:20,570 --> 00:42:27,240
perfect that's awesome

484
00:42:22,440 --> 00:42:32,460
and now I am going to use the bulan

485
00:42:27,240 --> 00:42:35,129
compiler which is not who i see but as

486
00:42:32,460 --> 00:42:36,960
buu see that XE and if you take a look

487
00:42:35,130 --> 00:42:38,670
at the help menu here you'll see that it

488
00:42:36,960 --> 00:42:41,250
has a lot of interesting a lot of

489
00:42:38,670 --> 00:42:43,680
interesting options one of them is you

490
00:42:41,250 --> 00:42:45,480
can embed entire directories you can

491
00:42:43,680 --> 00:42:50,700
embed arbitrary data you can also select

492
00:42:45,480 --> 00:42:51,720
the platform to compile to and those are

493
00:42:50,700 --> 00:42:53,669
pretty much all the interesting

494
00:42:51,720 --> 00:42:55,618
functions that I would say oh and you

495
00:42:53,670 --> 00:42:58,590
can also set the target file so if you

496
00:42:55,619 --> 00:43:01,140
wanted to compile to a win X E or an X E

497
00:42:58,590 --> 00:43:03,570
or like a DLL you can do that through -

498
00:43:01,140 --> 00:43:04,980
through the compiler as well so I'm

499
00:43:03,570 --> 00:43:08,100
going to specify that oh and I'm gonna

500
00:43:04,980 --> 00:43:10,170
say the compiled output should be mem

501
00:43:08,100 --> 00:43:14,230
dump that XZ and then I'm going to give

502
00:43:10,170 --> 00:43:15,970
it the path to my code

503
00:43:14,230 --> 00:43:19,599
that I just got that I just modified

504
00:43:15,970 --> 00:43:25,689
here if I remember where it is desktop

505
00:43:19,599 --> 00:43:28,089
and then mini dum p2 and there you go

506
00:43:25,690 --> 00:43:29,770
that's warning it's fine ignore that

507
00:43:28,089 --> 00:43:36,540
that's just because I'm bad at coding

508
00:43:29,770 --> 00:43:38,079
and we have mem Dom that XE ready to go

509
00:43:36,540 --> 00:43:41,410
so there you go

510
00:43:38,079 --> 00:43:44,260
so that's our compiled executable from

511
00:43:41,410 --> 00:43:45,759
boolean code right so I just want to

512
00:43:44,260 --> 00:43:48,579
point this out like if you have to do

513
00:43:45,760 --> 00:43:50,109
this with c-sharp it would take a lot

514
00:43:48,579 --> 00:43:52,690
more time to do this with c-sharp

515
00:43:50,109 --> 00:43:55,089
because I just edited a bhoot something

516
00:43:52,690 --> 00:43:56,680
through sublime text as opposed to

517
00:43:55,089 --> 00:43:58,480
installing Visual Studio getting

518
00:43:56,680 --> 00:44:01,180
familiar with Visual Studio getting

519
00:43:58,480 --> 00:44:03,609
familiar with c-sharp and then getting

520
00:44:01,180 --> 00:44:07,240
this ready so it's a lot lot faster and

521
00:44:03,609 --> 00:44:09,009
easier and allows you to like write

522
00:44:07,240 --> 00:44:10,779
really quick payloads on the fly that

523
00:44:09,010 --> 00:44:15,250
will just run everywhere and just to

524
00:44:10,780 --> 00:44:21,280
give you an idea that this works I guess

525
00:44:15,250 --> 00:44:23,890
ok let's do it this way let's power

526
00:44:21,280 --> 00:44:31,500
shows admin because I need that to dump

527
00:44:23,890 --> 00:44:31,500
memory perfect

528
00:44:39,060 --> 00:44:42,060
okay

529
00:44:48,090 --> 00:44:57,600
we have our memnon program here and

530
00:44:50,370 --> 00:45:00,210
we're gonna give it converge perfect dum

531
00:44:57,600 --> 00:45:04,350
to converge that dump and if we go to

532
00:45:00,210 --> 00:45:07,470
see the see folder here you can see that

533
00:45:04,350 --> 00:45:08,759
we have our memory dump down here forty

534
00:45:07,470 --> 00:45:10,620
megabytes which is pretty standard for

535
00:45:08,760 --> 00:45:12,270
memory dump so there you go

536
00:45:10,620 --> 00:45:14,819
so we've dump memory using boo lang

537
00:45:12,270 --> 00:45:16,259
which is the this is a lot faster than

538
00:45:14,820 --> 00:45:21,240
going through visual studio and doing

539
00:45:16,260 --> 00:45:23,010
all of that in c-sharp and again if you

540
00:45:21,240 --> 00:45:25,709
take that and run it on a Windows 7

541
00:45:23,010 --> 00:45:27,150
machine it'll or two because is not

542
00:45:25,710 --> 00:45:28,290
embedded you've compiled it through the

543
00:45:27,150 --> 00:45:38,420
standalone compile and it'll work

544
00:45:28,290 --> 00:45:42,690
everywhere okay so weaponizing boo let's

545
00:45:38,420 --> 00:45:45,570
check the time here because okay I'm

546
00:45:42,690 --> 00:45:47,520
pushing it I don't think I'll have time

547
00:45:45,570 --> 00:45:49,110
to done with this for you now but silent

548
00:45:47,520 --> 00:45:52,140
Trinity is a project that I've written

549
00:45:49,110 --> 00:45:54,420
that tries to weaponize a lot of these

550
00:45:52,140 --> 00:45:57,060
concepts so this is the c2 framework

551
00:45:54,420 --> 00:45:58,710
that I've built and essentially right

552
00:45:57,060 --> 00:46:02,460
now it uses bullying and ironpython a

553
00:45:58,710 --> 00:46:04,620
combination of both in order to actually

554
00:46:02,460 --> 00:46:05,760
run code in memory and there's a bunch

555
00:46:04,620 --> 00:46:07,500
of modules that would be interesting

556
00:46:05,760 --> 00:46:09,330
like if you do check it out there's a

557
00:46:07,500 --> 00:46:11,730
Mimi Katz module which is pretty crazy

558
00:46:09,330 --> 00:46:15,299
because it basically runs Mimi cats

559
00:46:11,730 --> 00:46:19,050
through an embedded ironpython engine

560
00:46:15,300 --> 00:46:20,940
which is embedded in PowerShell and then

561
00:46:19,050 --> 00:46:22,740
there's another stager that uses the MS

562
00:46:20,940 --> 00:46:25,620
build whitelisting technique it familiar

563
00:46:22,740 --> 00:46:27,060
that so if that's embedding c-sharp with

564
00:46:25,620 --> 00:46:28,710
an MS build file which is in building

565
00:46:27,060 --> 00:46:30,990
which is embedding ironpython

566
00:46:28,710 --> 00:46:34,170
which is then running Mimi cats it's

567
00:46:30,990 --> 00:46:36,750
pretty crazy but and it works I can't

568
00:46:34,170 --> 00:46:38,790
like surprisingly well so definitely

569
00:46:36,750 --> 00:46:41,490
check that out I've recently released

570
00:46:38,790 --> 00:46:43,440
recently like a few months ago an update

571
00:46:41,490 --> 00:46:45,569
for it it's gotten from the beer where

572
00:46:43,440 --> 00:46:49,050
stage two alpha so like things actually

573
00:46:45,570 --> 00:46:51,990
work now which is good I also all the c2

574
00:46:49,050 --> 00:46:54,500
comms are encrypted using elliptic curve

575
00:46:51,990 --> 00:46:57,299
diffie-hellman key exchange with H Mac

576
00:46:54,500 --> 00:46:59,760
so it's pretty it's pretty solid on the

577
00:46:57,300 --> 00:47:01,790
crypto side now it also has boo lang

578
00:46:59,760 --> 00:47:05,780
support so that allows us to call

579
00:47:01,790 --> 00:47:07,700
native methods directly from the situ

580
00:47:05,780 --> 00:47:08,720
from the actual situ framework which is

581
00:47:07,700 --> 00:47:10,549
really good so if you can take

582
00:47:08,720 --> 00:47:11,750
screenshots we can dump memory we can do

583
00:47:10,550 --> 00:47:12,470
all the stuff that I just showed you

584
00:47:11,750 --> 00:47:16,790
right now right

585
00:47:12,470 --> 00:47:18,680
also tab completes everything and you

586
00:47:16,790 --> 00:47:20,450
can customize the check-in interval and

587
00:47:18,680 --> 00:47:23,149
there's now help menu function which you

588
00:47:20,450 --> 00:47:28,669
know that comes in handy so let's talk

589
00:47:23,150 --> 00:47:30,910
about detection a bit probably the best

590
00:47:28,670 --> 00:47:34,190
way to go about detecting this is

591
00:47:30,910 --> 00:47:35,779
upgrading to dotnet 4.8 I think recently

592
00:47:34,190 --> 00:47:38,150
it came out of beta if I recall

593
00:47:35,780 --> 00:47:39,410
correctly so you can actually put

594
00:47:38,150 --> 00:47:43,520
probably put this in production right

595
00:47:39,410 --> 00:47:45,410
now the problem is anything less than

596
00:47:43,520 --> 00:47:48,650
dotnet 4.8 does not have an g

597
00:47:45,410 --> 00:47:50,720
integration and dotnet 4.5 and this is

598
00:47:48,650 --> 00:47:55,160
installed on every Windows 10 machine in

599
00:47:50,720 --> 00:47:57,980
existence so unless you manually update

600
00:47:55,160 --> 00:47:59,870
all of your endpoints net version you're

601
00:47:57,980 --> 00:48:02,720
not going to have the AM Z hooks

602
00:47:59,870 --> 00:48:04,190
necessary for it to try to detect this

603
00:48:02,720 --> 00:48:06,830
kind of stuff and again this is am G

604
00:48:04,190 --> 00:48:09,740
right so it's signature based detection

605
00:48:06,830 --> 00:48:11,270
for the most part so you have to take

606
00:48:09,740 --> 00:48:12,589
that with a sort of a grain of salt as

607
00:48:11,270 --> 00:48:14,810
well in terms of like detecting this

608
00:48:12,590 --> 00:48:17,060
there's also a bunch of projects which

609
00:48:14,810 --> 00:48:20,420
have come out thankfully to actually try

610
00:48:17,060 --> 00:48:22,850
to get data on all of this on all of the

611
00:48:20,420 --> 00:48:24,680
c-sharp tradecraft and which would allow

612
00:48:22,850 --> 00:48:26,240
you to detect some of this stuff as well

613
00:48:24,680 --> 00:48:27,919
so there's like collect net events for

614
00:48:26,240 --> 00:48:29,359
manifestation which is like proof of

615
00:48:27,920 --> 00:48:31,460
concept PowerShell code that you can use

616
00:48:29,360 --> 00:48:35,930
to detect etw logs which is basically

617
00:48:31,460 --> 00:48:37,400
the only known way I think that would

618
00:48:35,930 --> 00:48:38,060
allow you to collect this type of

619
00:48:37,400 --> 00:48:39,710
information

620
00:48:38,060 --> 00:48:42,110
there's also crabs in DW which is

621
00:48:39,710 --> 00:48:46,940
official Microsoft Project is this C++

622
00:48:42,110 --> 00:48:48,920
wrapper on etw but it's sort of like

623
00:48:46,940 --> 00:48:53,030
it's a wrapper so you'd have to actually

624
00:48:48,920 --> 00:48:54,680
build your own tool there's that silky

625
00:48:53,030 --> 00:48:56,780
DWO has come out recently from fireEye

626
00:48:54,680 --> 00:49:01,549
which is a really good option it's by

627
00:48:56,780 --> 00:49:04,610
far I think the most usable detection

628
00:49:01,550 --> 00:49:06,640
mechanism out there right now module

629
00:49:04,610 --> 00:49:09,110
monitor by a friend of mine the wove or

630
00:49:06,640 --> 00:49:10,819
he's got some really cool stuff he

631
00:49:09,110 --> 00:49:12,350
recently released donut which is

632
00:49:10,820 --> 00:49:13,700
essentially a way of taking a dotnet

633
00:49:12,350 --> 00:49:15,529
assembly and turning that into

634
00:49:13,700 --> 00:49:17,000
which is really really interesting you

635
00:49:15,530 --> 00:49:18,079
should take that check that out when you

636
00:49:17,000 --> 00:49:19,790
have a chance but he also has another

637
00:49:18,079 --> 00:49:24,470
thing called madhya monitor which allows

638
00:49:19,790 --> 00:49:26,750
you to get the data from etw itself and

639
00:49:24,470 --> 00:49:28,790
see what's being loaded into this

640
00:49:26,750 --> 00:49:32,150
current the process that it's running

641
00:49:28,790 --> 00:49:33,349
CLR the actual net runtime so there's

642
00:49:32,150 --> 00:49:34,970
there's ways around that there's also

643
00:49:33,349 --> 00:49:36,859
this awesome talk by Luke Jennings at

644
00:49:34,970 --> 00:49:38,990
blackhat eighteen memory resident

645
00:49:36,859 --> 00:49:43,250
implant code injections is alive as well

646
00:49:38,990 --> 00:49:44,839
as an awesome resource and counter cept

647
00:49:43,250 --> 00:49:46,940
actually released a blog about hunting

648
00:49:44,839 --> 00:49:48,770
for silent Trinity so like did they they

649
00:49:46,940 --> 00:49:51,200
put together a bunch of detection that

650
00:49:48,770 --> 00:49:51,759
you could probably use in an environment

651
00:49:51,200 --> 00:49:54,230
right now

652
00:49:51,760 --> 00:49:55,940
to detect the sound Trinity framework

653
00:49:54,230 --> 00:49:58,240
that I released so there's that oh well

654
00:49:55,940 --> 00:50:01,910
and big thanks to copper that I owe that

655
00:49:58,240 --> 00:50:03,770
compiled a lot of these resources as

656
00:50:01,910 --> 00:50:05,569
well but by far I think like the best

657
00:50:03,770 --> 00:50:10,069
way to go about detecting this stuff is

658
00:50:05,569 --> 00:50:12,558
etw logs and upgrading your your net

659
00:50:10,069 --> 00:50:14,150
version that is I think at least from my

660
00:50:12,559 --> 00:50:17,950
knowledge right now that is by far the

661
00:50:14,150 --> 00:50:20,390
best way also a really dead giveaway is

662
00:50:17,950 --> 00:50:22,189
so if you're not familiar with process

663
00:50:20,390 --> 00:50:24,098
Explorer sysinternals process Explorer

664
00:50:22,190 --> 00:50:27,680
it actually allows you to monitor

665
00:50:24,099 --> 00:50:29,329
assemblies loaded in current net

666
00:50:27,680 --> 00:50:32,690
processes right so this is the app

667
00:50:29,329 --> 00:50:35,950
domain of a silent Trinity stager that's

668
00:50:32,690 --> 00:50:38,390
running in memory you can clearly see

669
00:50:35,950 --> 00:50:41,808
that's fancy isn't it okay you can

670
00:50:38,390 --> 00:50:44,058
clearly see that the assembly boolong

671
00:50:41,809 --> 00:50:46,910
assemblies and the ironpython assemblies

672
00:50:44,059 --> 00:50:49,010
are first of all there but also they

673
00:50:46,910 --> 00:50:50,240
don't have an image backing so that

674
00:50:49,010 --> 00:50:52,940
means that they've been loaded in memory

675
00:50:50,240 --> 00:50:54,799
so I think that is by far like a really

676
00:50:52,940 --> 00:50:56,720
good giveaway in terms of just like

677
00:50:54,799 --> 00:50:58,660
c-sharp tradecraft in general I'm not

678
00:50:56,720 --> 00:51:01,910
exactly sure if there is a way of

679
00:50:58,660 --> 00:51:03,410
detecting if a current loaded assemblies

680
00:51:01,910 --> 00:51:05,899
or don't have an image backing on disk

681
00:51:03,410 --> 00:51:08,180
but this is by far dead giveaway and

682
00:51:05,900 --> 00:51:10,099
also like you know silent Trinity that's

683
00:51:08,180 --> 00:51:13,009
that's pretty that's pretty obvious but

684
00:51:10,099 --> 00:51:15,200
I think like in terms of detecting this

685
00:51:13,010 --> 00:51:17,630
stuff this is probably a really good way

686
00:51:15,200 --> 00:51:20,390
because I'm not a dotnet developer so I

687
00:51:17,630 --> 00:51:23,569
can't really speak to this but I'm not

688
00:51:20,390 --> 00:51:26,230
exactly aware of a lot of dotnet

689
00:51:23,569 --> 00:51:29,250
programs that actually load stuff

690
00:51:26,230 --> 00:51:31,839
from memory so this should not be a

691
00:51:29,250 --> 00:51:34,030
behavior that you commonly see so I

692
00:51:31,839 --> 00:51:38,049
think that that might be a pretty solid

693
00:51:34,030 --> 00:51:39,490
detection mechanism by itself also I'm

694
00:51:38,050 --> 00:51:44,160
in the middle of a complete rewrite of

695
00:51:39,490 --> 00:51:46,029
the tool because I hate myself so

696
00:51:44,160 --> 00:51:47,770
basically I'm going to be writing this

697
00:51:46,030 --> 00:51:49,180
thing from scratch it's gonna be team

698
00:51:47,770 --> 00:51:51,369
server base so if you're in the cobalt

699
00:51:49,180 --> 00:51:53,259
strike it's gonna be using WebSockets

700
00:51:51,369 --> 00:51:54,220
gonna be multi server multi client

701
00:51:53,260 --> 00:51:55,900
support it's going to be using

702
00:51:54,220 --> 00:51:57,520
WebSockets for real-time communication

703
00:51:55,900 --> 00:51:58,810
between the server and the client it's

704
00:51:57,520 --> 00:52:02,829
gonna have a lot more comms I actually

705
00:51:58,810 --> 00:52:04,630
have domain DNS or HTTP working as a

706
00:52:02,829 --> 00:52:05,829
communication method for the c2 implant

707
00:52:04,630 --> 00:52:08,349
which is I think it's really cool

708
00:52:05,829 --> 00:52:10,240
also WMI so if you're on an internal

709
00:52:08,349 --> 00:52:14,109
pentest WMI comes in handy as a c2

710
00:52:10,240 --> 00:52:15,700
mechanism where like they firewall their

711
00:52:14,109 --> 00:52:18,670
endpoints or they don't allow HTTP

712
00:52:15,700 --> 00:52:22,779
traffic so I got that and domain DNS

713
00:52:18,670 --> 00:52:24,550
over HTTP 80% their long term goal is to

714
00:52:22,780 --> 00:52:26,589
integrate a bunch of other tools that

715
00:52:24,550 --> 00:52:29,109
I've written over the years so that you

716
00:52:26,589 --> 00:52:31,270
have a single tool that can manage your

717
00:52:29,109 --> 00:52:34,089
infrastructure and that you can manage

718
00:52:31,270 --> 00:52:35,859
your internal pentest with I think that

719
00:52:34,089 --> 00:52:37,450
would be a really cool thing to have so

720
00:52:35,859 --> 00:52:38,859
you'd have Red Baron and crack map exec

721
00:52:37,450 --> 00:52:42,759
that would be integrated within this

722
00:52:38,859 --> 00:52:44,230
tool and you'd use it as a single tool

723
00:52:42,760 --> 00:52:46,630
to manage everything internal

724
00:52:44,230 --> 00:52:48,310
credentials journals Frank spraying

725
00:52:46,630 --> 00:52:49,869
credentials infrastructure deployment

726
00:52:48,310 --> 00:52:52,328
for red team's that is the long-term

727
00:52:49,869 --> 00:52:54,579
goal that is the pipe dream we'll see

728
00:52:52,329 --> 00:52:56,470
how far I get it to go that way and also

729
00:52:54,579 --> 00:52:59,230
Empire Metasploit compatibility would be

730
00:52:56,470 --> 00:53:01,270
really cool if I get a time around it

731
00:52:59,230 --> 00:53:03,760
and also some of the specter ops stuff

732
00:53:01,270 --> 00:53:06,609
that they released recently I'd love to

733
00:53:03,760 --> 00:53:08,980
get that to work through the sound

734
00:53:06,609 --> 00:53:10,119
Trinity team server at least that would

735
00:53:08,980 --> 00:53:11,589
be interesting to see if I can get that

736
00:53:10,119 --> 00:53:13,780
going and also support from our

737
00:53:11,589 --> 00:53:15,160
languages because it's really cool that

738
00:53:13,780 --> 00:53:16,630
you can just embed whatever language you

739
00:53:15,160 --> 00:53:18,879
want right so if your friend writes a

740
00:53:16,630 --> 00:53:21,910
Lua post exploitation script for some

741
00:53:18,880 --> 00:53:23,230
reason you can just use that within this

742
00:53:21,910 --> 00:53:24,399
framework and you're good to go you want

743
00:53:23,230 --> 00:53:27,160
you have a friend that writes ruby

744
00:53:24,400 --> 00:53:30,300
perfect and better like get compromised

745
00:53:27,160 --> 00:53:33,700
endpoint with a ruby sign on Trinity

746
00:53:30,300 --> 00:53:35,200
agent and you can run Ruby scripts that

747
00:53:33,700 --> 00:53:38,220
do all the post exploitation stuff we

748
00:53:35,200 --> 00:53:38,220
have a lone love and

749
00:53:38,589 --> 00:53:45,569
you can pillage all things questions

750
00:53:48,839 --> 00:54:02,330
alrighty okay thank you

751
00:53:53,240 --> 00:54:02,330
[Applause]

