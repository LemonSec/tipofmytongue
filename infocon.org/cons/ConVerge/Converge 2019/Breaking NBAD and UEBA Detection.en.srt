1
00:00:44,910 --> 00:01:00,209
there yeah all right so uh so this talk

2
00:00:57,330 --> 00:01:02,460
in 2014 I did never be able anomaly

3
00:01:00,210 --> 00:01:04,769
detection UVA are you bad as it was then

4
00:01:02,460 --> 00:01:06,830
you EBA now so I took the same Dec we

5
00:01:04,769 --> 00:01:09,600
did started with in 2014 to talk about

6
00:01:06,830 --> 00:01:10,710
the benefits of in bad and UVA and this

7
00:01:09,600 --> 00:01:13,979
talk we're gonna talk about how to break

8
00:01:10,710 --> 00:01:15,869
it how to break in bed how to break UVA

9
00:01:13,979 --> 00:01:19,550
and then how to mitigate against those

10
00:01:15,870 --> 00:01:23,400
attacks so a little bit about me and I

11
00:01:19,550 --> 00:01:26,039
was active duty Navy from 1995 through

12
00:01:23,400 --> 00:01:28,560
2005 I worked on Hornets for the

13
00:01:26,040 --> 00:01:30,390
beginning of that for deployed 9/11

14
00:01:28,560 --> 00:01:31,950
happened when in spun off the network

15
00:01:30,390 --> 00:01:33,300
security group got to be a founding

16
00:01:31,950 --> 00:01:36,950
member of the school of roots so I've

17
00:01:33,300 --> 00:01:40,350
won Def Con more than most human beings

18
00:01:36,950 --> 00:01:44,009
and then left did consulting work for

19
00:01:40,350 --> 00:01:46,229
DoD State Department also did product

20
00:01:44,009 --> 00:01:48,000
testing front world magazine for a

21
00:01:46,229 --> 00:01:51,060
number of years until that closed and

22
00:01:48,000 --> 00:01:53,280
journalism died I went to work for

23
00:01:51,060 --> 00:01:55,080
Lancope which is where I first spoke

24
00:01:53,280 --> 00:01:57,450
here at converge in the first years of

25
00:01:55,080 --> 00:02:01,220
converge and then left after the

26
00:01:57,450 --> 00:02:05,039
acquisition by Cisco to form wit food

27
00:02:01,220 --> 00:02:07,520
we're gonna hit on today is how does it

28
00:02:05,039 --> 00:02:10,530
matter how does UVA work very quickly

29
00:02:07,520 --> 00:02:12,720
the relationship between data poisoning

30
00:02:10,530 --> 00:02:14,520
baseline poisoning non-repudiation how

31
00:02:12,720 --> 00:02:16,470
to protect against those things we're

32
00:02:14,520 --> 00:02:19,200
gonna go into some specific attack

33
00:02:16,470 --> 00:02:22,500
scenarios and tactics and then we'll

34
00:02:19,200 --> 00:02:24,480
open up to QA this deck is up on Twitter

35
00:02:22,500 --> 00:02:26,190
so at Charles herring or if you go to

36
00:02:24,480 --> 00:02:27,810
Charles herring calm I'll take you to my

37
00:02:26,190 --> 00:02:32,490
LinkedIn page you can download the deck

38
00:02:27,810 --> 00:02:35,250
has the code in it for the exploits real

39
00:02:32,490 --> 00:02:38,040
quick on how we detect things in cyber

40
00:02:35,250 --> 00:02:40,830
security signature based detection is

41
00:02:38,040 --> 00:02:43,079
when you inspect the object for a known

42
00:02:40,830 --> 00:02:46,170
pattern there's an indicator compromised

43
00:02:43,080 --> 00:02:47,400
referenced in the food world would be

44
00:02:46,170 --> 00:02:49,170
like looking at your food and there's

45
00:02:47,400 --> 00:02:50,910
mold on it so you know what to look for

46
00:02:49,170 --> 00:02:53,519
you found it there's a pattern match and

47
00:02:50,910 --> 00:02:56,520
trigger on it behavioral based detection

48
00:02:53,520 --> 00:02:58,380
is when you look at the actions of the

49
00:02:56,520 --> 00:03:01,740
reference entities a host is doing

50
00:02:58,380 --> 00:03:03,480
something that's known bad and and you

51
00:03:01,740 --> 00:03:05,130
trigger honor or users doing something

52
00:03:03,480 --> 00:03:07,769
that's a known bad behavior even though

53
00:03:05,130 --> 00:03:10,560
you don't necessarily know why or what

54
00:03:07,770 --> 00:03:14,850
the campaign is an anomaly based

55
00:03:10,560 --> 00:03:16,710
detection is a deviation from normal you

56
00:03:14,850 --> 00:03:18,299
do machine learning that's how we define

57
00:03:16,710 --> 00:03:21,660
it today that comes in you look at

58
00:03:18,300 --> 00:03:22,260
patterns you assign a reason for that

59
00:03:21,660 --> 00:03:24,000
pattern

60
00:03:22,260 --> 00:03:26,579
it could be network scanning could be

61
00:03:24,000 --> 00:03:28,380
benign could be nefarious but

62
00:03:26,580 --> 00:03:31,050
essentially all of this was taken from a

63
00:03:28,380 --> 00:03:33,570
1986 paper written by dr. Dorothy

64
00:03:31,050 --> 00:03:35,490
Denning at the War College and it really

65
00:03:33,570 --> 00:03:37,590
hasn't changed that much marketing's

66
00:03:35,490 --> 00:03:38,970
mess with some of the words but these

67
00:03:37,590 --> 00:03:43,200
are the three detection methods we'll

68
00:03:38,970 --> 00:03:45,540
look at today known exploits are best

69
00:03:43,200 --> 00:03:47,730
caught by signature detection if you

70
00:03:45,540 --> 00:03:49,500
know what the hash is and the hash is

71
00:03:47,730 --> 00:03:52,200
matched you know what it is you know the

72
00:03:49,500 --> 00:03:55,410
exploit is very high fidelity in

73
00:03:52,200 --> 00:03:57,959
detecting detecting known exploits O'Dea

74
00:03:55,410 --> 00:04:00,750
are not yet known exploits or best to

75
00:03:57,959 --> 00:04:02,490
taste detected by behavioral and that

76
00:04:00,750 --> 00:04:04,860
the way that you're doing an X voice is

77
00:04:02,490 --> 00:04:07,740
the same but the payload or the

78
00:04:04,860 --> 00:04:10,050
subsequent behavior that comes after the

79
00:04:07,740 --> 00:04:12,150
exploit is net is the same right they're

80
00:04:10,050 --> 00:04:13,800
gonna encrypt your disk or they're going

81
00:04:12,150 --> 00:04:16,500
to delete files or they're going to

82
00:04:13,800 --> 00:04:19,049
exfiltrate data or something along the

83
00:04:16,500 --> 00:04:21,269
attack continuum when you're looking for

84
00:04:19,048 --> 00:04:23,280
anomaly detection you're talking about

85
00:04:21,269 --> 00:04:26,580
pattern changes that something normally

86
00:04:23,280 --> 00:04:28,979
happens a user normally shows up at a

87
00:04:26,580 --> 00:04:31,530
certain time logs in a certain time from

88
00:04:28,980 --> 00:04:33,360
a certain location and then deviations

89
00:04:31,530 --> 00:04:36,229
from those known patterns can tell you

90
00:04:33,360 --> 00:04:39,030
when human beings are acting differently

91
00:04:36,230 --> 00:04:44,400
which can be an indication of credential

92
00:04:39,030 --> 00:04:46,049
abuse or insider attack when in doing

93
00:04:44,400 --> 00:04:47,609
anomaly based detection you have to

94
00:04:46,050 --> 00:04:49,440
build baselines or no more another way

95
00:04:47,610 --> 00:04:54,480
of saying that is the baseline is the

96
00:04:49,440 --> 00:04:57,000
calculation of normal what is what is

97
00:04:54,480 --> 00:04:59,370
the normal time a user or a set of users

98
00:04:57,000 --> 00:05:01,169
should be logging in and it takes time

99
00:04:59,370 --> 00:05:04,530
to build these longer the baseline

100
00:05:01,169 --> 00:05:06,690
exists the more reliable the baseline is

101
00:05:04,530 --> 00:05:09,770
a supervised machine learning is looking

102
00:05:06,690 --> 00:05:11,940
at very specific data points and

103
00:05:09,770 --> 00:05:14,729
building metrics on those data points

104
00:05:11,940 --> 00:05:16,230
over time unsupervised machine learning

105
00:05:14,730 --> 00:05:19,290
is looking at all permutations and

106
00:05:16,230 --> 00:05:21,480
permeations of data to look for new

107
00:05:19,290 --> 00:05:23,480
things and new different different

108
00:05:21,480 --> 00:05:26,160
calculations that we didn't know before

109
00:05:23,480 --> 00:05:28,710
now we're behavioral anomaly detection

110
00:05:26,160 --> 00:05:30,870
came around in 2002 was the first time

111
00:05:28,710 --> 00:05:32,909
we started talking about that it

112
00:05:30,870 --> 00:05:34,800
generally works off of metadata because

113
00:05:32,910 --> 00:05:36,720
it's only building patterns you only

114
00:05:34,800 --> 00:05:38,550
need to know how many bytes are

115
00:05:36,720 --> 00:05:41,670
exchanged and so you can do most of that

116
00:05:38,550 --> 00:05:45,120
inside of the TCP header space and the

117
00:05:41,670 --> 00:05:47,750
advent of NetFlow IP fixie flow J flow

118
00:05:45,120 --> 00:05:50,670
all these are records that represent

119
00:05:47,750 --> 00:05:52,590
communications from routes which

120
00:05:50,670 --> 00:05:54,350
infrastructure became a really good

121
00:05:52,590 --> 00:05:57,630
place for this and it allowed

122
00:05:54,350 --> 00:05:59,310
visibility on horizontal communications

123
00:05:57,630 --> 00:06:03,330
or east-west communications inside the

124
00:05:59,310 --> 00:06:05,970
network their quantity or specific so

125
00:06:03,330 --> 00:06:07,229
how many packets how many bytes those

126
00:06:05,970 --> 00:06:09,120
types of things it doesn't really matter

127
00:06:07,230 --> 00:06:12,150
what's inside of the packet it doesn't

128
00:06:09,120 --> 00:06:15,360
matter that there's an exploit inside of

129
00:06:12,150 --> 00:06:17,039
the payload it matters how many payloads

130
00:06:15,360 --> 00:06:18,480
are occurring if you want to look at the

131
00:06:17,040 --> 00:06:21,900
pattern itself that would be a signature

132
00:06:18,480 --> 00:06:23,880
based detection sometimes you hear in

133
00:06:21,900 --> 00:06:26,760
battery if you're referred to as NetFlow

134
00:06:23,880 --> 00:06:29,520
security tools this is a list compiled

135
00:06:26,760 --> 00:06:32,820
by Gartner of different tools that do

136
00:06:29,520 --> 00:06:37,289
this - the bottom one I used to sell

137
00:06:32,820 --> 00:06:38,250
Cisco stealthWatch at the top when

138
00:06:37,290 --> 00:06:40,140
you're looking for what type of

139
00:06:38,250 --> 00:06:41,700
anomalies are in the wild right now

140
00:06:40,140 --> 00:06:43,680
inside of them bad programmers are

141
00:06:41,700 --> 00:06:46,320
looking for a service traffic threshold

142
00:06:43,680 --> 00:06:47,880
anomaly is how much web traffic is being

143
00:06:46,320 --> 00:06:49,830
exchanged between the Internet and the

144
00:06:47,880 --> 00:06:52,169
web servers how many how much data is

145
00:06:49,830 --> 00:06:54,810
accessed from the internal data stores

146
00:06:52,169 --> 00:06:58,260
those types of things same thing with

147
00:06:54,810 --> 00:07:02,430
Service Geographic traffic anomaly is we

148
00:06:58,260 --> 00:07:05,370
normally only get 100k of traffic to

149
00:07:02,430 --> 00:07:07,740
Tehran or some other geographic region

150
00:07:05,370 --> 00:07:09,900
in a period and now we have three times

151
00:07:07,740 --> 00:07:12,330
standard deviation of that traffic so

152
00:07:09,900 --> 00:07:14,789
there's an anomaly and where in the

153
00:07:12,330 --> 00:07:16,719
world we're receiving traffic data

154
00:07:14,789 --> 00:07:19,030
hoarding or data staging is

155
00:07:16,720 --> 00:07:20,830
a host or a group of hosts how much data

156
00:07:19,030 --> 00:07:23,229
do they conserve consume from the

157
00:07:20,830 --> 00:07:26,380
internal network and a given period

158
00:07:23,230 --> 00:07:28,090
normally add a data disclosure or

159
00:07:26,380 --> 00:07:29,950
exfiltration is how much does a host

160
00:07:28,090 --> 00:07:31,630
only sent out of the network to the

161
00:07:29,950 --> 00:07:34,330
Internet in a given day so those are

162
00:07:31,630 --> 00:07:36,090
very common types of baselines to build

163
00:07:34,330 --> 00:07:39,280
and detection that goes inside the

164
00:07:36,090 --> 00:07:40,960
anomaly detection UVA is an extension of

165
00:07:39,280 --> 00:07:42,219
it usually called you bad there was a

166
00:07:40,960 --> 00:07:44,590
division between network behavioral

167
00:07:42,220 --> 00:07:46,450
anomaly detection and user behavioral

168
00:07:44,590 --> 00:07:48,609
anomaly detection and now it's all

169
00:07:46,450 --> 00:07:51,400
really wrapped into a user entity

170
00:07:48,610 --> 00:07:53,500
behavioral analytics but it just looks

171
00:07:51,400 --> 00:07:56,080
at beyond looking at IP addresses and

172
00:07:53,500 --> 00:08:00,310
hosts you're now looking at the access

173
00:07:56,080 --> 00:08:04,409
of users to files host host host to user

174
00:08:00,310 --> 00:08:07,960
host to files this is a list compiled by

175
00:08:04,410 --> 00:08:10,150
Security Planet on stuff that's

176
00:08:07,960 --> 00:08:15,520
currently doing UVA

177
00:08:10,150 --> 00:08:16,690
today's was last year's paper things

178
00:08:15,520 --> 00:08:20,099
you're looking for there're like magic

179
00:08:16,690 --> 00:08:22,300
carpet attacks someone logging in from

180
00:08:20,100 --> 00:08:23,890
from China when they've never logged in

181
00:08:22,300 --> 00:08:25,240
from China before or the log different

182
00:08:23,890 --> 00:08:26,979
China and now they're logged in from the

183
00:08:25,240 --> 00:08:30,280
Detroit office so how do they move that

184
00:08:26,980 --> 00:08:32,530
fast physically across the globe a time

185
00:08:30,280 --> 00:08:33,760
of day users that log in at 8 o'clock in

186
00:08:32,530 --> 00:08:35,199
the morning from 8:00 to 10:00 every

187
00:08:33,760 --> 00:08:36,809
morning and now they're logging in at 3

188
00:08:35,200 --> 00:08:39,280
o'clock in the morning on a Saturday

189
00:08:36,809 --> 00:08:42,218
presents a potential type of anomaly

190
00:08:39,280 --> 00:08:44,020
needs to be addressed which host or

191
00:08:42,219 --> 00:08:45,070
users accessing if the host logs on the

192
00:08:44,020 --> 00:08:48,220
network and they're only hitting

193
00:08:45,070 --> 00:08:50,640
SharePoint and they're only hitting the

194
00:08:48,220 --> 00:08:53,650
Internet why are they now accessing

195
00:08:50,640 --> 00:08:56,439
routes which infrastructure or something

196
00:08:53,650 --> 00:08:59,020
along those lines what type of data are

197
00:08:56,440 --> 00:09:01,420
the accessing when you're looking at a

198
00:08:59,020 --> 00:09:03,850
user to file level access who's hitting

199
00:09:01,420 --> 00:09:05,560
the information that holds PII or source

200
00:09:03,850 --> 00:09:09,339
code or something along those lines who

201
00:09:05,560 --> 00:09:12,250
is accessing it and and how and as also

202
00:09:09,339 --> 00:09:15,880
service access if maybe they only had

203
00:09:12,250 --> 00:09:18,610
email LDAP web services and now they're

204
00:09:15,880 --> 00:09:20,710
starting to log into SSH or something

205
00:09:18,610 --> 00:09:25,330
else outside the pattern of a given user

206
00:09:20,710 --> 00:09:29,050
or a set of users so we're looking today

207
00:09:25,330 --> 00:09:30,100
is data poisoning weather most of these

208
00:09:29,050 --> 00:09:33,699
features within

209
00:09:30,100 --> 00:09:35,770
and you you EBA or not standalone

210
00:09:33,700 --> 00:09:38,880
products in general any more they are

211
00:09:35,770 --> 00:09:41,770
features of what we've called sim

212
00:09:38,880 --> 00:09:44,770
security incident event management tools

213
00:09:41,770 --> 00:09:46,569
over the years but there are a handful

214
00:09:44,770 --> 00:09:48,400
of stand-alone products things are

215
00:09:46,570 --> 00:09:51,310
looking at is map massification

216
00:09:48,400 --> 00:09:53,199
so what that generally means is my host

217
00:09:51,310 --> 00:09:56,319
or my user is doing something that

218
00:09:53,200 --> 00:09:58,780
various but then I generate data that

219
00:09:56,320 --> 00:10:01,150
says everybody's doing that thing so you

220
00:09:58,780 --> 00:10:03,699
can't pin it on me because it looks like

221
00:10:01,150 --> 00:10:06,340
every single user every single host is

222
00:10:03,700 --> 00:10:08,950
doing that so you can't isolate the data

223
00:10:06,340 --> 00:10:14,050
so it poisons the usefulness of the data

224
00:10:08,950 --> 00:10:16,710
in the system baseline boiling is an

225
00:10:14,050 --> 00:10:20,260
anomaly detection you're looking for and

226
00:10:16,710 --> 00:10:22,240
exceeding a defined baseline so when you

227
00:10:20,260 --> 00:10:24,850
boil the baseline as you expand the

228
00:10:22,240 --> 00:10:27,010
baseline over a period of time so that

229
00:10:24,850 --> 00:10:28,870
when you want to trigger the exploit the

230
00:10:27,010 --> 00:10:31,120
baseline has now grown to a place will

231
00:10:28,870 --> 00:10:32,980
allow you to get away with it and so

232
00:10:31,120 --> 00:10:34,420
that may be data staging where every day

233
00:10:32,980 --> 00:10:35,800
you're collecting a little bit more data

234
00:10:34,420 --> 00:10:38,020
a little bit more data from a set of

235
00:10:35,800 --> 00:10:39,880
hosts and then when you're ready you're

236
00:10:38,020 --> 00:10:42,960
finally ready to extract the real data

237
00:10:39,880 --> 00:10:45,790
you have the flexibility in the baseline

238
00:10:42,960 --> 00:10:47,770
attack masking is when you're doing one

239
00:10:45,790 --> 00:10:49,420
type of attack but then you generate

240
00:10:47,770 --> 00:10:52,300
fake records that make it look like

241
00:10:49,420 --> 00:10:54,640
something else that makes it and it's

242
00:10:52,300 --> 00:10:57,550
going to makes the respond or unable to

243
00:10:54,640 --> 00:11:00,040
determine which is which the ways of

244
00:10:57,550 --> 00:11:02,380
achieving these in this system that I'm

245
00:11:00,040 --> 00:11:03,910
going to show today or log spoofing so

246
00:11:02,380 --> 00:11:06,820
just different methods of generating

247
00:11:03,910 --> 00:11:09,689
fake records that poison the data to

248
00:11:06,820 --> 00:11:12,490
accomplish these these attack types or

249
00:11:09,690 --> 00:11:14,350
behavioral spoofing to where the things

250
00:11:12,490 --> 00:11:17,230
that are generating logs are tricked

251
00:11:14,350 --> 00:11:20,110
into thinking that you're performing the

252
00:11:17,230 --> 00:11:21,550
bad behavior couple places for

253
00:11:20,110 --> 00:11:23,890
generating traffic is either on a

254
00:11:21,550 --> 00:11:26,770
machine a VM container something you own

255
00:11:23,890 --> 00:11:28,449
inside the network or tricking a

256
00:11:26,770 --> 00:11:32,230
networking device into doing this for

257
00:11:28,450 --> 00:11:35,020
you as far as mitigation we're really

258
00:11:32,230 --> 00:11:37,360
talking about non repudiation and we

259
00:11:35,020 --> 00:11:39,310
have some hard core challenges and data

260
00:11:37,360 --> 00:11:41,410
collection we're still doing most of our

261
00:11:39,310 --> 00:11:44,029
data collection and cyber security over

262
00:11:41,410 --> 00:11:47,930
UDP and so there's no

263
00:11:44,029 --> 00:11:51,320
there's no checking of validity of that

264
00:11:47,930 --> 00:11:54,469
data you we can ship many technologies

265
00:11:51,320 --> 00:11:56,389
ship logs over TLS using client based

266
00:11:54,470 --> 00:11:57,860
authentication there's a lot of

267
00:11:56,389 --> 00:12:00,139
challenges with this one you have to

268
00:11:57,860 --> 00:12:03,430
maintain a PKI infrastructure to include

269
00:12:00,139 --> 00:12:06,649
revocation lists or doing that through

270
00:12:03,430 --> 00:12:08,959
OCSP it also has the potential of

271
00:12:06,649 --> 00:12:11,029
breaking the network because TCP has the

272
00:12:08,959 --> 00:12:12,649
downside of having a handshake and so if

273
00:12:11,029 --> 00:12:14,959
the exist the host that's supposed to be

274
00:12:12,649 --> 00:12:18,850
collecting the data goes down there can

275
00:12:14,959 --> 00:12:22,209
be a negative impact on the network some

276
00:12:18,850 --> 00:12:25,430
route switches do reverse path

277
00:12:22,209 --> 00:12:26,510
verification to deal with IP spoofing so

278
00:12:25,430 --> 00:12:29,060
you'll see I'll do a good bit of IP

279
00:12:26,510 --> 00:12:30,949
spoofing here in a second and so some of

280
00:12:29,060 --> 00:12:33,619
the devices this is the command from

281
00:12:30,949 --> 00:12:35,810
Cisco to enable on the interface is to

282
00:12:33,620 --> 00:12:37,639
verify that the host that's saying it is

283
00:12:35,810 --> 00:12:41,089
a certain IP address is actually on that

284
00:12:37,639 --> 00:12:44,449
network no another way of dealing with

285
00:12:41,089 --> 00:12:45,920
it is putting data your telemetry that's

286
00:12:44,449 --> 00:12:48,380
used in evidence collection and a

287
00:12:45,920 --> 00:12:51,250
segmented part of the network either

288
00:12:48,380 --> 00:12:54,079
through micro segmentation or through a

289
00:12:51,250 --> 00:12:56,569
Cisco offers trust sack for this frame

290
00:12:54,079 --> 00:12:59,810
modification for validating delivery of

291
00:12:56,569 --> 00:13:01,490
data honey pots are another good way

292
00:12:59,810 --> 00:13:03,138
because honey pots and there's deception

293
00:13:01,490 --> 00:13:05,269
for a commercial deception technology

294
00:13:03,139 --> 00:13:07,610
like trap X is a good example of this

295
00:13:05,269 --> 00:13:10,610
where you spin up trip wires throughout

296
00:13:07,610 --> 00:13:13,370
the network that have no valid purpose

297
00:13:10,610 --> 00:13:16,490
and if something scans that machine you

298
00:13:13,370 --> 00:13:18,139
know that it's being scanned because

299
00:13:16,490 --> 00:13:20,779
nothing should be communicating to a

300
00:13:18,139 --> 00:13:22,490
non-existent host and if it does

301
00:13:20,779 --> 00:13:25,069
something if it sends an exploit to that

302
00:13:22,490 --> 00:13:27,350
to that honeypot you have there's a no

303
00:13:25,069 --> 00:13:30,589
false positive situation and honeypot so

304
00:13:27,350 --> 00:13:33,620
they can help figure out when when

305
00:13:30,589 --> 00:13:35,380
data's been poisoned who was the actual

306
00:13:33,620 --> 00:13:39,230
what host and what use was the actual

307
00:13:35,380 --> 00:13:41,660
culprit as data is being ingested into

308
00:13:39,230 --> 00:13:45,410
solutions like Splunk or QRadar

309
00:13:41,660 --> 00:13:48,050
logarithm or product I petal you want to

310
00:13:45,410 --> 00:13:50,000
tag how you got the information did it

311
00:13:48,050 --> 00:13:52,729
come in via UDP did it come in to be a

312
00:13:50,000 --> 00:13:54,800
TLS so that if you run into a data

313
00:13:52,730 --> 00:13:56,279
poisoning scenario you're able to filter

314
00:13:54,800 --> 00:13:59,550
out the stuff that you can

315
00:13:56,279 --> 00:14:02,699
be sure was delivered correctly and then

316
00:13:59,550 --> 00:14:05,519
work only off the data that has a strong

317
00:14:02,699 --> 00:14:07,889
non-repudiation another way of dealing

318
00:14:05,519 --> 00:14:09,810
with it is putting in secure visibility

319
00:14:07,889 --> 00:14:12,870
framework so gigamon is a good example

320
00:14:09,810 --> 00:14:15,689
of this they tap your infrastructure and

321
00:14:12,870 --> 00:14:18,870
then they create metadata directly off

322
00:14:15,689 --> 00:14:20,309
of the tapped network traffic and so in

323
00:14:18,870 --> 00:14:22,740
that way none of these attacks would

324
00:14:20,309 --> 00:14:26,969
work in that this scenario because it's

325
00:14:22,740 --> 00:14:29,999
working off of mirrored or Spain and tap

326
00:14:26,970 --> 00:14:31,680
traffic so as far as the attacks were

327
00:14:29,999 --> 00:14:33,959
looking at today they're applicable

328
00:14:31,680 --> 00:14:36,920
through the attack continuum outside of

329
00:14:33,959 --> 00:14:40,018
the initial access all of these require

330
00:14:36,920 --> 00:14:42,300
a machine inside of the network to do

331
00:14:40,019 --> 00:14:44,309
these attacks they don't necessarily

332
00:14:42,300 --> 00:14:45,930
have to be privileged machines they can

333
00:14:44,309 --> 00:14:47,850
send these attacks will work on wireless

334
00:14:45,930 --> 00:14:53,099
network guess network an AK type of

335
00:14:47,850 --> 00:14:56,399
thing so the first technique is is a

336
00:14:53,100 --> 00:14:59,550
pump and dump scenario so you bring up

337
00:14:56,399 --> 00:15:02,879
normally a VM or a docker container and

338
00:14:59,550 --> 00:15:05,069
you assign a MAC address to it you

339
00:15:02,879 --> 00:15:07,139
assign an IP address to the machine and

340
00:15:05,069 --> 00:15:10,860
then you do something you do something

341
00:15:07,139 --> 00:15:13,230
maybe you're doing recon looking for for

342
00:15:10,860 --> 00:15:14,910
sequel servers but you do something the

343
00:15:13,230 --> 00:15:17,699
machine is going to get reported but

344
00:15:14,910 --> 00:15:18,779
then you kill that container spin up

345
00:15:17,699 --> 00:15:20,490
with a new MAC address

346
00:15:18,779 --> 00:15:22,069
spin up with a new IP address and now

347
00:15:20,490 --> 00:15:30,059
the machine that they're looking for is

348
00:15:22,069 --> 00:15:31,469
disappeared off the network and so one

349
00:15:30,059 --> 00:15:33,079
way that you can only roll mitigation

350
00:15:31,470 --> 00:15:35,850
against this is if you're doing logging

351
00:15:33,079 --> 00:15:39,089
at the access layer so the access switch

352
00:15:35,850 --> 00:15:41,610
or the access point for wireless is

353
00:15:39,089 --> 00:15:44,250
logging the MAC address and other

354
00:15:41,610 --> 00:15:47,279
characteristics of the host so this is

355
00:15:44,250 --> 00:15:50,069
really simple to do if you install

356
00:15:47,279 --> 00:15:55,589
docker on any host the first command I

357
00:15:50,069 --> 00:15:57,748
have here creates a new network so

358
00:15:55,589 --> 00:15:59,160
actually this should be duck creek now

359
00:15:57,749 --> 00:16:02,429
this is creating I was creating a host

360
00:15:59,160 --> 00:16:04,110
so it creates a host on the network of

361
00:16:02,429 --> 00:16:06,089
the host so whatever machine you're on

362
00:16:04,110 --> 00:16:07,500
it physically binds to the network card

363
00:16:06,089 --> 00:16:08,260
that's what Network host is the driver

364
00:16:07,500 --> 00:16:10,690
is the host machine

365
00:16:08,260 --> 00:16:13,630
you establish what the MAC address is

366
00:16:10,690 --> 00:16:15,460
for this docker container the next part

367
00:16:13,630 --> 00:16:16,840
is telling you which dr. image to use is

368
00:16:15,460 --> 00:16:21,790
that would that would download the

369
00:16:16,840 --> 00:16:22,960
newest release of Kali Linux and this

370
00:16:21,790 --> 00:16:24,939
could be anything you don't have to use

371
00:16:22,960 --> 00:16:26,260
Kali you could use any flavor of docker

372
00:16:24,940 --> 00:16:28,540
you wanted it could come from your own

373
00:16:26,260 --> 00:16:32,500
repository and then it gives it the name

374
00:16:28,540 --> 00:16:35,620
of Kelly one and then you start it and

375
00:16:32,500 --> 00:16:37,150
execute you can do stuff stop it and

376
00:16:35,620 --> 00:16:38,950
then it's rerun that first command so

377
00:16:37,150 --> 00:16:41,199
you can swap out your MAC address like

378
00:16:38,950 --> 00:16:44,320
IP address and this is a common tactic

379
00:16:41,200 --> 00:16:47,890
we use on additional attack scenarios

380
00:16:44,320 --> 00:16:51,190
that going forward this one's really

381
00:16:47,890 --> 00:16:53,500
cool in a day of containerization is you

382
00:16:51,190 --> 00:16:55,510
can do what I call a pocket dimension so

383
00:16:53,500 --> 00:16:58,870
on a single machine you create a network

384
00:16:55,510 --> 00:17:01,960
that can be a slash zero you can be the

385
00:16:58,870 --> 00:17:04,390
whole world as a network but it's bound

386
00:17:01,960 --> 00:17:06,340
to the network card so if you're

387
00:17:04,390 --> 00:17:08,230
connected to an to an access point or to

388
00:17:06,339 --> 00:17:10,329
an exit layer switch its gonna see the

389
00:17:08,230 --> 00:17:13,240
traffic as if it's happening on the

390
00:17:10,329 --> 00:17:16,060
switch but you spent up one hose for

391
00:17:13,240 --> 00:17:18,640
instance that may be on the internet so

392
00:17:16,060 --> 00:17:20,710
give it a you know 4.4.4 two for address

393
00:17:18,640 --> 00:17:23,260
and you have a ten dot you know an RFC

394
00:17:20,710 --> 00:17:25,980
1918 address internally and you're

395
00:17:23,260 --> 00:17:28,390
communicating on this fake network and

396
00:17:25,980 --> 00:17:30,310
what that's doing is is generating

397
00:17:28,390 --> 00:17:32,290
records in different scenarios that look

398
00:17:30,310 --> 00:17:33,669
like external traffic is happening

399
00:17:32,290 --> 00:17:35,200
around the world or inside of the

400
00:17:33,670 --> 00:17:36,370
network but it's really not happening at

401
00:17:35,200 --> 00:17:38,260
all it's happening on your single

402
00:17:36,370 --> 00:17:40,090
machine but the telemetry about those

403
00:17:38,260 --> 00:17:43,240
metrics are being generated inside of

404
00:17:40,090 --> 00:17:46,780
this pocket dimension and setting that

405
00:17:43,240 --> 00:17:48,670
up is pretty easy so you could use

406
00:17:46,780 --> 00:17:50,889
docker network create and I'll network

407
00:17:48,670 --> 00:17:54,160
create you define the principles of the

408
00:17:50,890 --> 00:17:56,230
network what subnet is it on what is it

409
00:17:54,160 --> 00:17:58,000
bound to and then you have a essentially

410
00:17:56,230 --> 00:18:00,820
a virtual network there it can be a

411
00:17:58,000 --> 00:18:02,200
slash wine a slash to assess for it and

412
00:18:00,820 --> 00:18:04,210
you can create multiple different

413
00:18:02,200 --> 00:18:07,150
multiple networks for different subnets

414
00:18:04,210 --> 00:18:09,940
but you essentially build networks and

415
00:18:07,150 --> 00:18:12,640
using IP space that is routable on the

416
00:18:09,940 --> 00:18:15,160
internet so that you can perform attacks

417
00:18:12,640 --> 00:18:17,470
that should not be it should not be

418
00:18:15,160 --> 00:18:19,780
observable so the next thing so I'll

419
00:18:17,470 --> 00:18:20,530
create a docker Network called pocket

420
00:18:19,780 --> 00:18:23,649
and

421
00:18:20,530 --> 00:18:26,620
then spin up a docker container called

422
00:18:23,650 --> 00:18:29,680
colleague one and a sign a 10 IP address

423
00:18:26,620 --> 00:18:32,409
of 4.2 3.1 and you can also in a

424
00:18:29,680 --> 00:18:34,330
scenario assign the MAC addresses as

425
00:18:32,410 --> 00:18:35,980
well as we did earlier then I have

426
00:18:34,330 --> 00:18:39,580
another host in that pocket domain

427
00:18:35,980 --> 00:18:41,500
called 10.10 dot ten dot one and then I

428
00:18:39,580 --> 00:18:43,480
start both of those containers and as

429
00:18:41,500 --> 00:18:45,940
you're doing the work inside of that

430
00:18:43,480 --> 00:18:47,350
inside of that pocket domain its

431
00:18:45,940 --> 00:18:49,480
generate it will generate metrics

432
00:18:47,350 --> 00:18:50,709
depending on how the telemetry is set up

433
00:18:49,480 --> 00:18:53,020
we'll look at some ways of doing that in

434
00:18:50,710 --> 00:18:54,700
a second that look like things are

435
00:18:53,020 --> 00:18:56,379
happening that are not really happening

436
00:18:54,700 --> 00:18:59,260
so you can haven't you Cape you can make

437
00:18:56,380 --> 00:19:01,030
it look like China is attacking your

438
00:18:59,260 --> 00:19:03,100
network when china is doing nothing

439
00:19:01,030 --> 00:19:04,660
right you take a geo IP address you

440
00:19:03,100 --> 00:19:06,879
assign it to one of the containers on

441
00:19:04,660 --> 00:19:09,160
the pocket dimension and then you've set

442
00:19:06,880 --> 00:19:14,080
up a testbed for generating telemetry to

443
00:19:09,160 --> 00:19:15,850
confuse logging solutions another

444
00:19:14,080 --> 00:19:17,889
technique that we can use is log

445
00:19:15,850 --> 00:19:20,050
spoofing which is communicating directly

446
00:19:17,890 --> 00:19:21,970
to the logging source the challenge with

447
00:19:20,050 --> 00:19:24,010
this is you have to find the collector

448
00:19:21,970 --> 00:19:26,910
so is the thing that's listening for

449
00:19:24,010 --> 00:19:29,710
syslog or the thing is listening for

450
00:19:26,910 --> 00:19:33,820
NetFlow or API calls the thing that

451
00:19:29,710 --> 00:19:37,810
ingest data so you can do traditional

452
00:19:33,820 --> 00:19:40,149
recon stuff like DNS DNS zone transfer

453
00:19:37,810 --> 00:19:44,710
type of dumps looking for how

454
00:19:40,150 --> 00:19:46,990
information is being gathered you can

455
00:19:44,710 --> 00:19:49,210
just do a send scan for syslog running

456
00:19:46,990 --> 00:19:51,250
on five one for TCP to look for those

457
00:19:49,210 --> 00:19:53,320
sources of course that's gonna be noisy

458
00:19:51,250 --> 00:19:56,170
so if we're gonna do that do a pump and

459
00:19:53,320 --> 00:19:58,899
dump and then you essentially descend it

460
00:19:56,170 --> 00:20:00,760
artificial records that will accomplish

461
00:19:58,900 --> 00:20:02,710
what you want it to accomplish

462
00:20:00,760 --> 00:20:06,520
authentication successful different

463
00:20:02,710 --> 00:20:08,230
whatever we're going to do of course a

464
00:20:06,520 --> 00:20:10,960
Ciel's are important here going back to

465
00:20:08,230 --> 00:20:12,910
not allowing any a guest network machine

466
00:20:10,960 --> 00:20:14,770
to get to your logging server would be a

467
00:20:12,910 --> 00:20:16,510
great way of doing this and then not

468
00:20:14,770 --> 00:20:18,760
disclosing where those things are on the

469
00:20:16,510 --> 00:20:23,620
network through obscene is another

470
00:20:18,760 --> 00:20:26,320
approach this is a very simple way to

471
00:20:23,620 --> 00:20:30,520
spoof a syslog message so and

472
00:20:26,320 --> 00:20:33,129
essentially you echo a message to netcat

473
00:20:30,520 --> 00:20:34,119
and you point it to the place you wanted

474
00:20:33,130 --> 00:20:35,919
to go to it looks

475
00:20:34,119 --> 00:20:39,129
exactly like a server log anything in

476
00:20:35,919 --> 00:20:41,919
UDP syslog can be generated this way you

477
00:20:39,129 --> 00:20:44,829
can do CF messages so the stuff and the

478
00:20:41,919 --> 00:20:47,799
quotation marks is the syslog message

479
00:20:44,829 --> 00:20:51,009
that's going into the syslog collector

480
00:20:47,799 --> 00:20:54,759
so very simple approach from that using

481
00:20:51,009 --> 00:20:57,969
netcat there's an open source project

482
00:20:54,759 --> 00:21:01,149
called sample cater and that's the link

483
00:20:57,969 --> 00:21:03,459
on github to get it you it opens up a

484
00:21:01,149 --> 00:21:06,819
port or multiple ports you put in rules

485
00:21:03,459 --> 00:21:08,529
and you can send UDP packets to multiple

486
00:21:06,819 --> 00:21:11,289
destinations and it will maintain the

487
00:21:08,529 --> 00:21:13,659
original IP header and so where this is

488
00:21:11,289 --> 00:21:15,969
helpful is you can have it send it

489
00:21:13,659 --> 00:21:17,109
everywhere so you send one packet in

490
00:21:15,969 --> 00:21:19,119
this applicator and it can potentially

491
00:21:17,109 --> 00:21:21,908
send out to thousands of different

492
00:21:19,119 --> 00:21:23,529
sources hoping that one of them is your

493
00:21:21,909 --> 00:21:26,049
log collection source this only works

494
00:21:23,529 --> 00:21:28,149
with UDP but it is it works with UDP

495
00:21:26,049 --> 00:21:34,239
over to us this log over yupi and that

496
00:21:28,149 --> 00:21:35,529
flow IP fix SNMP all of that TLS is a

497
00:21:34,239 --> 00:21:41,339
little bit more complicated but you can

498
00:21:35,529 --> 00:21:41,339
still get data into a TLS listener

499
00:21:41,759 --> 00:21:46,299
because even when TLS is used it's

500
00:21:44,559 --> 00:21:47,469
typically not doing authentication it's

501
00:21:46,299 --> 00:21:49,569
not authenticating the client

502
00:21:47,469 --> 00:21:50,709
certificate if it is and you would need

503
00:21:49,569 --> 00:21:52,599
to have the client certificate here but

504
00:21:50,709 --> 00:21:56,169
this is just some shorthand this is this

505
00:21:52,599 --> 00:22:00,129
is functional Python code you create a

506
00:21:56,169 --> 00:22:02,229
socket you're using TLS v1 you're not

507
00:22:00,129 --> 00:22:04,629
verifying this server certificate goes

508
00:22:02,229 --> 00:22:19,569
we don't care in this scenario you open

509
00:22:04,629 --> 00:22:21,698
up the socket to 10.10.5.3 if you have

510
00:22:19,569 --> 00:22:26,319
API base collection like elasticsearch

511
00:22:21,699 --> 00:22:27,699
uses REST API squawk uses REST API so if

512
00:22:26,319 --> 00:22:29,649
you find the locations of these and you

513
00:22:27,699 --> 00:22:33,249
want to post in it's just an expose

514
00:22:29,649 --> 00:22:35,408
command the - kay is just a disabled

515
00:22:33,249 --> 00:22:37,509
certificate verification and you just

516
00:22:35,409 --> 00:22:41,889
post the JSON object of the message that

517
00:22:37,509 --> 00:22:43,509
you want to go into the system just curl

518
00:22:41,889 --> 00:22:45,758
NetFlow is a little trickier just

519
00:22:43,509 --> 00:22:47,340
because of the nature of NetFlow but if

520
00:22:45,759 --> 00:22:50,730
you spin up a pocket dimension

521
00:22:47,340 --> 00:22:52,769
you download em probe and you're one run

522
00:22:50,730 --> 00:22:54,749
in probe on one of the Knicks inside of

523
00:22:52,769 --> 00:22:56,399
the pocket dimension it's gonna sniff

524
00:22:54,749 --> 00:22:58,379
the traffic going in here a little

525
00:22:56,399 --> 00:23:00,570
imaginary network and it's gonna

526
00:22:58,379 --> 00:23:03,449
generate net flow records and send them

527
00:23:00,570 --> 00:23:07,019
to the place you want them to go to so

528
00:23:03,450 --> 00:23:08,580
if you wanted to look like China was

529
00:23:07,019 --> 00:23:10,860
downloading all your data picking on

530
00:23:08,580 --> 00:23:13,379
China again you create a host on the

531
00:23:10,860 --> 00:23:15,059
Pocket domain have it download data from

532
00:23:13,379 --> 00:23:16,830
an another imaginary machine it's gonna

533
00:23:15,059 --> 00:23:19,320
drain generates the net flow records and

534
00:23:16,830 --> 00:23:21,090
then forward those on to the net flow

535
00:23:19,320 --> 00:23:22,918
collector so the in probe command is

536
00:23:21,090 --> 00:23:26,220
just what-what interface am i sniffing

537
00:23:22,919 --> 00:23:27,899
on and where is the collector and what

538
00:23:26,220 --> 00:23:31,559
port is the collector on and it'll send

539
00:23:27,899 --> 00:23:35,879
the packets directly into that collector

540
00:23:31,559 --> 00:23:40,200
to poison that data so taking that into

541
00:23:35,879 --> 00:23:45,570
account doing an embed mass implication

542
00:23:40,200 --> 00:23:47,100
on a network scan so let's say you have

543
00:23:45,570 --> 00:23:48,539
a real host you want it to scan the

544
00:23:47,100 --> 00:23:51,360
network but you want to cover up the

545
00:23:48,539 --> 00:23:53,129
tracks by saying everything is scanning

546
00:23:51,360 --> 00:23:55,649
the network so as the responders are

547
00:23:53,129 --> 00:23:58,830
looking to come after your host or kick

548
00:23:55,649 --> 00:24:01,199
it off the network or find you they have

549
00:23:58,830 --> 00:24:05,340
to go through every fake host that you

550
00:24:01,200 --> 00:24:06,840
also generate records on so the quickest

551
00:24:05,340 --> 00:24:09,418
way to do it is to spin up a pocket

552
00:24:06,840 --> 00:24:11,009
domain have multiple scanning machines

553
00:24:09,419 --> 00:24:14,460
with different IP addresses across

554
00:24:11,009 --> 00:24:17,039
different domains use n probe to send

555
00:24:14,460 --> 00:24:19,799
the net flow out of the pocket the

556
00:24:17,039 --> 00:24:21,899
pocket dimension to the net flow

557
00:24:19,799 --> 00:24:23,940
collector so you're scanning all these

558
00:24:21,899 --> 00:24:25,830
fake addresses inside of the the

559
00:24:23,940 --> 00:24:28,350
dimension as you're scanning the same

560
00:24:25,830 --> 00:24:30,090
addresses on the real network and so

561
00:24:28,350 --> 00:24:33,449
you're generating real net flow records

562
00:24:30,090 --> 00:24:35,129
about what you're actually doing which

563
00:24:33,450 --> 00:24:36,960
are also creating net flow records about

564
00:24:35,129 --> 00:24:39,480
a whole bunch of fake accounts that are

565
00:24:36,960 --> 00:24:41,429
not being generated and so as responders

566
00:24:39,480 --> 00:24:43,679
are coming in they have to find all

567
00:24:41,429 --> 00:24:46,169
these fake machines and get them off of

568
00:24:43,679 --> 00:24:48,570
the network before they can find your

569
00:24:46,169 --> 00:24:49,740
machine and really IP spoofing is

570
00:24:48,570 --> 00:24:52,470
probably the only thing that's going to

571
00:24:49,740 --> 00:24:54,860
help you here and and also MAC address

572
00:24:52,470 --> 00:24:57,929
logging at the access layer on that flow

573
00:24:54,860 --> 00:24:59,789
but this is and then also tagging it

574
00:24:57,929 --> 00:25:01,650
tagging the data going back and knowing

575
00:24:59,789 --> 00:25:07,040
being able to filter out what

576
00:25:01,650 --> 00:25:10,400
was collected from those NetFlow records

577
00:25:07,040 --> 00:25:12,870
another one is a net flow masking attack

578
00:25:10,400 --> 00:25:15,720
so let's say you're doing a sense can

579
00:25:12,870 --> 00:25:17,010
you have one machine doing a sense can

580
00:25:15,720 --> 00:25:20,160
and then you're generating net flow

581
00:25:17,010 --> 00:25:22,110
records generating the syntax so the way

582
00:25:20,160 --> 00:25:26,190
a sentence can generally its detected

583
00:25:22,110 --> 00:25:28,110
inside of in bad solution is you see so

584
00:25:26,190 --> 00:25:30,390
many syn packets going out to

585
00:25:28,110 --> 00:25:33,840
destinations with no returns syn ack and

586
00:25:30,390 --> 00:25:37,200
so do the scan in the real world to

587
00:25:33,840 --> 00:25:39,959
discover a host and then in the pocket

588
00:25:37,200 --> 00:25:42,030
dimension generate net flow records that

589
00:25:39,960 --> 00:25:44,100
are just for syntax and send those

590
00:25:42,030 --> 00:25:45,990
directly to the flow collector or if

591
00:25:44,100 --> 00:25:47,699
your pocket dimension is running on

592
00:25:45,990 --> 00:25:48,960
access layer switch the access layer

593
00:25:47,700 --> 00:25:51,150
switch will generate the net flow

594
00:25:48,960 --> 00:25:53,160
records for you instead of you using in

595
00:25:51,150 --> 00:25:56,070
probe to do it so you're scanning in a

596
00:25:53,160 --> 00:25:58,559
fake world 3850 from Cisco or something

597
00:25:56,070 --> 00:26:00,000
else will generate net flow and

598
00:25:58,559 --> 00:26:03,720
automatically send it to the flow

599
00:26:00,000 --> 00:26:05,670
collector and one way to do use this

600
00:26:03,720 --> 00:26:07,320
would would be a honeypot so if

601
00:26:05,670 --> 00:26:08,790
someone's scanning and then you have a

602
00:26:07,320 --> 00:26:10,800
connection that had hit a fake address

603
00:26:08,790 --> 00:26:12,360
that network connection inside the

604
00:26:10,800 --> 00:26:15,240
honeypot and the forensics coming out of

605
00:26:12,360 --> 00:26:20,189
that would help determine what the real

606
00:26:15,240 --> 00:26:22,530
attacker was from the fake baseline

607
00:26:20,190 --> 00:26:25,559
boiling same types of techniques it just

608
00:26:22,530 --> 00:26:27,629
takes a lot of time so you basically

609
00:26:25,559 --> 00:26:29,100
every day you increase the metric that

610
00:26:27,630 --> 00:26:31,530
you're generating either in the pocket

611
00:26:29,100 --> 00:26:34,740
domain or on the real network so you can

612
00:26:31,530 --> 00:26:37,220
download a mega traffic on day one than

613
00:26:34,740 --> 00:26:38,730
a mega half an egg and a half on day two

614
00:26:37,220 --> 00:26:40,200
when you're dealing with different

615
00:26:38,730 --> 00:26:43,080
technologies some of them build

616
00:26:40,200 --> 00:26:45,990
baselines on a per entity based basis so

617
00:26:43,080 --> 00:26:49,080
every host has its own baseline other

618
00:26:45,990 --> 00:26:50,970
technologies you set based baselines so

619
00:26:49,080 --> 00:26:54,149
all of the wireless

620
00:26:50,970 --> 00:26:55,980
hosts share a common baseline so when

621
00:26:54,150 --> 00:26:58,770
you're boiling asset-based baseline you

622
00:26:55,980 --> 00:27:00,630
need to have more participants and the

623
00:26:58,770 --> 00:27:02,550
boiling but the idea there is if you

624
00:27:00,630 --> 00:27:05,940
need to do long term systemic

625
00:27:02,550 --> 00:27:08,490
exfiltration or staging you're going to

626
00:27:05,940 --> 00:27:12,270
want to boil the set metrics by spending

627
00:27:08,490 --> 00:27:15,010
30 or 60 days slowly incrementing up the

628
00:27:12,270 --> 00:27:17,740
byte count so download Meg to Meg's

629
00:27:15,010 --> 00:27:19,830
mags 10 Meg's until you get it up to the

630
00:27:17,740 --> 00:27:22,960
level you need for exultation

631
00:27:19,830 --> 00:27:26,199
alternately or eternally most baselines

632
00:27:22,960 --> 00:27:28,960
do not or most counters for a given

633
00:27:26,200 --> 00:27:33,610
period do not exceed a 24-hour period so

634
00:27:28,960 --> 00:27:36,220
if the baseline is 10 Meg's a day you

635
00:27:33,610 --> 00:27:37,629
transfer 10 Meg's a day and do that

636
00:27:36,220 --> 00:27:39,280
every day then the counter is gonna

637
00:27:37,630 --> 00:27:40,750
reset at midnight and then you've got

638
00:27:39,280 --> 00:27:42,550
another 10 Meg's for that day and then

639
00:27:40,750 --> 00:27:46,300
another 10 Meg's and these can also be

640
00:27:42,550 --> 00:27:47,889
used in combination with each other so

641
00:27:46,300 --> 00:27:49,389
if you have the time to do a slow

642
00:27:47,890 --> 00:27:52,060
exfiltration that's generally the best

643
00:27:49,390 --> 00:27:56,310
way to do it for avoiding anomaly based

644
00:27:52,060 --> 00:28:00,940
detection so with all those in mind

645
00:27:56,310 --> 00:28:03,669
perfect setting up the architecture

646
00:28:00,940 --> 00:28:05,920
around TLS is really important a lot the

647
00:28:03,670 --> 00:28:07,420
problem of this is NetFlow doesn't

648
00:28:05,920 --> 00:28:10,630
support it even in the RFC

649
00:28:07,420 --> 00:28:14,860
IP fix supports it in the RFC but I've

650
00:28:10,630 --> 00:28:19,200
never seen a vendor create IP fix that

651
00:28:14,860 --> 00:28:22,090
supports TLS though it is in RFC 50 101

652
00:28:19,200 --> 00:28:24,040
but using TLS where you can is important

653
00:28:22,090 --> 00:28:25,720
you can also generate net flow off of

654
00:28:24,040 --> 00:28:29,200
the visibility fabric where you can

655
00:28:25,720 --> 00:28:31,390
control the flow of data so gigamon or

656
00:28:29,200 --> 00:28:33,940
another tap technology that's inspecting

657
00:28:31,390 --> 00:28:37,270
the data creating metadata off of the

658
00:28:33,940 --> 00:28:39,340
raw tap as a way to get the data out

659
00:28:37,270 --> 00:28:43,780
into a different format maybe a common

660
00:28:39,340 --> 00:28:45,610
event format over TLS for syslog if in

661
00:28:43,780 --> 00:28:47,290
wherever you're using TLS you want to

662
00:28:45,610 --> 00:28:49,240
make sure you have cyril's in place IP

663
00:28:47,290 --> 00:28:52,470
spoofing has already hit on and then

664
00:28:49,240 --> 00:28:58,150
micro segmentation in ackles so that is

665
00:28:52,470 --> 00:29:00,330
30 minutes any questions see you at the

666
00:28:58,150 --> 00:29:00,330
bar

667
00:29:01,600 --> 00:29:07,439
[Applause]

