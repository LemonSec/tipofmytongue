1
00:00:15,360 --> 00:00:22,539
everybody thank you for coming to play
this is probably gonna be the most

2
00:00:22,539 --> 00:00:27,439
exciting presentation I've ever done in
my life because I succeeded in breaking

3
00:00:27,439 --> 00:00:31,329
my laptop will I be months since I've
been here the motherboard is cracked

4
00:00:31,329 --> 00:00:37,140
which means if I touch it it powers off
so I spend about 50 minutes just before

5
00:00:37,140 --> 00:00:41,980
the storm just just manipulating the
case slim powered on and now it has so

6
00:00:41,980 --> 00:00:44,550
let's give it a shot and see if we can
do so

7
00:00:44,550 --> 00:00:52,019
mexico's X plus one except when it
doesn't so fiercely me hi Tim periwinkle

8
00:00:52,020 --> 00:01:02,500
Red Team Blue Team kind of a nice shade
of purple I work in 2000 I tried yes all

9
00:01:02,500 --> 00:01:09,070
out sexy beast thank you I would wholly
was Tom's open spaces V Ivory Maxell I'm

10
00:01:09,070 --> 00:01:13,179
starting to soften to add space max
which is VI + IMAX version of the story

11
00:01:13,180 --> 00:01:17,840
and I would prefer any kind of root
canal over system day sorry I'm old

12
00:01:17,840 --> 00:01:26,420
school Nokia apologize accepted as did
not screw it I'm a rapid slide addict 85

13
00:01:26,420 --> 00:01:30,030
slides in this presentation
traditionally it's meant to be three

14
00:01:30,030 --> 00:01:33,790
minutes a slide have 60 minutes after
the hit one slide up less than a minute

15
00:01:33,790 --> 00:01:36,540
and I've already used three so we're
ready to down someone's gonna have to

16
00:01:36,540 --> 00:01:41,409
tell me when I'm closer we got 32 ok
solve for x anyone remember alger from

17
00:01:41,409 --> 00:01:46,960
high school already did it so if x
equals why +1 and white was one wonders

18
00:01:46,960 --> 00:01:53,220
X equal to that's right confidence yes
and if Michael Stewart his ex equal

19
00:01:53,220 --> 00:02:06,539
three so so that if X equals x plus 11
sacks well you can't fix the problem so

20
00:02:06,540 --> 00:02:11,140
why can't you solve it and why the hell
am I making you care about this

21
00:02:11,140 --> 00:02:19,869
well all will become so I want to live
forever like lady Sandra really I also

22
00:02:19,870 --> 00:02:25,590
want my code to run forever but that's
really really really hard to do I want

23
00:02:25,590 --> 00:02:27,860
to scale forever as well

24
00:02:27,860 --> 00:02:32,730
the problem with scaling is this
wonderful gorgeous flatline ride here

25
00:02:32,730 --> 00:02:40,140
that flat line is Moore's Law it means
that no sorry there is no breakdown is a

26
00:02:40,140 --> 00:02:46,910
more accurate statement since about 2010
ish these numbers the speed of CPUs has

27
00:02:46,910 --> 00:02:52,790
flattened completely yet the number of
transistors has gone up hitting physics

28
00:02:52,790 --> 00:02:58,459
and as of right now we can't break
physics so i cant buy a faster CPU but I

29
00:02:58,459 --> 00:03:02,790
can buy more of them both CPUs good the
problem we have is that the software

30
00:03:02,790 --> 00:03:06,950
industry is decades behind this that you
remember when you got your first ever

31
00:03:06,950 --> 00:03:12,929
you know tool 2004 co-processor he tried
to rent a video like yes I'm using a

32
00:03:12,930 --> 00:03:20,230
hundred percent of one single kool yeah
so we're so far behind on the software

33
00:03:20,230 --> 00:03:25,609
side it isn't even true decades which is
why I smell opportunity opportunity a

34
00:03:25,610 --> 00:03:30,410
smile on the second day of the carnival
things so let's talk about scaling

35
00:03:30,410 --> 00:03:35,750
scaling 101 vertical scaling is the
concept you throw a faster CPU added

36
00:03:35,750 --> 00:03:42,459
more memory no not gonna happen so what
we have to do is we have to scale

37
00:03:42,459 --> 00:03:47,019
horizontally so that means scaling our
applications across multiple see peers

38
00:03:47,019 --> 00:03:50,340
across multiple systems ok sounds easy
enough right

39
00:03:50,340 --> 00:03:55,030
the problem is that the only part of
computing industry that has really got

40
00:03:55,030 --> 00:04:00,830
this right is the GPU industry I mean
you can look at GPUs with thousands of

41
00:04:00,830 --> 00:04:06,040
course now nobody else know other part
of the industry is doing that except of

42
00:04:06,040 --> 00:04:11,090
course is still GPUs and data processing
which is still GPS but still GPUs that

43
00:04:11,090 --> 00:04:13,209
the only ones have solved it so why

44
00:04:13,209 --> 00:04:17,858
well good question it's because we
cheated we bought ourselves time just

45
00:04:17,858 --> 00:04:22,060
like we did with the with the with the
process of getting pasta we became

46
00:04:22,060 --> 00:04:25,680
laziest program as we didn't need to
optimize cuz we could wait six months

47
00:04:25,680 --> 00:04:32,870
and get a faster processor so we're lazy
so now when you look at this the only

48
00:04:32,870 --> 00:04:39,099
way to rescale these is to actually put
high prices because that's really the

49
00:04:39,099 --> 00:04:41,380
only type of software that'll at you
know

50
00:04:41,380 --> 00:04:45,590
actually effectively use that number of
course and now we're unsteady two copies

51
00:04:45,590 --> 00:04:51,799
of our application which makes no sense
not only imagine nightmare but also now

52
00:04:51,800 --> 00:04:56,720
providing resources for thirty two
instances of an operating system as well

53
00:04:56,720 --> 00:05:04,620
as trying to patch it makes no sense why
come out just run across 32 CPUs 428

54
00:05:04,620 --> 00:05:11,700
CPUs 4024 10,000 why what is stopping us
well let's don't do a little bit of

55
00:05:11,700 --> 00:05:17,000
little bit how the system works so hard
was at the bottom the candle is

56
00:05:17,000 --> 00:05:23,310
responsible for basically providing
access to and from the the hardware at

57
00:05:23,310 --> 00:05:28,100
the so the kernel does all of that
manage the resources and then

58
00:05:28,100 --> 00:05:33,230
historically a process is a single
thread a single straight line of code

59
00:05:33,230 --> 00:05:38,850
and then when you executed when you the
kernel will give it a range of memory

60
00:05:38,850 --> 00:05:43,520
and say this is all yours go play and
then the kernel make sure that processes

61
00:05:43,520 --> 00:05:48,810
don't stand one other processes and not
actually done in hardware using memory

62
00:05:48,810 --> 00:05:56,440
management so then I like well that's
really hard cuz you know now we've got

63
00:05:56,440 --> 00:06:00,580
software and let's say for example you
take some of the radially web browsers

64
00:06:00,580 --> 00:06:05,760
where you'd go to a URL the DNS for the
the website would actually take you down

65
00:06:05,760 --> 00:06:09,039
like 10 seconds result you could drive
that little window across that nothing

66
00:06:09,040 --> 00:06:15,850
would updated it would be horrible so
now they have threads you can now have

67
00:06:15,850 --> 00:06:20,660
special types of processes which do run
at the same time and they share the same

68
00:06:20,660 --> 00:06:24,710
memory so I can I have hundreds of
threats during all my work and they're

69
00:06:24,710 --> 00:06:30,659
all reading writing to the same memory
space and it's all awesome except it's

70
00:06:30,660 --> 00:06:35,570
really hard so how do you know when one
threat is actually finished reading or

71
00:06:35,570 --> 00:06:40,050
writing to what you need and when I
finished it myself how do I notify or no

72
00:06:40,050 --> 00:06:45,010
one other thread needs my data and how
do I know that another threat has

73
00:06:45,010 --> 00:06:50,690
crashed and corrupted the data that I'm
using or you know just like over you

74
00:06:50,690 --> 00:06:54,460
know buffer overflow in one threat might
end up riding into my memory

75
00:06:54,460 --> 00:07:00,150
area and this is just a single-threaded
process we haven't even looked over

76
00:07:00,150 --> 00:07:04,919
multiple machines and we can't even get
this right and not to mention abuse on

77
00:07:04,919 --> 00:07:07,400
Windows any

78
00:07:07,400 --> 00:07:12,460
a process with appropriate privileges
can start a running threat in any object

79
00:07:12,460 --> 00:07:18,750
process which means 00 which is the
process does all the Windows system I

80
00:07:18,750 --> 00:07:23,110
can stop the running thread into that
process and I can now read that memory

81
00:07:23,110 --> 00:07:29,919
yeah not a great memory model of
Microsoft's are so we solve the problem

82
00:07:29,919 --> 00:07:35,460
we use log sample some you texts you
texts is I'm safe because I'm telling

83
00:07:35,460 --> 00:07:39,979
everyone else to go to sleep well it's
not really scaling is that really doing

84
00:07:39,979 --> 00:07:44,080
things in parallel know all you're doing
is you're telling everyone else has

85
00:07:44,080 --> 00:07:49,580
stopped working so it's still only 1130
execution you have semaphores where you

86
00:07:49,580 --> 00:07:54,469
basically say no more than you know 33
threats are allowed to do stuff in his

87
00:07:54,470 --> 00:08:00,900
you can kind of control what's going on
but still you still have that problem

88
00:08:00,900 --> 00:08:05,380
problem of making sure people all over
each other and have a lot which is

89
00:08:05,380 --> 00:08:09,490
something that people individually
managed where they say I have to spend a

90
00:08:09,490 --> 00:08:14,599
memory that shall not touch and then the
journal will actually stop other product

91
00:08:14,599 --> 00:08:21,009
friends so we sold all the problems and
you know since we also want to do

92
00:08:21,009 --> 00:08:26,449
through this memory sharing a troughs
processes we've got system 50 PCs we can

93
00:08:26,449 --> 00:08:31,530
do that I'm between machines on PM's
well now we got hypervisors that will

94
00:08:31,530 --> 00:08:34,838
actually let a shared-memory between
virtual machines which is awesome cuz I

95
00:08:34,839 --> 00:08:41,789
cannot read memory from machines with
and then for physical host you can buy

96
00:08:41,789 --> 00:08:47,899
dedicated hardware which will map memory
from one machine to another so it like

97
00:08:47,899 --> 00:08:51,450
she looks to the hardware as memory but
really it's all going back and forth

98
00:08:51,450 --> 00:08:55,420
over the network so we have solved all
of us getting problems because we have

99
00:08:55,420 --> 00:09:00,310
shared all of the things I develop a
sock

100
00:09:00,310 --> 00:09:07,479
in see how many different types of
memory bugs have we seen in C so we've

101
00:09:07,480 --> 00:09:12,560
got now point dear a free use of people
not initializing memory before they use

102
00:09:12,560 --> 00:09:18,890
it as just classes of this and see
programme's as a whole they can't even

103
00:09:18,890 --> 00:09:21,930
manage their own diaper the kind of
managed through memory well what about

104
00:09:21,930 --> 00:09:28,560
job while Java protects the program up
from the duty job of managing their own

105
00:09:28,560 --> 00:09:34,569
memory but what it does is when it it
just keeps allocating memory to get sore

106
00:09:34,570 --> 00:09:41,140
point and then it says I need more
memory so it stops everyone does clean

107
00:09:41,140 --> 00:09:50,100
up basically I have seen systems I seen
applications freeze for fifty to sixty

108
00:09:50,100 --> 00:09:54,180
seconds the entire world stops so any
database connections you got running

109
00:09:54,180 --> 00:09:59,250
pause timeout many people are connecting
to any customers yet done it's just it's

110
00:09:59,250 --> 00:10:07,290
completely unpredictable it's not
awesome JavaScript JavaScript didn't

111
00:10:07,290 --> 00:10:11,660
even trust with threats I mean OJ a
switch does a synchronous stuff it's

112
00:10:11,660 --> 00:10:18,439
still single predators call and they get
another different ways

113
00:10:18,440 --> 00:10:25,460
Python Ruby they protect the user from
heading themselves because they only let

114
00:10:25,460 --> 00:10:31,420
one thread actually executed a time just
said I'm not even gonna try J ruby's on

115
00:10:31,420 --> 00:10:33,380
Java so again forget it

116
00:10:33,380 --> 00:10:38,600
fellows like I'm I'm sorry yeah we did
something it's sort of compiled it

117
00:10:38,600 --> 00:10:41,610
worked on baby three platforms and then
it'll blow up in my face

118
00:10:41,610 --> 00:10:47,700
64 sliding to be delivered so everything
is also everything's on salt any

119
00:10:47,700 --> 00:10:54,800
questions no that's not it

120
00:10:54,800 --> 00:11:00,729
how to actually solve this so right now
we are all very solidly in the trough of

121
00:11:00,730 --> 00:11:04,920
disillusionment everyone except for
computer science researchers because

122
00:11:04,920 --> 00:11:09,510
there's a lot of money being pumped into
universities to try and solve this

123
00:11:09,510 --> 00:11:13,490
problem with the compiler level they
know it can't be done that but it's

124
00:11:13,490 --> 00:11:20,029
money so let's talk about GPUs so right
now March 2015 it isn't much was close

125
00:11:20,029 --> 00:11:20,820
enough

126
00:11:20,820 --> 00:11:29,220
3072 course 12 kicker from $1,000 on a
graphics card or so and they use it all

127
00:11:29,220 --> 00:11:35,260
how awesome is that so how are they
still able to scale well comes back to

128
00:11:35,260 --> 00:11:40,630
this a little friend here or more
accurately it comes back to not this has

129
00:11:40,630 --> 00:11:49,649
this is what is causing us problems the
lambda calculus so in the nineteen

130
00:11:49,649 --> 00:11:54,160
thirties when computer theory was
actually you know good twenty thirty

131
00:11:54,160 --> 00:11:58,829
years against before actual computers
along their church invented lambda

132
00:11:58,829 --> 00:12:03,290
calculus it's a quite formal system for
mathematical logic expressing

133
00:12:03,290 --> 00:12:07,310
computation function abstraction blah
blah blah blah blah don't really need to

134
00:12:07,310 --> 00:12:13,060
get all of that just know how old this
is this problem was addressed in the

135
00:12:13,060 --> 00:12:18,069
nineteen thirties for different reasons
but it was still actually address but

136
00:12:18,070 --> 00:12:23,579
when you start to use that you get some
really interesting properties so one of

137
00:12:23,579 --> 00:12:27,760
the first things we do to make our lives
easier as we say we have immutable data

138
00:12:27,760 --> 00:12:34,880
meaning if we set a parable we are not
allowed to change again now that sounds

139
00:12:34,880 --> 00:12:38,300
completely strange to anyone who has
done any kind of imperative 400

140
00:12:38,300 --> 00:12:43,130
programming but it works so when you set
a variable that it's done well what does

141
00:12:43,130 --> 00:12:48,000
that mean that now means that if you
ride it a shared-memory you never have

142
00:12:48,000 --> 00:12:52,160
to worry about anyone and modifying it
and nobody needs to worry about where

143
00:12:52,160 --> 00:12:55,990
you finish modifying it or not because
you're never going to change its done so

144
00:12:55,990 --> 00:13:00,300
you don't have to worry about lock so
fast

145
00:13:00,300 --> 00:13:06,569
composition and mathematical certainty
which I will cover the moment so like I

146
00:13:06,570 --> 00:13:11,900
said immutable data it can live in
shared memory and you can optimize like

147
00:13:11,900 --> 00:13:17,160
you would not believe so here's an
example this is he said let me not so

148
00:13:17,160 --> 00:13:23,589
much a true minds in two acts and then
say X equals x plus teach Java the way

149
00:13:23,590 --> 00:13:28,700
that it's actually implemented in a
imperative languages ok let's allocates

150
00:13:28,700 --> 00:13:32,690
memory let's copy let me not to the
marriage of true minds to that new

151
00:13:32,690 --> 00:13:38,900
better memory lets up and teach Java and
then let's mark the old acts as being

152
00:13:38,900 --> 00:13:43,020
available for garbage collection which
means it can be removed at some point in

153
00:13:43,020 --> 00:13:50,819
the future that's a lot of work on the
functional side we just say this we

154
00:13:50,820 --> 00:13:54,370
don't need to store a second copy off
let me not to the marriage of true minds

155
00:13:54,370 --> 00:14:00,830
because it never changes how cool is
that that means I can have a binary

156
00:14:00,830 --> 00:14:06,110
binary blob off like to get in size and
I can modify bits and pieces of it

157
00:14:06,110 --> 00:14:12,380
an avenue to make a copy because when
you make these guarantees you can cheap

158
00:14:12,380 --> 00:14:19,050
competition composition is the idea that
you can take functions and you could

159
00:14:19,050 --> 00:14:25,030
almost rearrange them like you rearrange
algebra math in fact that effectively in

160
00:14:25,030 --> 00:14:31,780
my example him I got traded a function
called reject bit I and all it does is

161
00:14:31,780 --> 00:14:36,350
it says it says run the command get all
bids which just streams out a list of

162
00:14:36,350 --> 00:14:43,390
all the best and I have and then it then
for every parent receives it runs the

163
00:14:43,390 --> 00:14:47,540
function is domestic which says it
domestic or not if it is domestic it

164
00:14:47,540 --> 00:14:53,380
rejects it and then the bottom one just
says take the first three now even if

165
00:14:53,380 --> 00:14:59,950
you don't know what language that is
probably true that means special come

166
00:14:59,950 --> 00:15:04,210
from a background in order UNIX pipe
looks like it's just like that its

167
00:15:04,210 --> 00:15:10,450
cattle bids by Brett Myers v domestic
pipe had stashed 3 I mean it

168
00:15:10,450 --> 00:15:16,930
it's just you know it's what you make
that switch it's a lot easier to do of

169
00:15:16,930 --> 00:15:21,449
course equivalent in in an imperative
language groups and counts and you know

170
00:15:21,450 --> 00:15:27,210
you have an internal counter have a
total of 30 not yet I remember is to

171
00:15:27,210 --> 00:15:31,390
messages just a function so what if you
don't like well if you're writing in

172
00:15:31,390 --> 00:15:34,890
another language you probably have to
write another function which looked

173
00:15:34,890 --> 00:15:41,330
almost exactly the same right well in a
functional Language and Composition what

174
00:15:41,330 --> 00:15:44,740
you can do is you can actually pasta
function to the function to create

175
00:15:44,740 --> 00:15:50,980
function it's weird I know but what it
means is that I can say disliked is

176
00:15:50,980 --> 00:15:55,620
hated sorry select and then the parable
for that the function that I provide

177
00:15:55,620 --> 00:15:59,930
goes into is headed and then it's
actually inside a function here which

178
00:15:59,930 --> 00:16:04,650
means that my previous function just
looks like this hipster equals best

179
00:16:04,650 --> 00:16:08,900
select is domestic how cool is that

180
00:16:08,900 --> 00:16:14,939
or select is lager or you don't even
need to actually have one in there you

181
00:16:14,940 --> 00:16:20,320
can actually write your function inside
the functions just like this so that if

182
00:16:20,320 --> 00:16:25,620
the prices more than $2 it's just it
another way of thinking but when you

183
00:16:25,620 --> 00:16:32,150
when you make that switch its actual lot
easier to work with and then lastly on

184
00:16:32,150 --> 00:16:32,949
this topic

185
00:16:32,950 --> 00:16:37,920
mathematical certainty that these things
called my own ads which are legendary

186
00:16:37,920 --> 00:16:45,229
because they just in the category of end
of the product X replaced by composition

187
00:16:45,230 --> 00:16:54,410
of end of functors and unit set by the
identity which makes no sense to me at

188
00:16:54,410 --> 00:17:05,290
all i mean so example this is this is
the E in javascript

189
00:17:05,290 --> 00:17:10,240
one of the most common adverse that
you'll see is undefined is not a

190
00:17:10,240 --> 00:17:14,099
function because people will be passing
functions around and if they can get

191
00:17:14,099 --> 00:17:16,688
locked up on something that will pass
undefined

192
00:17:16,689 --> 00:17:21,329
Angeles cool be like this better
undefined undefined is not a function

193
00:17:21,329 --> 00:17:27,089
and then your job your jobs program has
to go to find ok what was put it and it

194
00:17:27,089 --> 00:17:33,779
just becomes really really difficult if
the idea of a mongoloid is that you

195
00:17:33,779 --> 00:17:40,490
specify what it is and so in this case
you say that the variable X is a maybe

196
00:17:40,490 --> 00:17:44,049
function which means that either
functional meaning it's a function or

197
00:17:44,049 --> 00:17:51,809
nothing so if you and your code have not
actually written written coaches say if

198
00:17:51,809 --> 00:18:00,440
it's nothing do this it will not even
compile so we'll just cut down those

199
00:18:00,440 --> 00:18:09,929
which programming paradise now we still
have side effects

200
00:18:09,929 --> 00:18:16,110
one of the principles is when you run a
function when you run any function where

201
00:18:16,110 --> 00:18:21,049
the value you will always get the same
value this is why GPUs are so effective

202
00:18:21,049 --> 00:18:25,480
because all of the individual
competitions are all independent which

203
00:18:25,480 --> 00:18:30,210
means that you can just say if I put
three into this function I'm always

204
00:18:30,210 --> 00:18:33,519
gonna get seven and it doesn't matter
what CPU it's running on it doesn't

205
00:18:33,519 --> 00:18:38,970
matter what you know where the day to
come from the same value out if you put

206
00:18:38,970 --> 00:18:43,149
the same party win that doesn't work
when you doing things like reading and

207
00:18:43,149 --> 00:18:51,330
writing to a database because at that
point so we can avoid that the only

208
00:18:51,330 --> 00:18:55,570
thing we can do is isolate them and
that's really a lot of what these other

209
00:18:55,570 --> 00:18:59,950
languages somebody talk about do they
basically say all that nasty impure

210
00:18:59,950 --> 00:19:05,500
stuff where bugs live that can all live
over that so the example i gave a moment

211
00:19:05,500 --> 00:19:12,580
ago is a language called album which
compiles down to JavaScript and so it

212
00:19:12,580 --> 00:19:18,970
has the most polite compiler in the
world so here's an example so what

213
00:19:18,970 --> 00:19:24,799
happens is in in this list all of the
items in the list I meant to be the

214
00:19:24,799 --> 00:19:28,770
exact same type that's a rule of law it
stops you doing things like

215
00:19:28,770 --> 00:19:33,540
you know calling things as functions
which are functions and its Decompiler

216
00:19:33,540 --> 00:19:38,790
basically says excuse me I am really I'm
really sorry to bother you but I've

217
00:19:38,790 --> 00:19:42,870
looked at your code and you know we
might have a little issue here I was

218
00:19:42,870 --> 00:19:48,139
kind of expecting to see him out in this
array and you kinda sorta put a string

219
00:19:48,140 --> 00:19:52,050
in there so if you could maybe fixed
opted for alleged to a damn thing more

220
00:19:52,050 --> 00:20:00,940
than that great so when you have that
level of strictness in your compila you

221
00:20:00,940 --> 00:20:07,040
have no let me rephrase that you have
very very few runtime bugs in your

222
00:20:07,040 --> 00:20:10,470
actual running code and that's what you
want right you want to catch you before

223
00:20:10,470 --> 00:20:15,430
you deploy before you use a see it
before it you know

224
00:20:15,430 --> 00:20:27,210
modifies so for the backend server side
this is my this is my personal

225
00:20:27,210 --> 00:20:34,030
preference so the beam is a virtual
machine that is 28 years old

226
00:20:34,030 --> 00:20:44,490
many languages the run on it but the two
of them going to focus on will be an

227
00:20:44,490 --> 00:20:46,320
elixir is three years old

228
00:20:46,320 --> 00:20:52,320
you can run millions of processes inside
this virtual machine now it's not an

229
00:20:52,320 --> 00:20:56,659
operating system process it's a process
which is specific to this virtual

230
00:20:56,660 --> 00:21:04,440
machine and I can spawn up millions of
them in seconds like it's nothing and

231
00:21:04,440 --> 00:21:08,670
they only take up about you know five
hundred or so bites just just a manager

232
00:21:08,670 --> 00:21:13,850
single one of those this environment was
built from the ground up I'm just gonna

233
00:21:13,850 --> 00:21:20,270
put out twenty-something years ago to be
fault tolerant to the point where you

234
00:21:20,270 --> 00:21:24,870
can actually do editing and running of
code while your application is running

235
00:21:24,870 --> 00:21:30,239
while you have like connections and the
reason for that is because this never

236
00:21:30,240 --> 00:21:34,810
happened you have never received a phone
call from the phone company or a letter

237
00:21:34,810 --> 00:21:36,840
from the phone companies saying

238
00:21:36,840 --> 00:21:43,080
between 3 a.m. and 6 a.m. please don't
dial 911 yeah because we're upgrading

239
00:21:43,080 --> 00:21:49,740
switches that never happens and the
reason that never happens is because

240
00:21:49,740 --> 00:21:53,890
ride in the very beginning when this
stuff was built and computer science was

241
00:21:53,890 --> 00:21:57,950
actually real engineering and not you
know people cutting and pasting stuff of

242
00:21:57,950 --> 00:22:06,179
Google they really cared about that
because if they got it wrong people died

243
00:22:06,179 --> 00:22:12,950
death matters so two sides of the same
coin

244
00:22:12,950 --> 00:22:17,070
they are hundred-percent interoperable
they both composites the exact same by

245
00:22:17,070 --> 00:22:23,110
code line is prologue syntax which gives
me a which I have a hard time with the

246
00:22:23,110 --> 00:22:29,770
tooling is likewise a little on the
outside and the development team full of

247
00:22:29,770 --> 00:22:32,690
em in the language are incredibly
conservative and the reason that they

248
00:22:32,690 --> 00:22:39,260
are incredibly conservative is because
they don't want people to die to the

249
00:22:39,260 --> 00:22:43,080
point where they will do a release every
six months every three months four

250
00:22:43,080 --> 00:22:47,100
months six months there's no rushing
there's no hate to be cool if it is

251
00:22:47,100 --> 00:22:50,439
everything is incredibly well done

252
00:22:50,440 --> 00:22:57,450
engineered is insane elixirs the little
looser child and what it does is it

253
00:22:57,450 --> 00:23:02,010
hasn't Ruby ask syntax it has far more
blogs ruling which is more pleasant to

254
00:23:02,010 --> 00:23:06,049
work with the additional libraries is
really what I'm referring to when I say

255
00:23:06,049 --> 00:23:13,250
it's a little looser so their their
development as a lot more cutting edge

256
00:23:13,250 --> 00:23:17,460
and the language also gives you the
ability to create your own languages

257
00:23:17,460 --> 00:23:22,309
which is so if you've got a specific job
you want to do tonight she generate your

258
00:23:22,309 --> 00:23:26,960
own computer language that will actually
work that's so your program actually

259
00:23:26,960 --> 00:23:30,919
looks like a description of what your
needs to do

260
00:23:30,919 --> 00:23:39,039
formance wise here's an output from
what's up this is about two or three

261
00:23:39,039 --> 00:23:41,360
years ago this server

262
00:23:41,360 --> 00:23:45,860
single server machine I think its
sixteen cause it's fair amount of memory

263
00:23:45,860 --> 00:23:47,800
though in fairness

264
00:23:47,800 --> 00:23:53,899
2.2 million concurrent connections
that's not 2.2 million people can you

265
00:23:53,900 --> 00:23:59,470
know you know connecting like you know
things no that's not as solid TCP

266
00:23:59,470 --> 00:24:01,150
connections to million of them

267
00:24:01,150 --> 00:24:08,700
established right there right then and I
think wasn't breaking a sweat the model

268
00:24:08,700 --> 00:24:12,840
for this is so right and it had to they
had to get it right because if they

269
00:24:12,840 --> 00:24:19,939
didn't get it right people died whats
app itself so that 450 millions of

270
00:24:19,940 --> 00:24:23,860
customers at the time they actually sold
it sold for nineteen billion dollars it

271
00:24:23,860 --> 00:24:28,850
was built by 35 engineers just think if
you know what you think about you know

272
00:24:28,850 --> 00:24:31,310
when you see these huge development
houses you know with hundreds of

273
00:24:31,310 --> 00:24:36,720
developers and it's like this design
applications written by 35 people and it

274
00:24:36,720 --> 00:24:42,580
handles you know 450 million people
almost 500 million messages a day it's

275
00:24:42,580 --> 00:24:48,070
just it's just a little bit on my mind
blowing side and I liked it enough fail

276
00:24:48,070 --> 00:24:51,649
whale I mean their availabilities top
has to be because people assume it's

277
00:24:51,650 --> 00:24:56,730
like the telephone because they using it
on the telephone

278
00:24:56,730 --> 00:25:06,850
philosophy philosophy in this December
software is let it crash the process is

279
00:25:06,850 --> 00:25:10,100
completely isolated which means a
process of any crashes it cannot hurt

280
00:25:10,100 --> 00:25:14,980
anything else it's designed like that
and these processes can were designed to

281
00:25:14,980 --> 00:25:18,350
live across multiple machines which
means if you have a machine failed or

282
00:25:18,350 --> 00:25:23,179
your network split or any you know
memory does anything like that this is

283
00:25:23,180 --> 00:25:28,640
already taken care of for you when you
write software and you're doing and you

284
00:25:28,640 --> 00:25:33,310
know you're a good software developer
you're like ok so I just ran this check

285
00:25:33,310 --> 00:25:38,260
the returning to make sure was
successful ok wasn't successful as a

286
00:25:38,260 --> 00:25:44,280
program have you ever enumerated every
single one of those of those failing

287
00:25:44,280 --> 00:25:48,399
conditions it's just not possible I mean
you can't say if the CPU died in the

288
00:25:48,400 --> 00:25:49,350
middle of this transaction

289
00:25:49,350 --> 00:25:56,929
you can't do that the language itself
does this so if you kill something or

290
00:25:56,930 --> 00:26:01,159
eight kills itself the process just
above it which is in blue

291
00:26:01,159 --> 00:26:06,470
school supervisor it restarts it with
the exact same arguments as before which

292
00:26:06,470 --> 00:26:10,690
means it does the same thing again you
don't even need to come with us so I

293
00:26:10,690 --> 00:26:16,119
think it's like 30% 20% 30% a failure
software failures if you run the same

294
00:26:16,119 --> 00:26:20,949
thing second time will work since like
network timeout stuff done automatically

295
00:26:20,950 --> 00:26:26,440
I don't even need to test for that I've
written stuff that reaches out to remote

296
00:26:26,440 --> 00:26:30,429
API and they've sent me back a day set
me back four hundred saying we're busy

297
00:26:30,429 --> 00:26:31,739
try again later

298
00:26:31,739 --> 00:26:36,399
that's ok I don't even need to take care
of it my process goes that's not a 200

299
00:26:36,399 --> 00:26:41,070
I'm glad I started another one makes the
same request gets two hundred

300
00:26:41,070 --> 00:26:45,559
done how cool is that I don't even need
to worry about it I don't need to go OK

301
00:26:45,559 --> 00:26:51,379
maximum of 10 times when I don't need to
do any of that it just happens and when

302
00:26:51,379 --> 00:26:56,959
ice porn if I need to do ten thousand
requests are spawned 10,000 processes I

303
00:26:56,960 --> 00:27:04,059
don't care why not I don't have to
manage this managers in fact if you if

304
00:27:04,059 --> 00:27:08,849
you actually era trapped in your code
it's considered an anti the only thing

305
00:27:08,849 --> 00:27:15,029
you really cold when you do this when
you actually use this stuff like to use

306
00:27:15,029 --> 00:27:18,950
a tight you know the user type something
in wrong feedback that's about it

307
00:27:18,950 --> 00:27:23,289
anything else let it crash quickly as
possible let it die as quickly as

308
00:27:23,289 --> 00:27:30,330
possible so it doesn't have done and the
environment is designed for failure

309
00:27:30,330 --> 00:27:34,470
because that's pretty much the only
certainty we actually have in life is a

310
00:27:34,470 --> 00:27:39,489
software will fail and you can look
applications and I've written and you

311
00:27:39,489 --> 00:27:43,729
watched the debug logs and I'll see
process process process process trash

312
00:27:43,729 --> 00:27:50,389
whatever no one knows no one cares
because it's natural it's normal it's

313
00:27:50,389 --> 00:27:58,119
completely normal I am NOT scared
crashes it's very liberating

314
00:27:58,119 --> 00:28:09,119
the original switches was originally
designed for back in 1985 1985 1987 it

315
00:28:09,119 --> 00:28:13,968
was released the world 1985 was when
this all started they were getting 99

316
00:28:13,969 --> 00:28:18,209
bail ability they were getting 31
milliseconds of downtime per year and

317
00:28:18,209 --> 00:28:23,219
they were not having maintenance this
isn't you know they also take a one you

318
00:28:23,219 --> 00:28:26,409
know they also take an hour every month
no elephants which they can't do that

319
00:28:26,409 --> 00:28:33,249
this is ok we need to do some code
upgrades ok then we need to we need to

320
00:28:33,249 --> 00:28:36,789
actually do hot cold upgrade we need to
do debugging but we can't stop it until

321
00:28:36,789 --> 00:28:42,439
debugging flight we need to debug it
live how to debug something when you put

322
00:28:42,439 --> 00:28:47,819
a million processes and you need to
debug one how do you do that in any

323
00:28:47,819 --> 00:28:53,519
environment she cannot interact live
with it you can't do what you doin some

324
00:28:53,519 --> 00:28:58,119
in most languages bridges are gonna run
the vision again but with the debug flag

325
00:28:58,119 --> 00:29:02,379
on and then it creates debug for the
other million processes no you can't do

326
00:29:02,379 --> 00:29:04,599
that because you lose everything

327
00:29:04,599 --> 00:29:12,438
this is thought about an engine it right
and it's a happy accident when it came

328
00:29:12,439 --> 00:29:16,909
to scalability this is a happy accident
they weren't thinking multiple CPUs they

329
00:29:16,909 --> 00:29:21,949
were never thinking 10,000 cause they
were there were telephone switches on

330
00:29:21,949 --> 00:29:25,819
the end of lines they could not do
shared memory because they could not

331
00:29:25,819 --> 00:29:30,178
copy memory back with the boards because
that was enough and with so they never

332
00:29:30,179 --> 00:29:37,509
implemented it which meant that this
entire model works because of that the

333
00:29:37,509 --> 00:29:41,309
models you need for actually building
these services they already exist

334
00:29:41,309 --> 00:29:45,969
Jen survey is a generic surveyed
jennifer is a generic finite state

335
00:29:45,969 --> 00:29:51,009
machines an event is a generic if I
receive event who do I send those events

336
00:29:51,009 --> 00:29:58,059
to change ECB I have received a TCP
connection connection writing these

337
00:29:58,059 --> 00:30:03,229
protocols is a simple as just received
message I sent a message I sent it

338
00:30:03,229 --> 00:30:04,889
regardless of what it is

339
00:30:04,889 --> 00:30:07,669
this is all about it's almost like just
playing mail

340
00:30:07,670 --> 00:30:18,200
it's the point I'm making is gone a long
way in the direction that we've gone to

341
00:30:18,200 --> 00:30:23,080
really succeed in the future we need to
go back to the past and fix a lot of the

342
00:30:23,080 --> 00:30:31,879
mistakes we've made and I think that
this is destiny I swear to you I have

343
00:30:31,880 --> 00:30:35,960
not photoshopped this I swear to you

344
00:30:35,960 --> 00:30:47,090
1985 about its 1985 to 1987 when you
like basically was first invented 2008

345
00:30:47,090 --> 00:30:56,669
well when it was first released 2015
October 21st well with three days late

346
00:30:56,670 --> 00:31:07,000
but we changed the world please thank
you

347
00:31:07,000 --> 00:31:11,510
how much time do you like 20 minutes

348
00:31:11,510 --> 00:31:16,340
started late I can do I can do I can do
some damage if you like yeah let's do

349
00:31:16,340 --> 00:31:25,510
that and just take your questions for
programmers in the room I'm curious you

350
00:31:25,510 --> 00:31:33,800
know I just have been dealing with at
work a challenge of using some of these

351
00:31:33,800 --> 00:31:36,050
languages like when you talk about you
know don't worry about this crash

352
00:31:36,050 --> 00:31:41,620
conditioner don't worry about this or
whatever how some of that obscures their

353
00:31:41,620 --> 00:31:45,010
knowledge of some of the underlying
protocols and other things that are

354
00:31:45,010 --> 00:31:48,490
actually going on and let you mentioned
TCP timeouts and all those types of

355
00:31:48,490 --> 00:31:55,300
things and while it's great to not
necessarily because they are expected to

356
00:31:55,300 --> 00:31:58,860
recover from them it is also very
helpful though for them to know how that

357
00:31:58,860 --> 00:32:03,379
stuff actually works and for some reason
I found that as developers are coming up

358
00:32:03,380 --> 00:32:10,440
they're not familiar with these things
so how I mean I'm just curious because I

359
00:32:10,440 --> 00:32:14,600
know the spirit with which you're
talking about it knowing that the detail

360
00:32:14,600 --> 00:32:18,409
of that very well for other developers
other people in the room that are

361
00:32:18,410 --> 00:32:23,170
dealing with those that are less
knowledgeable about any feedback or any

362
00:32:23,170 --> 00:32:33,790
input on how to so it's really a matter
of its a matter of context control so

363
00:32:33,790 --> 00:32:38,990
with the supervisors they don't actually
retried for a bird it's configurable so

364
00:32:38,990 --> 00:32:44,740
for example if you're trying to you know
right to a database the database right

365
00:32:44,740 --> 00:32:50,740
fails you kill the child and it'll try
to execute that child again if it's

366
00:32:50,740 --> 00:32:54,380
because the database is down that it's
gonna fail again and again and again

367
00:32:54,380 --> 00:32:59,720
again again again again again is that
helpful probably not so what we do

368
00:32:59,720 --> 00:33:03,740
instead is this

369
00:33:03,740 --> 00:33:09,540
so what we do is right here let's just
pretend you know this is all working

370
00:33:09,540 --> 00:33:16,530
here that is just having a bad day this
and then this supervisor right here

371
00:33:16,530 --> 00:33:21,990
let's just say that it it's been pretty
it's basically been set to say if it

372
00:33:21,990 --> 00:33:27,000
crashes three times within a minute then
don't we started what will actually

373
00:33:27,000 --> 00:33:35,120
happen is this again configurable is
that this the supervisor will kill kill

374
00:33:35,120 --> 00:33:44,270
all of the other children underneath it
and kill itself and then this supervisor

375
00:33:44,270 --> 00:33:49,760
will restart this supervisor which will
restart all the children which means

376
00:33:49,760 --> 00:33:54,910
that you now have the ability at this
level to say okay my entire database

377
00:33:54,910 --> 00:33:59,270
pool crashed because something bad is
going on down here don't know what it is

378
00:33:59,270 --> 00:34:04,160
therefore I want you to restart this
supervised up a connected this pool

379
00:34:04,160 --> 00:34:13,429
instead make sense it's self healing the
errors you still i mean you could see

380
00:34:13,429 --> 00:34:18,730
that you mean like the idea that if I
need to ensure message integrity or kind

381
00:34:18,730 --> 00:34:20,929
of the way that I think about it in
terms of a database is you want to

382
00:34:20,929 --> 00:34:28,850
bility right so that's obviously losing
data or something like that would be bad

383
00:34:28,850 --> 00:34:31,940
are in disarray in the context of what
you're discussing this this would not be

384
00:34:31,940 --> 00:34:36,168
a good solution for that just curious
what all comes down to the domain of

385
00:34:36,168 --> 00:34:43,520
your of your problem so let me give an
example so an example so there is a

386
00:34:43,520 --> 00:34:50,639
delivery there's a company that does a
delivery and they use to do that what

387
00:34:50,639 --> 00:34:56,550
happens is basically a marketplace
almost like a stock exchange where where

388
00:34:56,550 --> 00:35:01,630
someone will hit a website and then that
website will send to the exchange I have

389
00:35:01,630 --> 00:35:05,220
this user who is interested in these
three these things how much you gonna

390
00:35:05,220 --> 00:35:10,819
pay me to display your ad and there is a
real time bidding process on your eyes

391
00:35:10,820 --> 00:35:14,810
and they actually have an SLA of like
they have to respond within

392
00:35:14,810 --> 00:35:22,330
for milliseconds or something like that
question does it matter if they lose it

393
00:35:22,330 --> 00:35:25,960
doesn't matter if they lose data or if
they lose about ability probably not in

394
00:35:25,960 --> 00:35:33,080
that case so you know so in that case
that response I'm because that but I'm

395
00:35:33,080 --> 00:35:36,180
thinking things like burglar security
applications or something like that our

396
00:35:36,180 --> 00:35:40,200
audit logging or something like that
we've got high volumes of messages that

397
00:35:40,200 --> 00:35:46,109
need to be stored and transferred where
underlying responsibilities like TCP

398
00:35:46,110 --> 00:35:55,300
reliable network delivery may not be
adequate enough so there is a so good

399
00:35:55,300 --> 00:36:02,240
example of that kind of thing is
messaging server which is written in

400
00:36:02,240 --> 00:36:08,410
Erlang they actually spawn a new message
a new process for every message and the

401
00:36:08,410 --> 00:36:13,029
reason they do that crazy so what
happens if you think about it think

402
00:36:13,030 --> 00:36:17,310
about it this way so I was gonna send a
message to you my user she said send

403
00:36:17,310 --> 00:36:21,610
this message of that number okay so I'm
not throwing them you know if we're

404
00:36:21,610 --> 00:36:25,890
doing it but it's just me and you and i
cant reach you then I'm gonna be sitting

405
00:36:25,890 --> 00:36:32,089
here going a little or no idea what's
going on ignoring my use of the way

406
00:36:32,090 --> 00:36:40,430
jeopardy does it is they will say is I
received a message and I generate a

407
00:36:40,430 --> 00:36:44,990
process and that process basically then
runs and says I'm gonna go and find out

408
00:36:44,990 --> 00:36:51,750
if it fails to find Evan it will crash
and notify me that I couldn't be reached

409
00:36:51,750 --> 00:36:58,220
so you have so what you can do it you
can have processes I'm showing these

410
00:36:58,220 --> 00:37:03,730
directly but any process is actually
capable of monitoring any other process

411
00:37:03,730 --> 00:37:09,380
which means that it will get notified of
that process dies exits which means that

412
00:37:09,380 --> 00:37:15,390
if I spawned you know ten thousand jobs
I can actually say let me know if any of

413
00:37:15,390 --> 00:37:20,950
them fail and then I can make a decision
as to whether that's important or not or

414
00:37:20,950 --> 00:37:25,500
I can get a supervisor to do it for me
that it just says 10,000 good or bad

415
00:37:25,500 --> 00:37:30,980
then does that make sense so it's it
really is all about the problem and it's

416
00:37:30,980 --> 00:37:36,600
not this doesn't limit shoe into how you
approach it because there are actually

417
00:37:36,600 --> 00:37:40,660
ways of doing it during each solving
each of these problems so you don't have

418
00:37:40,660 --> 00:37:47,390
to choose one spa appt taking every use
case you have you know with logging

419
00:37:47,390 --> 00:37:54,500
logging for you know statistics we don't
be may not carefully lose 14 logging for

420
00:37:54,500 --> 00:37:58,510
security ok we're gonna make sure that
that that that is never lost which means

421
00:37:58,510 --> 00:38:03,290
that process crashed again writes my
local disk to see what I'm saying she

422
00:38:03,290 --> 00:38:09,029
just did the aspect is like you have to
think about the context of your

423
00:38:09,030 --> 00:38:14,440
application and what you should do with
that data to create failures in areas

424
00:38:14,440 --> 00:38:16,700
pretty much that would be kind of almost
like what you're talking about before

425
00:38:16,700 --> 00:38:23,529
where the failure scenario case where
you know ok I don't care so I threw that

426
00:38:23,530 --> 00:38:28,510
away but we're talking about air
handling I guess where was actually the

427
00:38:28,510 --> 00:38:33,140
slide was that you had where it was I
was actually like an exception or

428
00:38:33,140 --> 00:38:37,600
something like that like he tried to
write it write the code for like certain

429
00:38:37,600 --> 00:38:47,150
failure scenarios are so that is so it
would be kinda like that would be the

430
00:38:47,150 --> 00:38:51,090
error scenario that you would write to
not necessarily how the service or

431
00:38:51,090 --> 00:38:56,540
health application level it would
respond I guess sensor compilation level

432
00:38:56,540 --> 00:39:01,190
it will not even let you generate code
because it knows what you produce will

433
00:39:01,190 --> 00:39:05,960
be broken so it knows about you produce
will be broken

434
00:39:05,960 --> 00:39:10,550
therefore a dozen producer which is
which is a developer is really what you

435
00:39:10,550 --> 00:39:18,730
want to meet in cement before I die
regression tests to be all about this

436
00:39:18,730 --> 00:39:21,750
has meant to be all about let's make
sure I didn't do anything stupid like

437
00:39:21,750 --> 00:39:27,900
you know stick of floating-point number
and we're expecting this kind of stuff

438
00:39:27,900 --> 00:39:32,670
will be court automatically by languages
like this because they explicitly

439
00:39:32,670 --> 00:39:37,660
disallow this type of activity although
disclaimer

440
00:39:37,660 --> 00:39:45,049
language let you do that I'll tell you
why so remember I said you too hot cold

441
00:39:45,049 --> 00:39:52,700
loading I mean it so for example if I
have an IRC server running on IRC server

442
00:39:52,700 --> 00:39:58,250
and I have 500 connections open to users
and users are chatting away and whatever

443
00:39:58,250 --> 00:40:04,970
and I need to change the code in some
way let's say I need to change some

444
00:40:04,970 --> 00:40:09,788
other fields to you know to what I'm
storing for user ID so instead of

445
00:40:09,789 --> 00:40:13,970
storing the user is filled with these
other things are not going to add a new

446
00:40:13,970 --> 00:40:21,368
one while I'm now changing that type of
data so when you do a a code release

447
00:40:21,369 --> 00:40:28,680
when I say you're just mean any language
that runs on that playful you can

448
00:40:28,680 --> 00:40:35,089
generate when you generate your release
what it does is it goes up all of these

449
00:40:35,089 --> 00:40:40,240
service work on messages so they sit
there doing nothing until they receive a

450
00:40:40,240 --> 00:40:43,939
message so for example with an IRC
server it maybe I received a message on

451
00:40:43,940 --> 00:40:48,289
the streets of people in this it would
go Passa Passa Passa do this message so

452
00:40:48,289 --> 00:40:53,760
there is a special message called code
reload and then what happens is when it

453
00:40:53,760 --> 00:40:59,690
receives that message it will go ahead
and reload the code into that specific

454
00:40:59,690 --> 00:41:06,010
process which means that you have to
pick you have two nite Lulu Santos

455
00:41:06,010 --> 00:41:09,520
changed a little bit so you can do
things like change data types but then

456
00:41:09,520 --> 00:41:14,299
when you push the release part of your
releases I'm changing this code also

457
00:41:14,299 --> 00:41:18,470
changing this datatype all these users
which are in flight

458
00:41:18,470 --> 00:41:23,680
make the default for this this and it
would actually load in the new code

459
00:41:23,680 --> 00:41:28,990
modify the data actually in the you know
in the 500 running processes to be the

460
00:41:28,990 --> 00:41:34,729
new format and everything will just
continue it is just the craziest thing

461
00:41:34,730 --> 00:41:39,920
is everybody following kind of the
conversation we're having some people

462
00:41:39,920 --> 00:41:45,140
that are not as development oriented
maybe a little bit confused but so what

463
00:41:45,140 --> 00:41:48,109
he's essentially saying what's so cool
about this and one of the things where

464
00:41:48,109 --> 00:41:49,360
some of these languages

465
00:41:49,360 --> 00:41:53,680
really popular so is it and why it's
important to you as a security person or

466
00:41:53,680 --> 00:42:00,210
a test or whatever is that so like now
you know when you can just see in C

467
00:42:00,210 --> 00:42:02,600
language anybody

468
00:42:02,600 --> 00:42:09,049
ok how many you written script ok so
what happens when you start a script and

469
00:42:09,050 --> 00:42:12,960
you need to change something you have to
kill the process and restart it if the

470
00:42:12,960 --> 00:42:16,560
respondent for the changes that you made
to take effect and so a lot of

471
00:42:16,560 --> 00:42:19,890
applications that way as well or you
know but the idea of this is that

472
00:42:19,890 --> 00:42:23,580
dynamically because it's launching these
things for each individual action

473
00:42:23,580 --> 00:42:27,440
instead of processing them then serial
for lack of a better way to describe it

474
00:42:27,440 --> 00:42:32,870
its data processing material based off
of a single process you know I'm a

475
00:42:32,870 --> 00:42:38,250
multi-thread or whatever but each time
it's loading that code base back up and

476
00:42:38,250 --> 00:42:41,580
when you set that flag it simply tells
the process on its bonds that I need to

477
00:42:41,580 --> 00:42:46,210
make sure that I pull in the latest the
latest version of this code into memory

478
00:42:46,210 --> 00:42:50,820
versus what it was trying to use before
so it's the ideas like really cool where

479
00:42:50,820 --> 00:42:54,000
you can open up a new report on
something and not have to restart the

480
00:42:54,000 --> 00:42:58,070
server itself or the process that its
run that's running after launching it

481
00:42:58,070 --> 00:43:02,140
which is really really really really
really important for real-time

482
00:43:02,140 --> 00:43:07,890
applications and and so that's why I
like these are getting more noticed by a

483
00:43:07,890 --> 00:43:14,120
lot of them have the way that that magic
under the skirt works there is you lose

484
00:43:14,120 --> 00:43:17,920
some of the stuff that we were talking
about before I was curious like some of

485
00:43:17,920 --> 00:43:20,230
those underlying things that are there

486
00:43:20,230 --> 00:43:24,180
secured from you a little bit I guess
you can still see them you just choose

487
00:43:24,180 --> 00:43:27,390
what you want to see them or not so
there's an entire log data logging

488
00:43:27,390 --> 00:43:32,060
application and then that logging
application you can then choose what you

489
00:43:32,060 --> 00:43:32,799
wanna do with it

490
00:43:32,800 --> 00:43:38,610
thing about the beam is that the event
was originally designed to run on hard

491
00:43:38,610 --> 00:43:43,000
way it was never designed to run on an
operating system so it was an embedded

492
00:43:43,000 --> 00:43:47,400
it was an embedded OS which means it has
its own applications it has its own

493
00:43:47,400 --> 00:43:52,250
concept of it has its own concept of all
of that so you can think of it more like

494
00:43:52,250 --> 00:43:54,670
an OS that an actual

495
00:43:54,670 --> 00:44:00,060
and so you can do things like start and
stop applications you can actually have

496
00:44:00,060 --> 00:44:05,690
dependencies of applications which means
for example I can sell application for

497
00:44:05,690 --> 00:44:14,830
doing so I have to start that before I
make HTTPS request because I need that

498
00:44:14,830 --> 00:44:25,090
service in order to do that I am so
excited about all the cool stuff I've

499
00:44:25,090 --> 00:44:31,700
been doing this I've been doing crazy
crazy stuff with it like scanning an

500
00:44:31,700 --> 00:44:36,350
entire class a-4 Asus also doing to sell
validation against them

501
00:44:36,350 --> 00:44:50,450
me maybe a minute and a half to scan
entire / 20 minutes and no for 1800 yeah

502
00:44:50,450 --> 00:44:57,290
and it's it's the way that I didn't I
just bought a whole bunch processors and

503
00:44:57,290 --> 00:45:02,040
I just said you know I'm slowing the
process you guys do what you gotta do

504
00:45:02,040 --> 00:45:09,410
and so and any process reached out and
got like a timeout those processes would

505
00:45:09,410 --> 00:45:15,200
stay longer and then they would die
because they didn't successfully policy

506
00:45:15,200 --> 00:45:20,669
and that as a process got assert it
would then send it to another process

507
00:45:20,670 --> 00:45:25,300
another pool of processes which would
then do the city coating so this is all

508
00:45:25,300 --> 00:45:30,200
so this is all about sending messages so
what I it's the coolest thing when I'm

509
00:45:30,200 --> 00:45:36,160
writing software now I have a whiteboard
I posted them all I'm doing is some

510
00:45:36,160 --> 00:45:41,210
writing down the name of the of the
little process underwrite like to put

511
00:45:41,210 --> 00:45:44,620
them up and I just draw the messages
these things are gonna be sending to

512
00:45:44,620 --> 00:45:51,200
each other and I couldn't map because of
that it's so much easier now it was

513
00:45:51,200 --> 00:45:55,279
really difficult start with it is a
completely different way of thinking I

514
00:45:55,280 --> 00:46:02,500
can now my the at the behavior my
application at a much higher level and

515
00:46:02,500 --> 00:46:09,230
not worry about the little details and
then it's it's just so much easier to

516
00:46:09,230 --> 00:46:12,900
rationalize it goes back to what we were
talking about a minute ago we have to do

517
00:46:12,900 --> 00:46:16,420
it and cereal where you have to before
you can pass something off to the next

518
00:46:16,420 --> 00:46:20,920
you know part of the of the logic gene
you have to validate or do something

519
00:46:20,920 --> 00:46:24,530
that you know is gonna prepared data or
something that you made for breaking

520
00:46:24,530 --> 00:46:29,620
into which will break the entire chain
invite usually but whatever it is that

521
00:46:29,620 --> 00:46:35,529
your coding sheler whatever am I going
crazy here

522
00:46:35,530 --> 00:46:42,110
ok but so the idea being like this in
essence though the logic is the same but

523
00:46:42,110 --> 00:46:46,700
how you how you handle it or what
happens that day you have to validate it

524
00:46:46,700 --> 00:46:51,149
before you can write the next stage of
things open up a little bit because it's

525
00:46:51,150 --> 00:46:55,450
just gonna fail to write their toes
before passing it to that process you

526
00:46:55,450 --> 00:47:00,410
say this is what it if you work then
continue so the best way it the best way

527
00:47:00,410 --> 00:47:06,089
to demonstrate that is to actually is to
show you so far less by default but you

528
00:47:06,090 --> 00:47:11,790
don't tell it to do like what's not
there is a failure scenario it just so

529
00:47:11,790 --> 00:47:20,100
so I'm happy to sit down with anyone who
wants to sit down and learn all work out

530
00:47:20,100 --> 00:47:23,630
how this would actually work with with
one of their apps I'm happy to sit down

531
00:47:23,630 --> 00:47:26,720
and I mean you can give me or you can
give me your at your description of

532
00:47:26,720 --> 00:47:30,910
application I will draw on a piece of
paper how lot built it and show you how

533
00:47:30,910 --> 00:47:34,620
it works I'm happy to sit down with
anyone to do that because honestly this

534
00:47:34,620 --> 00:47:43,830
is so it has made such a difference 222
how I'm coding

535
00:47:43,830 --> 00:47:50,640
so this is this is going to be an elixir
which is the which

536
00:47:50,640 --> 00:47:59,870
so this is an election which is the more
modern language full disclaimer I looked

537
00:47:59,870 --> 00:48:06,350
for years ago I bought three by bought
all three books on it because I bought

538
00:48:06,350 --> 00:48:13,470
the first book about two chapters in got
stuck gave up the next book again same

539
00:48:13,470 --> 00:48:16,270
thing same thing with the third book and
then I just went from book to book to

540
00:48:16,270 --> 00:48:19,730
book the book until eventually I just
gave up the reason for that is because

541
00:48:19,730 --> 00:48:24,090
I'm done because I was battling Chu
issues

542
00:48:24,090 --> 00:48:27,890
issue number one is it was a completely
different way of approaching problems

543
00:48:27,890 --> 00:48:32,770
like a completely different way of
approaching and solving problems she got

544
00:48:32,770 --> 00:48:38,300
that huge thing to to get over and the
second one is as I had a real hard time

545
00:48:38,300 --> 00:48:46,240
with the syntax the syntax is prologue
and for the people that use it and run

546
00:48:46,240 --> 00:48:49,370
it they said the syntax is actually
really really really simple but when I

547
00:48:49,370 --> 00:48:55,120
look at it it just did not make any
sense to me at all what they did for me

548
00:48:55,120 --> 00:49:01,040
was it had a syntax the was easier for
me to groc because it was more like

549
00:49:01,040 --> 00:49:07,240
languages that I'd seen before which
then meant that attacking the attacking

550
00:49:07,240 --> 00:49:10,189
the problem of understanding how to
build outs and how to structure the mall

551
00:49:10,190 --> 00:49:13,350
was then an easier thing now I can do
that

552
00:49:13,350 --> 00:49:24,040
going back to actually going back to
elixir and syntax is actually not so I

553
00:49:24,040 --> 00:49:25,110
lost my train of thought

554
00:49:25,110 --> 00:49:31,140
example are

555
00:49:31,140 --> 00:49:40,390
hello world thousand times so has a mix
and I'm just gonna do I'm gonna create

556
00:49:40,390 --> 00:49:56,200
an app called a sec because actually
easier on myself so I'm gonna pass the

557
00:49:56,200 --> 00:50:01,200
the arguments up which means supervisor
so it's actually gonna give me a full

558
00:50:01,200 --> 00:50:05,730
full application I dunno it comes
automatically with with tests and all

559
00:50:05,730 --> 00:50:12,390
that other good stuff so so you know
it's got one test right now and you know

560
00:50:12,390 --> 00:50:19,080
you're meant to do all the right things
so you know what I'm not gonna show me

561
00:50:19,080 --> 00:50:30,730
shrink this so I remember now in his
room and went to try and I need a little

562
00:50:30,730 --> 00:50:34,070
bit of with which is the only reason I'm
doing this so hopefully that'll be good

563
00:50:34,070 --> 00:50:46,430
so I'm gonna create a so I'm gonna
create a library so it's gonna be so

564
00:50:46,430 --> 00:50:52,830
functions in in in modules so I'm just
going to go ahead and a hierarchical

565
00:50:52,830 --> 00:50:58,490
like they are in you know many other
languages so I'm just gonna go ahead and

566
00:50:58,490 --> 00:51:10,189
create one here so hello STC so does
exactly what you'd expect so this is

567
00:51:10,190 --> 00:51:20,480
gonna be taught what are called world
and so so that module in theory now

568
00:51:20,480 --> 00:51:24,890
exists to use one of the things we
talked about before one of the generic

569
00:51:24,890 --> 00:51:33,730
solutions to use use what's called Jens
gonna create a server

570
00:51:33,730 --> 00:51:41,930
and I'm going to specify how to start it
I'm gonna do I'm basically gonna say I'm

571
00:51:41,930 --> 00:51:46,770
gonna start it with with no with no
arguments and this is just something

572
00:51:46,770 --> 00:51:50,359
that you know what I'm typing now is
something that you're doing thousand

573
00:51:50,359 --> 00:51:55,390
times don't stress of course since i
said im gonna do it a thousand times

574
00:51:55,390 --> 00:52:04,710
then of course I mean its collapse in
tax areas all over

575
00:52:04,710 --> 00:52:39,089
I'm just gonna make it pretty bad so I'm
gonna go ahead and go ahead and start my

576
00:52:39,089 --> 00:52:57,240
process so the stomach process it is
already STC world so what happens is I

577
00:52:57,240 --> 00:53:01,609
have to return what is called a state
and right now because all I'm doing is

578
00:53:01,609 --> 00:53:06,970
printing something I'm just not ready to
return things so to demonstrate I'm just

579
00:53:06,970 --> 00:53:11,848
gonna go ahead and recompile module
loaded back in notice notice I did not

580
00:53:11,849 --> 00:53:19,650
restart my virtual machine all I did was
after reload and then reloaded the

581
00:53:19,650 --> 00:53:24,950
module and told me certain way and they
go it's running ok so my server is now

582
00:53:24,950 --> 00:53:32,970
running so right now you see all it says
it says it ok so that is the process I D

583
00:53:32,970 --> 00:53:37,390
for that specific process and to
actually show you to show you what it

584
00:53:37,390 --> 00:53:46,060
looks like you can actually watch the
virtual machine running in real time so

585
00:53:46,060 --> 00:53:49,330
you can watch it slowed in real time it
when you get a cluster of these you can

586
00:53:49,330 --> 00:53:55,369
just go from no to node so you've got
load charts are you can look at the

587
00:53:55,369 --> 00:53:59,930
memory allocation and how are your
memory is actually taking care of the

588
00:53:59,930 --> 00:54:06,598
applications that are actually running
his my application and then this is the

589
00:54:06,599 --> 00:54:13,230
logging application which and build one
and then this is my actual shell

590
00:54:13,230 --> 00:54:18,359
you have this is the process table for
actually for inside the virtual machines

591
00:54:18,359 --> 00:54:22,770
you can see all of the processes that
are running this is like a built-in

592
00:54:22,770 --> 00:54:27,020
internal database so I can examine the
database again in real time and also

593
00:54:27,020 --> 00:54:29,810
modify it and then I can do

594
00:54:29,810 --> 00:54:34,700
tracing of individual processes here
just to you know keeping shop so let's

595
00:54:34,700 --> 00:54:39,490
go ahead and let's go ahead and actually
give this thing something to do so what

596
00:54:39,490 --> 00:54:45,970
I'm gonna do is set up a handle for if I
receive a message that this this is

597
00:54:45,970 --> 00:54:54,709
called handled costs and what I'm gonna
say if I receive hello as a message and

598
00:54:54,710 --> 00:55:02,109
then this is gonna be state will we can
talk about that after I can make it say

599
00:55:02,109 --> 00:55:12,770
to you I can just say I received hello

600
00:55:12,770 --> 00:55:21,200
why I know this looks foreign please
it's it it takes away the so what I'm

601
00:55:21,200 --> 00:55:25,240
gonna do not let me show you what
happens if you if you do it wrong right

602
00:55:25,240 --> 00:55:34,290
so I have not updated my code but I do
need that the pedal and you see it here

603
00:55:34,290 --> 00:55:42,050
number too so I'm just gonna go ahead
and and grab

604
00:55:42,050 --> 00:55:51,380
because it was the value of hard in and
so page me that if I do suggest overcast

605
00:55:51,380 --> 00:55:56,950
sends a message to this process citing
and the message is gonna be hello when I

606
00:55:56,950 --> 00:56:02,790
do this little crush it crashes because
it doesn't know what to do in the hollow

607
00:56:02,790 --> 00:56:05,790
because we haven't you know it still has
the old version of codon doesn't know

608
00:56:05,790 --> 00:56:11,820
what to do with it so the process it is
now dead right now it's dead is done if

609
00:56:11,820 --> 00:56:16,960
I go ahead and reload the code with my
new stuff with the edits that I just

610
00:56:16,960 --> 00:56:31,070
made PC world but if I do I see what I
did sorry if I go ahead and reload my

611
00:56:31,070 --> 00:56:32,580
module like that

612
00:56:32,580 --> 00:56:39,069
go ahead and and started up again

613
00:56:39,069 --> 00:56:47,489
if I go ahead and grab that paid one
more time and if I now send a message

614
00:56:47,489 --> 00:56:53,039
please don't crash there you go to see I
modified the code in running memory

615
00:56:53,039 --> 00:57:00,049
basically did that and done and I can
generate as many of these aside like so

616
00:57:00,049 --> 00:57:04,489
for example if I wanted to generate
10,000 of these of these specific

617
00:57:04,489 --> 00:57:11,709
service I can just do it like this I can
say range new and I'm just gonna do one

618
00:57:11,709 --> 00:57:18,499
to ten thousand what's one to ten
thousand and like I said this works like

619
00:57:18,499 --> 00:57:23,499
UNIX pipes so meet every time that I
runs every time that I do this so

620
00:57:23,499 --> 00:57:27,629
enamoured of basically means run this
function on every value which means its

621
00:57:27,630 --> 00:57:29,880
gonna run whatever I put in now

622
00:57:29,880 --> 00:57:40,680
10,000 times so I'm gonna say I want you
to run ten thousand times for me it is

623
00:57:40,680 --> 00:57:51,698
called it is really nerve-racking doing
life counting STC dog were

624
00:57:51,699 --> 00:57:55,890
world

625
00:57:55,890 --> 00:58:20,089
I see I forgot the name of the function
like 10,000 processes oh I see what

626
00:58:20,089 --> 00:58:25,950
happened sorry so what it's doing is
it's actually passing the number to it

627
00:58:25,950 --> 00:58:31,839
so I can't do that so I need to just
doesn't behavior for that particular

628
00:58:31,839 --> 00:58:46,339
thing so did it is it just me doing this
is what I get to study this is going to

629
00:58:46,339 --> 00:58:55,859
kill me when I was just on video you'll
be screaming at the TV gotta wrap me up

630
00:58:55,859 --> 00:59:02,450
I'll be at the back it'll be thirty
seconds thank you everyone thank you

