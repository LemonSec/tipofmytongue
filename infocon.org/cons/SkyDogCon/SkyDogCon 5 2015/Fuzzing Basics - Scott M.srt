1
00:00:15,170 --> 00:00:17,070
morning

2
00:00:17,070 --> 00:00:24,340
the stock's going to be on visiting
basics or how brake software little bit

3
00:00:24,340 --> 00:00:29,430
about me I'm Scott or created as the
case may be

4
00:00:29,430 --> 00:00:32,460
whichever allen's almost anything really

5
00:00:32,460 --> 00:00:38,440
first and foremost our future husband my
fiance's here thanks for putting up with

6
00:00:38,440 --> 00:00:44,650
me by the way I'm an avid scuba diver so
if you know any good dive spots around

7
00:00:44,650 --> 00:00:45,650
hit me up

8
00:00:45,650 --> 00:00:55,930
sim e mail sorter professional hacker I
guess but my main I guess work is I'm

9
00:00:55,930 --> 00:01:01,269
lead software developer and do some
security on the side and company X my

10
00:01:01,270 --> 00:01:06,930
employer asked me not to divulge her I
work so I guess for two reasons one kind

11
00:01:06,930 --> 00:01:12,630
of a disclaimer for them and to I can
speak more freely because I work

12
00:01:12,630 --> 00:01:20,250
hopefully so engender why first facing
methods are going through some of those

13
00:01:20,250 --> 00:01:25,780
types of causing some flooding software
that I use and have had some success we

14
00:01:25,780 --> 00:01:31,670
have several examples and samples and
they're posted on get her but the link

15
00:01:31,670 --> 00:01:36,420
there I'll have that link in the
questions and comments slide at the very

16
00:01:36,420 --> 00:01:43,070
end so you can I get that some tips and
tricks that I've learned and were

17
00:01:43,070 --> 00:01:48,648
helpful for me and get some time for
questions and comments if you have any

18
00:01:48,649 --> 00:01:55,810
so first of all I guess wife as well you
don't want to be this guy where you test

19
00:01:55,810 --> 00:02:00,460
your code in production but it's
personally I think it's kind of fun to

20
00:02:00,460 --> 00:02:06,219
break software but one of the main
reasons why I guess we folks who are

21
00:02:06,219 --> 00:02:11,920
attending this conference is as hackers
is to find exploitable plugs which now

22
00:02:11,920 --> 00:02:17,660
really are really fun I personally only
written a couple of simple exploits so

23
00:02:17,660 --> 00:02:22,230
far but definitely want to do more

24
00:02:22,230 --> 00:02:27,738
in terms of raising it really provides
you I feel with more thorough testing

25
00:02:27,739 --> 00:02:34,510
with input their users and often
programmers really don't consider a lot

26
00:02:34,510 --> 00:02:38,129
of times you know you may have asked you
a person that goes through a series of

27
00:02:38,129 --> 00:02:43,000
test cases but they may not consider
stuff like okay well what happens if we

28
00:02:43,000 --> 00:02:47,680
put in a bunch of spaces are a bunch of
special characters or even throw nose

29
00:02:47,680 --> 00:02:53,019
into a field so like I said it provides
more thorough testing which helps

30
00:02:53,019 --> 00:02:58,230
increase your quality of your software
if you're a software vendor if you work

31
00:02:58,230 --> 00:03:04,750
for a place that sells software I think
fuzzy personally is of crucial

32
00:03:04,750 --> 00:03:10,160
importance but for those of us who use
software working I T departments it

33
00:03:10,160 --> 00:03:14,370
really helps hold your vendors
accountable for poorly written and

34
00:03:14,370 --> 00:03:22,560
poorly tested code I've embarrassed a
couple of vendors pretty badly which

35
00:03:22,560 --> 00:03:29,160
honestly was kind of fun but that did
help bring equality their software out

36
00:03:29,160 --> 00:03:33,489
so it can handle cases a little better

37
00:03:33,489 --> 00:03:39,590
sizing methods really I think there's
you could argue that there's more but I

38
00:03:39,590 --> 00:03:44,060
basically kind of broken down into three
categories manual fuzzing where you just

39
00:03:44,060 --> 00:03:52,230
put stuff in yourself whether it's a
Windows Forms program web application I

40
00:03:52,230 --> 00:03:56,888
work mostly in the.net realm so that's
where most of my fucking experiences

41
00:03:56,889 --> 00:04:04,829
from but basically these three methods I
think are the ones that I see that are

42
00:04:04,829 --> 00:04:11,750
more general sense manually inputting
stuff yourself as I said automated using

43
00:04:11,750 --> 00:04:16,519
some posing software writing your own
father and I'll be going through some of

44
00:04:16,519 --> 00:04:22,440
the funding software that I've used here
in a bit and wireless fussing MDK three

45
00:04:22,440 --> 00:04:25,600
in Cali Linux can be kind of fun

46
00:04:25,600 --> 00:04:31,220
if anybody's ever messed with it it will
do all sorts of things in terms of

47
00:04:31,220 --> 00:04:38,670
broadcasting packets so you can really
throw your access points into a tizzy

48
00:04:38,670 --> 00:04:46,110
with it but I have found it useful in
some occasions although I haven't done a

49
00:04:46,110 --> 00:04:54,180
whole lot of wireless forcing types of
furthering local and remote really are

50
00:04:54,180 --> 00:04:59,800
the ones that I deal with local being
where you got the first thing software

51
00:04:59,800 --> 00:05:06,630
and your target installed on the same
machine which as far as I can tell and

52
00:05:06,630 --> 00:05:10,130
in my experience you have to do this
pretty much for exploit development

53
00:05:10,130 --> 00:05:15,120
because you've got to be able to debug
and stuff to see what's going on behind

54
00:05:15,120 --> 00:05:20,000
the scenes when you do get a crash and
it gives you full control over your

55
00:05:20,000 --> 00:05:26,120
environment you can reboot when you want
to you can restart whatever remote being

56
00:05:26,120 --> 00:05:30,140
fighting something that's installed
elsewhere like a web application MPP

57
00:05:30,140 --> 00:05:38,860
piece of software or something that is
going to give and receive packets it's a

58
00:05:38,860 --> 00:05:42,600
bit more restricted in terms of control
but that's kinda mood if you can get to

59
00:05:42,600 --> 00:05:47,160
the server because you can restart stuff
if you need to restart crash services or

60
00:05:47,160 --> 00:05:53,790
whatever the one caveat that I've found
in doing remote fussing specifically

61
00:05:53,790 --> 00:05:58,760
with web applications and hopefully I
won't drop too hard over a top that's

62
00:05:58,760 --> 00:06:03,950
going to be going on later today with
hacking web applications is that network

63
00:06:03,950 --> 00:06:07,390
hardware and software routers switches
firewalls and such

64
00:06:07,390 --> 00:06:13,849
sitting between you and the target can
be problematic I run into a couple of

65
00:06:13,850 --> 00:06:21,570
instances where somebody has a web
application firewall or whatever and you

66
00:06:21,570 --> 00:06:26,670
might start out sending TCP traffic
that's got your first drink it by the

67
00:06:26,670 --> 00:06:30,960
time it gets to the target it's either
garbled or dropped altogether and that's

68
00:06:30,960 --> 00:06:32,150
because there was some

69
00:06:32,150 --> 00:06:37,370
system sitting in between that monkey
with your traffic so that's something

70
00:06:37,370 --> 00:06:46,020
that you gotta kinda keep in mind when
doing closing of remote applications in

71
00:06:46,020 --> 00:06:49,590
terms of buzzing software really
anything that allows interaction with a

72
00:06:49,590 --> 00:06:55,969
target could be considered a Pfizer I
primarily work on the Windows platform

73
00:06:55,970 --> 00:07:06,570
in terms of development and security
related stuff of a non-windows I've used

74
00:07:06,570 --> 00:07:12,270
only birds sweet a little bit I usually
use it through Cali Linux but peach

75
00:07:12,270 --> 00:07:19,700
pfizer anybody use peach Bowser joanne's
peach pfizer is a cross-platform

76
00:07:19,700 --> 00:07:26,599
application I'll be gone into a little
bit more of it in a bit but it's it runs

77
00:07:26,600 --> 00:07:32,270
on both Windows Linux and I think it
runs on Mac OS two have never tried to

78
00:07:32,270 --> 00:07:38,419
run on Mac myself but it's a pretty good
little too in terms of Cali Linux that's

79
00:07:38,420 --> 00:07:46,130
what I used primarily for sizing and the
tools here burp suite all of that all of

80
00:07:46,130 --> 00:07:51,350
those with the exception of peach Pfizer
they're all bundled into Cali Linux oh

81
00:07:51,350 --> 00:07:56,390
that's nice because you don't have to do
a whole lot of extra extra work to get

82
00:07:56,390 --> 00:08:00,130
the tools they're already there

83
00:08:00,130 --> 00:08:05,450
the peach fuzz Iran windows like I said
I've done most of most of my work with

84
00:08:05,450 --> 00:08:12,729
peach Pfizer on the Windows platform the
top link that you see there is the main

85
00:08:12,730 --> 00:08:18,270
site where you can grab it and started
it got really good directions on

86
00:08:18,270 --> 00:08:26,590
installing it the peach pit which is
what the peach faster refers to as the

87
00:08:26,590 --> 00:08:32,159
first definitions are done in XML so
having a good XML editor is helpful

88
00:08:32,159 --> 00:08:34,669
you can do it in notepad and I

89
00:08:34,669 --> 00:08:41,770
have for simpler peach pits but for more
complex stuff like if you were writing a

90
00:08:41,770 --> 00:08:48,380
peach pit to fly as a web application
for instance in Europe defining the HTTP

91
00:08:48,380 --> 00:08:53,439
GET or the HTTP POST having a good XML
editor will save you some time and

92
00:08:53,440 --> 00:08:53,980
headaches

93
00:08:53,980 --> 00:09:00,640
there are some free peach pits available
on the internet and at the peach fuzz ur

94
00:09:00,640 --> 00:09:07,449
site I think it's forums . peach fuzz I
dot com there's a specific area of the

95
00:09:07,450 --> 00:09:14,140
forums that folks will contribute peach
pits to have dropped a few out there so

96
00:09:14,140 --> 00:09:18,770
you can check those out if you like I'm
also that the samples here and on I get

97
00:09:18,770 --> 00:09:23,780
her but the one good thing about peach
Bowser it gives you a really good

98
00:09:23,780 --> 00:09:29,020
feedback for reproducing crashes and
login info useful for exploit

99
00:09:29,020 --> 00:09:33,920
development and like something Kelly
Lenox tools where it's more helpful

100
00:09:33,920 --> 00:09:37,439
around a packet capture on when you're
doing focusing on peach fuzz are you

101
00:09:37,440 --> 00:09:41,920
really don't have to do that it will log
all the stuff for you whenever a crash

102
00:09:41,920 --> 00:09:47,140
occurs and I've got some examples of
that sort of thing coming up but it's

103
00:09:47,140 --> 00:09:50,710
really good for that I definitely
recommend that you go through the

104
00:09:50,710 --> 00:09:55,250
tutorials at the link that you see there
on the screen

105
00:09:55,250 --> 00:10:02,800
those will really help you understand
the ins and outs of peach Pfizer and

106
00:10:02,800 --> 00:10:13,300
that Bottomley a very generous soul
posted some posing for newbies which I

107
00:10:13,300 --> 00:10:18,640
found extremely helpful just to kind of
get my brain juices flowing on ok this I

108
00:10:18,640 --> 00:10:23,069
didn't think about using this sort of
thing it's as this post specifically as

109
00:10:23,070 --> 00:10:26,930
a series of links both off site

110
00:10:26,930 --> 00:10:35,329
and on the peach father site on China
getting your arms raun buzzing in

111
00:10:35,330 --> 00:10:40,510
general there's some off-site links to
tutorials so it's it's really good link

112
00:10:40,510 --> 00:10:46,000
I definitely recommend you check it out
there are some gotchas with peach

113
00:10:46,000 --> 00:10:53,220
further I found a couple of small bugs
near the end of August and about a month

114
00:10:53,220 --> 00:11:01,350
later the peach buzzer developer Mike
Arrington that's his name said ok well

115
00:11:01,350 --> 00:11:05,420
these are no big deal we're working on a
commercial product pitch pfizer has kind

116
00:11:05,420 --> 00:11:08,569
of two flavors there's a Community
Edition which is the free one the one I

117
00:11:08,570 --> 00:11:12,600
use and then there's the think they call
it

118
00:11:12,600 --> 00:11:18,020
peach professional that they're working
on trying to keep it maintained and

119
00:11:18,020 --> 00:11:22,890
up-to-date so the response that I got
from him said well okay we'll get to it

120
00:11:22,890 --> 00:11:29,910
but it's not really that big a deal they
didn't feel so and it's honestly just

121
00:11:29,910 --> 00:11:33,660
two misspelling some one of the
programmers I'm sure just left out and I

122
00:11:33,660 --> 00:11:40,920
in to the commuters the size they have
various mutator in the size of variance

123
00:11:40,920 --> 00:11:46,360
mutator he just left an eye out so if
you want to exclude those then you'll

124
00:11:46,360 --> 00:11:51,820
have to misspell them as I've listed
there on the screen so they will exclude

125
00:11:51,820 --> 00:11:57,200
properly and I'll have some peach
example definitions here and like I said

126
00:11:57,200 --> 00:12:06,180
there on my github area to show you that
not all the samples in the peach fuzz ur

127
00:12:06,180 --> 00:12:10,250
samples directory when you install it
work out of the box you've got the tweak

128
00:12:10,250 --> 00:12:11,660
it a little bit and

129
00:12:11,660 --> 00:12:16,530
that's we're going through the tutorials
on the peach Bowser website can help

130
00:12:16,530 --> 00:12:23,030
because they're XML and I'll be honest
I'm not an XML guru

131
00:12:23,030 --> 00:12:28,709
peach pits can be difficult to write and
debug but there are some ways that you

132
00:12:28,710 --> 00:12:35,870
can tricks with the peach Pfizer that
you can use to help kind of ease that

133
00:12:35,870 --> 00:12:41,300
burden there some validation and stuff
that it will do that will ease your pain

134
00:12:41,300 --> 00:12:42,469
a bit

135
00:12:42,470 --> 00:12:54,000
the one thing and you'll see this if you
go through any funding of WAV files this

136
00:12:54,000 --> 00:13:00,690
specific mutator array numerical edge
cases every time I've tried to run it on

137
00:13:00,690 --> 00:13:06,410
Windows when I've tried to buzz WAV
files it just causes windows to just

138
00:13:06,410 --> 00:13:12,750
crapped out and go crazy the hard drive
light will just stick on and whenever I

139
00:13:12,750 --> 00:13:17,690
can get task manager up its just paying
100% so it just really craps windows out

140
00:13:17,690 --> 00:13:24,200
despite the fact that it really doesn't
crash the wav file player that I was

141
00:13:24,200 --> 00:13:29,550
testing it just totally wax windows so
that when you might want to exclude in

142
00:13:29,550 --> 00:13:38,310
some instances but some tips for running
peach fuzz or that I have found when you

143
00:13:38,310 --> 00:13:42,319
just run peach at the command line of
the song windows with no parameters

144
00:13:42,320 --> 00:13:47,320
it'll give you a list of options that it
supports peach my honesty will validate

145
00:13:47,320 --> 00:13:54,460
your Peachpit not only for well-formed
XML but also if you are missing

146
00:13:54,460 --> 00:13:58,440
something that Pete requires like part
of a data model or state model which

147
00:13:58,440 --> 00:13:59,550
also you in a minute

148
00:13:59,550 --> 00:14:06,120
peach minus one will sample run your
Peachpit it won't apply any of what Pete

149
00:14:06,120 --> 00:14:08,410
refers to as mutator

150
00:14:08,410 --> 00:14:14,920
different ways of twisting your input
data to cause crashes but it'll just run

151
00:14:14,920 --> 00:14:21,490
your target funds program as normal so
if you've got something that develops a

152
00:14:21,490 --> 00:14:28,449
outputs a text file for instance if you
run peach minus one can you repeat with

153
00:14:28,449 --> 00:14:32,990
Paula by your peach pit against it then
it will just run to target program is

154
00:14:32,990 --> 00:14:37,730
normal so you can validate that you hate
speech ran my program I got the output

155
00:14:37,730 --> 00:14:41,100
that I would expect if I were running my
program is normal

156
00:14:41,100 --> 00:14:48,129
a peach minus see with your XML file
will give you a count of the test

157
00:14:48,129 --> 00:14:55,269
iterations before starting and if you
especially if you don't do any mutator

158
00:14:55,269 --> 00:15:01,230
exclusions this can produce a whole
bunch of tests iterations which is what

159
00:15:01,230 --> 00:15:06,720
you want but you may want to be prepared
like to kick it off and just go get a

160
00:15:06,720 --> 00:15:09,990
coffee or 10 or what have you

161
00:15:09,990 --> 00:15:17,889
generally when you run peach fuzz er it
will generate with no exclusions it will

162
00:15:17,889 --> 00:15:22,790
generate several thousand sometimes tens
of thousands or even a couple hundred

163
00:15:22,790 --> 00:15:29,719
thousand test cases so it's gonna run
for a while now that kind of brings me

164
00:15:29,720 --> 00:15:35,620
to an interesting thing that peach fuzz
will do the peach minus P command with

165
00:15:35,620 --> 00:15:40,459
you can split the funding run-up if you
have multiple machines with the peach

166
00:15:40,459 --> 00:15:46,268
browser software installed it's not
particularly fancy but it will do the

167
00:15:46,269 --> 00:15:50,490
job that doesn't only networking as I
said there but it just simply divide the

168
00:15:50,490 --> 00:15:54,610
number of tests iterations by the number
of machines so if you've got thirty

169
00:15:54,610 --> 00:15:58,220
thousand test iterations running on
three machines then it will break down

170
00:15:58,220 --> 00:16:04,389
the iterations as you see there with the
first machine running the first 10,000

171
00:16:04,389 --> 00:16:08,300
the second machine running the middle
chunk and then the last machine running

172
00:16:08,300 --> 00:16:13,300
the final chance so it will it will
definitely let you complete your fucking

173
00:16:13,300 --> 00:16:15,270
run faster

174
00:16:15,270 --> 00:16:23,449
and it went missing test cases but there
may be instances where running in

175
00:16:23,450 --> 00:16:28,460
parallel won't give you full coverage
I'm kind of getting it that I haven't

176
00:16:28,460 --> 00:16:33,900
done a whole lot of parallel fuzzing
running with peach but I have seen some

177
00:16:33,900 --> 00:16:41,420
crashes that were not reproducible on a
parallel fussing run that were if I ran

178
00:16:41,420 --> 00:16:47,610
all of the tests iterations on the same
machine so you can kind of play around

179
00:16:47,610 --> 00:16:55,270
with that here's a peach pit from the
online tutorial at the peach fuzz our

180
00:16:55,270 --> 00:17:05,010
website and basically what it's broken
into chunks the data models chance

181
00:17:05,010 --> 00:17:09,000
they're basically describes the data
that you're going to funds in this

182
00:17:09,000 --> 00:17:19,209
instance this was buzzing a what was it
a picture file so I defined the data

183
00:17:19,209 --> 00:17:26,170
model is defined as a blob the state
model re-creates the logic that peach

184
00:17:26,170 --> 00:17:33,880
needs to know in order to funds properly
so the state name just initial hey this

185
00:17:33,880 --> 00:17:37,950
is our only state this is the only one
we're gonna ride we're going to ride out

186
00:17:37,950 --> 00:17:50,950
the third PNG file and the folder we're
gonna read our sample files from this

187
00:17:50,950 --> 00:17:55,860
area so they'll be ready in from P&G
test files everything in there with a

188
00:17:55,860 --> 00:18:01,669
PNG extension they'll be twisted and
turned by the father and then output as

189
00:18:01,670 --> 00:18:07,790
a I think I call will you see it in a
minute I was dotted PNG the phone that

190
00:18:07,790 --> 00:18:09,889
that is what will be stayed in too

191
00:18:09,890 --> 00:18:16,340
in this case the MS Paint program so
this is what the process of doing that

192
00:18:16,340 --> 00:18:25,330
is controlled here in the state model
agent basically as a process that tells

193
00:18:25,330 --> 00:18:34,060
peach the platform that is running on as
well as platform-specific monitors which

194
00:18:34,060 --> 00:18:39,899
a monitor is some action that peach
takes an agent wraps up monitors so this

195
00:18:39,900 --> 00:18:44,560
guy named as monitor glass windows
debugger and these parameters here are

196
00:18:44,560 --> 00:18:52,360
specific speech commands that can be run
for instance there's the command line

197
00:18:52,360 --> 00:19:02,340
that I'm calling in order to do the
following the path for the windows

198
00:19:02,340 --> 00:19:06,409
debugger peach does not come with the
windows debugging tools you have to get

199
00:19:06,410 --> 00:19:15,080
those but there is a link on the beach
father dot com website that has links to

200
00:19:15,080 --> 00:19:21,500
Microsoft's website in order to download
the debugging tools start on call and

201
00:19:21,500 --> 00:19:30,030
CPU kill those are optional parameters
but the way in going through the

202
00:19:30,030 --> 00:19:36,520
tutorial they used the start on call and
CPU kill command switch start on call

203
00:19:36,520 --> 00:19:41,360
basically says okay don't start a
debugging session until I actually call

204
00:19:41,360 --> 00:19:50,659
in this case the MS Paint program and
CPU kill I believe that stops the

205
00:19:50,660 --> 00:19:59,130
phasing run if the CPU hits 100 percent
for a certain amount of time and not

206
00:19:59,130 --> 00:20:05,660
only am i why I'm also watching the heat
here watching the heap specifically for

207
00:20:05,660 --> 00:20:11,190
this executable and I've got my win
debug path here I don't know if it's a

208
00:20:11,190 --> 00:20:18,820
bug and peach father but you're not
supposed to need to specify the path to

209
00:20:18,820 --> 00:20:24,629
the windows debugger but unless I put it
in there I've never had it work when I

210
00:20:24,630 --> 00:20:29,200
try to validate the Peach Pit it says
peach comes back when they're saying hey

211
00:20:29,200 --> 00:20:34,910
we can't find the windows debugging tool
so I have at least on Windows I've

212
00:20:34,910 --> 00:20:42,570
always specify the debug path and then
the last part of this peach pit is the

213
00:20:42,570 --> 00:20:48,860
test which basically the test node wraps
everything up until speech what to do

214
00:20:48,860 --> 00:20:56,350
based on the info that you provided in
the earlier sections the publisher here

215
00:20:56,350 --> 00:21:02,949
in this case is saying okay I want to
I'm out I'm working with a file so I

216
00:21:02,950 --> 00:21:08,600
have to specify the specific file that
in this case that I'm using the funds so

217
00:21:08,600 --> 00:21:16,530
called funds . PNG that's generated as I
said earlier when the peach takes the

218
00:21:16,530 --> 00:21:23,670
raw file from the directory that I told
to look at it with its mutator and then

219
00:21:23,670 --> 00:21:29,360
it writes it to the buzz . PNG file and
then opens it up in MS Paint and that's

220
00:21:29,360 --> 00:21:33,719
how an iteration of buzzing this works

221
00:21:33,720 --> 00:21:37,059
the strategy class you don't have to
specify there

222
00:21:37,059 --> 00:21:42,309
I was playing around with it decided to
just tell it random random meaning it's

223
00:21:42,309 --> 00:21:48,710
gonna jump around in the various mutate
errs that peaches going to try that may

224
00:21:48,710 --> 00:21:54,090
give you more crashes or better crashes
and just running sequentially from top

225
00:21:54,090 --> 00:22:00,639
to bottom and the larger class there at
the bottom tells peach ok when I get

226
00:22:00,639 --> 00:22:06,740
crash or I'm updating the status to let
the user know in this case what

227
00:22:06,740 --> 00:22:14,190
iteration mi on its writing that to the
logs directory which a log if it doesn't

228
00:22:14,190 --> 00:22:18,909
exist the logs directory will be created
as a subdirectory from wherever you're

229
00:22:18,909 --> 00:22:23,600
running P so if you've installed peach
in the peach fuzz ur directory then

230
00:22:23,600 --> 00:22:27,649
there'll be a logs created under that
with all of the information in there

231
00:22:27,649 --> 00:22:34,789
about the fucking run have a peach pit
here to further command line program

232
00:22:34,789 --> 00:22:43,330
which takes one argument and this one I
created based on my need for there was a

233
00:22:43,330 --> 00:22:50,289
US space program that ran as an
automated job at my work and I decided

234
00:22:50,289 --> 00:22:54,700
well let me see how this thing holds up
under peach Bowser so with some help

235
00:22:54,700 --> 00:22:55,539
from

236
00:22:55,539 --> 00:23:04,289
some of the folks on the pitch visor
forums I created this and I go through

237
00:23:04,289 --> 00:23:09,779
this a little more quickly but basically
the data model in this case has two

238
00:23:09,779 --> 00:23:14,269
parts to it the program the name of the
program

239
00:23:14,269 --> 00:23:20,669
extract that exceed imposing and the
parameter which in this case the sex

240
00:23:20,669 --> 00:23:25,799
tractor pulls some stuff out of a
database and then write it to a

241
00:23:25,799 --> 00:23:27,129
directory

242
00:23:27,129 --> 00:23:33,918
no i didnt want two funds the extract
program itself I just wanted to give it

243
00:23:33,919 --> 00:23:40,909
a malformed directory parameter so
that's the reason the program itself

244
00:23:40,909 --> 00:23:45,399
this extract daddy XE has a once you
specify the program in need the space

245
00:23:45,399 --> 00:23:49,789
for the women are in the parameters so
it may be a little hard to see but there

246
00:23:49,789 --> 00:23:57,919
is a space right after the doc exe year
so like I said I'm trying to follow as

247
00:23:57,919 --> 00:24:03,769
the parameter itself not the extract
program directly so if you wanted to put

248
00:24:03,769 --> 00:24:08,109
these block of comments in here if you
wanted to find a command-line program

249
00:24:08,109 --> 00:24:12,389
which has more than one parameter you
just need to specify additional data

250
00:24:12,389 --> 00:24:22,620
model nodes with the parameters that you
need there

251
00:24:22,620 --> 00:24:31,929
in this case and I commented this
honestly as much for my benefit as

252
00:24:31,930 --> 00:24:37,410
anyone who might want this speech bit so
I can keep in mind I remember it

253
00:24:37,410 --> 00:24:45,690
the state model model writes a batch
file which peach then calls and you'll

254
00:24:45,690 --> 00:24:53,440
see it in the next screen but the first
run whether you're running a test a test

255
00:24:53,440 --> 00:25:01,690
with a 2-1 or not will always be the
program space and then the parameter so

256
00:25:01,690 --> 00:25:03,590
it will run as normal

257
00:25:03,590 --> 00:25:09,360
the subsequent Ryans will have the
program and then whatever the size of

258
00:25:09,360 --> 00:25:16,520
data is so and just like with the data
model the state model will have if you

259
00:25:16,520 --> 00:25:23,160
wanted to add additional parameters if
you had a command-line program that took

260
00:25:23,160 --> 00:25:29,020
two three four parameters you would just
add them as different nodes action nodes

261
00:25:29,020 --> 00:25:37,400
under the under the state no second
parameter third parameter and so on

262
00:25:37,400 --> 00:25:44,100
disclosed here specifically says OK
after you've written a batch file stop

263
00:25:44,100 --> 00:25:49,379
make the fussing run before you blow the
batch file away and recreated with your

264
00:25:49,380 --> 00:25:56,809
next extract that exe buzzed ring so
that in this case that gives me a clean

265
00:25:56,809 --> 00:26:03,080
run only got 15 string at a time when
the batch file

266
00:26:03,080 --> 00:26:09,928
agent is fairly similar to the previous
1 I'm running this on Windows so I

267
00:26:09,929 --> 00:26:16,100
called it the windows debugger I'm
specifying the command line to the batch

268
00:26:16,100 --> 00:26:20,590
file that peaches creating which I refer
which I called it just call program done

269
00:26:20,590 --> 00:26:28,668
that you keep doing that the there's the
windy bike paths and passed to the

270
00:26:28,669 --> 00:26:34,120
windows debugger the start on call in
this case as saying hey I wanna do the

271
00:26:34,120 --> 00:26:41,018
run I want to run the program which is
specified in the state model earlier the

272
00:26:41,019 --> 00:26:50,200
these two parameters I kind of played
around with because the extract exe

273
00:26:50,200 --> 00:26:57,059
program can be long running so you may
need the wait for eggs and on call and

274
00:26:57,059 --> 00:27:01,529
wait for eggs a timeout parameters
basically the first one says hey don't

275
00:27:01,529 --> 00:27:06,799
stop until the program's finished excuse
me I got that backwards the way for

276
00:27:06,799 --> 00:27:13,289
exile call says okay I wanna hold on
before I close and stop the creation of

277
00:27:13,289 --> 00:27:14,070
the call

278
00:27:14,070 --> 00:27:21,250
program dot bad which holds by call and
the way for exit on timeouts is ok peach

279
00:27:21,250 --> 00:27:30,039
don't cut this program off let it run to
completion and see if it crashes said

280
00:27:30,039 --> 00:27:35,090
you might need those for a long running
programs I've not done enough with peach

281
00:27:35,090 --> 00:27:41,620
father yet to know if that's necessary
in all cases but I left him in their

282
00:27:41,620 --> 00:27:47,639
town of his memory job for myself as
before I'm watching the heat to see if

283
00:27:47,639 --> 00:27:53,969
there are any crashes there pete has
this interesting little feature called a

284
00:27:53,970 --> 00:28:02,080
pop-up watcher so in this case when the
extract program if it crashes and it's

285
00:28:02,080 --> 00:28:07,039
not a fatal crash rather than sit there
and having to click the close on those

286
00:28:07,039 --> 00:28:13,129
windows has encountered an error and the
program's closing speech will close

287
00:28:13,130 --> 00:28:18,210
those automatically if you can get the
name of what's in the title bar on the

288
00:28:18,210 --> 00:28:25,860
window so when I ran this and it's going
along is turning and then it crashes but

289
00:28:25,860 --> 00:28:31,289
it's not a fatal crash or it's not an
exploitable crash or for the crash that

290
00:28:31,289 --> 00:28:35,760
peach can't reproduce rather than just
having like 50 60 or more of those

291
00:28:35,760 --> 00:28:40,200
windows there the pop up watching will
close them as they come up so you don't

292
00:28:40,200 --> 00:28:45,919
have a whole lot of clutter on your
screen and the test just like before it

293
00:28:45,919 --> 00:28:51,210
wraps up all of the other notes that you
have created the extract

294
00:28:51,210 --> 00:28:56,669
excuse me exclude expert here
specifically says hey I don't want to

295
00:28:56,669 --> 00:29:07,179
mess with the extract that exe name lead
out alone so that's the reason for this

296
00:29:07,179 --> 00:29:12,789
note here the in this case I was doing a
strategy of sequential I wanted to run

297
00:29:12,789 --> 00:29:15,510
through all the test cases from top to
bottom

298
00:29:15,510 --> 00:29:24,179
my publisher in this case calls the car
program dot map that created one batch

299
00:29:24,179 --> 00:29:28,570
program that peace will create I decided
to be a little different

300
00:29:28,570 --> 00:29:32,500
and lock it specifically to a different
directory I was running the peach

301
00:29:32,500 --> 00:29:38,909
command out of a different install
location in this case and here's the

302
00:29:38,909 --> 00:29:48,380
exclude note for the mutator these are
the mutator that I specifically didn't

303
00:29:48,380 --> 00:29:56,110
want to ride this makes for a shorter
fuzzing run but maybe not as complete a

304
00:29:56,110 --> 00:30:03,350
fussing around so you can if you don't
use this exclude this mutator is mowed

305
00:30:03,350 --> 00:30:08,149
exclude by default peach will run every
one of them you taters so you may want

306
00:30:08,149 --> 00:30:14,840
to you may want to exclude certain
mediators in some circumstances and here

307
00:30:14,840 --> 00:30:18,759
at the bottom note the misspellings here

308
00:30:18,759 --> 00:30:23,509
size data violence mutator and size of
Arts mutator if I'd say that's the bugs

309
00:30:23,509 --> 00:30:27,139
that I mentioned earlier if I had left
those spelled correctly then Pete would

310
00:30:27,139 --> 00:30:40,490
have excluded them in terms of logging
and jump out to

311
00:30:40,490 --> 00:30:50,280
when peach logs items it creates a
creative director under the logs

312
00:30:50,280 --> 00:30:54,920
directory with the pit named the test if
you have multiple testifying in appear

313
00:30:54,920 --> 00:31:01,929
and then a date timestamp I put the
arrows on here just to have they have an

314
00:31:01,929 --> 00:31:05,800
easier way to find what I was looking
for but if you were to get a

315
00:31:05,800 --> 00:31:10,020
reproducible crash you would say
something like this the status that text

316
00:31:10,020 --> 00:31:17,520
file is always there and it tells you
how far you're into opposing run so in

317
00:31:17,520 --> 00:31:22,470
this case speech found a fall at this
iteration so it tried to rerun it to see

318
00:31:22,470 --> 00:31:29,929
if it was reproducible and it was so
within that directory where there's a

319
00:31:29,929 --> 00:31:37,610
faults and then it says hey it ran it I
did exploitable so it gave me a couple

320
00:31:37,610 --> 00:31:46,959
of memory addresses and this was the
inspiration that the reproducible crash

321
00:31:46,960 --> 00:31:53,300
happened on initial holds the the same
information that you see here but the

322
00:31:53,300 --> 00:31:58,440
first pass of it the first iteration
caused the crash the second and the one

323
00:31:58,440 --> 00:32:04,530
that peach deemed exploitable is here so
I was facing the extract program so

324
00:32:04,530 --> 00:32:12,780
action one output is the non-visible
part of the buzzing run that I wanted to

325
00:32:12,780 --> 00:32:17,440
do which means hey don't mess with the
extract DAC I wanna leave that alone the

326
00:32:17,440 --> 00:32:23,309
action to is more interesting because it
tells you the specific strain that

327
00:32:23,309 --> 00:32:31,040
caused the crash so you can reproduce it
if you want a ride up some Python or

328
00:32:31,040 --> 00:32:37,129
parole what a view to reproduce a crash
and then we've got a stack trace hear

329
00:32:37,130 --> 00:32:38,140
that

330
00:32:38,140 --> 00:32:49,680
windows debugging tools logged I think
it's at the bottom that the info here

331
00:32:49,680 --> 00:32:55,300
the user mode right access violations
that are not mere Maula mere naal are

332
00:32:55,300 --> 00:32:59,190
exploitable I haven't tried to write an
exploit for this particular program

333
00:32:59,190 --> 00:33:03,710
honestly I ran this on a 64 bit machine
so this one may be beyond my current

334
00:33:03,710 --> 00:33:08,110
level of skill but the information here

335
00:33:08,110 --> 00:33:18,240
needed to reproduce the crash as well as
to write up and exploit should be all

336
00:33:18,240 --> 00:33:28,910
that you need in order to get started
this is the excuse me the star floor by

337
00:33:28,910 --> 00:33:33,450
the windows debugger and you can see
here at the bottom it says the same

338
00:33:33,450 --> 00:33:38,310
thing in a stack trace that user mode
right access violations that are not

339
00:33:38,310 --> 00:33:45,500
there no llore exploitable so that's
what a peach consider this what you'll

340
00:33:45,500 --> 00:33:51,490
see when you see a reproducible crash
that peach teams exploitable if it's a

341
00:33:51,490 --> 00:33:57,760
false positive or something that peach
could not run through twice it will say

342
00:33:57,760 --> 00:34:04,590
hey I couldn't reproduce it and you'll
see something like a status which has

343
00:34:04,590 --> 00:34:12,090
only one crash in it and within the nine
reproducible it may say unknown it may

344
00:34:12,090 --> 00:34:16,700
say something else but within that
directory

345
00:34:16,699 --> 00:34:25,960
you'll see the iteration where the crash
happened the action one in this case the

346
00:34:25,960 --> 00:34:30,350
extract program that was facing action
to the specific parameter that caused

347
00:34:30,350 --> 00:34:32,659
the crash and then

348
00:34:32,659 --> 00:34:38,450
just a debugger description that said
hey this was the first time I had this

349
00:34:38,449 --> 00:34:41,759
happen but I couldn't get it to happen
again so I'm gonna assume it's not

350
00:34:41,760 --> 00:34:44,429
reproducible it's not exploitable and
I'm just going to go to the next

351
00:34:44,429 --> 00:34:52,899
iteration so it's kind of a run-through
of what you could see in terms of

352
00:34:52,899 --> 00:34:59,009
logging by peach fuzz or is it pretty
decent as far as as far as i'm concern

353
00:34:59,010 --> 00:35:11,230
birth sweet it's not really a father per
se is sweet but I like the repeater for

354
00:35:11,230 --> 00:35:19,030
manual fuzzing I do a lot of work with
web application testing so sweet for

355
00:35:19,030 --> 00:35:26,240
manual testing of web applications but
the decoder and compare seeing windows

356
00:35:26,240 --> 00:35:30,799
in perhaps we are pretty handy as well
and this is a goal that came out

357
00:35:30,799 --> 00:35:43,210
terrible a screenshot of the sweet
repeater function I've got the areas and

358
00:35:43,210 --> 00:35:49,440
red rectangle which specify where
specifically I was wanting to funds in

359
00:35:49,440 --> 00:35:53,940
this case in this case I was wanting to
fuzz the parameter passes that image

360
00:35:53,940 --> 00:36:01,710
handler died I S H X

361
00:36:01,710 --> 00:36:07,990
and the I was wanting to further cookie
value instead rescues me the cookie

362
00:36:07,990 --> 00:36:12,689
value also I just put five day in there
to kind of give myself a little reminder

363
00:36:12,690 --> 00:36:16,930
hey this is where I wanna change
something so Kelly Lenox gone to the

364
00:36:16,930 --> 00:36:24,810
dark side a little bit there's a number
of tools they're bad I think it stands

365
00:36:24,810 --> 00:36:28,630
for brute force exploit detector but I'm
honestly not sure it's a network

366
00:36:28,630 --> 00:36:35,410
protocol father handles those you see it
on the screen as well as a few others I

367
00:36:35,410 --> 00:36:41,589
use it mostly for HTTP but I've used it
for FTP as well use a set list of

368
00:36:41,589 --> 00:36:46,670
strange proposing so it doesn't do
mutation but it's written in Perl so you

369
00:36:46,670 --> 00:36:50,760
can add your own strings by just
changing the code is not that big a deal

370
00:36:50,760 --> 00:36:56,710
it's a good general use funds are you
kind of fired forget it but as with a

371
00:36:56,710 --> 00:37:00,710
lot of tools in Cali Linux I'll start a
packet capture before running it so I

372
00:37:00,710 --> 00:37:08,050
can see the specific value that caused
the crash if one occurs this is a copy

373
00:37:08,050 --> 00:37:15,410
and paste from the bad code with the
specific strains in it you can see they

374
00:37:15,410 --> 00:37:19,720
have their authors broken down into
overflow strings format strings and so

375
00:37:19,720 --> 00:37:27,589
forth so bad water cycle through all of
these test cases when you kick it off

376
00:37:27,589 --> 00:37:33,480
dunno it's basically version too bad

377
00:37:33,480 --> 00:37:39,880
uses a little better list of preset
strings it's also written in Perl so you

378
00:37:39,880 --> 00:37:45,570
can hack it up pretty easy another fire
and forget buzzer and these are the

379
00:37:45,570 --> 00:37:50,940
strings that it uses you can see there
are a few more in there like I said you

380
00:37:50,940 --> 00:37:52,079
know you can

381
00:37:52,079 --> 00:38:01,999
it's perot code so you can add your own
with no big deal that pawn it's good for

382
00:38:01,999 --> 00:38:06,669
finance directory traversal stuff but
when I've used it I had to hand it to

383
00:38:06,670 --> 00:38:12,269
the traversal engine to look for
specific target files that I was seeking

384
00:38:12,269 --> 00:38:18,788
also parole so it's pretty
understandable and easy to modify I

385
00:38:18,789 --> 00:38:23,339
found out that poem most useful after
I've done a decent amount of

386
00:38:23,339 --> 00:38:28,640
reconnaissance to learn the machine well
because the more specific you can tell

387
00:38:28,640 --> 00:38:34,410
dot dot pollen hey this is a Windows
boxes UNIX box it will do a better job

388
00:38:34,410 --> 00:38:38,759
and then run a little quicker because it
won't have to make assumptions on the

389
00:38:38,759 --> 00:38:43,369
target that it's running on and that's
why I mentioned there if you're running

390
00:38:43,369 --> 00:38:49,739
it used the minus even minus X
parameters to really get you get you a

391
00:38:49,739 --> 00:38:55,979
good run through to see if there is a
directory traversal problem on the boxer

392
00:38:55,979 --> 00:39:02,558
testing don't forget the minus in a
switch HTTP methods between get posed if

393
00:39:02,559 --> 00:39:09,279
you're doing it on a web server because
sometimes the get parameters or the post

394
00:39:09,279 --> 00:39:13,839
parameters may not be sanitized as early
as they should be

395
00:39:13,839 --> 00:39:22,180
this is a screenshot of the dot dot
poland colored with D specific files

396
00:39:22,180 --> 00:39:27,339
that it looks for by default in Windows
and Unix and then it was the extra files

397
00:39:27,339 --> 00:39:34,058
section that I edited giving the
specific path where I thought the file

398
00:39:34,059 --> 00:39:38,190
was located the target file is located
in there and then I use them I C

399
00:39:38,190 --> 00:39:49,000
parameter so it would look for that
specifically some other modules

400
00:39:49,000 --> 00:39:56,440
with anybody used any of the other
modules and Metasploit ok there there's

401
00:39:56,440 --> 00:40:03,550
several of them there you can see there
I've got the path to the specific folder

402
00:40:03,550 --> 00:40:06,950
if you're not sure of it or you can just
do a search further within myself

403
00:40:06,950 --> 00:40:08,910
console

404
00:40:08,910 --> 00:40:16,230
SMB and HTTP fathers I found to be
pretty good at crashing things not all

405
00:40:16,230 --> 00:40:19,460
the modules support the threats
parameter but if it does bump it up

406
00:40:19,460 --> 00:40:24,990
it'll help your fucking run finish a
little faster the Metasploit modules

407
00:40:24,990 --> 00:40:28,609
give you pretty good feedback on what
caused the crash it'll give you the

408
00:40:28,610 --> 00:40:32,620
strain that caused the crash
specifically but just to be safe I still

409
00:40:32,620 --> 00:40:41,089
run a packet capture 1 I'm using those
the buzzer . barbie is full give you the

410
00:40:41,090 --> 00:40:45,090
details on how the fuzz strings are
created and I'm no Ruby expert by any

411
00:40:45,090 --> 00:40:52,460
means I've only seen a few lines of ruby
colored but it was good for me in how to

412
00:40:52,460 --> 00:40:55,970
learn how to customize my own father's
because there were some not only some

413
00:40:55,970 --> 00:41:02,330
good five strings in there but also some
good ideas on working strings that would

414
00:41:02,330 --> 00:41:08,520
cause interesting behavior of crashes
definitely check out that father Darby

415
00:41:08,520 --> 00:41:15,950
rebbie code if you find yourself kind of
stuck and i cant get a crash but I just

416
00:41:15,950 --> 00:41:21,689
feel like this thing will crash the
there's some good stuff there that may

417
00:41:21,690 --> 00:41:28,130
be kind of get your brain juices flowing
tears login corrupt and tedious login

418
00:41:28,130 --> 00:41:32,210
username are good for opposing sequel
sorry I haven't done a whole lot of

419
00:41:32,210 --> 00:41:36,190
fussing sequel server but when I was
looking at the ruby colored

420
00:41:36,190 --> 00:41:45,800
it's a smidge another day I think it the
packets that these two fathers create

421
00:41:45,800 --> 00:41:56,460
are well a lot of it it specifically
written for single server 2000 so after

422
00:41:56,460 --> 00:41:59,540
a bit of thumbing through the internet I
found a couple links on Microsoft's

423
00:41:59,540 --> 00:42:06,540
website that defined the TES protocol
and that second link has the TDS

424
00:42:06,540 --> 00:42:11,369
versions used in single server so you
can tweak the ruby color bid to target

425
00:42:11,369 --> 00:42:18,119
more specifically more modern versions
of sequel Sarwar the those HTTP fathers

426
00:42:18,119 --> 00:42:21,839
that I have mentioned they're they're
good I've had gotten some crashes with

427
00:42:21,839 --> 00:42:27,630
those along with the assembly to
negotiate corrupt Pfizer so

428
00:42:27,630 --> 00:42:30,710
Metasploit has some good pricing models
in it

429
00:42:30,710 --> 00:42:37,109
their fathers in in map and i actually
didn't find out until I was just knows

430
00:42:37,109 --> 00:42:41,450
in through the Internet scripts
directions like crap there's followers

431
00:42:41,450 --> 00:42:48,700
there so maybe are attacking the DNA as
far as I haven't used that one year the

432
00:42:48,700 --> 00:42:52,359
pH HTTP PHP self-doubt excess

433
00:42:52,359 --> 00:42:59,160
I think that's fairly new I don't
remember that shown up before the last

434
00:42:59,160 --> 00:43:05,819
maybe next to last update the calendar
skies did a TV for my father has been

435
00:43:05,819 --> 00:43:10,990
there for a while and I found it helpful
it's not quite as good as producing

436
00:43:10,990 --> 00:43:20,930
crashes as the Metasploit modules but
it's pretty decent spike is another

437
00:43:20,930 --> 00:43:26,799
father I found it kind of tough to use
because I'm not a big guy even though

438
00:43:26,800 --> 00:43:28,810
I've written C sharp for a while

439
00:43:28,810 --> 00:43:34,490
SIA still arcane to me but there's a
really good and I mean really good

440
00:43:34,490 --> 00:43:41,350
tutorial on Spike at that link Stephen
Bradshaw think I think is the guys name

441
00:43:41,350 --> 00:43:46,370
and he really breaks down these
difficult to you are difficult for me to

442
00:43:46,370 --> 00:43:51,500
get spy concepts into understandable
language so if you're interested in

443
00:43:51,500 --> 00:43:56,770
learning spike definitely check that
tutorial our ically comes with a number

444
00:43:56,770 --> 00:44:04,420
of pre-built spikes but I've always had
a crown on a little bit there spike

445
00:44:04,420 --> 00:44:10,640
basically as two commands a generics and
TCP and generic UDP which sends packets

446
00:44:10,640 --> 00:44:12,150
respectively

447
00:44:12,150 --> 00:44:18,010
the documentation on Spike well I mean
let's just be honest it stinks but the

448
00:44:18,010 --> 00:44:24,550
tutorial really helped me more than
anything else the tutorial at in four

449
00:44:24,550 --> 00:44:29,010
seconds to resource really helped me
more than anything else to get a handle

450
00:44:29,010 --> 00:44:35,980
on Spike to find the five strings it's
not necessarily easily I did do a fair

451
00:44:35,980 --> 00:44:42,880
amount of grabbing to get it but the
spike dot C code in the area then you

452
00:44:42,880 --> 00:44:48,430
look for fun strange you'll see the
first rings that spike uses but and

453
00:44:48,430 --> 00:44:51,350
somebody correct me if I'm wrong but as
far as I've been able to find the

454
00:44:51,350 --> 00:44:55,650
default Cali Linux installed doesn't
come with the spike source you have to

455
00:44:55,650 --> 00:45:02,470
find it and after a lot of hunting I
found this causing dot org website with

456
00:45:02,470 --> 00:45:06,540
a link that had spiked file it at the
spikes or Senate so I grabbed it and

457
00:45:06,540 --> 00:45:11,640
stuck it on my calendar Linux box so I
can referred to it like i said im no

458
00:45:11,640 --> 00:45:18,020
expert but having the sources been
helpful to see what does drink spiked

459
00:45:18,020 --> 00:45:22,400
uses so I've got some sample spikes here

460
00:45:22,400 --> 00:45:30,770
proposing an HTTP GET basically and I've
got it well commented here they are used

461
00:45:30,770 --> 00:45:33,250
sweet intercept the HTTP GET and

462
00:45:33,250 --> 00:45:38,710
got a spike built from it

463
00:45:38,710 --> 00:45:44,390
a string basically is a constant string
variable is the specific thing that you

464
00:45:44,390 --> 00:45:55,600
want to buzz so for the first past the
HTTP GET will have the variable variable

465
00:45:55,600 --> 00:46:00,200
that you see here which is just a
regular user agent string the subsequent

466
00:46:00,200 --> 00:46:06,180
passes will have the funds strings and
started by Spike so when you kick off a

467
00:46:06,180 --> 00:46:12,240
buzzing around with spike it probably
gonna run for a while so with a lot of

468
00:46:12,240 --> 00:46:15,359
the other Cali links to as you want to
start a packet capture before that so

469
00:46:15,360 --> 00:46:21,590
you can see the specific buzz training
that caused your crash got another spike

470
00:46:21,590 --> 00:46:28,000
here for phasing HTV get and this case I
was causing a variable to the image

471
00:46:28,000 --> 00:46:30,050
handler

472
00:46:30,050 --> 00:46:37,650
ashtec's page so there's my this will be
passed as normal a constant and then the

473
00:46:37,650 --> 00:46:42,570
first time through it'll pass with this
variable and then subsequent times it

474
00:46:42,570 --> 00:46:48,440
will insert the first ring the got a
carriage return line feed here about

475
00:46:48,440 --> 00:46:56,200
four lines down that make sure that the
GET request is properly formed and

476
00:46:56,200 --> 00:47:04,609
another spike for causing an HTTP here
in this case I was browsing the web

477
00:47:04,610 --> 00:47:10,370
resource died accidentally

478
00:47:10,370 --> 00:47:15,100
my guests the best word to describe it
is the it's an internal Microsoft thing

479
00:47:15,100 --> 00:47:24,790
if you're running a web application see
spike revising HTTP posed it's pretty

480
00:47:24,790 --> 00:47:37,630
similar to the gets the difference is
near the bottom and Stephen Bradshaw's

481
00:47:37,630 --> 00:47:45,840
primarily on Spike at the link earlier I
don't think goes into real good detail

482
00:47:45,840 --> 00:47:52,460
on the US so I had to kind of figure
this out these this block size string

483
00:47:52,460 --> 00:47:57,990
block starting block and are there so
that the content links of the post will

484
00:47:57,990 --> 00:48:05,560
be calculated correctly it's not your in
this case I was facing get something

485
00:48:05,560 --> 00:48:09,900
running on IIS is just gonna drop the
POST request so you need to have that

486
00:48:09,900 --> 00:48:16,490
content linked properly calculated and
that's what the block size strength in

487
00:48:16,490 --> 00:48:19,740
the block started blocking and so when
you've got a block started on blocking

488
00:48:19,740 --> 00:48:24,299
and it will calculate everything that's
wrapped within that and then throw it

489
00:48:24,300 --> 00:48:30,720
into the content link so I'm defining in
this case a five digit long content link

490
00:48:30,720 --> 00:48:34,620
there on the block size training and
then the block starting block in like I

491
00:48:34,620 --> 00:48:40,310
said will spike will calculate that
properly and throw it in before it jumps

492
00:48:40,310 --> 00:48:48,470
the HTTP POST request on the wire peach
fuzz Iran Cali Linux I'm only running a

493
00:48:48,470 --> 00:48:53,629
little bit like I said I mostly running
on Windows I don't have as much

494
00:48:53,630 --> 00:49:00,819
familiarity with it but it's basically
the same as on Windows the only

495
00:49:00,819 --> 00:49:07,299
difference is it needs the model
packages the I guess it's open source

496
00:49:07,299 --> 00:49:12,269
version of the.net framework if you're
on a you buy into a Debian distro you

497
00:49:12,269 --> 00:49:17,500
can just do an apt-get install model
complete the directions on the peach

498
00:49:17,500 --> 00:49:25,359
fuzz I dot com website will walk you
through that as well I some general tips

499
00:49:25,359 --> 00:49:29,930
and tricks mess around with your target
program first before doesn't it you

500
00:49:29,930 --> 00:49:35,210
don't have to note inside and out but
the better you understand how it works

501
00:49:35,210 --> 00:49:42,690
properly you can then Taylor you're
going to break it so you can kind of

502
00:49:42,690 --> 00:49:46,470
when you know how it works or get an
understanding of how it works correctly

503
00:49:46,470 --> 00:49:51,430
then you can ask yourself the question
what are the best or worst inputs I can

504
00:49:51,430 --> 00:49:56,259
pass to it that will cause damage a lot
of programmers and I'm including myself

505
00:49:56,259 --> 00:50:02,079
in this category code for certain types
of bad input but it's almost impossible

506
00:50:02,079 --> 00:50:06,190
to catch all instances programmers like
to blacklist stuff rather than white

507
00:50:06,190 --> 00:50:11,119
list but try mixing up special
characters and spaces I carriage returns

508
00:50:11,119 --> 00:50:18,250
online feed stuff I just threw an
example up there they first ring that

509
00:50:18,250 --> 00:50:23,259
have actually gotten some programs to
crash just with that specific text you

510
00:50:23,259 --> 00:50:29,880
see there on the screen like I said
spaces special characters format strings

511
00:50:29,880 --> 00:50:38,599
there some dotnet platform examples
those are specific to see sharp but if

512
00:50:38,599 --> 00:50:43,750
you're using a BB dot net web
application you can do a little looking

513
00:50:43,750 --> 00:50:49,430
on Microsoft's website to see the format
strings that they used opinion seems to

514
00:50:49,430 --> 00:50:53,589
be varied on whether format string
attacks are possible with the.net

515
00:50:53,589 --> 00:50:54,990
platform I

516
00:50:54,990 --> 00:50:58,149
going under the assumption that they are
I just haven't found the right one yet

517
00:50:58,150 --> 00:51:08,710
so I always insert some stuff format
string like when I'm using virtual

518
00:51:08,710 --> 00:51:14,750
machine KVM virtual machine software is
really good at lower your total cost of

519
00:51:14,750 --> 00:51:20,800
doing fighting Oracle VirtualBox VMware
is good whichever you prefer that goes

520
00:51:20,800 --> 00:51:23,800
for spare hardware wireless access
points

521
00:51:23,800 --> 00:51:29,810
dozens disruptive by nature so you got
to be prepared to reboot your target and

522
00:51:29,810 --> 00:51:34,430
if you're doing it live of course make
sure you let folks know about your

523
00:51:34,430 --> 00:51:38,990
network admins programmers and stuff
because especially if you've got some

524
00:51:38,990 --> 00:51:42,810
security people who were on the ball
like they should be watching the logs

525
00:51:42,810 --> 00:51:48,290
then they start seeing a weird traffic
they should get a little nervous the

526
00:51:48,290 --> 00:51:53,100
death of that modern that I have some
free time limited virtual machines that

527
00:51:53,100 --> 00:51:55,700
are good for funding targets

528
00:51:55,700 --> 00:52:01,000
dot com has some challenges via
downloadable virtual machines not

529
00:52:01,000 --> 00:52:07,680
buzzing specific but you can use them to
focus on and exploit gmail.com has some

530
00:52:07,680 --> 00:52:14,069
good writeup on on fighting there i read
through those papers a couple times just

531
00:52:14,070 --> 00:52:16,160
kind of refresh my memory

532
00:52:16,160 --> 00:52:22,250
start with a short fuzzing run at first
to make sure everything's good I guess

533
00:52:22,250 --> 00:52:28,420
it if you're using it on a Windows
platform peach will do just a test run

534
00:52:28,420 --> 00:52:35,320
or just run for a few iterations to make
sure everything is good just checkin on

535
00:52:35,320 --> 00:52:39,900
the uneven with automated posing for
Windows you wanna see me like your

536
00:52:39,900 --> 00:52:42,800
production environment as closely as
possible

537
00:52:42,800 --> 00:52:46,440
antivirus antimalware software

538
00:52:46,440 --> 00:52:53,470
including Microsoft email they may give
you problems depending on how paranoid

539
00:52:53,470 --> 00:52:58,290
they are they may crash or throw up a
message saying it as an attack or

540
00:52:58,290 --> 00:53:03,880
whatever you may want that you may not
depends on you know your specific

541
00:53:03,880 --> 00:53:13,310
circumstances with peach it will run
your target out of memory after a while

542
00:53:13,310 --> 00:53:18,109
the your target will just really start
to bog down and slow down so as to be

543
00:53:18,109 --> 00:53:19,560
prepared for that

544
00:53:19,560 --> 00:53:23,839
Control Alt Delete is your friend the
girl three finger salute on Windows that

545
00:53:23,839 --> 00:53:30,078
we all know and love for Cali Linux I
usually start with more general use

546
00:53:30,079 --> 00:53:37,170
fathers like bad and do not and then go
down the list . up owner whatever but it

547
00:53:37,170 --> 00:53:42,319
really depends on what I'm buzzing but I
guess this really the next one really

548
00:53:42,319 --> 00:53:47,109
applies to both Windows and Cali check
the closing source to make sure that it

549
00:53:47,109 --> 00:53:51,400
sent in the strings that you expect you
might need to customize them based on

550
00:53:51,400 --> 00:53:55,970
what you're saying is you're doing a
white box test for instance where you

551
00:53:55,970 --> 00:54:02,709
know the platform then you can if you
know you're running a PHP application on

552
00:54:02,710 --> 00:54:08,780
UNIX then you can add in specific PHP
format strings for instance if you know

553
00:54:08,780 --> 00:54:13,190
you're running IIS and its csharp web
application you may want to throw in

554
00:54:13,190 --> 00:54:21,859
some csharp specific stuff like reserved
words or nulls or things like that but

555
00:54:21,859 --> 00:54:26,470
definitely on Cali I always start a
packet capture before beginning of

556
00:54:26,470 --> 00:54:31,669
buzzing rod because not all the tools
really give you good feedback with a

557
00:54:31,670 --> 00:54:38,300
packet capture you know you can see
exactly where the exactly what you say

558
00:54:38,300 --> 00:54:45,260
that caused the crash either Wireshark
RTC they don't whichever you prefer

559
00:54:45,260 --> 00:54:51,600
so like I said in the beginning my
samples are on that get home as you see

560
00:54:51,600 --> 00:54:58,740
there grab them fool around with them
but really you want to make buzzing

561
00:54:58,740 --> 00:55:02,310
buzzing excuse me part of your
development of QA process it does help

562
00:55:02,310 --> 00:55:06,360
but like I said there was a smiley face
it might drive your programmers nights

563
00:55:06,360 --> 00:55:09,910
which you know that's good for him it
doesn't hurt him to get a little

564
00:55:09,910 --> 00:55:16,149
stressed every now and then but I'll be
around stop introduce yourself I mean

565
00:55:16,150 --> 00:55:21,690
just walk upto you start talking so be
prepared for that and my email address

566
00:55:21,690 --> 00:55:29,250
is there at the bottom so hit me up if
you have questions any questions

567
00:55:29,250 --> 00:55:30,530
comments

568
00:55:30,530 --> 00:55:43,559
yeah

569
00:55:43,559 --> 00:55:54,430
done it all that much but generally when
peach tells me that something's

570
00:55:54,430 --> 00:56:00,999
exploitable the first thing I'm gonna
try to do is get the stack trace the

571
00:56:00,999 --> 00:56:06,738
original stack trace on one screen and
then I'll code up something in Perl or

572
00:56:06,739 --> 00:56:10,959
Python or something I can just blow out
really quick with that exact posturing

573
00:56:10,959 --> 00:56:16,379
and then I'll see if I get a crash in
exactly that same spot if it does happen

574
00:56:16,380 --> 00:56:22,779
then I'll probably run through I would
suggest running through that same proof

575
00:56:22,779 --> 00:56:26,759
of concept once twice three times even
after rebooting the machine to make sure

576
00:56:26,759 --> 00:56:33,779
that crashed in exactly that same spot
if that happens then you're well on your

577
00:56:33,779 --> 00:56:38,189
way to writing an exploit because at
that point if you can at that point if

578
00:56:38,189 --> 00:56:42,519
you getting a crash at the same spot
with the same string and you see the

579
00:56:42,519 --> 00:56:47,109
same registers being overwritten then

580
00:56:47,109 --> 00:56:52,009
you're about halfway there at that point
is just about you know make in making

581
00:56:52,009 --> 00:56:57,480
some shellcode and finally getting an
obsolete or something so you can see on

582
00:56:57,480 --> 00:57:07,579
Sunday

583
00:57:07,579 --> 00:57:15,109
yes if like i said im no expert exploit
developer only written a couple and none

584
00:57:15,109 --> 00:57:20,549
of them I felt confident enough to try
to send into the exploit these guys but

585
00:57:20,549 --> 00:57:29,630
yeah Depp will give you heartburn if
you're trying to write exploits and I

586
00:57:29,630 --> 00:57:35,180
see somebody out there so I guess you
run into that problem and ASLR address

587
00:57:35,180 --> 00:57:41,029
space layout randomization yeah that'll
that'll give you if it's too but what

588
00:57:41,029 --> 00:57:48,069
you can do is get a you can get one of
the older GM's off the death . modern .

589
00:57:48,069 --> 00:57:54,349
ie they got XP the M's out there where
you can turn off I don't think XP has a

590
00:57:54,349 --> 00:58:00,009
SLR on it but you can turn off down
there and then run yer run your program

591
00:58:00,009 --> 00:58:03,819
so you can have something that will give
you a little cleaner path toward

592
00:58:03,819 --> 00:58:06,829
exploitation I've never tried to bypass

593
00:58:06,829 --> 00:58:13,509
SLR like i said im very much a newbie on
writing exploits but I know it's

594
00:58:13,509 --> 00:58:20,430
possible I just don't have the skills
yet to do it any other questions

595
00:58:20,430 --> 00:58:27,799
comments that's all for me thank you for
listening

