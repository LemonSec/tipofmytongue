1
00:00:11,040 --> 00:00:12,780
foreign

2
00:00:12,780 --> 00:00:15,780
check

3
00:00:16,320 --> 00:00:19,680
uh thanks to document for that very cool

4
00:00:19,680 --> 00:00:23,400
introduction so uh just a special shout

5
00:00:23,400 --> 00:00:25,980
out to darkmon he is one of my mentors

6
00:00:25,980 --> 00:00:28,980
when they started way back 2017 and

7
00:00:28,980 --> 00:00:32,220
definitely if if he's not the one who

8
00:00:32,220 --> 00:00:35,600
guided me I'm not here today

9
00:00:39,420 --> 00:00:41,660
foreign

10
00:00:45,690 --> 00:00:48,790
[Music]

11
00:00:59,219 --> 00:01:02,879
guys uh thanks everyone for uh well no

12
00:01:02,879 --> 00:01:05,820
choice attending my my top today and uh

13
00:01:05,820 --> 00:01:08,159
I'm going to talk about understanding

14
00:01:08,159 --> 00:01:09,479
and recreating process injection

15
00:01:09,479 --> 00:01:11,640
techniques through an injector

16
00:01:11,640 --> 00:01:14,460
so first of all I'd like to introduce

17
00:01:14,460 --> 00:01:17,939
myself uh my name is sariano I'm also

18
00:01:17,939 --> 00:01:20,939
known as arizi I'm not sure if you've

19
00:01:20,939 --> 00:01:23,400
seen my handles throughout some ctfs

20
00:01:23,400 --> 00:01:26,580
online on or some blog posts or just a

21
00:01:26,580 --> 00:01:29,220
run random tweets about uh information

22
00:01:29,220 --> 00:01:31,619
security uh

23
00:01:31,619 --> 00:01:34,080
currently working as or leading the team

24
00:01:34,080 --> 00:01:36,979
of our red team operations at Theos

25
00:01:36,979 --> 00:01:40,159
Cyber Solutions and I've

26
00:01:40,159 --> 00:01:41,880
also

27
00:01:41,880 --> 00:01:43,799
worked as a blue teamer before before

28
00:01:43,799 --> 00:01:46,740
transitioning as a red teamer

29
00:01:46,740 --> 00:01:49,740
uh I've also been a search collector as

30
00:01:49,740 --> 00:01:51,899
dachman mentioned I've got a lot of

31
00:01:51,899 --> 00:01:54,659
certs uh mainly focused on red teaming

32
00:01:54,659 --> 00:01:57,240
which is why I'm red teamer now and I'm

33
00:01:57,240 --> 00:01:59,939
also focusing now on red team research

34
00:01:59,939 --> 00:02:02,040
and Mallory development which is why I

35
00:02:02,040 --> 00:02:03,659
did this tool

36
00:02:03,659 --> 00:02:08,459
so first let's set some expectations uh

37
00:02:08,459 --> 00:02:10,919
you won't learn any new fancy tools or

38
00:02:10,919 --> 00:02:12,120
techniques today

39
00:02:12,120 --> 00:02:13,560
uh

40
00:02:13,560 --> 00:02:15,599
if you're gonna use the tool that I'm

41
00:02:15,599 --> 00:02:17,700
gonna present uh please use it at your

42
00:02:17,700 --> 00:02:22,680
own risk uh don't uh do use it on you

43
00:02:22,680 --> 00:02:23,760
know

44
00:02:23,760 --> 00:02:27,120
and lastly our main purpose for today is

45
00:02:27,120 --> 00:02:30,480
uh to learn process injection

46
00:02:30,480 --> 00:02:32,640
so let's run through the agenda for

47
00:02:32,640 --> 00:02:35,340
today uh let's run with a process

48
00:02:35,340 --> 00:02:38,340
injection primer uh let's have uh let's

49
00:02:38,340 --> 00:02:40,440
revisit some techniques that are well

50
00:02:40,440 --> 00:02:41,220
known

51
00:02:41,220 --> 00:02:43,620
let's go through some API calls since

52
00:02:43,620 --> 00:02:45,060
it's the most

53
00:02:45,060 --> 00:02:47,700
significant part of doing malware

54
00:02:47,700 --> 00:02:51,060
development lastly it's the tool

55
00:02:51,060 --> 00:02:53,459
so now

56
00:02:53,459 --> 00:02:56,340
let's start with some information about

57
00:02:56,340 --> 00:02:58,379
process injection

58
00:02:58,379 --> 00:03:00,599
so process injection is a method of

59
00:03:00,599 --> 00:03:02,819
executing an arbitrary code in the

60
00:03:02,819 --> 00:03:05,640
address space of a separate process so

61
00:03:05,640 --> 00:03:08,420
basically it's uh it's a way

62
00:03:08,420 --> 00:03:12,840
it's a way to execute a Shell Code as

63
00:03:12,840 --> 00:03:15,540
everyone knows or childcode gives you a

64
00:03:15,540 --> 00:03:19,680
callback if uh well default or

65
00:03:19,680 --> 00:03:22,260
basically people use the shell codes for

66
00:03:22,260 --> 00:03:24,959
a callback in their c2s so an example

67
00:03:24,959 --> 00:03:27,300
here in the image is uh meter Prater

68
00:03:27,300 --> 00:03:28,680
Shell Code

69
00:03:28,680 --> 00:03:31,500
and uh process injection is usually used

70
00:03:31,500 --> 00:03:34,379
uh to execute under the context of a

71
00:03:34,379 --> 00:03:37,379
legitimate process so if uh blue teamer

72
00:03:37,379 --> 00:03:39,900
sees a process injection or a callback

73
00:03:39,900 --> 00:03:42,239
happening from an Explorer the taxi

74
00:03:42,239 --> 00:03:46,319
versus an a.x or a random.x if they

75
00:03:46,319 --> 00:03:48,959
Google it you would you wouldn't see any

76
00:03:48,959 --> 00:03:51,959
indicators that it's malicious so it's a

77
00:03:51,959 --> 00:03:55,560
basically a part of deception techniques

78
00:03:55,560 --> 00:03:59,040
so now let's run through some

79
00:03:59,040 --> 00:04:01,220
basic structuring of process injection

80
00:04:01,220 --> 00:04:04,379
so process injection typically has three

81
00:04:04,379 --> 00:04:06,900
main parts as they allocate right and

82
00:04:06,900 --> 00:04:07,860
execute

83
00:04:07,860 --> 00:04:11,519
so let's use my very well designed

84
00:04:11,519 --> 00:04:13,019
diagram

85
00:04:13,019 --> 00:04:15,720
so first an example of a call is a

86
00:04:15,720 --> 00:04:19,918
virtual analog X virtual x allocates a

87
00:04:19,918 --> 00:04:22,860
writable memory space in another process

88
00:04:22,860 --> 00:04:26,160
next it's the right so an example would

89
00:04:26,160 --> 00:04:28,440
be write process memory API call which

90
00:04:28,440 --> 00:04:31,919
writes a shell code in another memory

91
00:04:31,919 --> 00:04:32,940
space

92
00:04:32,940 --> 00:04:35,940
and lastly is to execute so once you've

93
00:04:35,940 --> 00:04:37,860
written the Shell Code you only need to

94
00:04:37,860 --> 00:04:39,600
do is to execute it using a create

95
00:04:39,600 --> 00:04:41,400
remote thread

96
00:04:41,400 --> 00:04:42,840
so now

97
00:04:42,840 --> 00:04:45,900
let's revisit some techniques that are

98
00:04:45,900 --> 00:04:47,820
very well known

99
00:04:47,820 --> 00:04:50,520
first it's uh

100
00:04:50,520 --> 00:04:53,580
this one is a resource from irate team

101
00:04:53,580 --> 00:04:55,380
if you want to learn about process

102
00:04:55,380 --> 00:04:57,419
injection techniques

103
00:04:57,419 --> 00:04:59,759
you may check this out since this got

104
00:04:59,759 --> 00:05:04,020
this site got a lot of examples

105
00:05:04,020 --> 00:05:05,940
so let's run through three techniques

106
00:05:05,940 --> 00:05:07,320
for now since there are a lot of

107
00:05:07,320 --> 00:05:09,240
techniques and it's very gruesome for

108
00:05:09,240 --> 00:05:10,919
morning guys if you learn process

109
00:05:10,919 --> 00:05:13,440
injection throughout the day so let's

110
00:05:13,440 --> 00:05:15,660
run through this uh create remote thread

111
00:05:15,660 --> 00:05:18,600
so create remote red is one of the

112
00:05:18,600 --> 00:05:20,759
oldest techniques that are well known

113
00:05:20,759 --> 00:05:23,340
it's easily detectable of course since

114
00:05:23,340 --> 00:05:26,580
it's already old and uh but still it

115
00:05:26,580 --> 00:05:28,380
builds your foundations on for process

116
00:05:28,380 --> 00:05:31,080
injection since it's

117
00:05:31,080 --> 00:05:33,300
well it's the example that I gave a

118
00:05:33,300 --> 00:05:36,360
while ago and it gives the structure for

119
00:05:36,360 --> 00:05:39,600
everyone to learn and how to see the

120
00:05:39,600 --> 00:05:42,120
different parts of uh of a code when it

121
00:05:42,120 --> 00:05:44,759
comes to process injection

122
00:05:44,759 --> 00:05:47,520
so for this one let's run through some

123
00:05:47,520 --> 00:05:51,479
API calls so process uh open process

124
00:05:51,479 --> 00:05:55,020
open process allows you to open a Target

125
00:05:55,020 --> 00:05:58,259
process wherein you want to inject a

126
00:05:58,259 --> 00:06:00,539
Shell Code so for this one let's run

127
00:06:00,539 --> 00:06:01,919
through our

128
00:06:01,919 --> 00:06:05,639
this by uh opening the target process

129
00:06:05,639 --> 00:06:07,380
explore the taxi

130
00:06:07,380 --> 00:06:10,500
now let's allocate using virtual analog

131
00:06:10,500 --> 00:06:14,820
X so it stores on this code snippet it

132
00:06:14,820 --> 00:06:16,440
stores

133
00:06:16,440 --> 00:06:19,560
the add memory address on the rptr

134
00:06:19,560 --> 00:06:22,199
variable which will be used on the

135
00:06:22,199 --> 00:06:24,300
succeeding code Snippets

136
00:06:24,300 --> 00:06:27,479
next it's the right process memory uh it

137
00:06:27,479 --> 00:06:29,160
writes the Shell Code on the allocated

138
00:06:29,160 --> 00:06:30,240
memory

139
00:06:30,240 --> 00:06:32,819
and lastly it's to execute the Shell

140
00:06:32,819 --> 00:06:36,259
Code using Create remote red

141
00:06:36,360 --> 00:06:40,139
now this is one of the more advanced

142
00:06:40,139 --> 00:06:43,080
ones let's run through process hollowing

143
00:06:43,080 --> 00:06:46,500
so process hollowing is is a technique

144
00:06:46,500 --> 00:06:49,259
where in uh

145
00:06:49,259 --> 00:06:52,139
the remote process is being hollowed so

146
00:06:52,139 --> 00:06:55,020
that you can write a shell code on that

147
00:06:55,020 --> 00:06:57,660
hollowed or unmapped process

148
00:06:57,660 --> 00:07:00,780
so first what it does is it creates a

149
00:07:00,780 --> 00:07:03,120
process in the suspended state so that

150
00:07:03,120 --> 00:07:05,759
once it's paused you can tweak it and

151
00:07:05,759 --> 00:07:07,020
resume it

152
00:07:07,020 --> 00:07:10,860
so that once you have modified it and

153
00:07:10,860 --> 00:07:12,900
the Shell Code has been written you can

154
00:07:12,900 --> 00:07:15,900
execute it by resuming it

155
00:07:15,900 --> 00:07:19,199
so first uh an EPA call is great process

156
00:07:19,199 --> 00:07:21,539
so you will create your own process on

157
00:07:21,539 --> 00:07:24,360
this one by creating a suspended process

158
00:07:24,360 --> 00:07:28,380
you can once it's passed you can modify

159
00:07:28,380 --> 00:07:30,660
the contents of the process

160
00:07:30,660 --> 00:07:34,259
next it's a zwq information process and

161
00:07:34,259 --> 00:07:37,319
read process memory so what it does is

162
00:07:37,319 --> 00:07:40,380
it computes the address of address block

163
00:07:40,380 --> 00:07:43,500
of the section and the remote process

164
00:07:43,500 --> 00:07:48,120
of uh the address block of the process

165
00:07:48,120 --> 00:07:50,880
that you want to be unmapped

166
00:07:50,880 --> 00:07:53,099
and after that once you got the address

167
00:07:53,099 --> 00:07:55,259
of that address uh the address block

168
00:07:55,259 --> 00:07:57,780
then you can write the Shell Code in

169
00:07:57,780 --> 00:07:59,819
that section

170
00:07:59,819 --> 00:08:02,580
lastly it's a resume cred since you have

171
00:08:02,580 --> 00:08:05,479
suspended the process once you assume it

172
00:08:05,479 --> 00:08:09,539
uh the Shell Code will execute

173
00:08:09,539 --> 00:08:13,259
next it's a early bird apcq somehow it's

174
00:08:13,259 --> 00:08:16,860
similar to uh process hollowing since it

175
00:08:16,860 --> 00:08:19,379
starts with the suspended process but

176
00:08:19,379 --> 00:08:22,680
still the methodology of or the setup

177
00:08:22,680 --> 00:08:24,720
where you put the shell code is a bit

178
00:08:24,720 --> 00:08:25,680
different

179
00:08:25,680 --> 00:08:28,639
so first

180
00:08:29,639 --> 00:08:32,520
we're gonna do everywhere everywhere I

181
00:08:32,520 --> 00:08:34,760
mean

182
00:08:36,380 --> 00:08:38,760
let's do the honors

183
00:08:38,760 --> 00:08:41,679
you're not getting away

184
00:08:41,679 --> 00:08:46,829
[Applause]

185
00:08:48,920 --> 00:08:51,660
set an example

186
00:08:51,660 --> 00:08:55,640
all of favor always set examples

187
00:09:02,740 --> 00:09:07,060
[Music]

188
00:09:07,060 --> 00:09:09,320
[Applause]

189
00:09:09,320 --> 00:09:11,339
[Music]

190
00:09:11,339 --> 00:09:12,740
foreign

191
00:09:12,740 --> 00:09:22,649
[Music]

192
00:09:46,820 --> 00:09:49,500
okay thanks boss

193
00:09:49,500 --> 00:09:53,060
all right so now going back

194
00:09:54,300 --> 00:09:57,140
down here

195
00:09:58,820 --> 00:10:02,880
let's go okay let's uh going back let's

196
00:10:02,880 --> 00:10:06,000
run through early bird APC Hue so

197
00:10:06,000 --> 00:10:08,820
uh early bird uh it's given the name

198
00:10:08,820 --> 00:10:12,420
early bird since uh you're abusing

199
00:10:12,420 --> 00:10:13,800
the

200
00:10:13,800 --> 00:10:16,320
ah

201
00:10:16,320 --> 00:10:18,779
they go in extractor

202
00:10:18,779 --> 00:10:21,019
foreign

203
00:10:28,140 --> 00:10:32,519
the queue of the apcq before you uh

204
00:10:32,519 --> 00:10:36,240
before it's uh eventually starts so

205
00:10:36,240 --> 00:10:38,640
basically what it does is a similar

206
00:10:38,640 --> 00:10:40,860
process injection wherein you suspend

207
00:10:40,860 --> 00:10:43,560
the process first and then you allocate

208
00:10:43,560 --> 00:10:48,120
a new space and a new space in the

209
00:10:48,120 --> 00:10:51,120
remote process wherein you write your

210
00:10:51,120 --> 00:10:54,720
shell code and you eventually point the

211
00:10:54,720 --> 00:10:57,839
uh address of the Shell Code in the APC

212
00:10:57,839 --> 00:11:00,000
routine

213
00:11:00,000 --> 00:11:03,000
foreign

214
00:11:03,000 --> 00:11:06,300
and then eventually uh once the APC is

215
00:11:06,300 --> 00:11:08,220
skewed on the main thread uh once you

216
00:11:08,220 --> 00:11:10,560
once you resume the process the Shell

217
00:11:10,560 --> 00:11:13,079
Code executes so let's run through again

218
00:11:13,079 --> 00:11:15,420
some API calls to make you overwhelmed

219
00:11:15,420 --> 00:11:17,399
with my presentation

220
00:11:17,399 --> 00:11:19,920
so first it's the create process so what

221
00:11:19,920 --> 00:11:22,079
you do is you create a new process in

222
00:11:22,079 --> 00:11:23,579
the suspended state

223
00:11:23,579 --> 00:11:26,519
next is to allocate again again and

224
00:11:26,519 --> 00:11:30,959
again a shell uh allocate a memory space

225
00:11:30,959 --> 00:11:34,040
in that remote process and in

226
00:11:34,040 --> 00:11:36,720
explorer.xa next is the right process

227
00:11:36,720 --> 00:11:38,940
memory you write again the Shell Code in

228
00:11:38,940 --> 00:11:40,800
that allocated memory space

229
00:11:40,800 --> 00:11:44,579
next is the Q user APC so this is one

230
00:11:44,579 --> 00:11:46,500
that I mentioned before

231
00:11:46,500 --> 00:11:49,560
you point the address of the Shell Code

232
00:11:49,560 --> 00:11:52,920
in the APC routine so once you start the

233
00:11:52,920 --> 00:11:55,740
the process or resume the process uh

234
00:11:55,740 --> 00:12:00,060
it's the first one that gets executed

235
00:12:00,060 --> 00:12:02,579
lastly is the resume thread so it's just

236
00:12:02,579 --> 00:12:04,260
resuming the process so that the Shell

237
00:12:04,260 --> 00:12:06,120
Code will get executed

238
00:12:06,120 --> 00:12:09,720
so uh what's my point

239
00:12:09,720 --> 00:12:12,720
of why I presented those techniques so

240
00:12:12,720 --> 00:12:15,000
the structure exists on all techniques

241
00:12:15,000 --> 00:12:17,940
so as you have heard I've I've been

242
00:12:17,940 --> 00:12:19,920
mentioning you I locate on remote

243
00:12:19,920 --> 00:12:22,560
process you write on that allocated

244
00:12:22,560 --> 00:12:24,959
memory space and you execute that Shell

245
00:12:24,959 --> 00:12:26,459
Code

246
00:12:26,459 --> 00:12:30,120
next uh I've I've shown the code

247
00:12:30,120 --> 00:12:32,399
Snippets just to show that coding

248
00:12:32,399 --> 00:12:34,200
different techniques it's quite gruesome

249
00:12:34,200 --> 00:12:38,339
it's quite hard to structure every

250
00:12:38,339 --> 00:12:41,640
different API calls just to make a a

251
00:12:41,640 --> 00:12:44,760
working process injection binary

252
00:12:44,760 --> 00:12:48,360
and lastly it's very important to

253
00:12:48,360 --> 00:12:50,220
understand the windows API call since

254
00:12:50,220 --> 00:12:52,740
it's the bare bone of malware

255
00:12:52,740 --> 00:12:54,180
development

256
00:12:54,180 --> 00:12:57,480
so now uh let's run through some uh

257
00:12:57,480 --> 00:13:01,620
information about Windows API calls

258
00:13:01,620 --> 00:13:04,980
uh Windows API calls it utilizes

259
00:13:04,980 --> 00:13:07,980
excuse me it utilizes existing functions

260
00:13:07,980 --> 00:13:11,579
from a dll to execute process injection

261
00:13:11,579 --> 00:13:14,399
there are different ways to call uh and

262
00:13:14,399 --> 00:13:17,700
execute API calls it's via kernel kernel

263
00:13:17,700 --> 00:13:22,260
32 calls from kernel 32 dll or ntdll

264
00:13:22,260 --> 00:13:25,560
calls and there are additional ways to

265
00:13:25,560 --> 00:13:26,760
execute

266
00:13:26,760 --> 00:13:28,980
via system calls

267
00:13:28,980 --> 00:13:32,100
versus calls and get Cisco stop so let's

268
00:13:32,100 --> 00:13:34,440
run first with the kernel 32 just

269
00:13:34,440 --> 00:13:36,240
mentioned you're you're just going to

270
00:13:36,240 --> 00:13:38,040
play with the functions residing in

271
00:13:38,040 --> 00:13:40,860
kernel 32 dll so most of the functions

272
00:13:40,860 --> 00:13:43,079
here are being used by legitimate

273
00:13:43,079 --> 00:13:46,260
processes so by utilizing the API calls

274
00:13:46,260 --> 00:13:52,019
on this dll you somehow uh evade some

275
00:13:52,019 --> 00:13:54,360
detection techniques

276
00:13:54,360 --> 00:13:57,300
next is uh you can use the documentation

277
00:13:57,300 --> 00:14:00,480
of Microsoft since all

278
00:14:00,480 --> 00:14:03,240
I think pretty all of the API calls that

279
00:14:03,240 --> 00:14:05,279
are being used in kernel 32 are well

280
00:14:05,279 --> 00:14:07,980
documented in Microsoft so just fire it

281
00:14:07,980 --> 00:14:09,899
up and you're ready to go

282
00:14:09,899 --> 00:14:13,380
next is the ntdll so it's the native API

283
00:14:13,380 --> 00:14:16,380
of Windows uh your calling functions

284
00:14:16,380 --> 00:14:20,160
residing in ntdll and the problem here

285
00:14:20,160 --> 00:14:22,620
is they are undocumented functions so as

286
00:14:22,620 --> 00:14:26,040
you can see in my image uh once you try

287
00:14:26,040 --> 00:14:28,380
to Google dork or NT write virtual

288
00:14:28,380 --> 00:14:32,899
memory on Microsoft docs you see nothing

289
00:14:33,600 --> 00:14:36,540
but there are Good Samaritans that are

290
00:14:36,540 --> 00:14:39,180
creating documentations for anti-api so

291
00:14:39,180 --> 00:14:41,519
you can try to use these resources and

292
00:14:41,519 --> 00:14:43,079
there are a lot of other resources but

293
00:14:43,079 --> 00:14:46,019
you can still uh prioritize using these

294
00:14:46,019 --> 00:14:47,639
ones

295
00:14:47,639 --> 00:14:50,699
next is the system calls so somehow it's

296
00:14:50,699 --> 00:14:53,760
just similar to the NT API since uh

297
00:14:53,760 --> 00:14:57,000
ntdll is just you it's just a port to

298
00:14:57,000 --> 00:15:00,120
access system calls

299
00:15:00,120 --> 00:15:02,699
so for the system calls it's uh if

300
00:15:02,699 --> 00:15:04,980
you're going to use uh this one the

301
00:15:04,980 --> 00:15:07,920
structure of ss scores are just similar

302
00:15:07,920 --> 00:15:09,899
to the NT functions

303
00:15:09,899 --> 00:15:12,839
it's just invoking in anti-api functions

304
00:15:12,839 --> 00:15:14,459
without directly calling functions from

305
00:15:14,459 --> 00:15:18,120
ntdll but the caveat here is uh this is

306
00:15:18,120 --> 00:15:19,760
call is strictly

307
00:15:19,760 --> 00:15:23,579
uh it varies from different uh Windows

308
00:15:23,579 --> 00:15:24,600
versions

309
00:15:24,600 --> 00:15:27,380
so for this one just to give an example

310
00:15:27,380 --> 00:15:30,540
uh there are two repositories that are

311
00:15:30,540 --> 00:15:33,480
well used for our Malory development

312
00:15:33,480 --> 00:15:35,820
related to system calls it's the sys

313
00:15:35,820 --> 00:15:38,639
Whispers And name line Whispers

314
00:15:38,639 --> 00:15:41,459
so for this Whispers it generates an

315
00:15:41,459 --> 00:15:43,980
assembly file that can import it to make

316
00:15:43,980 --> 00:15:46,019
direct system calls

317
00:15:46,019 --> 00:15:49,019
and next is the name line Whispers it's

318
00:15:49,019 --> 00:15:53,760
just uh the it's just ported for Nim

319
00:15:53,760 --> 00:15:58,019
next it's the get Cisco stop so Cisco

320
00:15:58,019 --> 00:16:02,160
stop is just same concept with the

321
00:16:02,160 --> 00:16:04,860
Cisco's but you don't hard code the

322
00:16:04,860 --> 00:16:07,800
system calls for

323
00:16:07,800 --> 00:16:10,560
for this previous example and the image

324
00:16:10,560 --> 00:16:14,339
above or below uh as you can see the

325
00:16:14,339 --> 00:16:17,100
assembly code is hard coded on the

326
00:16:17,100 --> 00:16:20,399
function both on the get Cisco stop you

327
00:16:20,399 --> 00:16:23,100
dynamically resolve every anti-api

328
00:16:23,100 --> 00:16:27,120
function so that you won't be uh

329
00:16:27,120 --> 00:16:29,760
you won't handle the problem of a

330
00:16:29,760 --> 00:16:32,100
hard-coded ciscals on different uh

331
00:16:32,100 --> 00:16:33,660
Windows versions

332
00:16:33,660 --> 00:16:38,699
so the main resource here is uh Nim gets

333
00:16:38,699 --> 00:16:40,199
Cisco stop

334
00:16:40,199 --> 00:16:42,860
so a sample image on the right side

335
00:16:42,860 --> 00:16:47,100
gives you an idea on how it works uh it

336
00:16:47,100 --> 00:16:49,560
checks dynamically the address of

337
00:16:49,560 --> 00:16:52,380
anti-open process or anti-right virtual

338
00:16:52,380 --> 00:16:55,259
memory anti-crate thread X and

339
00:16:55,259 --> 00:16:58,560
eventually it executes the Shell Code

340
00:16:58,560 --> 00:17:02,839
so are you still okay guys

341
00:17:03,260 --> 00:17:04,919
overwhelmed

342
00:17:04,919 --> 00:17:07,579
I'm okay I'm okay

343
00:17:07,579 --> 00:17:10,819
so now

344
00:17:11,579 --> 00:17:14,000
oh well yeah

345
00:17:14,000 --> 00:17:18,540
so now uh it's kind of overwhelming to

346
00:17:18,540 --> 00:17:20,459
learn process injection through that

347
00:17:20,459 --> 00:17:24,059
with that slides I am not quite sure if

348
00:17:24,059 --> 00:17:27,059
if I myself would learn a lot

349
00:17:27,059 --> 00:17:32,460
so now uh why I'm here today is uh I am

350
00:17:32,460 --> 00:17:34,200
going to present the tool that I created

351
00:17:34,200 --> 00:17:36,840
which is an injector it's a process

352
00:17:36,840 --> 00:17:39,080
injection framework

353
00:17:39,080 --> 00:17:42,419
that focuses on learning

354
00:17:42,419 --> 00:17:46,740
and of course uh creating uh compiling

355
00:17:46,740 --> 00:17:48,780
your own payloads and as well as

356
00:17:48,780 --> 00:17:50,340
detecting it

357
00:17:50,340 --> 00:17:52,440
so

358
00:17:52,440 --> 00:17:54,299
a quick uh

359
00:17:54,299 --> 00:17:57,840
image of the GitHub repository I was

360
00:17:57,840 --> 00:18:01,440
able to publish it yesterday in public

361
00:18:01,440 --> 00:18:05,700
since it's just a private one beforehand

362
00:18:05,700 --> 00:18:09,480
so an injector is a process injection

363
00:18:09,480 --> 00:18:12,179
framework written in Nim it's inspired

364
00:18:12,179 --> 00:18:14,580
by a git name GitHub repositories such

365
00:18:14,580 --> 00:18:17,100
as offensive nim nim Hollow and name

366
00:18:17,100 --> 00:18:21,480
Crypt 2. so I got this idea of building

367
00:18:21,480 --> 00:18:24,539
this tool since I've been using Nim Holo

368
00:18:24,539 --> 00:18:27,000
name Hollow is a tool that focuses on

369
00:18:27,000 --> 00:18:30,120
process hollowing so it's just it just

370
00:18:30,120 --> 00:18:32,940
automates the compilation of process

371
00:18:32,940 --> 00:18:36,720
hollowing written in Nim and have during

372
00:18:36,720 --> 00:18:38,940
my relative engagements I had this

373
00:18:38,940 --> 00:18:41,880
experiences were in the Nim Hollow

374
00:18:41,880 --> 00:18:44,880
binary gets flagged by crowdstrike by

375
00:18:44,880 --> 00:18:47,940
Sentinel one with some edrs online and

376
00:18:47,940 --> 00:18:51,299
just uh or and and this kind that uh

377
00:18:51,299 --> 00:18:53,520
that me the website we're in you can

378
00:18:53,520 --> 00:18:57,299
upload the binary it gets flagged so uh

379
00:18:57,299 --> 00:18:59,580
I tried to tweak the binary so that it

380
00:18:59,580 --> 00:19:02,820
works and eventually I got tired why why

381
00:19:02,820 --> 00:19:06,000
do I modify all the source codes of the

382
00:19:06,000 --> 00:19:08,880
other guys if I can do it on my own so I

383
00:19:08,880 --> 00:19:11,640
just did this tool so that I won't rely

384
00:19:11,640 --> 00:19:13,380
on the other guys and just rely on

385
00:19:13,380 --> 00:19:15,179
myself doing this process injection

386
00:19:15,179 --> 00:19:16,380
techniques

387
00:19:16,380 --> 00:19:19,440
and of course if I do it on my if I do

388
00:19:19,440 --> 00:19:21,780
it myself I can customize it the way I

389
00:19:21,780 --> 00:19:24,419
the way I like it

390
00:19:24,419 --> 00:19:28,200
so the main one of the goals of ninja is

391
00:19:28,200 --> 00:19:30,299
it eases the payload creation of

392
00:19:30,299 --> 00:19:32,280
different process injection techniques

393
00:19:32,280 --> 00:19:35,640
so as a red teamer it's kind of hard to

394
00:19:35,640 --> 00:19:38,039
to think about the payload that you're

395
00:19:38,039 --> 00:19:41,640
going to use for for initial access

396
00:19:41,640 --> 00:19:44,640
so most of the time when I do some

397
00:19:44,640 --> 00:19:46,740
random engagements my initial access

398
00:19:46,740 --> 00:19:49,440
payload of course is not a binary since

399
00:19:49,440 --> 00:19:52,200
it's quite stupid if you attach a binary

400
00:19:52,200 --> 00:19:55,320
or a zip binary in a zip and an

401
00:19:55,320 --> 00:19:57,419
attachment since most of the time it

402
00:19:57,419 --> 00:19:59,820
gets flagged by email security Gateway

403
00:19:59,820 --> 00:20:03,780
so what I do is I typically chain into

404
00:20:03,780 --> 00:20:05,480
stages

405
00:20:05,480 --> 00:20:09,059
so as mentioned in my talk yesterday if

406
00:20:09,059 --> 00:20:11,059
anyone here attended my talk

407
00:20:11,059 --> 00:20:14,760
it's quite good if you do a staged

408
00:20:14,760 --> 00:20:18,360
payload so I just passed the binaries

409
00:20:18,360 --> 00:20:21,960
that I do and typically it's on the

410
00:20:21,960 --> 00:20:24,059
stage two or stage three of my payload

411
00:20:24,059 --> 00:20:26,400
chain so uh

412
00:20:26,400 --> 00:20:28,740
it's quite hard to think of different

413
00:20:28,740 --> 00:20:32,460
payload chains just to account the edrs

414
00:20:32,460 --> 00:20:36,120
based on my constants if I knew the EDR

415
00:20:36,120 --> 00:20:38,760
existing in the organization So based on

416
00:20:38,760 --> 00:20:41,820
that experience I just thought about it

417
00:20:41,820 --> 00:20:45,000
and if I can automate somehow the

418
00:20:45,000 --> 00:20:47,520
different techniques that I play with on

419
00:20:47,520 --> 00:20:50,700
my day-to-day job then it makes my work

420
00:20:50,700 --> 00:20:51,919
easier

421
00:20:51,919 --> 00:20:55,320
and I want that a lot on my work I can

422
00:20:55,320 --> 00:20:58,200
just sleep and declare I did eight hours

423
00:20:58,200 --> 00:21:00,419
of work instead of just

424
00:21:00,419 --> 00:21:01,799
uh

425
00:21:01,799 --> 00:21:04,620
and instead I just did three hours so

426
00:21:04,620 --> 00:21:08,160
with that I uh I use this tool to ease

427
00:21:08,160 --> 00:21:10,080
my payload creation

428
00:21:10,080 --> 00:21:12,120
next uh one of the highlights of an

429
00:21:12,120 --> 00:21:15,240
injector is a template based and a

430
00:21:15,240 --> 00:21:17,760
modular framework which I will be

431
00:21:17,760 --> 00:21:19,620
discussing moving forward

432
00:21:19,620 --> 00:21:22,500
and lastly and the most important part

433
00:21:22,500 --> 00:21:24,720
of this tool is it highlights the

434
00:21:24,720 --> 00:21:27,539
learning by using the tool so one or the

435
00:21:27,539 --> 00:21:29,340
tools that I've mentioned in Hollow and

436
00:21:29,340 --> 00:21:31,980
name Crypt too nimhalo as mentioned it's

437
00:21:31,980 --> 00:21:36,240
it's using process hollowing for uh

438
00:21:36,240 --> 00:21:38,940
for process injection in Nim crypto it

439
00:21:38,940 --> 00:21:43,500
uses uh early bird apcq which is uh the

440
00:21:43,500 --> 00:21:45,539
techniques that I have mentioned but

441
00:21:45,539 --> 00:21:47,760
it's it's quite hard to learn the

442
00:21:47,760 --> 00:21:49,380
process injection techniques by just

443
00:21:49,380 --> 00:21:52,260
compiling it if if you're just a if

444
00:21:52,260 --> 00:21:54,780
you're a guy who just downloads a tool

445
00:21:54,780 --> 00:21:58,260
on GitHub and just runs it it doesn't

446
00:21:58,260 --> 00:22:00,419
make sense if if you just run the two

447
00:22:00,419 --> 00:22:02,640
lazarette dimmer you need to of course

448
00:22:02,640 --> 00:22:04,799
learn the tool itself before running it

449
00:22:04,799 --> 00:22:07,260
so that you know how it works and

450
00:22:07,260 --> 00:22:10,320
eventually if if your client or your

451
00:22:10,320 --> 00:22:13,380
your target asks you about the binaries

452
00:22:13,380 --> 00:22:15,120
that you have used you have something to

453
00:22:15,120 --> 00:22:17,580
answer it's quite stupid if if you they

454
00:22:17,580 --> 00:22:20,100
ask you oh what binary did you use what

455
00:22:20,100 --> 00:22:22,020
the what techniques did you use how were

456
00:22:22,020 --> 00:22:25,320
you able to bypass the AV or EDR and you

457
00:22:25,320 --> 00:22:28,460
can't answer it so this tool somehow

458
00:22:28,460 --> 00:22:33,000
utilizes the compilation stage and the

459
00:22:33,000 --> 00:22:35,100
learning stage combined

460
00:22:35,100 --> 00:22:38,280
and lastly it's uh most of the tools

461
00:22:38,280 --> 00:22:40,440
that I have mentioned only focuses on

462
00:22:40,440 --> 00:22:42,960
the offensive end but I've also counted

463
00:22:42,960 --> 00:22:46,080
since it's a modular framework you can

464
00:22:46,080 --> 00:22:48,960
utilize it on the blue team as well so

465
00:22:48,960 --> 00:22:51,299
first uh

466
00:22:51,299 --> 00:22:54,419
why them why did I choose name why it's

467
00:22:54,419 --> 00:22:56,820
an injector it's not an injector if it's

468
00:22:56,820 --> 00:22:59,460
not Nim so I just force myself using Nim

469
00:22:59,460 --> 00:23:02,640
but getting aside it it's uh it's just

470
00:23:02,640 --> 00:23:04,500
because I'm a python kid I've been

471
00:23:04,500 --> 00:23:08,700
coding python since 2013 so I'm very

472
00:23:08,700 --> 00:23:11,400
lenient to to high level programming

473
00:23:11,400 --> 00:23:14,880
languages it's quite hard well I can do

474
00:23:14,880 --> 00:23:17,880
some C or C plus plus or even assembly

475
00:23:17,880 --> 00:23:19,460
but uh

476
00:23:19,460 --> 00:23:22,320
uh well it bores me though I just want

477
00:23:22,320 --> 00:23:24,299
to use a high level programming

478
00:23:24,299 --> 00:23:27,179
languages that has the capabilities of a

479
00:23:27,179 --> 00:23:29,460
low level programming language

480
00:23:29,460 --> 00:23:31,740
however this one an example on the left

481
00:23:31,740 --> 00:23:35,400
side is just a python function and sorry

482
00:23:35,400 --> 00:23:36,240
guys

483
00:23:36,240 --> 00:23:39,059
and

484
00:23:39,059 --> 00:23:42,120
and for the right side it's Nim somehow

485
00:23:42,120 --> 00:23:46,679
it looks the same for me and uh

486
00:23:46,679 --> 00:23:49,260
yeah it's it's one of the reasons it's

487
00:23:49,260 --> 00:23:51,780
the syntax that makes it easy for me to

488
00:23:51,780 --> 00:23:53,640
code in them

489
00:23:53,640 --> 00:23:56,880
next it's the compilation so using Nim

490
00:23:56,880 --> 00:23:59,000
you can easily compile your source code

491
00:23:59,000 --> 00:24:01,200
that works on

492
00:24:01,200 --> 00:24:04,799
all operating systems it has a cross

493
00:24:04,799 --> 00:24:06,600
compilation uh

494
00:24:06,600 --> 00:24:11,340
capability for Windows Linux and OS X so

495
00:24:11,340 --> 00:24:13,140
in the images above

496
00:24:13,140 --> 00:24:16,440
it does not have an axis so it's a it's

497
00:24:16,440 --> 00:24:19,620
a Windows it's a Linux binary and on the

498
00:24:19,620 --> 00:24:23,100
lower end it's a Windows binary so given

499
00:24:23,100 --> 00:24:25,020
on the example it was compiled on the

500
00:24:25,020 --> 00:24:27,299
Kali Linux but I was still able to build

501
00:24:27,299 --> 00:24:30,918
a binary that works on Windows

502
00:24:31,080 --> 00:24:33,840
next uh one of the reasons why I chose

503
00:24:33,840 --> 00:24:36,900
Nim it's uh it's due to the fact that

504
00:24:36,900 --> 00:24:39,419
there are a lot of public repositories

505
00:24:39,419 --> 00:24:42,659
foreign offensive tooling so it's quite

506
00:24:42,659 --> 00:24:44,640
hard to learn Nim and account the fact

507
00:24:44,640 --> 00:24:45,840
that you're going to create a malware

508
00:24:45,840 --> 00:24:49,860
out of it so based on that there are a

509
00:24:49,860 --> 00:24:51,840
lot of tools that were that are very

510
00:24:51,840 --> 00:24:55,320
helpful for minority development with

511
00:24:55,320 --> 00:24:58,440
Nim so first it's the wind Nim when Nim

512
00:24:58,440 --> 00:25:00,419
is a

513
00:25:00,419 --> 00:25:03,840
it's a repository We're In It ports all

514
00:25:03,840 --> 00:25:06,780
the eight AP not all but most of the API

515
00:25:06,780 --> 00:25:10,320
calls in kernel 32 which allows you to

516
00:25:10,320 --> 00:25:13,500
create a malware in Nim by just

517
00:25:13,500 --> 00:25:16,020
mimicking how to code it in C or C plus

518
00:25:16,020 --> 00:25:17,039
plus

519
00:25:17,039 --> 00:25:20,700
next it's a namely investors so namely

520
00:25:20,700 --> 00:25:24,299
invest first is very uh important for me

521
00:25:24,299 --> 00:25:26,460
since it's being used for assist calls

522
00:25:26,460 --> 00:25:28,020
as I've mentioned before this is called

523
00:25:28,020 --> 00:25:31,080
techniques I'll deal with that later on

524
00:25:31,080 --> 00:25:34,260
next it's the same as Nim gets Cisco

525
00:25:34,260 --> 00:25:36,960
stop and lastly it's offensive Nim

526
00:25:36,960 --> 00:25:39,900
offensive Nim is a repository containing

527
00:25:39,900 --> 00:25:41,940
a lot of different ways on how to

528
00:25:41,940 --> 00:25:45,679
utilize them for offensive security

529
00:25:45,900 --> 00:25:49,860
now let's talk about why Nim is being

530
00:25:49,860 --> 00:25:53,100
called as a framework so it's a modular

531
00:25:53,100 --> 00:25:56,400
framework wherein it utilizes yaml as

532
00:25:56,400 --> 00:25:59,460
its configuration files so for this

533
00:25:59,460 --> 00:26:00,720
examples

534
00:26:00,720 --> 00:26:03,179
uh the left one is

535
00:26:03,179 --> 00:26:05,700
is the techniques model wherein it

536
00:26:05,700 --> 00:26:08,640
contains all the a all the API calls

537
00:26:08,640 --> 00:26:11,220
based on the technique so as I have

538
00:26:11,220 --> 00:26:14,820
mentioned during the the first uh few

539
00:26:14,820 --> 00:26:16,799
parts of my talk I've talked about

540
00:26:16,799 --> 00:26:20,520
create remote thread and the API calls

541
00:26:20,520 --> 00:26:22,620
that are being used so using the

542
00:26:22,620 --> 00:26:25,799
injector you can Define the API calls

543
00:26:25,799 --> 00:26:28,679
used for that technique and it will

544
00:26:28,679 --> 00:26:32,159
build it for you so if you can see here

545
00:26:32,159 --> 00:26:34,500
uh it's defined in the create remote red

546
00:26:34,500 --> 00:26:38,640
the open process virtual dialog X right

547
00:26:38,640 --> 00:26:41,460
process memory create remote red and

548
00:26:41,460 --> 00:26:44,460
close handle so these are the some of

549
00:26:44,460 --> 00:26:46,320
the functions that I have discussed way

550
00:26:46,320 --> 00:26:49,799
back and you just need to Define it in

551
00:26:49,799 --> 00:26:54,020
this uh in this yaml file

552
00:26:54,120 --> 00:26:57,419
next is the

553
00:26:57,419 --> 00:27:01,860
uh the kernel 32 to NT conversion yaml

554
00:27:01,860 --> 00:27:04,500
file so it's also a yaml file that

555
00:27:04,500 --> 00:27:09,000
defines the the conversion of Kernel 32

556
00:27:09,000 --> 00:27:12,779
calls versus anti-api calls

557
00:27:12,779 --> 00:27:16,020
so I'll deal with that moving later on

558
00:27:16,020 --> 00:27:20,520
next it's uh the API calls for a source

559
00:27:20,520 --> 00:27:24,200
code is written in Nim as well of course

560
00:27:24,200 --> 00:27:28,320
so as you can see in the images uh each

561
00:27:28,320 --> 00:27:30,419
API call or

562
00:27:30,419 --> 00:27:34,679
are divided per uh Nim per Nim source

563
00:27:34,679 --> 00:27:36,659
code so virtual alloc is written in

564
00:27:36,659 --> 00:27:39,659
Virtual alloc.nem create remote red is

565
00:27:39,659 --> 00:27:42,299
written in create remote Red Dot Nim and

566
00:27:42,299 --> 00:27:43,980
wait for a single object is written in

567
00:27:43,980 --> 00:27:46,500
wait for single object that Nim so with

568
00:27:46,500 --> 00:27:50,159
that idea if you have defined the API

569
00:27:50,159 --> 00:27:53,820
call and models you can just look up

570
00:27:53,820 --> 00:27:57,059
with the function with the API call

571
00:27:57,059 --> 00:27:58,340
function

572
00:27:58,340 --> 00:28:01,980
with uh and just adding that name

573
00:28:01,980 --> 00:28:03,960
extension to it with that you can look

574
00:28:03,960 --> 00:28:05,700
up with the contents that you need so

575
00:28:05,700 --> 00:28:08,279
that you can build the tool

576
00:28:08,279 --> 00:28:11,880
so next it's uh the reusability of

577
00:28:11,880 --> 00:28:13,980
definitions it's not a modular framework

578
00:28:13,980 --> 00:28:16,500
if you can't reuse the definitions that

579
00:28:16,500 --> 00:28:19,980
you did so uh the defined API calls that

580
00:28:19,980 --> 00:28:22,919
I've provided can be used for compiling

581
00:28:22,919 --> 00:28:25,260
the process injection technique as well

582
00:28:25,260 --> 00:28:27,779
as detecting it so I deal with the

583
00:28:27,779 --> 00:28:30,900
detection techniques later on

584
00:28:30,900 --> 00:28:32,880
so

585
00:28:32,880 --> 00:28:36,200
uh sorry for the interruption Iris

586
00:28:36,200 --> 00:28:39,360
we just have to announce you training me

587
00:28:39,360 --> 00:28:43,820
Jigglypuff is it 10 15. sorry all right

588
00:28:44,100 --> 00:28:47,400
all right so uh so guys also will be I

589
00:28:47,400 --> 00:28:52,760
know uh going ahead with the web uh pp1o

590
00:28:59,130 --> 00:29:02,039
[Music]

591
00:29:02,039 --> 00:29:04,020
good morning

592
00:29:04,020 --> 00:29:25,220
[Music]

593
00:29:25,220 --> 00:29:28,340
all right guys so again

594
00:29:28,340 --> 00:29:30,299
web PT

595
00:29:30,299 --> 00:29:33,059
um 101 uh on camera

596
00:29:33,059 --> 00:29:34,990
to start in 15 minutes

597
00:29:34,990 --> 00:29:40,329
[Music]

598
00:29:41,220 --> 00:29:45,140
thank you thank you sir jiggly

599
00:29:49,290 --> 00:29:52,420
[Music]

600
00:29:55,320 --> 00:29:58,860
oh okay guys going back

601
00:29:58,860 --> 00:30:00,360
ah

602
00:30:00,360 --> 00:30:03,080
dragon now oh

603
00:30:03,080 --> 00:30:06,899
okay going back uh there is ability of

604
00:30:06,899 --> 00:30:11,820
definitions so as mentioned I'll uh show

605
00:30:11,820 --> 00:30:14,760
moving forward how can we leverage this

606
00:30:14,760 --> 00:30:17,399
defined API calls on the detection and

607
00:30:17,399 --> 00:30:18,480
creation

608
00:30:18,480 --> 00:30:22,080
of the payload so uh the premise of this

609
00:30:22,080 --> 00:30:24,659
is that if you know what API calls are

610
00:30:24,659 --> 00:30:26,460
being used in that technique might as

611
00:30:26,460 --> 00:30:28,559
well you can detect it

612
00:30:28,559 --> 00:30:33,240
next it's uh the Define kernel 32 API

613
00:30:33,240 --> 00:30:36,299
calls can be easily translated into its

614
00:30:36,299 --> 00:30:38,700
in anti-api counterparts so if you can

615
00:30:38,700 --> 00:30:43,020
Define it you can somehow use it on the

616
00:30:43,020 --> 00:30:45,600
compilation compilation stage where and

617
00:30:45,600 --> 00:30:48,419
if you want to change the kernel 32

618
00:30:48,419 --> 00:30:51,720
calls into an API anti-api calls then

619
00:30:51,720 --> 00:30:54,600
you can translate the complete technique

620
00:30:54,600 --> 00:30:57,480
into it and as well as during the

621
00:30:57,480 --> 00:31:00,179
detection so if you're trying to detect

622
00:31:00,179 --> 00:31:02,460
a create remote thread and they're using

623
00:31:02,460 --> 00:31:05,820
kernel 32 calls you can try to convert

624
00:31:05,820 --> 00:31:10,200
or anti-api calls you can try to convert

625
00:31:10,200 --> 00:31:14,700
your well that detection works by

626
00:31:14,700 --> 00:31:15,960
uh

627
00:31:15,960 --> 00:31:19,140
running every kernel 32 API call and as

628
00:31:19,140 --> 00:31:22,200
well as uh translating every kernel 32

629
00:31:22,200 --> 00:31:24,720
call into an AP anti-aba call so that

630
00:31:24,720 --> 00:31:27,480
you can account every call

631
00:31:27,480 --> 00:31:29,120
uh

632
00:31:29,120 --> 00:31:32,039
given if there are a lot of variations

633
00:31:32,039 --> 00:31:34,520
to it

634
00:31:34,980 --> 00:31:37,980
so as mentioned there are API call code

635
00:31:37,980 --> 00:31:40,799
Snippets so you can just use the API

636
00:31:40,799 --> 00:31:42,260
call

637
00:31:42,260 --> 00:31:45,320
for each uh

638
00:31:45,320 --> 00:31:48,899
nim nim source code so you can just look

639
00:31:48,899 --> 00:31:51,299
up on the functions directory it

640
00:31:51,299 --> 00:31:55,159
contains this API call Dot Nim

641
00:31:55,159 --> 00:31:58,500
file and it contains the source code for

642
00:31:58,500 --> 00:32:03,299
that API API call code snippet

643
00:32:03,299 --> 00:32:07,140
next is uh this modular framework also

644
00:32:07,140 --> 00:32:10,740
solves the problem if the API call that

645
00:32:10,740 --> 00:32:12,840
you are going to reuse does have

646
00:32:12,840 --> 00:32:16,140
different custom arguments so not every

647
00:32:16,140 --> 00:32:19,740
API call has this has the same arguments

648
00:32:19,740 --> 00:32:21,899
so if if you have the same technique

649
00:32:21,899 --> 00:32:24,299
with the same a different technique with

650
00:32:24,299 --> 00:32:27,360
the same API call and it has a different

651
00:32:27,360 --> 00:32:30,120
argument this tool can accommodate it

652
00:32:30,120 --> 00:32:34,860
you can Define this outlier of outlier

653
00:32:34,860 --> 00:32:37,799
API call on this technique and change

654
00:32:37,799 --> 00:32:40,080
the arguments of it so that the

655
00:32:40,080 --> 00:32:42,918
technique works

656
00:32:43,200 --> 00:32:46,440
next as I have mentioned and one of the

657
00:32:46,440 --> 00:32:49,440
highlights of the tool you can learn

658
00:32:49,440 --> 00:32:53,580
while using the tool itself so uh it

659
00:32:53,580 --> 00:32:55,620
introduces the learning of compa

660
00:32:55,620 --> 00:32:57,899
learning while compiling and detecting

661
00:32:57,899 --> 00:33:00,960
process injection so it's not similar to

662
00:33:00,960 --> 00:33:02,700
the tools that I have mentioned that

663
00:33:02,700 --> 00:33:05,159
only gives you the binary but of course

664
00:33:05,159 --> 00:33:08,399
gives you an idea on how every API call

665
00:33:08,399 --> 00:33:10,919
is being used and what API calls are

666
00:33:10,919 --> 00:33:13,140
being utilized to do the process

667
00:33:13,140 --> 00:33:15,960
injection technique so every information

668
00:33:15,960 --> 00:33:19,559
of a API call are being printed so that

669
00:33:19,559 --> 00:33:22,620
while you compile or if you just want to

670
00:33:22,620 --> 00:33:24,659
learn the technique then you can utilize

671
00:33:24,659 --> 00:33:26,760
a tool and learn the process injection

672
00:33:26,760 --> 00:33:29,340
technique itself

673
00:33:29,340 --> 00:33:34,320
so given the example here of uh

674
00:33:34,320 --> 00:33:37,620
vanilla technique it's a

675
00:33:37,620 --> 00:33:40,380
it's

676
00:33:40,380 --> 00:33:44,340
well yeah it prints every API call so

677
00:33:44,340 --> 00:33:47,640
it's using virtual alloc RTL copy memory

678
00:33:47,640 --> 00:33:49,620
create thread and read for a single

679
00:33:49,620 --> 00:33:53,059
object and as you can see every API call

680
00:33:53,059 --> 00:33:56,640
used an information written in yellow

681
00:33:56,640 --> 00:34:00,419
gets printed which gives you an idea how

682
00:34:00,419 --> 00:34:02,880
the API call is being utilized on this

683
00:34:02,880 --> 00:34:06,179
payload so an example would be a virtual

684
00:34:06,179 --> 00:34:08,580
alloc wherein virtual alloc is often

685
00:34:08,580 --> 00:34:12,060
used by malware to allocate memory as

686
00:34:12,060 --> 00:34:14,159
part of process injection I've been

687
00:34:14,159 --> 00:34:16,918
mentioning virtual alloc virtual alloc X

688
00:34:16,918 --> 00:34:19,679
and allocating memory and yeah given

689
00:34:19,679 --> 00:34:21,659
this definition you would learn that

690
00:34:21,659 --> 00:34:24,199
every vertical alloc or virtual alloc X

691
00:34:24,199 --> 00:34:27,418
gives you a

692
00:34:27,418 --> 00:34:32,780
a remote or self-hosted or process or

693
00:34:32,780 --> 00:34:35,339
memory where in you can write your shell

694
00:34:35,339 --> 00:34:37,159
code

695
00:34:37,159 --> 00:34:39,659
now let's run through the

696
00:34:39,659 --> 00:34:42,780
functionalities of an injector so first

697
00:34:42,780 --> 00:34:44,159
let's run through the red team

698
00:34:44,159 --> 00:34:46,859
capabilities of it so first of course

699
00:34:46,859 --> 00:34:49,500
it's the payload creation so there are a

700
00:34:49,500 --> 00:34:51,480
lot of different techniques that are

701
00:34:51,480 --> 00:34:55,320
being hosted by this tool I've used a

702
00:34:55,320 --> 00:34:57,359
lot of resources on it and compiled it

703
00:34:57,359 --> 00:34:59,520
there are a lot of resources such as

704
00:34:59,520 --> 00:35:02,580
cell process Nim Hollow and Nim Crypt 2

705
00:35:02,580 --> 00:35:05,460
were in added in this tool and credits

706
00:35:05,460 --> 00:35:07,619
to them of course but as well as there

707
00:35:07,619 --> 00:35:09,359
are a lot of techniques that are not

708
00:35:09,359 --> 00:35:11,400
written in Nim but I've also converted

709
00:35:11,400 --> 00:35:15,119
it into it so that I can create a lot of

710
00:35:15,119 --> 00:35:17,099
techniques that can be utilized by this

711
00:35:17,099 --> 00:35:20,640
tool and right now on this date the tool

712
00:35:20,640 --> 00:35:22,619
contains 46 different techniques of

713
00:35:22,619 --> 00:35:24,859
process injection that can be utilized

714
00:35:24,859 --> 00:35:28,859
by anyone who wants to use the tool so

715
00:35:28,859 --> 00:35:31,380
some examples would be well the create

716
00:35:31,380 --> 00:35:34,680
remote red process hollowing and apcq a

717
00:35:34,680 --> 00:35:37,680
suspended thread etc etc and the

718
00:35:37,680 --> 00:35:40,440
Callback functions

719
00:35:40,440 --> 00:35:42,839
next is the mix and match of different

720
00:35:42,839 --> 00:35:46,140
API call variations as I've mentioned on

721
00:35:46,140 --> 00:35:48,720
the Windows API call section there are

722
00:35:48,720 --> 00:35:50,940
different ways to call Api

723
00:35:50,940 --> 00:35:53,880
and not just API but as well as Cisco so

724
00:35:53,880 --> 00:35:57,420
if you if I know how to call those then

725
00:35:57,420 --> 00:36:00,240
I've also added it in the tool so I've

726
00:36:00,240 --> 00:36:02,280
added a kernel 32 Implement

727
00:36:02,280 --> 00:36:06,480
implementation of each technique NT API

728
00:36:06,480 --> 00:36:09,180
calls CIS calls as well and get Cisco

729
00:36:09,180 --> 00:36:11,579
stop and with that if you're going to

730
00:36:11,579 --> 00:36:14,820
compute it it's 46 times four different

731
00:36:14,820 --> 00:36:19,020
variations which gives you an almost or

732
00:36:19,020 --> 00:36:23,400
200 not sure it's it's lower than 200

733
00:36:23,400 --> 00:36:26,280
but it's lower than 200 techniques that

734
00:36:26,280 --> 00:36:29,460
you can utilize and learn on how to use

735
00:36:29,460 --> 00:36:32,339
process injection

736
00:36:32,339 --> 00:36:35,339
and next is the optional Shell Code

737
00:36:35,339 --> 00:36:37,619
encryption and the patching for evasion

738
00:36:37,619 --> 00:36:41,220
so these techniques are not well it's

739
00:36:41,220 --> 00:36:44,280
quite old but it's still useful but I

740
00:36:44,280 --> 00:36:47,700
think I've just added this functionality

741
00:36:47,700 --> 00:36:53,400
so that I can show that it's it's a

742
00:36:53,400 --> 00:36:55,500
it's a foundational technique wherein

743
00:36:55,500 --> 00:36:58,200
you encrypt your shell code so that the

744
00:36:58,200 --> 00:37:00,839
shell codes that you use if just

745
00:37:00,839 --> 00:37:03,960
generated from a meterpreter or just and

746
00:37:03,960 --> 00:37:07,800
your Cobalt strike uh C2 most of the

747
00:37:07,800 --> 00:37:10,140
time those shell codes gets flagged

748
00:37:10,140 --> 00:37:14,280
since it has the uh a signature that are

749
00:37:14,280 --> 00:37:16,800
well known and if if that shell code is

750
00:37:16,800 --> 00:37:18,540
being written in your binary and it's

751
00:37:18,540 --> 00:37:21,660
not encrypted then it the binary that

752
00:37:21,660 --> 00:37:23,460
you're going to use gets lagged easily

753
00:37:23,460 --> 00:37:25,619
so I've just added these functionalities

754
00:37:25,619 --> 00:37:28,859
as an optional one so that uh the the

755
00:37:28,859 --> 00:37:32,579
users can learn and somehow utilize this

756
00:37:32,579 --> 00:37:35,119
encryption

757
00:37:35,579 --> 00:37:38,460
now for the benefits as I've mentioned

758
00:37:38,460 --> 00:37:40,260
there are a lot of techniques that can

759
00:37:40,260 --> 00:37:43,920
be utilized so given the example here

760
00:37:43,920 --> 00:37:46,440
there are 46 available techniques that

761
00:37:46,440 --> 00:37:48,540
you can choose on

762
00:37:48,540 --> 00:37:52,020
and as a red teamer what I like is I can

763
00:37:52,020 --> 00:37:54,660
try a lot of techniques and play with it

764
00:37:54,660 --> 00:37:57,660
so that I can try to choose what

765
00:37:57,660 --> 00:38:01,020
technique can I utilize which can bypass

766
00:38:01,020 --> 00:38:04,579
some AVS or edrs

767
00:38:04,619 --> 00:38:07,560
next is the learning part so once you

768
00:38:07,560 --> 00:38:10,020
compile the binary or you print just

769
00:38:10,020 --> 00:38:12,140
print it if you don't want to compile it

770
00:38:12,140 --> 00:38:15,599
then uh it prints the information for

771
00:38:15,599 --> 00:38:17,700
each API call so that the users could

772
00:38:17,700 --> 00:38:20,599
learn what does that API call

773
00:38:20,599 --> 00:38:23,780
would mean

774
00:38:24,359 --> 00:38:28,980
next it's the variations as I've

775
00:38:28,980 --> 00:38:31,320
mentioned there are four variations as

776
00:38:31,320 --> 00:38:35,240
of now and uh you can

777
00:38:35,240 --> 00:38:39,359
based on the example here uh on the

778
00:38:39,359 --> 00:38:42,480
upper hand you can use uh by default

779
00:38:42,480 --> 00:38:45,480
it's on kernel 32 so by using a create

780
00:38:45,480 --> 00:38:47,700
remote thread technique you're using

781
00:38:47,700 --> 00:38:51,119
open process virtual alloc X right

782
00:38:51,119 --> 00:38:53,280
process memory create remote red and

783
00:38:53,280 --> 00:38:55,560
close handle but if you're going to

784
00:38:55,560 --> 00:38:58,040
utilize

785
00:38:58,820 --> 00:39:03,119
stop it uses the get ciscal stop

786
00:39:03,119 --> 00:39:04,619
oh

787
00:39:04,619 --> 00:39:08,280
source code of uh gets his sub

788
00:39:08,280 --> 00:39:11,460
repository and as well as the anti-api

789
00:39:11,460 --> 00:39:15,480
calls so if you can see here uh it's

790
00:39:15,480 --> 00:39:17,520
quite different from the one above since

791
00:39:17,520 --> 00:39:20,300
its uses it uses open process

792
00:39:20,300 --> 00:39:23,040
anti-allocate virtual memory anti-write

793
00:39:23,040 --> 00:39:25,380
virtual memory you can see that there's

794
00:39:25,380 --> 00:39:28,619
a pattern that there's an empty uh

795
00:39:28,619 --> 00:39:32,040
are prepended to it so it uh it just

796
00:39:32,040 --> 00:39:36,020
means that it's an 80 API function

797
00:39:36,660 --> 00:39:39,839
now it's about the blue team so not

798
00:39:39,839 --> 00:39:44,520
everyone is is doing a tool that hosts

799
00:39:44,520 --> 00:39:47,220
that hosts red team capabilities and

800
00:39:47,220 --> 00:39:50,880
blue team capabilities so uh the premise

801
00:39:50,880 --> 00:39:54,480
of this idea is that I've already coded

802
00:39:54,480 --> 00:39:58,200
the part we're in I know what technique

803
00:39:58,200 --> 00:40:00,960
or what API calls are being used for

804
00:40:00,960 --> 00:40:04,200
that specific technique why not check it

805
00:40:04,200 --> 00:40:08,099
on the blue team end as well so first of

806
00:40:08,099 --> 00:40:09,780
all it's a

807
00:40:09,780 --> 00:40:12,720
the capabilities of this of course is

808
00:40:12,720 --> 00:40:16,619
not uh it's not balanced the red team

809
00:40:16,619 --> 00:40:19,260
capabilities somehow is still on the

810
00:40:19,260 --> 00:40:21,420
upper hand so the blue team is still

811
00:40:21,420 --> 00:40:24,119
catching up since uh it's quite hard to

812
00:40:24,119 --> 00:40:26,400
code on the boat end so right now the

813
00:40:26,400 --> 00:40:29,460
functionalities is that uh mostly it

814
00:40:29,460 --> 00:40:32,160
checks on the static end of the analysis

815
00:40:32,160 --> 00:40:34,920
so first it's just a string based

816
00:40:34,920 --> 00:40:37,859
detection so not every AP not every

817
00:40:37,859 --> 00:40:40,579
binary is being packed or being

818
00:40:40,579 --> 00:40:43,980
obfuscated so it's still useful if you

819
00:40:43,980 --> 00:40:48,119
want to have a quick check or quick

820
00:40:48,119 --> 00:40:51,839
yeah a quick dirty check if there is a

821
00:40:51,839 --> 00:40:54,839
suspicious uh API calls that are written

822
00:40:54,839 --> 00:40:59,220
inside the binary so it checks all uh

823
00:40:59,220 --> 00:41:02,339
kernel 32 and anti-dll calls that are

824
00:41:02,339 --> 00:41:06,540
hard-coded as strings in the binary and

825
00:41:06,540 --> 00:41:10,140
uh of course the caveats here is the

826
00:41:10,140 --> 00:41:13,800
string obfuscation of course if if the

827
00:41:13,800 --> 00:41:17,280
binary has obfuscation and somehow the

828
00:41:17,280 --> 00:41:19,020
API calls that are being used are

829
00:41:19,020 --> 00:41:21,780
obfuscated might as well the binary can

830
00:41:21,780 --> 00:41:22,800
detect it

831
00:41:22,800 --> 00:41:26,220
and next it's the call checks are not

832
00:41:26,220 --> 00:41:29,579
sequential for now since uh as I've

833
00:41:29,579 --> 00:41:31,800
mentioned there is a sequence for each

834
00:41:31,800 --> 00:41:36,180
API call being used in the binary and

835
00:41:36,180 --> 00:41:40,160
and if you don't utilize the open create

836
00:41:40,160 --> 00:41:43,079
allocate memory right and execute

837
00:41:43,079 --> 00:41:46,440
somehow it's not that accurate and given

838
00:41:46,440 --> 00:41:47,700
that the

839
00:41:47,700 --> 00:41:51,720
the false positive accuracy of this tool

840
00:41:51,720 --> 00:41:55,079
is for the detection is still high but

841
00:41:55,079 --> 00:41:57,000
I'd still recommend to use this tool

842
00:41:57,000 --> 00:41:59,400
just for a quick check if you want to

843
00:41:59,400 --> 00:42:01,500
see if there's a process injection

844
00:42:01,500 --> 00:42:05,099
technique existing in the binary

845
00:42:05,099 --> 00:42:08,040
next is the Cisco detection somehow it's

846
00:42:08,040 --> 00:42:11,400
similar to the strings detection but

847
00:42:11,400 --> 00:42:14,400
it's just about the ciscals so as I've

848
00:42:14,400 --> 00:42:16,380
mentioned uh this is called attraction

849
00:42:16,380 --> 00:42:19,020
or the ciscals are being used

850
00:42:19,020 --> 00:42:20,880
as a

851
00:42:20,880 --> 00:42:24,720
by using some assembly code to utilize

852
00:42:24,720 --> 00:42:27,839
the ciscals and windows and given that

853
00:42:27,839 --> 00:42:31,040
if you use that Cisco and in the binary

854
00:42:31,040 --> 00:42:33,119
uh the

855
00:42:33,119 --> 00:42:36,060
the assembly code gets written as well

856
00:42:36,060 --> 00:42:39,960
so on the right side as you can see the

857
00:42:39,960 --> 00:42:43,020
hex code of the shell of this call is

858
00:42:43,020 --> 00:42:45,540
being written and if you have that

859
00:42:45,540 --> 00:42:48,420
signature of that API anti-api call on

860
00:42:48,420 --> 00:42:51,240
Cisco then might as well you can detect

861
00:42:51,240 --> 00:42:54,599
it as a hex code and the binary

862
00:42:54,599 --> 00:42:57,900
which is written on the left side so for

863
00:42:57,900 --> 00:43:00,420
the anti-allocate memory here is the

864
00:43:00,420 --> 00:43:03,240
Cisco hex signature of it so most of the

865
00:43:03,240 --> 00:43:05,700
detections here are just signature based

866
00:43:05,700 --> 00:43:08,779
and not dynamically

867
00:43:08,880 --> 00:43:13,500
next it's yeah it's about the detection

868
00:43:13,500 --> 00:43:15,599
the benefit one of the benefits of

869
00:43:15,599 --> 00:43:18,420
course is the detection of the API calls

870
00:43:18,420 --> 00:43:21,599
for a quick dirty check and it uses an

871
00:43:21,599 --> 00:43:24,240
aheuristic scoring based on the API call

872
00:43:24,240 --> 00:43:26,760
weight not every API call for each

873
00:43:26,760 --> 00:43:29,400
technique is equal of course there are

874
00:43:29,400 --> 00:43:32,280
some API calls that indicates that the

875
00:43:32,280 --> 00:43:34,560
technique is being used because of this

876
00:43:34,560 --> 00:43:37,140
API call so as an example in the create

877
00:43:37,140 --> 00:43:40,079
remote grid uh if you use open process

878
00:43:40,079 --> 00:43:43,140
virtual analog X right process memory on

879
00:43:43,140 --> 00:43:45,599
different techniques you still don't

880
00:43:45,599 --> 00:43:47,819
know if it's a process the injection

881
00:43:47,819 --> 00:43:50,760
about create remote red but if you see a

882
00:43:50,760 --> 00:43:55,220
create remote thread might as well it's

883
00:43:55,220 --> 00:43:57,599
the technique being used for process

884
00:43:57,599 --> 00:43:59,579
injection of course is a great remote

885
00:43:59,579 --> 00:44:02,880
red so with that in this framework you

886
00:44:02,880 --> 00:44:05,760
can add a weight for that API call so

887
00:44:05,760 --> 00:44:07,619
that you know that

888
00:44:07,619 --> 00:44:10,859
uh this technique or this API call is

889
00:44:10,859 --> 00:44:13,319
more significant than the others on for

890
00:44:13,319 --> 00:44:16,460
that specific technique and for this

891
00:44:16,460 --> 00:44:19,619
image on the right side you can see that

892
00:44:19,619 --> 00:44:20,880
uh

893
00:44:20,880 --> 00:44:23,880
since I used a binary compiled by my

894
00:44:23,880 --> 00:44:26,599
tool and a

895
00:44:33,060 --> 00:44:35,819
next for the benefits of the blue team

896
00:44:35,819 --> 00:44:39,119
it's uh as I've mentioned it's a payload

897
00:44:39,119 --> 00:44:42,359
creation framework so you can utilize

898
00:44:42,359 --> 00:44:45,480
the 46 techniques and as a blue teamer

899
00:44:45,480 --> 00:44:49,260
it's it's easy for you to just compile

900
00:44:49,260 --> 00:44:51,960
it and run it on your AV EDR on a

901
00:44:51,960 --> 00:44:54,780
control environment so if if you use the

902
00:44:54,780 --> 00:44:58,380
tool and the tool if you use a tool with

903
00:44:58,380 --> 00:45:01,579
your own Shell Code with your own

904
00:45:01,579 --> 00:45:03,900
source code if you want to tweak the

905
00:45:03,900 --> 00:45:07,079
source code before compilation then you

906
00:45:07,079 --> 00:45:10,140
won't have any worries that the tests

907
00:45:10,140 --> 00:45:12,960
that you will do on your environment is

908
00:45:12,960 --> 00:45:16,500
is malicious or uncontrolled so as a

909
00:45:16,500 --> 00:45:18,780
blue teamers you want to test your own

910
00:45:18,780 --> 00:45:22,079
environment with a controlled setup if

911
00:45:22,079 --> 00:45:23,400
if you want

912
00:45:23,400 --> 00:45:26,099
if you want control it then if you if

913
00:45:26,099 --> 00:45:28,619
you just want to check a malware that

914
00:45:28,619 --> 00:45:31,859
can be if it can be detected by your

915
00:45:31,859 --> 00:45:33,960
security controls and you don't know the

916
00:45:33,960 --> 00:45:37,440
capabilities of it then you're gonna be

917
00:45:37,440 --> 00:45:39,480
messed up if you don't know how it does

918
00:45:39,480 --> 00:45:42,359
but this tool gives you the capability

919
00:45:42,359 --> 00:45:45,480
to First learn how the tool works and

920
00:45:45,480 --> 00:45:47,640
compile it on your own so that you know

921
00:45:47,640 --> 00:45:51,480
how it works and you will expect if if

922
00:45:51,480 --> 00:45:54,960
your EDR or AV did not detect it then

923
00:45:54,960 --> 00:45:57,839
you know what part of the tool or the

924
00:45:57,839 --> 00:46:01,619
payload was not able to be detected

925
00:46:01,619 --> 00:46:03,839
since it's quite hard if you just throw

926
00:46:03,839 --> 00:46:06,780
a malware if if you know some malware

927
00:46:06,780 --> 00:46:09,900
family such as Zeus or trickbot and if

928
00:46:09,900 --> 00:46:12,119
you just run it on your edrs you don't

929
00:46:12,119 --> 00:46:15,839
know what API call was not being flagged

930
00:46:15,839 --> 00:46:18,720
what indicator was not being flagged on

931
00:46:18,720 --> 00:46:22,140
that uh malware sample so if you control

932
00:46:22,140 --> 00:46:24,839
that malware sample you still have the

933
00:46:24,839 --> 00:46:28,440
idea of what what lacks of that EDR and

934
00:46:28,440 --> 00:46:30,180
what can be improved of that EDR sir

935
00:46:30,180 --> 00:46:32,940
that you can contact your EDR provider

936
00:46:32,940 --> 00:46:35,460
and say that your tool is you can't

937
00:46:35,460 --> 00:46:38,400
detect this so you can do something

938
00:46:38,400 --> 00:46:40,560
like that if you have the supporting

939
00:46:40,560 --> 00:46:43,800
backup of of how the tool or that

940
00:46:43,800 --> 00:46:48,740
Aviation on that binary works

941
00:46:48,859 --> 00:46:53,040
so now I've talked about an injector uh

942
00:46:53,040 --> 00:46:56,220
it's now about development plans since I

943
00:46:56,220 --> 00:46:59,040
just did the tool itself first it's

944
00:46:59,040 --> 00:47:01,500
about my own personal use I've been

945
00:47:01,500 --> 00:47:03,839
using this tool for our red teaming

946
00:47:03,839 --> 00:47:07,200
purposes so that if I if I have an

947
00:47:07,200 --> 00:47:09,119
engagement for red teaming I can just

948
00:47:09,119 --> 00:47:12,599
fire up this tool and yeah I can compile

949
00:47:12,599 --> 00:47:16,200
my binary and use it for engagement

950
00:47:16,200 --> 00:47:20,040
but still I uh and next I just use this

951
00:47:20,040 --> 00:47:21,839
tool for presentation here in root gun

952
00:47:21,839 --> 00:47:23,579
since I want to present here in root gun

953
00:47:23,579 --> 00:47:28,260
and which is why I just did this Tool uh

954
00:47:28,260 --> 00:47:31,319
three four months ago from the idea and

955
00:47:31,319 --> 00:47:33,540
the customization or coding of the pay

956
00:47:33,540 --> 00:47:36,540
of the tool itself so there are still a

957
00:47:36,540 --> 00:47:40,200
lot of plans for this tool so if you

958
00:47:40,200 --> 00:47:42,060
guys are also interested in malware

959
00:47:42,060 --> 00:47:44,579
development feel free to approach me and

960
00:47:44,579 --> 00:47:46,980
we can work on this tool moving forward

961
00:47:46,980 --> 00:47:50,819
so for development plans uh

962
00:47:50,819 --> 00:47:54,119
of course uh it's uh there are a lot of

963
00:47:54,119 --> 00:47:57,480
variations of different API calls and

964
00:47:57,480 --> 00:48:00,599
the techniques itself so if as I

965
00:48:00,599 --> 00:48:03,300
mentioned there are 46 techniques and

966
00:48:03,300 --> 00:48:06,660
there are four variations as of now and

967
00:48:06,660 --> 00:48:09,420
if you want to randomize if every API

968
00:48:09,420 --> 00:48:12,300
call for each variation so for example

969
00:48:12,300 --> 00:48:14,940
there's a create remote thread and it

970
00:48:14,940 --> 00:48:17,220
uses open process

971
00:48:17,220 --> 00:48:19,980
virtual dialog X right process memory

972
00:48:19,980 --> 00:48:24,060
create remote red a crate rate X and uh

973
00:48:24,060 --> 00:48:27,240
close handle if you can try to randomize

974
00:48:27,240 --> 00:48:30,540
the variant for each API call then the

975
00:48:30,540 --> 00:48:33,359
computation for each

976
00:48:33,359 --> 00:48:36,660
if uh going back if if you want to

977
00:48:36,660 --> 00:48:40,859
randomize each API call then it the tool

978
00:48:40,859 --> 00:48:44,400
will present you a kernel 32 call for

979
00:48:44,400 --> 00:48:48,540
open process and the API for example in

980
00:48:48,540 --> 00:48:52,020
the virtual alloc X assist call for

981
00:48:52,020 --> 00:48:55,260
create remote red and gas is going to

982
00:48:55,260 --> 00:48:59,520
stop for a close handle with that as you

983
00:48:59,520 --> 00:49:03,359
as you as you can see it gives more

984
00:49:03,359 --> 00:49:06,960
variation and the technique it gives a

985
00:49:06,960 --> 00:49:09,420
hard time more for the EDR if they have

986
00:49:09,420 --> 00:49:14,160
a signature detection or a a heuristic

987
00:49:14,160 --> 00:49:17,160
one since the API calls being used are

988
00:49:17,160 --> 00:49:19,920
well versed and were variated which is

989
00:49:19,920 --> 00:49:22,020
why it could give a more

990
00:49:22,020 --> 00:49:25,319
uh capability to evade edrs

991
00:49:25,319 --> 00:49:28,980
but for now and with that variation of

992
00:49:28,980 --> 00:49:32,099
randomization it does not uh the

993
00:49:32,099 --> 00:49:34,560
computation for the variations of the

994
00:49:34,560 --> 00:49:37,079
technique does not compute into 46 times

995
00:49:37,079 --> 00:49:42,420
4 but into 46 uh for uh four

996
00:49:42,420 --> 00:49:45,119
permutations of 46 so it will give a lot

997
00:49:45,119 --> 00:49:48,119
more uh different variations of the tool

998
00:49:48,119 --> 00:49:49,500
itself

999
00:49:49,500 --> 00:49:52,800
next is the evasion techniques so as a

1000
00:49:52,800 --> 00:49:56,099
red team if anyone went here to my talk

1001
00:49:56,099 --> 00:49:59,160
yesterday evasion is very important you

1002
00:49:59,160 --> 00:50:01,500
won't dwell in red teaming if you can do

1003
00:50:01,500 --> 00:50:04,800
evasion so of course the tool if you

1004
00:50:04,800 --> 00:50:07,440
want to get a lot of red teamers who

1005
00:50:07,440 --> 00:50:09,480
want to use this who wants to use this

1006
00:50:09,480 --> 00:50:12,780
tool and con contribute to it as well

1007
00:50:12,780 --> 00:50:15,900
then uh you want you would want to make

1008
00:50:15,900 --> 00:50:18,300
this tool evade every edrs that are

1009
00:50:18,300 --> 00:50:22,680
existing so as as a red team uh

1010
00:50:22,680 --> 00:50:25,260
Enthusiast I would want to make this

1011
00:50:25,260 --> 00:50:28,500
tool in the near future to be able to

1012
00:50:28,500 --> 00:50:32,220
evade all edrs not declaring it but

1013
00:50:32,220 --> 00:50:36,359
hoping that this tool could could do it

1014
00:50:36,359 --> 00:50:39,060
so next is the weight or heuristic

1015
00:50:39,060 --> 00:50:41,460
scoring for optimization so as I've

1016
00:50:41,460 --> 00:50:43,980
mentioned there are weights for each API

1017
00:50:43,980 --> 00:50:46,740
call and the technique and

1018
00:50:46,740 --> 00:50:52,200
yeah there are still on uh not that an

1019
00:50:52,200 --> 00:50:55,920
accurate but uh for me it's still the

1020
00:50:55,920 --> 00:50:58,260
scoring is still not optimized so might

1021
00:50:58,260 --> 00:51:01,260
as well optimize it and lastly for the

1022
00:51:01,260 --> 00:51:03,599
blue team as I have mentioned the

1023
00:51:03,599 --> 00:51:05,400
capabilities of Blue Team and Red Team

1024
00:51:05,400 --> 00:51:09,180
for this tool is not yet equal so if if

1025
00:51:09,180 --> 00:51:11,280
I would want to make it equal the

1026
00:51:11,280 --> 00:51:13,800
dynamic API hooking for blue team

1027
00:51:13,800 --> 00:51:16,619
capabilities would be the one to solve

1028
00:51:16,619 --> 00:51:20,040
that problem for me since if for now

1029
00:51:20,040 --> 00:51:22,440
I've as I have mentioned most of the

1030
00:51:22,440 --> 00:51:25,920
detections are just focusing on the

1031
00:51:25,920 --> 00:51:28,140
static analysis if you have the

1032
00:51:28,140 --> 00:51:31,079
capability to do it dynamically then you

1033
00:51:31,079 --> 00:51:34,319
would be able to to detect every API

1034
00:51:34,319 --> 00:51:37,920
call for that binary and check if it

1035
00:51:37,920 --> 00:51:39,960
indicates that it's a process injection

1036
00:51:39,960 --> 00:51:44,040
technique in a more accurate way so for

1037
00:51:44,040 --> 00:51:46,559
the dynamic API hooking you can utilize

1038
00:51:46,559 --> 00:51:50,160
the this by utilizing the the

1039
00:51:50,160 --> 00:51:53,880
definitions for each for each technique

1040
00:51:53,880 --> 00:51:57,240
defined with the API calls and just use

1041
00:51:57,240 --> 00:52:00,780
use those definitions to know what API

1042
00:52:00,780 --> 00:52:03,900
calls you will hook in the binary and

1043
00:52:03,900 --> 00:52:06,540
know if it was called or not so with

1044
00:52:06,540 --> 00:52:08,280
that idea you can

1045
00:52:08,280 --> 00:52:10,740
you can somehow intercept every API call

1046
00:52:10,740 --> 00:52:12,960
and know if it is a process ingestion

1047
00:52:12,960 --> 00:52:15,540
technique or not

1048
00:52:15,540 --> 00:52:18,599
so I've been talking a lot so let's run

1049
00:52:18,599 --> 00:52:20,280
through some demos

1050
00:52:20,280 --> 00:52:23,780
no no pass

1051
00:52:24,480 --> 00:52:29,040
so okay so I'll just pass my

1052
00:52:29,040 --> 00:52:32,099
uh VM for now just to show you how the

1053
00:52:32,099 --> 00:52:36,500
tool works so this will just be quick

1054
00:52:54,119 --> 00:52:56,359
foreign

1055
00:53:13,380 --> 00:53:16,099
okay

1056
00:53:18,200 --> 00:53:22,160
Kali Linux hacker

1057
00:53:26,339 --> 00:53:29,099
and okay so now

1058
00:53:29,099 --> 00:53:33,059
oh I can see this

1059
00:53:33,059 --> 00:53:36,540
so now let's try to run the tool so

1060
00:53:36,540 --> 00:53:39,180
first as I have mentioned it highlights

1061
00:53:39,180 --> 00:53:42,420
the usage or learning of the tool so

1062
00:53:42,420 --> 00:53:44,280
let's run through first

1063
00:53:44,280 --> 00:53:46,940
the

1064
00:53:52,140 --> 00:53:54,359
okay wait wait let me just just a minute

1065
00:53:54,359 --> 00:53:57,720
I'll just try to change the

1066
00:53:57,720 --> 00:53:59,640
display

1067
00:53:59,640 --> 00:54:02,779
this place

1068
00:54:04,940 --> 00:54:08,520
okay let's use a mirrored one so that I

1069
00:54:08,520 --> 00:54:10,559
can easily talk

1070
00:54:10,559 --> 00:54:11,819
oh

1071
00:54:11,819 --> 00:54:15,599
use as mirror

1072
00:54:15,599 --> 00:54:22,160
okay so now I can talk easily uh okay

1073
00:54:23,160 --> 00:54:25,559
so now I'm talking about the tools

1074
00:54:25,559 --> 00:54:26,880
learning

1075
00:54:26,880 --> 00:54:29,099
somehow learning tool for process

1076
00:54:29,099 --> 00:54:31,920
injection so let's try to list all the

1077
00:54:31,920 --> 00:54:34,920
techniques that are existing so as you

1078
00:54:34,920 --> 00:54:36,900
can see the tool has four to six

1079
00:54:36,900 --> 00:54:39,800
techniques with different techniques

1080
00:54:39,800 --> 00:54:43,200
focusing and process injection now if

1081
00:54:43,200 --> 00:54:44,640
you want to learn just about this

1082
00:54:44,640 --> 00:54:46,559
technique and not use it or for

1083
00:54:46,559 --> 00:54:49,680
compilation then you can just use the

1084
00:54:49,680 --> 00:54:50,640
technique

1085
00:54:50,640 --> 00:54:54,180
for example uh well create remote red or

1086
00:54:54,180 --> 00:54:59,160
okay let's just use apcq so ABC q and

1087
00:54:59,160 --> 00:55:01,619
just see all the API calls that are

1088
00:55:01,619 --> 00:55:04,020
being used for this technique so you can

1089
00:55:04,020 --> 00:55:07,380
see that these are the API calls that

1090
00:55:07,380 --> 00:55:09,599
are being used by the technique and the

1091
00:55:09,599 --> 00:55:12,960
description about that API call so with

1092
00:55:12,960 --> 00:55:14,940
that you can learn somehow about the

1093
00:55:14,940 --> 00:55:16,920
technique on what API calls are being

1094
00:55:16,920 --> 00:55:20,339
used and what does what does that API

1095
00:55:20,339 --> 00:55:22,380
call mean

1096
00:55:22,380 --> 00:55:26,160
next it's about the compilation so let's

1097
00:55:26,160 --> 00:55:28,740
run through the red team capabilities of

1098
00:55:28,740 --> 00:55:31,980
the technique so if if you want to use

1099
00:55:31,980 --> 00:55:36,000
the red team capabilities you would want

1100
00:55:36,000 --> 00:55:40,020
to use this uh parameters

1101
00:55:40,020 --> 00:55:43,980
so if it does not have this brackets it

1102
00:55:43,980 --> 00:55:47,220
does not it does mean that

1103
00:55:47,220 --> 00:55:49,680
uh it's not optional so you need to

1104
00:55:49,680 --> 00:55:53,460
provide a shell code for this tool and a

1105
00:55:53,460 --> 00:55:56,460
technique name since it would not the

1106
00:55:56,460 --> 00:55:58,020
tool would not know what technique you

1107
00:55:58,020 --> 00:56:00,540
want to compile or print if you don't

1108
00:56:00,540 --> 00:56:01,740
Define it

1109
00:56:01,740 --> 00:56:06,059
so let's run through this payload uh

1110
00:56:06,059 --> 00:56:08,160
let's run the red team capability and

1111
00:56:08,160 --> 00:56:10,200
let's put the Shell Code so I've

1112
00:56:10,200 --> 00:56:12,960
prepared a payload that's been here and

1113
00:56:12,960 --> 00:56:15,540
let's use a technique create

1114
00:56:15,540 --> 00:56:19,079
uh with uh if uh just to give an idea on

1115
00:56:19,079 --> 00:56:21,000
how to use a tool efficiently you can

1116
00:56:21,000 --> 00:56:23,579
use an injector here on the other side

1117
00:56:23,579 --> 00:56:27,599
using a split split view of the of the

1118
00:56:27,599 --> 00:56:30,780
terminal with a Terminator you can list

1119
00:56:30,780 --> 00:56:34,200
and print all so you have here at the

1120
00:56:34,200 --> 00:56:37,079
right side all the techniques and you

1121
00:56:37,079 --> 00:56:40,800
can just copy paste it here and you can

1122
00:56:40,800 --> 00:56:43,440
just copy paste here the technique that

1123
00:56:43,440 --> 00:56:46,740
you want to choose and just for dash B

1124
00:56:46,740 --> 00:56:50,339
uh uppercase it's just print so you

1125
00:56:50,339 --> 00:56:53,339
would have here first uh the learning

1126
00:56:53,339 --> 00:56:56,220
part where and it prints

1127
00:56:56,220 --> 00:57:00,079
well it prints the definition for each

1128
00:57:00,079 --> 00:57:03,960
API call that is being used and as well

1129
00:57:03,960 --> 00:57:06,720
as the source code so if you don't want

1130
00:57:06,720 --> 00:57:08,760
to compile it if you're not going to use

1131
00:57:08,760 --> 00:57:11,099
a binary and if you just want to learn

1132
00:57:11,099 --> 00:57:16,200
Nim and how to call Api functions on uh

1133
00:57:16,200 --> 00:57:18,300
API functions for malware development

1134
00:57:18,300 --> 00:57:20,700
then you can use this functionality so

1135
00:57:20,700 --> 00:57:22,680
you can see here that the create process

1136
00:57:22,680 --> 00:57:26,760
is being called the virtual alloc X the

1137
00:57:26,760 --> 00:57:28,859
right process memory and the virtual

1138
00:57:28,859 --> 00:57:33,000
protect X and as I have mentioned this

1139
00:57:33,000 --> 00:57:36,119
API calls are existing in a functions

1140
00:57:36,119 --> 00:57:39,000
directory and injector so you can just

1141
00:57:39,000 --> 00:57:42,000
check these functions and the same API

1142
00:57:42,000 --> 00:57:45,720
call so you can check here there is a

1143
00:57:45,720 --> 00:57:47,700
DOT name file after copy pasting and

1144
00:57:47,700 --> 00:57:51,480
tabbing and you can see the definitions

1145
00:57:51,480 --> 00:57:56,099
of this API call so the tool those what

1146
00:57:56,099 --> 00:58:00,000
the tool does is it just compiles the

1147
00:58:00,000 --> 00:58:04,260
contents of each code snippet into one

1148
00:58:04,260 --> 00:58:06,720
so as you can see here the contents of

1149
00:58:06,720 --> 00:58:10,440
this are just being written into this

1150
00:58:10,440 --> 00:58:11,760
one

1151
00:58:11,760 --> 00:58:14,880
which makes it a framework a modular

1152
00:58:14,880 --> 00:58:16,020
framework

1153
00:58:16,020 --> 00:58:21,119
and uh as I showed it here again

1154
00:58:21,119 --> 00:58:25,500
and the models that are the techniques

1155
00:58:25,500 --> 00:58:28,280
uh

1156
00:58:28,440 --> 00:58:31,680
are being written here and if you want

1157
00:58:31,680 --> 00:58:36,059
to check the early bird early bird

1158
00:58:36,059 --> 00:58:39,059
technique it uses a great process which

1159
00:58:39,059 --> 00:58:44,280
is being used here and virtual x uh Red

1160
00:58:44,280 --> 00:58:48,359
Cross memory and Q user APC so with this

1161
00:58:48,359 --> 00:58:51,839
uh demo you can see that the framework

1162
00:58:51,839 --> 00:58:53,520
being built

1163
00:58:53,520 --> 00:58:55,339
heavily

1164
00:58:55,339 --> 00:58:58,799
relies on how you define it on the

1165
00:58:58,799 --> 00:59:01,980
configurations as well as how you write

1166
00:59:01,980 --> 00:59:03,720
it and

1167
00:59:03,720 --> 00:59:07,680
and a modular one since if if you had if

1168
00:59:07,680 --> 00:59:11,220
you have the create process or virtual X

1169
00:59:11,220 --> 00:59:14,520
code snippet if you have different

1170
00:59:14,520 --> 00:59:17,400
techniques that are using virtual let's

1171
00:59:17,400 --> 00:59:19,319
try to check how many ver how many

1172
00:59:19,319 --> 00:59:22,200
techniques does use Virtual alloc X so

1173
00:59:22,200 --> 00:59:27,200
cat crap virtual hello

1174
00:59:27,420 --> 00:59:30,599
X so we can see here that there are four

1175
00:59:30,599 --> 00:59:32,339
techniques that are using virtual Alex

1176
00:59:32,339 --> 00:59:35,220
which means that with our modular

1177
00:59:35,220 --> 00:59:38,460
framework we can easily reuse the code

1178
00:59:38,460 --> 00:59:41,280
that we have defined and make the other

1179
00:59:41,280 --> 00:59:45,480
tools use them uh the virtual analog X

1180
00:59:45,480 --> 00:59:49,440
that we have defined and yeah it should

1181
00:59:49,440 --> 00:59:52,020
work moving forward but still we should

1182
00:59:52,020 --> 00:59:55,920
account that the custom arguments that

1183
00:59:55,920 --> 00:59:57,599
are being used in different techniques

1184
00:59:57,599 --> 01:00:00,240
if you don't if you're familiar with the

1185
01:00:00,240 --> 01:00:01,920
technique that it uses a different

1186
01:00:01,920 --> 01:00:04,819
argument then you should Define it in

1187
01:00:04,819 --> 01:00:08,640
the customs

1188
01:00:08,640 --> 01:00:10,380
uh

1189
01:00:10,380 --> 01:00:14,099
I'll give a different example

1190
01:00:14,099 --> 01:00:18,420
uh let's use this uh early bird ABC Cube

1191
01:00:18,420 --> 01:00:20,339
versus

1192
01:00:20,339 --> 01:00:23,280
uh yeah uh you can see here that you can

1193
01:00:23,280 --> 01:00:26,520
Define here that the custom arguments of

1194
01:00:26,520 --> 01:00:30,480
the bind of the API call is being used

1195
01:00:30,480 --> 01:00:33,299
without relying on the functions

1196
01:00:33,299 --> 01:00:36,359
directory so now let's try to compile a

1197
01:00:36,359 --> 01:00:38,520
binary and see if uh

1198
01:00:38,520 --> 01:00:41,940
if it can detect something so let's try

1199
01:00:41,940 --> 01:00:47,099
blue the F uh let's use samples

1200
01:00:47,099 --> 01:00:50,220
oh no no sample smaller samples so there

1201
01:00:50,220 --> 01:00:52,140
are other samples here and let's try to

1202
01:00:52,140 --> 01:00:55,740
check this so you can see here that

1203
01:00:55,740 --> 01:00:57,780
nothing is detected so let's try another

1204
01:00:57,780 --> 01:00:59,220
one

1205
01:00:59,220 --> 01:01:01,920
well let's just try the

1206
01:01:01,920 --> 01:01:04,760
existing one

1207
01:01:05,339 --> 01:01:07,859
so you can see here in the sample that

1208
01:01:07,859 --> 01:01:09,119
uh

1209
01:01:09,119 --> 01:01:12,059
the potential injection technique was

1210
01:01:12,059 --> 01:01:14,940
able to the the tool was able to detect

1211
01:01:14,940 --> 01:01:18,859
vanilla technique with 80 87 chance

1212
01:01:18,859 --> 01:01:21,720
because it was able to detect virtual

1213
01:01:21,720 --> 01:01:24,119
alloc trade red and wait for a single

1214
01:01:24,119 --> 01:01:26,760
object and with that static checks it

1215
01:01:26,760 --> 01:01:29,180
was able to somehow give you an idea

1216
01:01:29,180 --> 01:01:32,400
what API calls was being used on that

1217
01:01:32,400 --> 01:01:36,000
binary that you want to test and uh the

1218
01:01:36,000 --> 01:01:38,160
definition of each API call that was

1219
01:01:38,160 --> 01:01:40,619
being used

1220
01:01:40,619 --> 01:01:43,440
so

1221
01:01:43,440 --> 01:01:45,200
uh

1222
01:01:45,200 --> 01:01:48,439
with that

1223
01:01:49,559 --> 01:01:53,299
oh yeah any questions

1224
01:01:57,500 --> 01:02:01,440
uh any questions if someone asks me a

1225
01:02:01,440 --> 01:02:03,420
question you can get a free tiers

1226
01:02:03,420 --> 01:02:07,280
t-shirt on that boot

1227
01:02:07,280 --> 01:02:11,240
is there any questions

1228
01:02:11,900 --> 01:02:15,000
well any questions about at all so

1229
01:02:15,000 --> 01:02:18,680
anyone would want to ask a question

1230
01:02:22,610 --> 01:02:27,920
[Laughter]

1231
01:02:35,400 --> 01:02:41,460
any questions uh well uh if not please

1232
01:02:41,460 --> 01:02:44,339
feel free to hit me up or during this

1233
01:02:44,339 --> 01:02:47,579
Con or just on LinkedIn if you're

1234
01:02:47,579 --> 01:02:50,400
interested in red teaming since real red

1235
01:02:50,400 --> 01:02:52,440
team enthusiasts and I would love to see

1236
01:02:52,440 --> 01:02:54,960
some people who pursue a red team

1237
01:02:54,960 --> 01:02:58,140
especially malware development so if you

1238
01:02:58,140 --> 01:02:59,819
would also want to contribute on the

1239
01:02:59,819 --> 01:03:02,099
tool just feel free to check the tool

1240
01:03:02,099 --> 01:03:04,619
itself on GitHub and feel free to

1241
01:03:04,619 --> 01:03:06,720
approach me so that we can talk about

1242
01:03:06,720 --> 01:03:09,299
the capabilities and future development

1243
01:03:09,299 --> 01:03:11,280
plans of this tool

1244
01:03:11,280 --> 01:03:14,520
so lastly I would like to highlight some

1245
01:03:14,520 --> 01:03:17,520
people who will help me on formulating

1246
01:03:17,520 --> 01:03:20,579
the idea and validating that my idea is

1247
01:03:20,579 --> 01:03:24,119
good for this talk so first is reductor

1248
01:03:24,119 --> 01:03:28,680
memory is the Sameer Ian secretary and

1249
01:03:28,680 --> 01:03:31,440
Jigglypuff thanks to these guys who

1250
01:03:31,440 --> 01:03:33,299
helped me building this tool

1251
01:03:33,299 --> 01:03:35,700
and lastly uh

1252
01:03:35,700 --> 01:03:38,339
again I'm Aries and I'm from the year

1253
01:03:38,339 --> 01:03:40,140
Cyber Solutions and thank you for

1254
01:03:40,140 --> 01:03:42,990
attending my talk

1255
01:03:42,990 --> 01:03:46,180
[Applause]

