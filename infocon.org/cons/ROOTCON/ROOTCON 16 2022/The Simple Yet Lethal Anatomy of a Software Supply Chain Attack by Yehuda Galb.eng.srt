1
00:00:01,079 --> 00:00:03,958
hi everyone and welcome to root Khan and

2
00:00:03,959 --> 00:00:05,580
thank you for spending the time to hear

3
00:00:05,580 --> 00:00:07,500
what I have got to say and I hope you

4
00:00:07,500 --> 00:00:09,420
find it useful and that you learned some

5
00:00:09,420 --> 00:00:10,880
new things

6
00:00:10,880 --> 00:00:13,920
a security researcher at check marks and

7
00:00:13,920 --> 00:00:16,079
in this presentation I will be speaking

8
00:00:16,079 --> 00:00:17,520
about software supply chain security

9
00:00:17,520 --> 00:00:20,220
from an attacker's perspective

10
00:00:20,220 --> 00:00:22,140
supply chain security has been a topic

11
00:00:22,140 --> 00:00:23,820
of great discussion over the past few

12
00:00:23,820 --> 00:00:25,980
years and that Spotlight only continues

13
00:00:25,980 --> 00:00:28,260
to grow but don't take my word for it

14
00:00:28,260 --> 00:00:30,900
major analysts such as Gartner have been

15
00:00:30,900 --> 00:00:32,940
warning of the exponential increases in

16
00:00:32,940 --> 00:00:34,680
software supply chain attacks over the

17
00:00:34,680 --> 00:00:35,880
last few years

18
00:00:35,880 --> 00:00:38,160
governments have been taking note of

19
00:00:38,160 --> 00:00:40,260
this problem as well the United States

20
00:00:40,260 --> 00:00:42,059
government had even released an

21
00:00:42,059 --> 00:00:43,800
executive order on this issue of

22
00:00:43,800 --> 00:00:45,360
improving the software supply chain

23
00:00:45,360 --> 00:00:47,219
security

24
00:00:47,219 --> 00:00:48,719
but what exactly the software supply

25
00:00:48,719 --> 00:00:50,820
chain and how has it become such an

26
00:00:50,820 --> 00:00:51,899
issue

27
00:00:51,899 --> 00:00:53,700
When comparing the software supply chain

28
00:00:53,700 --> 00:00:56,039
to the traditional supply chain the flow

29
00:00:56,039 --> 00:00:58,440
is quite similar when producing a

30
00:00:58,440 --> 00:01:00,360
product materials are gathered from

31
00:01:00,360 --> 00:01:01,620
different suppliers from different

32
00:01:01,620 --> 00:01:03,719
locations which are then assembled

33
00:01:03,719 --> 00:01:06,299
together Under One Roof and then shipped

34
00:01:06,299 --> 00:01:07,920
to the customer

35
00:01:07,920 --> 00:01:10,140
When developing software the process is

36
00:01:10,140 --> 00:01:12,060
similar in a way where it starts with

37
00:01:12,060 --> 00:01:14,100
the developer's writing code using some

38
00:01:14,100 --> 00:01:16,680
Source control for example GitHub during

39
00:01:16,680 --> 00:01:18,360
the development process the developers

40
00:01:18,360 --> 00:01:19,439
will combine a whole bunch of

41
00:01:19,439 --> 00:01:21,479
third-party code into their source code

42
00:01:21,479 --> 00:01:24,180
and in the end have a finished product

43
00:01:24,180 --> 00:01:26,640
that will be shared with the consumer

44
00:01:26,640 --> 00:01:29,280
this diagram is actually part of a

45
00:01:29,280 --> 00:01:32,040
framework called Salsa

46
00:01:32,040 --> 00:01:34,500
salsa has been put together and pushed

47
00:01:34,500 --> 00:01:36,780
by major corporations including Google

48
00:01:36,780 --> 00:01:41,040
the Linux Foundation Intel and more

49
00:01:41,040 --> 00:01:43,320
I should note that these companies are

50
00:01:43,320 --> 00:01:46,259
not security vendors however they have

51
00:01:46,259 --> 00:01:48,420
been put in many resources into this

52
00:01:48,420 --> 00:01:50,939
project because of how much they rely on

53
00:01:50,939 --> 00:01:53,700
software especially open source and

54
00:01:53,700 --> 00:01:56,759
understand the importance of securing it

55
00:01:56,759 --> 00:01:59,820
going back to the supply chain flow each

56
00:01:59,820 --> 00:02:01,920
letter represents another Threat Vector

57
00:02:01,920 --> 00:02:03,960
from which an attacker can compromise

58
00:02:03,960 --> 00:02:06,119
the entire supply chain

59
00:02:06,119 --> 00:02:09,000
fortunately most of the threat vectors

60
00:02:09,000 --> 00:02:11,038
in the supply chain are fully within the

61
00:02:11,038 --> 00:02:13,620
control of the organization and csos can

62
00:02:13,620 --> 00:02:15,420
Implement various controls to reduce the

63
00:02:15,420 --> 00:02:16,680
attack surface

64
00:02:16,680 --> 00:02:18,120
however

65
00:02:18,120 --> 00:02:20,040
there is one piece in the supply chain

66
00:02:20,040 --> 00:02:21,540
that is outside the control of the

67
00:02:21,540 --> 00:02:25,800
organization and that is dependencies

68
00:02:25,800 --> 00:02:27,720
the third party open source software

69
00:02:27,720 --> 00:02:30,420
that is integrated into the workflow

70
00:02:30,420 --> 00:02:33,239
a CSL can enforce for example two-factor

71
00:02:33,239 --> 00:02:35,220
authentication and all developers within

72
00:02:35,220 --> 00:02:36,840
the organization

73
00:02:36,840 --> 00:02:39,599
however they can't for example enforce

74
00:02:39,599 --> 00:02:41,400
two-factor authentication on open source

75
00:02:41,400 --> 00:02:43,379
developers or harder their workstations

76
00:02:43,379 --> 00:02:47,280
they can ask but they can't enforce it

77
00:02:47,280 --> 00:02:49,980
okay so open source software is a

78
00:02:49,980 --> 00:02:53,280
concern but how big of a concern how

79
00:02:53,280 --> 00:02:55,260
many are actually using open source

80
00:02:55,260 --> 00:02:57,300
software well

81
00:02:57,300 --> 00:02:59,879
everyone is using it and the follow-up

82
00:02:59,879 --> 00:03:01,319
question is

83
00:03:01,319 --> 00:03:03,300
how much are they using it what

84
00:03:03,300 --> 00:03:05,459
percentage of the final code contains

85
00:03:05,459 --> 00:03:07,080
open source

86
00:03:07,080 --> 00:03:10,319
as a matter of fact quite a lot

87
00:03:10,319 --> 00:03:12,959
so it's safe to say that yeah open

88
00:03:12,959 --> 00:03:16,260
source software is of great concern

89
00:03:16,260 --> 00:03:18,780
and if it's such an issue why is it

90
00:03:18,780 --> 00:03:20,760
still attractive why is it so attractive

91
00:03:20,760 --> 00:03:22,980
why is everyone using it

92
00:03:22,980 --> 00:03:25,260
for one thing it helps developers

93
00:03:25,260 --> 00:03:27,720
deliver fast there is a continuous rush

94
00:03:27,720 --> 00:03:29,400
to release software as soon as possible

95
00:03:29,400 --> 00:03:31,860
and if someone out there has already

96
00:03:31,860 --> 00:03:33,959
written code that performs the native

97
00:03:33,959 --> 00:03:36,420
functionality then rather than reinvent

98
00:03:36,420 --> 00:03:38,640
the wheel a developer could simply use

99
00:03:38,640 --> 00:03:40,680
that code in his own project

100
00:03:40,680 --> 00:03:43,739
okay so you might be thinking why

101
00:03:43,739 --> 00:03:46,019
doesn't an organization just scan that

102
00:03:46,019 --> 00:03:48,120
third-party software to ensure it is

103
00:03:48,120 --> 00:03:49,140
safe

104
00:03:49,140 --> 00:03:51,299
this brings us to dependencies and the

105
00:03:51,299 --> 00:03:53,220
dependencies of dependencies

106
00:03:53,220 --> 00:03:55,739
when a developer desires a certain

107
00:03:55,739 --> 00:03:58,140
software package from some open source

108
00:03:58,140 --> 00:04:00,540
project that package is normally

109
00:04:00,540 --> 00:04:02,700
dependent on some other open source

110
00:04:02,700 --> 00:04:04,260
package that grants it certain

111
00:04:04,260 --> 00:04:05,879
functionality

112
00:04:05,879 --> 00:04:07,799
and if only this was only a one-to-one

113
00:04:07,799 --> 00:04:11,280
ratio in reality it is a one-to-many

114
00:04:11,280 --> 00:04:12,360
ratio

115
00:04:12,360 --> 00:04:14,459
let me show you an example

116
00:04:14,459 --> 00:04:16,560
let's assume you want to add a software

117
00:04:16,560 --> 00:04:19,978
package named cncjs to your project

118
00:04:19,978 --> 00:04:21,959
during the installation of this package

119
00:04:21,959 --> 00:04:23,880
behind the scenes

120
00:04:23,880 --> 00:04:27,060
you're adding an additional 811 packages

121
00:04:27,060 --> 00:04:30,300
from 611 different contributors

122
00:04:30,300 --> 00:04:32,220
now who has the time to check every

123
00:04:32,220 --> 00:04:33,479
single one of these packages and

124
00:04:33,479 --> 00:04:34,680
maintainers

125
00:04:34,680 --> 00:04:36,900
open source has become literally a

126
00:04:36,900 --> 00:04:39,360
jungle but unlike other jungles in this

127
00:04:39,360 --> 00:04:41,820
world this one seems to be increasing at

128
00:04:41,820 --> 00:04:43,620
a fast pace with no signs of slowing

129
00:04:43,620 --> 00:04:45,240
down

130
00:04:45,240 --> 00:04:47,580
on npm alone there are over half a

131
00:04:47,580 --> 00:04:50,639
million packages releases every month

132
00:04:50,639 --> 00:04:53,220
so should we be using open source or

133
00:04:53,220 --> 00:04:55,440
should we avoid it well to be honest

134
00:04:55,440 --> 00:04:57,960
this is no longer a dilemma we're going

135
00:04:57,960 --> 00:05:00,660
to continue using open source that chip

136
00:05:00,660 --> 00:05:02,520
has already sailed

137
00:05:02,520 --> 00:05:05,280
the question that is more relevant is

138
00:05:05,280 --> 00:05:07,740
how do we choose the right open source

139
00:05:07,740 --> 00:05:09,240
software

140
00:05:09,240 --> 00:05:11,280
one of the reasons open source is so

141
00:05:11,280 --> 00:05:13,500
attractive is because of the misleading

142
00:05:13,500 --> 00:05:15,960
trust it gives us if open source is open

143
00:05:15,960 --> 00:05:18,479
for everyone to look at if there is some

144
00:05:18,479 --> 00:05:21,000
problem surely someone will notice and

145
00:05:21,000 --> 00:05:22,199
raise a flag

146
00:05:22,199 --> 00:05:24,180
there are also various scorn mechanisms

147
00:05:24,180 --> 00:05:26,580
that display a Project's popularity and

148
00:05:26,580 --> 00:05:28,139
user satisfaction

149
00:05:28,139 --> 00:05:30,600
this Quant mechanisms allow others to

150
00:05:30,600 --> 00:05:33,539
determine if the projects they are using

151
00:05:33,539 --> 00:05:35,639
oh if the project they are interested in

152
00:05:35,639 --> 00:05:37,440
is trustworthy

153
00:05:37,440 --> 00:05:40,380
this is all good until it's not

154
00:05:40,380 --> 00:05:43,979
until good packages become bad packages

155
00:05:43,979 --> 00:05:47,460
meet Faisal he's a good guy lives in

156
00:05:47,460 --> 00:05:48,720
Indonesia

157
00:05:48,720 --> 00:05:51,419
Faisal maintains a project called UA

158
00:05:51,419 --> 00:05:52,440
parser

159
00:05:52,440 --> 00:05:54,660
UA parser is an extremely popular

160
00:05:54,660 --> 00:05:57,300
software package that achieves over 10

161
00:05:57,300 --> 00:05:59,600
million weekly downloads

162
00:05:59,600 --> 00:06:03,240
is also very well maintained Faisal has

163
00:06:03,240 --> 00:06:05,160
been maintaining this project for over a

164
00:06:05,160 --> 00:06:06,600
decade

165
00:06:06,600 --> 00:06:08,520
among the millions who use this package

166
00:06:08,520 --> 00:06:10,500
are giant corporations including

167
00:06:10,500 --> 00:06:12,360
Facebook

168
00:06:12,360 --> 00:06:14,280
even if you think you aren't using this

169
00:06:14,280 --> 00:06:16,560
package you probably are through some

170
00:06:16,560 --> 00:06:18,240
dependency

171
00:06:18,240 --> 00:06:21,720
so now I ask you would you use it why

172
00:06:21,720 --> 00:06:23,220
wouldn't you

173
00:06:23,220 --> 00:06:26,460
then came October 5th 2021

174
00:06:26,460 --> 00:06:28,259
we noticed in a Russian underground

175
00:06:28,259 --> 00:06:30,960
Forum someone bragging about getting a

176
00:06:30,960 --> 00:06:32,819
hold of credentials to a very popular

177
00:06:32,819 --> 00:06:35,340
developer's account which has millions

178
00:06:35,340 --> 00:06:37,139
of weekly downloads and has no

179
00:06:37,139 --> 00:06:39,419
two-factor authentication and they were

180
00:06:39,419 --> 00:06:40,800
selling the credentials at a starting

181
00:06:40,800 --> 00:06:44,639
price wait for it ten thousand dollars

182
00:06:44,639 --> 00:06:47,100
apparently someone was willing to pay

183
00:06:47,100 --> 00:06:49,680
because a couple of weeks later we saw

184
00:06:49,680 --> 00:06:51,539
this

185
00:06:51,539 --> 00:06:53,819
Faisal shared with everyone that someone

186
00:06:53,819 --> 00:06:55,979
had hijacked his account and was using

187
00:06:55,979 --> 00:06:57,539
it to spread malicious versions of his

188
00:06:57,539 --> 00:07:00,120
UA parser package

189
00:07:00,120 --> 00:07:01,979
the attacker had published three

190
00:07:01,979 --> 00:07:04,139
versions of the UA parser package with

191
00:07:04,139 --> 00:07:06,360
that intention of infecting as many

192
00:07:06,360 --> 00:07:09,060
users as possible with malware intended

193
00:07:09,060 --> 00:07:10,800
to steal credentials and turn the

194
00:07:10,800 --> 00:07:14,460
affected machine into a crypto monitor

195
00:07:14,460 --> 00:07:17,400
was this incident a one-time case

196
00:07:17,400 --> 00:07:21,120
nope just two weeks later two additional

197
00:07:21,120 --> 00:07:22,680
open source packages had been

198
00:07:22,680 --> 00:07:24,840
compromised due to an attacker taking

199
00:07:24,840 --> 00:07:26,639
over the account of the legitimate

200
00:07:26,639 --> 00:07:29,280
developer the two infected packages were

201
00:07:29,280 --> 00:07:31,620
KOA and RC which were also well

202
00:07:31,620 --> 00:07:34,440
maintained and highly popular with 22

203
00:07:34,440 --> 00:07:37,020
million weekly downloads combined

204
00:07:37,020 --> 00:07:39,539
when taking a closer look we found an

205
00:07:39,539 --> 00:07:41,160
interesting commonality between that

206
00:07:41,160 --> 00:07:43,139
count takeover cases

207
00:07:43,139 --> 00:07:45,900
all infected packages contained the same

208
00:07:45,900 --> 00:07:48,180
malicious code

209
00:07:48,180 --> 00:07:50,639
after further research it became clear

210
00:07:50,639 --> 00:07:53,039
that the same attacker was behind all

211
00:07:53,039 --> 00:07:54,660
the attacks

212
00:07:54,660 --> 00:07:57,720
if only this was an isolated case the

213
00:07:57,720 --> 00:08:00,240
reality is we are seeing more and more

214
00:08:00,240 --> 00:08:02,400
attacks on good packages

215
00:08:02,400 --> 00:08:05,580
meet Brandon an interesting fellow

216
00:08:05,580 --> 00:08:08,280
during Brandon's free time he maintains

217
00:08:08,280 --> 00:08:10,680
dozens of Open Source packages he's

218
00:08:10,680 --> 00:08:12,720
truly trying to make a positive impact

219
00:08:12,720 --> 00:08:14,340
on the world

220
00:08:14,340 --> 00:08:16,500
one of Brandon's more popular packages

221
00:08:16,500 --> 00:08:19,440
node IPC he has been maintaining for

222
00:08:19,440 --> 00:08:21,599
over eight years and has a weekly

223
00:08:21,599 --> 00:08:24,120
download rate of over 1 million

224
00:08:24,120 --> 00:08:27,000
his package is so popular that even if

225
00:08:27,000 --> 00:08:28,919
you aren't directly using it you are

226
00:08:28,919 --> 00:08:30,360
most likely using it through some

227
00:08:30,360 --> 00:08:32,219
dependency

228
00:08:32,219 --> 00:08:35,520
but something happened in March of 2022

229
00:08:35,520 --> 00:08:38,039
Brandon added some new functionality to

230
00:08:38,039 --> 00:08:40,860
his node IPC package the additional code

231
00:08:40,860 --> 00:08:42,899
was a bit cryptic

232
00:08:42,899 --> 00:08:45,779
but once the obfuscated

233
00:08:45,779 --> 00:08:46,920
and we noticed something quite

234
00:08:46,920 --> 00:08:48,060
interesting

235
00:08:48,060 --> 00:08:50,100
the first part of the code is checking

236
00:08:50,100 --> 00:08:51,660
the location from which the machine is

237
00:08:51,660 --> 00:08:53,820
running the code it uses a website

238
00:08:53,820 --> 00:08:56,760
called ipga location in my case it would

239
00:08:56,760 --> 00:08:58,980
show that I am in Israel for someone

240
00:08:58,980 --> 00:09:00,839
else it could be some other location

241
00:09:00,839 --> 00:09:03,720
such as the United States or Germany or

242
00:09:03,720 --> 00:09:06,060
South Africa and so on

243
00:09:06,060 --> 00:09:08,519
next the coach checks at the result

244
00:09:08,519 --> 00:09:11,339
given by the ipga location indicates

245
00:09:11,339 --> 00:09:12,959
that the court is running in Russia or

246
00:09:12,959 --> 00:09:15,600
in Belarus and if so and you don't need

247
00:09:15,600 --> 00:09:17,160
to be a developer to understand what the

248
00:09:17,160 --> 00:09:19,260
next bit of code is delete delete delete

249
00:09:19,260 --> 00:09:21,060
delete delete

250
00:09:21,060 --> 00:09:23,339
Brandon effectively turned his software

251
00:09:23,339 --> 00:09:25,980
into a bomb which blows up on anyone

252
00:09:25,980 --> 00:09:28,680
located in the wrong part of the world

253
00:09:28,680 --> 00:09:31,860
not only that but it replaced the he

254
00:09:31,860 --> 00:09:33,720
replaced the deleted data with a heart

255
00:09:33,720 --> 00:09:35,100
emoji

256
00:09:35,100 --> 00:09:36,779
why did he do that

257
00:09:36,779 --> 00:09:38,519
what happened all of a sudden they got

258
00:09:38,519 --> 00:09:40,380
Brandon all worked up about Russia and

259
00:09:40,380 --> 00:09:41,519
Belarus

260
00:09:41,519 --> 00:09:44,399
it seems that he decided to take sides

261
00:09:44,399 --> 00:09:46,500
in the Russia Ukraine war

262
00:09:46,500 --> 00:09:48,899
so the question comes up was this

263
00:09:48,899 --> 00:09:50,399
another case of an account takeover

264
00:09:50,399 --> 00:09:54,360
attack no it was Brandon himself and he

265
00:09:54,360 --> 00:09:56,700
made sure everyone knew about it he

266
00:09:56,700 --> 00:09:59,459
wrote you download my software for free

267
00:09:59,459 --> 00:10:01,320
so I am allowed to wipe your computer

268
00:10:01,320 --> 00:10:05,220
this is our public documented licensed

269
00:10:05,220 --> 00:10:07,560
and open source he even gave his attack

270
00:10:07,560 --> 00:10:10,440
a name protest wear

271
00:10:10,440 --> 00:10:12,899
not everyone seemed to agree with what

272
00:10:12,899 --> 00:10:14,880
Brandon did and weren't shy in

273
00:10:14,880 --> 00:10:16,920
expressing their thoughts among them

274
00:10:16,920 --> 00:10:19,560
were comments like Brandon that's an

275
00:10:19,560 --> 00:10:22,019
abuse of power and thank you for

276
00:10:22,019 --> 00:10:23,339
teaching me not to take hold from

277
00:10:23,339 --> 00:10:25,080
strangers

278
00:10:25,080 --> 00:10:27,120
if you were not one of those resided in

279
00:10:27,120 --> 00:10:29,519
Russia or in Belarus would you still use

280
00:10:29,519 --> 00:10:31,560
this package what about his other

281
00:10:31,560 --> 00:10:33,839
packages would you still use them even

282
00:10:33,839 --> 00:10:35,760
if they were clean a malicious code and

283
00:10:35,760 --> 00:10:38,100
vulnerabilities would you even know if

284
00:10:38,100 --> 00:10:40,620
you were using any of these packages

285
00:10:40,620 --> 00:10:42,600
with great power comes great

286
00:10:42,600 --> 00:10:43,920
responsibility

287
00:10:43,920 --> 00:10:45,720
whose responsibility

288
00:10:45,720 --> 00:10:47,579
it is the open source is it the open

289
00:10:47,579 --> 00:10:49,680
source contributor it's probably

290
00:10:49,680 --> 00:10:51,779
shouldn't automatically say that it is

291
00:10:51,779 --> 00:10:54,480
the contributor's responsibility

292
00:10:54,480 --> 00:10:56,040
but these are not the only types of

293
00:10:56,040 --> 00:10:59,279
attacks that we are seeing out there

294
00:10:59,279 --> 00:11:01,500
so what we have seen in these cases I

295
00:11:01,500 --> 00:11:03,600
just demonstrated were contributors who

296
00:11:03,600 --> 00:11:05,100
worked hard to gain their good

297
00:11:05,100 --> 00:11:08,220
reputation yet have very easily lost it

298
00:11:08,220 --> 00:11:10,440
so we have seen now that if you have

299
00:11:10,440 --> 00:11:12,360
assumed that you can keep safe by using

300
00:11:12,360 --> 00:11:14,760
only packages that are popular well

301
00:11:14,760 --> 00:11:16,380
maintained and with contributors that

302
00:11:16,380 --> 00:11:18,959
have a very good reputation these cases

303
00:11:18,959 --> 00:11:21,959
have shown that it is not the case

304
00:11:21,959 --> 00:11:24,180
we have also been seen dedicated

305
00:11:24,180 --> 00:11:26,220
organized and professional threat actor

306
00:11:26,220 --> 00:11:28,560
groups entering this field which are

307
00:11:28,560 --> 00:11:29,640
rapidly improving their attack

308
00:11:29,640 --> 00:11:31,560
techniques and impact size

309
00:11:31,560 --> 00:11:33,540
one example is of a threat actor we

310
00:11:33,540 --> 00:11:36,779
caught earlier this year called Red Lily

311
00:11:36,779 --> 00:11:39,000
who had been able to publish over 1500

312
00:11:39,000 --> 00:11:41,579
malicious packages within a month

313
00:11:41,579 --> 00:11:44,160
this is a lot of packages and was one of

314
00:11:44,160 --> 00:11:45,720
the largest attacks on the open source

315
00:11:45,720 --> 00:11:48,120
software at the time

316
00:11:48,120 --> 00:11:49,920
Brad Lily had been able to accomplish

317
00:11:49,920 --> 00:11:51,779
this by building themselves an entire

318
00:11:51,779 --> 00:11:53,820
infrastructure intended to create

319
00:11:53,820 --> 00:11:57,060
packages at scale through automation

320
00:11:57,060 --> 00:11:59,640
not only that but their system was able

321
00:11:59,640 --> 00:12:01,920
to create a unique account per package

322
00:12:01,920 --> 00:12:03,360
they released

323
00:12:03,360 --> 00:12:05,880
now when creating a new user account on

324
00:12:05,880 --> 00:12:07,860
npm they require two-factor

325
00:12:07,860 --> 00:12:09,540
authentication validation to activate

326
00:12:09,540 --> 00:12:11,880
the new user but read Lily's

327
00:12:11,880 --> 00:12:13,920
infrastructure was able to defeat this

328
00:12:13,920 --> 00:12:15,000
challenge

329
00:12:15,000 --> 00:12:17,459
they also used many disposable domains

330
00:12:17,459 --> 00:12:20,040
to make it tough to block them

331
00:12:20,040 --> 00:12:22,380
and for a while we played a game of cat

332
00:12:22,380 --> 00:12:23,760
and mouse with them they would

333
00:12:23,760 --> 00:12:25,680
continuously upload new packages and try

334
00:12:25,680 --> 00:12:27,480
to improve their techniques and we would

335
00:12:27,480 --> 00:12:29,220
continuously catch them and take them

336
00:12:29,220 --> 00:12:30,180
down

337
00:12:30,180 --> 00:12:32,339
after a while they started getting

338
00:12:32,339 --> 00:12:34,140
frustrated with us and started

339
00:12:34,140 --> 00:12:35,519
communicating through their package

340
00:12:35,519 --> 00:12:37,680
names which was kind of amusing I might

341
00:12:37,680 --> 00:12:39,300
say

342
00:12:39,300 --> 00:12:41,459
we wanted to share information of this

343
00:12:41,459 --> 00:12:43,620
campaign with the research community and

344
00:12:43,620 --> 00:12:45,260
so we launched a site called red

345
00:12:45,260 --> 00:12:47,880
lily.info where you can browse all the

346
00:12:47,880 --> 00:12:49,560
packages that Brad Lily had published

347
00:12:49,560 --> 00:12:52,680
and the details surrounding them

348
00:12:52,680 --> 00:12:55,079
you can also find if any of the packages

349
00:12:55,079 --> 00:12:57,420
are still available or had already been

350
00:12:57,420 --> 00:12:59,579
taken down from the package manager

351
00:12:59,579 --> 00:13:02,760
among the details of each package we are

352
00:13:02,760 --> 00:13:04,440
also some of the behaviors of the

353
00:13:04,440 --> 00:13:07,440
package for example in this one you

354
00:13:07,440 --> 00:13:09,360
would see that it uses obfuscated code

355
00:13:09,360 --> 00:13:11,940
and the end point to which data is

356
00:13:11,940 --> 00:13:13,800
exfiltrated to

357
00:13:13,800 --> 00:13:16,139
the package is still available on 9pm

358
00:13:16,139 --> 00:13:18,060
you can follow the link to see the live

359
00:13:18,060 --> 00:13:20,279
package on the site

360
00:13:20,279 --> 00:13:22,079
so you're welcome to check it out again

361
00:13:22,079 --> 00:13:25,260
it's redlilly.info

362
00:13:25,260 --> 00:13:27,060
and here by the way is one of the

363
00:13:27,060 --> 00:13:29,040
packages I mentioned earlier the fu

364
00:13:29,040 --> 00:13:31,519
scanner

365
00:13:32,399 --> 00:13:34,800
just a short while after Red Lily an

366
00:13:34,800 --> 00:13:37,500
attack group called cute boy showed that

367
00:13:37,500 --> 00:13:39,540
you don't need to build a whole complex

368
00:13:39,540 --> 00:13:41,220
infrastructure to accomplish something

369
00:13:41,220 --> 00:13:43,860
similar to what Red Lily had done

370
00:13:43,860 --> 00:13:46,860
cute boy was able to publish over a

371
00:13:46,860 --> 00:13:48,959
thousand packages from over a thousand

372
00:13:48,959 --> 00:13:52,320
unique users but unlike regularly cute

373
00:13:52,320 --> 00:13:54,060
boy had found an already made service

374
00:13:54,060 --> 00:13:56,940
called mail TM to do the heavy lifting

375
00:13:56,940 --> 00:13:59,160
of creating emails for them allowing

376
00:13:59,160 --> 00:14:00,540
them to automate the registration

377
00:14:00,540 --> 00:14:02,639
process of sites that require email

378
00:14:02,639 --> 00:14:04,320
confirmation

379
00:14:04,320 --> 00:14:06,959
similarly to Red Lily we published a

380
00:14:06,959 --> 00:14:08,880
website documenting the activities of

381
00:14:08,880 --> 00:14:10,880
cute boy which is available at cute

382
00:14:10,880 --> 00:14:14,399
way.infoing keyboard.info sorry so again

383
00:14:14,399 --> 00:14:17,820
I encourage you to check out the sites

384
00:14:17,820 --> 00:14:19,740
what I would like you to remember from

385
00:14:19,740 --> 00:14:22,380
these two examples I just spoke about is

386
00:14:22,380 --> 00:14:23,940
that we are dealing with determined

387
00:14:23,940 --> 00:14:26,100
attackers who will not rest until they

388
00:14:26,100 --> 00:14:27,779
accomplish their goals they will

389
00:14:27,779 --> 00:14:29,700
continue to improve their techniques and

390
00:14:29,700 --> 00:14:32,820
will continue to try until they succeed

391
00:14:32,820 --> 00:14:35,100
if you remember earlier when we talked

392
00:14:35,100 --> 00:14:36,779
about the good reputation that is hard

393
00:14:36,779 --> 00:14:40,139
one this begs the question is it really

394
00:14:40,139 --> 00:14:41,399
hard one

395
00:14:41,399 --> 00:14:43,680
as you will see shortly there are some

396
00:14:43,680 --> 00:14:45,839
shortcuts you can take here

397
00:14:45,839 --> 00:14:48,360
for instance take a look at these

398
00:14:48,360 --> 00:14:50,519
damages at these two images

399
00:14:50,519 --> 00:14:52,440
Can you spot any differences between

400
00:14:52,440 --> 00:14:53,459
them

401
00:14:53,459 --> 00:14:55,440
did you notice the name

402
00:14:55,440 --> 00:14:58,620
one is called pampi and the other pampi

403
00:14:58,620 --> 00:15:00,180
IO

404
00:15:00,180 --> 00:15:02,160
other than the name and the release date

405
00:15:02,160 --> 00:15:04,620
everything else is identical same

406
00:15:04,620 --> 00:15:07,800
description same project such as same

407
00:15:07,800 --> 00:15:09,420
project statistics

408
00:15:09,420 --> 00:15:12,000
the intent of the attacker here was to

409
00:15:12,000 --> 00:15:13,800
trick developers who misspelled the name

410
00:15:13,800 --> 00:15:16,320
of the legitimate package a developer

411
00:15:16,320 --> 00:15:18,720
who makes a typo and lands on the

412
00:15:18,720 --> 00:15:20,940
malicious package instead won't realize

413
00:15:20,940 --> 00:15:22,620
they made a mistake

414
00:15:22,620 --> 00:15:24,839
but I bet you're thinking now wouldn't

415
00:15:24,839 --> 00:15:26,639
the developer notice the mistake later

416
00:15:26,639 --> 00:15:28,500
after downloading the package

417
00:15:28,500 --> 00:15:31,380
unfortunately the answer is no because

418
00:15:31,380 --> 00:15:33,959
both packages contain the exact same

419
00:15:33,959 --> 00:15:35,279
code

420
00:15:35,279 --> 00:15:38,639
pampi IO was a perfect clone to pampi

421
00:15:38,639 --> 00:15:41,399
except for one small difference

422
00:15:41,399 --> 00:15:45,000
pampi IO had an additional dependency

423
00:15:45,000 --> 00:15:47,579
this dependency contained an obfuscated

424
00:15:47,579 --> 00:15:50,940
link which when the obfuscated exposed

425
00:15:50,940 --> 00:15:52,699
that it was a link to which machine

426
00:15:52,699 --> 00:15:54,839
environment variables were supposed to

427
00:15:54,839 --> 00:15:56,639
be sent to

428
00:15:56,639 --> 00:15:58,620
so it seems that the whole purpose of

429
00:15:58,620 --> 00:16:00,480
the malicious package was to steal

430
00:16:00,480 --> 00:16:02,699
environment variables

431
00:16:02,699 --> 00:16:05,060
and as you've probably understood by now

432
00:16:05,060 --> 00:16:08,579
pampi IO is the malicious package

433
00:16:08,579 --> 00:16:10,500
now I'd like you to focus on the

434
00:16:10,500 --> 00:16:13,500
statistics they are both the same from a

435
00:16:13,500 --> 00:16:15,360
developer's point of view when they land

436
00:16:15,360 --> 00:16:17,339
on the malicious package they will think

437
00:16:17,339 --> 00:16:19,680
it is a very popular one

438
00:16:19,680 --> 00:16:21,959
and it's probably okay

439
00:16:21,959 --> 00:16:23,940
how is it possible that they both

440
00:16:23,940 --> 00:16:27,120
contain the exact same statistics

441
00:16:27,120 --> 00:16:28,740
the answer is simple

442
00:16:28,740 --> 00:16:31,079
much of the ecosystem was not built for

443
00:16:31,079 --> 00:16:33,959
security it was built for developers by

444
00:16:33,959 --> 00:16:36,839
developers so they are not screening any

445
00:16:36,839 --> 00:16:39,000
of the information uploaded as part of

446
00:16:39,000 --> 00:16:41,279
the package's metadata

447
00:16:41,279 --> 00:16:43,440
the attack used in this case is a

448
00:16:43,440 --> 00:16:45,240
combination of type of squatting with

449
00:16:45,240 --> 00:16:46,740
star jacking

450
00:16:46,740 --> 00:16:49,019
type of squatting is where the names are

451
00:16:49,019 --> 00:16:51,180
so similar that anyone who accidentally

452
00:16:51,180 --> 00:16:53,220
performs a typo will land on the

453
00:16:53,220 --> 00:16:56,100
malicious package and star jacking is

454
00:16:56,100 --> 00:16:57,720
where the statistics of the legitimate

455
00:16:57,720 --> 00:16:59,279
package

456
00:16:59,279 --> 00:17:01,199
are married over to the malicious

457
00:17:01,199 --> 00:17:03,600
package to trick others into thinking it

458
00:17:03,600 --> 00:17:05,220
is a popular package

459
00:17:05,220 --> 00:17:07,500
this type of attack is very attractive

460
00:17:07,500 --> 00:17:09,299
to attackers since it allows them to

461
00:17:09,299 --> 00:17:12,240
easily compromise many machines within a

462
00:17:12,240 --> 00:17:14,339
relatively short period of time

463
00:17:14,339 --> 00:17:16,500
in this specific example I brought up of

464
00:17:16,500 --> 00:17:19,679
pampi and pampi IO pampi i o had been

465
00:17:19,679 --> 00:17:21,599
downloaded over 70 000 Times by

466
00:17:21,599 --> 00:17:24,660
developers before being taken down so

467
00:17:24,660 --> 00:17:26,280
you might be wondering is this really

468
00:17:26,280 --> 00:17:27,419
that easy

469
00:17:27,419 --> 00:17:30,900
and the answer is unfortunately yes it

470
00:17:30,900 --> 00:17:33,720
is really that easy let me show you

471
00:17:33,720 --> 00:17:35,580
so what you see here

472
00:17:35,580 --> 00:17:37,860
is a demo of an attack performed through

473
00:17:37,860 --> 00:17:39,539
a lab that we created for testing

474
00:17:39,539 --> 00:17:42,539
purposes which we call package lab

475
00:17:42,539 --> 00:17:44,400
so now we are going to from an

476
00:17:44,400 --> 00:17:46,320
attacker's point of view publish a

477
00:17:46,320 --> 00:17:48,360
malicious package to the popular pi-fi

478
00:17:48,360 --> 00:17:50,580
package manager platform

479
00:17:50,580 --> 00:17:52,679
the first and new you will need is some

480
00:17:52,679 --> 00:17:54,299
kind of identity which we will create

481
00:17:54,299 --> 00:17:55,559
right now

482
00:17:55,559 --> 00:17:57,600
you don't need any personal details when

483
00:17:57,600 --> 00:17:59,640
creating an account

484
00:17:59,640 --> 00:18:02,280
such as an ID or credit card details or

485
00:18:02,280 --> 00:18:04,500
anything like that an email of any kind

486
00:18:04,500 --> 00:18:05,760
is good enough

487
00:18:05,760 --> 00:18:08,039
then you choose for yourself a username

488
00:18:08,039 --> 00:18:09,240
and password

489
00:18:09,240 --> 00:18:11,340
an account is necessary to publish the

490
00:18:11,340 --> 00:18:12,900
packages

491
00:18:12,900 --> 00:18:15,059
next you need to provide details of your

492
00:18:15,059 --> 00:18:17,280
package you can choose any name you'd

493
00:18:17,280 --> 00:18:18,780
like for your package

494
00:18:18,780 --> 00:18:21,360
but in this example I chose supply chain

495
00:18:21,360 --> 00:18:22,500
demo

496
00:18:22,500 --> 00:18:24,600
as the name of the package

497
00:18:24,600 --> 00:18:26,460
now if you are trying to perform a type

498
00:18:26,460 --> 00:18:28,799
of squad in attack you would want the

499
00:18:28,799 --> 00:18:30,660
name to be similar to some other popular

500
00:18:30,660 --> 00:18:32,100
package

501
00:18:32,100 --> 00:18:34,500
next I need to give the package a

502
00:18:34,500 --> 00:18:37,140
version number a quick tip here is never

503
00:18:37,140 --> 00:18:40,260
give the package version 1. no developer

504
00:18:40,260 --> 00:18:42,720
will download a package that is version

505
00:18:42,720 --> 00:18:44,280
one

506
00:18:44,280 --> 00:18:47,460
so here we will choose 1.2.3 as a

507
00:18:47,460 --> 00:18:48,960
version number

508
00:18:48,960 --> 00:18:50,760
now is where the interesting part

509
00:18:50,760 --> 00:18:52,919
happens you can think of what I am doing

510
00:18:52,919 --> 00:18:54,840
here is similar to uploading an

511
00:18:54,840 --> 00:18:57,179
application to an application store

512
00:18:57,179 --> 00:18:59,640
similar to adding an Android or Apple

513
00:18:59,640 --> 00:19:01,740
app to the App Store

514
00:19:01,740 --> 00:19:04,500
here pi-fi is like the App Store of the

515
00:19:04,500 --> 00:19:06,360
package I am uploading

516
00:19:06,360 --> 00:19:08,880
one of the things pi-fi asks is what

517
00:19:08,880 --> 00:19:11,340
organization do I belong to I don't

518
00:19:11,340 --> 00:19:13,440
belong to any organization but what I

519
00:19:13,440 --> 00:19:15,780
can do is browse through GitHub and

520
00:19:15,780 --> 00:19:18,120
choose any trending project I find there

521
00:19:18,120 --> 00:19:20,580
for example here I decided to go with

522
00:19:20,580 --> 00:19:23,580
the economist ebooks I copy the projects

523
00:19:23,580 --> 00:19:25,440
link and paste it into my package

524
00:19:25,440 --> 00:19:28,620
details as soon as I do that did you

525
00:19:28,620 --> 00:19:30,480
realize what just happened

526
00:19:30,480 --> 00:19:32,580
where did all these stars come from and

527
00:19:32,580 --> 00:19:35,039
the answer is pi-fi automatically

528
00:19:35,039 --> 00:19:37,080
believes whatever I tell them and

529
00:19:37,080 --> 00:19:38,700
therefore I can claim to be from

530
00:19:38,700 --> 00:19:40,740
anywhere and Pi fight will believe me

531
00:19:40,740 --> 00:19:42,720
and copy all the statistics from the

532
00:19:42,720 --> 00:19:45,240
projects I claim to be from into my

533
00:19:45,240 --> 00:19:46,200
package

534
00:19:46,200 --> 00:19:49,200
this is what we call a star jacking

535
00:19:49,200 --> 00:19:52,260
next in this black box is why we'll add

536
00:19:52,260 --> 00:19:54,240
the actual malicious code to the package

537
00:19:54,240 --> 00:19:56,760
we can add anything here but for this

538
00:19:56,760 --> 00:19:58,860
example I will use a simple piece of

539
00:19:58,860 --> 00:20:00,780
malware which is what we call a dynamic

540
00:20:00,780 --> 00:20:03,299
dropper an interesting and hard to

541
00:20:03,299 --> 00:20:04,679
detect malware

542
00:20:04,679 --> 00:20:07,140
what will happen is that once we publish

543
00:20:07,140 --> 00:20:09,539
this package and once someone downloads

544
00:20:09,539 --> 00:20:11,700
and install this package the malicious

545
00:20:11,700 --> 00:20:14,280
code within this package will fetch a

546
00:20:14,280 --> 00:20:17,039
second stage attack from paste bin by

547
00:20:17,039 --> 00:20:19,799
making an HTTP request and receive

548
00:20:19,799 --> 00:20:22,020
additional code which will then be

549
00:20:22,020 --> 00:20:23,940
injected into the running application

550
00:20:23,940 --> 00:20:27,120
and exfiltrate SSH keys and environment

551
00:20:27,120 --> 00:20:30,120
variables to a webhook and this is a

552
00:20:30,120 --> 00:20:31,860
summary of everything I've done

553
00:20:31,860 --> 00:20:34,200
once I click next the package will be

554
00:20:34,200 --> 00:20:36,600
processed and uploaded and here it is

555
00:20:36,600 --> 00:20:39,120
our package is live on Python and you

556
00:20:39,120 --> 00:20:42,240
can see on the right side the 9000 Stars

557
00:20:42,240 --> 00:20:45,059
this highlights the star jacking problem

558
00:20:45,059 --> 00:20:46,799
you can say you are whoever you want to

559
00:20:46,799 --> 00:20:49,320
be and no one is verifying if what you

560
00:20:49,320 --> 00:20:52,799
are saying is true or false

561
00:20:52,799 --> 00:20:55,740
now let's talk about the whys why is it

562
00:20:55,740 --> 00:20:58,380
so easy to successfully perform these

563
00:20:58,380 --> 00:21:00,840
open source supply chain attacks

564
00:21:00,840 --> 00:21:03,840
for one thing most maintainers do not

565
00:21:03,840 --> 00:21:05,700
configure two-factor authentication

566
00:21:05,700 --> 00:21:08,700
making it very easy for attackers to

567
00:21:08,700 --> 00:21:10,740
compromise their account using just a

568
00:21:10,740 --> 00:21:13,020
username and a password

569
00:21:13,020 --> 00:21:16,080
npm is one package manager who did take

570
00:21:16,080 --> 00:21:18,000
a move in the right direction and

571
00:21:18,000 --> 00:21:20,820
recently took action of requiring its

572
00:21:20,820 --> 00:21:23,460
top 200 npm package maintainers to set

573
00:21:23,460 --> 00:21:25,380
up two-factor authentication on their

574
00:21:25,380 --> 00:21:26,700
accounts

575
00:21:26,700 --> 00:21:29,580
but now let's assume right now everyone

576
00:21:29,580 --> 00:21:31,799
moves to two-factor Authentication

577
00:21:31,799 --> 00:21:33,780
does this not guarantee their accounts

578
00:21:33,780 --> 00:21:35,100
are secure

579
00:21:35,100 --> 00:21:37,200
just this past summer we've seen

580
00:21:37,200 --> 00:21:39,840
attackers advertising credential fishing

581
00:21:39,840 --> 00:21:42,059
services that bypass multi-factor

582
00:21:42,059 --> 00:21:43,260
Authentication

583
00:21:43,260 --> 00:21:45,960
and just this past August we've seen the

584
00:21:45,960 --> 00:21:48,059
first ever organized fishing campaign

585
00:21:48,059 --> 00:21:50,760
ever on the popular pathfi package

586
00:21:50,760 --> 00:21:52,020
manager

587
00:21:52,020 --> 00:21:54,419
after some joint research with Sentinel

588
00:21:54,419 --> 00:21:56,940
Labs we found that the campaign was

589
00:21:56,940 --> 00:21:58,679
performed using two separate attack

590
00:21:58,679 --> 00:22:00,960
vectors which were linked to a shared

591
00:22:00,960 --> 00:22:02,520
malicious domain

592
00:22:02,520 --> 00:22:05,400
in the first attack Vector many fission

593
00:22:05,400 --> 00:22:07,559
emails were sent to python contributors

594
00:22:07,559 --> 00:22:10,440
which led them to a fake pi-fi page from

595
00:22:10,440 --> 00:22:12,120
which they were tricked into providing

596
00:22:12,120 --> 00:22:13,980
their account credentials

597
00:22:13,980 --> 00:22:16,799
the second attack Vector was uploading

598
00:22:16,799 --> 00:22:18,600
over a hundred type of squatting

599
00:22:18,600 --> 00:22:19,740
packages

600
00:22:19,740 --> 00:22:22,620
by the way we do know that there was

601
00:22:22,620 --> 00:22:24,840
some success to this campaign since at

602
00:22:24,840 --> 00:22:27,120
least two popular accounts were found to

603
00:22:27,120 --> 00:22:29,120
be taken over and their packages

604
00:22:29,120 --> 00:22:31,559
Poisoned With malware

605
00:22:31,559 --> 00:22:34,200
another reason which we also talked

606
00:22:34,200 --> 00:22:36,539
about earlier on why it is so easy to

607
00:22:36,539 --> 00:22:38,280
perform successful attacks is because

608
00:22:38,280 --> 00:22:40,620
anyone can lie in their package metadata

609
00:22:40,620 --> 00:22:42,419
and there is no one checking what is

610
00:22:42,419 --> 00:22:44,159
true and what is false

611
00:22:44,159 --> 00:22:47,280
also the ecosystem delivers auto update

612
00:22:47,280 --> 00:22:50,340
features by Design meaning you may

613
00:22:50,340 --> 00:22:52,919
request a specific package version but

614
00:22:52,919 --> 00:22:54,600
if there is a higher version to that

615
00:22:54,600 --> 00:22:56,700
package then you will get that later

616
00:22:56,700 --> 00:22:59,220
version of that package instead of what

617
00:22:59,220 --> 00:23:00,659
you asked for

618
00:23:00,659 --> 00:23:03,000
if you recall the UA parser attack the

619
00:23:03,000 --> 00:23:05,280
attacker understanding the way software

620
00:23:05,280 --> 00:23:07,559
updates took advantage of this by

621
00:23:07,559 --> 00:23:09,419
uploading multiple versions of malicious

622
00:23:09,419 --> 00:23:11,880
packages this ensured that whether

623
00:23:11,880 --> 00:23:13,860
someone performed a minor version update

624
00:23:13,860 --> 00:23:16,440
a patch update or a major version update

625
00:23:16,440 --> 00:23:19,760
it will still receive the malicious code

626
00:23:19,760 --> 00:23:22,700
accounts are also willingly handed over

627
00:23:22,700 --> 00:23:25,140
developers maintain open source projects

628
00:23:25,140 --> 00:23:27,720
on their own free time so sometimes life

629
00:23:27,720 --> 00:23:29,400
gets a little busy and they don't have

630
00:23:29,400 --> 00:23:30,900
the time anymore to maintain their

631
00:23:30,900 --> 00:23:32,400
projects

632
00:23:32,400 --> 00:23:34,980
attackers approach these maintainers and

633
00:23:34,980 --> 00:23:37,500
offer to maintain the projects instead

634
00:23:37,500 --> 00:23:39,120
unaware of the attacker's true

635
00:23:39,120 --> 00:23:41,159
intentions the maintenance are usually

636
00:23:41,159 --> 00:23:43,020
more than happy to forward the control

637
00:23:43,020 --> 00:23:45,179
to the attackers

638
00:23:45,179 --> 00:23:48,059
we also have a trust Paradox on the one

639
00:23:48,059 --> 00:23:50,520
hand we have cisos implementing zero

640
00:23:50,520 --> 00:23:52,080
trust security under organization's

641
00:23:52,080 --> 00:23:54,780
Network yet on the other hand the

642
00:23:54,780 --> 00:23:56,460
developers are downloading

643
00:23:56,460 --> 00:23:58,440
whatever code they want to integrate

644
00:23:58,440 --> 00:24:00,000
into their products

645
00:24:00,000 --> 00:24:01,799
we also have many moving Parts

646
00:24:01,799 --> 00:24:04,380
throughout the supply chain up until now

647
00:24:04,380 --> 00:24:05,940
we're focused on open source

648
00:24:05,940 --> 00:24:08,340
dependencies but it's also important to

649
00:24:08,340 --> 00:24:09,960
realize that there are many other parts

650
00:24:09,960 --> 00:24:11,820
of the supply chain that can become

651
00:24:11,820 --> 00:24:13,500
compromised

652
00:24:13,500 --> 00:24:15,240
developers may accidentally install

653
00:24:15,240 --> 00:24:17,760
malicious plugins to their Ides which

654
00:24:17,760 --> 00:24:20,820
may for example alter their code or hide

655
00:24:20,820 --> 00:24:22,620
things from the developers or still

656
00:24:22,620 --> 00:24:23,510
sensitive information

657
00:24:23,510 --> 00:24:24,600
[Music]

658
00:24:24,600 --> 00:24:26,400
developers May install malicious

659
00:24:26,400 --> 00:24:28,440
third-party apps under Source control

660
00:24:28,440 --> 00:24:30,360
without realizing it

661
00:24:30,360 --> 00:24:33,000
artifact servers might cache malicious

662
00:24:33,000 --> 00:24:34,799
packages even though they were removed

663
00:24:34,799 --> 00:24:36,179
beforehand

664
00:24:36,179 --> 00:24:38,159
developers may use malicious build

665
00:24:38,159 --> 00:24:40,740
server plugins without realizing it

666
00:24:40,740 --> 00:24:42,539
so these are just a few examples of

667
00:24:42,539 --> 00:24:43,860
attack vectors throughout the supply

668
00:24:43,860 --> 00:24:45,240
chain from which we can become

669
00:24:45,240 --> 00:24:48,020
compromised

670
00:24:48,120 --> 00:24:50,340
so just to quickly summarize what we

671
00:24:50,340 --> 00:24:52,440
just covered there is no vet in it

672
00:24:52,440 --> 00:24:54,360
there's no vetting accounts are taken

673
00:24:54,360 --> 00:24:56,520
over we have automatic updates by Design

674
00:24:56,520 --> 00:24:58,799
we give too much trust

675
00:24:58,799 --> 00:25:01,020
we have maintainers handing off their

676
00:25:01,020 --> 00:25:02,640
project projects to attackers without

677
00:25:02,640 --> 00:25:05,039
realizing it and we have many moving

678
00:25:05,039 --> 00:25:08,340
Parts across the supply chain

679
00:25:08,340 --> 00:25:10,860
so what can we do

680
00:25:10,860 --> 00:25:12,659
there are some takeaways I would like

681
00:25:12,659 --> 00:25:14,700
you to take from this presentation

682
00:25:14,700 --> 00:25:17,100
the first is that it is important to

683
00:25:17,100 --> 00:25:18,900
understand that the application security

684
00:25:18,900 --> 00:25:21,419
world is built around and focused around

685
00:25:21,419 --> 00:25:24,900
detecting and managing vulnerabilities

686
00:25:24,900 --> 00:25:27,120
and I'm not saying it's not important it

687
00:25:27,120 --> 00:25:29,700
is very important however everything I

688
00:25:29,700 --> 00:25:31,140
talked about in this presentation

689
00:25:31,140 --> 00:25:33,779
surrounds a malicious code which is not

690
00:25:33,779 --> 00:25:36,000
the same thing as a vulnerability a

691
00:25:36,000 --> 00:25:39,000
vulnerability is a logical flaw that may

692
00:25:39,000 --> 00:25:41,700
or may not be relevant to you and may be

693
00:25:41,700 --> 00:25:44,220
okay if it exists in your application if

694
00:25:44,220 --> 00:25:46,140
it is properly managed

695
00:25:46,140 --> 00:25:47,880
and let's just call it on the other hand

696
00:25:47,880 --> 00:25:50,400
is called that is intentionally added to

697
00:25:50,400 --> 00:25:52,860
cause harm and is never okay to have it

698
00:25:52,860 --> 00:25:54,900
in your pro in your product and cannot

699
00:25:54,900 --> 00:25:56,580
be managed

700
00:25:56,580 --> 00:25:58,500
we also need to work together to share

701
00:25:58,500 --> 00:26:00,600
information with each other

702
00:26:00,600 --> 00:26:02,880
currently whenever malicious package is

703
00:26:02,880 --> 00:26:05,940
reported on it is simply deleted and not

704
00:26:05,940 --> 00:26:08,220
shared with a research community so they

705
00:26:08,220 --> 00:26:09,960
could study it and understand that

706
00:26:09,960 --> 00:26:12,419
attackers ttps and hunt for similar

707
00:26:12,419 --> 00:26:14,460
attacks in other locations

708
00:26:14,460 --> 00:26:17,580
we also need better standards there is

709
00:26:17,580 --> 00:26:19,380
currently no Universal method of

710
00:26:19,380 --> 00:26:22,140
classifying malicious packages

711
00:26:22,140 --> 00:26:24,600
this is a this is an example of how four

712
00:26:24,600 --> 00:26:26,760
different organizations classify the

713
00:26:26,760 --> 00:26:28,380
same malicious package

714
00:26:28,380 --> 00:26:30,600
this is as opposed to cves for example

715
00:26:30,600 --> 00:26:32,760
in which there's a universal way of

716
00:26:32,760 --> 00:26:34,799
cataloging vulnerabilities

717
00:26:34,799 --> 00:26:37,620
and finally we are in we're in this

718
00:26:37,620 --> 00:26:40,140
together the more secure the open source

719
00:26:40,140 --> 00:26:42,240
ecosystem is the more secure everyone

720
00:26:42,240 --> 00:26:43,559
will be

721
00:26:43,559 --> 00:26:45,840
so to summarize I talked about the

722
00:26:45,840 --> 00:26:47,880
differences in supply chain and software

723
00:26:47,880 --> 00:26:49,679
supply chain

724
00:26:49,679 --> 00:26:52,260
via the salsa framework we demonstrated

725
00:26:52,260 --> 00:26:54,840
the potential pain points I mentioned

726
00:26:54,840 --> 00:26:57,600
the jungle of Open Source I covered

727
00:26:57,600 --> 00:26:59,580
dependency related incidents

728
00:26:59,580 --> 00:27:02,640
I also demonstrated just how just

729
00:27:02,640 --> 00:27:04,559
because something is popular does not

730
00:27:04,559 --> 00:27:06,960
mean it is any safer to use I

731
00:27:06,960 --> 00:27:08,700
demonstrated and talked about why it is

732
00:27:08,700 --> 00:27:10,799
so easy to perform successful attacks on

733
00:27:10,799 --> 00:27:13,080
the open source ecosystem and also give

734
00:27:13,080 --> 00:27:15,360
examples where we have a lot of room to

735
00:27:15,360 --> 00:27:16,380
improve

736
00:27:16,380 --> 00:27:19,200
remember with great power that open

737
00:27:19,200 --> 00:27:20,820
source provides comes great

738
00:27:20,820 --> 00:27:22,200
responsibility

739
00:27:22,200 --> 00:27:25,559
was a responsibility our software our

740
00:27:25,559 --> 00:27:28,919
responsibility and I will conclude with

741
00:27:28,919 --> 00:27:31,080
don't take code from strangers without

742
00:27:31,080 --> 00:27:35,240
validating that thank you very much

