1
00:00:01,460 --> 00:00:06,080
good day good day here on a root con

2
00:00:06,080 --> 00:00:11,880
2022 thanks for choosing this topic

3
00:00:11,880 --> 00:00:15,719
I'm genius from Casper scheme our team

4
00:00:15,719 --> 00:00:18,539
is responsible mostly for research and

5
00:00:18,539 --> 00:00:20,939
targeted at malware providing the

6
00:00:20,939 --> 00:00:24,960
reports about it that's why we stroke

7
00:00:24,960 --> 00:00:29,160
will be dedicated to the one malicious

8
00:00:29,160 --> 00:00:30,320
campaign

9
00:00:30,320 --> 00:00:34,500
we found in the wild as usual so it's

10
00:00:34,500 --> 00:00:36,480
not a proof of concept from the

11
00:00:36,480 --> 00:00:39,260
researcher side it's in the wild thing

12
00:00:39,260 --> 00:00:42,800
and why we decided to share

13
00:00:42,800 --> 00:00:45,660
with samples

14
00:00:45,660 --> 00:00:48,360
misinformation because one technique

15
00:00:48,360 --> 00:00:51,660
among all of our techniques and use in

16
00:00:51,660 --> 00:00:53,820
this campaign we consider it quite

17
00:00:53,820 --> 00:00:56,100
Innovative and new

18
00:00:56,100 --> 00:00:59,340
imagine for years our manufacturers

19
00:00:59,340 --> 00:01:02,160
tried to hide the malicious code from

20
00:01:02,160 --> 00:01:06,380
the plain side of a file system right

21
00:01:06,380 --> 00:01:09,720
anti-first alternate data streams VMI

22
00:01:09,720 --> 00:01:11,159
subscriptions

23
00:01:11,159 --> 00:01:14,580
some encrypted scripts in a Windows

24
00:01:14,580 --> 00:01:17,820
system registry whatever for sure these

25
00:01:17,820 --> 00:01:20,640
entities exist anyway on the disk right

26
00:01:20,640 --> 00:01:23,820
to make some kind of persistence they

27
00:01:23,820 --> 00:01:27,840
need disk anyway but it's not on a level

28
00:01:27,840 --> 00:01:30,540
of file system eating some proprietary

29
00:01:30,540 --> 00:01:33,299
format in some and other entities like a

30
00:01:33,299 --> 00:01:37,140
system registry like NTFS alternate data

31
00:01:37,140 --> 00:01:41,640
streams Etc with time we found new place

32
00:01:41,640 --> 00:01:45,840
to hide such a code that's why you see

33
00:01:45,840 --> 00:01:48,840
the name of the presentation let us

34
00:01:48,840 --> 00:01:51,299
cover let us cover but we would slowly

35
00:01:51,299 --> 00:01:53,640
start from the plan for the next 40

36
00:01:53,640 --> 00:01:56,880
minutes root con gave us quite an amount

37
00:01:56,880 --> 00:02:01,740
of time so let me wrote the plan also I

38
00:02:01,740 --> 00:02:04,200
completely understand with the most of

39
00:02:04,200 --> 00:02:05,700
you we

40
00:02:05,700 --> 00:02:09,060
don't share the same language so I would

41
00:02:09,060 --> 00:02:13,200
try to speak as slow as I can and as

42
00:02:13,200 --> 00:02:17,220
clear as I can anyway look nowadays it's

43
00:02:17,220 --> 00:02:19,860
easier to find any researcher online if

44
00:02:19,860 --> 00:02:22,200
any question would persist you could ask

45
00:02:22,200 --> 00:02:26,099
me after the presentation or find me

46
00:02:26,099 --> 00:02:28,819
online for the any further details

47
00:02:28,819 --> 00:02:33,180
pitiful abcm I'm not in a manila with

48
00:02:33,180 --> 00:02:36,540
you I would like to uh but it's a little

49
00:02:36,540 --> 00:02:39,900
bit crazy here I hope to see you nearby

50
00:02:39,900 --> 00:02:41,580
the city on the route called different

51
00:02:41,580 --> 00:02:46,680
yes so uh straight to the topic now and

52
00:02:46,680 --> 00:02:49,280
we would start with a short description

53
00:02:49,280 --> 00:02:54,060
how typically malware is using the

54
00:02:54,060 --> 00:02:56,879
logging mechanism so put something in a

55
00:02:56,879 --> 00:03:00,420
lock some login records and how shell

56
00:03:00,420 --> 00:03:01,500
codes

57
00:03:01,500 --> 00:03:04,920
actually already using in a malicious

58
00:03:04,920 --> 00:03:08,340
campaigns after reach we would came to

59
00:03:08,340 --> 00:03:11,220
this new technique we considered brand

60
00:03:11,220 --> 00:03:14,400
new and Innovative that mixed with two

61
00:03:14,400 --> 00:03:15,599
entities

62
00:03:15,599 --> 00:03:18,720
event logs in this case within those

63
00:03:18,720 --> 00:03:21,900
event logs and the encrypted shell codes

64
00:03:21,900 --> 00:03:25,560
okay so first typical usage usage in

65
00:03:25,560 --> 00:03:28,680
this precise campaign after it we would

66
00:03:28,680 --> 00:03:31,440
provide the bird view of the campaign

67
00:03:31,440 --> 00:03:35,400
because for sure much more models and

68
00:03:35,400 --> 00:03:38,819
technique existing in a with targeted

69
00:03:38,819 --> 00:03:43,019
attack right but I would start with the

70
00:03:43,019 --> 00:03:44,700
most

71
00:03:44,700 --> 00:03:47,879
most interesting one for me but after it

72
00:03:47,879 --> 00:03:50,459
we would speak about the different last

73
00:03:50,459 --> 00:03:52,739
stages there are two types of the

74
00:03:52,739 --> 00:03:55,680
Trojans with time many attack end up

75
00:03:55,680 --> 00:03:57,180
with the last stage right remote

76
00:03:57,180 --> 00:03:59,819
Administration Tool uh we would describe

77
00:03:59,819 --> 00:04:03,000
third-party Tools in use it would be too

78
00:04:03,000 --> 00:04:04,260
commercial

79
00:04:04,260 --> 00:04:07,379
tool sets and the GitHub publicly

80
00:04:07,379 --> 00:04:10,319
available tool also and some

81
00:04:10,319 --> 00:04:12,480
anti-detection techniques but I also

82
00:04:12,480 --> 00:04:14,519
considered useful maybe not as

83
00:04:14,519 --> 00:04:17,519
Innovative as a usage of the logs but

84
00:04:17,519 --> 00:04:21,180
anyway this is our plan I hope we are

85
00:04:21,180 --> 00:04:24,840
good with it and let us start from the

86
00:04:24,840 --> 00:04:29,280
very first very first point what any

87
00:04:29,280 --> 00:04:33,240
reverse any malware analyst thinks about

88
00:04:33,240 --> 00:04:36,060
the login if you are like me taking a

89
00:04:36,060 --> 00:04:38,699
look all the time inside the malware you

90
00:04:38,699 --> 00:04:41,639
could see the code Snippets like here on

91
00:04:41,639 --> 00:04:45,620
The View slide so alter of the software

92
00:04:45,620 --> 00:04:48,660
need to debug like any software

93
00:04:48,660 --> 00:04:52,380
developer right and while debugging

94
00:04:52,380 --> 00:04:55,199
that bad guy could implement the

95
00:04:55,199 --> 00:04:58,500
approach of a putting messages into log

96
00:04:58,500 --> 00:05:01,979
why not why not actually they have to

97
00:05:01,979 --> 00:05:04,560
remove it from the release version right

98
00:05:04,560 --> 00:05:08,520
but could you imagine the situation when

99
00:05:08,520 --> 00:05:10,380
everything is tested in the virtual

100
00:05:10,380 --> 00:05:13,259
machines in a virtual environment but in

101
00:05:13,259 --> 00:05:18,060
a combat environment things could go but

102
00:05:18,060 --> 00:05:21,960
in any place firewalls bad connection

103
00:05:21,960 --> 00:05:24,900
channels whatever so I suppose some

104
00:05:24,900 --> 00:05:27,419
logging which part of malware is already

105
00:05:27,419 --> 00:05:30,479
executed is useful for the money factors

106
00:05:30,479 --> 00:05:34,139
that's why we met normal logging

107
00:05:34,139 --> 00:05:37,800
dropping the messages to the file to the

108
00:05:37,800 --> 00:05:39,780
network packets message all the time

109
00:05:39,780 --> 00:05:42,780
normal usage of the logs also maybe in

110
00:05:42,780 --> 00:05:45,539
some cases it's just keeping asset to do

111
00:05:45,539 --> 00:05:49,800
to do remove logging later but so far

112
00:05:49,800 --> 00:05:52,320
it's still inside the samples the

113
00:05:52,320 --> 00:05:56,160
reserved nice easier for the for the

114
00:05:56,160 --> 00:05:57,720
researcher

115
00:05:57,720 --> 00:06:00,900
or the matter of existence the control

116
00:06:00,900 --> 00:06:04,740
of execution flow right here on this

117
00:06:04,740 --> 00:06:07,500
slide it's uh you see the part of the

118
00:06:07,500 --> 00:06:09,539
code regarding to the stigana graph here

119
00:06:09,539 --> 00:06:13,020
it's just taking the BMP file it's

120
00:06:13,020 --> 00:06:16,620
downloaded for the nicotine Trojan it's

121
00:06:16,620 --> 00:06:19,560
just the decryption algorithm based on

122
00:06:19,560 --> 00:06:22,919
the parsing of the BMP file right and in

123
00:06:22,919 --> 00:06:26,160
the very start this user logging vampire

124
00:06:26,160 --> 00:06:29,220
get data helper would it help us yes

125
00:06:29,220 --> 00:06:32,819
while it exists or sometimes it would be

126
00:06:32,819 --> 00:06:35,940
wiped in a later versions when money

127
00:06:35,940 --> 00:06:38,759
factors don't need it anymore but we

128
00:06:38,759 --> 00:06:42,720
could enjoy some helping messages on a

129
00:06:42,720 --> 00:06:46,259
level of them uh while we're on some

130
00:06:46,259 --> 00:06:49,080
stages of the development okay I suppose

131
00:06:49,080 --> 00:06:51,720
enough for the typical logic regarding

132
00:06:51,720 --> 00:06:53,880
the shell codes or

133
00:06:53,880 --> 00:06:56,340
each of you who are dealing with the

134
00:06:56,340 --> 00:06:59,280
malware have seen with a part of the

135
00:06:59,280 --> 00:07:02,940
courts why shall codes are in use in

136
00:07:02,940 --> 00:07:06,000
terms of malicious campaigns sometimes

137
00:07:06,000 --> 00:07:09,120
it could be the exploitation of some

138
00:07:09,120 --> 00:07:11,280
vulnerabilities in the documents parser

139
00:07:11,280 --> 00:07:14,220
right doesn't matter which so some

140
00:07:14,220 --> 00:07:17,340
compound format like a PDF dot kicks

141
00:07:17,340 --> 00:07:20,940
whatever and complicated parser some

142
00:07:20,940 --> 00:07:24,060
errors prone to vulnerability and some

143
00:07:24,060 --> 00:07:27,979
Shell Code embedded into the document to

144
00:07:27,979 --> 00:07:30,539
expose this vulnerabilities rights

145
00:07:30,539 --> 00:07:33,060
what's the difference from the normal PE

146
00:07:33,060 --> 00:07:36,599
or health files some techniques the

147
00:07:36,599 --> 00:07:38,160
shell could have to be positioned and

148
00:07:38,160 --> 00:07:41,160
dependent right that's why always call

149
00:07:41,160 --> 00:07:44,340
Dollar plus five from the slide or you

150
00:07:44,340 --> 00:07:46,500
would get initial code because position

151
00:07:46,500 --> 00:07:50,220
independent means the show code couldn't

152
00:07:50,220 --> 00:07:54,800
use all the precious features of the PE

153
00:07:54,800 --> 00:07:56,599
files

154
00:07:56,599 --> 00:08:01,380
larger in the windows or Windows P file

155
00:08:01,380 --> 00:08:04,259
the file larger interim right shell code

156
00:08:04,259 --> 00:08:07,500
is or shell code is on his own and have

157
00:08:07,500 --> 00:08:10,440
to understand the address and apply all

158
00:08:10,440 --> 00:08:12,599
these techniques so you would use a lot

159
00:08:12,599 --> 00:08:15,180
of tricks regarding the gettings lvas

160
00:08:15,180 --> 00:08:19,080
you also would see a lot of parsing of

161
00:08:19,080 --> 00:08:22,020
the process environment block to get the

162
00:08:22,020 --> 00:08:24,539
addresses from the system libraries and

163
00:08:24,539 --> 00:08:27,060
parsing of the PE for example next

164
00:08:27,060 --> 00:08:30,240
stages right so quite a familiar the

165
00:08:30,240 --> 00:08:33,059
last one I want to emphasize is they

166
00:08:33,059 --> 00:08:35,640
don't want to mention mostly the name of

167
00:08:35,640 --> 00:08:38,099
the functions API functions in the Shell

168
00:08:38,099 --> 00:08:41,700
codes mostly it would be the hashes and

169
00:08:41,700 --> 00:08:44,520
I could tell you this code snippet we

170
00:08:44,520 --> 00:08:48,180
would see later in our today's talk

171
00:08:48,180 --> 00:08:51,779
because it's directly related to our

172
00:08:51,779 --> 00:08:54,779
Windows Event log store sorry okay

173
00:08:54,779 --> 00:08:57,420
enough for the typical usage of the

174
00:08:57,420 --> 00:09:00,720
shell codes I suppose not much new on

175
00:09:00,720 --> 00:09:04,080
the very first two slides but here goes

176
00:09:04,080 --> 00:09:07,740
some new at least for me this year money

177
00:09:07,740 --> 00:09:11,060
factors think why don't to combine

178
00:09:11,060 --> 00:09:15,300
Windows Event logging mechanism and the

179
00:09:15,300 --> 00:09:18,839
show codes right actually why not

180
00:09:18,839 --> 00:09:22,320
imagine if you wrote the thumb driver

181
00:09:22,320 --> 00:09:25,580
for the Windows operating system maybe

182
00:09:25,580 --> 00:09:29,220
you want to save in unlocks not only the

183
00:09:29,220 --> 00:09:31,260
text Data not only the information

184
00:09:31,260 --> 00:09:35,279
messages but also some binary part of

185
00:09:35,279 --> 00:09:38,580
the data like in mini dumps imagine you

186
00:09:38,580 --> 00:09:41,880
have the your users base users

187
00:09:41,880 --> 00:09:46,200
get some errors from the driver and

188
00:09:46,200 --> 00:09:48,779
writing to the support oh why why why

189
00:09:48,779 --> 00:09:51,420
and your supporters could ask could you

190
00:09:51,420 --> 00:09:54,300
please share with mini jumps for us to

191
00:09:54,300 --> 00:09:58,019
understand the error so this is the part

192
00:09:58,019 --> 00:10:01,440
of the story about binary data in

193
00:10:01,440 --> 00:10:03,420
Windows event logs are completely

194
00:10:03,420 --> 00:10:06,600
ledgered completely legit functions you

195
00:10:06,600 --> 00:10:09,899
could write the software and use binary

196
00:10:09,899 --> 00:10:13,620
part of your code in a logging mechanism

197
00:10:13,620 --> 00:10:16,560
actually in event X Files it would be

198
00:10:16,560 --> 00:10:20,399
kept on the level of a file systems but

199
00:10:20,399 --> 00:10:24,360
if binary part of the windows event logs

200
00:10:24,360 --> 00:10:28,380
exists why not to put some Shortcut over

201
00:10:28,380 --> 00:10:31,980
there right good question why not but

202
00:10:31,980 --> 00:10:33,120
enough

203
00:10:33,120 --> 00:10:35,120
speaking we are already

204
00:10:35,120 --> 00:10:38,880
slide number four but let's go to the

205
00:10:38,880 --> 00:10:42,380
code from all the level of idea to the

206
00:10:42,380 --> 00:10:45,540
windows API in this presentation would

207
00:10:45,540 --> 00:10:49,200
be a quite amount of either screenshots

208
00:10:49,200 --> 00:10:51,959
I hope you would forgive me for the

209
00:10:51,959 --> 00:10:54,240
screenshots from either because I really

210
00:10:54,240 --> 00:10:56,940
need it for the to describe this

211
00:10:56,940 --> 00:10:57,959
technique

212
00:10:57,959 --> 00:11:00,959
so what happens here it's allocation of

213
00:11:00,959 --> 00:11:03,899
a 500 kilobytes after it

214
00:11:03,899 --> 00:11:08,760
Event Source register it right named K

215
00:11:08,760 --> 00:11:10,980
Management Service who knows game

216
00:11:10,980 --> 00:11:13,019
Management Service KMS

217
00:11:13,019 --> 00:11:16,440
I suppose many of you knows right it's

218
00:11:16,440 --> 00:11:18,779
once again it's a mechanism related to

219
00:11:18,779 --> 00:11:21,779
the licensing of the Microsoft Office

220
00:11:21,779 --> 00:11:24,240
Products of the Windows operating system

221
00:11:24,240 --> 00:11:28,079
itself I suppose so KMS one more Legend

222
00:11:28,079 --> 00:11:31,920
source of the event logs

223
00:11:31,920 --> 00:11:35,339
okay what happens next and after it I

224
00:11:35,339 --> 00:11:38,220
see the wild cycle in which

225
00:11:38,220 --> 00:11:41,540
while we're reading all the messages

226
00:11:41,540 --> 00:11:43,579
from

227
00:11:43,579 --> 00:11:47,519
related to this event Source reading one

228
00:11:47,519 --> 00:11:50,040
after one right I see the keys so

229
00:11:50,040 --> 00:11:51,959
sequential read

230
00:11:51,959 --> 00:11:54,660
um as a result all the okay Management

231
00:11:54,660 --> 00:11:57,500
Service logs would be

232
00:11:57,500 --> 00:12:03,600
red and also some auxiliary tasks like a

233
00:12:03,600 --> 00:12:05,940
relocation of memory if we would need

234
00:12:05,940 --> 00:12:08,760
more than 500 kilobytes and some error

235
00:12:08,760 --> 00:12:11,579
handling are also on your screen mostly

236
00:12:11,579 --> 00:12:14,640
we are interesting in two API calls it's

237
00:12:14,640 --> 00:12:18,240
a register Event Source W let us skip W

238
00:12:18,240 --> 00:12:20,760
just standing for the white right for

239
00:12:20,760 --> 00:12:23,940
the Unicode arguments and read event log

240
00:12:23,940 --> 00:12:28,380
this is it okay reading all the messages

241
00:12:28,380 --> 00:12:31,920
from KMS but you could ask me if you

242
00:12:31,920 --> 00:12:37,140
told us KMS is legit binary interlocks

243
00:12:37,140 --> 00:12:40,740
is legit so far we see only code taking

244
00:12:40,740 --> 00:12:44,220
all the logs from KMS where is the Shell

245
00:12:44,220 --> 00:12:47,100
Code take a look at this filtering

246
00:12:47,100 --> 00:12:50,100
filtering of the all the messages

247
00:12:50,100 --> 00:12:53,820
getting from them Windows 7 logs

248
00:12:53,820 --> 00:12:57,180
filtering by event category

249
00:12:57,180 --> 00:13:00,440
so they choose Ultras of the malware

250
00:13:00,440 --> 00:13:04,380
choose event category on a hex level it

251
00:13:04,380 --> 00:13:08,220
would be 41 42 hexadecimal in the ASCII

252
00:13:08,220 --> 00:13:11,579
form it's term a b please please take

253
00:13:11,579 --> 00:13:14,160
only the messages

254
00:13:14,160 --> 00:13:17,700
Source KMS category

255
00:13:17,700 --> 00:13:23,220
a b this is the interested for them and

256
00:13:23,220 --> 00:13:26,639
they knows precisely KMS by itself

257
00:13:26,639 --> 00:13:30,120
wouldn't put any messages with such a

258
00:13:30,120 --> 00:13:32,940
event category only related to the

259
00:13:32,940 --> 00:13:36,360
malware would be over there after it put

260
00:13:36,360 --> 00:13:38,720
into container in this

261
00:13:38,720 --> 00:13:41,820
in this case with the string from the

262
00:13:41,820 --> 00:13:44,880
STL as to the string and using append

263
00:13:44,880 --> 00:13:47,339
method for Ester the string Gathering

264
00:13:47,339 --> 00:13:52,200
also related to the KMS event lock

265
00:13:52,200 --> 00:13:56,040
messages with a precise known category

266
00:13:56,040 --> 00:13:59,700
okay next question to me could be okay

267
00:13:59,700 --> 00:14:03,839
you show us how to read but in advance

268
00:14:03,839 --> 00:14:06,839
they has to put the messages over there

269
00:14:06,839 --> 00:14:10,380
for sure let me combine on this slide

270
00:14:10,380 --> 00:14:12,899
two screenshots on the right already

271
00:14:12,899 --> 00:14:16,680
familiar it's a reading on the left it's

272
00:14:16,680 --> 00:14:19,500
a putting the messages the Shell Code

273
00:14:19,500 --> 00:14:23,279
actually to the windows event logs take

274
00:14:23,279 --> 00:14:25,760
a look what you have here one more

275
00:14:25,760 --> 00:14:28,800
infinite white cycle

276
00:14:28,800 --> 00:14:33,240
and Report event report event it's a API

277
00:14:33,240 --> 00:14:36,120
function number three they need to

278
00:14:36,120 --> 00:14:38,279
implement this technique

279
00:14:38,279 --> 00:14:43,139
and besides KMS as a source they also

280
00:14:43,139 --> 00:14:47,100
put like a event log information type it

281
00:14:47,100 --> 00:14:49,320
would be information messages

282
00:14:49,320 --> 00:14:52,860
and take a look at the start ID after

283
00:14:52,860 --> 00:14:55,440
the information type it's a familiar to

284
00:14:55,440 --> 00:14:59,160
us uh hexadecimal for one for two it's a

285
00:14:59,160 --> 00:15:03,120
category argument and message ID would

286
00:15:03,120 --> 00:15:06,959
be start from the 1423 the very first

287
00:15:06,959 --> 00:15:10,139
one and incrementally the Shell Code

288
00:15:10,139 --> 00:15:14,339
would be in a ID one four two four one

289
00:15:14,339 --> 00:15:18,180
four two five and so far and so forth so

290
00:15:18,180 --> 00:15:21,779
now we get the overall picture event

291
00:15:21,779 --> 00:15:25,800
serves KMS category for one for two

292
00:15:25,800 --> 00:15:27,560
starting ID

293
00:15:27,560 --> 00:15:31,860
1423 now they are ready to put into the

294
00:15:31,860 --> 00:15:35,579
event logs and to get and decrypt and

295
00:15:35,579 --> 00:15:36,899
execute

296
00:15:36,899 --> 00:15:39,380
this is the most

297
00:15:39,380 --> 00:15:43,500
Innovative actually part of the story I

298
00:15:43,500 --> 00:15:46,199
suppose for me it was new and

299
00:15:46,199 --> 00:15:49,560
interesting I tested with a total of

300
00:15:49,560 --> 00:15:52,139
your windows virtual machine I mean

301
00:15:52,139 --> 00:15:56,160
wrote some shot called snippet using

302
00:15:56,160 --> 00:15:59,579
always report event read event register

303
00:15:59,579 --> 00:16:02,279
Event Source for sure it works because

304
00:16:02,279 --> 00:16:05,639
why not in just a normal Windows API

305
00:16:05,639 --> 00:16:09,060
what was inside with a Shell Court they

306
00:16:09,060 --> 00:16:12,440
decrypted from the Windows Event locks

307
00:16:12,440 --> 00:16:16,199
actually nothing super special you see

308
00:16:16,199 --> 00:16:18,480
it on a slide

309
00:16:18,480 --> 00:16:21,420
actually on the slide where I promised

310
00:16:21,420 --> 00:16:24,300
you we would return to this show code it

311
00:16:24,300 --> 00:16:26,399
was the same but on the level of the

312
00:16:26,399 --> 00:16:28,980
Assembly Language here it's the compiler

313
00:16:28,980 --> 00:16:32,000
the compiler already analyzed

314
00:16:32,000 --> 00:16:35,160
by me and all the structures are marked

315
00:16:35,160 --> 00:16:38,759
as you could see quite a typical story

316
00:16:38,759 --> 00:16:42,180
parsing PE getting exports interesting

317
00:16:42,180 --> 00:16:47,279
part is the arguments of the export the

318
00:16:47,279 --> 00:16:49,860
code for the expected functions of the

319
00:16:49,860 --> 00:16:53,639
next stage it's error 14 the usual

320
00:16:53,639 --> 00:16:56,660
algorithm you could make it in a metal

321
00:16:56,660 --> 00:16:59,639
Metasploit whatever if you are using msf

322
00:16:59,639 --> 00:17:02,759
remote it's a function exported function

323
00:17:02,759 --> 00:17:04,500
named Lord

324
00:17:04,500 --> 00:17:08,819
and arguments would be never used in the

325
00:17:08,819 --> 00:17:10,980
next stage but anyway one of the

326
00:17:10,980 --> 00:17:14,699
argument was a Dave ask string Dave okay

327
00:17:14,699 --> 00:17:18,359
but never used over there on the side of

328
00:17:18,359 --> 00:17:19,740
the next stage

329
00:17:19,740 --> 00:17:24,179
so quite typical only arguments Maybe

330
00:17:24,179 --> 00:17:27,839
argument and a hash of the function

331
00:17:27,839 --> 00:17:31,380
which we have to brute force a visor or

332
00:17:31,380 --> 00:17:37,140
14 uh algorithm was not so typical all

333
00:17:37,140 --> 00:17:38,940
the other you could see it in the many

334
00:17:38,940 --> 00:17:40,500
shell codes

335
00:17:40,500 --> 00:17:45,360
so now I think we would stop with this

336
00:17:45,360 --> 00:17:48,539
technique okay so any questions really

337
00:17:48,539 --> 00:17:51,000
appreciated offline after the

338
00:17:51,000 --> 00:17:53,580
presentation okay not a fine button

339
00:17:53,580 --> 00:17:56,340
leave mode after the presentation or

340
00:17:56,340 --> 00:17:59,460
find me online now let us move to the

341
00:17:59,460 --> 00:18:02,780
promised broad view of overall campaign

342
00:18:02,780 --> 00:18:06,660
because you already heard some dropper

343
00:18:06,660 --> 00:18:10,740
Shell Code launcher some next stage let

344
00:18:10,740 --> 00:18:12,660
us concentrate on the different models

345
00:18:12,660 --> 00:18:14,840
as well why not it's also interesting

346
00:18:14,840 --> 00:18:17,460
what we have here first of all

347
00:18:17,460 --> 00:18:20,640
commercial tool sets commercial tool

348
00:18:20,640 --> 00:18:24,240
sets I suppose many of you know the

349
00:18:24,240 --> 00:18:27,780
Cobalt strike Cobalt strike was there

350
00:18:27,780 --> 00:18:32,340
was in use and also uh we've seen a lot

351
00:18:32,340 --> 00:18:37,020
of signs over uh silent break maybe it's

352
00:18:37,020 --> 00:18:39,480
not the right term now silent break

353
00:18:39,480 --> 00:18:42,179
because it was a previously name of the

354
00:18:42,179 --> 00:18:44,340
company it was bought by another company

355
00:18:44,340 --> 00:18:46,919
who doesn't matter the on a technical

356
00:18:46,919 --> 00:18:48,059
level

357
00:18:48,059 --> 00:18:50,940
where is the old tool with the name

358
00:18:50,940 --> 00:18:54,120
throwback old version of throwback you

359
00:18:54,120 --> 00:18:57,360
could found on a GitHub and we see the

360
00:18:57,360 --> 00:18:59,640
sides the part of the codes of the

361
00:18:59,640 --> 00:19:03,000
Throwbacks the name of the models named

362
00:19:03,000 --> 00:19:05,460
after throwback they have seen a lot of

363
00:19:05,460 --> 00:19:07,679
signs or at times analyzing this

364
00:19:07,679 --> 00:19:11,580
campaign and also names like slingshot

365
00:19:11,580 --> 00:19:15,660
or was over there and slingshot it's

366
00:19:15,660 --> 00:19:19,200
another tool from the same developers so

367
00:19:19,200 --> 00:19:23,299
we are really support with commercial

368
00:19:23,299 --> 00:19:27,299
tool set we are basing on names and part

369
00:19:27,299 --> 00:19:29,820
of the algorithms like encryption

370
00:19:29,820 --> 00:19:32,520
algorithms we think besides the Cobalt

371
00:19:32,520 --> 00:19:36,320
strike this tool was also in use

372
00:19:36,320 --> 00:19:39,179
anti-detection anti-detection was a

373
00:19:39,179 --> 00:19:42,720
quite nice because authors are now

374
00:19:42,720 --> 00:19:46,559
decide to use some a little bit esoteric

375
00:19:46,559 --> 00:19:50,820
compilers I mean Nim and go uh languages

376
00:19:50,820 --> 00:19:54,120
exist for already for many years but not

377
00:19:54,120 --> 00:19:56,280
the most popular amongst the malware

378
00:19:56,280 --> 00:19:58,620
developers and maybe not the most

379
00:19:58,620 --> 00:20:02,100
popular among the security software to

380
00:20:02,100 --> 00:20:05,160
detect right so my expectation with the

381
00:20:05,160 --> 00:20:07,919
stages compiled with neem with the goal

382
00:20:07,919 --> 00:20:11,640
is just they are trying to fool the

383
00:20:11,640 --> 00:20:14,179
security system trying to fool the

384
00:20:14,179 --> 00:20:18,120
detections right uh what was implemented

385
00:20:18,120 --> 00:20:20,960
in this

386
00:20:20,960 --> 00:20:25,260
uh compilers not the last stages some

387
00:20:25,260 --> 00:20:28,740
auxiliary decrypters or indirectors

388
00:20:28,740 --> 00:20:31,980
whatever not last stages Was A C C plus

389
00:20:31,980 --> 00:20:34,460
plus more traditional one

390
00:20:34,460 --> 00:20:40,020
also uh interestingly launch uh also we

391
00:20:40,020 --> 00:20:44,039
got the sample of launcher compiled with

392
00:20:44,039 --> 00:20:46,740
the GCC compiler on the mean GV

393
00:20:46,740 --> 00:20:49,380
environment so even if you are speaking

394
00:20:49,380 --> 00:20:51,900
about CC plus plus more than was one

395
00:20:51,900 --> 00:20:55,080
compiler was used I suppose the reason

396
00:20:55,080 --> 00:20:58,080
is a quite similar trying to full

397
00:20:58,080 --> 00:21:01,020
security solution

398
00:21:01,020 --> 00:21:04,320
not stages I already mentioned in the

399
00:21:04,320 --> 00:21:06,720
very start of the story different type

400
00:21:06,720 --> 00:21:09,299
of the last stature one of them are

401
00:21:09,299 --> 00:21:11,700
based upon HTTP protocol and could

402
00:21:11,700 --> 00:21:15,179
contract external control sermon

403
00:21:15,179 --> 00:21:18,660
but another one based on the name of the

404
00:21:18,660 --> 00:21:20,940
pipes it's in a passive mode just

405
00:21:20,940 --> 00:21:23,820
awaiting the alarm connections so for

406
00:21:23,820 --> 00:21:27,179
lateral movement and other media I could

407
00:21:27,179 --> 00:21:29,840
say right name it pipes are another

408
00:21:29,840 --> 00:21:33,720
Trojan and common system exist in this

409
00:21:33,720 --> 00:21:38,400
campaign okay so let us take a look at

410
00:21:38,400 --> 00:21:42,480
these parts one by one third party tools

411
00:21:42,480 --> 00:21:45,960
besides the commercial one we also once

412
00:21:45,960 --> 00:21:49,440
again observe the black bone black bone

413
00:21:49,440 --> 00:21:51,900
actually not the first time we met with

414
00:21:51,900 --> 00:21:55,380
repository it's a previously I observe

415
00:21:55,380 --> 00:21:56,100
it

416
00:21:56,100 --> 00:21:59,460
money factors want to compile driver for

417
00:21:59,460 --> 00:22:01,980
injection code in the user mode in the

418
00:22:01,980 --> 00:22:03,380
system process

419
00:22:03,380 --> 00:22:07,919
driver or use or using the backbone code

420
00:22:07,919 --> 00:22:11,580
this time as well just git clone

421
00:22:11,580 --> 00:22:15,179
add some custom code compile

422
00:22:15,179 --> 00:22:17,220
and they are good

423
00:22:17,220 --> 00:22:20,419
with this tool

424
00:22:20,419 --> 00:22:23,940
so it's a more typical among the

425
00:22:23,940 --> 00:22:27,380
targeted malware Ultras or

426
00:22:27,380 --> 00:22:29,580
commercials used these two commercial

427
00:22:29,580 --> 00:22:33,059
suits at once is a less or typical than

428
00:22:33,059 --> 00:22:35,880
usage of some uh prominent GitHub

429
00:22:35,880 --> 00:22:39,600
repository and why we decide that let me

430
00:22:39,600 --> 00:22:41,280
show you one of the reasons why we

431
00:22:41,280 --> 00:22:43,919
decided black bone is involved take a

432
00:22:43,919 --> 00:22:46,260
look at this trampoline quite typical

433
00:22:46,260 --> 00:22:49,760
for the black bone Repository

434
00:22:49,760 --> 00:22:56,460
uh they take legit file where fault exim

435
00:22:56,460 --> 00:23:00,780
related to the error handlings by the

436
00:23:00,780 --> 00:23:03,840
window separating system okay copy it to

437
00:23:03,840 --> 00:23:06,419
another directory to the directory with

438
00:23:06,419 --> 00:23:08,640
the tasks scheduler tasks

439
00:23:08,640 --> 00:23:12,059
uh and put some malicious dele over

440
00:23:12,059 --> 00:23:14,280
there so they'll also show the hijacking

441
00:23:14,280 --> 00:23:17,460
was used in a if they joined they'll

442
00:23:17,460 --> 00:23:19,620
also show the hijacking they need to

443
00:23:19,620 --> 00:23:22,500
stop the execution of the first XZ right

444
00:23:22,500 --> 00:23:25,440
of the legend XD file so what they need

445
00:23:25,440 --> 00:23:28,320
take a look patching of the entry point

446
00:23:28,320 --> 00:23:31,919
of initial alleged white listed exit in

447
00:23:31,919 --> 00:23:35,159
this case where fault dot exam uh

448
00:23:35,159 --> 00:23:38,039
putting the opcots into opcots move

449
00:23:38,039 --> 00:23:42,059
rocks some address jump racks what would

450
00:23:42,059 --> 00:23:44,700
be the result it would be just on an

451
00:23:44,700 --> 00:23:47,220
entry point this part of the code would

452
00:23:47,220 --> 00:23:49,559
change the execution flow to the

453
00:23:49,559 --> 00:23:51,720
provided address and provided to address

454
00:23:51,720 --> 00:23:54,480
its full function which we named weight

455
00:23:54,480 --> 00:23:57,299
and exit a very simple weight for the

456
00:23:57,299 --> 00:24:00,480
main thread in the malicious dll and a

457
00:24:00,480 --> 00:24:02,460
gracefully exit process with the Code

458
00:24:02,460 --> 00:24:05,659
Zero uh

459
00:24:05,659 --> 00:24:09,900
familiar yes if you check repository you

460
00:24:09,900 --> 00:24:12,240
would see the same trample line over

461
00:24:12,240 --> 00:24:15,240
there and Old World Dimensions some

462
00:24:15,240 --> 00:24:18,320
anti-detection tricks let me elaborate

463
00:24:18,320 --> 00:24:22,620
besides the several compilers in use I

464
00:24:22,620 --> 00:24:23,419
always

465
00:24:23,419 --> 00:24:26,220
mentioned on the previous slides and the

466
00:24:26,220 --> 00:24:29,640
white list of launchers like verifold XZ

467
00:24:29,640 --> 00:24:34,380
also they are somehow maybe obtained

468
00:24:34,380 --> 00:24:37,380
with a digital certificate to sign the

469
00:24:37,380 --> 00:24:42,720
malicious files but to my knowledge I

470
00:24:42,720 --> 00:24:46,159
never observed any alleged software

471
00:24:46,159 --> 00:24:48,900
signed with the same digital certificate

472
00:24:48,900 --> 00:24:52,080
only the malicious files so maybe they

473
00:24:52,080 --> 00:24:55,260
just bought the certificate to sign

474
00:24:55,260 --> 00:24:58,020
somehow voted

475
00:24:58,020 --> 00:25:01,260
to take it from somewhere to sign the

476
00:25:01,260 --> 00:25:04,440
malicious files typically if no electric

477
00:25:04,440 --> 00:25:07,200
software assigned with it maybe we are

478
00:25:07,200 --> 00:25:09,840
not dealing with a stealing of the

479
00:25:09,840 --> 00:25:12,360
digital certificate maybe it also only

480
00:25:12,360 --> 00:25:14,940
exists on the multi-factor site and

481
00:25:14,940 --> 00:25:18,720
nothing more and a paging interesting

482
00:25:18,720 --> 00:25:21,780
paging what also onward not only the

483
00:25:21,780 --> 00:25:25,700
entry point of the web fault file also

484
00:25:25,700 --> 00:25:29,400
I would show you on the next slide uh

485
00:25:29,400 --> 00:25:32,400
paging of the normal event logic

486
00:25:32,400 --> 00:25:36,179
mechanism and AMCI anti-malware

487
00:25:36,179 --> 00:25:39,059
mechanism was patched on the level of

488
00:25:39,059 --> 00:25:44,039
ntdll dll so in tdll the last level in

489
00:25:44,039 --> 00:25:46,140
the user space before the kernel right

490
00:25:46,140 --> 00:25:49,080
so they working with the user space

491
00:25:49,080 --> 00:25:52,279
maybe the lower level they could pitch

492
00:25:52,279 --> 00:25:55,860
to try to fool the MCI mechanism or

493
00:25:55,860 --> 00:25:57,620
logging of them

494
00:25:57,620 --> 00:26:01,980
of all the infection process

495
00:26:01,980 --> 00:26:05,760
uh interestingly interestingly uh we are

496
00:26:05,760 --> 00:26:08,460
already good with keeping shell caught

497
00:26:08,460 --> 00:26:10,679
in event logs a lot of details I provide

498
00:26:10,679 --> 00:26:12,900
so let us keep this point and the last

499
00:26:12,900 --> 00:26:15,600
one it's a interesting name of the

500
00:26:15,600 --> 00:26:16,919
control server

501
00:26:16,919 --> 00:26:19,799
one of the process in which they

502
00:26:19,799 --> 00:26:22,860
injected malicious code also

503
00:26:22,860 --> 00:26:26,760
legit system in a infected corporate

504
00:26:26,760 --> 00:26:30,240
environment and the registered domain

505
00:26:30,240 --> 00:26:34,679
domain web domain was completely in line

506
00:26:34,679 --> 00:26:38,100
with the name of this infected system so

507
00:26:38,100 --> 00:26:40,500
to make traffic to the external control

508
00:26:40,500 --> 00:26:43,200
server less visible they even think

509
00:26:43,200 --> 00:26:45,900
about the web domain I could name it

510
00:26:45,900 --> 00:26:48,419
quite a nice quite a nice decision I

511
00:26:48,419 --> 00:26:51,659
suppose so some Recon understanding this

512
00:26:51,659 --> 00:26:55,080
software is on board and registering the

513
00:26:55,080 --> 00:26:56,720
corresponding

514
00:26:56,720 --> 00:26:59,159
web domain

515
00:26:59,159 --> 00:27:03,299
I promise you details about the paging

516
00:27:03,299 --> 00:27:05,940
let's start with the normal event logs

517
00:27:05,940 --> 00:27:09,779
as you could see Autos adore event logs

518
00:27:09,779 --> 00:27:12,120
even puts the shortcuts over there but

519
00:27:12,120 --> 00:27:15,480
they adore only their own shell or only

520
00:27:15,480 --> 00:27:19,620
their own event logs and not let the

521
00:27:19,620 --> 00:27:22,260
windows itself to put some messages

522
00:27:22,260 --> 00:27:25,080
regarding the infection process they put

523
00:27:25,080 --> 00:27:28,320
mentioned functions like ETV

524
00:27:28,320 --> 00:27:30,860
ETV is a common prefix for the API

525
00:27:30,860 --> 00:27:34,340
related to the Windows Event login

526
00:27:34,340 --> 00:27:37,320
notification register event register

527
00:27:37,320 --> 00:27:40,500
whatever just page to the return zero so

528
00:27:40,500 --> 00:27:42,720
please don't do nothing just return

529
00:27:42,720 --> 00:27:46,380
success please don't write any logs into

530
00:27:46,380 --> 00:27:50,159
into the evtx files on this infected

531
00:27:50,159 --> 00:27:53,580
system and regarding the MCA paycheck

532
00:27:53,580 --> 00:27:57,600
it's actually uh I couldn't say 2022

533
00:27:57,600 --> 00:28:00,900
it's a super Innovative it's existing to

534
00:28:00,900 --> 00:28:03,260
my knowledge even in a Metasploit so

535
00:28:03,260 --> 00:28:08,520
omci patient is available for them good

536
00:28:08,520 --> 00:28:10,740
they apply it but it's not like the

537
00:28:10,740 --> 00:28:12,779
Innovation technique or we are starting

538
00:28:12,779 --> 00:28:13,980
with

539
00:28:13,980 --> 00:28:17,039
all the story I could say with MCA

540
00:28:17,039 --> 00:28:18,779
paging maybe if you have some opinion

541
00:28:18,779 --> 00:28:20,760
methods within Metasploit you could name

542
00:28:20,760 --> 00:28:23,400
it commodity right many actors could

543
00:28:23,400 --> 00:28:27,919
many authors of malware could apply and

544
00:28:27,919 --> 00:28:31,620
I promise you some esoteric compilers

545
00:28:31,620 --> 00:28:34,799
take a look it's a gold wrapper gold

546
00:28:34,799 --> 00:28:40,260
just uh decode decrypt the Cobalt strike

547
00:28:40,260 --> 00:28:43,620
models but it was interesting to write

548
00:28:43,620 --> 00:28:47,700
the script to a fight with all this wrap

549
00:28:47,700 --> 00:28:50,760
up because take a look it's like a huge

550
00:28:50,760 --> 00:28:52,919
amount of concatenations really a

551
00:28:52,919 --> 00:28:55,440
thousands of concatenations after it

552
00:28:55,440 --> 00:28:58,080
when you concurred on this part you have

553
00:28:58,080 --> 00:29:01,440
to four four times debase it the decode

554
00:29:01,440 --> 00:29:04,919
base64 and after it uh decrypted with

555
00:29:04,919 --> 00:29:09,419
the is algorithm so uh in a case of such

556
00:29:09,419 --> 00:29:12,720
a huge amount of blocks I have to wrote

557
00:29:12,720 --> 00:29:15,419
some script together of this block and

558
00:29:15,419 --> 00:29:19,799
after it uh decrypted okay I consider it

559
00:29:19,799 --> 00:29:22,380
the anti-detection measure interesting

560
00:29:22,380 --> 00:29:25,260
part about the goal a lot of usage of a

561
00:29:25,260 --> 00:29:27,500
Cisco Library

562
00:29:27,500 --> 00:29:30,480
Windows it was back then it was a little

563
00:29:30,480 --> 00:29:33,240
bit surprised for me six calls exist not

564
00:29:33,240 --> 00:29:35,700
only on the Linux and the windows also

565
00:29:35,700 --> 00:29:38,279
it's a virtual specific but it exists

566
00:29:38,279 --> 00:29:40,440
you could call Api functions some API

567
00:29:40,440 --> 00:29:42,899
functions using ciscals and this go

568
00:29:42,899 --> 00:29:46,880
wrapper relies heavily on go Library

569
00:29:46,880 --> 00:29:51,179
using this ciscolls okay enough for the

570
00:29:51,179 --> 00:29:54,659
wrapper and the patching patching also

571
00:29:54,659 --> 00:29:58,320
don't know actually what to tell much

572
00:29:58,320 --> 00:30:00,179
about it I've already mentioned

573
00:30:00,179 --> 00:30:03,360
functions like ETV event register now

574
00:30:03,360 --> 00:30:07,620
would be not so API event register it

575
00:30:07,620 --> 00:30:09,840
would be the function returning just

576
00:30:09,840 --> 00:30:14,460
Zero from the malicious code pitching

577
00:30:14,460 --> 00:30:17,700
also done with another with a sample

578
00:30:17,700 --> 00:30:20,039
compiled somewhere a little bit esoteric

579
00:30:20,039 --> 00:30:23,520
compiler the last stages the last but

580
00:30:23,520 --> 00:30:26,279
not the least all the check I have to

581
00:30:26,279 --> 00:30:29,700
end up with a some remote Administration

582
00:30:29,700 --> 00:30:34,200
tool I mentioned HTTP based Rod right

583
00:30:34,200 --> 00:30:38,039
and name pipe based let's take a look on

584
00:30:38,039 --> 00:30:40,620
the difference so passive communication

585
00:30:40,620 --> 00:30:44,640
in the case of a named pipes it's a land

586
00:30:44,640 --> 00:30:47,100
oriented local area network oriented

587
00:30:47,100 --> 00:30:49,380
passive awaiting for the incoming

588
00:30:49,380 --> 00:30:51,720
connection from the already infected

589
00:30:51,720 --> 00:30:54,299
cost so I suppose it's lateral movement

590
00:30:54,299 --> 00:30:58,500
and head to the HTTP it just a waiting

591
00:30:58,500 --> 00:31:01,279
for the connection to the C2

592
00:31:01,279 --> 00:31:05,820
interestingly they their code could

593
00:31:05,820 --> 00:31:09,179
handle the list of control server and

594
00:31:09,179 --> 00:31:11,340
the control server from the list would

595
00:31:11,340 --> 00:31:14,940
be chosen randomly slow all the time it

596
00:31:14,940 --> 00:31:17,520
would be not the first conferred some

597
00:31:17,520 --> 00:31:20,700
random C2 would be chosen from the list

598
00:31:20,700 --> 00:31:24,000
knock knock anybody home connection if

599
00:31:24,000 --> 00:31:27,059
connection not successful next to next

600
00:31:27,059 --> 00:31:28,020
YouTube

601
00:31:28,020 --> 00:31:31,140
if successfully so or some randomization

602
00:31:31,140 --> 00:31:34,559
quite a nice quite a nice trick

603
00:31:34,559 --> 00:31:36,779
regarding the encryption you could see

604
00:31:36,779 --> 00:31:40,440
it on a slide also in some cases a

605
00:31:40,440 --> 00:31:42,480
version would be transmitted in a beacon

606
00:31:42,480 --> 00:31:45,679
in initial packet to control uh so

607
00:31:45,679 --> 00:31:48,659
interestingly maybe the last thing I

608
00:31:48,659 --> 00:31:52,460
want to emphasize uh here it's uh

609
00:31:52,460 --> 00:31:57,360
besides or Windows 7 logs they under the

610
00:31:57,360 --> 00:31:59,279
injection they are obsessed with the

611
00:31:59,279 --> 00:32:01,679
injection injecting all the system

612
00:32:01,679 --> 00:32:05,100
process around so comments or comment

613
00:32:05,100 --> 00:32:07,500
would take as an argument I mean common

614
00:32:07,500 --> 00:32:11,460
from the C2 or to which process ID or

615
00:32:11,460 --> 00:32:13,500
name and which code

616
00:32:13,500 --> 00:32:16,679
uh and this Georgians both of them both

617
00:32:16,679 --> 00:32:19,080
of them you could see or

618
00:32:19,080 --> 00:32:22,440
could inject and actually inject

619
00:32:22,440 --> 00:32:25,679
everywhere else or aforementioned

620
00:32:25,679 --> 00:32:30,960
cooperate or solution deployed in this

621
00:32:30,960 --> 00:32:33,960
environment and the very last It's a

622
00:32:33,960 --> 00:32:36,899
sleep time in case of HD petrogen a

623
00:32:36,899 --> 00:32:39,120
funny thing or sleep time it's in

624
00:32:39,120 --> 00:32:41,700
configuration data right but the Aging

625
00:32:41,700 --> 00:32:44,039
sum a little bit optimization the sleep

626
00:32:44,039 --> 00:32:46,620
time from the configuration would be

627
00:32:46,620 --> 00:32:50,399
multiplied to the sum range from the 0.9

628
00:32:50,399 --> 00:32:55,200
to 1.1 and it means some and regularity

629
00:32:55,200 --> 00:32:58,860
I suppose it some anti-incident response

630
00:32:58,860 --> 00:33:01,620
measure for the incident responses would

631
00:33:01,620 --> 00:33:04,380
be harder to correlate or the initial

632
00:33:04,380 --> 00:33:06,659
infection and the beaconing and some

633
00:33:06,659 --> 00:33:09,059
getting the comments maybe with a little

634
00:33:09,059 --> 00:33:11,520
randomization of sleeping time related

635
00:33:11,520 --> 00:33:14,460
to this idea

636
00:33:14,460 --> 00:33:18,559
regarding the comments are quite a

637
00:33:18,559 --> 00:33:22,679
number of them here you could see some

638
00:33:22,679 --> 00:33:28,320
special uh 199 terminate session what I

639
00:33:28,320 --> 00:33:31,159
could emphasize here or for example

640
00:33:31,159 --> 00:33:33,299
fingerprinting fingerprinting

641
00:33:33,299 --> 00:33:35,580
interesting interestingly would get

642
00:33:35,580 --> 00:33:37,679
motion grid from the Windows system

643
00:33:37,679 --> 00:33:39,600
register

644
00:33:39,600 --> 00:33:43,320
nice idea for example to keeping it's a

645
00:33:43,320 --> 00:33:46,679
while building the unique idea for the

646
00:33:46,679 --> 00:33:49,440
target maybe a nice idea to rely on the

647
00:33:49,440 --> 00:33:51,960
machine grid and also even knowledge

648
00:33:51,960 --> 00:33:54,539
building stage or steady bug privilege

649
00:33:54,539 --> 00:33:58,140
uh was taken is this process called Drew

650
00:33:58,140 --> 00:34:01,260
said debug privilege uh also interesting

651
00:34:01,260 --> 00:34:03,480
part of the pingerprinting all the other

652
00:34:03,480 --> 00:34:07,080
common comments are quite uh normal you

653
00:34:07,080 --> 00:34:10,260
could read it on a screenshot I think I

654
00:34:10,260 --> 00:34:12,780
wouldn't enumerate all of them allowed

655
00:34:12,780 --> 00:34:17,639
pipes Trojan it's a much more

656
00:34:17,639 --> 00:34:20,659
have a comments on board but

657
00:34:20,659 --> 00:34:23,639
I personally have a feeling they have

658
00:34:23,639 --> 00:34:26,399
some repository from which they could

659
00:34:26,399 --> 00:34:29,219
construct the Trojan for example we

660
00:34:29,219 --> 00:34:32,639
observed uh HTTP one with the common

661
00:34:32,639 --> 00:34:35,639
system from the name pipes one so they

662
00:34:35,639 --> 00:34:38,699
could combine buildings a new sample on

663
00:34:38,699 --> 00:34:41,280
the part of the codes why not if you

664
00:34:41,280 --> 00:34:45,260
have the repository so you could here

665
00:34:45,260 --> 00:34:50,040
it's a interesting part is a number of

666
00:34:50,040 --> 00:34:54,379
the commands and all the other

667
00:34:54,379 --> 00:34:56,820
features what could I emphasize for

668
00:34:56,820 --> 00:35:00,240
example uh taking a look how long the

669
00:35:00,240 --> 00:35:03,180
user is an active so maybe they don't

670
00:35:03,180 --> 00:35:05,880
want to work simultaneously with a host

671
00:35:05,880 --> 00:35:09,300
user and wants to wait while users

672
00:35:09,300 --> 00:35:12,540
somewhere Lotto on the computer and

673
00:35:12,540 --> 00:35:16,320
checking 50 minutes of inactivity we

674
00:35:16,320 --> 00:35:19,260
could send some comments to this host

675
00:35:19,260 --> 00:35:23,220
nobody is there maybe working like this

676
00:35:23,220 --> 00:35:27,599
so actually this is it this is it

677
00:35:27,599 --> 00:35:31,020
really thanks for the attention I really

678
00:35:31,020 --> 00:35:35,339
hope uh my English was understandable uh

679
00:35:35,339 --> 00:35:38,780
if not please any

680
00:35:38,780 --> 00:35:41,579
ask your questions after the

681
00:35:41,579 --> 00:35:45,300
presentation or online uh we are done I

682
00:35:45,300 --> 00:35:48,079
hope we are done in time

683
00:35:48,079 --> 00:35:51,359
uh through wrapping all up to sum up

684
00:35:51,359 --> 00:35:54,839
what we have here we are described to

685
00:35:54,839 --> 00:35:58,020
you new techniques over for the file a

686
00:35:58,020 --> 00:36:01,260
smallware and also we describe the

687
00:36:01,260 --> 00:36:03,540
campaign targeted campaign around it

688
00:36:03,540 --> 00:36:05,760
with a lot of techniques like different

689
00:36:05,760 --> 00:36:09,119
compilers third-party tools different

690
00:36:09,119 --> 00:36:11,940
Trojans so modern technique from the

691
00:36:11,940 --> 00:36:13,740
real campaign

692
00:36:13,740 --> 00:36:16,880
okay now I'm ready for the questions

693
00:36:16,880 --> 00:36:21,359
you'll see uh my Twitter nickname on the

694
00:36:21,359 --> 00:36:24,480
screen and my name and surname

695
00:36:24,480 --> 00:36:27,240
um Twitter is good you could also follow

696
00:36:27,240 --> 00:36:30,599
me on the other platforms uh thanks

697
00:36:30,599 --> 00:36:34,079
thanks again I hope to see you uh in

698
00:36:34,079 --> 00:36:36,780
person and please don't forget to hug

699
00:36:36,780 --> 00:36:39,859
the planet further

