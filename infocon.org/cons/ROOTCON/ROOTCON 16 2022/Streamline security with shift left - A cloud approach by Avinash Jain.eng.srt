1
00:00:00,000 --> 00:00:03,659
a very good morning good evening or good

2
00:00:03,659 --> 00:00:05,220
afternoon from wherever you are

3
00:00:05,220 --> 00:00:09,059
connected remotely uh today we are going

4
00:00:09,059 --> 00:00:12,059
to uh what I'm going to talk about in my

5
00:00:12,059 --> 00:00:13,559
presentation is about streamline

6
00:00:13,559 --> 00:00:15,719
security which shift lab a cloud

7
00:00:15,719 --> 00:00:17,940
approach over the ship left what is

8
00:00:17,940 --> 00:00:21,420
cloud approach uh how we are gonna see

9
00:00:21,420 --> 00:00:24,060
Steve mining those uh we'll be seeing in

10
00:00:24,060 --> 00:00:26,400
the next 30 minutes before I jump into

11
00:00:26,400 --> 00:00:30,119
the real uh the real butter of this

12
00:00:30,119 --> 00:00:32,640
topic a very quick introduction about

13
00:00:32,640 --> 00:00:36,660
myself myself you can find me on various

14
00:00:36,660 --> 00:00:38,480
social media with handed as logic form

15
00:00:38,480 --> 00:00:41,399
uh I'm a security engineer currently

16
00:00:41,399 --> 00:00:43,079
working with Microsoft as an product

17
00:00:43,079 --> 00:00:46,140
manager for identity security I am a

18
00:00:46,140 --> 00:00:48,899
cricket player by heart and I am a tech

19
00:00:48,899 --> 00:00:51,360
blogger at medium with hundreds logical

20
00:00:51,360 --> 00:00:54,180
it's also publicity for my blog so you

21
00:00:54,180 --> 00:00:57,000
can go there uh logic of dominion.com

22
00:00:57,000 --> 00:00:59,579
where you can find where is stuff that I

23
00:00:59,579 --> 00:01:02,160
write about security uh related to

24
00:01:02,160 --> 00:01:05,580
compliance privacies data breaches uh

25
00:01:05,580 --> 00:01:07,760
various hacks that I did in the past uh

26
00:01:07,760 --> 00:01:10,500
all are there you can find and run from

27
00:01:10,500 --> 00:01:13,200
there uh I call it break stuff to run so

28
00:01:13,200 --> 00:01:14,700
I've been doing this for past six seven

29
00:01:14,700 --> 00:01:18,180
years I try to break stuff's application

30
00:01:18,180 --> 00:01:20,700
Logics and try to learn out of it and

31
00:01:20,700 --> 00:01:22,860
share that density of the community I'm

32
00:01:22,860 --> 00:01:24,479
also a cyber security speaker I've been

33
00:01:24,479 --> 00:01:26,460
speaking at very security conferences

34
00:01:26,460 --> 00:01:30,020
step on uh

35
00:01:36,079 --> 00:01:39,299
so thanks a lot for everyone uh who are

36
00:01:39,299 --> 00:01:41,340
attending this hand listening to me

37
00:01:41,340 --> 00:01:44,640
we will proceed ahead and see what a

38
00:01:44,640 --> 00:01:46,619
shift lab actually means so you you

39
00:01:46,619 --> 00:01:50,340
might have seen this word shift left uh

40
00:01:50,340 --> 00:01:52,680
you know in the title streamlining

41
00:01:52,680 --> 00:01:54,600
security reset left before we jump to

42
00:01:54,600 --> 00:01:56,579
what is script left let me create a base

43
00:01:56,579 --> 00:02:01,079
of why we are going to study what is a

44
00:02:01,079 --> 00:02:04,079
flap so in this agile world where there

45
00:02:04,079 --> 00:02:06,719
is continuous iteration of development

46
00:02:06,719 --> 00:02:09,479
testing happening throughout SGL cycle

47
00:02:09,479 --> 00:02:12,360
throughout your uh different phases of

48
00:02:12,360 --> 00:02:15,900
your sdlc uh there is a constant

49
00:02:15,900 --> 00:02:17,760
collaboration amongst different

50
00:02:17,760 --> 00:02:20,180
stakeholders holders which are involved

51
00:02:20,180 --> 00:02:22,980
they are product managers the security

52
00:02:22,980 --> 00:02:26,280
team qas developer Engineers all there's

53
00:02:26,280 --> 00:02:27,900
a huge collaboration which involves

54
00:02:27,900 --> 00:02:31,440
multiple and diverse stakeholders and

55
00:02:31,440 --> 00:02:33,300
you you will see that improving

56
00:02:33,300 --> 00:02:35,700
continuous Improvement has is happening

57
00:02:35,700 --> 00:02:38,879
at every phase or at every stage of your

58
00:02:38,879 --> 00:02:40,080
SCLC

59
00:02:40,080 --> 00:02:42,599
every release now it's getting more

60
00:02:42,599 --> 00:02:44,700
frequent than ever uh Engineers are

61
00:02:44,700 --> 00:02:47,519
releasing their their bug fixes touches

62
00:02:47,519 --> 00:02:49,920
features or whatever in in a very

63
00:02:49,920 --> 00:02:52,800
frequent manner as it used to be it used

64
00:02:52,800 --> 00:02:55,140
to happen than before all of this

65
00:02:55,140 --> 00:02:58,080
actually makes a chance of your

66
00:02:58,080 --> 00:03:01,080
potential security loophole to occur or

67
00:03:01,080 --> 00:03:03,420
to to come more to become more and more

68
00:03:03,420 --> 00:03:06,300
real the chances of having of of coming

69
00:03:06,300 --> 00:03:09,480
or maybe you're getting those loopholes

70
00:03:09,480 --> 00:03:11,459
security loopholes become more real when

71
00:03:11,459 --> 00:03:14,459
we talk about uh in a in a very in a

72
00:03:14,459 --> 00:03:16,519
startup world where they shift

73
00:03:16,519 --> 00:03:19,319
development of your application where

74
00:03:19,319 --> 00:03:21,420
this more code this code is written

75
00:03:21,420 --> 00:03:23,940
where this more releases are made all of

76
00:03:23,940 --> 00:03:27,900
this in real sense make uh you know this

77
00:03:27,900 --> 00:03:30,599
unknown dependencies or vulnerability or

78
00:03:30,599 --> 00:03:33,480
security group was become more real at

79
00:03:33,480 --> 00:03:36,360
each at each step of your GLC and what

80
00:03:36,360 --> 00:03:39,180
happens when all of this become you know

81
00:03:39,180 --> 00:03:42,239
become huge it leads to consuming more

82
00:03:42,239 --> 00:03:44,340
time and effort for your engineers to

83
00:03:44,340 --> 00:03:47,340
fix it and it it also delays your

84
00:03:47,340 --> 00:03:49,920
release timelines since now you are

85
00:03:49,920 --> 00:03:51,780
doing security testing at the end of

86
00:03:51,780 --> 00:03:54,239
your uh you know at the end of the cycle

87
00:03:54,239 --> 00:03:56,519
uh those security loopholes which were

88
00:03:56,519 --> 00:03:59,340
coming from every stage of SCLC now is

89
00:03:59,340 --> 00:04:01,739
getting fixed at the end and now as

90
00:04:01,739 --> 00:04:05,280
being uh you know the time and efforts

91
00:04:05,280 --> 00:04:07,680
now spending getting spent at the end of

92
00:04:07,680 --> 00:04:10,200
the cycle and all of this makes your

93
00:04:10,200 --> 00:04:14,340
release uh delays it leads to more more

94
00:04:14,340 --> 00:04:18,000
time effort of all the stakeholders

95
00:04:18,000 --> 00:04:20,100
basically like you are revising your

96
00:04:20,100 --> 00:04:23,720
essay of the cycle again and again again

97
00:04:23,960 --> 00:04:27,360
here this says that about 80 percentage

98
00:04:27,360 --> 00:04:30,060
of your security bugs or any bug is

99
00:04:30,060 --> 00:04:32,220
fixed in that 20 percent of your

100
00:04:32,220 --> 00:04:34,680
software development now what about that

101
00:04:34,680 --> 00:04:37,919
remaining 20 above then that remaining

102
00:04:37,919 --> 00:04:40,680
of 20 a bug is fixed in the remaining of

103
00:04:40,680 --> 00:04:43,680
phases of your iclg cycle and this is

104
00:04:43,680 --> 00:04:48,000
what brings us to the need of shift lab

105
00:04:48,000 --> 00:04:50,340
or the need of scaling security with

106
00:04:50,340 --> 00:04:53,520
swift approach now what is shift lab

107
00:04:53,520 --> 00:04:56,940
uh in this slide uh you might be seeing

108
00:04:56,940 --> 00:04:59,580
a traffic light which is getting turned

109
00:04:59,580 --> 00:05:01,680
red and they say and the picture of

110
00:05:01,680 --> 00:05:04,500
rainbow where these are red color these

111
00:05:04,500 --> 00:05:06,120
seven colors and the red color is

112
00:05:06,120 --> 00:05:07,560
something which is common in both of the

113
00:05:07,560 --> 00:05:10,020
picture I I wanted to ask you but the

114
00:05:10,020 --> 00:05:11,340
red color is something which is common

115
00:05:11,340 --> 00:05:13,440
in both two pictures

116
00:05:13,440 --> 00:05:15,479
now think why that red color is common

117
00:05:15,479 --> 00:05:17,940
why I am emphasizing on that a lot of

118
00:05:17,940 --> 00:05:20,639
why Reckless use in traffic light to

119
00:05:20,639 --> 00:05:22,800
hold a traffic or wired red color always

120
00:05:22,800 --> 00:05:25,259
comes at the end of the rainbow the

121
00:05:25,259 --> 00:05:26,699
reason is pretty simple if you talk

122
00:05:26,699 --> 00:05:28,500
about physics the reason it says that

123
00:05:28,500 --> 00:05:30,419
because a red color has the largest

124
00:05:30,419 --> 00:05:32,759
wavelength that's that's mean that it

125
00:05:32,759 --> 00:05:36,360
can travel to a furthest distance and as

126
00:05:36,360 --> 00:05:39,060
you move towards the red side as you're

127
00:05:39,060 --> 00:05:41,280
moving away moving right

128
00:05:41,280 --> 00:05:43,620
that means you are moving right towards

129
00:05:43,620 --> 00:05:45,240
them and you are moving away from the

130
00:05:45,240 --> 00:05:47,400
source and when you come closer to the

131
00:05:47,400 --> 00:05:49,380
source that is that is means you are

132
00:05:49,380 --> 00:05:51,360
moving to the left side

133
00:05:51,360 --> 00:05:55,440
sip left means in a very simple term in

134
00:05:55,440 --> 00:05:57,780
a very limit language is bringing

135
00:05:57,780 --> 00:06:01,139
anything close to the source so when we

136
00:06:01,139 --> 00:06:03,780
talk about SCLC when we say shift lab

137
00:06:03,780 --> 00:06:05,460
that means we are bringing something

138
00:06:05,460 --> 00:06:07,680
close to the source from Source from

139
00:06:07,680 --> 00:06:10,199
where the future is getting created or

140
00:06:10,199 --> 00:06:12,660
discussed or brain is strong so that is

141
00:06:12,660 --> 00:06:16,919
means shift lab we bring our security uh

142
00:06:16,919 --> 00:06:19,620
testing or discussion or whatever close

143
00:06:19,620 --> 00:06:22,500
to the source of the future of the

144
00:06:22,500 --> 00:06:25,979
release or of of the essay of the

145
00:06:25,979 --> 00:06:27,740
circuit

146
00:06:27,740 --> 00:06:31,740
now this is another uh example of shift

147
00:06:31,740 --> 00:06:32,639
lab

148
00:06:32,639 --> 00:06:35,039
so we most of the people who are from

149
00:06:35,039 --> 00:06:36,780
computer background I should have

150
00:06:36,780 --> 00:06:39,000
understood what is left flip operator so

151
00:06:39,000 --> 00:06:40,620
when we when you apply a left shift

152
00:06:40,620 --> 00:06:43,259
operator to a number you will find the

153
00:06:43,259 --> 00:06:45,539
resultant quantity increases to a large

154
00:06:45,539 --> 00:06:47,699
amount for example in this picture

155
00:06:47,699 --> 00:06:50,340
uh when I apply a bit wise left flip

156
00:06:50,340 --> 00:06:52,800
operator up to root number 25 the result

157
00:06:52,800 --> 00:06:55,740
will become very high that is going to

158
00:06:55,740 --> 00:06:57,419
become a hundred

159
00:06:57,419 --> 00:06:59,400
now I will combine both of the

160
00:06:59,400 --> 00:07:00,539
definition

161
00:07:00,539 --> 00:07:07,319
to create what exactly we achieve by uh

162
00:07:07,319 --> 00:07:10,100
doing shift lab

163
00:07:12,240 --> 00:07:14,780
so

164
00:07:14,819 --> 00:07:18,660
swiftly security uh refers to when your

165
00:07:18,660 --> 00:07:22,020
measures are implemented to ensure that

166
00:07:22,020 --> 00:07:24,599
security concerns which are taken into

167
00:07:24,599 --> 00:07:27,539
the consideration during the whole life

168
00:07:27,539 --> 00:07:29,280
cycle of your application or application

169
00:07:29,280 --> 00:07:31,560
development they are taken not at the

170
00:07:31,560 --> 00:07:34,199
end of the process but they are taken uh

171
00:07:34,199 --> 00:07:37,080
throughout your agency steps the goal of

172
00:07:37,080 --> 00:07:39,240
shift lab Security is to make sure to

173
00:07:39,240 --> 00:07:41,880
identify and resolve potential security

174
00:07:41,880 --> 00:07:44,940
vulnerabilities that may occur or that

175
00:07:44,940 --> 00:07:47,520
can occur in the earliest phases of

176
00:07:47,520 --> 00:07:50,340
yours is the second and where these

177
00:07:50,340 --> 00:07:52,919
issues are less expensive to fix

178
00:07:52,919 --> 00:07:55,440
some some of the direct add-ons that it

179
00:07:55,440 --> 00:07:57,479
provides is that it gives you a much

180
00:07:57,479 --> 00:08:00,660
better opportunity to see the security

181
00:08:00,660 --> 00:08:03,180
outcomes occurring in the product sooner

182
00:08:03,180 --> 00:08:05,099
because now you don't have to wait at

183
00:08:05,099 --> 00:08:07,139
the end of the as a cycle to do this

184
00:08:07,139 --> 00:08:09,419
great asset now you are integrating

185
00:08:09,419 --> 00:08:12,539
security at the early phases and you can

186
00:08:12,539 --> 00:08:15,660
see the security outcomes much earlier

187
00:08:15,660 --> 00:08:18,240
it involves requirement Gathering of

188
00:08:18,240 --> 00:08:19,620
providing suggestions to the product

189
00:08:19,620 --> 00:08:23,520
team or advices uh at the early stage it

190
00:08:23,520 --> 00:08:25,979
also obviously directly will save a lot

191
00:08:25,979 --> 00:08:28,680
of effort and time and the overall cost

192
00:08:28,680 --> 00:08:31,080
of products of your product and rather

193
00:08:31,080 --> 00:08:32,700
if we are doing it at the end of the

194
00:08:32,700 --> 00:08:34,260
recycle now of course we are

195
00:08:34,260 --> 00:08:36,719
interviewing the efforts at that at the

196
00:08:36,719 --> 00:08:39,839
each phase we are saving our time our

197
00:08:39,839 --> 00:08:42,539
efforts and the owner possible product

198
00:08:42,539 --> 00:08:45,959
which were getting very huge when we're

199
00:08:45,959 --> 00:08:48,660
doing security when the product getting

200
00:08:48,660 --> 00:08:50,580
shipped to the production environment

201
00:08:50,580 --> 00:08:53,940
it also brings the improved test in and

202
00:08:53,940 --> 00:08:56,640
monitoring of your of your future or of

203
00:08:56,640 --> 00:09:00,180
your release it also responds to support

204
00:09:00,180 --> 00:09:03,839
your security uh drift detection

205
00:09:03,839 --> 00:09:05,459
it also helps to improve the security

206
00:09:05,459 --> 00:09:07,620
adherence among the engineers and

207
00:09:07,620 --> 00:09:09,600
adoption because now

208
00:09:09,600 --> 00:09:11,459
because security

209
00:09:11,459 --> 00:09:13,440
from the starting from the starting of

210
00:09:13,440 --> 00:09:15,360
the as you'll see uh people will not be

211
00:09:15,360 --> 00:09:17,040
get stopped you know when their release

212
00:09:17,040 --> 00:09:19,200
is going live and when you are involved

213
00:09:19,200 --> 00:09:20,940
with security team and everyone is like

214
00:09:20,940 --> 00:09:22,800
oh we never know that it is going to

215
00:09:22,800 --> 00:09:25,019
happen and now it is building a timeline

216
00:09:25,019 --> 00:09:27,839
so it obviously bring create that kind

217
00:09:27,839 --> 00:09:30,660
of mindset among the English that yes

218
00:09:30,660 --> 00:09:32,339
Security will be from the starting we

219
00:09:32,339 --> 00:09:34,200
have to keep something related to

220
00:09:34,200 --> 00:09:36,480
Security in our mind and adhere to that

221
00:09:36,480 --> 00:09:39,540
or it increases the adoptions among the

222
00:09:39,540 --> 00:09:41,820
engineers

223
00:09:41,820 --> 00:09:43,980
this brings to Middle code which says

224
00:09:43,980 --> 00:09:45,779
that security should not be treated as

225
00:09:45,779 --> 00:09:47,880
enough at all it should be brought as

226
00:09:47,880 --> 00:09:50,820
close to your source to to the engineers

227
00:09:50,820 --> 00:09:54,060
as early as in the SGD cycle and when we

228
00:09:54,060 --> 00:09:55,560
bring as as I said when we bring

229
00:09:55,560 --> 00:09:57,300
something close to a source in this

230
00:09:57,300 --> 00:09:59,459
context we're bringing security close to

231
00:09:59,459 --> 00:10:01,440
our source that means we call it shift

232
00:10:01,440 --> 00:10:03,720
lab security

233
00:10:03,720 --> 00:10:06,180
now uh when we when we were studying

234
00:10:06,180 --> 00:10:08,160
about bit wise when we see the slide of

235
00:10:08,160 --> 00:10:09,959
bitcoise electric operator and I said

236
00:10:09,959 --> 00:10:12,420
that we bring when you bring something

237
00:10:12,420 --> 00:10:15,300
close to the store something uh when you

238
00:10:15,300 --> 00:10:17,580
apply a bit wise left field operator

239
00:10:17,580 --> 00:10:19,440
that is Delta quantity become very huge

240
00:10:19,440 --> 00:10:23,040
now bringing that meaning into the

241
00:10:23,040 --> 00:10:25,440
security so when you bring security

242
00:10:25,440 --> 00:10:27,839
close to the source from this current

243
00:10:27,839 --> 00:10:31,440
you can actually see your overall uh

244
00:10:31,440 --> 00:10:33,720
cost of your product security it

245
00:10:33,720 --> 00:10:35,399
drastically decreases and the

246
00:10:35,399 --> 00:10:38,339
effectiveness of your complete flow

247
00:10:38,339 --> 00:10:41,940
increases so when you bring security or

248
00:10:41,940 --> 00:10:43,740
closure source that is when you do a

249
00:10:43,740 --> 00:10:48,600
shift lab what it does it increases the

250
00:10:48,600 --> 00:10:51,600
effectiveness of the complete flow and

251
00:10:51,600 --> 00:10:54,980
it decreases the cost of security

252
00:10:54,980 --> 00:10:58,380
so as you move away from the source

253
00:10:58,380 --> 00:11:00,420
the cost of security or cost of your

254
00:11:00,420 --> 00:11:02,820
product actually increase the rapidly so

255
00:11:02,820 --> 00:11:06,300
this is what uh the main outcome of

256
00:11:06,300 --> 00:11:09,839
bringing shift lab into your uh as the

257
00:11:09,839 --> 00:11:12,060
cycle or into the culture of your

258
00:11:12,060 --> 00:11:14,300
company

259
00:11:15,300 --> 00:11:18,360
now we talk about we have we have seen

260
00:11:18,360 --> 00:11:20,459
what a shift left uh why we are doing

261
00:11:20,459 --> 00:11:22,620
this but how to do this the main

262
00:11:22,620 --> 00:11:25,019
question is this how we can make sure

263
00:11:25,019 --> 00:11:28,380
that each and every bug which might

264
00:11:28,380 --> 00:11:32,420
occur in the earlier Cycles are getting

265
00:11:32,420 --> 00:11:36,540
uh you know found out by a security team

266
00:11:36,540 --> 00:11:39,120
or bioengineers

267
00:11:39,120 --> 00:11:41,820
in order to do this wealth the most

268
00:11:41,820 --> 00:11:43,200
logical part

269
00:11:43,200 --> 00:11:46,260
which can be checked are the source code

270
00:11:46,260 --> 00:11:48,420
here we will be talking about how to

271
00:11:48,420 --> 00:11:52,140
achieve shiplap during your uh release

272
00:11:52,140 --> 00:11:55,860
in uh in your cicd Pipelines

273
00:11:55,860 --> 00:11:57,540
we will be seeing how to integrate

274
00:11:57,540 --> 00:11:59,940
security into cicd papers if you are

275
00:11:59,940 --> 00:12:03,060
over AWS and using AWS code pipeline

276
00:12:03,060 --> 00:12:06,180
now series of questions here the first

277
00:12:06,180 --> 00:12:07,620
question how we are going to achieve

278
00:12:07,620 --> 00:12:08,279
this

279
00:12:08,279 --> 00:12:11,579
how we are how can we make sure that

280
00:12:11,579 --> 00:12:14,220
every release which is going to the

281
00:12:14,220 --> 00:12:17,160
production have an actual or proper

282
00:12:17,160 --> 00:12:19,320
security sign up how can we make sure

283
00:12:19,320 --> 00:12:22,079
that each and every piece of code that

284
00:12:22,079 --> 00:12:22,980
is being

285
00:12:22,980 --> 00:12:25,440
that is being written by your bio

286
00:12:25,440 --> 00:12:27,779
ingenious or developer are getting

287
00:12:27,779 --> 00:12:30,000
scanned from security perspective and

288
00:12:30,000 --> 00:12:32,220
not just from Dash not from a

289
00:12:32,220 --> 00:12:33,480
perspective of dynamic application

290
00:12:33,480 --> 00:12:35,100
security testing but also from source

291
00:12:35,100 --> 00:12:36,720
code review

292
00:12:36,720 --> 00:12:38,880
and not just from your source code to be

293
00:12:38,880 --> 00:12:40,920
but also from flexible security test

294
00:12:40,920 --> 00:12:41,760
cases

295
00:12:41,760 --> 00:12:44,160
we will be seeing how we can achieve

296
00:12:44,160 --> 00:12:47,700
that uh if your organization is using

297
00:12:47,700 --> 00:12:53,240
cicd pipelines and using AWS code.net

298
00:12:53,360 --> 00:12:58,760
uh a simple components of a AWS

299
00:12:58,760 --> 00:13:02,820
AWS simply as a continuous delivery

300
00:13:02,820 --> 00:13:05,519
service for your code that you can use

301
00:13:05,519 --> 00:13:07,680
to model or visualize or automate

302
00:13:07,680 --> 00:13:10,320
various steps that are involved in the

303
00:13:10,320 --> 00:13:12,600
release of softwares there are major

304
00:13:12,600 --> 00:13:14,880
three component in AWS code python eight

305
00:13:14,880 --> 00:13:17,220
of the support commit code build and

306
00:13:17,220 --> 00:13:20,220
code deploy code Commodities uh there's

307
00:13:20,220 --> 00:13:22,740
a managed Source con Source control uh

308
00:13:22,740 --> 00:13:24,540
code capacity service just like you have

309
00:13:24,540 --> 00:13:27,779
GitHub you are Bitcoin code bill is

310
00:13:27,779 --> 00:13:30,000
actually the main component here it's a

311
00:13:30,000 --> 00:13:31,800
fully managed continuous integration

312
00:13:31,800 --> 00:13:34,200
service let's compile your source code

313
00:13:34,200 --> 00:13:38,880
runs test and produce a software package

314
00:13:38,880 --> 00:13:41,279
that are ready to do the call

315
00:13:41,279 --> 00:13:43,920
so uh code depends the name suggests it

316
00:13:43,920 --> 00:13:45,540
is a deployment service that automated

317
00:13:45,540 --> 00:13:47,940
delivery uh not the delivery but

318
00:13:47,940 --> 00:13:51,060
automated deployment of your final

319
00:13:51,060 --> 00:13:53,220
product or future to a variety of

320
00:13:53,220 --> 00:13:56,519
Computing Services it can be your Amazon

321
00:13:56,519 --> 00:14:00,000
ec2 Target Lambda or even your

322
00:14:00,000 --> 00:14:02,820
on-premises servers

323
00:14:02,820 --> 00:14:05,459
now this is simple architecture of UW

324
00:14:05,459 --> 00:14:09,300
sport pipeline uh when you use AWS code

325
00:14:09,300 --> 00:14:11,760
pipeline as a as you see ICD step

326
00:14:11,760 --> 00:14:14,639
developer Pusha code uh there's a web

327
00:14:14,639 --> 00:14:16,079
hook I will be talking about what is the

328
00:14:16,079 --> 00:14:18,839
web hook with trigger scope app and it

329
00:14:18,839 --> 00:14:20,700
will score proper intern check out your

330
00:14:20,700 --> 00:14:23,040
source code which has been changed or

331
00:14:23,040 --> 00:14:27,000
modified it runs stress build and uh

332
00:14:27,000 --> 00:14:28,500
prepare the package which is a little

333
00:14:28,500 --> 00:14:32,480
bit deployed using AWS deploy

334
00:14:32,480 --> 00:14:36,000
now in the earliest like Bruce I said

335
00:14:36,000 --> 00:14:38,519
that we have is uh I will be talking

336
00:14:38,519 --> 00:14:40,620
about I will specifically emphasizing of

337
00:14:40,620 --> 00:14:43,440
what is this Web book now this web is

338
00:14:43,440 --> 00:14:46,260
the actual heart of this continuous code

339
00:14:46,260 --> 00:14:49,320
hacking uh which we are seeing here uh

340
00:14:49,320 --> 00:14:52,320
what this web web does is that because

341
00:14:52,320 --> 00:14:55,399
of this webwork by using the guitar web

342
00:14:55,399 --> 00:14:59,100
AWS code pipe band comes to know that if

343
00:14:59,100 --> 00:15:01,800
there's any changes changes made to your

344
00:15:01,800 --> 00:15:04,800
code repositories as soon as it learns

345
00:15:04,800 --> 00:15:07,260
that there's some change push in the

346
00:15:07,260 --> 00:15:10,079
code repository are they some PR raised

347
00:15:10,079 --> 00:15:13,139
by your developer it automatically runs

348
00:15:13,139 --> 00:15:14,519
your code pipeline

349
00:15:14,519 --> 00:15:17,040
so the the heart of this complete

350
00:15:17,040 --> 00:15:20,760
architecture R2 one is greater value and

351
00:15:20,760 --> 00:15:22,260
four build that I will be talking about

352
00:15:22,260 --> 00:15:23,160
next

353
00:15:23,160 --> 00:15:25,740
so whenever uh any developer or an

354
00:15:25,740 --> 00:15:28,320
engineer raise any PR or make any change

355
00:15:28,320 --> 00:15:31,860
or often any specific branch in your

356
00:15:31,860 --> 00:15:33,959
code repository it triggers the code

357
00:15:33,959 --> 00:15:36,380
pipeline which turns returns your

358
00:15:36,380 --> 00:15:39,980
subject every time

359
00:15:40,860 --> 00:15:44,880
now it was code built as I said uh code

360
00:15:44,880 --> 00:15:47,040
build is another major component of your

361
00:15:47,040 --> 00:15:50,699
AWS code pipeline it is what is AWS code

362
00:15:50,699 --> 00:15:54,779
build are you talk about how how it

363
00:15:54,779 --> 00:15:58,139
brings how it impacts your complete code

364
00:15:58,139 --> 00:16:00,720
weapon it basically have different

365
00:16:00,720 --> 00:16:04,680
stages where you can uh write your tests

366
00:16:04,680 --> 00:16:07,560
and you can run it during uh during your

367
00:16:07,560 --> 00:16:10,079
doing the cicd pattern instead of

368
00:16:10,079 --> 00:16:12,120
waiting security at the end of the

369
00:16:12,120 --> 00:16:13,740
development cycle now you can include

370
00:16:13,740 --> 00:16:16,320
those Security checks income in in the

371
00:16:16,320 --> 00:16:18,420
form of this builds or when I say build

372
00:16:18,420 --> 00:16:19,980
it basically in the form of this build

373
00:16:19,980 --> 00:16:22,079
security steps you can write those steps

374
00:16:22,079 --> 00:16:24,180
uh you can write a manual test you're

375
00:16:24,180 --> 00:16:26,459
going to write send it checks within

376
00:16:26,459 --> 00:16:30,839
your AWS uh or within your cicd in the

377
00:16:30,839 --> 00:16:33,000
form of AWS build

378
00:16:33,000 --> 00:16:36,420
now this it was built uh consists of

379
00:16:36,420 --> 00:16:40,380
your build stack uh so the each gold bit

380
00:16:40,380 --> 00:16:42,000
project consists of your build

381
00:16:42,000 --> 00:16:45,540
specification it is a respect file which

382
00:16:45,540 --> 00:16:48,120
is a collection of various commands and

383
00:16:48,120 --> 00:16:50,880
very setting in a yaml format this is

384
00:16:50,880 --> 00:16:53,040
the this is the actual file where you

385
00:16:53,040 --> 00:16:55,500
define your commands where you define

386
00:16:55,500 --> 00:16:58,620
the scripts that needs to be done away

387
00:16:58,620 --> 00:17:01,259
you define the test that you are running

388
00:17:01,259 --> 00:17:04,740
on your on your code repository or on

389
00:17:04,740 --> 00:17:06,720
the changes that come that you have made

390
00:17:06,720 --> 00:17:08,699
to actually perform those Security

391
00:17:08,699 --> 00:17:10,439
checks

392
00:17:10,439 --> 00:17:13,199
here is a very simple example of a code

393
00:17:13,199 --> 00:17:16,199
code build spec file uh here is the

394
00:17:16,199 --> 00:17:18,119
Builder file of a good secret which is

395
00:17:18,119 --> 00:17:21,540
basically it scans for you your your

396
00:17:21,540 --> 00:17:24,660
secrets embedded or hard coded in into

397
00:17:24,660 --> 00:17:27,359
code repository so whenever any P any

398
00:17:27,359 --> 00:17:29,220
developer any integeration if you are

399
00:17:29,220 --> 00:17:32,400
cold because of web hook code pept and

400
00:17:32,400 --> 00:17:35,340
uh started running and it runs this code

401
00:17:35,340 --> 00:17:37,020
but I will be talking about how this

402
00:17:37,020 --> 00:17:40,200
colbit is is conducted as I talk about 4

403
00:17:40,200 --> 00:17:42,660
bit consists of three steps pre-built

404
00:17:42,660 --> 00:17:44,760
build and post build video build is

405
00:17:44,760 --> 00:17:46,440
basically where you set up all your

406
00:17:46,440 --> 00:17:48,000
dependencies you download your

407
00:17:48,000 --> 00:17:50,340
dependencies you pull your scanners and

408
00:17:50,340 --> 00:17:52,500
then there is a build stage where you

409
00:17:52,500 --> 00:17:53,940
run your scanners where you actually

410
00:17:53,940 --> 00:17:57,660
pass your results and then last state of

411
00:17:57,660 --> 00:18:00,059
your cold build spec file is post print

412
00:18:00,059 --> 00:18:03,120
where you call your Lambda or you you

413
00:18:03,120 --> 00:18:05,520
basically consume those results you can

414
00:18:05,520 --> 00:18:08,820
push those results to your slack to to

415
00:18:08,820 --> 00:18:11,160
mail uh post build distance where you

416
00:18:11,160 --> 00:18:13,620
consume those security results security

417
00:18:13,620 --> 00:18:16,080
outcomes here you can see in the

418
00:18:16,080 --> 00:18:17,940
pre-built steps what I did I have

419
00:18:17,940 --> 00:18:21,000
downloaded or I have I'm installing grid

420
00:18:21,000 --> 00:18:23,100
Secrets I am downloading all those

421
00:18:23,100 --> 00:18:24,900
scanner putting dependencies and setting

422
00:18:24,900 --> 00:18:29,520
up uh those uh two uh in the pre-built

423
00:18:29,520 --> 00:18:33,120
steps see I have written P3 installed

424
00:18:33,120 --> 00:18:35,640
here are here I'm using turfler for

425
00:18:35,640 --> 00:18:38,220
great security scanning then build stage

426
00:18:38,220 --> 00:18:41,520
where you actually run your tool or you

427
00:18:41,520 --> 00:18:44,039
run your security checks and finally

428
00:18:44,039 --> 00:18:47,039
post it when you consume the citizens so

429
00:18:47,039 --> 00:18:49,860
this is how this how a cold code build

430
00:18:49,860 --> 00:18:51,900
spec file looks like a very simple file

431
00:18:51,900 --> 00:18:54,059
consists of three three faces three

432
00:18:54,059 --> 00:18:59,720
stages variable uh build and post build

433
00:19:00,539 --> 00:19:03,660
now this Con this complete continuous

434
00:19:03,660 --> 00:19:06,299
code hacking capabilities has numerous

435
00:19:06,299 --> 00:19:09,179
capabilities it depends on you how much

436
00:19:09,179 --> 00:19:11,400
you can you want to utilize this you can

437
00:19:11,400 --> 00:19:13,440
use it for your scanning your source

438
00:19:13,440 --> 00:19:15,299
code vulnerabilities you can use this to

439
00:19:15,299 --> 00:19:17,220
perform Dash Dynamic application

440
00:19:17,220 --> 00:19:20,820
security testing you can use it to scan

441
00:19:20,820 --> 00:19:23,880
your dependent dependencies which uh you

442
00:19:23,880 --> 00:19:26,100
are using in a code repository for any

443
00:19:26,100 --> 00:19:28,679
unknown or known vulnerabilities for any

444
00:19:28,679 --> 00:19:33,539
uh you know any old version that you are

445
00:19:33,539 --> 00:19:36,860
using that that is out of out of uh

446
00:19:36,860 --> 00:19:38,880
development and that has some security

447
00:19:38,880 --> 00:19:40,860
potential security issues you can even

448
00:19:40,860 --> 00:19:43,620
detect Secret in your PR uh and you can

449
00:19:43,620 --> 00:19:46,980
even add your own capabilities the most

450
00:19:46,980 --> 00:19:50,340
uh the most bright part of this complete

451
00:19:50,340 --> 00:19:54,900
framework is that it is uh it is you it

452
00:19:54,900 --> 00:19:57,120
is customizable you can use your

453
00:19:57,120 --> 00:19:58,679
customized check you can build your

454
00:19:58,679 --> 00:20:01,380
custom Matrix you can try have your own

455
00:20:01,380 --> 00:20:03,600
code you write your own checks for

456
00:20:03,600 --> 00:20:05,280
example I have written a Docker file

457
00:20:05,280 --> 00:20:08,640
internet test where it it linked my

458
00:20:08,640 --> 00:20:11,340
Docker file if any developer engineer

459
00:20:11,340 --> 00:20:14,520
has changed some uh or it is a PR which

460
00:20:14,520 --> 00:20:16,020
contain change in Docker file it

461
00:20:16,020 --> 00:20:18,000
actually checks whether the docker file

462
00:20:18,000 --> 00:20:20,340
is approved or security standard or not

463
00:20:20,340 --> 00:20:23,460
you can build other checks also for

464
00:20:23,460 --> 00:20:25,380
example I build a check which is called

465
00:20:25,380 --> 00:20:27,780
check battery sub base images so it

466
00:20:27,780 --> 00:20:30,360
checks a proper file and checks whether

467
00:20:30,360 --> 00:20:33,419
that Docker file is using uh using the

468
00:20:33,419 --> 00:20:35,460
base image which is a secure base image

469
00:20:35,460 --> 00:20:38,400
or it is a bytext based image for from

470
00:20:38,400 --> 00:20:40,260
my organization I don't want my engineer

471
00:20:40,260 --> 00:20:42,059
to use a third-party page image which

472
00:20:42,059 --> 00:20:43,620
contain malware and getting Department

473
00:20:43,620 --> 00:20:45,419
production environment so you can build

474
00:20:45,419 --> 00:20:47,940
your own checks uh using this complete

475
00:20:47,940 --> 00:20:49,679
code hacking capability

476
00:20:49,679 --> 00:20:51,960
now this is how the complete framework

477
00:20:51,960 --> 00:20:53,580
looks like uh these are the happy

478
00:20:53,580 --> 00:20:55,740
developed by setting uh writing the code

479
00:20:55,740 --> 00:20:59,100
uh or I'm pushing it to GitHub or bit

480
00:20:59,100 --> 00:21:00,780
pocket whatever code capacity that you

481
00:21:00,780 --> 00:21:02,220
are using

482
00:21:02,220 --> 00:21:05,340
uh because of webbook code pipeline

483
00:21:05,340 --> 00:21:06,960
comes to know that there is some changes

484
00:21:06,960 --> 00:21:08,700
uh developer has made in any of the

485
00:21:08,700 --> 00:21:10,919
products originally any of the file a

486
00:21:10,919 --> 00:21:12,840
project of GitHub of your Port

487
00:21:12,840 --> 00:21:15,539
repository and tell us the complete code

488
00:21:15,539 --> 00:21:19,320
web contest code built code built now

489
00:21:19,320 --> 00:21:21,840
you have written various tests here Dash

490
00:21:21,840 --> 00:21:23,940
security scanning dockerlinter or

491
00:21:23,940 --> 00:21:26,160
dependencies can as many tests that you

492
00:21:26,160 --> 00:21:28,140
have written now they are they will run

493
00:21:28,140 --> 00:21:28,919
here

494
00:21:28,919 --> 00:21:32,039
then uh the next component in this

495
00:21:32,039 --> 00:21:34,679
complete framework is slammed uh after

496
00:21:34,679 --> 00:21:38,640
this tester runs it I invokes Lambda and

497
00:21:38,640 --> 00:21:42,059
push those and pass those result pass

498
00:21:42,059 --> 00:21:44,580
through security outcome from those code

499
00:21:44,580 --> 00:21:48,299
build steps and uh send out the alerts

500
00:21:48,299 --> 00:21:51,059
over mail using SNS service or it also

501
00:21:51,059 --> 00:21:53,700
push out those results to your AWS

502
00:21:53,700 --> 00:21:55,679
security Hub or to slack or to whatever

503
00:21:55,679 --> 00:21:57,360
means a channel Communication channel

504
00:21:57,360 --> 00:21:59,100
that you want to make your developer

505
00:21:59,100 --> 00:22:01,799
engineer where that your code repository

506
00:22:01,799 --> 00:22:02,880
has contained some security

507
00:22:02,880 --> 00:22:06,559
vulnerabilities that you need to fix

508
00:22:06,960 --> 00:22:09,600
here uh it's a screenshot of a secret

509
00:22:09,600 --> 00:22:12,600
scanning so it is a output of an old

510
00:22:12,600 --> 00:22:15,600
build step so when we see here the when

511
00:22:15,600 --> 00:22:17,280
when we talk about Colbert you can write

512
00:22:17,280 --> 00:22:20,520
multiple stages here multiple text so

513
00:22:20,520 --> 00:22:22,740
here is the outcome of your code build

514
00:22:22,740 --> 00:22:24,720
where you have written a callback spec

515
00:22:24,720 --> 00:22:27,000
for a secret scanning so it tells you

516
00:22:27,000 --> 00:22:30,179
you can even you know uh you can even

517
00:22:30,179 --> 00:22:33,480
blur those uh those uh you know good

518
00:22:33,480 --> 00:22:35,640
Secrets because you don't want your gets

519
00:22:35,640 --> 00:22:38,700
to be lying to be lying in plain text in

520
00:22:38,700 --> 00:22:41,159
your locks you can even uh make them

521
00:22:41,159 --> 00:22:44,460
blurred or uh you know not visible to

522
00:22:44,460 --> 00:22:46,159
your developers

523
00:22:46,159 --> 00:22:49,200
here is uh our conversion dependency

524
00:22:49,200 --> 00:22:51,539
scanner for depending scanner you can

525
00:22:51,539 --> 00:22:54,900
use open source OS deficiency scanner uh

526
00:22:54,900 --> 00:22:57,960
and uh you can scan your code for the

527
00:22:57,960 --> 00:23:00,720
multiple dependencies uh in security

528
00:23:00,720 --> 00:23:02,220
dependencies that you have in report

529
00:23:02,220 --> 00:23:03,659
project

530
00:23:03,659 --> 00:23:07,980
dockerlinter you can use Docker lint uh

531
00:23:07,980 --> 00:23:11,880
to link your to link your Docker file

532
00:23:11,880 --> 00:23:14,159
and find out if that Docker file

533
00:23:14,159 --> 00:23:15,780
contains some stuff which are not

534
00:23:15,780 --> 00:23:18,419
adhering to best security practices the

535
00:23:18,419 --> 00:23:19,679
output will look like something like

536
00:23:19,679 --> 00:23:22,559
this for example you can see uh some uh

537
00:23:22,559 --> 00:23:24,240
in in this particular Docker file which

538
00:23:24,240 --> 00:23:26,039
our developer has changed it doesn't

539
00:23:26,039 --> 00:23:29,280
contain a tag so it is saying uh it is

540
00:23:29,280 --> 00:23:31,559
saying that you mentioned the tag or you

541
00:23:31,559 --> 00:23:34,200
should measure the version which which

542
00:23:34,200 --> 00:23:35,760
version of Docker image that you are

543
00:23:35,760 --> 00:23:37,440
using

544
00:23:37,440 --> 00:23:40,380
uh here is the static code scanning

545
00:23:40,380 --> 00:23:43,080
result uh here I useful not Cloud for

546
00:23:43,080 --> 00:23:45,840
Source scanning and this is how the the

547
00:23:45,840 --> 00:23:47,820
output looks like

548
00:23:47,820 --> 00:23:50,640
here is the task scanning result I use

549
00:23:50,640 --> 00:23:53,820
om sap for performance and task scanning

550
00:23:53,820 --> 00:23:56,460
of of the of the final feature which is

551
00:23:56,460 --> 00:23:58,559
being pushed to the stadium environment

552
00:23:58,559 --> 00:24:00,900
or maybe uh whatever environment that

553
00:24:00,900 --> 00:24:02,880
you have and you can see the kind of

554
00:24:02,880 --> 00:24:05,640
vulnerabilities it detects it uh for

555
00:24:05,640 --> 00:24:07,080
some particular release it's saying that

556
00:24:07,080 --> 00:24:10,200
it has found processed skipping

557
00:24:10,200 --> 00:24:13,140
now this this code hack capabilities had

558
00:24:13,140 --> 00:24:16,140
multiple uh you know multiple Advantage

559
00:24:16,140 --> 00:24:19,080
uh multiple features we have seen that

560
00:24:19,080 --> 00:24:20,700
number of checks Security check that you

561
00:24:20,700 --> 00:24:22,140
couldn't integrate that you can actually

562
00:24:22,140 --> 00:24:23,760
write or you can use some standard

563
00:24:23,760 --> 00:24:25,380
checks you can use some standard open

564
00:24:25,380 --> 00:24:27,240
source tools and you can write your own

565
00:24:27,240 --> 00:24:29,100
uh tool

566
00:24:29,100 --> 00:24:31,620
or you can write your own checks apart

567
00:24:31,620 --> 00:24:34,679
from that uh it provides a very

568
00:24:34,679 --> 00:24:38,159
beautiful uh you know feature of sharing

569
00:24:38,159 --> 00:24:40,500
the support you can share this report or

570
00:24:40,500 --> 00:24:42,600
slack or your mailbox or any

571
00:24:42,600 --> 00:24:43,919
communication channel that you want to

572
00:24:43,919 --> 00:24:46,080
uh share with your developers you can

573
00:24:46,080 --> 00:24:48,480
even alert your engineers about the

574
00:24:48,480 --> 00:24:51,000
build your build has failed because your

575
00:24:51,000 --> 00:24:52,440
build contains and security loopholes

576
00:24:52,440 --> 00:24:54,179
that needs to be fixed before you are

577
00:24:54,179 --> 00:24:56,880
going to uh go to the product on the

578
00:24:56,880 --> 00:24:58,200
products environment

579
00:24:58,200 --> 00:25:02,220
and finally the the main uh which the

580
00:25:02,220 --> 00:25:04,380
you know the most liked part that I like

581
00:25:04,380 --> 00:25:06,720
vulnerability management you don't need

582
00:25:06,720 --> 00:25:09,539
to look for vulnerability management uh

583
00:25:09,539 --> 00:25:13,980
for uh for any food outside your native

584
00:25:13,980 --> 00:25:16,380
Services you don't need to pull some or

585
00:25:16,380 --> 00:25:19,200
buy some tool or you know buy some third

586
00:25:19,200 --> 00:25:21,360
party tool or deploy it or install it

587
00:25:21,360 --> 00:25:23,940
you can use AWS security hub for

588
00:25:23,940 --> 00:25:25,740
vulnerability management here whatever

589
00:25:25,740 --> 00:25:28,559
findings that I've that that all the

590
00:25:28,559 --> 00:25:30,600
checks has find it is actually being

591
00:25:30,600 --> 00:25:32,279
pushed to vulnerability management

592
00:25:32,279 --> 00:25:35,039
system or using AWS security Hub so here

593
00:25:35,039 --> 00:25:37,980
I am using AWS security hub for managing

594
00:25:37,980 --> 00:25:40,080
my all the vulnerabilities at a single

595
00:25:40,080 --> 00:25:43,380
place I told I'm I don't want to take a

596
00:25:43,380 --> 00:25:45,659
headache of uh using a third party tool

597
00:25:45,659 --> 00:25:47,640
or using a non-native Cloud native

598
00:25:47,640 --> 00:25:50,279
service I'm using all the AWS military

599
00:25:50,279 --> 00:25:52,440
services here but I'm for the

600
00:25:52,440 --> 00:25:54,120
vulnerability management you can use it

601
00:25:54,120 --> 00:25:55,620
to security Hub you can push your

602
00:25:55,620 --> 00:25:57,299
digital to UW security or you can track

603
00:25:57,299 --> 00:26:01,260
them you can uh ad labels add text you

604
00:26:01,260 --> 00:26:03,779
can add civil severity and practice to

605
00:26:03,779 --> 00:26:06,900
uh them also

606
00:26:06,900 --> 00:26:08,760
this is how uh reporting over selection

607
00:26:08,760 --> 00:26:10,860
looks like this is unformatted you can

608
00:26:10,860 --> 00:26:12,539
as I said this is completely in your

609
00:26:12,539 --> 00:26:15,419
hand this is a modular and customizable

610
00:26:15,419 --> 00:26:18,720
you can customize as as what you want uh

611
00:26:18,720 --> 00:26:21,419
so this is how uh you know report our

612
00:26:21,419 --> 00:26:23,220
Channel look like when you used to not

613
00:26:23,220 --> 00:26:25,260
uh Cloud Orson or cube for security

614
00:26:25,260 --> 00:26:27,179
scanning so it's got a scan

615
00:26:27,179 --> 00:26:29,700
uh this is our build status over mailbox

616
00:26:29,700 --> 00:26:31,980
you can alert your engineers that you

617
00:26:31,980 --> 00:26:33,779
build as fair and as I said this is

618
00:26:33,779 --> 00:26:36,419
uncomfortable you can format it and you

619
00:26:36,419 --> 00:26:38,340
can just give the information which is

620
00:26:38,340 --> 00:26:39,960
necessary for your developers to take

621
00:26:39,960 --> 00:26:41,159
action on

622
00:26:41,159 --> 00:26:42,900
and this is uh you know vulnerability

623
00:26:42,900 --> 00:26:44,880
management or Security app you can see

624
00:26:44,880 --> 00:26:47,460
uh all the vulnerabilities and all the

625
00:26:47,460 --> 00:26:49,919
one buddies that have been found my by

626
00:26:49,919 --> 00:26:51,960
this framework by all the checks that

627
00:26:51,960 --> 00:26:54,059
I've written Colby is now opposed to AWS

628
00:26:54,059 --> 00:26:57,720
security up with uh with all the you

629
00:26:57,720 --> 00:26:59,340
know necessary information what is the

630
00:26:59,340 --> 00:27:01,860
severity of this what is the title which

631
00:27:01,860 --> 00:27:03,779
uh you know

632
00:27:03,779 --> 00:27:06,240
what is the priority of this and where

633
00:27:06,240 --> 00:27:09,600
it has actually occurred so you can use

634
00:27:09,600 --> 00:27:11,100
Universal Security how you can leave

635
00:27:11,100 --> 00:27:14,340
this security AWS Security app for uh

636
00:27:14,340 --> 00:27:16,919
for management automatable security for

637
00:27:16,919 --> 00:27:18,539
management of your security only when

638
00:27:18,539 --> 00:27:20,400
you purchase at a single place you can

639
00:27:20,400 --> 00:27:22,440
manage them you can track them you can

640
00:27:22,440 --> 00:27:25,380
uh you know track them for your closer

641
00:27:25,380 --> 00:27:28,260
and you can even share this dashboard or

642
00:27:28,260 --> 00:27:32,400
create uh rules for Universe uh users to

643
00:27:32,400 --> 00:27:34,980
see uh or to track those vulnerabilities

644
00:27:34,980 --> 00:27:36,740
from here

645
00:27:36,740 --> 00:27:38,880
benefits I've been talking about

646
00:27:38,880 --> 00:27:40,799
different benefits just a summary of it

647
00:27:40,799 --> 00:27:43,140
it's a real time as serum as you want

648
00:27:43,140 --> 00:27:46,919
because of uh because of a book at real

649
00:27:46,919 --> 00:27:49,200
time when uh AWS code partner learns

650
00:27:49,200 --> 00:27:51,720
that they send some changes being made

651
00:27:51,720 --> 00:27:53,760
it regressively to the school department

652
00:27:53,760 --> 00:27:55,260
because all the checks that you've

653
00:27:55,260 --> 00:27:57,720
written but reporting this is what

654
00:27:57,720 --> 00:27:59,760
management wants you this award

655
00:27:59,760 --> 00:28:01,679
management looks out for uh all the

656
00:28:01,679 --> 00:28:03,419
results and the status you can

657
00:28:03,419 --> 00:28:05,279
communicate and share this around around

658
00:28:05,279 --> 00:28:06,960
across different Communication channel

659
00:28:06,960 --> 00:28:09,840
whether it is slack uh mailboxes or

660
00:28:09,840 --> 00:28:11,820
whatever that you are using

661
00:28:11,820 --> 00:28:14,220
it is highly flexible highly modular I

662
00:28:14,220 --> 00:28:16,559
said you all these checks are in the

663
00:28:16,559 --> 00:28:18,000
form of modules so they are

664
00:28:18,000 --> 00:28:20,760
interdependent they are non-dependent to

665
00:28:20,760 --> 00:28:22,620
each other you can write as many as

666
00:28:22,620 --> 00:28:23,820
Security checks that you want in the

667
00:28:23,820 --> 00:28:25,980
cover module you can just remove them if

668
00:28:25,980 --> 00:28:27,360
you don't want it you can include them

669
00:28:27,360 --> 00:28:29,159
if you want it it is completely

670
00:28:29,159 --> 00:28:31,740
automatic or automated so automation is

671
00:28:31,740 --> 00:28:33,360
a real key you don't need to do anything

672
00:28:33,360 --> 00:28:35,460
manual your creator of complete

673
00:28:35,460 --> 00:28:37,020
framework and all the things is

674
00:28:37,020 --> 00:28:39,059
happening automatically

675
00:28:39,059 --> 00:28:40,679
vulnerability management all the

676
00:28:40,679 --> 00:28:42,240
vulnerabilities are being managed at a

677
00:28:42,240 --> 00:28:44,039
single place you don't need to run here

678
00:28:44,039 --> 00:28:45,659
and there you don't need to run around

679
00:28:45,659 --> 00:28:47,580
you don't need to look for any third

680
00:28:47,580 --> 00:28:49,799
party tool jira or any other tool for

681
00:28:49,799 --> 00:28:53,100
managing one abilities you can uh manage

682
00:28:53,100 --> 00:28:54,840
all those Security One buildings is

683
00:28:54,840 --> 00:28:55,860
being found

684
00:28:55,860 --> 00:28:59,279
uh during your uh during the release

685
00:28:59,279 --> 00:29:03,539
through uh at a single pace which is aw

686
00:29:03,539 --> 00:29:06,000
security hub

687
00:29:06,000 --> 00:29:08,340
uh a short drama of this I have already

688
00:29:08,340 --> 00:29:10,380
recorded a demo for in the interest of

689
00:29:10,380 --> 00:29:12,860
time and also uh I have a very bad

690
00:29:12,860 --> 00:29:15,960
history with live demo uh so I've

691
00:29:15,960 --> 00:29:18,179
already recorded this let me show you a

692
00:29:18,179 --> 00:29:20,960
quick memo

693
00:29:25,320 --> 00:29:30,740
let me uh full spin this

694
00:29:31,679 --> 00:29:33,480
see

695
00:29:33,480 --> 00:29:36,899
here uh this is my code pattern which is

696
00:29:36,899 --> 00:29:39,899
depth of course some one developer has

697
00:29:39,899 --> 00:29:42,179
pushed some change in in support

698
00:29:42,179 --> 00:29:44,640
reference in the code repository and

699
00:29:44,640 --> 00:29:48,059
because of uh because of AWS uh sorry

700
00:29:48,059 --> 00:29:50,880
because of web hook this character you

701
00:29:50,880 --> 00:29:53,340
can see in progress now in turn it will

702
00:29:53,340 --> 00:29:55,679
run all the security steps that I have

703
00:29:55,679 --> 00:29:58,880
written in the form of code build

704
00:29:59,220 --> 00:30:02,580
so here are those all the security tests

705
00:30:02,580 --> 00:30:05,340
or security uh the checks I've written

706
00:30:05,340 --> 00:30:06,659
in the form of creatable sport build

707
00:30:06,659 --> 00:30:09,539
dependency scans assess scan does a scan

708
00:30:09,539 --> 00:30:12,779
like this so all this run parallel uh

709
00:30:12,779 --> 00:30:16,080
it's not like that to you once one build

710
00:30:16,080 --> 00:30:19,980
steps is uh done then and and another

711
00:30:19,980 --> 00:30:22,140
build step will run so all these are

712
00:30:22,140 --> 00:30:24,840
running parallel that is it is fast and

713
00:30:24,840 --> 00:30:29,480
it is uh as fast as as you can think

714
00:30:29,580 --> 00:30:33,000
so in order to see the output of any

715
00:30:33,000 --> 00:30:35,039
code build or any Security check that

716
00:30:35,039 --> 00:30:37,580
you've written you will just click on

717
00:30:37,580 --> 00:30:40,980
the AWS AWS

718
00:30:40,980 --> 00:30:43,320
code build here and you can see the

719
00:30:43,320 --> 00:30:45,720
output here you can go to a build run

720
00:30:45,720 --> 00:30:48,840
and here is the output of that security

721
00:30:48,840 --> 00:30:51,059
check so here it is a check of security

722
00:30:51,059 --> 00:30:54,000
uh Docker link you can see the kind of

723
00:30:54,000 --> 00:30:56,520
security unless that it has it has found

724
00:30:56,520 --> 00:30:59,940
out uh that you using latest is prone to

725
00:30:59,940 --> 00:31:02,460
error some the developer is using a

726
00:31:02,460 --> 00:31:03,960
Docker file which is containing a base

727
00:31:03,960 --> 00:31:07,860
image and which is uh we don't have any

728
00:31:07,860 --> 00:31:09,840
kind of version it is using a latest tag

729
00:31:09,840 --> 00:31:11,580
so it is saying that you use a version

730
00:31:11,580 --> 00:31:15,360
to do to explicitly tell us that which

731
00:31:15,360 --> 00:31:17,039
version of Docker image that you are

732
00:31:17,039 --> 00:31:19,220
using

733
00:31:19,860 --> 00:31:22,500
similarly you can

734
00:31:22,500 --> 00:31:25,960
check the other output

735
00:31:25,960 --> 00:31:29,039
[Music]

736
00:31:29,100 --> 00:31:32,100
here is the output of your source code

737
00:31:32,100 --> 00:31:35,880
vulnerability uh for that by views sonar

738
00:31:35,880 --> 00:31:38,480
sonar View

739
00:31:41,640 --> 00:31:45,659
and you can even uh

740
00:31:45,659 --> 00:31:48,360
you know here is the dependency scanning

741
00:31:48,360 --> 00:31:50,520
uh what all the businesses dependencies

742
00:31:50,520 --> 00:31:52,080
that you have in your code repository

743
00:31:52,080 --> 00:31:55,260
for which I use a website

744
00:31:55,260 --> 00:31:58,320
so all this all this code steps runs

745
00:31:58,320 --> 00:32:00,960
parallely when any changes have been

746
00:32:00,960 --> 00:32:03,480
made to your code repository all the

747
00:32:03,480 --> 00:32:06,000
code build itself will run parallely you

748
00:32:06,000 --> 00:32:07,740
do and all of this are modular all of

749
00:32:07,740 --> 00:32:09,779
this automated all the output will come

750
00:32:09,779 --> 00:32:12,720
here you can even format it in a

751
00:32:12,720 --> 00:32:15,539
you can even you can format it in your

752
00:32:15,539 --> 00:32:20,220
own uh way uh you can even uh you know

753
00:32:20,220 --> 00:32:21,840
truncate some information that you don't

754
00:32:21,840 --> 00:32:24,659
want to lock and you can consume those

755
00:32:24,659 --> 00:32:27,059
results in a in the way that you want to

756
00:32:27,059 --> 00:32:29,100
be that you want to consume share those

757
00:32:29,100 --> 00:32:31,200
results we change with your ingenious

758
00:32:31,200 --> 00:32:34,140
over different communication channels

759
00:32:34,140 --> 00:32:37,440
so this is about uh this short talk

760
00:32:37,440 --> 00:32:40,320
about how you can uh streamline security

761
00:32:40,320 --> 00:32:42,539
with shift lift uh using Cloud approach

762
00:32:42,539 --> 00:32:45,299
if you are over AWS are using AWS code

763
00:32:45,299 --> 00:32:46,340
pipeline

764
00:32:46,340 --> 00:32:50,159
uh it sum UPS might uh talk and thanks

765
00:32:50,159 --> 00:32:51,659
for listening uh if you have any

766
00:32:51,659 --> 00:32:52,919
question you can reach out to my Twitter

767
00:32:52,919 --> 00:32:54,539
handle that you found underscore when

768
00:32:54,539 --> 00:32:57,740
you can uh check out my profile at

769
00:32:57,740 --> 00:33:00,440
logicbox.in and you can even make your

770
00:33:00,440 --> 00:33:03,840
uh queries or if you want to be in touch

771
00:33:03,840 --> 00:33:05,760
in general you can uh reach out to me at

772
00:33:05,760 --> 00:33:08,399
gmail.com

773
00:33:08,399 --> 00:33:11,940
thanks for uh being listening uh and I'm

774
00:33:11,940 --> 00:33:15,419
also here for a while to take up your uh

775
00:33:15,419 --> 00:33:19,100
any question that you have thanks

776
00:33:21,480 --> 00:33:24,320
help the planet

