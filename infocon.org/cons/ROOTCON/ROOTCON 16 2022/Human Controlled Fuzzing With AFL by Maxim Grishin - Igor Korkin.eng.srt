1
00:00:02,340 --> 00:00:04,080
hi everyone

2
00:00:04,080 --> 00:00:06,899
thank you for invitation

3
00:00:06,899 --> 00:00:11,400
I feel nice to present my work today

4
00:00:11,400 --> 00:00:14,460
I'm going to tell you about one of the

5
00:00:14,460 --> 00:00:17,640
possible ways to decide problem of

6
00:00:17,640 --> 00:00:19,320
identical code

7
00:00:19,320 --> 00:00:23,699
section analysis with ifo

8
00:00:23,699 --> 00:00:27,060
I hope that my results will be useful

9
00:00:27,060 --> 00:00:31,679
for other cyber Security Experts

10
00:00:31,679 --> 00:00:35,100
my name is Maxim and I'm a student at

11
00:00:35,100 --> 00:00:38,160
National research nuclear University

12
00:00:38,160 --> 00:00:42,420
this work was done as my virtual basis

13
00:00:42,420 --> 00:00:46,860
in collaboration with my supervisor

14
00:00:46,860 --> 00:00:50,520
this independent security researcher and

15
00:00:50,520 --> 00:00:53,219
it has been exploring cooperating system

16
00:00:53,219 --> 00:00:57,600
security for more than 10 years and

17
00:00:57,600 --> 00:01:00,059
today and I'm going to tell you about

18
00:01:00,059 --> 00:01:04,920
fuzzing and some famous types of fuzzles

19
00:01:04,920 --> 00:01:08,280
I will think of main fighting strategy

20
00:01:08,280 --> 00:01:10,979
we should be implemented to provide good

21
00:01:10,979 --> 00:01:13,320
fighting results

22
00:01:13,320 --> 00:01:16,860
then I will consider a classificing

23
00:01:16,860 --> 00:01:20,280
scheme based on a file

24
00:01:20,280 --> 00:01:22,320
in the next step

25
00:01:22,320 --> 00:01:24,180
I will show you

26
00:01:24,180 --> 00:01:27,420
how to decide identical code analysis

27
00:01:27,420 --> 00:01:29,220
program

28
00:01:29,220 --> 00:01:31,740
due to propose 2.

29
00:01:31,740 --> 00:01:35,880
finally you will be able to watch test

30
00:01:35,880 --> 00:01:38,820
results of the tool and at the end of my

31
00:01:38,820 --> 00:01:39,960
presentation

32
00:01:39,960 --> 00:01:43,439
I will say some words about future plans

33
00:01:43,439 --> 00:01:47,059
of virtual development

34
00:01:47,280 --> 00:01:50,579
fuzzle is a popular method of program

35
00:01:50,579 --> 00:01:52,020
analysis

36
00:01:52,020 --> 00:01:54,899
it's a technique of automated testing

37
00:01:54,899 --> 00:01:57,780
when a program receives specially

38
00:01:57,780 --> 00:02:01,799
modified and incorrect data which can

39
00:02:01,799 --> 00:02:05,159
lead to its emergency state or undefined

40
00:02:05,159 --> 00:02:06,360
Behavior

41
00:02:06,360 --> 00:02:09,538
of course with the help of fighting it

42
00:02:09,538 --> 00:02:12,540
is possible to identify a large number

43
00:02:12,540 --> 00:02:15,480
of bugs and at least a large number of

44
00:02:15,480 --> 00:02:18,480
vulnerabilities

45
00:02:19,080 --> 00:02:22,500
problems that implement the fighting

46
00:02:22,500 --> 00:02:26,280
process are called fuzzles

47
00:02:26,280 --> 00:02:29,640
there are different types of fuzzles

48
00:02:29,640 --> 00:02:31,140
for example

49
00:02:31,140 --> 00:02:34,920
visors associated with network

50
00:02:34,920 --> 00:02:39,000
the operating system kernel there was

51
00:02:39,000 --> 00:02:43,140
web applications and local application

52
00:02:43,140 --> 00:02:44,580
software

53
00:02:44,580 --> 00:02:48,060
this classification depends on a Zone

54
00:02:48,060 --> 00:02:49,680
goal

55
00:02:49,680 --> 00:02:52,200
if it is needed to know input data

56
00:02:52,200 --> 00:02:55,920
format then it is white box faster

57
00:02:55,920 --> 00:02:57,959
on the other hand

58
00:02:57,959 --> 00:03:00,959
Black Box fuzzles allow us to fast

59
00:03:00,959 --> 00:03:06,200
programs without input type information

60
00:03:06,239 --> 00:03:09,300
the fighting strategy includes the

61
00:03:09,300 --> 00:03:11,519
following main stages

62
00:03:11,519 --> 00:03:13,200
first

63
00:03:13,200 --> 00:03:16,560
aesthetical analysis and determination

64
00:03:16,560 --> 00:03:19,200
of the attack surface

65
00:03:19,200 --> 00:03:22,440
then selection of the primary purpose

66
00:03:22,440 --> 00:03:25,319
that contains the input data which

67
00:03:25,319 --> 00:03:29,780
provides the greatest code coverage

68
00:03:30,360 --> 00:03:33,120
reducing the size of the queue so the

69
00:03:33,120 --> 00:03:35,400
coverage doesn't change

70
00:03:35,400 --> 00:03:39,180
a standardizing cycle execution and

71
00:03:39,180 --> 00:03:40,220
finally

72
00:03:40,220 --> 00:03:43,920
analysis of identifying the box and

73
00:03:43,920 --> 00:03:46,200
Crush analysis

74
00:03:46,200 --> 00:03:51,540
let's say if you was about AFL

75
00:03:51,540 --> 00:03:54,540
this is American visible

76
00:03:54,540 --> 00:03:57,780
one of the most popular forces

77
00:03:57,780 --> 00:03:59,459
with its help

78
00:03:59,459 --> 00:04:02,159
a large number of vulnerabilities were

79
00:04:02,159 --> 00:04:04,080
discovered

80
00:04:04,080 --> 00:04:08,159
according to classification AFL refers

81
00:04:08,159 --> 00:04:10,500
to white box

82
00:04:10,500 --> 00:04:13,739
service based and feedback driving

83
00:04:13,739 --> 00:04:15,720
classes

84
00:04:15,720 --> 00:04:19,019
this means that to analyze the program

85
00:04:19,019 --> 00:04:21,000
code using AFL

86
00:04:21,000 --> 00:04:22,380
it's

87
00:04:22,380 --> 00:04:26,759
source code and information about input

88
00:04:26,759 --> 00:04:29,699
type are required

89
00:04:29,699 --> 00:04:32,699
this is especially important for

90
00:04:32,699 --> 00:04:35,100
fighting with a dictionary

91
00:04:35,100 --> 00:04:36,600
however

92
00:04:36,600 --> 00:04:41,840
we didn't use a dictionary in our work

93
00:04:42,120 --> 00:04:43,620
let's look

94
00:04:43,620 --> 00:04:46,380
at such a simple model when the fuzzer

95
00:04:46,380 --> 00:04:49,139
starts a standard cycle

96
00:04:49,139 --> 00:04:52,560
the Pfizer extracts an element from the

97
00:04:52,560 --> 00:04:55,699
queue and mutates it

98
00:04:55,699 --> 00:05:00,380
checking the execution basis

99
00:05:00,660 --> 00:05:03,000
execution Trace

100
00:05:03,000 --> 00:05:06,300
is a sequence of basic program blocks

101
00:05:06,300 --> 00:05:10,919
which have been visited due to a certain

102
00:05:10,919 --> 00:05:13,560
set of input data

103
00:05:13,560 --> 00:05:16,620
this is implemented using Edge

104
00:05:16,620 --> 00:05:18,360
instrumentation

105
00:05:18,360 --> 00:05:21,360
this means that when moving from one

106
00:05:21,360 --> 00:05:24,300
basic box to another

107
00:05:24,300 --> 00:05:28,020
and order it where a b of Base blocks

108
00:05:28,020 --> 00:05:32,719
called the couple is detected

109
00:05:33,000 --> 00:05:36,660
it often happens when a father spends a

110
00:05:36,660 --> 00:05:39,660
lot of time analyzing identical section

111
00:05:39,660 --> 00:05:43,080
of code result increasing coverage and

112
00:05:43,080 --> 00:05:47,060
without finding new bugs

113
00:05:49,080 --> 00:05:51,539
at the same time

114
00:05:51,539 --> 00:05:54,120
most of the code

115
00:05:54,120 --> 00:05:56,880
may not be investigated

116
00:05:56,880 --> 00:06:00,120
this is unacceptable

117
00:06:00,120 --> 00:06:01,800
especially

118
00:06:01,800 --> 00:06:04,740
when the fuzzing process is quite long

119
00:06:04,740 --> 00:06:07,919
and can sometimes last a day

120
00:06:07,919 --> 00:06:11,280
recall this problem as identical

121
00:06:11,280 --> 00:06:15,059
cross-section analysis

122
00:06:15,660 --> 00:06:20,520
this slide shows a simplified diagram of

123
00:06:20,520 --> 00:06:23,639
the proposed fuzzing system

124
00:06:23,639 --> 00:06:26,880
it differs from the classical AFL scheme

125
00:06:26,880 --> 00:06:27,900
by the

126
00:06:27,900 --> 00:06:31,560
presence of a module that allows a

127
00:06:31,560 --> 00:06:34,319
person to manage the fuzzing process of

128
00:06:34,319 --> 00:06:37,319
ifo during the process itself

129
00:06:37,319 --> 00:06:40,319
the difference lies in the user common

130
00:06:40,319 --> 00:06:43,199
interface for interaction with the

131
00:06:43,199 --> 00:06:44,639
module

132
00:06:44,639 --> 00:06:48,300
next let's look at the process in more

133
00:06:48,300 --> 00:06:50,220
detail

134
00:06:50,220 --> 00:06:52,680
I assuming there are uncommon from the

135
00:06:52,680 --> 00:06:54,000
user

136
00:06:54,000 --> 00:06:57,960
first by sense control signals to the

137
00:06:57,960 --> 00:06:59,039
father

138
00:06:59,039 --> 00:07:03,120
starting the AFL Force process with

139
00:07:03,120 --> 00:07:06,240
certain parameters and I put table

140
00:07:06,240 --> 00:07:08,460
update time

141
00:07:08,460 --> 00:07:10,560
during this time

142
00:07:10,560 --> 00:07:14,819
the father performs a standard cycle it

143
00:07:14,819 --> 00:07:17,780
is the next element from the queue

144
00:07:17,780 --> 00:07:22,680
mutates it as the program responds

145
00:07:22,680 --> 00:07:26,699
updates the queue and displays a status

146
00:07:26,699 --> 00:07:29,039
window for the expert

147
00:07:29,039 --> 00:07:30,960
at the same time

148
00:07:30,960 --> 00:07:34,560
especially instrumented has new bits

149
00:07:34,560 --> 00:07:38,060
function write statuses

150
00:07:38,060 --> 00:07:42,539
when report Table update time is over

151
00:07:42,539 --> 00:07:46,860
first file stop the councils and it's

152
00:07:46,860 --> 00:07:49,639
the traces and

153
00:07:49,639 --> 00:07:53,880
determines such characteristics as

154
00:07:53,880 --> 00:07:56,460
College predicted

155
00:07:56,460 --> 00:07:59,960
the results are represented in the form

156
00:07:59,960 --> 00:08:03,360
of the tripod table

157
00:08:03,360 --> 00:08:05,300
the operator

158
00:08:05,300 --> 00:08:08,220
analyzes the data in the report Table

159
00:08:08,220 --> 00:08:09,900
and

160
00:08:09,900 --> 00:08:13,620
sends a common to resume the process or

161
00:08:13,620 --> 00:08:15,900
redirect the flow

162
00:08:15,900 --> 00:08:19,139
we can reject the execution execution

163
00:08:19,139 --> 00:08:24,139
flow by selecting the operator

164
00:08:24,139 --> 00:08:27,300
analyzes the data in the airport table

165
00:08:27,300 --> 00:08:28,500
and

166
00:08:28,500 --> 00:08:32,099
sends a common to resume the process or

167
00:08:32,099 --> 00:08:34,919
redirect the flow

168
00:08:34,919 --> 00:08:37,740
we can redirect the execution Flow by

169
00:08:37,740 --> 00:08:40,440
selecting an element from the candidate

170
00:08:40,440 --> 00:08:43,500
list in the airport table

171
00:08:43,500 --> 00:08:47,880
the candidate list was defined by the

172
00:08:47,880 --> 00:08:50,839
module at the previous stage

173
00:08:50,839 --> 00:08:53,880
these are key elements that have not

174
00:08:53,880 --> 00:08:56,459
been tested yet or have comparative

175
00:08:56,459 --> 00:08:59,459
better characteristics

176
00:08:59,459 --> 00:09:02,700
as they can potentially increase at the

177
00:09:02,700 --> 00:09:04,519
same time

178
00:09:04,519 --> 00:09:09,600
unexplored elements have a high priority

179
00:09:09,600 --> 00:09:11,940
as they can potentially increase

180
00:09:11,940 --> 00:09:14,040
coverage

181
00:09:14,040 --> 00:09:16,640
having selected an element from the list

182
00:09:16,640 --> 00:09:18,839
the operative

183
00:09:18,839 --> 00:09:22,320
the operator having a selected an

184
00:09:22,320 --> 00:09:26,519
element from the list the operator sends

185
00:09:26,519 --> 00:09:30,180
a common to the module

186
00:09:30,180 --> 00:09:35,180
which modifies the PO order and makes

187
00:09:35,180 --> 00:09:37,920
appropriate changes for the other

188
00:09:37,920 --> 00:09:40,200
service variables to allow it to

189
00:09:40,200 --> 00:09:41,519
conflict

190
00:09:41,519 --> 00:09:42,839
finally

191
00:09:42,839 --> 00:09:47,399
file with traces is cleared the AFL

192
00:09:47,399 --> 00:09:50,600
Force process has used then the cycle

193
00:09:50,600 --> 00:09:53,640
repeats again

194
00:09:53,640 --> 00:09:55,140
now

195
00:09:55,140 --> 00:09:58,500
I want to show how to detect days

196
00:09:58,500 --> 00:10:01,080
and the instrumentation stage a random

197
00:10:01,080 --> 00:10:04,560
integer is generated in each base block

198
00:10:04,560 --> 00:10:06,420
of the program called the base block

199
00:10:06,420 --> 00:10:07,920
label

200
00:10:07,920 --> 00:10:10,140
when moving from one base block to

201
00:10:10,140 --> 00:10:11,040
another

202
00:10:11,040 --> 00:10:15,540
the label of the direct Bible is formed

203
00:10:15,540 --> 00:10:18,420
by applying the Excel operation and

204
00:10:18,420 --> 00:10:19,920
direct shift

205
00:10:19,920 --> 00:10:23,459
airflow uses a special array in which

206
00:10:23,459 --> 00:10:27,019
one label corresponds to the address

207
00:10:27,019 --> 00:10:32,600
label of the title that in-depth tag

208
00:10:33,000 --> 00:10:36,660
to detect The Taste we instrumented the

209
00:10:36,660 --> 00:10:38,700
housing bits function

210
00:10:38,700 --> 00:10:42,300
which updates the Terrace beats array

211
00:10:42,300 --> 00:10:46,099
at each iteration

212
00:10:52,800 --> 00:10:56,579
after AFL process start the user

213
00:10:56,579 --> 00:10:59,519
receives status window and the report

214
00:10:59,519 --> 00:11:00,980
Table

215
00:11:00,980 --> 00:11:02,540
expats

216
00:11:02,540 --> 00:11:05,339
interacts with the module with the

217
00:11:05,339 --> 00:11:08,279
command line interface

218
00:11:08,279 --> 00:11:11,339
the mind field of the table

219
00:11:11,339 --> 00:11:13,940
is

220
00:11:14,760 --> 00:11:16,920
the value of this variable

221
00:11:16,920 --> 00:11:20,519
is defined as the ratio of the new unit

222
00:11:20,519 --> 00:11:24,000
couples number to the number of ions on

223
00:11:24,000 --> 00:11:26,040
the current element

224
00:11:26,040 --> 00:11:31,320
this is called coverage adaptivity

225
00:11:31,320 --> 00:11:34,680
the module was checked using the chief

226
00:11:34,680 --> 00:11:36,839
Library utilities

227
00:11:36,839 --> 00:11:39,360
which are designed to work with Steve

228
00:11:39,360 --> 00:11:41,339
files

229
00:11:41,339 --> 00:11:44,160
it's known that many utilities of this

230
00:11:44,160 --> 00:11:46,140
Library contain a large number of

231
00:11:46,140 --> 00:11:48,959
vulnerabilities

232
00:11:48,959 --> 00:11:52,140
therefore this library is quite suitable

233
00:11:52,140 --> 00:11:55,019
for testing the module and comparing it

234
00:11:55,019 --> 00:11:58,800
with other afl-like facets

235
00:11:58,800 --> 00:12:01,560
FL and F are fast

236
00:12:01,560 --> 00:12:05,880
were chosen as such fuzzles the fuzzing

237
00:12:05,880 --> 00:12:07,560
time is 12

238
00:12:07,560 --> 00:12:08,880
hours

239
00:12:08,880 --> 00:12:10,500
this not enough

240
00:12:10,500 --> 00:12:12,600
to have quality

241
00:12:12,600 --> 00:12:16,980
program python but it is quite enough to

242
00:12:16,980 --> 00:12:18,480
test the module

243
00:12:18,480 --> 00:12:21,360
as the utilities have already been

244
00:12:21,360 --> 00:12:24,540
tasted by the Developers

245
00:12:24,540 --> 00:12:28,800
the report Table update time

246
00:12:28,800 --> 00:12:32,399
the input table update time is

247
00:12:32,399 --> 00:12:34,140
30 minutes

248
00:12:34,140 --> 00:12:37,200
the fighting results are shown on this

249
00:12:37,200 --> 00:12:38,279
slide

250
00:12:38,279 --> 00:12:42,480
for each utility and each father the

251
00:12:42,480 --> 00:12:45,899
total number of unique curses and total

252
00:12:45,899 --> 00:12:49,860
coverage are determined

253
00:12:49,860 --> 00:12:52,920
analyzing the results of the graph we

254
00:12:52,920 --> 00:12:54,480
can conclude

255
00:12:54,480 --> 00:12:56,880
that the purpose fuzzing system in the

256
00:12:56,880 --> 00:13:00,180
most cases finds crashes faster than

257
00:13:00,180 --> 00:13:03,019
other visors

258
00:13:03,540 --> 00:13:06,660
in future we plan to consider the team

259
00:13:06,660 --> 00:13:09,120
of using the purpose solution with

260
00:13:09,120 --> 00:13:12,360
static analyzers by adding a

261
00:13:12,360 --> 00:13:14,399
visualization model

262
00:13:14,399 --> 00:13:16,519
this will

263
00:13:16,519 --> 00:13:19,920
significantly reduce the search space as

264
00:13:19,920 --> 00:13:23,100
well as improve the interactivity of the

265
00:13:23,100 --> 00:13:24,480
visual process

266
00:13:24,480 --> 00:13:27,000
we don't exclude the using of machine

267
00:13:27,000 --> 00:13:29,459
learning elements

268
00:13:29,459 --> 00:13:32,639
as well as adaptation of the approach

269
00:13:32,639 --> 00:13:34,680
for all devices

270
00:13:34,680 --> 00:13:37,940
we also starve to make the deployment

271
00:13:37,940 --> 00:13:42,360
procedure simple for different platforms

272
00:13:42,360 --> 00:13:46,459
thank you for your attention

