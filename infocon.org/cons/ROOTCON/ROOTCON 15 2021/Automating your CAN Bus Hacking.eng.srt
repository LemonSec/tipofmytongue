1
00:00:02,080 --> 00:00:03,840
welcome to the car hacking village of

2
00:00:03,840 --> 00:00:05,520
rutgon

3
00:00:05,520 --> 00:00:07,040
this is jay turla and we'll be

4
00:00:07,040 --> 00:00:08,320
discussing

5
00:00:08,320 --> 00:00:11,679
automating your can bus hacking

6
00:00:11,679 --> 00:00:13,360
first of all who am i

7
00:00:13,360 --> 00:00:16,320
i am j turla

8
00:00:17,359 --> 00:00:20,160
i'm currently working as a principal

9
00:00:20,160 --> 00:00:22,400
security consultant in viking cloud

10
00:00:22,400 --> 00:00:24,880
and i'm a root can goon and cfp review

11
00:00:24,880 --> 00:00:27,199
board i've been in

12
00:00:27,199 --> 00:00:30,400
an international speaker for conferences

13
00:00:30,400 --> 00:00:33,920
like defcon vidcon root con sen khan

14
00:00:33,920 --> 00:00:37,360
knock on besides myanmar dragoncon

15
00:00:37,360 --> 00:00:40,640
in hong kong and other conferences

16
00:00:40,640 --> 00:00:43,040
i'm also one of the admins for the ad

17
00:00:43,040 --> 00:00:44,719
vulcan team

18
00:00:44,719 --> 00:00:46,079
we place

19
00:00:46,079 --> 00:00:47,760
as finalists

20
00:00:47,760 --> 00:00:49,280
for the hackath

21
00:00:49,280 --> 00:00:51,360
last 2020.

22
00:00:51,360 --> 00:00:52,559
it's a

23
00:00:52,559 --> 00:00:55,760
space security challenge for the u.s air

24
00:00:55,760 --> 00:00:59,440
and space force

25
00:00:59,440 --> 00:01:00,239
so

26
00:01:00,239 --> 00:01:02,559
as a disclaimer i am not really a python

27
00:01:02,559 --> 00:01:05,119
expert and i do not claim to be one i

28
00:01:05,119 --> 00:01:07,600
just use it for my proof of concept for

29
00:01:07,600 --> 00:01:09,360
my hacks or

30
00:01:09,360 --> 00:01:11,280
vulnerabilities that i found

31
00:01:11,280 --> 00:01:13,200
my basic knowledge for it becomes useful

32
00:01:13,200 --> 00:01:15,280
when develop debugging or fixing

33
00:01:15,280 --> 00:01:18,479
available exploits in the interwebs um

34
00:01:18,479 --> 00:01:20,080
the good thing about it is that it

35
00:01:20,080 --> 00:01:22,320
allows me to fuzz

36
00:01:22,320 --> 00:01:24,080
because the network and web penetration

37
00:01:24,080 --> 00:01:26,799
testing buzzing is important and then

38
00:01:26,799 --> 00:01:28,479
there's a lot of modules that i can

39
00:01:28,479 --> 00:01:32,159
leverage for my automation and scripting

40
00:01:32,159 --> 00:01:32,960
so

41
00:01:32,960 --> 00:01:34,799
because we are talking about can bus

42
00:01:34,799 --> 00:01:36,240
hacking

43
00:01:36,240 --> 00:01:38,799
we need to understand that computers

44
00:01:38,799 --> 00:01:42,240
cars or computers too so

45
00:01:42,240 --> 00:01:45,360
examples of this are the telematics you

46
00:01:45,360 --> 00:01:47,280
have the advanced features

47
00:01:47,280 --> 00:01:48,960
the infotainment and entertainment

48
00:01:48,960 --> 00:01:52,000
systems you have the safety controls

49
00:01:52,000 --> 00:01:54,240
the emissions the cruise control the

50
00:01:54,240 --> 00:01:56,960
unsettled brake system or the abs then

51
00:01:56,960 --> 00:01:58,719
you have the airbags

52
00:01:58,719 --> 00:02:00,640
um the instrument clusters and panels

53
00:02:00,640 --> 00:02:02,399
and the ecu's

54
00:02:02,399 --> 00:02:04,799
as what you can see from the picture

55
00:02:04,799 --> 00:02:07,040
you can see from your screen

56
00:02:07,040 --> 00:02:08,959
these are actually some

57
00:02:08,959 --> 00:02:10,560
tell uh

58
00:02:10,560 --> 00:02:12,239
some devices

59
00:02:12,239 --> 00:02:14,239
that are actually computers so you can

60
00:02:14,239 --> 00:02:15,840
see that

61
00:02:15,840 --> 00:02:17,840
we have infotainment system and we have

62
00:02:17,840 --> 00:02:19,840
a couple of ecu's and some instrument

63
00:02:19,840 --> 00:02:20,959
clusters

64
00:02:20,959 --> 00:02:23,040
and actually if you try to interact with

65
00:02:23,040 --> 00:02:25,599
them and try to use the uh

66
00:02:25,599 --> 00:02:27,680
canvas tools or sniffers you can

67
00:02:27,680 --> 00:02:28,879
actually see

68
00:02:28,879 --> 00:02:31,519
canvas traffic from that

69
00:02:31,519 --> 00:02:34,560
so what is canon ecu canon is the

70
00:02:34,560 --> 00:02:37,200
controller area network for your car

71
00:02:37,200 --> 00:02:39,040
it's like the nervous system of the car

72
00:02:39,040 --> 00:02:42,879
and is connected via canvas ecu on

73
00:02:42,879 --> 00:02:45,280
on the other hand is the electronic

74
00:02:45,280 --> 00:02:46,879
control unit

75
00:02:46,879 --> 00:02:48,840
they are a set of

76
00:02:48,840 --> 00:02:51,200
microprocessors and that the can bus

77
00:02:51,200 --> 00:02:52,239
protocol

78
00:02:52,239 --> 00:02:54,239
allows the ecs to communicate to each

79
00:02:54,239 --> 00:02:55,120
other

80
00:02:55,120 --> 00:02:58,159
a modern car can actually have like 50

81
00:02:58,159 --> 00:02:59,760
plus ecu's

82
00:02:59,760 --> 00:03:03,360
backup tesla has like 100 plus ecu's

83
00:03:03,360 --> 00:03:05,440
sample ecu's are the airbags the

84
00:03:05,440 --> 00:03:09,360
infotainment system etc so

85
00:03:09,360 --> 00:03:11,360
dr ken tendal from

86
00:03:11,360 --> 00:03:13,920
the canis automotive labs he is the cto

87
00:03:13,920 --> 00:03:15,040
over there

88
00:03:15,040 --> 00:03:17,280
he said that the canvas is a protocol

89
00:03:17,280 --> 00:03:19,680
used in hundreds of millions of devices

90
00:03:19,680 --> 00:03:21,360
including cars

91
00:03:21,360 --> 00:03:22,720
trucks

92
00:03:22,720 --> 00:03:23,760
buses

93
00:03:23,760 --> 00:03:25,519
construction machines

94
00:03:25,519 --> 00:03:28,560
ships tractors and spacecraft there is

95
00:03:28,560 --> 00:03:32,959
even a can bus or orbiting mars

96
00:03:32,959 --> 00:03:35,920
right so this is a sample of the cam

97
00:03:35,920 --> 00:03:38,959
frame and if you want to head on to the

98
00:03:38,959 --> 00:03:41,599
wikipedia that i've sent that's actually

99
00:03:41,599 --> 00:03:44,560
the reference so you can see that in a

100
00:03:44,560 --> 00:03:48,319
can bus or in a cam frame of the can bus

101
00:03:48,319 --> 00:03:50,000
you have the data

102
00:03:50,000 --> 00:03:52,080
and then you have the can high and the

103
00:03:52,080 --> 00:03:54,720
can low and you have the arbitration id

104
00:03:54,720 --> 00:03:57,200
and the data i'll discuss more on that

105
00:03:57,200 --> 00:03:59,519
later on

106
00:03:59,519 --> 00:04:02,239
these are my favorite can sniffers and

107
00:04:02,239 --> 00:04:03,280
tools

108
00:04:03,280 --> 00:04:05,519
you have the nano can which is a five

109
00:04:05,519 --> 00:04:06,799
dollar

110
00:04:06,799 --> 00:04:08,879
can sniffer

111
00:04:08,879 --> 00:04:10,480
you just need a

112
00:04:10,480 --> 00:04:13,280
arduino nano and an mcp

113
00:04:13,280 --> 00:04:15,280
2515

114
00:04:15,280 --> 00:04:17,120
and then you can already solder it and

115
00:04:17,120 --> 00:04:19,839
then you have a five dollar can hacking

116
00:04:19,839 --> 00:04:22,079
tool or can stiffer

117
00:04:22,079 --> 00:04:24,800
then you have the can contact which is

118
00:04:24,800 --> 00:04:29,040
one of my first can snippers and then um

119
00:04:29,040 --> 00:04:31,600
stm32 can sniffer by techmaker these

120
00:04:31,600 --> 00:04:34,560
were uh this was given to me

121
00:04:34,560 --> 00:04:37,600
by my friends from techmaker and it's a

122
00:04:37,600 --> 00:04:39,840
very good can sniffer then you have the

123
00:04:39,840 --> 00:04:41,919
value can four from inter pen control

124
00:04:41,919 --> 00:04:46,560
systems which i bought during verbal

125
00:04:47,520 --> 00:04:50,639
this is also one of the most exceptional

126
00:04:50,639 --> 00:04:52,320
hardware that i have

127
00:04:52,320 --> 00:04:55,280
it's a fully featured computer

128
00:04:55,280 --> 00:04:57,199
in fact a linux computer that plugs

129
00:04:57,199 --> 00:04:58,960
directly into your car

130
00:04:58,960 --> 00:04:59,759
so

131
00:04:59,759 --> 00:05:01,520
it's

132
00:05:01,520 --> 00:05:03,120
on beaglebone

133
00:05:03,120 --> 00:05:06,000
and then it's also wireless via usb

134
00:05:06,000 --> 00:05:08,160
socket and then there are two interfaces

135
00:05:08,160 --> 00:05:11,280
for it there's two can

136
00:05:11,280 --> 00:05:13,520
one uh no i mean there are not two

137
00:05:13,520 --> 00:05:16,560
interfaces but there are interfaces for

138
00:05:16,560 --> 00:05:20,400
two can uh one sw can j1 850 you have

139
00:05:20,400 --> 00:05:24,000
the lin and the iso 9141

140
00:05:24,000 --> 00:05:29,199
and it costs 169 dollars only

141
00:05:29,840 --> 00:05:31,199
if you want to

142
00:05:31,199 --> 00:05:33,919
jump into car hacking here are some of

143
00:05:33,919 --> 00:05:36,840
the tools that you can use

144
00:05:36,840 --> 00:05:39,600
and the awesome vehicle security from

145
00:05:39,600 --> 00:05:41,759
jared decoder contains libraries

146
00:05:41,759 --> 00:05:44,960
tutorials and some resources to start

147
00:05:44,960 --> 00:05:47,599
car hacking

148
00:05:49,360 --> 00:05:51,039
of course if you try to install can

149
00:05:51,039 --> 00:05:54,080
utils which is uh

150
00:05:54,080 --> 00:05:55,600
which allows you to

151
00:05:55,600 --> 00:05:57,680
you know use socket can which is a

152
00:05:57,680 --> 00:05:59,280
driver for linux

153
00:05:59,280 --> 00:06:01,199
uh you have the candom you have the cam

154
00:06:01,199 --> 00:06:04,080
player you have the can sand the kanjin

155
00:06:04,080 --> 00:06:06,560
and the can sniffer these are one of the

156
00:06:06,560 --> 00:06:08,960
tools that you need to jump start

157
00:06:08,960 --> 00:06:10,880
if you want to interact with the with

158
00:06:10,880 --> 00:06:14,960
the can or the socket can for linux

159
00:06:15,039 --> 00:06:15,759
so

160
00:06:15,759 --> 00:06:17,759
what did i do first when i started with

161
00:06:17,759 --> 00:06:20,080
canvas hacking i started with nanakan

162
00:06:20,080 --> 00:06:22,240
plus instrument cluster because it's

163
00:06:22,240 --> 00:06:24,000
easy to do that without harming your

164
00:06:24,000 --> 00:06:25,360
actual car

165
00:06:25,360 --> 00:06:27,919
for an instrument cluster it comes cheap

166
00:06:27,919 --> 00:06:30,080
you can buy an instrument cluster for

167
00:06:30,080 --> 00:06:33,120
like 25 and you can already try to pause

168
00:06:33,120 --> 00:06:35,759
it or try to figure out how you can move

169
00:06:35,759 --> 00:06:37,360
the panels on it

170
00:06:37,360 --> 00:06:40,160
using nano can i was able to fuzz the

171
00:06:40,160 --> 00:06:41,680
instrument cluster

172
00:06:41,680 --> 00:06:43,039
and

173
00:06:43,039 --> 00:06:45,280
you know

174
00:06:45,280 --> 00:06:46,800
do an actual

175
00:06:46,800 --> 00:06:50,160
fuzzing on an actual hardware

176
00:06:50,160 --> 00:06:51,840
so how do you create

177
00:06:51,840 --> 00:06:54,479
your own local scan stiffer or fuzzer so

178
00:06:54,479 --> 00:06:56,160
you just need a nano canvas board from

179
00:06:56,160 --> 00:06:57,199
internet

180
00:06:57,199 --> 00:07:00,800
or you could ask from me so

181
00:07:00,800 --> 00:07:02,160
you just need to solder the two

182
00:07:02,160 --> 00:07:04,400
components which is the arduino nano on

183
00:07:04,400 --> 00:07:05,199
top

184
00:07:05,199 --> 00:07:08,400
and the mcp2515 which is the canvas

185
00:07:08,400 --> 00:07:09,440
module

186
00:07:09,440 --> 00:07:12,880
and more info from the slash internet

187
00:07:12,880 --> 00:07:15,919
and again from github

188
00:07:16,000 --> 00:07:18,800
and of course the additional component

189
00:07:18,800 --> 00:07:20,400
that you could buy

190
00:07:20,400 --> 00:07:22,960
so that you can plug this to your obd2

191
00:07:22,960 --> 00:07:24,960
port uh you just need to solder or

192
00:07:24,960 --> 00:07:28,160
attach the wire so pin six so you can

193
00:07:28,160 --> 00:07:28,960
hide

194
00:07:28,960 --> 00:07:31,440
of the mcp2515

195
00:07:31,440 --> 00:07:33,360
and then the pin to

196
00:07:33,360 --> 00:07:35,120
pin 14

197
00:07:35,120 --> 00:07:39,240
for the can low of mcp2515

198
00:07:39,840 --> 00:07:41,440
and then after

199
00:07:41,440 --> 00:07:45,120
you were already able to

200
00:07:45,120 --> 00:07:45,720
um

201
00:07:45,720 --> 00:07:47,360
[Music]

202
00:07:47,360 --> 00:07:49,440
put all the pieces together

203
00:07:49,440 --> 00:07:51,039
you just need to upload the code using

204
00:07:51,039 --> 00:07:52,560
arduino ide

205
00:07:52,560 --> 00:07:56,000
there's a sample can sniffer by mint net

206
00:07:56,000 --> 00:07:59,280
it's on can receive all and then you i

207
00:07:59,280 --> 00:08:01,599
also made some sketches

208
00:08:01,599 --> 00:08:04,240
uh from root labs car hacking

209
00:08:04,240 --> 00:08:06,879
so that you can try to find some of the

210
00:08:06,879 --> 00:08:09,919
two instrument clusters that i have

211
00:08:09,919 --> 00:08:12,720
one of that is a master ii instrument

212
00:08:12,720 --> 00:08:14,400
cluster and

213
00:08:14,400 --> 00:08:18,719
a pg 208 instrument cluster

214
00:08:21,199 --> 00:08:23,759
now let's talk about automation because

215
00:08:23,759 --> 00:08:25,840
that's our topic right automating your

216
00:08:25,840 --> 00:08:28,638
canvas hacking

217
00:08:29,520 --> 00:08:31,520
all right so first of all

218
00:08:31,520 --> 00:08:33,360
we're gonna use scansend

219
00:08:33,360 --> 00:08:35,440
this is a sample firehose attack that

220
00:08:35,440 --> 00:08:37,360
allows you to dust your car

221
00:08:37,360 --> 00:08:40,240
it may not work on recent cars but in

222
00:08:40,240 --> 00:08:42,240
older cars it should work this is called

223
00:08:42,240 --> 00:08:44,080
a fire hose attack

224
00:08:44,080 --> 00:08:46,160
so usually using bash you get you're

225
00:08:46,160 --> 00:08:47,519
going to send

226
00:08:47,519 --> 00:08:51,279
arbitration id 0 0 0 and 8 bytes of data

227
00:08:51,279 --> 00:08:52,560
with 0

228
00:08:52,560 --> 00:08:56,000
and you can cause a dust for that

229
00:08:56,000 --> 00:08:57,200
now

230
00:08:57,200 --> 00:08:59,680
one of the things that i like as well is

231
00:08:59,680 --> 00:09:01,120
the python can

232
00:09:01,120 --> 00:09:03,200
and there's a good

233
00:09:03,200 --> 00:09:04,720
uh library uh

234
00:09:04,720 --> 00:09:07,680
library documentation about it

235
00:09:07,680 --> 00:09:09,600
here's the sample

236
00:09:09,600 --> 00:09:11,519
code that i made

237
00:09:11,519 --> 00:09:12,399
and

238
00:09:12,399 --> 00:09:14,240
i'm actually sending

239
00:09:14,240 --> 00:09:16,480
on the interface weekend 0 which is the

240
00:09:16,480 --> 00:09:17,760
virtual can

241
00:09:17,760 --> 00:09:19,839
and sending the id

242
00:09:19,839 --> 00:09:21,360
20

243
00:09:21,360 --> 00:09:25,200
and then the data zero times c zero

244
00:09:25,200 --> 00:09:29,600
zero times ff and zero times e and

245
00:09:29,600 --> 00:09:31,600
that's uh when you try to do a can dump

246
00:09:31,600 --> 00:09:34,560
on the virtual can interface

247
00:09:34,560 --> 00:09:36,480
you can see from there that it spells

248
00:09:36,480 --> 00:09:38,080
coffee so

249
00:09:38,080 --> 00:09:40,880
the interface is on virtual can because

250
00:09:40,880 --> 00:09:42,880
we are just testing it

251
00:09:42,880 --> 00:09:46,080
and then we have the arbitration id

252
00:09:46,080 --> 00:09:49,120
which is 14. now you might be wondering

253
00:09:49,120 --> 00:09:50,959
why is it that

254
00:09:50,959 --> 00:09:52,800
uh 20

255
00:09:52,800 --> 00:09:57,120
uh i send arbitration id 20 and then

256
00:09:57,120 --> 00:09:58,160
um

257
00:09:58,160 --> 00:10:00,640
from the uh from the can dom i got 14.

258
00:10:00,640 --> 00:10:02,640
so that 20 is the

259
00:10:02,640 --> 00:10:05,360
decimal so yeah it's converted to hex so

260
00:10:05,360 --> 00:10:07,600
that's why it's 14.

261
00:10:07,600 --> 00:10:08,560
and

262
00:10:08,560 --> 00:10:10,560
if you just write the zero times for

263
00:10:10,560 --> 00:10:14,880
example c0 it will not be converted to

264
00:10:14,880 --> 00:10:18,480
it will not be converted to hex

265
00:10:18,480 --> 00:10:21,200
directly it will just become hex so you

266
00:10:21,200 --> 00:10:24,320
have c0 and from the actual dom you got

267
00:10:24,320 --> 00:10:26,320
the c0 so that's why it's spelled as

268
00:10:26,320 --> 00:10:28,480
coffee

269
00:10:28,480 --> 00:10:32,399
but if you write 0 times 14 on the

270
00:10:32,399 --> 00:10:34,800
arbitration id it will become zero times

271
00:10:34,800 --> 00:10:37,199
fourteen

272
00:10:37,920 --> 00:10:38,800
okay

273
00:10:38,800 --> 00:10:40,160
this is another

274
00:10:40,160 --> 00:10:43,200
way of buzzing by using python socket

275
00:10:43,200 --> 00:10:44,640
asaki uh

276
00:10:44,640 --> 00:10:46,399
python can i mean

277
00:10:46,399 --> 00:10:47,360
so

278
00:10:47,360 --> 00:10:48,959
we're sending

279
00:10:48,959 --> 00:10:51,200
uh a hundred

280
00:10:51,200 --> 00:10:53,360
ken frames using

281
00:10:53,360 --> 00:10:57,600
the hex arbitration id zero times 69 and

282
00:10:57,600 --> 00:11:02,079
then the data two bytes of data lead

283
00:11:02,079 --> 00:11:04,480
so this is a sample of you know just

284
00:11:04,480 --> 00:11:05,839
fuzzing

285
00:11:05,839 --> 00:11:09,040
um 100 cam frames

286
00:11:09,040 --> 00:11:13,040
so we are we are trying to spam the bus

287
00:11:13,040 --> 00:11:16,079
with it you could also iterate a lot of

288
00:11:16,079 --> 00:11:18,959
ranges for this

289
00:11:18,959 --> 00:11:21,519
now uh this is also another one that i

290
00:11:21,519 --> 00:11:24,000
love it's easy to code with this one uh

291
00:11:24,000 --> 00:11:25,600
pybit

292
00:11:25,600 --> 00:11:27,360
the developer for this one is the

293
00:11:27,360 --> 00:11:30,240
developer of cantac

294
00:11:30,240 --> 00:11:31,839
and

295
00:11:31,839 --> 00:11:35,279
this is a sample document sample snippet

296
00:11:35,279 --> 00:11:36,480
or code

297
00:11:36,480 --> 00:11:38,480
using firehose attack so

298
00:11:38,480 --> 00:11:41,920
i'm declaring is uh i'm importing with

299
00:11:41,920 --> 00:11:43,680
and

300
00:11:43,680 --> 00:11:46,399
using weekend 0 which is my interface

301
00:11:46,399 --> 00:11:50,079
and then sending the arbitration id

302
00:11:50,079 --> 00:11:53,200
0 and then

303
00:11:53,200 --> 00:11:56,000
8 bytes of data with 0 and then sending

304
00:11:56,000 --> 00:11:57,920
it

305
00:11:57,920 --> 00:12:00,160
in a loop so

306
00:12:00,160 --> 00:12:01,839
yeah that's the sample of the fire hose

307
00:12:01,839 --> 00:12:04,560
attack again

308
00:12:04,560 --> 00:12:05,920
now

309
00:12:05,920 --> 00:12:08,880
this is a sample of an ecu hard reset it

310
00:12:08,880 --> 00:12:11,200
is a vulnerability if it can be sent via

311
00:12:11,200 --> 00:12:14,800
the dirty side example the obd2

312
00:12:14,800 --> 00:12:17,120
so how do you know if it's successful

313
00:12:17,120 --> 00:12:19,200
the positive reply from the frame should

314
00:12:19,200 --> 00:12:22,079
be zero to five one zero one via the

315
00:12:22,079 --> 00:12:26,000
arbitration id 77a if it's on 7df

316
00:12:26,000 --> 00:12:28,480
arbitration id so that's the standard

317
00:12:28,480 --> 00:12:31,120
for the uds message that i'm sending and

318
00:12:31,120 --> 00:12:32,720
that's what you can see from the frame

319
00:12:32,720 --> 00:12:35,920
data we have zero two

320
00:12:35,920 --> 00:12:37,279
um

321
00:12:37,279 --> 00:12:39,279
0 11 11

322
00:12:39,279 --> 00:12:41,120
11 1

323
00:12:41,120 --> 00:12:42,160
and then

324
00:12:42,160 --> 00:12:44,320
the rest are in zeros so this is a

325
00:12:44,320 --> 00:12:47,279
sample of an ecu hard reset which

326
00:12:47,279 --> 00:12:48,639
performs

327
00:12:48,639 --> 00:12:48,930
uh

328
00:12:48,930 --> 00:12:50,399
[Music]

329
00:12:50,399 --> 00:12:52,480
a hard reset to re-initialize the

330
00:12:52,480 --> 00:12:55,200
hardware core of the system it's pretty

331
00:12:55,200 --> 00:12:56,240
much like

332
00:12:56,240 --> 00:12:59,680
a power reset on the ecu

333
00:12:59,680 --> 00:13:02,240
so yeah as you can see it's very easy to

334
00:13:02,240 --> 00:13:07,360
just write uh this poc using pybit

335
00:13:07,360 --> 00:13:09,839
then there is another one from scappy i

336
00:13:09,839 --> 00:13:11,760
haven't tried this one but i've seen the

337
00:13:11,760 --> 00:13:13,760
documentation and it looks cool as well

338
00:13:13,760 --> 00:13:15,600
so that's why i just you know put this

339
00:13:15,600 --> 00:13:18,320
one on the slide

340
00:13:18,320 --> 00:13:20,399
there are also common enterprise tools

341
00:13:20,399 --> 00:13:21,760
on the block

342
00:13:21,760 --> 00:13:25,200
uh we have the vehicle spy and the canoe

343
00:13:25,200 --> 00:13:27,920
vehicle spy is also a good tool uh it's

344
00:13:27,920 --> 00:13:30,079
scriptable and then you have the canoe

345
00:13:30,079 --> 00:13:32,240
which is uh

346
00:13:32,240 --> 00:13:35,440
probably one of the tools that i see

347
00:13:35,440 --> 00:13:36,720
used by

348
00:13:36,720 --> 00:13:40,320
uh good hackers that i know

349
00:13:40,320 --> 00:13:43,600
power hectors specifically

350
00:13:43,600 --> 00:13:46,399
and then we have the vehicle spy x

351
00:13:46,399 --> 00:13:48,720
it's actually a

352
00:13:48,720 --> 00:13:50,880
uh new

353
00:13:50,880 --> 00:13:53,760
new product from interped uh vehicle spy

354
00:13:53,760 --> 00:13:56,160
x allows you to use any module within

355
00:13:56,160 --> 00:13:58,959
its core via scripting and python which

356
00:13:58,959 --> 00:14:02,240
is cool because you can actually script

357
00:14:02,240 --> 00:14:05,519
using vehicle spy x

358
00:14:05,680 --> 00:14:07,920
uh there's also an easy way to program

359
00:14:07,920 --> 00:14:10,399
value canva in python using raspberry pi

360
00:14:10,399 --> 00:14:12,240
linux

361
00:14:12,240 --> 00:14:14,560
there's a documentation about it this is

362
00:14:14,560 --> 00:14:18,240
the sample snippet and um yeah

363
00:14:18,240 --> 00:14:20,240
so

364
00:14:20,240 --> 00:14:22,399
of course uh vehicle spy is

365
00:14:22,399 --> 00:14:25,839
is in linux is in windows i mean but uh

366
00:14:25,839 --> 00:14:27,839
this is the easy way to you know work

367
00:14:27,839 --> 00:14:29,680
with value can four

368
00:14:29,680 --> 00:14:32,160
in linux

369
00:14:32,160 --> 00:14:34,399
and also i would like to share

370
00:14:34,399 --> 00:14:36,320
one of my favorite car security

371
00:14:36,320 --> 00:14:37,839
exploration tool

372
00:14:37,839 --> 00:14:40,959
carrying caraboo the reason for that is

373
00:14:40,959 --> 00:14:43,839
it's a python tool and it's easy for me

374
00:14:43,839 --> 00:14:46,560
to use it because it allows me to

375
00:14:46,560 --> 00:14:50,079
uh discover uts message by sending

376
00:14:50,079 --> 00:14:52,720
diagnostic session control if i'm using

377
00:14:52,720 --> 00:14:56,160
the uds discovery module so uh there's a

378
00:14:56,160 --> 00:14:58,399
lot of modules that they could use for

379
00:14:58,399 --> 00:15:00,639
carrying cardboard there's also hard

380
00:15:00,639 --> 00:15:03,600
reset there's tester present and a lot

381
00:15:03,600 --> 00:15:07,040
of discovery process and fuzzing for car

382
00:15:07,040 --> 00:15:08,560
hacking

383
00:15:08,560 --> 00:15:10,560
and automating or can bus hacking of

384
00:15:10,560 --> 00:15:12,720
course

385
00:15:12,720 --> 00:15:15,040
um metasploit

386
00:15:15,040 --> 00:15:17,360
is also a good tool if you want to try

387
00:15:17,360 --> 00:15:20,399
out some of the post modules that it has

388
00:15:20,399 --> 00:15:22,639
so we thank craig smith for developing

389
00:15:22,639 --> 00:15:24,880
the hardware bridge during his stand at

390
00:15:24,880 --> 00:15:27,360
rampant seven and uh

391
00:15:27,360 --> 00:15:29,440
from the screen that you can see

392
00:15:29,440 --> 00:15:31,839
this is the hardware bridge

393
00:15:31,839 --> 00:15:36,399
rc that will set up a resource script

394
00:15:36,399 --> 00:15:38,399
or a web server to bridge communications

395
00:15:38,399 --> 00:15:41,120
to a hardware particularly an automotive

396
00:15:41,120 --> 00:15:43,440
and will also establish a session with a

397
00:15:43,440 --> 00:15:45,199
hardware bridge server

398
00:15:45,199 --> 00:15:47,920
so it's generally used for car hacking

399
00:15:47,920 --> 00:15:50,160
with msf

400
00:15:50,160 --> 00:15:51,040
and then

401
00:15:51,040 --> 00:15:52,959
from the right side of the screen

402
00:15:52,959 --> 00:15:55,759
you can see that uh that's a screen

403
00:15:55,759 --> 00:15:58,079
screenshot from the metasploit module

404
00:15:58,079 --> 00:16:00,959
that i made as well uh that's the first

405
00:16:00,959 --> 00:16:02,959
uh car hacking meta split module that

406
00:16:02,959 --> 00:16:04,000
i've made

407
00:16:04,000 --> 00:16:05,920
it's the mazda2 instrument cluster

408
00:16:05,920 --> 00:16:09,440
accelerometer mover it allows you to

409
00:16:09,440 --> 00:16:11,120
interact with the instrument cluster

410
00:16:11,120 --> 00:16:14,560
panel of your master tool

411
00:16:14,959 --> 00:16:16,320
and then

412
00:16:16,320 --> 00:16:17,360
here are

413
00:16:17,360 --> 00:16:20,560
uh the current modules of metasploit

414
00:16:20,560 --> 00:16:22,480
if you just use search automotive you

415
00:16:22,480 --> 00:16:23,759
can actually

416
00:16:23,759 --> 00:16:24,720
see

417
00:16:24,720 --> 00:16:27,519
these modules

418
00:16:28,720 --> 00:16:31,360
this is a sample uh template if you want

419
00:16:31,360 --> 00:16:33,759
to create uh your own meta split module

420
00:16:33,759 --> 00:16:37,839
so it's easy you just need to

421
00:16:38,079 --> 00:16:41,199
put on your update info the description

422
00:16:41,199 --> 00:16:43,120
the license the author the platform the

423
00:16:43,120 --> 00:16:44,480
session types

424
00:16:44,480 --> 00:16:46,079
and then

425
00:16:46,079 --> 00:16:48,800
register options for the options that

426
00:16:48,800 --> 00:16:51,199
you can use and then from what you can

427
00:16:51,199 --> 00:16:53,839
see there i'm actually sending the

428
00:16:53,839 --> 00:16:56,240
arbitration id202

429
00:16:56,240 --> 00:16:57,360
and then

430
00:16:57,360 --> 00:16:59,839
you've got the data next which is six

431
00:16:59,839 --> 00:17:01,759
zero zero one

432
00:17:01,759 --> 00:17:05,039
six zero zero one six zero six zero six

433
00:17:05,039 --> 00:17:07,520
zero six zero six zero six zero and zero

434
00:17:07,520 --> 00:17:10,079
zero so that's the total of eight bytes

435
00:17:10,079 --> 00:17:13,760
of data in the can frame

436
00:17:14,959 --> 00:17:18,400
right uh just now uh

437
00:17:18,400 --> 00:17:20,559
i've actually contributed another module

438
00:17:20,559 --> 00:17:22,880
which is the ecu hard reset

439
00:17:22,880 --> 00:17:25,760
i'm sending an arbitration id by default

440
00:17:25,760 --> 00:17:27,919
to 7df

441
00:17:27,919 --> 00:17:31,039
and i'm sending

442
00:17:31,440 --> 00:17:34,080
zero 021101 which is the standard for

443
00:17:34,080 --> 00:17:38,240
doing an ecu hard reset in the canvas

444
00:17:38,240 --> 00:17:40,799
and yeah take note of this

445
00:17:40,799 --> 00:17:42,799
uh right now

446
00:17:42,799 --> 00:17:44,480
for new modules of metasploit you need

447
00:17:44,480 --> 00:17:47,520
to write notes and the stability

448
00:17:47,520 --> 00:17:49,840
the side effects and the reliability of

449
00:17:49,840 --> 00:17:52,240
the exploit module so that's how they

450
00:17:52,240 --> 00:17:55,360
become strict right now

451
00:17:56,880 --> 00:18:01,760
there's also a new can picot board it's

