1
00:00:01,599 --> 00:00:04,240
hello root khan this is rizan from

2
00:00:04,240 --> 00:00:06,319
malaysia i'm the cyber lead penetration

3
00:00:06,319 --> 00:00:08,880
tester from bae systems for today's

4
00:00:08,880 --> 00:00:10,639
disclosure i would like to discuss about

5
00:00:10,639 --> 00:00:14,120
my topic of authentication bypass

6
00:00:14,120 --> 00:00:17,330
[Music]

7
00:00:19,359 --> 00:00:21,600
for the agenda i will go through the

8
00:00:21,600 --> 00:00:24,480
first um overview of the or of implicit

9
00:00:24,480 --> 00:00:26,880
flow after which we'll talk a bit about

10
00:00:26,880 --> 00:00:29,519
statistics meaning uh what we see out

11
00:00:29,519 --> 00:00:30,560
there

12
00:00:30,560 --> 00:00:32,320
and we'll talk a bit about the

13
00:00:32,320 --> 00:00:34,399
vulnerability research that we have done

14
00:00:34,399 --> 00:00:37,120
with regards to this of misconfiguration

15
00:00:37,120 --> 00:00:39,760
that allows that attacker to bypass

16
00:00:39,760 --> 00:00:41,200
authentication

17
00:00:41,200 --> 00:00:43,920
and last but not least at the end of

18
00:00:43,920 --> 00:00:47,200
this talk i would be taking questions

19
00:00:47,200 --> 00:00:49,680
and i will try my very best to answer

20
00:00:49,680 --> 00:00:51,840
all your questions

21
00:00:51,840 --> 00:00:54,640
[Music]

22
00:00:54,640 --> 00:00:58,480
firstly let's go through the overview

23
00:00:58,480 --> 00:01:00,079
what is oauth

24
00:01:00,079 --> 00:01:02,480
now you guys might have seen this i'm

25
00:01:02,480 --> 00:01:04,559
very sure if you use the internet if you

26
00:01:04,559 --> 00:01:07,920
use the web you will see um signs like

27
00:01:07,920 --> 00:01:10,240
login with google login with facebook

28
00:01:10,240 --> 00:01:12,479
login with whatever twitter

29
00:01:12,479 --> 00:01:16,080
now this is a mechanism that allows

30
00:01:16,080 --> 00:01:19,040
a user to authenticate himself

31
00:01:19,040 --> 00:01:22,799
in an automated fashion using your

32
00:01:22,799 --> 00:01:25,520
social media profile now the traditional

33
00:01:25,520 --> 00:01:27,840
way of logging in a system is the

34
00:01:27,840 --> 00:01:29,680
username and password everyone knows

35
00:01:29,680 --> 00:01:31,680
that you know your username you get the

36
00:01:31,680 --> 00:01:34,000
correct password and you're logged in

37
00:01:34,000 --> 00:01:38,000
now many times we have just too many um

38
00:01:38,000 --> 00:01:40,400
username and passwords to remember

39
00:01:40,400 --> 00:01:42,640
hence we have this automated system

40
00:01:42,640 --> 00:01:45,680
called the oauth where it allows

41
00:01:45,680 --> 00:01:47,840
a website developer to integrate the

42
00:01:47,840 --> 00:01:49,200
authentication

43
00:01:49,200 --> 00:01:51,920
with a provider now the provider can be

44
00:01:51,920 --> 00:01:53,759
facebook can be google can be twitter

45
00:01:53,759 --> 00:01:56,560
can be linkedin it can be whatever oauth

46
00:01:56,560 --> 00:01:58,880
provider that's out there

47
00:01:58,880 --> 00:02:00,960
now this is what oauth is all about and

48
00:02:00,960 --> 00:02:02,719
this is what the topic is all about

49
00:02:02,719 --> 00:02:04,880
we're going to be discussing a bit about

50
00:02:04,880 --> 00:02:07,280
some of the misconfiguration one

51
00:02:07,280 --> 00:02:09,280
particular misconfiguration that is

52
00:02:09,280 --> 00:02:11,280
often seen out there

53
00:02:11,280 --> 00:02:13,599
most people most bug hunters would have

54
00:02:13,599 --> 00:02:15,760
seen it but i'm trying to put things

55
00:02:15,760 --> 00:02:18,560
into perspective

56
00:02:19,599 --> 00:02:21,840
firstly let's have a look at the oauth2

57
00:02:21,840 --> 00:02:23,440
implicit flow

58
00:02:23,440 --> 00:02:26,080
over here is the diagram that i drew

59
00:02:26,080 --> 00:02:28,160
well actually i stole this diagram but

60
00:02:28,160 --> 00:02:29,360
anyways

61
00:02:29,360 --> 00:02:31,760
the client application is on the left

62
00:02:31,760 --> 00:02:32,800
hand side

63
00:02:32,800 --> 00:02:34,720
and the right hand side you have the

64
00:02:34,720 --> 00:02:37,280
resource owner at the bottom you have

65
00:02:37,280 --> 00:02:39,519
the authorization server and the

66
00:02:39,519 --> 00:02:41,519
resource server to put things into

67
00:02:41,519 --> 00:02:44,239
perspective the resource owner is

68
00:02:44,239 --> 00:02:47,120
usually the user like you and me someone

69
00:02:47,120 --> 00:02:49,840
that would like to log into a website

70
00:02:49,840 --> 00:02:52,640
would log into the client application so

71
00:02:52,640 --> 00:02:54,560
in this case the client application is

72
00:02:54,560 --> 00:02:56,720
the website let's assume for a second

73
00:02:56,720 --> 00:02:58,560
here that we are trying to log into

74
00:02:58,560 --> 00:03:00,879
website abc.com

75
00:03:00,879 --> 00:03:03,120
now

76
00:03:03,120 --> 00:03:05,760
a user would usually submit a username

77
00:03:05,760 --> 00:03:07,200
and a password

78
00:03:07,200 --> 00:03:09,519
and the authorization uh grant will

79
00:03:09,519 --> 00:03:11,519
happen as you can see here there are

80
00:03:11,519 --> 00:03:14,159
many arrows pointing left and right

81
00:03:14,159 --> 00:03:16,000
what happens is the client application

82
00:03:16,000 --> 00:03:17,680
will pop up with that little window that

83
00:03:17,680 --> 00:03:19,440
i showed you in the first diagram just

84
00:03:19,440 --> 00:03:20,239
now

85
00:03:20,239 --> 00:03:22,239
and you enter the username and password

86
00:03:22,239 --> 00:03:24,319
it gets passed back to the client

87
00:03:24,319 --> 00:03:25,760
application that's called an

88
00:03:25,760 --> 00:03:27,599
authorization grant

89
00:03:27,599 --> 00:03:29,840
and from that authorization grant is

90
00:03:29,840 --> 00:03:32,480
passed to an authorization server

91
00:03:32,480 --> 00:03:34,319
now pay attention over here the

92
00:03:34,319 --> 00:03:36,400
authorization server in this case could

93
00:03:36,400 --> 00:03:38,159
be facebook could be google could be

94
00:03:38,159 --> 00:03:40,720
twitter could be whatever not now the

95
00:03:40,720 --> 00:03:44,000
flaw is not in the authorization server

96
00:03:44,000 --> 00:03:46,560
there were cases one particular case

97
00:03:46,560 --> 00:03:48,640
where the authorization server made a

98
00:03:48,640 --> 00:03:51,840
mistake and um a buck hunter had found

99
00:03:51,840 --> 00:03:53,840
this vulnerability it was in the um

100
00:03:53,840 --> 00:03:56,319
apple id authentication that gave him

101
00:03:56,319 --> 00:03:59,680
fifty thousand dollars um price money um

102
00:03:59,680 --> 00:04:01,599
but in this case in this scenario that

103
00:04:01,599 --> 00:04:03,760
we are discussing it has nothing to do

104
00:04:03,760 --> 00:04:05,920
with authorization server

105
00:04:05,920 --> 00:04:09,120
it's at the floor at the um

106
00:04:09,120 --> 00:04:12,000
the client application giving access

107
00:04:12,000 --> 00:04:14,400
into the resource server website

108
00:04:14,400 --> 00:04:16,880
now i'll i will speak a bit more about

109
00:04:16,880 --> 00:04:18,238
this um

110
00:04:18,238 --> 00:04:21,120
vulnerability in ver in more detail at

111
00:04:21,120 --> 00:04:22,720
the following slides

112
00:04:22,720 --> 00:04:24,400
now on the fourth

113
00:04:24,400 --> 00:04:26,240
session here you will see the access

114
00:04:26,240 --> 00:04:27,840
token that gets passed back from the

115
00:04:27,840 --> 00:04:30,560
authorization server now the client

116
00:04:30,560 --> 00:04:34,560
application would send three parameters

117
00:04:34,560 --> 00:04:36,800
now these three parameters are very

118
00:04:36,800 --> 00:04:38,800
important because this is the gist of

119
00:04:38,800 --> 00:04:40,240
the discussion that we're gonna have

120
00:04:40,240 --> 00:04:44,160
here now when the client access token

121
00:04:44,160 --> 00:04:45,840
has been passed back to the resource

122
00:04:45,840 --> 00:04:46,800
server

123
00:04:46,800 --> 00:04:48,240
which is the website that you are trying

124
00:04:48,240 --> 00:04:50,080
to authenticate against

125
00:04:50,080 --> 00:04:51,680
you will have three

126
00:04:51,680 --> 00:04:54,880
resource sorry three parameters the

127
00:04:54,880 --> 00:04:57,440
email id the resource id and the

128
00:04:57,440 --> 00:04:59,199
username

129
00:04:59,199 --> 00:05:00,960
in different instances in different

130
00:05:00,960 --> 00:05:03,360
websites we have different parameters

131
00:05:03,360 --> 00:05:06,160
that are passed back and forth now we

132
00:05:06,160 --> 00:05:08,840
will examine how these parameters if are

133
00:05:08,840 --> 00:05:11,360
unchecked can be modified can be

134
00:05:11,360 --> 00:05:13,759
intercepted by an attacker

135
00:05:13,759 --> 00:05:16,000
and therefore gain access to the

136
00:05:16,000 --> 00:05:18,720
resource server now one another point

137
00:05:18,720 --> 00:05:21,039
very important point that i have to um

138
00:05:21,039 --> 00:05:24,160
emphasize here is the client application

139
00:05:24,160 --> 00:05:26,400
and the resource server

140
00:05:26,400 --> 00:05:28,400
most of the times are

141
00:05:28,400 --> 00:05:29,600
one unit

142
00:05:29,600 --> 00:05:31,919
as in one server it could be separate

143
00:05:31,919 --> 00:05:33,759
but usually it's one so what we're

144
00:05:33,759 --> 00:05:35,520
talking about here is the authorization

145
00:05:35,520 --> 00:05:37,919
server passing back the access token

146
00:05:37,919 --> 00:05:40,720
access token is granted to the resource

147
00:05:40,720 --> 00:05:43,039
server meaning abc.com

148
00:05:43,039 --> 00:05:45,680
and therefore you have access to abc.com

149
00:05:45,680 --> 00:05:48,000
we will examine step number five which

150
00:05:48,000 --> 00:05:50,160
is the misconfiguration the uncheck

151
00:05:50,160 --> 00:05:52,960
parameters and leading to the

152
00:05:52,960 --> 00:05:54,560
authentication bypass

153
00:05:54,560 --> 00:05:57,440
[Music]

154
00:05:57,440 --> 00:05:59,039
before that let's let's look at some

155
00:05:59,039 --> 00:06:01,759
statistics

156
00:06:02,479 --> 00:06:04,240
some facts to understand

157
00:06:04,240 --> 00:06:06,479
only a small number of websites

158
00:06:06,479 --> 00:06:08,960
that offer users to sign-in users using

159
00:06:08,960 --> 00:06:11,280
the facebook google twitter or whatever

160
00:06:11,280 --> 00:06:13,759
not exhibit this problem

161
00:06:13,759 --> 00:06:14,639
now

162
00:06:14,639 --> 00:06:17,759
the tester only tested against accounts

163
00:06:17,759 --> 00:06:19,840
fb accounts that already owned by the

164
00:06:19,840 --> 00:06:21,680
tester this is very important because we

165
00:06:21,680 --> 00:06:24,080
do not want to step over other people we

166
00:06:24,080 --> 00:06:25,759
do not want to break the law by

167
00:06:25,759 --> 00:06:28,080
accessing other people's account so all

168
00:06:28,080 --> 00:06:31,039
accounts that were used for this testing

169
00:06:31,039 --> 00:06:33,600
were owned by the tester

170
00:06:33,600 --> 00:06:36,000
again the emphasis is the problem is not

171
00:06:36,000 --> 00:06:37,840
due to the fault of the authorization

172
00:06:37,840 --> 00:06:39,039
server

173
00:06:39,039 --> 00:06:41,360
but rather due to the unchecked

174
00:06:41,360 --> 00:06:43,360
parameters at step number five in the

175
00:06:43,360 --> 00:06:45,840
previous diagram

176
00:06:45,840 --> 00:06:48,240
and the problem exists usually in the

177
00:06:48,240 --> 00:06:52,160
implicit grant of oauth2

178
00:06:52,800 --> 00:06:55,360
here are some statistics

179
00:06:55,360 --> 00:06:57,120
over here you will see the name of the

180
00:06:57,120 --> 00:06:59,199
website we redacted it for privacy

181
00:06:59,199 --> 00:07:01,440
purposes there were hundreds of websites

182
00:07:01,440 --> 00:07:02,880
that we tested

183
00:07:02,880 --> 00:07:05,199
and on the top here you will see the

184
00:07:05,199 --> 00:07:07,280
authorization servers that we tested

185
00:07:07,280 --> 00:07:08,319
against

186
00:07:08,319 --> 00:07:10,800
so we have facebook google apple twitter

187
00:07:10,800 --> 00:07:13,840
microsoft linkin whatever

188
00:07:13,840 --> 00:07:17,199
the ones that fail are the broken

189
00:07:17,199 --> 00:07:19,440
the broken tags here

190
00:07:19,440 --> 00:07:20,800
as you can see

191
00:07:20,800 --> 00:07:22,720
facebook

192
00:07:22,720 --> 00:07:25,120
against all the other sites that we

193
00:07:25,120 --> 00:07:28,160
tested the 200 sites here were okay

194
00:07:28,160 --> 00:07:30,639
some would not test it some exhibit

195
00:07:30,639 --> 00:07:32,080
buggy behavior

196
00:07:32,080 --> 00:07:34,240
now the auto authentication bypass

197
00:07:34,240 --> 00:07:37,440
happened in the broken tabs over here

198
00:07:37,440 --> 00:07:38,960
out of

199
00:07:38,960 --> 00:07:41,280
about close to 200

200
00:07:41,280 --> 00:07:44,960
we got about 10 broken authentication

201
00:07:44,960 --> 00:07:47,039
again nothing to do with the

202
00:07:47,039 --> 00:07:49,039
authorization servers fault

203
00:07:49,039 --> 00:07:51,520
but rather the parameters that will pass

204
00:07:51,520 --> 00:07:52,319
back

205
00:07:52,319 --> 00:07:54,879
into the resource server from the client

206
00:07:54,879 --> 00:07:57,280
application was unchecked

207
00:07:57,280 --> 00:07:58,720
we will go through

208
00:07:58,720 --> 00:08:01,440
each of this parameter and show you how

209
00:08:01,440 --> 00:08:02,879
easy it is

210
00:08:02,879 --> 00:08:06,800
for an attacker to intercept the packets

211
00:08:06,800 --> 00:08:09,840
the app using burp application

212
00:08:09,840 --> 00:08:12,160
and tamper these parameters to gain

213
00:08:12,160 --> 00:08:14,400
unauthorized access into anyone's

214
00:08:14,400 --> 00:08:15,680
account

215
00:08:15,680 --> 00:08:18,400
fortunately out there out of 200

216
00:08:18,400 --> 00:08:21,840
websites or so only 10 exhibit this

217
00:08:21,840 --> 00:08:25,318
broken behavior

218
00:08:26,000 --> 00:08:28,160
now moving on to the research

219
00:08:28,160 --> 00:08:30,080
so we spend a bit of time trying to

220
00:08:30,080 --> 00:08:31,840
understand what this vulnerability is

221
00:08:31,840 --> 00:08:33,919
about like i said most people have seen

222
00:08:33,919 --> 00:08:34,559
it

223
00:08:34,559 --> 00:08:36,799
most bug hunters have seen it

224
00:08:36,799 --> 00:08:37,679
it

225
00:08:37,679 --> 00:08:39,839
usually this bug would not survive more

226
00:08:39,839 --> 00:08:42,559
than 10 minutes in a bbp program because

227
00:08:42,559 --> 00:08:46,080
it's just so easy to spot and and to

228
00:08:46,080 --> 00:08:47,120
exploit

229
00:08:47,120 --> 00:08:48,880
it's just the fact that there are just

230
00:08:48,880 --> 00:08:51,680
so many other websites out there that

231
00:08:51,680 --> 00:08:54,000
might not be tested might not have a vdp

232
00:08:54,000 --> 00:08:56,880
or bbp program and the developers are

233
00:08:56,880 --> 00:09:00,800
unaware of this issue

234
00:09:02,320 --> 00:09:04,800
we took a look at some of the oauth

235
00:09:04,800 --> 00:09:07,120
pentas checklist that's available out

236
00:09:07,120 --> 00:09:08,480
there yeah these are the standard

237
00:09:08,480 --> 00:09:10,320
checklists that most people do

238
00:09:10,320 --> 00:09:12,800
uh while testing for oauth2

239
00:09:12,800 --> 00:09:16,399
now a lot of the checks over here we see

240
00:09:16,399 --> 00:09:19,519
don't really fit the bill except for one

241
00:09:19,519 --> 00:09:22,000
abuse of token by legitimate resource

242
00:09:22,000 --> 00:09:23,600
server or client

243
00:09:23,600 --> 00:09:24,800
this is

244
00:09:24,800 --> 00:09:27,680
one such variant that we have seen

245
00:09:27,680 --> 00:09:30,399
but actually there is more to it and

246
00:09:30,399 --> 00:09:32,160
that's what we're going to discuss in

247
00:09:32,160 --> 00:09:35,959
the next following slides

248
00:09:36,399 --> 00:09:38,080
if any of you

249
00:09:38,080 --> 00:09:40,399
have ever done the um

250
00:09:40,399 --> 00:09:41,760
port swinger

251
00:09:41,760 --> 00:09:43,440
labs

252
00:09:43,440 --> 00:09:45,839
you will notice there is one particular

253
00:09:45,839 --> 00:09:48,160
lab for the oauth authentication

254
00:09:48,160 --> 00:09:50,800
implicit flow pen test

255
00:09:50,800 --> 00:09:53,360
and if you look carefully it's labeled

256
00:09:53,360 --> 00:09:55,040
as apprentice

257
00:09:55,040 --> 00:09:57,360
so that shows how easy it is yeah

258
00:09:57,360 --> 00:09:59,680
apprentice is the lowest or the easiest

259
00:09:59,680 --> 00:10:03,279
level of exercise there is on the port

260
00:10:03,279 --> 00:10:05,360
swinger labs

261
00:10:05,360 --> 00:10:08,399
and that's how easy it is however um

262
00:10:08,399 --> 00:10:11,360
when we look closer at this um

263
00:10:11,360 --> 00:10:14,160
bug that that's systemic the problem is

264
00:10:14,160 --> 00:10:15,680
systemic out there

265
00:10:15,680 --> 00:10:17,839
it actually involves more than just

266
00:10:17,839 --> 00:10:19,839
tempering one parameter

267
00:10:19,839 --> 00:10:22,160
it might be several parameters

268
00:10:22,160 --> 00:10:24,720
depending on how the

269
00:10:24,720 --> 00:10:26,079
um

270
00:10:26,079 --> 00:10:28,480
how the authentication was coded by the

271
00:10:28,480 --> 00:10:30,720
developer

272
00:10:30,720 --> 00:10:33,360
in this case for port swinger

273
00:10:33,360 --> 00:10:36,000
they actually showed the easiest method

274
00:10:36,000 --> 00:10:38,720
of tampering one particular parameter

275
00:10:38,720 --> 00:10:40,480
which i will show you at the end of the

276
00:10:40,480 --> 00:10:40,900
slide

277
00:10:40,900 --> 00:10:44,000
[Music]

278
00:10:44,000 --> 00:10:46,240
before that just to put things into more

279
00:10:46,240 --> 00:10:49,120
perspective and how this vulnerability

280
00:10:49,120 --> 00:10:51,680
is actively exploited out there

281
00:10:51,680 --> 00:10:54,640
have a look at the hacker one reports

282
00:10:54,640 --> 00:10:56,959
some people have um submitted this

283
00:10:56,959 --> 00:10:58,880
vulnerability this bug

284
00:10:58,880 --> 00:11:02,079
and was awarded a bounty of eight

285
00:11:02,079 --> 00:11:03,750
hundred dollars easily

286
00:11:03,750 --> 00:11:05,920
[Music]

287
00:11:05,920 --> 00:11:08,720
i have submitted one and i got a bounty

288
00:11:08,720 --> 00:11:11,920
for about a thousand dollars

289
00:11:12,800 --> 00:11:15,200
i submitted another one but i believe

290
00:11:15,200 --> 00:11:18,560
this was a duplicate

291
00:11:18,560 --> 00:11:20,640
so this just shows

292
00:11:20,640 --> 00:11:23,440
that this problem is systemic and it's

293
00:11:23,440 --> 00:11:25,920
happening out there and people are bug

294
00:11:25,920 --> 00:11:27,360
hunters are

295
00:11:27,360 --> 00:11:29,200
actively reporting it

296
00:11:29,200 --> 00:11:31,120
but again i'd like to put into

297
00:11:31,120 --> 00:11:34,640
perspective what exactly is happening

298
00:11:34,640 --> 00:11:36,640
now the parameters i mentioned in the

299
00:11:36,640 --> 00:11:38,079
previous slide

300
00:11:38,079 --> 00:11:40,640
the four parameters the email the user

301
00:11:40,640 --> 00:11:44,079
id and whatnot i have put them

302
00:11:44,079 --> 00:11:46,720
according to the difficulty

303
00:11:46,720 --> 00:11:49,040
the difficulty of exploiting it from the

304
00:11:49,040 --> 00:11:51,279
top the most difficult one

305
00:11:51,279 --> 00:11:53,920
is the app scope user id now the app

306
00:11:53,920 --> 00:11:57,040
scope user id is a 15 digit number

307
00:11:57,040 --> 00:11:59,760
that gets randomly generated

308
00:11:59,760 --> 00:12:02,000
by the client app

309
00:12:02,000 --> 00:12:04,720
and it's pretty much i would say

310
00:12:04,720 --> 00:12:07,680
difficult to brute force being a 15

311
00:12:07,680 --> 00:12:09,200
digit

312
00:12:09,200 --> 00:12:12,720
number but not entirely impossible if

313
00:12:12,720 --> 00:12:16,560
the attacker has means or time to

314
00:12:16,560 --> 00:12:20,240
brute force the entire or a range of of

315
00:12:20,240 --> 00:12:23,120
valid digits a user id

316
00:12:23,120 --> 00:12:25,360
and once he hit the correct

317
00:12:25,360 --> 00:12:27,040
15 digit

318
00:12:27,040 --> 00:12:29,760
app user id he would be able to access

319
00:12:29,760 --> 00:12:31,519
the resource server which is in this

320
00:12:31,519 --> 00:12:33,760
case abc.com

321
00:12:33,760 --> 00:12:35,760
now going down the list

322
00:12:35,760 --> 00:12:40,480
a much easier approach if the developer

323
00:12:40,480 --> 00:12:43,279
has not checked the token

324
00:12:43,279 --> 00:12:45,519
the access token that i showed in the

325
00:12:45,519 --> 00:12:46,720
previous slide

326
00:12:46,720 --> 00:12:49,200
was the token granted by the

327
00:12:49,200 --> 00:12:51,360
authorization server in this case it

328
00:12:51,360 --> 00:12:54,160
could be twitter google or facebook that

329
00:12:54,160 --> 00:12:55,519
access token

330
00:12:55,519 --> 00:12:59,120
can be reused on any websites

331
00:12:59,120 --> 00:13:00,160
websites

332
00:13:00,160 --> 00:13:02,560
where they do not check

333
00:13:02,560 --> 00:13:05,440
the validity of the access token

334
00:13:05,440 --> 00:13:08,079
and just blindly accept it i will show

335
00:13:08,079 --> 00:13:10,639
in the following slides how an attacker

336
00:13:10,639 --> 00:13:14,720
could exploit this in a real scenario

337
00:13:14,720 --> 00:13:18,959
going down the ladder to an even easier

338
00:13:18,959 --> 00:13:20,560
exploitation technique would be the

339
00:13:20,560 --> 00:13:23,680
resource id now the resource id is

340
00:13:23,680 --> 00:13:25,839
usually a primary key

341
00:13:25,839 --> 00:13:28,240
could be a unique username that gets

342
00:13:28,240 --> 00:13:32,000
created upon registration of a user for

343
00:13:32,000 --> 00:13:34,639
a particular website it can be an email

344
00:13:34,639 --> 00:13:38,079
it can just be a random

345
00:13:38,079 --> 00:13:42,160
digit or a random value like user123 or

346
00:13:42,160 --> 00:13:45,440
user reason or whatever

347
00:13:45,440 --> 00:13:47,839
this is easily

348
00:13:47,839 --> 00:13:50,480
i'll i'll show you in some examples

349
00:13:50,480 --> 00:13:52,480
where the resource id happens to be an

350
00:13:52,480 --> 00:13:53,760
email address

351
00:13:53,760 --> 00:13:56,000
which is publicly known

352
00:13:56,000 --> 00:13:58,240
and the easiest of all would be the

353
00:13:58,240 --> 00:14:01,040
client email address which what i just

354
00:14:01,040 --> 00:14:02,800
showed you in the pod swinger lab just

355
00:14:02,800 --> 00:14:03,680
now

356
00:14:03,680 --> 00:14:06,240
where just by modifying the email

357
00:14:06,240 --> 00:14:09,120
address directly without having any

358
00:14:09,120 --> 00:14:12,079
access token or resource id or app scope

359
00:14:12,079 --> 00:14:13,519
id

360
00:14:13,519 --> 00:14:16,000
you'll be able to access the system the

361
00:14:16,000 --> 00:14:17,600
the resource server

362
00:14:17,600 --> 00:14:20,160
and that's by far the easiest again

363
00:14:20,160 --> 00:14:23,120
we'll go through each one of this

364
00:14:23,120 --> 00:14:26,320
and if you have any questions we can

365
00:14:26,320 --> 00:14:28,639
take a step back and discuss this during

366
00:14:28,639 --> 00:14:31,839
the q a

367
00:14:32,800 --> 00:14:33,839
now

368
00:14:33,839 --> 00:14:36,160
i have to do this

369
00:14:36,160 --> 00:14:38,160
normal disclaimer applies

370
00:14:38,160 --> 00:14:41,440
please do not do any unlawful or illegal

371
00:14:41,440 --> 00:14:42,880
activities

372
00:14:42,880 --> 00:14:45,199
we do not condone we do not take any

373
00:14:45,199 --> 00:14:47,440
responsibility i heard prison is not a

374
00:14:47,440 --> 00:14:50,800
good place to be so stay within your vdp

375
00:14:50,800 --> 00:14:53,519
stay within your bbp programs if you

376
00:14:53,519 --> 00:14:56,480
authorize personnel to do a pen test for

377
00:14:56,480 --> 00:14:59,199
a company or client go ahead if you're

378
00:14:59,199 --> 00:15:02,560
not please do not utilize any knowledge

379
00:15:02,560 --> 00:15:04,399
that you have learned or seen in this

380
00:15:04,399 --> 00:15:08,320
disclosure today to act in an illegal

381
00:15:08,320 --> 00:15:10,720
manner

382
00:15:10,839 --> 00:15:13,760
good all right let's start

383
00:15:13,760 --> 00:15:15,120
talking a bit about the testing

384
00:15:15,120 --> 00:15:16,240
procedures

385
00:15:16,240 --> 00:15:17,680
it's pretty simple

386
00:15:17,680 --> 00:15:19,760
first thing you will need will be at

387
00:15:19,760 --> 00:15:22,560
least two user ids why we have two user

388
00:15:22,560 --> 00:15:25,600
ids because we want to show you the fact

389
00:15:25,600 --> 00:15:27,600
that we can

390
00:15:27,600 --> 00:15:30,320
access using user one we can access

391
00:15:30,320 --> 00:15:31,839
user2's account

392
00:15:31,839 --> 00:15:34,320
just by tampering some parameters again

393
00:15:34,320 --> 00:15:36,639
i did mention in my first few slides

394
00:15:36,639 --> 00:15:39,279
that we did not utilize any live

395
00:15:39,279 --> 00:15:41,680
accounts i mean belonging to other

396
00:15:41,680 --> 00:15:45,199
people we use accounts that belong to us

397
00:15:45,199 --> 00:15:47,120
belong to the tester so therefore the

398
00:15:47,120 --> 00:15:49,759
tester created two usernames two user

399
00:15:49,759 --> 00:15:53,199
ids that belong to him meaning we have

400
00:15:53,199 --> 00:15:56,160
two fb profiles created

401
00:15:56,160 --> 00:15:58,560
now one thing to understand here when we

402
00:15:58,560 --> 00:16:01,199
use the fb account we decided to use fb

403
00:16:01,199 --> 00:16:04,320
account as a test bit because um we we

404
00:16:04,320 --> 00:16:07,839
saw that this would be the easiest uh

405
00:16:07,839 --> 00:16:08,800
simplest

406
00:16:08,800 --> 00:16:10,240
method for us to demonstrate this

407
00:16:10,240 --> 00:16:11,759
vulnerability

408
00:16:11,759 --> 00:16:14,639
one thing to take note is the fb

409
00:16:14,639 --> 00:16:17,759
accounts if you create test accounts it

410
00:16:17,759 --> 00:16:19,199
will not be

411
00:16:19,199 --> 00:16:21,920
usable immediately after the accounts

412
00:16:21,920 --> 00:16:24,800
have been created there is a 24-hour

413
00:16:24,800 --> 00:16:26,959
cool-off period i believe this is done

414
00:16:26,959 --> 00:16:30,079
by fb to avoid rogue accounts therefore

415
00:16:30,079 --> 00:16:33,040
if you want to do such testing you must

416
00:16:33,040 --> 00:16:37,839
have the fba accounts created in advance

417
00:16:38,399 --> 00:16:40,560
and once you have the fb accounts

418
00:16:40,560 --> 00:16:43,759
created user 1 and user 2

419
00:16:43,759 --> 00:16:47,279
go ahead and register these accounts at

420
00:16:47,279 --> 00:16:50,560
the target website so in this case we

421
00:16:50,560 --> 00:16:53,040
say we are testing a fictional website

422
00:16:53,040 --> 00:16:57,120
called abc.com which is our target

423
00:16:57,120 --> 00:17:00,959
and after registering both accounts

424
00:17:00,959 --> 00:17:03,680
we will use burp suite application

425
00:17:03,680 --> 00:17:04,400
to

426
00:17:04,400 --> 00:17:07,919
intercept and tamper the parameters that

427
00:17:07,919 --> 00:17:11,039
get passed between the client

428
00:17:11,039 --> 00:17:13,599
and the resource server when i showed

429
00:17:13,599 --> 00:17:16,319
you the first few diagram

430
00:17:16,319 --> 00:17:19,039
step number five is where the three

431
00:17:19,039 --> 00:17:21,439
parameters get parsed

432
00:17:21,439 --> 00:17:25,439
and those parameters um depending on how

433
00:17:25,439 --> 00:17:26,959
the

434
00:17:26,959 --> 00:17:30,000
developer had created the site

435
00:17:30,000 --> 00:17:30,799
is

436
00:17:30,799 --> 00:17:33,110
temperable it's unchecked

437
00:17:33,110 --> 00:17:36,240
[Music]

438
00:17:36,559 --> 00:17:38,080
let's go to the most difficult

439
00:17:38,080 --> 00:17:39,679
exploitation

440
00:17:39,679 --> 00:17:42,400
app scope user id temper i mentioned

441
00:17:42,400 --> 00:17:45,360
that it was a 15 digit id it's pretty

442
00:17:45,360 --> 00:17:46,799
long it's pretty

443
00:17:46,799 --> 00:17:48,640
difficult to brute force

444
00:17:48,640 --> 00:17:51,600
but not entirely impossible so for

445
00:17:51,600 --> 00:17:55,039
example when we have a website here

446
00:17:55,039 --> 00:17:57,520
and he's asking you okay you want to log

447
00:17:57,520 --> 00:18:00,320
in using your traditional email or

448
00:18:00,320 --> 00:18:02,559
password or would you like to use google

449
00:18:02,559 --> 00:18:06,960
or facebook in this case we use facebook

450
00:18:06,960 --> 00:18:08,960
so using the account that we created

451
00:18:08,960 --> 00:18:10,080
just now

452
00:18:10,080 --> 00:18:12,880
to fictional account we logged in with

453
00:18:12,880 --> 00:18:15,280
the first account

454
00:18:15,280 --> 00:18:17,760
facebook will prompt you will ask you

455
00:18:17,760 --> 00:18:19,760
do you want to proceed

456
00:18:19,760 --> 00:18:22,480
continue yes

457
00:18:22,480 --> 00:18:24,640
and this is the part where we use burp

458
00:18:24,640 --> 00:18:27,760
suite to intercept the traffic now if

459
00:18:27,760 --> 00:18:29,679
you haven't heard of burp suite check it

460
00:18:29,679 --> 00:18:32,799
out it's a very common application proxy

461
00:18:32,799 --> 00:18:36,080
used by pen testers for web pen tests

462
00:18:36,080 --> 00:18:38,080
what it does is it intercepts the

463
00:18:38,080 --> 00:18:40,160
traffic between the browser and the

464
00:18:40,160 --> 00:18:41,280
server

465
00:18:41,280 --> 00:18:45,360
and enables the pen tester to examine

466
00:18:45,360 --> 00:18:47,679
and tamper the values that get passed

467
00:18:47,679 --> 00:18:50,240
between the client browser and the

468
00:18:50,240 --> 00:18:51,360
server

469
00:18:51,360 --> 00:18:53,679
so in this case over here we have the

470
00:18:53,679 --> 00:18:56,320
request on the left hand side and you

471
00:18:56,320 --> 00:18:59,600
can see the app scope user id

472
00:18:59,600 --> 00:19:03,039
is 15 digits now this is at step number

473
00:19:03,039 --> 00:19:04,559
five

474
00:19:04,559 --> 00:19:06,799
where the client application

475
00:19:06,799 --> 00:19:09,360
is passing the

476
00:19:09,360 --> 00:19:11,280
authentication key

477
00:19:11,280 --> 00:19:12,880
in this case is called the app scope

478
00:19:12,880 --> 00:19:15,679
user id to the server

479
00:19:15,679 --> 00:19:19,200
if this 15 digit is valid

480
00:19:19,200 --> 00:19:20,320
therefore

481
00:19:20,320 --> 00:19:22,400
you will be granted a cookie and you

482
00:19:22,400 --> 00:19:25,200
will be able to access the system

483
00:19:25,200 --> 00:19:29,039
now this is only applicable if you get

484
00:19:29,039 --> 00:19:31,200
the app user id

485
00:19:31,200 --> 00:19:32,400
correct

486
00:19:32,400 --> 00:19:33,600
in this case

487
00:19:33,600 --> 00:19:35,440
we decided

488
00:19:35,440 --> 00:19:39,280
let me show you in the next um slide

489
00:19:39,280 --> 00:19:41,440
to tamper

490
00:19:41,440 --> 00:19:42,559
the app

491
00:19:42,559 --> 00:19:43,760
key app

492
00:19:43,760 --> 00:19:45,520
scope user id key

493
00:19:45,520 --> 00:19:47,600
to the second user remember i said i

494
00:19:47,600 --> 00:19:50,480
created two user accounts

495
00:19:50,480 --> 00:19:53,200
first one it's 15 digit ending with four

496
00:19:53,200 --> 00:19:54,640
two one

497
00:19:54,640 --> 00:19:58,080
and the second user id created with the

498
00:19:58,080 --> 00:20:01,760
ending of three five three now

499
00:20:01,760 --> 00:20:03,919
if i happen to

500
00:20:03,919 --> 00:20:05,360
able to

501
00:20:05,360 --> 00:20:06,559
guess

502
00:20:06,559 --> 00:20:09,360
the app key the 15-digit app key of any

503
00:20:09,360 --> 00:20:12,799
valid user on the resource server

504
00:20:12,799 --> 00:20:14,799
i will be given access

505
00:20:14,799 --> 00:20:17,600
into the resource server

506
00:20:17,600 --> 00:20:18,559
because

507
00:20:18,559 --> 00:20:20,640
the resource server has just granted me

508
00:20:20,640 --> 00:20:23,919
a jwd access cookie over here

509
00:20:23,919 --> 00:20:24,960
and

510
00:20:24,960 --> 00:20:28,159
it also tells me that my expiry token

511
00:20:28,159 --> 00:20:30,159
is set in the future

512
00:20:30,159 --> 00:20:32,159
so therefore i have access into the

513
00:20:32,159 --> 00:20:34,960
resource server just by tampering the

514
00:20:34,960 --> 00:20:37,200
app scope user id

515
00:20:37,200 --> 00:20:38,320
again

516
00:20:38,320 --> 00:20:40,159
first key

517
00:20:40,159 --> 00:20:42,559
over here

518
00:20:42,559 --> 00:20:45,760
and the second key over here

519
00:20:45,760 --> 00:20:48,960
everything else remains the same

520
00:20:48,960 --> 00:20:49,840
so

521
00:20:49,840 --> 00:20:51,840
that i say would be the most difficult

522
00:20:51,840 --> 00:20:54,400
one the most difficult exploit vector

523
00:20:54,400 --> 00:20:57,760
because the key is pretty long and

524
00:20:57,760 --> 00:20:59,919
pretty difficult to

525
00:20:59,919 --> 00:21:02,880
properly brute force or guess

526
00:21:02,880 --> 00:21:04,960
if there's a timeout period in the

527
00:21:04,960 --> 00:21:08,159
session you have to start all over again

528
00:21:08,159 --> 00:21:10,000
right

529
00:21:10,000 --> 00:21:11,520
now

530
00:21:11,520 --> 00:21:13,520
i'll just like to also

531
00:21:13,520 --> 00:21:17,840
inform you that the app scope user id

532
00:21:17,840 --> 00:21:20,080
is debuggable

533
00:21:20,080 --> 00:21:23,200
we have this facebook debugger you can

534
00:21:23,200 --> 00:21:26,400
access it through the facebook website

535
00:21:26,400 --> 00:21:28,400
i can't remember the url you can google

536
00:21:28,400 --> 00:21:29,679
it easily

537
00:21:29,679 --> 00:21:33,120
now by entering the

538
00:21:33,120 --> 00:21:35,840
the access token over here

539
00:21:35,840 --> 00:21:37,679
you can actually debug

540
00:21:37,679 --> 00:21:40,400
the information that was given to you

541
00:21:40,400 --> 00:21:42,559
by the authorization server it will tell

542
00:21:42,559 --> 00:21:45,760
you the app id and the app scope user id

543
00:21:45,760 --> 00:21:47,840
so every time you enter a different

544
00:21:47,840 --> 00:21:49,919
access key over here

545
00:21:49,919 --> 00:21:51,840
in this case we use two user accounts

546
00:21:51,840 --> 00:21:54,320
that we created we can actually see the

547
00:21:54,320 --> 00:21:58,080
data or the metadata that is attached to

548
00:21:58,080 --> 00:22:01,360
um this access key all right

549
00:22:01,360 --> 00:22:03,360
everything again everything remains the

550
00:22:03,360 --> 00:22:06,640
same all i did was modify the app scope

551
00:22:06,640 --> 00:22:10,320
user id with the same access key and i

552
00:22:10,320 --> 00:22:11,600
got in

553
00:22:11,600 --> 00:22:13,680
difficult but not impossible

554
00:22:13,680 --> 00:22:15,679
[Music]

555
00:22:15,679 --> 00:22:17,919
now we are moving down the ladder to the

556
00:22:17,919 --> 00:22:19,600
token reuse

557
00:22:19,600 --> 00:22:22,799
this is a bit easier i rate it as medium

558
00:22:22,799 --> 00:22:24,480
complexity

559
00:22:24,480 --> 00:22:25,600
again

560
00:22:25,600 --> 00:22:28,080
you have a website or in this case a

561
00:22:28,080 --> 00:22:29,600
mobile app

562
00:22:29,600 --> 00:22:33,039
that allows a user to sign in either

563
00:22:33,039 --> 00:22:35,180
using google or facebook

564
00:22:35,180 --> 00:22:36,559
[Music]

565
00:22:36,559 --> 00:22:38,000
same thing

566
00:22:38,000 --> 00:22:39,039
after

567
00:22:39,039 --> 00:22:40,640
after after authentication you'll be

568
00:22:40,640 --> 00:22:42,720
asked if you want to proceed

569
00:22:42,720 --> 00:22:44,720
if you got the correct facebook uh user

570
00:22:44,720 --> 00:22:46,880
id and password doesn't matter if you

571
00:22:46,880 --> 00:22:48,880
have mfa whatever not as long you have

572
00:22:48,880 --> 00:22:50,960
made the authentication successful

573
00:22:50,960 --> 00:22:53,120
you'll be asked if you want to continue

574
00:22:53,120 --> 00:22:55,120
and this is the part where it goes into

575
00:22:55,120 --> 00:22:57,360
step number five where the vulnerable

576
00:22:57,360 --> 00:22:59,360
parameters are passed

577
00:22:59,360 --> 00:23:00,820
into the resource server

578
00:23:00,820 --> 00:23:04,530
[Music]

579
00:23:05,280 --> 00:23:06,000
now

580
00:23:06,000 --> 00:23:09,520
for this instance what we abused was the

581
00:23:09,520 --> 00:23:11,520
access key token

582
00:23:11,520 --> 00:23:13,600
this is the key

583
00:23:13,600 --> 00:23:16,640
that was granted by the authorization

584
00:23:16,640 --> 00:23:18,880
server in this case facebook

585
00:23:18,880 --> 00:23:20,960
what we did was

586
00:23:20,960 --> 00:23:23,039
instead of using the key

587
00:23:23,039 --> 00:23:24,720
that was given

588
00:23:24,720 --> 00:23:27,039
by abc.com

589
00:23:27,039 --> 00:23:29,840
we decided to use another website's key

590
00:23:29,840 --> 00:23:32,080
in this case coursera it's just an

591
00:23:32,080 --> 00:23:34,960
example i'm not saying that coursera is

592
00:23:34,960 --> 00:23:37,440
vulnerable to this attack i'm just using

593
00:23:37,440 --> 00:23:40,640
coursera's key to see if i'm able to

594
00:23:40,640 --> 00:23:44,400
reuse this key on abc.com

595
00:23:44,400 --> 00:23:46,480
all right so over here i've used the

596
00:23:46,480 --> 00:23:48,159
facebook

597
00:23:48,159 --> 00:23:51,039
access token debugger to just show you

598
00:23:51,039 --> 00:23:52,799
how the coursera

599
00:23:52,799 --> 00:23:54,080
token

600
00:23:54,080 --> 00:23:54,710
looks like

601
00:23:54,710 --> 00:23:57,919
[Music]

602
00:23:57,919 --> 00:23:59,919
this is the part where

603
00:23:59,919 --> 00:24:03,039
step number five after intercepting the

604
00:24:03,039 --> 00:24:04,640
the packets

605
00:24:04,640 --> 00:24:07,440
that goes between the client client

606
00:24:07,440 --> 00:24:09,260
application to the web server

607
00:24:09,260 --> 00:24:11,120
[Music]

608
00:24:11,120 --> 00:24:13,120
the token over here the access token

609
00:24:13,120 --> 00:24:15,679
that i i highlighted over here actually

610
00:24:15,679 --> 00:24:18,159
belongs to coursera it does not belong

611
00:24:18,159 --> 00:24:19,279
to

612
00:24:19,279 --> 00:24:21,919
abc.com

613
00:24:21,919 --> 00:24:23,919
so what i did was i used coursera's

614
00:24:23,919 --> 00:24:25,200
access key

615
00:24:25,200 --> 00:24:27,520
to access abc's

616
00:24:27,520 --> 00:24:28,570
dot com website

617
00:24:28,570 --> 00:24:30,000
[Music]

618
00:24:30,000 --> 00:24:32,480
and this website instead of using the

619
00:24:32,480 --> 00:24:34,640
set token it just

620
00:24:34,640 --> 00:24:38,080
grants you the um the access token in in

621
00:24:38,080 --> 00:24:40,400
the body of the response it's the same

622
00:24:40,400 --> 00:24:41,440
thing it just

623
00:24:41,440 --> 00:24:44,320
depends on how the website developer has

624
00:24:44,320 --> 00:24:46,720
developed the website in some cases they

625
00:24:46,720 --> 00:24:49,679
set the token in the cookie in this case

626
00:24:49,679 --> 00:24:51,840
they set the token in the body of the

627
00:24:51,840 --> 00:24:53,919
application

628
00:24:53,919 --> 00:24:56,159
important thing to note here is that we

629
00:24:56,159 --> 00:25:00,159
are not using abc.com

630
00:25:00,159 --> 00:25:01,520
access token

631
00:25:01,520 --> 00:25:04,000
we are using coursera

632
00:25:04,000 --> 00:25:05,679
meaning i've authenticated against

633
00:25:05,679 --> 00:25:08,400
coursera and i took coursera's key

634
00:25:08,400 --> 00:25:11,440
access key to access abc.com so the

635
00:25:11,440 --> 00:25:13,240
problem here is that

636
00:25:13,240 --> 00:25:14,960
abc.com

637
00:25:14,960 --> 00:25:16,960
is not checking

638
00:25:16,960 --> 00:25:19,279
this parameter

639
00:25:19,279 --> 00:25:21,360
the access token key it's not checking

640
00:25:21,360 --> 00:25:23,679
as long as valid doesn't matter which

641
00:25:23,679 --> 00:25:25,919
site it comes from it will happily give

642
00:25:25,919 --> 00:25:29,360
you access so it's like i'm going to

643
00:25:29,360 --> 00:25:32,080
mike's house using

644
00:25:32,080 --> 00:25:34,240
julie's keys

645
00:25:34,240 --> 00:25:36,240
doesn't make sense right if i want to go

646
00:25:36,240 --> 00:25:38,640
to mike's house i should be using mike's

647
00:25:38,640 --> 00:25:39,440
key

648
00:25:39,440 --> 00:25:42,559
now have a look at the next slide this

649
00:25:42,559 --> 00:25:45,679
is how um token reuse exploit could

650
00:25:45,679 --> 00:25:46,720
happen

651
00:25:46,720 --> 00:25:49,360
in the wild

652
00:25:49,440 --> 00:25:52,000
we have an app a website that was

653
00:25:52,000 --> 00:25:55,360
specially created by this evil hacker

654
00:25:55,360 --> 00:25:56,720
he creates a website that's so

655
00:25:56,720 --> 00:25:58,320
believable

656
00:25:58,320 --> 00:26:01,200
it could be a very popular website

657
00:26:01,200 --> 00:26:02,159
you know

658
00:26:02,159 --> 00:26:04,240
again i could say coursera

659
00:26:04,240 --> 00:26:08,480
maybe not any any website that's popular

660
00:26:08,480 --> 00:26:10,400
and he is just

661
00:26:10,400 --> 00:26:13,760
um how they say enticing or waiting for

662
00:26:13,760 --> 00:26:16,480
users victims to authenticate against

663
00:26:16,480 --> 00:26:17,679
his website

664
00:26:17,679 --> 00:26:19,880
so for example if you like to go to

665
00:26:19,880 --> 00:26:21,520
oreilly.com

666
00:26:21,520 --> 00:26:23,840
you like to log in using oauth and

667
00:26:23,840 --> 00:26:25,360
alrighty.com happened to be a

668
00:26:25,360 --> 00:26:27,919
compromised website owned by a hacker he

669
00:26:27,919 --> 00:26:30,000
would just happily collect all the keys

670
00:26:30,000 --> 00:26:32,640
the access tokens that get passed from

671
00:26:32,640 --> 00:26:33,840
the victim

672
00:26:33,840 --> 00:26:34,960
into his

673
00:26:34,960 --> 00:26:37,120
tiny little database here

674
00:26:37,120 --> 00:26:38,720
she can collect

675
00:26:38,720 --> 00:26:41,679
and as long that key is valid

676
00:26:41,679 --> 00:26:44,400
he will be able to reuse that key on

677
00:26:44,400 --> 00:26:46,000
another resource server in this case

678
00:26:46,000 --> 00:26:48,880
abc.com

679
00:26:48,880 --> 00:26:52,799
so again it depends on how long is the

680
00:26:52,799 --> 00:26:56,000
validity of the access key granted

681
00:26:56,000 --> 00:26:58,400
by this hacker control website in this

682
00:26:58,400 --> 00:27:01,440
case i say it's o'reilly.com just

683
00:27:01,440 --> 00:27:04,080
for example fictitiously i'm not saying

684
00:27:04,080 --> 00:27:06,960
that it's compromise it can be any

685
00:27:06,960 --> 00:27:10,720
website so this is how a typical or i

686
00:27:10,720 --> 00:27:13,360
would say uh something that could

687
00:27:13,360 --> 00:27:14,960
probably happen

688
00:27:14,960 --> 00:27:16,960
um in the wild

689
00:27:16,960 --> 00:27:19,120
out there in the wild west in the world

690
00:27:19,120 --> 00:27:21,440
wide web where hackers are actually

691
00:27:21,440 --> 00:27:23,840
collecting your access token and

692
00:27:23,840 --> 00:27:27,200
actively spraying it on other websites

693
00:27:27,200 --> 00:27:29,679
it could be

694
00:27:30,159 --> 00:27:32,880
now moving down the ladder

695
00:27:32,880 --> 00:27:36,880
easy yeah this exploitation technique

696
00:27:36,880 --> 00:27:39,520
is considered easy because the only

697
00:27:39,520 --> 00:27:42,000
thing that needs to get tempered is the

698
00:27:42,000 --> 00:27:44,080
resource id

699
00:27:44,080 --> 00:27:45,919
we'll examine this in a bit more of

700
00:27:45,919 --> 00:27:47,279
detail

701
00:27:47,279 --> 00:27:48,720
over here you have

702
00:27:48,720 --> 00:27:50,640
another website

703
00:27:50,640 --> 00:27:53,120
with the same authentication mechanisms

704
00:27:53,120 --> 00:27:55,279
use facebook or google or traditional

705
00:27:55,279 --> 00:27:57,200
username or password

706
00:27:57,200 --> 00:27:59,440
we choose facebook

707
00:27:59,440 --> 00:28:01,840
so as long you have a facebook account a

708
00:28:01,840 --> 00:28:03,520
valid facebook account you click yes

709
00:28:03,520 --> 00:28:06,080
continue this is the part step number

710
00:28:06,080 --> 00:28:07,039
five

711
00:28:07,039 --> 00:28:09,360
as i showed you in the previous diagram

712
00:28:09,360 --> 00:28:12,480
we use burp suite we capture the traffic

713
00:28:12,480 --> 00:28:14,720
and we are going to tamper

714
00:28:14,720 --> 00:28:15,600
just

715
00:28:15,600 --> 00:28:18,880
one value which happened to be the

716
00:28:18,880 --> 00:28:20,880
resource id

717
00:28:20,880 --> 00:28:23,240
in this case it was the username

718
00:28:23,240 --> 00:28:24,720
[Music]

719
00:28:24,720 --> 00:28:26,960
everything else remains the same

720
00:28:26,960 --> 00:28:29,120
so by tempering the the username which

721
00:28:29,120 --> 00:28:32,559
happens to be an email even easier

722
00:28:32,559 --> 00:28:34,559
so i tamper

723
00:28:34,559 --> 00:28:36,640
to using the the second account that i

724
00:28:36,640 --> 00:28:38,799
created user002

725
00:28:38,799 --> 00:28:42,480
for example and i would have access into

726
00:28:42,480 --> 00:28:46,320
the victims account abc.com

727
00:28:46,320 --> 00:28:48,960
i'll show you another example

728
00:28:48,960 --> 00:28:50,960
where i tamper

729
00:28:50,960 --> 00:28:53,440
again the username in this case an email

730
00:28:53,440 --> 00:28:54,720
address

731
00:28:54,720 --> 00:28:57,360
and i have access again into another

732
00:28:57,360 --> 00:28:58,399
user's account

733
00:28:58,399 --> 00:28:59,840
so going

734
00:28:59,840 --> 00:29:02,320
going one step back

735
00:29:02,320 --> 00:29:04,399
gen links account again this accounts

736
00:29:04,399 --> 00:29:07,120
are owned by us

737
00:29:07,919 --> 00:29:10,960
and now i got access to gun use

738
00:29:10,960 --> 00:29:13,039
link account just by changing his

739
00:29:13,039 --> 00:29:14,720
username

740
00:29:14,720 --> 00:29:16,799
the address over here authentication

741
00:29:16,799 --> 00:29:18,720
token remain the same

742
00:29:18,720 --> 00:29:19,919
so therefore

743
00:29:19,919 --> 00:29:22,960
all you need is a valid session from the

744
00:29:22,960 --> 00:29:26,559
authorization server

745
00:29:26,559 --> 00:29:29,520
with a valid username

746
00:29:29,520 --> 00:29:31,440
okay so you can brute force the username

747
00:29:31,440 --> 00:29:33,200
as much as you want until you find the

748
00:29:33,200 --> 00:29:35,279
correct

749
00:29:35,279 --> 00:29:38,159
user id that exists in

750
00:29:38,159 --> 00:29:41,039
the victim server and voila you will get

751
00:29:41,039 --> 00:29:43,200
access into the server as long the

752
00:29:43,200 --> 00:29:45,810
access token here is valid

753
00:29:45,810 --> 00:29:47,520
[Music]

754
00:29:47,520 --> 00:29:50,320
simple as that

755
00:29:51,360 --> 00:29:53,279
and this is how

756
00:29:53,279 --> 00:29:55,360
the resource server

757
00:29:55,360 --> 00:29:56,880
page will look like after you have

758
00:29:56,880 --> 00:29:58,640
gained access into the system so i

759
00:29:58,640 --> 00:30:01,039
mentioned about jan link's account yep

760
00:30:01,039 --> 00:30:03,679
so i've got i gained access i i have

761
00:30:03,679 --> 00:30:05,760
access to his profile i could have

762
00:30:05,760 --> 00:30:08,240
access to his credit card numbers if any

763
00:30:08,240 --> 00:30:09,520
numbers were

764
00:30:09,520 --> 00:30:11,600
stored in on the server on the resource

765
00:30:11,600 --> 00:30:13,120
server

766
00:30:13,120 --> 00:30:13,919
again

767
00:30:13,919 --> 00:30:18,480
fictitiousness website called abc.com

768
00:30:20,240 --> 00:30:23,919
now moving down the fourth

769
00:30:23,919 --> 00:30:26,399
step which is the easiest at the bottom

770
00:30:26,399 --> 00:30:29,200
of the ladder this is the ports fingers

771
00:30:29,200 --> 00:30:31,679
um apprentice

772
00:30:31,679 --> 00:30:34,399
lab that i mentioned in the first slide

773
00:30:34,399 --> 00:30:36,399
where you just have to modify

774
00:30:36,399 --> 00:30:38,799
one parameter and not bother about the

775
00:30:38,799 --> 00:30:40,960
other parameters that go along with it

776
00:30:40,960 --> 00:30:43,360
because there are no other parameters

777
00:30:43,360 --> 00:30:46,000
again fictitiousness website login with

778
00:30:46,000 --> 00:30:47,090
facebook

779
00:30:47,090 --> 00:30:48,399
[Music]

780
00:30:48,399 --> 00:30:50,799
step number five

781
00:30:50,799 --> 00:30:52,799
sorry then my

782
00:30:52,799 --> 00:30:56,320
webcam decided to fall

783
00:30:56,399 --> 00:30:58,080
all right so

784
00:30:58,080 --> 00:30:59,760
where was i

785
00:30:59,760 --> 00:31:00,720
um

786
00:31:00,720 --> 00:31:03,440
yes i mentioned this is by far

787
00:31:03,440 --> 00:31:05,279
the easiest

788
00:31:05,279 --> 00:31:08,320
exploitation technique

789
00:31:08,320 --> 00:31:11,200
ever found out there in the wow

790
00:31:11,200 --> 00:31:13,919
because you only have to modify one

791
00:31:13,919 --> 00:31:16,240
simple parameter which is the client

792
00:31:16,240 --> 00:31:18,799
email address which is nearly the same

793
00:31:18,799 --> 00:31:21,679
as the third one i showed you just now

794
00:31:21,679 --> 00:31:23,519
but if you notice

795
00:31:23,519 --> 00:31:25,519
on the left side here

796
00:31:25,519 --> 00:31:27,760
there are no other parameters

797
00:31:27,760 --> 00:31:31,679
required there is no access token

798
00:31:31,679 --> 00:31:33,919
there is no cookies no session nothing

799
00:31:33,919 --> 00:31:36,640
or you can practically bookmark this

800
00:31:36,640 --> 00:31:37,760
website

801
00:31:37,760 --> 00:31:40,240
and come back again and just replay this

802
00:31:40,240 --> 00:31:41,919
this whole session by just changing the

803
00:31:41,919 --> 00:31:43,360
user id

804
00:31:43,360 --> 00:31:45,519
which happened to be the

805
00:31:45,519 --> 00:31:47,840
client

806
00:31:48,080 --> 00:31:50,399
client user client email address that's

807
00:31:50,399 --> 00:31:52,960
registered at the website and over here

808
00:31:52,960 --> 00:31:54,559
you see the response the set cookies

809
00:31:54,559 --> 00:31:56,240
have been granted meaning you have

810
00:31:56,240 --> 00:31:59,600
access to the resource server

811
00:31:59,600 --> 00:32:03,039
so no complexity of having a valid

812
00:32:03,039 --> 00:32:06,480
access token no complexity of having a

813
00:32:06,480 --> 00:32:08,720
app user id

814
00:32:08,720 --> 00:32:10,240
that's valid

815
00:32:10,240 --> 00:32:12,320
no session is required all you need is

816
00:32:12,320 --> 00:32:13,279
to just

817
00:32:13,279 --> 00:32:14,559
send a user

818
00:32:14,559 --> 00:32:18,159
id or send send a valid email address

819
00:32:18,159 --> 00:32:20,559
and the victim website will happily

820
00:32:20,559 --> 00:32:23,519
grant you access to the resource server

821
00:32:23,519 --> 00:32:26,799
this is an apprentice level the easiest

822
00:32:26,799 --> 00:32:29,679
we have seen this in the while

823
00:32:29,679 --> 00:32:32,960
um again if it was a bbp program

824
00:32:32,960 --> 00:32:34,559
i don't think it will survive more than

825
00:32:34,559 --> 00:32:38,639
five minutes it's just too easy

826
00:32:39,600 --> 00:32:41,600
and this is how it looks like the

827
00:32:41,600 --> 00:32:43,360
resource server after you have gained

828
00:32:43,360 --> 00:32:44,240
access

829
00:32:44,240 --> 00:32:46,880
just by modifying the the parameter the

830
00:32:46,880 --> 00:32:49,840
user id or email parameter and you have

831
00:32:49,840 --> 00:32:52,640
gained access into the resource server

832
00:32:52,640 --> 00:32:54,840
and if the resource server has any

833
00:32:54,840 --> 00:32:58,799
private pii data credit card numbers

834
00:32:58,799 --> 00:33:01,919
you would have access to the victim's

835
00:33:01,919 --> 00:33:03,120
data

836
00:33:03,120 --> 00:33:07,120
so you can see how easy it gets from

837
00:33:07,120 --> 00:33:08,000
step

838
00:33:08,000 --> 00:33:09,679
from the most difficult one step number

839
00:33:09,679 --> 00:33:12,880
four down the ladder to um to step uh

840
00:33:12,880 --> 00:33:15,039
the last step at the bottom

841
00:33:15,039 --> 00:33:18,640
um it just depends on how the website

842
00:33:18,640 --> 00:33:20,880
was developed and whether or not the

843
00:33:20,880 --> 00:33:22,559
parameters that

844
00:33:22,559 --> 00:33:24,960
get transferred between the

845
00:33:24,960 --> 00:33:27,279
client application to the

846
00:33:27,279 --> 00:33:29,470
resource server is actually checked

847
00:33:29,470 --> 00:33:31,360
[Music]

848
00:33:31,360 --> 00:33:32,640
so

849
00:33:32,640 --> 00:33:34,960
it's easy it's

850
00:33:34,960 --> 00:33:36,799
high impact

851
00:33:36,799 --> 00:33:39,039
it can be performed using different

852
00:33:39,039 --> 00:33:41,039
authorization servers doesn't

853
00:33:41,039 --> 00:33:43,120
necessarily have to be facebook it could

854
00:33:43,120 --> 00:33:45,519
be google could be twitter we decided to

855
00:33:45,519 --> 00:33:48,480
use facebook because um facebook

856
00:33:48,480 --> 00:33:50,559
access tokens are

857
00:33:50,559 --> 00:33:54,559
my opinion easier to debug um has a

858
00:33:54,559 --> 00:33:56,799
validity period it doesn't have a sea

859
00:33:56,799 --> 00:33:59,120
surf token attached to it so i can

860
00:33:59,120 --> 00:34:00,080
happily

861
00:34:00,080 --> 00:34:02,720
reuse it

862
00:34:02,880 --> 00:34:04,720
attacker will have full control

863
00:34:04,720 --> 00:34:09,119
once accessing the resource server

864
00:34:09,119 --> 00:34:11,199
is considered account takeover

865
00:34:11,199 --> 00:34:12,960
and therefore

866
00:34:12,960 --> 00:34:15,760
stealing the the victim's identity and

867
00:34:15,760 --> 00:34:17,839
it could be used for

868
00:34:17,839 --> 00:34:21,280
traditionalists or criminal acts

869
00:34:21,280 --> 00:34:26,079
depends on what the hacker's goal is

870
00:34:28,079 --> 00:34:29,839
all right so

871
00:34:29,839 --> 00:34:32,800
we come to the end of my disclosure over

872
00:34:32,800 --> 00:34:35,280
here um i will be taking

873
00:34:35,280 --> 00:34:37,280
questions and i will try my best to

874
00:34:37,280 --> 00:34:38,399
answer

875
00:34:38,399 --> 00:34:40,960
this is my email address over here

876
00:34:40,960 --> 00:34:46,119
and okay guys hack the planet

