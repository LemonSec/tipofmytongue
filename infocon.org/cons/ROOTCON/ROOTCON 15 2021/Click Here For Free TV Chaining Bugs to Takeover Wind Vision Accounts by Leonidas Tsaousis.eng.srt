1
00:00:02,960 --> 00:00:04,880
hi everyone my name is leo and today

2
00:00:04,880 --> 00:00:06,319
we're going to talk about wind vision or

3
00:00:06,319 --> 00:00:07,680
how an attacker could change a series of

4
00:00:07,680 --> 00:00:10,400
bugs to take over your tv account

5
00:00:10,400 --> 00:00:11,920
this talk is split in four rough

6
00:00:11,920 --> 00:00:13,360
sections we'll start with a few

7
00:00:13,360 --> 00:00:15,200
introductions then we'll take a deep

8
00:00:15,200 --> 00:00:17,440
dive into the vulnerabilities then we'll

9
00:00:17,440 --> 00:00:19,520
go with the disclosure process and

10
00:00:19,520 --> 00:00:21,119
finally we'll close with a few tips for

11
00:00:21,119 --> 00:00:24,640
both developers and security researchers

12
00:00:24,640 --> 00:00:26,560
if you work about myself my name is

13
00:00:26,560 --> 00:00:28,640
leonidastausis and i'm from greece where

14
00:00:28,640 --> 00:00:30,640
this talk is currently recorded from

15
00:00:30,640 --> 00:00:32,159
this research was conducted while

16
00:00:32,159 --> 00:00:34,160
working for f-secure previously known as

17
00:00:34,160 --> 00:00:36,880
mwr info security i have a bit over five

18
00:00:36,880 --> 00:00:38,719
years of experience in the industry

19
00:00:38,719 --> 00:00:40,160
earning a couple of certifications along

20
00:00:40,160 --> 00:00:42,480
the way for the most of this time i've

21
00:00:42,480 --> 00:00:45,039
been mobile security enthusiast but

22
00:00:45,039 --> 00:00:47,120
lately turned into active directory and

23
00:00:47,120 --> 00:00:48,640
red tv stuff

24
00:00:48,640 --> 00:00:50,559
and although i've given this talk in one

25
00:00:50,559 --> 00:00:52,239
more conference this year i'm very very

26
00:00:52,239 --> 00:00:54,079
excited to present that root call but

27
00:00:54,079 --> 00:00:55,520
also pretty sad that i can't visit the

28
00:00:55,520 --> 00:00:58,640
philippines surely next year

29
00:00:58,640 --> 00:01:01,280
winter las or just wind is the second

30
00:01:01,280 --> 00:01:02,960
largest telecommunication provider in

31
00:01:02,960 --> 00:01:03,840
greece

32
00:01:03,840 --> 00:01:06,400
recently acquired by a united group

33
00:01:06,400 --> 00:01:08,720
and wind vision is a digital television

34
00:01:08,720 --> 00:01:10,880
service allowing for life and on-demand

35
00:01:10,880 --> 00:01:12,960
streaming of sports greek tv channels

36
00:01:12,960 --> 00:01:15,360
movies series and so on it comes with a

37
00:01:15,360 --> 00:01:18,000
dedicated set-top box running android tv

38
00:01:18,000 --> 00:01:19,680
or you can just download the mobile

39
00:01:19,680 --> 00:01:21,360
application available for android and

40
00:01:21,360 --> 00:01:24,080
ios devices log in and watch tv on the

41
00:01:24,080 --> 00:01:26,479
go from your smartphone

42
00:01:26,479 --> 00:01:28,320
it's also worth introducing software

43
00:01:28,320 --> 00:01:31,360
zapware is an iptv infrastructure vendor

44
00:01:31,360 --> 00:01:32,720
the solutions are used by

45
00:01:32,720 --> 00:01:35,119
telecommunication providers uh

46
00:01:35,119 --> 00:01:36,960
of multiple countries around the world

47
00:01:36,960 --> 00:01:38,799
some of them are a1 with presence in

48
00:01:38,799 --> 00:01:41,600
croatia bulgaria slovenia and austria

49
00:01:41,600 --> 00:01:44,079
orange from belgium and ampia from the

50
00:01:44,079 --> 00:01:46,320
caribbean uh the findings we'll talk

51
00:01:46,320 --> 00:01:48,479
about actually affects upward solution

52
00:01:48,479 --> 00:01:51,040
called nex4 which is what wind vision is

53
00:01:51,040 --> 00:01:52,960
using behind the scenes as was observed

54
00:01:52,960 --> 00:01:54,720
during the research

55
00:01:54,720 --> 00:01:57,040
right so let's jump into the technical

56
00:01:57,040 --> 00:01:58,880
analysis i'll try not to focus a lot on

57
00:01:58,880 --> 00:02:00,719
the details as i love that to read

58
00:02:00,719 --> 00:02:02,799
throughout your own pace

59
00:02:02,799 --> 00:02:04,880
okay so before going forward it's worth

60
00:02:04,880 --> 00:02:06,640
taking a glimpse of the future to see

61
00:02:06,640 --> 00:02:08,639
how it all looks like from a high level

62
00:02:08,639 --> 00:02:11,038
before we get deep into a tech talk so

63
00:02:11,038 --> 00:02:13,280
here's what the final attack chain looks

64
00:02:13,280 --> 00:02:15,040
like don't worry if it's too complicated

65
00:02:15,040 --> 00:02:17,599
for now the gist of it is that a

66
00:02:17,599 --> 00:02:19,840
malicious application could exploit

67
00:02:19,840 --> 00:02:21,520
certain vulnerabilities in the wind

68
00:02:21,520 --> 00:02:22,879
vision application

69
00:02:22,879 --> 00:02:24,959
and change them to steal the user's

70
00:02:24,959 --> 00:02:27,200
session in what is known as an account

71
00:02:27,200 --> 00:02:29,040
takeover attack

72
00:02:29,040 --> 00:02:30,239
but let's get back to the beginning

73
00:02:30,239 --> 00:02:31,920
let's see what it all started from and

74
00:02:31,920 --> 00:02:33,440
how we got to that

75
00:02:33,440 --> 00:02:35,360
so this is literally the first screen

76
00:02:35,360 --> 00:02:36,959
you see when you launch the android

77
00:02:36,959 --> 00:02:39,200
application it all starts from this

78
00:02:39,200 --> 00:02:41,360
transition as in order to log in you

79
00:02:41,360 --> 00:02:43,920
navigate from the app to a web view

80
00:02:43,920 --> 00:02:46,160
powered by chrome as can be seen in the

81
00:02:46,160 --> 00:02:49,120
url bar then back into the native app

82
00:02:49,120 --> 00:02:51,280
this last step is tricky though

83
00:02:51,280 --> 00:02:53,920
as you need to declare an url scheme and

84
00:02:53,920 --> 00:02:56,160
call it to pass any tokens retrieved in

85
00:02:56,160 --> 00:02:58,239
the browser back to the app this is

86
00:02:58,239 --> 00:03:00,080
called linking it's a typical form of

87
00:03:00,080 --> 00:03:01,760
android android into process

88
00:03:01,760 --> 00:03:03,920
communication or ipc and it's

89
00:03:03,920 --> 00:03:05,920
implemented using an intent filter

90
00:03:05,920 --> 00:03:08,000
specifying a data element

91
00:03:08,000 --> 00:03:10,239
an example url which the app can then

92
00:03:10,239 --> 00:03:12,000
handle is the following

93
00:03:12,000 --> 00:03:13,840
which carries the code parameter value

94
00:03:13,840 --> 00:03:15,519
as we can see

95
00:03:15,519 --> 00:03:17,440
however this is not the most secure way

96
00:03:17,440 --> 00:03:20,159
to do this as this deep linking method

97
00:03:20,159 --> 00:03:22,159
evident from the bare intent filter

98
00:03:22,159 --> 00:03:23,599
which does not perform any further

99
00:03:23,599 --> 00:03:26,159
verification presents a problem and has

100
00:03:26,159 --> 00:03:27,680
thus been replaced with slightly

101
00:03:27,680 --> 00:03:30,640
different scheme turned up links

102
00:03:30,640 --> 00:03:32,640
wire uplinks better than deep links you

103
00:03:32,640 --> 00:03:33,680
might ask

104
00:03:33,680 --> 00:03:36,640
when multiple apps declare the same url

105
00:03:36,640 --> 00:03:38,640
scheme such as https

106
00:03:38,640 --> 00:03:41,280
columnslastlast3ww.youtube.com

107
00:03:41,280 --> 00:03:43,440
through deeplinks the user will be

108
00:03:43,440 --> 00:03:45,599
prompted with a dialog box to select the

109
00:03:45,599 --> 00:03:48,080
handler application a wrong click there

110
00:03:48,080 --> 00:03:49,680
could lead to the wrong app receiving

111
00:03:49,680 --> 00:03:51,920
sensitive data that was intended for the

112
00:03:51,920 --> 00:03:53,680
legitimate application this is known as

113
00:03:53,680 --> 00:03:56,239
url hijacking and malicious application

114
00:03:56,239 --> 00:03:58,720
could not only declare arbitrary schemes

115
00:03:58,720 --> 00:04:01,120
to hijack sensitive urls but also trick

116
00:04:01,120 --> 00:04:02,959
users into setting it as the preferred

117
00:04:02,959 --> 00:04:05,519
handler application disabling all future

118
00:04:05,519 --> 00:04:07,519
prompts the solution

119
00:04:07,519 --> 00:04:09,040
the developer could instead use an

120
00:04:09,040 --> 00:04:11,120
uplink by specifying an additional

121
00:04:11,120 --> 00:04:13,120
element in the intent filter this

122
00:04:13,120 --> 00:04:15,519
autoverify equals true

123
00:04:15,519 --> 00:04:17,519
element that will tell the system hey

124
00:04:17,519 --> 00:04:19,759
these are my urls and i can prove it by

125
00:04:19,759 --> 00:04:22,560
hosting an asset link json file on that

126
00:04:22,560 --> 00:04:23,520
domain

127
00:04:23,520 --> 00:04:25,280
which then skips the handler altogether

128
00:04:25,280 --> 00:04:27,120
and opens the intended up no questions

129
00:04:27,120 --> 00:04:28,960
asked

130
00:04:28,960 --> 00:04:30,720
and this is what this json file would

131
00:04:30,720 --> 00:04:32,560
look like essentially it's just a list

132
00:04:32,560 --> 00:04:34,479
of applications but can register this

133
00:04:34,479 --> 00:04:36,720
url and this file is checked by the

134
00:04:36,720 --> 00:04:38,639
system at install time or when the app

135
00:04:38,639 --> 00:04:40,400
is first installed and not during every

136
00:04:40,400 --> 00:04:42,320
url code

137
00:04:42,320 --> 00:04:44,560
okay so that's indeed an issue but only

138
00:04:44,560 --> 00:04:46,880
image configuration so far as we'll see

139
00:04:46,880 --> 00:04:48,479
this is a pivotal one though for the

140
00:04:48,479 --> 00:04:50,320
overall attack as it will allow us to

141
00:04:50,320 --> 00:04:52,320
cross the application boundary

142
00:04:52,320 --> 00:04:54,000
for now we can only just make a note and

143
00:04:54,000 --> 00:04:56,400
move on with the checklist the next

144
00:04:56,400 --> 00:04:58,320
question to ask is where did that code

145
00:04:58,320 --> 00:05:00,800
come from to answer that we need to dig

146
00:05:00,800 --> 00:05:03,120
deeper into the authentication flow and

147
00:05:03,120 --> 00:05:04,960
to do that we just follow standard

148
00:05:04,960 --> 00:05:07,120
methodology that means we rooted the

149
00:05:07,120 --> 00:05:09,280
device using the disk proxy traffic

150
00:05:09,280 --> 00:05:11,280
using verb unpin the tls certificate

151
00:05:11,280 --> 00:05:13,039
using frida

152
00:05:13,039 --> 00:05:15,199
and then we looked at the last http

153
00:05:15,199 --> 00:05:17,680
request capture after the authentication

154
00:05:17,680 --> 00:05:19,360
so one trick i typically use to figure

155
00:05:19,360 --> 00:05:20,800
out what credentials and application

156
00:05:20,800 --> 00:05:23,280
needs is to start from the end

157
00:05:23,280 --> 00:05:25,440
an actual authenticated api request

158
00:05:25,440 --> 00:05:27,199
progressively strip parameters and

159
00:05:27,199 --> 00:05:29,360
headers repeating it to the server until

160
00:05:29,360 --> 00:05:31,440
it starts complaining to figure out the

161
00:05:31,440 --> 00:05:33,199
absolute minimum requirements

162
00:05:33,199 --> 00:05:35,600
and then look back at the http history

163
00:05:35,600 --> 00:05:37,280
trying to see where each of these

164
00:05:37,280 --> 00:05:39,759
required values were obtained and how

165
00:05:39,759 --> 00:05:42,400
in our case all that was needed is these

166
00:05:42,400 --> 00:05:45,199
two headers the credential or key passed

167
00:05:45,199 --> 00:05:46,880
in the authorization header and the

168
00:05:46,880 --> 00:05:48,960
device id

169
00:05:48,960 --> 00:05:50,479
let's start with this authorization key

170
00:05:50,479 --> 00:05:52,400
and look at the over authentication flow

171
00:05:52,400 --> 00:05:54,560
as we said before when the app starts it

172
00:05:54,560 --> 00:05:56,639
spawns a webview which immediately

173
00:05:56,639 --> 00:05:58,880
reaches the slash authorized endpoint of

174
00:05:58,880 --> 00:06:01,039
an identity provider server and gets

175
00:06:01,039 --> 00:06:03,440
redirect to the login page

176
00:06:03,440 --> 00:06:05,199
the user is then prompted for the their

177
00:06:05,199 --> 00:06:07,199
windvision credentials a username and

178
00:06:07,199 --> 00:06:09,680
password which the webview posts to the

179
00:06:09,680 --> 00:06:11,759
login form and gets another redirect

180
00:06:11,759 --> 00:06:13,840
back to a url which the app has

181
00:06:13,840 --> 00:06:15,919
registered for allowing for this code

182
00:06:15,919 --> 00:06:17,360
parameter to be passed back to the

183
00:06:17,360 --> 00:06:19,120
native code

184
00:06:19,120 --> 00:06:20,800
now back in the app the code is

185
00:06:20,800 --> 00:06:23,440
exchanged for a token with the idp isn't

186
00:06:23,440 --> 00:06:25,840
back in this third step

187
00:06:25,840 --> 00:06:27,280
to make one final step in the

188
00:06:27,280 --> 00:06:28,960
authentication process this time

189
00:06:28,960 --> 00:06:31,919
exchanging the token to an aws server

190
00:06:31,919 --> 00:06:34,400
for a key which is then attached to all

191
00:06:34,400 --> 00:06:36,720
api requests through the authorization

192
00:06:36,720 --> 00:06:38,479
header indicating an authenticated

193
00:06:38,479 --> 00:06:40,080
session

194
00:06:40,080 --> 00:06:42,160
so here's such an example api request

195
00:06:42,160 --> 00:06:44,800
after all this hassle the key along with

196
00:06:44,800 --> 00:06:47,199
the device id header which is probably a

197
00:06:47,199 --> 00:06:49,599
hardware identifier from what it looks

198
00:06:49,599 --> 00:06:52,639
like is sent to winds graphql api server

199
00:06:52,639 --> 00:06:54,880
to fetch user data such as favorite

200
00:06:54,880 --> 00:06:57,680
channels etc so this is it this is what

201
00:06:57,680 --> 00:06:59,360
the normal authentication flow would

202
00:06:59,360 --> 00:07:01,280
look like end to end

203
00:07:01,280 --> 00:07:02,400
but if you remember

204
00:07:02,400 --> 00:07:04,160
in the third step where the code is

205
00:07:04,160 --> 00:07:06,080
passed between the app and the webview

206
00:07:06,080 --> 00:07:08,720
we found that the url hijack is possible

207
00:07:08,720 --> 00:07:10,639
in which a malicious application could

208
00:07:10,639 --> 00:07:13,199
steal this code from the woodvision app

209
00:07:13,199 --> 00:07:15,759
and exchange it for a rogue token and

210
00:07:15,759 --> 00:07:17,919
then a rogue session key which can be

211
00:07:17,919 --> 00:07:20,160
used to reach the graphql apis and get

212
00:07:20,160 --> 00:07:21,520
all user data

213
00:07:21,520 --> 00:07:23,440
why is that even possible is it

214
00:07:23,440 --> 00:07:24,960
vulnerability in the authentication

215
00:07:24,960 --> 00:07:26,960
protocol and what is this protocol we've

216
00:07:26,960 --> 00:07:28,560
just seen anyway

217
00:07:28,560 --> 00:07:30,160
after doing some research this turned

218
00:07:30,160 --> 00:07:32,880
out to be an open id connect flow in

219
00:07:32,880 --> 00:07:35,680
short oidc uh with an authorization

220
00:07:35,680 --> 00:07:37,120
called grant

221
00:07:37,120 --> 00:07:40,400
so oidc is related to oauth2 and it has

222
00:07:40,400 --> 00:07:41,919
had its fair share of troubles in the

223
00:07:41,919 --> 00:07:45,520
past as mozilla explains oidc abuses

224
00:07:45,520 --> 00:07:48,000
oauth2 to perform authentication as

225
00:07:48,000 --> 00:07:50,240
oauth2 in itself is an authorization

226
00:07:50,240 --> 00:07:51,280
protocol

227
00:07:51,280 --> 00:07:53,199
while this is not necessarily a problem

228
00:07:53,199 --> 00:07:54,479
if used in the

229
00:07:54,479 --> 00:07:56,319
wrong circumstances it can lead to

230
00:07:56,319 --> 00:07:58,240
vulnerabilities and this is a very

231
00:07:58,240 --> 00:08:01,199
common mistake with such vulnerabilities

232
00:08:01,199 --> 00:08:04,160
reported all the way back to 2012

233
00:08:04,160 --> 00:08:06,000
this is why security extension to the

234
00:08:06,000 --> 00:08:08,000
protocol was eventually standardized

235
00:08:08,000 --> 00:08:11,280
called pixi or pkce to mitigate the

236
00:08:11,280 --> 00:08:13,520
threat authorization called interception

237
00:08:13,520 --> 00:08:15,120
and this is a threat prevalent to mobile

238
00:08:15,120 --> 00:08:16,720
labs such as wind vision where the

239
00:08:16,720 --> 00:08:18,479
authenticity of the initiating client

240
00:08:18,479 --> 00:08:20,879
cannot be guaranteed

241
00:08:20,879 --> 00:08:23,120
to do so pixi describes the creation of

242
00:08:23,120 --> 00:08:25,440
two additional parameters a state and

243
00:08:25,440 --> 00:08:27,599
the verification code which works as a

244
00:08:27,599 --> 00:08:30,160
csrf token of sorts it's initially sent

245
00:08:30,160 --> 00:08:31,919
to the idp server as part of the

246
00:08:31,919 --> 00:08:34,479
authorization request and then resend at

247
00:08:34,479 --> 00:08:37,760
the later stage when requesting a token

248
00:08:37,760 --> 00:08:40,240
and this essentially allows the idp to

249
00:08:40,240 --> 00:08:42,000
check if both requests came from the

250
00:08:42,000 --> 00:08:43,919
same client and that no codes have been

251
00:08:43,919 --> 00:08:45,279
intercepted

252
00:08:45,279 --> 00:08:47,519
so back to our case since there's no px

253
00:08:47,519 --> 00:08:50,399
implemented a badap can hijack a code

254
00:08:50,399 --> 00:08:52,160
exchange it for a rogue token and even

255
00:08:52,160 --> 00:08:53,600
get a real key

256
00:08:53,600 --> 00:08:55,040
can we use that key to appear

257
00:08:55,040 --> 00:08:57,040
authenticated to the api server that's

258
00:08:57,040 --> 00:08:58,720
achieving a full takeover

259
00:08:58,720 --> 00:09:00,720
the answer is no as we still have this

260
00:09:00,720 --> 00:09:02,640
device id header which the server needs

261
00:09:02,640 --> 00:09:03,440
so

262
00:09:03,440 --> 00:09:06,240
we're stuck that's still a missing piece

263
00:09:06,240 --> 00:09:08,160
to find out what this is we once again

264
00:09:08,160 --> 00:09:09,120
back

265
00:09:09,120 --> 00:09:10,800
we once again went back into traffic

266
00:09:10,800 --> 00:09:13,440
analysis and eventually figured out that

267
00:09:13,440 --> 00:09:15,920
the graphql server only accepted

268
00:09:15,920 --> 00:09:18,399
requests with a valid device id header

269
00:09:18,399 --> 00:09:20,240
that is one that has been previously

270
00:09:20,240 --> 00:09:22,399
generated and uploaded after the

271
00:09:22,399 --> 00:09:24,080
registration process

272
00:09:24,080 --> 00:09:26,800
so we as a malicious application can

273
00:09:26,800 --> 00:09:29,040
therefore either create and register our

274
00:09:29,040 --> 00:09:31,920
own new device id using our session key

275
00:09:31,920 --> 00:09:33,600
simulating the registration of a new

276
00:09:33,600 --> 00:09:34,640
device

277
00:09:34,640 --> 00:09:37,279
which could unfortunately replace an

278
00:09:37,279 --> 00:09:39,440
existing device as wind only allows up

279
00:09:39,440 --> 00:09:41,200
to four smartphones to be registered for

280
00:09:41,200 --> 00:09:42,959
streaming something the user would

281
00:09:42,959 --> 00:09:44,399
probably notice

282
00:09:44,399 --> 00:09:46,959
or we could just guess an existing

283
00:09:46,959 --> 00:09:49,200
previously registered device id and use

284
00:09:49,200 --> 00:09:51,839
that in our rogue requests

285
00:09:51,839 --> 00:09:53,920
so after decompiling the application and

286
00:09:53,920 --> 00:09:55,519
examining the relevant code this is how

287
00:09:55,519 --> 00:09:58,000
the responsible function looked like

288
00:09:58,000 --> 00:09:59,680
and this is how it actually looks like

289
00:09:59,680 --> 00:10:01,440
in a phone that makes a bit more sense

290
00:10:01,440 --> 00:10:03,680
we can see that it all boils down to a

291
00:10:03,680 --> 00:10:06,320
media drm instantiation which only

292
00:10:06,320 --> 00:10:09,760
accepts a constant uuid value and then

293
00:10:09,760 --> 00:10:12,320
the property array method of this object

294
00:10:12,320 --> 00:10:13,920
is called which is also past the

295
00:10:13,920 --> 00:10:15,200
constant value

296
00:10:15,200 --> 00:10:17,279
so as we can see there's no uniqueness

297
00:10:17,279 --> 00:10:19,360
there's no randomness involved this is a

298
00:10:19,360 --> 00:10:21,360
function we can copy into our bad

299
00:10:21,360 --> 00:10:23,600
application execute on the same device

300
00:10:23,600 --> 00:10:26,240
as the windvision app and always get the

301
00:10:26,240 --> 00:10:28,240
same value which means we can

302
00:10:28,240 --> 00:10:30,880
essentially regenerate the device id for

303
00:10:30,880 --> 00:10:33,279
the victim's device on demand

304
00:10:33,279 --> 00:10:36,079
okay it now looks like we've got all the

305
00:10:36,079 --> 00:10:38,079
bugs we need so let's take a step back

306
00:10:38,079 --> 00:10:40,000
and see how we can put it all together

307
00:10:40,000 --> 00:10:42,640
first we'll hijack the url and steal the

308
00:10:42,640 --> 00:10:44,240
authorization code

309
00:10:44,240 --> 00:10:46,240
then we'll abuse the insecure of two

310
00:10:46,240 --> 00:10:49,040
flow chosen to get a rogue api token

311
00:10:49,040 --> 00:10:51,600
we'll reproduce this device id for our

312
00:10:51,600 --> 00:10:54,000
victim device to attach in all

313
00:10:54,000 --> 00:10:56,079
subsequent api requests

314
00:10:56,079 --> 00:10:58,399
and finally just demonstrate our account

315
00:10:58,399 --> 00:10:59,839
cover chain with a scary toss

316
00:10:59,839 --> 00:11:01,760
notification showing some personal data

317
00:11:01,760 --> 00:11:02,800
or whatever

318
00:11:02,800 --> 00:11:05,200
which means we are now we now need such

319
00:11:05,200 --> 00:11:07,680
an example api request for demonstration

320
00:11:07,680 --> 00:11:09,200
purposes one that fetches something

321
00:11:09,200 --> 00:11:11,680
small not too sensitive but still

322
00:11:11,680 --> 00:11:14,079
personal to make a good poc this means

323
00:11:14,079 --> 00:11:16,079
we're back in superb

324
00:11:16,079 --> 00:11:17,839
so while looking in my birth blog for a

325
00:11:17,839 --> 00:11:19,920
juicy api request to perform for

326
00:11:19,920 --> 00:11:21,920
demonstration purposes i bumped into

327
00:11:21,920 --> 00:11:24,000
this one this was literally the first

328
00:11:24,000 --> 00:11:26,480
one after authenticating

329
00:11:26,480 --> 00:11:29,600
can you see anything funny

330
00:11:29,600 --> 00:11:31,120
so at this point i was wondering what

331
00:11:31,120 --> 00:11:33,279
this master pin code was but if you

332
00:11:33,279 --> 00:11:35,040
remember from a previous slide wind

333
00:11:35,040 --> 00:11:36,720
vision has this maximum number of

334
00:11:36,720 --> 00:11:38,880
devices restriction and the user should

335
00:11:38,880 --> 00:11:40,880
be able to change these four active ones

336
00:11:40,880 --> 00:11:43,040
from somewhere within the upright

337
00:11:43,040 --> 00:11:45,360
this was indeed the case the user can

338
00:11:45,360 --> 00:11:46,959
manage the devices from the application

339
00:11:46,959 --> 00:11:50,320
settings choosing devices slash accounts

340
00:11:50,320 --> 00:11:52,560
type there these master pin codes

341
00:11:52,560 --> 00:11:55,760
and then go to devices device management

342
00:11:55,760 --> 00:11:57,839
where you could remove rename et cetera

343
00:11:57,839 --> 00:11:59,760
the active devices

344
00:11:59,760 --> 00:12:02,000
so while not necessary for the account

345
00:12:02,000 --> 00:12:03,680
takeover chain as they ended up using

346
00:12:03,680 --> 00:12:05,600
the names of the registered devices for

347
00:12:05,600 --> 00:12:07,680
demonstration this handling of the

348
00:12:07,680 --> 00:12:10,000
master pin code is bad practice and

349
00:12:10,000 --> 00:12:11,200
doesn't really offer any sort of

350
00:12:11,200 --> 00:12:14,000
security to the solution

351
00:12:14,000 --> 00:12:16,160
in any case time to write this bad boy

352
00:12:16,160 --> 00:12:19,040
this is what the project looked like uh

353
00:12:19,040 --> 00:12:20,480
of the malicious application that we

354
00:12:20,480 --> 00:12:23,120
coded on the left we can see the url

355
00:12:23,120 --> 00:12:25,519
hijacking vulnerability using the intent

356
00:12:25,519 --> 00:12:27,360
filter to declare the same url scheme as

357
00:12:27,360 --> 00:12:30,160
the win as windvision and steal the code

358
00:12:30,160 --> 00:12:32,079
in the bottom right segment we can see

359
00:12:32,079 --> 00:12:34,079
the functions that executed the api

360
00:12:34,079 --> 00:12:36,639
requests needed to go from a code to a

361
00:12:36,639 --> 00:12:38,399
token and the actual function that

362
00:12:38,399 --> 00:12:40,720
reproduces the device id and in the top

363
00:12:40,720 --> 00:12:42,959
right we can see some covertness

364
00:12:42,959 --> 00:12:44,240
essentially

365
00:12:44,240 --> 00:12:46,880
to call the real app in case the

366
00:12:46,880 --> 00:12:48,560
in case anything goes wrong which is how

367
00:12:48,560 --> 00:12:50,560
real malware would behave hiding any

368
00:12:50,560 --> 00:12:53,040
malicious activity from the user

369
00:12:53,040 --> 00:12:55,519
this codes so for the proof of concept

370
00:12:55,519 --> 00:12:57,360
malicious application can be found

371
00:12:57,360 --> 00:12:58,880
online on left secures github

372
00:12:58,880 --> 00:13:01,040
repositories to play around with the app

373
00:13:01,040 --> 00:13:02,880
however is now patched and there's an

374
00:13:02,880 --> 00:13:04,800
update enforcement mechanism in place

375
00:13:04,800 --> 00:13:06,480
that will stop you from using an older

376
00:13:06,480 --> 00:13:08,639
version to try out the attack but you

377
00:13:08,639 --> 00:13:10,240
might be able to bypass that if you know

378
00:13:10,240 --> 00:13:12,399
where to look

379
00:13:12,399 --> 00:13:13,839
to show you how role looks like i've

380
00:13:13,839 --> 00:13:15,600
included a short video here of the

381
00:13:15,600 --> 00:13:18,240
end-to-end account takeover attack let's

382
00:13:18,240 --> 00:13:21,560
play this

383
00:13:24,480 --> 00:13:26,880
so as we'll see a victim user with

384
00:13:26,880 --> 00:13:30,800
the malicious app already installed

385
00:13:32,880 --> 00:13:36,959
we'll launch the windvision application

386
00:13:43,760 --> 00:13:48,040
authenticate using their credentials

387
00:13:50,560 --> 00:13:52,480
and then make this tiny mistake in the

388
00:13:52,480 --> 00:13:56,600
handler that would be presented

389
00:14:02,880 --> 00:14:04,560
which will allow the bad application to

390
00:14:04,560 --> 00:14:06,720
steal their personal data like devices

391
00:14:06,720 --> 00:14:09,519
and the pin codes

392
00:14:12,560 --> 00:14:15,040
okay so we found the vulnerabilities

393
00:14:15,040 --> 00:14:17,120
demonstrated how they can be exploited

394
00:14:17,120 --> 00:14:18,720
called an example malware application

395
00:14:18,720 --> 00:14:21,120
and all but how possible actually is all

396
00:14:21,120 --> 00:14:23,440
that as one could argue that this isn't

397
00:14:23,440 --> 00:14:26,240
realistic and this needs a specific

398
00:14:26,240 --> 00:14:27,920
malicious application installed on their

399
00:14:27,920 --> 00:14:28,880
device

400
00:14:28,880 --> 00:14:30,720
which should have survived play stores

401
00:14:30,720 --> 00:14:32,720
defenses in first place and that they

402
00:14:32,720 --> 00:14:34,800
would never fall for this wrong choice

403
00:14:34,800 --> 00:14:36,959
and the handler is prompted

404
00:14:36,959 --> 00:14:38,560
on to the first question we should keep

405
00:14:38,560 --> 00:14:40,720
in mind that we as users are very

406
00:14:40,720 --> 00:14:43,040
unlikely to scrutinize all the features

407
00:14:43,040 --> 00:14:43,760
of

408
00:14:43,760 --> 00:14:45,680
all applications we install and even if

409
00:14:45,680 --> 00:14:48,720
we would we've even seen reputable apps

410
00:14:48,720 --> 00:14:50,800
turn to bad ones whether intentionally

411
00:14:50,800 --> 00:14:52,560
or through a security breach so there's

412
00:14:52,560 --> 00:14:55,279
realistically no way to be 100 sure

413
00:14:55,279 --> 00:14:57,120
as for the second condition there are

414
00:14:57,120 --> 00:14:59,040
hundreds of cases in the news every year

415
00:14:59,040 --> 00:15:01,440
of malicious subs spotted and removed

416
00:15:01,440 --> 00:15:03,360
from playstore despite the security

417
00:15:03,360 --> 00:15:05,360
themes efforts and all the robust

418
00:15:05,360 --> 00:15:07,120
defenses in place purely due to the

419
00:15:07,120 --> 00:15:09,360
volume of apps being submitted playstore

420
00:15:09,360 --> 00:15:10,959
was actually recently found to be the

421
00:15:10,959 --> 00:15:13,199
main distribution vector for malware so

422
00:15:13,199 --> 00:15:16,560
all in all relying solely on play store

423
00:15:16,560 --> 00:15:18,320
wouldn't prevent this attack but what

424
00:15:18,320 --> 00:15:20,560
about our own defenses

425
00:15:20,560 --> 00:15:22,320
as we saw in the video this is what the

426
00:15:22,320 --> 00:15:24,079
poc application looked like on the

427
00:15:24,079 --> 00:15:25,040
handler

428
00:15:25,040 --> 00:15:26,800
the attacker has control over the icon

429
00:15:26,800 --> 00:15:28,880
the title the subtitle making it very

430
00:15:28,880 --> 00:15:31,600
easy to imitate the victim up if you

431
00:15:31,600 --> 00:15:32,480
whoops

432
00:15:32,480 --> 00:15:34,079
if you're wondering which is the correct

433
00:15:34,079 --> 00:15:37,759
safe option uh we saw before that uh

434
00:15:37,759 --> 00:15:40,399
it's the loud one surprisingly but it

435
00:15:40,399 --> 00:15:42,320
should now be more obvious why uplinks

436
00:15:42,320 --> 00:15:44,639
were invented and that is to keep users

437
00:15:44,639 --> 00:15:46,399
free of such dilemmas

438
00:15:46,399 --> 00:15:47,920
and actually just to give you an example

439
00:15:47,920 --> 00:15:49,759
of how this performs in real life every

440
00:15:49,759 --> 00:15:51,199
time i would find an issue like this in

441
00:15:51,199 --> 00:15:52,880
a client engagement i would create a

442
00:15:52,880 --> 00:15:54,880
similar poc malware application for

443
00:15:54,880 --> 00:15:56,880
demonstration and go around the office

444
00:15:56,880 --> 00:15:59,040
to try with colleagues and see which one

445
00:15:59,040 --> 00:16:01,519
they would pick and it turns out 90 of

446
00:16:01,519 --> 00:16:03,120
the times they pick the wrong option and

447
00:16:03,120 --> 00:16:04,320
these are experienced security

448
00:16:04,320 --> 00:16:06,399
consultants

449
00:16:06,399 --> 00:16:08,720
right so let's now look at the

450
00:16:08,720 --> 00:16:11,040
disclosure process and what came with it

451
00:16:11,040 --> 00:16:13,199
so i put my white hat on made a formal

452
00:16:13,199 --> 00:16:15,120
report describing all the issues that i

453
00:16:15,120 --> 00:16:17,920
found full poc video provided detailed

454
00:16:17,920 --> 00:16:20,000
remediation instructions and sent over

455
00:16:20,000 --> 00:16:22,079
to both software and wind and then

456
00:16:22,079 --> 00:16:23,680
overweight

457
00:16:23,680 --> 00:16:25,680
and wait some more

458
00:16:25,680 --> 00:16:27,519
as is the case with these situations it

459
00:16:27,519 --> 00:16:29,680
eventually took almost five months to go

460
00:16:29,680 --> 00:16:31,680
from initial contact to a past

461
00:16:31,680 --> 00:16:33,519
application being released

462
00:16:33,519 --> 00:16:35,680
i was mostly interfacing with software

463
00:16:35,680 --> 00:16:37,279
and throughout this correspondence i

464
00:16:37,279 --> 00:16:38,320
eventually found out that the

465
00:16:38,320 --> 00:16:40,000
vulnerabilities only affected wind

466
00:16:40,000 --> 00:16:42,240
vision and not all next four

467
00:16:42,240 --> 00:16:44,320
implementations as i initially thought

468
00:16:44,320 --> 00:16:46,000
although to be completely sure i had

469
00:16:46,000 --> 00:16:47,120
gone through screenshots of the

470
00:16:47,120 --> 00:16:48,800
respective iptp solutions for other

471
00:16:48,800 --> 00:16:50,959
telcos to confirm some sort of webview

472
00:16:50,959 --> 00:16:52,959
based login was used but that was not

473
00:16:52,959 --> 00:16:55,360
the case as they said

474
00:16:55,360 --> 00:16:57,040
i was also curious to see how many of

475
00:16:57,040 --> 00:16:59,440
the issues disclosed were actually fixed

476
00:16:59,440 --> 00:17:01,040
after all this time

477
00:17:01,040 --> 00:17:02,560
i'm going to leave this as an exercise

478
00:17:02,560 --> 00:17:04,880
for the audience to find out a spoiler

479
00:17:04,880 --> 00:17:06,000
not many

480
00:17:06,000 --> 00:17:08,079
and the release notes of the past

481
00:17:08,079 --> 00:17:11,599
application were also rather low profile

482
00:17:11,599 --> 00:17:13,280
that's a question i was asked a lot the

483
00:17:13,280 --> 00:17:15,839
answer is no i was not sued by either

484
00:17:15,839 --> 00:17:18,079
wind nor zap where they were actually

485
00:17:18,079 --> 00:17:20,079
very respectful and professional so no

486
00:17:20,079 --> 00:17:22,240
drama it's worth mentioning though that

487
00:17:22,240 --> 00:17:24,160
i was prepared as everyone should be

488
00:17:24,160 --> 00:17:26,000
when digging into commercial products i

489
00:17:26,000 --> 00:17:27,839
kept a copy of the terms of conditions

490
00:17:27,839 --> 00:17:29,679
and off the app before submitting my

491
00:17:29,679 --> 00:17:31,520
report i didn't mention anything about

492
00:17:31,520 --> 00:17:33,120
reverse engineering

493
00:17:33,120 --> 00:17:34,720
it didn't mention anything about revenge

494
00:17:34,720 --> 00:17:36,240
engineering and i didn't actually

495
00:17:36,240 --> 00:17:39,440
exploit any accounts so no foul play but

496
00:17:39,440 --> 00:17:41,919
uh better second sorry

497
00:17:41,919 --> 00:17:43,840
apparently i also got my 15 seconds of

498
00:17:43,840 --> 00:17:46,160
fame as there was at least one news page

499
00:17:46,160 --> 00:17:48,960
that caught wind of it fun fact i only

500
00:17:48,960 --> 00:17:51,440
found out this when making the

501
00:17:51,440 --> 00:17:53,039
presentation

502
00:17:53,039 --> 00:17:54,640
which leads us to the final section of

503
00:17:54,640 --> 00:17:55,919
this talk

504
00:17:55,919 --> 00:17:57,679
so before closing off i'd like to

505
00:17:57,679 --> 00:17:59,679
summarize with few quick tips for mobile

506
00:17:59,679 --> 00:18:02,000
developers among the audience first or

507
00:18:02,000 --> 00:18:03,840
what is hard and so are all of its

508
00:18:03,840 --> 00:18:05,280
variants

509
00:18:05,280 --> 00:18:07,120
which means that implementation marks

510
00:18:07,120 --> 00:18:09,200
will always exist just make sure to pick

511
00:18:09,200 --> 00:18:11,280
the best method for the occasion and

512
00:18:11,280 --> 00:18:12,480
implement the protocol according to

513
00:18:12,480 --> 00:18:14,880
standards do pay attention to your ipc

514
00:18:14,880 --> 00:18:16,880
endpoints this is where the code crosses

515
00:18:16,880 --> 00:18:19,200
the app boundary and do make use of

516
00:18:19,200 --> 00:18:21,919
https if using a custom url scheme like

517
00:18:21,919 --> 00:18:23,600
wind vision did so that you could

518
00:18:23,600 --> 00:18:25,679
leverage secure uplinks that keep the

519
00:18:25,679 --> 00:18:28,160
users safe and free of confusing prompts

520
00:18:28,160 --> 00:18:30,240
when generating ids employ some

521
00:18:30,240 --> 00:18:32,720
randomness so that no one can can

522
00:18:32,720 --> 00:18:34,240
recalculate them

523
00:18:34,240 --> 00:18:36,080
and finally keep application level

524
00:18:36,080 --> 00:18:37,919
authentication credentials local if

525
00:18:37,919 --> 00:18:40,080
possible such as pin codes don't send

526
00:18:40,080 --> 00:18:41,760
them to the server don't get them from

527
00:18:41,760 --> 00:18:44,240
the server and use secure apis like the

528
00:18:44,240 --> 00:18:46,240
android keystone to store and check them

529
00:18:46,240 --> 00:18:47,679
locally

530
00:18:47,679 --> 00:18:49,280
for researchers watching this i'd like

531
00:18:49,280 --> 00:18:51,520
to encourage you to give it a shot do

532
00:18:51,520 --> 00:18:53,360
thinking with the apps you use every day

533
00:18:53,360 --> 00:18:55,360
you might find interesting bugs if you

534
00:18:55,360 --> 00:18:57,520
do find something don't stop there cover

535
00:18:57,520 --> 00:18:59,280
as much of the attack surface as you can

536
00:18:59,280 --> 00:19:01,360
looking at the whole picture which could

537
00:19:01,360 --> 00:19:03,360
allow you to discover more issues

538
00:19:03,360 --> 00:19:06,000
although seemingly low impact as it may

539
00:19:06,000 --> 00:19:07,760
be possible to combine them and come up

540
00:19:07,760 --> 00:19:10,320
with something of greater effect and

541
00:19:10,320 --> 00:19:12,000
finally i'd like to thank a few people

542
00:19:12,000 --> 00:19:14,480
for their contributions first of all oli

543
00:19:14,480 --> 00:19:16,080
who took the unattractive role of

544
00:19:16,080 --> 00:19:18,080
reviewing my initial blog post which was

545
00:19:18,080 --> 00:19:20,240
very bad in the beginning it is i think

546
00:19:20,240 --> 00:19:23,120
a bit more okay now thanks to him rhian

547
00:19:23,120 --> 00:19:24,799
for really helping me go public with the

548
00:19:24,799 --> 00:19:26,559
research and just constantly telling

549
00:19:26,559 --> 00:19:28,000
people about this afterwards so that i

550
00:19:28,000 --> 00:19:29,840
didn't have to ken

551
00:19:29,840 --> 00:19:32,799
from f-secure's us office he knows why

552
00:19:32,799 --> 00:19:34,880
jay for reaching out to invite me to

553
00:19:34,880 --> 00:19:36,320
woodcom making this presentation a

554
00:19:36,320 --> 00:19:39,039
reality and last but not least my father

555
00:19:39,039 --> 00:19:40,480
who provided the actual windvision

556
00:19:40,480 --> 00:19:42,720
account that i use for testing the ids

557
00:19:42,720 --> 00:19:44,559
and tokens of which you saw on all

558
00:19:44,559 --> 00:19:46,559
slides and by the way these all still

559
00:19:46,559 --> 00:19:48,320
work months after their requests were

560
00:19:48,320 --> 00:19:50,080
initially captured so i had to redact

561
00:19:50,080 --> 00:19:51,520
them all

562
00:19:51,520 --> 00:19:54,080
and this is it hopefully just in time

563
00:19:54,080 --> 00:19:55,600
thanks for watching and enjoy the rest

564
00:19:55,600 --> 00:19:59,559
of the event the planet

