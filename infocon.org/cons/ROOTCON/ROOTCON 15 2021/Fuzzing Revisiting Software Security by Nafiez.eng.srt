1
00:00:01,839 --> 00:00:04,640
hello hi my name is nafis uh today i

2
00:00:04,640 --> 00:00:06,319
would like to talk about fuzzing

3
00:00:06,319 --> 00:00:09,280
revisiting software security uh thanks

4
00:00:09,280 --> 00:00:12,160
to the organizer root con 15 uh

5
00:00:12,160 --> 00:00:16,160
for the invite this year so about me uh

6
00:00:16,160 --> 00:00:18,480
i'm an independent security practitioner

7
00:00:18,480 --> 00:00:21,039
uh located in malaysia with patient in

8
00:00:21,039 --> 00:00:23,039
vulnerability research fuzzing reverse

9
00:00:23,039 --> 00:00:24,800
engineering and exploit development

10
00:00:24,800 --> 00:00:27,599
during my free time i like to play rc

11
00:00:27,599 --> 00:00:30,160
drift some of my notable works can be

12
00:00:30,160 --> 00:00:33,440
found in the link below

13
00:00:33,440 --> 00:00:36,800
so uh talking about software security so

14
00:00:36,800 --> 00:00:39,280
uh we are still we looked into the uh

15
00:00:39,280 --> 00:00:42,640
what what makes this still fair we we do

16
00:00:42,640 --> 00:00:45,440
see a lot of improvement has been done

17
00:00:45,440 --> 00:00:47,600
in the past and a lot of

18
00:00:47,600 --> 00:00:50,559
mitigations takes place and a lot of

19
00:00:50,559 --> 00:00:53,120
research papers are being uh

20
00:00:53,120 --> 00:00:56,000
out there and a lot of things that

21
00:00:56,000 --> 00:00:59,120
we have been reading but we do still

22
00:00:59,120 --> 00:01:03,120
see this thing uh as fail so uh for the

23
00:01:03,120 --> 00:01:04,640
example like a lack of secure

24
00:01:04,640 --> 00:01:07,200
development life cycle we do still see a

25
00:01:07,200 --> 00:01:10,080
lot of companies that are still fail and

26
00:01:10,080 --> 00:01:13,200
uh implementing sdlc in their

27
00:01:13,200 --> 00:01:16,880
uh and their software development and

28
00:01:16,880 --> 00:01:19,680
and of course the the main problem is uh

29
00:01:19,680 --> 00:01:22,159
we always see is the ignorance

30
00:01:22,159 --> 00:01:24,799
from the vendor by trying to avoid fixes

31
00:01:24,799 --> 00:01:27,600
so we do see a lot of companies of uh

32
00:01:27,600 --> 00:01:30,240
even the large tech vendors as well

33
00:01:30,240 --> 00:01:33,119
trying to deny to fix the vulnerability

34
00:01:33,119 --> 00:01:35,600
or security issue because they're there

35
00:01:35,600 --> 00:01:38,560
they will see like uh the issue is

36
00:01:38,560 --> 00:01:40,640
actually just a small method for them

37
00:01:40,640 --> 00:01:42,799
but they don't know the impact that uh

38
00:01:42,799 --> 00:01:44,880
affecting customers millions of

39
00:01:44,880 --> 00:01:47,600
customers a lot of customers special

40
00:01:47,600 --> 00:01:50,799
customers and so on so this

41
00:01:50,799 --> 00:01:52,960
ignorance from the vendor is basically

42
00:01:52,960 --> 00:01:56,479
why we still see all of this fail

43
00:01:56,479 --> 00:01:58,799
and of course our script is expensive we

44
00:01:58,799 --> 00:02:01,360
started to see a lot of

45
00:02:01,360 --> 00:02:03,600
companies a lot of our

46
00:02:03,600 --> 00:02:06,079
financial institutions and many other

47
00:02:06,079 --> 00:02:08,720
industries started to uh to hire

48
00:02:08,720 --> 00:02:11,360
security experts but of course we we

49
00:02:11,360 --> 00:02:13,760
need to know that uh there's a lot of

50
00:02:13,760 --> 00:02:16,560
money uh cash flow out in order to to

51
00:02:16,560 --> 00:02:18,480
get the expert to work in their

52
00:02:18,480 --> 00:02:21,280
environment so yeah so and of course

53
00:02:21,280 --> 00:02:24,560
this is why we still see it as a failure

54
00:02:24,560 --> 00:02:27,200
because uh security itself is expensive

55
00:02:27,200 --> 00:02:29,040
we don't talk about the people that we

56
00:02:29,040 --> 00:02:30,480
hire but

57
00:02:30,480 --> 00:02:32,480
the parameter security parameters that

58
00:02:32,480 --> 00:02:33,680
are being

59
00:02:33,680 --> 00:02:35,920
deployed on the environment imagine how

60
00:02:35,920 --> 00:02:38,800
much the cost to build uh those things

61
00:02:38,800 --> 00:02:40,319
so like if you are building like a

62
00:02:40,319 --> 00:02:42,160
threat intelligence team there's a lot

63
00:02:42,160 --> 00:02:42,879
of

64
00:02:42,879 --> 00:02:45,840
parameters or there's a lot of

65
00:02:45,840 --> 00:02:49,280
feeds or any other things that you are

66
00:02:49,280 --> 00:02:51,680
trying to implement as part of your team

67
00:02:51,680 --> 00:02:54,319
so uh same goes to uh

68
00:02:54,319 --> 00:02:56,560
the different area or different domain

69
00:02:56,560 --> 00:02:59,280
in security uh everything requires a lot

70
00:02:59,280 --> 00:03:01,040
of money so

71
00:03:01,040 --> 00:03:03,519
yeah security is expensive

72
00:03:03,519 --> 00:03:05,040
and then the next one third-party

73
00:03:05,040 --> 00:03:06,560
software developer do not follow

74
00:03:06,560 --> 00:03:07,760
mitigation

75
00:03:07,760 --> 00:03:11,120
fueled by microsoft we do see a lot of

76
00:03:11,120 --> 00:03:14,480
companies that fail to implement slr

77
00:03:14,480 --> 00:03:15,680
it's just a

78
00:03:15,680 --> 00:03:17,920
small matter right where you open uh

79
00:03:17,920 --> 00:03:21,360
visual studio and then you can set the

80
00:03:21,360 --> 00:03:24,799
slr and and of course some vendors like

81
00:03:24,799 --> 00:03:26,640
in the past i used to work on some

82
00:03:26,640 --> 00:03:29,280
vendors where i asked them like and for

83
00:03:29,280 --> 00:03:32,879
them like why slr is not enabled it's

84
00:03:32,879 --> 00:03:35,120
easy to enable it in the compiler

85
00:03:35,120 --> 00:03:36,480
because the

86
00:03:36,480 --> 00:03:39,040
thing is uh is exist it's just that you

87
00:03:39,040 --> 00:03:42,080
just choose the option yes or no to

88
00:03:42,080 --> 00:03:45,440
enable the uh slr something like that

89
00:03:45,440 --> 00:03:48,000
and yeah we we still seeing this until

90
00:03:48,000 --> 00:03:51,440
today in 2021 where the vendors uh

91
00:03:51,440 --> 00:03:53,840
or any other third party uh software

92
00:03:53,840 --> 00:03:56,400
developer still fell follow all these

93
00:03:56,400 --> 00:03:58,879
mitigations that's just the simple

94
00:03:58,879 --> 00:04:02,000
mitigations how about the the next next

95
00:04:02,000 --> 00:04:04,720
gen uh mitigations right now

96
00:04:04,720 --> 00:04:07,280
because uh we started to see explorer

97
00:04:07,280 --> 00:04:10,560
developments uh started to getting uh

98
00:04:10,560 --> 00:04:11,439
harder

99
00:04:11,439 --> 00:04:14,400
however due to the software developer uh

100
00:04:14,400 --> 00:04:16,880
on the third party uh software's uh

101
00:04:16,880 --> 00:04:19,279
still fair uh follow all of these

102
00:04:19,279 --> 00:04:20,880
mitigations

103
00:04:20,880 --> 00:04:24,000
and yeah uh i do uh have spoken on some

104
00:04:24,000 --> 00:04:26,000
vendors as well last time

105
00:04:26,000 --> 00:04:28,320
where don't they don't prioritize uh

106
00:04:28,320 --> 00:04:31,680
security where they see security is like

107
00:04:31,680 --> 00:04:33,919
just a small matter

108
00:04:33,919 --> 00:04:35,600
they don't uh

109
00:04:35,600 --> 00:04:37,840
they don't see this as a

110
00:04:37,840 --> 00:04:40,160
important uh affecting their customers

111
00:04:40,160 --> 00:04:41,520
it's just that they know how to make

112
00:04:41,520 --> 00:04:44,560
money so yeah we can't do much on that

113
00:04:44,560 --> 00:04:47,919
but of course yeah we can still uh tell

114
00:04:47,919 --> 00:04:49,919
them like this is something that need to

115
00:04:49,919 --> 00:04:52,720
be prioritized imagine that some bad

116
00:04:52,720 --> 00:04:53,680
guys

117
00:04:53,680 --> 00:04:56,639
or maybe advisorial that are

118
00:04:56,639 --> 00:04:58,960
leveraging issues or security issues on

119
00:04:58,960 --> 00:05:00,720
the software

120
00:05:00,720 --> 00:05:03,680
and they abuse those software just

121
00:05:03,680 --> 00:05:06,000
to bypass parameters even though how our

122
00:05:06,000 --> 00:05:08,080
strength their security parameters there

123
00:05:08,080 --> 00:05:10,800
is if the software is still vulnerable

124
00:05:10,800 --> 00:05:13,600
it's uh still a big issue for them so

125
00:05:13,600 --> 00:05:15,759
this is why we are still seeing all of

126
00:05:15,759 --> 00:05:16,720
this

127
00:05:16,720 --> 00:05:18,639
fail even though uh software security

128
00:05:18,639 --> 00:05:20,479
has been improved uh like we see

129
00:05:20,479 --> 00:05:22,960
microsoft started to killing bug classes

130
00:05:22,960 --> 00:05:25,600
and so on right and we know that all of

131
00:05:25,600 --> 00:05:29,120
this matter is not only uh

132
00:05:29,120 --> 00:05:31,360
from the major vendor like

133
00:05:31,360 --> 00:05:34,160
microsoft but those third party software

134
00:05:34,160 --> 00:05:35,840
developers or third party software

135
00:05:35,840 --> 00:05:38,160
vendors are required to follow all of

136
00:05:38,160 --> 00:05:40,400
this stuff in order to make these things

137
00:05:40,400 --> 00:05:42,160
a success because

138
00:05:42,160 --> 00:05:44,400
the guidance is there it's just that no

139
00:05:44,400 --> 00:05:46,240
one follow it because

140
00:05:46,240 --> 00:05:49,039
the reason maybe performance issues

141
00:05:49,039 --> 00:05:51,120
is not applicable to their environment

142
00:05:51,120 --> 00:05:53,680
and they don't have experts on doing

143
00:05:53,680 --> 00:05:56,560
doing so they don't have uh much money

144
00:05:56,560 --> 00:05:59,600
to spend on security so yeah

145
00:05:59,600 --> 00:06:02,080
that's that's why we still see this as a

146
00:06:02,080 --> 00:06:04,479
failure

147
00:06:04,560 --> 00:06:07,120
so uh yeah uh like i mentioned uh

148
00:06:07,120 --> 00:06:09,120
earlier about microsoft has improved the

149
00:06:09,120 --> 00:06:11,919
security uh by killing and emulating uh

150
00:06:11,919 --> 00:06:14,639
classes we do and we can see a talk from

151
00:06:14,639 --> 00:06:17,280
escape from microsoft where they started

152
00:06:17,280 --> 00:06:18,800
to kill a lot of the vulnerability

153
00:06:18,800 --> 00:06:19,680
classes

154
00:06:19,680 --> 00:06:20,479
and

155
00:06:20,479 --> 00:06:21,440
and

156
00:06:21,440 --> 00:06:23,039
and these are being implemented in the

157
00:06:23,039 --> 00:06:25,280
operating system to avoid all of these

158
00:06:25,280 --> 00:06:29,680
uh so we do see these uh uh uh

159
00:06:29,680 --> 00:06:32,240
chances from uh from the vendors itself

160
00:06:32,240 --> 00:06:34,160
major vendors itself right we we just

161
00:06:34,160 --> 00:06:36,240
followed the guidelines to to make it

162
00:06:36,240 --> 00:06:39,360
secure and so on and yeah uh expert

163
00:06:39,360 --> 00:06:41,280
mitigations on different aspects uh

164
00:06:41,280 --> 00:06:43,199
vulnerability become useless uh due to

165
00:06:43,199 --> 00:06:44,880
these mitigations uh

166
00:06:44,880 --> 00:06:47,120
most of the time volunteer nowadays

167
00:06:47,120 --> 00:06:50,160
become useless where you just uh

168
00:06:50,160 --> 00:06:52,319
assuming that you fast something and

169
00:06:52,319 --> 00:06:54,560
then you have a lot of findings and then

170
00:06:54,560 --> 00:06:56,960
by looking into your results you started

171
00:06:56,960 --> 00:06:58,880
to see like all of your findings are not

172
00:06:58,880 --> 00:07:00,800
going to reference something like that

173
00:07:00,800 --> 00:07:02,160
when you're submitting or writing an

174
00:07:02,160 --> 00:07:04,240
expert for that it's almost impossible

175
00:07:04,240 --> 00:07:06,160
because you don't have anything to

176
00:07:06,160 --> 00:07:07,840
reference all your point or whatever

177
00:07:07,840 --> 00:07:10,639
data you are trying to exploit it

178
00:07:10,639 --> 00:07:13,680
so uh nowadays uh uh what uh we have

179
00:07:13,680 --> 00:07:15,759
started to see also is finding warranty

180
00:07:15,759 --> 00:07:18,080
is hard it's just that the better we

181
00:07:18,080 --> 00:07:20,000
rely on the uh maybe a third party

182
00:07:20,000 --> 00:07:22,240
software like maybe antivirus like in

183
00:07:22,240 --> 00:07:24,400
the past i did a research on that

184
00:07:24,400 --> 00:07:26,960
and uh and also we started to see like a

185
00:07:26,960 --> 00:07:28,479
competitor between uh researchers

186
00:07:28,479 --> 00:07:31,440
vendors and boutique firms so we mean we

187
00:07:31,440 --> 00:07:33,680
can tell like uh finn spy

188
00:07:33,680 --> 00:07:35,680
a lot of bugs or vulnerabilities being

189
00:07:35,680 --> 00:07:37,759
used in there it's just that the matter

190
00:07:37,759 --> 00:07:38,560
on

191
00:07:38,560 --> 00:07:40,319
on the uh what

192
00:07:40,319 --> 00:07:42,400
we're seeing here basically

193
00:07:42,400 --> 00:07:44,160
is it from the researchers from the

194
00:07:44,160 --> 00:07:46,479
vendors oh after 10 years being

195
00:07:46,479 --> 00:07:48,800
exploited then that's what we started to

196
00:07:48,800 --> 00:07:50,000
like uh

197
00:07:50,000 --> 00:07:51,919
notice that uh something happening it's

198
00:07:51,919 --> 00:07:55,120
just it's just that we don't see it

199
00:07:55,120 --> 00:07:57,840
so yeah we started to see as well expert

200
00:07:57,840 --> 00:07:59,840
development costly uh

201
00:07:59,840 --> 00:08:02,000
we know that the expert development is

202
00:08:02,000 --> 00:08:04,800
really uh uh requiring a lot of money

203
00:08:04,800 --> 00:08:06,639
right in order for for

204
00:08:06,639 --> 00:08:09,599
large for anyone to to buy those things

205
00:08:09,599 --> 00:08:12,080
and and of course uh if you uh providing

206
00:08:12,080 --> 00:08:15,120
those to uh party vendor like cdi or any

207
00:08:15,120 --> 00:08:17,440
other boutique film right uh depends on

208
00:08:17,440 --> 00:08:19,520
the uh on the criticality of the experts

209
00:08:19,520 --> 00:08:21,919
and and how far you can write the expert

210
00:08:21,919 --> 00:08:24,240
because uh nowadays uh writing an

211
00:08:24,240 --> 00:08:26,879
exploit is not an easy task because you

212
00:08:26,879 --> 00:08:29,199
are required to change multiple bugs in

213
00:08:29,199 --> 00:08:33,120
order to successfully exploiting those

214
00:08:33,120 --> 00:08:35,919
so uh hunting for vulnerability right uh

215
00:08:35,919 --> 00:08:37,200
in general

216
00:08:37,200 --> 00:08:39,360
usually i started from lowe's hanging

217
00:08:39,360 --> 00:08:41,839
fruit to the complex part so in the

218
00:08:41,839 --> 00:08:43,760
previous work that i did

219
00:08:43,760 --> 00:08:46,399
presented in a power of community in

220
00:08:46,399 --> 00:08:47,920
south korea

221
00:08:47,920 --> 00:08:50,000
on the hunting volunteering antivirus

222
00:08:50,000 --> 00:08:52,560
covering various issues

223
00:08:52,560 --> 00:08:54,480
and methods as well

224
00:08:54,480 --> 00:08:56,160
in order to exploit it there we started

225
00:08:56,160 --> 00:08:58,320
to look into like a

226
00:08:58,320 --> 00:09:00,480
dll hijacked that can

227
00:09:00,480 --> 00:09:02,640
escalate to privilege uh

228
00:09:02,640 --> 00:09:05,600
higher level and and to uh web api web

229
00:09:05,600 --> 00:09:07,279
socket and many other things many

230
00:09:07,279 --> 00:09:10,000
aspects obvious we are looking into so

231
00:09:10,000 --> 00:09:12,800
those the lower singing fruit are just a

232
00:09:12,800 --> 00:09:15,760
easy task to to find one but uh and of

233
00:09:15,760 --> 00:09:19,040
course a lot of reverse engineering uh

234
00:09:19,040 --> 00:09:20,720
required to do

235
00:09:20,720 --> 00:09:23,440
in order to successfully find those

236
00:09:23,440 --> 00:09:26,480
uh the methods are similar to like uh

237
00:09:26,480 --> 00:09:29,040
in the past where i did uh hunting bugs

238
00:09:29,040 --> 00:09:31,200
on davies because i did the fuzzings as

239
00:09:31,200 --> 00:09:33,760
well on the antivirus

240
00:09:33,760 --> 00:09:37,360
on the major antivirus vendors and we do

241
00:09:37,360 --> 00:09:40,080
found a lot of like

242
00:09:40,080 --> 00:09:42,320
antivirus engines uh vulnerability like

243
00:09:42,320 --> 00:09:44,240
the the passers

244
00:09:44,240 --> 00:09:46,399
and the processing uh

245
00:09:46,399 --> 00:09:48,640
scanners and so on so many other things

246
00:09:48,640 --> 00:09:51,839
that uh the methods are similar to like

247
00:09:51,839 --> 00:09:53,519
if you find on the different

248
00:09:53,519 --> 00:09:55,920
applications it's just that uh depending

249
00:09:55,920 --> 00:09:58,080
on the target like how how you want to

250
00:09:58,080 --> 00:10:00,240
achieve those uh in order for you to

251
00:10:00,240 --> 00:10:02,240
exploit the things or you want to find

252
00:10:02,240 --> 00:10:03,279
bugs

253
00:10:03,279 --> 00:10:05,120
and of course are studying other

254
00:10:05,120 --> 00:10:07,040
researchers write-ups and analyze from

255
00:10:07,040 --> 00:10:09,040
scratch to understand how it works it's

256
00:10:09,040 --> 00:10:11,839
important it helps to identify bugs and

257
00:10:11,839 --> 00:10:14,720
ideas on how to exploiting it so this is

258
00:10:14,720 --> 00:10:16,720
uh the most important thing like

259
00:10:16,720 --> 00:10:18,640
well we don't know everything right in

260
00:10:18,640 --> 00:10:21,120
the world uh of course like uh

261
00:10:21,120 --> 00:10:23,760
we need to know that someone has the new

262
00:10:23,760 --> 00:10:26,399
technique or the easiest way to write

263
00:10:26,399 --> 00:10:28,240
exploits and so on right or easiest way

264
00:10:28,240 --> 00:10:31,200
to find bugs and yeah we do have to like

265
00:10:31,200 --> 00:10:33,760
a study on how do they discover it and

266
00:10:33,760 --> 00:10:36,160
how do they write it and and maybe from

267
00:10:36,160 --> 00:10:38,480
that idea that you have been reading you

268
00:10:38,480 --> 00:10:41,200
get more idea like on on how to enhance

269
00:10:41,200 --> 00:10:43,279
those in order for you to

270
00:10:43,279 --> 00:10:44,959
be more successful

271
00:10:44,959 --> 00:10:46,800
so yeah it's

272
00:10:46,800 --> 00:10:48,640
it's like a competition but uh in

273
00:10:48,640 --> 00:10:50,720
different domains so

274
00:10:50,720 --> 00:10:53,040
yeah and of course reverse engineering

275
00:10:53,040 --> 00:10:55,040
patches and updates is important as well

276
00:10:55,040 --> 00:10:56,800
to understand like

277
00:10:56,800 --> 00:10:58,240
you don't know uh

278
00:10:58,240 --> 00:11:00,959
this cv is being assigned right and ways

279
00:11:00,959 --> 00:11:03,200
the bug lies on so uh

280
00:11:03,200 --> 00:11:04,720
reverse engineering the pages and

281
00:11:04,720 --> 00:11:06,640
updates is uh important to understand

282
00:11:06,640 --> 00:11:09,120
like what has been fixed by the vendors

283
00:11:09,120 --> 00:11:13,040
and what uh or why these things are

284
00:11:13,040 --> 00:11:15,839
not exist on the new version or do a new

285
00:11:15,839 --> 00:11:18,240
patch and the old one it's still there

286
00:11:18,240 --> 00:11:20,800
so from there you can tell that uh if

287
00:11:20,800 --> 00:11:21,760
you

288
00:11:21,760 --> 00:11:23,360
have a strong background in reverse

289
00:11:23,360 --> 00:11:25,279
engineering you should be able to tell

290
00:11:25,279 --> 00:11:28,480
like on how to craft the exploits and or

291
00:11:28,480 --> 00:11:29,839
how to craft the

292
00:11:29,839 --> 00:11:31,600
proof of concept that's the important

293
00:11:31,600 --> 00:11:33,360
thing you understand the bug is there

294
00:11:33,360 --> 00:11:36,959
it's just that on how you want to uh

295
00:11:36,959 --> 00:11:39,040
achieve to the target or the one that

296
00:11:39,040 --> 00:11:43,040
you want to try to look into

297
00:11:43,040 --> 00:11:45,279
so easiest way to hunt for vulnerability

298
00:11:45,279 --> 00:11:47,920
is the access to the source code however

299
00:11:47,920 --> 00:11:49,200
not all

300
00:11:49,200 --> 00:11:51,360
source code is available to public right

301
00:11:51,360 --> 00:11:52,079
like

302
00:11:52,079 --> 00:11:54,880
the only thing that we are seeing is

303
00:11:54,880 --> 00:11:56,399
on the open source program

304
00:11:56,399 --> 00:11:58,639
so i did uh open source uh fuzzing as

305
00:11:58,639 --> 00:12:01,040
well in the past but uh

306
00:12:01,040 --> 00:12:04,079
for me it's pretty easy to to to do the

307
00:12:04,079 --> 00:12:06,000
uh fuzzing and so on right or hunt for

308
00:12:06,000 --> 00:12:08,160
vulnerability but yeah something

309
00:12:08,160 --> 00:12:10,720
challenging like uh

310
00:12:10,720 --> 00:12:13,760
just a dot exes file right and then

311
00:12:13,760 --> 00:12:15,040
you started from there and you don't

312
00:12:15,040 --> 00:12:17,040
know where you where you want to end and

313
00:12:17,040 --> 00:12:18,480
sometimes uh

314
00:12:18,480 --> 00:12:21,040
if you are like overwhelmed or

315
00:12:21,040 --> 00:12:23,040
you you might end up to a rabbit hole so

316
00:12:23,040 --> 00:12:24,800
those are important things

317
00:12:24,800 --> 00:12:27,040
uh

318
00:12:27,040 --> 00:12:29,200
yeah a lot of our reverse engineering uh

319
00:12:29,200 --> 00:12:31,600
process uh basically is uh involved here

320
00:12:31,600 --> 00:12:33,760
it's just that uh

321
00:12:33,760 --> 00:12:36,399
we need to be smart on not to analyze

322
00:12:36,399 --> 00:12:38,240
everything because by the time for

323
00:12:38,240 --> 00:12:40,240
example like id and pro

324
00:12:40,240 --> 00:12:44,079
load a program and yeah uh you

325
00:12:44,079 --> 00:12:46,399
you you can tell that uh where you want

326
00:12:46,399 --> 00:12:49,600
to start it's not like uh you the idea

327
00:12:49,600 --> 00:12:50,959
load the

328
00:12:50,959 --> 00:12:53,360
executables and you started from the one

329
00:12:53,360 --> 00:12:55,440
that you see on this on your screen but

330
00:12:55,440 --> 00:12:58,959
yeah uh in fact that you have to find

331
00:12:58,959 --> 00:13:00,160
where is the

332
00:13:00,160 --> 00:13:02,639
program uh try to do

333
00:13:02,639 --> 00:13:05,200
processing or maybe parsing so that's

334
00:13:05,200 --> 00:13:07,760
the place that you wanted to look into

335
00:13:07,760 --> 00:13:09,440
and of course yeah reverse engineering

336
00:13:09,440 --> 00:13:12,079
is hard uh it requires the passions and

337
00:13:12,079 --> 00:13:13,600
and a lot of

338
00:13:13,600 --> 00:13:16,240
patience just a patience right now

339
00:13:16,240 --> 00:13:17,839
sometimes it's uh

340
00:13:17,839 --> 00:13:20,399
you you might end up like

341
00:13:20,399 --> 00:13:22,959
want to hope

342
00:13:22,959 --> 00:13:24,480
had your

343
00:13:24,480 --> 00:13:26,720
bang your head to the wall right because

344
00:13:26,720 --> 00:13:28,399
you you don't know like how the things

345
00:13:28,399 --> 00:13:30,639
work because uh like if you are

346
00:13:30,639 --> 00:13:32,720
compiling your program for example it

347
00:13:32,720 --> 00:13:34,959
includes a structure right you you don't

348
00:13:34,959 --> 00:13:36,320
see a structure in

349
00:13:36,320 --> 00:13:38,480
assembly so you need to figure out like

350
00:13:38,480 --> 00:13:41,519
on how to make the structure uh how how

351
00:13:41,519 --> 00:13:44,160
how you can find a similar structure how

352
00:13:44,160 --> 00:13:46,959
you want to construct something similar

353
00:13:46,959 --> 00:13:50,320
uh so yeah uh one way to approach uh on

354
00:13:50,320 --> 00:13:52,079
hunting and vulnerability is to fast a

355
00:13:52,079 --> 00:13:55,040
program uh fuzzing uh basically fun

356
00:13:55,040 --> 00:13:58,160
uh but it's hard to uh and a cause a

357
00:13:58,160 --> 00:14:00,240
disappointment and it's similar to

358
00:14:00,240 --> 00:14:02,079
reverse engineering because

359
00:14:02,079 --> 00:14:04,560
things like a fuzzing if you don't know

360
00:14:04,560 --> 00:14:05,839
the starting point or you don't know

361
00:14:05,839 --> 00:14:07,839
what is happening on the program itself

362
00:14:07,839 --> 00:14:09,199
right you never

363
00:14:09,199 --> 00:14:10,560
see

364
00:14:10,560 --> 00:14:12,079
what you want to target you just are

365
00:14:12,079 --> 00:14:13,040
blindly

366
00:14:13,040 --> 00:14:15,680
fuzzing it and you get the results but

367
00:14:15,680 --> 00:14:17,360
in fact you don't understand how the

368
00:14:17,360 --> 00:14:18,959
things work you there's a lot of

369
00:14:18,959 --> 00:14:21,600
publicly available fuzz out there from

370
00:14:21,600 --> 00:14:25,600
the dumb fuzzy fuzzer to the uh smart

371
00:14:25,600 --> 00:14:27,920
code coverage fuzzer so those are the

372
00:14:27,920 --> 00:14:29,600
important things to understand like uh

373
00:14:29,600 --> 00:14:31,760
you you can start from the damn fuzzer

374
00:14:31,760 --> 00:14:34,560
to the uh the smart fuzzer and

375
00:14:34,560 --> 00:14:36,880
you can find the difference there and

376
00:14:36,880 --> 00:14:39,839
and and you know to hunt for the next

377
00:14:39,839 --> 00:14:42,079
variant or something like

378
00:14:42,079 --> 00:14:45,079
related

379
00:14:49,279 --> 00:14:52,399
all right so next one fuzzing approach

380
00:14:52,399 --> 00:14:56,079
so uh my methods methodology are still

381
00:14:56,079 --> 00:14:58,480
relying on traditional methods such file

382
00:14:58,480 --> 00:15:00,240
format fuzzing

383
00:15:00,240 --> 00:15:03,199
i like to do a mutational on byte and

384
00:15:03,199 --> 00:15:04,079
beat

385
00:15:04,079 --> 00:15:08,000
i will call it for the win because

386
00:15:08,000 --> 00:15:10,399
we never know that if the program has

387
00:15:10,399 --> 00:15:12,959
been patched right and then uh

388
00:15:12,959 --> 00:15:14,959
and then assuming that you perform a

389
00:15:14,959 --> 00:15:17,279
variant hunting you should be able to

390
00:15:17,279 --> 00:15:19,760
catch more bugs actually it's just that

391
00:15:19,760 --> 00:15:21,600
you need to know how to play on those

392
00:15:21,600 --> 00:15:24,320
beats or the bytes whatever that you are

393
00:15:24,320 --> 00:15:26,959
targeting to so uh traditional method is

394
00:15:26,959 --> 00:15:29,759
basically uh workable uh until today

395
00:15:29,759 --> 00:15:32,560
it's just that it might be too slow or

396
00:15:32,560 --> 00:15:34,560
it might be uh

397
00:15:34,560 --> 00:15:36,880
real uh end up like and you don't find

398
00:15:36,880 --> 00:15:39,199
anything so you need to be smart on like

399
00:15:39,199 --> 00:15:41,680
how you want to make the things works

400
00:15:41,680 --> 00:15:43,199
properly

401
00:15:43,199 --> 00:15:46,639
and yeah so perform variant hunting apis

402
00:15:46,639 --> 00:15:48,720
functions are important because you uh

403
00:15:48,720 --> 00:15:50,560
you need to understand like

404
00:15:50,560 --> 00:15:53,199
this function or this apis it tries to

405
00:15:53,199 --> 00:15:56,639
uh do something if it is uh batch you

406
00:15:56,639 --> 00:15:59,199
can see the in the previous unpatched

407
00:15:59,199 --> 00:16:02,160
version and you can understand like what

408
00:16:02,160 --> 00:16:04,320
is being implemented or there might be

409
00:16:04,320 --> 00:16:07,040
another attack surface that uh

410
00:16:07,040 --> 00:16:09,120
introduced there it's just that you we

411
00:16:09,120 --> 00:16:12,320
need to figure out like how to uh to

412
00:16:12,320 --> 00:16:14,000
reach to the target or to that

413
00:16:14,000 --> 00:16:17,040
particular point that we want to fast

414
00:16:17,040 --> 00:16:20,079
uh dumb and smart fuzzers uh

415
00:16:20,079 --> 00:16:22,560
uh most of the time you can find the

416
00:16:22,560 --> 00:16:25,360
custom one on github and publicly

417
00:16:25,360 --> 00:16:28,480
available like a bf app when fl and many

418
00:16:28,480 --> 00:16:30,959
other things so we do see a lot of our

419
00:16:30,959 --> 00:16:33,440
causes are being improved like fl

420
00:16:33,440 --> 00:16:35,440
there's a lot of

421
00:16:35,440 --> 00:16:38,560
versions from windows to the uh linux

422
00:16:38,560 --> 00:16:41,759
and codes and yeah so many things that

423
00:16:41,759 --> 00:16:44,399
are being improved uh it's just that

424
00:16:44,399 --> 00:16:46,800
the optimizations and

425
00:16:46,800 --> 00:16:48,839
code coverage guided so the

426
00:16:48,839 --> 00:16:51,440
instrumentations are important as well

427
00:16:51,440 --> 00:16:54,720
uh to to successfully uh

428
00:16:54,720 --> 00:16:58,480
or you have a fuzzy project

429
00:16:58,720 --> 00:17:00,000
so uh

430
00:17:00,000 --> 00:17:02,240
the next one is uh

431
00:17:02,240 --> 00:17:04,480
during my fuzzing approach

432
00:17:04,480 --> 00:17:06,720
uh i was assigned with numbers of the

433
00:17:06,720 --> 00:17:10,079
cvs uh including uh antivirus engines

434
00:17:10,079 --> 00:17:12,720
and a large complex application like a

435
00:17:12,720 --> 00:17:14,720
microsoft office

436
00:17:14,720 --> 00:17:17,119
and yeah so uh i

437
00:17:17,119 --> 00:17:18,480
did uh

438
00:17:18,480 --> 00:17:21,839
build a custom fuzzer uh which is a

439
00:17:21,839 --> 00:17:24,400
work on specific cases such file format

440
00:17:24,400 --> 00:17:27,520
and and and yeah and of course you know

441
00:17:27,520 --> 00:17:29,280
a file format fuzzer is basically

442
00:17:29,280 --> 00:17:31,520
limited to the target itself so it's

443
00:17:31,520 --> 00:17:33,520
pretty uh

444
00:17:33,520 --> 00:17:36,640
limited and you don't have any other way

445
00:17:36,640 --> 00:17:38,880
to fast different kind of applications

446
00:17:38,880 --> 00:17:41,520
other than file format processing kind

447
00:17:41,520 --> 00:17:42,799
of program

448
00:17:42,799 --> 00:17:46,400
so uh public fuzzer i use that as well i

449
00:17:46,400 --> 00:17:48,799
used to

450
00:17:48,799 --> 00:17:52,559
use a sub-bff and win fl

451
00:17:52,559 --> 00:17:55,440
where nfl is a supports the coverage

452
00:17:55,440 --> 00:17:58,000
guided and you can just fast the

453
00:17:58,000 --> 00:17:59,760
specific apis

454
00:17:59,760 --> 00:18:03,280
to see if triggers crashes and and it

455
00:18:03,280 --> 00:18:06,400
introduces a vulnerability on that apis

456
00:18:06,400 --> 00:18:09,200
and yeah and then the next one said bff

457
00:18:09,200 --> 00:18:11,840
the basic framework uh fuzzing framework

458
00:18:11,840 --> 00:18:14,480
is basically a file format it's

459
00:18:14,480 --> 00:18:17,039
written purely in python and it support

460
00:18:17,039 --> 00:18:19,280
the custom python plugin you can write

461
00:18:19,280 --> 00:18:20,960
your own notational

462
00:18:20,960 --> 00:18:24,960
code and and plug into the cpf and bff i

463
00:18:24,960 --> 00:18:28,640
just work as a framework and yeah

464
00:18:28,640 --> 00:18:30,400
basically whatever outputs being

465
00:18:30,400 --> 00:18:32,000
generated uh

466
00:18:32,000 --> 00:18:36,160
is responsible by the framework itself

467
00:18:36,240 --> 00:18:38,960
so uh

468
00:18:39,440 --> 00:18:43,200
when i did the fuzzing uh i i

469
00:18:43,200 --> 00:18:47,360
i i noted down all the bugs that i found

470
00:18:47,360 --> 00:18:49,760
so here's the passing stats results that

471
00:18:49,760 --> 00:18:51,679
i i found

472
00:18:51,679 --> 00:18:55,440
i focus on the foxit reader wps office

473
00:18:55,440 --> 00:18:58,480
uh microsoft office uh windows gdi uh

474
00:18:58,480 --> 00:19:01,039
hong kong office uh and and the last one

475
00:19:01,039 --> 00:19:04,160
is a nitrogen so that nitro pdf is one

476
00:19:04,160 --> 00:19:05,280
interesting

477
00:19:05,280 --> 00:19:08,480
where i did the fuzzing with the uh

478
00:19:08,480 --> 00:19:11,120
publicly available file called assetbff

479
00:19:11,120 --> 00:19:12,000
the

480
00:19:12,000 --> 00:19:14,080
uh basic fuzzing framework

481
00:19:14,080 --> 00:19:14,880
uh

482
00:19:14,880 --> 00:19:16,960
it's kinda easy you just need to find

483
00:19:16,960 --> 00:19:20,559
the git on github or pdf composers and

484
00:19:20,559 --> 00:19:21,760
then uh

485
00:19:21,760 --> 00:19:24,320
just throw into the fuzzer and you

486
00:19:24,320 --> 00:19:26,480
should be able to pick up a

487
00:19:26,480 --> 00:19:28,799
a bug or vulnerability a real even a

488
00:19:28,799 --> 00:19:31,280
real vanity i do found a number of

489
00:19:31,280 --> 00:19:33,760
vulnerabilities and reported to them and

490
00:19:33,760 --> 00:19:35,200
got rewarded

491
00:19:35,200 --> 00:19:36,480
with their

492
00:19:36,480 --> 00:19:37,600
bounty

493
00:19:37,600 --> 00:19:40,240
i think that they provide me amazon god

494
00:19:40,240 --> 00:19:43,039
i used to buy a lot of things a lot of a

495
00:19:43,039 --> 00:19:45,760
lot of stuff from the msn uh it's from

496
00:19:45,760 --> 00:19:47,679
their gift so yeah it's kind of

497
00:19:47,679 --> 00:19:50,320
interesting to see like uh commercial

498
00:19:50,320 --> 00:19:53,039
applications of pdf reader

499
00:19:53,039 --> 00:19:56,080
you can just easily fast using even even

500
00:19:56,080 --> 00:19:57,520
with someone that

501
00:19:57,520 --> 00:20:00,240
has zero or little knowledge of fuzzing

502
00:20:00,240 --> 00:20:02,480
they can simply find one but

503
00:20:02,480 --> 00:20:05,200
that's a that's a cheat shortcut way to

504
00:20:05,200 --> 00:20:06,559
do it right but

505
00:20:06,559 --> 00:20:07,360
and

506
00:20:07,360 --> 00:20:09,520
in fact you have to understand the the

507
00:20:09,520 --> 00:20:12,240
nature of the fuzzing itself on like on

508
00:20:12,240 --> 00:20:14,559
building your own and then

509
00:20:14,559 --> 00:20:17,360
try to find like a specific or make a

510
00:20:17,360 --> 00:20:20,000
difference on whatever available fuzzers

511
00:20:20,000 --> 00:20:22,480
out there

512
00:20:22,799 --> 00:20:23,919
so

513
00:20:23,919 --> 00:20:26,320
uh yeah talking about the public father

514
00:20:26,320 --> 00:20:29,600
uh just now uh we nfl and said uh bff

515
00:20:29,600 --> 00:20:31,520
are the main options on public available

516
00:20:31,520 --> 00:20:32,720
buzzer

517
00:20:32,720 --> 00:20:35,120
if you're fuzzing a program uh like a

518
00:20:35,120 --> 00:20:37,679
pdf or something that that does or

519
00:20:37,679 --> 00:20:40,240
reading or does accepts an input like uh

520
00:20:40,240 --> 00:20:42,320
maybe image magic something like that

521
00:20:42,320 --> 00:20:46,240
you can use up uh like a set bff and you

522
00:20:46,240 --> 00:20:48,480
can write your own custom plugin in

523
00:20:48,480 --> 00:20:51,120
python uh in order to

524
00:20:51,120 --> 00:20:53,200
so the uh the bff itself the

525
00:20:53,200 --> 00:20:56,400
certification basically uh

526
00:20:56,400 --> 00:20:58,480
just a framework uh it helps you

527
00:20:58,480 --> 00:21:01,039
generate and run and start new process

528
00:21:01,039 --> 00:21:03,200
attached to debugger and write output

529
00:21:03,200 --> 00:21:04,799
results and so on right and minimize

530
00:21:04,799 --> 00:21:07,440
purpose but the main important thing you

531
00:21:07,440 --> 00:21:09,520
you need to understand is like how you

532
00:21:09,520 --> 00:21:12,000
want to make your uh mutational

533
00:21:12,000 --> 00:21:16,400
code work there so you can find uh

534
00:21:16,400 --> 00:21:18,480
a code from stack overflow or any other

535
00:21:18,480 --> 00:21:20,720
things just implement yourself and try

536
00:21:20,720 --> 00:21:24,080
to learn like how how you can uh utilize

537
00:21:24,080 --> 00:21:26,559
those uh fuzzing framework

538
00:21:26,559 --> 00:21:29,520
so winfl is a powerful and smart fuzzer

539
00:21:29,520 --> 00:21:32,080
it's really fast it depends uh on your

540
00:21:32,080 --> 00:21:34,559
harness as well because the more you

541
00:21:34,559 --> 00:21:36,480
dig on the uh on your code like for

542
00:21:36,480 --> 00:21:38,799
example you pass more on the

543
00:21:38,799 --> 00:21:41,039
application itself uh

544
00:21:41,039 --> 00:21:43,280
it it could slow a bit

545
00:21:43,280 --> 00:21:46,799
the uh the fuzzy uh performance

546
00:21:46,799 --> 00:21:48,960
and the best thing about win fairly

547
00:21:48,960 --> 00:21:51,440
supports uh instrument instrumentation

548
00:21:51,440 --> 00:21:53,280
so uh instrumentation is important

549
00:21:53,280 --> 00:21:55,600
because you want to see like

550
00:21:55,600 --> 00:21:57,360
where you have uh

551
00:21:57,360 --> 00:22:00,080
and and what can you do for the next

552
00:22:00,080 --> 00:22:02,880
variant hunting so this is where you

553
00:22:02,880 --> 00:22:06,000
want to uh use win fm for the for this

554
00:22:06,000 --> 00:22:07,200
type of uh

555
00:22:07,200 --> 00:22:09,440
fuzzing activity

556
00:22:09,440 --> 00:22:12,400
so next one is uh bff uh

557
00:22:12,400 --> 00:22:14,240
it's basically a traditional methods uh

558
00:22:14,240 --> 00:22:15,600
without coverage guided or

559
00:22:15,600 --> 00:22:18,320
instrumentation it's just a blind fuzzer

560
00:22:18,320 --> 00:22:21,039
it takes an input and then bit flip or

561
00:22:21,039 --> 00:22:24,080
bite flip all the uh whatever contents

562
00:22:24,080 --> 00:22:25,200
on the

563
00:22:25,200 --> 00:22:26,480
applications

564
00:22:26,480 --> 00:22:28,799
so yeah like i mentioned earlier it

565
00:22:28,799 --> 00:22:31,520
supports python plugin and and of course

566
00:22:31,520 --> 00:22:33,679
you can write your own fuzzer

567
00:22:33,679 --> 00:22:34,559
uh

568
00:22:34,559 --> 00:22:37,120
so the problem with vff is that the

569
00:22:37,120 --> 00:22:38,960
longer you run

570
00:22:38,960 --> 00:22:42,480
the framework the slower it becomes so

571
00:22:42,480 --> 00:22:43,440
uh

572
00:22:43,440 --> 00:22:48,320
when i first nitro pdf it took uh

573
00:22:48,320 --> 00:22:51,039
around like uh five days to to complete

574
00:22:51,039 --> 00:22:53,440
like uh 20 thousand uh

575
00:22:53,440 --> 00:22:56,960
corpses to to fund so yeah uh in initial

576
00:22:56,960 --> 00:23:00,080
run it takes only like uh less than like

577
00:23:00,080 --> 00:23:01,120
uh

578
00:23:01,120 --> 00:23:03,120
maybe 12 hours

579
00:23:03,120 --> 00:23:05,039
but yeah

580
00:23:05,039 --> 00:23:07,440
because maybe the memory uh you search

581
00:23:07,440 --> 00:23:09,280
as well because uh usually when i said

582
00:23:09,280 --> 00:23:11,760
the vm for the fuzzing is a minimum is

583
00:23:11,760 --> 00:23:14,400
an eight gig but yeah still not enough

584
00:23:14,400 --> 00:23:17,360
so i guess maybe 16 gig should be pretty

585
00:23:17,360 --> 00:23:20,159
enough to get it uh more faster compared

586
00:23:20,159 --> 00:23:22,720
to like what uh whatever environment

587
00:23:22,720 --> 00:23:24,400
that i had set up

588
00:23:24,400 --> 00:23:26,799
so uh yeah public funds that when i did

589
00:23:26,799 --> 00:23:28,480
the fuzzing uh i found numbers of

590
00:23:28,480 --> 00:23:31,919
vulnerability and was assigned with cves

591
00:23:31,919 --> 00:23:34,000
just for public record on very much

592
00:23:34,000 --> 00:23:36,559
important and nitro pdf

593
00:23:36,559 --> 00:23:40,480
eye nitro comp uh company uh has

594
00:23:40,480 --> 00:23:42,880
created some i think a page for the

595
00:23:42,880 --> 00:23:45,600
advisory and the accredited researchers

596
00:23:45,600 --> 00:23:47,600
so the only problem when you work

597
00:23:47,600 --> 00:23:49,600
closely with them is they don't provide

598
00:23:49,600 --> 00:23:52,159
cvs you need to raise your own and then

599
00:23:52,159 --> 00:23:53,039
they'll

600
00:23:53,039 --> 00:23:55,440
add all whatever info that you have

601
00:23:55,440 --> 00:23:56,720
requested to

602
00:23:56,720 --> 00:23:58,080
meet ray

603
00:23:58,080 --> 00:24:00,240
so uh next page shows the numbers of

604
00:24:00,240 --> 00:24:01,760
issue found

605
00:24:01,760 --> 00:24:04,480
and and of course not only nitro uh i

606
00:24:04,480 --> 00:24:07,520
did i did the testing or fast testing

607
00:24:07,520 --> 00:24:08,320
uh

608
00:24:08,320 --> 00:24:10,799
but uh there are many other uh

609
00:24:10,799 --> 00:24:12,640
software that i did the testing as well

610
00:24:12,640 --> 00:24:16,480
i just don't include everything here

611
00:24:17,039 --> 00:24:18,720
so yeah uh

612
00:24:18,720 --> 00:24:21,440
this is the one that i did uh

613
00:24:21,440 --> 00:24:24,240
so on the left side msrc case is where i

614
00:24:24,240 --> 00:24:26,159
reported to microsoft

615
00:24:26,159 --> 00:24:29,120
the msrc team and

616
00:24:29,120 --> 00:24:31,120
this was found in

617
00:24:31,120 --> 00:24:33,360
windows gdi there's a

618
00:24:33,360 --> 00:24:35,520
there's a more there are more actually

619
00:24:35,520 --> 00:24:37,279
compared to what you've seen here on the

620
00:24:37,279 --> 00:24:39,679
windows gdi it's just that uh we don't

621
00:24:39,679 --> 00:24:41,120
get luck

622
00:24:41,120 --> 00:24:43,360
when we reported because the attack

623
00:24:43,360 --> 00:24:45,679
vector is too low

624
00:24:45,679 --> 00:24:48,080
and uh some of the issues considered as

625
00:24:48,080 --> 00:24:51,039
a moderate uh if you see msrc's

626
00:24:51,039 --> 00:24:54,320
severities level on fuzzy on reporting

627
00:24:54,320 --> 00:24:55,360
bug

628
00:24:55,360 --> 00:24:58,000
uh if they rated it as a moderate

629
00:24:58,000 --> 00:24:59,200
usually

630
00:24:59,200 --> 00:25:01,279
they don't fix it and yeah and it will

631
00:25:01,279 --> 00:25:03,919
get fixed only in the next maybe product

632
00:25:03,919 --> 00:25:05,360
cycles

633
00:25:05,360 --> 00:25:07,840
so yeah these are these windows gdi bugs

634
00:25:07,840 --> 00:25:10,480
are basically found using a win fl

635
00:25:10,480 --> 00:25:12,880
we do uh we do have set up

636
00:25:12,880 --> 00:25:16,000
around 12 vms of different uh harness

637
00:25:16,000 --> 00:25:18,559
and different apis to target and and and

638
00:25:18,559 --> 00:25:20,480
yeah we do have a lock there it's just

639
00:25:20,480 --> 00:25:23,200
that we don't get the cvs or

640
00:25:23,200 --> 00:25:26,400
advisories being released on this

641
00:25:26,400 --> 00:25:29,279
so on the right side you see is uh

642
00:25:29,279 --> 00:25:31,520
the nitro pdf software there's a numbers

643
00:25:31,520 --> 00:25:34,000
of uh the cvs uh

644
00:25:34,000 --> 00:25:37,919
and this just uh the whatever that i

645
00:25:37,919 --> 00:25:41,679
able to to provide here so yeah this was

646
00:25:41,679 --> 00:25:43,840
fun with uh said bff and it's quite

647
00:25:43,840 --> 00:25:45,679
pretty easy like i mentioned earlier

648
00:25:45,679 --> 00:25:48,320
just throw the uh just fine as much as

649
00:25:48,320 --> 00:25:49,200
you can

650
00:25:49,200 --> 00:25:50,400
the uh

651
00:25:50,400 --> 00:25:54,159
the compass and then uh let the program

652
00:25:54,159 --> 00:25:56,880
do the job for you so if you are smart

653
00:25:56,880 --> 00:25:58,960
enough you can write your own plugin to

654
00:25:58,960 --> 00:26:00,400
get more bugs

655
00:26:00,400 --> 00:26:02,799
there's a you can get the idea from the

656
00:26:02,799 --> 00:26:03,600
uh

657
00:26:03,600 --> 00:26:06,159
on the available uh

658
00:26:06,159 --> 00:26:09,520
code button and then uh maybe you you

659
00:26:09,520 --> 00:26:12,640
can tweak a little on the uh code itself

660
00:26:12,640 --> 00:26:14,080
to get uh

661
00:26:14,080 --> 00:26:17,200
maybe a better performance or better uh

662
00:26:17,200 --> 00:26:19,360
reach to the target that you want to

663
00:26:19,360 --> 00:26:23,719
exploit or you want to fast

664
00:26:24,240 --> 00:26:25,600
all right so

665
00:26:25,600 --> 00:26:27,840
uh let's talk about uh custom fuzzer

666
00:26:27,840 --> 00:26:30,240
that i i built uh

667
00:26:30,240 --> 00:26:31,919
so uh

668
00:26:31,919 --> 00:26:35,200
so file format fuzzing uh nowadays uh i

669
00:26:35,200 --> 00:26:37,600
would say still effective although a lot

670
00:26:37,600 --> 00:26:40,720
of people are migrating to a smart of

671
00:26:40,720 --> 00:26:42,159
coverage guided

672
00:26:42,159 --> 00:26:43,279
further

673
00:26:43,279 --> 00:26:44,720
uh

674
00:26:44,720 --> 00:26:47,679
i know it's slow and everyone know the

675
00:26:47,679 --> 00:26:50,720
file format puzzle is slow but

676
00:26:50,720 --> 00:26:53,360
and of course when i built my own father

677
00:26:53,360 --> 00:26:55,840
i do found numbers of vulnerabilities

678
00:26:55,840 --> 00:26:58,320
even in the complex application

679
00:26:58,320 --> 00:27:02,080
so uh so the the main idea to find

680
00:27:02,080 --> 00:27:03,679
bug as much as

681
00:27:03,679 --> 00:27:08,240
it can and uh and this fuzzer only focus

682
00:27:08,240 --> 00:27:11,120
on the cc plus plus types of application

683
00:27:11,120 --> 00:27:13,679
uh it it has a capability to further

684
00:27:13,679 --> 00:27:16,240
complex software uh because uh like a

685
00:27:16,240 --> 00:27:19,200
software that has a accepts uh input or

686
00:27:19,200 --> 00:27:20,799
you can

687
00:27:20,799 --> 00:27:22,720
set the parameter right

688
00:27:22,720 --> 00:27:24,960
as long as it supports parameter or

689
00:27:24,960 --> 00:27:28,000
inputs uh it should be pretty easy to

690
00:27:28,000 --> 00:27:29,679
to integrate with the puzzle that i

691
00:27:29,679 --> 00:27:30,559
built

692
00:27:30,559 --> 00:27:34,000
so uh it's able to catch bugs as well

693
00:27:34,000 --> 00:27:37,279
and minimize results so it will write

694
00:27:37,279 --> 00:27:39,840
the outputs and then it will

695
00:27:39,840 --> 00:27:41,120
create the

696
00:27:41,120 --> 00:27:41,919
the

697
00:27:41,919 --> 00:27:44,000
whatever the trigger the crash and

698
00:27:44,000 --> 00:27:46,480
minimize the corpus to become the proof

699
00:27:46,480 --> 00:27:49,760
of concept and yeah it's purely written

700
00:27:49,760 --> 00:27:52,000
in python

701
00:27:52,000 --> 00:27:54,880
so the idea of this uh

702
00:27:54,880 --> 00:27:57,919
is to a mutation on input file uh you

703
00:27:57,919 --> 00:27:59,679
can see like an example

704
00:27:59,679 --> 00:28:03,039
file.dxe and then the input of your

705
00:28:03,039 --> 00:28:04,399
target

706
00:28:04,399 --> 00:28:07,279
and then uh basically the fuzzer covers

707
00:28:07,279 --> 00:28:08,799
bit flip

708
00:28:08,799 --> 00:28:11,279
i like to randomize range values like

709
00:28:11,279 --> 00:28:12,720
from zero

710
00:28:12,720 --> 00:28:17,520
to uh ffff or 808 million something like

711
00:28:17,520 --> 00:28:18,559
that or

712
00:28:18,559 --> 00:28:21,440
and and of course uh i focus on flipping

713
00:28:21,440 --> 00:28:23,760
on the strings and then special

714
00:28:23,760 --> 00:28:25,840
characters as well

715
00:28:25,840 --> 00:28:28,720
so the the custom files that i built

716
00:28:28,720 --> 00:28:30,640
are able to detect a precious via

717
00:28:30,640 --> 00:28:31,590
debugger

718
00:28:31,590 --> 00:28:32,720
[Music]

719
00:28:32,720 --> 00:28:35,760
it's slow but it works uh there's a uh

720
00:28:35,760 --> 00:28:37,039
uh

721
00:28:37,039 --> 00:28:39,039
i figured out that uh i could integrate

722
00:28:39,039 --> 00:28:41,440
the device that i built with uh

723
00:28:41,440 --> 00:28:44,159
something uh there's a call bug id from

724
00:28:44,159 --> 00:28:45,120
uh

725
00:28:45,120 --> 00:28:47,520
a guy from uh netherland i think his

726
00:28:47,520 --> 00:28:50,240
name is skyland on twitter so yeah i

727
00:28:50,240 --> 00:28:52,640
used to integrate that once but uh

728
00:28:52,640 --> 00:28:54,640
requires a lot of uh

729
00:28:54,640 --> 00:28:55,919
a lot of

730
00:28:55,919 --> 00:28:58,640
code writing i i'm a bit lazy to write

731
00:28:58,640 --> 00:29:00,000
the new uh

732
00:29:00,000 --> 00:29:01,360
code something like that right it's just

733
00:29:01,360 --> 00:29:02,159
that

734
00:29:02,159 --> 00:29:03,760
it might take something but it should be

735
00:29:03,760 --> 00:29:05,039
workable

736
00:29:05,039 --> 00:29:08,880
and yeah i just i tested my uh fuzzer uh

737
00:29:08,880 --> 00:29:10,480
to integrate with uh

738
00:29:10,480 --> 00:29:12,880
to get the crashes detected

739
00:29:12,880 --> 00:29:16,640
via debugger like using cdb uh by kd and

740
00:29:16,640 --> 00:29:19,679
uh winfd so

741
00:29:19,679 --> 00:29:21,520
so yeah and of course uh the custom

742
00:29:21,520 --> 00:29:23,440
files that i built has a capability to

743
00:29:23,440 --> 00:29:27,520
uh turn off and turn on the patch here

744
00:29:30,080 --> 00:29:33,440
all right so uh next one uh

745
00:29:33,440 --> 00:29:35,120
looking into these uh

746
00:29:35,120 --> 00:29:38,000
integers uh on my fuzzes that are

747
00:29:38,000 --> 00:29:39,520
implemented so

748
00:29:39,520 --> 00:29:41,760
what i look into is a sign in unsigned

749
00:29:41,760 --> 00:29:45,279
byte sign and unsigned word uh d word uh

750
00:29:45,279 --> 00:29:48,000
and the keyword so of course i covered

751
00:29:48,000 --> 00:29:50,320
the negative numbers uh and the positive

752
00:29:50,320 --> 00:29:52,720
numbers uh if you uh

753
00:29:52,720 --> 00:29:54,799
like i mentioned earlier the range of

754
00:29:54,799 --> 00:29:58,159
the values either from zero so uh it

755
00:29:58,159 --> 00:30:00,960
depends on the uh on the whatever that i

756
00:30:00,960 --> 00:30:03,440
specify

757
00:30:03,440 --> 00:30:06,840
so uh next one is uh strings and

758
00:30:06,840 --> 00:30:10,320
ascii so uh the strings and ascii is

759
00:30:10,320 --> 00:30:12,640
important as well you don't only focus

760
00:30:12,640 --> 00:30:14,320
on the person on the integers but the

761
00:30:14,320 --> 00:30:16,960
strings and ascii could introduce

762
00:30:16,960 --> 00:30:19,520
a bug as well right like we can take

763
00:30:19,520 --> 00:30:21,840
like an example of a format string or

764
00:30:21,840 --> 00:30:23,440
any other thing so it could trigger

765
00:30:23,440 --> 00:30:24,880
overflow

766
00:30:24,880 --> 00:30:26,799
due to the large strings

767
00:30:26,799 --> 00:30:30,399
uh empty strings or

768
00:30:30,399 --> 00:30:32,720
and many other things that we can look

769
00:30:32,720 --> 00:30:35,279
into like your line text modifications

770
00:30:35,279 --> 00:30:37,840
we included null terminator

771
00:30:37,840 --> 00:30:40,159
after the program executing something

772
00:30:40,159 --> 00:30:41,840
and uh and

773
00:30:41,840 --> 00:30:43,840
the important one is append and prepend

774
00:30:43,840 --> 00:30:46,960
on tag string so this is this is how the

775
00:30:46,960 --> 00:30:49,120
the the general idea on how the custom

776
00:30:49,120 --> 00:30:51,840
puzzle works

777
00:30:52,480 --> 00:30:55,760
so next one is a

778
00:30:55,760 --> 00:30:58,960
demand a problem when i build the custom

779
00:30:58,960 --> 00:31:00,030
puzzles right

780
00:31:00,030 --> 00:31:02,240
[Music]

781
00:31:02,240 --> 00:31:05,440
it i did basically a trigger a false

782
00:31:05,440 --> 00:31:07,360
alarm a lot of a false alarm we call it

783
00:31:07,360 --> 00:31:09,679
the force uh positive

784
00:31:09,679 --> 00:31:10,720
uh

785
00:31:10,720 --> 00:31:12,480
you do excited when you fast

786
00:31:12,480 --> 00:31:15,200
applications and it detects the crashes

787
00:31:15,200 --> 00:31:16,320
however

788
00:31:16,320 --> 00:31:19,919
uh when you look into the results right

789
00:31:19,919 --> 00:31:22,640
and you try to reproduce using the uh

790
00:31:22,640 --> 00:31:24,240
minimize uh

791
00:31:24,240 --> 00:31:28,799
pocs that are generated by the

792
00:31:28,799 --> 00:31:31,360
fuzzers and then uh you don't trick

793
00:31:31,360 --> 00:31:34,080
anything and and and and sometimes it

794
00:31:34,080 --> 00:31:36,320
just triggers another pointer so

795
00:31:36,320 --> 00:31:38,720
yeah those are a main challenge uh when

796
00:31:38,720 --> 00:31:39,519
you

797
00:31:39,519 --> 00:31:42,320
when you're building uh your own forces

798
00:31:42,320 --> 00:31:44,880
because you end up like

799
00:31:44,880 --> 00:31:46,399
you don't find anything

800
00:31:46,399 --> 00:31:49,840
although it catch some uh exceptions uh

801
00:31:49,840 --> 00:31:52,320
access violations or something like that

802
00:31:52,320 --> 00:31:54,960
yeah so so that's why uh

803
00:31:54,960 --> 00:31:57,519
uh what i did was splitting out the

804
00:31:57,519 --> 00:31:59,600
results by performing a better filtering

805
00:31:59,600 --> 00:32:02,640
uh i did just check for example like the

806
00:32:02,640 --> 00:32:04,320
last exceptions

807
00:32:04,320 --> 00:32:07,039
uh looking into the address uh it did

808
00:32:07,039 --> 00:32:10,159
null or has something on memory on or

809
00:32:10,159 --> 00:32:11,840
the register so these are the important

810
00:32:11,840 --> 00:32:14,720
things that i did so in uh

811
00:32:14,720 --> 00:32:18,080
in order for me to successfully uh to uh

812
00:32:18,080 --> 00:32:19,679
eliminate not to eliminate hundred

813
00:32:19,679 --> 00:32:22,080
percent on the false alarm but it could

814
00:32:22,080 --> 00:32:24,640
reduce the numbers of false alarm

815
00:32:24,640 --> 00:32:27,760
so the important info when catching uh

816
00:32:27,760 --> 00:32:30,080
crashes uh is uh looking into the

817
00:32:30,080 --> 00:32:32,080
results or looking into the

818
00:32:32,080 --> 00:32:32,799
uh

819
00:32:32,799 --> 00:32:34,320
exceptions happen like

820
00:32:34,320 --> 00:32:35,919
access violations

821
00:32:35,919 --> 00:32:38,240
and then uh at the access violations

822
00:32:38,240 --> 00:32:40,240
what is happening we do see like a last

823
00:32:40,240 --> 00:32:42,720
crash disassembly code and we can see

824
00:32:42,720 --> 00:32:45,760
like which is the value a stack trace uh

825
00:32:45,760 --> 00:32:47,519
so these are the important things that

826
00:32:47,519 --> 00:32:49,519
uh we can

827
00:32:49,519 --> 00:32:51,360
implement as part of our fuzzer because

828
00:32:51,360 --> 00:32:53,279
uh you want to see like which

829
00:32:53,279 --> 00:32:55,600
disassembly that goes in this because

830
00:32:55,600 --> 00:32:56,880
this uh

831
00:32:56,880 --> 00:32:59,679
crash because from that crash uh last

832
00:32:59,679 --> 00:33:02,080
point of the disassembly code uh

833
00:33:02,080 --> 00:33:03,840
shows the uh

834
00:33:03,840 --> 00:33:05,760
access violations happening

835
00:33:05,760 --> 00:33:08,399
uh you can actually uh look into like

836
00:33:08,399 --> 00:33:10,960
the stack trace to uh

837
00:33:10,960 --> 00:33:11,919
to

838
00:33:11,919 --> 00:33:14,480
maybe like uh understand like uh

839
00:33:14,480 --> 00:33:16,799
where is it actually uh

840
00:33:16,799 --> 00:33:19,200
triggering the crash uh before it

841
00:33:19,200 --> 00:33:22,000
reaches to the last uh this uh crash of

842
00:33:22,000 --> 00:33:24,480
the disassembly code so yeah those are

843
00:33:24,480 --> 00:33:26,640
the important things so yeah sometimes

844
00:33:26,640 --> 00:33:29,200
the stack tracks when it gets generated

845
00:33:29,200 --> 00:33:31,600
it doesn't uh give a consistent uh

846
00:33:31,600 --> 00:33:34,799
results so it's in accurate uh results

847
00:33:34,799 --> 00:33:36,080
so you need to

848
00:33:36,080 --> 00:33:39,679
of course manual manually verify

849
00:33:39,679 --> 00:33:42,799
and debug the issue uh to and and of

850
00:33:42,799 --> 00:33:46,159
course replicate everything like how you

851
00:33:46,159 --> 00:33:48,720
uh set uh in your environment of fuzzing

852
00:33:48,720 --> 00:33:49,519
like

853
00:33:49,519 --> 00:33:53,440
head page hip enable and and many other

854
00:33:53,440 --> 00:33:55,679
things that you have done on your uh

855
00:33:55,679 --> 00:33:58,080
fuzzing environment so that you get a

856
00:33:58,080 --> 00:34:00,320
consistent uh results when you do a

857
00:34:00,320 --> 00:34:02,240
manual verifications

858
00:34:02,240 --> 00:34:04,320
because uh by the time you want to

859
00:34:04,320 --> 00:34:06,480
submit the bug you need to have you need

860
00:34:06,480 --> 00:34:09,520
to have a solid and firm findings and

861
00:34:09,520 --> 00:34:11,280
and write apps before you submitting to

862
00:34:11,280 --> 00:34:12,639
the

863
00:34:12,639 --> 00:34:14,399
vendors

864
00:34:14,399 --> 00:34:16,960
so how does the file format fuzzing that

865
00:34:16,960 --> 00:34:18,960
i built uh work it's almost it's similar

866
00:34:18,960 --> 00:34:21,119
to like whatever that means we have been

867
00:34:21,119 --> 00:34:23,440
seeing in the past uh we have a file

868
00:34:23,440 --> 00:34:25,440
format and then we have the input and

869
00:34:25,440 --> 00:34:28,159
then uh and of course the the the only

870
00:34:28,159 --> 00:34:29,679
difference is just the customer data

871
00:34:29,679 --> 00:34:30,719
that i

872
00:34:30,719 --> 00:34:32,000
i

873
00:34:32,000 --> 00:34:34,480
crafted and then it supports a bit

874
00:34:34,480 --> 00:34:35,440
flipping

875
00:34:35,440 --> 00:34:36,639
and

876
00:34:36,639 --> 00:34:38,639
it does some random much range failures

877
00:34:38,639 --> 00:34:42,079
and then if there's a crashes uh happen

878
00:34:42,079 --> 00:34:45,440
uh the devices itself can detect and

879
00:34:45,440 --> 00:34:48,879
generate right an output and

880
00:34:48,879 --> 00:34:51,599
and minimize the corpus that uh

881
00:34:51,599 --> 00:34:53,440
trigger the uh the

882
00:34:53,440 --> 00:34:56,079
exceptions

883
00:34:56,239 --> 00:34:58,640
so uh

884
00:34:58,640 --> 00:35:00,880
maybe uh you are like wondering what's

885
00:35:00,880 --> 00:35:03,359
inside the custom fuzzer so uh to be

886
00:35:03,359 --> 00:35:06,240
honest no special code or techniques uh

887
00:35:06,240 --> 00:35:07,599
uh

888
00:35:07,599 --> 00:35:09,280
just a complicated code from the

889
00:35:09,280 --> 00:35:10,480
internet with major for the

890
00:35:10,480 --> 00:35:12,480
modifications uh uh there's a lot of

891
00:35:12,480 --> 00:35:14,480
people write the code there outside

892
00:35:14,480 --> 00:35:17,359
there and it's just that the they don't

893
00:35:17,359 --> 00:35:19,680
do better or they don't continue work on

894
00:35:19,680 --> 00:35:22,880
that project uh yeah

895
00:35:22,880 --> 00:35:25,760
we never know that those type of code is

896
00:35:25,760 --> 00:35:28,320
basically important or basically useful

897
00:35:28,320 --> 00:35:31,839
in in your test case so yeah

898
00:35:31,839 --> 00:35:34,800
like i said no special code techniques

899
00:35:34,800 --> 00:35:37,280
uh and of course it supports a bit slip

900
00:35:37,280 --> 00:35:39,359
that's the important thing that i always

901
00:35:39,359 --> 00:35:41,680
uh keep in mind when i do

902
00:35:41,680 --> 00:35:42,839
this kind of

903
00:35:42,839 --> 00:35:44,480
fuzzing

904
00:35:44,480 --> 00:35:46,960
no 10 or guided features

905
00:35:46,960 --> 00:35:49,920
is basically fully filed format fuzzer

906
00:35:49,920 --> 00:35:51,359
so

907
00:35:51,359 --> 00:35:52,640
initial idea

908
00:35:52,640 --> 00:35:55,040
i would like to build a framework but

909
00:35:55,040 --> 00:35:58,400
it looks hard and used to

910
00:35:58,400 --> 00:36:01,040
use a lot of your energies and times

911
00:36:01,040 --> 00:36:04,640
right so so why why bother on that and

912
00:36:04,640 --> 00:36:07,040
just build a simple one that

913
00:36:07,040 --> 00:36:09,280
can satisfy yourself

914
00:36:09,280 --> 00:36:11,680
so uh the custom files that i built

915
00:36:11,680 --> 00:36:13,680
basically caught the real vulnerability

916
00:36:13,680 --> 00:36:15,839
on complex software such as microsoft

917
00:36:15,839 --> 00:36:17,760
office we can talk about it i will talk

918
00:36:17,760 --> 00:36:19,520
about it later

919
00:36:19,520 --> 00:36:23,200
uh it's slow but i'm basically satisfied

920
00:36:23,200 --> 00:36:25,920
with its results so there is no plan at

921
00:36:25,920 --> 00:36:28,320
the moment to release the

922
00:36:28,320 --> 00:36:31,119
custom fuzzer because i still wanted to

923
00:36:31,119 --> 00:36:33,760
improve those that are missing and

924
00:36:33,760 --> 00:36:35,680
something that i can improve for

925
00:36:35,680 --> 00:36:36,780
performance

926
00:36:36,780 --> 00:36:38,560
[Music]

927
00:36:38,560 --> 00:36:40,880
all right so this is how the uh the

928
00:36:40,880 --> 00:36:43,760
actual works on the fuzzes uh so we do

929
00:36:43,760 --> 00:36:44,880
have a

930
00:36:44,880 --> 00:36:47,119
input file and then it bit flip the

931
00:36:47,119 --> 00:36:48,320
input file

932
00:36:48,320 --> 00:36:51,680
uh trigger crash uh right output of last

933
00:36:51,680 --> 00:36:53,760
state of deposit so the last state of

934
00:36:53,760 --> 00:36:56,560
the father is where it detects or caught

935
00:36:56,560 --> 00:36:58,720
access violations or

936
00:36:58,720 --> 00:37:01,839
any exceptions happen during this

937
00:37:01,839 --> 00:37:05,359
fusing state so it will have

938
00:37:05,359 --> 00:37:07,760
whatever that file being made uh the

939
00:37:07,760 --> 00:37:10,000
last that triggered a crash write an

940
00:37:10,000 --> 00:37:12,640
output in the text strings uh

941
00:37:12,640 --> 00:37:15,839
to tell that uh this disassembly is uh

942
00:37:15,839 --> 00:37:18,560
causing this issue so yeah from there we

943
00:37:18,560 --> 00:37:21,359
can uh just open in for example like a

944
00:37:21,359 --> 00:37:22,400
idea pro

945
00:37:22,400 --> 00:37:24,800
and then look into the uh the hex and

946
00:37:24,800 --> 00:37:27,280
then find the bytes of the hex inside

947
00:37:27,280 --> 00:37:28,560
the uh

948
00:37:28,560 --> 00:37:30,800
ita pro and

949
00:37:30,800 --> 00:37:34,000
we can tell that from there

950
00:37:34,000 --> 00:37:36,079
where we can look into and what caused

951
00:37:36,079 --> 00:37:37,280
the

952
00:37:37,280 --> 00:37:38,320
uh

953
00:37:38,320 --> 00:37:40,160
the trigger there so

954
00:37:40,160 --> 00:37:42,400
and and of course uh it's uh it's a

955
00:37:42,400 --> 00:37:45,119
looping process uh it will uh start a

956
00:37:45,119 --> 00:37:47,680
new process and with uh and try to find

957
00:37:47,680 --> 00:37:49,520
the next file that it tries to process

958
00:37:49,520 --> 00:37:50,400
so

959
00:37:50,400 --> 00:37:53,040
uh the the main problem of the father

960
00:37:53,040 --> 00:37:55,119
that i built is uh

961
00:37:55,119 --> 00:37:58,480
uh it will uh it sometimes it it takes

962
00:37:58,480 --> 00:38:00,640
back uh the the the

963
00:38:00,640 --> 00:38:03,760
the files or the compasses that you have

964
00:38:03,760 --> 00:38:05,680
that it has processes

965
00:38:05,680 --> 00:38:08,240
and uh it does not uh

966
00:38:08,240 --> 00:38:11,520
check on like if it is uh already uh

967
00:38:11,520 --> 00:38:14,560
used or for fuzzing or not so i could uh

968
00:38:14,560 --> 00:38:16,160
implement something that might check

969
00:38:16,160 --> 00:38:18,400
hash of the file before

970
00:38:18,400 --> 00:38:21,200
maybe trigger before it starts the

971
00:38:21,200 --> 00:38:22,079
buzzing

972
00:38:22,079 --> 00:38:24,560
just to eliminate those uh repeatable

973
00:38:24,560 --> 00:38:27,440
because uh in some cases i i do see

974
00:38:27,440 --> 00:38:28,480
a lot of

975
00:38:28,480 --> 00:38:30,079
bugs being

976
00:38:30,079 --> 00:38:31,520
generated

977
00:38:31,520 --> 00:38:34,880
on the report or the output however

978
00:38:34,880 --> 00:38:36,000
uh

979
00:38:36,000 --> 00:38:38,000
the the problem is you you are seeing

980
00:38:38,000 --> 00:38:40,800
the same uh bugs actually being reported

981
00:38:40,800 --> 00:38:43,119
so uh it's kind of a disappointment days

982
00:38:43,119 --> 00:38:45,680
but i i figured that

983
00:38:45,680 --> 00:38:47,920
deleting files or maybe check the hash

984
00:38:47,920 --> 00:38:48,720
of the

985
00:38:48,720 --> 00:38:51,520
file is important after

986
00:38:51,520 --> 00:38:53,920
or before it starts the next fusing

987
00:38:53,920 --> 00:38:56,240
process

988
00:38:56,400 --> 00:38:59,920
so let's take a look in the test case uh

989
00:38:59,920 --> 00:39:02,000
fuzzing example

990
00:39:02,000 --> 00:39:03,760
so uh

991
00:39:03,760 --> 00:39:04,960
for this one

992
00:39:04,960 --> 00:39:07,760
by targeting a handcuff word processing

993
00:39:07,760 --> 00:39:10,320
applications

994
00:39:10,320 --> 00:39:12,880
this vulnerability actually has been

995
00:39:12,880 --> 00:39:15,280
reported to kisa korean internet

996
00:39:15,280 --> 00:39:18,560
security agents yes i guess if i recall

997
00:39:18,560 --> 00:39:22,240
so uh the copper size around 25 kilobyte

998
00:39:22,240 --> 00:39:23,359
uh

999
00:39:23,359 --> 00:39:25,599
so what i did focus on the

1000
00:39:25,599 --> 00:39:27,760
mutation

1001
00:39:27,760 --> 00:39:28,480
so

1002
00:39:28,480 --> 00:39:29,280
uh

1003
00:39:29,280 --> 00:39:31,760
the further uh supports uh

1004
00:39:31,760 --> 00:39:34,560
what i did is i i changed the random

1005
00:39:34,560 --> 00:39:37,119
range of values uh which starts from

1006
00:39:37,119 --> 00:39:41,839
zero x zero until zero x seven f f so so

1007
00:39:41,839 --> 00:39:43,520
those are the range that basically being

1008
00:39:43,520 --> 00:39:46,480
covered by the fuzzer and

1009
00:39:46,480 --> 00:39:48,640
and yeah uh

1010
00:39:48,640 --> 00:39:51,280
bug was found after four hours running

1011
00:39:51,280 --> 00:39:53,040
uh there are basically three different

1012
00:39:53,040 --> 00:39:56,560
vulnerabilities found uh basically uh we

1013
00:39:56,560 --> 00:39:58,720
can see the test case in the next page

1014
00:39:58,720 --> 00:40:00,079
uh so

1015
00:40:00,079 --> 00:40:02,560
this is the actual bug uh

1016
00:40:02,560 --> 00:40:04,319
so this is uh what you are seeing here

1017
00:40:04,319 --> 00:40:05,599
is uh

1018
00:40:05,599 --> 00:40:08,079
i open the file in the hexxd

1019
00:40:08,079 --> 00:40:09,599
and uh

1020
00:40:09,599 --> 00:40:12,079
this is uh you can see on the left uh

1021
00:40:12,079 --> 00:40:13,839
original file and then on the right side

1022
00:40:13,839 --> 00:40:16,480
it's a rotated file and then you can see

1023
00:40:16,480 --> 00:40:20,480
the original file uh bytes on the 3b50

1024
00:40:20,480 --> 00:40:22,560
line the one that gets highlighted for

1025
00:40:22,560 --> 00:40:24,960
c130f

1026
00:40:24,960 --> 00:40:28,319
uh being mutated to seven ffff but you

1027
00:40:28,319 --> 00:40:31,280
see f e is behind before it reached to

1028
00:40:31,280 --> 00:40:33,920
the ff uh and then

1029
00:40:33,920 --> 00:40:36,319
so by the time the word started to

1030
00:40:36,319 --> 00:40:38,560
process and pass for the contents of the

1031
00:40:38,560 --> 00:40:39,760
doc file

1032
00:40:39,760 --> 00:40:42,079
pressures is triggered due to multiple

1033
00:40:42,079 --> 00:40:44,800
contents on the file formatting so

1034
00:40:44,800 --> 00:40:47,680
we we can see it's pretty easy right to

1035
00:40:47,680 --> 00:40:50,160
find one in a small

1036
00:40:50,160 --> 00:40:51,119
what

1037
00:40:51,119 --> 00:40:53,520
we can demons what i demonstrate here is

1038
00:40:53,520 --> 00:40:56,000
uh just a 25 kilobyte of file is

1039
00:40:56,000 --> 00:40:58,880
basically small for a document and

1040
00:40:58,880 --> 00:41:00,000
and

1041
00:41:00,000 --> 00:41:01,200
uh

1042
00:41:01,200 --> 00:41:02,400
in the mind

1043
00:41:02,400 --> 00:41:05,280
what i always keep is if it is a

1044
00:41:05,280 --> 00:41:08,640
small size file uh it doesn't introduce

1045
00:41:08,640 --> 00:41:10,960
a lot of attack vector because when it

1046
00:41:10,960 --> 00:41:13,280
fast it doesn't have so much place for

1047
00:41:13,280 --> 00:41:14,160
it to

1048
00:41:14,160 --> 00:41:16,240
to do a bit flip it's just

1049
00:41:16,240 --> 00:41:18,240
waiting for luck for it to get crashed

1050
00:41:18,240 --> 00:41:20,480
but however in this case

1051
00:41:20,480 --> 00:41:22,800
we know our target uh

1052
00:41:22,800 --> 00:41:24,560
has a problem when proceed when

1053
00:41:24,560 --> 00:41:27,359
processing a malformed contents

1054
00:41:27,359 --> 00:41:30,000
on a small size of a

1055
00:41:30,000 --> 00:41:30,800
wood

1056
00:41:30,800 --> 00:41:33,440
file so so yeah

1057
00:41:33,440 --> 00:41:36,160
so what we see here uh using a small uh

1058
00:41:36,160 --> 00:41:38,240
size uh we can demonstrate that these

1059
00:41:38,240 --> 00:41:40,880
things are effective on the uh currently

1060
00:41:40,880 --> 00:41:42,240
uh

1061
00:41:42,240 --> 00:41:45,200
existing uh of the new patch kind of

1062
00:41:45,200 --> 00:41:48,240
applications uh so uh i think uh i was

1063
00:41:48,240 --> 00:41:50,240
informed that this bug has been uh has

1064
00:41:50,240 --> 00:41:53,119
been fixed uh there's a number of issues

1065
00:41:53,119 --> 00:41:55,200
uh basically i have reported to them

1066
00:41:55,200 --> 00:41:57,040
it's just that i'm waiting uh

1067
00:41:57,040 --> 00:41:59,119
bending from the from from them on the

1068
00:41:59,119 --> 00:42:00,800
updates

1069
00:42:00,800 --> 00:42:03,680
so uh so this is how the uh example

1070
00:42:03,680 --> 00:42:06,319
example minimize results uh you can see

1071
00:42:06,319 --> 00:42:10,240
uh it detects null there uh if it is a

1072
00:42:10,240 --> 00:42:12,880
null pointer it will say uh true so

1073
00:42:12,880 --> 00:42:15,359
meaning that uh you know the bug is

1074
00:42:15,359 --> 00:42:18,000
useless uh after that it's just uh maybe

1075
00:42:18,000 --> 00:42:19,599
you can trigger denial of service or

1076
00:42:19,599 --> 00:42:21,359
many any other things

1077
00:42:21,359 --> 00:42:23,920
but uh if you uh if the results are

1078
00:42:23,920 --> 00:42:27,440
shows uh null false meaning that uh

1079
00:42:27,440 --> 00:42:28,800
there's something happening on the

1080
00:42:28,800 --> 00:42:30,720
memory or register that you can modify

1081
00:42:30,720 --> 00:42:33,200
it or you can override you can as you

1082
00:42:33,200 --> 00:42:35,839
can see the registers ex and ebx

1083
00:42:35,839 --> 00:42:38,640
with the results uh if the register

1084
00:42:38,640 --> 00:42:39,599
value

1085
00:42:39,599 --> 00:42:43,119
bad b and then yeah the stack trace is

1086
00:42:43,119 --> 00:42:46,960
uh where uh i was informing just now

1087
00:42:46,960 --> 00:42:47,839
where

1088
00:42:47,839 --> 00:42:51,200
it it could be uh inconsistent uh so in

1089
00:42:51,200 --> 00:42:55,119
inaccurate so you have to manually do uh

1090
00:42:55,119 --> 00:42:57,280
debugging on it in order for you to get

1091
00:42:57,280 --> 00:43:00,560
a more understanding on this

1092
00:43:00,560 --> 00:43:01,920
so uh

1093
00:43:01,920 --> 00:43:04,319
enough of the phases that uh that have

1094
00:43:04,319 --> 00:43:07,040
been built and and the the success

1095
00:43:07,040 --> 00:43:11,200
uh story of it and the failure of it so

1096
00:43:11,200 --> 00:43:13,119
uh we move on the stat the art and

1097
00:43:13,119 --> 00:43:15,040
understanding the attack surface

1098
00:43:15,040 --> 00:43:17,359
so uh before that right uh

1099
00:43:17,359 --> 00:43:19,440
before we started everything like a

1100
00:43:19,440 --> 00:43:20,560
fuzzing

1101
00:43:20,560 --> 00:43:23,119
for example uh basically we need to

1102
00:43:23,119 --> 00:43:24,560
understand like how the mitigations

1103
00:43:24,560 --> 00:43:27,599
takes place and if we fast the program

1104
00:43:27,599 --> 00:43:30,319
right uh does it trigger a crash on

1105
00:43:30,319 --> 00:43:32,160
which place on

1106
00:43:32,160 --> 00:43:34,640
are we are we seeing the uh

1107
00:43:34,640 --> 00:43:36,800
the crash happening on the

1108
00:43:36,800 --> 00:43:39,680
uh on the code the actual code that we

1109
00:43:39,680 --> 00:43:42,000
are targeting or the

1110
00:43:42,000 --> 00:43:45,200
the crash happening on the uh maybe uh

1111
00:43:45,200 --> 00:43:47,280
exceptions just a normal exceptions

1112
00:43:47,280 --> 00:43:50,960
trigger due to uh maybe stack uh

1113
00:43:50,960 --> 00:43:54,000
exhaust so something like that so uh for

1114
00:43:54,000 --> 00:43:56,160
example if uh stacking right uh we know

1115
00:43:56,160 --> 00:43:58,240
that uh there's already uh mitigations

1116
00:43:58,240 --> 00:44:00,400
uh being take place stage just that it

1117
00:44:00,400 --> 00:44:02,640
keeps uh recur uh there's a recursion

1118
00:44:02,640 --> 00:44:06,079
happening there where uh maybe uh it

1119
00:44:06,079 --> 00:44:08,800
keeps looping it's just a it's not a bug

1120
00:44:08,800 --> 00:44:09,760
it's just a

1121
00:44:09,760 --> 00:44:11,920
something that tried to mitigate or the

1122
00:44:11,920 --> 00:44:13,920
memory overwrite and so on right that

1123
00:44:13,920 --> 00:44:16,160
what we have done using the fuzzer

1124
00:44:16,160 --> 00:44:18,000
so those are the important things uh

1125
00:44:18,000 --> 00:44:19,839
especially in the modern operating

1126
00:44:19,839 --> 00:44:22,720
system nowadays when we do a passing

1127
00:44:22,720 --> 00:44:23,839
so

1128
00:44:23,839 --> 00:44:25,760
understand your target and the

1129
00:44:25,760 --> 00:44:27,920
mitigation is important

1130
00:44:27,920 --> 00:44:30,560
so well next one is uh

1131
00:44:30,560 --> 00:44:32,640
you need to verify that other targets

1132
00:44:32,640 --> 00:44:34,000
are really protected with kind of

1133
00:44:34,000 --> 00:44:36,480
mitigation like like i mentioned earlier

1134
00:44:36,480 --> 00:44:38,720
just now about the asl are not

1135
00:44:38,720 --> 00:44:40,640
implemented right uh you know in the

1136
00:44:40,640 --> 00:44:42,640
modern uh uh

1137
00:44:42,640 --> 00:44:45,200
operating system or era right uh

1138
00:44:45,200 --> 00:44:47,440
yeah those are the things that we are we

1139
00:44:47,440 --> 00:44:49,040
need to understand so

1140
00:44:49,040 --> 00:44:52,240
yeah and and of course once we have

1141
00:44:52,240 --> 00:44:55,280
everything right in hands a bugs or bugs

1142
00:44:55,280 --> 00:44:57,280
we don't call it the mana but yet but

1143
00:44:57,280 --> 00:44:59,599
just about how far can we demonstrate

1144
00:44:59,599 --> 00:45:01,680
the impact of the bug does it really

1145
00:45:01,680 --> 00:45:03,680
exploitable partially exploitable or

1146
00:45:03,680 --> 00:45:05,359
non-exploitable so those are the

1147
00:45:05,359 --> 00:45:06,640
important things that we need to take

1148
00:45:06,640 --> 00:45:08,000
care of because we don't want to end up

1149
00:45:08,000 --> 00:45:10,400
like submitting bugs to the

1150
00:45:10,400 --> 00:45:14,160
vendors and you and then you end up like

1151
00:45:14,160 --> 00:45:16,400
being rejected by them because you don't

1152
00:45:16,400 --> 00:45:19,839
provide the firm or solid uh results to

1153
00:45:19,839 --> 00:45:20,720
them

1154
00:45:20,720 --> 00:45:23,920
so yeah and yeah the last one is

1155
00:45:23,920 --> 00:45:25,920
understanding your target is actually

1156
00:45:25,920 --> 00:45:28,079
important

1157
00:45:28,079 --> 00:45:31,040
uh state diato so uh

1158
00:45:31,040 --> 00:45:33,119
as you know finding memory connection

1159
00:45:33,119 --> 00:45:35,359
used to be uh easy

1160
00:45:35,359 --> 00:45:36,640
in the past

1161
00:45:36,640 --> 00:45:40,319
and always have exportable results

1162
00:45:40,319 --> 00:45:41,359
and

1163
00:45:41,359 --> 00:45:43,680
we can see historically exploited for

1164
00:45:43,680 --> 00:45:44,720
the cats

1165
00:45:44,720 --> 00:45:46,880
and and if you are working in a

1166
00:45:46,880 --> 00:45:48,560
antivirus companies or if you are

1167
00:45:48,560 --> 00:45:51,040
working in uh security companies yeah

1168
00:45:51,040 --> 00:45:53,680
you are you you you can observe uh in

1169
00:45:53,680 --> 00:45:57,040
the wild exploits right then and yeah

1170
00:45:57,040 --> 00:45:58,319
because you are seeing like what's

1171
00:45:58,319 --> 00:46:01,520
happening on your customers on sites and

1172
00:46:01,520 --> 00:46:05,119
yeah you know that it has been exploited

1173
00:46:05,119 --> 00:46:08,560
for many years uh in the wild even even

1174
00:46:08,560 --> 00:46:10,280
for example like

1175
00:46:10,280 --> 00:46:11,680
[Music]

1176
00:46:11,680 --> 00:46:14,720
someone publicly uh write and exploit

1177
00:46:14,720 --> 00:46:15,839
because uh

1178
00:46:15,839 --> 00:46:18,560
and and posted in github and and because

1179
00:46:18,560 --> 00:46:20,400
a vendor that refused to fix that and

1180
00:46:20,400 --> 00:46:21,359
then

1181
00:46:21,359 --> 00:46:24,160
uh within three four days or within 24

1182
00:46:24,160 --> 00:46:25,760
hours we uh

1183
00:46:25,760 --> 00:46:28,880
the security companies uh that does uh

1184
00:46:28,880 --> 00:46:31,520
defend defense right and they they

1185
00:46:31,520 --> 00:46:33,520
started to see like uh exploits being

1186
00:46:33,520 --> 00:46:36,800
exploited in the wild so yeah that's uh

1187
00:46:36,800 --> 00:46:39,040
that's the there's the i mean like uh

1188
00:46:39,040 --> 00:46:41,119
the the thing is happening is just that

1189
00:46:41,119 --> 00:46:43,599
the attacker wait for the time

1190
00:46:43,599 --> 00:46:47,040
for for researchers to publicly uh

1191
00:46:47,040 --> 00:46:48,720
pause or

1192
00:46:48,720 --> 00:46:50,960
make them available on the internet

1193
00:46:50,960 --> 00:46:53,520
so uh attack surface is always there

1194
00:46:53,520 --> 00:46:55,200
it's just a matter of understanding how

1195
00:46:55,200 --> 00:46:57,040
it works out so this is the

1196
00:46:57,040 --> 00:46:58,720
important part and it's really hard to

1197
00:46:58,720 --> 00:47:00,800
find actually a tech surface

1198
00:47:00,800 --> 00:47:03,200
uh sometimes you see the attack surface

1199
00:47:03,200 --> 00:47:04,960
that is just that you don't know how to

1200
00:47:04,960 --> 00:47:08,800
uh how to how to trigger a bug or how to

1201
00:47:08,800 --> 00:47:11,440
find bugs at that particular point

1202
00:47:11,440 --> 00:47:13,839
uh but if you're looking uh carefully

1203
00:47:13,839 --> 00:47:15,599
you you know that you can do something

1204
00:47:15,599 --> 00:47:17,839
on that particular area

1205
00:47:17,839 --> 00:47:19,839
uh yeah so

1206
00:47:19,839 --> 00:47:22,319
last one i i would like to uh state

1207
00:47:22,319 --> 00:47:24,240
again that uh heavily involved with

1208
00:47:24,240 --> 00:47:26,960
engineering processes uh is basically

1209
00:47:26,960 --> 00:47:29,440
uh everywhere in in terms of housing uh

1210
00:47:29,440 --> 00:47:31,359
writing exploits funding bugs and so on

1211
00:47:31,359 --> 00:47:34,000
so re is important and you have to have

1212
00:47:34,000 --> 00:47:36,240
a solid uh

1213
00:47:36,240 --> 00:47:38,880
background in rb in order to to be a

1214
00:47:38,880 --> 00:47:40,590
successful bug hunter

1215
00:47:40,590 --> 00:47:41,760
[Music]

1216
00:47:41,760 --> 00:47:44,559
so uh in the past uh used to be that uh

1217
00:47:44,559 --> 00:47:47,440
this issue right uh you you see a stack

1218
00:47:47,440 --> 00:47:50,640
with overflow we know that uh

1219
00:47:50,640 --> 00:47:52,800
what happened after the stack uh being

1220
00:47:52,800 --> 00:47:55,280
overflow like uh we override the local

1221
00:47:55,280 --> 00:47:57,839
buffer and other variables and then we

1222
00:47:57,839 --> 00:47:59,839
control the pointer and so on right and

1223
00:47:59,839 --> 00:48:02,000
we have a user control data as well

1224
00:48:02,000 --> 00:48:04,480
that's where we maybe uh put our shell

1225
00:48:04,480 --> 00:48:07,920
code there so yeah it used to be like

1226
00:48:07,920 --> 00:48:11,599
this easy and and in the past when uh

1227
00:48:11,599 --> 00:48:13,920
when there is a ctf there's always like

1228
00:48:13,920 --> 00:48:15,680
this kind of a challenge right and it's

1229
00:48:15,680 --> 00:48:18,400
pretty easy to pull this type of binary

1230
00:48:18,400 --> 00:48:20,480
same goes to the real world in the past

1231
00:48:20,480 --> 00:48:22,640
it used to be easy uh there's a lot of

1232
00:48:22,640 --> 00:48:24,880
stack overflow uh buffer overflow

1233
00:48:24,880 --> 00:48:25,920
happening on

1234
00:48:25,920 --> 00:48:28,079
the software and and of course uh

1235
00:48:28,079 --> 00:48:30,240
there's uh many other things that are

1236
00:48:30,240 --> 00:48:33,280
happening yes and then uh things become

1237
00:48:33,280 --> 00:48:34,559
uh

1238
00:48:34,559 --> 00:48:36,559
a little bit uh harder i would say it's

1239
00:48:36,559 --> 00:48:39,280
a medium or intermediate level

1240
00:48:39,280 --> 00:48:42,480
kind of exploitation right where rop is

1241
00:48:42,480 --> 00:48:43,440
uh

1242
00:48:43,440 --> 00:48:44,880
being introduced

1243
00:48:44,880 --> 00:48:46,160
and then uh

1244
00:48:46,160 --> 00:48:48,240
there's a lot of

1245
00:48:48,240 --> 00:48:50,559
work uh compared to the previous

1246
00:48:50,559 --> 00:48:52,400
exploitation uh technique

1247
00:48:52,400 --> 00:48:55,599
where you need to find addresses uh to

1248
00:48:55,599 --> 00:48:57,920
make it gadgets and then to get a

1249
00:48:57,920 --> 00:48:59,760
successful executions and something like

1250
00:48:59,760 --> 00:49:02,559
that so so this is i mean like

1251
00:49:02,559 --> 00:49:03,680
how the

1252
00:49:03,680 --> 00:49:06,400
mitigation takes place uh to

1253
00:49:06,400 --> 00:49:08,720
to to trying to like reduce attack

1254
00:49:08,720 --> 00:49:11,839
surface on this type of issues

1255
00:49:11,839 --> 00:49:14,240
and then uh we started to see like a

1256
00:49:14,240 --> 00:49:16,720
control flow guard being implemented in

1257
00:49:16,720 --> 00:49:17,920
most of the

1258
00:49:17,920 --> 00:49:21,280
microsoft uh binaries and nowadays we do

1259
00:49:21,280 --> 00:49:22,319
see

1260
00:49:22,319 --> 00:49:25,359
a compiler the visual studio

1261
00:49:25,359 --> 00:49:27,440
it has these cfgs

1262
00:49:27,440 --> 00:49:29,280
[Music]

1263
00:49:29,280 --> 00:49:32,800
options uh there you can enable uh in

1264
00:49:32,800 --> 00:49:35,200
order to protect the binary so

1265
00:49:35,200 --> 00:49:37,920
yeah this is another story of another

1266
00:49:37,920 --> 00:49:40,800
level of exploitation and yeah if you

1267
00:49:40,800 --> 00:49:43,680
are expecting browsers

1268
00:49:43,680 --> 00:49:44,960
any other

1269
00:49:44,960 --> 00:49:47,040
program or application that requires uh

1270
00:49:47,040 --> 00:49:49,119
exploitation uh

1271
00:49:49,119 --> 00:49:52,000
or bypassing cfgs right so a more more

1272
00:49:52,000 --> 00:49:54,640
headache for the uh researchers to to

1273
00:49:54,640 --> 00:49:56,079
write an ex product in order to

1274
00:49:56,079 --> 00:49:57,920
successfully work

1275
00:49:57,920 --> 00:50:00,079
working on the experts

1276
00:50:00,079 --> 00:50:04,400
so uh so as you can see uh here like the

1277
00:50:04,400 --> 00:50:07,440
current version of microsoft access

1278
00:50:07,440 --> 00:50:09,040
as an example

1279
00:50:09,040 --> 00:50:11,520
it implemented it was implemented with

1280
00:50:11,520 --> 00:50:14,400
dp enable slr enable

1281
00:50:14,400 --> 00:50:16,160
however we see

1282
00:50:16,160 --> 00:50:18,240
cfgs and stack protection is

1283
00:50:18,240 --> 00:50:19,760
specifically

1284
00:50:19,760 --> 00:50:20,880
disabled

1285
00:50:20,880 --> 00:50:21,680
and

1286
00:50:21,680 --> 00:50:24,319
we can see the

1287
00:50:24,319 --> 00:50:27,520
dlls are being shipped by the microsoft

1288
00:50:27,520 --> 00:50:29,839
office right uh we don't we don't see

1289
00:50:29,839 --> 00:50:33,520
all of it being uh protected by cfg so

1290
00:50:33,520 --> 00:50:35,359
so we know that the attack vector here

1291
00:50:35,359 --> 00:50:37,599
is uh

1292
00:50:37,599 --> 00:50:40,640
i would say not too easy but you know uh

1293
00:50:40,640 --> 00:50:42,640
if you know how to write an exploit and

1294
00:50:42,640 --> 00:50:45,520
by passing slr or dp it should be pretty

1295
00:50:45,520 --> 00:50:47,200
easy to get a straightforward exploit

1296
00:50:47,200 --> 00:50:48,720
it's just that the operating system

1297
00:50:48,720 --> 00:50:50,960
itself could uh

1298
00:50:50,960 --> 00:50:53,280
maybe mitigate the exploit to work but

1299
00:50:53,280 --> 00:50:55,440
yeah the the uh the surface is there

1300
00:50:55,440 --> 00:50:57,119
it's just that we need to find the bug

1301
00:50:57,119 --> 00:50:59,040
there

1302
00:50:59,040 --> 00:51:02,000
so uh when i did uh uh a lot of reverse

1303
00:51:02,000 --> 00:51:04,079
engineering on the uh uh applications

1304
00:51:04,079 --> 00:51:06,559
right like uh word processing and so on

1305
00:51:06,559 --> 00:51:10,160
um i i encountered this uh um

1306
00:51:10,160 --> 00:51:12,160
disassembly snippet code

1307
00:51:12,160 --> 00:51:13,920
uh where this code is basically

1308
00:51:13,920 --> 00:51:16,640
allocating a memory uh basically it

1309
00:51:16,640 --> 00:51:20,000
triggers uh it triggers this after uh

1310
00:51:20,000 --> 00:51:21,839
maybe uh if i recall it's a buffer

1311
00:51:21,839 --> 00:51:24,640
overflow or stack overflow

1312
00:51:24,640 --> 00:51:27,119
any memory corruptions as well it does

1313
00:51:27,119 --> 00:51:30,079
detect and once it detects it will

1314
00:51:30,079 --> 00:51:32,240
redirect to this there's a pointer that

1315
00:51:32,240 --> 00:51:34,400
basically assigned to this one and it

1316
00:51:34,400 --> 00:51:35,280
will

1317
00:51:35,280 --> 00:51:39,119
uh it helps the program to align your

1318
00:51:39,119 --> 00:51:41,599
whatever that you are trying to do to to

1319
00:51:41,599 --> 00:51:44,000
its pointer that uh it's uh

1320
00:51:44,000 --> 00:51:46,079
hardcoded i think it's uncoded if i

1321
00:51:46,079 --> 00:51:48,559
recall there's a there's more code down

1322
00:51:48,559 --> 00:51:50,800
there it's just that uh it's just just a

1323
00:51:50,800 --> 00:51:52,400
simple quote that uh i try to

1324
00:51:52,400 --> 00:51:55,839
demonstrate so yeah uh some uh

1325
00:51:55,839 --> 00:51:57,119
some vendors are

1326
00:51:57,119 --> 00:51:59,119
really good in protecting this but

1327
00:51:59,119 --> 00:52:02,000
however if they don't implement

1328
00:52:02,000 --> 00:52:03,520
those mitigation that introduced by

1329
00:52:03,520 --> 00:52:04,400
microsoft

1330
00:52:04,400 --> 00:52:06,960
it's uh it's kind of uh useless to have

1331
00:52:06,960 --> 00:52:08,640
this kind because uh assuming that

1332
00:52:08,640 --> 00:52:10,400
they're in uh hardcore they're

1333
00:52:10,400 --> 00:52:12,000
disappointed right yeah you know that

1334
00:52:12,000 --> 00:52:14,079
pointer you uh you can abuse and use

1335
00:52:14,079 --> 00:52:16,400
that as a code reuse maybe or any other

1336
00:52:16,400 --> 00:52:18,079
vectors to in order to successfully

1337
00:52:18,079 --> 00:52:21,040
exploit those things

1338
00:52:21,119 --> 00:52:23,119
so yeah

1339
00:52:23,119 --> 00:52:26,400
nowadays uh we we started to see finding

1340
00:52:26,400 --> 00:52:27,760
bugs is

1341
00:52:27,760 --> 00:52:29,839
an easy task

1342
00:52:29,839 --> 00:52:32,319
modern exploitation is very hard and

1343
00:52:32,319 --> 00:52:34,319
expensive

1344
00:52:34,319 --> 00:52:35,040
and

1345
00:52:35,040 --> 00:52:36,640
and yeah if you do follow the

1346
00:52:36,640 --> 00:52:38,880
vulnerability right you can

1347
00:52:38,880 --> 00:52:41,440
actually write and exploit on on that

1348
00:52:41,440 --> 00:52:42,640
single bug

1349
00:52:42,640 --> 00:52:44,559
to successfully

1350
00:52:44,559 --> 00:52:46,640
achieve a powerful exploitation but you

1351
00:52:46,640 --> 00:52:49,040
have to change multiple bugs we can see

1352
00:52:49,040 --> 00:52:51,280
uh the trend in uh

1353
00:52:51,280 --> 00:52:54,240
point one uh it used to be like a one

1354
00:52:54,240 --> 00:52:56,319
two bucks uh being chained nowadays we

1355
00:52:56,319 --> 00:52:58,880
do see like a couple couples of uh

1356
00:52:58,880 --> 00:53:00,400
numbers of vulnerability being chained

1357
00:53:00,400 --> 00:53:02,880
in order for them to achieve a powerful

1358
00:53:02,880 --> 00:53:04,480
exploitation

1359
00:53:04,480 --> 00:53:06,640
and as you know our expert development

1360
00:53:06,640 --> 00:53:08,720
goals are started to continue growing

1361
00:53:08,720 --> 00:53:10,960
because we started to see like

1362
00:53:10,960 --> 00:53:12,960
maybe a government a state support

1363
00:53:12,960 --> 00:53:15,839
nation stage sponsor started to

1364
00:53:15,839 --> 00:53:18,400
abuse expert developments uh

1365
00:53:18,400 --> 00:53:20,640
and and yeah and

1366
00:53:20,640 --> 00:53:22,720
and to pawn everyone in the world right

1367
00:53:22,720 --> 00:53:24,240
so yeah

1368
00:53:24,240 --> 00:53:26,480
that's that that's what makes uh

1369
00:53:26,480 --> 00:53:28,880
the competitor between the researchers

1370
00:53:28,880 --> 00:53:32,960
uh putting firm and the vendors

1371
00:53:32,960 --> 00:53:34,160
so uh

1372
00:53:34,160 --> 00:53:36,720
next one is the attack surface uh

1373
00:53:36,720 --> 00:53:38,559
so uh speaking about the attack surface

1374
00:53:38,559 --> 00:53:40,800
right is basically

1375
00:53:40,800 --> 00:53:42,960
the entry point on on

1376
00:53:42,960 --> 00:53:45,119
what you want to exploit for example

1377
00:53:45,119 --> 00:53:47,839
like you found a web apis and then how

1378
00:53:47,839 --> 00:53:50,800
you want to exploit those uh what

1379
00:53:50,800 --> 00:53:53,440
from where or what you start

1380
00:53:53,440 --> 00:53:54,160
and

1381
00:53:54,160 --> 00:53:56,319
what is the entry point that you want to

1382
00:53:56,319 --> 00:53:57,599
uh

1383
00:53:57,599 --> 00:54:00,319
maybe uh find a bug there

1384
00:54:00,319 --> 00:54:03,680
so patches and fixes uh uh let us

1385
00:54:03,680 --> 00:54:05,760
understand like uh what have been fixed

1386
00:54:05,760 --> 00:54:06,880
previously

1387
00:54:06,880 --> 00:54:09,839
and it we never know it could introduce

1388
00:54:09,839 --> 00:54:12,880
another bug right so uh so we could

1389
00:54:12,880 --> 00:54:15,440
consider that as a attack surface so

1390
00:54:15,440 --> 00:54:17,440
next one next one is a

1391
00:54:17,440 --> 00:54:20,079
variant hunting indeed uh important as

1392
00:54:20,079 --> 00:54:22,720
well uh but it's super hard without a

1393
00:54:22,720 --> 00:54:25,280
proper guided fuzzy so like example like

1394
00:54:25,280 --> 00:54:28,640
my father i don't see a violent hunting

1395
00:54:28,640 --> 00:54:30,480
can be implemented because it's not a

1396
00:54:30,480 --> 00:54:33,920
smart it's not a smart phone right or or

1397
00:54:33,920 --> 00:54:36,480
coverage guided fuzzer

1398
00:54:36,480 --> 00:54:40,000
so that you can see like a win fl is uh

1399
00:54:40,000 --> 00:54:40,720
uh

1400
00:54:40,720 --> 00:54:43,040
it's useful in this type of uh

1401
00:54:43,040 --> 00:54:44,640
hunting because uh

1402
00:54:44,640 --> 00:54:47,440
you can do a lot of uh because you are

1403
00:54:47,440 --> 00:54:49,040
you need to code your own harness in

1404
00:54:49,040 --> 00:54:50,319
order for you to

1405
00:54:50,319 --> 00:54:52,640
successfully uh to find the attack

1406
00:54:52,640 --> 00:54:54,000
surface

1407
00:54:54,000 --> 00:54:56,559
uh input processing and passing uh the

1408
00:54:56,559 --> 00:54:58,480
most common attack surface uh if you are

1409
00:54:58,480 --> 00:55:00,000
looking into those

1410
00:55:00,000 --> 00:55:01,839
these three are the demand

1411
00:55:01,839 --> 00:55:05,279
idea if you want to start to

1412
00:55:05,440 --> 00:55:07,200
so uh

1413
00:55:07,200 --> 00:55:08,960
in my father's right in the custom

1414
00:55:08,960 --> 00:55:11,520
puzzle that i appeared i basically found

1415
00:55:11,520 --> 00:55:14,640
numbers bug on various software

1416
00:55:14,640 --> 00:55:15,680
uh

1417
00:55:15,680 --> 00:55:18,400
so in this talk i i try to present a

1418
00:55:18,400 --> 00:55:21,359
case study on microsoft access and hand

1419
00:55:21,359 --> 00:55:24,400
component processor so uh

1420
00:55:24,400 --> 00:55:27,839
microsoft did a great job on fixing and

1421
00:55:27,839 --> 00:55:30,480
they have informed me a future plan

1422
00:55:30,480 --> 00:55:33,119
release as well to eliminate bugs that i

1423
00:55:33,119 --> 00:55:36,480
have reported so before i i

1424
00:55:36,480 --> 00:55:40,400
before i write this in my slide right

1425
00:55:40,400 --> 00:55:42,480
i already asked a permission from them

1426
00:55:42,480 --> 00:55:44,720
usually after they reply me the last

1427
00:55:44,720 --> 00:55:47,440
email like uh if the bug

1428
00:55:47,440 --> 00:55:49,920
being fixed or not uh i'll try to ask

1429
00:55:49,920 --> 00:55:52,160
them like uh permissions to to write the

1430
00:55:52,160 --> 00:55:53,760
write ups on

1431
00:55:53,760 --> 00:55:56,400
on whatever findings that i found

1432
00:55:56,400 --> 00:55:59,440
so fun fact about hong kong right uh i

1433
00:55:59,440 --> 00:56:00,720
reported the

1434
00:56:00,720 --> 00:56:03,760
environment into pizza however uh

1435
00:56:03,760 --> 00:56:06,000
no updates uh no further updates from

1436
00:56:06,000 --> 00:56:08,319
them or news on the important part uh

1437
00:56:08,319 --> 00:56:11,119
the last one they told me uh

1438
00:56:11,119 --> 00:56:12,960
there's a there are like uh three or

1439
00:56:12,960 --> 00:56:15,119
four bucks uh in uh on the initial

1440
00:56:15,119 --> 00:56:17,920
report that i provided to them uh they

1441
00:56:17,920 --> 00:56:19,200
told me like

1442
00:56:19,200 --> 00:56:22,960
one or two bug has been fixed so not

1443
00:56:22,960 --> 00:56:25,680
until today i don't hear any any news

1444
00:56:25,680 --> 00:56:28,960
from them so it's kind of sad because

1445
00:56:28,960 --> 00:56:31,359
they are supposed to handle the things

1446
00:56:31,359 --> 00:56:33,598
right

1447
00:56:33,920 --> 00:56:36,000
so let's take a look into a case study

1448
00:56:36,000 --> 00:56:36,880
uh

1449
00:56:36,880 --> 00:56:39,119
uh this is the one that i reported to

1450
00:56:39,119 --> 00:56:42,160
microsoft in uh last year see uh it was

1451
00:56:42,160 --> 00:56:45,839
a sign with cbe 2020 16 957

1452
00:56:45,839 --> 00:56:48,400
the bug itself is a microsoft access

1453
00:56:48,400 --> 00:56:51,440
connectivity engine rce remote execution

1454
00:56:51,440 --> 00:56:54,559
vulnerability so the bug was found with

1455
00:56:54,559 --> 00:56:56,319
my custom fuzzer and microsoft

1456
00:56:56,319 --> 00:56:58,720
acknowledged me on the portal along with

1457
00:56:58,720 --> 00:56:59,920
the

1458
00:56:59,920 --> 00:57:02,559
cves that assigned to me

1459
00:57:02,559 --> 00:57:05,599
the idea of fuzzing microsoft access is

1460
00:57:05,599 --> 00:57:06,960
by feeding

1461
00:57:06,960 --> 00:57:08,240
the fuzzer

1462
00:57:08,240 --> 00:57:10,839
with the cob with the

1463
00:57:10,839 --> 00:57:15,040
compass like a extension mdb file uh

1464
00:57:15,040 --> 00:57:18,400
like more than 10 mag file so like

1465
00:57:18,400 --> 00:57:20,960
like this bug that i found uh

1466
00:57:20,960 --> 00:57:25,200
it was found on the 31 mb file size

1467
00:57:25,200 --> 00:57:28,640
and uh i assume that there's a lot of uh

1468
00:57:28,640 --> 00:57:30,319
bit flips happening

1469
00:57:30,319 --> 00:57:32,559
uh inside there despite to trigger the

1470
00:57:32,559 --> 00:57:34,720
bug so yeah

1471
00:57:34,720 --> 00:57:37,040
uh it's basically a hip options uh

1472
00:57:37,040 --> 00:57:39,440
vulnerability that was detected uh when

1473
00:57:39,440 --> 00:57:41,359
handling specially crafted access

1474
00:57:41,359 --> 00:57:42,480
database

1475
00:57:42,480 --> 00:57:45,359
and basically the bug is reproducible on

1476
00:57:45,359 --> 00:57:49,839
windows 10 x64 with the version 1909

1477
00:57:49,839 --> 00:57:52,079
so it's basically affected

1478
00:57:52,079 --> 00:57:55,680
version was the ms access uh 2016 with

1479
00:57:55,680 --> 00:57:58,960
the version 16.0 uh one three zero two

1480
00:57:58,960 --> 00:58:00,720
nine so

1481
00:58:00,720 --> 00:58:02,400
so how does the

1482
00:58:02,400 --> 00:58:04,880
bug looks like right uh when the fuzzer

1483
00:58:04,880 --> 00:58:06,640
caught the thing so

1484
00:58:06,640 --> 00:58:09,359
in this analysis is just a quick uh

1485
00:58:09,359 --> 00:58:10,640
look into it

1486
00:58:10,640 --> 00:58:12,880
uh when the uh when the crash trigger

1487
00:58:12,880 --> 00:58:14,559
right so this is the

1488
00:58:14,559 --> 00:58:17,200
uh exceptions that are

1489
00:58:17,200 --> 00:58:18,960
basically uh

1490
00:58:18,960 --> 00:58:21,920
generated and and when i even manually

1491
00:58:21,920 --> 00:58:24,000
verify the bugs

1492
00:58:24,000 --> 00:58:26,480
uh i do find that uh it's similar to

1493
00:58:26,480 --> 00:58:27,280
like

1494
00:58:27,280 --> 00:58:30,160
what the fuzzer found so you can see the

1495
00:58:30,160 --> 00:58:32,640
bug here is basically uh and here issue

1496
00:58:32,640 --> 00:58:35,680
right uh you can tell that uh it could

1497
00:58:35,680 --> 00:58:37,680
be acceptable as well

1498
00:58:37,680 --> 00:58:40,640
and by looking into the stack trace uh

1499
00:58:40,640 --> 00:58:42,240
we can see uh

1500
00:58:42,240 --> 00:58:44,640
heap allocations happening there and

1501
00:58:44,640 --> 00:58:46,319
yeah

1502
00:58:46,319 --> 00:58:49,040
and it triggers until the uh

1503
00:58:49,040 --> 00:58:52,000
whatever that uh triggers the pressures

1504
00:58:52,000 --> 00:58:54,319
so you can see that there's a

1505
00:58:54,319 --> 00:58:57,599
aligned memories uh rtl cut heap

1506
00:58:57,599 --> 00:58:59,839
internal and then debug electric that's

1507
00:58:59,839 --> 00:59:02,240
where the hip actually triggers and

1508
00:59:02,240 --> 00:59:05,040
that's uh so we know that the the hip

1509
00:59:05,040 --> 00:59:08,319
corruption is actually happening there

1510
00:59:08,319 --> 00:59:11,760
so our next case study is uh

1511
00:59:11,760 --> 00:59:15,520
msrc 60509

1512
00:59:15,520 --> 00:59:20,480
it's on the same application msxs 2016.

1513
00:59:20,480 --> 00:59:21,920
it's a hip based

1514
00:59:21,920 --> 00:59:24,640
out of bounds with oob ring

1515
00:59:24,640 --> 00:59:27,040
so uh

1516
00:59:27,040 --> 00:59:31,040
so yeah this was fun with a

1517
00:59:31,760 --> 00:59:33,920
fuzzing as well if the custom puzzle

1518
00:59:33,920 --> 00:59:36,240
that i built uh when i reported to

1519
00:59:36,240 --> 00:59:39,280
microsoft uh it took uh

1520
00:59:39,280 --> 00:59:42,079
numbers of email threads to to get to to

1521
00:59:42,079 --> 00:59:44,799
convince them to fix the bug however the

1522
00:59:44,799 --> 00:59:47,040
the final conclusion from them

1523
00:59:47,040 --> 00:59:49,040
uh

1524
00:59:49,040 --> 00:59:51,599
they considered this as a vulnerability

1525
00:59:51,599 --> 00:59:54,160
uh but they rated it as a moderate

1526
00:59:54,160 --> 00:59:56,480
because uh it's in for disclosure only

1527
00:59:56,480 --> 00:59:57,839
so meaning that

1528
00:59:57,839 --> 00:59:58,720
uh

1529
00:59:58,720 --> 01:00:01,440
the time there is no fix will be shipped

1530
01:00:01,440 --> 01:00:04,160
for this uh vulnerability however they

1531
01:00:04,160 --> 01:00:08,240
will include this uh fix as their

1532
01:00:08,240 --> 01:00:09,920
non-major fix

1533
01:00:09,920 --> 01:00:12,799
the next product cycle so

1534
01:00:12,799 --> 01:00:15,920
yeah uh looking into the

1535
01:00:15,920 --> 01:00:18,960
uh analysis right we could see that the

1536
01:00:18,960 --> 01:00:23,200
uh mem copy trigger here so uh in my uh

1537
01:00:23,200 --> 01:00:24,880
so the custom files that i built

1538
01:00:24,880 --> 01:00:29,200
basically triggers a lot of uh

1539
01:00:29,200 --> 01:00:31,760
exceptions on the mem copy so everyone

1540
01:00:31,760 --> 01:00:33,920
know when it comes to mem copy uh we

1541
01:00:33,920 --> 01:00:35,440
know it's uh

1542
01:00:35,440 --> 01:00:37,520
we know it's a serious issue it's just

1543
01:00:37,520 --> 01:00:38,240
that

1544
01:00:38,240 --> 01:00:41,520
uh in this matter we see it's uh only

1545
01:00:41,520 --> 01:00:44,079
like a one tight

1546
01:00:44,079 --> 01:00:47,440
out of bounds with you can see the esi

1547
01:00:47,440 --> 01:00:48,480
uh

1548
01:00:48,480 --> 01:00:52,079
being uh move it to the ex right so yes

1549
01:00:52,079 --> 01:00:55,280
if we take the the lowest number is a al

1550
01:00:55,280 --> 01:00:57,920
right it's only one so we know that

1551
01:00:57,920 --> 01:01:00,799
here is uh one byte only uh

1552
01:01:00,799 --> 01:01:03,599
triggers this kind of issue but uh

1553
01:01:03,599 --> 01:01:05,200
to write the next word for it uh it's

1554
01:01:05,200 --> 01:01:08,400
super hard i don't see an attack uh rc

1555
01:01:08,400 --> 01:01:11,680
is attacked like rc's and so on but uh i

1556
01:01:11,680 --> 01:01:13,680
i believe it could be useful for in for

1557
01:01:13,680 --> 01:01:16,720
disclosure uh and it could be uh uh

1558
01:01:16,720 --> 01:01:18,480
maybe uh

1559
01:01:18,480 --> 01:01:21,119
how do we set this uh maybe we could uh

1560
01:01:21,119 --> 01:01:23,119
change with another availability that

1561
01:01:23,119 --> 01:01:25,920
that can do some info like like maybe

1562
01:01:25,920 --> 01:01:27,440
leak some uh

1563
01:01:27,440 --> 01:01:29,920
image based address and so on right so

1564
01:01:29,920 --> 01:01:33,040
yeah we never know so yeah

1565
01:01:33,040 --> 01:01:35,680
so looking at the stack trace uh we can

1566
01:01:35,680 --> 01:01:37,119
see that uh

1567
01:01:37,119 --> 01:01:38,960
after

1568
01:01:38,960 --> 01:01:43,040
the functions msa you of this get tcdib

1569
01:01:43,040 --> 01:01:44,960
uh we know that the last one before

1570
01:01:44,960 --> 01:01:47,359
triggerman copy is basically a mem copy

1571
01:01:47,359 --> 01:01:49,920
being implemented in the code of dms

1572
01:01:49,920 --> 01:01:51,200
access

1573
01:01:51,200 --> 01:01:53,599
so the one that triggers the main copy

1574
01:01:53,599 --> 01:01:56,079
is basically on the vc runtime so that's

1575
01:01:56,079 --> 01:01:59,039
where the uh the the issue uh actually

1576
01:01:59,039 --> 01:02:01,039
happening

1577
01:02:01,039 --> 01:02:05,039
so the case study uh number three

1578
01:02:05,039 --> 01:02:08,640
it's a is a oob read bug as well

1579
01:02:08,640 --> 01:02:10,559
so uh

1580
01:02:10,559 --> 01:02:13,200
when i reported this bug to uh microsoft

1581
01:02:13,200 --> 01:02:15,599
uh they don't consider this as uh

1582
01:02:15,599 --> 01:02:18,160
exploitable however they accept this as

1583
01:02:18,160 --> 01:02:20,559
an opioid issue but

1584
01:02:20,559 --> 01:02:23,039
uh the expectability uh

1585
01:02:23,039 --> 01:02:25,920
rating is actually uh

1586
01:02:25,920 --> 01:02:28,640
whole said this uh it doesn't meet their

1587
01:02:28,640 --> 01:02:32,079
uh servicing bug criteria so so there

1588
01:02:32,079 --> 01:02:34,480
unless uh they they even asked me to

1589
01:02:34,480 --> 01:02:36,880
like uh approve if i can do uh info

1590
01:02:36,880 --> 01:02:38,640
disclosure or maybe

1591
01:02:38,640 --> 01:02:39,760
some uh

1592
01:02:39,760 --> 01:02:42,559
rc is on the uh on on this uh

1593
01:02:42,559 --> 01:02:45,119
using this bug but however it's really

1594
01:02:45,119 --> 01:02:48,799
hard to do to write one

1595
01:02:48,799 --> 01:02:51,680
so yeah again we see a mem copy here

1596
01:02:51,680 --> 01:02:54,079
that's out of mem copy right uh if you

1597
01:02:54,079 --> 01:02:55,039
notice

1598
01:02:55,039 --> 01:02:56,000
uh

1599
01:02:56,000 --> 01:02:57,520
we see here

1600
01:02:57,520 --> 01:03:00,480
it triggers uh

1601
01:03:00,799 --> 01:03:05,119
copying the esi into the edi and uh we

1602
01:03:05,119 --> 01:03:07,200
know that

1603
01:03:07,200 --> 01:03:09,839
we could uh override the it's just that

1604
01:03:09,839 --> 01:03:12,480
the metadata when uh i look further into

1605
01:03:12,480 --> 01:03:15,280
this is basically a one byte uh out of

1606
01:03:15,280 --> 01:03:16,799
bounds read

1607
01:03:16,799 --> 01:03:20,160
and and and there is not much uh

1608
01:03:20,160 --> 01:03:21,039
uh

1609
01:03:21,039 --> 01:03:23,760
attack surface after the the

1610
01:03:23,760 --> 01:03:25,359
full analysis of the

1611
01:03:25,359 --> 01:03:27,119
vulnerability

1612
01:03:27,119 --> 01:03:30,559
so uh if we look into the uh stack trace

1613
01:03:30,559 --> 01:03:33,440
uh we can see the ace core dlls is the

1614
01:03:33,440 --> 01:03:35,119
last one that being

1615
01:03:35,119 --> 01:03:37,119
executed before it triggers the vc

1616
01:03:37,119 --> 01:03:39,440
runtime mem copy so

1617
01:03:39,440 --> 01:03:41,520
so we know that uh

1618
01:03:41,520 --> 01:03:42,799
it does

1619
01:03:42,799 --> 01:03:45,200
maybe you can see that the last one the

1620
01:03:45,200 --> 01:03:47,200
access load string has

1621
01:03:47,200 --> 01:03:50,720
hscr embedded and create expert uh surf

1622
01:03:50,720 --> 01:03:51,599
opt

1623
01:03:51,599 --> 01:03:54,319
and it does uh something on there and

1624
01:03:54,319 --> 01:03:55,119
and

1625
01:03:55,119 --> 01:03:59,039
yeah it triggers this uh overview

1626
01:03:59,039 --> 01:04:00,880
and then the case study number four uh

1627
01:04:00,880 --> 01:04:02,559
is still on the same application

1628
01:04:02,559 --> 01:04:04,400
microsoft access uh

1629
01:04:04,400 --> 01:04:06,160
uh hip corruption

1630
01:04:06,160 --> 01:04:08,559
so this uh there's a invalid pointer

1631
01:04:08,559 --> 01:04:10,559
issue that was detected

1632
01:04:10,559 --> 01:04:13,119
under microsoft access and

1633
01:04:13,119 --> 01:04:15,359
and yeah uh still the same found with

1634
01:04:15,359 --> 01:04:18,079
the custom files that i wrote so this is

1635
01:04:18,079 --> 01:04:19,839
the one that uh pretty interesting bug

1636
01:04:19,839 --> 01:04:21,599
that i found

1637
01:04:21,599 --> 01:04:22,960
and microsoft

1638
01:04:22,960 --> 01:04:24,960
refused to fix this

1639
01:04:24,960 --> 01:04:28,079
as the stated user are required from

1640
01:04:28,079 --> 01:04:31,039
vbscript so the uh i'm not sure if they

1641
01:04:31,039 --> 01:04:31,920
get

1642
01:04:31,920 --> 01:04:34,880
what i've been writing uh to them

1643
01:04:34,880 --> 01:04:38,000
but what i'm seeing there is you don't

1644
01:04:38,000 --> 01:04:40,480
have to run or enable you know when you

1645
01:04:40,480 --> 01:04:43,760
open a microsoft access uh or any other

1646
01:04:43,760 --> 01:04:45,520
office uh program right

1647
01:04:45,520 --> 01:04:47,520
uh when you open uh

1648
01:04:47,520 --> 01:04:49,039
application with uh

1649
01:04:49,039 --> 01:04:51,760
vbscript or any scripts being embedded

1650
01:04:51,760 --> 01:04:53,599
right it will

1651
01:04:53,599 --> 01:04:56,319
it will shows up a bar there that uh

1652
01:04:56,319 --> 01:04:59,119
saying that enable content so in this

1653
01:04:59,119 --> 01:05:01,119
case right i don't have to enable

1654
01:05:01,119 --> 01:05:03,920
content so i i can trigger the bug

1655
01:05:03,920 --> 01:05:07,520
uh right before uh the enable content uh

1656
01:05:07,520 --> 01:05:10,880
was uh showing in the application so uh

1657
01:05:10,880 --> 01:05:13,440
so basically the bug itself is uh

1658
01:05:13,440 --> 01:05:16,480
is when uh there's a specially crafted

1659
01:05:16,480 --> 01:05:19,200
bb script that i did uh first on the

1660
01:05:19,200 --> 01:05:21,119
specific uh uh

1661
01:05:21,119 --> 01:05:24,160
area on the bb script and the

1662
01:05:24,160 --> 01:05:26,640
what i noticed that uh uh

1663
01:05:26,640 --> 01:05:29,839
when the microsoft access open this uh

1664
01:05:29,839 --> 01:05:30,720
uh

1665
01:05:30,720 --> 01:05:33,760
uh this uh fuzz file right it triggers

1666
01:05:33,760 --> 01:05:35,920
the uh the memory correction right

1667
01:05:35,920 --> 01:05:39,440
before uh the applications being open or

1668
01:05:39,440 --> 01:05:41,760
right before you click anything on the

1669
01:05:41,760 --> 01:05:42,960
on the uh

1670
01:05:42,960 --> 01:05:45,359
microsoft office access

1671
01:05:45,359 --> 01:05:48,799
so as you can see the uh

1672
01:05:48,799 --> 01:05:50,480
analysis here right the access

1673
01:05:50,480 --> 01:05:52,559
violations was triggered

1674
01:05:52,559 --> 01:05:54,799
and you know

1675
01:05:54,799 --> 01:05:56,880
uh the symbols

1676
01:05:56,880 --> 01:05:58,880
could not be found due to the vpe seven

1677
01:05:58,880 --> 01:06:01,760
the dll is actually not there on the

1678
01:06:01,760 --> 01:06:02,880
taxes but

1679
01:06:02,880 --> 01:06:04,799
uh when you see the uh

1680
01:06:04,799 --> 01:06:07,119
when you see the last disassembly called

1681
01:06:07,119 --> 01:06:10,559
vbe seven dll and which is the server

1682
01:06:10,559 --> 01:06:13,200
uh you can see that uh uh basically

1683
01:06:13,200 --> 01:06:15,359
there um

1684
01:06:15,359 --> 01:06:17,280
there could be a potential

1685
01:06:17,280 --> 01:06:20,400
hip invalid point issue or in the hip

1686
01:06:20,400 --> 01:06:21,760
corruptions right

1687
01:06:21,760 --> 01:06:25,200
uh on the vba uh on the vb script itself

1688
01:06:25,200 --> 01:06:27,760
when it pass so you know that

1689
01:06:27,760 --> 01:06:30,480
this specially crafted file is basically

1690
01:06:30,480 --> 01:06:33,839
uh can trigger a

1691
01:06:33,839 --> 01:06:36,559
crash on the uh

1692
01:06:36,559 --> 01:06:38,640
on these applications

1693
01:06:38,640 --> 01:06:40,160
so yeah

1694
01:06:40,160 --> 01:06:42,319
by looking into it

1695
01:06:42,319 --> 01:06:43,920
we know that

1696
01:06:43,920 --> 01:06:45,760
it's only like

1697
01:06:45,760 --> 01:06:48,000
i can't i can't recall how many bytes

1698
01:06:48,000 --> 01:06:49,599
that you can

1699
01:06:49,599 --> 01:06:52,480
do uh override but uh i don't know for

1700
01:06:52,480 --> 01:06:55,599
the analysis because uh they were not uh

1701
01:06:55,599 --> 01:06:58,240
convinced to my suggestions on like how

1702
01:06:58,240 --> 01:07:00,720
attacker could exploit this so uh the

1703
01:07:00,720 --> 01:07:04,000
scenario when i spoken to them is uh

1704
01:07:04,000 --> 01:07:05,839
when i write an email to them is like

1705
01:07:05,839 --> 01:07:07,520
assuming that attacker could exploit

1706
01:07:07,520 --> 01:07:10,640
this vulnerability and then uh

1707
01:07:10,640 --> 01:07:13,039
they they then they don't have to worry

1708
01:07:13,039 --> 01:07:15,920
about the content filtering right on the

1709
01:07:15,920 --> 01:07:18,160
microsoft office and they just abuse

1710
01:07:18,160 --> 01:07:20,240
this to bypass those in order to

1711
01:07:20,240 --> 01:07:22,160
successfully uh

1712
01:07:22,160 --> 01:07:24,640
execute the next phase of whatever that

1713
01:07:24,640 --> 01:07:26,880
they're trying to

1714
01:07:26,880 --> 01:07:28,640
exploit so those are the the main

1715
01:07:28,640 --> 01:07:30,559
scenario that i i feel like this is

1716
01:07:30,559 --> 01:07:31,599
something that

1717
01:07:31,599 --> 01:07:34,000
that they should fix

1718
01:07:34,000 --> 01:07:36,880
so uh uh for the analysis right now so

1719
01:07:36,880 --> 01:07:39,119
yeah you can see here right uh there are

1720
01:07:39,119 --> 01:07:42,079
like two bytes uh basically being

1721
01:07:42,079 --> 01:07:44,079
all right there so you know that

1722
01:07:44,079 --> 01:07:45,760
something can be achieved from here

1723
01:07:45,760 --> 01:07:46,880
right so

1724
01:07:46,880 --> 01:07:50,559
uh yeah this is how i mean like uh

1725
01:07:50,559 --> 01:07:52,640
the proof of the exploitability but

1726
01:07:52,640 --> 01:07:55,839
i'm not sure uh maybe the engineers uh

1727
01:07:55,839 --> 01:07:57,280
feel that uh

1728
01:07:57,280 --> 01:07:58,880
it's really hard to construct the expert

1729
01:07:58,880 --> 01:08:01,119
or i don't know uh it's just that they

1730
01:08:01,119 --> 01:08:05,039
told me not no fix for this one

1731
01:08:05,039 --> 01:08:06,799
because uh the measurement of the

1732
01:08:06,799 --> 01:08:08,640
content security filtering and content

1733
01:08:08,640 --> 01:08:10,480
filtering of the microsoft office is the

1734
01:08:10,480 --> 01:08:14,400
one that they think it it is a layer for

1735
01:08:14,400 --> 01:08:17,279
the security not not to fix the bugs uh

1736
01:08:17,279 --> 01:08:20,000
whatever exists on this one

1737
01:08:20,000 --> 01:08:22,560
so the last case study uh hand converts

1738
01:08:22,560 --> 01:08:25,839
out of bonds with vulnerability

1739
01:08:25,920 --> 01:08:29,600
so basically there's a hip oob read

1740
01:08:29,600 --> 01:08:32,399
vulnerability in the hong kong

1741
01:08:32,399 --> 01:08:35,519
and these uh

1742
01:08:36,158 --> 01:08:38,238
the attacker could uh

1743
01:08:38,238 --> 01:08:40,319
remotely exploit

1744
01:08:40,319 --> 01:08:42,719
their victims uh and to convince the

1745
01:08:42,719 --> 01:08:46,080
users to arbitrarily run the code in the

1746
01:08:46,080 --> 01:08:48,080
context of the current users

1747
01:08:48,080 --> 01:08:50,640
so uh

1748
01:08:50,640 --> 01:08:52,238
the target was on the product and

1749
01:08:52,238 --> 01:08:55,279
version uh affected was the uh income

1750
01:08:55,279 --> 01:08:57,839
office 2020 with the version 11.

1751
01:08:57,839 --> 01:08:59,279
so uh

1752
01:08:59,279 --> 01:09:00,880
this vulnerability basically was found

1753
01:09:00,880 --> 01:09:02,479
we are fuzzy

1754
01:09:02,479 --> 01:09:05,120
so this is the the quick analysis on the

1755
01:09:05,120 --> 01:09:07,679
uh on the bindings that i did

1756
01:09:07,679 --> 01:09:10,719
so you can see that i uh

1757
01:09:10,719 --> 01:09:14,080
we could control the the pointer ex 0c

1758
01:09:14,080 --> 01:09:16,880
and and then we could

1759
01:09:16,880 --> 01:09:20,399
replace whatever in ecx and uh assuming

1760
01:09:20,399 --> 01:09:22,319
that the next instruction ecx being

1761
01:09:22,319 --> 01:09:25,600
executed uh on the call or whatever that

1762
01:09:25,600 --> 01:09:28,560
uh being uh being called right

1763
01:09:28,560 --> 01:09:30,479
we can actually uh

1764
01:09:30,479 --> 01:09:33,279
run an arbitrary code there so

1765
01:09:33,279 --> 01:09:35,439
it's obvious bug there you can see that

1766
01:09:35,439 --> 01:09:37,679
the exploitability as well

1767
01:09:37,679 --> 01:09:39,120
so uh

1768
01:09:39,120 --> 01:09:41,198
so this is uh the snippet of the stack

1769
01:09:41,198 --> 01:09:43,120
trace there's there are a lot of it it's

1770
01:09:43,120 --> 01:09:45,040
just that uh

1771
01:09:45,040 --> 01:09:47,120
there are too long for it for me to do

1772
01:09:47,120 --> 01:09:49,120
the best here so

1773
01:09:49,120 --> 01:09:53,040
uh due to no uh symbols uh on the uh

1774
01:09:53,040 --> 01:09:54,800
on this uh

1775
01:09:54,800 --> 01:09:57,440
program right so um we don't see so much

1776
01:09:57,440 --> 01:10:00,320
anything so there's a lot of uh

1777
01:10:00,320 --> 01:10:02,239
reverse engineering that are involved in

1778
01:10:02,239 --> 01:10:04,800
this uh analysis

1779
01:10:04,800 --> 01:10:06,719
so uh looking into the heap uh is

1780
01:10:06,719 --> 01:10:08,960
basically we we can see the hip being

1781
01:10:08,960 --> 01:10:11,760
corrupted right and uh looking into the

1782
01:10:11,760 --> 01:10:14,640
the uh address three f five three four

1783
01:10:14,640 --> 01:10:15,360
five

1784
01:10:15,360 --> 01:10:18,320
three four five one zero is basically

1785
01:10:18,320 --> 01:10:21,440
that uh pointing to the uh corrupted uh

1786
01:10:21,440 --> 01:10:23,678
heap

1787
01:10:24,159 --> 01:10:27,280
so uh okay so vulnerability disclosure

1788
01:10:27,280 --> 01:10:29,199
again and again right uh there's a lot

1789
01:10:29,199 --> 01:10:31,520
of debates on this and we still we are

1790
01:10:31,520 --> 01:10:34,159
still seeing this until today uh you

1791
01:10:34,159 --> 01:10:36,080
name any vendors no you name any

1792
01:10:36,080 --> 01:10:38,719
boutique firm you name any uh program

1793
01:10:38,719 --> 01:10:42,719
that are still seeing these debts right

1794
01:10:42,719 --> 01:10:45,360
and then uh of course we know that uh

1795
01:10:45,360 --> 01:10:47,280
it's a painful processes

1796
01:10:47,280 --> 01:10:50,080
uh both parties uh for richard

1797
01:10:50,080 --> 01:10:52,159
researchers and vendors and

1798
01:10:52,159 --> 01:10:54,400
and yeah it's being a headache painful

1799
01:10:54,400 --> 01:10:56,640
and that's why there's a there's a

1800
01:10:56,640 --> 01:10:59,760
there's a what's so called uh normal

1801
01:10:59,760 --> 01:11:02,080
free bug something like that right there

1802
01:11:02,080 --> 01:11:04,960
just not to provide anything to vendors

1803
01:11:04,960 --> 01:11:07,120
so so yeah

1804
01:11:07,120 --> 01:11:09,120
these are the fun fact yeah so well we

1805
01:11:09,120 --> 01:11:11,520
do see most vendors have a video your

1806
01:11:11,520 --> 01:11:15,360
project process however

1807
01:11:15,679 --> 01:11:17,679
sometimes they just don't want to work

1808
01:11:17,679 --> 01:11:20,880
closely with you that's all i've been uh

1809
01:11:20,880 --> 01:11:23,199
dealing with numbers of vendors large

1810
01:11:23,199 --> 01:11:24,960
vendors as well in

1811
01:11:24,960 --> 01:11:26,400
another country

1812
01:11:26,400 --> 01:11:28,960
it's a it's a painful processes

1813
01:11:28,960 --> 01:11:31,679
they told me uh to report this to report

1814
01:11:31,679 --> 01:11:35,120
that and by uh coming to this uh

1815
01:11:35,120 --> 01:11:38,080
process or whatever they guide me to do

1816
01:11:38,080 --> 01:11:41,600
but when uh when when it comes to the uh

1817
01:11:41,600 --> 01:11:44,000
uh disclosing all the issues to them

1818
01:11:44,000 --> 01:11:46,640
right they just uh silent uh zip to

1819
01:11:46,640 --> 01:11:47,679
mouth and

1820
01:11:47,679 --> 01:11:48,960
and

1821
01:11:48,960 --> 01:11:50,880
just let me uh

1822
01:11:50,880 --> 01:11:53,280
leave me blank or something like that so

1823
01:11:53,280 --> 01:11:56,560
yeah but up uh and of course i i don't

1824
01:11:56,560 --> 01:12:01,120
always uh uh share uh findings on on

1825
01:12:01,120 --> 01:12:02,960
on whatever that i've been found even

1826
01:12:02,960 --> 01:12:05,280
though there is uh defenders and things

1827
01:12:05,280 --> 01:12:07,120
because we have

1828
01:12:07,120 --> 01:12:09,600
just i i what i did i was trying to just

1829
01:12:09,600 --> 01:12:12,320
uh minimize the attack surface right

1830
01:12:12,320 --> 01:12:14,159
by not disclosing anything even though

1831
01:12:14,159 --> 01:12:15,920
they don't want to fix

1832
01:12:15,920 --> 01:12:17,600
so yeah

1833
01:12:17,600 --> 01:12:20,159
and yeah disclosure uh

1834
01:12:20,159 --> 01:12:22,719
some of the bounty and some uh there's

1835
01:12:22,719 --> 01:12:25,280
always a debates on this as well we can

1836
01:12:25,280 --> 01:12:27,040
see on twitter there's a lot of people

1837
01:12:27,040 --> 01:12:28,960
uh researchers complaining that they

1838
01:12:28,960 --> 01:12:31,760
submit multiple bugs but they only paid

1839
01:12:31,760 --> 01:12:35,120
uh with one single entry only but uh

1840
01:12:35,120 --> 01:12:36,640
they don't get paid for the rest of the

1841
01:12:36,640 --> 01:12:38,560
bugs that they reported so yeah it's a

1842
01:12:38,560 --> 01:12:40,400
pain

1843
01:12:40,400 --> 01:12:43,120
all right so do's and don'ts uh uh when

1844
01:12:43,120 --> 01:12:44,480
you do uh

1845
01:12:44,480 --> 01:12:46,000
vulnerability disclosure right just

1846
01:12:46,000 --> 01:12:47,920
provide the sketching for uh to ease the

1847
01:12:47,920 --> 01:12:49,280
vendor stars

1848
01:12:49,280 --> 01:12:50,400
if you don't know

1849
01:12:50,400 --> 01:12:53,679
sometimes vendors can guide you on uh or

1850
01:12:53,679 --> 01:12:56,000
show you like the way or how you resolve

1851
01:12:56,000 --> 01:12:58,719
it like i used to work closely with

1852
01:12:58,719 --> 01:13:02,080
closely with microsoft they provide

1853
01:13:02,080 --> 01:13:04,320
a lot of

1854
01:13:04,320 --> 01:13:06,159
good knowledge to me uh that i don't

1855
01:13:06,159 --> 01:13:07,520
aware

1856
01:13:07,520 --> 01:13:09,120
so that's why i

1857
01:13:09,120 --> 01:13:11,840
in the next reporting to them is easy

1858
01:13:11,840 --> 01:13:12,960
for me to

1859
01:13:12,960 --> 01:13:15,840
provide relevant info and easy for them

1860
01:13:15,840 --> 01:13:19,040
to analyze to verify everything so if

1861
01:13:19,040 --> 01:13:20,880
necessary use all the mediums to inform

1862
01:13:20,880 --> 01:13:23,199
vendors twitter facebook any other

1863
01:13:23,199 --> 01:13:26,560
things that you can use to uh

1864
01:13:26,560 --> 01:13:28,159
to contact them

1865
01:13:28,159 --> 01:13:30,239
just contact them uh

1866
01:13:30,239 --> 01:13:33,520
i know it's pain but uh you sometimes i

1867
01:13:33,520 --> 01:13:35,679
might get attention to uh media you

1868
01:13:35,679 --> 01:13:37,280
never know or just contact someone on

1869
01:13:37,280 --> 01:13:39,360
their security media right and tell them

1870
01:13:39,360 --> 01:13:41,040
that you found something or something

1871
01:13:41,040 --> 01:13:44,239
like that it could be fun as well uh get

1872
01:13:44,239 --> 01:13:45,679
some feedback from other researchers

1873
01:13:45,679 --> 01:13:47,920
from discussion globality so if you're

1874
01:13:47,920 --> 01:13:49,520
not sure uh

1875
01:13:49,520 --> 01:13:51,520
to report this bug right or how to

1876
01:13:51,520 --> 01:13:53,280
disclose this to vendors

1877
01:13:53,280 --> 01:13:54,640
because you might

1878
01:13:54,640 --> 01:13:56,640
end up like uh getsu and so right then

1879
01:13:56,640 --> 01:13:58,159
just get some feedback

1880
01:13:58,159 --> 01:14:00,320
because most of the researchers out

1881
01:14:00,320 --> 01:14:02,560
there should have the uh

1882
01:14:02,560 --> 01:14:03,440
uh

1883
01:14:03,440 --> 01:14:06,320
experience on reporting bugs and so on

1884
01:14:06,320 --> 01:14:07,760
uh

1885
01:14:07,760 --> 01:14:09,040
just follow the standard volunteer

1886
01:14:09,040 --> 01:14:11,280
disclosure from google project zero

1887
01:14:11,280 --> 01:14:14,560
which is a 90 days perhaps or depends on

1888
01:14:14,560 --> 01:14:15,360
you

1889
01:14:15,360 --> 01:14:16,719
but yeah

1890
01:14:16,719 --> 01:14:17,679
uh

1891
01:14:17,679 --> 01:14:20,000
if in your country right or in uh in

1892
01:14:20,000 --> 01:14:21,440
your in the company that you're

1893
01:14:21,440 --> 01:14:23,520
targeting their country has a search

1894
01:14:23,520 --> 01:14:25,360
just get their search involved

1895
01:14:25,360 --> 01:14:29,199
like when i work closely with pizza

1896
01:14:29,199 --> 01:14:30,480
such in

1897
01:14:30,480 --> 01:14:32,640
korea south korea

1898
01:14:32,640 --> 01:14:33,440
yeah

1899
01:14:33,440 --> 01:14:34,159
i

1900
01:14:34,159 --> 01:14:36,239
i just throw them all the relevant info

1901
01:14:36,239 --> 01:14:37,120
that i

1902
01:14:37,120 --> 01:14:39,120
want to report and they are the one that

1903
01:14:39,120 --> 01:14:42,000
uh being the in the middle man to work

1904
01:14:42,000 --> 01:14:43,520
on this

1905
01:14:43,520 --> 01:14:44,960
so uh

1906
01:14:44,960 --> 01:14:46,880
just try to avoid public disclosure

1907
01:14:46,880 --> 01:14:48,719
without modifying vendors because you

1908
01:14:48,719 --> 01:14:51,280
might end up like uh being

1909
01:14:51,280 --> 01:14:52,480
sue or

1910
01:14:52,480 --> 01:14:53,600
being

1911
01:14:53,600 --> 01:14:55,520
i don't know they're called lawyers and

1912
01:14:55,520 --> 01:14:56,880
so on right to

1913
01:14:56,880 --> 01:14:59,440
to get you trouble right so

1914
01:14:59,440 --> 01:15:01,120
just try to avoid those

1915
01:15:01,120 --> 01:15:02,560
and make sure to

1916
01:15:02,560 --> 01:15:04,800
uh inform them if you want to make the

1917
01:15:04,800 --> 01:15:06,320
right apps

1918
01:15:06,320 --> 01:15:08,640
so do not talk publicly on what you

1919
01:15:08,640 --> 01:15:11,040
found not until it gets fixed so this is

1920
01:15:11,040 --> 01:15:12,960
important things as well so

1921
01:15:12,960 --> 01:15:16,239
you need to look into this aspect

1922
01:15:16,239 --> 01:15:18,159
all right so

1923
01:15:18,159 --> 01:15:20,880
we come to the conclusion uh okay all

1924
01:15:20,880 --> 01:15:22,640
right so

1925
01:15:22,640 --> 01:15:25,040
what we can take here right so best

1926
01:15:25,040 --> 01:15:27,280
defense is basically often so

1927
01:15:27,280 --> 01:15:29,280
uh

1928
01:15:29,280 --> 01:15:30,800
you need to attack in order to

1929
01:15:30,800 --> 01:15:33,199
successfully uh defending

1930
01:15:33,199 --> 01:15:36,000
so it uh it goes uh it goes the same

1931
01:15:36,000 --> 01:15:39,440
like if you uh read the uh

1932
01:15:39,440 --> 01:15:42,239
books like out of uh

1933
01:15:42,239 --> 01:15:44,320
the suzu

1934
01:15:44,320 --> 01:15:48,080
and if you play a soccer or player

1935
01:15:48,080 --> 01:15:50,239
any other things games right and

1936
01:15:50,239 --> 01:15:52,480
requires defense and offense

1937
01:15:52,480 --> 01:15:54,159
you know the strategy

1938
01:15:54,159 --> 01:15:57,120
to get the better defense you need to

1939
01:15:57,120 --> 01:15:59,280
get a better offense

1940
01:15:59,280 --> 01:16:01,520
uh finding bugs nowadays

1941
01:16:01,520 --> 01:16:04,000
is super hard uh it's like a little in a

1942
01:16:04,000 --> 01:16:08,640
high stack you find one it's a slug

1943
01:16:08,640 --> 01:16:12,159
and uh properly uh disclosing uh

1944
01:16:12,159 --> 01:16:15,280
vulnerability to vendors uh not until uh

1945
01:16:15,280 --> 01:16:17,199
things are getting fixed so

1946
01:16:17,199 --> 01:16:19,600
make sure that they're really uh

1947
01:16:19,600 --> 01:16:22,080
just trust them with the fixes and so on

1948
01:16:22,080 --> 01:16:23,920
uh so that uh

1949
01:16:23,920 --> 01:16:26,000
you're satisfied with your work and so

1950
01:16:26,000 --> 01:16:28,880
on so like me myself i do it all of this

1951
01:16:28,880 --> 01:16:31,600
in my free time so so i don't i consider

1952
01:16:31,600 --> 01:16:33,520
it as my part time

1953
01:16:33,520 --> 01:16:35,920
or in my free time because i feel like

1954
01:16:35,920 --> 01:16:37,360
it's a satisfic

1955
01:16:37,360 --> 01:16:40,000
satisfaction for me to to

1956
01:16:40,000 --> 01:16:43,280
to make them do work something like that

1957
01:16:43,280 --> 01:16:46,080
so uh lastly uh long life file format

1958
01:16:46,080 --> 01:16:48,080
fuzzy i know

1959
01:16:48,080 --> 01:16:50,960
the the modern era nowadays is uh

1960
01:16:50,960 --> 01:16:52,320
different right

1961
01:16:52,320 --> 01:16:55,440
everything moves to smart guided code

1962
01:16:55,440 --> 01:16:58,000
coverage and so on but uh file format

1963
01:16:58,000 --> 01:17:01,120
was still indeed

1964
01:17:01,199 --> 01:17:03,199
i would say it's relevant it's just that

1965
01:17:03,199 --> 01:17:04,800
you need to figure out like how you want

1966
01:17:04,800 --> 01:17:07,120
to make the things

1967
01:17:07,120 --> 01:17:09,120
work successfully

1968
01:17:09,120 --> 01:17:13,280
so yeah all right that's all about my

1969
01:17:13,280 --> 01:17:14,640
talk today

1970
01:17:14,640 --> 01:17:18,560
i would like to say thanks again to uh

1971
01:17:18,560 --> 01:17:20,400
foodcon organizer

1972
01:17:20,400 --> 01:17:21,679
uh

1973
01:17:21,679 --> 01:17:22,960
and

1974
01:17:22,960 --> 01:17:24,480
i feel like i want to visit the

1975
01:17:24,480 --> 01:17:27,040
philippines after this so yeah

1976
01:17:27,040 --> 01:17:29,440
and uh if you want to

1977
01:17:29,440 --> 01:17:32,140
contact me you can find me on twitter

1978
01:17:32,140 --> 01:17:33,360
[Music]

1979
01:17:33,360 --> 01:17:34,640
just

1980
01:17:34,640 --> 01:17:37,120
you just reverse my name

1981
01:17:37,120 --> 01:17:40,560
give a string my name nafis to sifan

1982
01:17:40,560 --> 01:17:42,719
you can follow me there and you can

1983
01:17:42,719 --> 01:17:45,679
follow my blog as well on the works that

1984
01:17:45,679 --> 01:17:48,159
i have did in the past

1985
01:17:48,159 --> 01:17:51,199
so thank you again for listening and

1986
01:17:51,199 --> 01:17:55,799
have a great day hack the planet

