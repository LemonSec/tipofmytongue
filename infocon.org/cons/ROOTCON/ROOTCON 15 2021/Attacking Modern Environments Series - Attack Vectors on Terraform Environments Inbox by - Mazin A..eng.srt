1
00:00:07,359 --> 00:00:09,599
this is mazen ahmed i'm an application

2
00:00:09,599 --> 00:00:12,160
security and offensive security engineer

3
00:00:12,160 --> 00:00:14,160
i founded fullhand it's a security

4
00:00:14,160 --> 00:00:16,400
startup that solves the attack surface

5
00:00:16,400 --> 00:00:19,119
feasibility problem for companies and

6
00:00:19,119 --> 00:00:20,720
organizations

7
00:00:20,720 --> 00:00:22,880
and also i'm an occasional bug bounty

8
00:00:22,880 --> 00:00:24,560
hunter i have

9
00:00:24,560 --> 00:00:28,000
been acknowledged by facebook twitter

10
00:00:28,000 --> 00:00:30,320
linkedin zoom oracle and many other

11
00:00:30,320 --> 00:00:31,679
companies

12
00:00:31,679 --> 00:00:33,360
and of course

13
00:00:33,360 --> 00:00:36,480
i'm in love with cloud security anything

14
00:00:36,480 --> 00:00:38,480
related to cloud security and of course

15
00:00:38,480 --> 00:00:39,600
uh

16
00:00:39,600 --> 00:00:42,079
different things related to security

17
00:00:42,079 --> 00:00:43,440
are my passion

18
00:00:43,440 --> 00:00:45,760
and that's why i put the effort into

19
00:00:45,760 --> 00:00:48,960
having this research made

20
00:00:48,960 --> 00:00:51,039
the agenda for today

21
00:00:51,039 --> 00:00:54,320
is first we we're gonna go over things

22
00:00:54,320 --> 00:00:57,120
uh a background on terraform

23
00:00:57,120 --> 00:00:59,920
what's what styrofoam how does it work

24
00:00:59,920 --> 00:01:02,320
and why do we need to learn about all of

25
00:01:02,320 --> 00:01:03,280
this

26
00:01:03,280 --> 00:01:05,519
why is it important

27
00:01:05,519 --> 00:01:07,840
attack victors and scenarios attack

28
00:01:07,840 --> 00:01:09,600
pictures and scenarios

29
00:01:09,600 --> 00:01:12,080
and of course the most important part is

30
00:01:12,080 --> 00:01:16,240
the demo which would be really cool

31
00:01:16,240 --> 00:01:18,560
the recommendations at the end

32
00:01:18,560 --> 00:01:23,040
and then would have room for questions

33
00:01:23,680 --> 00:01:25,280
so first of all

34
00:01:25,280 --> 00:01:28,000
was infrastructure as good

35
00:01:28,000 --> 00:01:29,360
back in the years

36
00:01:29,360 --> 00:01:30,640
when

37
00:01:30,640 --> 00:01:34,479
cloud was starting was becoming a thing

38
00:01:34,479 --> 00:01:35,920
if someone would like to deploy

39
00:01:35,920 --> 00:01:37,920
something they would go to the console

40
00:01:37,920 --> 00:01:40,799
take their time in deploying their

41
00:01:40,799 --> 00:01:42,720
resources

42
00:01:42,720 --> 00:01:44,640
from the console

43
00:01:44,640 --> 00:01:46,960
and if they would like to do this again

44
00:01:46,960 --> 00:01:49,040
and again and maintain that they would

45
00:01:49,040 --> 00:01:50,720
have to log in every single time to do

46
00:01:50,720 --> 00:01:53,680
that which is a bit of a painful thing

47
00:01:53,680 --> 00:01:56,799
and does not really scale that's why

48
00:01:56,799 --> 00:01:59,520
infrastructure as code became a popular

49
00:01:59,520 --> 00:02:02,159
thing in the devops and lipstick of

50
00:02:02,159 --> 00:02:03,759
communities

51
00:02:03,759 --> 00:02:06,880
why because you would be able to write

52
00:02:06,880 --> 00:02:09,919
all of your resources and the cloud as

53
00:02:09,919 --> 00:02:11,599
code and then you would be able to

54
00:02:11,599 --> 00:02:12,959
deploy it

55
00:02:12,959 --> 00:02:15,760
many times at the same time you would

56
00:02:15,760 --> 00:02:19,200
allow room for peer review so that the

57
00:02:19,200 --> 00:02:20,959
people in your team and different teams

58
00:02:20,959 --> 00:02:22,879
will be able to review it

59
00:02:22,879 --> 00:02:24,720
it's amazing

60
00:02:24,720 --> 00:02:27,280
so yep it allows that parts and of

61
00:02:27,280 --> 00:02:29,360
course uh one thing that you can say

62
00:02:29,360 --> 00:02:31,680
that once you have this being set up you

63
00:02:31,680 --> 00:02:34,160
would be able to run it through

64
00:02:34,160 --> 00:02:37,840
ci security scanning for compliance and

65
00:02:37,840 --> 00:02:40,640
you can automate many things without

66
00:02:40,640 --> 00:02:43,280
really having to have someone to review

67
00:02:43,280 --> 00:02:44,319
everything

68
00:02:44,319 --> 00:02:45,599
um

69
00:02:45,599 --> 00:02:47,920
being deployed

70
00:02:47,920 --> 00:02:50,239
and of course when you deploy this and

71
00:02:50,239 --> 00:02:52,640
we're using get you would be able to

72
00:02:52,640 --> 00:02:54,400
have an archive of everything being

73
00:02:54,400 --> 00:02:55,680
deployed

74
00:02:55,680 --> 00:02:57,680
it's just an amazing technology that

75
00:02:57,680 --> 00:02:59,840
everyone loves

76
00:02:59,840 --> 00:03:01,680
hopefully

77
00:03:01,680 --> 00:03:05,040
and uh what's their phone jerifoam is an

78
00:03:05,040 --> 00:03:06,720
open source infrastructure as code

79
00:03:06,720 --> 00:03:10,000
software made by hashicorp around 10

80
00:03:10,000 --> 00:03:11,519
years ago

81
00:03:11,519 --> 00:03:13,040
and

82
00:03:13,040 --> 00:03:14,879
users defined their code in a language

83
00:03:14,879 --> 00:03:18,480
called the hcl or hashicorp language

84
00:03:18,480 --> 00:03:20,480
and then deployments and

85
00:03:20,480 --> 00:03:22,879
and the entire infrastructure management

86
00:03:22,879 --> 00:03:25,040
happens through terraform whenever you

87
00:03:25,040 --> 00:03:27,840
write code you would pass it to a

88
00:03:27,840 --> 00:03:29,920
terraform build a binary and then it

89
00:03:29,920 --> 00:03:30,879
will

90
00:03:30,879 --> 00:03:34,239
read the term from state a state of the

91
00:03:34,239 --> 00:03:36,239
current infrastructure and then it will

92
00:03:36,239 --> 00:03:39,040
decide what changes should be done

93
00:03:39,040 --> 00:03:40,879
why i'm talking about reform today

94
00:03:40,879 --> 00:03:43,840
instead of all of apollomi or different

95
00:03:43,840 --> 00:03:46,879
uh or cloud formation of different uh

96
00:03:46,879 --> 00:03:49,599
cloud or orchestrator because terraform

97
00:03:49,599 --> 00:03:52,239
is the most popular ic orchestration the

98
00:03:52,239 --> 00:03:54,560
planet

99
00:03:55,120 --> 00:03:57,599
this year a couple of months back they

100
00:03:57,599 --> 00:04:01,680
have released terraform 1.0

101
00:04:01,680 --> 00:04:04,400
the it has been a big thing for everyone

102
00:04:04,400 --> 00:04:08,319
that is working on uh with terraform

103
00:04:08,319 --> 00:04:09,840
and of course

104
00:04:09,840 --> 00:04:11,040
it passes

105
00:04:11,040 --> 00:04:13,439
100 million downloads

106
00:04:13,439 --> 00:04:16,238
crazy numbers

107
00:04:16,880 --> 00:04:18,079
another thing that is cool about

108
00:04:18,079 --> 00:04:20,639
terraform once you have it is

109
00:04:20,639 --> 00:04:23,280
you can write the same infrastructure

110
00:04:23,280 --> 00:04:24,320
code

111
00:04:24,320 --> 00:04:25,280
and

112
00:04:25,280 --> 00:04:26,639
have it integrated with different

113
00:04:26,639 --> 00:04:29,759
providers so you can write code that

114
00:04:29,759 --> 00:04:32,720
allows you to deploy to aws or azure or

115
00:04:32,720 --> 00:04:35,360
gcp or anything else

116
00:04:35,360 --> 00:04:36,479
and

117
00:04:36,479 --> 00:04:38,639
it's not only these

118
00:04:38,639 --> 00:04:40,560
six technologies and six providers that

119
00:04:40,560 --> 00:04:41,759
are there

120
00:04:41,759 --> 00:04:44,160
they support more than a thousand

121
00:04:44,160 --> 00:04:46,720
provider as of today

122
00:04:46,720 --> 00:04:47,680
how

123
00:04:47,680 --> 00:04:49,919
how you would be able to do this is as a

124
00:04:49,919 --> 00:04:52,320
practitioner or a user you would write

125
00:04:52,320 --> 00:04:54,800
your code then once it's ready it will

126
00:04:54,800 --> 00:04:57,280
go through terraform plan and telephone

127
00:04:57,280 --> 00:05:00,080
plan is like the way that telephone

128
00:05:00,080 --> 00:05:01,280
would be

129
00:05:01,280 --> 00:05:03,360
planning your deployment

130
00:05:03,360 --> 00:05:05,680
and show you

131
00:05:05,680 --> 00:05:08,080
what would be changing and then it would

132
00:05:08,080 --> 00:05:10,240
go through the apply and once you click

133
00:05:10,240 --> 00:05:12,320
on run apply

134
00:05:12,320 --> 00:05:14,800
it would be deploying

135
00:05:14,800 --> 00:05:18,400
directly to your cloud provider

136
00:05:18,400 --> 00:05:21,198
the thing is

137
00:05:21,600 --> 00:05:24,479
when you are running apply and plan on

138
00:05:24,479 --> 00:05:26,960
apply this means that

139
00:05:26,960 --> 00:05:28,080
you are

140
00:05:28,080 --> 00:05:30,880
checking that that drifts between the

141
00:05:30,880 --> 00:05:33,840
current code and what is there on the

142
00:05:33,840 --> 00:05:36,160
provider and if you are applying uh

143
00:05:36,160 --> 00:05:38,639
changes this means that you have right

144
00:05:38,639 --> 00:05:41,199
access on different things on your cloud

145
00:05:41,199 --> 00:05:43,840
provider and who would have this it

146
00:05:43,840 --> 00:05:46,000
would be terraform

147
00:05:46,000 --> 00:05:50,320
so setting up their phone with grants at

148
00:05:50,320 --> 00:05:52,720
high permissions that allows it to do

149
00:05:52,720 --> 00:05:55,280
everything that you need to have it to

150
00:05:55,280 --> 00:05:56,800
do

151
00:05:56,800 --> 00:05:58,880
while it sounds scary

152
00:05:58,880 --> 00:06:01,280
it's the default thing we have to just

153
00:06:01,280 --> 00:06:04,840
set it up in a way that could be secure

154
00:06:04,840 --> 00:06:09,199
and not rely on the default things and

155
00:06:09,199 --> 00:06:10,319
try to

156
00:06:10,319 --> 00:06:13,759
think better about it

157
00:06:14,160 --> 00:06:15,280
as i say

158
00:06:15,280 --> 00:06:18,840
with great power comes great

159
00:06:18,840 --> 00:06:22,160
responsibility a single mistake here can

160
00:06:22,160 --> 00:06:25,360
lead to the entire

161
00:06:25,360 --> 00:06:28,639
compromise of the the cloud provider or

162
00:06:28,639 --> 00:06:31,440
the cloud account so imagine your entire

163
00:06:31,440 --> 00:06:34,560
aws account being held for ransom

164
00:06:34,560 --> 00:06:36,560
someone would uh like if someone

165
00:06:36,560 --> 00:06:38,160
compromised that they would

166
00:06:38,160 --> 00:06:40,880
go into your club provider they would be

167
00:06:40,880 --> 00:06:43,520
backing up all of your sv buckets

168
00:06:43,520 --> 00:06:45,199
they would uh

169
00:06:45,199 --> 00:06:48,160
incr or may delete everything they would

170
00:06:48,160 --> 00:06:50,160
have it somewhere else

171
00:06:50,160 --> 00:06:52,400
and then they would ask you for ransom

172
00:06:52,400 --> 00:06:54,080
imagine this

173
00:06:54,080 --> 00:06:55,520
ransom isn't the thing that you would

174
00:06:55,520 --> 00:06:58,000
see only on your

175
00:06:58,000 --> 00:07:00,560
uh internal network or or in your

176
00:07:00,560 --> 00:07:02,240
laptops is something that can be done

177
00:07:02,240 --> 00:07:04,560
also in the cloud it's not it's still

178
00:07:04,560 --> 00:07:06,880
not a thing today but i can imagine that

179
00:07:06,880 --> 00:07:08,720
this would be happening in the upcoming

180
00:07:08,720 --> 00:07:10,960
years

181
00:07:14,800 --> 00:07:17,199
and as i said about the

182
00:07:17,199 --> 00:07:18,479
terraform

183
00:07:18,479 --> 00:07:20,160
uh states

184
00:07:20,160 --> 00:07:22,479
the way that perform works is it would

185
00:07:22,479 --> 00:07:23,360
be

186
00:07:23,360 --> 00:07:25,440
storing all of the changes and all of

187
00:07:25,440 --> 00:07:27,360
the additions that it made

188
00:07:27,360 --> 00:07:31,440
in your cloud provider in a file that

189
00:07:31,440 --> 00:07:33,440
acts as a database called telephone

190
00:07:33,440 --> 00:07:35,039
state

191
00:07:35,039 --> 00:07:36,880
every time you do a change it would

192
00:07:36,880 --> 00:07:38,880
check it against

193
00:07:38,880 --> 00:07:41,280
that file and then would update it

194
00:07:41,280 --> 00:07:42,840
whenever there is

195
00:07:42,840 --> 00:07:45,680
anything there are many ways to

196
00:07:45,680 --> 00:07:48,319
have your terraform state being deployed

197
00:07:48,319 --> 00:07:51,120
one thing is you can have it locally

198
00:07:51,120 --> 00:07:52,879
second way that is

199
00:07:52,879 --> 00:07:55,840
i think the most common way by

200
00:07:55,840 --> 00:08:00,479
everyone that i know is using a remote

201
00:08:00,479 --> 00:08:02,080
backend of

202
00:08:02,080 --> 00:08:03,440
sv

203
00:08:03,440 --> 00:08:05,599
so that you would specify a bucket you

204
00:08:05,599 --> 00:08:08,000
would specify a key and then which

205
00:08:08,000 --> 00:08:09,520
region would you like to have this

206
00:08:09,520 --> 00:08:12,639
bucket at on and then telephone would be

207
00:08:12,639 --> 00:08:13,919
automatically

208
00:08:13,919 --> 00:08:16,000
creating this bucket for uh would be

209
00:08:16,000 --> 00:08:18,960
automatically uh pushing the the

210
00:08:18,960 --> 00:08:21,599
changes and uh state file there

211
00:08:21,599 --> 00:08:24,000
and whenever it updates it would uh

212
00:08:24,000 --> 00:08:27,840
synchronize with that key

213
00:08:30,080 --> 00:08:31,120
so

214
00:08:31,120 --> 00:08:35,200
attack number one or thing number one

215
00:08:35,200 --> 00:08:36,080
if

216
00:08:36,080 --> 00:08:39,360
you go if you have uh get uh get object

217
00:08:39,360 --> 00:08:42,000
permission on the s3 bucket for solving

218
00:08:42,000 --> 00:08:43,679
the state file then you would have

219
00:08:43,679 --> 00:08:44,410
access to

220
00:08:44,410 --> 00:08:45,600
[Music]

221
00:08:45,600 --> 00:08:48,240
secrets access keys and database

222
00:08:48,240 --> 00:08:50,320
credentials so everything that is being

223
00:08:50,320 --> 00:08:51,600
deployed

224
00:08:51,600 --> 00:08:53,360
from

225
00:08:53,360 --> 00:08:55,279
for the organization

226
00:08:55,279 --> 00:08:56,800
through terraform

227
00:08:56,800 --> 00:08:59,680
would uh have a copy of it

228
00:08:59,680 --> 00:09:02,320
in the sit in the state file

229
00:09:02,320 --> 00:09:04,560
so there's something like an rds

230
00:09:04,560 --> 00:09:06,959
database would have their credentials

231
00:09:06,959 --> 00:09:09,519
stored somewhere and that place would

232
00:09:09,519 --> 00:09:12,240
have a copy in the state file same thing

233
00:09:12,240 --> 00:09:15,040
if you create a an im key

234
00:09:15,040 --> 00:09:17,440
access key then you would have it there

235
00:09:17,440 --> 00:09:19,839
or any other secrets that you would

236
00:09:19,839 --> 00:09:20,959
define

237
00:09:20,959 --> 00:09:23,760
or the provider would be defining uh for

238
00:09:23,760 --> 00:09:25,600
your phone

239
00:09:25,600 --> 00:09:28,080
so whenever you get access to

240
00:09:28,080 --> 00:09:31,120
uh to an organization and a

241
00:09:31,120 --> 00:09:34,480
cloud account try to search for

242
00:09:34,480 --> 00:09:36,800
if they have a sv bucket

243
00:09:36,800 --> 00:09:37,839
that

244
00:09:37,839 --> 00:09:40,560
looks like it's use uh it's storing

245
00:09:40,560 --> 00:09:43,040
secrets for your phone it would have the

246
00:09:43,040 --> 00:09:44,080
entire

247
00:09:44,080 --> 00:09:46,800
instructions for you to go

248
00:09:46,800 --> 00:09:50,760
further in the environment

249
00:09:53,839 --> 00:09:56,399
another thing is

250
00:09:56,399 --> 00:09:59,279
states on terraform enterprise terraform

251
00:09:59,279 --> 00:10:00,959
enterprise has

252
00:10:00,959 --> 00:10:02,160
terraform has

253
00:10:02,160 --> 00:10:03,920
an enterprise offering called terraform

254
00:10:03,920 --> 00:10:05,200
enterprise

255
00:10:05,200 --> 00:10:07,120
and uh

256
00:10:07,120 --> 00:10:11,519
the normal uh perform that people use is

257
00:10:11,519 --> 00:10:14,560
a cli binary that peop that people will

258
00:10:14,560 --> 00:10:18,240
be using for deploying uh infrastructure

259
00:10:18,240 --> 00:10:20,000
but with terraform enterprise you would

260
00:10:20,000 --> 00:10:21,839
have uh

261
00:10:21,839 --> 00:10:25,519
sso team management states uh

262
00:10:25,519 --> 00:10:27,040
uh

263
00:10:27,040 --> 00:10:28,640
safe management in different ways and

264
00:10:28,640 --> 00:10:30,320
configurations and

265
00:10:30,320 --> 00:10:32,079
in the different ways for your

266
00:10:32,079 --> 00:10:33,519
integrations

267
00:10:33,519 --> 00:10:36,320
and terraform to price is amazing but

268
00:10:36,320 --> 00:10:38,560
still the same problem of storing the

269
00:10:38,560 --> 00:10:40,240
sales files

270
00:10:40,240 --> 00:10:44,640
is exist on terraform enterprise

271
00:10:44,720 --> 00:10:47,440
and how it works is

272
00:10:47,440 --> 00:10:49,279
you would

273
00:10:49,279 --> 00:10:51,279
deploy a terraform enterprise as an

274
00:10:51,279 --> 00:10:52,800
instance

275
00:10:52,800 --> 00:10:55,200
it follows itself hosted model

276
00:10:55,200 --> 00:10:58,160
also they provide a cloud hosted

277
00:10:58,160 --> 00:11:00,560
cloud hosted model that they would be

278
00:11:00,560 --> 00:11:02,480
hosting it within

279
00:11:02,480 --> 00:11:04,880
an offering called terraform cloud

280
00:11:04,880 --> 00:11:08,320
and but let's focus on this on the

281
00:11:08,320 --> 00:11:10,079
self-hosted one that you can host in

282
00:11:10,079 --> 00:11:10,959
your

283
00:11:10,959 --> 00:11:12,320
infrastructure

284
00:11:12,320 --> 00:11:15,680
the states can be stored in many ways

285
00:11:15,680 --> 00:11:20,079
uh postgresql aws rds

286
00:11:20,079 --> 00:11:24,079
three mounted disks same instance desk

287
00:11:24,079 --> 00:11:25,600
and

288
00:11:25,600 --> 00:11:28,640
many more

289
00:11:28,640 --> 00:11:31,680
if you get access to any of these

290
00:11:31,680 --> 00:11:33,120
places

291
00:11:33,120 --> 00:11:36,240
these places would have access to the

292
00:11:36,240 --> 00:11:39,040
state file and then you can copy this

293
00:11:39,040 --> 00:11:41,760
state file inspected for secrets use

294
00:11:41,760 --> 00:11:43,600
these secrets for

295
00:11:43,600 --> 00:11:46,720
getting a step ahead

296
00:11:54,560 --> 00:11:57,120
right another thing to say

297
00:11:57,120 --> 00:11:59,279
of course we we talked about therefore

298
00:11:59,279 --> 00:12:01,920
enterprise is deployed as an instance on

299
00:12:01,920 --> 00:12:06,000
the ews account or in the cloud account

300
00:12:06,000 --> 00:12:06,800
and

301
00:12:06,800 --> 00:12:09,279
if you compromised and insta dfe

302
00:12:09,279 --> 00:12:11,120
instance this is the best place for

303
00:12:11,120 --> 00:12:13,519
attack persistence and there are many

304
00:12:13,519 --> 00:12:15,120
reasons for that

305
00:12:15,120 --> 00:12:16,480
one

306
00:12:16,480 --> 00:12:18,720
and once it gets deployed

307
00:12:18,720 --> 00:12:20,079
successfully

308
00:12:20,079 --> 00:12:23,040
no one really touched it

309
00:12:23,040 --> 00:12:25,279
another thing is upgrades and

310
00:12:25,279 --> 00:12:27,760
maintenance really happened like

311
00:12:27,760 --> 00:12:30,399
it's not a common thing that uh in a

312
00:12:30,399 --> 00:12:33,279
devops engineer would go in and log and

313
00:12:33,279 --> 00:12:35,920
assess it to the server to see different

314
00:12:35,920 --> 00:12:37,600
things and this

315
00:12:37,600 --> 00:12:40,480
something is broken then that's for our

316
00:12:40,480 --> 00:12:42,160
there is a natural upgrade that would

317
00:12:42,160 --> 00:12:43,600
happen this is the only time that

318
00:12:43,600 --> 00:12:45,839
someone would go in and uh

319
00:12:45,839 --> 00:12:48,800
and try to uh ssh to

320
00:12:48,800 --> 00:12:50,399
this instance

321
00:12:50,399 --> 00:12:52,959
so this is one thing to add and of

322
00:12:52,959 --> 00:12:55,200
course it's uh

323
00:12:55,200 --> 00:12:58,000
if because terraform enterprise would

324
00:12:58,000 --> 00:12:59,760
have um

325
00:12:59,760 --> 00:13:01,839
permissions to deploy to the cloud to

326
00:13:01,839 --> 00:13:04,399
your cloud of environment

327
00:13:04,399 --> 00:13:07,440
you would have the company would have to

328
00:13:07,440 --> 00:13:10,000
provide it with proper uh

329
00:13:10,000 --> 00:13:12,560
permissions to deploy uh to deploy

330
00:13:12,560 --> 00:13:15,360
online so it would have probably admin

331
00:13:15,360 --> 00:13:18,639
access to your aws accounts

332
00:13:18,639 --> 00:13:23,440
or any account that is being used for

333
00:13:23,440 --> 00:13:26,560
if you get access to this uh

334
00:13:26,560 --> 00:13:28,639
vm or this instance

335
00:13:28,639 --> 00:13:30,480
then you would have high permissions in

336
00:13:30,480 --> 00:13:32,720
doing whatever on the infrastructure you

337
00:13:32,720 --> 00:13:33,839
can create

338
00:13:33,839 --> 00:13:36,880
new users you can back their users you

339
00:13:36,880 --> 00:13:37,760
can

340
00:13:37,760 --> 00:13:39,360
read

341
00:13:39,360 --> 00:13:42,000
buckets which is something that

342
00:13:42,000 --> 00:13:44,000
is not really common but of course you

343
00:13:44,000 --> 00:13:45,680
can do that

344
00:13:45,680 --> 00:13:47,199
and

345
00:13:47,199 --> 00:13:49,839
you can do everything

346
00:13:50,160 --> 00:13:53,040
and one thing that is funny here is

347
00:13:53,040 --> 00:13:54,639
let's say that

348
00:13:54,639 --> 00:13:57,199
you are in engagement and the and the

349
00:13:57,199 --> 00:14:00,000
security team detected that your

350
00:14:00,000 --> 00:14:02,160
database was compromised because of the

351
00:14:02,160 --> 00:14:04,320
state files and all

352
00:14:04,320 --> 00:14:06,480
they would ideally go and rotate the

353
00:14:06,480 --> 00:14:08,800
database keys and

354
00:14:08,800 --> 00:14:10,880
how would they rotate the keys they

355
00:14:10,880 --> 00:14:12,880
would rotate it through terraform

356
00:14:12,880 --> 00:14:15,360
that's a typical way

357
00:14:15,360 --> 00:14:18,320
or one way actually but if they uh

358
00:14:18,320 --> 00:14:20,959
if they updated it with third form then

359
00:14:20,959 --> 00:14:22,800
you would still have the latest keys

360
00:14:22,800 --> 00:14:25,360
being synchronized uh on the terraform

361
00:14:25,360 --> 00:14:29,639
instance which is really cool

362
00:14:30,000 --> 00:14:33,279
let me pause for water

363
00:14:40,399 --> 00:14:41,839
and as i said

364
00:14:41,839 --> 00:14:42,839
they're from

365
00:14:42,839 --> 00:14:44,560
enterprise it

366
00:14:44,560 --> 00:14:46,720
has high permissions and it's not

367
00:14:46,720 --> 00:14:48,639
something that you should really put on

368
00:14:48,639 --> 00:14:50,000
the internet

369
00:14:50,000 --> 00:14:52,560
but there are hundreds of organizations

370
00:14:52,560 --> 00:14:54,800
around the world that have their

371
00:14:54,800 --> 00:14:56,639
terraform enterprise exposed to the

372
00:14:56,639 --> 00:14:58,800
public if there is a single zero day

373
00:14:58,800 --> 00:14:59,760
here

374
00:14:59,760 --> 00:15:01,199
i'm pretty sure this would be a

375
00:15:01,199 --> 00:15:01,960
nightmare for

376
00:15:01,960 --> 00:15:03,360
[Music]

377
00:15:03,360 --> 00:15:06,399
all of these companies

378
00:15:07,600 --> 00:15:09,760
and these are filters that you can use

379
00:15:09,760 --> 00:15:10,639
for

380
00:15:10,639 --> 00:15:14,480
just checking it out by yourself

381
00:15:16,399 --> 00:15:18,800
okay we talked about how you can use

382
00:15:18,800 --> 00:15:21,440
this in your advantage with uh when

383
00:15:21,440 --> 00:15:24,399
compromising and anyways account that

384
00:15:24,399 --> 00:15:25,600
has

385
00:15:25,600 --> 00:15:30,079
that or an aws user that has access to

386
00:15:30,079 --> 00:15:32,800
the sv bucket that stores the state

387
00:15:32,800 --> 00:15:34,079
files

388
00:15:34,079 --> 00:15:36,880
but let's say that you were not really

389
00:15:36,880 --> 00:15:40,160
able to compromise the aws account and

390
00:15:40,160 --> 00:15:42,079
you get access to a developer machine

391
00:15:42,079 --> 00:15:44,240
and this developer have access to their

392
00:15:44,240 --> 00:15:47,360
from enterprise or their phone cloud

393
00:15:47,360 --> 00:15:50,480
what things can you do here

394
00:15:50,480 --> 00:15:51,600
clear from

395
00:15:51,600 --> 00:15:52,560
uh

396
00:15:52,560 --> 00:15:56,160
i have exposed a full dedicated api that

397
00:15:56,160 --> 00:15:57,440
can be used for automating

398
00:15:57,440 --> 00:16:00,320
functionalities and tasks this can go

399
00:16:00,320 --> 00:16:02,800
from any uh everywhere from updating

400
00:16:02,800 --> 00:16:04,480
users to

401
00:16:04,480 --> 00:16:05,680
provision

402
00:16:05,680 --> 00:16:07,759
plans to

403
00:16:07,759 --> 00:16:11,120
add comments and everything

404
00:16:11,519 --> 00:16:14,800
and one thing that we have is an api

405
00:16:14,800 --> 00:16:17,199
called state version output

406
00:16:17,199 --> 00:16:19,519
and this state vision output api allows

407
00:16:19,519 --> 00:16:22,320
you to download the state file that you

408
00:16:22,320 --> 00:16:25,120
you that you would have uh

409
00:16:25,120 --> 00:16:28,000
needed to compromise with an actual you

410
00:16:28,000 --> 00:16:31,279
i am user or all of this

411
00:16:31,279 --> 00:16:33,199
so now if

412
00:16:33,199 --> 00:16:35,600
it wasn't really possible to do this

413
00:16:35,600 --> 00:16:39,600
you can just uh go to the api and ask it

414
00:16:39,600 --> 00:16:41,120
for your

415
00:16:41,120 --> 00:16:43,920
for your state file and nicely and it

416
00:16:43,920 --> 00:16:46,240
would respond

417
00:16:46,240 --> 00:16:48,560
with the actual state file in plain text

418
00:16:48,560 --> 00:16:51,040
which is nice

419
00:16:51,040 --> 00:16:52,959
of course this would also contain

420
00:16:52,959 --> 00:16:55,360
sensitive data with clear text

421
00:16:55,360 --> 00:16:57,440
credentials and everything that could be

422
00:16:57,440 --> 00:16:59,680
fun

423
00:17:02,240 --> 00:17:04,880
going further

424
00:17:04,880 --> 00:17:06,559
a couple months back

425
00:17:06,559 --> 00:17:09,520
alex k uh released a blog post talking

426
00:17:09,520 --> 00:17:11,919
about terraform plan rce

427
00:17:11,919 --> 00:17:14,880
it's a it's a problem that reform has it

428
00:17:14,880 --> 00:17:16,480
for over the years

429
00:17:16,480 --> 00:17:20,240
but it wasn't really talked about um

430
00:17:20,240 --> 00:17:23,760
within the terraform communities

431
00:17:23,760 --> 00:17:26,160
and we and this uh

432
00:17:26,160 --> 00:17:29,360
this blog post has uh become a

433
00:17:29,360 --> 00:17:30,480
viral

434
00:17:30,480 --> 00:17:33,039
post about how this attack could be done

435
00:17:33,039 --> 00:17:34,160
in

436
00:17:34,160 --> 00:17:36,320
a practical way

437
00:17:36,320 --> 00:17:38,640
and they were talking about

438
00:17:38,640 --> 00:17:40,960
how you can use

439
00:17:40,960 --> 00:17:44,240
an ammunitious provider or an external

440
00:17:44,240 --> 00:17:46,160
data source

441
00:17:46,160 --> 00:17:48,559
that could allows you to

442
00:17:48,559 --> 00:17:49,360
get

443
00:17:49,360 --> 00:17:51,360
code execution on

444
00:17:51,360 --> 00:17:53,840
the terraform enterprise or the

445
00:17:53,840 --> 00:17:54,720
the

446
00:17:54,720 --> 00:17:56,400
or the instance that is running

447
00:17:56,400 --> 00:17:57,919
terraform

448
00:17:57,919 --> 00:17:59,039
and

449
00:17:59,039 --> 00:18:01,440
this can result in

450
00:18:01,440 --> 00:18:03,520
uh the compromise of the entire

451
00:18:03,520 --> 00:18:06,480
infrastructure when someone submits a pr

452
00:18:06,480 --> 00:18:08,160
that is not approved

453
00:18:08,160 --> 00:18:10,400
what you're gonna do is

454
00:18:10,400 --> 00:18:12,480
if you find let's say you said

455
00:18:12,480 --> 00:18:15,120
you landed on a developer machine and

456
00:18:15,120 --> 00:18:17,360
this developer machine has uh i don't

457
00:18:17,360 --> 00:18:18,960
know github token

458
00:18:18,960 --> 00:18:22,799
that allows it to so to push pr on the

459
00:18:22,799 --> 00:18:24,240
account

460
00:18:24,240 --> 00:18:26,720
that is being in the

461
00:18:26,720 --> 00:18:29,600
repository that hosts the terraform code

462
00:18:29,600 --> 00:18:31,360
and this one is integrated with

463
00:18:31,360 --> 00:18:33,200
terraform enterprise linkedin

464
00:18:33,200 --> 00:18:35,760
and like the normal setup

465
00:18:35,760 --> 00:18:37,919
what would happen here is

466
00:18:37,919 --> 00:18:40,799
if the default if you as a developer

467
00:18:40,799 --> 00:18:43,760
check out the a future branch and then

468
00:18:43,760 --> 00:18:45,600
push code

469
00:18:45,600 --> 00:18:46,400
with

470
00:18:46,400 --> 00:18:48,320
the malicious payload

471
00:18:48,320 --> 00:18:51,520
and all the attack that uh about that

472
00:18:51,520 --> 00:18:54,240
talks about the malicious provider that

473
00:18:54,240 --> 00:18:56,799
you're going to talk about then you will

474
00:18:56,799 --> 00:18:57,679
get

475
00:18:57,679 --> 00:19:00,080
code execution on that server you would

476
00:19:00,080 --> 00:19:01,919
get shell access

477
00:19:01,919 --> 00:19:04,480
and this is really simple and of course

478
00:19:04,480 --> 00:19:06,559
it's not really intended and this should

479
00:19:06,559 --> 00:19:09,440
never happen in real life

480
00:19:09,440 --> 00:19:11,760
but it has been

481
00:19:11,760 --> 00:19:14,080
a fight between usability and security

482
00:19:14,080 --> 00:19:14,880
here

483
00:19:14,880 --> 00:19:17,280
it's hard to find a way to secure it at

484
00:19:17,280 --> 00:19:20,799
the same time it's hard to not allow

485
00:19:20,799 --> 00:19:22,799
something like external data sources to

486
00:19:22,799 --> 00:19:27,280
be used uh chris for alex k for having

487
00:19:27,280 --> 00:19:30,320
this book blog post written and shared

488
00:19:30,320 --> 00:19:32,320
to us

489
00:19:32,320 --> 00:19:35,280
and this is an example of an actual

490
00:19:35,280 --> 00:19:37,679
proof of concept

491
00:19:37,679 --> 00:19:39,840
you if you'd like to test it out and you

492
00:19:39,840 --> 00:19:41,679
are authorized to test it

493
00:19:41,679 --> 00:19:44,400
go and copy the code that i have here on

494
00:19:44,400 --> 00:19:45,679
my screen

495
00:19:45,679 --> 00:19:48,400
of course the slides would be uh with

496
00:19:48,400 --> 00:19:50,840
would be public on my website and my

497
00:19:50,840 --> 00:19:55,200
blog and just use this code and then

498
00:19:55,200 --> 00:19:58,559
push it in as a feature branch on

499
00:19:58,559 --> 00:20:01,600
and get the repository that is uh

500
00:20:01,600 --> 00:20:03,440
responsible for hosting the terraform

501
00:20:03,440 --> 00:20:04,480
code

502
00:20:04,480 --> 00:20:07,120
and then see the magic happens you would

503
00:20:07,120 --> 00:20:10,240
get shield access on that

504
00:20:10,240 --> 00:20:12,640
machine

505
00:20:13,200 --> 00:20:15,520
of course this is a big problem here

506
00:20:15,520 --> 00:20:18,799
but the thing is uh the other

507
00:20:18,799 --> 00:20:21,280
uh platforms are also vulnerable it's

508
00:20:21,280 --> 00:20:23,039
not only a problem for terraform

509
00:20:23,039 --> 00:20:25,200
enterprise anything that relies on

510
00:20:25,200 --> 00:20:27,760
terraform built would be vulnerable to

511
00:20:27,760 --> 00:20:29,760
this

512
00:20:29,760 --> 00:20:32,880
uh eric oserman in 2018 tried to

513
00:20:32,880 --> 00:20:35,520
introduce a fix and it was rejected the

514
00:20:35,520 --> 00:20:38,000
fix was to use uh to

515
00:20:38,000 --> 00:20:41,360
to restrict users from uh

516
00:20:41,360 --> 00:20:43,919
querying guitar from plan or within

517
00:20:43,919 --> 00:20:47,039
atlantis to only to only a subset that

518
00:20:47,039 --> 00:20:49,919
is being specified and this would grant

519
00:20:49,919 --> 00:20:52,159
security here and could be a temporary

520
00:20:52,159 --> 00:20:55,120
fix but it does not really resolve the

521
00:20:55,120 --> 00:20:57,600
actual problem from terraform

522
00:20:57,600 --> 00:21:00,880
ideally you should not really be able to

523
00:21:00,880 --> 00:21:02,400
run code

524
00:21:02,400 --> 00:21:04,480
on terraform enterprises

525
00:21:04,480 --> 00:21:05,280
uh

526
00:21:05,280 --> 00:21:07,360
enterprise instance and get

527
00:21:07,360 --> 00:21:10,640
full access to there or get access into

528
00:21:10,640 --> 00:21:11,600
the

529
00:21:11,600 --> 00:21:14,159
the machine or the instance that is

530
00:21:14,159 --> 00:21:16,480
running atlantis the stream or even the

531
00:21:16,480 --> 00:21:18,400
developer machine that

532
00:21:18,400 --> 00:21:20,000
runs terraform plan

533
00:21:20,000 --> 00:21:24,919
this is not the thing the right thing

534
00:21:33,039 --> 00:21:36,080
all right moving ahead

535
00:21:36,080 --> 00:21:38,799
we talked about the attack that uh you

536
00:21:38,799 --> 00:21:41,679
can upload

537
00:21:41,760 --> 00:21:43,520
you can upload an

538
00:21:43,520 --> 00:21:45,280
external data source

539
00:21:45,280 --> 00:21:46,640
like this one

540
00:21:46,640 --> 00:21:49,200
to jain access there

541
00:21:49,200 --> 00:21:52,320
but would it be fun if we can do this in

542
00:21:52,320 --> 00:21:55,919
a way that is not really detected

543
00:21:55,919 --> 00:21:59,200
from the pr

544
00:21:59,200 --> 00:22:00,559
let's talk about

545
00:22:00,559 --> 00:22:03,600
the evil provider attack

546
00:22:03,600 --> 00:22:05,679
publishing providers

547
00:22:05,679 --> 00:22:08,799
within within hashicorp's terraform is

548
00:22:08,799 --> 00:22:11,280
automated this is made to encourage

549
00:22:11,280 --> 00:22:15,918
publishers to push code to terraform

550
00:22:16,000 --> 00:22:17,440
but the thing is

551
00:22:17,440 --> 00:22:19,600
trust but verify

552
00:22:19,600 --> 00:22:22,480
we cannot really just push code and have

553
00:22:22,480 --> 00:22:24,840
it being

554
00:22:24,840 --> 00:22:28,000
trusted uh to be used by the community

555
00:22:28,000 --> 00:22:30,000
and by terraform without really

556
00:22:30,000 --> 00:22:33,360
verifying its content or even having

557
00:22:33,360 --> 00:22:36,480
a way to detect attacks here so let's

558
00:22:36,480 --> 00:22:38,720
say let's say for example

559
00:22:38,720 --> 00:22:41,200
that one of these providers or one of

560
00:22:41,200 --> 00:22:44,080
these 1000 providers that are being used

561
00:22:44,080 --> 00:22:46,559
by people it's not only these six or

562
00:22:46,559 --> 00:22:48,480
eight providers

563
00:22:48,480 --> 00:22:51,039
are have been compromised and they have

564
00:22:51,039 --> 00:22:52,799
been back there and we're going to talk

565
00:22:52,799 --> 00:22:54,640
about how

566
00:22:54,640 --> 00:22:56,640
and if this happens

567
00:22:56,640 --> 00:22:59,039
and someone just say turf on it and

568
00:22:59,039 --> 00:23:00,480
third from plan

569
00:23:00,480 --> 00:23:02,240
what would happen is the attacker would

570
00:23:02,240 --> 00:23:04,880
be compromising the company it would be

571
00:23:04,880 --> 00:23:07,880
chaos

572
00:23:09,760 --> 00:23:10,640
but

573
00:23:10,640 --> 00:23:13,440
you know i don't want to have this being

574
00:23:13,440 --> 00:23:14,320
as

575
00:23:14,320 --> 00:23:16,080
a theoretical attack that does not

576
00:23:16,080 --> 00:23:18,960
really happen in the real world and

577
00:23:18,960 --> 00:23:20,400
someone is

578
00:23:20,400 --> 00:23:23,039
discussing it in public i would like to

579
00:23:23,039 --> 00:23:25,280
show an actual proof of concept

580
00:23:25,280 --> 00:23:27,200
about this attack from

581
00:23:27,200 --> 00:23:29,360
zero to the end

582
00:23:29,360 --> 00:23:30,880
so let's start

583
00:23:30,880 --> 00:23:32,799
first

584
00:23:32,799 --> 00:23:35,919
let's try to set up a provider

585
00:23:35,919 --> 00:23:38,000
uh i set up a new

586
00:23:38,000 --> 00:23:41,120
github account i called it event reform

587
00:23:41,120 --> 00:23:43,679
of course i didn't want to use my uh my

588
00:23:43,679 --> 00:23:46,159
personal github account because i know

589
00:23:46,159 --> 00:23:48,159
it may get suspended

590
00:23:48,159 --> 00:23:51,840
we gonna talk about this one in a bit

591
00:23:52,000 --> 00:23:53,039
and

592
00:23:53,039 --> 00:23:57,200
then i developed a sample provider and

593
00:23:57,200 --> 00:23:59,360
this provider was pushed into even

594
00:23:59,360 --> 00:24:02,080
terraform such they're from provider e

595
00:24:02,080 --> 00:24:04,559
of course this is my picture

596
00:24:04,559 --> 00:24:06,559
anyone can know that this

597
00:24:06,559 --> 00:24:09,840
the code that i have

598
00:24:10,000 --> 00:24:13,520
and then i backdoor this provider with

599
00:24:13,520 --> 00:24:14,799
this code

600
00:24:14,799 --> 00:24:17,760
this is a simple terraform uh this is a

601
00:24:17,760 --> 00:24:20,720
simple uh

602
00:24:20,880 --> 00:24:24,080
provider that would grant me

603
00:24:24,080 --> 00:24:28,400
a references episode upon the execution

604
00:24:28,400 --> 00:24:31,120
to my server

605
00:24:31,360 --> 00:24:33,679
and then i pushed it to

606
00:24:33,679 --> 00:24:36,480
to the terraform registry and it was

607
00:24:36,480 --> 00:24:38,159
accepted uh

608
00:24:38,159 --> 00:24:40,159
it was approved

609
00:24:40,159 --> 00:24:42,960
i had my category as cloud automations

610
00:24:42,960 --> 00:24:46,640
because it automates my hacking here

611
00:24:46,640 --> 00:24:50,240
and i was showing a bit what happened

612
00:24:50,240 --> 00:24:53,440
once i had the provide they're being

613
00:24:53,440 --> 00:24:55,919
approved by terraform i

614
00:24:55,919 --> 00:24:56,720
i

615
00:24:56,720 --> 00:24:58,960
i made a pr to push it

616
00:24:58,960 --> 00:25:01,840
to somewhere

617
00:25:01,840 --> 00:25:04,799
and it looked like this it's just

618
00:25:04,799 --> 00:25:06,799
the same way that we would be pushing

619
00:25:06,799 --> 00:25:08,320
providers

620
00:25:08,320 --> 00:25:09,200
in

621
00:25:09,200 --> 00:25:12,240
our companies

622
00:25:12,240 --> 00:25:15,840
and now the fun part is the demo

623
00:25:15,840 --> 00:25:19,120
popping uh shall enter from cloud

624
00:25:19,120 --> 00:25:21,120
hosted by terraform

625
00:25:21,120 --> 00:25:25,399
that's right hosted by hashicorp

626
00:25:30,159 --> 00:25:35,080
this is app to perform the i o

627
00:26:34,400 --> 00:26:36,799
right

628
00:26:37,279 --> 00:26:40,640
and you would wonder from here is how is

629
00:26:40,640 --> 00:26:44,320
it a detection here probably you know

630
00:26:44,320 --> 00:26:47,039
in a well organized uh environment that

631
00:26:47,039 --> 00:26:48,640
is running a good

632
00:26:48,640 --> 00:26:51,600
adr solution or antivirus solution this

633
00:26:51,600 --> 00:26:54,320
attack would be prevented or detected

634
00:26:54,320 --> 00:26:56,799
but it wasn't the case i

635
00:26:56,799 --> 00:27:00,080
i put i pushed the provider that i

636
00:27:00,080 --> 00:27:01,039
built

637
00:27:01,039 --> 00:27:04,320
into virustotal and

638
00:27:04,320 --> 00:27:08,399
no provider really detected that

639
00:27:11,279 --> 00:27:13,760
and back to the attack that we showed

640
00:27:13,760 --> 00:27:16,000
here

641
00:27:16,559 --> 00:27:19,279
pushing the provider that grants me a

642
00:27:19,279 --> 00:27:20,960
racist official

643
00:27:20,960 --> 00:27:21,840
and

644
00:27:21,840 --> 00:27:22,799
got

645
00:27:22,799 --> 00:27:24,000
executed

646
00:27:24,000 --> 00:27:26,159
correctly within hashicorp

647
00:27:26,159 --> 00:27:28,640
infrastructure which is really bad

648
00:27:28,640 --> 00:27:29,840
imagine

649
00:27:29,840 --> 00:27:31,840
what could happen afterward i haven't

650
00:27:31,840 --> 00:27:33,440
really exploited this

651
00:27:33,440 --> 00:27:36,880
further i only stopped at this uh part

652
00:27:36,880 --> 00:27:38,720
and i tried my best to make it as

653
00:27:38,720 --> 00:27:40,080
obvious

654
00:27:40,080 --> 00:27:43,200
to the security team to see how the team

655
00:27:43,200 --> 00:27:45,039
response would be like

656
00:27:45,039 --> 00:27:47,120
and before i

657
00:27:47,120 --> 00:27:51,600
i i continue here i wanna say that this

658
00:27:51,600 --> 00:27:54,080
attack is against the terms of use by

659
00:27:54,080 --> 00:27:56,880
hashicorp running this in an account my

660
00:27:56,880 --> 00:28:00,320
resulting accounts person

661
00:28:00,480 --> 00:28:02,399
so how is the security team response

662
00:28:02,399 --> 00:28:04,880
within hours of my exploitation they

663
00:28:04,880 --> 00:28:07,919
detected the evil provider attack and

664
00:28:07,919 --> 00:28:10,080
contacted me directly to chat about my

665
00:28:10,080 --> 00:28:11,600
findings

666
00:28:11,600 --> 00:28:13,840
and then we discussed various ideas and

667
00:28:13,840 --> 00:28:16,240
thoughts to introduce effects from for

668
00:28:16,240 --> 00:28:19,279
the thing that was presented here

669
00:28:19,279 --> 00:28:21,120
and uh

670
00:28:21,120 --> 00:28:22,799
hashicorp uh

671
00:28:22,799 --> 00:28:24,000
informed me that they are really

672
00:28:24,000 --> 00:28:27,200
thinking about ways into having this uh

673
00:28:27,200 --> 00:28:29,440
being mitigated in their

674
00:28:29,440 --> 00:28:31,360
for their customers

675
00:28:31,360 --> 00:28:34,320
for the time being there is no patch

676
00:28:34,320 --> 00:28:37,200
there is no fix to introduce

677
00:28:37,200 --> 00:28:40,960
and there is no way to prevent this

678
00:28:41,039 --> 00:28:43,840
i appreciate the hashicorp's efforts in

679
00:28:43,840 --> 00:28:47,200
handling and analyzing the research

680
00:28:47,200 --> 00:28:51,600
one thing to add is i was planning to to

681
00:28:51,600 --> 00:28:53,760
to make the responsible disclosure the

682
00:28:53,760 --> 00:28:56,320
next day of my tests

683
00:28:56,320 --> 00:28:58,640
and before even going to the next day

684
00:28:58,640 --> 00:28:59,600
they were

685
00:28:59,600 --> 00:29:01,679
the ones who were contacting me and i

686
00:29:01,679 --> 00:29:03,840
really appreciate them being this

687
00:29:03,840 --> 00:29:06,399
proactive

688
00:29:09,039 --> 00:29:11,919
uh one thing to add here is we are also

689
00:29:11,919 --> 00:29:13,279
thinking about

690
00:29:13,279 --> 00:29:16,080
starting their bug bounty program at the

691
00:29:16,080 --> 00:29:17,600
at the current time they don't have a

692
00:29:17,600 --> 00:29:19,440
quantity program but this is one thing

693
00:29:19,440 --> 00:29:20,799
that they also

694
00:29:20,799 --> 00:29:23,840
are planning to have

695
00:29:24,399 --> 00:29:26,720
now going to the recommendations

696
00:29:26,720 --> 00:29:28,240
first

697
00:29:28,240 --> 00:29:31,440
be careful there is

698
00:29:31,440 --> 00:29:33,679
like you would have hard times in

699
00:29:33,679 --> 00:29:36,559
maintaining a security from environment

700
00:29:36,559 --> 00:29:37,520
so

701
00:29:37,520 --> 00:29:39,200
being careful is my main recommendation

702
00:29:39,200 --> 00:29:41,200
here

703
00:29:41,200 --> 00:29:44,159
another thing is

704
00:29:45,440 --> 00:29:49,960
i don't know why is it like this

705
00:29:54,559 --> 00:29:57,440
okay uh another thing is

706
00:29:57,440 --> 00:29:58,799
when

707
00:29:58,799 --> 00:30:01,600
when using sv as a remote backend try to

708
00:30:01,600 --> 00:30:04,799
have a bucket access policy to prevent

709
00:30:04,799 --> 00:30:07,679
other users other than there from

710
00:30:07,679 --> 00:30:10,960
instance to have access to your instance

711
00:30:10,960 --> 00:30:12,720
this way you can

712
00:30:12,720 --> 00:30:15,600
prevent that prevent uh

713
00:30:15,600 --> 00:30:17,679
like unauthorized access

714
00:30:17,679 --> 00:30:20,080
in certain ways of course there is a

715
00:30:20,080 --> 00:30:23,279
bypass there are bypasses for this uh

716
00:30:23,279 --> 00:30:25,760
solution where if you have another user

717
00:30:25,760 --> 00:30:27,279
that have

718
00:30:27,279 --> 00:30:30,000
access to modify the

719
00:30:30,000 --> 00:30:33,600
the bucket access policy for this bucket

720
00:30:33,600 --> 00:30:35,679
then they can delete the access pocket

721
00:30:35,679 --> 00:30:37,440
policy and then they can access the

722
00:30:37,440 --> 00:30:38,720
bucket here

723
00:30:38,720 --> 00:30:40,960
but at least if you

724
00:30:40,960 --> 00:30:44,240
can use this as a as a protection this

725
00:30:44,240 --> 00:30:46,880
would be a good way

726
00:30:46,880 --> 00:30:49,120
another thing is to continually update

727
00:30:49,120 --> 00:30:51,600
and review your terraform instance

728
00:30:51,600 --> 00:30:54,000
it can be easily forgotten in the noise

729
00:30:54,000 --> 00:30:56,399
and if there is an attacker

730
00:30:56,399 --> 00:30:58,399
or an actor that

731
00:30:58,399 --> 00:31:01,279
lands on your terraform instance as

732
00:31:01,279 --> 00:31:03,360
like mentioned earlier this is a great

733
00:31:03,360 --> 00:31:05,519
place for attack persistence

734
00:31:05,519 --> 00:31:07,760
so it can be easily

735
00:31:07,760 --> 00:31:09,840
abused badly here

736
00:31:09,840 --> 00:31:12,720
and then it can be easily for defenders

737
00:31:12,720 --> 00:31:17,799
to forget about it so yeah

738
00:31:18,159 --> 00:31:19,679
another thing is

739
00:31:19,679 --> 00:31:21,679
be careful in permitting people to have

740
00:31:21,679 --> 00:31:23,840
right access even feature like feature

741
00:31:23,840 --> 00:31:26,000
brand taxes for your uh terraform

742
00:31:26,000 --> 00:31:27,200
repository

743
00:31:27,200 --> 00:31:29,279
because it can lead to direct code

744
00:31:29,279 --> 00:31:31,679
execution uh and there is no way to pass

745
00:31:31,679 --> 00:31:33,279
it

746
00:31:33,279 --> 00:31:34,159
i'm

747
00:31:34,159 --> 00:31:36,559
waiting for a pass to happen

748
00:31:36,559 --> 00:31:39,519
we uh hashicorp and i were talking about

749
00:31:39,519 --> 00:31:42,159
the way different ways to detect the

750
00:31:42,159 --> 00:31:43,440
attack

751
00:31:43,440 --> 00:31:47,840
meanwhile the actual patch is there

752
00:31:47,840 --> 00:31:50,480
but it's just ways to detect it there is

753
00:31:50,480 --> 00:31:53,840
no way to prevent it at the moment

754
00:31:54,240 --> 00:31:56,559
another thing is to maintain it

755
00:31:56,559 --> 00:31:59,600
from instance in an isolated vpc that no

756
00:31:59,600 --> 00:32:00,799
one really

757
00:32:00,799 --> 00:32:02,960
actually said on the internet do not

758
00:32:02,960 --> 00:32:05,679
feel exposed to the internet this is bad

759
00:32:05,679 --> 00:32:07,679
the next day zero day that would happen

760
00:32:07,679 --> 00:32:09,120
someone would scan the internet and

761
00:32:09,120 --> 00:32:10,640
probably compromise your organization

762
00:32:10,640 --> 00:32:12,320
because of this mistake

763
00:32:12,320 --> 00:32:15,760
and it would be bad

764
00:32:15,760 --> 00:32:16,720
and

765
00:32:16,720 --> 00:32:19,440
i think this would be lastly state files

766
00:32:19,440 --> 00:32:22,320
are sensitive like they contain a lot of

767
00:32:22,320 --> 00:32:26,799
data from database passwords to ssl keys

768
00:32:26,799 --> 00:32:30,640
uh answer ssl certificates access keys

769
00:32:30,640 --> 00:32:34,080
treat them as sensitive data

770
00:32:34,320 --> 00:32:37,120
and of course a good idea is to

771
00:32:37,120 --> 00:32:40,559
set up ci check to detect the rogue

772
00:32:40,559 --> 00:32:43,279
telephone providers that this would aid

773
00:32:43,279 --> 00:32:45,760
in the exploitation discovery whenever

774
00:32:45,760 --> 00:32:48,399
someone is trying to exploit your

775
00:32:48,399 --> 00:32:51,039
terraform setup

776
00:32:51,039 --> 00:32:53,440
this is one thing to add as a defensive

777
00:32:53,440 --> 00:32:55,360
measure

778
00:32:55,360 --> 00:32:58,240
one thing that the hashicorp

779
00:32:58,240 --> 00:33:00,080
security team

780
00:33:00,080 --> 00:33:02,640
asked me to add is the terraform cloud

781
00:33:02,640 --> 00:33:04,960
security model

782
00:33:04,960 --> 00:33:07,279
this is a document that talks about

783
00:33:07,279 --> 00:33:08,840
different ways

784
00:33:08,840 --> 00:33:12,000
that that you can use for that modeling

785
00:33:12,000 --> 00:33:14,559
your terraform class security while at

786
00:33:14,559 --> 00:33:17,279
the same time it it can apply for your

787
00:33:17,279 --> 00:33:21,360
terraform enterprise setup

788
00:33:22,240 --> 00:33:24,159
and now we are reaching to the end of

789
00:33:24,159 --> 00:33:26,559
the talk

790
00:33:26,559 --> 00:33:29,200
final thoughts terraform is amazing i

791
00:33:29,200 --> 00:33:30,799
love your phone

792
00:33:30,799 --> 00:33:32,799
it brings several security features when

793
00:33:32,799 --> 00:33:34,320
implementing

794
00:33:34,320 --> 00:33:36,000
iec with terraform

795
00:33:36,000 --> 00:33:38,880
but still with great power comes great

796
00:33:38,880 --> 00:33:41,279
responsibility protect your terraform

797
00:33:41,279 --> 00:33:43,760
environment

798
00:33:44,559 --> 00:33:47,360
stay safe and set up persistent monitor

799
00:33:47,360 --> 00:33:49,840
like full hunt to discover shadow ide

800
00:33:49,840 --> 00:33:51,840
missed configurations

801
00:33:51,840 --> 00:33:54,480
mistakenly export services of course it

802
00:33:54,480 --> 00:33:56,559
would not really work out for all of the

803
00:33:56,559 --> 00:33:59,440
performance we talked here

804
00:33:59,440 --> 00:34:02,799
but yeah

