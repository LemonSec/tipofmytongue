1
00:00:00,080 --> 00:00:02,720
uh you can start in 10 seconds i am

2
00:00:02,720 --> 00:00:03,439
going

3
00:00:03,439 --> 00:00:08,799
mute good luck man thank you

4
00:00:14,880 --> 00:00:17,440
so hello everyone uh thank you here for

5
00:00:17,440 --> 00:00:18,160
joining

6
00:00:18,160 --> 00:00:21,199
uh so today i'll be presenting uh a tool

7
00:00:21,199 --> 00:00:23,760
which i named it as docker ent and that

8
00:00:23,760 --> 00:00:24,720
tool is

9
00:00:24,720 --> 00:00:27,119
more of a framework that that you can

10
00:00:27,119 --> 00:00:29,119
use to analyze security issues

11
00:00:29,119 --> 00:00:32,000
inside your running containers and the

12
00:00:32,000 --> 00:00:34,079
kind of tool and or the framework that i

13
00:00:34,079 --> 00:00:34,800
have built in

14
00:00:34,800 --> 00:00:38,079
can be used to actually test the

15
00:00:38,079 --> 00:00:39,760
production containers and it will not

16
00:00:39,760 --> 00:00:41,760
affect their capabilities at all so this

17
00:00:41,760 --> 00:00:43,680
is how the tool has been designed

18
00:00:43,680 --> 00:00:45,920
right now and the way the framework has

19
00:00:45,920 --> 00:00:47,039
been designed it's like

20
00:00:47,039 --> 00:00:49,280
you can use it you can augment the

21
00:00:49,280 --> 00:00:51,680
framework to create your own plugins

22
00:00:51,680 --> 00:00:53,760
so that you can leverage more of this

23
00:00:53,760 --> 00:00:54,879
particular framework so i

24
00:00:54,879 --> 00:00:56,719
today i'll be covering about how i have

25
00:00:56,719 --> 00:00:58,160
written this tool how you can use the

26
00:00:58,160 --> 00:00:59,039
tool in your

27
00:00:59,039 --> 00:01:01,359
environment how you can use this tool in

28
00:01:01,359 --> 00:01:03,039
docker pen test kind of environment so

29
00:01:03,039 --> 00:01:03,520
that

30
00:01:03,520 --> 00:01:05,438
uh your repetitive task can be

31
00:01:05,438 --> 00:01:06,640
eliminated and

32
00:01:06,640 --> 00:01:08,000
you can get the reporting in a better

33
00:01:08,000 --> 00:01:10,479
way so let's get started

34
00:01:10,479 --> 00:01:13,520
so in today's presentation i have

35
00:01:13,520 --> 00:01:16,159
a few uh segments that i'll be talking

36
00:01:16,159 --> 00:01:18,000
about so first i'll talk uh

37
00:01:18,000 --> 00:01:21,360
do i mean a brief of who i am then i'll

38
00:01:21,360 --> 00:01:23,759
start with my tool like a very quick

39
00:01:23,759 --> 00:01:25,920
overview of what that tool is and how do

40
00:01:25,920 --> 00:01:27,600
we need it and i'll also compare this

41
00:01:27,600 --> 00:01:29,119
particular tool with the existing

42
00:01:29,119 --> 00:01:31,280
tools that we have and i'll use docker

43
00:01:31,280 --> 00:01:33,600
bench as a comparison parameter

44
00:01:33,600 --> 00:01:36,720
so after that i'll talk about

45
00:01:36,720 --> 00:01:39,680
the kind of checks which are already in

46
00:01:39,680 --> 00:01:41,200
this tool right now

47
00:01:41,200 --> 00:01:43,520
and how you can leverage those check to

48
00:01:43,520 --> 00:01:44,240
audit your

49
00:01:44,240 --> 00:01:47,520
docker infrastructure after that i'll go

50
00:01:47,520 --> 00:01:49,439
into the technicalities of how you can

51
00:01:49,439 --> 00:01:51,200
create your own plugins

52
00:01:51,200 --> 00:01:53,040
and when i say your own plugins or how

53
00:01:53,040 --> 00:01:54,320
you can create your own

54
00:01:54,320 --> 00:01:57,200
automated task into python code and you

55
00:01:57,200 --> 00:01:58,719
can leverage the framework so that you

56
00:01:58,719 --> 00:01:59,600
don't have to

57
00:01:59,600 --> 00:02:02,159
do the same thing again and again once

58
00:02:02,159 --> 00:02:04,000
that is over i'll give you a short

59
00:02:04,000 --> 00:02:06,000
demonstration of the tool

60
00:02:06,000 --> 00:02:08,720
um by providing you the capabilities of

61
00:02:08,720 --> 00:02:10,479
the tool i mean the tool can be used in

62
00:02:10,479 --> 00:02:12,400
the command line interface and in the ui

63
00:02:12,400 --> 00:02:14,160
interface as well

64
00:02:14,160 --> 00:02:16,560
uh once that is over i'll give you uh an

65
00:02:16,560 --> 00:02:17,200
idea

66
00:02:17,200 --> 00:02:20,840
what we can have this tool in the future

67
00:02:20,840 --> 00:02:23,599
work and at the end of the day i'll i'll

68
00:02:23,599 --> 00:02:25,520
take your question answers and i'll be

69
00:02:25,520 --> 00:02:27,440
happy to answer the questions

70
00:02:27,440 --> 00:02:30,400
that you have so let's get started uh uh

71
00:02:30,400 --> 00:02:32,640
so yeah i am a security engineer with

72
00:02:32,640 --> 00:02:34,319
around four years of professional

73
00:02:34,319 --> 00:02:36,319
experience and i am a master's degree

74
00:02:36,319 --> 00:02:37,280
holder from

75
00:02:37,280 --> 00:02:41,040
iit kanpur that time i was in iit i

76
00:02:41,040 --> 00:02:41,760
started

77
00:02:41,760 --> 00:02:44,480
doing the bug bounty and bug hunting but

78
00:02:44,480 --> 00:02:45,840
then i moved on to the other side of the

79
00:02:45,840 --> 00:02:46,480
table

80
00:02:46,480 --> 00:02:47,920
right now i am actually in the blue

81
00:02:47,920 --> 00:02:49,519
teaming side you can call me i

82
00:02:49,519 --> 00:02:51,360
try to secure applications instead of

83
00:02:51,360 --> 00:02:53,040
cracking them but i do

84
00:02:53,040 --> 00:02:54,800
them by cracking the application so

85
00:02:54,800 --> 00:02:56,080
let's say there is application i want to

86
00:02:56,080 --> 00:02:57,280
secure i'll just

87
00:02:57,280 --> 00:02:58,879
crack that application first after

88
00:02:58,879 --> 00:03:00,720
cracking i just note down

89
00:03:00,720 --> 00:03:02,000
this can be cracked in this particular

90
00:03:02,000 --> 00:03:04,560
way and then oh secure it

91
00:03:04,560 --> 00:03:06,400
so yeah that's more of a blue teaming

92
00:03:06,400 --> 00:03:07,760
approach that i use i

93
00:03:07,760 --> 00:03:10,480
hold a oecp certificate and i'm into

94
00:03:10,480 --> 00:03:12,159
penetration testing source code review

95
00:03:12,159 --> 00:03:14,239
design reviews and all those things

96
00:03:14,239 --> 00:03:15,920
yeah but my bread and butter is

97
00:03:15,920 --> 00:03:17,840
development i do open source development

98
00:03:17,840 --> 00:03:20,239
for a lot of things so

99
00:03:20,239 --> 00:03:22,720
here i've listed few of my very popular

100
00:03:22,720 --> 00:03:24,400
open source projects uh

101
00:03:24,400 --> 00:03:26,239
you can check out those projects in my

102
00:03:26,239 --> 00:03:27,440
github link i'll just share the link

103
00:03:27,440 --> 00:03:28,799
youtube link in my

104
00:03:28,799 --> 00:03:32,000
in in the deck itself and yeah

105
00:03:32,000 --> 00:03:34,400
that's all about me that i have so this

106
00:03:34,400 --> 00:03:35,440
is my get a handle

107
00:03:35,440 --> 00:03:36,799
this is my linkedin if you want to

108
00:03:36,799 --> 00:03:38,959
connect with me over london and this is

109
00:03:38,959 --> 00:03:39,680
my twitter

110
00:03:39,680 --> 00:03:41,519
i'm not very much active on twitter but

111
00:03:41,519 --> 00:03:43,200
yeah that's the good platform to

112
00:03:43,200 --> 00:03:44,560
communicate with the team so

113
00:03:44,560 --> 00:03:46,720
yeah i'm getting some popularity over

114
00:03:46,720 --> 00:03:48,159
there and if you're curious to

115
00:03:48,159 --> 00:03:50,319
know more about me you can check out my

116
00:03:50,319 --> 00:03:51,440
website i

117
00:03:51,440 --> 00:03:53,599
it's it's actually updated so you can

118
00:03:53,599 --> 00:03:54,879
check it out and let me know if you have

119
00:03:54,879 --> 00:03:56,080
any feedback or

120
00:03:56,080 --> 00:03:57,760
anything that you want to know from my

121
00:03:57,760 --> 00:04:00,000
site so let's get started

122
00:04:00,000 --> 00:04:03,120
about the tool so first of all uh

123
00:04:03,120 --> 00:04:05,840
this is a tool come framework so docker

124
00:04:05,840 --> 00:04:06,720
ent

125
00:04:06,720 --> 00:04:08,319
came into my mind when i was doing a

126
00:04:08,319 --> 00:04:10,319
penetration testing of a docker

127
00:04:10,319 --> 00:04:12,080
of a docker container which was running

128
00:04:12,080 --> 00:04:13,519
in a qs environment

129
00:04:13,519 --> 00:04:15,920
the thing was uh the things became

130
00:04:15,920 --> 00:04:17,519
repetitive after some time

131
00:04:17,519 --> 00:04:19,600
because i i had to test view the

132
00:04:19,600 --> 00:04:20,639
parameters all

133
00:04:20,639 --> 00:04:22,240
all the time i had to just check a

134
00:04:22,240 --> 00:04:24,160
particular container for these specific

135
00:04:24,160 --> 00:04:25,840
parameters and after some time the

136
00:04:25,840 --> 00:04:27,520
things became repetitive

137
00:04:27,520 --> 00:04:29,759
so i thought of writing a script but

138
00:04:29,759 --> 00:04:31,440
then i realized

139
00:04:31,440 --> 00:04:33,919
script is okay but let's say the same

140
00:04:33,919 --> 00:04:35,040
problem is being

141
00:04:35,040 --> 00:04:36,400
faced by a lot of people in the

142
00:04:36,400 --> 00:04:37,919
community out there so i thought of

143
00:04:37,919 --> 00:04:39,040
creating this tool

144
00:04:39,040 --> 00:04:41,919
into a framework where in the tooling

145
00:04:41,919 --> 00:04:43,759
side of it i'll provide you a few set of

146
00:04:43,759 --> 00:04:45,600
plugins which are already there which

147
00:04:45,600 --> 00:04:47,680
are actually necessary to test your

148
00:04:47,680 --> 00:04:49,120
container against

149
00:04:49,120 --> 00:04:51,840
and then in the plug-in in the framework

150
00:04:51,840 --> 00:04:53,280
side you can write your own plug-in so

151
00:04:53,280 --> 00:04:54,880
let's say if your organization

152
00:04:54,880 --> 00:04:57,600
has custom docker login mechanism so you

153
00:04:57,600 --> 00:04:58,639
can use

154
00:04:58,639 --> 00:05:00,880
those plugins to get into it so if you

155
00:05:00,880 --> 00:05:01,680
see this is

156
00:05:01,680 --> 00:05:03,919
a framework which is written in python i

157
00:05:03,919 --> 00:05:05,440
have designed it in a way

158
00:05:05,440 --> 00:05:07,520
that everything is already in place so

159
00:05:07,520 --> 00:05:08,560
what you have to do is

160
00:05:08,560 --> 00:05:10,400
you just have to create your own plugin

161
00:05:10,400 --> 00:05:12,160
and plug in a specific directory in a

162
00:05:12,160 --> 00:05:13,919
specific format so once you have it

163
00:05:13,919 --> 00:05:15,120
there

164
00:05:15,120 --> 00:05:16,960
that's it bingo i mean you can use the

165
00:05:16,960 --> 00:05:18,639
plugin in the ui itself within within

166
00:05:18,639 --> 00:05:19,280
few

167
00:05:19,280 --> 00:05:22,639
uh clicks and yeah so

168
00:05:22,639 --> 00:05:25,280
documenty performs a task of scanning

169
00:05:25,280 --> 00:05:27,759
security uh related miss configuration

170
00:05:27,759 --> 00:05:29,600
inside the docker so those security

171
00:05:29,600 --> 00:05:31,680
relatedness configurations can be

172
00:05:31,680 --> 00:05:33,280
like you might be running a published

173
00:05:33,280 --> 00:05:34,720
container inside a docker or

174
00:05:34,720 --> 00:05:36,720
like you are actually putting your

175
00:05:36,720 --> 00:05:38,000
source code inside the docker

176
00:05:38,000 --> 00:05:40,479
itself so if i take the example of a

177
00:05:40,479 --> 00:05:41,600
java application

178
00:05:41,600 --> 00:05:43,039
so you have your spin boot application

179
00:05:43,039 --> 00:05:44,960
you have your

180
00:05:44,960 --> 00:05:46,880
configuration parameters in there and

181
00:05:46,880 --> 00:05:48,720
they are pretty sensitive configuration

182
00:05:48,720 --> 00:05:50,080
configuration parameters

183
00:05:50,080 --> 00:05:51,600
then you have those configuration

184
00:05:51,600 --> 00:05:53,840
parameters bundled inside the chart and

185
00:05:53,840 --> 00:05:54,160
then

186
00:05:54,160 --> 00:05:55,520
you are building that jar inside the

187
00:05:55,520 --> 00:05:57,840
docker itself which is a security

188
00:05:57,840 --> 00:06:00,080
uh it's not non-compliant security right

189
00:06:00,080 --> 00:06:01,840
so you can uh

190
00:06:01,840 --> 00:06:03,680
this tool can identify those kind of

191
00:06:03,680 --> 00:06:06,000
issues as well so it can uh

192
00:06:06,000 --> 00:06:07,600
identify docker level security miss

193
00:06:07,600 --> 00:06:09,120
configuration name space level

194
00:06:09,120 --> 00:06:11,039
misconfigurations and check

195
00:06:11,039 --> 00:06:13,039
once those check has been identified it

196
00:06:13,039 --> 00:06:14,560
will audit the result

197
00:06:14,560 --> 00:06:16,240
and everything at the end of the day is

198
00:06:16,240 --> 00:06:17,919
customizable so even the audit results

199
00:06:17,919 --> 00:06:19,680
can be customized you can have it right

200
00:06:19,680 --> 00:06:21,520
now in the tooling side

201
00:06:21,520 --> 00:06:23,120
if you see the audit results come as a

202
00:06:23,120 --> 00:06:25,440
part of json entity but you can

203
00:06:25,440 --> 00:06:27,039
customize it to get it in a proper

204
00:06:27,039 --> 00:06:28,880
reporting format that is compatible with

205
00:06:28,880 --> 00:06:30,720
your organization or your

206
00:06:30,720 --> 00:06:33,759
uh your security assessment pipeline or

207
00:06:33,759 --> 00:06:34,960
all these things

208
00:06:34,960 --> 00:06:37,360
the tool also has been designed uh in a

209
00:06:37,360 --> 00:06:38,880
way that it is very much difficult

210
00:06:38,880 --> 00:06:39,600
friendly so

211
00:06:39,600 --> 00:06:41,120
let's say if you want to integrate this

212
00:06:41,120 --> 00:06:42,720
particular tool with

213
00:06:42,720 --> 00:06:45,440
ci cd pipeline so this tool has those

214
00:06:45,440 --> 00:06:47,199
capabilities in there

215
00:06:47,199 --> 00:06:49,280
and yes there is a fully functional web

216
00:06:49,280 --> 00:06:50,319
application with

217
00:06:50,319 --> 00:06:53,039
a fully functional ci cli but i would

218
00:06:53,039 --> 00:06:55,440
say cli is more powerful as compared to

219
00:06:55,440 --> 00:06:56,240
web application

220
00:06:56,240 --> 00:06:58,160
right now in current stage because i'm

221
00:06:58,160 --> 00:06:59,520
not at all into uh

222
00:06:59,520 --> 00:07:01,599
web application development but yes i

223
00:07:01,599 --> 00:07:03,440
have leveraged a very open popular open

224
00:07:03,440 --> 00:07:04,400
source uh

225
00:07:04,400 --> 00:07:06,960
tool called as streamlit to create a web

226
00:07:06,960 --> 00:07:07,599
application

227
00:07:07,599 --> 00:07:09,759
the main issue with that web application

228
00:07:09,759 --> 00:07:10,960
is that

229
00:07:10,960 --> 00:07:13,280
all the process execution happens in one

230
00:07:13,280 --> 00:07:14,319
particular

231
00:07:14,319 --> 00:07:17,280
process whereas in cli you can specify

232
00:07:17,280 --> 00:07:18,880
the number of parallel processes that

233
00:07:18,880 --> 00:07:19,919
you want to run

234
00:07:19,919 --> 00:07:22,479
so in cli the default parameters for

235
00:07:22,479 --> 00:07:23,919
number of processes is two

236
00:07:23,919 --> 00:07:25,680
the web application is one but that is

237
00:07:25,680 --> 00:07:27,599
again customizable for cli but for web

238
00:07:27,599 --> 00:07:28,160
application

239
00:07:28,160 --> 00:07:30,080
i was facing some issues so i was not

240
00:07:30,080 --> 00:07:32,160
able to rule that particular thing out

241
00:07:32,160 --> 00:07:34,000
as a release in in the open source

242
00:07:34,000 --> 00:07:35,199
community

243
00:07:35,199 --> 00:07:37,360
now one more special thing about docker

244
00:07:37,360 --> 00:07:38,400
ent is that

245
00:07:38,400 --> 00:07:40,720
if you see docker ent can also audit

246
00:07:40,720 --> 00:07:41,680
your

247
00:07:41,680 --> 00:07:44,400
kubernetes or swarm the reason i'm

248
00:07:44,400 --> 00:07:44,800
saying

249
00:07:44,800 --> 00:07:47,520
this is because at the end of the day

250
00:07:47,520 --> 00:07:50,080
even those clusters are fine-grained to

251
00:07:50,080 --> 00:07:52,080
docker level checks itself so at the end

252
00:07:52,080 --> 00:07:53,840
of the day kubernetes is also running a

253
00:07:53,840 --> 00:07:54,639
talker right

254
00:07:54,639 --> 00:07:56,800
so you can have the checks for your

255
00:07:56,800 --> 00:07:58,160
kubernetes and you can have checks for

256
00:07:58,160 --> 00:07:59,360
your club

257
00:07:59,360 --> 00:08:03,599
so on cluster as well and this framework

258
00:08:03,599 --> 00:08:05,759
is very much similar to docker pen but

259
00:08:05,759 --> 00:08:06,720
it is doing

260
00:08:06,720 --> 00:08:08,479
something on top of it i'll just talk

261
00:08:08,479 --> 00:08:10,160
about the comparison between the two

262
00:08:10,160 --> 00:08:10,879
tools

263
00:08:10,879 --> 00:08:15,520
in my next slide let's go to that

264
00:08:15,680 --> 00:08:19,280
okay so docker bench

265
00:08:19,280 --> 00:08:22,080
is a tool which performs static analysis

266
00:08:22,080 --> 00:08:22,319
of

267
00:08:22,319 --> 00:08:26,319
your docker so it performs some runtime

268
00:08:26,319 --> 00:08:27,199
checks also but

269
00:08:27,199 --> 00:08:29,280
every check is actually aligned with the

270
00:08:29,280 --> 00:08:31,440
cis benchmark so if you see

271
00:08:31,440 --> 00:08:35,039
if i just say this i just draw a venn

272
00:08:35,039 --> 00:08:35,760
diagram of

273
00:08:35,760 --> 00:08:38,799
all both of the tools ent and bench

274
00:08:38,799 --> 00:08:40,320
then you will see there is some sort of

275
00:08:40,320 --> 00:08:41,839
overlap which is happening

276
00:08:41,839 --> 00:08:44,240
and there are some critical points which

277
00:08:44,240 --> 00:08:46,399
segregate the usability of those tools

278
00:08:46,399 --> 00:08:47,760
so if you see ent

279
00:08:47,760 --> 00:08:50,000
can perform container level internal

280
00:08:50,000 --> 00:08:51,760
checks i'll talk about that internal

281
00:08:51,760 --> 00:08:53,279
checks in a moment

282
00:08:53,279 --> 00:08:56,000
but benchmark can identify host level

283
00:08:56,000 --> 00:08:57,600
hardening checks which is not at all

284
00:08:57,600 --> 00:08:59,200
into the scope of ent

285
00:08:59,200 --> 00:09:01,600
because ent has been designed it's a

286
00:09:01,600 --> 00:09:03,440
runtime configuration analysis

287
00:09:03,440 --> 00:09:05,920
rather than a hardening identification

288
00:09:05,920 --> 00:09:07,519
from the host perspective

289
00:09:07,519 --> 00:09:09,920
so yeah ben's this is the major idea of

290
00:09:09,920 --> 00:09:11,040
the differences

291
00:09:11,040 --> 00:09:14,640
but if you see runtime checks

292
00:09:14,640 --> 00:09:17,279
can contain host level hardening section

293
00:09:17,279 --> 00:09:18,480
that's why there is some sort of

294
00:09:18,480 --> 00:09:20,240
overlapping happening between the tools

295
00:09:20,240 --> 00:09:21,120
but yeah

296
00:09:21,120 --> 00:09:23,360
they are definitely segregated in in the

297
00:09:23,360 --> 00:09:25,360
usability perspective

298
00:09:25,360 --> 00:09:28,160
now docker bench completely focuses

299
00:09:28,160 --> 00:09:30,080
about the cis benchmark

300
00:09:30,080 --> 00:09:32,000
it performs container level and host

301
00:09:32,000 --> 00:09:33,279
level checks

302
00:09:33,279 --> 00:09:35,440
and it's just a script that is run and

303
00:09:35,440 --> 00:09:38,080
then gives you output in console itself

304
00:09:38,080 --> 00:09:40,000
but the thing is for reporting let's say

305
00:09:40,000 --> 00:09:42,080
you want to present your analysis to the

306
00:09:42,080 --> 00:09:43,360
stakeholder or the

307
00:09:43,360 --> 00:09:46,080
ops team or the devs team then reporting

308
00:09:46,080 --> 00:09:47,200
is not

309
00:09:47,200 --> 00:09:48,959
fluid with documents you will have to

310
00:09:48,959 --> 00:09:51,120
write your own custom

311
00:09:51,120 --> 00:09:53,760
tools custom scripts to create the

312
00:09:53,760 --> 00:09:55,839
console output to logs so that is not

313
00:09:55,839 --> 00:09:57,600
possible with docker bands

314
00:09:57,600 --> 00:09:59,600
and uh yeah reporting is seriously

315
00:09:59,600 --> 00:10:01,279
headache i've used document the results

316
00:10:01,279 --> 00:10:03,120
are promising but the thing is like

317
00:10:03,120 --> 00:10:04,399
reporting is paying

318
00:10:04,399 --> 00:10:06,320
on the other hand if you see uh it

319
00:10:06,320 --> 00:10:07,519
performs uh

320
00:10:07,519 --> 00:10:09,680
my tool which i'm proposing right today

321
00:10:09,680 --> 00:10:11,279
it performs container level running

322
00:10:11,279 --> 00:10:12,000
checks

323
00:10:12,000 --> 00:10:14,320
it can perform checks which are there in

324
00:10:14,320 --> 00:10:16,079
benchmarks as well and

325
00:10:16,079 --> 00:10:18,240
you can go into the plug-in side i mean

326
00:10:18,240 --> 00:10:19,920
you can go into the plug-in source code

327
00:10:19,920 --> 00:10:20,399
and see

328
00:10:20,399 --> 00:10:22,480
what sort of uh container benchmark

329
00:10:22,480 --> 00:10:24,000
level checks are also there

330
00:10:24,000 --> 00:10:27,279
so it can perform also that and it's the

331
00:10:27,279 --> 00:10:28,160
main thing that

332
00:10:28,160 --> 00:10:31,279
make ent special from benz is that

333
00:10:31,279 --> 00:10:34,959
in ent you can write or there are tools

334
00:10:34,959 --> 00:10:36,880
sorry there are plugins already in there

335
00:10:36,880 --> 00:10:38,480
which can actually go inside the docker

336
00:10:38,480 --> 00:10:38,720
and

337
00:10:38,720 --> 00:10:40,480
can check if there is a miss

338
00:10:40,480 --> 00:10:41,680
configuration happening inside the

339
00:10:41,680 --> 00:10:43,440
docker and a very simple example

340
00:10:43,440 --> 00:10:46,320
that i just talked in my previous slide

341
00:10:46,320 --> 00:10:46,959
that was

342
00:10:46,959 --> 00:10:49,200
when you are building the spring mode

343
00:10:49,200 --> 00:10:51,360
application in the container itself so

344
00:10:51,360 --> 00:10:52,880
basically your source code light in the

345
00:10:52,880 --> 00:10:55,040
container and by mistake you have put

346
00:10:55,040 --> 00:10:55,440
your

347
00:10:55,440 --> 00:10:57,519
configuration file with sensitive data

348
00:10:57,519 --> 00:10:58,959
in the container itself

349
00:10:58,959 --> 00:11:01,120
so ent can identify those checks so if

350
00:11:01,120 --> 00:11:02,240
you see

351
00:11:02,240 --> 00:11:04,640
i won't compare the tools as it is but

352
00:11:04,640 --> 00:11:06,079
yeah there is some sort of

353
00:11:06,079 --> 00:11:07,680
there is some power with ent which is

354
00:11:07,680 --> 00:11:09,920
not with benz so ent is very much

355
00:11:09,920 --> 00:11:12,399
flexible in with respect to bin so

356
00:11:12,399 --> 00:11:14,880
that's that's a very brief uh

357
00:11:14,880 --> 00:11:16,880
um points of differentiating between

358
00:11:16,880 --> 00:11:19,440
that between the two tools

359
00:11:19,440 --> 00:11:21,760
yeah yeah and yeah that's that's the

360
00:11:21,760 --> 00:11:24,000
main check that is being performed uh

361
00:11:24,000 --> 00:11:26,000
for ent and benchmark yes that's what i

362
00:11:26,000 --> 00:11:27,120
talked about

363
00:11:27,120 --> 00:11:30,160
now um so since i said i made this tool

364
00:11:30,160 --> 00:11:30,800
a very much

365
00:11:30,800 --> 00:11:32,560
uh very much in a way that it is

366
00:11:32,560 --> 00:11:34,240
friendly to the developers it is

367
00:11:34,240 --> 00:11:34,880
friendly

368
00:11:34,880 --> 00:11:38,240
to the ops team so the main point was to

369
00:11:38,240 --> 00:11:40,000
identify

370
00:11:40,000 --> 00:11:41,680
what are the challenges the team faces

371
00:11:41,680 --> 00:11:44,000
so definitely deployment

372
00:11:44,000 --> 00:11:48,160
hosting and running the tool is

373
00:11:48,160 --> 00:11:50,000
uh the main challenge that we have is

374
00:11:50,000 --> 00:11:51,440
like uh using this

375
00:11:51,440 --> 00:11:54,480
any any tool in any environment is that

376
00:11:54,480 --> 00:11:55,600
like

377
00:11:55,600 --> 00:11:57,839
deployment and then creating a report

378
00:11:57,839 --> 00:11:59,120
out of it so this

379
00:11:59,120 --> 00:12:01,600
docker ent has been designed in design

380
00:12:01,600 --> 00:12:02,720
by keeping all those things in mind

381
00:12:02,720 --> 00:12:04,079
because i'm a developer i know the pain

382
00:12:04,079 --> 00:12:05,040
point of

383
00:12:05,040 --> 00:12:06,480
rolling this tool to production and

384
00:12:06,480 --> 00:12:09,519
analyzing the changes in there

385
00:12:09,519 --> 00:12:11,120
docker nt has been designed keeping all

386
00:12:11,120 --> 00:12:13,200
those things in mind now there are two

387
00:12:13,200 --> 00:12:15,600
ways of actually quickly starting this

388
00:12:15,600 --> 00:12:16,399
docker ent

389
00:12:16,399 --> 00:12:18,800
in any environment that you want so the

390
00:12:18,800 --> 00:12:19,680
two ways uh

391
00:12:19,680 --> 00:12:21,360
one way is like installing through paper

392
00:12:21,360 --> 00:12:22,959
or running it from source so

393
00:12:22,959 --> 00:12:25,600
if like whenever there is a release i

394
00:12:25,600 --> 00:12:26,480
create a

395
00:12:26,480 --> 00:12:28,480
create a bundle of that particular code

396
00:12:28,480 --> 00:12:29,680
and push it to pip

397
00:12:29,680 --> 00:12:32,160
but yeah from source from two links to

398
00:12:32,160 --> 00:12:33,600
perspective you will find lot of new

399
00:12:33,600 --> 00:12:35,440
plugins which might not there be

400
00:12:35,440 --> 00:12:38,959
in uh in in uh package oh but yeah so

401
00:12:38,959 --> 00:12:39,920
that is the case

402
00:12:39,920 --> 00:12:42,240
so with pip it is extremely simple to

403
00:12:42,240 --> 00:12:43,279
install it just has to

404
00:12:43,279 --> 00:12:45,279
you just have to run pip install docker

405
00:12:45,279 --> 00:12:47,600
ent and then one once you have done that

406
00:12:47,600 --> 00:12:50,160
you can simply run the docker ent minus

407
00:12:50,160 --> 00:12:50,880
w

408
00:12:50,880 --> 00:12:52,800
so once you do that you it will spin up

409
00:12:52,800 --> 00:12:54,240
a web application for you

410
00:12:54,240 --> 00:12:55,920
and you can access that web application

411
00:12:55,920 --> 00:12:58,000
over the internet as well so that's the

412
00:12:58,000 --> 00:12:59,680
beauty of it and if you are stuck

413
00:12:59,680 --> 00:13:01,200
anywhere with the tool just uh

414
00:13:01,200 --> 00:13:03,360
do docker in management itself and it

415
00:13:03,360 --> 00:13:04,639
will give you a lot of options which are

416
00:13:04,639 --> 00:13:06,720
there in docker end and then you can see

417
00:13:06,720 --> 00:13:08,320
what sort of

418
00:13:08,320 --> 00:13:10,880
uh plugins so you can use how you can

419
00:13:10,880 --> 00:13:11,760
use

420
00:13:11,760 --> 00:13:14,160
how you can scan only dockers right now

421
00:13:14,160 --> 00:13:15,600
or you just want to scan a specific

422
00:13:15,600 --> 00:13:16,880
docker instead of all the dockers

423
00:13:16,880 --> 00:13:19,200
in their system you right now so that is

424
00:13:19,200 --> 00:13:21,360
there or if you are interested

425
00:13:21,360 --> 00:13:23,680
in the latest plugins which are which

426
00:13:23,680 --> 00:13:24,399
are being

427
00:13:24,399 --> 00:13:26,160
actively developed you can clone the

428
00:13:26,160 --> 00:13:28,480
repo once clone i mean you just have to

429
00:13:28,480 --> 00:13:29,440
run make depths

430
00:13:29,440 --> 00:13:32,240
uh makes that will

431
00:13:33,279 --> 00:13:35,680
just run download bnb making these

432
00:13:35,680 --> 00:13:36,639
create a python

433
00:13:36,639 --> 00:13:38,240
virtual environment for you and once you

434
00:13:38,240 --> 00:13:39,680
have that just activate the virtual

435
00:13:39,680 --> 00:13:40,560
environment and

436
00:13:40,560 --> 00:13:42,480
go inside the i mean run it as a simple

437
00:13:42,480 --> 00:13:44,320
python module so you can run it through

438
00:13:44,320 --> 00:13:46,000
like python minus m docker and minus

439
00:13:46,000 --> 00:13:46,880
minus help

440
00:13:46,880 --> 00:13:48,959
so the same way that is possible now

441
00:13:48,959 --> 00:13:50,240
docker and d

442
00:13:50,240 --> 00:13:53,360
comes in two ways i'll again say minus w

443
00:13:53,360 --> 00:13:55,920
triggers the docker ent web application

444
00:13:55,920 --> 00:13:57,279
i show in the demo

445
00:13:57,279 --> 00:13:59,760
and uh i have a demo for cli application

446
00:13:59,760 --> 00:14:01,199
as well which i'll be sharing with you

447
00:14:01,199 --> 00:14:02,160
guys uh

448
00:14:02,160 --> 00:14:04,000
in the in upcoming slides so that's

449
00:14:04,000 --> 00:14:05,519
that's that's that's

450
00:14:05,519 --> 00:14:09,040
that that defines how easy docker ent is

451
00:14:09,040 --> 00:14:11,199
so that uh you can quickly set it up

452
00:14:11,199 --> 00:14:12,720
there is no need to set up actually you

453
00:14:12,720 --> 00:14:15,120
can simply uh clone the source running

454
00:14:15,120 --> 00:14:16,800
or if you're curious you don't want to

455
00:14:16,800 --> 00:14:18,560
clone the source you want to simply

456
00:14:18,560 --> 00:14:20,639
just run and checks you checks you can

457
00:14:20,639 --> 00:14:22,880
simply download the

458
00:14:22,880 --> 00:14:25,839
the docker and from the pip and quickly

459
00:14:25,839 --> 00:14:26,480
run it

460
00:14:26,480 --> 00:14:29,040
so yeah that's that's that's that's the

461
00:14:29,040 --> 00:14:32,480
simplicity of this particular tool

462
00:14:33,519 --> 00:14:35,279
now let's talk about few of the checks

463
00:14:35,279 --> 00:14:37,040
which are already in

464
00:14:37,040 --> 00:14:39,040
this tool right now i'm not talking

465
00:14:39,040 --> 00:14:40,720
about from the frameworks perspective

466
00:14:40,720 --> 00:14:42,800
but from the tools perspective

467
00:14:42,800 --> 00:14:44,880
there is a difference because frameworks

468
00:14:44,880 --> 00:14:46,160
give you a

469
00:14:46,160 --> 00:14:48,079
a model what you have to do is you have

470
00:14:48,079 --> 00:14:49,680
to just have to use that more extend

471
00:14:49,680 --> 00:14:51,360
that particular model

472
00:14:51,360 --> 00:14:53,040
create your own tools out of it or

473
00:14:53,040 --> 00:14:55,440
create your own plugins out of it so

474
00:14:55,440 --> 00:14:57,279
when i say there are few checks already

475
00:14:57,279 --> 00:14:59,440
in docker 80 so 6 are from the docker

476
00:14:59,440 --> 00:15:01,360
ent tools perspective so

477
00:15:01,360 --> 00:15:02,720
these are the checks which are already

478
00:15:02,720 --> 00:15:05,760
in there i'll explain about the checks

479
00:15:05,760 --> 00:15:07,040
in this particular slide but i'll give

480
00:15:07,040 --> 00:15:08,800
you a very brief introduction of that if

481
00:15:08,800 --> 00:15:09,920
you want to see what

482
00:15:09,920 --> 00:15:12,480
a check does you can simply go to the

483
00:15:12,480 --> 00:15:14,560
repo and you can see in the deep in

484
00:15:14,560 --> 00:15:16,000
in the repo i have mentioned in detail

485
00:15:16,000 --> 00:15:17,760
like what what checks are there if the

486
00:15:17,760 --> 00:15:18,079
check

487
00:15:18,079 --> 00:15:19,760
is performing any audit result or not

488
00:15:19,760 --> 00:15:21,360
and all those things so these

489
00:15:21,360 --> 00:15:23,519
are the set of checks which are there

490
00:15:23,519 --> 00:15:24,880
and definitely for the latest set you

491
00:15:24,880 --> 00:15:26,320
can definitely go inside

492
00:15:26,320 --> 00:15:28,399
the the plugin feature in docker ent in

493
00:15:28,399 --> 00:15:30,240
the in the same github repo

494
00:15:30,240 --> 00:15:31,360
so these are the checks which are

495
00:15:31,360 --> 00:15:33,920
already in there right now

496
00:15:33,920 --> 00:15:36,720
so i have not segregated the checks on

497
00:15:36,720 --> 00:15:37,839
the basis of

498
00:15:37,839 --> 00:15:39,920
container internals or container

499
00:15:39,920 --> 00:15:42,560
configuration specific but yeah this is

500
00:15:42,560 --> 00:15:44,560
these are all this text if you see the

501
00:15:44,560 --> 00:15:46,560
files so file will take you to the

502
00:15:46,560 --> 00:15:48,720
plugin of the docker empty so if you see

503
00:15:48,720 --> 00:15:50,320
there is command history plugin file

504
00:15:50,320 --> 00:15:51,680
system in for plugin

505
00:15:51,680 --> 00:15:53,519
network information plugin plain text

506
00:15:53,519 --> 00:15:55,759
password plugin security profiles plugin

507
00:15:55,759 --> 00:15:58,160
user info system information so login so

508
00:15:58,160 --> 00:15:59,040
if you see

509
00:15:59,040 --> 00:16:02,000
at times i have seen in my penetration

510
00:16:02,000 --> 00:16:02,959
testing time

511
00:16:02,959 --> 00:16:06,079
that developers what they

512
00:16:06,079 --> 00:16:09,040
do is they deploy the dockers that is

513
00:16:09,040 --> 00:16:10,079
perfectly fine

514
00:16:10,079 --> 00:16:12,480
but after deployment also they go inside

515
00:16:12,480 --> 00:16:13,440
the docker and

516
00:16:13,440 --> 00:16:16,399
run some sort of sensitive commands and

517
00:16:16,399 --> 00:16:18,000
they run those sensitive commands

518
00:16:18,000 --> 00:16:19,120
through

519
00:16:19,120 --> 00:16:22,000
let's say a privileged privileged cell

520
00:16:22,000 --> 00:16:22,480
so

521
00:16:22,480 --> 00:16:24,240
this command history plugins actually

522
00:16:24,240 --> 00:16:26,800
helps you identify if there is any

523
00:16:26,800 --> 00:16:29,920
uh history shell history or the root

524
00:16:29,920 --> 00:16:31,360
history which is in there so i'll give

525
00:16:31,360 --> 00:16:32,800
you a very simple example for

526
00:16:32,800 --> 00:16:34,800
by this by the intuition for this

527
00:16:34,800 --> 00:16:36,639
particular plugin came into my mind

528
00:16:36,639 --> 00:16:38,480
so this happened to me while i was

529
00:16:38,480 --> 00:16:40,160
analyzing a docker in that particular

530
00:16:40,160 --> 00:16:40,880
docker

531
00:16:40,880 --> 00:16:44,160
the command was saved and the developer

532
00:16:44,160 --> 00:16:45,680
was passing the command

533
00:16:45,680 --> 00:16:49,040
as like that was a mysql client which is

534
00:16:49,040 --> 00:16:50,560
connecting to mysql server and

535
00:16:50,560 --> 00:16:52,880
the developer of passing the command

536
00:16:52,880 --> 00:16:54,079
mysql server

537
00:16:54,079 --> 00:16:56,160
password in the command line itself so

538
00:16:56,160 --> 00:16:57,519
that was the revealing of the sensitive

539
00:16:57,519 --> 00:16:58,560
information so

540
00:16:58,560 --> 00:17:00,320
these kind of mistakes definitely are

541
00:17:00,320 --> 00:17:01,759
there in production

542
00:17:01,759 --> 00:17:05,280
uh because developers always try to find

543
00:17:05,280 --> 00:17:07,919
simpler ways of getting things done so

544
00:17:07,919 --> 00:17:09,039
these

545
00:17:09,039 --> 00:17:12,000
that was the main intention of writing

546
00:17:12,000 --> 00:17:12,959
this tool right

547
00:17:12,959 --> 00:17:15,119
so this command history can identify the

548
00:17:15,119 --> 00:17:17,119
shell and file system can identify the

549
00:17:17,119 --> 00:17:18,720
read write file system

550
00:17:18,720 --> 00:17:21,119
now at times i have seen where

551
00:17:21,119 --> 00:17:22,880
developers are mounting

552
00:17:22,880 --> 00:17:24,480
during the production deployment and i'm

553
00:17:24,480 --> 00:17:27,199
not joking uh developers are mounting

554
00:17:27,199 --> 00:17:29,760
a volume and they're mounting a volume

555
00:17:29,760 --> 00:17:30,480
in a way

556
00:17:30,480 --> 00:17:33,440
that even a doctor can write even if

557
00:17:33,440 --> 00:17:34,880
there is no need for writing but they

558
00:17:34,880 --> 00:17:35,679
can write to

559
00:17:35,679 --> 00:17:37,600
those mounts as well so file system

560
00:17:37,600 --> 00:17:38,799
information can give you an

561
00:17:38,799 --> 00:17:40,160
identification i mean

562
00:17:40,160 --> 00:17:42,320
can give you the id of the files which

563
00:17:42,320 --> 00:17:43,919
are root writable

564
00:17:43,919 --> 00:17:46,320
read writable all those kind of things

565
00:17:46,320 --> 00:17:47,919
network state

566
00:17:47,919 --> 00:17:49,120
can give you the identification of

567
00:17:49,120 --> 00:17:50,799
networks and what sort of mapping is

568
00:17:50,799 --> 00:17:51,840
there in the ports

569
00:17:51,840 --> 00:17:53,600
this is actually a critical information

570
00:17:53,600 --> 00:17:56,080
from firewall and box perspective

571
00:17:56,080 --> 00:17:59,120
so this is it and you can go through all

572
00:17:59,120 --> 00:18:00,400
those features which are there for

573
00:18:00,400 --> 00:18:01,600
particular plugins

574
00:18:01,600 --> 00:18:03,280
but if you see on the right hand right

575
00:18:03,280 --> 00:18:05,120
most side of every plugin you will see

576
00:18:05,120 --> 00:18:05,919
the audit

577
00:18:05,919 --> 00:18:08,720
so audit tells you about like audit if

578
00:18:08,720 --> 00:18:11,039
if the audit field is present or it says

579
00:18:11,039 --> 00:18:11,280
it

580
00:18:11,280 --> 00:18:14,160
no audit it means that there is no

581
00:18:14,160 --> 00:18:14,960
auditing

582
00:18:14,960 --> 00:18:16,160
written for that particular tool so

583
00:18:16,160 --> 00:18:18,640
basically you have to dig into the

584
00:18:18,640 --> 00:18:21,039
information returned by the system info

585
00:18:21,039 --> 00:18:22,320
plug-in rather than

586
00:18:22,320 --> 00:18:24,559
uh the audit planning so i'll explain

587
00:18:24,559 --> 00:18:26,240
you what what are the different

588
00:18:26,240 --> 00:18:28,320
outputs which are coming to which are

589
00:18:28,320 --> 00:18:29,919
coming through docker and so

590
00:18:29,919 --> 00:18:31,760
yeah just stay with me i'll show

591
00:18:31,760 --> 00:18:33,200
everything in the demands

592
00:18:33,200 --> 00:18:35,120
demonstration side so the this is just a

593
00:18:35,120 --> 00:18:37,039
quick overview what sort of plugins

594
00:18:37,039 --> 00:18:37,919
already exist

595
00:18:37,919 --> 00:18:40,080
in this tool and how you can write your

596
00:18:40,080 --> 00:18:40,960
own custom

597
00:18:40,960 --> 00:18:43,840
plugins

598
00:18:44,240 --> 00:18:47,679
okay so next i'll uh get in the

599
00:18:47,679 --> 00:18:48,320
technical

600
00:18:48,320 --> 00:18:50,400
details how you can write your own

601
00:18:50,400 --> 00:18:51,840
plugins because that's

602
00:18:51,840 --> 00:18:53,679
that's that's the only thing that makes

603
00:18:53,679 --> 00:18:55,600
this tool different from the other

604
00:18:55,600 --> 00:18:56,000
existing

605
00:18:56,000 --> 00:18:59,200
tools and when i say uh write your own

606
00:18:59,200 --> 00:18:59,919
tools i'll

607
00:18:59,919 --> 00:19:03,120
explain it ago so this is how a plug-in

608
00:19:03,120 --> 00:19:03,600
code

609
00:19:03,600 --> 00:19:06,640
looks like don't get uh afraid of

610
00:19:06,640 --> 00:19:08,400
looking at the python this is a simple

611
00:19:08,400 --> 00:19:10,000
python code if you

612
00:19:10,000 --> 00:19:12,880
see every plugin will have a scan

613
00:19:12,880 --> 00:19:14,080
function

614
00:19:14,080 --> 00:19:16,240
in here and the scan function will take

615
00:19:16,240 --> 00:19:18,240
a container instance

616
00:19:18,240 --> 00:19:20,880
output queue where it will put the data

617
00:19:20,880 --> 00:19:22,160
an audit queue

618
00:19:22,160 --> 00:19:24,559
and audit enabled or not so right now if

619
00:19:24,559 --> 00:19:25,840
you see by default the audits are

620
00:19:25,840 --> 00:19:27,520
disabled for all the plugins and there

621
00:19:27,520 --> 00:19:27,919
is or

622
00:19:27,919 --> 00:19:30,080
there is no audit queue but uh that

623
00:19:30,080 --> 00:19:31,440
depends on how you are calling this

624
00:19:31,440 --> 00:19:32,080
particular

625
00:19:32,080 --> 00:19:34,480
scan this is the signature of that

626
00:19:34,480 --> 00:19:35,600
particular if you have to write your own

627
00:19:35,600 --> 00:19:36,720
plugins just have to follow this

628
00:19:36,720 --> 00:19:38,000
particular signature

629
00:19:38,000 --> 00:19:40,160
and on the top of it you can just give

630
00:19:40,160 --> 00:19:42,240
the plugin name so i have used the

631
00:19:42,240 --> 00:19:44,480
plugin name as demo plugin so this is

632
00:19:44,480 --> 00:19:46,000
how it looks then there is a log then

633
00:19:46,000 --> 00:19:47,360
there is a result

634
00:19:47,360 --> 00:19:49,919
now every plugin should respond in this

635
00:19:49,919 --> 00:19:51,280
particular way

636
00:19:51,280 --> 00:19:53,679
if you can see this result dictionary in

637
00:19:53,679 --> 00:19:55,280
python every plugin should respond in

638
00:19:55,280 --> 00:19:56,480
this particular way if it doesn't

639
00:19:56,480 --> 00:19:58,160
respond in particular the framework will

640
00:19:58,160 --> 00:19:59,360
not be able to pick

641
00:19:59,360 --> 00:20:01,760
the beauty of your plugin so you have to

642
00:20:01,760 --> 00:20:03,440
just write your plugin in this

643
00:20:03,440 --> 00:20:04,240
particular way

644
00:20:04,240 --> 00:20:06,240
and this particular plugin says the

645
00:20:06,240 --> 00:20:07,760
result is such a way

646
00:20:07,760 --> 00:20:09,919
that there was a test class which was

647
00:20:09,919 --> 00:20:11,520
performing this particular test

648
00:20:11,520 --> 00:20:13,840
with the test name and everything looks

649
00:20:13,840 --> 00:20:15,360
good in that test and so

650
00:20:15,360 --> 00:20:18,480
that just has to be a left list so just

651
00:20:18,480 --> 00:20:20,000
give the name of the test class

652
00:20:20,000 --> 00:20:22,080
the test that you are performing and the

653
00:20:22,080 --> 00:20:23,679
results of that particular test that's

654
00:20:23,679 --> 00:20:25,520
it that this is what it looks

655
00:20:25,520 --> 00:20:28,400
now it's completely on to you how you

656
00:20:28,400 --> 00:20:30,320
process that particular container for

657
00:20:30,320 --> 00:20:31,440
the particular scan

658
00:20:31,440 --> 00:20:33,200
and all those things so that's why i've

659
00:20:33,200 --> 00:20:35,520
written do something magical here

660
00:20:35,520 --> 00:20:37,840
once that is done you just put the

661
00:20:37,840 --> 00:20:39,840
result into the output queue which

662
00:20:39,840 --> 00:20:42,320
is being given as input just do don't

663
00:20:42,320 --> 00:20:43,120
worry about the

664
00:20:43,120 --> 00:20:45,440
data type which is being passed just put

665
00:20:45,440 --> 00:20:47,440
the results in the output queue

666
00:20:47,440 --> 00:20:50,640
and if the auditing is enabled what you

667
00:20:50,640 --> 00:20:52,159
have to do is you will just

668
00:20:52,159 --> 00:20:55,039
put the same container with the audit

669
00:20:55,039 --> 00:20:56,400
results and with the

670
00:20:56,400 --> 00:20:58,559
with the audit queue and just call that

671
00:20:58,559 --> 00:21:01,200
function so basically if the auditing is

672
00:21:01,200 --> 00:21:03,919
enabled you will have to write one more

673
00:21:03,919 --> 00:21:04,640
function

674
00:21:04,640 --> 00:21:07,440
which is audit function if you can see

675
00:21:07,440 --> 00:21:08,799
this one is the audit function

676
00:21:08,799 --> 00:21:10,320
so this is the signature of the order

677
00:21:10,320 --> 00:21:12,799
function now in the signature that's up

678
00:21:12,799 --> 00:21:14,000
to you how you

679
00:21:14,000 --> 00:21:17,039
interpret those results out so for

680
00:21:17,039 --> 00:21:19,120
getting the check of getting the idea

681
00:21:19,120 --> 00:21:21,360
how i have written audits you can go

682
00:21:21,360 --> 00:21:24,480
into the the repo and you can identify

683
00:21:24,480 --> 00:21:26,000
how i've written on it so

684
00:21:26,000 --> 00:21:27,360
the way i've written audits is very

685
00:21:27,360 --> 00:21:29,280
simple i have leveraged the

686
00:21:29,280 --> 00:21:31,679
dictionary matching algorithm like this

687
00:21:31,679 --> 00:21:32,640
is how

688
00:21:32,640 --> 00:21:35,440
uh the normal uh docker should look like

689
00:21:35,440 --> 00:21:36,080
for this

690
00:21:36,080 --> 00:21:37,760
if i talk about the security profile so

691
00:21:37,760 --> 00:21:39,600
this is these this is how the security

692
00:21:39,600 --> 00:21:41,440
profile should look like and this is how

693
00:21:41,440 --> 00:21:43,440
your docker is responding with these

694
00:21:43,440 --> 00:21:44,640
security buttons i'm

695
00:21:44,640 --> 00:21:47,120
just doing a very simple match of two

696
00:21:47,120 --> 00:21:48,320
dictionaries so this is what

697
00:21:48,320 --> 00:21:49,840
how i have written it but that's

698
00:21:49,840 --> 00:21:51,360
completely up to you how do you want

699
00:21:51,360 --> 00:21:53,600
how do you want to write it so yeah

700
00:21:53,600 --> 00:21:55,520
that's that's

701
00:21:55,520 --> 00:21:57,039
that's into the like writing your own

702
00:21:57,039 --> 00:21:58,799
plugin so it may seem

703
00:21:58,799 --> 00:22:00,240
complicated but at the end of the day

704
00:22:00,240 --> 00:22:01,919
it's very simple because what you have

705
00:22:01,919 --> 00:22:03,200
to do is

706
00:22:03,200 --> 00:22:05,360
you just have to do some name changes so

707
00:22:05,360 --> 00:22:06,799
you have to change something here you

708
00:22:06,799 --> 00:22:08,320
have to change something here

709
00:22:08,320 --> 00:22:09,679
and then you have to write your own

710
00:22:09,679 --> 00:22:11,280
magical stuff that you want to perform

711
00:22:11,280 --> 00:22:11,919
so

712
00:22:11,919 --> 00:22:13,520
with this you can go inside the

713
00:22:13,520 --> 00:22:15,280
container also so

714
00:22:15,280 --> 00:22:17,919
uh you can invoke docker python apis or

715
00:22:17,919 --> 00:22:19,679
python bindings to just get inside the

716
00:22:19,679 --> 00:22:21,360
container execute few commands get the

717
00:22:21,360 --> 00:22:22,159
result

718
00:22:22,159 --> 00:22:24,320
and put it in there so definitely taking

719
00:22:24,320 --> 00:22:25,760
a reference from existing plugin will

720
00:22:25,760 --> 00:22:26,799
definitely help you

721
00:22:26,799 --> 00:22:28,400
help you out writing your own plugin so

722
00:22:28,400 --> 00:22:31,120
that is the case

723
00:22:32,640 --> 00:22:36,799
and i have recorded a a very simple

724
00:22:36,799 --> 00:22:39,200
video of how you can create your own

725
00:22:39,200 --> 00:22:41,039
plugins and you can just go into this

726
00:22:41,039 --> 00:22:41,919
video and you can

727
00:22:41,919 --> 00:22:43,360
follow this article to write your own

728
00:22:43,360 --> 00:22:45,039
plugins also tactical talks about

729
00:22:45,039 --> 00:22:46,960
this video this is an ask anymore video

730
00:22:46,960 --> 00:22:49,280
this also talks about how you can

731
00:22:49,280 --> 00:22:51,600
uh deploy the same infrastructure

732
00:22:51,600 --> 00:22:53,360
quickly without

733
00:22:53,360 --> 00:22:55,440
without anything else so yeah that will

734
00:22:55,440 --> 00:22:57,280
this audio will this so

735
00:22:57,280 --> 00:22:59,039
as kind of a video will help you out in

736
00:22:59,039 --> 00:23:00,559
that case

737
00:23:00,559 --> 00:23:04,960
oops sorry for that yeah so let's go to

738
00:23:04,960 --> 00:23:06,840
the demonstration

739
00:23:06,840 --> 00:23:23,840
uh i'll reshare my screen

740
00:23:26,799 --> 00:23:30,480
okay so if you can see uh i have already

741
00:23:30,480 --> 00:23:32,080
started the docker ent in web

742
00:23:32,080 --> 00:23:33,919
application mode and once you start the

743
00:23:33,919 --> 00:23:36,080
docker enter in web application mode

744
00:23:36,080 --> 00:23:38,000
you can see that it will it will show

745
00:23:38,000 --> 00:23:39,600
you that starting web application and

746
00:23:39,600 --> 00:23:41,279
then it will give you local url and will

747
00:23:41,279 --> 00:23:42,640
start running on eight five zero one

748
00:23:42,640 --> 00:23:43,360
port

749
00:23:43,360 --> 00:23:45,279
uh it it's up to you that which port you

750
00:23:45,279 --> 00:23:47,520
want to run in so the streamlit offers

751
00:23:47,520 --> 00:23:49,919
it to run in 8501 port so it will be by

752
00:23:49,919 --> 00:23:51,200
default running in this particular port

753
00:23:51,200 --> 00:23:52,799
and it will also offer the network

754
00:23:52,799 --> 00:23:54,159
interface to be

755
00:23:54,159 --> 00:23:56,159
working with it so once you run this

756
00:23:56,159 --> 00:23:58,240
particular ent application

757
00:23:58,240 --> 00:24:00,960
and go to this this ui will pop up so i

758
00:24:00,960 --> 00:24:01,440
just

759
00:24:01,440 --> 00:24:04,240
start the ui and the ui is very simple

760
00:24:04,240 --> 00:24:04,559
uh

761
00:24:04,559 --> 00:24:06,320
there is not much information you can

762
00:24:06,320 --> 00:24:08,159
see but here you can see like

763
00:24:08,159 --> 00:24:10,080
about what this tool does how you can

764
00:24:10,080 --> 00:24:12,080
operate this particular tool so

765
00:24:12,080 --> 00:24:13,760
if you go to the second segment you will

766
00:24:13,760 --> 00:24:16,159
see uh to get started go to the sidebar

767
00:24:16,159 --> 00:24:17,440
in the sidebar you will see there are

768
00:24:17,440 --> 00:24:18,000
two options

769
00:24:18,000 --> 00:24:19,919
scan docker and scan docker networks

770
00:24:19,919 --> 00:24:21,919
scan docker networks is in pipeline it

771
00:24:21,919 --> 00:24:23,440
is not rolled out as a tool

772
00:24:23,440 --> 00:24:25,200
feature right now but yeah i'm working

773
00:24:25,200 --> 00:24:27,440
on this like what sort of

774
00:24:27,440 --> 00:24:30,640
network plugins could be there the the

775
00:24:30,640 --> 00:24:33,279
model is in model pipeline is ready but

776
00:24:33,279 --> 00:24:35,440
the model plugins are not ready so

777
00:24:35,440 --> 00:24:36,880
you would definitely it will be really

778
00:24:36,880 --> 00:24:38,880
great if you can come up with your own

779
00:24:38,880 --> 00:24:40,880
ideas and can create pull requests

780
00:24:40,880 --> 00:24:42,720
for docker anti network plugins so

781
00:24:42,720 --> 00:24:44,159
that's that's the area i'm looking

782
00:24:44,159 --> 00:24:46,400
help for now but it's very simple just

783
00:24:46,400 --> 00:24:48,080
click that you want to scan dockers

784
00:24:48,080 --> 00:24:49,440
if you scan docker networks that's all

785
00:24:49,440 --> 00:24:51,120
bill and good if we just create another

786
00:24:51,120 --> 00:24:51,440
uh

787
00:24:51,440 --> 00:24:54,000
popup here but right now i don't want to

788
00:24:54,000 --> 00:24:55,360
scan dockers at all

789
00:24:55,360 --> 00:24:57,919
now it will ask you that you can pick a

790
00:24:57,919 --> 00:24:59,440
single docker or you can pick all the

791
00:24:59,440 --> 00:25:01,120
dockers to start so it will give you the

792
00:25:01,120 --> 00:25:02,720
the running dock the dockers are running

793
00:25:02,720 --> 00:25:04,320
in your system right now so these are

794
00:25:04,320 --> 00:25:05,520
the

795
00:25:05,520 --> 00:25:06,880
docker system which are running in my

796
00:25:06,880 --> 00:25:08,799
system right now with my in my host

797
00:25:08,799 --> 00:25:09,520
system

798
00:25:09,520 --> 00:25:11,679
let's say if i just select all like i

799
00:25:11,679 --> 00:25:12,880
want to run all the

800
00:25:12,880 --> 00:25:16,159
docker but it'll take some time so

801
00:25:16,159 --> 00:25:18,480
okay let's let's go ahead with all now

802
00:25:18,480 --> 00:25:19,840
these are the set of plugins which are

803
00:25:19,840 --> 00:25:21,440
already there

804
00:25:21,440 --> 00:25:23,840
and what you can do is you can select

805
00:25:23,840 --> 00:25:24,880
multiple plugins

806
00:25:24,880 --> 00:25:26,799
like you want to select these plugins or

807
00:25:26,799 --> 00:25:28,080
what you can do is you can select all

808
00:25:28,080 --> 00:25:30,640
the plugins you want to evaluate

809
00:25:30,640 --> 00:25:32,080
once you do that it will ask you that

810
00:25:32,080 --> 00:25:34,000
you want to audit results or not so once

811
00:25:34,000 --> 00:25:34,400
you

812
00:25:34,400 --> 00:25:35,919
have that like let's say i want to audit

813
00:25:35,919 --> 00:25:37,600
a result i just click inside and i'll

814
00:25:37,600 --> 00:25:37,919
just

815
00:25:37,919 --> 00:25:40,880
press start now it will take its own

816
00:25:40,880 --> 00:25:42,000
sweet time because

817
00:25:42,000 --> 00:25:44,080
so it will perform lot of checks and you

818
00:25:44,080 --> 00:25:45,840
can track the progress in the progress

819
00:25:45,840 --> 00:25:47,440
bar section

820
00:25:47,440 --> 00:25:49,679
uh don't judge me by the ui the uis i

821
00:25:49,679 --> 00:25:50,480
know it's not

822
00:25:50,480 --> 00:25:53,279
that great because i'm not a ui person

823
00:25:53,279 --> 00:25:54,720
at all so

824
00:25:54,720 --> 00:25:56,320
thanks to streamlade team they have

825
00:25:56,320 --> 00:25:58,640
created a very simple python pythonic

826
00:25:58,640 --> 00:25:59,760
way of creating ui

827
00:25:59,760 --> 00:26:03,200
so yeah that's that's uh that's

828
00:26:03,200 --> 00:26:05,440
thanks to them now scan is being

829
00:26:05,440 --> 00:26:07,120
happening you will see that it's

830
00:26:07,120 --> 00:26:07,840
scanning

831
00:26:07,840 --> 00:26:09,360
and it's only performing the scan for

832
00:26:09,360 --> 00:26:12,720
dockers once the scan is complete

833
00:26:12,720 --> 00:26:15,679
which is going to happen in few seconds

834
00:26:15,679 --> 00:26:16,640
let me come three

835
00:26:16,640 --> 00:26:20,640
two one zero yeah the scan is complete

836
00:26:20,640 --> 00:26:23,120
so once the scan is complete it will

837
00:26:23,120 --> 00:26:24,080
create

838
00:26:24,080 --> 00:26:26,400
this simpler dictionaries for you and

839
00:26:26,400 --> 00:26:28,320
i'll explain those dictionaries for you

840
00:26:28,320 --> 00:26:30,799
so see if you can see here these are the

841
00:26:30,799 --> 00:26:32,720
set of dockers available in my system

842
00:26:32,720 --> 00:26:33,200
and

843
00:26:33,200 --> 00:26:35,600
it has since i was i selected all it has

844
00:26:35,600 --> 00:26:37,520
scanned all the docker by its

845
00:26:37,520 --> 00:26:39,440
docker ids so it's called which

846
00:26:39,440 --> 00:26:40,880
container short ids

847
00:26:40,880 --> 00:26:43,520
it has evaluated those tools i'll just

848
00:26:43,520 --> 00:26:46,159
close the audit report for now

849
00:26:46,159 --> 00:26:47,760
uh you can download the report for later

850
00:26:47,760 --> 00:26:49,760
purposes by clicking this button and you

851
00:26:49,760 --> 00:26:51,360
can download the audit report from here

852
00:26:51,360 --> 00:26:53,360
so it will just download the report in

853
00:26:53,360 --> 00:26:54,559
json format

854
00:26:54,559 --> 00:26:56,799
now i'll go through each uh talk let's

855
00:26:56,799 --> 00:26:58,559
say i'll pick this particular docker

856
00:26:58,559 --> 00:27:01,279
if you go to this particular docker you

857
00:27:01,279 --> 00:27:02,320
can see

858
00:27:02,320 --> 00:27:04,720
there is no user command history at all

859
00:27:04,720 --> 00:27:06,000
there was no history

860
00:27:06,000 --> 00:27:07,840
of any user command identified in this

861
00:27:07,840 --> 00:27:09,039
but that's why it's coming out to be

862
00:27:09,039 --> 00:27:10,400
planned but if you see

863
00:27:10,400 --> 00:27:12,960
there is file info which says that which

864
00:27:12,960 --> 00:27:14,480
says that there is worldwide table

865
00:27:14,480 --> 00:27:16,640
directories and those directories can be

866
00:27:16,640 --> 00:27:19,360
written by root only and these other

867
00:27:19,360 --> 00:27:21,520
these are the directories so you can go

868
00:27:21,520 --> 00:27:22,640
into the file permission

869
00:27:22,640 --> 00:27:24,799
you can also see the mount information

870
00:27:24,799 --> 00:27:25,919
which has been mount

871
00:27:25,919 --> 00:27:28,240
it will include the namespace uh amount

872
00:27:28,240 --> 00:27:29,360
namespaces where you

873
00:27:29,360 --> 00:27:32,799
also include the the files or

874
00:27:32,799 --> 00:27:35,679
volumes which are mount by during the

875
00:27:35,679 --> 00:27:37,600
operational uh

876
00:27:37,600 --> 00:27:40,799
workload you can see

877
00:27:40,799 --> 00:27:42,480
and list off mounted there is no mount

878
00:27:42,480 --> 00:27:44,799
volume it has identified

879
00:27:44,799 --> 00:27:47,360
passwords in config file and these are

880
00:27:47,360 --> 00:27:48,640
the config files there may be false

881
00:27:48,640 --> 00:27:50,000
positive because it's just doing a

882
00:27:50,000 --> 00:27:51,360
string literal match

883
00:27:51,360 --> 00:27:54,159
uh i thought of incorporating uh right

884
00:27:54,159 --> 00:27:55,919
entropy based password checking tool

885
00:27:55,919 --> 00:27:58,480
that is in pipeline i'll do that but

886
00:27:58,480 --> 00:27:59,039
yeah

887
00:27:59,039 --> 00:28:01,120
you can identify so you can check on the

888
00:28:01,120 --> 00:28:02,960
config files in app in application

889
00:28:02,960 --> 00:28:04,720
properties also identify your password

890
00:28:04,720 --> 00:28:06,480
but yeah as i said it's just doing a

891
00:28:06,480 --> 00:28:07,840
little match so that's why it's flagged

892
00:28:07,840 --> 00:28:09,919
out password as well

893
00:28:09,919 --> 00:28:12,960
um yeah it has identified the shadow

894
00:28:12,960 --> 00:28:14,000
file is readable

895
00:28:14,000 --> 00:28:15,440
and since the shadow file is read there

896
00:28:15,440 --> 00:28:16,880
is no password in shadow file that's

897
00:28:16,880 --> 00:28:17,520
okay

898
00:28:17,520 --> 00:28:21,039
that is okay and if you see

899
00:28:21,039 --> 00:28:23,600
in the process info use i identified

900
00:28:23,600 --> 00:28:25,120
that there is a process running as

901
00:28:25,120 --> 00:28:28,880
java jar minus app.jar and

902
00:28:28,880 --> 00:28:31,919
there is security s linux pro security

903
00:28:31,919 --> 00:28:32,399
options

904
00:28:32,399 --> 00:28:33,840
and those options are null which is

905
00:28:33,840 --> 00:28:35,520
again us issue

906
00:28:35,520 --> 00:28:38,240
and this this container is privileged

907
00:28:38,240 --> 00:28:40,559
like false so this is good thing

908
00:28:40,559 --> 00:28:44,799
um what you can do is

909
00:28:44,799 --> 00:28:46,240
okay so yeah you can also see that the

910
00:28:46,240 --> 00:28:48,000
current user is running as root which is

911
00:28:48,000 --> 00:28:49,520
again a big

912
00:28:49,520 --> 00:28:52,080
compliance issue and you can identify

913
00:28:52,080 --> 00:28:52,720
the the

914
00:28:52,720 --> 00:28:55,679
user id also as well so the user id is

915
00:28:55,679 --> 00:28:57,279
uid0

916
00:28:57,279 --> 00:28:58,960
so these are these are all the things

917
00:28:58,960 --> 00:29:00,559
that you can do with your

918
00:29:00,559 --> 00:29:03,919
uh with i mean identifying your tool

919
00:29:03,919 --> 00:29:06,720
i just want to see if there is any uh

920
00:29:06,720 --> 00:29:07,279
because i

921
00:29:07,279 --> 00:29:10,320
intentionally created uh the history i

922
00:29:10,320 --> 00:29:12,720
history for this site so if you can see

923
00:29:12,720 --> 00:29:15,120
i intentionally created a history inside

924
00:29:15,120 --> 00:29:16,960
a docker and it was able to identify

925
00:29:16,960 --> 00:29:18,960
that i tried running this id i tried

926
00:29:18,960 --> 00:29:20,240
running this exit

927
00:29:20,240 --> 00:29:22,880
and i was able to uh see the docker

928
00:29:22,880 --> 00:29:24,320
history as well in this

929
00:29:24,320 --> 00:29:26,480
particular report so if you see there

930
00:29:26,480 --> 00:29:28,159
are two sections first section will give

931
00:29:28,159 --> 00:29:29,279
you the raw report

932
00:29:29,279 --> 00:29:31,360
and that will contain the information of

933
00:29:31,360 --> 00:29:32,799
all the plugins that has been done and

934
00:29:32,799 --> 00:29:34,480
what was the result from that plugin

935
00:29:34,480 --> 00:29:36,000
for to read that particular you need to

936
00:29:36,000 --> 00:29:37,200
have some sort of understanding about

937
00:29:37,200 --> 00:29:39,760
this tool but let's say

938
00:29:39,760 --> 00:29:42,000
sorry so let's say you don't have any

939
00:29:42,000 --> 00:29:44,399
information about how to read any files

940
00:29:44,399 --> 00:29:44,720
so

941
00:29:44,720 --> 00:29:46,159
at the end of the day it will give you

942
00:29:46,159 --> 00:29:47,600
an audit report in order to put it very

943
00:29:47,600 --> 00:29:49,200
simple to read it's just a list

944
00:29:49,200 --> 00:29:51,440
of indicating a particular talker so

945
00:29:51,440 --> 00:29:53,120
like this is a docker image and this is

946
00:29:53,120 --> 00:29:54,720
just a list which is coming out

947
00:29:54,720 --> 00:29:56,640
uh i'll read about right read for this

948
00:29:56,640 --> 00:29:58,480
one so the docker

949
00:29:58,480 --> 00:30:01,600
container 2e that starts with two is has

950
00:30:01,600 --> 00:30:03,760
a user command history identified

951
00:30:03,760 --> 00:30:05,120
it is the plugin is saying it's a

952
00:30:05,120 --> 00:30:07,840
warning and the root history present is

953
00:30:07,840 --> 00:30:11,200
id followed by exit so this is how

954
00:30:11,200 --> 00:30:14,000
the output of audit plugins look like

955
00:30:14,000 --> 00:30:15,360
and you can go through the

956
00:30:15,360 --> 00:30:17,600
uh the output of each of the audit

957
00:30:17,600 --> 00:30:19,520
plugins and then it's very simple

958
00:30:19,520 --> 00:30:21,120
but the main thing you have noticed that

959
00:30:21,120 --> 00:30:22,880
like everything is

960
00:30:22,880 --> 00:30:25,840
aggregated as in this particular audit

961
00:30:25,840 --> 00:30:27,279
report and

962
00:30:27,279 --> 00:30:29,200
i i'll talk about the notation how i

963
00:30:29,200 --> 00:30:30,559
choose chosen out to

964
00:30:30,559 --> 00:30:33,440
like this one i'll talk about it so this

965
00:30:33,440 --> 00:30:35,200
is how the tool looks like

966
00:30:35,200 --> 00:30:37,039
you can get lot of things with this tool

967
00:30:37,039 --> 00:30:38,640
if you can see lot of processes are

968
00:30:38,640 --> 00:30:39,279
running

969
00:30:39,279 --> 00:30:42,640
and like this this for this particular

970
00:30:42,640 --> 00:30:45,360
uh docker the process name space is

971
00:30:45,360 --> 00:30:45,760
being

972
00:30:45,760 --> 00:30:47,520
mapped and just because of that lot of

973
00:30:47,520 --> 00:30:48,960
processes are being said

974
00:30:48,960 --> 00:30:50,960
this is again a security compliance

975
00:30:50,960 --> 00:30:53,200
issue i mean attacker can leverage this

976
00:30:53,200 --> 00:30:53,679
out

977
00:30:53,679 --> 00:30:58,799
so yeah that is the case um

978
00:30:59,919 --> 00:31:03,279
screen for document

979
00:31:03,919 --> 00:31:07,200
yeah so if you see uh

980
00:31:07,200 --> 00:31:10,960
we saw the demo that this is how

981
00:31:10,960 --> 00:31:14,159
uh sorry

982
00:31:15,600 --> 00:31:19,840
yeah this is how

983
00:31:20,399 --> 00:31:22,480
yeah this is how the result from audit

984
00:31:22,480 --> 00:31:24,399
plugins look like so audit plugins tells

985
00:31:24,399 --> 00:31:24,960
you

986
00:31:24,960 --> 00:31:28,000
uh that the there is there was a plugin

987
00:31:28,000 --> 00:31:29,120
name with user info

988
00:31:29,120 --> 00:31:31,200
which is saying there is some alert and

989
00:31:31,200 --> 00:31:33,279
alert severity is born

990
00:31:33,279 --> 00:31:35,039
and then it's giving you a description

991
00:31:35,039 --> 00:31:36,640
and giving you the details about those

992
00:31:36,640 --> 00:31:37,360
alerts so

993
00:31:37,360 --> 00:31:39,440
this is how uh simple running docker

994
00:31:39,440 --> 00:31:41,200
entity and evaluating results is

995
00:31:41,200 --> 00:31:43,039
if you have some sort of knowledge about

996
00:31:43,039 --> 00:31:44,320
the tool and

997
00:31:44,320 --> 00:31:47,840
some some sort of dictionary uh reading

998
00:31:47,840 --> 00:31:49,360
skills then you can definitely go into

999
00:31:49,360 --> 00:31:50,159
the

1000
00:31:50,159 --> 00:31:52,399
uh the raw results but yeah raw results

1001
00:31:52,399 --> 00:31:54,640
are not for everyone so

1002
00:31:54,640 --> 00:31:56,960
for a cyclops person you don't want to

1003
00:31:56,960 --> 00:31:58,640
get into the technical details of the

1004
00:31:58,640 --> 00:31:59,519
plugin and then you

1005
00:31:59,519 --> 00:32:02,159
want to get into the structural format

1006
00:32:02,159 --> 00:32:03,600
so you can definitely go inside

1007
00:32:03,600 --> 00:32:05,440
and analyze the audit report so this is

1008
00:32:05,440 --> 00:32:08,399
how the tool looks like

1009
00:32:08,399 --> 00:32:12,399
and now i'll talk about few things

1010
00:32:12,399 --> 00:32:14,399
like what all we can incorporate in this

1011
00:32:14,399 --> 00:32:15,840
particular tool and we can

1012
00:32:15,840 --> 00:32:17,840
expect this as a part of future release

1013
00:32:17,840 --> 00:32:19,440
so suggestions for

1014
00:32:19,440 --> 00:32:21,440
remediation which is not there and right

1015
00:32:21,440 --> 00:32:22,559
now so if you see

1016
00:32:22,559 --> 00:32:24,799
if you have identified few security

1017
00:32:24,799 --> 00:32:26,000
issues with one

1018
00:32:26,000 --> 00:32:27,760
severity then there is there are no

1019
00:32:27,760 --> 00:32:29,440
suggestions for remediation so that i

1020
00:32:29,440 --> 00:32:30,640
plan to do

1021
00:32:30,640 --> 00:32:32,960
and then yeah definitely the ui is not

1022
00:32:32,960 --> 00:32:35,360
cool i want to make the ui better

1023
00:32:35,360 --> 00:32:37,279
so let's see i need the support from you

1024
00:32:37,279 --> 00:32:39,919
all because i'm not at all into ui side

1025
00:32:39,919 --> 00:32:41,919
uh simplified way of plugin creation so

1026
00:32:41,919 --> 00:32:42,960
if you see right now

1027
00:32:42,960 --> 00:32:46,080
uh to create plugins you have to even

1028
00:32:46,080 --> 00:32:49,279
the logic is very simple you will have

1029
00:32:49,279 --> 00:32:50,880
to sit down and write your plugins and

1030
00:32:50,880 --> 00:32:52,480
python file and all those things but i

1031
00:32:52,480 --> 00:32:53,919
want i want to see the vision of this

1032
00:32:53,919 --> 00:32:54,960
tool in a way

1033
00:32:54,960 --> 00:32:57,519
that you just select that what what

1034
00:32:57,519 --> 00:32:58,799
command you want to execute inside the

1035
00:32:58,799 --> 00:33:00,640
container or what are the

1036
00:33:00,640 --> 00:33:02,000
configuration you want to analyze you

1037
00:33:02,000 --> 00:33:03,200
just select those kind of and you create

1038
00:33:03,200 --> 00:33:04,640
your plugins the ui itself

1039
00:33:04,640 --> 00:33:07,039
instead of going into the file and then

1040
00:33:07,039 --> 00:33:08,720
running it so that's my vision about

1041
00:33:08,720 --> 00:33:10,080
this particular tool

1042
00:33:10,080 --> 00:33:12,080
i know it will take it's too much to

1043
00:33:12,080 --> 00:33:13,360
think for but uh

1044
00:33:13,360 --> 00:33:14,640
yeah at the end of the day i'm a

1045
00:33:14,640 --> 00:33:16,240
developer i think i see that these

1046
00:33:16,240 --> 00:33:18,000
things are possible

1047
00:33:18,000 --> 00:33:20,320
and we'll be able to achieve it and yeah

1048
00:33:20,320 --> 00:33:21,440
document monitoring

1049
00:33:21,440 --> 00:33:23,679
is the is one more major thing that i

1050
00:33:23,679 --> 00:33:25,760
want to incorporate in this particular

1051
00:33:25,760 --> 00:33:29,039
uh entire framework and yeah

1052
00:33:29,039 --> 00:33:30,720
i as i mentioned there is no parallel

1053
00:33:30,720 --> 00:33:32,320
processing when it comes to ui so i want

1054
00:33:32,320 --> 00:33:32,640
to

1055
00:33:32,640 --> 00:33:35,840
uh see why stream ladies

1056
00:33:35,840 --> 00:33:37,919
is not able to incorporate that multiple

1057
00:33:37,919 --> 00:33:39,360
processing when it comes to

1058
00:33:39,360 --> 00:33:41,279
yeah so that is they're already in

1059
00:33:41,279 --> 00:33:42,960
pipeline and and

1060
00:33:42,960 --> 00:33:44,640
definitely at the end i need your help

1061
00:33:44,640 --> 00:33:46,720
to popularize tool and the main reason

1062
00:33:46,720 --> 00:33:48,080
for making it popular

1063
00:33:48,080 --> 00:33:49,760
that i get an attraction from the

1064
00:33:49,760 --> 00:33:51,200
community and the community people will

1065
00:33:51,200 --> 00:33:52,720
come in and help me

1066
00:33:52,720 --> 00:33:56,080
building the best out of better

1067
00:33:56,080 --> 00:33:58,640
so that's my that's what my vision is

1068
00:33:58,640 --> 00:34:00,480
all about

1069
00:34:00,480 --> 00:34:04,159
um yeah so this is what docker ent

1070
00:34:04,159 --> 00:34:06,720
is and this is the github link uh and if

1071
00:34:06,720 --> 00:34:07,279
you like

1072
00:34:07,279 --> 00:34:09,839
the tool if you like the idea behind the

1073
00:34:09,839 --> 00:34:11,280
tool if you like

1074
00:34:11,280 --> 00:34:12,879
the the framework that it is the

1075
00:34:12,879 --> 00:34:15,040
simplicity of it the reporting part of

1076
00:34:15,040 --> 00:34:16,159
anything if you lied about it

1077
00:34:16,159 --> 00:34:18,239
just feel free to drop in a star that

1078
00:34:18,239 --> 00:34:19,359
will help me

1079
00:34:19,359 --> 00:34:21,520
gain some attraction from the community

1080
00:34:21,520 --> 00:34:23,599
uh and you know how this works so yeah

1081
00:34:23,599 --> 00:34:24,480
definitely

1082
00:34:24,480 --> 00:34:28,320
open up to that so if there is if there

1083
00:34:28,320 --> 00:34:29,119
are any question

1084
00:34:29,119 --> 00:34:32,480
and uh question uh for me to answer i'll

1085
00:34:32,480 --> 00:34:33,199
definitely

1086
00:34:33,199 --> 00:34:36,639
answer them so let's take them and yep

1087
00:34:36,639 --> 00:34:40,159
thank you for being the part of this

1088
00:34:46,839 --> 00:34:48,320
presentation

1089
00:34:48,320 --> 00:34:51,599
yeah that was cool 15

1090
00:34:51,599 --> 00:34:54,560
and minutes that would be less than 40

1091
00:34:54,560 --> 00:34:55,040
okay

1092
00:34:55,040 --> 00:34:57,680
all right but there was uh there was a

1093
00:34:57,680 --> 00:34:59,359
glitch happen within between right so

1094
00:34:59,359 --> 00:35:02,560
we can uh definitely reduce

1095
00:35:02,560 --> 00:35:04,560
then sometimes yeah yeah i don't know

1096
00:35:04,560 --> 00:35:06,640
what happened like you know when you got

1097
00:35:06,640 --> 00:35:09,119
out i thought you know maybe some intent

1098
00:35:09,119 --> 00:35:11,440
i was like uh if you would not have

1099
00:35:11,440 --> 00:35:13,119
called me i was like kept on presenting

1100
00:35:13,119 --> 00:35:15,839
i was like presenting out of the flow i

1101
00:35:15,839 --> 00:35:17,280
the connection got disconnected and all

1102
00:35:17,280 --> 00:35:19,359
those things thanks for doing that i

1103
00:35:19,359 --> 00:35:20,160
mean that's right

1104
00:35:20,160 --> 00:35:21,760
you don't you're using you know a

1105
00:35:21,760 --> 00:35:24,079
primary moment only right

1106
00:35:24,079 --> 00:35:28,240
yeah yeah so that's that's the reason

1107
00:35:28,640 --> 00:35:30,720
so usually uh yesterday one guy was

1108
00:35:30,720 --> 00:35:33,919
doing using

