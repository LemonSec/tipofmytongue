1
00:00:00,080 --> 00:00:01,760
thank you so much for tuning in uh this

2
00:00:01,760 --> 00:00:04,160
is my talk about my umc failed project

3
00:00:04,160 --> 00:00:05,839
uh we're going to start off by well i'm

4
00:00:05,839 --> 00:00:07,200
going to introduce myself first i'm

5
00:00:07,200 --> 00:00:08,559
going to talk a bit about ramsey i'm

6
00:00:08,559 --> 00:00:10,000
going to talk about the project how we

7
00:00:10,000 --> 00:00:11,360
can use it how you could integrate it

8
00:00:11,360 --> 00:00:12,719
with your operations

9
00:00:12,719 --> 00:00:14,400
and why i think it's a profitable

10
00:00:14,400 --> 00:00:16,400
project for the uh for the community for

11
00:00:16,400 --> 00:00:17,680
hall yeah

12
00:00:17,680 --> 00:00:19,279
so let me just start off by introducing

13
00:00:19,279 --> 00:00:21,439
myself so my name is melvin i go by the

14
00:00:21,439 --> 00:00:23,119
alias langley online

15
00:00:23,119 --> 00:00:25,039
i used to be a c-sharp developer worked

16
00:00:25,039 --> 00:00:26,800
a lot of with the

17
00:00:26,800 --> 00:00:29,760
azure cloud architecture a lot of the

18
00:00:29,760 --> 00:00:31,119
especially in the washer function

19
00:00:31,119 --> 00:00:32,719
storage account customs database

20
00:00:32,719 --> 00:00:34,719
stuff stuff like that i did a lot of

21
00:00:34,719 --> 00:00:35,920
integrations for

22
00:00:35,920 --> 00:00:38,320
customers in norway and then i wanted to

23
00:00:38,320 --> 00:00:40,079
move over to the offensive security side

24
00:00:40,079 --> 00:00:41,920
so i started as a penetration tester for

25
00:00:41,920 --> 00:00:44,160
pto cyber security in norway

26
00:00:44,160 --> 00:00:47,120
and i work there now i will be working

27
00:00:47,120 --> 00:00:48,640
there out of the year and then next year

28
00:00:48,640 --> 00:00:50,399
i will be moving on to versus deck which

29
00:00:50,399 --> 00:00:51,520
is super exciting so

30
00:00:51,520 --> 00:00:54,480
i'm super hyped for that some of my

31
00:00:54,480 --> 00:00:56,000
previous projects which you may or may

32
00:00:56,000 --> 00:00:56,399
not

33
00:00:56,399 --> 00:00:58,399
have heard of sharp collection sharp

34
00:00:58,399 --> 00:01:00,640
wrap blocker sharp dll proxy and better

35
00:01:00,640 --> 00:01:02,079
safety cats

36
00:01:02,079 --> 00:01:05,438
so she's short about me uh so that's

37
00:01:05,438 --> 00:01:07,439
i mean i mean obviously has been talked

38
00:01:07,439 --> 00:01:09,119
about so many times before so

39
00:01:09,119 --> 00:01:11,200
this is probably going to be something

40
00:01:11,200 --> 00:01:12,720
you've heard before from other talks but

41
00:01:12,720 --> 00:01:14,000
i just have to go through it just so

42
00:01:14,000 --> 00:01:15,600
everybody can tag along

43
00:01:15,600 --> 00:01:17,119
so let's start start off by talking

44
00:01:17,119 --> 00:01:19,040
about amazing so i'm say it's short for

45
00:01:19,040 --> 00:01:20,799
anti-malware scan interface and it

46
00:01:20,799 --> 00:01:22,880
allows applications and services to scan

47
00:01:22,880 --> 00:01:24,560
script-based content for possible

48
00:01:24,560 --> 00:01:26,560
malicious events

49
00:01:26,560 --> 00:01:28,000
it's released and maintained by

50
00:01:28,000 --> 00:01:30,079
microsoft and it's completely open

51
00:01:30,079 --> 00:01:31,840
for anybody to use so any application

52
00:01:31,840 --> 00:01:33,439
can call it then the

53
00:01:33,439 --> 00:01:35,439
service replication can register as

54
00:01:35,439 --> 00:01:37,280
what's called an anti-malware engine

55
00:01:37,280 --> 00:01:40,159
for amc and this may sound different

56
00:01:40,159 --> 00:01:41,600
from what you've heard before but

57
00:01:41,600 --> 00:01:44,079
in in a typical typical context an

58
00:01:44,079 --> 00:01:46,079
anti-malware engine is typical when

59
00:01:46,079 --> 00:01:47,759
typically windows defender

60
00:01:47,759 --> 00:01:49,920
and an application submitting data for

61
00:01:49,920 --> 00:01:52,399
mc2 scan is something like powershell or

62
00:01:52,399 --> 00:01:52,960
or

63
00:01:52,960 --> 00:01:55,520
with as of late c-sharp as well as

64
00:01:55,520 --> 00:01:58,158
vbscript

65
00:01:58,560 --> 00:02:01,119
and i think f-secure really sums it up

66
00:02:01,119 --> 00:02:02,320
in in a

67
00:02:02,320 --> 00:02:04,960
later blog post they created um so i'm

68
00:02:04,960 --> 00:02:05,360
going to

69
00:02:05,360 --> 00:02:07,439
go through that part of them took a lot

70
00:02:07,439 --> 00:02:09,360
a lot from them in this talk so

71
00:02:09,360 --> 00:02:11,599
um when powershell creates a process for

72
00:02:11,599 --> 00:02:13,440
paris powershell specifically

73
00:02:13,440 --> 00:02:15,599
when powershell creates a process mcdll

74
00:02:15,599 --> 00:02:16,959
is loaded from disk

75
00:02:16,959 --> 00:02:20,640
um and it's and functions in mcdl

76
00:02:20,640 --> 00:02:22,640
is exposed via system management

77
00:02:22,640 --> 00:02:23,920
automation so

78
00:02:23,920 --> 00:02:25,760
this the c sharp library system

79
00:02:25,760 --> 00:02:28,239
management automation is basically

80
00:02:28,239 --> 00:02:30,239
every core functionality in powershell

81
00:02:30,239 --> 00:02:31,360
itself

82
00:02:31,360 --> 00:02:33,280
and within that library there's a class

83
00:02:33,280 --> 00:02:35,440
called mcutils

84
00:02:35,440 --> 00:02:38,239
that's where it goes from c-sharp which

85
00:02:38,239 --> 00:02:40,160
is the management automation dll to

86
00:02:40,160 --> 00:02:42,879
native which is the mcd-level that's

87
00:02:42,879 --> 00:02:44,160
sort of the that's where

88
00:02:44,160 --> 00:02:47,040
mcdl has the the functions exposed into

89
00:02:47,040 --> 00:02:47,360
the

90
00:02:47,360 --> 00:02:50,480
csr c-sharp class and

91
00:02:50,480 --> 00:02:52,800
within omni.dll there's a function known

92
00:02:52,800 --> 00:02:54,239
as mcscan buffer

93
00:02:54,239 --> 00:02:55,840
it's essentially the function that is

94
00:02:55,840 --> 00:02:57,360
that is used to scan the script's

95
00:02:57,360 --> 00:02:58,319
content for

96
00:02:58,319 --> 00:03:01,680
potential malicious content so every

97
00:03:01,680 --> 00:03:02,879
command that you've ran

98
00:03:02,879 --> 00:03:06,159
in run in powershell will be supplied to

99
00:03:06,159 --> 00:03:06,879
that function

100
00:03:06,879 --> 00:03:08,800
and the content will be scanned and if

101
00:03:08,800 --> 00:03:10,319
it's deemed malicious

102
00:03:10,319 --> 00:03:12,879
it will be blocked so it's pretty much

103
00:03:12,879 --> 00:03:15,360
that simple right

104
00:03:15,360 --> 00:03:17,920
this may explain it a bit better so on

105
00:03:17,920 --> 00:03:20,159
the top we can see powershell vbscript

106
00:03:20,159 --> 00:03:23,120
potential or replication they all have

107
00:03:23,120 --> 00:03:25,920
some sort of integration with umc.dll

108
00:03:25,920 --> 00:03:27,519
right so they they can use many

109
00:03:27,519 --> 00:03:29,440
functions but two of the the core ones

110
00:03:29,440 --> 00:03:32,159
are on c scan buffer and mcscan string

111
00:03:32,159 --> 00:03:35,440
so so powershell will talk with mcdl

112
00:03:35,440 --> 00:03:37,760
through system management automation and

113
00:03:37,760 --> 00:03:39,920
db script and other applications

114
00:03:39,920 --> 00:03:43,040
uh can talk to mcdell directly natively

115
00:03:43,040 --> 00:03:44,720
or

116
00:03:44,720 --> 00:03:47,120
also use some sort of integration dll

117
00:03:47,120 --> 00:03:47,920
between

118
00:03:47,920 --> 00:03:51,440
to go from say c sharp 2 to native

119
00:03:51,440 --> 00:03:53,680
so information is provided to mc and

120
00:03:53,680 --> 00:03:55,200
then on the other side on the right side

121
00:03:55,200 --> 00:03:56,239
you can see that

122
00:03:56,239 --> 00:03:57,519
some sort of service has to be

123
00:03:57,519 --> 00:03:59,439
registered to to take a look at that

124
00:03:59,439 --> 00:04:00,400
information

125
00:04:00,400 --> 00:04:03,360
and deem it malicious or not so in like

126
00:04:03,360 --> 00:04:05,280
the the classical example in the vanilla

127
00:04:05,280 --> 00:04:05,760
cases

128
00:04:05,760 --> 00:04:08,239
that is windows defender so windows

129
00:04:08,239 --> 00:04:09,680
defender is registered as the

130
00:04:09,680 --> 00:04:11,040
anti-valver engine

131
00:04:11,040 --> 00:04:12,640
it takes a look at the data that mca

132
00:04:12,640 --> 00:04:14,640
provided and it tells i'm saying this is

133
00:04:14,640 --> 00:04:16,639
bad this is not bad and then

134
00:04:16,639 --> 00:04:19,120
the the execution flow continues or

135
00:04:19,120 --> 00:04:21,519
stops

136
00:04:21,918 --> 00:04:24,000
this is what it looks like so on the top

137
00:04:24,000 --> 00:04:26,000
you can see that i try to

138
00:04:26,000 --> 00:04:27,360
well i don't really try to run the

139
00:04:27,360 --> 00:04:29,280
command but i try to type something in

140
00:04:29,280 --> 00:04:31,520
i know that that string i typed in has

141
00:04:31,520 --> 00:04:32,880
signatures in mc

142
00:04:32,880 --> 00:04:35,360
or in defender so so that the data is

143
00:04:35,360 --> 00:04:36,720
submitted to mc

144
00:04:36,720 --> 00:04:38,639
defender takes a look look at it says

145
00:04:38,639 --> 00:04:41,199
nope and then that message is returned

146
00:04:41,199 --> 00:04:42,960
this script contains malicious content

147
00:04:42,960 --> 00:04:45,280
and has been blocked by android software

148
00:04:45,280 --> 00:04:47,680
so that's how that's how an mcblock

149
00:04:47,680 --> 00:04:49,759
would look like in powershell

150
00:04:49,759 --> 00:04:52,000
on the right side that's how an mc block

151
00:04:52,000 --> 00:04:53,600
should look like in in

152
00:04:53,600 --> 00:04:55,919
some office applications that message

153
00:04:55,919 --> 00:04:57,120
may vary some but

154
00:04:57,120 --> 00:05:00,080
looks something like that and on the

155
00:05:00,080 --> 00:05:01,360
left side you can see

156
00:05:01,360 --> 00:05:04,800
windows defender the logs that it gives

157
00:05:04,800 --> 00:05:07,520
one of the texts well in this case it

158
00:05:07,520 --> 00:05:09,600
was an amc tamper script and script that

159
00:05:09,600 --> 00:05:10,000
tries

160
00:05:10,000 --> 00:05:13,600
to get around mc but but it also

161
00:05:13,600 --> 00:05:15,280
basically takes the information that is

162
00:05:15,280 --> 00:05:17,280
private by mc and unlocks it and

163
00:05:17,280 --> 00:05:19,919
and blocks it so it shows up there as

164
00:05:19,919 --> 00:05:22,720
well not only in the power shelving

165
00:05:22,720 --> 00:05:26,080
um so when it comes to breaking i'm see

166
00:05:26,080 --> 00:05:28,639
this is nothing new this is this has

167
00:05:28,639 --> 00:05:30,479
been known for quite a while

168
00:05:30,479 --> 00:05:32,800
and it's at this point it's it's

169
00:05:32,800 --> 00:05:34,960
publicly used and known

170
00:05:34,960 --> 00:05:37,120
every day i would assume right by actors

171
00:05:37,120 --> 00:05:38,400
so uh

172
00:05:38,400 --> 00:05:40,240
the techniques to break up disabled as i

173
00:05:40,240 --> 00:05:42,240
said has been discovered

174
00:05:42,240 --> 00:05:44,720
they typically involve patching specific

175
00:05:44,720 --> 00:05:46,800
functions or variables within the loaded

176
00:05:46,800 --> 00:05:48,479
libraries that utilizes

177
00:05:48,479 --> 00:05:52,000
mcdell or mcdl itself so in the

178
00:05:52,000 --> 00:05:55,840
case of powershell it uh the bypasses

179
00:05:55,840 --> 00:05:58,000
the bypass we're going to look at later

180
00:05:58,000 --> 00:06:01,199
breaks a functionality in on this in the

181
00:06:01,199 --> 00:06:03,520
system management automation library but

182
00:06:03,520 --> 00:06:05,440
some of the c sharp bypasses break

183
00:06:05,440 --> 00:06:07,479
functionality in the actual native

184
00:06:07,479 --> 00:06:10,639
empty.dll library

185
00:06:10,639 --> 00:06:12,960
uh and and the main reason we are able

186
00:06:12,960 --> 00:06:15,199
to break or or look at mc at all is that

187
00:06:15,199 --> 00:06:16,880
it lives on the same level

188
00:06:16,880 --> 00:06:19,680
as the threat right so we when when

189
00:06:19,680 --> 00:06:20,560
amazon ll

190
00:06:20,560 --> 00:06:21,919
and central management automation

191
00:06:21,919 --> 00:06:23,680
operates in powershell.exe

192
00:06:23,680 --> 00:06:27,039
and we execute code in powershell.exe

193
00:06:27,039 --> 00:06:29,120
we technically have unconstrained and

194
00:06:29,120 --> 00:06:30,479
unrestricted access to

195
00:06:30,479 --> 00:06:32,479
its own memory space which means that we

196
00:06:32,479 --> 00:06:34,880
can we can mess with every library we

197
00:06:34,880 --> 00:06:36,000
loaded in that process

198
00:06:36,000 --> 00:06:38,560
right it's it's we can control it and

199
00:06:38,560 --> 00:06:39,360
that's

200
00:06:39,360 --> 00:06:41,360
at least from the to the integration to

201
00:06:41,360 --> 00:06:44,000
mc.dll that's one of the main issues

202
00:06:44,000 --> 00:06:46,400
uh it's on the it's on the same level we

203
00:06:46,400 --> 00:06:47,199
can reach it

204
00:06:47,199 --> 00:06:50,080
from from my attacker perspective unlike

205
00:06:50,080 --> 00:06:52,319
edr solutions and cm solutions right

206
00:06:52,319 --> 00:06:54,880
they operate on the current level many

207
00:06:54,880 --> 00:06:55,599
of the methods

208
00:06:55,599 --> 00:06:57,120
can be translated across powershell and

209
00:06:57,120 --> 00:06:58,880
vbscript and c sharp that is true for

210
00:06:58,880 --> 00:06:59,280
some

211
00:06:59,280 --> 00:07:02,479
but not for all and some of the

212
00:07:02,479 --> 00:07:03,280
contributors

213
00:07:03,280 --> 00:07:06,080
include you know adam xbn manifestation

214
00:07:06,080 --> 00:07:07,759
roster mouse and amazek

215
00:07:07,759 --> 00:07:10,960
so i think roster mouse and xbn both

216
00:07:10,960 --> 00:07:13,520
sort of had the c-sharp patch going

217
00:07:13,520 --> 00:07:15,120
where they would locate a specific

218
00:07:15,120 --> 00:07:17,440
function in mcdo.dll and patch the

219
00:07:17,440 --> 00:07:19,919
return code the opcode

220
00:07:19,919 --> 00:07:23,440
i know almasec ammonsec

221
00:07:23,440 --> 00:07:24,720
translated a lot of that over to

222
00:07:24,720 --> 00:07:26,960
powershell a manifestation

223
00:07:26,960 --> 00:07:30,000
is basically the the bringer of amazing

224
00:07:30,000 --> 00:07:33,039
powershell snippets that does um

225
00:07:33,039 --> 00:07:34,720
that also break something but in a

226
00:07:34,720 --> 00:07:36,479
slightly different way

227
00:07:36,479 --> 00:07:37,520
that's sort of what we're going to take

228
00:07:37,520 --> 00:07:40,240
a look at now so in in may 2016

229
00:07:40,240 --> 00:07:43,039
uh matt posted a tiny partial snippets

230
00:07:43,039 --> 00:07:44,000
that basically

231
00:07:44,000 --> 00:07:46,160
breaks mc for the entire powershell

232
00:07:46,160 --> 00:07:47,840
process that you ran it in

233
00:07:47,840 --> 00:07:50,080
so that you run it in so anything after

234
00:07:50,080 --> 00:07:51,280
that command

235
00:07:51,280 --> 00:07:53,919
um won't be detected as malicious even

236
00:07:53,919 --> 00:07:54,639
if it is

237
00:07:54,639 --> 00:07:57,840
it gives you free reign

238
00:07:57,840 --> 00:07:59,599
and what this this powershell snippet

239
00:07:59,599 --> 00:08:02,160
really does is that it takes a variable

240
00:08:02,160 --> 00:08:05,440
or property called um init failed uh

241
00:08:05,440 --> 00:08:08,000
in system management automation uh

242
00:08:08,000 --> 00:08:09,360
inside the class inside system

243
00:08:09,360 --> 00:08:11,680
management automation called mcutils

244
00:08:11,680 --> 00:08:13,680
and it's set that sets that property to

245
00:08:13,680 --> 00:08:15,280
through and

246
00:08:15,280 --> 00:08:18,400
within its own logic that will cause

247
00:08:18,400 --> 00:08:21,280
um the we can take a look at it on the

248
00:08:21,280 --> 00:08:22,960
next page but that will cause a specific

249
00:08:22,960 --> 00:08:23,919
function

250
00:08:23,919 --> 00:08:27,199
um to reserve a return result not

251
00:08:27,199 --> 00:08:28,080
detected

252
00:08:28,080 --> 00:08:30,560
for anything that that you put into it

253
00:08:30,560 --> 00:08:31,520
uh which effects

254
00:08:31,520 --> 00:08:33,440
effectively blinds power shell uh

255
00:08:33,440 --> 00:08:35,919
powershell integration with omc

256
00:08:35,919 --> 00:08:37,440
yeah as i said after you're on the

257
00:08:37,440 --> 00:08:39,599
command for forever

258
00:08:39,599 --> 00:08:41,679
so this is pretty pretty good gold let's

259
00:08:41,679 --> 00:08:43,039
take a look at how it looks

260
00:08:43,039 --> 00:08:45,920
in terms of code so in the as i say in

261
00:08:45,920 --> 00:08:46,240
the

262
00:08:46,240 --> 00:08:48,959
system management automation omcutils

263
00:08:48,959 --> 00:08:50,080
class

264
00:08:50,080 --> 00:08:54,320
there's a function called scan content

265
00:08:54,320 --> 00:08:55,760
this is the function that powershell

266
00:08:55,760 --> 00:08:57,519
calls every time

267
00:08:57,519 --> 00:09:00,320
it wants to look for malicious content

268
00:09:00,320 --> 00:09:00,800
every time

269
00:09:00,800 --> 00:09:01,760
every time we run the command in

270
00:09:01,760 --> 00:09:04,320
powershell it's piped through this

271
00:09:04,320 --> 00:09:06,240
this function and mc will determine if

272
00:09:06,240 --> 00:09:07,600
it's if it's malware or not

273
00:09:07,600 --> 00:09:10,080
whatever you're trying to run right so

274
00:09:10,080 --> 00:09:11,440
you see you have the input the string

275
00:09:11,440 --> 00:09:13,440
content input and then you have um

276
00:09:13,440 --> 00:09:16,399
a if if section here that says if the

277
00:09:16,399 --> 00:09:16,800
amps

278
00:09:16,800 --> 00:09:19,839
init fail variable is true i it will

279
00:09:19,839 --> 00:09:20,480
return

280
00:09:20,480 --> 00:09:23,040
result not detected and this is what we

281
00:09:23,040 --> 00:09:24,080
mess with so this is

282
00:09:24,080 --> 00:09:27,040
logic that already exists but the

283
00:09:27,040 --> 00:09:27,839
variable that it

284
00:09:27,839 --> 00:09:31,279
uh refers to is always set to false

285
00:09:31,279 --> 00:09:34,000
but so so math uses reflection to set

286
00:09:34,000 --> 00:09:35,360
this variable to through

287
00:09:35,360 --> 00:09:37,440
and therefore uh obviously will always

288
00:09:37,440 --> 00:09:40,240
return our results not detected

289
00:09:40,240 --> 00:09:43,920
and this is key right uh so

290
00:09:43,920 --> 00:09:45,760
if we take this bypass if i just copy

291
00:09:45,760 --> 00:09:47,440
paste this bypass from trader

292
00:09:47,440 --> 00:09:49,680
and i i paste it into the powershell

293
00:09:49,680 --> 00:09:51,680
window and try to run it it won't work

294
00:09:51,680 --> 00:09:55,200
right so as this is from 2016 it

295
00:09:55,200 --> 00:09:57,040
the functionality works but it's

296
00:09:57,040 --> 00:10:00,240
detected as as malicious obviously right

297
00:10:00,240 --> 00:10:03,440
so specifically this omcutil spark is

298
00:10:03,440 --> 00:10:05,600
has a signature detection

299
00:10:05,600 --> 00:10:08,399
and even if we attempt some basic in

300
00:10:08,399 --> 00:10:09,920
more confiscation commands

301
00:10:09,920 --> 00:10:13,040
uh it will still be detected now of

302
00:10:13,040 --> 00:10:13,760
course if you

303
00:10:13,760 --> 00:10:15,920
if you combine enough functionality in

304
00:10:15,920 --> 00:10:17,519
the more confiscation you will get

305
00:10:17,519 --> 00:10:18,560
around this

306
00:10:18,560 --> 00:10:20,959
but it will completely break size limits

307
00:10:20,959 --> 00:10:22,240
it will make the

308
00:10:22,240 --> 00:10:24,880
the the clean one line hamster bypass

309
00:10:24,880 --> 00:10:27,519
into a huge script which is

310
00:10:27,519 --> 00:10:31,040
it may in some cases not be really good

311
00:10:31,040 --> 00:10:32,480
so let's take a look at the obviously

312
00:10:32,480 --> 00:10:34,480
failed project that i sort of created to

313
00:10:34,480 --> 00:10:35,839
solve this and sort of main

314
00:10:35,839 --> 00:10:38,000
mainstream and finalize the way we use

315
00:10:38,000 --> 00:10:39,680
something bypasses so

316
00:10:39,680 --> 00:10:41,440
the mcfan project is a free online

317
00:10:41,440 --> 00:10:43,120
service that produces small powershell

318
00:10:43,120 --> 00:10:45,839
snippets that break or disable obscene

319
00:10:45,839 --> 00:10:49,200
each snippet is randomly uh but when you

320
00:10:49,200 --> 00:10:50,399
generate snippets

321
00:10:50,399 --> 00:10:52,880
um they are picked from a very small

322
00:10:52,880 --> 00:10:54,640
pool of variations

323
00:10:54,640 --> 00:10:57,279
and then they are applied a very custom

324
00:10:57,279 --> 00:10:58,720
or very specific set of

325
00:10:58,720 --> 00:11:01,120
obfuscation a tailored obfuscation as i

326
00:11:01,120 --> 00:11:02,000
say

327
00:11:02,000 --> 00:11:04,079
before it's given to you and this way

328
00:11:04,079 --> 00:11:06,240
you won't find any signature detections

329
00:11:06,240 --> 00:11:07,680
for these as of now

330
00:11:07,680 --> 00:11:10,720
and it will just simply work right so

331
00:11:10,720 --> 00:11:12,560
it's it's based it's an azure function

332
00:11:12,560 --> 00:11:15,200
as of now with c-sharp um it's an http

333
00:11:15,200 --> 00:11:16,560
trigger that's in the cloud that you can

334
00:11:16,560 --> 00:11:18,800
use so it's online at amc dot fail

335
00:11:18,800 --> 00:11:22,800
and the source code is also on get up um

336
00:11:22,800 --> 00:11:25,519
yeah it looks like this so you can go to

337
00:11:25,519 --> 00:11:26,959
mcdot fail

338
00:11:26,959 --> 00:11:28,320
and then you can click in right and you

339
00:11:28,320 --> 00:11:30,240
will be given some snippets

340
00:11:30,240 --> 00:11:32,240
different snippets of code that they

341
00:11:32,240 --> 00:11:33,600
they should never be the same the

342
00:11:33,600 --> 00:11:35,040
signature should shouldn't collide of

343
00:11:35,040 --> 00:11:36,399
course at some point they will collide

344
00:11:36,399 --> 00:11:37,360
but

345
00:11:37,360 --> 00:11:40,000
they shouldn't and they will get get

346
00:11:40,000 --> 00:11:40,640
past

347
00:11:40,640 --> 00:11:42,720
contingent detections and and patch

348
00:11:42,720 --> 00:11:45,600
empty for you for the current process

349
00:11:45,600 --> 00:11:47,680
and let's talk about how does how does

350
00:11:47,680 --> 00:11:48,880
this work

351
00:11:48,880 --> 00:11:51,360
it isn't really advanced at all i like

352
00:11:51,360 --> 00:11:52,480
to keep it kiss

353
00:11:52,480 --> 00:11:54,880
keep it simple stupid i mean there's no

354
00:11:54,880 --> 00:11:56,399
reason to make this more complicated

355
00:11:56,399 --> 00:11:58,000
than it is

356
00:11:58,000 --> 00:12:00,959
so there's sort of two key elements um

357
00:12:00,959 --> 00:12:01,440
each

358
00:12:01,440 --> 00:12:03,920
snippet of or each variation of amc

359
00:12:03,920 --> 00:12:05,360
bypass that it uses

360
00:12:05,360 --> 00:12:07,920
i've picked out keywords that i know are

361
00:12:07,920 --> 00:12:09,360
signature detected

362
00:12:09,360 --> 00:12:11,600
so one of one of those snippets could be

363
00:12:11,600 --> 00:12:12,800
obviously in it failed

364
00:12:12,800 --> 00:12:14,639
which i know a defender hates that's

365
00:12:14,639 --> 00:12:16,639
like a really hard hard little signature

366
00:12:16,639 --> 00:12:17,040
uh

367
00:12:17,040 --> 00:12:20,720
signature snippet and then i also i

368
00:12:20,720 --> 00:12:22,320
take out those keywords and i obscure

369
00:12:22,320 --> 00:12:24,480
them or encode them in some way

370
00:12:24,480 --> 00:12:26,320
and i also do that to some random

371
00:12:26,320 --> 00:12:27,760
keywords in the same

372
00:12:27,760 --> 00:12:31,760
technique sort of to create variation

373
00:12:31,760 --> 00:12:34,160
and i try to also pick out the keywords

374
00:12:34,160 --> 00:12:35,040
that i know

375
00:12:35,040 --> 00:12:38,399
are specific for the technique

376
00:12:38,399 --> 00:12:41,200
uh because there's no really really no

377
00:12:41,200 --> 00:12:42,959
need to pick out keywords that are super

378
00:12:42,959 --> 00:12:44,240
generic like a

379
00:12:44,240 --> 00:12:45,839
defender can't create signature

380
00:12:45,839 --> 00:12:47,760
detections for something that is used in

381
00:12:47,760 --> 00:12:49,200
a non-malicious way

382
00:12:49,200 --> 00:12:50,880
that would be way too aggressive and it

383
00:12:50,880 --> 00:12:52,639
would break a lot of existing

384
00:12:52,639 --> 00:12:54,639
legitimate applications so they have to

385
00:12:54,639 --> 00:12:56,240
be very careful when they when they pick

386
00:12:56,240 --> 00:12:58,240
up signatures that's why i also only

387
00:12:58,240 --> 00:12:59,519
take a look at the keywords i know are

388
00:12:59,519 --> 00:13:02,880
specific for the mc bypasses

389
00:13:02,880 --> 00:13:05,279
sounds simple it is simple so these are

390
00:13:05,279 --> 00:13:07,519
the three main encoding methods that i

391
00:13:07,519 --> 00:13:08,560
sort of use

392
00:13:08,560 --> 00:13:10,800
within each other and combined so you

393
00:13:10,800 --> 00:13:12,240
have html encoding

394
00:13:12,240 --> 00:13:14,240
you have a combination of shar and byte

395
00:13:14,240 --> 00:13:15,760
encoding and then you have

396
00:13:15,760 --> 00:13:18,880
diacritics if i can say that right

397
00:13:18,880 --> 00:13:20,720
so so for html encoding it's pretty

398
00:13:20,720 --> 00:13:22,240
straightforward

399
00:13:22,240 --> 00:13:24,720
it takes the yeah brings it forward

400
00:13:24,720 --> 00:13:27,200
there uh for the shar and byte encoding

401
00:13:27,200 --> 00:13:28,959
uh it's get it gets a bit more

402
00:13:28,959 --> 00:13:30,240
interesting so

403
00:13:30,240 --> 00:13:33,279
uh the shar the char sort of

404
00:13:33,279 --> 00:13:37,360
array that we get that out of um

405
00:13:37,360 --> 00:13:40,399
is it takes an input as an end value

406
00:13:40,399 --> 00:13:41,839
that is the ascii value that we're

407
00:13:41,839 --> 00:13:44,240
looking to get so

408
00:13:44,240 --> 00:13:46,720
so a capital a the ascii value for a

409
00:13:46,720 --> 00:13:50,560
capital a is 122 minus 57.

410
00:13:50,560 --> 00:13:52,240
i'm not gonna can't do that in my head

411
00:13:52,240 --> 00:13:54,320
right now no way but but that's the

412
00:13:54,320 --> 00:13:56,320
ascii value for a capital a and the

413
00:13:56,320 --> 00:13:59,040
the ascii value for uh lowercase m is

414
00:13:59,040 --> 00:14:01,040
184 minus 75

415
00:14:01,040 --> 00:14:02,880
and the list goes on right so it sort of

416
00:14:02,880 --> 00:14:05,360
randomizes the ascii value that the

417
00:14:05,360 --> 00:14:08,079
the char represents uh with both minus

418
00:14:08,079 --> 00:14:08,880
plus

419
00:14:08,880 --> 00:14:12,560
division and multiplication and

420
00:14:12,560 --> 00:14:15,360
in that way we're able to sort of encode

421
00:14:15,360 --> 00:14:16,160
i guess uh

422
00:14:16,160 --> 00:14:18,320
the umc keyboard and not having to write

423
00:14:18,320 --> 00:14:19,440
it plainly

424
00:14:19,440 --> 00:14:22,560
and i'm saying it's fine with that uh

425
00:14:22,560 --> 00:14:25,680
for for diacritics uh it's almost the

426
00:14:25,680 --> 00:14:27,360
same so

427
00:14:27,360 --> 00:14:28,880
basically what we're doing is that we're

428
00:14:28,880 --> 00:14:31,600
normalizing

429
00:14:31,600 --> 00:14:34,880
you i'm not so sure about the naming for

430
00:14:34,880 --> 00:14:35,600
it but

431
00:14:35,600 --> 00:14:38,320
basically the the weird capital or

432
00:14:38,320 --> 00:14:42,399
lowercase a's and o's that we find

433
00:14:42,480 --> 00:14:45,120
are one of many but when normalized they

434
00:14:45,120 --> 00:14:46,800
go back to a single o

435
00:14:46,800 --> 00:14:48,880
right so so when i do the obfuscation

436
00:14:48,880 --> 00:14:49,920
for this if you take a look at the

437
00:14:49,920 --> 00:14:50,720
source code

438
00:14:50,720 --> 00:14:52,880
i okay okay i have a capital a let's

439
00:14:52,880 --> 00:14:55,839
find and pick out some random other

440
00:14:55,839 --> 00:14:57,920
foreign language capital a's for example

441
00:14:57,920 --> 00:14:59,920
you have the one with the two dots

442
00:14:59,920 --> 00:15:02,000
that's one variation and they have one

443
00:15:02,000 --> 00:15:02,959
with the singles

444
00:15:02,959 --> 00:15:05,279
slash on top that's one variation and

445
00:15:05,279 --> 00:15:07,360
both of these when normalized

446
00:15:07,360 --> 00:15:10,160
with powerful goes back to capital a and

447
00:15:10,160 --> 00:15:10,720
sort of

448
00:15:10,720 --> 00:15:12,560
you randomize that string and when

449
00:15:12,560 --> 00:15:13,920
normalized again it goes back to the

450
00:15:13,920 --> 00:15:15,360
clean version

451
00:15:15,360 --> 00:15:17,680
um and uh if you take a look at the

452
00:15:17,680 --> 00:15:19,279
source code that's supposed to get up

453
00:15:19,279 --> 00:15:22,639
uh get up um it it uses these

454
00:15:22,639 --> 00:15:24,959
within each other so it's not it's not

455
00:15:24,959 --> 00:15:26,959
always just like a single char encoding

456
00:15:26,959 --> 00:15:27,279
or

457
00:15:27,279 --> 00:15:28,800
only by the encoding as you can see here

458
00:15:28,800 --> 00:15:30,639
we have a

459
00:15:30,639 --> 00:15:33,120
a byte encoding within a sharing coding

460
00:15:33,120 --> 00:15:36,320
to sort of mix it up a bit

461
00:15:36,320 --> 00:15:38,320
uh and this is profitable in terms of

462
00:15:38,320 --> 00:15:40,079
gaining around signature detection and

463
00:15:40,079 --> 00:15:41,360
getting obviously patched

464
00:15:41,360 --> 00:15:43,519
and one as i said earlier when amsa is

465
00:15:43,519 --> 00:15:45,279
patched you can do whatever you want

466
00:15:45,279 --> 00:15:49,040
for a certain degree at least so um

467
00:15:49,040 --> 00:15:50,800
on the top picture here you can see that

468
00:15:50,800 --> 00:15:52,399
i try to write out

469
00:15:52,399 --> 00:15:54,639
in powershell defender hates umc in it

470
00:15:54,639 --> 00:15:55,519
failed

471
00:15:55,519 --> 00:15:58,800
umc picks this up uh gets it in and the

472
00:15:58,800 --> 00:15:59,839
defender says nope

473
00:15:59,839 --> 00:16:01,600
and then you get back here the script

474
00:16:01,600 --> 00:16:03,040
contains simulations content blah blah

475
00:16:03,040 --> 00:16:03,920
blah

476
00:16:03,920 --> 00:16:06,800
and then you run the umc bypass that

477
00:16:06,800 --> 00:16:09,120
that goes fine uh you don't get an error

478
00:16:09,120 --> 00:16:09,920
when you run that

479
00:16:09,920 --> 00:16:12,079
and then you try to run the same command

480
00:16:12,079 --> 00:16:13,759
that you couldn't run earlier and it

481
00:16:13,759 --> 00:16:14,160
works

482
00:16:14,160 --> 00:16:15,680
you can you can run it so i'm say has

483
00:16:15,680 --> 00:16:17,920
successfully been patched

484
00:16:17,920 --> 00:16:20,480
um and this these are one of many use

485
00:16:20,480 --> 00:16:22,480
cases that i can think of in terms of

486
00:16:22,480 --> 00:16:23,279
both

487
00:16:23,279 --> 00:16:26,000
on on engagements on ctfs and labs as

488
00:16:26,000 --> 00:16:27,600
well as from an operational

489
00:16:27,600 --> 00:16:29,680
perspective so the easiest way would be

490
00:16:29,680 --> 00:16:30,880
just to copy and paste it from the

491
00:16:30,880 --> 00:16:31,839
website

492
00:16:31,839 --> 00:16:33,680
statically copied into whatever payload

493
00:16:33,680 --> 00:16:35,199
you're trying to deploy and you're fine

494
00:16:35,199 --> 00:16:36,160
right

495
00:16:36,160 --> 00:16:38,160
i guess if you want to to mask in with

496
00:16:38,160 --> 00:16:39,920
payloads you can also use the api

497
00:16:39,920 --> 00:16:41,279
directly

498
00:16:41,279 --> 00:16:44,240
or if you're in the ctf for lab scenario

499
00:16:44,240 --> 00:16:44,800
when

500
00:16:44,800 --> 00:16:46,320
when you're on the target machine you

501
00:16:46,320 --> 00:16:49,120
can just call the api directly

502
00:16:49,120 --> 00:16:50,560
now of course you shouldn't do this all

503
00:16:50,560 --> 00:16:53,040
engagements this is

504
00:16:53,040 --> 00:16:55,680
not great i mean uh in terms of objects

505
00:16:55,680 --> 00:16:56,399
contrary

506
00:16:56,399 --> 00:16:58,399
considerations you have no idea what

507
00:16:58,399 --> 00:16:59,839
sort of code you're actually running on

508
00:16:59,839 --> 00:17:01,199
the target machine here

509
00:17:01,199 --> 00:17:03,600
because you're calling my api and you're

510
00:17:03,600 --> 00:17:05,679
receiving an mc bypass that you are

511
00:17:05,679 --> 00:17:06,959
invoking

512
00:17:06,959 --> 00:17:08,799
but you can see it and you can't confirm

513
00:17:08,799 --> 00:17:10,160
what you're getting so this is a huge

514
00:17:10,160 --> 00:17:11,599
fail in terms of op second you should

515
00:17:11,599 --> 00:17:13,839
never do this on on the target machine

516
00:17:13,839 --> 00:17:15,599
on the real engagement but in terms of

517
00:17:15,599 --> 00:17:17,039
ctfs and labs it's a

518
00:17:17,039 --> 00:17:19,520
it's an easy way to get around mc right

519
00:17:19,520 --> 00:17:22,160
so after after that is run you can also

520
00:17:22,160 --> 00:17:23,760
type the same command and it won't be

521
00:17:23,760 --> 00:17:25,760
blocked

522
00:17:25,760 --> 00:17:28,160
and there are some other couple of

523
00:17:28,160 --> 00:17:29,520
interesting integrations that you could

524
00:17:29,520 --> 00:17:30,080
do

525
00:17:30,080 --> 00:17:32,000
so so the code is c sharp so you can

526
00:17:32,000 --> 00:17:33,520
easily take this out and

527
00:17:33,520 --> 00:17:35,520
add it or modify it make it better and

528
00:17:35,520 --> 00:17:38,000
add it to c two frameworks like covenant

529
00:17:38,000 --> 00:17:40,720
or uh raster mouse ups coming is it

530
00:17:40,720 --> 00:17:42,720
sharp c2 for example

531
00:17:42,720 --> 00:17:45,280
to get a uh i'm seeing bypass going for

532
00:17:45,280 --> 00:17:46,559
powershell if you have a powershell

533
00:17:46,559 --> 00:17:47,520
stager

534
00:17:47,520 --> 00:17:50,240
um you can also use it you can spin up

535
00:17:50,240 --> 00:17:52,080
the api yourself and then

536
00:17:52,080 --> 00:17:53,760
talk to directly privately you can

537
00:17:53,760 --> 00:17:55,520
translate the code to

538
00:17:55,520 --> 00:17:57,679
to python or javascript the best would

539
00:17:57,679 --> 00:17:59,679
be to have this as javascript on the

540
00:17:59,679 --> 00:18:01,600
client side so nobody can sort of wonder

541
00:18:01,600 --> 00:18:02,000
what's

542
00:18:02,000 --> 00:18:03,919
actually running in the back end but

543
00:18:03,919 --> 00:18:06,080
when i created this it was c-sharp since

544
00:18:06,080 --> 00:18:07,840
i'm the most familiar with that

545
00:18:07,840 --> 00:18:09,520
and you can integrate it all forms of

546
00:18:09,520 --> 00:18:12,080
ways with c2 frameworks or with

547
00:18:12,080 --> 00:18:13,600
other specific solutions that you might

548
00:18:13,600 --> 00:18:15,200
want to use it for

549
00:18:15,200 --> 00:18:18,799
so yeah go go check it out on github and

550
00:18:18,799 --> 00:18:20,080
that's basically it thank you so much

551
00:18:20,080 --> 00:18:22,320
for your time questions all up

552
00:18:22,320 --> 00:18:27,439
hit me

