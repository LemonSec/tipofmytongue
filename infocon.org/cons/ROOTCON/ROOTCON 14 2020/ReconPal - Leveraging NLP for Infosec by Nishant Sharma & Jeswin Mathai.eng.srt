1
00:00:00,000 --> 00:00:02,159
hello everyone first of all thank you

2
00:00:02,159 --> 00:00:03,760
root con for having us

3
00:00:03,760 --> 00:00:05,759
and i really hope that the viewers will

4
00:00:05,759 --> 00:00:07,200
enjoy the session

5
00:00:07,200 --> 00:00:09,679
today i will talk about recon power so

6
00:00:09,679 --> 00:00:11,200
before i get started a quick

7
00:00:11,200 --> 00:00:12,880
introduction about us

8
00:00:12,880 --> 00:00:14,880
my name is jasmine mathai i've been

9
00:00:14,880 --> 00:00:16,480
working as a security researcher at

10
00:00:16,480 --> 00:00:17,920
pentester academy for

11
00:00:17,920 --> 00:00:20,320
more than two years now i completed my

12
00:00:20,320 --> 00:00:22,800
bachelor's from triple i t b of nature

13
00:00:22,800 --> 00:00:24,800
my research work has been published at

14
00:00:24,800 --> 00:00:27,119
various conferences such as black at usa

15
00:00:27,119 --> 00:00:28,560
asia arsenal

16
00:00:28,560 --> 00:00:31,599
from usc china demo labs last year i

17
00:00:31,599 --> 00:00:33,120
also gave a research talk at

18
00:00:33,120 --> 00:00:35,600
defcon china and root con philippines

19
00:00:35,600 --> 00:00:36,480
apart from this

20
00:00:36,480 --> 00:00:38,719
i was the co-trainer in various of our

21
00:00:38,719 --> 00:00:40,160
trainings in

22
00:00:40,160 --> 00:00:43,360
blackhead asia hitb amsterdam hrtb

23
00:00:43,360 --> 00:00:45,920
sec new zealand awesome and root con

24
00:00:45,920 --> 00:00:47,920
philippines

25
00:00:47,920 --> 00:00:50,640
about nishant he's the r d manager and

26
00:00:50,640 --> 00:00:52,559
lead trainer at pentester academy

27
00:00:52,559 --> 00:00:54,960
before joining pentester academy he was

28
00:00:54,960 --> 00:00:56,320
a firmware developer

29
00:00:56,320 --> 00:00:58,800
and has worked on enterprise wi-fi

30
00:00:58,800 --> 00:00:59,840
access points and

31
00:00:59,840 --> 00:01:02,079
wireless intrusion prevention system

32
00:01:02,079 --> 00:01:03,039
sensors

33
00:01:03,039 --> 00:01:05,119
he has a master's degree in infosec and

34
00:01:05,119 --> 00:01:06,479
has published his

35
00:01:06,479 --> 00:01:08,320
work in conferences such as black hat

36
00:01:08,320 --> 00:01:10,880
usa asia defcon usa china

37
00:01:10,880 --> 00:01:13,119
hitb amsterdam and couple of other

38
00:01:13,119 --> 00:01:14,799
venues

39
00:01:14,799 --> 00:01:16,799
he was the lead trainer at our trainings

40
00:01:16,799 --> 00:01:19,439
in black hat hitb

41
00:01:19,439 --> 00:01:21,520
was new zealand day and he's also

42
00:01:21,520 --> 00:01:23,360
conducted a multiple

43
00:01:23,360 --> 00:01:26,560
trainings for private clients

44
00:01:26,560 --> 00:01:28,880
sarthaksani is a security researcher at

45
00:01:28,880 --> 00:01:30,320
pentester academy

46
00:01:30,320 --> 00:01:32,400
he has a bachelor's degree from graphic

47
00:01:32,400 --> 00:01:33,600
nru university

48
00:01:33,600 --> 00:01:36,560
and he has created many tools and bots

49
00:01:36,560 --> 00:01:37,680
to

50
00:01:37,680 --> 00:01:41,840
ease the process of contesting

51
00:01:42,000 --> 00:01:44,079
so these are the logos of conferences

52
00:01:44,079 --> 00:01:45,600
where we have either

53
00:01:45,600 --> 00:01:47,600
published our work or conducted a

54
00:01:47,600 --> 00:01:49,280
training

55
00:01:49,280 --> 00:01:51,200
all three of us work for pentester

56
00:01:51,200 --> 00:01:53,360
academy fantastic academy is a course

57
00:01:53,360 --> 00:01:54,159
library

58
00:01:54,159 --> 00:01:56,000
where we have over 40 plus highly

59
00:01:56,000 --> 00:01:57,920
technical course

60
00:01:57,920 --> 00:02:00,079
and attack defense is our lab platform

61
00:02:00,079 --> 00:02:03,040
where we have over 1900 challenges

62
00:02:03,040 --> 00:02:04,719
the best part about attack defense is

63
00:02:04,719 --> 00:02:06,799
everything works from the browser

64
00:02:06,799 --> 00:02:08,800
so as long as your device supports a web

65
00:02:08,800 --> 00:02:10,800
browser you'll be able to play labs from

66
00:02:10,800 --> 00:02:11,840
it

67
00:02:11,840 --> 00:02:13,840
and every student gets a dedicated

68
00:02:13,840 --> 00:02:15,120
environment so that

69
00:02:15,120 --> 00:02:16,959
there is no one else on the network it's

70
00:02:16,959 --> 00:02:18,640
just you

71
00:02:18,640 --> 00:02:21,760
so now let's take a look at recon pal so

72
00:02:21,760 --> 00:02:22,319
on 11th

73
00:02:22,319 --> 00:02:26,640
june 2020 open ai released gpt3

74
00:02:26,640 --> 00:02:29,360
and it surprised the whole world it made

75
00:02:29,360 --> 00:02:30,239
us realize

76
00:02:30,239 --> 00:02:32,959
the enormous progress ai has made in the

77
00:02:32,959 --> 00:02:34,480
past couple of years

78
00:02:34,480 --> 00:02:37,680
and gpt3 demonstrated it really well

79
00:02:37,680 --> 00:02:39,760
so we are in the age of automation right

80
00:02:39,760 --> 00:02:41,440
whenever we find something difficult we

81
00:02:41,440 --> 00:02:42,800
try to automate it

82
00:02:42,800 --> 00:02:44,560
so one of the things which we felt was

83
00:02:44,560 --> 00:02:46,720
difficult in pen testing

84
00:02:46,720 --> 00:02:49,200
was now since there are over thousands

85
00:02:49,200 --> 00:02:49,760
of tool

86
00:02:49,760 --> 00:02:51,760
and each tool has enormous number of

87
00:02:51,760 --> 00:02:53,519
options some tools even have over

88
00:02:53,519 --> 00:02:55,280
hundreds of options

89
00:02:55,280 --> 00:02:57,760
so it is very difficult to remember all

90
00:02:57,760 --> 00:02:59,519
of the tools their option

91
00:02:59,519 --> 00:03:01,599
and to get everything right during a pen

92
00:03:01,599 --> 00:03:04,159
testing is getting difficult

93
00:03:04,159 --> 00:03:06,000
so how can we ease the process or at

94
00:03:06,000 --> 00:03:08,400
least is a part of the pen testing

95
00:03:08,400 --> 00:03:09,280
process

96
00:03:09,280 --> 00:03:11,200
so this is where gp83 comes into the

97
00:03:11,200 --> 00:03:12,400
picture

98
00:03:12,400 --> 00:03:16,319
so now with recon pal all the

99
00:03:16,319 --> 00:03:18,959
so now with the recon pal all what the

100
00:03:18,959 --> 00:03:20,159
user has to do

101
00:03:20,159 --> 00:03:22,400
is type in a text regarding what they

102
00:03:22,400 --> 00:03:23,440
want to do

103
00:03:23,440 --> 00:03:26,959
and reconfile will make it happen so

104
00:03:26,959 --> 00:03:29,360
this way we have created a generic way

105
00:03:29,360 --> 00:03:31,040
of using various tools

106
00:03:31,040 --> 00:03:33,120
so this is beginner friendly so if

107
00:03:33,120 --> 00:03:34,640
anyone is getting started with pen

108
00:03:34,640 --> 00:03:35,440
testing

109
00:03:35,440 --> 00:03:37,360
all they have to do is type in a text

110
00:03:37,360 --> 00:03:38,959
regarding whether they want to scan

111
00:03:38,959 --> 00:03:42,000
or what they want to do and

112
00:03:42,000 --> 00:03:44,080
the recon pal will automatically figure

113
00:03:44,080 --> 00:03:46,239
out which tools are to be used

114
00:03:46,239 --> 00:03:49,200
and what to do next so now let's take a

115
00:03:49,200 --> 00:03:50,080
look at the

116
00:03:50,080 --> 00:03:52,720
components used so we have used open

117
00:03:52,720 --> 00:03:53,280
eyes

118
00:03:53,280 --> 00:03:56,799
gpd3 showdown api telegram bot

119
00:03:56,799 --> 00:03:58,560
and we have packaged everything in form

120
00:03:58,560 --> 00:04:00,640
of docker contains so we'll take a look

121
00:04:00,640 --> 00:04:02,400
at why we have used each components one

122
00:04:02,400 --> 00:04:04,480
by one

123
00:04:04,480 --> 00:04:07,040
so before we get into openai's gpt3 a

124
00:04:07,040 --> 00:04:07,599
little bit

125
00:04:07,599 --> 00:04:11,040
about openai openya is a ai research and

126
00:04:11,040 --> 00:04:12,239
deployment company

127
00:04:12,239 --> 00:04:14,239
it was founded by elon musk and sam

128
00:04:14,239 --> 00:04:16,560
altman the popular projects

129
00:04:16,560 --> 00:04:18,160
for which the company is known for is

130
00:04:18,160 --> 00:04:20,399
gpt3 uh which we'll take a look at in a

131
00:04:20,399 --> 00:04:21,759
couple of minutes

132
00:04:21,759 --> 00:04:25,280
jukebox so jukebox is a neural network

133
00:04:25,280 --> 00:04:28,160
which can generate music gpt2 was the

134
00:04:28,160 --> 00:04:30,479
predecessor of gpt3

135
00:04:30,479 --> 00:04:32,880
so when gpt3 was released it was termed

136
00:04:32,880 --> 00:04:33,759
as the most

137
00:04:33,759 --> 00:04:37,520
powerful language model ever it had 175

138
00:04:37,520 --> 00:04:40,639
billion parameters which was a great

139
00:04:40,639 --> 00:04:41,360
increase

140
00:04:41,360 --> 00:04:43,919
compared to other language models and

141
00:04:43,919 --> 00:04:46,160
people used jpt3 to create

142
00:04:46,160 --> 00:04:48,400
amazing applications so few of the

143
00:04:48,400 --> 00:04:50,240
applications which people created

144
00:04:50,240 --> 00:04:51,280
included

145
00:04:51,280 --> 00:04:54,320
an application where the user only has

146
00:04:54,320 --> 00:04:55,680
to enter the text

147
00:04:55,680 --> 00:04:58,000
for what they wanted to create and it

148
00:04:58,000 --> 00:04:59,840
automatically generated the required

149
00:04:59,840 --> 00:05:01,199
code for it

150
00:05:01,199 --> 00:05:03,360
similarly a developer created a plugin

151
00:05:03,360 --> 00:05:04,560
for figma

152
00:05:04,560 --> 00:05:06,320
where the user can enter what they

153
00:05:06,320 --> 00:05:08,560
wanted to design and it automatically

154
00:05:08,560 --> 00:05:12,320
created the design gpt3 was used to

155
00:05:12,320 --> 00:05:15,520
write out poems complete text it was

156
00:05:15,520 --> 00:05:17,360
used to generate complex mathematical

157
00:05:17,360 --> 00:05:19,120
expressions from text

158
00:05:19,120 --> 00:05:21,120
it was used to fill missing data in

159
00:05:21,120 --> 00:05:22,560
spreadsheets

160
00:05:22,560 --> 00:05:25,919
and it could even generate simple text

161
00:05:25,919 --> 00:05:29,520
by processing legal text and vice versa

162
00:05:29,520 --> 00:05:31,680
comparison is one of the best way to

163
00:05:31,680 --> 00:05:34,160
realize something's greatness right

164
00:05:34,160 --> 00:05:36,720
so this is a comparison of gpt3 and

165
00:05:36,720 --> 00:05:38,240
other language models

166
00:05:38,240 --> 00:05:42,320
so gpt2 had 1.3 billion parameters

167
00:05:42,320 --> 00:05:46,240
nvds megatron had 8.3 billion parameters

168
00:05:46,240 --> 00:05:49,759
google's t5 had 11 billion parameters

169
00:05:49,759 --> 00:05:52,720
and microsoft turing energy had 17

170
00:05:52,720 --> 00:05:54,320
billion parameters

171
00:05:54,320 --> 00:05:58,479
whereas another hand gp3 had 175 billion

172
00:05:58,479 --> 00:06:01,680
parameters which was over 10 times

173
00:06:01,680 --> 00:06:04,479
in increase of parameters compared to

174
00:06:04,479 --> 00:06:05,440
the microsoft

175
00:06:05,440 --> 00:06:07,919
turing energy which was previously known

176
00:06:07,919 --> 00:06:08,639
as the

177
00:06:08,639 --> 00:06:12,000
most powerful language model so now

178
00:06:12,000 --> 00:06:13,360
let's take a look at the change in

179
00:06:13,360 --> 00:06:15,199
accuracy which occurred due to increase

180
00:06:15,199 --> 00:06:16,800
in parameters

181
00:06:16,800 --> 00:06:19,440
so in case of gpt3 we had 1.3 billion

182
00:06:19,440 --> 00:06:20,240
parameters

183
00:06:20,240 --> 00:06:23,600
and accuracy was here and in case of

184
00:06:23,600 --> 00:06:24,639
gpt3

185
00:06:24,639 --> 00:06:27,440
we have 175 billion parameters as you

186
00:06:27,440 --> 00:06:28,880
can see the accuracy is

187
00:06:28,880 --> 00:06:32,080
much closer to that of human and this is

188
00:06:32,080 --> 00:06:32,479
why

189
00:06:32,479 --> 00:06:37,360
gpt3 had such a huge impact so far

190
00:06:37,600 --> 00:06:39,199
so the second component which we have

191
00:06:39,199 --> 00:06:40,960
used is showdown

192
00:06:40,960 --> 00:06:43,520
so showdown is a search engine for iot

193
00:06:43,520 --> 00:06:44,400
devices

194
00:06:44,400 --> 00:06:47,440
machines and whatnot so now let's take a

195
00:06:47,440 --> 00:06:49,680
look at how to use showdown to find

196
00:06:49,680 --> 00:06:52,160
machines

197
00:06:53,120 --> 00:06:55,360
so let now let's say we want to find

198
00:06:55,360 --> 00:06:57,039
machines which have

199
00:06:57,039 --> 00:06:59,840
exposed docker tcp socket so what we are

200
00:06:59,840 --> 00:07:01,360
going to do is search for port

201
00:07:01,360 --> 00:07:05,120
2375 which is the conventional tcp

202
00:07:05,120 --> 00:07:08,240
docker socket port and head search

203
00:07:08,240 --> 00:07:10,720
and we'll notice we have found 50 000

204
00:07:10,720 --> 00:07:11,599
result

205
00:07:11,599 --> 00:07:14,319
similarly if you want to find 14

206
00:07:14,319 --> 00:07:15,440
instances

207
00:07:15,440 --> 00:07:18,080
you can simply search by name and put

208
00:07:18,080 --> 00:07:20,000
will get the result

209
00:07:20,000 --> 00:07:21,919
similarly if you want to find docker

210
00:07:21,919 --> 00:07:24,560
registry

211
00:07:24,960 --> 00:07:29,520
we can search by headers as well

212
00:07:29,759 --> 00:07:33,120
so this using showdown we can search for

213
00:07:33,120 --> 00:07:37,280
vulnerable machines on the internet

214
00:07:37,280 --> 00:07:39,840
so the reason we chose showdown was

215
00:07:39,840 --> 00:07:40,319
because

216
00:07:40,319 --> 00:07:43,280
it also has a api which you can use to

217
00:07:43,280 --> 00:07:45,840
query and find out vulnerable machines

218
00:07:45,840 --> 00:07:49,119
and vulnerable services

219
00:07:49,759 --> 00:07:51,599
then we use telegram bot because

220
00:07:51,599 --> 00:07:53,919
telegram has a desktop application for

221
00:07:53,919 --> 00:07:54,800
all platform

222
00:07:54,800 --> 00:07:56,960
the python support is really amazing it

223
00:07:56,960 --> 00:08:00,639
is free and it's very easy to set up

224
00:08:00,639 --> 00:08:02,639
and to package everything we have used

225
00:08:02,639 --> 00:08:04,160
docker because

226
00:08:04,160 --> 00:08:06,560
a traditional script might create

227
00:08:06,560 --> 00:08:07,199
problem

228
00:08:07,199 --> 00:08:09,520
on your system whereas in case of docker

229
00:08:09,520 --> 00:08:11,360
all you have to do is install docker

230
00:08:11,360 --> 00:08:13,759
pull our images and that's it and the

231
00:08:13,759 --> 00:08:14,560
best part is

232
00:08:14,560 --> 00:08:16,560
if you release a update all you have to

233
00:08:16,560 --> 00:08:19,520
do is pull the new image

234
00:08:19,520 --> 00:08:20,879
so now let's take a look at the

235
00:08:20,879 --> 00:08:22,960
architecture of recon file

236
00:08:22,960 --> 00:08:25,919
so we have a user who sends text to a

237
00:08:25,919 --> 00:08:26,800
bot

238
00:08:26,800 --> 00:08:29,520
that text is received by the controller

239
00:08:29,520 --> 00:08:30,639
the controller

240
00:08:30,639 --> 00:08:33,679
sends that text to the open ai api

241
00:08:33,679 --> 00:08:36,719
which in turn returns a string stating

242
00:08:36,719 --> 00:08:38,880
the module to use

243
00:08:38,880 --> 00:08:41,440
the tool to use and the operation to

244
00:08:41,440 --> 00:08:42,559
perform

245
00:08:42,559 --> 00:08:45,680
depending upon this information

246
00:08:45,680 --> 00:08:48,640
the controller calls the finder module

247
00:08:48,640 --> 00:08:49,680
scanner module

248
00:08:49,680 --> 00:08:52,800
or the attacker module the finder module

249
00:08:52,800 --> 00:08:56,640
is used to find machines

250
00:08:56,640 --> 00:08:59,120
using the showdown api the scanner

251
00:08:59,120 --> 00:08:59,839
module

252
00:08:59,839 --> 00:09:02,880
is used to scan machines

253
00:09:02,880 --> 00:09:05,440
with tools such as nmap and the attacker

254
00:09:05,440 --> 00:09:06,560
module is

255
00:09:06,560 --> 00:09:08,240
used to perform attacks such as

256
00:09:08,240 --> 00:09:11,600
dictionary attacks using hydra

257
00:09:11,839 --> 00:09:14,399
g-con pal is packaged in form of docker

258
00:09:14,399 --> 00:09:15,360
containers

259
00:09:15,360 --> 00:09:17,440
so we have three docker containers the

260
00:09:17,440 --> 00:09:19,440
first one is the controller container

261
00:09:19,440 --> 00:09:21,200
second one is the scanner container

262
00:09:21,200 --> 00:09:23,360
which contains all of the scanning tools

263
00:09:23,360 --> 00:09:25,120
third one is the attacker container

264
00:09:25,120 --> 00:09:27,920
which contains all of the attack tools

265
00:09:27,920 --> 00:09:31,519
so when a user sends a message to a bot

266
00:09:31,519 --> 00:09:33,040
it is received by the controller

267
00:09:33,040 --> 00:09:34,640
container it

268
00:09:34,640 --> 00:09:37,839
sends the text to the open ei api and

269
00:09:37,839 --> 00:09:39,360
depending upon the operation

270
00:09:39,360 --> 00:09:41,680
if it is a find operation it will send a

271
00:09:41,680 --> 00:09:43,440
request to the showdown api

272
00:09:43,440 --> 00:09:45,440
get all of the machine detail and return

273
00:09:45,440 --> 00:09:47,200
it back to the user

274
00:09:47,200 --> 00:09:49,519
if it is a scan operation it will

275
00:09:49,519 --> 00:09:51,600
connect to the scanner container

276
00:09:51,600 --> 00:09:54,000
through web sockets and call the

277
00:09:54,000 --> 00:09:54,959
respective

278
00:09:54,959 --> 00:09:57,519
tools to perform the scanning if it is

279
00:09:57,519 --> 00:09:58,959
an attack operation

280
00:09:58,959 --> 00:10:00,399
it will use the socket to communicate

281
00:10:00,399 --> 00:10:02,399
with the attacker container

282
00:10:02,399 --> 00:10:05,360
to perform that attack so the reason we

283
00:10:05,360 --> 00:10:06,880
have separated controller

284
00:10:06,880 --> 00:10:09,839
scanner and attacker is because we'll be

285
00:10:09,839 --> 00:10:11,600
uh providing updates for all of the

286
00:10:11,600 --> 00:10:12,720
three containers

287
00:10:12,720 --> 00:10:16,000
but in case if a tool is not present

288
00:10:16,000 --> 00:10:19,839
which is required by the user

289
00:10:20,160 --> 00:10:21,920
so the reason we have separated

290
00:10:21,920 --> 00:10:23,200
controller scanner

291
00:10:23,200 --> 00:10:25,360
and attacker is because we will be

292
00:10:25,360 --> 00:10:26,959
providing updates for all of the three

293
00:10:26,959 --> 00:10:27,680
container

294
00:10:27,680 --> 00:10:31,120
but in case if a tool is not present

295
00:10:31,120 --> 00:10:33,360
in the scanner or attacker container

296
00:10:33,360 --> 00:10:35,360
which is required by the user

297
00:10:35,360 --> 00:10:38,640
they themselves can extend the images

298
00:10:38,640 --> 00:10:39,279
further

299
00:10:39,279 --> 00:10:42,640
or derive the images further in case of

300
00:10:42,640 --> 00:10:44,079
attacker container if they want to add

301
00:10:44,079 --> 00:10:45,760
support for another tool

302
00:10:45,760 --> 00:10:48,079
they can write a wrapper script and this

303
00:10:48,079 --> 00:10:49,040
way they can

304
00:10:49,040 --> 00:10:52,240
manage the container themselves instead

305
00:10:52,240 --> 00:10:52,720
of

306
00:10:52,720 --> 00:10:55,279
relying on us for adding the specific

307
00:10:55,279 --> 00:10:57,839
tool to it

308
00:10:58,399 --> 00:11:01,360
so we do need open ai api key showdown

309
00:11:01,360 --> 00:11:01,920
key

310
00:11:01,920 --> 00:11:04,160
and the package is required at docker.io

311
00:11:04,160 --> 00:11:06,399
and docker compose

312
00:11:06,399 --> 00:11:08,079
so now moving on to the installation

313
00:11:08,079 --> 00:11:10,000
part so first of all we have to create a

314
00:11:10,000 --> 00:11:11,360
telegram board

315
00:11:11,360 --> 00:11:12,880
then we have to install the packages

316
00:11:12,880 --> 00:11:15,680
which is docker io and docker compose

317
00:11:15,680 --> 00:11:17,120
then we have to fetch the docker

318
00:11:17,120 --> 00:11:19,200
compose.camels file

319
00:11:19,200 --> 00:11:22,000
and we have to edit the yaml file and

320
00:11:22,000 --> 00:11:23,200
mention our own

321
00:11:23,200 --> 00:11:26,399
open ai and showdown api key

322
00:11:26,399 --> 00:11:29,680
along with the bot token so we'll get

323
00:11:29,680 --> 00:11:30,240
into that

324
00:11:30,240 --> 00:11:32,640
in a couple of seconds so once we have

325
00:11:32,640 --> 00:11:34,000
done this all we have

326
00:11:34,000 --> 00:11:36,320
to do is run the command docker compose

327
00:11:36,320 --> 00:11:37,120
up

328
00:11:37,120 --> 00:11:40,000
and it will bring up all of the required

329
00:11:40,000 --> 00:11:40,720
containers

330
00:11:40,720 --> 00:11:45,440
for valve so now let's go into a demo

331
00:11:45,600 --> 00:11:47,839
so this is the installation part now in

332
00:11:47,839 --> 00:11:49,200
order to create a bot

333
00:11:49,200 --> 00:11:51,040
first of all we have to search for bot

334
00:11:51,040 --> 00:11:52,959
father and start it

335
00:11:52,959 --> 00:11:55,200
so this will return us with a couple of

336
00:11:55,200 --> 00:11:57,279
commands which we can use

337
00:11:57,279 --> 00:11:59,200
so we have a command here which says new

338
00:11:59,200 --> 00:12:01,360
bot create a new bot

339
00:12:01,360 --> 00:12:03,440
we have to click on it and it will ask

340
00:12:03,440 --> 00:12:05,600
for a name

341
00:12:05,600 --> 00:12:08,000
we have to mention a name and then we

342
00:12:08,000 --> 00:12:10,160
have to mention a unique username

343
00:12:10,160 --> 00:12:12,000
for our part so in this case we are

344
00:12:12,000 --> 00:12:14,399
going to use recon pal bot

345
00:12:14,399 --> 00:12:17,440
now this will return a token

346
00:12:17,440 --> 00:12:20,160
which we have to copy and then we have

347
00:12:20,160 --> 00:12:21,120
to paste it

348
00:12:21,120 --> 00:12:23,680
in the dockercompose.cml file so i've

349
00:12:23,680 --> 00:12:25,839
already cloned the repository

350
00:12:25,839 --> 00:12:29,079
so what i'm going to do next is update

351
00:12:29,079 --> 00:12:32,319
dockercompose.com file

352
00:12:32,639 --> 00:12:33,920
so please also make sure that the

353
00:12:33,920 --> 00:12:36,160
showdown api

354
00:12:36,160 --> 00:12:38,800
showdown api key as well as the open ai

355
00:12:38,800 --> 00:12:40,079
api key is mentioned

356
00:12:40,079 --> 00:12:43,440
otherwise it will not work so once we

357
00:12:43,440 --> 00:12:44,160
have this

358
00:12:44,160 --> 00:12:46,480
all we have to do is run the command

359
00:12:46,480 --> 00:12:48,959
docker compose up

360
00:12:48,959 --> 00:12:50,560
so this brings up all of the required

361
00:12:50,560 --> 00:12:52,560
container for recon file

362
00:12:52,560 --> 00:12:55,920
so the next thing to do is access the

363
00:12:55,920 --> 00:12:56,480
bot

364
00:12:56,480 --> 00:12:59,680
so we can access the bot from the url

365
00:12:59,680 --> 00:13:00,399
mentioned

366
00:13:00,399 --> 00:13:03,600
by the bot father so now we'll have to

367
00:13:03,600 --> 00:13:04,959
hit click on the start button

368
00:13:04,959 --> 00:13:08,639
and there you go we have

369
00:13:08,639 --> 00:13:11,839
the bot configured and ready to go

370
00:13:11,839 --> 00:13:14,000
now let's go back to the slides so this

371
00:13:14,000 --> 00:13:16,079
is the usual setup

372
00:13:16,079 --> 00:13:19,200
we have a machine where the controller

373
00:13:19,200 --> 00:13:21,760
scanner and attack a container is

374
00:13:21,760 --> 00:13:22,800
running

375
00:13:22,800 --> 00:13:25,600
now let's say the user decides to send a

376
00:13:25,600 --> 00:13:26,639
message

377
00:13:26,639 --> 00:13:31,600
to find machines with showdown api

378
00:13:31,600 --> 00:13:33,440
and the controller sends request to the

379
00:13:33,440 --> 00:13:35,040
showdown api and finds

380
00:13:35,040 --> 00:13:36,800
public ip addresses of couple of

381
00:13:36,800 --> 00:13:39,040
machines

382
00:13:39,040 --> 00:13:42,639
so in the next phase what that user does

383
00:13:42,639 --> 00:13:43,600
is

384
00:13:43,600 --> 00:13:47,120
tells the bot to perform scan operations

385
00:13:47,120 --> 00:13:49,920
so now it will scan all now we cannot

386
00:13:49,920 --> 00:13:51,519
demonstrate this

387
00:13:51,519 --> 00:13:53,199
because we do not have permission to

388
00:13:53,199 --> 00:13:54,720
attack all of these

389
00:13:54,720 --> 00:13:57,120
public machines so instead what we are

390
00:13:57,120 --> 00:13:57,839
going to do

391
00:13:57,839 --> 00:14:01,680
here is use a different setup

392
00:14:01,680 --> 00:14:04,399
so for this demo what i've done is

393
00:14:04,399 --> 00:14:06,480
created a vpc on aws

394
00:14:06,480 --> 00:14:10,000
spawned two machine inside that ppc

395
00:14:10,000 --> 00:14:12,320
one is connected to the internet other

396
00:14:12,320 --> 00:14:13,760
is not connected to the internet

397
00:14:13,760 --> 00:14:16,160
and can only be accessed via private ip

398
00:14:16,160 --> 00:14:17,040
address

399
00:14:17,040 --> 00:14:19,760
and the second machine is the vulnerable

400
00:14:19,760 --> 00:14:20,399
machine

401
00:14:20,399 --> 00:14:22,320
i've installed various vulnerable

402
00:14:22,320 --> 00:14:25,360
components here such as obvious ftpd

403
00:14:25,360 --> 00:14:28,399
vulnerable application and so on so now

404
00:14:28,399 --> 00:14:29,600
what happens is

405
00:14:29,600 --> 00:14:32,000
the user will interact with the bot the

406
00:14:32,000 --> 00:14:33,760
bot will interact with the machine which

407
00:14:33,760 --> 00:14:35,440
is running the three container

408
00:14:35,440 --> 00:14:37,279
and these three container can interact

409
00:14:37,279 --> 00:14:39,519
with the second machine which is the

410
00:14:39,519 --> 00:14:40,720
vulnerable machine

411
00:14:40,720 --> 00:14:44,000
using private ipads so now let's

412
00:14:44,000 --> 00:14:46,880
jump into a demo

413
00:14:47,360 --> 00:14:49,680
now once the bot is ready all we have to

414
00:14:49,680 --> 00:14:51,600
do is type in the type of operation

415
00:14:51,600 --> 00:14:53,680
which you want to perform

416
00:14:53,680 --> 00:14:55,279
so in this case what we are going to do

417
00:14:55,279 --> 00:14:57,680
is we are going to search for cameras

418
00:14:57,680 --> 00:14:59,839
in philippines so we've typed in this

419
00:14:59,839 --> 00:15:01,199
text with states

420
00:15:01,199 --> 00:15:03,680
find me the cameras for philippines now

421
00:15:03,680 --> 00:15:05,040
what happens is

422
00:15:05,040 --> 00:15:07,199
this is sent to the controller and

423
00:15:07,199 --> 00:15:08,560
controller sends it

424
00:15:08,560 --> 00:15:12,800
to the open ai api and open ei api

425
00:15:12,800 --> 00:15:15,360
returns with a text stating that it is a

426
00:15:15,360 --> 00:15:16,399
find operation

427
00:15:16,399 --> 00:15:19,279
and now the controller uses the showdown

428
00:15:19,279 --> 00:15:20,160
api

429
00:15:20,160 --> 00:15:23,839
to scan for cameras and the location

430
00:15:23,839 --> 00:15:26,880
which is 3d please

431
00:15:26,880 --> 00:15:30,160
so it will take couple of seconds

432
00:15:32,480 --> 00:15:34,480
now we have found over hundreds of

433
00:15:34,480 --> 00:15:35,920
results

434
00:15:35,920 --> 00:15:37,759
so it will take couple of seconds for

435
00:15:37,759 --> 00:15:40,000
all of these ip address to be

436
00:15:40,000 --> 00:15:43,360
printed so as you can see

437
00:15:43,360 --> 00:15:46,480
using these ip addresses we can access

438
00:15:46,480 --> 00:15:47,920
the cameras

439
00:15:47,920 --> 00:15:49,600
so either the cameras might be protected

440
00:15:49,600 --> 00:15:51,199
with weak credentials or default

441
00:15:51,199 --> 00:15:52,079
credentials

442
00:15:52,079 --> 00:15:54,639
and we might be able to view the

443
00:15:54,639 --> 00:15:57,120
recording

444
00:15:57,759 --> 00:16:00,480
so currently in the demo we cannot

445
00:16:00,480 --> 00:16:01,120
access

446
00:16:01,120 --> 00:16:03,360
these ip address specifically because we

447
00:16:03,360 --> 00:16:06,839
do not have the permission to access

448
00:16:06,839 --> 00:16:08,079
them

449
00:16:08,079 --> 00:16:10,079
next what we are going to do is search

450
00:16:10,079 --> 00:16:11,279
for machines

451
00:16:11,279 --> 00:16:14,000
which have their docker tcp port exposed

452
00:16:14,000 --> 00:16:15,519
so what we can do is search

453
00:16:15,519 --> 00:16:17,680
type in the query which is find me

454
00:16:17,680 --> 00:16:18,639
docker host

455
00:16:18,639 --> 00:16:20,959
around the globe so what will happen is

456
00:16:20,959 --> 00:16:22,880
the open ai api

457
00:16:22,880 --> 00:16:24,880
will return it's a find operation and

458
00:16:24,880 --> 00:16:26,240
what we are looking for

459
00:16:26,240 --> 00:16:28,720
is docker and it will send in the

460
00:16:28,720 --> 00:16:30,160
location

461
00:16:30,160 --> 00:16:32,720
so since searching for docker hosts

462
00:16:32,720 --> 00:16:34,839
around the globe can result a lot of

463
00:16:34,839 --> 00:16:36,160
results

464
00:16:36,160 --> 00:16:37,519
what we are going to do is search for

465
00:16:37,519 --> 00:16:40,639
docker host in china

466
00:16:42,320 --> 00:16:45,519
so what this will return is list of ip

467
00:16:45,519 --> 00:16:47,199
addresses of machines

468
00:16:47,199 --> 00:16:50,720
which have their docker tcp socket

469
00:16:50,720 --> 00:16:53,839
exposed so this way what we can do is

470
00:16:53,839 --> 00:16:56,560
interact with the docker tcp socket

471
00:16:56,560 --> 00:16:58,639
spawn a container on the machine

472
00:16:58,639 --> 00:17:01,120
and break out of it to compromise the

473
00:17:01,120 --> 00:17:02,399
host machine

474
00:17:02,399 --> 00:17:04,480
this way we'll have root access on the

475
00:17:04,480 --> 00:17:05,439
machine

476
00:17:05,439 --> 00:17:07,439
now as you can see we have over 100

477
00:17:07,439 --> 00:17:08,640
machines

478
00:17:08,640 --> 00:17:11,679
which have docker tcp socket exposed

479
00:17:11,679 --> 00:17:14,480
so we are looking at compromising over

480
00:17:14,480 --> 00:17:15,439
100

481
00:17:15,439 --> 00:17:18,400
machines and will get root access on all

482
00:17:18,400 --> 00:17:20,720
of them

483
00:17:20,799 --> 00:17:23,199
so it is going to take couple of seconds

484
00:17:23,199 --> 00:17:27,360
since uh it returns like 100 results

485
00:17:28,880 --> 00:17:30,720
so once everything is done the

486
00:17:30,720 --> 00:17:32,160
processing is done

487
00:17:32,160 --> 00:17:34,320
it will return a done message now let's

488
00:17:34,320 --> 00:17:36,559
search for portena instances

489
00:17:36,559 --> 00:17:39,440
so again what happens here is open ei

490
00:17:39,440 --> 00:17:40,799
will figure out that okay

491
00:17:40,799 --> 00:17:42,640
it's a find operation and we are looking

492
00:17:42,640 --> 00:17:44,160
for pertainer

493
00:17:44,160 --> 00:17:47,840
and the location is philippines

494
00:17:50,080 --> 00:17:51,919
so next what we can do is interact with

495
00:17:51,919 --> 00:17:53,280
the pertainer instances

496
00:17:53,280 --> 00:17:55,120
and if there's a weak password or a

497
00:17:55,120 --> 00:17:56,960
default password used

498
00:17:56,960 --> 00:17:59,440
we can try to get into the protein

499
00:17:59,440 --> 00:18:00,240
instance

500
00:18:00,240 --> 00:18:02,240
start a container break out of it and

501
00:18:02,240 --> 00:18:05,440
compromise the host machine

502
00:18:06,080 --> 00:18:08,480
next what we are going to do is frame

503
00:18:08,480 --> 00:18:10,400
the sentence in a different way and look

504
00:18:10,400 --> 00:18:12,559
for memcache instances

505
00:18:12,559 --> 00:18:15,919
around the globe now the best part about

506
00:18:15,919 --> 00:18:17,840
memcache instances is if you are able to

507
00:18:17,840 --> 00:18:18,559
find

508
00:18:18,559 --> 00:18:21,200
them cache instances online we can

509
00:18:21,200 --> 00:18:21,760
perform

510
00:18:21,760 --> 00:18:24,320
ddos attack using them so again we have

511
00:18:24,320 --> 00:18:26,160
found over 100 results

512
00:18:26,160 --> 00:18:28,960
so it will print out all of the ip

513
00:18:28,960 --> 00:18:30,240
addresses

514
00:18:30,240 --> 00:18:33,440
now what we can do is in the next step

515
00:18:33,440 --> 00:18:36,880
uh perform scan or we can attack

516
00:18:36,880 --> 00:18:39,039
on these ip addresses using the scanner

517
00:18:39,039 --> 00:18:42,080
or attack module

518
00:18:42,080 --> 00:18:44,640
so it will take a minute or so for all

519
00:18:44,640 --> 00:18:45,120
of the

520
00:18:45,120 --> 00:18:48,240
ip addresses to be printed

521
00:18:48,240 --> 00:18:50,559
that's a lot of ip addresses so once

522
00:18:50,559 --> 00:18:52,480
this is done we have a done message

523
00:18:52,480 --> 00:18:53,919
next what we are going to do is use the

524
00:18:53,919 --> 00:18:55,679
scan module

525
00:18:55,679 --> 00:18:57,520
now in order to perform the scan

526
00:18:57,520 --> 00:19:00,080
operation on the returned ip addresses

527
00:19:00,080 --> 00:19:02,080
what we can do is mention that

528
00:19:02,080 --> 00:19:05,280
scan all machines from previous result

529
00:19:05,280 --> 00:19:08,000
or previous query this way what will

530
00:19:08,000 --> 00:19:08,720
happen is

531
00:19:08,720 --> 00:19:10,640
open ei will return that it's a scan

532
00:19:10,640 --> 00:19:12,720
operation and we have to scan all the

533
00:19:12,720 --> 00:19:14,720
machines and it will mention that

534
00:19:14,720 --> 00:19:17,440
refer to the previous query or previous

535
00:19:17,440 --> 00:19:18,400
result

536
00:19:18,400 --> 00:19:20,880
this way the controller will check what

537
00:19:20,880 --> 00:19:23,520
was the ip addresses which were returned

538
00:19:23,520 --> 00:19:26,000
and it will perform the scan using nmap

539
00:19:26,000 --> 00:19:28,080
accordingly

540
00:19:28,080 --> 00:19:30,640
so but again we cannot attack or scan

541
00:19:30,640 --> 00:19:32,000
these machines because we do not have

542
00:19:32,000 --> 00:19:33,600
the permission to do so

543
00:19:33,600 --> 00:19:36,080
so what we are going to do is scan the

544
00:19:36,080 --> 00:19:37,440
private ip address

545
00:19:37,440 --> 00:19:41,760
where i have the vulnerable machine

546
00:19:41,760 --> 00:19:45,679
so it will use nmap to perform the scan

547
00:19:45,679 --> 00:19:47,200
so as you can see we have couple of

548
00:19:47,200 --> 00:19:50,400
ports open on the machine

549
00:19:50,799 --> 00:19:53,039
so next what we are going to do is

550
00:19:53,039 --> 00:19:53,919
perform

551
00:19:53,919 --> 00:19:56,240
all port scan so to do that we can

552
00:19:56,240 --> 00:19:57,919
mention like scan all ports

553
00:19:57,919 --> 00:20:00,720
and the ip address or something like

554
00:20:00,720 --> 00:20:01,120
this

555
00:20:01,120 --> 00:20:04,720
of 10.0.0.240

556
00:20:04,720 --> 00:20:07,280
now it will use the minus p minus option

557
00:20:07,280 --> 00:20:10,879
and then map to scan all of the ports

558
00:20:11,280 --> 00:20:14,000
so as you can see now we have a port

559
00:20:14,000 --> 00:20:15,520
which is one one two one one which was

560
00:20:15,520 --> 00:20:16,880
not shown previously

561
00:20:16,880 --> 00:20:19,360
so that means okay it successfully did

562
00:20:19,360 --> 00:20:20,480
the

563
00:20:20,480 --> 00:20:24,159
all port scan now let's try to perform

564
00:20:24,159 --> 00:20:26,799
version detection as well so what we are

565
00:20:26,799 --> 00:20:27,360
going to do

566
00:20:27,360 --> 00:20:31,679
is mention scan outputs of 10.0.0.240

567
00:20:31,679 --> 00:20:34,240
and perform version detection so what

568
00:20:34,240 --> 00:20:35,200
happens now is

569
00:20:35,200 --> 00:20:38,720
open ei understands that returns that

570
00:20:38,720 --> 00:20:41,200
it is a scan operation you have to scan

571
00:20:41,200 --> 00:20:42,480
all of the ports

572
00:20:42,480 --> 00:20:45,200
you have to use nmap and we have to also

573
00:20:45,200 --> 00:20:46,880
perform version detection

574
00:20:46,880 --> 00:20:49,360
depending upon this information the

575
00:20:49,360 --> 00:20:50,159
controller

576
00:20:50,159 --> 00:20:52,720
figures out which options to use with

577
00:20:52,720 --> 00:20:54,000
nmap

578
00:20:54,000 --> 00:20:56,880
and that's how the scanning is happening

579
00:20:56,880 --> 00:21:03,840
behind the scenes

580
00:21:05,200 --> 00:21:06,799
so it will take couple of seconds since

581
00:21:06,799 --> 00:21:10,320
we are performing version detection

582
00:21:14,080 --> 00:21:16,000
and there we have the result so as you

583
00:21:16,000 --> 00:21:17,440
can see we are running

584
00:21:17,440 --> 00:21:20,559
we have vsftpd running on port

585
00:21:20,559 --> 00:21:24,799
21 and this is a vulnerable version

586
00:21:24,799 --> 00:21:28,240
and then we have memcached mysql

587
00:21:28,240 --> 00:21:31,200
apache server run

588
00:21:32,640 --> 00:21:35,039
now let's attack the services running on

589
00:21:35,039 --> 00:21:37,200
the vulnerable machine

590
00:21:37,200 --> 00:21:39,760
so what we are going to do next is use

591
00:21:39,760 --> 00:21:41,440
derby

592
00:21:41,440 --> 00:21:45,120
to enumerate the files and directories

593
00:21:45,120 --> 00:21:48,158
on the target machine

594
00:21:50,559 --> 00:21:55,600
so what happens is as you can see

595
00:21:55,600 --> 00:21:57,840
derby the output of derby is returned on

596
00:21:57,840 --> 00:21:59,440
screen and

597
00:21:59,440 --> 00:22:00,880
you have found couple of directories

598
00:22:00,880 --> 00:22:03,200
such as dot get a couple of files such

599
00:22:03,200 --> 00:22:04,760
as index.php

600
00:22:04,760 --> 00:22:07,760
phpinfo.php

601
00:22:08,159 --> 00:22:11,679
so now we are going to use sqlmap

602
00:22:11,679 --> 00:22:14,880
on the web application so let's see if

603
00:22:14,880 --> 00:22:17,280
it works

604
00:22:17,280 --> 00:22:20,240
so to do that we are using try sql map

605
00:22:20,240 --> 00:22:21,039
command

606
00:22:21,039 --> 00:22:23,840
so now the open ei api checks it that

607
00:22:23,840 --> 00:22:25,600
this is not a scan operation so this is

608
00:22:25,600 --> 00:22:27,200
an attack operation

609
00:22:27,200 --> 00:22:29,679
and it interprets that we have to use

610
00:22:29,679 --> 00:22:32,080
sqlmap on this target machine

611
00:22:32,080 --> 00:22:35,840
now the controller sets the parameter

612
00:22:38,840 --> 00:22:41,840
accordingly

613
00:22:42,640 --> 00:22:44,400
so sql map wasn't able to find any

614
00:22:44,400 --> 00:22:47,120
parameters so that's why it failed

615
00:22:47,120 --> 00:22:50,799
so now let's try to use nicto on the

616
00:22:50,799 --> 00:22:55,840
vulnerable machine

617
00:22:57,039 --> 00:22:59,280
we are going to use tito so what we have

618
00:22:59,280 --> 00:23:00,400
done is

619
00:23:00,400 --> 00:23:02,559
typed in the command use nicto to scan

620
00:23:02,559 --> 00:23:04,000
this machine

621
00:23:04,000 --> 00:23:07,440
so now uh the module the open ei api

622
00:23:07,440 --> 00:23:09,440
figures out that it's an attack

623
00:23:09,440 --> 00:23:11,679
operation using nicto

624
00:23:11,679 --> 00:23:13,280
and we have to scan this specific ip

625
00:23:13,280 --> 00:23:16,000
address so the command is generated by

626
00:23:16,000 --> 00:23:17,200
the controller

627
00:23:17,200 --> 00:23:21,440
and it is sent to the attacker module

628
00:23:21,679 --> 00:23:24,559
and as you can see uh nicto is scanning

629
00:23:24,559 --> 00:23:26,240
the application and it has returned some

630
00:23:26,240 --> 00:23:27,760
information such as

631
00:23:27,760 --> 00:23:32,640
the application is running on php 5.5.9

632
00:23:32,640 --> 00:23:35,919
and allowed methods are get head post

633
00:23:35,919 --> 00:23:36,720
options

634
00:23:36,720 --> 00:23:38,480
now since you have not received the done

635
00:23:38,480 --> 00:23:40,000
command that means

636
00:23:40,000 --> 00:23:42,880
uh the scan is still in progress so as

637
00:23:42,880 --> 00:23:44,320
soon as the scan is completed we'll get

638
00:23:44,320 --> 00:23:44,640
there

639
00:23:44,640 --> 00:23:48,080
done message so it ha nikto has also

640
00:23:48,080 --> 00:23:49,200
found out that there are a couple of

641
00:23:49,200 --> 00:23:51,279
files such as php info.php

642
00:23:51,279 --> 00:23:55,679
readme dot git directory and

643
00:23:55,679 --> 00:23:58,159
so on

644
00:24:03,679 --> 00:24:05,120
the scan is still running it will take

645
00:24:05,120 --> 00:24:06,960
probably couple of seconds for it to

646
00:24:06,960 --> 00:24:08,480
finish

647
00:24:08,480 --> 00:24:11,679
so now it is completed now as you

648
00:24:11,679 --> 00:24:13,120
previously noticed

649
00:24:13,120 --> 00:24:15,120
there was a memcache server running on

650
00:24:15,120 --> 00:24:17,120
the vulnerable machine

651
00:24:17,120 --> 00:24:19,440
so what we can do is type in a statement

652
00:24:19,440 --> 00:24:20,240
such as

653
00:24:20,240 --> 00:24:22,799
check if memcache server can be used for

654
00:24:22,799 --> 00:24:24,640
ddos attack

655
00:24:24,640 --> 00:24:26,960
now on the attacker container we have

656
00:24:26,960 --> 00:24:28,000
couple of script

657
00:24:28,000 --> 00:24:31,120
one such script is to check

658
00:24:31,120 --> 00:24:34,000
what the script is to check if a remote

659
00:24:34,000 --> 00:24:35,440
memcache server

660
00:24:35,440 --> 00:24:38,799
has udp port open and there is no

661
00:24:38,799 --> 00:24:40,400
authentication enabled

662
00:24:40,400 --> 00:24:43,679
so now the key important thing is that

663
00:24:43,679 --> 00:24:46,720
once we send this to the openya api

664
00:24:46,720 --> 00:24:49,840
the open ei api has to return that it is

665
00:24:49,840 --> 00:24:51,840
an attack operation and it is on

666
00:24:51,840 --> 00:24:52,960
memcached

667
00:24:52,960 --> 00:24:56,480
and it is related to ddos so with

668
00:24:56,480 --> 00:24:59,679
these information the controller

669
00:24:59,679 --> 00:25:02,799
figures out that we have to run the

670
00:25:02,799 --> 00:25:05,679
specific script

671
00:25:06,720 --> 00:25:09,919
so let's see if this works

672
00:25:12,880 --> 00:25:14,960
so it worked and as you can see we have

673
00:25:14,960 --> 00:25:16,159
a message stating that yes

674
00:25:16,159 --> 00:25:17,600
the memcache server is vulnerable and

675
00:25:17,600 --> 00:25:19,440
can be used for amplified

676
00:25:19,440 --> 00:25:22,960
ddos attack so what happened was open ei

677
00:25:22,960 --> 00:25:23,840
api

678
00:25:23,840 --> 00:25:26,159
returned that this is an attack

679
00:25:26,159 --> 00:25:27,679
operation on memcache

680
00:25:27,679 --> 00:25:29,679
and it returned a string with stated

681
00:25:29,679 --> 00:25:30,799
ddos attack

682
00:25:30,799 --> 00:25:34,400
now with this information the controller

683
00:25:34,400 --> 00:25:37,120
ran the specific script to find out if

684
00:25:37,120 --> 00:25:39,918
this is possible

685
00:25:41,279 --> 00:25:44,400
now what we can try is to track the root

686
00:25:44,400 --> 00:25:45,520
password

687
00:25:45,520 --> 00:25:48,720
of this machine using the default word

688
00:25:48,720 --> 00:25:49,279
list

689
00:25:49,279 --> 00:25:51,440
so now what happens is this string is

690
00:25:51,440 --> 00:25:53,279
sent to the open ei api

691
00:25:53,279 --> 00:25:55,520
and it returns that this is an attack

692
00:25:55,520 --> 00:25:56,400
operation

693
00:25:56,400 --> 00:25:59,360
we have to performing tracking of this

694
00:25:59,360 --> 00:26:00,799
specific user

695
00:26:00,799 --> 00:26:03,360
using this specific word list so now

696
00:26:03,360 --> 00:26:05,360
what happens is the controller

697
00:26:05,360 --> 00:26:07,360
gets this input it checks that what are

698
00:26:07,360 --> 00:26:09,120
the tools available for cracking

699
00:26:09,120 --> 00:26:12,240
so currently we only have hydra so

700
00:26:12,240 --> 00:26:14,000
then the controller formulates the

701
00:26:14,000 --> 00:26:16,159
command to perform

702
00:26:16,159 --> 00:26:18,799
the dictionary attack and that command

703
00:26:18,799 --> 00:26:20,799
is then sent to the attacker module

704
00:26:20,799 --> 00:26:25,840
and executed there

705
00:26:25,919 --> 00:26:28,880
so now the hydra dictionary attack has

706
00:26:28,880 --> 00:26:29,440
started

707
00:26:29,440 --> 00:26:31,360
so it will take a couple of seconds for

708
00:26:31,360 --> 00:26:38,720
this to complete so the dictionary

709
00:26:38,720 --> 00:26:39,279
attack

710
00:26:39,279 --> 00:26:40,960
completed successfully and we have found

711
00:26:40,960 --> 00:26:43,840
the password is password

712
00:26:43,840 --> 00:26:46,080
so the next question arises so now we

713
00:26:46,080 --> 00:26:46,880
can pass in

714
00:26:46,880 --> 00:26:49,600
text and it will be sent to the open ai

715
00:26:49,600 --> 00:26:50,400
api

716
00:26:50,400 --> 00:26:53,039
now what if i want to execute a command

717
00:26:53,039 --> 00:26:54,400
manually

718
00:26:54,400 --> 00:26:56,080
so in order to do that what we have to

719
00:26:56,080 --> 00:26:58,880
do is mention the greater than symbol

720
00:26:58,880 --> 00:27:00,880
and followed by that we have to type in

721
00:27:00,880 --> 00:27:02,640
the command so what we are going to do

722
00:27:02,640 --> 00:27:03,679
is

723
00:27:03,679 --> 00:27:05,679
perform tcp connect scan on port 80 of

724
00:27:05,679 --> 00:27:07,360
the target machine

725
00:27:07,360 --> 00:27:10,000
so this is directly sent to the scan

726
00:27:10,000 --> 00:27:10,640
module

727
00:27:10,640 --> 00:27:14,000
it is not sent to the open ei api server

728
00:27:14,000 --> 00:27:17,200
and it will perform the scan

729
00:27:19,039 --> 00:27:20,960
and similarly if you want to execute any

730
00:27:20,960 --> 00:27:23,520
other command

731
00:27:24,720 --> 00:27:26,960
it will again be sent to the scan module

732
00:27:26,960 --> 00:27:30,399
and the command will be executed here

733
00:27:32,000 --> 00:27:34,480
so now this concludes the demo of decon

734
00:27:34,480 --> 00:27:36,000
valve so now let's get back to the

735
00:27:36,000 --> 00:27:37,919
slides

736
00:27:37,919 --> 00:27:40,240
now now we have seen how you can use

737
00:27:40,240 --> 00:27:41,520
recon pal to

738
00:27:41,520 --> 00:27:44,799
find scan and attack various machines

739
00:27:44,799 --> 00:27:46,799
now there are a couple of blockers which

740
00:27:46,799 --> 00:27:48,320
might create an issue for you

741
00:27:48,320 --> 00:27:51,360
so the first one is that open ei api is

742
00:27:51,360 --> 00:27:52,320
still in beta

743
00:27:52,320 --> 00:27:54,799
and in order to get the api key you will

744
00:27:54,799 --> 00:27:55,440
have to

745
00:27:55,440 --> 00:27:58,399
request send a request to them and

746
00:27:58,399 --> 00:28:00,960
there's a really long wait list

747
00:28:00,960 --> 00:28:02,960
so it might take couple of months before

748
00:28:02,960 --> 00:28:04,399
you can get it

749
00:28:04,399 --> 00:28:06,320
and it is expected that when it is

750
00:28:06,320 --> 00:28:08,159
released and gets out of beta it's going

751
00:28:08,159 --> 00:28:09,679
to be very costly

752
00:28:09,679 --> 00:28:11,600
so initially you might have like a three

753
00:28:11,600 --> 00:28:13,440
month free trial but then you'll have to

754
00:28:13,440 --> 00:28:15,200
pay a huge price for

755
00:28:15,200 --> 00:28:17,919
accessing the api second thing to note

756
00:28:17,919 --> 00:28:19,840
here is the showdown api which we used

757
00:28:19,840 --> 00:28:20,480
was

758
00:28:20,480 --> 00:28:23,840
not free one so in order to

759
00:28:23,840 --> 00:28:26,320
use recon pal you'll either need a

760
00:28:26,320 --> 00:28:28,320
lifetime membership plan or

761
00:28:28,320 --> 00:28:31,760
the api plans of showdown

762
00:28:31,760 --> 00:28:33,440
so the lifetime membership plan you have

763
00:28:33,440 --> 00:28:35,840
to pay 49 it's a one-time payment and

764
00:28:35,840 --> 00:28:38,080
you'll get 100 query credit per month

765
00:28:38,080 --> 00:28:41,200
that is you can fire 100 requests or 100

766
00:28:41,200 --> 00:28:44,080
find requests from recon file

767
00:28:44,080 --> 00:28:46,880
if in case if you want to have more

768
00:28:46,880 --> 00:28:48,399
query requests you will have to go for

769
00:28:48,399 --> 00:28:48,799
the

770
00:28:48,799 --> 00:28:51,200
api plans which is like for freelancer

771
00:28:51,200 --> 00:28:53,120
it's 59 dollars for small businesses

772
00:28:53,120 --> 00:28:53,919
it's

773
00:28:53,919 --> 00:28:56,960
299 and for corporate it's 8.99

774
00:28:56,960 --> 00:29:00,320
per month so it will then you'll have

775
00:29:00,320 --> 00:29:03,520
over 10 000 queries to like 2 million

776
00:29:03,520 --> 00:29:06,240
and so on

777
00:29:09,279 --> 00:29:11,440
so now what to expect in the future how

778
00:29:11,440 --> 00:29:12,559
is recon pal

779
00:29:12,559 --> 00:29:15,440
going to evolve so with version 2 we are

780
00:29:15,440 --> 00:29:17,440
going to introduce audio support

781
00:29:17,440 --> 00:29:19,840
that is you won't have to type anymore

782
00:29:19,840 --> 00:29:21,679
all you have to do is press the record

783
00:29:21,679 --> 00:29:23,039
button

784
00:29:23,039 --> 00:29:25,279
speak and the audio clip will be

785
00:29:25,279 --> 00:29:26,080
analyzed by

786
00:29:26,080 --> 00:29:27,840
the controller or the text will be

787
00:29:27,840 --> 00:29:29,600
generated and it will interact with open

788
00:29:29,600 --> 00:29:31,120
ei api

789
00:29:31,120 --> 00:29:33,679
uh and decide what to do the second

790
00:29:33,679 --> 00:29:34,880
thing which we are going to do is

791
00:29:34,880 --> 00:29:36,960
enhance the input processing so

792
00:29:36,960 --> 00:29:38,559
currently what happens is there is

793
00:29:38,559 --> 00:29:41,200
intelligence on the controller and the

794
00:29:41,200 --> 00:29:41,919
controller

795
00:29:41,919 --> 00:29:45,279
gets the text from the open ei api

796
00:29:45,279 --> 00:29:48,080
and it formulates the command with the

797
00:29:48,080 --> 00:29:50,480
tool and the specific options

798
00:29:50,480 --> 00:29:52,080
next thing what we are going to do is we

799
00:29:52,080 --> 00:29:53,760
are going to feed open openai api with

800
00:29:53,760 --> 00:29:55,279
the documentation

801
00:29:55,279 --> 00:29:58,559
of various tools and see if it can

802
00:29:58,559 --> 00:30:00,640
formulate the command itself this way

803
00:30:00,640 --> 00:30:02,080
the central intelligence from

804
00:30:02,080 --> 00:30:04,240
the controller will be removed and open

805
00:30:04,240 --> 00:30:05,919
ai api will

806
00:30:05,919 --> 00:30:08,720
create the command itself the third

807
00:30:08,720 --> 00:30:10,480
thing which we are going to do is

808
00:30:10,480 --> 00:30:13,200
try to generate summary from the output

809
00:30:13,200 --> 00:30:14,960
again what we are going to do is

810
00:30:14,960 --> 00:30:17,039
feed open ei api with the documentation

811
00:30:17,039 --> 00:30:18,159
of the tools

812
00:30:18,159 --> 00:30:20,240
and see if it can generate the summary

813
00:30:20,240 --> 00:30:21,200
somehow

814
00:30:21,200 --> 00:30:24,159
so this is like simpler way of you know

815
00:30:24,159 --> 00:30:26,240
visualizing or

816
00:30:26,240 --> 00:30:29,919
understanding the output

817
00:30:29,919 --> 00:30:31,600
the fourth one is interactive attacker

818
00:30:31,600 --> 00:30:33,039
session so currently we have seen like

819
00:30:33,039 --> 00:30:34,480
we have we can attack

820
00:30:34,480 --> 00:30:37,520
various machines but we cannot get a

821
00:30:37,520 --> 00:30:39,360
interactive session back so what will

822
00:30:39,360 --> 00:30:41,360
happen with interactive session is

823
00:30:41,360 --> 00:30:43,279
we'll be able to compromise this machine

824
00:30:43,279 --> 00:30:44,960
and then we'll get a url

825
00:30:44,960 --> 00:30:48,000
you're using that url we can

826
00:30:48,000 --> 00:30:50,480
you know when we access that url we'll

827
00:30:50,480 --> 00:30:51,360
get a session

828
00:30:51,360 --> 00:30:54,000
on the target machine so that is our

829
00:30:54,000 --> 00:30:55,039
plan for

830
00:30:55,039 --> 00:30:58,480
uh for the v2 and uh

831
00:30:58,480 --> 00:31:01,760
now you know open ei api is a really uh

832
00:31:01,760 --> 00:31:04,799
costly service when it will be released

833
00:31:04,799 --> 00:31:06,240
so we'll try to look for other

834
00:31:06,240 --> 00:31:08,159
alternative language model

835
00:31:08,159 --> 00:31:10,559
which you can use and that will be in

836
00:31:10,559 --> 00:31:12,399
the version 3.

837
00:31:12,399 --> 00:31:14,799
so that concludes the talk and i really

838
00:31:14,799 --> 00:31:16,799
hope that everyone enjoyed the session

839
00:31:16,799 --> 00:31:18,960
and if you have any questions or you can

840
00:31:18,960 --> 00:31:20,000
mail it

841
00:31:20,000 --> 00:31:22,559
at jasmine direct interest academy.com

842
00:31:22,559 --> 00:31:25,918
thank you

