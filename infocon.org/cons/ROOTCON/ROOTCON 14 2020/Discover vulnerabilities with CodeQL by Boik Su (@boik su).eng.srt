1
00:00:01,839 --> 00:00:04,319
hi how are you this is spike

2
00:00:04,319 --> 00:00:06,240
uh first of all i want to thank you all

3
00:00:06,240 --> 00:00:08,160
for listening to my talk

4
00:00:08,160 --> 00:00:10,719
and just my pleasure to be here to share

5
00:00:10,719 --> 00:00:12,960
my recent work to you

6
00:00:12,960 --> 00:00:16,720
and today i'm gonna talk about how

7
00:00:16,720 --> 00:00:19,279
how we can use code qr to discover

8
00:00:19,279 --> 00:00:20,560
vulnerabilities

9
00:00:20,560 --> 00:00:24,240
and do variance analysis

10
00:00:24,800 --> 00:00:27,760
so hi again my name is boyk and i'm from

11
00:00:27,760 --> 00:00:28,720
taiwan

12
00:00:28,720 --> 00:00:30,960
i'm currently the security researcher at

13
00:00:30,960 --> 00:00:32,479
scicraft

14
00:00:32,479 --> 00:00:34,880
also i'm one of the member in chandra

15
00:00:34,880 --> 00:00:35,600
roots

16
00:00:35,600 --> 00:00:37,600
a private security research group in

17
00:00:37,600 --> 00:00:39,200
taiwan

18
00:00:39,200 --> 00:00:42,640
besides i'm a programming lover so

19
00:00:42,640 --> 00:00:45,520
if you are interested in any projects or

20
00:00:45,520 --> 00:00:46,399
researches

21
00:00:46,399 --> 00:00:49,039
that i'm working on you can check out my

22
00:00:49,039 --> 00:00:49,760
github

23
00:00:49,760 --> 00:00:53,199
or follow my twitter so here

24
00:00:53,199 --> 00:00:56,640
is the agenda for to just talk at first

25
00:00:56,640 --> 00:00:59,120
i will briefly introduce the background

26
00:00:59,120 --> 00:01:00,079
knowledge and the

27
00:01:00,079 --> 00:01:02,960
terminology of code 2l including some

28
00:01:02,960 --> 00:01:04,000
basic features

29
00:01:04,000 --> 00:01:07,360
and examples next i will demonstrate how

30
00:01:07,360 --> 00:01:09,119
you can use code ull

31
00:01:09,119 --> 00:01:12,479
to discover vulnerabilities and

32
00:01:12,479 --> 00:01:14,799
to find things that you are interested

33
00:01:14,799 --> 00:01:16,000
in

34
00:01:16,000 --> 00:01:21,600
it is also helpful to be used in sdlc

35
00:01:21,600 --> 00:01:24,640
later on i will talk about a

36
00:01:24,640 --> 00:01:26,640
vulnerability that are successfully

37
00:01:26,640 --> 00:01:29,200
found using codeql

38
00:01:29,200 --> 00:01:31,920
so this vulnerability has basically

39
00:01:31,920 --> 00:01:33,759
impacted like

40
00:01:33,759 --> 00:01:37,439
several hundreds websites so i will

41
00:01:37,439 --> 00:01:39,920
give out some detailed explanations in

42
00:01:39,920 --> 00:01:41,840
this part

43
00:01:41,840 --> 00:01:44,479
at last there will be a conclusion to

44
00:01:44,479 --> 00:01:46,640
someone to just talk

45
00:01:46,640 --> 00:01:49,759
okay so let's get started so

46
00:01:49,759 --> 00:01:53,280
the first part is what is called q out

47
00:01:53,280 --> 00:01:55,600
i believe that many of you have heard of

48
00:01:55,600 --> 00:01:56,880
this tool before

49
00:01:56,880 --> 00:02:00,000
since it's commonly and widely used by

50
00:02:00,000 --> 00:02:01,840
many security researchers

51
00:02:01,840 --> 00:02:06,000
and many big brands such as github

52
00:02:06,000 --> 00:02:09,199
intel and mozilla

53
00:02:09,199 --> 00:02:12,319
this is a brief overview of how cultural

54
00:02:12,319 --> 00:02:14,000
handles both extraction

55
00:02:14,000 --> 00:02:17,360
and evaluations as you can see

56
00:02:17,360 --> 00:02:19,599
the code balance extracted by

57
00:02:19,599 --> 00:02:23,040
proprietary extractors and stored as a

58
00:02:23,040 --> 00:02:25,760
snatial database

59
00:02:25,760 --> 00:02:29,040
and each database contains one

60
00:02:29,040 --> 00:02:31,440
queriable data extracted from the

61
00:02:31,440 --> 00:02:32,720
codebase

62
00:02:32,720 --> 00:02:35,040
for a single language in a particular

63
00:02:35,040 --> 00:02:36,800
point of time

64
00:02:36,800 --> 00:02:39,680
which means which means that if a code

65
00:02:39,680 --> 00:02:42,319
base contains multiple languages

66
00:02:42,319 --> 00:02:44,800
you can have a code you can have a

67
00:02:44,800 --> 00:02:45,920
database

68
00:02:45,920 --> 00:02:49,040
for each language and two

69
00:02:49,040 --> 00:02:51,599
a copy of the code to show the query

70
00:02:51,599 --> 00:02:54,480
results on

71
00:02:54,800 --> 00:02:57,360
so once we get the database we can use

72
00:02:57,360 --> 00:02:58,640
pre-made queries

73
00:02:58,640 --> 00:03:02,720
developed by summer or community

74
00:03:02,720 --> 00:03:06,000
or we can also write our custom queries

75
00:03:06,000 --> 00:03:09,200
and use them in many ways

76
00:03:09,200 --> 00:03:11,920
so here is the query structure so

77
00:03:11,920 --> 00:03:14,239
cultural syntax is very similar to the

78
00:03:14,239 --> 00:03:15,599
sql language

79
00:03:15,599 --> 00:03:18,879
and is comprised of this man part

80
00:03:18,879 --> 00:03:22,000
the first one is import so import

81
00:03:22,000 --> 00:03:24,080
basically at the beginning of the query

82
00:03:24,080 --> 00:03:24,959
you will use

83
00:03:24,959 --> 00:03:28,159
import to import extensive libraries

84
00:03:28,159 --> 00:03:28,560
that

85
00:03:28,560 --> 00:03:30,560
we are about to use in the following

86
00:03:30,560 --> 00:03:31,760
context

87
00:03:31,760 --> 00:03:35,120
and then from from is the thing that is

88
00:03:35,120 --> 00:03:36,159
the place that we

89
00:03:36,159 --> 00:03:38,799
declare but that we declare variables

90
00:03:38,799 --> 00:03:39,920
that we are holding

91
00:03:39,920 --> 00:03:43,760
our interested values for calculations

92
00:03:43,760 --> 00:03:47,200
such as function function code variable

93
00:03:47,200 --> 00:03:48,000
axis

94
00:03:48,000 --> 00:03:51,920
variable and expression then where

95
00:03:51,920 --> 00:03:54,080
once we have defined curricular

96
00:03:54,080 --> 00:03:56,000
variables we can then construct the

97
00:03:56,000 --> 00:03:58,720
predicates to be applied on them

98
00:03:58,720 --> 00:04:00,959
although this part is optional it is

99
00:04:00,959 --> 00:04:02,159
also the core

100
00:04:02,159 --> 00:04:06,000
of the query and finally select

101
00:04:06,000 --> 00:04:08,560
under this close we set how the output

102
00:04:08,560 --> 00:04:10,000
is going to look

103
00:04:10,000 --> 00:04:13,120
we can find cochlear variables and comp

104
00:04:13,120 --> 00:04:14,080
and present them

105
00:04:14,080 --> 00:04:17,040
in different ways and usually we are

106
00:04:17,040 --> 00:04:20,160
putting it in a table

107
00:04:20,160 --> 00:04:22,560
so cultural has provided extensive

108
00:04:22,560 --> 00:04:24,479
libraries to that provide your custom

109
00:04:24,479 --> 00:04:26,960
queries to do variant analysis

110
00:04:26,960 --> 00:04:29,759
including static analysis data flow

111
00:04:29,759 --> 00:04:30,800
analysis

112
00:04:30,800 --> 00:04:33,440
tens analysis and control flow graph

113
00:04:33,440 --> 00:04:34,960
analysis

114
00:04:34,960 --> 00:04:36,800
so you don't have to worried about

115
00:04:36,800 --> 00:04:38,479
supported languages

116
00:04:38,479 --> 00:04:41,280
cultural has provided many common

117
00:04:41,280 --> 00:04:42,000
languages

118
00:04:42,000 --> 00:04:45,199
support at the current time

119
00:04:45,199 --> 00:04:47,840
additionally code code is not the kind

120
00:04:47,840 --> 00:04:48,400
of tool

121
00:04:48,400 --> 00:04:50,320
that will help you automatically find

122
00:04:50,320 --> 00:04:51,680
vulnerabilities

123
00:04:51,680 --> 00:04:55,040
for you it is a tool that will help you

124
00:04:55,040 --> 00:04:57,600
simplify the process you don't need to

125
00:04:57,600 --> 00:04:59,040
prepare the environment

126
00:04:59,040 --> 00:05:01,840
and the tools to do the analysis which

127
00:05:01,840 --> 00:05:03,680
is really exhausted if you had

128
00:05:03,680 --> 00:05:05,520
experience on it

129
00:05:05,520 --> 00:05:08,080
cod code benefits you by providing well

130
00:05:08,080 --> 00:05:10,400
organized extensive libraries to let you

131
00:05:10,400 --> 00:05:13,120
run your custom queries

132
00:05:13,120 --> 00:05:15,680
so our first analysis is called static

133
00:05:15,680 --> 00:05:17,199
analysis

134
00:05:17,199 --> 00:05:19,199
it is basically the very straight

135
00:05:19,199 --> 00:05:21,440
forward method methodologies for

136
00:05:21,440 --> 00:05:24,560
for analysts to do this

137
00:05:24,560 --> 00:05:29,360
analysis so it is very easy to use

138
00:05:29,360 --> 00:05:31,919
and you can use it to find static things

139
00:05:31,919 --> 00:05:34,240
among the stanchion database

140
00:05:34,240 --> 00:05:37,280
it is very fast and accurate to find

141
00:05:37,280 --> 00:05:39,440
folks that don't require complex

142
00:05:39,440 --> 00:05:40,240
requirements

143
00:05:40,240 --> 00:05:44,400
to meet so it is better to use this way

144
00:05:44,400 --> 00:05:46,560
to find like hard qualities password

145
00:05:46,560 --> 00:05:48,080
strings

146
00:05:48,080 --> 00:05:51,680
misuse of dangerous functions and center

147
00:05:51,680 --> 00:05:54,560
so check out the examples here on the

148
00:05:54,560 --> 00:05:55,120
depth

149
00:05:55,120 --> 00:05:57,759
we write a simple query to find all the

150
00:05:57,759 --> 00:06:00,000
occurrence of the function

151
00:06:00,000 --> 00:06:03,520
code execute while on the right

152
00:06:03,520 --> 00:06:06,240
we write another simple query to do the

153
00:06:06,240 --> 00:06:08,000
research and to do the search

154
00:06:08,000 --> 00:06:11,039
for high quality password so

155
00:06:11,039 --> 00:06:13,520
these queries are simple but very

156
00:06:13,520 --> 00:06:14,400
helpful

157
00:06:14,400 --> 00:06:16,880
if you if you are searching for like

158
00:06:16,880 --> 00:06:18,160
long hanging fruits

159
00:06:18,160 --> 00:06:22,240
and it did return some results back

160
00:06:23,360 --> 00:06:25,360
and this one is more complicated than

161
00:06:25,360 --> 00:06:26,479
before

162
00:06:26,479 --> 00:06:30,240
so we extend the class from info expert

163
00:06:30,240 --> 00:06:33,120
a predefined class in code ql to find

164
00:06:33,120 --> 00:06:33,440
all

165
00:06:33,440 --> 00:06:36,639
objects that are invocable

166
00:06:36,639 --> 00:06:40,960
such as functions or constructors

167
00:06:40,960 --> 00:06:43,280
so this extended class we are trying to

168
00:06:43,280 --> 00:06:45,120
find all occurrence of regular

169
00:06:45,120 --> 00:06:46,160
expressions

170
00:06:46,160 --> 00:06:50,160
that contains dot star

171
00:06:50,160 --> 00:06:53,599
so why do we want this

172
00:06:53,599 --> 00:06:55,840
it is because that sound developers

173
00:06:55,840 --> 00:06:58,400
would write on this regular expression

174
00:06:58,400 --> 00:07:02,479
that want to match the real dot actually

175
00:07:02,479 --> 00:07:05,280
so this is really a common pitfall for

176
00:07:05,280 --> 00:07:07,759
especially junior developers

177
00:07:07,759 --> 00:07:09,440
though seniors might make the same

178
00:07:09,440 --> 00:07:11,680
mistake too

179
00:07:11,680 --> 00:07:14,400
tender flow analysis is used to compute

180
00:07:14,400 --> 00:07:17,360
possible values that a variable can hold

181
00:07:17,360 --> 00:07:19,919
at different points in the program

182
00:07:19,919 --> 00:07:20,639
determine

183
00:07:20,639 --> 00:07:23,199
how those values propagate through the

184
00:07:23,199 --> 00:07:24,000
program

185
00:07:24,000 --> 00:07:26,479
and where they are used so therefore

186
00:07:26,479 --> 00:07:28,479
this feature will let

187
00:07:28,479 --> 00:07:31,520
us evaluate in different points

188
00:07:31,520 --> 00:07:34,319
the phase of some line with secure data

189
00:07:34,319 --> 00:07:35,199
if data

190
00:07:35,199 --> 00:07:38,479
is misused in dangerous functions

191
00:07:38,479 --> 00:07:41,680
which will reveal some possible links or

192
00:07:41,680 --> 00:07:45,039
impactful flow so besides it's also got

193
00:07:45,039 --> 00:07:46,560
us to understand

194
00:07:46,560 --> 00:07:48,879
the other aspects of how a program

195
00:07:48,879 --> 00:07:50,160
behaves

196
00:07:50,160 --> 00:07:53,360
which leads to possible intriguing paths

197
00:07:53,360 --> 00:07:55,759
maybe

198
00:07:55,759 --> 00:07:59,599
so this query is a lot complicated than

199
00:07:59,599 --> 00:08:02,879
the one that i present before and and it

200
00:08:02,879 --> 00:08:04,240
is to find

201
00:08:04,240 --> 00:08:07,599
uh interesting functions arguments that

202
00:08:07,599 --> 00:08:09,280
are controllable by users

203
00:08:09,280 --> 00:08:12,400
inputs so with this query unable to

204
00:08:12,400 --> 00:08:15,440
see how program will behave

205
00:08:15,440 --> 00:08:18,639
after receiving more inputs okay

206
00:08:18,639 --> 00:08:22,400
change analysis so chat analysis differs

207
00:08:22,400 --> 00:08:24,160
from basic data flow

208
00:08:24,160 --> 00:08:26,400
in that it considers now value

209
00:08:26,400 --> 00:08:29,199
preserving steps in addition to normal

210
00:08:29,199 --> 00:08:32,159
data flow steps for example in the

211
00:08:32,159 --> 00:08:33,120
assignment

212
00:08:33,120 --> 00:08:36,399
y equals 10 plus comma plus

213
00:08:36,399 --> 00:08:39,679
10 if x is tended and

214
00:08:39,679 --> 00:08:42,559
y is also tempted even though there is

215
00:08:42,559 --> 00:08:42,958
no

216
00:08:42,958 --> 00:08:47,040
data flow from 10 to 10 plus comma

217
00:08:47,040 --> 00:08:50,160
plus 10. the 10 tracking

218
00:08:50,160 --> 00:08:53,360
is in the time tracking module

219
00:08:53,360 --> 00:08:56,959
and any time tracking or data data flow

220
00:08:56,959 --> 00:08:58,800
analysis query

221
00:08:58,800 --> 00:09:02,080
has three implicits and components one

222
00:09:02,080 --> 00:09:02,720
of which

223
00:09:02,720 --> 00:09:05,760
is optional and and

224
00:09:05,760 --> 00:09:09,040
in places component the in

225
00:09:09,040 --> 00:09:12,160
the explicit components are

226
00:09:12,160 --> 00:09:15,600
first one or more sources of potentially

227
00:09:15,600 --> 00:09:16,480
insecure

228
00:09:16,480 --> 00:09:19,600
or unsafe data represented by the 10

229
00:09:19,600 --> 00:09:20,320
tracking

230
00:09:20,320 --> 00:09:23,760
source class second

231
00:09:23,760 --> 00:09:27,120
one or more things to where the data

232
00:09:27,120 --> 00:09:30,160
or tens may flow represented by the 10

233
00:09:30,160 --> 00:09:30,720
tracking

234
00:09:30,720 --> 00:09:34,000
sync class and the third zero

235
00:09:34,000 --> 00:09:37,200
or more sanitizers represented by the

236
00:09:37,200 --> 00:09:40,480
sanitizer class

237
00:09:40,480 --> 00:09:43,519
so attend tracking or data flow query

238
00:09:43,519 --> 00:09:46,320
give results when there is the flow of

239
00:09:46,320 --> 00:09:47,120
data

240
00:09:47,120 --> 00:09:50,640
from a source to a sink which is not

241
00:09:50,640 --> 00:09:51,600
blocked by

242
00:09:51,600 --> 00:09:54,959
a sanitizer so these three components

243
00:09:54,959 --> 00:09:57,519
are bound together using time tracking

244
00:09:57,519 --> 00:09:59,360
fund configuration

245
00:09:59,360 --> 00:10:02,000
the purpose of this configuration is to

246
00:10:02,000 --> 00:10:04,640
specify exactly which sources

247
00:10:04,640 --> 00:10:06,720
and the things are relevant to the

248
00:10:06,720 --> 00:10:08,720
specific query

249
00:10:08,720 --> 00:10:11,519
and the last one is control flow graph

250
00:10:11,519 --> 00:10:12,959
analysis

251
00:10:12,959 --> 00:10:16,480
to be honest i don't see much

252
00:10:16,480 --> 00:10:19,680
as many use cases about this so

253
00:10:19,680 --> 00:10:22,720
i will just skip this one but if you are

254
00:10:22,720 --> 00:10:23,680
interested

255
00:10:23,680 --> 00:10:26,560
uh you can check out the code qrs page

256
00:10:26,560 --> 00:10:28,079
about the infos

257
00:10:28,079 --> 00:10:32,640
about the usage of this one now i will

258
00:10:32,640 --> 00:10:34,000
talk about practical

259
00:10:34,000 --> 00:10:37,440
usages of course ul uh they are

260
00:10:37,440 --> 00:10:40,720
basically things that i do every day to

261
00:10:40,720 --> 00:10:44,640
help with my research so my first trick

262
00:10:44,640 --> 00:10:45,360
is

263
00:10:45,360 --> 00:10:49,040
replicate cpes to find your cpus

264
00:10:49,040 --> 00:10:50,959
which basically means that we can model

265
00:10:50,959 --> 00:10:54,399
threats to find them somewhere else

266
00:10:54,399 --> 00:10:57,920
so why would we do this it is because

267
00:10:57,920 --> 00:11:00,160
that some vulnerabilities were faced by

268
00:11:00,160 --> 00:11:01,279
vendors

269
00:11:01,279 --> 00:11:04,079
but just mitigating reporters reported

270
00:11:04,079 --> 00:11:05,760
cases

271
00:11:05,760 --> 00:11:08,720
and by replicating these vulnerabilities

272
00:11:08,720 --> 00:11:11,040
by modeling with code ul

273
00:11:11,040 --> 00:11:13,519
it is possibly to find the same flow

274
00:11:13,519 --> 00:11:16,079
through other pages

275
00:11:16,079 --> 00:11:19,279
and be be reminded that you have to

276
00:11:19,279 --> 00:11:20,880
write your query

277
00:11:20,880 --> 00:11:24,160
more generalized so as to find more

278
00:11:24,160 --> 00:11:27,040
local the same loopholes in other

279
00:11:27,040 --> 00:11:28,079
repositories

280
00:11:28,079 --> 00:11:31,120
or other code bases

281
00:11:31,120 --> 00:11:33,279
so this is what we call experience

282
00:11:33,279 --> 00:11:34,800
analysis

283
00:11:34,800 --> 00:11:37,000
the process of using the

284
00:11:37,000 --> 00:11:38,399
non-vulnerability

285
00:11:38,399 --> 00:11:41,680
as a seed to find similar problems in

286
00:11:41,680 --> 00:11:44,640
other code bases

287
00:11:44,640 --> 00:11:47,040
and there are many variance analysis

288
00:11:47,040 --> 00:11:48,079
reports

289
00:11:48,079 --> 00:11:51,440
on github security lab if any of you

290
00:11:51,440 --> 00:11:54,639
is interested i personally recommend you

291
00:11:54,639 --> 00:11:58,240
take a look at them okay so let's check

292
00:11:58,240 --> 00:11:59,519
out this one

293
00:11:59,519 --> 00:12:02,399
so this report is actually grabbed from

294
00:12:02,399 --> 00:12:04,079
hacker one

295
00:12:04,079 --> 00:12:07,680
so it says she based host and validation

296
00:12:07,680 --> 00:12:09,440
review expression

297
00:12:09,440 --> 00:12:11,920
all right so it's actually the regular

298
00:12:11,920 --> 00:12:14,800
expressions used in key based

299
00:12:14,800 --> 00:12:18,240
extension and look at those two regular

300
00:12:18,240 --> 00:12:19,279
expressions

301
00:12:19,279 --> 00:12:22,480
could you identify the vulnerability

302
00:12:22,480 --> 00:12:24,800
let me give you a few more seconds to

303
00:12:24,800 --> 00:12:26,560
think about it

304
00:12:26,560 --> 00:12:39,839
so let's press domain

305
00:13:04,839 --> 00:13:08,480
okay you found it

306
00:13:10,079 --> 00:13:12,800
all right so the issue stands from the

307
00:13:12,800 --> 00:13:15,200
fact that it used dots

308
00:13:15,200 --> 00:13:17,839
instead of the real dots in this two

309
00:13:17,839 --> 00:13:20,880
regular expressions

310
00:13:20,880 --> 00:13:23,440
so it means that once a hacker owned a

311
00:13:23,440 --> 00:13:24,720
domain like

312
00:13:24,720 --> 00:13:29,440
totally not twitter.com as you see

313
00:13:29,440 --> 00:13:32,399
in this picture it can trigger this

314
00:13:32,399 --> 00:13:34,160
tension to pop out

315
00:13:34,160 --> 00:13:37,920
under the wrong context and to steal

316
00:13:37,920 --> 00:13:41,680
like the password or something

317
00:13:42,160 --> 00:13:45,279
so how about let's model this flow

318
00:13:45,279 --> 00:13:48,560
so the first step is to find all the

319
00:13:48,560 --> 00:13:50,160
occurrence

320
00:13:50,160 --> 00:13:53,440
you know this uh this case is very

321
00:13:53,440 --> 00:13:55,120
suitable for

322
00:13:55,120 --> 00:13:57,839
using uh standard analysis since we have

323
00:13:57,839 --> 00:13:59,519
said that before

324
00:13:59,519 --> 00:14:03,360
that it is very very suitable to use

325
00:14:03,360 --> 00:14:06,639
aesthetic analysis to do search

326
00:14:06,639 --> 00:14:10,639
for static things so right now we use

327
00:14:10,639 --> 00:14:12,320
static analysis to do

328
00:14:12,320 --> 00:14:16,000
the analysis so step one is to

329
00:14:16,000 --> 00:14:19,920
find all occurrence uh

330
00:14:19,920 --> 00:14:22,639
so we find all the occurrence of the

331
00:14:22,639 --> 00:14:24,480
regular expressions functions

332
00:14:24,480 --> 00:14:27,839
constructor one and then the step two we

333
00:14:27,839 --> 00:14:28,320
find

334
00:14:28,320 --> 00:14:32,160
all occurrence with dot start inside

335
00:14:32,160 --> 00:14:35,199
so we just reduce the snippets that we

336
00:14:35,199 --> 00:14:38,720
wrote before so after

337
00:14:38,720 --> 00:14:41,680
writing this query let's apply to other

338
00:14:41,680 --> 00:14:43,199
code phases to see

339
00:14:43,199 --> 00:14:46,000
if uh if it is possible to find out on

340
00:14:46,000 --> 00:14:47,040
the same flow

341
00:14:47,040 --> 00:14:50,639
in other code basis

342
00:14:50,800 --> 00:14:54,240
so boom yes

343
00:14:54,240 --> 00:14:58,079
i did find the same mistake

344
00:14:58,079 --> 00:15:01,120
in the electron code base so basically

345
00:15:01,120 --> 00:15:02,800
these vulnerabilities

346
00:15:02,800 --> 00:15:06,240
impact the the electrons from

347
00:15:06,240 --> 00:15:10,839
e from 1.2.2 to

348
00:15:10,839 --> 00:15:13,920
42.12 this rebel expression failure

349
00:15:13,920 --> 00:15:16,399
upon checking the website's url to

350
00:15:16,399 --> 00:15:18,880
activate the web extension

351
00:15:18,880 --> 00:15:21,760
so electron maybe some of you have never

352
00:15:21,760 --> 00:15:23,519
heard of this before

353
00:15:23,519 --> 00:15:26,959
so let me let me explain a little bit of

354
00:15:26,959 --> 00:15:30,079
to you so electron is a framework built

355
00:15:30,079 --> 00:15:32,639
on top of node.js and chromium

356
00:15:32,639 --> 00:15:35,040
so that developers write cross-platform

357
00:15:35,040 --> 00:15:37,839
desktop applications using javascript

358
00:15:37,839 --> 00:15:41,199
actually html and css so the

359
00:15:41,199 --> 00:15:43,199
vulnerability here affects the same

360
00:15:43,199 --> 00:15:44,560
functionality provided

361
00:15:44,560 --> 00:15:47,519
by chromium to that developers load

362
00:15:47,519 --> 00:15:51,120
extensions in electron

363
00:15:52,160 --> 00:15:55,199
alright so the patch the patch is really

364
00:15:55,199 --> 00:15:56,240
simple

365
00:15:56,240 --> 00:15:58,800
so uh electron team just make sure that

366
00:15:58,800 --> 00:16:00,320
all special characters

367
00:16:00,320 --> 00:16:03,920
get escaped get us kept correctly

368
00:16:03,920 --> 00:16:09,519
and that is totally that is fine

369
00:16:09,519 --> 00:16:11,600
so here is another case that i found

370
00:16:11,600 --> 00:16:13,040
recently

371
00:16:13,040 --> 00:16:15,680
due to a penetration testing case i

372
00:16:15,680 --> 00:16:17,600
stumbled upon this framework

373
00:16:17,600 --> 00:16:20,720
for the first time besides i noticed

374
00:16:20,720 --> 00:16:21,759
that it used an

375
00:16:21,759 --> 00:16:24,639
endpoint to serve different types of

376
00:16:24,639 --> 00:16:26,399
static files

377
00:16:26,399 --> 00:16:28,639
not a common implementation as you can

378
00:16:28,639 --> 00:16:30,080
see on the slide

379
00:16:30,080 --> 00:16:32,720
[Music]

380
00:16:32,720 --> 00:16:36,720
so use a base64 encoded string

381
00:16:36,720 --> 00:16:40,240
to represent the real path that

382
00:16:40,240 --> 00:16:44,160
this library is about to load

383
00:16:45,199 --> 00:16:49,360
so here is basically what it works

384
00:16:49,360 --> 00:16:52,560
so we provided a basic stick for encode

385
00:16:52,560 --> 00:16:53,839
string of the past

386
00:16:53,839 --> 00:16:57,759
and then he will return its content

387
00:16:57,759 --> 00:16:59,680
so after checking all the

388
00:16:59,680 --> 00:17:02,560
vulnerabilities it had before

389
00:17:02,560 --> 00:17:05,760
it seems that this library uh

390
00:17:05,760 --> 00:17:08,959
prom is prompt to local file inclusion

391
00:17:08,959 --> 00:17:12,160
issues for several times seems to be a

392
00:17:12,160 --> 00:17:14,559
good target for us to do the variance

393
00:17:14,559 --> 00:17:17,119
analysis

394
00:17:17,119 --> 00:17:19,679
besides as you can see on the slide on

395
00:17:19,679 --> 00:17:22,000
broccoli form seems to be a good target

396
00:17:22,000 --> 00:17:23,359
as well

397
00:17:23,359 --> 00:17:25,839
but we will just do variance analysis

398
00:17:25,839 --> 00:17:26,720
toward

399
00:17:26,720 --> 00:17:30,400
chronic dependency this time

400
00:17:31,679 --> 00:17:34,880
so uh this is this is how a local file

401
00:17:34,880 --> 00:17:37,280
inclusion issue happened to the command

402
00:17:37,280 --> 00:17:39,200
dependency library

403
00:17:39,200 --> 00:17:43,120
really straightforward right so we just

404
00:17:43,120 --> 00:17:48,000
give this library the past

405
00:17:48,000 --> 00:17:51,520
the past that is about to be loaded

406
00:17:51,520 --> 00:17:54,559
by this library so for example

407
00:17:54,559 --> 00:17:57,720
as you can see we specify

408
00:17:57,720 --> 00:18:01,200
web.config to be loaded

409
00:18:01,200 --> 00:18:04,400
and this library just read the contents

410
00:18:04,400 --> 00:18:05,360
of it

411
00:18:05,360 --> 00:18:09,440
and send it to our response

412
00:18:09,440 --> 00:18:12,559
to our http response so

413
00:18:12,559 --> 00:18:16,400
this this is a liquefied inclusion

414
00:18:16,400 --> 00:18:17,440
issues happened

415
00:18:17,440 --> 00:18:21,600
before so

416
00:18:21,600 --> 00:18:24,880
yes the same we just model this flow and

417
00:18:24,880 --> 00:18:28,160
try to find the same flow or the similar

418
00:18:28,160 --> 00:18:29,360
flow

419
00:18:29,360 --> 00:18:31,600
happening to this fine dependency with

420
00:18:31,600 --> 00:18:33,919
the lattice version

421
00:18:33,919 --> 00:18:37,679
so uh before we

422
00:18:37,679 --> 00:18:40,960
model this threat we need to know

423
00:18:40,960 --> 00:18:44,640
that in asp.net it is common to

424
00:18:44,640 --> 00:18:45,600
implement

425
00:18:45,600 --> 00:18:48,960
the rhttp handler interface

426
00:18:48,960 --> 00:18:53,120
in order to intercept user's request

427
00:18:53,120 --> 00:18:56,000
and therefore those classes are good

428
00:18:56,000 --> 00:18:57,760
sources for us

429
00:18:57,760 --> 00:19:02,160
to intercept users requests

430
00:19:02,160 --> 00:19:05,039
because it will take a too much of my

431
00:19:05,039 --> 00:19:06,080
time to cover

432
00:19:06,080 --> 00:19:09,760
all steps that i did about how i trust

433
00:19:09,760 --> 00:19:10,000
the

434
00:19:10,000 --> 00:19:12,520
court to find the root cause of this two

435
00:19:12,520 --> 00:19:14,559
vulnerabilities

436
00:19:14,559 --> 00:19:17,679
i will skip them then however

437
00:19:17,679 --> 00:19:20,880
it roughly goes like this there is a

438
00:19:20,880 --> 00:19:22,160
user controllable

439
00:19:22,160 --> 00:19:24,640
input which will be intercepted by the

440
00:19:24,640 --> 00:19:26,240
classes implementing

441
00:19:26,240 --> 00:19:30,320
our http handler interface

442
00:19:30,320 --> 00:19:33,679
recall then source and then there is a

443
00:19:33,679 --> 00:19:35,360
weak points that will

444
00:19:35,360 --> 00:19:38,080
that will read contents of files and

445
00:19:38,080 --> 00:19:40,880
send back as the response body

446
00:19:40,880 --> 00:19:43,600
after reviewing the source code we know

447
00:19:43,600 --> 00:19:44,240
that

448
00:19:44,240 --> 00:19:47,280
it is white file to string so we

449
00:19:47,280 --> 00:19:50,480
set it sync

450
00:19:51,039 --> 00:19:53,440
in this case change analysis is

451
00:19:53,440 --> 00:19:54,400
definitely

452
00:19:54,400 --> 00:19:58,000
definitely the go-to after modeling with

453
00:19:58,000 --> 00:20:01,360
code ql to find those two old flaws

454
00:20:01,360 --> 00:20:04,799
i could successfully discover a new one

455
00:20:04,799 --> 00:20:08,000
with the scent called ql query

456
00:20:08,000 --> 00:20:11,679
with a slice modification

457
00:20:11,679 --> 00:20:14,320
so the modification literally this means

458
00:20:14,320 --> 00:20:16,320
another possible bypass

459
00:20:16,320 --> 00:20:21,039
of its patch to those two vulnerability

460
00:20:21,039 --> 00:20:24,720
so until this step

461
00:20:24,720 --> 00:20:28,480
we successfully found a new local file

462
00:20:28,480 --> 00:20:29,280
inclusion

463
00:20:29,280 --> 00:20:33,520
issue within client dependency

464
00:20:33,520 --> 00:20:36,880
from 1.8.2.1

465
00:20:36,880 --> 00:20:40,880
to 1.9.8

466
00:20:43,520 --> 00:20:48,480
so let me show you some detailed query

467
00:20:48,480 --> 00:20:51,600
so this one is source node the step one

468
00:20:51,600 --> 00:20:52,400
is to find

469
00:20:52,400 --> 00:20:54,480
all methods that have the qualifying

470
00:20:54,480 --> 00:20:56,840
news starting with

471
00:20:56,840 --> 00:21:00,799
system.web.i http handler

472
00:21:00,799 --> 00:21:03,600
and right on the right hand side source

473
00:21:03,600 --> 00:21:04,799
nodes are set

474
00:21:04,799 --> 00:21:08,240
as their parameters

475
00:21:10,000 --> 00:21:12,720
on your left things are set as the

476
00:21:12,720 --> 00:21:15,679
functions we mentioned before

477
00:21:15,679 --> 00:21:19,840
the copper is of the previous two floors

478
00:21:19,840 --> 00:21:23,120
and the right hand side is our extract

479
00:21:23,120 --> 00:21:26,080
additional tender steps it looks very

480
00:21:26,080 --> 00:21:28,000
complicated right

481
00:21:28,000 --> 00:21:31,440
it is it is hard to explain

482
00:21:31,440 --> 00:21:34,240
all this but this requires a lot of

483
00:21:34,240 --> 00:21:36,320
efforts to read the source code

484
00:21:36,320 --> 00:21:39,039
and understand the group codes of the

485
00:21:39,039 --> 00:21:40,720
vulnerabilities

486
00:21:40,720 --> 00:21:43,840
and figure out how under what situations

487
00:21:43,840 --> 00:21:45,760
shoot the nodes to be

488
00:21:45,760 --> 00:21:48,320
tempted

489
00:21:49,120 --> 00:21:51,919
i want to state this one more time to

490
00:21:51,919 --> 00:21:53,760
consider the code ul

491
00:21:53,760 --> 00:21:56,080
is a tool that will automatically find

492
00:21:56,080 --> 00:21:58,320
from our business for you

493
00:21:58,320 --> 00:22:01,280
it needs to be trend it needs to be

494
00:22:01,280 --> 00:22:02,000
trend

495
00:22:02,000 --> 00:22:05,679
and operated by professionals by nature

496
00:22:05,679 --> 00:22:09,520
in order to find bugs

497
00:22:10,400 --> 00:22:13,039
apart from finding box we can also use

498
00:22:13,039 --> 00:22:14,400
code ql

499
00:22:14,400 --> 00:22:18,559
as a pattern finder let me show you

500
00:22:18,559 --> 00:22:22,080
so because tokyo said it as a semantic

501
00:22:22,080 --> 00:22:24,960
code analysis engine it is naturally

502
00:22:24,960 --> 00:22:27,120
that you can use it to find something

503
00:22:27,120 --> 00:22:30,399
that you are targeting

504
00:22:31,120 --> 00:22:33,280
so uh these are common methodologies

505
00:22:33,280 --> 00:22:35,679
that we use in our daily lives

506
00:22:35,679 --> 00:22:38,840
let's check what let's check them one by

507
00:22:38,840 --> 00:22:41,280
one

508
00:22:41,280 --> 00:22:44,559
so uh the first one grab strings regular

509
00:22:44,559 --> 00:22:45,919
expressions

510
00:22:45,919 --> 00:22:49,120
we are all very familiar with this right

511
00:22:49,120 --> 00:22:52,240
grab to find something statically

512
00:22:52,240 --> 00:22:54,320
regular expression to find something

513
00:22:54,320 --> 00:22:56,000
with patterns

514
00:22:56,000 --> 00:22:58,000
also they are easy to use they are

515
00:22:58,000 --> 00:23:00,720
pretty vulnerable to false alerts

516
00:23:00,720 --> 00:23:02,880
it is because that this kind of

517
00:23:02,880 --> 00:23:08,000
searching isn't contest aware

518
00:23:08,000 --> 00:23:10,720
it's it is also hard to track back to

519
00:23:10,720 --> 00:23:13,600
the origins

520
00:23:14,080 --> 00:23:17,679
the second one uml class diagram

521
00:23:17,679 --> 00:23:21,039
the uml class diagram is a graphical

522
00:23:21,039 --> 00:23:23,120
notation used to construct and

523
00:23:23,120 --> 00:23:26,400
visualize object oriented systems

524
00:23:26,400 --> 00:23:29,679
a class diagram in the unified modeling

525
00:23:29,679 --> 00:23:33,440
languages uml is a type of static

526
00:23:33,440 --> 00:23:34,720
structure diagram

527
00:23:34,720 --> 00:23:36,559
that describes the structure of the

528
00:23:36,559 --> 00:23:37,760
system by showing

529
00:23:37,760 --> 00:23:41,520
the system's classes attributes

530
00:23:41,520 --> 00:23:46,559
operations and relations among objects

531
00:23:46,720 --> 00:23:49,200
it allows penetration tester to find the

532
00:23:49,200 --> 00:23:50,640
relationships of an

533
00:23:50,640 --> 00:23:54,240
object among other objects and sometimes

534
00:23:54,240 --> 00:23:56,159
it is really useful when you are

535
00:23:56,159 --> 00:23:58,400
searching or you are dealing with java

536
00:23:58,400 --> 00:23:58,880
or

537
00:23:58,880 --> 00:24:01,600
net based object because they are

538
00:24:01,600 --> 00:24:05,840
basically object oriented

539
00:24:06,640 --> 00:24:12,240
so here are some class diagrams in uml

540
00:24:12,799 --> 00:24:17,200
and here is a use case so a typical case

541
00:24:17,200 --> 00:24:18,559
i come up with

542
00:24:18,559 --> 00:24:21,600
is the cve 2018

543
00:24:21,600 --> 00:24:25,120
100 861 a jenkins

544
00:24:25,120 --> 00:24:28,559
remote code execution vulnerability

545
00:24:28,559 --> 00:24:31,039
so the rationale of the issue is the

546
00:24:31,039 --> 00:24:32,080
loose constraint

547
00:24:32,080 --> 00:24:34,640
set while doing routing matching and

548
00:24:34,640 --> 00:24:36,480
dispatching

549
00:24:36,480 --> 00:24:38,960
you can set it on the slide that the

550
00:24:38,960 --> 00:24:41,279
stapler microphone will stamp the smooth

551
00:24:41,279 --> 00:24:43,520
object to urls

552
00:24:43,520 --> 00:24:46,159
therefore all we need to do is to find

553
00:24:46,159 --> 00:24:47,039
good gadgets

554
00:24:47,039 --> 00:24:49,520
to chant all together to achieve

555
00:24:49,520 --> 00:24:52,960
remarkable execution

556
00:24:54,320 --> 00:24:57,600
and of course we can use uml to get our

557
00:24:57,600 --> 00:25:00,320
head around this challenge you can

558
00:25:00,320 --> 00:25:02,240
clearly see how it could be used so

559
00:25:02,240 --> 00:25:02,960
useful

560
00:25:02,960 --> 00:25:05,760
in this case

561
00:25:08,000 --> 00:25:11,760
all right so here comes our code 2 out

562
00:25:11,760 --> 00:25:14,880
so i i have said that it gives you

563
00:25:14,880 --> 00:25:17,520
extensive libraries to you so it could

564
00:25:17,520 --> 00:25:19,200
be easily used to find

565
00:25:19,200 --> 00:25:22,799
things besides it gives you results

566
00:25:22,799 --> 00:25:24,400
based on context and

567
00:25:24,400 --> 00:25:27,440
therefore these results are accurate and

568
00:25:27,440 --> 00:25:30,159
the minimum four

569
00:25:30,640 --> 00:25:33,919
so let me take the umbrella case as an

570
00:25:33,919 --> 00:25:34,559
example

571
00:25:34,559 --> 00:25:38,159
here i said that i successfully found a

572
00:25:38,159 --> 00:25:39,760
local file inclusion

573
00:25:39,760 --> 00:25:44,080
that affects client dependency from 1821

574
00:25:44,080 --> 00:25:47,919
to 198 nevertheless in order to achieve

575
00:25:47,919 --> 00:25:49,600
vermico execution

576
00:25:49,600 --> 00:25:51,360
we still need to find an entry point

577
00:25:51,360 --> 00:25:53,039
that doesn't require us to be

578
00:25:53,039 --> 00:25:56,400
authenticated user so how do we find

579
00:25:56,400 --> 00:25:58,559
easy to use bridge together remember

580
00:25:58,559 --> 00:26:03,279
execution yes how about using cultural

581
00:26:03,279 --> 00:26:05,279
to find those pages

582
00:26:05,279 --> 00:26:07,919
we can not only find our authenticated

583
00:26:07,919 --> 00:26:09,679
accessible pages

584
00:26:09,679 --> 00:26:12,000
but have a human readable query to share

585
00:26:12,000 --> 00:26:13,679
to the community

586
00:26:13,679 --> 00:26:15,919
or we can also keep it somewhere for

587
00:26:15,919 --> 00:26:18,480
reference

588
00:26:19,440 --> 00:26:22,159
so once we get a list of pages that we

589
00:26:22,159 --> 00:26:23,200
can directly

590
00:26:23,200 --> 00:26:26,480
access all i need to do is to pick up a

591
00:26:26,480 --> 00:26:28,799
common page that every copy of it

592
00:26:28,799 --> 00:26:33,679
of unbroken cement has would have

593
00:26:33,720 --> 00:26:36,960
umbracopen.sps seems to be a good target

594
00:26:36,960 --> 00:26:38,880
we will talk about how to achieve

595
00:26:38,880 --> 00:26:41,600
remarkable execution later

596
00:26:41,600 --> 00:26:44,159
so here comes our last one regression

597
00:26:44,159 --> 00:26:45,440
test

598
00:26:45,440 --> 00:26:48,480
in this section i want to talk about ssd

599
00:26:48,480 --> 00:26:49,520
llc

600
00:26:49,520 --> 00:26:52,799
and how you can use how you can apply

601
00:26:52,799 --> 00:26:57,039
codeql to your sdlc

602
00:26:57,039 --> 00:27:01,200
so what is ssdoc aka

603
00:27:01,200 --> 00:27:04,400
sdlc is the initialization of secure

604
00:27:04,400 --> 00:27:07,279
software development lifecycle

605
00:27:07,279 --> 00:27:10,240
simply put a security activity to the

606
00:27:10,240 --> 00:27:11,679
system development

607
00:27:11,679 --> 00:27:15,840
lifecycle preferably in every phase of

608
00:27:15,840 --> 00:27:19,840
sdlc and formalized if you have heard of

609
00:27:19,840 --> 00:27:20,320
dex

610
00:27:20,320 --> 00:27:23,360
devsecops before it is actually part of

611
00:27:23,360 --> 00:27:25,520
it

612
00:27:26,000 --> 00:27:29,679
so how how could developers apply codeqo

613
00:27:29,679 --> 00:27:33,120
to sdlc firstly

614
00:27:33,120 --> 00:27:35,039
we can write simple queries to find

615
00:27:35,039 --> 00:27:36,880
hardware strings

616
00:27:36,880 --> 00:27:40,240
sensitive data api keys

617
00:27:40,240 --> 00:27:42,880
or misuse dangerous functions and

618
00:27:42,880 --> 00:27:44,240
central

619
00:27:44,240 --> 00:27:47,039
then we can gradually gradually rewrite

620
00:27:47,039 --> 00:27:49,039
our existing unit test

621
00:27:49,039 --> 00:27:52,080
with codeql if possible

622
00:27:52,080 --> 00:27:55,440
or we could also just import lgtm sets

623
00:27:55,440 --> 00:27:56,640
of rules

624
00:27:56,640 --> 00:28:00,399
especially the security one additionally

625
00:28:00,399 --> 00:28:03,840
since code2l is community driven

626
00:28:03,840 --> 00:28:07,120
this is a community driven project it is

627
00:28:07,120 --> 00:28:09,600
also possible to find others for written

628
00:28:09,600 --> 00:28:10,799
queries

629
00:28:10,799 --> 00:28:14,840
from like public researches or public

630
00:28:14,840 --> 00:28:16,159
repositories

631
00:28:16,159 --> 00:28:18,399
following are some rules that are great

632
00:28:18,399 --> 00:28:22,240
from the lrgtm's official report

633
00:28:22,240 --> 00:28:25,120
so this one is to check if there is any

634
00:28:25,120 --> 00:28:26,159
client-side

635
00:28:26,159 --> 00:28:29,279
url redirection in the code base

636
00:28:29,279 --> 00:28:31,840
the lgtm team has used this test

637
00:28:31,840 --> 00:28:32,799
analysis

638
00:28:32,799 --> 00:28:35,840
to track if a user controllable input

639
00:28:35,840 --> 00:28:38,399
is possible to control to which the

640
00:28:38,399 --> 00:28:40,960
website will redirect

641
00:28:40,960 --> 00:28:44,320
this this is called open redirect

642
00:28:44,320 --> 00:28:46,799
vulnerability

643
00:28:46,799 --> 00:28:49,760
and this one is to check if there exists

644
00:28:49,760 --> 00:28:51,360
any user controllable

645
00:28:51,360 --> 00:28:54,240
inputs that will be read and parsed and

646
00:28:54,240 --> 00:28:55,039
securely

647
00:28:55,039 --> 00:28:59,279
by a xml parser so this often results in

648
00:28:59,279 --> 00:29:02,320
excess e-injection examinal external

649
00:29:02,320 --> 00:29:05,360
entity injection

650
00:29:05,919 --> 00:29:08,240
and this query is the outcome of a

651
00:29:08,240 --> 00:29:09,840
public research from

652
00:29:09,840 --> 00:29:12,799
pontester doing a thera's analysis

653
00:29:12,799 --> 00:29:16,600
against cve 2018

654
00:29:16,600 --> 00:29:18,399
166621

655
00:29:18,399 --> 00:29:20,880
so this issue description said that a

656
00:29:20,880 --> 00:29:22,960
java expression language

657
00:29:22,960 --> 00:29:24,640
injection vulnerability has been

658
00:29:24,640 --> 00:29:27,360
discovered in nasa's repository manager

659
00:29:27,360 --> 00:29:28,240
3.

660
00:29:28,240 --> 00:29:30,320
he thought that is a good target for

661
00:29:30,320 --> 00:29:32,159
doing various analysis

662
00:29:32,159 --> 00:29:34,559
and he did find different kinds of

663
00:29:34,559 --> 00:29:35,840
variants

664
00:29:35,840 --> 00:29:38,880
yellow injections at the end so the

665
00:29:38,880 --> 00:29:39,760
journey is

666
00:29:39,760 --> 00:29:41,760
fun and you can learn from him by

667
00:29:41,760 --> 00:29:43,679
utilizing the co-q and the powerful

668
00:29:43,679 --> 00:29:45,440
libraries to circumvent a

669
00:29:45,440 --> 00:29:48,880
variety of limitations so i highly

670
00:29:48,880 --> 00:29:49,679
recommend you

671
00:29:49,679 --> 00:29:52,799
take a look at it

672
00:29:53,279 --> 00:29:56,240
and this one utilize code ql to write a

673
00:29:56,240 --> 00:29:58,080
query that will find heap-based

674
00:29:58,080 --> 00:29:59,919
right-buffer overflows

675
00:29:59,919 --> 00:30:03,279
caused by main copy a soft scion

676
00:30:03,279 --> 00:30:05,919
from cyber arc successfully discovers

677
00:30:05,919 --> 00:30:08,240
seven new vulnerabilities in this

678
00:30:08,240 --> 00:30:08,799
popular

679
00:30:08,799 --> 00:30:13,679
popular open source framework ffmpeg

680
00:30:13,679 --> 00:30:16,240
okay so right now let's talk about the

681
00:30:16,240 --> 00:30:18,399
vulnerability that i found

682
00:30:18,399 --> 00:30:21,520
the client dependency massacre because

683
00:30:21,520 --> 00:30:23,600
the vulnerability their fault

684
00:30:23,600 --> 00:30:25,919
actually affected the library used in

685
00:30:25,919 --> 00:30:27,279
umbraco

686
00:30:27,279 --> 00:30:30,480
each and every installation of the cms

687
00:30:30,480 --> 00:30:32,799
would possibly get affected

688
00:30:32,799 --> 00:30:34,799
and the affected installations could be

689
00:30:34,799 --> 00:30:38,159
dated back to 2015.

690
00:30:38,159 --> 00:30:41,279
do you know even microsoft use this

691
00:30:41,279 --> 00:30:42,880
umbraco cms

692
00:30:42,880 --> 00:30:45,919
for their forums like sp forums

693
00:30:45,919 --> 00:30:48,960
or rs forums

694
00:30:48,960 --> 00:30:51,840
in fact there are so many websites using

695
00:30:51,840 --> 00:30:54,559
umbraco

696
00:30:54,880 --> 00:30:58,000
so let's recap this vulnerability once

697
00:30:58,000 --> 00:30:58,480
we get

698
00:30:58,480 --> 00:31:00,640
a list of pages that we can access

699
00:31:00,640 --> 00:31:02,799
without authentication

700
00:31:02,799 --> 00:31:05,200
all i need to do is to pick up a common

701
00:31:05,200 --> 00:31:05,840
page

702
00:31:05,840 --> 00:31:09,760
that every copy of umbraco would have

703
00:31:09,760 --> 00:31:12,399
and the marco paint.spx seems to be a

704
00:31:12,399 --> 00:31:14,559
good target for us

705
00:31:14,559 --> 00:31:18,399
how do we get our ce we actually can get

706
00:31:18,399 --> 00:31:19,279
rce

707
00:31:19,279 --> 00:31:23,519
by leveraging machine key

708
00:31:23,840 --> 00:31:26,720
so first of all do you know what is

709
00:31:26,720 --> 00:31:28,640
machine key

710
00:31:28,640 --> 00:31:30,880
the machine key is like the golden key

711
00:31:30,880 --> 00:31:32,000
for various security

712
00:31:32,000 --> 00:31:35,360
operations in asp.net it is

713
00:31:35,360 --> 00:31:38,080
like if you know if you get to see the

714
00:31:38,080 --> 00:31:39,679
value of the key

715
00:31:39,679 --> 00:31:43,279
you own the server the key is used in

716
00:31:43,279 --> 00:31:44,640
various components

717
00:31:44,640 --> 00:31:47,200
and will be automatically and uniquely

718
00:31:47,200 --> 00:31:48,320
generated

719
00:31:48,320 --> 00:31:51,840
when you first initiate the cms

720
00:31:51,840 --> 00:31:54,559
or developers can also specify their

721
00:31:54,559 --> 00:31:55,120
wants

722
00:31:55,120 --> 00:31:58,399
to support platforms

723
00:31:58,399 --> 00:32:01,039
so if you google how will machine key

724
00:32:01,039 --> 00:32:02,960
being misused later remote code

725
00:32:02,960 --> 00:32:04,320
execution

726
00:32:04,320 --> 00:32:07,120
you will probably find some articles

727
00:32:07,120 --> 00:32:09,120
definitely all developers should pay

728
00:32:09,120 --> 00:32:10,559
attention to it

729
00:32:10,559 --> 00:32:13,279
should know how dangerous it would be if

730
00:32:13,279 --> 00:32:16,960
you link the key to the takers

731
00:32:17,440 --> 00:32:21,279
so i said that the main components count

732
00:32:21,279 --> 00:32:24,640
on machine key to handle the

733
00:32:24,640 --> 00:32:28,159
decryption or the validation things

734
00:32:28,159 --> 00:32:32,080
so one of the components few states

735
00:32:32,080 --> 00:32:35,200
is the one that i use the leverage

736
00:32:35,200 --> 00:32:38,880
to get to the rce the few states

737
00:32:38,880 --> 00:32:41,600
basically stores client base date such

738
00:32:41,600 --> 00:32:43,760
as values or options

739
00:32:43,760 --> 00:32:46,159
it is used commonly in waveform

740
00:32:46,159 --> 00:32:48,960
architecture

741
00:32:49,760 --> 00:32:52,480
because asp does not use machine key to

742
00:32:52,480 --> 00:32:53,440
decrypt and

743
00:32:53,440 --> 00:32:56,320
validate the underscore view state or

744
00:32:56,320 --> 00:32:57,679
phone's authentication

745
00:32:57,679 --> 00:33:01,600
and so on if they are tapered on the key

746
00:33:01,600 --> 00:33:04,159
they can basically craft any objects the

747
00:33:04,159 --> 00:33:06,080
sb.net will verify

748
00:33:06,080 --> 00:33:09,440
and then accept which is the fairly

749
00:33:09,440 --> 00:33:12,720
disaster in that case

750
00:33:12,720 --> 00:33:15,760
undertaker can craft a mellite object

751
00:33:15,760 --> 00:33:18,480
to the server to trigger the unwanted

752
00:33:18,480 --> 00:33:19,760
deceleration

753
00:33:19,760 --> 00:33:23,279
and end up rce so here

754
00:33:23,279 --> 00:33:26,559
is the demonstration video of the

755
00:33:26,559 --> 00:33:31,918
rce uh against unbroken seven

756
00:33:32,799 --> 00:33:36,799
so as you can see the first step

757
00:33:36,799 --> 00:33:39,919
that i'm gonna do is to

758
00:33:39,919 --> 00:33:43,279
craft history craft

759
00:33:43,279 --> 00:33:46,159
uh is to leverage the vulnerabilities

760
00:33:46,159 --> 00:33:48,000
local file exclusion issue

761
00:33:48,000 --> 00:33:53,840
to read the contents of web.config

762
00:33:56,159 --> 00:34:00,159
so after reading the content

763
00:34:00,159 --> 00:34:04,799
then i will use the wise of serial.net

764
00:34:04,799 --> 00:34:09,918
to help me to prepare the exploit

765
00:34:11,440 --> 00:34:14,159
and as you can see that entry point is

766
00:34:14,159 --> 00:34:15,440
on broccopin

767
00:34:15,440 --> 00:34:18,079
spx

768
00:34:19,119 --> 00:34:21,599
and the command that we are about to

769
00:34:21,599 --> 00:34:22,239
execute

770
00:34:22,239 --> 00:34:25,280
is who am i so right now let's

771
00:34:25,280 --> 00:34:28,800
execute this exploit

772
00:34:32,399 --> 00:34:35,679
okay so you see that uh our

773
00:34:35,679 --> 00:34:38,560
output of the comment has been printed

774
00:34:38,560 --> 00:34:40,000
out

775
00:34:40,000 --> 00:34:42,320
now we are moving to our last boiling

776
00:34:42,320 --> 00:34:43,359
point

777
00:34:43,359 --> 00:34:46,960
conclusion so i know your mind might

778
00:34:46,960 --> 00:34:48,000
just

779
00:34:48,000 --> 00:34:49,760
you know might have been overwhelmed

780
00:34:49,760 --> 00:34:52,239
with confusion if you do not have any

781
00:34:52,239 --> 00:34:52,879
experience

782
00:34:52,879 --> 00:34:56,079
using codeql before well i hope that

783
00:34:56,079 --> 00:34:59,200
from now on you will start using it and

784
00:34:59,200 --> 00:35:01,200
share your custom queries to the

785
00:35:01,200 --> 00:35:02,560
community

786
00:35:02,560 --> 00:35:05,440
in the future while culture starts

787
00:35:05,440 --> 00:35:06,160
supporting

788
00:35:06,160 --> 00:35:09,040
more and more more and more languages it

789
00:35:09,040 --> 00:35:10,880
can cover a wider range of

790
00:35:10,880 --> 00:35:13,440
libraries and code bases which means

791
00:35:13,440 --> 00:35:15,200
that we are able to cover

792
00:35:15,200 --> 00:35:18,320
more targets and do

793
00:35:18,320 --> 00:35:21,359
various analysis more and secure

794
00:35:21,359 --> 00:35:24,480
more projects besides think of it

795
00:35:24,480 --> 00:35:26,720
simply at least it's just a bunch of

796
00:35:26,720 --> 00:35:28,839
descriptions with no real things to

797
00:35:28,839 --> 00:35:30,320
replicate or

798
00:35:30,320 --> 00:35:33,280
prevention suggestions to follow in most

799
00:35:33,280 --> 00:35:34,400
cases

800
00:35:34,400 --> 00:35:36,800
with cultural however we are able to

801
00:35:36,800 --> 00:35:37,920
model threats

802
00:35:37,920 --> 00:35:40,160
mod vulnerabilities and make each of

803
00:35:40,160 --> 00:35:42,640
them generalized by the efforts of the

804
00:35:42,640 --> 00:35:44,000
whole community

805
00:35:44,000 --> 00:35:47,280
which is neat to sum up codeql

806
00:35:47,280 --> 00:35:49,280
is a nice tool for finding semantic

807
00:35:49,280 --> 00:35:51,119
things and i'm still learning

808
00:35:51,119 --> 00:35:56,079
it as well so that is all my talk

809
00:35:56,079 --> 00:35:58,160
thank you all for listening and i hope

810
00:35:58,160 --> 00:35:59,839
that you will learn something from my

811
00:35:59,839 --> 00:36:01,040
talk today

812
00:36:01,040 --> 00:36:03,760
besides if you have any questions please

813
00:36:03,760 --> 00:36:06,240
leave your questions on discord channel

814
00:36:06,240 --> 00:36:09,759
thank you

