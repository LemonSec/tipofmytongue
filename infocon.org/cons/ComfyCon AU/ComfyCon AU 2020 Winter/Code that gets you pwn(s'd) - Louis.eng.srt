1
00:00:05,890 --> 00:00:12,070
we have Lois from pentester lab so I'm

2
00:00:10,389 --> 00:00:15,669
pretty sure he doesn't really need an

3
00:00:12,070 --> 00:00:17,790
introduction I'm about 95% sure everyone

4
00:00:15,670 --> 00:00:20,230
knows who he is but for those who don't

5
00:00:17,790 --> 00:00:21,130
Louie is a security engineer based in

6
00:00:20,230 --> 00:00:22,720
Melbourne Australia

7
00:00:21,130 --> 00:00:24,549
he's the founder of pentester lab a

8
00:00:22,720 --> 00:00:29,848
learning platform for web penetration

9
00:00:24,550 --> 00:00:29,849
testing so Louie it is all yours mate

10
00:00:30,059 --> 00:00:36,810
and ute can people hear me I guess yeah

11
00:00:34,000 --> 00:00:40,000
you don't get any yes we can hear you

12
00:00:36,810 --> 00:00:41,530
okay perfect so I was not sure about the

13
00:00:40,000 --> 00:00:43,870
background I've put something pretty

14
00:00:41,530 --> 00:00:49,000
simple for now unless you like this one

15
00:00:43,870 --> 00:00:50,739
guys got my favorite one so far and this

16
00:00:49,000 --> 00:00:52,420
one I'm gonna try to check the question

17
00:00:50,740 --> 00:00:55,120
as well I was a convict on I would say

18
00:00:52,420 --> 00:00:56,130
five question you can interrupt me at

19
00:00:55,120 --> 00:00:59,860
any time

20
00:00:56,130 --> 00:01:04,829
yeah so let's get started share my

21
00:00:59,860 --> 00:01:07,150
screen and can you see my slides now

22
00:01:04,828 --> 00:01:10,029
like

23
00:01:07,150 --> 00:01:11,560
yes we can my liking it I can hear

24
00:01:10,030 --> 00:01:13,270
Andrea laughing in the background at

25
00:01:11,560 --> 00:01:18,460
your back your previous background as

26
00:01:13,270 --> 00:01:21,340
well yeah so M so my name is Louie and I

27
00:01:18,460 --> 00:01:26,979
work for doobies Fink open test lab and

28
00:01:21,340 --> 00:01:30,880
I really enjoy bugs and I'm kind of CV

29
00:01:26,980 --> 00:01:32,530
Conway sir and so that's my talk code

30
00:01:30,880 --> 00:01:35,589
that gets you pone you can see the

31
00:01:32,530 --> 00:01:36,880
regular expression in the title because

32
00:01:35,590 --> 00:01:41,290
we're going to cover a bit of that as

33
00:01:36,880 --> 00:01:44,080
well if I get factoring moving yep

34
00:01:41,290 --> 00:01:45,850
so my job is basically to find collect

35
00:01:44,080 --> 00:01:49,660
and study bugs and put them together to

36
00:01:45,850 --> 00:01:53,229
help people learn how to find fix and

37
00:01:49,660 --> 00:01:56,380
exploit bugs on their own so I spend a

38
00:01:53,229 --> 00:01:57,760
lot of my time picking bugs basically

39
00:01:56,380 --> 00:01:59,800
saying like oh this is interesting

40
00:01:57,760 --> 00:02:02,530
this is pretty boring this is the same

41
00:01:59,800 --> 00:02:03,490
kind of bugs of this one and trying to

42
00:02:02,530 --> 00:02:05,830
find things that are really interesting

43
00:02:03,490 --> 00:02:08,530
and that will really help people get

44
00:02:05,830 --> 00:02:12,459
better at finding bugs and I exploiting

45
00:02:08,530 --> 00:02:15,550
bugs and so we're gonna jump right in

46
00:02:12,459 --> 00:02:17,380
there so I'm gonna show you some example

47
00:02:15,550 --> 00:02:19,989
of Venerable source code and then you

48
00:02:17,380 --> 00:02:23,470
can spot the bug so if you find the bug

49
00:02:19,989 --> 00:02:24,760
you can put it in config cone slack but

50
00:02:23,470 --> 00:02:27,220
I'm gonna go through the code because

51
00:02:24,760 --> 00:02:29,620
it's pretty hard to like do it straight

52
00:02:27,220 --> 00:02:32,470
like that so first here we have a little

53
00:02:29,620 --> 00:02:35,260
function in golang

54
00:02:32,470 --> 00:02:36,820
but is used to approach five so we can

55
00:02:35,260 --> 00:02:40,090
see on the second line what we're

56
00:02:36,820 --> 00:02:42,040
getting a five from the HTTP request if

57
00:02:40,090 --> 00:02:46,300
there is no file we generate an error

58
00:02:42,040 --> 00:02:49,060
and we return a very is a file we first

59
00:02:46,300 --> 00:02:50,950
create a defer to close the file in the

60
00:02:49,060 --> 00:02:54,580
future when we don't need it anymore and

61
00:02:50,950 --> 00:02:56,738
then what we do is we're gonna create a

62
00:02:54,580 --> 00:02:57,670
temporary file on the file system in

63
00:02:56,739 --> 00:03:01,330
/tmp

64
00:02:57,670 --> 00:03:03,820
and use the file name as the pattern

65
00:03:01,330 --> 00:03:06,989
used for the file creation for naming

66
00:03:03,820 --> 00:03:09,430
the file then if there is no error we

67
00:03:06,989 --> 00:03:11,920
iver is an error we return and print

68
00:03:09,430 --> 00:03:14,709
their otherwise we'll read the file we

69
00:03:11,920 --> 00:03:16,958
got from the request and again we manage

70
00:03:14,709 --> 00:03:18,609
our so that's what is annoying with

71
00:03:16,959 --> 00:03:20,020
golang is that you spend your time

72
00:03:18,609 --> 00:03:24,190
reading like error

73
00:03:20,020 --> 00:03:25,990
management then we write the five we got

74
00:03:24,190 --> 00:03:28,359
from the request and put that on the

75
00:03:25,990 --> 00:03:30,730
file system in own temporary file when

76
00:03:28,360 --> 00:03:32,170
we closed the temporary file and if

77
00:03:30,730 --> 00:03:36,549
everything goes well we write

78
00:03:32,170 --> 00:03:39,519
successfully uploaded the file not first

79
00:03:36,550 --> 00:03:41,320
if you're not for CTO see us playing at

80
00:03:39,520 --> 00:03:42,820
home he's pretty good at cut review is

81
00:03:41,320 --> 00:03:46,239
touching it you should check out this

82
00:03:42,820 --> 00:03:48,880
training is pretty good as well so the

83
00:03:46,240 --> 00:03:51,430
prime here is a run-time file so ten

84
00:03:48,880 --> 00:03:53,500
five takes two arguments first the

85
00:03:51,430 --> 00:03:55,840
directory where the file will be created

86
00:03:53,500 --> 00:03:57,640
so most of the time you're going to use

87
00:03:55,840 --> 00:03:59,860
TMP or something like that so that's

88
00:03:57,640 --> 00:04:02,500
where you want the file to be located

89
00:03:59,860 --> 00:04:05,470
when you create it and the second one is

90
00:04:02,500 --> 00:04:07,300
a pattern that pattern is used to say we

91
00:04:05,470 --> 00:04:07,660
want to fight to look something like

92
00:04:07,300 --> 00:04:10,050
that

93
00:04:07,660 --> 00:04:15,010
we want the file to look something like

94
00:04:10,050 --> 00:04:17,079
louie dot some random number dot take

95
00:04:15,010 --> 00:04:20,500
stay for example all dot jpg or

96
00:04:17,079 --> 00:04:23,050
something about and that looks pretty

97
00:04:20,500 --> 00:04:26,350
safe to use like that but the problem is

98
00:04:23,050 --> 00:04:28,660
that what happens if you start using ten

99
00:04:26,350 --> 00:04:34,300
file and in the pattern you put a

100
00:04:28,660 --> 00:04:36,370
directory traversal and usually that

101
00:04:34,300 --> 00:04:38,160
shouldn't that five should still be

102
00:04:36,370 --> 00:04:41,860
created in slash temp right and

103
00:04:38,160 --> 00:04:43,390
unfortunately what the golang does is

104
00:04:41,860 --> 00:04:48,250
that it's going to traverse directory

105
00:04:43,390 --> 00:04:50,830
even if the pattern even if the file

106
00:04:48,250 --> 00:04:52,930
should be created in /tmp and because

107
00:04:50,830 --> 00:04:54,909
it's just going to concatenate /tmp

108
00:04:52,930 --> 00:04:56,830
we've the result of the pattern so if

109
00:04:54,910 --> 00:04:59,320
you have a directory traversal in the

110
00:04:56,830 --> 00:05:01,090
pattern you're going to have a directory

111
00:04:59,320 --> 00:05:03,190
traversal and so 5 will be created

112
00:05:01,090 --> 00:05:05,739
something somewhere else which can be

113
00:05:03,190 --> 00:05:07,690
pretty surprising and can probably lead

114
00:05:05,740 --> 00:05:11,530
to cut exact if you can for example

115
00:05:07,690 --> 00:05:14,080
upload GSP or PHP shell or something

116
00:05:11,530 --> 00:05:18,340
like that and so that's something I

117
00:05:14,080 --> 00:05:19,810
reported to the coaling team and it took

118
00:05:18,340 --> 00:05:23,859
here why because I had to argue with

119
00:05:19,810 --> 00:05:25,990
them but it's probably not super common

120
00:05:23,860 --> 00:05:27,610
but it's gonna be something where people

121
00:05:25,990 --> 00:05:31,960
are going to shoot themselves in the

122
00:05:27,610 --> 00:05:33,810
foot and so I reported it I fall to like

123
00:05:31,960 --> 00:05:35,880
two algobit with

124
00:05:33,810 --> 00:05:37,560
purrs and to get people to help me out

125
00:05:35,880 --> 00:05:40,020
with the developers but at the end it

126
00:05:37,560 --> 00:05:43,710
got fixed recently and I think it should

127
00:05:40,020 --> 00:05:46,169
be in the recent version of Galang if

128
00:05:43,710 --> 00:05:49,250
you do that it shouldn't matter you will

129
00:05:46,169 --> 00:05:49,250
still be in /type

130
00:05:50,919 --> 00:05:56,229
yes really good comment in the chat you

131
00:05:53,590 --> 00:05:58,929
to check it out so what happened in -

132
00:05:56,229 --> 00:06:00,580
the same exact thing so in Python you

133
00:05:58,930 --> 00:06:05,680
provides a directory and you provide a

134
00:06:00,580 --> 00:06:07,150
prefix and if this prefix as a directory

135
00:06:05,680 --> 00:06:09,729
traversal in it you're going to traverse

136
00:06:07,150 --> 00:06:11,438
directory and go here you even if you

137
00:06:09,729 --> 00:06:13,330
want to create those five in slash times

138
00:06:11,439 --> 00:06:16,629
you're going to end up in Slough root

139
00:06:13,330 --> 00:06:20,188
and you have the time file in / root so

140
00:06:16,629 --> 00:06:23,529
which is kind of annoying and unexpected

141
00:06:20,189 --> 00:06:25,990
Ruby does it better so if you provide a

142
00:06:23,529 --> 00:06:27,819
temp file if you use time file dot new

143
00:06:25,990 --> 00:06:29,710
and you provide a pattern at the first

144
00:06:27,819 --> 00:06:32,110
argument and then you say I want this

145
00:06:29,710 --> 00:06:34,388
fine in slash time Ruby will do the

146
00:06:32,110 --> 00:06:37,419
right thing and we remove this - and cry

147
00:06:34,389 --> 00:06:38,770
to your file in slash temp so that's

148
00:06:37,419 --> 00:06:40,240
kind of something you need to be aware

149
00:06:38,770 --> 00:06:41,500
when you're doing Roderick code review

150
00:06:40,240 --> 00:06:43,960
because it's not really obvious like

151
00:06:41,500 --> 00:06:45,490
you're creating a file in temp which

152
00:06:43,960 --> 00:06:47,318
time file it looks like something that

153
00:06:45,490 --> 00:06:51,550
shouldn't be dangerous and it actually

154
00:06:47,319 --> 00:06:54,400
can be now let's move to something else

155
00:06:51,550 --> 00:06:57,129
so here we have a little application in

156
00:06:54,400 --> 00:06:59,500
Python and we're using multiple

157
00:06:57,129 --> 00:07:04,659
libraries and what we do is mostly we're

158
00:06:59,500 --> 00:07:07,449
using a URL to fetch a webpage and since

159
00:07:04,659 --> 00:07:09,909
we probably ate like a pen test or bug

160
00:07:07,449 --> 00:07:12,129
bounty before we don't want to get on so

161
00:07:09,909 --> 00:07:15,938
we restrict the fetching to pen tester

162
00:07:12,129 --> 00:07:19,899
like on using HTTP because we love

163
00:07:15,939 --> 00:07:22,289
things to be secure then once we so if

164
00:07:19,899 --> 00:07:26,050
the URL starts with printer.com we fetch

165
00:07:22,289 --> 00:07:27,639
that URL and when we return - camera in

166
00:07:26,050 --> 00:07:32,560
the page so what's something people

167
00:07:27,639 --> 00:07:35,050
often do to download images or to create

168
00:07:32,560 --> 00:07:38,949
like a proxy to bypass the same origin

169
00:07:35,050 --> 00:07:41,050
policy so yeah so what looks pretty good

170
00:07:38,949 --> 00:07:43,960
we're using starts with so it should be

171
00:07:41,050 --> 00:07:47,319
sighs so prime that starts with is

172
00:07:43,960 --> 00:07:50,859
really it's a really bad way to make

173
00:07:47,319 --> 00:07:53,860
sure something is actually part of a

174
00:07:50,860 --> 00:07:57,159
trusted list so for example if you start

175
00:07:53,860 --> 00:07:58,839
with HTTP colon slash slash trusted you

176
00:07:57,159 --> 00:08:01,029
can see that HTTP current such as

177
00:07:58,839 --> 00:08:04,569
trusted dot Penta solid dot com starts

178
00:08:01,029 --> 00:08:07,689
with trusted and something if you do add

179
00:08:04,569 --> 00:08:13,659
in telecom the promise well is what you

180
00:08:07,689 --> 00:08:15,279
don't do canonicalization before before

181
00:08:13,659 --> 00:08:17,949
doing this starts with so if you have

182
00:08:15,279 --> 00:08:20,199
another bug like a file upload on open

183
00:08:17,949 --> 00:08:23,369
redirect or a header injection you can

184
00:08:20,199 --> 00:08:27,249
use okay trust we starts with trusted

185
00:08:23,369 --> 00:08:29,199
/gw KS and then dot slash and go to

186
00:08:27,249 --> 00:08:33,279
another page on the website and that can

187
00:08:29,199 --> 00:08:35,979
potentially create really bad behavior

188
00:08:33,279 --> 00:08:38,110
and you can some time home people thanks

189
00:08:35,979 --> 00:08:39,669
to that especially if we've the open

190
00:08:38,110 --> 00:08:41,829
redirect because you can use that open

191
00:08:39,669 --> 00:08:43,929
redirect to go to a third parties

192
00:08:41,828 --> 00:08:47,790
website and therefore you'd completely

193
00:08:43,929 --> 00:08:51,219
bypassing the usage of starts wait and

194
00:08:47,790 --> 00:08:54,339
that's pretty common in going Python

195
00:08:51,220 --> 00:08:56,199
Java every application and we're gonna

196
00:08:54,339 --> 00:08:58,660
see some even more craziness if you look

197
00:08:56,199 --> 00:09:02,410
at my background this one is pretty good

198
00:08:58,660 --> 00:09:04,480
we're coming very soon ish so uh already

199
00:09:02,410 --> 00:09:07,779
we're so this is in c-sharp

200
00:09:04,480 --> 00:09:10,389
and he vista we're just not gonna make

201
00:09:07,779 --> 00:09:12,759
sure but the URL starts with HTTP colon

202
00:09:10,389 --> 00:09:14,769
slash slash and as you know like

203
00:09:12,759 --> 00:09:16,509
sous-chef dotnet now works on linux and

204
00:09:14,769 --> 00:09:18,600
windows and the behavior will be served

205
00:09:16,509 --> 00:09:20,889
simon linux and windows for bad back so

206
00:09:18,600 --> 00:09:22,480
you can think of okay we have a

207
00:09:20,889 --> 00:09:26,019
server-side request forgery

208
00:09:22,480 --> 00:09:30,279
we can access any web server but starts

209
00:09:26,019 --> 00:09:32,500
with HTTP or we can even try to do a pot

210
00:09:30,279 --> 00:09:35,889
scanner by just changing support as part

211
00:09:32,500 --> 00:09:41,980
of the URL but bad bug is actually even

212
00:09:35,889 --> 00:09:46,240
worst if the URL starts with HTTP colon

213
00:09:41,980 --> 00:09:49,000
slash slash and when you do the start

214
00:09:46,240 --> 00:09:51,610
and you go for example on linux to et

215
00:09:49,000 --> 00:09:54,699
Cie passwd you're gonna get the content

216
00:09:51,610 --> 00:09:58,839
of et Cie passwd and the craziness is

217
00:09:54,699 --> 00:10:01,060
that the dotnet framework mimic the bad

218
00:09:58,839 --> 00:10:04,180
behavior of windows for directory

219
00:10:01,060 --> 00:10:06,699
traversal on windows if you have this

220
00:10:04,180 --> 00:10:08,920
kind of path you don't care because even

221
00:10:06,699 --> 00:10:10,810
if a sh t TPS : / - doesn't exist

222
00:10:08,920 --> 00:10:12,790
it's tickler returns the value 1 because

223
00:10:10,810 --> 00:10:16,089
windows Agha is gonna ignore it

224
00:10:12,790 --> 00:10:18,540
Linux dotnet on Linux will do exactly

225
00:10:16,089 --> 00:10:21,090
the same thing and return it

226
00:10:18,540 --> 00:10:24,150
suppose WD even if HTTP colon slash

227
00:10:21,090 --> 00:10:27,270
slash does not exist so we took the bad

228
00:10:24,150 --> 00:10:28,760
thing from dotnet on Windows and poured

229
00:10:27,270 --> 00:10:31,380
it to Linux

230
00:10:28,760 --> 00:10:34,439
so yeah directory traversal in dotnet is

231
00:10:31,380 --> 00:10:37,290
pretty cool and like here you using a

232
00:10:34,440 --> 00:10:39,750
web client and you do like you don't

233
00:10:37,290 --> 00:10:41,670
know the URL which is a string but yeah

234
00:10:39,750 --> 00:10:43,500
you don't know the URL and you end up

235
00:10:41,670 --> 00:10:46,760
with a file from the file system so

236
00:10:43,500 --> 00:10:52,020
that's pretty crazy I love that bug

237
00:10:46,760 --> 00:10:55,710
another one is again in golang yeah CTO

238
00:10:52,020 --> 00:10:59,699
is adding back to his training so here

239
00:10:55,710 --> 00:11:02,610
we have a simple URL that a simple HTTP

240
00:10:59,700 --> 00:11:05,460
handler but we take a file name from the

241
00:11:02,610 --> 00:11:07,230
URL it's going to open though it's gonna

242
00:11:05,460 --> 00:11:09,060
clean the path because we want to make

243
00:11:07,230 --> 00:11:11,100
sure that everything bad is remove some

244
00:11:09,060 --> 00:11:14,219
of the path when it's going to open that

245
00:11:11,100 --> 00:11:16,740
file and then if there is in there it's

246
00:11:14,220 --> 00:11:18,900
going to defer the closing of the file

247
00:11:16,740 --> 00:11:20,220
for later and when it's gonna if there

248
00:11:18,900 --> 00:11:22,500
is an error it's going to return a for

249
00:11:20,220 --> 00:11:25,590
for otherwise it's going to copy the

250
00:11:22,500 --> 00:11:28,620
file handler from so fagged we just

251
00:11:25,590 --> 00:11:30,420
opened to double user response via for

252
00:11:28,620 --> 00:11:31,470
like the to file under would be

253
00:11:30,420 --> 00:11:33,300
connected and it's going to copy

254
00:11:31,470 --> 00:11:36,120
everything and so far will be echoed

255
00:11:33,300 --> 00:11:43,410
back in the response few seconds for

256
00:11:36,120 --> 00:11:45,690
this one so this one is as well pretty

257
00:11:43,410 --> 00:11:48,780
surprising so let's look in the fat path

258
00:11:45,690 --> 00:11:51,240
that clean soap after keen returns the

259
00:11:48,780 --> 00:11:54,360
surest path name equivalent to the path

260
00:11:51,240 --> 00:11:57,510
by purely lexical processing and that's

261
00:11:54,360 --> 00:11:59,010
the golang documentation and go line

262
00:11:57,510 --> 00:12:03,030
documentation is really good because you

263
00:11:59,010 --> 00:12:04,560
can just run the code on the website so

264
00:12:03,030 --> 00:12:07,140
that's what happened when you run it so

265
00:12:04,560 --> 00:12:09,780
it's gonna do okay if you do have that

266
00:12:07,140 --> 00:12:13,290
kins of a dot slash e you're gonna get a

267
00:12:09,780 --> 00:12:15,900
slushie if you do a slash slash C you're

268
00:12:13,290 --> 00:12:18,060
gonna get a slashy slashy slash dot

269
00:12:15,900 --> 00:12:20,699
you're gonna get a slushie when we

270
00:12:18,060 --> 00:12:21,930
arrived to the store but you think of

271
00:12:20,700 --> 00:12:23,870
when you're doing directory traversal

272
00:12:21,930 --> 00:12:26,219
when you one of the bad guy

273
00:12:23,870 --> 00:12:29,010
imagine you to start the dot slash AC

274
00:12:26,220 --> 00:12:31,440
it's gonna return slash a Sashi if you

275
00:12:29,010 --> 00:12:34,620
do slash dot dot slash a slash B

276
00:12:31,440 --> 00:12:37,889
is gonna return a /e so it's cleaning

277
00:12:34,620 --> 00:12:39,750
pretty good right and as a developer you

278
00:12:37,889 --> 00:12:41,879
see that when you're thinking that's

279
00:12:39,750 --> 00:12:44,339
exactly what the security guy told me

280
00:12:41,879 --> 00:12:46,769
about I need to remove the dot slash

281
00:12:44,339 --> 00:12:49,470
part of clean is removing the dot slash

282
00:12:46,769 --> 00:12:52,259
for me thanks golang you are an amazing

283
00:12:49,470 --> 00:12:53,939
language turns out what the

284
00:12:52,259 --> 00:12:56,339
documentation doesn't uncover is that if

285
00:12:53,939 --> 00:12:58,110
the path doesn't start with a slash and

286
00:12:56,339 --> 00:13:02,370
we have thought that such that such that

287
00:12:58,110 --> 00:13:04,620
such /a b we are gonna get the same

288
00:13:02,370 --> 00:13:07,410
exact result because he's trying to find

289
00:13:04,620 --> 00:13:10,199
the shortest path and it's not gonna

290
00:13:07,410 --> 00:13:12,120
remove also dot slash bad things because

291
00:13:10,199 --> 00:13:14,250
it doesn't start with a slash it's not

292
00:13:12,120 --> 00:13:16,319
canonical is irish it's not doing any

293
00:13:14,250 --> 00:13:19,139
canonicalization because you can't do it

294
00:13:16,319 --> 00:13:22,560
here and as a developer that's a really

295
00:13:19,139 --> 00:13:24,629
really surprising behavior and a few

296
00:13:22,560 --> 00:13:26,099
people got owned by that the thing pub

297
00:13:24,629 --> 00:13:30,689
that he'll will clean up everything for

298
00:13:26,100 --> 00:13:34,230
them but it doesn't now another one so

299
00:13:30,689 --> 00:13:37,019
that's pretty common when you doing

300
00:13:34,230 --> 00:13:40,829
you're dealing with rackets and hostname

301
00:13:37,019 --> 00:13:43,519
so here we have an event listener so

302
00:13:40,829 --> 00:13:46,729
basically when two HTML pages need to

303
00:13:43,519 --> 00:13:49,500
speak together they're using events and

304
00:13:46,730 --> 00:13:51,720
what the first thing you need to do when

305
00:13:49,500 --> 00:13:53,819
you do events like that and but

306
00:13:51,720 --> 00:13:56,430
everywhere in the mozilla documentation

307
00:13:53,819 --> 00:13:59,069
is you need to validate the origin of

308
00:13:56,430 --> 00:14:00,750
the event so here what we're doing we're

309
00:13:59,069 --> 00:14:02,610
following the documentation and we

310
00:14:00,750 --> 00:14:05,579
validating but the message comes from

311
00:14:02,610 --> 00:14:07,920
10.com since we want to make sure that

312
00:14:05,579 --> 00:14:09,660
we don't have these starts with issue we

313
00:14:07,920 --> 00:14:12,180
putting like a dollar sign at the end of

314
00:14:09,660 --> 00:14:15,540
the regular expression so all the events

315
00:14:12,180 --> 00:14:17,339
will come from Pentos rob calm and when

316
00:14:15,540 --> 00:14:20,899
we do something sensitive with the event

317
00:14:17,339 --> 00:14:24,180
or though otherwise we don't do anything

318
00:14:20,899 --> 00:14:27,689
the premiere reyga's and dot pen test

319
00:14:24,180 --> 00:14:31,290
lab Khandala is that WWF intercom starts

320
00:14:27,689 --> 00:14:33,540
we contain much whisper gaps but wwz

321
00:14:31,290 --> 00:14:36,209
Penta solid calm still match it because

322
00:14:33,540 --> 00:14:38,069
the dot ins that looks good in the

323
00:14:36,209 --> 00:14:40,170
domain is actually a wild card for

324
00:14:38,069 --> 00:14:42,959
regular expression so it's gonna match

325
00:14:40,170 --> 00:14:45,130
any characters so invert works as well

326
00:14:42,959 --> 00:14:47,290
for WC Penta solids e-comm

327
00:14:45,130 --> 00:14:48,970
so here's the primary that as a

328
00:14:47,290 --> 00:14:50,829
developer you need to remember that you

329
00:14:48,970 --> 00:14:53,050
need to escape doubts in regular

330
00:14:50,830 --> 00:14:55,570
expression because they are wildcard

331
00:14:53,050 --> 00:14:58,599
we're not a separator between a hostname

332
00:14:55,570 --> 00:15:02,370
and domain and a TLD they actually have

333
00:14:58,600 --> 00:15:02,370
meaning in the regular expression

334
00:15:04,790 --> 00:15:11,790
okay so let's move to the next one and

335
00:15:07,590 --> 00:15:13,410
we're gonna go a bit harder so that's

336
00:15:11,790 --> 00:15:19,709
maybe one sieve you won't find

337
00:15:13,410 --> 00:15:23,069
so we have this little java application

338
00:15:19,710 --> 00:15:26,910
we have a list of domain that we allow

339
00:15:23,070 --> 00:15:30,320
so example.org gmail.com google.com and

340
00:15:26,910 --> 00:15:33,530
we have a fetch content function and

341
00:15:30,320 --> 00:15:36,840
when we retrieve when someone access

342
00:15:33,530 --> 00:15:42,150
fetch function we're gonna verify that

343
00:15:36,840 --> 00:15:45,270
the domain parameter is part of allowed

344
00:15:42,150 --> 00:15:47,550
domains by using include so basically

345
00:15:45,270 --> 00:15:50,640
we're gonna search in the list of domain

346
00:15:47,550 --> 00:15:55,250
to see the one if the one provided is in

347
00:15:50,640 --> 00:15:59,130
the list pretty simple nothing is right

348
00:15:55,250 --> 00:16:01,260
so and that looks pretty good right the

349
00:15:59,130 --> 00:16:04,680
prime is right here we have this request

350
00:16:01,260 --> 00:16:08,939
queried domain dot to replicate and

351
00:16:04,680 --> 00:16:13,020
that's going to bite us because we can

352
00:16:08,940 --> 00:16:16,260
use a Douglas RI which is often using

353
00:16:13,020 --> 00:16:19,470
Turkish and to you pack uppercase and we

354
00:16:16,260 --> 00:16:23,520
get an actual I so gmail.com with a

355
00:16:19,470 --> 00:16:26,790
Douglas I if we do to upper case will be

356
00:16:23,520 --> 00:16:28,530
gmail.com so we have a bypass just by

357
00:16:26,790 --> 00:16:30,120
registering the domain and that's

358
00:16:28,530 --> 00:16:32,280
something that happened to github

359
00:16:30,120 --> 00:16:33,930
recently where as part of a password

360
00:16:32,280 --> 00:16:36,839
reset and that's a really good blog post

361
00:16:33,930 --> 00:16:38,810
that got me started in looking at what

362
00:16:36,840 --> 00:16:42,350
in more depth and as part of the

363
00:16:38,810 --> 00:16:45,119
password reset functionality github was

364
00:16:42,350 --> 00:16:47,310
matching like that and then using the

365
00:16:45,120 --> 00:16:51,420
email provided instead of email that

366
00:16:47,310 --> 00:16:53,550
matched and that was used to bust path

367
00:16:51,420 --> 00:16:56,880
by path the password we set and that's

368
00:16:53,550 --> 00:16:58,469
really really interesting and from the

369
00:16:56,880 --> 00:17:00,689
same blog post you should read it and

370
00:16:58,470 --> 00:17:04,560
someone linked it on the config con are

371
00:17:00,690 --> 00:17:08,100
you slack channel you can see that all

372
00:17:04,560 --> 00:17:10,440
the other characters badges but actually

373
00:17:08,099 --> 00:17:12,480
behave weirdly when we go to a podcast

374
00:17:10,440 --> 00:17:15,510
or when we go to lowercase

375
00:17:12,480 --> 00:17:18,480
and that's something that a lot of

376
00:17:15,510 --> 00:17:21,929
people get bitten by because no one

377
00:17:18,480 --> 00:17:23,819
knows about that or very little PR

378
00:17:21,929 --> 00:17:28,350
developer a very little number of

379
00:17:23,819 --> 00:17:30,360
developers know about that yeah and the

380
00:17:28,349 --> 00:17:32,580
crazy part is that you like oh my god we

381
00:17:30,360 --> 00:17:34,350
see some we are really stuff we see this

382
00:17:32,580 --> 00:17:35,668
is some weird javascript stuff and

383
00:17:34,350 --> 00:17:38,549
that's what I thought at first and

384
00:17:35,669 --> 00:17:40,290
that's actually not the case it's

385
00:17:38,549 --> 00:17:42,330
actually part of the Unicode standard

386
00:17:40,290 --> 00:17:44,840
and part of the implementation

387
00:17:42,330 --> 00:17:48,990
implementation guideline

388
00:17:44,840 --> 00:17:51,620
so what happens is that if you ever are

389
00:17:48,990 --> 00:17:55,200
if you in normal which is like

390
00:17:51,620 --> 00:17:57,860
everywhere everyone except Turkish you

391
00:17:55,200 --> 00:18:01,470
go from I to uppercase I and you go from

392
00:17:57,860 --> 00:18:03,600
dot less I so I don't know if you see my

393
00:18:01,470 --> 00:18:04,110
mouse but here to the uppercase high

394
00:18:03,600 --> 00:18:07,110
here

395
00:18:04,110 --> 00:18:10,080
and that's what is happening here what

396
00:18:07,110 --> 00:18:13,350
is this even more surprising is that if

397
00:18:10,080 --> 00:18:17,189
you're local on your system or on your

398
00:18:13,350 --> 00:18:19,760
server system are define in Turkish the

399
00:18:17,190 --> 00:18:22,530
behavior would be different so a

400
00:18:19,760 --> 00:18:25,950
lowercase I would become a uppercase I

401
00:18:22,530 --> 00:18:27,629
with a dot I because I with a dot and a

402
00:18:25,950 --> 00:18:30,090
lowercase dot less I will become an

403
00:18:27,630 --> 00:18:32,790
uppercase highest here so you have all

404
00:18:30,090 --> 00:18:36,120
these weird mapping but actually some

405
00:18:32,790 --> 00:18:39,480
classic behavior and most languages that

406
00:18:36,120 --> 00:18:42,780
don't follow this behavior do that

407
00:18:39,480 --> 00:18:44,970
because they don't have implemented VAT

408
00:18:42,780 --> 00:18:46,440
Unicode support well enough so that's

409
00:18:44,970 --> 00:18:49,830
actually something that should work this

410
00:18:46,440 --> 00:18:51,720
way so if you want to play capture the

411
00:18:49,830 --> 00:18:53,280
flag I got two challenges right I'm

412
00:18:51,720 --> 00:18:55,679
going to keep running for the next I

413
00:18:53,280 --> 00:18:58,110
don't know 24 hours or something like

414
00:18:55,679 --> 00:19:01,260
that so you can play online capture as a

415
00:18:58,110 --> 00:19:04,290
flat a G one two three four five six

416
00:19:01,260 --> 00:19:06,090
seven eight yeah I bought an amazing

417
00:19:04,290 --> 00:19:08,850
domain and I'm pretty proud of it so

418
00:19:06,090 --> 00:19:11,668
yeah so check this out you can scan the

419
00:19:08,850 --> 00:19:13,230
QR code on the video and I will leave

420
00:19:11,669 --> 00:19:16,200
them running and that's exactly was two

421
00:19:13,230 --> 00:19:18,150
bugs so we talked about two things

422
00:19:16,200 --> 00:19:23,600
regular expression and we talked about

423
00:19:18,150 --> 00:19:27,020
Unicode what happened

424
00:19:23,600 --> 00:19:30,168
if we mix the two thanks yeah pretty

425
00:19:27,020 --> 00:19:33,710
good log domain so yeah what happened so

426
00:19:30,169 --> 00:19:38,840
if we do a regular expression to try to

427
00:19:33,710 --> 00:19:44,260
see if dot less I mat cheese i and in

428
00:19:38,840 --> 00:19:47,899
Python 38.1 it doesn't match so okay now

429
00:19:44,260 --> 00:19:51,799
let's add ignore case to the game and we

430
00:19:47,900 --> 00:19:54,200
can see that Douglas I will match I if

431
00:19:51,799 --> 00:19:56,600
we ignore the case so let's say you have

432
00:19:54,200 --> 00:19:59,900
a rely expression to match your domain

433
00:19:56,600 --> 00:20:01,668
all and you're using ignore case you're

434
00:19:59,900 --> 00:20:04,400
going to get bitten by that so you

435
00:20:01,669 --> 00:20:09,679
shouldn't use in no case when you're

436
00:20:04,400 --> 00:20:13,760
doing that thanks Evo so same thing with

437
00:20:09,679 --> 00:20:17,150
I same thing with the letter the Latin

438
00:20:13,760 --> 00:20:19,520
long s that looks like a weird F and but

439
00:20:17,150 --> 00:20:22,039
it's gonna match s if you have ignore

440
00:20:19,520 --> 00:20:24,650
case and same thing for the Kelvin sign

441
00:20:22,039 --> 00:20:30,140
watching is gonna match okay if you

442
00:20:24,650 --> 00:20:34,130
using ignore case again yeah so let's

443
00:20:30,140 --> 00:20:36,650
see other languages in Ruby the I dot s

444
00:20:34,130 --> 00:20:39,770
I will not match I and with not much

445
00:20:36,650 --> 00:20:43,340
upper case I ever despite the fact that

446
00:20:39,770 --> 00:20:48,049
upper case the of dot si is still aya as

447
00:20:43,340 --> 00:20:51,830
we saw before but the Kelvin sign will

448
00:20:48,049 --> 00:20:53,929
merge K and so the zero means that it

449
00:20:51,830 --> 00:20:56,418
matches the near match means that it

450
00:20:53,929 --> 00:20:59,210
doesn't match and come in sign will

451
00:20:56,419 --> 00:21:01,010
match the K as well as the lowercase K

452
00:20:59,210 --> 00:21:06,590
so that's yeah

453
00:21:01,010 --> 00:21:09,530
Calvin symbol sorry anyway and the same

454
00:21:06,590 --> 00:21:12,649
thing for the Latin long s it's gonna

455
00:21:09,530 --> 00:21:16,370
match the s so so I doesn't match but

456
00:21:12,650 --> 00:21:18,950
the F or the s and the K do so that's

457
00:21:16,370 --> 00:21:21,289
pretty weird behavior and but that's

458
00:21:18,950 --> 00:21:25,760
something but we have as well in golang

459
00:21:21,289 --> 00:21:27,230
so in golang zu modifier so ignore case

460
00:21:25,760 --> 00:21:29,450
is put at the start with bracket

461
00:21:27,230 --> 00:21:32,270
question mark I bracket but you can see

462
00:21:29,450 --> 00:21:34,940
here so it's not gonna match the dot

463
00:21:32,270 --> 00:21:36,970
less I and it's mark is gonna match K is

464
00:21:34,940 --> 00:21:40,909
gonna match to come inside

465
00:21:36,970 --> 00:21:47,169
as it's gonna serve Latin long as it's

466
00:21:40,909 --> 00:21:49,909
gonna match s so yeah pretty weird yeah

467
00:21:47,169 --> 00:21:52,730
in c-sharp

468
00:21:49,909 --> 00:21:54,440
we got behavior different a different

469
00:21:52,730 --> 00:21:58,460
behavior as well so the data side

470
00:21:54,440 --> 00:21:59,419
doesn't notice I I doesn't match total

471
00:21:58,460 --> 00:22:06,019
Assad doesn't match

472
00:21:59,419 --> 00:22:09,379
I Calvin sign match is K but long Latin

473
00:22:06,019 --> 00:22:13,129
long s matches doesn't match s so again

474
00:22:09,379 --> 00:22:15,350
like it's very much language dependent

475
00:22:13,129 --> 00:22:18,139
and as well version dependent it's going

476
00:22:15,350 --> 00:22:19,699
to change between the version of the

477
00:22:18,139 --> 00:22:23,479
same language depending on where support

478
00:22:19,700 --> 00:22:25,129
for Unicode and regular expression what

479
00:22:23,480 --> 00:22:28,100
is interesting in c-sharp is I think

480
00:22:25,129 --> 00:22:30,259
because Microsoft had to deal with so

481
00:22:28,100 --> 00:22:32,509
many issue of Unicode we have this all

482
00:22:30,259 --> 00:22:35,990
this way to do ends with and do string

483
00:22:32,509 --> 00:22:37,549
comparison with managing case and you

484
00:22:35,990 --> 00:22:40,070
can see that they are invariant could

485
00:22:37,549 --> 00:22:43,759
you ignore case ordinal ignore case was

486
00:22:40,070 --> 00:22:48,408
probably the most expected behavior with

487
00:22:43,759 --> 00:22:51,559
the Swiss where int matches i NC first

488
00:22:48,409 --> 00:22:52,940
one being without the dot and depending

489
00:22:51,559 --> 00:22:54,889
like you have always different way of

490
00:22:52,940 --> 00:22:56,899
doing string matching and you probably

491
00:22:54,889 --> 00:22:59,869
want to use the first one in violent

492
00:22:56,899 --> 00:23:05,119
creature ignore case just to avoid this

493
00:22:59,869 --> 00:23:08,720
kind of bugs now let's look at open JDK

494
00:23:05,119 --> 00:23:10,189
and I did the same with Oracle one I did

495
00:23:08,720 --> 00:23:14,480
some testing with just a record one and

496
00:23:10,190 --> 00:23:18,019
it works in the same way so dot si is

497
00:23:14,480 --> 00:23:20,299
equal to I I is equals dot as I if you

498
00:23:18,019 --> 00:23:22,869
do a course in no case same for Calvin

499
00:23:20,299 --> 00:23:26,149
sign in case and for K and Calvin sign

500
00:23:22,869 --> 00:23:28,629
same for Latin long s and s and same for

501
00:23:26,149 --> 00:23:33,678
s and Latino as they all match however

502
00:23:28,629 --> 00:23:39,199
when you move to pattern matching I

503
00:23:33,679 --> 00:23:41,299
doesn't notice I doesn't match I Latin

504
00:23:39,200 --> 00:23:44,149
long s doesn't match s and Calvin sign

505
00:23:41,299 --> 00:23:48,529
doesn't match okay so that's yeah very

506
00:23:44,149 --> 00:23:50,360
very weird behavior compared to what the

507
00:23:48,529 --> 00:23:54,890
Equality no case gives you

508
00:23:50,360 --> 00:23:56,570
and why you bother by that

509
00:23:54,890 --> 00:23:58,970
so let's say you have an application but

510
00:23:56,570 --> 00:24:01,370
something with okay make sure that

511
00:23:58,970 --> 00:24:04,490
domain match something with a I and

512
00:24:01,370 --> 00:24:08,120
we're gonna use in no case or makes sure

513
00:24:04,490 --> 00:24:10,130
the domain match something with s and

514
00:24:08,120 --> 00:24:13,939
we're going to use ignore case with that

515
00:24:10,130 --> 00:24:15,740
you can register domain like instead of

516
00:24:13,940 --> 00:24:19,220
attacking if you are taking domain dot

517
00:24:15,740 --> 00:24:22,690
all you can register domain dot all with

518
00:24:19,220 --> 00:24:26,210
dot si and you can bypass this kind of

519
00:24:22,690 --> 00:24:28,400
protection the same thing kind of work

520
00:24:26,210 --> 00:24:30,020
for us you can VIN sign but the point is

521
00:24:28,400 --> 00:24:32,840
that register it's considered like an

522
00:24:30,020 --> 00:24:35,060
uppercase G so it's character so it's

523
00:24:32,840 --> 00:24:37,639
really hard as far as I can tell to get

524
00:24:35,060 --> 00:24:40,399
a domain which is a revert or even

525
00:24:37,640 --> 00:24:43,520
impossible the same thing happen if you

526
00:24:40,400 --> 00:24:44,960
do an email address or you gonna

527
00:24:43,520 --> 00:24:48,290
validate the email address but since

528
00:24:44,960 --> 00:24:50,810
some people we put characters as

529
00:24:48,290 --> 00:24:53,450
uppercase into the domain or as part of

530
00:24:50,810 --> 00:24:55,310
the email address you're gonna match an

531
00:24:53,450 --> 00:24:58,460
ignore case and you're gonna run into

532
00:24:55,310 --> 00:25:00,830
the same problem the same as well can be

533
00:24:58,460 --> 00:25:04,630
the case with course cross-origin

534
00:25:00,830 --> 00:25:07,460
resource sharing in that if you match

535
00:25:04,630 --> 00:25:10,190
the host name using case insensitive you

536
00:25:07,460 --> 00:25:11,750
can run into the same thing but it's

537
00:25:10,190 --> 00:25:14,210
most likely that your browser will not

538
00:25:11,750 --> 00:25:16,490
send the right value because it's going

539
00:25:14,210 --> 00:25:19,370
to encode the domain as pretty cold so

540
00:25:16,490 --> 00:25:22,070
you unless you have an equipment that

541
00:25:19,370 --> 00:25:25,879
does the translation the decoding back

542
00:25:22,070 --> 00:25:28,490
from pinnacle to like a Unicode string

543
00:25:25,880 --> 00:25:31,460
it's unlikely but it works for calls but

544
00:25:28,490 --> 00:25:36,530
still interesting to look at and that's

545
00:25:31,460 --> 00:25:38,420
it so basically to conclude I know

546
00:25:36,530 --> 00:25:40,520
that's really hard like I guess

547
00:25:38,420 --> 00:25:43,550
computers are really hard and you have a

548
00:25:40,520 --> 00:25:46,220
lot of details to look into and I think

549
00:25:43,550 --> 00:25:50,659
this but really I'll add our like some

550
00:25:46,220 --> 00:25:52,790
source code can look clean and maybe

551
00:25:50,660 --> 00:25:54,680
dangerous even if it looks perfect like

552
00:25:52,790 --> 00:25:58,340
the example we've got like and path dot

553
00:25:54,680 --> 00:26:00,530
clean looks pretty nice and pretty safe

554
00:25:58,340 --> 00:26:02,179
so example with Unicode looks pretty

555
00:26:00,530 --> 00:26:04,129
good but you need to remember what any

556
00:26:02,180 --> 00:26:08,930
modification of a string can

557
00:26:04,130 --> 00:26:12,440
of impart don't make any assumption yeah

558
00:26:08,930 --> 00:26:13,610
like yeah and that's it for me so thank

559
00:26:12,440 --> 00:26:15,110
you for your time and if you have any

560
00:26:13,610 --> 00:26:20,600
questions make sure you stay home and

561
00:26:15,110 --> 00:26:22,760
stay safe and yeah yeah thanks if you

562
00:26:20,600 --> 00:26:24,740
have any question I can say on a

563
00:26:22,760 --> 00:26:27,560
frequent question or if the end were

564
00:26:24,740 --> 00:26:29,330
wants to jump in yes so thank you very

565
00:26:27,560 --> 00:26:31,250
much Louie I will be a hundred percent

566
00:26:29,330 --> 00:26:32,629
honest I don't understand half of that

567
00:26:31,250 --> 00:26:35,810
anymore because I don't do so for

568
00:26:32,630 --> 00:26:38,030
engineering anymore it's just it's just

569
00:26:35,810 --> 00:26:40,580
a black art to me but um I know there's

570
00:26:38,030 --> 00:26:42,620
been a lot of chat about the guys trying

571
00:26:40,580 --> 00:26:44,600
to guess what the bugs were and of

572
00:26:42,620 --> 00:26:46,639
course we had certain people getting

573
00:26:44,600 --> 00:26:50,290
them much quicker than others but yes

574
00:26:46,640 --> 00:26:50,290
now that was awesome thank you very much

575
00:26:57,710 --> 00:26:59,770
you

