1
00:00:04,680 --> 00:00:10,180
so today is a passionate app sack dev

2
00:00:07,870 --> 00:00:12,490
sack ops guy who loves react.js firebase

3
00:00:10,180 --> 00:00:14,530
javascript in the no runtime so he's

4
00:00:12,490 --> 00:00:16,570
going to talk to us today about security

5
00:00:14,530 --> 00:00:19,020
at the speed of DevOps so feel free to

6
00:00:16,570 --> 00:00:19,020
take it away

7
00:00:24,880 --> 00:00:29,150
is my screen visible your screen is

8
00:00:27,800 --> 00:00:32,299
visible and we can hear you practically

9
00:00:29,150 --> 00:00:33,949
perfect just thank you for taking your

10
00:00:32,299 --> 00:00:36,440
time on on Saturdays are really

11
00:00:33,950 --> 00:00:38,120
interesting to see that while we stay at

12
00:00:36,440 --> 00:00:40,720
home especially counting on a Saturday

13
00:00:38,120 --> 00:00:44,930
to come up is really interesting for me

14
00:00:40,720 --> 00:00:46,850
so before I jump ahead I really put it

15
00:00:44,930 --> 00:00:49,070
on putting some time to make sure that I

16
00:00:46,850 --> 00:00:51,110
got the right picture on the very first

17
00:00:49,070 --> 00:00:53,269
slide at least that is to just give

18
00:00:51,110 --> 00:00:56,120
people that hey you know actually adds a

19
00:00:53,269 --> 00:00:58,219
kiss stuff it is not for the

20
00:00:56,120 --> 00:00:59,930
faint-hearted you could say good you

21
00:00:58,219 --> 00:01:02,510
know life is too short so you need to

22
00:00:59,930 --> 00:01:04,940
enjoy your life so I think I like this

23
00:01:02,510 --> 00:01:07,450
logo that was first created for the

24
00:01:04,940 --> 00:01:11,060
cheat sheet series project which is

25
00:01:07,450 --> 00:01:13,550
pretty handy to look at and talk about

26
00:01:11,060 --> 00:01:16,130
and around understand a second general

27
00:01:13,550 --> 00:01:18,229
that it is actually tough but we are

28
00:01:16,130 --> 00:01:20,330
here today to debunk some of them and

29
00:01:18,229 --> 00:01:22,160
there will also be a quick demo at the

30
00:01:20,330 --> 00:01:24,350
very end where I can I'll show you that

31
00:01:22,160 --> 00:01:25,610
these are some things that I do there

32
00:01:24,350 --> 00:01:27,830
are certain things that you can do to

33
00:01:25,610 --> 00:01:29,810
make yourself look like

34
00:01:27,830 --> 00:01:33,020
geniusly be or you can just make your

35
00:01:29,810 --> 00:01:39,020
life easier I guess so with that being

36
00:01:33,020 --> 00:01:40,759
said the the idea of the topic idea is

37
00:01:39,020 --> 00:01:43,220
security at the speed of DevOps so we

38
00:01:40,759 --> 00:01:45,319
have to understand first that security

39
00:01:43,220 --> 00:01:47,149
is always a catch-up game and there are

40
00:01:45,319 --> 00:01:50,390
many reasons behind that and we will be

41
00:01:47,149 --> 00:01:52,340
looking at some of those today quickly

42
00:01:50,390 --> 00:01:54,429
about me I work at check marks I'm a

43
00:01:52,340 --> 00:01:56,539
senior professional servicing

44
00:01:54,429 --> 00:01:59,030
professional services engineer

45
00:01:56,539 --> 00:02:01,099
I love Python JavaScript firebase toad

46
00:01:59,030 --> 00:02:02,599
Hawkwood abside whatnot there are a few

47
00:02:01,099 --> 00:02:08,030
more things of course I like movies as

48
00:02:02,599 --> 00:02:10,399
well now a quick note of thanks to Imran

49
00:02:08,030 --> 00:02:12,980
who reached out to me recently and he

50
00:02:10,399 --> 00:02:16,780
has a practical deficit ops training

51
00:02:12,980 --> 00:02:18,950
that he runs and there is a currently a

52
00:02:16,780 --> 00:02:21,400
discount if you're looking top scale

53
00:02:18,950 --> 00:02:21,399
yourself

54
00:02:22,069 --> 00:02:28,010
I may jump into a slight bit faster I

55
00:02:25,640 --> 00:02:31,989
might try to slow down here and there so

56
00:02:28,010 --> 00:02:34,940
it's a I'll try to cater to different

57
00:02:31,990 --> 00:02:36,950
audience beats you're assuming the

58
00:02:34,940 --> 00:02:39,650
people who are really mature mature

59
00:02:36,950 --> 00:02:41,510
are very well aware this might not be

60
00:02:39,650 --> 00:02:43,970
new things for you there might not be

61
00:02:41,510 --> 00:02:48,379
too many new things for audience were

62
00:02:43,970 --> 00:02:51,290
fairly new and unfamiliar it's uncharted

63
00:02:48,379 --> 00:02:54,109
territories for them then it's probably

64
00:02:51,290 --> 00:02:56,810
a lot of learning a lot of take away so

65
00:02:54,110 --> 00:02:58,910
there are a quick few things that I

66
00:02:56,810 --> 00:03:00,620
wanted to talk about first was secure

67
00:02:58,910 --> 00:03:03,230
software development lifecycle shift

68
00:03:00,620 --> 00:03:06,830
left and ah how can we speed up our

69
00:03:03,230 --> 00:03:09,530
security journey itself as together so

70
00:03:06,830 --> 00:03:12,790
I've this this is a quick picture that

71
00:03:09,530 --> 00:03:15,640
just gives some information on secure

72
00:03:12,790 --> 00:03:18,560
software development lifecycle and their

73
00:03:15,640 --> 00:03:20,298
counterpart phases that go on in when

74
00:03:18,560 --> 00:03:22,160
someone mentions a secure development

75
00:03:20,299 --> 00:03:24,260
lifecycle basically when you have

76
00:03:22,160 --> 00:03:25,790
software requirements you have entire

77
00:03:24,260 --> 00:03:27,590
requirements being generated or

78
00:03:25,790 --> 00:03:29,870
basically you have a risk based method

79
00:03:27,590 --> 00:03:32,599
to assess your requirements as your

80
00:03:29,870 --> 00:03:35,000
software requirements come in this is

81
00:03:32,599 --> 00:03:36,798
something not that not everyone does it

82
00:03:35,000 --> 00:03:38,420
around the goal there are they respond

83
00:03:36,799 --> 00:03:40,760
probably a very limited audience that

84
00:03:38,420 --> 00:03:43,339
puts in efforts to actually do a

85
00:03:40,760 --> 00:03:44,989
risk-based weighting of their software

86
00:03:43,340 --> 00:03:47,959
requirements itself basically this is

87
00:03:44,989 --> 00:03:49,819
where your ship cliff actually begins so

88
00:03:47,959 --> 00:03:52,760
your requirements having security

89
00:03:49,819 --> 00:03:55,578
requirements being met and examined till

90
00:03:52,760 --> 00:03:57,709
the very end as you go on forth onto to

91
00:03:55,579 --> 00:03:59,600
build your software there are different

92
00:03:57,709 --> 00:04:01,250
phases the design phase is where you do

93
00:03:59,600 --> 00:04:04,910
paper hacking exercises or tread

94
00:04:01,250 --> 00:04:06,590
modeling during coding phase or when a

95
00:04:04,910 --> 00:04:08,889
developer loves being the code monkey

96
00:04:06,590 --> 00:04:12,560
that's when you have static analysis

97
00:04:08,889 --> 00:04:15,769
being performed usually this is also the

98
00:04:12,560 --> 00:04:17,180
time where developers can search for

99
00:04:15,769 --> 00:04:18,829
anti patterns figure out certain

100
00:04:17,180 --> 00:04:22,090
weaknesses in the code and then come

101
00:04:18,829 --> 00:04:24,650
back and fix them quickly as far as

102
00:04:22,089 --> 00:04:27,169
before the product actually releases

103
00:04:24,650 --> 00:04:28,489
matures and goes to the market and then

104
00:04:27,169 --> 00:04:30,469
there are several different testing

105
00:04:28,490 --> 00:04:33,500
phases unto the deployment of the

106
00:04:30,470 --> 00:04:36,380
product itself which are the security

107
00:04:33,500 --> 00:04:38,690
counterpart these involve manual testing

108
00:04:36,380 --> 00:04:40,940
phases such as penetration testing or

109
00:04:38,690 --> 00:04:42,979
ethical hacking as people would like to

110
00:04:40,940 --> 00:04:45,289
say it also there is some amount of

111
00:04:42,979 --> 00:04:47,270
dynamic time spent on dynamic analysis

112
00:04:45,289 --> 00:04:50,090
basically your runtime examination of

113
00:04:47,270 --> 00:04:52,039
say our web application so

114
00:04:50,090 --> 00:04:53,810
you have software requirements that come

115
00:04:52,040 --> 00:04:55,490
in and then finally you release the

116
00:04:53,810 --> 00:04:56,030
product between these you have different

117
00:04:55,490 --> 00:04:58,340
phases

118
00:04:56,030 --> 00:05:01,340
each phase requires rating of security

119
00:04:58,340 --> 00:05:03,530
now each time when you introduce

120
00:05:01,340 --> 00:05:05,090
security as part of the curve it means

121
00:05:03,530 --> 00:05:07,460
you're slowing down the speed in which

122
00:05:05,090 --> 00:05:09,409
you can reach the market so as you slow

123
00:05:07,460 --> 00:05:11,650
down it means your competitor is much

124
00:05:09,410 --> 00:05:14,600
ahead of you so that's one way of

125
00:05:11,650 --> 00:05:17,299
looking at it but that doesn't give us

126
00:05:14,600 --> 00:05:19,820
an excuse to not look at security or

127
00:05:17,300 --> 00:05:21,530
ignore security so the idea is how can

128
00:05:19,820 --> 00:05:24,260
we find this middle ground so even

129
00:05:21,530 --> 00:05:26,090
though we start very early shift by

130
00:05:24,260 --> 00:05:28,490
shifting left and trying to better

131
00:05:26,090 --> 00:05:30,229
security requirements as part of the

132
00:05:28,490 --> 00:05:32,450
software requirements being introduced

133
00:05:30,229 --> 00:05:35,450
it becomes bit of a challenge here

134
00:05:32,450 --> 00:05:37,219
because there are many many phases in

135
00:05:35,450 --> 00:05:38,930
which security is being introduced some

136
00:05:37,220 --> 00:05:42,590
of them could potentially be bottlenecks

137
00:05:38,930 --> 00:05:44,510
and so on and so forth so in reality we

138
00:05:42,590 --> 00:05:46,039
are trying to move from what we're

139
00:05:44,510 --> 00:05:47,900
seeing in real world as a web

140
00:05:46,039 --> 00:05:49,940
application to trying to read the

141
00:05:47,900 --> 00:05:54,650
security requirements at the very

142
00:05:49,940 --> 00:05:56,960
beginning itself the hypothesis is it is

143
00:05:54,650 --> 00:05:59,900
more efficient to have higher quality

144
00:05:56,960 --> 00:06:05,888
and you have clear competitive advantage

145
00:05:59,900 --> 00:06:09,049
over your competitors technically but

146
00:06:05,889 --> 00:06:11,539
this is yet to be time tested so shift

147
00:06:09,050 --> 00:06:15,289
left is basically a great buzzword

148
00:06:11,539 --> 00:06:17,270
that's that's something that has a soul

149
00:06:15,289 --> 00:06:19,099
that has been salt resolved and it is

150
00:06:17,270 --> 00:06:21,950
true it is true you need to move early

151
00:06:19,099 --> 00:06:24,229
but at the same time you have to find

152
00:06:21,950 --> 00:06:27,590
some middle ground here because moving

153
00:06:24,229 --> 00:06:29,630
too early or moving to laters always a

154
00:06:27,590 --> 00:06:32,869
problem too late you have problems in

155
00:06:29,630 --> 00:06:35,000
your software may be malicious actors

156
00:06:32,870 --> 00:06:36,919
start taking advantage too early you

157
00:06:35,000 --> 00:06:39,919
introduce a lot of bottlenecks so it's

158
00:06:36,919 --> 00:06:41,930
essential to find some middle ground

159
00:06:39,919 --> 00:06:45,229
here so you need to start at some point

160
00:06:41,930 --> 00:06:46,520
but not too early not too late there are

161
00:06:45,229 --> 00:06:48,770
some articles some really interesting

162
00:06:46,520 --> 00:06:50,359
articles are one notably from my

163
00:06:48,770 --> 00:06:52,789
employer trademarks have to be honest

164
00:06:50,360 --> 00:06:55,099
it's a very relatively new article on

165
00:06:52,789 --> 00:06:57,979
why shift left and DevOps is really a

166
00:06:55,099 --> 00:07:01,250
shift center and also securing DevOps

167
00:06:57,979 --> 00:07:01,930
what does it mean in more context so we

168
00:07:01,250 --> 00:07:05,110
will

169
00:07:01,930 --> 00:07:07,570
earlier all the stages so I'll give a

170
00:07:05,110 --> 00:07:10,330
quick summary here so let's say someone

171
00:07:07,570 --> 00:07:14,770
gives us a requirement saying I need you

172
00:07:10,330 --> 00:07:16,690
to build an app and the question also

173
00:07:14,770 --> 00:07:19,299
comes out saying I need your I need my

174
00:07:16,690 --> 00:07:21,509
app to be secured so as a developer your

175
00:07:19,300 --> 00:07:23,650
first question should always be around

176
00:07:21,509 --> 00:07:25,479
what do you mean by secure secure

177
00:07:23,650 --> 00:07:27,789
against what against malware or

178
00:07:25,479 --> 00:07:30,280
state-sponsored attacks so that

179
00:07:27,789 --> 00:07:33,460
basically clarifies a lot so are you

180
00:07:30,280 --> 00:07:36,250
going to build the most secure app or is

181
00:07:33,460 --> 00:07:38,440
there safe enough to use or do you want

182
00:07:36,250 --> 00:07:40,000
to do something that is you know just

183
00:07:38,440 --> 00:07:42,880
basically meets the requirement so I've

184
00:07:40,000 --> 00:07:45,160
just broken down that word here build me

185
00:07:42,880 --> 00:07:46,750
an app that resists common everyday

186
00:07:45,160 --> 00:07:49,000
attacks a degree of confidence saying

187
00:07:46,750 --> 00:07:51,400
that I can use me up every day and it is

188
00:07:49,000 --> 00:07:54,280
going to work as expected and

189
00:07:51,400 --> 00:07:57,190
anticipated regardless of attacks coming

190
00:07:54,280 --> 00:07:59,320
in and out should not be accessible

191
00:07:57,190 --> 00:08:02,590
outside of my home makes sense because I

192
00:07:59,320 --> 00:08:05,590
probably it's a sensitive app which I

193
00:08:02,590 --> 00:08:07,750
don't want anyone to access the

194
00:08:05,590 --> 00:08:10,750
information within content within this

195
00:08:07,750 --> 00:08:12,970
app outside my home and finally you can

196
00:08:10,750 --> 00:08:15,159
say I broke the requirement down need to

197
00:08:12,970 --> 00:08:17,169
know third parties so potentially by

198
00:08:15,159 --> 00:08:18,940
that I'd mean to say there is no third

199
00:08:17,169 --> 00:08:21,698
party communication so there is no

200
00:08:18,940 --> 00:08:24,070
transfer of cookie or advertisement

201
00:08:21,699 --> 00:08:26,650
coming in such that no people are aware

202
00:08:24,070 --> 00:08:29,680
what I'm doing it home on my own

203
00:08:26,650 --> 00:08:31,690
application so removal of third parties

204
00:08:29,680 --> 00:08:34,779
basically privacy addition of privacy

205
00:08:31,690 --> 00:08:36,940
now basing basing these I have a strong

206
00:08:34,779 --> 00:08:39,610
requirement or anti requirements against

207
00:08:36,940 --> 00:08:42,599
the software that I want to build to

208
00:08:39,610 --> 00:08:45,010
consider them as secure or not secure so

209
00:08:42,599 --> 00:08:47,709
it's basically a thought process where

210
00:08:45,010 --> 00:08:50,439
you introduce security as a first-class

211
00:08:47,709 --> 00:08:54,069
citizen but really early so that's a

212
00:08:50,440 --> 00:08:57,070
that's a stain zero and I've left out

213
00:08:54,070 --> 00:09:00,399
some Dilbert comics so if you haven't

214
00:08:57,070 --> 00:09:03,220
ever read Dilbert comics and if you're

215
00:09:00,399 --> 00:09:05,170
interested and software security I I

216
00:09:03,220 --> 00:09:07,570
think you should start reading the

217
00:09:05,170 --> 00:09:08,709
Dilbert comics around software

218
00:09:07,570 --> 00:09:11,130
development software engineering

219
00:09:08,709 --> 00:09:13,819
software security in general then from

220
00:09:11,130 --> 00:09:17,240
there a good way to

221
00:09:13,820 --> 00:09:19,850
get around and understand what are the

222
00:09:17,240 --> 00:09:22,550
common myths of assumptions people make

223
00:09:19,850 --> 00:09:24,710
for instance like you know blockchain

224
00:09:22,550 --> 00:09:26,959
and everyone wants to have their

225
00:09:24,710 --> 00:09:28,430
software's software start working on

226
00:09:26,960 --> 00:09:33,770
blockchain they're just ridiculous in a

227
00:09:28,430 --> 00:09:35,719
way so that's pretty much state zero and

228
00:09:33,770 --> 00:09:37,250
software requirements stage one paper

229
00:09:35,720 --> 00:09:39,170
hacking this is pretty much a direct

230
00:09:37,250 --> 00:09:42,380
modeling I've moved really quickly in

231
00:09:39,170 --> 00:09:43,790
here so my favorite trade model there

232
00:09:42,380 --> 00:09:44,990
are a couple of frog ways you in which

233
00:09:43,790 --> 00:09:48,459
you can build your tread modeling

234
00:09:44,990 --> 00:09:50,900
exercises is my favorite is our

235
00:09:48,460 --> 00:09:52,900
Microsoft stride so there's six

236
00:09:50,900 --> 00:09:55,069
different items that I have to look for

237
00:09:52,900 --> 00:09:57,380
six different properties basically

238
00:09:55,070 --> 00:09:59,060
across the application spoofing

239
00:09:57,380 --> 00:10:01,640
tampering repudiation information

240
00:09:59,060 --> 00:10:03,619
disclosure Daniel of service elevation

241
00:10:01,640 --> 00:10:06,380
of privileges across one to three

242
00:10:03,620 --> 00:10:09,320
different levels what it means is hey is

243
00:10:06,380 --> 00:10:11,740
my application vulnerable to tener love

244
00:10:09,320 --> 00:10:14,720
service or is my user interface

245
00:10:11,740 --> 00:10:16,580
whichever I build an angular or reactive

246
00:10:14,720 --> 00:10:20,300
it will not go through ten eleven denial

247
00:10:16,580 --> 00:10:22,430
of service is there anything else like a

248
00:10:20,300 --> 00:10:24,140
database component that could be prone

249
00:10:22,430 --> 00:10:26,870
to dinner then I love service so when

250
00:10:24,140 --> 00:10:28,880
you go from top to bottom you you cover

251
00:10:26,870 --> 00:10:31,240
a great degree of detail from between

252
00:10:28,880 --> 00:10:34,040
level ones and ones twos and threes

253
00:10:31,240 --> 00:10:37,820
almost as much as to a process level on

254
00:10:34,040 --> 00:10:39,589
an operating system now stage two code

255
00:10:37,820 --> 00:10:41,570
monkey this was usually better

256
00:10:39,590 --> 00:10:44,200
developers love and have all the fun

257
00:10:41,570 --> 00:10:45,980
right so they write a lot of code they

258
00:10:44,200 --> 00:10:48,020
enjoy some really interesting

259
00:10:45,980 --> 00:10:49,610
engineering problems they find the end

260
00:10:48,020 --> 00:10:52,610
up producing a situation which is the

261
00:10:49,610 --> 00:10:54,530
value that you're looking for but this

262
00:10:52,610 --> 00:10:58,370
is also the opportunity for developers

263
00:10:54,530 --> 00:11:00,740
to start coding to start using code scan

264
00:10:58,370 --> 00:11:03,110
tools as they write code scan as

265
00:11:00,740 --> 00:11:05,810
frequently as possible fix antipatterns

266
00:11:03,110 --> 00:11:08,510
as early as possible there are a bunch

267
00:11:05,810 --> 00:11:11,479
of tools on the bat that you can use and

268
00:11:08,510 --> 00:11:14,870
there are some really popular commercial

269
00:11:11,480 --> 00:11:17,750
tools that you can use as well I've just

270
00:11:14,870 --> 00:11:19,460
let set out a few items here I would

271
00:11:17,750 --> 00:11:22,250
encourage you to go ahead and do your

272
00:11:19,460 --> 00:11:24,830
own research this is not an endorsement

273
00:11:22,250 --> 00:11:26,170
Stage three is where you test your

274
00:11:24,830 --> 00:11:29,019
applications for runtime

275
00:11:26,170 --> 00:11:32,229
analysis this is where you try to check

276
00:11:29,019 --> 00:11:34,149
if how's the webpage working and is it

277
00:11:32,230 --> 00:11:36,010
prone to any kind of attacks or how is

278
00:11:34,149 --> 00:11:38,260
my web service work and can it can

279
00:11:36,010 --> 00:11:41,279
someone time for my web service and do

280
00:11:38,260 --> 00:11:43,630
something nefarious exploit Maya maybe

281
00:11:41,279 --> 00:11:45,310
there are a bunch of tools again content

282
00:11:43,630 --> 00:11:46,720
and Internet and this is where you

283
00:11:45,310 --> 00:11:48,099
should be putting your efforts as soon

284
00:11:46,720 --> 00:11:50,290
as you finish development you should be

285
00:11:48,100 --> 00:11:52,180
moving into the test or AIA space

286
00:11:50,290 --> 00:11:53,889
quickly testing your tools so this is

287
00:11:52,180 --> 00:11:58,560
something very commonly seen and

288
00:11:53,889 --> 00:12:00,760
practiced across the industry but for

289
00:11:58,560 --> 00:12:04,540
awareness sake this is something that

290
00:12:00,760 --> 00:12:07,209
you should be doing on a knock cadence

291
00:12:04,540 --> 00:12:08,740
basically one of the most common tools

292
00:12:07,209 --> 00:12:11,170
would be say who has that which is

293
00:12:08,740 --> 00:12:12,850
pretty much free to setup start shooting

294
00:12:11,170 --> 00:12:15,040
around on your web services or web

295
00:12:12,850 --> 00:12:18,910
application find vulnerabilities fix

296
00:12:15,040 --> 00:12:21,790
them rinse and repeat now stage for

297
00:12:18,910 --> 00:12:23,889
Hunger Games this is usually I've called

298
00:12:21,790 --> 00:12:26,589
it as Hunger Games here that's not

299
00:12:23,889 --> 00:12:28,709
actually the intent but this is where

300
00:12:26,589 --> 00:12:31,540
you perform penetration testing now if

301
00:12:28,709 --> 00:12:33,729
level zero you have performed some kind

302
00:12:31,540 --> 00:12:35,740
of wetting on your requirements software

303
00:12:33,730 --> 00:12:37,600
and security requirements level 1 you

304
00:12:35,740 --> 00:12:39,699
have pumped up you've done paper hacking

305
00:12:37,600 --> 00:12:41,980
basically architecture review and so on

306
00:12:39,699 --> 00:12:44,410
so forth level 2 level 3 you have some

307
00:12:41,980 --> 00:12:46,899
automated tools that are trying to find

308
00:12:44,410 --> 00:12:48,819
vulnerabilities no tools are there

309
00:12:46,899 --> 00:12:51,490
always to help us solve certain problems

310
00:12:48,820 --> 00:12:54,010
they're not perfect because human beings

311
00:12:51,490 --> 00:12:57,670
built them and they're from planners and

312
00:12:54,010 --> 00:12:59,860
software by nature is very different it

313
00:12:57,670 --> 00:13:02,439
is not just stuck with these patterns

314
00:12:59,860 --> 00:13:05,110
their software is built around for human

315
00:13:02,440 --> 00:13:07,329
use basically say for instance Bank so

316
00:13:05,110 --> 00:13:08,980
Bank can have pages that human can look

317
00:13:07,329 --> 00:13:11,319
at and understand whereas a tool would

318
00:13:08,980 --> 00:13:14,199
not understand hey this is a accounts

319
00:13:11,319 --> 00:13:16,510
page or this is a taxpayer's page things

320
00:13:14,199 --> 00:13:18,189
like that so this is where a penetration

321
00:13:16,510 --> 00:13:20,110
tester comes in tries to understand

322
00:13:18,190 --> 00:13:22,389
understand the application or and

323
00:13:20,110 --> 00:13:24,850
completely break the application know

324
00:13:22,389 --> 00:13:28,120
maybe empty out bank accounts as in the

325
00:13:24,850 --> 00:13:30,519
as put in the picture here but usually

326
00:13:28,120 --> 00:13:33,279
penetration testers intent is never to

327
00:13:30,519 --> 00:13:35,900
cause harm but rather to test for

328
00:13:33,279 --> 00:13:39,439
weaknesses only

329
00:13:35,900 --> 00:13:41,090
and stage 5 is Riyaz so ASVs is from oh

330
00:13:39,440 --> 00:13:42,410
ass pop application security

331
00:13:41,090 --> 00:13:43,730
verification standard which is pretty

332
00:13:42,410 --> 00:13:47,209
much going to be what we're looking at

333
00:13:43,730 --> 00:13:48,890
the remaining next off our talk so the

334
00:13:47,210 --> 00:13:50,630
whole idea to talk around all of these

335
00:13:48,890 --> 00:13:52,670
stages was to throw and so forth just

336
00:13:50,630 --> 00:13:55,550
make sure all of us are comfortable and

337
00:13:52,670 --> 00:13:57,469
what I'm trying to demo as well and of

338
00:13:55,550 --> 00:13:59,900
course there is all there are a lot of

339
00:13:57,470 --> 00:14:01,190
items when it comes to looking at SPS

340
00:13:59,900 --> 00:14:03,530
the application security verification

341
00:14:01,190 --> 00:14:06,530
standard starting from stage 0 what we

342
00:14:03,530 --> 00:14:08,530
call as software requirements the threat

343
00:14:06,530 --> 00:14:11,319
modeling phase so on so forth until the

344
00:14:08,530 --> 00:14:15,079
verification and assurance phases that

345
00:14:11,320 --> 00:14:17,480
is we submissions I'd encourage you to

346
00:14:15,080 --> 00:14:19,850
go ahead read about ASVs

347
00:14:17,480 --> 00:14:23,000
when you can as you can three different

348
00:14:19,850 --> 00:14:24,950
levels are available on ESP as level one

349
00:14:23,000 --> 00:14:27,530
means your application is connected onto

350
00:14:24,950 --> 00:14:29,420
the network which means if you have an

351
00:14:27,530 --> 00:14:31,280
application which is connected up to any

352
00:14:29,420 --> 00:14:33,800
network you're supposed to do certain

353
00:14:31,280 --> 00:14:36,050
things to secure it depending on the

354
00:14:33,800 --> 00:14:39,020
business context or the financial value

355
00:14:36,050 --> 00:14:41,930
that the app contains or maybe sensitive

356
00:14:39,020 --> 00:14:44,090
information and level 2 and level 3 so

357
00:14:41,930 --> 00:14:47,089
on so forth or increasing levels of

358
00:14:44,090 --> 00:14:48,920
severity in terms of degree of security

359
00:14:47,090 --> 00:14:52,610
a higher degree of security and

360
00:14:48,920 --> 00:14:55,219
assurance now the idea for is we assess

361
00:14:52,610 --> 00:14:58,280
rinse and repeat say if you have 130 130

362
00:14:55,220 --> 00:15:01,580
items to look at and verify maybe in the

363
00:14:58,280 --> 00:15:04,730
first few Sprint's on your software

364
00:15:01,580 --> 00:15:07,280
development cycle you can only do say 10

365
00:15:04,730 --> 00:15:09,200
items maybe 20 items you rinse and

366
00:15:07,280 --> 00:15:10,910
repeat rinse and repeat and you fulfill

367
00:15:09,200 --> 00:15:14,990
all the items then you reach a maturity

368
00:15:10,910 --> 00:15:17,360
level so that's where was son or

369
00:15:14,990 --> 00:15:21,110
software assurance maturity model comes

370
00:15:17,360 --> 00:15:21,830
and you try to verify your software for

371
00:15:21,110 --> 00:15:23,960
assurance

372
00:15:21,830 --> 00:15:25,340
once you complete first degree you

373
00:15:23,960 --> 00:15:27,050
automatically go to the second degree

374
00:15:25,340 --> 00:15:28,910
you complete your second degree and then

375
00:15:27,050 --> 00:15:31,579
you creates a third degree which means

376
00:15:28,910 --> 00:15:35,660
your it takes time for your software to

377
00:15:31,580 --> 00:15:38,090
mature out you can't get a really secure

378
00:15:35,660 --> 00:15:41,209
and at the very GetGo it is

379
00:15:38,090 --> 00:15:43,070
theoretically not possible to have that

380
00:15:41,210 --> 00:15:47,150
unless you're willing to spend a lot of

381
00:15:43,070 --> 00:15:49,550
money so here is what I've done in my

382
00:15:47,150 --> 00:15:52,250
demo I have only few items and most of

383
00:15:49,550 --> 00:15:54,199
pretty much marks close to marks

384
00:15:52,250 --> 00:15:56,450
basically so have threat modeling data

385
00:15:54,200 --> 00:15:57,500
for one time sample application which

386
00:15:56,450 --> 00:16:00,980
I've put in together

387
00:15:57,500 --> 00:16:03,260
and then I have SAS and SAS results just

388
00:16:00,980 --> 00:16:06,320
copied back into tests or the Iast

389
00:16:03,260 --> 00:16:10,670
basically let's jump straight forward

390
00:16:06,320 --> 00:16:14,660
there so this is how my screen looks

391
00:16:10,670 --> 00:16:16,490
like as I just mentioned about ASVs

392
00:16:14,660 --> 00:16:18,920
are the application security

393
00:16:16,490 --> 00:16:21,470
verifications standard which is broken

394
00:16:18,920 --> 00:16:23,060
down into several domains now you can

395
00:16:21,470 --> 00:16:25,579
see that I have different cards on my

396
00:16:23,060 --> 00:16:28,399
screen basically each card here is a

397
00:16:25,579 --> 00:16:29,989
different domain so you have one which

398
00:16:28,399 --> 00:16:32,480
is the architecture design thread

399
00:16:29,990 --> 00:16:34,579
modelling basically the first second

400
00:16:32,480 --> 00:16:36,070
first stage that we have mentioned so on

401
00:16:34,579 --> 00:16:37,819
so forth and then you can have

402
00:16:36,070 --> 00:16:43,180
authentication that is being usually

403
00:16:37,820 --> 00:16:45,680
checked across your using tools like say

404
00:16:43,180 --> 00:16:48,649
checkmarks or was that during the

405
00:16:45,680 --> 00:16:50,359
runtime phase and so on so forth so you

406
00:16:48,649 --> 00:16:55,399
can have several items that can come in

407
00:16:50,360 --> 00:16:57,740
and come be part of your verification

408
00:16:55,399 --> 00:17:02,089
for specific domain all of these items

409
00:16:57,740 --> 00:17:04,189
are pretty much provided through SVS so

410
00:17:02,089 --> 00:17:05,900
to populate these cards what I'm doing

411
00:17:04,189 --> 00:17:07,790
right now is pulling that off straight

412
00:17:05,900 --> 00:17:12,020
away from github there is a JSON schema

413
00:17:07,790 --> 00:17:14,569
that OVAs provides or there is existing

414
00:17:12,020 --> 00:17:16,280
data around what ASVs should have for

415
00:17:14,569 --> 00:17:19,730
each of these domains I have just

416
00:17:16,280 --> 00:17:22,189
populated those questions and answers

417
00:17:19,730 --> 00:17:24,260
here the only only thing that I'm doing

418
00:17:22,189 --> 00:17:26,089
is I'm always by default calling f5

419
00:17:24,260 --> 00:17:29,330
items as vulnerable in my case although

420
00:17:26,089 --> 00:17:32,210
there might be a variance of measurement

421
00:17:29,330 --> 00:17:36,350
each time so I can quickly have a look

422
00:17:32,210 --> 00:17:38,150
and see that for level two of SPS or

423
00:17:36,350 --> 00:17:41,120
second degree of maturity for an

424
00:17:38,150 --> 00:17:44,059
application I'm interested in looking at

425
00:17:41,120 --> 00:17:48,979
items for architecture so interestingly

426
00:17:44,059 --> 00:17:51,320
I have a threat model result so in this

427
00:17:48,980 --> 00:17:53,300
case I would straightaway go ahead and

428
00:17:51,320 --> 00:17:55,399
jump to my tread modeling results and

429
00:17:53,300 --> 00:17:58,040
see what is going on so I have in my

430
00:17:55,400 --> 00:18:01,520
case my simulation says my previous

431
00:17:58,040 --> 00:18:02,850
threat modeling had more chances of me

432
00:18:01,520 --> 00:18:04,920
being hacked versus

433
00:18:02,850 --> 00:18:06,600
my second simulation basically the

434
00:18:04,920 --> 00:18:11,040
second term simulation being in green

435
00:18:06,600 --> 00:18:12,629
and the previous in blue so so if you're

436
00:18:11,040 --> 00:18:15,090
a dev ops engineer if you're deploying

437
00:18:12,630 --> 00:18:17,010
applications everyday or if you're if

438
00:18:15,090 --> 00:18:18,540
you have daily releases weekly weekly

439
00:18:17,010 --> 00:18:20,730
releases or so and so forth

440
00:18:18,540 --> 00:18:23,520
start constructing threat models takes

441
00:18:20,730 --> 00:18:27,510
our take our absolute personal help

442
00:18:23,520 --> 00:18:31,560
start using more time to invest so that

443
00:18:27,510 --> 00:18:33,570
you can construct threat models observe

444
00:18:31,560 --> 00:18:35,760
the data and start seeing where are you

445
00:18:33,570 --> 00:18:38,340
going so in my case in two runs

446
00:18:35,760 --> 00:18:41,640
obviously this is a fictional lab I can

447
00:18:38,340 --> 00:18:45,750
see that there is a different change in

448
00:18:41,640 --> 00:18:48,660
the applications paper hacking basically

449
00:18:45,750 --> 00:18:51,180
or the threat modeling I have done

450
00:18:48,660 --> 00:18:53,490
enough service as a risk item that is

451
00:18:51,180 --> 00:18:57,300
reduced from certain number of points

452
00:18:53,490 --> 00:18:59,220
roughly around our 35 or 30 points are

453
00:18:57,300 --> 00:19:00,720
reduced down to 10 points now these

454
00:18:59,220 --> 00:19:03,420
numbers are basically scaled-down

455
00:19:00,720 --> 00:19:06,780
numbers however this gives me a better

456
00:19:03,420 --> 00:19:09,000
picture as I go on for I look at a

457
00:19:06,780 --> 00:19:11,550
specific application day by day basis

458
00:19:09,000 --> 00:19:14,310
saying hey where is my application today

459
00:19:11,550 --> 00:19:16,740
how is it doing in terms of security so

460
00:19:14,310 --> 00:19:19,080
as you keep releasing you keep you can

461
00:19:16,740 --> 00:19:21,030
continuously see your improvement so I

462
00:19:19,080 --> 00:19:22,980
think the idea around paper hacking

463
00:19:21,030 --> 00:19:25,440
exercise is try to measure your maturity

464
00:19:22,980 --> 00:19:28,410
from the very GetGo from the very

465
00:19:25,440 --> 00:19:30,600
earlier early on in other words now I'll

466
00:19:28,410 --> 00:19:33,060
quickly come back to the cards the SPS

467
00:19:30,600 --> 00:19:35,730
cards that I have so the idea here is

468
00:19:33,060 --> 00:19:40,350
hey I've implemented 37 controls say

469
00:19:35,730 --> 00:19:42,660
roughly out of the 41 a 42 here so it

470
00:19:40,350 --> 00:19:44,370
means that you know I have maybe 5 more

471
00:19:42,660 --> 00:19:47,970
items to catch up so in this in my case

472
00:19:44,370 --> 00:19:50,219
I have the static number 5 but the idea

473
00:19:47,970 --> 00:19:52,470
is you cannot have a fully matured

474
00:19:50,220 --> 00:19:55,230
application from the very GetGo so start

475
00:19:52,470 --> 00:19:58,170
measuring yourself from when possible

476
00:19:55,230 --> 00:20:00,300
and try to fix fix them as you can and

477
00:19:58,170 --> 00:20:02,130
it you don't you don't want to be stuck

478
00:20:00,300 --> 00:20:03,720
down with solving hundreds of different

479
00:20:02,130 --> 00:20:06,060
vulnerabilities rather you can pick a

480
00:20:03,720 --> 00:20:07,530
domain so our domain move forward that

481
00:20:06,060 --> 00:20:11,159
way when you rinse and repeat you don't

482
00:20:07,530 --> 00:20:12,780
have to work too hard now I have just

483
00:20:11,160 --> 00:20:16,290
some quick information here saying

484
00:20:12,780 --> 00:20:19,440
sassed entire store - basically which

485
00:20:16,290 --> 00:20:21,990
my information here the intent here is

486
00:20:19,440 --> 00:20:24,090
to quickly say that hey my application I

487
00:20:21,990 --> 00:20:26,160
have cross-site scripting I do not

488
00:20:24,090 --> 00:20:28,830
sanitize data so there is a potential

489
00:20:26,160 --> 00:20:30,840
for exploitation to happen and also my

490
00:20:28,830 --> 00:20:34,139
default password is you know what admin

491
00:20:30,840 --> 00:20:36,360
so it doesn't really change so the admin

492
00:20:34,140 --> 00:20:37,980
admin is pretty much existing today and

493
00:20:36,360 --> 00:20:39,719
on top of this I have some information

494
00:20:37,980 --> 00:20:42,450
saying that there are some high severity

495
00:20:39,720 --> 00:20:44,070
low severity and medium severity was not

496
00:20:42,450 --> 00:20:48,060
pretty so on so forth with some little

497
00:20:44,070 --> 00:20:50,159
description and they vary the idea is

498
00:20:48,060 --> 00:20:53,129
for if you have different applications

499
00:20:50,160 --> 00:20:55,320
if you have say 20 different

500
00:20:53,130 --> 00:20:57,860
applications that you work day-in

501
00:20:55,320 --> 00:21:00,899
day-out or maybe in a given time frame

502
00:20:57,860 --> 00:21:03,510
start to correlate this information

503
00:21:00,900 --> 00:21:05,700
around the code analysis around the

504
00:21:03,510 --> 00:21:09,660
runtime analysis and also the

505
00:21:05,700 --> 00:21:12,540
third-party so typically in a in a react

506
00:21:09,660 --> 00:21:14,310
app you would expect yourself to see at

507
00:21:12,540 --> 00:21:16,050
least are several hundreds if not

508
00:21:14,310 --> 00:21:18,780
thousands of libraries being used in

509
00:21:16,050 --> 00:21:27,300
projects so let's quickly jump into that

510
00:21:18,780 --> 00:21:30,510
example here I call my opposite flux and

511
00:21:27,300 --> 00:21:32,570
this is something many people are

512
00:21:30,510 --> 00:21:34,440
familiar with oh you have alternatively

513
00:21:32,570 --> 00:21:37,040
commercial tools which offer you the

514
00:21:34,440 --> 00:21:39,600
same capabilities as well so I have

515
00:21:37,040 --> 00:21:41,340
roughly n number of packages and I have

516
00:21:39,600 --> 00:21:43,800
zero vulnerabilities form which is great

517
00:21:41,340 --> 00:21:46,230
so I've been focusing on building my hat

518
00:21:43,800 --> 00:21:49,590
without any third party dependencies but

519
00:21:46,230 --> 00:21:51,990
the app itself is broken functionality

520
00:21:49,590 --> 00:21:54,270
because of using you know latest and

521
00:21:51,990 --> 00:21:57,750
greatest possible witches are plus and

522
00:21:54,270 --> 00:22:00,260
minus so yes sometimes it is are very

523
00:21:57,750 --> 00:22:02,490
common because of compatibility issues

524
00:22:00,260 --> 00:22:04,379
developers would compete you save a

525
00:22:02,490 --> 00:22:06,420
little libraries but you need to know

526
00:22:04,380 --> 00:22:10,020
the reason why you want to have multiple

527
00:22:06,420 --> 00:22:12,060
library now in my case of course the

528
00:22:10,020 --> 00:22:14,070
only user of this application is just

529
00:22:12,060 --> 00:22:15,139
anyone connected onto my by five which

530
00:22:14,070 --> 00:22:19,679
is fair enough

531
00:22:15,140 --> 00:22:21,750
but the idea is today I know my code

532
00:22:19,680 --> 00:22:23,970
analysis results and is results there

533
00:22:21,750 --> 00:22:25,740
which are pretty much knocked out and I

534
00:22:23,970 --> 00:22:28,320
also know in which domain am i

535
00:22:25,740 --> 00:22:29,820
performing good based on these results

536
00:22:28,320 --> 00:22:31,679
and based on the threat model

537
00:22:29,820 --> 00:22:34,470
results I can then quickly correlate and

538
00:22:31,680 --> 00:22:39,690
say okay I'm improving the app security

539
00:22:34,470 --> 00:22:42,270
from n4 wherever it is to wherever I'm

540
00:22:39,690 --> 00:22:45,450
going to tomorrow so it's a measured and

541
00:22:42,270 --> 00:22:46,560
a very meticulous way of saying okay

542
00:22:45,450 --> 00:22:49,200
you're actually improving the

543
00:22:46,560 --> 00:22:50,790
application where are you improving the

544
00:22:49,200 --> 00:22:53,790
application what is making the

545
00:22:50,790 --> 00:22:55,409
difference so in short when you have

546
00:22:53,790 --> 00:22:58,440
when you continue to collect data from

547
00:22:55,410 --> 00:23:01,280
your automated tools let's say for code

548
00:22:58,440 --> 00:23:03,540
analysis using say chat marks or

549
00:23:01,280 --> 00:23:06,680
Coverity or better code whichever it

550
00:23:03,540 --> 00:23:07,950
might be or your highest tools like say

551
00:23:06,680 --> 00:23:11,550
rapid7

552
00:23:07,950 --> 00:23:13,350
again check marks seeker from synopsis

553
00:23:11,550 --> 00:23:18,419
so and so forth and a third-party

554
00:23:13,350 --> 00:23:20,580
analysis tools from says snick check

555
00:23:18,420 --> 00:23:23,460
marks and so on so forth then you start

556
00:23:20,580 --> 00:23:25,639
to have a better view around your

557
00:23:23,460 --> 00:23:28,590
application now all you're left out is

558
00:23:25,640 --> 00:23:30,570
with conducting tread modeling the

559
00:23:28,590 --> 00:23:33,240
quicker you can start conducting tread

560
00:23:30,570 --> 00:23:33,750
modeling exercises and start correlating

561
00:23:33,240 --> 00:23:36,600
that data

562
00:23:33,750 --> 00:23:41,480
the faster your maturity curve for your

563
00:23:36,600 --> 00:23:41,480
applications improves so I think short

564
00:23:42,470 --> 00:23:49,950
in short what we are looking at so far

565
00:23:45,060 --> 00:23:52,050
is for all Maps I want to look at secure

566
00:23:49,950 --> 00:23:54,240
coding exercises I want to build up some

567
00:23:52,050 --> 00:23:57,330
standards and checklists then also want

568
00:23:54,240 --> 00:23:59,040
to conduct some integration test unit

569
00:23:57,330 --> 00:24:02,070
tests and penetration testing along

570
00:23:59,040 --> 00:24:04,680
during the runtime and then finally run

571
00:24:02,070 --> 00:24:06,419
some automated tools such as - so

572
00:24:04,680 --> 00:24:09,150
basically you have a full length

573
00:24:06,420 --> 00:24:11,730
coverage and you rinse and repeat you

574
00:24:09,150 --> 00:24:17,040
improve your maturity that's pretty much

575
00:24:11,730 --> 00:24:18,360
the idea now obviously most of the

576
00:24:17,040 --> 00:24:20,550
content that I'm putting here is

577
00:24:18,360 --> 00:24:24,270
personally opinion around specifically

578
00:24:20,550 --> 00:24:26,280
around shift left can I shift left and I

579
00:24:24,270 --> 00:24:28,110
think it's a philosophical question to

580
00:24:26,280 --> 00:24:29,129
answer really because today's shift

581
00:24:28,110 --> 00:24:31,770
flipped is a buzzword

582
00:24:29,130 --> 00:24:33,210
I would say shift left is possible but

583
00:24:31,770 --> 00:24:37,560
not really possible you have to

584
00:24:33,210 --> 00:24:40,500
realistic to shift center and the logic

585
00:24:37,560 --> 00:24:42,800
is how far can you shift left how early

586
00:24:40,500 --> 00:24:46,820
can you start doing security the early

587
00:24:42,800 --> 00:24:48,919
you start doing security the bottlenecks

588
00:24:46,820 --> 00:24:50,689
start increasing so your speed to

589
00:24:48,920 --> 00:24:52,840
delivery is pretty much hurt and this is

590
00:24:50,690 --> 00:24:55,970
how businesses to know to operate

591
00:24:52,840 --> 00:24:58,760
whether it be me personally running a

592
00:24:55,970 --> 00:25:00,560
business in the future maybe or any

593
00:24:58,760 --> 00:25:02,240
business in general speed to market is

594
00:25:00,560 --> 00:25:04,070
key and speed to market is essential

595
00:25:02,240 --> 00:25:06,500
unless you have a lot of time in the

596
00:25:04,070 --> 00:25:10,700
world can sit at home and be a product

597
00:25:06,500 --> 00:25:13,010
of potato couch I guess but otherwise

598
00:25:10,700 --> 00:25:17,180
speed to market is really essential so

599
00:25:13,010 --> 00:25:19,940
that's where you're you you want to just

600
00:25:17,180 --> 00:25:22,370
sit in the you need to achieve a comfort

601
00:25:19,940 --> 00:25:24,350
zone and that's where you try to achieve

602
00:25:22,370 --> 00:25:27,070
the best of both worlds basically the

603
00:25:24,350 --> 00:25:31,159
speed of DevOps and also security

604
00:25:27,070 --> 00:25:33,800
meeting the needs and demands and that's

605
00:25:31,160 --> 00:25:36,340
pretty much all from me I'll leave it

606
00:25:33,800 --> 00:25:38,450
open for questions in there

607
00:25:36,340 --> 00:25:41,990
thank you you ready that was an awesome

608
00:25:38,450 --> 00:25:45,140
talk we were listening to it and it's

609
00:25:41,990 --> 00:25:46,880
good to see trying to bring those

610
00:25:45,140 --> 00:25:48,410
components of development and security

611
00:25:46,880 --> 00:25:49,700
together it's obviously really important

612
00:25:48,410 --> 00:25:52,100
to make sure that we do that moving

613
00:25:49,700 --> 00:25:54,620
forward because we I'm sure everyone's

614
00:25:52,100 --> 00:25:57,350
seen examples and obviously our right

615
00:25:54,620 --> 00:25:59,899
hand bottom right hand logo at the

616
00:25:57,350 --> 00:26:02,899
moment is evidence of that of how

617
00:25:59,900 --> 00:26:04,910
security and development can go wrong so

618
00:26:02,900 --> 00:26:07,840
thank you very much for running us

619
00:26:04,910 --> 00:26:07,840
through that that was awesome

620
00:26:13,030 --> 00:26:15,090
you

