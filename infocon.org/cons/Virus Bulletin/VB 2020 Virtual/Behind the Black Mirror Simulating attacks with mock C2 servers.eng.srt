1
00:00:08,960 --> 00:00:10,320
behind the black mirror

2
00:00:10,320 --> 00:00:13,280
simulating attacks with mox c2 servers

3
00:00:13,280 --> 00:00:14,880
in this presentation i'm going to be

4
00:00:14,880 --> 00:00:16,880
presenting an approach we've taken

5
00:00:16,880 --> 00:00:19,600
to more realistically simulate malware

6
00:00:19,600 --> 00:00:20,400
attacks

7
00:00:20,400 --> 00:00:22,480
in order to improve our overall

8
00:00:22,480 --> 00:00:25,680
defensive capabilities

9
00:00:26,160 --> 00:00:27,920
first a little bit of information about

10
00:00:27,920 --> 00:00:30,080
me my name is scott knight

11
00:00:30,080 --> 00:00:31,760
i'm a threat researcher on the threat

12
00:00:31,760 --> 00:00:34,160
analysis unit team at vmware

13
00:00:34,160 --> 00:00:36,559
i reverse engineer malware i track

14
00:00:36,559 --> 00:00:37,680
threat actors

15
00:00:37,680 --> 00:00:39,280
and i work to share the information back

16
00:00:39,280 --> 00:00:42,320
with the security community

17
00:00:42,640 --> 00:00:45,200
in this talk we'll cover what a moxi 2

18
00:00:45,200 --> 00:00:45,920
server is

19
00:00:45,920 --> 00:00:48,960
and why you might want to create one and

20
00:00:48,960 --> 00:00:49,600
then we'll

21
00:00:49,600 --> 00:00:52,160
go into the process for actually

22
00:00:52,160 --> 00:00:54,320
creating a moxi 2 server

23
00:00:54,320 --> 00:00:56,480
from there i'll talk about some common

24
00:00:56,480 --> 00:00:58,079
c2 protocol characteristics

25
00:00:58,079 --> 00:01:00,640
that we often see and get into the

26
00:01:00,640 --> 00:01:01,600
details of

27
00:01:01,600 --> 00:01:05,040
how we go about simulating attacks

28
00:01:05,040 --> 00:01:08,479
using a moxi 2 server i'll be demoing a

29
00:01:08,479 --> 00:01:10,560
tool that we've been working on

30
00:01:10,560 --> 00:01:14,640
to make the entire process easier

31
00:01:17,840 --> 00:01:21,040
so what is a mock c2 server well

32
00:01:21,040 --> 00:01:24,320
in programming a mock object is one that

33
00:01:24,320 --> 00:01:26,080
simulates the behavior of a real object

34
00:01:26,080 --> 00:01:27,360
in order to facilitate

35
00:01:27,360 --> 00:01:30,400
software testing we take that same

36
00:01:30,400 --> 00:01:32,960
concept and apply it to

37
00:01:32,960 --> 00:01:35,200
the malware so a mox c2 server can be

38
00:01:35,200 --> 00:01:36,479
thought of as a server

39
00:01:36,479 --> 00:01:38,240
that is simulating the behavior of a

40
00:01:38,240 --> 00:01:40,400
real c2 server

41
00:01:40,400 --> 00:01:42,479
to accomplish the same goal in order to

42
00:01:42,479 --> 00:01:44,240
test and analyze the behavior

43
00:01:44,240 --> 00:01:47,039
of the malware

44
00:01:47,759 --> 00:01:50,000
so why would you want to create one of

45
00:01:50,000 --> 00:01:50,799
these

46
00:01:50,799 --> 00:01:54,320
well during reverse engineering we spend

47
00:01:54,320 --> 00:01:56,079
a lot of time doing static analysis and

48
00:01:56,079 --> 00:01:56,719
that

49
00:01:56,719 --> 00:01:59,600
gets us a large portion of information

50
00:01:59,600 --> 00:02:01,520
about what the malware might be doing

51
00:02:01,520 --> 00:02:04,640
but dynamic analysis really allows us to

52
00:02:04,640 --> 00:02:06,159
go further

53
00:02:06,159 --> 00:02:10,160
and determine uh much more than we

54
00:02:10,160 --> 00:02:11,920
otherwise normally would be able to

55
00:02:11,920 --> 00:02:15,440
about how the malware actually behaves

56
00:02:15,440 --> 00:02:18,160
uh in real situations this dynamic

57
00:02:18,160 --> 00:02:19,760
analysis can be

58
00:02:19,760 --> 00:02:21,760
very challenging if you don't have a c2

59
00:02:21,760 --> 00:02:23,440
up and responding

60
00:02:23,440 --> 00:02:25,599
some malware all they do is attempt to

61
00:02:25,599 --> 00:02:27,680
connect to c2 and if there's

62
00:02:27,680 --> 00:02:30,720
not a server listening then they simply

63
00:02:30,720 --> 00:02:33,570
stop and do nothing else so

64
00:02:33,570 --> 00:02:34,800
[Music]

65
00:02:34,800 --> 00:02:36,400
you know often we only see a small

66
00:02:36,400 --> 00:02:38,560
subset of the capabilities

67
00:02:38,560 --> 00:02:40,640
as we're trying to observe uh malware

68
00:02:40,640 --> 00:02:42,400
running

69
00:02:42,400 --> 00:02:43,920
um another reason why you might want to

70
00:02:43,920 --> 00:02:46,239
create one is if you're interested in

71
00:02:46,239 --> 00:02:49,440
uh tracking different malware families

72
00:02:49,440 --> 00:02:51,280
the the network protocols and the

73
00:02:51,280 --> 00:02:53,120
network traffic are often a good way to

74
00:02:53,120 --> 00:02:54,879
track some of these families

75
00:02:54,879 --> 00:02:56,879
but it's very hard to reverse engineer a

76
00:02:56,879 --> 00:02:58,319
network protocol

77
00:02:58,319 --> 00:02:59,840
if you don't have a piece of malware

78
00:02:59,840 --> 00:03:01,360
that's actually communicating over the

79
00:03:01,360 --> 00:03:03,360
network with something

80
00:03:03,360 --> 00:03:05,440
and finally uh it's the improved

81
00:03:05,440 --> 00:03:06,720
visibility into

82
00:03:06,720 --> 00:03:09,120
how the malware would behave in a

83
00:03:09,120 --> 00:03:10,080
real-world

84
00:03:10,080 --> 00:03:12,959
attack again we can detonate malware in

85
00:03:12,959 --> 00:03:14,640
a lab environment

86
00:03:14,640 --> 00:03:16,000
and maybe see that it sends a beacon

87
00:03:16,000 --> 00:03:18,400
packet but if the malware was used in a

88
00:03:18,400 --> 00:03:19,360
real attack

89
00:03:19,360 --> 00:03:21,360
what are the typical behaviors that we

90
00:03:21,360 --> 00:03:23,760
might see

91
00:03:25,519 --> 00:03:26,959
so let's talk about how you would go

92
00:03:26,959 --> 00:03:29,760
about creating a moxie tube

93
00:03:29,760 --> 00:03:31,920
the first step is really the most

94
00:03:31,920 --> 00:03:32,879
straightforward

95
00:03:32,879 --> 00:03:34,400
you just want to pick a programming

96
00:03:34,400 --> 00:03:36,400
language there's really

97
00:03:36,400 --> 00:03:39,440
i think two paths you could go down

98
00:03:39,440 --> 00:03:40,879
either kind of using a scripting

99
00:03:40,879 --> 00:03:42,799
language or using a compiled language

100
00:03:42,799 --> 00:03:44,640
there's pros and cons of each with

101
00:03:44,640 --> 00:03:46,400
scripting you have your typical

102
00:03:46,400 --> 00:03:47,280
languages like

103
00:03:47,280 --> 00:03:50,879
python ruby node.js and a lot of these

104
00:03:50,879 --> 00:03:51,680
languages

105
00:03:51,680 --> 00:03:53,760
make it very quick very easy to get

106
00:03:53,760 --> 00:03:56,000
something up and running they have

107
00:03:56,000 --> 00:03:57,840
lots of different third-party packages

108
00:03:57,840 --> 00:04:00,080
that you can use

109
00:04:00,080 --> 00:04:02,400
and because it's a scripting language

110
00:04:02,400 --> 00:04:04,239
it's easy to take it to any platform

111
00:04:04,239 --> 00:04:06,400
that you want

112
00:04:06,400 --> 00:04:07,840
conversely with the scripting languages

113
00:04:07,840 --> 00:04:09,920
it can sometimes be harder to work with

114
00:04:09,920 --> 00:04:11,599
the binary data that you might have as

115
00:04:11,599 --> 00:04:14,560
part of a network protocol

116
00:04:14,560 --> 00:04:16,959
and you just have to be a little more

117
00:04:16,959 --> 00:04:17,680
conscious

118
00:04:17,680 --> 00:04:19,839
of how you're interpreting the bytes

119
00:04:19,839 --> 00:04:22,560
that are being sent across the wire

120
00:04:22,560 --> 00:04:24,160
compiled languages again there's a lot

121
00:04:24,160 --> 00:04:26,960
of different choices

122
00:04:27,040 --> 00:04:29,360
you know you have newer languages like

123
00:04:29,360 --> 00:04:31,440
go swift and rust but also

124
00:04:31,440 --> 00:04:34,560
just a normal c program works uh just as

125
00:04:34,560 --> 00:04:35,360
well

126
00:04:35,360 --> 00:04:37,759
often you'll have uh improved

127
00:04:37,759 --> 00:04:39,199
performance

128
00:04:39,199 --> 00:04:40,800
and better concurrency support in some

129
00:04:40,800 --> 00:04:42,320
of these compiled languages that you do

130
00:04:42,320 --> 00:04:44,240
in some of the scripting languages

131
00:04:44,240 --> 00:04:47,680
but it can be challenging at times for

132
00:04:47,680 --> 00:04:49,520
building projects or bringing in

133
00:04:49,520 --> 00:04:51,280
third-party dependencies

134
00:04:51,280 --> 00:04:54,320
it can be somewhat air-prone there's no

135
00:04:54,320 --> 00:04:54,720
real

136
00:04:54,720 --> 00:04:57,759
wrong answer here with the goal of

137
00:04:57,759 --> 00:05:00,560
essentially simulating a server so that

138
00:05:00,560 --> 00:05:02,479
you can analyze the malware

139
00:05:02,479 --> 00:05:03,840
it's important to keep in mind that your

140
00:05:03,840 --> 00:05:06,479
ultimate goal is to analyze the malware

141
00:05:06,479 --> 00:05:09,360
so you're not looking to create you know

142
00:05:09,360 --> 00:05:10,000
engineer the

143
00:05:10,000 --> 00:05:12,160
best c2 server that you can you're

144
00:05:12,160 --> 00:05:13,680
looking to get something up and running

145
00:05:13,680 --> 00:05:14,240
quickly

146
00:05:14,240 --> 00:05:16,960
so whatever language you're most

147
00:05:16,960 --> 00:05:18,560
comfortable with whatever language that

148
00:05:18,560 --> 00:05:19,199
you

149
00:05:19,199 --> 00:05:21,360
work the best in is probably going to be

150
00:05:21,360 --> 00:05:25,039
the right choice

151
00:05:25,039 --> 00:05:27,120
the next step is really setting up your

152
00:05:27,120 --> 00:05:29,120
network in order to

153
00:05:29,120 --> 00:05:31,199
allow the malware to talk to your c2

154
00:05:31,199 --> 00:05:32,320
server so

155
00:05:32,320 --> 00:05:35,280
you're going to need at least one

156
00:05:35,280 --> 00:05:36,560
machine to be

157
00:05:36,560 --> 00:05:39,199
a moxi 2 server and another machine

158
00:05:39,199 --> 00:05:40,800
where you can run your malware or

159
00:05:40,800 --> 00:05:42,479
detonation host

160
00:05:42,479 --> 00:05:43,919
both machines should be on the same

161
00:05:43,919 --> 00:05:45,759
network in this case

162
00:05:45,759 --> 00:05:47,600
virtual machines and virtual networks

163
00:05:47,600 --> 00:05:50,080
make this very easy you should be able

164
00:05:50,080 --> 00:05:51,280
to

165
00:05:51,280 --> 00:05:54,320
spin up as many machines as you need put

166
00:05:54,320 --> 00:05:56,080
them on the same network

167
00:05:56,080 --> 00:05:58,720
and get things going from there you

168
00:05:58,720 --> 00:06:00,400
really have to consider how the malware

169
00:06:00,400 --> 00:06:02,160
is

170
00:06:02,160 --> 00:06:05,360
identifying at c2 and trying to connect

171
00:06:05,360 --> 00:06:10,800
if it's using dns domain names

172
00:06:10,960 --> 00:06:14,080
in its configuration then it's fairly

173
00:06:14,080 --> 00:06:14,880
easy to

174
00:06:14,880 --> 00:06:17,759
set up your detonation machine so that

175
00:06:17,759 --> 00:06:18,880
you can

176
00:06:18,880 --> 00:06:21,919
simply modify a host file and point

177
00:06:21,919 --> 00:06:24,160
the domain name to your own ip address

178
00:06:24,160 --> 00:06:26,720
your own moxy2 server

179
00:06:26,720 --> 00:06:31,360
and and get the malware talking

180
00:06:31,360 --> 00:06:33,360
to where you want it in the case of

181
00:06:33,360 --> 00:06:34,880
hard-coded ip addresses

182
00:06:34,880 --> 00:06:36,240
you know if you've taken the time to set

183
00:06:36,240 --> 00:06:38,160
up two virtual machines on a virtual

184
00:06:38,160 --> 00:06:38,880
network

185
00:06:38,880 --> 00:06:41,039
then this isn't that much more difficult

186
00:06:41,039 --> 00:06:42,880
essentially you want to identify the

187
00:06:42,880 --> 00:06:46,000
c2ip address and set your moxi 2 server

188
00:06:46,000 --> 00:06:48,240
to have the ip address of

189
00:06:48,240 --> 00:06:51,440
the real c2 server then by modifying

190
00:06:51,440 --> 00:06:52,639
your detonation host

191
00:06:52,639 --> 00:06:54,240
to have an ip address on that same

192
00:06:54,240 --> 00:06:57,199
subnet essentially when the malware goes

193
00:06:57,199 --> 00:06:57,680
to

194
00:06:57,680 --> 00:06:59,520
talk to its c2 server instead of being

195
00:06:59,520 --> 00:07:00,960
routed over the internet

196
00:07:00,960 --> 00:07:02,400
it's simply going to talk to the other

197
00:07:02,400 --> 00:07:05,919
machine on your virtual network

198
00:07:07,280 --> 00:07:10,560
the next step is just to listen

199
00:07:10,560 --> 00:07:12,479
essentially you want to start a server

200
00:07:12,479 --> 00:07:14,800
listening on the

201
00:07:14,800 --> 00:07:15,919
port that you've identified through

202
00:07:15,919 --> 00:07:18,240
reverse engineering and again this

203
00:07:18,240 --> 00:07:18,880
should be

204
00:07:18,880 --> 00:07:21,599
quick you want to use the language

205
00:07:21,599 --> 00:07:22,639
that's going to let you get to this

206
00:07:22,639 --> 00:07:24,240
point as quick as possible

207
00:07:24,240 --> 00:07:26,240
and most any language you pick is going

208
00:07:26,240 --> 00:07:28,400
to make it fairly easy to

209
00:07:28,400 --> 00:07:30,400
simply start a server listening on some

210
00:07:30,400 --> 00:07:32,319
port and from there

211
00:07:32,319 --> 00:07:34,319
don't even worry about coding anything

212
00:07:34,319 --> 00:07:36,160
more complicated than just

213
00:07:36,160 --> 00:07:38,240
listening on a port use a tool like

214
00:07:38,240 --> 00:07:40,240
wireshark and start to capture traffic

215
00:07:40,240 --> 00:07:41,520
now that you have a server that's up and

216
00:07:41,520 --> 00:07:42,800
listening

217
00:07:42,800 --> 00:07:44,560
wireshark is a great tool for starting

218
00:07:44,560 --> 00:07:46,560
to explore what is the malware sending

219
00:07:46,560 --> 00:07:49,039
it when is it sending what's the format

220
00:07:49,039 --> 00:07:51,120
and just looking and seeing what shows

221
00:07:51,120 --> 00:07:53,280
up

222
00:07:55,520 --> 00:07:57,520
from there it's kind of an iterative

223
00:07:57,520 --> 00:07:59,520
process you know you'll start your

224
00:07:59,520 --> 00:08:02,800
dynamic analysis using wireshark um and

225
00:08:02,800 --> 00:08:04,720
and starting to look at the data and see

226
00:08:04,720 --> 00:08:06,319
what format are

227
00:08:06,319 --> 00:08:08,800
my packets in do does it look like the

228
00:08:08,800 --> 00:08:10,160
data that's being sent across

229
00:08:10,160 --> 00:08:13,680
is encrypted um am i seeing some packets

230
00:08:13,680 --> 00:08:15,759
sent over and over again that look like

231
00:08:15,759 --> 00:08:17,120
they're the same and maybe the malware

232
00:08:17,120 --> 00:08:17,840
is beaconing

233
00:08:17,840 --> 00:08:21,840
out does does it seem like the malware

234
00:08:21,840 --> 00:08:24,000
is expecting a response

235
00:08:24,000 --> 00:08:27,120
from there you just want to work to

236
00:08:27,120 --> 00:08:30,400
add the minimum amount of

237
00:08:30,400 --> 00:08:33,039
mocked out responses as you can because

238
00:08:33,039 --> 00:08:34,799
again the goal here is speed

239
00:08:34,799 --> 00:08:36,958
and the goal is to analyze the malware

240
00:08:36,958 --> 00:08:38,799
not to build a complete

241
00:08:38,799 --> 00:08:42,640
moxie 2 server

242
00:08:42,640 --> 00:08:45,600
so you know if you see that the malware

243
00:08:45,600 --> 00:08:47,440
from static analysis is sending out a

244
00:08:47,440 --> 00:08:48,800
packet and then expecting a response

245
00:08:48,800 --> 00:08:49,360
back

246
00:08:49,360 --> 00:08:51,760
then add that to your moxie 2 server and

247
00:08:51,760 --> 00:08:54,080
kind of repeat this process

248
00:08:54,080 --> 00:08:56,240
you know send the response see what

249
00:08:56,240 --> 00:08:57,760
comes next across in the network

250
00:08:57,760 --> 00:08:58,720
captures

251
00:08:58,720 --> 00:09:02,000
and and continue from there

252
00:09:04,160 --> 00:09:06,800
so let's touch on some of the common

253
00:09:06,800 --> 00:09:07,279
things

254
00:09:07,279 --> 00:09:11,120
you'll find in c2 protocols um as you're

255
00:09:11,120 --> 00:09:12,720
iterating and sort of stubbing out

256
00:09:12,720 --> 00:09:15,120
functionality

257
00:09:15,120 --> 00:09:16,480
the first thing is really kind of the

258
00:09:16,480 --> 00:09:18,480
network in the encryption

259
00:09:18,480 --> 00:09:20,000
it's the first hurdle in understanding

260
00:09:20,000 --> 00:09:21,680
how the malware communicates and you

261
00:09:21,680 --> 00:09:23,600
really need to determine what transport

262
00:09:23,600 --> 00:09:25,440
mechanism is the malware using

263
00:09:25,440 --> 00:09:28,320
yeah it so far i've kind of assumed that

264
00:09:28,320 --> 00:09:29,920
it's using tcp but you could have

265
00:09:29,920 --> 00:09:32,480
malware that's using udp as well

266
00:09:32,480 --> 00:09:34,080
in which case you'd have to kind of

267
00:09:34,080 --> 00:09:35,600
start your mox server in

268
00:09:35,600 --> 00:09:37,760
a slightly different way but also things

269
00:09:37,760 --> 00:09:38,720
like is it using

270
00:09:38,720 --> 00:09:41,279
uh standard protocols like is it

271
00:09:41,279 --> 00:09:42,800
communicating over tls

272
00:09:42,800 --> 00:09:45,839
is it communicating over http um

273
00:09:45,839 --> 00:09:47,040
you may start to look at some of the

274
00:09:47,040 --> 00:09:49,360
packets and realize that

275
00:09:49,360 --> 00:09:52,480
it's using something that looks like tls

276
00:09:52,480 --> 00:09:58,000
but isn't exactly tls

277
00:09:58,160 --> 00:10:00,000
these are probably some of the more

278
00:10:00,000 --> 00:10:03,440
common mechanisms that we see

279
00:10:03,440 --> 00:10:07,440
when it comes to the encryption um

280
00:10:07,440 --> 00:10:09,600
it's it's fairly common that a c2

281
00:10:09,600 --> 00:10:10,560
protocol is going to

282
00:10:10,560 --> 00:10:13,600
have some way to try to obscure the

283
00:10:13,600 --> 00:10:15,120
real payloads that's being sent and

284
00:10:15,120 --> 00:10:16,800
received so

285
00:10:16,800 --> 00:10:19,360
you may be able to see header

286
00:10:19,360 --> 00:10:20,959
information but you may not see the

287
00:10:20,959 --> 00:10:22,079
actual payload

288
00:10:22,079 --> 00:10:24,959
that's been sent if your goal is to

289
00:10:24,959 --> 00:10:26,240
create a server that can talk to the

290
00:10:26,240 --> 00:10:27,360
malware though it's going to be

291
00:10:27,360 --> 00:10:29,680
necessary to reverse

292
00:10:29,680 --> 00:10:31,839
engineer whatever encryption is being

293
00:10:31,839 --> 00:10:34,079
used in order to create a

294
00:10:34,079 --> 00:10:38,000
properly uh working moxie2 server

295
00:10:38,000 --> 00:10:39,360
again here there are some common

296
00:10:39,360 --> 00:10:41,040
patterns that show up

297
00:10:41,040 --> 00:10:44,640
and so we're going to look at a handful

298
00:10:44,640 --> 00:10:47,519
of them next the encryption can

299
00:10:47,519 --> 00:10:50,320
often be one of the harder steps of

300
00:10:50,320 --> 00:10:53,200
mocking out a protocol

301
00:10:53,200 --> 00:10:57,360
so first we have just a simple xor

302
00:10:57,360 --> 00:11:00,560
it i i would say that this is

303
00:11:00,560 --> 00:11:04,079
is very common um it's it's easy to spot

304
00:11:04,079 --> 00:11:05,279
in packet captures

305
00:11:05,279 --> 00:11:07,200
whether you have a single byte or a

306
00:11:07,200 --> 00:11:08,480
short uh

307
00:11:08,480 --> 00:11:11,040
key that's repeating over and over again

308
00:11:11,040 --> 00:11:13,120
it often leads to patterns in the

309
00:11:13,120 --> 00:11:15,120
network data that can be easy to spot

310
00:11:15,120 --> 00:11:17,279
in the case of a single byte if the

311
00:11:17,279 --> 00:11:19,200
malware is sending data that has zeros

312
00:11:19,200 --> 00:11:20,240
then you may see

313
00:11:20,240 --> 00:11:22,800
the actual key echoed back in the

314
00:11:22,800 --> 00:11:24,000
network

315
00:11:24,000 --> 00:11:26,880
data you know repeated over and over and

316
00:11:26,880 --> 00:11:27,760
over again

317
00:11:27,760 --> 00:11:30,800
usually this is uh easy to reverse as

318
00:11:30,800 --> 00:11:32,320
well because it's not doing anything

319
00:11:32,320 --> 00:11:34,480
very complex

320
00:11:34,480 --> 00:11:37,519
on the left over here you can see a

321
00:11:37,519 --> 00:11:38,320
sample where

322
00:11:38,320 --> 00:11:41,279
it's it's got an array of bytes in this

323
00:11:41,279 --> 00:11:42,160
data

324
00:11:42,160 --> 00:11:44,800
array and it's just looping through the

325
00:11:44,800 --> 00:11:46,000
entire length and

326
00:11:46,000 --> 00:11:50,720
xoring each byte with the byte77

327
00:11:52,160 --> 00:11:54,800
another common approach that that

328
00:11:54,800 --> 00:11:56,079
malware authors will take

329
00:11:56,079 --> 00:11:58,800
are kind of using a more complex xor uh

330
00:11:58,800 --> 00:11:59,760
you might

331
00:11:59,760 --> 00:12:02,639
uh call this quote custom encryption but

332
00:12:02,639 --> 00:12:03,760
at the end of the day

333
00:12:03,760 --> 00:12:05,760
it's really just taking each byte and

334
00:12:05,760 --> 00:12:07,040
xoring it with uh

335
00:12:07,040 --> 00:12:10,639
part of a key um in these cases it's

336
00:12:10,639 --> 00:12:12,720
usually the key derivation that can be

337
00:12:12,720 --> 00:12:16,079
a little more complex and in turn can be

338
00:12:16,079 --> 00:12:18,079
a little harder to reverse

339
00:12:18,079 --> 00:12:20,240
um it will do a better job of obscuring

340
00:12:20,240 --> 00:12:21,440
the network traffic because you're not

341
00:12:21,440 --> 00:12:22,240
going to see

342
00:12:22,240 --> 00:12:25,600
as many bytes repeating or patterns uh

343
00:12:25,600 --> 00:12:28,800
in the encrypted output um

344
00:12:28,800 --> 00:12:32,959
but at the end of the day it's often um

345
00:12:32,959 --> 00:12:36,240
just working to determine uh

346
00:12:36,240 --> 00:12:40,000
how is the malware um seating

347
00:12:40,000 --> 00:12:43,040
its key and how is it

348
00:12:43,040 --> 00:12:45,920
uh then combining that with the input

349
00:12:45,920 --> 00:12:46,800
data

350
00:12:46,800 --> 00:12:49,200
uh you can see kind of in this example

351
00:12:49,200 --> 00:12:50,839
you know we've got three different seed

352
00:12:50,839 --> 00:12:52,160
values

353
00:12:52,160 --> 00:12:54,160
those three values are used to xor a

354
00:12:54,160 --> 00:12:55,279
byte of data

355
00:12:55,279 --> 00:12:57,200
and then those three different values

356
00:12:57,200 --> 00:12:59,519
kind of change and get mutated so

357
00:12:59,519 --> 00:13:02,800
it's really just one long key stream

358
00:13:02,800 --> 00:13:05,120
that's created based on the seed values

359
00:13:05,120 --> 00:13:06,720
and then it's just a simple xor

360
00:13:06,720 --> 00:13:09,519
of all the data

361
00:13:10,240 --> 00:13:14,079
rc4 is another uh very common one

362
00:13:14,079 --> 00:13:15,680
whether it's used in network protocols

363
00:13:15,680 --> 00:13:17,279
or with

364
00:13:17,279 --> 00:13:19,519
file encryption even though it's an

365
00:13:19,519 --> 00:13:21,120
older algorithm

366
00:13:21,120 --> 00:13:24,000
because it's an easy thing to implement

367
00:13:24,000 --> 00:13:25,760
without using third-party libraries

368
00:13:25,760 --> 00:13:28,000
it still gets used a lot it's fairly

369
00:13:28,000 --> 00:13:30,240
easy to spot when reversing

370
00:13:30,240 --> 00:13:33,519
you can often look for the rc4

371
00:13:33,519 --> 00:13:35,360
initialization so you can see

372
00:13:35,360 --> 00:13:36,959
you know in this example there's a for

373
00:13:36,959 --> 00:13:39,680
loop going from 0 to 255

374
00:13:39,680 --> 00:13:41,600
and it's simply taking each of those

375
00:13:41,600 --> 00:13:43,600
values and filling in

376
00:13:43,600 --> 00:13:46,600
uh an entry in an array so this is the

377
00:13:46,600 --> 00:13:50,399
rc4sbox initialization

378
00:13:51,760 --> 00:13:54,720
aes is another common one i think a lot

379
00:13:54,720 --> 00:13:54,959
of

380
00:13:54,959 --> 00:13:58,639
malware authors feel like it's

381
00:13:58,639 --> 00:14:02,160
more secure but uh

382
00:14:02,160 --> 00:14:04,880
it really all depends on how they uh

383
00:14:04,880 --> 00:14:06,000
create a key

384
00:14:06,000 --> 00:14:08,240
uh for the algorithm it's usually easy

385
00:14:08,240 --> 00:14:10,000
to spot when reversing

386
00:14:10,000 --> 00:14:12,800
it tends to use standard apis standard

387
00:14:12,800 --> 00:14:14,160
libraries

388
00:14:14,160 --> 00:14:16,880
you can see in this example uh the

389
00:14:16,880 --> 00:14:17,839
malware is calling

390
00:14:17,839 --> 00:14:21,040
crypt derive key which is a windows api

391
00:14:21,040 --> 00:14:23,760
and it's passing in a constant for aes

392
00:14:23,760 --> 00:14:25,120
128 bit

393
00:14:25,120 --> 00:14:27,760
encryption in this case i think because

394
00:14:27,760 --> 00:14:29,519
malware authors know

395
00:14:29,519 --> 00:14:32,480
that they're using a standard encryption

396
00:14:32,480 --> 00:14:33,839
algorithm

397
00:14:33,839 --> 00:14:36,320
and that defenders can also you know

398
00:14:36,320 --> 00:14:38,079
take the standard algorithm to decrypt

399
00:14:38,079 --> 00:14:39,920
traffic they often

400
00:14:39,920 --> 00:14:43,120
work to obscure their key derivation

401
00:14:43,120 --> 00:14:45,839
a little more or make it more complex

402
00:14:45,839 --> 00:14:47,839
and that's how they try to provide

403
00:14:47,839 --> 00:14:51,680
security to their protocols

404
00:14:55,519 --> 00:14:58,959
one final thing to kind of consider is

405
00:14:58,959 --> 00:15:01,680
how the malware how the malware sort of

406
00:15:01,680 --> 00:15:03,199
initiates its

407
00:15:03,199 --> 00:15:05,120
communication channels so it could have

408
00:15:05,120 --> 00:15:06,320
a handshake where

409
00:15:06,320 --> 00:15:09,839
it's working to ensure that it's talking

410
00:15:09,839 --> 00:15:11,839
to who it thinks it's talking to

411
00:15:11,839 --> 00:15:14,160
and it could also perform some sort of

412
00:15:14,160 --> 00:15:15,839
key negotiation

413
00:15:15,839 --> 00:15:19,360
as a way to try to have a more

414
00:15:19,360 --> 00:15:22,079
secure communication channel this is

415
00:15:22,079 --> 00:15:22,560
usually

416
00:15:22,560 --> 00:15:25,920
more complex to reverse and mock but on

417
00:15:25,920 --> 00:15:27,040
the flip side

418
00:15:27,040 --> 00:15:30,959
it can make network detections

419
00:15:30,959 --> 00:15:33,600
easier it has a more distinct

420
00:15:33,600 --> 00:15:34,800
fingerprint

421
00:15:34,800 --> 00:15:37,759
to the network traffic in the example

422
00:15:37,759 --> 00:15:38,959
here

423
00:15:38,959 --> 00:15:42,399
in red we have the malware sending

424
00:15:42,399 --> 00:15:44,320
requests out to the c2 server and in

425
00:15:44,320 --> 00:15:45,839
blue we have it

426
00:15:45,839 --> 00:15:47,360
listening for a response and you can

427
00:15:47,360 --> 00:15:49,279
kind of see that it's got

428
00:15:49,279 --> 00:15:52,639
this process of sending a number

429
00:15:52,639 --> 00:15:54,639
expecting another number and then

430
00:15:54,639 --> 00:15:56,320
writing a third number

431
00:15:56,320 --> 00:15:58,480
and unless this happens it's not going

432
00:15:58,480 --> 00:16:02,160
to communicate with the c2 server

433
00:16:04,720 --> 00:16:06,320
the command structure itself is

434
00:16:06,320 --> 00:16:09,360
something that is often

435
00:16:09,360 --> 00:16:11,360
not that different across malware

436
00:16:11,360 --> 00:16:13,440
families

437
00:16:13,440 --> 00:16:16,079
as you're you know using a tool like

438
00:16:16,079 --> 00:16:18,000
wireshark and listening for the traffic

439
00:16:18,000 --> 00:16:19,759
and starting to inspect the packets

440
00:16:19,759 --> 00:16:21,040
there's a handful of different things

441
00:16:21,040 --> 00:16:23,040
that you can look for

442
00:16:23,040 --> 00:16:25,040
to start to get an idea at least of the

443
00:16:25,040 --> 00:16:27,360
structure of the data

444
00:16:27,360 --> 00:16:31,839
so any sort of quote small number

445
00:16:31,839 --> 00:16:34,000
whether it's 32-bit or 64-bit you're

446
00:16:34,000 --> 00:16:36,480
gonna see

447
00:16:36,480 --> 00:16:39,759
zeros show up in it so

448
00:16:39,759 --> 00:16:43,120
you know in in red here we see a number

449
00:16:43,120 --> 00:16:47,040
uh e2900

450
00:16:47,040 --> 00:16:51,360
which appears to be a a 32-bit number

451
00:16:51,360 --> 00:16:54,079
uh stored in little indian format uh and

452
00:16:54,079 --> 00:16:55,920
we kind of continue scanning across and

453
00:16:55,920 --> 00:16:57,839
we see like another chunk of data

454
00:16:57,839 --> 00:16:59,759
you know four zeros in a row and then

455
00:16:59,759 --> 00:17:01,360
another small number

456
00:17:01,360 --> 00:17:05,679
uh 41 also in little indian format

457
00:17:05,679 --> 00:17:07,520
the byte ordering is important uh

458
00:17:07,520 --> 00:17:09,199
sometimes you'll see

459
00:17:09,199 --> 00:17:10,959
a little onion sometimes you'll see big

460
00:17:10,959 --> 00:17:13,199
indian since that is used for

461
00:17:13,199 --> 00:17:16,160
network byte ordering uh another thing

462
00:17:16,160 --> 00:17:17,280
just to kind of

463
00:17:17,280 --> 00:17:19,039
look for as you're going through your

464
00:17:19,039 --> 00:17:20,720
packet captures or just any sort of

465
00:17:20,720 --> 00:17:23,359
ascii or unicode characters

466
00:17:23,359 --> 00:17:24,799
we talked about encryption that can be

467
00:17:24,799 --> 00:17:26,079
the most difficult part but there's

468
00:17:26,079 --> 00:17:26,959
times where you

469
00:17:26,959 --> 00:17:29,360
will have things that aren't encrypted

470
00:17:29,360 --> 00:17:31,280
and looking for

471
00:17:31,280 --> 00:17:34,880
printable ascii or unicode is a good

472
00:17:34,880 --> 00:17:36,880
sanity check in terms of

473
00:17:36,880 --> 00:17:38,080
determining whether something is

474
00:17:38,080 --> 00:17:40,720
encrypted or not once you've

475
00:17:40,720 --> 00:17:42,400
identified these chunks then there's

476
00:17:42,400 --> 00:17:44,320
some common fields that

477
00:17:44,320 --> 00:17:46,240
tend to show up over and over and over

478
00:17:46,240 --> 00:17:48,640
again assuming the malware provides the

479
00:17:48,640 --> 00:17:49,840
ability to

480
00:17:49,840 --> 00:17:52,400
run commands from the c2 server you're

481
00:17:52,400 --> 00:17:53,520
often going to find

482
00:17:53,520 --> 00:17:55,840
either a command id or command op code

483
00:17:55,840 --> 00:17:57,520
that's indicating okay well what type of

484
00:17:57,520 --> 00:17:59,200
command is this

485
00:17:59,200 --> 00:18:02,080
uh as well as you'll have usually a

486
00:18:02,080 --> 00:18:03,120
length

487
00:18:03,120 --> 00:18:05,919
and then the actual payload itself so in

488
00:18:05,919 --> 00:18:07,360
this example in yellow

489
00:18:07,360 --> 00:18:10,320
uh you know we have hex 41 and if we

490
00:18:10,320 --> 00:18:12,160
look at the data that comes after it we

491
00:18:12,160 --> 00:18:13,280
have exactly

492
00:18:13,280 --> 00:18:16,320
41 bytes of data so we can kind of

493
00:18:16,320 --> 00:18:17,600
assume that that

494
00:18:17,600 --> 00:18:19,679
field in yellow is a length and then the

495
00:18:19,679 --> 00:18:22,720
blue is the actual payload

496
00:18:22,720 --> 00:18:24,880
you can get a pretty good rough idea of

497
00:18:24,880 --> 00:18:26,960
the format of these payloads from the

498
00:18:26,960 --> 00:18:29,600
static analysis

499
00:18:29,600 --> 00:18:33,520
but there's

500
00:18:33,840 --> 00:18:36,960
a ton of value of actually

501
00:18:36,960 --> 00:18:39,679
testing sending some of these commands

502
00:18:39,679 --> 00:18:40,000
and

503
00:18:40,000 --> 00:18:41,360
and running the malware and even

504
00:18:41,360 --> 00:18:43,360
debugging it uh

505
00:18:43,360 --> 00:18:46,880
to try to see what it does it doesn't

506
00:18:46,880 --> 00:18:49,200
it doesn't take a lock once you have a

507
00:18:49,200 --> 00:18:51,280
c2 server up and listening

508
00:18:51,280 --> 00:18:54,400
uh to send uh the basic command even if

509
00:18:54,400 --> 00:18:56,240
you don't understand the format

510
00:18:56,240 --> 00:18:58,960
of the payload yet you can start to uh

511
00:18:58,960 --> 00:19:02,160
play around and kind of test like

512
00:19:02,160 --> 00:19:06,000
like you were uh almost a qa department

513
00:19:06,000 --> 00:19:07,440
and and sending a command and seeing

514
00:19:07,440 --> 00:19:09,360
what happens when i don't send any data

515
00:19:09,360 --> 00:19:10,799
what happens when i send data that's too

516
00:19:10,799 --> 00:19:12,400
big what happens when i send

517
00:19:12,400 --> 00:19:14,559
data that looks like this and it will

518
00:19:14,559 --> 00:19:16,320
let you start to understand better

519
00:19:16,320 --> 00:19:17,840
how does the malware handle the data

520
00:19:17,840 --> 00:19:19,360
that's coming in over the network how is

521
00:19:19,360 --> 00:19:21,039
it decoding it

522
00:19:21,039 --> 00:19:25,840
how is it interpreting it

523
00:19:26,720 --> 00:19:28,960
there are different types of commands

524
00:19:28,960 --> 00:19:31,360
that we usually see

525
00:19:31,360 --> 00:19:34,000
malware protocols supporting typical

526
00:19:34,000 --> 00:19:35,039
ones

527
00:19:35,039 --> 00:19:37,440
are a beacon of some sort so the malware

528
00:19:37,440 --> 00:19:39,440
basically starting up and attempting to

529
00:19:39,440 --> 00:19:41,520
contact the c2 server and inform it of

530
00:19:41,520 --> 00:19:42,960
who it is

531
00:19:42,960 --> 00:19:44,160
[Music]

532
00:19:44,160 --> 00:19:48,559
from there supporting some basic form of

533
00:19:48,559 --> 00:19:50,160
viewing what processes are running on

534
00:19:50,160 --> 00:19:52,000
the machine uh

535
00:19:52,000 --> 00:19:54,480
viewing and doing file manipulation is

536
00:19:54,480 --> 00:19:55,840
fairly common

537
00:19:55,840 --> 00:19:57,919
um and then upload and download files

538
00:19:57,919 --> 00:20:00,640
and command execution

539
00:20:00,640 --> 00:20:02,799
with with even just this limited command

540
00:20:02,799 --> 00:20:03,840
set there's a lot

541
00:20:03,840 --> 00:20:06,480
that a c2 server can instruct malware to

542
00:20:06,480 --> 00:20:08,480
do

543
00:20:08,480 --> 00:20:11,039
there there are less common types of

544
00:20:11,039 --> 00:20:12,480
commands that

545
00:20:12,480 --> 00:20:14,799
we have started to see more often things

546
00:20:14,799 --> 00:20:16,480
like screenshots or

547
00:20:16,480 --> 00:20:19,360
live screen viewing microphone recording

548
00:20:19,360 --> 00:20:21,679
key logging those types of things

549
00:20:21,679 --> 00:20:24,480
but ultimately uh it definitely requires

550
00:20:24,480 --> 00:20:25,200
uh

551
00:20:25,200 --> 00:20:26,960
i think more development work on the

552
00:20:26,960 --> 00:20:28,480
malware author's side

553
00:20:28,480 --> 00:20:30,960
to create these more complex commands

554
00:20:30,960 --> 00:20:32,320
and at the end of the day if they have

555
00:20:32,320 --> 00:20:33,520
command execution

556
00:20:33,520 --> 00:20:35,120
you can accomplish a lot of these same

557
00:20:35,120 --> 00:20:36,880
tasks just by

558
00:20:36,880 --> 00:20:38,960
executing a command saving the output of

559
00:20:38,960 --> 00:20:42,000
command and then downloading it back

560
00:20:42,000 --> 00:20:44,960
to the remote server

561
00:20:46,880 --> 00:20:50,480
so simulating attacks

562
00:20:50,480 --> 00:20:53,760
what is our approach here um so

563
00:20:53,760 --> 00:20:56,159
we have been creating these moxi 2

564
00:20:56,159 --> 00:20:57,600
servers again kind of

565
00:20:57,600 --> 00:21:00,080
as i described earlier as quick as

566
00:21:00,080 --> 00:21:01,440
possible get something that's up and

567
00:21:01,440 --> 00:21:02,480
working

568
00:21:02,480 --> 00:21:05,679
um and and test the malware

569
00:21:05,679 --> 00:21:07,679
and you can kind of see in this

570
00:21:07,679 --> 00:21:08,880
screenshot here

571
00:21:08,880 --> 00:21:11,200
that the goal is to kind of go from the

572
00:21:11,200 --> 00:21:12,880
state on the left where we're maybe only

573
00:21:12,880 --> 00:21:14,240
seeing beaconing to the state on the

574
00:21:14,240 --> 00:21:15,520
right where we can see

575
00:21:15,520 --> 00:21:17,679
all the different functionality of the

576
00:21:17,679 --> 00:21:18,559
malware

577
00:21:18,559 --> 00:21:20,559
so we've been working to consolidate our

578
00:21:20,559 --> 00:21:23,520
moxie 2 servers into a centralized tool

579
00:21:23,520 --> 00:21:25,679
with the goals of we wanted to make it

580
00:21:25,679 --> 00:21:27,520
easy for researchers to reverse and

581
00:21:27,520 --> 00:21:29,600
implement new protocols

582
00:21:29,600 --> 00:21:30,880
and on the flip side of that we wanted

583
00:21:30,880 --> 00:21:33,280
to make it easy for anyone to simulate

584
00:21:33,280 --> 00:21:35,840
an attack as well as provide a user

585
00:21:35,840 --> 00:21:37,360
interface that red teams are already

586
00:21:37,360 --> 00:21:39,760
used to

587
00:21:42,559 --> 00:21:45,520
so i'm going to go over a demo of the

588
00:21:45,520 --> 00:21:46,400
tool

589
00:21:46,400 --> 00:21:50,320
that we just call mox c2

590
00:21:54,480 --> 00:21:58,559
so i'll start by

591
00:21:58,559 --> 00:22:01,760
starting up our our tool it provides an

592
00:22:01,760 --> 00:22:02,960
interactive

593
00:22:02,960 --> 00:22:07,600
command line interface i can get help

594
00:22:07,600 --> 00:22:09,840
essentially though we want to start a

595
00:22:09,840 --> 00:22:11,280
listener so

596
00:22:11,280 --> 00:22:14,000
if i say listener start and it has tab

597
00:22:14,000 --> 00:22:14,960
completion

598
00:22:14,960 --> 00:22:17,200
and hit tab we can see the different

599
00:22:17,200 --> 00:22:20,400
malware families that are supported

600
00:22:20,400 --> 00:22:22,799
by the tool currently i'm going to start

601
00:22:22,799 --> 00:22:24,400
a listener for the

602
00:22:24,400 --> 00:22:26,559
mata family and i'm going to listen on

603
00:22:26,559 --> 00:22:29,840
port 443

604
00:22:32,320 --> 00:22:35,600
so if i come over to my virtual machine

605
00:22:35,600 --> 00:22:37,360
now

606
00:22:37,360 --> 00:22:41,520
where i have the malware installed

607
00:22:41,520 --> 00:22:43,280
i'm going to go ahead and start running

608
00:22:43,280 --> 00:22:45,918
the malware

609
00:22:46,159 --> 00:22:49,760
and then i'll come back to my terminal

610
00:22:49,760 --> 00:22:51,280
and we can see that an ip

611
00:22:51,280 --> 00:22:54,720
has connected mada command has been sent

612
00:22:54,720 --> 00:22:55,440
and it has been

613
00:22:55,440 --> 00:22:58,080
acknowledged

614
00:22:58,480 --> 00:23:00,400
so from here i'll run the list command

615
00:23:00,400 --> 00:23:02,559
to see who's connected

616
00:23:02,559 --> 00:23:05,280
there's an agent id i can use the

617
00:23:05,280 --> 00:23:07,120
interact command

618
00:23:07,120 --> 00:23:12,159
to interact with the connected piece of

619
00:23:12,159 --> 00:23:16,960
malware from here i'll type help again

620
00:23:16,960 --> 00:23:19,039
and we can see the list of commands that

621
00:23:19,039 --> 00:23:20,320
are available

622
00:23:20,320 --> 00:23:23,520
once i'm interacting with an agent so uh

623
00:23:23,520 --> 00:23:25,760
i'll start just to get some information

624
00:23:25,760 --> 00:23:29,840
about um the machine i'm on so

625
00:23:29,840 --> 00:23:32,720
who am i uh you know kind of where am i

626
00:23:32,720 --> 00:23:34,559
on the machine

627
00:23:34,559 --> 00:23:36,480
and we can see that it returned okay

628
00:23:36,480 --> 00:23:38,000
you're the fake user you're on the fake

629
00:23:38,000 --> 00:23:38,799
user's

630
00:23:38,799 --> 00:23:42,720
desktop so

631
00:23:42,720 --> 00:23:44,720
uh maybe i want to see what's actually

632
00:23:44,720 --> 00:23:46,880
on the desktop

633
00:23:46,880 --> 00:23:50,000
i can see that there's a couple files in

634
00:23:50,000 --> 00:23:52,720
this case credentials

635
00:23:52,720 --> 00:23:54,559
looks like something that might be

636
00:23:54,559 --> 00:23:56,880
interesting so i'll use the download

637
00:23:56,880 --> 00:23:59,279
command

638
00:23:59,520 --> 00:24:02,840
to download this file to my local

639
00:24:02,840 --> 00:24:05,840
machine

640
00:24:09,840 --> 00:24:11,600
and we can see that the first time i had

641
00:24:11,600 --> 00:24:12,960
already downloaded it the second time

642
00:24:12,960 --> 00:24:13,440
then

643
00:24:13,440 --> 00:24:17,039
it saved it successfully from here

644
00:24:17,039 --> 00:24:21,039
you know maybe i want to um

645
00:24:21,039 --> 00:24:24,400
upload a a tool

646
00:24:25,360 --> 00:24:27,840
to to do some recon on the machine so

647
00:24:27,840 --> 00:24:32,320
i'll upload a tool called swift belt

648
00:24:32,320 --> 00:24:37,120
and then i'll make the tool executable

649
00:24:39,120 --> 00:24:42,960
and then finally i'll

650
00:24:42,960 --> 00:24:44,320
actually run the tool to get the

651
00:24:44,320 --> 00:24:46,159
information about the machine

652
00:24:46,159 --> 00:24:49,760
that i'm running on and this is all just

653
00:24:49,760 --> 00:24:51,360
output from the tool being run

654
00:24:51,360 --> 00:24:55,039
remotely on the machine so

655
00:24:55,360 --> 00:24:57,200
we can see that i'm getting back

656
00:24:57,200 --> 00:24:59,279
information about the operating system

657
00:24:59,279 --> 00:25:00,480
it's mac os

658
00:25:00,480 --> 00:25:03,840
10 15 5 i see the user that i am the

659
00:25:03,840 --> 00:25:05,919
home directory

660
00:25:05,919 --> 00:25:09,919
computer name ip address information

661
00:25:09,919 --> 00:25:11,600
environment variables it's even

662
00:25:11,600 --> 00:25:14,000
searching for credentials

663
00:25:14,000 --> 00:25:17,120
one of the other nice things about the

664
00:25:17,120 --> 00:25:19,120
moxie 2 tool is

665
00:25:19,120 --> 00:25:20,799
it's got a debugging menu so i can turn

666
00:25:20,799 --> 00:25:22,640
on debugging

667
00:25:22,640 --> 00:25:25,760
and execute another command and

668
00:25:25,760 --> 00:25:28,720
this time i'm going to end up seeing

669
00:25:28,720 --> 00:25:29,919
essentially the

670
00:25:29,919 --> 00:25:31,840
network traffic that's going back and

671
00:25:31,840 --> 00:25:33,200
forth so

672
00:25:33,200 --> 00:25:35,360
as you're kind of maybe adding support

673
00:25:35,360 --> 00:25:37,440
for a new network protocol

674
00:25:37,440 --> 00:25:38,960
you can kind of work to see what data is

675
00:25:38,960 --> 00:25:40,799
being sent back and forth you know what

676
00:25:40,799 --> 00:25:42,559
commands coming across

677
00:25:42,559 --> 00:25:45,039
uh what's that command id what's the

678
00:25:45,039 --> 00:25:46,000
size

679
00:25:46,000 --> 00:25:50,320
uh you know what is the actual

680
00:25:50,320 --> 00:25:54,320
uh data coming back the payload format

681
00:25:54,320 --> 00:25:57,840
uh that's showing up

682
00:26:05,679 --> 00:26:08,480
so a couple just additional thoughts

683
00:26:08,480 --> 00:26:09,200
before i

684
00:26:09,200 --> 00:26:13,200
finish up first you know i hope

685
00:26:13,200 --> 00:26:16,159
that you take away from this talk the

686
00:26:16,159 --> 00:26:18,480
fact that mocking c2 servers can have a

687
00:26:18,480 --> 00:26:19,120
huge

688
00:26:19,120 --> 00:26:23,520
benefit providing the ability to

689
00:26:23,520 --> 00:26:25,679
put a piece of malware kind of through

690
00:26:25,679 --> 00:26:27,360
its paces and

691
00:26:27,360 --> 00:26:29,918
having it

692
00:26:31,120 --> 00:26:32,799
kind of do more than just send a beacon

693
00:26:32,799 --> 00:26:34,480
packet out

694
00:26:34,480 --> 00:26:36,400
can really provide a ton of additional

695
00:26:36,400 --> 00:26:37,919
visibility

696
00:26:37,919 --> 00:26:40,720
and really allow us as defenders to

697
00:26:40,720 --> 00:26:42,880
better understand

698
00:26:42,880 --> 00:26:45,360
how we can protect our users against

699
00:26:45,360 --> 00:26:47,120
these type of attacks

700
00:26:47,120 --> 00:26:48,559
the other takeaway i hope you get is

701
00:26:48,559 --> 00:26:50,000
that it can be easier than you might

702
00:26:50,000 --> 00:26:52,240
think to get a moxie 2 server working

703
00:26:52,240 --> 00:26:53,919
again with the goal of just starting

704
00:26:53,919 --> 00:26:55,840
simple adding functionality as you need

705
00:26:55,840 --> 00:26:56,240
it

706
00:26:56,240 --> 00:26:58,000
you can usually get something up and

707
00:26:58,000 --> 00:26:59,840
running

708
00:26:59,840 --> 00:27:03,279
pretty quickly finally

709
00:27:03,279 --> 00:27:05,679
the demo i just gave of the moxi 2 tool

710
00:27:05,679 --> 00:27:06,880
we're going to be

711
00:27:06,880 --> 00:27:10,080
releasing the tool as open source

712
00:27:10,080 --> 00:27:13,600
and i'd love it if folks would

713
00:27:13,600 --> 00:27:15,760
join and help contribute more family

714
00:27:15,760 --> 00:27:17,600
protocols to make it even easier to kind

715
00:27:17,600 --> 00:27:21,840
of simulate these attacks in the future

716
00:27:21,840 --> 00:27:31,840
thank you

