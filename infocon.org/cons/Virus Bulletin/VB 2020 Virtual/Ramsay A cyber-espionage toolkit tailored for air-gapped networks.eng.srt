1
00:00:09,040 --> 00:00:10,160
welcome everybody

2
00:00:10,160 --> 00:00:12,639
and thanks for tuning in before i start

3
00:00:12,639 --> 00:00:14,240
i want to say that it's a true pleasure

4
00:00:14,240 --> 00:00:15,759
to be presenting again and

5
00:00:15,759 --> 00:00:18,000
at virus bulletin and today's

6
00:00:18,000 --> 00:00:19,520
presentation is going to be about ramsey

7
00:00:19,520 --> 00:00:21,520
which is a cyber espionage toolkit

8
00:00:21,520 --> 00:00:23,760
we reported back in may which is

9
00:00:23,760 --> 00:00:26,080
tailored for air gap networks

10
00:00:26,080 --> 00:00:28,160
so before we start let me give you a

11
00:00:28,160 --> 00:00:30,480
brief introduction about myself

12
00:00:30,480 --> 00:00:32,000
my name is ignato san miyan and i'm

13
00:00:32,000 --> 00:00:33,280
currently working as a malware

14
00:00:33,280 --> 00:00:35,120
researcher at eset

15
00:00:35,120 --> 00:00:38,399
and prior to work at eset i work at

16
00:00:38,399 --> 00:00:40,559
intercert labs which is an israeli-based

17
00:00:40,559 --> 00:00:42,840
company that focuses on core reuse

18
00:00:42,840 --> 00:00:45,120
technologies

19
00:00:45,120 --> 00:00:46,640
so the agenda for today is going to

20
00:00:46,640 --> 00:00:49,039
start by giving a brief overview of what

21
00:00:49,039 --> 00:00:51,280
air gapping is

22
00:00:51,280 --> 00:00:53,199
then we will talk about the ramsey

23
00:00:53,199 --> 00:00:55,360
framework and its capabilities and the

24
00:00:55,360 --> 00:00:58,160
different versions that we found

25
00:00:58,160 --> 00:01:00,879
then we will give a brief overview in

26
00:01:00,879 --> 00:01:02,640
regards to the overlaps that we found

27
00:01:02,640 --> 00:01:05,840
between ramsey and our hotel

28
00:01:05,840 --> 00:01:08,720
we will also show how we think ramsey is

29
00:01:08,720 --> 00:01:09,680
operated

30
00:01:09,680 --> 00:01:11,360
and then we will round it up and

31
00:01:11,360 --> 00:01:14,320
finalize with a conclusion

32
00:01:14,320 --> 00:01:16,799
so let's talk about air gapping so the

33
00:01:16,799 --> 00:01:18,400
following diagram

34
00:01:18,400 --> 00:01:21,520
that you can see is usually a

35
00:01:21,520 --> 00:01:24,880
is a high level perspective of

36
00:01:24,880 --> 00:01:26,960
how an aircap network might look like

37
00:01:26,960 --> 00:01:28,320
and aircap networks

38
00:01:28,320 --> 00:01:30,479
usually have two sides a closed network

39
00:01:30,479 --> 00:01:31,920
which is the network that wants to be

40
00:01:31,920 --> 00:01:33,119
isolated

41
00:01:33,119 --> 00:01:35,360
and an open network which is the network

42
00:01:35,360 --> 00:01:36,880
in which their gap network was to be

43
00:01:36,880 --> 00:01:38,400
isolated from

44
00:01:38,400 --> 00:01:40,079
these two sites can also be known as

45
00:01:40,079 --> 00:01:42,000
high side or low side depending on the

46
00:01:42,000 --> 00:01:44,960
confidentiality level of each network

47
00:01:44,960 --> 00:01:47,600
and air gapping long story short is

48
00:01:47,600 --> 00:01:49,280
basically a network security measure

49
00:01:49,280 --> 00:01:50,880
that can be applied to one or more

50
00:01:50,880 --> 00:01:52,159
computers

51
00:01:52,159 --> 00:01:55,520
in order to ensure that a given subject

52
00:01:55,520 --> 00:01:58,320
network is physically isolated and this

53
00:01:58,320 --> 00:02:00,960
is usually done in order to prevent

54
00:02:00,960 --> 00:02:03,119
exposure of the subject network to the

55
00:02:03,119 --> 00:02:04,479
internet or local area

56
00:02:04,479 --> 00:02:08,239
network there are various

57
00:02:08,239 --> 00:02:10,720
organizations in which air gapping might

58
00:02:10,720 --> 00:02:11,760
be enforced

59
00:02:11,760 --> 00:02:14,080
however usually air capping is enforcing

60
00:02:14,080 --> 00:02:16,319
military or governmental computer

61
00:02:16,319 --> 00:02:18,560
computer systems financial computer

62
00:02:18,560 --> 00:02:20,000
systems or

63
00:02:20,000 --> 00:02:23,200
industrial control systems

64
00:02:23,200 --> 00:02:24,959
i will also want to talk about a

65
00:02:24,959 --> 00:02:26,640
specific event that took place between

66
00:02:26,640 --> 00:02:28,319
may and june 2020

67
00:02:28,319 --> 00:02:31,040
in which we witnessed an increase of

68
00:02:31,040 --> 00:02:32,560
reports

69
00:02:32,560 --> 00:02:34,160
from different vendors in regards to

70
00:02:34,160 --> 00:02:36,400
malware targeting air gaps

71
00:02:36,400 --> 00:02:38,640
and these were usb ferry reported by

72
00:02:38,640 --> 00:02:40,000
trend micro

73
00:02:40,000 --> 00:02:42,720
rams reported by us is it and then cycle

74
00:02:42,720 --> 00:02:44,640
deck reported by kaspersky

75
00:02:44,640 --> 00:02:48,160
and let me say that encountering reports

76
00:02:48,160 --> 00:02:51,120
or at least open on or openly available

77
00:02:51,120 --> 00:02:51,840
reports

78
00:02:51,840 --> 00:02:55,840
talking about malware targeting air gaps

79
00:02:55,840 --> 00:02:58,560
is not very common as malware this type

80
00:02:58,560 --> 00:03:00,159
of hardware

81
00:03:00,159 --> 00:03:03,360
is not very useful to find

82
00:03:03,360 --> 00:03:05,760
uh but the fact that three different

83
00:03:05,760 --> 00:03:06,480
vendors

84
00:03:06,480 --> 00:03:10,159
uh reported their own um activity set

85
00:03:10,159 --> 00:03:13,360
in regards to malware uh targeting air

86
00:03:13,360 --> 00:03:14,959
gaps within a time frame

87
00:03:14,959 --> 00:03:17,440
of one month is pretty remarkable and

88
00:03:17,440 --> 00:03:18,000
tell us

89
00:03:18,000 --> 00:03:21,440
a bit how this kind of networks are

90
00:03:21,440 --> 00:03:23,920
increasingly increasingly demanded by

91
00:03:23,920 --> 00:03:25,440
adversaries

92
00:03:25,440 --> 00:03:28,640
and this high volume or relatively high

93
00:03:28,640 --> 00:03:29,519
volume

94
00:03:29,519 --> 00:03:31,840
of targeting of these networks can

95
00:03:31,840 --> 00:03:32,640
classify

96
00:03:32,640 --> 00:03:35,920
these networks as high value targets and

97
00:03:35,920 --> 00:03:39,200
it's very clear that there is a definite

98
00:03:39,200 --> 00:03:41,519
incentive in order to target these kind

99
00:03:41,519 --> 00:03:42,400
of networks

100
00:03:42,400 --> 00:03:44,159
as they usually secure classifier

101
00:03:44,159 --> 00:03:46,560
critical information however

102
00:03:46,560 --> 00:03:48,480
it's important to also know that

103
00:03:48,480 --> 00:03:50,720
operating within this type of networks

104
00:03:50,720 --> 00:03:52,159
comes with a trade-off

105
00:03:52,159 --> 00:03:54,400
and operational objectives have to be

106
00:03:54,400 --> 00:03:56,480
achieved based on a constrained

107
00:03:56,480 --> 00:03:59,840
set of resources for example one a

108
00:03:59,840 --> 00:04:01,120
specific resource that

109
00:04:01,120 --> 00:04:04,640
would be almost immediate to think of

110
00:04:04,640 --> 00:04:06,959
that will that won't be accessible from

111
00:04:06,959 --> 00:04:08,080
air gap networks

112
00:04:08,080 --> 00:04:11,760
is the availability of a network-based

113
00:04:11,760 --> 00:04:15,040
communication channel the scarcity of a

114
00:04:15,040 --> 00:04:16,399
communication of a network-based

115
00:04:16,399 --> 00:04:17,680
communication channel

116
00:04:17,680 --> 00:04:20,720
will actually provoke is to have a poor

117
00:04:20,720 --> 00:04:23,199
a feedback cycle between operators and

118
00:04:23,199 --> 00:04:24,639
their toolkits

119
00:04:24,639 --> 00:04:27,120
in the sense of if a toolkit actually

120
00:04:27,120 --> 00:04:29,600
performs some unpredictable behavior

121
00:04:29,600 --> 00:04:32,639
or simply there is something that goes

122
00:04:32,639 --> 00:04:34,880
wrong while operating it

123
00:04:34,880 --> 00:04:36,160
operators are not going to be able to

124
00:04:36,160 --> 00:04:38,400
find out about this as they won't have

125
00:04:38,400 --> 00:04:39,280
the means

126
00:04:39,280 --> 00:04:42,800
to react uh quickly

127
00:04:42,800 --> 00:04:46,560
to this type of incident so what we have

128
00:04:46,560 --> 00:04:49,120
well what will lead what this will lead

129
00:04:49,120 --> 00:04:50,479
to is to

130
00:04:50,479 --> 00:04:52,720
developers behind these toolkits to

131
00:04:52,720 --> 00:04:54,320
design this malware

132
00:04:54,320 --> 00:04:57,520
as to be self-reliable and

133
00:04:57,520 --> 00:04:59,759
writing self-reliable malware

134
00:04:59,759 --> 00:05:00,960
proficiently is

135
00:05:00,960 --> 00:05:04,160
not easy but on top of that

136
00:05:04,160 --> 00:05:06,320
usually this kind of malware contains

137
00:05:06,320 --> 00:05:07,280
some sort of

138
00:05:07,280 --> 00:05:10,000
lateral movement capability which the

139
00:05:10,000 --> 00:05:11,120
combination of

140
00:05:11,120 --> 00:05:13,919
lateral moving capability with a sort of

141
00:05:13,919 --> 00:05:16,000
autonomous malware

142
00:05:16,000 --> 00:05:19,120
what it what it ends up into is

143
00:05:19,120 --> 00:05:22,000
that the proliferation the control of

144
00:05:22,000 --> 00:05:23,440
the proliferation of this malware is

145
00:05:23,440 --> 00:05:24,320
actually

146
00:05:24,320 --> 00:05:28,160
a very hard

147
00:05:28,160 --> 00:05:32,320
however furthermore the

148
00:05:32,320 --> 00:05:33,600
there is also an ambiguous modus

149
00:05:33,600 --> 00:05:35,919
operandi of these toolkits because

150
00:05:35,919 --> 00:05:39,280
the these toolkits depending on whether

151
00:05:39,280 --> 00:05:42,080
on where the thread actors foothold is

152
00:05:42,080 --> 00:05:43,440
in regards of whether

153
00:05:43,440 --> 00:05:46,240
it is where the the threat actors have

154
00:05:46,240 --> 00:05:46,960
physical

155
00:05:46,960 --> 00:05:50,000
presence of in their gap or whether they

156
00:05:50,000 --> 00:05:51,360
have a foothold

157
00:05:51,360 --> 00:05:54,320
in asian networks of their gap the this

158
00:05:54,320 --> 00:05:55,600
kind of toolkits will be

159
00:05:55,600 --> 00:05:57,440
leveraged and operated completely

160
00:05:57,440 --> 00:05:58,880
different

161
00:05:58,880 --> 00:06:00,880
but anyways this is a subject this

162
00:06:00,880 --> 00:06:03,120
subject is very interesting as

163
00:06:03,120 --> 00:06:05,520
is a very interesting dilemma for threat

164
00:06:05,520 --> 00:06:07,440
actors to consider whether

165
00:06:07,440 --> 00:06:10,720
these targets are actually worth

166
00:06:10,720 --> 00:06:14,160
to intrude as it's clear that the degree

167
00:06:14,160 --> 00:06:16,080
of resources that have to be applied in

168
00:06:16,080 --> 00:06:17,759
order to target and

169
00:06:17,759 --> 00:06:19,280
also operate within this type of

170
00:06:19,280 --> 00:06:22,799
networks is really high

171
00:06:23,039 --> 00:06:25,840
but let's talk specifically about ramsey

172
00:06:25,840 --> 00:06:26,400
what is

173
00:06:26,400 --> 00:06:29,759
ramses what is the ramsey framework so

174
00:06:29,759 --> 00:06:32,960
ramsay is a framework that is designed

175
00:06:32,960 --> 00:06:34,000
in order to steal

176
00:06:34,000 --> 00:06:36,960
sensitive documents and it can be

177
00:06:36,960 --> 00:06:40,560
operated within air gap networks

178
00:06:40,560 --> 00:06:42,160
the reason we call it ramps is because

179
00:06:42,160 --> 00:06:43,840
we found several references of the

180
00:06:43,840 --> 00:06:46,000
string ramsey among all the different

181
00:06:46,000 --> 00:06:48,240
components that we were able to find and

182
00:06:48,240 --> 00:06:50,240
we believe ramsay is actually the name

183
00:06:50,240 --> 00:06:52,960
that reactors chose to call this toolkit

184
00:06:52,960 --> 00:06:57,919
so we decided to call it as well

185
00:06:58,479 --> 00:06:59,919
the first sample that we found was

186
00:06:59,919 --> 00:07:01,680
around march 2020 and it was uploaded

187
00:07:01,680 --> 00:07:03,759
from japan to varasturo

188
00:07:03,759 --> 00:07:05,840
and after technical analysis of this

189
00:07:05,840 --> 00:07:07,520
specific toolkit

190
00:07:07,520 --> 00:07:10,080
we believe that it is possibly still at

191
00:07:10,080 --> 00:07:12,880
development stage

192
00:07:12,880 --> 00:07:15,199
so here you can see a diagram of the

193
00:07:15,199 --> 00:07:16,160
anatomy of

194
00:07:16,160 --> 00:07:18,080
all of the three different variants that

195
00:07:18,080 --> 00:07:19,599
we were able to find

196
00:07:19,599 --> 00:07:21,039
and there are three different versions

197
00:07:21,039 --> 00:07:23,120
but really there are two versions resume

198
00:07:23,120 --> 00:07:23,440
one

199
00:07:23,440 --> 00:07:26,319
and version two on version one ramsay

200
00:07:26,319 --> 00:07:28,080
gets dropped from a malicious document

201
00:07:28,080 --> 00:07:31,039
leveraging cv 2017

202
00:07:31,039 --> 00:07:32,639
which is an only to-link related

203
00:07:32,639 --> 00:07:36,080
vulnerability and

204
00:07:36,080 --> 00:07:37,520
the main characteristics about this

205
00:07:37,520 --> 00:07:39,360
version is first that is

206
00:07:39,360 --> 00:07:42,960
very simple and structure

207
00:07:42,960 --> 00:07:45,120
in contrast with version two but also

208
00:07:45,120 --> 00:07:46,400
that the ramsey agent

209
00:07:46,400 --> 00:07:48,560
in this version gets shipped as a

210
00:07:48,560 --> 00:07:51,120
standard pe executable

211
00:07:51,120 --> 00:07:53,759
then we have rusty version two in which

212
00:07:53,759 --> 00:07:55,280
we have two variants

213
00:07:55,280 --> 00:07:57,599
ramsey version 2.8 gets actually

214
00:07:57,599 --> 00:07:58,319
delivered

215
00:07:58,319 --> 00:08:00,560
as the coin installer which at some

216
00:08:00,560 --> 00:08:01,759
point drops

217
00:08:01,759 --> 00:08:05,199
a installer which the installer itself

218
00:08:05,199 --> 00:08:08,319
drops a series of components and among

219
00:08:08,319 --> 00:08:09,840
all of these companies there is one

220
00:08:09,840 --> 00:08:11,360
worth to highlight which is the

221
00:08:11,360 --> 00:08:13,759
appearance of an espretta component

222
00:08:13,759 --> 00:08:17,120
which is actually exclusive

223
00:08:17,120 --> 00:08:20,319
and unique for ramsey version 2.8

224
00:08:20,319 --> 00:08:22,000
and then on the other hand we have

225
00:08:22,000 --> 00:08:23,599
ramsey version 2.b

226
00:08:23,599 --> 00:08:25,280
which again gets dropped from a

227
00:08:25,280 --> 00:08:27,120
malicious document

228
00:08:27,120 --> 00:08:31,599
but this time leveraging cve 2017-1182

229
00:08:31,599 --> 00:08:34,559
which is a vulnerability related to a

230
00:08:34,559 --> 00:08:37,360
word equation editor

231
00:08:37,360 --> 00:08:40,159
and there is one thing also that can be

232
00:08:40,159 --> 00:08:41,679
straightaway spotted between

233
00:08:41,679 --> 00:08:44,560
ramsey version one and brass version two

234
00:08:44,560 --> 00:08:46,560
the first one is that

235
00:08:46,560 --> 00:08:49,120
there is always a rooted component

236
00:08:49,120 --> 00:08:50,560
leveraged in ramses

237
00:08:50,560 --> 00:08:53,920
in rhapsody in version two also there

238
00:08:53,920 --> 00:08:54,240
are

239
00:08:54,240 --> 00:08:56,160
specific components that we can notice

240
00:08:56,160 --> 00:08:57,519
that are always leveraged in every

241
00:08:57,519 --> 00:08:59,839
single version such as for example

242
00:08:59,839 --> 00:09:02,880
a usmi component for performing a

243
00:09:02,880 --> 00:09:06,160
privileged escalation but also a winrar

244
00:09:06,160 --> 00:09:09,360
instance that gets con

245
00:09:09,360 --> 00:09:12,480
gets um gets leveraged in order to

246
00:09:12,480 --> 00:09:15,760
compress some of the files that ramsay

247
00:09:15,760 --> 00:09:17,040
collects

248
00:09:17,040 --> 00:09:19,600
but also it's important to to mention

249
00:09:19,600 --> 00:09:20,480
that

250
00:09:20,480 --> 00:09:23,920
ramsay ramses collection capability

251
00:09:23,920 --> 00:09:26,959
is actually remain and keep the same

252
00:09:26,959 --> 00:09:29,519
in the three in these three different

253
00:09:29,519 --> 00:09:31,920
versions

254
00:09:32,720 --> 00:09:34,880
so when we when we extracted the

255
00:09:34,880 --> 00:09:36,320
compilation um

256
00:09:36,320 --> 00:09:38,640
metadata among all of the different

257
00:09:38,640 --> 00:09:40,480
versions from their correspond

258
00:09:40,480 --> 00:09:42,560
from their corresponding artifacts we

259
00:09:42,560 --> 00:09:44,480
found that the estimated development

260
00:09:44,480 --> 00:09:45,440
timeline

261
00:09:45,440 --> 00:09:48,839
ranges from september 2019 to march

262
00:09:48,839 --> 00:09:50,560
2020. and

263
00:09:50,560 --> 00:09:53,040
although it might not seem like it this

264
00:09:53,040 --> 00:09:55,839
is a pretty short development timeline

265
00:09:55,839 --> 00:09:57,839
and this is a further lead for us to

266
00:09:57,839 --> 00:09:59,519
believe that this

267
00:09:59,519 --> 00:10:02,839
toolkit is indeed in its very early

268
00:10:02,839 --> 00:10:04,480
stages

269
00:10:04,480 --> 00:10:05,680
so before i talk about the main

270
00:10:05,680 --> 00:10:07,680
capabilities i first want to have a word

271
00:10:07,680 --> 00:10:10,880
in regards to ramsey's agent and

272
00:10:10,880 --> 00:10:13,360
specifically ramsey version 2 agent

273
00:10:13,360 --> 00:10:13,920
which

274
00:10:13,920 --> 00:10:15,440
we believe is the most up-to-date

275
00:10:15,440 --> 00:10:17,120
version so

276
00:10:17,120 --> 00:10:19,200
this ramsey agent it gets deployed as a

277
00:10:19,200 --> 00:10:20,240
dll

278
00:10:20,240 --> 00:10:23,120
and gets leveraged via a specific dll

279
00:10:23,120 --> 00:10:24,640
hijacking technique which is known as

280
00:10:24,640 --> 00:10:26,480
phantom data hijacking

281
00:10:26,480 --> 00:10:28,959
which in short terms what this dll

282
00:10:28,959 --> 00:10:30,399
hijacking

283
00:10:30,399 --> 00:10:33,600
technique basically consists of is by

284
00:10:33,600 --> 00:10:35,920
abusing backwards compatibility of

285
00:10:35,920 --> 00:10:38,000
specific windows applications

286
00:10:38,000 --> 00:10:39,920
so what happens is that the specific

287
00:10:39,920 --> 00:10:41,360
windows applications

288
00:10:41,360 --> 00:10:44,800
load specific dependencies and

289
00:10:44,800 --> 00:10:46,320
on newer versions of these windows

290
00:10:46,320 --> 00:10:48,640
applications these dependencies are no

291
00:10:48,640 --> 00:10:49,680
longer needed

292
00:10:49,680 --> 00:10:51,680
however they still get loaded due to

293
00:10:51,680 --> 00:10:53,600
backwards compatibility reasons

294
00:10:53,600 --> 00:10:56,240
so nothing stops tradactus from actually

295
00:10:56,240 --> 00:10:57,120
leveraging

296
00:10:57,120 --> 00:11:00,320
malicious versions of these dlls and

297
00:11:00,320 --> 00:11:02,240
that's exactly what phantom dlc

298
00:11:02,240 --> 00:11:03,920
hijacking consists of

299
00:11:03,920 --> 00:11:06,640
but in regards to ramsey ramsey

300
00:11:06,640 --> 00:11:08,640
leverages phantom dll hijacking for two

301
00:11:08,640 --> 00:11:09,760
main reasons

302
00:11:09,760 --> 00:11:12,800
one is to establish persistence of the

303
00:11:12,800 --> 00:11:13,600
main

304
00:11:13,600 --> 00:11:16,640
rams installer but also to

305
00:11:16,640 --> 00:11:19,440
distribute the ramses agent capability

306
00:11:19,440 --> 00:11:20,000
so

307
00:11:20,000 --> 00:11:23,040
this is an interesting design of choice

308
00:11:23,040 --> 00:11:25,279
and what will happen is that depending

309
00:11:25,279 --> 00:11:26,720
on which process loads

310
00:11:26,720 --> 00:11:29,519
the ram c agent a different display of

311
00:11:29,519 --> 00:11:32,720
capabilities will be performed

312
00:11:32,720 --> 00:11:35,360
so this is a snippet of dll main and as

313
00:11:35,360 --> 00:11:36,560
we can see that

314
00:11:36,560 --> 00:11:38,800
the module name gets compared and a

315
00:11:38,800 --> 00:11:40,320
different set of code will be

316
00:11:40,320 --> 00:11:42,560
executed accordingly but also it's

317
00:11:42,560 --> 00:11:44,399
important to note that

318
00:11:44,399 --> 00:11:47,200
the ramses agents contain specific

319
00:11:47,200 --> 00:11:49,600
exports that are

320
00:11:49,600 --> 00:11:53,600
specific for concrete windows services

321
00:11:53,600 --> 00:11:57,839
and in fact we found that

322
00:11:57,839 --> 00:12:01,440
ramses ramsay affected two main

323
00:12:01,440 --> 00:12:04,079
windows services which were a w search

324
00:12:04,079 --> 00:12:05,040
or also known as

325
00:12:05,040 --> 00:12:07,320
windows search service by hijacking

326
00:12:07,320 --> 00:12:08,959
msft.dll

327
00:12:08,959 --> 00:12:10,560
and the other service which gets

328
00:12:10,560 --> 00:12:12,000
affected by ramsay is

329
00:12:12,000 --> 00:12:15,760
msdtc service which gets hijacked

330
00:12:15,760 --> 00:12:18,560
which gets impact by hijacking a

331
00:12:18,560 --> 00:12:20,639
dependency of oracle which is

332
00:12:20,639 --> 00:12:24,079
oc.dll so the main

333
00:12:24,079 --> 00:12:26,480
uh chain reaction of events that takes

334
00:12:26,480 --> 00:12:28,079
place after hijacking these

335
00:12:28,079 --> 00:12:31,680
dlls is the following so initially

336
00:12:31,680 --> 00:12:35,519
after hijacking msft.dnl

337
00:12:35,519 --> 00:12:37,600
the windows search service will be

338
00:12:37,600 --> 00:12:38,880
forced to be restarted

339
00:12:38,880 --> 00:12:41,040
and when that happens an instance of

340
00:12:41,040 --> 00:12:42,800
search indexer will be

341
00:12:42,800 --> 00:12:45,360
such search index.exe will be deployed

342
00:12:45,360 --> 00:12:47,519
at that time

343
00:12:47,519 --> 00:12:49,200
ramsay will be already running within

344
00:12:49,200 --> 00:12:51,519
the context of search indexer.exe

345
00:12:51,519 --> 00:12:52,880
and what it will do is it will create a

346
00:12:52,880 --> 00:12:55,160
detached instance of search user

347
00:12:55,160 --> 00:12:57,360
host.ds.exe

348
00:12:57,360 --> 00:12:59,760
when search user when ramsay is loaded

349
00:12:59,760 --> 00:13:01,839
within search user house.exe

350
00:13:01,839 --> 00:13:04,839
then it will basically perform its main

351
00:13:04,839 --> 00:13:06,160
capabilities uh

352
00:13:06,160 --> 00:13:09,360
which range from collection to spreading

353
00:13:09,360 --> 00:13:11,120
depending on ramsey version

354
00:13:11,120 --> 00:13:13,079
but it will also inject itself into

355
00:13:13,079 --> 00:13:14,639
explorer.exe

356
00:13:14,639 --> 00:13:16,560
and once ramsay is running within the

357
00:13:16,560 --> 00:13:18,320
context of explore.exe

358
00:13:18,320 --> 00:13:21,680
it will just collect recently open word

359
00:13:21,680 --> 00:13:22,959
documents from office

360
00:13:22,959 --> 00:13:25,760
in intervals on the other hand we have

361
00:13:25,760 --> 00:13:27,200
msdtc service

362
00:13:27,200 --> 00:13:29,120
and when ramsey runs within the context

363
00:13:29,120 --> 00:13:31,200
of msdtc.exe

364
00:13:31,200 --> 00:13:33,040
it will just establish persistence of

365
00:13:33,040 --> 00:13:34,480
the ramsey installer

366
00:13:34,480 --> 00:13:36,160
and for any other process that ramsey

367
00:13:36,160 --> 00:13:37,600
might get injected into

368
00:13:37,600 --> 00:13:40,399
it will just deploy the compression and

369
00:13:40,399 --> 00:13:42,240
cover storage capabilities that we'll be

370
00:13:42,240 --> 00:13:44,880
talking next

371
00:13:44,880 --> 00:13:47,120
so there is a lot that could be said

372
00:13:47,120 --> 00:13:48,560
about ramsey

373
00:13:48,560 --> 00:13:51,360
however we decided to only talk about

374
00:13:51,360 --> 00:13:52,720
these three different

375
00:13:52,720 --> 00:13:54,959
topics in terms of its main capabilities

376
00:13:54,959 --> 00:13:56,079
which we think that

377
00:13:56,079 --> 00:13:58,160
are the most relevant which are

378
00:13:58,160 --> 00:13:59,680
collection and cover storage command

379
00:13:59,680 --> 00:14:00,560
execution

380
00:14:00,560 --> 00:14:03,760
and spreading so

381
00:14:03,760 --> 00:14:06,560
in terms of collection as we previously

382
00:14:06,560 --> 00:14:07,360
mentioned

383
00:14:07,360 --> 00:14:09,440
ramsay's main objective is to collect

384
00:14:09,440 --> 00:14:10,720
sensitive documents

385
00:14:10,720 --> 00:14:13,040
and what it will do is it will search

386
00:14:13,040 --> 00:14:14,800
for microsoft word documents and text

387
00:14:14,800 --> 00:14:15,360
files

388
00:14:15,360 --> 00:14:17,600
from the system drive remove media and

389
00:14:17,600 --> 00:14:20,320
network shares

390
00:14:20,320 --> 00:14:24,800
and these the phone files that ramsay

391
00:14:24,800 --> 00:14:27,519
attempts to collect they will first be

392
00:14:27,519 --> 00:14:28,880
stored in a

393
00:14:28,880 --> 00:14:31,600
preliminary collection directory and the

394
00:14:31,600 --> 00:14:33,120
path of this preliminary collection

395
00:14:33,120 --> 00:14:33,839
directory

396
00:14:33,839 --> 00:14:38,079
might vary depending on on raw c version

397
00:14:40,000 --> 00:14:42,560
for each for each file that gets

398
00:14:42,560 --> 00:14:44,160
attempted to be collected

399
00:14:44,160 --> 00:14:45,600
if it's a binary file it will be

400
00:14:45,600 --> 00:14:47,680
attempted to be encrypted

401
00:14:47,680 --> 00:14:50,160
so what will happen is that a a buffer

402
00:14:50,160 --> 00:14:50,720
to be

403
00:14:50,720 --> 00:14:52,639
to be meant to be encrypted will be

404
00:14:52,639 --> 00:14:53,920
populated

405
00:14:53,920 --> 00:14:57,199
and will be allocated sorry and then

406
00:14:57,199 --> 00:14:59,920
this buffer will be populated first with

407
00:14:59,920 --> 00:15:01,839
information in regards of the

408
00:15:01,839 --> 00:15:03,519
file that was to be collected such as

409
00:15:03,519 --> 00:15:05,680
the md5 hash the file

410
00:15:05,680 --> 00:15:08,880
or the path of the path of the original

411
00:15:08,880 --> 00:15:10,480
file

412
00:15:10,480 --> 00:15:13,440
and then a a after this information is

413
00:15:13,440 --> 00:15:14,959
appended to

414
00:15:14,959 --> 00:15:17,760
the to the subject buffer then the

415
00:15:17,760 --> 00:15:19,519
context of the file should be collected

416
00:15:19,519 --> 00:15:20,000
will be

417
00:15:20,000 --> 00:15:22,480
appended and then this this buffer will

418
00:15:22,480 --> 00:15:23,519
be attempted to be

419
00:15:23,519 --> 00:15:26,560
rc4 encrypted what will happen is that a

420
00:15:26,560 --> 00:15:28,800
sequence of 16 bytes will be generated

421
00:15:28,800 --> 00:15:31,279
and an md5 hash which will be attempted

422
00:15:31,279 --> 00:15:33,199
to be

423
00:15:33,199 --> 00:15:35,920
calculated and then this md5 hash will

424
00:15:35,920 --> 00:15:38,399
be the actual rc4 key

425
00:15:38,399 --> 00:15:40,320
and this rc4 key will be unique for

426
00:15:40,320 --> 00:15:42,800
every file and could always be found at

427
00:15:42,800 --> 00:15:46,959
offset 0 of the rc4 encrypted blob

428
00:15:46,959 --> 00:15:49,519
another thing that ramsey does is that

429
00:15:49,519 --> 00:15:52,000
this collection

430
00:15:52,000 --> 00:15:54,000
this collection activity will be

431
00:15:54,000 --> 00:15:55,279
performed uh

432
00:15:55,279 --> 00:15:57,600
every day so the way this is implemented

433
00:15:57,600 --> 00:15:58,320
is

434
00:15:58,320 --> 00:16:00,320
ramsey will store the machines local

435
00:16:00,320 --> 00:16:02,320
time and it will check in intervals

436
00:16:02,320 --> 00:16:03,759
whether the local time has changed and

437
00:16:03,759 --> 00:16:04,959
if it has changed

438
00:16:04,959 --> 00:16:07,040
it will perform all of the collection

439
00:16:07,040 --> 00:16:09,759
activities

440
00:16:09,759 --> 00:16:11,279
so that's the collection side of things

441
00:16:11,279 --> 00:16:13,440
but there is also a more interesting

442
00:16:13,440 --> 00:16:15,920
side of things which are the which is

443
00:16:15,920 --> 00:16:17,199
the cover storage

444
00:16:17,199 --> 00:16:20,240
and as we mentioned ramsey will

445
00:16:20,240 --> 00:16:22,800
attempt to collect in a preliminary

446
00:16:22,800 --> 00:16:23,519
directory

447
00:16:23,519 --> 00:16:27,839
all of the subject files to be collected

448
00:16:27,839 --> 00:16:31,040
and this subject a

449
00:16:31,040 --> 00:16:32,880
preliminary collection directory will be

450
00:16:32,880 --> 00:16:34,880
attempted to be compressed in intervals

451
00:16:34,880 --> 00:16:36,560
of 30 minutes

452
00:16:36,560 --> 00:16:38,959
and this will be done with an instance

453
00:16:38,959 --> 00:16:40,959
of winrar that

454
00:16:40,959 --> 00:16:43,440
ramsay stores contain but also a

455
00:16:43,440 --> 00:16:45,120
hardcore password will be leveraged for

456
00:16:45,120 --> 00:16:46,560
compression

457
00:16:46,560 --> 00:16:47,920
and these are some of the passwords that

458
00:16:47,920 --> 00:16:49,759
we were able to find and as you can see

459
00:16:49,759 --> 00:16:50,320
they follow

460
00:16:50,320 --> 00:16:53,440
some common pattern

461
00:16:53,440 --> 00:16:55,680
and what will happen is that once the

462
00:16:55,680 --> 00:16:57,519
primary collection directory gets

463
00:16:57,519 --> 00:16:58,560
compressed

464
00:16:58,560 --> 00:17:00,480
ramsey will save an instance of it in

465
00:17:00,480 --> 00:17:01,600
memory

466
00:17:01,600 --> 00:17:04,640
and when the when this distance is safe

467
00:17:04,640 --> 00:17:05,439
in memory

468
00:17:05,439 --> 00:17:08,480
the disk image will be removed

469
00:17:08,480 --> 00:17:10,880
and then uh what will happen with this

470
00:17:10,880 --> 00:17:11,520
uh

471
00:17:11,520 --> 00:17:14,079
memory instance is that ramsey will try

472
00:17:14,079 --> 00:17:16,000
to transform it in order to

473
00:17:16,000 --> 00:17:18,880
create a what we call ramsey containers

474
00:17:18,880 --> 00:17:20,480
so the structure of ramsey continues is

475
00:17:20,480 --> 00:17:21,599
the following so we have

476
00:17:21,599 --> 00:17:24,400
a ramsey magic as we can see and then we

477
00:17:24,400 --> 00:17:26,240
have a victim's machine hardware profile

478
00:17:26,240 --> 00:17:27,199
guid

479
00:17:27,199 --> 00:17:28,880
and then we have the compressed archive

480
00:17:28,880 --> 00:17:30,640
itself however an

481
00:17:30,640 --> 00:17:35,679
xor layer will be applied to it

482
00:17:36,000 --> 00:17:38,880
so these ramsey containers is what

483
00:17:38,880 --> 00:17:40,799
ramsay utilizes

484
00:17:40,799 --> 00:17:43,120
to coverly store all throughout the file

485
00:17:43,120 --> 00:17:44,960
system

486
00:17:44,960 --> 00:17:48,320
and ramsey will do this uh with the use

487
00:17:48,320 --> 00:17:49,600
of hooks

488
00:17:49,600 --> 00:17:52,400
in two apis of kernel 32 which are right

489
00:17:52,400 --> 00:17:52,960
file

490
00:17:52,960 --> 00:17:56,160
and a close handle so

491
00:17:56,160 --> 00:17:57,440
what will happen is that when ramsay

492
00:17:57,440 --> 00:17:59,760
gets injected into a foreign process

493
00:17:59,760 --> 00:18:02,320
the comp their auxiliary or preliminary

494
00:18:02,320 --> 00:18:03,840
collection directory will be attempted

495
00:18:03,840 --> 00:18:05,919
to be compressed and a ramsey container

496
00:18:05,919 --> 00:18:09,679
will be generated uh at that point

497
00:18:09,679 --> 00:18:12,320
uh a hook in right file will be

498
00:18:12,320 --> 00:18:13,600
installed

499
00:18:13,600 --> 00:18:15,679
and this hook what it will do is that it

500
00:18:15,679 --> 00:18:17,280
will read the file point to

501
00:18:17,280 --> 00:18:20,320
by the the file handle and it will check

502
00:18:20,320 --> 00:18:23,280
whether it contains a compound file

503
00:18:23,280 --> 00:18:24,000
header

504
00:18:24,000 --> 00:18:25,520
and if it's the case it will install

505
00:18:25,520 --> 00:18:28,559
another hook in close handle

506
00:18:28,559 --> 00:18:30,080
and this close handle hook what it will

507
00:18:30,080 --> 00:18:32,080
do is that right before the file gets

508
00:18:32,080 --> 00:18:32,960
closed

509
00:18:32,960 --> 00:18:34,400
it will check it will stick to the end

510
00:18:34,400 --> 00:18:36,480
of the file and it will check whether a

511
00:18:36,480 --> 00:18:37,919
ramsey container was actually

512
00:18:37,919 --> 00:18:40,640
generated and if it was it will append

513
00:18:40,640 --> 00:18:42,559
this ramsey container at the end of the

514
00:18:42,559 --> 00:18:43,760
subject file

515
00:18:43,760 --> 00:18:46,960
and depending on the extension of

516
00:18:46,960 --> 00:18:49,600
the subject file either if it's a doc

517
00:18:49,600 --> 00:18:50,080
file

518
00:18:50,080 --> 00:18:52,880
a doc file fura will be at a appended at

519
00:18:52,880 --> 00:18:54,160
the end

520
00:18:54,160 --> 00:18:56,880
otherwise just a sled of nut bytes and

521
00:18:56,880 --> 00:18:58,559
this is interesting because it denotes

522
00:18:58,559 --> 00:18:59,200
that

523
00:18:59,200 --> 00:19:01,039
thread actors actually took

524
00:19:01,039 --> 00:19:02,960
consideration of implementing

525
00:19:02,960 --> 00:19:06,320
anti-forcing anti-forensic capabilities

526
00:19:06,320 --> 00:19:08,480
as for example this one which its main

527
00:19:08,480 --> 00:19:10,000
objective is to hide

528
00:19:10,000 --> 00:19:13,200
from the naked eye and the ramsey

529
00:19:13,200 --> 00:19:14,480
containers appended

530
00:19:14,480 --> 00:19:19,520
to subject a microsoft compound files

531
00:19:19,760 --> 00:19:22,080
so just as a brief summary of what we

532
00:19:22,080 --> 00:19:23,039
just cover

533
00:19:23,039 --> 00:19:24,559
so we have the collector that scans

534
00:19:24,559 --> 00:19:26,400
files over the system drive

535
00:19:26,400 --> 00:19:29,679
a removable media and network drives and

536
00:19:29,679 --> 00:19:31,760
all of the files found will be stored in

537
00:19:31,760 --> 00:19:33,919
a preliminary collection directory

538
00:19:33,919 --> 00:19:35,760
and then the compressor will be deployed

539
00:19:35,760 --> 00:19:37,360
and it will compress this

540
00:19:37,360 --> 00:19:39,760
preliminary collection directory to

541
00:19:39,760 --> 00:19:40,400
generate

542
00:19:40,400 --> 00:19:42,000
ramsey containers and these ramsey

543
00:19:42,000 --> 00:19:44,000
containers will be the artifacts

544
00:19:44,000 --> 00:19:46,000
that will be appended at the end of

545
00:19:46,000 --> 00:19:48,080
microsoft compile files

546
00:19:48,080 --> 00:19:51,440
throughout the file system

547
00:19:51,440 --> 00:19:53,679
so now we're going to talk about command

548
00:19:53,679 --> 00:19:54,880
execution and

549
00:19:54,880 --> 00:19:57,280
ramsey does not support a network-based

550
00:19:57,280 --> 00:19:58,559
communication protocol

551
00:19:58,559 --> 00:20:00,880
however it does commands can be supplied

552
00:20:00,880 --> 00:20:03,600
to ramsey via a file

553
00:20:03,600 --> 00:20:06,240
based communication protocol and this

554
00:20:06,240 --> 00:20:07,679
file communication protocols

555
00:20:07,679 --> 00:20:09,120
follows the same decentralized

556
00:20:09,120 --> 00:20:11,679
philosophy as a cover storage

557
00:20:11,679 --> 00:20:13,280
in the sense that what will happen is

558
00:20:13,280 --> 00:20:15,120
that a scanning

559
00:20:15,120 --> 00:20:17,200
so ramsey will try to scan network

560
00:20:17,200 --> 00:20:19,440
shares and removable drives to find

561
00:20:19,440 --> 00:20:21,280
candidate files for control file

562
00:20:21,280 --> 00:20:23,039
documents and this control file

563
00:20:23,039 --> 00:20:23,919
documents

564
00:20:23,919 --> 00:20:26,640
can be either word documents pdfs or zip

565
00:20:26,640 --> 00:20:28,960
files

566
00:20:29,120 --> 00:20:31,760
so what russia will do for each of the

567
00:20:31,760 --> 00:20:32,960
for each candidate

568
00:20:32,960 --> 00:20:35,039
control document it will try to search

569
00:20:35,039 --> 00:20:36,720
for two strings

570
00:20:36,720 --> 00:20:39,760
which denote two geo ids and it will try

571
00:20:39,760 --> 00:20:41,520
to search either of them

572
00:20:41,520 --> 00:20:43,600
and one of them is dynamically generated

573
00:20:43,600 --> 00:20:45,919
and denote the specific

574
00:20:45,919 --> 00:20:48,880
geo id of the hardware profile of a

575
00:20:48,880 --> 00:20:49,919
victim

576
00:20:49,919 --> 00:20:53,360
however there is another one that

577
00:20:53,360 --> 00:20:55,760
is hard coded and there are two

578
00:20:55,760 --> 00:20:58,000
potential explanations of why

579
00:20:58,000 --> 00:21:01,120
this uid appears

580
00:21:01,120 --> 00:21:04,559
so one of them is that this guid

581
00:21:04,559 --> 00:21:08,000
is nothing but a residual debugging

582
00:21:08,000 --> 00:21:10,799
artifact that ramsey developers just

583
00:21:10,799 --> 00:21:12,559
neglect or simply forgot

584
00:21:12,559 --> 00:21:16,159
to remove in latest ramsey versions or

585
00:21:16,159 --> 00:21:17,679
on the other hand a more interesting

586
00:21:17,679 --> 00:21:18,799
hypothesis

587
00:21:18,799 --> 00:21:22,000
is that this guid is actually the way

588
00:21:22,000 --> 00:21:23,840
that developers implemented

589
00:21:23,840 --> 00:21:26,880
the support of having a control file

590
00:21:26,880 --> 00:21:29,360
documents which are victim agnostic

591
00:21:29,360 --> 00:21:32,320
so each control file document will be

592
00:21:32,320 --> 00:21:33,120
targeted

593
00:21:33,120 --> 00:21:35,600
to be processed by arabic agent running

594
00:21:35,600 --> 00:21:37,919
on a specific vita machine

595
00:21:37,919 --> 00:21:42,400
and that will be denoted by the guid

596
00:21:42,400 --> 00:21:45,760
so but uh so meaning that if

597
00:21:45,760 --> 00:21:48,880
this if this global guid is found it

598
00:21:48,880 --> 00:21:49,919
means that the

599
00:21:49,919 --> 00:21:51,520
subject control file document will be

600
00:21:51,520 --> 00:21:54,000
executed by any victim

601
00:21:54,000 --> 00:21:56,880
but anyways if any of these two

602
00:21:56,880 --> 00:21:57,600
instances

603
00:21:57,600 --> 00:22:01,918
of guides is far within the subject

604
00:22:02,000 --> 00:22:05,280
control document then ramsey will try to

605
00:22:05,280 --> 00:22:09,039
scan for a command signature

606
00:22:09,039 --> 00:22:11,440
and there are three command signatures

607
00:22:11,440 --> 00:22:12,720
which are the ones that you can see

608
00:22:12,720 --> 00:22:14,640
which denote file execution dll

609
00:22:14,640 --> 00:22:16,880
load and batch execution commands so

610
00:22:16,880 --> 00:22:18,720
what will happen is that

611
00:22:18,720 --> 00:22:21,600
let's say that a control document

612
00:22:21,600 --> 00:22:22,320
contains

613
00:22:22,320 --> 00:22:24,960
a file execution signature so what will

614
00:22:24,960 --> 00:22:27,360
happen is that right after the signature

615
00:22:27,360 --> 00:22:29,760
there will be an artifact which which is

616
00:22:29,760 --> 00:22:31,440
related to the command type

617
00:22:31,440 --> 00:22:34,480
and in in regards to file execution

618
00:22:34,480 --> 00:22:37,520
uh that artifact will be a p executable

619
00:22:37,520 --> 00:22:39,120
and then ramsey what we'll do is that it

620
00:22:39,120 --> 00:22:41,440
will actually execute this p executable

621
00:22:41,440 --> 00:22:44,240
and something similar happens for the

622
00:22:44,240 --> 00:22:45,280
other two commands

623
00:22:45,280 --> 00:22:46,799
however just a different artifact will

624
00:22:46,799 --> 00:22:49,760
be leveraged instead

625
00:22:50,000 --> 00:22:53,039
so right after ramsay process

626
00:22:53,039 --> 00:22:55,760
each command document is controlled

627
00:22:55,760 --> 00:22:56,480
document

628
00:22:56,480 --> 00:22:58,640
what will happen is that a specific

629
00:22:58,640 --> 00:23:01,679
artifacts related to the control

630
00:23:01,679 --> 00:23:03,200
the control file document will be

631
00:23:03,200 --> 00:23:06,400
removed and these artifacts are

632
00:23:06,400 --> 00:23:09,919
the the geo id the signature

633
00:23:09,919 --> 00:23:11,679
and the artifact dependent of the

634
00:23:11,679 --> 00:23:13,679
command type

635
00:23:13,679 --> 00:23:15,360
and this is done in order to remove

636
00:23:15,360 --> 00:23:17,039
fingerprint of

637
00:23:17,039 --> 00:23:20,000
a control documents but also what runs

638
00:23:20,000 --> 00:23:21,280
it will do is that once

639
00:23:21,280 --> 00:23:23,280
this control file document is restored

640
00:23:23,280 --> 00:23:24,720
to its original form

641
00:23:24,720 --> 00:23:26,400
it will actually attempt to append a

642
00:23:26,400 --> 00:23:28,240
ramsey container within the context of

643
00:23:28,240 --> 00:23:28,960
it

644
00:23:28,960 --> 00:23:31,120
and this is interesting because it means

645
00:23:31,120 --> 00:23:32,720
that ramsay

646
00:23:32,720 --> 00:23:36,159
does not waste a chance to a ramsey to

647
00:23:36,159 --> 00:23:38,480
impr to append a ramsey container

648
00:23:38,480 --> 00:23:42,080
uh also a while is implementing

649
00:23:42,080 --> 00:23:47,200
uh different types of functionalities

650
00:23:47,200 --> 00:23:48,159
now we're going to talk about the

651
00:23:48,159 --> 00:23:50,159
spreading and spreading is basic

652
00:23:50,159 --> 00:23:51,919
basically consists of a prepender file

653
00:23:51,919 --> 00:23:52,559
effector

654
00:23:52,559 --> 00:23:54,960
infected and there is a correlation

655
00:23:54,960 --> 00:23:55,760
between

656
00:23:55,760 --> 00:23:58,480
a command execution and spreading

657
00:23:58,480 --> 00:24:00,159
capabilities in ramsing

658
00:24:00,159 --> 00:24:03,200
meaning that there are the same drives

659
00:24:03,200 --> 00:24:06,000
are attempted to be scanned in both and

660
00:24:06,000 --> 00:24:06,400
this

661
00:24:06,400 --> 00:24:09,279
hints how ramsey may be actually used

662
00:24:09,279 --> 00:24:11,600
for lateral movement

663
00:24:11,600 --> 00:24:13,840
we also found an internal blue scanner

664
00:24:13,840 --> 00:24:16,720
implemented in ramsey version 2.8

665
00:24:16,720 --> 00:24:19,120
which tries to find vulnerable hosts to

666
00:24:19,120 --> 00:24:21,039
to to this vulnerability

667
00:24:21,039 --> 00:24:24,000
and all of these hosts will be recorded

668
00:24:24,000 --> 00:24:25,760
and saved to a log file

669
00:24:25,760 --> 00:24:28,000
that at some point might be retrieved by

670
00:24:28,000 --> 00:24:29,200
operators

671
00:24:29,200 --> 00:24:31,039
and will be leveraged for lateral

672
00:24:31,039 --> 00:24:33,120
movement purpose probably be a different

673
00:24:33,120 --> 00:24:35,360
channel

674
00:24:35,360 --> 00:24:37,360
but in regards to the spreading via file

675
00:24:37,360 --> 00:24:38,880
infection this is how

676
00:24:38,880 --> 00:24:41,200
it looks like so we have a file that was

677
00:24:41,200 --> 00:24:42,159
to be infected

678
00:24:42,159 --> 00:24:43,760
and a series of artifacts will be

679
00:24:43,760 --> 00:24:45,360
prepended to this file

680
00:24:45,360 --> 00:24:47,200
and these artifacts are an initial

681
00:24:47,200 --> 00:24:49,440
installer a subject file deployer and

682
00:24:49,440 --> 00:24:51,200
our installer and an rh agent

683
00:24:51,200 --> 00:24:52,559
so the way this works is that the

684
00:24:52,559 --> 00:24:54,320
initial installer will deploy both

685
00:24:54,320 --> 00:24:56,159
the subject file deployer and the macro

686
00:24:56,159 --> 00:24:58,080
installer and the subject file deployer

687
00:24:58,080 --> 00:24:59,279
will be in charge to execute the

688
00:24:59,279 --> 00:25:00,320
original file

689
00:25:00,320 --> 00:25:02,000
while the malware installer will execute

690
00:25:02,000 --> 00:25:04,799
the ramsey agent

691
00:25:04,799 --> 00:25:06,480
there is also something important she

692
00:25:06,480 --> 00:25:08,159
mentioned which is that

693
00:25:08,159 --> 00:25:10,880
there is a series of tokens that ramsey

694
00:25:10,880 --> 00:25:13,120
installer and spreader utilize

695
00:25:13,120 --> 00:25:14,960
in order to locate the different

696
00:25:14,960 --> 00:25:16,640
artifacts that

697
00:25:16,640 --> 00:25:18,799
they want to leverage in regards

698
00:25:18,799 --> 00:25:21,360
specifically for the spreading

699
00:25:21,360 --> 00:25:23,440
these artifacts are actually used for

700
00:25:23,440 --> 00:25:25,440
the file infection process

701
00:25:25,440 --> 00:25:28,240
so these tokens are actually used as a

702
00:25:28,240 --> 00:25:28,880
way of

703
00:25:28,880 --> 00:25:30,400
implementing separators between

704
00:25:30,400 --> 00:25:32,880
artifacts so what will happen to what

705
00:25:32,880 --> 00:25:33,840
will ramsay do

706
00:25:33,840 --> 00:25:36,720
is to when it wants to locate a specific

707
00:25:36,720 --> 00:25:38,000
artifact

708
00:25:38,000 --> 00:25:41,039
it will try to search the token in

709
00:25:41,039 --> 00:25:43,919
relation to that artifact and please

710
00:25:43,919 --> 00:25:45,600
keep in mind this is live because

711
00:25:45,600 --> 00:25:47,200
it will become relevant in further

712
00:25:47,200 --> 00:25:50,000
slides also something to keep in mind

713
00:25:50,000 --> 00:25:52,720
for further slides is that the main file

714
00:25:52,720 --> 00:25:55,520
infection process

715
00:25:55,520 --> 00:25:59,760
gets deployed once every five days

716
00:25:59,760 --> 00:26:01,200
so now we're going to talk about the

717
00:26:01,200 --> 00:26:02,960
overlaps that we found in regards to

718
00:26:02,960 --> 00:26:05,039
ramsey and our hotel

719
00:26:05,039 --> 00:26:07,919
and we found various overlaps between

720
00:26:07,919 --> 00:26:10,080
ramsey and a specific malware called

721
00:26:10,080 --> 00:26:14,000
retro and retro is a is a back door that

722
00:26:14,000 --> 00:26:15,919
has been attributed to be part of dark

723
00:26:15,919 --> 00:26:18,480
hotels toolset

724
00:26:18,480 --> 00:26:20,799
and dark hotel itself is an allegedly

725
00:26:20,799 --> 00:26:22,480
korean speaking base

726
00:26:22,480 --> 00:26:24,799
apt which is which has been active since

727
00:26:24,799 --> 00:26:27,918
at least 2007.

728
00:26:28,000 --> 00:26:29,919
and in regards to the overlaps that we

729
00:26:29,919 --> 00:26:31,440
were able to find

730
00:26:31,440 --> 00:26:33,200
we classified them in through into three

731
00:26:33,200 --> 00:26:34,960
different types

732
00:26:34,960 --> 00:26:37,039
which are open source tools and ttps

733
00:26:37,039 --> 00:26:38,720
overlaps

734
00:26:38,720 --> 00:26:41,440
artifact and code reuse overlaps and

735
00:26:41,440 --> 00:26:43,279
contextual similarities courtesy

736
00:26:43,279 --> 00:26:47,600
of an operational security failure

737
00:26:47,600 --> 00:26:50,320
so in regards to ttps we found an

738
00:26:50,320 --> 00:26:52,720
overlap in phantom dll hijacking

739
00:26:52,720 --> 00:26:54,640
but not only in regards to the specific

740
00:26:54,640 --> 00:26:55,760
technique but also

741
00:26:55,760 --> 00:26:58,320
in regards to the dependencies that were

742
00:26:58,320 --> 00:26:59,279
abused

743
00:26:59,279 --> 00:27:02,799
which are msfte.dll and oc.dll between

744
00:27:02,799 --> 00:27:03,760
others

745
00:27:03,760 --> 00:27:05,760
and in regards to open source tools we

746
00:27:05,760 --> 00:27:07,760
found that ram

747
00:27:07,760 --> 00:27:09,760
retran ramsey were leveraging the same

748
00:27:09,760 --> 00:27:11,039
open source tools

749
00:27:11,039 --> 00:27:13,600
in order to perform some of their

750
00:27:13,600 --> 00:27:14,640
capabilities

751
00:27:14,640 --> 00:27:17,120
such as ucm for privileged escalation

752
00:27:17,120 --> 00:27:19,200
and improved reflective dll injection

753
00:27:19,200 --> 00:27:22,480
for deploying some of their components

754
00:27:22,480 --> 00:27:24,000
remember the screenshot that i

755
00:27:24,000 --> 00:27:25,520
previously mentioned in

756
00:27:25,520 --> 00:27:27,279
of the spreader and the rams installer

757
00:27:27,279 --> 00:27:29,679
that of the tokens that they utilize in

758
00:27:29,679 --> 00:27:30,640
order to locate

759
00:27:30,640 --> 00:27:32,480
specific artifacts within the context of

760
00:27:32,480 --> 00:27:35,200
themselves so we found that these

761
00:27:35,200 --> 00:27:37,279
specific tokens were actually being

762
00:27:37,279 --> 00:27:39,520
reused in retro as well

763
00:27:39,520 --> 00:27:42,720
and we apparently these tokens are

764
00:27:42,720 --> 00:27:45,200
using a different context in retro and

765
00:27:45,200 --> 00:27:46,880
they seem to be completely

766
00:27:46,880 --> 00:27:49,360
exclusive to ramsey and retro and we

767
00:27:49,360 --> 00:27:51,679
weren't able to find them in any in any

768
00:27:51,679 --> 00:27:54,640
other malware family

769
00:27:55,120 --> 00:27:57,840
we found we had several code reuse

770
00:27:57,840 --> 00:27:58,399
instances

771
00:27:58,399 --> 00:27:59,840
however unfortunately i'm not going to

772
00:27:59,840 --> 00:28:01,600
be able to show all of them however i'm

773
00:28:01,600 --> 00:28:02,480
going to explain this

774
00:28:02,480 --> 00:28:04,640
specific instance which i believe is the

775
00:28:04,640 --> 00:28:07,039
most insightful one in my opinion

776
00:28:07,039 --> 00:28:08,720
so ramsay one of the things he will do

777
00:28:08,720 --> 00:28:10,320
is that at some point he will try to

778
00:28:10,320 --> 00:28:12,320
profile the specific victim

779
00:28:12,320 --> 00:28:14,480
and it will do this generating

780
00:28:14,480 --> 00:28:16,000
generating a guid

781
00:28:16,000 --> 00:28:18,720
using the get current hardware profile

782
00:28:18,720 --> 00:28:19,760
api

783
00:28:19,760 --> 00:28:22,000
the problem with this api is the guide

784
00:28:22,000 --> 00:28:23,120
that it returns is

785
00:28:23,120 --> 00:28:26,159
specific for the hub for the hardware

786
00:28:26,159 --> 00:28:28,000
for the machine's hardware but not as

787
00:28:28,000 --> 00:28:29,600
specific for the for machine

788
00:28:29,600 --> 00:28:33,360
or user instance therefore

789
00:28:33,360 --> 00:28:35,600
ramsey had to do something to cope with

790
00:28:35,600 --> 00:28:36,880
with this issue

791
00:28:36,880 --> 00:28:39,520
and the way he coped with this issue is

792
00:28:39,520 --> 00:28:40,320
by

793
00:28:40,320 --> 00:28:43,279
leveraging a specific encoding algorithm

794
00:28:43,279 --> 00:28:45,279
in order in order to make this uid

795
00:28:45,279 --> 00:28:48,640
less prone to generate duplicates for

796
00:28:48,640 --> 00:28:51,760
different victims and this

797
00:28:51,760 --> 00:28:54,000
specific overlap does not only imply

798
00:28:54,000 --> 00:28:55,120
that ribs

799
00:28:55,120 --> 00:28:58,240
and that ramsey and retro use a specific

800
00:28:58,240 --> 00:28:59,840
algorithm

801
00:28:59,840 --> 00:29:02,240
which is custom which is interesting but

802
00:29:02,240 --> 00:29:03,919
also

803
00:29:03,919 --> 00:29:05,679
having a bit more context of this

804
00:29:05,679 --> 00:29:08,720
overlap it implies that

805
00:29:08,720 --> 00:29:10,799
retro and ramsey use the same scheme in

806
00:29:10,799 --> 00:29:11,760
order to

807
00:29:11,760 --> 00:29:14,799
profile victims which in my opinion is a

808
00:29:14,799 --> 00:29:18,480
much more deeper connection

809
00:29:19,120 --> 00:29:20,559
so now we're going to talk about the

810
00:29:20,559 --> 00:29:22,080
operational security failure and let me

811
00:29:22,080 --> 00:29:23,600
tell you a short story

812
00:29:23,600 --> 00:29:25,840
so initially as we mentioned the only

813
00:29:25,840 --> 00:29:27,520
instance of ramsey that we initially had

814
00:29:27,520 --> 00:29:29,600
was the ramsey decoy 7-ship installer

815
00:29:29,600 --> 00:29:30,720
which was in fact

816
00:29:30,720 --> 00:29:34,159
runs in version 2 point a

817
00:29:34,159 --> 00:29:36,320
and in order to find more instances we

818
00:29:36,320 --> 00:29:38,640
we attempted to scan our telemetry

819
00:29:38,640 --> 00:29:41,120
and we found a an instance of ramsey

820
00:29:41,120 --> 00:29:42,399
version 2 point b

821
00:29:42,399 --> 00:29:43,840
which was dropped from a malicious

822
00:29:43,840 --> 00:29:45,600
document

823
00:29:45,600 --> 00:29:47,760
and then after this we wanted to find

824
00:29:47,760 --> 00:29:50,080
more instances of ramsey so we run a vt

825
00:29:50,080 --> 00:29:51,679
retrohunt in order to find more

826
00:29:51,679 --> 00:29:54,320
instances of the installer or agents

827
00:29:54,320 --> 00:29:57,760
but unfortunately we were unsuccessful

828
00:29:57,760 --> 00:30:00,159
however we run another series of

829
00:30:00,159 --> 00:30:01,279
retrohands

830
00:30:01,279 --> 00:30:04,720
and in order to find the

831
00:30:04,720 --> 00:30:06,960
malicious documents that leverage these

832
00:30:06,960 --> 00:30:08,799
ramsey artifacts and in this case we

833
00:30:08,799 --> 00:30:10,880
were successful

834
00:30:10,880 --> 00:30:14,960
in total we found 23 related documents

835
00:30:14,960 --> 00:30:18,559
and these documents weren't found

836
00:30:18,559 --> 00:30:21,679
initially only one in one go

837
00:30:21,679 --> 00:30:24,559
in fact these documents uh were being

838
00:30:24,559 --> 00:30:25,440
uploaded

839
00:30:25,440 --> 00:30:27,679
as we were conducting the investigation

840
00:30:27,679 --> 00:30:29,279
which in fact made the investigation

841
00:30:29,279 --> 00:30:30,159
itself

842
00:30:30,159 --> 00:30:34,159
very engaging but some of these

843
00:30:34,159 --> 00:30:35,919
documents had a very interesting

844
00:30:35,919 --> 00:30:38,080
characteristics as these two documents

845
00:30:38,080 --> 00:30:38,799
that i'm

846
00:30:38,799 --> 00:30:41,760
that i'm that we can see which uh their

847
00:30:41,760 --> 00:30:42,799
file names

848
00:30:42,799 --> 00:30:47,039
had uh suggested that they were testing

849
00:30:47,039 --> 00:30:49,520
uh documents and not actually been used

850
00:30:49,520 --> 00:30:52,000
in the wall

851
00:30:52,799 --> 00:30:55,279
virustotal has a comment section and

852
00:30:55,279 --> 00:30:56,960
this comment section is usually

853
00:30:56,960 --> 00:30:59,519
used by vendors or researchers that want

854
00:30:59,519 --> 00:31:02,240
to give additional context of a specific

855
00:31:02,240 --> 00:31:05,919
vt analysis and we spotted that in the

856
00:31:05,919 --> 00:31:08,640
initial set of documents that we found

857
00:31:08,640 --> 00:31:11,200
vmray commented for every single one of

858
00:31:11,200 --> 00:31:13,519
those files

859
00:31:13,519 --> 00:31:15,200
so what we end up finding out is that

860
00:31:15,200 --> 00:31:16,799
there were a vm

861
00:31:16,799 --> 00:31:19,919
vm reanalysis for one of the for each

862
00:31:19,919 --> 00:31:22,159
and every one of the documents that we

863
00:31:22,159 --> 00:31:24,240
found in vt

864
00:31:24,240 --> 00:31:27,840
and after some brainstorming and further

865
00:31:27,840 --> 00:31:28,640
research

866
00:31:28,640 --> 00:31:31,519
what we end up understanding is that the

867
00:31:31,519 --> 00:31:32,080
reason

868
00:31:32,080 --> 00:31:35,919
why these documents ended up in vt

869
00:31:35,919 --> 00:31:38,159
is because these documents were actually

870
00:31:38,159 --> 00:31:39,679
being uploaded

871
00:31:39,679 --> 00:31:42,880
to some books to sandbox providers

872
00:31:42,880 --> 00:31:45,840
from community accounts which what end

873
00:31:45,840 --> 00:31:47,120
up happening is that these sandbox

874
00:31:47,120 --> 00:31:48,159
providers

875
00:31:48,159 --> 00:31:51,440
pivot the files to vt

876
00:31:51,440 --> 00:31:54,559
and these sambox providers uh are

877
00:31:54,559 --> 00:31:56,880
there it wasn't just one single instance

878
00:31:56,880 --> 00:31:58,240
there were actually

879
00:31:58,240 --> 00:32:01,039
a few which were any run falcon and

880
00:32:01,039 --> 00:32:02,640
vmray

881
00:32:02,640 --> 00:32:04,399
and in regards to the documents that we

882
00:32:04,399 --> 00:32:06,159
were able to found

883
00:32:06,159 --> 00:32:08,399
to find uh some of them were legit so

884
00:32:08,399 --> 00:32:09,840
that some of them were actually

885
00:32:09,840 --> 00:32:11,760
working ramsey instances that's how we

886
00:32:11,760 --> 00:32:12,960
were able to find

887
00:32:12,960 --> 00:32:16,320
ramsey version one however

888
00:32:16,320 --> 00:32:19,200
there were other instances that they

889
00:32:19,200 --> 00:32:19,919
were

890
00:32:19,919 --> 00:32:22,880
actually testing documents for example

891
00:32:22,880 --> 00:32:23,200
this

892
00:32:23,200 --> 00:32:25,279
specific instance that we found several

893
00:32:25,279 --> 00:32:26,240
times

894
00:32:26,240 --> 00:32:29,039
is has the same delivery and exploit

895
00:32:29,039 --> 00:32:29,760
used by

896
00:32:29,760 --> 00:32:31,919
ramsey version two point b but instead

897
00:32:31,919 --> 00:32:33,279
of leveraging ramsay

898
00:32:33,279 --> 00:32:36,399
he leverages an instance of cult.exe

899
00:32:36,399 --> 00:32:40,080
and all of these all of this

900
00:32:40,080 --> 00:32:43,919
activity is a pretty decent um

901
00:32:43,919 --> 00:32:47,200
operational security failure as a threat

902
00:32:47,200 --> 00:32:49,120
actors or whoever was in charge of

903
00:32:49,120 --> 00:32:52,159
evaluating or trialing these documents

904
00:32:52,159 --> 00:32:55,320
were exposing these documents

905
00:32:55,320 --> 00:32:57,120
unintentionally

906
00:32:57,120 --> 00:33:00,640
uh and these documents at some point i

907
00:33:00,640 --> 00:33:02,480
assume that they were being integrated

908
00:33:02,480 --> 00:33:05,519
into their ongoing operations but uh

909
00:33:05,519 --> 00:33:07,760
due to the fact that they were literally

910
00:33:07,760 --> 00:33:09,279
giving away these documents

911
00:33:09,279 --> 00:33:11,279
they expose these documents before they

912
00:33:11,279 --> 00:33:14,240
have the chance to do that

913
00:33:14,240 --> 00:33:17,760
but not only that after after

914
00:33:17,760 --> 00:33:20,320
analyzing these documents a bit further

915
00:33:20,320 --> 00:33:20,960
we

916
00:33:20,960 --> 00:33:23,120
find out that some of the documents have

917
00:33:23,120 --> 00:33:24,320
korean

918
00:33:24,320 --> 00:33:27,519
base strings within their metadata and

919
00:33:27,519 --> 00:33:29,279
this allies from what we know

920
00:33:29,279 --> 00:33:31,919
of that hotel which is allegedly a

921
00:33:31,919 --> 00:33:34,799
korean-speaking apt

922
00:33:34,799 --> 00:33:39,200
and this insight basically

923
00:33:39,200 --> 00:33:42,559
help us and reinforce the technical

924
00:33:42,559 --> 00:33:44,240
overlaps that we previously discussed

925
00:33:44,240 --> 00:33:48,320
with this additional contextual overlap

926
00:33:48,320 --> 00:33:49,360
so now we're going to talk about

927
00:33:49,360 --> 00:33:51,760
ramsay's operation so

928
00:33:51,760 --> 00:33:54,320
after we analyzed ramsey we concluded

929
00:33:54,320 --> 00:33:55,200
that

930
00:33:55,200 --> 00:34:00,159
the operators must have must be

931
00:34:00,399 --> 00:34:03,760
within the context of asm networks and

932
00:34:03,760 --> 00:34:06,320
what will happen is that ramsey will

933
00:34:06,320 --> 00:34:07,679
intermittently hope

934
00:34:07,679 --> 00:34:11,839
over their gap via removable drives

935
00:34:11,839 --> 00:34:14,560
so unfortunately we had a restricted

936
00:34:14,560 --> 00:34:17,199
visibility of additional components

937
00:34:17,199 --> 00:34:19,760
meaning that although we had a various

938
00:34:19,760 --> 00:34:21,679
instances of ramsay

939
00:34:21,679 --> 00:34:25,359
and nothing really uh points you

940
00:34:25,359 --> 00:34:27,760
to the fact that ramsay will be deployed

941
00:34:27,760 --> 00:34:28,800
just by itself

942
00:34:28,800 --> 00:34:30,639
so possibly there is an additional

943
00:34:30,639 --> 00:34:32,639
component that is in charge

944
00:34:32,639 --> 00:34:35,119
of different roles within a ramsey

945
00:34:35,119 --> 00:34:35,918
operation

946
00:34:35,918 --> 00:34:39,199
however we were in uh we weren't able to

947
00:34:39,199 --> 00:34:39,918
find

948
00:34:39,918 --> 00:34:42,639
or have any other leads of what which

949
00:34:42,639 --> 00:34:44,079
component

950
00:34:44,079 --> 00:34:48,000
this was however after we published our

951
00:34:48,000 --> 00:34:51,599
blog post of ramsey tencent reported

952
00:34:51,599 --> 00:34:54,320
a follow-up in which they did a great

953
00:34:54,320 --> 00:34:54,719
job

954
00:34:54,719 --> 00:34:58,000
into correlating and explaining how

955
00:34:58,000 --> 00:35:00,160
rich ram ramsay in fact they could be

956
00:35:00,160 --> 00:35:02,480
deployed together and this is very

957
00:35:02,480 --> 00:35:03,680
interesting because this

958
00:35:03,680 --> 00:35:06,160
this implies that there is a possibility

959
00:35:06,160 --> 00:35:06,720
that

960
00:35:06,720 --> 00:35:10,480
the very the very component that we are

961
00:35:10,480 --> 00:35:11,680
missing could be

962
00:35:11,680 --> 00:35:14,079
retro and if you are interested to know

963
00:35:14,079 --> 00:35:15,119
more about this

964
00:35:15,119 --> 00:35:16,800
i would highly suggest to check the

965
00:35:16,800 --> 00:35:18,880
tensors report because i think they did

966
00:35:18,880 --> 00:35:19,680
a great job

967
00:35:19,680 --> 00:35:22,960
in it also another thing is that

968
00:35:22,960 --> 00:35:25,520
based on the ordinary hypothesis that

969
00:35:25,520 --> 00:35:26,960
ramsay operates within

970
00:35:26,960 --> 00:35:29,200
ages and networks there must have been

971
00:35:29,200 --> 00:35:30,079
an intrusion

972
00:35:30,079 --> 00:35:31,920
in an initial intrusion vector to these

973
00:35:31,920 --> 00:35:33,119
agency networks

974
00:35:33,119 --> 00:35:36,160
which is also unknown

975
00:35:36,160 --> 00:35:38,960
although we had some gaps and missing

976
00:35:38,960 --> 00:35:39,599
links

977
00:35:39,599 --> 00:35:41,920
we were able to came up with this

978
00:35:41,920 --> 00:35:43,280
diagram

979
00:35:43,280 --> 00:35:46,400
which is a pretty educated guess of how

980
00:35:46,400 --> 00:35:48,960
ramsey could have been operated so there

981
00:35:48,960 --> 00:35:49,440
will be

982
00:35:49,440 --> 00:35:51,280
initially an intrusion to a machine

983
00:35:51,280 --> 00:35:53,119
within an open network

984
00:35:53,119 --> 00:35:54,720
and from all the components that could

985
00:35:54,720 --> 00:35:56,880
be leveraged to this asm network

986
00:35:56,880 --> 00:36:00,880
one of them will be run c version 2.8

987
00:36:00,880 --> 00:36:03,440
after ramsey vessel 2.8 gets delivered

988
00:36:03,440 --> 00:36:04,160
in this

989
00:36:04,160 --> 00:36:06,960
machine if we remember one of the main

990
00:36:06,960 --> 00:36:09,200
capabilities of round c version 2.8 was

991
00:36:09,200 --> 00:36:10,560
the spreading

992
00:36:10,560 --> 00:36:12,880
and the spreading the the way is

993
00:36:12,880 --> 00:36:13,839
actually implemented

994
00:36:13,839 --> 00:36:16,880
is actually it can actually work for two

995
00:36:16,880 --> 00:36:17,280
things

996
00:36:17,280 --> 00:36:20,000
one is to actually propagate through

997
00:36:20,000 --> 00:36:21,599
other ages and networks

998
00:36:21,599 --> 00:36:24,240
but also uh there is also a possibility

999
00:36:24,240 --> 00:36:24,720
that

1000
00:36:24,720 --> 00:36:27,440
this very spreading technique actually

1001
00:36:27,440 --> 00:36:28,400
leads

1002
00:36:28,400 --> 00:36:31,040
operators to land the ramsey agent

1003
00:36:31,040 --> 00:36:32,400
within their gap networks

1004
00:36:32,400 --> 00:36:34,880
so in that sense uh they actually

1005
00:36:34,880 --> 00:36:35,520
killing

1006
00:36:35,520 --> 00:36:38,320
two birds in one go another interesting

1007
00:36:38,320 --> 00:36:38,960
thing

1008
00:36:38,960 --> 00:36:41,520
that ramsey version 2.8 does is that it

1009
00:36:41,520 --> 00:36:44,160
contains a very exhaustive login system

1010
00:36:44,160 --> 00:36:46,320
which it records to a series of log

1011
00:36:46,320 --> 00:36:48,720
files and these log files they may be at

1012
00:36:48,720 --> 00:36:51,040
some point retrieved by operators

1013
00:36:51,040 --> 00:36:54,480
and the main incentive that of these log

1014
00:36:54,480 --> 00:36:56,400
files is that they actually

1015
00:36:56,400 --> 00:36:58,880
record the state of the proliferation of

1016
00:36:58,880 --> 00:37:00,720
ramsay

1017
00:37:00,720 --> 00:37:02,480
furthermore there should there must be

1018
00:37:02,480 --> 00:37:04,480
an additional component which is not

1019
00:37:04,480 --> 00:37:05,200
ramsey

1020
00:37:05,200 --> 00:37:07,280
which does the monitoring of insertion

1021
00:37:07,280 --> 00:37:08,560
and removal or net

1022
00:37:08,560 --> 00:37:11,359
of net shares and a removable removal

1023
00:37:11,359 --> 00:37:13,920
drives of the agency network

1024
00:37:13,920 --> 00:37:16,800
and this is possibly how an additional

1025
00:37:16,800 --> 00:37:17,839
component

1026
00:37:17,839 --> 00:37:20,880
gets into the equation

1027
00:37:21,280 --> 00:37:23,920
and then we have rusty version two point

1028
00:37:23,920 --> 00:37:24,320
b

1029
00:37:24,320 --> 00:37:27,280
um so we mentioned that the spring the

1030
00:37:27,280 --> 00:37:28,640
spring is actually done

1031
00:37:28,640 --> 00:37:31,040
every five days so we believe ramsey

1032
00:37:31,040 --> 00:37:32,000
version two point b

1033
00:37:32,000 --> 00:37:34,720
is how thread actors implemented a more

1034
00:37:34,720 --> 00:37:35,599
direct way of

1035
00:37:35,599 --> 00:37:37,920
leveraging ramsay without actually

1036
00:37:37,920 --> 00:37:39,200
having the constraint

1037
00:37:39,200 --> 00:37:42,560
of these five days so what will happen

1038
00:37:42,560 --> 00:37:43,280
is that

1039
00:37:43,280 --> 00:37:47,200
when a net share or a removable drive

1040
00:37:47,200 --> 00:37:51,280
gets one of these ramsay components

1041
00:37:51,280 --> 00:37:54,640
uh either the ramsey version two a

1042
00:37:54,640 --> 00:37:57,680
point b malicious document or any

1043
00:37:57,680 --> 00:37:59,280
p executable that gets infected by

1044
00:37:59,280 --> 00:38:01,280
ramsey version 2.8

1045
00:38:01,280 --> 00:38:04,079
when these devices get plugged to their

1046
00:38:04,079 --> 00:38:06,640
gap network

1047
00:38:06,640 --> 00:38:08,560
they will be leveraged via user

1048
00:38:08,560 --> 00:38:09,760
execution

1049
00:38:09,760 --> 00:38:12,079
and the ram cag will be deployed when

1050
00:38:12,079 --> 00:38:12,960
this happens

1051
00:38:12,960 --> 00:38:15,119
the rmc agent will do its malicious

1052
00:38:15,119 --> 00:38:16,240
functionality

1053
00:38:16,240 --> 00:38:18,880
as to do the collection and cover

1054
00:38:18,880 --> 00:38:20,079
storage capabilities

1055
00:38:20,079 --> 00:38:23,520
and store and append

1056
00:38:23,520 --> 00:38:25,359
the ramsey containers all throughout the

1057
00:38:25,359 --> 00:38:27,200
file system

1058
00:38:27,200 --> 00:38:29,920
at some point these these ramsey

1059
00:38:29,920 --> 00:38:31,280
containers will want to be

1060
00:38:31,280 --> 00:38:35,520
exfiltrated so what we believe

1061
00:38:35,520 --> 00:38:38,079
it will happen is that again a

1062
00:38:38,079 --> 00:38:39,760
monitoring for

1063
00:38:39,760 --> 00:38:42,000
the insertion of a removable drive of an

1064
00:38:42,000 --> 00:38:43,440
exterior will be done

1065
00:38:43,440 --> 00:38:46,480
and a specific control document will be

1066
00:38:46,480 --> 00:38:50,240
inserted to this device then this device

1067
00:38:50,240 --> 00:38:51,599
when gets plugged

1068
00:38:51,599 --> 00:38:54,160
to their gap network ramsey will have

1069
00:38:54,160 --> 00:38:54,960
means

1070
00:38:54,960 --> 00:38:57,680
in order to detect and process the this

1071
00:38:57,680 --> 00:38:58,400
control

1072
00:38:58,400 --> 00:39:01,920
document and the command of this control

1073
00:39:01,920 --> 00:39:02,560
document

1074
00:39:02,560 --> 00:39:04,640
probably what we'll leverage is as a

1075
00:39:04,640 --> 00:39:05,839
scanning of

1076
00:39:05,839 --> 00:39:08,640
ramsey containers within the file system

1077
00:39:08,640 --> 00:39:11,040
and we'll copy these ramsey containers

1078
00:39:11,040 --> 00:39:14,400
to the subject device and probably even

1079
00:39:14,400 --> 00:39:15,839
compress them

1080
00:39:15,839 --> 00:39:17,359
and then when this device gets plugged

1081
00:39:17,359 --> 00:39:20,000
back to the agency network

1082
00:39:20,000 --> 00:39:21,760
then operators will be able to retrieve

1083
00:39:21,760 --> 00:39:23,839
it and that's how the exfiltration

1084
00:39:23,839 --> 00:39:26,720
basically is done

1085
00:39:27,040 --> 00:39:30,000
so conclusion ramsey has gone through

1086
00:39:30,000 --> 00:39:32,079
various development stages and we

1087
00:39:32,079 --> 00:39:33,760
think that is probably still a

1088
00:39:33,760 --> 00:39:35,839
development stage although it's likely

1089
00:39:35,839 --> 00:39:36,640
being used

1090
00:39:36,640 --> 00:39:39,760
as well in the while we had a

1091
00:39:39,760 --> 00:39:41,520
restrictive visibility of victims and

1092
00:39:41,520 --> 00:39:42,000
additional

1093
00:39:42,000 --> 00:39:43,680
related components due to the very

1094
00:39:43,680 --> 00:39:45,520
nature of air gaps so

1095
00:39:45,520 --> 00:39:48,720
it scars a scar city of a network based

1096
00:39:48,720 --> 00:39:49,599
communication

1097
00:39:49,599 --> 00:39:53,200
channel also implies that there is going

1098
00:39:53,200 --> 00:39:54,240
to be

1099
00:39:54,240 --> 00:39:56,480
a scarcity of software that relies on a

1100
00:39:56,480 --> 00:39:57,680
network-based

1101
00:39:57,680 --> 00:40:00,079
communication channel and this includes

1102
00:40:00,079 --> 00:40:01,040
antivirus

1103
00:40:01,040 --> 00:40:03,920
software which has a direct impact in

1104
00:40:03,920 --> 00:40:06,560
victim visibility

1105
00:40:06,560 --> 00:40:08,720
and we believe that ramsay is the

1106
00:40:08,720 --> 00:40:10,560
product of the hotel of our related soup

1107
00:40:10,560 --> 00:40:11,280
group

1108
00:40:11,280 --> 00:40:12,720
especially after the validation of

1109
00:40:12,720 --> 00:40:15,119
different vendors in specifically

1110
00:40:15,119 --> 00:40:18,880
tencents and we came up with some

1111
00:40:18,880 --> 00:40:21,119
prevention suggestions

1112
00:40:21,119 --> 00:40:24,960
in order to mitigate ramsay so um

1113
00:40:24,960 --> 00:40:26,640
one of the things that has to be done is

1114
00:40:26,640 --> 00:40:29,520
that because we believe that

1115
00:40:29,520 --> 00:40:32,480
operators have long-term persistence in

1116
00:40:32,480 --> 00:40:33,760
asean networks

1117
00:40:33,760 --> 00:40:35,440
these networks have to monitor in order

1118
00:40:35,440 --> 00:40:37,920
to mitigate this foothold

1119
00:40:37,920 --> 00:40:41,119
also it's a good practice to

1120
00:40:41,119 --> 00:40:43,839
deploy security measures within airgap

1121
00:40:43,839 --> 00:40:45,440
networks and a good solution to this

1122
00:40:45,440 --> 00:40:48,560
is to deploy an edr into them but

1123
00:40:48,560 --> 00:40:51,200
if any of these things fail there is

1124
00:40:51,200 --> 00:40:52,880
always an auxiliary

1125
00:40:52,880 --> 00:40:55,920
measure that can be applied which is to

1126
00:40:55,920 --> 00:40:58,480
apply secure protocols to validate the

1127
00:40:58,480 --> 00:41:00,720
integrity of devices that connects

1128
00:41:00,720 --> 00:41:04,319
to or from the the isolated networks

1129
00:41:04,319 --> 00:41:07,920
so this is done uh in order to so we

1130
00:41:07,920 --> 00:41:10,720
we know that ramsay operates through the

1131
00:41:10,720 --> 00:41:12,079
insertion and removal of

1132
00:41:12,079 --> 00:41:15,280
of removal media so even if the malware

1133
00:41:15,280 --> 00:41:17,599
gets executed successfully within their

1134
00:41:17,599 --> 00:41:18,560
gap by

1135
00:41:18,560 --> 00:41:21,280
applying this measure um the malware

1136
00:41:21,280 --> 00:41:24,319
won't be able to operate

1137
00:41:24,400 --> 00:41:25,760
so that will be the end of the

1138
00:41:25,760 --> 00:41:28,000
presentation and

1139
00:41:28,000 --> 00:41:30,720
i hope that you enjoyed it and i'll be

1140
00:41:30,720 --> 00:41:32,560
happy to answer the q a

1141
00:41:32,560 --> 00:41:35,839
and thanks very much

