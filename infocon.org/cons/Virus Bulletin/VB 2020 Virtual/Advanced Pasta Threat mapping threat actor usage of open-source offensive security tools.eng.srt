1
00:00:08,639 --> 00:00:09,840
hello everybody

2
00:00:09,840 --> 00:00:11,280
i'd like to welcome you to my talk

3
00:00:11,280 --> 00:00:13,440
advanced pasta thread my name is paul

4
00:00:13,440 --> 00:00:14,400
litwak

5
00:00:14,400 --> 00:00:16,480
and in this talk we'll be speaking about

6
00:00:16,480 --> 00:00:18,320
threat actor usage of open soft

7
00:00:18,320 --> 00:00:20,320
offensive security tools

8
00:00:20,320 --> 00:00:23,840
also known as osts so the agenda will be

9
00:00:23,840 --> 00:00:24,560
as follows

10
00:00:24,560 --> 00:00:26,000
we will first introduce what our

11
00:00:26,000 --> 00:00:27,760
offensive security tools and we will

12
00:00:27,760 --> 00:00:28,800
also speak about

13
00:00:28,800 --> 00:00:31,439
the debate going on over twitter whether

14
00:00:31,439 --> 00:00:33,440
the publication of ost is beneficial for

15
00:00:33,440 --> 00:00:35,120
security or not

16
00:00:35,120 --> 00:00:37,600
we will then look at how ost adoption

17
00:00:37,600 --> 00:00:39,120
looks like by threat actors

18
00:00:39,120 --> 00:00:41,600
and we will then unveil the ost map

19
00:00:41,600 --> 00:00:43,200
which is a connection graph that we've

20
00:00:43,200 --> 00:00:45,920
built for over hundreds of libraries

21
00:00:45,920 --> 00:00:48,879
to connect between fantactors and usages

22
00:00:48,879 --> 00:00:50,960
of open source ost

23
00:00:50,960 --> 00:00:54,320
we will we then wanted our our talk to

24
00:00:54,320 --> 00:00:54,719
be

25
00:00:54,719 --> 00:00:57,280
actionable so we will see how we can

26
00:00:57,280 --> 00:00:58,000
turn open

27
00:00:58,000 --> 00:01:02,480
source against threat actors using them

28
00:01:02,480 --> 00:01:04,959
so as i said my name is paul i work at

29
00:01:04,959 --> 00:01:06,159
the security

30
00:01:06,159 --> 00:01:08,640
company the startup based in israel

31
00:01:08,640 --> 00:01:09,680
called inteser

32
00:01:09,680 --> 00:01:11,520
which specializes in genetic software

33
00:01:11,520 --> 00:01:13,520
mapping i specifically

34
00:01:13,520 --> 00:01:15,680
specialize in researching and

35
00:01:15,680 --> 00:01:17,439
discovering a linux malware

36
00:01:17,439 --> 00:01:19,119
i've written in the past about evil

37
00:01:19,119 --> 00:01:21,360
gnome which was deployed by the american

38
00:01:21,360 --> 00:01:21,840
group

39
00:01:21,840 --> 00:01:24,640
about a couple of botnets targeting

40
00:01:24,640 --> 00:01:26,720
linux systems such as kaiji watchbook

41
00:01:26,720 --> 00:01:27,920
and a few others

42
00:01:27,920 --> 00:01:30,720
and i also built a few osts on my free

43
00:01:30,720 --> 00:01:32,400
time so i have some background

44
00:01:32,400 --> 00:01:36,000
related to the ost debates

45
00:01:36,159 --> 00:01:38,479
so what are offensive security tools

46
00:01:38,479 --> 00:01:40,320
well we can say that these are

47
00:01:40,320 --> 00:01:43,920
tools or functionalities which are

48
00:01:43,920 --> 00:01:46,159
meant to facilitate intrusions into

49
00:01:46,159 --> 00:01:47,680
systems or network

50
00:01:47,680 --> 00:01:49,920
or bypass security measures in order to

51
00:01:49,920 --> 00:01:51,200
do so

52
00:01:51,200 --> 00:01:53,360
you might have heard of metasploit

53
00:01:53,360 --> 00:01:55,520
mimikatz cobalt strike these are all

54
00:01:55,520 --> 00:01:56,719
very well known

55
00:01:56,719 --> 00:02:00,399
osts but there are many hundreds of

56
00:02:00,399 --> 00:02:02,479
more open source offensive security

57
00:02:02,479 --> 00:02:04,719
tools published on github and their

58
00:02:04,719 --> 00:02:08,878
number is only increasing

59
00:02:08,878 --> 00:02:11,920
you probably have seen this string for

60
00:02:11,920 --> 00:02:14,879
this disclaimer for educational purposes

61
00:02:14,879 --> 00:02:16,400
only if you've

62
00:02:16,400 --> 00:02:19,360
if you've visited some ost projects in

63
00:02:19,360 --> 00:02:20,720
github but as we know this

64
00:02:20,720 --> 00:02:22,959
isn't really the case fred actors don't

65
00:02:22,959 --> 00:02:23,840
really

66
00:02:23,840 --> 00:02:26,480
care about your about those funny

67
00:02:26,480 --> 00:02:28,480
disclaimers

68
00:02:28,480 --> 00:02:30,640
for example we have turla who moved two

69
00:02:30,640 --> 00:02:32,239
mile two years ago

70
00:02:32,239 --> 00:02:33,840
to start using metasploit in the

71
00:02:33,840 --> 00:02:36,319
beginning of their infection chain

72
00:02:36,319 --> 00:02:39,120
and we know that this allows them to

73
00:02:39,120 --> 00:02:39,599
first of

74
00:02:39,599 --> 00:02:42,239
all outsource the development of

75
00:02:42,239 --> 00:02:43,840
metasploit to

76
00:02:43,840 --> 00:02:46,400
the infosec community i mean these guys

77
00:02:46,400 --> 00:02:48,080
aren't opening pull requests

78
00:02:48,080 --> 00:02:51,280
to our to the tools they're using and

79
00:02:51,280 --> 00:02:53,680
they also it also allows them some

80
00:02:53,680 --> 00:02:54,800
anonymity because

81
00:02:54,800 --> 00:02:57,120
if the infection somehow fails if they

82
00:02:57,120 --> 00:02:58,480
get caught in the beginning

83
00:02:58,480 --> 00:03:00,159
then they just pull out and all that's

84
00:03:00,159 --> 00:03:02,319
left are the artifacts of metasploit but

85
00:03:02,319 --> 00:03:04,319
it is a generic tool everybody can use

86
00:03:04,319 --> 00:03:05,840
it so it really

87
00:03:05,840 --> 00:03:08,239
hurts attribution and allows turla to

88
00:03:08,239 --> 00:03:09,200
kind of

89
00:03:09,200 --> 00:03:13,120
uh exit the operation with no uh without

90
00:03:13,120 --> 00:03:15,200
uh without letting the defenders know

91
00:03:15,200 --> 00:03:16,480
what hit them

92
00:03:16,480 --> 00:03:19,840
and we also had uh an interesting uh

93
00:03:19,840 --> 00:03:22,000
attack on the australian government back

94
00:03:22,000 --> 00:03:24,000
in june uh which were called the copy

95
00:03:24,000 --> 00:03:25,440
pass compromises

96
00:03:25,440 --> 00:03:27,200
due to the heavy use of open source

97
00:03:27,200 --> 00:03:28,640
offensive security tools where the

98
00:03:28,640 --> 00:03:29,840
attackers just

99
00:03:29,840 --> 00:03:33,760
copy paste the tools from from github

100
00:03:33,760 --> 00:03:36,640
to their into their toolset and this

101
00:03:36,640 --> 00:03:37,519
allowed them to

102
00:03:37,519 --> 00:03:40,239
really outsource almost completely their

103
00:03:40,239 --> 00:03:41,120
tool set

104
00:03:41,120 --> 00:03:44,799
to open source ones and this was also an

105
00:03:44,799 --> 00:03:45,840
advanced

106
00:03:45,840 --> 00:03:47,840
persistent threat and it is rumored to

107
00:03:47,840 --> 00:03:50,319
be china

108
00:03:50,640 --> 00:03:54,319
so the rise of uh

109
00:03:54,319 --> 00:03:57,680
we have seen open source ost on the rise

110
00:03:57,680 --> 00:04:01,680
for a couple of years now back in 2015

111
00:04:01,680 --> 00:04:04,959
one in 20 1 in 20 uh

112
00:04:04,959 --> 00:04:07,599
vendor reports had a reference to an ost

113
00:04:07,599 --> 00:04:09,120
project to an open source

114
00:04:09,120 --> 00:04:11,519
offensive security tool but we've seen

115
00:04:11,519 --> 00:04:14,400
this number rise to 20 percent uh

116
00:04:14,400 --> 00:04:17,440
of all security vendors referencing some

117
00:04:17,440 --> 00:04:19,519
ost some open source ost

118
00:04:19,519 --> 00:04:21,600
in their reports so that's one in four

119
00:04:21,600 --> 00:04:23,120
so we're really seeing an increase in

120
00:04:23,120 --> 00:04:24,720
the usage of open source offensive

121
00:04:24,720 --> 00:04:28,160
security tools

122
00:04:28,160 --> 00:04:30,320
as the use of these tools has become

123
00:04:30,320 --> 00:04:31,280
more popular

124
00:04:31,280 --> 00:04:33,440
many security industry leaders now

125
00:04:33,440 --> 00:04:34,639
believe that the

126
00:04:34,639 --> 00:04:37,680
the effects of these tools is

127
00:04:37,680 --> 00:04:40,720
now a negative over our community

128
00:04:40,720 --> 00:04:43,199
they believe that the release that the

129
00:04:43,199 --> 00:04:45,440
free publication of these tools arms

130
00:04:45,440 --> 00:04:48,240
intruders and allows them to outsource

131
00:04:48,240 --> 00:04:49,199
their

132
00:04:49,199 --> 00:04:52,000
research and development efforts to the

133
00:04:52,000 --> 00:04:52,880
infosec

134
00:04:52,880 --> 00:04:54,800
community so they're just doing

135
00:04:54,800 --> 00:04:56,639
intrusions they are really

136
00:04:56,639 --> 00:04:59,600
saving up a lot of resources by uh by

137
00:04:59,600 --> 00:05:00,639
doing this

138
00:05:00,639 --> 00:05:03,280
but on the other hand there are leaders

139
00:05:03,280 --> 00:05:04,639
also security other

140
00:05:04,639 --> 00:05:07,120
important names like greg who believe

141
00:05:07,120 --> 00:05:07,680
that

142
00:05:07,680 --> 00:05:10,720
we should let osds be published as they

143
00:05:10,720 --> 00:05:11,440
are right now

144
00:05:11,440 --> 00:05:13,520
and just let the status quo be as it is

145
00:05:13,520 --> 00:05:14,720
because

146
00:05:14,720 --> 00:05:17,600
it really it because the advantages of

147
00:05:17,600 --> 00:05:19,280
releasing ost outweighs the

148
00:05:19,280 --> 00:05:21,520
disadvantages

149
00:05:21,520 --> 00:05:24,479
those who believe that releasing those

150
00:05:24,479 --> 00:05:26,800
tools is beneficial for our community

151
00:05:26,800 --> 00:05:30,000
believe that the advantages that we give

152
00:05:30,000 --> 00:05:31,120
for white hat

153
00:05:31,120 --> 00:05:34,800
hackers are much more for white hat uh

154
00:05:34,800 --> 00:05:37,039
security researchers uh outweigh the

155
00:05:37,039 --> 00:05:39,039
disadvantages that we give those

156
00:05:39,039 --> 00:05:41,039
uh threat actors they believe that the

157
00:05:41,039 --> 00:05:42,560
educational value that

158
00:05:42,560 --> 00:05:45,039
we give through the releasing of these

159
00:05:45,039 --> 00:05:46,720
tools especially to newcomers

160
00:05:46,720 --> 00:05:49,680
who use those ost's to enter the

161
00:05:49,680 --> 00:05:50,479
industry

162
00:05:50,479 --> 00:05:54,080
is really priceless those newcomers

163
00:05:54,080 --> 00:05:55,039
won't be able to

164
00:05:55,039 --> 00:05:57,919
who sometimes aren't able to afford

165
00:05:57,919 --> 00:05:58,560
expensive

166
00:05:58,560 --> 00:06:01,199
courses in order to join the industry

167
00:06:01,199 --> 00:06:01,759
just

168
00:06:01,759 --> 00:06:04,080
can go to github and read soar and read

169
00:06:04,080 --> 00:06:06,479
source code and educate themselves

170
00:06:06,479 --> 00:06:08,960
furthermore those offensive security

171
00:06:08,960 --> 00:06:10,240
tools allow us to

172
00:06:10,240 --> 00:06:13,520
advance the state of the art by allowing

173
00:06:13,520 --> 00:06:15,199
researchers from all around the world to

174
00:06:15,199 --> 00:06:18,639
build on each other that means they can

175
00:06:18,639 --> 00:06:21,520
use they can incrementally uh they can

176
00:06:21,520 --> 00:06:22,560
incrementally improve

177
00:06:22,560 --> 00:06:25,199
offensive technology by reviewing

178
00:06:25,199 --> 00:06:26,160
current

179
00:06:26,160 --> 00:06:27,840
state-of-the-art and just uh

180
00:06:27,840 --> 00:06:30,479
incrementing its progress

181
00:06:30,479 --> 00:06:33,039
furthermore they believe that red teams

182
00:06:33,039 --> 00:06:34,720
all around the world are also benefiting

183
00:06:34,720 --> 00:06:35,680
from those uh

184
00:06:35,680 --> 00:06:38,080
free publication of ost because they

185
00:06:38,080 --> 00:06:38,960
don't have

186
00:06:38,960 --> 00:06:41,199
many of their t many of red team teams

187
00:06:41,199 --> 00:06:42,080
don't have f

188
00:06:42,080 --> 00:06:44,160
don't have resources to build their own

189
00:06:44,160 --> 00:06:46,479
tools

190
00:06:46,560 --> 00:06:49,440
on the other hand those who believe that

191
00:06:49,440 --> 00:06:49,840
uh

192
00:06:49,840 --> 00:06:52,880
osts are harming us more than doing good

193
00:06:52,880 --> 00:06:53,759
they believe that

194
00:06:53,759 --> 00:06:56,160
arming threat actors does more damage

195
00:06:56,160 --> 00:06:57,039
than those

196
00:06:57,039 --> 00:06:59,440
uh advantages which i listed earlier and

197
00:06:59,440 --> 00:07:00,319
that we must

198
00:07:00,319 --> 00:07:02,800
somehow find an alternative model by

199
00:07:02,800 --> 00:07:04,800
which we must

200
00:07:04,800 --> 00:07:07,840
allow red teams and good actors to

201
00:07:07,840 --> 00:07:10,960
have stills have access to those tools

202
00:07:10,960 --> 00:07:15,840
but somehow make those bad actors those

203
00:07:15,840 --> 00:07:19,039
those threat groups unable to really arm

204
00:07:19,039 --> 00:07:20,080
themselves and outsource the

205
00:07:20,080 --> 00:07:22,639
capabilities to the to those osts

206
00:07:22,639 --> 00:07:24,720
furthermore as as we gave the tool

207
00:07:24,720 --> 00:07:25,759
example earlier

208
00:07:25,759 --> 00:07:30,000
it hurts attribution

209
00:07:30,000 --> 00:07:31,840
so it really all boils down to the

210
00:07:31,840 --> 00:07:33,599
question is the free publication of osd

211
00:07:33,599 --> 00:07:36,000
is good for security or is it not

212
00:07:36,000 --> 00:07:38,800
well i believe we like data for example

213
00:07:38,800 --> 00:07:40,639
we do not know how osts

214
00:07:40,639 --> 00:07:42,800
are useful to fret actors how many

215
00:07:42,800 --> 00:07:45,199
resources are we able to burn by

216
00:07:45,199 --> 00:07:47,599
denying them if we should succeed uh

217
00:07:47,599 --> 00:07:49,599
denying them those osts

218
00:07:49,599 --> 00:07:51,680
another point that we're missing is how

219
00:07:51,680 --> 00:07:52,639
beneficial

220
00:07:52,639 --> 00:07:55,440
are osts to researchers we only know

221
00:07:55,440 --> 00:07:56,400
that some

222
00:07:56,400 --> 00:07:58,800
researchers uh got into the infrastruct

223
00:07:58,800 --> 00:08:00,080
community by reading

224
00:08:00,080 --> 00:08:02,560
ost by reviewing source code but we

225
00:08:02,560 --> 00:08:03,280
don't know

226
00:08:03,280 --> 00:08:05,199
how much maybe this is just a small

227
00:08:05,199 --> 00:08:06,800
group and it isn't really

228
00:08:06,800 --> 00:08:10,400
me it doesn't really benefit in the

229
00:08:10,400 --> 00:08:13,199
in the great view of things so we need

230
00:08:13,199 --> 00:08:14,720
to quantify

231
00:08:14,720 --> 00:08:18,080
how good our os is for us versus how

232
00:08:18,080 --> 00:08:21,360
harmful they are another problem that we

233
00:08:21,360 --> 00:08:22,160
have is that

234
00:08:22,160 --> 00:08:24,000
ost usage information is spread

235
00:08:24,000 --> 00:08:25,520
throughout hundreds of articles and

236
00:08:25,520 --> 00:08:26,000
there is no

237
00:08:26,000 --> 00:08:29,680
centralized place to track usage of uh

238
00:08:29,680 --> 00:08:32,399
of those projects uh by threat actors

239
00:08:32,399 --> 00:08:34,320
and another problem is that we have

240
00:08:34,320 --> 00:08:37,599
little visibility over how smaller ost

241
00:08:37,599 --> 00:08:39,120
libraries such as memory injection

242
00:08:39,120 --> 00:08:39,760
libraries

243
00:08:39,760 --> 00:08:41,519
are used by fat actors because these

244
00:08:41,519 --> 00:08:43,120
libraries are usually embedded into

245
00:08:43,120 --> 00:08:44,080
custom tools

246
00:08:44,080 --> 00:08:46,720
and it is hard to detect their usage so

247
00:08:46,720 --> 00:08:47,360
many

248
00:08:47,360 --> 00:08:51,120
security vendors do not dive into the

249
00:08:51,120 --> 00:08:53,440
samples deep enough to understand what

250
00:08:53,440 --> 00:08:55,519
open source projects power them

251
00:08:55,519 --> 00:08:58,720
or they just don't notice

252
00:08:58,720 --> 00:09:01,920
so overall we need to know how

253
00:09:01,920 --> 00:09:04,080
would this point change if we were to

254
00:09:04,080 --> 00:09:06,080
change the model by which ost

255
00:09:06,080 --> 00:09:09,360
are published for example if we if we

256
00:09:09,360 --> 00:09:12,560
moved ost to some kind of paywall how

257
00:09:12,560 --> 00:09:15,680
would uh would this really harm threat

258
00:09:15,680 --> 00:09:16,160
actors

259
00:09:16,160 --> 00:09:18,480
or would they be able to somehow

260
00:09:18,480 --> 00:09:20,080
mitigate this uh

261
00:09:20,080 --> 00:09:22,880
model and would we still be able to help

262
00:09:22,880 --> 00:09:25,040
independent researchers and newcomers

263
00:09:25,040 --> 00:09:26,880
or not so these are all questions that

264
00:09:26,880 --> 00:09:28,959
we need to answer and specifically in

265
00:09:28,959 --> 00:09:29,600
this talk

266
00:09:29,600 --> 00:09:32,160
we set out to answer two of these

267
00:09:32,160 --> 00:09:32,800
questions

268
00:09:32,800 --> 00:09:35,600
we wanted to first of all shed light on

269
00:09:35,600 --> 00:09:37,120
which ost libraries

270
00:09:37,120 --> 00:09:40,800
are powering custom malware implants

271
00:09:40,800 --> 00:09:42,720
because there was little literature

272
00:09:42,720 --> 00:09:44,000
about this topic

273
00:09:44,000 --> 00:09:46,399
and we also wanted to create the ost map

274
00:09:46,399 --> 00:09:47,760
a centralized location

275
00:09:47,760 --> 00:09:50,080
for people to track what malware uses

276
00:09:50,080 --> 00:09:53,440
which open source projects

277
00:09:53,920 --> 00:09:56,160
so really how are ost is incorporated

278
00:09:56,160 --> 00:09:58,240
how do we build malware with ost

279
00:09:58,240 --> 00:10:00,160
well generally we saw that there were

280
00:10:00,160 --> 00:10:01,839
three types of

281
00:10:01,839 --> 00:10:04,240
of uh builders of open source

282
00:10:04,240 --> 00:10:05,360
incorporators

283
00:10:05,360 --> 00:10:08,240
say so first of all there was the lazy

284
00:10:08,240 --> 00:10:11,519
or inept copy paster

285
00:10:11,519 --> 00:10:14,800
these people these uh friend groups just

286
00:10:14,800 --> 00:10:17,040
went over github you know just selected

287
00:10:17,040 --> 00:10:18,480
whatever project they are they want the

288
00:10:18,480 --> 00:10:20,320
memory injection library well they just

289
00:10:20,320 --> 00:10:22,240
selected if it didn't do their my scan

290
00:10:22,240 --> 00:10:23,920
that that's how i'm imagining it

291
00:10:23,920 --> 00:10:26,399
ctrl c ctrl v enter the code just plug

292
00:10:26,399 --> 00:10:27,440
and play use it

293
00:10:27,440 --> 00:10:30,880
as an api and we can see that this is

294
00:10:30,880 --> 00:10:32,480
this is how they build their code

295
00:10:32,480 --> 00:10:34,480
because many times they forget to remove

296
00:10:34,480 --> 00:10:36,000
incriminating strings

297
00:10:36,000 --> 00:10:38,079
or accumulating artifacts from their

298
00:10:38,079 --> 00:10:39,279
code for example

299
00:10:39,279 --> 00:10:42,560
here we see example of ocean lotus

300
00:10:42,560 --> 00:10:44,800
it's an uh vietnamese apt which forgot

301
00:10:44,800 --> 00:10:46,320
to remove strings from uh

302
00:10:46,320 --> 00:10:49,120
usc me from the uac me library which is

303
00:10:49,120 --> 00:10:51,200
a library for usc bypassing

304
00:10:51,200 --> 00:10:53,519
and this is very useful for us as

305
00:10:53,519 --> 00:10:54,480
defenders because

306
00:10:54,480 --> 00:10:56,880
because we can just sign those strings

307
00:10:56,880 --> 00:10:57,920
and find

308
00:10:57,920 --> 00:11:00,240
the find malware ourselves we don't need

309
00:11:00,240 --> 00:11:01,279
to

310
00:11:01,279 --> 00:11:03,600
really hassle too much about custom

311
00:11:03,600 --> 00:11:04,720
malware

312
00:11:04,720 --> 00:11:08,240
and another symptom i'd say of

313
00:11:08,240 --> 00:11:11,360
uh malware which is uh copied just

314
00:11:11,360 --> 00:11:13,600
blindly is that many times it just

315
00:11:13,600 --> 00:11:15,040
doesn't make sense

316
00:11:15,040 --> 00:11:17,040
you might have heard of the term cargo

317
00:11:17,040 --> 00:11:18,800
called programming where

318
00:11:18,800 --> 00:11:20,959
program is just copy paste code without

319
00:11:20,959 --> 00:11:21,920
really knowing what

320
00:11:21,920 --> 00:11:23,920
it's doing and they're trying to call

321
00:11:23,920 --> 00:11:25,200
functions and

322
00:11:25,200 --> 00:11:26,560
they don't really understand what's

323
00:11:26,560 --> 00:11:28,399
happening behind the scenes they just

324
00:11:28,399 --> 00:11:29,920
trying to get it working

325
00:11:29,920 --> 00:11:33,120
and we can see like in in the tweet that

326
00:11:33,120 --> 00:11:35,680
uh h firefox the creator of uac me when

327
00:11:35,680 --> 00:11:37,519
he was

328
00:11:37,519 --> 00:11:40,160
analyzing a sample of an after it's uh

329
00:11:40,160 --> 00:11:41,120
some

330
00:11:41,120 --> 00:11:43,600
windows malware you say that the malware

331
00:11:43,600 --> 00:11:44,240
which copied

332
00:11:44,240 --> 00:11:46,160
his code from his library makes little

333
00:11:46,160 --> 00:11:47,360
sense because

334
00:11:47,360 --> 00:11:49,760
uh it's just copy-pasted stuff and tried

335
00:11:49,760 --> 00:11:50,399
to

336
00:11:50,399 --> 00:11:53,440
just make it work somehow so this is

337
00:11:53,440 --> 00:11:56,160
the symptoms of lazy copy pasting and

338
00:11:56,160 --> 00:11:57,519
here is another example

339
00:11:57,519 --> 00:12:00,320
by five groups some really high profile

340
00:12:00,320 --> 00:12:00,959
groups

341
00:12:00,959 --> 00:12:03,519
this was the improved dll injection

342
00:12:03,519 --> 00:12:04,480
library

343
00:12:04,480 --> 00:12:07,760
and they forgot to remove a couple of

344
00:12:07,760 --> 00:12:08,800
strings

345
00:12:08,800 --> 00:12:10,720
which you can see in the lower side of

346
00:12:10,720 --> 00:12:12,480
the presentation the

347
00:12:12,480 --> 00:12:14,240
the strings which they forgot to remove

348
00:12:14,240 --> 00:12:15,680
on the upper side you can see the

349
00:12:15,680 --> 00:12:16,639
strings

350
00:12:16,639 --> 00:12:18,800
that we found in the families in the on

351
00:12:18,800 --> 00:12:20,720
the right side dark hotel winning ti

352
00:12:20,720 --> 00:12:22,560
ramsey trick bot lazarus

353
00:12:22,560 --> 00:12:24,480
and you can see that these groups forgot

354
00:12:24,480 --> 00:12:26,560
to remove those free strings

355
00:12:26,560 --> 00:12:28,560
because they just probably copy pasted

356
00:12:28,560 --> 00:12:31,279
the the code without too much uh

357
00:12:31,279 --> 00:12:34,320
analyzing it and this again allows us

358
00:12:34,320 --> 00:12:35,600
its defenders to easily

359
00:12:35,600 --> 00:12:38,959
sign the uh and find those malware but

360
00:12:38,959 --> 00:12:41,120
for these groups they they removed it

361
00:12:41,120 --> 00:12:42,000
pretty

362
00:12:42,000 --> 00:12:44,240
pretty pretty soon uh trigbot and

363
00:12:44,240 --> 00:12:45,600
lazarus removed those strings pretty

364
00:12:45,600 --> 00:12:46,639
soon after

365
00:12:46,639 --> 00:12:48,560
after they noticed that they are getting

366
00:12:48,560 --> 00:12:49,839
detected because they

367
00:12:49,839 --> 00:12:51,519
forgot to remove the strings but they

368
00:12:51,519 --> 00:12:54,720
still use that library

369
00:12:54,720 --> 00:12:56,639
so here's another example of gantt crab

370
00:12:56,639 --> 00:12:58,320
using their reflective dll injection

371
00:12:58,320 --> 00:12:59,040
library

372
00:12:59,040 --> 00:13:01,440
and they forgot to remove an export not

373
00:13:01,440 --> 00:13:02,160
a string

374
00:13:02,160 --> 00:13:04,399
and as you can see in the id screen we

375
00:13:04,399 --> 00:13:05,279
have

376
00:13:05,279 --> 00:13:07,839
the exports the export screen and we're

377
00:13:07,839 --> 00:13:08,880
able to

378
00:13:08,880 --> 00:13:12,240
notice that this that this uh

379
00:13:12,240 --> 00:13:15,839
file has a pretty suspicious export

380
00:13:15,839 --> 00:13:16,399
which we

381
00:13:16,399 --> 00:13:19,279
again can sign and find malware like

382
00:13:19,279 --> 00:13:21,839
this easily

383
00:13:22,160 --> 00:13:25,120
so the second type of uh copy pastels of

384
00:13:25,120 --> 00:13:27,200
ost incorporators that we have

385
00:13:27,200 --> 00:13:29,279
it's a little bit more advanced like

386
00:13:29,279 --> 00:13:30,320
we're seeing these

387
00:13:30,320 --> 00:13:32,639
groups they're they're starting to read

388
00:13:32,639 --> 00:13:33,680
the

389
00:13:33,680 --> 00:13:35,680
source that they're that they're copying

390
00:13:35,680 --> 00:13:36,720
they're uh

391
00:13:36,720 --> 00:13:38,560
changing it they're adding some parmesan

392
00:13:38,560 --> 00:13:41,519
on top and a good example is carbonac

393
00:13:41,519 --> 00:13:43,839
uh carbonax uh source code was leaked

394
00:13:43,839 --> 00:13:46,320
back in 2018 and it's allowed us

395
00:13:46,320 --> 00:13:48,959
a glimpse into how the threat actor

396
00:13:48,959 --> 00:13:49,760
thinks how

397
00:13:49,760 --> 00:13:53,279
he builds his code and for example

398
00:13:53,279 --> 00:13:56,720
this is uh um this is a library that

399
00:13:56,720 --> 00:13:57,199
they have

400
00:13:57,199 --> 00:14:00,399
incorporated into their uh code

401
00:14:00,399 --> 00:14:03,600
it's called tiny interpreter it's a it's

402
00:14:03,600 --> 00:14:04,720
a replacement for

403
00:14:04,720 --> 00:14:07,760
the firm interpreters uh initial stager

404
00:14:07,760 --> 00:14:09,839
and we can see that carbonact the source

405
00:14:09,839 --> 00:14:11,120
code written in c

406
00:14:11,120 --> 00:14:13,680
turned it into c plus plus did some

407
00:14:13,680 --> 00:14:15,440
changes customized it

408
00:14:15,440 --> 00:14:17,440
and that's how it now looks like in the

409
00:14:17,440 --> 00:14:18,560
carbon

410
00:14:18,560 --> 00:14:22,160
so this requires the protector a deeper

411
00:14:22,160 --> 00:14:23,600
understanding of the tool of its

412
00:14:23,600 --> 00:14:24,639
protocols

413
00:14:24,639 --> 00:14:27,920
and really we don't really see mistakes

414
00:14:27,920 --> 00:14:30,000
there as much as we saw in the last

415
00:14:30,000 --> 00:14:32,720
type of copy paster and it is harder to

416
00:14:32,720 --> 00:14:33,519
detect

417
00:14:33,519 --> 00:14:36,720
the usage of this code because once

418
00:14:36,720 --> 00:14:38,240
again it's written in different

419
00:14:38,240 --> 00:14:40,480
languages so in the binary we really see

420
00:14:40,480 --> 00:14:41,360
big differences

421
00:14:41,360 --> 00:14:44,880
so it's hard to notice now the third

422
00:14:44,880 --> 00:14:46,160
kind of factor

423
00:14:46,160 --> 00:14:49,440
is the the third kind of ost user

424
00:14:49,440 --> 00:14:51,519
are users who are using frameworks and

425
00:14:51,519 --> 00:14:53,760
tools which you may find uh

426
00:14:53,760 --> 00:14:56,480
in github such as metasploit mimikats

427
00:14:56,480 --> 00:14:58,079
all kinds of c2 frameworks

428
00:14:58,079 --> 00:15:00,720
which don't really don't require you to

429
00:15:00,720 --> 00:15:02,480
use your own custom tool

430
00:15:02,480 --> 00:15:04,399
you just deploy the tool as is for

431
00:15:04,399 --> 00:15:06,760
example mimikatz.exe or

432
00:15:06,760 --> 00:15:09,680
metasploit.exe and you just use it like

433
00:15:09,680 --> 00:15:13,040
because it really offers a large

434
00:15:13,040 --> 00:15:14,959
amount of functionalities which probably

435
00:15:14,959 --> 00:15:16,560
suits all your needs

436
00:15:16,560 --> 00:15:19,519
so here is me googling c2 over github

437
00:15:19,519 --> 00:15:21,680
and you can see the amount of request of

438
00:15:21,680 --> 00:15:23,839
responses that i got for c2 frameworks

439
00:15:23,839 --> 00:15:25,040
and the list

440
00:15:25,040 --> 00:15:27,760
just goes on there are hundreds of of uh

441
00:15:27,760 --> 00:15:28,720
those uh

442
00:15:28,720 --> 00:15:32,240
as is tools which allow attackers a

443
00:15:32,240 --> 00:15:33,279
quick alteration

444
00:15:33,279 --> 00:15:35,920
iteration of tools because if one tool

445
00:15:35,920 --> 00:15:37,839
stops working they can just switch over

446
00:15:37,839 --> 00:15:39,360
to the next one they just download the

447
00:15:39,360 --> 00:15:40,800
nexon figure out how

448
00:15:40,800 --> 00:15:42,800
it's used you know it takes two hours

449
00:15:42,800 --> 00:15:44,240
they just set it up

450
00:15:44,240 --> 00:15:45,680
and they can infect the victims with

451
00:15:45,680 --> 00:15:47,680
this new with this new tool

452
00:15:47,680 --> 00:15:50,160
it's pretty simple and that is really

453
00:15:50,160 --> 00:15:51,440
dangerous because

454
00:15:51,440 --> 00:15:53,759
they are completely outsourcing all

455
00:15:53,759 --> 00:15:54,959
their capabilities

456
00:15:54,959 --> 00:15:57,759
to the infosec community for example we

457
00:15:57,759 --> 00:15:58,240
have

458
00:15:58,240 --> 00:16:01,519
this group this networker ransomware

459
00:16:01,519 --> 00:16:02,079
which got

460
00:16:02,079 --> 00:16:05,519
famous around the covet 19 infection

461
00:16:05,519 --> 00:16:06,800
like at the beginning because they were

462
00:16:06,800 --> 00:16:07,519
using

463
00:16:07,519 --> 00:16:10,800
covet 19 lures and the way their marvel

464
00:16:10,800 --> 00:16:12,720
looks like is pretty

465
00:16:12,720 --> 00:16:14,880
pretty scary because they're using

466
00:16:14,880 --> 00:16:15,920
almost completely

467
00:16:15,920 --> 00:16:17,920
offensive open source offensive security

468
00:16:17,920 --> 00:16:19,440
tools you can see on the

469
00:16:19,440 --> 00:16:22,399
right side a graph and the only custom

470
00:16:22,399 --> 00:16:23,759
tool which they are using

471
00:16:23,759 --> 00:16:26,320
is the runs away implant them the

472
00:16:26,320 --> 00:16:28,240
ransomware implant itself which is very

473
00:16:28,240 --> 00:16:28,639
easy

474
00:16:28,639 --> 00:16:32,320
to build it's just a file it's just

475
00:16:32,320 --> 00:16:34,800
just locks your files no no no real uh

476
00:16:34,800 --> 00:16:36,560
effort in building a ransomware tool

477
00:16:36,560 --> 00:16:38,720
but the real research and development is

478
00:16:38,720 --> 00:16:39,600
actually in those

479
00:16:39,600 --> 00:16:41,519
lateral movement tools in the defensive

480
00:16:41,519 --> 00:16:43,279
agent privilege escalation credential

481
00:16:43,279 --> 00:16:44,480
access all of these

482
00:16:44,480 --> 00:16:46,079
categories they're just outsourcing to

483
00:16:46,079 --> 00:16:47,759
the infosec community so you can

484
00:16:47,759 --> 00:16:50,959
see how harmful these

485
00:16:50,959 --> 00:16:54,000
types of malware are we just outsource

486
00:16:54,000 --> 00:16:56,399
their r d completely to infrastruct

487
00:16:56,399 --> 00:16:58,959
community

488
00:16:59,040 --> 00:17:01,440
so it is also important to note that not

489
00:17:01,440 --> 00:17:03,040
all code reuses ost

490
00:17:03,040 --> 00:17:04,480
for example we have here a stack

491
00:17:04,480 --> 00:17:06,400
overflow uh question

492
00:17:06,400 --> 00:17:09,919
over how our applications how to add an

493
00:17:09,919 --> 00:17:11,679
application to startup

494
00:17:11,679 --> 00:17:14,640
to the via the registry so this is

495
00:17:14,640 --> 00:17:15,839
actually an answer

496
00:17:15,839 --> 00:17:19,039
i uh i added here the answer on the

497
00:17:19,039 --> 00:17:21,280
lowest part of the screen and we took

498
00:17:21,280 --> 00:17:22,559
this uh this

499
00:17:22,559 --> 00:17:24,319
this piece of code and the integer we

500
00:17:24,319 --> 00:17:26,319
specialize in the genetic software

501
00:17:26,319 --> 00:17:27,280
mapping as i said

502
00:17:27,280 --> 00:17:29,440
so where we have our own code reusage

503
00:17:29,440 --> 00:17:31,760
and we have a lot of samples in our

504
00:17:31,760 --> 00:17:33,679
database for which we compare them

505
00:17:33,679 --> 00:17:35,360
against the code that we can

506
00:17:35,360 --> 00:17:39,039
uh from code that we receive notice if

507
00:17:39,039 --> 00:17:40,400
there is any reuse there

508
00:17:40,400 --> 00:17:42,720
so we took this specific uh code and we

509
00:17:42,720 --> 00:17:43,679
compiled it

510
00:17:43,679 --> 00:17:46,320
and we were able to notice that metrics

511
00:17:46,320 --> 00:17:48,480
bunker animals locker aurora answer

512
00:17:48,480 --> 00:17:51,360
strong pt apt they all use this this

513
00:17:51,360 --> 00:17:52,480
specific uh

514
00:17:52,480 --> 00:17:55,520
stack overflow answer but this does not

515
00:17:55,520 --> 00:17:55,840
make

516
00:17:55,840 --> 00:17:58,960
the this question this uh

517
00:17:58,960 --> 00:18:02,080
little snippet of code as offensive it

518
00:18:02,080 --> 00:18:03,520
isn't an ost because

519
00:18:03,520 --> 00:18:06,480
it wasn't meant to be used offensively

520
00:18:06,480 --> 00:18:08,000
we must make the distinction

521
00:18:08,000 --> 00:18:10,799
that some codes which some code can be

522
00:18:10,799 --> 00:18:12,880
abused offensively but its purpose is

523
00:18:12,880 --> 00:18:15,039
not offensive so that would not be an

524
00:18:15,039 --> 00:18:16,240
ost

525
00:18:16,240 --> 00:18:18,720
is a stuck overflow question or an

526
00:18:18,720 --> 00:18:19,440
answer

527
00:18:19,440 --> 00:18:21,919
can even be an osd that's uh even a

528
00:18:21,919 --> 00:18:23,360
philosophical and

529
00:18:23,360 --> 00:18:24,960
a philosophical question because that's

530
00:18:24,960 --> 00:18:26,880
it's a small snippet of code

531
00:18:26,880 --> 00:18:29,760
but entertain the idea if a question is

532
00:18:29,760 --> 00:18:31,520
purely offensive and uh

533
00:18:31,520 --> 00:18:34,640
all the code that is uh answered is also

534
00:18:34,640 --> 00:18:37,360
completely meant for offensive purposes

535
00:18:37,360 --> 00:18:38,640
is it an ost well

536
00:18:38,640 --> 00:18:40,320
again it's another philosophical

537
00:18:40,320 --> 00:18:42,080
question which uh

538
00:18:42,080 --> 00:18:46,320
i do not have the answer for

539
00:18:46,640 --> 00:18:48,799
we must first find what we regard as

540
00:18:48,799 --> 00:18:50,880
those things

541
00:18:50,880 --> 00:18:53,760
so at the uh the one of the purpose of

542
00:18:53,760 --> 00:18:54,160
the

543
00:18:54,160 --> 00:18:57,440
talk was to find which malware was using

544
00:18:57,440 --> 00:18:58,799
which offensive

545
00:18:58,799 --> 00:19:02,000
open source tools so what we wanted to

546
00:19:02,000 --> 00:19:02,720
do

547
00:19:02,720 --> 00:19:05,039
is really create this huge graph

548
00:19:05,039 --> 00:19:06,160
connection graph

549
00:19:06,160 --> 00:19:08,799
and figure out so if we go for example

550
00:19:08,799 --> 00:19:10,320
if we want to find out which

551
00:19:10,320 --> 00:19:13,360
uh open source lazarus used we would go

552
00:19:13,360 --> 00:19:14,320
to the map and

553
00:19:14,320 --> 00:19:18,000
quickly see it in a centralized location

554
00:19:18,000 --> 00:19:20,640
so to do this we had a lot of hundreds

555
00:19:20,640 --> 00:19:22,880
of articles

556
00:19:22,880 --> 00:19:25,440
which describe already what kind of uh

557
00:19:25,440 --> 00:19:26,080
open source

558
00:19:26,080 --> 00:19:29,039
tools those protectors are using so we

559
00:19:29,039 --> 00:19:29,840
did use them

560
00:19:29,840 --> 00:19:31,520
however we found out that the

561
00:19:31,520 --> 00:19:33,360
information there was lacking because

562
00:19:33,360 --> 00:19:36,400
there were a lack of ost libraries such

563
00:19:36,400 --> 00:19:38,080
as memory injection libraries credential

564
00:19:38,080 --> 00:19:38,720
access

565
00:19:38,720 --> 00:19:40,559
libraries which those thread actors

566
00:19:40,559 --> 00:19:42,240
which those vendors were

567
00:19:42,240 --> 00:19:44,400
not really documenting they were usually

568
00:19:44,400 --> 00:19:46,000
documenting those frameworks those

569
00:19:46,000 --> 00:19:47,600
bigger tools which were much easier to

570
00:19:47,600 --> 00:19:49,520
document you know if you see a mimikazer

571
00:19:49,520 --> 00:19:50,000
you just

572
00:19:50,000 --> 00:19:51,840
write it down it doesn't take a lot of

573
00:19:51,840 --> 00:19:53,120
analysis effort

574
00:19:53,120 --> 00:19:55,200
but we were interested in those tools

575
00:19:55,200 --> 00:19:57,039
such as the reflective dll loader

576
00:19:57,039 --> 00:19:59,280
and all of those ost's which contain

577
00:19:59,280 --> 00:20:00,640
offensive functionality

578
00:20:00,640 --> 00:20:04,000
but aren't really under appreciated by

579
00:20:04,000 --> 00:20:06,240
security vendors and they are harder to

580
00:20:06,240 --> 00:20:07,120
notice

581
00:20:07,120 --> 00:20:10,559
so we came up with a couple of ideas how

582
00:20:10,559 --> 00:20:11,679
do we find those

583
00:20:11,679 --> 00:20:14,400
uh smaller with those libraries those

584
00:20:14,400 --> 00:20:16,240
more subtle connections

585
00:20:16,240 --> 00:20:18,480
so our first idea was to find library

586
00:20:18,480 --> 00:20:20,080
strings such as the one we showed trig

587
00:20:20,080 --> 00:20:20,880
bot ramsey

588
00:20:20,880 --> 00:20:23,600
and the dark hotel using but those

589
00:20:23,600 --> 00:20:24,640
strings there

590
00:20:24,640 --> 00:20:27,520
those are mistakes those are symptoms of

591
00:20:27,520 --> 00:20:28,320
copy

592
00:20:28,320 --> 00:20:30,159
of lazy copy pasting but we know that

593
00:20:30,159 --> 00:20:32,080
not all actors are lazy and even those

594
00:20:32,080 --> 00:20:33,120
who are lazy they

595
00:20:33,120 --> 00:20:34,559
it doesn't take a lot of effort to

596
00:20:34,559 --> 00:20:36,400
remove strings so we knew that this

597
00:20:36,400 --> 00:20:39,440
this uh this tactic would

598
00:20:39,440 --> 00:20:42,559
help us create some find uh some

599
00:20:42,559 --> 00:20:44,799
connections but it would not really be

600
00:20:44,799 --> 00:20:45,760
good enough

601
00:20:45,760 --> 00:20:49,760
for a really purposeful graph so this

602
00:20:49,760 --> 00:20:52,240
did not this would not work our second

603
00:20:52,240 --> 00:20:53,760
idea was to find

604
00:20:53,760 --> 00:20:56,000
perhaps some unique strings some unique

605
00:20:56,000 --> 00:20:58,080
constants for example the reflective

606
00:20:58,080 --> 00:20:59,280
loader export

607
00:20:59,280 --> 00:21:02,400
in the reflective dll injection library

608
00:21:02,400 --> 00:21:04,400
all kinds of unique properties for each

609
00:21:04,400 --> 00:21:05,600
project but

610
00:21:05,600 --> 00:21:07,200
we soon found out that this wasn't

611
00:21:07,200 --> 00:21:09,280
scalable because for each project we

612
00:21:09,280 --> 00:21:10,640
would need to review its source code

613
00:21:10,640 --> 00:21:12,080
really figure out what's unique about

614
00:21:12,080 --> 00:21:13,520
this project and then

615
00:21:13,520 --> 00:21:16,720
sign those specific unique uh

616
00:21:16,720 --> 00:21:18,480
unique artifacts and then we would have

617
00:21:18,480 --> 00:21:20,159
to make sure that these are really

618
00:21:20,159 --> 00:21:21,600
unique to this project and

619
00:21:21,600 --> 00:21:23,120
we might find false positives and we

620
00:21:23,120 --> 00:21:24,720
might discover that they were also used

621
00:21:24,720 --> 00:21:25,039
in

622
00:21:25,039 --> 00:21:27,120
other projects so this was again

623
00:21:27,120 --> 00:21:28,159
unscalable

624
00:21:28,159 --> 00:21:31,200
for one man for one man to do

625
00:21:31,200 --> 00:21:34,240
so our my third option

626
00:21:34,240 --> 00:21:36,480
was to use a coder usage as i said that

627
00:21:36,480 --> 00:21:37,520
integer

628
00:21:37,520 --> 00:21:39,360
this is our main strength we have our

629
00:21:39,360 --> 00:21:41,760
own uh engine in-house engine

630
00:21:41,760 --> 00:21:44,080
but this also imposes a couple of

631
00:21:44,080 --> 00:21:45,039
problems

632
00:21:45,039 --> 00:21:47,120
for example code varies between

633
00:21:47,120 --> 00:21:48,159
compilers and

634
00:21:48,159 --> 00:21:51,039
different flags used when you take a

635
00:21:51,039 --> 00:21:52,559
binary you have to

636
00:21:52,559 --> 00:21:53,840
really disassemble it and then you

637
00:21:53,840 --> 00:21:55,840
compare the binary patterns to another

638
00:21:55,840 --> 00:21:56,559
file

639
00:21:56,559 --> 00:21:58,159
which for example would be the library

640
00:21:58,159 --> 00:22:00,159
so we would compare code from lazarus

641
00:22:00,159 --> 00:22:01,120
from a security

642
00:22:01,120 --> 00:22:03,760
report to this file that we compiled uh

643
00:22:03,760 --> 00:22:05,679
is for example the reflective dll

644
00:22:05,679 --> 00:22:06,400
injection

645
00:22:06,400 --> 00:22:07,840
and we need to make sure to somehow

646
00:22:07,840 --> 00:22:09,440
normalize the code between them

647
00:22:09,440 --> 00:22:11,039
so our codery's engine is pretty strong

648
00:22:11,039 --> 00:22:13,200
but there are still some

649
00:22:13,200 --> 00:22:15,679
problems if you had compiled the program

650
00:22:15,679 --> 00:22:17,679
to an older compiler then different code

651
00:22:17,679 --> 00:22:19,200
would be generated and that

652
00:22:19,200 --> 00:22:21,679
would be uh and that and then we could

653
00:22:21,679 --> 00:22:22,320
miss

654
00:22:22,320 --> 00:22:24,880
a couple some stuff and another problem

655
00:22:24,880 --> 00:22:26,000
was that code varies

656
00:22:26,000 --> 00:22:27,600
through time if we took this reflective

657
00:22:27,600 --> 00:22:29,360
dll injection library for example from

658
00:22:29,360 --> 00:22:30,480
2010

659
00:22:30,480 --> 00:22:32,600
it would look completely different to

660
00:22:32,600 --> 00:22:33,760
2020

661
00:22:33,760 --> 00:22:36,000
because code changes there are there are

662
00:22:36,000 --> 00:22:37,039
commits made

663
00:22:37,039 --> 00:22:40,080
and we can see this in quasar qazarat

664
00:22:40,080 --> 00:22:43,360
that uh the offer had made like 10

665
00:22:43,360 --> 00:22:44,720
commits in the day and you can see on

666
00:22:44,720 --> 00:22:45,520
the right side

667
00:22:45,520 --> 00:22:48,320
how many commits are being made through

668
00:22:48,320 --> 00:22:48,720
uh

669
00:22:48,720 --> 00:22:50,640
how throughout the years and code

670
00:22:50,640 --> 00:22:51,840
constantly changes

671
00:22:51,840 --> 00:22:55,840
so we needed to somehow

672
00:22:56,000 --> 00:22:59,440
pay attention to these changes and

673
00:22:59,440 --> 00:23:02,320
the way that we really overcame this is

674
00:23:02,320 --> 00:23:04,480
that we built our own pipeline to find

675
00:23:04,480 --> 00:23:07,039
to create as much code as we can from

676
00:23:07,039 --> 00:23:07,760
from each

677
00:23:07,760 --> 00:23:09,840
library so our plan was to take all

678
00:23:09,840 --> 00:23:12,320
these those libraries that we compiled

679
00:23:12,320 --> 00:23:16,400
those code code items and we would

680
00:23:16,400 --> 00:23:19,120
try to compile the library as much as

681
00:23:19,120 --> 00:23:20,720
and we would try to

682
00:23:20,720 --> 00:23:22,640
generate as much code as we can from the

683
00:23:22,640 --> 00:23:24,640
library and then we would take the code

684
00:23:24,640 --> 00:23:25,520
and

685
00:23:25,520 --> 00:23:27,280
compare it through our code reviews

686
00:23:27,280 --> 00:23:29,200
engine and that would be how we would

687
00:23:29,200 --> 00:23:29,679
create

688
00:23:29,679 --> 00:23:32,799
the the graph so

689
00:23:32,799 --> 00:23:35,120
what we came up with is this project

690
00:23:35,120 --> 00:23:36,000
that we open source

691
00:23:36,000 --> 00:23:37,520
and you can see it in the presentation

692
00:23:37,520 --> 00:23:40,320
where we take where we go over projects

693
00:23:40,320 --> 00:23:43,360
over uh each monthly commit in each

694
00:23:43,360 --> 00:23:45,840
gita project we download the commit and

695
00:23:45,840 --> 00:23:47,360
then we compile it through

696
00:23:47,360 --> 00:23:49,919
about seven compilers through visual

697
00:23:49,919 --> 00:23:51,360
studio 2010

698
00:23:51,360 --> 00:23:54,960
up to visual studio 2019 and then we

699
00:23:54,960 --> 00:23:55,760
compared it to

700
00:23:55,760 --> 00:23:58,400
to our uh code reuse engine and then

701
00:23:58,400 --> 00:24:00,159
that is how we were able

702
00:24:00,159 --> 00:24:02,400
to really create the graph so for

703
00:24:02,400 --> 00:24:04,159
example if lazarus used

704
00:24:04,159 --> 00:24:06,159
in their code the impre improved

705
00:24:06,159 --> 00:24:08,240
reflective dln injection

706
00:24:08,240 --> 00:24:11,919
from a version of 2015 compiled with

707
00:24:11,919 --> 00:24:15,120
uh with the visual studio compiler from

708
00:24:15,120 --> 00:24:16,080
2019

709
00:24:16,080 --> 00:24:18,240
we would we would find it we would

710
00:24:18,240 --> 00:24:20,000
notice it because that's how we built

711
00:24:20,000 --> 00:24:23,200
the our pipeline to really account for

712
00:24:23,200 --> 00:24:25,039
all these changes throughout time and

713
00:24:25,039 --> 00:24:28,240
throughout compiler versions

714
00:24:28,240 --> 00:24:31,279
so overall we compiled 80 libraries

715
00:24:31,279 --> 00:24:33,600
80 offensive security tool libraries and

716
00:24:33,600 --> 00:24:35,200
we also added 29

717
00:24:35,200 --> 00:24:37,520
non-native tools written in powershell

718
00:24:37,520 --> 00:24:38,640
java python

719
00:24:38,640 --> 00:24:40,720
which our code reviews engine did not

720
00:24:40,720 --> 00:24:42,559
support and these libraries

721
00:24:42,559 --> 00:24:46,159
and tools we also um

722
00:24:46,159 --> 00:24:48,880
used open so we used security vendors on

723
00:24:48,880 --> 00:24:49,279
going

724
00:24:49,279 --> 00:24:52,799
like re uh existing uh reports

725
00:24:52,799 --> 00:24:56,080
to map out already known connections

726
00:24:56,080 --> 00:24:57,440
because some of these

727
00:24:57,440 --> 00:25:00,240
samples we were not able to find in

728
00:25:00,240 --> 00:25:02,559
virus total or forever

729
00:25:02,559 --> 00:25:06,080
through our well sites like vt

730
00:25:06,080 --> 00:25:09,600
because uh sometimes security

731
00:25:09,600 --> 00:25:11,760
vendors do not post all the do not

732
00:25:11,760 --> 00:25:13,440
publish all the iocs to

733
00:25:13,440 --> 00:25:16,480
virustotal so we added added

734
00:25:16,480 --> 00:25:20,400
documentation which already existed to

735
00:25:20,400 --> 00:25:24,080
make the graph collection graph stronger

736
00:25:24,080 --> 00:25:29,840
so now i will demo you the the map

737
00:25:31,520 --> 00:25:36,400
so uh here it is as you can see

738
00:25:36,400 --> 00:25:39,840
blue stands for library for example

739
00:25:39,840 --> 00:25:43,520
this is the here if we

740
00:25:43,520 --> 00:25:45,760
click this this is the lasagna library

741
00:25:45,760 --> 00:25:47,760
the credential stealing tool

742
00:25:47,760 --> 00:25:51,200
and we see here red nodes yellow nodes

743
00:25:51,200 --> 00:25:54,720
and there is also oh my god

744
00:25:54,720 --> 00:25:57,279
mouse is running crazy and there's also

745
00:25:57,279 --> 00:25:58,159
orange

746
00:25:58,159 --> 00:26:01,600
notes so as i said blue is library

747
00:26:01,600 --> 00:26:04,880
red would be apt or and uh

748
00:26:04,880 --> 00:26:08,080
orange would be notable threads such as

749
00:26:08,080 --> 00:26:09,440
trig board

750
00:26:09,440 --> 00:26:13,200
dns birthday carbonarc actors which have

751
00:26:13,200 --> 00:26:14,720
which are not advantageous

752
00:26:14,720 --> 00:26:15,600
well they're not really

753
00:26:15,600 --> 00:26:17,279
government-backed but they're pretty

754
00:26:17,279 --> 00:26:18,960
notable and we're

755
00:26:18,960 --> 00:26:21,039
and they're very known within the

756
00:26:21,039 --> 00:26:22,159
infosec community

757
00:26:22,159 --> 00:26:25,279
and on the green there are also other

758
00:26:25,279 --> 00:26:27,760
uh documented threats but they're not

759
00:26:27,760 --> 00:26:28,640
that known

760
00:26:28,640 --> 00:26:31,600
as much as the orange ones so as you can

761
00:26:31,600 --> 00:26:32,880
see we can uh

762
00:26:32,880 --> 00:26:36,559
look for our favorite favorite uh

763
00:26:36,559 --> 00:26:39,760
protector for example apt-10

764
00:26:39,760 --> 00:26:42,480
and we can see all the all the libraries

765
00:26:42,480 --> 00:26:43,200
that you do

766
00:26:43,200 --> 00:26:45,279
that it had used for example here we see

767
00:26:45,279 --> 00:26:46,320
it used quadric

768
00:26:46,320 --> 00:26:49,440
uh custom mimikats impact h strand

769
00:26:49,440 --> 00:26:52,960
ramcom and we can then switch to

770
00:26:52,960 --> 00:26:55,840
for example click empire and we can see

771
00:26:55,840 --> 00:26:57,440
all the

772
00:26:57,440 --> 00:26:59,360
fret actors which used empire and we can

773
00:26:59,360 --> 00:27:01,039
keep on going for example to switch to

774
00:27:01,039 --> 00:27:02,640
get crab we see that they use reflective

775
00:27:02,640 --> 00:27:03,919
dll and

776
00:27:03,919 --> 00:27:06,720
this map really shows the extent to what

777
00:27:06,720 --> 00:27:08,000
extent fret actors

778
00:27:08,000 --> 00:27:11,039
are using offensive security tools

779
00:27:11,039 --> 00:27:13,520
and we welcome you to review this map

780
00:27:13,520 --> 00:27:15,200
yourself there is no point in going

781
00:27:15,200 --> 00:27:17,760
for each frat actor that would that

782
00:27:17,760 --> 00:27:19,039
would be a

783
00:27:19,039 --> 00:27:22,880
blog by itself but uh we also have a

784
00:27:22,880 --> 00:27:24,480
github repository where we

785
00:27:24,480 --> 00:27:26,240
welcome you to add your own

786
00:27:26,240 --> 00:27:27,760
contributions if you find

787
00:27:27,760 --> 00:27:29,840
this new this protector uses a new

788
00:27:29,840 --> 00:27:32,480
library or some undocumented

789
00:27:32,480 --> 00:27:34,159
offensive security tool which we did not

790
00:27:34,159 --> 00:27:36,000
add here we welcome you to add

791
00:27:36,000 --> 00:27:37,039
connections to

792
00:27:37,039 --> 00:27:39,440
github and we hope that this this map

793
00:27:39,440 --> 00:27:41,120
will be a centralized location to really

794
00:27:41,120 --> 00:27:42,720
track the usage of these tools by

795
00:27:42,720 --> 00:27:45,360
protectors

796
00:27:46,799 --> 00:27:48,799
so as i already showed you an example

797
00:27:48,799 --> 00:27:50,880
but this is uh the reflective dll

798
00:27:50,880 --> 00:27:52,320
injection

799
00:27:52,320 --> 00:27:55,679
we had little before the before creating

800
00:27:55,679 --> 00:27:57,200
the map there was little

801
00:27:57,200 --> 00:28:00,320
uh information known about uh threat

802
00:28:00,320 --> 00:28:01,279
actor usage of

803
00:28:01,279 --> 00:28:04,080
generally memory injection libraries um

804
00:28:04,080 --> 00:28:05,600
this information was

805
00:28:05,600 --> 00:28:08,559
just largely ignored these libraries

806
00:28:08,559 --> 00:28:10,320
were largely ignored by security vendors

807
00:28:10,320 --> 00:28:10,640
as

808
00:28:10,640 --> 00:28:12,640
i said earlier so here's an example of

809
00:28:12,640 --> 00:28:14,320
the libraries that we found

810
00:28:14,320 --> 00:28:15,919
that were using the reflective dll

811
00:28:15,919 --> 00:28:17,360
injection which most of them were

812
00:28:17,360 --> 00:28:19,279
undocumented

813
00:28:19,279 --> 00:28:22,320
so we really had a lot of success

814
00:28:22,320 --> 00:28:24,720
in the creating the map when it came to

815
00:28:24,720 --> 00:28:26,640
those smaller libraries

816
00:28:26,640 --> 00:28:28,320
especially memory injection credential

817
00:28:28,320 --> 00:28:31,840
stealing tools and so on

818
00:28:31,840 --> 00:28:33,840
and this is another cool example we

819
00:28:33,840 --> 00:28:35,679
found that hackpit ransomware

820
00:28:35,679 --> 00:28:39,840
stole code from asynchronz c-sharp c2

821
00:28:39,840 --> 00:28:43,039
framework ost tool

822
00:28:43,039 --> 00:28:45,200
you can find in github and specifically

823
00:28:45,200 --> 00:28:46,559
this run server only took the

824
00:28:46,559 --> 00:28:49,039
anti-analysis modules the anti-analysis

825
00:28:49,039 --> 00:28:49,600
code

826
00:28:49,600 --> 00:28:52,559
from the from the this library so you

827
00:28:52,559 --> 00:28:53,760
can really see the power

828
00:28:53,760 --> 00:28:56,320
uh code reviews enables us how granular

829
00:28:56,320 --> 00:28:57,360
the are the

830
00:28:57,360 --> 00:28:59,600
we were able to find really even a fun

831
00:28:59,600 --> 00:29:02,080
even if a function was stolen from a

832
00:29:02,080 --> 00:29:05,600
piece of code or piece of library

833
00:29:06,080 --> 00:29:09,039
so finally we wanted uh this talk to be

834
00:29:09,039 --> 00:29:10,960
actionable so people could see

835
00:29:10,960 --> 00:29:13,279
what we can do with open source and how

836
00:29:13,279 --> 00:29:14,960
do we target how do we turn the tables

837
00:29:14,960 --> 00:29:15,440
against

838
00:29:15,440 --> 00:29:18,399
predictors so here we for example is the

839
00:29:18,399 --> 00:29:19,520
memory module

840
00:29:19,520 --> 00:29:21,360
library this is a memory injection

841
00:29:21,360 --> 00:29:22,640
library and you can see on the right

842
00:29:22,640 --> 00:29:23,360
side how

843
00:29:23,360 --> 00:29:26,080
the assembly looks like for this library

844
00:29:26,080 --> 00:29:27,520
specifically this code

845
00:29:27,520 --> 00:29:29,760
all it does is uh it's a memory

846
00:29:29,760 --> 00:29:30,640
injection library

847
00:29:30,640 --> 00:29:34,159
so this takes the memory that the dll or

848
00:29:34,159 --> 00:29:34,640
whatever

849
00:29:34,640 --> 00:29:36,880
that it tries to inject into memory and

850
00:29:36,880 --> 00:29:39,360
it verifies its mz headers

851
00:29:39,360 --> 00:29:43,279
it's uh all these uh headers that

852
00:29:43,279 --> 00:29:45,039
the file is uh the file that they're

853
00:29:45,039 --> 00:29:47,679
trying to inject is really a pe image

854
00:29:47,679 --> 00:29:51,039
so if we so here for example what it

855
00:29:51,039 --> 00:29:51,360
does

856
00:29:51,360 --> 00:29:54,320
you see it moves uh it moves it takes

857
00:29:54,320 --> 00:29:56,480
image dot signature moves it to eax and

858
00:29:56,480 --> 00:29:58,320
compares it basically it checks that the

859
00:29:58,320 --> 00:30:00,399
header is okay and but if not

860
00:30:00,399 --> 00:30:03,279
then it goes here to the left side it uh

861
00:30:03,279 --> 00:30:04,880
calls the

862
00:30:04,880 --> 00:30:07,840
the setlist error api windows api with a

863
00:30:07,840 --> 00:30:08,399
value of

864
00:30:08,399 --> 00:30:12,880
0 c1h so if we want to reverse this file

865
00:30:12,880 --> 00:30:13,600
in a different

866
00:30:13,600 --> 00:30:15,200
if if we want to reverse this library in

867
00:30:15,200 --> 00:30:16,720
some different file we would

868
00:30:16,720 --> 00:30:19,039
clearly easily notice that this was

869
00:30:19,039 --> 00:30:20,799
memory module because we now know

870
00:30:20,799 --> 00:30:24,080
how many mojo looks like but we don't

871
00:30:24,080 --> 00:30:24,720
really know

872
00:30:24,720 --> 00:30:27,679
how we can use how we can contextualize

873
00:30:27,679 --> 00:30:28,559
this uh

874
00:30:28,559 --> 00:30:30,399
knowledge how we can crystallize this

875
00:30:30,399 --> 00:30:31,840
knowledge of how the

876
00:30:31,840 --> 00:30:34,080
library looks like into an into an

877
00:30:34,080 --> 00:30:36,080
effective role into a textual rule

878
00:30:36,080 --> 00:30:37,919
so we don't have to reverse each sample

879
00:30:37,919 --> 00:30:39,200
manually to really figure out that

880
00:30:39,200 --> 00:30:41,760
memory module is there

881
00:30:41,760 --> 00:30:44,399
so what we did at the integer is that we

882
00:30:44,399 --> 00:30:45,440
took all those

883
00:30:45,440 --> 00:30:48,559
libraries that we compiled in the compa

884
00:30:48,559 --> 00:30:50,960
in the compilation pipeline that i

885
00:30:50,960 --> 00:30:52,240
showed you earlier

886
00:30:52,240 --> 00:30:56,080
and we analyzed those files for

887
00:30:56,080 --> 00:30:59,519
um repeating binary patterns because

888
00:30:59,519 --> 00:31:01,200
in this example we always know that

889
00:31:01,200 --> 00:31:03,120
there will be a movie ecx

890
00:31:03,120 --> 00:31:05,760
0 c1 i mean there will always be this

891
00:31:05,760 --> 00:31:07,519
set last error api call and

892
00:31:07,519 --> 00:31:10,159
before that a move with a constant value

893
00:31:10,159 --> 00:31:10,960
so we

894
00:31:10,960 --> 00:31:13,440
were looking automatically for all those

895
00:31:13,440 --> 00:31:14,640
um

896
00:31:14,640 --> 00:31:16,320
repeating binary patterns between

897
00:31:16,320 --> 00:31:18,320
different versions and then we took

898
00:31:18,320 --> 00:31:19,039
those

899
00:31:19,039 --> 00:31:21,200
those specific uh binary patterns that

900
00:31:21,200 --> 00:31:22,720
matched between

901
00:31:22,720 --> 00:31:25,440
between each library because they would

902
00:31:25,440 --> 00:31:25,760
be

903
00:31:25,760 --> 00:31:28,559
very strong uh they would be very

904
00:31:28,559 --> 00:31:29,919
convenient for us to

905
00:31:29,919 --> 00:31:33,519
find the repeat in if in every uh

906
00:31:33,519 --> 00:31:35,760
in every version between each compiler

907
00:31:35,760 --> 00:31:38,240
and we created an automatic signature

908
00:31:38,240 --> 00:31:39,919
and we also open source all those

909
00:31:39,919 --> 00:31:41,519
signatures that we

910
00:31:41,519 --> 00:31:45,039
uh created so you could use them deploy

911
00:31:45,039 --> 00:31:45,600
them and

912
00:31:45,600 --> 00:31:48,720
hunt for malware yourself and these are

913
00:31:48,720 --> 00:31:51,200
results uh we had uh we found for

914
00:31:51,200 --> 00:31:52,399
example uh

915
00:31:52,399 --> 00:31:54,880
load detected lazarus files and load

916
00:31:54,880 --> 00:31:56,080
detected carbonac

917
00:31:56,080 --> 00:31:59,279
carbonac was using memory module

918
00:31:59,279 --> 00:32:01,120
lazarus used the improved reflective dll

919
00:32:01,120 --> 00:32:02,720
injection we saw the springs earlier

920
00:32:02,720 --> 00:32:04,480
and we were able to find them through uh

921
00:32:04,480 --> 00:32:06,000
code reviews through the

922
00:32:06,000 --> 00:32:08,080
those yara signatures which were built

923
00:32:08,080 --> 00:32:09,360
on binary patterns

924
00:32:09,360 --> 00:32:11,440
and we were not looking for lazarus or

925
00:32:11,440 --> 00:32:13,519
carbon or carbon like specifically these

926
00:32:13,519 --> 00:32:14,159
were just

927
00:32:14,159 --> 00:32:16,240
uh libraries these were just threat

928
00:32:16,240 --> 00:32:17,679
actors which used those

929
00:32:17,679 --> 00:32:20,720
uh libraries which was uh very nice for

930
00:32:20,720 --> 00:32:22,240
us because we weren't looking for

931
00:32:22,240 --> 00:32:26,080
apts or our uh for any specific family

932
00:32:26,080 --> 00:32:26,799
that is

933
00:32:26,799 --> 00:32:30,240
and we wanted this uh technique to

934
00:32:30,240 --> 00:32:32,320
to be applied at home as well with you

935
00:32:32,320 --> 00:32:33,279
don't really need

936
00:32:33,279 --> 00:32:35,600
you don't need a big engine such as ours

937
00:32:35,600 --> 00:32:36,480
to do this

938
00:32:36,480 --> 00:32:39,840
so we also published a blog into how uh

939
00:32:39,840 --> 00:32:42,960
you turn those uh patterns to spiny

940
00:32:42,960 --> 00:32:45,760
patterns manually into yara yourself so

941
00:32:45,760 --> 00:32:47,360
i invite you to check our blog

942
00:32:47,360 --> 00:32:49,679
and there will be and it will be much

943
00:32:49,679 --> 00:32:51,039
more technical than this talk

944
00:32:51,039 --> 00:32:53,440
it involves how you reverse engineer a

945
00:32:53,440 --> 00:32:55,039
library and figure out

946
00:32:55,039 --> 00:32:58,240
how you built a signature by yourself so

947
00:32:58,240 --> 00:32:59,840
you can deploy it

948
00:32:59,840 --> 00:33:04,240
and find the lazarus

949
00:33:04,880 --> 00:33:09,039
so it's uh it always down to

950
00:33:09,039 --> 00:33:10,960
what is the future for offensive

951
00:33:10,960 --> 00:33:12,480
security tools and

952
00:33:12,480 --> 00:33:14,159
the answer isn't simple it's really up

953
00:33:14,159 --> 00:33:16,399
to the community currently

954
00:33:16,399 --> 00:33:17,679
currently the solutions which are

955
00:33:17,679 --> 00:33:20,000
proposed in my opinion are very

956
00:33:20,000 --> 00:33:22,960
are pretty weak for example there is one

957
00:33:22,960 --> 00:33:26,159
solution a pretty popular one which uh

958
00:33:26,159 --> 00:33:28,960
which proposes that osts are put through

959
00:33:28,960 --> 00:33:31,440
some kind of vetting program like

960
00:33:31,440 --> 00:33:33,679
a friend brings a friend and this would

961
00:33:33,679 --> 00:33:34,559
uh

962
00:33:34,559 --> 00:33:38,159
this would make threat actors unable to

963
00:33:38,159 --> 00:33:39,200
really

964
00:33:39,200 --> 00:33:42,080
get those ost's and those isd would fall

965
00:33:42,080 --> 00:33:43,919
into wrong hands but the problem is

966
00:33:43,919 --> 00:33:44,480
there's

967
00:33:44,480 --> 00:33:46,559
one bad apple one by apple in this

968
00:33:46,559 --> 00:33:47,519
vending program

969
00:33:47,519 --> 00:33:50,320
and all those ost's will be released and

970
00:33:50,320 --> 00:33:51,679
threat actors will have them

971
00:33:51,679 --> 00:33:54,799
so this model is pretty fragile

972
00:33:54,799 --> 00:33:57,279
and there aren't that many solutions

973
00:33:57,279 --> 00:33:58,480
because right now

974
00:33:58,480 --> 00:34:00,559
mainly awareness is being promoted

975
00:34:00,559 --> 00:34:02,000
regarding this uh

976
00:34:02,000 --> 00:34:05,039
this ost issue and those who are opposed

977
00:34:05,039 --> 00:34:06,640
it are trying to

978
00:34:06,640 --> 00:34:09,760
really well convince the community that

979
00:34:09,760 --> 00:34:11,280
their approach that the status quo is

980
00:34:11,280 --> 00:34:12,159
fine nothing's

981
00:34:12,159 --> 00:34:14,159
nothing's bad i mean it's pretty benefit

982
00:34:14,159 --> 00:34:16,079
it's beneficial is what they claim

983
00:34:16,079 --> 00:34:18,639
so currently the battle for awareness is

984
00:34:18,639 --> 00:34:20,320
going on i

985
00:34:20,320 --> 00:34:23,119
also believe that we must consider roi

986
00:34:23,119 --> 00:34:25,520
uh when we're speaking about ost

987
00:34:25,520 --> 00:34:27,280
we shouldn't think about it as black and

988
00:34:27,280 --> 00:34:28,879
white we need to think about

989
00:34:28,879 --> 00:34:32,000
each category of ost and

990
00:34:32,000 --> 00:34:33,440
whether it is beneficial for the

991
00:34:33,440 --> 00:34:35,679
community or not for example memory

992
00:34:35,679 --> 00:34:37,199
injection libraries i believe

993
00:34:37,199 --> 00:34:40,159
are mostly beneficial for researchers

994
00:34:40,159 --> 00:34:40,719
because

995
00:34:40,719 --> 00:34:44,159
they they are they don't um

996
00:34:44,159 --> 00:34:48,399
they don't make the

997
00:34:48,399 --> 00:34:50,879
development uh process for the

998
00:34:50,879 --> 00:34:51,839
protractors

999
00:34:51,839 --> 00:34:54,239
more easy unlike tools which can be

1000
00:34:54,239 --> 00:34:55,199
deployed

1001
00:34:55,199 --> 00:34:57,920
as is fat actors really need to to

1002
00:34:57,920 --> 00:34:58,640
figure out

1003
00:34:58,640 --> 00:35:00,800
more stuff to invest more into

1004
00:35:00,800 --> 00:35:02,560
implementing uh into

1005
00:35:02,560 --> 00:35:04,960
incorporating libraries into in their

1006
00:35:04,960 --> 00:35:06,880
code and we saw that when they do it

1007
00:35:06,880 --> 00:35:07,920
lazily we can

1008
00:35:07,920 --> 00:35:11,920
find those libraries and another example

1009
00:35:11,920 --> 00:35:15,520
for a a good example for

1010
00:35:15,520 --> 00:35:17,839
for osts which are more harmful or c2

1011
00:35:17,839 --> 00:35:19,280
frameworks because they usually

1012
00:35:19,280 --> 00:35:21,680
aren't very educative they we have

1013
00:35:21,680 --> 00:35:22,480
already

1014
00:35:22,480 --> 00:35:25,680
so many dozens of them and i think even

1015
00:35:25,680 --> 00:35:29,200
hundreds and we don't really gain

1016
00:35:29,200 --> 00:35:32,880
new inf new insights by the release of

1017
00:35:32,880 --> 00:35:33,680
new

1018
00:35:33,680 --> 00:35:35,680
on new c2 frameworks and post

1019
00:35:35,680 --> 00:35:36,720
exploitation

1020
00:35:36,720 --> 00:35:39,520
frameworks so we must really consider

1021
00:35:39,520 --> 00:35:41,760
the roi for each category on

1022
00:35:41,760 --> 00:35:43,680
each library and we should not treat

1023
00:35:43,680 --> 00:35:45,760
osds as all the same

1024
00:35:45,760 --> 00:35:47,280
and perhaps we should think about this

1025
00:35:47,280 --> 00:35:49,280
when we are proposing solutions

1026
00:35:49,280 --> 00:35:51,040
that we shouldn't ban all of these but

1027
00:35:51,040 --> 00:35:52,560
we maybe need to think about

1028
00:35:52,560 --> 00:35:56,839
the publication of c2 frameworks or post

1029
00:35:56,839 --> 00:35:58,240
exploitation

1030
00:35:58,240 --> 00:36:01,119
finally i'd like to call for action um

1031
00:36:01,119 --> 00:36:03,440
if there are ost offers in the crowd

1032
00:36:03,440 --> 00:36:04,560
here today well

1033
00:36:04,560 --> 00:36:07,440
i would suggest you add uh fingerprints

1034
00:36:07,440 --> 00:36:09,119
into your ost projects so

1035
00:36:09,119 --> 00:36:12,240
defenders would be easy so defenders

1036
00:36:12,240 --> 00:36:13,280
would be able to

1037
00:36:13,280 --> 00:36:15,520
sign on those fingerprints and defender

1038
00:36:15,520 --> 00:36:18,079
networks for example this is a

1039
00:36:18,079 --> 00:36:19,839
tool that i built called the glory hook

1040
00:36:19,839 --> 00:36:22,000
it is a hooking

1041
00:36:22,000 --> 00:36:25,119
library for linux which allows you to

1042
00:36:25,119 --> 00:36:26,880
take two files and merge it

1043
00:36:26,880 --> 00:36:30,240
into one but the problem is is that this

1044
00:36:30,240 --> 00:36:32,160
library can be used offensively as a

1045
00:36:32,160 --> 00:36:33,920
pylon factor

1046
00:36:33,920 --> 00:36:36,960
so to offset that that threat i

1047
00:36:36,960 --> 00:36:39,920
added uh a string you can see here bro i

1048
00:36:39,920 --> 00:36:40,400
added

1049
00:36:40,400 --> 00:36:43,599
these symbols this string into the into

1050
00:36:43,599 --> 00:36:45,119
files which are generated by my

1051
00:36:45,119 --> 00:36:47,760
library so if it is used offensively

1052
00:36:47,760 --> 00:36:49,520
then defenders would be able

1053
00:36:49,520 --> 00:36:53,440
to inve to find those files more easier

1054
00:36:53,440 --> 00:36:55,359
they would be able to create a signature

1055
00:36:55,359 --> 00:36:56,560
or a yara signature

1056
00:36:56,560 --> 00:36:59,040
on those uh files which are created

1057
00:36:59,040 --> 00:37:00,240
through the project

1058
00:37:00,240 --> 00:37:02,320
and i doubt that fret actors will notice

1059
00:37:02,320 --> 00:37:03,440
this until

1060
00:37:03,440 --> 00:37:07,520
it's uh too late another

1061
00:37:07,520 --> 00:37:10,960
another uh suggestion is to turn

1062
00:37:10,960 --> 00:37:13,920
bigger ost projects into sponsorwear or

1063
00:37:13,920 --> 00:37:15,520
grace period because

1064
00:37:15,520 --> 00:37:18,079
if there comes a new version of your osd

1065
00:37:18,079 --> 00:37:18,800
project then

1066
00:37:18,800 --> 00:37:21,920
defenders signatures may break or start

1067
00:37:21,920 --> 00:37:22,800
working

1068
00:37:22,800 --> 00:37:25,520
so a grace period allows defenders to

1069
00:37:25,520 --> 00:37:26,480
readjust

1070
00:37:26,480 --> 00:37:28,400
and build a better and build new

1071
00:37:28,400 --> 00:37:30,400
signatures for your projects

1072
00:37:30,400 --> 00:37:32,720
and it is very and i think it is a

1073
00:37:32,720 --> 00:37:37,359
win-win for everybody

1074
00:37:37,359 --> 00:37:39,440
so finally i believe that a lot of

1075
00:37:39,440 --> 00:37:40,960
technique non-technical assessment is

1076
00:37:40,960 --> 00:37:41,599
required

1077
00:37:41,599 --> 00:37:43,440
we need to think of alternative models

1078
00:37:43,440 --> 00:37:44,640
such as

1079
00:37:44,640 --> 00:37:47,760
the vetting program models which are

1080
00:37:47,760 --> 00:37:49,040
different to this and we need to think

1081
00:37:49,040 --> 00:37:50,079
of incentives

1082
00:37:50,079 --> 00:37:53,280
for offers for ost offers to

1083
00:37:53,280 --> 00:37:55,040
go along with our solutions because

1084
00:37:55,040 --> 00:37:57,040
currently there are some advantages to

1085
00:37:57,040 --> 00:37:57,599
posting

1086
00:37:57,599 --> 00:37:59,680
to creating your ost framework because

1087
00:37:59,680 --> 00:38:01,839
it all it's uh

1088
00:38:01,839 --> 00:38:04,480
it's a proof that you have offensive

1089
00:38:04,480 --> 00:38:05,599
knowledge and

1090
00:38:05,599 --> 00:38:09,200
it helps with uh with finding a job

1091
00:38:09,200 --> 00:38:11,920
and it's fame you get a lot of github

1092
00:38:11,920 --> 00:38:13,359
stars and it's fun

1093
00:38:13,359 --> 00:38:15,599
but so we need to think of incentives to

1094
00:38:15,599 --> 00:38:18,880
convince ost offers to really understand

1095
00:38:18,880 --> 00:38:19,280
the

1096
00:38:19,280 --> 00:38:22,320
issues of uh publishing osts freely

1097
00:38:22,320 --> 00:38:23,839
and we need to think about the effects

1098
00:38:23,839 --> 00:38:26,000
of these models over those questions

1099
00:38:26,000 --> 00:38:27,200
that we raised earlier

1100
00:38:27,200 --> 00:38:29,520
as how we will be able to still support

1101
00:38:29,520 --> 00:38:31,280
independent researchers newcomers

1102
00:38:31,280 --> 00:38:34,960
and still hurt threat actors

1103
00:38:34,960 --> 00:38:38,079
finally uh we published the ost map

1104
00:38:38,079 --> 00:38:39,680
and we welcome you to create

1105
00:38:39,680 --> 00:38:41,440
contributions at

1106
00:38:41,440 --> 00:38:45,119
our github page at github.com and

1107
00:38:45,119 --> 00:38:48,320
we hope that our technique for hunting

1108
00:38:48,320 --> 00:38:50,480
ost libraries will be beneficial for

1109
00:38:50,480 --> 00:38:51,440
defenders

1110
00:38:51,440 --> 00:38:53,359
i'd like to thank you for attending my

1111
00:38:53,359 --> 00:38:55,119
talk my name is paul litwick

1112
00:38:55,119 --> 00:39:01,839
thank you very much good day

1113
00:39:03,200 --> 00:39:05,279
you

