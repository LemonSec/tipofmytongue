1
00:00:08,880 --> 00:00:09,840
hi everyone

2
00:00:09,840 --> 00:00:12,320
welcome to our session i'm here with

3
00:00:12,320 --> 00:00:13,599
alex buchtel

4
00:00:13,599 --> 00:00:16,079
alex and i want to share our research

5
00:00:16,079 --> 00:00:18,240
about small italian company

6
00:00:18,240 --> 00:00:20,480
that has been active for more than 5

7
00:00:20,480 --> 00:00:23,519
years providing services to attackers

8
00:00:23,519 --> 00:00:26,160
and helping them penetrate computer

9
00:00:26,160 --> 00:00:26,960
security

10
00:00:26,960 --> 00:00:30,560
using sophisticated tactics for evasions

11
00:00:30,560 --> 00:00:32,880
three months ago we revealed cloud ice

12
00:00:32,880 --> 00:00:34,000
operations

13
00:00:34,000 --> 00:00:37,360
the cloud eye exposure led to the cloudy

14
00:00:37,360 --> 00:00:38,559
surface suspension

15
00:00:38,559 --> 00:00:42,559
and flattening of the attack curve

16
00:00:42,559 --> 00:00:45,039
my name is ali olshtein i done this

17
00:00:45,039 --> 00:00:47,120
research with alexey

18
00:00:47,120 --> 00:00:48,719
as you can see we are both working at

19
00:00:48,719 --> 00:00:51,039
checkpoint but we do not work on the

20
00:00:51,039 --> 00:00:51,920
same team

21
00:00:51,920 --> 00:00:54,480
i am sitting in tel aviv while alexi is

22
00:00:54,480 --> 00:00:55,520
in minsk

23
00:00:55,520 --> 00:00:57,440
one thing we have in common is that we

24
00:00:57,440 --> 00:00:59,199
are both malware hunters

25
00:00:59,199 --> 00:01:02,239
on a daily basis i monitor thousands of

26
00:01:02,239 --> 00:01:03,520
suspicious files

27
00:01:03,520 --> 00:01:05,280
and most of my time you can find me

28
00:01:05,280 --> 00:01:07,520
playing inside of a sandbox looking at

29
00:01:07,520 --> 00:01:08,880
suspicious campaign

30
00:01:08,880 --> 00:01:11,360
and unique malwares i also write

31
00:01:11,360 --> 00:01:12,400
protections

32
00:01:12,400 --> 00:01:14,720
yar rules and behavior signature to

33
00:01:14,720 --> 00:01:16,400
detect new threats

34
00:01:16,400 --> 00:01:18,159
alex on the harder end is a

35
00:01:18,159 --> 00:01:19,759
multi-reverse engineer

36
00:01:19,759 --> 00:01:22,960
and explore much more in depth alex

37
00:01:22,960 --> 00:01:25,280
thanks sorry hello everybody my name is

38
00:01:25,280 --> 00:01:26,720
alexey bukhtev

39
00:01:26,720 --> 00:01:28,960
and as ari said i am a reverse engineer

40
00:01:28,960 --> 00:01:30,240
at checkpoint

41
00:01:30,240 --> 00:01:32,479
i research inside of malware with help

42
00:01:32,479 --> 00:01:34,640
of disassemblers debuggers and other

43
00:01:34,640 --> 00:01:35,680
tools

44
00:01:35,680 --> 00:01:38,640
i also work on macos simulation and

45
00:01:38,640 --> 00:01:40,799
develop own tools for malware research

46
00:01:40,799 --> 00:01:42,399
automation

47
00:01:42,399 --> 00:01:46,159
ari thank you alex today we want to

48
00:01:46,159 --> 00:01:46,880
present

49
00:01:46,880 --> 00:01:49,600
our success story how in the last three

50
00:01:49,600 --> 00:01:50,159
months

51
00:01:50,159 --> 00:01:52,399
we took down the top malicious dropper

52
00:01:52,399 --> 00:01:53,439
of the year

53
00:01:53,439 --> 00:01:55,360
you know we really enjoy detecting

54
00:01:55,360 --> 00:01:56,560
evasive malware

55
00:01:56,560 --> 00:01:59,200
but here it felt extremely awesome we

56
00:01:59,200 --> 00:02:00,079
uncovered

57
00:02:00,079 --> 00:02:02,240
the identity behind what was known as

58
00:02:02,240 --> 00:02:03,119
ghoul order

59
00:02:03,119 --> 00:02:06,479
which led to take down

60
00:02:07,040 --> 00:02:09,598
cloud ice exposure has resonated in the

61
00:02:09,598 --> 00:02:10,239
press

62
00:02:10,239 --> 00:02:13,440
as a result only two days after our

63
00:02:13,440 --> 00:02:14,560
publication

64
00:02:14,560 --> 00:02:16,800
plata announced on their website the

65
00:02:16,800 --> 00:02:18,879
suspension of their service

66
00:02:18,879 --> 00:02:22,080
only three days after our publication

67
00:02:22,080 --> 00:02:24,959
our telemetry shown a dramatic decrease

68
00:02:24,959 --> 00:02:26,000
in appearance

69
00:02:26,000 --> 00:02:30,400
of new ghoul loader clada attacks

70
00:02:30,400 --> 00:02:32,319
we can say that claudia made a fortune

71
00:02:32,319 --> 00:02:34,840
by selling their product to malicious

72
00:02:34,840 --> 00:02:36,000
actors

73
00:02:36,000 --> 00:02:38,640
if we do the math a cloud i plan to

74
00:02:38,640 --> 00:02:40,480
charge a minimum rate of

75
00:02:40,480 --> 00:02:43,519
100 bucks per month multiplied by

76
00:02:43,519 --> 00:02:47,040
5 000 customers lead us to estimate that

77
00:02:47,040 --> 00:02:48,239
they made at least

78
00:02:48,239 --> 00:02:51,200
five hundred thousand dollars but some

79
00:02:51,200 --> 00:02:52,160
monthly plan

80
00:02:52,160 --> 00:02:55,360
can cost up to 750 per month and some

81
00:02:55,360 --> 00:02:57,519
customers most likely use

82
00:02:57,519 --> 00:02:59,599
the service for multiple months

83
00:02:59,599 --> 00:03:01,120
therefore cloud eyes

84
00:03:01,120 --> 00:03:04,959
earnings were likely much higher

85
00:03:04,959 --> 00:03:07,920
we present the full proof of the direct

86
00:03:07,920 --> 00:03:09,440
connection between the

87
00:03:09,440 --> 00:03:11,519
good lord malware and the cloud eye

88
00:03:11,519 --> 00:03:14,560
protector a product sold and distributed

89
00:03:14,560 --> 00:03:17,599
by italian entrepreneurs

90
00:03:17,599 --> 00:03:19,920
guru law there is a dropper said

91
00:03:19,920 --> 00:03:22,159
download and decrypt malicious payloads

92
00:03:22,159 --> 00:03:23,040
such as

93
00:03:23,040 --> 00:03:26,720
agent tesla phone book renkos nanocore

94
00:03:26,720 --> 00:03:32,400
lucky bot azure and many many more

95
00:03:32,400 --> 00:03:35,280
even before our exposure their research

96
00:03:35,280 --> 00:03:36,879
community spoke all the time about

97
00:03:36,879 --> 00:03:38,080
google order

98
00:03:38,080 --> 00:03:40,480
alex also published a blog called thread

99
00:03:40,480 --> 00:03:42,640
actual migrating to the cloud

100
00:03:42,640 --> 00:03:46,080
google loader was everywhere here is a

101
00:03:46,080 --> 00:03:48,720
heat map of good loader in april may

102
00:03:48,720 --> 00:03:51,599
and as you can see it took part in

103
00:03:51,599 --> 00:03:55,040
attack all over the world

104
00:03:55,360 --> 00:03:57,920
our telemetry shown us a huge number of

105
00:03:57,920 --> 00:03:59,680
attack on a daily basis

106
00:03:59,680 --> 00:04:02,239
more than a hundred attack per day if

107
00:04:02,239 --> 00:04:04,239
you look closely at this graph you can

108
00:04:04,239 --> 00:04:04,640
see

109
00:04:04,640 --> 00:04:07,120
a decrease in attack on the weekend of

110
00:04:07,120 --> 00:04:08,400
course even

111
00:04:08,400 --> 00:04:10,239
attackers need to rest on the weekend

112
00:04:10,239 --> 00:04:14,159
and holidays

113
00:04:14,159 --> 00:04:16,320
we saw good loader convey different

114
00:04:16,320 --> 00:04:18,798
malware payload by different actors we

115
00:04:18,798 --> 00:04:20,959
saw samples of more than 20 malware

116
00:04:20,959 --> 00:04:23,120
families delivered by guru lawder

117
00:04:23,120 --> 00:04:25,280
mostly infostillers and remote

118
00:04:25,280 --> 00:04:28,240
administration tools

119
00:04:28,240 --> 00:04:30,400
google loader abused some compromised

120
00:04:30,400 --> 00:04:31,440
website but

121
00:04:31,440 --> 00:04:34,560
primarily use legitimate cloud storage

122
00:04:34,560 --> 00:04:35,360
services

123
00:04:35,360 --> 00:04:39,680
for example 72 of google order samples

124
00:04:39,680 --> 00:04:41,360
downloaded the encrypted malicious

125
00:04:41,360 --> 00:04:43,199
payload from google drive

126
00:04:43,199 --> 00:04:45,680
and six percent download them from one

127
00:04:45,680 --> 00:04:48,000
drive

128
00:04:48,160 --> 00:04:51,040
okay to explain how google the works we

129
00:04:51,040 --> 00:04:52,639
first need to explain

130
00:04:52,639 --> 00:04:55,680
what a packer is and why attackers use

131
00:04:55,680 --> 00:04:56,720
it

132
00:04:56,720 --> 00:04:59,440
currently most anti-viruses can detect

133
00:04:59,440 --> 00:05:01,199
malicious content only by static

134
00:05:01,199 --> 00:05:02,080
scanning

135
00:05:02,080 --> 00:05:03,840
the attacker are looking for a way to

136
00:05:03,840 --> 00:05:05,680
bypass the antivirus product

137
00:05:05,680 --> 00:05:08,560
so they are searching for a package also

138
00:05:08,560 --> 00:05:11,199
known as a crypter in a hacking forms

139
00:05:11,199 --> 00:05:13,600
in a classic packer the service takes

140
00:05:13,600 --> 00:05:14,479
the payload

141
00:05:14,479 --> 00:05:17,360
encrypt it and save it inside of another

142
00:05:17,360 --> 00:05:18,800
executable

143
00:05:18,800 --> 00:05:20,800
the packer is designed to unpack the

144
00:05:20,800 --> 00:05:22,800
payload and run the payload

145
00:05:22,800 --> 00:05:24,880
only when the file is in the target

146
00:05:24,880 --> 00:05:25,919
memory

147
00:05:25,919 --> 00:05:28,560
therefore when antivirus scans the file

148
00:05:28,560 --> 00:05:30,400
it can't see the actual malicious

149
00:05:30,400 --> 00:05:31,039
payload

150
00:05:31,039 --> 00:05:34,159
by static scanning

151
00:05:34,400 --> 00:05:36,479
and in the case of google order the

152
00:05:36,479 --> 00:05:38,160
victims always receive

153
00:05:38,160 --> 00:05:41,440
a small file usually no more than 100

154
00:05:41,440 --> 00:05:42,320
kilobyte

155
00:05:42,320 --> 00:05:45,120
it doesn't matter what was the size of

156
00:05:45,120 --> 00:05:47,360
the original executable file

157
00:05:47,360 --> 00:05:49,840
the original file is encrypted and

158
00:05:49,840 --> 00:05:50,639
stored

159
00:05:50,639 --> 00:05:54,080
in cloud services such as google drive

160
00:05:54,080 --> 00:05:57,199
this is very useful for manual actors

161
00:05:57,199 --> 00:06:00,319
because when malware researchers try to

162
00:06:00,319 --> 00:06:01,039
analyze

163
00:06:01,039 --> 00:06:03,759
a good loader sample they don't see the

164
00:06:03,759 --> 00:06:04,319
payload

165
00:06:04,319 --> 00:06:07,440
just a small downloader and nothing more

166
00:06:07,440 --> 00:06:10,160
alex can you explain the inside

167
00:06:10,160 --> 00:06:11,039
structure of

168
00:06:11,039 --> 00:06:14,960
good loader thanks sorry yes

169
00:06:14,960 --> 00:06:16,880
let's look deeper into google water

170
00:06:16,880 --> 00:06:19,680
sample it is built with visual basic six

171
00:06:19,680 --> 00:06:22,479
compiler and consists of two parts

172
00:06:22,479 --> 00:06:24,639
one of them is a small decrypter but

173
00:06:24,639 --> 00:06:26,080
heavily obfuscated

174
00:06:26,080 --> 00:06:28,319
and hidden among useless instructions

175
00:06:28,319 --> 00:06:30,639
and a lot of conditional jumps

176
00:06:30,639 --> 00:06:33,199
the second part is a shell code which is

177
00:06:33,199 --> 00:06:35,280
stored in encrypted form

178
00:06:35,280 --> 00:06:37,280
all the gloader's functionality is

179
00:06:37,280 --> 00:06:39,600
implemented in this shell code

180
00:06:39,600 --> 00:06:42,240
it performs virtual environment checks

181
00:06:42,240 --> 00:06:44,000
prevents debugger from attaching and

182
00:06:44,000 --> 00:06:44,960
tracing

183
00:06:44,960 --> 00:06:47,600
and in a newly created process the

184
00:06:47,600 --> 00:06:48,319
shellcode

185
00:06:48,319 --> 00:06:50,800
downloads the crypts and executes the

186
00:06:50,800 --> 00:06:52,560
payload

187
00:06:52,560 --> 00:06:55,039
this payload even may not be dropped to

188
00:06:55,039 --> 00:06:56,240
the hard disk and

189
00:06:56,240 --> 00:07:00,319
exist only in memory at first glance

190
00:07:00,319 --> 00:07:03,360
this looks like useless vb6 application

191
00:07:03,360 --> 00:07:05,440
but with a huge amount of data in the

192
00:07:05,440 --> 00:07:07,120
code section

193
00:07:07,120 --> 00:07:09,520
which is not automatically recognized as

194
00:07:09,520 --> 00:07:10,560
code

195
00:07:10,560 --> 00:07:12,800
this data contains a poscated shell code

196
00:07:12,800 --> 00:07:15,039
decrypter and the encrypted shell code

197
00:07:15,039 --> 00:07:16,880
itself

198
00:07:16,880 --> 00:07:20,240
alex what cause ida to fail parsing the

199
00:07:20,240 --> 00:07:22,400
code section

200
00:07:22,400 --> 00:07:24,800
there are several reasons let's look at

201
00:07:24,800 --> 00:07:26,080
this screenshot

202
00:07:26,080 --> 00:07:28,240
this is a manually analyzed chunk of the

203
00:07:28,240 --> 00:07:30,000
shellcode decryptor

204
00:07:30,000 --> 00:07:32,240
as you can see it is a mix of junk

205
00:07:32,240 --> 00:07:33,039
instructions

206
00:07:33,039 --> 00:07:35,680
conditional jumps and random bytes that

207
00:07:35,680 --> 00:07:38,560
actually make either crazy

208
00:07:38,560 --> 00:07:40,720
on this screenshot you see what happens

209
00:07:40,720 --> 00:07:42,560
when ida tries to analyze

210
00:07:42,560 --> 00:07:45,120
the same chunk automatically invalid

211
00:07:45,120 --> 00:07:47,280
instructions and jumps in the middle of

212
00:07:47,280 --> 00:07:48,639
instruction

213
00:07:48,639 --> 00:07:50,960
but ida even doesn't know where this

214
00:07:50,960 --> 00:07:53,360
code chunk starts

215
00:07:53,360 --> 00:07:55,520
this is because some gmp instructions

216
00:07:55,520 --> 00:07:57,440
are afforcated as well

217
00:07:57,440 --> 00:08:00,000
the gmp address is not stored explicitly

218
00:08:00,000 --> 00:08:02,720
and is calculated dynamically

219
00:08:02,720 --> 00:08:05,039
also the push pass rate combination can

220
00:08:05,039 --> 00:08:08,319
be used instead of gmp instruction

221
00:08:08,319 --> 00:08:11,039
but it can be debugged for example we

222
00:08:11,039 --> 00:08:12,000
can set up some

223
00:08:12,000 --> 00:08:15,280
breakpoint can we of course

224
00:08:15,280 --> 00:08:17,759
but dynamic analysis is also hard for

225
00:08:17,759 --> 00:08:20,240
unprepared analyst in this case

226
00:08:20,240 --> 00:08:22,720
to prevent dynamic analysis gloader uses

227
00:08:22,720 --> 00:08:24,639
some anti-debugging tricks

228
00:08:24,639 --> 00:08:27,120
in this code part the malware hides the

229
00:08:27,120 --> 00:08:28,960
main thread from the debugger

230
00:08:28,960 --> 00:08:30,960
this leads the debugged application to

231
00:08:30,960 --> 00:08:33,839
crash on any breakpoint hit

232
00:08:33,839 --> 00:08:36,159
gloader also prevents the debugger from

233
00:08:36,159 --> 00:08:38,080
attaching to the running process

234
00:08:38,080 --> 00:08:40,880
by hooking the dbg ui remote break-in

235
00:08:40,880 --> 00:08:41,279
and

236
00:08:41,279 --> 00:08:44,800
dbg breakpoint functions

237
00:08:44,800 --> 00:08:48,000
uh our next task is to decrypt the shell

238
00:08:48,000 --> 00:08:48,720
code

239
00:08:48,720 --> 00:08:50,959
it is encrypted with only four bytes or

240
00:08:50,959 --> 00:08:52,240
key but

241
00:08:52,240 --> 00:08:54,000
the decryption key is calculated

242
00:08:54,000 --> 00:08:56,320
dynamically and the decrypter contains a

243
00:08:56,320 --> 00:08:58,480
lot of junk code and random bytes

244
00:08:58,480 --> 00:09:00,959
therefore there is no way to cut the key

245
00:09:00,959 --> 00:09:04,160
with yara or regular expression

246
00:09:04,160 --> 00:09:06,160
we thought about how to decrypt the

247
00:09:06,160 --> 00:09:08,320
shellcode statically if we can't extract

248
00:09:08,320 --> 00:09:09,920
the decryption key

249
00:09:09,920 --> 00:09:12,640
the challenges include the shellcode is

250
00:09:12,640 --> 00:09:15,040
afforcated and randomized as well

251
00:09:15,040 --> 00:09:18,800
and the shellcode constantly evolves

252
00:09:18,800 --> 00:09:21,200
if we found some code pattern in one

253
00:09:21,200 --> 00:09:22,240
sample

254
00:09:22,240 --> 00:09:24,160
this part of the code may look very

255
00:09:24,160 --> 00:09:26,959
different in the newer sample

256
00:09:26,959 --> 00:09:29,760
so it is possible to somehow guess the

257
00:09:29,760 --> 00:09:32,160
shellcode decryption key

258
00:09:32,160 --> 00:09:34,480
the answer is yes we have just told you

259
00:09:34,480 --> 00:09:36,000
that the shellcode is encrypted

260
00:09:36,000 --> 00:09:38,720
with only four bytes or key therefore to

261
00:09:38,720 --> 00:09:40,640
determine the key we need to find

262
00:09:40,640 --> 00:09:42,959
eight bytes length sequence which is

263
00:09:42,959 --> 00:09:45,680
present in the shell code of each sample

264
00:09:45,680 --> 00:09:48,160
we know that every shell code has a url

265
00:09:48,160 --> 00:09:48,800
inside

266
00:09:48,800 --> 00:09:51,600
therefore we can use http sequence to

267
00:09:51,600 --> 00:09:52,640
find the key

268
00:09:52,640 --> 00:09:55,920
and how it works we take 4 bytes of the

269
00:09:55,920 --> 00:09:57,200
encrypted shellcode

270
00:09:57,200 --> 00:10:00,880
xor it with http and we get a possible

271
00:10:00,880 --> 00:10:01,760
key

272
00:10:01,760 --> 00:10:04,240
then we sort the key with the next four

273
00:10:04,240 --> 00:10:06,000
bytes and compare with

274
00:10:06,000 --> 00:10:08,560
s column slash slash to validate the key

275
00:10:08,560 --> 00:10:10,720
and we continue until we get the valid

276
00:10:10,720 --> 00:10:11,680
key

277
00:10:11,680 --> 00:10:14,240
we saw this approach used by other

278
00:10:14,240 --> 00:10:15,200
researchers

279
00:10:15,200 --> 00:10:17,440
but a new version of gloader shellcode

280
00:10:17,440 --> 00:10:19,920
we will not find urls in plain text

281
00:10:19,920 --> 00:10:22,720
because they are additionally encrypted

282
00:10:22,720 --> 00:10:24,880
therefore it's no longer possible to use

283
00:10:24,880 --> 00:10:27,920
the http pattern for decryption

284
00:10:27,920 --> 00:10:30,640
please also note this url that we found

285
00:10:30,640 --> 00:10:32,320
in many samples

286
00:10:32,320 --> 00:10:35,040
my url slash my file dot bin we will

287
00:10:35,040 --> 00:10:35,680
need it in

288
00:10:35,680 --> 00:10:39,440
in a few minutes however we managed to

289
00:10:39,440 --> 00:10:39,839
find

290
00:10:39,839 --> 00:10:42,560
a few other text strings except urls

291
00:10:42,560 --> 00:10:44,240
that are present inside of

292
00:10:44,240 --> 00:10:46,880
encrypted shell shellcode in all samples

293
00:10:46,880 --> 00:10:47,279
this

294
00:10:47,279 --> 00:10:49,279
allowed us to statically decrypt the

295
00:10:49,279 --> 00:10:51,519
shellcode in every gloader sample

296
00:10:51,519 --> 00:10:53,600
and occasionally in other samples

297
00:10:53,600 --> 00:10:55,600
protected with another product from the

298
00:10:55,600 --> 00:10:57,120
same developer

299
00:10:57,120 --> 00:10:59,680
in one such sample we found a unicode

300
00:10:59,680 --> 00:11:01,360
plain text string

301
00:11:01,360 --> 00:11:05,440
dark eye protector the dark eye samples

302
00:11:05,440 --> 00:11:07,680
have a lot in common with the gloader

303
00:11:07,680 --> 00:11:08,720
samples

304
00:11:08,720 --> 00:11:11,440
they are both compiled in visual basic

305
00:11:11,440 --> 00:11:12,160
contain

306
00:11:12,160 --> 00:11:14,800
a shell code encrypted with a four bytes

307
00:11:14,800 --> 00:11:15,680
or key

308
00:11:15,680 --> 00:11:18,399
and have similarities in their code for

309
00:11:18,399 --> 00:11:19,120
example

310
00:11:19,120 --> 00:11:21,120
in this screenshot you see the payload

311
00:11:21,120 --> 00:11:22,320
decryption functions

312
00:11:22,320 --> 00:11:25,200
in google order and in dark eye samples

313
00:11:25,200 --> 00:11:25,920
and they are

314
00:11:25,920 --> 00:11:28,640
almost completely the same this allowed

315
00:11:28,640 --> 00:11:29,680
us to assume that

316
00:11:29,680 --> 00:11:32,079
gloader and dark eye are products from

317
00:11:32,079 --> 00:11:33,760
the same developer

318
00:11:33,760 --> 00:11:36,320
ari could you tell us a bit more about

319
00:11:36,320 --> 00:11:37,200
dark eye

320
00:11:37,200 --> 00:11:39,680
what interesting did you find about it

321
00:11:39,680 --> 00:11:40,320
yes

322
00:11:40,320 --> 00:11:43,160
we found dakai protector advertised in

323
00:11:43,160 --> 00:11:45,360
2014 on hacking forms

324
00:11:45,360 --> 00:11:47,600
as a legitimate security product for

325
00:11:47,600 --> 00:11:48,880
protecting files

326
00:11:48,880 --> 00:11:51,120
against reverse engineering the ad

327
00:11:51,120 --> 00:11:52,959
contains the address of the

328
00:11:52,959 --> 00:11:57,519
the developer website security code eu

329
00:11:57,519 --> 00:11:59,600
however we also found earlier

330
00:11:59,600 --> 00:12:00,560
advertisement

331
00:12:00,560 --> 00:12:03,279
in which dakai was described as

332
00:12:03,279 --> 00:12:05,120
providing protections against

333
00:12:05,120 --> 00:12:06,639
antiviruses

334
00:12:06,639 --> 00:12:10,000
those ads were posted by user sony kicho

335
00:12:10,000 --> 00:12:13,399
with this contact email xbx

336
00:12:13,399 --> 00:12:16,560
hotmail.it right let's remember this

337
00:12:16,560 --> 00:12:18,160
email because we will need it a bit

338
00:12:18,160 --> 00:12:19,600
later

339
00:12:19,600 --> 00:12:21,440
well let's look at the security code

340
00:12:21,440 --> 00:12:24,720
website indeed it is connected to dark i

341
00:12:24,720 --> 00:12:27,200
however currently this website focuses

342
00:12:27,200 --> 00:12:28,560
on another product

343
00:12:28,560 --> 00:12:31,360
cloud i the company selling cloud i

344
00:12:31,360 --> 00:12:33,360
pretends to be legitimate

345
00:12:33,360 --> 00:12:36,240
as set on their website cloud i is

346
00:12:36,240 --> 00:12:37,600
security software

347
00:12:37,600 --> 00:12:39,360
intended for protecting windows

348
00:12:39,360 --> 00:12:41,440
applications from cracking tampering

349
00:12:41,440 --> 00:12:44,480
debugging disassembling and dumping

350
00:12:44,480 --> 00:12:46,639
the website contains youtube video

351
00:12:46,639 --> 00:12:49,360
tutorials on how to use cloud i

352
00:12:49,360 --> 00:12:52,399
in one of the videos we noticed the url

353
00:12:52,399 --> 00:12:55,519
my url slash myfile.bin

354
00:12:55,519 --> 00:12:57,519
that we have already seen in gloader

355
00:12:57,519 --> 00:12:58,560
samples

356
00:12:58,560 --> 00:13:00,800
the videos contained instructions on how

357
00:13:00,800 --> 00:13:03,200
to encrypt and upload payloads to cloud

358
00:13:03,200 --> 00:13:04,560
drives such as

359
00:13:04,560 --> 00:13:07,760
google drive at this moment we were

360
00:13:07,760 --> 00:13:10,160
almost sure that cloud i is related to

361
00:13:10,160 --> 00:13:11,519
google order

362
00:13:11,519 --> 00:13:14,079
to confirm our theory we obtained cloud

363
00:13:14,079 --> 00:13:15,360
eye protector

364
00:13:15,360 --> 00:13:17,839
we built several samples with cloud eye

365
00:13:17,839 --> 00:13:19,600
using different applications such as

366
00:13:19,600 --> 00:13:21,200
windows calculator and

367
00:13:21,200 --> 00:13:24,320
notepad as sources then we checked

368
00:13:24,320 --> 00:13:27,200
the resulting samples with our products

369
00:13:27,200 --> 00:13:28,399
great emulation

370
00:13:28,399 --> 00:13:31,600
and in our malware laboratory

371
00:13:31,600 --> 00:13:34,560
we got the expected verdict the cloud i

372
00:13:34,560 --> 00:13:36,480
produced samples were detected

373
00:13:36,480 --> 00:13:40,079
as ghoul order malware okay

374
00:13:40,079 --> 00:13:42,560
sound really suspicious but can you be

375
00:13:42,560 --> 00:13:43,839
100 sure

376
00:13:43,839 --> 00:13:46,399
using only automatic tools to be

377
00:13:46,399 --> 00:13:48,000
completely sure that cloud

378
00:13:48,000 --> 00:13:50,240
eye produces samples that universally

379
00:13:50,240 --> 00:13:52,160
acknowledges glow their malware

380
00:13:52,160 --> 00:13:54,320
we decided to analyze it manually and

381
00:13:54,320 --> 00:13:56,320
compare with the real gloater sample

382
00:13:56,320 --> 00:13:58,000
that we saw in the wild

383
00:13:58,000 --> 00:14:00,480
for the experiment we used a good water

384
00:14:00,480 --> 00:14:02,880
sample that drops from book malware

385
00:14:02,880 --> 00:14:04,800
both samples contained shellcode

386
00:14:04,800 --> 00:14:06,800
encrypted with different four bytes or

387
00:14:06,800 --> 00:14:07,839
keys

388
00:14:07,839 --> 00:14:10,560
first we decrypted the shellcodes in

389
00:14:10,560 --> 00:14:12,480
both cases we saw the same code

390
00:14:12,480 --> 00:14:14,000
randomization technique

391
00:14:14,000 --> 00:14:16,000
the shellcode starts from a random stop

392
00:14:16,000 --> 00:14:18,000
and is propended with a jump over this

393
00:14:18,000 --> 00:14:18,800
stop

394
00:14:18,800 --> 00:14:21,360
in both samples the same space on the

395
00:14:21,360 --> 00:14:22,079
stack

396
00:14:22,079 --> 00:14:24,240
is reserved for structure with global

397
00:14:24,240 --> 00:14:26,079
variables

398
00:14:26,079 --> 00:14:28,079
variables in the structure have the same

399
00:14:28,079 --> 00:14:30,720
offset most of the code chunks differ

400
00:14:30,720 --> 00:14:32,720
only due to the applied

401
00:14:32,720 --> 00:14:35,760
randomization techniques the useful code

402
00:14:35,760 --> 00:14:39,199
is the same in both samples functions

403
00:14:39,199 --> 00:14:39,680
differ

404
00:14:39,680 --> 00:14:43,440
only in randomized part the urls for

405
00:14:43,440 --> 00:14:45,120
downloading the payload and

406
00:14:45,120 --> 00:14:47,519
the joined file in the new version of

407
00:14:47,519 --> 00:14:49,120
gloader shellcode

408
00:14:49,120 --> 00:14:51,519
are additionally encrypted after

409
00:14:51,519 --> 00:14:53,440
extracting the encryption keys

410
00:14:53,440 --> 00:14:56,160
we can easily find and decrypt urls in

411
00:14:56,160 --> 00:14:57,519
both samples

412
00:14:57,519 --> 00:14:59,440
we can therefore conclude that the

413
00:14:59,440 --> 00:15:02,079
samples are almost identical and differ

414
00:15:02,079 --> 00:15:04,000
only due to the applied

415
00:15:04,000 --> 00:15:06,880
code randomization techniques alex what

416
00:15:06,880 --> 00:15:08,399
is the second url

417
00:15:08,399 --> 00:15:12,079
for join file good question ari

418
00:15:12,079 --> 00:15:14,480
this is generally used as a decoy for

419
00:15:14,480 --> 00:15:16,160
example the main payload can be

420
00:15:16,160 --> 00:15:18,480
form booking for stealer but gloader

421
00:15:18,480 --> 00:15:20,959
also downloads a legitimate file

422
00:15:20,959 --> 00:15:23,360
let's say adobe installer so that it

423
00:15:23,360 --> 00:15:25,920
looks as benign software if you run it

424
00:15:25,920 --> 00:15:27,279
by default this url

425
00:15:27,279 --> 00:15:30,639
is set to my url myfile.bin that's why

426
00:15:30,639 --> 00:15:34,399
we saw this url in many samples

427
00:15:34,399 --> 00:15:36,800
the four samples that are universally

428
00:15:36,800 --> 00:15:38,800
acknowledged as gloader malware are

429
00:15:38,800 --> 00:15:41,120
produced by cloudeye protector

430
00:15:41,120 --> 00:15:44,639
which is a product of securitycode.eu

431
00:15:44,639 --> 00:15:46,959
cloudeye's predecessor is dark eye

432
00:15:46,959 --> 00:15:47,839
protector

433
00:15:47,839 --> 00:15:50,000
that was sold on the same website before

434
00:15:50,000 --> 00:15:51,519
cloudeye

435
00:15:51,519 --> 00:15:54,000
let's now try to understand who are the

436
00:15:54,000 --> 00:15:54,959
people behind

437
00:15:54,959 --> 00:15:58,720
cloud eye and dark eye as stated before

438
00:15:58,720 --> 00:16:01,519
we found dark eye protector advertised

439
00:16:01,519 --> 00:16:02,720
on hack forums

440
00:16:02,720 --> 00:16:06,120
we also found an archived website

441
00:16:06,120 --> 00:16:07,600
darkiecrypter.in

442
00:16:07,600 --> 00:16:11,360
that was selling dark i this is how we

443
00:16:11,360 --> 00:16:12,320
got the nicknames

444
00:16:12,320 --> 00:16:15,519
sony cuccio xbx sebino

445
00:16:15,519 --> 00:16:17,519
and the mail address connected with two

446
00:16:17,519 --> 00:16:20,160
of those names

447
00:16:20,160 --> 00:16:22,480
we also found two more email addresses

448
00:16:22,480 --> 00:16:24,320
in a leaked email database

449
00:16:24,320 --> 00:16:26,240
that allowed us to connect all the

450
00:16:26,240 --> 00:16:28,560
nicknames together

451
00:16:28,560 --> 00:16:31,440
so we found three avatars and three

452
00:16:31,440 --> 00:16:34,160
email addresses used by the same person

453
00:16:34,160 --> 00:16:37,360
but who is it we accidentally found one

454
00:16:37,360 --> 00:16:39,600
more leaked document with names and

455
00:16:39,600 --> 00:16:42,240
email addresses of italian citizens

456
00:16:42,240 --> 00:16:44,720
this pdf contained the email address

457
00:16:44,720 --> 00:16:45,759
xcbx

458
00:16:45,759 --> 00:16:49,120
hotmail it and the name sebastiano

459
00:16:49,120 --> 00:16:51,199
dragna

460
00:16:51,199 --> 00:16:53,519
the same name we can find in contact

461
00:16:53,519 --> 00:16:57,839
details on the securitycode.eu website

462
00:16:57,839 --> 00:17:00,000
let's return back to other websites

463
00:17:00,000 --> 00:17:03,199
where dark i was being sold

464
00:17:03,199 --> 00:17:05,520
the websites are currently offline

465
00:17:05,520 --> 00:17:07,599
therefore we used web archive

466
00:17:07,599 --> 00:17:10,000
both websites were selling dark eye

467
00:17:10,000 --> 00:17:10,720
protector

468
00:17:10,720 --> 00:17:13,520
at different times in the websites we

469
00:17:13,520 --> 00:17:14,959
see the description of

470
00:17:14,959 --> 00:17:17,199
a lot of malicious features such as

471
00:17:17,199 --> 00:17:18,000
inject custom

472
00:17:18,000 --> 00:17:21,439
process height file persistence bypass

473
00:17:21,439 --> 00:17:23,919
kaspersky internet security and fully

474
00:17:23,919 --> 00:17:26,319
undetectable for anti-viruses

475
00:17:26,319 --> 00:17:28,799
there is also description on how to use

476
00:17:28,799 --> 00:17:29,360
it with

477
00:17:29,360 --> 00:17:32,400
remote access trojans

478
00:17:32,400 --> 00:17:35,280
so on the one hand there is security

479
00:17:35,280 --> 00:17:36,160
code

480
00:17:36,160 --> 00:17:37,840
the company that pretends to be

481
00:17:37,840 --> 00:17:40,480
legitimate selling cloud as service to

482
00:17:40,480 --> 00:17:41,120
protect

483
00:17:41,120 --> 00:17:43,760
applications from cracking and stating

484
00:17:43,760 --> 00:17:44,880
that malicious use

485
00:17:44,880 --> 00:17:47,679
is prohibited behind this company there

486
00:17:47,679 --> 00:17:49,440
are two real people

487
00:17:49,440 --> 00:17:52,559
dragno sebastiana and ivano mancini

488
00:17:52,559 --> 00:17:54,960
on the other hand there are avatars of

489
00:17:54,960 --> 00:17:56,240
dragon sebastiana

490
00:17:56,240 --> 00:17:59,360
sonikucio xbx sebino

491
00:17:59,360 --> 00:18:01,360
that were selling dark eye to cyber

492
00:18:01,360 --> 00:18:02,400
criminals and

493
00:18:02,400 --> 00:18:05,440
advertising malicious features of

494
00:18:05,440 --> 00:18:08,240
dark i on two other websites and hacking

495
00:18:08,240 --> 00:18:09,600
forums

496
00:18:09,600 --> 00:18:12,559
the question is did the creators of

497
00:18:12,559 --> 00:18:13,360
cloud i

498
00:18:13,360 --> 00:18:16,320
know that it was generally used by cyber

499
00:18:16,320 --> 00:18:17,679
criminals

500
00:18:17,679 --> 00:18:20,720
ari could you tell us what happened next

501
00:18:20,720 --> 00:18:24,000
after we published our research

502
00:18:24,000 --> 00:18:27,360
so on june 8th we publish our findings

503
00:18:27,360 --> 00:18:29,600
what the research community thought was

504
00:18:29,600 --> 00:18:31,840
google order actually turns out to be

505
00:18:31,840 --> 00:18:33,120
cloud eye

506
00:18:33,120 --> 00:18:36,320
outwardly a legitimate company in our

507
00:18:36,320 --> 00:18:37,120
publication

508
00:18:37,120 --> 00:18:39,760
we presented the conclusive evidence

509
00:18:39,760 --> 00:18:41,280
that google order is

510
00:18:41,280 --> 00:18:45,440
claude our publication gets some

511
00:18:45,440 --> 00:18:46,160
attention

512
00:18:46,160 --> 00:18:48,960
and was translated to many languages

513
00:18:48,960 --> 00:18:50,480
even to italian

514
00:18:50,480 --> 00:18:53,679
indeed it also surprised us that behind

515
00:18:53,679 --> 00:18:56,320
as a common dropper is so-called

516
00:18:56,320 --> 00:18:57,679
legitimate company

517
00:18:57,679 --> 00:19:00,080
that made a fortune by selling their

518
00:19:00,080 --> 00:19:04,320
evasion techniques to malicious actors

519
00:19:04,320 --> 00:19:06,880
just two days after our publication

520
00:19:06,880 --> 00:19:09,039
claudia announced on their website

521
00:19:09,039 --> 00:19:12,400
the service was suspended the

522
00:19:12,400 --> 00:19:15,760
evidence was was so solid that they

523
00:19:15,760 --> 00:19:16,559
could not

524
00:19:16,559 --> 00:19:19,440
deny the direct connection to their

525
00:19:19,440 --> 00:19:20,480
company

526
00:19:20,480 --> 00:19:23,520
but don't get your hopes up they have

527
00:19:23,520 --> 00:19:25,919
shown no sign of regret and are

528
00:19:25,919 --> 00:19:26,880
definitely

529
00:19:26,880 --> 00:19:30,160
not taking any responsibility instead

530
00:19:30,160 --> 00:19:32,960
there is just a vague implication that

531
00:19:32,960 --> 00:19:36,799
their platform was misused

532
00:19:37,120 --> 00:19:40,080
as we presented in the introduction less

533
00:19:40,080 --> 00:19:40,799
than a

534
00:19:40,799 --> 00:19:42,880
day after cloudy service suspended

535
00:19:42,880 --> 00:19:43,840
suspension

536
00:19:43,840 --> 00:19:46,720
our telemetry shown a dramatic decrease

537
00:19:46,720 --> 00:19:49,280
in appearance of new goo loader

538
00:19:49,280 --> 00:19:52,320
slash cloud attacks

539
00:19:52,320 --> 00:19:54,960
the creator of cloudeye connect us and

540
00:19:54,960 --> 00:19:56,880
try to justify themselves

541
00:19:56,880 --> 00:19:59,440
they send us a long letter approximately

542
00:19:59,440 --> 00:20:00,720
800 words

543
00:20:00,720 --> 00:20:03,120
in length they say that they have

544
00:20:03,120 --> 00:20:03,760
suffered

545
00:20:03,760 --> 00:20:06,000
various abuse perpetrated with their

546
00:20:06,000 --> 00:20:07,760
security software

547
00:20:07,760 --> 00:20:10,400
and also claim that their regular

548
00:20:10,400 --> 00:20:11,200
customers

549
00:20:11,200 --> 00:20:13,679
are small or medium software developer

550
00:20:13,679 --> 00:20:14,400
groups

551
00:20:14,400 --> 00:20:18,240
who need protection for their code

552
00:20:18,240 --> 00:20:22,159
and until june 10 20 2020 when

553
00:20:22,159 --> 00:20:25,039
cloud i announced their suspension

554
00:20:25,039 --> 00:20:26,480
checkpoint products were

555
00:20:26,480 --> 00:20:28,960
stopping hundreds of attack using cloud

556
00:20:28,960 --> 00:20:30,880
eye on a daily basis

557
00:20:30,880 --> 00:20:32,880
we blocked the cloud i sample at the

558
00:20:32,880 --> 00:20:34,799
stage of detecting the dropper

559
00:20:34,799 --> 00:20:37,840
without waiting to check the payload so

560
00:20:37,840 --> 00:20:41,360
we ask ourselves maybe we were wrong

561
00:20:41,360 --> 00:20:44,799
and there is a possibility of legitimate

562
00:20:44,799 --> 00:20:46,720
use of cloud eye

563
00:20:46,720 --> 00:20:50,400
we decide to give cloudize the benefits

564
00:20:50,400 --> 00:20:51,360
of the dot

565
00:20:51,360 --> 00:20:55,520
and run a check on cloud eye payloads

566
00:20:55,520 --> 00:21:00,000
for this experiment we download 5091

567
00:21:00,000 --> 00:21:01,280
unique cloud eye

568
00:21:01,280 --> 00:21:04,320
samples from virustotal service

569
00:21:04,320 --> 00:21:07,760
for every one of the 5000 samples

570
00:21:07,760 --> 00:21:10,880
we decrypt the url and download

571
00:21:10,880 --> 00:21:14,960
the payloads we managed to extract and

572
00:21:14,960 --> 00:21:17,320
decrypt

573
00:21:17,320 --> 00:21:19,440
3255 unique payload

574
00:21:19,440 --> 00:21:21,760
as some of the cloudy samples lead to

575
00:21:21,760 --> 00:21:23,760
the same payload

576
00:21:23,760 --> 00:21:27,360
the analysis result was conclusive

577
00:21:27,360 --> 00:21:31,200
with 99 or

578
00:21:31,200 --> 00:21:33,919
of the sample detected as carrying

579
00:21:33,919 --> 00:21:35,440
malicious payload

580
00:21:35,440 --> 00:21:39,520
intended for criminal use

581
00:21:39,679 --> 00:21:42,400
to classify the payload we use jar rules

582
00:21:42,400 --> 00:21:42,799
for

583
00:21:42,799 --> 00:21:44,559
non-malware families and sandbox

584
00:21:44,559 --> 00:21:46,799
simulation and this is

585
00:21:46,799 --> 00:21:50,559
this is a result the payload for almost

586
00:21:50,559 --> 00:21:53,840
all cloud i files were detected as

587
00:21:53,840 --> 00:21:54,960
malicious

588
00:21:54,960 --> 00:21:57,440
on this chart you can see number of

589
00:21:57,440 --> 00:21:58,960
cloud eye samples

590
00:21:58,960 --> 00:22:01,760
and the corresponding malware families

591
00:22:01,760 --> 00:22:02,400
ari

592
00:22:02,400 --> 00:22:05,520
what is this green stick on the chart

593
00:22:05,520 --> 00:22:08,400
this is for benign files only three

594
00:22:08,400 --> 00:22:09,120
files

595
00:22:09,120 --> 00:22:11,200
were not detected as downloading

596
00:22:11,200 --> 00:22:13,360
malicious payloads

597
00:22:13,360 --> 00:22:16,880
and how many b9 pilots also three

598
00:22:16,880 --> 00:22:18,880
now let's look on these three cloud

599
00:22:18,880 --> 00:22:20,159
examples

600
00:22:20,159 --> 00:22:22,559
they communicate the same host and

601
00:22:22,559 --> 00:22:23,520
download

602
00:22:23,520 --> 00:22:26,880
the same payload and if we check this

603
00:22:26,880 --> 00:22:28,559
payload it turns out to be

604
00:22:28,559 --> 00:22:31,360
peid which is a free tool for detecting

605
00:22:31,360 --> 00:22:32,480
packers

606
00:22:32,480 --> 00:22:35,360
but why would someone want to hide this

607
00:22:35,360 --> 00:22:36,240
publicly

608
00:22:36,240 --> 00:22:39,600
valuable utility we can assume that

609
00:22:39,600 --> 00:22:40,080
someone

610
00:22:40,080 --> 00:22:43,840
just tests cloud type capabilities

611
00:22:43,840 --> 00:22:46,640
and to cloud eyes protest of their

612
00:22:46,640 --> 00:22:47,760
innocence

613
00:22:47,760 --> 00:22:50,400
we say in response that we have a little

614
00:22:50,400 --> 00:22:51,200
reason

615
00:22:51,200 --> 00:22:55,600
to believe their excuses and after our

616
00:22:55,600 --> 00:22:58,799
after we opened our investigation our

617
00:22:58,799 --> 00:23:01,840
our results shown 99

618
00:23:01,840 --> 00:23:04,320
of the samples were only used for

619
00:23:04,320 --> 00:23:06,080
malicious intent

620
00:23:06,080 --> 00:23:09,679
and the cloudy service was implicit

621
00:23:09,679 --> 00:23:14,240
in thousands of attack this year

622
00:23:14,559 --> 00:23:17,919
two months ago cloudeye announced the

623
00:23:17,919 --> 00:23:20,799
resumption of the service we are closely

624
00:23:20,799 --> 00:23:21,600
examining

625
00:23:21,600 --> 00:23:24,559
our telemetry and virus total looking

626
00:23:24,559 --> 00:23:26,240
for new samples

627
00:23:26,240 --> 00:23:28,880
we will continue to keep our eyes on

628
00:23:28,880 --> 00:23:29,760
cloudeye

629
00:23:29,760 --> 00:23:32,159
and will share any evidence for

630
00:23:32,159 --> 00:23:33,919
malicious activities

631
00:23:33,919 --> 00:23:37,120
but at least now the entire community

632
00:23:37,120 --> 00:23:40,480
know who claudia is and even

633
00:23:40,480 --> 00:23:43,760
got its own mel pedia entry

634
00:23:43,760 --> 00:23:46,720
now that they are in the spotlight they

635
00:23:46,720 --> 00:23:47,360
cannot

636
00:23:47,360 --> 00:23:51,760
operate with the same freedom as before

637
00:23:51,760 --> 00:23:54,559
thank you very much thank you alex thank

638
00:23:54,559 --> 00:24:04,240
you very much

