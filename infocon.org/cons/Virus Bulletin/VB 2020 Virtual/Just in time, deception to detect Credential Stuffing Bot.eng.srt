1
00:00:08,880 --> 00:00:10,320
hi everyone

2
00:00:10,320 --> 00:00:12,719
my name is manish with me i have my

3
00:00:12,719 --> 00:00:13,519
colleagues

4
00:00:13,519 --> 00:00:16,000
abhishek names in this presentation we

5
00:00:16,000 --> 00:00:17,520
will talk about

6
00:00:17,520 --> 00:00:20,000
just in time deception technique to

7
00:00:20,000 --> 00:00:22,880
detect credential stuffing bots

8
00:00:22,880 --> 00:00:25,599
a quick introduction of us i am staff

9
00:00:25,599 --> 00:00:26,640
security researcher

10
00:00:26,640 --> 00:00:30,480
at prismo systems my colleague abhishek

11
00:00:30,480 --> 00:00:34,239
is chief researcher at prismo systems

12
00:00:34,239 --> 00:00:36,480
james is distinguished engineer at

13
00:00:36,480 --> 00:00:38,960
prismo systems

14
00:00:38,960 --> 00:00:41,520
we have divided our presentation into

15
00:00:41,520 --> 00:00:42,399
four parts

16
00:00:42,399 --> 00:00:44,160
in first part we will talk about

17
00:00:44,160 --> 00:00:45,600
conditional stuffing attacks

18
00:00:45,600 --> 00:00:47,520
and classification of currency stuffing

19
00:00:47,520 --> 00:00:48,719
boards

20
00:00:48,719 --> 00:00:50,399
then we will talk about dynamic

21
00:00:50,399 --> 00:00:53,760
reception algorithm to detect the bots

22
00:00:53,760 --> 00:00:56,000
in the third part we will talk about the

23
00:00:56,000 --> 00:00:57,039
implementation

24
00:00:57,039 --> 00:00:58,879
and the architecture of the detection

25
00:00:58,879 --> 00:01:00,239
system

26
00:01:00,239 --> 00:01:02,480
then we will end the meeting with a

27
00:01:02,480 --> 00:01:06,000
quick demo of the system

28
00:01:06,400 --> 00:01:09,200
credential stuffing technique is very

29
00:01:09,200 --> 00:01:10,960
popular and widely used by cyber

30
00:01:10,960 --> 00:01:12,400
criminals

31
00:01:12,400 --> 00:01:15,920
the currency stepping boards try to

32
00:01:15,920 --> 00:01:18,799
use the previously stolen credential to

33
00:01:18,799 --> 00:01:20,560
take over accounts on a third party

34
00:01:20,560 --> 00:01:21,680
websites

35
00:01:21,680 --> 00:01:24,799
in order to achieve that they sends many

36
00:01:24,799 --> 00:01:27,600
malicious login request to the targeted

37
00:01:27,600 --> 00:01:29,520
web application

38
00:01:29,520 --> 00:01:32,720
and which increases the traffic

39
00:01:32,720 --> 00:01:36,240
on the web application if we look at the

40
00:01:36,240 --> 00:01:36,799
recent

41
00:01:36,799 --> 00:01:41,280
numbers of currency staffing attacks

42
00:01:41,280 --> 00:01:44,399
in in the end of year 2019

43
00:01:44,399 --> 00:01:47,759
uh akamai recorded around 17 billions of

44
00:01:47,759 --> 00:01:50,000
currency stuffing attacks

45
00:01:50,000 --> 00:01:52,640
later during covet lockdown in march

46
00:01:52,640 --> 00:01:53,840
2020

47
00:01:53,840 --> 00:01:55,439
many european organizations were

48
00:01:55,439 --> 00:01:57,119
targeted with credential stuffing

49
00:01:57,119 --> 00:01:58,320
attacks

50
00:01:58,320 --> 00:02:01,600
and they recorded millions of malicious

51
00:02:01,600 --> 00:02:02,560
login requests

52
00:02:02,560 --> 00:02:05,759
every day in recent months

53
00:02:05,759 --> 00:02:09,679
in august 2020 the canadian government

54
00:02:09,679 --> 00:02:12,319
was targeted with such attacks and they

55
00:02:12,319 --> 00:02:14,480
were forced to shut down their

56
00:02:14,480 --> 00:02:17,599
online portals as the attack

57
00:02:17,599 --> 00:02:21,200
was sustained for several days

58
00:02:21,599 --> 00:02:25,040
so as we see the

59
00:02:25,040 --> 00:02:28,640
number of attacks using the catalyst

60
00:02:28,640 --> 00:02:31,920
stuffing bots are increasing

61
00:02:31,920 --> 00:02:35,760
day by day and it's becoming a bigger

62
00:02:35,760 --> 00:02:39,519
and bigger issue for any organization

63
00:02:39,519 --> 00:02:43,599
the currency stopping bots generally

64
00:02:43,599 --> 00:02:45,599
creates two major issue for any web

65
00:02:45,599 --> 00:02:46,879
application

66
00:02:46,879 --> 00:02:49,680
first it increases the traffic on the

67
00:02:49,680 --> 00:02:50,879
web application

68
00:02:50,879 --> 00:02:55,040
and secondly if the bot get

69
00:02:55,040 --> 00:02:58,159
access to any user account then again it

70
00:02:58,159 --> 00:03:00,000
become a very

71
00:03:00,000 --> 00:03:03,519
big security hole for that organization

72
00:03:03,519 --> 00:03:07,680
so in order to detect

73
00:03:07,680 --> 00:03:10,640
such attacks and the bots we did

74
00:03:10,640 --> 00:03:13,440
research on the

75
00:03:13,440 --> 00:03:15,519
credence stuffing bots and we

76
00:03:15,519 --> 00:03:16,560
implemented

77
00:03:16,560 --> 00:03:19,680
a dynamic reception technique to detect

78
00:03:19,680 --> 00:03:22,239
the bots

79
00:03:23,120 --> 00:03:26,720
using dynamic receptions at runtime we

80
00:03:26,720 --> 00:03:30,159
inject honey data into the login page of

81
00:03:30,159 --> 00:03:30,560
the

82
00:03:30,560 --> 00:03:33,599
web application and

83
00:03:33,599 --> 00:03:36,239
the major benefits of using dynamic

84
00:03:36,239 --> 00:03:37,760
reception

85
00:03:37,760 --> 00:03:41,040
for such attacks is like the bots get

86
00:03:41,040 --> 00:03:43,040
detected on their very first medicis

87
00:03:43,040 --> 00:03:44,319
login attempt

88
00:03:44,319 --> 00:03:47,519
and that solve the first major issue of

89
00:03:47,519 --> 00:03:48,000
bots

90
00:03:48,000 --> 00:03:50,879
that is like the malicious traffic uh

91
00:03:50,879 --> 00:03:53,760
reduced instantly

92
00:03:53,760 --> 00:03:57,280
and other major benefit

93
00:03:57,280 --> 00:04:00,560
benefit is it gives a very precise alert

94
00:04:00,560 --> 00:04:04,480
so so the bot family can be

95
00:04:04,480 --> 00:04:08,400
classified immediately

96
00:04:08,400 --> 00:04:10,400
so before we move further into the

97
00:04:10,400 --> 00:04:12,840
implementation of dynamic recession

98
00:04:12,840 --> 00:04:15,040
algorithm

99
00:04:15,040 --> 00:04:16,478
we will first talk about the

100
00:04:16,478 --> 00:04:18,160
classification of the

101
00:04:18,160 --> 00:04:21,279
bots we can classify the

102
00:04:21,279 --> 00:04:23,600
kernel's stuffing bots in two major

103
00:04:23,600 --> 00:04:24,479
categories

104
00:04:24,479 --> 00:04:26,840
that is based upon the manner in which

105
00:04:26,840 --> 00:04:28,560
the credentials

106
00:04:28,560 --> 00:04:31,440
are inserted by the bots the first

107
00:04:31,440 --> 00:04:33,840
category of bots are the scrapping bots

108
00:04:33,840 --> 00:04:36,560
they load the login page scrap the html

109
00:04:36,560 --> 00:04:37,360
login page

110
00:04:37,360 --> 00:04:40,400
and submit the

111
00:04:40,400 --> 00:04:43,680
login form and the other category of bot

112
00:04:43,680 --> 00:04:44,160
is

113
00:04:44,160 --> 00:04:46,560
they directly use the login apis to

114
00:04:46,560 --> 00:04:49,360
submit the login request

115
00:04:49,360 --> 00:04:52,400
the first category of bots uses the

116
00:04:52,400 --> 00:04:56,080
scrapping web describing libraries like

117
00:04:56,080 --> 00:04:58,240
selenium google puppeteer microsoft

118
00:04:58,240 --> 00:04:59,919
playwright or fan

119
00:04:59,919 --> 00:05:03,360
phantom headless browser to

120
00:05:03,360 --> 00:05:07,600
loads the website login page and

121
00:05:07,600 --> 00:05:10,960
then they scrap the login form tag

122
00:05:10,960 --> 00:05:13,360
and set the username and password input

123
00:05:13,360 --> 00:05:15,759
fields

124
00:05:16,960 --> 00:05:20,080
and finally submit the login form

125
00:05:20,080 --> 00:05:24,880
so it this behavior

126
00:05:24,880 --> 00:05:27,520
mimics the actual human behaviors and it

127
00:05:27,520 --> 00:05:29,039
becomes difficult to

128
00:05:29,039 --> 00:05:31,680
detect such attacks by the web

129
00:05:31,680 --> 00:05:34,000
applications

130
00:05:34,000 --> 00:05:37,600
examples of such bots are cred

131
00:05:37,600 --> 00:05:40,240
our open bullet the javascript is

132
00:05:40,240 --> 00:05:42,000
tougher

133
00:05:42,000 --> 00:05:45,280
grad map etc

134
00:05:45,280 --> 00:05:48,320
the snippet shows the code of the first

135
00:05:48,320 --> 00:05:50,160
category of bot

136
00:05:50,160 --> 00:05:52,320
this bot is using the python mechanical

137
00:05:52,320 --> 00:05:54,400
soup library

138
00:05:54,400 --> 00:05:57,280
it's loading the login page of the

139
00:05:57,280 --> 00:05:57,759
target

140
00:05:57,759 --> 00:06:00,960
application and selecting the login form

141
00:06:00,960 --> 00:06:02,880
then setting up the email and password

142
00:06:02,880 --> 00:06:04,840
and finally submitting the

143
00:06:04,840 --> 00:06:07,840
form

144
00:06:10,639 --> 00:06:13,199
the second category of bots are very

145
00:06:13,199 --> 00:06:13,840
straight

146
00:06:13,840 --> 00:06:16,800
they directly use the get or post

147
00:06:16,800 --> 00:06:18,160
request

148
00:06:18,160 --> 00:06:21,280
apis to send the login request

149
00:06:21,280 --> 00:06:24,240
on the web application these bots do not

150
00:06:24,240 --> 00:06:27,520
load or scrap the html login page

151
00:06:27,520 --> 00:06:31,120
examples of such bots are apex sniper

152
00:06:31,120 --> 00:06:36,479
or sentry mba the hider tool etc

153
00:06:37,120 --> 00:06:40,800
this code snippet shows the

154
00:06:41,919 --> 00:06:45,440
code of the second type of bots

155
00:06:45,440 --> 00:06:47,520
and it's using the python request

156
00:06:47,520 --> 00:06:48,880
library to

157
00:06:48,880 --> 00:06:51,280
send a post request it's setting up the

158
00:06:51,280 --> 00:06:52,960
username and password into the post

159
00:06:52,960 --> 00:06:54,880
request

160
00:06:54,880 --> 00:06:58,639
as we have seen two categories

161
00:06:58,639 --> 00:07:00,960
of the bot let's move back to the

162
00:07:00,960 --> 00:07:02,000
implementation

163
00:07:02,000 --> 00:07:05,120
of dynamic reception algorithm it will

164
00:07:05,120 --> 00:07:06,080
be covered by

165
00:07:06,080 --> 00:07:10,639
abhishek thank you

166
00:07:10,639 --> 00:07:13,840
vanish as my colleague um

167
00:07:13,840 --> 00:07:17,680
mentioned the credential stepping

168
00:07:17,680 --> 00:07:21,039
pots they make use of the libraries

169
00:07:21,039 --> 00:07:25,440
such as phantomjs python

170
00:07:25,440 --> 00:07:29,759
mechanical soup to parse the login pages

171
00:07:29,759 --> 00:07:32,080
it makes use of the attributes like id

172
00:07:32,080 --> 00:07:32,960
of the element

173
00:07:32,960 --> 00:07:34,880
a name of the element to identify the

174
00:07:34,880 --> 00:07:36,880
login form

175
00:07:36,880 --> 00:07:39,680
once the forms are identified the

176
00:07:39,680 --> 00:07:40,479
compromised

177
00:07:40,479 --> 00:07:42,400
username and password are entered by the

178
00:07:42,400 --> 00:07:44,080
bots so in order

179
00:07:44,080 --> 00:07:47,360
to detect a credential stuffing um

180
00:07:47,360 --> 00:07:50,000
quartz the honey form tags are

181
00:07:50,000 --> 00:07:50,960
strategically

182
00:07:50,960 --> 00:07:54,560
placed in the actual html

183
00:07:54,560 --> 00:07:57,840
pages these are the honey forms they

184
00:07:57,840 --> 00:07:58,960
have got the

185
00:07:58,960 --> 00:08:01,280
same attribute as the login forms and by

186
00:08:01,280 --> 00:08:02,560
strategically

187
00:08:02,560 --> 00:08:05,039
the placing them in the web pages we

188
00:08:05,039 --> 00:08:07,199
ensure that these gets accessed

189
00:08:07,199 --> 00:08:10,800
before the actual forms once a username

190
00:08:10,800 --> 00:08:12,080
and the password are being

191
00:08:12,080 --> 00:08:14,720
entered then these gets validated by the

192
00:08:14,720 --> 00:08:15,919
algorithm

193
00:08:15,919 --> 00:08:18,160
for determining if the username or the

194
00:08:18,160 --> 00:08:20,240
password has been entered by a port

195
00:08:20,240 --> 00:08:27,840
or by an actual user

196
00:08:29,440 --> 00:08:31,360
so let's take a deep dive on the

197
00:08:31,360 --> 00:08:33,279
authentication

198
00:08:33,279 --> 00:08:35,599
algorithm since we are instrumenting the

199
00:08:35,599 --> 00:08:37,839
web application in the outbound request

200
00:08:37,839 --> 00:08:39,039
we insert the honey

201
00:08:39,039 --> 00:08:41,679
a form tags which has got exactly the

202
00:08:41,679 --> 00:08:43,120
same attribute as the real

203
00:08:43,120 --> 00:08:45,920
a form tag now besides the same

204
00:08:45,920 --> 00:08:47,120
attribute as the real

205
00:08:47,120 --> 00:08:49,519
form tag we also introduce a unique

206
00:08:49,519 --> 00:08:51,040
random

207
00:08:51,040 --> 00:08:54,080
number h1 and r1

208
00:08:54,080 --> 00:08:56,800
h1 uh denotes the random number which is

209
00:08:56,800 --> 00:08:58,720
being introduced in the honey a form tag

210
00:08:58,720 --> 00:09:00,240
and similarly r1

211
00:09:00,240 --> 00:09:03,279
denotes the random number

212
00:09:03,279 --> 00:09:07,200
which is introduced in the real form tag

213
00:09:07,200 --> 00:09:10,160
to compute these random numbers we make

214
00:09:10,160 --> 00:09:12,080
use of the symmetric key and the hashing

215
00:09:12,080 --> 00:09:12,880
key

216
00:09:12,880 --> 00:09:14,720
the sk honey form it denotes the

217
00:09:14,720 --> 00:09:16,800
symmetric key used for the generation of

218
00:09:16,800 --> 00:09:18,959
the random number for the honey a form

219
00:09:18,959 --> 00:09:20,880
tag sk real it

220
00:09:20,880 --> 00:09:23,360
denotes a symmetric key used for the

221
00:09:23,360 --> 00:09:25,120
generation of the random number

222
00:09:25,120 --> 00:09:27,920
for the real a form tag and a similarly

223
00:09:27,920 --> 00:09:30,480
sha honey form is the hashing key

224
00:09:30,480 --> 00:09:32,959
for the honey form and sha a real form

225
00:09:32,959 --> 00:09:34,000
is the hashing key

226
00:09:34,000 --> 00:09:36,240
used to compute the random number for

227
00:09:36,240 --> 00:09:38,320
the real a form tag

228
00:09:38,320 --> 00:09:40,080
now when a page is being served to the

229
00:09:40,080 --> 00:09:42,240
user then this is how it looks like

230
00:09:42,240 --> 00:09:44,240
as we can see in this page that all the

231
00:09:44,240 --> 00:09:46,880
attributed remains the same as the real

232
00:09:46,880 --> 00:09:49,360
the form tag and besides the attribute

233
00:09:49,360 --> 00:09:50,160
we have also

234
00:09:50,160 --> 00:09:54,720
introduced in a a random

235
00:09:54,720 --> 00:09:57,120
number

236
00:09:59,040 --> 00:10:02,160
so in order to compute h1 and r1 we use

237
00:10:02,160 --> 00:10:03,279
the following

238
00:10:03,279 --> 00:10:06,079
algorithm we compute the current time

239
00:10:06,079 --> 00:10:07,839
once we have computed the current time

240
00:10:07,839 --> 00:10:10,320
then after that we compute the hash of

241
00:10:10,320 --> 00:10:11,519
the current time

242
00:10:11,519 --> 00:10:13,040
the current time and the hash of the

243
00:10:13,040 --> 00:10:14,880
current time then it gets encrypted with

244
00:10:14,880 --> 00:10:16,800
the

245
00:10:16,800 --> 00:10:20,000
symmetric keys so in order to compute r1

246
00:10:20,000 --> 00:10:22,000
we use the symmetric key of the real a

247
00:10:22,000 --> 00:10:24,000
form tag and the hashing key of the real

248
00:10:24,000 --> 00:10:26,800
a form tag and similarly to compute the

249
00:10:26,800 --> 00:10:28,079
random number for

250
00:10:28,079 --> 00:10:30,160
the honey a form tag we use the

251
00:10:30,160 --> 00:10:32,079
symmetric key of the honey a form tag

252
00:10:32,079 --> 00:10:34,079
and the hashing key of the real of

253
00:10:34,079 --> 00:10:38,160
the of the of the honey form tag

254
00:10:38,160 --> 00:10:40,560
now when any username or the password is

255
00:10:40,560 --> 00:10:42,800
being entered in the in the form tag

256
00:10:42,800 --> 00:10:43,120
then

257
00:10:43,120 --> 00:10:45,040
along with the username and the password

258
00:10:45,040 --> 00:10:47,760
these uh

259
00:10:47,760 --> 00:10:50,640
random number is also being sent so in

260
00:10:50,640 --> 00:10:52,720
case of a honey a form tag if the honey

261
00:10:52,720 --> 00:10:54,800
form tag has been accessed then h1

262
00:10:54,800 --> 00:10:57,440
will be sent if the real form tag is

263
00:10:57,440 --> 00:10:57,839
being

264
00:10:57,839 --> 00:11:02,240
accessed then r1 will be sent

265
00:11:04,160 --> 00:11:07,760
so once we receive the random

266
00:11:07,760 --> 00:11:11,120
once we receive any incoming a request

267
00:11:11,120 --> 00:11:13,519
then we extract these random other

268
00:11:13,519 --> 00:11:14,800
values which are

269
00:11:14,800 --> 00:11:16,399
which are with the username and the

270
00:11:16,399 --> 00:11:18,000
password

271
00:11:18,000 --> 00:11:21,680
once these have been extracted then we

272
00:11:21,680 --> 00:11:24,240
decrypt the random the values by using

273
00:11:24,240 --> 00:11:26,000
the symmetric key of the honey a form

274
00:11:26,000 --> 00:11:26,800
tag

275
00:11:26,800 --> 00:11:29,839
once we have decrypted the random number

276
00:11:29,839 --> 00:11:30,959
we get the time

277
00:11:30,959 --> 00:11:34,240
and also the hash of the time the time

278
00:11:34,240 --> 00:11:35,200
is that x

279
00:11:35,200 --> 00:11:37,440
the time is extracted the hash of the

280
00:11:37,440 --> 00:11:38,399
time is uh

281
00:11:38,399 --> 00:11:41,040
computed if the hash of the time is same

282
00:11:41,040 --> 00:11:43,519
as the hash which is inside the incoming

283
00:11:43,519 --> 00:11:45,839
request then we can say that this

284
00:11:45,839 --> 00:11:48,959
request has been uh generated by the bot

285
00:11:48,959 --> 00:11:51,120
in case of the second category of the

286
00:11:51,120 --> 00:11:53,600
bot since they use the rest apis to

287
00:11:53,600 --> 00:11:56,000
directly enter the username and the

288
00:11:56,000 --> 00:11:58,959
password so in that case r1 it won't be

289
00:11:58,959 --> 00:12:00,240
there in the post

290
00:12:00,240 --> 00:12:04,079
a request now my colleague ramesh will

291
00:12:04,079 --> 00:12:06,639
will share the details of that how we

292
00:12:06,639 --> 00:12:07,680
have

293
00:12:07,680 --> 00:12:11,120
implemented the dynamic

294
00:12:11,120 --> 00:12:13,680
deception

295
00:12:18,000 --> 00:12:21,680
thanks avi i will go over

296
00:12:21,680 --> 00:12:24,240
how we go about designing and building

297
00:12:24,240 --> 00:12:27,040
something like this

298
00:12:27,600 --> 00:12:29,680
let's say you have a web application

299
00:12:29,680 --> 00:12:31,519
maybe a java web app

300
00:12:31,519 --> 00:12:33,519
and it's instrumented with an agent at

301
00:12:33,519 --> 00:12:35,279
runtime

302
00:12:35,279 --> 00:12:37,920
so it instruments whatever it needs when

303
00:12:37,920 --> 00:12:40,160
the application is coming up

304
00:12:40,160 --> 00:12:43,279
and you have a browser that's making a

305
00:12:43,279 --> 00:12:44,320
request

306
00:12:44,320 --> 00:12:47,600
for the login page what we'd like to do

307
00:12:47,600 --> 00:12:49,519
is return a response which is

308
00:12:49,519 --> 00:12:50,880
instrumented

309
00:12:50,880 --> 00:12:53,839
and which has the honey form in the

310
00:12:53,839 --> 00:12:55,760
field with the encrypted

311
00:12:55,760 --> 00:12:58,959
uh value

312
00:12:59,839 --> 00:13:02,959
so let's say this is the original

313
00:13:02,959 --> 00:13:04,639
login page that goes back in the

314
00:13:04,639 --> 00:13:08,000
response from the application

315
00:13:08,000 --> 00:13:10,000
we'd like to return something like this

316
00:13:10,000 --> 00:13:11,040
where

317
00:13:11,040 --> 00:13:14,000
the top you see the box with the honey

318
00:13:14,000 --> 00:13:14,720
form

319
00:13:14,720 --> 00:13:16,800
and the lower half you see the field

320
00:13:16,800 --> 00:13:21,519
with the encrypted value

321
00:13:21,519 --> 00:13:24,320
so if you look at a tomcat server for

322
00:13:24,320 --> 00:13:24,880
instance

323
00:13:24,880 --> 00:13:28,560
which is which is a servlet container

324
00:13:28,560 --> 00:13:30,399
this is a typical request processing

325
00:13:30,399 --> 00:13:32,240
that goes on

326
00:13:32,240 --> 00:13:34,880
it's handled by at the entry point

327
00:13:34,880 --> 00:13:35,680
handled by

328
00:13:35,680 --> 00:13:37,920
a request handler an application request

329
00:13:37,920 --> 00:13:38,880
handler

330
00:13:38,880 --> 00:13:40,720
some middle tier code and then the

331
00:13:40,720 --> 00:13:42,320
application makes

332
00:13:42,320 --> 00:13:44,480
some backend invocations like maybe to a

333
00:13:44,480 --> 00:13:45,839
database or

334
00:13:45,839 --> 00:13:48,320
some rest api calls and then the

335
00:13:48,320 --> 00:13:52,000
response starts winding back up

336
00:13:53,600 --> 00:13:55,600
when an application agent instruments

337
00:13:55,600 --> 00:13:57,519
such an application

338
00:13:57,519 --> 00:13:59,279
we are really interested in tracing the

339
00:13:59,279 --> 00:14:00,560
transaction

340
00:14:00,560 --> 00:14:02,560
by that we're really interested in what

341
00:14:02,560 --> 00:14:04,639
comes into the application at the entry

342
00:14:04,639 --> 00:14:05,360
point

343
00:14:05,360 --> 00:14:07,120
so at the framework handler or the

344
00:14:07,120 --> 00:14:08,800
application request handler

345
00:14:08,800 --> 00:14:10,560
and whatever i o calls that the

346
00:14:10,560 --> 00:14:12,720
transaction makes that goes out of the

347
00:14:12,720 --> 00:14:13,440
process

348
00:14:13,440 --> 00:14:15,040
so the backend indications that it's

349
00:14:15,040 --> 00:14:17,120
doing additionally

350
00:14:17,120 --> 00:14:19,360
it may also be interested in what the

351
00:14:19,360 --> 00:14:21,120
response looks like that's going out to

352
00:14:21,120 --> 00:14:23,680
the browser

353
00:14:24,399 --> 00:14:28,240
for the purpose of our use case

354
00:14:28,240 --> 00:14:30,079
we are only interested in what goes on

355
00:14:30,079 --> 00:14:31,600
in the entry point because that's where

356
00:14:31,600 --> 00:14:34,399
the login page is typically served from

357
00:14:34,399 --> 00:14:38,000
so they tend to be java servlets or jsps

358
00:14:38,000 --> 00:14:39,440
and we are also interested in the

359
00:14:39,440 --> 00:14:42,000
response

360
00:14:43,040 --> 00:14:44,720
and more specifically we are only

361
00:14:44,720 --> 00:14:46,320
interested when this happens to be the

362
00:14:46,320 --> 00:14:48,320
login page

363
00:14:48,320 --> 00:14:50,720
and we want to send back a response with

364
00:14:50,720 --> 00:14:52,079
the instrumented

365
00:14:52,079 --> 00:14:55,839
uh response in fact with

366
00:14:55,839 --> 00:14:59,839
the honey form and the field

367
00:15:00,560 --> 00:15:03,120
this is the life cycle of a servlet it's

368
00:15:03,120 --> 00:15:04,160
basically init

369
00:15:04,160 --> 00:15:06,959
service and destroy and we need to

370
00:15:06,959 --> 00:15:10,560
instrument only the service method

371
00:15:11,600 --> 00:15:14,000
and the service method has the response

372
00:15:14,000 --> 00:15:15,279
object in it

373
00:15:15,279 --> 00:15:17,519
and we tend we need to wrap it with an

374
00:15:17,519 --> 00:15:18,480
http server

375
00:15:18,480 --> 00:15:21,199
response wrapper this is so that you can

376
00:15:21,199 --> 00:15:22,800
buffer the response

377
00:15:22,800 --> 00:15:26,160
and insert the honey form and the

378
00:15:26,160 --> 00:15:30,880
encrypted value in the hidden field

379
00:15:31,120 --> 00:15:34,560
the response wrapper also needs to wrap

380
00:15:34,560 --> 00:15:37,440
return a wrapped servlet output stream

381
00:15:37,440 --> 00:15:38,399
and a wrapped

382
00:15:38,399 --> 00:15:41,839
print rider

383
00:15:42,959 --> 00:15:45,360
these two wrappers are where you'll get

384
00:15:45,360 --> 00:15:47,519
a chance to insert

385
00:15:47,519 --> 00:15:49,680
the honey form or whatever else you

386
00:15:49,680 --> 00:15:51,120
really need to insert

387
00:15:51,120 --> 00:15:53,360
so the but you need to buffer till we

388
00:15:53,360 --> 00:15:55,199
see the head tag

389
00:15:55,199 --> 00:15:56,720
and then that's where the honey form is

390
00:15:56,720 --> 00:15:59,040
inserted

391
00:15:59,040 --> 00:16:00,560
this is what the honey form that we are

392
00:16:00,560 --> 00:16:03,040
inserting

393
00:16:05,040 --> 00:16:07,040
and then we continue to buffer till we

394
00:16:07,040 --> 00:16:10,880
see the login form from the application

395
00:16:10,880 --> 00:16:13,120
and that's where we insert the hidden

396
00:16:13,120 --> 00:16:16,959
field with the encrypted value

397
00:16:18,160 --> 00:16:22,480
the highlighted field that's shown below

398
00:16:22,480 --> 00:16:25,839
now this is when the request with the

399
00:16:25,839 --> 00:16:27,600
post parameters that is the login

400
00:16:27,600 --> 00:16:29,279
credentials are sent back

401
00:16:29,279 --> 00:16:32,639
to the server or to the application

402
00:16:32,639 --> 00:16:37,199
we need to extract the parameters from

403
00:16:37,199 --> 00:16:39,839
the request and we also have to remove

404
00:16:39,839 --> 00:16:40,959
the encrypted

405
00:16:40,959 --> 00:16:44,000
uh value and the field itself from the

406
00:16:44,000 --> 00:16:45,920
request because the application is not

407
00:16:45,920 --> 00:16:49,279
expecting that and it might break it

408
00:16:49,279 --> 00:16:51,120
then we allow the application to process

409
00:16:51,120 --> 00:16:52,720
the login request

410
00:16:52,720 --> 00:16:54,880
but this data that we collected is sent

411
00:16:54,880 --> 00:16:56,720
to our server where it can determine

412
00:16:56,720 --> 00:16:57,360
whether

413
00:16:57,360 --> 00:17:00,880
the request happened to be from a bot

414
00:17:00,880 --> 00:17:05,439
or from a real human being

415
00:17:05,439 --> 00:17:08,160
we have a quick demo to show you how

416
00:17:08,160 --> 00:17:08,959
this works

417
00:17:08,959 --> 00:17:13,039
and my colleague manish will go over it

418
00:17:14,640 --> 00:17:19,039
thanks ramis in this demo we have a

419
00:17:19,039 --> 00:17:24,160
login web application written in java

420
00:17:24,640 --> 00:17:26,799
using dynamic reception we have injected

421
00:17:26,799 --> 00:17:29,839
a javascript code

422
00:17:30,799 --> 00:17:33,600
in this login page and this javascript

423
00:17:33,600 --> 00:17:34,480
code

424
00:17:34,480 --> 00:17:38,320
creates the honey data on

425
00:17:38,320 --> 00:17:47,840
html body dot event

426
00:19:08,559 --> 00:19:12,320
in our presentation we talked about

427
00:19:13,200 --> 00:19:15,200
tensile stepping attacks and

428
00:19:15,200 --> 00:19:16,880
classification of

429
00:19:16,880 --> 00:19:18,960
credential stepping bars and how dynamic

430
00:19:18,960 --> 00:19:20,960
reception can help

431
00:19:20,960 --> 00:19:24,240
prevent and detect such attacks

432
00:19:24,240 --> 00:19:26,160
if you have any question or concern

433
00:19:26,160 --> 00:19:27,360
please contact us

434
00:19:27,360 --> 00:19:39,280
on our email address thank you

