1
00:00:00,000 --> 00:00:02,490
okay without further ado let me

2
00:00:02,490 --> 00:00:05,490
introduce our first speaker today who is

3
00:00:05,490 --> 00:00:09,690
my admin from IBM Trusteer who is going

4
00:00:09,690 --> 00:00:12,179
to talk about client maximus raising the

5
00:00:12,179 --> 00:00:13,139
bar no ma'am

6
00:00:13,139 --> 00:00:17,699
thank you very much so I'm overworked at

7
00:00:17,699 --> 00:00:22,140
trusty IBM start with a little bit about

8
00:00:22,140 --> 00:00:25,380
me and I'm a model researcher I used to

9
00:00:25,380 --> 00:00:28,439
work at software engineering last couple

10
00:00:28,439 --> 00:00:30,810
of years lots at IBM and research in

11
00:00:30,810 --> 00:00:33,530
malware's and my speciality are

12
00:00:33,530 --> 00:00:37,710
financial powers hobbies include the

13
00:00:37,710 --> 00:00:39,809
reversing of electronics hardware and

14
00:00:39,809 --> 00:00:43,500
stuff like that so what we're going to

15
00:00:43,500 --> 00:00:47,550
do here and basically I want to tell you

16
00:00:47,550 --> 00:00:50,870
a story the story of fake night Maximus

17
00:00:50,870 --> 00:00:54,239
latest version that's why it's last

18
00:00:54,239 --> 00:00:58,160
minute because it happened last month

19
00:00:58,160 --> 00:01:01,530
and the entire story basically happens

20
00:01:01,530 --> 00:01:03,960
in less than one second written by

21
00:01:03,960 --> 00:01:07,290
several authors and I'll try to break it

22
00:01:07,290 --> 00:01:10,619
out step by step there are gonna be some

23
00:01:10,619 --> 00:01:13,290
very technical slides amount of code

24
00:01:13,290 --> 00:01:16,470
different languages so try to bear with

25
00:01:16,470 --> 00:01:19,740
me if you understand everything so I

26
00:01:19,740 --> 00:01:21,770
want to talk to you after the lecture to

27
00:01:21,770 --> 00:01:25,880
hear to understand myself and joking and

28
00:01:25,880 --> 00:01:28,530
but I'll try to give you some background

29
00:01:28,530 --> 00:01:31,140
about the latin america malware scenery

30
00:01:31,140 --> 00:01:33,360
which is a pretty uncommon usually

31
00:01:33,360 --> 00:01:37,680
between the amalga researchers and the

32
00:01:37,680 --> 00:01:41,700
client máximos actual flow so we're

33
00:01:41,700 --> 00:01:43,890
going to talk about some evasive and

34
00:01:43,890 --> 00:01:47,430
injecting injection techniques displayed

35
00:01:47,430 --> 00:01:50,610
here some of them are written in

36
00:01:50,610 --> 00:01:52,549
PowerShell some of them are a native

37
00:01:52,549 --> 00:01:55,530
we're going to go over that as well but

38
00:01:55,530 --> 00:01:57,930
basically we're trying to tell the

39
00:01:57,930 --> 00:02:00,509
entire story as a whole and hopefully

40
00:02:00,509 --> 00:02:02,909
you can get something out of it of the

41
00:02:02,909 --> 00:02:04,350
sketching techniques injected to fix

42
00:02:04,350 --> 00:02:09,179
anything so let's start with Latin

43
00:02:09,179 --> 00:02:11,670
America how many here and have

44
00:02:11,670 --> 00:02:12,970
experience with

45
00:02:12,970 --> 00:02:17,440
Latin America Mars analysis right so as

46
00:02:17,440 --> 00:02:21,520
you probably know usually until recently

47
00:02:21,520 --> 00:02:25,210
written in male Delfy or a dot that code

48
00:02:25,210 --> 00:02:27,400
vb.net c-sharp

49
00:02:27,400 --> 00:02:29,290
they have like afternoon classes where

50
00:02:29,290 --> 00:02:31,270
they teach and points to links in github

51
00:02:31,270 --> 00:02:33,670
where you can download the actual

52
00:02:33,670 --> 00:02:37,540
maliciously payloads and the pretty much

53
00:02:37,540 --> 00:02:39,910
looks the same and sophisticated they're

54
00:02:39,910 --> 00:02:43,750
mostly their mo is a pretty simple they

55
00:02:43,750 --> 00:02:45,820
just iterate through the different

56
00:02:45,820 --> 00:02:47,770
windows looking for the title that seems

57
00:02:47,770 --> 00:02:51,520
like a bank title the encryption is

58
00:02:51,520 --> 00:02:55,060
usually xor based and we've seen in many

59
00:02:55,060 --> 00:02:57,400
many samples using the same the exact

60
00:02:57,400 --> 00:03:00,520
same XO encryption so it's really hard

61
00:03:00,520 --> 00:03:02,080
to write the Decrypter and then we use

62
00:03:02,080 --> 00:03:06,459
it everywhere else but like maxim was

63
00:03:06,459 --> 00:03:10,209
pretty much changing that recently not

64
00:03:10,209 --> 00:03:12,670
in america banks started to have their

65
00:03:12,670 --> 00:03:15,459
own applications and installed on

66
00:03:15,459 --> 00:03:18,190
Windows with Windows machines where the

67
00:03:18,190 --> 00:03:19,900
application itself is the one accessing

68
00:03:19,900 --> 00:03:23,170
the bank not a web browser cracked

69
00:03:23,170 --> 00:03:25,810
maximals knows that and utilizes that we

70
00:03:25,810 --> 00:03:30,570
spotted the first at the 2016 at four

71
00:03:30,570 --> 00:03:33,640
and the payload itself is written in C

72
00:03:33,640 --> 00:03:36,040
which is a pretty uncommon to Latin

73
00:03:36,040 --> 00:03:39,040
America Mars and uses up-to-date steal

74
00:03:39,040 --> 00:03:40,830
techniques which is also pretty uncommon

75
00:03:40,830 --> 00:03:43,540
and we've seen a very very complex

76
00:03:43,540 --> 00:03:47,350
infection flow which will go over mixes

77
00:03:47,350 --> 00:03:50,890
of languages mixes of techniques this is

78
00:03:50,890 --> 00:03:53,470
the entire flow as you can see it starts

79
00:03:53,470 --> 00:03:57,940
from the top left corner and the purple

80
00:03:57,940 --> 00:04:01,150
purplish boxes are the executions the

81
00:04:01,150 --> 00:04:04,830
actual executions and new processes the

82
00:04:04,830 --> 00:04:08,410
blue light blue or the CNC communication

83
00:04:08,410 --> 00:04:11,260
the downloads and the yellow are a kind

84
00:04:11,260 --> 00:04:13,660
of actions that it performs to assist

85
00:04:13,660 --> 00:04:15,700
you in the process so we go over this

86
00:04:15,700 --> 00:04:18,430
flop let's start with the link file

87
00:04:18,430 --> 00:04:21,970
because it's pretty interesting so but

88
00:04:21,970 --> 00:04:24,750
before that just a question what

89
00:04:24,750 --> 00:04:27,810
why do that why make the whole infection

90
00:04:27,810 --> 00:04:31,590
process so cumbersome and convoluted so

91
00:04:31,590 --> 00:04:33,450
the first reason of course would be to

92
00:04:33,450 --> 00:04:36,680
evade anti viruses because we want them

93
00:04:36,680 --> 00:04:38,850
not to recognize what we are doing the

94
00:04:38,850 --> 00:04:41,610
malicious stuff make it hard to reverse

95
00:04:41,610 --> 00:04:44,970
engineer but we also see of course

96
00:04:44,970 --> 00:04:47,790
evidence of a copy pasting I called and

97
00:04:47,790 --> 00:04:51,360
several programmers and maybe this might

98
00:04:51,360 --> 00:04:53,810
be the evidence why it's so easy to take

99
00:04:53,810 --> 00:04:56,730
copy paste from Stack Overflow and paste

100
00:04:56,730 --> 00:04:58,050
it and then make a lot of money out of

101
00:04:58,050 --> 00:05:00,360
it which is what like much like maximals

102
00:05:00,360 --> 00:05:04,080
does so as I said the first step is the

103
00:05:04,080 --> 00:05:07,170
link file usually the link file

104
00:05:07,170 --> 00:05:11,190
execute CMD exam with some parameters

105
00:05:11,190 --> 00:05:14,550
that will examine thoroughly and link

106
00:05:14,550 --> 00:05:17,130
file is a shorter file in Windows and

107
00:05:17,130 --> 00:05:19,440
it's interesting that Windows only show

108
00:05:19,440 --> 00:05:23,070
you 280 card is 60 card - sorry from the

109
00:05:23,070 --> 00:05:27,450
entire payload of the evening file but

110
00:05:27,450 --> 00:05:29,310
this link file actually has four hundred

111
00:05:29,310 --> 00:05:32,520
and five hundred forty characters so

112
00:05:32,520 --> 00:05:36,030
it's pretty office skated by any and

113
00:05:36,030 --> 00:05:38,130
windows UI that you right-click on the

114
00:05:38,130 --> 00:05:40,350
linked file in a click on properties so

115
00:05:40,350 --> 00:05:41,970
you have to use some kind of a hex

116
00:05:41,970 --> 00:05:44,580
editor or some kind of a parser I

117
00:05:44,580 --> 00:05:47,310
basically try to write my own parser for

118
00:05:47,310 --> 00:05:50,070
that and after that when I found out the

119
00:05:50,070 --> 00:05:52,700
entire payload and eventually I found

120
00:05:52,700 --> 00:05:55,979
zero and one zero plugin for that so it

121
00:05:55,979 --> 00:05:59,370
does it very nicely and let's look at

122
00:05:59,370 --> 00:06:01,110
the lab itself ok

123
00:06:01,110 --> 00:06:03,380
so the bottom part is the payload you

124
00:06:03,380 --> 00:06:06,479
can see it has several parts the first

125
00:06:06,479 --> 00:06:09,660
part is the C in the actual execution so

126
00:06:09,660 --> 00:06:12,479
you can see that it executes the CMD

127
00:06:12,479 --> 00:06:15,540
with the slash C of course and then have

128
00:06:15,540 --> 00:06:19,650
some kind of weird and string marked in

129
00:06:19,650 --> 00:06:21,900
red after that we have the actual a

130
00:06:21,900 --> 00:06:24,600
base64 payload which is the green one

131
00:06:24,600 --> 00:06:28,440
and eventually the last bottom line we

132
00:06:28,440 --> 00:06:31,680
see the - WI one so let's go over that a

133
00:06:31,680 --> 00:06:33,390
little bit ok let's let's try to figure

134
00:06:33,390 --> 00:06:35,970
out what's going on there so you can see

135
00:06:35,970 --> 00:06:37,379
the

136
00:06:37,379 --> 00:06:40,259
if you know a bad script right in

137
00:06:40,259 --> 00:06:42,030
windows so you can of course identify

138
00:06:42,030 --> 00:06:46,530
the percentage symbol use therefore M

139
00:06:46,530 --> 00:06:50,849
variables but when CMD exit uses the -

140
00:06:50,849 --> 00:06:52,560
the /vm

141
00:06:52,560 --> 00:06:56,479
a common parameter it means that every

142
00:06:56,479 --> 00:07:00,060
and every variable that you defined it

143
00:07:00,060 --> 00:07:02,099
will immediately get its value and you

144
00:07:02,099 --> 00:07:04,199
can use that for execution

145
00:07:04,199 --> 00:07:06,659
right after you defined it okay so

146
00:07:06,659 --> 00:07:07,830
that's exactly what it does

147
00:07:07,830 --> 00:07:09,810
and this is the exclamation mark on the

148
00:07:09,810 --> 00:07:12,810
third line and you can see that it

149
00:07:12,810 --> 00:07:14,610
basically creates a string PowerShell so

150
00:07:14,610 --> 00:07:17,310
that's the first of the case of focusing

151
00:07:17,310 --> 00:07:21,680
a technique that uses in order to bypass

152
00:07:21,680 --> 00:07:23,580
anything that looks for the string

153
00:07:23,580 --> 00:07:27,690
powershell next you can see that it uses

154
00:07:27,690 --> 00:07:30,060
the - PowerShell wrote X then minus e

155
00:07:30,060 --> 00:07:32,419
the e flag is of course the base64

156
00:07:32,419 --> 00:07:36,030
payload itself and then - WI which is

157
00:07:36,030 --> 00:07:38,490
the Windows type hidden' which means

158
00:07:38,490 --> 00:07:41,580
that the window will be invisible this

159
00:07:41,580 --> 00:07:46,110
is important for the next stage so when

160
00:07:46,110 --> 00:07:48,539
we decode the basic the basic ste for

161
00:07:48,539 --> 00:07:51,330
string we get this which is you can see

162
00:07:51,330 --> 00:07:53,159
a little bit off escape that PowerShell

163
00:07:53,159 --> 00:07:58,190
right in the written like a hacker style

164
00:07:58,190 --> 00:08:01,740
capital and lowercase letters but we if

165
00:08:01,740 --> 00:08:03,560
we just rearrange that we get this thing

166
00:08:03,560 --> 00:08:06,779
which means clear host invoke expression

167
00:08:06,779 --> 00:08:08,969
invoke expression for anyone who doesn't

168
00:08:08,969 --> 00:08:10,889
know is like a valid JavaScript just

169
00:08:10,889 --> 00:08:14,060
takes a string and executes the string

170
00:08:14,060 --> 00:08:17,370
and what it executes is another pedal it

171
00:08:17,370 --> 00:08:19,650
download from the internet from its yet

172
00:08:19,650 --> 00:08:24,120
seen so why does it do clear host right

173
00:08:24,120 --> 00:08:27,719
it's a new window okay so it doesn't

174
00:08:27,719 --> 00:08:29,279
have anything to do clear host it's like

175
00:08:29,279 --> 00:08:33,029
ACLs in in command line or clear and

176
00:08:33,029 --> 00:08:34,649
this is stranger this is the first

177
00:08:34,649 --> 00:08:36,779
evident of just copy pasting some code

178
00:08:36,779 --> 00:08:39,630
from the internet using that and getting

179
00:08:39,630 --> 00:08:44,130
the final result this net of this method

180
00:08:44,130 --> 00:08:47,160
of using PowerShell to execute

181
00:08:47,160 --> 00:08:48,720
immediately a code that was downloaded

182
00:08:48,720 --> 00:08:49,950
from internet

183
00:08:49,950 --> 00:08:54,090
was spotted by unit in 42 unit 42 is a

184
00:08:54,090 --> 00:08:57,510
part of the palo alto group and they

185
00:08:57,510 --> 00:09:00,600
call that IEX DX because of the invoke

186
00:09:00,600 --> 00:09:03,630
expression download three initials and

187
00:09:03,630 --> 00:09:06,240
they have many many others in a method i

188
00:09:06,240 --> 00:09:08,880
put a link in the description the

189
00:09:08,880 --> 00:09:10,380
presentation will be available for

190
00:09:10,380 --> 00:09:12,750
download so you can not do that later so

191
00:09:12,750 --> 00:09:15,600
that's the second part where it takes

192
00:09:15,600 --> 00:09:17,970
this powershell script and downloading

193
00:09:17,970 --> 00:09:20,030
the string and executing it

194
00:09:20,030 --> 00:09:22,460
okay so we're moving up to the

195
00:09:22,460 --> 00:09:26,010
powershell securin this is the script

196
00:09:26,010 --> 00:09:28,260
that it has been downloaded and you can

197
00:09:28,260 --> 00:09:30,210
see that the first thing it does it can

198
00:09:30,210 --> 00:09:34,110
download another string from this URL

199
00:09:34,110 --> 00:09:37,620
and you can see on the second line if

200
00:09:37,620 --> 00:09:39,510
you know powershell it load means

201
00:09:39,510 --> 00:09:40,950
basically load and assembly a dotnet

202
00:09:40,950 --> 00:09:43,200
assembly and on the third line it

203
00:09:43,200 --> 00:09:45,150
executes some method on that assembly

204
00:09:45,150 --> 00:09:48,320
called go and that assembly received and

205
00:09:48,320 --> 00:09:51,390
another URL which is happens to be the

206
00:09:51,390 --> 00:09:54,240
same one and then it sends parameter and

207
00:09:54,240 --> 00:09:56,520
you start doing a lot of stuff basically

208
00:09:56,520 --> 00:09:58,470
all the rest of the code here does two

209
00:09:58,470 --> 00:10:01,710
things create the vb file vbscript file

210
00:10:01,710 --> 00:10:05,040
which will execute the we should be

211
00:10:05,040 --> 00:10:07,140
executed later we'll go over that and

212
00:10:07,140 --> 00:10:09,540
create another link to a file that will

213
00:10:09,540 --> 00:10:12,900
execute the video file so let's go over

214
00:10:12,900 --> 00:10:16,170
that next step of the actual what's

215
00:10:16,170 --> 00:10:18,870
going on in the dll downloaded just just

216
00:10:18,870 --> 00:10:20,070
to remind you we're talking about

217
00:10:20,070 --> 00:10:22,410
downloading a dotnet dll loading it and

218
00:10:22,410 --> 00:10:24,090
calling the go method on the third line

219
00:10:24,090 --> 00:10:29,220
right so these this is the dll so it's

220
00:10:29,220 --> 00:10:31,350
not office kata you can check it out in

221
00:10:31,350 --> 00:10:34,740
I'll spy or any other reflector and you

222
00:10:34,740 --> 00:10:36,450
can see the East virtual method is

223
00:10:36,450 --> 00:10:38,160
virtual is checking for virtual store

224
00:10:38,160 --> 00:10:40,410
which will store is the future since

225
00:10:40,410 --> 00:10:44,520
Windows Vista and basically used to take

226
00:10:44,520 --> 00:10:47,340
legacy apps from a Windows XP which

227
00:10:47,340 --> 00:10:49,320
priced right for example see windows

228
00:10:49,320 --> 00:10:52,110
system32 and they give them some special

229
00:10:52,110 --> 00:10:54,650
virtual folder under a local app data

230
00:10:54,650 --> 00:10:56,580
okay so this malware

231
00:10:56,580 --> 00:10:58,920
checks that it's not running there it

232
00:10:58,920 --> 00:11:01,500
also we also have the algorithm for a

233
00:11:01,500 --> 00:11:03,390
generated a file a name

234
00:11:03,390 --> 00:11:06,149
randomly you can see that it should

235
00:11:06,149 --> 00:11:08,279
contain the string install update and

236
00:11:08,279 --> 00:11:10,769
setup so pretty easy to understand if

237
00:11:10,769 --> 00:11:16,140
it's related another method might be

238
00:11:16,140 --> 00:11:17,820
relevant is create random may dear

239
00:11:17,820 --> 00:11:20,480
create ideal random you can see the

240
00:11:20,480 --> 00:11:22,769
exact conditions if you want to create a

241
00:11:22,769 --> 00:11:25,589
reg X or some rule or signature to try

242
00:11:25,589 --> 00:11:27,660
to catch that pretty easy enough of

243
00:11:27,660 --> 00:11:30,140
skated it's same from the random string

244
00:11:30,140 --> 00:11:33,690
okay this is another part of the same

245
00:11:33,690 --> 00:11:36,750
dll that was downloaded and the actual

246
00:11:36,750 --> 00:11:40,019
go method which is this one is the one

247
00:11:40,019 --> 00:11:41,790
who does the actual work so first it

248
00:11:41,790 --> 00:11:44,070
checks if it's in any kind of Brazilian

249
00:11:44,070 --> 00:11:45,269
IP if it if it doesn't have any

250
00:11:45,269 --> 00:11:47,910
Brazilian app it won't execute then it

251
00:11:47,910 --> 00:11:49,800
checks for some software installed so

252
00:11:49,800 --> 00:11:51,930
what are the sort of install as I said

253
00:11:51,930 --> 00:11:54,480
before in nineteen America we moved to a

254
00:11:54,480 --> 00:11:58,320
software and special software that only

255
00:11:58,320 --> 00:11:59,700
with those software we can connect to

256
00:11:59,700 --> 00:12:02,100
the bank and do the transfer of money so

257
00:12:02,100 --> 00:12:03,839
they check a check for that for security

258
00:12:03,839 --> 00:12:06,540
software and only if all conditions are

259
00:12:06,540 --> 00:12:09,120
true they continue to the next stage of

260
00:12:09,120 --> 00:12:11,820
the payload which is actually taking the

261
00:12:11,820 --> 00:12:14,190
files from the server so we see here a

262
00:12:14,190 --> 00:12:16,850
for a file a payload which we'll examine

263
00:12:16,850 --> 00:12:20,910
further on and and you can also see the

264
00:12:20,910 --> 00:12:22,620
check for the business of the operating

265
00:12:22,620 --> 00:12:25,079
system which might be important because

266
00:12:25,079 --> 00:12:27,930
the payload of the client maximals is

267
00:12:27,930 --> 00:12:32,449
native it's written in C it has to be

268
00:12:32,449 --> 00:12:35,010
corresponding to the OS of the to the

269
00:12:35,010 --> 00:12:37,350
business of the OS so this is the four

270
00:12:37,350 --> 00:12:40,890
files payload and you can see in the

271
00:12:40,890 --> 00:12:43,800
middle the doctor file and the one below

272
00:12:43,800 --> 00:12:46,709
that at the VB script are the two files

273
00:12:46,709 --> 00:12:48,600
that were created in the original

274
00:12:48,600 --> 00:12:51,510
PowerShell if you remember and so the

275
00:12:51,510 --> 00:12:53,910
doctor only executes the bb3 file that's

276
00:12:53,910 --> 00:12:57,360
it and we can also see the word for that

277
00:12:57,360 --> 00:13:00,120
exited config which is a dotnet config

278
00:13:00,120 --> 00:13:02,490
file so basically a config file in

279
00:13:02,490 --> 00:13:06,390
dotnet you can have some conditions

280
00:13:06,390 --> 00:13:08,100
about what to execute when your executor

281
00:13:08,100 --> 00:13:08,640
doesn't it

282
00:13:08,640 --> 00:13:11,390
but in this convict file all you have is

283
00:13:11,390 --> 00:13:14,250
which runtime versions are supported

284
00:13:14,250 --> 00:13:16,230
which are two and four

285
00:13:16,230 --> 00:13:19,910
so assuming that 1.1 has long been gone

286
00:13:19,910 --> 00:13:22,770
this is basically another evidence why

287
00:13:22,770 --> 00:13:24,270
download this file if it doesn't do

288
00:13:24,270 --> 00:13:26,400
anything set saying the right time the

289
00:13:26,400 --> 00:13:28,740
supported runtimes are 2 & 4 it really

290
00:13:28,740 --> 00:13:31,140
has no meaning so it doesn't another

291
00:13:31,140 --> 00:13:33,660
evidence that it just copy-paste of some

292
00:13:33,660 --> 00:13:36,270
code or just seeing something gap and

293
00:13:36,270 --> 00:13:38,280
Ethernet downloading it and using it as

294
00:13:38,280 --> 00:13:41,610
is without any change and we of course

295
00:13:41,610 --> 00:13:44,130
have the payload which is the last slide

296
00:13:44,130 --> 00:13:47,030
the one with the without any extension

297
00:13:47,030 --> 00:13:49,920
and we also have the encoded PowerShell

298
00:13:49,920 --> 00:13:52,590
which is the third power shell that we

299
00:13:52,590 --> 00:13:57,870
see here which would go over and then we

300
00:13:57,870 --> 00:13:59,600
are currently at the stage of executing

301
00:13:59,600 --> 00:14:02,040
creating the VB script and linked files

302
00:14:02,040 --> 00:14:03,900
which we've seen in the first powershell

303
00:14:03,900 --> 00:14:06,090
execute a blank file the linked file

304
00:14:06,090 --> 00:14:09,240
execute the DB 3 file the vb3 file looks

305
00:14:09,240 --> 00:14:11,880
like this ok creating a object of type

306
00:14:11,880 --> 00:14:15,030
shell calling the run method ok just a

307
00:14:15,030 --> 00:14:16,920
standard method of doing that but you

308
00:14:16,920 --> 00:14:19,710
might ask yourself why doing the first

309
00:14:19,710 --> 00:14:21,960
part in PowerShell this one in BB Street

310
00:14:21,960 --> 00:14:25,440
so this is an evidence that all all of

311
00:14:25,440 --> 00:14:26,880
the parts was not written by the same

312
00:14:26,880 --> 00:14:30,390
people and the folder names you can see

313
00:14:30,390 --> 00:14:31,740
that it corresponds to the regular

314
00:14:31,740 --> 00:14:34,020
expression where we examined before 6 to

315
00:14:34,020 --> 00:14:37,050
60 characters etc and and only does it

316
00:14:37,050 --> 00:14:39,030
takes the current folder and put that in

317
00:14:39,030 --> 00:14:42,900
the script itself so and we're getting

318
00:14:42,900 --> 00:14:47,700
now to the execution of P shell exact

319
00:14:47,700 --> 00:14:51,560
which we'll talk about in a second and

320
00:14:51,560 --> 00:14:55,590
decrypting the power shift clip ok so

321
00:14:55,590 --> 00:14:59,100
what is special Issac Peschel exact is a

322
00:14:59,100 --> 00:15:03,090
legitimate software what you do it helps

323
00:15:03,090 --> 00:15:06,840
IT administrators execute power shell

324
00:15:06,840 --> 00:15:08,190
scripts that have some sensitive

325
00:15:08,190 --> 00:15:09,540
information like passwords and stuff

326
00:15:09,540 --> 00:15:12,090
like that in an enterprise organization

327
00:15:12,090 --> 00:15:14,010
where they don't want the endpoints to

328
00:15:14,010 --> 00:15:17,580
have the passwords as a clear text so

329
00:15:17,580 --> 00:15:19,830
you can its have a UI a very nice way

330
00:15:19,830 --> 00:15:22,740
you can just take any partial file and

331
00:15:22,740 --> 00:15:25,710
put a password it comes it up and then

332
00:15:25,710 --> 00:15:28,830
it's very hard to reverse engineer the

333
00:15:28,830 --> 00:15:30,060
software itself

334
00:15:30,060 --> 00:15:32,970
because even if it's written in dotnet

335
00:15:32,970 --> 00:15:36,650
it has a very very good office occasion

336
00:15:36,650 --> 00:15:40,070
which you talk about in one second but

337
00:15:40,070 --> 00:15:42,810
that software is being used them I mean

338
00:15:42,810 --> 00:15:44,700
all over you can take your own script

339
00:15:44,700 --> 00:15:46,560
with the passwords inside encrypt it

340
00:15:46,560 --> 00:15:49,140
distribute it right propagate it in your

341
00:15:49,140 --> 00:15:51,330
end endpoints and then execute the

342
00:15:51,330 --> 00:15:53,460
software in order to write a parser

343
00:15:53,460 --> 00:15:58,440
itself so the visual exec itself uses

344
00:15:58,440 --> 00:16:01,670
very up-to-date of sketching techniques

345
00:16:01,670 --> 00:16:05,370
so for example a coda mission in dotnet

346
00:16:05,370 --> 00:16:09,030
is a real pain in the ass for reversers

347
00:16:09,030 --> 00:16:11,430
because the text basically takes

348
00:16:11,430 --> 00:16:14,790
existing code it translates the code

349
00:16:14,790 --> 00:16:17,430
into a byte array it translates actually

350
00:16:17,430 --> 00:16:19,230
B il the intermediate language of

351
00:16:19,230 --> 00:16:22,440
the.net code to il-2 battery then it

352
00:16:22,440 --> 00:16:24,060
stores the battery somewhere inside the

353
00:16:24,060 --> 00:16:27,210
assembly and then upon execution it

354
00:16:27,210 --> 00:16:31,290
loads it and execute that so standard

355
00:16:31,290 --> 00:16:33,630
reflector won't help you write like as

356
00:16:33,630 --> 00:16:35,810
file write guide so stuff like that and

357
00:16:35,810 --> 00:16:38,850
that there's a reflector called VN spy

358
00:16:38,850 --> 00:16:40,620
which is another open source project

359
00:16:40,620 --> 00:16:45,180
based on il spy which basically knows to

360
00:16:45,180 --> 00:16:46,950
the bag this code up to the point of the

361
00:16:46,950 --> 00:16:48,990
code emission loading and then it

362
00:16:48,990 --> 00:16:50,430
translates that immediately to your

363
00:16:50,430 --> 00:16:53,550
favorite dotnet language - eShop so we

364
00:16:53,550 --> 00:16:57,270
just show you the shop hold and so this

365
00:16:57,270 --> 00:16:58,830
technique is familiar right it does

366
00:16:58,830 --> 00:17:03,240
assembly dot load loads the donut

367
00:17:03,240 --> 00:17:05,189
assembly activate the create instance is

368
00:17:05,189 --> 00:17:07,470
the way that create the instance and

369
00:17:07,470 --> 00:17:10,230
then using method info dot invoke which

370
00:17:10,230 --> 00:17:13,589
is another reflection and method email

371
00:17:13,589 --> 00:17:16,790
net you just execute the code itself

372
00:17:16,790 --> 00:17:19,319
and it does that with multiple threads

373
00:17:19,319 --> 00:17:21,270
which are being synchronized in order

374
00:17:21,270 --> 00:17:23,550
for you to have really hard time when

375
00:17:23,550 --> 00:17:26,250
you the baguette right because the you

376
00:17:26,250 --> 00:17:27,510
always jumps for point to point and you

377
00:17:27,510 --> 00:17:29,880
don't really have anywhere to stop and

378
00:17:29,880 --> 00:17:32,150
just go over the flow synchronously and

379
00:17:32,150 --> 00:17:35,730
of course all the usual and sketching

380
00:17:35,730 --> 00:17:37,620
techniques which are in unicode

381
00:17:37,620 --> 00:17:39,450
characters unicode strings

382
00:17:39,450 --> 00:17:41,910
methods class name everything is unicode

383
00:17:41,910 --> 00:17:44,140
and nothing is an actual character

384
00:17:44,140 --> 00:17:47,230
that you can walk with so my point is

385
00:17:47,230 --> 00:17:50,230
it's very hard to it is feasible but

386
00:17:50,230 --> 00:17:52,660
it's very hard to reverse engineer lucky

387
00:17:52,660 --> 00:17:58,840
for us the script who has not encrypted

388
00:17:58,840 --> 00:18:01,240
with a password the client maximals

389
00:18:01,240 --> 00:18:05,320
script was actually only base64 encoded

390
00:18:05,320 --> 00:18:09,010
so it was very easy to just translate it

391
00:18:09,010 --> 00:18:12,730
back to PowerShell and because it has

392
00:18:12,730 --> 00:18:15,430
two method right the PL Isaac

393
00:18:15,430 --> 00:18:17,470
you can either encrypt it or you can

394
00:18:17,470 --> 00:18:20,170
encode it so they choose not encrypted

395
00:18:20,170 --> 00:18:25,180
and cool so it's the faster for us an

396
00:18:25,180 --> 00:18:27,400
interest in fact about pecially exact I

397
00:18:27,400 --> 00:18:30,610
said it's a legitimate software we

398
00:18:30,610 --> 00:18:32,590
published our blog at the 12th of

399
00:18:32,590 --> 00:18:37,270
September last month and it had a zero

400
00:18:37,270 --> 00:18:40,390
out of zero zero out of 64 in virustotal

401
00:18:40,390 --> 00:18:44,410
and since the publication you can see

402
00:18:44,410 --> 00:18:47,680
the rise on the left column and for the

403
00:18:47,680 --> 00:18:50,170
guys in the back I'll just say that six

404
00:18:50,170 --> 00:18:52,120
days thereafter that it go to two

405
00:18:52,120 --> 00:18:54,070
identifications as a malicious software

406
00:18:54,070 --> 00:18:57,250
and currently it's a tech notifications

407
00:18:57,250 --> 00:18:59,260
as malicious software since the

408
00:18:59,260 --> 00:19:03,250
publication so interesting fact before

409
00:19:03,250 --> 00:19:08,290
that it has zero okay so we've gotten to

410
00:19:08,290 --> 00:19:12,580
the last part of the of the panel and

411
00:19:12,580 --> 00:19:14,860
what actually happens here is the heart

412
00:19:14,860 --> 00:19:19,150
of the of the process basically when you

413
00:19:19,150 --> 00:19:22,540
have a malware you wanted to inject

414
00:19:22,540 --> 00:19:24,790
itself into an existing process that is

415
00:19:24,790 --> 00:19:27,970
elevated preferably or you want to

416
00:19:27,970 --> 00:19:29,740
create an innovative process anyone to

417
00:19:29,740 --> 00:19:32,410
inject yourself into it so client

418
00:19:32,410 --> 00:19:36,420
Maximus uses another open source library

419
00:19:36,420 --> 00:19:39,760
this this library is called powersploit

420
00:19:39,760 --> 00:19:43,840
suit also available on github and you'll

421
00:19:43,840 --> 00:19:46,540
have the links ready for you in the

422
00:19:46,540 --> 00:19:50,440
description below so this is a very rich

423
00:19:50,440 --> 00:19:53,950
PowerShell library that enables many

424
00:19:53,950 --> 00:19:57,260
many pen testing stuff like for example

425
00:19:57,260 --> 00:19:59,390
persistency you can choose from many

426
00:19:59,390 --> 00:20:02,090
different methods of persistency and you

427
00:20:02,090 --> 00:20:04,850
can have different abc's signatures

428
00:20:04,850 --> 00:20:07,370
checked right there's this this week

429
00:20:07,370 --> 00:20:10,340
class 101 method of Ava checks if anyone

430
00:20:10,340 --> 00:20:13,580
is familiar with if not you should

431
00:20:13,580 --> 00:20:15,650
google it it's very nice they generate

432
00:20:15,650 --> 00:20:17,150
many many execute the generate

433
00:20:17,150 --> 00:20:20,690
executable they change it until the anti

434
00:20:20,690 --> 00:20:25,160
virals does not detect it as virus so it

435
00:20:25,160 --> 00:20:28,730
has this capability as well it can set

436
00:20:28,730 --> 00:20:31,430
master boot records which is a cool

437
00:20:31,430 --> 00:20:33,820
feature and the most important one for

438
00:20:33,820 --> 00:20:36,080
related to that client maximals does is

439
00:20:36,080 --> 00:20:39,730
a remote code execution right so the way

440
00:20:39,730 --> 00:20:42,830
maximals utilize this library is by

441
00:20:42,830 --> 00:20:46,060
using a technique technique called

442
00:20:46,060 --> 00:20:49,840
reflective pea injection right so

443
00:20:49,840 --> 00:20:53,630
usually when we want to inject something

444
00:20:53,630 --> 00:20:56,420
into another process we do a right

445
00:20:56,420 --> 00:20:59,000
closest memory and then we do a virtual

446
00:20:59,000 --> 00:21:01,910
aloe KX if we need and then we do create

447
00:21:01,910 --> 00:21:05,120
a most thread and stuff like that so but

448
00:21:05,120 --> 00:21:08,600
we need to do all that in order to take

449
00:21:08,600 --> 00:21:10,910
our code and put it in the in another

450
00:21:10,910 --> 00:21:13,010
process and then our code would probably

451
00:21:13,010 --> 00:21:14,840
be a some kind of shell code which will

452
00:21:14,840 --> 00:21:16,850
perform the load library and then get

453
00:21:16,850 --> 00:21:18,110
pork address and then load the

454
00:21:18,110 --> 00:21:20,030
dependencies of so and so on so the

455
00:21:20,030 --> 00:21:22,390
reflective pea injection what it does

456
00:21:22,390 --> 00:21:24,800
basically it goes over to the remote

457
00:21:24,800 --> 00:21:27,650
process and it does all these heavy

458
00:21:27,650 --> 00:21:29,900
heavy lifting from the remote process

459
00:21:29,900 --> 00:21:32,870
right so it goes over let's say I want

460
00:21:32,870 --> 00:21:35,330
to inject two CMD X I so it goes over to

461
00:21:35,330 --> 00:21:38,150
CMA exam and then it runs over there in

462
00:21:38,150 --> 00:21:40,940
CMD X the outer space it runs the code

463
00:21:40,940 --> 00:21:44,060
that basically do the load library right

464
00:21:44,060 --> 00:21:47,210
it parses the PE header of the DLL or

465
00:21:47,210 --> 00:21:49,280
exit that we want to inject it goes over

466
00:21:49,280 --> 00:21:52,460
there de patatas table and then add the

467
00:21:52,460 --> 00:21:54,110
remote process it performs the load

468
00:21:54,110 --> 00:21:56,990
library of every dependency and then the

469
00:21:56,990 --> 00:22:01,040
get work address and basically it takes

470
00:22:01,040 --> 00:22:03,230
the finally text execution pointer and

471
00:22:03,230 --> 00:22:06,020
puts it in our main and we have our

472
00:22:06,020 --> 00:22:07,610
malicious a payload

473
00:22:07,610 --> 00:22:09,380
being injected into

474
00:22:09,380 --> 00:22:13,340
and it does look that remotely end in

475
00:22:13,340 --> 00:22:16,039
PowerShell so if you want to see the

476
00:22:16,039 --> 00:22:19,880
source code of that critical staff also

477
00:22:19,880 --> 00:22:23,000
available in github same as before the

478
00:22:23,000 --> 00:22:24,559
link is in the description of this slide

479
00:22:24,559 --> 00:22:27,830
and and this is exactly the feature that

480
00:22:27,830 --> 00:22:34,370
find Maximus utilized for that so we're

481
00:22:34,370 --> 00:22:36,620
talking about imitating the windows

482
00:22:36,620 --> 00:22:40,009
loader as I said before and the windows

483
00:22:40,009 --> 00:22:43,190
API involved are the same only there are

484
00:22:43,190 --> 00:22:46,129
not being executed on a suspicious

485
00:22:46,129 --> 00:22:48,019
process right and there have been

486
00:22:48,019 --> 00:22:51,200
executed on a legitimate process because

487
00:22:51,200 --> 00:22:54,080
it'd be done remotely okay so it's

488
00:22:54,080 --> 00:22:57,169
another evasive technique again cool

489
00:22:57,169 --> 00:23:01,370
feature of this powersploit suit and

490
00:23:01,370 --> 00:23:03,740
here you can see an example of the

491
00:23:03,740 --> 00:23:06,710
obfuscated powershell script this is the

492
00:23:06,710 --> 00:23:08,240
after office question of course but you

493
00:23:08,240 --> 00:23:10,580
can see that the executable is in clear

494
00:23:10,580 --> 00:23:15,470
text after decoding it and that's it at

495
00:23:15,470 --> 00:23:18,289
this point we have a cm vxi by the way

496
00:23:18,289 --> 00:23:20,240
we've also seen a warp at Delta X then

497
00:23:20,240 --> 00:23:23,000
as we see how does not exempt and which

498
00:23:23,000 --> 00:23:25,009
is infected with the malicious payload

499
00:23:25,009 --> 00:23:29,360
which is a native DLL and also it points

500
00:23:29,360 --> 00:23:30,860
to the main of the DLL but if it has

501
00:23:30,860 --> 00:23:32,990
some key LS functions or stuff like that

502
00:23:32,990 --> 00:23:36,980
it will also execute those and and

503
00:23:36,980 --> 00:23:40,090
basically that's it

504
00:23:40,149 --> 00:23:42,259
another thing I wanted to mention about

505
00:23:42,259 --> 00:23:45,620
client maximals if we have a chance to

506
00:23:45,620 --> 00:23:48,230
talk about it is it's a USC bypass

507
00:23:48,230 --> 00:23:53,659
method basically what it does it rides

508
00:23:53,659 --> 00:23:57,500
on auto elevated feature of Windows that

509
00:23:57,500 --> 00:23:59,570
were disabled in Windows 10 creators

510
00:23:59,570 --> 00:24:02,120
update so up to Windows 10 kratos update

511
00:24:02,120 --> 00:24:06,529
it is an widely available what it

512
00:24:06,529 --> 00:24:09,019
basically a relies on is that you have

513
00:24:09,019 --> 00:24:11,360
the event MGR detects an event MGR Joe

514
00:24:11,360 --> 00:24:15,019
Texas is the Event Viewer itself it

515
00:24:15,019 --> 00:24:18,200
doesn't have any UI so it's the eggs are

516
00:24:18,200 --> 00:24:19,730
realized on em and see the text there

517
00:24:19,730 --> 00:24:20,570
which is the Microsoft management

518
00:24:20,570 --> 00:24:23,419
console to be its UI right

519
00:24:23,419 --> 00:24:26,299
so Windows allows you to write a

520
00:24:26,299 --> 00:24:29,720
registry key and replace the executable

521
00:24:29,720 --> 00:24:32,000
for the MMC or put another path for it

522
00:24:32,000 --> 00:24:35,629
so the thing special about the event MGR

523
00:24:35,629 --> 00:24:37,700
detects them is that in its manifest

524
00:24:37,700 --> 00:24:40,519
right Windows disability with a manifest

525
00:24:40,519 --> 00:24:42,860
that has a high script highest available

526
00:24:42,860 --> 00:24:45,080
privileges so every time you want to

527
00:24:45,080 --> 00:24:50,110
open that MMC is being opened with the

528
00:24:50,110 --> 00:24:53,480
highest available privileges so if you

529
00:24:53,480 --> 00:24:55,850
just change that register location to a

530
00:24:55,850 --> 00:24:58,309
diff to you don't change it because by

531
00:24:58,309 --> 00:25:00,350
default it's empty right and and Windows

532
00:25:00,350 --> 00:25:03,679
looks up in windows system 32 for MMC to

533
00:25:03,679 --> 00:25:06,350
text but you put your own value in the

534
00:25:06,350 --> 00:25:10,159
default value of in directory in this

535
00:25:10,159 --> 00:25:13,220
path you can put any ex of yours and if

536
00:25:13,220 --> 00:25:15,590
you click on event MGR and Windows we

537
00:25:15,590 --> 00:25:17,120
look for the MMC which would be your

538
00:25:17,120 --> 00:25:21,110
file which will be executed and elevated

539
00:25:21,110 --> 00:25:25,549
right so this is the technique that

540
00:25:25,549 --> 00:25:28,279
tracked maximal cell uses for you see

541
00:25:28,279 --> 00:25:32,600
bypass by the way Windows 10 had have a

542
00:25:32,600 --> 00:25:34,250
different exit with Auto elevation which

543
00:25:34,250 --> 00:25:37,519
is the SDC altitude of exam some kind of

544
00:25:37,519 --> 00:25:40,760
a Beca thing and exists is Vista and so

545
00:25:40,760 --> 00:25:43,129
you can see in the code it has a

546
00:25:43,129 --> 00:25:45,379
differentiation between em he does the

547
00:25:45,379 --> 00:25:47,659
RTL get version in all the tools in

548
00:25:47,659 --> 00:25:49,519
which we lose version II try it runs out

549
00:25:49,519 --> 00:25:51,590
and then according to the version it

550
00:25:51,590 --> 00:25:55,070
decides which executable to use as an

551
00:25:55,070 --> 00:25:58,279
auto elevation and you can see the sub

552
00:25:58,279 --> 00:26:02,659
key on top and then the decision of

553
00:26:02,659 --> 00:26:05,360
which version and finally at the rest of

554
00:26:05,360 --> 00:26:08,450
the code will be executed the process

555
00:26:08,450 --> 00:26:13,669
according to the version and that's it i

556
00:26:13,669 --> 00:26:18,289
hope that wrapping up this i mean you

557
00:26:18,289 --> 00:26:20,720
can go over a later on the recitation of

558
00:26:20,720 --> 00:26:22,850
the videos it's a lot of thicker stuff

559
00:26:22,850 --> 00:26:25,490
but i hope that you might got anything

560
00:26:25,490 --> 00:26:28,519
that helped that will help you using the

561
00:26:28,519 --> 00:26:31,149
multiple different techniques of

562
00:26:31,149 --> 00:26:35,109
maximals infection process and now have

563
00:26:35,109 --> 00:26:38,399
any questions be happy

