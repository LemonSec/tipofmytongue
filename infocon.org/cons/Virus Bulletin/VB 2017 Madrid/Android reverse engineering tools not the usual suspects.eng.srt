1
00:00:00,060 --> 00:00:03,600
is to be able to kind of carry like well

2
00:00:03,600 --> 00:00:06,270
like a briefcase your Android's reverse

3
00:00:06,270 --> 00:00:10,200
engineering environments and share that

4
00:00:10,200 --> 00:00:12,540
with others so that they can focus on

5
00:00:12,540 --> 00:00:15,690
really just the sample so this is what

6
00:00:15,690 --> 00:00:17,880
I've done I've done a docker container

7
00:00:17,880 --> 00:00:20,250
and I'll explain after why I chose

8
00:00:20,250 --> 00:00:24,300
docker and the nice thing about it is

9
00:00:24,300 --> 00:00:26,849
that to install it is as simple as

10
00:00:26,849 --> 00:00:30,420
running docker pool and the name of my

11
00:00:30,420 --> 00:00:36,390
container okay oh it's not exactly a

12
00:00:36,390 --> 00:00:38,190
briefcase it's more a suitcase okay

13
00:00:38,190 --> 00:00:40,500
because depending on what you have on

14
00:00:40,500 --> 00:00:42,719
your laptop for instance it will be

15
00:00:42,719 --> 00:00:45,809
either a few megabytes to download or up

16
00:00:45,809 --> 00:00:50,730
to three gigabytes in the worst cases so

17
00:00:50,730 --> 00:00:53,370
um it could be worse

18
00:00:53,370 --> 00:00:56,039
it could have been like that right could

19
00:00:56,039 --> 00:00:57,690
have been a huge elephants and this is

20
00:00:57,690 --> 00:01:00,510
precisely the reason while I'm not using

21
00:01:00,510 --> 00:01:03,690
virtual machines I could have been using

22
00:01:03,690 --> 00:01:07,229
VirtualBox or VMware those are fine and

23
00:01:07,229 --> 00:01:09,689
plenty of situations but here when I

24
00:01:09,689 --> 00:01:12,390
just want to share reverse engineering

25
00:01:12,390 --> 00:01:15,570
environments well the virtual machines

26
00:01:15,570 --> 00:01:17,670
they are creating another operating

27
00:01:17,670 --> 00:01:19,950
system on top of your operating system

28
00:01:19,950 --> 00:01:23,130
so it's heavier you have more things to

29
00:01:23,130 --> 00:01:26,970
download and also you have performances

30
00:01:26,970 --> 00:01:30,990
which are not as good as that so that

31
00:01:30,990 --> 00:01:33,150
was the reason for one reason for the

32
00:01:33,150 --> 00:01:37,530
choice another reason for that's for

33
00:01:37,530 --> 00:01:40,200
using docker is that well docker

34
00:01:40,200 --> 00:01:43,320
containers basically you kind of script

35
00:01:43,320 --> 00:01:45,119
them to say what you want to put in the

36
00:01:45,119 --> 00:01:47,189
container if you want this or that tool

37
00:01:47,189 --> 00:01:50,610
and so it's basically just a big script

38
00:01:50,610 --> 00:01:52,680
which is called a doctor file and in

39
00:01:52,680 --> 00:01:54,360
that Stucker file well if you choose to

40
00:01:54,360 --> 00:01:57,180
put this or that so in my doctor

41
00:01:57,180 --> 00:02:00,149
container and well you can download it

42
00:02:00,149 --> 00:02:02,490
of course that's on the github if you

43
00:02:02,490 --> 00:02:04,649
decide for instance well there is the

44
00:02:04,649 --> 00:02:07,500
emulator for Android five and seven if

45
00:02:07,500 --> 00:02:09,899
you decide you want to work with six you

46
00:02:09,899 --> 00:02:11,460
remove two lines and

47
00:02:11,460 --> 00:02:15,080
yours right it's not very complicated

48
00:02:15,080 --> 00:02:17,310
and I'll show you a little bit what it

49
00:02:17,310 --> 00:02:26,610
looks like so yeah so I have here the

50
00:02:26,610 --> 00:02:28,170
docker container which is already

51
00:02:28,170 --> 00:02:31,260
running and then to connect to it it's

52
00:02:31,260 --> 00:02:35,040
just like connecting to another host in

53
00:02:35,040 --> 00:02:39,510
my case I will connect using SSH and my

54
00:02:39,510 --> 00:02:41,820
SSH for that container is running on

55
00:02:41,820 --> 00:02:43,380
port 5022

56
00:02:43,380 --> 00:02:45,720
you can customize that and you can put

57
00:02:45,720 --> 00:02:48,630
it to any ports that you like even the

58
00:02:48,630 --> 00:02:52,940
regular 22 which you'd like to

59
00:02:55,850 --> 00:02:57,950
1:01

60
00:02:57,950 --> 00:03:00,870
you can customize of course as well the

61
00:03:00,870 --> 00:03:03,780
password and then there we are

62
00:03:03,780 --> 00:03:06,480
is that big enough I can make it a

63
00:03:06,480 --> 00:03:09,960
little bit bigger that's better and well

64
00:03:09,960 --> 00:03:12,120
you have all the kind of plenty of tools

65
00:03:12,120 --> 00:03:13,950
for Android reverse engineering which

66
00:03:13,950 --> 00:03:19,020
are there I have a few samples in this

67
00:03:19,020 --> 00:03:24,420
directory so for instance sorry I have

68
00:03:24,420 --> 00:03:28,320
here an Android Zed tour example we can

69
00:03:28,320 --> 00:03:35,400
run apktool on that APK to a PK d said

70
00:03:35,400 --> 00:03:40,230
torgue yep

71
00:03:40,230 --> 00:03:45,270
it's because I've got to use that D and

72
00:03:45,270 --> 00:03:48,020
that dory

73
00:03:50,620 --> 00:03:57,049
and there it goes like disassembling the

74
00:03:57,049 --> 00:04:02,510
sample and you have the results in

75
00:04:02,510 --> 00:04:06,110
desert org directory you can have a look

76
00:04:06,110 --> 00:04:08,209
for instance at the Android manifest you

77
00:04:08,209 --> 00:04:10,159
see that it has been converted to the

78
00:04:10,159 --> 00:04:13,579
text format you can have a look at

79
00:04:13,579 --> 00:04:16,728
smiley files if you'd like you let's say

80
00:04:16,728 --> 00:04:21,769
what do we have here this class will see

81
00:04:21,769 --> 00:04:24,680
that one a little bit afterwards okay so

82
00:04:24,680 --> 00:04:28,930
well standard that's that's stuff like

83
00:04:28,930 --> 00:04:31,400
what else can we do we can launch an

84
00:04:31,400 --> 00:04:41,440
emulator so there would start some and

85
00:04:41,440 --> 00:04:47,050
that there it is we also have radar I

86
00:04:47,050 --> 00:04:50,630
can launch that on this is the dalvik

87
00:04:50,630 --> 00:04:54,979
executable for Zen Touareg and while the

88
00:04:54,979 --> 00:04:59,570
emulator is loading so my laptop is kind

89
00:04:59,570 --> 00:05:02,120
of a little bit old so it's a should be

90
00:05:02,120 --> 00:05:08,900
running faster and yours actually and

91
00:05:08,900 --> 00:05:14,660
will I do this and so here we've got the

92
00:05:14,660 --> 00:05:17,270
Android emulator that takes as you know

93
00:05:17,270 --> 00:05:21,050
quite a lot a lot of time to boot and

94
00:05:21,050 --> 00:05:27,680
I'll go back to the slides in the paper

95
00:05:27,680 --> 00:05:30,320
you've got plenty of details as to how

96
00:05:30,320 --> 00:05:34,130
the doctor file was created as it's only

97
00:05:34,130 --> 00:05:36,169
a 30-minute session I'll skip a little

98
00:05:36,169 --> 00:05:37,610
bit that but you have all the details

99
00:05:37,610 --> 00:05:39,740
there because it was a little bit kind

100
00:05:39,740 --> 00:05:41,570
of complicated there are a few tricks

101
00:05:41,570 --> 00:05:46,580
like when you want to to start to demons

102
00:05:46,580 --> 00:05:49,250
you can send you can write to commands

103
00:05:49,250 --> 00:05:51,650
but if you do in a doctor file well the

104
00:05:51,650 --> 00:05:53,599
second one supersedes the first one so

105
00:05:53,599 --> 00:05:54,919
you're not actually launching both

106
00:05:54,919 --> 00:05:58,070
demons but only one so you've got to do

107
00:05:58,070 --> 00:06:00,469
a little trick to get both running at

108
00:06:00,469 --> 00:06:03,550
the same time if you want

109
00:06:03,960 --> 00:06:09,520
GEB scripting so if you've been working

110
00:06:09,520 --> 00:06:12,310
on Android malware analysis I guess you

111
00:06:12,310 --> 00:06:16,150
already know Jeb JEB is quite good tool

112
00:06:16,150 --> 00:06:18,670
that is as similar and the compiler tool

113
00:06:18,670 --> 00:06:22,780
for Android and like most disassemblers

114
00:06:22,780 --> 00:06:25,390
it supports scripts and plugins to kind

115
00:06:25,390 --> 00:06:28,090
of automate some reverse engineering

116
00:06:28,090 --> 00:06:32,710
tasks I thought while I have was having

117
00:06:32,710 --> 00:06:35,890
a look at the documentation on the web

118
00:06:35,890 --> 00:06:37,600
that it was kind of a little bit

119
00:06:37,600 --> 00:06:39,790
difficult to understand exactly how to

120
00:06:39,790 --> 00:06:44,350
write your own scripts so now what I'm

121
00:06:44,350 --> 00:06:48,090
going to show you is like nearly a

122
00:06:48,090 --> 00:06:51,730
workshop I'm going to show you exactly

123
00:06:51,730 --> 00:06:53,830
how to write one script in the case

124
00:06:53,830 --> 00:06:56,710
study for Android said torque so

125
00:06:56,710 --> 00:06:59,290
androids at org it's a very interesting

126
00:06:59,290 --> 00:07:02,590
malware they appeared the family

127
00:07:02,590 --> 00:07:05,100
appeared in 2015 but it's still active

128
00:07:05,100 --> 00:07:07,840
nowadays and there's tons of features

129
00:07:07,840 --> 00:07:10,570
like anti emulator and he didn't

130
00:07:10,570 --> 00:07:13,450
debugger we blogged about it you can

131
00:07:13,450 --> 00:07:15,070
check if you want it's not really the

132
00:07:15,070 --> 00:07:17,290
point of this talk today here we're

133
00:07:17,290 --> 00:07:20,530
gonna focus only on D obfuscating

134
00:07:20,530 --> 00:07:24,040
strings and do that with with a plugin

135
00:07:24,040 --> 00:07:27,400
so basically it's simple you have

136
00:07:27,400 --> 00:07:29,950
strings like that okay that's not

137
00:07:29,950 --> 00:07:32,110
readable and we want to turn it into

138
00:07:32,110 --> 00:07:33,960
something like that which is far nicer

139
00:07:33,960 --> 00:07:40,479
right first thing to do well not reven

140
00:07:40,479 --> 00:07:43,690
reinvent the wheel you've got plenty of

141
00:07:43,690 --> 00:07:46,030
scripts which are shipped with Jeb and

142
00:07:46,030 --> 00:07:48,280
they are in the scripts directory so I

143
00:07:48,280 --> 00:07:50,380
suggest that you pick up in that

144
00:07:50,380 --> 00:07:53,710
directory something that looks like you

145
00:07:53,710 --> 00:07:56,050
which is close to what you want to do in

146
00:07:56,050 --> 00:07:58,390
our case there was another script which

147
00:07:58,390 --> 00:08:01,990
was called Jeb decrypt strings which was

148
00:08:01,990 --> 00:08:03,910
decrypting streams strings for the Oh

149
00:08:03,910 --> 00:08:07,900
Bad's malware Android Oh Pat so Android

150
00:08:07,900 --> 00:08:10,300
Oh bad and Android Zetas are totally

151
00:08:10,300 --> 00:08:12,310
different but still it's about

152
00:08:12,310 --> 00:08:16,710
decrypting strings so there is a similar

153
00:08:17,199 --> 00:08:20,270
it's a Python script and we can keep

154
00:08:20,270 --> 00:08:24,380
most of the beginning the beginning for

155
00:08:24,380 --> 00:08:26,479
instance well we wants to open or

156
00:08:26,479 --> 00:08:29,870
Android sample in Jeb this is called a

157
00:08:29,870 --> 00:08:32,419
project right so we're opening our

158
00:08:32,419 --> 00:08:36,200
project then the other thing that we

159
00:08:36,200 --> 00:08:38,750
want to do in the script is that we want

160
00:08:38,750 --> 00:08:41,240
to take all the decompile source codes

161
00:08:41,240 --> 00:08:44,330
that we have and parse those and we are

162
00:08:44,330 --> 00:08:46,160
going to do this gave the strings in

163
00:08:46,160 --> 00:08:49,940
those in jabbed this is called a code

164
00:08:49,940 --> 00:08:54,830
unit and so we have to look for Java

165
00:08:54,830 --> 00:08:59,230
source code unit which are like that

166
00:08:59,440 --> 00:09:02,510
then of course you've got some lines in

167
00:09:02,510 --> 00:09:04,670
that script which are specific to

168
00:09:04,670 --> 00:09:07,870
Android oh bad so we can remove those

169
00:09:07,870 --> 00:09:11,720
and what we have to do is get like a

170
00:09:11,720 --> 00:09:16,520
handle on our D compiled class so this

171
00:09:16,520 --> 00:09:19,130
is represented by the object which is

172
00:09:19,130 --> 00:09:21,589
your java class which is of the type I J

173
00:09:21,589 --> 00:09:24,440
the class if you go and see the API on

174
00:09:24,440 --> 00:09:26,990
the web it will tell you that there's

175
00:09:26,990 --> 00:09:28,660
there are plenty of methods for that

176
00:09:28,660 --> 00:09:31,430
that will tell you in your decompile

177
00:09:31,430 --> 00:09:33,170
class what are the methods whatever

178
00:09:33,170 --> 00:09:35,450
fields what's the name plenty of

179
00:09:35,450 --> 00:09:41,839
interesting stuff in our case for

180
00:09:41,839 --> 00:09:45,640
Android Zed toric it happens that all

181
00:09:45,640 --> 00:09:48,950
obfuscated strings are located in the

182
00:09:48,950 --> 00:09:50,930
static constructors in the class

183
00:09:50,930 --> 00:09:54,140
constructor right so what we want to do

184
00:09:54,140 --> 00:09:57,110
in our script is that we are going for

185
00:09:57,110 --> 00:09:59,150
our decompile class to list all methods

186
00:09:59,150 --> 00:10:02,480
oh this is method a I don't care method

187
00:10:02,480 --> 00:10:04,580
B I don't care oh this is the static

188
00:10:04,580 --> 00:10:06,980
constructor I want to go into that and

189
00:10:06,980 --> 00:10:09,380
to to to do some more processing there

190
00:10:09,380 --> 00:10:11,180
so this is what we're doing

191
00:10:11,180 --> 00:10:13,580
getting all methods and the filtering

192
00:10:13,580 --> 00:10:17,860
just static constructor

193
00:10:18,610 --> 00:10:21,579
so we're in the constructor the

194
00:10:21,579 --> 00:10:23,170
constructor is made of lines

195
00:10:23,170 --> 00:10:25,799
well more precisely those are called

196
00:10:25,799 --> 00:10:29,949
statements right and we are particularly

197
00:10:29,949 --> 00:10:32,980
we we have to have a look at lines which

198
00:10:32,980 --> 00:10:37,149
look like those like a value equals well

199
00:10:37,149 --> 00:10:40,899
this is our decoding method and the the

200
00:10:40,899 --> 00:10:43,749
obfuscated string so precisely we're

201
00:10:43,749 --> 00:10:48,670
looking for assignments so that's we

202
00:10:48,670 --> 00:10:51,489
that's what we do we filter out and we

203
00:10:51,489 --> 00:10:53,579
only keep lines which are assignments

204
00:10:53,579 --> 00:10:58,299
then more precisely up there have a look

205
00:10:58,299 --> 00:11:02,079
on the right hand side well we are we

206
00:11:02,079 --> 00:11:04,660
want something that is first calling

207
00:11:04,660 --> 00:11:07,720
calling a method and that method must be

208
00:11:07,720 --> 00:11:11,290
C dot a in our case well I'm sorry about

209
00:11:11,290 --> 00:11:13,059
the names but they up this gated all

210
00:11:13,059 --> 00:11:15,639
that that the names as well so that's

211
00:11:15,639 --> 00:11:17,230
what we have to look for it and that's

212
00:11:17,230 --> 00:11:20,110
what we're doing in the in the script we

213
00:11:20,110 --> 00:11:22,019
get the right-hand part of the statement

214
00:11:22,019 --> 00:11:25,049
check it as a call and check that the

215
00:11:25,049 --> 00:11:27,579
the method we are calling has the right

216
00:11:27,579 --> 00:11:32,739
signature okay so we are in an

217
00:11:32,739 --> 00:11:35,470
interesting line and we need to do ND

218
00:11:35,470 --> 00:11:38,230
office case the string where is the

219
00:11:38,230 --> 00:11:40,929
string the string the obfuscated spring

220
00:11:40,929 --> 00:11:46,089
it is here as an argument of to that

221
00:11:46,089 --> 00:11:49,660
decoding method so well we get the

222
00:11:49,660 --> 00:11:51,970
arguments and we check that it's a new

223
00:11:51,970 --> 00:11:54,519
bytes array we're gonna put that in a

224
00:11:54,519 --> 00:11:56,819
temporary buffer in our Python script

225
00:11:56,819 --> 00:12:02,649
and we do this gate so how did we write

226
00:12:02,649 --> 00:12:06,160
then I write that method with there well

227
00:12:06,160 --> 00:12:08,949
by doing some reverse engineering in the

228
00:12:08,949 --> 00:12:11,019
sample itself found how they were

229
00:12:11,019 --> 00:12:13,839
working out how they were d obfuscating

230
00:12:13,839 --> 00:12:15,519
the strings worked out that it was like

231
00:12:15,519 --> 00:12:17,889
two different X ORS with two different

232
00:12:17,889 --> 00:12:21,519
keys and writes the the method in na and

233
00:12:21,519 --> 00:12:26,919
Python so we have to the D alpha skated

234
00:12:26,919 --> 00:12:29,799
string okay we have it but that's good

235
00:12:29,799 --> 00:12:32,320
but now we've got to display it

236
00:12:32,320 --> 00:12:35,829
so we are going to modify the line and

237
00:12:35,829 --> 00:12:38,980
the user interface and modify and change

238
00:12:38,980 --> 00:12:41,589
the obfuscated string by the de artes

239
00:12:41,589 --> 00:12:45,639
gated one so we do that with an jab with

240
00:12:45,639 --> 00:12:48,699
replace sub elements you can check the

241
00:12:48,699 --> 00:12:53,259
the API after for that way final thing

242
00:12:53,259 --> 00:12:55,089
we have to do is to tell the user

243
00:12:55,089 --> 00:12:58,779
interface okay I've modified something

244
00:12:58,779 --> 00:13:01,899
please redisplay and that's what this

245
00:13:01,899 --> 00:13:03,970
command is doing not to file listeners

246
00:13:03,970 --> 00:13:06,399
and telling it to read display and

247
00:13:06,399 --> 00:13:12,639
that's it it's done okay I'm sure you

248
00:13:12,639 --> 00:13:13,990
want to have a look well

249
00:13:13,990 --> 00:13:16,569
the code is shared as well on github if

250
00:13:16,569 --> 00:13:19,180
you want you to see it for and with your

251
00:13:19,180 --> 00:13:25,649
eyes and I'm going to show the video

252
00:13:31,770 --> 00:13:35,370
okay so let me perhaps make it a little

253
00:13:35,370 --> 00:13:37,680
bit bigger you see that we have here all

254
00:13:37,680 --> 00:13:42,000
the obfuscated strings and the call to

255
00:13:42,000 --> 00:13:49,440
CJ which is our decoding method we are

256
00:13:49,440 --> 00:13:53,070
going to call our script as simple as

257
00:13:53,070 --> 00:13:53,310
that

258
00:13:53,310 --> 00:13:57,270
it loads and there it goes oops I'm

259
00:13:57,270 --> 00:14:01,290
trying to we have the results all D

260
00:14:01,290 --> 00:14:06,860
obfuscated okay there we go

261
00:14:12,820 --> 00:14:17,200
debugging debugging is something else

262
00:14:17,200 --> 00:14:19,990
which is nice to have right

263
00:14:19,990 --> 00:14:25,210
I guess that on all kind of advanced

264
00:14:25,210 --> 00:14:27,490
samples one day or another you bumped

265
00:14:27,490 --> 00:14:28,720
into something where you would have

266
00:14:28,720 --> 00:14:31,180
wished that you could you know step and

267
00:14:31,180 --> 00:14:33,580
into the program see in which branch it

268
00:14:33,580 --> 00:14:37,150
was going see the name the the values

269
00:14:37,150 --> 00:14:39,000
for the variables and things like that

270
00:14:39,000 --> 00:14:42,370
to my understanding my knowledge there's

271
00:14:42,370 --> 00:14:44,470
only two two tools for that

272
00:14:44,470 --> 00:14:48,640
Jeb again and coat inspect right when I

273
00:14:48,640 --> 00:14:50,740
wrote the paper and so this is what you

274
00:14:50,740 --> 00:14:53,350
will have in the Proceedings that was in

275
00:14:53,350 --> 00:14:56,710
March and at that time well both of them

276
00:14:56,710 --> 00:14:59,440
were really not behaving correctly on

277
00:14:59,440 --> 00:15:01,270
the paper it was it should have been

278
00:15:01,270 --> 00:15:03,820
great in practice it was crashing all

279
00:15:03,820 --> 00:15:06,760
the time and it wasn't usable I've

280
00:15:06,760 --> 00:15:10,270
tested again like two weeks ago and it

281
00:15:10,270 --> 00:15:12,220
really improved I was surprised

282
00:15:12,220 --> 00:15:15,100
now code inspect Enzo is in a really

283
00:15:15,100 --> 00:15:17,560
usable

284
00:15:17,560 --> 00:15:20,830
status growth for the for example so I'm

285
00:15:20,830 --> 00:15:21,520
gonna show you

286
00:15:21,520 --> 00:15:25,950
I used code inspects over a risk where

287
00:15:25,950 --> 00:15:29,320
and I had that problem that per square I

288
00:15:29,320 --> 00:15:31,720
I had done quite a lot of static

289
00:15:31,720 --> 00:15:35,170
analysis on it and I was it was loading

290
00:15:35,170 --> 00:15:38,010
a dalvik executable and I was having

291
00:15:38,010 --> 00:15:40,450
difficulties to understand what was the

292
00:15:40,450 --> 00:15:43,240
file name of that TextEdit was loading

293
00:15:43,240 --> 00:15:47,310
so I thought okay I'm gonna put the

294
00:15:47,310 --> 00:15:50,590
breakpoints on the file name and see

295
00:15:50,590 --> 00:15:58,440
what's the value so that's another video

296
00:16:05,580 --> 00:16:11,670
there it goes so it's already loaded in

297
00:16:11,670 --> 00:16:15,330
code inspect that's to that that's risk

298
00:16:15,330 --> 00:16:17,730
we're in a inner snail and I'm going to

299
00:16:17,730 --> 00:16:20,070
locate exactly go to the place where

300
00:16:20,070 --> 00:16:24,620
that dalvik executable is being loaded

301
00:16:28,790 --> 00:16:35,480
so I'm gonna make this a bit bigger

302
00:16:36,620 --> 00:16:39,029
where the dalvik executable is being

303
00:16:39,029 --> 00:16:41,010
loaded that is through the class text

304
00:16:41,010 --> 00:16:47,399
class lova and in particular when we

305
00:16:47,399 --> 00:16:50,100
create an object of text class loader

306
00:16:50,100 --> 00:16:52,860
the first argue the first arguments in

307
00:16:52,860 --> 00:16:56,730
that class is actually the file name of

308
00:16:56,730 --> 00:17:00,450
the text we are loading right so I'm

309
00:17:00,450 --> 00:17:02,730
gonna find all references for that first

310
00:17:02,730 --> 00:17:09,959
argument and see at what points exactly

311
00:17:09,959 --> 00:17:12,569
I want to put my breakpoint

312
00:17:12,569 --> 00:17:15,869
and inspect to the value I said the

313
00:17:15,869 --> 00:17:20,490
breakpoints and now I'm gonna launch the

314
00:17:20,490 --> 00:17:25,160
emulator start debugging

315
00:17:30,300 --> 00:17:34,910
it attaches the process and loads it a

316
00:17:34,910 --> 00:17:38,160
few second layer later you will get kind

317
00:17:38,160 --> 00:17:43,080
of the results it it is waiting for the

318
00:17:43,080 --> 00:17:44,970
debugger and we'll switch to another

319
00:17:44,970 --> 00:17:54,390
view and now we are exactly in the code

320
00:17:54,390 --> 00:17:59,580
that's that breakpoint I had set and

321
00:17:59,580 --> 00:18:03,660
this is the value before it has actually

322
00:18:03,660 --> 00:18:07,350
been assigns the precise value I am

323
00:18:07,350 --> 00:18:09,780
looking for it so we only have the path

324
00:18:09,780 --> 00:18:16,860
at that point I step over the

325
00:18:16,860 --> 00:18:23,820
instruction and now well we have the

326
00:18:23,820 --> 00:18:25,860
full path of the Ardex look it's there

327
00:18:25,860 --> 00:18:29,550
okay it's named dot zip at the end but

328
00:18:29,550 --> 00:18:34,830
it's a dalvik executable actually so

329
00:18:34,830 --> 00:18:39,830
that's one way to win one way to do it

330
00:18:40,820 --> 00:18:44,520
that's a backups life in case another

331
00:18:44,520 --> 00:18:51,000
point man in the middle so what happens

332
00:18:51,000 --> 00:18:52,920
is that we have more and more Android

333
00:18:52,920 --> 00:18:55,920
applications which are using HTTP that's

334
00:18:55,920 --> 00:18:57,990
the good news it means that people are

335
00:18:57,990 --> 00:19:00,450
more and more security aware the bad

336
00:19:00,450 --> 00:19:03,450
news for as malware analysts is that of

337
00:19:03,450 --> 00:19:05,040
course we get for malware's

338
00:19:05,040 --> 00:19:07,020
more and more encrypted data flow and

339
00:19:07,020 --> 00:19:10,290
we'd like to inspect that not going to

340
00:19:10,290 --> 00:19:12,810
learn you anything what we're gonna do

341
00:19:12,810 --> 00:19:14,730
in that situation is we're gonna do a

342
00:19:14,730 --> 00:19:16,980
man-in-the-middle attack the good news

343
00:19:16,980 --> 00:19:19,590
though is that we've got a tool which is

344
00:19:19,590 --> 00:19:21,740
already ready for that which is called

345
00:19:21,740 --> 00:19:24,330
man-in-the-middle proxy and it supports

346
00:19:24,330 --> 00:19:29,280
Android that's good so what we do we put

347
00:19:29,280 --> 00:19:32,430
our laptop there in the same network as

348
00:19:32,430 --> 00:19:35,760
the phone and we are going to send it

349
00:19:35,760 --> 00:19:38,250
over or certificate authority and then

350
00:19:38,250 --> 00:19:40,860
we mainly we say to our phone we're

351
00:19:40,860 --> 00:19:43,100
gonna change the proxy settings

352
00:19:43,100 --> 00:19:46,279
tell it to redirect or all or network

353
00:19:46,279 --> 00:19:49,580
flow to the laptop on the laptop we have

354
00:19:49,580 --> 00:19:54,019
man-in-the-middle proxy and we can see

355
00:19:54,019 --> 00:19:57,080
and view everything all the flow so you

356
00:19:57,080 --> 00:20:00,919
can intercept it you can read what is

357
00:20:00,919 --> 00:20:04,340
being sent over you can even modify it

358
00:20:04,340 --> 00:20:06,980
if you were interested in to modifying

359
00:20:06,980 --> 00:20:09,320
what is being sent over that's as well

360
00:20:09,320 --> 00:20:13,600
possible so that works pretty well

361
00:20:15,879 --> 00:20:20,269
radar I told you I'd be talking about

362
00:20:20,269 --> 00:20:24,919
radar again so radar I don't know how

363
00:20:24,919 --> 00:20:27,470
many of you were used to you using that

364
00:20:27,470 --> 00:20:29,509
at that tool it's a command line

365
00:20:29,509 --> 00:20:32,659
disassembler kind of old silo or geeks

366
00:20:32,659 --> 00:20:36,470
Kyle it is pretty much used by people

367
00:20:36,470 --> 00:20:39,049
who are doing reverse engineering on

368
00:20:39,049 --> 00:20:41,029
embedded systems for instance because it

369
00:20:41,029 --> 00:20:44,929
supports loads of architectures and one

370
00:20:44,929 --> 00:20:46,429
of the the architectures that it

371
00:20:46,429 --> 00:20:49,789
supports now is talvik so that is

372
00:20:49,789 --> 00:20:52,789
interesting in our case so I'm going to

373
00:20:52,789 --> 00:20:54,379
show you but actually when we can do

374
00:20:54,379 --> 00:20:56,720
some pretty advanced stuff with radar

375
00:20:56,720 --> 00:20:59,659
and I'm going to do a string the

376
00:20:59,659 --> 00:21:02,480
obfuscation with radar on the same

377
00:21:02,480 --> 00:21:12,919
sample that Tariq again so yeah we are

378
00:21:12,919 --> 00:21:15,860
here I have loaded as I told you last

379
00:21:15,860 --> 00:21:19,039
time the dalvik executable of Android

380
00:21:19,039 --> 00:21:25,009
said torque I am going to look for the

381
00:21:25,009 --> 00:21:29,000
class names a D D

382
00:21:29,000 --> 00:21:34,309
so AFL which is here means list me all

383
00:21:34,309 --> 00:21:37,850
functions and so then I'm gonna I'm just

384
00:21:37,850 --> 00:21:40,129
kind of wrapping through to find only a

385
00:21:40,129 --> 00:21:42,730
GT

386
00:21:44,610 --> 00:21:48,970
and now I am going to disassemble like

387
00:21:48,970 --> 00:21:53,800
for instance 80 lines at that location

388
00:21:53,800 --> 00:22:05,220
so there we go we copy paste okay so

389
00:22:05,220 --> 00:22:09,700
we've got the disassembly radar is the

390
00:22:09,700 --> 00:22:12,490
kind of tool where it's nice to have a

391
00:22:12,490 --> 00:22:16,750
big screen right so I'll go with the

392
00:22:16,750 --> 00:22:18,640
beginning at the beginning what do we

393
00:22:18,640 --> 00:22:23,920
see we see here this is our class a DD

394
00:22:23,920 --> 00:22:27,700
and Cl in it which means that we're in a

395
00:22:27,700 --> 00:22:30,850
static constructor for that's that class

396
00:22:30,850 --> 00:22:33,460
and then you'll recognize a few stuff

397
00:22:33,460 --> 00:22:38,260
here we are creating a byte array here

398
00:22:38,260 --> 00:22:41,370
we are filling it with some data and

399
00:22:41,370 --> 00:22:45,430
then look what method we are calling we

400
00:22:45,430 --> 00:22:48,460
are calling again or C dot a so that is

401
00:22:48,460 --> 00:22:52,180
our decoding method right so this is

402
00:22:52,180 --> 00:22:55,870
exactly one cases our one case I have

403
00:22:55,870 --> 00:22:57,790
shown where we are going to deoxys kaepa

404
00:22:57,790 --> 00:23:03,760
strings and so the data for inside the

405
00:23:03,760 --> 00:23:07,050
array well they are here at the end

406
00:23:07,050 --> 00:23:11,280
those are all like the obfuscated

407
00:23:11,280 --> 00:23:14,950
strings so for instance let's have a

408
00:23:14,950 --> 00:23:22,420
look at I don't know this one and which

409
00:23:22,420 --> 00:23:26,920
tells us that here we have a fill array

410
00:23:26,920 --> 00:23:31,840
data payload with 41 bytes right so I'm

411
00:23:31,840 --> 00:23:34,060
going to show you the the obfuscated

412
00:23:34,060 --> 00:23:38,500
string and it is located just after so

413
00:23:38,500 --> 00:23:41,260
at this address and author this bunch of

414
00:23:41,260 --> 00:23:43,480
bytes which are the up code for fill

415
00:23:43,480 --> 00:23:49,720
array data payload so X we are going to

416
00:23:49,720 --> 00:23:54,150
show 41 bytes at

417
00:23:55,830 --> 00:24:03,580
this address +8 and this is the

418
00:24:03,580 --> 00:24:07,090
obfuscated string now we are going to D

419
00:24:07,090 --> 00:24:10,419
alpha skate it and that's cool we can

420
00:24:10,419 --> 00:24:13,419
launch some external strips with radar

421
00:24:13,419 --> 00:24:17,380
same thing as Jeb and I wrote a script

422
00:24:17,380 --> 00:24:21,370
for that one said Touareg you have to

423
00:24:21,370 --> 00:24:26,049
provide the address of the Alpha skated

424
00:24:26,049 --> 00:24:35,130
string copy-paste and we have 41 bytes

425
00:24:35,130 --> 00:24:38,200
and there we go we've got the results so

426
00:24:38,200 --> 00:24:42,570
that obfuscated spinning oops

427
00:24:43,140 --> 00:24:48,789
well you have it here okay

428
00:24:48,789 --> 00:24:51,970
turns into a URL where the malware

429
00:24:51,970 --> 00:24:57,340
actually contacts stuff and well I have

430
00:24:57,340 --> 00:24:59,760
the script you can have a look at

431
00:24:59,760 --> 00:25:02,980
shortly which is there so it's a Python

432
00:25:02,980 --> 00:25:05,830
script and I'll explain a little bit

433
00:25:05,830 --> 00:25:12,789
better with the slides so to write a

434
00:25:12,789 --> 00:25:15,190
radar script what do you have to do

435
00:25:15,190 --> 00:25:17,950
actually it's pretty simple you have to

436
00:25:17,950 --> 00:25:21,549
import the are two pipe package and you

437
00:25:21,549 --> 00:25:23,230
connect to that and then you just have

438
00:25:23,230 --> 00:25:26,110
to tell it to tell to thats connection

439
00:25:26,110 --> 00:25:28,809
all the commands you'd like to submit to

440
00:25:28,809 --> 00:25:31,809
radar so yes so the commands to radar

441
00:25:31,809 --> 00:25:33,909
are a little bit like funky and

442
00:25:33,909 --> 00:25:36,460
difficult to to grasp at first if you're

443
00:25:36,460 --> 00:25:38,230
not used to radar but if you are used to

444
00:25:38,230 --> 00:25:40,990
radar it's really pretty easy to script

445
00:25:40,990 --> 00:25:44,580
and that's how we do the stuff there

446
00:25:44,580 --> 00:25:50,590
right and I think that's about all just

447
00:25:50,590 --> 00:25:52,620
before we get to the questions perhaps

448
00:25:52,620 --> 00:25:55,890
we'll just say that we are organizing

449
00:25:55,890 --> 00:25:58,929
smart devices CTF capture the flag on

450
00:25:58,929 --> 00:26:02,650
the French Riviera it's on the end of

451
00:26:02,650 --> 00:26:04,810
November and that will also include

452
00:26:04,810 --> 00:26:07,720
actually some challenges on Android

453
00:26:07,720 --> 00:26:10,180
smartphones so if you are interested you

454
00:26:10,180 --> 00:26:12,940
are most than welcome to come and I'll

455
00:26:12,940 --> 00:26:15,900
be happy to welcome

