1
00:00:00,620 --> 00:00:02,790
good we are ready for the final

2
00:00:02,790 --> 00:00:05,430
presentation in this slots which will

3
00:00:05,430 --> 00:00:07,890
give an overview of techniques used by

4
00:00:07,890 --> 00:00:10,080
major banking Trojans in the vault in a

5
00:00:10,080 --> 00:00:11,759
presentation called browser attack point

6
00:00:11,759 --> 00:00:14,759
still abuse by making Trojans given by

7
00:00:14,759 --> 00:00:17,000
Peter Caen all of each at Peter

8
00:00:17,000 --> 00:00:19,859
man-in-the-browser attacks are known for

9
00:00:19,859 --> 00:00:22,410
ages and widely understood is there

10
00:00:22,410 --> 00:00:25,050
anything new are there any updates in

11
00:00:25,050 --> 00:00:25,769
this field

12
00:00:25,769 --> 00:00:27,990
let us take a look hello welcome to this

13
00:00:27,990 --> 00:00:30,029
presentation my name is Peter this

14
00:00:30,029 --> 00:00:31,349
research was done together with my

15
00:00:31,349 --> 00:00:32,759
colleague Michael pollution a we are

16
00:00:32,759 --> 00:00:35,850
both based in ESET Czech Republic the

17
00:00:35,850 --> 00:00:38,820
outline of our talk is as follows we

18
00:00:38,820 --> 00:00:40,530
start with a brief recap of

19
00:00:40,530 --> 00:00:44,059
man-in-the-browser text briefly MIT B's

20
00:00:44,059 --> 00:00:47,219
those are basically injects and form

21
00:00:47,219 --> 00:00:50,550
grabbing techniques then actually the

22
00:00:50,550 --> 00:00:52,559
icon here the chromium is chosen

23
00:00:52,559 --> 00:00:55,620
intentionally because mostly chromium

24
00:00:55,620 --> 00:00:58,050
based projects cause the malware authors

25
00:00:58,050 --> 00:01:00,539
the greatest troubles in implementing

26
00:01:00,539 --> 00:01:04,619
MIT B's for browsers next we provide a

27
00:01:04,619 --> 00:01:08,310
catalogue of many projects together with

28
00:01:08,310 --> 00:01:11,490
their approaches to MIT B's mostly

29
00:01:11,490 --> 00:01:14,700
against Rome and finally we try to do

30
00:01:14,700 --> 00:01:17,759
something useful we transform the

31
00:01:17,759 --> 00:01:20,310
results of this research into a plugin

32
00:01:20,310 --> 00:01:22,080
for volatility framework that would

33
00:01:22,080 --> 00:01:26,070
detect these modifications MITB

34
00:01:26,070 --> 00:01:28,140
modifications in memory dumps this could

35
00:01:28,140 --> 00:01:31,439
help forensic analysts or incident

36
00:01:31,439 --> 00:01:35,460
handlers to to quickly get some ideas

37
00:01:35,460 --> 00:01:40,650
about their cases so let's start with

38
00:01:40,650 --> 00:01:43,649
the first part that browsers are not

39
00:01:43,649 --> 00:01:46,079
able to defend against the text by their

40
00:01:46,079 --> 00:01:52,350
own means let's ask a question which

41
00:01:52,350 --> 00:01:54,840
browsers do we generally use default

42
00:01:54,840 --> 00:01:57,990
ones like Microsoft edge Internet

43
00:01:57,990 --> 00:02:00,630
Explorer Mozilla Firefox and then

44
00:02:00,630 --> 00:02:03,619
chromium based projects like opera and

45
00:02:03,619 --> 00:02:08,240
chrome as number one in the market

46
00:02:08,699 --> 00:02:11,220
let us briefly recap some time timeline

47
00:02:11,220 --> 00:02:13,739
related to MIT B's very first

48
00:02:13,739 --> 00:02:16,709
proof-of-concept 2005 I wasn't in the

49
00:02:16,709 --> 00:02:20,130
industry those ages but perhaps you

50
00:02:20,130 --> 00:02:25,290
recollect this in 2007 the attacks got

51
00:02:25,290 --> 00:02:27,989
their name and it was the same year the

52
00:02:27,989 --> 00:02:30,600
infamous career of Z pops started and

53
00:02:30,600 --> 00:02:34,140
it's still ongoing in 2010 the very

54
00:02:34,140 --> 00:02:36,510
first MITB attack against firefox was

55
00:02:36,510 --> 00:02:39,989
recorded and actually that

56
00:02:39,989 --> 00:02:41,790
implementation from that time still

57
00:02:41,790 --> 00:02:44,190
works nowadays because attack points

58
00:02:44,190 --> 00:02:46,830
from firefox are exported and easily

59
00:02:46,830 --> 00:02:50,700
located for the attackers one year later

60
00:02:50,700 --> 00:02:53,790
also chrome got its moment of attention

61
00:02:53,790 --> 00:02:56,850
so first MIT be against Chrome

62
00:02:56,850 --> 00:02:59,239
however implementations from those times

63
00:02:59,239 --> 00:03:02,220
do not work nowadays one of the reasons

64
00:03:02,220 --> 00:03:04,440
in 2015

65
00:03:04,440 --> 00:03:06,930
chromium based projects have switched

66
00:03:06,930 --> 00:03:11,130
from NS s3 and s3 implementation of SSL

67
00:03:11,130 --> 00:03:14,910
functions to boring SSL and the

68
00:03:14,910 --> 00:03:20,010
attackers had to implement in ITV's one

69
00:03:20,010 --> 00:03:23,160
note in 2015 HTTP 2 protocol was

70
00:03:23,160 --> 00:03:26,549
introduced malware authors do not love

71
00:03:26,549 --> 00:03:29,220
this protocol much because headers and

72
00:03:29,220 --> 00:03:31,739
contents are compressed and hard to

73
00:03:31,739 --> 00:03:34,230
parse for them so basically I just try

74
00:03:34,230 --> 00:03:39,690
to disable those let us let us peek into

75
00:03:39,690 --> 00:03:42,060
underground markets this is an example

76
00:03:42,060 --> 00:03:47,329
of an advertisement of F Society project

77
00:03:47,329 --> 00:03:51,120
from the dark web it's from October 2016

78
00:03:51,120 --> 00:03:54,420
and it promotes usual stuff like big

79
00:03:54,420 --> 00:03:57,150
injection USD escalation however it also

80
00:03:57,150 --> 00:04:01,049
it is proud of itself that it is able to

81
00:04:01,049 --> 00:04:04,819
turn off advanced network protocols and

82
00:04:04,819 --> 00:04:08,700
it asks $250 per binary ten times more

83
00:04:08,700 --> 00:04:11,370
for the builder the real real world

84
00:04:11,370 --> 00:04:13,230
example of a builder is in the upper

85
00:04:13,230 --> 00:04:17,728
right corner and and down down the

86
00:04:17,728 --> 00:04:20,159
builder it's a detailed description of

87
00:04:20,159 --> 00:04:21,320
MIT vie

88
00:04:21,320 --> 00:04:24,530
support actually the bot does not

89
00:04:24,530 --> 00:04:26,720
support Microsoft edge it does not

90
00:04:26,720 --> 00:04:29,330
support 64-bit Chrome these are very

91
00:04:29,330 --> 00:04:31,070
prevalent software so the body is not

92
00:04:31,070 --> 00:04:36,740
very successful so briefly what are the

93
00:04:36,740 --> 00:04:39,230
attackers goals they try to locate

94
00:04:39,230 --> 00:04:41,480
browsers process memory then they try to

95
00:04:41,480 --> 00:04:44,120
inject the payload basically banking

96
00:04:44,120 --> 00:04:46,480
module like the whole banking model and

97
00:04:46,480 --> 00:04:49,190
then they try to find out the attack

98
00:04:49,190 --> 00:04:51,800
points which is complicated only for

99
00:04:51,800 --> 00:04:55,400
chromium based projects and basically

100
00:04:55,400 --> 00:04:58,940
they try to find special virtual method

101
00:04:58,940 --> 00:05:02,210
table containing SSL functions of

102
00:05:02,210 --> 00:05:04,850
interest and we shortly referred to this

103
00:05:04,850 --> 00:05:09,040
table as SSL VMT in the sequel and

104
00:05:09,040 --> 00:05:11,750
finally the insta hooks mostly in Iran

105
00:05:11,750 --> 00:05:15,020
ones that would connect other hope is

106
00:05:15,020 --> 00:05:19,460
the injected module ok do tech points

107
00:05:19,460 --> 00:05:23,320
these windows api are of interest and

108
00:05:23,320 --> 00:05:26,990
footballs as well Internet Explorer as

109
00:05:26,990 --> 00:05:29,150
well Microsoft edge and the picture you

110
00:05:29,150 --> 00:05:32,150
can see of internet options menu with

111
00:05:32,150 --> 00:05:35,270
the checkbox how to enable disable HTTP

112
00:05:35,270 --> 00:05:37,850
tool just for the record and we ask

113
00:05:37,850 --> 00:05:41,480
ourselves a question if it's hard to

114
00:05:41,480 --> 00:05:44,330
inject code from some process to

115
00:05:44,330 --> 00:05:46,430
Microsoft edge we had some idea that

116
00:05:46,430 --> 00:05:48,710
Microsoft edge should have some

117
00:05:48,710 --> 00:05:51,200
restrictions in this kind of things so

118
00:05:51,200 --> 00:05:55,010
we brought ros our own tool the own pea

119
00:05:55,010 --> 00:05:57,950
injector peel order that hooked that

120
00:05:57,950 --> 00:06:00,230
injected into Microsoft edge hoped the

121
00:06:00,230 --> 00:06:03,980
attack points and leaked leaked data

122
00:06:03,980 --> 00:06:09,650
from hogging login page at my sitcom so

123
00:06:09,650 --> 00:06:13,490
the conclusion is that MIT B's so from

124
00:06:13,490 --> 00:06:15,980
the MIT B perspective like Internet

125
00:06:15,980 --> 00:06:18,410
Explorer equals Microsoft edge

126
00:06:18,410 --> 00:06:21,410
even though Microsoft edge has advanced

127
00:06:21,410 --> 00:06:24,140
mitigation policies like safeguards and

128
00:06:24,140 --> 00:06:27,800
you can't allowed unsigned library

129
00:06:27,800 --> 00:06:30,230
within the the process and

130
00:06:30,230 --> 00:06:34,190
some others but these are meant to be

131
00:06:34,190 --> 00:06:36,170
against the exploitation of the browser

132
00:06:36,170 --> 00:06:41,230
itself not against remote cult injection

133
00:06:41,410 --> 00:06:45,770
attack points for Firefox if you see

134
00:06:45,770 --> 00:06:47,660
those strings down below in the binary

135
00:06:47,660 --> 00:06:50,150
you analyze you provide you probably you

136
00:06:50,150 --> 00:06:53,060
are probably facing a new banking bot

137
00:06:53,060 --> 00:06:57,080
that tries to disable h2 for Firefox by

138
00:06:57,080 --> 00:07:02,260
by changing these browser settings and

139
00:07:02,260 --> 00:07:06,020
these are this is the SSL VMT table the

140
00:07:06,020 --> 00:07:08,270
with three highlighted functions of

141
00:07:08,270 --> 00:07:10,700
interest these are the functions the

142
00:07:10,700 --> 00:07:14,570
articles are after and let's say in the

143
00:07:14,570 --> 00:07:18,470
sequel how they do it the second odd

144
00:07:18,470 --> 00:07:20,900
move to the second part group games

145
00:07:20,900 --> 00:07:23,630
behind banking bots are persistent in

146
00:07:23,630 --> 00:07:27,790
their implementations of mi TVs

147
00:07:34,479 --> 00:07:37,509
so we demonstrate this on a few examples

148
00:07:37,509 --> 00:07:40,330
and one non example so start with that

149
00:07:40,330 --> 00:07:42,789
one it's early version of peppers from

150
00:07:42,789 --> 00:07:46,240
2013 and this code is injected in

151
00:07:46,240 --> 00:07:50,199
browsers and basically it just checks

152
00:07:50,199 --> 00:07:53,020
which browser it is and if it's chrome

153
00:07:53,020 --> 00:07:56,499
then it will perform an infinite loop

154
00:07:56,499 --> 00:07:58,719
with two actions like sleep one second

155
00:07:58,719 --> 00:08:00,699
and close win socket

156
00:08:00,699 --> 00:08:02,949
so basically no intern is running

157
00:08:02,949 --> 00:08:05,259
running in a browser this in chrome if

158
00:08:05,259 --> 00:08:07,810
this code is injected so after a few

159
00:08:07,810 --> 00:08:11,169
failed attempts a frustrated user would

160
00:08:11,169 --> 00:08:13,689
very likely switch to a default default

161
00:08:13,689 --> 00:08:17,499
browser and right there and these

162
00:08:17,499 --> 00:08:20,050
attackers had implemented their at MIT

163
00:08:20,050 --> 00:08:23,259
B's well for those at the time of course

164
00:08:23,259 --> 00:08:26,469
this might work but you couldn't sell

165
00:08:26,469 --> 00:08:30,689
this kind of code for $3,000 scheduled

166
00:08:31,380 --> 00:08:34,570
gitex gang our predecessor miguel bus

167
00:08:34,570 --> 00:08:38,380
from IBM Trusteer mentioned that the the

168
00:08:38,380 --> 00:08:41,409
the gang is really like sophisticated

169
00:08:41,409 --> 00:08:43,809
with focus on injections

170
00:08:43,809 --> 00:08:46,060
however they neglected their approach to

171
00:08:46,060 --> 00:08:50,139
ni PB s-- i would say because we were a

172
00:08:50,139 --> 00:08:51,699
little disappointed is their approach

173
00:08:51,699 --> 00:08:54,699
was not that robust in early version for

174
00:08:54,699 --> 00:08:56,110
early version of Chrome's

175
00:08:56,110 --> 00:08:58,449
they just wanted to find a static

176
00:08:58,449 --> 00:09:00,190
pointer in text section of chrome dll

177
00:09:00,190 --> 00:09:02,740
the base visible with the search based

178
00:09:02,740 --> 00:09:06,850
on patterns and these patterns on the

179
00:09:06,850 --> 00:09:09,819
left left frame of the picture and these

180
00:09:09,819 --> 00:09:13,180
patterns did not last more than one

181
00:09:13,180 --> 00:09:17,010
major built of chrome so they needed to

182
00:09:17,010 --> 00:09:20,230
be be persistent and on the on the right

183
00:09:20,230 --> 00:09:22,750
side you see they check they check

184
00:09:22,750 --> 00:09:24,459
version of chrome actually from versions

185
00:09:24,459 --> 00:09:28,750
54 to 60 there was very good method how

186
00:09:28,750 --> 00:09:33,760
to find ssl be empty by the SSL version

187
00:09:33,760 --> 00:09:37,389
constants we will see you later mention

188
00:09:37,389 --> 00:09:41,110
later so we ask ourselves a question how

189
00:09:41,110 --> 00:09:45,670
persistent these guys were and this is a

190
00:09:45,670 --> 00:09:47,800
table with rows in one row

191
00:09:47,800 --> 00:09:51,550
there is a dried herbs version together

192
00:09:51,550 --> 00:09:53,950
with speedy timestamp and that was the

193
00:09:53,950 --> 00:09:56,399
first version that was able successfully

194
00:09:56,399 --> 00:10:00,040
attack the the corresponding stable

195
00:10:00,040 --> 00:10:03,730
chrome release so we see that if you

196
00:10:03,730 --> 00:10:05,800
compare the dates it's usually the

197
00:10:05,800 --> 00:10:09,029
difference only two three few days

198
00:10:09,029 --> 00:10:12,010
perhaps with one or two exceptions when

199
00:10:12,010 --> 00:10:14,680
it was two or more weeks but it could

200
00:10:14,680 --> 00:10:18,459
because that we didn't catch binaries in

201
00:10:18,459 --> 00:10:21,070
the distribution or or the attackers

202
00:10:21,070 --> 00:10:25,630
went on vacation or something third

203
00:10:25,630 --> 00:10:29,470
example aspire sniff and these guys like

204
00:10:29,470 --> 00:10:32,440
impressed us with their approach there

205
00:10:32,440 --> 00:10:35,140
were not no pattern based approach these

206
00:10:35,140 --> 00:10:37,029
guys invited something new

207
00:10:37,029 --> 00:10:38,980
we would call it instrumentation of the

208
00:10:38,980 --> 00:10:41,800
browser process and in the first phase

209
00:10:41,800 --> 00:10:45,790
they would like to a large portion of a

210
00:10:45,790 --> 00:10:48,750
virtual method from relocation table and

211
00:10:48,750 --> 00:10:51,700
like hook them all with one single

212
00:10:51,700 --> 00:10:55,839
callback and we can see in orange

213
00:10:55,839 --> 00:10:58,209
those are hooks hooked functions

214
00:10:58,209 --> 00:11:00,100
actually this is SSL be empty but in

215
00:11:00,100 --> 00:11:02,430
orange there would be a lot of more more

216
00:11:02,430 --> 00:11:04,750
virtual methods in data section of

217
00:11:04,750 --> 00:11:07,089
chrome TLO however we focus on this one

218
00:11:07,089 --> 00:11:09,190
so there are a lot of hooks and there is

219
00:11:09,190 --> 00:11:13,089
a callback in red checking if the buffer

220
00:11:13,089 --> 00:11:15,220
in third parameter is contains things

221
00:11:15,220 --> 00:11:19,450
like put post get and if it does then it

222
00:11:19,450 --> 00:11:22,649
will be as a self write function and

223
00:11:22,649 --> 00:11:25,420
they would calculate the other two

224
00:11:25,420 --> 00:11:29,980
relatively so very very robust method

225
00:11:29,980 --> 00:11:33,550
and not to do this nasty tweak with

226
00:11:33,550 --> 00:11:35,260
every browser startup they would just

227
00:11:35,260 --> 00:11:37,390
save checksum of from DLL and the

228
00:11:37,390 --> 00:11:39,610
relative offset of SSL VMT

229
00:11:39,610 --> 00:11:42,399
into the registry so they would need to

230
00:11:42,399 --> 00:11:47,440
do this just with from updates and this

231
00:11:47,440 --> 00:11:49,660
is the final final picture those three

232
00:11:49,660 --> 00:11:53,019
hooked replacements of attack points in

233
00:11:53,019 --> 00:11:57,610
the SSL VMT table security researchers

234
00:11:57,610 --> 00:12:01,180
love to mock more routers and if we want

235
00:12:01,180 --> 00:12:01,690
it to

236
00:12:01,690 --> 00:12:04,840
that this would be the case is it's it's

237
00:12:04,840 --> 00:12:09,100
a fork of spy or sniff we call it also

238
00:12:09,100 --> 00:12:11,140
Santa Clauses case because PD bee sting

239
00:12:11,140 --> 00:12:13,660
contains this day of the year and it

240
00:12:13,660 --> 00:12:15,760
also contains modification source code

241
00:12:15,760 --> 00:12:18,010
so this suggests where the code comes

242
00:12:18,010 --> 00:12:20,950
from but as we mentioned already in 2015

243
00:12:20,950 --> 00:12:24,280
it was a switch from an SS 3 to barring

244
00:12:24,280 --> 00:12:26,920
SSL so the leaked source code of spy or

245
00:12:26,920 --> 00:12:29,470
sniff didn't work didn't work for recent

246
00:12:29,470 --> 00:12:31,810
chrome versions so they needed to really

247
00:12:31,810 --> 00:12:36,790
implement them ITV's chrome and actually

248
00:12:36,790 --> 00:12:39,570
they invented some very loose conditions

249
00:12:39,570 --> 00:12:42,520
that was fine because it worked

250
00:12:42,520 --> 00:12:44,560
however they were losing support for new

251
00:12:44,560 --> 00:12:46,660
chrome very easily and actually these

252
00:12:46,660 --> 00:12:48,190
were the only guys that were able to

253
00:12:48,190 --> 00:12:51,580
lose support MITB support for Chrome

254
00:12:51,580 --> 00:12:53,860
within architectures like supporting

255
00:12:53,860 --> 00:12:56,170
32-bit and not supporting 64-bit a

256
00:12:56,170 --> 00:13:00,130
variety now all the others were not

257
00:13:00,130 --> 00:13:02,980
failing in this and this is the reason

258
00:13:02,980 --> 00:13:05,260
on the left the code is is good it is

259
00:13:05,260 --> 00:13:08,290
just checking which browser it is and if

260
00:13:08,290 --> 00:13:10,000
it's chrome then it's a sequence of

261
00:13:10,000 --> 00:13:14,980
procedures and well what is why would

262
00:13:14,980 --> 00:13:18,610
you like start to to check your loose

263
00:13:18,610 --> 00:13:21,310
conditions on legacy versions like you

264
00:13:21,310 --> 00:13:23,590
have new you new chrome release and you

265
00:13:23,590 --> 00:13:26,440
start to apply those conditions on this

266
00:13:26,440 --> 00:13:29,740
although all versions and the procedure

267
00:13:29,740 --> 00:13:33,190
would succeed right in in the very light

268
00:13:33,190 --> 00:13:35,620
cases and the return would be a false

269
00:13:35,620 --> 00:13:37,930
alarm like not as I saw the empty table

270
00:13:37,930 --> 00:13:40,450
but some random random function table in

271
00:13:40,450 --> 00:13:43,210
data section so this guy these guys

272
00:13:43,210 --> 00:13:45,250
didn't really persuaded us that they

273
00:13:45,250 --> 00:13:47,170
were really really aware of what they

274
00:13:47,170 --> 00:13:53,760
had been doing the thing about cubot is

275
00:13:53,760 --> 00:13:56,380
that the approach is completely

276
00:13:56,380 --> 00:13:58,620
different like these guys were not after

277
00:13:58,620 --> 00:14:03,580
SSL VMT these guys hooked using inline

278
00:14:03,580 --> 00:14:06,660
annoying hooks some wrappers of

279
00:14:06,660 --> 00:14:09,580
functions of interest from SSL VMT

280
00:14:09,580 --> 00:14:12,820
so it was complicated there's an example

281
00:14:12,820 --> 00:14:13,110
of

282
00:14:13,110 --> 00:14:17,130
pattern that would locate some some

283
00:14:17,130 --> 00:14:20,580
attack point in some place in chrome DLL

284
00:14:20,580 --> 00:14:21,960
not in SSL VMT

285
00:14:21,960 --> 00:14:24,860
so a complication to detect these hooks

286
00:14:24,860 --> 00:14:30,240
and finally a story around tannic pot so

287
00:14:30,240 --> 00:14:32,670
I could it was done by an eighteen year

288
00:14:32,670 --> 00:14:35,090
old guy from France

289
00:14:35,090 --> 00:14:38,970
Agustina and at first his he shared his

290
00:14:38,970 --> 00:14:41,040
project with his contacts

291
00:14:41,040 --> 00:14:42,660
I guess not friends but some underground

292
00:14:42,660 --> 00:14:46,560
guys and these guys surprisingly tried

293
00:14:46,560 --> 00:14:48,780
to profit of it on the black market and

294
00:14:48,780 --> 00:14:52,530
the project was not successful there but

295
00:14:52,530 --> 00:14:55,860
Augustine also got set by this approach

296
00:14:55,860 --> 00:14:59,130
of his contact so he released the

297
00:14:59,130 --> 00:15:02,400
Circe's on github and a registered under

298
00:15:02,400 --> 00:15:04,320
email that was connected to a server

299
00:15:04,320 --> 00:15:06,630
belonging to his father so many many

300
00:15:06,630 --> 00:15:10,650
links for investigators his father told

301
00:15:10,650 --> 00:15:12,660
the media I'm very worried for him

302
00:15:12,660 --> 00:15:14,700
because some technology company told him

303
00:15:14,700 --> 00:15:16,380
they wanted for him to the u.s. for a

304
00:15:16,380 --> 00:15:17,160
job interview

305
00:15:17,160 --> 00:15:21,030
as a result of posting he they don't

306
00:15:21,030 --> 00:15:24,810
whine I guess not a job interview but

307
00:15:24,810 --> 00:15:27,870
perhaps an indictment or two by the FBI

308
00:15:27,870 --> 00:15:31,860
and perhaps he just wanted to join guys

309
00:15:31,860 --> 00:15:33,810
like Kevin Poulsen

310
00:15:33,810 --> 00:15:36,870
ok let me think and unfortunately also a

311
00:15:36,870 --> 00:15:40,050
white hat Marco's Hodgins but at the

312
00:15:40,050 --> 00:15:41,910
moment we presume his innocence of

313
00:15:41,910 --> 00:15:47,760
course and one worried fact about tiny

314
00:15:47,760 --> 00:15:51,870
but is that the crucial part of MIT B

315
00:15:51,870 --> 00:15:53,640
implementation comes from a project

316
00:15:53,640 --> 00:15:56,220
obviously supported by Google it's

317
00:15:56,220 --> 00:15:59,310
called that web page test it has its own

318
00:15:59,310 --> 00:16:03,480
manual by O'Reilly Riley's and this

319
00:16:03,480 --> 00:16:05,670
actually is the code shared by both

320
00:16:05,670 --> 00:16:09,270
Dinobot and web page test so on one

321
00:16:09,270 --> 00:16:11,070
thing we are glad that chrome cause

322
00:16:11,070 --> 00:16:13,620
cause struggles to modern authors to

323
00:16:13,620 --> 00:16:16,080
implement MIT B's again against it

324
00:16:16,080 --> 00:16:17,580
however on the other hand Google is

325
00:16:17,580 --> 00:16:20,070
revealing crucial ingredients how to

326
00:16:20,070 --> 00:16:22,070
implement MIT bees against chrome so

327
00:16:22,070 --> 00:16:25,180
what to say

328
00:16:25,180 --> 00:16:28,370
so summer summary of hooking types

329
00:16:28,370 --> 00:16:32,300
actually saw three of those replacement

330
00:16:32,300 --> 00:16:34,820
of a function in SSL VMT inline hook in

331
00:16:34,820 --> 00:16:38,000
SSL VMT and some custom methods which

332
00:16:38,000 --> 00:16:42,829
was done by cubed and this is a summary

333
00:16:42,829 --> 00:16:45,380
of targets Firefox and Internet Explorer

334
00:16:45,380 --> 00:16:48,370
are a piece of cake for everybody

335
00:16:48,370 --> 00:16:51,050
however Braddock's did not even

336
00:16:51,050 --> 00:16:54,709
implement MIT B's against Microsoft edge

337
00:16:54,709 --> 00:16:57,620
so if you found a binary of dried X that

338
00:16:57,620 --> 00:16:59,480
would have this implemented it could

339
00:16:59,480 --> 00:17:05,359
well the tweet I guess and perhaps we

340
00:17:05,359 --> 00:17:07,339
omitted some of your favorites favorite

341
00:17:07,339 --> 00:17:09,260
banking Trojans we try to cover as many

342
00:17:09,260 --> 00:17:12,679
as possible but those desires to too

343
00:17:12,679 --> 00:17:18,079
large so perhaps later ok some some

344
00:17:18,079 --> 00:17:20,809
brief remarks our authors do not copy

345
00:17:20,809 --> 00:17:21,949
from each other

346
00:17:21,949 --> 00:17:26,750
definitely not banking modules what is

347
00:17:26,750 --> 00:17:28,640
what is bad that making models are not

348
00:17:28,640 --> 00:17:31,850
usually part of a binary in distribution

349
00:17:31,850 --> 00:17:34,400
so you have to dig deeper try to connect

350
00:17:34,400 --> 00:17:37,010
to cncd to acquire it so we were really

351
00:17:37,010 --> 00:17:39,620
good when we when we got got banking

352
00:17:39,620 --> 00:17:45,500
models SSL version constants that that

353
00:17:45,500 --> 00:17:49,190
good good science for SS of empty lookup

354
00:17:49,190 --> 00:17:53,150
were dropped in chromium 61 so they have

355
00:17:53,150 --> 00:17:56,150
been dropped in chrome 61 already for a

356
00:17:56,150 --> 00:18:00,559
month and I we didn't see this of course

357
00:18:00,559 --> 00:18:01,940
affects many a lot of those

358
00:18:01,940 --> 00:18:03,770
implementations virus that is perhaps

359
00:18:03,770 --> 00:18:04,520
alright

360
00:18:04,520 --> 00:18:08,780
but the radix and the friends really had

361
00:18:08,780 --> 00:18:10,850
to re-implement MIT B's the lookup for

362
00:18:10,850 --> 00:18:16,340
SSL VMT versioning is very good thing

363
00:18:16,340 --> 00:18:19,730
because an incremental variety of of the

364
00:18:19,730 --> 00:18:21,410
bots would suggest there may be

365
00:18:21,410 --> 00:18:24,679
something new well that it worth to

366
00:18:24,679 --> 00:18:27,440
check it and finally support for

367
00:18:27,440 --> 00:18:29,299
browsers is a good indicator if the

368
00:18:29,299 --> 00:18:32,480
family is still active so because there

369
00:18:32,480 --> 00:18:34,400
are many bots in distribution that would

370
00:18:34,400 --> 00:18:36,350
not be able to attack recent browsers

371
00:18:36,350 --> 00:18:37,850
but if support for bra

372
00:18:37,850 --> 00:18:40,070
work then the family is definitely

373
00:18:40,070 --> 00:18:45,860
effective and let us move to the final

374
00:18:45,860 --> 00:19:00,919
part so our browser hooks plugin it's

375
00:19:00,919 --> 00:19:04,370
for volatility framework it extends api

376
00:19:04,370 --> 00:19:06,110
hooks plugin which is a part of

377
00:19:06,110 --> 00:19:09,830
volatility it it basically detects

378
00:19:09,830 --> 00:19:12,500
various types of hooks in exported

379
00:19:12,500 --> 00:19:15,169
functions only so it's not the case of

380
00:19:15,169 --> 00:19:19,100
ssl VMT replacements all our hooks so we

381
00:19:19,100 --> 00:19:21,409
extended it with these three three three

382
00:19:21,409 --> 00:19:25,309
new hooking types and what we added

383
00:19:25,309 --> 00:19:27,860
moreover if you have a dump memory done

384
00:19:27,860 --> 00:19:32,240
from 64-bit system 64-bit windows and

385
00:19:32,240 --> 00:19:35,539
you have hooks in 32-bit module the

386
00:19:35,539 --> 00:19:38,000
original api hooks would not detect that

387
00:19:38,000 --> 00:19:42,289
so we added we dig deeper and try to add

388
00:19:42,289 --> 00:19:44,360
support and succeeded in added support

389
00:19:44,360 --> 00:19:49,419
for 32-bit hooks in 64-bit processes

390
00:19:49,419 --> 00:19:51,020
system sorry

391
00:19:51,020 --> 00:19:55,190
and finally we integrated these results

392
00:19:55,190 --> 00:19:58,220
from this plug-in to to all you tell a

393
00:19:58,220 --> 00:20:00,830
geographical interface our favorite one

394
00:20:00,830 --> 00:20:03,679
and if you would if you are interested I

395
00:20:03,679 --> 00:20:06,169
can show a picture later I didn't put it

396
00:20:06,169 --> 00:20:09,140
in these slides and the release of this

397
00:20:09,140 --> 00:20:12,049
plug-in is like today we're releasing it

398
00:20:12,049 --> 00:20:14,240
now I guess it's on easy to read up

399
00:20:14,240 --> 00:20:17,419
available so any any forensic engineer

400
00:20:17,419 --> 00:20:20,990
interested in this may contact us or

401
00:20:20,990 --> 00:20:24,110
download it from there however we also

402
00:20:24,110 --> 00:20:27,980
found some limitations like some parts

403
00:20:27,980 --> 00:20:31,340
of chrome DLL or page to this and not

404
00:20:31,340 --> 00:20:33,770
available in memory dumps occasionally

405
00:20:33,770 --> 00:20:39,549
so this is a limitation of course and so

406
00:20:39,549 --> 00:20:42,650
that browsers are not able to defend

407
00:20:42,650 --> 00:20:47,140
themselves against MITB attacks and like

408
00:20:47,140 --> 00:20:50,690
gangs behind banking bots are really

409
00:20:50,690 --> 00:20:51,940
really persist

410
00:20:51,940 --> 00:20:54,820
in their efforts to implement MIT B's

411
00:20:54,820 --> 00:20:58,300
and if you see non-empty output of

412
00:20:58,300 --> 00:21:01,180
plug-in like browser hooks then it's a

413
00:21:01,180 --> 00:21:03,910
little bit too late so what would be the

414
00:21:03,910 --> 00:21:06,520
conclusion the conclusion is to use

415
00:21:06,520 --> 00:21:08,470
third-party tools that would protect

416
00:21:08,470 --> 00:21:11,500
browsers many AV vendors provide such

417
00:21:11,500 --> 00:21:14,230
tools I'm not really sure how widespread

418
00:21:14,230 --> 00:21:18,040
these tools are how many uses uses these

419
00:21:18,040 --> 00:21:20,020
is that solution is called

420
00:21:20,020 --> 00:21:23,400
online banking payment protection and

421
00:21:23,400 --> 00:21:26,080
like I guess this is the approach

422
00:21:26,080 --> 00:21:27,910
protecting browser from the kernel

423
00:21:27,910 --> 00:21:30,570
because the attackers the attackers

424
00:21:30,570 --> 00:21:33,270
usually do not visit this kernel space

425
00:21:33,270 --> 00:21:37,690
so I guess I'm ready to answer any

426
00:21:37,690 --> 00:21:42,670
questions okay thank you Peter

427
00:21:42,670 --> 00:21:55,240
any questions for Peter okay if not you

428
00:21:55,240 --> 00:21:58,780
mentioned that most of the browser's are

429
00:21:58,780 --> 00:21:59,350
attacked

430
00:21:59,350 --> 00:22:01,810
except for that edge in a few occasions

431
00:22:01,810 --> 00:22:04,540
was not being a victim of that attack

432
00:22:04,540 --> 00:22:07,570
yes is that perhaps because I just be

433
00:22:07,570 --> 00:22:09,730
written from scratch that it was not

434
00:22:09,730 --> 00:22:11,680
vulnerable against it no no definitely

435
00:22:11,680 --> 00:22:15,070
not I guess it's just some some

436
00:22:15,070 --> 00:22:17,740
reputation of the process itself that

437
00:22:17,740 --> 00:22:19,900
it's like somehow not reachable but it's

438
00:22:19,900 --> 00:22:21,940
basically just the same method like

439
00:22:21,940 --> 00:22:24,220
Internet Explorer I guess it's just the

440
00:22:24,220 --> 00:22:26,650
guys didn't didn't even try they've

441
00:22:26,650 --> 00:22:28,060
tried nothing I guess

442
00:22:28,060 --> 00:22:33,130
okay yeah and and I guess you know if we

443
00:22:33,130 --> 00:22:35,350
had some time this is the implementation

444
00:22:35,350 --> 00:22:39,550
for the graphic user interface for the

445
00:22:39,550 --> 00:22:41,950
output of the plug-in so we have like

446
00:22:41,950 --> 00:22:45,810
Cuba infection and cubot is like hooking

447
00:22:45,810 --> 00:22:49,290
hooking Chrome DLL specifically and

448
00:22:49,290 --> 00:22:53,140
there are some trampoline hooks in vs to

449
00:22:53,140 --> 00:22:56,680
do L and you have also hooking module

450
00:22:56,680 --> 00:23:00,220
base then you just right-click there you

451
00:23:00,220 --> 00:23:03,850
started hooking module and then you have

452
00:23:03,850 --> 00:23:05,230
this output of deal

453
00:23:05,230 --> 00:23:08,020
I'm plug-in so you have the option to

454
00:23:08,020 --> 00:23:10,390
see some more details of this plug-in

455
00:23:10,390 --> 00:23:12,040
and there is also a virus total search

456
00:23:12,040 --> 00:23:14,820
and you can click up to the complete

457
00:23:14,820 --> 00:23:17,200
recognition recognition of the threat

458
00:23:17,200 --> 00:23:19,809
and the case closed in a few few seconds

459
00:23:19,809 --> 00:23:27,540
I guess no more questions for people

460
00:23:27,540 --> 00:23:36,190
here do you think that browser suits

461
00:23:36,190 --> 00:23:38,410
like protect themselves from injects or

462
00:23:38,410 --> 00:23:40,419
that it's impossible anyway so no point

463
00:23:40,419 --> 00:23:41,140
in doing that

464
00:23:41,140 --> 00:23:43,240
so like obfuscate possible inject points

465
00:23:43,240 --> 00:23:46,120
and satura not not even now therefore

466
00:23:46,120 --> 00:23:49,210
browsers from the operating system to

467
00:23:49,210 --> 00:23:52,120
that they don't protect from remote code

468
00:23:52,120 --> 00:23:53,890
injection and then don't protect

469
00:23:53,890 --> 00:23:56,590
actually it's been those API see the I

470
00:23:56,590 --> 00:23:59,290
regularly hooked security solutions do

471
00:23:59,290 --> 00:24:03,669
that so not for not for these default

472
00:24:03,669 --> 00:24:06,490
browsers for Chrome I I don't think

473
00:24:06,490 --> 00:24:09,429
there are any any attempts to do that

474
00:24:09,429 --> 00:24:11,950
they are even revealing how to how to

475
00:24:11,950 --> 00:24:14,980
find these functions not an expert it

476
00:24:14,980 --> 00:24:16,990
once so but do you think they should

477
00:24:16,990 --> 00:24:20,200
like protect these inject points or that

478
00:24:20,200 --> 00:24:23,350
there's no point you doing that I guess

479
00:24:23,350 --> 00:24:25,600
perhaps that they try they thought about

480
00:24:25,600 --> 00:24:28,720
that and they discovered that it would

481
00:24:28,720 --> 00:24:31,299
be too hard or like many banking Trojans

482
00:24:31,299 --> 00:24:32,950
many different approaches and if we have

483
00:24:32,950 --> 00:24:35,470
third-party tools I I really I will be

484
00:24:35,470 --> 00:24:37,510
really glad if like every vendors

485
00:24:37,510 --> 00:24:40,480
convinced their users to use the this

486
00:24:40,480 --> 00:24:43,630
stuff because maybe even I like isolated

487
00:24:43,630 --> 00:24:45,490
browsers protecting from chrono space

488
00:24:45,490 --> 00:24:54,929
that is like nice thing okay too much

489
00:24:55,520 --> 00:24:57,530
maybe one remark to that last question

490
00:24:57,530 --> 00:25:00,020
about about browsers protecting

491
00:25:00,020 --> 00:25:02,360
themselves actually the only ones that

492
00:25:02,360 --> 00:25:04,430
are doing that as far as I know is

493
00:25:04,430 --> 00:25:08,450
Firefox but the attempt is kind of

494
00:25:08,450 --> 00:25:09,740
ridiculous because what they are doing

495
00:25:09,740 --> 00:25:13,100
is actually that they are that they are

496
00:25:13,100 --> 00:25:16,280
somehow checking memory loads that they

497
00:25:16,280 --> 00:25:18,470
are checking DLL loads and if somebody

498
00:25:18,470 --> 00:25:20,420
calls load library they have a whitelist

499
00:25:20,420 --> 00:25:22,730
of the alerts that they accept which is

500
00:25:22,730 --> 00:25:24,860
obviously an effort that is really

501
00:25:24,860 --> 00:25:25,640
ridiculous

502
00:25:25,640 --> 00:25:28,190
it actually blocks a lot of more or less

503
00:25:28,190 --> 00:25:30,470
benign software but it doesn't block the

504
00:25:30,470 --> 00:25:32,510
good guys and that is why I would argue

505
00:25:32,510 --> 00:25:34,670
that basically these protects these

506
00:25:34,670 --> 00:25:36,170
these attempts of protecting themselves

507
00:25:36,170 --> 00:25:44,450
they are not worth anything okay after

508
00:25:44,450 --> 00:25:48,200
no more questions for Peter then please

509
00:25:48,200 --> 00:25:51,100
join me in thanking him

510
00:25:52,260 --> 00:25:54,460
[Applause]

