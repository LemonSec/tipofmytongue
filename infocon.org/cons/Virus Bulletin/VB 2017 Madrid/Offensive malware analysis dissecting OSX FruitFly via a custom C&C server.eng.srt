1
00:00:00,319 --> 00:00:03,120
awesome Aloha welcome to my talk on

2
00:00:03,120 --> 00:00:07,560
offensive malware analysis as Nick

3
00:00:07,560 --> 00:00:10,469
mentioned my name is Patrick mortal I

4
00:00:10,469 --> 00:00:12,570
currently work as the chief security

5
00:00:12,570 --> 00:00:14,460
researcher at cynic I've worked at a

6
00:00:14,460 --> 00:00:16,500
variety of acronyms places before that

7
00:00:16,500 --> 00:00:18,600
very briefly cynic runs managed bug

8
00:00:18,600 --> 00:00:20,699
bounty programs with vetted security

9
00:00:20,699 --> 00:00:22,740
researchers all right so what are we

10
00:00:22,740 --> 00:00:24,779
going to talk about today we're gonna be

11
00:00:24,779 --> 00:00:26,580
talking about analyzing an intriguing

12
00:00:26,580 --> 00:00:29,369
piece of mac malware named fruit fly but

13
00:00:29,369 --> 00:00:30,900
this analysis is going to be done in a

14
00:00:30,900 --> 00:00:32,820
rather different way so we're gonna

15
00:00:32,820 --> 00:00:35,579
start by looking at fruit fly just a

16
00:00:35,579 --> 00:00:38,219
brief triage and overview with the goal

17
00:00:38,219 --> 00:00:40,320
of getting just enough information about

18
00:00:40,320 --> 00:00:41,520
this malware so that we can build a

19
00:00:41,520 --> 00:00:43,440
custom command and control server for

20
00:00:43,440 --> 00:00:45,780
this then going to talk about some tools

21
00:00:45,780 --> 00:00:47,489
and techniques about how to passively

22
00:00:47,489 --> 00:00:49,920
monitor this piece of malware we're then

23
00:00:49,920 --> 00:00:51,690
going to focus on talking about how we

24
00:00:51,690 --> 00:00:53,430
were able to build a custom command and

25
00:00:53,430 --> 00:00:55,230
control server then how we actually

26
00:00:55,230 --> 00:00:58,260
tasked the malware to reveal its

27
00:00:58,260 --> 00:00:59,879
capabilities by just asking the right

28
00:00:59,879 --> 00:01:01,620
questions and then finally what happened

29
00:01:01,620 --> 00:01:03,030
when we put this custom command and

30
00:01:03,030 --> 00:01:06,180
control server on the internet so our

31
00:01:06,180 --> 00:01:08,970
goal here is to comprehensively analyze

32
00:01:08,970 --> 00:01:11,729
fruit fly but do it in somewhat of a

33
00:01:11,729 --> 00:01:15,119
more efficient way so as I'm sure we're

34
00:01:15,119 --> 00:01:17,009
all aware traditional methods of malware

35
00:01:17,009 --> 00:01:19,590
analysis disassembly debugging inverse

36
00:01:19,590 --> 00:01:21,570
engineering definitely work but they're

37
00:01:21,570 --> 00:01:25,259
rather slow now I didn't have access to

38
00:01:25,259 --> 00:01:27,150
an actual command and control server for

39
00:01:27,150 --> 00:01:30,450
fruit fly but I figured if I built my

40
00:01:30,450 --> 00:01:32,970
own and then tasks the Maur

41
00:01:32,970 --> 00:01:35,430
I'd be able to observe its responses and

42
00:01:35,430 --> 00:01:38,369
then figure out its capability so know

43
00:01:38,369 --> 00:01:40,290
where the other words this process would

44
00:01:40,290 --> 00:01:43,079
allow me to coerce the malware to reveal

45
00:01:43,079 --> 00:01:45,840
its capabilities its features just by

46
00:01:45,840 --> 00:01:47,729
asking the right kind of questions and I

47
00:01:47,729 --> 00:01:50,250
figured this would be a lot simpler in a

48
00:01:50,250 --> 00:01:51,720
way and a lot more efficient than fully

49
00:01:51,720 --> 00:01:53,520
reverse engineering via traditional

50
00:01:53,520 --> 00:01:56,070
means another benefit of this is once

51
00:01:56,070 --> 00:01:57,600
you have a custom command and control

52
00:01:57,600 --> 00:02:00,420
server if you're able to hijack or take

53
00:02:00,420 --> 00:02:02,369
over their domains or register the URLs

54
00:02:02,369 --> 00:02:04,680
that the malware the infection is

55
00:02:04,680 --> 00:02:07,079
beaconing to you now have the capability

56
00:02:07,079 --> 00:02:08,610
to actually take over other people's

57
00:02:08,610 --> 00:02:10,560
malware obviously for cyber criminals or

58
00:02:10,560 --> 00:02:11,520
governments this might be a very

59
00:02:11,520 --> 00:02:13,760
interesting capable

60
00:02:13,760 --> 00:02:16,470
so I mentioned the target of our

61
00:02:16,470 --> 00:02:18,510
analysis is a Mac OS piece of malware

62
00:02:18,510 --> 00:02:21,510
named fruit fly now before we build a

63
00:02:21,510 --> 00:02:23,660
custom command and control server and

64
00:02:23,660 --> 00:02:26,670
task the malware we need to perform a

65
00:02:26,670 --> 00:02:28,220
basic triage to answer two questions

66
00:02:28,220 --> 00:02:30,870
first we need to know what address the

67
00:02:30,870 --> 00:02:33,240
malware connects to for the command and

68
00:02:33,240 --> 00:02:35,100
command and control server there's where

69
00:02:35,100 --> 00:02:36,300
does it beacon out where does it look

70
00:02:36,300 --> 00:02:38,220
what address what URL does it look for

71
00:02:38,220 --> 00:02:39,780
the command and control server then we

72
00:02:39,780 --> 00:02:41,790
also have to know what protocol the

73
00:02:41,790 --> 00:02:44,220
malware speaks with these two pieces of

74
00:02:44,220 --> 00:02:46,200
information then we'll be able to create

75
00:02:46,200 --> 00:02:48,300
a custom command and control server that

76
00:02:48,300 --> 00:02:50,010
is compatible that the malware will

77
00:02:50,010 --> 00:02:53,760
actually talk to so fruit fly has

78
00:02:53,760 --> 00:02:55,920
discovered this past January by

79
00:02:55,920 --> 00:02:58,290
malwarebytes was originally initially

80
00:02:58,290 --> 00:03:01,920
undetected by engines on virustotal my

81
00:03:01,920 --> 00:03:03,780
friend Thomas Reed who works at

82
00:03:03,780 --> 00:03:06,240
malwarebytes did a great blog briefly

83
00:03:06,240 --> 00:03:08,790
describing the the malware kind of an

84
00:03:08,790 --> 00:03:10,560
overview kind of got into some of its

85
00:03:10,560 --> 00:03:13,140
components its capabilities methods of

86
00:03:13,140 --> 00:03:15,840
persistence his blog he touched on the

87
00:03:15,840 --> 00:03:17,760
fact that this piece of malware appeared

88
00:03:17,760 --> 00:03:20,160
to be a fairly standard Mac backdoor but

89
00:03:20,160 --> 00:03:22,080
had some interesting capabilities for

90
00:03:22,080 --> 00:03:23,820
example appear to be able to turn on the

91
00:03:23,820 --> 00:03:25,770
webcam and interact with the mouse and

92
00:03:25,770 --> 00:03:28,440
the keyboard current we don't know what

93
00:03:28,440 --> 00:03:30,990
the infection vector is but if we look

94
00:03:30,990 --> 00:03:32,910
at other pieces of Mac malware or look

95
00:03:32,910 --> 00:03:34,410
at trends it's probably something like

96
00:03:34,410 --> 00:03:37,980
malicious email a Trojan app or perhaps

97
00:03:37,980 --> 00:03:39,810
a fake web pop-up trying to get you

98
00:03:39,810 --> 00:03:42,330
users to click on it there's also been

99
00:03:42,330 --> 00:03:45,000
some forensics evidence which looks or

100
00:03:45,000 --> 00:03:46,950
has indicated that this is malware may

101
00:03:46,950 --> 00:03:48,630
have been around for five or even ten

102
00:03:48,630 --> 00:03:50,190
years kind of flying under the radar

103
00:03:50,190 --> 00:03:53,190
using very specific targeted attacks so

104
00:03:53,190 --> 00:03:55,890
that's interesting as well today we're

105
00:03:55,890 --> 00:03:58,470
gonna be looking at variant b variant b

106
00:03:58,470 --> 00:04:00,930
was submitted to virustotal a few weeks

107
00:04:00,930 --> 00:04:03,990
after variant a at the time variant a

108
00:04:03,990 --> 00:04:06,690
was now being detected by AV signatures

109
00:04:06,690 --> 00:04:09,000
but when variant b was submitted it

110
00:04:09,000 --> 00:04:10,890
itself remained undetected so it

111
00:04:10,890 --> 00:04:13,140
definitely has enough differences to be

112
00:04:13,140 --> 00:04:16,560
somewhat unique from variant a when it

113
00:04:16,560 --> 00:04:18,180
was submitted to virus total it was

114
00:04:18,180 --> 00:04:21,478
submitted with the name SPS odd to mimic

115
00:04:21,478 --> 00:04:24,240
a common flash player component and like

116
00:04:24,240 --> 00:04:26,160
variant a the main component of this

117
00:04:26,160 --> 00:04:26,830
malware

118
00:04:26,830 --> 00:04:29,379
an obfuscated Perl script that's kind of

119
00:04:29,379 --> 00:04:29,949
interesting

120
00:04:29,949 --> 00:04:32,139
as mentioned we're going to build a

121
00:04:32,139 --> 00:04:34,030
custom command control server to task

122
00:04:34,030 --> 00:04:36,340
this malware to reveal its capabilities

123
00:04:36,340 --> 00:04:39,280
again we need to understand the address

124
00:04:39,280 --> 00:04:41,860
that the malware is trying to connect to

125
00:04:41,860 --> 00:04:44,199
or addresses and also we need to

126
00:04:44,199 --> 00:04:46,330
understand its protocol so let's now

127
00:04:46,330 --> 00:04:48,610
talk about briefly triaging this

128
00:04:48,610 --> 00:04:50,740
malicious Perl script the main component

129
00:04:50,740 --> 00:04:51,370
of the Maur

130
00:04:51,370 --> 00:04:52,870
to figure out or to answer these

131
00:04:52,870 --> 00:04:55,389
questions so the first thing we can do

132
00:04:55,389 --> 00:04:57,370
is we can beautify the script this will

133
00:04:57,370 --> 00:04:59,379
make the formatting easier to read

134
00:04:59,379 --> 00:05:01,870
obviously subroutines and variable names

135
00:05:01,870 --> 00:05:04,330
will still be obvious gated or you know

136
00:05:04,330 --> 00:05:06,430
nonsensical but as we can see on the

137
00:05:06,430 --> 00:05:08,530
slide once we format or beautify the

138
00:05:08,530 --> 00:05:10,690
script there's basically three parts to

139
00:05:10,690 --> 00:05:12,909
it there are some imports which can shed

140
00:05:12,909 --> 00:05:14,379
some insight into what it's doing it's

141
00:05:14,379 --> 00:05:16,509
importing some socket routines and some

142
00:05:16,509 --> 00:05:20,050
process related sub modules then there's

143
00:05:20,050 --> 00:05:21,699
some sub routines which we'll talk about

144
00:05:21,699 --> 00:05:23,409
on the next slide and then the main

145
00:05:23,409 --> 00:05:27,219
logic of the malware so briefly if we

146
00:05:27,219 --> 00:05:29,710
look at these subroutines we get some

147
00:05:29,710 --> 00:05:31,870
insight into the protocol of the malware

148
00:05:31,870 --> 00:05:33,490
right these subroutines aren't really

149
00:05:33,490 --> 00:05:36,099
the core logic of the malware per se but

150
00:05:36,099 --> 00:05:38,050
there you know helper function so if we

151
00:05:38,050 --> 00:05:40,120
briefly look at them we can perhaps gain

152
00:05:40,120 --> 00:05:41,800
some insight into how the malware

153
00:05:41,800 --> 00:05:43,810
communicates with a custom or a

154
00:05:43,810 --> 00:05:46,060
command-and-control server so for

155
00:05:46,060 --> 00:05:48,219
example if we look at subroutine G I've

156
00:05:48,219 --> 00:05:49,659
got it highlighted in the slide we can

157
00:05:49,659 --> 00:05:51,759
see it's sending data to the command and

158
00:05:51,759 --> 00:05:53,560
control server so now if we see a

159
00:05:53,560 --> 00:05:55,870
command invoking the G subroutine we

160
00:05:55,870 --> 00:05:57,520
know it's going to respond or send some

161
00:05:57,520 --> 00:05:59,319
data back to the command and control

162
00:05:59,319 --> 00:06:01,419
server we might not know what this data

163
00:06:01,419 --> 00:06:03,729
actually is but we might see okay it's

164
00:06:03,729 --> 00:06:06,129
gonna send 10 bytes back and we might

165
00:06:06,129 --> 00:06:07,659
also then be able to see the format of

166
00:06:07,659 --> 00:06:09,479
the data that's being sent back

167
00:06:09,479 --> 00:06:12,219
similarly if we look at the j subroutine

168
00:06:12,219 --> 00:06:14,349
we can see that it's receiving some

169
00:06:14,349 --> 00:06:15,729
number of bytes from a

170
00:06:15,729 --> 00:06:17,680
command-and-control server so if we

171
00:06:17,680 --> 00:06:18,909
create a custom command and control

172
00:06:18,909 --> 00:06:21,219
server and then a command invokes the j

173
00:06:21,219 --> 00:06:24,159
subroutine for example j comma 9 we know

174
00:06:24,159 --> 00:06:25,900
that specific command requires

175
00:06:25,900 --> 00:06:28,810
additional nine bytes so we might not

176
00:06:28,810 --> 00:06:30,580
know what the format or what those bytes

177
00:06:30,580 --> 00:06:32,949
should be but we know that that command

178
00:06:32,949 --> 00:06:34,839
is expecting 9 bytes so from our custom

179
00:06:34,839 --> 00:06:36,070
command and control server we should

180
00:06:36,070 --> 00:06:39,849
send nine additional bytes after the

181
00:06:39,849 --> 00:06:40,650
subroutine

182
00:06:40,650 --> 00:06:42,990
malware decodes some strings these turn

183
00:06:42,990 --> 00:06:45,240
out to be the primary and backup

184
00:06:45,240 --> 00:06:47,130
addresses of the command and control

185
00:06:47,130 --> 00:06:49,020
servers that the malware is trying to

186
00:06:49,020 --> 00:06:51,270
communicate with there's a variety of

187
00:06:51,270 --> 00:06:53,520
way we can decode the strings easiest is

188
00:06:53,520 --> 00:06:55,289
actually just to use the Perl debugger

189
00:06:55,289 --> 00:06:56,580
you want to spend a ton of time

190
00:06:56,580 --> 00:06:59,850
debugging this malware but these

191
00:06:59,850 --> 00:07:01,199
decoding routines are right at the

192
00:07:01,199 --> 00:07:02,910
beginning and again the easiest way was

193
00:07:02,910 --> 00:07:05,490
just to step over that so if you execute

194
00:07:05,490 --> 00:07:07,620
Perl dash D and then the malicious

195
00:07:07,620 --> 00:07:09,389
script this will start a Perl debugging

196
00:07:09,389 --> 00:07:11,160
session I was actually not aware that

197
00:07:11,160 --> 00:07:12,870
you could debug Perl scripts in this

198
00:07:12,870 --> 00:07:14,760
manner but it turns out the Perl

199
00:07:14,760 --> 00:07:16,260
debugger is a pretty full-featured

200
00:07:16,260 --> 00:07:17,940
debugger and so there's some commands

201
00:07:17,940 --> 00:07:19,470
you can use you know step over

202
00:07:19,470 --> 00:07:21,990
instructions print out variables etc etc

203
00:07:21,990 --> 00:07:24,180
so what we can do is we can step over

204
00:07:24,180 --> 00:07:26,820
the decoding routine and then just print

205
00:07:26,820 --> 00:07:28,919
out the strings that have been decoded

206
00:07:28,919 --> 00:07:30,600
and we can see that they're the IP

207
00:07:30,600 --> 00:07:32,910
addresses and URLs of the command and

208
00:07:32,910 --> 00:07:35,130
control servers albeit reversed and then

209
00:07:35,130 --> 00:07:37,080
if we look in the slide we can see later

210
00:07:37,080 --> 00:07:39,419
in the code the malware randomly picks

211
00:07:39,419 --> 00:07:41,340
one of these addresses and then uses it

212
00:07:41,340 --> 00:07:44,910
to connect to all right so after

213
00:07:44,910 --> 00:07:47,400
decoding the primary and backup command

214
00:07:47,400 --> 00:07:49,139
and control servers the malware does

215
00:07:49,139 --> 00:07:51,419
three other things it processes some

216
00:07:51,419 --> 00:07:53,820
command-line arguments hides its process

217
00:07:53,820 --> 00:07:56,699
and then unpacked some binary data so if

218
00:07:56,699 --> 00:07:58,800
we look at the regex for the command

219
00:07:58,800 --> 00:08:00,449
line processing we can see it's looking

220
00:08:00,449 --> 00:08:03,599
for either a port or an address colon

221
00:08:03,599 --> 00:08:06,900
port of a command of a commanding

222
00:08:06,900 --> 00:08:09,060
control server it's looking to connect

223
00:08:09,060 --> 00:08:10,889
so this is great because this means we

224
00:08:10,889 --> 00:08:12,780
can actually specify our own command

225
00:08:12,780 --> 00:08:14,909
command control server from the command

226
00:08:14,909 --> 00:08:16,860
line so this obviously facilitates our

227
00:08:16,860 --> 00:08:19,199
analysis we don't have to redirect DNS

228
00:08:19,199 --> 00:08:20,580
queries we don't have to modify the

229
00:08:20,580 --> 00:08:22,260
hosts files you know when we're trying

230
00:08:22,260 --> 00:08:23,639
to analyze this piece of malware we can

231
00:08:23,639 --> 00:08:25,289
actually provide the address of the

232
00:08:25,289 --> 00:08:27,000
custom command and control server that

233
00:08:27,000 --> 00:08:28,860
the malware should connect to via its

234
00:08:28,860 --> 00:08:30,300
command line and the malware will just

235
00:08:30,300 --> 00:08:32,789
use that so that's great terms of

236
00:08:32,789 --> 00:08:36,029
process hiding it just changes our v-0

237
00:08:36,029 --> 00:08:38,339
to Java it's not a very sophisticated

238
00:08:38,339 --> 00:08:41,429
trick but it will trick some tools for

239
00:08:41,429 --> 00:08:43,979
example the PS utility so if you do a PS

240
00:08:43,979 --> 00:08:45,540
even if the malware is running instead

241
00:08:45,540 --> 00:08:47,010
of showing up as the malicious Perl

242
00:08:47,010 --> 00:08:49,529
script you'll just see Java obviously

243
00:08:49,529 --> 00:08:51,450
things like Activity Monitor or more

244
00:08:51,450 --> 00:08:53,040
advanced tools will not be tricked by

245
00:08:53,040 --> 00:08:54,600
this basic technique

246
00:08:54,600 --> 00:08:56,490
and then finally it decodes and drops

247
00:08:56,490 --> 00:08:58,529
some binary data this turns out to be an

248
00:08:58,529 --> 00:09:00,569
embedded mock Oh binary we'll talk about

249
00:09:00,569 --> 00:09:02,569
that in a second

250
00:09:02,569 --> 00:09:04,440
finally then we get to the main

251
00:09:04,440 --> 00:09:06,600
processing loop and here the malware

252
00:09:06,600 --> 00:09:08,579
does two things it connects and checks

253
00:09:08,579 --> 00:09:10,170
in with the command and control server

254
00:09:10,170 --> 00:09:13,139
sends information about the infected

255
00:09:13,139 --> 00:09:15,990
client and then invokes the J subroutine

256
00:09:15,990 --> 00:09:18,180
to receive an additional bite from the

257
00:09:18,180 --> 00:09:19,709
command and control server it then

258
00:09:19,709 --> 00:09:21,750
processes this byte in a massive if

259
00:09:21,750 --> 00:09:24,509
else--if loop so what this is doing is

260
00:09:24,509 --> 00:09:27,269
it's receiving a numeric command from

261
00:09:27,269 --> 00:09:28,829
the command and control server then

262
00:09:28,829 --> 00:09:31,290
executing or processing this command and

263
00:09:31,290 --> 00:09:33,060
sending the response back to the server

264
00:09:33,060 --> 00:09:34,290
so this is just a big loop it

265
00:09:34,290 --> 00:09:36,660
continually X executes looking for

266
00:09:36,660 --> 00:09:38,610
commands from taskings from the command

267
00:09:38,610 --> 00:09:42,000
and control server alright so now we

268
00:09:42,000 --> 00:09:43,709
know the address of the command and

269
00:09:43,709 --> 00:09:44,850
control servers are actually more

270
00:09:44,850 --> 00:09:46,050
importantly we know we can actually

271
00:09:46,050 --> 00:09:48,810
specify our own via the command line and

272
00:09:48,810 --> 00:09:51,600
we also understand the basic protocol of

273
00:09:51,600 --> 00:09:53,220
them our right it's gonna expect some

274
00:09:53,220 --> 00:09:55,589
numeric command process and then some

275
00:09:55,589 --> 00:09:58,800
send some response back to us now before

276
00:09:58,800 --> 00:10:00,389
we start actually building the custom

277
00:10:00,389 --> 00:10:02,130
command and control server we need to

278
00:10:02,130 --> 00:10:04,170
talk about passively observing the

279
00:10:04,170 --> 00:10:06,149
malware and this is essential because

280
00:10:06,149 --> 00:10:08,970
even if we have a compatible custom

281
00:10:08,970 --> 00:10:10,920
command and control server that the

282
00:10:10,920 --> 00:10:12,870
malware will talk to that we can't ask

283
00:10:12,870 --> 00:10:14,939
the malware we can't observe what the

284
00:10:14,939 --> 00:10:17,670
malware is doing we really might gain no

285
00:10:17,670 --> 00:10:20,339
insight into the malware for example if

286
00:10:20,339 --> 00:10:23,279
we ask it to execute say command number

287
00:10:23,279 --> 00:10:26,490
8 and it gives us back a 1 or a 0 ok

288
00:10:26,490 --> 00:10:28,649
that's probably a success or failure

289
00:10:28,649 --> 00:10:30,750
case but if we don't passively monitor

290
00:10:30,750 --> 00:10:32,490
the malware on the infected host we have

291
00:10:32,490 --> 00:10:35,870
no idea actually what that tasking did

292
00:10:35,870 --> 00:10:38,430
so the question then becomes what do we

293
00:10:38,430 --> 00:10:40,170
want to monitor and the answer is pretty

294
00:10:40,170 --> 00:10:44,310
much as much as possible and this is

295
00:10:44,310 --> 00:10:46,470
because you know a given command might

296
00:10:46,470 --> 00:10:48,269
interact with the file system right it

297
00:10:48,269 --> 00:10:49,740
might create files and might write files

298
00:10:49,740 --> 00:10:51,180
might read files we want to be able to

299
00:10:51,180 --> 00:10:53,610
observe that it might spawn off new

300
00:10:53,610 --> 00:10:55,769
processes or execute shell commands so

301
00:10:55,769 --> 00:10:57,480
we want to monitor that as well might

302
00:10:57,480 --> 00:10:59,189
interact with the mouse and keyboard and

303
00:10:59,189 --> 00:11:00,600
of course it's probably going to send

304
00:11:00,600 --> 00:11:02,310
some interesting data back via the

305
00:11:02,310 --> 00:11:04,470
network so we should monitor for all the

306
00:11:04,470 --> 00:11:06,149
events so that we can understand the

307
00:11:06,149 --> 00:11:07,980
malware's capabilities simply

308
00:11:07,980 --> 00:11:10,950
yeah tasking so let's take a closer look

309
00:11:10,950 --> 00:11:13,320
at each of these first is network

310
00:11:13,320 --> 00:11:15,780
monitoring on Mac OS this is actually

311
00:11:15,780 --> 00:11:17,610
pretty easy to do because there's a lot

312
00:11:17,610 --> 00:11:20,040
of good existing tools for example we

313
00:11:20,040 --> 00:11:21,990
can use TCP dump sure we're all familiar

314
00:11:21,990 --> 00:11:22,650
with that

315
00:11:22,650 --> 00:11:25,260
here we monitor for DNS traffic and we

316
00:11:25,260 --> 00:11:26,790
can see the malware when it's executed

317
00:11:26,790 --> 00:11:28,710
without any command-line arguments it

318
00:11:28,710 --> 00:11:30,990
selected one of its primary command

319
00:11:30,990 --> 00:11:32,880
control servers and is trying to resolve

320
00:11:32,880 --> 00:11:35,190
the address of that here we can see it

321
00:11:35,190 --> 00:11:38,400
actually the response is 127 dot 0.01

322
00:11:38,400 --> 00:11:40,410
meaning that the primary command control

323
00:11:40,410 --> 00:11:42,870
server is actually offline we'll be

324
00:11:42,870 --> 00:11:44,880
talking about tasking a little bit more

325
00:11:44,880 --> 00:11:46,740
in a minute but at the bottom we can see

326
00:11:46,740 --> 00:11:50,280
a wired sorry yeah why are the wireshark

327
00:11:50,280 --> 00:11:52,830
capture of the malware responding to

328
00:11:52,830 --> 00:11:56,610
command number 13 so our command control

329
00:11:56,610 --> 00:11:58,110
server has told the malware to execute

330
00:11:58,110 --> 00:12:01,080
command number 13 and via the wireshark

331
00:12:01,080 --> 00:12:03,510
capture we can actually see that it's

332
00:12:03,510 --> 00:12:06,300
returning the install path so again we

333
00:12:06,300 --> 00:12:07,920
didn't know necessarily what command

334
00:12:07,920 --> 00:12:09,480
number 13 was but via the network

335
00:12:09,480 --> 00:12:11,280
capture we've now just determined that

336
00:12:11,280 --> 00:12:13,560
command number 13 returns the location

337
00:12:13,560 --> 00:12:16,430
where the malware itself is installed

338
00:12:16,430 --> 00:12:19,710
next up is file monitoring we can use

339
00:12:19,710 --> 00:12:21,690
again another built-in utility this time

340
00:12:21,690 --> 00:12:24,660
the FS usage command this is a built-in

341
00:12:24,660 --> 00:12:27,480
mock os utility or tool that's on the

342
00:12:27,480 --> 00:12:30,000
system that allows you to monitor file

343
00:12:30,000 --> 00:12:32,670
i/o events so we can use this to capture

344
00:12:32,670 --> 00:12:35,550
any file i/o activity that's related to

345
00:12:35,550 --> 00:12:37,290
the malware as it's executing or

346
00:12:37,290 --> 00:12:39,900
responding to our tasking various

347
00:12:39,900 --> 00:12:41,280
commands will see will actually cause

348
00:12:41,280 --> 00:12:43,440
the malware to save or drop that

349
00:12:43,440 --> 00:12:46,020
embedded mock Oh binary and via the

350
00:12:46,020 --> 00:12:48,060
final file monitor we'll be able to

351
00:12:48,060 --> 00:12:50,310
observe this so here we can see it saves

352
00:12:50,310 --> 00:12:54,420
it to / private / temp / client so what

353
00:12:54,420 --> 00:12:56,160
we can do is then we can grab that mock

354
00:12:56,160 --> 00:12:58,500
Oh binary the malware has nicely decoded

355
00:12:58,500 --> 00:13:00,960
and decrypted it for us and then we can

356
00:13:00,960 --> 00:13:03,000
analyze this however we'll see if you

357
00:13:03,000 --> 00:13:04,230
don't actually have to spend a lot of

358
00:13:04,230 --> 00:13:07,230
time analyzing it because the tasking of

359
00:13:07,230 --> 00:13:08,940
the malware via the custom command

360
00:13:08,940 --> 00:13:10,470
control server will actually reveal the

361
00:13:10,470 --> 00:13:14,550
capabilities of this Mokpo binary next

362
00:13:14,550 --> 00:13:16,860
up we have process monitoring which is

363
00:13:16,860 --> 00:13:18,630
important because the malware is likely

364
00:13:18,630 --> 00:13:21,030
to spawn off new process or execute

365
00:13:21,030 --> 00:13:21,990
shell commands

366
00:13:21,990 --> 00:13:24,180
in order to process various commands

367
00:13:24,180 --> 00:13:26,520
that we may give it on recent versions

368
00:13:26,520 --> 00:13:29,010
of Mac OS DTrace which was normally used

369
00:13:29,010 --> 00:13:30,839
to do such process monitoring has been

370
00:13:30,839 --> 00:13:31,980
neutered due to system integrity

371
00:13:31,980 --> 00:13:34,050
protection and as far as I know there

372
00:13:34,050 --> 00:13:36,480
was not any open source free user mode

373
00:13:36,480 --> 00:13:38,790
alternative to due process monitoring on

374
00:13:38,790 --> 00:13:42,209
Mac OS so I decided to write my own and

375
00:13:42,209 --> 00:13:44,310
make it of course open source so here's

376
00:13:44,310 --> 00:13:45,750
some of the code from the library you

377
00:13:45,750 --> 00:13:49,200
can see we're using the audit API Mac OS

378
00:13:49,200 --> 00:13:51,630
has the ability to audit things such as

379
00:13:51,630 --> 00:13:53,640
process events so what we can do is we

380
00:13:53,640 --> 00:13:56,220
can open the audit pipe that's made

381
00:13:56,220 --> 00:13:58,200
available to us via the kernel and read

382
00:13:58,200 --> 00:14:00,270
audit events that come in specifically

383
00:14:00,270 --> 00:14:03,120
ones related to process monitoring now

384
00:14:03,120 --> 00:14:04,740
the information that comes back from

385
00:14:04,740 --> 00:14:07,410
this audit pipe is not in the best

386
00:14:07,410 --> 00:14:09,570
format so we have to do some binary

387
00:14:09,570 --> 00:14:12,420
parsing and make it more digestible for

388
00:14:12,420 --> 00:14:14,370
clients but this library which is

389
00:14:14,370 --> 00:14:16,800
available on github will do this all for

390
00:14:16,800 --> 00:14:19,290
us so here's some slide some code on the

391
00:14:19,290 --> 00:14:21,029
slide showing just how easy it is to

392
00:14:21,029 --> 00:14:23,010
actually use this library you basically

393
00:14:23,010 --> 00:14:25,680
link it in create a process monitor

394
00:14:25,680 --> 00:14:27,959
object and then you invoke the start

395
00:14:27,959 --> 00:14:29,850
method and you give the start method a

396
00:14:29,850 --> 00:14:32,490
callback block that will be invoked by

397
00:14:32,490 --> 00:14:35,040
the library anytime a process start or

398
00:14:35,040 --> 00:14:37,649
exit event occurs now the cool thing

399
00:14:37,649 --> 00:14:39,420
about this library is when such an event

400
00:14:39,420 --> 00:14:41,190
occurs it doesn't just give you an alert

401
00:14:41,190 --> 00:14:43,110
and say the pit it actually gives you a

402
00:14:43,110 --> 00:14:44,579
ton of really useful information about

403
00:14:44,579 --> 00:14:46,950
the process for example obviously the

404
00:14:46,950 --> 00:14:48,870
full path but also then things like

405
00:14:48,870 --> 00:14:50,880
signing information so you can say is

406
00:14:50,880 --> 00:14:53,430
this process belong does it belong to

407
00:14:53,430 --> 00:14:55,260
Apple proper is it from the Mac App

408
00:14:55,260 --> 00:14:57,810
Store or is it unsigned you also get a

409
00:14:57,810 --> 00:15:00,540
list of processes that spawned it so

410
00:15:00,540 --> 00:15:02,100
it's ancestors to get command-line

411
00:15:02,100 --> 00:15:03,420
arguments so a whole bunch of very

412
00:15:03,420 --> 00:15:05,700
useful information so again we'll talk

413
00:15:05,700 --> 00:15:07,680
more about tasking but here you can see

414
00:15:07,680 --> 00:15:10,050
that when we execute command number 11

415
00:15:10,050 --> 00:15:12,180
the process monitor library detects that

416
00:15:12,180 --> 00:15:14,520
the malware has executed the PWD command

417
00:15:14,520 --> 00:15:15,839
to get the malware's current working

418
00:15:15,839 --> 00:15:19,170
directory I also wanted to have a mouse

419
00:15:19,170 --> 00:15:21,480
and keyboard sniffer I found some old

420
00:15:21,480 --> 00:15:23,940
code that allowed you to intercept and

421
00:15:23,940 --> 00:15:26,459
modify mouse and keyboard events however

422
00:15:26,459 --> 00:15:28,079
I wanted just a pure sniffer that would

423
00:15:28,079 --> 00:15:31,079
work on Mac OS so I wrote one based on

424
00:15:31,079 --> 00:15:34,110
the old code again this is released

425
00:15:34,110 --> 00:15:35,970
open-source free on github

426
00:15:35,970 --> 00:15:38,519
sniff m'kay and you can see that it will

427
00:15:38,519 --> 00:15:40,680
capture or observe mouse and keyboard

428
00:15:40,680 --> 00:15:43,350
events via the carbon API specifically

429
00:15:43,350 --> 00:15:47,430
the event tax here's an example of us

430
00:15:47,430 --> 00:15:50,220
running the sniffer we then type hi and

431
00:15:50,220 --> 00:15:51,660
move and click the mouse and on the

432
00:15:51,660 --> 00:15:53,339
right side of the screen you can see

433
00:15:53,339 --> 00:15:55,050
that the mouse and keyboard sniffer has

434
00:15:55,050 --> 00:15:57,329
detected these events and spit them out

435
00:15:57,329 --> 00:15:59,040
so this is good because this means if

436
00:15:59,040 --> 00:16:00,839
the mouse the malware is interacting

437
00:16:00,839 --> 00:16:01,589
with the mouse and keyboard

438
00:16:01,589 --> 00:16:03,540
programmatically we will be able to

439
00:16:03,540 --> 00:16:07,379
detect those vets ok so now we have a

440
00:16:07,379 --> 00:16:09,839
good toolbox for monitoring the malware

441
00:16:09,839 --> 00:16:11,939
it's finally now get to talking about

442
00:16:11,939 --> 00:16:13,680
building the custom command and control

443
00:16:13,680 --> 00:16:16,170
server recall again we can specify the

444
00:16:16,170 --> 00:16:17,939
address of the server via the command

445
00:16:17,939 --> 00:16:20,339
line and also we understand the protocol

446
00:16:20,339 --> 00:16:21,839
specifically we understand the malware

447
00:16:21,839 --> 00:16:23,459
is going to connect to our server

448
00:16:23,459 --> 00:16:25,980
provide some information about the

449
00:16:25,980 --> 00:16:28,079
infected system and then expects a

450
00:16:28,079 --> 00:16:30,449
single byte a command-line numeric

451
00:16:30,449 --> 00:16:32,970
argument that it then processes as the

452
00:16:32,970 --> 00:16:35,790
command so we start by building a custom

453
00:16:35,790 --> 00:16:37,170
command and control server just the

454
00:16:37,170 --> 00:16:39,029
simple Python script that accepts

455
00:16:39,029 --> 00:16:41,910
connections on a port we start this we

456
00:16:41,910 --> 00:16:44,100
then execute the malware in a VM we

457
00:16:44,100 --> 00:16:46,500
specify the address of this command

458
00:16:46,500 --> 00:16:48,569
control server and then when the malware

459
00:16:48,569 --> 00:16:50,430
executes we can see that it connects to

460
00:16:50,430 --> 00:16:52,740
our server we're not doing anything

461
00:16:52,740 --> 00:16:54,240
special at this point but you know baby

462
00:16:54,240 --> 00:16:55,680
steps this shows that the malware at

463
00:16:55,680 --> 00:16:59,009
least will start talking to us so what

464
00:16:59,009 --> 00:17:00,209
does the malware actually do when it

465
00:17:00,209 --> 00:17:02,100
connects you know I mentioned it sends

466
00:17:02,100 --> 00:17:03,509
some client information what is the

467
00:17:03,509 --> 00:17:06,000
format of this client information well

468
00:17:06,000 --> 00:17:07,589
we can go back to the malicious Perl

469
00:17:07,589 --> 00:17:09,809
script briefly triage it and we can see

470
00:17:09,809 --> 00:17:12,359
the format of this data specifically we

471
00:17:12,359 --> 00:17:14,339
can see it's ending things such as the

472
00:17:14,339 --> 00:17:16,289
version string of them our the hostname

473
00:17:16,289 --> 00:17:18,390
and the username of the infected

474
00:17:18,390 --> 00:17:20,609
computer so what we can do is we can

475
00:17:20,609 --> 00:17:21,869
extend the custom command and control

476
00:17:21,869 --> 00:17:24,329
server to parse and display this

477
00:17:24,329 --> 00:17:25,770
information when the malware connects

478
00:17:25,770 --> 00:17:27,510
this is so now you can see that whenever

479
00:17:27,510 --> 00:17:31,320
an instance of an infected system or the

480
00:17:31,320 --> 00:17:32,370
malware that's running in the VM

481
00:17:32,370 --> 00:17:33,659
connects to our command and control

482
00:17:33,659 --> 00:17:36,000
server we will parse this data and print

483
00:17:36,000 --> 00:17:39,299
it to the screen now the meat of the

484
00:17:39,299 --> 00:17:40,830
custom command and control server was

485
00:17:40,830 --> 00:17:43,289
obviously tasking and handling command

486
00:17:43,289 --> 00:17:45,809
responses turns out there was about 25

487
00:17:45,809 --> 00:17:47,460
commands that this malware supported

488
00:17:47,460 --> 00:17:49,570
with a variety of subcommands

489
00:17:49,570 --> 00:17:52,779
the total to about 50 so the custom

490
00:17:52,779 --> 00:17:54,039
command control server I wrote for this

491
00:17:54,039 --> 00:17:56,109
malware supported all of these 50

492
00:17:56,109 --> 00:17:58,450
commands now when I started I didn't

493
00:17:58,450 --> 00:18:00,220
know what any of these commands actually

494
00:18:00,220 --> 00:18:02,830
did so what I would do is for each

495
00:18:02,830 --> 00:18:05,259
command I would triage it looking for

496
00:18:05,259 --> 00:18:07,600
any command specific protocol for

497
00:18:07,600 --> 00:18:10,119
example I look did the command I was

498
00:18:10,119 --> 00:18:12,279
creating or implemented in the custom

499
00:18:12,279 --> 00:18:14,169
command and control server did it expect

500
00:18:14,169 --> 00:18:16,869
additional bytes and what was the format

501
00:18:16,869 --> 00:18:19,690
of the response once I had this again

502
00:18:19,690 --> 00:18:20,950
even though I didn't know what the

503
00:18:20,950 --> 00:18:23,229
command actually did I could then send

504
00:18:23,229 --> 00:18:25,809
the command to the malware and observe

505
00:18:25,809 --> 00:18:27,070
what it did on the box using the

506
00:18:27,070 --> 00:18:29,049
monitoring tools and then collect the

507
00:18:29,049 --> 00:18:32,139
response when it responded back to me so

508
00:18:32,139 --> 00:18:33,340
now we're going to talk about tasking

509
00:18:33,340 --> 00:18:34,809
which is how again we were able to

510
00:18:34,809 --> 00:18:37,330
expose the capabilities of this malware

511
00:18:37,330 --> 00:18:38,830
now unfortunately due to time

512
00:18:38,830 --> 00:18:40,509
constraints I can't go through all of

513
00:18:40,509 --> 00:18:42,580
these commands but will focus on what I

514
00:18:42,580 --> 00:18:44,499
think are the most interesting and the

515
00:18:44,499 --> 00:18:45,999
white paper that's in the conference

516
00:18:45,999 --> 00:18:48,519
proceedings I articulate and describe

517
00:18:48,519 --> 00:18:50,019
all the commands so if you want more

518
00:18:50,019 --> 00:18:52,239
details I recommend you checking out the

519
00:18:52,239 --> 00:18:54,279
paper and again just to reiterate when I

520
00:18:54,279 --> 00:18:57,340
started tasking the Maur again I had no

521
00:18:57,340 --> 00:18:59,379
idea what each specific command did I

522
00:18:59,379 --> 00:19:01,389
just knew you know it took a number some

523
00:19:01,389 --> 00:19:03,369
command so let's start with command

524
00:19:03,369 --> 00:19:05,499
number two if we look at the malicious

525
00:19:05,499 --> 00:19:08,340
Perl script we can see it invokes J to

526
00:19:08,340 --> 00:19:11,769
expect one extra byte and then invokes G

527
00:19:11,769 --> 00:19:14,710
to send a response back to the server so

528
00:19:14,710 --> 00:19:16,239
we understand the protocol we still

529
00:19:16,239 --> 00:19:18,369
don't know what this actually does so

530
00:19:18,369 --> 00:19:20,619
when we then tell the malware to execute

531
00:19:20,619 --> 00:19:22,899
command number two we can see via the

532
00:19:22,899 --> 00:19:25,210
file monitor it saves that embedded mock

533
00:19:25,210 --> 00:19:27,580
Oh binary to slash temp slash client and

534
00:19:27,580 --> 00:19:30,220
then execute it we can see this via the

535
00:19:30,220 --> 00:19:32,889
process monitor via the network capture

536
00:19:32,889 --> 00:19:34,539
then we can see it sends us back about a

537
00:19:34,539 --> 00:19:36,429
Meg of data so the custom command and

538
00:19:36,429 --> 00:19:38,169
control server we can save this data out

539
00:19:38,169 --> 00:19:40,840
to disk and then run the file utility or

540
00:19:40,840 --> 00:19:42,279
dump it to see what the format of this

541
00:19:42,279 --> 00:19:45,099
data is turns out it's a PNG file and

542
00:19:45,099 --> 00:19:46,749
when we open it we can very easily see

543
00:19:46,749 --> 00:19:49,179
it's a screen capture so that we know

544
00:19:49,179 --> 00:19:51,009
command number two is the screen capture

545
00:19:51,009 --> 00:19:53,499
command and again we found this out just

546
00:19:53,499 --> 00:19:56,169
be a tasket remember though this command

547
00:19:56,169 --> 00:19:58,359
takes an additional byte I had no idea

548
00:19:58,359 --> 00:20:00,190
what this was right I gave it a zero and

549
00:20:00,190 --> 00:20:03,450
it gave me back PNG but we have this

550
00:20:03,450 --> 00:20:04,889
some command and control server so

551
00:20:04,889 --> 00:20:06,179
instead of having to reverse-engineer

552
00:20:06,179 --> 00:20:07,919
the malware and see what this additional

553
00:20:07,919 --> 00:20:10,110
byte does we can just send it a variety

554
00:20:10,110 --> 00:20:11,700
of values for this second byte and

555
00:20:11,700 --> 00:20:13,529
observe the response and this will very

556
00:20:13,529 --> 00:20:15,269
easily tell us exactly what the second

557
00:20:15,269 --> 00:20:17,130
byte is so the table on the slide you

558
00:20:17,130 --> 00:20:18,840
can see that the second byte actually

559
00:20:18,840 --> 00:20:22,049
controls the format of the image so you

560
00:20:22,049 --> 00:20:23,309
give it a 1 it gives you a black and

561
00:20:23,309 --> 00:20:26,159
white PNG a 10 gives you a low res jpg

562
00:20:26,159 --> 00:20:28,019
so this kind of the power of a custom

563
00:20:28,019 --> 00:20:30,360
command and control server all right on

564
00:20:30,360 --> 00:20:32,700
to command number 8 again we first

565
00:20:32,700 --> 00:20:34,950
triage that command we see it accepts

566
00:20:34,950 --> 00:20:37,350
nine additional bytes so this means we

567
00:20:37,350 --> 00:20:38,669
have to give it nine additional bytes

568
00:20:38,669 --> 00:20:39,809
from the custom command and control

569
00:20:39,809 --> 00:20:42,090
server and again it drops in execs the

570
00:20:42,090 --> 00:20:44,100
embedded binary passing in those nine

571
00:20:44,100 --> 00:20:46,260
bytes the response that sends us back

572
00:20:46,260 --> 00:20:48,149
either one or two bytes so unlike the

573
00:20:48,149 --> 00:20:50,100
screenshot command this provides no

574
00:20:50,100 --> 00:20:51,779
insight into actually what this command

575
00:20:51,779 --> 00:20:53,730
does so again it's important that we

576
00:20:53,730 --> 00:20:56,220
have these monitoring capabilities so we

577
00:20:56,220 --> 00:20:58,260
task this command we send eight and then

578
00:20:58,260 --> 00:21:00,510
we pass nine up extra bytes as zero one

579
00:21:00,510 --> 00:21:02,610
two three four five six and we notice

580
00:21:02,610 --> 00:21:04,889
that the mouse sniffer registers a move

581
00:21:04,889 --> 00:21:07,679
to the XY coordinates so watch very

582
00:21:07,679 --> 00:21:09,510
closely we're going to see that on the

583
00:21:09,510 --> 00:21:11,130
screen the mouse is going to move to

584
00:21:11,130 --> 00:21:13,950
coordinates one two three four five six

585
00:21:13,950 --> 00:21:16,740
so this is actually the command that the

586
00:21:16,740 --> 00:21:19,559
that an attacker can actually move the

587
00:21:19,559 --> 00:21:21,480
mouse so again we want to figure out

588
00:21:21,480 --> 00:21:23,039
what this second byte is we know the

589
00:21:23,039 --> 00:21:25,679
last eight bytes are the XY coordinates

590
00:21:25,679 --> 00:21:27,750
but what about that second byte again we

591
00:21:27,750 --> 00:21:29,070
can just task we don't have to reverse

592
00:21:29,070 --> 00:21:31,019
the malware we just give it a 0 a 1 a 2

593
00:21:31,019 --> 00:21:33,299
it's you know all the way up to 7 8 9 10

594
00:21:33,299 --> 00:21:36,539
and observe what goes on it turns out

595
00:21:36,539 --> 00:21:38,159
this is a sub command that actually

596
00:21:38,159 --> 00:21:40,559
dictates what type of mouse activity the

597
00:21:40,559 --> 00:21:42,419
malware should do so you can do a left

598
00:21:42,419 --> 00:21:45,450
click a right click a drag all sorts of

599
00:21:45,450 --> 00:21:48,659
mouse commands again look closely bottom

600
00:21:48,659 --> 00:21:50,519
right of the screen we can now see that

601
00:21:50,519 --> 00:21:53,760
we can send a click to a coordinate on

602
00:21:53,760 --> 00:21:55,620
the screen and this will be a way for

603
00:21:55,620 --> 00:21:57,029
the attacker to interact with UI

604
00:21:57,029 --> 00:21:59,070
elements for example dismiss a security

605
00:21:59,070 --> 00:22:02,970
alert pretty nice feature final commands

606
00:22:02,970 --> 00:22:05,700
I want to talk about are 16 and 17 turns

607
00:22:05,700 --> 00:22:07,909
out these are keyboard related events

608
00:22:07,909 --> 00:22:10,620
again we triage the command we see it

609
00:22:10,620 --> 00:22:13,409
invoked the J subroutine to expect one

610
00:22:13,409 --> 00:22:15,000
additional byte from the command control

611
00:22:15,000 --> 00:22:16,210
server

612
00:22:16,210 --> 00:22:18,220
folks the V subroutine which we know

613
00:22:18,220 --> 00:22:20,830
drops and executes the embedded mock Oh

614
00:22:20,830 --> 00:22:23,410
binary so when we execute this for

615
00:22:23,410 --> 00:22:26,440
example we give it command number 16 the

616
00:22:26,440 --> 00:22:28,330
keyboard sniffer shows a key down event

617
00:22:28,330 --> 00:22:31,540
and then if we execute command number 17

618
00:22:31,540 --> 00:22:33,760
the mouse and keyboard sniffer registers

619
00:22:33,760 --> 00:22:36,490
a key up of it so obviously this is the

620
00:22:36,490 --> 00:22:39,460
way or this is a way an ability of the

621
00:22:39,460 --> 00:22:41,470
malware to allow the remote attacker to

622
00:22:41,470 --> 00:22:43,390
interact again with the system by typing

623
00:22:43,390 --> 00:22:45,660
so here we're going to instruct the

624
00:22:45,660 --> 00:22:48,970
malware to type H I in a text edit

625
00:22:48,970 --> 00:22:51,370
prompt it's a little slow but yeah

626
00:22:51,370 --> 00:22:52,870
remote typing it's kind of a neat

627
00:22:52,870 --> 00:22:56,080
feature somebody did was I repeated this

628
00:22:56,080 --> 00:22:57,670
process for every command right looked

629
00:22:57,670 --> 00:22:59,110
at the command just to understand the

630
00:22:59,110 --> 00:23:02,290
format of its protocol tasks it looked

631
00:23:02,290 --> 00:23:04,270
at the response and then this gave me a

632
00:23:04,270 --> 00:23:06,100
really good understanding basically a

633
00:23:06,100 --> 00:23:08,590
comprehensive understanding of all the

634
00:23:08,590 --> 00:23:10,780
capabilities of the mount right they say

635
00:23:10,780 --> 00:23:12,510
communication is key in this scenario

636
00:23:12,510 --> 00:23:14,620
it's true even when we're talking about

637
00:23:14,620 --> 00:23:16,510
malware so I talked about the most

638
00:23:16,510 --> 00:23:18,580
interesting ones but you can see it also

639
00:23:18,580 --> 00:23:20,710
supports other commands like executing

640
00:23:20,710 --> 00:23:23,740
system commands shell commands process

641
00:23:23,740 --> 00:23:26,410
listing file upload file downloads and

642
00:23:26,410 --> 00:23:29,710
one other really interesting command is

643
00:23:29,710 --> 00:23:32,200
you can actually set an alert that will

644
00:23:32,200 --> 00:23:34,270
trigger when the user is active

645
00:23:34,270 --> 00:23:36,460
obviously this malware is used to

646
00:23:36,460 --> 00:23:39,220
perform interaction interactive

647
00:23:39,220 --> 00:23:41,110
operations or supports that capability

648
00:23:41,110 --> 00:23:42,760
and obviously you don't want to be

649
00:23:42,760 --> 00:23:43,740
moving the mouse and the keyboard

650
00:23:43,740 --> 00:23:47,170
remotely if the user is actually sitting

651
00:23:47,170 --> 00:23:48,580
in front of the computer so having the

652
00:23:48,580 --> 00:23:51,070
ability to detect if the user is active

653
00:23:51,070 --> 00:23:53,770
or not is a really interesting technique

654
00:23:53,770 --> 00:23:56,430
that we really don't see in Mac that way

655
00:23:56,430 --> 00:23:58,930
all right so now we have a fully

656
00:23:58,930 --> 00:24:00,970
compatible custom command control server

657
00:24:00,970 --> 00:24:04,360
let's talk about hunting some flies so

658
00:24:04,360 --> 00:24:05,590
as I mentioned you ping the primary

659
00:24:05,590 --> 00:24:06,850
command and control servers they all

660
00:24:06,850 --> 00:24:09,340
come back with 127 dot 0.01 meaning

661
00:24:09,340 --> 00:24:11,740
they're offline but recall we decrypted

662
00:24:11,740 --> 00:24:13,480
some backup command and control servers

663
00:24:13,480 --> 00:24:16,000
and when we go and look online

664
00:24:16,000 --> 00:24:17,590
turns out these addresses were all

665
00:24:17,590 --> 00:24:20,170
available so I did what we would all

666
00:24:20,170 --> 00:24:22,060
probably do here and register those

667
00:24:22,060 --> 00:24:24,160
command and control servers configure

668
00:24:24,160 --> 00:24:26,170
the DNS to point to my custom command

669
00:24:26,170 --> 00:24:28,210
control server I didn't really know what

670
00:24:28,210 --> 00:24:30,040
what happened but immediately

671
00:24:30,040 --> 00:24:32,770
hundreds of infected hosts connected to

672
00:24:32,770 --> 00:24:35,590
my server kind of freak me out a little

673
00:24:35,590 --> 00:24:36,940
bit but at the same time a super stoked

674
00:24:36,940 --> 00:24:39,190
now for each of these connections

675
00:24:39,190 --> 00:24:40,810
remember that when the malware checks in

676
00:24:40,810 --> 00:24:41,740
it sends us some really interesting

677
00:24:41,740 --> 00:24:43,750
information specifically the username

678
00:24:43,750 --> 00:24:46,120
computer name and obviously we get an IP

679
00:24:46,120 --> 00:24:48,850
address as well now because Mac's

680
00:24:48,850 --> 00:24:50,830
usually name the host name the first and

681
00:24:50,830 --> 00:24:53,800
last name of the host or the person

682
00:24:53,800 --> 00:24:55,450
that's set up the account we can pretty

683
00:24:55,450 --> 00:24:57,580
readily identify victims so for example

684
00:24:57,580 --> 00:24:59,110
if my computer was infected you would

685
00:24:59,110 --> 00:25:01,960
see the user name is Patrick the host

686
00:25:01,960 --> 00:25:04,330
name is Patrick warbles MacBook and we

687
00:25:04,330 --> 00:25:06,550
have an IP address in Hawaii so

688
00:25:06,550 --> 00:25:07,960
obviously then you Google like Patrick

689
00:25:07,960 --> 00:25:09,550
world of Hawaii and you would purely

690
00:25:09,550 --> 00:25:12,430
easily identify me where I work where I

691
00:25:12,430 --> 00:25:15,100
live etc etc interestingly for this

692
00:25:15,100 --> 00:25:17,620
malware about 90% of the infected

693
00:25:17,620 --> 00:25:20,050
victims were all within the US or Canada

694
00:25:20,050 --> 00:25:22,900
and there was some kind of hotspots or

695
00:25:22,900 --> 00:25:24,880
geo locations that really seemed to

696
00:25:24,880 --> 00:25:27,220
attract a large number of victims for

697
00:25:27,220 --> 00:25:29,230
example in Ohio like twenty or thirty

698
00:25:29,230 --> 00:25:32,260
percent of the victims in the u.s. fell

699
00:25:32,260 --> 00:25:35,170
in that area so now the question is who

700
00:25:35,170 --> 00:25:36,280
are these victims and why are there

701
00:25:36,280 --> 00:25:38,020
being targeted you know really what was

702
00:25:38,020 --> 00:25:40,120
the goal of this malware and generally

703
00:25:40,120 --> 00:25:42,220
we can determine what a goal of the

704
00:25:42,220 --> 00:25:44,830
Mauer is by looking at its features so

705
00:25:44,830 --> 00:25:46,690
you know there's basically two types of

706
00:25:46,690 --> 00:25:48,610
malware you have malware that's written

707
00:25:48,610 --> 00:25:50,890
by cyber criminals it's most interested

708
00:25:50,890 --> 00:25:53,010
in money so it's gonna be displaying ads

709
00:25:53,010 --> 00:25:56,050
ransoming files generating fake ads

710
00:25:56,050 --> 00:25:58,900
clicks key logging for you know banking

711
00:25:58,900 --> 00:26:00,730
creds all that fun stuff on the other

712
00:26:00,730 --> 00:26:01,930
side you're gonna have nation state that

713
00:26:01,930 --> 00:26:03,100
kind of malware is gonna have

714
00:26:03,100 --> 00:26:05,350
interactive shells for more hands-on

715
00:26:05,350 --> 00:26:07,600
operations it's probably you might be

716
00:26:07,600 --> 00:26:09,400
turning on webcam to spy on people

717
00:26:09,400 --> 00:26:13,300
screen captures etc etc so if we look at

718
00:26:13,300 --> 00:26:15,070
fruit fly it's kind of interesting

719
00:26:15,070 --> 00:26:16,900
because the victims that are being

720
00:26:16,900 --> 00:26:18,820
targeted are the ones that are normally

721
00:26:18,820 --> 00:26:20,950
targeted by financial crime right these

722
00:26:20,950 --> 00:26:23,710
everyday victims nation-state malware

723
00:26:23,710 --> 00:26:24,970
usually targets you know defense

724
00:26:24,970 --> 00:26:27,490
contractors political organizations R&D

725
00:26:27,490 --> 00:26:30,450
labs etc not like some mom in Ohio

726
00:26:30,450 --> 00:26:32,350
unfortunately though in terms of

727
00:26:32,350 --> 00:26:34,300
features this MAO are mostly aligned

728
00:26:34,300 --> 00:26:36,010
with you know the nation states type

729
00:26:36,010 --> 00:26:37,180
stuff have the ability to turn on the

730
00:26:37,180 --> 00:26:39,520
webcam interactive shells screen capture

731
00:26:39,520 --> 00:26:42,070
etc so this pretty much leaves us with

732
00:26:42,070 --> 00:26:43,779
the only other option is

733
00:26:43,779 --> 00:26:45,879
is a hacker is specifically targeting

734
00:26:45,879 --> 00:26:48,340
everyday individuals to spy on them for

735
00:26:48,340 --> 00:26:51,429
very perverse reasons so I took all this

736
00:26:51,429 --> 00:26:53,440
information and hand it off to law

737
00:26:53,440 --> 00:26:55,210
enforcement basically the list of

738
00:26:55,210 --> 00:26:57,940
victims who they were and also of course

739
00:26:57,940 --> 00:27:00,330
the command and control serves and

740
00:27:00,330 --> 00:27:02,340
they're kind of running with this and

741
00:27:02,340 --> 00:27:04,809
I'm happy to say that unfortunately I

742
00:27:04,809 --> 00:27:06,279
can't really go into any specific

743
00:27:06,279 --> 00:27:08,259
details now but in the next few months

744
00:27:08,259 --> 00:27:10,119
we should be able to comprehensively and

745
00:27:10,119 --> 00:27:12,279
conclusively answer the questions that

746
00:27:12,279 --> 00:27:13,450
we always want to know when we're

747
00:27:13,450 --> 00:27:15,340
analyzing malware specifically who did

748
00:27:15,340 --> 00:27:17,799
it why who the victims were and all that

749
00:27:17,799 --> 00:27:19,299
stuff so stay tuned because I'm

750
00:27:19,299 --> 00:27:21,279
confident that we will have some full

751
00:27:21,279 --> 00:27:24,759
closure on this malware and some other

752
00:27:24,759 --> 00:27:26,859
interesting stuff as well all right so

753
00:27:26,859 --> 00:27:28,440
let's wrap this up we have two minutes

754
00:27:28,440 --> 00:27:30,450
again we showed today how to

755
00:27:30,450 --> 00:27:32,679
comprehensively analyze an interesting

756
00:27:32,679 --> 00:27:34,960
piece of malware just by asking the

757
00:27:34,960 --> 00:27:36,969
right questions we built a custom

758
00:27:36,969 --> 00:27:39,369
command and control server tasks them

759
00:27:39,369 --> 00:27:41,679
our and then observe the malware's

760
00:27:41,679 --> 00:27:43,629
response along the way we built some

761
00:27:43,629 --> 00:27:46,200
interesting open source utilities that

762
00:27:46,200 --> 00:27:49,599
are available online an end result we

763
00:27:49,599 --> 00:27:52,479
have a full analysis of OSX fruit fly

764
00:27:52,479 --> 00:27:55,299
variant B we were also then able to

765
00:27:55,299 --> 00:27:57,729
uncover a lot or a large number of the

766
00:27:57,729 --> 00:28:00,460
victims who were infected and we worked

767
00:28:00,460 --> 00:28:02,529
with law enforcement as well of course

768
00:28:02,529 --> 00:28:04,899
if we were more subversive or blackhat

769
00:28:04,899 --> 00:28:06,519
we could have obviously hijacked and

770
00:28:06,519 --> 00:28:08,739
taken off over the the victims and built

771
00:28:08,739 --> 00:28:10,749
you know our own botnet but you know

772
00:28:10,749 --> 00:28:13,210
we're the good guys here so that of

773
00:28:13,210 --> 00:28:15,249
course never happens all right so

774
00:28:15,249 --> 00:28:17,349
finally people often ask me you know how

775
00:28:17,349 --> 00:28:18,820
can you protect against these as I

776
00:28:18,820 --> 00:28:20,289
mentioned this malware appears to have

777
00:28:20,289 --> 00:28:22,029
been around for five to ten years again

778
00:28:22,029 --> 00:28:24,309
ongoing analysis by law enforcement

779
00:28:24,309 --> 00:28:28,960
seems to confirm this trend as well I'm

780
00:28:28,960 --> 00:28:30,879
all about writing free security tools

781
00:28:30,879 --> 00:28:32,859
that can proactively detect some of this

782
00:28:32,859 --> 00:28:35,200
stuff via looking for generic behaviors

783
00:28:35,200 --> 00:28:37,509
and actions so in my free time I run a

784
00:28:37,509 --> 00:28:39,429
Mac security website named objective-c

785
00:28:39,429 --> 00:28:41,529
comm all these tools are free a lot of

786
00:28:41,529 --> 00:28:42,940
them are open sourced I really hope this

787
00:28:42,940 --> 00:28:45,159
doesn't sound like a sales pitch but

788
00:28:45,159 --> 00:28:46,749
what these tools do is they look for

789
00:28:46,749 --> 00:28:48,759
malicious behaviors and then trigger on

790
00:28:48,759 --> 00:28:51,070
that gave a talk last year at virus

791
00:28:51,070 --> 00:28:53,229
bulletin about oversight it's a utility

792
00:28:53,229 --> 00:28:55,149
that can detect when someone has turned

793
00:28:55,149 --> 00:28:56,770
on your micro webcam

794
00:28:56,770 --> 00:28:58,390
this specific malware it looks like the

795
00:28:58,390 --> 00:29:00,730
attacker would turn on the webcam when

796
00:29:00,730 --> 00:29:03,040
the user was not active or sitting in

797
00:29:03,040 --> 00:29:04,480
front of their computer so the hacker

798
00:29:04,480 --> 00:29:07,330
would hope to you know view them when

799
00:29:07,330 --> 00:29:08,350
they're you know maybe in the shower

800
00:29:08,350 --> 00:29:09,820
walking around the bedroom without a lot

801
00:29:09,820 --> 00:29:12,190
of clothes so the user would unlikely

802
00:29:12,190 --> 00:29:14,320
see the webcam light was on but using a

803
00:29:14,320 --> 00:29:16,480
tool such as oversight you know you'd be

804
00:29:16,480 --> 00:29:19,120
alerted of that all right that is a wrap

805
00:29:19,120 --> 00:29:20,790
again thank you so much for attending

806
00:29:20,790 --> 00:29:22,870
also thank you so much for virus

807
00:29:22,870 --> 00:29:25,180
bulletin Martin everyone else amazing

808
00:29:25,180 --> 00:29:26,950
conference I think we have 30 seconds

809
00:29:26,950 --> 00:29:29,140
for a question or two or I'll be around

810
00:29:29,140 --> 00:29:30,580
the rest of the conference if you want

811
00:29:30,580 --> 00:29:31,990
to guys chat or have any specific

812
00:29:31,990 --> 00:29:33,340
questions so again thank you for your

813
00:29:33,340 --> 00:29:34,650
time

814
00:29:34,650 --> 00:29:39,859
[Applause]

