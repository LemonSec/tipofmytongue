1
00:00:00,000 --> 00:00:02,370
all right we're gonna get started so if

2
00:00:02,370 --> 00:00:05,190
you can please take a seat thank you

3
00:00:05,190 --> 00:00:08,940
very much I'm thrilled to announce our

4
00:00:08,940 --> 00:00:11,880
next speaker Patrick wardo from snack he

5
00:00:11,880 --> 00:00:14,420
is going to talk about getting duped

6
00:00:14,420 --> 00:00:18,630
piggybacking on webcam streams recording

7
00:00:18,630 --> 00:00:20,730
so looking forward to this Thank You

8
00:00:20,730 --> 00:00:22,850
thanks so yeah let's talk about

9
00:00:22,850 --> 00:00:25,170
surreptitiously recording users and you

10
00:00:25,170 --> 00:00:26,939
might be wondering why I'm talking about

11
00:00:26,939 --> 00:00:29,130
this honestly I used to work at the NSA

12
00:00:29,130 --> 00:00:31,740
and I guess old habits kind of die hard

13
00:00:31,740 --> 00:00:34,860
but now seriously you know I think this

14
00:00:34,860 --> 00:00:37,920
is an attack that users and security

15
00:00:37,920 --> 00:00:40,649
vendors should be aware of so yeah my

16
00:00:40,649 --> 00:00:43,350
name is Patrick Wartell I've worked at a

17
00:00:43,350 --> 00:00:45,690
variety of acronyms places I'm currently

18
00:00:45,690 --> 00:00:49,200
the director of R&D at cynic so Senate

19
00:00:49,200 --> 00:00:51,120
does crowdsource of owner ability

20
00:00:51,120 --> 00:00:53,399
discovery basically we used vetted

21
00:00:53,399 --> 00:00:56,239
security researchers and technology to

22
00:00:56,239 --> 00:00:59,430
you know basically pen tester look for

23
00:00:59,430 --> 00:01:01,109
vulnerabilities in our customers web

24
00:01:01,109 --> 00:01:04,170
apps mobile apps IOT devices and network

25
00:01:04,170 --> 00:01:06,570
endpoints so if you're interested in a

26
00:01:06,570 --> 00:01:08,780
bug bounty program definitely check out

27
00:01:08,780 --> 00:01:12,060
syn/ack all right so what are you what

28
00:01:12,060 --> 00:01:14,040
are we gonna be talking today we're

29
00:01:14,040 --> 00:01:16,020
gonna start off by looking at some

30
00:01:16,020 --> 00:01:18,540
webcam background concepts talk about

31
00:01:18,540 --> 00:01:20,310
some privacy and security issues there

32
00:01:20,310 --> 00:01:22,229
are they gonna jump in a look at some

33
00:01:22,229 --> 00:01:24,869
recent Mac malware specimens that are

34
00:01:24,869 --> 00:01:26,759
web cam aware what I mean by that is

35
00:01:26,759 --> 00:01:29,850
that they would try to spy and record

36
00:01:29,850 --> 00:01:31,770
users once they you know got on an

37
00:01:31,770 --> 00:01:33,990
infected target we're then going to talk

38
00:01:33,990 --> 00:01:36,420
about a new attack or capability that

39
00:01:36,420 --> 00:01:38,909
would allow malware to record the user

40
00:01:38,909 --> 00:01:41,040
while the webcam is legitimately in use

41
00:01:41,040 --> 00:01:43,470
without detection and then finally we'll

42
00:01:43,470 --> 00:01:45,420
spend some time discussing methods to

43
00:01:45,420 --> 00:01:47,939
detect this capability detect this

44
00:01:47,939 --> 00:01:49,979
attack and talk about a free tool I'm

45
00:01:49,979 --> 00:01:52,259
releasing that can hopefully ensure Mac

46
00:01:52,259 --> 00:01:56,250
users are protected against this now I

47
00:01:56,250 --> 00:01:57,770
don't want to stress what this talk is

48
00:01:57,770 --> 00:01:59,939
not about I don't want to overhype

49
00:01:59,939 --> 00:02:02,280
things security talks sometimes do that

50
00:02:02,280 --> 00:02:04,829
so it's really not about bypassing the

51
00:02:04,829 --> 00:02:07,710
LED indicator light directly and it's

52
00:02:07,710 --> 00:02:09,300
also not about any exploit or

53
00:02:09,300 --> 00:02:12,300
vulnerability per se rather we're going

54
00:02:12,300 --> 00:02:13,710
to talk about abuse

55
00:02:13,710 --> 00:02:15,930
legitimate functionality of the

56
00:02:15,930 --> 00:02:18,120
operating system to record audio and

57
00:02:18,120 --> 00:02:20,970
video while the webcam is legitimately

58
00:02:20,970 --> 00:02:23,760
in use without the user being able to

59
00:02:23,760 --> 00:02:27,390
notice this okay so let's start by

60
00:02:27,390 --> 00:02:30,210
talking about some background concepts

61
00:02:30,210 --> 00:02:32,880
now I'm sure you know we're all security

62
00:02:32,880 --> 00:02:34,590
and antivirus researchers here we know

63
00:02:34,590 --> 00:02:37,050
that one of the most insidious actions

64
00:02:37,050 --> 00:02:39,990
that malware can take is recording a

65
00:02:39,990 --> 00:02:42,230
user right in terms of security privacy

66
00:02:42,230 --> 00:02:44,130
you know if there's a piece of malware

67
00:02:44,130 --> 00:02:46,230
that's able to capture the user and see

68
00:02:46,230 --> 00:02:47,220
what they're doing and saying that's

69
00:02:47,220 --> 00:02:49,710
kind of least to me the the most scarier

70
00:02:49,710 --> 00:02:51,620
one of them the worst things that can do

71
00:02:51,620 --> 00:02:54,210
and unfortunately hackers are doing this

72
00:02:54,210 --> 00:02:56,600
Mac malware is doing this and

73
00:02:56,600 --> 00:02:59,730
nation-states are supposedly doing this

74
00:02:59,730 --> 00:03:01,620
as well and so it's you know it's

75
00:03:01,620 --> 00:03:03,570
definitely something of of a concern and

76
00:03:03,570 --> 00:03:06,000
so what can we do to thwart this well

77
00:03:06,000 --> 00:03:08,610
the FBI the same guys that are trying to

78
00:03:08,610 --> 00:03:11,250
hack into our iPhones tell us that we

79
00:03:11,250 --> 00:03:13,170
can simply just cover your webcam with

80
00:03:13,170 --> 00:03:14,910
tape and that's actually a pretty good

81
00:03:14,910 --> 00:03:19,740
you know low-tech solution now when

82
00:03:19,740 --> 00:03:22,950
people talk about malware and webcam and

83
00:03:22,950 --> 00:03:24,960
hacking webcams and you know recording

84
00:03:24,960 --> 00:03:26,730
the users really always comes down to

85
00:03:26,730 --> 00:03:28,790
the LED indicator light

86
00:03:28,790 --> 00:03:32,400
luckily for users not so much for the

87
00:03:32,400 --> 00:03:35,250
malware anytime the webcam is activated

88
00:03:35,250 --> 00:03:37,340
the LED indicator light comes on and

89
00:03:37,340 --> 00:03:39,390
it's actually designed in a way that's

90
00:03:39,390 --> 00:03:41,940
very very difficult to disable now in

91
00:03:41,940 --> 00:03:44,190
the past even on Macs this has been

92
00:03:44,190 --> 00:03:46,680
successfully disabled some researchers

93
00:03:46,680 --> 00:03:49,080
from the johns hopkins university in

94
00:03:49,080 --> 00:03:51,240
2008 showed that they were basically

95
00:03:51,240 --> 00:03:54,660
able to reprogram the firmware on the

96
00:03:54,660 --> 00:03:56,520
chip that had the LED indicator light

97
00:03:56,520 --> 00:03:59,100
and basically then record the user

98
00:03:59,100 --> 00:04:01,080
without the light going off but since

99
00:04:01,080 --> 00:04:02,910
then Apple has made great strides and

100
00:04:02,910 --> 00:04:04,740
really done a good job securing that

101
00:04:04,740 --> 00:04:06,330
right it's basically implemented and

102
00:04:06,330 --> 00:04:08,190
Hardware on a separate chip kind of

103
00:04:08,190 --> 00:04:10,050
isolated from the operating system so

104
00:04:10,050 --> 00:04:11,940
unless you have physical access or some

105
00:04:11,940 --> 00:04:13,710
incredible exploit you're really not

106
00:04:13,710 --> 00:04:15,630
going to be able to disable that LED

107
00:04:15,630 --> 00:04:20,310
indicator light so shortly we're gonna

108
00:04:20,310 --> 00:04:23,150
look at some malware samples that on Mac

109
00:04:23,150 --> 00:04:25,650
access and abuse the webcam to record

110
00:04:25,650 --> 00:04:27,600
the users and then also talk

111
00:04:27,600 --> 00:04:29,640
an attack that we can we can leverage

112
00:04:29,640 --> 00:04:31,680
but I briefly wanted to talk about

113
00:04:31,680 --> 00:04:33,360
programmatically at least first

114
00:04:33,360 --> 00:04:35,190
initially from a conceptual point of

115
00:04:35,190 --> 00:04:38,340
view how one accesses the webcam on Mac

116
00:04:38,340 --> 00:04:41,250
OS X so programmatically turns out it's

117
00:04:41,250 --> 00:04:43,200
actually pretty easy to do there's a

118
00:04:43,200 --> 00:04:44,700
foundation framework called AV

119
00:04:44,700 --> 00:04:46,980
foundation that apple provides and it

120
00:04:46,980 --> 00:04:48,930
makes it really easy to do a variety of

121
00:04:48,930 --> 00:04:51,320
tasks so for example you can very easily

122
00:04:51,320 --> 00:04:54,120
enumerate all attached devices on the

123
00:04:54,120 --> 00:04:56,820
system so you can find the webcam the

124
00:04:56,820 --> 00:04:59,100
mic and whatnot and then once you have

125
00:04:59,100 --> 00:05:01,110
reference to those devices you can very

126
00:05:01,110 --> 00:05:02,820
easily activate them and start recording

127
00:05:02,820 --> 00:05:05,580
off them now of course any time you do

128
00:05:05,580 --> 00:05:07,500
this the LED indicator light is going to

129
00:05:07,500 --> 00:05:08,850
go off as long as you're the initial

130
00:05:08,850 --> 00:05:12,810
process initiating them now you might be

131
00:05:12,810 --> 00:05:14,550
wondering if there's any access

132
00:05:14,550 --> 00:05:16,230
constraints that are placed on the

133
00:05:16,230 --> 00:05:19,200
webcam and the short answer is is no but

134
00:05:19,200 --> 00:05:21,300
turns out if you are a sandbox

135
00:05:21,300 --> 00:05:23,180
application you have to have a specific

136
00:05:23,180 --> 00:05:25,590
entitlement that says you're gonna use

137
00:05:25,590 --> 00:05:28,280
the camera so entitlements are simply

138
00:05:28,280 --> 00:05:30,720
capabilities that the binary can convey

139
00:05:30,720 --> 00:05:31,680
about itself

140
00:05:31,680 --> 00:05:33,300
so when you're building an application

141
00:05:33,300 --> 00:05:34,890
that's gonna go into the Mac App Store

142
00:05:34,890 --> 00:05:37,440
if you want to use the webcam you have

143
00:05:37,440 --> 00:05:39,630
to basically tell the compiler that

144
00:05:39,630 --> 00:05:41,700
you're going to use this so specifically

145
00:05:41,700 --> 00:05:44,160
you add the comma l-dots acure T dot

146
00:05:44,160 --> 00:05:46,860
device camera entitlement now this is

147
00:05:46,860 --> 00:05:48,480
easy you can add this yourself while

148
00:05:48,480 --> 00:05:50,190
you're building that application and

149
00:05:50,190 --> 00:05:51,390
then when you submit to the App Store

150
00:05:51,390 --> 00:05:53,850
I'm guessing it's gonna be approved I

151
00:05:53,850 --> 00:05:55,320
haven't seen anything indicating that

152
00:05:55,320 --> 00:05:57,600
Apple will block an application if it

153
00:05:57,600 --> 00:05:59,340
has that I mean we've all seen now or

154
00:05:59,340 --> 00:06:02,040
end up in the iOS App Store and the Mac

155
00:06:02,040 --> 00:06:04,500
App Store so I'm I doubt Apple's gonna

156
00:06:04,500 --> 00:06:06,090
block that you know maybe if you're like

157
00:06:06,090 --> 00:06:08,070
a calculator app they might ask you hey

158
00:06:08,070 --> 00:06:11,010
why are you using the webcam but again

159
00:06:11,010 --> 00:06:13,320
this is only for sandbox applications so

160
00:06:13,320 --> 00:06:14,940
if your sandbox and you don't have this

161
00:06:14,940 --> 00:06:16,620
entitlement though when you go to access

162
00:06:16,620 --> 00:06:18,180
the webcam the operating system is going

163
00:06:18,180 --> 00:06:21,000
to deny you but again you can add this

164
00:06:21,000 --> 00:06:22,590
entitlement yourself and Apple will most

165
00:06:22,590 --> 00:06:24,690
likely approve it now if you're not a

166
00:06:24,690 --> 00:06:26,520
sandbox application meaning you're

167
00:06:26,520 --> 00:06:28,020
distributed outside the Mac App Store

168
00:06:28,020 --> 00:06:30,570
which a lot of apps still are based on

169
00:06:30,570 --> 00:06:33,120
the constraints of the Mac App Store you

170
00:06:33,120 --> 00:06:34,920
don't need any entitlement you don't

171
00:06:34,920 --> 00:06:36,840
need root you don't need anything so

172
00:06:36,840 --> 00:06:38,040
pretty much any code that's running on

173
00:06:38,040 --> 00:06:40,569
the Mac can access the webcam with

174
00:06:40,569 --> 00:06:44,589
you know no authorization issues okay so

175
00:06:44,589 --> 00:06:45,819
that was some general background

176
00:06:45,819 --> 00:06:48,069
concepts of webcams now let's look at

177
00:06:48,069 --> 00:06:50,110
some Mac malware samples that try to

178
00:06:50,110 --> 00:06:52,800
record the user by activating in

179
00:06:52,800 --> 00:06:54,969
leveraging the recording capabilities of

180
00:06:54,969 --> 00:06:57,849
the built-in webcam now I want to point

181
00:06:57,849 --> 00:07:00,279
out that these malware samples are

182
00:07:00,279 --> 00:07:02,080
really not that sophisticated in the

183
00:07:02,080 --> 00:07:04,719
sense that they all arbitrarily record

184
00:07:04,719 --> 00:07:06,550
kind of whatever they think they should

185
00:07:06,550 --> 00:07:09,099
which means that the LED indicator light

186
00:07:09,099 --> 00:07:11,169
is going to come on and this is my

187
00:07:11,169 --> 00:07:13,209
opinion it's kind of amateurish in a

188
00:07:13,209 --> 00:07:15,309
dead giveaway right if you're sitting at

189
00:07:15,309 --> 00:07:17,050
your desk and all some the webcam light

190
00:07:17,050 --> 00:07:19,300
goes on like that's a huge sign that

191
00:07:19,300 --> 00:07:23,020
your computer's probably hacked so the

192
00:07:23,020 --> 00:07:24,189
first piece of malware I want to mention

193
00:07:24,189 --> 00:07:27,069
is hacking teams Mac implant called

194
00:07:27,069 --> 00:07:30,610
crisis it is a myriad of features for

195
00:07:30,610 --> 00:07:32,110
gathering intelligence it's really all

196
00:07:32,110 --> 00:07:34,119
about surveillance so that obviously

197
00:07:34,119 --> 00:07:37,059
means audio and video capabilities as

198
00:07:37,059 --> 00:07:40,599
well so when hacking team got hacked the

199
00:07:40,599 --> 00:07:42,669
source code for this Scott released or

200
00:07:42,669 --> 00:07:44,709
leaked rather and which is great you

201
00:07:44,709 --> 00:07:46,509
know is now our analysts we usually only

202
00:07:46,509 --> 00:07:48,490
have binary server engineer so anytime

203
00:07:48,490 --> 00:07:51,069
source code gets released for malware

204
00:07:51,069 --> 00:07:51,729
we're stoked

205
00:07:51,729 --> 00:07:54,699
so whoever hacked hacking team good job

206
00:07:54,699 --> 00:07:56,680
I don't know officially I could say that

207
00:07:56,680 --> 00:07:59,319
but made my life easier so anyways if we

208
00:07:59,319 --> 00:08:00,729
look at the slide look at the source

209
00:08:00,729 --> 00:08:02,259
code we can see this is the code that

210
00:08:02,259 --> 00:08:05,199
was responsible for recording off the

211
00:08:05,199 --> 00:08:08,430
webcam it turns out that they used a

212
00:08:08,430 --> 00:08:12,279
framework called QT kit which is kind of

213
00:08:12,279 --> 00:08:14,409
a precursor to AV foundation so it's an

214
00:08:14,409 --> 00:08:16,599
apple framework it's now deprecated but

215
00:08:16,599 --> 00:08:18,309
I basically provided the same API

216
00:08:18,309 --> 00:08:21,729
interfaces as a a V Foundation so gotten

217
00:08:21,729 --> 00:08:24,969
very easy to find the webcam and start

218
00:08:24,969 --> 00:08:27,009
recording off this again of course the

219
00:08:27,009 --> 00:08:29,499
LED indicator light would go on likely

220
00:08:29,499 --> 00:08:32,078
alerting a user of the presence of them

221
00:08:32,078 --> 00:08:35,979
our a more recent sample that was

222
00:08:35,979 --> 00:08:38,349
discovered in July by bitdefender is

223
00:08:38,349 --> 00:08:40,750
Eleanor so this was a tour based

224
00:08:40,750 --> 00:08:43,719
backdoor that also contained a variety

225
00:08:43,719 --> 00:08:45,160
of open source tools that kind of

226
00:08:45,160 --> 00:08:46,930
extended the functionality of the

227
00:08:46,930 --> 00:08:48,430
malware this is fairly common we

228
00:08:48,430 --> 00:08:50,350
sometimes see malware authors packaging

229
00:08:50,350 --> 00:08:52,990
up open source or free utilities allows

230
00:08:52,990 --> 00:08:54,250
them to kind of

231
00:08:54,250 --> 00:08:55,690
than the functionality without having to

232
00:08:55,690 --> 00:08:58,120
implement the logic themselves so in

233
00:08:58,120 --> 00:08:59,740
terms of the video capture capability

234
00:08:59,740 --> 00:09:01,240
Eleanore shipped with the utility called

235
00:09:01,240 --> 00:09:04,270
waka waka is open source available on

236
00:09:04,270 --> 00:09:06,790
source code you can download it run the

237
00:09:06,790 --> 00:09:08,440
precompiled binaries and it will allow

238
00:09:08,440 --> 00:09:11,590
you to capture or record the user from

239
00:09:11,590 --> 00:09:13,900
the command line so this piece of our

240
00:09:13,900 --> 00:09:15,580
had this utility and so what the

241
00:09:15,580 --> 00:09:18,640
attackers could do is simply execute it

242
00:09:18,640 --> 00:09:21,130
and begin recording the user again the

243
00:09:21,130 --> 00:09:25,270
LED indicator light would go on finally

244
00:09:25,270 --> 00:09:28,270
we've got OSX Mokes which was discovered

245
00:09:28,270 --> 00:09:31,120
just last month by Kaspersky it's a

246
00:09:31,120 --> 00:09:34,180
cross-platform backdoor it's got fairly

247
00:09:34,180 --> 00:09:36,580
standard backdoor features you know you

248
00:09:36,580 --> 00:09:38,710
can run arbitrary commands excellent

249
00:09:38,710 --> 00:09:40,900
rate data but it also had audio and

250
00:09:40,900 --> 00:09:44,080
video capabilities so if we look at the

251
00:09:44,080 --> 00:09:46,420
disassembly for this malware we can see

252
00:09:46,420 --> 00:09:51,250
that it's using the Qt framework or yeah

253
00:09:51,250 --> 00:09:53,740
QT framework to do it's recording QT

254
00:09:53,740 --> 00:09:55,900
framework is a cross-platform framework

255
00:09:55,900 --> 00:09:57,220
which makes sense because this is a

256
00:09:57,220 --> 00:10:00,400
cross-platform piece of malware now if

257
00:10:00,400 --> 00:10:03,010
you dig into the specific specifics of

258
00:10:03,010 --> 00:10:05,200
this framework obviously the frameworks

259
00:10:05,200 --> 00:10:07,810
gonna have some OS specific code so if

260
00:10:07,810 --> 00:10:10,510
you look in at cuties you know webcam

261
00:10:10,510 --> 00:10:12,970
recording code on Mac it just calls into

262
00:10:12,970 --> 00:10:15,010
Apple's a B foundation so it just

263
00:10:15,010 --> 00:10:16,150
provides an extra layer of abstraction

264
00:10:16,150 --> 00:10:19,450
so cross-platform code can compile and

265
00:10:19,450 --> 00:10:21,850
again the LED indicator light would go

266
00:10:21,850 --> 00:10:24,280
on so that was some recent Mac malware

267
00:10:24,280 --> 00:10:25,089
trends you know hopefully that

268
00:10:25,089 --> 00:10:27,430
Illustrated that you know there's Mac

269
00:10:27,430 --> 00:10:30,160
malware and that such Mac malware even

270
00:10:30,160 --> 00:10:31,570
the most recent samples are very

271
00:10:31,570 --> 00:10:34,540
interested in recording the user using

272
00:10:34,540 --> 00:10:36,010
the webcam and the mic

273
00:10:36,010 --> 00:10:38,800
luckily again the LED light always goes

274
00:10:38,800 --> 00:10:40,720
on so again that's kind of a dead

275
00:10:40,720 --> 00:10:43,839
giveaway for the malware so I now want

276
00:10:43,839 --> 00:10:47,410
to talk about scenario a capability an

277
00:10:47,410 --> 00:10:50,020
attack where such malware could simply

278
00:10:50,020 --> 00:10:52,300
wait until the user is legitimately

279
00:10:52,300 --> 00:10:54,460
using their webcam and then piggyback

280
00:10:54,460 --> 00:10:56,620
onto that session to record the user

281
00:10:56,620 --> 00:11:00,970
without any detection now the first

282
00:11:00,970 --> 00:11:02,410
thing is I think it's important to make

283
00:11:02,410 --> 00:11:05,020
the observation that Mac users do use

284
00:11:05,020 --> 00:11:07,390
their webcams generally they're not

285
00:11:07,390 --> 00:11:08,140
going to be

286
00:11:08,140 --> 00:11:09,520
courting themselves but as we'll see

287
00:11:09,520 --> 00:11:10,990
that's not really a prerequisite for

288
00:11:10,990 --> 00:11:13,570
this attack so you know what do Mac

289
00:11:13,570 --> 00:11:15,670
users use their webcams for well you

290
00:11:15,670 --> 00:11:18,250
know business right so CEOs will you

291
00:11:18,250 --> 00:11:19,630
know maybe talk to the board about

292
00:11:19,630 --> 00:11:21,190
earnings of a company you know have a

293
00:11:21,190 --> 00:11:24,130
go-to meeting Rd employees if your

294
00:11:24,130 --> 00:11:26,500
remote or your team is you know across

295
00:11:26,500 --> 00:11:28,210
the world you might have a Google

296
00:11:28,210 --> 00:11:31,090
hangout where you're discussing new Rd

297
00:11:31,090 --> 00:11:32,890
new IP that kind of stuff

298
00:11:32,890 --> 00:11:34,000
you're journalists you're probably

299
00:11:34,000 --> 00:11:36,520
skyping with some sources or if you're a

300
00:11:36,520 --> 00:11:38,650
security researcher you might be you

301
00:11:38,650 --> 00:11:40,420
know facetiming with a security team

302
00:11:40,420 --> 00:11:42,730
discussing the details of a zero-day

303
00:11:42,730 --> 00:11:45,310
vulnerability that you found and if

304
00:11:45,310 --> 00:11:46,720
you're just a normal Mac user you might

305
00:11:46,720 --> 00:11:49,420
be using FaceTime to have a you know an

306
00:11:49,420 --> 00:11:51,400
intimate FaceTime session you know with

307
00:11:51,400 --> 00:11:53,200
a partner you know on any given week I

308
00:11:53,200 --> 00:11:55,870
really do all of these well besides the

309
00:11:55,870 --> 00:11:58,210
FaceTime one but you know I'm talking

310
00:11:58,210 --> 00:12:00,160
with my company in California chatting

311
00:12:00,160 --> 00:12:02,080
with Apple's security team talking to

312
00:12:02,080 --> 00:12:04,930
maybe journalists or the R&D team so

313
00:12:04,930 --> 00:12:06,940
yeah and the other observation about

314
00:12:06,940 --> 00:12:09,130
these sessions are these are really the

315
00:12:09,130 --> 00:12:11,230
most in my opinion interesting things

316
00:12:11,230 --> 00:12:13,780
that malware you know nation state or

317
00:12:13,780 --> 00:12:16,150
cyber criminal hour should be recording

318
00:12:16,150 --> 00:12:18,280
anyways like if you're recording me the

319
00:12:18,280 --> 00:12:20,100
entire day you're gonna see me like

320
00:12:20,100 --> 00:12:22,990
picking my nose petting my dog cursing

321
00:12:22,990 --> 00:12:24,640
at the computer and my code doesn't

322
00:12:24,640 --> 00:12:26,350
compile like that's really not that

323
00:12:26,350 --> 00:12:28,090
interesting but when I'm having these

324
00:12:28,090 --> 00:12:29,920
meetings or these discussions that's

325
00:12:29,920 --> 00:12:31,840
kind of the the more sensitive things

326
00:12:31,840 --> 00:12:33,610
that the malware probably wants to be

327
00:12:33,610 --> 00:12:37,420
recording anyways so conceptually what

328
00:12:37,420 --> 00:12:40,660
we or the malware want to do is fairly

329
00:12:40,660 --> 00:12:41,380
simple

330
00:12:41,380 --> 00:12:43,060
so we basically are going to wait until

331
00:12:43,060 --> 00:12:45,910
the user initiates a legitimate session

332
00:12:45,910 --> 00:12:47,380
this could be you know FaceTime session

333
00:12:47,380 --> 00:12:49,660
Skype Google hangout GoToMeeting

334
00:12:49,660 --> 00:12:51,340
anything anything that activates the

335
00:12:51,340 --> 00:12:53,800
webcam and then when the malware detects

336
00:12:53,800 --> 00:12:55,900
this it's gonna simply begin recording

337
00:12:55,900 --> 00:12:57,940
and then once the recording it's done it

338
00:12:57,940 --> 00:13:01,090
can exfiltrate that to an attacker will

339
00:13:01,090 --> 00:13:02,290
see that this attack doesn't require

340
00:13:02,290 --> 00:13:05,080
root to pull off also the user doesn't

341
00:13:05,080 --> 00:13:06,850
have to be recording themselves just

342
00:13:06,850 --> 00:13:09,910
using the webcam in any capacity and

343
00:13:09,910 --> 00:13:12,340
since the LED light is already on

344
00:13:12,340 --> 00:13:13,960
there's no subsequent indication that

345
00:13:13,960 --> 00:13:16,150
the malware has piggy back into this

346
00:13:16,150 --> 00:13:18,670
stream and now is actively recording the

347
00:13:18,670 --> 00:13:21,580
local user so let's now take a look at

348
00:13:21,580 --> 00:13:23,140
step number two because that's really

349
00:13:23,140 --> 00:13:27,130
the meat of the attack so the first

350
00:13:27,130 --> 00:13:30,010
thing the malware needs to do is find or

351
00:13:30,010 --> 00:13:32,350
enumerate the camera and mic so if

352
00:13:32,350 --> 00:13:34,000
you're here we'll just focus on the

353
00:13:34,000 --> 00:13:35,980
camera so again if we use Apple's

354
00:13:35,980 --> 00:13:37,810
avfoundation turns out this is really

355
00:13:37,810 --> 00:13:40,780
easy to do basically you invoke the AV

356
00:13:40,780 --> 00:13:43,240
capture class method specifically the

357
00:13:43,240 --> 00:13:45,490
devices with media type method method

358
00:13:45,490 --> 00:13:47,170
and this will return an array of

359
00:13:47,170 --> 00:13:50,050
attached devices for example cameras you

360
00:13:50,050 --> 00:13:51,400
can then iterate through all of these

361
00:13:51,400 --> 00:13:54,130
looking for the default one or if you're

362
00:13:54,130 --> 00:13:56,260
looking for one that has a specific

363
00:13:56,260 --> 00:13:59,890
vendor ID or name you can match on that

364
00:13:59,890 --> 00:14:00,370
as well

365
00:14:00,370 --> 00:14:02,100
so when you run this for example on a

366
00:14:02,100 --> 00:14:04,450
laptop you're probably only going to

367
00:14:04,450 --> 00:14:06,070
find one which is the built-in camera

368
00:14:06,070 --> 00:14:08,200
you can see it's the Apple FaceTime HD

369
00:14:08,200 --> 00:14:10,180
camera and that's how Apple refers to

370
00:14:10,180 --> 00:14:12,100
the camera that's built into you no

371
00:14:12,100 --> 00:14:16,510
MacBook Airs MacBook Pros and whatnot so

372
00:14:16,510 --> 00:14:18,910
now we have a reference to the webcam

373
00:14:18,910 --> 00:14:20,830
what we want to do is register for

374
00:14:20,830 --> 00:14:22,960
notifications and specifically we want

375
00:14:22,960 --> 00:14:25,930
to register for the webcam was activated

376
00:14:25,930 --> 00:14:27,760
notification so it turns out there's a

377
00:14:27,760 --> 00:14:29,920
notification you can register for and it

378
00:14:29,920 --> 00:14:31,510
will be delivered to you by the

379
00:14:31,510 --> 00:14:34,090
operating system anytime the webcam is

380
00:14:34,090 --> 00:14:36,340
either activated or deactivated and

381
00:14:36,340 --> 00:14:37,780
we'll show in a second how we can

382
00:14:37,780 --> 00:14:40,390
determine which state the notification

383
00:14:40,390 --> 00:14:43,240
was delivered to us for so you do this

384
00:14:43,240 --> 00:14:45,880
by invoking this CMIO object add

385
00:14:45,880 --> 00:14:48,670
property listener block method and this

386
00:14:48,670 --> 00:14:51,070
takes a variety of parameters the first

387
00:14:51,070 --> 00:14:53,230
parameter is a connection ID and this is

388
00:14:53,230 --> 00:14:55,420
kind of a unique identifier for the

389
00:14:55,420 --> 00:14:56,470
device that you want to get

390
00:14:56,470 --> 00:14:58,660
notifications for so for example the

391
00:14:58,660 --> 00:15:00,940
built-in webcam now this is a private

392
00:15:00,940 --> 00:15:04,000
property of the device but luckily in

393
00:15:04,000 --> 00:15:06,130
objective-c you can pretty easily access

394
00:15:06,130 --> 00:15:09,040
private methods or private members of an

395
00:15:09,040 --> 00:15:10,840
object so we can basically send a

396
00:15:10,840 --> 00:15:13,090
selector method to the webcam object we

397
00:15:13,090 --> 00:15:14,890
have and it'll return to us its

398
00:15:14,890 --> 00:15:16,690
connection ID even though it's a private

399
00:15:16,690 --> 00:15:20,800
somewhat inaccessible member the next

400
00:15:20,800 --> 00:15:22,750
parameter is a property structure and

401
00:15:22,750 --> 00:15:25,360
this allows us to tell the system what

402
00:15:25,360 --> 00:15:27,220
notification we're interested in again

403
00:15:27,220 --> 00:15:28,450
we're going to tell it we're interested

404
00:15:28,450 --> 00:15:31,270
in the notification that occurs when the

405
00:15:31,270 --> 00:15:32,650
camera is either activated or

406
00:15:32,650 --> 00:15:35,410
deactivated and then finally you pass

407
00:15:35,410 --> 00:15:37,540
callback block this is just a chunk of

408
00:15:37,540 --> 00:15:39,459
code that will be executed by the

409
00:15:39,459 --> 00:15:40,449
operating system

410
00:15:40,449 --> 00:15:43,470
whenever the notification is delivered

411
00:15:43,470 --> 00:15:45,850
so now we've registered our notification

412
00:15:45,850 --> 00:15:48,550
handler anytime the webcam is activated

413
00:15:48,550 --> 00:15:50,980
or deactivated by the user for example

414
00:15:50,980 --> 00:15:52,410
when they start FaceTime Skype

415
00:15:52,410 --> 00:15:54,910
GoToMeeting whatever the operating

416
00:15:54,910 --> 00:15:57,310
system will invoke our code with this

417
00:15:57,310 --> 00:15:59,920
notification so now we need to determine

418
00:15:59,920 --> 00:16:01,720
if the notification was delivered

419
00:16:01,720 --> 00:16:03,610
because the webcam was activated or

420
00:16:03,610 --> 00:16:07,689
deactivated so we can do this by calling

421
00:16:07,689 --> 00:16:10,870
the CM io object get property data

422
00:16:10,870 --> 00:16:13,149
function basically we're gonna query the

423
00:16:13,149 --> 00:16:15,970
webcam and get its property so we pass

424
00:16:15,970 --> 00:16:18,459
in a parameter basically saying we're

425
00:16:18,459 --> 00:16:20,230
interested in its state whether it's on

426
00:16:20,230 --> 00:16:22,629
or off and this will return to us a 0 or

427
00:16:22,629 --> 00:16:25,420
1 if the camera is off or 1 if it's on

428
00:16:25,420 --> 00:16:27,490
so if it's off we don't really care but

429
00:16:27,490 --> 00:16:29,829
if it's on this is our trigger event

430
00:16:29,829 --> 00:16:32,139
that says ok we should start recording

431
00:16:32,139 --> 00:16:33,730
because the user has started a

432
00:16:33,730 --> 00:16:36,009
legitimate video session and the LED

433
00:16:36,009 --> 00:16:40,300
indicator light is now active so now we

434
00:16:40,300 --> 00:16:43,420
know the user has initialized or yeah or

435
00:16:43,420 --> 00:16:45,430
kicked off a legitimate video session so

436
00:16:45,430 --> 00:16:48,250
we can start recording now the reason

437
00:16:48,250 --> 00:16:50,350
this capability this attack works is

438
00:16:50,350 --> 00:16:52,959
because on modern Macs the webcam is a

439
00:16:52,959 --> 00:16:55,089
shared resource this means you can

440
00:16:55,089 --> 00:16:57,160
FaceTime and Skype at the same time or

441
00:16:57,160 --> 00:16:59,649
you can run a Google hangout and load

442
00:16:59,649 --> 00:17:01,360
photobooth and take pictures of yourself

443
00:17:01,360 --> 00:17:03,610
you know at the same time there's

444
00:17:03,610 --> 00:17:05,650
nothing to say that once one process is

445
00:17:05,650 --> 00:17:07,689
an access to the webcam nothing else can

446
00:17:07,689 --> 00:17:09,579
access this from a usability point of

447
00:17:09,579 --> 00:17:12,880
view that makes sense so how do you the

448
00:17:12,880 --> 00:17:14,919
actual recording well we can just use

449
00:17:14,919 --> 00:17:18,010
Apple's avfoundation api's and as you

450
00:17:18,010 --> 00:17:19,299
can see on the slide it's really only

451
00:17:19,299 --> 00:17:21,369
about 6 or 7 lines of code it's really

452
00:17:21,369 --> 00:17:24,130
very easy basically what you do is you

453
00:17:24,130 --> 00:17:26,439
create a capture session and then you

454
00:17:26,439 --> 00:17:28,600
specify an input and an output the input

455
00:17:28,600 --> 00:17:31,150
will be the webcam that we enumerated

456
00:17:31,150 --> 00:17:33,130
earlier and then the output can be a

457
00:17:33,130 --> 00:17:35,200
memory buffer or a file if you want to

458
00:17:35,200 --> 00:17:37,090
record to a file so once you have that

459
00:17:37,090 --> 00:17:39,460
all set up you simply call start running

460
00:17:39,460 --> 00:17:41,860
and then start recording to output file

461
00:17:41,860 --> 00:17:43,480
and then this will start streaming

462
00:17:43,480 --> 00:17:47,280
frames off the webcam to the file

463
00:17:47,280 --> 00:17:49,320
now another important thing is we also

464
00:17:49,320 --> 00:17:50,880
want to know when we should stop

465
00:17:50,880 --> 00:17:53,520
recording because if the malware just

466
00:17:53,520 --> 00:17:55,500
kept recording indiscriminately if the

467
00:17:55,500 --> 00:17:57,630
user ended their legitimate session and

468
00:17:57,630 --> 00:18:00,240
the malware was still recording the LED

469
00:18:00,240 --> 00:18:02,610
indicator light would remain on and that

470
00:18:02,610 --> 00:18:03,980
would again be kind of a suspicious

471
00:18:03,980 --> 00:18:06,240
indicator right if you were having a

472
00:18:06,240 --> 00:18:08,400
FaceTime session or you were skyping and

473
00:18:08,400 --> 00:18:10,200
then you exited Skype and the light was

474
00:18:10,200 --> 00:18:10,590
still on

475
00:18:10,590 --> 00:18:12,150
I mean you might think something weird

476
00:18:12,150 --> 00:18:13,560
with the computer was going on but you

477
00:18:13,560 --> 00:18:15,600
also might think that you know there was

478
00:18:15,600 --> 00:18:18,090
something suspicious as well so we'll

479
00:18:18,090 --> 00:18:19,350
talk about a minute how we can identify

480
00:18:19,350 --> 00:18:22,110
who that is what process our task is

481
00:18:22,110 --> 00:18:24,720
using the webcam for example Skype or

482
00:18:24,720 --> 00:18:26,490
FaceTime but for now let's assume that

483
00:18:26,490 --> 00:18:28,680
we have identified that we can say ok

484
00:18:28,680 --> 00:18:30,780
the users started a legitimate session

485
00:18:30,780 --> 00:18:32,250
and we know that FaceTime was the

486
00:18:32,250 --> 00:18:34,590
process or the application that started

487
00:18:34,590 --> 00:18:36,900
that what we can then do is register for

488
00:18:36,900 --> 00:18:38,970
another notification and this will tell

489
00:18:38,970 --> 00:18:41,280
the operating system to invoke us when

490
00:18:41,280 --> 00:18:44,640
that application exits so you can do

491
00:18:44,640 --> 00:18:46,650
that in code via the NS workspace did

492
00:18:46,650 --> 00:18:49,050
terminate application notification again

493
00:18:49,050 --> 00:18:51,150
this will get invoked or you'll get

494
00:18:51,150 --> 00:18:53,640
called back any time any application on

495
00:18:53,640 --> 00:18:56,340
the system exits or terminates and the

496
00:18:56,340 --> 00:18:58,620
notification includes information about

497
00:18:58,620 --> 00:19:00,810
that app for example it spit its path

498
00:19:00,810 --> 00:19:02,970
name and whatnot so what we can do in

499
00:19:02,970 --> 00:19:05,370
this notification code is just you know

500
00:19:05,370 --> 00:19:08,100
do aster compare basically to see what

501
00:19:08,100 --> 00:19:10,560
application exits and its calculator we

502
00:19:10,560 --> 00:19:11,820
can say oh that's fine let's keep

503
00:19:11,820 --> 00:19:13,950
recording but if it's the application

504
00:19:13,950 --> 00:19:16,110
that initially kicked off the webcam

505
00:19:16,110 --> 00:19:19,080
session FaceTime Skype etc we know we

506
00:19:19,080 --> 00:19:21,060
should stop recording so the webcam

507
00:19:21,060 --> 00:19:25,620
light doesn't stay on alright so from

508
00:19:25,620 --> 00:19:26,880
the malware's point of view this is kind

509
00:19:26,880 --> 00:19:29,730
of a nice interesting unique attack or

510
00:19:29,730 --> 00:19:32,580
rather capability first it's Apple

511
00:19:32,580 --> 00:19:34,200
approved and what I mean by this it's

512
00:19:34,200 --> 00:19:36,510
leveraging legitimate functionality of

513
00:19:36,510 --> 00:19:38,550
the operating system again the webcam is

514
00:19:38,550 --> 00:19:40,290
a shared resource we're not really doing

515
00:19:40,290 --> 00:19:42,120
anything malicious per se we're

516
00:19:42,120 --> 00:19:43,530
basically just waiting till the webcam

517
00:19:43,530 --> 00:19:45,480
is activated then surreptitiously

518
00:19:45,480 --> 00:19:47,820
hopping on and recording user from the

519
00:19:47,820 --> 00:19:49,260
operating system point of view there's

520
00:19:49,260 --> 00:19:50,460
nothing wrong we're not exploiting any

521
00:19:50,460 --> 00:19:51,900
vulnerabilities this isn't you know

522
00:19:51,900 --> 00:19:54,360
malicious logic or what so this means

523
00:19:54,360 --> 00:19:56,820
it's going to be hard to patch the other

524
00:19:56,820 --> 00:19:58,659
thing is you don't need root to do this

525
00:19:58,659 --> 00:20:00,879
attack again nice so any malware that's

526
00:20:00,879 --> 00:20:02,320
running on the system even if it's just

527
00:20:02,320 --> 00:20:04,179
running normal user it's able to

528
00:20:04,179 --> 00:20:06,789
enumerate the webcam and detect that a

529
00:20:06,789 --> 00:20:08,769
legitimate session has occurred and then

530
00:20:08,769 --> 00:20:11,619
can start recording often you can also

531
00:20:11,619 --> 00:20:13,989
always record even if the user is simply

532
00:20:13,989 --> 00:20:16,769
broadcasting like I never record myself

533
00:20:16,769 --> 00:20:18,879
when I use my webcam I'm just

534
00:20:18,879 --> 00:20:20,889
broadcasting myself to you know remote

535
00:20:20,889 --> 00:20:21,999
people basically

536
00:20:21,999 --> 00:20:23,799
but again the operating system doesn't

537
00:20:23,799 --> 00:20:25,629
differentiate between broadcasting and

538
00:20:25,629 --> 00:20:27,549
recording so the malware can record off

539
00:20:27,549 --> 00:20:29,399
the webcam even though the users simply

540
00:20:29,399 --> 00:20:32,109
broadcasting themselves and then again

541
00:20:32,109 --> 00:20:33,879
since the LED indicator light is already

542
00:20:33,879 --> 00:20:36,820
in use there's no secondary indication

543
00:20:36,820 --> 00:20:39,220
that some secondary process has jumped

544
00:20:39,220 --> 00:20:41,080
into this existing webcam session and is

545
00:20:41,080 --> 00:20:44,739
recording off the device so as an avid

546
00:20:44,739 --> 00:20:46,869
Mac user that kind of bummed me out like

547
00:20:46,869 --> 00:20:49,149
I really wanted to know if some

548
00:20:49,149 --> 00:20:51,549
undetected malware on my system was

549
00:20:51,549 --> 00:20:54,279
performing this attack and more simply

550
00:20:54,279 --> 00:20:57,220
you know who was using the webcam so

551
00:20:57,220 --> 00:20:58,690
there are some tools that can tell you

552
00:20:58,690 --> 00:21:01,090
when the webcam is activated and not to

553
00:21:01,090 --> 00:21:03,279
knock those tools but you know the

554
00:21:03,279 --> 00:21:04,899
lights gonna come on as well so the

555
00:21:04,899 --> 00:21:06,489
tools gonna pop up saying the webcam is

556
00:21:06,489 --> 00:21:08,019
activated and you're like yeah the light

557
00:21:08,019 --> 00:21:10,059
went on as well but these tools don't

558
00:21:10,059 --> 00:21:12,309
tell you who is using the webcam if you

559
00:21:12,309 --> 00:21:13,690
just started to FaceTime yeah it's gonna

560
00:21:13,690 --> 00:21:15,729
be FaceTime but it might be one of these

561
00:21:15,729 --> 00:21:17,769
malware samples I mentioned that you

562
00:21:17,769 --> 00:21:19,720
know arbitrarily starts recording so if

563
00:21:19,720 --> 00:21:21,249
you're sitting at your desk and all of a

564
00:21:21,249 --> 00:21:24,220
sudden the light pops on you know it

565
00:21:24,220 --> 00:21:25,989
would be nice to know what process what

566
00:21:25,989 --> 00:21:28,059
task triggered that and of course these

567
00:21:28,059 --> 00:21:29,830
tools also don't tell you if there's any

568
00:21:29,830 --> 00:21:31,659
secondary processes that are jumping

569
00:21:31,659 --> 00:21:33,700
into the existing stream and recording

570
00:21:33,700 --> 00:21:36,820
off that so I wanted to write a tool

571
00:21:36,820 --> 00:21:38,940
that would provide me this information

572
00:21:38,940 --> 00:21:42,340
basically it would tell me whenever any

573
00:21:42,340 --> 00:21:44,440
process access to the webcam would tell

574
00:21:44,440 --> 00:21:47,019
me what or who that process was and then

575
00:21:47,019 --> 00:21:48,849
if any secondary processes jumped in and

576
00:21:48,849 --> 00:21:50,919
piggybacked off that session I wanted to

577
00:21:50,919 --> 00:21:54,070
know about that fact as well so in three

578
00:21:54,070 --> 00:21:56,649
steps it's pretty conceptually simple

579
00:21:56,649 --> 00:21:58,299
the first thing we do is we can register

580
00:21:58,299 --> 00:22:00,940
for webcam notifications just like the

581
00:22:00,940 --> 00:22:03,279
malware does and then what we can do is

582
00:22:03,279 --> 00:22:05,049
we can identify the consumer process

583
00:22:05,049 --> 00:22:07,629
that is the process that's using the

584
00:22:07,629 --> 00:22:10,210
webcam and then while the webcam is in

585
00:22:10,210 --> 00:22:12,550
use we can basically monitor the web

586
00:22:12,550 --> 00:22:14,500
to see if any secondary consumer

587
00:22:14,500 --> 00:22:16,270
processes are jumping in to piggyback

588
00:22:16,270 --> 00:22:18,310
off that session so conceptually this is

589
00:22:18,310 --> 00:22:22,270
what the tool was set to do so releasing

590
00:22:22,270 --> 00:22:24,210
the tool today it's free it's called

591
00:22:24,210 --> 00:22:27,820
oversight now I know there's some

592
00:22:27,820 --> 00:22:29,890
companies that say if a tool is free you

593
00:22:29,890 --> 00:22:31,150
know you were the product and blah blah

594
00:22:31,150 --> 00:22:31,810
blah

595
00:22:31,810 --> 00:22:33,880
but you know I selfishly wrote this tool

596
00:22:33,880 --> 00:22:36,040
to basically protect my Mac again love

597
00:22:36,040 --> 00:22:37,930
my Mac of drink the apple juice but I

598
00:22:37,930 --> 00:22:39,070
figured sharing is caring

599
00:22:39,070 --> 00:22:41,260
so that's why I'm releasing it for free

600
00:22:41,260 --> 00:22:42,790
you know doesn't collect any information

601
00:22:42,790 --> 00:22:46,150
about the user just does its thing so

602
00:22:46,150 --> 00:22:47,110
what does oversight

603
00:22:47,110 --> 00:22:49,000
do so oversight can detect when the

604
00:22:49,000 --> 00:22:52,270
internal mic microphone or webcam is

605
00:22:52,270 --> 00:22:54,610
activated but more importantly it can

606
00:22:54,610 --> 00:22:58,210
also identify who is using the the

607
00:22:58,210 --> 00:23:00,280
webcam the process that is and then I

608
00:23:00,280 --> 00:23:01,870
can also tell you if anything is jumping

609
00:23:01,870 --> 00:23:04,780
in and secondarily piggybacking off that

610
00:23:04,780 --> 00:23:06,670
so what it does is when it to Texas

611
00:23:06,670 --> 00:23:08,950
it'll generate an alert in the Mac

612
00:23:08,950 --> 00:23:11,080
notification and can allow the user to

613
00:23:11,080 --> 00:23:14,110
allow or block you know I know some

614
00:23:14,110 --> 00:23:15,610
users are just gonna click allow that's

615
00:23:15,610 --> 00:23:17,410
a problem I don't think I'll ever solve

616
00:23:17,410 --> 00:23:19,780
but it also logs this information to

617
00:23:19,780 --> 00:23:22,450
syslog so in a corporate environment you

618
00:23:22,450 --> 00:23:24,280
know a sysadmin could pull the SIS logs

619
00:23:24,280 --> 00:23:26,680
and determine when the camera is you

620
00:23:26,680 --> 00:23:28,180
know being activated when the mic is

621
00:23:28,180 --> 00:23:30,130
turned on and so maybe reactively do

622
00:23:30,130 --> 00:23:32,050
some analysis on those logs to maybe

623
00:23:32,050 --> 00:23:34,390
detect some otherwise undetected malware

624
00:23:34,390 --> 00:23:36,340
or maybe just see you know what

625
00:23:36,340 --> 00:23:40,030
employees are using the webcam so under

626
00:23:40,030 --> 00:23:42,190
the hood oversight is designed in the

627
00:23:42,190 --> 00:23:44,290
following manner there's two components

628
00:23:44,290 --> 00:23:46,810
there's a login item and an X PC service

629
00:23:46,810 --> 00:23:49,990
so the login item runs every time the

630
00:23:49,990 --> 00:23:51,940
user logs in and it does a few things

631
00:23:51,940 --> 00:23:53,890
first thing is it can display a status

632
00:23:53,890 --> 00:23:55,840
menu which shows you the activated

633
00:23:55,840 --> 00:23:58,120
devices so if the cameras active in the

634
00:23:58,120 --> 00:24:00,790
mic it allows a user to configure the

635
00:24:00,790 --> 00:24:02,470
app you know nothing too special there

636
00:24:02,470 --> 00:24:04,300
and then it also monitors for audio and

637
00:24:04,300 --> 00:24:06,280
video changes using the methods we

638
00:24:06,280 --> 00:24:08,200
described earlier and then it will

639
00:24:08,200 --> 00:24:09,760
generate alerts to the user because it's

640
00:24:09,760 --> 00:24:11,950
running in the desktop session so it's

641
00:24:11,950 --> 00:24:13,690
able to display notifications to the

642
00:24:13,690 --> 00:24:16,780
user the other piece is an authorized X

643
00:24:16,780 --> 00:24:18,520
PC service that's running as root and

644
00:24:18,520 --> 00:24:20,020
the reason it needs to run as root is

645
00:24:20,020 --> 00:24:22,600
twofold first and we'll talk about this

646
00:24:22,600 --> 00:24:24,790
on the next slide it is responsible for

647
00:24:24,790 --> 00:24:26,240
identifying the

648
00:24:26,240 --> 00:24:28,010
or process or processes that is

649
00:24:28,010 --> 00:24:30,380
detecting who or what is using the

650
00:24:30,380 --> 00:24:32,540
webcam and then it also can kill the

651
00:24:32,540 --> 00:24:35,390
process so if the user clicks block you

652
00:24:35,390 --> 00:24:36,530
know the malware might be running as

653
00:24:36,530 --> 00:24:38,480
root the login item is running as the

654
00:24:38,480 --> 00:24:40,280
user in the user session so it doesn't

655
00:24:40,280 --> 00:24:41,870
necessarily have the correct privileges

656
00:24:41,870 --> 00:24:44,870
to kill that process so if if the user

657
00:24:44,870 --> 00:24:46,700
clicks block that just sends an X PC

658
00:24:46,700 --> 00:24:48,470
message to the service and the X PC

659
00:24:48,470 --> 00:24:49,700
service will then terminate the

660
00:24:49,700 --> 00:24:52,970
application so one of the main features

661
00:24:52,970 --> 00:24:55,850
of oversight is its ability to find and

662
00:24:55,850 --> 00:24:58,010
identify the initial consumer process

663
00:24:58,010 --> 00:25:00,740
but then subsequent ones as well and

664
00:25:00,740 --> 00:25:01,850
this is I think it's really the coolest

665
00:25:01,850 --> 00:25:04,490
feature of utility so it turns out this

666
00:25:04,490 --> 00:25:06,740
is really not or wasn't trivial to do as

667
00:25:06,740 --> 00:25:08,660
far as I know like I emailed Apple I

668
00:25:08,660 --> 00:25:11,090
said hey I know the webcam is on how do

669
00:25:11,090 --> 00:25:13,490
I find out who's using it and they

670
00:25:13,490 --> 00:25:15,230
didn't have a good answer and Stack

671
00:25:15,230 --> 00:25:17,210
Overflow same thing so I ended up

672
00:25:17,210 --> 00:25:18,770
chatting with some security researchers

673
00:25:18,770 --> 00:25:21,620
Jonathan Levin who wrote the OS X and

674
00:25:21,620 --> 00:25:23,750
iOS internals book awesome guy and

675
00:25:23,750 --> 00:25:25,910
another guy Simon from a company named

676
00:25:25,910 --> 00:25:27,890
iveco and they were both really super

677
00:25:27,890 --> 00:25:29,540
helpful and gave me some good ideas so

678
00:25:29,540 --> 00:25:31,880
definitely want to give them some credit

679
00:25:31,880 --> 00:25:35,030
so basically the reason this all works

680
00:25:35,030 --> 00:25:38,929
is any time a process goes and uses the

681
00:25:38,929 --> 00:25:41,270
webcam under the hood the frameworks

682
00:25:41,270 --> 00:25:44,030
send a mock message to the camera

683
00:25:44,030 --> 00:25:45,890
assistants process now the ax camera

684
00:25:45,890 --> 00:25:47,510
assistant process is just an apple

685
00:25:47,510 --> 00:25:48,650
daemon that's kind of running in the

686
00:25:48,650 --> 00:25:51,200
background so what oversight does is

687
00:25:51,200 --> 00:25:53,390
monitor that camera assistant process

688
00:25:53,390 --> 00:25:56,090
and simply sees who sends mock messages

689
00:25:56,090 --> 00:25:57,950
to this because again every application

690
00:25:57,950 --> 00:26:02,120
every process every task that starts to

691
00:26:02,120 --> 00:26:03,650
use the webcam even if the webcam is

692
00:26:03,650 --> 00:26:06,290
already in use will send a mock message

693
00:26:06,290 --> 00:26:08,030
to that like that's the Apple low-level

694
00:26:08,030 --> 00:26:10,340
API is doing that the frameworks so now

695
00:26:10,340 --> 00:26:12,590
we have some candidate process turns out

696
00:26:12,590 --> 00:26:14,390
though that some other processes also

697
00:26:14,390 --> 00:26:16,280
send mock messages to that same camera

698
00:26:16,280 --> 00:26:18,290
assistant daemon so we got to somehow

699
00:26:18,290 --> 00:26:20,240
filter out in post process those so that

700
00:26:20,240 --> 00:26:22,550
we can correctly identify the consumer

701
00:26:22,550 --> 00:26:25,190
process so what we can do is once we get

702
00:26:25,190 --> 00:26:27,500
some candidate applications for example

703
00:26:27,500 --> 00:26:29,780
we see Skype sent a mock message and

704
00:26:29,780 --> 00:26:31,610
maybe another daemon we can simply

705
00:26:31,610 --> 00:26:34,280
analyze those processes so for example

706
00:26:34,280 --> 00:26:35,809
we can see what libraries it's loaded

707
00:26:35,809 --> 00:26:38,480
and also we can see thread back traces

708
00:26:38,480 --> 00:26:40,190
to see if that application

709
00:26:40,190 --> 00:26:42,590
is actively monitoring or recording off

710
00:26:42,590 --> 00:26:44,330
the webcam so again this is not an exact

711
00:26:44,330 --> 00:26:46,220
science but it's nice because it's all

712
00:26:46,220 --> 00:26:47,960
user mode you don't have to use a kernel

713
00:26:47,960 --> 00:26:49,850
extension and in all my testing it's

714
00:26:49,850 --> 00:26:53,059
it's very very accurate all right

715
00:26:53,059 --> 00:26:56,059
so speaking of free OSX tools this is

716
00:26:56,059 --> 00:26:57,320
not a sales pitch because everything's

717
00:26:57,320 --> 00:26:59,809
free I just wanted to briefly mention my

718
00:26:59,809 --> 00:27:02,690
personal Mac security website I write a

719
00:27:02,690 --> 00:27:05,269
lot of Mac software kind of like

720
00:27:05,269 --> 00:27:07,360
sysinternals stuff for for Mac's

721
00:27:07,360 --> 00:27:09,950
we have task Explorer it's kind of like

722
00:27:09,950 --> 00:27:11,960
process explorers on Windows you can

723
00:27:11,960 --> 00:27:13,940
show you all running tasks open files

724
00:27:13,940 --> 00:27:15,740
and network connections but can also

725
00:27:15,740 --> 00:27:18,500
show you all encrypted processes or

726
00:27:18,500 --> 00:27:20,149
packed files that are running on your

727
00:27:20,149 --> 00:27:22,370
system knock knock is pretty much Auto

728
00:27:22,370 --> 00:27:24,500
runs for Mac shows you everything that's

729
00:27:24,500 --> 00:27:26,120
persisting on your computer

730
00:27:26,120 --> 00:27:28,070
block block is utility that simply

731
00:27:28,070 --> 00:27:30,049
monitors those persistence locations

732
00:27:30,049 --> 00:27:32,029
it's kind of like a firewall for those

733
00:27:32,029 --> 00:27:33,470
persistence locations so if anything

734
00:27:33,470 --> 00:27:36,710
tries to persist like all Mac now where

735
00:27:36,710 --> 00:27:38,419
these are we got alert saying you know

736
00:27:38,419 --> 00:27:40,549
process X this flash update you just

737
00:27:40,549 --> 00:27:41,929
downloaded from the internet it's trying

738
00:27:41,929 --> 00:27:43,490
to persist the log in item and then they

739
00:27:43,490 --> 00:27:46,759
can block it ransomware is another free

740
00:27:46,759 --> 00:27:48,710
utility it basically monitors the file

741
00:27:48,710 --> 00:27:51,500
system looking for the rapid creation of

742
00:27:51,500 --> 00:27:53,899
encrypted files by untrusted processes

743
00:27:53,899 --> 00:27:56,029
back ransomware is not that

744
00:27:56,029 --> 00:27:57,500
sophisticated so it can generically

745
00:27:57,500 --> 00:28:00,850
detect Mac ransomware really well

746
00:28:00,850 --> 00:28:04,009
alright so that's a wrap thank you so

747
00:28:04,009 --> 00:28:05,210
much for attending I also want to thank

748
00:28:05,210 --> 00:28:07,309
virus bulletin for again putting on an

749
00:28:07,309 --> 00:28:09,169
incredible conference we have two

750
00:28:09,169 --> 00:28:11,509
minutes so if there's any questions I

751
00:28:11,509 --> 00:28:14,950
will entertain those yes in the back

752
00:28:14,950 --> 00:28:17,539
don't ask any hard ones all right this

753
00:28:17,539 --> 00:28:20,389
is it's been very interesting but in

754
00:28:20,389 --> 00:28:23,120
terms of being an attack tool it sounds

755
00:28:23,120 --> 00:28:26,450
like it's an extremely expensive way for

756
00:28:26,450 --> 00:28:28,940
an attacker to attack unless I'm missing

757
00:28:28,940 --> 00:28:31,870
something it sounds like if you have a

758
00:28:31,870 --> 00:28:34,429
many to one because it's got to send the

759
00:28:34,429 --> 00:28:36,409
file back somewhere so if you have a

760
00:28:36,409 --> 00:28:38,570
many to one relationship then you're

761
00:28:38,570 --> 00:28:43,009
gonna have dozens of hours of video to

762
00:28:43,009 --> 00:28:44,809
sift through to look get what you're

763
00:28:44,809 --> 00:28:48,259
wanting if it's a one to one attack then

764
00:28:48,259 --> 00:28:50,480
you have to one know the victims using a

765
00:28:50,480 --> 00:28:52,530
Mac two

766
00:28:52,530 --> 00:28:54,810
probably know when they're going to use

767
00:28:54,810 --> 00:28:56,940
it in like a business meeting something

768
00:28:56,940 --> 00:28:59,820
that you're interested in and get them

769
00:28:59,820 --> 00:29:01,560
to install the malware in the first

770
00:29:01,560 --> 00:29:03,090
place can you see where this could be

771
00:29:03,090 --> 00:29:05,160
scalable yeah definitely I guess maybe

772
00:29:05,160 --> 00:29:07,080
my background is skewed what I think is

773
00:29:07,080 --> 00:29:09,330
possible or not but I would argue that

774
00:29:09,330 --> 00:29:10,980
you know there's actually some benefits

775
00:29:10,980 --> 00:29:11,400
to this

776
00:29:11,400 --> 00:29:13,020
so yes the prerequisite is there has to

777
00:29:13,020 --> 00:29:14,820
be malware on the system but we've seen

778
00:29:14,820 --> 00:29:16,110
there's a lot of Mac malware out there

779
00:29:16,110 --> 00:29:18,300
that gets on to the user system once

780
00:29:18,300 --> 00:29:20,160
there's an infection I kind of see this

781
00:29:20,160 --> 00:29:23,220
capability as a way to improve existing

782
00:29:23,220 --> 00:29:25,200
Mac baauer where the existing Mac

783
00:29:25,200 --> 00:29:27,210
malware is already webcam aware and will

784
00:29:27,210 --> 00:29:28,860
start recording the user arbitrarily

785
00:29:28,860 --> 00:29:30,540
which as you said will generate hours

786
00:29:30,540 --> 00:29:32,580
and hours of video using this capability

787
00:29:32,580 --> 00:29:35,010
the recording will only trigger when the

788
00:29:35,010 --> 00:29:37,770
user is actively using the webcam which

789
00:29:37,770 --> 00:29:39,270
is probably what the malware simply

790
00:29:39,270 --> 00:29:41,610
wants to record as well so basically

791
00:29:41,610 --> 00:29:44,220
it's a way for existing Mac malware to

792
00:29:44,220 --> 00:29:47,010
improve its recording capabilities in a

793
00:29:47,010 --> 00:29:49,230
way that the LED indicator light doesn't

794
00:29:49,230 --> 00:29:51,150
go on as a direct result of the malware

795
00:29:51,150 --> 00:29:53,340
so it's basically just a way to improve

796
00:29:53,340 --> 00:29:57,060
that that make sense okay we're at a

797
00:29:57,060 --> 00:29:59,280
time okay Patrick first I want to thank

798
00:29:59,280 --> 00:30:01,260
you for writing oversight and sharing

799
00:30:01,260 --> 00:30:02,880
your tools with us thank you great

800
00:30:02,880 --> 00:30:06,090
presentation please join me in thanking

801
00:30:06,090 --> 00:30:07,400
him for his presentation

802
00:30:07,400 --> 00:30:12,900
[Applause]

